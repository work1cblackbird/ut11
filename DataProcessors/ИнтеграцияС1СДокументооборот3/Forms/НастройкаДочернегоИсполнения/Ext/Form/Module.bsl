#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗагрузитьНастройкиИсполненияВФорму();
	
	Если Не ИнтеграцияС1СДокументооборот3КлиентСервер.ИдентификаторЗаполнен(ИдентификаторПроверяющего) Тогда
		ИдентификаторПроверяющего = Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
	
	УстановитьДоступность();
	НастроитьВидимостьЭлементовУправленияПриСозданииФормы();
	Команды.РазныеСроки.Подсказка = ИнтеграцияС1СДокументооборот3.ПодсказкаКнопкиРазныеСрокиДействия(Ложь, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаполнитьПредставлениеСроков();
	УстановитьПометкуКнопкиРазныеСроки();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура АвторИсполненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИнтеграцияС1СДокументооборот3Клиент.ВыбратьСотрудникаИзДереваПодразделений("АвторИсполнения", ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура АвторИсполненияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
		"АвторИсполнения",
		ВыбранноеЗначение,
		СтандартнаяОбработка,
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура АвторИсполненияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание,
		СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
			"DMEmployee",
			ДанныеВыбора,
			Текст,
			СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвторИсполненияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
		СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
			"DMEmployee",
			ДанныеВыбора,
			Текст,
			СтандартнаяОбработка);
		
		Если ДанныеВыбора.Количество() = 1 Тогда
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
				"АвторИсполнения",
				ДанныеВыбора[0].Значение,
				СтандартнаяОбработка,
				ЭтотОбъект);
			СтандартнаяОбработка = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвторИсполненияОчистка(Элемент, СтандартнаяОбработка)
	
	АвторИсполнения = "";
	АвторИсполненияID = "";
	АвторИсполненияТип = "";
	АвторИсполненияПредставление = "";
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерИсполненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("КонтролерИсполненияНачалоВыбораЗавершение", ЭтотОбъект);
	ОткрытьФорму(
		"Обработка.ИнтеграцияС1СДокументооборот3.Форма.АдреснаяКнига",,
		ЭтотОбъект,,,,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерИсполненияНачалоВыбораЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Результат.Свойство("Исполнитель", Контролер);
	Результат.Свойство("ИсполнительID", КонтролерID);
	Результат.Свойство("ИсполнительТип", КонтролерТип);
	
	Результат.Свойство("ОсновнойОбъектАдресации", ОсновнойОбъектАдресацииКонтролер);
	Результат.Свойство("ОсновнойОбъектАдресацииID", ОсновнойОбъектАдресацииКонтролерID);
	Результат.Свойство("ОсновнойОбъектАдресацииТип", ОсновнойОбъектАдресацииКонтролерТип);
	
	Результат.Свойство("ДополнительныйОбъектАдресации", ДополнительныйОбъектАдресацииКонтролер);
	Результат.Свойство("ДополнительныйОбъектАдресацииID", ДополнительныйОбъектАдресацииКонтролерID);
	Результат.Свойство("ДополнительныйОбъектАдресацииТип", ДополнительныйОбъектАдресацииКонтролерТип);
	
	КонтролерПредставление = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ПредставлениеУчастникаЗадачи(
		Контролер,
		ОсновнойОбъектАдресацииКонтролер,
		ДополнительныйОбъектАдресацииКонтролер);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерИсполненияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОчиститьПолеКонтролерИсполнения();
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
		"Контролер",
		ВыбранноеЗначение,
		СтандартнаяОбработка,
		ЭтотОбъект);
	КонтролерПредставление = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ПредставлениеУчастникаЗадачи(
		Контролер,
		ОсновнойОбъектАдресацииКонтролер,
		ДополнительныйОбъектАдресацииКонтролер);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерИсполненияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание,
		СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
			"DMEmployee",
			ДанныеВыбора,
			Текст,
			СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерИсполненияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
		СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
			"DMEmployee",
			ДанныеВыбора,
			Текст,
			СтандартнаяОбработка);
		
		Если ДанныеВыбора.Количество() = 1 Тогда
			ОчиститьПолеКонтролерИсполнения();
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
				"Контролер",
				ДанныеВыбора[0].Значение,
				СтандартнаяОбработка,
				ЭтотОбъект);
			КонтролерПредставление =
				ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ПредставлениеУчастникаЗадачи(
					Контролер,
					ОсновнойОбъектАдресацииКонтролер,
					ДополнительныйОбъектАдресацииКонтролер);
			СтандартнаяОбработка = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерИсполненияОчистка(Элемент, СтандартнаяОбработка)
	
	ОчиститьПолеКонтролерИсполнения();
	КонтролерПредставление = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ПредставлениеУчастникаЗадачи(
		Контролер,
		ОсновнойОбъектАдресацииКонтролер,
		ДополнительныйОбъектАдресацииКонтролер);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийИсполненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ПроверяющийИсполненияНачалоВыбораЗавершение", ЭтотОбъект);
	ОткрытьФорму(
		"Обработка.ИнтеграцияС1СДокументооборот3.Форма.АдреснаяКнига",,
		ЭтотОбъект,,,,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийИсполненияНачалоВыбораЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Результат.Свойство("Исполнитель", Проверяющий);
	Результат.Свойство("ИсполнительID", ПроверяющийID);
	Результат.Свойство("ИсполнительТип", ПроверяющийТип);
	
	Результат.Свойство("ОсновнойОбъектАдресации", ОсновнойОбъектАдресацииПроверяющий);
	Результат.Свойство("ОсновнойОбъектАдресацииID", ОсновнойОбъектАдресацииПроверяющийID);
	Результат.Свойство("ОсновнойОбъектАдресацииТип", ОсновнойОбъектАдресацииПроверяющийТип);
	
	Результат.Свойство("ДополнительныйОбъектАдресации", ДополнительныйОбъектАдресацииПроверяющий);
	Результат.Свойство("ДополнительныйОбъектАдресацииID", ДополнительныйОбъектАдресацииПроверяющийID);
	Результат.Свойство("ДополнительныйОбъектАдресацииТип", ДополнительныйОбъектАдресацииПроверяющийТип);
	
	ПроверяющийПредставление =
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ПредставлениеУчастникаЗадачи(
			Проверяющий,
			ОсновнойОбъектАдресацииПроверяющий,
			ДополнительныйОбъектАдресацииПроверяющий);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийИсполненияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОчиститьПолеПроверяющийИсполнения();
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
		"Проверяющий",
		ВыбранноеЗначение,
		СтандартнаяОбработка,
		ЭтотОбъект);
	ПроверяющийПредставление =
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ПредставлениеУчастникаЗадачи(
			Проверяющий,
			ОсновнойОбъектАдресацииПроверяющий,
			ДополнительныйОбъектАдресацииПроверяющий);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийИсполненияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание,
		СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
			"DMEmployee",
			ДанныеВыбора,
			Текст,
			СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийИсполненияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
		СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
			"DMEmployee",
			ДанныеВыбора,
			Текст,
			СтандартнаяОбработка);
		
		Если ДанныеВыбора.Количество() = 1 Тогда
			ОчиститьПолеПроверяющийИсполнения();
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
				"Проверяющий",
				ДанныеВыбора[0].Значение,
				СтандартнаяОбработка,
				ЭтотОбъект);
			ПроверяющийПредставление =
				ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ПредставлениеУчастникаЗадачи(
					Проверяющий,
					ОсновнойОбъектАдресацииПроверяющий,
					ДополнительныйОбъектАдресацииПроверяющий);
			СтандартнаяОбработка = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийИсполненияОчистка(Элемент, СтандартнаяОбработка)
	
	ОчиститьПолеПроверяющийИсполнения();
	ПроверяющийПредставление =
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ПредставлениеУчастникаЗадачи(
			Проверяющий,
			ОсновнойОбъектАдресацииПроверяющий,
			ДополнительныйОбъектАдресацииПроверяющий);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СрокПриИзменении(Элемент)
	
	Если Срок = СрокПриОткрытии Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыИзмененияСрока = ИнтеграцияС1СДокументооборот3КлиентСервер.ПараметрыИзмененияСрокаПоПредставлению();
	
	СрокПредставление = Формат(Срок, НСтр("ru = 'ДФ=''dd.MM.yy HH:mm'';'"));
	Срок = Неопределено;
	
	РезультатЗаполнения = ИнтеграцияС1СДокументооборот3ВызовСервера.ИзменитьСрокИсполненияПоПредставлению(
		Срок,
		СрокДни,
		СрокЧасы,
		СрокМинуты,
		"ExactDate",
		СрокПредставление,
		ПараметрыИзмененияСрока);
	
	Если РезультатЗаполнения Тогда
		Для Каждого СтрокаИсполнители Из ИсполнителиИсполнения Цикл
			Если СтрокаИсполнители.СрокИсполнения = СрокПриОткрытии Тогда
				СтрокаИсполнители.СрокИсполнения = Срок;
			КонецЕсли;
		КонецЦикла;
		СрокПриОткрытии = Срок;
		ЗаполнитьПредставлениеСроков();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыИзмененияСрока.ТекстСообщенияПредупреждения) Тогда
		ПоказатьПредупреждение(, ПараметрыИзмененияСрока.ТекстСообщенияПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СрокОбработкиРезультатовПредставлениеПриИзменении(Элемент)
	
	ПараметрыИзмененияСрока = ИнтеграцияС1СДокументооборот3КлиентСервер.ПараметрыИзмененияСрокаПоПредставлению();
	ПараметрыИзмененияСрока.Исполнитель = Проверяющий;
	ПараметрыИзмененияСрока.ИсполнительID = ПроверяющийID;
	ПараметрыИзмененияСрока.ИсполнительТип = ПроверяющийТип;
	ПараметрыИзмененияСрока.ОсновнойОбъектАдресацииИсполнитель = ОсновнойОбъектАдресацииПроверяющий;
	ПараметрыИзмененияСрока.ОсновнойОбъектАдресацииИсполнительID = ОсновнойОбъектАдресацииПроверяющийID;
	ПараметрыИзмененияСрока.ОсновнойОбъектАдресацииИсполнительТип = ОсновнойОбъектАдресацииПроверяющийТип;
	ПараметрыИзмененияСрока.ДополнительныйОбъектАдресацииИсполнитель = ДополнительныйОбъектАдресацииПроверяющий;
	ПараметрыИзмененияСрока.ДополнительныйОбъектАдресацииИсполнительID = ДополнительныйОбъектАдресацииПроверяющийID;
	ПараметрыИзмененияСрока.ДополнительныйОбъектАдресацииИсполнительТип = ДополнительныйОбъектАдресацииПроверяющийТип;
	
	РезультатЗаполнения = ИнтеграцияС1СДокументооборот3ВызовСервера.ИзменитьСрокИсполненияПоПредставлению(
		СрокОбработкиРезультатовИсполнения,
		СрокОбработкиРезультатовДниИсполнения,
		СрокОбработкиРезультатовЧасыИсполнения,
		СрокОбработкиРезультатовМинутыИсполнения,
		ВариантУстановкиСрокаОбработкиРезультатовИсполнения,
		СрокОбработкиРезультатовИсполненияПредставление,
		ПараметрыИзмененияСрока);
	
	Если РезультатЗаполнения Тогда
		ЗаполнитьПредставлениеСроков();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыИзмененияСрока.ТекстСообщенияПредупреждения) Тогда
		ПоказатьПредупреждение(, ПараметрыИзмененияСрока.ТекстСообщенияПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СрокОбработкиРезультатовПредставлениеРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборот3Клиент.ИзменитьОтносительныйСрок(
		СрокОбработкиРезультатовДниИсполнения,
		СрокОбработкиРезультатовЧасыИсполнения,
		СрокОбработкиРезультатовМинутыИсполнения,
		Направление);
	
	ВариантыУстановкиСрока = ИнтеграцияС1СДокументооборот3КлиентСервер.ВариантыУстановкиСрокаИсполнения();
	ВариантУстановкиСрокаОбработкиРезультатовИсполнения = ВариантыУстановкиСрока.ОтносительныйСрок;
	СрокОбработкиРезультатовИсполнения = Дата(1,1,1);
	
	Модифицированность = Истина;
	
	ЗаполнитьПредставлениеСроков();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИсполнителиИсполнения

&НаКлиенте
Процедура ИсполнителиИсполненияПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ИсполнителиИсполнения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Индекс = ИсполнителиИсполнения.Индекс(ТекущиеДанные);
	ЭтоПервыйЭлемент = (Индекс = 0);
	
	Элементы.ИсполнителиСрокИсполненияПредставление.ТолькоПросмотр = ТекущиеДанные.Недоступно
		Или МожноТолькоДобавлятьУчастников И Не ЭтоПервыйЭлемент;
	
	СостояниеЗавершено = (ТекущиеДанные.Состояние = "Completed");
	
	Элементы.ИсполнителиИсполненияКонтекстноеМенюДобавить.Доступность = Не ТекущиеДанные.Недоступно
		Или МожноТолькоДобавлятьУчастников;
	Элементы.ИсполнителиИсполненияКонтекстноеМенюУдалить.Доступность = Не СостояниеЗавершено
		И Не ТекущиеДанные.Недоступно;
	
	Элементы.ИсполнителиИсполненияИсполнитель.ТолькоПросмотр = ТекущиеДанные.Недоступно;
	Элементы.ИсполнителиИсполненияИсполнитель.РедактированиеТекста = Не СостояниеЗавершено И Не ТекущиеДанные.Недоступно;
	Элементы.ИсполнителиИсполненияИсполнитель.КнопкаВыбора = Не СостояниеЗавершено И Не ТекущиеДанные.Недоступно;
	Элементы.ПереместитьВверх.Доступность = Не СостояниеЗавершено;
	Элементы.ПереместитьВниз.Доступность = Не СостояниеЗавершено;
	Элементы.НазначитьОтветственным.Доступность = Не СостояниеЗавершено И ИсполнителиИсполнения.Количество() > 1;
	
	Если Не ИзменениеРазрешено Тогда
		Элементы.ПереместитьВверх.Доступность = Ложь;
		Элементы.ПереместитьВниз.Доступность = Ложь;
		Элементы.ИсполнителиИсполнения.ИзменятьПорядокСтрок = МожноТолькоДобавлятьУчастников;
	КонецЕсли;
	
	ОбновитьДоступностьКомандПеремещенияИНазначитьОтветственным();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиИсполненияПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ИсполнителиИсполнения.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И (ТекущиеДанные.Состояние = "Completed" Или ТекущиеДанные.Недоступно) Тогда
		// Завершенные задачи, а также в режиме настройки действия "Разрешено добавлять" нельзя удалять.
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиИсполненияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ИсполнителиИсполнения.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		
		Если ИсполнителиИсполнения[0].Ответственный Тогда
			ИндексПервойСтроки = 1;
		Иначе
			ИндексПервойСтроки = 0;
		КонецЕсли;
		
		СтрПервогоИсполнителя = ИсполнителиИсполнения[ИндексПервойСтроки];
		
		Если СтрПервогоИсполнителя.ВариантУстановкиСрокаИсполнения = "ExactDate" Тогда
			ТекущиеДанные.СрокИсполнения = СтрПервогоИсполнителя.СрокИсполнения;
		Иначе
			ТекущиеДанные.СрокИсполненияДни = СтрПервогоИсполнителя.СрокИсполненияДни;
			ТекущиеДанные.СрокИсполненияЧасы = СтрПервогоИсполнителя.СрокИсполненияЧасы;
			ТекущиеДанные.СрокИсполненияМинуты = СтрПервогоИсполнителя.СрокИсполненияМинуты;
		КонецЕсли;
		
		ТекущиеДанные.ВариантУстановкиСрокаИсполнения = СтрПервогоИсполнителя.ВариантУстановкиСрокаИсполнения;
		
		ТекущиеДанные.СрокИсполненияПредставление =
			ИнтеграцияС1СДокументооборот3КлиентСервер.ПредставлениеСрокаИсполнения(
				ТекущиеДанные.СрокИсполнения,
				ТекущиеДанные.СрокИсполненияДни,
				ТекущиеДанные.СрокИсполненияЧасы,
				ТекущиеДанные.СрокИсполненияМинуты,
				ИспользоватьДатуИВремяВСрокахЗадач,
				ТекущиеДанные.ВариантУстановкиСрокаИсполнения);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Срок)
			И Не ЗначениеЗаполнено(ТекущиеДанные.СрокИсполнения)
			И Не ЗначениеЗаполнено(ТекущиеДанные.СрокИсполненияДни)
			И Не ЗначениеЗаполнено(ТекущиеДанные.СрокИсполненияЧасы)
			И Не ЗначениеЗаполнено(ТекущиеДанные.СрокИсполненияМинуты) Тогда
		ТекущиеДанные.СрокИсполнения = Срок;
		ТекущиеДанные.ВариантУстановкиСрокаИсполнения = "ExactDate";
		
		ТекущиеДанные.СрокИсполненияПредставление =
			ИнтеграцияС1СДокументооборот3КлиентСервер.ПредставлениеСрокаИсполнения(
				ТекущиеДанные.СрокИсполнения,
				ТекущиеДанные.СрокИсполненияДни,
				ТекущиеДанные.СрокИсполненияЧасы,
				ТекущиеДанные.СрокИсполненияМинуты,
				ИспользоватьДатуИВремяВСрокахЗадач,
				ТекущиеДанные.ВариантУстановкиСрокаИсполнения);
	КонецЕсли;
	
	ОбновитьДоступностьКомандПеремещения();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиИсполненияПослеУдаления(Элемент)
	
	Если ИсполнителиИсполнения.Количество() = 1 И ИсполнителиИсполнения[0].Ответственный Тогда
		НазначитьИсполнителяОтветственным();
	Иначе
		ОбновитьДоступностьКомандПеремещенияИНазначитьОтветственным();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиИсполненияОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Поле Исполнитель

&НаКлиенте
Процедура ИсполнительИсполненияПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительИсполненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ИсполнителиИсполнения.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ТекущиеДанные.Состояние = "Completed" Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ИсполнительИсполненияНачалоВыбораЗавершение", ЭтотОбъект, ТекущиеДанные);
	ОткрытьФорму(
		"Обработка.ИнтеграцияС1СДокументооборот3.Форма.АдреснаяКнига",,
		ЭтотОбъект,,,,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Обработчик события ИсполнительИсполненияНачалоВыбораЗавершение.
//
// Параметры:
//   Результат - Структура:
//     * Исполнитель - Строка
//     * ИсполнительID - Строка
//     * ИсполнительТип - Строка
//     * ОсновнойОбъектАдресации - Строка
//     * ОсновнойОбъектАдресацииID - Строка
//     * ОсновнойОбъектАдресацииТип - Строка
//     * ДополнительныйОбъектАдресации - Строка
//     * ДополнительныйОбъектАдресацииID - Строка
//     * ДополнительныйОбъектАдресацииТип - Строка
//   ТекущиеДанные - ДанныеФормыЭлементДерева
//
&НаКлиенте
Процедура ИсполнительИсполненияНачалоВыбораЗавершение(Результат, ТекущиеДанные) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Результат.Свойство("Исполнитель", ТекущиеДанные.Исполнитель);
	Результат.Свойство("ИсполнительID", ТекущиеДанные.ИсполнительID);
	Результат.Свойство("ИсполнительТип", ТекущиеДанные.ИсполнительТип);
	
	Результат.Свойство("ОсновнойОбъектАдресации", ТекущиеДанные.ОсновнойОбъектАдресацииИсполнитель);
	Результат.Свойство("ОсновнойОбъектАдресацииID", ТекущиеДанные.ОсновнойОбъектАдресацииИсполнительID);
	Результат.Свойство("ОсновнойОбъектАдресацииТип", ТекущиеДанные.ОсновнойОбъектАдресацииИсполнительТип);
	
	Результат.Свойство("ДополнительныйОбъектАдресации", ТекущиеДанные.ДополнительныйОбъектАдресацииИсполнитель);
	Результат.Свойство("ДополнительныйОбъектАдресацииID", ТекущиеДанные.ДополнительныйОбъектАдресацииИсполнительID);
	Результат.Свойство("ДополнительныйОбъектАдресацииТип", ТекущиеДанные.ДополнительныйОбъектАдресацииИсполнительТип);
	
	ТекущиеДанные.ИсполнительПредставление =
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ПредставлениеУчастникаЗадачи(
			ТекущиеДанные.Исполнитель,
			ТекущиеДанные.ОсновнойОбъектАдресацииИсполнитель,
			ТекущиеДанные.ДополнительныйОбъектАдресацииИсполнитель);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительИсполненияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ИсполнителиИсполнения.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ТекущиеДанные.Состояние = "Completed" Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьПолеИсполнитель(ТекущиеДанные);
	ТекущиеДанные.ИсполнительПредставление =
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ПредставлениеУчастникаЗадачи(
			ТекущиеДанные.Исполнитель,
			ТекущиеДанные.ОсновнойОбъектАдресацииИсполнитель,
			ТекущиеДанные.ДополнительныйОбъектАдресацииИсполнитель);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительИсполненияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ИсполнителиИсполнения.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ТекущиеДанные.Состояние = "Completed" Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьПолеИсполнитель(ТекущиеДанные);
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
		"Исполнитель",
		ВыбранноеЗначение,
		СтандартнаяОбработка,
		ЭтотОбъект,
		Истина,
		Элемент);
	ТекущиеДанные.ИсполнительПредставление =
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ПредставлениеУчастникаЗадачи(
			ТекущиеДанные.Исполнитель,
			ТекущиеДанные.ОсновнойОбъектАдресацииИсполнитель,
			ТекущиеДанные.ДополнительныйОбъектАдресацииИсполнитель);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительИсполненияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание,
		СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ИсполнителиИсполнения.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ТекущиеДанные.Состояние = "Completed" Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
			"DMEmployee",
			ДанныеВыбора,
			Текст,
			СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительИсполненияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
		СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ИсполнителиИсполнения.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ТекущиеДанные.Состояние = "Completed" Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
			"DMEmployee",
			ДанныеВыбора,
			Текст,
			СтандартнаяОбработка);
		
		Если ДанныеВыбора.Количество() = 1 Тогда
			ОчиститьПолеИсполнитель(ТекущиеДанные);
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
				"Исполнитель",
				ДанныеВыбора[0].Значение,
				СтандартнаяОбработка,
				ЭтотОбъект,
				Истина,
				Элемент);
			ТекущиеДанные.ИсполнительПредставление =
				ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ПредставлениеУчастникаЗадачи(
					ТекущиеДанные.Исполнитель,
					ТекущиеДанные.ОсновнойОбъектАдресацииИсполнитель,
					ТекущиеДанные.ДополнительныйОбъектАдресацииИсполнитель);
			СтандартнаяОбработка = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Поле ИсполнителиСрокИсполненияПредставление

&НаКлиенте
Процедура ИсполнителиСрокИсполненияПредставлениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ИсполнителиИсполнения.ТекущиеДанные;
	
	ПараметрыИзмененияСрока = ИнтеграцияС1СДокументооборот3КлиентСервер.ПараметрыИзмененияСрокаПоПредставлению();
	ЗаполнитьЗначенияСвойств(ПараметрыИзмененияСрока, ТекущиеДанные);
	
	РезультатЗаполнения = ИнтеграцияС1СДокументооборот3ВызовСервера.ИзменитьСрокИсполненияПоПредставлению(
		ТекущиеДанные.СрокИсполнения,
		ТекущиеДанные.СрокИсполненияДни,
		ТекущиеДанные.СрокИсполненияЧасы,
		ТекущиеДанные.СрокИсполненияМинуты,
		ТекущиеДанные.ВариантУстановкиСрокаИсполнения,
		ТекущиеДанные.СрокИсполненияПредставление,
		ПараметрыИзмененияСрока);
	
	Если РезультатЗаполнения Тогда
		Если Не Элементы.КнопкаРазныеСроки.Пометка Тогда
			ЗаполнитьСрокиИсполненияВТаблицеИсполнителейПоТекущейСтроке(ТекущиеДанные);
		КонецЕсли;
		ЗаполнитьПредставлениеСроков();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыИзмененияСрока.ТекстСообщенияПредупреждения) Тогда
		ПоказатьПредупреждение(, ПараметрыИзмененияСрока.ТекстСообщенияПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиСрокИсполненияПредставлениеРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ИсполнителиИсполнения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборот3Клиент.ИзменитьОтносительныйСрок(
		ТекущиеДанные.СрокИсполненияДни,
		ТекущиеДанные.СрокИсполненияЧасы,
		ТекущиеДанные.СрокИсполненияМинуты,
		Направление);
	
	ВариантыУстановкиСрока = ИнтеграцияС1СДокументооборот3КлиентСервер.ВариантыУстановкиСрокаИсполнения();
	ТекущиеДанные.ВариантУстановкиСрокаИсполнения = ВариантыУстановкиСрока.ОтносительныйСрок;
	ТекущиеДанные.СрокИсполнения = Дата(1,1,1);
	
	Модифицированность = Истина;
	
	Если Не Элементы.КнопкаРазныеСроки.Пометка Тогда
		ЗаполнитьСрокиИсполненияВТаблицеИсполнителейПоТекущейСтроке(ТекущиеДанные);
	КонецЕсли;
	ЗаполнитьПредставлениеСроков();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПереместитьВверх(Команда)
	
	ПереместитьИсполнителя(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВниз(Команда)
	
	ПереместитьИсполнителя(1);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьОтветственным(Команда)
	
	ТекущиеДанные = Элементы.ИсполнителиИсполнения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Состояние = "Completed" Тогда
		ПоказатьПредупреждение(,
			НСтр("ru = 'Сотрудник завершил свою задачу.
				|Изменить признак ""Ответственный"" нельзя.'"));
		Возврат;
	КонецЕсли;
	
	НазначитьИсполнителяОтветственным();
	
КонецПроцедуры

&НаКлиенте
Процедура РазныеСроки(Команда)
	
	Элементы.КнопкаРазныеСроки.Пометка = Не Элементы.КнопкаРазныеСроки.Пометка;
	Если Не Элементы.КнопкаРазныеСроки.Пометка Тогда
		
		// Обратно поставить всем строкам один и тот же срок исполнения:
		Для Каждого СтрокаИсполнителя Из ИсполнителиИсполнения Цикл
			Если СтрокаИсполнителя.Ответственный Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьСрокиИсполненияВТаблицеИсполнителейПоТекущейСтроке(СтрокаИсполнителя);
			Модифицированность = Истина;
			Прервать;
		КонецЦикла;
		Если Модифицированность Тогда
			ЗаполнитьПредставлениеСроков();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Отказ = Ложь;
	
	ПодготовитьНастройкиИсполненияОзнакомленияДляЗаписи();
	ОчиститьСообщения();
	
	Если ПустаяСтрока(НомерПункта) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Поле ""№ пункта"" не заполнено'"),,
			"НомерПункта",, Отказ);
	КонецЕсли;
	Если ПустаяСтрока(ОписаниеИсполнения) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Поле ""Содержание пункта"" не заполнено'"),,
			"ОписаниеИсполнение",, Отказ);
	КонецЕсли;
	// Проверка наличия одного ответственного исполнения в списке.
	Если ИсполнителиИсполнения.Количество() = 1 И ИсполнителиИсполнения[0].Ответственный Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Единственный исполнитель не может быть ответственным.'"),,
			"ИсполнителиИсполнения[0].Исполнитель",,
			Отказ);
	КонецЕсли;
	Если ИсполнителиИсполнения.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не введено ни одной строки в список ""Исполнители""'"),,
			"ИсполнителиИсполнения",, Отказ);
	КонецЕсли;
	
	Для Каждого Строка Из ИсполнителиИсполнения Цикл
		Если Не ЗначениеЗаполнено(Строка.ИсполнительID) Тогда
			Индекс = ИсполнителиИсполнения.Индекс(Строка);
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Не заполнена колонка ""Исполнитель"" в строке %1 списка ""Исполнители""'"),
				Индекс + 1);
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				ТекстОшибки,,
				СтрШаблон("ИсполнителиИсполнения[%1].Исполнитель", Индекс),,
				Отказ);
		КонецЕсли;
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Закрыть(ПодготовитьДанныеПунктаВДействие());
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьДиалог(Команда)
	
	Закрыть(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСебяПроверяющим(Команда)
	
	ОчиститьПолеПроверяющийИсполнения();
	УстановитьСебяПроверяющимНаСервере();
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Клиент

#Область Сроки

&НаКлиенте
Процедура УстановитьПометкуКнопкиРазныеСроки()
	
	ПредыдущийСрок = Неопределено;
	Для Каждого СтрокаУчастника Из ИсполнителиИсполнения Цикл
		Если Не СтрокаУчастника.Ответственный
				И ПредыдущийСрок <> Неопределено
				И ПредыдущийСрок <> СтрокаУчастника.СрокИсполненияПредставление Тогда
			Элементы.КнопкаРазныеСроки.Пометка = Истина;
			Возврат;
		КонецЕсли;
		Если Не СтрокаУчастника.Ответственный Тогда
			ПредыдущийСрок = СтрокаУчастника.СрокИсполненияПредставление;
		КонецЕсли;
	КонецЦикла;
	
	Если МожноТолькоДобавлятьУчастников Тогда
		Элементы.КнопкаРазныеСроки.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСрокиИсполненияВТаблицеИсполнителейПоТекущейСтроке(СтрокаИсполнителя)
	
	КоличествоИсполнителей = ИсполнителиИсполнения.Количество();
	
	Если КоличествоИсполнителей = 0 Или СтрокаИсполнителя.Ответственный Тогда
		Возврат;
	КонецЕсли;
	
	ВариантыУстановкиСрока = ИнтеграцияС1СДокументооборот3КлиентСервер.ВариантыУстановкиСрокаИсполнения();
	
	ВариантУстановкиСрокаИсполнения = СтрокаИсполнителя.ВариантУстановкиСрокаИсполнения;
	
	Если ВариантУстановкиСрокаИсполнения = ВариантыУстановкиСрока.ТочныйСрок Тогда
		СрокИсполнения = СтрокаИсполнителя.СрокИсполнения;
		СрокИсполненияДни = 0;
		СрокИсполненияЧасы = 0;
		СрокИсполненияМинуты = 0;
	Иначе
		СрокИсполнения = Дата(1,1,1);
		СрокИсполненияДни = СтрокаИсполнителя.СрокИсполненияДни;
		СрокИсполненияЧасы = СтрокаИсполнителя.СрокИсполненияЧасы;
		СрокИсполненияМинуты = СтрокаИсполнителя.СрокИсполненияМинуты;
	КонецЕсли;
	
	Если Элементы.КнопкаРазныеСроки.Пометка Тогда
		СтрокаИсполнителя.СрокИсполнения = СрокИсполнения;
		СтрокаИсполнителя.СрокИсполненияДни = СрокИсполненияДни;
		СтрокаИсполнителя.СрокИсполненияЧасы = СрокИсполненияЧасы;
		СтрокаИсполнителя.СрокИсполненияМинуты = СрокИсполненияМинуты;
		СтрокаИсполнителя.ВариантУстановкиСрокаИсполнения = ВариантУстановкиСрокаИсполнения;
	Иначе
		ИндексПервойСтроки = 0;
		Если ИсполнителиИсполнения[0].Ответственный Тогда
			ИндексПервойСтроки = 1;
		КонецЕсли;
		
		Для ИндексТекущейСтроки = ИндексПервойСтроки По КоличествоИсполнителей - 1 Цикл
			ТекущаяСтрока = ИсполнителиИсполнения[ИндексТекущейСтроки];
			ТекущаяСтрока.СрокИсполнения = СрокИсполнения;
			ТекущаяСтрока.СрокИсполненияДни = СрокИсполненияДни;
			ТекущаяСтрока.СрокИсполненияЧасы = СрокИсполненияЧасы;
			ТекущаяСтрока.СрокИсполненияМинуты = СрокИсполненияМинуты;
			ТекущаяСтрока.ВариантУстановкиСрокаИсполнения = ВариантУстановкиСрокаИсполнения;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПредставлениеСроков()
	
	Для Каждого УчастникЭтапа Из ИсполнителиИсполнения Цикл
		УчастникЭтапа.СрокИсполненияПредставление =
			ИнтеграцияС1СДокументооборот3КлиентСервер.ПредставлениеСрокаИсполнения(
				УчастникЭтапа.СрокИсполнения,
				УчастникЭтапа.СрокИсполненияДни,
				УчастникЭтапа.СрокИсполненияЧасы,
				УчастникЭтапа.СрокИсполненияМинуты,
				ИспользоватьДатуИВремяВСрокахЗадач,
				УчастникЭтапа.ВариантУстановкиСрокаИсполнения);
	КонецЦикла;
	
	СрокОбработкиРезультатовИсполненияПредставление =
		ИнтеграцияС1СДокументооборот3КлиентСервер.ПредставлениеСрокаИсполнения(
			СрокОбработкиРезультатовИсполнения,
			СрокОбработкиРезультатовДниИсполнения,
			СрокОбработкиРезультатовЧасыИсполнения,
			СрокОбработкиРезультатовМинутыИсполнения,
			ИспользоватьДатуИВремяВСрокахЗадач,
			ВариантУстановкиСрокаОбработкиРезультатовИсполнения);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура НазначитьИсполнителяОтветственным()
	
	ТекущиеДанные = Элементы.ИсполнителиИсполнения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Ответственный = Не ТекущиеДанные.Ответственный;
	
	ИдентификаторТекущейСтроки = ТекущиеДанные.ПолучитьИдентификатор();
	Для Каждого СтрокаИсполнителя Из ИсполнителиИсполнения Цикл
		Если СтрокаИсполнителя.ПолучитьИдентификатор() = ИдентификаторТекущейСтроки Тогда
			Продолжить;
		КонецЕсли;
		СтрокаИсполнителя.Ответственный = Ложь;
	КонецЦикла;
	
	Если ТекущиеДанные.Ответственный Тогда
		ИндексСтроки = ИсполнителиИсполнения.Индекс(ТекущиеДанные);
		Если ИндексСтроки Тогда
			ИсполнителиИсполнения.Сдвинуть(ИндексСтроки, - ИндексСтроки);
		КонецЕсли;
	КонецЕсли;
	
	Элементы.НазначитьОтветственным.Пометка = ТекущиеДанные.Ответственный;
	Модифицированность = Истина;
	
	ОбновитьДоступностьКомандПеремещенияИНазначитьОтветственным();
	
	ОчиститьСообщения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДоступностьКомандПеремещения()
	
	Элементы.ПереместитьВверх.Доступность = Ложь;
	Элементы.ПереместитьВниз.Доступность = Ложь;
	
	Если Не Элементы.ИсполнителиИсполнения.ИзменятьПорядокСтрок Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоИсполнителей = ИсполнителиИсполнения.Количество();
	
	Если КоличествоИсполнителей = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ИсполнителиИсполнения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийИндексИсполнителя = ИсполнителиИсполнения.Индекс(ТекущиеДанные);
	НомерСтроки = ТекущийИндексИсполнителя + 1;
	
	Если НомерСтроки >= 2 Тогда
		Элементы.ПереместитьВверх.Доступность = Не ИсполнителиИсполнения[ТекущийИндексИсполнителя - 1].Недоступно;
	КонецЕсли;
	
	Если НомерСтроки = 1 И КоличествоИсполнителей > 1 Или НомерСтроки > 1 И НомерСтроки < КоличествоИсполнителей Тогда
		Элементы.ПереместитьВниз.Доступность = Не ИсполнителиИсполнения[ТекущийИндексИсполнителя + 1].Недоступно;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДоступностьКомандПеремещенияИНазначитьОтветственным()
	
	Элементы.ПереместитьВверх.Доступность = Ложь;
	Элементы.ПереместитьВниз.Доступность = Ложь;
	Элементы.НазначитьОтветственным.Доступность = Ложь;
	
	Если Не Элементы.ИсполнителиИсполнения.ИзменятьПорядокСтрок Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.НазначитьОтветственным.Пометка = Ложь;
	
	ТекущиеДанные = Элементы.ИсполнителиИсполнения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоИсполнителей = ИсполнителиИсполнения.Количество();
	
	Если КоличествоИсполнителей = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ИсполнителиИсполнения[0].Ответственный Тогда
		ВерхняяГраница = 2;
		МинимальноеЧислоИсполнителейДляИзмененияПорядка = 3;
	Иначе
		ВерхняяГраница = 1;
		МинимальноеЧислоИсполнителейДляИзмененияПорядка = 2;
	КонецЕсли;
	
	НижняяГраница = КоличествоИсполнителей;
	
	// Номер строки получаем по индекс, т.к. ИсполнителиИсполнения может не иметь поля НомерСтроки.
	ТекущийИндексИсполнителя = ИсполнителиИсполнения.Индекс(ТекущиеДанные);
	НомерСтроки = ТекущийИндексИсполнителя + 1;
	СледующийДоступен = (НомерСтроки + 1) <= НижняяГраница
		И Не ИсполнителиИсполнения[ТекущийИндексИсполнителя + 1].Недоступно;
	ПредыдущийДоступен = (НомерСтроки - 1) >= ВерхняяГраница
		И Не ИсполнителиИсполнения[ТекущийИндексИсполнителя - 1].Недоступно;
	
	Если КоличествоИсполнителей >= МинимальноеЧислоИсполнителейДляИзмененияПорядка Тогда
		
		Если НомерСтроки < ВерхняяГраница Тогда
			// Ничего не делаем.
		ИначеЕсли НомерСтроки = ВерхняяГраница Тогда
			Элементы.ПереместитьВниз.Доступность = СледующийДоступен;
		ИначеЕсли НомерСтроки = НижняяГраница Тогда
			Элементы.ПереместитьВверх.Доступность = ПредыдущийДоступен;
		Иначе
			Элементы.ПереместитьВверх.Доступность = ПредыдущийДоступен;
			Элементы.ПереместитьВниз.Доступность = СледующийДоступен;
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.НазначитьОтветственным.Пометка = ТекущиеДанные.Ответственный;
	ОтборДоступностьОтветственного = Новый Структура("Ответственный, Недоступно", Истина, Истина);
	Элементы.НазначитьОтветственным.Доступность = КоличествоИсполнителей > 1
		И Не ИсполнителиИсполнения.НайтиСтроки(ОтборДоступностьОтветственного).Количество()
		И Не ТекущиеДанные.Недоступно;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПолеИсполнитель(ТекущиеДанные)
	
	ТекущиеДанные.Исполнитель = "";
	ТекущиеДанные.ИсполнительID = "";
	ТекущиеДанные.ИсполнительТип = "";
	
	ТекущиеДанные.ОсновнойОбъектАдресацииИсполнитель = "";
	ТекущиеДанные.ОсновнойОбъектАдресацииИсполнительID = "";
	ТекущиеДанные.ОсновнойОбъектАдресацииИсполнительТип = "";
	
	ТекущиеДанные.ДополнительныйОбъектАдресацииИсполнитель = "";
	ТекущиеДанные.ДополнительныйОбъектАдресацииИсполнительID = "";
	ТекущиеДанные.ДополнительныйОбъектАдресацииИсполнительТип = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПолеКонтролерИсполнения()
	
	Контролер = "";
	КонтролерID = "";
	КонтролерТип = "";
	
	ОсновнойОбъектАдресацииКонтролер = "";
	ОсновнойОбъектАдресацииКонтролерID = "";
	ОсновнойОбъектАдресацииКонтролерТип = "";
	
	ДополнительныйОбъектАдресацииКонтролер = "";
	ДополнительныйОбъектАдресацииКонтролерID = "";
	ДополнительныйОбъектАдресацииКонтролерТип = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПолеПроверяющийИсполнения()
	
	Проверяющий = "";
	ПроверяющийID = "";
	ПроверяющийТип = "";
	
	ОсновнойОбъектАдресацииПроверяющий = "";
	ОсновнойОбъектАдресацииПроверяющийID = "";
	ОсновнойОбъектАдресацииПроверяющийТип = "";
	
	ДополнительныйОбъектАдресацииПроверяющий = "";
	ДополнительныйОбъектАдресацииПроверяющийID = "";
	ДополнительныйОбъектАдресацииПроверяющийТип = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьИсполнителя(Смещение)
	
	ТекущиеДанные = Элементы.ИсполнителиИсполнения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Текст = НСтр("ru = 'Перемещение невозможно. Ответственным может быть назначен только первый исполнитель в списке.'");
	
	НомерСтроки = ИсполнителиИсполнения.Индекс(ТекущиеДанные) + 1;
	
	Если Смещение > 0 Тогда
		Если НомерСтроки = ИсполнителиИсполнения.Количество() Тогда
			Возврат;
		КонецЕсли;
		Если НомерСтроки = 1
			И ТекущиеДанные.Ответственный Тогда
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(Текст);
			Возврат;
		КонецЕсли;
	Иначе
		Если НомерСтроки = 1 Тогда
			Возврат;
		КонецЕсли;
		Если НомерСтроки = 2
			И ИсполнителиИсполнения[0].Ответственный Тогда
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(Текст);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ИсполнителиИсполнения.Сдвинуть(НомерСтроки - 1, Смещение);
	
	Модифицированность = Истина;
	
	ЗаполнитьПредставлениеСроков();
	
	ОбновитьДоступностьКомандПеремещенияИНазначитьОтветственным();
	
	ИндексИзмененнойСтроки = ИсполнителиИсполнения.Индекс(ТекущиеДанные);
	Если Смещение > 0 Тогда
		ИндексИзмененнойСтроки = ИндексИзмененнойСтроки - 1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьНастройкиИсполненияОзнакомленияДляЗаписи()
	
	Для Каждого СтрокаТаблицы Из ИсполнителиИсполнения Цикл
		Если Не ИнтеграцияС1СДокументооборот3КлиентСервер.ИдентификаторЗаполнен(
				СтрокаТаблицы.ИдентификаторИсполнителя) Тогда
			СтрокаТаблицы.ИдентификаторИсполнителя = Строка(Новый УникальныйИдентификатор);
		КонецЕсли;
	КонецЦикла;
	
	УдалитьПустыеСтрокиИсполнителей();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПустыеСтрокиИсполнителей()
	
	КоличествоСтрок = ИсполнителиИсполнения.Количество();
	Для Индекс = 1 По КоличествоСтрок Цикл
		Строка = ИсполнителиИсполнения[КоличествоСтрок - Индекс];
		
		Если Не ЗначениеЗаполнено(Строка.ИсполнительID) Тогда
			ИсполнителиИсполнения.Удалить(Строка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Сервер

&НаСервере
Процедура ЗагрузитьНастройкиИсполненияВФорму()
	
	// Настройки.
	ИзменениеРазрешено = Параметры.ИзменениеРазрешено;
	МожноТолькоДобавлятьУчастников = Параметры.МожноТолькоДобавлятьУчастников;
	ВышестоящийУчастникИлиПункт = Параметры.ИдентификаторПункта;
	ИспользоватьДатуИВремяВСрокахЗадач = Параметры.ИспользоватьДатуИВремяВСрокахЗадач;
	
	// Данные.
	НомерПункта = Параметры.Номер;
	ОписаниеИсполнения = Параметры.ОписаниеИсполнения;
	Срок = Параметры.Срок;
	СрокПриОткрытии = Срок;
	
	// Автор.
	АвторИсполнения = Параметры.АвторИсполнения;
	АвторИсполненияID = Параметры.АвторИсполненияID;
	АвторИсполненияТип = Параметры.АвторИсполненияТип;
	АвторИсполненияПредставление = Параметры.АвторИсполненияПредставление;
	
	// Контролер.
	Контролер = Параметры.Контролер;
	КонтролерID = Параметры.КонтролерID;
	КонтролерТип = Параметры.КонтролерТип;
	КонтролерПредставление = Параметры.КонтролерПредставление;
	ОсновнойОбъектАдресацииКонтролер = Параметры.ОсновнойОбъектАдресацииКонтролер;
	ОсновнойОбъектАдресацииКонтролерID = Параметры.ОсновнойОбъектАдресацииКонтролерID;
	ОсновнойОбъектАдресацииКонтролерТип = Параметры.ОсновнойОбъектАдресацииКонтролерТип;
	ДополнительныйОбъектАдресацииКонтролер = Параметры.ДополнительныйОбъектАдресацииКонтролер;
	ДополнительныйОбъектАдресацииКонтролерID = Параметры.ДополнительныйОбъектАдресацииКонтролерID;
	ДополнительныйОбъектАдресацииКонтролерТип = Параметры.ДополнительныйОбъектАдресацииКонтролерТип;
	
	Для Каждого Строка Из Параметры.ИсполнителиИсполнения Цикл
		
		Если Строка.Функция <> "PerformanceResultProcessor" Тогда
			// Исполнители.
			НоваяСтрока = ИсполнителиИсполнения.Добавить();
			
			// Данные участника.
			НоваяСтрока.ИдентификаторИсполнителя = Строка.ИдентификаторИсполнителя;
			НоваяСтрока.ВариантУстановкиСрокаИсполнения = Строка.ВариантУстановкиСрокаИсполнения;
			НоваяСтрока.Ответственный = Строка.Ответственный;
			
			// Участник.
			НоваяСтрока.Исполнитель = Строка.Исполнитель;
			НоваяСтрока.ИсполнительID = Строка.ИсполнительID;
			НоваяСтрока.ИсполнительТип = Строка.ИсполнительТип;
			НоваяСтрока.ИсполнительПредставление = Строка.ИсполнительПредставление;
			НоваяСтрока.ОсновнойОбъектАдресацииИсполнитель = Строка.ОсновнойОбъектАдресацииИсполнитель;
			НоваяСтрока.ОсновнойОбъектАдресацииИсполнительID = Строка.ОсновнойОбъектАдресацииИсполнительID;
			НоваяСтрока.ОсновнойОбъектАдресацииИсполнительТип = Строка.ОсновнойОбъектАдресацииИсполнительТип;
			НоваяСтрока.ДополнительныйОбъектАдресацииИсполнитель = Строка.ДополнительныйОбъектАдресацииИсполнитель;
			НоваяСтрока.ДополнительныйОбъектАдресацииИсполнительID = Строка.ДополнительныйОбъектАдресацииИсполнительID;
			НоваяСтрока.ДополнительныйОбъектАдресацииИсполнительТип = Строка.ДополнительныйОбъектАдресацииИсполнительТип;
			
			// Срок.
			НоваяСтрока.СрокИсполнения = Строка.СрокИсполнения;
			НоваяСтрока.СрокИсполненияДни = Строка.СрокИсполненияДни;
			НоваяСтрока.СрокИсполненияЧасы = Строка.СрокИсполненияЧасы;
			НоваяСтрока.СрокИсполненияМинуты = Строка.СрокИсполненияМинуты;
			
			// Прочие данные.
			НоваяСтрока.Недоступно = Не ИзменениеРазрешено Или МожноТолькоДобавлятьУчастников;
			НоваяСтрока.Состояние = Строка.Состояние;
			НоваяСтрока.НомерКартинки = Строка.НомерКартинки;
			НоваяСтрока.Результат = Строка.Результат;
			
		Иначе
			// Проверяющий.
			
			// Данные участника.
			ИдентификаторПроверяющего = Строка.ИдентификаторИсполнителя;
			ВариантУстановкиСрокаОбработкиРезультатовИсполнения = Строка.ВариантУстановкиСрокаИсполнения;
			
			// Участник.
			Проверяющий = Строка.Исполнитель;
			ПроверяющийID = Строка.ИсполнительID;
			ПроверяющийТип = Строка.ИсполнительТип;
			ПроверяющийПредставление = Строка.ИсполнительПредставление;
			ОсновнойОбъектАдресацииПроверяющий = Строка.ОсновнойОбъектАдресацииИсполнитель;
			ОсновнойОбъектАдресацииПроверяющийID = Строка.ОсновнойОбъектАдресацииИсполнительID;
			ОсновнойОбъектАдресацииПроверяющийТип = Строка.ОсновнойОбъектАдресацииИсполнительТип;
			ДополнительныйОбъектАдресацииПроверяющий = Строка.ДополнительныйОбъектАдресацииИсполнитель;
			ДополнительныйОбъектАдресацииПроверяющийID = Строка.ДополнительныйОбъектАдресацииИсполнительID;
			ДополнительныйОбъектАдресацииПроверяющийТип = Строка.ДополнительныйОбъектАдресацииИсполнительТип;
			
			// Срок проверки.
			СрокОбработкиРезультатовИсполнения = Строка.СрокИсполнения;
			СрокОбработкиРезультатовДниИсполнения = Строка.СрокИсполненияДни;
			СрокОбработкиРезультатовЧасыИсполнения = Строка.СрокИсполненияЧасы;
			СрокОбработкиРезультатовМинутыИсполнения = Строка.СрокИсполненияМинуты;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьЭлементовУправленияПриСозданииФормы()
	
	Элементы.ПродолжитьДиалог.Видимость = Ложь;
	
	ПодсказкаВвода = НСтр("ru = 'Содержание пункта'");
	Элементы.ОписаниеИсполнение.ПодсказкаВвода = ПодсказкаВвода;
	Элементы.ОписаниеИсполнение.Подсказка = ПодсказкаВвода;
	Элементы.ОписаниеИсполнение.АвтоОтметкаНезаполненного = Истина;
	Элементы.ОписаниеИсполнение.КнопкаВыбора = Ложь;
	Заголовок = НСтр("ru = 'Пункт'");
	Элементы.ИсполнителиИсполненияОписаниеПоручения.Видимость = Ложь;
	
	Если ЗначениеЗаполнено(НомерПункта) Тогда
		ТекущийЭлемент = Элементы.ОписаниеИсполнение;
	КонецЕсли;
	
	Элементы.ИсполнителиИсполненияНомерКартинки.Видимость = Ложь;
	Для Каждого СтрокаИсполнителя Из ИсполнителиИсполнения Цикл
		Если СтрокаИсполнителя.НомерКартинки > 0 Тогда
			Элементы.ИсполнителиИсполненияНомерКартинки.Видимость = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ФормаЗакрыть.Видимость = Ложь;
	
	Если Не ИзменениеРазрешено Тогда
		Если МожноТолькоДобавлятьУчастников Тогда
			Элементы.ФормаЗаписать.Видимость = Истина;
		Иначе
			Элементы.ФормаЗаписать.Видимость = Ложь;
			Элементы.ФормаЗакрыть.Видимость = Истина;
			Элементы.ФормаЗакрыть.КнопкаПоУмолчанию = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("3.0.14.31") Тогда
		Элементы.АвторИсполнения.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру параметров для участника пункта исполнения.
//
// Возвращаемое значение:
//   Структура:
//     * Участник - Строка
//     * УчастникID - Строка
//     * УчастникТип - Строка
//     * УчастникПредставление - Строка
//     * ОсновнойОбъектАдресацииУчастник - Строка
//     * ОсновнойОбъектАдресацииУчастникID - Строка
//     * ОсновнойОбъектАдресацииУчастникТип - Строка
//     * ДополнительныйОбъектАдресацииУчастник - Строка
//     * ДополнительныйОбъектАдресацииУчастникID - Строка
//     * ДополнительныйОбъектАдресацииУчастникТип - Строка
//     * Идентификатор - Строка
//     * Ответственный - Булево
//     * Срок - Дата
//     * СрокДни - Число
//     * СрокЧасы - Число
//     * СрокМинуты - Число
//     * ВариантУстановкиСрока - Строка
//     * Функция - Строка
//
&НаСервере
Функция ПараметраУчастникаПунктаИсполнения()
	
	ПараметрыУчастника = Новый Структура;
	ПараметрыУчастника.Вставить("Участник", "");
	ПараметрыУчастника.Вставить("УчастникID", "");
	ПараметрыУчастника.Вставить("УчастникТип", "");
	ПараметрыУчастника.Вставить("УчастникПредставление", "");
	ПараметрыУчастника.Вставить("ОсновнойОбъектАдресацииУчастник", "");
	ПараметрыУчастника.Вставить("ОсновнойОбъектАдресацииУчастникID", "");
	ПараметрыУчастника.Вставить("ОсновнойОбъектАдресацииУчастникТип", "");
	ПараметрыУчастника.Вставить("ДополнительныйОбъектАдресацииУчастник", "");
	ПараметрыУчастника.Вставить("ДополнительныйОбъектАдресацииУчастникID", "");
	ПараметрыУчастника.Вставить("ДополнительныйОбъектАдресацииУчастникТип", "");
	ПараметрыУчастника.Вставить("Идентификатор", "00000000-0000-0000-0000-000000000000");
	ПараметрыУчастника.Вставить("Ответственный", Ложь);
	ПараметрыУчастника.Вставить("Срок", Дата(1,1,1));
	ПараметрыУчастника.Вставить("СрокДни", 0);
	ПараметрыУчастника.Вставить("СрокЧасы", 0);
	ПараметрыУчастника.Вставить("СрокМинуты", 0);
	ПараметрыУчастника.Вставить("ВариантУстановкиСрока", "");
	ПараметрыУчастника.Вставить("Функция", "");
	
	Возврат ПараметрыУчастника;
	
КонецФункции

&НаСервере
Функция ПодготовитьДанныеПунктаВДействие()
	
	ДанныеВДействие = Новый Структура;
	
	// Данные.
	ДанныеВДействие.Вставить("ИдентификаторПункта", ВышестоящийУчастникИлиПункт);
	ДанныеВДействие.Вставить("Номер", НомерПункта);
	ДанныеВДействие.Вставить("ОписаниеИсполнения", ОписаниеИсполнения);
	ДанныеВДействие.Вставить("Срок", Срок);
	
	// Автор.
	ДанныеВДействие.Вставить("АвторИсполнения", АвторИсполнения);
	ДанныеВДействие.Вставить("АвторИсполненияID", АвторИсполненияID);
	ДанныеВДействие.Вставить("АвторИсполненияТип", АвторИсполненияТип);
	ДанныеВДействие.Вставить("АвторИсполненияПредставление", АвторИсполненияПредставление);
	
	// Контролер.
	ДанныеВДействие.Вставить("Контролер", Контролер);
	ДанныеВДействие.Вставить("КонтролерID", КонтролерID);
	ДанныеВДействие.Вставить("КонтролерТип", КонтролерТип);
	ДанныеВДействие.Вставить("КонтролерПредставление", КонтролерПредставление);
	ДанныеВДействие.Вставить("ОсновнойОбъектАдресацииКонтролер", ОсновнойОбъектАдресацииКонтролер);
	ДанныеВДействие.Вставить("ОсновнойОбъектАдресацииКонтролерID", ОсновнойОбъектАдресацииКонтролерID);
	ДанныеВДействие.Вставить("ОсновнойОбъектАдресацииКонтролерТип", ОсновнойОбъектАдресацииКонтролерТип);
	ДанныеВДействие.Вставить("ДополнительныйОбъектАдресацииКонтролер", ДополнительныйОбъектАдресацииКонтролер);
	ДанныеВДействие.Вставить("ДополнительныйОбъектАдресацииКонтролерID", ДополнительныйОбъектАдресацииКонтролерID);
	ДанныеВДействие.Вставить("ДополнительныйОбъектАдресацииКонтролерТип", ДополнительныйОбъектАдресацииКонтролерТип);
	
	// Исполнители.
	ИсполнителиДействия = Новый Массив;
	
	Для Каждого УчастникИсполнения Из ИсполнителиИсполнения Цикл
		ПараметрыУчастника = ПараметраУчастникаПунктаИсполнения();
		
		// Данные участника.
		ПараметрыУчастника.Идентификатор = УчастникИсполнения.ИдентификаторИсполнителя;
		ПараметрыУчастника.ВариантУстановкиСрока = УчастникИсполнения.ВариантУстановкиСрокаИсполнения;
		ПараметрыУчастника.Ответственный = УчастникИсполнения.Ответственный;
		
		// Участник.
		ПараметрыУчастника.Участник = УчастникИсполнения.Исполнитель;
		ПараметрыУчастника.УчастникID = УчастникИсполнения.ИсполнительID;
		ПараметрыУчастника.УчастникТип = УчастникИсполнения.ИсполнительТип;
		ПараметрыУчастника.УчастникПредставление = УчастникИсполнения.ИсполнительПредставление;
		ПараметрыУчастника.ОсновнойОбъектАдресацииУчастник = УчастникИсполнения.ОсновнойОбъектАдресацииИсполнитель;
		ПараметрыУчастника.ОсновнойОбъектАдресацииУчастникID = УчастникИсполнения.ОсновнойОбъектАдресацииИсполнительID;
		ПараметрыУчастника.ОсновнойОбъектАдресацииУчастникТип = УчастникИсполнения.ОсновнойОбъектАдресацииИсполнительТип;
		ПараметрыУчастника.ДополнительныйОбъектАдресацииУчастник =
			УчастникИсполнения.ДополнительныйОбъектАдресацииИсполнитель;
		ПараметрыУчастника.ДополнительныйОбъектАдресацииУчастникID =
			УчастникИсполнения.ДополнительныйОбъектАдресацииИсполнительID;
		ПараметрыУчастника.ДополнительныйОбъектАдресацииУчастникТип =
			УчастникИсполнения.ДополнительныйОбъектАдресацииИсполнительТип;
		
		// Срок.
		ПараметрыУчастника.Срок = УчастникИсполнения.СрокИсполнения;
		ПараметрыУчастника.СрокДни = УчастникИсполнения.СрокИсполненияДни;
		ПараметрыУчастника.СрокЧасы = УчастникИсполнения.СрокИсполненияЧасы;
		ПараметрыУчастника.СрокМинуты = УчастникИсполнения.СрокИсполненияМинуты;
		
		// Прочие данные.
		ПараметрыУчастника.Функция = "Performer";
		
		ИсполнителиДействия.Добавить(ПараметрыУчастника);
	КонецЦикла;
	
	// Проверяющий, срок проверки.
	Если ЗначениеЗаполнено(ПроверяющийID) Тогда
		ПараметрыУчастника = ПараметраУчастникаПунктаИсполнения();
		
		// Данные участника.
		ПараметрыУчастника.Идентификатор = ИдентификаторПроверяющего;
		ПараметрыУчастника.ВариантУстановкиСрока = ВариантУстановкиСрокаОбработкиРезультатовИсполнения;
		ПараметрыУчастника.Ответственный = Ложь;
		
		// Участник.
		ПараметрыУчастника.Участник = Проверяющий;
		ПараметрыУчастника.УчастникID = ПроверяющийID;
		ПараметрыУчастника.УчастникТип = ПроверяющийТип;
		ПараметрыУчастника.УчастникПредставление = ПроверяющийПредставление;
		ПараметрыУчастника.ОсновнойОбъектАдресацииУчастник = ОсновнойОбъектАдресацииПроверяющий;
		ПараметрыУчастника.ОсновнойОбъектАдресацииУчастникID = ОсновнойОбъектАдресацииПроверяющийID;
		ПараметрыУчастника.ОсновнойОбъектАдресацииУчастникТип = ОсновнойОбъектАдресацииПроверяющийТип;
		ПараметрыУчастника.ДополнительныйОбъектАдресацииУчастник = ДополнительныйОбъектАдресацииПроверяющий;
		ПараметрыУчастника.ДополнительныйОбъектАдресацииУчастникID = ДополнительныйОбъектАдресацииПроверяющийID;
		ПараметрыУчастника.ДополнительныйОбъектАдресацииУчастникТип = ДополнительныйОбъектАдресацииПроверяющийТип;
		
		// Срок.
		ПараметрыУчастника.Срок = СрокОбработкиРезультатовИсполнения;
		ПараметрыУчастника.СрокДни = СрокОбработкиРезультатовДниИсполнения;
		ПараметрыУчастника.СрокЧасы = СрокОбработкиРезультатовЧасыИсполнения;
		ПараметрыУчастника.СрокМинуты = СрокОбработкиРезультатовМинутыИсполнения;
		
		// Прочие данные.
		ПараметрыУчастника.Функция = "PerformanceResultProcessor";
		
		ИсполнителиДействия.Добавить(ПараметрыУчастника);
	КонецЕсли;
	
	ДанныеВДействие.Вставить("ИсполнителиИсполнения", ИсполнителиДействия);
	
	Возврат ДанныеВДействие;
	
КонецФункции

&НаСервере
Процедура УстановитьДоступность()
	
	Если ИсполнителиИсполнения.Количество() > 1 Тогда
		Элементы.НазначитьОтветственным.Доступность = Истина;
	Иначе
		Элементы.НазначитьОтветственным.Доступность = Ложь;
	КонецЕсли;
	
	Если Не ИзменениеРазрешено Тогда
		
		Элементы.НомерПункта.ТолькоПросмотр = Истина;
		Элементы.Срок.ТолькоПросмотр = Истина;
		Элементы.ОписаниеИсполнение.ТолькоПросмотр = Истина;
		Элементы.ПроверяющийИсполнения.ТолькоПросмотр
			= ЗначениеЗаполнено(ПроверяющийID) И МожноТолькоДобавлятьУчастников;
		Элементы.СрокОбработкиРезультатовИсполненияПредставление.ТолькоПросмотр
			= ЗначениеЗаполнено(ПроверяющийID) И МожноТолькоДобавлятьУчастников;
		
		Элементы.ПереместитьВверх.Доступность = Ложь;
		Элементы.ПереместитьВниз.Доступность = Ложь;
		
		Элементы.АвторИсполнения.ТолькоПросмотр = Истина;
		
		Элементы.КонтролерИсполнения.ТолькоПросмотр = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСебяПроверяющимНаСервере()
	
	ОсновнойСотрудник = ИнтеграцияС1СДокументооборот3ПовтИсп.ОсновнойСотрудникТекущегоПользователя();
	Если ОсновнойСотрудник <> Неопределено Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектныйРеквизит(
			ЭтотОбъект,
			ОсновнойСотрудник,
			"Проверяющий",
			Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти