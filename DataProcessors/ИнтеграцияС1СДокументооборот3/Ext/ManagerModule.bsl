#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Выполняет поиск объектов ДО по реквизитам, сохраняя результат во временное хранилище
//
// Параметры:
//   ТипОбъекта - Строка - тип объекта, поиск по которому требуется выполнить
//   РеквизитыПоиска - Структура - описание реквизитов поиска
//   АдресВоВременномХранилище - Строка - параметр, в который помещается адрес результатов поиска
//   КоличествоРезультатов - Число - количество результатов поиска
//   ПредельноеКоличествоРезультатов - Число - предельное количество выбираемых объектов, если оно превышено
//
Процедура ВыполнитьПоискПоРеквизитам(ТипОбъекта, РеквизитыПоиска, АдресВоВременномХранилище,
		КоличествоРезультатов, ПредельноеКоличествоРезультатов) Экспорт
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	СписокУсловий = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMObjectListQuery");
	ПредельноеКоличествоРезультатов = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПредельноеКоличествоВыбираемыхОбъектов(
		ТипОбъекта);
	СписокУсловий.limit = ПредельноеКоличествоРезультатов;
	ВыбираемыеПоля = СписокУсловий.columnSet; // СписокXDTO
	
	НаборКолонок = Новый Массив;
	Если ИнтеграцияС1СДокументооборот3.ЭтоДокументДО3(ТипОбъекта) Тогда
		НаборКолонок.Добавить("documentType");
		НаборКолонок.Добавить("regNumber");
		НаборКолонок.Добавить("regDate");
		НаборКолонок.Добавить("sum");
		НаборКолонок.Добавить("organization");
		НаборКолонок.Добавить("correspondent");
		НаборКолонок.Добавить("folder");
		
	ИначеЕсли ТипОбъекта = "DMCorrespondent" Тогда
		НаборКолонок.Добавить("inn");
		НаборКолонок.Добавить("kpp");
		НаборКолонок.Добавить("legalPrivatePerson");
		
	ИначеЕсли ТипОбъекта = "DMMeeting" Тогда
		НаборКолонок.Добавить("type");
		НаборКолонок.Добавить("startDate");
		НаборКолонок.Добавить("endDate");
		
	КонецЕсли;
	
	Представление = "";
	Для Каждого РеквизитПоиска Из РеквизитыПоиска Цикл
		ИмяРеквизита = РеквизитПоиска.Ключ;
		ОписаниеУсловия = РеквизитПоиска.Значение;
		ДобавитьРеквизитВСписокУсловий(
			Прокси,
			ИмяРеквизита,
			ОписаниеУсловия,
			СписокУсловий,
			Представление);
		// Реквизиты с отбором на равенство не информативны.
		Если ОписаниеУсловия.ОператорСравнения = "=" Тогда
			ПозицияВМассиве = НаборКолонок.Найти(ИмяРеквизита);
			Если ПозицияВМассиве <> Неопределено Тогда
				НаборКолонок.Удалить(ПозицияВМассиве);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Добавим оставшиеся колонки в требование выборки.
	Для Каждого ИмяРеквизита Из НаборКолонок Цикл
		ВыбираемыеПоля.Добавить(ИмяРеквизита);
	КонецЦикла;
	
	Если Представление = "" Тогда
		Представление = НСтр("ru = 'Условия не заданы.'");
	Иначе
		Представление = Представление + ".";
	КонецЕсли;
	
	Результат = ИнтеграцияС1СДокументооборотБазоваяФункциональность.НайтиСписокОбъектов(
		Прокси,
		ТипОбъекта,
		СписокУсловий);
	
	НайденныеОбъекты = Новый Массив;
	Для Каждого ОбъектXDTO Из Результат.items Цикл
		НайденныйОбъект = Новый Структура;
		НайденныеОбъекты.Добавить(НайденныйОбъект);
		НайденныйОбъект.Вставить("name", ОбъектXDTO.object.name);
		НайденныйОбъект.Вставить("ID", ОбъектXDTO.object.objectID.ID);
		Для Каждого ОписаниеКолонки Из НаборКолонок Цикл
			ИмяРеквизита = ОписаниеКолонки;
			ЗначениеСвойства = ОбъектXDTO.object.Получить(ИмяРеквизита);
			Если ТипЗнч(ЗначениеСвойства) = Тип("ОбъектXDTO") Тогда
				// Ссылочный тип ДО.
				НайденныйОбъект.Вставить(ИмяРеквизита, ЗначениеСвойства.name);
				НайденныйОбъект.Вставить(ИмяРеквизита + "ID", ЗначениеСвойства.objectID.ID);
			Иначе
				// Примитивный тип.
				НайденныйОбъект.Вставить(ИмяРеквизита, ЗначениеСвойства);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Ранние версии ДО не поддерживают tooManyObjects.
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(Результат, "tooManyObjects")
			И Результат.tooManyObjects = Истина Тогда
		Представление = Представление
			+ " " + НСтр("ru = 'Перетащите сюда любой реквизит, чтобы уточнить условия.'");
	Иначе
		ПредельноеКоличествоРезультатов = 0;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("НайденныеОбъекты", НайденныеОбъекты);
	Результат.Вставить("НаборКолонок", НаборКолонок);
	Результат.Вставить("ПредставлениеУсловийПоиска", Представление);
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Результат, Новый УникальныйИдентификатор);
	
	КоличествоРезультатов = НайденныеОбъекты.Количество();
	
КонецПроцедуры

// Стандартный обработчик печати для подсистемы УправлениеПечатью БСП.
//
// Параметры:
//   МассивОбъектов  - Массив из ЛюбаяСсылка - ссылки на объекты, которые нужно распечатать.
//   ПараметрыПечати - Структура - дополнительные настройки печати.
//   КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы.
//   ОбъектыПечати - СписокЗначений из ЛюбаяСсылка - значение - это ссылка на объект, представление - это имя области,
//     в которой был выведен объект.
//   ПараметрыВывода - Структура - дополнительные параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ЭтоФоновоеЗадание()
			И ПараметрыПечати.Свойство("ИнтеграцияС1СДокументооборот_ПараметрыДлительнойОперации") Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПодключитьсяИПолучитьВерсиюСервисаВФоне(
			ПараметрыПечати.ИнтеграцияС1СДокументооборот_ПараметрыДлительнойОперации);
	КонецЕсли;
	
	МодульУправлениеПечатью = ОбщегоНазначения.ОбщийМодуль("УправлениеПечатью");
	
	Для Каждого ПечатнаяФорма Из КоллекцияПечатныхФорм Цикл
		МодульУправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			ПечатнаяФорма.ИмяМакета,
			ПечатнаяФорма.СинонимМакета,
			ПолучитьПечатнуюФормуДО(МассивОбъектов, ПечатнаяФорма.ИмяМакета, МодульУправлениеПечатью));
	КонецЦикла;
	
КонецПроцедуры

// Возвращает в виде табличного документа указанную печатную форму ДО по переданному массиву предметов.
//
// Параметры:
//   МассивОбъектов - ЛюбаяСсылка, Массив из ЛюбаяСсылка - объекты ИС.
//   КомандаПечати - Строка - перечисление XDTO типа DMPrintCommand.
//   МодульУправлениеПечатью - ОбщийМодуль - общий модуль УправлениеПечатью.
//   ОчиститьРасшифровку - Булево - требуется убрать из табличного документа все параметры расшифровки.
//
// Возвращаемое значение:
//   ТабличныйДокумент - печатная форма ДО.
//
Функция ПолучитьПечатнуюФормуДО(МассивОбъектов, КомандаПечати, МодульУправлениеПечатью = Неопределено,
		ОчиститьРасшифровку = Истина) Экспорт
	
	Если ТипЗнч(МассивОбъектов) = Тип("Массив") Тогда
		МассивПредметов = МассивОбъектов;
	Иначе
		// Единственная ссылка.
		МассивПредметов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(МассивОбъектов);
	КонецЕсли;
	
	Если МодульУправлениеПечатью = Неопределено Тогда
		Макет = Обработки.ИнтеграцияС1СДокументооборот3.ПолучитьМакет("ПФ_MXL_ПечатнаяФормаДО");
	Иначе
		Макет = МодульУправлениеПечатью.МакетПечатнойФормы(
			"Обработка.ИнтеграцияС1СДокументооборот3.ПФ_MXL_ПечатнаяФормаДО");
	КонецЕсли;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMGetPrintedFormRequest");
	Запрос.printedFormFileType = "MXL";
	Запрос.printCommand = КомандаПечати;
	
	ПервыйДокумент = Истина;
	Для Каждого Предмет Из МассивПредметов Цикл
		// Проверим существование связанного объекта.
		СвязанныйОбъектДО = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеОбъектаДОПоВнешнемуОбъекту(
			Предмет);
		Если СвязанныйОбъектДО = Неопределено Тогда
			Если Не ПервыйДокумент Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			ПервыйДокумент = Ложь;
			ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
			ОбластьШапка.Параметры.Предмет = Строка(Предмет);
			Если КомандаПечати = "ApprovalSheet" Или КомандаПечати = "ApprovalSheetWithHistory" Тогда
				ОбластьШапка.Параметры.Заголовок = НСтр("ru = 'Лист согласования'");
				ОбластьШапка.Параметры.Пояснение = НСтр("ru = 'Согласование в 1С:Документообороте не запускалось.'");
			ИначеЕсли КомандаПечати = "ProtocolOfDisagreements" Тогда
				ОбластьШапка.Параметры.Заголовок = НСтр("ru = 'Протокол разногласий'");
				ОбластьШапка.Параметры.Пояснение = НСтр("ru = 'Согласование в 1С:Документообороте не запускалось.'");
			ИначеЕсли КомандаПечати = "ExaminationSheet" Тогда
				ОбластьШапка.Параметры.Заголовок = НСтр("ru = 'Лист ознакомления'");
				ОбластьШапка.Параметры.Пояснение = НСтр("ru = 'Ознакомление в 1С:Документообороте не запускалось.'");
			КонецЕсли;
			ТабличныйДокумент.Вывести(ОбластьШапка);
		Иначе
			Запрос.objects.Добавить(
				ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
					Прокси,
					СвязанныйОбъектДО.ID,
					СвязанныйОбъектДО.type));
		КонецЕсли;
	КонецЦикла;
	
	Если Запрос.objects.Количество() = 0 Тогда
		Возврат ТабличныйДокумент;
	КонецЕсли;
	
	Ответ = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВыполнитьЗапрос(Прокси, Запрос);
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
	Если МодульУправлениеПечатью = Неопределено Тогда
		
		Возврат Ответ.printedForm;
		
	Иначе
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПечатнаяФормаДО = МодульУправлениеПечатью.ТабличныйДокументПоДвоичнымДанным(Ответ.printedForm);
		
		Если ОчиститьРасшифровку Тогда
			Для Строка = 1 По ПечатнаяФормаДО.ВысотаТаблицы Цикл
				Для Колонка = 1 По ПечатнаяФормаДО.ШиринаТаблицы Цикл
					Область = ПечатнаяФормаДО.Область(Строка, Колонка);
					Если ЗначениеЗаполнено(Область.Расшифровка) Тогда
						Область.Расшифровка = Неопределено;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ПечатнаяФормаДО);
		
		Возврат ТабличныйДокумент;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Добавляет реквизит поиска в список условий XDTO, параллельно формируя представление условия
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ИмяРеквизита - Строка - имя реквизита поиска.
//   ОписаниеУсловий - Структура - описание условий поиска.
//   СписокУсловий - ОбъектXDTO - ОбъектXDTO типа DMObjectListQuery, пополняемый список условий.
//   Представление - Строка - пополняемое представление условия.
//
Процедура ДобавитьРеквизитВСписокУсловий(Прокси, ИмяРеквизита, ОписаниеУсловия, СписокУсловий, Представление)
	
	Если Представление = "" Тогда
		Представление = Представление + ОписаниеУсловия.Представление;
	Иначе
		Представление = Представление + "; " + НРег(ОписаниеУсловия.Представление);
	КонецЕсли;
	
	Если ОписаниеУсловия.Свойство("ПредставлениеУсловия") И ЗначениеЗаполнено(ОписаниеУсловия.ПредставлениеУсловия) Тогда
		Представление = Представление + ": " + ОписаниеУсловия.ПредставлениеУсловия;
	Иначе
		Представление = Представление + ": "
			+ ?(ТипЗнч(ОписаниеУсловия.Значение) = Тип("Дата"),
				Формат(ОписаниеУсловия.Значение, "ДЛФ=D"),
				ОписаниеУсловия.Значение);
	КонецЕсли;
	
	Условие = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMObjectListCondition");
	Условие.property = ИмяРеквизита;
	Если ОписаниеУсловия.ОператорСравнения = "<=" И ТипЗнч(ОписаниеУсловия.Значение) = Тип("Дата") Тогда
		Условие.value = КонецДня(ОписаниеУсловия.Значение);
	Иначе
		Если ОписаниеУсловия.Свойство("ЗначениеID") И ЗначениеЗаполнено(ОписаниеУсловия.ЗначениеID) Тогда
			ЗначениеРеквизита = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
				Прокси,
				ОписаниеУсловия.ЗначениеID,
				ОписаниеУсловия.ЗначениеТип);
			Условие.value = ЗначениеРеквизита;
		Иначе // Примитивный тип.
			Условие.value = ОписаниеУсловия.Значение;
		КонецЕсли;
	КонецЕсли;
	
	Если ОписаниеУсловия.ОператорСравнения = "=" И ТипЗнч(ОписаниеУсловия.Значение) = Тип("Дата") Тогда
		Условие.comparisonOperator = ">=";
	Иначе
		Условие.comparisonOperator = ОписаниеУсловия.ОператорСравнения;
	КонецЕсли;
	
	Условия = СписокУсловий.conditions; // СписокXDTO
	Условия.Добавить(Условие);
	
	Если ОписаниеУсловия.Свойство("ОператорСравнения2") И ЗначениеЗаполнено(ОписаниеУсловия.ОператорСравнения2) Тогда
		Условие = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMObjectListCondition");
		Условие.property = ИмяРеквизита;
		Если ОписаниеУсловия.ОператорСравнения2 = "<=" И ТипЗнч(ОписаниеУсловия.Значение2) = Тип("Дата") Тогда
			Условие.value = КонецДня(ОписаниеУсловия.Значение2);
		Иначе
			Условие.value = ОписаниеУсловия.Значение2;
		КонецЕсли;
		Условие.comparisonOperator = ОписаниеУсловия.ОператорСравнения2;
		Условия.Добавить(Условие);
	ИначеЕсли ОписаниеУсловия.ОператорСравнения = "="
			И ТипЗнч(ОписаниеУсловия.Значение) = Тип("Дата")
			И ИмяРеквизита <> "anyDate" Тогда
		Условие = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMObjectListCondition");
		Условие.property = ИмяРеквизита;
		Условие.value = КонецДня(ОписаниеУсловия.Значение);
		Условие.comparisonOperator = "<=";
		Условия.Добавить(Условие);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли