// **@strict-types
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Создает табличный документ содержащий протокол обмена
// 
// Параметры:
//  ДанныеФомированияПротокола см. НовыеДанныеФомированияПротокола
// 
// Возвращаемое значение:
//  ТабличныйДокумент - Представление протокола
Функция ПредставлениеПротокола(ДанныеФомированияПротокола) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Если Не ЗначениеЗаполнено(ДанныеФомированияПротокола) Тогда
		Возврат ТабличныйДокумент;
	КонецЕсли;
	
	Макет = ПолучитьМакет("ПротоколОбменаПоДокументу_ru");

	ВывестиШапкуВПротокол(ДанныеФомированияПротокола, ТабличныйДокумент, Макет);
	
	ОсновныеСообщения = ДанныеФомированияПротокола.ОсновныеСообщения;
	ВывестиСообщениеВПротокол(ОсновныеСообщения.ТитулОтправителя, ТабличныйДокумент, Макет);
	ВывестиСообщениеВПротокол(ОсновныеСообщения.ТитулПолучателя, ТабличныйДокумент, Макет);
	ВывестиСообщенияОтказаАннулированияВПротокол(ОсновныеСообщения.ПредложениеОбАннулировании, ТабличныйДокумент, Макет);
	ВывестиСообщенияОтказаАннулированияВПротокол(ОсновныеСообщения.УведомлениеОбУточнении, ТабличныйДокумент, Макет);
	ВывестиХронологиюОбмена(ДанныеФомированияПротокола.ХронологияОбмена, ТабличныйДокумент, Макет);
	
	Возврат ТабличныйДокумент;
КонецФункции

// Данные фомирования протокола.
// 
// Параметры:
//  ПараметрыФормированияПротокола см. Обработки.ПротоколОбменаПоДокументуЭДО.НовыеПараметрыФормированияПротокола
// 
// Возвращаемое значение:
//  см. НовыеДанныеФомированияПротокола
Функция ДанныеФомированияПротокола(ПараметрыФормированияПротокола) Экспорт
	ЭлектронныйДокумент = ПараметрыФормированияПротокола.ЭлектронныйДокумент;
	СведенияОрганизацииИКонтрагента = СведенияОрганизацииИКонтрагентаПротоколаОбмена(ПараметрыФормированияПротокола);

	ДанныеФомированияПротокола = НовыеДанныеФомированияПротокола();
	ДанныеФомированияПротокола.ДатаФормирования = ТекущаяДатаСеанса();
	ДанныеФомированияПротокола.Документ = ЭлектронныйДокумент;
	ДанныеФомированияПротокола.ИдентификаторДокументооборота = ПараметрыФормированияПротокола.ИдентификаторДокументооборота;
	ДанныеФомированияПротокола.Состояние = ПараметрыФормированияПротокола.СостояниеДокумента;
	ДанныеФомированияПротокола.ПредставлениеДокумента = ЭлектронныеДокументыЭДО.ПредставлениеДокументаПоСвойствам(
		ПараметрыФормированияПротокола.СвойстваДокументаДляПредставления);
	
	УстановитьДанныеКорреспондентов(ДанныеФомированияПротокола, ЭлектронныйДокумент, СведенияОрганизацииИКонтрагента);
	
	ОсновныеСообщения = ОсновныеСообщенияПротоколаОбмена(ЭлектронныйДокумент, 
		ПараметрыФормированияПротокола.СообщенияДокумента, 
		СведенияОрганизацииИКонтрагента);
		
	ХронологияОбмена = ХронологияОбмена(ПараметрыФормированияПротокола.СообщенияДокумента, 
		СведенияОрганизацииИКонтрагента);
	
	Если СинхронизацияЭДО.ЭтоВнутреннийОбмен(ПараметрыФормированияПротокола.СпособОбмена) Тогда
		ЗаполнитьДатыОтправкиПолученияОсновныхСообщенийПротоколаВнутреннегоОбмена(ОсновныеСообщения, ХронологияОбмена);
	
	ИначеЕсли СинхронизацияЭДО.ЭтоПрямойОбмен(ПараметрыФормированияПротокола.СпособОбмена) Тогда
		ЗаполнитьДатыОтправкиПолученияОсновныхСообщенийПротоколаПрямогоОбмена(ОсновныеСообщения, ХронологияОбмена);
		
	Иначе
		ЗаполнитьДатыОтправкиПолученияОсновныхСообщенийПротокола(ОсновныеСообщения, ХронологияОбмена);
	КонецЕсли;
	
	ДанныеФомированияПротокола.ОсновныеСообщения = ОсновныеСообщения;
	ДанныеФомированияПротокола.ХронологияОбмена = ХронологияОбмена;
	
	Возврат ДанныеФомированияПротокола;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращаемое значение:
//  Структура - Новые данные фомирования протокола:
// * Документ - Неопределено
// 		- ДокументСсылка.ЭлектронныйДокументВходящийЭДО
// 		- ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// * ПредставлениеДокумента - Строка
// * ДатаФормирования - Дата - Дата формирования протокола
// * Состояние - ПеречислениеСсылка.СостоянияДокументовЭДО
// * ИдентификаторДокументооборота - Строка
// * Отправитель - ОпределяемыйТип.УчастникЭДО
// * ПредставлениеОтправителя - Строка
// * ИдентификаторОтправителя - Строка
// * ПредставлениеОператораОтправителя - Строка
// * Получатель - ОпределяемыйТип.УчастникЭДО
// * ПредставлениеПолучателя - Строка
// * ИдентификаторПолучателя - Строка
// * ПредставлениеОператораПолучателя - Строка
// * ОсновныеСообщения - см.НовыеОсновныеСообщенияПротокола
// * ХронологияОбмена - см.НоваяХронологияОбмена
Функция НовыеДанныеФомированияПротокола() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Документ", Неопределено);
	Результат.Вставить("ПредставлениеДокумента", "");
	Результат.Вставить("ДатаФормирования", '00010101');
	Результат.Вставить("Состояние", Перечисления.СостоянияДокументовЭДО.ПустаяСсылка());
	Результат.Вставить("ИдентификаторДокументооборота", "");
	Результат.Вставить("Отправитель", Метаданные.ОпределяемыеТипы.УчастникЭДО.Тип.ПривестиЗначение(Неопределено));
	Результат.Вставить("ПредставлениеОтправителя", "");
	Результат.Вставить("ИдентификаторОтправителя", "");
	Результат.Вставить("ПредставлениеОператораОтправителя", "");
	Результат.Вставить("Получатель", Метаданные.ОпределяемыеТипы.УчастникЭДО.Тип.ПривестиЗначение(Неопределено));
	Результат.Вставить("ПредставлениеПолучателя", "");
	Результат.Вставить("ИдентификаторПолучателя", "");
	Результат.Вставить("ПредставлениеОператораПолучателя", "");
	Результат.Вставить("ОсновныеСообщения", НовыеОсновныеСообщенияПротокола());
	Результат.Вставить("ХронологияОбмена", НоваяХронологияОбмена());
		
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Печать

// Параметры:
//  ДанныеФомированияПротокола см. НовыеДанныеФомированияПротокола
//  ТабличныйДокумент - ТабличныйДокумент
//  Макет - ТабличныйДокумент
Процедура ВывестиШапкуВПротокол(ДанныеФомированияПротокола, ТабличныйДокумент, Макет)
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапка.Параметры.Заполнить(ДанныеФомированияПротокола);
	ОбластьШапка.Параметры.СостояниеДокументооборота = ПредставлениеЗавершенностиДокументооборота(
		ДанныеФомированияПротокола.Состояние);
	ОбластьШапка.Параметры.ДатаФормированияФорматированная = ОбщегоНазначенияБЭД.ПредставлениеЛокальнойДатыСоСмещением(
		ДанныеФомированияПротокола.ДатаФормирования, "ДЛФ=DT;");
	ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент, ОбластьШапка, "Шапка");
	
	ПостфиксыКорреспондентов = ПостфиксыКорреспондентов();
	ВывестиКорреспондента(ПостфиксыКорреспондентов.Отправитель, ДанныеФомированияПротокола, ТабличныйДокумент, Макет);
	
	Если ЗначениеЗаполнено(ДанныеФомированияПротокола.Получатель) Тогда
		ВывестиКорреспондента(ПостфиксыКорреспондентов.Получатель, ДанныеФомированияПротокола, ТабличныйДокумент, Макет);
	КонецЕсли;

КонецПроцедуры

// Параметры:
//  ВидКорреспондента - Строка - содержит постфикс используемый в именах областей и данных для вывода информации
//  ДанныеФомированияПротокола см. НовыеДанныеФомированияПротокола
//  ТабличныйДокумент - ТабличныйДокумент
//  Макет - ТабличныйДокумент
Процедура ВывестиКорреспондента(ВидКорреспондента, ДанныеФомированияПротокола, ТабличныйДокумент, Макет)
	
	ИмяОбластиКорреспондента = СтрШаблон("ШапкаПредставление%1", ВидКорреспондента);
	ОбластьШапкаОтправитель = Макет.ПолучитьОбласть(ИмяОбластиКорреспондента);
	ОбластьШапкаОтправитель.Параметры.Заполнить(ДанныеФомированияПротокола);
	ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент, ОбластьШапкаОтправитель,
		ИмяОбластиКорреспондента);

	ИдентификаторКорреспондента = СтрШаблон("Идентификатор%1", ВидКорреспондента);
	Если ЗначениеЗаполнено(ДанныеФомированияПротокола[ИдентификаторКорреспондента]) Тогда

		ИмяОбластиИдентификатораКорреспондента = СтрШаблон("Шапка%1", ИдентификаторКорреспондента);

		ШапкаИдентификатор = Макет.ПолучитьОбласть(ИмяОбластиИдентификатораКорреспондента);
		ШапкаИдентификатор.Параметры.Заполнить(ДанныеФомированияПротокола);
		ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент, ШапкаИдентификатор,
			ИмяОбластиИдентификатораКорреспондента);

		ПредставлениеОператораОтправителя = СтрШаблон("ПредставлениеОператора%1", ВидКорреспондента);
		Если ЗначениеЗаполнено(ДанныеФомированияПротокола[ПредставлениеОператораОтправителя]) Тогда

			ИмяОбластиОператораКорреспондента = СтрШаблон("ШапкаОператор%1", ВидКорреспондента);

			ШапкаОператор = Макет.ПолучитьОбласть(ИмяОбластиОператораКорреспондента);
			ШапкаОператор.Параметры.Заполнить(ДанныеФомированияПротокола);
			ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент, ШапкаОператор,
				"ИмяОбластиОператораКорреспондента");
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

// Возвращаемое значение:
//  Структура - Постфикс корреспондента:
// * Отправитель - Строка
// * Получатель - Строка
Функция ПостфиксыКорреспондентов()
	Резуьтат = Новый Структура;
	Резуьтат.Вставить("Отправитель", "Отправителя");
	Резуьтат.Вставить("Получатель", "Получателя");
	
	Возврат Резуьтат;
	
КонецФункции

// Определяет бинарное состояние завершенности электронного документооборота
// 
// Параметры:
//  СостояниеДокумента - ПеречислениеСсылка.СостоянияДокументовЭДО
// 
// Возвращаемое значение:
//  Строка - Завершен если текущее состояние конечное иначе Не завершен
Функция ПредставлениеЗавершенностиДокументооборота(СостояниеДокумента)
	Результат = "";
	СостоянияЗавершенногоЭДО = ЭлектронныеДокументыЭДО.СостоянияЗавершенногоЭДО();
	Если СостоянияЗавершенногоЭДО.Найти(СостояниеДокумента) <> Неопределено Тогда
		Результат = НСтр("ru='Завершен'");
	Иначе
		Результат = НСтр("ru='Не завершен'");
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Параметры:
//  ХронологияОбмена - см. НоваяХронологияОбмена
//  ТабличныйДокумент - ТабличныйДокумент
//  Макет - ТабличныйДокумент
Процедура ВывестиХронологиюОбмена(ХронологияОбмена, ТабличныйДокумент, Макет)
	
	Если Не ЗначениеЗаполнено(ХронологияОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьЗаголовокХронологияОбмена = Макет.ПолучитьОбласть("ЗаголовокХронологияОбмена");
	ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент, ОбластьЗаголовокХронологияОбмена, "ЗаголовокХронологияОбмена");
	
	НормерСтроки = 1;
	Для Каждого СтрокаХронологии Из ХронологияОбмена Цикл
		ОбластьХронологияОбмена = Макет.ПолучитьОбласть("ХронологияОбменаЗаголовокСообщения");
		ОбластьХронологияОбмена.Параметры.Заполнить(СтрокаХронологии);
		ОбластьХронологияОбмена.Параметры.НомерПозиции = Формат(НормерСтроки, "ЧГ=0;");
		ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент, 
			ОбластьХронологияОбмена, 
			"ХронологияОбменаЗаголовокСообщения");
		
		Если ЗначениеЗаполнено(СтрокаХронологии.ДатаПодтверждения) Тогда
			ОбластьХронологияОбменаДатаПодтверждения = Макет.ПолучитьОбласть("ХронологияОбменаДатаПодтверждения");
			ОбластьХронологияОбменаДатаПодтверждения.Параметры.Заполнить(СтрокаХронологии);
			
			ОбластьХронологияОбменаДатаПодтверждения.Параметры.ДатаПодтверждения =  ОбщегоНазначенияБЭД.ПредставлениеЛокальнойДатыСоСмещением(
				СтрокаХронологии.ДатаПодтверждения,
				"ДЛФ=DT;");
							
			ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент, 
				ОбластьХронологияОбменаДатаПодтверждения,
				"ХронологияОбменаДатаПодтверждения");
		КонецЕсли;

		ОбластьХронологияОбменаПараметрыСообщения = Макет.ПолучитьОбласть("ХронологияОбменаПараметрыСообщения");
		ОбластьХронологияОбменаПараметрыСообщения.Параметры.Заполнить(СтрокаХронологии);
		ОбластьХронологияОбменаПараметрыСообщения.Параметры.ДатаИзмененияСтатуса = ОбщегоНазначенияБЭД.ПредставлениеЛокальнойДатыСоСмещением(
				СтрокаХронологии.ДатаИзмененияСтатуса,
				"ДЛФ=DT;");
			
		ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент, 
			ОбластьХронологияОбменаПараметрыСообщения, 
			"ХронологияОбменаПараметрыСообщения");
		
		НормерСтроки = НормерСтроки +1;
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  ДанныеСообщения - см. НовыеДанныеОсновногоСообщения 
//  ТабличныйДокумент - ТабличныйДокумент
//  Макет - ТабличныйДокумент
Процедура ВывестиСообщениеВПротокол(ДанныеСообщения, ТабличныйДокумент, Макет)
	Если Не ЗначениеЗаполнено(ДанныеСообщения) Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьСообщение = Макет.ПолучитьОбласть("ДанныеСообщения");
	ОбластьСообщение.Параметры.Заполнить(ДанныеСообщения);
	ОбластьСообщение.Параметры.ДатаОтправки = ПредставлениеДатыПодтвержденияОтправки(ДанныеСообщения.ДатаОтправки);
	ОбластьСообщение.Параметры.ДатаПолучения = ПредставлениеДатыИзвещенияОПолучении(ДанныеСообщения.ДатаПолучения);
	ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент, ОбластьСообщение, "ДанныеСообщения");
	
	ВывестиПодписиВПротокол(ДанныеСообщения, ТабличныйДокумент, Макет);
КонецПроцедуры

// Вывести сообщения отказа аннулирования в протокол.
// 
// Параметры:
//  ДанныеСообщения - см. НовыеДанныеОсновногоСообщения 
//  ТабличныйДокумент - ТабличныйДокумент
//  Макет - ТабличныйДокумент
Процедура ВывестиСообщенияОтказаАннулированияВПротокол(ДанныеСообщения, ТабличныйДокумент, Макет)
	Если Не ЗначениеЗаполнено(ДанныеСообщения) Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьСообщенияОтказаАннулирования = Макет.ПолучитьОбласть("ДанныеСообщенияОтказаАннулирования");
	ОбластьСообщенияОтказаАннулирования.Параметры.Заполнить(ДанныеСообщения);
	
	ОбластьСообщенияОтказаАннулирования.Параметры.Дата = ПредставлениеДатыПодтвержденияОтправки(ДанныеСообщения.ДатаПолучения);
	Если ЗначениеЗаполнено(ДанныеСообщения.ДатаОтправки) Тогда
		ОбластьСообщенияОтказаАннулирования.Параметры.Дата = ОбщегоНазначенияБЭД.ПредставлениеЛокальнойДатыСоСмещением(
				ДанныеСообщения.ДатаОтправки,
				"ДЛФ=DT;");
	КонецЕсли;
	
	ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент, 
		ОбластьСообщенияОтказаАннулирования, 
		"ДанныеСообщенияОтказаАннулирования");
	
	ВывестиПодписиВПротокол(ДанныеСообщения, ТабличныйДокумент, Макет);
КонецПроцедуры

// Вывести подписи в протокол.
// 
// Параметры:
//  ДанныеСообщения - см. НовыеДанныеОсновногоСообщения 
//  ТабличныйДокумент - ТабличныйДокумент
//  Макет - ТабличныйДокумент
Процедура ВывестиПодписиВПротокол(ДанныеСообщения, ТабличныйДокумент, Макет)
	Если Не ЗначениеЗаполнено(ДанныеСообщения.Подписи) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Подпись Из ДанныеСообщения.Подписи Цикл
		ОбластьДанныеПодписи = Макет.ПолучитьОбласть("ДанныеПодписи");
		ОбластьДанныеПодписи.Параметры.Заполнить(Подпись);
		ОбластьДанныеПодписи.Параметры.ДатаПодписи = ОбщегоНазначенияБЭД.ПредставлениеЛокальнойДатыСоСмещением(
			Подпись.ДатаПодписи,
			"ДЛФ=DT;");
		ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент, ОбластьДанныеПодписи, "ДанныеПодписи");	
		
		Если ЗначениеЗаполнено(Подпись.СерийныйНомерСертификата) Тогда
			ОбластьДанныеСертификата = Макет.ПолучитьОбласть("ДанныеСертификатаПодписи");
			ОбластьДанныеСертификата.Параметры.Заполнить(Подпись);
			ОбластьДанныеСертификата.Параметры.ПериодДействияСертификата = ПредствлениеПериода(Подпись.ДатаНачалаДействияСертификата, 
				Подпись.ДатаОкончанияДействияСертификата); 
			ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент, ОбластьДанныеСертификата, "ДанныеСертификатаПодписи");		
		КонецЕсли;
		
		ВывестиДоверенностьВПротокол(Подпись, ТабличныйДокумент, Макет);
	КонецЦикла;

КонецПроцедуры

// Вывести доверенность в протокол.
// 
// Параметры:
//  ДанныеПодписи - см. НовыеДанныеПодписиДляПротоколаОбмена 
//  ТабличныйДокумент - ТабличныйДокумент
//  Макет - ТабличныйДокумент
Процедура ВывестиДоверенностьВПротокол(ДанныеПодписи, ТабличныйДокумент, Макет)
	Если Не ЗначениеЗаполнено(ДанныеПодписи.НомерДоверенности) Тогда
		Возврат;
	КонецЕсли;
	ОбластьДанныеДоверенностиНачало = Макет.ПолучитьОбласть("ДанныеДоверенностиНачало");
	ОбластьДанныеДоверенностиНачало.Параметры.Заполнить(ДанныеПодписи);
	ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент, ОбластьДанныеДоверенностиНачало, "ДанныеДоверенностиНачало");
	
	ВывестиСубъектыДоверенности(ДанныеПодписи.Доверители, 
		НСтр("ru='Доверитель;Доверитель;Доверители;Доверители;Доверители;Доверители'"), 
		ТабличныйДокумент, 
		Макет);
		
	ВывестиСубъектыДоверенности(ДанныеПодписи.Представители, 
		НСтр("ru='Представитель;Представитель;Представители;Представители;Представители;Представители'"), 
		ТабличныйДокумент, 
		Макет);
	
	ОбластьДанныеДоверенностиКонец = Макет.ПолучитьОбласть("ДанныеДоверенностиКонец");
	ОбластьДанныеДоверенностиКонец.Параметры.Заполнить(ДанныеПодписи);
	ОбластьДанныеДоверенностиКонец.Параметры.ПериодДействияДоверенности = ПредствлениеПериода(
		ДанныеПодписи.ДатаВыдачиДоверенности, 
		ДанныеПодписи.ДатаОкончанияДействияДоверенности);
	
	ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент, ОбластьДанныеДоверенностиКонец, "ДанныеДоверенностиКонец");
		
КонецПроцедуры

// Параметры:
//  Субъекты - Массив из Строка
//  ШаблонПредставленияСубъекта - Строка - подробнее в СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка
//  ТабличныйДокумент - ТабличныйДокумент
//  Макет - ТабличныйДокумент
Процедура ВывестиСубъектыДоверенности(Субъекты, ШаблонПредставленияСубъекта, ТабличныйДокумент, Макет)
	Если Субъекты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоСубъектов = Субъекты.Количество();
	Если КоличествоСубъектов = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяСубъекта = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(ШаблонПредставленияСубъекта, КоличествоСубъектов);

	Если КоличествоСубъектов > 1 Тогда
		
		НомерПозиции = 1;
		Для Каждого Субъект Из Субъекты Цикл
			
			Если НомерПозиции = 1 Тогда
				ОбластьДанныеСубъекта = Макет.ПолучитьОбласть("ДанныеДоверенностиСубъекты");
				ОбластьДанныеСубъекта.Параметры.Представление = Субъект;
				ОбластьДанныеСубъекта.Параметры.НомерПозиции = НомерПозиции;
				ОбластьДанныеСубъекта.Параметры.ИмяСубъекта = ИмяСубъекта;
				ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент, ОбластьДанныеСубъекта,
					"ДанныеДоверенностиСубъекты");
			Иначе
				ОбластьДанныеСубъекта = Макет.ПолучитьОбласть("ДанныеДоверенностиДоверителиСтрока");
				ОбластьДанныеСубъекта.Параметры.Представление = Субъект;
				ОбластьДанныеСубъекта.Параметры.НомерПозиции = НомерПозиции;
				ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент, ОбластьДанныеСубъекта,
					"ДанныеДоверенностиДоверителиСтрока");
			КонецЕсли;
			НомерПозиции = НомерПозиции + 1;
		КонецЦикла;

	Иначе
		ОбластьДанныеСубъекта = Макет.ПолучитьОбласть("ДанныеДоверенностиСубъект");
		ОбластьДанныеСубъекта.Параметры.Представление = Субъекты[0];
		ОбластьДанныеСубъекта.Параметры.ИмяСубъекта = ИмяСубъекта;
		ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент, ОбластьДанныеСубъекта,
			"ДанныеДоверенностиСубъект");

	КонецЕсли;
КонецПроцедуры

// Параметры:
//  ДатаНачала - Дата
//  ДатаОкончания - Дата
// 
// Возвращаемое значение:
//  Строка
Функция ПредствлениеПериода(ДатаНачала, ДатаОкончания)
	Возврат СтрШаблон(НСтр("ru = 'с %1 по %2'"), Формат(ДатаНачала, "ДЛФ=ДД"), Формат(ДатаОкончания, "ДЛФ=ДД"));
КонецФункции

// Параметры:
//  Дата - Дата
// 
// Возвращаемое значение:
//  Строка
Функция ПредставлениеДатыПодтвержденияОтправки(Дата)
	Результат = "";
	Если ЗначениеЗаполнено(Дата) Тогда
		Результат = ОбщегоНазначенияБЭД.ПредставлениеЛокальнойДатыСоСмещением(Дата, "ДЛФ=DT;");
	Иначе
		Результат = НСтр("ru = 'Отсутствует подтверждение оператора'");
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Параметры:
//  Дата - Дата
// 
// Возвращаемое значение:
//  Строка
Функция ПредставлениеДатыИзвещенияОПолучении(Дата)
	Результат = "";
	Если ЗначениеЗаполнено(Дата) Тогда
		Результат = ОбщегоНазначенияБЭД.ПредставлениеЛокальнойДатыСоСмещением(Дата, "ДЛФ=DT;");
	Иначе
		Результат = НСтр("ru = 'Отсутствует извещение о получении'");
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область ДанныеДляФормирования

// Параметры:
//  РеквизитыДокумента - ВыборкаИзРезультатаЗапроса:
//  	* Организация - ОпределяемыйТип.УчастникЭДО
//  	* ИдентификаторОрганизации - Строка
//  	* Контрагент - ОпределяемыйТип.УчастникЭДО
//  	* ИдентификаторКонтрагента - Строка
//  	
// Возвращаемое значение:
//  Структура - Сведения организации и контрагента протокола обмена:
// * Организация - ОпределяемыйТип.УчастникЭДО
// * ПредставлениеОрганизации - Строка
// * ИдентификаторОрганизации - Строка
// * ОператорОрганизации - Строка
// * Контрагент - ОпределяемыйТип.УчастникЭДО
// * ПредставлениеКонтрагента - Строка
// * ИдентификаторКонтрагента - Строка
// * ОператорКонтрагента - Строка
Функция СведенияОрганизацииИКонтрагентаПротоколаОбмена(РеквизитыДокумента)
	
	Результат = Новый Структура;
	Результат.Вставить("Организация", РеквизитыДокумента.Организация);
	Результат.Вставить("ПредставлениеОрганизации", ИнтеграцияЭДО.ПредставлениеЮрФизЛица(РеквизитыДокумента.Организация));
	Результат.Вставить("ИдентификаторОрганизации", РеквизитыДокумента.ИдентификаторОрганизации);
	
	СведенияОбОператореОрганизации = СинхронизацияЭДО.СведенияОбОператоре(РеквизитыДокумента.ИдентификаторОрганизации);
	Результат.Вставить("ОператорОрганизации", СведенияОбОператореОрганизации.Наименование);
	
	Результат.Вставить("Контрагент", РеквизитыДокумента.Контрагент);
	Результат.Вставить("ПредставлениеКонтрагента", ИнтеграцияЭДО.ПредставлениеЮрФизЛица(РеквизитыДокумента.Контрагент));
	Результат.Вставить("ИдентификаторКонтрагента", РеквизитыДокумента.ИдентификаторКонтрагента);
	
	СведенияОбОператореКонтрагента = СинхронизацияЭДО.СведенияОбОператоре(РеквизитыДокумента.ИдентификаторКонтрагента);
	Результат.Вставить("ОператорКонтрагента", СведенияОбОператореКонтрагента.Наименование);
	
	Возврат Результат;

КонецФункции

// Устанавливает в данные формирования протокола отправителя и получателя и связанные с ними поля
// 
// Параметры:
//  ДанныеФомированияПротокола - см. НовыеДанныеФомированияПротокола
//  ЭлектронныйДокумент - Неопределено
// 		- ДокументСсылка.ЭлектронныйДокументВходящийЭДО
// 		- ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  СведенияОрганизацииИКонтрагента - см. СведенияОрганизацииИКонтрагентаПротоколаОбмена
Процедура УстановитьДанныеКорреспондентов(ДанныеФомированияПротокола, ЭлектронныйДокумент, СведенияОрганизацииИКонтрагента)
	
	Если ТипЗнч(ЭлектронныйДокумент) = Тип("ДокументСсылка.ЭлектронныйДокументИсходящийЭДО") Тогда
		ДанныеФомированияПротокола.Отправитель = СведенияОрганизацииИКонтрагента.Организация;
		ДанныеФомированияПротокола.ИдентификаторОтправителя = СведенияОрганизацииИКонтрагента.ИдентификаторОрганизации;
		ДанныеФомированияПротокола.ПредставлениеОтправителя = СведенияОрганизацииИКонтрагента.ПредставлениеОрганизации;
		ДанныеФомированияПротокола.ПредставлениеОператораОтправителя = СведенияОрганизацииИКонтрагента.ОператорОрганизации;
		
		ДанныеФомированияПротокола.Получатель = СведенияОрганизацииИКонтрагента.Контрагент;
		ДанныеФомированияПротокола.ИдентификаторПолучателя = СведенияОрганизацииИКонтрагента.ИдентификаторКонтрагента;
		ДанныеФомированияПротокола.ПредставлениеПолучателя = СведенияОрганизацииИКонтрагента.ПредставлениеКонтрагента;
		ДанныеФомированияПротокола.ПредставлениеОператораПолучателя = СведенияОрганизацииИКонтрагента.ОператорКонтрагента;

	Иначе 
		ДанныеФомированияПротокола.Отправитель = СведенияОрганизацииИКонтрагента.Контрагент;
		ДанныеФомированияПротокола.ИдентификаторОтправителя = СведенияОрганизацииИКонтрагента.ИдентификаторКонтрагента;
		ДанныеФомированияПротокола.ПредставлениеОтправителя = СведенияОрганизацииИКонтрагента.ПредставлениеКонтрагента;
		ДанныеФомированияПротокола.ПредставлениеОператораОтправителя = СведенияОрганизацииИКонтрагента.ОператорКонтрагента;
		
		ДанныеФомированияПротокола.Получатель = СведенияОрганизацииИКонтрагента.Организация;
		ДанныеФомированияПротокола.ИдентификаторПолучателя = СведенияОрганизацииИКонтрагента.ИдентификаторОрганизации;
		ДанныеФомированияПротокола.ПредставлениеПолучателя = СведенияОрганизацииИКонтрагента.ПредставлениеОрганизации;
		ДанныеФомированияПротокола.ПредставлениеОператораПолучателя = СведенияОрганизацииИКонтрагента.ОператорОрганизации;
	КонецЕсли;

КонецПроцедуры

// Параметры:
//  ОсновныеСообщения - см. ОсновныеСообщенияПротоколаОбмена
//  ХронологияОбмена - см. ХронологияОбмена
Процедура ЗаполнитьДатыОтправкиПолученияОсновныхСообщенийПротокола(ОсновныеСообщения, ХронологияОбмена)
		
	Для каждого ЭлементХронологии Из ХронологияОбмена Цикл
		Если ЭлементХронологии.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПДП 
			Или ЭлементХронологии.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПДО Тогда
			
			УстановитьДатуВОсновноеСообщение(ОсновныеСообщения.ТитулОтправителя, 
				"ДатаОтправки", 
				ЭлементХронологии.ДатаПодтверждения);
			
		ИначеЕсли ЭлементХронологии.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИОП Тогда
			
			УстановитьДатуВОсновноеСообщение(ОсновныеСообщения.ТитулОтправителя, 
				"ДатаПолучения", 
				ЭлементХронологии.ДатаПодтверждения); 
				
		ИначеЕсли ЭлементХронологии.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя_ПДО 
			Или ЭлементХронологии.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя_ПДП Тогда
			
			УстановитьДатуВОсновноеСообщение(ОсновныеСообщения.ТитулПолучателя, 
				"ДатаОтправки", 
				ЭлементХронологии.ДатаПодтверждения);
				
		ИначеЕсли ЭлементХронологии.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя_ИОП Тогда
			
			УстановитьДатуВОсновноеСообщение(ОсновныеСообщения.ТитулПолучателя, 
				"ДатаПолучения", 
				ЭлементХронологии.ДатаПодтверждения);
		
		Иначе
			ЗаполнитьДатыУточненийИПредложенийОбАннулировании(ЭлементХронологии, ОсновныеСообщения);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  ЭлементХронологии - СтрокаТаблицыЗначений: см. ХронологияОбмена
//  ОсновныеСообщения - см. ХронологияОбмена
Процедура ЗаполнитьДатыУточненийИПредложенийОбАннулировании(ЭлементХронологии, ОсновныеСообщения)
	Если ЭлементХронологии.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.УОУ_ПДО 
		Или ЭлементХронологии.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.УОУ_ПДП Тогда
		
		УстановитьДатуВОсновноеСообщение(ОсновныеСообщения.УведомлениеОбУточнении, 
			"ДатаОтправки", 
			ЭлементХронологии.ДатаПодтверждения);
			
	ИначеЕсли ЭлементХронологии.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПОА_УОУ Тогда
		
		УстановитьДатуВОсновноеСообщение(ОсновныеСообщения.УведомлениеОбУточнении, 
			"ДатаОтправки", 
			ЭлементХронологии.ДатаПодтверждения);
			
	ИначеЕсли ЭлементХронологии.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.УОУ_ИОП Тогда
		
		УстановитьДатуВОсновноеСообщение(ОсновныеСообщения.УведомлениеОбУточнении, 
			"ДатаПолучения", 
			ЭлементХронологии.ДатаПодтверждения);
	
	ИначеЕсли ЭлементХронологии.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПОА Тогда
			
			УстановитьДатуВОсновноеСообщение(ОсновныеСообщения.ПредложениеОбАннулировании, 
				"ДатаПолучения", 
				ЭлементХронологии.ДатаИзмененияСтатуса);
	КонецЕсли;
КонецПроцедуры

// Параметры:
//  ОсновныеСообщения - см. ОсновныеСообщенияПротоколаОбмена
//  ХронологияОбмена - см. ХронологияОбмена
Процедура ЗаполнитьДатыОтправкиПолученияОсновныхСообщенийПротоколаВнутреннегоОбмена(ОсновныеСообщения, ХронологияОбмена)

	ЭлементХронологии = ХронологияОбмена.Найти(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя,
		"ТипЭлементаРегламента");
	Если ЭлементХронологии <> Неопределено Тогда
		УстановитьДатуВОсновноеСообщение(ОсновныеСообщения.ТитулОтправителя, "ДатаОтправки",
			ЭлементХронологии.ДатаИзмененияСтатуса);
		УстановитьДатуВОсновноеСообщение(ОсновныеСообщения.ТитулОтправителя,
			"ДатаПолучения", ЭлементХронологии.ДатаИзмененияСтатуса);
	КонецЕсли;

КонецПроцедуры

// Параметры:
//  ОсновныеСообщения - см. ОсновныеСообщенияПротоколаОбмена
//  ХронологияОбмена - см. ХронологияОбмена
Процедура ЗаполнитьДатыОтправкиПолученияОсновныхСообщенийПротоколаПрямогоОбмена(ОсновныеСообщения, ХронологияОбмена)
	
	ЭлементИнформацииОтправителя = Неопределено;
	ЭлементИнформацииПолучателя = Неопределено;
	ДатыОтправителяЗаполнены = Ложь;
	ДатыПолучателяЗаполнены = Ложь;
	Для Каждого ЭлементХронологии Из ХронологияОбмена Цикл
		
		Если ЭлементХронологии.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя Тогда
			ЭлементИнформацииОтправителя = ЭлементХронологии;
		
		ИначеЕсли ЭлементХронологии.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя Тогда
			ЭлементИнформацииПолучателя = ЭлементХронологии;
		
		ИначеЕсли ЭлементХронологии.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИОП Тогда
			УстановитьДатуВОсновноеСообщение(ОсновныеСообщения.ТитулОтправителя, 
				"ДатаПолучения", 
				ЭлементХронологии.ДатаПодтверждения);
			
			УстановитьДатуВОсновноеСообщение(ОсновныеСообщения.ТитулОтправителя, 
				"ДатаОтправки", 
				ЭлементХронологии.ДатаПодтверждения);
				
			ДатыОтправителяЗаполнены = Истина;
			
		ИначеЕсли ЭлементХронологии.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя_ИОП Тогда
			УстановитьДатуВОсновноеСообщение(ОсновныеСообщения.ТитулПолучателя, 
				"ДатаПолучения", 
				ЭлементХронологии.ДатаПодтверждения);
		
			УстановитьДатуВОсновноеСообщение(ОсновныеСообщения.ТитулПолучателя, 
				"ДатаОтправки", 
				ЭлементХронологии.ДатаПодтверждения);
				
			ДатыПолучателяЗаполнены = Истина;
		
		Иначе
			ЗаполнитьДатыУточненийИПредложенийОбАннулировании(ЭлементХронологии, ОсновныеСообщения);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ДатыОтправителяЗаполнены И ЗначениеЗаполнено(ЭлементИнформацииОтправителя) Тогда
		УстановитьДатуВОсновноеСообщение(ОсновныеСообщения.ТитулОтправителя, 
			"ДатаПолучения", 
			ЭлементИнформацииОтправителя.ДатаИзмененияСтатуса); 
		
		УстановитьДатуВОсновноеСообщение(ОсновныеСообщения.ТитулОтправителя, 
			"ДатаОтправки", 
			ЭлементИнформацииОтправителя.ДатаИзмененияСтатуса);
	КонецЕсли;
	
	Если Не ДатыПолучателяЗаполнены И ЗначениеЗаполнено(ЭлементИнформацииПолучателя) Тогда
		УстановитьДатуВОсновноеСообщение(ОсновныеСообщения.ТитулПолучателя, 
			"ДатаПолучения", 
			ЭлементИнформацииПолучателя.ДатаИзмененияСтатуса); 
		
		УстановитьДатуВОсновноеСообщение(ОсновныеСообщения.ТитулПолучателя, 
			"ДатаОтправки", 
			ЭлементИнформацииПолучателя.ДатаИзмененияСтатуса);
	КонецЕсли;
	
КонецПроцедуры

#Область ОсновныеСообщения

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
// 		- ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  СообщенияДокумента - Массив из СтрокаТаблицыЗначений: см. СообщенияДокументовПоОтбору
//  СведенияОрганизацииИКонтрагента - см. СведенияОрганизацииИКонтрагентаПротоколаОбмена
// 
// Возвращаемое значение:
//  см. НовыеОсновныеСообщенияПротокола
Функция ОсновныеСообщенияПротоколаОбмена(ЭлектронныйДокумент, СообщенияДокумента, СведенияОрганизацииИКонтрагента)
	
	Результат = НовыеОсновныеСообщенияПротокола();
	
	Для каждого СообщениеДокумента Из СообщенияДокумента Цикл
		
		Если СообщениеДокумента.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя Тогда
			
			Результат.ТитулОтправителя = ДанныеОсновногоСообщенияПротокола(СообщениеДокумента, СведенияОрганизацииИКонтрагента);
			
		ИначеЕсли СообщениеДокумента.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя Тогда
			
			Результат.ТитулПолучателя = ДанныеОсновногоСообщенияПротокола(СообщениеДокумента, СведенияОрганизацииИКонтрагента);
			
		ИначеЕсли СообщениеДокумента.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.УОУ 
			Или СообщениеДокумента.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПОА_УОУ Тогда
			
			Результат.УведомлениеОбУточнении = ДанныеОсновногоСообщенияПротокола(СообщениеДокумента, 
				СведенияОрганизацииИКонтрагента, НСтр("ru = 'Документ не принят'"));
		
		ИначеЕсли СообщениеДокумента.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПОА Тогда
			
			Результат.ПредложениеОбАннулировании = ДанныеОсновногоСообщенияПротокола(СообщениеДокумента, СведенияОрганизацииИКонтрагента);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ДанныеСообщения - СтрокаТаблицыЗначений: см. СообщенияДокументовПоОтбору
//  СведенияОрганизацииИКонтрагента - см. СведенияОрганизацииИКонтрагентаПротоколаОбмена
//  ПредставлениеТитула - Строка 
// 
// Возвращаемое значение:
//  см.НовыеДанныеОсновногоСообщенияПротокола
Функция ДанныеОсновногоСообщенияПротокола(ДанныеСообщения, СведенияОрганизацииИКонтрагента, ПредставлениеТитула = "")
	ДанныеОсновногоСообщения = НовыеДанныеОсновногоСообщенияПротокола();
	
	ЗаполнитьЗначенияСвойств(ДанныеОсновногоСообщения, ДанныеСообщения);
	УстановитьОтправителяОсновногоСообщения(ДанныеОсновногоСообщения, 
		ДанныеСообщения.Направление, 
		СведенияОрганизацииИКонтрагента);

	Если ЗначениеЗаполнено(ПредставлениеТитула) Тогда
		ДанныеОсновногоСообщения.ПредставлениеСообщения = ПредставлениеТитула;
	КонецЕсли;
	
	ДанныеОсновногоСообщения.ИмяФайлаСообщения = ДанныеСообщения.ПолноеИмяФайла;
	ДанныеОсновногоСообщения.ИдентификаторСообщения = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(
		ДанныеСообщения.ПолноеИмяФайла).ИмяБезРасширения;
		
	ДанныеОсновногоСообщения.Подписи = ДанныеПодписейПротокола(ДанныеСообщения.ОсновнойФайл);
	ДанныеОсновногоСообщения.Комментарий = КомментарийСообщенияПротокола(ДанныеСообщения);
		
	Возврат ДанныеОсновногоСообщения;
КонецФункции

// Установить отправителя основного сообщения.
// 
// Параметры:
//  ДанныеОсновногоСообщения - См. НовыеДанныеОсновногоСообщенияПротокола
//  Направление - ПеречислениеСсылка.НаправленияЭДО
//  СведенияОрганизацииИКонтрагента - см. СведенияОрганизацииИКонтрагентаПротоколаОбмена
Процедура УстановитьОтправителяОсновногоСообщения(ДанныеОсновногоСообщения, Направление, СведенияОрганизацииИКонтрагента)
	Если Направление = Перечисления.НаправленияЭДО.Исходящий Тогда
		ДанныеОсновногоСообщения.Отправитель = СведенияОрганизацииИКонтрагента.Организация;
		ДанныеОсновногоСообщения.ПредставлениеОтправителя = СведенияОрганизацииИКонтрагента.ПредставлениеОрганизации;
	Иначе
		ДанныеОсновногоСообщения.Отправитель = СведенияОрганизацииИКонтрагента.Контрагент;
		ДанныеОсновногоСообщения.ПредставлениеОтправителя = СведенияОрганизацииИКонтрагента.ПредставлениеКонтрагента;
	КонецЕсли;
КонецПроцедуры

// Параметры:
//  ДанныеСообщения - СтрокаТаблицыЗначений: см. СообщенияДокументовПоОтбору
//  
// Возвращаемое значение:
//  Строка - Комментарий сообщения протокола
Функция КомментарийСообщенияПротокола(ДанныеСообщения)
	Результат = "";
	Если ДанныеСообщения.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПОА
		Или ДанныеСообщения.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.УОУ
		Или ДанныеСообщения.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПОА_УОУ Тогда
			
		ОписаниеФайла = РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла();
		ОписаниеФайла.ДвоичныеДанные = ЭлектронныеДокументыЭДО.ДвоичныеДанныеСообщения(ДанныеСообщения.Ссылка, Истина);
		ОписаниеФайла.ИмяФайла = ДанныеСообщения.ПолноеИмяФайла;

		Результат = ФорматыЭДО.ТекстУточнения(ОписаниеФайла);
		
	КонецЕсли;

	Возврат Результат;
КонецФункции

// Установить дату в основное сообщение.
// 
// Параметры:
//  ОсновноеСообщение - см. НовыеОсновныеСообщенияПротокола
//  ИмяСвойства - Строка
//  Дата - Дата
Процедура УстановитьДатуВОсновноеСообщение(ОсновноеСообщение, ИмяСвойства, Дата)
	Если Не ТипЗнч(ОсновноеСообщение) = Тип("Структура") Или Не ЗначениеЗаполнено(Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Если ОсновноеСообщение.Свойство(ИмяСвойства) Тогда
		ОсновноеСообщение.Вставить(ИмяСвойства, Дата);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ДанныеПодписей

// Данные подписей протокола.
// 
// Параметры:
//  ФайлСообщения - ОпределяемыйТип.ВладелецПрисоединенныхФайлов
// 
// Возвращаемое значение:
//  Массив из см. НовыеДанныеПодписиДляПротоколаОбмена
Функция ДанныеПодписейПротокола(ФайлСообщения)
	ДанныеПодписей = Новый Массив;
	
	УстановленныеПодписи = ЭлектронныеДокументыЭДО.УстановленныеПодписиФайлаСУчетомДоверенностей(ФайлСообщения);
	Для Каждого Подпись Из УстановленныеПодписи Цикл
		НовыеДанныеПодписи = НовыеДанныеПодписиДляПротоколаОбмена();
		СвойстваПодписи = Подпись.СвойстваПодписи;

		НовыеДанныеПодписи.ПредставлениеПодписанта = СвойстваПодписи.Владелец;
		НовыеДанныеПодписи.ДатаПодписи = СвойстваПодписи.ДатаПодписи;
		
		Если СвойстваПодписи.Сертификат <> Неопределено Тогда
			ДанныеСертификата = СвойстваПодписи.Сертификат.Получить();
			Если ЗначениеЗаполнено(ДанныеСертификата) Тогда
				Сертификат = Новый СертификатКриптографии(ДанныеСертификата);
				
				СвойстваСертификата = ЭлектроннаяПодпись.СвойстваСертификата(Сертификат);
				
				Если СвойстваСертификата <> Неопределено Тогда
					НовыеДанныеПодписи.СерийныйНомерСертификата = СвойстваСертификата.СерийныйНомер;
					НовыеДанныеПодписи.ДатаНачалаДействияСертификата = СвойстваСертификата.ДатаНачала;
					НовыеДанныеПодписи.ДатаОкончанияДействияСертификата = СвойстваСертификата.ДатаОкончания;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ПредставленияПроверкиПодписи = ПредставленияПроверкиПодписи(Подпись);
		ПредставленияПроверкиДоверенностиПодписи = ПредставлениеРезультатаПроверкиДоверенности(Подпись);
		НовыеДанныеПодписи.РезультатПроверкиПодписи = СтрШаблон("%1 %2", ПредставленияПроверкиПодписи,
			ПредставленияПроверкиДоверенностиПодписи);

		СвойстваДоверенности = Подпись.СвойстваДоверенности;
		Если ЗначениеЗаполнено(СвойстваДоверенности) Тогда
			НовыеДанныеПодписи.Доверенность = СвойстваДоверенности.Ссылка;
			НовыеДанныеПодписи.НомерДоверенности = СвойстваДоверенности.НомерДоверенности;
			НовыеДанныеПодписи.СтатусДоверенности = ПредставленияПроверкиДоверенностиПодписи;

			НовыеДанныеПодписи.ДатаВыдачиДоверенности = СвойстваДоверенности.ДатаВыдачи;
			Если ЗначениеЗаполнено(СвойстваДоверенности.ДатаОтзыва) Тогда
				НовыеДанныеПодписи.ДатаОкончанияДействияДоверенности = СвойстваДоверенности.ДатаОтзыва;
			Иначе
				НовыеДанныеПодписи.ДатаОкончанияДействияДоверенности = СвойстваДоверенности.ДатаОкончания;
			КонецЕсли;
		КонецЕсли;
		
		ДанныеПодписей.Добавить(НовыеДанныеПодписи);
	КонецЦикла;
	
	УстановитьДоверителейИПредставителей(ДанныеПодписей);

	Возврат ДанныеПодписей;
КонецФункции

// Параметры:
//  Подпись - см. ЭлектронныеДокументыЭДОКлиентСервер.НовыеДанныеПодписиСУчетомДоверенности
// 
// Возвращаемое значение:
//  Строка
Функция ПредставлениеРезультатаПроверкиДоверенности(Подпись)
	Результат = "";
	
	Если Подпись.ЭтоПодписьПоДоверенности Тогда
		
		ПроверкаДоверенностиВыполненаВручную = МашиночитаемыеДоверенностиКлиентСервер.ПроверкаДоверенностиВыполненаВручную(Подпись.РезультатПроверкиПоМЧД);
		Если ПроверкаДоверенностиВыполненаВручную Тогда
			Результат = МашиночитаемыеДоверенности.ПредставлениеРезультатаРучнойПроверкиМЧД();
			
		Иначе
			Если ДоверенностьОпределенна(Подпись.СвойстваДоверенности) Тогда
				ПротоколПроверки = Неопределено;
				ИмеетсяПротоколПроверки = Ложь;
				
				Если ЗначениеЗаполнено(Подпись.РезультатПроверкиПоМЧД) Тогда
					ПротоколПроверки = Подпись.РезультатПроверкиПоМЧД.ПротоколПроверки;
					ИмеетсяПротоколПроверки = ПротоколПроверки <> Неопределено;
				КонецЕсли;
				
				ДоверенностьДействует = Ложь;
				
				Если ИмеетсяПротоколПроверки И ПротоколПроверки.ВерсияПротокола = "2.0" Тогда
					ПроверкаДоверенности = ПротоколПроверки.ПроверкаМЧД;
					ДоверенностьДействует = МашиночитаемыеДоверенностиКлиентСервер.ДоверенностьПроверенаУспешно(ПроверкаДоверенности);
				Иначе
					ДоверенностьДействует = МашиночитаемыеДоверенности.ДоверенностьДействительнаПоСвойствам(Подпись.СвойстваДоверенности, Подпись.СвойстваПодписи.ДатаПодписи);
				КонецЕсли; 
				
				Результат = МашиночитаемыеДоверенности.ПредставлениеРезультатаАвтоматическойПроверкиМЧД(ДоверенностьДействует);
			Иначе
				Результат = НСтр("ru = 'Доверенность не проверена'");	
			КонецЕсли;
		КонецЕсли;
				
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Параметры:
//  Подпись - см. ЭлектронныеДокументыЭДОКлиентСервер.НовыеДанныеПодписиСУчетомДоверенности
// 
// Возвращаемое значение:
//  Строка
Функция ПредставленияПроверкиПодписи(Подпись)
	Результат = "";
	Если Подпись.ЭтоПодписьПоДоверенности Тогда
		ПроверкаДоверенностиВыполненаВручную = МашиночитаемыеДоверенностиКлиентСервер.ПроверкаДоверенностиВыполненаВручную(Подпись.РезультатПроверкиПоМЧД);
		Если Не ПроверкаДоверенностиВыполненаВручную И Не ДоверенностьОпределенна(Подпись.СвойстваДоверенности) Тогда
			Результат = НСтр("ru = 'Доверенность не найдена'");
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Подпись.СвойстваПодписи.ДатаПроверкиПодписи) Тогда
		ПредставлениеПодписьВерна = ?(Подпись.СвойстваПодписи.ПодписьВерна, НСтр("ru = 'Подпись верна'"), НСтр("ru = 'Подпись неверна'"));
		Результат = СтрШаблон("%1. %2", ПредставлениеПодписьВерна, Результат);
	Иначе
		ПредставлениеПодписьНеПроверена = НСтр("ru = 'Не проверена'");
		Результат = СтрШаблон("%1. %2", ПредставлениеПодписьНеПроверена, Результат);
	КонецЕсли; 
	
	Возврат Результат; 
КонецФункции

// Параметры:
//  СвойстваДоверенности - см. МашиночитаемыеДоверенности.ОбщиеСвойстваДоверенности
// 
// Возвращаемое значение:
//  Булево
Функция ДоверенностьОпределенна(СвойстваДоверенности)
	
	Возврат ЗначениеЗаполнено(СвойстваДоверенности) И ЗначениеЗаполнено(СвойстваДоверенности.Ссылка);	
	
КонецФункции

// Параметры:
//  ДанныеПодписей - см. ДанныеПодписейПротокола
Процедура УстановитьДоверителейИПредставителей(ДанныеПодписей)
	Доверенности = Новый Массив;
	Для Каждого ОписаниеДанныхПодписей Из ДанныеПодписей Цикл
		Если ЗначениеЗаполнено(ОписаниеДанныхПодписей.Доверенность) Тогда
			Доверенности.Добавить(ОписаниеДанныхПодписей.Доверенность);
		КонецЕсли;
	КонецЦикла;
	
	ПредставленияДоверителейИПредставителей = ПредставленияДоверителейИПредставителей(Доверенности);
	Для Каждого ОписаниеДанныхПодписей Из ДанныеПодписей Цикл
		ПредставлениеДоверителейИПредставителей = ПредставленияДоверителейИПредставителей.Получить(
			ОписаниеДанныхПодписей.Доверенность);
			
		Если ПредставлениеДоверителейИПредставителей <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ОписаниеДанныхПодписей, ПредставлениеДоверителейИПредставителей);
			
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Сведения о доверителях и представителях.
// 
// Параметры:
//  Доверенности - Массив из ОпределяемыйТип.МашиночитаемаяДоверенность
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - ОпределяемыйТип.МашиночитаемаяДоверенность
//  * Значение - см. НовыеПредставленияДоверителейПредставителей
Функция ПредставленияДоверителейИПредставителей(Доверенности)
	Результат = Новый Соответствие;
	ДоверителиПредставители = РегистрыСведений.ЖурналМашиночитаемыхДоверенностей.ДоверителиПредставителиДоверенностей(Доверенности);
	
	Для Каждого КлючЗначение Из ДоверителиПредставители Цикл
		Доверенность = КлючЗначение.Ключ;
		ДоверителиПредставителиДоверенности = КлючЗначение.Значение;
		
		ПредставленияДоверителейПредставителей = НовыеПредставленияДоверителейПредставителей();
		
		ПредставленияДоверителейПредставителей.Доверители = ПредставленияСубьектовДовернности(
			ДоверителиПредставителиДоверенности.Доверители);
			
		ПредставленияДоверителейПредставителей.Представители = ПредставленияСубьектовДовернности(
			ДоверителиПредставителиДоверенности.Представители);

		Результат.Вставить(Доверенность, ПредставленияДоверителейПредставителей);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Параметры:
//  ДанныеСубъекта - Массив из См. РегистрыСведений.ЖурналМашиночитаемыхДоверенностей.НовыйДоверитель, 
//  	См. РегистрыСведений.ЖурналМашиночитаемыхДоверенностей.НовыйПредставитель
// 
// Возвращаемое значение:
//  Массив из Строка
Функция ПредставленияСубьектовДовернности(ДанныеСубъекта)
	ПредставленияСубьектовДовернности = Новый Массив;
	Для Каждого Субъект Из ДанныеСубъекта Цикл
		ПредставленияСубьектовДовернности.Добавить(МашиночитаемыеДоверенности.ПредставлениеСубъектаДоверенности(Субъект));
	КонецЦикла;
	Возврат ПредставленияСубьектовДовернности;
КонецФункции

#КонецОбласти

#Область Конструкторы

// Возвращаемое значение:
//  Структура:
// * ТитулОтправителя - Неопределено 
// 					-см.НовыеДанныеОсновногоСообщенияПротокола
// * ТитулПолучателя - Неопределено
// 					- см.НовыеДанныеОсновногоСообщенияПротокола
// * УведомлениеОбУточнении - Неопределено
// 					- см.НовыеДанныеОсновногоСообщенияПротокола
// * ПредложениеОбАннулировании - Неопределено
//					- см.НовыеДанныеОсновногоСообщенияПротокола
Функция НовыеОсновныеСообщенияПротокола()
	
	Результат = Новый Структура;
	Результат.Вставить("ТитулОтправителя");
	Результат.Вставить("ТитулПолучателя");
	Результат.Вставить("УведомлениеОбУточнении");
	Результат.Вставить("ПредложениеОбАннулировании");
	
	Возврат Результат;
КонецФункции

// Возвращаемое значение:
//  Структура - Новые данные подписи:
// * ПредставлениеПодписанта - Строка
// * ДатаПодписи - Дата
// * РезультатПроверкиПодписи - Строка
// * СерийныйНомерСертификата - Строка
// * ДатаНачалаДействияСертификата - Дата
// * ДатаОкончанияДействияСертификата - Дата
// * Доверенность - Произвольный
// * НомерДоверенности - Строка
// * СтатусДоверенности - Строка
// * Доверители - Массив из Строка
// * Представители - Массив из Строка
// * ДатаВыдачиДоверенности - Дата
// * ДатаОкончанияДействияДоверенности - Дата
Функция НовыеДанныеПодписиДляПротоколаОбмена()
	ДанныеПодписи = Новый Структура;
	ДанныеПодписи.Вставить("ПредставлениеПодписанта", "");
	ДанныеПодписи.Вставить("ДатаПодписи", '00010101');
	ДанныеПодписи.Вставить("РезультатПроверкиПодписи", "");
	ДанныеПодписи.Вставить("СерийныйНомерСертификата", "");
	ДанныеПодписи.Вставить("ДатаНачалаДействияСертификата", '00010101');
	ДанныеПодписи.Вставить("ДатаОкончанияДействияСертификата", '00010101');
	
	ДанныеПодписи.Вставить("Доверенность", Метаданные.ОпределяемыеТипы.МашиночитаемаяДоверенность.Тип.ПривестиЗначение(Неопределено));
	ДанныеПодписи.Вставить("НомерДоверенности", "");
	ДанныеПодписи.Вставить("СтатусДоверенности", "");
	ДанныеПодписи.Вставить("Доверители", Новый Массив);
	ДанныеПодписи.Вставить("Представители", Новый Массив);
	ДанныеПодписи.Вставить("ДатаВыдачиДоверенности", '00010101');
	ДанныеПодписи.Вставить("ДатаОкончанияДействияДоверенности", '00010101');
	
	Возврат ДанныеПодписи;

КонецФункции 

// Возвращаемое значение:
//  Структура - Новые данные основного сообщения:
// * Сообщение - ДокументСсылка.СообщениеЭДО
// * Документ - Неопределено
// 		- ДокументСсылка.ЭлектронныйДокументВходящийЭДО
// 		- ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// * Отправитель - ОпределяемыйТип.УчастникЭДО 
// * ПредставлениеОтправителя - Строка
// * ТипЭлементаРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО
// * ПредставлениеСообщения - Строка
// * ДатаОтправки - Дата
// * ДатаПолучения - Дата
// * Комментарий - Строка
// * ИдентификаторСообщения - Строка
// * ИмяФайлаСообщения - Строка
// * Подписи - Массив из см.НовыеДанныеПодписиДляПротоколаОбмена
Функция НовыеДанныеОсновногоСообщенияПротокола()

	Результат = Новый Структура;
	Результат.Вставить("Сообщение", Документы.СообщениеЭДО.ПустаяСсылка());
	Результат.Вставить("Документ", Неопределено);
	Результат.Вставить("Отправитель", Метаданные.ОпределяемыеТипы.УчастникЭДО.Тип.ПривестиЗначение(Неопределено));
	Результат.Вставить("ПредставлениеОтправителя", "");
	Результат.Вставить("ТипЭлементаРегламента", Перечисления.ТипыЭлементовРегламентаЭДО.ПустаяСсылка());
	Результат.Вставить("ПредставлениеСообщения", "");
	Результат.Вставить("ДатаОтправки", '00010101');
	Результат.Вставить("ДатаПолучения", '00010101');
	Результат.Вставить("Комментарий", "");
	Результат.Вставить("ИдентификаторСообщения", "");
	Результат.Вставить("ИмяФайлаСообщения", "");
	Результат.Вставить("Подписи", Новый Массив);
	
	Возврат Результат;
КонецФункции

// Возвращаемое значение:
//  ТаблицаЗначений - Новая хронология обмена:
// * Сообщение - ДокументСсылка.СообщениеЭДО
// * ТипЭлементаРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО
// * ПредставлениеСообщения - Строка
// * ДатаИзмененияСтатуса - Дата
// * Статус - ПеречислениеСсылка.СтатусыСообщенийЭДО
// * ДатаПодтверждения - Дата
// * ПредставлениеОтправителя - Строка
// * ИдентификаторСообщения - Строка
Функция НоваяХронологияОбмена()
	СтрокаНеограниченнойДлины = Новый ОписаниеТипов("Строка");
	ДатаИВремяОписаниеТипа = ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя);
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Сообщение", Новый ОписаниеТипов("ДокументСсылка.СообщениеЭДО"));
	Результат.Колонки.Добавить("ТипЭлементаРегламента", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО"));
	Результат.Колонки.Добавить("ПредставлениеСообщения", СтрокаНеограниченнойДлины);
	Результат.Колонки.Добавить("ДатаИзмененияСтатуса", ДатаИВремяОписаниеТипа);
	Результат.Колонки.Добавить("Статус", Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыСообщенийЭДО"));
	Результат.Колонки.Добавить("ДатаПодтверждения", ДатаИВремяОписаниеТипа);
	Результат.Колонки.Добавить("ПредставлениеОтправителя", СтрокаНеограниченнойДлины);
	Результат.Колонки.Добавить("ИдентификаторСообщения", СтрокаНеограниченнойДлины);
	
	Возврат Результат;
КонецФункции

// Возвращаемое значение:
//  Структура:
// * Доверители - Массив из Строка - Представление доверителя
// * Представители - Массив из Строка - Представление представителя
Функция НовыеПредставленияДоверителейПредставителей()
	Возврат Новый Структура("Доверители, Представители", Новый Массив, Новый Массив);
КонецФункции

#КонецОбласти

#Область ХронологияОбмена

// Хронология обмена.
// 
// Параметры:
//  СообщенияДокумента - Массив из СтрокаТаблицыЗначений: см. СообщенияДокументовПоОтбору
//  СведенияОрганизацииИКонтрагента - см. СведенияОрганизацииИКонтрагентаПротоколаОбмена
// 
// Возвращаемое значение:
//  см. НоваяХронологияОбмена
Функция ХронологияОбмена(СообщенияДокумента, СведенияОрганизацииИКонтрагента)

	Результат = НоваяХронологияОбмена();
	
	Для каждого ДанныеСообщенияДокумента Из СообщенияДокумента Цикл
		
		СтрокаХронологии = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаХронологии, ДанныеСообщенияДокумента);
		
		СтрокаХронологии.ИдентификаторСообщения = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(
			ДанныеСообщенияДокумента.ПолноеИмяФайла).ИмяБезРасширения;
		
		ЭтоПодтверждениеОператораЭДО = ДанныеСообщенияДокумента.ТипСлужебногоДокумента = Перечисления.ТипыДокументовЭДО.ПодтверждениеОператораЭДО
			Или ДанныеСообщенияДокумента.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя_ПДП_ИОП
			Или ДанныеСообщенияДокумента.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя_ПДП_ИОП
			Или ДанныеСообщенияДокумента.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИОП_ПДП_ИОП;
			
		Если ДанныеСообщенияДокумента.Направление = Перечисления.НаправленияЭДО.Входящий Тогда
			СтрокаХронологии.ПредставлениеОтправителя = ?(ЭтоПодтверждениеОператораЭДО,
				СведенияОрганизацииИКонтрагента.ОператорКонтрагента,
				СведенияОрганизацииИКонтрагента.ПредставлениеКонтрагента);
			
		Иначе
			СтрокаХронологии.ПредставлениеОтправителя = ?(ЭтоПодтверждениеОператораЭДО, 
				СведенияОрганизацииИКонтрагента.ОператорОрганизации,
				СведенияОрганизацииИКонтрагента.ПредставлениеОрганизации);
		КонецЕсли;
		
		СтрокаХронологии.ДатаПодтверждения = ДатаПодтверждения(ДанныеСообщенияДокумента.Ссылка, 
			ДанныеСообщенияДокумента.ТипСлужебногоДокумента);

	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// Параметры:
//  Сообщение - ДокументСсылка.СообщениеЭДО
//  ТипСлужебногоДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
// 
// Возвращаемое значение:
//  Дата
Функция ДатаПодтверждения(Сообщение, ТипСлужебногоДокумента)
	Результат = Дата(1, 1, 1);
	
	Если ТипСлужебногоДокумента = Перечисления.ТипыДокументовЭДО.ИзвещениеОПолучении 
		Или ТипСлужебногоДокумента = Перечисления.ТипыДокументовЭДО.УведомлениеОбУточнении Тогда
		
		ДанныеСообщения = ЭлектронныеДокументыЭДО.ДвоичныеДанныеСообщения(Сообщение, Истина);
		ДанныеЭлектронногоДокумента = ОбменСКонтрагентами.ДанныеЭлектронногоДокументаПоФайлу(ДанныеСообщения);
		Результат = ДатаИВремяИзДереваРазбора(ДанныеЭлектронногоДокумента, 
			"ДатаПолучения", 
			"ВремяПолучения");
			
	ИначеЕсли ТипСлужебногоДокумента = Перечисления.ТипыДокументовЭДО.ПодтверждениеОператораЭДО Тогда
		
		ДанныеСообщения = ЭлектронныеДокументыЭДО.ДвоичныеДанныеСообщения(Сообщение, Истина);
		ДанныеЭлектронногоДокумента = ОбменСКонтрагентами.ДанныеЭлектронногоДокументаПоФайлу(ДанныеСообщения);
		Результат = ДатаИВремяИзДереваРазбора(ДанныеЭлектронногоДокумента, 
			"ДатаОтправки", 
			"ВремяОтправки");
			
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Дата и время из дерева разбора.
// 
// Параметры:
//  ДанныеЭлектронногоДокумента - см. ОбменСКонтрагентами.ДанныеЭлектронногоДокументаПоФайлу
//  ИмяРеквизитаДаты - Строка
//  ИмяРеквизитаВремени - Строка
// 
// Возвращаемое значение:
//  Дата
Функция ДатаИВремяИзДереваРазбора(ДанныеЭлектронногоДокумента, ИмяРеквизитаДаты, ИмяРеквизитаВремени)
	
	ДатаОтправки = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДанныеЭлектронногоДокумента.НовыйЭД, ДанныеЭлектронногоДокумента.НовыйЭД, ИмяРеквизитаДаты);

	ВремяОтправки = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДанныеЭлектронногоДокумента.НовыйЭД, ДанныеЭлектронногоДокумента.НовыйЭД, ИмяРеквизитаВремени);

	ДатаИВремяОтправкиСтрокой = СтрШаблон("%1 %2", ДатаОтправки, ВремяОтправки);
	ДатаИВремяОтправки = ОбщегоНазначенияБЭДКлиентСервер.ПолучитьДатуВремяИзСтроки(ДатаИВремяОтправкиСтрокой);
	ЧасовойПоясМСК = "Europe/Moscow";
	Если ЧасовойПоясМСК <> ЧасовойПоясСеанса() Тогда
		// Необходим пересчет даты и времени файла подтверждения от оператора т.к. оно всегда в часовом поясе Europe/Moscow
		ДатаИВремяОтправки = МестноеВремя(УниверсальноеВремя(ДатаИВремяОтправки, ЧасовойПоясМСК));
	КонецЕсли;
	
	Возврат ДатаИВремяОтправки;
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецЕсли
