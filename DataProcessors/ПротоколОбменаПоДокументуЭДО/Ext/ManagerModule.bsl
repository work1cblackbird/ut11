// @strict-types
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

#Область Печать

// Параметры:
//  ЭлектронныеДокументы - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО, 
//  	ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// 
// Возвращаемое значение:
// 	Соответствие из КлючИЗначение:
// * Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, 
// 		- ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// * Значение - ТабличныйДокумент 
Функция ПротоколыОбменаПоДокументам(ЭлектронныеДокументы) Экспорт
	Результат = Новый Соответствие;
	Попытка
		ДанныеПротоколовОбменаПоДокументам = ДанныеПротоколовОбменаПоДокументам(ЭлектронныеДокументы);
	
		Для Каждого ЭлектронныйДокумент Из ЭлектронныеДокументы Цикл
			
			ДанныеФомированияПротокола = ДанныеПротоколовОбменаПоДокументам.Получить(ЭлектронныйДокумент);
			Если ДанныеФомированияПротокола = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ПротоколыОбменаПоДокументам = Создать();
			ТабличныйДокумент = ПротоколыОбменаПоДокументам.ПредставлениеПротокола(ДанныеФомированияПротокола);
			
			Результат.Вставить(ЭлектронныйДокумент, ТабличныйДокумент);
		КонецЦикла;
	
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ТекстОшибкиПротокола = НСтр("ru = 'Не удалось сформировать протоколы обмена по документам.'");
		ТекстОшибкиПротокола = ТекстОшибкиПротокола + Символы.ПС + ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		
		ВидОперации = НСтр("ru = 'Формирование протокола обмена по документам.'");
		ПодробныйТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ОбработкаНеисправностейБЭД.ОбработатьОшибку(ВидОперации,
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами,
			ПодробныйТекстОшибки, ТекстОшибкиПротокола);
			
		ВызватьИсключение ТекстОшибкиПротокола;

	КонецПопытки;
	
	Возврат Результат;
КонецФункции

// Параметры:
//  ЭлектронныеДокументы - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО, 
//  	ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// 
// Возвращаемое значение:
//  см. ИнтерфейсДокументовЭДО.СформироватьПечатныеФормыЭлектронныхДокументов
Функция ПечатныеФормыПротоколовОбмена(ЭлектронныеДокументы) Экспорт
	
	ПараметрыСоставаПечати = ИнтерфейсДокументовЭДО.ПараметрыСоставаПечатиЭлектронныхДокументов();
	ПараметрыСоставаПечати.ПечататьЭлектронныйДокумент = Ложь;
	ПараметрыСоставаПечати.ПечататьТехнологическиеКвитанции = Ложь;
	ПараметрыСоставаПечати.ПечататьКарточкуЭлектронногоДокумента = Ложь;
	ПараметрыСоставаПечати.ПечататьРеестрЭлектронныхДокументов = Ложь;
	ПараметрыСоставаПечати.ПечататьПротоколОбменаПоДокументу = Истина;
	ПараметрыСоставаПечати.ВыводитьШтампыПодписей = Ложь;
	
	ПараметрыВизуализации = ИнтерфейсДокументовЭДО.НовыеПараметрыВизуализацииДокумента();
	ПараметрыВизуализации.ВыводитьБанковскиеРеквизиты = Ложь;
	ПараметрыВизуализации.ВыводитьДопДанные = Ложь;
	ПараметрыВизуализации.ВыводитьКопияВерна = Ложь;
	
	Возврат ИнтерфейсДокументовЭДО.СформироватьПечатныеФормыЭлектронныхДокументов(ЭлектронныеДокументы, ПараметрыСоставаПечати,
		ПараметрыВизуализации);
		
КонецФункции

#КонецОбласти

#Область Конструкторы
// Возвращаемое значение:
//  Структура - Новые параметры формирования протокола:
// * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, 
// 						- ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// * Организация - ОпределяемыйТип.Организация
// * Контрагент - ОпределяемыйТип.УчастникЭДО 
// * ИдентификаторКонтрагента - Строка
// * ИдентификаторОрганизации - Строка 
// * ИдентификаторДокументооборота - Строка
// * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
// * СпособОбмена - ПеречислениеСсылка.СпособыОбменаЭД
// * СостояниеДокумента - ПеречислениеСсылка.СостоянияДокументовЭДО
// * СвойстваДокументаДляПредставления - см. ЭлектронныеДокументыЭДО.НовыеСвойстваПредставленияДокумента
// * СообщенияДокумента - Массив из СтрокаТаблицыЗначений См. СообщенияДокументовДляПротокола
Функция НовыеПараметрыФормированияПротокола() Экспорт

	Результат = Новый Структура();
	Результат.Вставить("ЭлектронныйДокумент", Документы.ЭлектронныйДокументВходящийЭДО.ПустаяСсылка());
	Результат.Вставить("Организация", Метаданные.ОпределяемыеТипы.Организация.Тип.ПривестиЗначение(Неопределено));
	Результат.Вставить("Контрагент", Метаданные.ОпределяемыеТипы.УчастникЭДО.Тип.ПривестиЗначение(Неопределено));
	Результат.Вставить("ИдентификаторКонтрагента","");
	Результат.Вставить("ИдентификаторОрганизации", "");
	Результат.Вставить("ИдентификаторДокументооборота", "");
	Результат.Вставить("ТипДокумента", Перечисления.ТипыДокументовЭДО.ПустаяСсылка());
	Результат.Вставить("СпособОбмена", Перечисления.СпособыОбменаЭД.ПустаяСсылка());
	Результат.Вставить("СостояниеДокумента", Перечисления.СостоянияДокументовЭДО.ПустаяСсылка());
	Результат.Вставить("СвойстваДокументаДляПредставления", ЭлектронныеДокументыЭДО.НовыеСвойстваПредставленияДокумента());
	Результат.Вставить("СообщенияДокумента", Новый Массив);
	
	Возврат Результат;
	
КонецФункции
#КонецОбласти

#Область Прочее

// Параметры:
//  ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
// 
// Возвращаемое значение:
//  Булево - Доступно формирование протокола обмена по документу
Функция ДоступноФормированиеПротоколаОбменаПоДокументу(ТипДокумента) Экспорт
	ЭтоЭПД = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
		ЭтоЭПД = МодульОбменСГИСЭПД.ЭтоДокументЭПД(ТипДокумента);
	КонецЕсли;
	
	ЭтоЭлектронноеАктированиеЕИС = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС") Тогда
		МодульЭлектронноеАктированиеЕИС =
			ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЕИС");
		ЭтоЭлектронноеАктированиеЕИС = МодульЭлектронноеАктированиеЕИС.ЭтоТипДокументаАктирования(ТипДокумента);
	КонецЕсли;
	
	Возврат Не ЭтоЭПД И Не ЭтоЭлектронноеАктированиеЕИС;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПолучениеДанныхДляФормированияПротокола

// Параметры:
//  ЭлектронныеДокументы - Массив Из ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// Возвращаемое значение:
// 	Соответствие из КлючИЗначение:
// * Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, 
// 		- ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// * Значение - см. ОбработкаОбъект.ПротоколОбменаПоДокументуЭДО.НовыеДанныеФомированияПротокола 
Функция ДанныеПротоколовОбменаПоДокументам(ЭлектронныеДокументы)
	
	Результат = Новый Соответствие;

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭлектронныйДокументВходящийЭДО.Ссылка КАК ЭлектронныйДокумент,
		|	ЭлектронныйДокументВходящийЭДО.Организация КАК Организация,
		|	ЭлектронныйДокументВходящийЭДО.Контрагент КАК Контрагент,
		|	ЭлектронныйДокументВходящийЭДО.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
		|	ЭлектронныйДокументВходящийЭДО.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|	ЭлектронныйДокументВходящийЭДО.ИдентификаторДокументооборота КАК ИдентификаторДокументооборота,
		|	ЭлектронныйДокументВходящийЭДО.ВидДокумента.ТипДокумента КАК ТипДокумента,
		|	ЭлектронныйДокументВходящийЭДО.СпособОбмена КАК СпособОбмена
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|ГДЕ
		|	ЭлектронныйДокументВходящийЭДО.Ссылка В (&ЭлектронныеДокументы)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭлектронныйДокументИсходящийЭДО.Ссылка КАК ЭлектронныйДокумент,
		|	ЭлектронныйДокументИсходящийЭДО.Организация КАК Организация,
		|	ЭлектронныйДокументИсходящийЭДО.Контрагент КАК Контрагент,
		|	ЭлектронныйДокументИсходящийЭДО.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
		|	ЭлектронныйДокументИсходящийЭДО.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|	ЭлектронныйДокументИсходящийЭДО.ИдентификаторДокументооборота КАК ИдентификаторДокументооборота,
		|	ЭлектронныйДокументИсходящийЭДО.ВидДокумента.ТипДокумента КАК ТипДокумента,
		|	ЭлектронныйДокументИсходящийЭДО.СпособОбмена КАК СпособОбмена
		|ИЗ
		|	Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
		|ГДЕ
		|	ЭлектронныйДокументИсходящийЭДО.Ссылка В (&ЭлектронныеДокументы)";
	
	Запрос.УстановитьПараметр("ЭлектронныеДокументы", ЭлектронныеДокументы);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДанныеЭД = РезультатЗапроса.Выбрать();
		
	СообщенияДокументов = СообщенияДокументовДляПротокола(ЭлектронныеДокументы);
	СвойстваДокументовДляПредставления = ЭлектронныеДокументыЭДО.СвойстваДокументовДляПредставления(ЭлектронныеДокументы);
	СостоянияДокументовЭДО = ЭлектронныеДокументыЭДО.СостоянияДокументов(ЭлектронныеДокументы);
	
	Пока ВыборкаДанныеЭД.Следующий() Цикл
		
		Если Не ДоступноФормированиеПротоколаОбменаПоДокументу(ВыборкаДанныеЭД.ТипДокумента) Тогда
			Продолжить;
		КонецЕсли;
		ЭлектронныйДокумент = ВыборкаДанныеЭД.ЭлектронныйДокумент;
		
		СостояниеДокумента = СостоянияДокументовЭДО.Получить(ЭлектронныйДокумент);
		СвойстваДокументаДляПредставления = СвойстваДокументовДляПредставления.Получить(ЭлектронныйДокумент);
		
		СообщенияДокумента = СообщенияДокументов.НайтиСтроки(Новый Структура("ЭлектронныйДокумент", ЭлектронныйДокумент));
		
		ПараметрыФормированияПротокола = НовыеПараметрыФормированияПротокола();
		ЗаполнитьЗначенияСвойств(ПараметрыФормированияПротокола, ВыборкаДанныеЭД);
		ПараметрыФормированияПротокола.СостояниеДокумента = СостояниеДокумента;
		ПараметрыФормированияПротокола.СвойстваДокументаДляПредставления = СвойстваДокументаДляПредставления;
		ПараметрыФормированияПротокола.СообщенияДокумента = СообщенияДокумента;
		
		ПротоколыОбменаПоДокументам = Создать();
		ДанныеФомированияПротокола = ПротоколыОбменаПоДокументам.ДанныеФомированияПротокола(ПараметрыФормированияПротокола);
		
		Результат.Вставить(ЭлектронныйДокумент, ДанныеФомированияПротокола);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ЭлектронныеДокументы - Массив Из ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//    * Ссылка - ДокументСсылка.СообщениеЭДО
//    * Статус - ПеречислениеСсылка.СтатусыСообщенийЭДО
//    * Состояние - ПеречислениеСсылка.СостоянияСообщенийЭДО
//    * ТипЭлементаРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО
//    * Дата - Дата
//    * Направление - ПеречислениеСсылка.НаправленияЭДО
//    * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
//    * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, 
//    						- ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//    * ТипРегламента - ПеречислениеСсылка.ТипыРегламентовЭДО
//    * ОсновнойФайл - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//    * ПолноеИмяФайла - Строка
//    * ДатаИзмененияСтатуса - Дата
//    * ПредставлениеСообщения - Строка
//    * ТипСлужебногоДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
Функция СообщенияДокументовДляПротокола(ЭлектронныеДокументы)
	
	СообщенияДокументов = ЭлектронныеДокументыЭДО.СообщенияДокументовПоОтбору(ЭлектронныеДокументы, 
		ЭлектронныеДокументыЭДО.НовыйОтборСообщенийДокументов());
	
	СтрокиСПустымВидом = СообщенияДокументов.НайтиСтроки(Новый Структура("ВидСообщения",
		Справочники.ВидыДокументовЭДО.ПустаяСсылка()));
		
	Для Каждого СтрокаСПутымВидом Из СтрокиСПустымВидом Цикл
		СообщенияДокументов.Удалить(СтрокаСПутымВидом);
	КонецЦикла;
		
	СообщенияДокументов.Колонки.Добавить("ПредставлениеСообщения", Новый ОписаниеТипов("Строка"));
	СообщенияДокументов.Колонки.Добавить("ТипСлужебногоДокумента", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыДокументовЭДО"));
	
	Для Каждого ДанныеСообщения Из СообщенияДокументов Цикл
				
		ДанныеСообщения.ТипСлужебногоДокумента = ЭлектронныеДокументыЭДО.ТипСлужебногоДокумента(ДанныеСообщения.ТипЭлементаРегламента);
			
		ДанныеСообщения.ПредставлениеСообщения = ПредставлениеСообщенияДляПротокола(
			ДанныеСообщения.ТипЭлементаРегламента, 
			ДанныеСообщения.ТипСлужебногоДокумента);
			
	КонецЦикла;
	
	Возврат СообщенияДокументов;
	
КонецФункции

// Параметры:
//  ТипЭлементаРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО
//  ТипСлужебногоДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
// 
// Возвращаемое значение:
//  Строка
Функция ПредставлениеСообщенияДляПротокола(ТипЭлементаРегламента, ТипСлужебногоДокумента)
	
	Если ЗначениеЗаполнено(ТипСлужебногоДокумента) Тогда
		Наименование = Строка(ТипСлужебногоДокумента);
	Иначе
		Наименование = Строка(ТипЭлементаРегламента);
	КонецЕсли;
		
	Возврат Наименование;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
