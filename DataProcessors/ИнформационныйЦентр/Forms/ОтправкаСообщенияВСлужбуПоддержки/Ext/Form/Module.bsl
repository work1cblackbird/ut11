#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("КодПользователя") 
		И ЗначениеЗаполнено(Параметры.КодПользователя) Тогда
		КодПользователя = Параметры.КодПользователя;
	Иначе
		КодПользователя = ИнформационныйЦентрСервер.КодПользователяДляДоступа();
	КонецЕсли;
	ОбластьДанных = РаботаВМоделиСервиса.ЗначениеРазделителяСеанса();
	
	СоздаватьОбращение = Параметры.СоздаватьОбращение;
	ИдентификаторОбращения = Параметры.ИдентификаторОбращения;
	
	МаксимальныйРазмерФайлов = 
		ИнформационныйЦентрСервер.МаксимальныйРазмерВложенийДляОтправкиСообщенияВПоддержкуСервиса();
	
	Если Параметры.Свойство("Тема") И ЗначениеЗаполнено(Параметры.Тема) Тогда
		Тема = Параметры.Тема;
	КонецЕсли;
	
	ТекстСообщения = "";
	Если Параметры.Свойство("Текст") И ЗначениеЗаполнено(Параметры.Текст) Тогда
		ТекстСообщения = ЭкранироватьСимволы(Параметры.Текст);
	КонецЕсли;
	
	Если Параметры.Свойство("Вложения") И ЗначениеЗаполнено(Параметры.Вложения) Тогда
		Для Каждого Вложение Из Параметры.Вложения Цикл
			Файл = Новый Файл(Вложение.ИмяФайла);
			ПоместитьФайлыБезРасширенияНаСервере(
				Вложение.АдресВоВременномХранилище, Новый Структура("Имя, Расширение", Файл.ИмяБезРасширения, Файл.Расширение));
		КонецЦикла;
	КонецЕсли;
	
	ИспользоватьСтандартныйШаблон = Истина;
	Если Параметры.Свойство("ИспользоватьСтандартныйШаблон") Тогда
		ИспользоватьСтандартныйШаблон = Параметры.ИспользоватьСтандартныйШаблон;
	КонецЕсли;
	
	ЗаполнитьСодержание(ТекстСообщения, ИспользоватьСтандартныйШаблон);

	Если Параметры.Свойство("ДополнительныеДанные") И ЗначениеЗаполнено(Параметры.ДополнительныеДанные) Тогда
		ДополнительныеДанные = Параметры.ДополнительныеДанные;
	КонецЕсли;

	АдресДляОтвета = ИнформационныйЦентрСервер.ОпределитьАдресЭлектроннойПочтыПользователя();
	Если ПустаяСтрока(АдресДляОтвета) Тогда 
		Элементы.АдресОтвета.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьКурсорВШаблонеТекста();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Параметры:
// 	Элемент - ДекорацияФормы - элемент формы.
//
&НаКлиенте
Процедура Подключаемый_УдалитьФайл(Элемент)
	
	ИмяКнопки = Элемент.Имя;
	УдалитьФайлСервер(ИмяКнопки);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СкачатьФайл(Элемент, ИндексСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИндексСтроки = Число(ИндексСтроки);
		
	ПараметрыСохранения = ФайловаяСистемаКлиент.ПараметрыСохраненияФайла();
	ПараметрыСохранения.Диалог.Заголовок = НСтр("ru = 'Выберите файл для сохранения'");
	ПараметрыСохранения.Диалог.Фильтр    = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Файлы (*%1)|*%1|Все файлы (%2)|%2'"), ВыбираемыеФайлы[ИндексСтроки].Расширение, ПолучитьМаскуВсеФайлы());
		
	ФайловаяСистемаКлиент.СохранитьФайл(
		Новый ОписаниеОповещения("ПослеСохраненияФайла", ЭтотОбъект),
		ВыбираемыеФайлы.Получить(ИндексСтроки).АдресХранилища,
		ВыбираемыеФайлы[ИндексСтроки].ИмяФайла + ВыбираемыеФайлы[ИндексСтроки].Расширение, 
		ПараметрыСохранения);
			
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Отправить(Команда)
	
	Если Элементы.АдресОтвета.Видимость Тогда
		 
		Если ПустаяСтрока(АдресДляОтвета) Тогда 
			ВызватьИсключение НСтр("ru = 'Необходимо ввести адрес электронной почты для ответа'");
		КонецЕсли;
		
		Результат = РазобратьСтрокуСПочтовымиАдресами(АдресДляОтвета);
		
		Если Результат.Количество() = 0 Тогда
			 
			Оповещение = Новый ОписаниеОповещения("ОтправлениеСообщенияВСлужбуПоддержки", ЭтотОбъект);
			ТекстВопроса = НСтр("ru = 'Адрес электронной почты возможно введен неверно. Отправить сообщение?'");
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОтправитьСообщениеСервер();
	ПоказатьОповещениеПользователя(НСтр("ru = 'Сообщение в службу поддержки отправлено.'"));
	Оповестить("ОтправкаСообщенияВСлужбуПоддержки");
	Закрыть(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрикрепитьФайл(Команда)
	
#Если ВебКлиент Тогда
	ОписаниеОповещения = Новый ОписаниеОповещения("ПрикрепитьФайлОповещение", ЭтотОбъект);
	НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);
#Иначе
	ДобавитьВнешниеФайлы(Истина);
#КонецЕсли
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УдалитьФайлСервер(ИмяКнопкиУдаления)
	
	Фильтр = Новый Структура("ИмяКнопкиУдаления", ИмяКнопкиУдаления);
	НайденныеСтроки = ВыбираемыеФайлы.НайтиСтроки(Фильтр);
	Если НайденныеСтроки.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	НайденнаяСтрока = НайденныеСтроки.Получить(0);
	ИндексИмени = ПолучитьИндексЭлементаФормы(ИмяКнопкиУдаления);
	УдалитьВсеПодчиненныеЭлементы(ИндексИмени);
	УдалитьИзВременногоХранилища(НайденнаяСтрока.АдресХранилища);
	
	Индекс = ВыбираемыеФайлы.Индекс(НайденнаяСтрока);
	ВыбираемыеФайлы.Удалить(Индекс);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправлениеСообщенияВСлужбуПоддержки(Результат) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОтправитьСообщениеСервер();
	ПоказатьОповещениеПользователя(НСтр("ru = 'Сообщение в службу поддержки отправлено.'"));
	Оповестить("ОтправкаСообщенияВСлужбуПоддержки");
	Закрыть(Истина);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьВсеПодчиненныеЭлементы(ИндексЭлемента)
	
	НайденнаяЭлемент = Элементы.Найти("ГруппаФайла" + Строка(ИндексЭлемента));
	Если НайденнаяЭлемент <> Неопределено Тогда 
		Элементы.Удалить(НайденнаяЭлемент);
	КонецЕсли;
	
	НайденнаяЭлемент = Элементы.Найти("ТекстИмениФайла" + Строка(ИндексЭлемента));
	Если НайденнаяЭлемент <> Неопределено Тогда 
		Элементы.Удалить(НайденнаяЭлемент);
	КонецЕсли;
	
	НайденнаяЭлемент = Элементы.Найти("КнопкаУдаленияФайла" + Строка(ИндексЭлемента));
	Если НайденнаяЭлемент <> Неопределено Тогда 
		Элементы.Удалить(НайденнаяЭлемент);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИндексЭлементаФормы(ИмяЭлемента)
	
	НачалоПозиции = СтрДлина("КнопкаУдаленияФайла") + 1;
	Возврат Число(Сред(ИмяЭлемента, НачалоПозиции));
	
КонецФункции

&НаКлиенте
Процедура ПрикрепитьФайлОповещение(Подключено, Контекст) Экспорт
	
	ДобавитьВнешниеФайлы(Подключено);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВнешниеФайлы(РасширениеПодключено)
	
	Если РасширениеПодключено Тогда 
		ПоместитьФайлыСРасширением();
	Иначе
		ПоместитьФайлыБезРасширения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоместитьФайлыСРасширением()
	
	// Вызов диалога выбора файлов.
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = НСтр("ru = 'Выберите файл'");
	Диалог.МножественныйВыбор = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоместитьФайлСРасширениемОповещение", ЭтотОбъект);
	ИнформационныйЦентрКлиент.ПомещениеФайлов(ОписаниеОповещения,, Диалог, Истина, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоместитьФайлСРасширениемОповещение(ВыбранныеФайлы, ОбработчикЗавершения) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранныйФайл = ВыбранныеФайлы.Получить(0); // ОписаниеПереданногоФайла
	ПолноеИмя = ВыбранныйФайл.ПолноеИмя;
	ПолноеИмяФайла = ?(ПустаяСтрока(ПолноеИмя), ВыбранныйФайл.Имя, ПолноеИмя);
	АдресХранилища = ВыбранныйФайл.Хранение;
	
	// Проверка на корректность общего размера файлов.
	Файл = Новый Файл;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПолноеИмяФайла", ПолноеИмяФайла);
	ДополнительныеПараметры.Вставить("АдресХранилища", АдресХранилища);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьИнициализациюОповещение", ЭтотОбъект, ДополнительныеПараметры);
	//@skip-warning МетодУстарел - особенность реализации.
	Файл.НачатьИнициализацию(ОписаниеОповещения, ПолноеИмяФайла);
	
	
КонецПроцедуры

// Параметры:
// 	Файл - Файл - файл. 
// 	ДополнительныеПараметры - Структура - дополнительные параметры.
//
&НаКлиенте
Процедура НачатьИнициализациюОповещение(Файл, ДополнительныеПараметры) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПоместитьФайлСРасширениемОповещениеРазмерОповещение", ЭтотОбъект, ДополнительныеПараметры);
	Файл.НачатьПолучениеРазмера(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоместитьФайлСРасширениемОповещениеРазмерОповещение(Размер, ДополнительныеПараметры) Экспорт
	
	Если Размер = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Не ОбщийРазмерФайловОптимален(Размер) Тогда 
		
		ТекстПредупреждения = НСтр("ru = 'Не удалось добавить файл. Размер выбранных файлов превышает предел в %1 Мб'");
		ТекстПредупреждения = СтрШаблон(ТекстПредупреждения, МаксимальныйРазмерФайлов);
		ОчиститьСообщения();
		ПоказатьСообщениеПользователю(ТекстПредупреждения);
		
	КонецЕсли;
	
	Состояние(НСтр("ru = 'Файл добавляется к сообщению.'"));

	// Добавить файлы в таблицу.
	ИмяИРасширениеФайла = ПолучитьИмяИРасширениеФайла(ДополнительныеПараметры.ПолноеИмяФайла);
	ПоместитьФайлыБезРасширенияНаСервере(ДополнительныеПараметры.АдресХранилища, ИмяИРасширениеФайла);
	
	Состояние();
	
	СоздатьЭлементыФормыДляВложенногоФайла();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоместитьФайлыБезРасширения()
	
	ПослеПомещенияФайла = Новый ОписаниеОповещения("ПослеПомещенияФайлов", ЭтотОбъект);
	
	ИнформационныйЦентрКлиент.ПомещениеФайла(ПослеПомещенияФайла,,, Истина, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПомещенияФайлов(Результат, АдресХранилища, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		
		ИмяИРасширениеФайла = ПолучитьИмяИРасширениеФайла(ВыбранноеИмяФайла);
		ПоместитьФайлыБезРасширенияНаСервере(АдресХранилища, ИмяИРасширениеФайла);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИмяИРасширениеФайла(Знач ВыбранноеИмяФайла)
	
	Результат = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ВыбранноеИмяФайла);
	
	ИмяИРасширениеФайла = Новый Структура;
	ИмяИРасширениеФайла.Вставить("Имя", Результат.ИмяБезРасширения);
	ИмяИРасширениеФайла.Вставить("Расширение", Результат.Расширение);
	
	Возврат ИмяИРасширениеФайла;
	
КонецФункции

&НаСервере
Процедура ПоместитьФайлыБезРасширенияНаСервере(АдресХранилища, ИмяИРасширениеФайла)
	
	НовыйФайл = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	// Проверка на корректность общего размера файлов.
	РазмерФайла = НовыйФайл.Размер();
	
	Если Не ОбщийРазмерФайловОптимален(РазмерФайла) Тогда
		 
		ТекстПредупреждения = НСтр("ru = 'Размер выбранных файлов превышает предел в %1 Мб'");
		ТекстПредупреждения = СтрШаблон(ТекстПредупреждения, МаксимальныйРазмерФайлов);
		ПоказатьСообщениеПользователю(ТекстПредупреждения);
		УдалитьИзВременногоХранилища(АдресХранилища);
		
		Возврат;
		
	КонецЕсли;
	
	СтрокаТаблицы = ВыбираемыеФайлы.Добавить();
	СтрокаТаблицы.ИмяФайла = ИмяИРасширениеФайла.Имя;
	СтрокаТаблицы.Расширение = ИмяИРасширениеФайла.Расширение;
	СтрокаТаблицы.Размер = РазмерФайла;
	СтрокаТаблицы.АдресХранилища = АдресХранилища;
	
	СоздатьЭлементыФормыДляВложенногоФайла();
	
КонецПроцедуры

&НаСервере
Функция ОбщийРазмерФайловОптимален(РазмерФайла)
	
	Размер = РазмерФайла / 1024;
	
	// Подсчет общего размера приложенных к письму файлов (с установленной пометкой).
	Для Итерация = 0 По ВыбираемыеФайлы.Количество() - 1 Цикл
		Размер = Размер + (ВыбираемыеФайлы.Получить(Итерация).Размер / 1024);
	КонецЦикла;
	
	РазмерВМегабайтах = Размер / 1024;
	
	Если РазмерВМегабайтах > МаксимальныйРазмерФайлов Тогда 
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОтправитьСообщениеСервер()
	
	ТекстHTML = "";
	ВложенияHTML = Новый Структура;
	Содержание.ПолучитьHTML(ТекстHTML, ВложенияHTML);
    ВложенияBase64 = ПреобразоватьКартинкиВBase64(ВложенияHTML);
    Обработки.ИнформационныйЦентр.ДобавитьИнформациюОПриложении(ТекстHTML, ВложенияBase64, ДополнительныеДанные);
        
	ТекстСообщения = Содержание.ПолучитьТекст();
    Если ПустаяСтрока(ТекстСообщения) Тогда 
		ВызватьИсключение НСтр("ru = 'Текст сообщения не может быть пустым.'");
	КонецЕсли;
	
	Если ПустаяСтрока(Тема) Тогда 
		ТемаСообщения = ОпределитьТему();
	Иначе
		ТемаСообщения = Тема;
	КонецЕсли;
	
	Попытка
		
		WSПрокси = ИнформационныйЦентрСервер.ПолучитьПроксиСлужбыПоддержки();
		
		СписокФайловXDTO = СформироватьСписокФайловXDTO(WSПрокси.ФабрикаXDTO);
		
		WSПрокси.addComments(КодПользователя, Строка(ИдентификаторОбращения), ТемаСообщения, 
			ТекстHTML, СоздаватьОбращение,  СписокФайловXDTO, ОбластьДанных, АдресДляОтвета);
		
	Исключение
		
		ТекстОшибки = ИнформационныйЦентрСлужебный.ПодробныйТекстОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИнформационныйЦентрСервер.ПолучитьИмяСобытияДляЖурналаРегистрации(), 
		                         УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		ТекстВывода = ИнформационныйЦентрСервер.ТекстВыводаИнформацииОбОшибкеВСлужбеПоддержки();
		
		ВызватьИсключение ТекстВывода;
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере 
Функция ПреобразоватьКартинкиВBase64(Вложения)
	
	ВложенияBase64 = Новый Структура;
	Для каждого КиЗ Из Вложения Цикл
		ВложенияBase64.Вставить(КиЗ.Ключ,Base64Строка(КиЗ.Значение.ПолучитьДвоичныеДанные()));
	КонецЦикла;
	
	Возврат ВложенияBase64;
	
КонецФункции

&НаСервере
Функция ОпределитьТему()
	
	Если Не ПустаяСтрока(Тема) Тогда 
		Возврат Тема;
	КонецЕсли;
	
	ТекстСообщения = Содержание.ПолучитьТекст();
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "Здравствуйте.", "");
	ТекстСообщения = Лев(ТекстСообщения, 500);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, Символы.ПС, " ");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "  ", " ");
	
	Возврат СокрЛП(ТекстСообщения);
	
КонецФункции

&НаСервере
Функция СформироватьСписокФайловXDTO(Фабрика)
	
	ТипСпискаФайлов = Фабрика.Тип("http://www.1c.ru/1cFresh/InformationCenter/SupportServiceData/1.0.0.1", "ListFile");
	СписокФайлов = Фабрика.Создать(ТипСпискаФайлов);
	
	Для Каждого ТекущийФайл Из ВыбираемыеФайлы Цикл 
		
		ТипФайла = Фабрика.Тип("http://www.1c.ru/1cFresh/InformationCenter/SupportServiceData/1.0.0.1", "File");
		ФайлОбъект = Фабрика.Создать(ТипФайла);
		ФайлОбъект.Name = ТекущийФайл.ИмяФайла;
		ФайлОбъект.Data = ПолучитьИзВременногоХранилища(ТекущийФайл.АдресХранилища);
		ФайлОбъект.Extension = ТекущийФайл.Расширение;
		ФайлОбъект.Size = ТекущийФайл.Размер;
		
		Обработки.ИнформационныйЦентр.ДобавитьЗначениеВСписокXDTO(СписокФайлов, "Files", ФайлОбъект);
		
	КонецЦикла;
	
	Возврат СписокФайлов;
	
КонецФункции

&НаКлиенте
Процедура УстановитьКурсорВШаблонеТекста()
	
	ПодключитьОбработчикОжидания("ОбработчикУстановитьКурсорВШаблонеТекста", 0.5, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикУстановитьКурсорВШаблонеТекста()
	
	ТекущийЭлемент = Элементы.Содержание;
	Закладка = Содержание.ПолучитьЗакладкуПоПозиции(ПозицияКурсора);
	Элементы.Содержание.УстановитьГраницыВыделения(Закладка, Закладка);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЭлементыФормыДляВложенногоФайла()
	
	Для Каждого ВыбираемыйФайл Из ВыбираемыеФайлы Цикл
		
		Если Не ПустаяСтрока(ВыбираемыйФайл.ИмяКнопкиУдаления) Тогда 
			Продолжить;
		КонецЕсли;
		
		ПредставлениеФайла = ВыбираемыйФайл.ИмяФайла + ВыбираемыйФайл.Расширение
			+ " (" + Окр(ВыбираемыйФайл.Размер / 1024, 2) + " " + НСтр("ru = 'Кб'") +")";
		
		Индекс = ВыбираемыйФайл.ПолучитьИдентификатор();
		
		ГруппаФайла = 
			Элементы.Добавить("ГруппаФайла" + Строка(Индекс), Тип("ГруппаФормы"), Элементы.ГруппаПрикрепленныхФайлов);
		ГруппаФайла.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаФайла.ОтображатьЗаголовок = Ложь;
		ГруппаФайла.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		ГруппаФайла.Отображение = ОтображениеОбычнойГруппы.Нет;
		
		ТекстИмениФайла = Элементы.Добавить("ТекстИмениФайла" + Строка(Индекс), Тип("ДекорацияФормы"), ГруппаФайла);
		ТекстИмениФайла.Вид = ВидДекорацииФормы.Надпись;
		ТекстИмениФайла.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(
			"<a href=""%1"">%2</a>", Строка(Индекс), ПредставлениеФайла);
		ТекстИмениФайла.АвтоМаксимальнаяШирина = Ложь;
		ТекстИмениФайла.РастягиватьПоГоризонтали = Истина;
		ТекстИмениФайла.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_СкачатьФайл");
		
		КнопкаУдаленияФайла = 
			Элементы.Добавить("КнопкаУдаленияФайла" + Строка(Индекс), Тип("ДекорацияФормы"), ГруппаФайла);
		КнопкаУдаленияФайла.Вид = ВидДекорацииФормы.Картинка;
		КнопкаУдаленияФайла.Картинка = БиблиотекаКартинок.УдалитьНепосредственно;
		КнопкаУдаленияФайла.Подсказка = НСтр("ru = 'Удалить файл'");
		КнопкаУдаленияФайла.Ширина = 2;
		КнопкаУдаленияФайла.Высота = 1;
		КнопкаУдаленияФайла.РазмерКартинки = РазмерКартинки.Растянуть;
		КнопкаУдаленияФайла.Гиперссылка = Истина;
		КнопкаУдаленияФайла.УстановитьДействие("Нажатие", "Подключаемый_УдалитьФайл");
		
		ВыбираемыйФайл.ИмяКнопкиУдаления = КнопкаУдаленияФайла.Имя;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьСообщениеПользователю(Текст)
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = Текст;
	Сообщение.Сообщить();
	
КонецПроцедуры

&НаСервере
Функция РазобратьСтрокуСПочтовымиАдресами(АдресДляОтвета)
	
	Возврат ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(АдресДляОтвета, Ложь);
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭкранироватьСимволы(ТекстДляОбработки)
	
	Результат = СтрЗаменить(ТекстДляОбработки, "&",  "&amp;");
	Результат = СтрЗаменить(Результат, "'",  "&apos;");
	Результат = СтрЗаменить(Результат, "<",  "&lt;");
	Результат = СтрЗаменить(Результат, ">",  "&gt;");
	Результат = СтрЗаменить(Результат, """", "&quot;");
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСодержание(ТекстСообщения, ИспользоватьСтандартныйШаблон = Истина)
	
	Если ИспользоватьСтандартныйШаблон Тогда
		Текст = ИнформационныйЦентрСервер.ШаблонТекстаВТехПоддержку(ТекстСообщения);
	Иначе
		Текст = ТекстСообщения;
	КонецЕсли;
	
	СтрокаПозицияКурсора = "ПозицияКурсора";
	ПозицияКурсора = СтрНайти(Текст, СтрокаПозицияКурсора)- 9;
	Текст = СтрЗаменить(Текст, СтрокаПозицияКурсора, "");
	Текст = СтрЗаменить(Текст, Символы.ПС, "<br>");
	Содержание.УстановитьHTML(Текст, Новый Структура);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФайла(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		ФайловаяСистемаКлиент.ОткрытьПроводник(Результат[0].ПолноеИмя);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти