
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если ТипЗнч(Параметры.СтруктураБыстрогоОтбора) = Тип("Структура") Тогда
		СтруктураБыстрогоОтбора = Новый Структура;
		СтруктураБыстрогоОтбора.Вставить("Организация",             Справочники.Организации.ПустаяСсылка());
		СтруктураБыстрогоОтбора.Вставить("БанковскийСчетОтбор",     Справочники.БанковскиеСчетаОрганизаций.ПустаяСсылка());
		СтруктураБыстрогоОтбора.Вставить("КонтрагентПредставление", "");
		СтруктураБыстрогоОтбора.Вставить("СписокОперацийОплаты", Неопределено);
		ЗаполнитьЗначенияСвойств(СтруктураБыстрогоОтбора, Параметры.СтруктураБыстрогоОтбора);
		
		Организация             = СтруктураБыстрогоОтбора.Организация;
		БанковскийСчетОтбор     = СтруктураБыстрогоОтбора.БанковскийСчетОтбор;
		КонтрагентПредставление = СтруктураБыстрогоОтбора.КонтрагентПредставление;
		
		Если СтруктураБыстрогоОтбора.СписокОперацийОплаты <> Неопределено Тогда
			СписокОперацийОплаты = Параметры.СтруктураБыстрогоОтбора.СписокОперацийОплаты;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Организация) Тогда
			ОрганизацияПриИзмененииСервер(Ложь);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимость();
	ИнициализироватьРеквизиты();
	УстановитьОтборДинамическихСписков();
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	СохранитьРабочиеЗначенияПолейФормы(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ДатаКОплате               = Настройки.Получить("ДатаКОплате");
	
	СписокОпераций            = Настройки.Получить("СписокОперацийОплаты");
	ИнициализироватьСписокОперацийОплаты();
	Если СписокОпераций <> Неопределено Тогда
		Для каждого Операция Из СписокОпераций Цикл
			Если Операция.Пометка Тогда
				ОперацияСписка = СписокОперацийОплаты.НайтиПоЗначению(Операция.Значение);
				Если ОперацияСписка <> Неопределено Тогда
					ОперацияСписка.Пометка = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	СписокОперацийОплатыПредставление = СписокОперацийПредставление(СписокОперацийОплаты);
	
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ИменаСобытийОбновленияСпискаКОплате = Новый Массив;
	ИменаСобытийОбновленияСпискаКОплате.Добавить("Запись_СписаниеБезналичныхДенежныхСредств");
	ИменаСобытийОбновленияСпискаКОплате.Добавить("Запись_РасходныйКассовыйОрдер");
	ИменаСобытийОбновленияСпискаКОплате.Добавить("Запись_ОперацияПоПлатежнойКарте");
	ИменаСобытийОбновленияСпискаКОплате.Добавить("Запись_ЗаявкаНаРасходованиеДенежныхСредств");
	ИменаСобытийОбновленияСпискаКОплате.Добавить("Запись_РаспоряжениеНаПеремещениеДенежныхСредств");
	
	Если ИменаСобытийОбновленияСпискаКОплате.Найти(ИмяСобытия) <> Неопределено Тогда
		ОбновитьИтоги();
		Элементы.ЗаявкиКОплате.Обновить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер(ИзменитьОтбор = Истина)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоРасчетныхСчетов") Тогда
		БанковскийСчетОтбор = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Организация);
	КонецЕсли;
	
	Если ИзменитьОтбор Тогда
		УстановитьОтборДинамическихСписков();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетОтборПриИзменении(Элемент)
	
	БанковскийСчетОтборПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура БанковскийСчетОтборПриИзмененииСервер()
	
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОтборПриИзменении(Элемент)
	
	КонтрагентОтборПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентОтборПриИзмененииСервер()
	
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПлатежаПриИзменении(Элемент)
	
	ДатаПлатежаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ДатаПлатежаПриИзмененииНаСервере()
	
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОперацийКОплатеОтборНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФорму("Перечисление.ХозяйственныеОперации.Форма.ФормаВыбораОперации",
		Новый Структура("СписокОпераций", СписокОперацийОплаты), Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОперацийКОплатеОтборОчистка(Элемент, СтандартнаяОбработка)
	
	СписокОперацийОплаты.ЗаполнитьПометки(Ложь);
	
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОперацийКОплатеОтборОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СписокЗначений") Тогда
		
		СписокОперацийОплаты = ВыбранноеЗначение;
	Иначе
		
		Для Каждого ЭлементСписка Из СписокОперацийОплаты Цикл
			ЭлементСписка.Пометка = (ЭлементСписка.Значение = ВыбранноеЗначение);
		КонецЦикла;
	КонецЕсли;
	
	СписокОперацийОплатыПредставление = СписокОперацийПредставление(СписокОперацийОплаты);
	
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура ВспомогательныйСписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Ссылка = Элемент.ТекущиеДанные.Ссылка;
	Если ЗначениеЗаполнено(Ссылка) Тогда
		ПоказатьЗначение(, Ссылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОплатитьЗаявку(Команда)
	
	ДенежныеСредстваКлиент.ОплатитьСтрокиГрафика(Элементы.ЗаявкиКОплате, "СписаниеБезналичныхДенежныхСредств");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаявкиКОплатеДатаПлатежа.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаявкиКОплате.ДатаПлатежа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = НачалоДня(ТекущаяДатаСеанса());
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныеДанныеЦвет);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	ВидимостьЭлементов = Новый Соответствие;
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ЗаявкиКОплатеВалюта");
	ВидимостьЭлементов.Вставить(МассивЭлементов, ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют"));
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("БанковскийСчетОтбор");
	ВидимостьЭлементов.Вставить(МассивЭлементов, ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоРасчетныхСчетов"));
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ОрганизацияОтбор");
	ВидимостьЭлементов.Вставить(МассивЭлементов, ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций"));
	
	Для каждого ЭлементСоответствия Из ВидимостьЭлементов Цикл
		Для каждого ИмяЭлемента Из ЭлементСоответствия.Ключ Цикл
			Элементы[ИмяЭлемента].Видимость = ЭлементСоответствия.Значение;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьРеквизиты()
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоРасчетныхСчетов") Тогда
		БанковскийСчетОтбор = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Неопределено);
	КонецЕсли;
	
	ИнициализироватьСписокОперацийОплаты();
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСписокОперацийОплаты()
	
	СписокОпераций = Новый СписокЗначений;
	
	Операции = Перечисления.ХозяйственныеОперации;
	
	СписокОпераций.Добавить(Операции.ОплатаПоставщику);
	СписокОпераций.Добавить(Операции.ВозвратОплатыКлиенту);
	СписокОпераций.Добавить(Операции.ВыдачаДенежныхСредствПодотчетнику, НСтр("ru = 'Выдача подотчетнику'"));
	СписокОпераций.Добавить(Операции.ПеречислениеВБюджет, НСтр("ru = 'Перечисление налога'"));
	СписокОпераций.Добавить(Операции.КонвертацияВалюты);
	СписокОпераций.Добавить(Операции.ОплатаДенежныхСредствВДругуюОрганизацию, НСтр("ru = 'Оплата в другую организацию'"));
	СписокОпераций.Добавить(Операции.ВозвратДенежныхСредствВДругуюОрганизацию, НСтр("ru = 'Возврат в другую организацию'"));
	СписокОпераций.Добавить(Операции.ВнутренняяПередачаДенежныхСредств, НСтр("ru= 'Передача между организацией и филиалом'"));
	СписокОпераций.Добавить(Операции.ВыплатаЗарплаты);
	СписокОпераций.Добавить(Операции.ПрочиеРасходы);
	СписокОпераций.Добавить(Операции.ПрочаяВыдачаДенежныхСредств, НСтр("ru = 'Прочая выдача'"));
	СписокОпераций.Добавить(Операции.ОплатаПоКредитам);
	СписокОпераций.Добавить(Операции.ПеречислениеНаДепозиты);
	СписокОпераций.Добавить(Операции.ПеречислениеДенежныхСредствНаДругойСчет);
	СписокОпераций.Добавить(Операции.ПоступлениеДенежныхСредствИзБанка);
	СписокОпераций.Добавить(Операции.СнятиеНаличныхДенежныхСредств);
	
	Для каждого Операция Из СписокОперацийОплаты Цикл
		Если Операция.Пометка Тогда
			ОперацияСписка = СписокОпераций.НайтиПоЗначению(Операция.Значение);
			Если ОперацияСписка <> Неопределено Тогда
				ОперацияСписка.Пометка = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СписокОперацийОплаты = СписокОпераций;
	
	Элементы.СписокОперацийКОплатеОтбор.СписокВыбора.Очистить();
	Для каждого Операция Из СписокОперацийОплаты Цикл
		Элементы.СписокОперацийКОплатеОтбор.СписокВыбора.Добавить(Операция.Значение, Операция.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборДинамическихСписков()
	
	Если ЗначениеЗаполнено(БанковскийСчетОтбор) Тогда
		РеквизитыСчета = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(БанковскийСчетОтбор);
		Организация = РеквизитыСчета.Организация;
		Если РеквизитыСчета.ЭтоГруппа Тогда
			ТекстНадписи = СтрШаблон(НСтр("ru = 'Банковские счета каталога ""%1"" по организации %2'"),
										БанковскийСчетОтбор, РеквизитыСчета.Организация);
			Элементы.НадписьБанковскийСчет.Заголовок = ТекстНадписи;
		Иначе
			Элементы.НадписьБанковскийСчет.Заголовок =
				СтрШаблон(НСтр("ru = 'Банковский счет %1, %2'"), Строка(РеквизитыСчета.Валюта), СокрЛП(БанковскийСчетОтбор));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Организация) Тогда
			СвязиПараметровВыбора = Новый Массив;
			СвязиПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Организация"));
			Элементы.БанковскийСчетОтбор.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
		Иначе
			Элементы.БанковскийСчетОтбор.СвязиПараметровВыбора = Новый ФиксированныйМассив(Новый Массив);
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(Организация) Тогда
		
		БанковскийСчетОтбор = Неопределено;
		Элементы.НадписьБанковскийСчет.Заголовок = НСтр("ru = '<Банковский счет не задан>'");
		
		СвязиПараметровВыбора = Новый Массив;
		СвязиПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Организация"));
		Элементы.БанковскийСчетОтбор.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
	Иначе
		
		Организация = Неопределено;
		Элементы.НадписьБанковскийСчет.Заголовок = НСтр("ru = '<Банковский счет не задан>'");
		Элементы.БанковскийСчетОтбор.СвязиПараметровВыбора = Новый ФиксированныйМассив(Новый Массив);
	КонецЕсли;
	
	СписокОрганизаций = Обработки.ЖурналДокументовБезналичныеПлатежи.СвязанныеОрганизации(Организация);
	
	СписокСчетов = Новый СписокЗначений;
	
	СписокСчетовПоСчету = Справочники.БанковскиеСчетаОрганизаций.БанковскиеСчетаКаталога(БанковскийСчетОтбор);
	
	Если СписокСчетовПоСчету.Количество() <> 0 Тогда
		СписокСчетов.ЗагрузитьЗначения(СписокСчетовПоСчету);
	КонецЕсли;
	
	СписокСчетов.Добавить(БанковскийСчетОтбор);
	СписокСчетов.Добавить(Справочники.БанковскиеСчетаОрганизаций.ПустаяСсылка());
	СписокСчетов.Добавить(Неопределено);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ЗаявкиКОплате,
		"Организация",
		СписокОрганизаций,
		ВидСравненияКомпоновкиДанных.ВСписке,,
		ЗначениеЗаполнено(Организация));
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ЗаявкиКОплате,
		"БанковскийСчет",
		СписокСчетов,
		ВидСравненияКомпоновкиДанных.ВСписке,,
		ЗначениеЗаполнено(БанковскийСчетОтбор));
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ЗаявкиКОплате,
		"КонтрагентПредставление",
		КонтрагентПредставление,
		ВидСравненияКомпоновкиДанных.Содержит,,
		ЗначениеЗаполнено(КонтрагентПредставление));
		
	Граница = ?(ЗначениеЗаполнено(ДатаКОплате), КонецДня(ДатаКОплате), Дата('39990101'));
	ЗаявкиКОплате.Параметры.УстановитьЗначениеПараметра("ДатаПлатежа", Граница);
	
	ВыбранныеОперации = Новый Массив;
	Для каждого ЭлементСписка Из СписокОперацийОплаты Цикл
		Если ЭлементСписка.Пометка Тогда
			ВыбранныеОперации.Добавить(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ЗаявкиКОплате,
		"ХозяйственнаяОперация",
		ВыбранныеОперации,
		ВидСравненияКомпоновкиДанных.ВСписке,,
		ВыбранныеОперации.Количество());
		
	ОбновитьИтоги();
	
	СохранитьРабочиеЗначенияПолейФормы();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИтоги()
	
	ОбновитьОстаткиДенежныхСредств();
	ОбновитьКОплате();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОстаткиДенежныхСредств()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДенежныеСредстваБезналичные.СуммаОстаток        КАК ТекущийОстаток,
	|	ДенежныеСредстваБезналичные.КСписаниюОстаток    КАК КСписаниюВсего
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваБезналичные.Остатки(, БанковскийСчет В ИЕРАРХИИ (&БанковскийСчет)) КАК ДенежныеСредстваБезналичные
	|";
	
	Если ЗначениеЗаполнено(БанковскийСчетОтбор) ИЛИ НЕ ЗначениеЗаполнено(Организация) Тогда
		Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчетОтбор);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "БанковскийСчет В ИЕРАРХИИ (&БанковскийСчет)", "Организация = &Организация");
		Запрос.УстановитьПараметр("Организация", Организация);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ТекущийОстаток = Выборка.ТекущийОстаток;
		КСписаниюВсего = Выборка.КСписаниюВсего;
	Иначе
		ТекущийОстаток = 0;
		КСписаниюВсего = 0;
	КонецЕсли;
	
	ДоступноВсего = ТекущийОстаток - КСписаниюВсего;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКОплате()
	
	Если Не ЗначениеЗаполнено(БанковскийСчетОтбор) Тогда
		КОплатеВсего = 0;
		ДоступноМинусКОплате = 0;
		Возврат;
	КонецЕсли;
	
	СКД = Элементы.ЗаявкиКОплате.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	Настройки = Элементы.ЗаявкиКОплате.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	Настройки.Структура.Очистить();
	
	ДетальныеЗаписи = Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных")).Поле = Новый ПолеКомпоновкиДанных("СуммаКОплате");
	ПолеИтога = ФинансоваяОтчетностьСервер.НовыйРесурс(СКД, "СуммаКОплате");
	
	РезультатСКД = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СКД, Настройки);
	КОплатеВсего = РезультатСКД[0].СуммаКОплате;
	
	ДоступноМинусКОплате = ДоступноВсего - КОплатеВсего;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокОперацийПредставление(СписокОпераций)
	
	СписокОперацийПредставление = "";
	Для Каждого ЭлементСписка Из СписокОпераций Цикл
		Если ЭлементСписка.Пометка Тогда
			СписокОперацийПредставление = СписокОперацийПредставление
				+ ?(ЗначениеЗаполнено(СписокОперацийПредставление), ", ", "")
				+ ?(ЗначениеЗаполнено(ЭлементСписка.Представление), ЭлементСписка.Представление, ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокОперацийПредставление;
	
КонецФункции

&НаСервере
Процедура СохранитьРабочиеЗначенияПолейФормы(СохранитьНеопределено = Ложь)
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ТекущийБанковскийСчет", "", ?(СохранитьНеопределено, Неопределено, БанковскийСчетОтбор));
	
КонецПроцедуры

#КонецОбласти

//++ Локализация
#Область Локализация

#Область Локализация_ПодключаемыеОбработчикиСобытийФормы

&НаСервере
Процедура Подключаемый_ПриСозданииНаСервереЛокализация(Отказ, СтандартнаяОбработка)
	
	ПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	
	Если Параметры.Свойство("СтруктураБыстрогоОтбора")
			И ТипЗнч(Параметры.СтруктураБыстрогоОтбора) = Тип("Структура") Тогда
		СтруктураБыстрогоОтбора = Параметры.СтруктураБыстрогоОтбора;
		Если СтруктураБыстрогоОтбора.Свойство("ТекущиеДелаУведомлениеОЗачисленииВалюты")
			И СтруктураБыстрогоОтбора.ТекущиеДелаУведомлениеОЗачисленииВалюты Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				ЗаявкиКОплате, "ЭтоУведомлениеОЗачисленииВалюты", Истина, ВидСравненияКомпоновкиДанных.Равно,, Истина);
		КонецЕсли;
	КонецЕсли;
	
	ИнициализироватьРеквизитыЛокализация();
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ПриЗагрузкеДанныхИзНастроекНаСервереЛокализация(Настройки)
	
	ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки);
	
	СписокОпераций            = Настройки.Получить("СписокОперацийОплаты");
	ИнициализироватьСписокОперацийОплатыЛокализация();
	Если СписокОпераций <> Неопределено Тогда
		Для каждого Операция Из СписокОпераций Цикл
			Если Операция.Пометка Тогда
				ОперацияСписка = СписокОперацийОплаты.НайтиПоЗначению(Операция.Значение);
				Если ОперацияСписка <> Неопределено Тогда
					ОперацияСписка.Пометка = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	СписокОперацийОплатыПредставление = СписокОперацийПредставление(СписокОперацийОплаты);
	
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры

#КонецОбласти

#Область ЛокализацияСлужебные

&НаСервере
Процедура ИнициализироватьРеквизитыЛокализация()
	
	СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	СвойстваСписка.ТекстЗапроса = ТекстЗапросаЗаявкиКОплате();
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.ЗаявкиКОплате, СвойстваСписка);
	
	ИнициализироватьСписокОперацийОплатыЛокализация();
	
КонецПроцедуры

&НаСервере
Функция ТекстЗапросаЗаявкиКОплате()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Приоритеты.Ссылка КАК Приоритет
	|ПОМЕСТИТЬ МаксимальныйПриоритет
	|ИЗ
	|	Справочник.ПриоритетыОплаты КАК Приоритеты
	|ГДЕ
	|	Приоритеты.РеквизитДопУпорядочивания В (
	|		ВЫБРАТЬ
	|			МИНИМУМ(Приоритеты.РеквизитДопУпорядочивания)
	|		ИЗ
	|			Справочник.ПриоритетыОплаты КАК Приоритеты)
	|;
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Приоритеты.Ссылка КАК Приоритет
	|ПОМЕСТИТЬ МинимальныйПриоритет
	|ИЗ
	|	Справочник.ПриоритетыОплаты КАК Приоритеты
	|ГДЕ
	|	Приоритеты.РеквизитДопУпорядочивания В (
	|		ВЫБРАТЬ
	|			МАКСИМУМ(Приоритеты.РеквизитДопУпорядочивания)
	|		ИЗ
	|			Справочник.ПриоритетыОплаты КАК Приоритеты)
	|;
	|
	|ВЫБРАТЬ
	|	ГрафикПлатежей.ДатаПлатежа КАК ДатаПлатежа,
	|	ГрафикПлатежей.ПлательщикПолучатель КАК Получатель,
	|	ГрафикПлатежей.ПлательщикПолучатель.Наименование КАК КонтрагентПредставление,
	|	ГрафикПлатежей.Сумма КАК СуммаКОплате,
	|	ГрафикПлатежей.Валюта КАК Валюта,
	|	
	|	ГрафикПлатежей.Номер КАК Номер,
	|	ГрафикПлатежей.Дата КАК Дата,
	|	ГрафикПлатежей.ТипОбъектаОплаты КАК ТипОбъектаОплаты,
	|	ГрафикПлатежей.СуммаДокумента КАК СуммаДокумента,
	|	ГрафикПлатежей.БанковскийСчетКасса КАК БанковскийСчет,
	|	
	|	ГрафикПлатежей.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ГрафикПлатежей.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	ГрафикПлатежей.Подразделение КАК Подразделение,
	|	ГрафикПлатежей.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ГрафикПлатежей.Ответственный КАК Ответственный,
	|	
	|	ГрафикПлатежей.Организация КАК Организация,
	|	ГрафикПлатежей.ДатаАктуальностиГрафика КАК ДатаАктуальностиГрафика,
	|	ГрафикПлатежей.ОбластьПланирования КАК ОбластьПланирования,
	|	
	|	ГрафикПлатежей.ОбъектОплаты КАК Ссылка,
	|	
	|	ВЫБОР
	|		КОГДА ГрафикПлатежей.Приоритет = МаксимальныйПриоритет.Приоритет ТОГДА
	|			0
	|		КОГДА ГрафикПлатежей.Приоритет = МинимальныйПриоритет.Приоритет ТОГДА
	|			2
	|		ИНАЧЕ
	|			1
	|	КОНЕЦ КАК КартинкаПриоритета,
	|	
	|	НЕ Уведомление.Ссылка ЕСТЬ NULL КАК ЭтоУведомлениеОЗачисленииВалюты
	|ИЗ
	|	РегистрСведений.ГрафикПлатежей КАК ГрафикПлатежей
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК Заявка
	|	ПО
	|		Заявка.Ссылка = ГрафикПлатежей.ОбъектОплаты
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.ЗаявкаНаКомандировку КАК ЗаявкаНаКомандировку
	|	ПО
	|		ЗаявкаНаКомандировку.Ссылка = ГрафикПлатежей.ОбъектОплаты
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.РаспоряжениеНаПеремещениеДенежныхСредств КАК Распоряжение
	|	ПО
	|		Распоряжение.Ссылка = ГрафикПлатежей.ОбъектОплаты
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОЗачисленииВалюты КАК Уведомление
	|	ПО
	|		Уведомление.Ссылка = ГрафикПлатежей.ОбъектОплаты
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ МаксимальныйПриоритет
	|	ПО ИСТИНА
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ МинимальныйПриоритет
	|	ПО ИСТИНА
	|	
	|ГДЕ
	|	ГрафикПлатежей.ПоступлениеСписание = ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияДенежныхСредств.Списание)
	|	И ГрафикПлатежей.ДатаПлатежа <= &ДатаПлатежа
	|	И ГрафикПлатежей.ОбластьПланирования В (
	|		ЗНАЧЕНИЕ(Перечисление.ОбластиПланированияПлатежей.ЗаявкиНаРасходованиеДенежныхСредств),
	|		ЗНАЧЕНИЕ(Перечисление.ОбластиПланированияПлатежей.РаспоряженияНаПеремещениеДенежныхСредств))
	|	И (Заявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате)
	|		ИЛИ Распоряжение.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРаспоряженийНаПеремещениеДенежныхСредств.КОплате)
	|		ИЛИ ЗаявкаНаКомандировку.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокСотрудников.Согласована)
	|		ИЛИ НЕ Уведомление.Ссылка ЕСТЬ NULL)
	|	И (Распоряжение.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СнятиеНаличныхДенежныхСредств))
	|		ИЛИ Распоряжение.Ссылка ЕСТЬ NULL)
	|	И ГрафикПлатежей.ФормаОплаты В (
	|		ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.БезНаличная),
	|		ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.ПустаяСсылка))
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Процедура ИнициализироватьСписокОперацийОплатыЛокализация()
	
	СписокОпераций = Новый СписокЗначений;
	
	Операции = Перечисления.ХозяйственныеОперации;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьИмпортныеЗакупки") Тогда
		СписокОпераций.Добавить(Операции.ПеречислениеТаможне, НСтр("ru = 'Таможенный платеж'"));
	КонецЕсли;
	
	Для каждого Операция Из СписокОпераций Цикл
		Если СписокОперацийОплаты.НайтиПоЗначению(Операция.Значение) = Неопределено Тогда
			СписокОперацийОплаты.Добавить(Операция.Значение, Операция.Представление);
		КонецЕсли;
	КонецЦикла;
	
	Элементы.СписокОперацийКОплатеОтбор.СписокВыбора.Очистить();
	Для каждого Операция Из СписокОперацийОплаты Цикл
		Элементы.СписокОперацийКОплатеОтбор.СписокВыбора.Добавить(Операция.Значение, Операция.Представление);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Инициализация

#Если НаСервере Тогда

Если Не ПодключеныОбработчикиЛокализация И ПолучитьФункциональнуюОпцию("ПоддержкаПлатежейРФ") Тогда
	
	ПодключеныОбработчикиЛокализация = Истина;
	
	ПодключаемыеОбработчикиСобытийФормы = Новый Массив;
	ПодключаемыеОбработчикиСобытийФормы.Добавить("ПриСозданииНаСервере");
	ПодключаемыеОбработчикиСобытийФормы.Добавить("ПриЗагрузкеДанныхИзНастроекНаСервере");
	
	Для каждого Обработчик Из ПодключаемыеОбработчикиСобытийФормы Цикл
		УстановитьДействие(Обработчик, "Подключаемый_" + Обработчик + "Локализация");
	КонецЦикла;
	
КонецЕсли;

#КонецЕсли

#КонецОбласти
//-- Локализация
