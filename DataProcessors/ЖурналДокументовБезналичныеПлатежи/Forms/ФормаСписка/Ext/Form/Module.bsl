
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// НастройкиДинамическихСписков
	ИнициироватьНастройкиДинамическихСписков();
	// Конец НастройкиДинамическихСписков
	
	СписокДокументовРежимАвтообновления = Истина;
	
	Если ТипЗнч(Параметры.СтруктураБыстрогоОтбора) = Тип("Структура") Тогда
		СтруктураБыстрогоОтбора = Новый Структура;
		СтруктураБыстрогоОтбора.Вставить("Организация",             Справочники.Организации.ПустаяСсылка());
		СтруктураБыстрогоОтбора.Вставить("БанковскийСчетОтбор",     Справочники.БанковскиеСчетаОрганизаций.ПустаяСсылка());
		СтруктураБыстрогоОтбора.Вставить("КонтрагентПредставление", "");
		ЗаполнитьЗначенияСвойств(СтруктураБыстрогоОтбора, Параметры.СтруктураБыстрогоОтбора);
	
		Организация             = СтруктураБыстрогоОтбора.Организация;
		БанковскийСчетОтбор     = СтруктураБыстрогоОтбора.БанковскийСчетОтбор;
		КонтрагентПредставление = СтруктураБыстрогоОтбора.КонтрагентПредставление;
		
		Если ЗначениеЗаполнено(Организация) Тогда
			ОрганизацияПриИзмененииСервер(Ложь);
		КонецЕсли;
	КонецЕсли;
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	Если Параметры.Свойство("КлючНазначенияФормы") И Не ПустаяСтрока(Параметры.КлючНазначенияФормы) Тогда
		КлючНазначенияИспользования = Параметры.КлючНазначенияФормы;
	Иначе
		КлючНазначенияИспользования = "БезналичныеПлатежи";
	КонецЕсли;
	
	Если КлючНазначенияИспользования = "БезналичныеПлатежи" Тогда
		КлючНастроек = "";
	Иначе
		КлючНастроек = КлючНазначенияИспользования;
	КонецЕсли;
	НавигационнаяСсылка = "e1cib/app/Обработка.ЖурналДокументовБезналичныеПлатежи";
	
	УстановитьПривилегированныйРежим(Истина);
	РегистрыСведений.ГрафикПлатежей.РассчитатьГрафикПлатежейПоПоступлениямОтБанкаПоЭквайрингу();
	УстановитьПривилегированныйРежим(Ложь);
	
	ИнициализироватьРеквизиты();
	ЗаполнитьКомандыСозданияДокументов();
	
	СписокПлатежей.Параметры.УстановитьЗначениеПараметра("НачалоПериода", НачалоПериода);
	СписокПлатежей.Параметры.УстановитьЗначениеПараметра("КонецПериода",
		?(ЗначениеЗаполнено(КонецПериода), КонецДня(КонецПериода), КонецДня(Дата(3999, 12, 31))));
	
	УстановитьВидимость();
	
	Если ЕстьДоступКПоступлению() Тогда
		КОформлениюСсылки.Добавить("КПоступлению");
	КонецЕсли;
	
	Если ЕстьДоступКОплате() Тогда
		КОформлениюСсылки.Добавить("КОплатеПереводу");
	КонецЕсли;
	
	Если ЕстьДоступКЗачислениюДС() Тогда
		КОформлениюСсылки.Добавить("ЗачислениеДС");
	КонецЕсли;
	
	ОбновитьГиперссылкиКОформлению();
	
	УстановитьОтборДинамическихСписков();
	СохранитьРабочиеЗначенияПолейФормы(Истина);
	
	ТипыДокументов = Новый Массив();
	ТипыДокументов.Добавить("Документ.ПоступлениеБезналичныхДенежныхСредств");
	ТипыДокументов.Добавить("Документ.СписаниеБезналичныхДенежныхСредств");
	ТипыДокументов.Добавить("Документ.ПриходныйКассовыйОрдер");
	ТипыДокументов.Добавить("Документ.РасходныйКассовыйОрдер");
	
	НастроитьКнопкиУправленияДокументами(ТипыДокументов);
	
	ОбщегоНазначенияУТ.ЗаменитьПолеСсылкаКонструкциейВыразитьПоТипамДокументов(Элементы.СписокПлатежей,
		ТипыДокументов);
	
	ИспользуемыеТипыДокументов = Новый Массив;
	ИспользуемыеТипыДокументов.Добавить(Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств"));
	ИспользуемыеТипыДокументов.Добавить(Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств"));
	ИспользуемыеТипыДокументов.Добавить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"));
	ИспользуемыеТипыДокументов.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	
	ИспользуемыеТипыДокументов.Добавить(Тип("ДокументСсылка.Сторно"));
	
	ОбщегоНазначенияУТ.ЗаменитьПолеСсылкаКонструкциейВыразитьПоТипамДокументов(Элементы.СписокПлатежей,
		ТипыДокументов);
	
	Элементы.ЗагрузитьВыписку.Видимость = ПравоДоступа("Использование", Метаданные.Обработки.КлиентБанк);
	Элементы.ВыгрузитьВБанк.Видимость = ПравоДоступа("Использование", Метаданные.Обработки.КлиентБанк);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.Источники = Новый ОписаниеТипов(ИспользуемыеТипыДокументов);
	ПараметрыРазмещения.КоманднаяПанель = Элементы.СписокПлатежейКоманднаяПанель;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаГлобальныеКоманды);
	// Конец ИнтеграцияС1СДокументооборотом
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	// НастройкиДинамическихСписков
	УстановитьПараметрыОбновленияСписковДокументов(Ложь, 0);
	// Конец НастройкиДинамическихСписков
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	НачалоПериода             = Настройки.Получить("НачалоПериода");
	КонецПериода              = Настройки.Получить("КонецПериода");
	
	БанковскийСчетОтбор       = Настройки.Получить("БанковскийСчетОтбор");
	ПроведеноБанкомОтбор      = Настройки.Получить("ПроведеноБанкомОтбор");
	
	СписокДокументовРежимАвтообновления = Истина;
	
	РежимАвтообновленияСписка = Настройки.Получить("СписокДокументовРежимАвтообновления");
	
	Если Не РежимАвтообновленияСписка = Неопределено Тогда
		СписокДокументовРежимАвтообновления = РежимАвтообновленияСписка;
	КонецЕсли;
	
	//++ Локализация
	ИнтеграцияСМаркетплейсамиСерверЛокализация.УстановитьОтборПриЗагрузкеДанныхИзНастроек(ЭтотОбъект,
		СписокПлатежей.КомпоновщикНастроек.Настройки);
	//-- Локализация
	
	ОбновитьГиперссылкиКОформлению();
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияУТКлиент.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(
				Новый ОписаниеОповещения("ОбработкаОповещенияЗавершение", ЭтотОбъект, Новый Структура("ИмяСобытия", ИмяСобытия)),
				МенеджерОборудованияУТКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "ОбновитьЖурналДокументовБезналичныеПлатежи" Тогда
		
		// НастройкиДинамическихСписков
		ОбновитьСписокДокументовСобытиеОбработкаОповещения("СписокПлатежей", Параметр);
		// Конец НастройкиДинамическихСписков
		
	КонецЕсли;	
	
	ОбработкаОповещенияФрагмент(ИмяСобытия, Параметр);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ИмяСобытия = ДополнительныеПараметры.ИмяСобытия;
	
	ОбработкаОповещенияФрагмент(ИмяСобытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияФрагмент(Знач ИмяСобытия, Параметр = Неопределено)
	
	ИменаСобытийОбновленияИтогов = Новый Массив;
	ИменаСобытийОбновленияИтогов.Добавить("Запись_СписаниеБезналичныхДенежныхСредств");
	ИменаСобытийОбновленияИтогов.Добавить("Запись_РасходныйКассовыйОрдер");
	ИменаСобытийОбновленияИтогов.Добавить("Запись_ПоступлениеБезналичныхДенежныхСредств");
	ИменаСобытийОбновленияИтогов.Добавить("Запись_ПриходныйКассовыйОрдер");
	ИменаСобытийОбновленияИтогов.Добавить("Запись_ОперацияПоПлатежнойКарте");
	ИменаСобытийОбновленияИтогов.Добавить("Запись_ЗаявкаНаРасходованиеДенежныхСредств");
	ИменаСобытийОбновленияИтогов.Добавить("Запись_РаспоряжениеНаПеремещениеДенежныхСредств");
	ИменаСобытийОбновленияИтогов.Добавить("Загрузка_ОбменСБанками");
	ИменаСобытийОбновленияИтогов.Добавить("Запись_ДокументОплаты");
	
	ИменаСобытийОбновленияСпискаПлатежей = Новый Массив;
	ИменаСобытийОбновленияСпискаПлатежей.Добавить("Запись_СписаниеБезналичныхДенежныхСредств");
	ИменаСобытийОбновленияСпискаПлатежей.Добавить("Запись_РасходныйКассовыйОрдер");
	ИменаСобытийОбновленияСпискаПлатежей.Добавить("Запись_ПоступлениеБезналичныхДенежныхСредств");
	ИменаСобытийОбновленияСпискаПлатежей.Добавить("Запись_ПриходныйКассовыйОрдер");
	ИменаСобытийОбновленияСпискаПлатежей.Добавить("Проведение_Сторно");
	ИменаСобытийОбновленияСпискаПлатежей.Добавить("Запись_Сторно");
	ИменаСобытийОбновленияСпискаПлатежей.Добавить("Запись_ДокументОплаты");
	
	Если ИменаСобытийОбновленияИтогов.Найти(ИмяСобытия) <> Неопределено Тогда
		ОбновитьИтоги();
	КонецЕсли;
	
	Если ИменаСобытийОбновленияСпискаПлатежей.Найти(ИмяСобытия) <> Неопределено Тогда
		
		// НастройкиДинамическихСписков
		ОбновитьСписокДокументовСобытиеОбработкаОповещения("СписокПлатежей", Параметр);
		// Конец НастройкиДинамическихСписков
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияОтборПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер(ИзменитьОтбор = Истина)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоРасчетныхСчетов") Тогда
		БанковскийСчетОтбор = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Организация);
	КонецЕсли;
	
	Если ИзменитьОтбор Тогда
		УстановитьОтборДинамическихСписков();
		ОбновитьГиперссылкиКОформлению();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетОтборПриИзменении(Элемент)
	
	БанковскийСчетОтборПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура БанковскийСчетОтборПриИзмененииСервер()
	
	УстановитьОтборДинамическихСписков();
	ОбновитьГиперссылкиКОформлению();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОтборПриИзменении(Элемент)
	
	КонтрагентОтборПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентОтборПриИзмененииСервер()
	
	ОбновитьГиперссылкиКОформлению();
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОтборОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст)
		И (СтрДлина(Текст) = 10 ИЛИ СтрДлина(Текст) = 12)
		И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Текст) Тогда
		
		КонтрагентыПоИНН = КонтрагентыПоИНН(Текст);
		Если КонтрагентыПоИНН.Количество() Тогда
			ДанныеВыбора = Новый СписокЗначений;
			ДанныеВыбора.ЗагрузитьЗначения(КонтрагентыПоИНН);
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КонтрагентыПоИНН(ИНН)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Наименование
	|ИЗ
	|	Справочник.Контрагенты
	|ГДЕ
	|	ИНН = &ИНН
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	Наименование
	|ИЗ
	|	Справочник.Организации
	|ГДЕ
	|	ИНН = &ИНН
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	Наименование
	|ИЗ
	|	Справочник.ФизическиеЛица
	|ГДЕ
	|	ИНН = &ИНН
	|";
	
	Запрос.УстановитьПараметр("ИНН", ИНН);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Наименование");
	
КонецФункции

&НаСервере
Процедура СписокПлатежейПриОбновленииСоставаПользовательскихНастроекНаСервере(Элемент, СтандартнаяОбработка)
	
	// НастройкиДинамическихСписков
	РаботаСЖурналамиДокументов.УстановитьВидимостьГруппыНастройкиОбновленияПоУмолчанию(ЭтотОбъект, "СписокПлатежей");
	// Конец НастройкиДинамическихСписков
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокПлатежей

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	
	Если НачалоПериода > КонецПериода И ЗначениеЗаполнено(КонецПериода) Тогда
		НачалоПериода = КонецПериода;
	КонецЕсли;
	
	ПериодПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
	
	Если КонецПериода < НачалоПериода И ЗначениеЗаполнено(КонецПериода) Тогда
		КонецПериода = НачалоПериода;
	КонецЕсли;
	
	ПериодПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПериодПриИзмененииНаСервере()
	
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	Оповещение = Новый ОписаниеОповещения(
		"ВыбратьПериодЗавершение",
		ЭтотОбъект);
		
	ОбщегоНазначенияУТКлиент.РедактироватьПериод(
		ЭтотОбъект,
		Новый Структура("ДатаНачала, ДатаОкончания", "НачалоПериода", "КонецПериода"),
		Оповещение);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(Период, ДополнительныеПараметры) Экспорт
	
	Если Период <> Неопределено Тогда
		ПериодПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроведеноБанкомОтборПриИзменении(Элемент)
	
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПлатежейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияУТКлиент.ИзменитьЭлемент(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСкопировать(Команда)
	
	ОбщегоНазначенияУТКлиент.СкопироватьЭлемент(Элементы.СписокПлатежей);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокИзменить(Команда)
	
	ОбщегоНазначенияУТКлиент.ИзменитьЭлемент(Элементы.СписокПлатежей);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПлатежейПриАктивизацииСтроки(Элемент)
	
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПлатежейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	Если Копирование Тогда
		ОбщегоНазначенияУТКлиент.СкопироватьЭлемент(Элемент);
	Иначе
		
		ПостфиксКоманды = ПостфиксКомандыПоХозяйственнойОперации(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОплатаПоставщику"));
		
		Если ПостфиксКоманды <> Неопределено Тогда
			СоздатьСписание(Команды["СоздатьСписание" + ПостфиксКоманды]);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПлатежейПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ОбщегоНазначенияУТКлиент.ИзменитьЭлемент(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПлатежейПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ОбщегоНазначенияУТКлиент.УстановитьПометкуУдаления(Элемент, Заголовок);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область BankFeeds

&НаКлиенте
Процедура ВыгрузкаBankFeeds(Команда)

	ОткрытьФорму("Обработка.КлиентБанкBankFeeds.Форма.ВыгрузкаПлатежныхДокументов",
		Новый Структура("БанковскийСчет", БанковскийСчетОтбор),);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаBankFeeds(Команда)
	
	ОткрытьФорму("Обработка.КлиентБанкBankFeeds.Форма.ЗагрузкаТранзакций",
		Новый Структура("БанковскийСчет", БанковскийСчетОтбор),
		Элементы.СписокПлатежей);
	
КонецПроцедуры

&НаКлиенте
Процедура СинхронизироватьBankFeeds(Команда)

	ОбменССервисомBankFeedsКлиент.СинхронизироватьBankFeeds(ЭтотОбъект, НачалоПериода, КонецПериода);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура КОформлениюОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ИмяФормыКОформлению = "";
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "КПоступлению" Тогда
		ИмяФормыКОформлению = "Обработка.ЖурналДокументовБезналичныеПлатежи.Форма.КПоступлению";
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "КОплате" Тогда
		Если ИспользоватьЗаявкиНаРасходованиеДенежныхСредств Тогда
			ИмяФормыКОформлению = "Обработка.ЖурналДокументовБезналичныеПлатежи.Форма.ЗаявкиКОплате";
		Иначе
			ИмяФормыКОформлению = "Обработка.ЖурналДокументовБезналичныеПлатежи.Форма.ЗаказыКОплате";
		КонецЕсли;
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ЗачислениеДС" Тогда
		ИмяФормыКОформлению = "Документ.ПодтверждениеЗачисленияЗарплаты.Форма.ФормаСпискаДокумента";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяФормыКОформлению) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		СтруктураБыстрогоОтбора = Новый Структура;
		СтруктураБыстрогоОтбора.Вставить("Организация", Организация);
		СтруктураБыстрогоОтбора.Вставить("БанковскийСчетОтбор", БанковскийСчетОтбор);
		СтруктураБыстрогоОтбора.Вставить("КонтрагентПредставление", КонтрагентПредставление);
		ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
		
		ОткрытьФорму(ИмяФормыКОформлению, ПараметрыФормы, ЭтотОбъект, Истина);
	КонецЕсли;
	
КонецПроцедуры

#Область СозданиеДокументов

// Выполняет команду создания документа
//
// Параметры:
//    Команда - КомандаФормы - команда формы
&НаКлиенте
Процедура СоздатьПоступление(Команда)
	
	ИмяХозОперации = Прав(Команда.Имя, СтрДлина(Команда.Имя) - СтрДлина("СоздатьПоступление"));
	
	СтруктураОтбор = Новый Структура;
	СтруктураОтбор.Вставить("ХозяйственнаяОперация", НастройкиФормы.ХозОперацииПоступления[ИмяХозОперации]);
	СтруктураОтбор.Вставить("БанковскийСчет", БанковскийСчетОтбор);
	СтруктураОтбор.Вставить("Организация", Организация);
	СтруктураОтбор.Вставить("Валюта", ВалютаСчета);
	
	Если СтруктураОтбор.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СдачаДенежныхСредствВБанк") Тогда
		СтруктураПараметры = Новый Структура("Основание", СтруктураОтбор);
		ОткрытьФорму("Документ.РасходныйКассовыйОрдер.ФормаОбъекта", СтруктураПараметры, ЭтаФорма);
	Иначе
		СтруктураПараметры = Новый Структура("Основание", СтруктураОтбор);
		ОткрытьФорму("Документ.ПоступлениеБезналичныхДенежныхСредств.ФормаОбъекта", СтруктураПараметры, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет команду создания документа
//
// Параметры:
//    Команда - КомандаФормы - команда формы
&НаКлиенте
Процедура СоздатьСписание(Команда)
	
	ИмяХозОперации = Прав(Команда.Имя, СтрДлина(Команда.Имя) - СтрДлина("СоздатьСписание"));
	
	СтруктураОтбор = Новый Структура;
	СтруктураОтбор.Вставить("ХозяйственнаяОперация", НастройкиФормы.ХозОперацииСписания[ИмяХозОперации]);
	СтруктураОтбор.Вставить("БанковскийСчет", БанковскийСчетОтбор);
	СтруктураОтбор.Вставить("Организация", Организация);
	СтруктураОтбор.Вставить("Валюта", ВалютаСчета);
	
	Если СтруктураОтбор.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка") Тогда
		СтруктураПараметры = Новый Структура("Основание", СтруктураОтбор);
		ОткрытьФорму("Документ.ПриходныйКассовыйОрдер.ФормаОбъекта", СтруктураПараметры, ЭтаФорма);
	Иначе
		СтруктураПараметры = Новый Структура("Основание", СтруктураОтбор);
		ОткрытьФорму("Документ.СписаниеБезналичныхДенежныхСредств.ФормаОбъекта", СтруктураПараметры, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СписокПровести(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиДокументы(Элементы.СписокПлатежей, Заголовок,
		РаботаСЖурналамиДокументовКлиент.ПараметрыОбновленияСпискаДокументов(ЭтотОбъект, "СписокПлатежей"));
		
КонецПроцедуры

&НаКлиенте
Процедура СписокОтменаПроведения(Команда)
	
	ОбщегоНазначенияУТКлиент.ОтменаПроведения(Элементы.СписокПлатежей, Заголовок,
		РаботаСЖурналамиДокументовКлиент.ПараметрыОбновленияСпискаДокументов(ЭтотОбъект, "СписокПлатежей"));
	
КонецПроцедуры

&НаКлиенте
Процедура СписокУстановитьСнятьПометкуУдаления(Команда)
	
	// НастройкиДинамическихСписков
	ИмяСписка = "СписокПлатежей";
	ОбновитьСписок = РаботаСЖурналамиДокументовКлиент.ЗначениеНастройкиАвтообновленияСпискаДокументов(ЭтотОбъект, ИмяСписка);
	// Конец НастройкиДинамическихСписков
	
	Если ОбновитьСписок Тогда
		ОповещениеОЗавершении = ДенежныеСредстваКлиент.ОповещениеСпискуБезналичныхПлатежейПослеИзмененияПометкиУдаления(
			Элементы.СписокПлатежей);
	Иначе
		ОповещениеОЗавершении = Неопределено;
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиент.УстановитьПометкуУдаления(Элементы.СписокПлатежей, Заголовок, ОповещениеОЗавершении,
		РаботаСЖурналамиДокументовКлиент.ПараметрыОбновленияСпискаДокументов(ЭтотОбъект, ИмяСписка));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПроведениеБанком(Команда)

	Элемент = Элементы.СписокПлатежей;	
	Строки = Элемент.ВыделенныеСтроки;
	Ссылки = ПроверитьПолучитьВыделенныеВСпискеСсылки(Элемент, Строки);
	Если Ссылки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоДок = Ссылки.Количество();
	Для Инд = 1 По КоличествоДок Цикл
		Если ТипЗнч(Ссылки[КоличествоДок - Инд]) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер")
			Или ТипЗнч(Ссылки[КоличествоДок - Инд]) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
			Ссылки.Удалить(КоличествоДок - Инд);
		КонецЕсли;
	КонецЦикла;
	
	ОчиститьСообщения();
	
	Если Ссылки.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru='Команда не может быть выполнена для указанного объекта!'"));
		Возврат;
	КонецЕсли;
	
	ПриУстановкеПроведенияБанком = Новый ОписаниеОповещения("ПриУстановкеПроведенияБанком", ЭтаФорма, Ссылки);
	ПоказатьВводДаты(ПриУстановкеПроведенияБанком, ТекущаяДата(), НСтр("ru = 'Укажите дату проведения банком'"), ЧастиДаты.Дата);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриУстановкеПроведенияБанком(ДатаПроведенияБанком, МассивДокументов) Экспорт
	
	Если ДатаПроведенияБанком <> Неопределено Тогда
		
		КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(
			МассивДокументов,
			"ПроведеноБанком",
			Новый Структура("ДатаПроведенияБанком", ДатаПроведенияБанком));
		
		// НастройкиДинамическихСписков
		ОбновитьДанныеСпискаДокументовСЗамеромВремени("СписокПлатежей", Истина);
		// Конец НастройкиДинамическихСписков
		
		ОбновитьИтоги();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаВБанк(Команда)
	
	ОткрытьФорму("Обработка.КлиентБанк.Форма.ВыгрузкаВБанк",
		Новый Структура("БанковскийСчет", БанковскийСчетОтбор),
		Элементы.СписокПлатежей);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаВыписки(Команда)
	
	ОткрытьФорму("Обработка.КлиентБанк.Форма.ЗагрузкаВыписки",
		Новый Структура("БанковскийСчет", БанковскийСчетОтбор),
		Элементы.СписокПлатежей);
	
КонецПроцедуры

&НаКлиенте
Процедура ВедомостьПоДням(Команда)
	
	ПараметрыФормы = Новый Структура("Отбор, КлючНазначенияИспользования, КлючВарианта, СформироватьПриОткрытии, ВидимостьКомандВариантовОтчетов");
	ПараметрыФормы.СформироватьПриОткрытии = Истина;
	ПараметрыФормы.ВидимостьКомандВариантовОтчетов = Истина;
	
	ПараметрыФормы.КлючНазначенияИспользования = "ВедомостьПоДням";
	
	Отбор = Новый Структура;
	Если ЗначениеЗаполнено(НачалоПериода) Тогда
		Отбор.Вставить("ПериодОтчета", Новый СтандартныйПериод(НачалоПериода, КонецПериода));
	КонецЕсли;
	Если ЗначениеЗаполнено(БанковскийСчетОтбор) Тогда
		Отбор.Вставить("БанковскийСчет", БанковскийСчетОтбор);
		Отбор.Вставить("Валюта", ВалютаСчета);
		ПараметрыФормы.КлючВарианта = "ВедомостьПоДнямОдинСчет";
	Иначе
		
		Если ЗначениеЗаполнено(Организация) Тогда
			Отбор.Вставить("Организация", Организация);
		КонецЕсли;
		
		ПараметрыФормы.КлючВарианта = "ВедомостьПоДням";
		
	КонецЕсли;
	ПараметрыФормы.Отбор = Отбор;
	
	ОткрытьФорму("Отчет.ВедомостьБезналичныхДенежныхСредств.Форма", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.СписокПлатежей);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.СписокПлатежей, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.СписокПлатежей);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Элементы.СписокПлатежей);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОплатыИзЯндексКассы(Команда)
	
	//++ Локализация

	// ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой
	ЗагрузитьОплатыИзЯндексКассыЛокализация(Команда);
	// Конец ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой

	//-- Локализация
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ПисьмаВБанк(Команда)
	
	//++ Локализация
	ПисьмаВБанкЛокализация(Команда);
	//-- Локализация
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовОбновить(Команда)
	
	// НастройкиДинамическихСписков
	ОбновитьДанныеСпискаДокументовСЗамеромВремени("СписокПлатежей");
	// Конец НастройкиДинамическихСписков
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗакрытиеФормыПодтверждениеПлатежаВSaltEdge(Результат, ДополнительныеПараметры) Экспорт
	
	ОбменССервисомBankFeedsКлиент.ПроверитьСтатусПлатежейПослеОтправки(ЭтотОбъект, ДополнительныеПараметры);	
	
	Оповестить("ОбновитьЖурналДокументовБезналичныеПлатежи",, ЭтотОбъект);
	
КонецПроцедуры	

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьРеквизиты()
	
	ИспользоватьНачислениеЗарплаты                   = Константы.ИспользоватьНачислениеЗарплаты.Получить();
	ИспользоватьЗаявкиНаРасходованиеДенежныхСредств  = ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаРасходованиеДенежныхСредств");
	НесколькоРасчетныхСчетов                         = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоРасчетныхСчетов");
	
	Если Не НесколькоРасчетныхСчетов Тогда
		БанковскийСчетОтбор = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Неопределено);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НачалоПериода)
		Или Не ЗначениеЗаполнено(КонецПериода) Тогда
		НачалоПериода = НачалоДня(ТекущаяДатаСеанса());
		КонецПериода = КонецДня(ТекущаяДатаСеанса());
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПроведеноБанкомОтбор) Тогда
		ПроведеноБанкомОтбор = "ВсеПлатежи";
	КонецЕсли;
	
	СписокПлатежей.Параметры.УстановитьЗначениеПараметра("ИдОбъектаПоступлениеБезналичныхДС",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ПоступлениеБезналичныхДенежныхСредств"));
	СписокПлатежей.Параметры.УстановитьЗначениеПараметра("ИдОбъектаСписаниеБезналичныхДС",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.СписаниеБезналичныхДенежныхСредств"));
	СписокПлатежей.Параметры.УстановитьЗначениеПараметра("ИдОбъектаПКО",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ПриходныйКассовыйОрдер"));
	СписокПлатежей.Параметры.УстановитьЗначениеПараметра("ИдОбъектаРКО",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.РасходныйКассовыйОрдер"));
		
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	ВидимостьЭлементов = Новый Соответствие;
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("СписокПлатежейВалюта");
	ВидимостьЭлементов.Вставить(МассивЭлементов, ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют"));
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("БанковскийСчетОтбор");
	ВидимостьЭлементов.Вставить(МассивЭлементов, НесколькоРасчетныхСчетов);
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ОрганизацияОтбор");
	ВидимостьЭлементов.Вставить(МассивЭлементов, ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций"));
	
	// BankFeeds
	ДоступенBankFeeds = ПолучитьФункциональнуюОпцию("ИспользоватьОбменBankFeeds");	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ЗагрузкаBankFeeds");
	МассивЭлементов.Добавить("ВыгрузкаBankFeeds");
	МассивЭлементов.Добавить("СинхронизироватьBankFeeds");
	ВидимостьЭлементов.Вставить(МассивЭлементов, ДоступенBankFeeds);
	// конец BankFeeds
	
	Для каждого ЭлементСоответствия Из ВидимостьЭлементов Цикл
		Для каждого ИмяЭлемента Из ЭлементСоответствия.Ключ Цикл
			Элементы[ИмяЭлемента].Видимость = ЭлементСоответствия.Значение;
		КонецЦикла;
	КонецЦикла;
	
	ЕстьДоступКИзменению = ПравоДоступа("Изменение", Метаданные.Документы.ПоступлениеБезналичныхДенежныхСредств)
		И ПравоДоступа("Изменение", Метаданные.Документы.СписаниеБезналичныхДенежныхСредств);
	Элементы.СписокСкопировать.Видимость =
		ПравоДоступа("Добавление", Метаданные.Документы.ПоступлениеБезналичныхДенежныхСредств)
		И ПравоДоступа("Добавление", Метаданные.Документы.СписаниеБезналичныхДенежныхСредств);
	Элементы.СписокИзменить.Видимость = ЕстьДоступКИзменению;
	Элементы.СписокУстановитьПометкуУдаления.Видимость =
		ПравоДоступа("ИнтерактивнаяПометкаУдаления", Метаданные.Документы.ПоступлениеБезналичныхДенежныхСредств)
		И ПравоДоступа("ИнтерактивнаяПометкаУдаления", Метаданные.Документы.СписаниеБезналичныхДенежныхСредств);
	Элементы.СписокПлатежейПровести.Видимость =
		ПравоДоступа("Проведение", Метаданные.Документы.ПоступлениеБезналичныхДенежныхСредств)
		И ПравоДоступа("Проведение", Метаданные.Документы.СписаниеБезналичныхДенежныхСредств);
	Элементы.СписокПлатежейОтменаПроведения.Видимость =
		ПравоДоступа("ОтменаПроведения", Метаданные.Документы.ПоступлениеБезналичныхДенежныхСредств)
		И ПравоДоступа("ОтменаПроведения", Метаданные.Документы.СписаниеБезналичныхДенежныхСредств);
	Элементы.СписокОтметитьПроведениеБанком.Видимость = ЕстьДоступКИзменению;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКомандыСозданияДокументов()
	
	ИспользоватьОплатуПлатежнымиКартами                 = ПолучитьФункциональнуюОпцию("ИспользоватьОплатуПлатежнымиКартами");
	ИспользоватьПередачиТоваровМеждуОрганизациями       = ПолучитьФункциональнуюОпцию("ИспользоватьПередачиТоваровМеждуОрганизациями");
	ИспользоватьНесколькоСчетов                         = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоРасчетныхСчетов");
	ИспользоватьКредитыДепозиты                         = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыКредитовИДепозитов");
	ИспользоватьНесколькоВалют                          = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют");
	ИспользоватьОбособленныеПодразделения               = ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс");
	ИспользоватьЗаймыСотрудникам                        = Не ПолучитьФункциональнуюОпцию("УправлениеТорговлей");
	
	ХозОперацииПоФО = Новый Соответствие;
	ХозОперацииПоФО.Вставить(Перечисления.ХозяйственныеОперации.ПоступлениеОплатыПоПлатежнойКарте,              ИспользоватьОплатуПлатежнымиКартами);
	ХозОперацииПоФО.Вставить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации,  ИспользоватьПередачиТоваровМеждуОрганизациями);
	ХозОперацииПоФО.Вставить(Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств,              ИспользоватьОбособленныеПодразделения);
	ХозОперацииПоФО.Вставить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствСДругогоСчета,        ИспользоватьНесколькоСчетов);
	ХозОперацииПоФО.Вставить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоКредитам,           ИспользоватьКредитыДепозиты);
	ХозОперацииПоФО.Вставить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоДепозитам,          ИспользоватьКредитыДепозиты);
	ХозОперацииПоФО.Вставить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоЗаймамВыданным,     ИспользоватьКредитыДепозиты);
	ХозОперацииПоФО.Вставить(Перечисления.ХозяйственныеОперации.КонвертацияВалюты,                              ИспользоватьНесколькоВалют И ИспользоватьНесколькоСчетов);
	ХозОперацииПоФО.Вставить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации,      ИспользоватьПередачиТоваровМеждуОрганизациями);
	
	ХозОперацииПоФО.Вставить(Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию,        ИспользоватьПередачиТоваровМеждуОрганизациями);
	ХозОперацииПоФО.Вставить(Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств,              ИспользоватьОбособленныеПодразделения);
	ХозОперацииПоФО.Вставить(Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет,        ИспользоватьНесколькоСчетов);
	ХозОперацииПоФО.Вставить(Перечисления.ХозяйственныеОперации.ОплатаПоКредитам,                               ИспользоватьКредитыДепозиты);
	ХозОперацииПоФО.Вставить(Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты,                         ИспользоватьКредитыДепозиты);
	ХозОперацииПоФО.Вставить(Перечисления.ХозяйственныеОперации.ВыдачаЗаймов,                                   ИспользоватьКредитыДепозиты);
	ХозОперацииПоФО.Вставить(Перечисления.ХозяйственныеОперации.ВыдачаЗаймаСотруднику,                          ИспользоватьЗаймыСотрудникам);
	ХозОперацииПоФО.Вставить(Перечисления.ХозяйственныеОперации.ПогашениеЗаймаСотрудником,                      ИспользоватьЗаймыСотрудникам);
	ХозОперацииПоФО.Вставить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию,       ИспользоватьПередачиТоваровМеждуОрганизациями);
	ХозОперацииПоФО.Вставить(Перечисления.ХозяйственныеОперации.ВозвратОплатыНаПлатежнуюКарту,                  ИспользоватьОплатуПлатежнымиКартами);
	
	
	НастройкиФормы = Новый Структура;
	
	// Поступление
	ХозОперацииПоступления = Новый Соответствие;
	
	ГруппыОпераций = Новый Массив;
	
	Операции = Новый СписокЗначений;
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.ПоступлениеБезналичныхДенежныхСредств) Тогда
		Операции.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента);
		Операции.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеОплатыПоПлатежнойКарте, НСтр("ru= 'Поступление оплаты по эквайрингу'") );
		Операции.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации, НСтр("ru= 'Поступление от другой организации'"));
		Операции.Добавить(Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств, НСтр("ru= 'Передача между организацией и филиалом'"));
	КонецЕсли;
	
	ГруппаОпераций = Новый Структура("Операции, ИмяГруппы", Операции, "Оплата");
	ГруппыОпераций.Добавить(ГруппаОпераций);
	
	Операции = Новый СписокЗначений;
	Если ПравоДоступа("Добавление", Метаданные.Документы.ПоступлениеБезналичныхДенежныхСредств) Тогда
		Операции.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствСДругогоСчета, НСтр("ru= 'Поступление с другого счета'"));
	КонецЕсли;
	Если ПравоДоступа("Изменение", Метаданные.Документы.РасходныйКассовыйОрдер) Тогда
		Операции.Добавить(Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк, НСтр("ru= 'Сдача наличных в банк'"));
	КонецЕсли;
	Если ПравоДоступа("Добавление", Метаданные.Документы.ПоступлениеБезналичныхДенежныхСредств) Тогда
		Операции.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыНаРасчетныйСчет, НСтр("ru= 'Инкассация в банк'"));
	КонецЕсли;
	ГруппаОпераций = Новый Структура("Операции, ИмяГруппы", Операции, "Перемещение");
	ГруппыОпераций.Добавить(ГруппаОпераций);
	
	Операции = Новый СписокЗначений;
	Если ПравоДоступа("Добавление", Метаданные.Документы.ПоступлениеБезналичныхДенежныхСредств) Тогда
		Операции.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоКредитам, НСтр("ru= 'Поступление по кредитам и займам полученным'"));
		Операции.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоДепозитам, НСтр("ru= 'Поступление по депозитам'"));
		Операции.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоЗаймамВыданным, НСтр("ru= 'Погашение займа контрагентом'"));
		Операции.Добавить(Перечисления.ХозяйственныеОперации.ПогашениеЗаймаСотрудником, НСтр("ru= 'Погашение займа сотрудником'"));
	КонецЕсли;
	ГруппаОпераций = Новый Структура("Операции, ИмяГруппы", Операции, "КредитыДепозиты");
	ГруппыОпераций.Добавить(ГруппаОпераций);
	
	Операции = Новый СписокЗначений;
	Если ПравоДоступа("Добавление", Метаданные.Документы.ПоступлениеБезналичныхДенежныхСредств) Тогда
		Операции.Добавить(Перечисления.ХозяйственныеОперации.КонвертацияВалюты);
		Операции.Добавить(Перечисления.ХозяйственныеОперации.ПрочееПоступлениеДенежныхСредств, НСтр("ru= 'Прочее поступление'"));
	КонецЕсли;
	ГруппаОпераций = Новый Структура("Операции, ИмяГруппы", Операции, "Прочее");
	ГруппыОпераций.Добавить(ГруппаОпераций);
	
	Операции = Новый СписокЗначений;
	Если ПравоДоступа("Добавление", Метаданные.Документы.ПоступлениеБезналичныхДенежныхСредств) Тогда
		Операции.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика, НСтр("ru= 'Возврат от поставщика'"));
		Операции.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПодотчетника, НСтр("ru= 'Возврат от подотчетника'"));
		Операции.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации, НСтр("ru= 'Возврат от другой организации'"));
		Операции.Добавить(Перечисления.ХозяйственныеОперации.ВозвратНеперечисленнойЗарплатыПоЗарплатномуПроекту, НСтр("ru= 'Возврат неперечисленных по реестру платежей'"));
		Операции.Добавить(Перечисления.ХозяйственныеОперации.ВозвратНалогов);
	КонецЕсли;
	ГруппаОпераций = Новый Структура("Операции, ИмяГруппы", Операции, "Возвраты");
	ГруппыОпераций.Добавить(ГруппаОпераций);
	
	Для каждого ГруппаОпераций Из ГруппыОпераций Цикл
		
		ГруппаКоманд = Элементы.Вставить(
			"ГруппаСоздатьПоступление" + ГруппаОпераций.ИмяГруппы, Тип("ГруппаФормы"), Элементы.СписокСоздатьПоступление);
		ГруппаКоманд.Вид = ВидГруппыФормы.ГруппаКнопок;
		
		Для каждого Операция Из ГруппаОпераций.Операции Цикл
			
			ОперацияВключена = Истина;
			ИспользованиеХО = ХозОперацииПоФО.Получить(Операция.Значение);
			Если ИспользованиеХО <> Неопределено Тогда
				ОперацияВключена = ИспользованиеХО;
			КонецЕсли;
			
			Если ОперацияВключена Тогда
				ИмяХозОперации = ОбщегоНазначения.ИмяЗначенияПеречисления(Операция.Значение);
				ХозОперацииПоступления.Вставить(ИмяХозОперации, Операция.Значение);
				
				ИмяКоманды = СтрШаблон("СоздатьПоступление%1", ИмяХозОперации);
				
				КомандаСоздатьДокумент = Команды.Добавить(ИмяКоманды);
				КомандаСоздатьДокумент.Действие = "СоздатьПоступление";
				КомандаСоздатьДокумент.Заголовок = ?(ЗначениеЗаполнено(Операция.Представление), Операция.Представление, Строка(Операция.Значение));
				ДобавитьХозОперациюВТаблицуСоздаваемыхКоманд(Операция.Значение, ИмяХозОперации);
				
				ЭлементСоздатьДокумент = Элементы.Вставить("СоздатьПоступление" + ИмяХозОперации, Тип("КнопкаФормы"), ГруппаКоманд);
				ЭлементСоздатьДокумент.ИмяКоманды = КомандаСоздатьДокумент.Имя;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	НастройкиФормы.Вставить("ХозОперацииПоступления", ХозОперацииПоступления);
	
	// Списание
	ХозОперацииСписания = Новый Соответствие;
	
	ГруппыОпераций = Новый Массив;
	
	Операции = Новый СписокЗначений;
	Если ПравоДоступа("Добавление", Метаданные.Документы.СписаниеБезналичныхДенежныхСредств) Тогда
		Операции.Добавить(Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
		Операции.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику, НСтр("ru= 'Выдача подотчетнику'"));
		Операции.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет);
		Операции.Добавить(Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию, НСтр("ru= 'Оплата другой организации'"));
		Операции.Добавить(Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств, НСтр("ru= 'Передача между организацией и филиалом'"));
		Операции.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета);
	КонецЕсли;
	ГруппаОпераций = Новый Структура("Операции, ИмяГруппы", Операции, "Оплата");
	ГруппыОпераций.Добавить(ГруппаОпераций);
	
	Операции = Новый СписокЗначений;
	Если ПравоДоступа("Добавление", Метаданные.Документы.СписаниеБезналичныхДенежныхСредств) Тогда
		Операции.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет, НСтр("ru= 'Перечисление на другой счет'"));
	КонецЕсли;
	Если ПравоДоступа("Изменение", Метаданные.Документы.ПриходныйКассовыйОрдер) Тогда
		Операции.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка, НСтр("ru= 'Поступление наличных из банка'"));
	КонецЕсли;
	Если ПравоДоступа("Добавление", Метаданные.Документы.СписаниеБезналичныхДенежныхСредств) Тогда
		Операции.Добавить(Перечисления.ХозяйственныеОперации.СнятиеНаличныхДенежныхСредств, НСтр("ru= 'Инкассация из банка'"));
	КонецЕсли;
	ГруппаОпераций = Новый Структура("Операции, ИмяГруппы", Операции, "Перемещение");
	ГруппыОпераций.Добавить(ГруппаОпераций);
	
	Операции = Новый СписокЗначений;
	Если ПравоДоступа("Добавление", Метаданные.Документы.СписаниеБезналичныхДенежныхСредств) Тогда
		Операции.Добавить(Перечисления.ХозяйственныеОперации.ОплатаПоКредитам);
		Операции.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты);
		Операции.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаЗаймов, НСтр("ru = 'Выдача займа контрагенту'"));
		Операции.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаЗаймаСотруднику, НСтр("ru = 'Выдача займа сотруднику'"));
	КонецЕсли;
	ГруппаОпераций = Новый Структура("Операции, ИмяГруппы", Операции, "КредитыДепозиты");
	ГруппыОпераций.Добавить(ГруппаОпераций);
	
	Операции = Новый СписокЗначений;
	Если ПравоДоступа("Добавление", Метаданные.Документы.СписаниеБезналичныхДенежныхСредств) Тогда
		Операции.Добавить(Перечисления.ХозяйственныеОперации.КонвертацияВалюты);
		Операции.Добавить(Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств, НСтр("ru= 'Прочий расход'"));
	КонецЕсли;
	ГруппаОпераций = Новый Структура("Операции, ИмяГруппы", Операции, "Прочее");
	ГруппыОпераций.Добавить(ГруппаОпераций);
	
	Операции = Новый СписокЗначений;
	Если ПравоДоступа("Добавление", Метаданные.Документы.СписаниеБезналичныхДенежныхСредств) Тогда
		Операции.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
		Операции.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию, НСтр("ru= 'Возврат другой организации'"));
		Операции.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОплатыНаПлатежнуюКарту);
	КонецЕсли;
	ГруппаОпераций = Новый Структура("Операции, ИмяГруппы", Операции, "Возвраты");
	ГруппыОпераций.Добавить(ГруппаОпераций);
	
	Для каждого ГруппаОпераций Из ГруппыОпераций Цикл
		
		ГруппаКоманд = Элементы.Вставить("ГруппаСоздатьСписание" + ГруппаОпераций.ИмяГруппы, Тип("ГруппаФормы"), Элементы.СписокСоздатьСписание);
		ГруппаКоманд.Вид = ВидГруппыФормы.ГруппаКнопок;
		
		Для каждого Операция Из ГруппаОпераций.Операции Цикл
			
			ОперацияВключена = Истина;
			ИспользованиеХО = ХозОперацииПоФО.Получить(Операция.Значение);
			Если ИспользованиеХО <> Неопределено Тогда
				ОперацияВключена = ИспользованиеХО;
			КонецЕсли;
			
			Если ОперацияВключена Тогда
				ИмяХозОперации = ОбщегоНазначения.ИмяЗначенияПеречисления(Операция.Значение);
				ХозОперацииСписания.Вставить(ИмяХозОперации, Операция.Значение);
				
				КомандаСоздатьДокумент = Команды.Добавить("СоздатьСписание" + ИмяХозОперации);
				КомандаСоздатьДокумент.Действие = "СоздатьСписание";
				КомандаСоздатьДокумент.Заголовок = ?(ЗначениеЗаполнено(Операция.Представление), Операция.Представление, Строка(Операция.Значение));
				
				ДобавитьХозОперациюВТаблицуСоздаваемыхКоманд(Операция.Значение, ИмяХозОперации);
				
				ЭлементСоздатьДокумент = Элементы.Вставить("СоздатьСписание" + ИмяХозОперации, Тип("КнопкаФормы"), ГруппаКоманд);
				ЭлементСоздатьДокумент.ИмяКоманды = КомандаСоздатьДокумент.Имя;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	НастройкиФормы.Вставить("ХозОперацииСписания", ХозОперацииСписания);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьХозОперациюВТаблицуСоздаваемыхКоманд(Операция, ИмяОперации)
	
	НоваяСтрока = ИменаХозяйственныхОперацийКомандСоздания.Добавить();
	НоваяСтрока.ХозяйственнаяОперация = Операция;
	НоваяСтрока.ПостфиксКоманды       = ИмяОперации;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборДинамическихСписков()
	
	Если ЗначениеЗаполнено(БанковскийСчетОтбор) Тогда
		
		РеквизитыСчета = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(БанковскийСчетОтбор);
		Организация = РеквизитыСчета.Организация;
		Если РеквизитыСчета.ЭтоГруппа Тогда
			ТекстНадписи = СтрШаблон(НСтр("ru = 'Банковские счета каталога ""%1"" по организации %2'"),
										БанковскийСчетОтбор, РеквизитыСчета.Организация);
			Элементы.НадписьБанковскийСчет.Заголовок = ТекстНадписи;
		Иначе
			ВалютаСчета = РеквизитыСчета.Валюта;
			Элементы.НадписьБанковскийСчет.Заголовок =
				СтрШаблон(НСтр("ru = 'Банковский счет %1, %2'"), Строка(ВалютаСчета), СокрЛП(БанковскийСчетОтбор));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Организация) Тогда
			СвязиПараметровВыбора = Новый Массив;
			СвязиПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Организация"));
			Элементы.БанковскийСчетОтбор.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
		Иначе
			Элементы.БанковскийСчетОтбор.СвязиПараметровВыбора = Новый ФиксированныйМассив(Новый Массив);
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(Организация) Тогда
		
		БанковскийСчетОтбор = Неопределено;
		ВалютаСчета         = Неопределено;
		Элементы.НадписьБанковскийСчет.Заголовок = НСтр("ru = '<Банковский счет не задан>'");
		
		СвязиПараметровВыбора = Новый Массив;
		СвязиПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Организация"));
		Элементы.БанковскийСчетОтбор.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
	Иначе
		
		Организация = Неопределено;
		ВалютаСчета = Неопределено;
		Элементы.НадписьБанковскийСчет.Заголовок = НСтр("ru = '<Банковский счет не задан>'");
		Элементы.БанковскийСчетОтбор.СвязиПараметровВыбора = Новый ФиксированныйМассив(Новый Массив);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НачалоПериода) И Не ЗначениеЗаполнено(КонецПериода) Тогда
		Элементы.НадписьПериодВыписки.Заголовок = НСтр("ru = 'За период <без ограничения>'")
	Иначе
		Элементы.НадписьПериодВыписки.Заголовок =
			СтрШаблон(НСтр("ru = 'За период с %1 по %2'"),
				?(ЗначениеЗаполнено(НачалоПериода), Формат(НачалоПериода, "ДЛФ=Д"), НСтр("ru = '<без ограничения>'")),
				?(ЗначениеЗаполнено(КонецПериода), Формат(КонецПериода, "ДЛФ=Д"), НСтр("ru = '<без ограничения>'")));
	КонецЕсли;
	
	// Общие отборы
	СписокОрганизаций = Обработки.ЖурналДокументовБезналичныеПлатежи.СвязанныеОрганизации(Организация);
	
	СписокСчетов = Новый СписокЗначений;
	СписокСчетов.Добавить(БанковскийСчетОтбор);
	СписокСчетов.Добавить(Справочники.БанковскиеСчетаОрганизаций.ПустаяСсылка());
	СписокСчетов.Добавить(Неопределено);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокПлатежей,
		"Организация",
		СписокОрганизаций,
		ВидСравненияКомпоновкиДанных.ВСписке,,
		ЗначениеЗаполнено(Организация));
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокПлатежей,
		"БанковскийСчет",
		БанковскийСчетОтбор,
		ВидСравненияКомпоновкиДанных.ВИерархии,,
		ЗначениеЗаполнено(БанковскийСчетОтбор));
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокПлатежей,
		"Валюта",
		ВалютаСчета,
		ВидСравненияКомпоновкиДанных.ВСписке,,
		ЗначениеЗаполнено(ВалютаСчета));
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокПлатежей,
		"КонтрагентПредставление",
		КонтрагентПредставление,
		ВидСравненияКомпоновкиДанных.Содержит,,
		ЗначениеЗаполнено(КонтрагентПредставление));
	
	СписокПлатежей.Параметры.УстановитьЗначениеПараметра("НачалоПериода", НачалоПериода);
	СписокПлатежей.Параметры.УстановитьЗначениеПараметра("КонецПериода", ?(ЗначениеЗаполнено(КонецПериода), КонецДня(КонецПериода), КонецДня(Дата(3999, 12, 31))));
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокПлатежей,
		"ПроведеноБанком",
		?(ПроведеноБанкомОтбор = "Проведенные", Истина, Ложь),
		ВидСравненияКомпоновкиДанных.Равно,,
		ПроведеноБанкомОтбор <> "ВсеПлатежи");
		
	// НастройкиДинамическихСписков
	РаботаСЖурналамиДокументов.УстановитьВидимостьГруппыНастройкиОбновленияПоУмолчанию(ЭтотОбъект, "СписокПлатежей");
	// Конец НастройкиДинамическихСписков
	
	ОбновитьИтоги();
	
	СохранитьРабочиеЗначенияПолейФормы();
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьПолучитьВыделенныеВСпискеСсылки(Элемент, Строки)
	
	Если ТипЗнч(Строки) = Тип("Массив") Тогда
		ВыбранныеСтроки = Строки;
	Иначе
		ВыбранныеСтроки = Новый Массив;
		ВыбранныеСтроки.Добавить(Строки);
	КонецЕсли;
	
	МассивСсылок = Новый Массив;
	
	Для Итератор = 0 По ВыбранныеСтроки.Количество() - 1 Цикл
		Если ТипЗнч(ВыбранныеСтроки[Итератор]) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			МассивСсылок.Добавить(Элемент.ДанныеСтроки(ВыбранныеСтроки[Итератор]).Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивСсылок;
	
КонецФункции

&НаСервере
Процедура ОбновитьИтоги()
	
	ОбновитьОстаткиДенежныхСредств();
	ОбновитьОстаткиИОбороты();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОстаткиДенежныхСредств()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДенежныеСредстваБезналичные.СуммаОстаток        КАК ТекущийОстаток,
	|	ДенежныеСредстваБезналичные.КСписаниюОстаток    КАК КСписаниюВсего
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваБезналичные.Остатки(, БанковскийСчет В ИЕРАРХИИ (&БанковскийСчет)) КАК ДенежныеСредстваБезналичные
	|";
	
	Если ЗначениеЗаполнено(БанковскийСчетОтбор) ИЛИ НЕ ЗначениеЗаполнено(Организация) Тогда
		Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчетОтбор);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "БанковскийСчет В ИЕРАРХИИ (&БанковскийСчет)", "Организация = &Организация");
		Запрос.УстановитьПараметр("Организация", Организация);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ТекущийОстаток = Выборка.ТекущийОстаток;
		КСписаниюВсего = Выборка.КСписаниюВсего;
	Иначе
		ТекущийОстаток = 0;
		КСписаниюВсего = 0;
	КонецЕсли;
	
	ДоступноВсего = ТекущийОстаток - КСписаниюВсего;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОстаткиИОбороты()
	
	НачальныйОстаток = 0;
	Поступление = 0;
	Списание = 0;
	КонечныйОстаток = 0;
	
	Если ЗначениеЗаполнено(КонецПериода) И НачалоПериода > КонецПериода Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДенежныеСредстваБезналичные.СуммаНачальныйОстаток КАК НачальныйОстаток,
	|	ДенежныеСредстваБезналичные.СуммаПриход КАК Поступление,
	|	ДенежныеСредстваБезналичные.СуммаРасход КАК Списание,
	|	ДенежныеСредстваБезналичные.СуммаКонечныйОстаток КАК КонечныйОстаток
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваБезналичные.ОстаткиИОбороты(&НачалоПериода, &КонецПериода,,, БанковскийСчет В ИЕРАРХИИ (&БанковскийСчет)) КАК ДенежныеСредстваБезналичные
	|";
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",
		?(ЗначениеЗаполнено(КонецПериода), Новый Граница(КонецДня(КонецПериода), ВидГраницы.Включая), КонецПериода));
	
	Если ЗначениеЗаполнено(БанковскийСчетОтбор) ИЛИ НЕ ЗначениеЗаполнено(Организация) Тогда
		Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчетОтбор);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "БанковскийСчет В ИЕРАРХИИ (&БанковскийСчет)", "Организация = &Организация");
		Запрос.УстановитьПараметр("Организация", Организация);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		НачальныйОстаток = Выборка.НачальныйОстаток;
		Поступление = Выборка.Поступление;
		Списание = Выборка.Списание;
		КонечныйОстаток = Выборка.КонечныйОстаток;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьГиперссылкиКОформлению()
	
	ЭлементСписка = КОформлениюСсылки.НайтиПоЗначению("КПоступлению");
	Если ЭлементСписка <> Неопределено Тогда
		ЭлементСписка.Представление = ГиперссылкаКПоступлению(КоличествоКПоступлению());
	КонецЕсли;
	
	ЭлементСписка = КОформлениюСсылки.НайтиПоЗначению("КОплатеПереводу");
	Если ЭлементСписка <> Неопределено Тогда
		ЭлементСписка.Представление = ГиперссылкаКОплатеПереводу(КоличествоКОплатеПереводу());
	КонецЕсли;
	
	ЭлементСписка = КОформлениюСсылки.НайтиПоЗначению("ЗачислениеДС");
	
	Если ЭлементСписка <> Неопределено Тогда
		ЭлементСписка.Представление = Новый ФорматированнаяСтрока(
				НСтр("ru = 'Зачисление на лицевые счета'"), , ЦветаСтиля.ГиперссылкаЦвет, , "ЗачислениеДС");
	КонецЕсли;
	
	СформироватьГиперссылкиКОформлению();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьГиперссылкиКОформлению()
	
	МассивСтрок = Новый Массив;
	Для каждого ЭлементСписка Из КОформлениюСсылки Цикл
		МассивСтрок.Добавить(ЭлементСписка.Представление);
		МассивСтрок.Добавить("    ");
	КонецЦикла;
	
	КОформлению = Новый ФорматированнаяСтрока(МассивСтрок);
	Элементы.КОформлению.Видимость = ЗначениеЗаполнено(КОформлению);
	
КонецПроцедуры

&НаСервере
Функция КоличествоКПоступлению()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СУММА(СтрокиКОплате.Количество) КАК Количество
	|ИЗ
	|(ВЫБРАТЬ ПЕРВЫЕ 1001
	|	1 КАК Количество
	|ИЗ
	|	РегистрСведений.ГрафикПлатежей КАК ГрафикПлатежей
	|ГДЕ
	|	ГрафикПлатежей.ПоступлениеСписание = ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияДенежныхСредств.Поступление)
	|	И ГрафикПлатежей.ОбластьПланирования В (
	|		ЗНАЧЕНИЕ(Перечисление.ОбластиПланированияПлатежей.РасчетыСКлиентами),
	|		ЗНАЧЕНИЕ(Перечисление.ОбластиПланированияПлатежей.ВозвратыОтПоставщиков),
	|		ЗНАЧЕНИЕ(Перечисление.ОбластиПланированияПлатежей.ДенежныеСредстваВПути),
	|		ЗНАЧЕНИЕ(Перечисление.ОбластиПланированияПлатежей.КредитыИлиЗаймыПолученные),
	|		ЗНАЧЕНИЕ(Перечисление.ОбластиПланированияПлатежей.ЗаймыВыданные),
	|		ЗНАЧЕНИЕ(Перечисление.ОбластиПланированияПлатежей.Депозиты)
	|		)
	|	И ГрафикПлатежей.ФормаОплаты В (
	|		ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная),
	|		ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.ПустаяСсылка))
	|	И (ГрафикПлатежей.Организация В (&ОрганизацияОтбор)
	|		ИЛИ &ОрганизацияОтборНеЗадан)
	|	И (ГрафикПлатежей.БанковскийСчетКасса В (&БанковскийСчетОтбор)
	|		ИЛИ &БанковскийСчетОтборНеЗадан)
	|	И (ГрафикПлатежей.ПлательщикПолучатель.Наименование ПОДОБНО &КонтрагентОтбор
	|		ИЛИ &КонтрагентОтборНеЗадан)
	|) КАК СтрокиКОплате
	|";
	
	СписокОрганизаций = Обработки.ЖурналДокументовБезналичныеПлатежи.СвязанныеОрганизации(Организация);
	
	СписокСчетов = Новый СписокЗначений;
	
	СписокСчетовПоСчету = Справочники.БанковскиеСчетаОрганизаций.БанковскиеСчетаКаталога(БанковскийСчетОтбор);
	
	Если СписокСчетовПоСчету.Количество() <> 0 Тогда
		СписокСчетов.ЗагрузитьЗначения(СписокСчетовПоСчету);
	КонецЕсли;
	
	СписокСчетов.Добавить(БанковскийСчетОтбор);
	СписокСчетов.Добавить(Справочники.БанковскиеСчетаОрганизаций.ПустаяСсылка());
	СписокСчетов.Добавить(Неопределено);
	
	Запрос.УстановитьПараметр("ОрганизацияОтбор",           СписокОрганизаций);
	Запрос.УстановитьПараметр("ОрганизацияОтборНеЗадан",    Не ЗначениеЗаполнено(Организация));
	Запрос.УстановитьПараметр("БанковскийСчетОтбор",        СписокСчетов);
	Запрос.УстановитьПараметр("БанковскийСчетОтборНеЗадан", Не ЗначениеЗаполнено(БанковскийСчетОтбор));
	Запрос.УстановитьПараметр("КонтрагентОтбор",            КонтрагентПредставление + "%");
	Запрос.УстановитьПараметр("КонтрагентОтборНеЗадан",     Не ЗначениеЗаполнено(КонтрагентПредставление));
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	Выборка.Следующий();
	
	Если ЗначениеЗаполнено(Выборка.Количество) Тогда
		Возврат Выборка.Количество;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция КоличествоКОплатеПереводу()
	
	Запрос = Новый Запрос;
	
	Если ИспользоватьЗаявкиНаРасходованиеДенежныхСредств Тогда
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	СУММА(СтрокиКОплате.Количество) КАК Количество
		|ИЗ
		|(ВЫБРАТЬ ПЕРВЫЕ 1001
		|	1 КАК Количество
		|ИЗ
		|	РегистрСведений.ГрафикПлатежей КАК ГрафикПлатежей
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК Заявка
		|	ПО Заявка.Ссылка = ГрафикПлатежей.ОбъектОплаты
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаКомандировку КАК ЗаявкаНаКомандировку
		|	ПО ЗаявкаНаКомандировку.Ссылка = ГрафикПлатежей.ОбъектОплаты
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.РаспоряжениеНаПеремещениеДенежныхСредств КАК Распоряжение
		|	ПО Распоряжение.Ссылка = ГрафикПлатежей.ОбъектОплаты
		|	
		//++ Локализация
		|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.УведомлениеОЗачисленииВалюты КАК Уведомление
		|	ПО Уведомление.Ссылка = ГрафикПлатежей.ОбъектОплаты
		//-- Локализация
		|	
		|ГДЕ
		|	ГрафикПлатежей.ПоступлениеСписание = ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияДенежныхСредств.Списание)
		|	И ГрафикПлатежей.ОбластьПланирования В (
		|		ЗНАЧЕНИЕ(Перечисление.ОбластиПланированияПлатежей.ЗаявкиНаРасходованиеДенежныхСредств),
		|		ЗНАЧЕНИЕ(Перечисление.ОбластиПланированияПлатежей.РаспоряженияНаПеремещениеДенежныхСредств))
		|	И (Заявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате)
		|		ИЛИ Распоряжение.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРаспоряженийНаПеремещениеДенежныхСредств.КОплате)
		|		ИЛИ ЗаявкаНаКомандировку.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокСотрудников.Согласована)
		//++ Локализация
		|		ИЛИ НЕ Уведомление.Ссылка ЕСТЬ NULL
		//-- Локализация
		|		)
		|	И (Распоряжение.ХозяйственнаяОперация В (
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет),
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка),
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СнятиеНаличныхДенежныхСредств))
		|		ИЛИ Распоряжение.Ссылка ЕСТЬ NULL)
		|	И ГрафикПлатежей.ФормаОплаты В (
		|		ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.БезНаличная),
		|		ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.ПустаяСсылка))
		|	И (ГрафикПлатежей.Организация В (&ОрганизацияОтбор)
		|		ИЛИ &ОрганизацияОтборНеЗадан)
		|	И (ГрафикПлатежей.БанковскийСчетКасса В (&БанковскийСчетОтбор)
		|		ИЛИ &БанковскийСчетОтборНеЗадан)
		|	И (ГрафикПлатежей.ПлательщикПолучатель.Наименование ПОДОБНО &КонтрагентОтбор
		|		ИЛИ &КонтрагентОтборНеЗадан)
		|) КАК СтрокиКОплате
		|";
	Иначе
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	СУММА(СтрокиКОплате.Количество) КАК Количество
		|ИЗ
		|(ВЫБРАТЬ ПЕРВЫЕ 1001
		|	1 КАК Количество
		|ИЗ
		|	РегистрСведений.ГрафикПлатежей КАК ГрафикПлатежей
		|	
		|ГДЕ
		|	ГрафикПлатежей.ПоступлениеСписание = ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияДенежныхСредств.Списание)
		|	И ГрафикПлатежей.ОбластьПланирования В (
		|		ЗНАЧЕНИЕ(Перечисление.ОбластиПланированияПлатежей.РасчетыСПоставщиками),
		|		ЗНАЧЕНИЕ(Перечисление.ОбластиПланированияПлатежей.ВозвратыКлиентам),
		|		ЗНАЧЕНИЕ(Перечисление.ОбластиПланированияПлатежей.ДенежныеСредстваВПути),
		|		ЗНАЧЕНИЕ(Перечисление.ОбластиПланированияПлатежей.КредитыИлиЗаймыПолученные),
		|		ЗНАЧЕНИЕ(Перечисление.ОбластиПланированияПлатежей.Депозиты),
		|		ЗНАЧЕНИЕ(Перечисление.ОбластиПланированияПлатежей.ЗаймыВыданные),
		|		ЗНАЧЕНИЕ(Перечисление.ОбластиПланированияПлатежей.Аренда))
		|	И ГрафикПлатежей.ФормаОплаты В (
		|		ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.БезНаличная),
		|		ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.ПустаяСсылка))
		|	И (ГрафикПлатежей.Организация В (&ОрганизацияОтбор)
		|		ИЛИ &ОрганизацияОтборНеЗадан)
		|	И (ГрафикПлатежей.БанковскийСчетКасса В (&БанковскийСчетОтбор)
		|		ИЛИ &БанковскийСчетОтборНеЗадан)
		|	И (ГрафикПлатежей.ПлательщикПолучатель.Наименование ПОДОБНО &КонтрагентОтбор
		|		ИЛИ &КонтрагентОтборНеЗадан)
		|) КАК СтрокиКОплате
		|";
	КонецЕсли;
	
	СписокОрганизаций = Обработки.ЖурналДокументовБезналичныеПлатежи.СвязанныеОрганизации(Организация);
	
	СписокСчетов = Новый СписокЗначений;
	
	СписокСчетовПоСчету = Справочники.БанковскиеСчетаОрганизаций.БанковскиеСчетаКаталога(БанковскийСчетОтбор);
	
	Если СписокСчетовПоСчету.Количество() <> 0 Тогда
		СписокСчетов.ЗагрузитьЗначения(СписокСчетовПоСчету);
	КонецЕсли;
	
	СписокСчетов.Добавить(БанковскийСчетОтбор);
	СписокСчетов.Добавить(Справочники.БанковскиеСчетаОрганизаций.ПустаяСсылка());
	СписокСчетов.Добавить(Неопределено);
	
	Запрос.УстановитьПараметр("ОрганизацияОтбор",           СписокОрганизаций);
	Запрос.УстановитьПараметр("ОрганизацияОтборНеЗадан",    Не ЗначениеЗаполнено(Организация));
	Запрос.УстановитьПараметр("БанковскийСчетОтбор",        СписокСчетов);
	Запрос.УстановитьПараметр("БанковскийСчетОтборНеЗадан", Не ЗначениеЗаполнено(БанковскийСчетОтбор));
	Запрос.УстановитьПараметр("КонтрагентОтбор",            КонтрагентПредставление + "%");
	Запрос.УстановитьПараметр("КонтрагентОтборНеЗадан",     Не ЗначениеЗаполнено(КонтрагентПредставление));
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	Выборка.Следующий();
	
	Если ЗначениеЗаполнено(Выборка.Количество) Тогда
		Возврат Выборка.Количество;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ГиперссылкаКПоступлению(КоличествоКПоступлению)
	
	ТекстГиперссылки = СтрШаблон(НСтр("ru = 'К поступлению (%1)'"),
		?(КоличествоКПоступлению > 1000, Строка(КоличествоКПоступлению)+"+" , КоличествоКПоступлению));
	Возврат Новый ФорматированнаяСтрока(ТекстГиперссылки,,
		?(КоличествоКПоступлению > 0, ЦветаСтиля.ГиперссылкаЦвет, ЦветаСтиля.НезаполненноеПолеТаблицы),, "КПоступлению");
	
КонецФункции

&НаСервере
Функция ГиперссылкаКОплатеПереводу(КоличествоКОплатеПереводу)
	
	ТекстГиперссылки = СтрШаблон(НСтр("ru = 'К оплате / переводу (%1)'"),
		?(КоличествоКОплатеПереводу > 1000, Строка(КоличествоКОплатеПереводу)+"+", КоличествоКОплатеПереводу));
	Возврат Новый ФорматированнаяСтрока(ТекстГиперссылки,,
		?(КоличествоКОплатеПереводу > 0, ЦветаСтиля.ГиперссылкаЦвет, ЦветаСтиля.НезаполненноеПолеТаблицы),, "КОплате");
	
КонецФункции

&НаКлиенте
Функция ПостфиксКомандыПоХозяйственнойОперации(ХозяйственнаяОперация)
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("ХозяйственнаяОперация",ХозяйственнаяОперация);
	
	НайденныеСтроки = ИменаХозяйственныхОперацийКомандСоздания.НайтиСтроки(ПараметрыПоиска);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		Возврат НайденныеСтроки[0].ПостфиксКоманды;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Функция СсылкаНаЭлементСпискаПоШтрихкоду(Штрихкод)
	
	Менеджеры = Новый Массив();
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ПоступлениеБезналичныхДенежныхСредств.ПустаяСсылка"));
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.СписаниеБезналичныхДенежныхСредств.ПустаяСсылка"));
	Возврат ШтрихкодированиеПечатныхФормКлиент.ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(Штрихкод, Менеджеры);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьШтрихкоды(Знач Оповещение, Данные)
	
	МассивСсылок = СсылкаНаЭлементСпискаПоШтрихкоду(Данные.Штрихкод);
	Если МассивСсылок.Количество() > 0 Тогда
		Ссылка = МассивСсылок[0];
		Элементы.СписокПлатежей.ТекущаяСтрока = Ссылка;
		ПоказатьЗначение(Новый ОписаниеОповещения("ОбработатьШтрихкодыЗавершение", ЭтотОбъект, Новый Структура("Данные, Оповещение", Данные, Оповещение)), Ссылка);
		Возврат;
	Иначе
		ШтрихкодированиеПечатныхФормКлиент.ОбъектНеНайден(Данные.Штрихкод);
	КонецЕсли;
	
	ОбработатьШтрихкодыФрагмент(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкодыЗавершение(ДополнительныеПараметры) Экспорт
	
	Данные = ДополнительныеПараметры.Данные;
	Оповещение = ДополнительныеПараметры.Оповещение;
	
	ОбработатьШтрихкодыФрагмент(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкодыФрагмент(Знач Оповещение)
	
	ВыполнитьОбработкуОповещения(Оповещение);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ЕстьДоступКПоступлению()
	
	Возврат ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ГрафикПлатежей);
	
КонецФункции

&НаСервере
Функция ЕстьДоступКОплате()

	Если ИспользоватьЗаявкиНаРасходованиеДенежныхСредств Тогда
		Возврат ПравоДоступа("Чтение", Метаданные.Справочники.ПриоритетыОплаты)
				И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ГрафикПлатежей)
				И ПравоДоступа("Чтение", Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств)
				И ПравоДоступа("Чтение", Метаданные.Документы.ЗаявкаНаКомандировку)
				И ПравоДоступа("Чтение", Метаданные.Документы.РаспоряжениеНаПеремещениеДенежныхСредств);
	Иначе
		Возврат ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ГрафикПлатежей);
	КонецЕсли;

КонецФункции

&НаСервере
Функция ЕстьДоступКЗачислениюДС()

	Возврат ПравоДоступа("Чтение", Метаданные.Документы.ПодтверждениеЗачисленияЗарплаты);

КонецФункции

&НаСервере
Процедура СохранитьРабочиеЗначенияПолейФормы(СохранитьНеопределено = Ложь)
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ТекущаяОрганизация", "", ?(СохранитьНеопределено, Неопределено, Организация));
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ТекущийБанковскийСчет", "", ?(СохранитьНеопределено, Неопределено, БанковскийСчетОтбор));
	
КонецПроцедуры

&НаСервере
Процедура НастроитьКнопкиУправленияДокументами(ТипыДокументов)
	
	ПравоДоступаИзменение = Ложь;
	
	Для Каждого ИмяТипа Из ТипыДокументов Цикл
		Если ПравоДоступа("Изменение", ОбщегоНазначенияУТ.МетаданныеОбъектаПоПолномуИмени(ИмяТипа)) Тогда
			ПравоДоступаИзменение = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	КнопкиУправленияДокументами = Новый Массив;
	КнопкиУправленияДокументами.Добавить("СписокСкопировать");
	КнопкиУправленияДокументами.Добавить("СписокПлатежейКонтекстноеМенюСкопировать");
	КнопкиУправленияДокументами.Добавить("СписокИзменить");
	КнопкиУправленияДокументами.Добавить("СписокПлатежейКонтекстноеМенюИзменить");
	КнопкиУправленияДокументами.Добавить("СписокПлатежейПровести");
	КнопкиУправленияДокументами.Добавить("СписокПлатежейКонтекстноеМенюПровести");
	КнопкиУправленияДокументами.Добавить("СписокПлатежейОтменаПроведения");
	КнопкиУправленияДокументами.Добавить("СписокПлатежейКонтекстноеМенюОтменаПроведения");
	КнопкиУправленияДокументами.Добавить("СписокУстановитьПометкуУдаления");
	КнопкиУправленияДокументами.Добавить("СписокПлатежейКонтекстноеМенюУстановитьПометкуУдаления");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Элементы,
		КнопкиУправленияДокументами,
		"Видимость",
		ПравоДоступаИзменение);

КонецПроцедуры

#Область НастройкиДинамическихСписков

&НаСервере
Процедура ИнициироватьНастройкиДинамическихСписков()
	
	ПараметрыСписковДокументов = Новый Массив;
	
	СтруктураПараметровСписка = РаботаСЖурналамиДокументов.СтруктураФормированияНаФормеГруппыПользовательскихНастроекДинамическогоСписка();
	СтруктураПараметровСписка.ИмяСписка = "СписокПлатежей";
	СтруктураПараметровСписка.ГруппаРазмещенияНастройки = Элементы.Шапка;
	СтруктураПараметровСписка.ИмяРеквизитаРежимАвтообновления = "СписокДокументовРежимАвтообновления";
	СтруктураПараметровСписка.ИмяКомандыОбновленияСписка = Команды.СписокДокументовОбновить.Имя;
	ПараметрыСписковДокументов.Добавить(СтруктураПараметровСписка);
	
	РаботаСЖурналамиДокументов.ИнициироватьНастройкиДинамическихСписков(ЭтотОбъект, ПараметрыСписковДокументов);

КонецПроцедуры

&НаКлиенте
Процедура ОтображениеГруппыПользовательскихОтборовИНастроек(ИмяСписка)
	
	ДлительноеОбновление = РаботаСЖурналамиДокументовКлиент.ВремяОбновленияСпискаПревышаетДопутимое(ЭтотОбъект,
		ИмяСписка);
		
	Если ДлительноеОбновление Тогда
		РаботаСЖурналамиДокументовКлиент.УстановитьЗначениеНастройкиСпискаДокументов(ЭтотОбъект, ИмяСписка,
			"ПровереныНастройкиКомпоновкиДанных", Истина);
		СтруктураНастроекКомпоновкиДанных = ПолучитьИсполняемыеНастройкиКомпоновкиДанных(ИмяСписка);
		РаботаСЖурналамиДокументовКлиент.УстановитьЗначениеНастройкиСпискаДокументов(ЭтотОбъект, ИмяСписка,
			"НастройкиКомпоновкиДанных", СтруктураНастроекКомпоновкиДанных.НастройкиКомпоновкиДанных);
		РаботаСЖурналамиДокументовКлиент.УстановитьЗначениеНастройкиСпискаДокументов(ЭтотОбъект, ИмяСписка,
			"СтруктураПользовательскихНастроек", СтруктураНастроекКомпоновкиДанных.СтруктураПользовательскихНастроек);
	Иначе
		РаботаСЖурналамиДокументовКлиент.УстановитьЗначениеНастройкиСпискаДокументов(ЭтотОбъект, ИмяСписка,
			"ПровереныНастройкиКомпоновкиДанных", Ложь);
		РаботаСЖурналамиДокументовКлиент.УстановитьЗначениеНастройкиСпискаДокументов(ЭтотОбъект, ИмяСписка,
			"НастройкиКомпоновкиДанных", Новый НастройкиКомпоновкиДанных);
		РаботаСЖурналамиДокументовКлиент.УстановитьЗначениеНастройкиСпискаДокументов(ЭтотОбъект, ИмяСписка,
			"СтруктураПользовательскихНастроек", Новый Структура);
	КонецЕсли;

	РаботаСЖурналамиДокументовКлиент.ДокументыОтображениеГруппыПользовательскихОтборовИНастроек(ЭтотОбъект, ИмяСписка);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИсполняемыеНастройкиКомпоновкиДанных(ИмяСписка)
	
	ИмяЭлемента = РаботаСЖурналамиДокументов.ЗначениеНастройкиСпискаДокументов(ЭтотОбъект, ИмяСписка,
		"ИмяЭлементаСписка");
	ЭлементФормыСписок = Элементы[ИмяЭлемента];
	НастройкиКомпоновкиДанных = ЭлементФормыСписок.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();

	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("НастройкиКомпоновкиДанных", НастройкиКомпоновкиДанных);

	СписокПолейСоставногоТипа = РаботаСЖурналамиДокументов.ЗначениеНастройкиСпискаДокументов(ЭтотОбъект,
		ИмяСписка, "СписокПолейСоставногоТипа");

	СтруктураПользовательскихНастроек = РаботаСЖурналамиДокументов.ПроверитьПользовательскиеНастройкиДинамическогоСписка(
		НастройкиКомпоновкиДанных, СписокПолейСоставногоТипа);

	СтруктураВозврата.Вставить("СтруктураПользовательскихНастроек", СтруктураПользовательскихНастроек);
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиенте
Процедура УстановитьПараметрыОбновленияСписковДокументов(ДанныеУстарели, ДлительностьОбновления = Неопределено)
	
	ИмяНастройки = "СписокДокументовКэшНастроек";
	ИмяСписка = "";
	Для Каждого НастройкаСписокДокументов Из ЭтотОбъект[ИмяНастройки] Цикл
		ИмяСписка = НастройкаСписокДокументов.Ключ;
		РаботаСЖурналамиДокументовКлиент.УстановитьПараметрыОбновленияСпискаДокументов(ЭтотОбъект, ИмяСписка, ДанныеУстарели,
			ДлительностьОбновления);
		ОтображениеГруппыПользовательскихОтборовИНастроек(ИмяСписка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеСпискаДокументовСЗамеромВремени(ИмяСписка, УчитыватьПараметрАвтообновления = Ложь)

	Если Не УчитыватьПараметрАвтообновления Тогда

		ТребуетсяОбновлениеСписка = Истина;

	Иначе

		ТребуетсяОбновлениеСписка = РаботаСЖурналамиДокументовКлиент.ЗначениеНастройкиАвтообновленияСпискаДокументов(
			ЭтотОбъект, ИмяСписка);

		Если Не ТребуетсяОбновлениеСписка Тогда
			РаботаСЖурналамиДокументовКлиент.УстановитьПризнакОтображенияНеактуальныхДанныхВСписке(ЭтотОбъект, ИмяСписка);
		КонецЕсли;

	КонецЕсли;

	Если ТребуетсяОбновлениеСписка Тогда

		РаботаСЖурналамиДокументовКлиент.ОбновитьДанныеСпискаДокументовСЗамеромВремени(ЭтотОбъект, ИмяСписка);
		ОтображениеГруппыПользовательскихОтборовИНастроек(ИмяСписка);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокДокументовСобытиеОбработкаОповещения(ИмяСписка, Параметр = Неопределено)
	
	РаботаСЖурналамиДокументовКлиент.ОбновитьСписокДокументовСобытиеОбработкаОповещения(ЭтотОбъект, ИмяСписка, Параметр);
	ОтображениеГруппыПользовательскихОтборовИНастроек(ИмяСписка);

КонецПроцедуры

// Обработка события элемента формы.
// 
// Параметры:
//  Элемент - ПолеФормы
//@skip-check module-unused-method
&НаКлиенте
Процедура СписокДокументовОбработкаСобытияЭлементаФормы(Элемент)

	ДействиеСписка = РаботаСЖурналамиДокументовКлиент.ИмяСпискаДокументовПоИмениЭлементаФормы(ЭтотОбъект, Элемент.Имя);
	
	Если ДействиеСписка.ИмяСписка = "" Тогда
		Возврат;
	КонецЕсли;
	
	ИмяСписка = ДействиеСписка.ИмяСписка;
	Действие = ДействиеСписка.Действие;
	
	Если Действие = "Отборы" Или Действие = "Порядок" Или Действие = "УсловноеОформление" Тогда
		РаботаСЖурналамиДокументовКлиент.УстановитьЗначениеНастройкиСпискаДокументов(ЭтотОбъект, ИмяСписка,
			"ПровереныНастройкиКомпоновкиДанных", Истина);
		СтруктураНастроекКомпоновкиДанных = ПолучитьИсполняемыеНастройкиКомпоновкиДанных(ИмяСписка);
		РаботаСЖурналамиДокументовКлиент.УстановитьЗначениеНастройкиСпискаДокументов(ЭтотОбъект, ИмяСписка,
			"НастройкиКомпоновкиДанных", СтруктураНастроекКомпоновкиДанных.НастройкиКомпоновкиДанных);
		РаботаСЖурналамиДокументовКлиент.УстановитьЗначениеНастройкиСпискаДокументов(ЭтотОбъект, ИмяСписка,
			"СтруктураПользовательскихНастроек", СтруктураНастроекКомпоновкиДанных.СтруктураПользовательскихНастроек);
	КонецЕсли;
	
	Если Действие = "Отборы" Тогда
		РаботаСЖурналамиДокументовКлиент.ИсправитьПользовательскиеОтборыВСпискеДокументов(ЭтотОбъект, ИмяСписка);
	ИначеЕсли Действие = "Порядок" Тогда
		РаботаСЖурналамиДокументовКлиент.ИсправитьНастройкиСортировкиВСпискеДокументов(ЭтотОбъект, ИмяСписка);
	ИначеЕсли Действие = "УсловноеОформление" Тогда
		РаботаСЖурналамиДокументовКлиент.ИсправитьНастройкиУсловногоОформленияВСпискеДокументов(ЭтотОбъект, ИмяСписка);
	ИначеЕсли Действие = "Обновление" Тогда
		ОбновитьДанныеСпискаДокументовСЗамеромВремени(ИмяСписка);
	ИначеЕсли Действие = "УскорениеОбновленияСписка" Тогда
		РаботаСЖурналамиДокументовКлиент.СохранитьНастройкуПроизводительныйРежимОбновленияСписка(ЭтотОбъект, ИмяСписка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

//++ Локализация
#Область Локализация

#Область Локализация_ПодключаемыеОбработчикиСобытийФормы

&НаСервере
Процедура Подключаемый_ПриСозданииНаСервереЛокализация(Отказ, СтандартнаяОбработка)
	
	ПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	
	ИнициализироватьРеквизитыЛокализация();
	ЗаполнитьКомандыСозданияДокументовЛокализация();
	УстановитьВидимостьЛокализация();
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереСписокДокументов(СписокПлатежей);
	
	Если Не ПроверкаКонтрагентовВызовСервера.ИспользованиеПроверкиВозможно() Тогда
		Элементы.ЕстьОшибкиПроверкиКонтрагентов.Видимость = Ложь;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// ЭлектронноеВзаимодействие.ОбменСБанками
	ПараметрыСозданияФормыСпискаСП = ОбменСБанкамиКлиентСервер.ПараметрыСозданияФормыСписка();
	ПараметрыСозданияФормыСпискаСП.ДинамическийСписок.Изменить = Ложь;	
	ПараметрыСозданияФормыСпискаСП.ПерепискаСБанками.ДобавитьСсылку = Ложь;
	ПараметрыСозданияФормыСпискаСП.Реклама.Добавить = Ложь;
	ПараметрыСозданияФормыСпискаСП.СписокДокументов.МестоРасположения = Элементы.СписокПлатежейДата.Имя;
	ПараметрыСозданияФормыСпискаСП.СписокДокументов.ИмяЭлемента = "СписокПлатежей";
	ПараметрыСозданияФормыСпискаСП.СписокДокументов.ИмяРеквизита = "СписокПлатежей";
	ПараметрыСозданияФормыСпискаСП.ГруппаКоманд.Родитель = Элементы.СписокПлатежей.КоманднаяПанель;
	ПараметрыСозданияФормыСпискаСП.ГруппаКоманд.МестоРасположения = Элементы.СписокКомпоновщикНастроекПользовательскиеНастройки.Имя;
	ОбменСБанками.ПриСозданииФормыСпискаНаСервере(ЭтотОбъект, ПараметрыСозданияФормыСпискаСП);
	// Конец ЭлектронноеВзаимодействие.ОбменСБанками
		
	Если ИспользоватьВалютныеПлатежи Тогда
		Если ЕстьДоступВалютныеПлатежи() Тогда
			КОформлениюСсылки.Добавить("ВалютныйКонтроль");
		Конецесли;
	КонецЕсли;
	КОформлениюСсылки.Добавить("ПерепискаСБанками");
	ОбновитьГиперссылкиКОформлениюЛокализация();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаОповещенияЛокализация(ИмяСобытия, Параметр, Источник)
	
	ОбработкаОповещения(ИмяСобытия, Параметр, Источник);
	
	// ЭлектронноеВзаимодействие.ОбменСБанками
	ПараметрыСозданияФормыСпискаСП = ОбменСБанкамиКлиентСервер.ПараметрыСозданияФормыСписка();
	ПараметрыСозданияФормыСпискаСП.СписокДокументов.ИмяЭлемента = "СписокПлатежей";
	
	ОбменСБанкамиКлиент.ОбработатьОповещениеФормыСписка(ЭтотОбъект, ИмяСобытия, Параметр, Источник, ПараметрыСозданияФормыСпискаСП);
	// Конец ЭлектронноеВзаимодействие.ОбменСБанками
	
	Если ИмяСобытия = "Запись_НаборКонстант" Тогда
		ЗаполнитьКомандыСозданияДокументовЛокализация();
	КонецЕсли;
	
	Если ИмяСобытия = "ОтправленоDirectBank" Тогда
		ОбработатьЗавершениеВыгрузкиПрямойОбмен(Параметр);
	КонецЕсли;
	
	Если ИмяСобытия = "ОбновитьСостояниеОбменСБанками" Тогда
		ОбновитьИтоги();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Локализация_ПодключаемыеОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура Подключаемый_КОформлениюОбработкаНавигационнойСсылкиЛокализация(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	КОформлениюОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
	ИмяФормыКОформлению = "";
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ВалютныйКонтроль" Тогда
		ИмяФормыКОформлению = "Обработка.ЖурналДокументовБезналичныеПлатежи.Форма.ВалютныйКонтроль";
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПерепискаСБанками" Тогда
		ИмяФормыКОформлению = "Документ.ПисьмоОбменСБанками.ФормаСписка";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяФормыКОформлению) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		СтруктураБыстрогоОтбора = Новый Структура;
		СтруктураБыстрогоОтбора.Вставить("Организация", Организация);
		СтруктураБыстрогоОтбора.Вставить("БанковскийСчетОтбор", БанковскийСчетОтбор);
		СтруктураБыстрогоОтбора.Вставить("КонтрагентПредставление", КонтрагентПредставление);
		ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
		
		ОткрытьФорму(ИмяФормыКОформлению, ПараметрыФормы, ЭтотОбъект, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовСпискаПлатежей

// Обработчик выбора в расшифровке
//
// Параметры:
//    Элемент - ПолеФормы - Поле таблицы
//    ВыбраннаяСтрока - Число - Индекс строки
//    Поле - ПолеФормы - Активная колонка
//    СтандартнаяОбработка - Булево - Признак стандартной обработки
&НаКлиенте
Процедура Подключаемый_СписокПлатежейВыборЛокализация(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	МассивСсылок = ПроверитьПолучитьВыделенныеВСпискеСсылки(Элемент, ВыбраннаяСтрока);
	// ЭлектронноеВзаимодействие.ОбменСБанками
	ОбменСБанкамиКлиент.ПриВыбореСтрокиИзСпискаДокументов(Элемент, МассивСсылок[0], Поле, СтандартнаяОбработка);
	// Конец ЭлектронноеВзаимодействие.ОбменСБанками

	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияУТКлиент.ИзменитьЭлемент(Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой
&НаКлиенте
Процедура ЗагрузитьОплатыИзЯндексКассыЛокализация(Команда)
	
	ОповещениеПолученияОперацийПоЯндексКассе = Новый ОписаниеОповещения("ОбработкаПолученияОперацийПоЯндексКассеЗавершение",
		ЭтотОбъект);
		
	ПараметрыЗагрузки = Новый Структура;
	ПараметрыЗагрузки.Вставить("Период", Неопределено);
	ПараметрыЗагрузки.Вставить("Организация", Неопределено);
	ПараметрыЗагрузки.Вставить("СДоговором", Ложь);
		
	ИнтеграцияСЯндексКассойУТКлиент.НачатьЗагрузкуОперацийПоЯндексКассе(ПараметрыЗагрузки, ОповещениеПолученияОперацийПоЯндексКассе);
	
КонецПроцедуры
// Конец ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой

&НаКлиенте
Процедура ПисьмаВБанкЛокализация(Команда)
	
	ОткрытьФорму("Документ.ПисьмоОбменСБанками.ФормаСписка",, ЭтотОбъект);
	
КонецПроцедуры

// ЭлектронноеВзаимодействие.ОбменСБанками

&НаКлиенте
Процедура Подключаемый_ВыполнитьСинхронизациюДиректБанк(Команда)
	
	ВыполнитьПроверкуПередСинхронизациейДиректБанк();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьСобытиеДиректБанк(
	Параметр1 = Неопределено,
	Параметр2 = Неопределено,
	Параметр3 = Неопределено)
	
	ОбменСБанкамиКлиент.ОбработатьСобытиеНаФормеСписка(Параметр1, Параметр2, Параметр3)
	
КонецПроцедуры

// Конец ЭлектронноеВзаимодействие.ОбменСБанками

#КонецОбласти

#Область ЛокализацияСлужебные

&НаСервере
Процедура ИнициализироватьРеквизитыЛокализация()
	
	ИспользоватьПрямойОбменСБанком = ПолучитьФункциональнуюОпцию("ИспользоватьОбменСБанками");
	ИспользоватьВалютныеПлатежи    = ПолучитьФункциональнуюОпцию("ИспользоватьВалютныеПлатежи");
	
	СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	СвойстваСписка.ТекстЗапроса = ТекстЗапросаСписокПлатежей();
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.СписокПлатежей, СвойстваСписка);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКомандыСозданияДокументовЛокализация()
	
	ИспользоватьИмпортныеЗакупки                        = ПолучитьФункциональнуюОпцию("ИспользоватьИмпортныеЗакупки");
	
	ИспользоватьЗаймыСотрудникам                        = Не ПолучитьФункциональнуюОпцию("УправлениеТорговлей");
	
	ХозОперацииПоФО = Новый Соответствие;
	ХозОперацииПоФО.Вставить(Перечисления.ХозяйственныеОперации.ПеречислениеТаможне,       ИспользоватьИмпортныеЗакупки);
	ХозОперацииПоФО.Вставить(Перечисления.ХозяйственныеОперации.ВыдачаЗаймаСотруднику,     ИспользоватьЗаймыСотрудникам);
	ХозОперацииПоФО.Вставить(Перечисления.ХозяйственныеОперации.ПогашениеЗаймаСотрудником, ИспользоватьЗаймыСотрудникам);
	
	// Поступление
	ХозОперацииПоступления = НастройкиФормы.ХозОперацииПоступления;
	
	ГруппыОпераций = Новый Массив;
	
	Операции = Новый СписокЗначений;
	Если ПравоДоступа("Добавление", Метаданные.Документы.ПоступлениеБезналичныхДенежныхСредств) Тогда
		Операции.Добавить(Перечисления.ХозяйственныеОперации.ВозвратНеперечисленныхДС);
	КонецЕсли;
	ГруппаОпераций = Новый Структура("Операции, ИмяГруппы", Операции, "Возвраты");
	ГруппыОпераций.Добавить(ГруппаОпераций);
	
	Операции = Новый СписокЗначений;
	Если ПравоДоступа("Добавление", Метаданные.Документы.ПоступлениеБезналичныхДенежныхСредств) Тогда
		Операции.Добавить(Перечисления.ХозяйственныеОперации.ПогашениеЗаймаСотрудником, НСтр("ru = 'Погашение займа сотрудником'"));
	КонецЕсли;
	ГруппаОпераций = Новый Структура("Операции, ИмяГруппы", Операции, "КредитыДепозиты");
	ГруппыОпераций.Добавить(ГруппаОпераций);
	
	Для каждого ГруппаОпераций Из ГруппыОпераций Цикл
		
		ГруппаКоманд = Элементы["ГруппаСоздатьПоступление" + ГруппаОпераций.ИмяГруппы];
		
		Для каждого Операция Из ГруппаОпераций.Операции Цикл
			
			ОперацияВключена = Истина;
			ИспользованиеХО = ХозОперацииПоФО.Получить(Операция.Значение);
			Если ИспользованиеХО <> Неопределено Тогда
				ОперацияВключена = ИспользованиеХО;
			КонецЕсли;
			
			ИмяХозОперации = ОбщегоНазначения.ИмяЗначенияПеречисления(Операция.Значение);
			
			Если ОперацияВключена Тогда
				
				ХозОперацииПоступления.Вставить(ИмяХозОперации, Операция.Значение);
				Если Команды.Найти("СоздатьПоступление" + ИмяХозОперации) = Неопределено Тогда
					КомандаСоздатьДокумент = Команды.Добавить("СоздатьПоступление" + ИмяХозОперации);
					КомандаСоздатьДокумент.Действие = "СоздатьПоступление";
					КомандаСоздатьДокумент.Заголовок = ?(ЗначениеЗаполнено(Операция.Представление), Операция.Представление, Строка(Операция.Значение));
					ДобавитьХозОперациюВТаблицуСоздаваемыхКоманд(Операция.Значение, ИмяХозОперации);
				КонецЕсли;
				Если Элементы.Найти("СоздатьПоступление" + ИмяХозОперации) = Неопределено Тогда
					ЭлементСоздатьДокумент = Элементы.Вставить("СоздатьПоступление" + ИмяХозОперации, Тип("КнопкаФормы"), ГруппаКоманд);
					ЭлементСоздатьДокумент.ИмяКоманды = КомандаСоздатьДокумент.Имя;
				КонецЕсли;
			Иначе
				КомандаКУдалению = Команды.Найти("СоздатьПоступление" + ИмяХозОперации);
				Если КомандаКУдалению <> Неопределено Тогда
					Команды.Удалить(КомандаКУдалению);
				КонецЕсли;
				ЭлементКУдалению = Элементы.Найти("СоздатьПоступление" + ИмяХозОперации);
				Если ЭлементКУдалению <> Неопределено Тогда
					Элементы.Удалить(ЭлементКУдалению);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Списание
	ХозОперацииСписания = НастройкиФормы.ХозОперацииСписания;
	
	ГруппыОпераций = Новый Массив;
	
	Операции = Новый СписокЗначений;
	Если ПравоДоступа("Добавление", Метаданные.Документы.СписаниеБезналичныхДенежныхСредств) Тогда
		Операции.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеТаможне);
		Операции.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту);
	КонецЕсли;
	ГруппаОпераций = Новый Структура("Операции, ИмяГруппы", Операции, "Оплата");
	ГруппыОпераций.Добавить(ГруппаОпераций);
	
	Операции = Новый СписокЗначений;
	Если ПравоДоступа("Добавление", Метаданные.Документы.СписаниеБезналичныхДенежныхСредств) Тогда
		Операции.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаЗаймаСотруднику, НСтр("ru = 'Выдача займа сотруднику'"));
	КонецЕсли;
	ГруппаОпераций = Новый Структура("Операции, ИмяГруппы", Операции, "КредитыДепозиты");
	ГруппыОпераций.Добавить(ГруппаОпераций);
	
	Для каждого ГруппаОпераций Из ГруппыОпераций Цикл
		
		ГруппаКоманд = Элементы["ГруппаСоздатьСписание" + ГруппаОпераций.ИмяГруппы];
		
		Для каждого Операция Из ГруппаОпераций.Операции Цикл
			
			ОперацияВключена = Истина;
			ИспользованиеХО = ХозОперацииПоФО.Получить(Операция.Значение);
			Если ИспользованиеХО <> Неопределено Тогда
				ОперацияВключена = ИспользованиеХО;
			КонецЕсли;
			
			ИмяХозОперации = ОбщегоНазначения.ИмяЗначенияПеречисления(Операция.Значение);
			
			Если ОперацияВключена Тогда
				ХозОперацииСписания.Вставить(ИмяХозОперации, Операция.Значение);
				
				Если Команды.Найти("СоздатьСписание" + ИмяХозОперации) = Неопределено Тогда
					КомандаСоздатьДокумент = Команды.Добавить("СоздатьСписание" + ИмяХозОперации);
					КомандаСоздатьДокумент.Действие = "СоздатьСписание";
					КомандаСоздатьДокумент.Заголовок = ?(ЗначениеЗаполнено(Операция.Представление), Операция.Представление, Строка(Операция.Значение));
					ДобавитьХозОперациюВТаблицуСоздаваемыхКоманд(Операция.Значение, ИмяХозОперации);
				КонецЕсли;
				Если Элементы.Найти("СоздатьСписание" + ИмяХозОперации) = Неопределено Тогда
					ЭлементСоздатьДокумент = Элементы.Вставить("СоздатьСписание" + ИмяХозОперации, Тип("КнопкаФормы"), ГруппаКоманд);
					ЭлементСоздатьДокумент.ИмяКоманды = КомандаСоздатьДокумент.Имя;
				КонецЕсли;
			Иначе
				КомандаКУдалению = Команды.Найти("СоздатьСписание" + ИмяХозОперации);
				Если КомандаКУдалению <> Неопределено Тогда
					Команды.Удалить(КомандаКУдалению);
				КонецЕсли;
				ЭлементКУдалению = Элементы.Найти("СоздатьСписание" + ИмяХозОперации);
				Если ЭлементКУдалению <> Неопределено Тогда
					Элементы.Удалить(ЭлементКУдалению);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЛокализация()
	
	ВидимостьЭлементов = Новый Соответствие;
	
	// ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой
	ЕстьПравоЗагрузкиОплатИзЯндексКассы =
		(Пользователи.РолиДоступны("ВыполнениеОбменовОнлайнОплаты") ИЛИ Пользователи.ЭтоПолноправныйПользователь())
		И ПолучитьФункциональнуюОпцию("ИспользоватьОнлайнОплаты");
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ЗагрузитьОплатыИзЯндексКассы");
	ВидимостьЭлементов.Вставить(МассивЭлементов, ЕстьПравоЗагрузкиОплатИзЯндексКассы);
	// Конец ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой
	
	Для каждого ЭлементСоответствия Из ВидимостьЭлементов Цикл
		Для каждого ИмяЭлемента Из ЭлементСоответствия.Ключ Цикл
			Элементы[ИмяЭлемента].Видимость = ЭлементСоответствия.Значение;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой
&НаКлиенте
Процедура ОбработкаПолученияОперацийПоЯндексКассеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда  // отменено пользователем
		Возврат;
	КонецЕсли;
	
	Если Результат.Свойство("Сообщения") Тогда 
		Для Каждого Сообщение из Результат.Сообщения Цикл 
			Сообщение.Сообщить();
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда 
		Возврат;
	КонецЕсли;	
		
	ЗагруженныеОперации = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	СчетчикДокументов = 0;
	
	Если ЗагруженныеОперации <> Неопределено Тогда
		Для каждого ЭлементКоллекции Из ЗагруженныеОперации Цикл
			СчетчикДокументов = СчетчикДокументов + ЗагруженныеОперации[ЭлементКоллекции.Ключ];
		КонецЦикла;	
	КонецЕсли;
			
	ТекстСообщения = ?(СчетчикДокументов > 0, НСтр("ru = 'Операций по Яндекс.Кассе загружено: %1'")
		, НСтр("ru = 'Новых операций по Яндекс.Кассе не было'"));
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстСообщения, СчетчикДокументов);
	
	ПоказатьОповещениеПользователя(НСтр("ru = 'Загрузка завершена'"),
		"e1cib/list/Документ.ПоступлениеБезналичныхДенежныхСредств",
		ТекстСообщения);
	
	Оповестить("ЗавершенаЗагрузкаОперацииПоЯндексКассе");
	
	Если СчетчикДокументов > 0 Тогда 
		ОповеститьОбИзменении(Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств"));
	КонецЕсли;
		
КонецПроцедуры 
// Конец ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой

&НаСервереБезКонтекста
Функция ПараметрыБанковскогоСчета(БанковскийСчет)
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(БанковскийСчет, "Владелец, Банк");
	
КонецФункции

&НаСервере
Процедура ОбработатьЗавершениеВыгрузкиПрямойОбмен(Платежи)
	
	ДенежныеСредстваСервер.ЗаписатьДатуВыгрузкиПлатежей(Платежи);
	
КонецПроцедуры

&НаСервере
Функция ТекстЗапросаСписокПлатежей()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	РеестрДокументов.Ссылка КАК Ссылка,
	|	РеестрДокументов.ДатаДокументаИБ КАК Дата,
	|	РеестрДокументов.НомерДокументаИБ КАК Номер,
	|	РеестрДокументов.ПометкаУдаления КАК ПометкаУдаления,
	|	РеестрДокументов.Проведен КАК Проведен,
	|	РеестрДокументов.Организация КАК Организация,
	|	ВЫРАЗИТЬ(РеестрДокументов.МестоХранения.Ключ КАК Справочник.БанковскиеСчетаОрганизаций) КАК БанковскийСчет,
	|	РеестрДокументов.ТипСсылки КАК ТипСсылки,
	|	РеестрДокументов.ИдентификаторЗаписи КАК ИдентификаторЗаписи,
	|	ВЫБОР КОГДА РеестрДокументов.ТипСсылки = &ИдОбъектаПоступлениеБезналичныхДС ТОГДА
	|			ДанныеПоступленияБезналичныхДС.ТипПлатежногоДокумента
	|		КОГДА РеестрДокументов.ТипСсылки = &ИдОбъектаСписаниеБезналичныхДС ТОГДА
	|			ДанныеСписанияБезналичныхДС.ТипПлатежногоДокумента
	|	КОНЕЦ КАК ТипПлатежногоДокумента,
	|	
	|	РеестрДокументов.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА РеестрДокументов.Контрагент.Ключ ССЫЛКА Справочник.Организации
	|			ТОГДА ВЫРАЗИТЬ(РеестрДокументов.Контрагент.Ключ КАК Справочник.Организации)
	|		КОГДА РеестрДокументов.Контрагент.Ключ ССЫЛКА Справочник.Контрагенты
	|			ТОГДА ВЫРАЗИТЬ(РеестрДокументов.Контрагент.Ключ КАК Справочник.Контрагенты)
	|		КОГДА РеестрДокументов.Контрагент.Ключ ССЫЛКА Справочник.ФизическиеЛица
	|			ТОГДА ВЫРАЗИТЬ(РеестрДокументов.Контрагент.Ключ КАК Справочник.ФизическиеЛица)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Контрагент,
	|	РеестрДокументов.Контрагент КАК КонтрагентКлюч,
	|	РеестрДокументов.Контрагент.Наименование КАК КонтрагентПредставление,
	|	РеестрДокументов.ДатаПервичногоДокумента КАК ДатаВходящегоДокумента,
	|	РеестрДокументов.НомерПервичногоДокумента КАК НомерВходящегоДокумента,
	|	
	|	ВЫБОР РеестрДокументов.ТипСсылки
	|		КОГДА &ИдОбъектаПоступлениеБезналичныхДС ТОГДА
	|			РеестрДокументов.Сумма
	|		КОГДА &ИдОбъектаРКО ТОГДА
	|			РеестрДокументов.Сумма
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаПоступления,
	|	ВЫБОР РеестрДокументов.ТипСсылки
	|		КОГДА &ИдОбъектаСписаниеБезналичныхДС ТОГДА
	|			РеестрДокументов.Сумма
	|		КОГДА &ИдОбъектаПКО ТОГДА
	|			РеестрДокументов.Сумма
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаСписания,
	|	
	|	РеестрДокументов.Валюта КАК Валюта,
	|	РеестрДокументов.ДатаОтраженияВУчете <> ДАТАВРЕМЯ(1, 1, 1) КАК ПроведеноБанком,
	|	РеестрДокументов.ДатаОтраженияВУчете КАК ДатаПроведенияБанком,
	|	РеестрДокументов.Дополнительно КАК НазначениеПлатежа,
	|	РеестрДокументов.Комментарий КАК Комментарий,
	|	РеестрДокументов.Ответственный КАК Ответственный,
	|	РеестрДокументов.Автор КАК Автор,
	|	РеестрДокументов.СторноИсправление КАК СторноИсправление,
	|	ВЫБОР
	|		КОГДА НЕ РеестрДокументов.СторноИсправление
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ РеестрДокументов.СторнируемыйДокумент
	|	КОНЕЦ КАК СторнируемыйИсправляемыйДокумент,
	|	ТИПЗНАЧЕНИЯ(РеестрДокументов.Ссылка) КАК Тип,
	|	ВЫБОР
	|		КОГДА ДокументыСОшибкамиПроверкиКонтрагентов.Документ ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьОшибкиПроверкиКонтрагентов,
	|	СостоянияОбменСБанками.Состояние КАК СостояниеДиректБанк,
	|	СостоянияОбменСБанками.ПредставлениеСостояния КАК ПредставлениеСостоянияДиректБанк,
	|	ВЫБОР
	|		КОГДА СостоянияОбменСБанками.Состояние В (
	|			ЗНАЧЕНИЕ(Перечисление.СостоянияОбменСБанками.Аннулирован),
	|			ЗНАЧЕНИЕ(Перечисление.СостоянияОбменСБанками.Отклонен),
	|			ЗНАЧЕНИЕ(Перечисление.СостоянияОбменСБанками.ОшибкаПередачи)
	|		) ТОГДА 3
	|		КОГДА СостоянияОбменСБанками.Состояние В (
	|			ЗНАЧЕНИЕ(Перечисление.СостоянияОбменСБанками.НаПодписи),
	|			ЗНАЧЕНИЕ(Перечисление.СостоянияОбменСБанками.НеСформирован),
	|			ЗНАЧЕНИЕ(Перечисление.СостоянияОбменСБанками.ТребуетсяПодтверждение),
	|			ЗНАЧЕНИЕ(Перечисление.СостоянияОбменСБанками.ТребуетсяОтправка)
	|		) ТОГДА 1
	|		КОГДА СостоянияОбменСБанками.Состояние В (
	|			ЗНАЧЕНИЕ(Перечисление.СостоянияОбменСБанками.ОжидаетсяВыписка),
	|			ЗНАЧЕНИЕ(Перечисление.СостоянияОбменСБанками.ОжидаетсяИзвещениеОПолучении),
	|			ЗНАЧЕНИЕ(Перечисление.СостоянияОбменСБанками.ОжидаетсяИсполнение)
	|		) ТОГДА 2
	|		КОГДА СостоянияОбменСБанками.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОбменСБанками.ПлатежИсполнен)
	|			ТОГДА 0
	|		ИНАЧЕ 4
	|	КОНЕЦ КАК КартинкаДиректБанк,
	|	ВЫБОР
	|		КОГДА РеестрДокументов.Проведен
	|			ТОГДА 0
	|		КОГДА РеестрДокументов.ПометкаУдаления
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК НестандартнаяКартинка
	|ИЗ
	|	РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеБезналичныхДенежныхСредств КАК ДанныеПоступленияБезналичныхДС
	|		ПО ДанныеПоступленияБезналичныхДС.Ссылка = РеестрДокументов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеСписанияБезналичныхДС
	|		ПО ДанныеСписанияБезналичныхДС.Ссылка = РеестрДокументов.Ссылка
	|		
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыСОшибкамиПроверкиКонтрагентов КАК ДокументыСОшибкамиПроверкиКонтрагентов
	|		ПО РеестрДокументов.Ссылка = ДокументыСОшибкамиПроверкиКонтрагентов.Документ
	|			И (&ИспользованиеПроверкиВозможно)}
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОбменСБанками КАК СостоянияОбменСБанками
	|		ПО СостоянияОбменСБанками.СсылкаНаОбъект = РеестрДокументов.Ссылка}
	|		
	|ГДЕ
	|	РеестрДокументов.ТипСсылки В (
	|		&ИдОбъектаПоступлениеБезналичныхДС,
	|		&ИдОбъектаСписаниеБезналичныхДС,
	|		&ИдОбъектаПКО,
	|		&ИдОбъектаРКО)
	|	И ТИПЗНАЧЕНИЯ(РеестрДокументов.МестоХранения.Ключ) = ТИП(Справочник.БанковскиеСчетаОрганизаций)
	|	И (ВЫБОР
	|			КОГДА РеестрДокументов.ДатаОтраженияВУчете = ДАТАВРЕМЯ(1,1,1) 
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ РеестрДокументов.ДатаОтраженияВУчете МЕЖДУ &НачалоПериода И &КонецПериода
	|		КОНЕЦ)
	|	
	|{ГДЕ
	|	РеестрДокументов.Ссылка.* КАК Ссылка,
	|	ВЫРАЗИТЬ(РеестрДокументов.МестоХранения.Ключ КАК Справочник.БанковскиеСчетаОрганизаций).* КАК БанковскийСчет,
	|	РеестрДокументов.Организация.* КАК Организация,
	|	РеестрДокументов.ДатаДокументаИБ КАК Дата,
	|	РеестрДокументов.НомерДокументаИБ КАК Номер,
	|	РеестрДокументов.ТипСсылки КАК ТипСсылки,
	|	РеестрДокументов.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	РеестрДокументов.Партнер.* КАК Партнер,
	|	(ВЫБОР
	|		КОГДА РеестрДокументов.Контрагент.Ключ ССЫЛКА Справочник.Организации
	|			ТОГДА ВЫРАЗИТЬ(РеестрДокументов.Контрагент.Ключ КАК Справочник.Организации)
	|		КОГДА РеестрДокументов.Контрагент.Ключ ССЫЛКА Справочник.Контрагенты
	|			ТОГДА ВЫРАЗИТЬ(РеестрДокументов.Контрагент.Ключ КАК Справочник.Контрагенты)
	|		КОГДА РеестрДокументов.Контрагент.Ключ ССЫЛКА Справочник.ФизическиеЛица
	|			ТОГДА ВЫРАЗИТЬ(РеестрДокументов.Контрагент.Ключ КАК Справочник.ФизическиеЛица)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ).* КАК Контрагент,
	|	РеестрДокументов.Подразделение.* КАК Подразделение,
	|	РеестрДокументов.Ответственный.* КАК Ответственный,
	|	РеестрДокументов.Автор.* КАК Автор,
	|	РеестрДокументов.Дополнительно КАК НазначениеПлатежа,
	|	РеестрДокументов.Комментарий КАК Комментарий,
	|	РеестрДокументов.Проведен КАК Проведен,
	|	РеестрДокументов.ПометкаУдаления КАК ПометкаУдаления
	|}";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Процедура ОбновитьГиперссылкиКОформлениюЛокализация()
	
	Если ИспользоватьВалютныеПлатежи Тогда
		ЭлементСписка = КОформлениюСсылки.НайтиПоЗначению("ВалютныйКонтроль");
		Если ЭлементСписка <> Неопределено Тогда
			ЭлементСписка.Представление = Новый ФорматированнаяСтрока(
				НСтр("ru = 'Валютный контроль'"),, ЦветаСтиля.ГиперссылкаЦвет,, "ВалютныйКонтроль");
		КонецЕсли;
	КонецЕсли;
	
	// ЭлектронноеВзаимодействие.ОбменСБанками
	ЭлементСписка = КОформлениюСсылки.НайтиПоЗначению("ПерепискаСБанками");
	Если ЭлементСписка <> Неопределено Тогда
		ЗаголовокПерепискаСБанками = ОбменСБанкамиКлиентСервер.ТекстСсылкиПерепискаСБанками();
		Если ЗначениеЗаполнено(ЗаголовокПерепискаСБанками) Тогда
			Если ЗаголовокПерепискаСБанками = НСтр("ru = 'Переписка с банками'") Тогда
				ЭлементСписка.Представление = Новый ФорматированнаяСтрока(
					ЗаголовокПерепискаСБанками + " (0)",, ЦветаСтиля.НезаполненноеПолеТаблицы,, "ПерепискаСБанками");
			Иначе
				ЭлементСписка.Представление = Новый ФорматированнаяСтрока(
					ЗаголовокПерепискаСБанками,, ЦветаСтиля.ГиперссылкаЦвет,, "ПерепискаСБанками");
			КонецЕсли;
		Иначе
			ЭлементСписка.Представление = "";
		КонецЕсли;
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.ОбменСБанками
	
	СформироватьГиперссылкиКОформлению();
	
КонецПроцедуры

&НаСервере
Функция ЕстьДоступВалютныеПлатежи()

	Возврат ПравоДоступа("Чтение", Метаданные.Документы.СправкаОПодтверждающихДокументах)
			И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.СостоянияОбменСБанками);

КонецФункции

&НаКлиенте
Процедура ВыполнитьПроверкуПередСинхронизациейДиректБанк()

	МассивСчетов = Новый Массив;
	
	ПолучитьСписокСчетовСЗапретомИзмененияВЗагружаемомПериоде(МассивСчетов);
	
	Если МассивСчетов.Количество() <> 0 Тогда
		
		Если МассивСчетов.Количество() = 1 Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Установлен запрет изменения данных в загружаемом периоде по счету
				|%1'"), СтрСоединить(МассивСчетов, Символы.ПС));
		Иначе
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Установлен запрет изменения данных в загружаемом периоде по счетам
				|%1'"), СтрСоединить(МассивСчетов, Символы.ПС));
		КонецЕсли;
		
		ТекстВопроса = СтрШаблон(НСтр("ru = '%1.
				|Платежи в закрытом периоде не будут загружены.
				|Продолжить загрузку?'"), ТекстСообщения);
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПроверкаПередСинхронизациейДиректБанкЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОповещениеОЗавершении, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
	Иначе
		ВыполнитьСинхронизациюДиректБанкПослеПроверки();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПолучитьСписокСчетовСЗапретомИзмененияВЗагружаемомПериоде(СписокСчетов)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПараметрыОбменСБанками.ПоследняяДатаПолученияЭД КАК Дата,
	|	БанковскиеСчета.Ссылка КАК Объект,
	|	НастройкиОбменСБанками.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НастройкиОбменСБанками КАК НастройкиОбменСБанками
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыОбменСБанками КАК ПараметрыОбменСБанками
	|		ПО НастройкиОбменСБанками.Ссылка = ПараметрыОбменСБанками.НастройкаОбмена
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчета
	|		ПО НастройкиОбменСБанками.Банк = БанковскиеСчета.Банк
	|			И НастройкиОбменСБанками.Организация = БанковскиеСчета.Владелец
	|			И (БанковскиеСчета.ИспользоватьПрямойОбменСБанком)
	|			И (НЕ БанковскиеСчета.Закрыт)
	|ГДЕ
	|	НЕ НастройкиОбменСБанками.Недействительна
	|	И НЕ НастройкиОбменСБанками.ПометкаУдаления
	|	И (НастройкиОбменСБанками.Организация = &Организация
	|			ИЛИ &Организация = НЕОПРЕДЕЛЕНО)
	|	И (НастройкиОбменСБанками.Банк = &Банк
	|			ИЛИ &Банк = НЕОПРЕДЕЛЕНО)
	|	И (БанковскиеСчета.Ссылка = &БанковскийСчет
	|			ИЛИ &БанковскийСчет = НЕОПРЕДЕЛЕНО)";
	
	Владелец = ?(ЗначениеЗаполнено(Организация), Организация, Неопределено);
	Счет = ?(ЗначениеЗаполнено(БанковскийСчетОтбор), БанковскийСчетОтбор, Неопределено);
	
	Банк = Неопределено;
	
	Если ЗначениеЗаполнено(БанковскийСчетОтбор) Тогда
		
		ДанныеСчета = ПараметрыБанковскогоСчета(БанковскийСчетОтбор);
		Банк = ДанныеСчета.Банк;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация", Владелец);
	Запрос.УстановитьПараметр("Банк", Банк);
	Запрос.УстановитьПараметр("БанковскийСчет", Счет);
	
	ТаблицаСчетов = Запрос.Выполнить().Выгрузить();
	
	СписокСчетов = КлиентБанкСервер.ЗаполнитьСписокСчетовСЗапретомИзмененияВЗагружаемомПериоде(ТаблицаСчетов);

КонецПроцедуры

&НаКлиенте
Процедура ПроверкаПередСинхронизациейДиректБанкЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		ВыполнитьСинхронизациюДиректБанкПослеПроверки();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСинхронизациюДиректБанкПослеПроверки()

	Если ЗначениеЗаполнено(БанковскийСчетОтбор) Тогда
		ПараметрыБанковскогоСчета = ПараметрыБанковскогоСчета(БанковскийСчетОтбор);
		ОбменСБанкамиКлиент.СинхронизироватьСБанком(ПараметрыБанковскогоСчета.Владелец, ПараметрыБанковскогоСчета.Банк);
	Иначе
		ОбменСБанкамиКлиент.СинхронизироватьСБанком();
	КонецЕсли;
	
	Оповестить("Загрузка_ОбменСБанками");

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Инициализация

#Если НаСервере Тогда

Если Не ПодключеныОбработчикиЛокализация И ПолучитьФункциональнуюОпцию("ПоддержкаПлатежейРФ") Тогда
	
	ПодключеныОбработчикиЛокализация = Истина;
	
	ПодключаемыеОбработчикиСобытийФормы = Новый Массив;
	ПодключаемыеОбработчикиСобытийФормы.Добавить("ПриСозданииНаСервере");
	ПодключаемыеОбработчикиСобытийФормы.Добавить("ОбработкаОповещения");
	
	Для каждого Обработчик Из ПодключаемыеОбработчикиСобытийФормы Цикл
		УстановитьДействие(Обработчик, "Подключаемый_" + Обработчик + "Локализация");
	КонецЦикла;
	
	ПодключаемыеОбработчикиСобытийЭлементов = Новый Соответствие; // Ключ - Элемент, Значение - Событие
	ПодключаемыеОбработчикиСобытийЭлементов.Вставить("СписокПлатежей",        "Выбор");
	ПодключаемыеОбработчикиСобытийЭлементов.Вставить("КОформлению",           "ОбработкаНавигационнойСсылки");
	
	Для каждого Обработчик Из ПодключаемыеОбработчикиСобытийЭлементов Цикл
		Элементы[Обработчик.Ключ].УстановитьДействие(
			Обработчик.Значение, "Подключаемый_" + Обработчик.Ключ + Обработчик.Значение + "Локализация");
	КонецЦикла;
	
КонецЕсли;

#КонецЕсли

#КонецОбласти
//-- Локализация
