
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоясняющийТекст();
	
	ЗаполнитьСписокОрганизаций();
	
	ДлинаПоляПродукция = 0;
	Реквизиты = ПолучитьРеквизиты("СписокЗаказов");
	Для Каждого Реквизит из Реквизиты Цикл
		Если Реквизит.Имя = "Продукция" Тогда
			ДлинаПоляПродукция = Реквизит.ТипЗначения.КвалификаторыСтроки.Длина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ДлинаПоляПродукция = 0 Тогда
		ДлинаПоляПродукция = 100;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ОбновитьСписокЗаказов();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	РезультатЗагрузки = ЗагрузитьЗаказыИзСУЗ();
	
	Если РезультатЗагрузки.ТребуетсяОбновлениеКлючаСессииСУЗ Тогда
		ЗапроситьКлючСессииНачало("ЗагрузкаЗаказов");
	ИначеЕсли РезультатЗагрузки.ТребуетсяОбновлениеКлючаСессииИСМП Тогда
		ЗапроситьКлючСессииНачало(
			"ЗагрузкаЗаказов",
			ПредопределенноеЗначение("Перечисление.НазначениеСообщенийИСМП.ИСМП"));
	ИначеЕсли ЗначениеЗаполнено(РезультатЗагрузки.ТекстОшибки) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатЗагрузки.ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательОтбораПриИзменении(Элемент)
	
	Если ПереключательОтбора = 0 Тогда
		Элементы.СписокЗаказов.ОтборСтрок = Неопределено;
	Иначе
		Элементы.СписокЗаказов.ОтборСтрок = Новый ФиксированнаяСтруктура("Документ",
			ПредопределенноеЗначение("Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.ПустаяСсылка"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗаказовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтрокаСпискаЗаказов = СписокЗаказов.НайтиПоИдентификатору(Элементы.СписокЗаказов.ТекущаяСтрока);
	
	Если Поле = Элементы.СписокЗаказовДокумент
		И ЗначениеЗаполнено(СтрокаСпискаЗаказов.Документ) Тогда
		ПоказатьЗначение(,СтрокаСпискаЗаказов.Документ);
	Иначе
		НачатьОткрытиеФормыЗаказаСУЗ(СтрокаСпискаЗаказов);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьСписок(Команда)
	
	ОбновитьСписокЗаказов();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьЗаказы(Команда)
	
	ОчиститьСообщения();
	
	РезультатЗакрытия = ЗакрытьЗаказыВСУЗ();
	Если ЗначениеЗаполнено(РезультатЗакрытия.ТекстОшибки) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатЗакрытия.ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсе(Команда)
	
	ИзменитьПометку(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьВсе(Команда)
	
	ИзменитьПометку(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.СписокЗаказовДокумент.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ПредопределенноеЗначение("Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.ПустаяСсылка");
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокЗаказовДокумент.Имя);
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<отсутствует>'"));
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ГруппаИЛИ = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.СписокЗаказовСтатус.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = ПредопределенноеЗначение(
		"Перечисление.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗПринятКПроизводству");
	
	ОтборЭлемента = ГруппаИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.СписокЗаказовВидПродукции.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПустаяСсылка");
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокЗаказов.Имя);
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "СписокЗаказов.ДатаЗаказа", Элементы.СписокЗаказовДатаЗаказа.Имя);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоясняющийТекст()
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
		НСтр("ru = 'Заказы, выделенные'"),,
		ЦветаСтиля.ТекстИнформационнойНадписиИС));
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
		НСтр("ru = ' серым цветом'"),,
		ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС));
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
		НСтр("ru = ', не подлежат закрытию. Заказ имеет ошибки в данных или не подходящий для закрытия статус.'"),,
		ЦветаСтиля.ТекстИнформационнойНадписиИС));
	
	ПоясняющийТекст = Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокОрганизаций()
	
	Элементы.Организация.СписокВыбора.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкиОбменаСУЗ.Организация КАК Организация,
	|	НастройкиОбменаСУЗ.Организация.Представление КАК ОрганизацияПредставление
	|ИЗ
	|	РегистрСведений.НастройкиОбменаСУЗ КАК НастройкиОбменаСУЗ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Элементы.Организация.СписокВыбора.Добавить(Выборка.Организация, Выборка.ОрганизацияПредставление);
	КонецЦикла;
	
	Элементы.Организация.СписокВыбора.СортироватьПоПредставлению();
	
	Если Элементы.Организация.СписокВыбора.Количество() = 1 Тогда
		Организация = Элементы.Организация.СписокВыбора[0].Значение;
		Элементы.Организация.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПометку(Пометка)
	
	ВыделенныеСтроки = Элементы.СписокЗаказов.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		СтрокиДляОбработки = ВыделенныеСтроки;
		ПолучатьДанныеСтроки = Истина;
	Иначе
		СтрокиДляОбработки = СписокЗаказов;
		ПолучатьДанныеСтроки = Ложь;
	КонецЕсли;
	
	Для Каждого Строка Из СтрокиДляОбработки Цикл
		Если ПолучатьДанныеСтроки Тогда
			Строка = СписокЗаказов.НайтиПоИдентификатору(Строка);
		КонецЕсли;
		
		Если Не Пометка
			Или ЗначениеЗаполнено(Строка.ВидПродукции)
			И Строка.Статус = ПредопределенноеЗначение(
			"Перечисление.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗПринятКПроизводству") Тогда
			Строка.Пометка = Пометка;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#Область НастройкиОбмена

&НаСервереБезКонтекста
Функция ТекущиеНастройкаОбменаСУЗ(Организация)
	
	ПараметрыОбмена = Новый Структура();
	ПараметрыОбмена.Вставить(
		"НастройкиОбменаСУЗ",
		ИнтеграцияИСМП.НастройкиОбменаСУЗ(Организация));
	
	ПараметрыШапки = ИнтеграцияИСМПСлужебный.НоваяСтруктураПоискаНастроекОбменаСУЗ();
	ПараметрыШапки.Организация = Организация;
	
	Возврат ИнтеграцияИСМПСлужебный.НастройкаОбменаСУЗ(
		ПараметрыОбмена,
		ПараметрыШапки);
	
КонецФункции

#КонецОбласти

#Область КлючАвторизации

&НаКлиенте
Процедура ЗапроситьКлючСессииНачало(ВыполняемаяОперация, Назначение = Неопределено)
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ВыполняемаяОперация",       ВыполняемаяОперация);
	ДополнительныеПараметры.Вставить("ВызовПослеАвторизацииСУЗ",  Истина);
	ДополнительныеПараметры.Вставить("ВызовПослеАвторизацииИСМП", Ложь);
	
	Если Назначение = ПредопределенноеЗначение("Перечисление.НазначениеСообщенийИСМП.ИСМП") Тогда
		
		ПараметрыЗапроса = ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация);
		ДополнительныеПараметры.ВызовПослеАвторизацииИСМП = Истина;
		ДополнительныеПараметры.ВызовПослеАвторизацииСУЗ  = Ложь;
		
	Иначе
		
		РезультатПолученияНастройки = ТекущиеНастройкаОбменаСУЗ(Организация);
		Если Не РезультатПолученияНастройки.Успешно Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатПолученияНастройки.ТекстОшибки);
			Возврат;
		КонецЕсли;
		
		ПараметрыЗапроса = ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ПараметрыЗапросаКлючаСессииСУЗ(
			РезультатПолученияНастройки.НастройкаОбмена);
		
	КонецЕсли;
	
	ОповещениеПриЗапросеКлючаСессии = Новый ОписаниеОповещения(
		"ЗапроситьКлючСессииЗавершение",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	ИнтерфейсАвторизацииИСМПКлиент.ЗапроситьКлючСессии(
		ПараметрыЗапроса, 
		ОповещениеПриЗапросеКлючаСессии);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьКлючСессииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОтказОтАвторизации = Ложь;
	ОшибкаАвторизации  = Ложь;
	
	Если ТипЗнч(Результат) <> Тип("Соответствие") Тогда
		ОтказОтАвторизации = Истина;
	Иначе
		РезультатАвторизации = Результат[Организация];
		
		Если РезультатАвторизации = Неопределено Тогда
			ОшибкаАвторизации = Истина;
			ТекстОшибки = НСтр("ru = 'Произошла ошибка при авторизации.'");
		ИначеЕсли РезультатАвторизации <> Истина Тогда
			ОшибкаАвторизации = Истина;
			ТекстОшибки = РезультатАвторизации;
		КонецЕсли;
	КонецЕсли;
	
	Если ОтказОтАвторизации Тогда
		Возврат;
	ИначеЕсли ОшибкаАвторизации Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
	Иначе
		Если ДополнительныеПараметры.ВыполняемаяОперация = "ЗагрузкаЗаказов" Тогда
			Результат = ЗагрузитьЗаказыИзСУЗ(
				ДополнительныеПараметры.ВызовПослеАвторизацииСУЗ,
				ДополнительныеПараметры.ВызовПослеАвторизацииИСМП);
		ИначеЕсли ДополнительныеПараметры.ВыполняемаяОперация = "ЗаполнениеСтрокЗаказа" Тогда
			Результат = ЗаполнитьСтрокиЗаказа(ДополнительныеПараметры.ВызовПослеАвторизацииСУЗ);
		Иначе
			Возврат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Результат.ТекстОшибки) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаИЗаполнениеСпискаЗаказов

&НаКлиенте
Процедура ОбновитьСписокЗаказов()
	
	ОчиститьСообщения();
	
	РезультатЗагрузки = ЗагрузитьЗаказыИзСУЗ();
	
	Если РезультатЗагрузки.ТребуетсяОбновлениеКлючаСессииСУЗ Тогда
		ЗапроситьКлючСессииНачало("ЗагрузкаЗаказов");
	ИначеЕсли ЗначениеЗаполнено(РезультатЗагрузки.ТекстОшибки) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатЗагрузки.ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьЗаказыИзСУЗ(ВызовПослеАвторизацииСУЗ = Ложь, ВызовПослеАвторизацииИСМП = Ложь)
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессииСУЗ",  Ложь);
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессииИСМП", Ложь);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                        "");
	
	РезультатПолученияНастройки = ТекущиеНастройкаОбменаСУЗ(Организация);
	НастройкаОбменаСУЗ          = РезультатПолученияНастройки.НастройкаОбмена;
	
	Если Не РезультатПолученияНастройки.Успешно Тогда
		ВозвращаемоеЗначение.ТекстОшибки = РезультатПолученияНастройки.ТекстОшибки;
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	СписокЗаказов.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиУчетаМаркируемойПродукцииИСМП.ВидПродукции КАК ВидПродукции
	|ИЗ
	|	РегистрСведений.НастройкиУчетаМаркируемойПродукцииИСМП КАК НастройкиУчетаМаркируемойПродукцииИСМП
	|ГДЕ
	|	НастройкиУчетаМаркируемойПродукцииИСМП.ВестиУчетПродукции
	|	И НастройкиУчетаМаркируемойПродукцииИСМП.ВидПродукции <> Значение(Перечисление.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха)";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		ВозвращаемоеЗначение.ТекстОшибки = НСтр(
			"ru = 'Не найдено ни одного вида продукции, для которого включен учет маркируемой продукции'");
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	МассивGTIN = Новый Массив;
	МассивИдентификаторовЗаказов = Новый Массив;
	
	Если ЭтоАдресВременногоХранилища(АдресХранилищаЗакрытыеЗаказы) Тогда
		ЗакрытыеЗаказы = ПолучитьИзВременногоХранилища(АдресХранилищаЗакрытыеЗаказы);
	Иначе
		ЗакрытыеЗаказы = Неопределено;
	КонецЕсли;
	
	МассивВидовПродукции = Новый Массив;
	Если НастройкаОбменаСУЗ.ФорматОбмена = Перечисления.ВерсииФорматаОбменаСУЗ.V3 Тогда
		МассивВидовПродукции.Добавить(Неопределено);
	Иначе
		Пока Выборка.Следующий() Цикл
			МассивВидовПродукции.Добавить(Выборка.ВидПродукции);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ВидПродукции Из МассивВидовПродукции Цикл
		
		Результат = ИнтерфейсСУЗ.СтатусыБизнесЗаказов_V2(ВидПродукции, НастройкаОбменаСУЗ);
		
		Если Результат.ТребуетсяОбновлениеКлючаСессии Тогда
			Если ВызовПослеАвторизацииСУЗ Тогда
				ВозвращаемоеЗначение.ТекстОшибки = НСтр("ru = 'Не удалось выполнить авторизацию.'");
			Иначе
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессииСУЗ = Истина;
			КонецЕсли;
			Возврат ВозвращаемоеЗначение;
		КонецЕсли;
		
		Если Результат.СтатусОбработки <> ПредопределенноеЗначение(
			"Перечисление.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена") Тогда
			Если ВидПродукции = Неопределено Тогда
				ОбщегоНазначения.СообщитьПользователю(СтрШаблон(
					НСтр("ru = 'Ошибка получения данных из СУЗ: %1'"),
					Результат.ТекстОшибки));
			Иначе
				ОбщегоНазначения.СообщитьПользователю(СтрШаблон(
					НСтр("ru = 'Вид продукции: %1. Ошибка получения данных из СУЗ: %2'"),
					ВидПродукции,
					Результат.ТекстОшибки));
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		ЗаказыСУЗ = Неопределено;
		Если Не Результат.РезультатОтправкиЗапроса.Объект.Свойство("orderInfos", ЗаказыСУЗ) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого Строка Из ЗаказыСУЗ Цикл
			
			Если Не ЗакрытыеЗаказы = Неопределено
				И Не ЗакрытыеЗаказы.Найти(Строка.orderId) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Статус = ИнтерфейсСУЗСлужебный.СтатусБизнесЗаказа(Строка.orderStatus);
			
			Если Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗЗакрыт Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаСпискаЗаказов = СписокЗаказов.Добавить();
			СтрокаСпискаЗаказов.Идентификатор = Строка.orderId;
			СтрокаСпискаЗаказов.Статус        = Статус;
			СтрокаСпискаЗаказов.ДатаЗаказа    = ОбщегоНазначенияИСКлиентСервер.ДатаИзСтрокиUNIX(Строка.createdTimestamp);
			СтрокаСпискаЗаказов.ВидПродукции  = ВидПродукции;
			
			МассивИдентификаторовЗаказов.Добавить(Строка.orderId);
			
			Если Строка.Свойство("buffers") Тогда
				Для Каждого СтрокаЗаказа Из Строка.buffers Цикл
					
					НоваяСтрока = СтрокаСпискаЗаказов.СтрокиЗаказа.Добавить();
					НоваяСтрока.GTIN            = СтрокаЗаказа.gtin;
					НоваяСтрока.КоличествоКодов = СтрокаЗаказа.totalCodes;
					
					Если МассивGTIN.Найти(СтрокаЗаказа.gtin) = Неопределено Тогда
						МассивGTIN.Добавить(СтрокаЗаказа.gtin);
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	СписокЗаказов.Сортировать("ДатаЗаказа Убыв");
	
	РезультатЗаполнения = ЗаполнитьДанныеПоGTIN(МассивGTIN, ВызовПослеАвторизацииИСМП);
	
	Если ЗначениеЗаполнено(РезультатЗаполнения.ТекстОшибки) Тогда
		ВозвращаемоеЗначение.ТекстОшибки = РезультатЗаполнения.ТекстОшибки;
		Возврат ВозвращаемоеЗначение;
	ИначеЕсли РезультатЗаполнения.ТребуетсяОбновлениеКлючаСессии Тогда
		ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессииИСМП = Истина;
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ЗаполнитьДокументы(МассивИдентификаторовЗаказов);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаСервере
Функция ЗаполнитьДанныеПоGTIN(МассивGTIN, ВызовПослеАвторизации = Ложь)
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если МассивGTIN.Количество() = 0 Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	Данные = Новый Соответствие;
	
	ПолучитьДанныеИзБазыПоGTIN(МассивGTIN, Данные);
	
	Если МассивGTIN.Количество() > 0 Тогда
		РезультатПолученияДанных = ПолучитьДанныеИзИСМППоGTIN(МассивGTIN, Данные);
		Если РезультатПолученияДанных.ТребуетсяОбновлениеКлючаСессии Тогда
			Если ВызовПослеАвторизации Тогда
				ВозвращаемоеЗначение.ТекстОшибки = НСтр("ru = 'Не удалось выполнить авторизацию.'");
			Иначе
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
				Возврат ВозвращаемоеЗначение;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СтрокаСпискаЗаказов Из СписокЗаказов Цикл
		
		МассивПродукции = Новый Массив;
		
		Для Каждого СтрокаЗаказа Из СтрокаСпискаЗаказов.СтрокиЗаказа Цикл
			
			Значение = Данные[СтрокаЗаказа.GTIN];
			
			Если Значение <> Неопределено Тогда
				
				СтрокаЗаказа.Наименование = Значение.Наименование;
				
				Если Не ЗначениеЗаполнено(СтрокаСпискаЗаказов.ВидПродукции) Тогда
					СтрокаСпискаЗаказов.ВидПродукции = Значение.ВидПродукции;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаЗаказа.Наименование) Тогда
				МассивПродукции.Добавить(СтрокаЗаказа.Наименование);
			Иначе
				МассивПродукции.Добавить(СтрокаЗаказа.GTIN);
			КонецЕсли;
			
		КонецЦикла;
		
		СтрокаСпискаЗаказов.Продукция = СформироватьПредставлениеПродукции(МассивПродукции, ДлинаПоляПродукция);
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаСервере
Процедура ПолучитьДанныеИзБазыПоGTIN(МассивGTIN, Данные)
	
	МассивEAN = Новый Массив;
	СоответствиеGTIN = Новый Соответствие;
	Для Каждого GTIN Из МассивGTIN Цикл
		ШтрихкодEAN = РазборКодаМаркировкиИССлужебныйКлиентСервер.ШтрихкодEANИзGTIN(GTIN);
		МассивEAN.Добавить(ШтрихкодEAN);
		СоответствиеGTIN.Вставить(GTIN, ШтрихкодEAN);
	КонецЦикла;
	
	ДанныеПоШтрихкодамEAN = ШтрихкодированиеОбщегоНазначенияИС.ДанныеПоШтрихкодамEAN(МассивEAN);
	
	СтруктураПоиска = Новый Структура;
	Для Каждого Элемент Из СоответствиеGTIN Цикл
		
		СтруктураПоиска.Вставить("ШтрихкодEAN", Элемент.Значение);
		НайденныеСтроки = ДанныеПоШтрихкодамEAN.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() = 1 Тогда
			
			Данные.Вставить(Элемент.Ключ, Новый Структура);
			Данные[Элемент.Ключ].Вставить("ВидПродукции", НайденныеСтроки[0].ВидПродукции);
			Данные[Элемент.Ключ].Вставить("Наименование", НайденныеСтроки[0].ПредставлениеНоменклатуры);
			
			МассивGTIN.Удалить(МассивGTIN.Найти(Элемент.Ключ));
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеИзИСМППоGTIN(МассивGTIN, Данные)
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Результат = ИнтерфейсИСМПОбщегоНазначения.ДанныеПродукцииПоШтрихкодуEAN(МассивGTIN);
	ДанныеПродукции = Результат.ДанныеПродукцииПоШтрихкодуEAN;
	
	Если ДанныеПродукции <> Неопределено Тогда
		
		Для Каждого Элемент Из ДанныеПродукции Цикл
			
			Данные.Вставить(Элемент.Ключ, Новый Структура);
			Данные[Элемент.Ключ].Вставить("ВидПродукции", Элемент.Значение.ВидПродукции);
			Данные[Элемент.Ключ].Вставить("Наименование", Элемент.Значение.Наименование);
			
			МассивGTIN.Удалить(МассивGTIN.Найти(Элемент.Ключ));
			
		КонецЦикла;
		
	Иначе
		
		Если Результат.ТребуетсяОбновлениеКлючаСессии Тогда
			ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;			
		Иначе
			ОбщегоНазначения.СообщитьПользователю(СтрШаблон(
				НСтр("ru = 'Не удалось получить данные о продукции по причине: %1'"),
				Результат.ТекстОшибки));
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьПредставлениеПродукции(МассивПродукции, ДлинаПоля)
	
	КоличествоПродукции = МассивПродукции.Количество();
	
	Если КоличествоПродукции = 0 Тогда
		Возврат НСтр("ru = '<данные о продукции заказа отсутствуют>'");;
	КонецЕсли;
	
	Разделитель            = ", ";
	ТекстОкончанияЭлемента = "...";
	ДлинаОкончанияЭлемента = СтрДлина(ТекстОкончанияЭлемента);
	ТекстОкончанияСтроки   = НСтр("ru = ' ( + еще %1 )'");
	ДлинаОкончанияСтроки   = СтрДлина(ТекстОкончанияСтроки);
	МаксимальнаяДлина      = ДлинаПоля - ДлинаОкончанияСтроки;
	Представление          = "";
	ПредставлениеДлина     = 0;
	КоличествоДобавлено    = 0;
	
	Для Каждого Элемент Из МассивПродукции Цикл
		
		ТекущееПредставление = СокрЛП(Элемент);
		Если КоличествоДобавлено > 0 Тогда
			ТекущееПредставление = Разделитель + ТекущееПредставление;
		КонецЕсли;
			
		ПредставлениеДлина = ПредставлениеДлина + СтрДлина(ТекущееПредставление);
		
		Если КоличествоПродукции = КоличествоДобавлено + 1 Тогда
			МаксимальнаяДлина = МаксимальнаяДлина + ДлинаОкончанияСтроки;
		КонецЕсли;
		
		Если ПредставлениеДлина > МаксимальнаяДлина Тогда
			
			Если КоличествоДобавлено = 0 Тогда
				Представление = Лев(ТекущееПредставление,
					МаксимальнаяДлина - ДлинаОкончанияЭлемента) + ТекстОкончанияЭлемента;
				КоличествоДобавлено = КоличествоДобавлено + 1;
			КонецЕсли;
			
			Если КоличествоПродукции > 1 Тогда
				Представление = Представление + СтрШаблон(
					ТекстОкончанияСтроки, КоличествоПродукции - КоличествоДобавлено);
			КонецЕсли;
		
			Прервать;
			
		КонецЕсли;
		
		Представление = Представление + ТекущееПредставление;
		
		КоличествоДобавлено = КоличествоДобавлено + 1;
		
	КонецЦикла;
	
	Возврат Представление;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДокументы(МассивИдентификаторовЗаказов)
	
	Если МассивИдентификаторовЗаказов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Идентификаторы", МассивИдентификаторовЗаказов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОчередьСообщенийИСМП.Документ            КАК Документ,
	|	ОчередьСообщенийИСМП.ИдентификаторЗаявки КАК Идентификатор,
	|	Заказ.ВидПродукции                       КАК ВидПродукции
	|ИЗ
	|	РегистрСведений.ОчередьСообщенийИСМП КАК ОчередьСообщенийИСМП
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ КАК Заказ
	|		ПО ОчередьСообщенийИСМП.Документ = Заказ.Ссылка
	|ГДЕ
	|	ОчередьСообщенийИСМП.Операция = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировки)
	|	И ОчередьСообщенийИСМП.ИдентификаторЗаявки В(&Идентификаторы)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ИСМППрисоединенныеФайлы.ВладелецФайла,
	|	ИСМППрисоединенныеФайлы.ИдентификаторЗапроса,
	|	Заказ.ВидПродукции
	|ИЗ
	|	Справочник.ИСМППрисоединенныеФайлы КАК ИСМППрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ КАК Заказ
	|		ПО ИСМППрисоединенныеФайлы.ВладелецФайла = Заказ.Ссылка
	|ГДЕ
	|	ИСМППрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|	И ИСМППрисоединенныеФайлы.ИдентификаторЗапроса В(&Идентификаторы)";
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаЗапроса.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаСпискаЗаказов Из СписокЗаказов Цикл
		НайденнаяСтрока = ТаблицаЗапроса.Найти(СтрокаСпискаЗаказов.Идентификатор, "Идентификатор");
		Если НайденнаяСтрока <> Неопределено Тогда
			СтрокаСпискаЗаказов.Документ = НайденнаяСтрока.Документ;
			Если Не ЗначениеЗаполнено(СтрокаСпискаЗаказов.ВидПродукции) Тогда
				СтрокаСпискаЗаказов.ВидПродукции = НайденнаяСтрока.ВидПродукции;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеСтрокЗаказа

&НаКлиенте
Процедура НачатьОткрытиеФормыЗаказаСУЗ(СтрокаСпискаЗаказов)
	
	Если ЗначениеЗаполнено(СтрокаСпискаЗаказов.ВидПродукции)
		И ТребуетсяЗаполнениеСтрокЗаказа(СтрокаСпискаЗаказов.СтрокиЗаказа) Тогда
		
		ОчиститьСообщения();
		
		РезультатЗаполнения = ЗаполнитьСтрокиЗаказа();
		Если РезультатЗаполнения.ТребуетсяОбновлениеКлючаСессии Тогда
			ЗапроситьКлючСессииНачало("ЗаполнениеСтрокЗаказа");
		ИначеЕсли ЗначениеЗаполнено(РезультатЗаполнения.ТекстОшибки) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатЗаполнения.ТекстОшибки);
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	ОткрытьФормуЗаказаСУЗ(СтрокаСпискаЗаказов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуЗаказаСУЗ(СтрокаСпискаЗаказов)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Идентификатор", СтрокаСпискаЗаказов.Идентификатор);
	ПараметрыОткрытия.Вставить("ДатаЗаказа",    СтрокаСпискаЗаказов.ДатаЗаказа);
	ПараметрыОткрытия.Вставить("СтрокиЗаказа",  СтрокаСпискаЗаказов.СтрокиЗаказа);
	
	ОткрытьФорму("Обработка.АктивныеЗаказыСУЗ.Форма.ФормаЗаказа",
		ПараметрыОткрытия,
		ЭтаФорма,
		СтрокаСпискаЗаказов.Идентификатор);
		
КонецПроцедуры

&НаКлиенте
Функция ТребуетсяЗаполнениеСтрокЗаказа(СтрокиЗаказа)
	
	Для Каждого СтрокаЗаказа Из СтрокиЗаказа Цикл
		Если СтрокаЗаказа.КоличествоКодов = 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Функция ЗаполнитьСтрокиЗаказа(ВызовПослеАвторизации = Ложь)
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	СтрокаСпискаЗаказов = СписокЗаказов.НайтиПоИдентификатору(Элементы.СписокЗаказов.ТекущаяСтрока);
	
	Данные = Новый Массив;
	
	Для Каждого СтрокаЗаказа Из СтрокаСпискаЗаказов.СтрокиЗаказа Цикл
		СтрокаДанных = Новый Структура("GTIN, КоличествоКодов");
		ЗаполнитьЗначенияСвойств(СтрокаДанных, СтрокаЗаказа);
		Данные.Добавить(СтрокаДанных);
	КонецЦикла;
	
	РезультатЗаполнения = ЗаполнитьСтрокиЗаказаИзСУЗ(Организация,
		СтрокаСпискаЗаказов.Идентификатор,
		СтрокаСпискаЗаказов.ВидПродукции,
		Данные,
		ВызовПослеАвторизации);
	
	Если РезультатЗаполнения.ТребуетсяОбновлениеКлючаСессии Тогда
		ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
		Возврат ВозвращаемоеЗначение;
	ИначеЕсли ЗначениеЗаполнено(РезультатЗаполнения.ТекстОшибки) Тогда
		ВозвращаемоеЗначение.ТекстОшибки = РезультатЗаполнения.ТекстОшибки;
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ИндексСтроки = 0;
	Для Каждого СтрокаЗаказа Из СтрокаСпискаЗаказов.СтрокиЗаказа Цикл
		ЗаполнитьЗначенияСвойств(СтрокаЗаказа, Данные[ИндексСтроки]);
		ИндексСтроки = ИндексСтроки + 1;
	КонецЦикла;
	
	ОткрытьФормуЗаказаСУЗ(СтрокаСпискаЗаказов);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаполнитьСтрокиЗаказаИзСУЗ(Организация, Идентификатор, ВидПродукции, Данные, ВызовПослеАвторизации = Ложь)
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	РезультатПолученияНастройки = ТекущиеНастройкаОбменаСУЗ(Организация);
	НастройкаОбменаСУЗ          = РезультатПолученияНастройки.НастройкаОбмена;
	
	Если Не ЗначениеЗаполнено(НастройкаОбменаСУЗ) Тогда
		ВозвращаемоеЗначение.ТекстОшибки = РезультатПолученияНастройки.ТекстОшибки;
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Структура;
	
	Для Каждого СтрокаДанных Из Данные Цикл
		
		ПараметрыЗапроса.Вставить("ИдентификаторБизнесЗаказа", Идентификатор);
		ПараметрыЗапроса.Вставить("GTIN",                      СтрокаДанных.GTIN);
		
		Результат = ИнтерфейсСУЗ.СтатусПулаКодовМаркировкиИзБизнесЗаказа_V2(
			ПараметрыЗапроса, ВидПродукции, НастройкаОбменаСУЗ);
		
		Если Результат.ТребуетсяОбновлениеКлючаСессии Тогда
			Если ВызовПослеАвторизации Тогда
				ВозвращаемоеЗначение.ТекстОшибки = НСтр("ru = 'Не удалось выполнить авторизацию.'");
			Иначе
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;
			Возврат ВозвращаемоеЗначение;
		КонецЕсли;
		
		Если Результат.СтатусОбработки <> ПредопределенноеЗначение(
			"Перечисление.СтатусыОбработкиСообщенийИСМП.Ошибка") Тогда
			СтрокаДанных.КоличествоКодов = Результат.ДанныеПула.Количество;
		Иначе
			ОбщегоНазначения.СообщитьПользователю(СтрШаблон(
				НСтр("ru = 'Не удалось получить данные из СУЗ для GTIN %1 по причине: %2'"),
				СтрокаДанных.GTIN,
				Результат.ТекстОшибки));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область ЗакрытиеЗаказов

&НаКлиенте
Функция ЗакрытьЗаказыВСУЗ()
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("ТекстОшибки", "");
	
	Если ТипЗнч(Элементы.СписокЗаказов.ОтборСтрок) = Тип("ФиксированнаяСтруктура") Тогда
		ОтборСтрок = Новый Структура(Элементы.СписокЗаказов.ОтборСтрок);
	Иначе
		ОтборСтрок = Новый Структура;
	КонецЕсли;
	
	ОтборСтрок.Вставить("Пометка", Истина);
	
	ВыбранныеСтроки = СписокЗаказов.НайтиСтроки(ОтборСтрок);
	
	Если ВыбранныеСтроки.Количество() = 0 Тогда
		ВозвращаемоеЗначение.ТекстОшибки = НСтр("ru = 'Не указаны заказы, которые необходимо закрыть'");
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	РезультатПолученияНастройки = ТекущиеНастройкаОбменаСУЗ(Организация);
	НастройкаОбменаСУЗ          = РезультатПолученияНастройки.НастройкаОбмена;
	
	Если Не ЗначениеЗаполнено(НастройкаОбменаСУЗ) Тогда
		ВозвращаемоеЗначение.ТекстОшибки = РезультатПолученияНастройки.ТекстОшибки;
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	Ошибки = Новый Массив;
	СообщенияJSON = Новый Массив;
	
	Для Каждого СтрокаСпискаЗаказов Из ВыбранныеСтроки Цикл
		
		Отказ = Ложь;
		
		Если ЗначениеЗаполнено(СтрокаСпискаЗаказов.Документ) Тогда
			
			ТекстОшибки = АрхивироватьДокумент(СтрокаСпискаЗаказов.Документ);
			
			Если ТекстОшибки <> "" Тогда
				
				Ошибка = Новый Структура;;
				Ошибка.Вставить("Индекс",      СписокЗаказов.Индекс(СтрокаСпискаЗаказов));
				Ошибка.Вставить("ТекстОшибки", ТекстОшибки);
				Ошибки.Добавить(Ошибка);
				
				Отказ = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не Отказ Тогда
			
			ПараметрыВыполнения = Новый Структура;
			ПараметрыВыполнения.Вставить("Организация",   Организация);
			ПараметрыВыполнения.Вставить("ВидПродукции",  СтрокаСпискаЗаказов.ВидПродукции);
			ПараметрыВыполнения.Вставить("Документ",      СтрокаСпискаЗаказов.Документ);
			ПараметрыВыполнения.Вставить("Идентификатор", СтрокаСпискаЗаказов.Идентификатор);
			
			СообщенияJSON.Добавить(СообщениеJSON(НастройкаОбменаСУЗ, ПараметрыВыполнения));
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Ошибка Из Ошибки Цикл
		
		СтрокаСпискаЗаказов = СписокЗаказов[Ошибка.Индекс];
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(
			НСтр("ru = 'Не удалось обработать заказ: %1, по причине: %2'"),
				СтрокаСпискаЗаказов.Идентификатор,
				Ошибка.ТекстОшибки),,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				"СписокЗаказов",
				Ошибка.Индекс + 1,
				"Идентификатор"));
		
	КонецЦикла;
	
	Если СообщенияJSON.Количество() > 0 Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("СообщенияJSON", СообщенияJSON);
		
		ПараметрыОбработкиДокументов = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбработкиДокументов();
		ПараметрыОбработкиДокументов.Ссылка             = ПредопределенноеЗначение(
			"Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.ПустаяСсылка");
		ПараметрыОбработкиДокументов.Организация        = Организация;
		ПараметрыОбработкиДокументов.ДальнейшееДействие = ПредопределенноеЗначение(
			"Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗакройтеЗаказНаЭмиссию");
		ПараметрыОбработкиДокументов.ДополнительныеПараметры = ДополнительныеПараметры;
		
		ОписаниеПриЗавершении = Новый ОписаниеОповещения(
			"ПриЗавершенииОперацииЗакрытияЗаказа", ЭтотОбъект, ПараметрыОбработкиДокументов);

		ИнтеграцияИСМПКлиент.ПодготовитьКПередаче(
			ЭтотОбъект,
			ПараметрыОбработкиДокументов,
			ОписаниеПриЗавершении);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаСервереБезКонтекста
Функция АрхивироватьДокумент(Документ)
	
	ДокументыКАрхивированию = Новый Массив;
	ДокументыКАрхивированию.Добавить(Документ);
	
	Результат = РегистрыСведений.СтатусыДокументовИСМП.Архивировать(ДокументыКАрхивированию);
	
	Возврат Результат[0].ТекстОшибки;
	
КонецФункции

&НаСервереБезКонтекста
Функция СообщениеJSON(НастройкаОбменаСУЗ, ВходящиеПараметры)
	
	Операция = Перечисления.ВидыОперацийИСМП.ЗакрытиеПодзаказаНаЭмиссиюКодовМаркировкиСУЗ;
	
	ФорматОбменаV3 = НастройкаОбменаСУЗ.ФорматОбмена = Перечисления.ВерсииФорматаОбменаСУЗ.V3;
	
	ПараметрыЗакрытияЗаказа = Новый Структура;
	ПараметрыЗакрытияЗаказа.Вставить("ИдентификаторБизнесЗаказа", ВходящиеПараметры.Идентификатор);
	
	СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
	СообщениеJSON.Идентификатор = Строка(Новый УникальныйИдентификатор);
	СообщениеJSON.Организация   = ВходящиеПараметры.Организация;
	СообщениеJSON.Документ      = ВходящиеПараметры.Документ;
	СообщениеJSON.Описание      = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(Операция);
	
	СообщениеJSON.ТипСообщения        = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеJSON.Версия              = Неопределено;
	СообщениеJSON.ТребуетсяПодписание = ФорматОбменаV3;
	СообщениеJSON.ПараметрыЗапроса    = ПараметрыЗакрытияЗаказа;
	
	СообщениеJSON.ВидПродукции              = ВходящиеПараметры.ВидПродукции;
	СообщениеJSON.Операция                  = Операция;
	СообщениеJSON.Назначение                = Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами;
	СообщениеJSON.ФорматОбмена              = НастройкаОбменаСУЗ.ФорматОбмена;
	СообщениеJSON.СтанцияУправленияЗаказами = НастройкаОбменаСУЗ.СтанцияУправленияЗаказами;
	
	Если ФорматОбменаV3 Тогда
		ТелоЗапроса = Новый Структура;
		ТелоЗапроса.Вставить("orderId", ПараметрыЗакрытияЗаказа.ИдентификаторБизнесЗаказа);
		СообщениеJSON.ТекстСообщенияJSON  = ОбщегоНазначенияИСМП.ОбъектВТекстJSON(ТелоЗапроса, Истина);
		СообщениеJSON.ИдентификаторЗаявки = ИнтеграцияИСМПСлужебный.СтроковоеПредставлениеПустогоУникальногоИдентификатора();
	КонецЕсли;
	
	Возврат СообщениеJSON;
	
КонецФункции

&НаКлиенте
Процедура ПриЗавершенииОперацииЗакрытияЗаказа(Результат, ДополнительныеПараметры) Экспорт
	
	ОбработанныеСтроки = Новый Массив;
	
	Данные = Новый Соответствие;
	
	Для Каждого ЭлементРезультата Из Результат Цикл
		Если ЗначениеЗаполнено(ЭлементРезультата.Сообщение) Тогда
			Если ЭлементРезультата.ТекстОшибки = Неопределено Тогда
				ТекстОшибки = "";
			Иначе
				ТекстОшибки = ЭлементРезультата.ТекстОшибки;
			КонецЕсли;
			Данные.Вставить(ЭлементРезультата.Сообщение, ТекстОшибки);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Сообщение Из ДополнительныеПараметры.ДополнительныеПараметры.СообщенияJSON Цикл
		ТекстОшибки = Данные[Сообщение.Идентификатор];
		Если ТекстОшибки <> Неопределено Тогда
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Идентификатор", Сообщение.ПараметрыЗапроса.ИдентификаторБизнесЗаказа);
			НайденныеСтроки = СписокЗаказов.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() > 0 Тогда
				СтрокаСпискаЗаказов = НайденныеСтроки[0];
				Если ЗначениеЗаполнено(ТекстОшибки) Тогда
					ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(
						НСтр("ru = 'Не удалось обработать заказ: %1, по причине: %2'"),
							СтрокаСпискаЗаказов.Идентификатор,
							ТекстОшибки),,
						ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
							"СписокЗаказов",
							СписокЗаказов.Индекс(СтрокаСпискаЗаказов) + 1,
							"Идентификатор"));
				Иначе
					ОбработанныеСтроки.Добавить(СтрокаСпискаЗаказов);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ВременноеХранилищеСуществует = ЭтоАдресВременногоХранилища(АдресХранилищаЗакрытыеЗаказы);
	
	Если ВременноеХранилищеСуществует Тогда
		ЗакрытыеЗаказы = ПолучитьИзВременногоХранилища(АдресХранилищаЗакрытыеЗаказы);
	Иначе
		ЗакрытыеЗаказы = Новый Массив;
	КонецЕсли;
	
	Для Каждого СтрокаСпискаЗаказов Из ОбработанныеСтроки Цикл
		СписокЗаказов.Удалить(СтрокаСпискаЗаказов);
		ЗакрытыеЗаказы.Добавить(СтрокаСпискаЗаказов.Идентификатор);
	КонецЦикла;
	
	Если ВременноеХранилищеСуществует Тогда
		ПоместитьВоВременноеХранилище(ЗакрытыеЗаказы, АдресХранилищаЗакрытыеЗаказы);
	Иначе
		АдресХранилищаЗакрытыеЗаказы = ПоместитьВоВременноеХранилище(ЗакрытыеЗаказы, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
