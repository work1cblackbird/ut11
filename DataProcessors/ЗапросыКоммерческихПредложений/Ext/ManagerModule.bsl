#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Выполняет поиск запросов коммерческих предложений в сервисе
//
// Параметры:
//  Параметры       - Структура - Текущие параметры поиска
//  АдресРезультата - Строка    - Адрес хранилища результата выполнения
//
Процедура НайтиЗапросыКоммерческихПредложений(Параметры, АдресРезультата) Экспорт
	
	Критерии = Новый Массив;
	КритерийПоиска  = КоммерческиеПредложенияСлужебный.КритерийПоискаЗапросовКоммерческихПредложений();
	ЗаполнитьЗначенияСвойств(КритерийПоиска, Параметры);
	
	Если Параметры.Свойство("НаименованиеПокупателя") Тогда
		КоммерческиеПредложенияСлужебный.ДобавитьПокупателяВКритерийПоискаЗапросовКоммерческихПредложений(КритерийПоиска,,, Параметры.НаименованиеПокупателя);
	КонецЕсли;
	
	Если Параметры.Свойство("РегионыДоставкиИдентификатор") И Параметры.Свойство("РегионыДоставкиКодСтраны") Тогда
		КоммерческиеПредложенияСлужебный.ДобавитьРегионДоставкиВКритерийПоискаЗапросовКоммерческихПредложений(КритерийПоиска,
			Параметры.РегионыДоставкиИдентификатор, Параметры.РегионыДоставкиКодСтраны);
	КонецЕсли;
	
	НазваниеТовара = "";
	
	Если Параметры.Свойство("НазваниеТовара") Тогда
		КритерийПоиска.ТекстПоискаЗапросов = Параметры.НазваниеТовара;
		КритерийПоиска.ТекстПоискаПозиций  = Параметры.НазваниеТовара;
	КонецЕсли;
	
	ПокупательНаименование = Неопределено;
	Если Параметры.Свойство("ПокупательНаименование", ПокупательНаименование) Тогда
		
		ИНН = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ПокупательНаименование);
	
		Если ЗначениеЗаполнено(ИНН) Тогда
			ИНН = СокрЛП(ПокупательНаименование);
			ПокупательНаименование = "";
		Иначе
			ИНН = "";
		КонецЕсли;
	
		КоммерческиеПредложенияСлужебный.ДобавитьПокупателяВКритерийПоискаЗапросовКоммерческихПредложений(КритерийПоиска, ИНН,, ПокупательНаименование);
	КонецЕсли;
	
	РеквизитыКатегории = Неопределено;
	Если Параметры.Свойство("РеквизитыКатегорииОтбора", РеквизитыКатегории) Тогда
		
		Для Каждого СтрокаТЧ Из РеквизитыКатегории Цикл
			
			Значение = Неопределено;
			Если СтрокаТЧ.Свойство("ИдентификаторыЗначений") Тогда
				Значение = СтрокаТЧ.ИдентификаторыЗначений;
			ИначеЕсли СтрокаТЧ.Свойство("Значение") Тогда
				Значение = СтрокаТЧ.Значение;
			КонецЕсли;
				
			КоммерческиеПредложенияСлужебный.ДобавитьРеквизитКатегорииВКритерийПоискаЗапросовКоммерческихПредложений(КритерийПоиска,
				СтрокаТЧ.Идентификатор, Значение);
				
		КонецЦикла;
	
	КонецЕсли;
	
	ЕстьПодсистемаРаботаСНоменклатурой = ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.РаботаСНоменклатурой");
	
	Таблица1СНоменклатуры = Неопределено;
	
	Критерии.Добавить(КритерийПоиска);
	Если Параметры.Свойство("ОтборСписокНоменклатуры") Тогда
		
		ЗаполненныйКритерий = ОбщегоНазначения.СкопироватьРекурсивно(КритерийПоиска);
		
		МассивНоменклатурыБезПривязки = Новый Массив;
		МассивНоменклатуры = Параметры.ОтборСписокНоменклатуры.ВыгрузитьЗначения();
		
		Есть1СНоменклатура = Ложь;
		
		Если ЕстьПодсистемаРаботаСНоменклатурой Тогда
			МодульРаботаСНоменклатурой = ОбщегоНазначения.ОбщийМодуль("РаботаСНоменклатурой");
		КонецЕсли;
		
		Для Каждого Номенклатура Из МассивНоменклатуры Цикл
			
			СсылкиНаОбъекты = Новый Структура("Номенклатура, Характеристика", Номенклатура);
			
			Если ЕстьПодсистемаРаботаСНоменклатурой Тогда
				Таблица1СНоменклатуры = МодульРаботаСНоменклатурой.ИдентификаторыНоменклатурыИХарактеристикПоСсылкам(СсылкиНаОбъекты);
			КонецЕсли;
			
			Если Таблица1СНоменклатуры <> Неопределено
				И Таблица1СНоменклатуры.Количество() > 0 Тогда
				
				Есть1СНоменклатура = Истина;
				Для Каждого СтрокаТЧ Из Таблица1СНоменклатуры Цикл
					
					КоммерческиеПредложенияСлужебный.ДобавитьНоменклатуруСервисаВКритерийПоискаЗапросовКоммерческихПредложений(
						КритерийПоиска, СтрокаТЧ.ИдентификаторНоменклатуры, СтрокаТЧ.ИдентификаторХарактеристики);
					
				КонецЦикла;
				
			Иначе
				
				МассивНоменклатурыБезПривязки.Добавить(Номенклатура);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если МассивНоменклатурыБезПривязки.Количество() > 0 Тогда
			
			Если Не Есть1СНоменклатура Тогда
				Критерии.Очистить();
			КонецЕсли;
			
			ДанныеНоменклатуры = Новый Соответствие;
			КоммерческиеПредложенияПереопределяемый.ПолучитьДанныеНоменклатурыДляПоиска(МассивНоменклатурыБезПривязки, ДанныеНоменклатуры);
			
			Если ЗначениеЗаполнено(ДанныеНоменклатуры) Тогда
				
				Для Каждого СтрокаКоллекции Из ДанныеНоменклатуры Цикл
					Значение = СтрокаКоллекции.Значение;
					
					КритерийПоискаНоменклатуры  = КоммерческиеПредложенияСлужебный.КритерийПоискаЗапросовКоммерческихПредложений();
					ЗаполнитьЗначенияСвойств(КритерийПоискаНоменклатуры, ЗаполненныйКритерий);
					
					КритерийПоискаНоменклатуры.ТекстПоискаПозиций = КритерийПоискаНоменклатуры.ТекстПоискаПозиций + " " + Значение.Наименование;
					
					Если ЗначениеЗаполнено(Значение.Артикул) Тогда
						КритерийПоискаНоменклатуры.Артикулы.Добавить(Значение.Артикул);
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Значение.Штрихкоды) Тогда
						КритерийПоискаНоменклатуры.Штрихкоды = Значение.Штрихкоды;
					КонецЕсли;
					
					Критерии.Добавить(КритерийПоискаНоменклатуры);
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	НастройкиВывода = КоммерческиеПредложенияСлужебный.НастройкиВыводаРезультатовПоискаЗапросовКоммерческихПредложений();
	ЗаполнитьЗначенияСвойств(НастройкиВывода, Параметры);
	
	Результат = КоммерческиеПредложенияСлужебный.НайтиЗапросыКоммерческихПредложенийВСервисе(
		Параметры.Организация, 
		Критерии, 
		НастройкиВывода);
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запросы = Неопределено;
	Если Результат.Свойство("Запросы", Запросы)
		И ЗначениеЗаполнено(Запросы) Тогда
		
		Запросы.Колонки.Добавить("ПризнакПросмотра", Новый ОписаниеТипов("Число"));
		Запросы.Индексы.Добавить("Идентификатор");
		
		Идентификаторы = Запросы.Скопировать(,"Идентификатор");
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Идентификаторы.Идентификатор КАК Идентификатор
		|ПОМЕСТИТЬ Идентификаторы
		|ИЗ
		|	&Идентификаторы КАК Идентификаторы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СтатусыЗапросовДляПоискаКоммерческихПредложений.ИдентификаторЗапроса КАК ИдентификаторЗапроса,
		|	ВЫБОР
		|		КОГДА СтатусыЗапросовДляПоискаКоммерческихПредложений.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросаКоммерческихПредложенийДляПоиска.НеРассматривать)
		|			ТОГДА 1
		|		КОГДА СтатусыЗапросовДляПоискаКоммерческихПредложений.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросаКоммерческихПредложенийДляПоиска.ОтложенДляОтвета)
		|			ТОГДА 2
		|		КОГДА СтатусыЗапросовДляПоискаКоммерческихПредложений.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросаКоммерческихПредложенийДляПоиска.ОтветСформирован)
		|			ТОГДА 3
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СтатусЗапроса
		|ИЗ
		|	Идентификаторы КАК Идентификаторы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыЗапросовДляПоискаКоммерческихПредложений КАК СтатусыЗапросовДляПоискаКоммерческихПредложений
		|		ПО ((ВЫРАЗИТЬ(Идентификаторы.Идентификатор КАК СТРОКА(40))) = СтатусыЗапросовДляПоискаКоммерческихПредложений.ИдентификаторЗапроса)";
		
		Запрос.УстановитьПараметр("Идентификаторы", Идентификаторы);
		
		УстановитьПривилегированныйРежим(Истина);
		РезультатЗапроса = Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Отбор = Новый Структура("Идентификатор", ВыборкаДетальныеЗаписи.ИдентификаторЗапроса);
			НайденныеСтроки = Запросы.НайтиСтроки(Отбор);
			
			Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
				СтрокаТЧ.ПризнакПросмотра = ВыборкаДетальныеЗаписи.СтатусЗапроса;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Выполняет получение данных о запросе коммерческих предложений в сервисе
//
// Параметры:
//  * Источники - Структура - Данные для получения запроса
//     - Идентификатор - Идентификатор запроса в сервисе
//     - КодВалюты     - Код валюты, в которой должны быть представлены цены.
//  АдресРезультата - Строка - Адрес хранилища результата выполнения
//
Процедура ДанныеЗапросаКоммерческихПредложенийВСервисе(Параметры, АдресРезультата) Экспорт
	
	Результат = КоммерческиеПредложенияСлужебный.ДанныеЗапросаКоммерческихПредложенийВСервисе(
		Параметры.Организация, 
		Параметры.Идентификатор, 
		Параметры.КодВалюты);
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Создает документ запрос КП у клиента
//
// Параметры:
//  Параметры  - Структура - Данные необходимы для создания документа
//  АдресРезультата  - Строка - Адрес результата выполнения
//
Процедура СохранитьЗапросУКлиента(Параметры, АдресРезультата) Экспорт
	
	СсылкаУчетногоДокумента = Параметры.УчетныйДокумент;
	ДеревоДокумента         = Параметры.Дерево;
	
	Если ТипЗнч(ДеревоДокумента) <> Тип("ДеревоЗначений") Тогда
		ВызватьИсключение НСтр("ru = 'Данные документа были не корректно прочитаны из сервиса.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	
	СведенияОФайлах = ДеревоДокумента.Строки.Найти("ПрисоединенныеФайлы", "ПолныйПуть");
	Для Каждого Файл Из СведенияОФайлах.Строки Цикл
		
		ФайлДвоичныеДанные = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Файл,
		"ПрисоединенныеФайлы.НомерСтроки.ДвоичныеДанные");
		
		Если ЗначениеЗаполнено(ФайлДвоичныеДанные) Тогда
			Продолжить;
		КонецЕсли;
		
		ИдентификаторФайла = Файл.Значение;
		
		Если Не ЗначениеЗаполнено(ИдентификаторФайла) Тогда
			Продолжить;
		КонецЕсли;
		
		Отказ = Ложь;
		
		КоммерческиеПредложенияСлужебный.ЗагрузитьПрисоединенныйФайлИзСервиса(ДеревоДокумента, ИдентификаторФайла, Отказ);
		
		Если Отказ Тогда 
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
	МетаданныеДокумента = КоммерческиеПредложенияСлужебный.МетаданныеПоОпределяемомуТипу("ЗапросКоммерческогоПредложенияОтКлиента");
	
	ИмяМенеджераДокумента = Неопределено;
	Если Метаданные.Документы.Содержит(МетаданныеДокумента) Тогда
		ИмяМенеджераДокумента = "Документы." + МетаданныеДокумента.Имя;
	ИначеЕсли Метаданные.Справочники.Содержит(МетаданныеДокумента) Тогда
		ИмяМенеджераДокумента = "Справочники." + МетаданныеДокумента.Имя;
	КонецЕсли;
	
	Если ИмяМенеджераДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработчикиСобытийПереопределяемые = Новый Структура;
	ОбработчикиСобытийПереопределяемые.Вставить("СоздатьЗапросКоммерческихПредложений", Ложь);
	
	МенеджерДокумента = ОбщегоНазначения.ОбщийМодуль(ИмяМенеджераДокумента);
	
	Если МенеджерДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерДокумента.ОбработчикиСобытийКоммерческихПредложений(ОбработчикиСобытийПереопределяемые);
	
	СоздатьЗапросКоммерческихПредложений = Неопределено;
	ОбработчикиСобытийПереопределяемые.Свойство("СоздатьЗапросКоммерческихПредложений", СоздатьЗапросКоммерческихПредложений);
	
	Если СоздатьЗапросКоммерческихПредложений = Истина Тогда
		МенеджерДокумента.НайтиСоздатьЗапросКоммерческихПредложений(ДеревоДокумента, СсылкаУчетногоДокумента);
	Иначе
		СсылкаУчетногоДокумента = Неопределено;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(СсылкаУчетногоДокумента, АдресРезультата);
	
КонецПроцедуры

// см. КоммерческиеПредложенияСлужебный.ЗагрузитьПрисоединенныйФайлИзСервиса
Процедура ПолучитьФайлИзСервиса(Параметры, АдресРезультата) Экспорт
	
	ДеревоДокумента      = Параметры.ДеревоДокумента;
	ИдентификаторЗапроса = Параметры.ИдентификаторЗапроса;
	ИдентификаторФайла   = Параметры.ИдентификаторФайла;
	
	Отказ = Ложь;
	КоммерческиеПредложенияСлужебный.ЗагрузитьПрисоединенныйФайлИзСервиса(ДеревоДокумента, ИдентификаторФайла, Отказ);
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(ДеревоДокумента, АдресРезультата);
КонецПроцедуры

#КонецОбласти

#КонецЕсли