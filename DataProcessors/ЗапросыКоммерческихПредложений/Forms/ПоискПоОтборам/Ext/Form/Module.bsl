
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Не ПравоПоискаЗапросовКоммерческихПредложений(Истина) Тогда
		Отказ = Истина;
		
		Возврат;
	КонецЕсли;
	
	ПроверитьРегистрациюОрганизаций();
	
	Параметры.Свойство("ИдентификаторКатегории",         ТекущаяКатегория);
	Параметры.Свойство("СтрокаПоиска",                   СтрокаПоиска);
	Параметры.Свойство("Валюта",                         Валюта);
	
	ЗаполнитьНастройкиКомпоновщика();
	
	КлючНастроекФормы = "Обработка.ЗапросыКоммерческихПредложений.Форма.ПоискПоОтборам/ТекущиеДанные";
	Настройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(КлючНастроекФормы, "");

	СохраненнаяВалюта = Неопределено;
	Если ТипЗнч(Настройки) = Тип("Соответствие") Тогда
		СохраненнаяВалюта = Настройки.Получить("Валюта");
		ЕдиницаИзмерения  = Настройки.Получить("ЕдиницаИзмерения");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Валюта) Тогда
		Валюта = СохраненнаяВалюта;
	ИначеЕсли Валюта <> СохраненнаяВалюта И ТипЗнч(Настройки) = Тип("Соответствие") Тогда
		Настройки.Вставить("Валюта", Валюта);
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(КлючНастроекФормы,"", Настройки);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Валюта) Тогда
		КоммерческиеПредложенияПереопределяемый.ПолучитьВалютуРегламентированногоУчета(Валюта);
	КонецЕсли;
			
	ПрочитатьПоискИзИсторииПоиска();
	
	ЦветаСтиляПоясняющийТекст = ЦветаСтиля.ПоясняющийТекст;
	ЦветаСтиляЦветТекстаФормы = ЦветаСтиля.ЦветТекстаФормы;
	
	ЗаполнитьОрганизации();
	
	БизнесСеть.ЗаполнитьРегионыПоиска(
		"ЗапросыКоммерческихПредложений",
		ОтборОрганизация, 
		РегионПоиска, 
		РегионЗаголовок, 
		ИдентификаторыРегионов);
		
	// Проверка подключения Интернет-поддержки пользователей.
	ИнтернетПоддержкаПодключена = ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
	
	ЕстьПодсистемаРаботаСНоменклатурой = ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.РаботаСНоменклатурой");
	
	Если ИнтернетПоддержкаПодключена И ЕстьПодсистемаРаботаСНоменклатурой Тогда
		МодульРаботаСНоменклатуройСлужебныйВызовСервера = ОбщегоНазначения.ОбщийМодуль("РаботаСНоменклатуройСлужебныйВызовСервера");
		ОперацияЗагрузкаКатегорий = МодульРаботаСНоменклатуройСлужебныйВызовСервера.ПолучитьКорневыеКатегорииВФоне(
			УникальныйИдентификатор, Неопределено, Неопределено);
	КонецЕсли;
	
	НастроитьЭлементыРаботаСНоменклатурой(ИнтернетПоддержкаПодключена И ЕстьПодсистемаРаботаСНоменклатурой);
	
	Элементы.ГруппаЗаголовкаСвойств.Видимость             = Ложь;
	Элементы.ДекорацияДлительнаяЗагрузкаСвойств.Видимость = Ложь;
	
	ЗаполнитьФиксированныеОтборыДерева(ДеревоОтборов, ЕдиницаИзмерения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УбратьВидимостьБыстрыхОтборов(0);
	
	ЗаполнитьЗапросы();
	ЗаполнитьПредставлениеВалюты(ЭтотОбъект);
	
	Если ЕстьПодсистемаРаботаСНоменклатурой Тогда
		Если ИнтернетПоддержкаПодключена Тогда
			Если ОперацияЗагрузкаКатегорий <> Неопределено Тогда
				ЗагрузитьКатегорииСервиса(Неопределено, , Ложь);
			КонецЕсли;
		Иначе
			Оповещение = Новый ОписаниеОповещения("ЗагрузитьЗапросыПродолжение", ЭтотОбъект);
			ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(Оповещение, ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененСтатусЗапросаКоммерческихПредложений" Тогда
		
		ПризнакПросмотра = 0;
		
		Если Параметр = "СнятСРассмотрения" Тогда
			ПризнакПросмотра = 1;
		ИначеЕсли Параметр = "Сохранен" Тогда
			ПризнакПросмотра = 2;
		ИначеЕсли Параметр = "ЕстьОтветНаЗапрос" Тогда
			ПризнакПросмотра = 3;
		КонецЕсли;
		
		Отбор = Новый Структура("Идентификатор", Источник);
		
		НайденныеСтроки = Список.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
			
			Если СтрокаТЧ.ПризнакПросмотра <> 3 Тогда
				СтрокаТЧ.ПризнакПросмотра = ПризнакПросмотра;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ИмяСобытия = "БизнесСеть_РегистрацияОрганизаций" Тогда
		
		ПроверитьРегистрациюОрганизаций();
		
	ИначеЕсли ИмяСобытия = "ИнтернетПоддержкаОтключена" Тогда
		
		ИнтернетПоддержкаПодключена = Ложь;
		
	ИначеЕсли ИмяСобытия = "ИнтернетПоддержкаПодключена" Тогда
		
		ИнтернетПоддержкаПодключена = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПоказатьСкрытьОтборы(Команда)
	
	УстановитьВидимостьОтборов(Элементы.ПоказатьСкрытьОтборы.Пометка, Элементы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьКатегории(Команда)
	
	ВидимостьКатегорий = Элементы.ПоказатьСкрытьКатегории.Пометка;
	
	Элементы.ПоказатьСкрытьКатегории.Пометка    = НЕ ВидимостьКатегорий;
	Элементы.ГруппаКатегорий.Видимость          = НЕ ВидимостьКатегорий;
	Элементы.ГруппаЗаголовкаСвойств.Видимость   = Элементы.ПоказатьСкрытьОтборы.Пометка И НЕ Элементы.ПоказатьСкрытьКатегории.Пометка;
	
	Если Элементы.ПоказатьСкрытьКатегории.Пометка
		И Категории.ПолучитьЭлементы().Количество() Тогда
		
		ЗагрузитьКатегорииСервиса(ТекущаяКатегория, Истина, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтборы(Команда)
	
	ЭлементыОтборов = ДеревоОтборов.ПолучитьЭлементы();
	
	Для Каждого ЭлементОтбора Из ЭлементыОтборов Цикл
		Если ЭлементОтбора.Отбор Тогда
			ЭлементОтбора.Отбор = Ложь;
		КонецЕсли;
		Если ЭлементОтбора.Идентификатор = "ОтборНоменклатуры" Тогда
			ЗаполнитьНастройкиКомпоновщика();
			ЭлементОтбора.ЗначениеОтбора       = Новый СписокЗначений;
			ЭлементОтбора.ПредставлениеОтбора  = НСтр("ru = '<не задано>'");
		КонецЕсли;
		Если ЭлементОтбора.ЗначениеОтбора = "Список" Тогда
			ЭлементыСписка = ЭлементОтбора.ПолучитьЭлементы();
			Для Каждого ЭлементСписка Из ЭлементыСписка Цикл
				ЭлементСписка.Отбор = Ложь;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	ОтборНеОбработанные      = Ложь;
	ОтборСохраненные         = Ложь;
	ОтборЕстьОтветНаЗапрос   = Ложь;
	ОтборСнятыеСРассмотрения = Ложь;
	СтрокаПоиска             = "";
	
	ЗаполнитьЗапросы();

КонецПроцедуры

&НаКлиенте
Процедура РегионЗаголовокНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура;
	
	ПараметрыОткрытия.Вставить("РегионРежимОтбора"  , РегионПоиска.РежимОтбора);
	ПараметрыОткрытия.Вставить("РегионПредставление", РегионПоиска.Представление);
	ПараметрыОткрытия.Вставить("РегионЗначенияПолей", РегионПоиска.ЗначенияПолей);
	ПараметрыОткрытия.Вставить("Организация",         ОтборОрганизация);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборРегионаЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.ЗапросыКоммерческихПредложений.Форма.ВыборРегионаПоиска", 
		ПараметрыОткрытия,ЭтотОбъект,
		, , , 
		ОписаниеОповещения, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Описание = Новый ОписаниеОповещения("ПослеЗакрытияФормыИстории", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.ЗапросыКоммерческихПредложений.Форма.ИсторияПоиска",
			,
			УникальныйИдентификатор,
			,,,
			Описание,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура НайтиЗапросы(Команда)
	
	ЗаполнитьЗапросы();
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	ЗаполнитьЗапросы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеОрганизацииОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыбораОрганизации", ЭтотОбъект);
	
	ПоказатьВыборИзМеню(Оповещение, Организации, Элементы.ПредставлениеОрганизации);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	ИмяКолонки = Элементы.Список.ТекущийЭлемент.Имя;
	Если ТекущиеДанные = Неопределено
		Или ИмяКолонки = Элементы.СписокПредставлениеПродолжить.Имя Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	
	ПараметрыОткрытия.Вставить("Идентификатор",      ТекущиеДанные.Идентификатор);
	ПараметрыОткрытия.Вставить("КодВалюты",          ПолучитьКодСправочника(Валюта));
	ПараметрыОткрытия.Вставить("СтатусЗапроса",      ТекущиеДанные.ПризнакПросмотра);
	ПараметрыОткрытия.Вставить("КодВалютыДокумента", ТекущиеДанные.ВалютаДокумента);
	ПараметрыОткрытия.Вставить("Организация",        ОтборОрганизация);
	
	Если ТребуетсяРегистрацияОрганизации Тогда
		
		ОповещениеПослеОтвета = Новый ОписаниеОповещения("СписокВыборПродолжение", ЭтотОбъект,
			Новый Структура("ПараметрыОткрытия", ПараметрыОткрытия));
		
		ПараметрыПродолжения = Новый Структура("ОповещениеПослеОтвета", ОповещениеПослеОтвета);
			
		Оповещение = Новый ОписаниеОповещения("ВопросРегистрацииОрганизацииПродолжение", ЭтотОбъект, ПараметрыПродолжения);
		ПоказатьВопрос(Оповещение,
			НСтр("ru = 'Для просмотра информации необходимо зарегистрироваться в сервисе 1С:Бизнес-сеть. Продолжить?'"),
			РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ОбработатьВыборСписка(ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииПоля(Элемент)
	
	Если Элемент.ТекущийЭлемент = Элементы.СписокПредставлениеПродолжить Тогда
		Если ТребуетсяРегистрацияОрганизации Тогда
			ПараметрыПродолжения = Новый Структура("ОповещениеПослеОтвета",
				Новый ОписаниеОповещения("СписокПриАктивизацииПродолжение", ЭтотОбъект));
			
			Оповещение = Новый ОписаниеОповещения("ВопросРегистрацииОрганизацииПродолжение", ЭтотОбъект, ПараметрыПродолжения);
			ПоказатьВопрос(Оповещение,
				НСтр("ru = 'Для просмотра информации необходимо зарегистрироваться в сервисе 1С:Бизнес-сеть. Продолжить?'"),
				РежимДиалогаВопрос.ДаНет);
			Возврат;
		КонецЕсли;
		
		ЗагрузитьОчереднуюПорциюЗапросов();

	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДереваКатегории

&НаКлиенте
Процедура КатегорииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтрокаДерева = Категории.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если СтрокаДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.Категории.Развернут(ВыбраннаяСтрока) Тогда
		Элементы.Категории.Свернуть(ВыбраннаяСтрока);
	Иначе
		Элементы.Категории.Развернуть(ВыбраннаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КатегорииПередРазворачиванием(Элемент, Строка, Отказ)
	
	СтрокаДерева = Категории.НайтиПоИдентификатору(Строка);
	
	Если СтрокаДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;

	НеТребуетсяЗагрузка = Ложь;
	
	МодульРаботаСНоменклатуройСлужебныйКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСНоменклатуройСлужебныйКлиент");
	МодульРаботаСНоменклатуройСлужебныйКлиент.КатегорииПередРазворачиванием(СтрокаДерева, СписокРазвернутыхКатегорий, КоличествоЗаданий, НеТребуетсяЗагрузка);
		
	Если НеТребуетсяЗагрузка Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	ПредставлениеКатегории = СтрокаДерева.Наименование;
		
	ОчиститьБыстрыеОтборыИДерево();
	
	ЗагрузитьКатегорииСервиса(СтрокаДерева.Идентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура КатегорииПередСворачиванием(Элемент, Строка, Отказ)
	
	Если ЕстьПодсистемаРаботаСНоменклатурой Тогда
		МодульРаботаСНоменклатуройСлужебныйКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСНоменклатуройСлужебныйКлиент");
		МодульРаботаСНоменклатуройСлужебныйКлиент.КатегорииПередСворачиванием(Строка, Категории, СписокРазвернутыхКатегорий);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КатегорииПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Категории.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ВОбработке
		ИЛИ КоличествоЗаданий > 10
		ИЛИ ТекущаяКатегория = ТекущиеДанные.Идентификатор
		ИЛИ КоличествоЗаданийЗагрузкиКатегорий > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ИнтернетПоддержкаПодключена Тогда
		СообщитьПользователюОбОтсутствииПодключенияИнтернетПоддержки();
		Возврат;
	КонецЕсли;
	
	ПредставлениеКатегории = ТекущиеДанные.Наименование;
	ТекущаяКатегория       = ТекущиеДанные.Идентификатор;
	
	// При смене категории очищаем отборы.
	ОчиститьБыстрыеОтборыИДерево();
	
	ПодключитьОбработчикОжидания("Подключаемый_ПриАктивизацииСтрокиПродолжение", 0.5, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КатегорияСтрокаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ИнтернетПоддержкаПодключена Тогда
		СообщитьПользователюОбОтсутствииПодключенияИнтернетПоддержки();
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	МодульРаботаСНоменклатуройСлужебныйКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСНоменклатуройСлужебныйКлиент");
	МодульРаботаСНоменклатуройСлужебныйКлиент.КатегорияСтрокаПоискаНачалоВыбора(ЭтотОбъект, ТекущаяКатегория);
	
КонецПроцедуры

&НаКлиенте
Процедура КатегорияПослеВыбора(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранноеЗначение = Результат.ВыбранныеОбъекты[0];
	ПредставлениеКатегории = ВыбранноеЗначение.Наименование;
	
	Если ТекущаяКатегория = ВыбранноеЗначение.Идентификатор Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяКатегория = ВыбранноеЗначение.Идентификатор;
	
	ЗагрузитьКатегорииСервиса(ТекущаяКатегория, Истина, Ложь);
	
	ОчиститьБыстрыеОтборыИДерево();
	
	Подключаемый_ПриАктивизацииСтрокиПродолжение();
		
КонецПроцедуры

#Область УправлениеПоискомКатегорий

&НаКлиенте
Процедура СтрокаПоискаКатегорийПриИзменении(Элемент)

	ИзменитьСтрокуПоискаКатегорий();

КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаКатегорийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
		
	Если НЕ ЗначениеЗаполнено(Элементы.СтрокаПоискаКатегорий.ТекстРедактирования) Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьСтрокуПоискаКатегорий();
				
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаКатегорийОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(СтрокаПоискаКатегорий) Тогда
		Возврат;
	КонецЕсли;

	СтрокаПоискаКатегорий = "";
	
	ОчиститьСтрокиПоискаКатегорий();
			
КонецПроцедуры 

&НаКлиенте
Процедура ОчиститьСтрокиПоискаКатегорий()
	
	СтрокаДерева            = Элементы.Категории.ТекущиеДанные;
	ИдентификаторКатегории  = Неопределено;
	
	Если Элементы.Категории.Отображение = ОтображениеТаблицы.Список
		И СтрокаДерева <> Неопределено Тогда
		ИдентификаторКатегории = СтрокаДерева.Идентификатор;
	КонецЕсли;
	
	Элементы.Категории.Отображение = ОтображениеТаблицы.Дерево;
		
	ЗагрузитьКатегорииСервиса(ИдентификаторКатегории, Истина);
		
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСтрокуПоискаКатегорий()
	
	Если НЕ ИнтернетПоддержкаПодключена Тогда
		СообщитьПользователюОбОтсутствииПодключенияИнтернетПоддержки();
		Возврат;
	КонецЕсли;

	СтрокаПоискаКатегорий = СокрЛП(Элементы.СтрокаПоискаКатегорий.ТекстРедактирования);
	
	Если ПустаяСтрока(СтрокаПоискаКатегорий) Тогда
		Если Элементы.Категории.Отображение = ОтображениеТаблицы.Список Тогда
			ОчиститьСтрокиПоискаКатегорий();
		КонецЕсли;
		Возврат;
	ИначеЕсли СтрДлина(СтрокаПоискаКатегорий) < 2 Тогда
		ОчиститьСообщения();
		ТекстСообщения = НСтр("ru = 'Для поиска используйте строку длиной от двух символов'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "СтрокаПоискаКатегорий");
		Возврат;
	КонецЕсли;
			
	ЗагрузитьКатегорииСервиса(Неопределено, , Ложь);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДереваОтборов

&НаКлиенте
Процедура ДеревоОтборовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовПредставлениеОтбораПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ДеревоОтборов.ТекущиеДанные;
	
	Если ТекущаяСтрока.Идентификатор = "МожетОбеспечиватьсяЧастично" Тогда
		Если ТекущаяСтрока.ПредставлениеОтбора <> НСтр("ru = 'не важно'") Тогда
			ТекущаяСтрока.Отбор = Истина;
		Иначе
			ТекущаяСтрока.Отбор = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовПередРазворачиванием(Элемент, Строка, Отказ)
	
	СтрокаДерева = ДеревоОтборов.НайтиПоИдентификатору(Строка);
	
	Если СтрокаДерева.ВРаботе Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если СтрокаДерева.ДочерниеПодгружены
		ИЛИ СтрокаДерева.ФиксированныйОтбор Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	ПолучитьЗначенияДополнительныхРеквизитовДереваОтборов(СтрокаДерева);

КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрока = ДеревоОтборов.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтрокаДерева", ТекущаяСтрока);

	Если ТекущаяСтрока.ФиксированныйОтбор Тогда
		
		Идентификатор = ТекущаяСтрока.Идентификатор;
		
		Если Идентификатор = "МожетОбеспечиватьсяЧастично" Тогда
			ЭлементПредставлениеОтбора = Элементы["ДеревоОтборовПредставлениеОтбораГиперссылка"];
			СтандартнаяОбработка                               = Истина;
			ЭлементПредставлениеОтбора.КнопкаВыпадающегоСписка = Истина;
			ЭлементПредставлениеОтбора.РежимВыбораИзСписка     = Истина;
			ЭлементПредставлениеОтбора.СписокВыбора.ЗагрузитьЗначения(ТекущаяСтрока.СписокВыбора.ВыгрузитьЗначения());
			Возврат;
			
		ИначеЕсли Идентификатор = "Количество" Тогда
			
			ВыборКоличестваТоваровУслуг(ДополнительныеПараметры);
			Возврат;
			
		ИначеЕсли Идентификатор = "ОтборНоменклатуры" Тогда
			
			ОтборСписокНоменклатурыНачалоВыбора(ДополнительныеПараметры);
			Возврат;
			
		ИначеЕсли Идентификатор = "Покупатель" Тогда
			
			Если Элемент.ТекущийЭлемент.Имя <> "ДеревоОтборовПредставление" Тогда
				СтандартнаяОбработка = Истина;
				ЭлементПредставлениеОтбора = Элементы["ДеревоОтборовПредставлениеОтбораГиперссылка"];
				ЭлементПредставлениеОтбора.СписокВыбора.Очистить();
				ЭлементПредставлениеОтбора.РежимВыбораИзСписка     = Ложь;
				ЭлементПредставлениеОтбора.КнопкаВыпадающегоСписка = Ложь;
				ЭлементПредставлениеОтбора                         = Элементы.ДеревоОтборовПредставлениеОтбора;
				ТекущаяСтрока.ПредставлениеОтбора                  = ТекущаяСтрока.ЗначениеОтбора;
				ЭлементПредставлениеОтбора.ПодсказкаВвода          = НСтр("ru = 'название или ИНН покупателя'");
				ЭлементПредставлениеОтбора.КнопкаОчистки           = Истина;
			КонецЕсли;
			
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	РаботаСНоменклатуройСлужебныйКлиент.ДеревоОтборовВыбор(Элементы.ДеревоОтборов, Элементы.ДеревоОтборовПредставлениеОтбораГиперссылка,
		Элементы.ДеревоОтборовПредставление, Новый ОписаниеОповещения("ДеревоОтборовПриИзмененииЗавершение", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовПредставлениеОтбораОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.ДеревоОтборов.ТекущиеДанные;
	
	Если ТекущаяСтрока.Идентификатор = "Покупатель" Тогда
		
		ТекущаяСтрока.ПредставлениеОтбора = Текст;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ТекущаяСтрокаДерева", ТекущаяСтрока);
		
		ДеревоОтборовПриИзмененииЗавершение(ЗначениеЗаполнено(Текст), ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовПредставлениеОтбораОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.ДеревоОтборов.ТекущиеДанные;
	
	Если ТекущаяСтрока.Идентификатор = "Покупатель" Тогда
		ТекущаяСтрока.ПредставлениеОтбора = "";
		ТекущаяСтрока.Отбор               = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовПриАктивизацииЯчейки(Элемент)
	
	ТекущаяСтрока = Элементы.ДеревоОтборов.ТекущиеДанные;
	
	Если ТекущаяСтрока <> Неопределено
		И ТекущаяСтрока.Идентификатор = "Покупатель"
		И Элемент.ТекущийЭлемент.Имя = "ДеревоОтборовПредставлениеОтбора"
		И НЕ АктивизированаСтрокаДереваОтборов Тогда
		АктивизированаСтрокаДереваОтборов = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущаяСтрока = Элементы.ДеревоОтборов.ТекущиеДанные;
	
	Если ТекущаяСтрока.Идентификатор = "Покупатель"
		И Элемент.ТекущийЭлемент.Имя = "ДеревоОтборовПредставлениеОтбора"
		И АктивизированаСтрокаДереваОтборов Тогда
		АктивизированаСтрокаДереваОтборов = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТекущаяСтрокаДерева  = ДополнительныеПараметры.ТекущаяСтрокаДерева;
	ДанныеОтбораИзменены = Истина;
	
	Если ЕстьПодсистемаРаботаСНоменклатурой И ТекущаяСтрокаДерева.Отбор
		И НЕ ТекущаяСтрокаДерева.ДочерниеПодгружены
		И ТекущаяСтрокаДерева.ЗначениеОтбора = "Список"
		И НЕ ТекущаяСтрокаДерева.ФиксированныйОтбор Тогда
		
		ПолучитьЗначенияДополнительныхРеквизитовДереваОтборов(ТекущаяСтрокаДерева, Истина);

	Иначе
		Если ТекущаяСтрокаДерева.ФиксированныйОтбор Тогда
			ОбработатьРезультатИзмененияФиксированногоОтбора(ТекущаяСтрокаДерева, ДанныеОтбораИзменены, Результат);
		Иначе
			ДанныеОтбораИзменены = Результат;
		КонецЕсли;
		
		Если ДанныеОтбораИзменены Тогда
			ПодключитьОбработчикОжидания("Подключаемый_ЗаполнитьЗапросы", 0.5, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗаполнитьЗапросы()
	
	ЗаполнитьЗапросы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатИзмененияФиксированногоОтбора(ТекущаяСтрокаДерева, ДанныеОтбораИзменены, Знач Результат)
	
	Идентификатор = ТекущаяСтрокаДерева.Идентификатор;
	Если Идентификатор = "Количество" Тогда
		
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
			
			Если ТекущаяСтрокаДерева.ИнтервалОт <> Результат.ИнтервалОт
				ИЛИ ТекущаяСтрокаДерева.ИнтервалДо <> Результат.ИнтервалДо
				ИЛИ (ЕдиницаИзмерения <> Результат.ЕдиницаИзмерения И ТекущаяСтрокаДерева.Отбор)
				ИЛИ (НЕ ТекущаяСтрокаДерева.Отбор И (ЗначениеЗаполнено(Результат.ИнтервалОт) ИЛИ ЗначениеЗаполнено(Результат.ИнтервалДо))) Тогда
				ДанныеОтбораИзменены      = Истина;
				ТекущаяСтрокаДерева.Отбор = Истина;
			Иначе
				ДанныеОтбораИзменены = Ложь;
			КонецЕсли;
			
			ЕдиницаИзмерения = Результат.ЕдиницаИзмерения;
			ПредставлениеЕдиницыИзмерения = Строка(ЕдиницаИзмерения);
			
			ТекущаяСтрокаДерева.ИнтервалОт = Результат.ИнтервалОт;
			ТекущаяСтрокаДерева.ИнтервалДо = Результат.ИнтервалДо;
			ТекущаяСтрокаДерева.Представление = НСтр("ru = 'Количество товара (услуги)'")
				+ ?(ЗначениеЗаполнено(ПредставлениеЕдиницыИзмерения), ", (" + ПредставлениеЕдиницыИзмерения + ")", "");
			ТекущаяСтрокаДерева.ПредставлениеОтбора = 
				ОбщегоНазначенияБЭДКлиент.ПредставлениеИнтервалаОтбора(Результат.ИнтервалОт, Результат.ИнтервалДо);
			
		КонецЕсли;
		
		Если НЕ (ЗначениеЗаполнено(ТекущаяСтрокаДерева.ИнтервалОт)
			ИЛИ ЗначениеЗаполнено(ТекущаяСтрокаДерева.ИнтервалДо)) Тогда
			ТекущаяСтрокаДерева.Отбор = Ложь;
		КонецЕсли;
		
		Если Результат = Неопределено Тогда
			ДанныеОтбораИзменены = Ложь;
			Возврат;
		КонецЕсли;
		
	ИначеЕсли Идентификатор = "Покупатель" Тогда
		
		Если Результат = Неопределено ИЛИ Результат = Ложь Тогда
			Если НЕ ЗначениеЗаполнено(ТекущаяСтрокаДерева.ПредставлениеОтбора) Тогда
				ПредставлениеОтбора = Элементы.ДеревоОтборовПредставлениеОтбораГиперссылка;
				ТекущаяСтрокаДерева.Отбор               = Ложь;
				ПредставлениеОтбора.ПодсказкаВвода      = НСтр("ru = 'название или ИНН покупателя'");
				Если ЗначениеЗаполнено(ТекущаяСтрокаДерева.ЗначениеОтбора) Тогда
					ТекущаяСтрокаДерева.ЗначениеОтбора = "";
				Иначе
					ДанныеОтбораИзменены = Ложь;
				КонецЕсли;
			КонецЕсли;
		Иначе
			
			ДанныеОтбораИзменены = ТекущаяСтрокаДерева.ЗначениеОтбора <> ТекущаяСтрокаДерева.ПредставлениеОтбора
				ИЛИ ТекущаяСтрокаДерева.Отбор;
			
			ТекущаяСтрокаДерева.Отбор                = Истина;
			ТекущаяСтрокаДерева.ЗначениеОтбора       = ТекущаяСтрокаДерева.ПредставлениеОтбора;
			
		КонецЕсли;
		
	ИначеЕсли Идентификатор = "ОтборНоменклатуры" Тогда
		
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
			КомпоновщикНастроек.ЗагрузитьНастройки(Результат.НастройкиКомпоновки);
			ТекущаяСтрокаДерева.ЗначениеОтбора.ЗагрузитьЗначения(Результат.МассивСтрок);
			ТекущаяСтрокаДерева.ПредставлениеОтбора = Строка(ТекущаяСтрокаДерева.ЗначениеОтбора);
			НоменклатураВыбрана = Результат.МассивСтрок.Количество() > 0;
			ТекущаяСтрокаДерева.Отбор               = НоменклатураВыбрана;
			ДанныеОтбораИзменены                    = НоменклатураВыбрана;
		Иначе
			Если ЗначениеЗаполнено(ТекущаяСтрокаДерева.ЗначениеОтбора) Тогда
				ТекущаяСтрокаДерева.Отбор           = ТекущаяСтрокаДерева.Отбор;
			Иначе
				ТекущаяСтрокаДерева.Отбор           = Ложь;
			КонецЕсли;
			ДанныеОтбораИзменены                    = Ложь;
			Возврат;
		КонецЕсли;
	Иначе
		ДанныеОтбораИзменены = Результат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовПриИзменении(Элемент)
	
	ТекущаяСтрока = ДеревоОтборов.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
	
	Если ТекущаяСтрока.ЗначениеОтбора = "Список" Тогда
		Если ТекущаяСтрока.ДочерниеПодгружены Тогда
			ТекущаяСтрока.ВРаботе = Ложь;
		Иначе
			Если ТекущаяСтрока.ВРаботе Тогда
				Возврат;
			КонецЕсли;
			ТекущаяСтрока.ВРаботе = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтрокаДерева", ТекущаяСтрока);
	
	Результат = ТекущаяСтрока.Отбор;
	Если ТекущаяСтрока.ФиксированныйОтбор Тогда
		Идентификатор = ТекущаяСтрока.Идентификатор;
		Если Идентификатор = "Количество" Тогда
			
			Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ИнтервалОт)
				И НЕ ЗначениеЗаполнено(ТекущаяСтрока.ИнтервалДо)Тогда
				
				ВыборКоличестваТоваровУслуг(ДополнительныеПараметры);
			Иначе
				ДеревоОтборовПриИзмененииЗавершение(Результат, ДополнительныеПараметры)
			КонецЕсли;
			
			Возврат;
			
		ИначеЕсли Идентификатор = "ОтборНоменклатуры" Тогда
			
			Если ТекущаяСтрока.Отбор И НЕ ЗначениеЗаполнено(ТекущаяСтрока.ЗначениеОтбора) Тогда
				ОтборСписокНоменклатурыНачалоВыбора(ДополнительныеПараметры);
				Возврат;
			Иначе
				ПодключитьОбработчикОжидания("Подключаемый_ЗаполнитьЗапросы", 0.5, Истина);
				Возврат;
			КонецЕсли;
			
		ИначеЕсли ТекущаяСтрока.Идентификатор = "МожетОбеспечиватьсяЧастично" Тогда
			ОтборИзменен = Истина;
			Если ТекущаяСтрока.ПредставлениеОтбора <> НСтр("ru = 'не важно'") Тогда
				ЗначениеОтбора  = Булево(ТекущаяСтрока.ПредставлениеОтбора);
			Иначе
				Если ЗначениеОтбора = Неопределено Тогда
					ОтборИзменен = Ложь;
				КонецЕсли;
				ТекущаяСтрока.Отбор = Ложь;
				ЗначениеОтбора      = Неопределено;
			КонецЕсли;
			Если ЗначениеОтбора <> ТекущаяСтрока.ЗначениеОтбора Тогда
				ТекущаяСтрока.ЗначениеОтбора = ЗначениеОтбора;
				ОтборИзменен = Истина;
			КонецЕсли;
			Результат = ОтборИзменен;
		ИначеЕсли Идентификатор = "Покупатель" Тогда
			
			Если ТекущаяСтрока.Отбор
				И НЕ ЗначениеЗаполнено(ТекущаяСтрока.ЗначениеОтбора) Тогда
				ОчиститьСообщения();
				ТекущаяСтрока.Отбор = Ложь;
				ОбщегоНазначенияКлиент.СообщитьПользователю(
					НСтр("ru = 'Не выбран покупатель'"));
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если (ТекущаяСтрока.ФиксированныйОтбор И НЕ ТекущаяСтрока.ФиксированноеЗначение)
		ИЛИ ТекущаяСтрока.Идентификатор = "Покупатель" Тогда
		ДеревоОтборовПриИзмененииЗавершение(Результат, ДополнительныеПараметры);
	Иначе
		РаботаСНоменклатуройСлужебныйКлиент.ДеревоОтборовОтборПриИзменении(Элементы.ДеревоОтборов,
			Новый ОписаниеОповещения("ДеревоОтборовПриИзмененииЗавершение", ЭтотОбъект, ДополнительныеПараметры));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборКоличестваТоваровУслуг(ДополнительныеПараметры)
	
	ТекущиеДанные = ДополнительныеПараметры.ТекущаяСтрокаДерева;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ИнтервалОт",       ТекущиеДанные.ИнтервалОт);
	ПараметрыОткрытия.Вставить("ИнтервалДо",       ТекущиеДанные.ИнтервалДо);
	ПараметрыОткрытия.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
	
	Описание = Новый ОписаниеОповещения("ДеревоОтборовПриИзмененииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ЗапросыКоммерческихПредложений.Форма.УстановкаОтбораКоличестваТоваровУслуг",
			ПараметрыОткрытия,
			УникальныйИдентификатор,
			, , ,
			Описание,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСписокНоменклатурыНачалоВыбора(ДополнительныеПараметры)
		
	ПараметрыОткрытия = Новый Структура("Настройки", КомпоновщикНастроек.Настройки);
	Описание = Новый ОписаниеОповещения("ДеревоОтборовПриИзмененииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Обработка.ЗапросыКоммерческихПредложений.Форма.ВыборНоменклатуры",
			ПараметрыОткрытия,
			УникальныйИдентификатор,
			,,,
			Описание,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Выполнение = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИзменитьВалютуПоиска(Команда)
	
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ИзменитьВалютуПоискаЗавершение", ЭтотОбъект), Валюта,
			НСтр("ru = 'Валюта поиска'"), Тип("СправочникСсылка.Валюты"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИсториюПоиска(Команда)
	
	ПрочитатьПоискИзИсторииПоиска(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьОрганизации()
	
	Элементы.ПредставлениеОрганизации.Видимость = Ложь;
	
	ЗарегистрированныеОрганизации = БизнесСеть.ЗарегистрированныеОрганизации();
	
	Если Не ЗначениеЗаполнено(ЗарегистрированныеОрганизации) Тогда
		Возврат;
	КонецЕсли;
	
	Организации.ЗагрузитьЗначения(ЗарегистрированныеОрганизации);
	
	ОтборОрганизация = ЗарегистрированныеОрганизации[0];
	
	Если ЗарегистрированныеОрганизации.Количество() > 1 Тогда
		СформироватьПредставлениеОрганизации();
		Элементы.ПредставлениеОрганизации.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПредставлениеОрганизации()
	
	ПредставлениеОрганизации = СтрШаблон("Поиск предложений для <a href = ""ВыборОрганизации"">%1</a>", ОтборОрганизация);
	
	Элементы.ПредставлениеОрганизации.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(ПредставлениеОрганизации);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораОрганизации(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтборОрганизация = Результат.Значение;
	
	ПослеВыбораОрганизацииНаСервере();
	
	ЗаполнитьЗапросы();
	
КонецПроцедуры

&НаСервере
Процедура ПослеВыбораОрганизацииНаСервере()
	
	БизнесСеть.ЗаполнитьРегионыПоиска(
		"ЗапросыКоммерческихПредложений",
		ОтборОрганизация, 
		РегионПоиска, 
		РегионЗаголовок, 
		ИдентификаторыРегионов);
	
	СформироватьПредставлениеОрганизации();
		
КонецПроцедуры

// Проверяет возможность поиска запросов коммерческих предложений для текущего пользователя.
//
// Параметры:
//  ВыводитьСообщение - Булево - признак необходимости вывода сообщения о недостаточности прав.
// 
// Возвращаемое значение:
//  Булево - наличие права на выполнение обмена.
//
&НаСервере
Функция ПравоПоискаЗапросовКоммерческихПредложений(ВыводитьСообщение = Ложь)
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЕстьПраво = ПравоДоступа("Просмотр",
		Метаданные.Обработки.ЗапросыКоммерческихПредложений.Команды.НайтиЗапросыКоммерческихПредложений);
	
	Если Не ЕстьПраво И ВыводитьСообщение Тогда
		ОбработкаНеисправностейБЭД.СообщитьПользователюОНарушенииПравДоступа();
	КонецЕсли;
	
	Возврат ЕстьПраво;
	
КонецФункции

&НаСервере
Процедура НастроитьЭлементыРаботаСНоменклатурой(ВидимостьЭлементов)
	
	Элементы.ГруппаКатегорий.Видимость         = ВидимостьЭлементов;
	Элементы.ПоказатьСкрытьКатегории.Видимость = ВидимостьЭлементов;
	Элементы.ГруппаОтборКатегории.Видимость    = ВидимостьЭлементов;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ОбработатьВыборСписка(ДополнительныеПараметры.ПараметрыОткрытия);
		ТребуетсяРегистрацияОрганизации = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ЗагрузитьОчереднуюПорциюЗапросов();
		ТребуетсяРегистрацияОрганизации = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросРегистрацииОрганизацииПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОчиститьСообщения();
		ОткрытьФорму("Обработка.БизнесСеть.Форма.РегистрацияОрганизаций",, ЭтотОбъект,,,,
			ДополнительныеПараметры.ОповещениеПослеОтвета, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОчереднуюПорциюЗапросов()
	
	Элементы.Список.ТекущийЭлемент = Элементы.СписокПокупательНаименование;
	Если Список.Количество() Тогда
		Элементы.Список.ТекущаяСтрока = Список[Список.Количество() - 2].ПолучитьИдентификатор();
		Список.Удалить(Список.Количество() - 1);
	КонецЕсли;
	
	Страница = Страница + 1;
	ЗагрузитьЗапросы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборСписка(ПараметрыОткрытия)
	
	Описание = Новый ОписаниеОповещения("ПослеПросмотраКарточкиЗаказа", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.ЗапросыКоммерческихПредложений.Форма.КарточкаЗапроса",
			ПараметрыОткрытия,
			УникальныйИдентификатор,
			ПараметрыОткрытия.Идентификатор,,,
			Описание);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПредставлениеВалюты(Форма)

	Форма.Элементы.ИзменитьВалютуПоиска.Заголовок   = СтрШаблон(НСтр("ru = 'Валюта: %1'"), Форма.Валюта);
	Форма.Элементы.СписокОбщаяСумма.Заголовок       = СтрШаблон(НСтр("ru = 'Сумма (%1)'"), Форма.Валюта);

КонецПроцедуры

&НаКлиенте
Процедура ПослеПросмотраКарточкиЗаказа(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыИстории(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено
		ИЛИ ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Результат.Свойство("БыстрыеОтборы") Тогда
		ОчиститьСообщения();
		ТекстСообщения = НСтр("ru = 'Параметры поиска запроса устарели. Сформируйте новый запрос поиска.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьОтборыПоПараметрамПоиска(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиКомпоновщика(Настройки = Неопределено)
	
	СхемаВыгрузкиДанных = Обработки.ЗапросыКоммерческихПредложений.ПолучитьМакет("СхемаКомпоновщика");
	
	АдресСхемы = ПоместитьВоВременноеХранилище(СхемаВыгрузкиДанных, УникальныйИдентификатор);
	
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));
	
	Если Настройки = Неопределено Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаВыгрузкиДанных.НастройкиПоУмолчанию);
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст"     , НСтр("ru = 'Не указан'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.Регион");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СписокРегион");
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ТекстПоиска");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СписокКоличество");
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СписокСумма");
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СписокТекстПоиска");
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.Продолжить");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СписокПредставлениеПродолжить");
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.Продолжить");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СписокПризнакПросмотра");
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СписокПокупательНаименование");
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СписокКатегорииЗапроса");
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СписокТекстПоиска");
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СписокВсегоПозиций");
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СписокКоличество");
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СписокОбщаяСумма");
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СписокСумма");
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СписокДействуетДо");
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СписокРегион");
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Показать еще'"));
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Список.Продолжить");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СписокПредставлениеПродолжить");
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Оформление дерева отборов.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОтборовПредставлениеОтбораГиперссылка.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоОтборов.ПредставлениеОтбора");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Заполнено;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГиперссылкиБЭД);
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(WindowsШрифты.DefaultGUIFont, , , Ложь, Ложь, Истина, Ложь, ));
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОтборовПредставлениеОтбораГиперссылка.Имя);
	
	ОтборГруппа = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоОтборов.ОтборДоступен");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоОтборов.ФиксированноеЗначение");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоОтборов.ФиксированныйОтбор");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Оформление видимости колонок для строки Поставщик.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОтборовПредставлениеОтбораГиперссылка.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоОтборов.ИмяРеквизита");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "Покупатель";
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОтборовПредставлениеОтбора.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоОтборов.ИмяРеквизита");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = "Покупатель";
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	// Оформление шрифта строки Поставщик.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОтборовПредставлениеОтбора.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоОтборов.ИмяРеквизита");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "Покупатель";
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(WindowsШрифты.DefaultGUIFont, , , Ложь, Ложь, Ложь, Ложь, ));
	
	// Оформление цвета строки Поставщик, если представление отбора не заполнено.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОтборовПредставлениеОтбора.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоОтборов.ПредставлениеОтбора");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "";
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'название или ИНН покупателя'"));
	
	Элемент = УсловноеОформление.Элементы.Добавить();
		
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОтборовПредставлениеОтбора.Имя);
	
	ОтборГруппа = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоОтборов.ПредставлениеОтбора");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "";
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("АктивизированаСтрокаДереваОтборов");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ДосьеРамкаСтрокиЦвет);
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Выделение установленных отборов дерева жирным шрифтом.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОтборовПредставление.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоОтборов.Отбор");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(Элементы[Элементы.ДеревоОтборовПредставление.Имя].Шрифт, , ,
		Истина, Ложь, Ложь, Ложь, ));
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьРегистрациюОрганизаций()
	
	ОрганизацияЗарегистрирована     = БизнесСеть.ОрганизацияПодключена();
	ТребуетсяРегистрацияОрганизации = НЕ ОрганизацияЗарегистрирована;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборРегионаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("РегионРежимОтбора") Тогда
		Результат.Свойство("РегионРежимОтбора"  , РегионПоиска.РежимОтбора);
		Результат.Свойство("РегионПредставление", РегионПоиска.Представление);
		Результат.Свойство("РегионЗначенияПолей", РегионПоиска.ЗначенияПолей);
	КонецЕсли;
	
	СохранитьПрочитатьНастройкиРегионовПоиска();
	
	ЗаполнитьЗапросы();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьПрочитатьНастройкиРегионовПоиска()
	
	БизнесСеть.СохранитьНастройкиРегионовПоиска(
		РегионПоиска,
		"ЗапросыКоммерческихПредложений",
		ОтборОрганизация,
		РегионЗаголовок,
		ИдентификаторыРегионов);
		
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВалютуПоискаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Валюта = Результат;
		ЗаполнитьПредставлениеВалюты(ЭтотОбъект);
		ЗаполнитьЗапросы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЗапросы(ПараметрыПоиска = Неопределено)
	
	Если ИнтернетПоддержкаПодключена И ЕстьПодсистемаРаботаСНоменклатурой Тогда
		Если Категории.ПолучитьЭлементы().Количество() = 0
			И ЗначениеЗаполнено(СтрокаПоискаКатегорий) Тогда
			ОчиститьСообщения();
			ТекстСообщения = НСтр("ru = 'Не выбрана категория.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, ,
				?(Элементы.ПоказатьСкрытьКатегории.Пометка, "СтрокаПоискаКатегорий", "ПредставлениеКатегории"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимостьЗапросов(Ложь);
	
	Если ПараметрыПоиска = Неопределено Тогда
		
		ПараметрыПоиска = СформироватьПараметрыПоиска();
		
		Если ПараметрыПоиска = Неопределено Тогда
			Возврат;
		КонецЕсли;
	Иначе
		
		Если Не ПараметрыПоиска.Свойство("Организация") Тогда
			ПараметрыПоиска.Вставить("Организация", ОтборОрганизация)
		КонецЕсли;
		
		ИзменитьБыстрыеОтборыНаФорме(Истина);
	КонецЕсли;
	
	ДлительнаяОперация = ЗагрузитьЗапросыВФоне(ПараметрыПоиска);
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьЗапросыПродолжение(Истина, ДлительнаяОперация);
		
КонецПроцедуры

&НаСервере
Функция ЗагрузитьЗапросыВФоне(ПараметрыПоиска)
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
		ИдентификаторЗадания = Неопределено;
	КонецЕсли;
	
	СохранитьПоискВИсторииПоиска(ПараметрыПоиска, БыстрыеОтборы, Элементы.СтрокаПоиска.СписокВыбора);
	
	Задание = Новый Структура("ИмяПроцедуры, Наименование, ПараметрыПроцедуры");
	Задание.Наименование       = НСтр("ru = '1С:Запросы коммерческих предложений. Поиск запросов.'");
	Задание.ИмяПроцедуры       = "Обработки.ЗапросыКоммерческихПредложений.НайтиЗапросыКоммерческихПредложений";
	Задание.ПараметрыПроцедуры = ПараметрыПоиска;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = Задание.Наименование;
	ПараметрыВыполнения.ЗапуститьВФоне              = Истина;
	ПараметрыВыполнения.ОжидатьЗавершение           = 0;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(Задание.ИмяПроцедуры,
		Задание.ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьЗапросыПродолжение(Результат, ДлительнаяОперация) Экспорт
	
	Если Результат = Неопределено Тогда
		СообщитьПользователюОбОтсутствииПодключенияИнтернетПоддержки();
		Элементы.ДекорацияДлительнаяЗагрузкаКатегорий.Видимость = Ложь;
		Элементы.ДекорацияЗагрузкаКатегорийИзОтборов.Видимость  = Ложь;
		Элементы.ДекорацияКатегорииЗаголовок.Заголовок          = НСтр("ru = 'Категории не загружены'");
		Возврат;
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура")
		И Результат.Свойство("Логин") Тогда
		
		ИнтернетПоддержкаПодключена = Истина;
		
		ПараметрыПоиска = СформироватьПараметрыПоиска();
		Если ПараметрыПоиска = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		// Повторный вызов метода после подключения к Интернет-поддержке.
		ДлительнаяОперация = ЗагрузитьЗапросыВФоне(ПараметрыПоиска);
		
		Если ЕстьПодсистемаРаботаСНоменклатурой Тогда
			НастроитьЭлементыРаботаСНоменклатурой(Истина);
			МодульРаботаСНоменклатуройСлужебныйВызовСервера = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСНоменклатуройСлужебныйВызовСервера");
			ОперацияЗагрузкаКатегорий = МодульРаботаСНоменклатуройСлужебныйВызовСервера.ПолучитьКорневыеКатегорииВФоне(
				УникальныйИдентификатор, Неопределено, Неопределено);
			Если ОперацияЗагрузкаКатегорий <> Неопределено Тогда
				ЗагрузитьКатегорииСервиса(Неопределено, , Ложь);
			КонецЕсли;
		КонецЕсли;

		Если ДлительнаяОперация = Неопределено Тогда
			Возврат;
		КонецЕсли;
	
	КонецЕсли;
	
	ИдентификаторЗадания = ДлительнаяОперация.ИдентификаторЗадания;
	Если НЕ ДлительнаяОперация = Неопределено
		И ДлительнаяОперация.Статус = "Выполняется" Тогда
		Элементы.НайтиЗапросы.Картинка = БиблиотекаКартинок.СинхронизацияДанныхДлительнаяОперация;
	КонецЕсли;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Поиск запросов коммерческих предложений.'");
	ПараметрыОжидания.ВыводитьПрогрессВыполнения      = Ложь;
	ПараметрыОжидания.ВыводитьОкноОжидания            = Ложь;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ПараметрыОжидания.ВыводитьСообщения               = Ложь;
	ПараметрыОжидания.Вставить("ИдентификаторЗадания", ИдентификаторЗадания);
	
	ДлительнаяОперацияЗавершение = Новый ОписаниеОповещения(
		"ЗагрузитьЗапросыКоммерческихПредложенийВФонеЗавершение", ЭтотОбъект, ПараметрыОжидания);
		
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация,
		ДлительнаяОперацияЗавершение, ПараметрыОжидания);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКодСправочника(Знач Элемент)

	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Элемент, "Код");

КонецФункции

&НаКлиенте
Процедура ЗаполнитьЗапросы(ПараметрыПоиска = Неопределено)
	
	Страница = 0;
	ЗагрузитьЗапросы(ПараметрыПоиска);
	
КонецПроцедуры

// Получение заполненного представления текущих параметров поиска
//
// Параметры:
//  ПараметрыПоиска - Структура - Текущие параметры поиска
// 
// Возвращаемое значение:
//  Массив - представления параметров поиска
//
&НаСервереБезКонтекста
Функция ПолучитьПредставлениеПараметровПоиска(Знач ПараметрыПоиска, Знач БыстрыеОтборы)
	
	Ответ       = Новый Массив;
	Выбрано     = 0;
	СтрокаОтвет = "";
	
	Если ТипЗнч(ПараметрыПоиска) = Тип("Структура") Тогда
		
		Текст = Неопределено;
		Если ПараметрыПоиска.Свойство("НазваниеТовара", Текст) Тогда
			
			Ответ.Добавить(Текст);
			
		КонецЕсли;
		
		Текст = Неопределено;
		
		Если ПараметрыПоиска.Свойство("Категория", Текст)
			И ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.РаботаСНоменклатурой") Тогда
			
			Ответ.Добавить(СтрШаблон(НСтр("ru = 'Категория: %1'"), Текст));
			
		КонецЕсли;
		
		Для Каждого Элемент Из БыстрыеОтборы Цикл
			Выбрано = Выбрано + 1;
			
			ЗаголовокОтбора     = Лев(Элемент.Представление, СтрНайти(Элемент.Представление, ":"));
			ПредставлениеОтбора = Сред(Элемент.Представление, СтрНайти(Элемент.Представление, ":")+1);
			
			Если СтрДлина(ПредставлениеОтбора) > 55 Тогда
				ПредставлениеЗаголовка = ЗаголовокОтбора + " " + Лев(ПредставлениеОтбора, 52) + "...";
			Иначе
				ПредставлениеЗаголовка = ЗаголовокОтбора + " " + ПредставлениеОтбора;
			КонецЕсли;

			Ответ.Добавить(ПредставлениеЗаголовка);
			
			Если Ответ.Количество() = 3 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		СтрокаОтвет = СтрСоединить(Ответ, ", ");
		
		Если Выбрано < БыстрыеОтборы.Количество() Тогда
			
			КоличествоПараметров = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
						НСтр("ru = ';%1 параметр;;%1 параметра;%1 параметров;%1 параметров'"),
						БыстрыеОтборы.Количество() - Выбрано);
			
			СтрокаОтвет = СтрокаОтвет + " " + СтрШаблон(НСтр("ru = 'и еще %1'"), КоличествоПараметров)
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрокаОтвет;
	
КонецФункции

&НаСервереБезКонтекста
Процедура СохранитьПоискВИсторииПоиска(ПараметрыПоиска, Знач БыстрыеОтборы, СписокВыбораСтрокиПоиска)
	
	ПредставлениеПоиска = ПолучитьПредставлениеПараметровПоиска(ПараметрыПоиска, БыстрыеОтборы);
	
	Если НЕ ЗначениеЗаполнено(ПредставлениеПоиска) Тогда
		Возврат;
	КонецЕсли;
	
	КлючНастроекФормы = "Обработка.ЗапросыКоммерческихПредложений.Форма.ПоискПоОтборам/ИсторияПоиска";
	ИсторияПоиска = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(КлючНастроекФормы,"");
	
	Если ТипЗнч(ИсторияПоиска) <> Тип("ТаблицаЗначений") Тогда
		
		ИсторияПоиска = Новый ТаблицаЗначений;
		ИсторияПоиска.Колонки.Добавить("ПараметрыПоиска");
		ИсторияПоиска.Колонки.Добавить("ПредставлениеПоиска");
		ИсторияПоиска.Колонки.Добавить("ДатаСоздания");
		
	КонецЕсли;
	
	КолВо = 0;
	Найден = Ложь;
	
	Для Каждого СтрокаИсторииПоиска Из ИсторияПоиска Цикл
		
		Хеш1 = ОбщегоНазначения.КонтрольнаяСуммаСтрокой(СтрокаИсторииПоиска.ПараметрыПоиска);
		Хеш2 = ОбщегоНазначения.КонтрольнаяСуммаСтрокой(ПараметрыПоиска);
		Если Хеш1 = Хеш2 Тогда
			
			ИсторияПоиска.Сдвинуть(СтрокаИсторииПоиска, -КолВо);
			СтрокаИсторииПоиска.ДатаСоздания = ТекущаяДатаСеанса();
			
			Найден = Истина;
			Прервать;
			
		КонецЕсли;
		
		КолВо = КолВо + 1;
		
	КонецЦикла;
	
	Если НЕ Найден Тогда
		НоваяСтрока = ИсторияПоиска.Вставить(0);
		НоваяСтрока.ПараметрыПоиска     = ПараметрыПоиска;
		НоваяСтрока.ПредставлениеПоиска = ПредставлениеПоиска;
		НоваяСтрока.ДатаСоздания        = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если ИсторияПоиска.Количество() = 51 Тогда
		ИсторияПоиска.Удалить(ИсторияПоиска[49]);
	КонецЕсли;
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(КлючНастроекФормы, "", ИсторияПоиска);
	
	ЗаполнитьСписокИсторииПоиска(ИсторияПоиска, СписокВыбораСтрокиПоиска);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьПоискИзИсторииПоиска(Очистить = Ложь)
	
	КлючНастроекФормы = "Обработка.ЗапросыКоммерческихПредложений.Форма.ПоискПоОтборам/ИсторияПоиска";
	
	Если Очистить Тогда
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(КлючНастроекФормы, "", Неопределено);
		Элементы.СтрокаПоиска.СписокВыбора.Очистить();
	КонецЕсли;
	
	ИсторияПоиска = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(КлючНастроекФормы,"");
	
	Если ТипЗнч(ИсторияПоиска) <> Тип("ТаблицаЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСписокИсторииПоиска(ИсторияПоиска, Элементы.СтрокаПоиска.СписокВыбора);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСписокИсторииПоиска(Знач Источник, Приемник)
	
	Приемник.Очистить();
	Счетчик = 0;
	Для Каждого СтрокаИсточника Из Источник Цикл
		
		Счетчик = Счетчик + 1;
		НоваяСтрока = Приемник.Добавить();
		НоваяСтрока.Значение = СтрокаИсточника.ПараметрыПоиска;
		НоваяСтрока.Представление = СтрокаИсточника.ПредставлениеПоиска;
		НоваяСтрока.Картинка = БиблиотекаКартинок.История;
		
		Если Счетчик = 4 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ИнтернетПоддержкаПодключена Тогда
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
			СтандартнаяОбработка = Ложь;
			ЗаполнитьОтборыПоПараметрамПоиска(ВыбранноеЗначение);
		КонецЕсли;
	Иначе
		ВыбранноеЗначение = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЗапросыКоммерческихПредложенийВФонеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;
	ТекстСообщения = "";
	
	Элементы.НайтиЗапросы.Картинка = Новый Картинка;
	
	Если Результат = Неопределено Тогда // Фоновое задание отменено пользователем.
		КоличествоЗаданийЗагрузкиКатегорий = Макс(КоличествоЗаданийЗагрузкиКатегорий - 1, 0);
		Возврат;
	КонецЕсли;
	
	Если НЕ Отказ И Результат.Статус = "Выполнено" Тогда
		
		Если ЗначениеЗаполнено(Результат.АдресРезультата)
			И ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда
			
			ДанныеСервиса = ОбработатьРезультатЗапросовИзСервиса(Результат.АдресРезультата);
			
			ЗаполнитьТаблицуЗапросов(ДанныеСервиса);
			
		КонецЕсли;
		ИдентификаторЗадания = Неопределено;
		
	ИначеЕсли Результат.Статус = "Ошибка"
		И ИдентификаторЗадания = ДополнительныеПараметры.ИдентификаторЗадания Тогда
		Отказ = Истина;
		ТекстСообщения = Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	КоличествоЗаданийЗагрузкиКатегорий = Макс(КоличествоЗаданийЗагрузкиКатегорий - 1, 0);
	
	Если Отказ Тогда
		Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 %2'"),
					ОбщегоНазначенияКлиент.ДатаСеанса(), ТекстСообщения));
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимостьЗапросов(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьПользователюОбОтсутствииПодключенияИнтернетПоддержки()
	
	ОчиститьСообщения();
	ТекстСообщения = НСтр("ru = 'Отсутствует подключение к Интернет-поддержке пользователей.'");
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьЗапросов(Доступность)
	
	Элементы.СтрокаПоиска.Доступность = Доступность;
	Элементы.НайтиЗапросы.Доступность = Доступность;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбработатьРезультатЗапросовИзСервиса(АдресРезультата)
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	УдалитьИзВременногоХранилища(АдресРезультата);

	Если Результат = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеСервиса = Новый Структура;
	Если Результат.Свойство("Вывод") Тогда
		ДанныеСервиса.Вставить("Вывод", Результат.Вывод);
	КонецЕсли;
		
	Если Результат.Свойство("Запросы") Тогда
		
		МассивЗапросовИзСервиса = Новый Массив;
		Для Каждого СтрокаТЧ Из Результат.Запросы Цикл
			
			СтруктураЗапросов = НоваяСтруктураЗапросов();
			ЗаполнитьЗначенияСвойств(СтруктураЗапросов, СтрокаТЧ);
			
			СтруктураЗапросов.ПокупательНаименование = СтрокаТЧ.Организация.Наименование;
			СтруктураЗапросов.СуммаДокумента         = СтрокаТЧ.СуммаДокумента.Значение;
			СтруктураЗапросов.Регион                 = СтрокаТЧ.Доставка.Представление;
			
			Если СтрокаТЧ.ИтогиПоискаПоТексту.Количество() Тогда
				СтруктураЗапросов.ТекстПоиска = СтрСоединить(СтрокаТЧ.ИтогиПоискаПоТексту, ", ");
			КонецЕсли;
			
			СписокКатегорий = СтрокаТЧ.КатегорииНоменклатуры.ВыгрузитьКолонку("Наименование");
			
			СтруктураЗапросов.КатегорииЗапроса = СтрСоединить(СписокКатегорий, ", ");
			
			МассивЗапросовИзСервиса.Добавить(СтруктураЗапросов);
			
		КонецЦикла;
		
		Если МассивЗапросовИзСервиса.Количество() > 0 Тогда
			ДанныеСервиса.Вставить("МассивЗапросовИзСервиса", МассивЗапросовИзСервиса);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеСервиса;

КонецФункции

&НаСервереБезКонтекста
Функция НоваяСтруктураЗапросов()
	
	СтруктураЗапросов = Новый Структура;
	
	СтруктураЗапросов.Вставить("ВалютаДокумента",         "");
	СтруктураЗапросов.Вставить("ВсегоПозиций",            0);
	СтруктураЗапросов.Вставить("ВсегоРелевантныхПозиций", 0);
	СтруктураЗапросов.Вставить("ДатаОкончанияСбора",      Дата(1,1,1));
	СтруктураЗапросов.Вставить("Идентификатор",           "");
	СтруктураЗапросов.Вставить("КатегорииЗапроса",        "");
	СтруктураЗапросов.Вставить("ПокупательНаименование",  "");
	СтруктураЗапросов.Вставить("ПризнакПросмотра",        0);
	СтруктураЗапросов.Вставить("Регион",                  "");
	СтруктураЗапросов.Вставить("СуммаДокумента",          0);
	СтруктураЗапросов.Вставить("СуммаРелевантныхПозиций", 0);
	СтруктураЗапросов.Вставить("ТекстПоиска",             "");
	
	Возврат СтруктураЗапросов;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьТаблицуЗапросов(ДанныеСервиса)

	Если ДанныеСервиса = Неопределено Тогда
		Список.Очистить();
		Возврат;
	КонецЕсли;
	
	РезультатВывод = Неопределено;
	Если ДанныеСервиса.Свойство("Вывод", РезультатВывод) Тогда
		Страница = РезультатВывод.ТекущаяСтраница;
		Если Страница < 1 Тогда
			Список.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеСервиса.Свойство("МассивЗапросовИзСервиса") Тогда
		
		Для Каждого ЭлементКоллекции Из ДанныеСервиса.МассивЗапросовИзСервиса Цикл
			
			НоваяСтрока = Список.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементКоллекции);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если РезультатВывод <> Неопределено
		И РезультатВывод.СтраницВсего - 1 > Страница Тогда
		НоваяСтрока = Список.Добавить();
		НоваяСтрока.Продолжить = Истина;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Функция СформироватьПараметрыПоиска(ОбновлятьЭлементыОтбора = Истина)
	
	Если ЕстьПодсистемаРаботаСНоменклатурой Тогда
		МодульРаботаСНоменклатуройСлужебныйКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСНоменклатуройСлужебныйКлиент");
		
		Если ПредставлениеКатегории = "" Тогда
			ПредставлениеКатегории = НСтр("ru='Все категории'");
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыПоиска = Новый Структура;
		
	Если ТекущаяКатегория = "" Тогда
		Заголовок = НСтр("ru = 'Запросы коммерческих предложений через 1С:Бизнес-сеть'");
	Иначе
		Заголовок = СтрШаблон(НСтр("ru = 'Запросы в рубрике - %1'"), ПредставлениеКатегории);
	КонецЕсли;
	
	ПараметрыПоиска.Вставить("Организация"                      , ОтборОрганизация);
	ПараметрыПоиска.Вставить("Валюта"                           , ПолучитьКодСправочника(Валюта));
	ПараметрыПоиска.Вставить("ВалютаПредставление"              , Строка(Валюта));
	ПараметрыПоиска.Вставить("ВалютаСсылка"                     , Валюта);
	ПараметрыПоиска.Вставить("ИдентификаторКатегории"           , ТекущаяКатегория);
	ПараметрыПоиска.Вставить("Категория"                        , ПредставлениеКатегории);
	ПараметрыПоиска.Вставить("НомерСтраницы"                    , Страница);
	
	Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
		ПараметрыПоиска.Вставить("НазваниеТовара"               , СтрокаПоиска);
	КонецЕсли;
	
	// Регионы.
	Если ЗначениеЗаполнено(РегионПоиска.РежимОтбора) И ИдентификаторыРегионов.Количество() > 0 Тогда
		ПараметрыПоиска.Вставить("РегионыДоставкиИдентификатор" , ИдентификаторыРегионов[0].Идентификатор);
		ПараметрыПоиска.Вставить("РегионыДоставкиКодСтраны"     , ИдентификаторыРегионов[0].КодСтраны);
	КонецЕсли;
	
	ИдентификаторыЗначений    = Неопределено;
	ДанныеСтрокДереваОтборов  = Новый Соответствие;
	МассивАтрибутов           = Новый Массив;
	
	БыстрыеОтборы.Очистить();
	
	ЭлементыОтборов = ДеревоОтборов.ПолучитьЭлементы();
	
	Для Каждого ЭлементОтбора Из ЭлементыОтборов Цикл
		
		Если НЕ ЭлементОтбора.Отбор Тогда
			Продолжить;
		КонецЕсли;
		
		ИдентификаторОтбора = ЭлементОтбора.Идентификатор;
				
		Если ЭлементОтбора.ФиксированныйОтбор Тогда
			
			ДобавитьБыстрыйОтбор        = Ложь;

			Если ИдентификаторОтбора = "Покупатель" Тогда
				
				Если НЕ ЗначениеЗаполнено(ЭлементОтбора.ЗначениеОтбора) Тогда
					Продолжить;
				КонецЕсли;
				
				ПараметрыПоиска.Вставить("ПокупательНаименование"        , ЭлементОтбора.ЗначениеОтбора);
				
				ДобавитьБыстрыйОтбор = Истина;
				
			ИначеЕсли ИдентификаторОтбора = "Количество" Тогда
				
				Если НЕ ЗначениеЗаполнено(ЭлементОтбора.ИнтервалОт)
					И НЕ ЗначениеЗаполнено(ЭлементОтбора.ИнтервалДо) Тогда
					Продолжить;
				КонецЕсли;
				
				ПараметрыПоиска.Вставить("МинимальноеКоличество"         , ЭлементОтбора.ИнтервалОт);
				ПараметрыПоиска.Вставить("МаксимальноеКоличество"        , ЭлементОтбора.ИнтервалДо);
				ПараметрыПоиска.Вставить("ЕдиницаИзмерения"              , ПолучитьКодСправочника(ЕдиницаИзмерения));
				ПараметрыПоиска.Вставить("ЕдиницаИзмеренияПредставление" , Строка(ЕдиницаИзмерения));
				
				ДобавитьБыстрыйОтбор = Истина;
				
			ИначеЕсли ИдентификаторОтбора = "Цена" Тогда
				
				Если НЕ ЗначениеЗаполнено(ЭлементОтбора.ИнтервалОт)
					И НЕ ЗначениеЗаполнено(ЭлементОтбора.ИнтервалДо) Тогда
					Продолжить;
				КонецЕсли;

				ПараметрыПоиска.Вставить("ЦенаПозицииОт"                 , ЭлементОтбора.ИнтервалОт);
				ПараметрыПоиска.Вставить("ЦенаПозицииДо"                 , ЭлементОтбора.ИнтервалДо);
				
				ДобавитьБыстрыйОтбор = Истина;
				
			ИначеЕсли ИдентификаторОтбора = "Сумма" Тогда
				
				Если НЕ ЗначениеЗаполнено(ЭлементОтбора.ИнтервалОт)
					И НЕ ЗначениеЗаполнено(ЭлементОтбора.ИнтервалДо) Тогда
					Продолжить;
				КонецЕсли;

				ПараметрыПоиска.Вставить("СуммаПозицииОт"                , ЭлементОтбора.ИнтервалОт);
				ПараметрыПоиска.Вставить("СуммаПозицииДо"                , ЭлементОтбора.ИнтервалДо);
				
				ДобавитьБыстрыйОтбор = Истина;
				
			ИначеЕсли ИдентификаторОтбора = "ОбщаяСумма" Тогда
				
				Если НЕ ЗначениеЗаполнено(ЭлементОтбора.ИнтервалОт)
					И НЕ ЗначениеЗаполнено(ЭлементОтбора.ИнтервалДо) Тогда
					Продолжить;
				КонецЕсли;
				
				ПараметрыПоиска.Вставить("СуммаДокументаОт"              , ЭлементОтбора.ИнтервалОт);
				ПараметрыПоиска.Вставить("СуммаДокументаДо"              , ЭлементОтбора.ИнтервалДо);
				
				ДобавитьБыстрыйОтбор = Истина;
				
			ИначеЕсли ИдентификаторОтбора = "ОтборНоменклатуры" Тогда
				
				УстановленОтборПоНоменклатуре = ЭлементОтбора.ЗначениеОтбора.Количество() > 0;
				Если УстановленОтборПоНоменклатуре Тогда
					ПараметрыПоиска.Вставить("ОтборСписокНоменклатуры"   , ЭлементОтбора.ЗначениеОтбора);
				КонецЕсли;
				
				БыстрыеОтборы.Добавить(ИдентификаторОтбора, ЭлементОтбора.Представление);
				
			ИначеЕсли ИдентификаторОтбора = "МожетОбеспечиватьсяЧастично" Тогда
				
				Если ЭлементОтбора.ЗначениеОтбора <> Неопределено Тогда
					ПараметрыПоиска.Вставить("ЧастичноеЗакрытиеРазрешено", ЭлементОтбора.ЗначениеОтбора);
					
					ДобавитьБыстрыйОтбор = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ДобавитьБыстрыйОтбор Тогда
				
				ПредставлениеОтбора = ЭлементОтбора.Представление + ": " + ЭлементОтбора.ПредставлениеОтбора;
				
				БыстрыеОтборы.Добавить(ИдентификаторОтбора, ПредставлениеОтбора);
				
			КонецЕсли;

		Иначе
			Если ЕстьПодсистемаРаботаСНоменклатурой Тогда
				СтруктураАтрибутов = Неопределено;
				МодульРаботаСНоменклатуройСлужебныйКлиент.ОбработатьЭлементыДереваОтборовПоДополнительнымРеквизитам(ЭлементОтбора, БыстрыеОтборы,
					СтруктураАтрибутов);
				
				Если СтруктураАтрибутов <> Неопределено Тогда
					МассивАтрибутов.Добавить(СтруктураАтрибутов);
					
					Если ЭлементОтбора.ЗначениеОтбора = "Список" Тогда
						ИдентификаторыЗначений = Новый СписокЗначений;
						ИдентификаторыЗначений.ЗагрузитьЗначения(СтруктураАтрибутов.ИдентификаторыЗначений);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		СтруктураПараметровОтбора = ПараметрыСтруктурыОтбораДерева();
		ЗаполнитьЗначенияСвойств(СтруктураПараметровОтбора, ЭлементОтбора);
		
		Если ЕстьПодсистемаРаботаСНоменклатурой Тогда
			СтруктураПараметровОтбора.Вставить("ИдентификаторыЗначений", ИдентификаторыЗначений);
		КонецЕсли;
		
		ДанныеСтрокДереваОтборов.Вставить(ИдентификаторОтбора, СтруктураПараметровОтбора);
		
	КонецЦикла;

	Если МассивАтрибутов.Количество() Тогда
		ПараметрыПоиска.Вставить("РеквизитыКатегорииОтбора", МассивАтрибутов);
	КонецЕсли;
	
	Если ДанныеСтрокДереваОтборов.Количество() Тогда
		ПараметрыПоиска.Вставить("ДанныеДереваОтборов", ДанныеСтрокДереваОтборов);
	КонецЕсли;
	
	Если ОбновлятьЭлементыОтбора Тогда
		ИзменитьБыстрыеОтборыНаФорме();
	КонецЕсли;
	
	ПараметрыПоиска.Вставить("БыстрыеОтборы", БыстрыеОтборы);

	Возврат ПараметрыПоиска;
	
КонецФункции

&НаКлиенте
Функция ПараметрыСтруктурыОтбораДерева()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЗначениеОтбора",      Неопределено);
	СтруктураПараметров.Вставить("ИнтервалОт",          Неопределено);
	СтруктураПараметров.Вставить("ИнтервалДо",          Неопределено);
	СтруктураПараметров.Вставить("ПредставлениеОтбора", "");
	СтруктураПараметров.Вставить("Отбор",               Истина);
	СтруктураПараметров.Вставить("СписокВыбора",        Новый СписокЗначений);
	СтруктураПараметров.Вставить("ДочерниеПодгружены",  Ложь);
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьФиксированныеОтборыДерева(ДеревоОтборов, Знач ЕдиницаИзмерения)
	
	ЭлементыОтбора = ДеревоОтборов.ПолучитьЭлементы();
	ЭлементыОтбора.Очистить();
	
	// Покупатель.
	НовыйОтбор = ЭлементыОтбора.Добавить();
	НовыйОтбор.ФиксированныйОтбор            = Истина;
	НовыйОтбор.Идентификатор                 = "Покупатель";
	НовыйОтбор.ИмяРеквизита                  = "Покупатель";
	НовыйОтбор.Представление                 = НСтр("ru = 'Покупатель'");
	НовыйОтбор.ЗначениеОтбора                = "";
	НовыйОтбор.ОтборДоступен                 = Истина;
	
	ПредставлениеЕдиницыИзмерения = "";
	Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
		ПредставлениеЕдиницыИзмерения = Строка(ЕдиницаИзмерения);
	КонецЕсли;
	
	// Количество.
	НовыйОтбор = ЭлементыОтбора.Добавить();
	НовыйОтбор.ФиксированныйОтбор           = Истина;
	НовыйОтбор.Идентификатор                = "Количество";
	НовыйОтбор.ИмяРеквизита                 = "Количество";
	НовыйОтбор.Представление                = НСтр("ru = 'Количество товара (услуги)'")
		+ ?(ЗначениеЗаполнено(ПредставлениеЕдиницыИзмерения), ", (" + ПредставлениеЕдиницыИзмерения + ")", "");
	НовыйОтбор.ЗначениеОтбора               = 0;
	НовыйОтбор.ФиксированноеЗначение        = Истина;
	НовыйОтбор.ПредставлениеОтбора          = НСтр("ru = '<не задано>'");
	НовыйОтбор.ОтборДоступен                = Истина;
	
	// Цена.
	НовыйОтбор = ЭлементыОтбора.Добавить();
	НовыйОтбор.ФиксированныйОтбор           = Истина;
	НовыйОтбор.Идентификатор                = "Цена";
	НовыйОтбор.ИмяРеквизита                 = "Цена";
	НовыйОтбор.Представление                = НСтр("ru = 'Цена товара (услуги)'");
	НовыйОтбор.ЗначениеОтбора               = 0;
	НовыйОтбор.ФиксированноеЗначение        = Истина;
	НовыйОтбор.ПредставлениеОтбора          = НСтр("ru = '<не задано>'");
	НовыйОтбор.ОтборДоступен                = Истина;
	
	// Сумма.
	НовыйОтбор = ЭлементыОтбора.Добавить();
	НовыйОтбор.ФиксированныйОтбор           = Истина;
	НовыйОтбор.Идентификатор                = "Сумма";
	НовыйОтбор.ИмяРеквизита                 = "Сумма";
	НовыйОтбор.Представление                = НСтр("ru = 'Сумма товара (услуги)'");
	НовыйОтбор.ЗначениеОтбора               = 0;
	НовыйОтбор.ФиксированноеЗначение        = Истина;
	НовыйОтбор.ПредставлениеОтбора          = НСтр("ru = '<не задано>'");
	НовыйОтбор.ОтборДоступен                = Истина;
	
	// Общая сумма заявки.
	НовыйОтбор = ЭлементыОтбора.Добавить();
	НовыйОтбор.ФиксированныйОтбор           = Истина;
	НовыйОтбор.Идентификатор                = "ОбщаяСумма";
	НовыйОтбор.ИмяРеквизита                 = "ОбщаяСумма";
	НовыйОтбор.Представление                = НСтр("ru = 'Общая сумма заявки'");
	НовыйОтбор.ЗначениеОтбора               = 0;
	НовыйОтбор.ФиксированноеЗначение        = Истина;
	НовыйОтбор.ПредставлениеОтбора          = НСтр("ru = '<не задано>'");
	НовыйОтбор.ОтборДоступен                = Истина;
	
	// Отбор по номенклатуре.
	НовыйОтбор = ЭлементыОтбора.Добавить();
	НовыйОтбор.ФиксированныйОтбор           = Истина;
	НовыйОтбор.Идентификатор                = "ОтборНоменклатуры";
	НовыйОтбор.ИмяРеквизита                 = "ОтборНоменклатуры";
	НовыйОтбор.Представление                = НСтр("ru = 'Отбирать по моей номенклатуре'");
	НовыйОтбор.ЗначениеОтбора               = Новый СписокЗначений;
	НовыйОтбор.ФиксированноеЗначение        = Истина;
	НовыйОтбор.ПредставлениеОтбора          = НСтр("ru = '<не задано>'");
	НовыйОтбор.ОтборДоступен                = Истина;
	
	// Может обеспечиваться частично: да, нет, не важно.
	СписокВыбораОбеспечения = Новый СписокЗначений;
	СписокВыбораОбеспечения.Добавить(НСтр("ru = 'да'"));
	СписокВыбораОбеспечения.Добавить(НСтр("ru = 'нет'"));
	СписокВыбораОбеспечения.Добавить(НСтр("ru = 'не важно'"));
	
	НовыйОтбор = ЭлементыОтбора.Добавить();
	НовыйОтбор.ФиксированныйОтбор           = Истина;
	НовыйОтбор.Идентификатор                = "МожетОбеспечиватьсяЧастично";
	НовыйОтбор.ИмяРеквизита                 = "МожетОбеспечиватьсяЧастично";
	НовыйОтбор.Представление                = НСтр("ru = 'Может обеспечиваться частично'");
	НовыйОтбор.ЗначениеОтбора               = Неопределено;
	НовыйОтбор.ПредставлениеОтбора          = НСтр("ru = 'не важно'");
	НовыйОтбор.ФиксированноеЗначение        = Ложь;
	НовыйОтбор.ОтборДоступен                = Истина;
	НовыйОтбор.СписокВыбора                 = СписокВыбораОбеспечения;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОтборыПоПараметрамПоиска(ПараметрыИсторииПоиска)
	
	НоваяВалюта = Неопределено;
	
	ПараметрыИсторииПоиска.Свойство("НазваниеТовара"              , СтрокаПоиска);
	ПараметрыИсторииПоиска.Свойство("ВалютаСсылка"                , НоваяВалюта);
	ПараметрыИсторииПоиска.Свойство("РежимСортировки"             , РежимСортировки);
	ПараметрыИсторииПоиска.Свойство("РегионРежимОтбора"           , РегионПоиска.РежимОтбора);
	ПараметрыИсторииПоиска.Свойство("РегионЗначенияПолей"         , РегионПоиска.ЗначенияПолей);
	ПараметрыИсторииПоиска.Свойство("СтатусНеОбработанные"        , ОтборНеОбработанные);
	ПараметрыИсторииПоиска.Свойство("СтатусСохраненные"           , ОтборСохраненные);
	ПараметрыИсторииПоиска.Свойство("СтатусЕстьОтветНаЗапрос"     , ОтборЕстьОтветНаЗапрос);
	ПараметрыИсторииПоиска.Свойство("СтатусСнятыеСРассмотрения"   , ОтборСнятыеСРассмотрения);
	ПараметрыИсторииПоиска.Свойство("БыстрыеОтборы"               , БыстрыеОтборы);
	
	Если Валюта <> НоваяВалюта Тогда
		Валюта = НоваяВалюта;
		ЗаполнитьПредставлениеВалюты(ЭтотОбъект);
	КонецЕсли;
	
	Если НЕ Элементы.ПоказатьСкрытьОтборы.Пометка Тогда
		УстановитьВидимостьОтборов(Ложь, Элементы);
	КонецЕсли;
	
	Если ДеревоОтборов.ПолучитьЭлементы().Количество() = 0 Тогда
		ЗаполнитьФиксированныеОтборыДерева(ДеревоОтборов, ЕдиницаИзмерения);
	КонецЕсли;
	
	Если ЕстьПодсистемаРаботаСНоменклатурой Тогда
		ПараметрыИсторииПоиска.Свойство("ИдентификаторКатегории"   , ТекущаяКатегория);
		ПараметрыИсторииПоиска.Свойство("Категория"                , ПредставлениеКатегории);
		
		ЗагрузитьКатегорииСервиса(ТекущаяКатегория, Истина, Истина, ПараметрыИсторииПоиска);
	Иначе
		ЗаполнитьЗапросы(ПараметрыИсторииПоиска);
	КонецЕсли;

КонецПроцедуры

#Область УправлениеБыстрымОтбором

&НаКлиенте
Процедура ОчиститьБыстрыеОтборыИДерево()
	
	СтрокиДереваОтборов = ДеревоОтборов.ПолучитьЭлементы();
	УдалитьНеФиксированныеБыстрыеОтборы(СтрокиДереваОтборов, БыстрыеОтборы);
	
	МодульРаботаСНоменклатуройСлужебныйКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСНоменклатуройСлужебныйКлиент");
	МодульРаботаСНоменклатуройСлужебныйКлиент.УдалитьНеФиксированныеОтборыДереваОтборов(ДеревоОтборов);
	
	УбратьВидимостьБыстрыхОтборов(0);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьНеФиксированныеБыстрыеОтборы(СтрокиДереваОтборов, БыстрыеОтборы)
	
	Для Каждого СтрокаОтбора Из СтрокиДереваОтборов Цикл
		
		Если СтрокаОтбора.ФиксированныйОтбор Тогда
			Продолжить;
		КонецЕсли;
		
		НайденныйЭлемент = БыстрыеОтборы.НайтиПоЗначению(СтрокаОтбора.Идентификатор);
		Если НайденныйЭлемент <> Неопределено Тогда
			БыстрыеОтборы.Удалить(НайденныйЭлемент);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Нажатие(Элемент)
	
	Если Найти(Элемент.Имя, "ОчиститьОтбор_") Тогда
		
		ИдентификаторОтбора = Элемент.Заголовок;
		СтрокиДереваОтборов = ДеревоОтборов.ПолучитьЭлементы();
		Для Каждого СтрокаОтбора Из СтрокиДереваОтборов Цикл
			
			Если СтрокаОтбора.Идентификатор = ИдентификаторОтбора Тогда
				
				СтрокаОтбора.Отбор = Ложь;
				Если СтрокаОтбора.ЗначениеОтбора = "Список" Тогда
					СтрокиЗначенийОтбора = СтрокаОтбора.ПолучитьЭлементы();
					Для Каждого СтрокаЗначения Из СтрокиЗначенийОтбора Цикл
						СтрокаЗначения.Отбор = Ложь;
					КонецЦикла;
				КонецЕсли;
				
				Если СтрокаОтбора.ФиксированныйОтбор Тогда
					Продолжить;
				КонецЕсли;
				
				НайденныйЭлемент = БыстрыеОтборы.НайтиПоЗначению(ИдентификаторОтбора);
				Если НайденныйЭлемент <> Неопределено Тогда
					БыстрыеОтборы.Удалить(НайденныйЭлемент);
				КонецЕсли;

			КонецЕсли;
			
		КонецЦикла;
		
		ЗаполнитьЗапросы();
		
	ИначеЕсли Найти(Элемент.Имя, "ЗаголовокОтбора_Еще") Тогда
		
		Если НЕ Элементы.ПоказатьСкрытьОтборы.Пометка Тогда
			УстановитьВидимостьОтборов(Ложь, Элементы);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаголовокОтбораОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Найти(Элемент.Имя, "ЗаголовокОтбора_") Тогда
		
		СтрокиДереваОтборов = ДеревоОтборов.ПолучитьЭлементы();
		Для Каждого СтрокаОтбора Из СтрокиДереваОтборов Цикл
			Если СтрокаОтбора.Идентификатор = НавигационнаяСсылкаФорматированнойСтроки Тогда
				Элементы.ДеревоОтборов.ТекущаяСтрока = СтрокаОтбора.ПолучитьИдентификатор();
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ Элементы.ПоказатьСкрытьОтборы.Пометка Тогда
			УстановитьВидимостьОтборов(Ложь, Элементы);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьБыстрыеОтборыНаФорме(ОбновитьОтборы = Ложь)

	ВыбраноОтборов = 0;
	
	Для Каждого ЭлементОтбора Из БыстрыеОтборы Цикл
		
		Если ЭлементОтбора.Пометка И НЕ ОбновитьОтборы Тогда
			Продолжить;
		КонецЕсли;
				
		Если ВыбраноОтборов < 10 Тогда
			
			ЭлементЗаголовокОтбора = Элементы["ЗаголовокОтбора_" + ВыбраноОтборов];
			
			Представление = ЭлементОтбора.Представление;
			ПредставлениеОтбора = Сред(Представление, СтрНайти(Представление, ":")+1);
			Если СтрДлина(ПредставлениеОтбора) > 85 Тогда
				ПредставлениеЗаголовка = Лев(ПредставлениеОтбора, 82) + "...";
			Иначе
				ПредставлениеЗаголовка = ПредставлениеОтбора;
			КонецЕсли;
			
			МассивСтрок = Новый Массив;
			МассивСтрок.Добавить(Лев(Представление, СтрНайти(Представление, ":")));
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(ПредставлениеЗаголовка,, ЦветаСтиляЦветТекстаФормы));
			ЭлементЗаголовокОтбора.Заголовок = Новый ФорматированнаяСтрока(МассивСтрок, , ЦветаСтиляПоясняющийТекст, , ЭлементОтбора.Значение);
			ЭлементЗаголовокОтбора.Видимость = Истина;
			
			ЭлементОчиститьОтбор = Элементы["ОчиститьОтбор_" + ВыбраноОтборов];
			ЭлементОчиститьОтбор.Заголовок = ЭлементОтбора.Значение;
			ЭлементОчиститьОтбор.Видимость = Истина;

			ВыбраноОтборов = ВыбраноОтборов + 1;
			
		КонецЕсли;
		ЭлементОтбора.Пометка = Истина;
	КонецЦикла;
	
	Если ВыбраноОтборов < БыстрыеОтборы.Количество() Тогда
		ЭлементЗаголовокОтбора = Элементы["ЗаголовокОтбора_Еще"];
		ЭлементЗаголовокОтбора.Заголовок = СтрШаблон(НСтр("ru = 'И еще %1'"), БыстрыеОтборы.Количество() - ВыбраноОтборов);
		ЭлементЗаголовокОтбора.Видимость = Истина;
	Иначе
		УбратьВидимостьБыстрыхОтборов(ВыбраноОтборов, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УбратьВидимостьБыстрыхОтборов(ВыбраноОтборов, ОбновитьОтборы = Ложь)
	
	Для Счетчик = ВыбраноОтборов По 9 Цикл
		
		ЭлементОчиститьОтбор = Элементы["ОчиститьОтбор_" + Счетчик];
		
		БыстрыйОтбор = БыстрыеОтборы.НайтиПоЗначению(ЭлементОчиститьОтбор.Заголовок);
		Если БыстрыйОтбор = Неопределено ИЛИ ОбновитьОтборы Тогда
			
			ЭлементЗаголовокОтбора = Элементы["ЗаголовокОтбора_" + Счетчик];
			ЭлементЗаголовокОтбора.Видимость = Ложь;
			ЭлементОчиститьОтбор.Видимость   = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
		
	ЭлементЗаголовокОтбора = Элементы["ЗаголовокОтбора_Еще"];
	ЭлементЗаголовокОтбора.Видимость = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСКатегориями

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьОтборов(Знач ВидимостьОтборов, Элементы)
	
	Элементы.ПоказатьСкрытьОтборы.Пометка       = НЕ ВидимостьОтборов;
	Элементы.ГруппаОтборов.Видимость            = НЕ ВидимостьОтборов;
	Элементы.ГруппаЗаголовкаСвойств.Видимость   = Элементы.ПоказатьСкрытьОтборы.Пометка И НЕ Элементы.ПоказатьСкрытьКатегории.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКатегорииСервиса(ИдентификаторКатегории, ВосстановитьДеревоКатегорий = Ложь,
			ОбновитьСписокЗапросов = Истина, ПараметрыИсторииПоиска = Неопределено)
			
	Если НЕ ИнтернетПоддержкаПодключена Тогда
		СообщитьПользователюОбОтсутствииПодключенияИнтернетПоддержки();
		Возврат;
	КонецЕсли;
	
	ТекущаяКатегория     = ИдентификаторКатегории;
	ТекущаяВетка         = Неопределено;
	ТребуетсяЗагрузка    = Истина;
	
	МодульРаботаСНоменклатуройСлужебныйКлиент       = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСНоменклатуройСлужебныйКлиент");
	МодульРаботаСНоменклатуройСлужебныйКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСНоменклатуройСлужебныйКлиентСервер");
	МодульРаботаСНоменклатуройСлужебныйКлиентСервер.ПодготовитьТекущуюВеткуКатегории(Категории, ИдентификаторКатегории, ТекущаяВетка, ТребуетсяЗагрузка);
	
	КэшКатегорий = МодульРаботаСНоменклатуройСлужебныйКлиент.ПолучитьКэшКатегорий();

	Если НЕ ЗначениеЗаполнено(СтрокаПоискаКатегорий)
		И ПараметрыИсторииПоиска <> Неопределено
		И ТекущаяВетка <> Неопределено Тогда
		
		ВыбранныйИдентификатор = ТекущаяВетка.ПолучитьИдентификатор();
		Если Элементы.Категории.ТекущаяСтрока <> ВыбранныйИдентификатор Тогда
			Элементы.Категории.ТекущаяСтрока   = ВыбранныйИдентификатор;
		КонецЕсли;
		
		ТекущаяВетка.ВОбработке          = Ложь;
		
		МодульРаботаСНоменклатуройСлужебныйКлиент.УстановитьВидимостьДоступностьЭлементовКатегорийПриДлительнойОперации(
		Элементы, КоличествоЗаданий);
		МодульРаботаСНоменклатуройСлужебныйКлиентСервер.УстановитьВидимостьОбластиКатегорий(Элементы,
		Категории.ПолучитьЭлементы().Количество() > 0);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ЕстьФиксированныеОтборы",         Истина);
		ДополнительныеПараметры.Вставить("ИсключитьВыводПроизводителей",    Истина);
		ДополнительныеПараметры.Вставить("ИспользоватьИнтервалВводаДанных", Ложь);
		
		МодульРаботаСНоменклатуройСлужебныйКлиент.СформироватьИзКэшаОтборыПоДополнительнымРеквизитам(ДеревоОтборов, КэшКатегорий,
		ТекущаяКатегория, ТекущаяВетка, ДополнительныеПараметры);
		
		ЗаполнитьДеревоОтборовПоДаннымИзИсторииПоиска(ПараметрыИсторииПоиска);
		
		ЗаполнитьЗапросы(ПараметрыИсторииПоиска);
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ТребуетсяЗагрузка
		И НЕ ВосстановитьДеревоКатегорий Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьДанныеИзКэша = Ложь;

	ДлительнаяОперация = ПолучитьОперациюДляЗапросаВСервисе(ИдентификаторКатегории, ВосстановитьДеревоКатегорий,
			ОбновитьСписокЗапросов, ПараметрыИсторииПоиска, ПолучитьДанныеИзКэша, КэшКатегорий);
	
	Если ДлительнаяОперация <> Неопределено Тогда
		
		ПараметрыЗавершения = Новый Структура;
		ПараметрыЗавершения.Вставить("ИдентификаторКатегории"   ,   ИдентификаторКатегории);
		ПараметрыЗавершения.Вставить("ИдентификаторЗадания"     ,   ИдентификаторЗаданияОбработкиРубрикатора);
		ПараметрыЗавершения.Вставить("ОбновитьСписокЗапросов"   ,   ОбновитьСписокЗапросов);
		
		Если НЕ ПустаяСтрока(СтрокаПоискаКатегорий) Тогда
			ПараметрыЗавершения.Вставить("СтрокаПоискаКатегорий",    СтрокаПоискаКатегорий);
		КонецЕсли;
		
		Если ВосстановитьДеревоКатегорий Тогда
			ПараметрыЗавершения.Вставить("ВосстановитьДеревоКатегорий", Истина);
			Если ПараметрыИсторииПоиска <> Неопределено Тогда
				ПараметрыЗавершения.Вставить("ПараметрыИсторииПоиска", ПараметрыИсторииПоиска);
			КонецЕсли;
		КонецЕсли;
		
		КоличествоЗаданий = КоличествоЗаданий + 1;
		
		ПолучитьДанныеСервисаЗавершение = Новый ОписаниеОповещения("ПолучитьКатегорииСервисаЗавершение",
			ЭтотОбъект, ПараметрыЗавершения);
		
		МодульРаботаСНоменклатуройСлужебныйКлиент.НачатьОжиданиеПолученияДанныхСервиса(ПолучитьДанныеСервисаЗавершение,
			ДлительнаяОперация, ЭтотОбъект, ИдентификаторЗаданияОбработкиРубрикатора,
				Элементы.ДекорацияДлительнаяЗагрузкаКатегорий);
	КонецЕсли;

	Если ПолучитьДанныеИзКэша Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИдентификаторКатегории", ИдентификаторКатегории);
		ДополнительныеПараметры.Вставить("ПолучитьДанныеИзКэша",   Истина);
		ДополнительныеПараметры.Вставить("ОбновитьСписокЗапросов", ОбновитьСписокЗапросов);
		
		КоличествоЗаданий = КоличествоЗаданий + 1;
		МодульРаботаСНоменклатуройСлужебныйКлиент.УстановитьВидимостьДоступностьЭлементовКатегорийПриДлительнойОперации(
			Элементы, КоличествоЗаданий);
		
		ПолучитьКатегорииСервисаЗавершение(Неопределено, ДополнительныеПараметры);
		
	Иначе
		МодульРаботаСНоменклатуройСлужебныйКлиент.УстановитьВидимостьДоступностьЭлементовКатегорийПриДлительнойОперации(
			Элементы, КоличествоЗаданий);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПолучитьОперациюДляЗапросаВСервисе(ИдентификаторКатегории, ВосстановитьДеревоКатегорий,
			ОбновитьСписокЗапросов, ПараметрыИсторииПоиска, ПолучитьДанныеИзКэша, КэшКатегорий)
			
	МодульРаботаСНоменклатуройСлужебныйВызовСервера = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСНоменклатуройСлужебныйВызовСервера");
	МодульРаботаСНоменклатуройСлужебныйКлиент       = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСНоменклатуройСлужебныйКлиент");
	МодульРаботаСНоменклатуройСлужебныйКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСНоменклатуройСлужебныйКлиентСервер");
	
	ЕстьКорневыеКатегории = Категории.ПолучитьЭлементы().Количество() > 0;
	Если НЕ ЕстьКорневыеКатегории И ИдентификаторКатегории = Неопределено И НЕ ЗначениеЗаполнено(СтрокаПоискаКатегорий)
		И НЕ ЗначениеЗаполнено(СтрокаПоиска) Тогда
		
		Если МодульРаботаСНоменклатуройСлужебныйКлиентСервер.ЕстьКорневыеКатегорииВКэше(КэшКатегорий) Тогда
			МодульРаботаСНоменклатуройСлужебныйКлиент.ВосстановитьКатегорииИзКэша(КэшКатегорий, "", Категории, СписокРазвернутыхКатегорий,
				РазвернутыеСтрокиИндекс, Элементы);
			ЗаполнитьЗапросы(ПараметрыИсторииПоиска);
		Иначе
			ДлительнаяОперация = ОперацияЗагрузкаКатегорий;
		КонецЕсли;
		
	ИначеЕсли ВосстановитьДеревоКатегорий Тогда
		
		Если ЗначениеЗаполнено(СтрокаПоискаКатегорий) Тогда
			СтрокаПоискаКатегорий = "";
			Элементы.Категории.Отображение = ОтображениеТаблицы.Дерево;
		КонецЕсли;
		
		КатегорииВосстановлены = МодульРаботаСНоменклатуройСлужебныйКлиент.ВосстановитьКатегорииИзКэшаИНайтиТекущуюВетку(КэшКатегорий,
			ИдентификаторКатегории, Категории, СписокРазвернутыхКатегорий, РазвернутыеСтрокиИндекс,
				Элементы, Элементы.ПоказатьСкрытьКатегории.Пометка);
				
		Если КатегорииВосстановлены Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если Категории.ПолучитьЭлементы().Количество() = 0 Тогда
			ДлительнаяОперация = МодульРаботаСНоменклатуройСлужебныйВызовСервера.ПолучитьКатегорииНаПутиКЭлементуСКорневымиКатегориямиВФоне(
				ИдентификаторКатегории, Неопределено, УникальныйИдентификатор, ИдентификаторЗаданияОбработкиРубрикатора);
		Иначе
			Если Элементы.ПоказатьСкрытьКатегории.Пометка Тогда
				КоличествоЗаданийЗагрузкиКатегорий = КоличествоЗаданийЗагрузкиКатегорий + 1;
			КонецЕсли;
			
			ПараметрыОтборов = Неопределено;
			Если ПараметрыИсторииПоиска <> Неопределено Тогда
				
				ПараметрыОтборов = Новый Структура;
				ПараметрыОтборов.Вставить("ПолучитьДополнительныеРеквизиты", Истина);
				
			КонецЕсли;
			
			ДлительнаяОперация = МодульРаботаСНоменклатуройСлужебныйВызовСервера.ПолучитьКатегорииНаПутиКЭлементуВФоне(
				ИдентификаторКатегории, ПараметрыОтборов, УникальныйИдентификатор, ИдентификаторЗаданияОбработкиРубрикатора);
		КонецЕсли;
			
	ИначеЕсли ЗначениеЗаполнено(СтрокаПоискаКатегорий) И ИдентификаторКатегории = Неопределено Тогда
		
		ДлительнаяОперация = МодульРаботаСНоменклатуройСлужебныйКлиент.ПоискКатегорийПоСтроке(СтрокаПоискаКатегорий,
			УникальныйИдентификатор, ИдентификаторЗаданияОбработкиРубрикатора);

	Иначе
			
		Если МодульРаботаСНоменклатуройСлужебныйКлиент.ЗагрузитьДанныеДочернихИзКэша(ИдентификаторКатегории, КэшКатегорий) Тогда
			ПолучитьДанныеИзКэша = Истина;
			Возврат Неопределено;
		КонецЕсли;
		
		ДлительнаяОперация = МодульРаботаСНоменклатуройСлужебныйВызовСервера.ПолучитьДочерниеКатегорииВФоне(
			ИдентификаторКатегории, 2, УникальныйИдентификатор, ИдентификаторЗаданияОбработкиРубрикатора);
			
		КоличествоЗаданийЗагрузкиКатегорий = КоличествоЗаданийЗагрузкиКатегорий + 1;
	КонецЕсли;
		
	Возврат ДлительнаяОперация;
		
КонецФункции

&НаКлиенте
Процедура ПолучитьКатегорииСервисаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПолучитьДанныеИзКэша = ДополнительныеПараметры.Свойство("ПолучитьДанныеИзКэша");
	МодульРаботаСНоменклатуройСлужебныйКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСНоменклатуройСлужебныйКлиент");

	Если НЕ ПолучитьДанныеИзКэша Тогда
		Если Результат.Сообщения <> Неопределено Тогда
			Для Каждого Сообщение Из Результат.Сообщения Цикл
				Сообщение.Сообщить();
			КонецЦикла;
		КонецЕсли;
		
		Если ИдентификаторЗаданияОбработкиРубрикатора <> ДополнительныеПараметры.ИдентификаторЗадания Тогда
			МодульРаботаСНоменклатуройСлужебныйКлиент.НайтиИСвернутьОткрытуюНеЗагруженнуюКатегорию(Категории,
				ДополнительныеПараметры.ИдентификаторКатегории, Элементы, КоличествоЗаданий);
			КоличествоЗаданийЗагрузкиКатегорий = Макс(КоличествоЗаданийЗагрузкиКатегорий - 1, 0);
			Возврат;
		КонецЕсли;
		
		ИдентификаторЗаданияОбработкиРубрикатора = Неопределено;
		
	КонецЕсли;
	
	ИдентификаторКатегории         = Неопределено;
	МассивИдентификаторовРодителей = Новый Массив();
	СтруктураПоискаКатегорий       = Новый Структура;
	ПараметрыИсторииПоиска         = Неопределено;
	ВыбранныйИдентификатор         = Неопределено;
	ОбновитьСписокЗапросов         = ДополнительныеПараметры.ОбновитьСписокЗапросов;
	ВосстановитьДеревоКатегорий    = ДополнительныеПараметры.Свойство("ВосстановитьДеревоКатегорий");
	ЭтоПоискКатегорий              = ДополнительныеПараметры.Свойство("СтрокаПоискаКатегорий");
	КэшКатегорий                   = МодульРаботаСНоменклатуройСлужебныйКлиент.ПолучитьКэшКатегорий();
	
	ДополнительныеПараметры.Свойство("ИдентификаторКатегории", ИдентификаторКатегории);
	
	Если НЕ ПолучитьДанныеИзКэша Тогда
		ОбработатьДанныеСервиса(Результат.АдресРезультата, ДополнительныеПараметры, КэшКатегорий, СтруктураПоискаКатегорий,
			ЭтоПоискКатегорий, МассивИдентификаторовРодителей);
	КонецЕсли;
		
	ДополнительныеПараметры.Свойство("ПараметрыИсторииПоиска", ПараметрыИсторииПоиска);
	ЗаполнитьДеревоКатегорийИзКэша(ЭтоПоискКатегорий, ИдентификаторКатегории, СтруктураПоискаКатегорий,
			МассивИдентификаторовРодителей, КэшКатегорий, ВосстановитьДеревоКатегорий, ПараметрыИсторииПоиска);
		
	Если ЗначениеЗаполнено(КэшКатегорий) И НЕ ПолучитьДанныеИзКэша Тогда
		МодульРаботаСНоменклатуройСлужебныйКлиент.СохранитьКэшКатегорий(КэшКатегорий);
	КонецЕсли;
	
	Если ПараметрыИсторииПоиска <> Неопределено Тогда
		ЗаполнитьДеревоОтборовПоДаннымИзИсторииПоиска(ПараметрыИсторииПоиска);
	КонецЕсли;
	
	Если НЕ Элементы.ПоказатьСкрытьКатегории.Пометка Тогда
		ЗаполнитьОтборыДополнительнымиХарактеристиками();
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.Категории.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено
		И НЕ Элементы.ПоказатьСкрытьКатегории.Пометка Тогда
		ТекущиеДанные = Категории.НайтиПоИдентификатору(ТекущаяСтрока);
		Если ТекущиеДанные <> Неопределено
			И ПредставлениеКатегории <> ТекущиеДанные.Наименование Тогда
			ПредставлениеКатегории = ТекущиеДанные.Наименование;
		КонецЕсли;
	КонецЕсли;
	
	КоличествоЗаданий = Макс(КоличествоЗаданий - 1, 0);
	МодульРаботаСНоменклатуройСлужебныйКлиент.УстановитьВидимостьДоступностьЭлементовКатегорийПриДлительнойОперации(
		Элементы, КоличествоЗаданий);
		
	Если ОбновитьСписокЗапросов Тогда
		ЗаполнитьЗапросы(ПараметрыИсторииПоиска);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДеревоКатегорийИзКэша(Знач ЭтоПоискКатегорий, Знач ИдентификаторКатегории, СтруктураПоискаКатегорий,
			МассивИдентификаторовРодителей, КэшКатегорий, Знач ВосстановитьДеревоКатегорий, Знач ПараметрыИсторииПоиска)
			
	МодульРаботаСНоменклатуройСлужебныйКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСНоменклатуройСлужебныйКлиент");
	МодульРаботаСНоменклатуройСлужебныйКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСНоменклатуройСлужебныйКлиентСервер");
	НайтиИУстановитьВеткуКатегории            = Ложь;
	
	Если ЭтоПоискКатегорий Тогда // Поиск по строке.
		
		МодульРаботаСНоменклатуройСлужебныйКлиент.ЗаполнитьРазделыПоискаРубрики(СтруктураПоискаКатегорий, Категории);
		
		Элементы.Категории.Отображение  = ОтображениеТаблицы.Список;
		Если Категории.ПолучитьЭлементы().Количество() Тогда
			ПерваяСтрокаКатегорииПоиска      = Категории.ПолучитьЭлементы()[0];
			Элементы.Категории.ТекущаяСтрока = ПерваяСтрокаКатегорииПоиска.ПолучитьИдентификатор();
			ПредставлениеКатегории           = ПерваяСтрокаКатегорииПоиска.Наименование;
			МодульРаботаСНоменклатуройСлужебныйКлиентСервер.УстановитьВидимостьОбластиКатегорий(Элементы, Истина);
		Иначе
			Список.Очистить();
			ПредставлениеКатегории = "";
			МодульРаботаСНоменклатуройСлужебныйКлиентСервер.УстановитьВидимостьОбластиКатегорий(Элементы, Ложь);
			ОчиститьБыстрыеОтборыИДерево();
		КонецЕсли;
		
	ИначеЕсли ВосстановитьДеревоКатегорий Тогда // Восстановление данных после очистки поиска рубрикатора.
		
		Если Категории.ПолучитьЭлементы().Количество() = 0 Тогда
			МодульРаботаСНоменклатуройСлужебныйКлиент.ЗаполнитьРазделыРубрики(КэшКатегорий, Категории);
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ЕстьФиксированныеОтборы",         Истина);
		ДополнительныеПараметры.Вставить("ИсключитьВыводПроизводителей",    Истина);
		ДополнительныеПараметры.Вставить("ИспользоватьИнтервалВводаДанных", Ложь);
		
		МодульРаботаСНоменклатуройСлужебныйКлиент.ЗаполнитьРубрикаторДоПозиционирования(КэшКатегорий, Категории, МассивИдентификаторовРодителей,
			?(ПараметрыИсторииПоиска <> Неопределено, ДеревоОтборов, Неопределено), ДополнительныеПараметры);
		
		МодульРаботаСНоменклатуройСлужебныйКлиент.ВосстановитьРазвернутыеСтроки(Элементы.Категории, РазвернутыеСтрокиИндекс, Категории,
			СписокРазвернутыхКатегорий, Элементы.ПоказатьСкрытьКатегории.Пометка, МассивИдентификаторовРодителей);
			
		МодульРаботаСНоменклатуройСлужебныйКлиентСервер.УстановитьВидимостьОбластиКатегорий(Элементы, Истина);
			
		НайтиИУстановитьВеткуКатегории = Истина;
			
	ИначеЕсли ИдентификаторКатегории = Неопределено Тогда // Начальная загрузка разделов.
		
		МодульРаботаСНоменклатуройСлужебныйКлиент.ЗаполнитьРазделыРубрики(КэшКатегорий, Категории);
		
		НайтиИУстановитьВеткуКатегории = Истина;
		ИдентификаторКатегории         = "";
			
	Иначе // Загрузка подчиненных элементов классификатора (потомков).
		
		МассивИдентификаторовРодителей = Новый Массив;
		МассивИдентификаторовРодителей.Добавить(ИдентификаторКатегории);
		МодульРаботаСНоменклатуройСлужебныйКлиент.ЗаполнитьРубрикаторДоПозиционирования(КэшКатегорий, Категории,
			МассивИдентификаторовРодителей);
			
		НайтиИУстановитьВеткуКатегории = Истина;
		
	КонецЕсли;

	Если НайтиИУстановитьВеткуКатегории Тогда
		МодульРаботаСНоменклатуройСлужебныйКлиент.НайтиИУстановитьВеткуИдентификатораВДеревеКатегорий(ИдентификаторКатегории,
			Элементы.Категории, Категории, Окно <> Неопределено, Элементы.ПоказатьСкрытьКатегории.Пометка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбработатьДанныеСервиса(АдресРезультата, ДополнительныеПараметры, КэшКатегорий, СтруктураПоискаКатегорий = Неопределено,
				ЭтоПоискКатегорий = Ложь, МассивИдентификаторовРодителей = Неопределено)
				
	Если НЕ ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСервиса = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если ДанныеСервиса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МодульРаботаСНоменклатуройСлужебный = ОбщегоНазначения.ОбщийМодуль("РаботаСНоменклатуройСлужебный");
	МодульРаботаСНоменклатуройСлужебный.ОбработатьРезультатДанныхСервисаКатегорий(ДанныеСервиса, ДополнительныеПараметры, КэшКатегорий,
		СтруктураПоискаКатегорий, ЭтоПоискКатегорий, МассивИдентификаторовРодителей);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДеревоОтборовПоДаннымИзИсторииПоиска(ПараметрыИсторииПоиска)
	
	Элементы.ДекорацияДлительнаяЗагрузкаСвойств.Видимость = Истина;
	
	Если ПараметрыИсторииПоиска.Свойство("ДанныеДереваОтборов") Тогда
		СтрокиДереваОтборов       = ДеревоОтборов.ПолучитьЭлементы();
		ДанныеПоискаДереваОтборов = ПараметрыИсторииПоиска.ДанныеДереваОтборов;
		
		Для Каждого СтрокаОтбора Из СтрокиДереваОтборов Цикл
			СтрокаПоискаДерева = ДанныеПоискаДереваОтборов.Получить(СтрокаОтбора.Идентификатор);
			Если СтрокаПоискаДерева = Неопределено Тогда
				Если СтрокаОтбора.ФиксированныйОтбор Тогда
					СтрокаОтбора.Отбор = Ложь;
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(СтрокаОтбора, СтрокаПоискаДерева);
			
			Если НЕ СтрокаОтбора.ФиксированныйОтбор И СтрокаОтбора.ЗначениеОтбора = "Список" Тогда
				ПолучитьЗначенияДополнительныхРеквизитовДереваОтборов(СтрокаОтбора, Истина, СтрокаПоискаДерева.ИдентификаторыЗначений, Истина);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Элементы.ДекорацияДлительнаяЗагрузкаСвойств.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСвойстваЛистовойКатегорииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Сообщения <> Неопределено Тогда
		Для Каждого Сообщение Из Результат.Сообщения Цикл
			Сообщение.Сообщить();
		КонецЦикла;
	КонецЕсли;
	
	ИдентификаторЗаданияОбработкиРубрикатора = Неопределено;
	ДополнительныеПараметры.Вставить("ЕстьФиксированныеОтборы",         Истина);
	ДополнительныеПараметры.Вставить("ИсключитьВыводПроизводителей",    Истина);
	ДополнительныеПараметры.Вставить("ИспользоватьИнтервалВводаДанных", Ложь);
	
	МодульРаботаСНоменклатуройСлужебныйКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСНоменклатуройСлужебныйКлиент");
	МодульРаботаСНоменклатуройСлужебныйКлиент.ОбработатьСвойстваЛистовойКатегории(Результат.АдресРезультата, ДеревоОтборов, ДополнительныеПараметры,
		Элементы.ДекорацияДлительнаяЗагрузкаСвойств, Элементы.СтрокаПоискаКатегорий);
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриАктивизацииСтрокиПродолжение()
	
	ЗаполнитьЗапросы();
	
	ЗаполнитьОтборыДополнительнымиХарактеристиками();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОтборыДополнительнымиХарактеристиками()
	
	ТекущиеДанные = Категории.НайтиПоИдентификатору(Элементы.Категории.ТекущаяСтрока);
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЛистоваяКатегория Тогда
		ЗаполнитьДополнительныеРеквизитыКатегории(ТекущиеДанные);
	Иначе
		Если ЗначениеЗаполнено(ИдентификаторЗаданияОбработкиФильтровРубрикатора) Тогда
			ИнтеграцияБСПБЭДВызовСервера.ОтменитьВыполнениеЗадания(ИдентификаторЗаданияОбработкиФильтровРубрикатора);
			ИдентификаторЗаданияОбработкиФильтровРубрикатора = Неопределено;
			Элементы.ДекорацияДлительнаяЗагрузкаСвойств.Видимость = Ложь;
		КонецЕсли;
		МодульРаботаСНоменклатуройСлужебныйКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСНоменклатуройСлужебныйКлиент");
		МодульРаботаСНоменклатуройСлужебныйКлиент.УдалитьНеФиксированныеОтборыДереваОтборов(ДеревоОтборов);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДополнительныеРеквизитыКатегории(ТекущиеДанные, КэшКатегорий = Неопределено)
	
	МодульРаботаСНоменклатуройСлужебныйКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСНоменклатуройСлужебныйКлиент");
	
	Если КэшКатегорий = Неопределено Тогда
		КэшКатегорий = МодульРаботаСНоменклатуройСлужебныйКлиент.ПолучитьКэшКатегорий();
	КонецЕсли;
	
	СвойстваКэшированы = Ложь;
	Если НЕ ТекущиеДанные.СвойстваКэшированы Тогда
		СтрокаКатегорииИзКэша = Неопределено;
		Если КэшКатегорий.Свойство("_" + ТекущиеДанные.Идентификатор, СтрокаКатегорииИзКэша) Тогда
			СвойстваКэшированы = СтрокаКатегорииИзКэша.СвойстваКэшированы;
		КонецЕсли;
	Иначе
		СвойстваКэшированы = Истина;
	КонецЕсли;
	
	Если СвойстваКэшированы Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ЕстьФиксированныеОтборы",         Истина);
		ДополнительныеПараметры.Вставить("ИсключитьВыводПроизводителей",    Истина);
		ДополнительныеПараметры.Вставить("ИспользоватьИнтервалВводаДанных", Ложь);

		МодульРаботаСНоменклатуройСлужебныйКлиент.СформироватьИзКэшаОтборыПоДополнительнымРеквизитам(ДеревоОтборов, КэшКатегорий,
			ТекущаяКатегория, ТекущиеДанные, ДополнительныеПараметры);
	Иначе
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("СтрокаДереваКатегории", ТекущиеДанные);
		
		МодульРаботаСНоменклатуройСлужебныйКлиент.ПолучитьДополнительныеРеквизитыКатегории(ТекущаяКатегория, ЭтотОбъект, ДополнительныеПараметры,
			ИдентификаторЗаданияОбработкиФильтровРубрикатора, Элементы.ДекорацияДлительнаяЗагрузкаСвойств, Элементы.СтрокаПоискаКатегорий);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьЗначенияДополнительныхРеквизитовДереваОтборов(СтрокаДерева, ПолучитьДанныеСервисаПоОтбору = Ложь,
		ИдентификаторыЗначений = Неопределено, ВосстановлениеОтбораПоиска = Ложь)
			
	ИдентификаторСтрокиДерева = СтрокаДерева.ПолучитьИдентификатор();
			
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторСтрокиДерева",     ИдентификаторСтрокиДерева);
	ДополнительныеПараметры.Вставить("ИдентификаторРеквизита",        СтрокаДерева.Идентификатор);
	ДополнительныеПараметры.Вставить("ИдентификаторКатегории",        ТекущаяКатегория);
	ДополнительныеПараметры.Вставить("ПолучитьДанныеСервисаПоОтбору", ПолучитьДанныеСервисаПоОтбору);
	Если ИдентификаторыЗначений <> Неопределено Тогда
		ДополнительныеПараметры.Вставить("ИдентификаторыЗначений",    ИдентификаторыЗначений);
	КонецЕсли;
	
	МодульРаботаСНоменклатуройСлужебныйКлиент  = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСНоменклатуройСлужебныйКлиент");
	
	КэшКатегорий                 = МодульРаботаСНоменклатуройСлужебныйКлиент.ПолучитьКэшКатегорий();
	СтрокаКатегорийИзКэша        = Неопределено;
	ЭлементСпискаЗначенийСвойств = Неопределено;
	
	Если КэшКатегорий.Свойство("_" + ТекущаяКатегория, СтрокаКатегорийИзКэша) Тогда
		ЭлементСпискаЗначенийСвойств = СтрокаКатегорийИзКэша.СписокКэшированныхСвойств.НайтиПоЗначению(СтрокаДерева.Идентификатор);
	КонецЕсли;

	Если ЭлементСпискаЗначенийСвойств <> Неопределено Тогда
		
		МодульРаботаСНоменклатуройСлужебныйКлиент.ДополнитьДеревоОтборовЗначениямиВыбораСписка(ДополнительныеПараметры, КэшКатегорий, ДеревоОтборов);
		
		Если ПолучитьДанныеСервисаПоОтбору И НЕ ВосстановлениеОтбораПоиска Тогда
			// Вызывается из отбора в дереве, когда не все дочерние подгружены по отбору.
			ПодключитьОбработчикОжидания("Подключаемый_ЗаполнитьЗапросы", 0.5, Истина);
		Иначе
			МодульРаботаСНоменклатуройСлужебныйКлиент.РазвернутьСтрокуДереваОтборов(ИдентификаторСтрокиДерева, ДеревоОтборов, Элементы.ДеревоОтборов);
		КонецЕсли;
		
	Иначе
		
		Если ВосстановлениеОтбораПоиска Тогда
			ДополнительныеПараметры.Вставить("ВосстановлениеОтбораПоиска", Истина);
		КонецЕсли;
		
		МодульРаботаСНоменклатуройСлужебныйКлиент.ПолучитьЗначенияДополнительныхРеквизитов(ЭтотОбъект,
			Элементы.ДекорацияДлительнаяЗагрузкаСвойств, ИдентификаторЗаданияЗначенийСвойств, ДополнительныеПараметры);
		ИдентификаторЗаданияЗначенийСвойств = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьЗначенияДополнительныхРеквизитовПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Сообщения <> Неопределено Тогда
		Для Каждого Сообщение Из Результат.Сообщения Цикл
			Сообщение.Сообщить();
		КонецЦикла;
	КонецЕсли;

	ИдентификаторСтрокиДерева = ДополнительныеПараметры.ИдентификаторСтрокиДерева;
	Если ИдентификаторСтрокиДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВосстановлениеОтбораПоиска = ДополнительныеПараметры.Свойство("ВосстановлениеОтбораПоиска");
	
	МодульРаботаСНоменклатуройСлужебныйКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСНоменклатуройСлужебныйКлиент");
	МодульРаботаСНоменклатуройСлужебныйКлиент.ОбработатьЗначенияДополнительныхРеквизитов(Результат.АдресРезультата, ДополнительныеПараметры, ДеревоОтборов,
		Элементы.ДекорацияДлительнаяЗагрузкаСвойств);
		
	Если ДополнительныеПараметры.ПолучитьДанныеСервисаПоОтбору И НЕ ВосстановлениеОтбораПоиска Тогда
		// Вызывается из отбора в дереве, когда не все дочерние подгружены по отбору.
		ПодключитьОбработчикОжидания("Подключаемый_ЗаполнитьЗапросы", 0.5, Истина);
	Иначе
		МодульРаботаСНоменклатуройСлужебныйКлиент.РазвернутьСтрокуДереваОтборов(ИдентификаторСтрокиДерева, ДеревоОтборов, Элементы.ДеревоОтборов);
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти
