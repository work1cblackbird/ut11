#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

Функция ПроверитьПодключение()	Экспорт

	Если ПолучитьПрокси() <> Неопределено Тогда	
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

Процедура ПолучитьДанныеФунциональнойМодели(Параметры, АдресРезультата, АдресДополнительногоРезультата) Экспорт
	
	ДополнительныйРезультат = Новый Структура();
	
	Попытка
		ВебСервис = ПолучитьПрокси();
		СписокПроектов = СписокПроектов(ВебСервис);
		Если СписокПроектов.Количество() > 0 Тогда
			Если СписокПроектов.НайтиПоЗначению(Параметры.ПроектМодели) = Неопределено Тогда
				// Выбранный проект отсутствует в списке сервиса
				Параметры.ПроектМодели = СписокПроектов[0].Значение;
			КонецЕсли;
		Иначе
			Параметры.ПроектМодели = "";
		КонецЕсли;
		
		Если Параметры.ИспользоватьСпискиВладельца Тогда
			ДанныеФунциональнойМодели = ПодготовитьДанныеФунциональнойМодели(Параметры.ПроектМодели, 
											ЗаполнитьСпискиОбъектовМодели(Параметры.АдресСписковОбъектовМодели), 
											Параметры.НомерОкна, Параметры.РазделыПроектаОтбор, ВебСервис);
		Иначе
			ДанныеФунциональнойМодели = ПодготовитьДанныеФунциональнойМодели(Параметры.ПроектМодели, 
											Новый Массив, 
											Параметры.НомерОкна, Параметры.РазделыПроектаОтбор, ВебСервис);
		КонецЕсли;
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Получение данных функциональной модели 1С:Облачная карта прикладных решений'", 
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));	
	КонецПопытки;
	
	ПоместитьВоВременноеХранилище(ДанныеФунциональнойМодели, АдресРезультата);
	
	ДополнительныйРезультат.Вставить("СписокПроектов", СписокПроектов);
	ДополнительныйРезультат.Вставить("ПроектМодели", Параметры.ПроектМодели);
	ПоместитьВоВременноеХранилище(ДополнительныйРезультат, АдресДополнительногоРезультата);
	
КонецПроцедуры

Процедура ПолучитьДанныеФункции(Параметры, АдресРезультата, АдресДополнительногоРезультата) Экспорт
	
	ДополнительныйРезультат = Новый Структура();
	
	Попытка
		
		ВебСервис = ПолучитьПрокси();
		ДанныеФункции = ДанныеФункции(Параметры.ИД, ВебСервис);
		ОписаниеФункции = ОписаниеФункции(Параметры.ИД, ВебСервис);
		
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Получение данных функциональной модели 1С:Облачная карта прикладных решений'", 
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));	
	КонецПопытки;
				
	ДополнительныйРезультат.Вставить("ОписаниеФункции", ОписаниеФункции);			
	
	ПоместитьВоВременноеХранилище(ДанныеФункции, АдресРезультата);
	ПоместитьВоВременноеХранилище(ДополнительныйРезультат, АдресДополнительногоРезультата);
	
КонецПроцедуры

Процедура ПолучитьДанныеФункций(Параметры, АдресРезультата, АдресДополнительногоРезультата) Экспорт
	
	МассивИД = Параметры.МассивИД;
	
	ДополнительныйРезультат = Новый Структура();
	ДанныеФункций = Новый Массив;
	ОписаниеФункций = Новый Массив;
	
	Попытка
		
		ВебСервис = ПолучитьПрокси();
		Для каждого ИД Из МассивИД Цикл
			ДанныеФункций.Добавить(ДанныеФункции(ИД, ВебСервис));
			ОписаниеФункций.Добавить(ОписаниеФункции(ИД, ВебСервис));
		КонецЦикла;
		
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Получение данных функциональной модели 1С:Облачная карта прикладных решений'", 
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));	
	КонецПопытки;
				
	ДополнительныйРезультат.Вставить("ОписаниеФункций", ОписаниеФункций);			
	
	ПоместитьВоВременноеХранилище(ДанныеФункций, АдресРезультата);
	ПоместитьВоВременноеХранилище(ДополнительныйРезультат, АдресДополнительногоРезультата);
	
КонецПроцедуры

Процедура ПолучитьДанныеПрофиля(Параметры, АдресРезультата, АдресДополнительногоРезультата) Экспорт
	
	ДополнительныйРезультат = Новый Структура();
	
	Попытка
		
		ДанныеПрофиля = ОписаниеПрофиля(Параметры.ИД);
		
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Получение данных функциональной модели 1С:Облачная карта прикладных решений'", 
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));	
	КонецПопытки;
	
	ПоместитьВоВременноеХранилище(ДанныеПрофиля, АдресРезультата);
	ПоместитьВоВременноеХранилище(ДополнительныйРезультат, АдресДополнительногоРезультата);
	
КонецПроцедуры

Процедура ПолучитьДанныеОбъекта(Параметры, АдресРезультата, АдресДополнительногоРезультата) Экспорт
	
	ДополнительныйРезультат = Новый Структура();
	
	Попытка
		
		ДанныеОбъекта = ОписаниеОбъекта(Параметры.ИД);
		
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Получение данных функциональной модели 1С:Облачная карта прикладных решений'", 
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));	
	КонецПопытки;
	
	ПоместитьВоВременноеХранилище(ДанныеОбъекта, АдресРезультата);
	ПоместитьВоВременноеХранилище(ДополнительныйРезультат, АдресДополнительногоРезультата);
	
КонецПроцедуры

Функция ЗаполнитьСпискиОбъектовМодели(АдресСписковОбъектовМодели)
	
	СпискиВладельца = Новый Массив;
	
	СпискиОбъектовМодели = ПолучитьИзВременногоХранилища(АдресСписковОбъектовМодели);
	Для каждого СписокОбъектовМодели Из СпискиОбъектовМодели Цикл
		СпискиВладельца.Добавить(СписокОбъектовМодели.Ключ);
	КонецЦикла;
	
	Возврат ?(СпискиВладельца.Количество() > 0, СпискиВладельца, Неопределено);

КонецФункции

Функция ОтправитьЗаявкуНаКорпоративноеРешение(ПараметрыЗаявки, ВидЗаявки = "ИжТиСиКорпоративноеРешение")	Экспорт

	ОтправитьЗаявку(ПараметрыЗаявки, ВидЗаявки);

КонецФункции

#КонецОбласти

#Область ИнтеграцияССППРОРСР

// Создает прокси веб-сервиса СППР ОР/СР. В случае ошибки вызывается исключение.
//
// Возвращаемое значение:
//	WSПрокси - Прокси веб-сервиса
//
Функция ПолучитьПрокси()
	
	АдресВебСервиса = "https://solutionsdev.1c.ru/sppr2";
	ПараметрыПодключения = ПолучитьПараметрыПодключения(АдресВебСервиса);
	
	Попытка
		Прокси = ОбщегоНазначения.СоздатьWSПрокси(ПараметрыПодключения);
	Исключение
		
		НеОбрабатыватьАктивизациюСтроки = Истина;
		НеОбрабатыватьАктивизациюСтрокиРешений = Истина;
		
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(НСтр("ru='1С:Облачная карта прикладных решений'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка,,, 
			ПодробноеПредставлениеОшибки);
			
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Веб-сервис %1 в настоящий момент недоступен.
								|Возможно отсутствует подключение к интернету, веб-сервер перегружен или выполняются регламентные работы. Повторите попытку позже.
								|
								|ВАЖНО! Для подключения к функциональной модели СППР ОР/СР необходимо наличие интернет-соединения.
								|Подробности в журнале регистрации.'"),
								АдресВебСервиса);

	КонецПопытки;
		
	Прокси.Пользователь = ПараметрыПодключения.ИмяПользователя;
	Прокси.Пароль = ПараметрыПодключения.Пароль;
	
	Возврат Прокси;
	
КонецФункции

Функция ПодготовитьДанныеФунциональнойМодели(Проект, СпискиВладельца, НомерОкна = 0, РазделыПроектаОтбор = Неопределено, ВебСервис = Неопределено)

	Если ВебСервис = Неопределено Тогда
		ВебСервис = ПолучитьПрокси();
	КонецЕсли;
	
	ДанныеФунциональнойМодели = Новый Структура;
	
	Если НомерОкна = 0
		ИЛИ НомерОкна = 1
		ИЛИ НомерОкна = 3 Тогда		
		
		Если СпискиВладельца.Найти("СписокРешений") = Неопределено Тогда
			СписокРешенийДерево = СписокФункций(Проект, ВебСервис, Истина, РазделыПроектаОтбор);
			ДанныеФунциональнойМодели.Вставить("СписокРешенийДерево", СписокРешенийДерево);
			
			Если СписокРешенийДерево.Строки.Количество() = 0 
				И НомерОкна = 3 Тогда
				НомерОкна = 0;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НомерОкна = 0
		ИЛИ НомерОкна = 1
		ИЛИ (НомерОкна = 3 И СписокРешенийДерево.Строки.Количество() = 0) Тогда
		
		Если СпискиВладельца.Найти("СписокФункций") = Неопределено Тогда
			СписокФункцийДерево = СписокФункций(Проект, ВебСервис);
			ДанныеФунциональнойМодели.Вставить("СписокФункцийДерево", СписокФункцийДерево);
		КонецЕсли;
		
	КонецЕсли;
	
	Если НомерОкна <> 3 Тогда
		
		Если СпискиВладельца.Найти("СписокОбъектов") = Неопределено Тогда
			СписокОбъектовДерево = СписокОбъектов(Проект, ВебСервис);
			ДанныеФунциональнойМодели.Вставить("СписокОбъектовДерево", СписокОбъектовДерево);
		КонецЕсли;
		
		Если СпискиВладельца.Найти("СписокПрофилей") = Неопределено Тогда
			СписокПрофилейДерево = СписокПрофилей(Проект, ВебСервис);
			ДанныеФунциональнойМодели.Вставить("СписокПрофилейДерево", СписокПрофилейДерево);
		КонецЕсли;
		
	Иначе
		Если СпискиВладельца.Найти("СписокРазделов") = Неопределено Тогда
			СписокРазделов = СписокРазделовПроекта(Проект, ВебСервис);
			ДанныеФунциональнойМодели.Вставить("СписокРазделовПроекта", СписокРазделов);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеФунциональнойМодели;

КонецФункции

// Возвращает список проектов СППР
//
// Параметры:
//  ВебСервис	- WSПрокси - веб-сервис
//
// Возвращаемое значение:
//   СписокЗначений   - Список проектов в виде списка значений
//
Функция СписокПроектов(Знач ВебСервис = Неопределено)
	
	СписокПроектовСППР = Новый СписокЗначений;
	
	Если ВебСервис = Неопределено Тогда
		ВебСервис = ПолучитьПрокси();
	КонецЕсли; 
	
	Результат = ВебСервис.GetListOfProjects().Получить();
	
	Если Результат = Неопределено Тогда
		Возврат СписокПроектовСППР;
	КонецЕсли;
		
	Для каждого ЭлементКоллекции Из Результат Цикл
		СписокПроектовСППР.Добавить(ЭлементКоллекции.Name);
	КонецЦикла; 

	Возврат СписокПроектовСППР;

КонецФункции

// Возвращает список разделов проектов СППР
//
// Параметры:
//  ВебСервис	- WSПрокси - веб-сервис
//
// Возвращаемое значение:
//   СписокЗначений   - Список проектов в виде списка значений
//
Функция СписокРазделовПроекта(Проект, Знач ВебСервис = Неопределено)

	СписокРазделовДерево = Новый ДеревоЗначений;
	СписокРазделовДерево.Колонки.Добавить("ИД", Новый ОписаниеТипов("УникальныйИдентификатор"));
	СписокРазделовДерево.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100)));
	СписокРазделовДерево.Колонки.Добавить("ЭтоПапка", Новый ОписаниеТипов("Булево"));
	СписокРазделовДерево.Колонки.Добавить("Пометка", Новый ОписаниеТипов("Булево"));
	
	Если ВебСервис = Неопределено Тогда
		ВебСервис = ПолучитьПрокси();
	КонецЕсли; 
	
	СписокРазделовДеревоПроекта = ВебСервис.GetListOfPartitions(Проект).Получить();
	Если СписокРазделовДеревоПроекта <> Неопределено Тогда
		ТаблицаРазделов = Новый ТаблицаЗначений;
		ТаблицаРазделов.Колонки.Добавить("ИД", Новый ОписаниеТипов("УникальныйИдентификатор"));
		ТаблицаРазделов.Колонки.Добавить("ИД_родитель", Новый ОписаниеТипов("УникальныйИдентификатор"));
		ТаблицаРазделов.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100)));
		ТаблицаРазделов.Колонки.Добавить("ЭтоПапка", Новый ОписаниеТипов("Булево"));
		                                         
		Для каждого СтрокаРаздела Из СписокРазделовДеревоПроекта Цикл
			ДанныеСтроки = ТаблицаРазделов.Добавить();
			ДанныеСтроки.ИД = СтрокаРаздела.ID;
			ДанныеСтроки.ИД_родитель = СтрокаРаздела.ID_Parent;
			ДанныеСтроки.Представление = СтрокаРаздела.Name;
			ДанныеСтроки.ЭтоПапка = СтрокаРаздела.IsFolder;
		КонецЦикла; 
		
		ТаблицаРазделов.Индексы.Добавить("ИД_родитель");
		
		ТекущиеЭлементы = СписокРазделовДерево.Строки;
		
		ИД_родитель = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
		ЗаполнитьСписокРазделовРекурсивно(ТаблицаРазделов, ИД_родитель, ТекущиеЭлементы);
		
	КонецЕсли; 
	
	Возврат СписокРазделовДерево;

КонецФункции

// Возвращает список функций СППР
//
// Параметры:
//  ВебСервис	- WSПрокси - веб-сервис
//
// Возвращаемое значение:
//   ДеревоЗначений   - Список функций в виде дерева значений
//
Функция СписокФункций(Проект, ВебСервис = Неопределено, Решения = Ложь, РазделыПроектаОтбор = Неопределено, МассивФункцийКорпоративногоРешения = Неопределено)
	
	СписокФункцийДерево = Новый ДеревоЗначений;
	СписокФункцийДерево.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100)));
	СписокФункцийДерево.Колонки.Добавить("ИД", Новый ОписаниеТипов("УникальныйИдентификатор"));
	СписокФункцийДерево.Колонки.Добавить("Схема");
	СписокФункцийДерево.Колонки.Добавить("КонечнаяФункция", Новый ОписаниеТипов("Булево"));
	СписокФункцийДерево.Колонки.Добавить("ЭлементыСхемы", Новый ОписаниеТипов("ТаблицаЗначений"));
	СписокФункцийДерево.Колонки.Добавить("ФормыРабочегоМеста", Новый ОписаниеТипов("ТаблицаЗначений"));
	СписокФункцийДерево.Колонки.Добавить("Процессы");
	СписокФункцийДерево.Колонки.Добавить("Описание");
	СписокФункцийДерево.Колонки.Добавить("ЭтоГруппа", Новый ОписаниеТипов("Булево"));
	СписокФункцийДерево.Колонки.Добавить("ВключитьВКорпоративноеРешение", Новый ОписаниеТипов("Булево"));
	СписокФункцийДерево.Колонки.Добавить("ЭтоВариантПоставки", Новый ОписаниеТипов("Булево"));
	
	Если ВебСервис = Неопределено Тогда
		ВебСервис = ПолучитьПрокси();
	КонецЕсли; 
	
	Если ПустаяСтрока(Проект) Тогда
		
		ВызватьИсключение 
			НСтр("ru = 'Ошибка подключения к СППР.
					|
					|В настройках интеграции с СППР не указан проект.'");
	
	КонецЕсли;
	
	Если Решения Тогда
		СписокФункцийДеревоПроекта = ВебСервис.GetListOfSolutionsAddon(Проект, ВыбранныеРазделыПроекта(РазделыПроектаОтбор)).Получить();
	Иначе
		СписокФункцийДеревоПроекта = ВебСервис.GetListOfFunctions(Проект, ВыбранныеРазделыПроекта()).Получить();
	КонецЕсли;
	Если СписокФункцийДеревоПроекта <> Неопределено Тогда
		ТаблицаФункций = Новый ТаблицаЗначений;
		ТаблицаФункций.Колонки.Добавить("ИД", Новый ОписаниеТипов("УникальныйИдентификатор"));
		ТаблицаФункций.Колонки.Добавить("ИД_родитель", Новый ОписаниеТипов("УникальныйИдентификатор"));
		ТаблицаФункций.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100)));
		ТаблицаФункций.Колонки.Добавить("ЭтоВариантПоставки", Новый ОписаниеТипов("Булево"));
		
		Для каждого СтрокаФункции Из СписокФункцийДеревоПроекта Цикл
			ДанныеФункции = СтрокаФункции.FunctionDescription;
			ДанныеСтроки = ТаблицаФункций.Добавить();
			ДанныеСтроки.ИД = ДанныеФункции.ID;
			ДанныеСтроки.ИД_родитель = ДанныеФункции.ID_Parent;
			ДанныеСтроки.Представление = ДанныеФункции.Name;
			ДанныеСтроки.ЭтоВариантПоставки = ДанныеФункции.IsProduct;
		КонецЦикла; 
		
		ТаблицаФункций.Индексы.Добавить("ИД_родитель");
		
		ТекущиеЭлементы = СписокФункцийДерево.Строки;
		
		ИД_родитель = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
		ЗаполнитьСписокФункцийРекурсивно(ТаблицаФункций, ИД_родитель, ТекущиеЭлементы, МассивФункцийКорпоративногоРешения);
	КонецЕсли; 
	
	Возврат СписокФункцийДерево;
	
КонецФункции

// Возвращает список объектов СППР
//
// Параметры:
//  ВебСервис	- WSПрокси - веб-сервис
//
// Возвращаемое значение:
//   ДеревоЗначений   - список объектов в виде дерева значений
//
Функция СписокОбъектов(Проект, ВебСервис = Неопределено)
	
	СписокОбъектовДерево = Новый ДеревоЗначений;
	СписокОбъектовДерево.Колонки.Добавить("ИД", Новый ОписаниеТипов("УникальныйИдентификатор"));
	СписокОбъектовДерево.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100)));
	СписокОбъектовДерево.Колонки.Добавить("ОписаниеHTML", Новый ОписаниеТипов("Строка"));
	СписокОбъектовДерево.Колонки.Добавить("ЭтоПапка", Новый ОписаниеТипов("Булево"));
	СписокОбъектовДерево.Колонки.Добавить("ЭтоГруппаОбъектов", Новый ОписаниеТипов("Булево"));
	СписокОбъектовДерево.Колонки.Добавить("ОписаниеПодготовлено", Новый ОписаниеТипов("Булево"));
	СписокОбъектовДерево.Колонки.Добавить("Процессы");
	
	Если ВебСервис = Неопределено Тогда
		ВебСервис = ПолучитьПрокси();
	КонецЕсли; 
	
	СписокОбъектовДеревоПроекта = ВебСервис.GetListOfObjects(Проект, ВыбранныеРазделыПроекта()).Получить();
	Если СписокОбъектовДеревоПроекта <> Неопределено Тогда
		ТаблицаОбъектов = Новый ТаблицаЗначений;
		ТаблицаОбъектов.Колонки.Добавить("ИД", Новый ОписаниеТипов("УникальныйИдентификатор"));
		ТаблицаОбъектов.Колонки.Добавить("ИД_родитель", Новый ОписаниеТипов("УникальныйИдентификатор"));
		ТаблицаОбъектов.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100)));
		ТаблицаОбъектов.Колонки.Добавить("ЭтоПапка", Новый ОписаниеТипов("Булево"));
		ТаблицаОбъектов.Колонки.Добавить("ЭтоГруппаОбъектов", Новый ОписаниеТипов("Булево"));
		                                         
		Для каждого СтрокаОбъекта Из СписокОбъектовДеревоПроекта Цикл
			ДанныеОбъекта = СтрокаОбъекта.ObjectDescription;
			ДанныеСтроки = ТаблицаОбъектов.Добавить();
			ДанныеСтроки.ИД = ДанныеОбъекта.ID;
			ДанныеСтроки.ИД_родитель = ДанныеОбъекта.ID_Parent;
			ДанныеСтроки.Представление = ДанныеОбъекта.Name;
			ДанныеСтроки.ЭтоПапка = ДанныеОбъекта.IsFolder;
			ДанныеСтроки.ЭтоГруппаОбъектов = ДанныеОбъекта.IsGroup;
		КонецЦикла; 
		
		ТаблицаОбъектов.Индексы.Добавить("ИД_родитель");
		
		ТекущиеЭлементы = СписокОбъектовДерево.Строки;
		
		ИД_родитель = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
		ЗаполнитьСписокОбъектовРекурсивно(ТаблицаОбъектов, ИД_родитель, ТекущиеЭлементы);
	КонецЕсли; 
	
	Возврат СписокОбъектовДерево;

КонецФункции

// Возвращает список профилей пользователей СППР
//
// Параметры:
//  ВебСервис	- WSПрокси - веб-сервис
//
// Возвращаемое значение:
//   ДеревоЗначений   - список профилей пользователей в виде дерева значений
//
Функция СписокПрофилей(Проект, ВебСервис = Неопределено)

	СписокПрофилейДерево = Новый ДеревоЗначений;
	СписокПрофилейДерево.Колонки.Добавить("ИД", Новый ОписаниеТипов("УникальныйИдентификатор"));
	СписокПрофилейДерево.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100)));
	СписокПрофилейДерево.Колонки.Добавить("ОписаниеHTML", Новый ОписаниеТипов("Строка"));
	СписокПрофилейДерево.Колонки.Добавить("ЭтоПапка", Новый ОписаниеТипов("Булево"));
	СписокПрофилейДерево.Колонки.Добавить("ОписаниеПодготовлено", Новый ОписаниеТипов("Булево"));
	СписокПрофилейДерево.Колонки.Добавить("Процессы");
	
	Если ВебСервис = Неопределено Тогда
		ВебСервис = ПолучитьПрокси();
	КонецЕсли; 
	
	СписокПрофилейДеревоПроекта = ВебСервис.GetListOfPerformers(Проект, ВыбранныеРазделыПроекта()).Получить();
	Если СписокПрофилейДеревоПроекта <> Неопределено Тогда
		ТаблицаПрофилей = Новый ТаблицаЗначений;
		ТаблицаПрофилей.Колонки.Добавить("ИД", Новый ОписаниеТипов("УникальныйИдентификатор"));
		ТаблицаПрофилей.Колонки.Добавить("ИД_родитель", Новый ОписаниеТипов("УникальныйИдентификатор"));
		ТаблицаПрофилей.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100)));
		ТаблицаПрофилей.Колонки.Добавить("ЭтоПапка", Новый ОписаниеТипов("Булево"));
		ТаблицаПрофилей.Колонки.Добавить("ЭтоГруппаОбъектов", Новый ОписаниеТипов("Булево"));
		                                         
		Для каждого СтрокаПрофиля Из СписокПрофилейДеревоПроекта Цикл
			ОписаниеПрофиля = СтрокаПрофиля.PerformerDescription;
			ДанныеСтроки = ТаблицаПрофилей.Добавить();
			ДанныеСтроки.ИД = ОписаниеПрофиля.ID;
			ДанныеСтроки.ИД_родитель = ОписаниеПрофиля.ID_Parent;
			ДанныеСтроки.Представление = ОписаниеПрофиля.Name;
			ДанныеСтроки.ЭтоПапка = ОписаниеПрофиля.IsFolder;
		КонецЦикла; 
		
		ТаблицаПрофилей.Индексы.Добавить("ИД_родитель");
		
		ТекущиеЭлементы = СписокПрофилейДерево.Строки;
		
		ИД_родитель = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
		ЗаполнитьСписокПрофилейРекурсивно(ТаблицаПрофилей, ИД_родитель, ТекущиеЭлементы);
	КонецЕсли; 
	
	Возврат СписокПрофилейДерево;

КонецФункции

// Возвращает данные функции
//
// Параметры:
//  ИДФункции	- Тип - Уникальный идентификатор ссылки на функцию
//
// Возвращаемое значение:
//   ПакетXDTO	- Пакет XDTO, содержащий данные функции
//
Функция ДанныеФункции(ИДФункции, ВебСервис = Неопределено)
	
	Если ВебСервис = Неопределено Тогда
		ВебСервис = ПолучитьПрокси();
	КонецЕсли; 
	ДанныеФункции = ВебСервис.GetFunction(ИДФункции).Получить();
	
	Возврат ДанныеФункции;

КонецФункции

// Возвращает описание функции в формате HTML
//
// Параметры:
//  ИДФункции	- Тип - Уникальный идентификатор ссылки на функцию
//
// Возвращаемое значение:
//   Строка   - Строка в формате HTML
//
Функция ОписаниеФункции(ИДФункции, ВебСервис = Неопределено)
	
	Если ВебСервис = Неопределено Тогда
		ВебСервис = ПолучитьПрокси();
	КонецЕсли; 
	ОписаниеHTML = ВебСервис.GetFunctionDescription(ИДФункции).Получить();
	
	Возврат ОписаниеHTML;

КонецФункции

// Возвращает описание профиля в формате HTML
//
// Параметры:
//  ИДПрофиля	- Тип - Уникальный идентификатор ссылки на профиль
//
// Возвращаемое значение:
//   Строка   - Строка в формате HTML
//
Функция ОписаниеПрофиля(ИДПрофиля, ВебСервис = Неопределено)
	
	Если ВебСервис = Неопределено Тогда
		ВебСервис = ПолучитьПрокси();
	КонецЕсли; 
	ОписаниеHTML = ВебСервис.GetPerformerDescription(ИДПрофиля).Получить();
	
	Возврат ОписаниеHTML;

КонецФункции

// Возвращает описание объекта в формате HTML
//
// Параметры:
//  ИДОбъекта	- Тип - Уникальный идентификатор ссылки на объект
//
// Возвращаемое значение:
//   Строка   - Строка в формате HTML
//
Функция ОписаниеОбъекта(ИДОбъекта, ВебСервис = Неопределено)

	Если ВебСервис = Неопределено Тогда
		ВебСервис = ПолучитьПрокси();
	КонецЕсли; 
	ОписаниеHTML = ВебСервис.GetObjectDescription(ИДОбъекта).Получить();
	
	Возврат ОписаниеHTML;

КонецФункции

// Возвращает описание раздела интерфейса
//
// Параметры:
//  РазделИнтерфейса	- Строка - Имя раздела
//
// Возвращаемое значение:
//   Строка   - Строка в формате HTML
//
Функция ОтправитьЗаявку(ПараметрыЗаявки, ВидЗаявки = "ИжТиСиКорпоративноеРешение", ВебСервис = Неопределено)

	Если ВебСервис = Неопределено Тогда
		ВебСервис = ПолучитьПрокси();
	КонецЕсли; 
	
	Пакет = СериализаторXDTO.ЗаписатьXDTO(Новый ХранилищеЗначения(ПараметрыЗаявки, Новый СжатиеДанных(9)));
	ОписаниеОшибки = "";
	
	Возврат  ВебСервис.SendOrder(ВидЗаявки, Пакет, ОписаниеОшибки);

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВыбранныеРазделыПроекта(Знач РазделыПроектаОтбор = Неопределено)
	
	Если РазделыПроектаОтбор = Неопределено Тогда
		РазделыПроектаОтбор = Новый Массив;
	КонецЕсли;

	Возврат СериализаторXDTO.ЗаписатьXDTO(РазделыПроектаОтбор);

КонецФункции

Процедура ЗаполнитьСписокФункцийРекурсивно(ТаблицаФункций, ИД_родитель, ТекущиеЭлементы, МассивФункцийКорпоративногоРешения)

	СтруктураПоиска = Новый Структура("ИД_родитель", ИД_родитель);
	СписокСтрок = ТаблицаФункций.НайтиСтроки(СтруктураПоиска);
	Для каждого ДанныеСтроки Из СписокСтрок Цикл
		НоваяСтрока = ТекущиеЭлементы.Добавить();
		НоваяСтрока.Представление = ДанныеСтроки.Представление;
		НоваяСтрока.ИД = ДанныеСтроки.ИД;
		НоваяСтрока.ЭтоВариантПоставки = ДанныеСтроки.ЭтоВариантПоставки;
		Если МассивФункцийКорпоративногоРешения <> Неопределено Тогда
			НоваяСтрока.ВключитьВКорпоративноеРешение = (МассивФункцийКорпоративногоРешения.Найти(ДанныеСтроки.ИД)<> Неопределено);
		КонецЕсли;
		
		ТекущиеЭлементыСтроки = НоваяСтрока.Строки;		
		ЗаполнитьСписокФункцийРекурсивно(ТаблицаФункций, ДанныеСтроки.ИД, ТекущиеЭлементыСтроки, МассивФункцийКорпоративногоРешения);
		
		НоваяСтрока.ЭтоГруппа = (ТекущиеЭлементыСтроки.Количество() > 0);
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьСписокРазделовРекурсивно(ТаблицаРазделов, ИД_родитель, ТекущиеЭлементы)

	СтруктураПоиска = Новый Структура("ИД_родитель", ИД_родитель);
	СписокСтрок = ТаблицаРазделов.НайтиСтроки(СтруктураПоиска);
	Для каждого ДанныеСтроки Из СписокСтрок Цикл
		НоваяСтрока = ТекущиеЭлементы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки);
		
		ТекущиеЭлементыСтроки = НоваяСтрока.Строки;
		ЗаполнитьСписокРазделовРекурсивно(ТаблицаРазделов, ДанныеСтроки.ИД, ТекущиеЭлементыСтроки);
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьСписокОбъектовРекурсивно(ТаблицаОбъектов, ИД_родитель, ТекущиеЭлементы)

	СтруктураПоиска = Новый Структура("ИД_родитель", ИД_родитель);
	СписокСтрок = ТаблицаОбъектов.НайтиСтроки(СтруктураПоиска);
	Для каждого ДанныеСтроки Из СписокСтрок Цикл
		НоваяСтрока = ТекущиеЭлементы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки);
		
		ТекущиеЭлементыСтроки = НоваяСтрока.Строки;
		ЗаполнитьСписокОбъектовРекурсивно(ТаблицаОбъектов, ДанныеСтроки.ИД, ТекущиеЭлементыСтроки);
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьСписокПрофилейРекурсивно(ТаблицаПрофилей, ИД_родитель, ТекущиеЭлементы)

	СтруктураПоиска = Новый Структура("ИД_родитель", ИД_родитель);
	СписокСтрок = ТаблицаПрофилей.НайтиСтроки(СтруктураПоиска);
	Для каждого ДанныеСтроки Из СписокСтрок Цикл
		НоваяСтрока = ТекущиеЭлементы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки);
		
		ТекущиеЭлементыСтроки = НоваяСтрока.Строки;
		ЗаполнитьСписокПрофилейРекурсивно(ТаблицаПрофилей, ДанныеСтроки.ИД, ТекущиеЭлементыСтроки);
		
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьПараметрыПодключения(АдресВебСервиса)
	
	МестоположениеWSDL = АдресВебСервиса + "/ws/FunctionModelSolutions1C.1cws?wsdl";
	
	ПараметрыПодключения = ОбщегоНазначения.ПараметрыПодключенияWSПрокси();
	ПараметрыПодключения.АдресWSDL              = МестоположениеWSDL;
	ПараметрыПодключения.URIПространстваИмен    = "http://www.1c.ru/SPPR/FunctionModel";
	ПараметрыПодключения.ИмяСервиса             = "FunctionModelSolutions1C";
	ПараметрыПодключения.ИмяПользователя        = "1CSolutionsSOAP";
	ПараметрыПодключения.Пароль                 = "Sy2Cy9xa";
	ПараметрыПодключения.Таймаут                = 20;
	ПараметрыПодключения.ДелатьКонтрольныйВызов = Ложь;
	
	Возврат ПараметрыПодключения;

КонецФункции

#КонецОбласти

#КонецЕсли
