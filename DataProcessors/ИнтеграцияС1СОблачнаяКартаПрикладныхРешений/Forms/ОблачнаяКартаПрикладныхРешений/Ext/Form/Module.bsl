#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Заголовок1_Цвет = WebЦвета.ТемноСиний;
	Заголовок1_Шрифт = Новый Шрифт("Arial", 18, Истина);
	Заголовок2_Цвет = ЦветаСтиля.ГруппаВариантовОтчетовЦвет;
	Заголовок2_Шрифт = Новый Шрифт("Arial", 14, Истина);
	
	ОтображатьЗаголовок = Ложь;
	
	Заголовок = СформироватьЗаголовокФормы();
	
	ИмяФормыМассив = СтрРазделить(ИмяФормы, ".", Ложь);
	ПутьКОбработке = ИмяФормыМассив[0] + "." + ИмяФормыМассив[1];
	
	СохранитьПараметрыОткрытия(Параметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Попытка
		
		ПроверитьПодключениеСервер();
		
		УстановитьРежимНавигации();
		ИнициализацияФормыНавигации(, Параметры.Свойство("АдресСписковОбъектовМодели", АдресСписковОбъектовМодели));	
		
	Исключение
		
		КраткаяИнформацияОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		НачалоНавигации = СформироватьОписаниеОшибкиПодключения(КраткаяИнформацияОбОшибке);
		
		РежимНавигации = -1;
		УстановитьРежимНавигации();
		
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьПодключение", 10);
		
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(
		НСтр("ru = 'Подключение к веб-сервису 1С:Облачная карта прикладных решений'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
		"Ошибка", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),,Истина);
		
	КонецПопытки;

	УстановитьВидимостьОписания();
	КРУстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "СППРОРСР_ФункциональнаяМодель" 
		И (НЕ Параметр.Свойство("НомерОкна") 
			ИЛИ Параметр.НомерОкна = Параметры.НомерОкна)
		И (НЕ Параметр.Свойство("ПроектМодели") 
			ИЛИ Параметр.ПроектМодели = Параметры.ПроектМодели) Тогда
			
		Если НЕ ПараметрыОткрытияФормыОбработаны Тогда
			
			СохранитьПараметрыОткрытия(Параметр);
			ОбработатьПараметрыОткрытияФормы(Параметр, Истина);
			
			Если Параметры.НомерОкна = 1
				И Элементы.СхемаФункции.Видимость = Ложь Тогда
				УстановитьВидимостьСхемыФункции(Истина);
			КонецЕсли;
			
			УстановитьРежимНавигации();
			
		КонецЕсли; 
		
		ПараметрыОткрытияФормыОбработаны = Ложь;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимКорпоративноеРешение И ФункцииКорпоративногоРешенияМодифицированность Тогда
		
		Оповещение = Новый ОписаниеОповещения("ОбработкаВопросаЗакрытияМодифицированнойКонфигурации", ЭтаФорма, Новый Структура("ПередЗакрытиемФормы", Истина));
		ПоказатьВопрос(Оповещение, НСтр("ru='Заявка в 1С:ИжТиСи на корпоративное решение изменена. 
			|Закрыть форму?'"), РежимДиалогаВопрос.ДаНет, 0);
			
		Отказ = Истина;
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПутьКФункцииОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылка = "СледующиеФункции" Тогда
		ПутьКФункцииНачало = Макс(ПутьКФункцииНачало - 1, 0);
		ПоказатьПутьКФункции();
	ИначеЕсли НавигационнаяСсылка = "ПредыдущиеФункции" Тогда
		ПутьКФункцииНачало = Мин(ПутьКФункцииНачало + 1, ПутьКФункцииСписокФункций.Количество() - 1);
		ПоказатьПутьКФункции();
	Иначе
		ПутьКФункцииОбработкаНавигационнойСсылкиНаСервере(НавигационнаяСсылка);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СхемаФункцииВыбор(Элемент)
	
	ОтключитьОбработчикОжидания("Подключаемый_ПоказатьОписаниеЭлементаСхемы");
	ОткрытьГиперссылкуЭлементаСхемы();
	
КонецПроцедуры

&НаКлиенте
Процедура СхемаФункцииПриАктивизации(Элемент)
	
	Если РежимПереключенияСтраниц Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПоказатьОписаниеЭлементаСхемы", 1, Истина);
	Иначе
		ПодключитьОбработчикОжидания("Подключаемый_ПоказатьОписаниеЭлементаСхемы", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПоказатьОписаниеЭлементаСхемы()
	
	ПоказатьОписаниеЭлементаСхемы();
	
КонецПроцедуры


&НаКлиенте
Процедура ОписаниеHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	Если ДанныеСобытия.Href = Неопределено Тогда
		Возврат;	// Это не ссылка
	КонецЕсли;
	
	Если СтрНайти(ДанныеСобытия.Href, "ИД_") = 0 Тогда
		
		ДанныеСобытия.Element.target = "_blank";
		Возврат;	//Внешняя ссылка в новом окне
		
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ПерейтиПоСсылкеHTML(ДанныеСобытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьОписаниеHTML(Команда)
	
	Элементы.ОписаниеHTML.Документ.execCommand("Print");
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьОписанияЭлементаСхемыФункции(Команда)
	
	Элементы.ОписаниеЭлементаСхемыФункции.Документ.execCommand("Print");
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоНавигацииПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПерейтиПоСсылкеHTML(ДанныеСобытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаголовокФормыНомерОкнаПриИзменении(Элемент)
	
	Если ЗаголовокФормыНомерОкна = Параметры.НомерОкна Тогда
		Возврат;
	КонецЕсли;
	
	// Активизируем по ключевым параметрам
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("НомерОкна", ЗаголовокФормыНомерОкна);
	ПараметрыФормы.Вставить("ПроектМодели", Параметры.ПроектМодели);
	ПараметрыФормы.Вставить("АдресСписковОбъектовМодели", ПолучитьСпискиОбъектовМодели());
	
	ОткрытьФорму(ИмяФормы, ПараметрыФормы);
	
	ЗаголовокФормыНомерОкна = Параметры.НомерОкна;	// Кнопку на текущей форме не меняем
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокРешений

&НаКлиенте
Процедура СписокРазделовПометкаПриИзменении(Элемент)
	
	ИнициализацияФормыНавигации(, Параметры.Свойство("АдресСписковОбъектовМодели", АдресСписковОбъектовМодели),
									ПолучитьОтборРазделовПроекта());
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРешенийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФункциональнуюМодель(ТекущиеДанные.ИД, "Function", 1)	
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРешенийПриАктивизацииСтроки(Элемент)
	
	Если НеОбрабатыватьАктивизациюСтрокиРешений Тогда
		НеОбрабатыватьАктивизациюСтрокиРешений = Ложь;
		НеОбрабатыватьАктивизациюСтроки = Истина;
	Иначе
		ПодключитьОбработчикОжидания("Подключаемый_СписокРешенийПриАктивизацииСтроки", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницаОписаниеHTMLСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если Элементы.СтраницаОписаниеHTMLСтраницы.ТекущаяСтраница = Элементы.СтраницаОписаниеHTMLКорпоративноеРешение Тогда
		ЗаполнитьОписаниеКорпоративногоРешения();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокФункций

&НаКлиенте
Процедура СписокФункцийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФункциональнуюМодель(ТекущиеДанные.ИД, "Function", 1)	
	
КонецПроцедуры

&НаКлиенте
Процедура СписокФункцийПриАктивизацииСтроки(Элемент)
	
	Если НеОбрабатыватьАктивизациюСтроки Тогда
		НеОбрабатыватьАктивизациюСтроки = Ложь;
		НеОбрабатыватьАктивизациюСтрокиРешений = Истина;
	Иначе
		ПодключитьОбработчикОжидания("Подключаемый_СписокФункцийПриАктивизацииСтроки", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокОбъектов

&НаКлиенте
Процедура СписокОбъектовПриАктивизацииСтроки(Элемент)
	
	Если НеОбрабатыватьАктивизациюСтроки Тогда
		НеОбрабатыватьАктивизациюСтроки = Ложь;
	Иначе
		ПодключитьОбработчикОжидания("Подключаемый_СписокОбъектовПриАктивизацииСтроки", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокПрофилей

&НаКлиенте
Процедура СписокПрофилейПриАктивизацииСтроки(Элемент)
	
	Если НеОбрабатыватьАктивизациюСтроки Тогда
		НеОбрабатыватьАктивизациюСтроки = Ложь;
	Иначе
		ПодключитьОбработчикОжидания("Подключаемый_СписокПрофилейПриАктивизацииСтроки", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаПоказатьСписок(Команда)
	
	ВидимостьСписка = НЕ ВидимостьСписка;
	УстановитьВидимостьСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотрФункциональнойМодели(Команда)
	
	ТекущиеДанные = Элементы.СписокРешений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФункциональнуюМодель(ТекущиеДанные.ИД, "Function", 1)	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОписание(Команда)

	НеОбрабатыватьАктивизациюСтроки = Истина;
	НеОбрабатыватьАктивизациюСтрокиРешений = Истина;
	
	ВидимостьОписания = НЕ(ВидимостьОписания);
	РежимПереключенияСтраниц = НЕ(ВидимостьОписания);
	
	ЗаполнитьОписаниеГиперссылкиЭлементаСхемы();
	
	УстановитьВидимостьОписания();
	
	Если НЕ РежимПереключенияСтраниц Тогда
		УстановитьВидимостьСхемыФункции(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереходКСхемеФункции(Команда)
	
	УстановитьВидимостьСхемыФункции(Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура НавигационнаяСсылкаНаСхемуФункцииПолучить(Команда)
	
	ТекстСсылкиНаСхемуФункции = ПолучитьТекстСсылкиНаСхемуФункции(ТекущаяФункция_ИД);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСсылкиНаСхемуФункции);
		
КонецПроцедуры

&НаКлиенте
Процедура КомандаНавигацияВперед(Команда)
	
	НавигацияВперед();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНавигацияНазад(Команда)
	
	НавигацияНазад();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНавигацияДомой(Команда)
	
	НавигацияДомой();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНавигацияПроект(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_НавигацияПроектЗавершение", ЭтаФорма);
	ПоказатьВыборИзМеню(ОписаниеОповещения, ПроектыМодели, Элементы.НавигацияПроект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НавигацияПроектЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьВыборПроекта(ВыбранныйЭлемент.Значение);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеДанными

&НаКлиенте
Процедура ИнициализацияФормыНавигации(ПовторноеОткрытие = Ложь, ИспользоватьСпискиВладельца = Ложь, РазделыПроектаОтбор = Неопределено)
	
	ОповещениеОПрогрессеВыполнения = Неопределено;
	ДлительнаяОперация = НачатьИнициализациюФормыНавигации(ПовторноеОткрытие, ИспользоватьСпискиВладельца, РазделыПроектаОтбор);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	ПараметрыОжидания.ОповещениеПользователя.НавигационнаяСсылка = "e1cib/app/" + ПутьКОбработке;
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ПовторноеОткрытие", ПовторноеОткрытие);
	ПараметрыОповещения.Вставить("ОбновитьСписокРазделовПроекта", РазделыПроектаОтбор = Неопределено);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ИнициализацияФормыНавигацииЗавершение", ЭтотОбъект, ПараметрыОповещения);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция НачатьИнициализациюФормыНавигации(ПовторноеОткрытие = Ложь, ИспользоватьСпискиВладельца = Ложь, РазделыПроектаОтбор = Неопределено)
	
	Если Параметры.НомерОкна = 0 Тогда
		Параметры.НомерОкна = 3;
	КонецЕсли;
	
	РежимНавигации = -1;
	ПараметрыОткрытияФормыОбработаны = Истина;
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("НомерОкна", Параметры.НомерОкна);
	ПараметрыПроцедуры.Вставить("ПроектМодели", Параметры.ПроектМодели);
	ПараметрыПроцедуры.Вставить("ИспользоватьСпискиВладельца", ИспользоватьСпискиВладельца);
	ПараметрыПроцедуры.Вставить("АдресСписковОбъектовМодели", АдресСписковОбъектовМодели);
	ПараметрыПроцедуры.Вставить("РазделыПроектаОтбор", РазделыПроектаОтбор);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Загрузка данных функциональной модели СППР ОР/СР'");
	ПараметрыВыполнения.ОжидатьЗавершение = 0.1;
	ПараметрыВыполнения.ДополнительныйРезультат = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ПутьКОбработке + ".МодульОбъекта.ПолучитьДанныеФунциональнойМодели",
												ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура ИнициализацияФормыНавигацииЗавершение(Результат, ДополнительныеПараметры)	Экспорт
	
	ОбновитьДанные(Результат, ДополнительныеПараметры.ОбновитьСписокРазделовПроекта);	
	
	Если Параметры.НомерОкна = 3 Тогда
		РежимНавигации = 4;
	ИначеЕсли Параметры.НомерОкна = 0
		ИЛИ Параметры.НомерОкна = 1 Тогда
		РежимНавигации = 1;
	ИначеЕсли Параметры.НомерОкна = 2 Тогда
		РежимНавигации = 3;	// по умолчанию - профили пользователей
	КонецЕсли;
	
	ОбработатьПараметрыОткрытияФормы(Параметры, ДополнительныеПараметры.ПовторноеОткрытие);
	
	Если Параметры.НомерОкна = 0 Тогда
		Если РежимНавигации = 1 Тогда
			Параметры.НомерОкна = 1;
		ИначеЕсли РежимНавигации = 2 ИЛИ РежимНавигации = 3 Тогда
			Параметры.НомерОкна = 2;
		КонецЕсли;
	КонецЕсли;
	
	Заголовок = СформироватьЗаголовокФормы();
	УстановитьРежимНавигации();
	УстановитьВидимостьСписка();
	
	Если Элементы.СписокРешений.ТекущаяСтрока <> Неопределено Тогда
		Элементы.СписокРешений.Развернуть(Элементы.СписокРешений.ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПараметрыОткрытияФормы(Знач ПараметрыФормы, ПовторноеОткрытие)

	ПараметрыОткрытия = ПолучитьИзВременногоХранилища(ПараметрыОткрытияАдрес);
	Если ПараметрыОткрытия.Свойство("ИДЭлемента") Тогда
		
		Если ПараметрыОткрытия.ТипЭлемента = "Function" Тогда
			ПерейтиКФункции(ПараметрыОткрытия.ИДЭлемента);
			
		ИначеЕсли ПараметрыОткрытия.ТипЭлемента = "Control"
			ИЛИ ПараметрыОткрытия.ТипЭлемента = "Input" 
			ИЛИ ПараметрыОткрытия.ТипЭлемента = "Link" 
			ИЛИ ПараметрыОткрытия.ТипЭлемента = "Output" Тогда
			
			ВидимостьСписка = Ложь;			
			ПерейтиКОбъекту(ПараметрыОткрытия.ИДЭлемента);
			
		ИначеЕсли ПараметрыОткрытия.ТипЭлемента = "Performer" Тогда
			
			ВидимостьСписка = Ложь;			
			ПерейтиКПрофилю(ПараметрыОткрытия.ИДЭлемента);
			
		КонецЕсли;
		
		Если НЕ ПовторноеОткрытие Тогда
			УстановитьНавигациюДомой(РежимНавигации, ПараметрыОткрытия.ИДЭлемента);
		КонецЕсли;
		
	Иначе
		
		Если НЕ ПовторноеОткрытие Тогда
			
			Если РежимНавигации = 2 ИЛИ РежимНавигации = 3  ИЛИ РежимНавигации = 4 Тогда
				ВидимостьСписка = Истина;
			Иначе
				ВидимостьСписка = Ложь;
			КонецЕсли;
			
			ИДДомой = ОпределитьИДДомой(РежимНавигации);
			Если РежимНавигации = 2 ИЛИ РежимНавигации = 3 Тогда
				УстановитьНавигациюДомой(РежимНавигации, ИДДомой);
				ПерейтиКПрофилю(ИДДомой);
			Иначе
				УстановитьНавигациюДомой(1, ИДДомой);
				ПерейтиКФункции(ИДДомой);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеИсториейНавигации();
	ПараметрыОткрытияФормыОбработаны = Ложь;

КонецПроцедуры

&НаСервере
Процедура ОбновитьДанные(Результат, ОбновитьСписокРазделовПроекта = Истина)

	Попытка
		
		ДанныеФунциональнойМодели = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		
		Если ОбновитьСписокРазделовПроекта И
			ДанныеФунциональнойМодели.Свойство("СписокРазделовПроекта") Тогда
			ЗначениеВРеквизитФормы(ДанныеФунциональнойМодели.СписокРазделовПроекта, "СписокРазделов");
		КонецЕсли;
		Если ДанныеФунциональнойМодели.Свойство("СписокРешенийДерево") Тогда
			ЗначениеВРеквизитФормы(ДанныеФунциональнойМодели.СписокРешенийДерево, "СписокРешений");
		КонецЕсли;
		Если ДанныеФунциональнойМодели.Свойство("СписокФункцийДерево") Тогда
			ЗначениеВРеквизитФормы(ДанныеФунциональнойМодели.СписокФункцийДерево, "СписокФункций");
		КонецЕсли;
		Если ДанныеФунциональнойМодели.Свойство("СписокОбъектовДерево") Тогда
			ЗначениеВРеквизитФормы(ДанныеФунциональнойМодели.СписокОбъектовДерево, "СписокОбъектов");
		КонецЕсли;
		Если ДанныеФунциональнойМодели.Свойство("СписокПрофилейДерево") Тогда
			ЗначениеВРеквизитФормы(ДанныеФунциональнойМодели.СписокПрофилейДерево, "СписокПрофилей");
		КонецЕсли;
		
		// Режим отсутствия решений
		Если СписокРешений.ПолучитьЭлементы().Количество() = 0 Тогда
			Если Параметры.НомерОкна = 3 Тогда
				Параметры.НомерОкна = 0;
			КонецЕсли;
		Иначе
			Элементы.ГруппаСписокРешений.Видимость = Истина;
		КонецЕсли;
		
		ДополнительныеПараметры = ПолучитьИзВременногоХранилища(Результат.АдресДополнительногоРезультата);
		Параметры.ПроектМодели = ДополнительныеПараметры.ПроектМодели;
		
		ИнициализироватьПроектМодели(ДополнительныеПараметры.СписокПроектов);
			
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление данных функциональной модели 1С:Облачная карта прикладных решений'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));	
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьПроектМодели(СписокПроектов)
	
	ПроектыМодели.Очистить();
	Для каждого Проект Из СписокПроектов Цикл
		ПроектыМодели.Добавить(Проект);		
	КонецЦикла;
	
	Если ПроектыМодели.Количество() > 1 Тогда
		Элементы.НавигацияПроект.Видимость = Истина;
	Иначе
		Элементы.НавигацияПроект.Видимость = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ПроектМодели) Тогда		
		Возврат;
	КонецЕсли;
	
	Если ПроектыМодели.Количество() > 0 Тогда
		Параметры.ПроектМодели = ПроектыМодели[0].Значение;
	Иначе
		Параметры.ПроектМодели = "";
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборПроекта(ВыбранныйПроект)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("НомерОкна", Параметры.НомерОкна);
	ПараметрыФормы.Вставить("ПроектМодели", ВыбранныйПроект);

	ОткрытьФорму(ИмяФормы, ПараметрыФормы);
	
	// Если форма уже открыта, то оповестим ее, чтобы показать новые данные
	Оповестить("СППРОРСР_ФункциональнаяМодель", ПараметрыФормы);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОтборРазделовПроекта()

	РазделыПроектаОтбор = Новый Массив;
	СписокРазделов.ПолучитьЭлементы();
	СписокРазделовДерево = РеквизитФормыВЗначение("СписокРазделов");
	
	СтрокиОтбора = СписокРазделовДерево.Строки.НайтиСтроки(Новый Структура("Пометка", Истина), Истина);	
	Для каждого СтрокаОтбора Из СтрокиОтбора Цикл
		РазделыПроектаОтбор.Добавить(СтрокаОтбора.ИД);
	КонецЦикла;
	
	Возврат РазделыПроектаОтбор;

КонецФункции


&НаСервере
Функция СформироватьЗаголовокФормы()

	Если ПроектыМодели.Количество() > 1 
		И ЗначениеЗаполнено(Параметры.ПроектМодели) Тогда
		
		ТекстЗаголовка = НСтр("ru = 'Облачная карта прикладных решений'") + "
			| " + Параметры.ПроектМодели;
	Иначе
		ТекстЗаголовка = НСтр("ru = 'Облачная карта прикладных решений'");
	КонецЕсли;
	
	Если Параметры.НомерОкна = 1 Тогда
		ТекстЗаголовка = ТекстЗаголовка + " (" + НСтр("ru = 'функции'") + ")";
	ИначеЕсли Параметры.НомерОкна = 2 Тогда
		ТекстЗаголовка = ТекстЗаголовка + " (" + НСтр("ru = 'объекты и профили'") + ")";
	КонецЕсли;
	
	ЗаголовокФормыНомерОкна = Параметры.НомерОкна;
	
	Возврат ТекстЗаголовка;	

КонецФункции

#КонецОбласти

#Область СписокФункций

&НаКлиенте
Процедура ПерейтиКФункции(Знач ИДФункции, Знач ОбновитьИсториюНавигации = Истина)

	ТекущаяСтрока = 0;
	СпискиПоиска = Новый Структура;
	
	// Установим строку в списке функций на нужной
	ТекущийСписок = СписокФункций.ПолучитьЭлементы();
	ДанныеСтроки = НайтиСтрокуПоИДКлиент(ИДФункции, ТекущийСписок);
	Если ДанныеСтроки <> Неопределено Тогда
		НеОбрабатыватьАктивизациюСтроки = Истина;
		ТекущаяСтрока = ДанныеСтроки.ПолучитьИдентификатор();
		Элементы.СписокФункций.ТекущаяСтрока = ТекущаяСтрока;
		СпискиПоиска.Вставить("СписокФункций");
	Иначе
		ТекущийСписок = СписокРешений.ПолучитьЭлементы();
		ДанныеСтроки = НайтиСтрокуПоИДКлиент(ИДФункции, ТекущийСписок);
		Если ДанныеСтроки <> Неопределено Тогда
			НеОбрабатыватьАктивизациюСтрокиРешений = Истина;
			ТекущаяСтрока = ДанныеСтроки.ПолучитьИдентификатор();
			Элементы.СписокРешений.ТекущаяСтрока = ТекущаяСтрока;
			СпискиПоиска.Вставить("СписокРешений");
		КонецЕсли;
	КонецЕсли;
	
	ПоказатьОписаниеФункции(ТекущаяСтрока, СпискиПоиска);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОписаниеФункции(ИндексЭлемента, СпискиПоиска, ОбновитьИсториюНавигации = Истина, 
									ПоказатьСхему = Истина, ПоказатьОписание = Истина)

#Если НЕ МобильныйКлиент Тогда
	
	ДанныеСтроки = ПолучитьДанныеСтрокиПоИндексу(ИндексЭлемента, СпискиПоиска);
	Если ДанныеСтроки = Неопределено Тогда
		СхемаФункции = Новый ГрафическаяСхема;
		Возврат;
	КонецЕсли;
	
	Если ДанныеСтроки.Схема <> Неопределено
		И ДанныеСтроки.Описание <> Неопределено Тогда		
		
		ТекущаяФункция_ИД = ДанныеСтроки.ИД;
		ПоказатьОписаниеФункцииСервер(ИндексЭлемента, СпискиПоиска, ОбновитьИсториюНавигации, ПоказатьСхему, ПоказатьОписание);
		
	Иначе
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
		ПараметрыОжидания.ОповещениеПользователя.НавигационнаяСсылка = "e1cib/app/" + ПутьКОбработке;
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("ИндексЭлемента", ИндексЭлемента);
		ПараметрыОповещения.Вставить("СпискиПоиска", СпискиПоиска);
		ПараметрыОповещения.Вставить("ОбновитьИсториюНавигации", ОбновитьИсториюНавигации);
		ПараметрыОповещения.Вставить("ПоказатьСхему", ПоказатьСхему);
		ПараметрыОповещения.Вставить("ПоказатьОписание", ПоказатьОписание);
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПолучитьОписаниеФункцииЗавершение", ЭтотОбъект, ПараметрыОповещения);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ПолучитьОписаниеФункцииНачало(ДанныеСтроки.ИД), 
													ОповещениеОЗавершении, ПараметрыОжидания);
		
	КонецЕсли;

#КонецЕсли

КонецПроцедуры

&НаСервере
Функция ПолучитьОписаниеФункцииНачало(ИД)
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ИД", ИД);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Загрузка информации о функции'");
	ПараметрыВыполнения.ДополнительныйРезультат = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ПутьКОбработке + ".МодульОбъекта.ПолучитьДанныеФункции",
												ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура ПолучитьОписаниеФункцииЗавершение(Результат, ДополнительныеПараметры)	Экспорт
	
	ПолучитьОписаниеФункцииЗавершить(Результат, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьОписаниеФункцииЗавершить(Результат, ДополнительныеПараметры)
	
	ДанныеФункции = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	ДополнительныйРезультат = ПолучитьИзВременногоХранилища(Результат.АдресДополнительногоРезультата);
	
	Если ДанныеФункции = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = ПолучитьДанныеСтрокиПоИндексуСервер(ДополнительныеПараметры.ИндексЭлемента, ДополнительныеПараметры.СпискиПоиска);
	
	ДанныеСтроки.Схема = ОбработатьСхему(ДанныеФункции.Scheme.Получить());
	ДанныеСтроки.Описание = ДополнительныйРезультат.ОписаниеФункции;
	ДанныеСтроки.КонечнаяФункция = ДанныеФункции.IsWorkplace;
	Для каждого ДанныеЭлементаСхемы Из ДанныеФункции.SchemeElements Цикл
		НоваяСтрока = ДанныеСтроки.ЭлементыСхемы.Добавить();
		НоваяСтрока.ИД = ДанныеЭлементаСхемы.ID;
		НоваяСтрока.Код = ДанныеЭлементаСхемы.Code;
		НоваяСтрока.Тип = ДанныеЭлементаСхемы.Type;
		НоваяСтрока.Представление = ДанныеЭлементаСхемы.Name;
	КонецЦикла; 
	Для каждого ДанныеФормыРабочегоМеста Из ДанныеФункции.ListOfWorkplace Цикл
		НоваяСтрока = ДанныеСтроки.ФормыРабочегоМеста.Добавить();
		НоваяСтрока.ИмяОбъектаМетаданных = ДанныеФормыРабочегоМеста.Metadata;
		НоваяСтрока.ИмяФормы = ДанныеФормыРабочегоМеста.FormName;
		НоваяСтрока.ТипФормы = ДанныеФормыРабочегоМеста.FormType;
	КонецЦикла; 
	
	ПоказатьОписаниеФункцииСервер(ДополнительныеПараметры.ИндексЭлемента, 
									ДополнительныеПараметры.СпискиПоиска,
									ДополнительныеПараметры.ОбновитьИсториюНавигации,
									ДополнительныеПараметры.ПоказатьСхему,
									ДополнительныеПараметры.ПоказатьОписание);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьОписаниеФункцииСервер(ИндексЭлемента, СпискиПоиска, ОбновитьИсториюНавигации = Истина, 
										ПоказатьСхему = Истина, ПоказатьОписание = Истина)
	
	ДанныеСтроки = ПолучитьДанныеСтрокиПоИндексуСервер(ИндексЭлемента, СпискиПоиска);	
	Если ПоказатьСхему Тогда
		ПоказатьСхемуФункции(ДанныеСтроки);
	КонецЕсли;
	
	Если ПоказатьОписание И ДанныеСтроки <> Неопределено Тогда
		ОписаниеЭлементаСхемыФункции = ДанныеСтроки.Описание;
	КонецЕсли;
	
	Если ПоказатьСхему Тогда
		
		СформироватьПутьКФункции(ДанныеСтроки);
		ПоказатьПутьКФункции();
		
		ЭлементыСхемыТекущейФункции.Очистить();
		ФормыРабочегоМеста.Очистить();
		КонечнаяФункция = Ложь;
		Если ДанныеСтроки <> Неопределено Тогда
			КонечнаяФункция = ДанныеСтроки.КонечнаяФункция;
			Для каждого ДанныеЭлементаСхемы Из ДанныеСтроки.ЭлементыСхемы Цикл
				ЗаполнитьЗначенияСвойств(ЭлементыСхемыТекущейФункции.Добавить(), ДанныеЭлементаСхемы);
			КонецЦикла; 
			Для каждого ДанныеФормыРабочегоМеста Из ДанныеСтроки.ФормыРабочегоМеста Цикл
				ЗаполнитьЗначенияСвойств(ФормыРабочегоМеста.Добавить(), ДанныеФормыРабочегоМеста);
			КонецЦикла; 
			
			Если ОбновитьИсториюНавигации Тогда
				ДобавитьВИсториюНавигации(ДанныеСтроки.ИД, 1);
			КонецЕсли; 
		КонецЕсли; 
		
		ТекущаяФункция_ИД = ДанныеСтроки.ИД;
		УправлениеИсториейНавигации();
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПоказатьСхемуФункции(ДанныеСтроки)

#Если НЕ МобильныйКлиент Тогда
	
	Если ДанныеСтроки = Неопределено Тогда
		СхемаФункции = Новый ГрафическаяСхема;
		Возврат;
	КонецЕсли;

	СхемаФункции = ДанныеСтроки.Схема;

#КонецЕсли

КонецПроцедуры

&НаСервере
Процедура СформироватьПутьКФункции(ДанныеСтроки)

	ПутьКФункцииСписокФункций.Очистить();
	ПутьКФункцииНачало = 0;
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ПутьКФункцииСписокФункций.Добавить(ДанныеСтроки.ИД, ДанныеСтроки.Представление);
	
	СтрокаРодитель = ДанныеСтроки.ПолучитьРодителя();
	Пока СтрокаРодитель <> Неопределено Цикл
		ПутьКФункцииСписокФункций.Добавить(СтрокаРодитель.ИД, СтрокаРодитель.Представление);
		СтрокаРодитель = СтрокаРодитель.ПолучитьРодителя();
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПоказатьПутьКФункции()

	Если ПутьКФункцииСписокФункций.Количество() = 0 Тогда
		ПутьКФункции = Новый ФорматированнаяСтрока("");
		Возврат;
	КонецЕсли; 
	
	МаксимальноеКоличествоФункций = 3; // Путь к функции состоит только из трех функций
	
	МассивСтрокНавигации = Новый Массив;
	
	НомерПервойФункции = ПутьКФункцииСписокФункций.Количество() - 1;
	
	ПутьКФункцииКонец = Мин(ПутьКФункцииНачало + МаксимальноеКоличествоФункций - 1, НомерПервойФункции);
	
	Для НомерФункции = -ПутьКФункцииКонец По -ПутьКФункцииНачало Цикл
		
		// Список содержит функции в обратном порядке
		ДанныеФункции = ПутьКФункцииСписокФункций.Получить(-НомерФункции);
		
		Если НомерФункции = 0 Тогда
			
			// Текущая функция не содержит гиперссылки
			СтрокаНавигации = Новый ФорматированнаяСтрока(ДанныеФункции.Представление, Новый Шрифт(,,Истина));
			МассивСтрокНавигации.Добавить(СтрокаНавигации);
			
		Иначе
			
			Если НомерФункции = -ПутьКФункцииКонец И НомерФункции <> -НомерПервойФункции Тогда
				// Путь начинается с функции, которая не первая
				МассивСтрокНавигации.Добавить(Новый ФорматированнаяСтрока(
													БиблиотекаКартинок.ПерейтиНазад,,,,
													"ПредыдущиеФункции"));
				МассивСтрокНавигации.Добавить(" \ ");
			КонецЕсли;
			
			// Предыдущие функции выводятся как гиперссылки
			СтрокаНавигации = Новый ФорматированнаяСтрока(
										ДанныеФункции.Представление,,,,
										Строка(ДанныеФункции.Значение));
										
			МассивСтрокНавигации.Добавить(СтрокаНавигации);
			
			Если НомерФункции = -ПутьКФункцииНачало Тогда
				// Путь завершается функцией, которая не последняя
				МассивСтрокНавигации.Добавить(" \ ");
				МассивСтрокНавигации.Добавить(Новый ФорматированнаяСтрока(
													БиблиотекаКартинок.ПерейтиВперед,,,,
													"СледующиеФункции"));
			Иначе	
				МассивСтрокНавигации.Добавить(" \ ");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПутьКФункции = Новый ФорматированнаяСтрока(МассивСтрокНавигации);
	
КонецПроцедуры

&НаСервере
Функция ОбработатьСхему(Схема)

	Если НЕ Схема.ИспользоватьСетку Тогда
		Возврат Схема;
	КонецЕсли;
	
	Сериализатор = Новый СериализаторXDTO(ФабрикаXDTO);
	ОбъектXDTOСхема = Сериализатор.ЗаписатьXDTO(Схема);
		
	ОбъектXDTOСхема.EnableGrid = Ложь;
	ОбъектXDTOСхема.DrawGridMode = РежимОтрисовкиСеткиГрафическойСхемы.НеРисовать;
		
	Возврат Сериализатор.ПрочитатьXDTO(ОбъектXDTOСхема);

КонецФункции

&НаКлиенте
Процедура ПоказатьОписаниеТекущегоРешения()

#Если НЕ МобильныйКлиент Тогда
		
	СхемаФункции = Новый ГрафическаяСхема;
	
	ТекущаяСтрока = Элементы.СписокРешений.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьОписаниеФункции(Элементы.СписокРешений.ТекущаяСтрока, Новый Структура("СписокРешений"));
	
#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОписаниеТекущейФункции()

#Если НЕ МобильныйКлиент Тогда
		
	СхемаФункции = Новый ГрафическаяСхема;
	
	ТекущаяСтрока = Элементы.СписокФункций.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ПоказатьОписаниеФункции(Элементы.СписокФункций.ТекущаяСтрока, Новый Структура("СписокФункций"));
	
#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОписаниеЭлементаСхемы()

	ЗаполнитьОписаниеГиперссылкиЭлементаСхемы();
	УстановитьВидимостьСхемыФункции(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьГиперссылкуЭлементаСхемы()

	ЭлементСхемы = Элементы.СхемаФункции.ТекущийЭлемент;
	Если ЭлементСхемы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТипЭлементаСхемы = ТипЗнч(ЭлементСхемы);
	Если ТипЭлементаСхемы <> Тип("ЭлементГрафическойСхемыДекорация") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("Код", ЭлементСхемы.Имя);
	МассивСтрок = ЭлементыСхемыТекущейФункции.НайтиСтроки(ПараметрыОтбора);
	Если МассивСтрок.Количество() <> 0 Тогда
		ДанныеЭлементаСхемы = МассивСтрок[0];
		Если ДанныеЭлементаСхемы.ИД <> ПустойКлюч Тогда
			
			Если ДанныеЭлементаСхемы.Тип = "Function" Тогда
				ПерейтиКФункции(ДанныеЭлементаСхемы.ИД);				
				
			ИначеЕсли ДанныеЭлементаСхемы.Тип = "Control"
				ИЛИ ДанныеЭлементаСхемы.Тип = "Input" 
				ИЛИ ДанныеЭлементаСхемы.Тип = "Link" 
				ИЛИ ДанныеЭлементаСхемы.Тип = "Output" Тогда
				
				ОткрытьФункциональнуюМодель(ДанныеЭлементаСхемы.ИД, ДанныеЭлементаСхемы.Тип, 2);
				
			ИначеЕсли ДанныеЭлементаСхемы.Тип = "Performer" Тогда
				
				ОткрытьФункциональнуюМодель(ДанныеЭлементаСхемы.ИД, ДанныеЭлементаСхемы.Тип, 2);
			КонецЕсли;
			
		ИначеЕсли ДанныеЭлементаСхемы.Тип = "Function" Тогда
			ОткрытьФормуРабочегоМеста();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОписаниеГиперссылкиЭлементаСхемы()

	Если НЕ РежимПереключенияСтраниц
		И НЕ ВидимостьОписания Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементСхемы = Элементы.СхемаФункции.ТекущийЭлемент;
	
	ТипЭлементаСхемы = ТипЗнч(ЭлементСхемы);
	Если ТипЭлементаСхемы <> Тип("ЭлементГрафическойСхемыДекорация") Тогда
		ПоказатьОписаниеГиперссылки(ТекущаяФункция_ИД, "Function");
		Возврат;
	КонецЕсли;
	ПараметрыОтбора = Новый Структура("Код", ЭлементСхемы.Имя);
	МассивСтрок = ЭлементыСхемыТекущейФункции.НайтиСтроки(ПараметрыОтбора);
	Если МассивСтрок.Количество() <> 0 Тогда
		ДанныеЭлементаСхемы = МассивСтрок[0];
		Если ДанныеЭлементаСхемы.ИД <> ПустойКлюч Тогда
			ПоказатьОписаниеГиперссылки(ДанныеЭлементаСхемы.ИД, ДанныеЭлементаСхемы.Тип);
		ИначеЕсли ДанныеЭлементаСхемы.Тип = "Function" Тогда
			ОткрытьФормуРабочегоМеста();
		Иначе
			ПоказатьОписаниеГиперссылки(ТекущаяФункция_ИД, "Function");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОписаниеГиперСсылки(ИД, ТипЭлементаСхемы)
	
	Если ТипЭлементаСхемы = "Performer" Тогда
		
		ТекущийСписок = СписокПрофилей.ПолучитьЭлементы();
		ДанныеСтроки = НайтиСтрокуПоИДКлиент(ИД, ТекущийСписок);
		Если ДанныеСтроки <> Неопределено Тогда
			ПоказатьОписаниеПрофиля(ДанныеСтроки, Ложь);
		КонецЕсли;
		
	ИначеЕсли ТипЭлементаСхемы = "Function" Тогда
		
		СпискиПоиска = Новый Структура;
		
		ТекущийСписок = СписокФункций.ПолучитьЭлементы();
		ДанныеСтроки = НайтиСтрокуПоИДКлиент(ИД, ТекущийСписок);
		Если ДанныеСтроки = Неопределено Тогда
			ТекущийСписок = СписокРешений.ПолучитьЭлементы();
			ДанныеСтроки = НайтиСтрокуПоИДКлиент(ИД, ТекущийСписок);
			СпискиПоиска.Вставить("СписокРешений");
		Иначе
			СпискиПоиска.Вставить("СписокФункций");
		КонецЕсли;
		
		Если ДанныеСтроки <> Неопределено Тогда
			ПоказатьОписаниеФункции(ДанныеСтроки.ПолучитьИдентификатор(), СпискиПоиска, Ложь, Ложь);
		КонецЕсли;

	Иначе
		
		ТекущийСписок = СписокОбъектов.ПолучитьЭлементы();
		ДанныеСтроки = НайтиСтрокуПоИДКлиент(ИД, ТекущийСписок);
		Если ДанныеСтроки <> Неопределено Тогда
			ПоказатьОписаниеОбъекта(ДанныеСтроки, Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФункциональнуюМодель(ИДЭлемента, ТипЭлемента, НомерОкна)

	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ИДЭлемента", ИДЭлемента);
	ПараметрыФормы.Вставить("ТипЭлемента", ТипЭлемента);
	ПараметрыФормы.Вставить("НомерОкна", НомерОкна);
	ПараметрыФормы.Вставить("ПроектМодели", Параметры.ПроектМодели);
	ПараметрыФормы.Вставить("АдресСписковОбъектовМодели", ПолучитьСпискиОбъектовМодели());

	ОткрытьФорму(ИмяФормы, ПараметрыФормы);
	
	// Если форма уже открыта, то оповестим ее, чтобы показать новые данные
	Оповестить("СППРОРСР_ФункциональнаяМодель", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРабочегоМеста()

	Если НЕ КонечнаяФункция Тогда
		Возврат;
	КонецЕсли;
	
	Если ФормыРабочегоМеста.Количество() = 1 Тогда
		
		ДанныеФормыРабочегоМеста = ФормыРабочегоМеста[0];
		ПолноеИмяФормы = ПолноеИмяФормыРабочегоМеста(
							ДанныеФормыРабочегоМеста.ИмяОбъектаМетаданных,
							ДанныеФормыРабочегоМеста.ИмяФормы, 
							ДанныеФормыРабочегоМеста.ТипФормы);
							
		СписокВыбораРабочихМест = Новый СписокЗначений;
		СписокВыбораРабочихМест.Добавить(ПолноеИмяФормы);
		ОткрытьФормуРабочегоМестаЗавершение(СписокВыбораРабочихМест[0], Неопределено);
		
	Иначе
		
		СписокВыбораРабочихМест = СписокВыбораРабочихМест();
		Если СписокВыбораРабочихМест.Количество() = 1 Тогда
			ОткрытьФормуРабочегоМестаЗавершение(СписокВыбораРабочихМест[0], Неопределено);
		ИначеЕсли СписокВыбораРабочихМест.Количество() > 1 Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуРабочегоМестаЗавершение", ЭтотОбъект);
			СписокВыбораРабочихМест.ПоказатьВыборЭлемента(ОписаниеОповещения, НСтр("ru = 'Выберите какую форму открыть'"));
		КонецЕсли; 
		
	КонецЕсли; 

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолноеИмяФормыРабочегоМеста(ИмяОбъектаМетаданных, ИмяФормыРабочегоМеста, ТипФормы)

	ПолноеИмяФормы = ИмяОбъектаМетаданных;
	Если ЗначениеЗаполнено(ИмяФормыРабочегоМеста) Тогда
		ПолноеИмяФормы = ПолноеИмяФормы + ".Форма." + ИмяФормыРабочегоМеста;
	ИначеЕсли ТипФормы <> "" Тогда
		ПолноеИмяФормы = ПолноеИмяФормы + "." + ТипФормы;
	Иначе
		ПолноеИмяФормы = Неопределено;
	КонецЕсли;
	
	Возврат ПолноеИмяФормы;
	
КонецФункции

&НаСервере
Функция СписокВыбораРабочихМест()

	СписокВыбора = Новый СписокЗначений;
	
	Для каждого ДанныеФормыРабочегоМеста Из ФормыРабочегоМеста Цикл
		ПолноеИмяФормы = ПолноеИмяФормыРабочегоМеста(
								ДанныеФормыРабочегоМеста.ИмяОбъектаМетаданных,
								ДанныеФормыРабочегоМеста.ИмяФормы, 
								ДанныеФормыРабочегоМеста.ТипФормы);
								
		Если ПолноеИмяФормы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПредставлениеФормы = ПолноеИмяФормы;
		МетаданныеФормы = Метаданные.НайтиПоПолномуИмени(ПолноеИмяФормы);
		Если МетаданныеФормы = Неопределено Тогда
			МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ДанныеФормыРабочегоМеста.ИмяОбъектаМетаданных);
			Если МетаданныеОбъекта <> Неопределено Тогда
				ПредставлениеФормы = МетаданныеОбъекта.Синоним;
			КонецЕсли; 
		Иначе
			ПредставлениеФормы = МетаданныеФормы.Синоним;
		КонецЕсли;
		
		Если Лев(ПолноеИмяФормы, 6) = "Отчет." Тогда
			ПредставлениеФормы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = 'Отчет ""%1""'"),
									ПредставлениеФормы);
		Иначе
			ПредставлениеФормы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = 'Форма ""%1""'"),
									ПредставлениеФормы);
		КонецЕсли; 
		
		СписокВыбора.Добавить(ПолноеИмяФормы, ПредставлениеФормы);
	КонецЦикла;
	
	Возврат СписокВыбора;

КонецФункции

&НаКлиенте
Процедура ОткрытьФормуРабочегоМестаЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		Попытка
			ОткрытьФорму(ВыбранныйЭлемент.Значение);
		Исключение
			// При отсутствии формы в конфигурации предупреждение пользователю
			// не выводится, т.к. отсутствие формы, описанной в модели СППР ОР/СР
			// в конфигурации допускается. Если форма в конфигурации присутствует,
			// она будет отображена.
			ОбновитьОтображениеДанных();
		КонецПопытки; 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСпискиОбъектовМодели()

	СпискиОбъектовМодели = Новый Структура;
	
	Если СписокРазделов.ПолучитьЭлементы().Количество() > 0 Тогда
		СпискиОбъектовМодели.Вставить("СписокРазделов", РеквизитФормыВЗначение("СписокРазделов"));
	КонецЕсли;
	Если ПолучитьОтборРазделовПроекта().Количество() = 0 Тогда	// Только если не установлен отбор по разделам
		Если СписокРешений.ПолучитьЭлементы().Количество() > 0 Тогда
			СпискиОбъектовМодели.Вставить("СписокРешений", РеквизитФормыВЗначение("СписокРешений"));
		КонецЕсли;
		Если СписокФункций.ПолучитьЭлементы().Количество() > 0 Тогда
			СпискиОбъектовМодели.Вставить("СписокФункций", РеквизитФормыВЗначение("СписокФункций"));
		КонецЕсли;
	КонецЕсли;
	Если СписокПрофилей.ПолучитьЭлементы().Количество() > 0 Тогда
		СпискиОбъектовМодели.Вставить("СписокПрофилей", РеквизитФормыВЗначение("СписокПрофилей"));
	КонецЕсли;
	Если СписокОбъектов.ПолучитьЭлементы().Количество() > 0 Тогда
		СпискиОбъектовМодели.Вставить("СписокОбъектов", РеквизитФормыВЗначение("СписокОбъектов"));
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(СпискиОбъектовМодели);

КонецФункции

&НаКлиенте
Процедура Подключаемый_СписокРешенийПриАктивизацииСтроки()

	ПоказатьОписаниеТекущегоРешения();

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокФункцийПриАктивизацииСтроки()

	ПоказатьОписаниеТекущейФункции();

КонецПроцедуры

#КонецОбласти

#Область СписокОбъектов

&НаКлиенте
Функция ПерейтиКОбъекту(Знач ИДОбъекта, Знач ОбновитьИсториюНавигации = Истина)

	// Установим строку в списке объектов на нужной
	ТекущийСписок = СписокОбъектов.ПолучитьЭлементы();
	ДанныеСтроки = НайтиСтрокуПоИДКлиент(ИДОбъекта, ТекущийСписок);
	Если ДанныеСтроки <> Неопределено Тогда
		НеОбрабатыватьАктивизациюСтроки = Истина;
		Элементы.СписокОбъектов.ТекущаяСтрока = ДанныеСтроки.ПолучитьИдентификатор();

		ПоказатьОписаниеОбъекта(ДанныеСтроки, ОбновитьИсториюНавигации);
	
		РежимНавигации = 2;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьОписаниеОбъекта(ДанныеСтроки, ОбновитьИсториюНавигации = Истина)
	
	ИндексЭлемента = ДанныеСтроки.ПолучитьИдентификатор();
	СпискиПоиска = Новый Структура("СписокОбъектов");
	Если ДанныеСтроки.ОписаниеПодготовлено Тогда
		
		ПоказатьОписаниеОбъектаСервер(ИндексЭлемента, СпискиПоиска);
		
	Иначе
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("ИндексЭлемента", ИндексЭлемента);
		ПараметрыОповещения.Вставить("СпискиПоиска", СпискиПоиска);
		ПараметрыОповещения.Вставить("ОбновитьИсториюНавигации", ОбновитьИсториюНавигации);
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПолучитьОписаниеОбъектаЗавершение", ЭтотОбъект, ПараметрыОповещения);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ПолучитьОписаниеОбъектаНачало(ДанныеСтроки.ИД), 
													ОповещениеОЗавершении, ПараметрыОжидания);
		
	КонецЕсли;
												
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОписаниеОбъектаНачало(ИД)
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ИД", ИД);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Загрузка информации об объекте данных'");
	ПараметрыВыполнения.ДополнительныйРезультат = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ПутьКОбработке + ".МодульОбъекта.ПолучитьДанныеОбъекта",
												ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура ПолучитьОписаниеОбъектаЗавершение(Результат, ДополнительныеПараметры)	Экспорт
	
	ПолучитьОписаниеОбъектаЗавершить(Результат, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьОписаниеОбъектаЗавершить(Результат, ДополнительныеПараметры)
	
	ДанныеОбъекта = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	ДополнительныйРезультат = ПолучитьИзВременногоХранилища(Результат.АдресДополнительногоРезультата);
	
	Если ДанныеОбъекта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = ПолучитьДанныеСтрокиПоИндексуСервер(ДополнительныеПараметры.ИндексЭлемента, ДополнительныеПараметры.СпискиПоиска);
	
	ДанныеСтроки.ОписаниеHTML = ДанныеОбъекта;
	ДанныеСтроки.ОписаниеПодготовлено = Истина;
	
	ПоказатьОписаниеОбъектаСервер(ДополнительныеПараметры.ИндексЭлемента, 
									ДополнительныеПараметры.СпискиПоиска,
									ДополнительныеПараметры.ОбновитьИсториюНавигации);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьОписаниеОбъектаСервер(ИндексЭлемента, СпискиПоиска, ОбновитьИсториюНавигации = Истина)
	
	ДанныеСтроки = ПолучитьДанныеСтрокиПоИндексуСервер(ИндексЭлемента, СпискиПоиска);
	СформироватьОписаниеОбъекта(ДанныеСтроки);
	
	Если ДанныеСтроки <> Неопределено Тогда
		Если ОбновитьИсториюНавигации Тогда
			ДобавитьВИсториюНавигации(ДанныеСтроки.ИД, 3);
		КонецЕсли; 
	КонецЕсли;
	
	УправлениеИсториейНавигации();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьОписаниеОбъекта(ДанныеСтроки)

	Если ДанныеСтроки = Неопределено Тогда
		ОписаниеHTML = "";
		Возврат;
	КонецЕсли; 
	
	ОписаниеHTML = ДанныеСтроки.ОписаниеHTML;
	ОписаниеЭлементаСхемыФункции = ДанныеСтроки.ОписаниеHTML;

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОписаниеТекущегоОбъекта()

	ТекущаяСтрока = Элементы.СписокОбъектов.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные = СписокОбъектов.НайтиПоИдентификатору(ТекущаяСтрока);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьОписаниеОбъекта(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиПоСсылкеHTML(ДанныеСобытия)

	Если НЕ ЗначениеЗаполнено(ДанныеСобытия.Href) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСсылки = ДанныеСобытия.Href;
	
	НачалоИД = СтрНайти(ТекстСсылки, "ИД_Функции");
	Если НачалоИД <> 0 Тогда
		
		ИД_Функции = Новый УникальныйИдентификатор(Сред(ТекстСсылки, НачалоИД + 10));
		Если Параметры.НомерОкна = 1 Тогда
			Если Элементы.СхемаФункции.Видимость = Ложь Тогда
				УстановитьВидимостьСхемыФункции(Истина);
			КонецЕсли;
			ПерейтиКФункции(ИД_Функции);
		Иначе
			ОткрытьФункциональнуюМодель(ИД_Функции, "Function", 1);
		КонецЕсли; 
	
		Возврат;
		
	КонецЕсли;
	
	НачалоИД = СтрНайти(ТекстСсылки, "ИД_Объекта");
	Если НачалоИД <> 0 Тогда
		ИД_Объекта = Новый УникальныйИдентификатор(Сред(ТекстСсылки, НачалоИД + 10));
		Если Параметры.НомерОкна = 2 Тогда
			ПерейтиКОбъекту(ИД_Объекта);
		Иначе
			ОткрытьФункциональнуюМодель(ИД_Объекта, "Input", 2);
		КонецЕсли; 
		
		Возврат;
		
	КонецЕсли;
	
	НачалоИД = СтрНайти(ТекстСсылки, "ИД_Профиля");
	Если НачалоИД <> 0 Тогда
		ИД_Профиля = Новый УникальныйИдентификатор(Сред(ТекстСсылки, НачалоИД + 10));
		Если Параметры.НомерОкна = 2 Тогда
			ПерейтиКПрофилю(ИД_Профиля);
		Иначе
			ОткрытьФункциональнуюМодель(ИД_Профиля, "Performer", 2);
		КонецЕсли; 
		
		Возврат;
		
	КонецЕсли;
	
	НачалоИД = СтрНайти(ТекстСсылки, "ИД_КомандаФормы_");
	Если НачалоИД <> 0 Тогда
		ИД_КомандаФормы = Сред(ТекстСсылки, НачалоИД + 16);
		Если ИД_КомандаФормы = "ПроверитьПодключение" Тогда
			ПроверитьПодключение();
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокОбъектовПриАктивизацииСтроки()

	ПоказатьОписаниеТекущегоОбъекта();

КонецПроцедуры

#КонецОбласти

#Область СписокПрофилей

&НаКлиенте
Функция ПерейтиКПрофилю(Знач ИДПрофиля, Знач ОбновитьИсториюНавигации = Истина)

	// Установим строку в списке объектов на нужной
	ТекущийСписок = СписокПрофилей.ПолучитьЭлементы();
	ДанныеСтроки = НайтиСтрокуПоИДКлиент(ИДПрофиля, ТекущийСписок);
	Если ДанныеСтроки <> Неопределено Тогда
		НеОбрабатыватьАктивизациюСтроки = Истина;
		Элементы.СписокПрофилей.ТекущаяСтрока = ДанныеСтроки.ПолучитьИдентификатор();
		
		ПоказатьОписаниеПрофиля(ДанныеСтроки, ОбновитьИсториюНавигации);
		
		РежимНавигации = 3;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьОписаниеПрофиля(ДанныеСтроки, ОбновитьИсториюНавигации = Истина)
	
	ИндексЭлемента = ДанныеСтроки.ПолучитьИдентификатор();
	СпискиПоиска = Новый Структура("СписокПрофилей");
	Если ДанныеСтроки.ОписаниеПодготовлено Тогда
		
		ПоказатьОписаниеПрофиляСервер(ИндексЭлемента, СпискиПоиска);
		
	Иначе
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("ИндексЭлемента", ИндексЭлемента);
		ПараметрыОповещения.Вставить("СпискиПоиска", СпискиПоиска);
		ПараметрыОповещения.Вставить("ОбновитьИсториюНавигации", ОбновитьИсториюНавигации);
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПолучитьОписаниеПрофиляЗавершение", ЭтотОбъект, ПараметрыОповещения);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ПолучитьОписаниеПрофиляНачало(ДанныеСтроки.ИД), 
													ОповещениеОЗавершении, ПараметрыОжидания);
		
	КонецЕсли;
												
КонецПроцедуры

&НаСервере
Функция ПолучитьОписаниеПрофиляНачало(ИД)
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ИД", ИД);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Загрузка информации о профиле пользователя'");
	ПараметрыВыполнения.ДополнительныйРезультат = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ПутьКОбработке + ".МодульОбъекта.ПолучитьДанныеПрофиля",
												ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура ПолучитьОписаниеПрофиляЗавершение(Результат, ДополнительныеПараметры)	Экспорт
	
	ПолучитьОписаниеПрофиляЗавершить(Результат, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьОписаниеПрофиляЗавершить(Результат, ДополнительныеПараметры)
	
	ДанныеПрофиля = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	ДополнительныйРезультат = ПолучитьИзВременногоХранилища(Результат.АдресДополнительногоРезультата);
	
	ДанныеСтроки = ПолучитьДанныеСтрокиПоИндексуСервер(ДополнительныеПараметры.ИндексЭлемента, ДополнительныеПараметры.СпискиПоиска);
	
	ДанныеСтроки.ОписаниеHTML = ДанныеПрофиля;
	ДанныеСтроки.ОписаниеПодготовлено = Истина;
	
	ПоказатьОписаниеПрофиляСервер(ДополнительныеПараметры.ИндексЭлемента, 
									ДополнительныеПараметры.СпискиПоиска,
									ДополнительныеПараметры.ОбновитьИсториюНавигации);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьОписаниеПрофиляСервер(ИндексЭлемента, СпискиПоиска, ОбновитьИсториюНавигации = Истина)
	
	ДанныеСтроки = ПолучитьДанныеСтрокиПоИндексуСервер(ИндексЭлемента, Новый Структура("СписокПрофилей"));
	СформироватьОписаниеПрофиля(ДанныеСтроки);
	
	Если ДанныеСтроки <> Неопределено Тогда
		Если ОбновитьИсториюНавигации Тогда
			ДобавитьВИсториюНавигации(ДанныеСтроки.ИД, 3);
		КонецЕсли; 
	КонецЕсли;
	
	УправлениеИсториейНавигации();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьОписаниеПрофиля(ДанныеСтроки)

	Если ДанныеСтроки = Неопределено Тогда
		ОписаниеHTML = "";
		Возврат;
	КонецЕсли; 
	
	ОписаниеHTML = ДанныеСтроки.ОписаниеHTML;
	ОписаниеЭлементаСхемыФункции = ДанныеСтроки.ОписаниеHTML;

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОписаниеТекущегоПрофиля()

	ТекущаяСтрока = Элементы.СписокПрофилей.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные = СписокПрофилей.НайтиПоИдентификатору(ТекущаяСтрока);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьОписаниеПрофиля(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокПрофилейПриАктивизацииСтроки()

	ПоказатьОписаниеТекущегоПрофиля();

КонецПроцедуры

#КонецОбласти

#Область Навигация

&НаКлиенте
Процедура УстановитьРежимНавигации()
	
	Если РежимНавигации = 1 Тогда	//Схема функции
		Элементы.ЗаголовокФормыНомерОкна.Доступность = Истина;
		Элементы.ГруппаСписокФункций.Видимость = Истина;
		Элементы.СхемаФункции.Видимость = Истина;
		Элементы.СтраницаОписаниеHTML.Видимость = Истина;
		Элементы.ГруппаСписокРешенийОтбор.Видимость = Ложь;
		Элементы.ОткрытьФункциональнуюМодель.Видимость = Ложь;
		Элементы.ПодменюКорпоративноеРешение.Видимость = Ложь;
		Элементы.КомандыФормы.Доступность = Истина;
		Элементы.ПоказатьСписок.Доступность = Истина;
		Элементы.ПоказатьОписание.Доступность = Истина;
		Элементы.СтраницыНавигация.ТекущаяСтраница = Элементы.СтраницаСписокФункций;
		Элементы.СтраницыИнформация.ТекущаяСтраница = Элементы.СтраницаИнформацияФункция;
		Элементы.СтраницыДанные.ТекущаяСтраница = Элементы.СтраницаФункция;
		Элементы.СтраницыПросмотр.ТекущаяСтраница = Элементы.СтраницаПросмотрФункциональнойМодели;
	ИначеЕсли РежимНавигации = 2 Тогда	// Объект данных
		Элементы.ОткрытьФункциональнуюМодель.Видимость = Ложь;
		Элементы.ПодменюКорпоративноеРешение.Видимость = Ложь;
		Элементы.КомандыФормы.Доступность = Истина;
		Элементы.ПоказатьСписок.Доступность = Истина;
		Элементы.ПоказатьОписание.Доступность = Истина;
		Элементы.ЗаголовокФормыНомерОкна.Доступность = Истина;
		Элементы.СтраницыНавигация.ТекущаяСтраница = Элементы.СтраницаСписокОбъектов;
		Элементы.СтраницыИнформация.ТекущаяСтраница = Элементы.СтраницаИнформацияПрочее;
		Элементы.СтраницыДанные.ТекущаяСтраница = Элементы.СтраницаОписаниеHTML;
		Элементы.СтраницыПросмотр.ТекущаяСтраница = Элементы.СтраницаПросмотрФункциональнойМодели;
	ИначеЕсли РежимНавигации = 3 Тогда	// Профиль пользователя
		Элементы.ЗаголовокФормыНомерОкна.Доступность = Истина;
		Элементы.ОткрытьФункциональнуюМодель.Видимость = Ложь;
		Элементы.ПодменюКорпоративноеРешение.Видимость = Ложь;
		Элементы.КомандыФормы.Доступность = Истина;
		Элементы.ПоказатьСписок.Доступность = Истина;
		Элементы.ПоказатьОписание.Доступность = Истина;
		Элементы.СтраницыНавигация.ТекущаяСтраница = Элементы.СтраницаСписокПрофилей;
		Элементы.СтраницыИнформация.ТекущаяСтраница = Элементы.СтраницаИнформацияПрочее;
		Элементы.СтраницыДанные.ТекущаяСтраница = Элементы.СтраницаОписаниеHTML;
		Элементы.СтраницыПросмотр.ТекущаяСтраница = Элементы.СтраницаПросмотрФункциональнойМодели;
	ИначеЕсли РежимНавигации = 4 Тогда	// Решения
		Элементы.СтраницаСписокФункций.Видимость = Истина;
		Элементы.ЗаголовокФормыНомерОкна.Доступность = Истина;
		Элементы.ГруппаСписокФункций.Видимость = Ложь;
		Элементы.СхемаФункции.Видимость = Ложь;
		Элементы.СтраницаОписаниеHTML.Видимость = Ложь;
		Элементы.ГруппаСписокРешенийОтбор.Видимость = Истина;
		Элементы.ОткрытьФункциональнуюМодель.Видимость = Истина;
		Элементы.ПодменюКорпоративноеРешение.Видимость = Истина;
		Элементы.ПоказатьСписок.Доступность = Ложь;
		Элементы.КомандыФормы.Доступность = Истина;
		Элементы.ПоказатьОписание.Доступность = Истина;
		Элементы.СтраницыНавигация.ТекущаяСтраница = Элементы.СтраницаСписокФункций;
		Элементы.СтраницыИнформация.ТекущаяСтраница = Элементы.СтраницаИнформацияФункция;
		Элементы.СтраницыДанные.ТекущаяСтраница = Элементы.СтраницаФункция;
		Элементы.СтраницыПросмотр.ТекущаяСтраница = Элементы.СтраницаПросмотрФункциональнойМодели;
	ИначеЕсли РежимНавигации = 0 Тогда	// Длительная операция 
		Элементы.НавигацияПроект.Видимость = Ложь;
		Элементы.ЗаголовокФормыНомерОкна.Доступность = Ложь;
		Элементы.ОткрытьФункциональнуюМодель.Видимость = Ложь;
		Элементы.ПодменюКорпоративноеРешение.Видимость = Ложь;
		Элементы.КомандыФормы.Доступность = Ложь;
		Элементы.ПоказатьСписок.Доступность = Ложь;
		Элементы.ПоказатьОписание.Доступность = Ложь;
		Элементы.СтраницыПросмотр.ТекущаяСтраница = ЭтаФорма.Элементы.СтраницаДлительнаяОперация;
	Иначе	// Остальные случаи (в т.ч. недоступность веб-сервера)
		Элементы.НавигацияПроект.Видимость = Ложь;
		Элементы.ЗаголовокФормыНомерОкна.Доступность = Ложь;
		Элементы.ОткрытьФункциональнуюМодель.Видимость = Ложь;
		Элементы.ПодменюКорпоративноеРешение.Видимость = Ложь;
		Элементы.КомандыФормы.Доступность = Ложь;
		Элементы.ПоказатьСписок.Доступность = Ложь;
		Элементы.ПоказатьОписание.Доступность = Ложь;
		Элементы.СтраницыПросмотр.ТекущаяСтраница = Элементы.СтраницаНачалоНавигации;
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура УправлениеИсториейНавигации()

	МожноПерейтиНазад = ТекущаяПозицияВИстории > 1;
	МожноПерейтиВперед = ТекущаяПозицияВИстории < ИсторияНавигации.Количество();
	
	Элементы.НавигацияНазад.Доступность = МожноПерейтиНазад;
	Элементы.НавигацияВперед.Доступность = МожноПерейтиВперед;
	
	Элементы.СхемаФункцииКонтекстноеМенюНавигацияНазад.Доступность = МожноПерейтиНазад;
	Элементы.СхемаФункцииКонтекстноеМенюНавигацияВперед.Доступность = МожноПерейтиВперед;

КонецПроцедуры

&НаСервере
Процедура ДобавитьВИсториюНавигации(ИД, ТекущийРежимНавигации)

	// Удалим историю которая позже текущей позиции, т.к. вперед уже нельзя перейти
	Для Сч = ТекущаяПозицияВИстории По ИсторияНавигации.Количество() - 1 Цикл
		ИсторияНавигации.Удалить(ТекущаяПозицияВИстории);
	КонецЦикла; 

	КоличествоЭлементовИстории = ИсторияНавигации.Количество();
	Если КоличествоЭлементовИстории = 0 
		ИЛИ ИсторияНавигации[КоличествоЭлементовИстории-1].ИД <> ИД
		ИЛИ ИсторияНавигации[КоличествоЭлементовИстории-1].РежимНавигации <> ТекущийРежимНавигации Тогда
		
		ДанныеИстории = ИсторияНавигации.Добавить();
		ДанныеИстории.РежимНавигации = ТекущийРежимНавигации;
		ДанныеИстории.ИД = ИД;
		
		// Сократим количество записей в истории
		МаксИндексУдаляемойЗаписи = ИсторияНавигации.Количество() - 15;
		Для Сч = 0 По МаксИндексУдаляемойЗаписи - 1 Цикл
			ИсторияНавигации.Удалить(0);
		КонецЦикла; 
		
		ТекущаяПозицияВИстории = ИсторияНавигации.Количество();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура НавигацияВперед()

	ТекущаяПозицияВИстории = ТекущаяПозицияВИстории + 1;
	ДанныеИстории = ИсторияНавигации.Получить(ТекущаяПозицияВИстории - 1);
	ПерейтиПоДаннымНавигации(ДанныеИстории.РежимНавигации, ДанныеИстории.ИД, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура НавигацияНазад()
	
	НеОбрабатыватьАктивизациюСтроки = Истина;
	НеОбрабатыватьАктивизациюСтрокиРешений = Истина;

	ТекущаяПозицияВИстории = ТекущаяПозицияВИстории - 1;
	ДанныеИстории = ИсторияНавигации.Получить(ТекущаяПозицияВИстории - 1);
	ПерейтиПоДаннымНавигации(ДанныеИстории.РежимНавигации, ДанныеИстории.ИД, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура НавигацияДомой()

	ПерейтиПоДаннымНавигации(ДомойРежимНавигации, ДомойИД, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПерейтиПоДаннымНавигации(РежимНавигации, ИД, ОбновитьИсториюНавигации)

	Если РежимНавигации = 1 
		ИЛИ РежимНавигации = 4 Тогда
		ПерейтиКФункции(ИД, ОбновитьИсториюНавигации);
	ИначеЕсли РежимНавигации = 2 Тогда
		ПерейтиКОбъекту(ИД, ОбновитьИсториюНавигации);
	ИначеЕсли РежимНавигации = 3 Тогда
		ПерейтиКПрофилю(ИД, ОбновитьИсториюНавигации);
	Иначе
		ПерейтиКНачалуНавигации(ОбновитьИсториюНавигации);
	КонецЕсли; 

	УправлениеИсториейНавигации();

КонецПроцедуры

&НаСервере
Процедура ПерейтиКНачалуНавигации(ОбновитьИсториюНавигации = Истина)

	Если ОбновитьИсториюНавигации Тогда
		ДобавитьВИсториюНавигации(Неопределено, РежимНавигации);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ВнешниеСсылки

&НаКлиенте
Функция ПолучитьТекстСсылкиНаСхемуФункции(ИД)

	ТекстСсылки = "";
	
	// Строка соединения
	НавигационнаяСсылкаИБ = ПолучитьНавигационнуюСсылкуИнформационнойБазы();
	Если СтрНайти("http://", НавигационнаяСсылкаИБ) = 0
		И СтрНайти("https://", НавигационнаяСсылкаИБ) = 0 Тогда
		НавигационнаяСсылкаИБ = "http://platform.demo.1c.ru/solutionscloud";	//Ссылка на внешний сервис
	КонецЕсли;
	
	ТекстСсылки = НавигационнаяСсылкаИБ + "/?C=%22?id_" + ИД + "%22";	// только для web-клиента
	
	Возврат ТекстСсылки;

КонецФункции

#КонецОбласти

#Область Прочее

&НаКлиенте
Функция ПолучитьДанныеСтрокиПоИндексу(ИндексЭлемента, СпискиПоиска)

	Для каждого СписокПоиска Из СпискиПоиска Цикл
		ДанныеСтроки = ЭтаФорма[СписокПоиска.Ключ].НайтиПоИдентификатору(ИндексЭлемента);
		Если ДанныеСтроки <> Неопределено Тогда
			Возврат ДанныеСтроки;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;	

КонецФункции

&НаСервере
Функция ПолучитьДанныеСтрокиПоИндексуСервер(ИндексЭлемента, СпискиПоиска)

	Для каждого СписокПоиска Из СпискиПоиска Цикл
		ДанныеСтроки = ЭтаФорма[СписокПоиска.Ключ].НайтиПоИдентификатору(ИндексЭлемента);
		Если ДанныеСтроки <> Неопределено Тогда
			Возврат ДанныеСтроки;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;	

КонецФункции

&НаСервере
Функция СохранитьПараметрыОткрытия(ПараметрыФормы)
	
	ПараметрыОткрытия = Новый Структура;
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить("НомерОкна");
	МассивПараметров.Добавить("ПроектМодели");
	МассивПараметров.Добавить("РазделИнтерфейса");
	МассивПараметров.Добавить("ИмяФормы");
	МассивПараметров.Добавить("Заголовок");
	МассивПараметров.Добавить("ИДЭлемента");
	МассивПараметров.Добавить("ТипЭлемента");
	МассивПараметров.Добавить("АдресСписковОбъектовМодели");
	МассивПараметров.Добавить("ДополнительныеПараметры");
	
	Для каждого ИмяПараметра Из МассивПараметров Цикл		
		Если ПараметрыФормы.Свойство(ИмяПараметра) Тогда
			ПараметрыОткрытия.Вставить(ИмяПараметра, ПараметрыФормы[ИмяПараметра]);
		КонецЕсли;		
	КонецЦикла;
	
	ПараметрыОткрытияАдрес = ПоместитьВоВременноеХранилище(ПараметрыОткрытия, ЭтаФорма);

КонецФункции

&НаКлиенте
Процедура УстановитьВидимостьСписка()

	Если РежимНавигации = 4 Тогда
		Элементы.ПоказатьСписок.Пометка = Истина;
		Элементы.СтраницыНавигация.Видимость = Истина;
	Иначе
		Элементы.ПоказатьСписок.Пометка = ВидимостьСписка;
		Элементы.СтраницыНавигация.Видимость = ВидимостьСписка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьСхемыФункции(ВидимостьСхемыФункции = Истина)

	Если Параметры.НомерОкна = 3 Тогда
		Элементы.СхемаФункции.Видимость = Ложь;
	Иначе
		Если РежимПереключенияСтраниц Тогда
			Элементы.СхемаФункции.Видимость = ВидимостьСхемыФункции;
			Элементы.ГруппаОписаниеЭлементаСхемы.Видимость = НЕ(ВидимостьСхемыФункции);
		Иначе
			Элементы.СхемаФункции.Видимость = Истина;
			Элементы.ГруппаОписаниеЭлементаСхемы.Видимость = ВидимостьОписания;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьОписания()

	Элементы.ПоказатьОписание.Пометка = ВидимостьОписания;
	Элементы.ГруппаОписаниеЭлементаСхемы.Видимость = ВидимостьОписания;
	Если Параметры.НомерОкна = 3 Тогда
		Элементы.ПереходКСхемеФункции.Видимость = Ложь;
	Иначе
		Элементы.ПереходКСхемеФункции.Видимость = РежимПереключенияСтраниц;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НайтиСтрокуПоИД(ИД, ТекущийСписок)

	Для каждого ДанныеСтроки Из ТекущийСписок Цикл
		Если ДанныеСтроки.ИД = ИД Тогда
			Возврат ДанныеСтроки;
		КонецЕсли;
		НайденнаяСтрока = НайтиСтрокуПоИД(ИД, ДанныеСтроки.ПолучитьЭлементы());
		Если НайденнаяСтрока <> Неопределено Тогда
			Возврат НайденнаяСтрока;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат Неопределено;

КонецФункции

&НаКлиенте
Функция НайтиСтрокуПоИДКлиент(ИД, ТекущийСписок)

	Для каждого ДанныеСтроки Из ТекущийСписок Цикл
		Если ДанныеСтроки.ИД = ИД Тогда
			Возврат ДанныеСтроки;
		КонецЕсли;
		НайденнаяСтрока = НайтиСтрокуПоИДКлиент(ИД, ДанныеСтроки.ПолучитьЭлементы());
		Если НайденнаяСтрока <> Неопределено Тогда
			Возврат НайденнаяСтрока;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат Неопределено;

КонецФункции

&НаКлиенте
Процедура ПутьКФункцииОбработкаНавигационнойСсылкиНаСервере(НавигационнаяСсылка)

	ПерейтиКФункции(Новый УникальныйИдентификатор(НавигационнаяСсылка));

КонецПроцедуры

&НаСервере
Процедура УстановитьНавигациюДомой(ТекущийРежимНавигации, ИД)

	ДомойРежимНавигации = ТекущийРежимНавигации;
	ДомойИД = ИД;

КонецПроцедуры

&НаСервере
Функция ОпределитьИДДомой(ТекущийРежимНавигации)

	ИДДомой = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	
	Если ТекущийРежимНавигации = 1
		ИЛИ ТекущийРежимНавигации = 4
		ИЛИ ТекущийРежимНавигации = -1 Тогда	//Функции
		
		КоллекцияФункций = СписокРешений.ПолучитьЭлементы();			
		Если КоллекцияФункций.Количество() <> 0 Тогда
			
			ДанныеСтроки = КоллекцияФункций[0];
			ИДДомой = ДанныеСтроки.ИД;
			
		Иначе
			КоллекцияФункций = СписокФункций.ПолучитьЭлементы();			
			Если КоллекцияФункций.Количество() <> 0 Тогда
				
				ДанныеСтроки = КоллекцияФункций[0];
				ИДДомой = ДанныеСтроки.ИД;
				
			КонецЕсли;
		КонецЕсли; 
		
	ИначеЕсли ТекущийРежимНавигации = 2 Тогда	// Объекты данных
		КоллекцияОбъектов = СписокОбъектов.ПолучитьЭлементы();			
		Если КоллекцияОбъектов.Количество() <> 0 Тогда
			
			ДанныеСтроки = КоллекцияОбъектов[0];
			ИДДомой = ДанныеСтроки.ИД;
			
		КонецЕсли;
		
	ИначеЕсли ТекущийРежимНавигации = 3 Тогда	// Профили пользователей
		КоллекцияПрофилей = СписокПрофилей.ПолучитьЭлементы();			
		Если КоллекцияПрофилей.Количество() <> 0 Тогда
			
			ДанныеСтроки = КоллекцияПрофилей[0];
			ИДДомой = ДанныеСтроки.ИД;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИДДомой;

КонецФункции

&НаСервере
Процедура СформироватьСписокСсылокНаФункцииРекурсивно(СсылкиНаФункции, ТекущийУровень, СтрокиДерева)

	Для каждого СтрокаФункция Из СтрокиДерева Цикл
		Если НЕ СтрокаФункция.ПоказатьВСписке Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеСсылки = Новый Структура;
		ДанныеСсылки.Вставить("ИД", СтрокаФункция.ИД);
		ДанныеСсылки.Вставить("Представление", СтрокаФункция.Представление);
		ДанныеСсылки.Вставить("Отступ", ТекущийУровень);
		Если НЕ СтрокаФункция.ВходитВРаздел Тогда
			ДанныеСсылки.Вставить("ЦветТекста", WebЦвета.Серый);
		КонецЕсли;
		СсылкиНаФункции.Добавить(ДанныеСсылки);
		
		СформироватьСписокСсылокНаФункцииРекурсивно(СсылкиНаФункции, ТекущийУровень + 1, СтрокаФункция.Строки);
	КонецЦикла; 

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ИнтеграцияССППРОРСР

&НаКлиенте
Функция ПроверитьПодключение()

	Попытка
		
		Если ОбновитьФормуПоНастройкамСервера() Тогда
			
			ОтключитьОбработчикОжидания("Подключаемый_ПроверитьПодключение");
			
			УстановитьВидимостьСписка();
			УстановитьВидимостьОписания();
			
		КонецЕсли;
		
		Возврат Истина;
		
	Исключение
		
		ОбновитьОтображениеДанных();
			
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(
			НСтр("ru = 'Подключение к веб-сервису 1С:Облачная карта прикладных решений'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
			"Ошибка", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),,Истина);
			
		Возврат Ложь;
			
	КонецПопытки;

КонецФункции

&НаКлиенте
Функция ОбновитьФормуПоНастройкамСервера()
	
	Если ПроверитьПодключениеСервер() Тогда
		
		РежимПереключенияСтраниц = НЕ(ВидимостьОписания);
		РежимНавигации = 0;
		УстановитьРежимНавигации();
		ИнициализацияФормыНавигации(, Параметры.Свойство("АдресСписковОбъектовМодели", АдресСписковОбъектовМодели));	
		
		Возврат Истина;
		
	Иначе
		Возврат Ложь;			
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПроверитьПодключениеСервер()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Возврат ОбработкаОбъект.ПроверитьПодключение();
	
КонецФункции

&НаКлиенте
Функция Подключаемый_ПроверитьПодключение()

	ПроверитьПодключение();
	
КонецФункции

&НаКлиенте
Функция СформироватьОписаниеОшибкиПодключения(ПредставлениеОшибки = "")
	
	Перем ВложенияHTML;
	
	ОписаниеОшибки = Новый ФорматированныйДокумент;
	
	// Заголовок
	НовыйПараграф = ОписаниеОшибки.Элементы.Добавить();
	ТекстЗаголовка = НовыйПараграф.Элементы.Добавить("Ошибка подключения к функциональной модели СППР ОР/СР");
	ТекстЗаголовка.ЦветТекста = Заголовок1_Цвет;
	ТекстЗаголовка.Шрифт = Заголовок1_Шрифт;
	
	НовыйПараграф.Элементы.Добавить(,ТипЭлементаФорматированногоДокумента.ПереводСтроки);
	НовыйПараграф.Элементы.Добавить(,ТипЭлементаФорматированногоДокумента.ПереводСтроки);
	
	// Описание ошибки
	СтрокиОшибки = СтрРазделить(ПредставлениеОшибки, Символы.ПС);
	Если СтрокиОшибки.Количество() > 0 Тогда
		
		НовыйПараграф = ОписаниеОшибки.Элементы.Добавить();
		НовыйПараграф.Отступ = 20;
		
		Для каждого СтрокаОшибки Из СтрокиОшибки Цикл
			НовыйПараграф.Элементы.Добавить(СтрокаОшибки);
			НовыйПараграф.Элементы.Добавить(,ТипЭлементаФорматированногоДокумента.ПереводСтроки);
		КонецЦикла;
		
		НовыйПараграф.Элементы.Добавить(,ТипЭлементаФорматированногоДокумента.ПереводСтроки);
		
	КонецЕсли;
	
	// Ссылка на повтор проверки
	НовыйПараграф = ОписаниеОшибки.Элементы.Добавить();
	НовыйПараграф.Элементы.Добавить("Выполняется проверка возможности подключения, при восстановлении подключения 1С:Облачная карта прикладных решений откроется автоматически.");
	НовыйПараграф.Элементы.Добавить(, ТипЭлементаФорматированногоДокумента.ПереводСтроки);
	
	ДобавленныйТекст = НовыйПараграф.Элементы.Добавить("Проверить подключение сейчас ...");
	ДобавленныйТекст.НавигационнаяСсылка = "ИД_КомандаФормы_ПроверитьПодключение";
	
	ОписаниеОшибкиHTML = "";
	ОписаниеОшибки.ПолучитьHTML(ОписаниеОшибкиHTML, ВложенияHTML);
	
	Возврат ОписаниеОшибкиHTML;
	
КонецФункции

#КонецОбласти

#Область КорпоративноеРешение

&НаКлиенте
Процедура КРУстановитьВидимость()

	Элементы.СписокРешенийВключитьВКорпоративноеРешение.Видимость = РежимКорпоративноеРешение;
	Элементы.ГруппаРаботаСКорпоративнымРешением.Доступность = РежимКорпоративноеРешение;
	
	// Заголовок подменю включает информацию о количестве функций решения и модифицированность
	ПодменюЗаголовок = НСтр("ru='Корпоративное решение'");
	Если ФункцииКорпоративногоРешения.Количество() > 0 Тогда
		ПодменюЗаголовок = ПодменюЗаголовок + " (" + ФункцииКорпоративногоРешения.Количество() + ")";		
	КонецЕсли;
	Если ФункцииКорпоративногоРешенияМодифицированность Тогда
		ПодменюЗаголовок = ПодменюЗаголовок + "*";
	КонецЕсли;	
	Элементы.СтраницаОписаниеHTMLКорпоративноеРешение.Заголовок = ПодменюЗаголовок;
	Элементы.СписокРазделов.ТолькоПросмотр = РежимКорпоративноеРешение;
	
	// Описание Корпоративного решения должно отображаться на отдельной закладке
	Если РежимКорпоративноеРешение Тогда
		Элементы.СтраницаОписаниеHTMLСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	Иначе
		Элементы.СтраницаОписаниеHTMLСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		Элементы.СтраницаОписаниеHTMLСтраницы.ТекущаяСтраница = Элементы.СтраницаОписаниеHTMLСтраницы.ПодчиненныеЭлементы.СтраницаОписаниеHTMLОписание;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КРСоздатьЗаявку(Команда)
	
	Если ФункцииКорпоративногоРешенияМодифицированность Тогда
		
		Оповещение = Новый ОписаниеОповещения("ОбработкаВопросаСозданияПриМодифицированнойКонфигурации", ЭтаФорма);
		ПоказатьВопрос(Оповещение, НСтр("ru='Заявка в 1С:ИжТиСи на корпоративное решение изменена. 
			|Продолжить выполнение операции?'"), РежимДиалогаВопрос.ДаНет, 0);
	Иначе
		РежимКорпоративноеРешение = Истина;
		Если ФункцииКорпоративногоРешения.Количество() > 0 Тогда
			ОбработкаЗакрытияКонфигурацииКорпоративногоРешения();			
		КонецЕсли;
		КРУстановитьВидимость();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВопросаСозданияПриМодифицированнойКонфигурации(Результат, Параметры)	Экспорт

    Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
	
	ОбработкаЗакрытияКонфигурацииКорпоративногоРешения();
	
	РежимКорпоративноеРешение = Истина;
	КРУстановитьВидимость();

КонецПроцедуры

&НаКлиенте
Процедура КРЗакрытьЗаявку(Команда)
	
	Если ФункцииКорпоративногоРешенияМодифицированность Тогда
		
		Оповещение = Новый ОписаниеОповещения("ОбработкаВопросаЗакрытияМодифицированнойКонфигурации", ЭтаФорма, Новый Структура("ПередЗакрытиемФормы", Ложь));
		ПоказатьВопрос(Оповещение, НСтр("ru='Заявка в 1С:ИжТиСи на корпоративное решение изменена. 
			|Продолжить выполнение операции?'"), РежимДиалогаВопрос.ДаНет, 0);
	Иначе
		ОбработкаЗакрытияКонфигурацииКорпоративногоРешения();
		РежимКорпоративноеРешение = Ложь;
		
		КРУстановитьВидимость();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВопросаЗакрытияМодифицированнойКонфигурации(Результат, Параметры)	Экспорт

    Если Результат = КодВозвратаДиалога.Нет Тогда
		Если Параметры.ПередЗакрытиемФормы = Ложь Тогда
			Закрыть();
		Иначе
			ФункцииКорпоративногоРешенияМодифицированность = Ложь;
        	Возврат;
		КонецЕсли;
    КонецЕсли;
	
	ОбработкаЗакрытияКонфигурацииКорпоративногоРешения();
	РежимКорпоративноеРешение = Ложь;
	
	КРУстановитьВидимость();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗакрытияКонфигурацииКорпоративногоРешения()

	Для каждого ТекущиеДанные Из СписокРешений.ПолучитьЭлементы() Цикл
		УправлениеФункциямиКорпоративногоРешенияРекурсивно(ТекущиеДанные, Ложь);
	КонецЦикла;
	ФункцииКорпоративногоРешенияМодифицированность = Ложь;

КонецПроцедуры

#Область СохранитьКонфигурацию

&НаКлиенте
Процедура КРСохранитьЗаявку(Команда)
	
	#Если ВебКлиент Тогда
		
		Оповещение = Новый ОписаниеОповещения("КРСохранитьЗаявкуВыполнитьСохранение", ЭтотОбъект);
		ТекстСообщения = НСтр("ru = 'Для работы с заявками  в 1С:ИжТиСи необходимо установить расширение работы с файлами.'");
		ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайламиПодключено(Оповещение, ТекстСообщения);
		
	#Иначе
		
		КРСохранитьЗаявкуВыполнитьСохранение();
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура КРСохранитьЗаявкуВыполнитьСохранение()
	
	ДиалогСохраненияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогСохраненияФайла.ПолноеИмяФайла = "CORPSolution1C";
	Фильтр = НСтр("ru = 'Заявки в 1С:ИжТиСи на корпоративное решение'")	+ "(*.csl)|*.csl";
	ДиалогСохраненияФайла.Фильтр = Фильтр;
	ДиалогСохраненияФайла.МножественныйВыбор = Ложь;
	ДиалогСохраненияФайла.Заголовок = НСтр("ru='Укажите файл для сохранения заявки в 1С:ИжТиСи на корпоративное решение'");
	ДиалогСохраненияФайла.Показать(Новый ОписаниеОповещения("КРСохранитьКонфигурациюСерверПослеВыбораФайла", ЭтаФорма, Новый Структура("ДиалогСохраненияФайла", ДиалогСохраненияФайла)));
	
КонецПроцедуры

&НаКлиенте
Процедура КРСохранитьКонфигурациюСерверПослеВыбораФайла(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогСохраненияФайла = ДополнительныеПараметры.ДиалогСохраненияФайла;
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		
		ФайлКонфигурации = Новый Файл(ДиалогСохраненияФайла.ВыбранныеФайлы[0]);
		СохранитьКонфигурациюВФайл(ФайлКонфигурации);
						
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Файл заявки в 1С:ИжТиСи на корпоративное решение не выбран!'"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СохранитьКонфигурациюВФайл(ФайлКонфигурации)

	ТекстЗаголовка = НСтр("ru='Сохранение заявки в 1С:ИжТиСи на корпоративное решение'");
	ТекстСостояния = НСтр("ru='Выполняется сохранение заявки в 1С:ИжТиСи на корпоративное решение'");
	Состояние(ТекстЗаголовка, , ТекстСостояния);
	
	АдресДанныхВыгрузкиКонфигурации = ДанныеКонфигурацииКорпоративногоРешения();
	
	Попытка
		ПолучитьИзВременногоХранилища(АдресДанныхВыгрузкиКонфигурации).Записать(ФайлКонфигурации.ПолноеИмя);
	Исключение
			
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(
			НСтр("ru = 'Сохранение файла корпоративного решения 1С:Облачная карта прикладных решений'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
			"Ошибка", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),,Истина);
			
		Возврат;
		
	КонецПопытки;
	
	ФункцииКорпоративногоРешенияМодифицированность = Ложь;
	КРУстановитьВидимость();
	
	ПоказатьПредупреждение(Неопределено, НСтр("ru='Заявка в 1С:ИжТиСи на корпоративное решение сохранена'"));
	
КонецПроцедуры

#КонецОбласти

#Область ОткрытьКонфигурацию

&НаКлиенте
Процедура КРОткрытьСохраненнуюЗаявку(Команда)
	
	Если ФункцииКорпоративногоРешенияМодифицированность Тогда
		
		Оповещение = Новый ОписаниеОповещения("ОбработкаВопросаОткрытияКонфигурации", ЭтаФорма);
		ПоказатьВопрос(Оповещение, НСтр("ru='Заявка в 1С:ИжТиСи на корпоративное решение изменена. 
			|Продолжить выполнение операции?'"), РежимДиалогаВопрос.ДаНет, 0);
	Иначе
		ОбработкаЗакрытияКонфигурацииКорпоративногоРешения();
		ВыбратьФайлКонфигурации();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВопросаОткрытияКонфигурации(Результат, Параметры) Экспорт

    Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		
		Оповещение = Новый ОписаниеОповещения("ВыбратьФайлКонфигурации", ЭтотОбъект);
		ТекстСообщения = НСтр("ru = 'Для работы с заявками  в 1С:ИжТиСи необходимо установить расширение работы с файлами.'");
		ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайламиПодключено(Оповещение, ТекстСообщения);
		
	#Иначе
		
		ВыбратьФайлКонфигурации();
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайлКонфигурации()
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Фильтр = НСтр("ru = 'Заявка в 1С:ИжТиСи на корпоративное решение'")	+ "(*.csl)|*.csl";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = НСтр("ru='Укажите файл заявки в 1С:ИжТиСи на корпоративное решение'");
	ДиалогОткрытияФайла.Показать(Новый ОписаниеОповещения("КРОткрытьКонфигурациюСерверПослеВыбораФайла", ЭтаФорма, Новый Структура("ДиалогОткрытияФайла", ДиалогОткрытияФайла)));
	
КонецПроцедуры

&НаКлиенте
Процедура КРОткрытьКонфигурациюСерверПослеВыбораФайла(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогОткрытияФайла = ДополнительныеПараметры.ДиалогОткрытияФайла;
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		
		ФайлКонфигурации = Новый Файл(ДиалогОткрытияФайла.ВыбранныеФайлы[0]);
		ЗагрузитьКонфигурациюИзФайла(ФайлКонфигурации);
						
	КонецЕсли;
	
	Если Элементы.СтраницаОписаниеHTMLСтраницы.ТекущаяСтраница = Элементы.СтраницаОписаниеHTMLКорпоративноеРешение Тогда
		ЗаполнитьОписаниеКорпоративногоРешения();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКонфигурациюИзФайла(ФайлКонфигурации)

	ТекстЗаголовка = НСтр("ru='Загрузка заявки в 1С:ИжТиСи на корпоративное решение'");
	ТекстСостояния = НСтр("ru='Выполняется загрузка заявки в 1С:ИжТиСи на корпоративное решение'");
	Состояние(ТекстЗаголовка, , ТекстСостояния);
	
	ИмяФайла = ФайлКонфигурации.ПолноеИмя;
	АдресДанныхЗагрузкиКонфигурации = ВнешниеДанныеКонфигурацииКорпоративногоРешения(ИмяФайла);
	
	Если РежимКорпоративноеРешение Тогда
		Если ФункцииКорпоративногоРешения.Количество() > 0 Тогда
			ОбработкаЗакрытияКонфигурацииКорпоративногоРешения();
		КонецЕсли;
	Иначе
		РежимКорпоративноеРешение = Истина;
	КонецЕсли;
	
	ЗагрузитьКонфигурациюКорпоративногоРешения(АдресДанныхЗагрузкиКонфигурации);
	КРУстановитьВидимость();
	
КонецПроцедуры

&НаСервере
Функция ВнешниеДанныеКонфигурацииКорпоративногоРешения(ИмяФайла)
	
	Возврат ПоместитьВоВременноеХранилище(ЗначениеИзФайла(ИмяФайла));

КонецФункции

&НаСервере
Процедура ЗагрузитьКонфигурациюКорпоративногоРешения(АдресДанныхЗагрузкиКонфигурации)

	ИсточникДанныхКонфигурации = ПолучитьИзВременногоХранилища(АдресДанныхЗагрузкиКонфигурации);
	Если ТипЗнч(ИсточникДанныхКонфигурации) = Тип("СписокЗначений") Тогда
		ФункцииКорпоративногоРешения.ЗагрузитьЗначения(ПолучитьИзВременногоХранилища(АдресДанныхЗагрузкиКонфигурации).ВыгрузитьЗначения());
	КонецЕсли;
	
	Для каждого ФункцияКорпоративногоРешения Из ФункцииКорпоративногоРешения Цикл
	
		СпискиПоиска = Новый Структура;
		ИД = ФункцияКорпоративногоРешения.Значение;
		
		ТекущийСписок = СписокФункций.ПолучитьЭлементы();
		ДанныеСтроки = НайтиСтрокуПоИД(ИД, ТекущийСписок);
		Если ДанныеСтроки = Неопределено Тогда
			ТекущийСписок = СписокРешений.ПолучитьЭлементы();
			ДанныеСтроки = НайтиСтрокуПоИД(ИД, ТекущийСписок);
			СпискиПоиска.Вставить("СписокРешений");
		Иначе
			СпискиПоиска.Вставить("СписокФункций");
		КонецЕсли;
		
		Если ДанныеСтроки <> Неопределено Тогда
			ДанныеСтроки.ВключитьВКорпоративноеРешение = Истина;
		КонецЕсли;	
	
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ДанныеКонфигурацииКорпоративногоРешения()
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ЗначениеВФайл(ИмяВременногоФайла, ФункцииКорпоративногоРешения);
	
	АдресДанныхВыгрузки = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайла));
	
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Получение файла корпоративного решения 1С:Облачная карта прикладных решений'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));	
	КонецПопытки;
	
	Возврат АдресДанныхВыгрузки;

КонецФункции

&НаКлиенте
Процедура СписокРешенийВключитьВКорпоративноеРешениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СписокРешений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеФункциямиКорпоративногоРешенияРекурсивно(ТекущиеДанные, ТекущиеДанные.ВключитьВКорпоративноеРешение);
	КРУстановитьВидимость();
	
	Если Элементы.СтраницаОписаниеHTMLСтраницы.ТекущаяСтраница = Элементы.СтраницаОписаниеHTMLКорпоративноеРешение Тогда
		ЗаполнитьОписаниеКорпоративногоРешения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеФункциямиКорпоративногоРешенияРекурсивно(ТекущиеДанные, ВключитьВКорпоративноеРешение)
	
	Если ВключитьВКорпоративноеРешение Тогда
		Если ТекущиеДанные.ЭтоВариантПоставки
			И ФункцииКорпоративногоРешения.НайтиПоЗначению(ТекущиеДанные.ИД) = Неопределено Тогда
			ФункцииКорпоративногоРешения.Добавить(ТекущиеДанные.ИД);
			ФункцииКорпоративногоРешенияМодифицированность = Истина;
			ТекущиеДанные.ВключитьВКорпоративноеРешение = ВключитьВКорпоративноеРешение;
			
			// Исключить вложенные продукты
			Для каждого ТекущиеДанныеЭлемент Из ТекущиеДанные.ПолучитьЭлементы() Цикл
				УправлениеФункциямиКорпоративногоРешенияРекурсивно(ТекущиеДанныеЭлемент, Ложь);
			КонецЦикла;
			
		КонецЕсли;
	Иначе
		ЭлементСписка = ФункцииКорпоративногоРешения.НайтиПоЗначению(ТекущиеДанные.ИД);
		Если ЭлементСписка <> Неопределено Тогда			
			ФункцииКорпоративногоРешения.Удалить(ЭлементСписка);			
			ФункцииКорпоративногоРешенияМодифицированность = Истина;
			ТекущиеДанные.ВключитьВКорпоративноеРешение = ВключитьВКорпоративноеРешение;
		КонецЕсли;
		
		// Исключить вложенные продукты
		Для каждого ТекущиеДанныеЭлемент Из ТекущиеДанные.ПолучитьЭлементы() Цикл
			УправлениеФункциямиКорпоративногоРешенияРекурсивно(ТекущиеДанныеЭлемент, ВключитьВКорпоративноеРешение);
		КонецЦикла;
		
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОписаниеКорпоративногоРешения()

	МассивФункцийКЗаполнению = Неопределено;
	АдресФункцийКорпоративногоРешения = ПолучитьАдресФункцийКорпоративногоРешения(МассивФункцийКЗаполнению);
	
	Если МассивФункцийКЗаполнению.Количество() = 0 Тогда
		КРОписаниеHTML = ПолучитьОписаниеКорпоративногоРешения(АдресФункцийКорпоративногоРешения);
	Иначе
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
		ПараметрыОжидания.ОповещениеПользователя.НавигационнаяСсылка = "e1cib/app/" + ПутьКОбработке;
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("АдресФункцийКорпоративногоРешения", АдресФункцийКорпоративногоРешения);
		ПараметрыОповещения.Вставить("МассивФункцийКЗаполнению", МассивФункцийКЗаполнению);
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗаполнитьОписаниеКорпоративногоРешенияЗавершение", ЭтотОбъект, ПараметрыОповещения);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ЗаполнитьОписаниеКорпоративногоРешенияНачало(МассивФункцийКЗаполнению), 
													ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ЗаполнитьОписаниеКорпоративногоРешенияНачало(МассивИД)
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("МассивИД", МассивИД);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Загрузка информации о функциях Корпоративного решения'");
	ПараметрыВыполнения.ДополнительныйРезультат = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ПутьКОбработке + ".МодульОбъекта.ПолучитьДанныеФункций",
												ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьОписаниеКорпоративногоРешенияЗавершение(Результат, ДополнительныеПараметры)	Экспорт
	
	ЗаполнитьОписаниеКорпоративногоРешенияЗавершить(Результат, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОписаниеКорпоративногоРешенияЗавершить(Результат, ДополнительныеПараметры)
	
	МассивФункцийКЗаполнению = ДополнительныеПараметры.МассивФункцийКЗаполнению;
	
	ДанныеФункций = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	ДополнительныйРезультат = ПолучитьИзВременногоХранилища(Результат.АдресДополнительногоРезультата);
	
	Если ДанныеФункций = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для ИндексФункции = 0 По ДанныеФункций.Количество()-1 Цикл
		
		ДанныеФункции = ДанныеФункций[ИндексФункции];
		ОписаниеФункции = ДополнительныйРезультат.ОписаниеФункций[ИндексФункции];
		ИД = МассивФункцийКЗаполнению[ИндексФункции];
		
		СпискиПоиска = Новый Структура;
		
		ТекущийСписок = СписокФункций.ПолучитьЭлементы();
		ДанныеСтроки = НайтиСтрокуПоИД(ИД, ТекущийСписок);
		Если ДанныеСтроки = Неопределено Тогда
			ТекущийСписок = СписокРешений.ПолучитьЭлементы();
			ДанныеСтроки = НайтиСтрокуПоИД(ИД, ТекущийСписок);
			СпискиПоиска.Вставить("СписокРешений");
		Иначе
			СпискиПоиска.Вставить("СписокФункций");
		КонецЕсли;
		
		Если ДанныеСтроки = Неопределено Тогда
			Возврат;
		КонецЕсли;	
		
		ДанныеСтроки = ПолучитьДанныеСтрокиПоИндексуСервер(ДанныеСтроки.ПолучитьИдентификатор(), СпискиПоиска);
		
		ДанныеСтроки.Схема = ОбработатьСхему(ДанныеФункции.Scheme.Получить());
		ДанныеСтроки.Описание = ОписаниеФункции;
		ДанныеСтроки.КонечнаяФункция = ДанныеФункции.IsWorkplace;
		Для каждого ДанныеЭлементаСхемы Из ДанныеФункции.SchemeElements Цикл
			НоваяСтрока = ДанныеСтроки.ЭлементыСхемы.Добавить();
			НоваяСтрока.ИД = ДанныеЭлементаСхемы.ID;
			НоваяСтрока.Код = ДанныеЭлементаСхемы.Code;
			НоваяСтрока.Тип = ДанныеЭлементаСхемы.Type;
			НоваяСтрока.Представление = ДанныеЭлементаСхемы.Name;
		КонецЦикла; 
		Для каждого ДанныеФормыРабочегоМеста Из ДанныеФункции.ListOfWorkplace Цикл
			НоваяСтрока = ДанныеСтроки.ФормыРабочегоМеста.Добавить();
			НоваяСтрока.ИмяОбъектаМетаданных = ДанныеФормыРабочегоМеста.Metadata;
			НоваяСтрока.ИмяФормы = ДанныеФормыРабочегоМеста.FormName;
			НоваяСтрока.ТипФормы = ДанныеФормыРабочегоМеста.FormType;
		КонецЦикла; 
		
	КонецЦикла;
	
	АдресФункцийКорпоративногоРешения = ПолучитьАдресФункцийКорпоративногоРешения(МассивФункцийКЗаполнению);
	КРОписаниеHTML = ПолучитьОписаниеКорпоративногоРешения(АдресФункцийКорпоративногоРешения);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьАдресФункцийКорпоративногоРешения(МассивФункцийКЗаполнению)

	ФункцииКорпоративногоРешенияИерархия = РеквизитФормыВЗначение("СписокРешений").Строки.
		НайтиСтроки(Новый Структура("ВключитьВКорпоративноеРешение", Истина)
		, Истина);
		
	МассивФункцийКЗаполнению = Новый Массив;
	Для каждого Строка Из ФункцииКорпоративногоРешенияИерархия Цикл
	
		Если НЕ ЗначениеЗаполнено(Строка.Описание) Тогда
			МассивФункцийКЗаполнению.Добавить(Строка.ИД);
		КонецЕсли;
	
	КонецЦикла;
		
	Возврат ПоместитьВоВременноеХранилище(ФункцииКорпоративногоРешенияИерархия);

КонецФункции


#Область ДействияСКонфигурацией

&НаКлиенте
Процедура КРОтправитьЗаявку(Команда)
	
	Если ФункцииКорпоративногоРешения.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru='Функции Корпоративного решения не выбраны!'"), 10);
		Возврат;
	КонецЕсли;
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	КРОтправитьЗаявкуСервер();
	ПоказатьПредупреждение(, НСтр("ru='Заявка отправлена в ИжТиСи. Ждите обратной связи!'"), 10);
	
КонецПроцедуры

&НаКлиенте
Процедура КРПечатьОписания(Команда)
	
	Если ФункцииКорпоративногоРешения.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru='Функции Корпоративного решения не выбраны!'"), 10);
		Возврат;
	КонецЕсли;
	
	Элементы.КРОписаниеHTML.Документ.execCommand("Print");
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОписаниеКорпоративногоРешения(АдресФункцийКорпоративногоРешения)

	ВложенияHTML = Новый Структура;
	ИспользуемыеСтили = ИспользуемыеСтили();
	
	Описание = Новый ФорматированныйДокумент;
	ОписаниеДобавитьПараграф(НСтр("ru='Описание корпоративного решения'"), Описание, ИспользуемыеСтили.Заголовок1_Цвет, ИспользуемыеСтили.Заголовок1_Шрифт);
	
	// Функции корпоративного решения
	ОписаниеФункцийКорпоративногоРешения = ПолучитьИзВременногоХранилища(АдресФункцийКорпоративногоРешения);
	
	// Список продуктов
	ОписаниеДобавитьПараграф("
		|Список продуктов:", Описание, ИспользуемыеСтили.Заголовок2_Цвет, ИспользуемыеСтили.Заголовок2_Шрифт);
	
	Для каждого ОписаниеФункции Из ОписаниеФункцийКорпоративногоРешения Цикл
		НовыйПараграф = ОписаниеДобавитьПараграф(ОписаниеФункции.Представление, Описание);
		НовыйПараграф.ТипПараграфа = ТипПараграфа.МаркированныйСписок;
		НовыйПараграф.Элементы[0].НавигационнаяСсылка = "ИД_Функции" + Строка(ОписаниеФункции.ИД);
	КонецЦикла;

	// Описание решений
	ПараграфОписаниеПродуктов = ОписаниеДобавитьПараграф("
		|Описание продуктов Корпоративного решения:", Описание, ИспользуемыеСтили.Заголовок2_Цвет, ИспользуемыеСтили.Заголовок2_Шрифт);
	Для каждого ОписаниеФункции Из ОписаниеФункцийКорпоративногоРешения Цикл
		
		ОписаниеДобавитьПараграф(ОписаниеФункции.Представление, Описание, , ИспользуемыеСтили.Заголовок3_Шрифт);
		
		НовыйПараграф = ОписаниеДобавитьПараграфыКопированием(ОписаниеФункции.Описание, Описание, НСтр("ru='Описание'"), НСтр("ru='Состав функции'"));
		Если НовыйПараграф <> Неопределено Тогда
			НовыйПараграф.Элементы.Добавить(, ТипЭлементаФорматированногоДокумента.ПереводСтроки);
		КонецЕсли;
		
	КонецЦикла;
	
	ОписаниеHTML = "";
	Описание.ПолучитьHTML(ОписаниеHTML, ВложенияHTML);
	
	Возврат ОписаниеHTML;
	
КонецФункции

&НаСервере
Функция ОписаниеДобавитьПараграф(ТекстПараграфа, Описание, ЦветТекста = Неопределено, Шрифт = Неопределено)
	
	НовыйПараграф = Описание.Элементы.Добавить();
	
	// Содержание
	ТекстЗаголовка = НовыйПараграф.Элементы.Добавить(ТекстПараграфа);
	
	// Форматирование
	Если ЦветТекста <> Неопределено Тогда
		ТекстЗаголовка.ЦветТекста = ЦветТекста;
	КонецЕсли;
	
	Если Шрифт <> Неопределено Тогда
		ТекстЗаголовка.Шрифт = Шрифт;
	КонецЕсли;

	Возврат НовыйПараграф;

КонецФункции

&НаСервере
Функция ОписаниеДобавитьПараграфыКопированием(ИсходныйТекстПараграфов, Описание, ТекстЗакладкиНачала = Неопределено, ТекстЗакладкиКонца = Неопределено)
	
	ВложенияHTML = Новый Структура;
	НовыйПараграф = Неопределено;
	
	ТекстПараграфов = Новый ФорматированныйДокумент();
	ТекстПараграфов.УстановитьHTML(ИсходныйТекстПараграфов, ВложенияHTML);
	
	ОбластьНачала = Неопределено;
	ОбластьКонца = Неопределено;
	
	Если ТекстЗакладкиНачала <> Неопределено Тогда
		
		ОбластьНачала = ТекстПараграфов.НайтиТекст(ТекстЗакладкиНачала);
		Если ОбластьНачала = Неопределено Тогда
			НовыйПараграф = Описание.Элементы.Добавить();	
			НовыйПараграф.Элементы.Добавить(, ТипЭлементаФорматированногоДокумента.ПереводСтроки);
			НовыйПараграф.Элементы.Добавить(, ТипЭлементаФорматированногоДокумента.ПереводСтроки);
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТекстЗакладкиКонца <> Неопределено Тогда
		
		Если ТекстЗакладкиНачала <> Неопределено Тогда
			ОбластьКонца = ТекстПараграфов.НайтиТекст(ТекстЗакладкиКонца, ОбластьНачала.ЗакладкаКонца);
		Иначе
			ОбластьКонца = ТекстПараграфов.НайтиТекст(ТекстЗакладкиКонца);
		КонецЕсли;
		Если ОбластьКонца = Неопределено Тогда
			НовыйПараграф = Описание.Элементы.Добавить();	
			НовыйПараграф.Элементы.Добавить(, ТипЭлементаФорматированногоДокумента.ПереводСтроки);
			НовыйПараграф.Элементы.Добавить(, ТипЭлементаФорматированногоДокумента.ПереводСтроки);
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗакладкаНачала = ?(ОбластьНачала = Неопределено, Неопределено, ОбластьНачала.ЗакладкаКонца);
	ЗакладкаКонца = ?(ОбластьКонца = Неопределено, Неопределено, ОбластьКонца.ЗакладкаНачала);
	
	КопируемыеЭлементы = ТекстПараграфов.ПолучитьЭлементы(ЗакладкаНачала, ЗакладкаКонца);
	
	ПараграфПредыдущегоКопируемогоЭлемента = Неопределено;
	Для каждого КопируемыйЭлемент Из КопируемыеЭлементы Цикл
		
		Если КопируемыйЭлемент.Родитель <> ПараграфПредыдущегоКопируемогоЭлемента Тогда
			НовыйПараграф = Описание.Элементы.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйПараграф, КопируемыйЭлемент.Родитель);
			ПараграфПредыдущегоКопируемогоЭлемента = КопируемыйЭлемент.Родитель;
		КонецЕсли;
		
		Если ТипЗнч(КопируемыйЭлемент) = Тип("ПереводСтрокиФорматированногоДокумента") Тогда
			Если КопируемыйЭлемент = КопируемыеЭлементы[0] Тогда
				Продолжить;	// Пропускать первый перевод строки копируемого элемента
			КонецЕсли;
			НовыйЭлементПараграфа = НовыйПараграф.Элементы.Добавить(, ТипЭлементаФорматированногоДокумента.ПереводСтроки);
		ИначеЕсли ТипЗнч(КопируемыйЭлемент) = Тип("ТекстФорматированногоДокумента") Тогда
			НовыйЭлементПараграфа = НовыйПараграф.Элементы.Добавить(КопируемыйЭлемент.Текст, ТипЭлементаФорматированногоДокумента.Текст);
		ИначеЕсли ТипЗнч(КопируемыйЭлемент) = Тип("КартинкаФорматированногоДокумента") Тогда
			НовыйЭлементПараграфа = НовыйПараграф.Элементы.Добавить(, ТипЭлементаФорматированногоДокумента.Картинка);
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НовыйЭлементПараграфа, КопируемыйЭлемент);
	
	КонецЦикла;
	
	Возврат НовыйПараграф;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИспользуемыеСтили()

	ИспользуемыеСтили = Новый Структура;
	
	ИспользуемыеСтили.Вставить("Заголовок1_Цвет", WebЦвета.ТемноСиний);
	ИспользуемыеСтили.Вставить("Заголовок1_Шрифт", Новый Шрифт("Arial",, Истина,,,, 150));
	ИспользуемыеСтили.Вставить("Заголовок2_Цвет",  ЦветаСтиля.ГруппаВариантовОтчетовЦвет);
	ИспользуемыеСтили.Вставить("Заголовок2_Шрифт", Новый Шрифт("Arial",, Истина,,,, 125));
	ИспользуемыеСтили.Вставить("Заголовок3_Цвет",  ЦветаСтиля.ГруппаВариантовОтчетовЦвет);
	ИспользуемыеСтили.Вставить("Заголовок3_Шрифт", Новый Шрифт("Arial",, Истина,,,, 110));
	
	ИспользуемыеСтили.Вставить("ИерархияПроцесса_Шрифт", Новый Шрифт(,, Истина,,,,));
	ИспользуемыеСтили.Вставить("ЗаголовокПроцесса_Шрифт", Новый Шрифт(,,,Истина,,,));
	ИспользуемыеСтили.Вставить("ОписаниеПроцесса_Шрифт", Новый Шрифт(,, ,,,, 75));
	ИспользуемыеСтили.Вставить("ОписаниеШагаПроцесса_Шрифт", Новый Шрифт(,, ,,,,));

	Возврат ИспользуемыеСтили;
	
КонецФункции

&НаСервере
Функция КРОтправитьЗаявкуСервер()
	
	// Информация об отправителе
	ИнформацияОбОтправителе = Новый Структура;
	ИнформацияОбОтправителе.Вставить("ОтправительАдресЭлектроннойПочты", ОтправительАдресЭлектроннойПочты);
	ИнформацияОбОтправителе.Вставить("ОтправительКомментарии", ОтправительКомментарии);
	ИнформацияОбОтправителе.Вставить("ОтправительФИО", ОтправительФИО);
	ИнформацияОбОтправителе.Вставить("ОтправительОрганизация", ОтправительОрганизация);
	ИнформацияОбОтправителе.Вставить("ОтправительТелефон", ОтправительТелефон);
	
	ПараметрыЗаявки = Новый Структура();
	ПараметрыЗаявки.Вставить("ВариантВзаимодействияСИжТиСи", ВариантВзаимодействия);
	ПараметрыЗаявки.Вставить("ИнформацияОбОтправителе", ИнформацияОбОтправителе);
	ПараметрыЗаявки.Вставить("ФункцииКорпоративногоРешения", ФункцииКорпоративногоРешения.ВыгрузитьЗначения());
	ПараметрыЗаявки.Вставить("ДанныеКонфигурацииКорпоративногоРешения", ДанныеКонфигурацииКорпоративногоРешения());
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Возврат ОбработкаОбъект.ОтправитьЗаявкуНаКорпоративноеРешение(ПараметрыЗаявки, "ИжТиСиКорпоративноеРешение");

КонецФункции

#КонецОбласти


#КонецОбласти
