#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	ИспользоватьРаспознаваниеДокументов = Константы.ИспользоватьРаспознаваниеДокументов.Получить();
	
	ПолучитьСостоянияПараметровПодключенияРаспознавания();
	ПолучитьСостоянияОбщихНастроек();
	
	Если Не Константы.ИспользоватьУчетОригиналовПервичныхДокументов.Получить() Тогда
		Элементы.АвтоматическиУстанавливатьКонечноеСостояниеУПервичныхДокументов.Доступность = Ложь;
		АвтоматическиУстанавливатьКонечноеСостояниеУПервичныхДокументов = Ложь;
	КонецЕсли;
	
	ОткрытьФормуБлокировкиСервиса = РаспознаваниеДокументовСлужебный.ТребуетсяЗаблокироватьСервисРаспознавания();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ОткрытьФормуБлокировкиСервиса Тогда
		РаспознаваниеДокументовСлужебныйКлиент.ПоказатьФормуБлокировки(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	ПерерисоватьПоСостоянию();
	
	// ПерсонализированныеПредложения
	ЗадержкаПередЗапускомБаннера = 3;
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьБаннер", ЗадержкаПередЗапускомБаннера, Истина);
	// Конец ПерсонализированныеПредложения
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИнтернетПоддержкаОтключена" Или ИмяСобытия = "ИнтернетПоддержкаПодключена" Тогда
		ПолучитьСостоянияПараметровПодключенияРаспознавания();
		ПерерисоватьПоСостоянию();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура АдресЭлПочтыИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	Ошибка = Не ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(Текст);
	Элементы.ТекстНеверныйАдресЭлПочты.Видимость = Ошибка;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРаспознаваниеДокументовПриИзменении(Элемент)
	
	УстановитьИспользованиеРаспознаванияДокументов(ИспользоватьРаспознаваниеДокументов);
	ОбновитьПовторноИспользуемыеЗначения();
	ОбщегоНазначенияКлиент.ОбновитьИнтерфейсПрограммы();
	ПерерисоватьПоСостоянию();
	ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантСохраненияСоответствийПриИзменении(Элемент)
	
	ОбновитьОбщиеНастройкиПоТекущимСостояниям();
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПоУмолчаниюПриИзменении(Элемент)
	
	ОбновитьОбщиеНастройкиПоТекущимСостояниям();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрикреплятьИзображенияПриИзменении(Элемент)
	
	НеПрикреплятьИзображения = Не ПрикреплятьИзображения;
	Если Не ПрикреплятьИзображения Тогда
		ПриОбнаруженииДокументаПрикреплятьИзображениеАвтоматически = Ложь;
	КонецЕсли;
	
	ОбновитьОбщиеНастройкиПоТекущимСостояниям();
	ПерерисоватьПоСостоянию();
	
КонецПроцедуры

&НаКлиенте
Процедура ПомечатьДокументОбработаннымПриНайденномВБазеПриИзменении(Элемент)
	
	Если Не ПомечатьДокументОбработаннымПриНайденномВБазе Тогда
		ПриОбнаруженииДокументаПрикреплятьИзображениеАвтоматически = Ложь;
	КонецЕсли;
	
	ОбновитьОбщиеНастройкиПоТекущимСостояниям();
	ПерерисоватьПоСостоянию();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОбнаруженииДокументаПрикреплятьИзображениеАвтоматическиПриИзменении(Элемент)
	
	ОбновитьОбщиеНастройкиПоТекущимСостояниям();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздаватьСчетФактуруПриСозданииОснованияПриИзменении(Элемент)
	
	ОбновитьОбщиеНастройкиПоТекущимСостояниям();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрыватьНовыеЭлементыСправочниковПослеСозданияПриИзменении(Элемент)
	
	ОбновитьОбщиеНастройкиПоТекущимСостояниям();

КонецПроцедуры

&НаКлиенте
Процедура АвтоматическиУстанавливатьКонечноеСостояниеУПервичныхДокументовПриИзменении(Элемент)
	
	ОбновитьОбщиеНастройкиПоТекущимСостояниям();

КонецПроцедуры

&НаКлиенте
Процедура АвтоматическиУдалятьОбработанныеИПомеченныеНаУдалениеПриИзменении(Элемент)
	
	ОбновитьОбщиеНастройкиПоТекущимСостояниям();
	ПерерисоватьПоСостоянию()
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодОтсрочкиУдаленияУстаревшихДокументовПриИзменении(Элемент)
	
	ОбновитьОбщиеНастройкиПоТекущимСостояниям();
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоматическиРегистрироватьЧекиПриИзменении(Элемент)
	
	ОбновитьОбщиеНастройкиПоТекущимСостояниям();
	
КонецПроцедуры


// ПерсонализированныеПредложения

&НаКлиенте
Процедура ТекстБаннераОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	РаспознаваниеДокументовПерсонализированныеПредложенияКлиент.ПерейтиПоСсылкеБаннера(
		НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьБаннерНажатие(Элемент)
	
	РаспознаваниеДокументовПерсонализированныеПредложенияКлиент.ЗакрытьБаннер(ЭтотОбъект);
	РаспознаваниеДокументовПерсонализированныеПредложенияКлиент.УстановитьРежимОжиданияНаБаннере(ЭтотОбъект);
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьПредыдущийБаннер", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущийБаннерНажатие(Элемент)
	
	РаспознаваниеДокументовПерсонализированныеПредложенияКлиент.УстановитьРежимОжиданияНаБаннере(ЭтотОбъект);
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьПредыдущийБаннер", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СледующийБаннерНажатие(Элемент)
	
	РаспознаваниеДокументовПерсонализированныеПредложенияКлиент.УстановитьРежимОжиданияНаБаннере(ЭтотОбъект);
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПоказатьБаннерНажатие(Элемент)
	
	РаспознаваниеДокументовПерсонализированныеПредложенияКлиент.ОткрытьБаннер(ЭтотОбъект);
	РаспознаваниеДокументовПерсонализированныеПредложенияКлиент.УстановитьРежимОжиданияНаБаннере(ЭтотОбъект);
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьПредыдущийБаннер", 0.1, Истина);
	
КонецПроцедуры

// Конец ПерсонализированныеПредложения

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подключить(Команда)
	
	Обработчик = Новый ОписаниеОповещения("ПослеПроверкиПодключенияКСервисуРаспознавания", ЭтотОбъект);
	РаспознаваниеДокументовКлиент.ПоказатьАвторизациюИТС(Обработчик, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьДляПилотов(Команда)
	
	Если ТипАутентификации = "НеВыполнена" Тогда
		ПоказатьАвторизацию();
	Иначе
		Обработчик = Новый ОписаниеОповещения("ПослеПодтвержденияПереподключенияДляПилотов", ЭтотОбъект);
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить("Отключить", НСтр("ru = 'Отключить'"));
		Кнопки.Добавить("Отмена", НСтр("ru = 'Отмена'"));
		
		ПараметрыВопроса = РаспознаваниеДокументовСлужебныйКлиент.ПараметрыВопросаПользователю();
		ПараметрыВопроса.ПредлагатьБольшеНеЗадаватьЭтотВопрос = Ложь;
		ПараметрыВопроса.Заголовок = НСтр("ru = 'Подключение в пилотной программе'");
		ПараметрыВопроса.КнопкаПоУмолчанию = "Отмена";
		
		РаспознаваниеДокументовСлужебныйКлиент.ПоказатьВопросПользователю(
			Обработчик,
			НСтр("ru = 'Для подключения в пилотной программе требуется отключить режим использования Портала 1С:ИТС
			           |(после авторизации текущие данные будут сохранены).
			           |Отключить?'"),
			Кнопки,
			ПараметрыВопроса
		);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отключить(Команда)
	
	Обработчик = Новый ОписаниеОповещения("ПослеПодтвержденияОтключения", ЭтотОбъект);
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить("Отключить", НСтр("ru = 'Отключить'"));
	Кнопки.Добавить("Отмена", НСтр("ru = 'Отмена'"));
	
	ПараметрыВопроса = РаспознаваниеДокументовСлужебныйКлиент.ПараметрыВопросаПользователю();
	ПараметрыВопроса.ПредлагатьБольшеНеЗадаватьЭтотВопрос = Ложь;
	ПараметрыВопроса.Заголовок = НСтр("ru = 'Отключить распознавания документов'");
	ПараметрыВопроса.КнопкаПоУмолчанию = "Отмена";
	
	РаспознаваниеДокументовСлужебныйКлиент.ПоказатьВопросПользователю(
		Обработчик,
		НСтр("ru = 'Отключить распознавание документов?
		           |(можно восстановить подключение в любое время)'"),
		Кнопки,
		ПараметрыВопроса
	);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьАдресЭлПочты(Команда)
	
	Ошибка = Не ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(АдресЭлПочты);
	Если Ошибка Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		СохранитьАдресЭлПочтыНаСервере();
		
		ПараметрыВопроса = РаспознаваниеДокументовСлужебныйКлиент.ПараметрыВопросаПользователю();
		ПараметрыВопроса.ПредлагатьБольшеНеЗадаватьЭтотВопрос = Ложь;
		ПараметрыВопроса.Картинка = БиблиотекаКартинок.УспешнаяОтправкаБРД;
		ПараметрыВопроса.Заголовок = НСтр("ru = 'Подписка оформлена'");
		
		РаспознаваниеДокументовСлужебныйКлиент.ПоказатьВопросПользователю(
			,
			НСтр("ru = 'Адрес электронной почты подписан на уведомления'"),
			РежимДиалогаВопрос.ОК,
			ПараметрыВопроса
		);
	Исключение
		ПоказатьИнформациюОбОшибке(ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область КомандыДействий

&НаКлиенте
Процедура ПоказатьАвторизацию()
	
	Обработчик = Новый ОписаниеОповещения("ПослеПроверкиПодключенияКСервисуРаспознавания", ЭтотОбъект);
	РаспознаваниеДокументовКлиент.ПоказатьАвторизацию(Обработчик, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСостоянияПараметровПодключенияРаспознавания()
	
	ПытатьсяПодключитьсяПриПроверке = Ложь;
	ПодключеноКСервисуРаспознавания = РаспознаваниеДокументов.ПодключеноКСервисуРаспознавания(ПытатьсяПодключитьсяПриПроверке);
	АккаунтАктивирован = РаспознаваниеДокументов.АккаунтАктивирован();
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыАвторизации = РаспознаваниеДокументов.ТекущиеПараметрыАвторизации();
	ДанныеАутентификацииБИП = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
	ЗаполненыДанныеАутентификацииБИП = ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
	
	ПараметрыАвторизацииПереопределяемые = Новый Структура("Логин, Пароль");
	РаспознаваниеДокументовПереопределяемый.ПриВыполненииАвторизации(ПараметрыАвторизацииПереопределяемые);
	АвторизацияПереопределена = ЗначениеЗаполнено(ПараметрыАвторизацииПереопределяемые.Логин);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	
	ТипАутентификации = ПараметрыАвторизации.ТипАутентификации;
	
	Если АвторизацияПереопределена Тогда
		Логин = "";
	ИначеЕсли ТипАутентификации = "ПоТикетуИТС" Тогда
		Если ЗаполненыДанныеАутентификацииБИП И Не ОбщегоНазначения.РазделениеВключено() Тогда
			Логин = ДанныеАутентификацииБИП.Логин;
		Иначе
			Логин = "";
		КонецЕсли;
	ИначеЕсли ТипАутентификации = "ПоЛогинуПаролю" Тогда
		Логин = ПараметрыАвторизации.Логин;
	Иначе
		Логин = "";
	КонецЕсли;
	
	Если АвторизацияПереопределена Тогда 
		СостояниеПодключенияРаспознавания = НСтр("ru = 'Сервис распознавания документов готов к использованию.'");
	ИначеЕсли ТипАутентификации = "ПоТикетуИТС" Тогда
		Если АккаунтАктивирован Тогда
			
			Если ОбщегоНазначения.РазделениеВключено() И ТипАутентификации = "ПоТикетуИТС" Тогда
				СостояниеПодключенияРаспознавания = НСтр("ru = 'Используется учетная запись Портала 1С:ИТС.'");
			Иначе
				СостояниеПодключенияРаспознавания = СтрШаблон(НСтр("ru = 'Используется учетная запись Портала 1С:ИТС для пользователя ""%1"".'"), Логин);
			КонецЕсли;
			
		Иначе
			
			Если ОбщегоНазначения.РазделениеВключено() И ТипАутентификации = "ПоТикетуИТС" Тогда
				
				СостояниеПодключенияРаспознавания = 
					НСтр("ru = 'Используется учетная запись Портала 1С:ИТС.
					           |
					           |Заявка на подключение сервиса распознавания документов отправлена и будет обработана в ближайшие дни.
					           |Укажите свой e-mail и мы уведовим вас по факту подключения.'");
				
			Иначе
				
				СостояниеПодключенияРаспознавания = СтрШаблон(
					НСтр("ru = 'Используется учетная запись Портала 1С:ИТС для пользователя ""%1"".
					           |
					           |Заявка на подключение сервиса распознавания документов отправлена и будет обработана в ближайшие дни.
					           |Укажите свой e-mail и мы уведовим вас по факту подключения.'"),
					Логин);
				
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипАутентификации = "ПоЛогинуПаролю" Тогда
		СостояниеПодключенияРаспознавания = СтрШаблон(НСтр("ru = 'Выполнен вход в пилотную программу для пользователя ""%1"".'"), Логин);
	Иначе
		Если ЗаполненыДанныеАутентификацииБИП Тогда
			СостояниеПодключенияРаспознавания = НСтр("ru = 'Сервис распознавания документов готов к использованию.'");
		Иначе
			СостояниеПодключенияРаспознавания = НСтр("ru = 'Для использования распознавания документов необходимо подключить интернет-поддержку пользователей.'");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСостоянияОбщихНастроек()
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, РегистрыСведений.ОбщиеНастройкиРаспознаваниеДокументов.ТекущиеНастройки());
	ПрикреплятьИзображения = Не НеПрикреплятьИзображения;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОбщиеНастройкиПоТекущимСостояниям()
	
	МенеджерЗаписи = РегистрыСведений.ОбщиеНастройкиРаспознаваниеДокументов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Прочитать();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ЭтотОбъект);
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерерисоватьПоСостоянию()
	
	Элементы.СостояниеПодключенияРаспознавания.Заголовок = СостояниеПодключенияРаспознавания;
	Элементы.Подключить.Видимость = Не ЗаполненыДанныеАутентификацииБИП
		И Не ПодключеноКСервисуРаспознавания И Не АвторизацияПереопределена;
	Элементы.Отключить.Видимость = (ТипАутентификации = "ПоЛогинуПаролю") И Не АвторизацияПереопределена;
	//Элементы.ПодключитьДляПилотов.Видимость = (ТипАутентификации <> "ПоЛогинуПаролю") И Не АвторизацияПереопределена;
	
	Элементы.ГруппаПодключение.Доступность            = ИспользоватьРаспознаваниеДокументов;
	Элементы.ОжиданиеАктивацииОписание.Доступность    = ИспользоватьРаспознаваниеДокументов;
	Элементы.ГруппаЗаполнениеДокументов.Доступность   = ИспользоватьРаспознаваниеДокументов;
	Элементы.ГруппаОбработкаДокументов.Доступность    = ИспользоватьРаспознаваниеДокументов;
	Элементы.ГруппаАвтоматическоеУдаление.Доступность = ИспользоватьРаспознаваниеДокументов;
	Элементы.ГруппаПрочее.Доступность                 = ИспользоватьРаспознаваниеДокументов;
	
	Элементы.ПериодОтсрочкиУдаленияУстаревшихДокументов.Доступность = АвтоматическиУдалятьОбработанныеИПомеченныеНаУдаление;
	
	Элементы.ПриОбнаруженииДокументаПрикреплятьИзображениеАвтоматически.Доступность =
		ПрикреплятьИзображения И ПомечатьДокументОбработаннымПриНайденномВБазе;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьИспользованиеРаспознаванияДокументов(Использование)
	
	Константы.ИспользоватьРаспознаваниеДокументов.Установить(Использование);
	ПолучитьСостоянияОбщихНастроек();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьДанныеАвторизации()
	
	РаспознаваниеДокументов.УдалитьДанныеАвторизации();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеОбработчикиСобытий

&НаКлиенте
Процедура ПослеПроверкиПодключенияКСервисуРаспознавания(Результат, Контекст) Экспорт
	
	ПолучитьСостоянияПараметровПодключенияРаспознавания();
	ПерерисоватьПоСостоянию();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодтвержденияПереподключенияДляПилотов(Результат, Контекст) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Значение = "Отключить" Тогда
		УдалитьДанныеАвторизации();
		ПолучитьСостоянияПараметровПодключенияРаспознавания();
		ПерерисоватьПоСостоянию();
		ПоказатьАвторизацию();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодтвержденияОтключения(Результат, Контекст) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Значение = "Отключить" Тогда
		УдалитьДанныеАвторизации();
		ПолучитьСостоянияПараметровПодключенияРаспознавания();
		ПерерисоватьПоСостоянию();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область БизнесЛогика

&НаСервере
Процедура СохранитьАдресЭлПочтыНаСервере()
	
	РаспознаваниеДокументовSDK.УстановитьАдресЭлектроннойПочты(АдресЭлПочты);
	
	МенеджерЗаписи = РегистрыСведений.ОбщиеНастройкиРаспознаваниеДокументов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Прочитать();
	МенеджерЗаписи.АдресЭлПочты = АдресЭлПочты;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область ПерсонализированныеПредложения

&НаКлиенте
Процедура Подключаемый_УстановитьБаннер()
	
	УстановитьБаннер();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьСледующийБаннер()
	
	УстановитьБаннер();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьПредыдущийБаннер()
	
	УстановитьБаннер(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьБаннер(ПоказатьПредыдущий = Ложь)
	
	ДлительнаяОперация = НачатьПолучениеБаннера(ПоказатьПредыдущий);
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус <> "Ошибка" Тогда
		
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
		
		Обработчик = Новый ОписаниеОповещения("ПослеПолученияБаннера", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НачатьПолучениеБаннера(ПоказатьПредыдущий)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение баннера в фоне'");
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	Возврат ДлительныеОперации.ВыполнитьФункцию(
		ПараметрыВыполнения,
		"РаспознаваниеДокументовПерсонализированныеПредложения.ПолучитьКарусельБаннеров",
		РаспознаваниеДокументовПерсонализированныеПредложения.ИмяРазмещенияНастройкиРаспознавания(),
		ПоказатьПредыдущий
	);
	
КонецФункции

&НаКлиенте
Процедура ПослеПолученияБаннера(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		УстановитьБаннерНаФорме(ДлительнаяОперация.АдресРезультата);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьБаннерНаФорме(АдресРезультата)
	
	РаспознаваниеДокументовПерсонализированныеПредложения.УстановитьБаннерНаФорме(ЭтотОбъект, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти