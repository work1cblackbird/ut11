
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	АвтоНавигационнаяСсылка = Ложь;
	НавигационнаяСсылка = "e1cib/app/" + ЭтотОбъект.ИмяФормы;
	
	ИнициализироватьДанныеФормы();
	УправлениеДоступностью(ЭтотОбъект);
	СформироватьЗаголовкиКомандВыбораСписков(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность
		И Не ЗавершениеРаботы
		И Не ВыполняетсяЗакрытие Тогда
		
		Отказ = Истина;
		
		ОповещениеОНеобходимостиСохранения = Новый ОписаниеОповещения("ПослеОтветаНеобходимостьСохранения", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Настройки были изменены. Сохранить сделанные изменения?'");
		
		ПоказатьВопрос(ОповещениеОНеобходимостиСохранения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если ЗначениеЗаполнено(Организация)
		И Настройки.Получить("Организация") <> Неопределено
		И Элементы.Организация.СписокВыбора.НайтиПоЗначению(Организация) <> Неопределено Тогда 
		
		ЗаполнитьНастройкиОформленияЗаказовПокупателям();
		ТекущаяОрганизация = Организация;
		УправлениеДоступностью(ЭтотОбъект);
		СформироватьЗаголовкиКомандВыбораСписков(ЭтотОбъект);
		
	Иначе
		
		Организация = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	Если ЗначениеЗаполнено(Организация)
		И Настройки.Получить("Организация") <> Неопределено Тогда
		Настройки.Удалить("Организация");
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ТребуетсяПолучениеНастроекПриОткрытии Тогда
		
		ПолучитьОтсутствующиеНастройкиПоОрганизациямПриОткрытии();
				
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "БизнесСеть_РегистрацияОрганизаций"  Тогда
		
		ПриРегистрацииОрганизацииНаСервере();
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриРегистрацииОрганизацииНаСервере()
	
	ЗаполнитьСписокВыбораОрганизаций();
	ОпределитьПодключенныеОрганизации();
	ОпределитьДоступностьЭлементовПоПодключеннымОрганизациям();
	
	Если ЗначениеЗаполнено(Организация) 
		И Элементы.Организация.СписокВыбора.НайтиПоЗначению(Организация) <> Неопределено Тогда
		
		ЗаполнитьНастройкиОформленияЗаказовПокупателям();
		
	Иначе
			
		Организация = Неопределено;
			
	КонецЕсли;
	
	УправлениеДоступностью(ЭтотОбъект);
		
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ТекущаяОрганизация)
		И Организация <> ТекущаяОрганизация
		И Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru = 'Настройки организации %1 были изменены, сохранить сделанные изменения?'");
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, ТекущаяОрганизация);
		
		ОповещениеПослеВопроса = Новый ОписаниеОповещения("ОповещениеПослеВопросаОСохраненииИзменений", ЭтотОбъект);
		ПоказатьВопрос(ОповещениеПослеВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ОтработатьИзменениеОрганизацииНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПослеВопросаОСохраненииИзменений(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Результат = РезультатСохраненияНастроек(ТекущаяОрганизация);
		Если Результат = Истина Тогда
			ОтработатьИзменениеОрганизацииНаКлиенте();
		КонецЕсли;
		
	Иначе
		
		ОтработатьИзменениеОрганизацииНаКлиенте();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтработатьИзменениеОрганизацииНаКлиенте()

	ТекущаяОрганизация = Организация;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		
		ОчиститьНастройки(ЭтотОбъект);
		
	Иначе
		
		ЗаполнитьНастройкиОформленияЗаказовПокупателям();
		
	КонецЕсли;
	
	УправлениеДоступностью(ЭтотОбъект);
	СформироватьЗаголовкиКомандВыбораСписков(ЭтотОбъект);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьНастройки(Форма)

	Форма.АвтоматическиЗагружаемЗаказыКлиента = Ложь;
	Форма.АвтоматическиОбновляемЗаказыКлиента                                   = Ложь;
	Форма.АвтоматическиОбновляемЗаказыПоставщикам                               = Ложь;
	Форма.ВариантОграниченияПриемаЗаказовОтПокупателей                          = ПредопределенноеЗначение("Перечисление.ВариантыОграниченийСпискаКонтрагентовEDI.ПустаяСсылка");
	Форма.ОграничиватьКонтрагентовОформляющихЗаказВТерминахПокупателяВыбранными = Ложь;
	Форма.ОтправляемЗаказыПоставщикамEDI                                        = Ложь;
	Форма.ПринимаюЗаказыОтПокупателей                                           = Ложь;
	Форма.РазрешитьПриниматьЗаказыВТерминахНоменклатурыПокупателя                = Ложь;
	Форма.ПокупателиЗаказВТерминахПокупателяБелыйСписок.Очистить();
	Форма.ПокупателиЗаказКлиентаБелыйСписок.Очистить();
	Форма.ПокупателиЗаказКлиентаЧерныйСписок.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПринимаюЗаказыОтПокупателейПриИзменении(Элемент)
	
	ПриИзмененииНастройки(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОпределенияПокупателейБелыйСписокПриИзменении(Элемент)
	
	ПриИзмененииБелогоСписка();
	ПриИзмененииНастройки(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОпределенияПокупателейЧерныйСписокПриИзменении(Элемент)
	
	ПриИзмененииЧерногоСписка();
	ПриИзмененииНастройки(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриниматьЗаказыВТерминахПокупателяПриИзменении(Элемент)
	
	ПриИзмененииНастройки(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешитьОформлятьЗаказыВТерминахПокупателяТолькоВыбраннымПриИзменении(Элемент)
	
	ПриИзмененииНастройки(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОпределениеПокупателейБелыйСписокНажатие(Элемент)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяСписка", "ПокупателиЗаказКлиентаБелыйСписок");
	
	ОповещениеПослеОкончанияПодбораКонтрагентов = Новый ОписаниеОповещения("ПослеОкончанияПодбораКонтрагентов", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыОткрытия = ПараметрыОткрытияСпискаКонтрагентов();
	ПараметрыОткрытия.Заголовок = НСтр("ru = 'Контрагенты, от которых принимаются заказы'");
	ПараметрыОткрытия.СписокКонтрагентов = ПокупателиЗаказКлиентаБелыйСписок;
	
	ОткрытьФорму("Обработка.СервисEDI.Форма.ПодборКонтрагентов", ПараметрыОткрытия, ЭтотОбъект, ,,,
	             ОповещениеПослеОкончанияПодбораКонтрагентов, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	ПриИзмененииНастройки(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОпределениеПокупателейЧерныйСписокНажатие(Элемент)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяСписка", "ПокупателиЗаказКлиентаЧерныйСписок");
	
	ОповещениеПослеОкончанияПодбораКонтрагентов = Новый ОписаниеОповещения("ПослеОкончанияПодбораКонтрагентов", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыОткрытия = ПараметрыОткрытияСпискаКонтрагентов();
	ПараметрыОткрытия.Заголовок = НСтр("ru = 'Контрагенты, от которых не принимаются заказы'");
	ПараметрыОткрытия.СписокКонтрагентов = ПокупателиЗаказКлиентаЧерныйСписок;
	
	ОткрытьФорму("Обработка.СервисEDI.Форма.ПодборКонтрагентов", ПараметрыОткрытия, ЭтотОбъект, ,,,
	             ОповещениеПослеОкончанияПодбораКонтрагентов, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	ПриИзмененииНастройки(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВыбранныеПокупателиВТерминахПокупателяНажатие(Элемент)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяСписка", "ПокупателиЗаказВТерминахПокупателяБелыйСписок");
	
	ОповещениеПослеОкончанияПодбораКонтрагентов = Новый ОписаниеОповещения("ПослеОкончанияПодбораКонтрагентов", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыОткрытия = ПараметрыОткрытияСпискаКонтрагентов();
	ПараметрыОткрытия.Заголовок = НСтр("ru = 'Контрагенты, от которых не принимаются заказы'");
	ПараметрыОткрытия.СписокКонтрагентов = ПокупателиЗаказВТерминахПокупателяБелыйСписок;
	
	Если ВариантОграниченияПриемаЗаказовОтПокупателей = ПредопределенноеЗначение("Перечисление.ВариантыОграниченийСпискаКонтрагентовEDI.БелыйСписок") Тогда
		ПараметрыОткрытия.ОграничивающийСписокКонтрагентов = ПокупателиЗаказКлиентаБелыйСписок;
		ПараметрыОткрытия.ВариантОграниченияСписка         = ПредопределенноеЗначение("Перечисление.ВариантыОграниченийСпискаКонтрагентовEDI.БелыйСписок");
	Иначе
		ПараметрыОткрытия.ОграничивающийСписокКонтрагентов = ПокупателиЗаказКлиентаЧерныйСписок;
		ПараметрыОткрытия.ВариантОграниченияСписка         = ПредопределенноеЗначение("Перечисление.ВариантыОграниченийСпискаКонтрагентовEDI.ЧерныйСписок");
	КонецЕсли;
	
	ОткрытьФорму("Обработка.СервисEDI.Форма.ПодборКонтрагентов", ПараметрыОткрытия, ЭтотОбъект, ,,,
	             ОповещениеПослеОкончанияПодбораКонтрагентов, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	ПриИзмененииНастройки(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПроцессыEDIПриИзменении(Элемент)
	
	Если Не ИспользуютсяПроцессыEDI Тогда
		ИспользуютсяПроцессыEDI = Истина;
		ПоказатьПредупреждение(, НСтр("ru = 'Отключение настройки недоступно.'"));
		Возврат;
	КонецЕсли;
	
	ПриИзмененииНастройки(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменятьСтрокиЗаказаПоставщикуПриОтменеПриИзменении(Элемент)
	
	УправлениеДоступностью(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменятьСтрокиЗаказаКлиентаПриОтменеПриИзменении(Элемент)
	
	УправлениеДоступностью(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОпределенияСкладаЗаказКлиентаПриИзменении(Элемент)
	
	УправлениеДоступностью(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗарегистрироватьОрганизациюОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьФормуПодключенияОрганизаций" Тогда
		
		ОткрытьФормуПодключенияОрганизаций();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНетДоступныхОрганизацийОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьФормуПодключенияОрганизаций" Тогда
		
		ОткрытьФормуПодключенияОрганизаций();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНастройкиИзСервисаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОчиститьСообщения();
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОбновитьНастройкиПоставщикаПоОрганизации" Тогда
		
		Если Не ЗначениеЗаполнено(Организация) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не указана организация, для которой получаются настройки'"),, "Организация");
			Возврат;
		КонецЕсли;
		
		МассивОрганизацийКПолучениюНастроек = Новый Массив;
		МассивОрганизацийКПолучениюНастроек.Добавить(Организация);
	
		ДлительнаяОперация = НастройкиДлительнаяОперация(МассивОрганизацийКПолучениюНастроек);
		
		Если ДлительнаяОперация = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ВыводитьСообщенияОбОшибках", Истина);
		
		Если ДлительнаяОперация.Статус = "Выполнено" Тогда
			ПолучениеНастроекЗавершение(ДлительнаяОперация, ДополнительныеПараметры);
		ИначеЕсли ДлительнаяОперация.Статус = "Выполняется" Тогда
			ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
			ОповещениеОЗавершении = Новый ОписаниеОповещения("ПолучениеНастроекЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Записать(Команда)
	
	Если Не ДанныеЗаполненыКорректно() Тогда
		Возврат;
	КонецЕсли;
	
	Если ПринимаюЗаказыОтПокупателей 
		И ВариантОграниченияПриемаЗаказовОтПокупателей = ПредопределенноеЗначение("Перечисление.ВариантыОграниченийСпискаКонтрагентовEDI.БелыйСписок") 
		И ПокупателиЗаказКлиентаБелыйСписок.Количество() = 0 Тогда
		
		ТекстВопроса = НСтр("ru = 'Установлен флаг ""Принимаю заказы"", но в списке только от выбранных не указан ни один контрагент. Флаг ""Принимаю заказы""  будет сброшен. Продолжить?'");
		
		ОповещениеПослеВопроса = Новый ОписаниеОповещения("ВопросПослеЗавершения", ЭтотОбъект);
		
		ПоказатьВопрос(ОповещениеПослеВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,, НСтр("ru = 'Сохранение настроек EDI'"));
		
	ИначеЕсли ПринимаюЗаказыОтПокупателей 
		И ВариантОграниченияПриемаЗаказовОтПокупателей = ПредопределенноеЗначение("Перечисление.ВариантыОграниченийСпискаКонтрагентовEDI.БелыйСписок") 
		И ОграничиватьКонтрагентовОформляющихЗаказВТерминахПокупателяВыбранными 
		И ПокупателиЗаказКлиентаБелыйСписок.Количество() = ПокупателиЗаказВТерминахПокупателяБелыйСписок.Количество() Тогда
		
		ТекстВопроса = НСтр("ru = 'Установлен флаг ограничения списка покупателей, которые могут оформлять заказы в своих терминах, но этот список соответствует списку покупателей, которые могут принимать заказы. Флаг будет сброшен. Продолжить?'");
		
		ОповещениеПослеВопроса = Новый ОписаниеОповещения("ВопросПослеЗавершения", ЭтотОбъект);
		
		ПоказатьВопрос(ОповещениеПослеВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,, НСтр("ru = 'Сохранение настроек EDI'"));
		
	Иначе
		
		РезультатСохраненияНастроек(Организация);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ИнициализироватьДанныеФормы()
	
	НастройкиУчета = НастройкиEDI.НастройкиУчета();
	ЭтоПолнаяИнтеграция = (НастройкиУчета.ТипИнтеграции = Перечисления.ТипыИнтеграцииEDI.ВыполненоВстраиваниеВДокументы);
	
	ИспользуетсяОтменаСтрокЗаказовКлиента                 = НастройкиУчета.ИспользуетсяОтменаСтрокЗаказовКлиента;
	ИспользуетсяОтменаСтрокЗаказовПоставщикам             = НастройкиУчета.ИспользуетсяОтменаСтрокЗаказовПоставщикам;
	ИспользуютсяПричиныОтменСтрокЗаказовКлиента           = НастройкиУчета.ИспользуютсяПричиныОтменСтрокЗаказовКлиента;
	ИспользуютсяПричиныОтменСтрокЗаказовПоставщикам       = НастройкиУчета.ИспользуютсяПричиныОтменСтрокЗаказовПоставщикам;
	ИспользуютсяСклады                                    = НастройкиУчета.ИспользуютсяСклады;
	ДоступноАвтоматическоеЗаполнениеСклада                = НастройкиУчета.ДоступноАвтоматическоеЗаполнениеСклада;
	ПредставлениеНастройкиАвтоматическогоЗаполненияСклада = НастройкиУчета.ПредставлениеНастройкиАвтоматическогоЗаполненияСклада;
	ПояснениеМеханизмаАвтоматическогоЗаполненияСклада     = НастройкиУчета.ПояснениеМеханизмаАвтоматическогоЗаполненияСклада;
	
	ЦветТекстаГиперссылка            = ЦветаСтиля.ЦветГиперссылкиEDI;
	ЦветТекстаНедоступнаяГиперссылка = ЦветаСтиля.ЦветНедоступнойГиперссылкиEDI;
	
	ЗаполнитьСписокВыбораОрганизаций();
	ОпределитьПодключенныеОрганизации();
	
	Если ЗначениеЗаполнено(Организация)
		И Элементы.Организация.СписокВыбора.НайтиПоЗначению(Организация) <> Неопределено Тогда
		ЗаполнитьНастройкиОформленияЗаказовПокупателям();
	Иначе
		Организация = Неопределено;
	КонецЕсли;
	
	Если ИспользуютсяПроцессыEDI Тогда
		ИспользованиеПроцессовEDIБылоВключеноРанее = Истина;
	КонецЕсли;
	
	ТекущаяОрганизация = Организация;
	
	Элементы.ОтменятьСтрокиЗаказаКлиентаПриОтмене.Видимость = ИспользуетсяОтменаСтрокЗаказовКлиента И ЭтоПолнаяИнтеграция;
	Элементы.ГруппаПричинаОтменыЗаказаКлиента.Видимость     = ИспользуютсяПричиныОтменСтрокЗаказовКлиента И ИспользуетсяОтменаСтрокЗаказовКлиента И ЭтоПолнаяИнтеграция;
	
	Элементы.ОтменятьСтрокиЗаказаПоставщикуПриОтмене.Видимость = ИспользуетсяОтменаСтрокЗаказовПоставщикам И ЭтоПолнаяИнтеграция;
	Элементы.ГруппаПричинаОтменыЗаказаПоставщику.Видимость     = ИспользуютсяПричиныОтменСтрокЗаказовПоставщикам И ИспользуетсяОтменаСтрокЗаказовПоставщикам И ЭтоПолнаяИнтеграция;
	
	Элементы.ГруппаАвтоматическиЗагружаемЗаказыКлиентов.Видимость    = ЭтоПолнаяИнтеграция;
	Элементы.ГруппаАвтоматическиОбновляемЗаказыКлиентов.Видимость    = ЭтоПолнаяИнтеграция;
	Элементы.ГруппаАвтоматическиОбновляемЗаказыПоставщиков.Видимость = ЭтоПолнаяИнтеграция;
	
	Элементы.ГруппаОпределениеСкладаВЗагружаемыхЗаказахКлиента.Видимость = ИспользуютсяСклады И ЭтоПолнаяИнтеграция;
	
	Если ИспользуютсяСклады И ЭтоПолнаяИнтеграция Тогда
		
		СписокВыбораЗаполнениеСклада = Элементы.ВариантОпределенияСкладаЗаказКлиента.СписокВыбора;
		
		СписокВыбораЗаполнениеСклада.ДоБавить(Перечисления.ВариантыОпределенияСкладаВДокументахEDI.НеОпределять);
		СписокВыбораЗаполнениеСклада.ДоБавить(Перечисления.ВариантыОпределенияСкладаВДокументахEDI.ЗаполнятьКонкретнымСкладом);
		Если ДоступноАвтоматическоеЗаполнениеСклада Тогда
			СписокВыбораЗаполнениеСклада.ДоБавить(Перечисления.ВариантыОпределенияСкладаВДокументахEDI.ОпределятьАвтоматически, ПредставлениеНастройкиАвтоматическогоЗаполненияСклада);
			Элементы.ДекорацияЗаказКлиентаАвтоматическиОпределятьСклад.Заголовок = Новый ФорматированнаяСтрока(ПояснениеМеханизмаАвтоматическогоЗаполненияСклада,, ЦветаСтиля.ПоясняющийТекст);
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьЗаголовкиКомандВыбораСписков(Форма)
	
	СформироватьВыборБелыйСписокПокупателей(Форма);
	СформироватьВыборЧерныйСписокПокупателей(Форма);
	СформироватьВыборВТерминахПокупателя(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьВыборБелыйСписокПокупателей(Форма)
	
	Элементы = Форма.Элементы;
	
	Если Форма.ПринимаюЗаказыОтПокупателей
		И Форма.ВариантОграниченияПриемаЗаказовОтПокупателей = ПредопределенноеЗначение("Перечисление.ВариантыОграниченийСпискаКонтрагентовEDI.БелыйСписок") Тогда
		
		КоличествоЭлементов = Форма.ПокупателиЗаказКлиентаБелыйСписок.Количество();
		ЦветТекста = Форма.ЦветТекстаГиперссылка;
		
	Иначе
		
		КоличествоЭлементов = 0;
		ЦветТекста = Форма.ЦветТекстаНедоступнаяГиперссылка;
		
	КонецЕсли;
	
	ЗаголовокГиперссылки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'выбранных (%1)'"), КоличествоЭлементов);
	Элементы.ДекорацияОпределениеПокупателейБелыйСписок.Заголовок = Новый ФорматированнаяСтрока(ЗаголовокГиперссылки,, ЦветТекста,, "ОткрытьБелыйСписокПокупателей");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьВыборЧерныйСписокПокупателей(Форма) 
	
	Элементы = Форма.Элементы;
	
	Если Форма.ПринимаюЗаказыОтПокупателей
		И Форма.ВариантОграниченияПриемаЗаказовОтПокупателей = ПредопределенноеЗначение("Перечисление.ВариантыОграниченийСпискаКонтрагентовEDI.ЧерныйСписок") Тогда
		
		КоличествоЭлементов = Форма.ПокупателиЗаказКлиентаЧерныйСписок.Количество();
		ЦветТекста = Форма.ЦветТекстаГиперссылка;
		
	Иначе
		
		КоличествоЭлементов = 0;
		ЦветТекста = Форма.ЦветТекстаНедоступнаяГиперссылка;
		
	КонецЕсли;
	
	ЗаголовокГиперссылки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'выбранных (%1)'"), КоличествоЭлементов);
	Элементы.ДекорацияОпределениеПокупателейЧерныйСписок.Заголовок = Новый ФорматированнаяСтрока(ЗаголовокГиперссылки,, ЦветТекста,, "ОткрытьЧерныйСписокПокупателей");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьВыборВТерминахПокупателя(Форма)
	
	Элементы = Форма.Элементы;
	
	Если Форма.ПринимаюЗаказыОтПокупателей
		И Форма.РазрешитьПриниматьЗаказыВТерминахНоменклатурыПокупателя 
		И Форма.ОграничиватьКонтрагентовОформляющихЗаказВТерминахПокупателяВыбранными Тогда
		
		КоличествоЭлементов = Форма.ПокупателиЗаказВТерминахПокупателяБелыйСписок.Количество();
		ЦветТекста = Форма.ЦветТекстаГиперссылка;
		
	Иначе
		
		КоличествоЭлементов = 0;
		ЦветТекста = Форма.ЦветТекстаНедоступнаяГиперссылка;
		
	КонецЕсли;
	
	ЗаголовокГиперссылки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'выбранным (%1)'"), КоличествоЭлементов);
	Элементы.ДекорацияВыбранныеПокупателиВТерминахПокупателя.Заголовок = Новый ФорматированнаяСтрока(ЗаголовокГиперссылки,, ЦветТекста,, "ОткрытьБелыйСписокПокупателей");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиОформленияЗаказовПокупателям()
	
	НастройкиОформленияЗаказовПокупателями = РегистрыСведений.НастройкиПоставщикаEDI.НастройкиОформленияЗаказовПокупателями(Организация);
	
	ИспользуютсяПроцессыEDI                                               = НастройкиОформленияЗаказовПокупателями.ИспользуютсяПроцессыEDI;
	ПринимаюЗаказыОтПокупателей                                           = НастройкиОформленияЗаказовПокупателями.ПринимаюЗаказыОтПокупателей;
	ВариантОграниченияПриемаЗаказовОтПокупателей                          = НастройкиОформленияЗаказовПокупателями.ВариантОграниченияПриемаЗаказовОтПокупателей;
	РазрешитьПриниматьЗаказыВТерминахНоменклатурыПокупателя               = НастройкиОформленияЗаказовПокупателями.РазрешитьПриниматьЗаказыВТерминахНоменклатурыПокупателя;
	ОграничиватьКонтрагентовОформляющихЗаказВТерминахПокупателяВыбранными = НастройкиОформленияЗаказовПокупателями.ОграничиватьКонтрагентовОформляющихЗаказВТерминахПокупателяВыбранными;
	
	ПокупателиЗаказКлиентаБелыйСписок.ЗагрузитьЗначения(НастройкиОформленияЗаказовПокупателями.ПокупателиЗаказКлиентаБелыйСписок);
	ПокупателиЗаказКлиентаЧерныйСписок.ЗагрузитьЗначения(НастройкиОформленияЗаказовПокупателями.ПокупателиЗаказКлиентаЧерныйСписок);
	ПокупателиЗаказВТерминахПокупателяБелыйСписок.ЗагрузитьЗначения(НастройкиОформленияЗаказовПокупателями.ПокупателиЗаказВТерминахПокупателяБелыйСписок);
	
	Если Не ЗначениеЗаполнено(ВариантОграниченияПриемаЗаказовОтПокупателей) Тогда
		ВариантОграниченияПриемаЗаказовОтПокупателей = Перечисления.ВариантыОграниченийСпискаКонтрагентовEDI.ЧерныйСписок;
	КонецЕсли;
	
	Если ИспользуютсяПроцессыEDI Тогда
		ИспользованиеПроцессовEDIБылоВключеноРанее = Истина;
	Иначе
		ИспользованиеПроцессовEDIБылоВключеноРанее = Ложь;
	КонецЕсли;
	
	НастройкиИнтеграции = РегистрыСведений.НастройкиИнтеграцииEDI.НастройкиИнтеграцииEDI(Организация);
	
	ПрефиксНомеровДокументовСервис                 = НастройкиИнтеграции.ПрефиксНомеровДокументовСервис;
	ОтветственныйПоУмолчаниюДляНовыхЗаказовКлиента = НастройкиИнтеграции.ОтветственныйПоУмолчаниюДляНовыхЗаказовКлиента;
	АвтоматическиЗагружаемЗаказыКлиента            = НастройкиИнтеграции.АвтоматическиЗагружаемЗаказыКлиента;
	АвтоматическиОбновляемЗаказыКлиента            = НастройкиИнтеграции.АвтоматическиОбновляемЗаказыКлиента;
	АвтоматическиОбновляемЗаказыПоставщикам        = НастройкиИнтеграции.АвтоматическиОбновляемЗаказыПоставщикам;
	ОтправляемЗаказыПоставщикамEDI                 = НастройкиИнтеграции.ОтправляемЗаказыПоставщикамEDI;
	ОтменятьСтрокиЗаказаКлиентаПриОтмене           = НастройкиИнтеграции.ОтменятьСтрокиЗаказаКлиентаПриОтмене;
	ОтменятьСтрокиЗаказаПоставщикуПриОтмене        = НастройкиИнтеграции.ОтменятьСтрокиЗаказаПоставщикуПриОтмене;
	ПричинаОтменыСтрокЗаказаПоставщику             = НастройкиИнтеграции.ПричинаОтменыСтрокЗаказаПоставщику;
	ПричинаОтменыСтрокЗаказовКлиента               = НастройкиИнтеграции.ПричинаОтменыСтрокЗаказовКлиента;
	ВариантОпределенияСкладаЗаказКлиента           = НастройкиИнтеграции.ВариантОпределенияСкладаЗаказКлиента;
	СкладДляПодстановкиЗаказКлиента                = НастройкиИнтеграции.СкладУстанавливаемыйВЗагружаемыйЗаказаКлиента;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеДоступностью(Форма)
	
	Элементы = Форма.Элементы;
	
	Если Форма.ИспользованиеПроцессовEDIБылоВключеноРанее Тогда
		Элементы.СтраницыИспользованиеПроцессовEDI.ТекущаяСтраница = Элементы.ИспользованиеПроцессовEDIВключено;
	Иначе
		Элементы.СтраницыИспользованиеПроцессовEDI.ТекущаяСтраница = Элементы.ИспользованиеПроцессовEDIВыключено;
	КонецЕсли;
	
	Элементы.ГруппаПродажиЗакупки.Видимость                                         = Форма.ИспользуютсяПроцессыEDI;
	Элементы.ГруппаВариантыОпределенияПокупателейБелыйСписок.Доступность            = Форма.ПринимаюЗаказыОтПокупателей;
	Элементы.ГруппаВариантыОпределенияПокупателейЧерныйСписок.Доступность           = Форма.ПринимаюЗаказыОтПокупателей;
	Элементы.ПриниматьЗаказыВТерминахПокупателя.Доступность                         = Форма.ПринимаюЗаказыОтПокупателей;
	Элементы.РазрешитьОформлятьЗаказыВТерминахПокупателяТолькоВыбранным.Доступность = Форма.РазрешитьПриниматьЗаказыВТерминахНоменклатурыПокупателя;
	
	Элементы.ДекорацияОпределениеПокупателейБелыйСписок.Доступность = Форма.ПринимаюЗаказыОтПокупателей 
	                                                                  И Форма.ВариантОграниченияПриемаЗаказовОтПокупателей = ПредопределенноеЗначение("Перечисление.ВариантыОграниченийСпискаКонтрагентовEDI.БелыйСписок");
	
	Элементы.ДекорацияОпределениеПокупателейЧерныйСписок.Доступность = Форма.ПринимаюЗаказыОтПокупателей 
	                                                                  И Форма.ВариантОграниченияПриемаЗаказовОтПокупателей = ПредопределенноеЗначение("Перечисление.ВариантыОграниченийСпискаКонтрагентовEDI.ЧерныйСписок");
	
	Элементы.ДекорацияВыбранныеПокупателиВТерминахПокупателя.Доступность = Форма.ОграничиватьКонтрагентовОформляющихЗаказВТерминахПокупателяВыбранными;
	
	Элементы.АвтоматическиЗагружаемЗаказыКлиента.Доступность                = Форма.ПринимаюЗаказыОтПокупателей;
	Элементы.АвтоматическиОбновлятьЗаказыКлиента.Доступность                = Форма.ПринимаюЗаказыОтПокупателей;
	Элементы.АвтоматическиОбновлятьЗаказыПоставщиков.Доступность            = Форма.ОтправляемЗаказыПоставщикамEDI;
	Элементы.ГруппаАвтоматическиОтменяемСтрокиЗаказовКлиентов.Доступность   = Форма.ПринимаюЗаказыОтПокупателей;
	Элементы.ГруппаАвтоматическиОтменяемСтрокиЗаказовПоставщику.Доступность = Форма.ОтправляемЗаказыПоставщикамEDI;
	
	Элементы.ПричинаОтменыСтрокЗаказовКлиента.Доступность   = Форма.ОтменятьСтрокиЗаказаКлиентаПриОтмене;
	Элементы.ПричинаОтменыСтрокЗаказовПоставщику.Доступность = Форма.ОтменятьСтрокиЗаказаПоставщикуПриОтмене;
	
	Если ЗначениеЗаполнено(Форма.Организация) Тогда
		
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("Организация", Форма.Организация);
		
		НайденныеСтроки = Форма.ОрганизацииНастройки.НайтиСтроки(ПараметрыПоиска);
		
		НастройкиНеЗагружены = Истина;
		Если НайденныеСтроки.Количество() > 0 Тогда
		
			НастройкиНеЗагружены = Не НайденныеСтроки[0].ЕстьНастройкиВСервисе;
		
		КонецЕсли;
			
		Если НастройкиНеЗагружены Тогда
				
			Элементы.СтраницыОрганизацияВыбранаНет.ТекущаяСтраница = Элементы.СтраницаОшибкаПолученияНастроек;
			Элементы.Записать.Доступность = Ложь;
			
		Иначе
			
			Элементы.СтраницыОрганизацияВыбранаНет.ТекущаяСтраница = Элементы.СтраницаОрганизацияВыбрана;
			Элементы.Записать.Доступность = Истина;
			
		КонецЕсли;
		
	Иначе
		Элементы.СтраницыОрганизацияВыбранаНет.ТекущаяСтраница = Элементы.СтраницаОрганизацияНеВыбрана;
		Элементы.Записать.Доступность = Ложь;
	КонецЕсли;
	
	Элементы.ДекорацияЗарегистрироватьОрганизацию.Видимость = Форма.КоличествоОрганизаций > Форма.КоличествоПодключенныхОрганизаций;

	Элементы.ГруппаДополнительно.Видимость = ЗначениеЗаполнено(Форма.Организация)
	                                         Или Форма.КоличествоОрганизаций > Форма.КоличествоПодключенныхОрганизаций;
	                                         
#Область СкладЗаказКлиента
	
	Элементы.ГруппаОпределениеСкладаВЗагружаемыхЗаказахКлиента.Доступность = Форма.ПринимаюЗаказыОтПокупателей;
	
	Если Форма.ВариантОпределенияСкладаЗаказКлиента = ПредопределенноеЗначение("Перечисление.ВариантыОпределенияСкладаВДокументахEDI.ЗаполнятьКонкретнымСкладом") Тогда
		Элементы.СтраницыВариантыОпределенияСкладаЗаказКлиента.ТекущаяСтраница = Элементы.СтраницаЗаказКлиентаКонкретныйСклад;
		Элементы.СтраницыВариантыОпределенияСкладаЗаказКлиента.Видимость = Истина;
	ИначеЕсли Форма.ВариантОпределенияСкладаЗаказКлиента = ПредопределенноеЗначение("Перечисление.ВариантыОпределенияСкладаВДокументахEDI.ОпределятьАвтоматически") Тогда
		Элементы.СтраницыВариантыОпределенияСкладаЗаказКлиента.ТекущаяСтраница = Элементы.СтраницаЗаказКлиентаАвтоматическиОпределятьСклад;
		Элементы.СтраницыВариантыОпределенияСкладаЗаказКлиента.Видимость = Истина;
	Иначе
		Элементы.СтраницыВариантыОпределенияСкладаЗаказКлиента.Видимость = Ложь;
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЗависимымиРеквизитами(Форма)

	Если Не Форма.ИспользуютсяПроцессыEDI Тогда
		Форма.ПринимаюЗаказыОтПокупателей    = Ложь;
		Форма.ОтправляемЗаказыПоставщикамEDI = Ложь;
	КонецЕсли;
	
	Если Не Форма.ПринимаюЗаказыОтПокупателей Тогда
		Форма.РазрешитьПриниматьЗаказыВТерминахНоменклатурыПокупателя = Ложь;
	КонецЕсли;
	
	Если Не Форма.РазрешитьПриниматьЗаказыВТерминахНоменклатурыПокупателя Тогда
		Форма.ОграничиватьКонтрагентовОформляющихЗаказВТерминахПокупателяВыбранными = Ложь;
	КонецЕсли;
	
	Если Не Форма.ПринимаюЗаказыОтПокупателей Тогда
		Форма.АвтоматическиЗагружаемЗаказыКлиента = Ложь;
		Форма.АвтоматическиОбновляемЗаказыКлиента = Ложь;
	КонецЕсли;
	
	Если Не Форма.ОтправляемЗаказыПоставщикамEDI Тогда
		Форма.АвтоматическиОбновляемЗаказыПоставщикам = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииНастройки(Форма)
	
	УправлениеЗависимымиРеквизитами(Форма);
	УправлениеДоступностью(Форма);
	СформироватьЗаголовкиКомандВыбораСписков(Форма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииЧерногоСписка()

	Инд = ПокупателиЗаказВТерминахПокупателяБелыйСписок.Количество();
	Пока Инд > 0 Цикл
			
		Если ПокупателиЗаказКлиентаЧерныйСписок.НайтиПоЗначению(ПокупателиЗаказВТерминахПокупателяБелыйСписок.Получить(Инд - 1).Значение) <> Неопределено Тогда
			 ПокупателиЗаказВТерминахПокупателяБелыйСписок.Удалить(Инд-1);
		КонецЕсли;
		
		Инд = Инд - 1;
			
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииБелогоСписка()
	
	Инд = ПокупателиЗаказВТерминахПокупателяБелыйСписок.Количество();
	Пока Инд > 0 Цикл
		
		Если ПокупателиЗаказКлиентаБелыйСписок.НайтиПоЗначению(ПокупателиЗаказВТерминахПокупателяБелыйСписок.Получить(Инд - 1).Значение) = Неопределено Тогда
			ПокупателиЗаказВТерминахПокупателяБелыйСписок.Удалить(Инд-1);
		КонецЕсли;
		
		Инд = Инд - 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыОткрытияСпискаКонтрагентов()
	
	ПараметрыОткрытияСпискаКонтрагентов = Новый Структура;
	ПараметрыОткрытияСпискаКонтрагентов.Вставить("СписокКонтрагентов", Новый СписокЗначений);
	ПараметрыОткрытияСпискаКонтрагентов.Вставить("ОграничивающийСписокКонтрагентов", Новый СписокЗначений);
	ПараметрыОткрытияСпискаКонтрагентов.Вставить("ВариантОграниченияСписка", "");
	
	ПараметрыОткрытияСпискаКонтрагентов.Вставить("Заголовок", "");
	
	Возврат ПараметрыОткрытияСпискаКонтрагентов
	
КонецФункции

&НаКлиенте
Процедура ПослеОтветаНеобходимостьСохранения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если РезультатСохраненияНастроек(Организация) Тогда
			ВыполняетсяЗакрытие = Истина;
			Закрыть();
		КонецЕсли;
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		ВыполняетсяЗакрытие = Истина;
		Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеОкончанияПодбораКонтрагентов(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		 Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Результат) <> Тип("СписокЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ЭтотОбъект[ДополнительныеПараметры.ИмяСписка] = Результат;
	
	Если ДополнительныеПараметры.ИмяСписка = "ПокупателиЗаказКлиентаБелыйСписок" Тогда
		
		ПриИзмененииБелогоСписка();
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.ИмяСписка = "ПокупателиЗаказКлиентаЧерныйСписок" Тогда
		
		ПриИзмененииЧерногоСписка();
		
	КонецЕсли;
	
	ПриИзмененииНастройки(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция НовыйРезультатСохраненияНастроекНаСервере()

	Результат = Новый Структура;
	Результат.Вставить("СохранениеВСервисеВыполняется", Ложь);
	Результат.Вставить("РезультатСохраненияНастроек",   Ложь);
	Результат.Вставить("ТекстОшибкиНастройки",          "");
	Результат.Вставить("ТекстОткатНастройки",           "");
	Результат.Вставить("РезультатСохраненияВСервисе",   Ложь);
	Результат.Вставить("ТекстОшибкиСохраненияВСервисе", "");
	Результат.Вставить("Организация",                   Неопределено);
	Результат.Вставить("ИдентификаторЗадания",          "");

	Возврат Результат;
	
КонецФункции

&НаСервере
Функция РезультатСохраненияНастроекНаСервере(Организация)
	
	Результат = НовыйРезультатСохраненияНастроекНаСервере();
		
	ПараметрыОформления = РегистрыСведений.НастройкиПоставщикаEDI.ПараметрыОформленияЗаказовКлиентов();
	
	ПараметрыОформления.ИспользуютсяПроцессыEDI                                               = ИспользуютсяПроцессыEDI;
	ПараметрыОформления.Поставщик                                                             = Организация;
	ПараметрыОформления.ПринимаюЗаказыОтПокупателей                                           = ПринимаюЗаказыОтПокупателей;
	ПараметрыОформления.ВариантОграниченияПриемаЗаказовОтПокупателей                          = ВариантОграниченияПриемаЗаказовОтПокупателей;
	ПараметрыОформления.РазрешитьПриниматьЗаказыВТерминахНоменклатурыПокупателя               = РазрешитьПриниматьЗаказыВТерминахНоменклатурыПокупателя;
	ПараметрыОформления.ОграничиватьКонтрагентовОформляющихЗаказВТерминахПокупателяВыбранными = ОграничиватьКонтрагентовОформляющихЗаказВТерминахПокупателяВыбранными;
	ПараметрыОформления.СохранятьВСервисе                                                     = Истина;
	
	ПараметрыОформления.ПокупателиЗаказВТерминахПокупателяБелыйСписок = ПокупателиЗаказВТерминахПокупателяБелыйСписок.ВыгрузитьЗначения();
	ПараметрыОформления.ПокупателиЗаказКлиентаБелыйСписок = ПокупателиЗаказКлиентаБелыйСписок.ВыгрузитьЗначения();
	ПараметрыОформления.ПокупателиЗаказКлиентаЧерныйСписок = ПокупателиЗаказКлиентаЧерныйСписок.ВыгрузитьЗначения();
	
	РегистрыСведений.НастройкиПоставщикаEDI.СохранитьНастройкиОформленияЗаказовПокупателями(ПараметрыОформления);
	
	ЗаполнитьЗначенияСвойств(Результат, ПараметрыОформления);
	Результат.Организация = Организация;
	
	ТекущиеНастройкиИнтеграции = РегистрыСведений.НастройкиИнтеграцииEDI.НастройкиИнтеграцииEDI(Организация);
	
	Если ТекущиеНастройкиИнтеграции.ПрефиксНомеровДокументовСервис <> ПрефиксНомеровДокументовСервис
		Или ТекущиеНастройкиИнтеграции.ОтветственныйПоУмолчаниюДляНовыхЗаказовКлиента <> ОтветственныйПоУмолчаниюДляНовыхЗаказовКлиента Тогда
		
		РезультатОбновленияНастройки = РегистрыСведений.НастройкиИнтеграцииEDI.РезультатОбновленияНастроекОрганизации(Организация,
		                                                                                                              ПрефиксНомеровДокументовСервис, 
		                                                                                                              ОтветственныйПоУмолчаниюДляНовыхЗаказовКлиента);
		
		Если РезультатОбновленияНастройки.Ошибка Тогда 
			Результат.ТекстОшибкиНастроек = РезультатОбновленияНастройки.ТекстОшибки;
			РезультатПолученияНастроек    = РегистрыСведений.НастройкиИнтеграцииEDI.РезультатПолученияНастроекОрганизацииВСервисе(Организация);
			Если РезультатПолученияНастроек.Ошибка Тогда
				ПрефиксНомеровДокументовСервис                 = ТекущиеНастройкиИнтеграции.ПрефиксНомеровДокументовСервис;
				ОтветственныйПоУмолчаниюДляНовыхЗаказовКлиента = ТекущиеНастройкиИнтеграции.ОтветственныйПоУмолчаниюДляНовыхЗаказовКлиента;
				Результат.ТекстОткатНастройки = НСтр("ru = 'Не удалось получить значение настроек организации в сервисе 1С:EDI. Их значение возвращено к ранее сохраненным локальным настройкам.'");
			Иначе
				Результат.ТекстОткатНастройки = НСтр("ru = 'Значение настроек возвращено к полученным значениям из сервиса 1С:EDI.'");
				ПрефиксНомеровДокументовСервис                 = РезультатПолученияНастроек.Данные.ПрефиксДокументов;
				ОтветственныйПоУмолчаниюДляНовыхЗаказовКлиента = РезультатПолученияНастроек.Данные.ОтветственныйЗаНовыеЗаказыКлиентовПоУмолчанию;
			КонецЕсли;
		Иначе
			Результат.РезультатСохраненияНастроек = Истина;
		КонецЕсли;
	Иначе
		Результат.РезультатСохраненияНастроек = Истина;
	КонецЕсли;
	
	ПараметрыИнтеграции = РегистрыСведений.НастройкиИнтеграцииEDI.ПараметрыНастроекИнтеграции();
	
	ПараметрыИнтеграции.Организация = Организация;
	ПараметрыИнтеграции.ПрефиксНомеровДокументовСервис                 = ПрефиксНомеровДокументовСервис;
	ПараметрыИнтеграции.ОтветственныйПоУмолчаниюДляНовыхЗаказовКлиента = ОтветственныйПоУмолчаниюДляНовыхЗаказовКлиента;
	ПараметрыИнтеграции.АвтоматическиЗагружаемЗаказыКлиента            = АвтоматическиЗагружаемЗаказыКлиента;
	ПараметрыИнтеграции.АвтоматическиОбновляемЗаказыКлиента            = АвтоматическиОбновляемЗаказыКлиента;
	ПараметрыИнтеграции.АвтоматическиОбновляемЗаказыПоставщикам        = АвтоматическиОбновляемЗаказыПоставщикам;
	ПараметрыИнтеграции.ОтправляемЗаказыПоставщикамEDI                 = ОтправляемЗаказыПоставщикамEDI;
	ПараметрыИнтеграции.ОтменятьСтрокиЗаказаКлиентаПриОтмене           = ОтменятьСтрокиЗаказаКлиентаПриОтмене;
	ПараметрыИнтеграции.ОтменятьСтрокиЗаказаПоставщикуПриОтмене        = ОтменятьСтрокиЗаказаПоставщикуПриОтмене;
	ПараметрыИнтеграции.ПричинаОтменыСтрокЗаказаПоставщику             = ПричинаОтменыСтрокЗаказаПоставщику;
	ПараметрыИнтеграции.ПричинаОтменыСтрокЗаказовКлиента               = ПричинаОтменыСтрокЗаказовКлиента;
	
	ПараметрыИнтеграции.ВариантОпределенияСкладаЗаказКлиента           = ВариантОпределенияСкладаЗаказКлиента;
	ПараметрыИнтеграции.СкладУстанавливаемыйВЗагружаемыйЗаказаКлиента  = СкладДляПодстановкиЗаказКлиента;
	
	РегистрыСведений.НастройкиИнтеграцииEDI.СохранитьНастройкиИнтеграции(ПараметрыИнтеграции);
	
	Если Результат.РезультатСохраненияВСервисе = Истина
		Или  Результат.СохранениеВСервисеВыполняется Тогда
		
		ЗаполнитьНастройкиОформленияЗаказовПокупателям();
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВопросПослеЗавершения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		РезультатСохраненияНастроек(Организация);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция РезультатСохраненияНастроек(ПоОрганизации) 
	
	ОчиститьСообщения();
	
	Результат = РезультатСохраненияНастроекНаСервере(ПоОрганизации);
	
	Если Результат.РезультатСохраненияНастроек = Ложь Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ТекстОшибкиНастройки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ТекстОткатНастройки);
	КонецЕсли;
	
	Если Результат.РезультатСохраненияВСервисе = Ложь Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ТекстОшибкиСохраненияВСервисе);
		УправлениеДоступностью(ЭтотОбъект);
		Возврат Ложь;
		
	ИначеЕсли Результат.РезультатСохраненияВСервисе = Истина Тогда
		
		Оповестить("НастройкиEDI_ИзменениеНастроекОрганизации",, ЭтотОбъект);
		Модифицированность = Ложь;
		УправлениеДоступностью(ЭтотОбъект);
		Возврат Истина;
		
	ИначеЕсли Результат.СохранениеВСервисеВыполняется Тогда
		
		Оповестить("НастройкиEDI_ИзменениеНастроекОрганизации",, ЭтотОбъект);
		ОрганизацияАсинхроннойКоманды   = Результат.Организация;
		ИдентификаторАсинхроннойКоманды = Результат.РезультатСохраненияВСервисе;
		ПодключитьОбработчикОжидания("ПриОжиданииСохраненияНастроекВСервисе", 1, Истина);
		Модифицированность = Ложь;
		УправлениеДоступностью(ЭтотОбъект);
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

#Область КлиентскаяБиблиотека

&НаКлиенте
Процедура ПриОжиданииСохраненияНастроекВСервисе()
	
	Если ОрганизацияАсинхроннойКоманды = Организация Тогда
		Элементы.СтраницыОрганизацияВыбранаНет.ТекущаяСтраница = Элементы.СтраницаВыполняетсяОбновлениеНастроек;
	КонецЕсли;
	
	Результат = РезультатОжиданияОбновленияНастроекВСервисе();
	
	Если Результат.СохранениеВСервисеВыполняется Тогда
		
		ПодключитьОбработчикОжидания("ПриОжиданииСохраненияНастроекВСервисе", 1, Истина); 
		
	Иначе
		
		ОрганизацияАсинхроннойКоманды   = Неопределено;
		ИдентификаторАсинхроннойКоманды = "";
		
		Если Результат.РезультатСохраненияВСервисе = Ложь Тогда
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ТекстОшибкиСохраненияВСервисе);
			Результат =  Ложь;
		
		ИначеЕсли Результат.РезультатСохраненияВСервисе = Истина Тогда
		
			Результат =  Истина;
			
		КонецЕсли;
		
		ОповещениеПослеОбновления = Новый ОписаниеОповещения("ПослеОбновленияНастроекВСервисе", ЭтотОбъект);
		ВыполнитьОбработкуОповещения(ОповещениеПослеОбновления, Результат);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеОбновленияНастроекВСервисе(Результат, ДополнительныеПараметры) Экспорт

	Модифицированность = Ложь;
	
	Если Результат = Ложь Тогда
		
		ТекстСообщения = НСтр("ru = 'Обновление настроек в сервисе 1С: EDI завершилось с ошибками, будут загружены текущие настройки из сервиса.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);

		ОбновитьНастройкиИзСервиса();
		
	Иначе
		
		ЗаполнитьНастройкиОформленияЗаказовПокупателям();
		ПоказатьОповещениеПользователя(НСтр("ru = 'Обновление настроек в сервисе 1С:EDI завершено успешно.'"));
		
		Если ТекущаяОрганизация <> Организация Тогда
			ОтработатьИзменениеОрганизацииНаКлиенте();
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.СтраницыОрганизацияВыбранаНет.ТекущаяСтраница = Элементы.СтраницаОрганизацияВыбрана;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНастройкиИзСервиса()
	
	РезультатОбновления = РегистрыСведений.НастройкиПоставщикаEDI.РезультатОбновленияНастроекОрганизацииИзСервиса(Организация);
	Если Не РезультатОбновления.Успешно Тогда
		ТекстСообщения = НСтр("ru = 'Получение настроек из сервиса 1С: EDI завершилось с ошибками. Отображаются ранее сохраненные настройки.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	Иначе
		ТекстСообщения = НСтр("ru = 'Успешно загружены настройки из сервиса 1С: EDI.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	ЗаполнитьНастройкиОформленияЗаказовПокупателям();
	
КонецПроцедуры

&НаСервере
Функция РезультатОжиданияОбновленияНастроекВСервисе()
	
	Результат = НовыйРезультатСохраненияНастроекНаСервере();
	
	ПараметрыКоманды = ИнтеграцияССервисомEDIСлужебный.НовыйПараметрыПолученияРезультатаАсинхроннойОбработкиЗапроса();
	
	ПараметрыКоманды.Организация          = ОрганизацияАсинхроннойКоманды;
	ПараметрыКоманды.ИдентификаторЗадания = ИдентификаторАсинхроннойКоманды;
	РезультатВыполненияКоманды            = ИнтеграцияССервисомEDIСлужебный.РезультатАсинхроннойОбработкиКоманды(ПараметрыКоманды);
	
	Если РезультатВыполненияКоманды.ОжидатьОтветаСервиса Тогда
		Результат.СохранениеВСервисеВыполняется = Истина;
	ИначеЕсли РезультатВыполненияКоманды.Ошибка Тогда
		Результат.ТекстОшибкиСохраненияВСервисе = РезультатВыполненияКоманды.ТекстОшибки;
		Результат.РезультатСохраненияВСервисе   = Ложь;
	Иначе
		Результат.РезультатСохраненияВСервисе   = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОтправляемЗаказыПоставщикамEDIПриИзменении(Элемент)
	УправлениеДоступностью(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПояснениеИнформацияОСервисеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПодробнееEDI" Тогда
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ДанныеЗаполненыКорректно()
	
	Отказ = Ложь;
	
	Если ОтменятьСтрокиЗаказаПоставщикуПриОтмене 
		И ИспользуютсяПричиныОтменСтрокЗаказовПоставщикам
		И Не ЗначениеЗаполнено(ПричинаОтменыСтрокЗаказаПоставщику) Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не указана причина отмены строк заказа поставщику'"),, "ПричинаОтменыСтрокЗаказаПоставщику",, Отказ); 
		
	КонецЕсли;
	
	Если ОтменятьСтрокиЗаказаКлиентаПриОтмене 
		И ИспользуютсяПричиныОтменСтрокЗаказовКлиента
		И Не ЗначениеЗаполнено(ПричинаОтменыСтрокЗаказовКлиента) Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не указана причина отмены строк заказа клиента'"),, "ПричинаОтменыСтрокЗаказовКлиента",, Отказ); 
		
	КонецЕсли;
	
	Если ВариантОпределенияСкладаЗаказКлиента = ПредопределенноеЗначение("Перечисление.ВариантыОпределенияСкладаВДокументахEDI.ЗаполнятьКонкретнымСкладом")
		И Не ЗначениеЗаполнено(СкладДляПодстановкиЗаказКлиента) Тогда
			
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не указан склад для указания в загружаемом документе ""Заказ клиента""'"),, "СкладДляПодстановкиЗаказКлиента",, Отказ); 	
			
	КонецЕсли; 
	
	Возврат Не Отказ;
	
КонецФункции

#Область ПодключенныеОрганизации

&НаКлиенте
Процедура ОткрытьФормуПодключенияОрганизаций();
	
	ОткрытьФорму("Обработка.БизнесСеть.Форма.РегистрацияОрганизаций");
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьПодключенныеОрганизации()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ВЫРАЗИТЬ(1 КАК ЧИСЛО(5,0))) КАК КоличествоОрганизаций,
	|	СУММА(ВЫБОР
	|		КОГДА ОрганизацииБизнесСеть.Идентификатор ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ(1 КАК ЧИСЛО(5,0)) 
	|	КОНЕЦ)   КАК КоличествоПодключенныхОрганизаций
	|ИЗ
	|	&СправочникОрганизации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОрганизацииБизнесСеть КАК ОрганизацииБизнесСеть
	|		ПО Организации.Ссылка = ОрганизацииБизнесСеть.Организация
	|ГДЕ
	|	НЕ ПометкаУдаления";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СправочникОрганизации", ИмяСправочникаОрганизации());
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		КоличествоОрганизаций             = 0;
		КоличествоПодключенныхОрганизаций = 0;
	Иначе
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		КоличествоОрганизаций             = Выборка.КоличествоОрганизаций;
		КоличествоПодключенныхОрганизаций = Выборка.КоличествоПодключенныхОрганизаций;
		
	КонецЕсли;
	
	ОпределитьДоступностьЭлементовПоПодключеннымОрганизациям();
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьДоступностьЭлементовПоПодключеннымОрганизациям()

	Если КоличествоПодключенныхОрганизаций = 0 Тогда
		
		Элементы.СтраницыОбновлениеНастроекНастройки.ТекущаяСтраница = Элементы.СтраницаНетДоступныхОрганизаций;
		
		Если КоличествоОрганизаций = 0 Тогда
			Элементы.ДекорацияНетДоступныхОрганизаций.Заголовок = НСтр("ru = 'В информационной базе не создана ни одна организация. Создайте организацию и подключите ее к 1С: Бизнес-сеть.'");
		Иначе
			
			МассивСтрок = Новый Массив;
			МассивСтрок.Добавить(НСтр("ru = 'Нет организаций подключенных к 1С: Бизнес-сеть.'"));
			МассивСтрок.Добавить(" ");
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Перейти к подключению.'"),,,,"ОткрытьФормуПодключенияОрганизаций"));
			
			Подсказка = НСтр("ru = 'Нет организаций подключенных к 1С: Бизнес-сеть. <a href = ""ОткрытьФормуПодключенияОрганизаций"">Перейти к подключению</a>.'");
			
			Элементы.ДекорацияНетДоступныхОрганизаций.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(Подсказка);
			
		КонецЕсли;
		
	Иначе
		
		Элементы.СтраницыОбновлениеНастроекНастройки.ТекущаяСтраница = Элементы.СтраницаНастройки;
		
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Функция ИмяСправочникаОрганизации()
	
	ТипОрганизация = НастройкиEDI.ТипОрганизация();
	МетаданныеОрганизация = Метаданные.НайтиПоТипу(ТипОрганизация);
	
	Возврат МетаданныеОрганизация.ПолноеИмя();
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокВыбораОрганизаций()
	
	Элементы.Организация.СписокВыбора.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		|	ОрганизацииБизнесСеть.Организация КАК Организация,
		|	СУММА(ВЫБОР
		|		КОГДА НастройкиПоставщикаEDI.Поставщик IS NULL
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ)                            КАК КоличествоЗаписей
		|ИЗ
		|	РегистрСведений.ОрганизацииБизнесСеть КАК ОрганизацииБизнесСеть
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПоставщикаEDI КАК НастройкиПоставщикаEDI
		|		ПО ОрганизацииБизнесСеть.Организация = НастройкиПоставщикаEDI.Поставщик
		|		И &ТекстУсловияПоОрганизации
		|СГРУППИРОВАТЬ ПО
		|	ОрганизацииБизнесСеть.Организация
		|УПОРЯДОЧИТЬ ПО
		|	ОрганизацииБизнесСеть.Организация";
	
	ТекстУсловияПоОрганизации = "		ЛЕВОЕ СОЕДИНЕНИЕ &ИмяСправочникаОрганизации КАК СправочникОрганизации
		|ПО ОрганизацииБизнесСеть.Организация = СправочникОрганизации.Ссылка
		|ГДЕ НЕ СправочникОрганизации.ПометкаУдаления";
			
	ТекстУсловияПоОрганизации = СтрЗаменить(ТекстУсловияПоОрганизации, "&ИмяСправочникаОрганизации", ИмяСправочникаОрганизации());
	Запрос.Текст              = СтрЗаменить(Запрос.Текст, "И &ТекстУсловияПоОрганизации", ТекстУсловияПоОрганизации);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Элементы.Организация.СписокВыбора.Добавить(ВыборкаДетальныеЗаписи.Организация);
		
		НоваяСтрока = ОрганизацииНастройки.Добавить();
		НоваяСтрока.Организация           = ВыборкаДетальныеЗаписи.Организация;
		НоваяСтрока.ЕстьНастройкиВСервисе = ВыборкаДетальныеЗаписи.КоличествоЗаписей > 0;
		
		Если НЕ НоваяСтрока.ЕстьНастройкиВСервисе Тогда
			ТребуетсяПолучениеНастроекПриОткрытии = Истина;
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеНастроек

&НаСервере
Функция НастройкиДлительнаяОперация(МассивОрганизацийКПолучениюНастроек)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение настроек поставщика EDI'");
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьФункцию(
		ПараметрыВыполнения,
		"РегистрыСведений.НастройкиПоставщикаEDI.РезультатОбновленияНастроекМассиваОрганизаций",
		МассивОрганизацийКПолучениюНастроек);
	Возврат ДлительнаяОперация;

КонецФункции

&НаКлиенте
Процедура ПолучениеНастроекЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	Если Не Результат.Статус = "Выполнено" Тогда
		Возврат;
	КонецЕсли;
	
	ПолучениеНастроекЗавершениеНаСервере(Результат,
	                                     ДополнительныеПараметры.ВыводитьСообщенияОбОшибках);
		
КонецПроцедуры

&НаСервере
Процедура ПолучениеНастроекЗавершениеНаСервере(Результат, ВыводитьСообщенияОбОшибках)
	
	МассивРезультатПолучения = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	Для Каждого РезультатПолученияНастроекПоОрганизации Из МассивРезультатПолучения Цикл
		
		Если РезультатПолученияНастроекПоОрганизации.Значение.Успешно Тогда
			
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("Организация", РезультатПолученияНастроекПоОрганизации.Ключ);
			
			НайденныеСтроки = ОрганизацииНастройки.НайтиСтроки(ПараметрыПоиска);
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				НайденныеСтроки[0].ЕстьНастройкиВСервисе = Истина;
				
				Если Организация = РезультатПолученияНастроекПоОрганизации.Ключ Тогда
					ЗаполнитьНастройкиОформленияЗаказовПокупателям();
					УправлениеДоступностью(ЭтотОбъект);
					СформироватьЗаголовкиКомандВыбораСписков(ЭтотОбъект);
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ВыводитьСообщенияОбОшибках Тогда
			
			ШаблонСообщения = НСтр("ru = 'Не удалось получить настройки организации %1. %2'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, РезультатПолученияНастроекПоОрганизации.Ключ, РезультатПолученияНастроекПоОрганизации.Значение.ТекстОшибки);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;		
		
	КонецЦикла;
	
	Элементы.СтраницыОбновлениеНастроекНастройки.ТекущаяСтраница = Элементы.СтраницаНастройки;
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьОтсутствующиеНастройкиПоОрганизациямПриОткрытии()
		
	Элементы.СтраницыОбновлениеНастроекНастройки.ТекущаяСтраница = Элементы.СтраницаПолучениеНастроек;

	МассивОрганизацийКПолучениюНастроек = Новый Массив;
	Для Каждого НастройкаОрганизации Из ОрганизацииНастройки Цикл
		Если Не НастройкаОрганизации.ЕстьНастройкиВСервисе Тогда
			МассивОрганизацийКПолучениюНастроек.Добавить(НастройкаОрганизации.Организация);
		КонецЕсли;
	КонецЦикла;

	ДлительнаяОперация = НастройкиДлительнаяОперация(МассивОрганизацийКПолучениюНастроек);
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВыводитьСообщенияОбОшибках", Ложь);	
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		ПолучениеНастроекЗавершение(ДлительнаяОперация, ДополнительныеПараметры);
	ИначеЕсли ДлительнаяОперация.Статус = "Выполняется" Тогда
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПолучениеНастроекЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти




