
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИнициализироватьДанныеФормы();
	ОпределитьОтображаемыеВиджеты();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьВиджеты(Ложь);
	Если АвтоматическиОбновлять Тогда
		ПодключитьОбработчикОжидания("ВыполнитьАвтоматическоеОбновление", ПериодАвтообновления * 60);
	КонецЕсли;
	
	Если РазделениеВключено Тогда
		НачатьОбновлениеДанныхИзСервиса();
	КонецЕсли;
	
	ДокументыEDIИнтеграцияКлиент.ПроверитьОрганизацииТребующиеПовторногоПодключения(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область ПереходКНастройкамВиджетов

&НаКлиенте
Процедура ДекорацияНастройкиЗакупкиНажатие(Элемент)
	
	ПриНажатииНастройкиВиджета(Элемент, ПредопределенноеЗначение("Перечисление.ДоступныеВиджетыТекущихДелEDI.Закупки"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкиПродажиНажатие(Элемент)
	
	ПриНажатииНастройкиВиджета(Элемент, ПредопределенноеЗначение("Перечисление.ДоступныеВиджетыТекущихДелEDI.Продажи"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкиНастройкиСправочникиНажатие(Элемент)
	
	ПриНажатииНастройкиВиджета(Элемент, ПредопределенноеЗначение("Перечисление.ДоступныеВиджетыТекущихДелEDI.НастройкиСправочники"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкиКупитьЗакупкиНажатие(Элемент)
	
	ПриНажатииНастройкиВиджета(Элемент, ПредопределенноеЗначение("Перечисление.ДоступныеВиджетыТекущихДелEDI.Купить"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкиКонтрольПоступленийЗакупкиНажатие(Элемент)
	
	ПриНажатииНастройкиВиджета(Элемент, ПредопределенноеЗначение("Перечисление.ДоступныеВиджетыТекущихДелEDI.КонтрольПоступлений"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкиКонтрольОтгрузокПродажиНажатие(Элемент)
	
	ПриНажатииНастройкиВиджета(Элемент, ПредопределенноеЗначение("Перечисление.ДоступныеВиджетыТекущихДелEDI.КонтрольОтгрузок"));
	
КонецПроцедуры

#КонецОбласти

#Область ДобавлениеВиджета

&НаКлиенте
Процедура ДекорацияДобавитьПраваяКолонкаНажатие(Элемент)
	
	ДобавитьВиджет();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияДобавитьЦентральнаяКолонкаНажатие(Элемент)
	
	ДобавитьВиджет();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияДобавитьЛеваяКолонкаНажатие(Элемент)
	
	ДобавитьВиджет();
	
КонецПроцедуры

#КонецОбласти

#Область ИзменениеПризнакаСвернутости

&НаКлиенте
Процедура ДекорацияСобытияЗакупкиПризнакСвернутостиНажатие(Элемент)
	
	ДекорацияПризнакСвернутостиНажатие(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВРаботеВсеЗакупкиПризнакСвернутостиНажатие(Элемент)
	
	ДекорацияПризнакСвернутостиНажатие(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОтклоненияПриВыполненииЗакупкиПризнакСвернутостиНажатие(Элемент)
	
	ДекорацияПризнакСвернутостиНажатие(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияАрхивЗакупкиПризнакСвернутостиНажатие(Элемент)
	
	ДекорацияПризнакСвернутостиНажатие(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСобытияПродажиПризнакСвернутостиНажатие(Элемент)
	
	ДекорацияПризнакСвернутостиНажатие(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВРаботеВсеПродажиПризнакСвернутостиНажатие(Элемент)
	
	ДекорацияПризнакСвернутостиНажатие(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОтклоненияПриВыполненииПродажиПризнакСвернутостиНажатие(Элемент)
	
	ДекорацияПризнакСвернутостиНажатие(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияАрхивПродажиПризнакСвернутостиНажатие(Элемент)
	
	ДекорацияПризнакСвернутостиНажатие(Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область ПереходыПоНавигационнымСсылкам

#Область Закупки

#Область События

&НаКлиенте
Процедура ДекорацияСобытияЗакупкиПерваяОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДелаEDIКлиент.ОбработатьСобытиеТекущихДелЛентаСобытий(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСобытияЗакупкиВтораяОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДелаEDIКлиент.ОбработатьСобытиеТекущихДелЛентаСобытий(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСобытияЗакупкиТретьяОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДелаEDIКлиент.ОбработатьСобытиеТекущихДелЛентаСобытий(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСобытияЗакупкиЧетвертаяОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДелаEDIКлиент.ОбработатьСобытиеТекущихДелЛентаСобытий(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

#КонецОбласти

#Область Статусы

&НаКлиенте
Процедура ДекорацияВРаботеВсеЗакупкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДелаEDIКлиент.ОбработатьСобытиеТекущихДелЖурналДокументов(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВРаботеПоСтатусамЗакупкиПерваяОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДелаEDIКлиент.ОбработатьСобытиеТекущихДелЖурналДокументов(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВРаботеПоСтатусамЗакупкиВтораяОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДелаEDIКлиент.ОбработатьСобытиеТекущихДелЖурналДокументов(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВРаботеПоСтатусамЗакупкиТретьяОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДелаEDIКлиент.ОбработатьСобытиеТекущихДелЖурналДокументов(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВРаботеПоСтатусамЗакупкиЧетвертаяОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДелаEDIКлиент.ОбработатьСобытиеТекущихДелЖурналДокументов(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОтклоненияПриВыполненииВсеЗакупкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДелаEDIКлиент.ОбработатьСобытиеТекущихДелЖурналДокументов(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОтклоненияПриВыполненииПоСтатусамЗакупкиПерваяОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДелаEDIКлиент.ОбработатьСобытиеТекущихДелЖурналДокументов(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОтклоненияПриВыполненииПоСтатусамЗакупкиВтораяОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДелаEDIКлиент.ОбработатьСобытиеТекущихДелЖурналДокументов(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОтклоненияПриВыполненииПоСтатусамЗакупкиТретьяОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДелаEDIКлиент.ОбработатьСобытиеТекущихДелЖурналДокументов(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОтклоненияПриВыполненииПоСтатусамЗакупкиЧетвертаяОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДелаEDIКлиент.ОбработатьСобытиеТекущихДелЖурналДокументов(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияАрхивВсеЗакупкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДелаEDIКлиент.ОбработатьСобытиеТекущихДелЖурналДокументов(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияАрхивПоСтатусамЗакупкиПерваяОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДелаEDIКлиент.ОбработатьСобытиеТекущихДелЖурналДокументов(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияАрхивПоСтатусамЗакупкиВтораяОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДелаEDIКлиент.ОбработатьСобытиеТекущихДелЖурналДокументов(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ДекорацияЗаказПоставщикуДоступныеДляОтправкиНажатие(Элемент)
	
	ТекущиеДелаEDIКлиент.ОбработатьСобытиеДоступныеДляОтправки(ЭтотОбъект, Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область Продажи

#Область События

&НаКлиенте
Процедура ДекорацияСобытияПродажиПерваяОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДелаEDIКлиент.ОбработатьСобытиеТекущихДелЛентаСобытий(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСобытияПродажиВтораяОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДелаEDIКлиент.ОбработатьСобытиеТекущихДелЛентаСобытий(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСобытияПродажиТретьяОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДелаEDIКлиент.ОбработатьСобытиеТекущихДелЛентаСобытий(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСобытияПродажиЧетвертаяОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДелаEDIКлиент.ОбработатьСобытиеТекущихДелЛентаСобытий(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

#КонецОбласти

#Область Статусы

&НаКлиенте
Процедура ДекорацияВРаботеВсеПродажиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДелаEDIКлиент.ОбработатьСобытиеТекущихДелЖурналДокументов(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВРаботеПоСтатусамПродажиПерваяОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДелаEDIКлиент.ОбработатьСобытиеТекущихДелЖурналДокументов(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВРаботеПоСтатусамПродажиВтораяОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДелаEDIКлиент.ОбработатьСобытиеТекущихДелЖурналДокументов(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВРаботеПоСтатусамПродажиТретьяОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДелаEDIКлиент.ОбработатьСобытиеТекущихДелЖурналДокументов(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВРаботеПоСтатусамПродажиЧетвертаяОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДелаEDIКлиент.ОбработатьСобытиеТекущихДелЖурналДокументов(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОтклоненияПриВыполненииВсеПродажиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДелаEDIКлиент.ОбработатьСобытиеТекущихДелЖурналДокументов(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОтклоненияПриВыполненииПоСтатусамПродажиПерваяОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДелаEDIКлиент.ОбработатьСобытиеТекущихДелЖурналДокументов(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОтклоненияПриВыполненииПоСтатусамПродажиВтораяОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДелаEDIКлиент.ОбработатьСобытиеТекущихДелЖурналДокументов(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОтклоненияПриВыполненииПоСтатусамПродажиТретьяОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДелаEDIКлиент.ОбработатьСобытиеТекущихДелЖурналДокументов(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОтклоненияПриВыполненииПоСтатусамПродажиЧетвертаяОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДелаEDIКлиент.ОбработатьСобытиеТекущихДелЖурналДокументов(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияАрхивВсеПродажиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДелаEDIКлиент.ОбработатьСобытиеТекущихДелЖурналДокументов(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияАрхивПоСтатусамПродажиПерваяОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДелаEDIКлиент.ОбработатьСобытиеТекущихДелЖурналДокументов(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияАрхивПоСтатусамПродажиВтораяОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДелаEDIКлиент.ОбработатьСобытиеТекущихДелЖурналДокументов(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Купить

&НаКлиенте
Процедура ДекорацияКупитьСоздатьЗаказПоставщикуОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДелаEDIКлиент.СоздатьНовыйЗаказПоставщику();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКупитьНайтиТорговоеПредложениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиИСправочники

&НаКлиенте
Процедура ДекорацияНастройкиСправочникиПерваяОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДелаEDIКлиент.ОбработатьСобытиеНастройкиСправочники(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкиСправочникиВтораяОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДелаEDIКлиент.ОбработатьСобытиеНастройкиСправочники(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкиСправочникиТретьяОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДелаEDIКлиент.ОбработатьСобытиеНастройкиСправочники(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкиСправочникиЧетвертаяОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДелаEDIКлиент.ОбработатьСобытиеНастройкиСправочники(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкиСправочникиПятаяОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДелаEDIКлиент.ОбработатьСобытиеНастройкиСправочники(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

#КонецОбласти

#Область КонтрольПоступлений

&НаКлиенте
Процедура ДекорацияКонтрольПоступленийОтборыЗакупкиПерваяОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДелаEDIКлиент.ОбработатьСобытиеКонтроляПлановыхДатВыполнения(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКонтрольПоступленийОтборыЗакупкиВтораяОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДелаEDIКлиент.ОбработатьСобытиеКонтроляПлановыхДатВыполнения(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКонтрольПоступленийОтборыЗакупкиТретьяОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДелаEDIКлиент.ОбработатьСобытиеКонтроляПлановыхДатВыполнения(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКонтрольПоступленийОтборыЗакупкиЧетвертаяОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДелаEDIКлиент.ОбработатьСобытиеКонтроляПлановыхДатВыполнения(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКонтрольПоступленийОтборыЗакупкиПятаяОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДелаEDIКлиент.ОбработатьСобытиеКонтроляПлановыхДатВыполнения(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

#КонецОбласти

#Область КонтрольОтгрузок

&НаКлиенте
Процедура ДекорацияКонтрольОтгрузокОтборыПродажиПерваяОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДелаEDIКлиент.ОбработатьСобытиеКонтроляПлановыхДатВыполнения(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКонтрольОтгрузокОтборыПродажиВтораяОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДелаEDIКлиент.ОбработатьСобытиеКонтроляПлановыхДатВыполнения(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКонтрольОтгрузокОтборыПродажиТретьяОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДелаEDIКлиент.ОбработатьСобытиеКонтроляПлановыхДатВыполнения(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКонтрольОтгрузокОтборыПродажиЧетвертаяОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДелаEDIКлиент.ОбработатьСобытиеКонтроляПлановыхДатВыполнения(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКонтрольОтгрузокОтборыПродажиПятаяОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДелаEDIКлиент.ОбработатьСобытиеКонтроляПлановыхДатВыполнения(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОткрытиеЖурналов

&НаКлиенте
Процедура ДекорацияЗаголовокЗакупкиНажатие(Элемент)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Обработка.СервисEDI.Форма.ДокументыЗакупки.Открыть");
	
	ОткрытьФорму("Обработка.СервисEDI.Форма.ДокументыЗакупки", , ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗаголовокПродажиНажатие(Элемент)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Обработка.СервисEDI.Форма.ДокументыПродажи.Открыть");
	
	ОткрытьФорму("Обработка.СервисEDI.Форма.ДокументыПродажи", , ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ДекорацияНастройкиАвтообновленияНажатие(Элемент)
	
	ОповещениеИзмененияАвтообновления = Новый ОписаниеОповещения("ПослеИзмененияНастроекОбновления", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.СервисEDI.Форма.НастройкиАвтоОбновления",
	             ПараметрыАвтообновленияФормы(ЭтотОбъект), ЭтотОбъект,,,,
	             ОповещениеИзмененияАвтообновления, 
	             РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьВиджеты(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПризнакиСвернутости

&НаКлиенте
Процедура ДекорацияПризнакСвернутостиНажатие(Элемент)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ИмяСворачиваемогоЭлемента", Элемент.Имя);
	
	НайденныеСтроки = ЗависимостиСворачиваемыхГрупп.НайтиСтроки(ПараметрыОтбора);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НайденныеСтроки[0].Включена Тогда
		
		НайденныеСтроки[0].Включена = Ложь;
		
	Иначе
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Виджет", НайденныеСтроки[0].Виджет);
		
		НайденныеСтрокиВиджета = Новый Структура;
		НайденныеСтрокиВиджета = ЗависимостиСворачиваемыхГрупп.НайтиСтроки(ПараметрыОтбора);
		
		Для Каждого НайденнаяСтрокаВиджета Из НайденныеСтрокиВиджета Цикл
			
			Если НайденнаяСтрокаВиджета.ИмяСворачиваемогоЭлемента = Элемент.Имя Тогда
				НайденнаяСтрокаВиджета.Включена = Истина;
			Иначе
				НайденнаяСтрокаВиджета.Включена = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОпределитьСвернутостьГрупп(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьСвернутостьГрупп(ТребуетсяСохранениеНастроек = Ложь)
	
	МассивВиджетов = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВиджетов, ЗависимостиСворачиваемыхГрупп.Выгрузить().ВыгрузитьКолонку("Виджет"), Истина);
	
	Для Каждого Виджет Из МассивВиджетов Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Виджет", Виджет);
		
		НайденныеСтроки = ЗависимостиСворачиваемыхГрупп.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			Если НайденнаяСтрока.Включена Тогда
				
				Элементы[НайденнаяСтрока.ИмяПодчиненнойГруппы].Видимость = Истина;
				Элементы[НайденнаяСтрока.ИмяСворачиваемогоЭлемента].Картинка = БиблиотекаКартинок.ГруппаРазвернутаСинийEDI;
				
			Иначе
				
				Элементы[НайденнаяСтрока.ИмяПодчиненнойГруппы].Видимость = Ложь;
				Элементы[НайденнаяСтрока.ИмяСворачиваемогоЭлемента].Картинка = БиблиотекаКартинок.ГруппаСвернутаСинийEDI;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ТребуетсяСохранениеНастроек Тогда
		ТекущиеДелаEDI.СохранитьНастройкиВиджетов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаСоставаВиджетов

&НаКлиенте
Процедура ДобавитьВиджет()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИспользуемыеВиджеты", ИспользуемыеВиджеты);
	
	ОповещениеОДобавленииВиджета = Новый ОписаниеОповещения("ПослеВыбораДобавляемогоВиджета", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.СервисEDI.Форма.ДобавлениеВиджета",
	             ПараметрыФормы, ЭтотОбъект,
	             ,,,
	             ОповещениеОДобавленииВиджета, 
	             РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораДобавляемогоВиджета(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИспользуемыеВиджеты.Добавить(Результат.ВыбранныйВиджет);
	Для Каждого ВыбранныйРаздел Из Результат.ВыбранныеРазделы Цикл
		ИспользуемыеРазделы.Добавить(ВыбранныйРаздел);
	КонецЦикла;
	ОбновитьВиджеты(Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПриНажатииНастройкиВиджета(Элемент, Виджет)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ДополнительныеПараметры.Вставить("Виджет",  Виджет);
	
	Оповещение = Новый ОписаниеОповещения("ВыборИзМенюНастройкиВиджета", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВыборИзМеню(Оповещение, СписокВыбораПодменюНастройкиВиджета(), Элемент);
	
КонецПроцедуры

&НаКлиенте
Функция СписокВыбораПодменюНастройкиВиджета()
	
	СписокВыбора = Новый СписокЗначений;
	
	СписокВыбора.Добавить("НастроитьВиджет", НСтр("ru = 'Настроить виджет'"),,КартинкаНастройкиВиджетов);
	СписокВыбора.Добавить("УдалитьВиджет", НСтр("ru = 'Удалить'"),,КартинкаУдалить);
	
	Возврат СписокВыбора;
	
КонецФункции

&НаКлиенте
Процедура ВыборИзМенюНастройкиВиджета(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Значение = "УдалитьВиджет" Тогда
		УдалитьВиджетИзИспользуемых(ДополнительныеПараметры.Виджет);
	ИначеЕсли Результат.Значение = "НастроитьВиджет" Тогда
		
		ОповещениеОНастройкеВиджетов = Новый ОписаниеОповещения("ОкончаниеНастройкиВиджетов", ЭтотОбъект, ДополнительныеПараметры);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ТекущийВиджет",    ДополнительныеПараметры.Виджет);
		ПараметрыФормы.Вставить("ВыбранныеВиджеты", ИспользуемыеВиджеты.ВыгрузитьЗначения());
		ПараметрыФормы.Вставить("ВыбранныеРазделы", ИспользуемыеРазделы.ВыгрузитьЗначения());
		
		ОткрытьФорму("Обработка.СервисEDI.Форма.НастройкиВиджетов",
		             ПараметрыФормы, 
		             ЭтотОбъект,
		            ,
		            ,
		            ,
		            ОповещениеОНастройкеВиджетов, 
		            РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВиджетИзИспользуемых(Виджет)

	УдаляемыйЭлемент = ИспользуемыеВиджеты.НайтиПоЗначению(Виджет);
	Если УдаляемыйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИспользуемыеВиджеты.Удалить(УдаляемыйЭлемент);
	Для Каждого РазделВиджета Из ТекущиеДелаEDIКлиентСервер.РазделыВиджета(Виджет) Цикл
		
		НайденныйЭлемент = ИспользуемыеРазделы.НайтиПоЗначению(РазделВиджета);
		
		Если НайденныйЭлемент <> Неопределено Тогда
			ИспользуемыеРазделы.Удалить(НайденныйЭлемент);
		КонецЕсли;
		
	КонецЦикла;
	
	НормализоватьВиджетыРазделы(ИспользуемыеВиджеты, ИспользуемыеРазделы);
	ОбновитьВиджеты(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеНастройкиВиджетов(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено
		Или Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ИспользуемыеВиджеты.ЗагрузитьЗначения(Результат.ВыбранныеВиджеты);
	ИспользуемыеРазделы.ЗагрузитьЗначения(Результат.ВыбранныеРазделы);
	НормализоватьВиджетыРазделы(ИспользуемыеВиджеты, ИспользуемыеРазделы);
	
	ОбновитьВиджеты(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеВиджетов

&НаКлиенте
Процедура ОбновитьВиджеты(СохранятьНастройки = Ложь)
	
	Элементы.СтраницыВиджетыОбновление.ТекущаяСтраница = Элементы.СтраницаОбновление;
	
	ДлительнаяОперация = ОбновитьДлительнаяОперация(СохранятьНастройки);
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		ОбновитьВиджетыЗавершение(ДлительнаяОперация, ДополнительныеПараметры);
	ИначеЕсли ДлительнаяОперация.Статус = "Выполняется" Тогда
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбновитьВиджетыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВиджетыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		ВывестиВиджеты(Результат.АдресРезультата);
	КонецЕсли;
	
	Элементы.СтраницыВиджетыОбновление.ТекущаяСтраница = Элементы.СтраницаВиджеты;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиВиджеты(АдресПодготовленныхДанных)
	
	ПараметрыВыводаВиджетов = Новый Структура;
	ПараметрыВыводаВиджетов.Вставить("ИспользуемыеВиджеты", ИспользуемыеВиджеты);
	ПараметрыВыводаВиджетов.Вставить("ИспользуемыеРазделы", ИспользуемыеРазделы);
	ПараметрыВыводаВиджетов.Вставить("ДанныеДляВиджетов",   ПолучитьИзВременногоХранилища(АдресПодготовленныхДанных));
	
	ТекущиеДелаEDI.ВывестиВиджеты(ЭтотОбъект, ПараметрыВыводаВиджетов);
	
	ОпределитьСвернутостьГрупп();
	
КонецПроцедуры

&НаСервере
Функция ОбновитьДлительнаяОперация(СохранятьНастройки = Ложь)

	ТекущаяДата = ТекущаяДатаСеанса();
	
	Если СохранятьНастройки Тогда
		ТекущиеДелаEDI.СохранитьНастройкиВиджетов(ЭтотОбъект);
	КонецЕсли;
	
	КомандыПоследнихСобытий.Очистить();
	
	НастроитьВидимостьВиджетов();
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ИспользуемыеВиджеты", ИспользуемыеВиджеты);
	ПараметрыПроцедуры.Вставить("ИспользуемыеРазделы", ИспользуемыеРазделы);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Обновление текущих дел EDI'");
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне("ТекущиеДелаEDI.ПодготовитьИнформациюДляВыводаВиджетов",
		ПараметрыПроцедуры, ПараметрыВыполнения);
	Возврат ДлительнаяОперация;

КонецФункции

#КонецОбласти

#Область Автообновление

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыАвтообновленияФормы(Форма)
	
	ПараметрыАвтообновленияФормы = Новый Структура;
	ПараметрыАвтообновленияФормы.Вставить("АвтоматическиОбновлять", Форма.АвтоматическиОбновлять);
	ПараметрыАвтообновленияФормы.Вставить("ПериодАвтообновления", Форма.ПериодАвтообновления);
	
	Возврат ПараметрыАвтообновленияФормы;
	
КонецФункции

&НаКлиенте
Процедура ПослеИзмененияНастроекОбновления(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.АвтоматическиОбновлять
		И Не АвтоматическиОбновлять Тогда
		
		ПодключитьОбработчикОжидания("ВыполнитьАвтоматическоеОбновление", Результат.ПериодАвтообновления * 60);
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат, "АвтоматическиОбновлять, ПериодАвтообновления");
	СохранитьНастройкиАвтообновления();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиАвтообновления()
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиОбновленияТекущихДелEDI", "АвтоматическиОбновлять", АвтоматическиОбновлять);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиОбновленияТекущихДелEDI", "ПериодАвтообновления", ПериодАвтообновления);
	
КонецПроцедуры

&НаКлиенте
Процедура  ВыполнитьАвтоматическоеОбновление()
	
	Если Не АвтоматическиОбновлять Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьВиджеты(Ложь);
	
	ПодключитьОбработчикОжидания("ВыполнитьАвтоматическоеОбновление", ПериодАвтообновления * 60);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ИнициализироватьДанныеФормы()
	
	АвтоматическиОбновлять = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиОбновленияТекущихДелEDI", "АвтоматическиОбновлять", Ложь);
	ПериодАвтообновления   = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиОбновленияТекущихДелEDI", "ПериодАвтообновления", 0);
	
	РазделениеВключено = ОбщегоНазначения.РазделениеВключено();
	
	КартинкаУдалить               = БиблиотекаКартинок.УдалитьНепосредственно;
	КартинкаНастройкиВиджетов     = БиблиотекаКартинок.НастройкиВиджетовEDI;
	
	ДоступныеДокументыЗакупки.ЗагрузитьЗначения(ТекущиеДелаEDI.ИдентификаторыДокументовЗакупки());
	ДоступныеДокументыПродажи.ЗагрузитьЗначения(ТекущиеДелаEDI.ИдентификаторыДокументовПродажи());
	
	Менеджер = Пользователи.ТекущийПользователь();
	
	ДокументыEDIИнтеграция.ФормаСпискаПрикладныхОбъектовЗаполнитьОрганизацииТребующиеПовторногоПодключения(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьОтображаемыеВиджеты()

	ИспользуемыеВиджеты.Очистить();
	СохраненныеВыбранныеВиджеты   = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить("ВиджетыEDI", "ВыбранныеВиджеты");
	СохраненныеВыбранныеРазделы   = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить("ВиджетыEDI", "ВыбранныеРазделы");
	СохраненнаяРазвернутостьГрупп = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить("ВиджетыEDI", "РазвернутостьГрупп");
	
	ТребуетсяСохранениеНастроек = Ложь;
	Если СохраненныеВыбранныеВиджеты = Неопределено Тогда
		
		СохраненныеВыбранныеВиджеты = ТекущиеДелаEDI.ВиджетыПоУмолчанию();
		СохраненныеВыбранныеРазделы = Новый Массив; 
		Для Каждого Виджет Из СохраненныеВыбранныеВиджеты Цикл
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СохраненныеВыбранныеРазделы, ТекущиеДелаEDI.РазделыПоУмолчанию(Виджет));
		КонецЦикла;
	
		ТребуетсяСохранениеНастроек = Истина;
		
	Иначе
		
		СохраненныеВыбранныеВиджеты = СохраненныеВыбранныеВиджеты.ВыгрузитьЗначения();
		СохраненныеВыбранныеРазделы = СохраненныеВыбранныеРазделы.ВыгрузитьЗначения();
		
	КонецЕсли;
	
	Для Каждого ВыбранныйВиджет Из СохраненныеВыбранныеВиджеты Цикл
		Если ТекущиеДелаEDI.ВиджетДоступенПоПравам(ВыбранныйВиджет) Тогда
			ИспользуемыеВиджеты.Добавить(ВыбранныйВиджет);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ВыбранныйРаздел Из СохраненныеВыбранныеРазделы Цикл
		Если ТекущиеДелаEDI.РазделВиджетаДоступенПоПравам(ВыбранныйРаздел) Тогда
			ИспользуемыеРазделы.Добавить(ВыбранныйРаздел);
		КонецЕсли;
	КонецЦикла;
	
	Если СохраненнаяРазвернутостьГрупп <> Неопределено Тогда
		ЗависимостиСворачиваемыхГрупп.Загрузить(СохраненнаяРазвернутостьГрупп);
	КонецЕсли;
	
	Если ТребуетсяСохранениеНастроек Тогда
		ТекущиеДелаEDI.СохранитьНастройкиВиджетов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьВиджетов()
	
	Для Инд =1 По Перечисления.ДоступныеВиджетыТекущихДелEDI.Количество() Цикл
		
		ЗначениеПеречисления = Перечисления.ДоступныеВиджетыТекущихДелEDI.Получить(Инд - 1);
		ИмяЭлемента = "Группа" + ЗначениеПеречисления.Метаданные().ЗначенияПеречисления.Получить(Инд -1).Имя;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элементы, ИмяЭлемента) Тогда
			Элементы[ИмяЭлемента].Видимость = ИспользуемыеВиджеты.НайтиПоЗначению(ЗначениеПеречисления) <> Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
	СоответствиеГруппВиджетовГруппамФормы = ТекущиеДелаEDI.СоответствиеГруппВиджетовГруппамФормы();
	КоличествоГруппСВиджетами = 0;
	
	СоответствиеИспользованиеВиджетов = Новый Соответствие;
	
	Для Каждого ГруппаКолонок Из Элементы.ГруппаКолонкиВиджетов.ПодчиненныеЭлементы Цикл
		
		ДанныеПоВиджетам = Новый Структура;
		ДанныеПоВиджетам.Вставить("Количество",         0);
		ДанныеПоВиджетам.Вставить("Используется",       0);
		ДанныеПоВиджетам.Вставить("ОтображатьДобавить", Истина);
		
		СоответствиеИспользованиеВиджетов.Вставить(ГруппаКолонок.Имя, ДанныеПоВиджетам);
		
	КонецЦикла;
	
	Для Каждого ГруппаВиджетов Из ТекущиеДелаEDI.МассивГруппВиджетовДоступныхПоПравам() Цикл
		
		ИмяГруппыКолонок = СоответствиеГруппВиджетовГруппамФормы.Получить(ГруппаВиджетов);
		Если ИмяГруппыКолонок = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоВиджетов = 0;
		ИспользуетсяВиджетов = 0;
		
		Для Каждого Виджет Из ТекущиеДелаEDI.МассивВиджетовГруппы(ГруппаВиджетов) Цикл
			
			КоличествоВиджетов = КоличествоВиджетов + 1;
			
			Если ИспользуемыеВиджеты.НайтиПоЗначению(Виджет) <> Неопределено Тогда
				ИспользуетсяВиджетов = ИспользуетсяВиджетов + 1;
			КонецЕсли;
			
		КонецЦикла;
		
		СоответствиеИспользованиеВиджетов[ИмяГруппыКолонок].Количество   = КоличествоВиджетов;
		СоответствиеИспользованиеВиджетов[ИмяГруппыКолонок].Используется = ИспользуетсяВиджетов;
		
		Если ИспользуетсяВиджетов > 0 Тогда
			КоличествоГруппСВиджетами = КоличествоГруппСВиджетами + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если КоличествоГруппСВиджетами = 0 Тогда
		
		СоответствиеИспользованиеВиджетов["ГруппаЛеваяКолонка"].ОтображатьДобавить       = Истина;
		СоответствиеИспользованиеВиджетов["ГруппаЦентральнаяКолонка"].ОтображатьДобавить = Ложь;
		СоответствиеИспользованиеВиджетов["ГруппаПраваяКолонка"].ОтображатьДобавить      = Ложь;
		
	ИначеЕсли КоличествоГруппСВиджетами = 1 Тогда
		
		Если СоответствиеИспользованиеВиджетов["ГруппаЛеваяКолонка"].Используется = 0 Тогда
			
			СоответствиеИспользованиеВиджетов["ГруппаЛеваяКолонка"].ОтображатьДобавить       = Ложь;
			СоответствиеИспользованиеВиджетов["ГруппаЦентральнаяКолонка"].ОтображатьДобавить = Ложь;
			СоответствиеИспользованиеВиджетов["ГруппаПраваяКолонка"].ОтображатьДобавить      = Истина;
			
		Иначе
			
			СоответствиеИспользованиеВиджетов["ГруппаЛеваяКолонка"].ОтображатьДобавить       = Ложь;
			СоответствиеИспользованиеВиджетов["ГруппаЦентральнаяКолонка"].ОтображатьДобавить = Истина;
			СоответствиеИспользованиеВиджетов["ГруппаПраваяКолонка"].ОтображатьДобавить      = Ложь;
			
		КонецЕсли;
			
	ИначеЕсли КоличествоГруппСВиджетами = 2 Тогда 
		
		СоответствиеИспользованиеВиджетов["ГруппаЛеваяКолонка"].ОтображатьДобавить       = Ложь;
		СоответствиеИспользованиеВиджетов["ГруппаЦентральнаяКолонка"].ОтображатьДобавить = Ложь;
		СоответствиеИспользованиеВиджетов["ГруппаПраваяКолонка"].ОтображатьДобавить      = Истина;
		
	Иначе
		
		Для Каждого ДанныеПоВиджету Из СоответствиеИспользованиеВиджетов Цикл
			
			ДанныеПоВиджету.Значение.ОтображатьДобавить = (ДанныеПоВиджету.Значение.Используется < ДанныеПоВиджету.Значение.Количество);
			
		КонецЦикла
		
	КонецЕсли;
	
	Для Каждого ДанныеПоВиджету Из СоответствиеИспользованиеВиджетов Цикл
		Элементы[ДанныеПоВиджету.Ключ + "Добавить"].Видимость = ДанныеПоВиджету.Значение.ОтображатьДобавить;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НормализоватьВиджетыРазделы(Виджеты, Разделы)

	Для Каждого ЭлементСпискаВиджеты Из Виджеты Цикл
		
		РазделыВиджета = ТекущиеДелаEDIКлиентСервер.РазделыВиджета(ЭлементСпискаВиджеты.Значение);
		
		ЕстьИспользуемыеРазделы = Ложь;
		
		Для Каждого РазделВиджета Из РазделыВиджета Цикл
			
			Если Разделы.НайтиПоЗначению(РазделВиджета) <> Неопределено Тогда
				
				ЕстьИспользуемыеРазделы = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ЕстьИспользуемыеРазделы Тогда
			Виджеты.Удалить(ЭлементСпискаВиджеты);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область КлиентскаяБиблиотека

#Область ОбновлениеДанныхИзСервиса

&НаКлиенте
Процедура НачатьОбновлениеДанныхИзСервиса()
	
	Заголовок = ЗаголовокОповещенияОбновлениеИзСервиса();
	ТекстСообщения = НСтр("ru = 'Начато обновление итогов ленты событий в сервисе'");
	
	ПоказатьОповещениеПользователя(Заголовок,
	                               , 
	                               ТекстСообщения, 
	                               Неопределено, 
	                               СтатусОповещенияПользователя.Информация);
	
	
	ДлительнаяОперация = РезультатОбновленияДанныхИзСервисаДлительнаяОперация();
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеВыполняется = Истина;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("НавигационнаяСсылка", Неопределено);
	Если ЭтотОбъект.Окно <> Неопределено Тогда
		ДополнительныеПараметры.НавигационнаяСсылка = Окно.ПолучитьНавигационнуюСсылку();
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		ОбновитьДанныеИзСервисаЗавершение(ДлительнаяОперация, ДополнительныеПараметры);
	ИначеЕсли ДлительнаяОперация.Статус = "Выполняется" Тогда
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбновитьДанныеИзСервисаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РезультатОбновленияДанныхИзСервисаДлительнаяОперация() 
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Организации", ОбновлениеДанныхEDI.ОрганизацииПодключенныеКEDI());
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Обновление реестра документов EDI'");
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне("РегистрыСведений.ИтогиПоследнихСобытийEDI.ОбновитьДанныеИзСервиса",
		ПараметрыПроцедуры, ПараметрыВыполнения);
		
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДанныеИзСервисаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновлениеВыполняется = Ложь;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Заголовок = ЗаголовокОповещенияОбновлениеИзСервиса();
	
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
		Возврат;
	КонецЕсли;
	
	Если Не Результат.Статус = "Выполнено" Тогда
		Возврат;
	КонецЕсли;
	
	РезультатВыполнения = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	ШаблонСообщения = НСтр("ru = 'Обновлены итоги ленты событий'");
	КоличествоЗаписей = РезультатВыполнения.КоличествоЗаписей;
	
	Если РезультатВыполнения.Ошибки.Количество() > 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось выполнить все действия. Технические подробности для администратора в журнале регистрации.'");
		КартинкаОповещения = БиблиотекаКартинок.Ошибка32;
		СтатусОповещения   = СтатусОповещенияПользователя.Важное;
	Иначе
		ТекстСообщения     = НСтр("ru = 'Обновлены текущие итоги по ленте событий.'");
		КартинкаОповещения = Неопределено;
		СтатусОповещения   = СтатусОповещенияПользователя.Информация;
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(Заголовок,
	                               ДополнительныеПараметры.НавигационнаяСсылка, 
	                               ТекстСообщения, 
	                               КартинкаОповещения, 
	                               СтатусОповещения);
	
	ДатаПредыдущегоОбновления = ОбщегоНазначенияКлиент.ДатаСеанса();
	Если РезультатВыполнения.КоличествоЗаписей > 0 Тогда
		ОбновитьВиджеты(Ложь);
	КонецЕсли;
	
	
	Если РазделениеВключено Тогда
		ПодключитьОбработчикОжидания("ПроверитьНеобходимостьОбновленияДанныхИзСервиса", 150, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНеобходимостьОбновленияДанныхИзСервиса()

	Если Не РазделениеВключено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбновлениеВыполняется
		И (ОбщегоНазначенияКлиент.ДатаСеанса() > ДатаПредыдущегоОбновления + 300) Тогда
		НачатьОбновлениеДанныхИзСервиса();
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ПроверитьНеобходимостьОбновленияДанныхИзСервиса", 150, Истина);
	
КонецПроцедуры

&НаКлиенте
Функция ЗаголовокОповещенияОбновлениеИзСервиса()
	
	Возврат НСтр("ru = 'Обновление данных из 1C: EDI'");
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти


