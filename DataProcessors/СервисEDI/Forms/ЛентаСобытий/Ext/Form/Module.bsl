
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	ПрочитатьПараметрыОткрытияФормы();
	ЗаполнитьЗначенияПоУмолчанию();
	
	НастроитьФормуПриСоздании();
	
	НачатьПолучениеСпискаСобытий();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьОтображениеФормы();
	
	Если ОрганизацияПодключена Тогда
		ПрочитатьСобытияСервиса();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПредставлениеПериодаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДатаНачала           = Период.ДатаНачала;
	ДатаОкончания        = Период.ДатаОкончания;
	
	Если ВыбранноеЗначение = ИдентификаторНачинаяСДаты() Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Оповещение = Новый ОписаниеОповещения("ПослеВводаДаты", ЭтотОбъект);
		
		ПоказатьВводДаты(Оповещение, ТекущаяДата, НСтр("ru = 'Выберите дату'"), ЧастиДаты.Дата);
		
	ИначеЕсли ВыбранноеЗначение = ИдентификаторСегодня() Тогда
		
		Период.ДатаНачала = НачалоДня(ТекущаяДата);
		Период.ДатаОкончания = КонецДня(ТекущаяДата);
		
	ИначеЕсли ВыбранноеЗначение = ИдентификаторПоследниеТриДня() Тогда
		
		ТроеСуток = 3 * 86400;
		
		Период.ДатаНачала = НачалоДня(ТекущаяДата- ТроеСуток);
		Период.ДатаОкончания = КонецДня(ТекущаяДата);
	
	ИначеЕсли ВыбранноеЗначение = ИдентификаторПоследняяНеделя() Тогда
		
		Неделя = 7 * 86400;
		
		Период.ДатаНачала = НачалоДня(ТекущаяДата - Неделя);
		Период.ДатаОкончания = КонецДня(ТекущаяДата);
	
	КонецЕсли;
	
	ОбновитьОтображениеФормы();
	
	Если Не ДатаНачала = Период.ДатаНачала Или Не ДатаОкончания = Период.ДатаОкончания Тогда
		ПолучитьЛентуСобытий();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборМенеджерПриИзменении(Элемент)
	
	ОтборМенеджерПриИзмененииНаСервере();
	ПолучитьЛентуСобытий();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаОчистка(Элемент, СтандартнаяОбработка)
	
	Период.ДатаНачала    = Дата(1,1,1);
	Период.ДатаОкончания = Дата(1,1,1);
	
	ПолучитьЛентуСобытий();
	
	ОбновитьОтображениеФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Список.Очистить();
	
	ОрганизацияПриИзмененииНаСервере();
	
	ПолучитьЛентуСобытий();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЗагрузитьЕщеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПолучитьЛентуСобытий(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ПрикладнойОбъект) Тогда
		
		ПоказатьЗначение(, ТекущиеДанные.ПрикладнойОбъект);
		
	Иначе
		
		ПараметрыОткрытияФормы = ДокументыEDIКлиент.НовыйПараметрыОткрытияФормыДокументаСервиса(ЭтотОбъект);
		ПараметрыОткрытияФормы.ТипДокумента           = ТекущиеДанные.ТипДокумента;
		ПараметрыОткрытияФормы.ИдентификаторВСервисе  = ТекущиеДанные.ИдентификаторДокумента;
		ПараметрыОткрытияФормы.Организация            = ТекущиеДанные.Организация;
		
		ДокументыEDIКлиент.ОткрытьФормуДокументаСервиса(ПараметрыОткрытияФормы);
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		ОрганизацияТекущейСтроки            = Неопределено;
		ТипДокументаТекущейСтроки           = Неопределено;
		ИдентификаторДокументаТекущейСтроки = Неопределено;
		
	Иначе
		
		ОрганизацияТекущейСтроки            = ТекущиеДанные.Организация;
		ТипДокументаТекущейСтроки           = ТекущиеДанные.ТипДокумента;
		ИдентификаторДокументаТекущейСтроки = ТекущиеДанные.ИдентификаторДокумента;
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	
	Если ПредставлениеПериода = "Сегодня" Тогда
		
	КонецЕсли;
	
	Диалог.Период = Период;

	Оповещение = Новый ОписаниеОповещения("ПослеВыбораПериода", ЭтотОбъект);
	
	Диалог.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоДокументу(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ОтборПоДокументу = ТекущиеДанные.ИдентификаторДокумента;
	
	ПолучитьЛентуСобытий();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОтборПоДокументу(Команда)
	
	ОтборПоДокументу = "";
	
	ПолучитьЛентуСобытий();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписок(Команда)
	
	ПолучитьЛентуСобытий();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПолучениеСобытий

&НаКлиенте
Процедура ПолучитьЛентуСобытий(ЗапросПервойСтраницыДанных = Истина)
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОрганизацияПодключена Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Организация", Организация);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеРегистрацииОрганизации", ЭтотОбъект, ДополнительныеПараметры);
		
		БизнесСетьСлужебныйКлиент.ОткрытьФормуПодключенияОрганизации(Организация, ЭтотОбъект, ОписаниеОповещения);
		
		Возврат;
	КонецЕсли;
	
	ПрочитатьСобытияСервиса(ЗапросПервойСтраницыДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеРегистрацииОрганизации(РезультатРегистрации, ДополнительныеПараметры) Экспорт
	
	Если РезультатРегистрации = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОрганизацияПодключена = Не ПустаяСтрока(РезультатРегистрации.Идентификатор);
	
	Если Не ОрганизацияПодключена Тогда
		Возврат;
	КонецЕсли;
	
	ПрочитатьСобытияСервиса();

КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьСобытияСервиса(ЗапросПервойСтраницыДанных = Истина)
	
	Если ЗапросПервойСтраницыДанных Тогда
		Курсор = "";
		Список.Очистить();
	КонецЕсли;
	
	Если ДлительнаяОперация = Неопределено
		ИЛИ ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		ДлительнаяОперация = ДлительнаяОперацияПолучитьЛентуСобытий();
	КонецЕсли;
	
	ПараметрыОжидания                                 = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения                  = НСтр("ru = 'Получение списка событий EDI'");
	ПараметрыОжидания.ВыводитьОкноОжидания            = Ложь;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ПараметрыОжидания.ВыводитьСообщения               = Истина;
	
	Оповещение = Новый ОписаниеОповещения("ПолучитьЛентуСобытийЗавершение", ЭтотОбъект);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыЗапросаСпискаСобытий(ПараметрыПоиска)
	
	ПараметрыПоиска.ПоложениеКурсора = Курсор;
	ПараметрыПоиска.Организация      = Организация;
	
	Если ЗначениеЗаполнено(Менеджер) Тогда
		ПараметрыПоиска.Менеджер = Менеджер;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НаправлениеСобытий) Тогда
		ПараметрыПоиска.НаправлениеСобытия = НаправлениеСобытий;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Период.ДатаНачала) Тогда
		ПараметрыПоиска.НачалоПериода = Период.ДатаНачала;
	КонецЕсли;
	
	Если КатегорияДокументов = Перечисления.КатегорииДокументовEDI.Закупка Тогда
		ПараметрыПоиска.ТипыДокументов.Добавить(Перечисления.ТипыДокументовEDI.ЗаказПоставщику);
	ИначеЕсли КатегорияДокументов = Перечисления.КатегорииДокументовEDI.Продажа Тогда
		ПараметрыПоиска.ТипыДокументов.Добавить(Перечисления.ТипыДокументовEDI.ЗаказКлиента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Период.ДатаОкончания) Тогда
		ПараметрыПоиска.КонецПериода  = Период.ДатаОкончания;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборПоДокументу) Тогда
		ПараметрыПоиска.ИдентификаторВСервисе = ОтборПоДокументу;
	КонецЕсли;
	
	ПараметрыПоиска.ВозрастающаяСортировка      = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьЛентуСобытийЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДлительнаяОперация = Неопределено;
	
	НастроитьФормуДляДлительнойОперации(Ложь, Не ЗначениеЗаполнено(Курсор));
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьЛентуСобытийЗавершениеНаСервере(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьЛентуСобытийЗавершениеНаСервере(Результат)
	
	Если Результат = Неопределено Или Не Результат.Статус = "Выполнено" Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСервиса = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	Если ДанныеСервиса.Ошибка Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСписокСобытийПоДаннымСервиса(ДанныеСервиса.Данные.Список);
	
	Курсор = ДанныеСервиса.Данные.Страницы.СледующаяСтраница;
	
	ИзменитьВидимостьКомандыЗагрузкиСобытий(Не ПустаяСтрока(Курсор));
	
КонецПроцедуры

&НаСервере
Процедура НачатьПолучениеСпискаСобытий()
	
	Если Не ЗначениеЗаполнено(Организация) Или Не ОрганизацияПодключена Тогда
		Возврат;
	КонецЕсли;
	
	ДлительнаяОперация = ДлительнаяОперацияПолучитьЛентуСобытий();
	
	Если ДлительнаяОперация <> Неопределено
		И ДлительнаяОперация.Статус = "Выполняется" Тогда
		
		Элементы.ГруппаСобытия.ТекущаяСтраница = Элементы.СтраницаДлительнаяОперация;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ДлительнаяОперацияПолучитьЛентуСобытий()
	
	НастроитьФормуДляДлительнойОперации(Истина, Не ЗначениеЗаполнено(Курсор));
	
	ПараметрыПоиска = ИнтеграцияССервисомEDIСлужебный.НовыйПараметрыПолученияЛентыСобытийПоОрганизации();
	
	ЗаполнитьПараметрыЗапросаСпискаСобытий(ПараметрыПоиска);
	
	ПараметрыВыполнения                             = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Загрузка списка событий EDI'");
	ПараметрыВыполнения.ОжидатьЗавершение           = 0;
	ПараметрыВыполнения.ЗапуститьВФоне              = Истина;
	
	ИмяПроцедуры = "ИнтеграцияССервисомEDIСлужебный.ЛентаСобытийПоОрганизации";
	
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, ИмяПроцедуры, ПараметрыПоиска);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокСобытийПоДаннымСервиса(ДанныеСервиса)
	
	Для каждого ЭлементКоллекции Из ДанныеСервиса Цикл
		
		НоваяСтрока = Список.Добавить();
		
		НоваяСтрока.ИдентификаторДокумента     = ЭлементКоллекции.Документ.ИдентификаторВСервисе;
		НоваяСтрока.ТипДокумента               = ЭлементКоллекции.Документ.ТипДокумента;
		НоваяСтрока.Контрагент                 = ЭлементКоллекции.КонтрагентПредставление;
		НоваяСтрока.Менеджер                   = ЭлементКоллекции.Документ.Менеджер;
		НоваяСтрока.НаправлениеСобытия         = ЭлементКоллекции.НаправлениеДействия;
		НоваяСтрока.Номер                      = ЭлементКоллекции.Документ.Номер;
		НоваяСтрока.Организация                = ЭлементКоллекции.Организация;
		НоваяСтрока.Период                     = ЭлементКоллекции.Дата;
		НоваяСтрока.ПредставлениеСобытия       = ЭлементКоллекции.ПредставлениеСобытия;
		НоваяСтрока.СторонаВыполнившаяДействие = ЭлементКоллекции.СторонаВыполнившаяДействие;
		НоваяСтрока.Сумма                      = ЭлементКоллекции.Документ.Сумма;
		НоваяСтрока.ТекстСообщения             = ЭлементКоллекции.ПредставлениеСобытия;
		НоваяСтрока.ТекущийСтатус              = ЭлементКоллекции.ТекущийСтатус;
		НоваяСтрока.ТипСобытия                 = ЭлементКоллекции.ТипСобытия;
		НоваяСтрока.ПрикладнойОбъект           = ЭлементКоллекции.Документ.ПрикладнойОбъект;
		
		НоваяСтрока.ПредставлениеДокумента     = СтрШаблон(НСтр("ru = '""№ %1 на сумму %2 %3""'"), ЭлементКоллекции.Документ.Номер, ЭлементКоллекции.Документ.Сумма, 
			ЭлементКоллекции.Документ.Валюта);
		
		Если НоваяСтрока.НаправлениеСобытия = Перечисления.НаправленияСобытийEDI.Входящее Тогда
			НоваяСтрока.КартинкаНаправления = 2;
			НоваяСтрока.ПредставлениеОрганизации = СтрШаблон("Для %1", ЭлементКоллекции.Организация);
			НоваяСтрока.АвторАдресат = НРег(Строка(НоваяСтрока.СторонаВыполнившаяДействие));
		ИначеЕсли НоваяСтрока.НаправлениеСобытия = Перечисления.НаправленияСобытийEDI.Исходящее Тогда	
			НоваяСтрока.КартинкаНаправления = 1;
			НоваяСтрока.ПредставлениеОрганизации = ЭлементКоллекции.Организация;
			
			Если НоваяСтрока.СторонаВыполнившаяДействие = Перечисления.СтороныУчастникиСервисаEDI.Поставщик Тогда
				НоваяСтрока.АвторАдресат = НСтр("ru = 'для покупателя'");
			ИначеЕсли НоваяСтрока.СторонаВыполнившаяДействие = Перечисления.СтороныУчастникиСервисаEDI.Покупатель Тогда
				НоваяСтрока.АвторАдресат = НСтр("ru = 'для поставщика'");
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НоваяСтрока.ПрикладнойОбъект) Тогда
			НоваяСтрока.КартинкаСостоянияДокумента = 0;
		Иначе
			НоваяСтрока.КартинкаСостоянияДокумента = 4;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЛокализованныеЗначения

&НаКлиентеНаСервереБезКонтекста
Функция ИдентификаторСегодня()
	Возврат "Сегодня";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИдентификаторПоследниеТриДня()
	Возврат "ПоследниеТриДня";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИдентификаторПоследняяНеделя()
	Возврат "ПоследняяНеделя";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИдентификаторНачинаяСДаты()
	Возврат "НачинаяСДаты";
КонецФункции

#КонецОбласти

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	// Цвет текста сообщения
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокПредставлениеСобытия.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Список.ТипСобытия");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыСобытийEDI.Сообщение;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаСообщениеEDI);
	
	// Формат и цвет времени
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокВремя.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Список.Период");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Заполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаВремяEDI);
	Элемент.Оформление.УстановитьЗначениеПараметра("Формат", Формат("ДФ=ЧЧ:мм"));
	
	
	// Цвет фона сообщений одного документа
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Список.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Список.Организация");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ОрганизацияТекущейСтроки");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Список.ТипДокумента");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ТипДокументаТекущейСтроки");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Список.ИдентификаторДокумента");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ИдентификаторДокументаТекущейСтроки");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветФонаТекущийДокументEDI);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораПериода(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Период = Результат;
	
	ПолучитьЛентуСобытий();
	
	ОбновитьОтображениеФормы();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПриСоздании()
		
	Элементы.ПредставлениеПериода.СписокВыбора.Добавить(ИдентификаторСегодня()        , НСтр("ru = 'За сегодня'"));
	Элементы.ПредставлениеПериода.СписокВыбора.Добавить(ИдентификаторПоследниеТриДня(), НСтр("ru = 'За последние три дня'"));
	Элементы.ПредставлениеПериода.СписокВыбора.Добавить(ИдентификаторПоследняяНеделя(), НСтр("ru = 'За последнюю неделю'"));
	Элементы.ПредставлениеПериода.СписокВыбора.Добавить(ИдентификаторНачинаяСДаты()   , НСтр("ru = 'Начиная с даты...'"));
	Элементы.НадписьЗагрузитьЕще.Видимость                   = Ложь;
	Элементы.КартинкаДлительнаяОперация.Видимость            = Ложь;
	Элементы.СписокКонтекстноеМенюОтборПоДокументу.Видимость = Ложь;
	
	Если Не КатегорияДокументов.Пустая() Тогда
		КлючНазначенияИспользования = ОбщегоНазначения.ИмяЗначенияПеречисления(КатегорияДокументов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОтборДокументовОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокЗначений = Новый СписокЗначений;
	
	ЭтоОтборПоСобытиям = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "События" Тогда

		СписокЗначений.Добавить(ПредопределенноеЗначение("Перечисление.НаправленияСобытийEDI.ПустаяСсылка"), НСтр("ru = 'Все события'"));
		СписокЗначений.Добавить(ПредопределенноеЗначение("Перечисление.НаправленияСобытийEDI.Исходящее"),    НСтр("ru = 'Исходящие события'"));
		СписокЗначений.Добавить(ПредопределенноеЗначение("Перечисление.НаправленияСобытийEDI.Входящее"),     НСтр("ru = 'Входящие события'"));
		
		ЭтоОтборПоСобытиям = Истина;

	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "Документы" Тогда

		СписокЗначений.Добавить(ПредопределенноеЗначение("Перечисление.КатегорииДокументовEDI.ПустаяСсылка"), НСтр("ru = 'всем документам'"));
		СписокЗначений.Добавить(ПредопределенноеЗначение("Перечисление.КатегорииДокументовEDI.Закупка"),      НСтр("ru = 'документам закупки'"));
		СписокЗначений.Добавить(ПредопределенноеЗначение("Перечисление.КатегорииДокументовEDI.Продажа"),      НСтр("ru = 'документам продажи'"));
		
		ЭтоОтборПоСобытиям = Ложь;
		
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыбораИзМеню", 
		ЭтотОбъект, Новый Структура("ЭтоОтборПоСобытиям", ЭтоОтборПоСобытиям));
	
	ПоказатьВыборИзМеню(Оповещение, СписокЗначений, Элемент);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораИзМеню(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЭтоОтборПоСобытиям Тогда
		НаправлениеСобытий = Результат.Значение;
	Иначе
		КатегорияДокументов = Результат.Значение;
	КонецЕсли;
		
	НастроитьОтборИОтображениеКолонок();
	
	ПолучитьЛентуСобытий();
	
	ОбновитьОтображениеФормы();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОтборИОтображениеКолонок()
		
	// Отбор по направлению событий
	
	Если НаправлениеСобытий = Перечисления.НаправленияСобытийEDI.Исходящее Тогда
		Элементы.СписокСторонаВыполнившаяДействие.Заголовок = НСтр("ru = 'Кому'");
	ИначеЕсли НаправлениеСобытий = Перечисления.НаправленияСобытийEDI.Входящее Тогда
		Элементы.СписокСторонаВыполнившаяДействие.Заголовок = НСтр("ru = 'Кто'");
	Иначе	
		Элементы.СписокСторонаВыполнившаяДействие.Заголовок = НСтр("ru = 'Кто / Кому'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаДаты(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Период.ДатаНачала = Результат;
	Период.ДатаОкончания = ТекущаяДата;
	
	ОбновитьОтображениеФормы();
	ПолучитьЛентуСобытий();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьВидимостьКомандыЗагрузкиСобытий(ВидимостьЭлемента)
	
	Элементы.НадписьЗагрузитьЕще.Видимость = ВидимостьЭлемента;
		
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуДляДлительнойОперации(ЭтоНачалоДлительнойОперации, ЭтоЗапросПервойСтраницы)
	
	Если ЭтоЗапросПервойСтраницы Тогда
		
		Если ЭтоНачалоДлительнойОперации  Тогда
			Элементы.ГруппаСобытия.ТекущаяСтраница = Элементы.СтраницаДлительнаяОперация;
		Иначе
			Элементы.ГруппаСобытия.ТекущаяСтраница = Элементы.СтраницаТаблицаСобытий;
		КонецЕсли;
		
	Иначе
		Элементы.КартинкаДлительнаяОперация.Видимость = ЭтоНачалоДлительнойОперации;
	КонецЕсли;
	
	Элементы.ГруппаШапкаФормы.Доступность = Не ЭтоНачалоДлительнойОперации;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииЯчейки(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
		"СписокКонтекстноеМенюОтменитьОтборПоДокументу", "Доступность", Не ПустаяСтрока(ОтборПоДокументу));
	
	Если Элементы.Список.ТекущийЭлемент = Элементы.СписокПредставлениеДокумента Тогда
		
		ТекущиеДанные = Элементы.Список.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли; 
		
		Элементы.СписокКонтекстноеМенюОтборПоДокументу.Видимость = Истина;
		Элементы.СписокКонтекстноеМенюОтборПоДокументу.Заголовок = СтрШаблон(
			НСтр("ru = 'Показать события по документу %1'"), 
			ТекущиеДанные.ПредставлениеДокумента);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
			"СписокКонтекстноеМенюОтменитьОтборПоДокументу", "Видимость", Истина)

	Иначе
		Элементы.СписокКонтекстноеМенюОтборПоДокументу.Видимость = Ложь;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
			"СписокКонтекстноеМенюОтменитьОтборПоДокументу", "Видимость", Ложь)
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьПараметрыОткрытияФормы()
	
	Параметры.Свойство("КатегорияДокументов", КатегорияДокументов);
	Параметры.Свойство("Менеджер"           , Менеджер);
	Параметры.Свойство("НаправлениеСобытий" , НаправлениеСобытий);
	Параметры.Свойство("Организация"        , Организация);
	Параметры.Свойство("Период"             , Период);
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображениеФормы()
	
	Если ПериодыИдентичны(Период, ПолучитьПериод(0, ТекущаяДата)) Тогда
		ПредставлениеПериода = НСтр("ru = 'За сегодня'");
	ИначеЕсли ПериодыИдентичны(Период, ПолучитьПериод(3, ТекущаяДата)) Тогда
		ПредставлениеПериода = НСтр("ru = 'За последние три дня'");
	ИначеЕсли ПериодыИдентичны(Период, ПолучитьПериод(7, ТекущаяДата)) Тогда
		ПредставлениеПериода = НСтр("ru = 'За последнюю неделю'");
	ИначеЕсли Период.ДатаНачала = '00010101' И Период.ДатаОкончания = КонецДня(ТекущаяДата) Тогда
		ПредставлениеПериода = СтрШаблон(НСтр("ru = 'Начиная с %1'"), Формат(Период.ДатаНачала, "ДЛФ=D;"));
	Иначе
		ПредставлениеПериода = ПредставлениеПериода(Период.ДатаНачала, Период.ДатаОкончания);
	КонецЕсли;
	
	Отборы = Новый Соответствие;
	
	Отборы.Вставить(ПредопределенноеЗначение("Перечисление.НаправленияСобытийEDI.ПустаяСсылка"),  НСтр("ru = 'Все события'"));
	Отборы.Вставить(ПредопределенноеЗначение("Перечисление.НаправленияСобытийEDI.Исходящее"),     НСтр("ru = 'Исходящие события'"));
	Отборы.Вставить(ПредопределенноеЗначение("Перечисление.НаправленияСобытийEDI.Входящее"),      НСтр("ru = 'Входящие события'"));

	Отборы.Вставить(ПредопределенноеЗначение("Перечисление.КатегорииДокументовEDI.ПустаяСсылка"), НСтр("ru = 'всем документам'"));
	Отборы.Вставить(ПредопределенноеЗначение("Перечисление.КатегорииДокументовEDI.Закупка"),      НСтр("ru = 'документам закупки'"));
	Отборы.Вставить(ПредопределенноеЗначение("Перечисление.КатегорииДокументовEDI.Продажа"),      НСтр("ru = 'документам продажи'"));
	
	Элементы.ДекорацияОтборДокументов.Заголовок = 
		СтроковыеФункцииКлиент.ФорматированнаяСтрока(
			НСтр("ru = '<a href = ""События"">%1</a> по <a href = ""Документы"">%2</a>'"),
			Отборы[НаправлениеСобытий], Отборы[КатегорияДокументов]);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПериод(КоличествоДней, ТекущаяДата)
	
	Период = Новый СтандартныйПериод;
	Период.ДатаНачала = НачалоДня(ТекущаяДата - (КоличествоДней * 86400));
	Период.ДатаОкончания = КонецДня(ТекущаяДата);
	
	Возврат Период;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПериодыИдентичны(Период1, Период2)
	
	Возврат Период1.ДатаНачала = Период2.ДатаНачала
		И Период1.ДатаОкончания = Период2.ДатаОкончания;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОрганизацияПодключена(Организация)
	
	Возврат БизнесСеть.ОрганизацияПодключена(Организация)
		И Не БизнесСеть.ТребуетсяПовторноеПодключениеОрганизации(Организация);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьЗначенияПоУмолчанию()
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Организация = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("СервисEDI",
			"ЛентаСобытий\Организация");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация) Или Не ОрганизацияПодключена(Организация) Тогда
		Организация = ОрганизацияПоУмолчанию();
	КонецЕсли;
	
	ОрганизацияПодключена = ОрганизацияПодключена(Организация);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОрганизацияПоУмолчанию()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ОрганизацииБизнесСеть.Организация КАК Организация
	               |ИЗ
	               |	РегистрСведений.ОрганизацииБизнесСеть КАК ОрганизацииБизнесСеть";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	ВыборкаЗапроса.Следующий();
	
	Возврат ВыборкаЗапроса.Организация;
	
КонецФункции

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ОрганизацияПодключена = ОрганизацияПодключена(Организация);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("СервисEDI",
		"ЛентаСобытий\Организация", Организация);
	
КонецПроцедуры

&НаСервере
Процедура ОтборМенеджерПриИзмененииНаСервере()
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("СервисEDI",
		"ЛентаСобытий\Менеджер", Менеджер);
	
КонецПроцедуры

#КонецОбласти
