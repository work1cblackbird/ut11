
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИнициализироватьДанныеФормы();
	
	УстановитьУсловноеОформление();
	
	УстановитьОтборыФормы();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	ДокументыEDIКлиентСервер.ОтборПоЗначениюСпискаПередЗагрузкойИзНастроек(Список,
	                                                                           "Менеджер",
	                                                                           Менеджер,
	                                                                           СтруктураБыстрогоОтбора, 
	                                                                           Настройки);
	
	ДокументыEDIКлиентСервер.ОтборПоЗначениюСпискаПередЗагрузкойИзНастроек(Список,
	                                                                           "Организация",
	                                                                           Организация,
	                                                                           СтруктураБыстрогоОтбора, 
	                                                                           Настройки);
	
	Если Не Параметры.Свойство("СтруктураБыстрогоОтбора")
		Или Параметры.СтруктураБыстрогоОтбора = Неопределено Тогда
		
		ПоказатьСкрытые = Настройки.Получить("ПоказатьСкрытые");
		Если ПоказатьСкрытые <> Неопределено Тогда
			УстановитьОтборПоказатьСкрытые();
		КонецЕсли;
		
	КонецЕсли;
	
	ОтборПоказатьСкрытыеУстановлен = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ОтборПоказатьСкрытыеУстановлен Тогда
		ПоказатьСкрытые = Ложь;
		УстановитьОтборПоказатьСкрытые();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПоказатьСкрытыеПриИзменении(Элемент)
	
	УстановитьОтборПоказатьСкрытые();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ПриИзмененииОтбораПоОрганизацииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура МенеджерПриИзменении(Элемент)
	
	ПриИзмененииОтбораПоМенеджеруСервер();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ПрикладнойОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, ТекущиеДанные.ПрикладнойОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НеПредлагать(Команда)
	
	Если Элементы.Список.ВыделенныеСтроки.Количество() = 0 Тогда
		 ПоказатьПредупреждение(, НСтр("ru = 'Команда не может быть выполнена для указанного объекта.'"));
		 Возврат;
	КонецЕсли;
	
	Если НеПоказыватьПояснениеПроСкрытые Тогда
		
		СкрытьВыделенныеСтроки();
		
	Иначе
		
		ОповещениеОЗакрытииПояснения = Новый ОписаниеОповещения("ПояснениеСкрытиеСтрокЗавершение", ЭтотОбъект);
		ОткрытьФорму("Обработка.СервисEDI.Форма.ВопросПередСкрытиемДокументовКОтправке",, ЭтотОбъект, ,,
		             ,ОповещениеОЗакрытииПояснения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)
	
	ОчиститьСообщения();
	
	ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Команда не может быть выполнена для указанного объекта.'"));
		Возврат;
	КонецЕсли;
	
	ВыбранныеДокументы = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		ДанныеСтроки = Элементы.Список.ДанныеСтроки(ВыделеннаяСтрока);
		ВыбранныеДокументы.Добавить(ДанныеСтроки.ПрикладнойОбъект);
	КонецЦикла;
	
	РезультатПодготовки = РезультатПодготовкиОтправкиПрикладныхДокументов(ВыбранныеДокументы);
	
	Если РезультатПодготовки.НеотправляемыеДокументы.Количество() > 0 Тогда
		
		Для Каждого ДанныеНеотправляемогоДокумента Из РезультатПодготовки.НеотправляемыеДокументы Цикл
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Документ %1 не отправлен. %2.'"), 
			                                                                         ДанныеНеотправляемогоДокумента.Документ, 
			                                                                         ДанныеНеотправляемогоДокумента.Причина);
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, ДанныеНеотправляемогоДокумента.Документ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если РезультатПодготовки.ОбновитьСписок Тогда
		Элементы.Список.Обновить();
	КонецЕсли;
	
	Если РезультатПодготовки.ОтправляемыеДокументы.Количество() > 0 Тогда
		
		ЗаголовокОповещения = НСтр("ru = 'Сервис 1C:EDI'");
		ТекстОповещения = НСтр("ru = 'Начата отправка документов в сервис 1С:EDI'");
		
		ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ТекстОповещения);
		
		Отказ = Ложь;
		Ошибки = "";
		ЗапланироватьОтправкуВСервис(РезультатПодготовки.ОтправляемыеДокументы, Отказ, Ошибки);
		
		Если Не Отказ Тогда
			
			Для Каждого ДанныеОтправляемогоДокумента Из РезультатПодготовки.ОтправляемыеДокументы Цикл
				НоваяСтрока = ОтправляемыеДокументы.Добавить();
				НоваяСтрока.ПрикладнойОбъект       = ДанныеОтправляемогоДокумента.Документ;
				НоваяСтрока.ПредставлениеСостояния = НСтр("ru = 'Документ уже отправляется в сервис 1С EDI'");
				НоваяСтрока.СостояниеОтправки      = ПредопределенноеЗначение("Перечисление.СостоянияСинхронизацииДокументовEDI.Выполняется");
			КонецЦикла;
			
			ПодключитьОбработчикОжидания("ПриОжиданииРезультатовОтправки", 2, Истина);
			ИнтервалОжидания = 2;
			
		Иначе
			
			ЗаголовокОповещения = НСтр("ru = 'Сервис 1C:EDI'");
			ТекстОповещения = НСтр("ru = 'Отправка документов в сервис 1С:EDI завершена неудачно.'");
		
			ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ТекстОповещения);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Выделение цветом исключенные заказы
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Выделение цветом исключенные заказы.'");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Список.НеПредлагатьКОтправке");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОформляемоеПоле = Элемент.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Список");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЭДЦвет);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьДанныеФормы()

	НеПоказыватьПояснениеПроСкрытые = 
		ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить("СервисEDI.ВопросПередСкрытиемДокументовКОтправке", "НеПоказывать", Ложь);

КонецПроцедуры

&НаСервере
Процедура СкрытьВыделенныеСтроки()
	
	МассивПрикладныхОбъектов = Новый Массив;
	
	Для Каждого ВыделеннаяСтрока Из Элементы.Список.ВыделенныеСтроки Цикл
		
		МассивПрикладныхОбъектов.Добавить(ВыделеннаяСтрока.ПрикладнойОбъект);
		
	КонецЦикла;
	
	Если МассивПрикладныхОбъектов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.НеОтправленныеПрикладныеОбъектыEDI.УстановитьПризнакНеПредлагатьКОтправкеДляМассива(МассивПрикладныхОбъектов);
	
	Элементы.Список.Обновить();

КонецПроцедуры

&НаКлиенте
Процедура ПояснениеСкрытиеСтрокЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.ОК Тогда
		
		СкрытьВыделенныеСтроки();
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьОтборыФормы()
	
	СтруктураБыстрогоОтбора = Неопределено;
	Параметры.Свойство("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	
	Если СтруктураБыстрогоОтбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДокументыEDIКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(Список,
	                                                                       "Менеджер",
	                                                                       Менеджер,
	                                                                       СтруктураБыстрогоОтбора);
	
	ДокументыEDIКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(Список,
	                                                                       "Организация",
	                                                                       Организация,
	                                                                       СтруктураБыстрогоОтбора);
	
	Если СтруктураБыстрогоОтбора.Свойство("ПоказатьСкрытые") Тогда
		ПоказатьСкрытые = СтруктураБыстрогоОтбора.ПоказатьСкрытые;
		УстановитьОтборПоказатьСкрытые();
	КонецЕсли;
	
	ОтборПоказатьСкрытыеУстановлен = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоказатьСкрытые()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "НеПредлагатьКОтправке", Ложь, 
	                                                                        ВидСравненияКомпоновкиДанных.Равно,, Не ПоказатьСкрытые);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОтбораПоМенеджеруСервер()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,
	                                                                        "Менеджер",
	                                                                        Менеджер,
	                                                                        ВидСравненияКомпоновкиДанных.Равно,
	                                                                        ,
	                                                                        ЗначениеЗаполнено(Менеджер));
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОтбораПоОрганизацииСервер()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,
	                                                                        "Организация",
	                                                                        Организация,
	                                                                        ВидСравненияКомпоновкиДанных.Равно,
	                                                                        ,
	                                                                        ЗначениеЗаполнено(Организация));
	
КонецПроцедуры

&НаСервере
Функция РезультатПодготовкиОтправкиПрикладныхДокументов(ВыбранныеДокументы)

	Результат = Новый Структура;
	Результат.Вставить("КоличествоВыбранных",     ВыбранныеДокументы.Количество());
	Результат.Вставить("КоличествоКОтправке",     0);
	Результат.Вставить("НеотправляемыеДокументы", Новый Массив);
	Результат.Вставить("ОтправляемыеДокументы",   Новый Массив);
	Результат.Вставить("ОбновитьСписок",          Ложь);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	УжеОтправляемыеДокументы.ПрикладнойОбъект       КАК ПрикладнойОбъект,
	|	УжеОтправляемыеДокументы.ПредставлениеСостояния КАК ПредставлениеСостояния
	|ПОМЕСТИТЬ УжеОтправляемыеОбъекты
	|ИЗ
	|	&УжеОтправляемыеДокументы КАК УжеОтправляемыеДокументы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НеОтправленныеПрикладныеОбъектыEDI.ПрикладнойОбъект                                                                                                   КАК ПрикладнойОбъект,
	|	НеОтправленныеПрикладныеОбъектыEDI.Организация                                                                                                        КАК Организация,
	|	НеОтправленныеПрикладныеОбъектыEDI.Контрагент                                                                                                         КАК Контрагент,
	|	НеОтправленныеПрикладныеОбъектыEDI.Менеджер                                                                                                           КАК Менеджер,
	|	ЕСТЬNULL(СостоянияДокументовEDI.ИдентификаторВСервисе, """")                                                                                          КАК ИдентификаторВСервисе,
	|	ЕСТЬNULL(УжеОтправляемыеОбъекты.ПредставлениеСостояния, """")                                                                                         КАК ПредставлениеСостояния,
	|	ЕСТЬNULL(ВариантыУказанияНоменклатурыВДокументахБЭД.ВариантУказанияНоменклатуры, ЗНАЧЕНИЕ(Перечисление.ВариантыУказанияНоменклатурыБЭД.ПустаяСсылка)) КАК ВариантУказанияНоменклатуры
	|ИЗ
	|	РегистрСведений.НеОтправленныеПрикладныеОбъектыEDI КАК НеОтправленныеПрикладныеОбъектыEDI
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовEDI КАК СостоянияДокументовEDI
	|		ПО НеОтправленныеПрикладныеОбъектыEDI.ПрикладнойОбъект = СостоянияДокументовEDI.ПрикладнойОбъект
	|		ЛЕВОЕ СОЕДИНЕНИЕ УжеОтправляемыеОбъекты КАК УжеОтправляемыеОбъекты
	|		ПО НеОтправленныеПрикладныеОбъектыEDI.ПрикладнойОбъект = УжеОтправляемыеОбъекты.ПрикладнойОбъект
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВариантыУказанияНоменклатурыВДокументахБЭД КАК ВариантыУказанияНоменклатурыВДокументахБЭД
	|		ПО НеОтправленныеПрикладныеОбъектыEDI.ПрикладнойОбъект = ВариантыУказанияНоменклатурыВДокументахБЭД.ДокументСопоставления
	|ГДЕ
	|	НеОтправленныеПрикладныеОбъектыEDI.ПрикладнойОбъект В (&ВыбранныеДокументы)";
	
	Запрос.УстановитьПараметр("ВыбранныеДокументы",       ВыбранныеДокументы);
	Запрос.УстановитьПараметр("УжеОтправляемыеДокументы", ОтправляемыеДокументы.Выгрузить());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Не ПустаяСтрока(Выборка.ИдентификаторВСервисе) Тогда
			
			ДанныеДокумента = ДанныеНеотправляемогоДокумента();
			ДанныеДокумента.Документ = Выборка.ПрикладнойОбъект;
			ДанныеДокумента.Причина  = НСтр("ru = 'Документ уже передан в сервис 1С: EDI'");
			
			Результат.НеотправляемыеДокументы.Добавить(ДанныеДокумента);
			
			РегистрыСведений.НеОтправленныеПрикладныеОбъектыEDI.УдалитьЗапись(Выборка.ПрикладнойОбъект);
			Результат.ОбновитьСписок = Истина;
			
			Продолжить;
			
		КонецЕсли;
		
		Если Не ПустаяСтрока(Выборка.ПредставлениеСостояния) Тогда
			
			ДанныеДокумента = ДанныеНеотправляемогоДокумента();
			ДанныеДокумента.Документ = Выборка.ПрикладнойОбъект;
			ДанныеДокумента.Причина  = Выборка.ПредставлениеСостояния;
			
			Результат.НеотправляемыеДокументы.Добавить(ДанныеДокумента);
			
			Продолжить;
			
		КонецЕсли;
		
		ДанныеДокумента = РаботаСДаннымиEDIСлужебныйКлиентСервер.НовыйДанныеДокумента();
		ДанныеДокумента.Организация = Выборка.Организация;
		ДанныеДокумента.Контрагент  = Выборка.Контрагент;
		ДанныеДокумента.Документ    = Выборка.ПрикладнойОбъект;
		Если ЗначениеЗаполнено(Выборка.ВариантУказанияНоменклатуры) Тогда
			ДанныеДокумента.ВариантУказанияНоменклатуры = Выборка.ВариантУказанияНоменклатуры;
		Иначе
			ДанныеДокумента.ВариантУказанияНоменклатуры = ВариантУказанияНоменклатурыПоставщикаПоУмолчанию(Выборка.Организация, 
			                                                                                               Выборка.Контрагент);
		КонецЕсли;
			
		Результат.ОтправляемыеДокументы.Добавить(ДанныеДокумента);
		
		Результат.КоличествоКОтправке = Результат.КоличествоКОтправке + 1;
	
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

&НаСервере
Функция ДанныеНеотправляемогоДокумента()
	
	Данные = Новый Структура;
	Данные.Вставить("Документ");
	Данные.Вставить("Причина");
	
	Возврат Данные;
	
КонецФункции

&НаСервере
Функция ВариантУказанияНоменклатурыПоставщикаПоУмолчанию(Организация, Поставщик)
	
	НастройкиКонтрагента = РегистрыСведений.НастройкиПоставщикаEDI.НастройкаКонтрагентаЛокально(Организация, Поставщик);
	
	Если НастройкиКонтрагента.ЗначениеНастройки = Перечисления.РежимыРаботыСЗаказамиКлиентаEDI.ПриниматьВТерминахПоставщикаИПокупателя Тогда
		Возврат Перечисления.ВариантыУказанияНоменклатурыБЭД.НашаНоменклатура;
	Иначе
		Возврат Перечисления.ВариантыУказанияНоменклатурыБЭД.НоменклатураКонтрагента;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗапланироватьОтправкуВСервис(ОтправляемыеДокументы, Отказ, Ошибки)

	РаботаСДаннымиEDIСлужебный.ЗапланироватьОтправкуВСервис(ОтправляемыеДокументы, Отказ, Ошибки);

КонецПроцедуры

&НаКлиенте
Процедура ПриОжиданииРезультатовОтправки()
	
	Если ОтправляемыеДокументы.Количество()= 0 Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоОтправленных = 0;
	КоличествоОшибка       = 0;
	КоличествоВыполняется   = 0;
	
	МассивОтправляемыхДокументов = Новый Массив;
	Для Каждого ДанныеОтправляемогоДокумента Из ОтправляемыеДокументы Цикл
		МассивОтправляемыхДокументов.Добавить(ДанныеОтправляемогоДокумента.ПрикладнойОбъект);
	КонецЦикла;
	
	РезультатОтправки = РезультатОтправкиДокументов(МассивОтправляемыхДокументов);
	
	Для Каждого ЭлементСоответствия Из РезультатОтправки Цикл
		
		ДанныеСинхронизации = ЭлементСоответствия.Значение;
		ПрикладнойОбъект    = ЭлементСоответствия.Ключ;
		
		ТребуетсяВыводСообщенияОбОшибке = Ложь;
		ТекстОшибки                     = "";
		
		Если ДанныеСинхронизации.СостояниеВыполнения = ПредопределенноеЗначение("Перечисление.СостоянияСинхронизацииДокументовEDI.Выполняется")
			Или ДанныеСинхронизации.СостояниеВыполнения = ПредопределенноеЗначение("Перечисление.СостоянияСинхронизацииДокументовEDI.Требуется") Тогда
			
			КоличествоВыполняется = КоличествоВыполняется + 1;
			Продолжить;
		ИначеЕсли ДанныеСинхронизации.СостояниеВыполнения = ПредопределенноеЗначение("Перечисление.СостоянияСинхронизацииДокументовEDI.ОшибкаПроверкиСопоставления") Тогда
			
			ТекстОшибки                     = НСтр("ru = 'В документе не указана номенклатура контрагента.'");
			ТребуетсяВыводСообщенияОбОшибке = Истина;
			КоличествоОшибка                = КоличествоОшибка + 1;
			
		ИначеЕсли ДанныеСинхронизации.СостояниеВыполнения = ПредопределенноеЗначение("Перечисление.СостоянияСинхронизацииДокументовEDI.Ошибка") Тогда
			
			ТекстОшибки                     = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'При отправке возникла ошибка. %1'"), ДанныеСинхронизации.ТекстОшибки);
			ТребуетсяВыводСообщенияОбОшибке = Истина;
			КоличествоОшибка                = КоличествоОшибка + 1;
			
		ИначеЕсли ДанныеСинхронизации.СостояниеВыполнения = ПредопределенноеЗначение("Перечисление.СостоянияСинхронизацииДокументовEDI.Выполнена") Тогда
			
			КоличествоОтправленных = КоличествоОтправленных + 1;
			
		КонецЕсли;
			
		Если ТребуетсяВыводСообщенияОбОшибке Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Документ %1 не отправлен. %2.'"), 
			                                                                         ПрикладнойОбъект, 
			                                                                         ТекстОшибки);
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, ПрикладнойОбъект);
			
		КонецЕсли;
		
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("ПрикладнойОбъект", ПрикладнойОбъект);
		
		НайденныеСтроки = ОтправляемыеДокументы.НайтиСтроки(ПараметрыПоиска);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			ОтправляемыеДокументы.Удалить(НайденныеСтроки[0]);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОтправляемыеДокументы.Количество() > 0 Тогда
		
		Если ИнтервалОжидания = 2 Тогда
			ИнтервалОжидания = 4;
		ИначеЕсли ИнтервалОжидания <> 6 Тогда
			ИнтервалОжидания = 6;
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("ПриОжиданииРезультатовОтправки", ИнтервалОжидания, Истина);
		
	Иначе
		
		ЗаголовокОповещения = НСтр("ru = 'Сервис 1C:EDI'");
		ТекстОповещения = НСтр("ru = 'Отправка документов в сервис 1С:EDI завершена.'");
		
		ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ТекстОповещения);
		
	КонецЕсли;
	
	Если КоличествоОтправленных > 0 Тогда
		Элементы.Список.Обновить();
		Оповестить("ОтправленыПрикладныеДокументыСервис");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РезультатОтправкиДокументов(МассивОтправляемыхДокументов)
	
	Результат =  РаботаСДаннымиEDIСлужебный.РезультатСинхронизацииССервисом(МассивОтправляемыхДокументов);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
