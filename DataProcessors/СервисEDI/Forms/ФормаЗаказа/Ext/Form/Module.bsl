
#Область ОписаниеПеременных

&НаКлиенте
Перем ПоследнийБлокСообщений;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПрочитатьПараметрыОткрытияФормы();
	ВыполнитьНачальноеЗаполнениеФормы();
	
	УстановитьУсловноеОформлениеФормы();
	ОбновитьОтображениеФормыПриСозданииНаСервере();
	
	ДлительнаяОперацияПолученияДанныхДокумента = ЗапуститьЗаданиеПолученияДанныхДокумента(Организация, ТипДокумента, 
		ИдентификаторВСервисе, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОжидатьПолучениеДанныхДокумента();
	ОбновитьОтображениеФормы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область ОплатаДоставка

&НаКлиенте
Процедура СпособДоставкиПриИзменении(Элемент)
	
	ОбновитьОтображениеФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗаголовокГрафикОплатыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИспользуетсяМногоэтапныйГрафикОплаты = Не ИспользуетсяМногоэтапныйГрафикОплаты;
	
	ОбновитьОтображениеФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтгружатьЗаказЦеликомПриИзменении(Элемент)
	
	ОбновитьОтображениеФормы();
	
КонецПроцедуры

#КонецОбласти

#Область Ценообразование

&НаКлиенте
Процедура ПродажаОблагаетсяНДСПриИзменении(Элемент)
	
	ОбновитьОтображениеФормы();
	
КонецПроцедуры

#КонецОбласти

#Область ПротоколВзаимодействия

#Область ПротоколВзаимодействияHTML

&НаКлиенте
Процедура ПротоколВзаимодействияHTMLДокументСформирован(Элемент)
	
	ВывестиСообщенияHTML();
	
КонецПроцедуры

&НаКлиенте
Процедура ПротоколВзаимодействияHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ДанныеСобытия.Element.id = ДокументыEDIИнтеграцияКлиент.ИдентификаторКнопкиОтправкиСообщения() Тогда
		
		ПолеВвода = МодульОтображения().ownerDocument.getElementById("composer__textarea");
		ТекстСообщения = ПолеВвода.value;
		
		Если Не ПустаяСтрока(ТекстСообщения) Тогда
			
			ОтправитьСообщениеWSS("", ТекстСообщения);
			ПолеВвода.value = "";
			
		КонецЕсли;
		
	ИначеЕсли Не ПустаяСтрока(ДанныеСобытия.Href) Тогда
		
		НавигационнаяСсылка = СтрЗаменить(ДанныеСобытия.Href, ДанныеСобытия.Document.baseURI, "");
		ОбработатьПереходПоСсылке(НавигационнаяСсылка);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПротоколВзаимодействияWSS

&НаКлиенте
Процедура ПротоколВзаимодействияWSSДокументСформирован(Элемент)
	
	ПодключитьПротоколВзаимодействия();
	
КонецПроцедуры

&НаКлиенте
Процедура ПротоколВзаимодействияWSSПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбработатьСообщениеПротоколаВзаимодействия(ДанныеСобытия);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоказатьСкрытьПротоколВзаимодействия(Команда)
	
	ПоследнийБлокСообщений = Неопределено;
	
	ОтображатьПротоколВзаимодействия = Не ОтображатьПротоколВзаимодействия;
	
	Если ДляПротоколаВзаимодействияИспользуетсяWSS Тогда
		ОтправитьСтатусыСообщенийWSS();
	Иначе
		ОчиститьСообщенияHTML();
	
		ВывестиСообщенияHTML();
	КонецЕсли;
	
	ОбновитьОтображениеФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура Загрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗагрузкиДокумента", ЭтотОбъект);
	
	ПараметрыЗагрузки = ДокументыEDIИнтеграцияКлиент.ПараметрыЗагрузкиДокумента(ЭтотОбъект);
	ПараметрыЗагрузки.Организация                   = Организация;
	ПараметрыЗагрузки.ТипДокумента                  = ТипДокумента;
	ПараметрыЗагрузки.ИдентификаторДокумента        = ИдентификаторВСервисе;
	ПараметрыЗагрузки.ОписаниеОповещенияОЗавершении = ОписаниеОповещения;
	
	ДокументыEDIИнтеграцияКлиент.ЗагрузитьДокументИзСервиса(ПараметрыЗагрузки);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОсновнуюКомандуДокумента(Команда)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ЯвляетсяОсновнымДействием", Истина);
	
	НайденныеСтроки = КомандыДокумента.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьСтатусДокумента(НайденныеСтроки[НайденныеСтроки.Количество() - 1].ДействиеДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуДокумента(Команда)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ИмяКоманды", Команда.Имя);
	
	НайденныеСтроки = КомандыДокумента.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьСтатусДокумента(НайденныеСтроки[0].ДействиеДокумента);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСФормой

&НаСервере
Процедура ВыполнитьНачальноеЗаполнениеФормы()
	
	ПротоколВзаимодействияHTML = ПолучитьОбщийМакет("ПротоколВзаимодействияHTMLСервисаEDI").ПолучитьТекст();
	
	ОписаниеЦвета = Новый Структура("Красный, Зеленый, Синий", 0, 0, 0);
	
	ЦветФона    = Метаданные.ЭлементыСтиля.ЦветФонаПанелиСостоянияEDI.Значение;
	ЗаполнитьЗначенияСвойств(ОписаниеЦвета, ЦветФона);
	
	ИдентификаторОрганизации = БизнесСеть.ИдентификаторОрганизации(Организация);
	
	ДляПротоколаВзаимодействияИспользуетсяWSS = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьПараметрыОткрытияФормы()
	
	Параметры.Свойство("Организация"            , Организация);
	Параметры.Свойство("ТипДокумента"           , ТипДокумента);
	Параметры.Свойство("ИдентификаторВСервисе"  , ИдентификаторВСервисе);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеФормы()
	
	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображениеФормыПриСозданииНаСервере()
	
	Если ЭтоЗаказПоставщику() Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаКонтрагентСтраницы", 
			"ТекущаяСтраница", Элементы.ГруппаПоставщикСтраница);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаМенеджерСтраницы", 
			"ТекущаяСтраница", Элементы.ГруппаМенеджерПокупатель);
		
	ИначеЕсли ЭтоЗаказКлиента() Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаКонтрагентСтраницы", 
			"ТекущаяСтраница", Элементы.ГруппаПокупательСтраница);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаМенеджерСтраницы", 
			"ТекущаяСтраница", Элементы.ГруппаМенеджерПоставщик);
		
	КонецЕсли;
	
	АвтоЗаголовок = Ложь;
	Заголовок = НСтр("ru = 'Загрузка документа'");
	
	Если ОбщегоНазначения.ЭтоВебКлиент() Тогда
		Элементы.Переместить(Элементы.ПротоколВзаимодействияWSS, Элементы.ГруппаПанельСостояния, 
			Элементы.ДекорацияПанельСостоянияРазделитель);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтраницыПанельСостояния",
		"ТекущаяСтраница", Элементы.СтраницаСостояниеДокумента);

КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображениеФормыПриПолученииДанных()
	
	Заголовок = СтрШаблон(НСтр("ru = '%1 %2 от %3'"), ТипДокумента, НомерДокумента, Формат(ДатаДокумента, "ДЛФ=D;") );
	
	Если ПустаяСтрока(ПокупательКонтактноеЛицоФИО) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаКонтактноеЛицоЗначениеПокупатель", 
			"ТекущаяСтраница", Элементы.ГруппаКонтактноеЛицоНеЗаданоПокупатель);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаКонтактноеЛицоПредставлениеПокупатель", 
			"Заголовок", ПокупательКонтактноеЛицоФИО);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаКонтактноеЛицоЗначениеПокупатель", 
			"ТекущаяСтраница", Элементы.ГруппаКонтактноеЛицоЗаданоПокупатель);
	КонецЕсли;
	
	Если ПустаяСтрока(ПоставщикКонтактноеЛицоФИО) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаКонтактноеЛицоЗначениеПоставщик", 
			"ТекущаяСтраница", Элементы.ГруппаКонтактноеЛицоНеЗаданоПоставщик);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаКонтактноеЛицоПредставлениеПоставщик", 
			"Заголовок", ПоставщикКонтактноеЛицоФИО);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаКонтактноеЛицоЗначениеПоставщик", 
			"ТекущаяСтраница", Элементы.ГруппаКонтактноеЛицоЗаданоПоставщик);
	КонецЕсли;
	
	ТекстЗаголовкаСтатусДокумента = СтроковыеФункции.ФорматированнаяСтрока(НСтр("ru = 'Состояние EDI: <b>%1</b>'"),
		ТекущийСтатусДокумента);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияТекущийСтатусДокумента", 
		"Заголовок", ТекстЗаголовкаСтатусДокумента);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВыполнитьОсновнуюКомандуДокумента", 
		"Видимость", ДоступноОсновноеДействиеДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображениеФормы()
	
	// Доступность адреса доставки в зависимости от способа доставки
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НаименованиеАдресаДоставки",
		"Доступность", СпособДоставки = 2);
	
	// Устанавливаем заголовок графика оплаты
	ТипГрафикаОплаты = ?(ИспользуетсяМногоэтапныйГрафикОплаты, НСтр("ru = 'списком'"), НСтр("ru = 'простой'"));
	ТекстЗаголовка = СтроковыеФункцииКлиент.ФорматированнаяСтрока(
		НСтр("ru = 'График оплаты, <a href = ""ИзменитьРежимРедактированияГрафикаОплаты"">%1</a>'"), ТипГрафикаОплаты);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияЗаголовокГрафикОплаты",
		"Заголовок", ТекстЗаголовка);
	
	// Устанавливаем страницу графика оплаты
	ТекущаяСтраница = ?(ИспользуетсяМногоэтапныйГрафикОплаты, Элементы.ГруппаМногоэтапныйГрафикОплаты,
		Элементы.ГруппаПростойГрафикОплаты);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаГрафикОплатыСтраницы",
		"ТекущаяСтраница", ТекущаяСтраница);
	
	// Видимость полей НДС
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыПредставлениеСтавкиНДС",
		"Видимость", ПродажаОблагаетсяНДС);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыСуммаНДС",
		"Видимость", ПродажаОблагаетсяНДС);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыСуммаСНДС",
		"Видимость", ПродажаОблагаетсяНДС);
	
	// Видимость даты поставки в шапке и табличной части
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПлановаяДатаПоставки",
		"Видимость", ОтгружатьЗаказЦеликом);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыПлановаяДатаПоставки",
		"Видимость", Не ОтгружатьЗаказЦеликом);
	
	// Заголовки полей НДС
	Если Не ПродажаОблагаетсяНДС Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы, "ТоварыЦена", "Заголовок", НСтр("ru = 'Цена'"));
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы, "ТоварыСумма", "Заголовок", НСтр("ru = 'Сумма'"));
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы, "ИтогСуммаСНДС", "Заголовок", НСтр("ru = 'Заказано'"));
		
	ИначеЕсли ЦенаВключаетНДС Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы, "ТоварыЦена", "Заголовок", НСтр("ru = 'Цена с НДС'"));
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы, "ТоварыСумма", "Заголовок", НСтр("ru = 'Сумма с НДС'"));
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы, "ТоварыСуммаСНДС", "Заголовок", НСтр("ru = 'Всего'"));
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы, "ИтогСуммаСНДС", "Заголовок", НСтр("ru = 'Заказано с НДС'"));
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы, "ТоварыЦена", "Заголовок", НСтр("ru = 'Цена без НДС'"));
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы, "ТоварыСумма", "Заголовок", НСтр("ru = 'Сумма без НДС'"));
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы, "ТоварыСуммаСНДС", "Заголовок", НСтр("ru = 'Сумма с НДС'"));
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы, "ИтогСуммаСНДС", "Заголовок", НСтр("ru = 'Заказано с НДС'"));
		
	КонецЕсли;
	
	// Отображение протокола взаимодействия
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтраницыПротоколаВзаимодействия",
		"Видимость", ОтображатьПротоколВзаимодействия);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПоказатьСкрытьПротоколВзаимодействия",
		"Пометка", ОтображатьПротоколВзаимодействия);
	
	// Текущая страница протокола взаимодействия
	ТекущаяСтраница = ?(ПротоколВзаимодействияПодключен, Элементы.СтраницаПротоколВзаимодействияДоступен,
		Элементы.СтраницаПротоколВзаимодействияНедоступен);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтраницыПротоколаВзаимодействия",
		"ТекущаяСтраница", ТекущаяСтраница);
	
	// Отображение непрочитанных сообщений
	Если КоличествоНепрочитанныхСообщений = 0 Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПоказатьСкрытьПротоколВзаимодействия",
			"Картинка", БиблиотекаКартинок.БизнесСеть);
	ИначеЕсли КоличествоНепрочитанныхСообщений > 9 Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПоказатьСкрытьПротоколВзаимодействия",
			"Картинка", БиблиотекаКартинок.БизнесСетьНовоеСообщениеБолее9);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПоказатьСкрытьПротоколВзаимодействия",
			"Картинка", БиблиотекаКартинок["БизнесСетьНовоеСообщение" + Формат(КоличествоНепрочитанныхСообщений, "ЧГ=")]);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПредставлениеКоманды(Команда, Заголовок, Подсказка, Картинка)
	
	Команда.Заголовок = Заголовок;
	Команда.Подсказка = Подсказка;
	Команда.Картинка  = Картинка;
	
КонецПроцедуры

#КонецОбласти

#Область ВзаимодействиеССервисом

#Область ПолучениеДанныхДокумента

&НаСервереБезКонтекста
Функция ЗапуститьЗаданиеПолученияДанныхДокумента(Организация, ТипДокумента, ИдентификаторВСервисе, ИдентификаторФормы)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(ИдентификаторФормы);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение данных документа из сервиса 1С:EDI'");
	
	ПараметрыКоманды = РаботаСДаннымиEDIСлужебный.НовыйПараметрыПолученияДанныхДокумента();
	ПараметрыКоманды.Организация            = Организация;
	ПараметрыКоманды.ТипДокумента           = ТипДокумента;
	ПараметрыКоманды.ИдентификаторВСервисе  = ИдентификаторВСервисе;

	Возврат ДлительныеОперации.ВыполнитьФункцию(
		ПараметрыВыполнения,
		"Обработки.СервисEDI.ДанныеДокументаСервиса",
		ПараметрыКоманды);
	
КонецФункции

&НаКлиенте
Процедура ОжидатьПолучениеДанныхДокумента()
	
	Если ДлительнаяОперацияПолученияДанныхДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриПолученииДанныхДокумента", ЭтотОбъект);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСтраницыФормы",
		"ТекущаяСтраница", Элементы.СтраницаДлительнаяОперация);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
		ДлительнаяОперацияПолученияДанныхДокумента,
		ОписаниеОповещения,
		ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Процедура ПриПолученииДанныхДокументаНаСервере(АдресРезультата, Отказ)
	
	ОтветСервиса = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если ОтветСервиса = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	ИначеЕсли ОтветСервиса.Ошибка Тогда
		ОбщегоНазначения.СообщитьПользователю(ОтветСервиса.ТекстОшибки, , , , Отказ);
		Возврат;
	КонецЕсли;
	
	Если Не ДляПротоколаВзаимодействияИспользуетсяWSS Тогда
		ПротоколВзаимодействияПодключен = Истина;
	КонецЕсли;
	
	ДанныеДокумента = ОтветСервиса.Данные.ДанныеДокумента;
	
	// Данные статуса документа
	ТекущийСтатусДокумента          = ОтветСервиса.Данные.ТекущийСтатус;
	НомерРевизии                    = ОтветСервиса.Данные.НомерАктуальнойВерсии;
	
	// Данные шапки документа
	
	Если ТипДокумента = Перечисления.ТипыДокументовEDI.ЗаказКлиента Тогда
		НомерДокументаПоДаннымКонтрагента = ЗначениеСвойстваМодели(ДанныеДокумента, "originOrder.buyerNumberDate.number");
		ДатаДокументаПоДаннымКонтрагента  = ЗначениеСвойстваМодели(ДанныеДокумента, "originOrder.buyerNumberDate.date");
		НомерДокумента                    = ЗначениеСвойстваМодели(ДанныеДокумента, "originOrder.sellerNumberDate.number");
		ДатаДокумента                     = ЗначениеСвойстваМодели(ДанныеДокумента, "originOrder.sellerNumberDate.date");
		ПредставлениеОрганизации          = ЗначениеСвойстваМодели(ДанныеДокумента, "parties.seller.organization.name");
		ПредставлениеКонтрагента          = ЗначениеСвойстваМодели(ДанныеДокумента, "parties.buyer.organization.name");
		ИдентификаторКонтрагента          = ЗначениеСвойстваМодели(ДанныеДокумента, "parties.buyer.bNetInternalId");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовEDI.ЗаказПоставщику Тогда
		НомерДокументаПоДаннымКонтрагента = ЗначениеСвойстваМодели(ДанныеДокумента, "originOrder.sellerNumberDate.number");
		ДатаДокументаПоДаннымКонтрагента  = ЗначениеСвойстваМодели(ДанныеДокумента, "originOrder.sellerNumberDate.date");
		НомерДокумента                    = ЗначениеСвойстваМодели(ДанныеДокумента, "originOrder.buyerNumberDate.number");
		ДатаДокумента                     = ЗначениеСвойстваМодели(ДанныеДокумента, "originOrder.buyerNumberDate.date");
		ПредставлениеОрганизации          = ЗначениеСвойстваМодели(ДанныеДокумента, "parties.buyer.organization.name");
		ПредставлениеКонтрагента          = ЗначениеСвойстваМодели(ДанныеДокумента, "parties.seller.organization.name");
		ИдентификаторКонтрагента          = ЗначениеСвойстваМодели(ДанныеДокумента, "parties.seller.bNetInternalId");
	КонецЕсли;
	
	// Данные НДС
	ПродажаОблагаетсяНДС            = ЗначениеСвойстваМодели(ДанныеДокумента, "termsAndConditions.taxed");
	ЦенаВключаетНДС                 = ЗначениеСвойстваМодели(ДанныеДокумента, "termsAndConditions.priceTaxIncluded");
	
	// Данные покупателя
	ПредставлениеПокупателя         = ЗначениеСвойстваМодели(ДанныеДокумента, "parties.buyer.organization.name");
	ПокупательКонтактноеЛицоФИО     = ЗначениеСвойстваМодели(ДанныеДокумента, "parties.buyer.contactPerson.name");
	ПокупательКонтактноеЛицоТелефон = ЗначениеСвойстваМодели(ДанныеДокумента, "parties.buyer.contactPerson.telNumber");
	ПокупательКонтактноеЛицоАдресЭП = ЗначениеСвойстваМодели(ДанныеДокумента, "parties.buyer.contactPerson.email");
	
	// Данные поставщика
	ПредставлениеПоставщика         = ЗначениеСвойстваМодели(ДанныеДокумента, "parties.seller.organization.name");
	ПоставщикКонтактноеЛицоФИО      = ЗначениеСвойстваМодели(ДанныеДокумента, "parties.seller.contactPerson.name");
	ПоставщикКонтактноеЛицоТелефон  = ЗначениеСвойстваМодели(ДанныеДокумента, "parties.seller.contactPerson.telNumber");
	ПоставщикКонтактноеЛицоАдресЭП  = ЗначениеСвойстваМодели(ДанныеДокумента, "parties.seller.contactPerson.email");
	
	// Условия поставки
	СпособДоставки                  = ЗначениеСвойстваМодели(ДанныеДокумента, "delivery.form");
	НаименованиеАдресаДоставки      = ЗначениеСвойстваМодели(ДанныеДокумента, "delivery.point.name");
	АдресДоставки                   = ЗначениеСвойстваМодели(ДанныеДокумента, "delivery.point.addressInfo");
	АдресДоставкиGLN                = ЗначениеСвойстваМодели(ДанныеДокумента, "delivery.point.gln");
	ОтгружатьЗаказЦеликом           = ЗначениеСвойстваМодели(ДанныеДокумента, "termsAndConditions.wholeOrderDeliveryOnly");
	ПлановаяДатаПоставки            = ЗначениеСвойстваМодели(ДанныеДокумента, "termsAndConditions.expectedDeliveryDate");
	
	// Данные оплаты
	КодВалюты                       = ЗначениеСвойстваМодели(ДанныеДокумента, "termsAndConditions.currency.code");
	НаименованиеВалюты              = ЗначениеСвойстваМодели(ДанныеДокумента, "termsAndConditions.currency.name");
	БанковскийСчет                  = ЗначениеСвойстваМодели(ДанныеДокумента, "parties.seller.BankAccount.number");
	БИК                             = ЗначениеСвойстваМодели(ДанныеДокумента, "parties.seller.BankAccount.bik");
	
	// Табличная часть "Товары"
	Товары.Очистить();
	
	СтрокиТоваров = ЗначениеСвойстваМодели(ДанныеДокумента, "itemLines");
	НомерСтроки   = 0;
	
	Если Не СтрокиТоваров = Неопределено Тогда
		
		Для каждого СтрокаТоваров Из СтрокиТоваров Цикл
			
			НомерСтроки = НомерСтроки + 1;
			
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.НомерСтроки                 = НомерСтроки;
			НоваяСтрока.ПредставлениеНоменклатуры   = ЗначениеСвойстваМодели(СтрокаТоваров, "description");
			НоваяСтрока.ПредставлениеХарактеристики = ЗначениеСвойстваМодели(СтрокаТоваров, "extendedDescription");
			НоваяСтрока.ПредставлениеУпаковки       = ЗначениеСвойстваМодели(СтрокаТоваров, "package.description");
			НоваяСтрока.Количество                  = ЗначениеСвойстваМодели(СтрокаТоваров, "quantity");
			НоваяСтрока.Цена                        = ЗначениеСвойстваМодели(СтрокаТоваров, "price");
			НоваяСтрока.Сумма                       = ЗначениеСвойстваМодели(СтрокаТоваров, "amount");
			НоваяСтрока.СтавкаНДС                   = ЗначениеСвойстваМодели(СтрокаТоваров, "taxRate");
			НоваяСтрока.СуммаНДС                    = ЗначениеСвойстваМодели(СтрокаТоваров, "taxAmount");
			НоваяСтрока.ПлановаяДатаПоставки        = ЗначениеСвойстваМодели(СтрокаТоваров, "expectedDeliveryDate");
			
			Если ПустаяСтрока(НоваяСтрока.ПредставлениеУпаковки) Тогда
				НоваяСтрока.ПредставлениеУпаковки   = ЗначениеСвойстваМодели(СтрокаТоваров, "unit.name");
			КонецЕсли;
			
			НоваяСтрока.ПредставлениеСтавкиНДС      = ПредставлениеСтавкиНДС(НоваяСтрока.СтавкаНДС);
			НоваяСтрока.СуммаСкидки                 = НоваяСтрока.Сумма - (НоваяСтрока.Количество * НоваяСтрока.Цена);
			НоваяСтрока.СуммаСНДС                   = ?(ЦенаВключаетНДС, НоваяСтрока.Сумма, 
				НоваяСтрока.Сумма + НоваяСтрока.СуммаНДС);
			
			ЧастиНаименования = Новый Массив;
			
			Если Не ПустаяСтрока(НоваяСтрока.ПредставлениеНоменклатуры) Тогда
				ЧастиНаименования.Добавить(НоваяСтрока.ПредставлениеНоменклатуры);
			КонецЕсли;
			Если Не ПустаяСтрока(НоваяСтрока.ПредставлениеХарактеристики) Тогда
				ЧастиНаименования.Добавить(НоваяСтрока.ПредставлениеХарактеристики);
			КонецЕсли;
			
			НоваяСтрока.ПолноеНаименованиеНоменклатуры = СтрСоединить(ЧастиНаименования, ", ");
			
		КонецЦикла;
		
	КонецЕсли;
	
	ИтогСуммаСкидки = Товары.Итог("СуммаСкидки");
	ИтогСуммаСНДС   = Товары.Итог("СуммаСНДС");
	
	// Табличная часть "ЭтапыГрафикаОплаты"
	ЭтапыГрафикаОплаты.Очистить();
	
	СтрокиОплаты = ЗначениеСвойстваМодели(ДанныеДокумента, "paymentSchedule");
	НомерСтроки  = 0;
	
	Если Не СтрокиОплаты = Неопределено Тогда
		
		Для каждого СтрокаОплаты Из СтрокиОплаты Цикл
			
			НомерСтроки = НомерСтроки + 1;
			
			НоваяСтрока = ЭтапыГрафикаОплаты.Добавить();
			НоваяСтрока.НомерСтроки                = НомерСтроки;
			НоваяСтрока.ВариантОплаты              = ЗначениеСвойстваМодели(СтрокаОплаты, "option");
			НоваяСтрока.ДатаПлатежа                = ЗначениеСвойстваМодели(СтрокаОплаты, "date");
			НоваяСтрока.ПроцентПлатежа             = ЗначениеСвойстваМодели(СтрокаОплаты, "percent");
			НоваяСтрока.СуммаПлатежа               = ЗначениеСвойстваМодели(СтрокаОплаты, "amount");
			НоваяСтрока.Сдвиг                      = ЗначениеСвойстваМодели(СтрокаОплаты, "delay");
			
			НоваяСтрока.ВариантОплатыПредставление = ПредставлениеВариантаОплаты(НоваяСтрока.ВариантОплаты);
			
			Если НомерСтроки = 1 Тогда
				ФормаОплаты = ЗначениеСвойстваМодели(СтрокаОплаты, "kind");
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПрочитатьГрафикОплаты();
	ОбновитьОтображениеФормыПриПолученииДанных();
	ПрочитатьКомандыДокумента(ОтветСервиса.Данные.Команды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПолученииДанныхДокумента(РезультатВыполнения, ДополнительныеПараметры) Экспорт 
	
	Если РезультатВыполнения = Неопределено Или Не РезультатВыполнения.Статус = "Выполнено" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСтраницыФормы",
			"ТекущаяСтраница", Элементы.СтраницаОшибкаПолученияДанных);
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСтраницыФормы",
		"ТекущаяСтраница", Элементы.СтраницаДанныеДокумента);
	
	Отказ = Ложь;
	
	ПриПолученииДанныхДокументаНаСервере(РезультатВыполнения.АдресРезультата, Отказ);
	
	Если Отказ Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСтраницыФормы",
			"ТекущаяСтраница", Элементы.СтраницаОшибкаПолученияДанных);
		Возврат;
	КонецЕсли;
	
	ОбновитьОтображениеФормы();
	ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.СостоянияДокументовEDI"));
	
	Если Не ДляПротоколаВзаимодействияИспользуетсяWSS Тогда
		ПолучитьВерсииДокумента();
	Иначе
		ВывестиСообщенияHTML();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеДокумента()
	
	ДлительнаяОперацияПолученияДанныхДокумента = ЗапуститьЗаданиеПолученияДанныхДокумента(Организация, ТипДокумента, 
		ИдентификаторВСервисе, УникальныйИдентификатор);
	
	ОжидатьПолучениеДанныхДокумента();
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеСтатусаДокумента

&НаСервереБезКонтекста
Функция ЗапуститьОбновлениеСтатусаДокумента(ПараметрыОбновленияСтатуса)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияПроцедуры();
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Обновление статуса документа в сервисе 1С:EDI'");
	
	ПараметрыКоманды = РаботаСДаннымиEDIСлужебный.НовыйПараметрыИзмененияСтатусаДокумента();
	ПараметрыКоманды.Организация               = ПараметрыОбновленияСтатуса.Организация;
	ПараметрыКоманды.ТипДокумента              = ПараметрыОбновленияСтатуса.ТипДокумента;
	ПараметрыКоманды.Инструкция                = ПараметрыОбновленияСтатуса.Инструкция;
	ПараметрыКоманды.ИдентификаторВСервисе     = ПараметрыОбновленияСтатуса.ИдентификаторВСервисе;
	ПараметрыКоманды.НомерРевизии              = ПараметрыОбновленияСтатуса.НомерРевизии;
	ПараметрыКоманды.Менеджер                  = Пользователи.АвторизованныйПользователь();
	
	Возврат ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполнения,
		"РаботаСДаннымиEDIСлужебный.РезультатИзмененияСтатуса", ПараметрыКоманды);
	
КонецФункции

&НаКлиенте
Процедура ОбновитьСтатусДокумента(КомандаДокумента)
	
	Элементы.ГруппаДоступныеДействияДокумента.Скрыть();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтраницыПанельСостояния",
		"ТекущаяСтраница", Элементы.СтраницаСостоянияДлительнаяОперация);
	
	ПараметрыОбновленияСтатуса = Новый Структура;
	ПараметрыОбновленияСтатуса.Вставить("Организация"               , Организация);
	ПараметрыОбновленияСтатуса.Вставить("ТипДокумента"              , ТипДокумента);
	ПараметрыОбновленияСтатуса.Вставить("Инструкция"                , КомандаДокумента);
	ПараметрыОбновленияСтатуса.Вставить("ИдентификаторВСервисе"     , ИдентификаторВСервисе);
	ПараметрыОбновленияСтатуса.Вставить("НомерРевизии"              , НомерРевизии);
	
	ДлительнаяОперацияОбновленияСтатусаДокумента = ЗапуститьОбновлениеСтатусаДокумента(ПараметрыОбновленияСтатуса);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОбновленииСтатусаДокумента", ЭтотОбъект);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперацияОбновленияСтатусаДокумента,
		ОписаниеОповещения, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОбновленииСтатусаДокумента(РезультатВыполнения, ДополнительныеПараметры) Экспорт 
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтраницыПанельСостояния",
		"ТекущаяСтраница", Элементы.СтраницаСостояниеДокумента);
	
	ПолучитьДанныеДокумента();
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеВерсийДокумента

&НаСервереБезКонтекста
Функция ЗаданиеПолученияВерсийДокументаСервиса(Знач ИдентификаторФормы, Знач ПараметрыПолученияВерсий)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(ИдентификаторФормы);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение версий документа из сервиса 1С:EDI'");
	
	ПараметрыКоманды = РаботаСДаннымиEDIСлужебный.НовыйПараметрыПолученияВерсииДокументаСервиса();
	ЗаполнитьЗначенияСвойств(ПараметрыКоманды, ПараметрыПолученияВерсий);
	
	Возврат ДлительныеОперации.ВыполнитьФункцию(
		ПараметрыВыполнения,
		"РаботаСДаннымиEDIСлужебный.ВерсииДокументаСервиса",
		ПараметрыКоманды);
	
КонецФункции

&НаКлиенте
Процедура ПолучитьВерсииДокумента()
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Организация", Организация);
	ПараметрыЗапроса.Вставить("ТипДокумента", ТипДокумента);
	ПараметрыЗапроса.Вставить("ИдентификаторВСервисе", ИдентификаторВСервисе);
	
	ДлительнаяОперацияПолученияВерсий = ЗаданиеПолученияВерсийДокументаСервиса(УникальныйИдентификатор, ПараметрыЗапроса);
	
	ОжидатьВерсииДокументаСервиса();
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьВерсииДокументаСервиса()
	
	Если ДлительнаяОперацияПолученияВерсий = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриПолученииВерсийДокумента", ЭтотОбъект);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСтраницыФормы",
		"ТекущаяСтраница", Элементы.СтраницаДлительнаяОперация);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
		ДлительнаяОперацияПолученияВерсий,
		ОписаниеОповещения,
		ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПолученииВерсийДокумента(РезультатВыполнения, ДополнительныеПараметры) Экспорт 
	
	Если РезультатВыполнения = Неопределено Или Не РезультатВыполнения.Статус = "Выполнено" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСтраницыФормы",
			"ТекущаяСтраница", Элементы.СтраницаОшибкаПолученияДанных);
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСтраницыФормы",
		"ТекущаяСтраница", Элементы.СтраницаДанныеДокумента);
	
	ПриПолученииВерсийДокументаНаСервере(РезультатВыполнения.АдресРезультата);

	ОчиститьСообщенияHTML();
	
	ВывестиСообщенияHTML();
	
КонецПроцедуры

&НаСервере 
Процедура ПриПолученииВерсийДокументаНаСервере(АдресДанных)
	
	ДанныеВерсий = ПолучитьИзВременногоХранилища(АдресДанных);
	Если ДанныеВерсий = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеВерсий.Сортировать("ДатаСтатуса");

	ТаблицаШаблоновСообщений = ДокументыEDIИнтеграция.ТаблицаШаблоновСообщений();
	ТабличнаяЧастьСообщений.Очистить();
	
	Если ТипДокумента = Перечисления.ТипыДокументовEDI.ЗаказПоставщику Тогда
		СторонаОтображения = Перечисления.СтороныУчастникиСервисаEDI.Покупатель;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовEDI.ЗаказКлиента Тогда
		СторонаОтображения = Перечисления.СтороныУчастникиСервисаEDI.Поставщик;
	КонецЕсли;
	
	Для каждого ДанныеВерсии Из ДанныеВерсий Цикл
		
		Если ДанныеВерсии.ИдентификаторВерсии = РаботаСВерсиямиEDIСервер.ИдентификаторТекущейРевизииСервиса() Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("Действие, СторонаВыполнившаяДействие, ПредыдущийСтатус, СторонаОтображения");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДанныеВерсии);
		СтруктураПоиска.СторонаОтображения = СторонаОтображения;
		
		СтрокиШаблонаСообщения = ДокументыEDIИнтеграция.ПодобратьСтрокиСообщений(ТаблицаШаблоновСообщений, СтруктураПоиска);
		
		НомерСообщения = 0;
		
		Для каждого СтрокаШаблонаСообщения Из СтрокиШаблонаСообщения Цикл
			
			УникальныйИдентификаторСообщения = Новый УникальныйИдентификатор;
			НомерСообщения = НомерСообщения + 1;
			
			СообщениеПротокола = ТабличнаяЧастьСообщений.Добавить();
			
			СообщениеПротокола.ИдентификаторСообщения =
				СтрШаблон("%1#%2", УникальныйИдентификаторСообщения, Формат(НомерСообщения, "ЧГ="));
			
			СообщениеПротокола.ИдентификаторОтправителя =
				?(ДанныеВерсии.СторонаВыполнившаяДействие = СторонаОтображения,
				ИдентификаторОрганизации,
				ИдентификаторКонтрагента);
			СообщениеПротокола.Дата = ДанныеВерсии.ДатаСтатуса;
			СообщениеПротокола.Заголовок = СтрокаШаблонаСообщения.Заголовок;
			СообщениеПротокола.Текст = СтрокаШаблонаСообщения.ТекстСообщения;
			СообщениеПротокола.Статус = ДокументыEDIИнтеграцияКлиентСервер.ИдентификаторСтатусаДоставкиОтправлен();
			СообщениеПротокола.СистемноеСообщение = Истина;
			
			Если СтрокаШаблонаСообщения.УказыватьСсылку Тогда
				СообщениеПротокола.Гиперссылка = ДокументыEDIИнтеграция.НавигационнаяСсылкаПоИдентификаторуВерсииДокумента(
					ИдентификаторВСервисе, ДанныеВерсии.ИдентификаторВерсии);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


#КонецОбласти

#Область ОпределениеПараметров

&НаСервере
Функция ЭтоЗаказПоставщику()
	
	Возврат ТипДокумента = Перечисления.ТипыДокументовEDI.ЗаказПоставщику;
	
КонецФункции

&НаСервере
Функция ЭтоЗаказКлиента()
	
	Возврат ТипДокумента = Перечисления.ТипыДокументовEDI.ЗаказКлиента;
	
КонецФункции

#КонецОбласти

#Область РаботаСМоделью

&НаСервереБезКонтекста
Функция ЗначениеСвойстваМодели(Модель, Путь, ЗначениеПоУмолчанию = Неопределено)
	
	Отказ = Ложь;
	
	Результат = ИнтеграцияССервисомEDIСлужебный.ЗначениеКоллекцииПоАбсолютномуПути(Модель, Путь, Отказ);
	
	Если Отказ Тогда
		Возврат ЗначениеПоУмолчанию;
	ИначеЕсли Результат = Неопределено Тогда
		Возврат ЗначениеПоУмолчанию;
	Иначе
		Возврат Результат;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область КонвертацияЗначений

#Область ГрафикОплаты

&НаСервере
Процедура ПрочитатьГрафикОплаты()
	
	Если ЭтапыГрафикаОплаты.Количество() = 0 Тогда
		
		ИспользуетсяМногоэтапныйГрафикОплаты = Ложь;
		Возврат;
		
	ИначеЕсли ЭтапыГрафикаОплаты.Количество() = 1 
		И ЭтапыГрафикаОплаты[0].ВариантОплаты = 2 Тогда
		
		СтрокаПредоплата = ЭтапыГрафикаОплаты[0];
		
	ИначеЕсли ЭтапыГрафикаОплаты.Количество() = 1 
		И ЭтапыГрафикаОплаты[0].ВариантОплаты = 3 Тогда
		
		СтрокаКредит      = ЭтапыГрафикаОплаты[0];
		
	ИначеЕсли Не ЭтапыГрафикаОплаты.Количество() = 2 Тогда
		
		ИспользуетсяМногоэтапныйГрафикОплаты = Истина;
		Возврат;
		
	ИначеЕсли ЭтапыГрафикаОплаты[0].ВариантОплаты = 2
		И ЭтапыГрафикаОплаты[1].ВариантОплаты = 3 Тогда
		
		СтрокаПредоплата = ЭтапыГрафикаОплаты[0];
		СтрокаКредит     = ЭтапыГрафикаОплаты[1];

	ИначеЕсли ЭтапыГрафикаОплаты[0].ВариантОплаты = 3
		И ЭтапыГрафикаОплаты[1].ВариантОплаты = 2 Тогда

		СтрокаПредоплата = ЭтапыГрафикаОплаты[1];
		СтрокаКредит     = ЭтапыГрафикаОплаты[0];

	Иначе
		
		ИспользуетсяМногоэтапныйГрафикОплаты = Истина;
		Возврат;
		
	КонецЕсли;
	
	ИспользуетсяМногоэтапныйГрафикОплаты = Ложь;
	
	Если Не СтрокаПредоплата = Неопределено Тогда
		ПредоплатаСуммаПлатежа   = СтрокаПредоплата.СуммаПлатежа;
		ПредоплатаПроцентПлатежа = СтрокаПредоплата.ПроцентПлатежа;
		ПредоплатаСдвиг          = СтрокаПредоплата.Сдвиг;
	КонецЕсли;
	
	Если Не СтрокаКредит = Неопределено Тогда
		КредитСуммаПлатежа       = СтрокаКредит.СуммаПлатежа;
		КредитПроцентПлатежа     = СтрокаКредит.ПроцентПлатежа;
		КредитСдвиг              = СтрокаКредит.Сдвиг;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВариантОплаты

&НаКлиентеНаСервереБезКонтекста
Функция СписокВыбораВариантовОплаты()
	
	СписокВыбора = Новый СписокЗначений;
	
	СписокВыбора.Добавить(1, НСтр("ru = 'Аванс'"));
	СписокВыбора.Добавить(2, НСтр("ru = 'Предоплата'"));
	СписокВыбора.Добавить(3, НСтр("ru = 'Кредит'"));
	СписокВыбора.Добавить(4, НСтр("ru = 'Кредит со смещением'"));
	
	Возврат СписокВыбора;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеВариантаОплаты(ВариантОплаты)
	
	НайденноеЗначение = СписокВыбораВариантовОплаты().НайтиПоЗначению(ВариантОплаты);
	
	Если НайденноеЗначение = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат НайденноеЗначение.Представление;
	
КонецФункции

#КонецОбласти

#Область СтавкаНДС

&НаКлиентеНаСервереБезКонтекста
Функция СписокВыбораСтавокНДС()
	
	СписокВыбора = Новый СписокЗначений;
	
	СписокВыбора.Добавить("NOT_APPLICABLE" , НСтр("ru = 'Без НДС'"));
	СписокВыбора.Добавить("0"              , НСтр("ru = '0%'"));
	СписокВыбора.Добавить("10"             , НСтр("ru = '10%'"));
	СписокВыбора.Добавить("20"             , НСтр("ru = '20%'"));
	
	Возврат СписокВыбора;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеСтавкиНДС(СтавкаНДС)
	
	НайденноеЗначение = СписокВыбораСтавокНДС().НайтиПоЗначению(СтавкаНДС);
	
	Если НайденноеЗначение = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат НайденноеЗначение.Представление;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ВзаимодействиеСПротоколомВзаимодействия

#Область КомпонентыВзаимодействия

&НаКлиенте
Функция МодульВзаимодействия()
	
	ДокументHTML = Элементы.ПротоколВзаимодействияWSS.Документ;
	
	Если ДокументHTML = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДокументHTML.body;
	
КонецФункции

&НаКлиенте
Функция МодульОтображения()
	
	ДокументHTML = Элементы.ПротоколВзаимодействияHTML.Документ;
	
	Если ДокументHTML = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДокументHTML.body;
	
КонецФункции

#КонецОбласти

#Область Команды

&НаКлиенте
Процедура ПолучитьСообщенияWSS(ДанныеОтвета)
	
	ЗапросHTTP = ДокументыEDIИнтеграцияКлиент.НовыйЗапросHTTP();
	
	ЗапросHTTP.МетодHTTP  = "GET";
	ЗапросHTTP.Адрес      = "/protocol/{ProtocolID}/messages";
	ЗапросHTTP.ТипЗапроса = ДокументыEDIИнтеграцияКлиент.ИдентификаторЗапросаПолучитьСообщения();
	
	ЗапросHTTP.Заголовки.Вставить("OrganizationID" , ИдентификаторОрганизации);
	
	ЗапросHTTP.ПараметрыURL.Вставить("ProtocolID"  , ИдентификаторПротоколаВзаимодействия);
	
	ОтправитьСообщениеHTTP(ЗапросHTTP);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьПротоколВзаимодействия()
	
	#Если ВебКлиент Тогда
		
		МодульВзаимодействия().setNoCallback(Истина);
		ПодключитьОбработчикОжидания("ОбработчикОжиданияПолученияСообщений", 1, Ложь);
		
	#КонецЕсли
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьПротоколВзаимодействияЗавершение", ЭтотОбъект);
	
	НачатьПолучениеТокена(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПоискПротоколаВзаимодействия()
	
	Если ПустаяСтрока(ИдентификаторВСервисе)
		Или ПустаяСтрока(ИдентификаторОрганизации) Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросHTTP = ДокументыEDIИнтеграцияКлиент.НовыйЗапросHTTP();
	
	ЗапросHTTP.МетодHTTP  = "GET";
	ЗапросHTTP.Адрес      = "/protocol";
	ЗапросHTTP.ТипЗапроса = ДокументыEDIИнтеграцияКлиент.ИдентификаторЗапросаНайтиПротокол();
	
	ЗапросHTTP.ПараметрыЗапроса.Вставить("DocumentID"     , ИдентификаторВСервисе);
	ЗапросHTTP.ПараметрыЗапроса.Вставить("OrganizationID" , ИдентификаторОрганизации);
	
	ОтправитьСообщениеHTTP(ЗапросHTTP);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиСообщениеHTML(Строка)
	
	МодульОтображения = МодульОтображения();
	
	Если МодульОтображения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтображаемыйДокумент = МодульОтображения.ownerDocument;
	
	ОсновнойЭлементФормы = ОтображаемыйДокумент.getElementById("main");
	
	Если ОсновнойЭлементФормы = Неопределено Тогда
		Возврат; // Не загружены данные HTML-документа
	КонецЕсли;
	
	Если Не ПоследнийБлокСообщений = Неопределено Тогда
		БлокСообщений = ОтображаемыйДокумент.getElementById(ПоследнийБлокСообщений.БлокСообщений);
	КонецЕсли;
	
	ПредставлениеОтправителя = ?(Строка.ИдентификаторОтправителя = ИдентификаторОрганизации, 
			ПредставлениеОрганизации, ПредставлениеКонтрагента);
	
	ВыводитьДату = ПоследнийБлокСообщений = Неопределено Или Не НачалоДня(Строка.Дата) = НачалоДня(ПоследнийБлокСообщений.Дата);
	ВыводитьОтправителя = ПоследнийБлокСообщений = Неопределено
		Или Не ПредставлениеОтправителя = ПоследнийБлокСообщений.ПредставлениеОтправителя;
	
	СторонаОтправки = ?(Строка.ИдентификаторОтправителя = ИдентификаторОрганизации, "sent", "received");
	
	ИдентификаторЭлемента = СтрШаблон("message_%1", СтрЗаменить(Строка.ИдентификаторСообщения, "-", ""));
	
	Сообщение = ОтображаемыйДокумент.getElementById(ИдентификаторЭлемента);
	
	Если Сообщение = Неопределено Тогда
		
		Если ВыводитьДату Тогда
			
			Маркер = ОтображаемыйДокумент.createElement("div");
			Маркер.className = "marker";
			ОсновнойЭлементФормы.append(Маркер);
			
			Блок = ОтображаемыйДокумент.createElement("div");
			Блок.className = "marker__block";
			Маркер.append(Блок);
			
			Дата = ОтображаемыйДокумент.createElement("div");
			Дата.className = "marker__block__date";
			Блок.append(Дата);
			
			Текст = ОтображаемыйДокумент.createElement("span");
			Текст.innerText = Формат(Строка.Дата, "ДФ=dd.MM.yy");
			Текст.className = "marker__block__date__text";
			Дата.append(Текст);
			
		КонецЕсли;
		
		Если ПоследнийБлокСообщений = Неопределено 
				Или ВыводитьОтправителя 
				Или Не Строка.СистемноеСообщение = ПоследнийБлокСообщений.СистемноеСообщение 
				Или (Строка.Дата - ПоследнийБлокСообщений.Дата > 60) Тогда
			Секция = ОтображаемыйДокумент.createElement("section");
			Секция.className = "section";
			ОсновнойЭлементФормы.append(Секция);
			
			КлассыСообщения = Новый Массив;
			КлассыСообщения.Добавить("messages__block");
			КлассыСообщения.Добавить(СторонаОтправки);
			
			БлокСообщений = ОтображаемыйДокумент.createElement("div");
			БлокСообщений.className = СтрСоединить(КлассыСообщения, " ");
			БлокСообщений.id = СтрШаблон("block_%1", СтрЗаменить(Новый УникальныйИдентификатор, "-", ""));
			Секция.append(БлокСообщений);
			
		КонецЕсли;
		
		Если ВыводитьОтправителя Тогда
			
			КлассыСообщения = Новый Массив;
			КлассыСообщения.Добавить("message");
			КлассыСообщения.Добавить(СтрШаблон("message__%1", СторонаОтправки));
			КлассыСообщения.Добавить(СтрШаблон("message__%1_user", СторонаОтправки));
			
			Отправитель = ОтображаемыйДокумент.createElement("div");
			Отправитель.innerText = ПредставлениеОтправителя;
			Отправитель.className = СтрСоединить(КлассыСообщения, " ");
			БлокСообщений.append(Отправитель);
			
			
		КонецЕсли;
		
		КлассыСообщения = Новый Массив;
		КлассыСообщения.Добавить("message");
		
		Если ВыводитьОтправителя Тогда
			КлассыСообщения.Добавить(СтрШаблон("message__%1_dialog_start", СторонаОтправки));
		Иначе
			КлассыСообщения.Добавить(СтрШаблон("message__%1", СторонаОтправки));
		КонецЕсли;
		
		Сообщение = ОтображаемыйДокумент.createElement("div");
		Сообщение.className = СтрСоединить(КлассыСообщения, " ");
		Сообщение.id = ИдентификаторЭлемента;
		БлокСообщений.append(Сообщение);
		
	КонецЕсли;
	
	НомерСистемногоСообщения = ДокументыEDIИнтеграцияКлиент.НомерСистемногоСообщения(Строка);
	ТребуетсяВыводитьВремя = ПоследнийБлокСообщений = Неопределено Или Не НачалоМинуты(Строка.Дата) = НачалоМинуты(ПоследнийБлокСообщений.Дата)
		Или НомерСистемногоСообщения = 1;
	
	Если Не ПустаяСтрока(Строка.Заголовок) Тогда
		ДокументыEDIИнтеграцияКлиент.ЗаполнитьЭлемент(МодульОтображения, ИдентификаторЭлемента, "title", "span", Сообщение, "message__system_text_title", Строка.Заголовок);
	КонецЕсли;
	
	Если ТребуетсяВыводитьВремя Или Строка.ИдентификаторОтправителя = ИдентификаторОрганизации Тогда
		
		МетаданныеСообщения = ДокументыEDIИнтеграцияКлиент.ЗаполнитьЭлемент(МодульОтображения, ИдентификаторЭлемента, "metadata", "span", Сообщение, "message__metadata");
		Если ТребуетсяВыводитьВремя Тогда
			ДокументыEDIИнтеграцияКлиент.ЗаполнитьЭлемент(МодульОтображения, ИдентификаторЭлемента, "time", "span", МетаданныеСообщения, "message__metadata__time", Формат(Строка.Дата, "ДФ=HH:mm"));
		КонецЕсли;
		
	КонецЕсли;
	
	Если Строка.ИдентификаторОтправителя = ИдентификаторОрганизации И Не НомерСистемногоСообщения > 1 Тогда
		
		КлассыСообщения = Новый Массив;
		КлассыСообщения.Добавить("message__metadata__status");
		
		Если Строка.Статус = ДокументыEDIИнтеграцияКлиент.ИдентификаторСтатусаДоставкиОжидает() Тогда
			КлассыСообщения.Добавить("message__metadata__status_pending");
		ИначеЕсли Строка.Статус = ДокументыEDIИнтеграцияКлиентСервер.ИдентификаторСтатусаДоставкиОтправлен() Тогда
			КлассыСообщения.Добавить("message__metadata__status_almost-sent");
		ИначеЕсли Строка.Статус = ДокументыEDIИнтеграцияКлиент.ИдентификаторСтатусаДоставкиПолучен() Тогда
			КлассыСообщения.Добавить("message__metadata__status_sent");
		ИначеЕсли Строка.Статус = ДокументыEDIИнтеграцияКлиент.ИдентификаторСтатусаДоставкиПрочитан() Тогда
			КлассыСообщения.Добавить("message__metadata__status_success");
		КонецЕсли;
		
		ДокументыEDIИнтеграцияКлиент.ЗаполнитьЭлемент(МодульОтображения, ИдентификаторЭлемента, "status", "span", МетаданныеСообщения, КлассыСообщения);
		
		ДокументыEDIИнтеграцияКлиент.ЗаполнитьЭлемент(МодульОтображения, ИдентификаторЭлемента, "br", "br", Сообщение);
		
	КонецЕсли;
	
	Если ТребуетсяВыводитьВремя Или (Строка.ИдентификаторОтправителя = ИдентификаторОрганизации И Не ДокументыEDIИнтеграцияКлиент.НомерСистемногоСообщения(Строка) > 1) Тогда
		ДокументыEDIИнтеграцияКлиент.ЗаполнитьЭлемент(МодульОтображения, ИдентификаторЭлемента, "br", "br", Сообщение);
	КонецЕсли;
	
	Если ПустаяСтрока(Строка.Гиперссылка) Тогда
		ДокументыEDIИнтеграцияКлиент.ЗаполнитьЭлемент(МодульОтображения, ИдентификаторЭлемента, "description", "span", Сообщение, "message__system_text_description", Строка.Текст);
	Иначе
		БлокСсылка = ДокументыEDIИнтеграцияКлиент.ЗаполнитьЭлемент(МодульОтображения, ИдентификаторЭлемента, "div", "div", Сообщение, СтрШаблон("message__%1_file", СторонаОтправки));;
		Ссылка = ДокументыEDIИнтеграцияКлиент.ЗаполнитьЭлемент(МодульОтображения, ИдентификаторЭлемента, "link", "a", БлокСсылка, СтрШаблон("message__%1_file__link", СторонаОтправки));
		Ссылка.setAttribute("href", Строка.Гиперссылка);
		ДокументыEDIИнтеграцияКлиент.ЗаполнитьЭлемент(МодульОтображения, ИдентификаторЭлемента, "description", "span", Ссылка, "message__sent_file message__system_text_description", Строка.Текст);
	КонецЕсли;
	
	НовоеПоследнееСообщение = Новый Структура;
	НовоеПоследнееСообщение.Вставить("Дата"                     , Строка.Дата);
	НовоеПоследнееСообщение.Вставить("ПредставлениеОрганизации" , ПредставлениеОрганизации);
	НовоеПоследнееСообщение.Вставить("ПредставлениеКонтрагента" , ПредставлениеКонтрагента);
	НовоеПоследнееСообщение.Вставить("Отправитель"              , Строка.ИдентификаторОтправителя);
	НовоеПоследнееСообщение.Вставить("ПредставлениеОтправителя" , ПредставлениеОтправителя);
	НовоеПоследнееСообщение.Вставить("БлокСообщений"            , БлокСообщений.id);
	НовоеПоследнееСообщение.Вставить("СистемноеСообщение"       , Строка.СистемноеСообщение);
	
	Если Строка.ИдентификаторОтправителя = ИдентификаторОрганизации Тогда
		НовоеПоследнееСообщение.ПредставлениеОрганизации = Строка.ИдентификаторОтправителя;
	Иначе
		НовоеПоследнееСообщение.ПредставлениеКонтрагента = Строка.ИдентификаторОтправителя;
	КонецЕсли;
	
	ПоследнийБлокСообщений = НовоеПоследнееСообщение;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиСообщенияHTML()
	
	Если МодульОтображения() = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Строка Из ТабличнаяЧастьСообщений Цикл
		ВывестиСообщениеHTML(Строка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСообщенияHTML()
	
	МодульОтображения = МодульОтображения();
	
	Если МодульОтображения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоследнийБлокСообщений = Неопределено;
	
	ОтображаемыйДокумент = МодульОтображения.ownerDocument;
	
	ОсновнойЭлементФормы = ОтображаемыйДокумент.getElementById("main");
	
	Если ОсновнойЭлементФормы = Неопределено Тогда
		Возврат; // Не загружены данные HTML-документа
	КонецЕсли;
	
	КоличествоЭлементов = ОсновнойЭлементФормы.children.length;
	
	Для Счетчик = 1 По КоличествоЭлементов Цикл
		
		Сообщение = ОсновнойЭлементФормы.children[КоличествоЭлементов - Счетчик];
		
		ИмяТега = НРег(Сообщение.nodeName);
		
		Если ИмяТега = "div" Или ИмяТега = "section" Тогда
			Сообщение.remove();
		КонецЕсли;
		
	КонецЦикла
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСтатусыСообщенийWSS()
	
	Если Не ПротоколВзаимодействияПодключен Тогда
		Возврат;
	КонецЕсли;
	
	СтатусыСообщений = Новый Массив;
	СтатусыСообщений.Добавить(ДокументыEDIИнтеграцияКлиент.ИдентификаторСтатусаДоставкиОжидает());
	СтатусыСообщений.Добавить(ДокументыEDIИнтеграцияКлиентСервер.ИдентификаторСтатусаДоставкиОтправлен());
	СтатусыСообщений.Добавить(ДокументыEDIИнтеграцияКлиент.ИдентификаторСтатусаДоставкиПолучен());
	СтатусыСообщений.Добавить(ДокументыEDIИнтеграцияКлиент.ИдентификаторСтатусаДоставкиПрочитан());
	
	ЦелевойСтатус = ?(ОтображатьПротоколВзаимодействия, 
		ДокументыEDIИнтеграцияКлиент.ИдентификаторСтатусаДоставкиПрочитан(),
		ДокументыEDIИнтеграцияКлиент.ИдентификаторСтатусаДоставкиПолучен());
	
	СообщенияКИзменениюСтатуса = Новый Массив;
	ИндексЦелевогоСтатуса = СтатусыСообщений.Найти(ЦелевойСтатус);
	ИдентификаторОрганизации = ИдентификаторОрганизации;
	
	ИдентификаторыНепрочитанныхСообщений = Новый Массив;
	ТребуетсяОбновитьСтатусДокумента = Ложь;
	
	Для каждого СведенияОСообщении Из ТабличнаяЧастьСообщений Цикл
		
		Если СведенияОСообщении.СистемноеСообщение 
			И Не СведенияОСообщении.ИдентификаторОтправителя = ИдентификаторОрганизации
			И Не СведенияОСообщении.Статус = ДокументыEDIИнтеграцияКлиент.ИдентификаторСтатусаДоставкиПрочитан() Тогда
			
			ТребуетсяОбновитьСтатусДокумента = Истина;
			
		КонецЕсли;
		
		ИдентификаторСообщения = СтрРазделить(СведенияОСообщении.ИдентификаторСообщения, "#")[0]; 
		
		Если СтатусыСообщений.Найти(СведенияОСообщении.Статус) < ИндексЦелевогоСтатуса 
				И Не СведенияОСообщении.ИдентификаторОтправителя = ИдентификаторОрганизации Тогда
			СообщенияКИзменениюСтатуса.Добавить(ИдентификаторСообщения);
			СведенияОСообщении.Статус = ЦелевойСтатус;
		КонецЕсли;
		
		Если Не СведенияОСообщении.Статус = ДокументыEDIИнтеграцияКлиент.ИдентификаторСтатусаДоставкиПрочитан()
				И Не СведенияОСообщении.ИдентификаторОтправителя = ИдентификаторОрганизации Тогда
			
			ИдентификаторыНепрочитанныхСообщений.Добавить(ИдентификаторСообщения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СообщенияКИзменениюСтатуса.Количество() > 0 Тогда
		УстановитьСтатусСообщенияWSS(СообщенияКИзменениюСтатуса, ЦелевойСтатус);
	КонецЕсли;
	
	ИдентификаторыНепрочитанныхСообщений  = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ИдентификаторыНепрочитанныхСообщений);
	НовоеКоличествоНепрочитанныхСообщений = ИдентификаторыНепрочитанныхСообщений.Количество();
	
	Если Не КоличествоНепрочитанныхСообщений = НовоеКоличествоНепрочитанныхСообщений Тогда
		КоличествоНепрочитанныхСообщений = НовоеКоличествоНепрочитанныхСообщений;
		ОбновитьОтображениеФормы();
	КонецЕсли;
	
	Если ТребуетсяОбновитьСтатусДокумента Тогда
		ПолучитьДанныеДокумента();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьСообщенияWSS(ДанныеОтвета)
	
	Для каждого ДанныеСообщения Из ДанныеОтвета Цикл
		
		ИдентификаторСообщения   = ДанныеСообщения["MessageID"];
		
		НайденныеСтроки = ТабличнаяЧастьСообщений.НайтиСтроки(Новый Структура("ИдентификаторСообщения", ИдентификаторСообщения));
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			СведенияОСообщении = ТабличнаяЧастьСообщений.Добавить();
			СведенияОСообщении.ИдентификаторСообщения = ИдентификаторСообщения;
		Иначе
			СведенияОСообщении = НайденныеСтроки[0];
		КонецЕсли;
		
		СведенияОСообщении.ИдентификаторОтправителя = ДанныеСообщения["SenderID"];
		СведенияОСообщении.Дата                     = ДокументыEDIИнтеграцияКлиент.ДатаИзJSON(ДанныеСообщения["Date"]);
		СведенияОСообщении.Заголовок                = ДанныеСообщения["Header"];
		СведенияОСообщении.Текст                    = ДанныеСообщения["Text"];
		СведенияОСообщении.Гиперссылка              = ДанныеСообщения["Link"];
		СведенияОСообщении.Статус                   = ДанныеСообщения["Status"];
		СведенияОСообщении.ДатаИзмерения            = ДокументыEDIИнтеграцияКлиент.ДатаИзJSON(ДанныеСообщения["EditDate"]);
		СведенияОСообщении.СистемноеСообщение       = ДанныеСообщения["SystemMessage"];
		
		ВывестиСообщениеHTML(СведенияОСообщении);
	КонецЦикла;
	
	ОтправитьСтатусыСообщенийWSS();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСообщениеWSS(ТекстЗаголовкаСообщения, ТекстСообщения)
	
	ЗапросHTTP = ДокументыEDIИнтеграцияКлиент.НовыйЗапросHTTP();
	
	ЗапросHTTP.МетодHTTP  = "POST";
	ЗапросHTTP.Адрес      = "/protocol/{ProtocolID}/messages";
	ЗапросHTTP.ТипЗапроса = ДокументыEDIИнтеграцияКлиент.ИдентификаторЗапросаОтправитьСообщение();
	
	ЗапросHTTP.ПараметрыURL.Вставить("ProtocolID"  , ИдентификаторПротоколаВзаимодействия);
	
	ЗапросHTTP.Заголовки.Вставить("OrganizationID" , ИдентификаторОрганизации);
	
	ДанныеЗапроса = Новый Структура;
	ДанныеЗапроса.Вставить("MessageID" , Строка(Новый УникальныйИдентификатор));
	ДанныеЗапроса.Вставить("Date"      , ДокументыEDIИнтеграцияКлиент.ТекущаяДатаJSON());
	ДанныеЗапроса.Вставить("Header"    , ТекстЗаголовкаСообщения);
	ДанныеЗапроса.Вставить("Text"      , ТекстСообщения);
	
	ЗапросHTTP.ТекстЗапроса = ДанныеВJSON(ДанныеЗапроса);
	
	ОтправитьСообщениеHTTP(ЗапросHTTP);
	
	СтрокаСообщения = Новый Структура;
	
	СтрокаСообщения = ТабличнаяЧастьСообщений.Добавить();
	СтрокаСообщения.ИдентификаторСообщения   = ДанныеЗапроса.MessageID;
	СтрокаСообщения.ИдентификаторОтправителя = ИдентификаторОрганизации;
	СтрокаСообщения.Дата                     = ТекущаяДата();
	СтрокаСообщения.Заголовок                = ДанныеЗапроса.Header;
	СтрокаСообщения.Текст                    = ДанныеЗапроса.Text;
	СтрокаСообщения.Статус                   = ДокументыEDIИнтеграцияКлиент.ИдентификаторСтатусаДоставкиОжидает();
	
	ВывестиСообщениеHTML(СтрокаСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьСообщениеWSS(ДанныеСобытия)
	
	ДанныеСообщения               = ДанныеСообщения(ДанныеСобытия);
	
	Если ДанныеСообщения.ТипЗапроса = ДокументыEDIИнтеграцияКлиент.ИдентификаторЗапросаНайтиПротокол() И ДанныеСообщения.КодСостояния = 200 Тогда
		
		ПротоколВзаимодействияПодключен     = Истина;
		ИдентификаторПротоколаВзаимодействия = ДанныеСообщения.ДанныеОтвета["id"];
		
		ТабличнаяЧастьСообщений.Очистить();
		
		ПолучитьСообщенияWSS(ДанныеСообщения.ДанныеОтвета);
		ПодписатьсяНаИзмененияWSS();
		
		ОбновитьОтображениеФормы();
		
	ИначеЕсли ДанныеСообщения.ТипЗапроса = ДокументыEDIИнтеграцияКлиент.ИдентификаторЗапросаНайтиПротокол() 
		И ДанныеСообщения.КодСостояния = 404 Тогда
		
		ВыполнитьПоискПротоколаВзаимодействия();
		
	ИначеЕсли ДанныеСообщения.ТипЗапроса = ДокументыEDIИнтеграцияКлиент.ИдентификаторЗапросаНайтиПротокол() Тогда
		
		ПротоколВзаимодействияПодключен      = Ложь;
		ИдентификаторПротоколаВзаимодействия = "";
		
		ОбновитьОтображениеФормы();
		
	ИначеЕсли ДанныеСообщения.ТипЗапроса = ДокументыEDIИнтеграцияКлиент.ИдентификаторЗапросаПолучитьСообщения() 
		И ДанныеСообщения.КодСостояния = 200 Тогда
		
		ПрочитатьСообщенияWSS(ДанныеСообщения.ДанныеОтвета);
		
	ИначеЕсли ДанныеСообщения.ТипЗапроса = ДокументыEDIИнтеграцияКлиент.ИдентификаторЗапросаОтправитьСообщение() 
		И ДанныеСообщения.КодСостояния = 200 Тогда
		
		
		
	ИначеЕсли ДанныеСообщения.ТипЗапроса = ДокументыEDIИнтеграцияКлиент.ИдентификаторЗапросаОтправитьСообщение() Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не удалось отправить сообщение'"));
		
	ИначеЕсли ДанныеСообщения.АдресЗапроса = ДокументыEDIИнтеграцияКлиент.АдресЗапросаНовыеСообщения() Тогда
		
		ПолучитьНовыеСообщенияWSS(ДанныеСообщения.ДанныеОтвета);
		
	ИначеЕсли ДанныеСообщения.ТипЗапроса = ДокументыEDIИнтеграцияКлиент.ИдентификаторЗапросаПолучитьНовоеСообщение() 
		И ДанныеСообщения.КодСостояния = 200 Тогда
		
		ПрочитатьСообщенияWSS(ДанныеСообщения.ДанныеОтвета);
		
	ИначеЕсли ДанныеСообщения.ТипЗапроса = ДокументыEDIИнтеграцияКлиент.ИдентификаторЗапросаУстановитьСтатусСообщения() 
		И ДанныеСообщения.КодСостояния = 200 Тогда
			
		
		
	ИначеЕсли ДанныеСообщения.ЯвляетсяОшибкой Тогда
		
		
		
	Иначе
		
		ТекстИсключения = СтрШаблон(НСтр("ru = 'Не удалось обработать сообщение: %1.'"), ДанныеСобытия);
		ВызватьИсключение(ТекстИсключения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусСообщенияWSS(ИдентификаторыСообщений, Статус)
	
	ЗапросHTTP = ДокументыEDIИнтеграцияКлиент.НовыйЗапросHTTP();
	
	ЗапросHTTP.МетодHTTP  = "PATCH";
	ЗапросHTTP.Адрес      = "/protocol/{ProtocolID}/messages";
	ЗапросHTTP.ТипЗапроса = ДокументыEDIИнтеграцияКлиент.ИдентификаторЗапросаУстановитьСтатусСообщения();
	
	ЗапросHTTP.Заголовки.Вставить("OrganizationID" , ИдентификаторОрганизации);
	
	ЗапросHTTP.ПараметрыURL.Вставить("ProtocolID"  , ИдентификаторПротоколаВзаимодействия);
	
	ИдентификаторыСообщений = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ИдентификаторыСообщений);
	
	ДанныеЗапроса = Новый Структура;
	ДанныеЗапроса.Вставить("Status", Статус);
	ДанныеЗапроса.Вставить("Messages", ИдентификаторыСообщений);
	
	ЗапросHTTP.ТекстЗапроса = ДанныеВJSON(ДанныеЗапроса);
	
	ОтправитьСообщениеHTTP(ЗапросHTTP);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьНовыеСообщенияWSS(ИдентификаторыСообщений)
	
	Для каждого ИдентификаторСообщения Из ИдентификаторыСообщений Цикл
		
		ЗапросHTTP = ДокументыEDIИнтеграцияКлиент.НовыйЗапросHTTP();
		
		ЗапросHTTP.МетодHTTP  = "GET";
		ЗапросHTTP.Адрес      = "/protocol/{ProtocolID}/messages/{MessageID}";
		ЗапросHTTP.ТипЗапроса = ДокументыEDIИнтеграцияКлиент.ИдентификаторЗапросаПолучитьНовоеСообщение();
		
		ЗапросHTTP.Заголовки.Вставить("OrganizationID" , ИдентификаторОрганизации);
		
		ЗапросHTTP.ПараметрыURL.Вставить("ProtocolID" , ИдентификаторПротоколаВзаимодействия);
		ЗапросHTTP.ПараметрыURL.Вставить("MessageID"  , ИдентификаторСообщения);
		
		ОтправитьСообщениеHTTP(ЗапросHTTP);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область КомандыWSS

&НаКлиенте
Процедура ПодключитьПротоколВзаимодействияЗавершение(Токен, ДополнительныеПараметры) Экспорт

	ДокументыEDIИнтеграцияКлиент.ВыполнитьПодключениеWSS(МодульВзаимодействия(), Токен);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСообщениеHTTPПослеПолученияТокена(Токен, ДополнительныеПараметры) Экспорт
	
	Если Токен = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросHTTP                 = ДополнительныеПараметры.ЗапросHTTP;
	
	Для каждого ПараметрURL Из ЗапросHTTP.ПараметрыURL Цикл
		ИмяПараметра = СтрШаблон("{%1}", ПараметрURL.Ключ);
		ЗапросHTTP.Адрес = СтрЗаменить(ЗапросHTTP.Адрес, ИмяПараметра, ПараметрURL.Значение);
	КонецЦикла;
	
	ЗапросHTTP.Заголовки.Вставить("Authorization"  , Токен);
	
	ТекстСообщения = КонвертироватьЗапрос(ЗапросHTTP);
	
	НоваяСтрока = ОтправленныеЗапросы.Добавить();
	НоваяСтрока.ИдентификаторЗапроса = ЗапросHTTP.ИдентификаторЗапроса;
	НоваяСтрока.ТипЗапроса           = ЗапросHTTP.ТипЗапроса;
	
	ПараметрыПодключенияWSS = ДокументыEDIИнтеграцияКлиент.ПараметрыПодключенияWSS();
	
	МодульВзаимодействия().publishMessage(ПараметрыПодключенияWSS.ОчередьСообщений, ТекстСообщения);

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСообщениеHTTP(ЗапросHTTP)
	
	Если Не ПротоколВзаимодействияПодключен Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЗапросHTTP"                 , ЗапросHTTP);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьСообщениеHTTPПослеПолученияТокена", ЭтотОбъект, ДополнительныеПараметры);
	
	НачатьПолучениеТокена(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьсяНаИзмененияWSS()
	
	МодульВзаимодействия().subscribeByRoutingKey(ДокументыEDIИнтеграцияКлиент.ПараметрыПодключенияWSS().ИмяОбмена, 
		ИдентификаторПротоколаВзаимодействия);
	
КонецПроцедуры

#КонецОбласти 

#Область Прочее

&НаКлиенте
Процедура ОбработатьПереходПоСсылке(НавигационнаяСсылка)
	Перем ЗначенияПараметров;
	
	Если ДокументыEDIИнтеграцияКлиент.НавигационнаяСсылкаСоответствуетШаблону(НавигационнаяСсылка, 
		ДокументыEDIИнтеграцияКлиент.ШаблонНавигационнойСсылкиВерсияДокумента(), ЗначенияПараметров) Тогда
		
		ПараметрыСравнения = РаботаСВерсиямиEDIКлиент.НовыйПараметрыПросмотра(ЭтотОбъект);
		ПараметрыСравнения.ТипДокумента           = ТипДокумента;
		ПараметрыСравнения.Документ               = ЗначенияПараметров.ИдентификаторДокумента;
		ПараметрыСравнения.Версия                 = ЗначенияПараметров.ВерсияДокумента;
		ПараметрыСравнения.Организация            = Организация;
		ПараметрыСравнения.ПредставлениеДокумента = СтрШаблон(
			НСтр("ru = '%1 №%2 от %3'"), 
			ТипДокумента,
			НомерДокумента,
			Формат(ДатаДокумента, "ДЛФ=DD;"));
		
		РаботаСВерсиямиEDIКлиент.ОткрытьФормуСравненияИПросмотраВерсий(ПараметрыСравнения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСообщениеПротоколаВзаимодействия(ДанныеСобытия)
	
	ИмяСобытия      = ДанныеСобытия.Event.propertyName;
	ПараметрСобытия = ДанныеСобытия.Event.data;
	
	Если ИмяСобытия = ДокументыEDIИнтеграцияКлиент.ИдентификаторСобытияСоединениеУстановлено() Тогда
		
		КоличествоНеудачныхПопытокПодключения = 0;
		ПротоколВзаимодействияПодключен = Истина;
		ВыполнитьПоискПротоколаВзаимодействия();
		
	ИначеЕсли ИмяСобытия = ДокументыEDIИнтеграцияКлиент.ИдентификаторСобытияСоединениеРазорвано() 
		И КоличествоНеудачныхПопытокПодключения < ДокументыEDIИнтеграцияКлиент.МаксимальноеКоличествоПопытокПодключения() Тогда
		
		КоличествоНеудачныхПопытокПодключения = КоличествоНеудачныхПопытокПодключения + 1;
		ПротоколВзаимодействияПодключен = Ложь;
		ПодключитьПротоколВзаимодействия();
		
	ИначеЕсли ИмяСобытия = ДокументыEDIИнтеграцияКлиент.ИдентификаторСобытияСообщение() Тогда
		
		ПрочитатьСообщениеWSS(ПараметрСобытия);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияПолученияСообщений()
	
	МодульВзаимодействия = МодульВзаимодействия();
	
	Если МодульВзаимодействия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НовыеСообщения = МодульВзаимодействия.getNewData();
	
	Для НомерСообщения = 1 По НовыеСообщения.length Цикл
		
		НовоеСообщение = НовыеСообщения[НомерСообщения - 1];
		
		ДанныеСобытия = Новый Структура;
		ДанныеСобытия.Вставить("Event"   , НовоеСообщение);
		ДанныеСобытия.Вставить("Element" , Новый Структура("id", ""));
		ДанныеСобытия.Вставить("Href"    , "");
		
		ОбработатьСообщениеПротоколаВзаимодействия(ДанныеСобытия);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область РаботаСТокенами

&НаСервереБезКонтекста
Функция ЗапуститьПолучениеТокенАвторизации(Организация, ИдентификаторФормы)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(ИдентификаторФормы);
	
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, "БизнесСеть.ТокенДоступаОрганизации", Организация);
	
КонецФункции

&НаКлиенте
Процедура НачатьПолучениеТокена(ОписаниеОповещения)
	
	ДлительнаяОперация = ЗапуститьПолучениеТокенАвторизации(Организация, УникальныйИдентификатор);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	
	ОписаниеОповещенияПолученияТокена = Новый ОписаниеОповещения("ПолучениеТокенаОкончание", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОписаниеОповещенияПолученияТокена, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеТокенаОкончание(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения = Неопределено Или Не РезультатВыполнения.Статус = "Выполнено" Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, Неопределено);
		Возврат;
	КонецЕсли;
	
	ДанныеТокена = ПолучитьИзВременногоХранилища(РезультатВыполнения.АдресРезультата);
	
	ТокенДоступа              = ДанныеТокена.ТокенДоступа;
	СрокДействияТокенаДоступа = ДанныеТокена.СрокДействияТокенаДоступа;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, ТокенДоступа);
	
КонецПроцедуры

#КонецОбласти

#Область ПакетыWSS

&НаКлиенте
Функция ДанныеВJSON(Данные)
	
	#Если ВебКлиент Тогда
		
		Возврат ДокументыEDIИнтеграцияКлиент.ЗначениеВСтрокуJSON(Данные);
		
	#Иначе
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		
		ЗаписатьJSON(ЗаписьJSON, Данные);
		
		Возврат ЗаписьJSON.Закрыть();
		
	#КонецЕсли
	
КонецФункции

&НаКлиенте
Функция ДанныеИзJSON(Текст)
	
	#Если ВебКлиент Тогда
		
		Возврат ДокументыEDIИнтеграцияКлиент.ЗначениеИзСтрокиJSON(Текст);
		
	#Иначе
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Текст);
		
		Данные = ПрочитатьJSON(ЧтениеJSON, Истина);
		
		ЧтениеJSON.Закрыть();
		
		Возврат Данные;
		
	#КонецЕсли
	
КонецФункции

&НаКлиенте
Функция ПакетЗапроса()
	
	ПакетЗапроса = Новый Структура;
	
	ПакетЗапроса.Вставить("URL"             , "");
	ПакетЗапроса.Вставить("Method"          , "");
	ПакетЗапроса.Вставить("ParametersQuery" , Новый Массив);
	ПакетЗапроса.Вставить("ParametersURL"   , Новый Массив);
	ПакетЗапроса.Вставить("Headers"         , Новый Массив);
	ПакетЗапроса.Вставить("Data"            , "");
	ПакетЗапроса.Вставить("RequestID"       , "");
	
	Возврат ПакетЗапроса;
	
КонецФункции

&НаКлиенте
Функция ПодставитьПараметрыВСтроку(Шаблон, Параметры)
	
	Результат = Шаблон;
	
	Для каждого Параметр Из Параметры Цикл
		Результат = СтрЗаменить(Результат, СтрШаблон("{%1}", Параметр.Ключ), Параметр.Значение);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ЗаголовокЗапроса()
	
	ЗаголовокЗапроса = Новый Структура;
	
	ЗаголовокЗапроса.Вставить("Key"   , "");
	ЗаголовокЗапроса.Вставить("Value" , "");
	
	Возврат ЗаголовокЗапроса;
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьСоответствие(Результат, Соответствие)
	
	Для каждого КлючИЗначение Из Соответствие Цикл
		
		ЗаголовокЗапроса = ЗаголовокЗапроса();
		ЗаголовокЗапроса.Key   = КлючИЗначение.Ключ;
		ЗаголовокЗапроса.Value = КлючИЗначение.Значение;
		
		Результат.Добавить(ЗаголовокЗапроса);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция КонвертироватьЗапрос(ЗапросHTTP)
	
	ПакетЗапроса = ПакетЗапроса();
	
	ПакетЗапроса.URL       = ПодставитьПараметрыВСтроку(ЗапросHTTP.Адрес, ЗапросHTTP.ПараметрыURL);
	ПакетЗапроса.Method    = ЗапросHTTP.МетодHTTP;
	ПакетЗапроса.Data      = ЗапросHTTP.ТекстЗапроса;
	ПакетЗапроса.RequestID = ЗапросHTTP.ИдентификаторЗапроса;
	ЗаписатьСоответствие(ПакетЗапроса.ParametersQuery, ЗапросHTTP.ПараметрыЗапроса);
	ЗаписатьСоответствие(ПакетЗапроса.ParametersURL  , ЗапросHTTP.ПараметрыURL);
	ЗаписатьСоответствие(ПакетЗапроса.Headers        , ЗапросHTTP.Заголовки);
	
	Возврат ДанныеВJSON(ПакетЗапроса);
	
КонецФункции

&НаКлиенте
Функция ДанныеСообщения(ТекстСообщения)
	
	Данные = ДанныеИзJSON(ТекстСообщения);
	
	ДанныеСообщения = Новый Структура;
	
	ДанныеСообщения.Вставить("ContentType"          , Данные["Headers"]["Content-Type"]);
	ДанныеСообщения.Вставить("КодСостояния"         , Данные["Code"]);
	ДанныеСообщения.Вставить("ЯвляетсяОшибкой"      , Данные["Headers"]["Content-Type"] = "application/problem+json");
	ДанныеСообщения.Вставить("ИдентификаторЗапроса" , Данные["Headers"]["RequestID"]);
	ДанныеСообщения.Вставить("АдресЗапроса"         , Данные["Headers"]["RequestURL"]);
	ДанныеСообщения.Вставить("ТипЗапроса"           , "");
	
	Если ПустаяСтрока(Данные["ResponseBody"]) Тогда
		ДанныеСообщения.Вставить("ДанныеОтвета"     , Неопределено);
	Иначе
		ДанныеСообщения.Вставить("ДанныеОтвета"     , ДанныеИзJSON(Данные["ResponseBody"]));
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ИдентификаторЗапроса" , ДанныеСообщения.ИдентификаторЗапроса);
	СтруктураПоиска.Вставить("ОтветПолучен"         , Ложь);
	
	СтрокиОтправленныхЗапросов = ОтправленныеЗапросы.НайтиСтроки(СтруктураПоиска);
	
	Если Не СтрокиОтправленныхЗапросов.Количество() = 0 Тогда
		
		СтрокаЗапроса =СтрокиОтправленныхЗапросов[0];
		СтрокаЗапроса.ОтветПолучен = Истина;
		
		ДанныеСообщения.ТипЗапроса = СтрокаЗапроса.ТипЗапроса;
		
	КонецЕсли;
	
	Возврат ДанныеСообщения;
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаДокумента

&НаКлиенте
Процедура ПослеЗагрузкиДокумента(РезультатЗагрузки, ДополнительныеПараметры) Экспорт
	
	ПрикладнойОбъект = ПолучитьПрикладнойОбъект(ИдентификаторВСервисе, ТипДокумента);
	
	Если ПрикладнойОбъект = Неопределено Или ПрикладнойОбъект.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, ПрикладнойОбъект);
	Закрыть();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПрикладнойОбъект(ИдентификаторВСервисе, ТипДокумента)
	
	ДанныеПрикладногоОбъекта = РегистрыСведений.СостоянияДокументовEDI.ДанныеПрикладногоОбъектаПоДаннымСервиса(
		ИдентификаторВСервисе, ТипДокумента);
	
	Если ДанныеПрикладногоОбъекта  = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДанныеПрикладногоОбъекта.ПрикладнойОбъект;
	
КонецФункции

#КонецОбласти

#Область КомандыДокумента

&НаСервере
Процедура УдалитьКомандыДокумента()
	
	Для каждого КомандаДокумента Из КомандыДокумента Цикл
		
		ИмяКоманды = КомандаДокумента.ИмяКоманды;
		
		ЭлементФормы = Элементы.Найти(ИмяКоманды);
		
		Если Не ЭлементФормы = Неопределено Тогда
			Элементы.Удалить(ЭлементФормы);
		КонецЕсли;
		
		КомандаФормы = Команды.Найти(ИмяКоманды);
		
		Если Не КомандаФормы = Неопределено Тогда
			Команды.Удалить(КомандаФормы);
		КонецЕсли;
		
	КонецЦикла;
	
	КомандыДокумента.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьКомандыДокумента(КомандыСервиса)
	
	УдалитьКомандыДокумента();
	
	Для каждого КомандаСервиса Из КомандыСервиса Цикл
		
		ИдентификаторПеречисления = ОбщегоНазначения.ИмяЗначенияПеречисления(КомандаСервиса.Ключ);
		
		НоваяСтрока = КомандыДокумента.Добавить();
		НоваяСтрока.ДействиеДокумента         = КомандаСервиса.Ключ;
		НоваяСтрока.ИмяКоманды                = СтрШаблон("ВыполнитьКомандуДокумента_%1", ИдентификаторПеречисления);
		НоваяСтрока.Порядок                   = КомандаСервиса.Значение.Порядок;
		НоваяСтрока.ЯвляетсяОсновнымДействием = КомандаСервиса.Значение.ОсновнаяКоманда;
		
	КонецЦикла;
	
	КомандыДокумента.Сортировать("Порядок");
	
	ДоступноОсновноеДействиеДокумента = Ложь;
	
	Для каждого КомандаДокумента Из КомандыДокумента Цикл
		
		СведенияОКоманде = КомандыСервиса[КомандаДокумента.ДействиеДокумента];
		
		Команда = Команды.Добавить(КомандаДокумента.ИмяКоманды);
		Команда.Действие = "Подключаемый_ВыполнитьКомандуДокумента";
		Команда.Отображение = ОтображениеКнопки.КартинкаИТекст;
		УстановитьПредставлениеКоманды(Команда, СведенияОКоманде.Представление, СведенияОКоманде.Пояснение, 
			СведенияОКоманде.Картинка);
		
		Если КомандаДокумента.ЯвляетсяОсновнымДействием Тогда
			
			УстановитьПредставлениеКоманды(Команды["ВыполнитьОсновнуюКомандуДокумента"], СведенияОКоманде.Представление, 
				СведенияОКоманде.Пояснение, СведенияОКоманде.Картинка);
			
		КонецЕсли;
		
		ЭлементФормы = Элементы.Добавить(КомандаДокумента.ИмяКоманды, Тип("КнопкаФормы"), 
			Элементы.ГруппаДоступныеДействияДокумента);
		
		ЭлементФормы.Вид                  = ВидКнопкиФормы.Гиперссылка;
		ЭлементФормы.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
		ЭлементФормы.ИмяКоманды           = КомандаДокумента.ИмяКоманды;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
