#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МассивИсключаемыхЗначений = Новый Массив;
	МассивИсключаемыхЗначений.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НаПрочиеАктивы")); // устаревшее значение.
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПроизводство") Тогда
		МассивИсключаемыхЗначений.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты"));
		МассивИсключаемыхЗначений.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьПроизводства"));
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("БазоваяВерсия") Тогда
		МассивИсключаемыхЗначений.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов"));
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("УправлениеТорговлей") Тогда
		МассивИсключаемыхЗначений.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы"));
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОбъектамВозникновенияЗатрат") Тогда
		МассивИсключаемыхЗначений.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НаОбъектыВозникновенияЗатрат"));
	КонецЕсли;
	
	Если Параметры.Свойство("ТипРасходов") Тогда
		Если НЕ (Параметры.ТипРасходов = Перечисления.ТипыРасходов.ЗакупкаТоваров ИЛИ Параметры.ТипРасходов = Перечисления.ТипыРасходов.СкладскоеХранение) Тогда
			МассивИсключаемыхЗначений.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров"));
		КонецЕсли;
		Если НЕ Параметры.ТипРасходов = Перечисления.ТипыРасходов.ПроизводствоПродукции Тогда
			МассивИсключаемыхЗначений.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьПроизводства"));
		КонецЕсли;
		Если НЕ Параметры.ТипРасходов = Перечисления.ТипыРасходов.ПродажаТоваров Тогда
			МассивИсключаемыхЗначений.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьПродаж"));
		КонецЕсли;
		Если НЕ Параметры.ТипРасходов = Перечисления.ТипыРасходов.ФормированиеСтоимостиВНА Тогда
			МассивИсключаемыхЗначений.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы"));
		КонецЕсли;
		Если НЕ (Параметры.ТипРасходов = Перечисления.ТипыРасходов.ПрочиеРасходы ИЛИ Параметры.ТипРасходов = Перечисления.ТипыРасходов.ФормированиеСтоимостиВНА) Тогда
			МассивИсключаемыхЗначений.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты"));
		КонецЕсли;
		Если НЕ Параметры.ТипРасходов = Перечисления.ТипыРасходов.ВозникновениеЗатратНаОбъектах Тогда
			МассивИсключаемыхЗначений.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НаОбъектыВозникновенияЗатрат"));
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("ВариантРаспределенияРасходовРегл") Тогда
		Если Параметры.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности ИЛИ 
				Параметры.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов ИЛИ 
				Параметры.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НеРаспределять Тогда
			МассивИсключаемыхЗначений.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьПродаж"));
			МассивИсключаемыхЗначений.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НаОбъектыВозникновенияЗатрат"));
		КонецЕсли;
		Если Параметры.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности Тогда
			Если Параметры.Свойство("ТипРасходов") 
				И (Параметры.ТипРасходов = Перечисления.ТипыРасходов.ЗакупкаТоваров 
					ИЛИ Параметры.ТипРасходов = Перечисления.ТипыРасходов.СкладскоеХранение) 
				Тогда
				МассивИсключаемыхЗначений.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НеРаспределять"));
			КонецЕсли;
		КонецЕсли;
		Если Параметры.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов Тогда
			МассивИсключаемыхЗначений.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров"));
			МассивИсключаемыхЗначений.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьПроизводства"));
		КонецЕсли;
		Если Параметры.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НеРаспределять Тогда
			МассивИсключаемыхЗначений.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров"));
			МассивИсключаемыхЗначений.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьПроизводства"));
		КонецЕсли;
	КонецЕсли;
	
	ОбщегоНазначенияУТВызовСервера.ДоступныеДляВыбораЗначенияПеречисления(
		"ВариантыРаспределенияРасходов",
		ДанныеВыбора,
		Параметры,
		МассивИсключаемыхЗначений);
		
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс
// Возвращает признак использования правил распределения у вариантов распределения. 
// 
// Параметры:
//  ВариантРаспределенияРасходов - ПеречислениеСсылка.ВариантыРаспределенияРасходов - Вариант распределения расходов
//  КлючВариантаРаспределения - Строка - Определяет для кого вида учета анализировать признак использования правила
// 
// Возвращаемое значение:
//  Булево - Истина = использует, Ложь = не использует
//
Функция ВариантИспользуетПравилоРаспределения(ВариантРаспределенияРасходов, КлючВариантаРаспределения = Неопределено) Экспорт
	
	Если КлючВариантаРаспределения <> Неопределено И КлючВариантаРаспределения = "ВариантРаспределенияНал" Тогда
		Возврат ВариантИспользуетПравилоРаспределенияНУ(ВариантРаспределенияРасходов);
	КонецЕсли;
	
	ВариантыСПравиламиРаспределения = Новый Массив;
	ВариантыСПравиламиРаспределения.Добавить(Перечисления.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты);
	ВариантыСПравиламиРаспределения.Добавить(Перечисления.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов);
	ВариантыСПравиламиРаспределения.Добавить(Перечисления.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров);
	
	Если ПолучитьФункциональнуюОпцию("ФормироватьФинансовыйРезультат") Тогда
		ВариантыСПравиламиРаспределения.Добавить(Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности);
	КонецЕсли;
	
	Возврат НЕ ВариантыСПравиламиРаспределения.Найти(ВариантРаспределенияРасходов) = Неопределено;
	
КонецФункции
		
// Возвращает признак использования правил распределения у вариантов распределения для налогового учета.
// 
// Параметры:
//  ВариантРаспределенияРасходов - ПеречислениеСсылка.ВариантыРаспределенияРасходов - Вариант распределения расходов
// 
// Возвращаемое значение:
//  Булево - Истина = использует, Ложь = не использует
//
Функция ВариантИспользуетПравилоРаспределенияНУ(ВариантРаспределенияРасходов) Экспорт
	
	ВариантыСПравиламиРаспределения = Новый Массив;
	ВариантыСПравиламиРаспределения.Добавить(Перечисления.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты);
	ВариантыСПравиламиРаспределения.Добавить(Перечисления.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов);
	ВариантыСПравиламиРаспределения.Добавить(Перечисления.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров);
	
	Возврат НЕ ВариантыСПравиламиРаспределения.Найти(ВариантРаспределенияРасходов) = Неопределено;
	
КонецФункции

// Возвращает признак отсутствия настроек распределения у варианта распределения. 
// 
// Параметры:
//  ВариантРаспределенияРасходов - ПеречислениеСсылка.ВариантыРаспределенияРасходов - Вариант распределения расходов
// 
// Возвращаемое значение:
//  Булево - Истина = настроек нет, Ложь = настройки есть
//
Функция ВариантБезРаспределения(ВариантРаспределенияРасходов) Экспорт
	
	ВариантыБезРаспределения = Новый Массив;
	ВариантыБезРаспределения.Добавить(Перечисления.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы);
	ВариантыБезРаспределения.Добавить(Перечисления.ВариантыРаспределенияРасходов.НаОбъектыВозникновенияЗатрат);
	ВариантыБезРаспределения.Добавить(Перечисления.ВариантыРаспределенияРасходов.НаПрочиеАктивы);
	ВариантыБезРаспределения.Добавить(Перечисления.ВариантыРаспределенияРасходов.НеРаспределять);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ФормироватьФинансовыйРезультат") Тогда
		ВариантыБезРаспределения.Добавить(Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности);
	КонецЕсли;
	
	Возврат НЕ ВариантыБезРаспределения.Найти(ВариантРаспределенияРасходов) = Неопределено;
	
КонецФункции

// Возвращает признак отсутствия настроек распределения у варианта распределения для налогового учета. 
// 
// Параметры:
//  ВариантРаспределенияРасходов - ПеречислениеСсылка.ВариантыРаспределенияРасходов - Вариант распределения расходов
// 
// Возвращаемое значение:
//  Булево - Истина = настроек нет, Ложь = настройки есть
//
Функция ВариантБезРаспределенияНУ(ВариантРаспределенияРасходов) Экспорт
	
	ВариантыБезРаспределения = Новый Массив;
	ВариантыБезРаспределения.Добавить(Перечисления.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы);
	ВариантыБезРаспределения.Добавить(Перечисления.ВариантыРаспределенияРасходов.НаОбъектыВозникновенияЗатрат);
	ВариантыБезРаспределения.Добавить(Перечисления.ВариантыРаспределенияРасходов.НаПрочиеАктивы);
	ВариантыБезРаспределения.Добавить(Перечисления.ВариантыРаспределенияРасходов.НеРаспределять);
	ВариантыБезРаспределения.Добавить(Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности);
	
	Возврат НЕ ВариантыБезРаспределения.Найти(ВариантРаспределенияРасходов) = Неопределено;
	
КонецФункции
#КонецОбласти