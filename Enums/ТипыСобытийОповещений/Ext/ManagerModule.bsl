#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает признак необходимости настройки регламентного задания.
//
// Параметры:
//  ТипСобытия  - ПеречислениеСсылка.ТипыСобытийОповещений - тип события оповещения, для которого получается признак.
//
// Возвращаемое значение:
//   Булево   - Истина, если настройка требуется.
//
Функция ТребуетсяНастройкаРегламентногоЗадания(ТипСобытия) Экспорт
	
	Если ТипСобытия = Перечисления.ТипыСобытийОповещений.ПросроченнаяЗадолженность
		ИЛИ ТипСобытия = Перечисления.ТипыСобытийОповещений.ПоздравлениеСДнемРождения
		ИЛИ ТипСобытия = Перечисления.ТипыСобытийОповещений.ПлановыеПлатежи
		ИЛИ ТипСобытия = Перечисления.ТипыСобытийОповещений.ПлановыеОтгрузки 
		ИЛИ ТипСобытия = Перечисления.ТипыСобытийОповещений.ОкончаниеОпроса Тогда
	
		Возврат Истина;
	
	Иначе
	
		Возврат МодификацияКонфигурацииПереопределяемый.ДляТипаСобытияТребуетсяНастройкаРегламентногоЗадания(ТипСобытия);
	
	КонецЕсли
	
КонецФункции

// Возвращает настройки типов событий, которые требуются при обработке очереди рассылок и оповещений.
//
// Параметры:
//  ТипСобытия  - ПеречислениеСсылка.ТипыСобытийОповещений - тип события оповещения, для которого получаются настройки.
//
// Возвращаемое значение:
//   Структура   - содержит настройки:
//     *  ПутьККонтактномуЛицу - Строка -путь к контактному лицу объекта оповещения от источника оповещения.
//     *  ОтправлятьПартнеру - Булево - признак того, что оповещения по типу можно отправлять партнерам.
//     *  ОтправлятьКонтактнымЛицамОбъектаОповещения - Булево - признак того, что оповещения по типу можно контактному
//                                                             лицу объекта оповещения.
//     *  ОтправлятьКонтактнымЛицамПартнера - Булево - признак того, что оповещения по типу можно отправлять контактным
//                                                    лицам партнера.
//     *  Имя - Строка - имя перечисления.
//
Функция ДанныеДляОбработкиОчередиОповещений(ТипСобытия) Экспорт
	
	СтруктураДанных = СтруктураДанныхДляОповещения();
	
	Если ТипСобытия = Перечисления.ТипыСобытийОповещений.ПоздравлениеСДнемРождения Тогда
		
		СтруктураДанных.ПутьККонтактномуЛицу                             = "";
		СтруктураДанных.ОтправлятьПартнеру                               = Ложь;
		СтруктураДанных.ОтправлятьКонтактнымЛицамПартнера                = Ложь;
		СтруктураДанных.Имя                                              = "ПоздравлениеСДнемРождения";
		
	ИначеЕсли ТипСобытия = Перечисления.ТипыСобытийОповещений.ПросроченнаяЗадолженность Тогда
		
		СтруктураДанных.ОтправлятьКонтактнымЛицамОбъектаОповещения       = Ложь;
		СтруктураДанных.Имя                                              = "ПросроченнаяЗадолженность";
		
	ИначеЕсли ТипСобытия = Перечисления.ТипыСобытийОповещений.ПлановыеПлатежи Тогда
		
		СтруктураДанных.ОтправлятьКонтактнымЛицамОбъектаОповещения       = Ложь;
		СтруктураДанных.Имя                                              = "ПлановыеПлатежи";
		
	ИначеЕсли ТипСобытия = Перечисления.ТипыСобытийОповещений.НачислениеБонусов Тогда
		
		СтруктураДанных.ОтправлятьКонтактнымЛицамОбъектаОповещения       = Ложь;
		СтруктураДанных.Имя                                              = "НачислениеБонусов";
		СтруктураДанных.ДоступноДляИспользования                         = ПолучитьФункциональнуюОпцию("ИспользоватьБонусныеПрограммыЛояльности")
		                                                                    И ПравоДоступа("Чтение", Метаданные.Документы.НачислениеИСписаниеБонусныхБаллов)
		                                                                    И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.БонусныеБаллы);
		
	ИначеЕсли ТипСобытия = Перечисления.ТипыСобытийОповещений.СписаниеБонусов Тогда
		
		СтруктураДанных.ОтправлятьКонтактнымЛицамОбъектаОповещения       = Ложь;
		СтруктураДанных.Имя                                              = "СписаниеБонусов";
		СтруктураДанных.ДоступноДляИспользования                         = ПолучитьФункциональнуюОпцию("ИспользоватьБонусныеПрограммыЛояльности")
		                                                                    И ПравоДоступа("Чтение", Метаданные.Документы.НачислениеИСписаниеБонусныхБаллов)
		                                                                    И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.БонусныеБаллы);
		
	ИначеЕсли ТипСобытия = Перечисления.ТипыСобытийОповещений.ИзменениеСостоянияЗаказа Тогда
		
		СтруктураДанных.ПутьККонтактномуЛицу                             = ".КонтактноеЛицо";
		СтруктураДанных.Имя                                              = "ИзменениеСостоянияЗаказа";
		СтруктураДанных.ВШаблонеДоступнаВнешняяСсылка                    = Истина;
		СтруктураДанных.МетаданныеИсточникаОповещения                    = Метаданные.Документы.ЗаказКлиента;
		СтруктураДанных.ДоступноДляИспользования                         = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыКлиентов")
																			И ПравоДоступа("Чтение", Метаданные.Документы.ЗаказКлиента);
		
	ИначеЕсли ТипСобытия = Перечисления.ТипыСобытийОповещений.ПлановыеОтгрузки Тогда
		
		СтруктураДанных.ПутьККонтактномуЛицу                             = ".КонтактноеЛицо";
		СтруктураДанных.Имя                                              = "ПлановыеОтгрузки";
		СтруктураДанных.ДоступноДляИспользования                         = ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.РаспоряженияНаОтгрузку);
		
	ИначеЕсли ТипСобытия = Перечисления.ТипыСобытийОповещений.ВыпискаСчета Тогда
		
		СтруктураДанных.ПутьККонтактномуЛицу                             = ".КонтактноеЛицо";
		СтруктураДанных.Имя                                              = "ВыпискаСчета";
		СтруктураДанных.ВШаблонеДоступнаВнешняяСсылка                    = Истина;
		СтруктураДанных.МетаданныеИсточникаОповещения                    = Метаданные.Документы.СчетНаОплатуКлиенту;
		СтруктураДанных.ДоступноДляИспользования                         = ПолучитьФункциональнуюОпцию("ИспользоватьСчетаНаОплатуКлиентам")
																			И ПравоДоступа("Чтение", Метаданные.Документы.СчетНаОплатуКлиенту);
		
	ИначеЕсли ТипСобытия = Перечисления.ТипыСобытийОповещений.АннулированиеСчета Тогда
		
		СтруктураДанных.ПутьККонтактномуЛицу                             = ".КонтактноеЛицо";
		СтруктураДанных.Имя                                              = "АннулированиеСчета";
		СтруктураДанных.ВШаблонеДоступнаВнешняяСсылка                    = Истина;
		СтруктураДанных.МетаданныеИсточникаОповещения                    = Метаданные.Документы.СчетНаОплатуКлиенту;
		СтруктураДанных.ДоступноДляИспользования                         = ПолучитьФункциональнуюОпцию("ИспользоватьСчетаНаОплатуКлиентам")
																			И ПравоДоступа("Чтение", Метаданные.Документы.СчетНаОплатуКлиенту);
		
	ИначеЕсли ТипСобытия = Перечисления.ТипыСобытийОповещений.ИзменениеСчета Тогда
		
		СтруктураДанных.ПутьККонтактномуЛицу                             = ".КонтактноеЛицо";
		СтруктураДанных.Имя                                              = "ИзменениеСчета";
		СтруктураДанных.ВШаблонеДоступнаВнешняяСсылка                    = Истина;
		СтруктураДанных.МетаданныеИсточникаОповещения                    = Метаданные.Документы.СчетНаОплатуКлиенту;
		СтруктураДанных.ДоступноДляИспользования                         = ПолучитьФункциональнуюОпцию("ИспользоватьСчетаНаОплатуКлиентам")
																			И ПравоДоступа("Чтение", Метаданные.Документы.СчетНаОплатуКлиенту);
		
	ИначеЕсли ТипСобытия = Перечисления.ТипыСобытийОповещений.ПоступлениеОплатыОтКлиента Тогда
		
		СтруктураДанных.ОтправлятьКонтактнымЛицамОбъектаОповещения       = Ложь;
		СтруктураДанных.Имя                                              = "ПоступлениеОплатыОтКлиента";
		СтруктураДанных.ДоступноДляИспользования                         = ПравоДоступа("Чтение", Метаданные.Документы.ПриходныйКассовыйОрдер)
																			И ПравоДоступа("Чтение", Метаданные.Документы.ПоступлениеБезналичныхДенежныхСредств)
																			И ПравоДоступа("Чтение", Метаданные.Документы.ОперацияПоПлатежнойКарте)
																			И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.РасчетыСКлиентами);
		
	ИначеЕсли ТипСобытия = Перечисления.ТипыСобытийОповещений.ОкончаниеОпроса Тогда
		
		СтруктураДанных.ОтправлятьКонтактнымЛицамОбъектаОповещения       = Ложь;
		СтруктураДанных.Имя                                              = "ОкончаниеОпроса";
		СтруктураДанных.ДоступноДляИспользования                         = ПолучитьФункциональнуюОпцию("ИспользоватьАнкетирование");

		
	Иначе
		
		МодификацияКонфигурацииПереопределяемый.НастройкиТипаСобытияДляОбработкиОчередиОповещений(ТипСобытия, СтруктураДанных);
		
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СтруктураДанныхДляОповещения()

	СтруктураДанных = Новый Структура;

	СтруктураДанных.Вставить("ПутьККонтактномуЛицу", Неопределено);
	СтруктураДанных.Вставить("ОтправлятьКонтактнымЛицамОбъектаОповещения", Истина);
	СтруктураДанных.Вставить("ОтправлятьПартнеру", Истина);
	СтруктураДанных.Вставить("ОтправлятьКонтактнымЛицамПартнера", Истина);
	СтруктураДанных.Вставить("ВШаблонеДоступнаВнешняяСсылка", Ложь);
	СтруктураДанных.Вставить("МетаданныеИсточникаОповещения", Неопределено);
	СтруктураДанных.Вставить("ДоступноДляИспользования", Истина);
	СтруктураДанных.Вставить("Имя", Ложь);
	
	Возврат СтруктураДанных;
	
КонецФункции 

#КонецОбласти

#КонецЕсли
