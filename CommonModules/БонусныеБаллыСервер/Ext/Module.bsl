
#Область ПрограммныйИнтерфейс

// Распределение срочных бонусных баллов регламентное задание.
// 
Процедура РаспределениеСрочныхБонусныхБалловРегламентноеЗадание() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.РаспределениеСрочныхБонусныхБаллов);

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьБонусныеПрограммыЛояльности") Тогда
		Возврат
	КонецЕсли;
		
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Распределение срочных бонусных баллов'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Начато регламентное распределение срочных бонусных баллов.'"));
	
	ДатаНачалаРаботыМеханизмаБонусныхБаллов_2_5 = Константы.ДатаНачалаРаботыМеханизмаБонусныхБаллов_2_5.Получить();
	КоличествоОбработанныхДанных = 0;
	
	// Обработать возврат списания бонусных баллов (преобразовать в начисление)
	РаспределениеУспешно = Истина;
	ПовторитьОбработку = Истина;
	Пока ПовторитьОбработку Цикл
		ТекстОшибки = "";
		
		КоличествоОбработанныхДокументов = ОбработатьВозвратыСписанийБонусныхБаллов(
			ДатаНачалаРаботыМеханизмаБонусныхБаллов_2_5,,
			ТекстОшибки);
			
		КоличествоОбработанныхДанных = КоличествоОбработанныхДанных + КоличествоОбработанныхДокументов;
		
		ПовторитьОбработку = НЕ (КоличествоОбработанныхДокументов = 0);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			РаспределениеУспешно = Ложь;
			ТекстСообщения = НСтр("ru = 'При выполнении обработки возвратов списаний бонусных баллов произошла ошибка: %1'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1", ТекстОшибки);
			
			ЗаписьЖурналаРегистрации(
				НСтр(
					"ru = 'Обработка возврата списания бонусных баллов'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка, , ,
				ТекстСообщения);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Постановка к обработке документов начисления и списания
	РаспределениеУспешно = Истина;
	ПовторитьПостановку = Истина;
	Пока ПовторитьПостановку Цикл
		ТекстОшибки = "";
		КоличествоОбработанныхДокументов = ПоставитьКОбработкеДокументыНачисленияИСписанияПослеВозвратаРеализации(ДатаНачалаРаботыМеханизмаБонусныхБаллов_2_5,, ТекстОшибки);
		КоличествоОбработанныхДанных = КоличествоОбработанныхДанных + КоличествоОбработанныхДокументов;
		ПовторитьПостановку = НЕ (КоличествоОбработанныхДокументов = 0);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			РаспределениеУспешно = Ложь;
			ТекстСообщения = НСтр("ru = 'При выполнении постановке к обработке документов начисения и списания произошла ошибка: %1'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1", ТекстОшибки);
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Постановка к обработке документов начисления и списания'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка, , ,
				ТекстСообщения);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Распредеяем только если все возвраты успешно поставили к обработке
	Если РаспределениеУспешно Тогда
		КоличествоОбработанныхДанных = 0;
		Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
			"РегламентноеЗадание.РаспределениеСрочныхБонусныхБаллов.РаспределитьСписаниеСрочныхБонусныхБалловВСтатусеКОбработке_х100");
		
		ПовторитьРаспределение = Истина;
		Пока ПовторитьРаспределение Цикл
			ТекстОшибки = "";
			КоличествоОбработанныхДокументов = РаспределитьСписаниеСрочныхБонусныхБалловВСтатусеКОбработке(ДатаНачалаРаботыМеханизмаБонусныхБаллов_2_5,, ТекстОшибки);
			КоличествоОбработанныхДанных = КоличествоОбработанныхДанных + КоличествоОбработанныхДокументов;
			ПовторитьРаспределение = НЕ (КоличествоОбработанныхДокументов = 0);
			Если ЗначениеЗаполнено(ТекстОшибки) Тогда
				РаспределениеУспешно = Ложь;
				ТекстСообщения = НСтр("ru = 'При выполнении распределения списания срочных баллов произошла ошибка: %1'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1", ТекстОшибки);
				
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Распределение срочных бонусных баллов'", ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка, , ,
					ТекстСообщения);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(Замер, Окр(КоличествоОбработанныхДанных/100));
	КонецЕсли;
	
	// Списываем только если все успешно распределили
	Если РаспределениеУспешно Тогда
		КоличествоОбработанныхДанных = 0;
		Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
			"РегламентноеЗадание.РаспределениеСрочныхБонусныхБаллов.СписатьОстаткиСрочныхБонусныхБалловСИстекшимСрокомДействия");
		
		ПовторитьСписание = Истина;
		Пока ПовторитьСписание Цикл
			ТекстОшибки = "";
			КоличествоОбработанныхДокументов = СписатьОстаткиСрочныхБонусныхБалловСИстекшимСрокомДействия(ДатаНачалаРаботыМеханизмаБонусныхБаллов_2_5, Неопределено, ТекстОшибки);
			КоличествоОбработанныхДанных = КоличествоОбработанныхДанных + КоличествоОбработанныхДокументов;
			ПовторитьСписание = НЕ (КоличествоОбработанныхДокументов = 0);
			Если ЗначениеЗаполнено(ТекстОшибки) Тогда
				
				ТекстСообщения = НСтр("ru = 'При выполнении списания остатков срочных баллов произошла ошибка: %1'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1", ТекстОшибки);
				
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Распределение срочных бонусных баллов'", ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка, , ,
					ТекстСообщения);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(Замер, КоличествоОбработанныхДанных);		
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Распределение срочных бонусных баллов'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Закончено регламентное распределение срочных бонусных баллов.'"));
	
КонецПроцедуры

// Формирует список шаблонов заданий очереди.
//
// Параметры:
//  СоответствиеИменПсевдонимам - см. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков
//
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.РаспределениеСрочныхБонусныхБаллов.ИмяМетода);
	
КонецПроцедуры

// Требуется добавить движения по регистру Бонусные баллы
// Параметры:
//	ДокументСсылка - ДокументСсылка - ссылка, значения реквизитов которого необходимо получить.
//
// Возвращаемое значение:
// Булево - признак добавить движения по регистру Бонусные баллы.
//
Функция ТребуетсяДобавитьДвиженияПоРегиструБонусныеБаллы(ДокументСсылка) Экспорт
	
	ДатаНачалаРаботыМеханизмаБонусныхБаллов_2_5 = Константы.ДатаНачалаРаботыМеханизмаБонусныхБаллов_2_5.Получить();
	ДатаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "Дата");
	ЭтоМеханизмБонусныхБаллов_2_5 = Ложь;
	Если НачалоДня(ДатаДокумента) >= НачалоДня(ДатаНачалаРаботыМеханизмаБонусныхБаллов_2_5) Тогда
		ЭтоМеханизмБонусныхБаллов_2_5 = Истина;
	КонецЕсли;
	
	Если (ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") 
		ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента"))
			И ЭтоМеханизмБонусныхБаллов_2_5 Тогда
		РТУ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ДокументРеализации");
		Если ЗначениеЗаполнено(РТУ) Тогда
			ДатаДокументаРеализации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РТУ, "Дата");
			Если НачалоДня(ДатаДокументаРеализации)< НачалоДня(ДатаНачалаРаботыМеханизмаБонусныхБаллов_2_5) Тогда
				ЭтоМеханизмБонусныхБаллов_2_5 = Ложь;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.КорректировкаРеализации") 
			И ЭтоМеханизмБонусныхБаллов_2_5 Тогда
		РТУ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ДокументОснование");
		Если ЗначениеЗаполнено(РТУ) Тогда
			ДатаДокументаРеализации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РТУ, "Дата");
			Если НачалоДня(ДатаДокументаРеализации)< НачалоДня(ДатаНачалаРаботыМеханизмаБонусныхБаллов_2_5) Тогда
				ЭтоМеханизмБонусныхБаллов_2_5 = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат ЭтоМеханизмБонусныхБаллов_2_5;
	
КонецФункции

#Область ОбработкаВозвратаСписанийБонусныхБаллов

// Преобразовать возвраты списаний бонусных баллов в начисления для дальнейшей обработки.
// 
// Параметры:
//  ДатаНачалаРаботыМеханизмаБонусныхБаллов_2_5 - Дата - Дата начала работы механизма бонусных баллов 2_5
//  РазмерПорции - Число - Количество записей к обработке
//  ТекстОшибки - Строка - Текст сообщения об ошибке
// 
// Возвращаемое значение:
//  Число - Количество обработнных документов, к которым было применено распределение
Функция ОбработатьВозвратыСписанийБонусныхБаллов(ДатаНачалаРаботыМеханизмаБонусныхБаллов_2_5, РазмерПорции = Неопределено, ТекстОшибки = "") Экспорт
	
	РезультатЗапроса = РезультатЗапросаВозвратыСписания(ДатаНачалаРаботыМеханизмаБонусныхБаллов_2_5, РазмерПорции);
	
	ТаблицаВозвратовСписанийПоПартнеру = Новый ТаблицаЗначений;
	ТаблицаВозвратовСписанийПоПартнеру.Колонки.Добавить("БонуснаяПрограммаЛояльности");
	ТаблицаВозвратовСписанийПоПартнеру.Колонки.Добавить("Партнер");
	ТаблицаВозвратовСписанийПоПартнеру.Колонки.Добавить("Период");
	ТаблицаВозвратовСписанийПоПартнеру.Колонки.Добавить("ДокументВозвратаСписания");
	ТаблицаВозвратовСписанийПоПартнеру.Колонки.Добавить("ДокументСписания");
	ТаблицаВозвратовСписанийПоПартнеру.Колонки.Добавить("ДокументСписанияДатаКОбработке");
	ТаблицаВозвратовСписанийПоПартнеру.Колонки.Добавить("ДокументСписанияДатаНачалаДействия");
	ТаблицаВозвратовСписанийПоПартнеру.Колонки.Добавить("Начислено");
	
	ВыборкаВозвратыСписанийБонуснаяПрограммаЛояльности = РезультатЗапроса.Выбрать(
		ОбходРезультатаЗапроса.ПоГруппировкам,
		"БонуснаяПрограммаЛояльности");
	
	КоличествоОбработанныхДокументов = 0;
	Пока ВыборкаВозвратыСписанийБонуснаяПрограммаЛояльности.Следующий() Цикл
		
		ВыборкаВозвратыСписанийПартнер = ВыборкаВозвратыСписанийБонуснаяПрограммаЛояльности.Выбрать(
			ОбходРезультатаЗапроса.ПоГруппировкам,
			"Партнер");
		
		Пока ВыборкаВозвратыСписанийПартнер.Следующий() Цикл
			
			ВыборкаВозвратыСписанийДетали = ВыборкаВозвратыСписанийПартнер.Выбрать();
			
			ТаблицаВозвратовСписанийПоПартнеру.Очистить();
			Пока ВыборкаВозвратыСписанийДетали.Следующий() Цикл
				СтрокаТаблицаВозвратовСписанийПоПартнеру = ТаблицаВозвратовСписанийПоПартнеру.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицаВозвратовСписанийПоПартнеру, ВыборкаВозвратыСписанийДетали);
			КонецЦикла;
			
			Для Каждого СтрокаТаблицаВозвратовСписанийПоПартнеру Из ТаблицаВозвратовСписанийПоПартнеру Цикл
				
				НачатьТранзакцию();
				
				Попытка
					
					ПреобразоватьВозвратСписанияВНачисление(СтрокаТаблицаВозвратовСписанийПоПартнеру);
					
					ЗафиксироватьТранзакцию();
					КоличествоОбработанныхДокументов = КоличествоОбработанныхДокументов + 1;
					
				Исключение
					
					Если ТранзакцияАктивна() Тогда
						ОтменитьТранзакцию();
					КонецЕсли;
					ИнформацияОбОшибке = ИнформацияОбОшибке();
					ТекстОшибки = ИнформацияОбОшибке.Описание;
					Прервать;
					
				КонецПопытки;
				
			КонецЦикла;
				
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат КоличествоОбработанныхДокументов;
	
КонецФункции

// Возвращает результат запроса, содержащий возвраты списаний бонусных баллов к обработке
// 
// Параметры:
//  ДатаНачалаРаботыМеханизмаБонусныхБаллов_2_5 - Дата - Дата начала работы механизма бонусных баллов 2_5
//  РазмерПорции - Число - Количество записей к обработке. По умолчанию = 1000
// 
// Возвращаемое значение:
//  РезультатЗапроса - Результат запроса, содержащий возвраты списаний бонусных баллов к обработке
//
Функция РезультатЗапросаВозвратыСписания(
          	ДатаНачалаРаботыМеханизмаБонусныхБаллов_2_5,
          	РазмерПорции = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	БонусныеБаллыВозвратСписания.Период КАК Период,
	|	БонусныеБаллыВозвратСписания.Регистратор КАК ДокументВозвратаСписания,
	|	БонусныеБаллыСписание.Регистратор КАК ДокументСписания,
	|	БонусныеБаллыСписание.ДатаКОбработке КАК ДокументСписанияДатаКОбработке,
	|	БонусныеБаллыСписание.ДатаНачалаДействия КАК ДокументСписанияДатаНачалаДействия,
	|	БонусныеБаллыВозвратСписания.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
	|	БонусныеБаллыВозвратСписания.Партнер КАК Партнер,
	|	БонусныеБаллыВозвратСписания.Начислено КАК Начислено
	|ИЗ
	|	РегистрНакопления.БонусныеБаллы КАК БонусныеБаллыВозвратСписания
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМВозврат КАК ЧекККМВозврат
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.БонусныеБаллы КАК БонусныеБаллыСписание
	|		ПО БонусныеБаллыСписание.Регистратор = ЧекККМВозврат.ЧекККМ
	|	ПО ЧекККМВозврат.Ссылка = БонусныеБаллыВозвратСписания.Регистратор
	|	
	|ГДЕ
	|	БонусныеБаллыВозвратСписания.ДатаКОбработке >= &ДатаНачалаРаботыМеханизмаБонусныхБаллов
	|	И БонусныеБаллыВозвратСписания.ВидДвижения = &ВидДвиженияРасход
	|	И БонусныеБаллыВозвратСписания.Начислено < 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период
	|ИТОГИ ПО
	|	БонуснаяПрограммаЛояльности,
	|	Партнер";
	Запрос.УстановитьПараметр("ДатаНачалаРаботыМеханизмаБонусныхБаллов", ДатаНачалаРаботыМеханизмаБонусныхБаллов_2_5);
	Запрос.УстановитьПараметр("ВидДвиженияРасход", ВидДвиженияНакопления.Расход);
	
	Если РазмерПорции <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст , "ПЕРВЫЕ 1000", "ПЕРВЫЕ " + Формат(РазмерПорции, "ЧГ=;"));
	КонецЕсли;
	
	Возврат Запрос.Выполнить();
	
КонецФункции

// Преобразует возвраты списания в начисление
// 
// Параметры:
//  СтрокаТаблицаВозвратовСписанийПоПартнеру - СтрокаТаблицыЗначений - Документы вовзратов списаний
Процедура ПреобразоватьВозвратСписанияВНачисление(СтрокаТаблицаВозвратовСписанийПоПартнеру) Экспорт
	
	СнятьДокументСписанияСОбработки = Истина;
	
	ДокументСписанияДатаКОбработке = СтрокаТаблицаВозвратовСписанийПоПартнеру.ДокументСписанияДатаКОбработке;
	ДокументСписанияДатаНачалаДействия = СтрокаТаблицаВозвратовСписанийПоПартнеру.ДокументСписанияДатаНачалаДействия;
	
	Партнер  = СтрокаТаблицаВозвратовСписанийПоПартнеру.Партнер;
	БонуснаяПрограммаЛояльности  = СтрокаТаблицаВозвратовСписанийПоПартнеру.БонуснаяПрограммаЛояльности;
	
	ДокументСписания = СтрокаТаблицаВозвратовСписанийПоПартнеру.ДокументСписания;
	ДокументВозвратаСписания = СтрокаТаблицаВозвратовСписанийПоПартнеру.ДокументВозвратаСписания;
	
	// Установка блокировки
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.БонусныеБаллы.НаборЗаписей");
	ЭлементБлокировки.УстановитьЗначение("Регистратор", ДокументВозвратаСписания);
	
	Блокировка.Заблокировать();
	
	// Преобразование возвратов списаний к начислениями
	НаборЗаписейРНБонусныеБаллы = РегистрыНакопления.БонусныеБаллы.СоздатьНаборЗаписей();
	НаборЗаписейРНБонусныеБаллы.Отбор.Регистратор.Значение = ДокументВозвратаСписания;
	НаборЗаписейРНБонусныеБаллы.Отбор.Регистратор.Использование = Истина;
	НаборЗаписейРНБонусныеБаллы.Прочитать();
	
	Для Каждого СтрокаНаборЗаписейРНБонусныеБаллы Из НаборЗаписейРНБонусныеБаллы Цикл
		
		Если НЕ (СтрокаНаборЗаписейРНБонусныеБаллы.ДатаКОбработке <> Дата(1, 1, 1)
			И СтрокаНаборЗаписейРНБонусныеБаллы.БонуснаяПрограммаЛояльности = БонуснаяПрограммаЛояльности
			И СтрокаНаборЗаписейРНБонусныеБаллы.Партнер = Партнер) Тогда
			
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДокументСписанияДатаКОбработке) Тогда
			
			Если НЕ ЗначениеЗаполнено(ДокументСписанияДатаНачалаДействия) Тогда // Бонусные баллы бессрочные
				
				// Перобразовать возврат списаний бессрочных бонусных баллов в начисление бессрочных бонусных баллов
				СтрокаНаборЗаписейРНБонусныеБаллы.ВидДвижения = ВидДвиженияНакопления.Приход;
				СтрокаНаборЗаписейРНБонусныеБаллы.Начислено = -СтрокаНаборЗаписейРНБонусныеБаллы.Начислено;
				СтрокаНаборЗаписейРНБонусныеБаллы.ДатаКОбработке = Дата(1, 1, 1);
				
			Иначе // Бонусные баллы срочные
				
				// Перобразовать возврат списаний срочных бонусных баллов в начисление срочных бонусных баллов,
				// прекративших срок действия
				СтрокаНаборЗаписейРНБонусныеБаллы.ВидДвижения = ВидДвиженияНакопления.Приход;
				СтрокаНаборЗаписейРНБонусныеБаллы.Начислено = -СтрокаНаборЗаписейРНБонусныеБаллы.Начислено;
				СтрокаНаборЗаписейРНБонусныеБаллы.КСписанию = СтрокаНаборЗаписейРНБонусныеБаллы.Начислено;
				СтрокаНаборЗаписейРНБонусныеБаллы.ДатаНачалаДействия = ДокументСписанияДатаНачалаДействия;
				СтрокаНаборЗаписейРНБонусныеБаллы.ДатаКОбработке = Дата(1, 1, 1);
				
				// Прекращаем действие срочных бонусных баллов
				СтрокаНаборЗаписейРНБонусныеБаллыНовая = НаборЗаписейРНБонусныеБаллы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаНаборЗаписейРНБонусныеБаллыНовая, СтрокаНаборЗаписейРНБонусныеБаллы);
				СтрокаНаборЗаписейРНБонусныеБаллыНовая.Начислено = -СтрокаНаборЗаписейРНБонусныеБаллы.Начислено;
				СтрокаНаборЗаписейРНБонусныеБаллыНовая.КСписанию = -СтрокаНаборЗаписейРНБонусныеБаллы.КСписанию;
				
			КонецЕсли;
			
		Иначе
			
			Если ЗначениеЗаполнено(ДокументСписанияДатаНачалаДействия) Тогда
				
				// Перобразовать возврат списаний срочных бонусных баллов в начисление действующих срочных бонусных баллов
				СтрокаНаборЗаписейРНБонусныеБаллы.ВидДвижения = ВидДвиженияНакопления.Приход;
				СтрокаНаборЗаписейРНБонусныеБаллы.Начислено = -СтрокаНаборЗаписейРНБонусныеБаллы.Начислено;
				СтрокаНаборЗаписейРНБонусныеБаллы.КСписанию = СтрокаНаборЗаписейРНБонусныеБаллы.Начислено;
				СтрокаНаборЗаписейРНБонусныеБаллы.ДатаНачалаДействия = ДокументСписанияДатаНачалаДействия;
				
			Иначе
				
				// Убираем возврат списания с обработки
				СтрокаНаборЗаписейРНБонусныеБаллы.ДатаКОбработке = Дата(1, 1, 1);
				СнятьДокументСписанияСОбработки = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборЗаписейРНБонусныеБаллы.Записать();
	
	Если СнятьДокументСписанияСОбработки Тогда
		
		// Установка блокировки
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.БонусныеБаллы.НаборЗаписей");
		ЭлементБлокировки.УстановитьЗначение("Регистратор", ДокументСписания);
		
		Блокировка.Заблокировать();
		
		// Снятие списания с обработки, так как есть возврат, но списание и возврат не обработан
		НаборЗаписейРНБонусныеБаллы = РегистрыНакопления.БонусныеБаллы.СоздатьНаборЗаписей();
		НаборЗаписейРНБонусныеБаллы.Отбор.Регистратор.Значение = ДокументСписания;
		НаборЗаписейРНБонусныеБаллы.Отбор.Регистратор.Использование = Истина;
		НаборЗаписейРНБонусныеБаллы.Прочитать();
		
		Для Каждого СтрокаНаборЗаписейРНБонусныеБаллы Из НаборЗаписейРНБонусныеБаллы Цикл
			
			Если НЕ (СтрокаНаборЗаписейРНБонусныеБаллы.ДатаКОбработке <> Дата(1, 1, 1)
				И СтрокаНаборЗаписейРНБонусныеБаллы.БонуснаяПрограммаЛояльности = БонуснаяПрограммаЛояльности
				И СтрокаНаборЗаписейРНБонусныеБаллы.Партнер = Партнер) Тогда
				
				Продолжить;
			КонецЕсли;
			
			СтрокаНаборЗаписейРНБонусныеБаллы.ДатаКОбработке = Дата(1, 1, 1);
			
		КонецЦикла;
		
		НаборЗаписейРНБонусныеБаллы.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаспределениеСписанныхСрочныхБонусныхБалловВСтатусеКОбработке

// Поставить к повторной обработке срочные бонусные баллы в случае возврата реализации, по которой были начислены
// срочные бонусные баллы.
// 
// Параметры:
//  ДатаНачалаРаботыМеханизмаБонусныхБаллов_2_5 - Дата - Дата начала работы механизма бонусных баллов 2_5
//  РазмерПорции - Число - Количество записей к обработке
//  ТекстОшибки - Строка - Текст сообщения об ошибке
// 
// Возвращаемое значение:
//  Число - Количество обработнных документов, к которым было применено распределение.
Функция ПоставитьКОбработкеДокументыНачисленияИСписанияПослеВозвратаРеализации(ДатаНачалаРаботыМеханизмаБонусныхБаллов_2_5, РазмерПорции = Неопределено, ТекстОшибки = "") Экспорт
	
	РезультатЗапроса = РезультатЗапросаНачисленияИСписанияКОбработкеПослеВозвратаРеализации(ДатаНачалаРаботыМеханизмаБонусныхБаллов_2_5, РазмерПорции);
	
	РезультатЗапросаВозвраты = РезультатЗапроса[3];
	РезультатЗапросаНачисленияИСписания = РезультатЗапроса[5];
	
	ТаблицаВозвратовПоПартнеру = Новый ТаблицаЗначений;
	ТаблицаВозвратовПоПартнеру.Колонки.Добавить("БонуснаяПрограммаЛояльности");
	ТаблицаВозвратовПоПартнеру.Колонки.Добавить("Партнер");
	ТаблицаВозвратовПоПартнеру.Колонки.Добавить("Регистратор");
	ТаблицаВозвратовПоПартнеру.Колонки.Добавить("ДатаНачалаДействияСрочныхБонусныхБаллов");
	ТаблицаВозвратовПоПартнеру.Колонки.Добавить("ДатаОкончанияСрокаДействияСрочныхБонусныхБаллов");
	ТаблицаВозвратовПоПартнеру.Колонки.Добавить("СуммаВозврата");
	
	ТаблицаНачисленийИСписанийПоПартнеру = Новый ТаблицаЗначений;
	ТаблицаНачисленийИСписанийПоПартнеру.Колонки.Добавить("БонуснаяПрограммаЛояльности");
	ТаблицаНачисленийИСписанийПоПартнеру.Колонки.Добавить("Партнер");
	ТаблицаНачисленийИСписанийПоПартнеру.Колонки.Добавить("ВидДвижения");
	ТаблицаНачисленийИСписанийПоПартнеру.Колонки.Добавить("Регистратор");
	ТаблицаНачисленийИСписанийПоПартнеру.Колонки.Добавить("ДатаОкончанияСрокаДействияСрочныхБонусныхБаллов");
	ТаблицаНачисленийИСписанийПоПартнеру.Колонки.Добавить("ДатаНачалаДействияСрочныхБонусныхБаллов");
	ТаблицаНачисленийИСписанийПоПартнеру.Колонки.Добавить("Начислено");
	ТаблицаНачисленийИСписанийПоПартнеру.Колонки.Добавить("КСписанию");
	
	ВыборкаВозвратыБонуснаяПрограммаЛояльности = РезультатЗапросаВозвраты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "БонуснаяПрограммаЛояльности");
	ВыборкаНачисленияИСписанияБонуснаяПрограммаЛояльности = РезультатЗапросаНачисленияИСписания.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "БонуснаяПрограммаЛояльности");
	
	КоличествоОбработанныхДокументов = 0;
	Пока ВыборкаВозвратыБонуснаяПрограммаЛояльности.Следующий() Цикл
		
		ВыборкаВозвратыПартнер = ВыборкаВозвратыБонуснаяПрограммаЛояльности.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Партнер");
		
		Пока ВыборкаВозвратыПартнер.Следующий() Цикл
			
			// Получить таблицу остатков действующих срочных бонусных баллов
			ВыборкаВозвратыДетали = ВыборкаВозвратыПартнер.Выбрать();
			
			ТаблицаВозвратовПоПартнеру.Очистить();
			Пока ВыборкаВозвратыДетали.Следующий() Цикл
				СтрокаТаблицаВозвратовПоПартнеру = ТаблицаВозвратовПоПартнеру.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицаВозвратовПоПартнеру, ВыборкаВозвратыДетали);
			КонецЦикла;
			
			// Получить таблица списаний бонусных баллок к обработке
			СтруктураПоискаБонуснаяПрограммаЛояльности = Новый Структура;
			СтруктураПоискаБонуснаяПрограммаЛояльности.Вставить(
				"БонуснаяПрограммаЛояльности",
				ВыборкаВозвратыБонуснаяПрограммаЛояльности.БонуснаяПрограммаЛояльности);
				
			ВыборкаНачисленияИСписанияБонуснаяПрограммаЛояльности.Сбросить();
			Если ВыборкаНачисленияИСписанияБонуснаяПрограммаЛояльности.НайтиСледующий(СтруктураПоискаБонуснаяПрограммаЛояльности) Тогда
				
				ВыборкаНачисленияИСписанияПартнер = ВыборкаНачисленияИСписанияБонуснаяПрограммаЛояльности.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Партнер");
				
				СтруктураПоискаПартнер = Новый Структура;
				СтруктураПоискаПартнер.Вставить(
					"Партнер",
					ВыборкаВозвратыПартнер.Партнер);
				
				Если ВыборкаНачисленияИСписанияПартнер.НайтиСледующий(СтруктураПоискаПартнер) Тогда
					
					ВыборкаНачисленияИСписанияДетали = ВыборкаНачисленияИСписанияПартнер.Выбрать();
					
					ТаблицаНачисленийИСписанийПоПартнеру.Очистить();
					Пока ВыборкаНачисленияИСписанияДетали.Следующий() Цикл
						СтрокаТаблицаНачисленийИСписанийПоПартнеру = ТаблицаНачисленийИСписанийПоПартнеру.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТаблицаНачисленийИСписанийПоПартнеру, ВыборкаНачисленияИСписанияДетали);
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
			
			Для Каждого СтрокаТаблицаВозвратовПоПартнеру Из ТаблицаВозвратовПоПартнеру Цикл
				
				НачатьТранзакцию();
				
				Попытка
					
					// Снять со статуса КОбработке документы возврата реализации
					СнятьДокументыВозвратаРеализацииСоСтатусаКОбработке(СтрокаТаблицаВозвратовПоПартнеру);
					
					// Поставить в статус КОбработке документы начисления и списания, срочные бонусные баллы по которым возвращены
					НулевыеСтрокиОстатковКУдалению = ПоставитьДокументыНачисленияИСписанияСВозвращеннымиСрочнымиБонуснымиБаллами(
					    СтрокаТаблицаВозвратовПоПартнеру,
						ТаблицаНачисленийИСписанийПоПартнеру);
					
					Для Каждого СтрокаКУдалению Из НулевыеСтрокиОстатковКУдалению Цикл
						ТаблицаНачисленийИСписанийПоПартнеру.Удалить(СтрокаКУдалению);
					КонецЦикла;
					
					
					ЗафиксироватьТранзакцию();
					КоличествоОбработанныхДокументов = КоличествоОбработанныхДокументов + 1;
					
				Исключение
					
					Если ТранзакцияАктивна() Тогда
						ОтменитьТранзакцию();
					КонецЕсли;
					ИнформацияОбОшибке = ИнформацияОбОшибке();
					ТекстОшибки = ИнформацияОбОшибке.Описание;
					Прервать;
					
				КонецПопытки;
				
			КонецЦикла;
				
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат КоличествоОбработанныхДокументов;
	
КонецФункции

// Возвращает результат запроса, содержащий возвраты товаров с возвратом срочных бонусных баллов.
// 
// Параметры:
//  ДатаНачалаРаботыМеханизмаБонусныхБаллов_2_5 - Дата - Дата начала работы механизма бонусных баллов 2_5
//  РазмерПорции - Число - Количество записей к обработке. По умолчанию = 1000
// 
// Возвращаемое значение:
//  РезультатЗапроса - Результат запроса, содержащий списанные бонусные баллы к обработке
//
Функция РезультатЗапросаНачисленияИСписанияКОбработкеПослеВозвратаРеализации(
          	ДатаНачалаРаботыМеханизмаБонусныхБаллов_2_5,
          	РазмерПорции = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	БонусныеБаллыНачисления.ДатаНачалаДействия КАК ДатаНачалаДействия,
	|	НАЧАЛОПЕРИОДА(БонусныеБаллыСписания.Период, ДЕНЬ) КАК ДатаОкончанияДействия,
	|	БонусныеБаллыНачисления.Регистратор КАК Регистратор,
	|	БонусныеБаллыНачисления.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
	|	БонусныеБаллыНачисления.Партнер КАК Партнер,
	|	БонусныеБаллыНачисления.Начислено,
	|	БонусныеБаллыСписания.КСписанию
	|ПОМЕСТИТЬ ДокументыВозвратаКОбработкеНачисление
	|ИЗ
	|	РегистрНакопления.БонусныеБаллы КАК БонусныеБаллыНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.БонусныеБаллы КАК БонусныеБаллыСписания
	|		ПО БонусныеБаллыНачисления.Регистратор = БонусныеБаллыСписания.Регистратор
	|			И БонусныеБаллыСписания.ВидДвижения = &ВидДвиженияПриход
	|			И БонусныеБаллыСписания.КСписанию < 0 И БонусныеБаллыСписания.Начислено = 0
	|ГДЕ
	|	(БонусныеБаллыНачисления.Регистратор ССЫЛКА Документ.ВозвратТоваровОтКлиента
	|		ИЛИ БонусныеБаллыНачисления.Регистратор ССЫЛКА Документ.ОтчетОРозничныхВозвратах)
	|	И БонусныеБаллыНачисления.ДатаКОбработке >= &ДатаНачалаРаботыМеханизмаБонусныхБаллов
	|	И БонусныеБаллыНачисления.ДатаНачалаДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|	И БонусныеБаллыНачисления.ВидДвижения = &ВидДвиженияПриход
	|	И БонусныеБаллыНачисления.Начислено < 0 И БонусныеБаллыНачисления.КСписанию = 0
    |
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ДокументыВозвратаКОбработкеНачисление.Регистратор КАК Регистратор,
	|	БонусныеБаллыНачисления.Регистратор КАК ДокументРеализации
	|ПОМЕСТИТЬ ДокументыВозвратаКОбработке
	|ИЗ
	|	ДокументыВозвратаКОбработкеНачисление КАК ДокументыВозвратаКОбработкеНачисление
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.БонусныеБаллы КАК БонусныеБаллыНачисления
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.БонусныеБаллы КАК БонусныеБаллыСписание
	|		ПО БонусныеБаллыНачисления.Регистратор = БонусныеБаллыСписание.Регистратор
	|			И БонусныеБаллыСписание.ВидДвижения = &ВидДвиженияПриход
	|			И БонусныеБаллыСписание.КСписанию > 0 И БонусныеБаллыСписание.Начислено = 0
	|	
	|	ПО БонусныеБаллыНачисления.ДатаНачалаДействия = ДокументыВозвратаКОбработкеНачисление.ДатаНачалаДействия
	|		И БонусныеБаллыНачисления.ВидДвижения = &ВидДвиженияПриход
	|		И БонусныеБаллыНачисления.Партнер = ДокументыВозвратаКОбработкеНачисление.Партнер
	|		И БонусныеБаллыНачисления.БонуснаяПрограммаЛояльности = ДокументыВозвратаКОбработкеНачисление.БонуснаяПрограммаЛояльности
	|		И БонусныеБаллыНачисления.Начислено > 0 И БонусныеБаллыНачисления.КСписанию = 0
	|	
	|ГДЕ
	|	ДокументыВозвратаКОбработкеНачисление.ДатаОкончанияДействия = НАЧАЛОПЕРИОДА(БонусныеБаллыСписание.Период, ДЕНЬ)
    |
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БонусныеБаллы.ДатаНачалаДействия КАК ДатаНачалаДействияСрочныхБонусныхБаллов,
	|	НАЧАЛОПЕРИОДА(БонусныеБаллы.Период, ДЕНЬ) КАК ДатаОкончанияСрокаДействияСрочныхБонусныхБаллов,
	|	БонусныеБаллы.Регистратор КАК Регистратор,
	|	БонусныеБаллы.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
	|	БонусныеБаллы.Партнер КАК Партнер,
	|	СУММА(-БонусныеБаллы.КСписанию) КАК СуммаВозврата
	|ПОМЕСТИТЬ ВозвратыБонусныхБалловКОбработке
	|ИЗ
	|	РегистрНакопления.БонусныеБаллы КАК БонусныеБаллы
	|ГДЕ
	|	БонусныеБаллы.ДатаКОбработке >= &ДатаНачалаРаботыМеханизмаБонусныхБаллов
	|	И БонусныеБаллы.ДатаНачалаДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|	И БонусныеБаллы.ВидДвижения = &ВидДвиженияПриход
	|	И БонусныеБаллы.КСписанию < 0
	|	И (БонусныеБаллы.Регистратор) В
	|			(ВЫБРАТЬ
	|				ДокументыВозвратаКОбработке.Регистратор
	|			ИЗ
	|				ДокументыВозвратаКОбработке КАК ДокументыВозвратаКОбработке)
	|
	|СГРУППИРОВАТЬ ПО
	|	БонусныеБаллы.ДатаНачалаДействия,
	|	НАЧАЛОПЕРИОДА(БонусныеБаллы.Период, ДЕНЬ),
	|	БонусныеБаллы.Регистратор,
	|	БонусныеБаллы.БонуснаяПрограммаЛояльности,
	|	БонусныеБаллы.Партнер
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Партнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВозвратыБонусныхБалловКОбработке.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
	|	ВозвратыБонусныхБалловКОбработке.Партнер КАК Партнер,
	|	ВозвратыБонусныхБалловКОбработке.Регистратор КАК Регистратор,
	|	ВозвратыБонусныхБалловКОбработке.ДатаНачалаДействияСрочныхБонусныхБаллов КАК ДатаНачалаДействияСрочныхБонусныхБаллов,
	|	ВозвратыБонусныхБалловКОбработке.ДатаОкончанияСрокаДействияСрочныхБонусныхБаллов КАК ДатаОкончанияСрокаДействияСрочныхБонусныхБаллов,
	|	ВозвратыБонусныхБалловКОбработке.СуммаВозврата КАК СуммаВозврата
	|ИЗ
	|	ВозвратыБонусныхБалловКОбработке КАК ВозвратыБонусныхБалловКОбработке
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаОкончанияСрокаДействияСрочныхБонусныхБаллов
	|ИТОГИ ПО
	|	БонуснаяПрограммаЛояльности,
	|	Партнер
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1000                                                          
	|	НАЧАЛОПЕРИОДА(БонусныеБаллы.ДатаНачалаДействия, ДЕНЬ) КАК ДатаНачалаДействия,
	|	БонусныеБаллы.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
	|	БонусныеБаллы.Партнер КАК Партнер
	|ПОМЕСТИТЬ СписаниеБонусныхБалловКОбработке
	|ИЗ
	|	РегистрНакопления.БонусныеБаллы КАК БонусныеБаллы
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыВозвратаКОбработке КАК ДокументыВозвратаКОбработке
	|	ПО БонусныеБаллы.Регистратор = ДокументыВозвратаКОбработке.ДокументРеализации
	|ГДЕ
	|	БонусныеБаллы.ВидДвижения = &ВидДвиженияРасход
	|	И БонусныеБаллы.КСписанию > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Партнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	БонусныеБаллы.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
	|	БонусныеБаллы.Партнер КАК Партнер,
	|	БонусныеБаллы.ВидДвижения КАК ВидДвижения,
	|	БонусныеБаллы.Регистратор КАК Регистратор,
	|	НАЧАЛОПЕРИОДА(БонусныеБаллы.Период, ДЕНЬ) КАК ДатаОкончанияСрокаДействияСрочныхБонусныхБаллов,
	|	БонусныеБаллы.ДатаНачалаДействия КАК ДатаНачалаДействия,
	|	БонусныеБаллы.Начислено КАК Начислено,
	|	БонусныеБаллы.КСписанию КАК КСписанию
	|ИЗ
	|	РегистрНакопления.БонусныеБаллы КАК БонусныеБаллы
	|ГДЕ
	|	БонусныеБаллы.ДатаКОбработке = ДАТАВРЕМЯ(1, 1, 1)
	|	И БонусныеБаллы.КСписанию <> 0
	|	И (БонусныеБаллы.ДатаНачалаДействия, БонусныеБаллы.Партнер, БонусныеБаллы.БонуснаяПрограммаЛояльности) В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				СписаниеБонусныхБалловКОбработке.ДатаНачалаДействия,
	|				СписаниеБонусныхБалловКОбработке.Партнер,
	|				СписаниеБонусныхБалловКОбработке.БонуснаяПрограммаЛояльности
	|			ИЗ
	|				СписаниеБонусныхБалловКОбработке КАК СписаниеБонусныхБалловКОбработке)
    |
	|ОБЪЕДИНИТЬ ВСЕ
    |
	|ВЫБРАТЬ
	|	БонусныеБаллы.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
	|	БонусныеБаллы.Партнер КАК Партнер,
	|	БонусныеБаллы.ВидДвижения КАК ВидДвижения,
	|	БонусныеБаллы.Регистратор КАК Регистратор,
	|	НАЧАЛОПЕРИОДА(БонусныеБаллы.Период, ДЕНЬ) КАК ДатаОкончанияСрокаДействияСрочныхБонусныхБаллов,
	|	БонусныеБаллы.ДатаНачалаДействия КАК ДатаНачалаДействияСрочныхБонусныхБаллов,
	|	БонусныеБаллы.Начислено КАК Начислено,
	|	БонусныеБаллы.КСписанию КАК КСписанию
	|ИЗ
	|	РегистрНакопления.БонусныеБаллы КАК БонусныеБаллы
	|ГДЕ
	|	БонусныеБаллы.ДатаКОбработке = ДАТАВРЕМЯ(1, 1, 1)
	|	И (БонусныеБаллы.Партнер, БонусныеБаллы.БонуснаяПрограммаЛояльности, БонусныеБаллы.ДатаНачалаДействия, НАЧАЛОПЕРИОДА(БонусныеБаллы.Период, ДЕНЬ)) В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ВозвратыБонусныхБалловКОбработке.Партнер,
	|				ВозвратыБонусныхБалловКОбработке.БонуснаяПрограммаЛояльности,
	|				ВозвратыБонусныхБалловКОбработке.ДатаНачалаДействияСрочныхБонусныхБаллов,
	|				ВозвратыБонусныхБалловКОбработке.ДатаОкончанияСрокаДействияСрочныхБонусныхБаллов
	|			ИЗ
	|				ВозвратыБонусныхБалловКОбработке КАК ВозвратыБонусныхБалловКОбработке)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаОкончанияСрокаДействияСрочныхБонусныхБаллов
	|ИТОГИ ПО
	|	БонуснаяПрограммаЛояльности,
	|	Партнер";
	Запрос.УстановитьПараметр("ДатаНачалаРаботыМеханизмаБонусныхБаллов", ДатаНачалаРаботыМеханизмаБонусныхБаллов_2_5);
	Запрос.УстановитьПараметр("ВидДвиженияПриход", ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("ВидДвиженияРасход", ВидДвиженияНакопления.Расход);
	
	Если РазмерПорции <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст , "ПЕРВЫЕ 1000", "ПЕРВЫЕ " + Формат(РазмерПорции, "ЧГ=;"));
	КонецЕсли;
	
	Возврат Запрос.ВыполнитьПакет();
	
КонецФункции

// Снимает со статуса КОбработке документы возврата реализации с возвратом срочных бонусных баллов
// 
// Параметры:
//  СтрокаТаблицаВозвратовПоПартнеру - СтрокаТаблицыЗначений - Документы вовзратов реализации
Процедура СнятьДокументыВозвратаРеализацииСоСтатусаКОбработке(СтрокаТаблицаВозвратовПоПартнеру) Экспорт
	
	ДатаНачалаДействияСрочныхБонусныхБаллов = СтрокаТаблицаВозвратовПоПартнеру.ДатаНачалаДействияСрочныхБонусныхБаллов;
	ДатаОкончанияСрокаДействияСрочныхБонусныхБаллов = СтрокаТаблицаВозвратовПоПартнеру.ДатаОкончанияСрокаДействияСрочныхБонусныхБаллов;
	
	Партнер  = СтрокаТаблицаВозвратовПоПартнеру.Партнер;
	БонуснаяПрограммаЛояльности  = СтрокаТаблицаВозвратовПоПартнеру.БонуснаяПрограммаЛояльности;
	
	ДокументВозврата = СтрокаТаблицаВозвратовПоПартнеру.Регистратор;
	
	// Установка блокировки
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.БонусныеБаллы.НаборЗаписей");
	ЭлементБлокировки.УстановитьЗначение("Регистратор", ДокументВозврата);
	
	Блокировка.Заблокировать();
	
	// Распределение списания бонусных баллов по остаткам действующих срочных бонусных баллов
	НаборЗаписейРНБонусныеБаллы = РегистрыНакопления.БонусныеБаллы.СоздатьНаборЗаписей();
	НаборЗаписейРНБонусныеБаллы.Отбор.Регистратор.Значение = ДокументВозврата;
	НаборЗаписейРНБонусныеБаллы.Отбор.Регистратор.Использование = Истина;
	НаборЗаписейРНБонусныеБаллы.Прочитать();
	
	Для Каждого СтрокаНаборЗаписейРНБонусныеБаллы Из НаборЗаписейРНБонусныеБаллы Цикл
		
		Если СтрокаНаборЗаписейРНБонусныеБаллы.ДатаКОбработке <> Дата(1, 1, 1)
			И СтрокаНаборЗаписейРНБонусныеБаллы.БонуснаяПрограммаЛояльности = БонуснаяПрограммаЛояльности
			И СтрокаНаборЗаписейРНБонусныеБаллы.Партнер = Партнер
			И СтрокаНаборЗаписейРНБонусныеБаллы.ДатаНачалаДействия = ДатаНачалаДействияСрочныхБонусныхБаллов Тогда
			
			// Списание по ресурсу Начислено
			Если НачалоДня(СтрокаНаборЗаписейРНБонусныеБаллы.Период) = ДатаНачалаДействияСрочныхБонусныхБаллов
				И СтрокаНаборЗаписейРНБонусныеБаллы.Начислено <> 0 Тогда
				
				Если СтрокаНаборЗаписейРНБонусныеБаллы.Начислено < -СтрокаТаблицаВозвратовПоПартнеру.СуммаВозврата Тогда
					Продолжить;
				КонецЕсли;
				
				Если СтрокаНаборЗаписейРНБонусныеБаллы.Начислено = -СтрокаТаблицаВозвратовПоПартнеру.СуммаВозврата Тогда
					СтрокаНаборЗаписейРНБонусныеБаллы.ДатаКОбработке = Дата(1, 1, 1);
				КонецЕсли;
				
				// Разделяем движение на два движения и в новом движении снимаем статус КОбработке
				Если СтрокаНаборЗаписейРНБонусныеБаллы.Начислено > -СтрокаТаблицаВозвратовПоПартнеру.СуммаВозврата Тогда
					СтрокаНаборЗаписейРНБонусныеБаллыНовая = НаборЗаписейРНБонусныеБаллы.Добавить();
					ЗаполнитьЗначенияСвойств(
						СтрокаНаборЗаписейРНБонусныеБаллыНовая,
						СтрокаНаборЗаписейРНБонусныеБаллы);
					
					СтрокаНаборЗаписейРНБонусныеБаллы.Начислено = СтрокаНаборЗаписейРНБонусныеБаллы.Начислено - СтрокаТаблицаВозвратовПоПартнеру.СуммаВозврата;
						
					СтрокаНаборЗаписейРНБонусныеБаллыНовая.ВидДвижения = ВидДвиженияНакопления.Расход;
					СтрокаНаборЗаписейРНБонусныеБаллыНовая.Начислено = СтрокаТаблицаВозвратовПоПартнеру.СуммаВозврата;
					СтрокаНаборЗаписейРНБонусныеБаллыНовая.ДатаКОбработке = Дата(1, 1, 1);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборЗаписейРНБонусныеБаллы.Записать();
	
КонецПроцедуры

// Ставить документы начисления и списания, по которым возвращены срочные бонусные баллы
// 
// Параметры:
//  СтрокаТаблицаВозвратовПоПартнеру - СтрокаТаблицыЗначений - Документы возвратов реализации
//  ТаблицаНачисленийИСписанийПоПартнеру - ТаблицаЗначений - Таблица документов начислений и списаний
//		срочных бонусных баллов.
// 
// Возвращаемое значение:
//  Массив Из СтрокаТаблицыЗначений - Массив строк с документами начисления и списания к удалению
// 
Функция ПоставитьДокументыНачисленияИСписанияСВозвращеннымиСрочнымиБонуснымиБаллами(
	СтрокаТаблицаВозвратовПоПартнеру,
	ТаблицаНачисленийИСписанийПоПартнеру) Экспорт
	
	// Переменные метода
	ДокументВозврата = СтрокаТаблицаВозвратовПоПартнеру.Регистратор;
	ДатаНачалаДействияСрочныхБонусныхБаллов = СтрокаТаблицаВозвратовПоПартнеру.ДатаНачалаДействияСрочныхБонусныхБаллов;
	ДатаОкончанияСрокаДействияСрочныхБонусныхБаллов = СтрокаТаблицаВозвратовПоПартнеру.ДатаОкончанияСрокаДействияСрочныхБонусныхБаллов;
	
	Партнер  = СтрокаТаблицаВозвратовПоПартнеру.Партнер;
	БонуснаяПрограммаЛояльности  = СтрокаТаблицаВозвратовПоПартнеру.БонуснаяПрограммаЛояльности;
	
	НулевыеСтрокиОстатковКУдалению = Новый Массив;
	
	Для Каждого СтрокаТаблицаНачисленийИСписанийПоПартнеру Из ТаблицаНачисленийИСписанийПоПартнеру Цикл
		
		Если СтрокаТаблицаНачисленийИСписанийПоПартнеру.Начислено = СтрокаТаблицаНачисленийИСписанийПоПартнеру.КСписанию Тогда
			НулевыеСтрокиОстатковКУдалению.Добавить(СтрокаТаблицаНачисленийИСписанийПоПартнеру);
			Продолжить;
		КонецЕсли;
		
		Регистратор = СтрокаТаблицаНачисленийИСписанийПоПартнеру.Регистратор;
		СуммаБонусныхБаллов = Макс(
			СтрокаТаблицаНачисленийИСписанийПоПартнеру.Начислено,
			СтрокаТаблицаНачисленийИСписанийПоПартнеру.КСписанию);
		
		// Установка блокировки
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.БонусныеБаллы.НаборЗаписей");
		ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
		
		Блокировка.Заблокировать();
		
		// Постановка документов в статус КОбработке
		НаборЗаписейРНБонусныеБаллы = РегистрыНакопления.БонусныеБаллы.СоздатьНаборЗаписей();
		НаборЗаписейРНБонусныеБаллы.Отбор.Регистратор.Значение = Регистратор;
		НаборЗаписейРНБонусныеБаллы.Отбор.Регистратор.Использование = Истина;
		НаборЗаписейРНБонусныеБаллы.Прочитать();
		
		ДвиженияРНБонусныеБаллыКУдалению = Новый Массив;
		Для Каждого СтрокаНаборЗаписейРНБонусныеБаллы Из НаборЗаписейРНБонусныеБаллы Цикл
			
			// Документы начисления
			Если СтрокаНаборЗаписейРНБонусныеБаллы.БонуснаяПрограммаЛояльности = БонуснаяПрограммаЛояльности
				И СтрокаНаборЗаписейРНБонусныеБаллы.Партнер = Партнер
				И СтрокаНаборЗаписейРНБонусныеБаллы.ДатаНачалаДействия = ДатаНачалаДействияСрочныхБонусныхБаллов
				И СтрокаНаборЗаписейРНБонусныеБаллы.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
				
				// ресурс Начислено - поставить статус КОбработке только на сумму начисления
				Если НачалоДня(СтрокаНаборЗаписейРНБонусныеБаллы.Период) = ДатаНачалаДействияСрочныхБонусныхБаллов Тогда
					
					Если СтрокаНаборЗаписейРНБонусныеБаллы.Начислено < СуммаБонусныхБаллов Тогда
						Продолжить;
					КонецЕсли;
					
					Если СтрокаНаборЗаписейРНБонусныеБаллы.Начислено = СуммаБонусныхБаллов Тогда
						СтрокаНаборЗаписейРНБонусныеБаллы.ДатаКОбработке = ТекущаяДатаСеанса();
					КонецЕсли;
					
					// Разделяем движение на два движения и в новое движение ставим статус КОбработке
					Если СтрокаТаблицаНачисленийИСписанийПоПартнеру.ВидДвижения = ВидДвиженияНакопления.Приход
						И СтрокаНаборЗаписейРНБонусныеБаллы.Начислено > СуммаБонусныхБаллов Тогда
						
						СтрокаНаборЗаписейРНБонусныеБаллыНовая = НаборЗаписейРНБонусныеБаллы.Добавить();
						ЗаполнитьЗначенияСвойств(
							СтрокаНаборЗаписейРНБонусныеБаллыНовая,
							СтрокаНаборЗаписейРНБонусныеБаллы);
						
						СтрокаНаборЗаписейРНБонусныеБаллы.Начислено = СтрокаНаборЗаписейРНБонусныеБаллы.Начислено - СуммаБонусныхБаллов;
						СтрокаНаборЗаписейРНБонусныеБаллы.ДатаКОбработке = ТекущаяДатаСеанса();
							
						СтрокаНаборЗаписейРНБонусныеБаллыНовая.ВидДвижения = ВидДвиженияНакопления.Приход;
						СтрокаНаборЗаписейРНБонусныеБаллыНовая.Начислено = СуммаБонусныхБаллов;
						СтрокаНаборЗаписейРНБонусныеБаллыНовая.ДатаКОбработке = ТекущаяДатаСеанса();
					КонецЕсли;
					
				КонецЕсли;
				
				// ресурс КСписанию - поставить статус КОбработке
				Если НачалоДня(СтрокаНаборЗаписейРНБонусныеБаллы.Период) = ДатаОкончанияСрокаДействияСрочныхБонусныхБаллов Тогда
					Если СтрокаНаборЗаписейРНБонусныеБаллы.Начислено = СтрокаНаборЗаписейРНБонусныеБаллы.КСписанию Тогда
						ДвиженияРНБонусныеБаллыКУдалению.Добавить(СтрокаНаборЗаписейРНБонусныеБаллы);
					Иначе
						СтрокаНаборЗаписейРНБонусныеБаллы.ДатаКОбработке = ТекущаяДатаСеанса();
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			// Документы списания
			Если СтрокаНаборЗаписейРНБонусныеБаллы.БонуснаяПрограммаЛояльности = БонуснаяПрограммаЛояльности
				И СтрокаНаборЗаписейРНБонусныеБаллы.Партнер = Партнер
				И СтрокаНаборЗаписейРНБонусныеБаллы.ВидДвижения = ВидДвиженияНакопления.Расход Тогда
				
				// ресурс Начислено - поставить статус КОбработке
				Если СтрокаНаборЗаписейРНБонусныеБаллы.Начислено <> 0 Тогда
					СтрокаНаборЗаписейРНБонусныеБаллы.ДатаКОбработке = ТекущаяДатаСеанса();
				КонецЕсли;
				
				// ресурс КСписанию - удалить строку
				Если СтрокаНаборЗаписейРНБонусныеБаллы.КСписанию <> 0 Тогда
					ДвиженияРНБонусныеБаллыКУдалению.Добавить(СтрокаНаборЗаписейРНБонусныеБаллы);
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрокаНаборЗаписейРНБонусныеБаллы.БонуснаяПрограммаЛояльности = БонуснаяПрограммаЛояльности
				И СтрокаНаборЗаписейРНБонусныеБаллы.Партнер = Партнер
				И НЕ ЗначениеЗаполнено(СтрокаНаборЗаписейРНБонусныеБаллы.ДатаКОбработке)
				И (СтрокаНаборЗаписейРНБонусныеБаллы.ДатаНачалаДействия <> ДатаНачалаДействияСрочныхБонусныхБаллов
					ИЛИ НачалоДня(СтрокаНаборЗаписейРНБонусныеБаллы.Период) <> ДатаОкончанияСрокаДействияСрочныхБонусныхБаллов) Тогда
				
				СтрокаНаборЗаписейРНБонусныеБаллы.ДатаКОбработке = ТекущаяДатаСеанса();
				
				Если СтрокаНаборЗаписейРНБонусныеБаллы.ВидДвижения = ВидДвиженияНакопления.Приход
					И СтрокаНаборЗаписейРНБонусныеБаллы.Начислено = СтрокаНаборЗаписейРНБонусныеБаллы.КСписанию Тогда
				
					ДвиженияРНБонусныеБаллыКУдалению.Добавить(СтрокаНаборЗаписейРНБонусныеБаллы);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого ДвижениеКУдалению Из ДвиженияРНБонусныеБаллыКУдалению Цикл
			НаборЗаписейРНБонусныеБаллы.Удалить(ДвижениеКУдалению);
		КонецЦикла;
		
		НаборЗаписейРНБонусныеБаллы.Записать();
		
		НулевыеСтрокиОстатковКУдалению.Добавить(СтрокаТаблицаНачисленийИСписанийПоПартнеру);
		
	КонецЦикла;
	
	Возврат НулевыеСтрокиОстатковКУдалению;
	
КонецФункции

#КонецОбласти

#Область РаспределениеСписанныхСрочныхБонусныхБалловВСтатусеКОбработке

// Распределить списание срочных бонусных баллов в статусе к обработке.
// 
// Параметры:
//  ДатаНачалаРаботыМеханизмаБонусныхБаллов_2_5 - Дата - Дата начала работы механизма бонусных баллов 2_5
//  РазмерПорции - Число - Количество записей к обработке
//  ТекстОшибки - Строка - Текст сообщения об ошибке
// 
// Возвращаемое значение:
//  Число - Количество обработнных документов, к которым было применено распределение.
Функция РаспределитьСписаниеСрочныхБонусныхБалловВСтатусеКОбработке(ДатаНачалаРаботыМеханизмаБонусныхБаллов_2_5, РазмерПорции = Неопределено, ТекстОшибки = "") Экспорт
	
	РезультатЗапроса = РезультатЗапросаСписаниеБонусныхБалловВСтатусеКОбработке(ДатаНачалаРаботыМеханизмаБонусныхБаллов_2_5, РазмерПорции);
	
	РезультатЗапросаОстатки = РезультатЗапроса[3];
	РезультатЗапросаСписание = РезультатЗапроса[2];
	РезультатЗапросаВозвраты = РезультатЗапроса[4];
	
	ТаблицаОстатковПоПартнеру = Новый ТаблицаЗначений;
	ТаблицаОстатковПоПартнеру.Колонки.Добавить("Период");
	ТаблицаОстатковПоПартнеру.Колонки.Добавить("ОстатокСрочныхБонусныхБаллов");
	ТаблицаОстатковПоПартнеру.Колонки.Добавить("ДатаНачалаДействия");
	ТаблицаОстатковПоПартнеру.Колонки.Добавить("БонуснаяПрограммаЛояльности");
	ТаблицаОстатковПоПартнеру.Колонки.Добавить("Партнер");
	
	ТаблицаСписанийПоПартнеру = Новый ТаблицаЗначений;
	ТаблицаСписанийПоПартнеру.Колонки.Добавить("ДатаСписанияБонусныхБаллов");
	ТаблицаСписанийПоПартнеру.Колонки.Добавить("ДокументСписанияБонусныхБаллов");
	ТаблицаСписанийПоПартнеру.Колонки.Добавить("СуммаСписанияБонусныхБаллов");
	ТаблицаСписанийПоПартнеру.Колонки.Добавить("БонуснаяПрограммаЛояльности");
	ТаблицаСписанийПоПартнеру.Колонки.Добавить("Партнер");
	
	
	ТаблицаВозвратовПоПартнеру = Новый ТаблицаЗначений;
	ТаблицаВозвратовПоПартнеру.Колонки.Добавить("ДатаСписанияБонусныхБаллов");
	ТаблицаВозвратовПоПартнеру.Колонки.Добавить("ДокументВозвратаБонусныхБаллов");
	ТаблицаВозвратовПоПартнеру.Колонки.Добавить("ДокументСписанияБонусныхБаллов");
	ТаблицаВозвратовПоПартнеру.Колонки.Добавить("БонуснаяПрограммаЛояльности");
	ТаблицаВозвратовПоПартнеру.Колонки.Добавить("Партнер");
	ТаблицаВозвратовПоПартнеру.Колонки.Добавить("СуммаВозвратаБонусныхБаллов");
	
	ВыборкаОстаткиБонуснаяПрограммаЛояльности = РезультатЗапросаОстатки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "БонуснаяПрограммаЛояльности");
	ВыборкаСписаниеБонуснаяПрограммаЛояльности = РезультатЗапросаСписание.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "БонуснаяПрограммаЛояльности");
	ВыборкаВозвратыБонуснаяПрограммаЛояльности = РезультатЗапросаВозвраты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "БонуснаяПрограммаЛояльности");
	
	КоличествоОбработанныхДокументов = 0;
	Пока ВыборкаОстаткиБонуснаяПрограммаЛояльности.Следующий() Цикл
		
		ВыборкаОстаткиПартнер = ВыборкаОстаткиБонуснаяПрограммаЛояльности.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Партнер");
		
		Пока ВыборкаОстаткиПартнер.Следующий() Цикл
			
			// Получить таблицу остатков действующих срочных бонусных баллов
			ВыборкаОстаткиДетали = ВыборкаОстаткиПартнер.Выбрать();
			
			ТаблицаОстатковПоПартнеру.Очистить();
			Пока ВыборкаОстаткиДетали.Следующий() Цикл
				СтрокаТаблицаОстатковПоПартнеру = ТаблицаОстатковПоПартнеру.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицаОстатковПоПартнеру, ВыборкаОстаткиДетали);
			КонецЦикла;
			
			// Получить таблица списаний бонусных баллок к обработке
			СтруктураПоискаБонуснаяПрограммаЛояльности = Новый Структура;
			СтруктураПоискаБонуснаяПрограммаЛояльности.Вставить(
				"БонуснаяПрограммаЛояльности",
				ВыборкаОстаткиБонуснаяПрограммаЛояльности.БонуснаяПрограммаЛояльности);
				
			ВыборкаСписаниеБонуснаяПрограммаЛояльности.Сбросить();
			Если ВыборкаСписаниеБонуснаяПрограммаЛояльности.НайтиСледующий(СтруктураПоискаБонуснаяПрограммаЛояльности) Тогда
				
				ВыборкаСписаниеПартнер = ВыборкаСписаниеБонуснаяПрограммаЛояльности.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Партнер");
				
				СтруктураПоискаПартнер = Новый Структура;
				СтруктураПоискаПартнер.Вставить(
					"Партнер",
					ВыборкаОстаткиПартнер.Партнер);
				
				Если ВыборкаСписаниеПартнер.НайтиСледующий(СтруктураПоискаПартнер) Тогда
					
					ВыборкаСписаниеДетали = ВыборкаСписаниеПартнер.Выбрать();
					
					ТаблицаСписанийПоПартнеру.Очистить();
					Пока ВыборкаСписаниеДетали.Следующий() Цикл
						СтрокаТаблицаСписанийПоПартнеру = ТаблицаСписанийПоПартнеру.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТаблицаСписанийПоПартнеру, ВыборкаСписаниеДетали);
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
			// Получить таблица возвратов бонусных баллок к обработке
			СтруктураПоискаБонуснаяПрограммаЛояльности = Новый Структура;
			СтруктураПоискаБонуснаяПрограммаЛояльности.Вставить(
				"БонуснаяПрограммаЛояльности",
				ВыборкаОстаткиБонуснаяПрограммаЛояльности.БонуснаяПрограммаЛояльности);
				
			ВыборкаВозвратыБонуснаяПрограммаЛояльности.Сбросить();
			Если ВыборкаВозвратыБонуснаяПрограммаЛояльности.НайтиСледующий(СтруктураПоискаБонуснаяПрограммаЛояльности) Тогда
				
				ВыборкаВозвратыПартнер = ВыборкаВозвратыБонуснаяПрограммаЛояльности.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Партнер");
				
				СтруктураПоискаПартнер = Новый Структура;
				СтруктураПоискаПартнер.Вставить(
					"Партнер",
					ВыборкаОстаткиПартнер.Партнер);
				
				Если ВыборкаВозвратыПартнер.НайтиСледующий(СтруктураПоискаПартнер) Тогда
					
					ВыборкаВозвратыДетали = ВыборкаВозвратыПартнер.Выбрать();
					
					ТаблицаВозвратовПоПартнеру.Очистить();
					Пока ВыборкаВозвратыДетали.Следующий() Цикл
						СтрокаТаблицаВозвратовПоПартнеру = ТаблицаВозвратовПоПартнеру.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТаблицаВозвратовПоПартнеру, ВыборкаВозвратыДетали);
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
				
			// Распределить списание срочных бонусных баллов
			Для Каждого СтрокаТаблицаСписанийПоПартнеру Из ТаблицаСписанийПоПартнеру Цикл
				
				НачатьТранзакцию();
				
				Попытка
					
					// Остаток нераспределенной суммы срочных бонусных баллов это оплата бессрочными бонусными баллами
					НулевыеСтрокиОстатковКУдалению = РаспределитьСуммуСписанияПоСрокамДействияБонусныхБаллов(
					    СтрокаТаблицаСписанийПоПартнеру,
						ТаблицаОстатковПоПартнеру);
					
					Для Каждого СтрокаКУдалению Из НулевыеСтрокиОстатковКУдалению Цикл
						ТаблицаОстатковПоПартнеру.Удалить(СтрокаКУдалению);
					КонецЦикла;
					
					ЗафиксироватьТранзакцию();
					КоличествоОбработанныхДокументов = КоличествоОбработанныхДокументов + 1;
					
				Исключение
					
					Если ТранзакцияАктивна() Тогда
						ОтменитьТранзакцию();
					КонецЕсли;
					ИнформацияОбОшибке = ИнформацияОбОшибке();
					ТекстОшибки = ИнформацияОбОшибке.Описание;
					Прервать;
					
				КонецПопытки;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат КоличествоОбработанныхДокументов;
	
КонецФункции

// Возвращает результат запроса, содержащий списанные бонусные баллы в статусе к обработке.
// 
// Параметры:
//  ДатаНачалаРаботыМеханизмаБонусныхБаллов_2_5 - Дата - Дата начала работы механизма бонусных баллов 2_5
//  РазмерПорции - Число - Количество записей к обработке. По умолчанию = 1000
// 
// Возвращаемое значение:
//  РезультатЗапроса - Результат запроса, содержащий списанные бонусные баллы к обработке
//
Функция РезультатЗапросаСписаниеБонусныхБалловВСтатусеКОбработке(
          	ДатаНачалаРаботыМеханизмаБонусныхБаллов_2_5,
          	РазмерПорции = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	НАЧАЛОПЕРИОДА(БонусныеБаллы.Период, ДЕНЬ) КАК ДатаСписанияБонусныхБаллов,
	|	БонусныеБаллы.Регистратор КАК ДокументВозвратаБонусныхБаллов,
	|	ВЫБОР
	|		КОГДА ВозвратТоваровОтКлиента.ДокументРеализации ЕСТЬ NULL
	|			ТОГДА ОтчетОРозничныхПродажахОплатаБонуснымиБаллами.Ссылка
	|		ИНАЧЕ ВозвратТоваровОтКлиента.ДокументРеализации
	|	КОНЕЦ КАК ДокументСписанияБонусныхБаллов,
	|	БонусныеБаллы.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
	|	БонусныеБаллы.Партнер КАК Партнер,
	|	СУММА(-БонусныеБаллы.Начислено) КАК СуммаВозвратаБонусныхБаллов
	|ПОМЕСТИТЬ ВозвратыБонусныхБалловКОбработке
	|ИЗ
	|	РегистрНакопления.БонусныеБаллы КАК БонусныеБаллы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтКлиента КАК ВозвратТоваровОтКлиента
	|		ПО БонусныеБаллы.Регистратор = ВозвратТоваровОтКлиента.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхВозвратах КАК ОтчетОРозничныхВозвратах
	|			
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхВозвратах.ОплатаБонуснымиБаллами КАК ОтчетОРозничныхВозвратахОплатаБонуснымиБаллами
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах.ОплатаБонуснымиБаллами КАК ОтчетОРозничныхПродажахОплатаБонуснымиБаллами
	|				ПО ОтчетОРозничныхВозвратахОплатаБонуснымиБаллами.ДатаОплаты = ОтчетОРозничныхПродажахОплатаБонуснымиБаллами.ДатаОплаты
	|					И ОтчетОРозничныхВозвратахОплатаБонуснымиБаллами.БонуснаяПрограммаЛояльности = ОтчетОРозничныхПродажахОплатаБонуснымиБаллами.БонуснаяПрограммаЛояльности
	|					И ОтчетОРозничныхВозвратахОплатаБонуснымиБаллами.Партнер = ОтчетОРозничныхПродажахОплатаБонуснымиБаллами.Партнер
	|			ПО ОтчетОРозничныхВозвратах.Ссылка = ОтчетОРозничныхВозвратахОплатаБонуснымиБаллами.Ссылка
	|			
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхВозвратах.Товары КАК ОтчетОРозничныхВозвратахТовары
	|			ПО ОтчетОРозничныхВозвратах.Ссылка = ОтчетОРозничныхВозвратахТовары.Ссылка
	|			
	|		ПО БонусныеБаллы.Регистратор = ОтчетОРозничныхВозвратах.Ссылка
	|		
	|ГДЕ
	|	БонусныеБаллы.ДатаКОбработке >= &ДатаНачалаРаботыМеханизмаБонусныхБаллов
	|	И БонусныеБаллы.ВидДвижения = &ВидДвиженияРасход
	|	И БонусныеБаллы.Начислено < 0
	|	И (НЕ ВозвратТоваровОтКлиента.ДокументРеализации ЕСТЬ NULL
	|		ИЛИ ОтчетОРозничныхПродажахОплатаБонуснымиБаллами.Ссылка = ОтчетОРозничныхВозвратахТовары.ДокументРеализации)
    |
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(БонусныеБаллы.Период, ДЕНЬ),
	|	БонусныеБаллы.Регистратор,
	|	ВЫБОР
	|		КОГДА ВозвратТоваровОтКлиента.ДокументРеализации ЕСТЬ NULL
	|			ТОГДА ОтчетОРозничныхПродажахОплатаБонуснымиБаллами.Ссылка
	|		ИНАЧЕ ВозвратТоваровОтКлиента.ДокументРеализации
	|	КОНЕЦ,
	|	БонусныеБаллы.БонуснаяПрограммаЛояльности,
	|	БонусныеБаллы.Партнер
    |
	|ИНДЕКСИРОВАТЬ ПО
	|	Партнер
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1000
	|	НАЧАЛОПЕРИОДА(БонусныеБаллы.Период, ДЕНЬ) КАК ДатаСписанияБонусныхБаллов,
	|	БонусныеБаллы.Регистратор КАК ДокументСписанияБонусныхБаллов,
	|	ДокументыВозвратаБонусныхБалловКОбработке.ДокументВозвратаБонусныхБаллов КАК ДокументВозвратаБонусныхБаллов,
	|	БонусныеБаллы.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
	|	БонусныеБаллы.Партнер КАК Партнер,
	|	СУММА(БонусныеБаллы.Начислено - ЕСТЬNULL(СуммыВозвратаБонусныхБалловКОбработке.СуммаВозвратаБонусныхБаллов, 0)) КАК СуммаСписанияБонусныхБаллов
	|ПОМЕСТИТЬ СписаниеБонусныхБалловКОбработке
	|ИЗ
	|	РегистрНакопления.БонусныеБаллы КАК БонусныеБаллы
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВозвратыБонусныхБалловКОбработке КАК СуммыВозвратаБонусныхБалловКОбработке
	|	ПО БонусныеБаллы.Регистратор = СуммыВозвратаБонусныхБалловКОбработке.ДокументСписанияБонусныхБаллов
	|		И БонусныеБаллы.БонуснаяПрограммаЛояльности = СуммыВозвратаБонусныхБалловКОбработке.БонуснаяПрограммаЛояльности
	|		И БонусныеБаллы.Партнер = СуммыВозвратаБонусныхБалловКОбработке.Партнер
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВозвратыБонусныхБалловКОбработке КАК ДокументыВозвратаБонусныхБалловКОбработке
	|	ПО БонусныеБаллы.Регистратор = ДокументыВозвратаБонусныхБалловКОбработке.ДокументВозвратаБонусныхБаллов
	|		И БонусныеБаллы.БонуснаяПрограммаЛояльности = ДокументыВозвратаБонусныхБалловКОбработке.БонуснаяПрограммаЛояльности
	|		И БонусныеБаллы.Партнер = ДокументыВозвратаБонусныхБалловКОбработке.Партнер
	|ГДЕ
	|	БонусныеБаллы.ДатаКОбработке >= &ДатаНачалаРаботыМеханизмаБонусныхБаллов
	|	И БонусныеБаллы.ВидДвижения = &ВидДвиженияРасход
	|	И БонусныеБаллы.Начислено > 0
	|	И ДокументыВозвратаБонусныхБалловКОбработке.ДокументВозвратаБонусныхБаллов ЕСТЬ NULL
    |
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(БонусныеБаллы.Период, ДЕНЬ),
	|	БонусныеБаллы.Регистратор,
	|	ДокументыВозвратаБонусныхБалловКОбработке.ДокументВозвратаБонусныхБаллов,
	|	БонусныеБаллы.БонуснаяПрограммаЛояльности,
	|	БонусныеБаллы.Партнер
    |
	|ИМЕЮЩИЕ
	|	СУММА(БонусныеБаллы.Начислено - ЕСТЬNULL(СуммыВозвратаБонусныхБалловКОбработке.СуммаВозвратаБонусныхБаллов, 0)) <> 0
    |
	|ИНДЕКСИРОВАТЬ ПО
	|	Партнер
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписаниеБонусныхБалловКОбработке.ДатаСписанияБонусныхБаллов КАК ДатаСписанияБонусныхБаллов,
	|	СписаниеБонусныхБалловКОбработке.ДокументСписанияБонусныхБаллов КАК ДокументСписанияБонусныхБаллов,
	|	СписаниеБонусныхБалловКОбработке.ДокументСписанияБонусныхБаллов.Дата КАК ДокументСписанияБонусныхБалловДата,
	|	СписаниеБонусныхБалловКОбработке.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
	|	СписаниеБонусныхБалловКОбработке.БонуснаяПрограммаЛояльности.Наименование КАК БонуснаяПрограммаЛояльностиНаименование,
	|	СписаниеБонусныхБалловКОбработке.Партнер КАК Партнер,
	|	СписаниеБонусныхБалловКОбработке.Партнер.Наименование КАК ПартнерНаименование,
	|	СписаниеБонусныхБалловКОбработке.СуммаСписанияБонусныхБаллов КАК СуммаСписанияБонусныхБаллов
	|ИЗ
	|	СписаниеБонусныхБалловКОбработке КАК СписаниеБонусныхБалловКОбработке
    |
	|УПОРЯДОЧИТЬ ПО
	|	СписаниеБонусныхБалловКОбработке.ДатаСписанияБонусныхБаллов,
	|	ДокументСписанияБонусныхБалловДата,
	|	ПартнерНаименование,
	|	БонуснаяПрограммаЛояльностиНаименование
	|ИТОГИ
	|	СУММА(СуммаСписанияБонусныхБаллов)
	|ПО
	|	БонуснаяПрограммаЛояльности,
	|	Партнер
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БонусныеБаллы.Период КАК Период,
	|	БонусныеБаллы.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
	|	БонусныеБаллы.Партнер КАК Партнер,
	|	СУММА(ВЫБОР
	|			КОГДА БонусныеБаллы.ВидДвижения = &ВидДвиженияПриход
	|				ТОГДА БонусныеБаллы.КСписанию
	|			ИНАЧЕ -БонусныеБаллы.КСписанию
	|		КОНЕЦ) КАК ОстатокСрочныхБонусныхБаллов,
	|	БонусныеБаллы.ДатаНачалаДействия КАК ДатаНачалаДействия
	|ИЗ
	|	РегистрНакопления.БонусныеБаллы КАК БонусныеБаллы
	|ГДЕ
	|	БонусныеБаллы.ДатаКОбработке >= &ДатаНачалаРаботыМеханизмаБонусныхБаллов
	|	И БонусныеБаллы.КСписанию <> 0
	|	И (БонусныеБаллы.Партнер, БонусныеБаллы.БонуснаяПрограммаЛояльности) В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				СписаниеБонусныхБалловКОбработке.Партнер,
	|				СписаниеБонусныхБалловКОбработке.БонуснаяПрограммаЛояльности
	|			ИЗ
	|				СписаниеБонусныхБалловКОбработке КАК СписаниеБонусныхБалловКОбработке)
    |
	|СГРУППИРОВАТЬ ПО
	|	БонусныеБаллы.Период,
	|	БонусныеБаллы.БонуснаяПрограммаЛояльности,
	|	БонусныеБаллы.Партнер,
	|	БонусныеБаллы.ДатаНачалаДействия
    |
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР
	|			КОГДА БонусныеБаллы.ВидДвижения = &ВидДвиженияПриход
	|				ТОГДА БонусныеБаллы.КСписанию
	|			ИНАЧЕ -БонусныеБаллы.КСписанию
	|		КОНЕЦ) <> 0
    |
	|УПОРЯДОЧИТЬ ПО
	|	БонусныеБаллы.Период
	|ИТОГИ ПО
	|	БонуснаяПрограммаЛояльности,
	|	Партнер
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВозвратыБонусныхБалловКОбработке.ДатаСписанияБонусныхБаллов КАК ДатаСписанияБонусныхБаллов,
	|	ВозвратыБонусныхБалловКОбработке.ДокументВозвратаБонусныхБаллов КАК ДокументВозвратаБонусныхБаллов,
	|	ВозвратыБонусныхБалловКОбработке.ДокументСписанияБонусныхБаллов КАК ДокументСписанияБонусныхБаллов,
	|	ВозвратыБонусныхБалловКОбработке.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
	|	ВозвратыБонусныхБалловКОбработке.Партнер КАК Партнер,
	|	ВозвратыБонусныхБалловКОбработке.СуммаВозвратаБонусныхБаллов КАК СуммаВозвратаБонусныхБаллов
	|ИЗ
	|	ВозвратыБонусныхБалловКОбработке КАК ВозвратыБонусныхБалловКОбработке
	|ГДЕ
	|	(ВозвратыБонусныхБалловКОбработке.Партнер, ВозвратыБонусныхБалловКОбработке.БонуснаяПрограммаЛояльности) В
	|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СписаниеБонусныхБалловКОбработке.Партнер,
	|			СписаниеБонусныхБалловКОбработке.БонуснаяПрограммаЛояльности
	|		ИЗ
	|			СписаниеБонусныхБалловКОбработке КАК СписаниеБонусныхБалловКОбработке)
    |
	|УПОРЯДОЧИТЬ ПО
	|	ВозвратыБонусныхБалловКОбработке.ДатаСписанияБонусныхБаллов
	|ИТОГИ ПО
	|	БонуснаяПрограммаЛояльности,
	|	Партнер";
	Запрос.УстановитьПараметр("ДатаНачалаРаботыМеханизмаБонусныхБаллов", ДатаНачалаРаботыМеханизмаБонусныхБаллов_2_5);
	Запрос.УстановитьПараметр("ВидДвиженияПриход", ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("ВидДвиженияРасход", ВидДвиженияНакопления.Расход);
	
	Если РазмерПорции <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст , "ПЕРВЫЕ 1000", "ПЕРВЫЕ " + Формат(РазмерПорции, "ЧГ=;"));
	КонецЕсли;
	
	Возврат Запрос.ВыполнитьПакет();
	
КонецФункции

// Распределить сумму списания по срокам действия бонусных баллов (бессрочные или срочные бонусные баллы).
// 
// Параметры:
//  СтрокаТаблицаСписанийПоПартнеру - СтрокаТаблицыЗначений - Данные по списанию бонусных баллов
//  ТаблицаОстатковПоПартнеру - ТаблицаЗначений - Таблица остатков действующих срочных бонусных баллов
// 
// Возвращаемое значение:
//  Массив Из СтрокаТаблицыЗначений - Массив строк с нулевыми остатками бонусных баллов к удалению
// 
Функция РаспределитьСуммуСписанияПоСрокамДействияБонусныхБаллов(
	СтрокаТаблицаСписанийПоПартнеру,
	ТаблицаОстатковПоПартнеру) Экспорт
	
	// Переменные метода
	ДокументСписания = СтрокаТаблицаСписанийПоПартнеру.ДокументСписанияБонусныхБаллов;
	ДатаСписания     = СтрокаТаблицаСписанийПоПартнеру.ДатаСписанияБонусныхБаллов;
	
	Партнер  = СтрокаТаблицаСписанийПоПартнеру.Партнер;
	БонуснаяПрограммаЛояльности  = СтрокаТаблицаСписанийПоПартнеру.БонуснаяПрограммаЛояльности;
	
	СуммаСписанияБонусныхБалловСУчетомРаспределения = СтрокаТаблицаСписанийПоПартнеру.СуммаСписанияБонусныхБаллов;
	
	НулевыеСтрокиОстатковКУдалению = Новый Массив;
	
	// Установка блокировки
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.БонусныеБаллы.НаборЗаписей");
	ЭлементБлокировки.УстановитьЗначение("Регистратор", ДокументСписания);
	
	Блокировка.Заблокировать();
	
	// Распределение списания бонусных баллов по остаткам действующих срочных бонусных баллов
	НаборЗаписейРНБонусныеБаллы = РегистрыНакопления.БонусныеБаллы.СоздатьНаборЗаписей();
	НаборЗаписейРНБонусныеБаллы.Отбор.Регистратор.Значение = ДокументСписания;
	НаборЗаписейРНБонусныеБаллы.Отбор.Регистратор.Использование = Истина;
	НаборЗаписейРНБонусныеБаллы.Прочитать();
	
	Для Каждого СтрокаТаблицаОстатковПоПартнеру Из ТаблицаОстатковПоПартнеру Цикл
		
		Если СуммаСписанияБонусныхБалловСУчетомРаспределения = 0
			ИЛИ СтрокаТаблицаОстатковПоПартнеру.ОстатокСрочныхБонусныхБаллов = 0 Тогда
			Прервать;
		КонецЕсли;
		
		Если ДатаСписания < СтрокаТаблицаОстатковПоПартнеру.ДатаНачалаДействия
			ИЛИ ДатаСписания > СтрокаТаблицаОстатковПоПартнеру.Период Тогда
			Продолжить;
		КонецЕсли;
		
		ОстатокСрочныхБонусныхБаллов = СтрокаТаблицаОстатковПоПартнеру.ОстатокСрочныхБонусныхБаллов;
		СуммаКорректировкиЗначенияКСписанию = Мин(ОстатокСрочныхБонусныхБаллов, СуммаСписанияБонусныхБалловСУчетомРаспределения);
		ОстатокСрочныхБонусныхБаллов = ОстатокСрочныхБонусныхБаллов - СуммаКорректировкиЗначенияКСписанию;
		
		СуммаСписанияБонусныхБалловСУчетомРаспределения = СуммаСписанияБонусныхБалловСУчетомРаспределения - СуммаКорректировкиЗначенияКСписанию;
		
		СтрокаНаборЗаписейРНБонусныеБаллы = НаборЗаписейРНБонусныеБаллы.Добавить();
		ЗаполнитьЗначенияСвойств(
			СтрокаНаборЗаписейРНБонусныеБаллы,
			СтрокаТаблицаОстатковПоПартнеру);
		
		СтрокаНаборЗаписейРНБонусныеБаллы.Регистратор = ДокументСписания;
		СтрокаНаборЗаписейРНБонусныеБаллы.ВидДвижения = ВидДвиженияНакопления.Расход;
		СтрокаНаборЗаписейРНБонусныеБаллы.КСписанию = СуммаКорректировкиЗначенияКСписанию;
		СтрокаНаборЗаписейРНБонусныеБаллы.ДатаКОбработке = ТекущаяДатаСеанса();
		
		СтрокаТаблицаОстатковПоПартнеру.ОстатокСрочныхБонусныхБаллов = ОстатокСрочныхБонусныхБаллов;
		
		Если ОстатокСрочныхБонусныхБаллов = 0 Тогда
			НулевыеСтрокиОстатковКУдалению.Добавить(СтрокаТаблицаОстатковПоПартнеру);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаНаборЗаписейРНБонусныеБаллы Из НаборЗаписейРНБонусныеБаллы Цикл
		Если СтрокаНаборЗаписейРНБонусныеБаллы.ДатаКОбработке <> Дата(1, 1, 1)
			И СтрокаНаборЗаписейРНБонусныеБаллы.БонуснаяПрограммаЛояльности = БонуснаяПрограммаЛояльности
			И СтрокаНаборЗаписейРНБонусныеБаллы.Партнер = Партнер
			И СтрокаНаборЗаписейРНБонусныеБаллы.Начислено > 0 Тогда
			СтрокаНаборЗаписейРНБонусныеБаллы.ДатаКОбработке = Дата(1, 1, 1);
		КонецЕсли;
	КонецЦикла;
	
	НаборЗаписейРНБонусныеБаллы.Записать();
	
	Возврат НулевыеСтрокиОстатковКУдалению;
	
КонецФункции

#КонецОбласти

#Область СписаниеОстатковСрочныхБонусныхБалловСИстекшимСрокомДействия

// Списывает остатки срочных бонусных баллов с истекшим сроком действия.
// 
// Параметры:
//  ДатаНачалаРаботыМеханизмаБонусныхБаллов_2_5 - Дата - Дата начала работы механизма бонусных баллов 2_5
//  РазмерПорции - Число - Количество записей к обработке
//  ТекстОшибки - Строка - Текст сообщения об ошибке
//  
// Возвращаемое значение:
//  Число - Количество обработанных документов, по которым были списаны остатки.
//
Функция СписатьОстаткиСрочныхБонусныхБалловСИстекшимСрокомДействия(ДатаНачалаРаботыМеханизмаБонусныхБаллов_2_5, РазмерПорции = Неопределено, ТекстОшибки = "") Экспорт
	
	РезультатЗапроса = РезультатЗапросаОстаткиПросроченныхСрочныхБонусныхБаллов(ДатаНачалаРаботыМеханизмаБонусныхБаллов_2_5, РазмерПорции);
	
	РезультатЗапросаОстатки = РезультатЗапроса[1];
	РезультатЗапросаОстаткиПоДокументам = РезультатЗапроса[2];
	РезультатЗапросаДокументыКСнятиюСОбработки = РезультатЗапроса[3];
	
	ТаблицаОстатковКСписанию = Новый ТаблицаЗначений;
	ТаблицаОстатковКСписанию.Колонки.Добавить("БонуснаяПрограммаЛояльности");
	ТаблицаОстатковКСписанию.Колонки.Добавить("Партнер");
	ТаблицаОстатковКСписанию.Колонки.Добавить("ДатаНачалаДействияСрочныхБонусныхБаллов");
	ТаблицаОстатковКСписанию.Колонки.Добавить("ДатаОкончанияСрокаДействияСрочныхБонусныхБаллов");
	ТаблицаОстатковКСписанию.Колонки.Добавить("ОстатокСрочныхБонусныхБаллов");
	
	ТаблицаОстатковПоДокументам = Новый ТаблицаЗначений;
	ТаблицаОстатковПоДокументам.Колонки.Добавить("БонуснаяПрограммаЛояльности");
	ТаблицаОстатковПоДокументам.Колонки.Добавить("Партнер");
	ТаблицаОстатковПоДокументам.Колонки.Добавить("Регистратор");
	ТаблицаОстатковПоДокументам.Колонки.Добавить("ДатаКОбработке");
	ТаблицаОстатковПоДокументам.Колонки.Добавить("ДатаНачалаДействия");
	ТаблицаОстатковПоДокументам.Колонки.Добавить("Период");
	ТаблицаОстатковПоДокументам.Колонки.Добавить("КСписанию");
	
	ТаблицаДокументовКСнятиюСОбработки = Новый ТаблицаЗначений;
	ТаблицаДокументовКСнятиюСОбработки.Колонки.Добавить("БонуснаяПрограммаЛояльности");
	ТаблицаДокументовКСнятиюСОбработки.Колонки.Добавить("Партнер");
	ТаблицаДокументовКСнятиюСОбработки.Колонки.Добавить("Регистратор");
	ТаблицаДокументовКСнятиюСОбработки.Колонки.Добавить("ДатаНачалаДействия");
	ТаблицаДокументовКСнятиюСОбработки.Колонки.Добавить("Период");
	ТаблицаДокументовКСнятиюСОбработки.Колонки.Добавить("КСписанию");
	ТаблицаДокументовКСнятиюСОбработки.Колонки.Добавить("ДатаКОбработке");
	
	ВыборкаОстаткиБонуснаяПрограммаЛояльности = РезультатЗапросаОстатки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "БонуснаяПрограммаЛояльности");
	ВыборкаОстаткиПоДокументамБонуснаяПрограммаЛояльности = РезультатЗапросаОстаткиПоДокументам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "БонуснаяПрограммаЛояльности");
	ВыборкаДокументыКСнятиюСОбработкиБонуснаяПрограммаЛояльности = РезультатЗапросаДокументыКСнятиюСОбработки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "БонуснаяПрограммаЛояльности");
	
	КоличествоОбработанныхДокументов = 0;	
	Пока ВыборкаОстаткиБонуснаяПрограммаЛояльности.Следующий() Цикл
		
		ВыборкаОстаткиПартнер = ВыборкаОстаткиБонуснаяПрограммаЛояльности.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Партнер");
		
		Пока ВыборкаОстаткиПартнер.Следующий() Цикл
			
			// Получить таблицу остатков просроченных срочных бонусных баллов
			ВыборкаОстаткиДетали = ВыборкаОстаткиПартнер.Выбрать();
			
			ТаблицаОстатковКСписанию.Очистить();
			Пока ВыборкаОстаткиДетали.Следующий() Цикл
				СтрокаТаблицаОстатковКСписанию = ТаблицаОстатковКСписанию.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицаОстатковКСписанию, ВыборкаОстаткиДетали);
			КонецЦикла;
			
			// Получить таблицу начислений срочных бонусных баллов для списания просроченных срочных бонусных баллов
			
			СтруктураПоискаБонуснаяПрограммаЛояльности = Новый Структура;
			СтруктураПоискаБонуснаяПрограммаЛояльности.Вставить(
				"БонуснаяПрограммаЛояльности",
				ВыборкаОстаткиБонуснаяПрограммаЛояльности.БонуснаяПрограммаЛояльности);
				
			ВыборкаОстаткиПоДокументамБонуснаяПрограммаЛояльности.Сбросить();
			Если ВыборкаОстаткиПоДокументамБонуснаяПрограммаЛояльности.НайтиСледующий(СтруктураПоискаБонуснаяПрограммаЛояльности) Тогда
				
				ВыборкаОстаткиПоДокументамПартнер = ВыборкаОстаткиПоДокументамБонуснаяПрограммаЛояльности.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Партнер");
				
				СтруктураПоискаПартнер = Новый Структура;
				СтруктураПоискаПартнер.Вставить(
					"Партнер",
					ВыборкаОстаткиПартнер.Партнер);
				
				Если ВыборкаОстаткиПоДокументамПартнер.НайтиСледующий(СтруктураПоискаПартнер) Тогда
					
					ВыборкаВыборкаОстаткиПоДокументамДетали = ВыборкаОстаткиПоДокументамПартнер.Выбрать();
					
					ТаблицаОстатковПоДокументам.Очистить();
					Пока ВыборкаВыборкаОстаткиПоДокументамДетали.Следующий() Цикл
						СтрокаТаблицаОстатковПоДокументам = ТаблицаОстатковПоДокументам.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТаблицаОстатковПоДокументам, ВыборкаВыборкаОстаткиПоДокументамДетали);
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
			// Получить таблицу документов для снятия с дальнейшей обработки распределения срочных бонусных баллов
			
			СтруктураПоискаБонуснаяПрограммаЛояльности = Новый Структура;
			СтруктураПоискаБонуснаяПрограммаЛояльности.Вставить(
				"БонуснаяПрограммаЛояльности",
				ВыборкаОстаткиБонуснаяПрограммаЛояльности.БонуснаяПрограммаЛояльности);
				
			ВыборкаДокументыКСнятиюСОбработкиБонуснаяПрограммаЛояльности.Сбросить();
			Если ВыборкаДокументыКСнятиюСОбработкиБонуснаяПрограммаЛояльности.НайтиСледующий(СтруктураПоискаБонуснаяПрограммаЛояльности) Тогда
				
				ВыборкаДокументыКСнятиюСОбработкиПартнер = ВыборкаДокументыКСнятиюСОбработкиБонуснаяПрограммаЛояльности.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Партнер");
				
				СтруктураПоискаПартнер = Новый Структура;
				СтруктураПоискаПартнер.Вставить(
					"Партнер",
					ВыборкаОстаткиПартнер.Партнер);
				
				Если ВыборкаДокументыКСнятиюСОбработкиПартнер.НайтиСледующий(СтруктураПоискаПартнер) Тогда
					
					ВыборкаДокументыКСнятиюСОбработкиДетали = ВыборкаДокументыКСнятиюСОбработкиПартнер.Выбрать();
					
					ТаблицаДокументовКСнятиюСОбработки.Очистить();
					Пока ВыборкаДокументыКСнятиюСОбработкиДетали.Следующий() Цикл
						СтрокаТаблицаДокументовКСнятиюСОбработки = ТаблицаДокументовКСнятиюСОбработки.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТаблицаДокументовКСнятиюСОбработки, ВыборкаДокументыКСнятиюСОбработкиДетали);
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Для Каждого СтрокаТаблицаОстатковКСписанию Из ТаблицаОстатковКСписанию Цикл
				
				НачатьТранзакцию();
				
				Попытка
					
					// Списать просроченные срочные бонусные баллы с остатков по регистру
					НулевыеСтрокиОстатковКУдалению = СписатьОстаткиПросроченныхСрочныхБонусныхБаллов(
						СтрокаТаблицаОстатковКСписанию,
						ТаблицаОстатковПоДокументам);
					
					Для Каждого СтрокаКУдалению Из НулевыеСтрокиОстатковКУдалению Цикл
						ТаблицаОстатковПоДокументам.Удалить(СтрокаКУдалению);
					КонецЦикла;
					
					// Снять документы с дальнейшей обработки распределения срочных бонусных баллов
					НулевыеСтрокиОстатковКУдалению = СнятьДокументыСоСтатусаКОбработке(
						СтрокаТаблицаОстатковКСписанию,
						ТаблицаДокументовКСнятиюСОбработки);
					
					Для Каждого СтрокаКУдалению Из НулевыеСтрокиОстатковКУдалению Цикл
						ТаблицаДокументовКСнятиюСОбработки.Удалить(СтрокаКУдалению);
					КонецЦикла;
					
					//
					ЗафиксироватьТранзакцию();
					КоличествоОбработанныхДокументов = КоличествоОбработанныхДокументов + 1;
					
				Исключение
					
					Если ТранзакцияАктивна() Тогда
						ОтменитьТранзакцию();
					КонецЕсли;
					ИнформацияОбОшибке = ИнформацияОбОшибке();
					ТекстОшибки = ИнформацияОбОшибке.Описание;
					Прервать;
					
				КонецПопытки;
				
			КонецЦикла;
			
		КонецЦикла;
			
	КонецЦикла;
	
	Возврат КоличествоОбработанныхДокументов;
	
КонецФункции

// Возвращает результат запроса с остатками просроченных срочных бонусных баллов.
// 
// Параметры:
//  ДатаНачалаРаботыМеханизмаБонусныхБаллов_2_5 - Дата - Дата начала работы механизма бонусных баллов 2_5
//  РазмерПорции - Число - Количество записей к обработке
// 
// Возвращаемое значение:
//  РезультатЗапроса - Результат запроса с остатками просроченных срочных бонусных баллов
Функция РезультатЗапросаОстаткиПросроченныхСрочныхБонусныхБаллов(
	ДатаНачалаРаботыМеханизмаБонусныхБаллов_2_5,
	РазмерПорции = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	БонусныеБаллы.ДатаНачалаДействия КАК ДатаНачалаДействияСрочныхБонусныхБаллов,
	|	БонусныеБаллы.Период КАК ДатаОкончанияСрокаДействияСрочныхБонусныхБаллов,
	|	БонусныеБаллы.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
	|	БонусныеБаллы.Партнер КАК Партнер,
	|	СУММА(ВЫБОР
	|			КОГДА БонусныеБаллы.ВидДвижения = &ВидДвиженияПриход
	|				ТОГДА БонусныеБаллы.КСписанию
	|			ИНАЧЕ -БонусныеБаллы.КСписанию
	|		КОНЕЦ) КАК ОстатокСрочныхБонусныхБаллов
	|ПОМЕСТИТЬ ОстаткиПросроченныхСрочныхБонусныхБаллов
	|ИЗ
	|	РегистрНакопления.БонусныеБаллы КАК БонусныеБаллы
	|ГДЕ
	|	БонусныеБаллы.ДатаКОбработке >= &ДатаНачалаРаботыМеханизмаБонусныхБаллов
	|	И БонусныеБаллы.Период <= &ТекущаяДата
	|	И БонусныеБаллы.КСписанию <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	БонусныеБаллы.Период,
	|	БонусныеБаллы.БонуснаяПрограммаЛояльности,
	|	БонусныеБаллы.Партнер,
	|	БонусныеБаллы.ДатаНачалаДействия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Партнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиПросроченныхСрочныхБонусныхБаллов.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
	|	ОстаткиПросроченныхСрочныхБонусныхБаллов.БонуснаяПрограммаЛояльности.Наименование КАК БонуснаяПрограммаЛояльностиНаименование,
	|	ОстаткиПросроченныхСрочныхБонусныхБаллов.Партнер КАК Партнер,
	|	ОстаткиПросроченныхСрочныхБонусныхБаллов.Партнер.Наименование КАК ПартнерНаименование,
	|	ОстаткиПросроченныхСрочныхБонусныхБаллов.ДатаНачалаДействияСрочныхБонусныхБаллов КАК ДатаНачалаДействияСрочныхБонусныхБаллов,
	|	ОстаткиПросроченныхСрочныхБонусныхБаллов.ДатаОкончанияСрокаДействияСрочныхБонусныхБаллов КАК ДатаОкончанияСрокаДействияСрочныхБонусныхБаллов,
	|	ОстаткиПросроченныхСрочныхБонусныхБаллов.ОстатокСрочныхБонусныхБаллов КАК ОстатокСрочныхБонусныхБаллов
	|ИЗ
	|	ОстаткиПросроченныхСрочныхБонусныхБаллов КАК ОстаткиПросроченныхСрочныхБонусныхБаллов
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПартнерНаименование,
	|	БонуснаяПрограммаЛояльностиНаименование,
	|	ОстаткиПросроченныхСрочныхБонусныхБаллов.ДатаНачалаДействияСрочныхБонусныхБаллов
	|ИТОГИ ПО
	|	БонуснаяПрограммаЛояльности,
	|	Партнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БонусныеБаллы.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
	|	БонусныеБаллы.Партнер КАК Партнер,
	|	БонусныеБаллы.Регистратор КАК Регистратор,
	|	БонусныеБаллы.ДатаКОбработке КАК ДатаКОбработке,
	|	БонусныеБаллы.ДатаНачалаДействия КАК ДатаНачалаДействия,
	|	БонусныеБаллы.Период КАК Период,
	|	БонусныеБаллы.КСписанию КАК КСписанию
	|ИЗ
	|	РегистрНакопления.БонусныеБаллы КАК БонусныеБаллы
	|ГДЕ
	|	БонусныеБаллы.ДатаКОбработке >= &ДатаНачалаРаботыМеханизмаБонусныхБаллов
	|	И БонусныеБаллы.ВидДвижения = &ВидДвиженияПриход
	|	И (БонусныеБаллы.ДатаНачалаДействия, БонусныеБаллы.Период, БонусныеБаллы.БонуснаяПрограммаЛояльности, БонусныеБаллы.Партнер) В
	|			(ВЫБРАТЬ
	|				ОстаткиПросроченныхСрочныхБонусныхБаллов.ДатаНачалаДействияСрочныхБонусныхБаллов,
	|				ОстаткиПросроченныхСрочныхБонусныхБаллов.ДатаОкончанияСрокаДействияСрочныхБонусныхБаллов,
	|				ОстаткиПросроченныхСрочныхБонусныхБаллов.БонуснаяПрограммаЛояльности,
	|				ОстаткиПросроченныхСрочныхБонусныхБаллов.Партнер
	|			ИЗ
	|				ОстаткиПросроченныхСрочныхБонусныхБаллов КАК ОстаткиПросроченныхСрочныхБонусныхБаллов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаНачалаДействия
	|ИТОГИ ПО
	|	БонуснаяПрограммаЛояльности,
	|	Партнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	БонусныеБаллы.Период,
	|	БонусныеБаллы.Регистратор,
	|	БонусныеБаллы.БонуснаяПрограммаЛояльности,
	|	БонусныеБаллы.БонуснаяПрограммаЛояльности.Наименование КАК БонуснаяПрограммаЛояльностиНаименование,
	|	БонусныеБаллы.Партнер,
	|	БонусныеБаллы.Партнер.Наименование КАК ПартнерНаименование,
	|	БонусныеБаллы.КСписанию,
	|	БонусныеБаллы.ДатаНачалаДействия,
	|	БонусныеБаллы.ДатаКОбработке
	|ИЗ
	|	РегистрНакопления.БонусныеБаллы КАК БонусныеБаллы
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиПросроченныхСрочныхБонусныхБаллов КАК ОстаткиПросроченныхСрочныхБонусныхБаллов
	|	ПО БонусныеБаллы.Партнер = ОстаткиПросроченныхСрочныхБонусныхБаллов.Партнер
	|		И БонусныеБаллы.БонуснаяПрограммаЛояльности = ОстаткиПросроченныхСрочныхБонусныхБаллов.БонуснаяПрограммаЛояльности
	|		И БонусныеБаллы.ДатаНачалаДействия = ОстаткиПросроченныхСрочныхБонусныхБаллов.ДатаНачалаДействияСрочныхБонусныхБаллов
	|		И БонусныеБаллы.Период = ОстаткиПросроченныхСрочныхБонусныхБаллов.ДатаОкончанияСрокаДействияСрочныхБонусныхБаллов
	|ГДЕ
	|	БонусныеБаллы.ДатаКОбработке >= &ДатаНачалаРаботыМеханизмаБонусныхБаллов
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПартнерНаименование,
	|	БонуснаяПрограммаЛояльностиНаименование,
	|	ДатаНачалаДействия
	|ИТОГИ ПО
	|	БонусныеБаллы.БонуснаяПрограммаЛояльности,
	|	БонусныеБаллы.Партнер";
	Запрос.УстановитьПараметр("ДатаНачалаРаботыМеханизмаБонусныхБаллов", ДатаНачалаРаботыМеханизмаБонусныхБаллов_2_5);
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ВидДвиженияПриход", ВидДвиженияНакопления.Приход);
	
	Если РазмерПорции <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст , "ПЕРВЫЕ 1000", "ПЕРВЫЕ " + Формат(РазмерПорции, "ЧГ=;"));
	КонецЕсли;
	
	Возврат Запрос.ВыполнитьПакет();
	
КонецФункции

#КонецОбласти

// Запускает автоматическое начисление и списание баллов и контролирует результат.
// 
// Параметры:
//  ПравилоНачисления - СправочникСсылка.ПравилаНачисленияИСписанияБонусныхБаллов - правило начисления баллов.
//
Процедура ВыполнитьАвтоматическоеНачислениеИСписаниеРегламентноеЗадание(ПравилоНачисления) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.АвтоматическоеНачислениеИСписаниеБонусныхБаллов);
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьБонусныеПрограммыЛояльности") 
		Или Не ЗначениеЗаполнено(ПравилоНачисления) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЖурнала = Новый Структура("ГруппаСобытий, Метаданные, Данные");
	ПараметрыЖурнала.ГруппаСобытий = НСтр("ru = 'Автоматическое начисление и списание бонусных баллов. Запуск по расписанию'");
	ПараметрыЖурнала.Метаданные    = ПравилоНачисления.Метаданные();
	ПараметрыЖурнала.Данные        = ПравилоНачисления;
	
	СегментыСервер.ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Примечание, "", НСтр("ru = 'Запуск'"));
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ПравилоНачисления,
		"ПометкаУдаления, Наименование");
	
	// Проверки
	Если Реквизиты.ПометкаУдаления Тогда
		СегментыСервер.ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Ошибка, "",
			НСтр("ru = 'Завершение'"), НСтр("ru = 'Элемент автоматического начисления и списания бонусных баллов помечен на удаление'"));
		Возврат;
	КонецЕсли;
	
	БонусныеБаллыСервер.ВыполнитьАвтоматическоеНачислениеИСписание(ПравилоНачисления);
	СегментыСервер.ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Примечание, "",НСтр("ru = 'Завершение'"));
	
КонецПроцедуры

// Выполняет автоматическое начисление и списание бонусных
// баллов по правилу начисления бонусных баллов.
// 
// Параметры:
//  ПравилоНачисления - СправочникСсылка.ПравилаНачисленияИСписанияБонусныхБаллов - правило начисления.
//
Процедура ВыполнитьАвтоматическоеНачислениеИСписание(ПравилоНачисления) Экспорт
	
	ДатаНачисления = ТекущаяДатаСеанса();
	
	ТаблицаНачислениеИСписание = ТаблицаНачислениеИСписание(ПравилоНачисления, ДатаНачисления);

	Если ТаблицаНачислениеИСписание.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПравилаНачисленияИСписанияБонусныхБаллов.ПериодДействия КАК ПериодДействия,
	|	ПравилаНачисленияИСписанияБонусныхБаллов.КоличествоПериодовДействия КАК КоличествоПериодовДействия,
	|	ПравилаНачисленияИСписанияБонусныхБаллов.КоличествоПериодовОтсрочкиНачалаДействия КАК КоличествоПериодовОтсрочкиНачалаДействия,
	|	ПравилаНачисленияИСписанияБонусныхБаллов.ПериодОтсрочкиНачалаДействия КАК ПериодОтсрочкиНачалаДействия,
	|	ПравилаНачисленияИСписанияБонусныхБаллов.ВидПравила КАК ВидПравила,
	|	ПравилаНачисленияИСписанияБонусныхБаллов.Владелец КАК БонуснаяПрограммаЛояльности
	|ИЗ
	|	Справочник.ПравилаНачисленияИСписанияБонусныхБаллов КАК ПравилаНачисленияИСписанияБонусныхБаллов
	|ГДЕ
	|	ПравилаНачисленияИСписанияБонусныхБаллов.Ссылка = &ПравилоНачисления");
	
	Запрос.УстановитьПараметр("ПравилоНачисления", ПравилоНачисления);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		НачислениеИСписаниеБонусныхБаллов = Документы.НачислениеИСписаниеБонусныхБаллов.СоздатьДокумент();
		НачислениеИСписаниеБонусныхБаллов.ПравилоНачисления = ПравилоНачисления;
		НачислениеИСписаниеБонусныхБаллов.Дата              = ДатаНачисления;
		НачислениеИСписаниеБонусныхБаллов.БонуснаяПрограммаЛояльности              = Выборка.БонуснаяПрограммаЛояльности;
		НачислениеИСписаниеБонусныхБаллов.ВидПравила                               = Выборка.ВидПравила;
		НачислениеИСписаниеБонусныхБаллов.КоличествоПериодовДействия               = Выборка.КоличествоПериодовДействия;
		НачислениеИСписаниеБонусныхБаллов.КоличествоПериодовОтсрочкиНачалаДействия = Выборка.КоличествоПериодовОтсрочкиНачалаДействия;
		НачислениеИСписаниеБонусныхБаллов.ПериодОтсрочкиНачалаДействия             = Выборка.ПериодОтсрочкиНачалаДействия;
		НачислениеИСписаниеБонусныхБаллов.ПериодДействия                           = Выборка.ПериодДействия;
		
		Для Каждого СтрокаТЧ Из ТаблицаНачислениеИСписание Цикл
		
			Если НачислениеИСписаниеБонусныхБаллов.ВидПравила = Перечисления.ВидыПравилНачисленияБонусныхБаллов.Начисление Тогда
				НоваяСтрока = НачислениеИСписаниеБонусныхБаллов.Начисление.Добавить();
			Иначе
				НоваяСтрока = НачислениеИСписаниеБонусныхБаллов.Списание.Добавить();
			КонецЕсли;
			
			НоваяСтрока.Партнер = СтрокаТЧ.Партнер;
			НоваяСтрока.Баллы   = СтрокаТЧ.СуммаНачисления;
			
		КонецЦикла;
		
		НачислениеИСписаниеБонусныхБаллов.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		
	КонецЕсли;
	
КонецПроцедуры

// Получает данные об остатках бонусных баллов партнера по бонусной программе лояльности.
//
// Параметры:
//  БонуснаяПрограммаЛояльности - СправочникСсылка.БонусныеПрограммыЛояльности - Бонусная программа лояльности.
//  Партнер - СправочникСсылка.Партнеры - Партнер.
//
// Возвращаемое значение:
//  ТаблицаЗначений - с колонками:
//   * Период - Дата - Период.
//   * Сумма - Число - Сумма.
//   * Изменение - Число - Сумма изменения.
//   * ТекущийОстаток - Число - Текущий остаток.
//
Функция ОстаткиИДвиженияБонусныхБаллов(БонуснаяПрограммаЛояльности, Партнер) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОстаткиБонусныхБаллов = Новый ТаблицаЗначений;
	ОстаткиБонусныхБаллов.Колонки.Добавить("Период");
	ОстаткиБонусныхБаллов.Колонки.Добавить("Сумма");
	ОстаткиБонусныхБаллов.Колонки.Добавить("Изменение");
	ОстаткиБонусныхБаллов.Колонки.Добавить("ТекущийОстаток");
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	&БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
	|	&Партнер КАК Партнер
	|ПОМЕСТИТЬ ИсходныеДанныеПредварительные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсходныеДанныеПредварительные.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
	|	ИсходныеДанныеПредварительные.Партнер КАК Партнер,
	|	НЕ СостояниеБонусовСерверЛояльности.ДисконтнаяКарта ЕСТЬ NULL КАК КартаЗаблокирована
	|ПОМЕСТИТЬ СостояниеБонусовСерверЛояльности
	|ИЗ
	|	ИсходныеДанныеПредварительные КАК ИсходныеДанныеПредварительные
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеБонусовСерверЛояльности КАК СостояниеБонусовСерверЛояльности
	|		ПО СостояниеБонусовСерверЛояльности.ДисконтнаяКарта.Партнер = ИсходныеДанныеПредварительные.Партнер
	|		И СостояниеБонусовСерверЛояльности.ДисконтнаяКарта.Владелец.БонуснаяПрограммаЛояльности = ИсходныеДанныеПредварительные.БонуснаяПрограммаЛояльности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсходныеДанныеПредварительные.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
	|	ИсходныеДанныеПредварительные.Партнер КАК Партнер,
	|	СУММА(ЕСТЬNULL(БонусныеБаллыКСписанию.КСписанию, 0)) КАК КСписанию
	|ПОМЕСТИТЬ БонусныеБаллыКСписаниюСерверЛояльности
	|ИЗ
	|	ИсходныеДанныеПредварительные КАК ИсходныеДанныеПредварительные
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.БонусныеБаллыКСписанию КАК БонусныеБаллыКСписанию
	|		ПО БонусныеБаллыКСписанию.ДисконтнаяКарта.Партнер = ИсходныеДанныеПредварительные.Партнер
	|		И БонусныеБаллыКСписанию.БонуснаяПрограммаЛояльности = ИсходныеДанныеПредварительные.БонуснаяПрограммаЛояльности
	|СГРУППИРОВАТЬ ПО
	|	ИсходныеДанныеПредварительные.БонуснаяПрограммаЛояльности,
	|	ИсходныеДанныеПредварительные.Партнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Сейчас"" КАК Период,
	|	ВЫБОР
	|		КОГДА БонусныеБаллыОстаткиИОбороты.НачисленоОстаток - 
	|				ВЫБОР КОГДА (БонусныеБаллыОстаткиИОбороты.КСписаниюОстаток + БонусныеБаллыКСписанию.КСписанию) > 0 ТОГДА (БонусныеБаллыОстаткиИОбороты.КСписаниюОстаток + БонусныеБаллыКСписанию.КСписанию) ИНАЧЕ 0 КОНЕЦ >= 0
	|			ТОГДА БонусныеБаллыОстаткиИОбороты.НачисленоОстаток - 
	|					ВЫБОР КОГДА (БонусныеБаллыОстаткиИОбороты.КСписаниюОстаток + БонусныеБаллыКСписанию.КСписанию) > 0 ТОГДА (БонусныеБаллыОстаткиИОбороты.КСписаниюОстаток + БонусныеБаллыКСписанию.КСписанию) ИНАЧЕ 0 КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма
	|ПОМЕСТИТЬ НачальныйОстаток
	|ИЗ
	|	РегистрНакопления.БонусныеБаллы.Остатки(
	|			&ДатаНачала,
	|			(БонуснаяПрограммаЛояльности, Партнер) В
	|				(ВЫБРАТЬ
	|					СостояниеБонусовСерверЛояльности.БонуснаяПрограммаЛояльности,
	|					СостояниеБонусовСерверЛояльности.Партнер
	|				ИЗ
	|					СостояниеБонусовСерверЛояльности
	|				ГДЕ НЕ СостояниеБонусовСерверЛояльности.КартаЗаблокирована)) КАК БонусныеБаллыОстаткиИОбороты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ БонусныеБаллыКСписаниюСерверЛояльности КАК БонусныеБаллыКСписанию
	|		ПО БонусныеБаллыОстаткиИОбороты.Партнер = БонусныеБаллыКСписанию.Партнер
	|		И БонусныеБаллыОстаткиИОбороты.БонуснаяПрограммаЛояльности = БонусныеБаллыКСписанию.БонуснаяПрограммаЛояльности
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Сейчас"",
	|	0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачальныйОстаток.Период КАК Период,
	|	СУММА(НачальныйОстаток.Сумма) КАК Сумма
	|ИЗ
	|	НачальныйОстаток КАК НачальныйОстаток
	|
	|СГРУППИРОВАТЬ ПО
	|	НачальныйОстаток.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БонусныеБаллыОстаткиИОбороты.ПериодДень КАК Период,
	|	ВЫБОР
	|		КОГДА БонусныеБаллыОстаткиИОбороты.НачисленоКонечныйОстаток - ВЫБОР КОГДА БонусныеБаллыОстаткиИОбороты.КСписаниюКонечныйОстаток > 0 ТОГДА БонусныеБаллыОстаткиИОбороты.КСписаниюКонечныйОстаток ИНАЧЕ 0 КОНЕЦ >= 0
	|			ТОГДА БонусныеБаллыОстаткиИОбороты.НачисленоКонечныйОстаток - ВЫБОР КОГДА БонусныеБаллыОстаткиИОбороты.КСписаниюКонечныйОстаток > 0 ТОГДА БонусныеБаллыОстаткиИОбороты.КСписаниюКонечныйОстаток ИНАЧЕ 0 КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма
	|ИЗ
	|	РегистрНакопления.БонусныеБаллы.ОстаткиИОбороты(
	|			&ДатаНачала,
	|			,
	|			Авто,
	|			Движения,
	|			(БонуснаяПрограммаЛояльности, Партнер) В
	|				(ВЫБРАТЬ
	|					СостояниеБонусовСерверЛояльности.БонуснаяПрограммаЛояльности,
	|					СостояниеБонусовСерверЛояльности.Партнер
	|				ИЗ
	|					СостояниеБонусовСерверЛояльности
	|				ГДЕ НЕ СостояниеБонусовСерверЛояльности.КартаЗаблокирована)) КАК БонусныеБаллыОстаткиИОбороты
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период");

	Запрос.УстановитьПараметр("ДатаНачала",                  ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("БонуснаяПрограммаЛояльности", БонуснаяПрограммаЛояльности);
	Запрос.УстановитьПараметр("Партнер",                     Партнер);

	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	НачальныйОстатокВБаллах = 0;
	
	// Текущий остаток
	РезультатТекущийОстаток = МассивРезультатов[4]; // РезультатЗапроса
	Выборка = РезультатТекущийОстаток.Выбрать();
	ТекущийОстаток = 0;
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ОстаткиБонусныхБаллов.Добавить();
		НоваяСтрока.Период = Выборка.Период;
		НоваяСтрока.Сумма = Выборка.Сумма;
		НачальныйОстатокВБаллах = НоваяСтрока.Сумма;
		ТекущийОстаток = НоваяСтрока.Сумма;
		НоваяСтрока.ТекущийОстаток = Истина;
		
	КонецЦикла;
	
	// Списания баллов
	РезультатСписанияБаллов = МассивРезультатов[5]; // РезультатЗапроса
	Выборка = РезультатСписанияБаллов.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Изменение = Выборка.Сумма - ТекущийОстаток;
		
		Если Изменение = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ОстаткиБонусныхБаллов.Добавить();
		Если Изменение > 0 Тогда
			НоваяСтрока.Период = НСтр("ru = 'Начисление через'")
			                   + " " + СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(Цел((Выборка.Период - ТекущаяДатаСеанса())/(24*60*60)), НСтр("ru = 'день, дня, дней'"))
			                   + " " + "("+Формат(Выборка.Период,"ДЛФ=D")+"):"
			                   + " " + СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(Изменение, НСтр("ru = 'балл, балла, баллов'"))
		Иначе
			НоваяСтрока.Период = НСтр("ru = 'Списание через'")
			                   + " " + СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(Цел((Выборка.Период - ТекущаяДатаСеанса())/(24*60*60)), НСтр("ru = 'день, дня, дней'"))
			                   + " " + "("+Формат(Выборка.Период,"ДЛФ=D")+"):"
			                   + " " + СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(-Изменение, НСтр("ru = 'балл, балла, баллов'"))
		КонецЕсли;
		
		НоваяСтрока.Сумма = Выборка.Сумма;
		НоваяСтрока.Изменение = Изменение;
		ТекущийОстаток = Выборка.Сумма; 
		
	КонецЦикла;
	
	Возврат ОстаткиБонусныхБаллов;
	
КонецФункции

// Получает данные бонусной программы по карте лояльности.
//
// Параметры:
//  КартаЛояльности - СправочникСсылка.КартыЛояльности - карта лояльности.
//
// Возвращаемое значение:
//  СправочникСсылка.БонусныеПрограммыЛояльности - Бонусная программа лояльности.
//
Функция БонуснаяПрограммаКартыЛояльности(КартаЛояльности) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КартыЛояльности.Владелец                                                               КАК ВидКартыЛояльности,
	|	КартыЛояльности.Владелец.БонуснаяПрограммаЛояльности                                   КАК БонуснаяПрограммаЛояльности,
	|	КартыЛояльности.Владелец.БонуснаяПрограммаЛояльности.ВалютаКонвертацииБонусов          КАК Валюта,
	|	КартыЛояльности.Владелец.БонуснаяПрограммаЛояльности.КурсКонвертацииБонусовВВалюту     КАК КурсКонвертацииБонусовВВалюту,
	|	КартыЛояльности.Партнер                                                                КАК Партнер,
	|	КартыЛояльности.Владелец.БонуснаяПрограммаЛояльности.НеНачислятьБаллыПриОплатеБонусами КАК НеНачислятьБаллыПриОплатеБонусами,
	|	КартыЛояльности.Владелец.БонуснаяПрограммаЛояльности.МаксимальныйПроцентОплатыБонусами КАК МаксимальныйПроцентОплатыБонусами
	|ИЗ
	|	Справочник.КартыЛояльности КАК КартыЛояльности
	|ГДЕ
	|	КартыЛояльности.Ссылка = &КартаЛояльности");
	Запрос.УстановитьПараметр("КартаЛояльности", КартаЛояльности);
	
	ВыборкаБонуснаяПрограммаЛояльности = Запрос.Выполнить().Выбрать();
	ВыборкаБонуснаяПрограммаЛояльности.Следующий();
	
	Возврат ВыборкаБонуснаяПрограммаЛояльности;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьБонусныеБаллыВозвратТоваровОтКлиента(ТекущийОбъект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущийОбъект.НачислениеБонусныхБаллов.Очистить();
	ТекущийОбъект.ОплатаБонуснымиБаллами.Очистить();
	
	Если ТипЗнч(ТекущийОбъект) = Тип("ДокументОбъект.ВозвратТоваровОтКлиента") Тогда
		ДокументОснование = ТекущийОбъект.ДокументРеализации;
		
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
			ТекстЗапроса = ТекстЗапросаВозвратБонусныхБалловРозничныеПродажи();
		ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			ТекстЗапроса = ТекстЗапросаВозвратБонусныхБалловОптовыеПродажи();
		Иначе
			Возврат;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ТекущийОбъект) = Тип("ДокументОбъект.КорректировкаРеализации") Тогда
		ДокументОснование = ТекущийОбъект.ДокументОснование;
		
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			ТекстЗапроса = ТекстЗапросаВозвратБонусныхБалловОптовыеПродажи();
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;

	Если ТипЗнч(ТекущийОбъект) = Тип("ДокументОбъект.ВозвратТоваровОтКлиента") Тогда
		Запрос.УстановитьПараметр("СсылкаДокументаВозврат", ТекущийОбъект.Ссылка);
		Запрос.УстановитьПараметр("СсылкаДокументаКорректировка", Документы.КорректировкаРеализации.ПустаяСсылка());
		Запрос.УстановитьПараметр("Товары", ТекущийОбъект.Товары.Выгрузить(,"Номенклатура, Характеристика, Сумма"));
	Иначе
		Запрос.УстановитьПараметр("СсылкаДокументаКорректировка", ТекущийОбъект.Ссылка);
		Запрос.УстановитьПараметр("СсылкаДокументаВозврат", Документы.ВозвратТоваровОтКлиента.ПустаяСсылка());
		
		Товары = ТекущийОбъект.Расхождения.Выгрузить(,"Номенклатура, Характеристика, Сумма");
		ИндексСтроки = Товары.Количество()-1;
		
		Пока ИндексСтроки >= 0 Цикл
			
			ТекущаяСтрока = Товары[ИндексСтроки];
			
			Если ТекущаяСтрока.Сумма > 0 Тогда
				Товары.Удалить(ТекущаяСтрока);
			Иначе
				ТекущаяСтрока.Сумма = -ТекущаяСтрока.Сумма;
			КонецЕсли;
			
			ИндексСтроки = ИндексСтроки - 1;
			
		КонецЦикла;
		
		Если Товары.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Товары", Товары);
	КонецЕсли;
		
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("ВалютаДокумента", ТекущийОбъект.Валюта);
	Запрос.УстановитьПараметр("Дата", ТекущийОбъект.Дата);
	Запрос.УстановитьПараметр("Партнер", ТекущийОбъект.Партнер);

	Результаты = Запрос.ВыполнитьПакет();
	
	ОстаткиНачисленныхБонусныхБаллов = Результаты[1].Выгрузить();
	ОстаткиСписываемыхБонусныхБаллов = Результаты[2].Выгрузить();
	
	СуммаНачисленныхБалловКВозврату = 0;
	СуммаСписанныхБонусныхБалловКВозврату = 0;
	
	ВыборкаТовары = Результаты[3].Выбрать();
	Если ВыборкаТовары.Следующий() Тогда
		
		Если ВыборкаТовары.Сумма <> 0 Тогда
			СуммаНачисленныхБалловКВозврату = ОстаткиНачисленныхБонусныхБаллов.Итог("СуммаБонусныхБаллов")
			                                * ВыборкаТовары.СуммаВДокументе / ВыборкаТовары.Сумма;
			
			СуммаСписанныхБонусныхБалловКВозврату = ОстаткиСписываемыхБонусныхБаллов.Итог("СуммаБонусныхБаллов")
			                                      * ВыборкаТовары.СуммаВДокументе / ВыборкаТовары.Сумма;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из ОстаткиНачисленныхБонусныхБаллов Цикл
		
		Если СуммаНачисленныхБалловКВозврату = 0 Тогда
			Прервать;
		КонецЕсли;
		
		Если СуммаНачисленныхБалловКВозврату >= СтрокаТЧ.СуммаБонусныхБаллов Тогда
			
			СуммаНачисленныхБалловКВозврату = СуммаНачисленныхБалловКВозврату - СтрокаТЧ.СуммаБонусныхБаллов;
			КСписанию = СтрокаТЧ.СуммаБонусныхБаллов;
			
		Иначе
			
			КСписанию = СуммаНачисленныхБалловКВозврату;
			СуммаНачисленныхБалловКВозврату = 0;
			
		КонецЕсли;
		
		НоваяСтрока = ТекущийОбъект.НачислениеБонусныхБаллов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ, "БонуснаяПрограммаЛояльности, ДатаНачисления, ДатаСписания");
		НоваяСтрока.СуммаБонусныхБаллов = КСписанию;
		
		СтрокаТЧ.СуммаБонусныхБаллов = СтрокаТЧ.СуммаБонусныхБаллов - КСписанию;
		
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из ОстаткиСписываемыхБонусныхБаллов Цикл
		
		Если СуммаСписанныхБонусныхБалловКВозврату = 0 Тогда
			Прервать;
		КонецЕсли;
		
		Если СуммаСписанныхБонусныхБалловКВозврату >= СтрокаТЧ.СуммаБонусныхБаллов Тогда
			
			СуммаСписанныхБонусныхБалловКВозврату = СуммаСписанныхБонусныхБалловКВозврату - СтрокаТЧ.СуммаБонусныхБаллов;
			КСписанию = СтрокаТЧ.СуммаБонусныхБаллов;
			
		Иначе
			
			КСписанию = СуммаСписанныхБонусныхБалловКВозврату;
			СуммаСписанныхБонусныхБалловКВозврату = 0;
			
		КонецЕсли;
		
		НоваяСтрока = ТекущийОбъект.ОплатаБонуснымиБаллами.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ, "БонуснаяПрограммаЛояльности, ДатаОплаты");
		НоваяСтрока.СуммаБонусныхБаллов = -КСписанию;
		
		СтрокаТЧ.СуммаБонусныхБаллов = СтрокаТЧ.СуммаБонусныхБаллов - КСписанию;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаВозвратБонусныхБалловРозничныеПродажи()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Сумма
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.БонуснаяПрограммаЛояльности,
	|	Таблица.ДатаНачисления КАК ДатаНачисления,
	|	Таблица.ДатаСписания КАК ДатаСписания,
	|	СУММА(Таблица.СуммаБонусныхБаллов) КАК СуммаБонусныхБаллов
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаБонусныеБаллы.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
	|		ТаблицаБонусныеБаллы.ДатаНачисления КАК ДатаНачисления,
	|		ТаблицаБонусныеБаллы.ДатаСписания КАК ДатаСписания,
	|		ТаблицаБонусныеБаллы.СуммаБонусныхБаллов КАК СуммаБонусныхБаллов
	|	ИЗ
	|		Документ.ОтчетОРозничныхПродажах.НачислениеБонусныхБаллов КАК ТаблицаБонусныеБаллы
	|	ГДЕ
	|		ТаблицаБонусныеБаллы.Ссылка = &ДокументОснование
	|		И ТаблицаБонусныеБаллы.Партнер = &Партнер
	|		И ТаблицаБонусныеБаллы.Ссылка.Проведен
	|		И ТаблицаБонусныеБаллы.СуммаБонусныхБаллов > 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаБонусныеБаллы.БонуснаяПрограммаЛояльности,
	|		ТаблицаБонусныеБаллы.ДатаНачисления,
	|		ТаблицаБонусныеБаллы.ДатаСписания,
	|		-ТаблицаБонусныеБаллы.СуммаБонусныхБаллов
	|	ИЗ
	|		Документ.ВозвратТоваровОтКлиента.НачислениеБонусныхБаллов КАК ТаблицаБонусныеБаллы
	|	ГДЕ
	|		ТаблицаБонусныеБаллы.Ссылка.ДокументРеализации = &ДокументОснование
	|		И ТаблицаБонусныеБаллы.Ссылка.Партнер = &Партнер
	|		И ТаблицаБонусныеБаллы.Ссылка.Проведен
	|		И ТаблицаБонусныеБаллы.СуммаБонусныхБаллов > 0
	|		И ТаблицаБонусныеБаллы.Ссылка.Ссылка <> &СсылкаДокументаВозврат) КАК Таблица
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.БонуснаяПрограммаЛояльности,
	|	Таблица.ДатаНачисления,
	|	Таблица.ДатаСписания
	|
	|ИМЕЮЩИЕ
	|	СУММА(Таблица.СуммаБонусныхБаллов) <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.БонуснаяПрограммаЛояльности,
	|	Таблица.ДатаОплаты КАК ДатаОплаты,
	|	СУММА(Таблица.СуммаБонусныхБаллов) КАК СуммаБонусныхБаллов
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаБонусныеБаллы.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
	|		ТаблицаБонусныеБаллы.ДатаОплаты КАК ДатаОплаты,
	|		ТаблицаБонусныеБаллы.СуммаБонусныхБаллов КАК СуммаБонусныхБаллов
	|	ИЗ
	|		Документ.ОтчетОРозничныхПродажах.ОплатаБонуснымиБаллами КАК ТаблицаБонусныеБаллы
	|	ГДЕ
	|		ТаблицаБонусныеБаллы.Ссылка = &ДокументОснование
	|		И ТаблицаБонусныеБаллы.Партнер = &Партнер
	|		И ТаблицаБонусныеБаллы.Ссылка.Проведен
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаБонусныеБаллы.БонуснаяПрограммаЛояльности,
	|		ТаблицаБонусныеБаллы.ДатаОплаты,
	|		-ТаблицаБонусныеБаллы.СуммаБонусныхБаллов
	|	ИЗ
	|		Документ.ВозвратТоваровОтКлиента.ОплатаБонуснымиБаллами КАК ТаблицаБонусныеБаллы
	|	ГДЕ
	|		ТаблицаБонусныеБаллы.Ссылка.ДокументРеализации = &ДокументОснование
	|		И ТаблицаБонусныеБаллы.Ссылка.Партнер = &Партнер
	|		И ТаблицаБонусныеБаллы.Ссылка.Проведен
	|		И ТаблицаБонусныеБаллы.Ссылка.Ссылка <> &СсылкаДокументаВозврат) КАК Таблица
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.БонуснаяПрограммаЛояльности,
	|	Таблица.ДатаОплаты
	|
	|ИМЕЮЩИЕ
	|	СУММА(Таблица.СуммаБонусныхБаллов) <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(Товары.Сумма), 0) КАК Сумма,
	|	ЕСТЬNULL(СУММА(Товары.СуммаВДокументе), 0) КАК СуммаВДокументе
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаТовары.Номенклатура КАК Номенклатура,
	|		ТаблицаТовары.Характеристика КАК Характеристика,
	|		ТаблицаТовары.Сумма КАК Сумма,
	|		0 КАК СуммаВДокументе
	|	ИЗ
	|		Документ.ОтчетОРозничныхПродажах.Товары КАК ТаблицаТовары
	|	ГДЕ
	|		ТаблицаТовары.Ссылка = &ДокументОснование
	|		И ТаблицаТовары.Ссылка.Проведен
	|		И ТаблицаТовары.Партнер = &Партнер
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Товары.Номенклатура,
	|		Товары.Характеристика,
	|		0,
	|		Товары.Сумма
	|	ИЗ
	|		Товары КАК Товары) КАК Товары
	|";
	
	Возврат ТекстЗапроса
	
КонецФункции

Функция ТекстЗапросаВозвратБонусныхБалловОптовыеПродажи()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Сумма
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
	|	Таблица.ДатаНачисления КАК ДатаНачисления,
	|	Таблица.ДатаСписания КАК ДатаСписания,
	|	СУММА(Таблица.СуммаБонусныхБаллов) КАК СуммаБонусныхБаллов
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаБонусныеБаллы.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
	|		ТаблицаБонусныеБаллы.ДатаНачисления КАК ДатаНачисления,
	|		ТаблицаБонусныеБаллы.ДатаСписания КАК ДатаСписания,
	|		ТаблицаБонусныеБаллы.СуммаБонусныхБаллов КАК СуммаБонусныхБаллов
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.НачислениеБонусныхБаллов КАК ТаблицаБонусныеБаллы
	|	ГДЕ
	|		ТаблицаБонусныеБаллы.Ссылка = &ДокументОснование
	|		И ТаблицаБонусныеБаллы.Ссылка.Проведен
	|		И ТаблицаБонусныеБаллы.СуммаБонусныхБаллов > 0
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ТаблицаБонусныеБаллы.БонуснаяПрограммаЛояльности,
	|		ТаблицаБонусныеБаллы.ДатаНачисления,
	|		ТаблицаБонусныеБаллы.ДатаСписания,
	|		-ТаблицаБонусныеБаллы.СуммаБонусныхБаллов
	|	ИЗ
	|		Документ.ВозвратТоваровОтКлиента.НачислениеБонусныхБаллов КАК ТаблицаБонусныеБаллы
	|	ГДЕ
	|		ТаблицаБонусныеБаллы.Ссылка.ДокументРеализации = &ДокументОснование
	|		И ТаблицаБонусныеБаллы.Ссылка.Партнер = &Партнер
	|		И ТаблицаБонусныеБаллы.Ссылка.Проведен
	|		И ТаблицаБонусныеБаллы.СуммаБонусныхБаллов > 0
	|		И ТаблицаБонусныеБаллы.Ссылка.Ссылка <> &СсылкаДокументаВозврат
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ТаблицаБонусныеБаллы.БонуснаяПрограммаЛояльности,
	|		ТаблицаБонусныеБаллы.ДатаНачисления,
	|		ТаблицаБонусныеБаллы.ДатаСписания,
	|		-ТаблицаБонусныеБаллы.СуммаБонусныхБаллов
	|	ИЗ
	|		Документ.КорректировкаРеализации.НачислениеБонусныхБаллов КАК ТаблицаБонусныеБаллы
	|	ГДЕ
	|		ТаблицаБонусныеБаллы.Ссылка.ДокументОснование = &ДокументОснование
	|		И (ТаблицаБонусныеБаллы.Ссылка.ВидКорректировки = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратНедопоставленногоТовара)
	|			ИЛИ ТаблицаБонусныеБаллы.Ссылка.ВидКорректировки = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаПоСогласованиюСторон)
	|			ИЛИ ТаблицаБонусныеБаллы.Ссылка.ВидКорректировки = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ИсправлениеОшибок))
	|		И ТаблицаБонусныеБаллы.Ссылка.Партнер = &Партнер
	|		И ТаблицаБонусныеБаллы.Ссылка.Проведен
	|		И ТаблицаБонусныеБаллы.СуммаБонусныхБаллов > 0
	|		И ТаблицаБонусныеБаллы.Ссылка.Ссылка <> &СсылкаДокументаКорректировка) КАК Таблица
	|СГРУППИРОВАТЬ ПО
	|	Таблица.БонуснаяПрограммаЛояльности,
	|	Таблица.ДатаНачисления,
	|	Таблица.ДатаСписания
	|ИМЕЮЩИЕ
	|	СУММА(Таблица.СуммаБонусныхБаллов) <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
	|	Таблица.ДатаОплаты КАК ДатаОплаты,
	|	СУММА(Таблица.СуммаБонусныхБаллов) КАК СуммаБонусныхБаллов
	|ИЗ
	|	(ВЫБРАТЬ
	|		РеализацияТоваровУслуг.КартаЛояльности.Владелец.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
	|		НАЧАЛОПЕРИОДА(РеализацияТоваровУслуг.Дата, ДЕНЬ) КАК ДатаОплаты,
	|		ТаблицаБонусныеБаллы.СуммаБонусныхБалловКСписанию КАК СуммаБонусныхБаллов
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.Товары КАК ТаблицаБонусныеБаллы
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|			ПО ТаблицаБонусныеБаллы.Ссылка = РеализацияТоваровУслуг.Ссылка
	|	ГДЕ
	|		ТаблицаБонусныеБаллы.Ссылка = &ДокументОснование
	|		И РеализацияТоваровУслуг.Партнер = &Партнер
	|		И ТаблицаБонусныеБаллы.Ссылка.Проведен
	|		И НЕ РеализацияТоваровУслуг.КартаЛояльности.Владелец.БонуснаяПрограммаЛояльности ЕСТЬ NULL
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ТаблицаБонусныеБаллы.БонуснаяПрограммаЛояльности,
	|		ТаблицаБонусныеБаллы.ДатаОплаты,
	|		ТаблицаБонусныеБаллы.СуммаБонусныхБаллов
	|	ИЗ
	|		Документ.ВозвратТоваровОтКлиента.ОплатаБонуснымиБаллами КАК ТаблицаБонусныеБаллы
	|	ГДЕ
	|		ТаблицаБонусныеБаллы.Ссылка.ДокументРеализации = &ДокументОснование
	|		И ТаблицаБонусныеБаллы.Ссылка.Партнер = &Партнер
	|		И ТаблицаБонусныеБаллы.Ссылка.Проведен
	|		И ТаблицаБонусныеБаллы.Ссылка <> &СсылкаДокументаВозврат
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ТаблицаБонусныеБаллы.БонуснаяПрограммаЛояльности,
	|		ТаблицаБонусныеБаллы.ДатаОплаты,
	|		ТаблицаБонусныеБаллы.СуммаБонусныхБаллов
	|	ИЗ
	|		Документ.КорректировкаРеализации.ОплатаБонуснымиБаллами КАК ТаблицаБонусныеБаллы
	|	ГДЕ
	|		ТаблицаБонусныеБаллы.Ссылка.ДокументОснование = &ДокументОснование
	|		И (ТаблицаБонусныеБаллы.Ссылка.ВидКорректировки = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратНедопоставленногоТовара)
	|			ИЛИ ТаблицаБонусныеБаллы.Ссылка.ВидКорректировки = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаПоСогласованиюСторон)
	|			ИЛИ ТаблицаБонусныеБаллы.Ссылка.ВидКорректировки = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ИсправлениеОшибок))
	|		И ТаблицаБонусныеБаллы.Ссылка.Партнер = &Партнер
	|		И ТаблицаБонусныеБаллы.Ссылка.Проведен
	|		И ТаблицаБонусныеБаллы.Ссылка <> &СсылкаДокументаКорректировка) КАК Таблица
	|СГРУППИРОВАТЬ ПО
	|	Таблица.БонуснаяПрограммаЛояльности,
	|	Таблица.ДатаОплаты
	|ИМЕЮЩИЕ
	|	СУММА(Таблица.СуммаБонусныхБаллов) <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(Товары.Сумма), 0) КАК Сумма,
	|	ЕСТЬNULL(СУММА(Товары.СуммаВДокументе), 0) КАК СуммаВДокументе
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаТовары.Номенклатура КАК Номенклатура,
	|		ТаблицаТовары.Характеристика КАК Характеристика,
	|		ТаблицаТовары.Сумма КАК Сумма,
	|		0 КАК СуммаВДокументе
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.Товары КАК ТаблицаТовары
	|	ГДЕ
	|		ТаблицаТовары.Ссылка = &ДокументОснование
	|		И ТаблицаТовары.Ссылка.Проведен
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Товары.Номенклатура,
	|		Товары.Характеристика,
	|		0,
	|		Товары.Сумма
	|	ИЗ
	|		Товары КАК Товары
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Товары.Номенклатура,
	|		Товары.Характеристика,
	|		-Товары.Сумма,
	|		0
	|	ИЗ
	|		Документ.ВозвратТоваровОтКлиента.Товары КАК Товары
	|	ГДЕ
	|		Товары.Ссылка.ДокументРеализации = &ДокументОснование
	|		И Товары.Ссылка.Партнер = &Партнер
	|		И Товары.Ссылка.Проведен
	|		И Товары.Ссылка <> &СсылкаДокументаВозврат
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Товары.Номенклатура,
	|		Товары.Характеристика,
	|		Товары.Сумма,
	|		0
	|	ИЗ
	|		Документ.КорректировкаРеализации.Расхождения КАК Товары
	|	ГДЕ
	|		Товары.Ссылка.ДокументОснование = &ДокументОснование
	|		И (Товары.Ссылка.ВидКорректировки = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратНедопоставленногоТовара)
	|			ИЛИ Товары.Ссылка.ВидКорректировки = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаПоСогласованиюСторон)
	|			ИЛИ Товары.Ссылка.ВидКорректировки = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ИсправлениеОшибок))
	|		И Товары.Ссылка.Партнер = &Партнер
	|		И Товары.Ссылка.Проведен
	|		И Товары.Ссылка <> &СсылкаДокументаКорректировка
	|		И Товары.Сумма < 0 ) КАК Товары";
	
	Возврат ТекстЗапроса
	
КонецФункции

Процедура ЗаполнитьБонусныеБаллыЧекККМВозврат(ТекущийОбъект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтносительныеКурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	ОтносительныеКурсыВалютСрезПоследних.КурсЧислитель КАК КурсЧислитель,
	|	ОтносительныеКурсыВалютСрезПоследних.КурсЗнаменатель КАК КурсЗнаменатель
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата, БазоваяВалюта = &БазоваяВалюта) КАК ОтносительныеКурсыВалютСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Количество
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.БонуснаяПрограммаЛояльности,
	|	Таблица.ДатаНачисления КАК ДатаНачисления,
	|	Таблица.ДатаСписания,
	|	СУММА(Таблица.СуммаБонусныхБаллов) КАК СуммаБонусныхБаллов
	|ПОМЕСТИТЬ БонусныеБаллы
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЧекККМБонусныеБаллы.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
	|		ЧекККМБонусныеБаллы.ДатаНачисления КАК ДатаНачисления,
	|		ЧекККМБонусныеБаллы.ДатаСписания КАК ДатаСписания,
	|		ЧекККМБонусныеБаллы.СуммаБонусныхБаллов КАК СуммаБонусныхБаллов
	|	ИЗ
	|		Документ.ЧекККМ.БонусныеБаллы КАК ЧекККМБонусныеБаллы
	|	ГДЕ
	|		ЧекККМБонусныеБаллы.Ссылка = &ЧекККМ
	|		И ЧекККМБонусныеБаллы.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЧекККМВозвратБонусныеБаллы.БонуснаяПрограммаЛояльности,
	|		ЧекККМВозвратБонусныеБаллы.ДатаНачисления,
	|		ЧекККМВозвратБонусныеБаллы.ДатаСписания,
	|		-ЧекККМВозвратБонусныеБаллы.СуммаБонусныхБаллов
	|	ИЗ
	|		Документ.ЧекККМВозврат.БонусныеБаллы КАК ЧекККМВозвратБонусныеБаллы
	|	ГДЕ
	|		ЧекККМВозвратБонусныеБаллы.Ссылка.ЧекККМ = &ЧекККМ
	|		И ЧекККМВозвратБонусныеБаллы.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
	|		И ЧекККМВозвратБонусныеБаллы.Ссылка.Ссылка <> &Ссылка) КАК Таблица
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.БонуснаяПрограммаЛояльности,
	|	Таблица.ДатаНачисления,
	|	Таблица.ДатаСписания
	|
	|ИМЕЮЩИЕ
	|	СУММА(Таблица.СуммаБонусныхБаллов) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БонусныеБаллы.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
	|	БонусныеБаллы.ДатаНачисления КАК ДатаНачисления,
	|	БонусныеБаллы.ДатаСписания КАК ДатаСписания,
	|	БонусныеБаллы.СуммаБонусныхБаллов КАК СуммаБонусныхБаллов,
	|	БонусныеБаллы.СуммаБонусныхБаллов * ЕСТЬNULL(КурсыВалютКонвертацииБонусов.КурсЧислитель, 1) * ЕСТЬNULL(КурсыВалютДокумента.КурсЗнаменатель, 1) / (ЕСТЬNULL(КурсыВалютДокумента.КурсЧислитель, 1) * ЕСТЬNULL(КурсыВалютКонвертацииБонусов.КурсЗнаменатель, 1)) * БонусныеБаллы.БонуснаяПрограммаЛояльности.КурсКонвертацииБонусовВВалюту КАК СуммаВВалютеДокумента
	|ИЗ
	|	БонусныеБаллы КАК БонусныеБаллы
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютКонвертацииБонусов
	|		ПО (КурсыВалютКонвертацииБонусов.Валюта = БонусныеБаллы.БонуснаяПрограммаЛояльности.ВалютаКонвертацииБонусов)
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютДокумента
	|		ПО (КурсыВалютДокумента.Валюта = &ВалютаДокумента)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаНачисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	СУММА(Товары.СуммаБонусныхБалловКСписанию) КАК СуммаБонусныхБалловКСписанию,
	|	СУММА(Товары.СуммаНачисленныхБонусныхБалловВВалюте) КАК СуммаНачисленныхБонусныхБалловВВалюте,
	|	СУММА(Товары.Количество) КАК Количество,
	|	СУММА(Товары.КоличествоВДокументе) КАК КоличествоВДокументе
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЧекККМТовары.Номенклатура КАК Номенклатура,
	|		ЧекККМТовары.Характеристика КАК Характеристика,
	|		ЧекККМТовары.СуммаБонусныхБалловКСписанию КАК СуммаБонусныхБалловКСписанию,
	|		ЧекККМТовары.СуммаНачисленныхБонусныхБалловВВалюте КАК СуммаНачисленныхБонусныхБалловВВалюте,
	|		ЧекККМТовары.Количество КАК Количество,
	|		0 КАК КоличествоВДокументе
	|	ИЗ
	|		Документ.ЧекККМ.Товары КАК ЧекККМТовары
	|	ГДЕ
	|		ЧекККМТовары.Ссылка = &ЧекККМ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Товары.Номенклатура,
	|		Товары.Характеристика,
	|		0,
	|		0,
	|		0,
	|		Товары.Количество
	|	ИЗ
	|		Товары КАК Товары) КАК Товары
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМ.КартаЛояльности КАК КартаЛояльности,
	|	ЧекККМ.КартаЛояльности.Владелец.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
	|	ЧекККМ.Дата КАК Дата
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.Ссылка = &ЧекККМ;
	|";

	Запрос.УстановитьПараметр("Ссылка", ТекущийОбъект.Ссылка);
	Запрос.УстановитьПараметр("ЧекККМ", ТекущийОбъект.ЧекККМ);
	Запрос.УстановитьПараметр("Дата",   ТекущийОбъект.Дата);
	Запрос.УстановитьПараметр("ВалютаДокумента", ТекущийОбъект.Валюта);
	Запрос.УстановитьПараметр("БазоваяВалюта", ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(ТекущийОбъект.Организация));
	Запрос.УстановитьПараметр("Товары", ТекущийОбъект.Товары.Выгрузить());

	Результаты = Запрос.ВыполнитьПакет();
	
	ОстаткиБонусныхБаллов = Результаты[3].Выгрузить();
	
	СуммаНачисленныхБалловКВозврату = 0;
	СуммаСписанныхБонусныхБалловКВозврату = 0;
	
	ВыборкаТовары = Результаты[4].Выбрать();
	Пока ВыборкаТовары.Следующий() Цикл
		
		Если ВыборкаТовары.Количество <> 0 Тогда
		
			СуммаНачисленныхБалловКВозврату = СуммаНачисленныхБалловКВозврату
			                                + ВыборкаТовары.СуммаНачисленныхБонусныхБалловВВалюте
			                                * ВыборкаТовары.КоличествоВДокументе / ВыборкаТовары.Количество;
			
			СуммаСписанныхБонусныхБалловКВозврату = СуммаСписанныхБонусныхБалловКВозврату
			                                      + ВыборкаТовары.СуммаБонусныхБалловКСписанию
			                                      * ВыборкаТовары.КоличествоВДокументе / ВыборкаТовары.Количество;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекущийОбъект.БонусныеБаллы.Очистить();
	
	Для Каждого СтрокаТЧ Из ОстаткиБонусныхБаллов Цикл
		
		Если СуммаНачисленныхБалловКВозврату = 0 Тогда
			Прервать;
		КонецЕсли;
		
		Если СуммаНачисленныхБалловКВозврату >= СтрокаТЧ.СуммаВВалютеДокумента Тогда
			
			СуммаНачисленныхБалловКВозврату = СуммаНачисленныхБалловКВозврату - СтрокаТЧ.СуммаВВалютеДокумента;
			
			КСписанию = СтрокаТЧ.СуммаВВалютеДокумента;
			
			НоваяСтрока = ТекущийОбъект.БонусныеБаллы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ, "БонуснаяПрограммаЛояльности, ДатаНачисления, ДатаСписания");
			НоваяСтрока.СуммаБонусныхБаллов = СтрокаТЧ.СуммаБонусныхБаллов *  КСписанию / СтрокаТЧ.СуммаВВалютеДокумента;
			
			СтрокаТЧ.СуммаВВалютеДокумента = СтрокаТЧ.СуммаВВалютеДокумента - КСписанию;
			СтрокаТЧ.СуммаБонусныхБаллов = СтрокаТЧ.СуммаБонусныхБаллов - НоваяСтрока.СуммаБонусныхБаллов;
			
		Иначе
			
			КСписанию = СуммаНачисленныхБалловКВозврату;
			
			СуммаНачисленныхБалловКВозврату = 0;
			
			НоваяСтрока = ТекущийОбъект.БонусныеБаллы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ, "БонуснаяПрограммаЛояльности, ДатаНачисления, ДатаСписания");
			НоваяСтрока.СуммаБонусныхБаллов = СтрокаТЧ.СуммаБонусныхБаллов *  КСписанию / СтрокаТЧ.СуммаВВалютеДокумента;
			
			СтрокаТЧ.СуммаВВалютеДокумента = СтрокаТЧ.СуммаВВалютеДокумента - КСписанию;
			СтрокаТЧ.СуммаБонусныхБаллов = СтрокаТЧ.СуммаБонусныхБаллов - НоваяСтрока.СуммаБонусныхБаллов;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Выборка = Результаты[5].Выбрать();
	Если Выборка.Следующий() Тогда
		ТекущийОбъект.КартаЛояльности              = Выборка.КартаЛояльности;
		ТекущийОбъект.СуммаБонусныхБалловКВозврату = СуммаСписанныхБонусныхБалловКВозврату;
	КонецЕсли;
	
КонецПроцедуры

Функция ТаблицаБонусныеБаллы(СкидкиНаценки, Дата) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.КлючСвязи     КАК КлючСвязи,
	|	Таблица.СкидкаНаценка КАК СкидкаНаценка,
	|	Таблица.Сумма         КАК Сумма
	|ПОМЕСТИТЬ СкидкиНаценки
	|ИЗ
	|	&СкидкиНаценки КАК Таблица
	|ГДЕ
	|	Таблица.СпособПримененияСкидки = ЗНАЧЕНИЕ(Перечисление.СпособыПримененияСкидокНаценок.НачислитьБонусныеБаллы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
	|	ТабличнаяЧасть.БонуснаяПрограммаЛояльности.ВалютаКонвертацииБонусов КАК ВалютаКонвертацииБонусов,
	|	ТабличнаяЧасть.БонуснаяПрограммаЛояльности.КурсКонвертацииБонусовВВалюту КАК КурсКонвертацииБонусовВВалюту,
	|	ТабличнаяЧасть.КлючСвязи КАК КлючСвязи,
	|
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.СкидкаНаценка.КоличествоПериодовДействия > 0 ТОГДА
	|			ВЫБОР
	|				КОГДА ТабличнаяЧасть.СкидкаНаценка.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
	|					ТОГДА ДОБАВИТЬКДАТЕ(ТабличнаяЧасть.Период, ДЕНЬ, ТабличнаяЧасть.СкидкаНаценка.КоличествоПериодовОтсрочкиНачалаДействия)
	|				КОГДА ТабличнаяЧасть.СкидкаНаценка.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|					ТОГДА ДОБАВИТЬКДАТЕ(ТабличнаяЧасть.Период, НЕДЕЛЯ, ТабличнаяЧасть.СкидкаНаценка.КоличествоПериодовОтсрочкиНачалаДействия)
	|				КОГДА ТабличнаяЧасть.СкидкаНаценка.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	|					ТОГДА ДОБАВИТЬКДАТЕ(ТабличнаяЧасть.Период, МЕСЯЦ, ТабличнаяЧасть.СкидкаНаценка.КоличествоПериодовОтсрочкиНачалаДействия)
	|				КОГДА ТабличнаяЧасть.СкидкаНаценка.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
	|					ТОГДА ДОБАВИТЬКДАТЕ(ТабличнаяЧасть.Период, КВАРТАЛ, ТабличнаяЧасть.СкидкаНаценка.КоличествоПериодовОтсрочкиНачалаДействия)
	|				КОГДА ТабличнаяЧасть.СкидкаНаценка.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
	|					ТОГДА ДОБАВИТЬКДАТЕ(ТабличнаяЧасть.Период, ГОД, ТабличнаяЧасть.СкидкаНаценка.КоличествоПериодовОтсрочкиНачалаДействия)
	|				КОГДА ТабличнаяЧасть.СкидкаНаценка.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
	|					ТОГДА ДОБАВИТЬКДАТЕ(ТабличнаяЧасть.Период, ДЕКАДА, ТабличнаяЧасть.СкидкаНаценка.КоличествоПериодовОтсрочкиНачалаДействия)
	|				КОГДА ТабличнаяЧасть.СкидкаНаценка.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
	|					ТОГДА ДОБАВИТЬКДАТЕ(ТабличнаяЧасть.Период, ПОЛУГОДИЕ, ТабличнаяЧасть.СкидкаНаценка.КоличествоПериодовОтсрочкиНачалаДействия)
	|				ИНАЧЕ ТабличнаяЧасть.Период
	|			КОНЕЦ
	|	ИНАЧЕ
	|		ДатаВремя(1,1,1)
	|	КОНЕЦ КАК ДатаСписания,
	|
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.СкидкаНаценка.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&Период, ДЕНЬ, ТабличнаяЧасть.СкидкаНаценка.КоличествоПериодовОтсрочкиНачалаДействия)
	|		КОГДА ТабличнаяЧасть.СкидкаНаценка.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&Период, НЕДЕЛЯ, ТабличнаяЧасть.СкидкаНаценка.КоличествоПериодовОтсрочкиНачалаДействия)
	|		КОГДА ТабличнаяЧасть.СкидкаНаценка.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&Период, МЕСЯЦ, ТабличнаяЧасть.СкидкаНаценка.КоличествоПериодовОтсрочкиНачалаДействия)
	|		КОГДА ТабличнаяЧасть.СкидкаНаценка.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&Период, КВАРТАЛ, ТабличнаяЧасть.СкидкаНаценка.КоличествоПериодовОтсрочкиНачалаДействия)
	|		КОГДА ТабличнаяЧасть.СкидкаНаценка.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&Период, ГОД, ТабличнаяЧасть.СкидкаНаценка.КоличествоПериодовОтсрочкиНачалаДействия)
	|		КОГДА ТабличнаяЧасть.СкидкаНаценка.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&Период, ДЕКАДА, ТабличнаяЧасть.СкидкаНаценка.КоличествоПериодовОтсрочкиНачалаДействия)
	|		КОГДА ТабличнаяЧасть.СкидкаНаценка.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&Период, ПОЛУГОДИЕ, ТабличнаяЧасть.СкидкаНаценка.КоличествоПериодовОтсрочкиНачалаДействия)
	|		ИНАЧЕ &Период
	|	КОНЕЦ КАК ДатаНачисления,
	|
	|	ТабличнаяЧасть.Сумма КАК СуммаБонусныхБаллов
	|
	|ИЗ
	|	(
	|	ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.СкидкаНаценка.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
	|				ТОГДА ДОБАВИТЬКДАТЕ(&Период, ДЕНЬ, ТабличнаяЧасть.СкидкаНаценка.КоличествоПериодовДействия)
	|				КОГДА ТабличнаяЧасть.СкидкаНаценка.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|				ТОГДА ДОБАВИТЬКДАТЕ(&Период, НЕДЕЛЯ, ТабличнаяЧасть.СкидкаНаценка.КоличествоПериодовДействия)
	|			КОГДА ТабличнаяЧасть.СкидкаНаценка.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	|				ТОГДА ДОБАВИТЬКДАТЕ(&Период, МЕСЯЦ, ТабличнаяЧасть.СкидкаНаценка.КоличествоПериодовДействия)
	|			КОГДА ТабличнаяЧасть.СкидкаНаценка.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
	|				ТОГДА ДОБАВИТЬКДАТЕ(&Период, КВАРТАЛ, ТабличнаяЧасть.СкидкаНаценка.КоличествоПериодовДействия)
	|			КОГДА ТабличнаяЧасть.СкидкаНаценка.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
	|				ТОГДА ДОБАВИТЬКДАТЕ(&Период, ГОД, ТабличнаяЧасть.СкидкаНаценка.КоличествоПериодовДействия)
	|			КОГДА ТабличнаяЧасть.СкидкаНаценка.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
	|				ТОГДА ДОБАВИТЬКДАТЕ(&Период, ДЕКАДА, ТабличнаяЧасть.СкидкаНаценка.КоличествоПериодовДействия)
	|			КОГДА ТабличнаяЧасть.СкидкаНаценка.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
	|				ТОГДА ДОБАВИТЬКДАТЕ(&Период, ПОЛУГОДИЕ, ТабличнаяЧасть.СкидкаНаценка.КоличествоПериодовДействия)
	|			ИНАЧЕ &Период
	|		КОНЕЦ                                                    КАК Период,
	|		ТабличнаяЧасть.СкидкаНаценка.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
	|		ТабличнаяЧасть.Сумма                                     КАК Сумма,
	|		ТабличнаяЧасть.СкидкаНаценка                             КАК СкидкаНаценка,
	|		ТабличнаяЧасть.КлючСвязи                                 КАК КлючСвязи
	|	ИЗ
	|		СкидкиНаценки КАК ТабличнаяЧасть
	|	) КАК ТабличнаяЧасть
	|";
	
	Запрос.УстановитьПараметр("СкидкиНаценки", СкидкиНаценки);
	Запрос.УстановитьПараметр("Период",        Дата);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Функция ТаблицаНачислениеИСписание(ПравилоНачисления, Дата) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ПравилоНачисления.СхемаКомпоновкиДанных КАК СхемаКомпоновкиДанных,
	|	ПравилоНачисления.ХранилищеСхемыКомпоновкиДанных КАК ХранилищеСхемыКомпоновкиДанных,
	|	ПравилоНачисления.ХранилищеНастроекКомпоновкиДанных КАК ХранилищеНастроекКомпоновкиДанных,
	|	ПравилоНачисления.Владелец КАК БонуснаяПрограммаЛояльности
	|ИЗ
	|	Справочник.ПравилаНачисленияИСписанияБонусныхБаллов КАК ПравилоНачисления
	|ГДЕ
	|	ПравилоНачисления.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", ПравилоНачисления);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Если ЗначениеЗаполнено(Выборка.СхемаКомпоновкиДанных) Тогда
		СхемаКомпоновкиДанных = Справочники.ПравилаНачисленияИСписанияБонусныхБаллов.ПолучитьМакет(Выборка.СхемаКомпоновкиДанных);
	Иначе
		ВыборкаХранилищеСхемыКомпоновкиДанных = Выборка.ХранилищеСхемыКомпоновкиДанных; // ХранилищеЗначения
		СхемаКомпоновкиДанных = ВыборкаХранилищеСхемыКомпоновкиДанных.Получить();
	КонецЕсли;
	
	ВыборкаХранилищеНастроекКомпоновкиДанных = Выборка.ХранилищеНастроекКомпоновкиДанных; // ХранилищеЗначения
	НастройкиКомпоновкиДанных = ВыборкаХранилищеНастроекКомпоновкиДанных.Получить();


	// Подготовка компоновщика макета компоновки данных, загрузка настроек
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));

	Если НастройкиКомпоновкиДанных <> Неопределено Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновкиДанных);
		КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КонецЕсли;

	СегментыСервер.ВключитьОтборПоСегментуНоменклатурыВСКД(КомпоновщикНастроек);
	СегментыСервер.ВключитьОтборПоСегментуПартнеровВСКД(КомпоновщикНастроек);

	Параметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ТекущаяДата");
	Если Параметр <> Неопределено Тогда
		Параметр.Использование = Истина;
		Параметр.Значение = Дата;
	КонецЕсли;

	Параметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("АвтоматическоеНачисление");
	Если Параметр <> Неопределено Тогда
		Параметр.Использование = Истина;
		Параметр.Значение = ПравилоНачисления;
	КонецЕсли;

	Параметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("БонуснаяПрограммаЛояльности");
	Если Параметр <> Неопределено Тогда
		Параметр.Использование = Истина;
		Параметр.Значение = Выборка.БонуснаяПрограммаЛояльности;
	КонецЕсли;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(
		СхемаКомпоновкиДанных,
		КомпоновщикНастроек.ПолучитьНастройки(), , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"), Ложь);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,,Истина);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;

	ДанныеОтчета = Новый ТаблицаЗначений();
	ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
	ДанныеОтчета = ПроцессорВывода.Вывести(ПроцессорКомпоновки);

	Возврат ДанныеОтчета;
	
КонецФункции

// Списывает остатки просроченных срочных бонусных баллов по регистру РН БонусныеБаллы
// 
// Параметры:
//  СтрокаТаблицаОстатковКСписанию - СтрокаТаблицыЗначений - Данные остатков просроченных бонусных баллов к списанию
//  ТаблицаОстатковПоДокументам - ТаблицаЗначений - Таблица документов начисления просроченных бонусных баллов с остатками
// 
// Возвращаемое значение:
//  Массив Из СтрокаТаблицыЗначений - Массив строк с нулевыми остатками бонусных баллов к удалению
// 
Функция СписатьОстаткиПросроченныхСрочныхБонусныхБаллов(
			СтрокаТаблицаОстатковКСписанию,
			ТаблицаОстатковПоДокументам)
			
	ОстатокПросроченныхСрочныхБонусныхБаллов = СтрокаТаблицаОстатковКСписанию.ОстатокСрочныхБонусныхБаллов;
	
	ДатаНачалаДействияСрочныхБонусныхБаллов = СтрокаТаблицаОстатковКСписанию.ДатаНачалаДействияСрочныхБонусныхБаллов;
	ДатаОкончанияСрокаДействияСрочныхБонусныхБаллов = СтрокаТаблицаОстатковКСписанию.ДатаОкончанияСрокаДействияСрочныхБонусныхБаллов;
	
	Партнер  = СтрокаТаблицаОстатковКСписанию.Партнер;
	БонуснаяПрограммаЛояльности  = СтрокаТаблицаОстатковКСписанию.БонуснаяПрограммаЛояльности;
	
	НулевыеСтрокиОстатковКУдалению = Новый Массив;
	
	// Списать остаток просроченных срочных бонусных баллов
	Для Каждого СтрокаТаблицаОстатковПоДокументам Из ТаблицаОстатковПоДокументам Цикл
		
		Если ОстатокПросроченныхСрочныхБонусныхБаллов = 0
			ИЛИ (СтрокаТаблицаОстатковПоДокументам.ДатаНачалаДействия <> ДатаНачалаДействияСрочныхБонусныхБаллов
					И СтрокаТаблицаОстатковПоДокументам.Период <> ДатаОкончанияСрокаДействияСрочныхБонусныхБаллов
					И СтрокаТаблицаОстатковПоДокументам.ДатаНачалаДействия > ДатаОкончанияСрокаДействияСрочныхБонусныхБаллов) Тогда
			Прервать;
		КонецЕсли;
		
		Если СтрокаТаблицаОстатковПоДокументам.ДатаНачалаДействия <> ДатаНачалаДействияСрочныхБонусныхБаллов
			ИЛИ СтрокаТаблицаОстатковПоДокументам.Период <> ДатаОкончанияСрокаДействияСрочныхБонусныхБаллов Тогда
			Продолжить;
		КонецЕсли;
		
		Регистратор = СтрокаТаблицаОстатковПоДокументам.Регистратор;
		СуммаКСписанию = СтрокаТаблицаОстатковПоДокументам.КСписанию;
		
		СуммаКСписаниюПросроченныхСрочныхБонусныхБаллов = Мин(ОстатокПросроченныхСрочныхБонусныхБаллов, СуммаКСписанию);
		ОстатокПросроченныхСрочныхБонусныхБаллов = 
			ОстатокПросроченныхСрочныхБонусныхБаллов - СуммаКСписаниюПросроченныхСрочныхБонусныхБаллов;
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.БонусныеБаллы.НаборЗаписей");
		ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
		
		Блокировка.Заблокировать();
		
		НаборЗаписейРНБонусныеБаллы = РегистрыНакопления.БонусныеБаллы.СоздатьНаборЗаписей();
		НаборЗаписейРНБонусныеБаллы.Отбор.Регистратор.Значение = Регистратор;
		НаборЗаписейРНБонусныеБаллы.Отбор.Регистратор.Использование = Истина;
		НаборЗаписейРНБонусныеБаллы.Прочитать();
		
		СтрокаНаборЗаписейРНБонусныеБаллы = НаборЗаписейРНБонусныеБаллы.Добавить();
		ЗаполнитьЗначенияСвойств(
			СтрокаНаборЗаписейРНБонусныеБаллы,
			СтрокаТаблицаОстатковПоДокументам);
		
		СтрокаНаборЗаписейРНБонусныеБаллы.ВидДвижения = ВидДвиженияНакопления.Приход;
		СтрокаНаборЗаписейРНБонусныеБаллы.Начислено = -СуммаКСписаниюПросроченныхСрочныхБонусныхБаллов;
		СтрокаНаборЗаписейРНБонусныеБаллы.КСписанию = -СуммаКСписаниюПросроченныхСрочныхБонусныхБаллов;
		СтрокаНаборЗаписейРНБонусныеБаллы.ДатаКОбработке = ТекущаяДатаСеанса();
		
		НаборЗаписейРНБонусныеБаллы.Записать();
		
		СтрокаТаблицаОстатковПоДокументам.КСписанию = СтрокаТаблицаОстатковПоДокументам.КСписанию - СуммаКСписаниюПросроченныхСрочныхБонусныхБаллов;
		Если СтрокаТаблицаОстатковПоДокументам.КСписанию = 0 Тогда
			НулевыеСтрокиОстатковКУдалению.Добавить(СтрокаТаблицаОстатковПоДокументам);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НулевыеСтрокиОстатковКУдалению;
	
КонецФункции

// Снимает документы с дальнейшей обработки распределения срочных бонусных баллов
// 
// Параметры:
//  СтрокаТаблицаОстатковКСписанию - СтрокаТаблицыЗначений - Данные остатков просроченных бонусных баллов к списанию
//  ТаблицаДокументовКСнятиюСОбработки - ТаблицаЗначений - Таблица документов для отмены статуса КОбработке
// 
// Возвращаемое значение:
//  Массив Из СтрокаТаблицыЗначений - Массив строк с нулевыми остатками бонусных баллов к удалению
// 
Функция СнятьДокументыСоСтатусаКОбработке(
			СтрокаТаблицаОстатковКСписанию,
			ТаблицаДокументовКСнятиюСОбработки)
			
	ДатаНачалаДействияСрочныхБонусныхБаллов = СтрокаТаблицаОстатковКСписанию.ДатаНачалаДействияСрочныхБонусныхБаллов;
	ДатаОкончанияСрокаДействияСрочныхБонусныхБаллов = СтрокаТаблицаОстатковКСписанию.ДатаОкончанияСрокаДействияСрочныхБонусныхБаллов;
	
	Партнер  = СтрокаТаблицаОстатковКСписанию.Партнер;
	БонуснаяПрограммаЛояльности  = СтрокаТаблицаОстатковКСписанию.БонуснаяПрограммаЛояльности;
	
	НулевыеСтрокиОстатковКУдалению = Новый Массив;
	
	Для Каждого СтрокаТаблицаДокументовКСнятиюСОбработки Из ТаблицаДокументовКСнятиюСОбработки Цикл
		
		Регистратор = СтрокаТаблицаДокументовКСнятиюСОбработки.Регистратор;
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.БонусныеБаллы.НаборЗаписей");
		ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
		
		Блокировка.Заблокировать();
		
		НаборЗаписейРНБонусныеБаллы = РегистрыНакопления.БонусныеБаллы.СоздатьНаборЗаписей();
		НаборЗаписейРНБонусныеБаллы.Отбор.Регистратор.Значение = Регистратор;
		НаборЗаписейРНБонусныеБаллы.Отбор.Регистратор.Использование = Истина;
		НаборЗаписейРНБонусныеБаллы.Прочитать();
		
		Для Каждого СтрокаНаборЗаписейРНБонусныеБаллы Из НаборЗаписейРНБонусныеБаллы Цикл
			Если СтрокаНаборЗаписейРНБонусныеБаллы.ДатаКОбработке = Дата(1, 1, 1) Тогда
				Продолжить;
			КонецЕсли;
			
			// Снять возврат расхода срочных бонусных баллов с дальнейшей обработки
			// Движение по ресурсу Начислено
			Если СтрокаНаборЗаписейРНБонусныеБаллы.БонуснаяПрограммаЛояльности = БонуснаяПрограммаЛояльности
				И СтрокаНаборЗаписейРНБонусныеБаллы.Партнер = Партнер
				И СтрокаНаборЗаписейРНБонусныеБаллы.ВидДвижения = ВидДвиженияНакопления.Расход
				И СтрокаНаборЗаписейРНБонусныеБаллы.Начислено < 0
				И СтрокаНаборЗаписейРНБонусныеБаллы.КСписанию = 0 Тогда
			
				СтрокаНаборЗаписейРНБонусныеБаллы.ДатаКОбработке = Дата(1, 1, 1);
				
				Если НулевыеСтрокиОстатковКУдалению.Найти(СтрокаТаблицаДокументовКСнятиюСОбработки) = Неопределено Тогда
					НулевыеСтрокиОстатковКУдалению.Добавить(СтрокаТаблицаДокументовКСнятиюСОбработки);
				КонецЕсли;
			КонецЕсли;
			
			// Снять расхода срочных бонусных баллов с дальнейшей обработки
			// Движение по ресурсу Начислено
			Если СтрокаНаборЗаписейРНБонусныеБаллы.БонуснаяПрограммаЛояльности = БонуснаяПрограммаЛояльности
				И СтрокаНаборЗаписейРНБонусныеБаллы.Партнер = Партнер
				И СтрокаНаборЗаписейРНБонусныеБаллы.ВидДвижения = ВидДвиженияНакопления.Расход
				И СтрокаНаборЗаписейРНБонусныеБаллы.Начислено > 0
				И СтрокаНаборЗаписейРНБонусныеБаллы.КСписанию = 0 Тогда
			
				СтрокаНаборЗаписейРНБонусныеБаллы.ДатаКОбработке = Дата(1, 1, 1);
				
				Если НулевыеСтрокиОстатковКУдалению.Найти(СтрокаТаблицаДокументовКСнятиюСОбработки) = Неопределено Тогда
					НулевыеСтрокиОстатковКУдалению.Добавить(СтрокаТаблицаДокументовКСнятиюСОбработки);
				КонецЕсли;
			КонецЕсли;
			
			// Снятие списания срочных бонусных баллов с дальнейшей обработки
			// Движение по ресурсу КСписанию
			Если СтрокаНаборЗаписейРНБонусныеБаллы.БонуснаяПрограммаЛояльности = БонуснаяПрограммаЛояльности
				И СтрокаНаборЗаписейРНБонусныеБаллы.Партнер = Партнер
				И СтрокаНаборЗаписейРНБонусныеБаллы.ДатаНачалаДействия = ДатаНачалаДействияСрочныхБонусныхБаллов
				И СтрокаНаборЗаписейРНБонусныеБаллы.Период = ДатаОкончанияСрокаДействияСрочныхБонусныхБаллов Тогда
			
				СтрокаНаборЗаписейРНБонусныеБаллы.ДатаКОбработке = Дата(1, 1, 1);
				
				Если НулевыеСтрокиОстатковКУдалению.Найти(СтрокаТаблицаДокументовКСнятиюСОбработки) = Неопределено Тогда
					НулевыеСтрокиОстатковКУдалению.Добавить(СтрокаТаблицаДокументовКСнятиюСОбработки);
				КонецЕсли;
			КонецЕсли;
			
			// Снятие начисления срочных бонусных баллов с дальнейшей обработки
			// Движение по ресурсу Начислено
			// Нужно списывать только сумму начисления (может быть несколько срок с одним периодом начала, но разными периодами окончания	
			Если СтрокаНаборЗаписейРНБонусныеБаллы.БонуснаяПрограммаЛояльности = БонуснаяПрограммаЛояльности
				И СтрокаНаборЗаписейРНБонусныеБаллы.Партнер = Партнер
				И СтрокаНаборЗаписейРНБонусныеБаллы.ДатаНачалаДействия = ДатаНачалаДействияСрочныхБонусныхБаллов
				И СтрокаНаборЗаписейРНБонусныеБаллы.Период = ДатаНачалаДействияСрочныхБонусныхБаллов Тогда
				
				Если СтрокаНаборЗаписейРНБонусныеБаллы.Начислено < СтрокаТаблицаДокументовКСнятиюСОбработки.КСписанию Тогда
					Продолжить;
				КонецЕсли;
				
				Если СтрокаНаборЗаписейРНБонусныеБаллы.Начислено = СтрокаТаблицаДокументовКСнятиюСОбработки.КСписанию Тогда
					СтрокаНаборЗаписейРНБонусныеБаллы.ДатаКОбработке = Дата(1, 1, 1);
					
					Если НулевыеСтрокиОстатковКУдалению.Найти(СтрокаТаблицаДокументовКСнятиюСОбработки) = Неопределено Тогда
						НулевыеСтрокиОстатковКУдалению.Добавить(СтрокаТаблицаДокументовКСнятиюСОбработки);
					КонецЕсли;
				КонецЕсли;
				
				// Разделяем движение на два движения и в новое движение снимаем с дальнейшей обработки
				Если СтрокаНаборЗаписейРНБонусныеБаллы.Начислено > СтрокаТаблицаДокументовКСнятиюСОбработки.КСписанию Тогда
					СтрокаНаборЗаписейРНБонусныеБаллыНовая = НаборЗаписейРНБонусныеБаллы.Добавить();
					ЗаполнитьЗначенияСвойств(
						СтрокаНаборЗаписейРНБонусныеБаллыНовая,
						СтрокаНаборЗаписейРНБонусныеБаллы);
					
					СтрокаНаборЗаписейРНБонусныеБаллы.Начислено = СтрокаНаборЗаписейРНБонусныеБаллы.Начислено - СтрокаТаблицаДокументовКСнятиюСОбработки.КСписанию;
						
					СтрокаНаборЗаписейРНБонусныеБаллыНовая.ВидДвижения = ВидДвиженияНакопления.Приход;
					СтрокаНаборЗаписейРНБонусныеБаллыНовая.Начислено = СтрокаТаблицаДокументовКСнятиюСОбработки.КСписанию;
					СтрокаНаборЗаписейРНБонусныеБаллыНовая.ДатаКОбработке = Дата(1, 1, 1);
					
					Если НулевыеСтрокиОстатковКУдалению.Найти(СтрокаТаблицаДокументовКСнятиюСОбработки) = Неопределено Тогда
						НулевыеСтрокиОстатковКУдалению.Добавить(СтрокаТаблицаДокументовКСнятиюСОбработки);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		НаборЗаписейРНБонусныеБаллы.Записать();
		
	КонецЦикла;
	
	Возврат НулевыеСтрокиОстатковКУдалению;
	
КонецФункции

#КонецОбласти
