
#Область ПрограммныйИнтерфейс

#Область ОбработкаШтрихкодовМаркировки

// Формирует данные штрихкодов упаковок.
//
// Параметры:
//  СтрокиТаблицы - Массив Из СтрокаТаблицыЗначений - Массив из строк таблицы значний типа
//  См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияТаблицыДанныхКодовМаркировки
//  ТипыУпаковок - Массив из ПеречислениеСсылка.ТипыУпаковок - Коллекция типов упаковок, по которым будет
//       установлено условие для формирования запроса.
//  ПроверкаНаGS1 - Булево - Добавляет в поиск значение штрихкода без скобок, только для упаковок GS1.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Данные штрихкодов упаковок:
//   * Штрихкод - Строка - Значение штрихкода.
//   * ШтрихкодУпаковки - СправочникСсылка.ШтрихкодыУпаковокТоваров.
//   * ДатаУпаковки - Дата - Дата формирования упаковки.
//   * ТипУпаковки - ПеречислениеСсылка.ТипыУпаковок - Тип упаковки.
//   * Номенклатура - ОпределяемыйТип.Номенклатура - Номенклатура.
//   * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - Характеристика.
//   * Серия - ОпределяемыйТип.СерияНоменклатуры - Серия.
//   * Количество - Число - Количество единиц товара соответствующее штрихкоду
//   * МаркируемаяПродукция - Булево - Истина, если продкция подлежит маркированию.
//   * ТребуетВзвешивания - Булево - Истина, если потребительские упаковки номенклатуры требуют взвешивания
//   * ПроизвольнаяЕдиницаУчета - Булево - Истина, если учетная единица номенклатуры отличается от индивидуального КМ
//   * ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции номенклатуры.
Функция ДанныеШтрихкодовУпаковок(СтрокиТаблицы, ТипыУпаковок = Неопределено, ПроверкаНаGS1 = Ложь) Экспорт
	
	ДанныеШтрихкодовУпаковок = Новый ТаблицаЗначений;
	// Исходные данные
	ДанныеШтрихкодовУпаковок.Колонки.Добавить("Штрихкод", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(200)));
	// Данные из справочника ШтрихкодыУпаковокТоваров
	ДанныеШтрихкодовУпаковок.Колонки.Добавить("ШтрихкодУпаковки",     Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ДанныеШтрихкодовУпаковок.Колонки.Добавить("ТипУпаковки",          Новый ОписаниеТипов("ПеречислениеСсылка.ТипыУпаковок"));
	ДанныеШтрихкодовУпаковок.Колонки.Добавить("Номенклатура",         Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ДанныеШтрихкодовУпаковок.Колонки.Добавить("Характеристика",       Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ДанныеШтрихкодовУпаковок.Колонки.Добавить("Серия",                Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ДанныеШтрихкодовУпаковок.Колонки.Добавить("Количество",                        Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ДанныеШтрихкодовУпаковок.Колонки.Добавить("КоличествоПотребительскихУпаковок", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0)));
	ДанныеШтрихкодовУпаковок.Колонки.Добавить("ДатаУпаковки",         Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	// Данные из переопределения
	ДанныеШтрихкодовУпаковок.Колонки.Добавить("ВидПродукции",             Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИС"));
	ДанныеШтрихкодовУпаковок.Колонки.Добавить("МаркируемаяПродукция",     Новый ОписаниеТипов("Булево"));
	ДанныеШтрихкодовУпаковок.Колонки.Добавить("ТребуетВзвешивания",       Новый ОписаниеТипов("Булево"));
	ДанныеШтрихкодовУпаковок.Колонки.Добавить("ПроизвольнаяЕдиницаУчета", Новый ОписаниеТипов("Булево"));
	
	Если СтрокиТаблицы.Количество() = 0 Тогда
		Возврат ДанныеШтрихкодовУпаковок;
	КонецЕсли;
	
	СписокЗапросов = Новый СписокЗначений;
	
	Если ТипЗнч(СтрокиТаблицы[0]) = Тип("СправочникСсылка.ШтрихкодыУпаковокТоваров") Тогда

		ШтрихкодыУпаковок = СтрокиТаблицы;

		ТекстЗапросаДанныеШтрихкодовУпаковок =
			"ВЫБРАТЬ
			|	ТаблицаШтрихкодыУпаковок.ЗначениеШтрихкода КАК Штрихкод,
			|	ТаблицаШтрихкодыУпаковок.Ссылка            КАК ШтрихкодУпаковки,
			|	ТаблицаШтрихкодыУпаковок.ДатаУпаковки      КАК ДатаУпаковки,
			|	ТаблицаШтрихкодыУпаковок.ТипУпаковки    КАК ТипУпаковки,
			|	ТаблицаШтрихкодыУпаковок.Номенклатура   КАК Номенклатура,
			|	ТаблицаШтрихкодыУпаковок.Характеристика КАК Характеристика,
			|	ТаблицаШтрихкодыУпаковок.Серия          КАК Серия,
			|	ТаблицаШтрихкодыУпаковок.Количество                        КАК Количество,
			|	ТаблицаШтрихкодыУпаковок.КоличествоПотребительскихУпаковок КАК КоличествоПотребительскихУпаковок
			|ПОМЕСТИТЬ ДанныеШтрихкодовУпаковок
			|ИЗ
			|	Справочник.ШтрихкодыУпаковокТоваров КАК ТаблицаШтрихкодыУпаковок
			|ГДЕ
			|	ТаблицаШтрихкодыУпаковок.Ссылка В (&ШтрихкодыУпаковок)
			|ИНДЕКСИРОВАТЬ ПО
			|	ТаблицаШтрихкодыУпаковок.Номенклатура";

		СписокЗапросов.Добавить(ТекстЗапросаДанныеШтрихкодовУпаковок);

	Иначе

		ШтрихкодыУпаковок = ШтрихкодыУпаковок(СтрокиТаблицы, ТипыУпаковок, ПроверкаНаGS1);

		Если ШтрихкодыУпаковок.Количество() = 0 Тогда
			Возврат ДанныеШтрихкодовУпаковок;
		КонецЕсли;

		ТекстЗапросаДанныеШтрихкодовУпаковок =
			"ВЫБРАТЬ
			|	ШтрихкодыУпаковок.Штрихкод       КАК Штрихкод,
			|	ШтрихкодыУпаковок.Ссылка         КАК ШтрихкодУпаковки,
			|	ШтрихкодыУпаковок.ДатаУпаковки   КАК ДатаУпаковки,
			|	ШтрихкодыУпаковок.ТипУпаковки    КАК ТипУпаковки,
			|	ШтрихкодыУпаковок.Номенклатура   КАК Номенклатура,
			|	ШтрихкодыУпаковок.Характеристика КАК Характеристика,
			|	ШтрихкодыУпаковок.Серия          КАК Серия,
			|	ШтрихкодыУпаковок.Количество                        КАК Количество,
			|	ШтрихкодыУпаковок.КоличествоПотребительскихУпаковок КАК КоличествоПотребительскихУпаковок
			|ПОМЕСТИТЬ ДанныеШтрихкодовУпаковок
			|ИЗ
			|	&ШтрихкодыУпаковок КАК ШтрихкодыУпаковок
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура";

		СписокЗапросов.Добавить(ТекстЗапросаДанныеШтрихкодовУпаковок);

	КонецЕсли;

	СписокЗапросов = Новый СписокЗначений;

	СписокЗапросов.Добавить(ТекстЗапросаДанныеШтрихкодовУпаковок);

	СписокЗапросов.Добавить(ШтрихкодированиеОбщегоНазначенияИС.ТекстЗапросаСвойстваМаркируемойПродукции());

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ДанныеШтрихкодовУпаковок.Штрихкод                 КАК Штрихкод,
		|	ДанныеШтрихкодовУпаковок.ШтрихкодУпаковки         КАК ШтрихкодУпаковки,
		|	ДанныеШтрихкодовУпаковок.ДатаУпаковки             КАК ДатаУпаковки,
		|	ДанныеШтрихкодовУпаковок.ТипУпаковки              КАК ТипУпаковки,
		|	ДанныеШтрихкодовУпаковок.Номенклатура             КАК Номенклатура,
		|	ДанныеШтрихкодовУпаковок.Характеристика           КАК Характеристика,
		|	ДанныеШтрихкодовУпаковок.Серия                    КАК Серия,
		|	ДанныеШтрихкодовУпаковок.Количество                        КАК Количество,
		|	ДанныеШтрихкодовУпаковок.КоличествоПотребительскихУпаковок КАК КоличествоПотребительскихУпаковок,
		|	СвойстваМаркируемойПродукции.МаркируемаяПродукция КАК МаркируемаяПродукция,
		|	&ТребуетВзвешивания                               КАК ТребуетВзвешивания,
		|	&ПроизвольнаяЕдиницаУчета                         КАК ПроизвольнаяЕдиницаУчета,
		|	СвойстваМаркируемойПродукции.ВидПродукции         КАК ВидПродукции
		|ИЗ
		|	ДанныеШтрихкодовУпаковок КАК ДанныеШтрихкодовУпаковок
		|		ЛЕВОЕ СОЕДИНЕНИЕ СвойстваМаркируемойПродукции КАК СвойстваМаркируемойПродукции
		|		ПО ДанныеШтрихкодовУпаковок.Номенклатура = СвойстваМаркируемойПродукции.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеИС
		|		ПО &ТоварыОписаниеНоменклатурыИС";
	ОбщегоНазначенияИС.ОбновитьТекстЗапросаСРегистромОписаниеНоменклатурыИС(ТекстЗапроса, "ОписаниеИС", "ДанныеШтрихкодовУпаковок.Номенклатура");

	СписокЗапросов.Добавить(ТекстЗапроса, "ШтрихкодыУпаковок");

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ШтрихкодыУпаковок", ШтрихкодыУпаковок);

	Результат = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов, Истина);

	//@skip-check wrong-string-literal-content
	ДанныеШтрихкодовУпаковок = Результат["ШтрихкодыУпаковок"];

	Возврат ДанныеШтрихкодовУпаковок;
	
КонецФункции

// Производит анализ дерева упаковок на продукцию с недопустимым статусом кодов маркировки
//
// Параметры:
//  ДеревоМаркируемойПродукции - ДеревоЗначений - Иерархия хранения маркируемой продукции с упаковками.
//  ЗначенияШтрихкодов - Соответствие Из Строка - Соответствие, которое будет дополнен штрихкодами, имеющими недопустимый статус.
// Возвращаемое значение:
//  Соответствие Из Строка - Штрихкоды, которые имеют недопустимый статус и содержатся в дереве упаковок.
Функция ЗначенияНедопустимыхШтрихкодовИзДереваМаркируемойПродукции(ДеревоМаркируемойПродукции, ЗначенияШтрихкодов = Неопределено) Экспорт
	
	Если ЗначенияШтрихкодов = Неопределено Тогда
		Результат = Новый Соответствие;
	Иначе
		Результат = ЗначенияШтрихкодов;
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из ДеревоМаркируемойПродукции.Строки Цикл
		
		ЗначенияНедопустимыхШтрихкодовИзДереваМаркируемойПродукции(СтрокаДерева, Результат);
		
		Если Не ПустаяСтрока(СтрокаДерева.Штрихкод) И СтрокаДерева.НедопустимыйКодМаркировки Тогда
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаДерева, "НормализованныйШтрихкод") Тогда
				Результат.Вставить(СтрокаДерева.НормализованныйШтрихкод, СтрокаДерева);
			Иначе
				Результат.Вставить(СтрокаДерева.Штрихкод, СтрокаДерева);
			КонецЕсли;
		
		КонецЕсли;

	КонецЦикла;
	
	Возврат Результат;

КонецФункции

Процедура ОбработатьШтрихкодыУпаковокПоДаннымБазы(ПараметрыСканирования, ДанныеПоШтрихкодам, ШтрихкодыМаркируемойПродукции, ТипыУпаковок, ЗаполнитьПоСсылкам) Экспорт

	НайденныеУпаковки = ДанныеШтрихкодовУпаковок(ШтрихкодыМаркируемойПродукции, ТипыУпаковок);
	ОбщиеМодули       = Неопределено;
	
	Если НайденныеУпаковки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КолонкиЗаполнения = ШтрихкодированиеОбщегоНазначенияИС.ИменаКолонокДляЗаполнения().Номенклатура;
	КолонкиЗаполнения.Вставить("ТипУпаковки",  Истина);
	КолонкиЗаполнения.Вставить("ВидУпаковки",  Истина);
	КолонкиЗаполнения.Вставить("ВидПродукции", Истина);
	КолонкиЗаполненияСтрокой = Неопределено;
	
	ПараметрыНормализацииКМ = РазборКодаМаркировкиИССлужебныйКлиентСервер.НастройкиРазбораКодаМаркировкиДляХэшаНормализации();
	ПараметрыНормализацииКМ.ИмяСвойстваКодМаркировки = "КодМаркировки";
	
	Для Каждого НайденнаяУпаковка Из НайденныеУпаковки Цикл
		
		СтрокаДанныхКодаМаркировки = Неопределено;
		Если ЗаполнитьПоСсылкам Тогда
			СтрокаДанныхКодаМаркировки = ДанныеПоШтрихкодам.ДанныеКодовМаркировки.Найти(НайденнаяУпаковка.ШтрихкодУпаковки, "ШтрихкодУпаковки");
		КонецЕсли;
		
		Если СтрокаДанныхКодаМаркировки = Неопределено Тогда
			СтрокаДанныхКодаМаркировки = ДанныеПоШтрихкодам.ДанныеКодовМаркировки.Найти(НайденнаяУпаковка.Штрихкод, "Штрихкод");
		КонецЕсли;
		
		Если СтрокаДанныхКодаМаркировки = Неопределено Тогда

			ДанныеРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(
				НайденнаяУпаковка.Штрихкод,
				ПараметрыСканирования.ДопустимыеВидыПродукции);

			Если ДанныеРазбора <> Неопределено
				И ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
				И ДанныеРазбора.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_128 Тогда

				ВидПродукции = ДанныеРазбора.ВидыПродукции.Получить(0);

				НормализованныйШтрихкод = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
					ДанныеРазбора, ВидПродукции, ПараметрыНормализацииКМ);

				СтрокаДанныхКодаМаркировки = ДанныеПоШтрихкодам.ДанныеКодовМаркировки.Найти(НормализованныйШтрихкод, "НормализованныйШтрихкод");

			КонецЕсли;

		КонецЕсли;
		
		Если СтрокаДанныхКодаМаркировки = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		СтрокаДанныхКодаМаркировки.ШтрихкодУпаковки = НайденнаяУпаковка.ШтрихкодУпаковки;

		СтрокаДанныхКодаМаркировки.Идентифицирован = ЗначениеЗаполнено(НайденнаяУпаковка.Номенклатура)
		                                           Или ЗначениеЗаполнено(СтрокаДанныхКодаМаркировки.Номенклатура)
		                                           Или СтрокаДанныхКодаМаркировки.СписокНоменклатуры.Количество();
		СтрокаДанныхКодаМаркировки.ТребуетсяСопоставление = Ложь;
		
		Если Не ЗначениеЗаполнено(СтрокаДанныхКодаМаркировки.ВидУпаковки) Тогда
			СтрокаДанныхКодаМаркировки.ТипУпаковки = НайденнаяУпаковка.ТипУпаковки;
			Если СтрокаДанныхКодаМаркировки.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
				СтрокаДанныхКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская;
			ИначеЕсли СтрокаДанныхКодаМаркировки.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка
				И ЗначениеЗаполнено(СтрокаДанныхКодаМаркировки.Номенклатура) Тогда
				СтрокаДанныхКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор;
			ИначеЕсли СтрокаДанныхКодаМаркировки.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка
				И ЗначениеЗаполнено(СтрокаДанныхКодаМаркировки.Номенклатура) Тогда
				СтрокаДанныхКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая;
			Иначе
				СтрокаДанныхКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая;
			КонецЕсли;
		КонецЕсли;

		Если ЗначениеЗаполнено(НайденнаяУпаковка.Номенклатура) Тогда
			
			Если СтрокаДанныхКодаМаркировки.ВидПродукции <> НайденнаяУпаковка.ВидПродукции Тогда
				ШтрихкодированиеОбщегоНазначенияИС.УточнитьДанныеРазбораПоВидуПродукции(СтрокаДанныхКодаМаркировки, НайденнаяУпаковка.ВидПродукции, ПараметрыСканирования, ОбщиеМодули);
			КонецЕсли;
			
			СтрокаДанныхКодаМаркировки.ВидПродукции   = НайденнаяУпаковка.ВидПродукции;
			СтрокаДанныхКодаМаркировки.Номенклатура   = НайденнаяУпаковка.Номенклатура;
			СтрокаДанныхКодаМаркировки.Характеристика = НайденнаяУпаковка.Характеристика;
			Если ОбщегоНазначенияИС.ТребуетсяВыборСерии(СтрокаДанныхКодаМаркировки, ПараметрыСканирования) Тогда
				СтрокаДанныхКодаМаркировки.Серия = НайденнаяУпаковка.Серия;
			КонецЕсли;
			
			Если СтрокаДанныхКодаМаркировки.СписокНоменклатуры.Количество() Тогда
				Для Каждого ВариантСопоставления Из СтрокаДанныхКодаМаркировки.СписокНоменклатуры Цикл
					Если ВариантСопоставления.Номенклатура = НайденнаяУпаковка.Номенклатура
						И ВариантСопоставления.Характеристика = НайденнаяУпаковка.Характеристика Тогда
						СтрокаДанныхКодаМаркировки.ПредставлениеНоменклатуры = ВариантСопоставления.ПредставлениеНоменклатуры;
						СтрокаДанныхКодаМаркировки.СписокНоменклатуры.Очистить();
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;

			СтрокаДанныхКодаМаркировки.МаркируемаяПродукция     = НайденнаяУпаковка.МаркируемаяПродукция;
			СтрокаДанныхКодаМаркировки.ТребуетВзвешивания       = НайденнаяУпаковка.ТребуетВзвешивания;
			СтрокаДанныхКодаМаркировки.ПроизвольнаяЕдиницаУчета = НайденнаяУпаковка.ПроизвольнаяЕдиницаУчета;

			// В случае ЗаполнитьПоСсылкам = Ложь в методе могут считываться только потребительские известные упаковки
			// по данным информационной базы.
			Если Не ЗаполнитьПоСсылкам Тогда
				СтрокаДанныхКодаМаркировки.КоличествоПотребительскихУпаковок = ?(НайденнаяУпаковка.КоличествоПотребительскихУпаковок = 0,
					НайденнаяУпаковка.Количество, НайденнаяУпаковка.КоличествоПотребительскихУпаковок);
				СтрокаДанныхКодаМаркировки.Количество = НайденнаяУпаковка.Количество;
			КонецЕсли;
			
			ДанныеПоШтрихкодам.ВидыПродукции.Добавить(НайденнаяУпаковка.ВидПродукции);
			
		ИначеЕсли ЗначениеЗаполнено(СтрокаДанныхКодаМаркировки.Номенклатура) Тогда
			ОтметитьКОбновлению(ДанныеПоШтрихкодам.СтрокиДляСохраненияКодовМаркировки, СтрокаДанныхКодаМаркировки, Неопределено);
		ИначеЕсли Не СтрокаДанныхКодаМаркировки.ЭтоКодВводаОстатков
				И Не СтрокаДанныхКодаМаркировки.ВидПродукции = Перечисления.ВидыПродукцииИС.Алкогольная
				И Не СтрокаДанныхКодаМаркировки.ВидПродукции = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха Тогда
			СтрокаДанныхКодаМаркировки.ТребуетсяСопоставление = СтрокаДанныхКодаМаркировки.СписокНоменклатуры.Количество() = 0;
		ИначеЕсли СтрокаДанныхКодаМаркировки.ЭтоКодВводаОстатков Тогда
			СтрокаДанныхКодаМаркировки.Количество = 1;
		КонецЕсли;

		Если СтрокаДанныхКодаМаркировки.СтрокаДерева <> Неопределено Тогда

			Если КолонкиЗаполненияСтрокой = Неопределено Тогда
				ИменаКолонок = Новый Массив;
				Для Каждого Колонка Из СтрокаДанныхКодаМаркировки.СтрокаДерева.Владелец().Колонки Цикл
					Если КолонкиЗаполнения[Колонка.Имя] <> Неопределено Тогда
						ИменаКолонок.Добавить(Колонка.Имя);
					КонецЕсли;
				КонецЦикла;
				КолонкиЗаполненияСтрокой = СтрСоединить(ИменаКолонок, ",");
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(СтрокаДанныхКодаМаркировки.СтрокаДерева, СтрокаДанныхКодаМаркировки, КолонкиЗаполненияСтрокой);

			// В случае ЗаполнитьПоСсылкам = Истина в методе могут считываться групповые и логистические упаковки
			// в иерархии дерева, полученного по данным сервиса.
			Если ЗаполнитьПоСсылкам Тогда
				СтрокаДанныхКодаМаркировки.СтрокаДерева.КоличествоПотребительскихУпаковокПоДаннымИБ = ?(НайденнаяУпаковка.КоличествоПотребительскихУпаковок = 0,
					НайденнаяУпаковка.Количество, НайденнаяУпаковка.КоличествоПотребительскихУпаковок);
				СтрокаДанныхКодаМаркировки.СтрокаДерева.КоличествоПоДаннымИБ = НайденнаяУпаковка.Количество;
			КонецЕсли;

		КонецЕсли;

		Если СтрокаДанныхКодаМаркировки.ЭтоКодВводаОстатков Тогда
			ДанныеПоШтрихкодам.ЕстьКодыМаркировкиВводаОстатков = Истина;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Формирует коллекции: «ДеревоУпаковок» и «МаркированныеТовары» по ссылке на документ.
// Данные собираются на основании информации справочника «ШтрихкодыУпаковок».
// Так же возможно получение информации из сервиса Государственных Информационных Систем,
// если данное взаимодействие и получение информации предусмотрено.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Ссылка на документ.
//  ВидПродукции - Неопределено, ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции, по которому необходимо осуществить
//  отбор формирования вложенных штрихкодов.
//  Детализация - Неопределено, ПеречислениеСсылка.ДетализацияСтруктурыХраненияИС - Детализация,
//  с которой необходимо сформировать вложенные штрихкоды.
//  ОтключитьИспользованиеСервиса - Булево - Истина, если не требуется образение в сервис.
// Возвращаемое значение:
//  Структура - Описание:
//   * ШтрихкодыПродукцииДляСопоставления - Массив Из Строка - Массив штрихкодов, которые необходимо сопоставить с номенклатурой,
//   * ВидыПродукции - Массив из ПеречислениеСсылка.ВидыПродукцииИС - Массив видов продукции,
//   * МаркированныеТовары - ТаблицаЗначений - Таблица, содержащая товары, подлежащие маркировке,
//   * ДеревоУпаковок - ДеревоЗначений - Дерево упаковок, построенное в соответствие с хранением в справочнике ШтрихкодыУпаковок.
Функция ВложенныеШтрихкодыУпаковокПоДокументу(ДокументСсылка, ВидПродукции = Неопределено, Детализация = Неопределено, ОтключитьИспользованиеСервиса = Ложь) Экспорт

	ДанныеШапки = ПолучитьСтруктуруРеквизитовДокумента(ДокументСсылка);
	ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования(ДанныеШапки,,ВидПродукции);

	ВложенныеШтрихкоды = Неопределено;

	Если ШтрихкодированиеОбщегоНазначенияИС.ДопустимаАлкогольнаяПродукция(ПараметрыСканирования) Тогда
		МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
		ВложенныеШтрихкоды = МодульШтрихкодированиеЕГАИС.ВложенныеШтрихкодыУпаковокПоДокументу(ДокументСсылка);
	ИначеЕсли ШтрихкодированиеОбщегоНазначенияИС.ДопустимаТабачнаяПродукция(ПараметрыСканирования) Тогда
		Если ОтключитьИспользованиеСервиса Тогда
			ОбщегоНазначенияИСМПКлиентСервер.УстановитьПараметрСканированияЗапрашиватьДанныеСервисаИСМП(ПараметрыСканирования, Ложь);
		КонецЕсли;
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		ВложенныеШтрихкоды = МодульШтрихкодированиеМОТП.ВложенныеШтрихкодыУпаковокПоДокументу(
			ДокументСсылка, ПараметрыСканирования);
	ИначеЕсли ШтрихкодированиеОбщегоНазначенияИС.ДопустимаПродукцияИСМП(ПараметрыСканирования) Тогда
		Если ОтключитьИспользованиеСервиса Тогда
			ОбщегоНазначенияИСМПКлиентСервер.УстановитьПараметрСканированияЗапрашиватьДанныеСервисаИСМП(ПараметрыСканирования, Ложь);
		КонецЕсли;
		МодульШтрихкодированиеИСМП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМП");
		ВложенныеШтрихкоды = МодульШтрихкодированиеИСМП.ВложенныеШтрихкодыУпаковокПоДокументу(
			ДокументСсылка, ПараметрыСканирования);
	КонецЕсли;

	//@skip-check constructor-function-return-section
	Возврат ВложенныеШтрихкоды;

КонецФункции

// Формирует структуру Вложенные штрихкоды для упаковок на основании существующих данных в ИБ.
//
// Параметры:
//  МассивУпаковок - Массив из СправочникСсылка.ШтрихкодыУпаковокТоваров - Коллекция элементов справочника Штрихкоды упаковок.
//  ПараметрыСканирования - См. ПараметрыСканирования
// Возвращаемое значение:
//  См. ИнициализацияВложенныхШтрихкодов
Функция ВложенныеШтрихкодыИзвестныхУпаковок(МассивУпаковок, ПараметрыСканирования = Неопределено) Экспорт

	Если МассивУпаковок.Количество() = 0 Тогда
		ВложенныеШтрихкоды = ИнициализацияВложенныхШтрихкодов();
		Возврат ВложенныеШтрихкоды;
	КонецЕсли;

	ВложенныеШтрихкоды = ВложенныеШтрихкодыПоМассивуУпаковокБезСпецифики(МассивУпаковок, ПараметрыСканирования);

	Возврат ВложенныеШтрихкоды;

КонецФункции

// Производит анализ дерева упаковок на продукцию.
//
// Параметры:
//  ДеревоМаркируемойПродукции - ДеревоЗначений - Иерархия хранения маркируемой продукции с упаковками.
//  ЗначенияШтрихкодов - Неопределено, Массив Из СтрокаДереваЗначений - Массив, который будет дополнен штрихкодами, которые в наличии.
//  НаличиеКолонок - Структура, Неопределено - служебная структура для проверки по колонке "НедопустимыйКодМаркировки"
// Возвращаемое значение:
//  Массив Из СтрокаДереваЗначений - Штрихкоды, которые имеют статус "В Наличии" и содержатся в дереве упаковок.
Функция ЗначенияШтрихкодовИзДереваМаркируемойПродукции(ДеревоМаркируемойПродукции, ЗначенияШтрихкодов = Неопределено, НаличиеКолонок = Неопределено) Экспорт

	Если ЗначенияШтрихкодов = Неопределено Тогда
		Результат = Новый Массив;
	Иначе
		Результат = ЗначенияШтрихкодов;
	КонецЕсли;

	Если НаличиеКолонок = Неопределено Тогда
		НаличиеКолонок = Новый Структура;
		НаличиеКолонок.Вставить("НедопустимыйКодМаркировки", ДеревоМаркируемойПродукции.Колонки.Найти("НедопустимыйКодМаркировки") <> Неопределено);
	КонецЕсли;

	Для Каждого СтрокаДерева Из ДеревоМаркируемойПродукции.Строки Цикл

		ЗначенияШтрихкодовИзДереваМаркируемойПродукции(СтрокаДерева, Результат, НаличиеКолонок);

		Если Не (ПустаяСтрока(СтрокаДерева.Штрихкод)
				Или (НаличиеКолонок.НедопустимыйКодМаркировки И СтрокаДерева.НедопустимыйКодМаркировки)) Тогда
			Результат.Добавить(СтрокаДерева);
		ИначеЕсли СтрокаДерева.ТипУпаковки = Перечисления.ПрочиеЗоныПересчетаПродукцииИСМП.ГруппировкаОбъемноСортовогоУчетаПоGTIN Тогда
			СтрокаДерева.Штрихкод = СтрШаблон(
				"(02)%1(37)%2",
				СтрокаДерева.GTIN,
				Формат(СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок, "ЧГ=0;"));
			Результат.Добавить(СтрокаДерева);
		КонецЕсли;

	КонецЦикла;

	Возврат Результат;

КонецФункции

Процедура ЗаполнитьДанныеRFID(ДанныеПоШтрихкодам, ПараметрыСканирования) Экспорт

	ВидыПродукции = ДанныеПоШтрихкодам.ВидыПродукции;

	Если ШтрихкодированиеОбщегоНазначенияИС.ДопустимаПродукцияИзНатуральногоМеха(ПараметрыСканирования)
		И ШтрихкодированиеОбщегоНазначенияИС.ПрисутствуетПродукцияИзНатуральногоМеха(ВидыПродукции) Тогда

		СтрокиДляЗаполнения = Новый Массив;

		Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
			
			Если СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха
				И ЗначениеЗаполнено(СтрокаДанных.Штрихкод) Тогда
				СтрокиДляЗаполнения.Добавить(СтрокаДанных);
			КонецЕсли;

		КонецЦикла;

		РегистрыСведений.ДанныеRFIDИСМП.ЗаполнитьДанныеRFID(СтрокиДляЗаполнения);

	КонецЕсли;
	
КонецПроцедуры

// Возвращает состав колонок, который является общим для дерева упаковок и таблицы значений маркированные товары.
//
// Возвращаемое значение:
//  Структура - Описание:
//   * ТипШтрихкода - Неопределено, ПеречислениеСсылка.ТипыШтрихкодов - Тип штрихкода кода маркировки.
//   * УпаковкаВерхнегоУровня - Неопределено -
//   * ВидПродукции - Неопределено, ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции кода маркировки.
//   * Серия - Неопределено, ОпределяемыйТип.СерияНоменклатуры - Серия номенклатуры.
//   * Характеристика - Неопределено, ОпределяемыйТип.ХарактеристикаНоменклатуры - Характеристика.
//   * Номенклатура - Неопределено, ОпределяемыйТип.Номенклатура - Номенклатура.
//   * Штрихкод - Неопределено, Строка - Штрихкод.
//   * ШтрихкодУпаковки - Неопределено, СправочникСсылка.ШтрихкодыУпаковокТоваров - ссылка на элемент справочника.
//   * ИдентификаторСтроки - Неопределено, Строка - Идентификатор
//   * Упаковка - Неопределено, СправочникСсылка.ШтрихкодыУпаковокТоваров -
//   * ЭтоКодВводаОстатков - Булево -
//   * Количество - Число -
//   * МаркируемаяПродукция - Булево -
//   * ТребуетВзвешивания - Булево -
//   * ПроизвольнаяЕдиницаУчета - Булево -
//   * КоличествоПотребительскихУпаковокПоДаннымИБ - Число
//   * КоличествоПоДаннымИБ - Число -
//   * ВидУпаковки - Неопределено, ПеречислениеСсылка.ВидыУпаковокИС -
//   * СоставКодаМаркировки - Неопределено -
//   * ДанныеРазбора - Неопределено -
//   * ПараметрыОшибки - Неопределено, Структура из КлючИЗначение -
//   * РазрешительныйРежимИдентификаторЗапросаГИСМТ - ОпределяемыйТип.УникальныйИдентификаторИС
//   * РазрешительныйРежимДатаЗапросаГИСМТ - Строка - дата получения идентификатора ГИС МТ в формате timestamp
Функция ОбщиеКолонкиКоллекцийВложенныхШтрихкодов()

	КоллекцияОбязательныхКолонок = Новый Структура;
	КоллекцияОбязательныхКолонок.Вставить("ИдентификаторСтроки", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	КоллекцияОбязательныхКолонок.Вставить("ШтрихкодУпаковки");
	КоллекцияОбязательныхКолонок.Вставить("Штрихкод");
	КоллекцияОбязательныхКолонок.Вставить("Номенклатура");
	КоллекцияОбязательныхКолонок.Вставить("Характеристика");
	КоллекцияОбязательныхКолонок.Вставить("Серия");
	КоллекцияОбязательныхКолонок.Вставить("Упаковка");
	КоллекцияОбязательныхКолонок.Вставить("ЭтоКодВводаОстатков",      Новый ОписаниеТипов("Булево"));
	КоллекцияОбязательныхКолонок.Вставить("Количество",               Новый ОписаниеТипов("Число"));
	КоллекцияОбязательныхКолонок.Вставить("МаркируемаяПродукция",     Новый ОписаниеТипов("Булево"));
	КоллекцияОбязательныхКолонок.Вставить("ТребуетВзвешивания",       Новый ОписаниеТипов("Булево"));
	КоллекцияОбязательныхКолонок.Вставить("ПроизвольнаяЕдиницаУчета", Новый ОписаниеТипов("Булево"));
	КоллекцияОбязательныхКолонок.Вставить("КоличествоПотребительскихУпаковокПоДаннымИБ", Новый ОписаниеТипов("Число"));
	КоллекцияОбязательныхКолонок.Вставить("КоличествоПоДаннымИБ",                        Новый ОписаниеТипов("Число"));
	КоллекцияОбязательныхКолонок.Вставить("ВидПродукции");
	КоллекцияОбязательныхКолонок.Вставить("УпаковкаВерхнегоУровня");
	КоллекцияОбязательныхКолонок.Вставить("ТипШтрихкода");
	КоллекцияОбязательныхКолонок.Вставить("ВидУпаковки");
	КоллекцияОбязательныхКолонок.Вставить("СоставКодаМаркировки");
	КоллекцияОбязательныхКолонок.Вставить("ДанныеРазбора");
	КоллекцияОбязательныхКолонок.Вставить("СписокНоменклатуры", Новый ОписаниеТипов("ФиксированныйМассив"));
	КоллекцияОбязательныхКолонок.Вставить("ПараметрыОшибки");
	КоллекцияОбязательныхКолонок.Вставить("РазрешительныйРежимИдентификаторЗапросаГИСМТ");
	КоллекцияОбязательныхКолонок.Вставить("РазрешительныйРежимДатаЗапросаГИСМТ");
	КоллекцияОбязательныхКолонок.Вставить("РазрешительныйРежимАдресСервера");
	КоллекцияОбязательныхКолонок.Вставить("РазрешительныйРежимТелоЗапросаJSON");
	КоллекцияОбязательныхКолонок.Вставить("РазрешительныйРежимТелоОтветаJSON");
	КоллекцияОбязательныхКолонок.Вставить("РазрешительныйРежимКодОтвета");

	//@skip-check constructor-function-return-section
	Возврат КоллекцияОбязательныхКолонок;

КонецФункции

// Формирует коллекции: «ДеревоУпаковок» и «МаркированныеТовары».
// Данные собираются на основании информации справочника «ШтрихкодыУпаковок». 
// Так же возможно получение информации из сервиса Государственных Информационных Систем,
// если данное взаимодействие и получение информации предусмотрено.
// 
// Параметры:
//  Упаковки              - Массив из СправочникСсылка.ШтрихкодыУпаковокТоваров - Массив упаковок, по которому формируются вложенные штрихкоды.
//                        - Массив из см. ШтрихкодированиеИС.НовыйЭлементКоллекцииУпаковокДляРаспределенияПоТоварам -
//	                         Штрикходы упаковок документа, с дополнительным данными частичного выбытия.
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования).
//  ЗаполнитьСведенияПоШтрихкодамEAN - Булево - Заполнять данные по штрихкодам EAN.
//  СортироватьДанные - Булево - Выполнить сортировку данных
// Возвращаемое значение:
//  Структура - Описание:
//   * ШтрихкодыПродукцииДляСопоставления - Массив Из Строка - Массив штрихкодов, которые необходимо сопоставить с номенклатурой.
//   * ВидыПродукции - Массив из ПеречислениеСсылка.ВидыПродукцииИС - Массив видов продукции.
//   * МаркированныеТовары - ТаблицаЗначений - Таблица, содержащая товары, подлежащие маркировке:
//   * ДеревоУпаковок - ДеревоЗначений - Дерево упаковок, построенное в соответствие с хранением в справочнике ШтрихкодыУпаковок.
//   * ЕстьОшибки - Булево - если были ошибки при получении данных из сервиса.
//   * ТребуетсяОбновлениеКлючаСессии - Булево - если были ошибки при получении данных из сервиса.
//   * ТекстОшибки - Строка - ошибка при получении данных из сервиса.
Функция ВложенныеШтрихкодыУпаковок(Упаковки, ПараметрыСканирования = Неопределено, ЗаполнитьСведенияПоШтрихкодамEAN = Ложь, СортироватьДанные = Ложь) Экспорт
	
	Если Упаковки.Количество() = 0 Тогда
		
		ВложенныеШтрихкоды = ИнициализацияВложенныхШтрихкодов();
		Возврат ВложенныеШтрихкоды;
		
	КонецЕсли;
	
	МассивУпаковок      = Упаковки;
	ПараметрыДополнения = Неопределено;
	
	Если ТипЗнч(Упаковки[0]) <> Тип("СправочникСсылка.ШтрихкодыУпаковокТоваров") Тогда
		
		ПараметрыДополнения = ПараметрыДополненияВложенныхШтрихкодовУпаковок();
		МассивУпаковок = Новый Массив;
		Для Каждого ЭлементМассиваУпаковок Из Упаковки Цикл
			МассивУпаковок.Добавить(ЭлементМассиваУпаковок.ШтрихкодУпаковки);
			
			//@skip-check query-in-loop
			Если ШтрихкодированиеОбщегоНазначенияИС.ТребуетсяЧастичноеВыбытие(ПараметрыСканирования)
				И ЗначениеЗаполнено(ЭлементМассиваУпаковок.ЧастичноеВыбытиеКоличество)
				И ЗначениеЗаполнено(ЭлементМассиваУпаковок.ЧастичноеВыбытиеВариантУчета) Тогда
				
				ЭлементЧастичногоВыбытия = НовыйЭлементДополненияВложенныхШтрихкодовУпаковокЧастичноеВыбытие();
				ЗаполнитьЗначенияСвойств(ЭлементЧастичногоВыбытия, ЭлементМассиваУпаковок);
				ЭлементЧастичногоВыбытия.Количество = ЭлементМассиваУпаковок.ЧастичноеВыбытиеКоличество;
				
				ПараметрыДополнения.ДанныеЧастичногоВыбытия.Вставить(
					ЭлементМассиваУпаковок.ШтрихкодУпаковки,
					ЭлементЧастичногоВыбытия);
				
			КонецЕсли;
			
			ЭлементДанныхГИСМТ = НовыйЭлементДополненияВложенныхШтрихкодовУпаковокДанныеГИСМТ();
			ЗаполнитьЗначенияСвойств(ЭлементДанныхГИСМТ, ЭлементМассиваУпаковок);
			
			Если ЗначениеЗаполнено(ЭлементДанныхГИСМТ.РазрешительныйРежимДатаЗапросаГИСМТ) Тогда
				
				ПараметрыДополнения.ДанныеЗапросаГИСМТ.Вставить(
					ЭлементМассиваУпаковок.ШтрихкодУпаковки,
					ЭлементДанныхГИСМТ);
					
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДанныеПоШтрихкодам = ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияДанныхПоШтрихкодам();
	ВложенныеШтрихкоды = ВложенныеШтрихкодыПоМассивуУпаковокБезСпецифики(МассивУпаковок, ПараметрыСканирования);
	ДанныеПоШтрихкодам.ВложенныеШтрихкоды = ВложенныеШтрихкоды;
	
	Если ЗаполнитьСведенияПоШтрихкодамEAN Тогда
		ДобавленныеСтроки = Новый Массив;
	Иначе
		ДобавленныеСтроки = Неопределено;
	КонецЕсли;
	
	ПараметрыДополненияТаблицыДанныеКодовМаркировки = ШтрихкодированиеОбщегоНазначенияИС.ПараметрыДополненияТаблицыДанныеКодовМаркировки(
		ДанныеПоШтрихкодам, ВложенныеШтрихкоды.ДеревоУпаковок);
	ПараметрыДополненияТаблицыДанныеКодовМаркировки.ЗаполнятьСтрокуДерева = Истина;
	
	ДополнитьТаблицуДанныеКодовМаркировкиПоСтрокамДереваУпаковок(
		ДанныеПоШтрихкодам, ВложенныеШтрихкоды.ДеревоУпаковок, ДобавленныеСтроки, ПараметрыСканирования,
		ПараметрыДополненияТаблицыДанныеКодовМаркировки);
	
	ДопустимаТабачнаяПродукция    = ШтрихкодированиеОбщегоНазначенияИС.ДопустимаТабачнаяПродукция(ПараметрыСканирования);
	ДопустимаПродукцияИСМП        = ШтрихкодированиеОбщегоНазначенияИС.ДопустимаПродукцияИСМП(ПараметрыСканирования);
	ДопустимаАлкогольнаяПродукция = ШтрихкодированиеОбщегоНазначенияИС.ДопустимаАлкогольнаяПродукция(ПараметрыСканирования);
	
	Если ДопустимаТабачнаяПродукция Тогда
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеОбщегоНазначенияМОТП");
		МодульШтрихкодированиеМОТП.ДобавитьКолонкиТаблицыДанныеКодовМаркировки(
			ДанныеПоШтрихкодам, ПараметрыСканирования);
	КонецЕсли;
	
	Если ДопустимаПродукцияИСМП Тогда
		МодульШтрихкодированиеИСМП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеОбщегоНазначенияИСМП");
		МодульШтрихкодированиеИСМП.ДобавитьКолонкиТаблицыДанныеКодовМаркировки(
			ДанныеПоШтрихкодам, ПараметрыСканирования);
	КонецЕсли;
	
	Если ДопустимаАлкогольнаяПродукция Тогда
		МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
		МодульШтрихкодированиеЕГАИС.ДобавитьКолонкиТаблицыДанныеКодовМаркировки(ДанныеПоШтрихкодам, ПараметрыСканирования);
	КонецЕсли;
	
	ШтрихкодированиеОбщегоНазначенияИС.НормализоватьДанныеВложенныхШтрихкодов(
		ДанныеПоШтрихкодам, ПараметрыСканирования, ДанныеПоШтрихкодам.ДанныеКодовМаркировки);
	
	Если ЗаполнитьСведенияПоШтрихкодамEAN Тогда
		ЗаполнитьКоэффициентыВложенностиУпаковокПоШтрихкодамEAN(ДанныеПоШтрихкодам, ПараметрыСканирования, ДобавленныеСтроки);
	КонецЕсли;
	
	Если ДопустимаАлкогольнаяПродукция Тогда
		
		МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
		МодульШтрихкодированиеЕГАИС.ДополнитьДанныеПоШтрихкодамСпецификой(
			ДанныеПоШтрихкодам,
			ПараметрыСканирования,
			ПараметрыДополнения);
		
	КонецЕсли;
	
	Если ШтрихкодированиеОбщегоНазначенияИС.ДопустимаТабачнаяПродукция(ПараметрыСканирования)
		Или ШтрихкодированиеОбщегоНазначенияИС.ДопустимаПродукцияИСМП(ПараметрыСканирования) Тогда
		
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		МодульШтрихкодированиеМОТП.ПривестиВложенныеШтрихкодыКТребуемомуВидуДетализации(ВложенныеШтрихкоды, ПараметрыСканирования, ДанныеПоШтрихкодам.ДанныеКодовМаркировки);
		
	КонецЕсли;
	
	Если ДопустимаТабачнаяПродукция Тогда
		
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		МодульШтрихкодированиеМОТП.ДополнитьДанныеПоШтрихкодамСпецификой(
			ДанныеПоШтрихкодам,
			ПараметрыСканирования,
			ПараметрыДополнения);
		
	КонецЕсли;
	
	Если ДопустимаПродукцияИСМП Тогда
		
		МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
		МодульШтрихкодированиеИСМПСлужебный.ДополнитьДанныеПоШтрихкодамСпецификой(
			ДанныеПоШтрихкодам,
			ПараметрыСканирования,
			ПараметрыДополнения);
		
	КонецЕсли;
	
	Если СортироватьДанные Тогда
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ВложенныеШтрихкоды, "ДеревоУпаковок") Тогда
			ВложенныеШтрихкоды.ДеревоУпаковок.Строки.Сортировать("Штрихкод", Истина);
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ВложенныеШтрихкоды, "МаркированныеТовары") Тогда
			ВложенныеШтрихкоды.МаркированныеТовары.Сортировать("Штрихкод");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВложенныеШтрихкоды;
	
КонецФункции

// Заполняет информацию по коэффициентам вложенности упаковок. Информация помещается в таблицу ДанныеПоШтрихкодам.ДанныеКодовМаркировки.
//
// Параметры:
//  ДанныеПоШтрихкодам    - См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияДанныхПоШтрихкодам
//  ПараметрыСканирования - См. ПараметрыСканирования
//  ДанныеКодовМаркировки - см. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияТаблицыДанныхКодовМаркировки
Процедура ЗаполнитьКоэффициентыВложенностиУпаковокПоШтрихкодамEAN(ДанныеПоШтрихкодам, ПараметрыСканирования, ДанныеКодовМаркировки = Неопределено) Экспорт
	
	Если ДанныеКодовМаркировки = Неопределено Тогда
		ДанныеКодовМаркировки = ДанныеПоШтрихкодам.ДанныеКодовМаркировки;
	КонецЕсли;
	
	Если ДанныеКодовМаркировки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ШтрихкодыEAN = Новый Массив;
	УникальныеШтрихкодыEAN = Новый Соответствие;
	GTINПотребительскихУпаковок = Новый Соответствие;

	Для Каждого СтрокаДанных Из ДанныеКодовМаркировки Цикл

		ШтрихкодДляПоиска = ?(ПустаяСтрока(СтрокаДанных.EAN), СтрокаДанных.Штрихкод, СтрокаДанных.EAN);

		Если Не ЗначениеЗаполнено(ШтрихкодДляПоиска) Тогда
			Продолжить;
		КонецЕсли;
		
		Если УникальныеШтрихкодыEAN[ШтрихкодДляПоиска] = Неопределено Тогда
			ШтрихкодыEAN.Добавить(ШтрихкодДляПоиска);
			УникальныеШтрихкодыEAN.Вставить(ШтрихкодДляПоиска, Истина);
		КонецЕсли;
		
		Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
			И ЗначениеЗаполнено(СтрокаДанных.GTIN) Тогда
			GTINПотребительскихУпаковок.Вставить(СтрокаДанных.GTIN, Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТипЗнч(ДанныеКодовМаркировки) = Тип("Массив")
		И ДанныеКодовМаркировки.Количество() Тогда
		ИсточникТаблицаКодовМаркировки = ДанныеКодовМаркировки[0].Владелец();
	Иначе
		ИсточникТаблицаКодовМаркировки = ДанныеКодовМаркировки;
	КонецЕсли;
	
	Если ШтрихкодированиеОбщегоНазначенияИС.ДопустимаТабачнаяПродукция(ПараметрыСканирования) Тогда
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеОбщегоНазначенияМОТП");
		МодульШтрихкодированиеМОТП.ДобавитьКолонкиТаблицыДанныеКодовМаркировки(
			ДанныеПоШтрихкодам, ПараметрыСканирования, ИсточникТаблицаКодовМаркировки);
	КонецЕсли;

	Если ШтрихкодированиеОбщегоНазначенияИС.ДопустимаПродукцияИСМП(ПараметрыСканирования) Тогда
		МодульШтрихкодированиеИСМП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеОбщегоНазначенияИСМП");
		МодульШтрихкодированиеИСМП.ДобавитьКолонкиТаблицыДанныеКодовМаркировки(
			ДанныеПоШтрихкодам, ПараметрыСканирования, ИсточникТаблицаКодовМаркировки);
	КонецЕсли;

	ИнформацияПоШтрихкодамEAN = ШтрихкодированиеОбщегоНазначенияИС.ДанныеПоШтрихкодамEAN(ШтрихкодыEAN, ПараметрыСканирования, GTINПотребительскихУпаковок);

	Для Каждого СтрокаДанных Из ДанныеКодовМаркировки Цикл

		ЗначениеПоиска = СтрокаДанных.EAN;

		НайденныеШтрихкодыEAN = ИнформацияПоШтрихкодамEAN.НайтиСтроки(Новый Структура("ШтрихкодEAN", ЗначениеПоиска));

		Для Каждого СтрокаИнформации Из НайденныеШтрихкодыEAN Цикл

			Если ЗначениеЗаполнено(СтрокаДанных.Номенклатура)
				И (СтрокаДанных.Номенклатура <> СтрокаИнформации.Номенклатура
					Или СтрокаДанных.Характеристика <> СтрокаИнформации.Характеристика) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаДанных.ВидУпаковки)
				И ЗначениеЗаполнено(СтрокаИнформации.ВидУпаковкиИС) Тогда
				Если РазборКодаМаркировкиИССлужебныйКлиентСервер.ВидУпаковкиСоответствуетРазбору(
					СтрокаДанных.ВидПродукции,
					СтрокаИнформации.ВидУпаковкиИС,
					СтрокаДанных.ДанныеРазбора) Тогда

					СтрокаДанных.ВидУпаковки = СтрокаИнформации.ВидУпаковкиИС;

				КонецЕсли;
			КонецЕсли;

			СтрокаДанных.Коэффициент                               = СтрокаИнформации.Коэффициент;
			СтрокаДанных.ПлановоеКоличествоПотребительскихУпаковок = СтрокаИнформации.ПлановоеКоличествоПотребительскихУпаковок;

			Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
				СтрокаДанных.ПлановоеКоличествоПотребительскихУпаковок = 1;
				Если СтрокаИнформации.ПроизвольнаяЕдиницаУчета Тогда
					СтрокаДанных.Коэффициент = СтрокаИнформации.Коэффициент;
				ИначеЕсли Не СтрокаИнформации.ПроизвольнаяЕдиницаУчета Тогда
					СтрокаДанных.Коэффициент = 1;
				КонецЕсли;
			КонецЕсли;

			Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет
				И ЗначениеЗаполнено(СтрокаИнформации.ВидУпаковкиИС) Тогда
				Если СтрокаДанных.ДополнительныеПараметры = Неопределено Тогда
					СтрокаДанных.ДополнительныеПараметры = Новый Структура;
				КонецЕсли;
				СтрокаДанных.ДополнительныеПараметры.Вставить("ВидУпаковкиПоGTIN", СтрокаИнформации.ВидУпаковкиИС);
			КонецЕсли;

			Если (СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
				Или СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет)
				И ЗначениеЗаполнено(СтрокаДанных.GTIN)
				И СтрокаДанных.СоставКодаМаркировки <> Неопределено
				И СтрокаДанных.СоставКодаМаркировки.Свойство("КоличествоВложенныхЕдиниц") Тогда
				КоличествоПотребительскихУпаковокGTIN02 = СтрокаДанных.СоставКодаМаркировки.КоличествоВложенныхЕдиниц;
				Если КоличествоПотребительскихУпаковокGTIN02 <> Неопределено Тогда

					ПлановоеКоличествоПотребительскихУпаковок = СтрокаИнформации.ПлановоеКоличествоПотребительскихУпаковок;
					Если ПлановоеКоличествоПотребительскихУпаковок = 0
						И GTINПотребительскихУпаковок[СтрокаДанных.GTIN] <> Неопределено Тогда
						ПлановоеКоличествоПотребительскихУпаковок = 1;
					КонецЕсли;

					СтрокаДанных.ПлановоеКоличествоПотребительскихУпаковок = ПлановоеКоличествоПотребительскихУпаковок * КоличествоПотребительскихУпаковокGTIN02;
					СтрокаДанных.Коэффициент                               = СтрокаИнформации.Коэффициент              * КоличествоПотребительскихУпаковокGTIN02;

				КонецЕсли;
			КонецЕсли;

			Если Не ЗначениеЗаполнено(СтрокаДанных.ВидУпаковки)
				И СтрокаДанных.ПлановоеКоличествоПотребительскихУпаковок > 1
				И ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ВозможнаГрупповаяУпаковкаИлиНабор(СтрокаДанных.ДанныеРазбора.ВидУпаковки, СтрокаДанных.ДанныеРазбора) Тогда
				СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая;
				СтрокаДанных.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
			КонецЕсли;

			Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
				СтрокаДанных.СтрокаДерева.ВидУпаковки                               = СтрокаДанных.ВидУпаковки;
				СтрокаДанных.СтрокаДерева.Коэффициент                               = СтрокаДанных.Коэффициент;
				СтрокаДанных.СтрокаДерева.ПлановоеКоличествоПотребительскихУпаковок = СтрокаДанных.ПлановоеКоличествоПотребительскихУпаковок;
			КонецЕсли;

			Если ЗначениеЗаполнено(СтрокаДанных.Номенклатура) Тогда
				СтрокаДанных.ТребуетсяСопоставление = Ложь;
			КонецЕсли;

		КонецЦикла;

	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеВложенныхШтрихкодовДереваУпаковок(ПараметрыСканирования, ДанныеПоШтрихкодам) Экспорт
	
	ЭтоПроверкаКодовМаркировкиИСМП = Ложь;
	Если ПараметрыСканирования.Свойство("ЭтоПроверкаКодовМаркировкиИСМП")
		И ПараметрыСканирования.ЭтоПроверкаКодовМаркировкиИСМП Тогда
		ЭтоПроверкаКодовМаркировкиИСМП = Истина;
	КонецЕсли;

	ЭтоОтчетПроизводственнойЛинии = Ложь;
	Если ПараметрыСканирования.Свойство("ЭтоОтчетПроизводственнойЛинии")
		И ПараметрыСканирования.ЭтоОтчетПроизводственнойЛинии Тогда
		ЭтоОтчетПроизводственнойЛинии = Истина;
	КонецЕсли;

	Если (ЭтоПроверкаКодовМаркировкиИСМП
		Или ЭтоОтчетПроизводственнойЛинии)
		И ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено
		И ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок <> Неопределено Тогда
		
		ПараметрыСозданияШтрихкодов = Справочники.ШтрихкодыУпаковокТоваров.ПараметрыСозданияШтриходовУпаковокПоДеревуМаркируемойПродукции(
			ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок, ПараметрыСканирования);
		ПараметрыСозданияШтрихкодов.ИмяКолонкиКоличествоПотребительскихУпаковок = "КоличествоПотребительскихУпаковок";
		Справочники.ШтрихкодыУпаковокТоваров.ЗаполнитьШтрихкодыУпаковокИКоличествоПоДеревуМаркируемойПродукции(
			ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок, ПараметрыСозданияШтрихкодов);
		
		Для Каждого ЭлементДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
			Если ЗначениеЗаполнено(ЭлементДанных.СтрокаДерева)
				И Не ЗначениеЗаполнено(ЭлементДанных.ШтрихкодУпаковки)
				И ЗначениеЗаполнено(ЭлементДанных.СтрокаДерева.ШтрихкодУпаковки) Тогда
				ЭлементДанных.ШтрихкодУпаковки = ЭлементДанных.СтрокаДерева.ШтрихкодУпаковки;
				ЭлементДанных.Количество       = ЭлементДанных.СтрокаДерева.Количество;
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьСохраненныйВыборДанныхПоМаркируемойПродукции(ПараметрыСканирования, Форма, ДанныеШтрихкода) Экспорт
	
	Если ШтрихкодированиеИСКлиентСервер.ТребуетсяСброситьСохраненныйВыбор(ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции, ДанныеШтрихкода) Тогда
		ШтрихкодированиеИСКлиентСервер.ОбработатьСохраненныйВыборДанныхПоМаркируемойПродукции(Форма, Неопределено, Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияПоШтриходамДаннымПулаGTIN(ДанныеПоШтрихкодам, ПараметрыСканирования, ДанныеКодовМаркировки = Неопределено) Экспорт
	
	Если ДанныеКодовМаркировки = Неопределено Тогда
		ДанныеКодовМаркировки = ДанныеПоШтрихкодам.ДанныеКодовМаркировки;
	КонецЕсли;
	
	Если ДанныеКодовМаркировки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ШтрихкодыEAN                             = Новый Массив;
	КодыМаркировкиДляПолученияСведенийИзПула = Новый Массив;
	
	ЕстьДопустимыеВидыПродукции   = Ложь;
	ДопустимаТабачнаяПродукция    = ШтрихкодированиеОбщегоНазначенияИС.ДопустимаТабачнаяПродукция(ПараметрыСканирования);
	ДопустимаПродукцияИСМП        = ШтрихкодированиеОбщегоНазначенияИС.ДопустимаПродукцияИСМП(ПараметрыСканирования);
	ДопустимаАлкогольнаяПродукция = ШтрихкодированиеОбщегоНазначенияИС.ДопустимаАлкогольнаяПродукция(ПараметрыСканирования);
	ЗапрашиватьДанныеСервисаИСМП  = Ложь;
	
	Если ДопустимаТабачнаяПродукция Или ДопустимаПродукцияИСМП Тогда
		ЕстьДопустимыеВидыПродукции = Истина;
		Если ТипЗнч(ДанныеКодовМаркировки) = Тип("Массив") Тогда
			ИсточникТаблицаКодовМаркировки = ДанныеКодовМаркировки[0].Владелец();
		Иначе
			ИсточникТаблицаКодовМаркировки = ДанныеКодовМаркировки;
		КонецЕсли;
		ЗапрашиватьДанныеСервисаИСМП = ОбщегоНазначенияИСМПКлиентСервер.ЗначениеПараметраСканированияЗапрашиватьДанныеСервисаИСМП(ПараметрыСканирования);
	КонецЕсли;
	
	Если ДопустимаТабачнаяПродукция Тогда
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеОбщегоНазначенияМОТП");
		МодульШтрихкодированиеМОТП.ДобавитьКолонкиТаблицыДанныеКодовМаркировки(
			ДанныеПоШтрихкодам, ПараметрыСканирования, ИсточникТаблицаКодовМаркировки);
	КонецЕсли;
	
	Если ДопустимаПродукцияИСМП Тогда
		МодульШтрихкодированиеИСМП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеОбщегоНазначенияИСМП");
		МодульШтрихкодированиеИСМП.ДобавитьКолонкиТаблицыДанныеКодовМаркировки(
			ДанныеПоШтрихкодам, ПараметрыСканирования, ИсточникТаблицаКодовМаркировки);
	КонецЕсли;

	Если ДопустимаАлкогольнаяПродукция Тогда
		МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
		МодульШтрихкодированиеЕГАИС.ДобавитьКолонкиТаблицыДанныеКодовМаркировки(
			ДанныеПоШтрихкодам, ПараметрыСканирования, ИсточникТаблицаКодовМаркировки);
	КонецЕсли;

	УникальныеШтрихкодыEAN = Новый Соответствие;
	GTINПотребительскихУпаковок = Новый Соответствие;
	
	ПараметрыНормализацииКМ = РазборКодаМаркировкиИССлужебныйКлиентСервер.НастройкиРазбораКодаМаркировкиДляСохраненияВПул();
	НормализованныеКодыМаркировкиДляПолученияСведенийИзПула = Новый Соответствие;
	
	Для Каждого СтрокаДанных Из ДанныеКодовМаркировки Цикл
		
		Если ЕстьДопустимыеВидыПродукции
			И ШтрихкодированиеОбщегоНазначенияИС.ПрисутствуетПродукцияИСМП(СтрокаДанных.ВидыПродукцииКодаМаркировки) Тогда
			КодыМаркировкиДляПолученияСведенийИзПула.Добавить(СтрокаДанных.Штрихкод);
			НормализованныеКодыМаркировкиДляПолученияСведенийИзПула.Вставить(СтрокаДанных.Штрихкод, СтрокаДанных.Штрихкод);
		ИначеЕсли ЕстьДопустимыеВидыПродукции
			И ШтрихкодированиеОбщегоНазначенияИС.ПрисутствуетТабачнаяПродукция(СтрокаДанных.ВидыПродукцииКодаМаркировки) Тогда
			Если СтрокаДанных.СоставКодаМаркировки <> Неопределено
				И СтрокаДанных.СоставКодаМаркировки.Свойство("ВключаетМРЦ")
				И СтрокаДанных.СоставКодаМаркировки.ВключаетМРЦ Тогда
				
				НормализованныйКод = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
					СтрокаДанных.ДанныеРазбора,
					СтрокаДанных.ВидПродукции,
					ПараметрыНормализацииКМ);
				
				КодыМаркировкиДляПолученияСведенийИзПула.Добавить(НормализованныйКод);
				НормализованныеКодыМаркировкиДляПолученияСведенийИзПула.Вставить(СтрокаДанных.Штрихкод, НормализованныйКод);

			Иначе

				КодыМаркировкиДляПолученияСведенийИзПула.Добавить(СтрокаДанных.Штрихкод);
				НормализованныеКодыМаркировкиДляПолученияСведенийИзПула.Вставить(СтрокаДанных.Штрихкод, СтрокаДанных.Штрихкод);

			КонецЕсли;

		КонецЕсли;
		
		Если СтрокаДанных.ЭтоКодВводаОстатков И Не ПараметрыСканирования.РежимБРМК Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаДанных.GTIN)
			И (СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
				Или СтрокаДанных.ВидыПродукцииКодаМаркировки.Найти(Перечисления.ВидыПродукцииИС.Алкогольная) <> Неопределено
				Или СтрокаДанных.ВидыПродукцииКодаМаркировки.Найти(Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха) <> Неопределено) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаДанных.Номенклатура) Тогда
			СтрокаДанных.ТребуетсяСопоставление = Истина;
		КонецЕсли;
		
		Если ПустаяСтрока(СтрокаДанных.EAN) И ПустаяСтрока(СтрокаДанных.GTIN) Тогда
			ШтрихкодДляПоиска = СтрокаДанных.Штрихкод;
		Иначе
			Если ЗначениеЗаполнено(СтрокаДанных.GTIN) Тогда
				СтрокаДанных.EAN = РазборКодаМаркировкиИССлужебныйКлиентСерверПовтИсп.ШтрихкодEANИзGTIN(СтрокаДанных.GTIN);
			КонецЕсли;
			ШтрихкодДляПоиска = СтрокаДанных.EAN;
		КонецЕсли;
		
		Если УникальныеШтрихкодыEAN[ШтрихкодДляПоиска] = Неопределено Тогда
			ШтрихкодыEAN.Добавить(ШтрихкодДляПоиска);
			УникальныеШтрихкодыEAN.Вставить(ШтрихкодДляПоиска, Истина);
		КонецЕсли;
		
		Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
			И ЗначениеЗаполнено(СтрокаДанных.GTIN)
			И GTINПотребительскихУпаковок[СтрокаДанных.GTIN] = Неопределено Тогда
			GTINПотребительскихУпаковок.Вставить(СтрокаДанных.GTIN, Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	Если КодыМаркировкиДляПолученияСведенийИзПула.Количество() Тогда
		ДанныеПулаПоКодамМаркировки = РегистрыСведений["ПулКодовМаркировкиСУЗ"].ДанныеКодовМаркировки(КодыМаркировкиДляПолученияСведенийИзПула);
	КонецЕсли;
	
	ИнформацияПоШтрихкодамEAN = ШтрихкодированиеОбщегоНазначенияИС.ДанныеПоШтрихкодамEAN(ШтрихкодыEAN, ПараметрыСканирования, GTINПотребительскихУпаковок);
	
	ДанныеДокументаОснования = Неопределено;
	Если ПараметрыСканирования.КонтрольРасхожденийСДокументомОснованием
		И ЗначениеЗаполнено(ПараметрыСканирования.ДокументОснование) Тогда
		ДанныеДокументаОснования = ДанныеДокументаОснования(ПараметрыСканирования);
	КонецЕсли;
	
	ШаблоныГрупповыхУпаковок = Новый Соответствие;
	ШаблоныНаборов = Новый Соответствие;
	ШаблоныГрупповыхУпаковокИНаборов = Новый Соответствие;
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
		МодульИнтеграцияИСМПКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияИСМПКлиентСервер");
		Для Каждого Шаблон Из МодульИнтеграцияИСМПКлиентСервер.ШаблоныГрупповыхУпаковок() Цикл
			ШаблоныГрупповыхУпаковокИНаборов.Вставить(Шаблон, Перечисления.ВидыУпаковокИС.Групповая);
			ШаблоныГрупповыхУпаковок.Вставить(Шаблон, Перечисления.ВидыУпаковокИС.Групповая);
		КонецЦикла;
		Для Каждого Шаблон Из МодульИнтеграцияИСМПКлиентСервер.ШаблоныНаборов() Цикл
			ШаблоныГрупповыхУпаковокИНаборов.Вставить(Шаблон, Перечисления.ВидыУпаковокИС.Набор);
			ШаблоныНаборов.Вставить(Шаблон, Перечисления.ВидыУпаковокИС.Набор);
		КонецЦикла;
	КонецЕсли;
	
	КэшДанныеОрганизаций = Новый Соответствие();
	КешТоварныхГрупп     = ТоварныеГруппыВидовПродукции();
	ОбщиеМодули          = Неопределено;

	Для Каждого СтрокаДанных Из ДанныеКодовМаркировки Цикл
		
		ДанныеПулаПоКоду = Неопределено;
		Если ДанныеПулаПоКодамМаркировки <> Неопределено Тогда
			ДанныеПулаПоКоду = ДанныеПулаПоКодамМаркировки.Найти(
				НормализованныеКодыМаркировкиДляПолученияСведенийИзПула[СтрокаДанных.Штрихкод], "КодМаркировки");
		КонецЕсли;
		
		КодМаркировкиЗаполненПоПулу = Ложь;
		
		Если ДанныеПулаПоКоду <> Неопределено Тогда
			
			СтрокаДанных.ЕстьВПулеКодовМаркировки = Истина;
			СтрокаДанных.ПолныйКодМаркировки      = ДанныеПулаПоКоду.ПолныйКодМаркировки;
			
			Если Не ДанныеПулаПоКоду.СохраненоПриСканировании Тогда
				СтрокаДанных.ЭтоКодВводаОстатков = ДанныеПулаПоКоду.МаркировкаОстатков;
			КонецЕсли;
			
			Если СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха
				И Не ЗначениеЗаполнено(СтрокаДанных.ПредставлениеНоменклатуры) Тогда
				СтрокаДанных.ПредставлениеНоменклатуры = РегистрыСведений.ПулКодовМаркировкиСУЗ.ПредставлениеКИЗ(ДанныеПулаПоКоду);
			КонецЕсли;
			
			// Оптимизация. Заполнение способа ввода в оборот из Пула кодов маркировки
			Если Не ДанныеПулаПоКоду.СохраненоПриСканировании Тогда
				
				Если ЗначениеЗаполнено(ДанныеПулаПоКоду.СпособВводаВОборот)
					И Не ЗначениеЗаполнено(СтрокаДанных.СпособВводаВОборот) Тогда
					
					СтрокаДанных.СпособВводаВОборот = ДанныеПулаПоКоду.СпособВводаВОборот;
					Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
						СтрокаДанных.СтрокаДерева.СпособВводаВОборот = СтрокаДанных.СпособВводаВОборот;
					КонецЕсли;
					
				КонецЕсли;
				
				Если ПараметрыСканирования.ЭтоПечатьКодаМаркировкиИзПулаИСМП Тогда
				
					Организация = ДанныеПулаПоКоду.Организация;
					
					СведенияОбОрганизации = КэшДанныеОрганизаций.Получить(Организация);
					
					Если СведенияОбОрганизации = Неопределено
						И ДанныеПоШтрихкодам.СведенияОбОрганизациях <> Неопределено Тогда
						СведенияОбОрганизации = ДанныеПоШтрихкодам.СведенияОбОрганизациях[Организация];
						КэшДанныеОрганизаций.Вставить(Организация, СведенияОбОрганизации);
					КонецЕсли;
					
					Если СведенияОбОрганизации = Неопределено Тогда
						СведенияОбОрганизации = РаботаСКонтрагентамиИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(Организация);
						КэшДанныеОрганизаций.Вставить(Организация, СведенияОбОрганизации);
					КонецЕсли;
					
					Если СведенияОбОрганизации <> Неопределено Тогда
						СтрокаДанных.ИННВладельца = СведенияОбОрганизации.ИНН;
						СтрокаДанных.Владелец     = Организация;
					КонецЕсли;
					
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(СтрокаДанных.ВидУпаковки) Тогда
					
					Если СтрокаДанных.ВидПродукции <> ДанныеПулаПоКоду.ВидПродукции Тогда
						ШтрихкодированиеОбщегоНазначенияИС.УточнитьДанныеРазбораПоВидуПродукции(СтрокаДанных, ДанныеПулаПоКоду.ВидПродукции, ПараметрыСканирования, ОбщиеМодули);
					КонецЕсли;
					
					ПоляЗаполнения = Новый Структура("ВидУпаковки, ТипУпаковки");
					Если Не ВидыПродукцииПринадлежатТоварнойГруппе(
						СтрокаДанных.ВидПродукции,
						ДанныеПулаПоКоду.ВидПродукции,
						КешТоварныхГрупп) Тогда
						ПоляЗаполнения.Вставить("ВидПродукции", ДанныеПулаПоКоду.ВидПродукции);
					КонецЕсли;
					
					ВидУпаковкиПоШаблону = ШаблоныГрупповыхУпаковокИНаборов[ДанныеПулаПоКоду.Шаблон];
					Если ВидУпаковкиПоШаблону = Перечисления.ВидыУпаковокИС.Групповая Тогда
						ПоляЗаполнения.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая;
						ПоляЗаполнения.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
					ИначеЕсли ВидУпаковкиПоШаблону = Перечисления.ВидыУпаковокИС.Набор Тогда
						ПоляЗаполнения.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор;
						ПоляЗаполнения.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка;
					Иначе
						ПоляЗаполнения.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская;
						ПоляЗаполнения.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
					КонецЕсли;
					
					ЗаполнитьЗначенияСвойств(СтрокаДанных, ПоляЗаполнения);
					
					Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
						ЗаполнитьЗначенияСвойств(СтрокаДанных.СтрокаДерева, ПоляЗаполнения);
					КонецЕсли;
					
				КонецЕсли;
			
				Если Не СтрокаДанных.НоменклатураСопоставленаПоУПД
					И ЗначениеЗаполнено(ДанныеПулаПоКоду.Номенклатура) Тогда
					
					СтрокаДанных.Номенклатура   = ДанныеПулаПоКоду.Номенклатура;
					СтрокаДанных.Характеристика = ДанныеПулаПоКоду.Характеристика;
					СтрокаДанных.ВидПродукции   = ДанныеПулаПоКоду.ВидПродукции;
					
					СтрокаДанных.ПроизвольнаяЕдиницаУчета = ДанныеПулаПоКоду.ПроизвольнаяЕдиницаУчета;
					СтрокаДанных.ТребуетВзвешивания       = ДанныеПулаПоКоду.ТребуетВзвешивания;
					
					Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
						СтрокаДанных.СтрокаДерева.Номенклатура   = СтрокаДанных.Номенклатура;
						СтрокаДанных.СтрокаДерева.Характеристика = СтрокаДанных.Характеристика;
						СтрокаДанных.СтрокаДерева.ВидПродукции   = СтрокаДанных.ВидПродукции;
					КонецЕсли;
					
					СтрокаДанных.ТребуетсяСопоставление = Ложь;
					КодМаркировкиЗаполненПоПулу = Истина;
				ИначеЕсли СтрокаДанных.ЭтоКодВводаОстатков Тогда
					СтрокаДанных.ТребуетсяСопоставление = Ложь;
					КодМаркировкиЗаполненПоПулу = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТребуетсяСопоставление = Не ЗначениеЗаполнено(СтрокаДанных.Номенклатура)
			Или СтрокаДанных.ТребуетсяСопоставление;
		
		ЗначениеПоиска = ?(ЗначениеЗаполнено(СтрокаДанных.EAN), СтрокаДанных.EAN, СтрокаДанных.Штрихкод);
		
		Если ЗначениеЗаполнено(СтрокаДанных.EAN) Тогда
			EAN  = СтрокаДанных.EAN;
			GTIN = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.GTINПоШтрихкодуEAN(EAN);
		Иначе
			EAN  = "";
			GTIN = "";
			Если РазборКодаМаркировкиИССлужебныйКлиентСерверПовтИсп.ЭтоGTIN(ЗначениеПоиска) Тогда
				EAN = РазборКодаМаркировкиИССлужебныйКлиентСерверПовтИсп.ШтрихкодEANИзGTIN(ЗначениеПоиска);
				Если ЗначениеЗаполнено(EAN) Тогда
					GTIN = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.GTINПоШтрихкодуEAN(EAN);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		UPC = Неопределено;
		Если Лев(EAN, 1) = "0"
			И СтрДлина(EAN) = 13 Тогда
			UPC = Сред(EAN, 2);
		КонецЕсли;
		
		ЭтоШтрихкодНоменклатуры = Ложь;
		Если СтрокаДанных.Штрихкод = ЗначениеПоиска
			Или СтрокаДанных.Штрихкод = EAN
			Или СтрокаДанных.Штрихкод = ("00000" + EAN) // Считан код EAN8 в формате EAN13
			Или СтрокаДанных.Штрихкод = GTIN
			Или СтрокаДанных.Штрихкод = UPC Тогда
			ЭтоШтрихкодНоменклатуры = Истина;
		КонецЕсли;
		
		РезультатПоискаУникален                = Неопределено;
		ВидПродукцииУникален                   = Неопределено;
		ПодменныеНоменклатурыЧастичногоВыбытие = Новый ТаблицаЗначений();
		ПодменныеНоменклатурыЧастичногоВыбытие.Колонки.Добавить("Номенклатура",                   Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
		ПодменныеНоменклатурыЧастичногоВыбытие.Колонки.Добавить("Характеристика",                 Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
		ПодменныеНоменклатурыЧастичногоВыбытие.Колонки.Добавить("ЧастичноеВыбытиеНоменклатура",   Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
		ПодменныеНоменклатурыЧастичногоВыбытие.Колонки.Добавить("ЧастичноеВыбытиеХарактеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
		ПодменныеНоменклатурыЧастичногоВыбытие.Индексы.Добавить("Номенклатура,Характеристика");
		
		НайденныеШтрихкодыEAN = ИнформацияПоШтрихкодамEAN.НайтиСтроки(Новый Структура("ШтрихкодEAN", ЗначениеПоиска));
		ВариантовВыбора = НайденныеШтрихкодыEAN.Количество();
		
		Для Каждого СтрокаИнформации Из НайденныеШтрихкодыEAN Цикл
			
			// Штрихкоды не требующие обработки библиотекой
			Если СтрокаИнформации.ТребуетсяОбработкаШтрихкода Тогда
				СтрокаДанных.ТребуетсяОбработкаШтрихкода = Истина;
				СтрокаДанных.ДополнительныеПараметры = СтрокаИнформации.ДанныеШтрихкода;
				Прервать;
			// Внешние по отношению к ГосИС данные штрихкодов (все)
			ИначеЕсли ЗначениеЗаполнено(СтрокаИнформации.ДанныеШтрихкода) Тогда
				СтрокаДанных.ВнешниеДанныеПоШтрихкодам.Добавить(СтрокаИнформации.ДанныеШтрихкода);
			КонецЕсли;
			
			Если ТребуетсяСопоставление Тогда
				ВариантовВыбора = ВариантовВыбора - 1;
				Если Не СтрокаДанных.НоменклатураСопоставленаПоУПД Тогда
					// Если вариантов выбора несколько - отфильтруем подходящие. Если не подходят все - оставим 1 для вывода ошибки
					Если Не (РезультатПоискаУникален = Неопределено И ВариантовВыбора = 0) Тогда
						// Маркируемая продукция
						Если ПараметрыСканирования.ТолькоМаркируемаяПродукция
								И Не СтрокаИнформации.МаркируемаяПродукция Тогда
							Продолжить;
						// Соответствие документу-основанию
						ИначеЕсли ДанныеДокументаОснования <> Неопределено
							И ДанныеДокументаОснования.НайтиСтроки(
								Новый Структура(
									"Номенклатура,Характеристика",
									СтрокаИнформации.Номенклатура, СтрокаИнформации.Характеристика)).Количество() = 0 Тогда
							Продолжить;
						// Соответствие пулу
						ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаДанных, "ЕстьВПулеКодовМаркировки")
							И СтрокаДанных.ЕстьВПулеКодовМаркировки
								И ЗначениеЗаполнено(СтрокаДанных.Номенклатура)
								И (РезультатПоискаУникален = Истина
									Или СтрокаИнформации.Номенклатура <> СтрокаДанных.Номенклатура
									Или СтрокаИнформации.Характеристика <> СтрокаДанных.Характеристика) Тогда
							Продолжить;
						ИначеЕсли Не СтрокаДанных.ЭтоШтрихкодНоменклатуры
								И Не ЭтоШтрихкодНоменклатуры
								И ОбщегоНазначенияИСКлиентСервер.ВидыПродукцииИСМП(Истина).Найти(СтрокаИнформации.ВидПродукции) = Неопределено Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли СтрокаИнформации.Номенклатура <> СтрокаДанных.Номенклатура
					Или СтрокаИнформации.Характеристика <> СтрокаДанных.Характеристика Тогда
					Продолжить;
				КонецЕсли;
				
				Если РезультатПоискаУникален = Неопределено Тогда
					РезультатПоискаУникален = Истина;
				ИначеЕсли РезультатПоискаУникален = Истина Тогда
					РезультатПоискаУникален = СтрокаДанных.Номенклатура = СтрокаИнформации.Номенклатура
						И СтрокаДанных.Характеристика = СтрокаИнформации.Характеристика
						И СтрокаДанных.Серия = СтрокаИнформации.Серия;
				КонецЕсли;
				
				Если ВидПродукцииУникален = Неопределено Тогда
					ВидПродукцииУникален = Истина;
				ИначеЕсли ВидПродукцииУникален = Истина Тогда
					ВидПродукцииУникален = СтрокаДанных.ВидПродукции = СтрокаИнформации.ВидПродукции;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаИнформации.ВидУпаковкиИС) Тогда
				Если Не ЗапрашиватьДанныеСервисаИСМП И СтрокаДанных.НоменклатураСопоставленаПоУПД
					Или Не ЗначениеЗаполнено(СтрокаДанных.ВидУпаковки) Тогда
					Если РазборКодаМаркировкиИССлужебныйКлиентСервер.ВидУпаковкиСоответствуетРазбору(
						СтрокаДанных.ВидПродукции, СтрокаИнформации.ВидУпаковкиИС, СтрокаДанных.ДанныеРазбора) Тогда
						СтрокаДанных.ВидУпаковки = СтрокаИнформации.ВидУпаковкиИС;
						Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
							СтрокаДанных.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
						Иначе 
							СтрокаДанных.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				// Флаг взводится, если вид упаковки определен по данным ЭДО
				СтрокаДанных.ТребуетсяУказаниеПлановогоКоличестваПотребительскихУпаковокПоGTIN = Ложь;
			КонецЕсли;
			
			Если КодМаркировкиЗаполненПоПулу Тогда
				
				//@skip-check query-in-loop
				Если ШтрихкодированиеОбщегоНазначенияИС.ТребуетсяЧастичноеВыбытие(ПараметрыСканирования, ДанныеПоШтрихкодам) Тогда
					ЗаполнитьЗначенияСвойств(СтрокаДанных, СтрокаИнформации, "ЧастичноеВыбытиеВариантУчета,ЕмкостьПотребительскойУпаковки");
				ИначеЕсли ПараметрыСканирования <> Неопределено
					И ПараметрыСканирования.Свойство("ВидОперацииИСМП")
					И ПараметрыСканирования.ВидОперацииИСМП = Перечисления["ВидыОперацийИСМП"]["ВскрытиеПотребительскойУпаковки"]
					И ЗначениеЗаполнено(СтрокаИнформации.ЧастичноеВыбытиеВариантУчета) Тогда
					ЗаполнитьЗначенияСвойств(СтрокаДанных, СтрокаИнформации, "ЧастичноеВыбытиеВариантУчета");
				КонецЕсли;
				// В данных пула отсутствуют сведения об упаковке
				Если СтрокаДанных.Номенклатура = СтрокаИнформации.Номенклатура Тогда
					СтрокаДанных.Упаковка = СтрокаИнформации.Упаковка;
					Если Не ЗначениеЗаполнено(СтрокаДанных.ПредставлениеНоменклатуры) Тогда
						СтрокаДанных.ПредставлениеНоменклатуры = СтрокаИнформации.ПредставлениеНоменклатуры;
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли Не СтрокаДанных.НоменклатураСопоставленаПоУПД
				Или (СтрокаДанных.Номенклатура = СтрокаИнформации.Номенклатура
					И СтрокаДанных.Характеристика = СтрокаИнформации.Характеристика) Тогда
				
				Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет
					И СтрокаДанных.ОбработатьБезМаркировки Тогда
					// Количество будет заполнено пользователем в форме уточнения данных
					ЗаполнитьЗначенияСвойств(СтрокаДанных, СтрокаИнформации,, "Количество, ВидПродукции, ПлановоеКоличествоПотребительскихУпаковок, Коэффициент");
				Иначе
					ЗаполнитьЗначенияСвойств(СтрокаДанных, СтрокаИнформации,, "Количество, ВидПродукции");
				КонецЕсли;
				
				УточнитьПоДаннымРазбора = Ложь;
				
				Если СтрокаДанных.ВидПродукции <> СтрокаИнформации.ВидПродукции Тогда
					
					УточнитьПоДаннымРазбора   = ЗначениеЗаполнено(СтрокаИнформации.ВидПродукции);
					СтрокаДанных.ВидПродукции = СтрокаИнформации.ВидПродукции;
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаДанных.ВидПродукции) Тогда
					
					Если УточнитьПоДаннымРазбора Тогда
						ШтрихкодированиеОбщегоНазначенияИС.УточнитьДанныеРазбораПоВидуПродукции(СтрокаДанных, СтрокаДанных.ВидПродукции, ПараметрыСканирования);
					КонецЕсли;
					
					Если СтрокаДанных.ДанныеРазбора <> Неопределено
						И ЗначениеЗаполнено(СтрокаИнформации.ВидУпаковкиИС)
						И Не ЗначениеЗаполнено(СтрокаДанных.ВидУпаковки)
						И РазборКодаМаркировкиИССлужебныйКлиентСервер.ВидУпаковкиСоответствуетРазбору(
							СтрокаДанных.ВидПродукции, СтрокаИнформации.ВидУпаковкиИС, СтрокаДанных.ДанныеРазбора) Тогда
						
						СтрокаДанных.ВидУпаковки = СтрокаИнформации.ВидУпаковкиИС;
						Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
							СтрокаДанных.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
						Иначе
							СтрокаДанных.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
						КонецЕсли;

					КонецЕсли;
					
				КонецЕсли;
				
				Если СтрокаИнформации.Весовой Тогда
					СтрокаДанных.Количество = СтрокаИнформации.Количество;
				ИначеЕсли СтрокаИнформации.ТребуетВзвешивания Тогда
					СтрокаДанных.Количество = 0;
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрокаДанных.EAN = "" Тогда
				СтрокаДанных.EAN = EAN;
			КонецЕсли;
			
			Если ЭтоШтрихкодНоменклатуры Тогда
				
				СтрокаДанных.ЭтоШтрихкодНоменклатуры = Истина;
				СтрокаДанных.Идентифицирован         = Истина;
				
				Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет
					И СтрокаДанных.ОбработатьБезМаркировки Тогда
					// Вид продукции определен по команде Добавить без кода маркировки в форме проверки и подбора
				Иначе
					ТипШтрихкодаСтрока = МенеджерОборудованияКлиентСервер.ОпределитьТипШтрихкода(СтрокаДанных.Штрихкод);
					СтрокаДанных.ТипШтрихкода = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ТипШтрихкодаПоСтроке(ТипШтрихкодаСтрока);
					СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская;
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет Тогда
				СтрокаДанных.Идентифицирован = Истина;
			КонецЕсли;
			
			Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
				СтрокаДанных.ПлановоеКоличествоПотребительскихУпаковок = 1;
				Если СтрокаИнформации.ПроизвольнаяЕдиницаУчета Тогда
					СтрокаДанных.Коэффициент = СтрокаИнформации.Коэффициент;
				ИначеЕсли Не СтрокаИнформации.ПроизвольнаяЕдиницаУчета Тогда
					СтрокаДанных.Коэффициент = 1;
				КонецЕсли;
				СтрокаДанных.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
			КонецЕсли;
			
			Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет
				И ЗначениеЗаполнено(СтрокаИнформации.ВидУпаковкиИС) Тогда
				Если СтрокаДанных.ДополнительныеПараметры = Неопределено Тогда
					СтрокаДанных.ДополнительныеПараметры = Новый Структура;
				КонецЕсли;
				СтрокаДанных.ДополнительныеПараметры.Вставить("ВидУпаковкиПоGTIN", СтрокаИнформации.ВидУпаковкиИС);
			КонецЕсли;
			
			Если (СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
				Или СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет)
				И ЗначениеЗаполнено(СтрокаДанных.GTIN)
				И СтрокаДанных.СоставКодаМаркировки <> Неопределено
				И СтрокаДанных.СоставКодаМаркировки.Свойство("КоличествоВложенныхЕдиниц") Тогда
				КоличествоПотребительскихУпаковокGTIN02 = СтрокаДанных.СоставКодаМаркировки.КоличествоВложенныхЕдиниц;
				Если КоличествоПотребительскихУпаковокGTIN02 <> Неопределено Тогда
					
					ПлановоеКоличествоПотребительскихУпаковок = СтрокаИнформации.ПлановоеКоличествоПотребительскихУпаковок;
					Если ПлановоеКоличествоПотребительскихУпаковок = 0 
						И GTINПотребительскихУпаковок[СтрокаДанных.GTIN] <> Неопределено Тогда
						ПлановоеКоличествоПотребительскихУпаковок = 1;
					КонецЕсли;
					
					СтрокаДанных.ПлановоеКоличествоПотребительскихУпаковок = ПлановоеКоличествоПотребительскихУпаковок * КоличествоПотребительскихУпаковокGTIN02;
					СтрокаДанных.Коэффициент                               = СтрокаИнформации.Коэффициент              * КоличествоПотребительскихУпаковокGTIN02;
					
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаДанных.ТребуетВзвешивания
				И СтрокаДанных.СоставКодаМаркировки <> Неопределено
				И СтрокаДанных.СоставКодаМаркировки.Свойство("МассаНеттоВКг")
				И СтрокаДанных.СоставКодаМаркировки.МассаНеттоВКг <> Неопределено Тогда
				СтрокаДанных.Количество = СтрокаДанных.СоставКодаМаркировки.МассаНеттоВКг;
			КонецЕсли;
			
			Если Не СтрокаДанных.ЭтоШтрихкодНоменклатуры
				И Не СтрокаДанных.ТребуетВзвешивания
				И ЗначениеЗаполнено(СтрокаДанных.Коэффициент) Тогда
				СтрокаДанных.Количество = СтрокаДанных.Коэффициент;
			КонецЕсли;
			
			СтрокаДанных.КоличествоПотребительскихУпаковок = СтрокаДанных.ПлановоеКоличествоПотребительскихУпаковок;
			
			Если (СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
				Или СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет)
				И ЗначениеЗаполнено(СтрокаДанных.GTIN)
				И Не ЗначениеЗаполнено(СтрокаДанных.ТипУпаковки) Тогда
				СтрокаДанных.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
			КонецЕсли;
			
			СтрокаДанных.ТребуетсяСопоставление = Ложь;
			
			Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтрокаДанных.СтрокаДерева, СтрокаИнформации);
				СтрокаДанных.СтрокаДерева.Коэффициент = СтрокаДанных.Коэффициент;
			КонецЕсли;
			
			Если Не КодМаркировкиЗаполненПоПулу И ТребуетсяСопоставление Тогда

				ДанныеУточнения = Новый Структура();
				ДанныеУточнения.Вставить("Номенклатура");
				ДанныеУточнения.Вставить("Характеристика");
				ДанныеУточнения.Вставить("Серия");
				ДанныеУточнения.Вставить("Упаковка");
				ДанныеУточнения.Вставить("ПредставлениеНоменклатуры");

				ЗаполнитьЗначенияСвойств(ДанныеУточнения, СтрокаИнформации);
				СтрокаДанных.СписокНоменклатуры.Добавить(ДанныеУточнения);

				//@skip-check query-in-loop
				Если ШтрихкодированиеОбщегоНазначенияИС.ТребуетсяЧастичноеВыбытие(ПараметрыСканирования, ДанныеПоШтрихкодам)
					И СтрокаДанных.ЧастичноеВыбытиеВариантУчета = Перечисления.ВариантыУчетаЧастичногоВыбытияИС.НастроеннаяНоменклатура Тогда
					СтруктураПоиска = Новый Структура("ЧастичноеВыбытиеНоменклатура, ЧастичноеВыбытиеХарактеристика");
					ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаДанных);
					Если ПодменныеНоменклатурыЧастичногоВыбытие.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
						НоваяСтрока = ПодменныеНоменклатурыЧастичногоВыбытие.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПодменныеНоменклатурыЧастичногоВыбытие.Количество() Тогда
			
			УдаляемыеЭлементыСпискаНоменклатуры = Новый Массив;
			Для Каждого ЭлементСписка Из СтрокаДанных.СписокНоменклатуры Цикл
				СтруктураПоиска = Новый Структура("ЧастичноеВыбытиеНоменклатура, ЧастичноеВыбытиеХарактеристика");
				СтруктураПоиска.ЧастичноеВыбытиеНоменклатура   = ЭлементСписка.Номенклатура;
				СтруктураПоиска.ЧастичноеВыбытиеХарактеристика = ЭлементСписка.Характеристика;
				СтрокиПодменнойНоменклатуры = ПодменныеНоменклатурыЧастичногоВыбытие.НайтиСтроки(СтруктураПоиска);
				Если СтрокиПодменнойНоменклатуры.Количество() > 0 Тогда
					УдаляемыеЭлементыСпискаНоменклатуры.Добавить(ЭлементСписка);
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементыСпискаНоменклатуры Цикл
				СтрокаДанных.СписокНоменклатуры.Удалить(СтрокаДанных.СписокНоменклатуры.Найти(УдаляемыйЭлемент));
			КонецЦикла;
			Если РезультатПоискаУникален = Ложь И СтрокаДанных.СписокНоменклатуры.Количество() <= 1 Тогда
				РезультатПоискаУникален = Истина;
			КонецЕсли;
			
			СтруктураПоиска = Новый Структура("ЧастичноеВыбытиеНоменклатура, ЧастичноеВыбытиеХарактеристика");
			СтруктураПоиска.ЧастичноеВыбытиеНоменклатура   = СтрокаДанных.Номенклатура;
			СтруктураПоиска.ЧастичноеВыбытиеХарактеристика = СтрокаДанных.Характеристика;
			СтрокиПодменнойНоменклатуры = ПодменныеНоменклатурыЧастичногоВыбытие.НайтиСтроки(СтруктураПоиска);
			Если СтрокиПодменнойНоменклатуры.Количество() > 0 Тогда
				ЗаполнитьЗначенияСвойств(СтрокаДанных, СтрокиПодменнойНоменклатуры[0]);
				СтрокаДанных.ЧастичноеВыбытиеВариантУчета = Перечисления.ВариантыУчетаЧастичногоВыбытияИС.НастроеннаяНоменклатура;
			КонецЕсли;

		КонецЕсли;
		
		Если Не КодМаркировкиЗаполненПоПулу И РезультатПоискаУникален = Ложь Тогда
			
			СтрокаДанных.Номенклатура   = Неопределено;
			СтрокаДанных.Характеристика = Неопределено;
			СтрокаДанных.Серия          = Неопределено;
			СтрокаДанных.Упаковка       = Неопределено;
			
			ИменаКолонокЗаполнения = "Номенклатура, Характеристика, Серия, Упаковка";
			//@skip-check query-in-loop
			Если ШтрихкодированиеОбщегоНазначенияИС.ТребуетсяЧастичноеВыбытие(ПараметрыСканирования, ДанныеПоШтрихкодам) Тогда
				СтрокаДанных.ЧастичноеВыбытиеВариантУчета   = Неопределено;
				СтрокаДанных.ЕмкостьПотребительскойУпаковки = Неопределено;
				СтрокаДанных.ЧастичноеВыбытиеНоменклатура   = Неопределено;
				СтрокаДанных.ЧастичноеВыбытиеХарактеристика = Неопределено;
				ИменаКолонокЗаполнения = ИменаКолонокЗаполнения + ", ЧастичноеВыбытиеВариантУчета, ЕмкостьПотребительскойУпаковки, ЧастичноеВыбытиеНоменклатура, ЧастичноеВыбытиеХарактеристика";
			КонецЕсли;
			
			Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтрокаДанных.СтрокаДерева, СтрокаДанных, ИменаКолонокЗаполнения);
			КонецЕсли;
			
			СтрокаДанных.ПредставлениеНоменклатуры = СтрШаблон(
				НСтр("ru = '%1 ( + еще %2 )'"),
				Лев(СтрокаДанных.СписокНоменклатуры[0].ПредставлениеНоменклатуры, 20),
				СтрокаДанных.СписокНоменклатуры.Количество() - 1);
			
		Иначе
			СтрокаДанных.СписокНоменклатуры.Очистить();
		КонецЕсли;
		
		Если Не КодМаркировкиЗаполненПоПулу И ВидПродукцииУникален = Ложь Тогда
			
			СтрокаДанных.ВидПродукции = Неопределено;
			
			Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтрокаДанных.СтрокаДерева, СтрокаДанных, "ВидПродукции");
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДанныеПулаПоКоду <> Неопределено
			И Не ДанныеПулаПоКоду.СохраненоПриСканировании Тогда
			
			Если Не ЗначениеЗаполнено(СтрокаДанных.ВидУпаковки) Тогда
				
				Если ШаблоныГрупповыхУпаковок[ДанныеПулаПоКоду.Шаблон] <> Неопределено Тогда
					СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая;
					СтрокаДанных.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
				ИначеЕсли ШаблоныНаборов[ДанныеПулаПоКоду.Шаблон] <> Неопределено Тогда
					СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор;
					СтрокаДанных.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка;
				Иначе
					СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская;
					СтрокаДанных.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
				КонецЕсли;
				
				Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(СтрокаДанных.СтрокаДерева, СтрокаДанных, "ВидУпаковки, ТипУпаковки");
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаДанных.Номенклатура)
				И ЗначениеЗаполнено(ДанныеПулаПоКоду.Номенклатура) Тогда
				
				Если СтрокаДанных.ВидПродукции <> ДанныеПулаПоКоду.ВидПродукции Тогда
					ШтрихкодированиеОбщегоНазначенияИС.УточнитьДанныеРазбораПоВидуПродукции(СтрокаДанных, ДанныеПулаПоКоду.ВидПродукции, ПараметрыСканирования);
				КонецЕсли;
				
				СтрокаДанных.Номенклатура   = ДанныеПулаПоКоду.Номенклатура;
				СтрокаДанных.Характеристика = ДанныеПулаПоКоду.Характеристика;
				СтрокаДанных.ВидПродукции   = ДанныеПулаПоКоду.ВидПродукции;
				
				Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
					СтрокаДанных.СтрокаДерева.Номенклатура   = СтрокаДанных.Номенклатура;
					СтрокаДанных.СтрокаДерева.Характеристика = СтрокаДанных.Характеристика;
					СтрокаДанных.СтрокаДерева.ВидПродукции   = СтрокаДанных.ВидПродукции;
				КонецЕсли;
				
				СтрокаДанных.ТребуетсяСопоставление = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаДанных.ВидУпаковки)
			И СтрокаДанных.ДанныеРазбора <> Неопределено
			И СтрокаДанных.КоличествоПотребительскихУпаковок > 1
			И ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ВозможнаГрупповаяУпаковкаИлиНабор(СтрокаДанных.ДанныеРазбора.ВидУпаковки, СтрокаДанных.ДанныеРазбора) Тогда
			СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая;
			СтрокаДанных.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
			
			Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтрокаДанных.СтрокаДерева, СтрокаДанных, "ВидУпаковки, ТипУпаковки");
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияИСМП(СтрокаДанных.ВидПродукции, Истина)
			И ПараметрыСканирования.ТребуетсяПроверкаСредствамиККТ Тогда
			СтрокаДанных.ПредставлениеНоменклатурыРР = СтрокаДанных.ПредставлениеНоменклатуры;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеПрограммныеПроцедурыИФункции

// Подготавливает штрихкод GS1 в формате со скобками к передаче в компоненту печати штрихкодов.
//
// Параметры:
//  ЗначениеШтрихкода - Строка - Штрихкод
//  ТипКода - Число - Тип кода (см. документацию по компоненте печати штрихкодов)
//  ТипВходныхДанных - Число - Тип входных данных [Входящий / Исходящий]
// Возвращаемое значение:
//  Строка - Штрихкод для передачи в компоненту печати
Функция КодGS1ДляКомпонентыПечати(ЗначениеШтрихкода, ТипКода, ТипВходныхДанных = Неопределено) Экспорт
	
	ЗначениеШтрихкодаДляКомпоненты = СокрЛП(ЗначениеШтрихкода);

	Если (ТипКода = 2 Или ТипКода = 17 Или ТипКода = 24) Тогда
		ЧтениеШтрихкода = ШтрихкодыУпаковокКлиентСервер.ПараметрыШтрихкода(ЗначениеШтрихкодаДляКомпоненты);
		Если Не ЧтениеШтрихкода.Результат = Неопределено Тогда
			Если ЧтениеШтрихкода.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_128
				Или ЧтениеШтрихкода.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_DataBarExpandedStacked Тогда
				Если ТипВходныхДанных = Неопределено Тогда
					ЗначениеШтрихкодаДляКомпоненты = ШтрихкодыУпаковокКлиентСервер.ШтрихкодGS1(
						ЧтениеШтрихкода.Результат, Истина);
				Иначе
					ЗначениеШтрихкодаДляКомпоненты = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ШтрихкодВBase64(
						ШтрихкодыУпаковокКлиентСервер.ШтрихкодGS1(
							ЧтениеШтрихкода.Результат, Ложь,
							ШтрихкодыУпаковокКлиентСервер.СимволОкончанияСтрокиПеременнойДлины()));
					ТипВходныхДанных = 1;
				КонецЕсли;
			ИначеЕсли ЧтениеШтрихкода.ТипШтрихкода = Перечисления.ТипыШтрихкодов.SSCC
				И ТипВходныхДанных <> Неопределено Тогда
				ЗначениеШтрихкодаДляКомпоненты = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ШтрихкодВBase64(
					ШтрихкодыУпаковокКлиентСервер.ШтрихкодSSCC(ЧтениеШтрихкода.Результат, Ложь, Истина));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат ЗначениеШтрихкодаДляКомпоненты;

КонецФункции

// Получает данные реквизитов шапки документа.
//  Имена реквизитов собираются по метаданным документа.
//
// Параметры:
//  ВходноеЗначение - ДокументСсылка, ДокументОбъект, ДанныеФормыСтруктура - Ссылка на документ.
// Возвращаемое значение:
//  Структура - содержит имена (ключи) и значения реквизитов переданного документа, включая ссылку на документ,
//	см. ОбщегоНазначения.ЗначенияРеквизитовОбъекта
Функция ПолучитьСтруктуруРеквизитовДокумента(ВходноеЗначение) Экспорт

	Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ВходноеЗначение)) Тогда
		ИсточникДанных            = ВходноеЗначение;
		ЗаполнятьИтоговоеЗначение = Ложь;
	Иначе
		ИсточникДанных            = ВходноеЗначение.Ссылка;
		ЗаполнятьИтоговоеЗначение = Истина;
	КонецЕсли;

	КоллекцияРеквизитов = ИсточникДанных.Метаданные().Реквизиты;

	МассивИменРеквизитов = Новый Массив;
	МассивИменРеквизитов.Добавить("Ссылка");
	МассивИменРеквизитов.Добавить("Дата");
	МассивИменРеквизитов.Добавить("Номер");
	Для Каждого Реквизит Из КоллекцияРеквизитов Цикл
		МассивИменРеквизитов.Добавить(Реквизит.Имя);
	КонецЦикла;
	
	ВозвращаемоеЗначение = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИсточникДанных, МассивИменРеквизитов);

	Если ЗаполнятьИтоговоеЗначение Тогда
		Для Каждого ИмяРеквизита Из МассивИменРеквизитов Цикл
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ВходноеЗначение, ИмяРеквизита) Тогда
				ВозвращаемоеЗначение[ИмяРеквизита] = ВходноеЗначение[ИмяРеквизита];
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ВходноеЗначение.Пустая() Тогда
		ВозвращаемоеЗначение.Ссылка = ВходноеЗначение;
	КонецЕсли;

	Возврат ВозвращаемоеЗначение;

КонецФункции

// Выполняет действие после уточнения информации у пользователя
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, для которой необходимо обработать штрихкоды.
//  Действие - Строка - Идентификатор необходимого действия.
//  Параметры - См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьПараметрыОбработкиВыбора.
// Возвращаемое значение:
//  Структура, Неопределено - Результат выполнения действия.
Функция ВыполнитьДействие(Форма, Действие, Параметры) Экспорт

	Если Действие = "ОбработатьУточнениеДанных" Тогда

		РезультатВыбора             = Параметры.РезультатВыбора;
		РезультатОбработкиШтрихкода = Параметры.РезультатОбработкиШтрихкода;
		КэшированныеЗначения        = Параметры.КэшированныеЗначения;
		РезультатВыбора = ОбработатьУточнениеДанных(Форма, РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения);

		Возврат РезультатВыбора;

	КонецЕсли;

	РезультатВыполнения = Неопределено;
	ВидыПродукции = Параметры.РезультатОбработкиШтрихкода.ВидыПродукции;
	Если ШтрихкодированиеОбщегоНазначенияИС.ПрисутствуетАлкогольнаяПродукция(ВидыПродукции) Тогда
		МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
		РезультатВыполнения = МодульШтрихкодированиеЕГАИС.ВыполнитьДействие(Форма, Действие, Параметры);
	КонецЕсли;

	Если ШтрихкодированиеОбщегоНазначенияИС.ПрисутствуетТабачнаяПродукция(ВидыПродукции) Тогда
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		РезультатВыполнения = МодульШтрихкодированиеМОТП.ВыполнитьДействие(Форма, Действие, Параметры);
	КонецЕсли;

	Если ШтрихкодированиеОбщегоНазначенияИС.ПрисутствуетПродукцияИСМП(ВидыПродукции) Тогда
		МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
		РезультатВыполнения = МодульШтрихкодированиеИСМПСлужебный.ВыполнитьДействие(Форма, Действие, Параметры);
	КонецЕсли;

	//@skip-check constructor-function-return-section
	Возврат РезультатВыполнения;

КонецФункции

// см. ИнтеграцияИС.УчитываемыеВидыМаркируемойПродукции
Функция УчитываемыеВидыМаркируемойПродукции() Экспорт
	Возврат ИнтеграцияИС.УчитываемыеВидыМаркируемойПродукции();
КонецФункции

#КонецОбласти

// Создает и возвращает новый элемент коллекции упаковок для распределения по товарам.
// 
// Возвращаемое значение:
//  Структура - Новый элемент коллекции упаковок для распределения по товарам:
// * ШтрихкодУпаковки                 - СправочникСсылка.ШтрихкодыУпаковокТоваров, Неопределено           - штрихкод упаковки товара.
// * ЧастичноеВыбытиеКоличество       - Число, Неопределено                                               - часть упаковки, с которой производится операция (числитель).
// * ЧастичноеВыбытиеВариантУчета     - ПеречислениеСсылка.ВариантыУчетаЧастичногоВыбытияИС, Неопределено - вариант учета частичного выбытия.
// * ЧастичноеВыбытиеНоменклатура     - ОпределяемыйТип.Номенклатура, Неопределено                        - номенклатура частичного выбытия, если отличается от основной.
// * ЧастичноеВыбытиеХарактеристика   - ОпределяемыйТип.ХарактеристикаНоменклатуры, Неопределено          - характеристика частичного выбытия, если отличается от основной.
// * РазрешительныйРежимИдентификаторЗапросаГИСМТ - ОпределяемыйТип.УникальныйИдентификаторИС, Неопределено - идентификатор запроса ГИС МТ
// * РазрешительныйРежимДатаЗапросаГИСМТ          - Строка, Неопределено                                    - дата получения идентификатора ГИС МТ в формате
// * ВыбытиеБутылки                               - Булево, Неопределено                                    - признак выбытия бутылки ЕГАИС
Функция НовыйЭлементКоллекцииУпаковокДляРаспределенияПоТоварам() Экспорт
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("ШтрихкодУпаковки",                 Неопределено);
	ВозвращаемоеЗначение.Вставить("ЧастичноеВыбытиеКоличество",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ЧастичноеВыбытиеВариантУчета",     Неопределено);
	ВозвращаемоеЗначение.Вставить("ЧастичноеВыбытиеНоменклатура",     Неопределено);
	ВозвращаемоеЗначение.Вставить("ЧастичноеВыбытиеХарактеристика",   Неопределено);
	ВозвращаемоеЗначение.Вставить("РазрешительныйРежимИдентификаторЗапросаГИСМТ", Неопределено);
	ВозвращаемоеЗначение.Вставить("РазрешительныйРежимДатаЗапросаГИСМТ",          Неопределено);
	ВозвращаемоеЗначение.Вставить("ВыбытиеБутылки",                               Неопределено);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Используется для автоматического заполнения кодов маркировки по вскрытым потребительским упаковкам.
// Возвращает штрихкод упаковки с данными частичного выбытия, которые сохраняются в документе розничной продажи.
//
// Параметры:
//  ПараметрыСканирования - см. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования
// 	Товары - ТаблицаЗначений, ТабличнаяЧасть, ДанныеФормыКоллекция, Массив из СтрокаТабличнойЧасти - Таблица товаров для заполнения по всем строкам одновременно
// 	 	   - СтрокаТаблицыЗначений, СтрокаТабличнойЧасти, ДанныеФормыЭлементКоллекции - Строка товаров, если необходимо заполнить код маркировки в строке товаров
// 	       Таблица/элемент коллекции определяется полями:
// 	        * Номенклатура   - ОпределяемыйТип.Номенклатура               - Номенклатура таблицы товаров
// 	        * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - Характеристика таблицы товаров (опционально)
// 	        * Серия          - ОпределяемыйТип.СерияНоменклатуры          - Серия таблицы товаров (опционально)
// 	        * Количество     - Число                                      - Количество единиц товаров
//  ШтрихкодыУпаковок - Неопределено - Код маркировки размещается в таблице товаров
//                    - ТаблицаЗначений, ТабличнаяЧасть, ДанныеФормыКоллекция, Массив из см. РаспределениеШтрихкодовУпаковокПоТоварам -
//                      Коллекция штрихкодов упаковок из документа с данными частичного выбытия.
// Возвращаемое значение:
//  Структура - Добавить изменить код маркировки кега на оборудовании розлива:
// * ЕстьИзменения - Булево - Признак наличия изменений: Добавлен или изменен код маркировки с данными частичного выбытия
// * КодыМаркировки - Соответствие из КлючИЗначение:
//                    * Ключ - СтрокаТаблицыЗначений, СтрокаТабличнойЧасти, ДанныеФормыЭлементКоллекции - Исходная строка Товаров
//                    * Значение - Массив из см. НовыйЭлементКоллекцииУпаковокДляРаспределенияПоТоварам
// * УдалитьКодыМакрировки - Массив из ОпределяемыйТип.ШтрихкодУпаковкиИС
// * УстановленныеСерии - Соответствие из КлючИЗначение:
//                             * Ключ - СтрокаТаблицыЗначений, СтрокаТабличнойЧасти, ДанныеФормыЭлементКоллекции - Исходная строка Товаров
//                             * Значение - ОпределяемыйТип.СерияНоменклатуры - значение серии кода маркировки, в случае если в исходной строке товаров серия не былы указана
Функция ДобавитьИзменитьКодМаркировкиВскрытойПотребительскойУпаковки(ПараметрыСканирования, Товары, ШтрихкодыУпаковок = Неопределено) Экспорт

	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("ЕстьИзменения",         Ложь);
	ВозвращаемоеЗначение.Вставить("КодыМаркировки",        Новый Соответствие());
	ВозвращаемоеЗначение.Вставить("УдалитьКодыМакрировки", Новый Массив());
	ВозвращаемоеЗначение.Вставить("УстановленныеСерии",    Новый Соответствие());
	
	Если Не ИспользуетсяЧастиноеВыбытиеПриПродаже(ПараметрыСканирования) Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ТаблицаТовары = РегистрыСведений.ВскрытыеПотребительскиеУпаковкиИС.НоваяТаблицаПоискаВскрытыхПотребительскихУпаковок();
	
	ИточникШтрихкодовУпаковок = Новый Массив();
	ЭтоКоллекцияТоваров       = Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Товары, "Номенклатура");

	Если ЭтоКоллекцияТоваров Тогда
		ИточникТоваров = Товары;
	Иначе
		ИточникТоваров = Новый Массив();
		ИточникТоваров.Добавить(Товары);
	КонецЕсли;

	Если ШтрихкодыУпаковок = Неопределено Тогда
		Если ЭтоКоллекцияТоваров Тогда
			ИсточникВложенныхШтрихкодов = Товары;
		Иначе
			ИсточникВложенныхШтрихкодов = Новый Массив();
			ИсточникВложенныхШтрихкодов.Добавить(Товары);
		КонецЕсли;
	Иначе
		ИсточникВложенныхШтрихкодов = ШтрихкодыУпаковок;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ИсточникВложенныхШтрихкодов Цикл

		ШтрихкодУпаковки = СтрокаТаблицы[ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки];

		Если Не ЗначениеЗаполнено(ШтрихкодУпаковки) Тогда
			Продолжить;
		КонецЕсли;

		ЭлементКоллекции = НовыйЭлементКоллекцииУпаковокДляРаспределенияПоТоварам();
		ЭлементКоллекции.ШтрихкодУпаковки = ШтрихкодУпаковки;
		Если ЗначениеЗаполнено(ПараметрыСканирования.ИмяКолонкиЧастичноеВыбытиеВариантУчета) Тогда
			ЭлементКоллекции.ЧастичноеВыбытиеВариантУчета = СтрокаТаблицы[ПараметрыСканирования.ИмяКолонкиЧастичноеВыбытиеВариантУчета];
		КонецЕсли;
		Если ЗначениеЗаполнено(ПараметрыСканирования.ИмяКолонкиЧастичноеВыбытиеНоменклатура) Тогда
			ЭлементКоллекции.ЧастичноеВыбытиеНоменклатура = СтрокаТаблицы[ПараметрыСканирования.ИмяКолонкиЧастичноеВыбытиеНоменклатура];
		КонецЕсли;
		Если ЗначениеЗаполнено(ПараметрыСканирования.ИмяКолонкиЧастичноеВыбытиеХарактеристика) Тогда
			ЭлементКоллекции.ЧастичноеВыбытиеХарактеристика = СтрокаТаблицы[ПараметрыСканирования.ИмяКолонкиЧастичноеВыбытиеХарактеристика];
		КонецЕсли;
		Если ЗначениеЗаполнено(ПараметрыСканирования.ИмяКолонкиЧастичноеВыбытиеКоличество) Тогда
			ЭлементКоллекции.ЧастичноеВыбытиеКоличество = СтрокаТаблицы[ПараметрыСканирования.ИмяКолонкиЧастичноеВыбытиеКоличество];
		Иначе
			Продолжить;
		КонецЕсли;

		ИточникШтрихкодовУпаковок.Добавить(ЭлементКоллекции);

	КонецЦикла;
	
	ИндексИсходнойСтроки = 0;
	Для Каждого ИсходнаяСтрока Из ИточникТоваров Цикл
		НоваяСтрока = ТаблицаТовары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходнаяСтрока);
		НоваяСтрока.ИндексИсходнойСтроки = ИндексИсходнойСтроки;
		НоваяСтрока.УчитыватьСерии       = ЗначениеЗаполнено(НоваяСтрока.Серия);
		ИндексИсходнойСтроки             = ИндексИсходнойСтроки + 1;
	КонецЦикла;
	ТаблицаТовары.Сортировать("Количество Убыв");
	
	ВскрытыеПотребительскиеУпаковки = РегистрыСведений.ВскрытыеПотребительскиеУпаковкиИС.ВскрытыеПотребительскиеУпаковкиПоТаблицеТоваров(
		ТаблицаТовары, ПараметрыСканирования,, Истина);
	ВскрытыеПотребительскиеУпаковки.Индексы.Добавить("ИндексИсходнойСтроки");
	
	Если ВскрытыеПотребительскиеУпаковки.Количество() = 0 Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	СерииИспользюутся = ИнтеграцияИС.СерииИспользуются();
	
	ВложенныеШтрихкодыУпаковок = ВложенныеШтрихкодыУпаковок(
		ИточникШтрихкодовУпаковок,
		ПараметрыСканирования,,
		Истина);
	
	ШтрихкодыКУдалению = Новый Соответствие();
	ТаблицаШтрихкоды   = ВложенныеШтрихкодыУпаковок.МаркированныеТовары.СкопироватьКолонки();
	
	ЗаполнитьТаблицуШтрихкодовЧастичногоВыбытияИзДереваУпаковокРекурсивно(
		ТаблицаШтрихкоды,
		ВложенныеШтрихкодыУпаковок.ДеревоУпаковок,
		Истина);
	ТаблицаШтрихкоды.Индексы.Добавить("ШтрихкодУпаковки");
	ТаблицаШтрихкоды.Индексы.Добавить("Номенклатура,Характеристика");
	ТаблицаШтрихкоды.Индексы.Добавить("Номенклатура,Характеристика,Серия");
	
	Если ОбщегоНазначенияИС.ПодсистемаСуществует("ИСМП") Тогда
		МодульОбщегоНазначенияИСМПКлиентСерверПовтИсп = ОбщегоНазначения.ОбщийМодуль("ОбщегоНазначенияИСМПКлиентСерверПовтИсп");
		НастройкиСканирования = МодульОбщегоНазначенияИСМПКлиентСерверПовтИсп.НастройкиСканированияКодовМаркировки();
		ПодбиратьПоФИФОКодыИСМП = НастройкиСканирования.ПодбиратьКодыМаркировкиВскрытыхПотребительскихУпаковокПоFIFO;
	Иначе
		ПодбиратьПоФИФОКодыИСМП = Ложь;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ВскрытыеПотребительскиеУпаковки Цикл
		
		СтруктураПоиска = Новый Структура("Номенклатура,Характеристика");
		Если СерииИспользюутся И СтрокаТаблицы.УчитыватьСерии Тогда
			СтруктураПоиска.Вставить("Серия");
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТаблицы);
		НайденныеСтроки = ВскрытыеПотребительскиеУпаковки.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрокаВскрытойУпаковки Из НайденныеСтроки Цикл
			СтрокаШтрихкода = ТаблицаШтрихкоды.Найти(СтрокаВскрытойУпаковки.КодМаркировки);
			Если СтрокаШтрихкода <> Неопределено Тогда
				ШтрихкодыКУдалению.Вставить(СтрокаВскрытойУпаковки.КодМаркировки, Истина);
				ТаблицаШтрихкоды.Удалить(СтрокаШтрихкода);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из ТаблицаТовары Цикл
		
		СтруктураПоиска = Новый Структура("ИндексИсходнойСтроки", СтрокаТаблицы.ИндексИсходнойСтроки);
		НайденныеСтроки = ВскрытыеПотребительскиеУпаковки.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() > 1
			И НайденныеСтроки[0].ВидПродукции <> Перечисления.ВидыПродукцииИС.Алкогольная
			И Не ПодбиратьПоФИФОКодыИСМП Тогда
				
			Для Каждого СтрокаВскрытойУпаковки Из НайденныеСтроки Цикл
				ШтрихкодыКУдалению.Удалить(СтрокаВскрытойУпаковки.КодМаркировки);
			КонецЦикла;
			
			Продолжить;
			
		КонецЕсли;
		
		Если ЭтоКоллекцияТоваров Тогда
			ИсходнаяСтрокаТовары = Товары[СтрокаТаблицы.ИндексИсходнойСтроки];
		Иначе
			ИсходнаяСтрокаТовары = Товары;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("Номенклатура,Характеристика");
		Если СерииИспользюутся И СтрокаТаблицы.УчитыватьСерии Тогда
			СтруктураПоиска.Вставить("Серия");
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТаблицы);
		
		СтрокиШтрихкодов              = ТаблицаШтрихкоды.НайтиСтроки(СтруктураПоиска);
		КоличествоСписатьПоШтрихкодам = ИсходнаяСтрокаТовары.Количество;
		
		Для Каждого СтрокаШтрихкода Из СтрокиШтрихкодов Цикл
			
			Если КоличествоСписатьПоШтрихкодам <= 0 Тогда
				Прервать;
			КонецЕсли;
			КоличествоСписать = КоличествоСписатьПоШтрихкодам;
			Если КоличествоСписать > СтрокаШтрихкода.Количество Тогда
				КоличествоСписать = СтрокаШтрихкода.Количество;
			КонецЕсли;
			
			СтрокаШтрихкода.Количество    = СтрокаШтрихкода.Количество    - КоличествоСписать;
			КоличествоСписатьПоШтрихкодам = КоличествоСписатьПоШтрихкодам - КоличествоСписать;
			
		КонецЦикла;
		
		КоличествоСписатьТовары = КоличествоСписатьПоШтрихкодам;
		
		Для Каждого СтрокаВскрытойУпаковки Из НайденныеСтроки Цикл
			
			КоличествоСписатьПоШтрихкоду = КоличествоСписатьТовары;
			
			Если КоличествоСписатьПоШтрихкоду > СтрокаВскрытойУпаковки.Остаток
				И ЗначениеЗаполнено(СтрокаВскрытойУпаковки.ВидПродукции) Тогда
				КоличествоСписатьПоШтрихкоду = СтрокаВскрытойУпаковки.Остаток;
			КонецЕсли;
			
			Если СтрокаВскрытойУпаковки.Остаток <= 0
				И ЗначениеЗаполнено(СтрокаВскрытойУпаковки.ВидПродукции)
				Или КоличествоСписатьТовары <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаВскрытойУпаковки.Остаток = СтрокаВскрытойУпаковки.Остаток - КоличествоСписатьПоШтрихкоду;
			КоличествоСписатьТовары        = КоличествоСписатьТовары        - КоличествоСписатьПоШтрихкоду;
			
			ЭлементКоллекции = НовыйЭлементКоллекцииУпаковокДляРаспределенияПоТоварам();
			ЭлементКоллекции.ШтрихкодУпаковки             = СтрокаВскрытойУпаковки.КодМаркировки;
			ЭлементКоллекции.ЧастичноеВыбытиеКоличество   = КоличествоСписатьПоШтрихкоду;
			ЭлементКоллекции.ЧастичноеВыбытиеВариантУчета = СтрокаВскрытойУпаковки.ВариантЧастичногоВыбытия;
			Если СтрокаВскрытойУпаковки.ВидПродукции = Перечисления.ВидыПродукцииИС.Алкогольная Тогда
				ЭлементКоллекции.ВыбытиеБутылки = (СтрокаВскрытойУпаковки.Остаток = 0);
			КонецЕсли;
			Если СтрокаВскрытойУпаковки.ВариантЧастичногоВыбытия = Перечисления.ВариантыУчетаЧастичногоВыбытияИС.НастроеннаяНоменклатура Тогда
				ЭлементКоллекции.ЧастичноеВыбытиеНоменклатура   = ИсходнаяСтрокаТовары.Номенклатура;
				ЭлементКоллекции.ЧастичноеВыбытиеХарактеристика = ИсходнаяСтрокаТовары.Характеристика;
			КонецЕсли;
			
			СуществующаяСтрока = ШтрихкодыКУдалению[СтрокаВскрытойУпаковки.КодМаркировки];
			Если СуществующаяСтрока <> Неопределено Тогда
				ШтрихкодыКУдалению.Удалить(СтрокаВскрытойУпаковки.КодМаркировки);
			КонецЕсли;
			
			КоллекцияРезультат = ВозвращаемоеЗначение.КодыМаркировки[ИсходнаяСтрокаТовары];
			Если КоллекцияРезультат = Неопределено Тогда
				КоллекцияРезультат = Новый Массив();
				ВозвращаемоеЗначение.КодыМаркировки[ИсходнаяСтрокаТовары] = КоллекцияРезультат;
			КонецЕсли;
			
			КоллекцияРезультат.Добавить(ЭлементКоллекции);
			ВозвращаемоеЗначение.ЕстьИзменения = Истина;
			
			Если СерииИспользюутся
				И Не ЗначениеЗаполнено(ИсходнаяСтрокаТовары.Серия)
				И ЗначениеЗаполнено(СтрокаВскрытойУпаковки.Серия) Тогда
				ВозвращаемоеЗначение.УстановленныеСерии.Вставить(ИсходнаяСтрокаТовары, СтрокаВскрытойУпаковки.Серия);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из ШтрихкодыКУдалению Цикл
		ВозвращаемоеЗначение.ЕстьИзменения = Истина;
		ВозвращаемоеЗначение.УдалитьКодыМакрировки.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	//@skip-check constructor-function-return-section
	Возврат ВозвращаемоеЗначение;

КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ИнициализацияИКонструкторыДанных

// Выполняет инициализацию структуры Вложенные штрихкоды.
//
// Параметры:
//  ДеревоУпаковок - См. ИнициализироватьДеревоУпаковок
//  ИнициализироватьМаркированныеТовары - Булево - Признак инициализации таблицы МаркированныеТовары
//
// Возвращаемое значение:
//  Структура - Описание:
//   * ДеревоУпаковок - См. ИнициализироватьДеревоУпаковок
//   * МаркированныеТовары - См. ИнициализироватьТаблицуМаркированныеТовары
//   * ВидыПродукции - Массив Из ПеречислениеСсылка.ВидыПродукцииИС - Коллекция видов продукции ИС, которые присутствуют в дереве упаковок
//   * ШтрихкодыПродукцииДляСопоставления - Массив из Строка- коллекция штрихкодов, которым требуется сопоставить номенклатуру
//   * ЕстьОшибки - Булево - признак ошибки
//   * ТребуетсяОбновлениеКлючаСессии - Булево - признак необходимости обновления токена
//   * ТекстОшибки - Строка - представление ошибки
Функция ИнициализацияВложенныхШтрихкодов(ДеревоУпаковок = Неопределено, ИнициализироватьМаркированныеТовары = Истина) Экспорт

	ВложенныеШтрихкоды = Новый Структура;

	Если ДеревоУпаковок = Неопределено Тогда
		ВложенныеШтрихкоды.Вставить("ДеревоУпаковок", ИнициализироватьДеревоУпаковок());
	Иначе
		ВложенныеШтрихкоды.Вставить("ДеревоУпаковок", ДеревоУпаковок);
	КонецЕсли;

	Если ИнициализироватьМаркированныеТовары Тогда
		ВложенныеШтрихкоды.Вставить("МаркированныеТовары", ИнициализироватьТаблицуМаркированныеТовары());
	КонецЕсли;
	
	ВложенныеШтрихкоды.Вставить("ВидыПродукции",                      Новый Массив);
	ВложенныеШтрихкоды.Вставить("ШтрихкодыПродукцииДляСопоставления", Новый Массив);

	// Ошибки
	ВложенныеШтрихкоды.Вставить("ЕстьОшибки",                       Ложь);
	ВложенныеШтрихкоды.Вставить("ТребуетсяОбновлениеКлючаСессии",   Ложь);
	ВложенныеШтрихкоды.Вставить("ТекстОшибки",                      "");

	//@skip-check constructor-function-return-section
	Возврат ВложенныеШтрихкоды;

КонецФункции

// Инициализирует дерево значений - Дерево упаковок.
//
// Параметры:
//  ШтрихкодBase64 - Булево - Признак необходимости добавления колонки ШтрихкодBase64
//
// Возвращаемое значение:
//  ДеревоЗначений - состав колонок определяется в КолонкиДереваУпаковок.
Функция ИнициализироватьДеревоУпаковок(ШтрихкодBase64 = Ложь) Экспорт

	КолонкиДереваУпаковок = КолонкиДереваУпаковок();
	ДеревоУпаковок = Новый ДеревоЗначений;

	Для Каждого КлючЗначение Из КолонкиДереваУпаковок Цикл

		ДеревоУпаковок.Колонки.Добавить(КлючЗначение.Ключ, КлючЗначение.Значение)

	КонецЦикла;

	Если ШтрихкодBase64 Тогда
		ДеревоУпаковок.Колонки.Добавить("ШтрихкодBase64", Новый ОписаниеТипов("Строка"));
	КонецЕсли;
	
	Возврат ДеревоУпаковок;

КонецФункции

// Инициализирует таблицу значений - Маркированные товары.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Состав колонок таблицы определен в процедуре КолонкиТаблицыМаркированныеТовары.
Функция ИнициализироватьТаблицуМаркированныеТовары() Экспорт

	КолонкиТаблицы = КолонкиТаблицыМаркированныеТовары();

	МаркированныеТовары = Новый ТаблицаЗначений;

	Для Каждого КлючЗначение Из КолонкиТаблицы Цикл

		МаркированныеТовары.Колонки.Добавить(КлючЗначение.Ключ, КлючЗначение.Значение);

	КонецЦикла;

	Возврат МаркированныеТовары;

КонецФункции

// Формирует структуру обязательных колонок для таблицы - Маркированные товары, путем добавления к структуре общих
// колонок. (См. ОбщиеКолонкиКоллекцийВложенныхШтрихкодов).
//
// Возвращаемое значение:
//  см. ОбщиеКолонкиКоллекцийВложенныхШтрихкодов
Функция КолонкиТаблицыМаркированныеТовары() Экспорт

	КоллекцияОбязательныхКолонок = ОбщиеКолонкиКоллекцийВложенныхШтрихкодов();
	КоллекцияОбязательныхКолонок.Вставить("СтрокаДерева");

	//@skip-check constructor-function-return-section
	Возврат КоллекцияОбязательныхКолонок;

КонецФункции

// Формирует структуру обязательных колонок для дерева значений - Дерево упаковок, путем добавления к структуре общих
// колонок. (См. ОбщиеКолонкиКоллекцийВложенныхШтрихкодов).
//
// Возвращаемое значение:
//  Структура - Описание:
//   * ТекстОшибки - Строка - текст ошибки в строке дерева.
//   * ЕстьОшибки - Булево - Истина, если есть ошибки в строке дерева.
//   * ХешСумма - Неопределено - Хэш сумма упаковки.
//   * ТипУпаковки - Неопределено - Тип упаковки.
Функция КолонкиДереваУпаковок() Экспорт

	КоллекцияОбязательныхКолонок = ОбщиеКолонкиКоллекцийВложенныхШтрихкодов();

	КоллекцияОбязательныхКолонок.Вставить("ТипУпаковки", Неопределено);
	КоллекцияОбязательныхКолонок.Вставить("ЕстьОшибки",  Новый ОписаниеТипов("Булево"));
	КоллекцияОбязательныхКолонок.Вставить("ТекстОшибки", Новый ОписаниеТипов("Строка"));
	КоллекцияОбязательныхКолонок.Вставить("EAN",         Новый ОписаниеТипов("Строка"));
	КоллекцияОбязательныхКолонок.Вставить("GTIN",        Новый ОписаниеТипов("Строка"));
	КоллекцияОбязательныхКолонок.Вставить("Коэффициент",                               Новый ОписаниеТипов("Булево, Число",,,Новый КвалификаторыЧисла(18, 8, ДопустимыйЗнак.Неотрицательный)));
	КоллекцияОбязательныхКолонок.Вставить("ПлановоеКоличествоПотребительскихУпаковок", Новый ОписаниеТипов("Число"));

	КоллекцияОбязательныхКолонок.Вставить("НормализованныйШтрихкод", Новый ОписаниеТипов("Строка"));
	КоллекцияОбязательныхКолонок.Вставить("ХешСумма",                Новый ОписаниеТипов("Строка"));
	КоллекцияОбязательныхКолонок.Вставить("ХешСуммаНормализации",    Новый ОписаниеТипов("Строка"));

	КоллекцияОбязательныхКолонок.Вставить("НедопустимыйКодМаркировки", Новый ОписаниеТипов("Булево"));
	КоллекцияОбязательныхКолонок.Вставить("Входящий",                  Новый ОписаниеТипов("Булево"));

	//@skip-check constructor-function-return-section
	Возврат КоллекцияОбязательныхКолонок;

КонецФункции

// Параметры дополнения вложенных штрихкодов упаковок для заполнения дерева упаковок и маркированных товаров.
//
// Возвращаемое значение:
//  Структура - Параметры дополнения вложенных штрихкодов упаковок:
// * ДанныеЧастичногоВыбытия - Соответствие из КлючИЗначение:
//                                         * Ключ    - СправочникСсылка.ШтрихкодыУпаковокТоваров - штрихкод упаковки.
//                                         * Значение - см. НовыйЭлементДополненияВложенныхШтрихкодовУпаковокЧастичноеВыбытие.
// * ДанныеЗапросаГИСМТ - Соответствие из КлючИЗначение:
//                                         * Ключ    - СправочникСсылка.ШтрихкодыУпаковокТоваров - штрихкод упаковки.
//                                         * Значение - см. НовыйЭлементДополненияВложенныхШтрихкодовУпаковокДанныеГИСМТ.
Функция ПараметрыДополненияВложенныхШтрихкодовУпаковок() Экспорт

	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("ДанныеЧастичногоВыбытия", Новый Соответствие());
	ВозвращаемоеЗначение.Вставить("ДанныеЗапросаГИСМТ",      Новый Соответствие());

	//@skip-check constructor-function-return-section
	Возврат ВозвращаемоеЗначение;

КонецФункции

 // Создает и возвращает новый элемент дополнения вложенных штрихкодов упаковок.
//
// Возвращаемое значение:
//  Структура - Новый элемент дополнения вложенных штрихкодов упаковок частичное выбытие:
// * Количество                     - Число                                                 - Числитель частичного выбытия (часть выбываемой упаковки).
// * ЧастичноеВыбытиеВариантУчета   - ПеречислениеСсылка.ВариантыУчетаЧастичногоВыбытияИС - Настроенный вариант учета
// * ЧастичноеВыбытиеНоменклатура   - ОпределяемыйТип.Номенклатура                          - Подменная номенклатура, если поддерживает вариант учета.
// * ЧастичноеВыбытиеХарактеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры            - Подменная характеристика, если поддерживает вариант учета.
Функция НовыйЭлементДополненияВложенныхШтрихкодовУпаковокЧастичноеВыбытие() Экспорт

	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("Количество");
	ВозвращаемоеЗначение.Вставить("ЧастичноеВыбытиеВариантУчета");
	ВозвращаемоеЗначение.Вставить("ЧастичноеВыбытиеНоменклатура");
	ВозвращаемоеЗначение.Вставить("ЧастичноеВыбытиеХарактеристика");

	//@skip-check constructor-function-return-section
	Возврат ВозвращаемоеЗначение;

КонецФункции

 // Создает и возвращает новый элемент дополнения данными ГИС МТ вложенных штрихкодов упаковок.
//
// Возвращаемое значение:
//  Структура - Новый элемент дополнения вложенных штрихкодов упаковок данные ГИС МТ:
// * РазрешительныйРежимИдентификаторЗапросаГИСМТ - ОпределяемыйТип.УникальныйИдентификаторИС - идентификатор ГИС МТ
// * РазрешительныйРежимДатаЗапросаГИСМТ - Строка - дата получения идентификатора ГИС МТ в формате timestamp
Функция НовыйЭлементДополненияВложенныхШтрихкодовУпаковокДанныеГИСМТ() Экспорт

	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("РазрешительныйРежимДатаЗапросаГИСМТ");
	ВозвращаемоеЗначение.Вставить("РазрешительныйРежимИдентификаторЗапросаГИСМТ");

	//@skip-check constructor-function-return-section
	Возврат ВозвращаемоеЗначение;

КонецФункции

// Выполняется инициализация структуры кэширования данных маркируемой продукции.
//
// Возвращаемое значение:
//  Структура - Описание:
// * ОтложенныеКодыМаркировки - Массив из Структура -   Коды маркировки, по которым требуется выполнить постобработку.
// * ОбработанныеКодыМаркировки - Соответствие Из Строка - Ключ - код маркировки, значение - информация по коду маркировки.
// * ДанныеДляУточненияСведенийПользователя - Структура - данные для уточнения:
//  ** Операция - Строка, Неопределено - Операция
//  ** Данные   - Произвольный, Неопределено - Данные
Функция ИнициализацияКэшаМаркируемойПродукции() Экспорт

	КэшМаркируемойПродукции = Новый Структура;
	КэшМаркируемойПродукции.Вставить("ОбработанныеКодыМаркировки",             Новый Соответствие);
	КэшМаркируемойПродукции.Вставить("ОтложенныеКодыМаркировки",               Новый Массив);
	КэшМаркируемойПродукции.Вставить("ДанныеДляУточненияСведенийПользователя", Новый Структура("Операция, Данные"));

	Возврат КэшМаркируемойПродукции;

КонецФункции

// Инициализирует таблицу значений для заполнения данных документов.
//
// Параметры:
//   ПараметрыСканирования - см. ПараметрыСканирования
//
// Возвращаемое значение:
//  ТаблицаЗначений - Описание:
// * Номенклатура - ОпределяемыйТип.Номенклатура - Номенклатура.
// * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - Характеристика.
// * Серия - ОпределяемыйТип.СерияНоменклатуры - Серия.
// * Количество - Число - Количество товара.
Функция ИнициализицияТаблицыДанныхДокумента(ПараметрыСканирования) Экспорт

	ТаблицаДанныхДокумента = Новый ТаблицаЗначений;
	ТаблицаДанныхДокумента.Колонки.Добавить("Номенклатура",   Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаДанныхДокумента.Колонки.Добавить("Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ТаблицаДанныхДокумента.Колонки.Добавить("Серия",          Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ТаблицаДанныхДокумента.Колонки.Добавить("Количество",     ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));

	Если ШтрихкодированиеОбщегоНазначенияИС.ПрисутствуетПродукцияИСМП(ПараметрыСканирования.ДопустимыеВидыПродукции) Тогда
		МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
		МодульШтрихкодированиеИСМПСлужебный.ДобавитьКолонкиТаблицыДанныхДокумента(ТаблицаДанныхДокумента);
	КонецЕсли;
	
	Возврат ТаблицаДанныхДокумента;
	
КонецФункции

// Выполняет инициализацию кэша для формы объекта, необходимого для обработки маркируемой продукции.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма объекта.
Процедура ИнициализироватьКэшМаркируемойПродукции(Форма) Экспорт

	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "КэшМаркируемойПродукции")
		И Не ЭтоАдресВременногоХранилища(Форма.КэшМаркируемойПродукции) Тогда
		
		КэшМаркируемойПродукции = ИнициализацияКэшаМаркируемойПродукции();
		Форма.КэшМаркируемойПродукции = ПоместитьВоВременноеХранилище(КэшМаркируемойПродукции, Форма.УникальныйИдентификатор);

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область РаботаСКэшемМаркируемойПродукции

// Кэширует данные обработанных штрихкодов путем помещения их в хранилище значений.
//
// Параметры:
//  ПараметрыСканирования - См. ПараметрыСканирования
//  ДанныеШтрихкода - См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьДанныеШтрихкода
//  РезультатДобавления - См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьРезультатОбработкиШтрихкода
//  ДеревоУпаковок - См. ИнициализироватьДеревоУпаковок
Процедура ЗакэшироватьОбработанныеШтрихкоды(ПараметрыСканирования, ДанныеШтрихкода, РезультатДобавления, ДеревоУпаковок = Неопределено) Экспорт

	Если РезультатДобавления = Неопределено
		Или Не ПараметрыСканирования.КонтрольУникальностиКодовМаркировки
		Или Не ЭтоАдресВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции)
		Или ДанныеШтрихкода = Неопределено
		Или (РезультатДобавления.Свойство("ТребуетсяАвторизацияИСМП")
			И РезультатДобавления.ТребуетсяАвторизацияИСМП)
		Или ДанныеШтрихкода.ЭтоШтрихкодНоменклатуры
		Или РезультатДобавления.ЕстьОшибкиВДеревеУпаковок
		Или РезультатДобавления.ТребуетсяУточнениеСоставаУпаковки Тогда
		Возврат;
	КонецЕсли;

	Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ДанныеШтрихкода.ТипУпаковки)
		И ДеревоУпаковок <> Неопределено Тогда

		КэшМаркируемойПродукции = ПолучитьИзВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции);
		ОбработанныеКодыМаркировки = КэшМаркируемойПродукции.ОбработанныеКодыМаркировки;

		ПоместитьДанныеСтрокДереваВСоответствие(ДеревоУпаковок.Строки, ОбработанныеКодыМаркировки);
		ПоместитьВоВременноеХранилище(КэшМаркируемойПродукции, ПараметрыСканирования.КэшМаркируемойПродукции);

	Иначе

		Если ЗначениеЗаполнено(РезультатДобавления.ТекстОшибки) Или ДанныеШтрихкода.Штрихкод = Неопределено Тогда
			Возврат;
		КонецЕсли;

		КэшМаркируемойПродукции = ПолучитьИзВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции);
		ОбработанныеКодыМаркировки = КэшМаркируемойПродукции.ОбработанныеКодыМаркировки;

		ОбработанныеКодыМаркировки.Вставить(ДанныеШтрихкода.Штрихкод, ДанныеШтрихкода);
		ПоместитьВоВременноеХранилище(КэшМаркируемойПродукции, ПараметрыСканирования.КэшМаркируемойПродукции);

	КонецЕсли;

КонецПроцедуры

// Очищает кеш маркируемой продукции
//
// Параметры:
//  АдресИлиФормаКэшаМаркируемойПродукции  - ФормаКлиентскогоПриложения - Форма, на которой находится кеш
//                                         - Строка - Адрес временного хранилища кеша маркируемой продукции
Процедура ОчиститьКэшМаркируемойПродукции(АдресИлиФормаКэшаМаркируемойПродукции) Экспорт

	Если ТипЗнч(АдресИлиФормаКэшаМаркируемойПродукции) = Тип("ФормаКлиентскогоПриложения") Тогда
		АдресКэшаМаркируемойПродукции = АдресИлиФормаКэшаМаркируемойПродукции.КэшМаркируемойПродукции;
	ИначеЕсли ТипЗнч(АдресИлиФормаКэшаМаркируемойПродукции) = Тип("Строка") Тогда
		АдресКэшаМаркируемойПродукции = АдресИлиФормаКэшаМаркируемойПродукции;
	Иначе
		Возврат;
	КонецЕсли;

	Если Не ЭтоАдресВременногоХранилища(АдресКэшаМаркируемойПродукции) Тогда
		Возврат;
	КонецЕсли;

	КэшМаркируемойПродукции = ПолучитьИзВременногоХранилища(АдресКэшаМаркируемойПродукции);
	КэшМаркируемойПродукции.ОтложенныеКодыМаркировки.Очистить();
	КэшМаркируемойПродукции.ДанныеДляУточненияСведенийПользователя.Операция = "";
	КэшМаркируемойПродукции.ДанныеДляУточненияСведенийПользователя.Данные = Новый Массив;
	КэшМаркируемойПродукции.ОбработанныеКодыМаркировки.Очистить();

	ПоместитьВоВременноеХранилище(КэшМаркируемойПродукции, АдресКэшаМаркируемойПродукции);

КонецПроцедуры

// Формирует данные кодов маркировок на основании данных формы и помещает их во временное хранилище.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма.
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования).
//  ОчиститьОтложенныеКоды - Булево - необходимость очистки отложенных для повторной обработки водов маркировки.
Процедура ПоместитьДанныеДокументаВКэшМаркируемойПродукции(Форма, ПараметрыСканирования, ОчиститьОтложенныеКоды = Ложь) Экспорт

	Если Не ЭтоАдресВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции)
		Или ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок = Неопределено Тогда
		Возврат;
	КонецЕсли;

	КэшМаркируемойПродукции = ПолучитьИзВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции);

	Если ОчиститьОтложенныеКоды Тогда
		КэшМаркируемойПродукции.ОтложенныеКодыМаркировки.Очистить();
	КонецЕсли;

	ОбработанныеКодыМаркировки = КэшМаркируемойПродукции.ОбработанныеКодыМаркировки;
	Если ОбработанныеКодыМаркировки.Количество() = 0 Тогда

		ШтрихкодыУпаковок = ШтрихкодыУпаковокПоДаннымТоваровИМаркируемойПродукции(Форма, ПараметрыСканирования);
		КоллекцияВсехШтрихкодовДерева(
			ШтрихкодыУпаковок.ДеревоУпаковок.Строки, ОбработанныеКодыМаркировки, ПараметрыСканирования);

		ПоместитьВоВременноеХранилище(КэшМаркируемойПродукции, ПараметрыСканирования.КэшМаркируемойПродукции);

	КонецЕсли;

КонецПроцедуры

// Формирует кэш маркируемой продукции по данными формы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, для которой необходимо сформировать кэш маркируемой продукции.
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования).
Процедура СформироватьКэшМаркируемойПродукции(Форма, ПараметрыСканирования = Неопределено) Экспорт

	ПараметрыСканированияИнициализированыЛокально = Ложь;

	Если ПараметрыСканирования = Неопределено Тогда
		ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования(Форма);
		ПараметрыСканированияИнициализированыЛокально = Истина;
	КонецЕсли;

	ШтрихкодыУпаковок = ШтрихкодыУпаковокПоДаннымТоваровИМаркируемойПродукции(Форма, ПараметрыСканирования);

	КэшМаркируемойПродукции    = ИнициализацияКэшаМаркируемойПродукции();
	ОбработанныеКодыМаркировки = КэшМаркируемойПродукции.ОбработанныеКодыМаркировки;

	КоллекцияВсехШтрихкодовДерева(ШтрихкодыУпаковок.ДеревоУпаковок.Строки, ОбработанныеКодыМаркировки, ПараметрыСканирования);

	Если ЭтоАдресВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции) Тогда

		ПоместитьВоВременноеХранилище(КэшМаркируемойПродукции, ПараметрыСканирования.КэшМаркируемойПродукции);

	Иначе

		КэшМаркируемойПродукции = ПоместитьВоВременноеХранилище(КэшМаркируемойПродукции, Форма.УникальныйИдентификатор);

		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "КэшМаркируемойПродукции") Тогда
			Форма.КэшМаркируемойПродукции = КэшМаркируемойПродукции;
		КонецЕсли;

		Если Не ПараметрыСканированияИнициализированыЛокально Тогда
			ПараметрыСканирования.КэшМаркируемойПродукции = КэшМаркируемойПродукции;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Обновляет информацию, находяющуюся во временном хранилище, адрес которого, как правило,
//   хранится в реквизите формы «КэшМаркируемойПродукции».
// Выполняемые действия:
//   * Формирование данных кеша маркируемой продукции (если оно не производилось ранее).
//   * Удаление из кеша неактуальных данных (после удаления штрихкодов упаковок).
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, для которой необходимо обновить кэш маркируемой продукции.
//  ПараметрыСканирования - см. ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования
Процедура ОбновитьКэшМаркируемойПродукции(Форма, ПараметрыСканирования = Неопределено) Экспорт

	Если ПараметрыСканирования = Неопределено Тогда
		ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования(Форма);
	КонецЕсли;

	Если Не ЭтоАдресВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции) Тогда
		Возврат;
	КонецЕсли;

	КэшМаркируемойПродукции = ПолучитьИзВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции);
	ОбработанныеКодыМаркировки = КэшМаркируемойПродукции.ОбработанныеКодыМаркировки;

	Если ОбработанныеКодыМаркировки.Количество() = 0 Тогда
		ПоместитьДанныеДокументаВКэшМаркируемойПродукции(Форма, ПараметрыСканирования);
		Возврат;
	КонецЕсли;

	УпаковкиОбъекта = УпаковкиОбъекта(Форма, ПараметрыСканирования);
	ЗначенияВложенныхШтрихкодовМарок = ЗначенияВложенныхШтрихкодовУпаковок(УпаковкиОбъекта);

	НовыйОбработанныеКодыМаркировки = Новый Соответствие;
	Для Каждого Штрихкод Из ЗначенияВложенныхШтрихкодовМарок Цикл
		НовыйОбработанныеКодыМаркировки.Вставить(Штрихкод, ОбработанныеКодыМаркировки.Получить(Штрихкод));
	КонецЦикла;

	КэшМаркируемойПродукции.ОбработанныеКодыМаркировки = НовыйОбработанныеКодыМаркировки;
	ПоместитьВоВременноеХранилище(КэшМаркируемойПродукции, ПараметрыСканирования.КэшМаркируемойПродукции);

КонецПроцедуры

#КонецОбласти

#Область ОбработкаУточненийДанных

Процедура ОбработатьУточнениеДанныхДляФормыПроверкиИПодбора(РезультатВыбора, РезультатОбработки, ПараметрыСканирования, КэшированныеЗначения) Экспорт

	Если ТипЗнч(РезультатВыбора) = Тип("Строка") Тогда
		// Уточнены данные по упаковке
		РезультатОбработки.ТребуетсяУточнениеДанных = Ложь;
		РезультатОбработки.ТребуетсяУточнениеСоставаУпаковки = Ложь;
		Возврат;
	ИначеЕсли РезультатВыбора.Свойство("ШтрихкодУпаковки") Тогда
		// Уточнены данные - введен код маркировки
		Если ТипЗнч(РезультатОбработки.ДанныеШтрихкода) = Тип("Структура") Тогда
			ДанныеШтрихкода = РезультатОбработки.ДанныеШтрихкода;
			Для Каждого КлючИЗначение Из РезультатВыбора Цикл
				Если ЗначениеЗаполнено(КлючИЗначение.Значение)
					Или Не ДанныеШтрихкода.Свойство(КлючИЗначение.Ключ) Тогда
					ДанныеШтрихкода.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
				КонецЕсли;
			КонецЦикла;
			Если РезультатВыбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет
				И РезультатВыбора.ТипУпаковки = Перечисления.ТипыУпаковок.ПустаяСсылка() Тогда
				ДанныеШтрихкода.ТипУпаковки = Перечисления.ТипыУпаковок.ПустаяСсылка();
			КонецЕсли;
		Иначе
			ДанныеШтрихкода = РезультатВыбора;
		КонецЕсли;
		РезультатОбработки.ДанныеШтрихкода = ДанныеШтрихкода;
		РезультатОбработки.ОткрытьФормуВводаКодаМаркировки = Ложь;
	Иначе
		
		Если РезультатВыбора.Свойство("ДанныеВыбора") Тогда
			ДанныеВыбора = РезультатВыбора.ДанныеВыбора;
		КонецЕсли;
		
		Если РезультатОбработки.ТребуетсяВыборНоменклатуры
			И ТипЗнч(ДанныеВыбора) = Тип("Структура")
			И ЗначениеЗаполнено(ДанныеВыбора.Номенклатура) Тогда
			РезультатОбработки.ТребуетсяВыборНоменклатуры = Ложь;
		КонецЕсли;
		
		РезультатОбработки.ТребуетсяВыборСерии = Ложь;
		
		Если РезультатВыбора.ЗапомнитьВыбор Тогда
			ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции = РезультатВыбора.ДанныеВыбора;
		КонецЕсли;
		
		Если ТипЗнч(РезультатОбработки.ДанныеШтрихкода) = Тип("Структура") Тогда
			ДанныеШтрихкода = РезультатОбработки.ДанныеШтрихкода;
		Иначе
			ДанныеШтрихкода = ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьДанныеШтрихкода(ПараметрыСканирования);
		КонецЕсли;

		// Флаг может быть сброшен в Ложь при добавлении в форму проверки и подбора GTIN как ОСУ
		Если ДанныеШтрихкода.ЭтоШтрихкодНоменклатуры И ДанныеВыбора.ЭтоШтрихкодНоменклатуры Тогда
			РезультатОбработки = ОбработатьУточнениеНоменклатуры(ПараметрыСканирования, РезультатВыбора, РезультатОбработки, КэшированныеЗначения);
			Возврат;
		КонецЕсли;
		Если ДанныеШтрихкода.Свойство("ТребуетсяВыборСерии") Тогда
			ДанныеШтрихкода.ТребуетсяВыборСерии = Ложь;
		КонецЕсли;
		Если ДанныеШтрихкода.Свойство("ТребуетсяВыборВСД") Тогда
			ДанныеШтрихкода.ТребуетсяВыборВСД = Ложь;
		КонецЕсли;

		ПерезаписатьШтрихкодУпаковки     = ДанныеШтрихкода.ТребуетсяОбновлениеШтрихкода;
		ИменаСвойств                     = Новый Массив;
		ЭтоСтрокаДанныхЧастичногоВыбытия = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ЭтоСтрокаДанныхЧастичногоВыбытия(ДанныеШтрихкода, ПараметрыСканирования);

		ЭтоДобавлениеОСУПоGTIN =
			ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет
			И ДанныеШтрихкода.ЭтоШтрихкодНоменклатуры
			И Не ДанныеВыбора.ЭтоШтрихкодНоменклатуры;

		ЭтоУточнениеНоменлатуры = ДанныеШтрихкода.Свойство("Номенклатура")
			И Не ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура)
			И ДанныеВыбора.Свойство("Номенклатура")
			И ЗначениеЗаполнено(ДанныеВыбора.Номенклатура);

		Если ДанныеВыбора.Свойство("ТребуетВзвешивания") Тогда
			ДанныеШтрихкода.ТребуетВзвешивания = ДанныеВыбора.ТребуетВзвешивания;
			ДанныеШтрихкода.ПроизвольнаяЕдиницаУчета = ДанныеВыбора.ПроизвольнаяЕдиницаУчета;
		КонецЕсли;

		Для Каждого КлючЗначение Из ДанныеВыбора Цикл

			ИмяСвойства = КлючЗначение.Ключ;
			Если Не ДанныеШтрихкода.Свойство(ИмяСвойства) Тогда
				Продолжить;
			ИначеЕсли Не ДанныеШтрихкода.ТребуетВзвешивания
				И Не ЭтоСтрокаДанныхЧастичногоВыбытия
				И Не ЭтоДобавлениеОСУПоGTIN
				И Не ЭтоУточнениеНоменлатуры
				И ИмяСвойства = "Количество" Тогда
				Продолжить;
			КонецЕсли;

			ЭтоЗаменаНоменклатуры = (ЭтоСтрокаДанныхЧастичногоВыбытия
				И ДанныеВыбора.ЧастичноеВыбытиеВариантУчета = Перечисления.ВариантыУчетаЧастичногоВыбытияИС.НастроеннаяНоменклатура
				И (ИмяСвойства = "Номенклатура"
				Или ИмяСвойства = "Характеристика"
				Или ИмяСвойства = "Упаковка"
				Или ИмяСвойства = "ЧастичноеВыбытиеНоменклатура"
				Или ИмяСвойства = "ЧастичноеВыбытиеХарактеристика"));

			Если Не ЗначениеЗаполнено(КлючЗначение.Значение) И Не ЭтоЗаменаНоменклатуры
				Или ДанныеШтрихкода[ИмяСвойства] = КлючЗначение.Значение Тогда
				Продолжить;
			КонецЕсли;

			Если ИмяСвойства = "Номенклатура"
				Или ИмяСвойства = "Характеристика"
				Или ИмяСвойства = "Серия"
				Или ИмяСвойства = "Количество" И Не ЭтоСтрокаДанныхЧастичногоВыбытия
				Или ИмяСвойства = "КоличествоПотребительскихУпаковок" Тогда
				ПерезаписатьШтрихкодУпаковки = ПараметрыСканирования.СоздаватьШтрихкодУпаковки;
				ИменаСвойств.Добавить(ИмяСвойства);
			КонецЕсли;

			Если ИмяСвойства = "ГоденДо"
				Или ИмяСвойства = "ИдентификаторПроисхожденияВЕТИС" Тогда
				ИменаСвойств.Добавить(ИмяСвойства);
			КонецЕсли;

			ДанныеШтрихкода[ИмяСвойства] = КлючЗначение.Значение;

		КонецЦикла;

		Если ДанныеШтрихкода.ТребуетсяОбновлениеШтрихкода Тогда
			ИмяСвойства = "Количество"; // Может быть присвоено на клиенте в напрямую в данные штрихкода из весов
			Если ИменаСвойств.Найти(ИмяСвойства) = Неопределено Тогда
				ИменаСвойств.Добавить(ИмяСвойства);
			КонецЕсли;
		КонецЕсли;

		ДанныеШтрихкода.ДополнительныеПараметры = РезультатВыбора;

		Если Не ЗначениеЗаполнено(ДанныеШтрихкода.ВидПродукции) Тогда
			ДанныеШтрихкода.ВидПродукции = ИнтеграцияИС.ВидПродукцииПоНоменклатуре(ДанныеШтрихкода.Номенклатура);
		КонецЕсли;

		Если Не ДанныеШтрихкода.ЭтоШтрихкодНоменклатуры Тогда
			Если ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияМОТП(ДанныеШтрихкода.ВидПродукции) Тогда
				Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
				Модуль.ОбработатьУточнениеДанных(ДанныеШтрихкода, ДанныеВыбора, ПараметрыСканирования, РезультатОбработки);
			КонецЕсли;
			Если ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияИСМП(ДанныеШтрихкода.ВидПродукции) Тогда
				Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
				Модуль.ОбработатьУточнениеДанных(ДанныеШтрихкода, ДанныеВыбора, ПараметрыСканирования, РезультатОбработки);
			КонецЕсли;
		КонецЕсли;

		РазобратьШтрихкод = Ложь;

		Если Не ЗначениеЗаполнено(ДанныеШтрихкода.Штрихкод) И ЗначениеЗаполнено(РезультатОбработки.Штрихкод) Тогда

			ДанныеШтрихкода.Штрихкод = РезультатОбработки.Штрихкод;
			ДанныеШтрихкода.ШтрихкодBase64 = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ШтрихкодВBase64(РезультатОбработки.Штрихкод);

			РазобратьШтрихкод = Истина;

		КонецЕсли;

		// Флаг сброшен в Ложь при добавлении в форму проверки и подбора GTIN как ОСУ
		Если ЭтоДобавлениеОСУПоGTIN Тогда

			ДанныеШтрихкода.Штрихкод = ДанныеВыбора.КодМаркировки;
			ДанныеШтрихкода.ШтрихкодBase64 = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ШтрихкодВBase64(ДанныеВыбора.КодМаркировки);
			ДанныеШтрихкода.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_128;
			ДанныеШтрихкода.ТипУпаковки = Перечисления.ТипыУпаковок.ПустаяСсылка();

			РазобратьШтрихкод = Истина;

		КонецЕсли;

		Если РазобратьШтрихкод Тогда

			ДанныеШтрихкода.ДанныеРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(
				ДанныеШтрихкода.Штрихкод,
				ДанныеШтрихкода.ВидПродукции,
				ДанныеШтрихкода.ПримечаниеКРазборуШтрихкода,
				Неопределено,
				Неопределено);

		КонецЕсли;

		Если ИменаСвойств.Количество() > 0 Тогда
			ДополнитьДеревоУпаковокИШтрихкодыУпаковокУточненнымиДанными(ДанныеШтрихкода, ИменаСвойств, ПерезаписатьШтрихкодУпаковки);
		КонецЕсли;

		Если ЗначениеЗаполнено(ДанныеШтрихкода.ШтрихкодУпаковки)
			И ПерезаписатьШтрихкодУпаковки Тогда

			УстановитьПривилегированныйРежим(Истина);

			НачатьТранзакцию();

			Попытка

				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("Справочник.ШтрихкодыУпаковокТоваров");
				ЭлементБлокировки.УстановитьЗначение("Ссылка", ДанныеШтрихкода.ШтрихкодУпаковки);
				Блокировка.Заблокировать();

				ОбновитьЭлементШтрихкодовУпаковок(ДанныеШтрихкода,, ПараметрыСканирования);

				ЗафиксироватьТранзакцию();

			Исключение

				ОтменитьТранзакцию();

				ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ИмяСобытияЖурналРегистрации = НСтр("ru = 'ИС МП: Обработка выбора серии'", ОбщегоНазначения.КодОсновногоЯзыка());
				ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки);

				ВызватьИсключение ПодробноеПредставлениеОшибки;

			КонецПопытки;

			УстановитьПривилегированныйРежим(Ложь);

		ИначеЕсли Не ЗначениеЗаполнено(ДанныеШтрихкода.ШтрихкодУпаковки)
			И ЗначениеЗаполнено(ДанныеШтрихкода.Штрихкод) Тогда
			
			ДанныеШтрихкода.ШтрихкодУпаковки = СоздатьМаркированныйТоварПоДаннымШтрихкода(ДанныеШтрихкода, ПараметрыСканирования, РезультатОбработки);

		// Считали RFID-метку, но номер КиЗ еще не получен
		ИначеЕсли ДанныеШтрихкода.ВидПродукции = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха
			И ДанныеШтрихкода.ДанныеRFID <> Неопределено
			И Не ЗначениеЗаполнено(ДанныеШтрихкода.Штрихкод) Тогда

			РезультатОбработки.ОткрытьФормуВводаКодаМаркировки = Истина;

		КонецЕсли;

		РезультатОбработки.ДанныеШтрихкода = ДанныеШтрихкода;
		
		Если ЭтоСтрокаДанныхЧастичногоВыбытия
			И РезультатОбработки.ТребуетсяВскрытиеПотребительскойУпаковки
			И ДанныеШтрихкода.ЧастичноеВыбытие Тогда
			ВскрытьПотребительскуюУпаковкуПриОбработкеУточнения(ДанныеШтрихкода, РезультатОбработки, ПараметрыСканирования);
		КонецЕсли;
		
	КонецЕсли;

	РезультатОбработки.ТребуетсяУточнениеДанных = Ложь;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП")
		И ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияИСМП(ДанныеШтрихкода.ВидПродукции, Истина) Тогда

		МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
		МодульШтрихкодированиеИСМПСлужебный.СохранениеКодаМаркировкиВПул(РезультатОбработки, ДанныеШтрихкода, ПараметрыСканирования);

	КонецЕсли;
	
КонецПроцедуры

//Проверяет необходимость уточнения данных по штрихкодам у пользователя.
//   Здесь будут собраны все проверки из других источников.
//
// Параметры:
//  ДанныеПоШтрихкодам - см. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияДанныхПоШтрихкодам.
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования).
Процедура ПроверитьНеобходимостьУточненияДанныхУПользователя(ДанныеПоШтрихкодам, ПараметрыСканирования) Экспорт

	ДанныеДокументаОснования = Неопределено;
	Если ИнтеграцияИС.СерииИспользуются() Тогда
		СформироватьДанныеДокументаОснования(ПараметрыСканирования);
		Если ЭтоАдресВременногоХранилища(ПараметрыСканирования.АдресДанныхДокументаОснования) Тогда
			ДанныеДокументаОснования = ПолучитьИзВременногоХранилища(ПараметрыСканирования.АдресДанныхДокументаОснования);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если Не СтрокаДанных.Входящий Тогда
			Продолжить;
		ИначеЕсли Не ОбщегоНазначенияИСКлиентСервер.ЭтоУпаковкаПоВиду(СтрокаДанных.ВидУпаковки) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДанных.СтрокаДерева <> Неопределено
			И ПроверитьНеобходимостьУточнения(СтрокаДанных.СтрокаДерева, ДанныеПоШтрихкодам.ДанныеКодовМаркировки, ПараметрыСканирования, ДанныеДокументаОснования) Тогда
			ДанныеПоШтрихкодам.УточнитьУПользователя.Добавить(СтрокаДанных.Штрихкод);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет обработку данных, которые уточнил пользователь в диалоговом окне.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, для которой необходимо обработать штрихкод.
//  РезультатВыбора - Структура, ОпределяемыйТип.СерияНоменклатуры - результат выбора серии пользователем.
//  РезультатОбработки - (См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьРезультатОбработкиШтрихкода).
//  КэшированныеЗначения - Структура - кэшированные значения формы.
// Возвращаемое значение:
//   (См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция ОбработатьУточнениеДанных(Форма, РезультатВыбора, РезультатОбработки, КэшированныеЗначения) Экспорт

	ДанныеШтрихкода = РезультатОбработки.ДанныеШтрихкода;
	Если РезультатОбработки.ОткрытьФормуВводаКодаМаркировки Тогда
		Возврат ОбработатьВводКодаМаркировки(Форма, РезультатВыбора, РезультатОбработки, КэшированныеЗначения);
	ИначеЕсли ДанныеШтрихкода.ЭтоШтрихкодНоменклатуры Тогда
		Возврат ОбработатьУточнениеНоменклатуры(Форма, РезультатВыбора, РезультатОбработки, КэшированныеЗначения);
	ИначеЕсли ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
		Возврат ОбработатьУточнениеДанныхДляУпаковки(Форма, РезультатВыбора, РезультатОбработки, КэшированныеЗначения);
	Иначе
		Возврат ОбработатьУточнениеДанныхДляМаркированногоТовара(Форма, РезультатВыбора, РезультатОбработки, КэшированныеЗначения);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПрочиеСлужебныеПроцедурыИФункции

// Заполняет таблицу "Маркированные товары" на основании данных дерева упаковок. При заполнении исключаются упаковки.
//
// Параметры:
//  СтрокиДерева - КоллекцияСтрокДереваЗначений - Строки дерева упаковок.
//  МаркированныеТовары - ТаблицаЗначений - Таблица с маркируемой продукцией.
//  УпаковкаВерхнегоУровня - СтрокаДереваЗначений - Строка дерева верхнего уровня.
Процедура ЗаполнитьТаблицуМаркированныеТоварыПоСтрокамДереваУпаковок(СтрокиДерева, МаркированныеТовары, УпаковкаВерхнегоУровня = Неопределено) Экспорт

	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если УпаковкаВерхнегоУровня = Неопределено Тогда
			ТекУпаковкаВерхнегоУровня = СтрокаДерева;
		Иначе
			ТекУпаковкаВерхнегоУровня = УпаковкаВерхнегоУровня;
		КонецЕсли;

		Если СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
			Или СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор
			Или СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
			НоваяСтрока = МаркированныеТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
			НоваяСтрока.СтрокаДерева           = СтрокаДерева;
			НоваяСтрока.УпаковкаВерхнегоУровня = ТекУпаковкаВерхнегоУровня;
		КонецЕсли;

		ЗаполнитьТаблицуМаркированныеТоварыПоСтрокамДереваУпаковок(СтрокаДерева.Строки,
			МаркированныеТовары, ТекУпаковкаВерхнегоУровня);

	КонецЦикла;

КонецПроцедуры

Процедура ОбновитьСоздатьШтрихкодУпаковкиДанныхШтрихкода(ДанныеШтрихкода, ИзмененныеСвойства, ПараметрыСканирования) Экспорт

	Если Не ПараметрыСканирования.СоздаватьШтрихкодУпаковки Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(ДанныеШтрихкода.ШтрихкодУпаковки) Тогда
		ОбновитьЭлементШтрихкодовУпаковок(ДанныеШтрихкода, ИзмененныеСвойства, ПараметрыСканирования);
	Иначе
		ДанныеШтрихкода.ШтрихкодУпаковки = СоздатьМаркированныйТоварПоДаннымШтрихкода(ДанныеШтрихкода, ПараметрыСканирования);
		Если ЗначениеЗаполнено(ДанныеШтрихкода.СтрокаДерева) Тогда
			ДанныеШтрихкода.СтрокаДерева.ШтрихкодУпаковки = ДанныеШтрихкода.ШтрихкодУпаковки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Очищает отложенные коды маркировки в кеше маркируемой продукции
// 
// Параметры:
//  АдресИлиФормаКэшаМаркируемойПродукции  - ФормаКлиентскогоПриложения - Форма, на которой находится кеш
//                                         - Строка - Адрес временного хранилища кеша маркируемой продукции
Процедура ОчиститьОтложенныеКодыМаркировки(АдресИлиФормаКэшаМаркируемойПродукции) Экспорт

	Если ТипЗнч(АдресИлиФормаКэшаМаркируемойПродукции) = Тип("ФормаКлиентскогоПриложения") Тогда
		АдресКэшаМаркируемойПродукции = АдресИлиФормаКэшаМаркируемойПродукции.КэшМаркируемойПродукции;
	ИначеЕсли ТипЗнч(АдресИлиФормаКэшаМаркируемойПродукции) = Тип("Строка") Тогда
		АдресКэшаМаркируемойПродукции = АдресИлиФормаКэшаМаркируемойПродукции;
	Иначе
		Возврат;
	КонецЕсли;

	Если Не ЭтоАдресВременногоХранилища(АдресКэшаМаркируемойПродукции) Тогда
		Возврат;
	КонецЕсли;
	
	КэшМаркируемойПродукции = ПолучитьИзВременногоХранилища(АдресКэшаМаркируемойПродукции);
	КэшМаркируемойПродукции.ОтложенныеКодыМаркировки.Очистить();

	ПоместитьВоВременноеХранилище(КэшМаркируемойПродукции, АдресКэшаМаркируемойПродукции);

КонецПроцедуры

Процедура ЗаполнитьИзвестныеУпаковкиРасширенные(ПараметрыСканирования, ДанныеПоШтрихкодам, ШтрихкодыУпаковокДляОпределения, ШтрихкодИСтрокаДанныхКодаМаркировки) Экспорт
	
	ОбщиеМодули = ШтрихкодированиеОбщегоНазначенияИС.ОбщиеМодулиПодсистем();
	
	НайденныеУпаковки = ШтрихкодыУпаковок(ШтрихкодыУпаковокДляОпределения, Перечисления.ТипыУпаковок.МаркированныйТовар, Истина);
	Если НайденныеУпаковки.Количество() > 0 Тогда

		Для Каждого НайденнаяУпаковка Из НайденныеУпаковки Цикл

			СтрокаДанныхКодаМаркировки = ШтрихкодИСтрокаДанныхКодаМаркировки[НайденнаяУпаковка.Штрихкод];
			СтрокаДанныхКодаМаркировки.ШтрихкодУпаковки = НайденнаяУпаковка.Ссылка;
			СтрокаДанныхКодаМаркировки.Номенклатура     = НайденнаяУпаковка.Номенклатура;
			СтрокаДанныхКодаМаркировки.Характеристика   = НайденнаяУпаковка.Характеристика;
			СтрокаДанныхКодаМаркировки.Серия            = НайденнаяУпаковка.Серия;

			СтрокаДанныхКодаМаркировки.КоличествоПотребительскихУпаковок = ?(НайденнаяУпаковка.КоличествоПотребительскихУпаковок = 0,
				НайденнаяУпаковка.Количество, НайденнаяУпаковка.КоличествоПотребительскихУпаковок);
			СтрокаДанныхКодаМаркировки.Количество = НайденнаяУпаковка.Количество;

			СтрокаДанныхКодаМаркировки.ТипУпаковки      = НайденнаяУпаковка.ТипУпаковки;
			СтрокаДанныхКодаМаркировки.Идентифицирован  = Истина;

		КонецЦикла;
		
		// Для известных упаковок требуется вернуть ошибку при сканировании упаковки чужого вида продукции
		ОтборПоВидуПродукции = ПараметрыСканирования.ОтборПоВидуПродукции;
		ПараметрыСканирования.ОтборПоВидуПродукции = Ложь;
		ВложенныеШтрихкодыИзвестныхУпаковок = ВложенныеШтрихкодыИзвестныхУпаковок(
			НайденныеУпаковки.ВыгрузитьКолонку("Ссылка"), ПараметрыСканирования);
		ПараметрыСканирования.ОтборПоВидуПродукции = ОтборПоВидуПродукции;
		
		// Изменяем исходное значение штрихкода, на значение сохраненное в БД
		СтрокиДляИзмененияШтрихкода = НайденныеУпаковки.НайтиСтроки(Новый Структура("ШтрихкодСовпадает", Ложь));
		Если СтрокиДляИзмененияШтрихкода.Количество() > 0
			И ДанныеПоШтрихкодам.ЗаменыШтрихкодов = Неопределено Тогда
			ДанныеПоШтрихкодам.ЗаменыШтрихкодов = Новый Соответствие;
		КонецЕсли;
		Для Каждого СтрокаДляИзмененияШтрихкода Из СтрокиДляИзмененияШтрихкода Цикл

			СтрокаДанныхКодаМаркировки = ШтрихкодИСтрокаДанныхКодаМаркировки[СтрокаДляИзмененияШтрихкода.Штрихкод];

			// Данные о заменах нужны для поиска результатов обработки в механизмах загрузки данных из ТСД
			ДанныеПоШтрихкодам.ЗаменыШтрихкодов.Вставить(СтрокаДанныхКодаМаркировки.Штрихкод, СтрокаДляИзмененияШтрихкода.ЗначениеШтрихкода);

			СтрокаДанныхКодаМаркировки.Штрихкод = СтрокаДляИзмененияШтрихкода.ЗначениеШтрихкода;
			ШтрихкодированиеОбщегоНазначенияИС.ЗаполнитьСтрокуДанныхКодовМаркировкиПоДаннымРазбора(СтрокаДанныхКодаМаркировки, ОбщиеМодули);

		КонецЦикла;

		Если ШтрихкодированиеОбщегоНазначенияИС.ДопустимаТабачнаяПродукция(ПараметрыСканирования)
			Или ШтрихкодированиеОбщегоНазначенияИС.ДопустимаПродукцияИСМП(ПараметрыСканирования) Тогда

			МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
			МодульШтрихкодированиеМОТП.ПривестиВложенныеШтрихкодыКТребуемомуВидуДетализации(ВложенныеШтрихкодыИзвестныхУпаковок, ПараметрыСканирования, ДанныеПоШтрихкодам.ДанныеКодовМаркировки);

		КонецЕсли;
		
		Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды = Неопределено Тогда
			ДанныеПоШтрихкодам.ВложенныеШтрихкоды = ВложенныеШтрихкодыИзвестныхУпаковок;
		Иначе
			ДобавитьВДанныеШтрихкодовВложенныеШтрихкоды(
				ДанныеПоШтрихкодам, ВложенныеШтрихкодыИзвестныхУпаковок, ПараметрыСканирования);
		КонецЕсли;
		
		ИменаКолонокДляКопированияСвойств = Новый Массив;
		ИменаКолонокДляКопированияСвойств.Добавить("ШтрихкодУпаковки"); // Ссылка на справочник ШтрихкодыУпаковокТоваров
		ИменаКолонокДляКопированияСвойств.Добавить("Номенклатура");     // Данные из справочника
		ИменаКолонокДляКопированияСвойств.Добавить("Характеристика");   // Данные из справочника
		ИменаКолонокДляКопированияСвойств.Добавить("Серия");            // Данные из справочника

		ИменаКолонокДляКопированияСвойств.Добавить("ВидПродукции");         // Данные из справочника. Через номенклатуру
		ИменаКолонокДляКопированияСвойств.Добавить("МаркируемаяПродукция"); // Данные из справочника. Через номенклатуру
		ИменаКолонокДляКопированияСвойств.Добавить("ТипШтрихкода");         // Данные из справочника
		ИменаКолонокДляКопированияСвойств.Добавить("ТипУпаковки");          // Данные из справочника

		ИменаКолонокДляКопированияСвойств.Добавить("ТребуетВзвешивания");       // Данные из регистра Описание номенклатуры ИС.
		ИменаКолонокДляКопированияСвойств.Добавить("ПроизвольнаяЕдиницаУчета"); // Данные из регистра Описание номенклатуры ИС.

		ПараметрыДополненияТаблицыДанныеКодовМаркировки = ШтрихкодированиеОбщегоНазначенияИС.ПараметрыДополненияТаблицыДанныеКодовМаркировки(
			ДанныеПоШтрихкодам, ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок, ИменаКолонокДляКопированияСвойств);
		ПараметрыДополненияТаблицыДанныеКодовМаркировки.ЗаполнятьСтрокуДерева = Истина;

		ДобавленныеСтроки = Новый Массив;
		ДополнитьТаблицуДанныеКодовМаркировкиПоСтрокамДереваУпаковок(
			ДанныеПоШтрихкодам, ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок, ДобавленныеСтроки,
			ПараметрыСканирования, ПараметрыДополненияТаблицыДанныеКодовМаркировки);

		ОтключеноЗапрашиватьДанныеСервисаИСМП = Ложь;
		Если ОбщегоНазначенияИСМПКлиентСервер.ЗначениеПараметраСканированияЗапрашиватьДанныеСервисаИСМП(ПараметрыСканирования) Тогда
			ОбщегоНазначенияИСМПКлиентСервер.УстановитьПараметрСканированияЗапрашиватьДанныеСервисаИСМП(ПараметрыСканирования, Ложь);
			ОтключеноЗапрашиватьДанныеСервисаИСМП = Истина;
		КонецЕсли;
		ШтрихкодированиеОбщегоНазначенияИС.НормализоватьДанныеВложенныхШтрихкодов(ДанныеПоШтрихкодам, ПараметрыСканирования, ДанныеПоШтрихкодам.ДанныеКодовМаркировки);
		Если ОтключеноЗапрашиватьДанныеСервисаИСМП Тогда
			ОбщегоНазначенияИСМПКлиентСервер.УстановитьПараметрСканированияЗапрашиватьДанныеСервисаИСМП(ПараметрыСканирования);
		КонецЕсли;

		ЗаполнитьКоэффициентыВложенностиУпаковокПоШтрихкодамEAN(ДобавленныеСтроки, ПараметрыСканирования);

		ВидыПродукцииДерева = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ВидыПродукции;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДанныеПоШтрихкодам.ВидыПродукции, ВидыПродукцииДерева, Истина);

	КонецЕсли;

КонецПроцедуры

// Получает из справочника «Штрихкоды упаковок» данные по массиву значений штрихкодов.
//
// Параметры:
// 	ЗначенияШтрихкодов - Массив из Строка,
// 	Массив из СтрокаТаблицыЗначений: См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияДанныхПоШтрихкодам - Массив штрихкодов.
//  ТипыУпаковок - Массив Из ПеречислениеСсылка.ТипыУпаковок - Коллекция типов упаковок, по которым будет
//       установлено условие для формирования запроса.
//  ПроверкаНаGS1 - Булево - Добавляет в поиск значение штрихкода без скобок, только для упаковок GS1.
//  УчитыватьОСУ  - Булево - Признак необходимости получения информации по штрихкодам ОСУ
// Возвращаемое значение:
//  ТаблицаЗначений - Описание:
//   * Штрихкод - Строка - Штрихкод.
//   * Ссылка - СправочникСсылка.ШтрихкодыУпаковокТоваров - Ссылка на элемент справочника.
//   * ЗначениеШтрихкода - Строка - Значение штрихкода из элемента справочника.
//   * ДатаУпаковки - Дата - Дата формирования упаковки.
//   * ТипШтрихкода - ПеречислениеСсылка.ТипыШтрихкодов - Тип штрихкода.
//   * ТипУпаковки - ПеречислениеСсылка.ТипыУпаковок - Тип упаковки.
//   * Номенклатура - ОпределяемыйТип.Номенклатура - Номенклатура.
//   * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - Характеристика.
//   * Серия - ОпределяемыйТип.СерияНоменклатуры - Серия.
//   * ХешСумма - Строка - Хэш сумма упаковки.
Функция ШтрихкодыУпаковок(ЗначенияШтрихкодов, ТипыУпаковок = Неопределено, ПроверкаНаGS1 = Ложь, УчитыватьОСУ = Истина) Экспорт

	ШтрихкодыУпаковок = Новый ТаблицаЗначений;
	// Исходные данные
	ШтрихкодыУпаковок.Колонки.Добавить("Штрихкод",             Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(200)));
	// Данные из справочника ШтрихкодыУпаковокТоваров
	ШтрихкодыУпаковок.Колонки.Добавить("Ссылка",               Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ШтрихкодыУпаковок.Колонки.Добавить("ЗначениеШтрихкода",    Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(200)));
	ШтрихкодыУпаковок.Колонки.Добавить("ТипШтрихкода",         Новый ОписаниеТипов("ПеречислениеСсылка.ТипыШтрихкодов"));
	ШтрихкодыУпаковок.Колонки.Добавить("ТипУпаковки",          Новый ОписаниеТипов("ПеречислениеСсылка.ТипыУпаковок"));
	ШтрихкодыУпаковок.Колонки.Добавить("Номенклатура",         Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ШтрихкодыУпаковок.Колонки.Добавить("Характеристика",       Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ШтрихкодыУпаковок.Колонки.Добавить("Серия",                Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ШтрихкодыУпаковок.Колонки.Добавить("ХешСумма",             Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
	ШтрихкодыУпаковок.Колонки.Добавить("ХешСуммаНормализации", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
	ШтрихкодыУпаковок.Колонки.Добавить("ДатаУпаковки",         Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ШтрихкодыУпаковок.Колонки.Добавить("ШтрихкодСовпадает",    Новый ОписаниеТипов("Булево"));
	ШтрихкодыУпаковок.Колонки.Добавить("Количество",                        Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ШтрихкодыУпаковок.Колонки.Добавить("КоличествоПотребительскихУпаковок", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0)));

	Если ЗначенияШтрихкодов.Количество() = 0 Тогда
		Возврат ШтрихкодыУпаковок;
	КонецЕсли;

	ТаблицаШтрихкодов = Новый ТаблицаЗначений;
	ТаблицаШтрихкодов.Колонки.Добавить("Штрихкод",              Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(200)));
	ТаблицаШтрихкодов.Колонки.Добавить("ХэшШтрихкода",          Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
	ТаблицаШтрихкодов.Колонки.Добавить("ХэшИсходногоШтрихкода", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
	ТаблицаШтрихкодов.Колонки.Добавить("ЭтоДобавленный",        Новый ОписаниеТипов("Булево"));
	ТаблицаШтрихкодов.Колонки.Добавить("ИсходныйШтрихкод",      Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(200)));
	ТаблицаШтрихкодов.Колонки.Добавить("ЭтоОСУ",                Новый ОписаниеТипов("Булево"));
	ТаблицаШтрихкодов.Колонки.Добавить("ХешСумма",              Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));

	ГруппировкаОбъемноСортовогоУчетаПоGTIN = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
		ГруппировкаОбъемноСортовогоУчетаПоGTIN = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаПродукцииИСМП.ГруппировкаОбъемноСортовогоУчетаПоGTIN");
	КонецЕсли;

	Для Каждого ЭлементЗначения Из ЗначенияШтрихкодов Цикл

		Штрихкод             = ЭлементЗначения;
		ХешСуммаНормализации = Неопределено;
		ЭтоОСУ               = Ложь;

		Если ТипЗнч(ЭлементЗначения) = Тип("СтрокаТаблицыЗначений")
			Или ТипЗнч(ЭлементЗначения) = Тип("СтрокаДереваЗначений")
			Или ТипЗнч(ЭлементЗначения) = Тип("Структура") Тогда

			Штрихкод             = ЭлементЗначения.Штрихкод;
			ХешСуммаНормализации = ЭлементЗначения.ХешСуммаНормализации;

			Если ЭлементЗначения.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет Тогда
				ЭтоОСУ = Истина;
			ИначеЕсли ГруппировкаОбъемноСортовогоУчетаПоGTIN <> Неопределено
					И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭлементЗначения, "ТипУпаковки")
					И ЭлементЗначения.ТипУпаковки = ГруппировкаОбъемноСортовогоУчетаПоGTIN Тогда
				ЭтоОСУ = Истина;
			КонецЕсли;

		КонецЕсли;

		Если (Не УчитыватьОСУ И ЭтоОСУ)
			Или (УчитыватьОСУ И ЭтоОСУ И Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭлементЗначения, "ХешСумма")) Тогда
			Продолжить;
		КонецЕсли;

		НоваяСтрока = ТаблицаШтрихкодов.Добавить();
		НоваяСтрока.Штрихкод              = Штрихкод;
		НоваяСтрока.ХэшШтрихкода          = ИнтеграцияИС.ХешированиеДанныхSHA256(Штрихкод);
		НоваяСтрока.ИсходныйШтрихкод      = НоваяСтрока.Штрихкод;
		НоваяСтрока.ХэшИсходногоШтрихкода = НоваяСтрока.ХэшШтрихкода;
		Если ЭтоОСУ Тогда
			НоваяСтрока.ЭтоОСУ   = ЭтоОСУ;
			НоваяСтрока.ХешСумма = ЭлементЗначения.ХешСумма;
		КонецЕсли;

		Если ПроверкаНаGS1 И СтрНачинаетсяС(Штрихкод, "(") Тогда
			ПараметрыШтрихкода = ШтрихкодыУпаковокКлиентСервер.ПараметрыШтрихкода(Штрихкод);
			Если ПараметрыШтрихкода.Результат = Неопределено
				Или ПараметрыШтрихкода.ТипШтрихкода = Перечисления.ТипыШтрихкодов.SSCC Тогда
				Продолжить;
			КонецЕсли;
			ЗначениеШтрихкодаБезСкобок = ШтрихкодыУпаковокКлиентСервер.ШтрихкодGS1(ПараметрыШтрихкода.Результат, Ложь, "");
			Если Не ЗначениеЗаполнено(ЗначениеШтрихкодаБезСкобок)
				Или ЗначениеШтрихкодаБезСкобок = Штрихкод Тогда
				Продолжить;
			КонецЕсли;

			НоваяСтрока2 = ТаблицаШтрихкодов.Добавить();
			НоваяСтрока2.Штрихкод     = ЗначениеШтрихкодаБезСкобок;
			НоваяСтрока2.ХэшШтрихкода = ИнтеграцияИС.ХешированиеДанныхSHA256(ЗначениеШтрихкодаБезСкобок);
			НоваяСтрока2.ЭтоДобавленный        = Истина;
			НоваяСтрока2.ИсходныйШтрихкод      = НоваяСтрока.ИсходныйШтрихкод;
			НоваяСтрока2.ХэшИсходногоШтрихкода = НоваяСтрока.ХэшИсходногоШтрихкода;
		КонецЕсли;

		Если ЗначениеЗаполнено(ХешСуммаНормализации) Тогда
			НоваяСтрока2 = ТаблицаШтрихкодов.Добавить();
			НоваяСтрока2.Штрихкод              = Штрихкод;
			НоваяСтрока2.ХэшШтрихкода          = ХешСуммаНормализации;
			НоваяСтрока2.ЭтоДобавленный        = Истина;
			НоваяСтрока2.ИсходныйШтрихкод      = НоваяСтрока.ИсходныйШтрихкод;
			НоваяСтрока2.ХэшИсходногоШтрихкода = НоваяСтрока.ХэшИсходногоШтрихкода;
		КонецЕсли;

	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаШтрихкодов", ТаблицаШтрихкодов);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаШтрихкодов.Штрихкод              КАК Штрихкод,
	|	ТаблицаШтрихкодов.ХэшШтрихкода          КАК ХэшШтрихкода,
	|	ТаблицаШтрихкодов.ЭтоДобавленный        КАК ЭтоДобавленный,
	|	ТаблицаШтрихкодов.ИсходныйШтрихкод      КАК ИсходныйШтрихкод,
	|	ТаблицаШтрихкодов.ХэшИсходногоШтрихкода КАК ХэшИсходногоШтрихкода,
	|	ТаблицаШтрихкодов.ЭтоОСУ                КАК ЭтоОСУ,
	|	ТаблицаШтрихкодов.ХешСумма              КАК ХешСумма
	|ПОМЕСТИТЬ ТаблицаШтрихкодов
	|ИЗ
	|	&ТаблицаШтрихкодов КАК ТаблицаШтрихкодов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ХэшШтрихкода,
	|	Штрихкод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаШтрихкодов.Штрихкод                 КАК Штрихкод,
	|	ТаблицаШтрихкодов.ХэшШтрихкода             КАК ХэшШтрихкода,
	|	ТаблицаШтрихкодов.ЭтоДобавленный           КАК ЭтоДобавленный,
	|	ТаблицаШтрихкодов.ИсходныйШтрихкод         КАК ИсходныйШтрихкод,
	|	ТаблицаШтрихкодов.ХэшИсходногоШтрихкода    КАК ХэшИсходногоШтрихкода,
	|	ШтрихкодыУпаковокТоваров.Ссылка            КАК Ссылка,
	|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
	|	ШтрихкодыУпаковокТоваров.ДатаУпаковки      КАК ДатаУпаковки,
	|	ШтрихкодыУпаковокТоваров.ТипШтрихкода      КАК ТипШтрихкода,
	|	ШтрихкодыУпаковокТоваров.ТипУпаковки       КАК ТипУпаковки,
	|	ШтрихкодыУпаковокТоваров.Номенклатура      КАК Номенклатура,
	|	ШтрихкодыУпаковокТоваров.Характеристика    КАК Характеристика,
	|	ШтрихкодыУпаковокТоваров.Серия             КАК Серия,
	|	ШтрихкодыУпаковокТоваров.Количество                        КАК Количество,
	|	ШтрихкодыУпаковокТоваров.КоличествоПотребительскихУпаковок КАК КоличествоПотребительскихУпаковок,
	|	ШтрихкодыУпаковокТоваров.ХешСумма             КАК ХешСумма,
	|	ШтрихкодыУпаковокТоваров.ХешСуммаНормализации КАК ХешСуммаНормализации
	|ПОМЕСТИТЬ ДанныеШтрихкодовУпаковок
	|ИЗ
	|	ТаблицаШтрихкодов КАК ТаблицаШтрихкодов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|		ПО ТаблицаШтрихкодов.ХэшШтрихкода = ШтрихкодыУпаковокТоваров.ХешСуммаЗначенияШтрихкода
	|ГДЕ
	|	ШтрихкодыУпаковокТоваров.Ссылка ЕСТЬ НЕ NULL
	|	И ВЫБОР
	|		КОГДА ТаблицаШтрихкодов.ЭтоОСУ ТОГДА
	|			ТаблицаШтрихкодов.ХешСумма = ШтрихкодыУпаковокТоваров.ХешСумма
	|		ИНАЧЕ
	|			ИСТИНА
	|		КОНЕЦ
	|	И 1 = 1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаШтрихкодов.Штрихкод,
	|	ТаблицаШтрихкодов.ХэшШтрихкода,
	|	ТаблицаШтрихкодов.ЭтоДобавленный,
	|	ТаблицаШтрихкодов.ИсходныйШтрихкод,
	|	ТаблицаШтрихкодов.ХэшИсходногоШтрихкода,
	|	ШтрихкодыУпаковокТоваров.Ссылка,
	|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода,
	|	ШтрихкодыУпаковокТоваров.ДатаУпаковки,
	|	ШтрихкодыУпаковокТоваров.ТипШтрихкода,
	|	ШтрихкодыУпаковокТоваров.ТипУпаковки,
	|	ШтрихкодыУпаковокТоваров.Номенклатура,
	|	ШтрихкодыУпаковокТоваров.Характеристика,
	|	ШтрихкодыУпаковокТоваров.Серия,
	|	ШтрихкодыУпаковокТоваров.Количество,
	|	ШтрихкодыУпаковокТоваров.КоличествоПотребительскихУпаковок,
	|	ШтрихкодыУпаковокТоваров.ХешСумма,
	|	ШтрихкодыУпаковокТоваров.ХешСуммаНормализации
	|ИЗ
	|	ТаблицаШтрихкодов КАК ТаблицаШтрихкодов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|		ПО ТаблицаШтрихкодов.ХэшШтрихкода = ШтрихкодыУпаковокТоваров.ХешСуммаНормализации
	|ГДЕ
	|	ШтрихкодыУпаковокТоваров.Ссылка ЕСТЬ НЕ NULL
	|	И 1 = 1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаШтрихкодов.Штрихкод,
	|	ТаблицаШтрихкодов.ХэшШтрихкода,
	|	ТаблицаШтрихкодов.ЭтоДобавленный,
	|	ТаблицаШтрихкодов.ИсходныйШтрихкод,
	|	ТаблицаШтрихкодов.ХэшИсходногоШтрихкода,
	|	ШтрихкодыУпаковокТоваров.Ссылка,
	|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода,
	|	ШтрихкодыУпаковокТоваров.ДатаУпаковки,
	|	ШтрихкодыУпаковокТоваров.ТипШтрихкода,
	|	ШтрихкодыУпаковокТоваров.ТипУпаковки,
	|	ШтрихкодыУпаковокТоваров.Номенклатура,
	|	ШтрихкодыУпаковокТоваров.Характеристика,
	|	ШтрихкодыУпаковокТоваров.Серия,
	|	ШтрихкодыУпаковокТоваров.Количество,
	|	ШтрихкодыУпаковокТоваров.КоличествоПотребительскихУпаковок,
	|	ШтрихкодыУпаковокТоваров.ХешСумма,
	|	ШтрихкодыУпаковокТоваров.ХешСуммаНормализации
	|ИЗ
	|	ТаблицаШтрихкодов КАК ТаблицаШтрихкодов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|		ПО ТаблицаШтрихкодов.Штрихкод = ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода
	|		И ШтрихкодыУпаковокТоваров.ХешСуммаЗначенияШтрихкода = """"
	|		И ШтрихкодыУпаковокТоваров.ХешСуммаНормализации = """"
	|ГДЕ
	|	ШтрихкодыУпаковокТоваров.Ссылка ЕСТЬ НЕ NULL
	|	И 1 = 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеШтрихкодовУпаковок.Штрихкод КАК Штрихкод,
	|	ДанныеШтрихкодовУпаковок.ХэшШтрихкода КАК ХэшШтрихкода,
	|	МАКСИМУМ(ДанныеШтрихкодовУпаковок.ДатаУпаковки) КАК ДатаУпаковки
	|ПОМЕСТИТЬ МаксимальныеДаты
	|ИЗ
	|	ДанныеШтрихкодовУпаковок КАК ДанныеШтрихкодовУпаковок
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеШтрихкодовУпаковок.Штрихкод,
	|	ДанныеШтрихкодовУпаковок.ХэшШтрихкода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеШтрихкодовУпаковок.Штрихкод              КАК Штрихкод,
	|	ДанныеШтрихкодовУпаковок.ЭтоДобавленный        КАК ЭтоДобавленный,
	|	ДанныеШтрихкодовУпаковок.ИсходныйШтрихкод      КАК ИсходныйШтрихкод,
	|	ДанныеШтрихкодовУпаковок.ХэшИсходногоШтрихкода КАК ХэшИсходногоШтрихкода,
	|	ДанныеШтрихкодовУпаковок.Ссылка                КАК Ссылка,
	|	ДанныеШтрихкодовУпаковок.ЗначениеШтрихкода     КАК ЗначениеШтрихкода,
	|	ДанныеШтрихкодовУпаковок.ХешСумма              КАК ХешСумма,
	|	ДанныеШтрихкодовУпаковок.ХешСуммаНормализации  КАК ХешСуммаНормализации,
	|	ДанныеШтрихкодовУпаковок.ДатаУпаковки          КАК ДатаУпаковки,
	|	ДанныеШтрихкодовУпаковок.ТипШтрихкода          КАК ТипШтрихкода,
	|	ДанныеШтрихкодовУпаковок.ТипУпаковки           КАК ТипУпаковки,
	|	ДанныеШтрихкодовУпаковок.Номенклатура          КАК Номенклатура,
	|	ДанныеШтрихкодовУпаковок.Характеристика        КАК Характеристика,
	|	ДанныеШтрихкодовУпаковок.Серия                 КАК Серия,
	|	ДанныеШтрихкодовУпаковок.Количество                        КАК Количество,
	|	ДанныеШтрихкодовУпаковок.КоличествоПотребительскихУпаковок КАК КоличествоПотребительскихУпаковок,
	|	ДанныеШтрихкодовУпаковок.Штрихкод = ДанныеШтрихкодовУпаковок.ЗначениеШтрихкода КАК ШтрихкодСовпадает
	|ПОМЕСТИТЬ ДанныеДляАнализа
	|ИЗ
	|	ДанныеШтрихкодовУпаковок КАК ДанныеШтрихкодовУпаковок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаксимальныеДаты КАК МаксимальныеДаты
	|		ПО ДанныеШтрихкодовУпаковок.Штрихкод = МаксимальныеДаты.Штрихкод
	|			И ДанныеШтрихкодовУпаковок.ДатаУпаковки = МаксимальныеДаты.ДатаУпаковки
	|			И ДанныеШтрихкодовУпаковок.ХэшШтрихкода = МаксимальныеДаты.ХэшШтрихкода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДляАнализа.Штрихкод              КАК Штрихкод,
	|	ДанныеДляАнализа.ЭтоДобавленный        КАК ЭтоДобавленный,
	|	ДанныеДляАнализа.ИсходныйШтрихкод      КАК ИсходныйШтрихкод,
	|	ДанныеДляАнализа.ХэшИсходногоШтрихкода КАК ХэшИсходногоШтрихкода,
	|	ДанныеДляАнализа.Ссылка                КАК Ссылка,
	|	ДанныеДляАнализа.ЗначениеШтрихкода     КАК ЗначениеШтрихкода,
	|	ДанныеДляАнализа.ХешСумма              КАК ХешСумма,
	|	ДанныеДляАнализа.ХешСуммаНормализации  КАК ХешСуммаНормализации,
	|	ДанныеДляАнализа.ДатаУпаковки          КАК ДатаУпаковки,
	|	ДанныеДляАнализа.ТипШтрихкода          КАК ТипШтрихкода,
	|	ДанныеДляАнализа.ТипУпаковки           КАК ТипУпаковки,
	|	ДанныеДляАнализа.Номенклатура          КАК Номенклатура,
	|	ДанныеДляАнализа.Характеристика        КАК Характеристика,
	|	ДанныеДляАнализа.Серия                 КАК Серия,
	|	ВЫБОР
	|		КОГДА ДанныеДляАнализа.Количество = 0 И ДанныеДляАнализа.КоличествоПотребительскихУпаковок = 0
	|			ТОГДА 1
	|			ИНАЧЕ ДанныеДляАнализа.Количество
	|	КОНЕЦ                                  КАК Количество,
	|	ДанныеДляАнализа.КоличествоПотребительскихУпаковок КАК КоличествоПотребительскихУпаковок,
	|	ДанныеДляАнализа.ШтрихкодСовпадает     КАК ШтрихкодСовпадает
	|ИЗ
	|	ДанныеДляАнализа КАК ДанныеДляАнализа
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭтоДобавленный,
	|	ШтрихкодСовпадает УБЫВ
	|ИТОГИ ПО
	|	ХэшИсходногоШтрихкода";

	Если ЗначениеЗаполнено(ТипыУпаковок) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "1 = 1", "ШтрихкодыУпаковокТоваров.ТипУпаковки В(&ТипыУпаковок)");
		Запрос.УстановитьПараметр("ТипыУпаковок", ТипыУпаковок);
	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		Возврат ШтрихкодыУпаковок;
	КонецЕсли;

	ВыборкаИсходныйШтрихкод = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаИсходныйШтрихкод.Следующий() Цикл
		ВыборкаДетальныхЗаписей = ВыборкаИсходныйШтрихкод.Выбрать();
		ВыборкаДетальныхЗаписей.Следующий();

		ДанныеУпаковки = ШтрихкодыУпаковок.Добавить();
		ЗаполнитьЗначенияСвойств(ДанныеУпаковки, ВыборкаДетальныхЗаписей);
		ДанныеУпаковки.Штрихкод          = ВыборкаДетальныхЗаписей.ИсходныйШтрихкод;
		ДанныеУпаковки.ШтрихкодСовпадает = (ДанныеУпаковки.Штрихкод = ДанныеУпаковки.ЗначениеШтрихкода);
	КонецЦикла;

	ШтрихкодыУпаковок.Индексы.Добавить("Штрихкод, ХешСумма");
	ШтрихкодыУпаковок.Индексы.Добавить("Штрихкод, ХешСуммаНормализации");

	Возврат ШтрихкодыУпаковок;

КонецФункции

// Помещает дерево упаковок во временное хранилище. Адрес дерева упаковок помещает в каждые данные обработанных штрихкодов.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования).
Процедура ПоместитьДеревоУпаковокВоВременноеХранилище(ДанныеПоШтрихкодам, ПараметрыСканирования) Экспорт

	ВложенныеШтрихкоды                  = Неопределено;
	ВложенныеШтрихкодыИСМПНормализованы = Ложь;
	ВложенныеШтрихкодыМОТПНормализованы = Ложь;

	// Если выключены запросы к ГИС МТ, то ненайденные упаковки необходимо преобразовать в дерево
	// для корректной обработке в формах проверки и подбора
	Если Не ПараметрыСканирования.РазрешенаОбработкаНеНайденныхЛогистическихУпаковок
		И (ПараметрыСканирования.ИспользуетсяСоответствиеШтрихкодовСтрокДерева
			Или ДанныеПоШтрихкодам.ИерархическаяЗагрузкаИзТСД)
		И ДанныеПоШтрихкодам.ВложенныеШтрихкоды = Неопределено
		Тогда

		Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл

			Если СтрокаДанных.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка Тогда

				Если ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияИСМП(СтрокаДанных.ВидПродукции) Тогда

					Если ВложенныеШтрихкоды = Неопределено Тогда
						ВложенныеШтрихкоды = ИнициализацияВложенныхШтрихкодов();
					КонецЕсли;

					Если Не ВложенныеШтрихкодыИСМПНормализованы Тогда
						МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
						МодульШтрихкодированиеИСМПСлужебный.НормализоватьДанныеВложенныхШтрихкодов(
							ВложенныеШтрихкоды, ПараметрыСканирования);
						ВложенныеШтрихкодыИСМПНормализованы = Истина;
					КонецЕсли;

				КонецЕсли;

				Если ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияМОТП(СтрокаДанных.ВидПродукции) Тогда

					Если ВложенныеШтрихкоды = Неопределено Тогда
						ВложенныеШтрихкоды = ИнициализацияВложенныхШтрихкодов();
					КонецЕсли;

					Если Не ВложенныеШтрихкодыМОТПНормализованы Тогда
						МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
						МодульШтрихкодированиеМОТП.НормализоватьДанныеВложенныхШтрихкодов(
							ВложенныеШтрихкоды, ПараметрыСканирования);
						ВложенныеШтрихкодыМОТПНормализованы = Истина;
					КонецЕсли;

				КонецЕсли;

				СтрокаДерева = ВложенныеШтрихкоды.ДеревоУпаковок.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаДанных);
				СтрокаДанных.СтрокаДерева = СтрокаДерева;

				Если ЗначениеЗаполнено(СтрокаДанных.ТекстОшибки) Тогда
					ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок = Истина;
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

		Если ВложенныеШтрихкоды <> Неопределено Тогда
			ДанныеПоШтрихкодам.ВложенныеШтрихкоды = ВложенныеШтрихкоды;
		КонецЕсли;

	КонецЕсли;
	
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Идентификатор = ПараметрыСканирования.ИдентификаторФормы;
	Если Идентификатор = Неопределено Тогда
		Идентификатор = Новый УникальныйИдентификатор;
	КонецЕсли;

	СортироватьДанные = ПараметрыСканирования.ИспользуетсяСоответствиеШтрихкодовСтрокДерева;
	Если СортироватьДанные
		И ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено Тогда

		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеПоШтрихкодам.ВложенныеШтрихкоды, "ДеревоУпаковок")
			И ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок <> Неопределено Тогда
			ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок.Строки.Сортировать("Штрихкод", Истина);
		КонецЕсли;

		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеПоШтрихкодам.ВложенныеШтрихкоды, "МаркированныеТовары")
			И ДанныеПоШтрихкодам.ВложенныеШтрихкоды.МаркированныеТовары <> Неопределено Тогда
			ДанныеПоШтрихкодам.ВложенныеШтрихкоды.МаркированныеТовары.Сортировать("Штрихкод");
		КонецЕсли;

	КонецЕсли;

	АдресДереваУпаковок = ПоместитьВоВременноеХранилище(ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок, Идентификатор);

	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл

		Если СтрокаДанных.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			Продолжить;
		КонецЕсли;

		СтрокаДанных.АдресДереваУпаковок = АдресДереваУпаковок;

	КонецЦикла;
	
КонецПроцедуры

// Формирует данные документа основания и помещает их во временное хранилище.
//
// Параметры:
//  ПараметрыСканирования - См. ПараметрыСканирования
Процедура СформироватьДанныеДокументаОснования(ПараметрыСканирования) Экспорт

	Если ЗначениеЗаполнено(ПараметрыСканирования.ДокументОснование)
		И Не ЭтоАдресВременногоХранилища(ПараметрыСканирования.АдресДанныхДокументаОснования) Тогда

		ТаблицаДанныхДокументаОснования = ИнициализицияТаблицыДанныхДокумента(ПараметрыСканирования);
		ДанныеСформированы = Ложь;

		Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияИСМПВЕТИС");
			Модуль.СформироватьДанныеДокументаОснования(
				ТаблицаДанныхДокументаОснования, ПараметрыСканирования.ДокументОснование, ДанныеСформированы);
		КонецЕсли;

		Если Не ДанныеСформированы И ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ЕГАИС") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияЕГАИСИСМП");
			Модуль.СформироватьДанныеДокументаОснования(
				ТаблицаДанныхДокументаОснования, ПараметрыСканирования.ДокументОснование, ДанныеСформированы);
		КонецЕсли;

		Если Не ДанныеСформированы Тогда
			ШтрихкодированиеИСПереопределяемый.СформироватьДанныеДокументаОснования(
				ПараметрыСканирования, ТаблицаДанныхДокументаОснования);
		КонецЕсли;

		ТаблицаДанныхДокументаОснования.Индексы.Добавить("Номенклатура");
		ТаблицаДанныхДокументаОснования.Индексы.Добавить("Номенклатура, Характеристика");
		ТаблицаДанныхДокументаОснования.Индексы.Добавить("Номенклатура, Характеристика, Серия");

		ПараметрыСканирования.АдресДанныхДокументаОснования = ПоместитьВоВременноеХранилище(
			ТаблицаДанныхДокументаОснования,
			ПараметрыСканирования.ИдентификаторФормы);

	КонецЕсли;

КонецПроцедуры

// Получает данные документа основания из временного хранилища. В случае отсутствия данных в хранилище - формирует их.
//
// Параметры:
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  ТаблицаЗначений, Неопределено - Описание:
//   * Номенклатура - ОпределяемыйТип.Номенклатура - Номенклатура.
//   * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - Характеристика.
//   * Серия - ОпределяемыйТип.СерияНоменклатуры - Серия номенклатуры.
//   * Количество - Число - количество единиц.
Функция ДанныеДокументаОснования(ПараметрыСканирования) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыСканирования.ДокументОснование) Тогда
		Если Не ЭтоАдресВременногоХранилища(ПараметрыСканирования.АдресДанныхДокументаОснования) Тогда

			СформироватьДанныеДокументаОснования(ПараметрыСканирования);

		КонецЕсли;

		Возврат ПолучитьИзВременногоХранилища(ПараметрыСканирования.АдресДанныхДокументаОснования);

	Иначе

		Возврат Неопределено;

	КонецЕсли;
	
КонецФункции

Процедура ПроверитьСоответствиеДетализацииРежимуСканирования(ДанныеПоШтрихкодам, ПараметрыСканирования) Экспорт

	ДопустимыеВидыУпаковок = Новый Соответствие;
	ДопустимыеВидыУпаковок.Вставить(Перечисления.ВидыУпаковокИС.Потребительская, Истина);
	
	Если ПараметрыСканирования.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковки
		Или ПараметрыСканирования.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковкиСПотребительскими
		Или ПараметрыСканирования.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками
		Или ПараметрыСканирования.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.Полная
		Или Не ЗначениеЗаполнено(ПараметрыСканирования.ДетализацияСтруктурыХранения) Тогда
		ДопустимыеВидыУпаковок.Вставить(Перечисления.ВидыУпаковокИС.Групповая, Истина);
		ДопустимыеВидыУпаковок.Вставить(Перечисления.ВидыУпаковокИС.Набор, Истина);
	КонецЕсли;
	
	Если ПараметрыСканирования.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками
		Или ПараметрыСканирования.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.ПалетыСМонотоварнымиКоробами
		Или ПараметрыСканирования.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.Полная
		Или Не ЗначениеЗаполнено(ПараметрыСканирования.ДетализацияСтруктурыХранения) Тогда
		ДопустимыеВидыУпаковок.Вставить(Перечисления.ВидыУпаковокИС.Логистическая, Истина);
	КонецЕсли;

	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл

		Если ЗначениеЗаполнено(СтрокаДанных.ТекстОшибки) Тогда
			Продолжить;
		КонецЕсли;

		Если Не ЗначениеЗаполнено(СтрокаДанных.ВидУпаковки) Тогда
			Продолжить;
		КонецЕсли;

		Если ДопустимыеВидыУпаковок.Получить(СтрокаДанных.ВидУпаковки) = Неопределено Тогда

			ДанныеПоШтрихкодам.ЕстьОшибки  = Истина;
			Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
				ДанныеПоШтрихкодам.ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Запрещено сканировать логистические упаковки в форму документа с детализацией %1.
					           |Сканирование таких кодов необходимо выполнять в форме проверки и подбора.'"),
					ПараметрыСканирования.ДетализацияСтруктурыХранения);
			ИначеЕсли СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
				ДанныеПоШтрихкодам.ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Запрещено сканировать групповые упаковки в форму документа с детализацией %1.
					           |Сканирование таких кодов необходимо выполнять в форме проверки и подбора.'"),
					ПараметрыСканирования.ДетализацияСтруктурыХранения);
			ИначеЕсли СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор Тогда
				ДанныеПоШтрихкодам.ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Запрещено сканировать упаковки наборов в форму документа с детализацией %1.
					           |Сканирование таких кодов необходимо выполнять в форме проверки и подбора.'"),
					ПараметрыСканирования.ДетализацияСтруктурыХранения);
			КонецЕсли;

			Прервать;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура ОбновитьШтрихкодыУпаковок(ЭлементыДляИзменения, ПараметрыСканирования) Экспорт

	НачатьТранзакцию();
	Попытка

		Для Каждого КлючИЗначение Из ЭлементыДляИзменения Цикл
			ОбновитьСоздатьШтрихкодУпаковкиДанныхШтрихкода(
				КлючИЗначение.Ключ, КлючИЗначение.Значение, ПараметрыСканирования);
		КонецЦикла;

		ЗафиксироватьТранзакцию();

	Исключение

		ОтменитьТранзакцию();

		ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось записать или обновить элементы справочника Штрихкоды упаковок товаров по причине: %1'"),
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

		ЗаписьЖурналаРегистрации(
				НСтр("ru = 'ГосИС: Запись элементы справочника Штрихкоды упаковок товаров'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.ШтрихкодыУпаковокТоваров, Неопределено,
			ТекстСообщения);

	КонецПопытки;

КонецПроцедуры

// Дополняет коллекции Дерево упаковок и таблицу значений маркируемая продукция в данных по штрихкодам значениями
// вложенных штрихкодов.
//
// Параметры:
//  ДанныеПоШтрихкодам - См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияДанныхПоШтрихкодам
//  ВложенныеШтрихкодыПоДаннымСервиса - См. ИнициализацияВложенныхШтрихкодов
//  ПараметрыСканирования - См. ПараметрыСканирования
//  ОтборПоВидуПродукции - Неопределено, ПеречислениеСсылка.ВидыПродукцииИС - фильтр для добавления
//  КопируемыеКолонки - Неопределено, Строка - колонки которые будут скопированы
Процедура ДобавитьВДанныеШтрихкодовВложенныеШтрихкоды(ДанныеПоШтрихкодам, ВложенныеШтрихкодыПоДаннымСервиса, ПараметрыСканирования, ОтборПоВидуПродукции = Неопределено, КопируемыеКолонки = Неопределено) Экспорт
	
	Если ВложенныеШтрихкодыПоДаннымСервиса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды = Неопределено Тогда
		ДанныеПоШтрихкодам.ВложенныеШтрихкоды = ВложенныеШтрихкодыПоДаннымСервиса;
		Возврат;
	КонецЕсли;
	
	ДеревоИзвестныхУпаковок       = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок;
	ДеревоУпаковокПоДаннымСервиса = ВложенныеШтрихкодыПоДаннымСервиса.ДеревоУпаковок;

	// Если сканирование выполняется в форме проверки и подбора, то заполнение таблицы маркированных товаров не требуется
	Если Не ПараметрыСканирования.ИспользуетсяСоответствиеШтрихкодовСтрокДерева Тогда
		СоответствиеСтарыхИНовыхСтрокДерева = Новый Соответствие;
	Иначе
		СоответствиеСтарыхИНовыхСтрокДерева = Неопределено;
	КонецЕсли;
	
	ИмяПоляИндекса = "НормализованныйШтрихкод";
	СоответствиеСтрокДереваУпаковок = ПроверкаИПодборПродукцииИСКлиентСервер.СоответствиеСтрокДереваУпаковок(
		ДеревоИзвестныхУпаковок, ИмяПоляИндекса);

	СтрокиДереваКУдалению = Новый Соответствие;
	ЕстьКолонкаСодержитСерыеКоды = ДеревоУпаковокПоДаннымСервиса.Колонки.Найти("СодержитСерыеКоды") <> Неопределено;

	Для Каждого СтрокаИсточника Из ДеревоУпаковокПоДаннымСервиса.Строки Цикл

		НеДополнятьСтрокиДерева = Ложь;

		НайденнаяСтрока = СоответствиеСтрокДереваУпаковок[СтрокаИсточника[ИмяПоляИндекса]];
		Если НайденнаяСтрока = Неопределено Тогда
			СтрокаПриемника = ДеревоИзвестныхУпаковок.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПриемника, СтрокаИсточника);
		Иначе
			СтрокаПриемника = НайденнаяСтрока;

			Если НайденнаяСтрока.Строки.Количество()
				И Не (ЕстьКолонкаСодержитСерыеКоды
				      И СтрокаИсточника.СодержитСерыеКоды И СтрокаИсточника.Строки.Количество() = 0) Тогда

				НеДополнятьСтрокиДерева = Истина;
				// Если дополняемый узел дерева уже имеет вложенные строки, то
				// строки из источника игнорируются (указанное поведение используется в документе Маркировка товаров).
				// В случае, если дерево упаковок по данным ТСД дополняется вложениями, например, блоки табака дополняются пачками.
				СоответствиеВложенныхСтрокДереваУпаковокИсточника = ПроверкаИПодборПродукцииИСКлиентСервер.СоответствиеСтрокДереваУпаковок(
					СтрокаИсточника, ИмяПоляИндекса);
				Для Каждого КлючИЗначение Из СоответствиеВложенныхСтрокДереваУпаковокИсточника Цикл

					ВложеннаяСтрокаИсточника = КлючИЗначение.Значение;

					СтрокаДереваПриемника = СоответствиеСтрокДереваУпаковок[КлючИЗначение.Ключ];
					Если СтрокаДереваПриемника = Неопределено Тогда
						Продолжить;
					КонецЕсли;

					Если КопируемыеКолонки <> Неопределено
						И Не ЗначениеЗаполнено(СтрокаДереваПриемника.Номенклатура) Тогда
						ЗаполнитьЗначенияСвойств(СтрокаДереваПриемника, ВложеннаяСтрокаИсточника, КопируемыеКолонки);
					Иначе
						ИсходноеЗначениеВходящий = СтрокаДереваПриемника.Входящий;
						ЗаполнитьЗначенияСвойств(СтрокаДереваПриемника, ВложеннаяСтрокаИсточника);
						СтрокаДереваПриемника.Входящий = ИсходноеЗначениеВходящий;
					КонецЕсли;

					Если СтрокаДереваПриемника.Строки.Количество() = 0
						И ВложеннаяСтрокаИсточника.Строки.Количество() > 0 Тогда

						Если СоответствиеСтарыхИНовыхСтрокДерева <> Неопределено Тогда
							СоответствиеСтарыхИНовыхСтрокДерева.Вставить(ВложеннаяСтрокаИсточника, СтрокаДереваПриемника);
						КонецЕсли;

						ДополнитьДеревоУпаковок(
							СтрокаДереваПриемника, ВложеннаяСтрокаИсточника,
							СоответствиеСтарыхИНовыхСтрокДерева, ОтборПоВидуПродукции);

					КонецЕсли;

					Если ЕстьКолонкаСодержитСерыеКоды И ВложеннаяСтрокаИсточника.СодержитСерыеКоды И ВложеннаяСтрокаИсточника.Строки.Количество() = 0 Тогда
						ЗаполнитьСтрокиДереваКУдалению(СтрокаДереваПриемника.Строки, СтрокиДереваКУдалению);
						СтрокаДереваПриемника.Строки.Очистить();
					КонецЕсли;

				КонецЦикла;

			КонецЕсли;

			Если ЕстьКолонкаСодержитСерыеКоды
				И СтрокаИсточника.СодержитСерыеКоды И СтрокаИсточника.Строки.Количество() = 0 Тогда
				ЗаполнитьСтрокиДереваКУдалению(СтрокаПриемника.Строки, СтрокиДереваКУдалению);
				СтрокаПриемника.КоличествоПотребительскихУпаковок = СтрокаИсточника.КоличествоПотребительскихУпаковок;
				СтрокаПриемника.Строки.Очистить();
			КонецЕсли;

		КонецЕсли;
		
		Если СоответствиеСтарыхИНовыхСтрокДерева <> Неопределено Тогда
			СоответствиеСтарыхИНовыхСтрокДерева.Вставить(СтрокаИсточника, СтрокаПриемника);
		КонецЕсли;

		Если НеДополнятьСтрокиДерева Тогда
			Продолжить;
		КонецЕсли;
		
		ДополнитьДеревоУпаковок(
			СтрокаПриемника, СтрокаИсточника, СоответствиеСтарыхИНовыхСтрокДерева, ОтборПоВидуПродукции);
		
	КонецЦикла;
	
	Индекс = ДанныеПоШтрихкодам.ДанныеКодовМаркировки.Количество() - 1;
	Пока Индекс >= 0 Цикл

		СтрокаДанных = ДанныеПоШтрихкодам.ДанныеКодовМаркировки[Индекс];

		Если СтрокаДанных.СтрокаДерева <> Неопределено
			И СтрокиДереваКУдалению[СтрокаДанных.СтрокаДерева] <> Неопределено Тогда
			ДанныеПоШтрихкодам.ДанныеКодовМаркировки.Удалить(СтрокаДанных);
		КонецЕсли;

		Индекс = Индекс - 1;

	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьТаблицуДанныеКодовМаркировкиПоСтрокамДереваУпаковок(ДанныеПоШтрихкодам, ДеревоУпаковок, Изменения = Неопределено, ПараметрыСканирования = Неопределено, ПараметрыДополнения = Неопределено) Экспорт

	Если ПараметрыДополнения = Неопределено Тогда
		ПараметрыДополнения = ШтрихкодированиеОбщегоНазначенияИС.ПараметрыДополненияТаблицыДанныеКодовМаркировки(
			ДанныеПоШтрихкодам, ДеревоУпаковок);
	КонецЕсли;
	
	ДанныеКодовМаркировки = ДанныеПоШтрихкодам.ДанныеКодовМаркировки;

	ПараметрыОтбора = Новый Структура("НормализованныйШтрихкод");

	ЕстьКолонкаСодержитСерыеКоды = Неопределено;
	Если ТипЗнч(Изменения) = Тип("Структура") Тогда
		ЗапоминатьСтрокиСЗаполненнымGTIN = Изменения.Свойство("ЗаполненGTIN");
	Иначе
		ЗапоминатьСтрокиСЗаполненнымGTIN = Ложь;
	КонецЕсли;

	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл

		ДополнитьТаблицуДанныеКодовМаркировкиПоСтрокамДереваУпаковок(
			ДанныеПоШтрихкодам, СтрокаДерева, Изменения, ПараметрыСканирования, ПараметрыДополнения);

		Если Не ПараметрыДополнения.ЭтоЗагрузкаИзТСД Тогда
			Если ЗначениеЗаполнено(СтрокаДерева.НормализованныйШтрихкод) Тогда
				ПараметрыОтбора.НормализованныйШтрихкод = СтрокаДерева.НормализованныйШтрихкод;
				НайденныеСтроки = ДанныеКодовМаркировки.НайтиСтроки(ПараметрыОтбора);
			Иначе
				НайденныеСтроки = ДанныеКодовМаркировки.НайтиСтроки(
					Новый Структура("Штрихкод", СтрокаДерева.Штрихкод));
			КонецЕсли;
		КонецЕсли;

		Если Не ПараметрыДополнения.ЭтоЗагрузкаИзТСД И НайденныеСтроки.Количество() Тогда

			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл

				ПоляСкопированы = Ложь;

				ПроверитьЗаполнениeGTIN = Не ЗначениеЗаполнено(НайденнаяСтрока.GTIN);

				Если ПараметрыДополнения.ПараметрыСлиянияДанных.ЗаполнятьНоменклатуру
					И ЗначениеЗаполнено(СтрокаДерева.Номенклатура)
					И НайденнаяСтрока.Номенклатура <> СтрокаДерева.Номенклатура Тогда
					ЗаполнитьЗначенияСвойств(НайденнаяСтрока, СтрокаДерева, ПараметрыДополнения.ПараметрыСлиянияДанных.КолонкиНоменклатуры);
					ПоляСкопированы = Истина;
				КонецЕсли;

				Если ЗначениеЗаполнено(ПараметрыДополнения.ПараметрыСлиянияДанных.КолонкиДанныеСервиса)
					И ЗначениеЗаполнено(СтрокаДерева.Статус)
					И Не ЗначениеЗаполнено(НайденнаяСтрока.Статус) Тогда
					ЗаполнитьЗначенияСвойств(НайденнаяСтрока, СтрокаДерева, ПараметрыДополнения.ПараметрыСлиянияДанных.КолонкиДанныеСервиса);
					ПоляСкопированы = Истина;
				КонецЕсли;
				
				Для Каждого ИмяКолонки Из ПараметрыДополнения.ПараметрыСлиянияДанных.Прочие Цикл
					Значение = СтрокаДерева[ИмяКолонки];
					Если ЗначениеЗаполнено(Значение)
						И НайденнаяСтрока[ИмяКолонки] <> Значение Тогда
						Если ИмяКолонки = "GTIN"
							И СтрокаДерева.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Потребительская Тогда
							// Только потребительские упаковки могут наследовать GTIN из ГИС МТ
						ИначеЕсли ИмяКолонки = "EAN"
							И СтрокаДерева.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Потребительская Тогда
							// Только потребительские упаковки могут наследовать GTIN из ГИС МТ
						Иначе
							НайденнаяСтрока[ИмяКолонки] = Значение;
							ПоляСкопированы = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;

				Если Не ПараметрыДополнения.ЗаполнятьСтрокуДерева
					И НайденнаяСтрока.СтрокаДерева <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(НайденнаяСтрока.СтрокаДерева, НайденнаяСтрока, ПараметрыДополнения.ПараметрыСлиянияДанных.ИменаКолонокДляКопированияСвойств);
				КонецЕсли;

				Если ТипЗнч(Изменения) = Тип("Структура") Тогда
					Изменения.ИзмененныеСтроки.Добавить(НайденнаяСтрока);

					Если ЕстьКолонкаСодержитСерыеКоды = Неопределено Тогда
						ЕстьКолонкаСодержитСерыеКоды = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НайденнаяСтрока, "СодержитСерыеКоды")
							И Изменения.Свойство("СодержитСерыеКоды");
					КонецЕсли;

					Если ЕстьКолонкаСодержитСерыеКоды
						И НайденнаяСтрока.СодержитСерыеКоды
						И Не ЗначениеЗаполнено(НайденнаяСтрока.ШтрихкодУпаковки) Тогда
						Изменения.СодержитСерыеКоды = Истина;
						НайденнаяСтрока.Количество = 0;
					КонецЕсли;

				КонецЕсли;
				
				// Если строка дерева уже заполнена, значит дерево пришло в качестве исходных данных (загрузка кодов из заказа)
				Если НайденнаяСтрока.СтрокаДерева = СтрокаДерева Тогда
					Продолжить;
				КонецЕсли;
				
				// Вложенные коды упаковки были дозагружены из ГИС МТ
				НайденнаяСтрока.Идентифицирован = Истина;

				Если НайденнаяСтрока.СтрокаДерева = Неопределено
					И ПараметрыДополнения.ЗаполнятьСтрокуДерева Тогда
					НайденнаяСтрока.СтрокаДерева = СтрокаДерева;
					НайденнаяСтрока.НайденВоВложенныхУпаковках = Истина;
				КонецЕсли;
				
				Если ПараметрыДополнения.ЕстьКолонкаТипУпаковки
					И Не ЗначениеЗаполнено(НайденнаяСтрока.ТипУпаковки)
					И ЗначениеЗаполнено(СтрокаДерева.ТипУпаковки) Тогда
					НайденнаяСтрока.ТипУпаковки = СтрокаДерева.ТипУпаковки;
				КонецЕсли;

				Если Не ПоляСкопированы Тогда
					Продолжить;
				КонецЕсли;

				Если Не ЗначениеЗаполнено(НайденнаяСтрока.Номенклатура)
					И НайденнаяСтрока.СписокНоменклатуры.Количество() = 0
					И Не НайденнаяСтрока.ЭтоКодВводаОстатков
					И ЗначениеЗаполнено(НайденнаяСтрока.GTIN) Тогда
					НайденнаяСтрока.ТребуетсяСопоставление = Истина;
					Если ПроверитьЗаполнениeGTIN И ЗапоминатьСтрокиСЗаполненнымGTIN Тогда
						Изменения.ЗаполненGTIN.Добавить(НайденнаяСтрока);
					КонецЕсли;
				КонецЕсли;

			КонецЦикла;

		Иначе

			Входящий = (СтрокаДерева.Родитель = Неопределено Или (ПараметрыДополнения.ЕстьКолонкаВходящий И СтрокаДерева.Входящий));

			НоваяСтрока = ДанныеКодовМаркировки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
			
			Если ЗначениеЗаполнено(СтрокаДерева.ВидПродукции) Тогда
				НоваяСтрока.ВидыПродукцииКодаМаркировки.Добавить(СтрокаДерева.ВидПродукции);
			ИначеЕсли ПараметрыДополнения.ЕстьКолонкаТипУпаковки
				И СтрокаДерева.ТипУпаковки <> Перечисления.ТипыУпаковок.МаркированныйТовар Тогда

				ВидыПродукции = ВидПродукцииУпаковкиПоСоставу(СтрокаДерева);
				Если ВидыПродукции.Количество() = 1 И ЗначениеЗаполнено(ВидыПродукции[0]) Тогда
					НоваяСтрока.ВидПродукции = ВидыПродукции[0];
				КонецЕсли;
			Иначе
				ЭлементДляРазбора = Новый Массив;
				ЭлементДляРазбора.Добавить(НоваяСтрока);
				ШтрихкодированиеОбщегоНазначенияИС.НормализоватьИРазобратьНаСоставляющиеКодыМаркировки(ДанныеПоШтрихкодам, ПараметрыСканирования,, ЭлементДляРазбора);
			КонецЕсли;

			НоваяСтрока.Входящий            = Входящий;
			НоваяСтрока.Идентифицирован     = Не ПараметрыДополнения.ЭтоЗагрузкаИзТСД;
			НоваяСтрока.ЭтоКодВводаОстатков = РазборКодаМаркировкиИССлужебныйКлиентСервер.ЭтоШтрихкодВводаОстатков(НоваяСтрока.Штрихкод);
			
			Если НоваяСтрока.СтрокаДерева = Неопределено
				И ПараметрыДополнения.ЗаполнятьСтрокуДерева Тогда
				НоваяСтрока.СтрокаДерева = СтрокаДерева;
				// При загрузке из ТСД первоначально заполняются вложенные упаковки
				НоваяСтрока.НайденВоВложенныхУпаковках = ПараметрыДополнения.ЭтоЗагрузкаИзТСД;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(НоваяСтрока.Номенклатура)
				И НоваяСтрока.СписокНоменклатуры.Количество() = 0
				И Не НоваяСтрока.ЭтоКодВводаОстатков
				И ЗначениеЗаполнено(НоваяСтрока.GTIN) Тогда
				НоваяСтрока.ТребуетсяСопоставление = Истина;
			КонецЕсли;

			Если ТипЗнч(Изменения) = Тип("Массив") Тогда
				Изменения.Добавить(НоваяСтрока);
			ИначеЕсли ТипЗнч(Изменения) = Тип("Структура") Тогда
				Изменения.ДобавленныеСтроки.Добавить(НоваяСтрока);
				Изменения.ИзмененныеСтроки.Добавить(НоваяСтрока);
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

// Создает элемент справочника штрихкоды упаковок на основании данных штрихкода.
//
// Параметры:
//  ДанныеШтрихкода - См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьДанныеШтрихкода.
//  ПараметрыСканирования - См. ПараметрыСканирования
//  РезультатОбработки - Неопределено, см. ШтрихкодированиеОбщегоНазначенияИС.РезультатОбработкиШтрихкодаМаркируемойПродукции
// Возвращаемое значение:
//  СправочникСсылка.ШтрихкодыУпаковокТоваров - ссылка на созданный элемент справочника.
Функция СоздатьМаркированныйТоварПоДаннымШтрихкода(ДанныеШтрихкода, ПараметрыСканирования, РезультатОбработки = Неопределено) Экспорт
	
	СоздаватьШтрихкодУпаковки = ПараметрыСканирования.СоздаватьШтрихкодУпаковки;
	
	Если Не СоздаватьШтрихкодУпаковки
		И РезультатОбработки <> Неопределено
		И РезультатОбработки.ТребуетсяВскрытиеПотребительскойУпаковки Тогда
		СоздаватьШтрихкодУпаковки = Истина;
	КонецЕсли;
	
	Если Не СоздаватьШтрихкодУпаковки Тогда
		Возврат Справочники.ШтрихкодыУпаковокТоваров.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеШтрихкода.ШтрихкодУпаковки) Тогда
		Возврат ДанныеШтрихкода.ШтрихкодУпаковки;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура)
		И Не ПараметрыСканирования.РазрешенаОбработкаКодовСПустойНоменклатурой Тогда

		Возврат Справочники.ШтрихкодыУпаковокТоваров.ПустаяСсылка();

	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеШтрихкода.ТипУпаковки) Тогда

		Если ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
			ДанныеШтрихкода.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
		ИначеЕсли ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
			ДанныеШтрихкода.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
		ИначеЕсли ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор Тогда
			ДанныеШтрихкода.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка;
		ИначеЕсли ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
			Если ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура) Тогда
				ДанныеШтрихкода.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
			Иначе
				ДанныеШтрихкода.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка;
			КонецЕсли;
		Иначе
			ДанныеШтрихкода.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
		КонецЕсли;

	КонецЕсли;
	
	ДанныеНовойУпаковки = Справочники.ШтрихкодыУпаковокТоваров.СтруктураСозданияШтрихкодаУпаковки();
	ЗаполнитьЗначенияСвойств(ДанныеНовойУпаковки, ДанныеШтрихкода);

	Если ДанныеНовойУпаковки.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
		Если ДанныеШтрихкода.ВидПродукции = Перечисления.ВидыПродукцииИС.Алкогольная
			И ДанныеШтрихкода.Коэффициент <> Неопределено И ДанныеШтрихкода.Коэффициент > 0 Тогда
			ДанныеНовойУпаковки.Количество = ДанныеШтрихкода.Коэффициент;
			ДанныеНовойУпаковки.КоличествоПотребительскихУпаковок = 1;
		ИначеЕсли Не ЗначениеЗаполнено(ДанныеНовойУпаковки.Количество) Тогда
			Если Не ДанныеШтрихкода.ПроизвольнаяЕдиницаУчета Тогда
				ДанныеНовойУпаковки.Количество = 1;
				ДанныеШтрихкода.Количество = 1;
			Иначе
				ДанныеНовойУпаковки.Количество = ДанныеШтрихкода.Коэффициент;
				ДанныеНовойУпаковки.КоличествоПотребительскихУпаковок = 1;
				ДанныеШтрихкода.Количество = ДанныеШтрихкода.Коэффициент;
			КонецЕсли;
		Иначе
			Если ДанныеШтрихкода.Количество <> 1 Тогда
				ДанныеНовойУпаковки.КоличествоПотребительскихУпаковок = 1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если ДанныеНовойУпаковки.ТипУпаковки <> Перечисления.ТипыУпаковок.МаркированныйТовар
		И ДанныеШтрихкода.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Набор
		И КоличествоСоответствуетИндивидуальнойПотребительскойУпаковке(ДанныеШтрихкода) Тогда

		Если (ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияМОТП(ДанныеШтрихкода.ВидПродукции) Или ДанныеШтрихкода.ПрисутствуетТабачнаяПродукция)
				И ДанныеШтрихкода.КоличествоПотребительскихУпаковок > 1 Тогда
			ДанныеНовойУпаковки.Количество = ДанныеНовойУпаковки.Количество * ДанныеШтрихкода.КоличествоПотребительскихУпаковок;
		ИначеЕсли ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияИСМП(ДанныеШтрихкода.ВидПродукции)
				И ДанныеШтрихкода.КоличествоПотребительскихУпаковок > 1 Тогда
			ДанныеНовойУпаковки.Количество = ДанныеНовойУпаковки.Количество * ДанныеШтрихкода.КоличествоПотребительскихУпаковок;
		Иначе
			Возврат Справочники.ШтрихкодыУпаковокТоваров.ПустаяСсылка();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеШтрихкода.КоличествоПотребительскихУпаковок)
				И ДанныеШтрихкода.КоличествоПотребительскихУпаковок <> ДанныеШтрихкода.Коэффициент Тогда
			ДанныеНовойУпаковки.КоличествоПотребительскихУпаковок = ДанныеШтрихкода.КоличествоПотребительскихУпаковок;
		КонецЕсли;

	КонецЕсли;

	Поля = Новый Структура("ЧастичноеВыбытие", Ложь);
	ЗаполнитьЗначенияСвойств(Поля, ДанныеШтрихкода);
	Если Поля.ЧастичноеВыбытие Тогда
		Если ДанныеШтрихкода.ЧастичноеВыбытиеВариантУчета = Перечисления.ВариантыУчетаЧастичногоВыбытияИС.НастроеннаяНоменклатура Тогда
			ДанныеНовойУпаковки.Номенклатура = ДанныеШтрихкода.ЧастичноеВыбытиеНоменклатура;
			ДанныеНовойУпаковки.Характеристика = ДанныеШтрихкода.ЧастичноеВыбытиеХарактеристика;
		КонецЕсли;
		Описание = ОбщегоНазначенияИС.ОписаниеНоменклатуры(ДанныеНовойУпаковки.Номенклатура).Получить(ДанныеНовойУпаковки.Номенклатура);
		Если Описание.КоличествоВПотребительскойУпаковке <> 1 Тогда
			ДанныеНовойУпаковки.Количество = Описание.КоличествоВПотребительскойУпаковке;
			ДанныеНовойУпаковки.КоличествоПотребительскихУпаковок = 1;
		Иначе
			ДанныеНовойУпаковки.Количество = 1;
			ДанныеНовойУпаковки.КоличествоПотребительскихУпаковок = 0;
		КонецЕсли;
	КонецЕсли;

	ПараметрыЗаписи = Неопределено;
	Если ДанныеНовойУпаковки.ТипУпаковки <> Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
		ПараметрыЗаписи = Новый Структура("НеРассчитыватьКоличествоВложенныхШтрихкодов", Истина);
	КонецЕсли;

	СсылкаНаЭлемент = Справочники.ШтрихкодыУпаковокТоваров.СоздатьШтрихкодУпаковки(ДанныеНовойУпаковки,,ПараметрыЗаписи);

	Возврат СсылкаНаЭлемент;
	
КонецФункции

Функция ТоварныеГруппыВидовПродукции() Экспорт
	
	ТоварныеГруппыВидовПродукции = Новый Соответствие;
	
	ТоварныеГруппыВидовПродукции.Вставить(Перечисления.ВидыПродукцииИС.МедицинскиеИзделия, Перечисления.ВидыПродукцииИС.КреслаКоляски);
	ТоварныеГруппыВидовПродукции.Вставить(Перечисления.ВидыПродукцииИС.ТехническиеСредстваРеабилитации, Перечисления.ВидыПродукцииИС.КреслаКоляски);
	ТоварныеГруппыВидовПродукции.Вставить(Перечисления.ВидыПродукцииИС.КреслаКоляски, Перечисления.ВидыПродукцииИС.КреслаКоляски);
	
	ТоварныеГруппыВидовПродукции.Вставить(Перечисления.ВидыПродукцииИС.Пиво, Перечисления.ВидыПродукцииИС.Пиво);
	ТоварныеГруппыВидовПродукции.Вставить(Перечисления.ВидыПродукцииИС.ПивоВПотребительскихУпаковках, Перечисления.ВидыПродукцииИС.Пиво);
	
	ТоварныеГруппыВидовПродукции.Вставить(Перечисления.ВидыПродукцииИС.СоковаяПродукция, Перечисления.ВидыПродукцииИС.СоковаяПродукция);
	ТоварныеГруппыВидовПродукции.Вставить(Перечисления.ВидыПродукцииИС.БезалкогольныеНапитки, Перечисления.ВидыПродукцииИС.СоковаяПродукция);
	
	ТоварныеГруппыВидовПродукции.Вставить(Перечисления.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС, Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС);
	ТоварныеГруппыВидовПродукции.Вставить(Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС, Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС);
	
	ТоварныеГруппыВидовПродукции.Вставить(Перечисления.ВидыПродукцииИС.ЛегкаяПромышленность, Перечисления.ВидыПродукцииИС.ЛегкаяПромышленность);
	
	ТоварныеГруппыВидовПродукции.Вставить(Перечисления.ВидыПродукцииИС.КормаДляЖивотныхБезВЕТИС, Перечисления.ВидыПродукцииИС.КормаДляЖивотныхПодконтрольныеВЕТИС);
	ТоварныеГруппыВидовПродукции.Вставить(Перечисления.ВидыПродукцииИС.КормаДляЖивотныхПодконтрольныеВЕТИС, Перечисления.ВидыПродукцииИС.КормаДляЖивотныхПодконтрольныеВЕТИС);
	
	ТоварныеГруппыВидовПродукции.Вставить(Перечисления.ВидыПродукцииИС.КонсервированнаяПродукцияБезВЕТИС, Перечисления.ВидыПродукцииИС.КонсервированнаяПродукцияПодконтрольнаяВЕТИС);
	ТоварныеГруппыВидовПродукции.Вставить(Перечисления.ВидыПродукцииИС.КонсервированнаяПродукцияПодконтрольнаяВЕТИС, Перечисления.ВидыПродукцииИС.КонсервированнаяПродукцияПодконтрольнаяВЕТИС);
	
	Возврат ТоварныеГруппыВидовПродукции;
	
КонецФункции

Функция ВидыПродукцииПринадлежатТоварнойГруппе(ВидПродукции, ВидПродукцииВПулеКодовМаркировки, Кеш) Экспорт
	
	ТоварнаяГруппа = Кеш[ВидПродукции];
	
	Возврат ТоварнаяГруппа = Кеш[ВидПродукцииВПулеКодовМаркировки]
		И ТоварнаяГруппа <> Неопределено;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ТекстыОшибок

Функция ТекстОшибкиНеСоответствуетСтандартнойУпаковке(КодУпаковки, СтандартныйРазмер, ВложеноПоДаннымСервиса)

	ШаблонОшибки = НСтр("ru = 'По данным ГИС МТ в упаковке %3 ед. из %2'");
	Возврат СтрШаблон(
		ШаблонОшибки,
		КодУпаковки, СтандартныйРазмер, ВложеноПоДаннымСервиса);

КонецФункции

Функция ТекстОшибкиОтсутствуетПоДаннымСервисаИСМП()

	Возврат НСтр("ru='Отсутствует по данным сервиса ИС МП.'");

КонецФункции

Функция ТекстОшибкиОтсутствуетПоДаннымИнформационнойБазы()

	Возврат НСтр("ru='Отсутствует по данным ИБ.'");

КонецФункции

Функция ТекстОшибкиНеСоответствуетДокументуОснованию()

	Возврат НСтр("ru = 'Не соответствует документу-основанию'");
	
КонецФункции

#КонецОбласти

#Область ПроверкиШтрихкодовРасширенные

Процедура РасширенныеПроверкиШтрихкодов(ПараметрыСканирования, ДанныеПоШтрихкодам, ЕстьОшибки) Экспорт

	ПроверитьДоступныеОстаткиМаркируемойПродукции(ПараметрыСканирования, ДанныеПоШтрихкодам, ЕстьОшибки);
	ПроверитьНаВложенностьСтандартныхУпаковок(ПараметрыСканирования, ДанныеПоШтрихкодам, ЕстьОшибки);
	ПроверитьНаУжеДобавленныеДанныеВДокумент(ПараметрыСканирования, ДанныеПоШтрихкодам, ЕстьОшибки);
	ПроверитьНаСоответствиеДокументуОснованию(ПараметрыСканирования, ДанныеПоШтрихкодам, ЕстьОшибки);

КонецПроцедуры

// Выполняет контроль на соответствие маркируемой продукции по документу основания.
//
// Параметры:
//  СтрокаДанных - СтрокаТаблицыЗначений
//  ПараметрыСканирования - См. ПараметрыСканирования
//  ДанныеДокументаОснования - Неопределено, ТаблицаЗначений - кешированные данные документа-основания
//
// Возвращаемое значение:
//  Структура, Неопределено - См. ИнициализироватьРезультатОбработкиШтрихкода, ошибка несоответствия документу-основанию, если она выявлена 
//   до получения данных по кодам маркировки (по EAN/GTIN).
Функция ПроверитьНаСоответствиеДокументуОснованиюЧастично(СтрокаДанных, ПараметрыСканирования, ДанныеДокументаОснования) Экспорт
	
	Если ПараметрыСканирования.Свойство("ЭтоПроверкаКодовМаркировкиИСМП")
			И ПараметрыСканирования.ЭтоПроверкаКодовМаркировкиИСМП
		Или ПараметрыСканирования.Свойство("ЭтоОтчетПроизводственнойЛинии")
			И ПараметрыСканирования.ЭтоОтчетПроизводственнойЛинии Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не (ПараметрыСканирования.КонтрольРасхожденийСДокументомОснованием
		И ЗначениеЗаполнено(ПараметрыСканирования.ДокументОснование)) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДанныеДокументаОснования = Неопределено Тогда
		ДанныеДокументаОснования = ДанныеДокументаОснования(ПараметрыСканирования);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаДанных.Номенклатура) Тогда
		Возврат Неопределено;
	ИначеЕсли ЗначениеЗаполнено(СтрокаДанных.ТекстОшибки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Номенклатура",   СтрокаДанных.Номенклатура);
	ПараметрыПоиска.Вставить("Характеристика", СтрокаДанных.Характеристика);
	
	НайденныеСтроки = ДанныеДокументаОснования.НайтиСтроки(ПараметрыПоиска);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
	// Допустимо не указывать серию в одном из документов
	ИначеЕсли Не (ЗначениеЗаполнено(НайденныеСтроки[0].Серия) И ЗначениеЗаполнено(СтрокаДанных.Серия)) Тогда
		Возврат Неопределено;
	Иначе
		ПараметрыПоиска.Вставить("Серия", СтрокаДанных.Серия);
		НайденныеСтроки = ДанныеДокументаОснования.НайтиСтроки(ПараметрыПоиска);
	КонецЕсли;
		
	Если НайденныеСтроки.Количество() = 0 Тогда
		СтрокаДанных.ТекстОшибки                = ТекстОшибкиНеСоответствуетДокументуОснованию();
		РезультатОбработки                      = ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования);
		РезультатОбработки.ЕстьОшибки  = Истина;
		РезультатОбработки.ТекстОшибки = СтрокаДанных.ТекстОшибки;
		Возврат РезультатОбработки;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Выполняет контроль на соответствие маркируемой продукции по документу основания.
//
// Параметры:
//  ПараметрыСканирования - см. ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования
//  ДанныеПоШтрихкодам - см. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияДанныхПоШтрихкодам
//  ЕстьОшибки - Булево - Истина, если выявлена ошибка.
Процедура ПроверитьНаСоответствиеДокументуОснованию(ПараметрыСканирования, ДанныеПоШтрихкодам, ЕстьОшибки)
	
	Если ЕстьОшибки И Не ПараметрыСканирования.ПропускатьСтрокиСОшибкамиПриЗагрузкеИзТСД Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыСканирования.Свойство("ЭтоПроверкаКодовМаркировкиИСМП")
			И ПараметрыСканирования.ЭтоПроверкаКодовМаркировкиИСМП
		Или ПараметрыСканирования.Свойство("ЭтоОтчетПроизводственнойЛинии")
			И ПараметрыСканирования.ЭтоОтчетПроизводственнойЛинии Тогда
		Возврат;
	КонецЕсли;
	
	Если Не (ПараметрыСканирования.КонтрольРасхожденийСДокументомОснованием
		И ЗначениеЗаполнено(ПараметрыСканирования.ДокументОснование)) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДокументаОснования = ДанныеДокументаОснования(ПараметрыСканирования);
	ТекстОшибки = ТекстОшибкиНеСоответствуетДокументуОснованию();
	
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды = Неопределено
		Или Не ДанныеПоШтрихкодам.ВложенныеШтрихкоды.Свойство("МаркированныеТовары")
		Или ДанныеПоШтрихкодам.ВложенныеШтрихкоды.МаркированныеТовары.Количество() = 0 Тогда
		
		Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл 
			
			Если Не ЗначениеЗаполнено(СтрокаДанных.Номенклатура) Тогда
				Продолжить;
			ИначеЕсли ЗначениеЗаполнено(СтрокаДанных.ТекстОшибки) Тогда
				Продолжить;
			КонецЕсли;
			
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("Номенклатура",   СтрокаДанных.Номенклатура);
			ПараметрыПоиска.Вставить("Характеристика", СтрокаДанных.Характеристика);
			
			НайденныеСтроки = ДанныеДокументаОснования.НайтиСтроки(ПараметрыПоиска);
			
			Если НайденныеСтроки.Количество() = 0 Тогда
			// Допустимо не указывать серию в одном из документов
			ИначеЕсли Не (ЗначениеЗаполнено(НайденныеСтроки[0].Серия) И ЗначениеЗаполнено(СтрокаДанных.Серия)) Тогда
				Продолжить;
			Иначе
				ПараметрыПоиска.Вставить("Серия", СтрокаДанных.Серия);
				НайденныеСтроки = ДанныеДокументаОснования.НайтиСтроки(ПараметрыПоиска);
			КонецЕсли;
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				
				ЕстьОшибки = Истина;
				СтрокаДанных.ТекстОшибки = ТекстОшибки;
				
				Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
					ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок = Истина;
					СтрокаДанных.СтрокаДерева.ЕстьОшибки  = Истина;
					СтрокаДанных.СтрокаДерева.ТекстОшибки = ТекстОшибки;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		МаркированныеТовары = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.МаркированныеТовары;
		Для Каждого СтрокаМаркированныеТовары Из МаркированныеТовары Цикл
			
			СтрокаДанных = Неопределено;
			Если СтрокаМаркированныеТовары.СтрокаДерева <> Неопределено Тогда
				ПараметрыОтбора = Новый Структура(
					"НормализованныйШтрихкод",
					СтрокаМаркированныеТовары.СтрокаДерева.НормализованныйШтрихкод);
				НайденныеСтроки = ДанныеПоШтрихкодам.ДанныеКодовМаркировки.НайтиСтроки(ПараметрыОтбора);
				Если НайденныеСтроки.Количество() Тогда
					СтрокаДанных = НайденныеСтроки[0];
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаДанных = Неопределено Тогда
				Продолжить;
			ИначеЕсли Не ЗначениеЗаполнено(СтрокаДанных.Номенклатура) Тогда
				Продолжить;
			ИначеЕсли ЗначениеЗаполнено(СтрокаДанных.ТекстОшибки) Тогда
				Продолжить;
			КонецЕсли;
			
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("Номенклатура",   СтрокаДанных.Номенклатура);
			ПараметрыПоиска.Вставить("Характеристика", СтрокаДанных.Характеристика);
			
			НайденныеСтроки = ДанныеДокументаОснования.НайтиСтроки(ПараметрыПоиска);
			
			Если НайденныеСтроки.Количество() = 0 Тогда
			// Допустимо не указывать серию в одном из документов
			ИначеЕсли Не (ЗначениеЗаполнено(НайденныеСтроки[0].Серия)
				И ЗначениеЗаполнено(СтрокаДанных.Серия)) Тогда
				Продолжить;
			Иначе
				ПараметрыПоиска.Вставить("Серия", СтрокаДанных.Серия);
				НайденныеСтроки = ДанныеДокументаОснования.НайтиСтроки(ПараметрыПоиска);
			КонецЕсли;
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				
				ЕстьОшибки = Истина;
				СтрокаДанных.ТекстОшибки = ТекстОшибки;
				
				Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
					ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок = Истина;
					СтрокаДанных.СтрокаДерева.ЕстьОшибки  = Истина;
					СтрокаДанных.СтрокаДерева.ТекстОшибки = ТекстОшибки;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет проверку на повторное сканирование кода маркировки.
//
// Параметры:
//  ПараметрыСканирования - См. ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования
//  ДанныеПоШтрихкодам - См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияДанныхПоШтрихкодам
//  ЕстьОшибки - Булево - Истина, если выявлена ошибка.
Процедура ПроверитьНаУжеДобавленныеДанныеВДокумент(ПараметрыСканирования, ДанныеПоШтрихкодам, ЕстьОшибки)
	
	Если Не ЭтоАдресВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции) Тогда
		Возврат;
	КонецЕсли; 
	
	КэшМаркируемойПродукции = ПолучитьИзВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции);
	ОбработанныеКодыМаркировки = КэшМаркируемойПродукции.ОбработанныеКодыМаркировки;
	
	// Проверка для упаковок
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено Тогда
		ДеревоУпаковок = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок;
		ПроверитьСтрокиДереваНаУжеДобавленные(ДеревоУпаковок.Строки, ОбработанныеКодыМаркировки, ЕстьОшибки);
		ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок = ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок Или ЕстьОшибки;
	Иначе
		ПроверитьОбработанныеШтрихкодыНаУжеДобавленные(
			ДанныеПоШтрихкодам,
			ОбработанныеКодыМаркировки,
			ЕстьОшибки,
			ПараметрыСканирования);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет штрихкоды строк дерева упаковок на попытку повторного ввода.
//
// Параметры:
//  СтрокиДерева - КоллекцияСтрокДереваЗначений - Строки дерева.
//  МаркируемаяПродукцияДокумента - Соответствие из КлючИЗначение - закэшированные данные.
//  ЕстьОшибки - Булево - Истина, если выявлена ошибка.
Функция ПроверитьСтрокиДереваНаУжеДобавленные(СтрокиДерева, МаркируемаяПродукцияДокумента, ЕстьОшибки)
	
	Если МаркируемаяПродукцияДокумента = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЕстьОшибкиВУпаковке = Ложь;

	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если СтрокаДерева.ЕстьОшибки Тогда
			Продолжить;
		КонецЕсли;
		
		Если МаркируемаяПродукцияДокумента[СтрокаДерева.Штрихкод] <> Неопределено Тогда
			
			СтрокаДерева.ЕстьОшибки = Истина;
			СтрокаДерева.ТекстОшибки = ШтрихкодированиеОбщегоНазначенияИС.ТекстОшибкиУжеДобавленаВДокумент();
			ЕстьОшибки = Истина;
			ЕстьОшибкиВУпаковке = Истина;

		ИначеЕсли ПроверитьСтрокиДереваНаУжеДобавленные(СтрокаДерева.Строки, МаркируемаяПродукцияДокумента, ЕстьОшибки) Тогда

			СтрокаДерева.ЕстьОшибки = Истина;
			СтрокаДерева.ТекстОшибки = ШтрихкодированиеОбщегоНазначенияИС.ТекстОшибкиУжеДобавленаВДокумент();
			ЕстьОшибкиВУпаковке = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьОшибкиВУпаковке;

КонецФункции

// Проверяет штрихкоды строк дерева упаковок на попытку повторной продажи или возврата.
//
// Параметры:
//  ПараметрыСканирования - см. ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования.
//  ДанныеПоШтрихкодам - см. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияДанныхПоШтрихкодам.
//  ЕстьОшибки - Булево - Истина, если выявлена ошибка.
Процедура ПроверитьДоступныеОстаткиМаркируемойПродукции(ПараметрыСканирования, ДанныеПоШтрихкодам, ЕстьОшибки)
	
	Если Не ПараметрыСканирования.Свойство("ЗапрашиватьДанныеСервисаИСМП")
		Или ОбщегоНазначенияИСМПКлиентСервер.ЗначениеПараметраСканированияЗапрашиватьДанныеСервисаИСМП(ПараметрыСканирования) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыСканирования.Свойство("ЭтоПроверкаКодовМаркировкиИСМП")
			И ПараметрыСканирования.ЭтоПроверкаКодовМаркировкиИСМП
		Или ПараметрыСканирования.Свойство("ЭтоОтчетПроизводственнойЛинии")
			И ПараметрыСканирования.ЭтоОтчетПроизводственнойЛинии Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыСканирования.ОперацияКонтроляАкцизныхМарок <> "Продажа"
		И ПараметрыСканирования.ОперацияКонтроляАкцизныхМарок <> "Возврат" Тогда
		Возврат;
	КонецЕсли;

	Если ПараметрыСканирования.ОперацияКонтроляАкцизныхМарок = "Продажа" Тогда
		ТекстОшибки = НСтр("ru='Продана ранее по данным информационной базы'");
	Иначе
		ТекстОшибки = НСтр("ru='Уже в наличии по данным информационной базы'");
	КонецЕсли;
	
	ОстаткиМаркируемойПродукции = ОпределитьОстаткиМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования);

	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды = Неопределено
		Или Не ДанныеПоШтрихкодам.ВложенныеШтрихкоды.Свойство("МаркированныеТовары") Тогда

		Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл

			//@skip-check query-in-loop
			Если ЗначениеЗаполнено(СтрокаДанных.ТекстОшибки)
				Или ШтрихкодированиеОбщегоНазначенияИС.ТребуетсяЧастичноеВыбытие(ПараметрыСканирования, ДанныеПоШтрихкодам)
					И ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ЭтоСтрокаДанныхЧастичногоВыбытия(СтрокаДанных, ПараметрыСканирования) Тогда
				Продолжить;
			КонецЕсли;
			
			НайденнаяСтрока = ОстаткиМаркируемойПродукции.Найти(СтрокаДанных.ШтрихкодУпаковки, "ШтрихкодУпаковки");
			
			УсловиеВыполнено = НайденнаяСтрока.Доступно >= 1;
			Если ПараметрыСканирования.ОперацияКонтроляАкцизныхМарок = "Возврат" Тогда
				УсловиеВыполнено = Не УсловиеВыполнено;
			КонецЕсли;
			
			Если Не УсловиеВыполнено Тогда
				
				СтрокаДанных.ТекстОшибки = ТекстОшибки;
				ЕстьОшибки = Истина;
				
			КонецЕсли;
			
		КонецЦикла;

	Иначе

		Для Каждого СтрокаМарки Из ДанныеПоШтрихкодам.ВложенныеШтрихкоды.МаркированныеТовары Цикл

			Если СтрокаМарки.СтрокаДерева.ЕстьОшибки Тогда
				Продолжить;
			КонецЕсли;

			НайденнаяСтрока = ОстаткиМаркируемойПродукции.Найти(СтрокаМарки.ШтрихкодУпаковки, "ШтрихкодУпаковки");

			УсловиеВыполнено = НайденнаяСтрока.Доступно >= 1;
			Если ПараметрыСканирования.ОперацияКонтроляАкцизныхМарок = "Возврат" Тогда
				УсловиеВыполнено = Не УсловиеВыполнено;
			КонецЕсли;

			Если Не УсловиеВыполнено Тогда
				СтрокаМарки.СтрокаДерева.ТекстОшибки = ТекстОшибки;
				СтрокаМарки.СтрокаДерева.ЕстьОшибки  = Истина;

				ЕстьОшибки = Истина;
				ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок = Истина;

			КонецЕсли;
			
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

// Проверяет коллекцию обработанные штрихкоды на повторный ввод.
//
// Параметры:
//  ДанныеПоШтрихкодам - см. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияДанныхПоШтрихкодам
//  МаркируемаяПродукцияДокумента - Соответствие из КлючИЗначение - закэшированные данные.
//  ЕстьОшибки - Булево - Истина, если выявлена ошибка.
//  ПараметрыСканирования - См. ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования
Процедура ПроверитьОбработанныеШтрихкодыНаУжеДобавленные(ДанныеПоШтрихкодам, МаркируемаяПродукцияДокумента, ЕстьОшибки, ПараметрыСканирования)
	
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл 
		
		//@skip-check query-in-loop
		Если Не СтрокаДанных.Входящий Тогда
			Продолжить;
		ИначеЕсли ЗначениеЗаполнено(СтрокаДанных.ТекстОшибки) Тогда
			Продолжить;
		ИначеЕсли ШтрихкодированиеОбщегоНазначенияИС.ТребуетсяЧастичноеВыбытие(ПараметрыСканирования)
			И ОбщегоНазначенияИСКлиентСерверПовтИсп.ПоддерживаетсяЧастичноеВыбытие(
				СтрокаДанных.ВидПродукции,
				ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ОперацияИС(ПараметрыСканирования, СтрокаДанных.ВидПродукции)) Тогда
			Продолжить;
		КонецЕсли;
		
		Если МаркируемаяПродукцияДокумента[СтрокаДанных.Штрихкод] <> Неопределено Тогда
			СтрокаДанных.ТекстОшибки = ШтрихкодированиеОбщегоНазначенияИС.ТекстОшибкиУжеДобавленаВДокумент();
			ЕстьОшибки = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет контроль на соответствие маркируемой продукции по документу основания.
//
// Параметры:
// ПараметрыСканирования - См. ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования
//  ДанныеПоШтрихкодам - См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияДанныхПоШтрихкодам
//  ЕстьОшибки - Булево - Истина, если выявлена ошибка.
Процедура ПроверитьНаВложенностьСтандартныхУпаковок(ПараметрыСканирования, ДанныеПоШтрихкодам, ЕстьОшибки)
	
	Если ЕстьОшибки И Не ПараметрыСканирования.ПропускатьСтрокиСОшибкамиПриЗагрузкеИзТСД Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыСканирования.Свойство("ЭтоПроверкаКодовМаркировкиИСМП")
			И ПараметрыСканирования.ЭтоПроверкаКодовМаркировкиИСМП
		Или ПараметрыСканирования.Свойство("ЭтоОтчетПроизводственнойЛинии")
			И ПараметрыСканирования.ЭтоОтчетПроизводственнойЛинии Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыСканирования.КонтролироватьСтандартнуюВложенность Тогда
		Возврат;
	ИначеЕсли ДанныеПоШтрихкодам.ВложенныеШтрихкоды = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл

		Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
			Продолжить;
		ИначеЕсли ЗначениеЗаполнено(СтрокаДанных.ТекстОшибки) Тогда
			Продолжить;
		КонецЕсли;

		Если СтрокаДанных.СтрокаДерева <> Неопределено
			И СтрокаДанных.ПлановоеКоличествоПотребительскихУпаковок > 1 Тогда
			
			ФактическоеКоличествоПотребительскихУпаковок = СтрокаДанных.КоличествоПотребительскихУпаковок;
			
			// Проверка пустых упаковок - отдельная функция.
			Если ФактическоеКоличествоПотребительскихУпаковок = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ПлановоеКоличествоПотребительскихУпаковок = СтрокаДанных.ПлановоеКоличествоПотребительскихУпаковок;

			Если ПлановоеКоличествоПотребительскихУпаковок <> ФактическоеКоличествоПотребительскихУпаковок Тогда

				ТекстОшибки = ТекстОшибкиНеСоответствуетСтандартнойУпаковке(
					СтрокаДанных.Штрихкод,
					ПлановоеКоличествоПотребительскихУпаковок, ФактическоеКоличествоПотребительскихУпаковок);
				
				ЕстьОшибки = Истина;

				ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок = Истина;
				СтрокаДанных.ТекстОшибки                     = ТекстОшибки;
				СтрокаДанных.СтрокаДерева.ЕстьОшибки         = Истина;
				СтрокаДанных.СтрокаДерева.ТекстОшибки        = ТекстОшибки;

			КонецЕсли;
			
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ЗапросыИТекстыЗапросов

// Возвращает текст запроса получения состава упаковок в иерархии.
Функция ТекстЗапросаСоставаУпаковокВИерархии()
	
	ТекстЗапросаИсходныеДанные =
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковокТоваров.Ссылка                            КАК ШтрихкодУпаковки,
	|	ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка) КАК ШтрихкодРодительскойУпаковки,
	|	""""                                                       КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТВложенныеШтрихкодыИсходныеДанные
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|ГДЕ 
	|	ШтрихкодыУпаковокТоваров.Ссылка В (&МассивУпаковок)
	|;
	|";
	
	ТекстЗапросаСоставаУпаковок = ТекстЗапросаИсходныеДанные + ТекстЗапросаВложенныхШтрихкодов(Неопределено);
	
	Возврат ТекстЗапросаСоставаУпаковок;
	
КонецФункции

// Возвращает текст запроса для формирования структуры "Вложенные штрихкоды" на основании исходных данных.
Функция ТекстЗапросаВложенныхШтрихкодов(ПараметрыФормированияТекстаЗапроса)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ИсходныеДанные.ИдентификаторСтроки                  КАК ИдентификаторСтроки,
	|	ИсходныеДанные.ШтрихкодУпаковки                     КАК УпаковкаУровень0,
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод КАК УпаковкаУровень1,
	|	ВЫБОР КОГДА ТаблицаИдентификаторов.ИдентификаторСтроки ЕСТЬ NULL ТОГДА
	|		ИсходныеДанные.ИдентификаторСтроки
	|	ИНАЧЕ
	|		ТаблицаИдентификаторов.ИдентификаторСтроки
	|	КОНЕЦ КАК ИдентификаторСтрокиУровень1
	|ПОМЕСТИТЬ ВложенныеШтрихкодыУпаковокУровень1
	|ИЗ
	|	ВТВложенныеШтрихкодыИсходныеДанные КАК ИсходныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
	|		ПО ИсходныеДанные.ШтрихкодУпаковки = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВложенныеШтрихкодыИсходныеДанные КАК ТаблицаИдентификаторов
	|		ПО ТаблицаИдентификаторов.ШтрихкодУпаковки = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
	|ГДЕ
	|	ИсходныеДанные.ШтрихкодРодительскойУпаковки = ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НЕОПРЕДЕЛЕНО                                КАК ИдентификаторСтроки,
	|	ИсходныеДанные.ШтрихкодРодительскойУпаковки КАК Упаковка,
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод КАК УпаковкаУровень1,
	|	ВЫБОР КОГДА ТаблицаИдентификаторов.ИдентификаторСтроки ЕСТЬ NULL ТОГДА
	|		НЕОПРЕДЕЛЕНО
	|	ИНАЧЕ
	|		ТаблицаИдентификаторов.ИдентификаторСтроки
	|	КОНЕЦ КАК ИдентификаторСтрокиУровень1
	|ИЗ
	|	ВТВложенныеШтрихкодыИсходныеДанные КАК ИсходныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
	|		ПО ИсходныеДанные.ШтрихкодРодительскойУпаковки = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВложенныеШтрихкодыИсходныеДанные КАК ТаблицаИдентификаторов
	|		ПО ТаблицаИдентификаторов.ШтрихкодУпаковки = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
	|ГДЕ
	|	ИсходныеДанные.ШтрихкодРодительскойУпаковки <> ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныеШтрихкодыУпаковокУровень1.ИдентификаторСтроки          КАК ИдентификаторСтроки,
	|	ВложенныеШтрихкодыУпаковокУровень1.УпаковкаУровень0             КАК УпаковкаУровень0,
	|	ВложенныеШтрихкодыУпаковокУровень1.УпаковкаУровень1             КАК УпаковкаУровень1,
	|	ВложенныеШтрихкодыУпаковокУровень1.ИдентификаторСтрокиУровень1  КАК ИдентификаторСтрокиУровень1,
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод             КАК УпаковкаУровень2,
	|	ВЫБОР КОГДА ТаблицаИдентификаторов.ИдентификаторСтроки ЕСТЬ NULL ТОГДА
	|		ВложенныеШтрихкодыУпаковокУровень1.ИдентификаторСтрокиУровень1
	|	ИНАЧЕ
	|		ТаблицаИдентификаторов.ИдентификаторСтроки
	|	КОНЕЦ КАК ИдентификаторСтрокиУровень2
	|ПОМЕСТИТЬ ВложенныеШтрихкодыУпаковокУровень2
	|ИЗ
	|	ВложенныеШтрихкодыУпаковокУровень1 КАК ВложенныеШтрихкодыУпаковокУровень1
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
	|		ПО ВложенныеШтрихкодыУпаковокУровень1.УпаковкаУровень1 = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВложенныеШтрихкодыИсходныеДанные КАК ТаблицаИдентификаторов
	|		ПО ТаблицаИдентификаторов.ШтрихкодУпаковки = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
	|ИНДЕКСИРОВАТЬ ПО
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныеШтрихкодыУпаковокУровень2.ИдентификаторСтроки          КАК ИдентификаторСтроки,
	|	ВложенныеШтрихкодыУпаковокУровень2.УпаковкаУровень0             КАК УпаковкаУровень0,
	|	ВложенныеШтрихкодыУпаковокУровень2.УпаковкаУровень1             КАК УпаковкаУровень1,
	|	ВложенныеШтрихкодыУпаковокУровень2.ИдентификаторСтрокиУровень1  КАК ИдентификаторСтрокиУровень1,
	|	ВложенныеШтрихкодыУпаковокУровень2.УпаковкаУровень2             КАК УпаковкаУровень2,
	|	ВложенныеШтрихкодыУпаковокУровень2.ИдентификаторСтрокиУровень2  КАК ИдентификаторСтрокиУровень2,
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод             КАК УпаковкаУровень3,
	|	ВЫБОР КОГДА ТаблицаИдентификаторов.ИдентификаторСтроки ЕСТЬ NULL ТОГДА
	|		ВложенныеШтрихкодыУпаковокУровень2.ИдентификаторСтрокиУровень2
	|	ИНАЧЕ
	|		ТаблицаИдентификаторов.ИдентификаторСтроки
	|	КОНЕЦ КАК ИдентификаторСтрокиУровень3
	|ПОМЕСТИТЬ ВложенныеШтрихкодыУпаковокУровень3
	|ИЗ
	|	ВложенныеШтрихкодыУпаковокУровень2 КАК ВложенныеШтрихкодыУпаковокУровень2
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
	|		ПО ВложенныеШтрихкодыУпаковокУровень2.УпаковкаУровень2 = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВложенныеШтрихкодыИсходныеДанные КАК ТаблицаИдентификаторов
	|		ПО ТаблицаИдентификаторов.ШтрихкодУпаковки = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
	|ИНДЕКСИРОВАТЬ ПО
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсходныеДанные.ИдентификаторСтроки          КАК ИдентификаторСтроки,
	|	ИсходныеДанные.УпаковкаУровень0             КАК УпаковкаУровень0,
	|	ИсходныеДанные.УпаковкаУровень1             КАК УпаковкаУровень1,
	|	ИсходныеДанные.ИдентификаторСтрокиУровень1  КАК ИдентификаторСтрокиУровень1,
	|	ИсходныеДанные.УпаковкаУровень2             КАК УпаковкаУровень2,
	|	ИсходныеДанные.ИдентификаторСтрокиУровень2  КАК ИдентификаторСтрокиУровень2,
	|	ИсходныеДанные.УпаковкаУровень3             КАК УпаковкаУровень3,
	|	ИсходныеДанные.ИдентификаторСтрокиУровень3  КАК ИдентификаторСтрокиУровень3
	|ПОМЕСТИТЬ ДанныеУпаковок
	|ИЗ
	|	ВложенныеШтрихкодыУпаковокУровень3 КАК ИсходныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВложенныеШтрихкодыУпаковокУровень3 КАК ВложенныеШтрихкодыУпаковокУровень1
	|		ПО ИсходныеДанные.УпаковкаУровень0 = ВложенныеШтрихкодыУпаковокУровень1.УпаковкаУровень1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВложенныеШтрихкодыУпаковокУровень3 КАК ВложенныеШтрихкодыУпаковокУровень2
	|		ПО ИсходныеДанные.УпаковкаУровень0 = ВложенныеШтрихкодыУпаковокУровень2.УпаковкаУровень2
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВложенныеШтрихкодыУпаковокУровень3 КАК ВложенныеШтрихкодыУпаковокУровень3
	|		ПО ИсходныеДанные.УпаковкаУровень0 = ВложенныеШтрихкодыУпаковокУровень3.УпаковкаУровень3
	|ГДЕ
	|	ВложенныеШтрихкодыУпаковокУровень1.УпаковкаУровень0 ЕСТЬ NULL
	|	И ВложенныеШтрихкодыУпаковокУровень2.УпаковкаУровень0 ЕСТЬ NULL
	|	И ВложенныеШтрихкодыУпаковокУровень3.УпаковкаУровень0 ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеУпаковок.УпаковкаУровень0.Номенклатура   КАК Номенклатура,
	|	ДанныеУпаковок.УпаковкаУровень0.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ДанныеШтрихкодовУпаковокДляГруппировки
	|ИЗ
	|	ДанныеУпаковок КАК ДанныеУпаковок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеУпаковок.УпаковкаУровень1.Номенклатура,
	|	ДанныеУпаковок.УпаковкаУровень1.Характеристика
	|ИЗ
	|	ДанныеУпаковок КАК ДанныеУпаковок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеУпаковок.УпаковкаУровень2.Номенклатура,
	|	ДанныеУпаковок.УпаковкаУровень2.Характеристика
	|ИЗ
	|	ДанныеУпаковок КАК ДанныеУпаковок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеУпаковок.УпаковкаУровень3.Номенклатура,
	|	ДанныеУпаковок.УпаковкаУровень3.Характеристика
	|ИЗ
	|	ДанныеУпаковок КАК ДанныеУпаковок
	|;
	|
	|ВЫБРАТЬ
	|	ДанныеДляГруппировки.Номенклатура,
	|	ДанныеДляГруппировки.Характеристика
	|ПОМЕСТИТЬ ДанныеШтрихкодовУпаковок
	|ИЗ
	|	ДанныеШтрихкодовУпаковокДляГруппировки КАК ДанныеДляГруппировки
	|ГДЕ ДанныеДляГруппировки.Номенклатура <> &НоменклатураПустаяСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДляГруппировки.Номенклатура,
	|	ДанныеДляГруппировки.Характеристика
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеШтрихкодовУпаковок.Номенклатура КАК Номенклатура,
	|	&ТребуетВзвешивания                   КАК ТребуетВзвешивания,
	|	&ПроизвольнаяЕдиницаУчета             КАК ПроизвольнаяЕдиницаУчета
	|ПОМЕСТИТЬ СвойстваНоменклатурыИС
	|ИЗ ДанныеШтрихкодовУпаковок КАК ДанныеШтрихкодовУпаковок
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеИС
	|		ПО &ТоварыОписаниеНоменклатурыИС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|%ТекстЗапросаСвойстваМаркируемойПродукции%
	|;
	|
	|//#РезультатЗапроса#////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеУпаковок.УпаковкаУровень0                   КАК УпаковкаУровень0,
	|	ДанныеУпаковок.ИдентификаторСтроки                КАК УпаковкаУровень0ИдентификаторСтроки,
	|	ДанныеУпаковок.УпаковкаУровень0.ТипШтрихкода      КАК УпаковкаУровень0ТипШтрихкода,
	|	ДанныеУпаковок.УпаковкаУровень0.ТипУпаковки       КАК УпаковкаУровень0ТипУпаковки,
	|	ДанныеУпаковок.УпаковкаУровень0.ЗначениеШтрихкода КАК УпаковкаУровень0Штрихкод,
	|	ДанныеУпаковок.УпаковкаУровень0.Номенклатура      КАК УпаковкаУровень0Номенклатура,
	|	ДанныеУпаковок.УпаковкаУровень0.Характеристика    КАК УпаковкаУровень0Характеристика,
	|	ДанныеУпаковок.УпаковкаУровень0.Серия             КАК УпаковкаУровень0Серия,
	|	ДанныеУпаковок.УпаковкаУровень0.ХешСумма             КАК УпаковкаУровень0ХешСумма,
	|	ДанныеУпаковок.УпаковкаУровень0.ХешСуммаНормализации КАК УпаковкаУровень0ХешСуммаНормализации,
	|	ДанныеУпаковок.УпаковкаУровень0.Количество           КАК УпаковкаУровень0Количество,
	|	ДанныеУпаковок.УпаковкаУровень0.КоличествоПотребительскихУпаковок КАК УпаковкаУровень0КоличествоПотребительскихУпаковок,
	|	ЕСТЬNULL(СвойстваПродукцииУровень0.ВидПродукции, Неопределено)    КАК УпаковкаУровень0ВидПродукции,
	|	ЕСТЬNULL(СвойстваПродукцииУровень0.МаркируемаяПродукция, ЛОЖЬ)    КАК УпаковкаУровень0МаркируемаяПродукция,
	|	СвойстваНоменклатурыИСУровень0.ТребуетВзвешивания       КАК УпаковкаУровень0ТребуетВзвешивания,
	|	СвойстваНоменклатурыИСУровень0.ПроизвольнаяЕдиницаУчета КАК УпаковкаУровень0ПроизвольнаяЕдиницаУчета,
	|
	|	ДанныеУпаковок.УпаковкаУровень1                   КАК УпаковкаУровень1,
	|	ДанныеУпаковок.ИдентификаторСтрокиУровень1        КАК УпаковкаУровень1ИдентификаторСтроки,
	|	ДанныеУпаковок.УпаковкаУровень1.ТипШтрихкода      КАК УпаковкаУровень1ТипШтрихкода,
	|	ДанныеУпаковок.УпаковкаУровень1.ТипУпаковки       КАК УпаковкаУровень1ТипУпаковки,
	|	ДанныеУпаковок.УпаковкаУровень1.ЗначениеШтрихкода КАК УпаковкаУровень1Штрихкод,
	|	ДанныеУпаковок.УпаковкаУровень1.Номенклатура      КАК УпаковкаУровень1Номенклатура,
	|	ДанныеУпаковок.УпаковкаУровень1.Характеристика    КАК УпаковкаУровень1Характеристика,
	|	ДанныеУпаковок.УпаковкаУровень1.Серия             КАК УпаковкаУровень1Серия,
	|	ДанныеУпаковок.УпаковкаУровень1.ХешСумма             КАК УпаковкаУровень1ХешСумма,
	|	ДанныеУпаковок.УпаковкаУровень1.ХешСуммаНормализации КАК УпаковкаУровень1ХешСуммаНормализации,
	|	ДанныеУпаковок.УпаковкаУровень1.Количество           КАК УпаковкаУровень1Количество,
	|	ДанныеУпаковок.УпаковкаУровень1.КоличествоПотребительскихУпаковок КАК УпаковкаУровень1КоличествоПотребительскихУпаковок,
	|	ЕСТЬNULL(СвойстваПродукцииУровень1.ВидПродукции, Неопределено)    КАК УпаковкаУровень1ВидПродукции,
	|	ЕСТЬNULL(СвойстваПродукцииУровень1.МаркируемаяПродукция, ЛОЖЬ)    КАК УпаковкаУровень1МаркируемаяПродукция,
	|	СвойстваНоменклатурыИСУровень1.ТребуетВзвешивания       КАК УпаковкаУровень1ТребуетВзвешивания,
	|	СвойстваНоменклатурыИСУровень1.ПроизвольнаяЕдиницаУчета КАК УпаковкаУровень1ПроизвольнаяЕдиницаУчета,
	|	
	|	ДанныеУпаковок.УпаковкаУровень2                   КАК УпаковкаУровень2,
	|	ДанныеУпаковок.ИдентификаторСтрокиУровень2        КАК УпаковкаУровень2ИдентификаторСтроки,
	|	ДанныеУпаковок.УпаковкаУровень2.ТипШтрихкода      КАК УпаковкаУровень2ТипШтрихкода,
	|	ДанныеУпаковок.УпаковкаУровень2.ТипУпаковки       КАК УпаковкаУровень2ТипУпаковки,
	|	ДанныеУпаковок.УпаковкаУровень2.ЗначениеШтрихкода КАК УпаковкаУровень2Штрихкод,
	|	ДанныеУпаковок.УпаковкаУровень2.Номенклатура      КАК УпаковкаУровень2Номенклатура,
	|	ДанныеУпаковок.УпаковкаУровень2.Характеристика    КАК УпаковкаУровень2Характеристика,
	|	ДанныеУпаковок.УпаковкаУровень2.Серия             КАК УпаковкаУровень2Серия,
	|	ДанныеУпаковок.УпаковкаУровень2.ХешСумма             КАК УпаковкаУровень2ХешСумма,
	|	ДанныеУпаковок.УпаковкаУровень2.ХешСуммаНормализации КАК УпаковкаУровень2ХешСуммаНормализации,
	|	ДанныеУпаковок.УпаковкаУровень2.Количество           КАК УпаковкаУровень2Количество,
	|	ДанныеУпаковок.УпаковкаУровень2.КоличествоПотребительскихУпаковок КАК УпаковкаУровень2КоличествоПотребительскихУпаковок,
	|	ЕСТЬNULL(СвойстваПродукцииУровень2.ВидПродукции, Неопределено)    КАК УпаковкаУровень2ВидПродукции,
	|	ЕСТЬNULL(СвойстваПродукцииУровень2.МаркируемаяПродукция, ЛОЖЬ)    КАК УпаковкаУровень2МаркируемаяПродукция,
	|	СвойстваНоменклатурыИСУровень2.ТребуетВзвешивания       КАК УпаковкаУровень2ТребуетВзвешивания,
	|	СвойстваНоменклатурыИСУровень2.ПроизвольнаяЕдиницаУчета КАК УпаковкаУровень2ПроизвольнаяЕдиницаУчета,
	|	
	|	ДанныеУпаковок.УпаковкаУровень3                   КАК УпаковкаУровень3,
	|	ДанныеУпаковок.ИдентификаторСтрокиУровень3        КАК УпаковкаУровень3ИдентификаторСтроки,
	|	ДанныеУпаковок.УпаковкаУровень3.ТипШтрихкода      КАК УпаковкаУровень3ТипШтрихкода,
	|	ДанныеУпаковок.УпаковкаУровень3.ТипУпаковки       КАК УпаковкаУровень3ТипУпаковки,
	|	ДанныеУпаковок.УпаковкаУровень3.ЗначениеШтрихкода КАК УпаковкаУровень3Штрихкод,
	|	ДанныеУпаковок.УпаковкаУровень3.Номенклатура      КАК УпаковкаУровень3Номенклатура,
	|	ДанныеУпаковок.УпаковкаУровень3.Характеристика    КАК УпаковкаУровень3Характеристика,
	|	ДанныеУпаковок.УпаковкаУровень3.Серия             КАК УпаковкаУровень3Серия,
	|	ДанныеУпаковок.УпаковкаУровень3.ХешСумма             КАК УпаковкаУровень3ХешСумма,
	|	ДанныеУпаковок.УпаковкаУровень3.ХешСуммаНормализации КАК УпаковкаУровень3ХешСуммаНормализации,
	|	ДанныеУпаковок.УпаковкаУровень3.Количество           КАК УпаковкаУровень3Количество,
	|	ДанныеУпаковок.УпаковкаУровень3.КоличествоПотребительскихУпаковок КАК УпаковкаУровень3КоличествоПотребительскихУпаковок,
	|	ЕСТЬNULL(СвойстваПродукцииУровень3.ВидПродукции, Неопределено)    КАК УпаковкаУровень3ВидПродукции,
	|	ЕСТЬNULL(СвойстваПродукцииУровень3.МаркируемаяПродукция, ЛОЖЬ)    КАК УпаковкаУровень3МаркируемаяПродукция,
	|	СвойстваНоменклатурыИСУровень3.ТребуетВзвешивания    КАК УпаковкаУровень3ТребуетВзвешивания,
	|	СвойстваНоменклатурыИСУровень3.ПроизвольнаяЕдиницаУчета КАК УпаковкаУровень3ПроизвольнаяЕдиницаУчета
	|ИЗ
	|	ДанныеУпаковок КАК ДанныеУпаковок
	|		ЛЕВОЕ СОЕДИНЕНИЕ СвойстваМаркируемойПродукции КАК СвойстваПродукцииУровень0
	|		ПО ДанныеУпаковок.УпаковкаУровень0.Номенклатура = СвойстваПродукцииУровень0.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ СвойстваМаркируемойПродукции КАК СвойстваПродукцииУровень1
	|		ПО ДанныеУпаковок.УпаковкаУровень1.Номенклатура = СвойстваПродукцииУровень1.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ СвойстваМаркируемойПродукции КАК СвойстваПродукцииУровень2
	|		ПО ДанныеУпаковок.УпаковкаУровень2.Номенклатура = СвойстваПродукцииУровень2.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ СвойстваМаркируемойПродукции КАК СвойстваПродукцииУровень3
	|		ПО ДанныеУпаковок.УпаковкаУровень3.Номенклатура = СвойстваПродукцииУровень3.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ СвойстваНоменклатурыИС КАК СвойстваНоменклатурыИСУровень0
	|		ПО ДанныеУпаковок.УпаковкаУровень0.Номенклатура = СвойстваНоменклатурыИСУровень0.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ СвойстваНоменклатурыИС КАК СвойстваНоменклатурыИСУровень1
	|		ПО ДанныеУпаковок.УпаковкаУровень1.Номенклатура = СвойстваНоменклатурыИСУровень1.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ СвойстваНоменклатурыИС КАК СвойстваНоменклатурыИСУровень2
	|		ПО ДанныеУпаковок.УпаковкаУровень2.Номенклатура = СвойстваНоменклатурыИСУровень2.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ СвойстваНоменклатурыИС КАК СвойстваНоменклатурыИСУровень3
	|		ПО ДанныеУпаковок.УпаковкаУровень3.Номенклатура = СвойстваНоменклатурыИСУровень3.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВложенныеШтрихкодыУпаковокУровень1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВложенныеШтрихкодыУпаковокУровень2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВложенныеШтрихкодыУпаковокУровень3
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеШтрихкодовУпаковок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СвойстваМаркируемойПродукции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеУпаковок
	|";
	
	ОбщегоНазначенияИС.ОбновитьТекстЗапросаСРегистромОписаниеНоменклатурыИС(ТекстЗапроса, "ОписаниеИС", "ДанныеШтрихкодовУпаковок.Номенклатура");
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса,
		"%ТекстЗапросаСвойстваМаркируемойПродукции%",
		ШтрихкодированиеОбщегоНазначенияИС.ТекстЗапросаСвойстваМаркируемойПродукции());
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

#Область ОбработкаУточненийДанных

Функция ОбработатьУточнениеНоменклатуры(ФормаПараметрыСканирования, РезультатВыбора, РезультатОбработки, КэшированныеЗначения)

	ДанныеШтрихкода = РезультатОбработки.ДанныеШтрихкода;

	Форма = ФормаПараметрыСканирования;
	Если ТипЗнч(Форма) = Тип("Структура") Тогда
		ПараметрыСканирования = Форма;
		Форма = Неопределено;
	Иначе
		ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования(Форма);
	КонецЕсли;

	РезультатОбработки.ТребуетсяВыборСерии = Ложь;
	РезультатОбработки.ТребуетсяУточнениеДанных = Ложь;
	ДанныеШтрихкода.ДополнительныеПараметры = РезультатВыбора;

	ДанныеВыбора = РезультатВыбора.ДанныеВыбора;
	ЗаполнитьЗначенияСвойств(ДанныеШтрихкода, ДанныеВыбора);

	СвойстваМаркируемойПродукции = ИнтеграцияИС.СвойстваМаркируемойПродукции(ДанныеШтрихкода.Номенклатура);
	ЗаполнитьЗначенияСвойств(ДанныеШтрихкода, СвойстваМаркируемойПродукции);

	Если Не ЗначениеЗаполнено(ДанныеШтрихкода.Штрихкод) И ЗначениеЗаполнено(РезультатОбработки.Штрихкод) Тогда
		ДанныеШтрихкода.Штрихкод = РезультатОбработки.Штрихкод;
	КонецЕсли;

	ДанныеШтрихкода.СписокНоменклатуры = Новый Массив;
	РезультатОбработки.ДанныеШтрихкода = ДанныеШтрихкода;

	РезультатПроверки = ШтрихкодированиеОбщегоНазначенияИС.ТребуетсяОткрытьФормуВводаКодаМаркировки(ДанныеШтрихкода, ПараметрыСканирования);

	Если РезультатПроверки <> Неопределено Тогда
		РезультатОбработки = РезультатПроверки;
	ИначеЕсли Форма <> Неопределено Тогда
		РезультатОбработки = ШтрихкодированиеОбщегоНазначенияИС.ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования);
	КонецЕсли;

	Возврат РезультатОбработки;

КонецФункции

Функция ОбработатьУточнениеДанныхДляУпаковки(Форма, РезультатВыбора, РезультатОбработки, КэшированныеЗначения)

	ДанныеШтрихкода            = РезультатОбработки.ДанныеШтрихкода;
	ПараметрыСканирования      = ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования(Форма);
	ДанныеКэша                 = ПолучитьИзВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции);
	ДанныеДляУточненияСведений = ДанныеКэша.ДанныеДляУточненияСведенийПользователя.Данные;

	ДеревоУпаковок = ПолучитьИзВременногоХранилища(ДанныеШтрихкода.АдресДереваУпаковок);

	МассивСтрокДерева = Новый Массив;
	Если ТипЗнч(РезультатВыбора) = Тип("Строка") Тогда

		//Выбор произведен в форме уточнения данных упаковки. Возможно необходимо перезаписать штрихкоды упаковок.
		СтрокаДерева = ДеревоУпаковок.Строки.Найти(РезультатВыбора, "Штрихкод", Истина);
		Если Не ЗначениеЗаполнено(СтрокаДерева.ШтрихкодУпаковки) Тогда
			СтрокаДерева.ШтрихкодУпаковки = СоздатьМаркированныйТоварПоДаннымШтрихкода(СтрокаДерева, ПараметрыСканирования);
		КонецЕсли;
		Если ДанныеДляУточненияСведений.Найти(СтрокаДерева.Штрихкод) <> Неопределено Тогда
			ДанныеДляУточненияСведений.Удалить(ДанныеДляУточненияСведений.Найти(СтрокаДерева.Штрихкод));
		КонецЕсли;
		
	ИначеЕсли РезультатВыбора.ЗапомнитьВыбор Тогда
		ЗаполнитьМассивСтрокДереваПоGTIN(ДеревоУпаковок, РезультатВыбора.ДанныеВыбора.GTIN, МассивСтрокДерева);
	ИначеЕсли РезультатВыбора.ДанныеВыбора.Свойство("КодМаркировки") Тогда
		НайденнаяСтрокаДерева = ДеревоУпаковок.Строки.Найти(РезультатВыбора.ДанныеВыбора.КодМаркировки, "Штрихкод", Истина);
		МассивСтрокДерева.Добавить(НайденнаяСтрокаДерева);
	КонецЕсли;

	Для Каждого СтрокаДерева Из МассивСтрокДерева Цикл

		ПерезаписатьШтрихкодУпаковки = ДанныеШтрихкода.ТребуетсяОбновлениеШтрихкода;
		Для Каждого КлючЗначение Из РезультатВыбора.ДанныеВыбора Цикл
			
			ИмяСвойства = КлючЗначение.Ключ;
			Если СтрокаДерева.Владелец().Колонки.Найти(ИмяСвойства) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаДерева[ИмяСвойства] = КлючЗначение.Значение Тогда
				Продолжить;
			КонецЕсли;
			
			Если ИмяСвойства = "Номенклатура"
				Или ИмяСвойства = "Характеристика"
				Или ИмяСвойства = "Серия" Тогда
				ПерезаписатьШтрихкодУпаковки = Истина;
			КонецЕсли;

			СтрокаДерева[ИмяСвойства] = КлючЗначение.Значение;

		КонецЦикла;

		Если ЗначениеЗаполнено(СтрокаДерева.ШтрихкодУпаковки)
			И ПерезаписатьШтрихкодУпаковки Тогда

			УстановитьПривилегированныйРежим(Истина);

			НачатьТранзакцию();

			Попытка

				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("Справочник.ШтрихкодыУпаковокТоваров");
				ЭлементБлокировки.УстановитьЗначение("Ссылка", СтрокаДерева.ШтрихкодУпаковки);
				Блокировка.Заблокировать();

				ОбновитьЭлементШтрихкодовУпаковок(СтрокаДерева,, ПараметрыСканирования);

				ЗафиксироватьТранзакцию();

			Исключение

				ОтменитьТранзакцию();

				ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ИмяСобытияЖурналРегистрации = НСтр("ru = 'ИС МП: Обработка выбора серии'", ОбщегоНазначения.КодОсновногоЯзыка());
				ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки);

				ВызватьИсключение ПодробноеПредставлениеОшибки;

			КонецПопытки;

			УстановитьПривилегированныйРежим(Ложь);

		ИначеЕсли Не ЗначениеЗаполнено(СтрокаДерева.ШтрихкодУпаковки)
			И ПараметрыСканирования.СоздаватьШтрихкодУпаковки Тогда

			СтрокаДерева.ШтрихкодУпаковки = СоздатьМаркированныйТоварПоДаннымШтрихкода(СтрокаДерева, ПараметрыСканирования);

		КонецЕсли;

		Если ДанныеДляУточненияСведений.Получить(СтрокаДерева.Штрихкод) <> Неопределено Тогда
			ДанныеДляУточненияСведений.Удалить(СтрокаДерева.Штрихкод);
		КонецЕсли;

	КонецЦикла;
	
	Если ДанныеДляУточненияСведений.Количество() = 0 Тогда
		ВложенныеШтрихкоды = ИнициализацияВложенныхШтрихкодов(ДеревоУпаковок);
		ЗаполнитьТаблицуМаркированныеТоварыПоСтрокамДереваУпаковок(ДеревоУпаковок.Строки, ВложенныеШтрихкоды.МаркированныеТовары);
		РезультатОбработки = ШтрихкодированиеОбщегоНазначенияИС.ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды);
	Иначе
		РезультатОбработки.ДобавленныеСтроки = Новый Массив;
		РезультатОбработки.ИзмененныеСтроки  = Новый Массив;
	КонецЕсли;
	
	Возврат РезультатОбработки;
	
КонецФункции

Функция ОбработатьУточнениеДанныхДляМаркированногоТовара(Форма, РезультатВыбора, РезультатОбработки, КэшированныеЗначения)

	ДанныеШтрихкода = РезультатОбработки.ДанныеШтрихкода;
	ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования(Форма);

	РезультатОбработки.ТребуетсяВыборСерии = Ложь;

	ДанныеШтрихкода.ДополнительныеПараметры = РезультатВыбора;
	ПерезаписатьШтрихкодУпаковки = ДанныеШтрихкода.ТребуетсяОбновлениеШтрихкода;
	ДанныеВыбора = РезультатВыбора.ДанныеВыбора;

	Если ДанныеШтрихкода.ВидПродукции = Перечисления.ВидыПродукцииИС.Алкогольная Тогда
		ЭтоСтрокаДанныхЧастичногоВыбытия = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ЭтоСтрокаДанныхЧастичногоВыбытия(
			ДанныеВыбора, ПараметрыСканирования, ДанныеШтрихкода.ВидПродукции);
	Иначе
		ЭтоСтрокаДанныхЧастичногоВыбытия = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ЭтоСтрокаДанныхЧастичногоВыбытия(
			ДанныеШтрихкода, ПараметрыСканирования, ДанныеШтрихкода.ВидПродукции);
	КонецЕсли;
	
	Если ДанныеВыбора.Свойство("ТребуетВзвешивания") Тогда
		ДанныеШтрихкода.ТребуетВзвешивания = ДанныеВыбора.ТребуетВзвешивания;
		ДанныеШтрихкода.ПроизвольнаяЕдиницаУчета = ДанныеВыбора.ПроизвольнаяЕдиницаУчета;
	КонецЕсли;

	Для Каждого КлючЗначение Из ДанныеВыбора Цикл

		ИмяСвойства = КлючЗначение.Ключ;
		Если Не ДанныеШтрихкода.Свойство(ИмяСвойства) Тогда
			Продолжить;
		КонецЕсли;

		ЭтоЗаменаНоменклатуры = (ЭтоСтрокаДанныхЧастичногоВыбытия
			И ДанныеВыбора.ЧастичноеВыбытиеВариантУчета = Перечисления.ВариантыУчетаЧастичногоВыбытияИС.НастроеннаяНоменклатура
			И (ИмяСвойства = "Номенклатура"
			Или ИмяСвойства = "Характеристика"
			Или ИмяСвойства = "Упаковка"
			Или ИмяСвойства = "ЧастичноеВыбытиеНоменклатура"
			Или ИмяСвойства = "ЧастичноеВыбытиеХарактеристика"));

		Если Не ЗначениеЗаполнено(КлючЗначение.Значение)
			И Не ЭтоЗаменаНоменклатуры Тогда
			Продолжить;
		КонецЕсли;

		Если ДанныеШтрихкода[ИмяСвойства] = КлючЗначение.Значение Тогда
			Продолжить;
		КонецЕсли;

		Если Не ДанныеШтрихкода.ТребуетВзвешивания
			И Не ЭтоСтрокаДанныхЧастичногоВыбытия
			И ИмяСвойства = "Количество" Тогда
			Продолжить;
		КонецЕсли;

		Если ИмяСвойства = "Номенклатура" И Не ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура) Тогда
			ДанныеШтрихкода.Количество = ДанныеВыбора.Количество;
		КонецЕсли;

		Если ИмяСвойства = "Номенклатура"
			Или ИмяСвойства = "Характеристика"
			Или ИмяСвойства = "Серия"
			Или ИмяСвойства = "Количество" И Не ЭтоСтрокаДанныхЧастичногоВыбытия Тогда
			ПерезаписатьШтрихкодУпаковки = Истина;
		КонецЕсли;

		ДанныеШтрихкода[ИмяСвойства] = КлючЗначение.Значение;

	КонецЦикла;

	Если ПараметрыСканирования.ИспользуютсяДанныеВыбораПоМаркируемойПродукции Тогда
		ШтрихкодированиеИСКлиентСервер.ОбработатьСохраненныйВыборДанныхПоМаркируемойПродукции(Форма, ДанныеШтрихкода);
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ДанныеШтрихкода.ВидПродукции) Тогда
		ДанныеШтрихкода.ВидПродукции = ИнтеграцияИС.ВидПродукцииПоНоменклатуре(ДанныеШтрихкода.Номенклатура);
		Если ТипЗнч(ДанныеШтрихкода.ДанныеРазбора) = Тип("Структура")
				И ДанныеШтрихкода.ДанныеРазбора.Свойство("ВидыУпаковокПоВидамПродукции") Тогда
			ВидыУпаковок = ДанныеШтрихкода.ДанныеРазбора.ВидыУпаковокПоВидамПродукции.Получить(ДанныеШтрихкода.ВидПродукции);
			Если ТипЗнч(ВидыУпаковок) = Тип("Массив") И ВидыУпаковок.Количество() = 1 Тогда
				ДанныеШтрихкода.ВидУпаковки = ВидыУпаковок[0];
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если Не ДанныеШтрихкода.ЭтоШтрихкодНоменклатуры Тогда
		Если ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияМОТП(ДанныеШтрихкода.ВидПродукции) Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
			Модуль.ОбработатьУточнениеДанных(ДанныеШтрихкода, ДанныеВыбора, ПараметрыСканирования, РезультатОбработки);
		КонецЕсли;
		Если ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияИСМП(ДанныеШтрихкода.ВидПродукции) Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
			Модуль.ОбработатьУточнениеДанных(ДанныеШтрихкода, ДанныеВыбора, ПараметрыСканирования, РезультатОбработки);
		КонецЕсли;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ДанныеШтрихкода.Штрихкод) И ЗначениеЗаполнено(РезультатОбработки.Штрихкод) Тогда
		ДанныеШтрихкода.Штрихкод = РезультатОбработки.Штрихкод;
	КонецЕсли;

	Если ЗначениеЗаполнено(ДанныеШтрихкода.ШтрихкодУпаковки)
		И ПерезаписатьШтрихкодУпаковки Тогда

		УстановитьПривилегированныйРежим(Истина);

		НачатьТранзакцию();

		Попытка

			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.ШтрихкодыУпаковокТоваров");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ДанныеШтрихкода.ШтрихкодУпаковки);
			Блокировка.Заблокировать();

			ОбновитьЭлементШтрихкодовУпаковок(ДанныеШтрихкода,, ПараметрыСканирования);

			ЗафиксироватьТранзакцию();

		Исключение

			ОтменитьТранзакцию();

			ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ИмяСобытияЖурналРегистрации = НСтр("ru = 'ИС МП: Обработка выбора серии'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки);

			ВызватьИсключение ПодробноеПредставлениеОшибки;

		КонецПопытки;

		УстановитьПривилегированныйРежим(Ложь);

	ИначеЕсли Не ЗначениеЗаполнено(ДанныеШтрихкода.ШтрихкодУпаковки) Тогда

		ДанныеШтрихкода.ШтрихкодУпаковки = СоздатьМаркированныйТоварПоДаннымШтрихкода(ДанныеШтрихкода, ПараметрыСканирования);

	КонецЕсли;

	РезультатОбработки.ДанныеШтрихкода = ДанныеШтрихкода;

	ВложенныеШтрихкоды = Неопределено;
	Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ДанныеШтрихкода.ТипУпаковки)
		И ЭтоАдресВременногоХранилища(РезультатОбработки.АдресДереваУпаковок) Тогда
		ВложенныеШтрихкоды = ИнициализацияВложенныхШтрихкодов();
		ВложенныеШтрихкоды.ДеревоУпаковок = ПолучитьИзВременногоХранилища(РезультатОбработки.АдресДереваУпаковок);
	КонецЕсли;
	
	Если ЭтоСтрокаДанныхЧастичногоВыбытия
		И РезультатОбработки.ТребуетсяВскрытиеПотребительскойУпаковки
		И ДанныеШтрихкода.ЧастичноеВыбытие Тогда
		ВскрытьПотребительскуюУпаковкуПриОбработкеУточнения(ДанныеШтрихкода, РезультатОбработки, ПараметрыСканирования);
	КонецЕсли;
	
	РезультатОбработки = ШтрихкодированиеОбщегоНазначенияИС.ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды);

	Возврат РезультатОбработки;

КонецФункции

Процедура ВскрытьПотребительскуюУпаковкуПриОбработкеУточнения(ДанныеШтрихкода, РезультатОбработки, ПараметрыСканирования) Экспорт
	
	ДанныеВскрытияУпаковки = РегистрыСведений.ВскрытыеПотребительскиеУпаковкиИС.ИнициализироватьДанныеВскрытияПотребительскойУпаковки();
	ДанныеВскрытияУпаковки.Статус          = Перечисления.СтатусыВскрытыхПотребительскихУпаковокИС.Подключено;
	ДанныеВскрытияУпаковки.ВидПродукции    = ДанныеШтрихкода.ВидПродукции;
	ДанныеВскрытияУпаковки.ДатаПодключения = ТекущаяДатаСеанса();
	ДанныеВскрытияУпаковки.КодМаркировки   = ДанныеШтрихкода.ШтрихкодУпаковки;
	ДанныеВскрытияУпаковки.Организация     = ПараметрыСканирования.Организация;
	ДанныеВскрытияУпаковки.Склад           = ПараметрыСканирования.Склад;
	ДанныеВскрытияУпаковки.Ответственный   = Пользователи.ТекущийПользователь();
	ДанныеВскрытияУпаковки.Остаток         = ДанныеШтрихкода.ЕмкостьПотребительскойУпаковки;
	
	РезультатВскрытия = ОбщегоНазначенияИС.ВскрытьПотребительскуюУпаковку(
		ДанныеВскрытияУпаковки);
	
	Если ЗначениеЗаполнено(РезультатВскрытия.ТекстОшибки) Тогда
		РезультатОбработки.ТекстОшибки = РезультатВскрытия.ТекстОшибки;
		РезультатОбработки.ЕстьОшибки  = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьДеревоУпаковокИШтрихкодыУпаковокУточненнымиДанными(ДанныеШтрихкода, ИменаСвойств, ПерезаписатьШтрихкодУпаковки)

	Если Не ЭтоАдресВременногоХранилища(ДанныеШтрихкода.АдресДереваУпаковок) Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоУпаковок = ПолучитьИзВременногоХранилища(ДанныеШтрихкода.АдресДереваУпаковок);

	ДанныеПоУпаковкам = Новый ТаблицаЗначений;
	ДанныеПоУпаковкам.Колонки.Добавить("ШтрихкодУпаковки", Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	Для Каждого ИмяСвойства Из ИменаСвойств Цикл
		ДанныеПоУпаковкам.Колонки.Добавить(ИмяСвойства, ДеревоУпаковок.Колонки[ИмяСвойства].ТипЗначения);
	КонецЦикла;
	
	Если ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
		Или ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор Тогда
		
		Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
			
			Если ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор
				И ДанныеШтрихкода.ПредставлениеНоменклатуры <> СтрокаДерева.ПредставлениеНоменклатуры Тогда
				Прервать;
			КонецЕсли;
			
			Для Каждого ИмяСвойства Из ИменаСвойств Цикл
				СтрокаДерева[ИмяСвойства] = ДанныеШтрихкода[ИмяСвойства];
			КонецЦикла;

			Если ЗначениеЗаполнено(СтрокаДерева.ШтрихкодУпаковки) Тогда
				ЗаполнитьЗначенияСвойств(ДанныеПоУпаковкам.Добавить(), СтрокаДерева);
			КонецЕсли;

			Для Каждого СтрокаПотребительскойУпаковки Из СтрокаДерева.Строки Цикл

				Для Каждого ИмяСвойства Из ИменаСвойств Цикл
					Если ИмяСвойства <> "Количество" Тогда
						СтрокаПотребительскойУпаковки[ИмяСвойства] = ДанныеШтрихкода[ИмяСвойства];
					КонецЕсли;
				КонецЦикла;
				
				Если ЗначениеЗаполнено(СтрокаПотребительскойУпаковки.ШтрихкодУпаковки) Тогда
					ЗаполнитьЗначенияСвойств(ДанныеПоУпаковкам.Добавить(), СтрокаПотребительскойУпаковки);
				КонецЕсли;

			КонецЦикла;
			
		КонецЦикла;

	ИначеЕсли ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда

		Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл

			Для Каждого ИмяСвойства Из ИменаСвойств Цикл
				СтрокаДерева[ИмяСвойства] = ДанныеШтрихкода[ИмяСвойства];
			КонецЦикла;

			Если ЗначениеЗаполнено(СтрокаДерева.ШтрихкодУпаковки) Тогда
				ЗаполнитьЗначенияСвойств(ДанныеПоУпаковкам.Добавить(), СтрокаДерева);
			КонецЕсли;

			Если СтрокаДерева.Строки.Количество() > 0 Тогда
				// Уточнение мерного количества и серии доступно только при детализации до монотоварных упаковок
				Возврат;
			КонецЕсли;

		КонецЦикла;
		
	Иначе
		Возврат;
	КонецЕсли;

	ПоместитьВоВременноеХранилище(ДеревоУпаковок, ДанныеШтрихкода.АдресДереваУпаковок);

	Если Не ПерезаписатьШтрихкодУпаковки Или ДанныеПоУпаковкам.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	НачатьТранзакцию();

	Попытка

		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.ШтрихкодыУпаковокТоваров");
		ЭлементБлокировки.ИсточникДанных = ДанныеПоУпаковкам;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "ШтрихкодУпаковки");
		Блокировка.Заблокировать();

		Для Каждого ДанныеПоУпаковке Из ДанныеПоУпаковкам Цикл
			ОбновитьЭлементШтрихкодовУпаковок(ДанныеПоУпаковке, ИменаСвойств);
		КонецЦикла;

		ЗафиксироватьТранзакцию();

	Исключение

		ОтменитьТранзакцию();

		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ИмяСобытияЖурналРегистрации = НСтр("ru = 'ИС МП: Обработка выбора серии'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки);

		ВызватьИсключение ПодробноеПредставлениеОшибки;

	КонецПопытки;

	УстановитьПривилегированныйРежим(Ложь);

	ПерезаписатьШтрихкодУпаковки = Ложь;

КонецПроцедуры

//Проверяет необходимость уточнения кода маркировки в составе упаковки, общее
//   * Проверка заполнения номенклатуры.
//   * Проверка заполнения серии (если она указана в документе-основании).
//   * Запуск специфичных проверок по подсистемам.
//
// Параметры:
//   СтрокаДерева - СтрокаДереваЗначений - проверяемый разобранный штрихкод в составе упаковки.
//   ДанныеКодовМаркировки - см. ИнициализироватьТаблицуМаркированныеТовары
//   ПараметрыСканирования - см. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования
//   ДанныеДокументаОснования - Неопределено, ТаблицаЗначений - данные документа-основания для проверки указания серий.
//
// Возвращаемое значение:
//   Булево - по проверяемой упаковке требуется уточнение данных.
//
Функция ПроверитьНеобходимостьУточнения(СтрокаДерева, ДанныеКодовМаркировки, ПараметрыСканирования, ДанныеДокументаОснования)

	ТребуетсяУточнение = Ложь;
	Для Каждого ВложенныйЭлемент Из СтрокаДерева.Строки Цикл
		ТребуетсяУточнение = ТребуетсяУточнение Или ПроверитьНеобходимостьУточнения(ВложенныйЭлемент, ДанныеКодовМаркировки, ПараметрыСканирования, ДанныеДокументаОснования);
	КонецЦикла;

	Если ЗначениеЗаполнено(СтрокаДерева.GTIN) И СтрокаДерева.Строки.Количество() = 0 Тогда

		Если Не ЗначениеЗаполнено(СтрокаДерева.Номенклатура) Тогда
			ТребуетсяУточнение = Истина;
		ИначеЕсли Не ЗначениеЗаполнено(СтрокаДерева.Серия) Тогда

			Если ДанныеДокументаОснования<>Неопределено Тогда
				СтрокиДокументаОснования = ДанныеДокументаОснования.НайтиСтроки(
					Новый Структура("Номенклатура,Характеристика", СтрокаДерева.Номенклатура, СтрокаДерева.Характеристика));
			Иначе
				СтрокиДокументаОснования = Новый Массив;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаДерева.НормализованныйШтрихкод) Тогда
				СтрокаКодаМаркировки = ДанныеКодовМаркировки.Найти(СтрокаДерева.НормализованныйШтрихкод, "НормализованныйШтрихкод");
			Иначе
				СтрокаКодаМаркировки = ДанныеКодовМаркировки.Найти(СтрокаДерева.Штрихкод, "Штрихкод");
			КонецЕсли;
			
			Если СтрокиДокументаОснования.Количество() = 1
					И ЗначениеЗаполнено(СтрокиДокументаОснования[0].Серия) Тогда
				Если ЗначениеЗаполнено(СтрокаДерева.ШтрихкодУпаковки) Тогда

					Серия = СтрокиДокументаОснования[0].Серия;

					НовыеРеквизиты = Новый Структура;
					НовыеРеквизиты.Вставить("Серия", Серия);

					Справочники.ШтрихкодыУпаковокТоваров.ИзменитьШтрихкодУпаковки(
						СтрокаДерева.ШтрихкодУпаковки, НовыеРеквизиты);
				КонецЕсли;
				СтрокаДерева.Серия = Серия;
				СтрокаКодаМаркировки.Серия = Серия;
			Иначе
				ТребуетсяУточнение = ТребуетсяУточнение Или СтрокаКодаМаркировки.ТребуетсяВыборСерии;
			КонецЕсли;
		ИначеЕсли СтрокаДерева.Коэффициент = 0 И СтрокаДерева.Количество = 0 Тогда
			ТребуетсяУточнение = Истина;
		КонецЕсли;
		
		Если Не ТребуетсяУточнение Тогда
			Если ОбщегоНазначенияИСКлиентСервер.ВидыПродукцииИСМП().Найти(СтрокаДерева.ВидПродукции)<>Неопределено Тогда
				МодульСпецифики = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
				ТребуетсяУточнение = МодульСпецифики.ПроверитьНеобходимостьУточнения(СтрокаДерева, ПараметрыСканирования);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат ТребуетсяУточнение;

КонецФункции

#КонецОбласти

Функция ОбработатьВводКодаМаркировки(ФормаПараметрыСканирования, РезультатВыбора, РезультатОбработки, КэшированныеЗначения)

	ДанныеШтрихкода = РезультатОбработки.ДанныеШтрихкода;

	Форма = ФормаПараметрыСканирования;
	Если ТипЗнч(ФормаПараметрыСканирования) = Тип("Структура") Тогда
		ПараметрыСканирования = Форма;
		Форма = Неопределено;
	Иначе
		ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования(Форма);
	КонецЕсли;

	Для Каждого КлючИЗначение Из РезультатВыбора Цикл
		Значение = КлючИЗначение.Значение;
		ТипЗначения = ТипЗнч(Значение);
		Если ТипЗначения = Тип("Строка")
			Или ТипЗначения = Тип("Число")
			Или ОбщегоНазначения.ЭтоСсылка(ТипЗначения) Тогда
			Если Не ЗначениеЗаполнено(Значение) И ДанныеШтрихкода.Свойство(КлючИЗначение.Ключ) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ДанныеШтрихкода.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	РезультатОбработки = ШтрихкодированиеОбщегоНазначенияИС.ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования);

	РезультатОбработки.ТребуетсяПроверкаСредствамиККТ = Ложь;
	РезультатОбработки.ПроверкаСредствамиККТЗавершена = Истина;

	Возврат РезультатОбработки;

КонецФункции

// Актуализирует данные элемента справочника штрихкоды упаковок.
//
// Параметры:
//  ДанныеШтрихкода       - Структура - данные штрихкода содержащие элемент справочника.
//  ИзмененныеСвойства    - Массив Из Строка, Неопределено - Имена свойств, которые необходимо установить.
//  ПараметрыСканирования - см. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования.
Процедура ОбновитьЭлементШтрихкодовУпаковок(ДанныеШтрихкода, ИзмененныеСвойства = Неопределено, ПараметрыСканирования = Неопределено)

	ТребуетсяЗаписьОбъекта = Ложь;
	
	Если ИзмененныеСвойства = Неопределено
		Или ИзмененныеСвойства.Найти("ПерезаписатьОбъект") <> Неопределено Тогда
		
		ИзменяемыеРеквизиты = Новый Структура();
		ИзменяемыеРеквизиты.Вставить("Номенклатура");
		ИзменяемыеРеквизиты.Вставить("Характеристика");
		ИзменяемыеРеквизиты.Вставить("Серия");
		ИзменяемыеРеквизиты.Вставить("ТипШтрихкода");
		ИзменяемыеРеквизиты.Вставить("ТипУпаковки");
		ИзменяемыеРеквизиты.Вставить("Количество");
		
		ЗаполнитьЗначенияСвойств(ИзменяемыеРеквизиты, ДанныеШтрихкода);

		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеШтрихкода, "ПроизвольнаяЕдиницаУчета")
			И ДанныеШтрихкода.ПроизвольнаяЕдиницаУчета Тогда
			ИзменяемыеРеквизиты.Вставить("КоличествоПотребительскихУпаковок", ДанныеШтрихкода.КоличествоПотребительскихУпаковок);
		КонецЕсли;

		ТребуетсяЗаписьОбъекта = Истина;
		
		Если ПараметрыСканирования <> Неопределено
			И ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ЭтоСтрокаДанныхЧастичногоВыбытия(ДанныеШтрихкода, ПараметрыСканирования) Тогда

			ОтключитьЗаменуСвойств = Новый Соответствие();
			ОтключитьЗаменуСвойств.Вставить("Количество",                        Истина);
			ОтключитьЗаменуСвойств.Вставить("КоличествоПотребительскихУпаковок", Истина);

			Если ДанныеШтрихкода.ЧастичноеВыбытиеВариантУчета = Перечисления["ВариантыУчетаЧастичногоВыбытияИС"]["НастроеннаяНоменклатура"] Тогда
				ОтключитьЗаменуСвойств.Вставить("Номенклатура",   Истина);
				ОтключитьЗаменуСвойств.Вставить("Характеристика", Истина);
				ОтключитьЗаменуСвойств.Вставить("Упаковка",       Истина);
			КонецЕсли;

		КонецЕсли;

	Иначе
		Если Не ЗначениеЗаполнено(ДанныеШтрихкода.ШтрихкодУпаковки)
			Или ИзмененныеСвойства.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;

		Реквизиты = Метаданные.Справочники.ШтрихкодыУпаковокТоваров.Реквизиты;
		ИзменяемыеРеквизиты = Новый Структура;

		Для Каждого Свойство Из ИзмененныеСвойства Цикл
			Если Реквизиты.Найти(Свойство) <> Неопределено Тогда
				ТребуетсяЗаписьОбъекта = Истина;
				ИзменяемыеРеквизиты.Вставить(Свойство, ДанныеШтрихкода[Свойство]);
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;
	
	Если Не ТребуетсяЗаписьОбъекта Тогда
		Возврат;
	КонецЕсли;

	Справочники.ШтрихкодыУпаковокТоваров.ЗаполнитьШтрихкодУпаковки(ДанныеШтрихкода.ШтрихкодУпаковки, ИзменяемыеРеквизиты, ОтключитьЗаменуСвойств);

КонецПроцедуры

// Формирует соответствие, ключ которого - строка дерева, значение - структура, свойства и значения которой равны
// строке дерева.
//
// Параметры:
//  СтрокиДерева - КоллекцияСтрокДереваЗначений - Строки дерева.
//  Соответствие - Соответствие Из СтрокаДереваЗначений - Ключ - строка дерева, значение - структура значений строки дерева.
Процедура ПоместитьДанныеСтрокДереваВСоответствие(СтрокиДерева, Соответствие)
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл

		Если Не ГрупповаяОбработкаШтрихкодовИС.ЭтоАгрегатТСД(СтрокиДерева) Тогда
			ДанныеШтрихкода = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаДерева);
			Соответствие.Вставить(СтрокаДерева.НормализованныйШтрихкод, ДанныеШтрихкода);
		КонецЕсли;
		ПоместитьДанныеСтрокДереваВСоответствие(СтрокаДерева.Строки, Соответствие);

	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьМассивСтрокДереваПоGTIN(ДеревоУпаковок, GTIN, МассивСтрок)

	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл

		ЗаполнитьМассивСтрокДереваПоGTIN(СтрокаДерева, GTIN, МассивСтрок);

		Если СтрокаДерева.GTIN = GTIN Тогда
			МассивСтрок.Добавить(СтрокаДерева);
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

Функция КоличествоСоответствуетИндивидуальнойПотребительскойУпаковке(ДанныеШтрихкода)
	Если ДанныеШтрихкода.ПроизвольнаяЕдиницаУчета Тогда
		Возврат ДанныеШтрихкода.КоличествоПотребительскихУпаковок = 1;
	Иначе
		Возврат ДанныеШтрихкода.Количество = 1;
	КонецЕсли;
КонецФункции

// Заполняет строку дерева упаковок по выборке запроса с учетом уровня.
//
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - строка дерева упаковок.
//  Выборка - ВыборкаИзРезультатаЗапроса - Выборка результата запроса.
//  Уровень - Число - Уровень строки дерева.
//  ОбщиеМодули - см. ШтрихкодированиеОбщегоНазначенияИС.ОбщиеМодулиПодсистем
//  НастройкиРазбора - Структура из КлючИЗначение
//  ПараметрыСканирования - см. ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования
Процедура ЗаполнитьСтрокуДереваУпаковокПоВыборке(СтрокаДерева, Выборка, Уровень, ОбщиеМодули,
		НастройкиРазбора, ПараметрыСканирования = Неопределено)
	
	СозданиеНаборов = ПараметрыСканирования <> Неопределено
		И ПараметрыСканирования.Свойство("СозданиеНаборов")
		И ПараметрыСканирования.СозданиеНаборов;
	
	Если Уровень = 0 Тогда
		СтрокаДерева.ШтрихкодУпаковки                            = Выборка.УпаковкаУровень0;
		СтрокаДерева.ИдентификаторСтроки                         = Выборка.УпаковкаУровень0ИдентификаторСтроки;
		СтрокаДерева.ТипУпаковки                                 = Выборка.УпаковкаУровень0ТипУпаковки;
		СтрокаДерева.ТипШтрихкода                                = Выборка.УпаковкаУровень0ТипШтрихкода;
		СтрокаДерева.Штрихкод                                    = Выборка.УпаковкаУровень0Штрихкод;
		СтрокаДерева.Номенклатура                                = Выборка.УпаковкаУровень0Номенклатура;
		СтрокаДерева.Характеристика                              = Выборка.УпаковкаУровень0Характеристика;
		СтрокаДерева.ХешСумма                                    = Выборка.УпаковкаУровень0ХешСумма;
		СтрокаДерева.ХешСуммаНормализации                        = Выборка.УпаковкаУровень0ХешСуммаНормализации;
		СтрокаДерева.Серия                                       = Выборка.УпаковкаУровень0Серия;
		СтрокаДерева.ВидПродукции                                = Выборка.УпаковкаУровень0ВидПродукции;
		СтрокаДерева.МаркируемаяПродукция                        = Выборка.УпаковкаУровень0МаркируемаяПродукция;
		СтрокаДерева.КоличествоПотребительскихУпаковокПоДаннымИБ = ?(Выборка.УпаковкаУровень0КоличествоПотребительскихУпаковок = 0,
			Выборка.УпаковкаУровень0Количество, Выборка.УпаковкаУровень0КоличествоПотребительскихУпаковок);
		СтрокаДерева.КоличествоПоДаннымИБ                        = Выборка.УпаковкаУровень0Количество;
		СтрокаДерева.ТребуетВзвешивания                          = Выборка.УпаковкаУровень0ТребуетВзвешивания;
		СтрокаДерева.ПроизвольнаяЕдиницаУчета                    = Выборка.УпаковкаУровень0ПроизвольнаяЕдиницаУчета;
	ИначеЕсли Уровень = 1 Тогда
		СтрокаДерева.ШтрихкодУпаковки                            = Выборка.УпаковкаУровень1;
		СтрокаДерева.ИдентификаторСтроки                         = Выборка.УпаковкаУровень1ИдентификаторСтроки;
		СтрокаДерева.ТипУпаковки                                 = Выборка.УпаковкаУровень1ТипУпаковки;
		СтрокаДерева.ТипШтрихкода                                = Выборка.УпаковкаУровень1ТипШтрихкода;
		СтрокаДерева.Штрихкод                                    = Выборка.УпаковкаУровень1Штрихкод;
		СтрокаДерева.Номенклатура                                = Выборка.УпаковкаУровень1Номенклатура;
		СтрокаДерева.Характеристика                              = Выборка.УпаковкаУровень1Характеристика;
		СтрокаДерева.ХешСумма                                    = Выборка.УпаковкаУровень1ХешСумма;
		СтрокаДерева.ХешСуммаНормализации                        = Выборка.УпаковкаУровень1ХешСуммаНормализации;
		СтрокаДерева.Серия                                       = Выборка.УпаковкаУровень1Серия;
		СтрокаДерева.ВидПродукции                                = Выборка.УпаковкаУровень1ВидПродукции;
		СтрокаДерева.МаркируемаяПродукция                        = Выборка.УпаковкаУровень1МаркируемаяПродукция;
		СтрокаДерева.КоличествоПотребительскихУпаковокПоДаннымИБ = ?(Выборка.УпаковкаУровень1КоличествоПотребительскихУпаковок = 0,
			Выборка.УпаковкаУровень1Количество, Выборка.УпаковкаУровень1КоличествоПотребительскихУпаковок);
		СтрокаДерева.КоличествоПоДаннымИБ                        = Выборка.УпаковкаУровень1Количество;
		СтрокаДерева.ТребуетВзвешивания                          = Выборка.УпаковкаУровень1ТребуетВзвешивания;
		СтрокаДерева.ПроизвольнаяЕдиницаУчета                    = Выборка.УпаковкаУровень1ПроизвольнаяЕдиницаУчета;
	ИначеЕсли Уровень = 2 Тогда
		СтрокаДерева.ШтрихкодУпаковки                            = Выборка.УпаковкаУровень2;
		СтрокаДерева.ИдентификаторСтроки                         = Выборка.УпаковкаУровень2ИдентификаторСтроки;
		СтрокаДерева.ТипУпаковки                                 = Выборка.УпаковкаУровень2ТипУпаковки;
		СтрокаДерева.ТипШтрихкода                                = Выборка.УпаковкаУровень2ТипШтрихкода;
		СтрокаДерева.Штрихкод                                    = Выборка.УпаковкаУровень2Штрихкод;
		СтрокаДерева.Номенклатура                                = Выборка.УпаковкаУровень2Номенклатура;
		СтрокаДерева.Характеристика                              = Выборка.УпаковкаУровень2Характеристика;
		СтрокаДерева.ХешСумма                                    = Выборка.УпаковкаУровень2ХешСумма;
		СтрокаДерева.ХешСуммаНормализации                        = Выборка.УпаковкаУровень2ХешСуммаНормализации;
		СтрокаДерева.Серия                                       = Выборка.УпаковкаУровень2Серия;
		СтрокаДерева.ВидПродукции                                = Выборка.УпаковкаУровень2ВидПродукции;
		СтрокаДерева.МаркируемаяПродукция                        = Выборка.УпаковкаУровень2МаркируемаяПродукция;
		СтрокаДерева.КоличествоПотребительскихУпаковокПоДаннымИБ = ?(Выборка.УпаковкаУровень2КоличествоПотребительскихУпаковок = 0,
			Выборка.УпаковкаУровень2Количество, Выборка.УпаковкаУровень2КоличествоПотребительскихУпаковок);
		СтрокаДерева.КоличествоПоДаннымИБ                        = Выборка.УпаковкаУровень2Количество;
		СтрокаДерева.ТребуетВзвешивания                          = Выборка.УпаковкаУровень2ТребуетВзвешивания;
		СтрокаДерева.ПроизвольнаяЕдиницаУчета                    = Выборка.УпаковкаУровень2ПроизвольнаяЕдиницаУчета;
	ИначеЕсли Уровень = 3 Тогда
		СтрокаДерева.ШтрихкодУпаковки                            = Выборка.УпаковкаУровень3;
		СтрокаДерева.ИдентификаторСтроки                         = Выборка.УпаковкаУровень3ИдентификаторСтроки;
		СтрокаДерева.ТипУпаковки                                 = Выборка.УпаковкаУровень3ТипУпаковки;
		СтрокаДерева.ТипШтрихкода                                = Выборка.УпаковкаУровень3ТипШтрихкода;
		СтрокаДерева.Штрихкод                                    = Выборка.УпаковкаУровень3Штрихкод;
		СтрокаДерева.Номенклатура                                = Выборка.УпаковкаУровень3Номенклатура;
		СтрокаДерева.Характеристика                              = Выборка.УпаковкаУровень3Характеристика;
		СтрокаДерева.ХешСумма                                    = Выборка.УпаковкаУровень3ХешСумма;
		СтрокаДерева.ХешСуммаНормализации                        = Выборка.УпаковкаУровень3ХешСуммаНормализации;
		СтрокаДерева.Серия                                       = Выборка.УпаковкаУровень3Серия;
		СтрокаДерева.ВидПродукции                                = Выборка.УпаковкаУровень3ВидПродукции;
		СтрокаДерева.МаркируемаяПродукция                        = Выборка.УпаковкаУровень3МаркируемаяПродукция;
		СтрокаДерева.КоличествоПотребительскихУпаковокПоДаннымИБ = ?(Выборка.УпаковкаУровень3КоличествоПотребительскихУпаковок = 0,
			Выборка.УпаковкаУровень3Количество, Выборка.УпаковкаУровень3КоличествоПотребительскихУпаковок);
		СтрокаДерева.КоличествоПоДаннымИБ                        = Выборка.УпаковкаУровень3Количество;
		СтрокаДерева.ТребуетВзвешивания                          = Выборка.УпаковкаУровень3ТребуетВзвешивания;
		СтрокаДерева.ПроизвольнаяЕдиницаУчета                    = Выборка.УпаковкаУровень3ПроизвольнаяЕдиницаУчета;
	Иначе
		ВызватьИсключение НСтр("ru = 'Внутренняя ошибка'");
	КонецЕсли;
	
	Если ПараметрыСканирования <> Неопределено
		И ЗначениеЗаполнено(СтрокаДерева.Номенклатура)
		И ЗначениеЗаполнено(СтрокаДерева.Серия)
		И ПараметрыСканирования.ПараметрыУказанияСерий <> Неопределено
		И Не ОбщегоНазначенияИС.ТребуетсяВыборСерии(СтрокаДерева, ПараметрыСканирования) Тогда
		СтрокаДерева.Серия = Неопределено;
	КонецЕсли;
	
	Если ПараметрыСканирования <> Неопределено
		И Не ЗначениеЗаполнено(СтрокаДерева.Номенклатура)
		И СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
		И ПараметрыСканирования.РазрешенаОбработкаКодовСПустойНоменклатурой
		И ПараметрыСканирования.ДопустимыеВидыПродукции.Количество() = 1 Тогда
		
		ВидПродукции = ПараметрыСканирования.ДопустимыеВидыПродукции[0];
		
		ДанныеРазбора = ЗаполнитьСтрокуДереваПоДаннымРазбораШтрихкода(
			СтрокаДерева, ОбщиеМодули, НастройкиРазбора, ПараметрыСканирования);
		Если ДанныеРазбора <> Неопределено
			И ДанныеРазбора.ВидыПродукции.Найти(ВидПродукции) <> Неопределено Тогда
			СтрокаДерева.ВидПродукции = ВидПродукции;
		КонецЕсли;
		
	КонецЕсли;
	
	// Предварительное заполнение Вида упаковки
	Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
		СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская;
		Если СтрокаДерева.Родитель <> Неопределено
			И СтрокаДерева.Родитель.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
			И СтрокаДерева.Родитель.Номенклатура <> СтрокаДерева.Номенклатура Тогда
			СтрокаДерева.Родитель.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор;
		КонецЕсли;
	ИначеЕсли СтрокаДерева.ТипШтрихкода = Перечисления.ТипыШтрихкодов.SSCC
		Или СтрокаДерева.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_128
		Или СтрокаДерева.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_DataBarExpandedStacked Тогда
		СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая;
	ИначеЕсли СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка
		И СтрокаДерева.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_DataMatrix
		И ЗначениеЗаполнено(СтрокаДерева.Номенклатура)
		// В документе маркировки требуется точное определение вида упаковки
		И Не СозданиеНаборов Тогда
		СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая;
	ИначеЕсли СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка
		И СтрокаДерева.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_DataMatrix
		И ЗначениеЗаполнено(СтрокаДерева.Номенклатура) Тогда
		СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор;
	ИначеЕсли СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка Тогда
		СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая;
	ИначеЕсли Не ЗначениеЗаполнено(СтрокаДерева.ТипУпаковки)
		И ЗначениеЗаполнено(СтрокаДерева.Номенклатура)
		И СтрокаДерева.КоличествоПотребительскихУпаковокПоДаннымИБ > 1 
		// В документе маркировки требуется точное определение вида упаковки
		И Не СозданиеНаборов Тогда
		СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполнитьСтрокуДереваПоДаннымРазбораШтрихкода(СтрокаДерева, ОбщиеМодули, НастройкиРазбора, ПараметрыСканирования = Неопределено)
	
	Если СтрокаДерева.СоставКодаМаркировки <> Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаДерева.ВидПродукции) И ПараметрыСканирования <> Неопределено Тогда
		ВидыПродукции = ПараметрыСканирования.ДопустимыеВидыПродукции;
	Иначе
		ВидыПродукции = СтрокаДерева.ВидПродукции;
	КонецЕсли;
	
	ПримечаниеКРезультатуРазбора = Неопределено;
	ДанныеРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировкиИспользуяПредыдущиеРезультаты(
		СтрокаДерева.Штрихкод, НастройкиРазбора.Кеш, ВидыПродукции, ПримечаниеКРезультатуРазбора,
		НастройкиРазбора.Общие, НастройкиРазбора.Пользовательские);
	
	Если ДанныеРазбора = Неопределено
		И НастройкиРазбора.Общие.ТолькоУчитываемыеВидыПродукции
		И ПримечаниеКРезультатуРазбора.ИдентификаторОшибки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ИдентификаторыОшибокРазбораКодаМаркировки().КодМаркировкиСоответствуетДругимВидамПродукции Тогда
		
		ВидыПродукцииДляРазбора = ВидыПродукции;
		Если ТипЗнч(ВидыПродукции) = Тип("Массив") Тогда
			Виды = ВидыПродукции;
		Иначе
			Виды = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВидыПродукции);
		КонецЕсли;
		ВыключенныеВидыПродукции = ОбщегоНазначенияКлиентСервер.РазностьМассивов(Виды, НастройкиРазбора.Общие.ДоступныеВидыПродукции);
		Если ВыключенныеВидыПродукции.Количество() Тогда
			НастройкиРазбора.Общие = РазборКодаМаркировкиИССлужебный.НастройкиРазбораКодаМаркировки(, Ложь);
		КонецЕсли;
		Если СтрокаДерева.ВидПродукции = Перечисления.ВидыПродукцииИС.АльтернативныйТабак
			И СтрокаДерева.ВидПродукции = ВидыПродукции Тогда
			ВидыПродукцииДляРазбора = Новый Массив();
			ВидыПродукцииДляРазбора.Добавить(Перечисления.ВидыПродукцииИС.АльтернативныйТабак);
			ВидыПродукцииДляРазбора.Добавить(Перечисления.ВидыПродукцииИС.Табак);
		КонецЕсли;
		
		ПримечаниеКРезультатуРазбора = Неопределено;
		ДанныеРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировкиИспользуяПредыдущиеРезультаты(
			СтрокаДерева.Штрихкод, НастройкиРазбора.Кеш, ВидыПродукцииДляРазбора, ПримечаниеКРезультатуРазбора,
			НастройкиРазбора.Общие, НастройкиРазбора.Пользовательские);
		
	КонецЕсли;
	
	Если ДанныеРазбора <> Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(СтрокаДерева.ВидПродукции) И ДанныеРазбора.ВидыПродукции.Количество() = 1 Тогда
			СтрокаДерева.ВидПродукции = ДанныеРазбора.ВидыПродукции[0];
		КонецЕсли;
		
		СтрокаДерева.ТипШтрихкода         = ДанныеРазбора.ТипШтрихкода;
		СтрокаДерева.СоставКодаМаркировки = ДанныеРазбора.СоставКодаМаркировки;
		СтрокаДерева.ДанныеРазбора        = ДанныеРазбора;
		
		ШтрихкодированиеОбщегоНазначенияИС.ЗаполнитьВидУпаковкиПоДаннымРазбораИлиСтрокеДанных(СтрокаДерева, ДанныеРазбора);
		
		Если ДанныеРазбора.СоставКодаМаркировки <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаДерева, ДанныеРазбора.СоставКодаМаркировки);
		КонецЕсли;
		
		ВключаяТабачнуюПродукцию = Истина;
		Если ШтрихкодированиеОбщегоНазначенияИС.ПрисутствуетПродукцияИСМП(ДанныеРазбора.ВидыПродукции, ВключаяТабачнуюПродукцию) Тогда
			ШтрихкодированиеОбщегоНазначенияМОТП.РассчитатьХэшСуммуНормализации(СтрокаДерева, ДанныеРазбора);
		КонецЕсли;
		
	Иначе
		
		СтрокаДерева.ВидУпаковки = Неопределено;
		СтрокаДерева.ЕстьОшибки  = Истина;
		СтрокаДерева.ТекстОшибки = ПримечаниеКРезультатуРазбора.ТекстОшибки;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаДерева.НормализованныйШтрихкод) Тогда
		// Нормализация используется для поиска КМ без учета МРЦ.
		// Для табачных пачек и блоков нормализованный код не содержит МРЦ.
		// Для логистические упаковки GS1-128 нормализованный код не содержит скобок.
		// Для остальной маркированной продукции нормализованный штрихкод равен штрихкоду.
		СтрокаДерева.НормализованныйШтрихкод = СтрокаДерева.Штрихкод;
	КонецЕсли;
	
	Возврат ДанныеРазбора;
	
КонецФункции

// Выполняет сравнение двух деревьев значений: Дерево по данным информационной базы, сформированнное на базе справочника
//   "Штрихкоды упаковок товаров" и дерева, полученного из сервиса государственной ИС.
//
// Параметры:
//  ДеревоУпаковок - См. ИнициализироватьДеревоУпаковок.
//  ДеревоУпаковокПоДаннымСервиса - ДеревоЗначений - Дерево, полученное из сервиса государственной ИС.
//  ЕстьРасхождения - Булево - Истина, если выявлено расхождение при сравнении.
//  ПараметрыСканирования - См. ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования.
//  ПолноеСравнениеДеревьев - Булево - сравнить деревья, даже если ШтрихкодУпаковки не записан в базу
//                                     (используется при сравнении дерева упаковок отчетов производственной линии).
Процедура ВыявитьРасхожденияВСоставахДеревьев(ДеревоУпаковок, ДеревоУпаковокПоДаннымСервиса,
	ЕстьРасхождения, ПараметрыСканирования = Неопределено, ПолноеСравнениеДеревьев = Ложь) Экспорт
	
	КэшПроверенныхСтрок        = Новый Соответствие;
	ИсходныеЗначенияШтрихкодов = Новый Соответствие;
	
	ПараметрыНормализацииКМ = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
	ПараметрыНормализацииКМ.ИмяСвойстваКодМаркировки = "НормализованныйШтрихкод";
	
	ШтрихкодированиеИССлужебный.НормализоватьДеревоЗначенийРекурсивно(
		ДеревоУпаковок, ПараметрыНормализацииКМ, ИсходныеЗначенияШтрихкодов);
	
	ШтрихкодированиеИССлужебный.НормализоватьДеревоЗначенийРекурсивно(
		ДеревоУпаковокПоДаннымСервиса, ПараметрыНормализацииКМ, ИсходныеЗначенияШтрихкодов);
	
	ДеревоУпаковокДляСравнения = Новый Структура;
	ДеревоУпаковокДляСравнения.Вставить("Строки", Новый Массив);
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		Если ЗначениеЗаполнено(СтрокаДерева.ШтрихкодУпаковки)
			И Не ЗначениеЗаполнено(СтрокаДерева.ТекстОшибки)
			Или ПолноеСравнениеДеревьев Тогда
			ДеревоУпаковокДляСравнения.Строки.Добавить(СтрокаДерева);
		КонецЕсли;
	КонецЦикла;
	
	ВыявитьРасхожденияВСтрокахДеревьев(
		ДеревоУпаковокДляСравнения, ДеревоУпаковокПоДаннымСервиса, КэшПроверенныхСтрок, ЕстьРасхождения,
		ТекстОшибкиОтсутствуетПоДаннымСервисаИСМП(), Истина);
	ВыявитьРасхожденияВСтрокахДеревьев(
		ДеревоУпаковокПоДаннымСервиса, ДеревоУпаковок, КэшПроверенныхСтрок, ЕстьРасхождения,
		ТекстОшибкиОтсутствуетПоДаннымИнформационнойБазы(), Ложь, ПараметрыСканирования);
	
	Для Каждого КлючИЗначение Из ИсходныеЗначенияШтрихкодов Цикл

		СтрокаДерева                         = КлючИЗначение.Ключ;
		СтрокаДерева.НормализованныйШтрихкод = КлючИЗначение.Значение;
		
	КонецЦикла;
	
КонецПроцедуры

// Сравнивает Дерево значений 1 и Дерево значений 2. Фиксирует расхождения.
//
// Параметры:
//  ДеревоЗначений1 - ДеревоЗначений - Дерево №1
//  ДеревоЗначений2 - ДеревоЗначений - Дерево №2
//  КэшПроверенныхСтрок - Соответствие Из СтрокаДереваЗначений - Кэш проверенных строк
//  ЕстьРасхождения - Булево - Истина, если выявлено расхождение при сравнении
//  ТекстОшибки - Строка - Текст сообщения при обнаружении расхождения
//  ПерваяИтерация - Булево - Признак выполнения первой итерации сравнения
//  ПараметрыСканирования - См. ПараметрыСканирования
Процедура ВыявитьРасхожденияВСтрокахДеревьев(ДеревоЗначений1, ДеревоЗначений2, КэшПроверенныхСтрок, ЕстьРасхождения,
	ТекстОшибки, ПерваяИтерация, ПараметрыСканирования = Неопределено)
	
	ВидДетализации = Перечисления.ДетализацияСтруктурыХраненияИС;
	
	ТипСтрокаДереваЗначений = Тип("СтрокаДереваЗначений");
	Если ТипЗнч(ДеревоЗначений2) = ТипСтрокаДереваЗначений Тогда
		ЕстьКолонкаСодержитСерыеКоды = ДеревоЗначений2.Владелец().Колонки.Найти("СодержитСерыеКоды") <> Неопределено;
	Иначе
		ЕстьКолонкаСодержитСерыеКоды = Ложь;
	КонецЕсли;
	
	СозданиеНаборов = ПараметрыСканирования <> Неопределено
		И ПараметрыСканирования.Свойство("СозданиеНаборов")
		И ПараметрыСканирования.СозданиеНаборов;

	ИндексНормализованныйШтрихкод = Новый Соответствие();
	Для Каждого СтрокаДереваИндекс Из ДеревоЗначений2.Строки Цикл
		ИндексНормализованныйШтрихкод.Вставить(СтрокаДереваИндекс.НормализованныйШтрихкод, СтрокаДереваИндекс);
	КонецЦикла;
	
	Для Каждого СтрокаДерева1 Из ДеревоЗначений1.Строки Цикл
		
		СоответствующаяСтрокаДерева2 = КэшПроверенныхСтрок.Получить(СтрокаДерева1);
		Если СоответствующаяСтрокаДерева2 <> Неопределено Тогда
			ВыявитьРасхожденияВСтрокахДеревьев(
				СтрокаДерева1, СоответствующаяСтрокаДерева2, КэшПроверенныхСтрок, ЕстьРасхождения,
				ТекстОшибки, ПерваяИтерация, ПараметрыСканирования);
			Продолжить;
		КонецЕсли;

		Если ПерваяИтерация Тогда
			
			НайденнаяСтрокаДерева2 = ИндексНормализованныйШтрихкод.Получить(СтрокаДерева1.НормализованныйШтрихкод);
			Если НайденнаяСтрокаДерева2 = Неопределено Тогда

				Если ЕстьКолонкаСодержитСерыеКоды
					И ДеревоЗначений2.СодержитСерыеКоды Тогда
					Продолжить;
				КонецЕсли;

				Если ДеревоЗначений2.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор
					И Не СозданиеНаборов Тогда
					Продолжить;
				КонецЕсли;

				СтрокаДерева1.ТекстОшибки = ТекстОшибки;
				СтрокаДерева1.ЕстьОшибки  = Истина;
				ЕстьРасхождения = Истина;

			Иначе
				КэшПроверенныхСтрок.Вставить(НайденнаяСтрокаДерева2, СтрокаДерева1);
				ВыявитьРасхожденияВСтрокахДеревьев(
					СтрокаДерева1, НайденнаяСтрокаДерева2, КэшПроверенныхСтрок, ЕстьРасхождения,
					ТекстОшибки, ПерваяИтерация, ПараметрыСканирования);
			КонецЕсли;

		Иначе

			Если ПараметрыСканирования <> Неопределено
				И (ПараметрыСканирования.ДетализацияСтруктурыХранения = ВидДетализации.КоробаСГрупповымиУпаковками
					Или ПараметрыСканирования.ДетализацияСтруктурыХранения = ВидДетализации.ГрупповыеУпаковки)
				И СтрокаДерева1.Родитель <> Неопределено
				И (СтрокаДерева1.Родитель.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
					Или СтрокаДерева1.Родитель.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор) Тогда
				Продолжить;
			КонецЕсли;

			Если ПараметрыСканирования <> Неопределено
				И ПараметрыСканирования.ДетализацияСтруктурыХранения = ВидДетализации.ПалетыСМонотоварнымиКоробами
				И СтрокаДерева1.Родитель <> Неопределено
				И СтрокаДерева1.Родитель.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
				И ЗначениеЗаполнено(СтрокаДерева1.Родитель.GTIN) Тогда
				Продолжить;
			КонецЕсли;

			НайденнаяСтрокаДерева2 = ИндексНормализованныйШтрихкод.Получить(СтрокаДерева1.НормализованныйШтрихкод);
			Если НайденнаяСтрокаДерева2 = Неопределено Тогда
				НоваяСтрокаДерева2 = ДеревоЗначений2.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаДерева2, СтрокаДерева1);
				НоваяСтрокаДерева2.СоставКодаМаркировки = СтрокаДерева1.СоставКодаМаркировки;
				НоваяСтрокаДерева2.ТипШтрихкода         = СтрокаДерева1.ТипШтрихкода;
				НоваяСтрокаДерева2.ТекстОшибки          = ТекстОшибки;
				НоваяСтрокаДерева2.ЕстьОшибки           = Истина;
				ЕстьРасхождения = Истина;
				Пока НоваяСтрокаДерева2.Родитель <> Неопределено Цикл
					НоваяСтрокаДерева2 = НоваяСтрокаДерева2.Родитель;
					Если Не ЗначениеЗаполнено(НоваяСтрокаДерева2.ТекстОшибки) Тогда
						НоваяСтрокаДерева2.ТекстОшибки = ТекстОшибки;
					КонецЕсли;
					НоваяСтрокаДерева2.ЕстьОшибки = Истина;
				КонецЦикла;
				ИндексНормализованныйШтрихкод.Вставить(НоваяСтрокаДерева2.НормализованныйШтрихкод, НоваяСтрокаДерева2);
			КонецЕсли;

		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтметитьНовыеИИзмененныеШтрихкодыУпаковок(ДанныеПоШтрихкодам, ЭлементыДляИзменения) Экспорт

	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если СтрокаДанных.ОбработанСОшибками Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДанных.ТребуетсяСопоставление
			И СтрокаДанных.ПримечаниеКРазборуШтрихкода <> Неопределено
			И ЗначениеЗаполнено(СтрокаДанных.ПримечаниеКРазборуШтрихкода.ИдентификаторОшибки) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДанных.ТребуетсяУказаниеПлановогоКоличестваПотребительскихУпаковокПоGTIN Тогда
			Продолжить;
		КонецЕсли;
		
		// В справочнике Штрихкоды упаковок номенлатуры должен быть заполнен ТипУпаковки.
		// Тип упаковки может быть заполнен при создании штрихкода по данным вида упаковки.
		Если Не ЗначениеЗаполнено(СтрокаДанных.ТипУпаковки)
			И Не ЗначениеЗаполнено(СтрокаДанных.ВидУпаковки) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДанных.ТребуетсяОбновлениеШтрихкода Тогда
			ОтметитьКОбновлению(ЭлементыДляИзменения, СтрокаДанных, Неопределено);
		КонецЕсли;

		Если Не ЗначениеЗаполнено(СтрокаДанных.ШтрихкодУпаковки)
			И ((ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаДанных.ТипУпаковки)
					И Не СтрокаДанных.ЭтоШтрихкодНоменклатуры) // При считывании GTIN ОСУ тип упаковки = Монотоварная, но ЭтоШтрихкодНоменклатуры = Истина
				Или (Не СтрокаДанных.ЭтоШтрихкодНоменклатуры
					И ЗначениеЗаполнено(СтрокаДанных.ВидУпаковки)
					И (СтрокаДанных.МаркируемаяПродукция = Истина
						Или СтрокаДанных.ДанныеРазбора <> Неопределено))) Тогда

			ОтметитьКОбновлению(ЭлементыДляИзменения, СтрокаДанных, Неопределено);

		КонецЕсли;

	КонецЦикла

КонецПроцедуры

Процедура ОтметитьКОбновлению(ЭлементыДляИзменения, СтрокаДанных, ИзмененныеСвойства) Экспорт

	Изменения = ЭлементыДляИзменения.Получить(СтрокаДанных);

	Если Изменения = Неопределено Тогда
		Изменения = Новый Массив;
	КонецЕсли;

	Если ТипЗнч(ИзмененныеСвойства) = Тип("Соответствие") Тогда
		Для Каждого КлючИЗначение Из ИзмененныеСвойства Цикл
			Изменения.Добавить(КлючИЗначение.Ключ);
		КонецЦикла;
	ИначеЕсли ТипЗнч(ИзмененныеСвойства) = Тип("Массив") Тогда
		Для Каждого ИмяРеквизита Из ИзмененныеСвойства Цикл
			Изменения.Добавить(ИмяРеквизита);
		КонецЦикла;
	ИначеЕсли ИзмененныеСвойства = Неопределено Тогда
		Изменения.Добавить("ПерезаписатьОбъект");
	Иначе
		ВызватьИсключение НСтр("ru = 'Внутренняя ошибка'");
	КонецЕсли;
	
	ЭлементыДляИзменения.Вставить(СтрокаДанных, Изменения);

КонецПроцедуры

// Обрабатывает входящее дерево упаковок - строки, не соответствующие условию отбора по виду продукции - удаляются
//  из дерева и соотвествия штрихкодов и строк дерева.
//
// Параметры:
//  ДеревоУпаковок - ДеревоЗначений, СтрокаДереваЗначений - строки для проверки на соотвествие виду продукции.
//  СоответствиеСтрокДереваУпаковок - Соответствие из КлючИЗначение - соотвествие штриходов упаковок и строк дерева.
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции для отбора строк дерева.
//  ПараметрыПроверки - Неопределено, Структура  - служебный параметр, при первом вызове передавть неопределено.
Процедура ОтобратьСтрокиДереваПоВидуПродукции(ДеревоУпаковок, СоответствиеСтрокДереваУпаковок,
		ВидПродукции, ПараметрыПроверки = Неопределено)
	
	ПерваяИтерация = Ложь;
	УдаляемыеСтрокиДерева = Новый Соответствие;
	
	Если ПараметрыПроверки = Неопределено Тогда
		ПерваяИтерация = Истина;
		ПараметрыПроверки = Новый Структура;
		ПараметрыПроверки.Вставить("УдалитьТекущуюУпаковку", Ложь);
	КонецЕсли;
	
	Для Каждого СтрокаДерева из ДеревоУпаковок.Строки Цикл
		Если ПерваяИтерация Тогда
			ПараметрыПроверки.УдалитьТекущуюУпаковку = Ложь;
		КонецЕсли;
		
		Если СтрокаДерева.Строки.Количество()>0 Тогда
			ОтобратьСтрокиДереваПоВидуПродукции(СтрокаДерева, СоответствиеСтрокДереваУпаковок,
			                                     ВидПродукции, ПараметрыПроверки);
		КонецЕсли;
		
		Если ПараметрыПроверки.УдалитьТекущуюУпаковку Тогда
			Если ПерваяИтерация Тогда
				ОчиститьСоответствиеСтрокДерева(СтрокаДерева, СоответствиеСтрокДереваУпаковок);
				УдаляемыеСтрокиДерева.Вставить(СтрокаДерева, Истина);
			Иначе
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
			Или (СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка
				И ЗначениеЗаполнено(СтрокаДерева.Номенклатура)
				И СтрокаДерева.ВидПродукции <> ВидПродукции)
			Или (СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка
				И СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор
				И СтрокаДерева.Строки.Количество() = 0) Тогда
			Если (ЗначениеЗаполнено(СтрокаДерева.Номенклатура) Или Не ИнтеграцияИСКлиентСервер.ВидПродукцииПодлежитМаркировкеОстатков(ВидПродукции))
				И СтрокаДерева.ВидПродукции <> ВидПродукции Тогда
				ПараметрыПроверки.УдалитьТекущуюУпаковку = Истина;
				Если ПерваяИтерация Тогда
					ОчиститьСоответствиеСтрокДерева(СтрокаДерева, СоответствиеСтрокДереваУпаковок);
					УдаляемыеСтрокиДерева.Вставить(СтрокаДерева, Истина);
				Иначе
					Возврат;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет
			И СтрокаДерева.ВидПродукции <> ВидПродукции Тогда
			ОчиститьСоответствиеСтрокДерева(СтрокаДерева, СоответствиеСтрокДереваУпаковок);
			УдаляемыеСтрокиДерева.Вставить(СтрокаДерева, Истина);
		ИначеЕсли Не ПараметрыПроверки.УдалитьТекущуюУпаковку Тогда
			СтрокаДерева.ВидПродукции = ВидПродукции; // заполнить вид для мультитоварной упаковки
		КонецЕсли;
	
	КонецЦикла;
	
	Если ПерваяИтерация Тогда
		
		Для Каждого КлючИЗначение Из УдаляемыеСтрокиДерева Цикл
			ДеревоУпаковок.Строки.Удалить(КлючИЗначение.Ключ);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует вложенные штрихкоды по данным временной таблицы.
//
// Параметры:
//  ВыборкаПерваяИтерация - ВыборкаИзРезультатаЗапроса - РезультатЗапроса.
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц.
//  ПараметрыСканирования - см. ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования
// Возвращаемое значение:
//  (См. ШтрихкодированиеИС.ИнициализацияВложенныхШтрихкодов).
Функция ВложенныеШтрихкодыУпаковокПоДаннымМенеджераВТ(ВыборкаПерваяИтерация, МенеджерВременныхТаблиц, ПараметрыСканирования) 
	
	ВложенныеШтрихкоды = ИнициализацияВложенныхШтрихкодов();
	
	СоответствиеСтрокДереваУпаковок = Новый Соответствие;
	
	ТаблицаШтрихкодов = Новый ТаблицаЗначений;
	ТаблицаШтрихкодов.Колонки.Добавить("ШтрихкодУпаковки",             Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ТаблицаШтрихкодов.Колонки.Добавить("ШтрихкодРодительскойУпаковки", Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ТаблицаШтрихкодов.Колонки.Добавить("ИдентификаторСтроки",          Метаданные.ОпределяемыеТипы.УникальныйИдентификаторИС.Тип);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("УпаковкиВерхнегоУровня", Новый Соответствие);
	
	ПродолжатьПоиск    = Истина;
	НомерИтерации      = 1;
	УровнейВложенности = 3;
	
	ОбщиеМодули                    = ШтрихкодированиеОбщегоНазначенияИС.ОбщиеМодулиПодсистем();
	ПустоеЗначениеНоменклатура     = ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура");
	
	ПользовательскиеПараметрыРазбораКодаМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПользовательскиеПараметрыРазбораКодаМаркировки();
	ПользовательскиеПараметрыРазбораКодаМаркировки.ПроверятьАлфавитЭлементов = Ложь;
	
	НастройкиРазбора = Новый Структура;
	НастройкиРазбора.Вставить("Кеш",              РазборКодаМаркировкиИССлужебныйКлиентСервер.ИнициализироватьНастройкиИспользующиеРезультатыПредыдущихРазборов());
	НастройкиРазбора.Вставить("Общие",            РазборКодаМаркировкиИССлужебныйПовтИсп.НастройкиРазбораКодаМаркировки());
	НастройкиРазбора.Вставить("Пользовательские", ПользовательскиеПараметрыРазбораКодаМаркировки);
	
	Пока ПродолжатьПоиск Цикл
		
		Если НомерИтерации = 1 Тогда
			
			Выборка = ВыборкаПерваяИтерация;
			
		Иначе
			
			ИмяВременнойТаблицы = "ВТВложенныеШтрихкодыИсходныеДанные";
			
			ТекстыЗапроса = Новый СписокЗначений;
			ТекстыЗапроса.Добавить(
				СтрШаблон(
					"ВЫБРАТЬ
					|	ИсходныеДанные.ИдентификаторСтроки          КАК ИдентификаторСтроки,
					|	ИсходныеДанные.ШтрихкодУпаковки             КАК ШтрихкодУпаковки,
					|	ИсходныеДанные.ШтрихкодРодительскойУпаковки КАК ШтрихкодРодительскойУпаковки
					|ПОМЕСТИТЬ %1
					|ИЗ
					|	&ИсходныеДанные КАК ИсходныеДанные", ИмяВременнойТаблицы));
			
			ПараметрыФормированияТекстаЗапроса = ПараметрыФормированияТекстаЗапросаВложенныхШтрихкодов();
			ПараметрыФормированияТекстаЗапроса.ДокументСсылка                  = Неопределено;
			ПараметрыФормированияТекстаЗапроса.ИспользоватьИдентификаторСтроки = Ложь;
			ПараметрыФормированияТекстаЗапроса.ИмяВременнойТаблицы             = ИмяВременнойТаблицы;
			ТекстЗапроса = ТекстЗапросаВложенныхШтрихкодов(ПараметрыФормированияТекстаЗапроса.ИмяВременнойТаблицы);
			ТекстыЗапроса.Добавить(ТекстЗапроса, "ВложенныеШтрихкоды");
			
			Если НомерИтерации > 1 Тогда
				ТекстыЗапроса.Добавить(СтрШаблон("УНИЧТОЖИТЬ %1", ИмяВременнойТаблицы));
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			Запрос.УстановитьПараметр("ИсходныеДанные",           ТаблицаШтрихкодов);
			Запрос.УстановитьПараметр("НоменклатураПустаяСсылка", ПустоеЗначениеНоменклатура);
			РезультатыЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, ТекстыЗапроса);
			Выборка = РезультатыЗапроса.ВложенныеШтрихкоды.Выбрать();
			
		КонецЕсли;
		
		ТаблицаШтрихкодов.Очистить();
		
		Пока Выборка.Следующий() Цикл
			
			РодительскиеДанные = ВложенныеШтрихкоды.ДеревоУпаковок;
			Для ТекущийУровень = 0 По УровнейВложенности Цикл
				
				ТекущаяУпаковка = Выборка["УпаковкаУровень" + ТекущийУровень];
				
				Если ЗначениеЗаполнено(ТекущаяУпаковка) Тогда
					
					Значение = СоответствиеСтрокДереваУпаковок[ТекущаяУпаковка];
					Если Значение = Неопределено Тогда
						РодительскиеДанные = РодительскиеДанные.Строки.Добавить();
						ЗаполнитьСтрокуДереваУпаковокПоВыборке(
							РодительскиеДанные, Выборка, ТекущийУровень, ОбщиеМодули,
							НастройкиРазбора, ПараметрыСканирования);
						
						СоответствиеСтрокДереваУпаковок.Вставить(ТекущаяУпаковка, РодительскиеДанные);
					Иначе
						РодительскиеДанные = Значение;
					КонецЕсли;
					
				Иначе
					Прервать;
				КонецЕсли;
				
				Если ТекущийУровень = УровнейВложенности Тогда 
					
					НоваяСтрока = ТаблицаШтрихкодов.Добавить();
					НоваяСтрока.ШтрихкодУпаковки    = Выборка.УпаковкаУровень3;
					НоваяСтрока.ИдентификаторСтроки = Выборка.УпаковкаУровень3ИдентификаторСтроки;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		НомерИтерации   = НомерИтерации + 1;
		ПродолжатьПоиск = ТаблицаШтрихкодов.Количество() > 0;
		
	КонецЦикла;
	
	КэшУпаковокВерхнегоУровня = Новый Соответствие;
	Для Каждого КлючЗначение Из СоответствиеСтрокДереваУпаковок Цикл
		
		Если КлючЗначение.Значение.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			
			НоваяСтрока = ВложенныеШтрихкоды.МаркированныеТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, КлючЗначение.Значение);
			НоваяСтрока.СтрокаДерева = КлючЗначение.Значение;
			НоваяСтрока.УпаковкаВерхнегоУровня = СтрокаДереваВерхнегоУровня(КлючЗначение.Значение, КэшУпаковокВерхнегоУровня);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВложенныеШтрихкоды;
	
КонецФункции

// Возвращает строку верхнего уровня для строки дерева.
//
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - строка дерева упаковок.
//  КэшУпаковокВерхнегоУровня - Соответствие из КлючИЗначение:
//    * Ключ - СтрокаДереваЗначений
//    * Значение - СправочникСсылка.ШтрихкодыУпаковокТоваров
// Возвращаемое значение:
//  СтрокаДереваЗначений - строка верхнего уровня дерева.
Функция СтрокаДереваВерхнегоУровня(СтрокаДерева, КэшУпаковокВерхнегоУровня)
	
	УпаковкаВерхнегоУровня = КэшУпаковокВерхнегоУровня.Получить(СтрокаДерева);
	Если УпаковкаВерхнегоУровня <> Неопределено Тогда
		Возврат УпаковкаВерхнегоУровня;
	КонецЕсли;

	Если СтрокаДерева.Родитель <> Неопределено Тогда

		УпаковкаВерхнегоУровня = СтрокаДереваВерхнегоУровня(СтрокаДерева.Родитель, КэшУпаковокВерхнегоУровня);

		КэшУпаковокВерхнегоУровня.Вставить(СтрокаДерева, УпаковкаВерхнегоУровня);

		Возврат УпаковкаВерхнегоУровня;

	Иначе

		Возврат СтрокаДерева;

	КонецЕсли;

КонецФункции

// Копирует стоки дерева источника в строки дерева приемника.
//
// Параметры:
//  СтрокаДереваПриемник - КоллекцияСтрокДереваЗначений - Строки дерева приемника.
//  СтрокаДереваИсточник - КоллекцияСтрокДереваЗначений - Строки дерева источника.
//  СоответствиеСтарыхИНовыхСтрокДерева - Соответствие Из Строка - Ключ - строка источника, значение - новая строка приемника.
//  ОтборПоВидуПродукции - Неопределено, ПеречислениеСсылка.ВидыПродукцииИС - отбор по виду продукции
Процедура ДополнитьДеревоУпаковок(СтрокаДереваПриемник, СтрокаДереваИсточник, СоответствиеСтарыхИНовыхСтрокДерева = Неопределено, ОтборПоВидуПродукции = Неопределено)

	Для Каждого СтрокаИсточника Из СтрокаДереваИсточник.Строки Цикл

		Если ОтборПоВидуПродукции <> Неопределено
			И СтрокаИсточника.ВидПродукции <> ОтборПоВидуПродукции Тогда
			Продолжить;
		КонецЕсли;

		НоваяСтрока = СтрокаДереваПриемник.Строки.Добавить();

		ИсходноеЗначениеВходящий = НоваяСтрока.Входящий;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточника);
		НоваяСтрока.Входящий = ИсходноеЗначениеВходящий;

		Если СоответствиеСтарыхИНовыхСтрокДерева <> Неопределено Тогда
			СоответствиеСтарыхИНовыхСтрокДерева.Вставить(СтрокаИсточника, НоваяСтрока);
		КонецЕсли;

		ДополнитьДеревоУпаковок(
			НоваяСтрока, СтрокаИсточника, СоответствиеСтарыхИНовыхСтрокДерева, ОтборПоВидуПродукции);

	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьСтрокиДереваКУдалению(СтрокиДереваКУдалению, Соответствие)

	Для Каждого СтрокаДерева Из СтрокиДереваКУдалению Цикл

		ЗаполнитьСтрокиДереваКУдалению(СтрокаДерева.Строки, Соответствие);

		Соответствие.Вставить(СтрокаДерева, Истина);

	КонецЦикла;

КонецПроцедуры

// Определяет вид продукции упаковки по вложенной продукции.
//
// Параметры:
//  СтрокаДереваУпаковки - СтрокаДереваЗначений - строка дерева упаковок
//
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.ВидыПродукцииИС - массив вложенных видов продукции.
Функция ВидПродукцииУпаковкиПоСоставу(СтрокаДереваУпаковки)
	
	ВидыПродукции = Новый Массив;
	Для Каждого СтрокаДерева из СтрокаДереваУпаковки.Строки Цикл
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			ВидыПродукцииВложенные =  ВидПродукцииУпаковкиПоСоставу(СтрокаДерева);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВидыПродукции, ВидыПродукцииВложенные);
		КонецЕсли;
		Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			ВидыПродукции.Добавить(СтрокаДерева.ВидПродукции);
		КонецЕсли;
	КонецЦикла;
	Возврат ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВидыПродукции);
	
КонецФункции

// Удаляет строки дерева из соответствия "Штрихкод, СтрокаДерева"
//
// Параметры:
//  ДеревоУпаковок - ДеревоЗначений, СтрокаДереваЗначений - строки, которые будут удалены из соотвествия
//  СоответствиеСтрокДереваУпаковок - Соответствие из КлючИЗначение - соотвествие штриходов упаковок и строк дерева
Процедура ОчиститьСоответствиеСтрокДерева(ДеревоУпаковок, СоответствиеСтрокДереваУпаковок)

	СоответствиеСтрокДереваУпаковок.Удалить(ДеревоУпаковок.ШтрихкодУпаковки);
	Для Каждого СтрокаДерева из ДеревоУпаковок.Строки Цикл
		ОчиститьСоответствиеСтрокДерева(СтрокаДерева, СоответствиеСтрокДереваУпаковок);
	КонецЦикла;

КонецПроцедуры

// Формирует вложенные штрихкоды по данным табличной части Товары и табличной части элементами штрихкодов упаковок.
//
// Параметры:
//  Форма - Форма
//  ПараметрыСканирования - см. ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования
// Возвращаемое значение:
//  (См. ШтрихкодированиеИС.ИнициализацияВложенныхШтрихкодов).
Функция ШтрихкодыУпаковокПоДаннымТоваровИМаркируемойПродукции(Форма, ПараметрыСканирования)

	ИсточникДанных = Форма;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		ИсточникДанных = Форма.Объект;
	КонецЕсли;
	ТабличнаяЧастьШтрихкоды = ИсточникДанных[ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок];
	
	ТаблицаШтрихкодов = Новый ТаблицаЗначений;
	ТаблицаШтрихкодов.Колонки.Добавить("ШтрихкодУпаковки",             Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ТаблицаШтрихкодов.Колонки.Добавить("ШтрихкодРодительскойУпаковки", Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ТаблицаШтрихкодов.Колонки.Добавить("ИдентификаторСтроки",          Метаданные.ОпределяемыеТипы.УникальныйИдентификаторИС.Тип);

	МассивИменКолонокШтрихкодовУпаковки = Новый Массив;
	Для Каждого ИмяКолонки Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки, ",", Истина) Цикл
		МассивИменКолонокШтрихкодовУпаковки.Добавить(СокрЛП(ИмяКолонки));
	КонецЦикла;

	ЕстьКолонкаШтрихкодУпаковки    = Неопределено;
	ЕстьКолонкаИдентификаторСтроки = Неопределено;

	ИспользоватьИдентификаторСтроки = Ложь;
	Для Каждого СтрокаТЧ Из ТабличнаяЧастьШтрихкоды Цикл

		Если ЕстьКолонкаШтрихкодУпаковки = Неопределено Тогда
			ЕстьКолонкаШтрихкодУпаковки = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТЧ, "ШтрихкодУпаковки");
		КонецЕсли;
		Если ЕстьКолонкаИдентификаторСтроки = Неопределено Тогда
			ЕстьКолонкаИдентификаторСтроки = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТЧ, "ИдентификаторСтроки");
		КонецЕсли;

		Для Каждого ИмяКолонки Из МассивИменКолонокШтрихкодовУпаковки Цикл

			Если ЕстьКолонкаШтрихкодУпаковки Тогда
				ИмяКолонкиШтрихкодРодительскойУпаковки = "ШтрихкодУпаковки";
			Иначе
				ИмяКолонкиШтрихкодРодительскойУпаковки = ИмяКолонки;
			КонецЕсли;

			НоваяСтрока = ТаблицаШтрихкодов.Добавить();
			НоваяСтрока.ШтрихкодУпаковки             = СтрокаТЧ[ИмяКолонки];
			НоваяСтрока.ШтрихкодРодительскойУпаковки = СтрокаТЧ[ИмяКолонкиШтрихкодРодительскойУпаковки];
			Если ЕстьКолонкаИдентификаторСтроки Тогда
				ИспользоватьИдентификаторСтроки = Истина;
				ИдентификаторСтроки             = СтрокаТЧ.ИдентификаторСтроки;
				НоваяСтрока.ИдентификаторСтроки = ИдентификаторСтроки;
			КонецЕсли;

		КонецЦикла;

	КонецЦикла;
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	ИсходныеДанные.ИдентификаторСтроки          КАК ИдентификаторСтроки,
		|	ИсходныеДанные.ШтрихкодУпаковки             КАК ШтрихкодУпаковки,
		|	ИсходныеДанные.ШтрихкодРодительскойУпаковки КАК ШтрихкодРодительскойУпаковки
		|ПОМЕСТИТЬ ВТВложенныеШтрихкодыИсходныеДанные
		|ИЗ
		|	&ИсходныеДанные КАК ИсходныеДанные");
	
	ПараметрыФормированияТекстаЗапроса = ПараметрыФормированияТекстаЗапросаВложенныхШтрихкодов();
	ПараметрыФормированияТекстаЗапроса.ДокументСсылка                  = Неопределено;
	ПараметрыФормированияТекстаЗапроса.ИспользоватьИдентификаторСтроки = ИспользоватьИдентификаторСтроки;
	ТекстЗапроса = ТекстЗапросаВложенныхШтрихкодов(ПараметрыФормированияТекстаЗапроса.ИмяВременнойТаблицы);
	ТекстыЗапроса.Добавить(ТекстЗапроса, "ВложенныеШтрихкоды");

	МенеджерВременнойТаблицы = Новый МенеджерВременныхТаблиц;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременнойТаблицы;
	Запрос.УстановитьПараметр("ИсходныеДанные",           ТаблицаШтрихкодов);
	Запрос.УстановитьПараметр("НоменклатураПустаяСсылка", ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура"));
	РезультатыЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, ТекстыЗапроса);

	ШтрихкодыУпаковок = ВложенныеШтрихкодыУпаковокПоДаннымМенеджераВТ(
		РезультатыЗапроса.ВложенныеШтрихкоды.Выбрать(), МенеджерВременнойТаблицы, ПараметрыСканирования);

	Возврат ШтрихкодыУпаковок;

КонецФункции

// Возвращает структуру параметров, заполненных по умолчанию, которые необходимы для формирования текста запроса
// вложенных штрихкодов.
//
// Возвращаемое значение:
//  Структура - Описание:
//   * ИмяВременнойТаблицы - Строка - Имя временной таблица, где будут лежать исходные данные, необходимые для формирования
//                                    дерева упаковок и таблицы маркированных товаров(вложенные штрихкоды).
//   * ИспользоватьИдентификаторСтроки - Булево - если табличная часть товары и табличная часть с штрихкодами упаковок
//                                                связана через идентификатор строки.
//   * ДокументСсылка - Неопределено - Ссылка на документ.
Функция ПараметрыФормированияТекстаЗапросаВложенныхШтрихкодов()
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ДокументСсылка",                  Неопределено);
	ВозвращаемоеЗначение.Вставить("ИспользоватьИдентификаторСтроки", Ложь);
	ВозвращаемоеЗначение.Вставить("ИмяВременнойТаблицы",             "ВТВложенныеШтрихкодыИсходныеДанные");
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура ЗаполнитьДанныеПоШтрихкодамНаОснованииСохраненногоВыбора(ДанныеПоШтрихкодам, ПараметрыСканирования, ЭлементыДляИзменения) Экспорт
	
	Если ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСохраненногоВыбора = ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции;
	
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если СтрокаДанных.ОбработанСОшибками Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДанных.ТребуетсяСопоставление
			И Не СтрокаДанных.ЭтоШтрихкодНоменклатуры
			И СтрокаДанных.ПримечаниеКРазборуШтрихкода <> Неопределено
			И ЗначениеЗаполнено(СтрокаДанных.ПримечаниеКРазборуШтрихкода.ТекстОшибки) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ШтрихкодированиеИСКлиентСервер.ТребуетсяСброситьСохраненныйВыбор(ДанныеСохраненногоВыбора, СтрокаДанных) Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаДанных.ТребуетсяВыборСерии = Ложь;
		
		Если Не СтрокаДанных.ЭтоШтрихкодНоменклатуры Тогда
			
			ИзмененныеСвойства = ЗаполнитьСохраненнымВыборомДанныеШтрихкода(СтрокаДанных, ДанныеСохраненногоВыбора);
			
			// Если в результате уточнения была выбрана номенклатура, то выбор номенклатуры из списка более не требуется
			Если ИзмененныеСвойства["Номенклатура"] <> Неопределено Тогда
				СтрокаДанных.СписокНоменклатуры = Новый Массив;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаДанных.МаркируемаяПродукция = Истина
			И Не СтрокаДанных.ЭтоШтрихкодНоменклатуры
			И ЗначениеЗаполнено(СтрокаДанных.ВидУпаковки) Тогда
			ОтметитьКОбновлению(ЭлементыДляИзменения, СтрокаДанных, ИзмененныеСвойства);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПоДаннымУточнения(ДанныеПоШтрихкодам, ПараметрыСканирования, ЭлементыДляИзменения) Экспорт
	
	Если ПараметрыСканирования.ДополнительныеПараметры.Свойство("ДанныеУточнения") Тогда

		ДанныеУточнения = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыСканирования.ДополнительныеПараметры.ДанныеУточнения);

		Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл

			Если СтрокаДанных.ОбработанСОшибками Тогда
				Продолжить;
			КонецЕсли;

			Если СтрокаДанных.ТребуетсяСопоставление
				И СтрокаДанных.ПримечаниеКРазборуШтрихкода <> Неопределено
				И ЗначениеЗаполнено(СтрокаДанных.ПримечаниеКРазборуШтрихкода.ИдентификаторОшибки) Тогда
				Продолжить;
			КонецЕсли;

			Если Не ЗначениеЗаполнено(СтрокаДанных.ТипУпаковки) Тогда
				Если ДанныеУточнения.Свойство("Количество") Тогда
					//@skip-check wrong-type-expression
					ДанныеУточнения.Удалить("Количество");
				КонецЕсли;
			КонецЕсли;
			
			ИзмененныеСвойства = ЗаполнитьСохраненнымВыборомДанныеШтрихкода(СтрокаДанных, ДанныеУточнения);

			// Если в результате уточнения была выбрана номенклатура, то выбор номенклатуры из списка более не требуется
			Если ИзмененныеСвойства["Номенклатура"] <> Неопределено Тогда
				СтрокаДанных.СписокНоменклатуры = Новый Массив;
				СтрокаДанных.ТребуетсяСопоставление = Ложь;
			КонецЕсли;

			Если СтрокаДанных.ТребуетсяУказаниеПлановогоКоличестваПотребительскихУпаковокПоGTIN Тогда
				Продолжить;
			КонецЕсли;

			Если Не СтрокаДанных.ЭтоШтрихкодНоменклатуры Тогда
				ОтметитьКОбновлению(ЭлементыДляИзменения, СтрокаДанных, ИзмененныеСвойства);
			КонецЕсли;

		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Функция ЗаполнитьСохраненнымВыборомДанныеШтрихкода(ДанныеШтрихкода, СохраненныйВыбор)
	
	ИзмененныеСвойства = Новый Соответствие;
	ИзмененныеСвойстваСтруктура = Новый Структура;
	
	ТребуетсяЗаполнениеСтрокиДерева = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеШтрихкода, "СтрокаДерева")
		И ДанныеШтрихкода.СтрокаДерева <> Неопределено;
	
	Для Каждого КлючЗначение Из СохраненныйВыбор Цикл
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеШтрихкода, КлючЗначение.Ключ)
			И ЗначениеЗаполнено(КлючЗначение.Значение)
			И КлючЗначение.Значение <> ДанныеШтрихкода[КлючЗначение.Ключ]
			И (Не ЗначениеЗаполнено(ДанныеШтрихкода[КлючЗначение.Ключ])
				Или КлючЗначение.Ключ = "СкоропортящаясяПродукция") Тогда
			
			ДанныеШтрихкода[КлючЗначение.Ключ] = КлючЗначение.Значение;
			ИзмененныеСвойства.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
			ИзмененныеСвойстваСтруктура.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТребуетсяЗаполнениеСтрокиДерева Тогда
		ЗаполнитьЗначенияСвойств(ДанныеШтрихкода.СтрокаДерева, ИзмененныеСвойстваСтруктура);
	КонецЕсли;
	
	Возврат ИзмененныеСвойства;
	
КонецФункции

// Заполняет коллекцию "МаркируемаяПродукцияДокумента" данными строк дерева.
Процедура КоллекцияВсехШтрихкодовДерева(СтрокиДереваУпаковок, ОбработанныеКодыМаркировки, ПараметрыСканирования)

	Для Каждого СтрокаДерева Из СтрокиДереваУпаковок Цикл

		ОбработанныеКодыМаркировки.Вставить(СтрокаДерева.Штрихкод,
			ШтрихкодированиеОбщегоНазначенияИС.СтрокаТаблицыДанныеКодовМаркировкиВСтруктуру(СтрокаДерева, "Штрихкод,ТекстОшибки,ТипШтрихкода,ТипУпаковки"));

		КоллекцияВсехШтрихкодовДерева(СтрокаДерева.Строки, ОбработанныеКодыМаркировки, ПараметрыСканирования);

	КонецЦикла;

КонецПроцедуры

// Возвращает список элементов штрихкодов упаковок, находящихся на форме объекта.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма объекта.
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  Массив из СправочникСсылка.ШтрихкодыУпаковокТоваров - Список элементов штрихкодов формы объекта.
Функция УпаковкиОбъекта(Форма, ПараметрыСканирования)
	
	УпаковкиОбъекта = Новый Массив;
	
	Если ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок = Неопределено Тогда
		Возврат УпаковкиОбъекта;
	КонецЕсли;

	ТабличнаяЧастьШтрихкодыУпаковок = Форма.Объект[ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок];

	ИменаКолонокШтрихкодовУпаковок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки, ",", Истина);

	Для Каждого ИмяКолонки Из ИменаКолонокШтрихкодовУпаковок Цикл

		УпаковкиТабЧасти = ТабличнаяЧастьШтрихкодыУпаковок.Выгрузить(,ИмяКолонки);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(УпаковкиОбъекта, УпаковкиТабЧасти, Истина);

	КонецЦикла;

	Возврат УпаковкиОбъекта;

КонецФункции

// Возвращает все вложенные значения штрихкодов по массиву элементов справочника штрихкоды упаковок.
//
// Параметры:
//  КоллекцияУпаковок - Массив Из СправочникСсылка.ШтрихкодыУпаковокТоваров - набор упаковок.
// Возвращаемое значение:
//  Массив Из Строка - Значения штрихкодов.
Функция ЗначенияВложенныхШтрихкодовУпаковок(КоллекцияУпаковок)

	ВложенныеЗначенияШтрихкодов = Новый Массив;

	СоответствиеСтрокДереваУпаковок = Новый Соответствие;
	ДеревоУпаковок = ИнициализироватьДеревоУпаковок();

	Запрос = Новый Запрос(ТекстЗапросаСоставаУпаковокВИерархии());

	ПустоеЗначениеНоменклатуры = ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура");
	ПродолжатьПоиск            = Истина;
	УровнейВложенности         = 3;

	Пока ПродолжатьПоиск Цикл

		Запрос.УстановитьПараметр("МассивУпаковок",           КоллекцияУпаковок);
		Запрос.УстановитьПараметр("НоменклатураПустаяСсылка", ПустоеЗначениеНоменклатуры);
		//@skip-check query-in-loop
		Выборка = Запрос.Выполнить().Выбрать();
		КоллекцияУпаковок.Очистить();

		Пока Выборка.Следующий() Цикл

			РодительскиеДанные = ДеревоУпаковок;
			Для ТекущийУровень = 0 По УровнейВложенности Цикл

				ТекущаяУпаковка = Выборка["УпаковкаУровень" + ТекущийУровень];

				Если ЗначениеЗаполнено(ТекущаяУпаковка) Тогда

					Значение = СоответствиеСтрокДереваУпаковок[ТекущаяУпаковка];
					Если Значение = Неопределено Тогда

						ВложенныеЗначенияШтрихкодов.Добавить(
							Выборка[СтрШаблон("УпаковкаУровень%1Штрихкод", ТекущийУровень)]);
						СоответствиеСтрокДереваУпаковок.Вставить(ТекущаяУпаковка, РодительскиеДанные);

					Иначе
						РодительскиеДанные = Значение;
					КонецЕсли;

				Иначе
					Прервать;
				КонецЕсли;
				
				Если ТекущийУровень = УровнейВложенности Тогда
					КоллекцияУпаковок.Добавить(ТекущаяУпаковка);
				КонецЕсли;

			КонецЦикла;
			
		КонецЦикла;
		
		ПродолжатьПоиск = КоллекцияУпаковок.Количество() > 0;
		
	КонецЦикла;
	
	Возврат ВложенныеЗначенияШтрихкодов;

КонецФункции

// Для заполненной серии в известной упаковке может возникнуть необходимость не учитывать ее для документа
//
Процедура ЗаполнитьСтрокуДереваУпаковокПоПараметрамУказанияСерий(СтрокаДерева, ПараметрыСканирования)

	Если ПараметрыСканирования = Неопределено Тогда
		Возврат;
	ИначеЕсли ПараметрыСканирования.ПараметрыУказанияСерий = Неопределено Тогда
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(СтрокаДерева.Серия) Тогда
		Возврат;
	ИначеЕсли Не ОбщегоНазначенияИС.ТребуетсяВыборСерии(СтрокаДерева, ПараметрыСканирования) Тогда
		СтрокаДерева.Серия = ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("СерияНоменклатуры");
	КонецЕсли;
	
КонецПроцедуры

// Заполняет данные штрихкода по документу основанию.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования).
//  Форма - ФормаКлиентскогоПриложения, Неопределено - форма-источник вызова
Процедура ЗаполнитьПоДокументуИОснованию(ДанныеПоШтрихкодам, ПараметрыСканирования, Форма) Экспорт
	
	СформироватьДанныеДокументаОснования(ПараметрыСканирования);
	ДанныеДокументаОснования = Неопределено;
	Если ЭтоАдресВременногоХранилища(ПараметрыСканирования.АдресДанныхДокументаОснования) Тогда
		ДанныеДокументаОснования = ПолучитьИзВременногоХранилища(ПараметрыСканирования.АдресДанныхДокументаОснования);
	КонецЕсли;
	
	ДанныеДокумента = Неопределено;
	Если ЭтоАдресВременногоХранилища(ПараметрыСканирования.ДанныеТаблицыТовары) Тогда
		ДанныеДокумента = ПолучитьИзВременногоХранилища(ПараметрыСканирования.ДанныеТаблицыТовары);
	ИначеЕсли Форма <> Неопределено Тогда
		ДанныеДокументаИзФормы     = ПолучитьДанныеДокументаИзФормы(Форма, ПараметрыСканирования);
		ДанныеДокумента            = ДанныеДокументаИзФормы.ДанныеПоТоварам;
		ДанныеПоШтрихкодамУпаковок = ДанныеДокументаИзФормы.ДанныеПоШтрихкодамУпаковок;
	КонецЕсли;
	
	ОбновленныеКодыМаркировки = Новый Массив;
	ОбновленаСпецификаИСМП = Ложь;
	
	ОбновлятьСерии = ИнтеграцияИС.СерииИспользуются();
	
	МодульСпецификиИСМП = Неопределено;
	
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если СтрокаДанных.ОбработанСОшибками Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаОбновлена = Ложь;
		
		Если ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияИСМП(СтрокаДанных.ВидПродукции) Тогда
			МодульСпецификиИСМП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
			Если МодульСпецификиИСМП.ЗаполнитьПоДокументуИОснованию(СтрокаДанных, ПараметрыСканирования, ДанныеДокументаОснования, ДанныеДокумента) Тогда
				Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
					СтрокаДанных.СтрокаДерева.Серия = СтрокаДанных.Серия;
				КонецЕсли;
				СтрокаОбновлена        = Истина;
				ОбновленаСпецификаИСМП = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияИСМП(СтрокаДанных.ВидПродукции, Истина) Тогда
			МодульСпецификиИСМП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
			Если МодульСпецификиИСМП.ЗаполнитьПоСтрокуПоДаннымШтрихкодовДокумента(
				ДанныеПоШтрихкодам, СтрокаДанных, ПараметрыСканирования, ДанныеПоШтрихкодамУпаковок) Тогда
				СтрокаОбновлена        = Истина;
				ОбновленаСпецификаИСМП = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ОбновлятьСерии И Не СтрокаОбновлена Тогда
			Если ЗаполнитьСериюПоДаннымДокументаИОснования(СтрокаДанных, ДанныеДокументаОснования, ДанныеДокумента) Тогда
				Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
					СтрокаДанных.СтрокаДерева.Серия = СтрокаДанных.Серия;
				КонецЕсли;
				СтрокаОбновлена = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыСканирования.СоздаватьШтрихкодУпаковки
			И СтрокаОбновлена
			И ЗначениеЗаполнено(СтрокаДанных.ШтрихкодУпаковки)
			И ЗначениеЗаполнено(СтрокаДанных.Серия) Тогда
			
			НовыеРеквизиты = Новый Структура("Серия", СтрокаДанных.Серия);
			Справочники.ШтрихкодыУпаковокТоваров.ИзменитьШтрихкодУпаковки(
				СтрокаДанных.ШтрихкодУпаковки, НовыеРеквизиты);
		КонецЕсли;
		
		Если СтрокаОбновлена Тогда
			ОбновленныеКодыМаркировки.Добавить(СтрокаДанных);
		КонецЕсли;
		
	КонецЦикла;
	
	// Обновление данных дерева
	Если ОбновленаСпецификаИСМП Тогда
		МодульСпецификиИСМП.ОбновитьДеревоУпаковок(ДанныеПоШтрихкодам, ОбновленныеКодыМаркировки, ПараметрыСканирования);
	КонецЕсли;
	
КонецПроцедуры

Функция ОписанияGTINПоДаннымШтрихкодов(НаборGTIN) Экспорт
	Возврат РегистрыСведений.ОписаниеGTINИС.ПолучитьОписание(НаборGTIN);
КонецФункции

Функция ЗаполнитьСериюПоДаннымДокументаИОснования(СтрокаСКодомМаркировки, ДанныеДокументаОснования, ДанныеДокумента)
	
	Если Не ЗначениеЗаполнено(СтрокаСКодомМаркировки.Номенклатура) Тогда
		Возврат Ложь;
	ИначеЕсли ЗначениеЗаполнено(СтрокаСКодомМаркировки.Серия) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыПоиска = Новый Структура("Номенклатура, Характеристика",
		СтрокаСКодомМаркировки.Номенклатура, СтрокаСКодомМаркировки.Характеристика);
	
	НайденныеСтроки = Новый Массив;
	Если ДанныеДокументаОснования <> Неопределено Тогда
		НайденныеСтроки = ДанныеДокументаОснования.НайтиСтроки(ПараметрыПоиска);
	КонецЕсли;
	Если НайденныеСтроки.Количество() > 1 И ДанныеДокумента <> Неопределено Тогда
		НайденныеСтроки = ДанныеДокумента.НайтиСтроки(ПараметрыПоиска);
	КонецЕсли;
	
	// Заполнение серией для которой проверка не завершена
	Если ДанныеДокумента <> Неопределено И НайденныеСтроки.Количество() Тогда
		ПроверятьИзКолонкиСтатусПроверки = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НайденныеСтроки[0], "СтатусПроверкиГосИС");
		ПроверятьИзКолонкиКоличествоПодобрано = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НайденныеСтроки[0], "КоличествоПодобрано");
		Если Не(ПроверятьИзКолонкиСтатусПроверки Или ПроверятьИзКолонкиКоличествоПодобрано) Тогда
			Возврат Ложь;
		КонецЕсли;
		НайденоСерий = 0;
		Серия = Неопределено;
		Для Каждого ВариантВыбора Из НайденныеСтроки Цикл
			Если ПроверятьИзКолонкиСтатусПроверки И ВариантВыбора.СтатусПроверкиГосИС = 1 Тогда
				Продолжить;
			ИначеЕсли ПроверятьИзКолонкиКоличествоПодобрано И ВариантВыбора.Количество <= ВариантВыбора.КоличествоПодобрано Тогда
				Продолжить;
			КонецЕсли;
			Если НайденоСерий = 0 Тогда
				НайденоСерий = 1;
				Серия = ВариантВыбора.Серия;
			Иначе
				НайденоСерий = НайденоСерий + ?(Серия = ВариантВыбора.Серия, 0, 1);
			КонецЕсли;
		КонецЦикла;
		Если НайденоСерий = 1 Тогда
			СтрокаСКодомМаркировки.Серия = Серия;
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Получает данные документа из формы в которой происходит сканирование.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма данные таблицы "Товары" требуется получить.
//   ПараметрыСканирования - Структура, Неопределено - См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования.
//   ПоместитьВоВременноеХранилище - Булево
// Возвращаемое значение:
// 	Структура:
// 	 * ДанныеПоТоварам - Неопределено, ТаблицаЗначений, ДанныеФормыКоллекция - см. ИнициализицияТаблицыДанныхДокумента.
// 	 * ДанныеПоШтрихкодамУпаковок - Соответствие Из КлючИЗначение:
// 	                                 * Ключ     - СправочникСсылка.ШтрихкодыУпаковокТоваров - Сохраненный в документе штрихкод упаковки.
// 	                                 * Значение - см. ШтрихкодированиеИС.НовыйЭлементДополненияВложенныхШтрихкодовУпаковокЧастичноеВыбытие.
Функция ПолучитьДанныеДокументаИзФормы(Форма, ПараметрыСканирования, ПоместитьВоВременноеХранилище = Ложь)
	
	СтандартнаяОбработка = Истина;
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("ДанныеПоТоварам",            Неопределено);
	ВозвращаемоеЗначение.Вставить("ДанныеПоШтрихкодамУпаковок", Новый Соответствие());
	
	ШтрихкодированиеИСПереопределяемый.ПриФормированииДанныхТабличнойЧастиТовары(
		Форма, ВозвращаемоеЗначение.ДанныеПоТоварам, ?(ПоместитьВоВременноеХранилище, ПараметрыСканирования, Неопределено), СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если СтрНачинаетсяС(Форма.ИмяФормы, "Обработка") Тогда // формы проверки и подбора
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПодобраннаяМаркируемаяПродукция") Тогда
				ВозвращаемоеЗначение.ДанныеПоТоварам = Форма.ПодобраннаяМаркируемаяПродукция;
			КонецЕсли;
		Иначе
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект")
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, "Товары")
				И Форма.Объект.Товары.Количество() > 0
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект.Товары[0], "Номенклатура")
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект.Товары[0], "Характеристика")
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект.Товары[0], "Серия") Тогда
					ВозвращаемоеЗначение.ДанныеПоТоварам = Форма.Объект.Товары;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ШтрихкодированиеИСПереопределяемый.ПриФормированииДанныхПоШтрихкодамУпаковокДокумента(
		Форма, ВозвращаемоеЗначение.ДанныеПоШтрихкодамУпаковок, ПараметрыСканирования);

	//@skip-check constructor-function-return-section
	Возврат ВозвращаемоеЗначение;

КонецФункции

Процедура ДополнитьКолонкамиРасширеннойВерсииРазбора(ДанныеКодовМаркировки) Экспорт

	ДанныеКодовМаркировки.Колонки.Добавить("ШтрихкодУпаковки",            Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ДанныеКодовМаркировки.Колонки.Добавить("АдресДереваУпаковок",         Новый ОписаниеТипов("Строка"));
	ДанныеКодовМаркировки.Колонки.Добавить("НоменклатураСопоставленаПоУПД", Новый ОписаниеТипов("Булево"));
	ДанныеКодовМаркировки.Колонки.Добавить("ДанныеRFID",                  Неопределено); // Неопределено - данные с RFID-метки не считаны
	ДанныеКодовМаркировки.Колонки.Добавить("НайденВоВложенныхУпаковках",  Новый ОписаниеТипов("Булево"));
	
КонецПроцедуры

// Выполняет инициализацию и заполнение таблицы остатков, необходимых для контроля.
//
// Параметры:
//  ДанныеПоШтрихкодам - См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияДанныхПоШтрихкодам.
//  ПараметрыСканирования - См. ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования.
// Возвращаемое значение:
//  ТаблицаЗначений - См. ИнициализацияТаблицыПроверкиОстатков.
Функция ОпределитьОстаткиМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	ОстаткиМаркируемойПродукции = ИнициализацияТаблицыПроверкиОстатков();
	
	ОстаткиПоУмолчанию = Новый Структура("Продажа, Возврат", 1, -1);

	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды = Неопределено Тогда
		
		Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
			СтрокаОстатки = ОстаткиМаркируемойПродукции.Добавить();
			СтрокаОстатки.ШтрихкодУпаковки = СтрокаДанных.ШтрихкодУпаковки;
			СтрокаОстатки.Доступно = ОстаткиПоУмолчанию[ПараметрыСканирования.ОперацияКонтроляАкцизныхМарок];
		КонецЦикла;

	Иначе

		Для Каждого СтрокаТовары Из ДанныеПоШтрихкодам.ВложенныеШтрихкоды.МаркированныеТовары Цикл
			СтрокаОстатки = ОстаткиМаркируемойПродукции.Добавить();
			СтрокаОстатки.ШтрихкодУпаковки = СтрокаТовары.ШтрихкодУпаковки;
			СтрокаОстатки.Доступно = ОстаткиПоУмолчанию[ПараметрыСканирования.ОперацияКонтроляАкцизныхМарок];
		КонецЦикла;

	КонецЕсли;
	
	ШтрихкодированиеИСПереопределяемый.ПриОпределенииОстатковМаркируемойПродукции(
		ОстаткиМаркируемойПродукции, ПараметрыСканирования);

	ОстаткиМаркируемойПродукции.Индексы.Добавить("ШтрихкодУпаковки");

	Возврат ОстаткиМаркируемойПродукции;

КонецФункции

// Инициализирует таблицу значений для контроля остатков маркируемой продукции.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Описание:
// * ШтрихкодУпаковки - СправочникСсылка.ШтрихкодыУпаковокТоваров - Код маркировки.
// * Доступно - Число - Остаток маркируемой продукции.
Функция ИнициализацияТаблицыПроверкиОстатков()

	КвалификаторыЧисла  = Новый КвалификаторыЧисла(2, 0, ДопустимыйЗнак.Любой);

	ОстаткиМаркируемойПродукции = Новый ТаблицаЗначений;
	ОстаткиМаркируемойПродукции.Колонки.Добавить("ШтрихкодУпаковки", Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ОстаткиМаркируемойПродукции.Колонки.Добавить("Доступно",         Новый ОписаниеТипов("Число", КвалификаторыЧисла));

	Возврат ОстаткиМаркируемойПродукции;

КонецФункции

// Выполняет поиск по значениям штрихкодов в справочнике штрихкоды упаковок. Если элемент справочника найден - добавляет
// штрихкод в ДанныеПоШтрихкодам.ШтрихкодыИзвестныхУпаковок и удаляет из ДанныеПоШтрихкодам.ШтрихкодыНеизвестныхУпаковок.
//
// Параметры:
//  ШтрихкодыУпаковок - Массив из СтрокаТаблицыЗначений: См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияДанныхПоШтрихкодам
//
// Возвращаемое значение:
//  ТаблицаЗначений - (См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияДанныхПоШтрихкодам).
Функция НайтиУпаковкиПоШтрихкодам(ШтрихкодыУпаковок)
	
	ТипыУпаковокДляКоробок = ИнтеграцияИСКлиентСервер.ТипыУпаковокДляКоробок();
	
	Возврат ШтрихкодыУпаковок(ШтрихкодыУпаковок, ТипыУпаковокДляКоробок, Истина);
	
КонецФункции

// Дополняет структуру "Данные по штрихкодам" информацией по известным упаковкам.
//
// Параметры:
//  ПараметрыСканирования - См. ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования
//  ДанныеПоШтрихкодам - См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияДанныхПоШтрихкодам
//  ДанныеКодовМаркировкиКОбработке - Массив Из СтрокаТаблицыЗначений - Строки данных кодов маркировки для обработки
Процедура ЗаполнитьДанныеИзвестныхУпаковок(ПараметрыСканирования, ДанныеПоШтрихкодам, ДанныеКодовМаркировкиКОбработке = Неопределено) Экспорт
	
	ШтрихкодИСтрокаДанныхКодаМаркировки = Новый Соответствие;
	ШтрихкодыУпаковокДляОпределения     = Новый Массив;
	
	Если ДанныеКодовМаркировкиКОбработке = Неопределено Тогда
		ДанныеКодовМаркировкиКОбработке = ДанныеПоШтрихкодам.ДанныеКодовМаркировки;
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из ДанныеКодовМаркировкиКОбработке Цикл
		
		Если СтрокаДанных.ОбработанСОшибками Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбщегоНазначенияИСКлиентСервер.ЭтоУпаковкаПоВиду(СтрокаДанных.ВидУпаковки, Истина, Ложь)
			И ЗначениеЗаполнено(СтрокаДанных.Штрихкод)
			И Не СтрокаДанных.Идентифицирован Тогда
			ШтрихкодыУпаковокДляОпределения.Добавить(СтрокаДанных);
			ШтрихкодИСтрокаДанныхКодаМаркировки[СтрокаДанных.Штрихкод] = СтрокаДанных;
		КонецЕсли;

	КонецЦикла;
	
	Если ШтрихкодыУпаковокДляОпределения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ОбщиеМодули = ШтрихкодированиеОбщегоНазначенияИС.ОбщиеМодулиПодсистем();
	
	НайденныеУпаковки = НайтиУпаковкиПоШтрихкодам(ШтрихкодыУпаковокДляОпределения);
	Если НайденныеУпаковки.Количество() > 0 Тогда

		Для Каждого НайденнаяУпаковка Из НайденныеУпаковки Цикл

			СтрокаДанныхКодаМаркировки = ШтрихкодИСтрокаДанныхКодаМаркировки[НайденнаяУпаковка.Штрихкод];
			СтрокаДанныхКодаМаркировки.ШтрихкодУпаковки = НайденнаяУпаковка.Ссылка;
			СтрокаДанныхКодаМаркировки.Номенклатура     = НайденнаяУпаковка.Номенклатура;
			СтрокаДанныхКодаМаркировки.Характеристика   = НайденнаяУпаковка.Характеристика;
			СтрокаДанныхКодаМаркировки.Серия            = НайденнаяУпаковка.Серия;

			СтрокаДанныхКодаМаркировки.КоличествоПотребительскихУпаковок = ?(НайденнаяУпаковка.КоличествоПотребительскихУпаковок = 0,
				НайденнаяУпаковка.Количество, НайденнаяУпаковка.КоличествоПотребительскихУпаковок);
			СтрокаДанныхКодаМаркировки.Количество = НайденнаяУпаковка.Количество;

			СтрокаДанныхКодаМаркировки.ТипУпаковки     = НайденнаяУпаковка.ТипУпаковки;
			СтрокаДанныхКодаМаркировки.Идентифицирован = Истина;

			Если Не ЗначениеЗаполнено(СтрокаДанныхКодаМаркировки.ВидУпаковки)
				И СтрокаДанныхКодаМаркировки.ДанныеРазбора <> Неопределено
				И ЗначениеЗаполнено(СтрокаДанныхКодаМаркировки.ВидПродукции) Тогда

				ДоступныеВидыУпаковок = СтрокаДанныхКодаМаркировки.ДанныеРазбора.ВидыУпаковокПоВидамПродукции[СтрокаДанныхКодаМаркировки.ВидПродукции];
				Если СтрокаДанныхКодаМаркировки.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка
					И ДоступныеВидыУпаковок.Найти(Перечисления.ВидыУпаковокИС.Набор) <> Неопределено Тогда
					СтрокаДанныхКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор;
				ИначеЕсли СтрокаДанныхКодаМаркировки.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка
					И ДоступныеВидыУпаковок.Найти(Перечисления.ВидыУпаковокИС.Групповая) <> Неопределено
					И ДоступныеВидыУпаковок.Найти(Перечисления.ВидыУпаковокИС.Набор) = Неопределено Тогда
					СтрокаДанныхКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая;
				КонецЕсли;

				Если СтрокаДанныхКодаМаркировки.СтрокаДерева <> Неопределено Тогда
					СтрокаДанныхКодаМаркировки.СтрокаДерева.ВидУпаковки = СтрокаДанныхКодаМаркировки.ВидУпаковки;
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;
		
		// Для известных упаковок требуется вернуть ошибку при сканировании упаковки чужого вида продукции
		ОтборПоВидуПродукции = ПараметрыСканирования.ОтборПоВидуПродукции;
		ПараметрыСканирования.ОтборПоВидуПродукции = Ложь;
		ВложенныеШтрихкодыИзвестныхУпаковок = ВложенныеШтрихкодыИзвестныхУпаковок(
			НайденныеУпаковки.ВыгрузитьКолонку("Ссылка"), ПараметрыСканирования);
		ПараметрыСканирования.ОтборПоВидуПродукции = ОтборПоВидуПродукции;
		
		// Изменяем исходное значение штрихкода, на значение сохраненное в БД
		СтрокиДляИзмененияШтрихкода = НайденныеУпаковки.НайтиСтроки(Новый Структура("ШтрихкодСовпадает", Ложь));
		Если СтрокиДляИзмененияШтрихкода.Количество() > 0
			И ДанныеПоШтрихкодам.ЗаменыШтрихкодов = Неопределено Тогда
			ДанныеПоШтрихкодам.ЗаменыШтрихкодов = Новый Соответствие;
		КонецЕсли;
		Для Каждого СтрокаДляИзмененияШтрихкода Из СтрокиДляИзмененияШтрихкода Цикл

			СтрокаДанныхКодаМаркировки = ШтрихкодИСтрокаДанныхКодаМаркировки[СтрокаДляИзмененияШтрихкода.Штрихкод];

			// Данные о заменах нужны для поиска результатов обработки в механизмах загрузки данных из ТСД
			ДанныеПоШтрихкодам.ЗаменыШтрихкодов.Вставить(СтрокаДанныхКодаМаркировки.Штрихкод, СтрокаДляИзмененияШтрихкода.ЗначениеШтрихкода);

			СтрокаДанныхКодаМаркировки.Штрихкод = СтрокаДляИзмененияШтрихкода.ЗначениеШтрихкода;
			ШтрихкодированиеОбщегоНазначенияИС.ЗаполнитьСтрокуДанныхКодовМаркировкиПоДаннымРазбора(СтрокаДанныхКодаМаркировки, ОбщиеМодули);

		КонецЦикла;

		Если ШтрихкодированиеОбщегоНазначенияИС.ДопустимаТабачнаяПродукция(ПараметрыСканирования)
			Или ШтрихкодированиеОбщегоНазначенияИС.ДопустимаПродукцияИСМП(ПараметрыСканирования) Тогда

			МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
			МодульШтрихкодированиеМОТП.ПривестиВложенныеШтрихкодыКТребуемомуВидуДетализации(ВложенныеШтрихкодыИзвестныхУпаковок, ПараметрыСканирования, ДанныеПоШтрихкодам.ДанныеКодовМаркировки);

		КонецЕсли;
		
		Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды = Неопределено Тогда
			ДанныеПоШтрихкодам.ВложенныеШтрихкоды = ВложенныеШтрихкодыИзвестныхУпаковок;
		Иначе
			ДобавитьВДанныеШтрихкодовВложенныеШтрихкоды(
				ДанныеПоШтрихкодам, ВложенныеШтрихкодыИзвестныхУпаковок, ПараметрыСканирования);
		КонецЕсли;
		
		ИменаКолонокДляКопированияСвойств = Новый Массив;
		ИменаКолонокДляКопированияСвойств.Добавить("ШтрихкодУпаковки"); // Ссылка на справочник ШтрихкодыУпаковокТоваров
		ИменаКолонокДляКопированияСвойств.Добавить("Номенклатура");     // Данные из справочника
		ИменаКолонокДляКопированияСвойств.Добавить("Характеристика");   // Данные из справочника
		ИменаКолонокДляКопированияСвойств.Добавить("Серия");            // Данные из справочника

		ИменаКолонокДляКопированияСвойств.Добавить("ВидПродукции");         // Данные из справочника. Через номенклатуру
		ИменаКолонокДляКопированияСвойств.Добавить("МаркируемаяПродукция"); // Данные из справочника. Через номенклатуру
		ИменаКолонокДляКопированияСвойств.Добавить("ТипШтрихкода");         // Данные из справочника
		ИменаКолонокДляКопированияСвойств.Добавить("ТипУпаковки");          // Данные из справочника
		
		ИменаКолонокДляКопированияСвойств.Добавить("ТребуетВзвешивания");       // Данные из регистра Описание номенклатуры ИС.
		ИменаКолонокДляКопированияСвойств.Добавить("ПроизвольнаяЕдиницаУчета"); // Данные из регистра Описание номенклатуры ИС.
		
		ПараметрыДополненияТаблицыДанныеКодовМаркировки = ШтрихкодированиеОбщегоНазначенияИС.ПараметрыДополненияТаблицыДанныеКодовМаркировки(
			ДанныеПоШтрихкодам, ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок, ИменаКолонокДляКопированияСвойств);
		ПараметрыДополненияТаблицыДанныеКодовМаркировки.ЗаполнятьСтрокуДерева = Истина;
		
		ДобавленныеСтроки = Новый Массив;
		ДополнитьТаблицуДанныеКодовМаркировкиПоСтрокамДереваУпаковок(
			ДанныеПоШтрихкодам, ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок, ДобавленныеСтроки,
			ПараметрыСканирования, ПараметрыДополненияТаблицыДанныеКодовМаркировки);

		ОтключеноЗапрашиватьДанныеСервисаИСМП = Ложь;
		Если ОбщегоНазначенияИСМПКлиентСервер.ЗначениеПараметраСканированияЗапрашиватьДанныеСервисаИСМП(ПараметрыСканирования) Тогда
			ОбщегоНазначенияИСМПКлиентСервер.УстановитьПараметрСканированияЗапрашиватьДанныеСервисаИСМП(ПараметрыСканирования, Ложь);
			ОтключеноЗапрашиватьДанныеСервисаИСМП = Истина;
		КонецЕсли;
		
		ШтрихкодированиеОбщегоНазначенияИС.НормализоватьДанныеВложенныхШтрихкодов(ДанныеПоШтрихкодам, ПараметрыСканирования, ДанныеПоШтрихкодам.ДанныеКодовМаркировки);
		Если ОтключеноЗапрашиватьДанныеСервисаИСМП Тогда
			ОбщегоНазначенияИСМПКлиентСервер.УстановитьПараметрСканированияЗапрашиватьДанныеСервисаИСМП(ПараметрыСканирования);
		КонецЕсли;

		ЗаполнитьКоэффициентыВложенностиУпаковокПоШтрихкодамEAN(ДанныеПоШтрихкодам, ПараметрыСканирования, ДобавленныеСтроки);

		ВидыПродукцииДерева = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ВидыПродукции;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДанныеПоШтрихкодам.ВидыПродукции, ВидыПродукцииДерева, Истина);

	КонецЕсли;
	
КонецПроцедуры

// Формирует вложенные штрихкоды без учета специфики маркируемой продукции.
//
// Параметры:
//  МассивУпаковок - Массив Из СправочникСсылка.ШтрихкодыУпаковокТоваров - Список штрихкодов упаковок.
//  ПараметрыСканирования     - См. ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования
// Возвращаемое значение:
//  См. ИнициализацияВложенныхШтрихкодов
Функция ВложенныеШтрихкодыПоМассивуУпаковокБезСпецифики(МассивУпаковок, ПараметрыСканирования)
	
	СоответствиеСтрокДереваУпаковок = Новый Соответствие;
	ВложенныеШтрихкоды              = ИнициализацияВложенныхШтрихкодов();

	Запрос = Новый Запрос(ТекстЗапросаСоставаУпаковокВИерархии());

	КоллекцияУпаковок = ОбщегоНазначения.СкопироватьРекурсивно(МассивУпаковок, Ложь);

	ПродолжатьПоиск    = Истина;
	УровнейВложенности = 3;

	ДопустимыСтрокиДанныхБезВидаПродукции = ПараметрыСканирования <> Неопределено
		И ПараметрыСканирования.Свойство("ОпределениеВидаПродукцииИСМП")
		И ПараметрыСканирования.ОпределениеВидаПродукцииИСМП;

	Если ПараметрыСканирования <> Неопределено Тогда
		ДетализацияСоставаНабора = ПараметрыСканирования.СозданиеНаборов;
	Иначе
		ДетализацияСоставаНабора = Истина;
	КонецЕсли;
	
	ОбщиеМодули                    = ШтрихкодированиеОбщегоНазначенияИС.ОбщиеМодулиПодсистем();
	ТолькоУчитываемыеВидыПродукции = Не ДопустимыСтрокиДанныхБезВидаПродукции;
	
	ПустоеЗначениеНоменклатуры = ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура");

	ПользовательскиеПараметрыРазбораКодаМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПользовательскиеПараметрыРазбораКодаМаркировки();
	ПользовательскиеПараметрыРазбораКодаМаркировки.ПроверятьАлфавитЭлементов = Ложь;

	НастройкиРазбора = Новый Структура;
	НастройкиРазбора.Вставить("Кеш",              РазборКодаМаркировкиИССлужебныйКлиентСервер.ИнициализироватьНастройкиИспользующиеРезультатыПредыдущихРазборов());
	НастройкиРазбора.Вставить("Общие",            РазборКодаМаркировкиИССлужебный.НастройкиРазбораКодаМаркировки(, ТолькоУчитываемыеВидыПродукции));
	НастройкиРазбора.Вставить("Пользовательские", ПользовательскиеПараметрыРазбораКодаМаркировки);

	Пока ПродолжатьПоиск Цикл
		
		Запрос.УстановитьПараметр("МассивУпаковок",           КоллекцияУпаковок);
		Запрос.УстановитьПараметр("НоменклатураПустаяСсылка", ПустоеЗначениеНоменклатуры);
		//@skip-check query-in-loop
		Выборка = Запрос.Выполнить().Выбрать();
		КоллекцияУпаковок.Очистить();
		
		Пока Выборка.Следующий() Цикл

			РодительскиеДанные = ВложенныеШтрихкоды.ДеревоУпаковок;
			Для ТекущийУровень = 0 По УровнейВложенности Цикл

				ТекущаяУпаковка = Выборка["УпаковкаУровень" + ТекущийУровень];

				Если Не ЗначениеЗаполнено(ТекущаяУпаковка) Тогда
					Прервать;
				КонецЕсли;

				Значение = СоответствиеСтрокДереваУпаковок[ТекущаяУпаковка];
				Если Значение = Неопределено Тогда

					Если Не ДетализацияСоставаНабора
						И ТипЗнч(РодительскиеДанные) = Тип("СтрокаДереваЗначений")
						И РодительскиеДанные.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор
						И РодительскиеДанные.ТипУпаковки <> Перечисления.ТипыУпаковок.МонотоварнаяУпаковка Тогда
						Продолжить;
					КонецЕсли;

					РодительскиеДанные = РодительскиеДанные.Строки.Добавить();
					ЗаполнитьСтрокуДереваУпаковокПоВыборке(
						РодительскиеДанные, Выборка, ТекущийУровень, ОбщиеМодули,
						НастройкиРазбора, ПараметрыСканирования);
					ЗаполнитьСтрокуДереваУпаковокПоПараметрамУказанияСерий(
						РодительскиеДанные, ПараметрыСканирования);
					ЗаполнитьСтрокуДереваПоДаннымРазбораШтрихкода(
						РодительскиеДанные, ОбщиеМодули, НастройкиРазбора, ПараметрыСканирования);

					СоответствиеСтрокДереваУпаковок.Вставить(ТекущаяУпаковка, РодительскиеДанные);

					Если ЗначениеЗаполнено(РодительскиеДанные.ВидПродукции) Тогда
						ВложенныеШтрихкоды.ВидыПродукции.Добавить(РодительскиеДанные.ВидПродукции);
					КонецЕсли;

				Иначе

					РодительскиеДанные = Значение;

				КонецЕсли;

				Если ТекущийУровень = УровнейВложенности Тогда
					КоллекцияУпаковок.Добавить(ТекущаяУпаковка);
				КонецЕсли;

			КонецЦикла;

		КонецЦикла;

		ПродолжатьПоиск = КоллекцияУпаковок.Количество() > 0;
		
	КонецЦикла;

	Если ПараметрыСканирования <> Неопределено
		И ПараметрыСканирования.ОтборПоВидуПродукции
		И ПараметрыСканирования.ДопустимыеВидыПродукции.Количество() = 1 Тогда
		ОтобратьСтрокиДереваПоВидуПродукции(
			ВложенныеШтрихкоды.ДеревоУпаковок,
			СоответствиеСтрокДереваУпаковок,
			ПараметрыСканирования.ДопустимыеВидыПродукции[0]);
	КонецЕсли;
	
	// Если сканирование выполняется в форме проверки и подбора, то заполнение таблицы маркированных товаров не требуется
	ИспользуетсяСоответствиеШтрихкодовСтрокДерева = Ложь;
	Если ПараметрыСканирования <> Неопределено
		И ПараметрыСканирования.Свойство("ИспользуетсяСоответствиеШтрихкодовСтрокДерева") Тогда
		ИспользуетсяСоответствиеШтрихкодовСтрокДерева = ПараметрыСканирования.ИспользуетсяСоответствиеШтрихкодовСтрокДерева;
	КонецЕсли;

	Если Не ИспользуетсяСоответствиеШтрихкодовСтрокДерева Тогда
		Для Каждого КлючЗначение Из СоответствиеСтрокДереваУпаковок Цикл
			КэшУпаковокВерхнегоУровня = Новый Соответствие;

			СтрокаДерева = КлючЗначение.Значение;

			Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда

				НоваяСтрока = ВложенныеШтрихкоды.МаркированныеТовары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
				НоваяСтрока.СтрокаДерева           = СтрокаДерева;
				НоваяСтрока.УпаковкаВерхнегоУровня = СтрокаДереваВерхнегоУровня(СтрокаДерева, КэшУпаковокВерхнегоУровня);

			КонецЕсли;

		КонецЦикла;
	КонецЕсли;

	ВложенныеШтрихкоды.ВидыПродукции = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВложенныеШтрихкоды.ВидыПродукции);
	
	Возврат ВложенныеШтрихкоды;

КонецФункции

Процедура ЗаполнитьТаблицуШтрихкодовЧастичногоВыбытияИзДереваУпаковокРекурсивно(ТаблицаПриемник, ДеревоУпаковок, ТребуетсяЧастичноеВыбытие) Экспорт
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		Если СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
			ЗаполнитьТаблицуШтрихкодовЧастичногоВыбытияИзДереваУпаковокРекурсивно(ТаблицаПриемник, СтрокаДерева, ТребуетсяЧастичноеВыбытие);
			Продолжить;
		ИначеЕсли Не ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияИСМП(СтрокаДерева.ВидПродукции, Истина)
			И Не СтрокаДерева.ВидПродукции = Перечисления.ВидыПродукцииИС.Алкогольная Тогда
			Продолжить;
		ИначеЕсли СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет
			И СтрокаДерева.Строки.Количество() Тогда
			ЗаполнитьТаблицуШтрихкодовЧастичногоВыбытияИзДереваУпаковокРекурсивно(ТаблицаПриемник, СтрокаДерева, ТребуетсяЧастичноеВыбытие);
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
		
		Если ТребуетсяЧастичноеВыбытие
			И СтрокаДерева.ЧастичноеВыбытие
			И СтрокаДерева.ЧастичноеВыбытиеВариантУчета = Перечисления.ВариантыУчетаЧастичногоВыбытияИС.НастроеннаяНоменклатура Тогда
			
			НоваяСтрока.ЧастичноеВыбытиеНоменклатура   = НоваяСтрока.Номенклатура;
			НоваяСтрока.ЧастичноеВыбытиеХарактеристика = НоваяСтрока.Характеристика;
			
			НоваяСтрока.Номенклатура   = СтрокаДерева.ЧастичноеВыбытиеНоменклатура;
			НоваяСтрока.Характеристика = СтрокаДерева.ЧастичноеВыбытиеХарактеристика;
			
		КонецЕсли;
		
		Если ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияИСМП(СтрокаДерева.ВидПродукции, Истина)
			И (СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
			Или СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор) Тогда
			
			НоваяСтрока.Приоритет         = 5;
			НоваяСтрока.ГрупповаяУпаковка = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ИспользуетсяЧастиноеВыбытиеПриПродаже(ПараметрыСканирования)
	
	Если ОбщегоНазначенияИС.ПодсистемаСуществует("ИСМП") Тогда
		МодульОбщегоНазначенияИСМПКлиентСерверПовтИсп = ОбщегоНазначения.ОбщийМодуль("ОбщегоНазначенияИСМПКлиентСерверПовтИсп");
		ВидыПродукцииИСМП = МодульОбщегоНазначенияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции();
		Для Каждого ВидПродукции Из ВидыПродукцииИСМП Цикл
			ОперацияИС = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ОперацияИС(ПараметрыСканирования, ВидПродукции);
			Если ОбщегоНазначенияИСКлиентСерверПовтИсп.ПоддерживаетсяЧастичноеВыбытие(
				ВидПродукции,
				ОперацияИС) Тогда
				Возврат ШтрихкодированиеОбщегоНазначенияИС.ТребуетсяЧастичноеВыбытие(ПараметрыСканирования);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ВидПродукцииАлкогольная = Перечисления.ВидыПродукцииИС.Алкогольная;
	ОперацияИС = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ОперацияИС(ПараметрыСканирования, ВидПродукцииАлкогольная);
	Если ОбщегоНазначенияИС.ПодсистемаСуществует("ЕГАИС") Тогда
		МодульОбщегоНазначенияЕГАИС = ОбщегоНазначения.ОбщийМодуль("ОбщегоНазначенияЕГАИС");
		Если МодульОбщегоНазначенияЕГАИС.ИспользуетсяМаркируемаяПродукция()
			И ОбщегоНазначенияИСКлиентСерверПовтИсп.ПоддерживаетсяЧастичноеВыбытие(
				ВидПродукцииАлкогольная,
				ОперацияИС) Тогда
			Возврат ШтрихкодированиеОбщегоНазначенияИС.ТребуетсяЧастичноеВыбытие(ПараметрыСканирования);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#КонецОбласти
