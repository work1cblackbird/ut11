///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.ПереводыСБПc2b".
// ОбщийМодуль.ПереводыСБПc2bСлужебный.
//
// Серверные процедуры обмена данными выполнения оплат:
//  - управление регламентными заданиями;
//  - подключение команд к форме;
//  - обработка шаблонов сообщений и sms;
//  - подготовка платежных ссылок к отправке.
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область ИнтеграцияСБиблиотекойСтандартныхПодсистем

#Область БСПБазоваяФункциональность

// См. описание процедуры в общем модуле
// ОбщегоНазначенияПереопределяемый.ПриДобавленииПереименованийОбъектовМетаданных.
//
Процедура ПриДобавленииПереименованийОбъектовМетаданных(Итог) Экспорт
	
	ОбщегоНазначения.ДобавитьПереименование(
		Итог,
		"2.7.1.1",
		"Роль.ОплатаВПлатежнойСистеме",
		"Роль.ПереводыСБПc2b",
		"ИнтернетПоддержкаПользователей");
	
КонецПроцедуры

#КонецОбласти

#Область БСПОбновлениеИнформационнойБазы

// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления.
// 
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
// 
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия             = "2.7.5.10";
	Обработчик.Идентификатор      = Новый УникальныйИдентификатор("9bfd37a5-e47e-46de-94b5-904f90279423");
	Обработчик.Процедура          = "ПереводыСБПc2bСлужебный.ЗаполнитьИдентификаторУчастника";
	Обработчик.РежимВыполнения    = "Отложенно";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.БлокируемыеОбъекты = "РегистрСведений.ИдентификаторыОперацийСБПc2b";
	Обработчик.ПроцедураПроверки  = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий        = НСтр("ru = 'Заполнение идентифкатора участника СБП по данным документов операции.'");
	
КонецПроцедуры

#КонецОбласти

#Область БТСОчередьЗаданий

// См. описание этой же процедуры в общем модуле
// ОчередьЗаданийПереопределяемый.
//
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить(
		Метаданные.РегламентныеЗадания.ЗагрузкаСтатусовОперацийСБПc2b.ИмяМетода);
	
КонецПроцедуры

#КонецОбласти

#Область БСППечать

// См. УправлениеПечатьюПереопределяемый.ПриОпределенииНастроекПечати
//
Процедура ПриОпределенииНастроекПечати(НастройкиПечати) Экспорт
	
	НастройкиПечати.ОбъектыПечати.Добавить(Справочники.НастройкиПодключенияКСистемеБыстрыхПлатежей);
	
КонецПроцедуры

#КонецОбласти

 #Область БСППодключаемыеКоманды

// См. ПодключаемыеКомандыПереопределяемый.ПриОпределенииВидовПодключаемыхКоманд.
//
Процедура ПриОпределенииВидовПодключаемыхКоманд(ВидыПодключаемыхКоманд) Экспорт
	
	Вид = ВидыПодключаемыхКоманд.Добавить();
	Вид.Имя = "СБП";
	Вид.ИмяПодменю = "ПодменюСБП";
	Вид.Заголовок = НСтр("ru = 'СБП'");
	Вид.Картинка = БиблиотекаКартинок.ЛоготипСБПКнопка;
	Вид.Отображение = ОтображениеКнопки.Картинка;
	Вид.ВидГруппыФормы = ВидГруппыФормы.Подменю;
	
КонецПроцедуры

// См. ПодключаемыеКомандыПереопределяемый.ПриОпределенииСоставаНастроекПодключаемыхОбъектов.
//
Процедура ПриОпределенииСоставаНастроекПодключаемыхОбъектов(НастройкиПрограммногоИнтерфейса) Экспорт
	
	Настройка = НастройкиПрограммногоИнтерфейса.Добавить();
	Настройка.Ключ = "ДобавитьКомандыСБП";
	Настройка.ОписаниеТипов = Новый ОписаниеТипов("Булево");
	Настройка.ВидыПодключаемыхОбъектов = "Отчет, Обработка";
	
КонецПроцедуры

// См. ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту.
//
Процедура ПриОпределенииКомандПодключенныхКОбъекту(
		НастройкиФормы,
		Источники,
		ПодключенныеОтчетыИОбработки,
		Команды) Экспорт
	
	Если Не ПереводыСБПc2b.ПереводыСБПДоступны() Тогда
		Возврат;
	КонецЕсли;
	
	ИменаДокументовОперации = ПолучитьИменаДокументовОперации();
	
	ТипыОбъектов = Новый Массив;
	Для Каждого ПолноеИмя Из ИменаДокументовОперации Цикл
		Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
		ТипыОбъектов.Добавить(ТипЗнч(Менеджер.ПустаяСсылка()));
	КонецЦикла;
	Если Не ЗначениеЗаполнено(ТипыОбъектов) Тогда
		Возврат;
	КонецЕсли;
	ТипПараметра = Новый ОписаниеТипов(ТипыОбъектов);
	
	Команда = Команды.Добавить();
	Команда.Вид = "СБП";
	Команда.Идентификатор = "СБП";
	Команда.Представление = НСтр("ru = 'Оплата через СБП'");
	Команда.Важность = "Обычное";
	Команда.Порядок = 49;
	Команда.ОтображениеКнопки = ОтображениеКнопки.Картинка;
	Команда.Картинка = БиблиотекаКартинок.ЛоготипСБПКнопка;
	Команда.ТипПараметра = ТипПараметра;
	Команда.Назначение = "ДляОбъекта";
	Команда.ИзменяетВыбранныеОбъекты = Ложь;
	Команда.МножественныйВыбор = Ложь;
	Команда.РежимЗаписи = "Записывать";
	Команда.Обработчик = "ПереводыСБПc2bКлиент.ПодключаемыйОткрытьФормуПлатежнойСсылкиСБП";
	
КонецПроцедуры

#КонецОбласти

#Область БТСРаботаВМоделиСервиса

// См. ПоставляемыеДанныеПереопределяемый.ПолучитьОбработчикиПоставляемыхДанных.
//
Процедура ПриОпределенииОбработчиковПоставляемыхДанных(Обработчики) Экспорт
	
	СтрОбработчик = Обработчики.Добавить();
	СтрОбработчик.ВидДанных      = ВидПоставляемыхДанныхМакетыСБП();
	СтрОбработчик.КодОбработчика = ВидПоставляемыхДанныхМакетыСБП();
	СтрОбработчик.Обработчик     = ОбщегоНазначения.ОбщийМодуль("ПереводыСБПc2bСлужебный");
	
КонецПроцедуры

// Вызывается при получении уведомления о новых данных.
// В теле следует проверить, необходимы ли эти данные приложению,
//  и если ДА - установить флажок Загружать.
// 
// Параметры:
//   Дескриптор   - ОбъектXDTO Descriptor.
//   Загружать    - булево, возвращаемое.
//
Процедура ДоступныНовыеДанные(Знач Дескриптор, Загружать) Экспорт
	
	Если Дескриптор.DataType = ВидПоставляемыхДанныхМакетыСБП() Тогда
		Загружать = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается после вызова ДоступныНовыеДанные, позволяет разобрать данные.
//
// Параметры:
//   Дескриптор   - ОбъектXDTO Дескриптор.
//   ПутьКФайлу   - строка. Полное имя извлеченного файла. Файл будет автоматически удален 
//                  после завершения процедуры.
//
Процедура ОбработатьНовыеДанные(Знач Дескриптор, Знач ПутьКФайлу) Экспорт
	
	Если Дескриптор.DataType <> ВидПоставляемыхДанныхМакетыСБП() Тогда
		Возврат;
	КонецЕсли;
	
	КаталогМакетов = ФайловаяСистема.СоздатьВременныйКаталог() + "v8_SBPTemplates\";
	
	ЧтениеZIP = Новый ЧтениеZipФайла(ПутьКФайлу);
	ЧтениеZIP.ИзвлечьВсе(КаталогМакетов, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
	ЧтениеZIP.Закрыть();
	
	ФайлыМакетов = НайтиФайлы(КаталогМакетов, "*.mxl");
	
	Для Каждого ФайлМакета Из ФайлыМакетов Цикл
		
		ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.SHA256);
		ХешированиеДанных.ДобавитьФайл(ФайлМакета.ПолноеИмя);
		КонтрольнаяСуммаМакета = Нрег(СтрЗаменить(ХешированиеДанных.ХешСумма, " ", ""));
		
		Макет = Новый ТабличныйДокумент;
		Макет.Прочитать(ФайлМакета.ПолноеИмя);
		
		Запись = РегистрыСведений.КэшМакетовСБП.СоздатьМенеджерЗаписи();
		Запись.Идентификатор    = ФайлМакета.ИмяБезРасширения;
		Запись.КонтрольнаяСумма = КонтрольнаяСуммаМакета;
		Запись.Макет            = Новый ХранилищеЗначения(Макет);
		Запись.ДатаОбновления   = ТекущаяДатаСеанса();
		Запись.Записать();
		
	КонецЦикла;
	
	УдалитьФайлы(КаталогМакетов);
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Выполнена обработка поставляемых данных.
				|Поставляемые данные:
				|%1'"),
			ВидПоставляемыхДанныхМакетыСБП()),
		Ложь);
	
КонецПроцедуры

// Вызывается при отмене обработки данных в случае сбоя
//
Процедура ОбработкаДанныхОтменена(Знач Дескриптор) Экспорт
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Обработка поставляемых данных не выполнена.
				|Поставляемые данные:
				|%1'"),
			ВидПоставляемыхДанныхМакетыСБП()),
		Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область БСПШаблоныСообщений

// См. ШаблоныСообщенийПереопределяемый.ПриПодготовкеШаблонаСообщения.
//
Процедура ПриПодготовкеШаблонаСообщения(
		Реквизиты,
		Вложения,
		НазначениеШаблона,
		ДополнительныеПараметры) Экспорт
	
	Если ПустаяСтрока(НазначениеШаблона) Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ЭтоДокументОперацииСБП(НазначениеШаблона) Тогда
		Возврат;
	КонецЕсли; 
	
	ПараметрыОтправкиСообщений = НовыйПараметрыОтправкиСообщений();
	ПриОпределенииПараметровОтправкиСообщений(ПараметрыОтправкиСообщений);
	
	НовыйРеквизит = Реквизиты.Добавить();
	НовыйРеквизит.Имя = "ПредставлениеСсылкиСБП";
	НовыйРеквизит.Представление = НСтр("ru = 'Ссылка для оплаты через СБП'");
	
	НовыйРеквизит = Реквизиты.Добавить();
	НовыйРеквизит.Имя = "СуммаСсылкиСБП";
	НовыйРеквизит.Представление = НСтр("ru = 'Сумма платежной ссылки СБП'");
	
	Если ДополнительныеПараметры.ТипШаблона = "Письмо"
		И ОтправлятьПисьмаВФорматеHTML(ПараметрыОтправкиСообщений) Тогда
		
		НовыйРеквизит = Реквизиты.Добавить();
		НовыйРеквизит.Имя = "ПредставлениеСсылкиСБПQRКод";
		НовыйРеквизит.Представление = НСтр("ru = 'Ссылка для оплаты через СБП (QR-код)'");
		
	КонецЕсли;
	
КонецПроцедуры

// См. ШаблоныСообщенийПереопределяемый.ПриФормированииСообщения.
//
Процедура ПриФормированииСообщения(
		Сообщение,
		НазначениеШаблона,
		ПредметСообщения,
		ПараметрыШаблона) Экспорт
	
	Если ПустаяСтрока(НазначениеШаблона) Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ЭтоДокументОперацииСБП(НазначениеШаблона) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтправкиСообщений = НовыйПараметрыОтправкиСообщений();
	ПриОпределенииПараметровОтправкиСообщений(ПараметрыОтправкиСообщений);
	
	// АПК:1416-выкл Обработка различных сценариев отправки.
	// АПК:1415-выкл Обработка различных сценариев отправки.
	
	Если ПараметрыШаблона.ТипШаблона = "Письмо"
		И (Сообщение.ЗначенияРеквизитов.Получить("ПредставлениеСсылкиСБП") <> Неопределено
			Или Сообщение.ЗначенияРеквизитов.Получить("СуммаСсылкиСБП") <> Неопределено
			Или Сообщение.ЗначенияРеквизитов.Получить("ПредставлениеСсылкиСБПQRКод") <> Неопределено) Тогда
		
			Если Сообщение.ДополнительныеПараметры.Свойство("ПлатежнаяСсылка")
				И ЗначениеЗаполнено(Сообщение.ДополнительныеПараметры.ПлатежнаяСсылка)
				И Сообщение.ДополнительныеПараметры.Свойство("СуммаПлатежнойСсылки")
				И ЗначениеЗаполнено(Сообщение.ДополнительныеПараметры.СуммаПлатежнойСсылки) Тогда
				
				ПлатежнаяСсылка = Сообщение.ДополнительныеПараметры.ПлатежнаяСсылка;
				СуммаСсылкиСБП  = Сообщение.ДополнительныеПараметры.СуммаПлатежнойСсылки;
				
			ИначеЕсли Сообщение.ДополнительныеПараметры.Свойство("ПараметрыСообщения")
				И ЗначениеЗаполнено(Сообщение.ДополнительныеПараметры.ПараметрыСообщения)
				И Сообщение.ДополнительныеПараметры.ПараметрыСообщения.Свойство("ПлатежнаяСсылка")
				И ЗначениеЗаполнено(Сообщение.ДополнительныеПараметры.ПараметрыСообщения.ПлатежнаяСсылка)
				И Сообщение.ДополнительныеПараметры.ПараметрыСообщения.Свойство("СуммаПлатежнойСсылки")
				И ЗначениеЗаполнено(Сообщение.ДополнительныеПараметры.ПараметрыСообщения.СуммаПлатежнойСсылки) Тогда
				
				ПлатежнаяСсылка = Сообщение.ДополнительныеПараметры.ПараметрыСообщения.ПлатежнаяСсылка;
				СуммаСсылкиСБП  = Сообщение.ДополнительныеПараметры.ПараметрыСообщения.СуммаПлатежнойСсылки;
				
			Иначе
				
				ПараметрыПодключения = ПриОпределенииПараметровПодключенияДокументаОперации(
					ПредметСообщения);
				Если Не ЗначениеЗаполнено(ПараметрыПодключения)
					Или ПараметрыПодключения.НастройкиПодключения.Количество() = 0 Тогда
					ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось определить настройку подключения к Системе быстрых платежей.'"));
					Возврат;
				КонецЕсли;
				
				НастройкиПодключенияПрограммы = СистемаБыстрыхПлатежейСлужебный.НастройкиПодключенияПрограммы();
				ИспользоватьЧастичныеОплаты   = НастройкиПодключенияПрограммы.c2b.ИспользоватьЧастичныеОплаты;
				Если ИспользоватьЧастичныеОплаты Тогда
					ДанныеЧастичныхОплат = Документы.ПлатежнаяСсылкаСБПc2b.ПолучитьДанныеЧастичныхОплат(ПредметСообщения);
					Если ДанныеЧастичныхОплат.Количество() > 0 Тогда
						ДанныеЧастичнойОплаты = Новый Структура;
						ДанныеЧастичнойОплаты.Вставить(
							"ПлатежнаяСсылка",
							ДанныеЧастичныхОплат[ДанныеЧастичныхОплат.Количество()-1].Ссылка);
						ДанныеЧастичнойОплаты.Вставить(
							"НастройкаПодключения",
							ДанныеЧастичныхОплат[ДанныеЧастичныхОплат.Количество()-1].НастройкаПодключения);
					Иначе
						ДанныеЧастичнойОплаты = Неопределено;
					КонецЕсли;
				Иначе
					ДанныеЧастичнойОплаты = Неопределено;
				КонецЕсли;
				
				РезультатОперации = СлужебныйДинамическаяСсылка(
					?(ЗначениеЗаполнено(ДанныеЧастичнойОплаты), ДанныеЧастичнойОплаты.ПлатежнаяСсылка, ПредметСообщения),
					?(
						ЗначениеЗаполнено(ДанныеЧастичнойОплаты),
						ДанныеЧастичнойОплаты.НастройкаПодключения,
						ПараметрыПодключения.НастройкиПодключения[0]),
					Неопределено);
				ПлатежнаяСсылка = РезультатОперации.ПлатежнаяСсылка;
				СуммаСсылкиСБП  = РезультатОперации.СуммаОплаты;
				
			КонецЕсли;
			
			Если ПустаяСтрока(ПлатежнаяСсылка) Тогда
				Возврат;
			КонецЕсли;
			
			Если ПараметрыШаблона.ФорматПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML
				И ОтправлятьПисьмаВФорматеHTML(ПараметрыОтправкиСообщений) Тогда
				
				Если Сообщение.ЗначенияРеквизитов["ПредставлениеСсылкиСБПQRКод"] <> Неопределено Тогда
					Если Сообщение.Вложения["ПредставлениеСсылкиСБПQRКод"] = Неопределено Тогда
						Результат = СистемаБыстрыхПлатежей.ИзображениеQRКодаСБП(
							ПлатежнаяСсылка,
							200,
							0);
					КонецЕсли;
					
					Base64 = Base64Строка(Результат); 
					Base64 = СтрЗаменить(Base64, Символы.ПС, "");
					Base64 = СтрЗаменить(Base64, Символы.ВК, "");
					
					Сообщение.ЗначенияРеквизитов["ПредставлениеСсылкиСБПQRКод"] = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '<p><img alt="""" src=""data:image/png;base64,%1""></p>'"),
						Base64);
						
				КонецЕсли;
				Если Сообщение.ЗначенияРеквизитов["ПредставлениеСсылкиСБП"] <> Неопределено Тогда
					Сообщение.ЗначенияРеквизитов["ПредставлениеСсылкиСБП"] = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '<p>Оплатить счет: <a href=""%1"">%1</a></p>'"),
						ПлатежнаяСсылка);
				КонецЕсли;
			Иначе
				Сообщение.ЗначенияРеквизитов["ПредставлениеСсылкиСБП"] = НСтр("ru = 'Оплатить счет:'") + Символы.ПС + ПлатежнаяСсылка;
			КонецЕсли;
			
			Сообщение.ЗначенияРеквизитов["СуммаСсылкиСБП"] = СуммаСсылкиСБП;
			
	ИначеЕсли ПараметрыШаблона.ТипШаблона = "SMS"
		И (Сообщение.ЗначенияРеквизитов.Получить("ПредставлениеСсылкиСБП") <> Неопределено
		Или Сообщение.ЗначенияРеквизитов.Получить("СуммаСсылкиСБП") <> Неопределено) Тогда
		
		Если Сообщение.ДополнительныеПараметры.Свойство("ПараметрыСообщения")
			И ЗначениеЗаполнено(Сообщение.ДополнительныеПараметры.ПараметрыСообщения)
			И Сообщение.ДополнительныеПараметры.ПараметрыСообщения.Свойство("ПлатежнаяСсылка")
			И ЗначениеЗаполнено(Сообщение.ДополнительныеПараметры.ПараметрыСообщения.ПлатежнаяСсылка) Тогда
			
			ПлатежнаяСсылка = Сообщение.ДополнительныеПараметры.ПараметрыСообщения.ПлатежнаяСсылка;
			СуммаСсылкиСБП  = Сообщение.ДополнительныеПараметры.ПараметрыСообщения.СуммаПлатежнойСсылки;
			
		Иначе
			
			ПараметрыПодключения = ПриОпределенииПараметровПодключенияДокументаОперации(ПредметСообщения);
			Если Не ЗначениеЗаполнено(ПараметрыПодключения)
				Или ПараметрыПодключения.НастройкиПодключения.Количество() = 0 Тогда
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось определить настройку подключения к Системе быстрых платежей.'"));
				Возврат;
			КонецЕсли;
			
			НастройкиПодключенияПрограммы = СистемаБыстрыхПлатежейСлужебный.НастройкиПодключенияПрограммы();
			ИспользоватьЧастичныеОплаты   = НастройкиПодключенияПрограммы.c2b.ИспользоватьЧастичныеОплаты;
			
			Если ИспользоватьЧастичныеОплаты Тогда
				ДанныеЧастичныхОплат = Документы.ПлатежнаяСсылкаСБПc2b.ПолучитьДанныеЧастичныхОплат(ПредметСообщения);
				Если ДанныеЧастичныхОплат.Количество() > 0 Тогда
					ДанныеЧастичнойОплаты = Новый Структура;
					ДанныеЧастичнойОплаты.Вставить(
						"ПлатежнаяСсылка",
						ДанныеЧастичныхОплат[ДанныеЧастичныхОплат.Количество()-1].Ссылка);
					ДанныеЧастичнойОплаты.Вставить(
						"НастройкаПодключения",
						ДанныеЧастичныхОплат[ДанныеЧастичныхОплат.Количество()-1].НастройкаПодключения);
				Иначе
					ДанныеЧастичнойОплаты = Неопределено;
				КонецЕсли;
			Иначе
				ДанныеЧастичнойОплаты = Неопределено;
			КонецЕсли;
			
			РезультатОперации = СлужебныйДинамическаяСсылка(
				?(ЗначениеЗаполнено(ДанныеЧастичнойОплаты), ДанныеЧастичнойОплаты.ПлатежнаяСсылка, ПредметСообщения),
				?(
					ЗначениеЗаполнено(ДанныеЧастичнойОплаты),
					ДанныеЧастичнойОплаты.НастройкаПодключения,
					ПараметрыПодключения.НастройкиПодключения[0]),
				Неопределено);
				
			ПлатежнаяСсылка = РезультатОперации.ПлатежнаяСсылка;
			СуммаСсылкиСБП  = РезультатОперации.СуммаОплаты;
			
		КонецЕсли;
		
		Сообщение.ЗначенияРеквизитов["ПредставлениеСсылкиСБП"] = ПлатежнаяСсылка;
		Сообщение.ЗначенияРеквизитов["СуммаСсылкиСБП"]         = СуммаСсылкиСБП;
		
	КонецЕсли;
	
	// АПК:1416-вкл
	// АПК:1415-вкл
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ИнтеграцияПодсистемИнтернетПоддержкиПользователей

#Область БазоваяФункциональностьБИП

// Вызывается при изменении логина и пароля пользователя ИПП в
// информационной базе из всех контекстов использования библиотеки.
//
Процедура ПриИзмененииДанныхАутентификации(Логин) Экспорт
	
	Если ЗначениеЗаполнено(Логин) Тогда
		Если Справочники.НастройкиПодключенияКСистемеБыстрыхПлатежей.ЕстьНастройкиПодключения() Тогда
			ДобавитьЗаданиеЗагрузкаСтатусовОперацийСБПc2b();
		КонецЕсли;
	Иначе
		УдалитьЗаданияЗагрузкаСтатусовОперацийСБПc2b();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область БазоваяФункциональностьСБП

// Возвращает признак создания всех описанных шаблонов.
//
// Возвращаемое значение:
//  Булево - Истина, если все описанные шаблоны созданы.
//
Функция ВсеШаблоныСозданы() Экспорт 
	
	Результат = Новый Структура;
	Результат.Вставить("ВсеШаблоны", Истина);
	Результат.Вставить("Письмо", Истина);
	Результат.Вставить("SMS", Истина);
	
	МассивШаблонов = Новый Массив;
	СоответствиеШаблонов = СистемаБыстрыхПлатежейСлужебный.ШаблоныСообщенийДокументовОперации();
	
	ПредопределенныеШаблоныСообщений = Новый Массив;
	ПриОпределенииПредопределенныхШаблоновСообщенийСБППоТипам(
		ПредопределенныеШаблоныСообщений);
	
	Для Каждого Шаблон Из ПредопределенныеШаблоныСообщений Цикл 
		
		ДанныеШаблона = Новый Структура;
		ДанныеШаблона.Вставить("ПолноеИмяТипаНазначения", Шаблон.ПолноеИмяТипаНазначения);
		ДанныеШаблона.Вставить("ТипШаблона", Шаблон.ТипШаблона);
		
		СозданныйШаблон = НайтиПредопределенныйШаблонСообщений(ДанныеШаблона, СоответствиеШаблонов);
		Если СозданныйШаблон.Пустая() Тогда 
			Результат.ВсеШаблоны = Ложь;
			Результат[Шаблон.ТипШаблона] = Ложь;
		Иначе
			МассивШаблонов.Добавить(СозданныйШаблон);
		КонецЕсли;
		
	КонецЦикла;
	
	Результат.Вставить("МассивШаблонов", МассивШаблонов);
	
	Возврат Результат;
	
КонецФункции

// Создает предопределенные шаблоны сообщений после проверки существования соответствующих подсистем.
//
// Возвращаемое значение:
// См. СоздатьПредопределенныеШаблоныСообщений.
//
Функция СоздатьПредопределенныеШаблоныСообщенийПроверкаПодсистем() Экспорт
	
	ЕстьОтправкаSMS = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОтправкаSMS");
	ЕстьОтправкаПисем = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями");
	
	Возврат СоздатьПредопределенныеШаблоныСообщений(ЕстьОтправкаПисем, ЕстьОтправкаSMS);
	
КонецФункции

// Создает предопределенные шаблоны сообщений после проверки существования соответствующих подсистем.
//
// Параметры:
//  СоздатьШаблоныПисем - Булево - признак создания шаблонов сообщений для электронной почты.
//  СоздатьШаблоныСМС - Булево - признак создания шаблонов сообщений СМС.
//
// Возвращаемое значение:
//  Массив - Массив созданных предопределенных шаблонов,
//    элементами массива являются ссылки на справочник ШаблоныСообщений.
//
Функция СоздатьПредопределенныеШаблоныСообщений(
		СоздатьШаблоныПисем,
		СоздатьШаблоныСМС) Экспорт
	
	МассивСозданныхШаблонов = Новый Массив;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ШаблоныСообщений") Тогда
		Возврат МассивСозданныхШаблонов;
	КонецЕсли;
	
	МодульШаблоныСообщений = ОбщегоНазначения.ОбщийМодуль("ШаблоныСообщений");
	
	МассивПредопределенныхШаблоновСообщений = Новый Массив;
	ПриОпределенииПредопределенныхШаблоновСообщенийСБППоТипам(МассивПредопределенныхШаблоновСообщений);
	
	Если Не МассивПредопределенныхШаблоновСообщений.Количество() Тогда 
		Возврат МассивСозданныхШаблонов;
	КонецЕсли;
	
	СоответствиеШаблоновДокументамОперации = СистемаБыстрыхПлатежейСлужебный.ШаблоныСообщенийДокументовОперации();
	
	Для Каждого Шаблон Из МассивПредопределенныхШаблоновСообщений Цикл 
		
		Если Не Шаблон.Свойство("ТипШаблона") Тогда // АПК:1416 Поддержка обратной совместимости.
			Продолжить;
		ИначеЕсли Врег(Шаблон.ТипШаблона) <> Врег("SMS") И Врег(Шаблон.ТипШаблона) <> Врег("Письмо") Тогда
			Продолжить;
		ИначеЕсли Не СоздатьШаблоныПисем И Врег(Шаблон.ТипШаблона) = Врег("Письмо") Тогда
			Продолжить;
		ИначеЕсли Не СоздатьШаблоныСМС И Врег(Шаблон.ТипШаблона) = Врег("SMS") Тогда
			Продолжить;
		КонецЕсли;
		
		ШаблонСообщенийСсылка = НайтиПредопределенныйШаблонСообщений(Шаблон,
			СоответствиеШаблоновДокументамОперации);
		
		Если ШаблонСообщенийСсылка.Пустая() Тогда
			
			ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(Шаблон.ПолноеИмяТипаНазначения);
			Если ОбъектМетаданных = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			Если Не ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(ОбъектМетаданных) Тогда 
				Продолжить;
			КонецЕсли;
			
			ПараметрыШаблона = МодульШаблоныСообщений.ОписаниеПараметровШаблона();
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(
				ПараметрыШаблона,
				Шаблон,
				Истина);
			
			ШаблонСообщенийСсылка = МодульШаблоныСообщений.СоздатьШаблон(
				Шаблон.Наименование,
				ПараметрыШаблона);
			
			МассивСозданныхШаблонов.Добавить(ШаблонСообщенийСсылка);
			
		КонецЕсли;
		
		СоответствиеШаблоновДокументамОперации[Шаблон.ТипШаблона].Вставить(
			Шаблон.ПолноеИмяТипаНазначения,
			ШаблонСообщенийСсылка.УникальныйИдентификатор());
		
	КонецЦикла;
	
	УстановитьСоответствиеШаблоновДокументамОперации(
		СоответствиеШаблоновДокументамОперации);
	
	Возврат МассивСозданныхШаблонов;
	
КонецФункции

// Возвращает перечень предопределенных шаблонов сообщений подсистемы, структурированный по типам назначения.
//
// Возвращаемое значение:
//  Структура - перечень предопределенных шаблонов сообщений подсистемы, структурированный по типам назначения.
//   * Ключ - Строка - тип назначения шаблона, может принимать значения - Письмо, SMS.
//   * Значение - Массив из СправочникСсылка.ШаблоныСообщений - перечень предопределенных шаблонов подсистемы по типу.
//
Функция ШаблоныСообщенийПоТипам() Экспорт
	
	ШаблоныЭлектронныхПисем = Новый Массив;
	ШаблоныSMS              = Новый Массив;
	СоответствиеШаблонов    = СистемаБыстрыхПлатежейСлужебный.ШаблоныСообщенийДокументовОперации();
	
	ПредопределенныеШаблоныСообщений = Новый Массив;
	ПриОпределенииПредопределенныхШаблоновСообщенийСБППоТипам(
		ПредопределенныеШаблоныСообщений);
	
	Для Каждого Шаблон Из ПредопределенныеШаблоныСообщений Цикл
		
		ДанныеШаблона = Новый Структура;
		ДанныеШаблона.Вставить("ПолноеИмяТипаНазначения", Шаблон.ПолноеИмяТипаНазначения);
		ДанныеШаблона.Вставить("ТипШаблона", Шаблон.ТипШаблона);
		
		СозданныйШаблон = НайтиПредопределенныйШаблонСообщений(ДанныеШаблона, СоответствиеШаблонов);
		Если СозданныйШаблон.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		Если Шаблон.ТипШаблона = "Письмо" Тогда
			ШаблоныЭлектронныхПисем.Добавить(СозданныйШаблон);
		ИначеЕсли Шаблон.ТипШаблона = "SMS" Тогда
			ШаблоныSMS.Добавить(СозданныйШаблон);
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("Письмо", ШаблоныЭлектронныхПисем);
	Результат.Вставить("SMS",    ШаблоныSMS);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СверкаВзаиморасчетовСБПc2b

// Определяет документы оплат для проведения сверки взаиморасчетов за период.
//
// Параметры:
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей - настройка подключения к сервису;
//  НачалоПериода - Дата - начало периода отбора;
//  КонецПериода - Дата - окончание периода отбора;
//
// Возвращаемое значение:
//  Массив из ДокументОперацииСБП - документы оплат за период.
//
Функция ДокументыНастройкиПодключенияЗаПериод(
		НастройкаПодключения,
		НачалоПериода,
		КонецПериода) Экспорт
	
	Если Не ПереводыСБПc2b.ПереводыСБПДоступны() Тогда
		ВызватьИсключение НСтр("ru = 'Нарушение прав доступа. Пользователю запрещено выполнение операций в Системе быстрых платежей.
			|Обратитесь к администратору.'");
	КонецЕсли;
	
	Возврат РегистрыСведений.ИдентификаторыОперацийСБПc2b.ДокументНастройкиПодключенияЗаПериод(
		НастройкаПодключения,
		НачалоПериода,
		КонецПериода);
	
КонецФункции

// Определяет параметры документов оплат для проведения сверки взаиморасчетов за период.
//
// Параметры:
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей - настройка подключения к сервису;
//  НачалоПериода - Дата - начало периода отбора;
//  КонецПериода - Дата - окончание периода отбора;
//
// Возвращаемое значение:
//  ТаблицаЗначений - данные документов оплат за период.
//
Функция ОперацииНастройкиПодключенияЗаПериод(
		НастройкаПодключения,
		НачалоПериода,
		КонецПериода) Экспорт
	
	Если Не ПереводыСБПc2b.ЧтениеПереводовСБПДоступно() Тогда
		ВызватьИсключение НСтр("ru = 'Нарушение прав доступа. Пользователю запрещено чтение операций в Системе быстрых платежей.
			|Обратитесь к администратору.'");
	КонецЕсли;
	
	Возврат РегистрыСведений.ИдентификаторыОперацийСБПc2b.ОперацииНастройкиПодключенияЗаПериод(
			НастройкаПодключения,
			НачалоПериода,
			КонецПериода);
	
КонецФункции

#КонецОбласти

#Область МакетыСБП

// Возвращает табличный документ для печати макета СБП.
//
// Параметры:
//  ИдентификаторМакета - Строка - Идентификатор макета СБП для печати.
//
// Возвращаемое значение:
//  ТабличныйДокумент - макет СБП.
//
Функция ПолучитьМакетСБП(ИдентификаторМакета) Экспорт
	
	МакетВКэше = Новый ТабличныйДокумент;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КэшМакетовСБП.Макет КАК Макет,
	|	КэшМакетовСБП.ДатаОбновления КАК ДатаОбновления
	|ИЗ
	|	РегистрСведений.КэшМакетовСБП КАК КэшМакетовСБП
	|ГДЕ
	|	КэшМакетовСБП.Идентификатор = &Идентификатор";
	
	Запрос.УстановитьПараметр("Идентификатор", ИдентификаторМакета);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		МакетВКэше = Выборка.Макет.Получить();
		
		Если Выборка.ДатаОбновления > ДобавитьМесяц(ТекущаяДатаСеанса(), -2) Тогда
			Возврат МакетВКэше;
		КонецЕсли;
		
	КонецЕсли;
	
	// Макет не найден или устарел
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		// Данные обновляются через поставляемые данные.
		Если МакетВКэше.ВысотаТаблицы = 0 Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Поставляемые макеты СБП не загружены, обратитесь к администратору.'"));
		КонецЕсли;
		Возврат МакетВКэше;
	Иначе
		// Выполним процедуру обновления макетов.
		РезультатОбновления = СервисПереводыСБПc2b.ОбновитьКэшМакетов();
	КонецЕсли;
	
	Если Не ПустаяСтрока(РезультатОбновления.КодОшибки) Тогда
		Возврат МакетВКэше;
	КонецЕсли;
	
	ОбновленныйМакет = Новый Структура;
	ОбновленныйМакет.Вставить(ИдентификаторМакета, Неопределено);
	
	ЗаполнитьЗначенияСвойств(ОбновленныйМакет, РезультатОбновления.ОбновленныеМакеты);
	
	Если ОбновленныйМакет[ИдентификаторМакета] = Неопределено Тогда
		Возврат МакетВКэше;
	Иначе
		Возврат ОбновленныйМакет[ИдентификаторМакета];
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Выполянет заполнение идентификатора участника в исторических данных при переходе на версию 2.7.4
//
Процедура ЗаполнитьИдентификаторУчастника(Параметры = Неопределено) Экспорт
	
	РеквизитыРегистра = Метаданные.РегистрыСведений.ИдентификаторыОперацийСБПc2b.Реквизиты;
	
	Если РеквизитыРегистра.Найти("НастройкаПодключения") = Неопределено
		Или РеквизитыРегистра.Найти("ИдентификаторУчастника") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Пока Истина Цикл
		
		МенеджерВТ = Новый МенеджерВременныхТаблиц;
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ИдентификаторыОперацийСБПc2b.ДокументОперации КАК ДокументОперации
		|ПОМЕСТИТЬ ВТ_ДокументыОпераций
		|ИЗ
		|	РегистрСведений.ИдентификаторыОперацийСБПc2b КАК ИдентификаторыОперацийСБПc2b
		|ГДЕ
		|	ИдентификаторыОперацийСБПc2b.ИдентификаторУчастника = """"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДокументыОпераций.ДокументОперации КАК ДокументОперации
		|ИЗ
		|	ВТ_ДокументыОпераций КАК ВТ_ДокументыОпераций";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Возврат;
		КонецЕсли;
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИдентификаторыОперацийСБПc2b");
			ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ДокументОперации", "ДокументОперации");
			Блокировка.Заблокировать();
			
			ЗапросДанныхЗаписей = Новый Запрос;
			ЗапросДанныхЗаписей.МенеджерВременныхТаблиц = МенеджерВТ;
			ЗапросДанныхЗаписей.Текст =
			"ВЫБРАТЬ
			|	*,
			|	ИдентификаторыОперацийСБПc2b.НастройкаПодключения.ИдентификаторУчастника КАК ИдентификаторУчастникаПоНастройке
			|ИЗ
			|	РегистрСведений.ИдентификаторыОперацийСБПc2b КАК ИдентификаторыОперацийСБПc2b
			|ГДЕ
			|	ИдентификаторыОперацийСБПc2b.ДокументОперации В
			|			(ВЫБРАТЬ
			|				ВТ_ДокументыОпераций.ДокументОперации
			|			ИЗ
			|				ВТ_ДокументыОпераций КАК ВТ_ДокументыОпераций)";
			
			ВыборкаДанныхЗаписей = ЗапросДанныхЗаписей.Выполнить().Выбрать();
			
			Пока ВыборкаДанныхЗаписей.Следующий() Цикл
				
				НаборЗаписей = РегистрыСведений.ИдентификаторыОперацийСБПc2b.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ДокументОперации.Установить(ВыборкаДанныхЗаписей.ДокументОперации);
				Запись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(Запись, ВыборкаДанныхЗаписей);
				Запись.ИдентификаторУчастника = ВыборкаДанныхЗаписей.ИдентификаторУчастникаПоНастройке;
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
				
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось выполнить заполнение идентифкатора участника в обработчике обновления по причине:
						|%1'"),
					ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
			СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
				ТекстОшибки,
				Истина);
			
			ВызватьИсключение ТекстОшибки;
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРегламентныхЗаданий

// Создает регламентное задание "ЗагрузкаСтатусовОперацийСБПc2b" 
// при создании новой настройки подключения.
//
Процедура ДобавитьЗаданиеЗагрузкаСтатусовОперацийСБПc2b() Экспорт
	
	Отбор = Новый Структура;
	Отбор.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ЗагрузкаСтатусовОперацийСБПc2b);
	ЗаданияОбновления = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	
	Если ЗаданияОбновления.Количество() = 0 Тогда
		
		Расписание = Новый РасписаниеРегламентногоЗадания;
		Расписание.ПериодПовтораВТечениеДня = 60 * 60 * 3; // Попытка получения статуса выполняется каждые 3 часа.
		Расписание.ПериодПовтораДней = 1;
		
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("Использование", Истина);
		ПараметрыЗадания.Вставить("Метаданные",    Метаданные.РегламентныеЗадания.ЗагрузкаСтатусовОперацийСБПc2b);
		ПараметрыЗадания.Вставить("Расписание",    Расписание);
		ПараметрыЗадания.Вставить("Наименование",  НСтр("ru = 'Загрузка статусов операций СБП'"));
		
		Попытка
			РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
		Исключение
			ИнформацияОбОшибке = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось создать регламентное задание Загрузка статусов операций СБП по причине:
							|%1'"),
						ИнформацияОбОшибке),
					Истина);
			ВызватьИсключение ИнформацияОбОшибке;
		КонецПопытки;
		
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			НСтр("ru = 'Создано регламентное задание Загрузка статусов операций СБП.'"),
			Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщегоНазначения

// Определяет доступность использования функциональности выполнения операций
// в на основании прав доступа пользователя.
//
// Возвращаемое значение:
//  Булево - если Истина, оплата в Системе быстрых платежей доступна.
//
Функция СлужебнаяПереводыСБПДоступны() Экспорт
	
	Возврат ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ИдентификаторыОперацийСБПc2b)
		И ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ДанныеОперацийСБПc2b)
		И ПравоДоступа("Чтение", Метаданные.Справочники.НастройкиПодключенияКСистемеБыстрыхПлатежей);
	
КонецФункции

// Определяет доступность использования функциональности чтения операций
// в на основании прав доступа пользователя.
//
// Возвращаемое значение:
//  Булево - если Истина, чтение операций доступно.
//
Функция СлужебнаяЧтениеПереводовСБПДоступно() Экспорт
	
	Возврат ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ИдентификаторыОперацийСБПc2b)
		И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ДанныеОперацийСБПc2b)
		И ПравоДоступа("Чтение", Метаданные.Справочники.НастройкиПодключенияКСистемеБыстрыхПлатежей);
	
КонецФункции

// Создает описание результат создания заказа на оплату.
//
// Возвращаемое значение:
//  Структура - результат создания заказа на оплату:
//    * ПлатежнаяСсылка - Строка - идентификатор, по которому выполняется оплата;
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция НовыйРезультатПлатежнаяСсылка() Экспорт
	
	РезультатОперации = Новый Структура;
	РезультатОперации.Вставить("ПлатежнаяСсылка", "");
	РезультатОперации.Вставить("СуммаОплаты", "");
	РезультатОперации.Вставить("КодОшибки", "");
	РезультатОперации.Вставить("СообщениеОбОшибке", "");
	РезультатОперации.Вставить("ИнформацияОбОшибке", "");
	РезультатОперации.Вставить("ПлатежнаяСсылкаСБПc2b", Неопределено);
	
	Возврат РезультатОперации;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиРегламентныхЗаданий

// Обработчик регламентного задания "ЗагрузкаСтатусовОперацийСБПc2b".
//
Процедура ЗагрузкаСтатусовОперацийСБПc2b() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ЗагрузкаСтатусовОперацийСБПc2b);
	
	ОбработанныеОперации = СервисПереводыСБПc2b.СтатусыОпераций();
	
	Если ОбработанныеОперации.Количество() <> 0 Тогда
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Загружены терминальные статусы %1 операций СБП.'"),
				ОбработанныеОперации.Количество()),
				Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Удаляет все задания "ЗагрузкаСтатусовОперацийСБПc2b".
//
Процедура УдалитьЗаданияЗагрузкаСтатусовОперацийСБПc2b()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ЗагрузкаСтатусовОперацийСБПc2b);
		Задания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
		Если Задания.Количество() <> 0 Тогда
			Для каждого Задание Из Задания Цикл
				РегламентныеЗаданияСервер.УдалитьЗадание(Задание);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ШаблоныСообщений

// Возвращает описание настроек использования подсистемы ШаблоныСообщений.
//
// Возвращаемое значение:
//  Структура - содержит описание настроек использования подсистемы ШаблоныСообщений.
//   * Существует - Булево - признак существования подсистемы ШаблоныСообщений в составе конфигурации;
//   * Используется - Булево - признак включения функциональной опции использования шаблонов сообщений.
//
Функция НастройкиШаблоновСообщений() Экспорт
	
	Настройки = Новый Структура;
	
	ЕстьШаблоныСообщений = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ШаблоныСообщений");
	ИспользуютсяШаблоныСообщений = Ложь;
	Если ЕстьШаблоныСообщений Тогда
		МодульШаблоныСообщений = ОбщегоНазначения.ОбщийМодуль("ШаблоныСообщений");
		ИспользуютсяШаблоныСообщений = МодульШаблоныСообщений.ИспользуютсяШаблоныСообщений();
	КонецЕсли;
	
	Настройки.Вставить("Существует", ЕстьШаблоныСообщений);
	Настройки.Вставить("Используется", ИспользуютсяШаблоныСообщений);
	
	Возврат Настройки;
	
КонецФункции

// Записывает соответствие предопределенных шаблонов подсистемы в соответствующую константу.
//
// Параметры:
//  СоответствиеШаблонов - Соответствие - описание предопределенных шаблонов подсистемы
//    * Ключ - Строка - признак принадлежности шаблонов для отправки посредством письма или СМС.
//    * Значение - Соответствие - настройки выполнения запросов к платежным системам:
//       ** Ключ    - Строка - содержит полное имя типа назначения шаблона;
//       ** Значение - УникальныйИдентификатор - представление ссылки на элемент справочника ШаблоныСообщений.
//
Процедура УстановитьСоответствиеШаблоновДокументамОперации(
		СоответствиеШаблонов)
	
	Константы.ПредопределенныеШаблоныСообщенийСБП.Установить(Новый ХранилищеЗначения(СоответствиеШаблонов));
	
КонецПроцедуры

// Возвращает ссылку на элемент справочника ШаблоныСообщений по переданным параметрам.
//
// Параметры:
//  Шаблон - Структура - описание искомого шаблона:
//    * ПолноеИмяТипаНазначения - Строка - содержит полное имя типа назначения шаблона;
//    * ТипШаблона - Строка - признак принадлежности шаблонов для отправки посредством письма или СМС.
//       ** Ключ    - Строка - содержит полное имя типа назначения шаблона;
//  СоответствиеШаблоновДокументамОперации - Соответствие - описание предопределенных шаблонов подсистемы
//    * Ключ - Строка - признак принадлежности шаблонов для отправки посредством письма или СМС.
//    * Значение - Соответствие - настройки выполнения запросов к платежным системам:
//       ** Ключ    - Строка - содержит полное имя типа назначения шаблона;
//       ** Значение - УникальныйИдентификатор - представление ссылки на элемент справочника ШаблоныСообщений.
//
// Возвращаемое значение:
//  СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей - результат поиска, 
//    пустая ссылка, если по данной структуре шаблон не найден.
//
Функция НайтиПредопределенныйШаблонСообщений(
		Шаблон,
		СоответствиеШаблоновДокументамОперации)
	
	МенеджерШаблоновСообщений = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("Справочник.ШаблоныСообщений");
	
	ШаблонСсылка = МенеджерШаблоновСообщений.ПустаяСсылка();
	
	ИдентификаторШаблона = 
		СоответствиеШаблоновДокументамОперации[Шаблон.ТипШаблона].Получить(Шаблон.ПолноеИмяТипаНазначения);
		
	Если Не ТипЗнч(ИдентификаторШаблона) = Тип("УникальныйИдентификатор") Тогда
		Возврат ШаблонСсылка;
	КонецЕсли;
	
	НайденныйШаблон = МенеджерШаблоновСообщений.ПолучитьСсылку(ИдентификаторШаблона);
	Если НайденныйШаблон.Пустая() Тогда
		Возврат ШаблонСсылка;
	КонецЕсли;
	
	ДанныеШаблона = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		НайденныйШаблон,
		"ПометкаУдаления, ПолноеИмяТипаПараметраВводаНаОсновании, ПредназначенДляЭлектронныхПисем");
	
	Если ДанныеШаблона.ПометкаУдаления = Неопределено Тогда
		Возврат ШаблонСсылка;
	ИначеЕсли ДанныеШаблона.ПометкаУдаления Тогда 
		Возврат ШаблонСсылка;
	ИначеЕсли Не ДанныеШаблона.ПолноеИмяТипаПараметраВводаНаОсновании = Шаблон.ПолноеИмяТипаНазначения Тогда
		Возврат ШаблонСсылка;
	КонецЕсли;
	
	ШаблонСсылка = НайденныйШаблон;
	
	Возврат ШаблонСсылка;
	
КонецФункции

// См. ПереводыСБПc2bПереопределяемый.ПриОпределенииПредопределенныхШаблоновСообщенийСБППоТипам
//
Процедура ПриОпределенииПредопределенныхШаблоновСообщенийСБППоТипам(
		ПредопределенныеШаблоныСообщений)
	
	ИнтеграцияПодсистемБИП.ПриОпределенииПредопределенныхШаблоновСообщенийСБППоТипам(
		ПредопределенныеШаблоныСообщений);
	ПереводыСБПc2bПереопределяемый.ПриОпределенииПредопределенныхШаблоновСообщенийСБППоТипам(
		ПредопределенныеШаблоныСообщений);
	
КонецПроцедуры

// Включает функциональные опции необходимые для работы с шаблонами сообщений.
Процедура УстановитьИспользованиеШаблоновСообщенийПроверкаПодсистем() Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОтправкаSMS") Тогда
		ИнтернетПоддержкаПользователей.УстановитьИспользованиеSMS();
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
		ИнтернетПоддержкаПользователей.УстановитьИспользованиеЭлектроннойПочты();
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Взаимодействия") Тогда
		ИнтернетПоддержкаПользователей.УстановитьОтправкуПисемВФорматеHTML();
	КонецЕсли;
	
	ИнтернетПоддержкаПользователей.УстановитьИспользованиеШаблоновСообщений();
	
КонецПроцедуры

// Создает описание параметров отправки сообщений.
//
// Возвращаемое значение:
//  Структура - описание параметров отправки сообщений:
//    * ПараметрыОтправкиПисем - Структура - описание отправки электронных писем.
//       ** ОтправлятьПисьмаВФорматеHTML - Булево, Неопределено - признак отправки электронных писем в формате HTML.
//
Функция НовыйПараметрыОтправкиСообщений()
	
	ПараметрыОтправкиСообщений = Новый Структура;
	
	ПараметрыОтправкиПисем = Новый Структура;
	ПараметрыОтправкиПисем.Вставить("ОтправлятьПисьмаВФорматеHTML", Неопределено);
	
	ПараметрыОтправкиСообщений.Вставить("ПараметрыОтправкиПисем", ПараметрыОтправкиПисем);
	
	Возврат ПараметрыОтправкиСообщений;
	
КонецФункции

// См. ПереводыСБПc2bПереопределяемый.ПриОпределенииПараметровОтправкиСообщенийСБП.
//
Процедура ПриОпределенииПараметровОтправкиСообщений(
		ПараметрыОтправкиСообщений)
	
	ИнтеграцияПодсистемБИП.ПриОпределенииПараметровОтправкиСообщенийСБП(
		ПараметрыОтправкиСообщений);
	ПереводыСБПc2bПереопределяемый.ПриОпределенииПараметровОтправкиСообщенийСБП(
		ПараметрыОтправкиСообщений);
	
КонецПроцедуры

// Возвращает признак отправки писем с использованием шаблонов СБП в формате HTML.
//
// Возвращаемое значение:
//  Булево - признак отправки писем с использованием шаблонов СБП в формате HTML.
//
Функция ОтправлятьПисьмаВФорматеHTML(
		ПараметрыОтправкиСообщений)
	
	Попытка
		ОтправлятьПисьмаВФорматеHTML = ПараметрыОтправкиСообщений.ПараметрыОтправкиПисем.ОтправлятьПисьмаВФорматеHTML;
	Исключение
		ВызватьИсключение НСтр("ru = 'Нарушение структуры параметров отправки сообщений в переопределяемом методе
			|ПереводыСБПc2bПереопределяемый.ПриОпределенииПараметровОтправкиСообщенийСБП'");
	КонецПопытки;
	
	Если ОтправлятьПисьмаВФорматеHTML = Неопределено Тогда
		Возврат ИнтернетПоддержкаПользователей.ОтправлятьПисьмаВФорматеHTML();
	Иначе
		Возврат ОтправлятьПисьмаВФорматеHTML;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПодключаемыеКоманды

// Возвращает полные имена объектов метаданных, которые могут выступать в качестве оснований платежа через СБП.
//
// Возвращаемое значение:
//  Массив Из Строка - имена объектов метаданных оснований платежа.
//
Функция ПолучитьИменаДокументовОперации()
	
	ИменаДокументовОперации = Новый Массив;
	ИнтеграцияПодсистемБИП.ПриОпределенииОбъектовСКомандамиСБП(ИменаДокументовОперации);
	ПереводыСБПc2bПереопределяемый.ПриОпределенииОбъектовСКомандамиСБП(ИменаДокументовОперации);
	
	Возврат ИменаДокументовОперации;
	
КонецФункции

// Проверяет является ли объект основанием платежа через СБП.
//
// Параметры:
//  Объект - ЛюбаяСсылка, Строка - ссылка на объект или полное имя объекта метаданных для проверки.
//
// Возвращаемое значение:
//  Булево - Истина, если объект является основанием платежа, иначе Ложь.
//
Функция ЭтоДокументОперацииСБП(Знач Объект)
	
	ПолноеИмя = Неопределено;
	
	Если ТипЗнч(Объект) = Тип("Строка") Тогда
		
		ПолноеИмя = Объект;
		
	Иначе
		
		МетаданныеОбъекта = Объект.Метаданные();
		ПолноеИмя = МетаданныеОбъекта.ПолноеИмя();
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолноеИмя) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИменаДокументовОперации = ПолучитьИменаДокументовОперации();
	
	Возврат (ИменаДокументовОперации.Найти(ПолноеИмя) <> Неопределено);
	
КонецФункции

#КонецОбласти

#Область ПодготовкаПлатежнойСсылки

// Определяет объекты, которые могут выступать в качестве оснований платежа через СБП.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииСБП - документ, по данным которого
//    необходимо проверить доступность настройки подключения СБП.
//
// Возвращаемое значение:
//  Структура - результат определения доступности СБП:
//    * ИнтеграцияДоступна - Булево - признак доступности подключения СБП.
//    * СообщениеОбОшибке - Строка - текст сообщения ошибки для пользователя.
//
Функция ПриОпределенииДоступностиПодключенияПоДокументуОперации(ДокументОперации) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИнтеграцияДоступна", Истина);
	Результат.Вставить("СообщениеОбОшибке", "");
	
	ИнтеграцияПодсистемБИП.ПриОпределенииДоступностиПодключенияПоДокументуОперации(
		ДокументОперации,
		Результат);
	ПереводыСБПc2bПереопределяемый.ПриОпределенииДоступностиПодключенияПоДокументуОперации(
		ДокументОперации,
		Результат);
	
	Возврат Результат;
	
КонецФункции

// Определяет объекты, которые могут выступать в качестве оснований платежа через СБП.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииСБП - документ, по данным которого
//    необходимо получить перечень возможных настроек подключения.
//
// Возвращаемое значение:
// Структура:
//    * НастройкиПодключения - Массив Из СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//      настройка подключения к СБП.
//    * НастройкиПодключения - Структура - дополнительные настройки подключения СБП
//      ** БИК - Строка, Неопределено - идентификатор банка. Используется для автоматического
//         выбора участника СБП.
//      ** ДополнительныеПараметры - Структура, Неопределено - дополнительные параметры подключения.
//         Значение будет передано в переопределяемые методы:
//           - СистемаБыстрыхПлатежейПереопределяемый.ПриНастройкеЭлементовФормыПодключения;
//           - СистемаБыстрыхПлатежейПереопределяемый.ПриЗаполненииФормыНастройкиПодключения.
//      ** ОтборУчастников - Строка, Неопределено - Параметры отбора участников СБП.
//         Допустимые значения - "Банки", "ПлатежныеАгрегаторы", "КассовыеСсылки", Неопределено.
//         Неопределено по умолчанию.
//      ** МаксимальнаяСуммаОплаты - Строка, Неопределено - Параметры отбора участников СБП.
//         Допустимые значения - "Банки", "ПлатежныеАгрегаторы", "КассовыеСсылки", Неопределено.
//         Неопределено по умолчанию.
//    * ТекстВопроса - Строка, Неопределено - текст вопроса, который будет выведен пользователю
//         перед началом формирования платежной ссылки или началом подключения к СБП.
//         Вопрос не выводится, если параметр имеет значение Неопределено.
//
Функция ПриОпределенииПараметровПодключенияДокументаОперации(ДокументОперации) Экспорт
	
	ДополнительныеНастройки = Новый Структура;
	ДополнительныеНастройки.Вставить("БИК",                     Неопределено);
	ДополнительныеНастройки.Вставить("ОтборУчастников",         Неопределено);
	ДополнительныеНастройки.Вставить("ДополнительныеПараметры", Неопределено);
	ДополнительныеНастройки.Вставить("МаксимальнаяСуммаОплаты", 0);
	
	ПараметрыВопроса = Новый Структура;
	ПараметрыВопроса.Вставить("ТекстВопроса", Неопределено);
	
	Результат = Новый Структура;
	Результат.Вставить("НастройкиПодключения", Новый Массив);
	Результат.Вставить("ДополнительныеНастройки", ДополнительныеНастройки);
	Результат.Вставить("ПараметрыВопроса", ПараметрыВопроса);
	
	ИнтеграцияПодсистемБИП.ПриОпределенииПараметровПодключенияДокументаОперации(
		ДокументОперации,
		Результат.НастройкиПодключения,
		Результат.ДополнительныеНастройки,
		Результат.ПараметрыВопроса);
	ПереводыСБПc2bПереопределяемый.ПриОпределенииПараметровПодключенияДокументаОперации(
		ДокументОперации,
		Результат.НастройкиПодключения,
		Результат.ДополнительныеНастройки,
		Результат.ПараметрыВопроса);
	
	Возврат Результат;
	
КонецФункции

// Выполняет актуализацию статуса оплаты по ранее
// сформированному идентификатору оплаты (QR-коду).
//
// Параметры:
//  ДокументОплаты - ОпределяемыйТип.ДокументОперацииСБП - документ, который отражает
//    продажу в информационной базе;
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//    настройка выполнения оплаты;
//  ПараметрыОперации - Структура - дополнительные данные по оплате:
//    * ДатаОперации - Дата - фактическая дата оплаты в UTC;
//    * СуммаОперации - Число - фактическая суммы операции по документу;
//    * ИдентификаторОперации - Строка - ключ контроля загрузки;
//
// Возвращаемое значение:
//  Структура - результат создания заказа на оплату в Системе быстрых платежей:
//    * СтатусОперации - Строка - текущее состояние операции оплаты. Для проверки статуса
//      операции, необходимо функции программного интерфейса общего модуля
//      СистемаБыстрыхПлатежейКлиентСервер. Возможные значения:
//        - "Выполняется" - подтверждение оплаты не получено;
//        - "Отменена" - оплата по ранее сформированному QR-коду невозможна;
//        - "Выполнена" - участник СБП подтвердил оплату;
//        - "Ошибка" - не удалось выполнить проверку оплаты из-за ошибки;
//    * ПараметрыОперации - Структура - дополнительные данные по оплате:
//        ** ПлатежнаяСсылка- Строка - идентификатор, по которому выполняется оплата;
//        ** ДатаОперации - Дата - фактическая дата оплаты в UTC;
//        ** Идентификатор - Строка - идентификатор операции в Системе быстрых платежей;
//        ** НазначениеПлатежа - Строка - информация о платеже, которая будет отображена пользователю
//             в момент сканирования QR-кода в мобильном приложении;
//        ** СтатусОперации - Строка - текущий статус операции;
//        ** СуммаОперации - Число - фактическая суммы оплаты по документу;
//        ** ИдентификаторОплаты - Строка - ключ контроля загрузки;
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом:
//        - <Пустая строка> - оплата успешно проведена;
//        - "НеверныйФорматЗапроса" - передан некорректный запрос или настройка подключения;
//        - "НеверныйЛогинИлиПароль" - неверный логин или пароль или параметры
//          подключения к сервису участника СБП;
//        - "ОтсутствуетДоступКСервису" - у пользователя нет доступа к сервису;
//        - "ПревышеноКоличествоПопыток" - превышено количество попыток
//        обращения к сервису с некорректным логином и паролем;
//        - "ОшибкаПодключения" - ошибка при подключении к сервису;
//        - "ОшибкаСервиса" - внутренняя ошибка сервиса;
//        - "НеизвестнаяОшибка" - при получении информации возникла
//          неизвестная (не обрабатываемая) ошибка;
//        - "СервисВременноНеДоступен" - на сервере ведутся регламентные работы;
//        - "ИнтеграцияНеИспользуется" - использование отключено в настройках;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция АктуализироватьСтатусОплаты(
		ДокументОплаты,
		НастройкаПодключения,
		ПараметрыОперации,
		ДанныеЧастичнойОплаты) Экспорт
	
	РезультатОперации = ПереводыСБПc2b.СтатусОплаты(
		ДокументОплаты,
		НастройкаПодключения,
		Ложь);
	РезультатОперации.Вставить("НеобходимоАктуализировать", Ложь);
	РезультатОперации.Вставить("СуммаОплаты", РезультатОперации.ПараметрыОперации.СуммаОперации);
	
	Если РезультатОперации.СтатусОперации <> СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииВыполняется()
			И РезультатОперации.СтатусОперации <> СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииОшибка() Тогда
		
		// Изменился статус операции, необходима обработка, выполним в попытке
		Попытка
			
			СтатусОперации = РезультатОперации.СтатусОперации;
			Если СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииВыполнена() Тогда
				СтатусОперацииСервиса = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаВыполнена();
			ИначеЕсли СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииОтменена() Тогда
				СтатусОперацииСервиса = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаОтменена();
			Иначе
				РезультатОперации.КодОшибки = "НеизвестнаяОшибка";
				РезультатОперации.СообщениеОбОшибке = НСтр("ru = 'Неизвестный статус операции сервиса'");
				РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Неизвестный статус операции сервиса'");
			КонецЕсли;
			
			ОписаниеПараметровОперации = СистемаБыстрыхПлатежейСлужебный.НовыйОписаниеПараметровОперации();
			ЗаполнитьЗначенияСвойств(ОписаниеПараметровОперации, РезультатОперации.ПараметрыОперации);
			
			СервисПереводыСБПc2b.ПриЗагрузкеСтатусаОперации(
				ДокументОплаты,
				НастройкаПодключения,
				ПараметрыОперации,
				СтатусОперацииСервиса,
				РезультатОперации.СообщениеОбОшибке,
				Новый Массив);
			
		Исключение
			// Исключение не обрабатываем, ожидаем что документы прикладной логики обработаются методом СтатусыОперацийC2B
			СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
				Истина);
		КонецПопытки;
		
		РезультатОперации.Вставить("ПлатежнаяСсылка", ПараметрыОперации.ПлатежнаяСсылка);
		
	ИначеЕсли РезультатОперации.СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииВыполняется() Тогда
		
		// Проверка изменился ли документ оплаты
		ЗаказНаОплату = СервисПереводыСБПc2b.СформироватьДанныеЗаказаНаОплатуПоДокументуОперации(
			ДокументОплаты,
			НастройкаПодключения,
			Неопределено,
			РезультатОперации,
			ДанныеЧастичнойОплаты);
			
		Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
			Возврат РезультатОперации;
		КонецЕсли;
		
		ПараметрыНастройкиПодключения = СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения(
			НастройкаПодключения);
		ПараметрыОперации.Вставить("ИдентификаторМерчанта", ПараметрыНастройкиПодключения.ИдентификаторМерчанта);
		ПараметрыОперации.Вставить("ИдентификаторУчастника", ПараметрыНастройкиПодключения.ИдентификаторУчастника);
		
		АнализИсторическихДанных = СервисПереводыСБПc2b.АнализИсторическихДанныхОплаты(
			ДокументОплаты,
			ЗаказНаОплату,
			"",
			ПараметрыОперации.Идентификатор,
			ПараметрыОперации);
			
		Если Не АнализИсторическихДанных.ДанныеИдентичны Тогда
			РезультатОперации.Вставить("НеобходимоАктуализировать", Истина);
		КонецЕсли;
		
		РезультатОперации.Вставить("ПлатежнаяСсылка", ПараметрыОперации.ПлатежнаяСсылка);
		РезультатОперации.Вставить("СуммаОплаты", ЗаказНаОплату.СуммаОплаты);
		
	КонецЕсли;
	
	Возврат РезультатОперации;
	
КонецФункции

// Регистрирует новую кассовую ссылку и получает
// идентификатор оплаты для формирования QR-кода.
//
// Параметры:
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//    настройка выполнения оплаты.
//  ИдентификаторОплаты - Строка - идентификатор зарегистрированной ссылки.
//
// Возвращаемое значение:
//  Структура - результат создания кассовый ссылки в Системе быстрых платежей:
//    * ДанныеСсылки - Структура - данные кассовой ссылки:
//      ** КассоваяСсылка - Строка - ссылка, по которой будет выполнятся оплата;
//      ** ИдентификаторОплаты - Строка - идентификатор зарегистрированной ссылки;
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом:
//        - <Пустая строка> - создание нового заказа выполнено успешно;
//        - "НеверныйФорматЗапроса" - передан некорректный запрос или настройка подключения;
//        - "НеверныйЛогинИлиПароль" - неверный логин или пароль или параметры
//          подключения к Системе быстрых платежей;
//        - "ОтсутствуетДоступКСервису" - у пользователя нет доступа к сервису;
//        - "ПревышеноКоличествоПопыток" - превышено количество попыток
//          обращения к сервису с некорректным логином и паролем;
//        - "ОшибкаПодключения" - ошибка при подключении к сервису;
//        - "ОшибкаСервиса" - внутренняя ошибка сервиса;
//        - "НеизвестнаяОшибка" - при получении информации возникла
//          неизвестная (не обрабатываемая) ошибка;
//        - "СервисВременноНеДоступен" - на сервере ведутся регламентные работы;
//        - "ИнтеграцияНеИспользуется" - использование отключено в настройках;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция СлужебныйКассоваяСсылка(
		НастройкаПодключения,
		ИдентификаторОплаты) Экспорт
	
	ПроверитьПраваНаВыполнениеОперации();
	
	РезультатОперации = СистемаБыстрыхПлатежейСлужебный.НовыйРезультатОперации();
	РезультатОперации.Вставить("ИдентификаторОплаты", "");
	РезультатОперации.Вставить("КассоваяСсылка", "");
	РезультатОперации.Удалить("ПлатежнаяСсылкаСБПc2b");
	
	// Подготовка параметров настройки подключения.
	ПараметрыНастройкиПодключения = СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения(
		НастройкаПодключения);
	
	// Проверка общих параметров подключения.
	ПроверитьОбщиеНастройкиПодключенияБезДокументаОперации(
		НастройкаПодключения,
		ПараметрыНастройкиПодключения,
		РезультатОперации);
	
	Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
		Возврат РезультатОперации;
	КонецЕсли;
	
	// Создание новой кассовой ссылки.
	Возврат СервисПереводыСБПc2b.КассоваяСсылка(
		ПараметрыНастройкиПодключения,
		ИдентификаторОплаты);
	
КонецФункции

// Создает новый заказ на оплату и получает
// идентификатор оплаты для формирования QR-кода.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииСБП - документ, который отражает
//    оплату в информационной базе;
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//    настройка выполнения операции.
//  ДополнительныеПараметры - Структура, Неопределено - дополнительные настройки формирования
//    заказа на оплату.
//
// Возвращаемое значение:
//  Структура - результат создания динамической ссылки в Системе быстрых платежей:
//    * ПлатежнаяСсылка - Строка - идентификатор, по которому выполняется оплата;
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом:
//        - <Пустая строка> - создание нового заказа выполнено успешно;
//        - "НеверныйФорматЗапроса" - передан некорректный запрос или настройка подключения;
//        - "УжеОплачен" - документ уже оплачен;
//        - "НеверныйЛогинИлиПароль" - неверный логин или пароль или параметры
//          подключения к участнику СБП;
//        - "ОтсутствуетДоступКСервису" - у пользователя нет доступа к сервису;
//        - "ПревышеноКоличествоПопыток" - превышено количество попыток
//          обращения к сервису с некорректным логином и паролем;
//        - "ОшибкаПодключения" - ошибка при подключении к сервису;
//        - "ОшибкаСервиса" - внутренняя ошибка сервиса;
//        - "НеизвестнаяОшибка" - при получении информации возникла
//          неизвестная (не обрабатываемая) ошибка;
//        - "СервисВременноНеДоступен" - на сервере ведутся регламентные работы;
//        - "ИнтеграцияНеИспользуется" - использование отключено в настройках;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция СлужебныйДинамическаяСсылка(
		ДокументОперации,
		НастройкаПодключения,
		ДополнительныеПараметры = Неопределено) Экспорт
	
	ПроверитьПраваНаВыполнениеОперации();
	
	РезультатОперации = НовыйРезультатПлатежнаяСсылка();
	
	// Подготовка параметров настройки подключения.
	ПараметрыНастройкиПодключения = СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения(
		НастройкаПодключения);
	
	// Проверка общих параметров подключения.
	ПроверитьОбщиеНастройкиПодключения(
		ДокументОперации,
		НастройкаПодключения,
		ПараметрыНастройкиПодключения,
		РезультатОперации);
	
	Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
		Возврат РезультатОперации;
	КонецЕсли;
	
	// Создание нового заказа на оплату.
	Возврат СервисПереводыСБПc2b.ДинамическаяСсылка(
		ДокументОперации,
		ПараметрыНастройкиПодключения,
		ДополнительныеПараметры);
	
КонецФункции

Функция АктуализироватьСтатусыОплат(НастройкаПодключения, ОписаниеОпераций) Экспорт
	
	РезультатыОпераций = Новый Массив;
	
	Для Каждого ОписаниеОперации Из ОписаниеОпераций Цикл
		РезультатыОпераций.Добавить(
			АктуализироватьСтатусОплаты(
				ОписаниеОперации.ОснованиеПлатежа,
				НастройкаПодключения,
				ОписаниеОперации.ПараметрыОперации,
				ОписаниеОперации.ДанныеЧастичнойОплаты));
	КонецЦикла;
		
	Возврат РезультатыОпераций;
	
КонецФункции

// Создает новый заказ на оплату и получает
// идентификатор оплаты для формирования QR-кода.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииСБП - документ, который отражает
//    оплату в информационной базе;
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//    настройка выполнения операции.
//  ДополнительныеПараметры - Структура, Неопределено - дополнительные настройки формирования
//    заказа на оплату.
//
// Возвращаемое значение:
//  Структура - результат создания динамической ссылки в Системе быстрых платежей:
//    * ПлатежнаяСсылка - Строка - идентификатор, по которому выполняется оплата;
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом:
//        - <Пустая строка> - создание нового заказа выполнено успешно;
//        - "НеверныйФорматЗапроса" - передан некорректный запрос или настройка подключения;
//        - "УжеОплачен" - документ уже оплачен;
//        - "НеверныйЛогинИлиПароль" - неверный логин или пароль или параметры
//          подключения к участнику СБП;
//        - "ОтсутствуетДоступКСервису" - у пользователя нет доступа к сервису;
//        - "ПревышеноКоличествоПопыток" - превышено количество попыток
//          обращения к сервису с некорректным логином и паролем;
//        - "ОшибкаПодключения" - ошибка при подключении к сервису;
//        - "ОшибкаСервиса" - внутренняя ошибка сервиса;
//        - "НеизвестнаяОшибка" - при получении информации возникла
//          неизвестная (не обрабатываемая) ошибка;
//        - "СервисВременноНеДоступен" - на сервере ведутся регламентные работы;
//        - "ИнтеграцияНеИспользуется" - использование отключено в настройках;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция СлужебныйДинамическаяСсылкаЧастичнойОплаты(
		НастройкаПодключения,
		ДанныеЧастичнойОплаты) Экспорт
	
	Если Не ПереводыСБПc2b.ПереводыСБПДоступны() Тогда
		ВызватьИсключение НСтр("ru = 'Нарушение прав доступа. Пользователю запрещено выполнение операций в Системе быстрых платежей.
			|Обратитесь к администратору.'");
	КонецЕсли;
	
	РезультатОперации = НовыйРезультатПлатежнаяСсылка();
	
	Если Не ЗначениеЗаполнено(ДанныеЧастичнойОплаты.ПлатежнаяСсылкаСБПc2b) Тогда
		
		ПлатежнаяСсылкаСБПc2bСсылка = Документы.ПлатежнаяСсылкаСБПc2b.ПолучитьСсылку(Новый УникальныйИдентификатор);
		
		НоваяПлатежнаяСсылкаСБПc2b = Документы.ПлатежнаяСсылкаСБПc2b.СоздатьДокумент();
		НоваяПлатежнаяСсылкаСБПc2b.УстановитьСсылкуНового(ПлатежнаяСсылкаСБПc2bСсылка);
		
		НоваяПлатежнаяСсылкаСБПc2b.ОснованиеПлатежа = ДанныеЧастичнойОплаты.ОснованиеПлатежа;
		НоваяПлатежнаяСсылкаСБПc2b.Сумма            = ДанныеЧастичнойОплаты.СуммаОплаты;
		НоваяПлатежнаяСсылкаСБПc2b.Дата             = ТекущаяДатаСеанса();
		
		ДанныеЧастичнойОплаты.Вставить("ПлатежнаяСсылкаСБПc2b", ПлатежнаяСсылкаСБПc2bСсылка);
		ДанныеЧастичнойОплаты.Вставить("ДатаОплаты",            НоваяПлатежнаяСсылкаСБПc2b.Дата);
		
	Иначе
		ПлатежнаяСсылкаСБПc2bСсылка = ДанныеЧастичнойОплаты.ПлатежнаяСсылкаСБПc2b;
	КонецЕсли;
	
	// Подготовка параметров настройки подключения.
	ПараметрыНастройкиПодключения = СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения(
		НастройкаПодключения);
	
	// Проверка параметров подключения.
	ПроверитьОбщиеНастройкиПодключенияБезДокументаОперации(
		НастройкаПодключения,
		ПараметрыНастройкиПодключения,
		РезультатОперации);
	
	Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
		Возврат РезультатОперации;
	КонецЕсли;
	
	// Создание нового заказа на оплату.
	РезультатОперации = СервисПереводыСБПc2b.ДинамическаяСсылка(
		ПлатежнаяСсылкаСБПc2bСсылка,
		ПараметрыНастройкиПодключения,
		Неопределено,
		ДанныеЧастичнойОплаты);
		
	Если РезультатОперации.КодОшибки = "" Тогда
		
		Если НоваяПлатежнаяСсылкаСБПc2b <> Неопределено Тогда
			НоваяПлатежнаяСсылкаСБПc2b.Записать();
		КонецЕсли;
		
		РезультатОперации.ПлатежнаяСсылкаСБПc2b = ДанныеЧастичнойОплаты.ПлатежнаяСсылкаСБПc2b;
		
	КонецЕсли;
	
	Возврат РезультатОперации;
	
КонецФункции

// Возвращает список использованных для создания платежной ссылки настроек подключения по документу,
//   включая частичные оплаты.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииСБП - документ, по данным которого
//    необходимо получить список настроек.
//
// Возвращаемое значение:
//  Массив Из СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей
//   - используемые в документах настройки подключения.
//
Функция НастройкиПодключенияПоДокументуОперации(ДокументОперации) Экспорт
	
	Возврат РегистрыСведений.ИдентификаторыОперацийСБПc2b.НастройкиПодключенияПоДокументуОперации(ДокументОперации);
	
КонецФункции

// Формирует настройки подключения для выполнения запросов.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииСБП - документ, по данным которого
//    необходимо получить список настроек.
//
// Возвращаемое значение:
//  Структура - см. СистемаБыстрыхПлатежейСлужебный.НовыйПараметрыНастройкиПодключения.
//
Функция ПараметрыНастройкиПодключенияПоДокументу(ДокументОперации) Экспорт
	
	// Заполнение настроек проведения оплаты.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИдентификаторыОперацийСБПc2b.ИдентификаторМерчанта КАК ИдентификаторМерчанта,
	|	ВЫБОР
	|		КОГДА ИдентификаторыОперацийСБПc2b.ИдентификаторУчастника <> """"
	|			ТОГДА ИдентификаторыОперацийСБПc2b.ИдентификаторУчастника
	|		ИНАЧЕ ИдентификаторыОперацийСБПc2b.НастройкаПодключения.ИдентификаторУчастника
	|	КОНЕЦ КАК ИдентификаторУчастника,
	|	ИдентификаторыОперацийСБПc2b.НастройкаПодключения.Ссылка КАК НастройкаПодключения,
	|	ИдентификаторыОперацийСБПc2b.НастройкаПодключения.Используется КАК Используется,
	|	ИдентификаторыОперацийСБПc2b.НастройкаПодключения.Ссылка КАК НастройкаПодключенияСсылка,
	|	ЕСТЬNULL(НастройкиУчастниковСБП.ТипАутентификации, ""UNKNOW"") КАК ТипАутентификации,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(НастройкиУчастниковСБП.ПеренаправлениеПоСсылке, ЛОЖЬ)
	|			ТОГДА ИдентификаторыОперацийСБПc2b.НастройкаПодключения.СсылкаПеренаправления
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК СсылкаПеренаправления
	|ИЗ
	|	РегистрСведений.ИдентификаторыОперацийСБПc2b КАК ИдентификаторыОперацийСБПc2b
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчастниковСБП КАК НастройкиУчастниковСБП
	|		ПО (ВЫБОР
	|				КОГДА ИдентификаторыОперацийСБПc2b.ИдентификаторУчастника <> """"
	|					ТОГДА ИдентификаторыОперацийСБПc2b.ИдентификаторУчастника
	|				ИНАЧЕ ИдентификаторыОперацийСБПc2b.НастройкаПодключения.ИдентификаторУчастника
	|			КОНЕЦ = НастройкиУчастниковСБП.Идентификатор)
	|ГДЕ
	|	ИдентификаторыОперацийСБПc2b.ДокументОперации = &ДокументОперации";
	
	Запрос.УстановитьПараметр("ДокументОперации", ДокументОперации);
	
	Возврат СистемаБыстрыхПлатежейСлужебный.НовыйПараметрыНастройкиПодключения(
		Запрос,
		"РегистрСведений");
	
КонецФункции

// Формирует настройки подключения для выполнения запросов.
//
// Параметры:
//  ДокументыОперации - Массив Из ОпределяемыйТип.ДокументОперацииСБП - документы, по данным которого
//    необходимо получить список настроек.
//
// Возвращаемое значение:
//  Соответствие - Описывает настройки подключения для переданных документов
//    *Ключ - ОпределяемыйТип.ДокументОперацииСБП - документ по которому получен список настроек.
//    *Значение - Структура - см. СистемаБыстрыхПлатежейСлужебный.НовыйПараметрыНастройкиПодключения.
//
Функция ПараметрыНастроекПодключенияПоДокументам(ДокументыОперации) Экспорт
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИдентификаторыОперацийСБПc2b.ДокументОперации КАК ДокументОперации,
	|	ИдентификаторыОперацийСБПc2b.ИдентификаторМерчанта КАК ИдентификаторМерчанта,
	|	ВЫБОР
	|		КОГДА ИдентификаторыОперацийСБПc2b.ИдентификаторУчастника <> """"
	|			ТОГДА ИдентификаторыОперацийСБПc2b.ИдентификаторУчастника
	|		ИНАЧЕ ИдентификаторыОперацийСБПc2b.НастройкаПодключения.ИдентификаторУчастника
	|	КОНЕЦ КАК ИдентификаторУчастника,
	|	ИдентификаторыОперацийСБПc2b.НастройкаПодключения.Ссылка КАК НастройкаПодключения,
	|	ИдентификаторыОперацийСБПc2b.НастройкаПодключения.Используется КАК Используется,
	|	ЕСТЬNULL(НастройкиУчастниковСБП.ТипАутентификации, ""UNKNOW"") КАК ТипАутентификации,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(НастройкиУчастниковСБП.ПеренаправлениеПоСсылке, ЛОЖЬ)
	|			ТОГДА ИдентификаторыОперацийСБПc2b.НастройкаПодключения.СсылкаПеренаправления
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК СсылкаПеренаправления
	|ИЗ
	|	РегистрСведений.ИдентификаторыОперацийСБПc2b КАК ИдентификаторыОперацийСБПc2b
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчастниковСБП КАК НастройкиУчастниковСБП
	|		ПО (ВЫБОР
	|				КОГДА ИдентификаторыОперацийСБПc2b.ИдентификаторУчастника <> """"
	|					ТОГДА ИдентификаторыОперацийСБПc2b.ИдентификаторУчастника
	|				ИНАЧЕ ИдентификаторыОперацийСБПc2b.НастройкаПодключения.ИдентификаторУчастника
	|			КОНЕЦ = НастройкиУчастниковСБП.Идентификатор)
	|ГДЕ
	|	ИдентификаторыОперацийСБПc2b.ДокументОперации В(&ДокументыОперации)";
	
	Запрос.УстановитьПараметр("ДокументыОперации", ДокументыОперации);
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если ВыборкаДетальныеЗаписи.ИдентификаторУчастника = СистемаБыстрыхПлатежейКлиентСервер.ИдентификаторНеизвестногоУчастника() Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не определен идентификатор участника Системы быстрых платежей для мерчанта %1.
					|Для продолжения работы необходимо перейти к настройкам подключения и выбрать участника Системы быстрых платежей.'"),
				ВыборкаДетальныеЗаписи.ИдентификаторМерчанта);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ИдентификаторУчастника) Тогда
			СистемаБыстрыхПлатежейСлужебный.УстановитьИдентификаторУчастникаСБП();
		КонецЕсли;
		
		ПараметрыНастройкиПодключения = Новый Структура;
		ПараметрыНастройкиПодключения.Вставить("ИдентификаторМерчанта", ВыборкаДетальныеЗаписи.ИдентификаторМерчанта);
		ПараметрыНастройкиПодключения.Вставить("ИдентификаторУчастника", ВыборкаДетальныеЗаписи.ИдентификаторУчастника);
		ПараметрыНастройкиПодключения.Вставить("НастройкаПодключения", ВыборкаДетальныеЗаписи.НастройкаПодключения);
		ПараметрыНастройкиПодключения.Вставить("Используется", ВыборкаДетальныеЗаписи.Используется);
		ПараметрыНастройкиПодключения.Вставить("ТипАутентификации", ВыборкаДетальныеЗаписи.ТипАутентификации);
		ПараметрыНастройкиПодключения.Вставить("СсылкаПеренаправления", ВыборкаДетальныеЗаписи.СсылкаПеренаправления);
		
		Результат.Вставить(ВыборкаДетальныеЗаписи.ДокументОперации, ПараметрыНастройкиПодключения);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПрочиеСлужебныеПроцедурыФункцииПрикладныхОпераций

// Проверяет права на вызов прикладных операций Системы быстрых платежей
// в случае отсутствия прав, вызывается исключение.
//
Процедура ПроверитьПраваНаВыполнениеОперации() Экспорт
	
	Если Не ПереводыСБПc2b.ПереводыСБПДоступны() Тогда
		ВызватьИсключение НСтр("ru = 'Нарушение прав доступа. Пользователю запрещено выполнение операций в Системе быстрых платежей.
			|Обратитесь к администратору.'");
	КонецЕсли;
	
КонецПроцедуры

// Определяет идентификатор поставляемых данных.
//
// Возвращаемое значение:
//  Строка - идентификатор поставляемых данных.
//
Функция ВидПоставляемыхДанныхМакетыСБП()
	
	Возврат "SBPTemplates";
	
КонецФункции

// Возвращает данные оплат по документу основанию платежа.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииСБП - документ операции;
//
// Возвращаемое значение:
//  Структура - данные оплат по документу в Системе быстрых платежей:
//    * ДокументОснование - ОпределяемыйТип.ДокументОперацииСБП - документ,
//      который отражает продажу в информационной базе;
//    * Сумма - Число - сумма выполненных оплат по документу;
//    * ДанныеОпераций - Массив Из Структура - содержит перечень данных оплат по документу основанию:
//        ** ДокументОперации - ОпределяемыйТип.ДокументОперацииСБП - документ операции в СБП
//        ** СуммаОперации - Число - Сумма оплаты в СБП
//        ** СтатусОперации - Строка - текущее состояние операции оплаты. Возможные значения:
//           - "Выполняется" - подтверждение оплаты не получено;
//           - "Отменена" - оплата по ранее сформированному QR-коду невозможна;
//           - "Выполнена" - участник СБП подтвердил оплату;
//           - "Отклонена" - оплата по ранее сформированному QR-коду невозможна;
//           - "Ошибка" - неизвестный статус операции.
//        ** ДатаОперации - Дата - фактическая дата оплаты в UTC;
//        ** ИдентификаторОперации - Строка - идентификатор выполненной операции;
//        ** ИдентификаторОплаты - Строка - идентификатор оплаты;
//        ** Оплата - Булево - если Истина, была выполнена оплата.
//
Функция ОперацииПоДокументу(ДокументОперации) Экспорт
	
	СуммаВыполненныхОплат = 0;
	ДанныеОпераций        = Новый Массив;
	
	ДанныеОперацийПоДокументу = Новый Структура;
	ДанныеОперацийПоДокументу.Вставить("ДокументОснование", Неопределено);
	ДанныеОперацийПоДокументу.Вставить("Сумма",             0);
	ДанныеОперацийПоДокументу.Вставить("ДанныеОпераций",    Новый Массив);
	
	НастройкиПодключенияПрограммы = СистемаБыстрыхПлатежейСлужебный.НастройкиПодключенияПрограммы();
	
	Если НастройкиПодключенияПрограммы.c2b.ИспользоватьЧастичныеОплаты
		И ТипЗнч(ДокументОперации) <> Тип("ДокументСсылка.ПлатежнаяСсылкаСБПc2b") Тогда
	
		ДанныеЧастичныхОплат = Документы.ПлатежнаяСсылкаСБПc2b.ПолучитьДанныеЧастичныхОплат(ДокументОперации);
		
		Для Каждого ЧастичнаяОплата Из ДанныеЧастичныхОплат Цикл
			
			РезультатПолученияСтатуса = ПолучитьСтатусОперацииПоИдентификатору(
				ЧастичнаяОплата.СтатусОперации);
			
			ОперацияСБП = НовыйОписаниеОперации();
			ОперацияСБП.ДокументОперации = ЧастичнаяОплата.Ссылка;
			ОперацияСБП.СуммаОперации    = ЧастичнаяОплата.Сумма;
			ОперацияСБП.СтатусОперации   = РезультатПолученияСтатуса.СтатусОперации;
			ОперацияСБП.Оплата           = Истина;
			
			ДанныеОперации = РегистрыСведений.ИдентификаторыОперацийСБПc2b.ДанныеОперации(
				ЧастичнаяОплата.Ссылка);
			
			Если ДанныеОперации <> Неопределено Тогда
				ОперацияСБП.ДатаОперации          = ДанныеОперации.ДатаОперации;
				ОперацияСБП.ИдентификаторОперации = ДанныеОперации.ИдентификаторОперации;
				ОперацияСБП.ИдентификаторОплаты   = ДанныеОперации.ИдентификаторОплаты;
			КонецЕсли;
			
			ДанныеОпераций.Добавить(ОперацияСБП);
			
			Если ЧастичнаяОплата.СтатусОперации = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаВыполнена() Тогда
				СуммаВыполненныхОплат = СуммаВыполненныхОплат + ЧастичнаяОплата.Сумма;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДанныеОперации = РегистрыСведений.ИдентификаторыОперацийСБПc2b.ДанныеОперации(ДокументОперации);
	
	Если ДанныеОперации <> Неопределено Тогда
		
		РезультатПолученияСтатуса = ПолучитьСтатусОперацииПоИдентификатору(ДанныеОперации.СтатусОперации);
		
		ОперацияСБП = НовыйОписаниеОперации();
		ОперацияСБП.ДокументОперации      = ДокументОперации;
		ОперацияСБП.СуммаОперации         = ДанныеОперации.СуммаОперации;
		ОперацияСБП.СтатусОперации        = РезультатПолученияСтатуса.СтатусОперации;
		ОперацияСБП.ДатаОперации          = ДанныеОперации.ДатаОперации;
		ОперацияСБП.ИдентификаторОперации = ДанныеОперации.ИдентификаторОперации;
		ОперацияСБП.ИдентификаторОплаты   = ДанныеОперации.ИдентификаторОплаты;
		ОперацияСБП.Оплата                = ДанныеОперации.Оплата;
		
		Если ДанныеОперации.СтатусОперации = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаВыполнена() Тогда
			СуммаВыполненныхОплат = СуммаВыполненныхОплат + ДанныеОперации.СуммаОперации;
		КонецЕсли;
		
		ДанныеОпераций.Добавить(ОперацияСБП);
		
	КонецЕсли;
	
	Если ТипЗнч(ДокументОперации) = Тип("ДокументСсылка.ПлатежнаяСсылкаСБПc2b") Тогда
		ПараметрыОплатыПлатежнойСсылки = Документы.ПлатежнаяСсылкаСБПc2b.ПараметрыОплатыПлатежнойСсылки(ДокументОперации);
		ДанныеОперацийПоДокументу.ДокументОснование = ПараметрыОплатыПлатежнойСсылки.ДокументОснование;
	Иначе
		ДанныеОперацийПоДокументу.ДокументОснование = ДокументОперации;
	КонецЕсли;
	
	ДанныеОперацийПоДокументу.Сумма          = СуммаВыполненныхОплат;
	ДанныеОперацийПоДокументу.ДанныеОпераций = ДанныеОпераций;
	
	Возврат ДанныеОперацийПоДокументу;
	
КонецФункции

// Создает описание операции СБП.
//
// Возвращаемое значение:
//  Структура - описание операции СБП:
//    * ДокументОперации - ОпределяемыйТип.ДокументОперацииСБП, Документ.ПлатежнаяСсылкаСБПc2b - документ операции СБП.
//    * СуммаОперации - Число - сумма операции СБП.
//    * СтатусОперации - Строка - статус операции СБП.
//
Функция НовыйОписаниеОперации()
	
	Операция = Новый Структура;
	Операция.Вставить("ДокументОперации",      Неопределено);
	Операция.Вставить("СуммаОперации",         0);
	Операция.Вставить("СтатусОперации",        "");
	Операция.Вставить("ДатаОперации",          Дата(1, 1, 1));
	Операция.Вставить("ИдентификаторОперации", "");
	Операция.Вставить("ИдентификаторОплаты",   "");
	Операция.Вставить("Оплата",                Ложь); 
	
	Возврат Операция;
	
КонецФункции

// Определяет статус операции по ее идентфикатору
//
// Параметры:
//  ИдентификаторСтатусаОперации - Строка - идентификатор статуса операции;
//
// Возвращаемое значение:
//  Структура - результат создания динамической ссылки в Системе быстрых платежей:
//    * СтатусОперации - Строка - текущее состояние операции оплаты. Возможные значения:
//      - "Выполняется" - подтверждение оплаты не получено;
//      - "Отменена" - оплата по ранее сформированному QR-коду невозможна;
//      - "Выполнена" - участник СБП подтвердил оплату;
//      - "Отклонена" - оплата по ранее сформированному QR-коду невозможна;
//      - "Ошибка" - неизвестный статус операции.
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом:
//        - <Пустая строка> - статус успешно определен;
//        - "НеизвестныйСтатус" - неизвестный идентификатор статуса;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//
Функция ПолучитьСтатусОперацииПоИдентификатору(ИдентификаторСтатусаОперации) Экспорт
	
	РезультатОперации = Новый Структура;
	РезультатОперации.Вставить("СтатусОперации", Неопределено);
	РезультатОперации.Вставить("КодОшибки", "");
	РезультатОперации.Вставить("СообщениеОбОшибке", "");
	
	Если ИдентификаторСтатусаОперации = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаВПроцессе() Тогда
		РезультатОперации.СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииВыполняется();
	ИначеЕсли ИдентификаторСтатусаОперации = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаВыполнена() Тогда
		РезультатОперации.СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииВыполнена();
	ИначеЕсли ИдентификаторСтатусаОперации = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаОтменена() Тогда
		РезультатОперации.СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииОтменена();
	ИначеЕсли ИдентификаторСтатусаОперации = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаОтклонена() Тогда
		РезультатОперации.СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииОтклонена();
	Иначе
		РезультатОперации.КодОшибки = "НеизвестныйСтатус";
		РезультатОперации.СообщениеОбОшибке = НСтр("ru = 'Не удалось определить статус операции.'");
		РезультатОперации.СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииОшибка();
	КонецЕсли;
	
	Возврат РезультатОперации;
	
КонецФункции

// Определяет идентификатор статуса операции
//
// Параметры:
//  СтатусОпераций - Строка - статус операции.
//    Список статусов:
//      см. СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииВыполнена - операция успешно выполнена.
//      см. СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииВыполняется - операция выполняется.
//      см. СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииОтклонена - операция отклонена.
//
// Возвращаемое значение:
//  Структура - результат создания динамической ссылки в Системе быстрых платежей:
//    * СтатусОперации - Строка - текущее состояние операции оплаты. Возможные значения:
//      - "Выполняется" - подтверждение оплаты не получено;
//      - "Отменена" - оплата по ранее сформированному QR-коду невозможна;
//      - "Выполнена" - участник СБП подтвердил оплату;
//      - "Отклонена" - оплата по ранее сформированному QR-коду невозможна;
//      - "Ошибка" - неизвестный статус операции.
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом:
//        - <Пустая строка> - статус успешно определен;
//        - "НеизвестныйСтатус" - неизвестный идентификатор статуса;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//
Функция ПолучитьИдентификаторПоСтатусуОперации(ИдентификаторСтатусаОперации) Экспорт
	
	РезультатОперации = Новый Структура;
	РезультатОперации.Вставить("СтатусОперации", Неопределено);
	РезультатОперации.Вставить("КодОшибки", "");
	РезультатОперации.Вставить("СообщениеОбОшибке", "");

	Если ИдентификаторСтатусаОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииВыполняется() Тогда
		РезультатОперации.СтатусОперации = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаВПроцессе();
	ИначеЕсли ИдентификаторСтатусаОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииВыполнена() Тогда
		РезультатОперации.СтатусОперации = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаВыполнена();
	ИначеЕсли ИдентификаторСтатусаОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииОтклонена() Тогда
		РезультатОперации.СтатусОперации = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаОтклонена();
	Иначе
		РезультатОперации.КодОшибки = "НеизвестныйСтатус";
		РезультатОперации.СообщениеОбОшибке = НСтр("ru = 'Не удалось определить статус операции.'");
	КонецЕсли;
	
	Возврат РезультатОперации;
	
КонецФункции

// Производит валидацию общих параметров оплаты.
//
// Параметры:
//  Документ - ОпределяемыйТип.ДокументОперацииСБП - документ, который отражает
//    операцию в информационной базе;
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей - настройка выполнения оплаты;
//  ПараметрыНастройкиПодключения - Структура - см. СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения;
//  РезультатОперации  - Структура - результат создания заказа на оплату в Системе быстрых платежей:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом:
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Процедура ПроверитьОбщиеНастройкиПодключения(
		Документ,
		НастройкаПодключения,
		ПараметрыНастройкиПодключения,
		РезультатОперации) Экспорт
	
	Если Не ЗначениеЗаполнено(Документ) Тогда
		
		РезультатОперации.КодОшибки          = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйФорматЗапроса();
		РезультатОперации.СообщениеОбОшибке  = НСтр("ru = 'Документ для выполнения операции неопределен. Обратитесь к администратору.'");
		РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Для выполнения операции необходимо записать документ.'");
		
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
	КонецЕсли;
	
	ПроверитьОбщиеНастройкиПодключенияБезДокументаОперации(
		НастройкаПодключения,
		ПараметрыНастройкиПодключения,
		РезультатОперации);
	
КонецПроцедуры

// Производит валидацию общих параметров оплаты.
//
// Параметры:
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей - настройка выполнения оплаты;
//  ПараметрыНастройкиПодключения - Структура - см. СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения;
//  РезультатОперации  - Структура - результат создания заказа на оплату в Системе быстрых платежей:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом:
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Процедура ПроверитьОбщиеНастройкиПодключенияБезДокументаОперации(
		НастройкаПодключения,
		ПараметрыНастройкиПодключения,
		РезультатОперации) Экспорт
	
	Если Не ЗначениеЗаполнено(НастройкаПодключения) Тогда
		
		РезультатОперации.КодОшибки          = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйФорматЗапроса();
		РезультатОперации.СообщениеОбОшибке  = НСтр("ru = 'Не выполнена настройка подключения к Системе быстрых платежей. Обратитесь к администратору.'");
		РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Для выполнения операции в Системе быстрых платежей необходимо выполнить настройку подключения.'");
		
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
	КонецЕсли;
	
	Если Не ПараметрыНастройкиПодключения.Используется Тогда
		
		РезультатОперации.КодОшибки          = "ИнтеграцияНеИспользуется";
		РезультатОперации.СообщениеОбОшибке  = НСтр("ru = 'Настройка подключения не используется. Обратитесь к администратору.'");
		РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Настройка подключения не используется.'");
		
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
