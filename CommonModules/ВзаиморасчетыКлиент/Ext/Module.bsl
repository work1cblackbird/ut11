
#Область ПрограммныйИнтерфейс

#Область ОбщийПрограммныйИнтерфейс

//Сообщает о перезаполнении этапов оплаты, изменении объекта расчетов,
//Оповещает об изменении накладной по заказу формы списков заказов.
//
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма документа/справочника.
// 
Процедура ФормаПослеЗаписи(Форма) Экспорт
	ДополненныеПараметрыМеханизма = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "Взаиморасчеты");
	Если ДополненныеПараметрыМеханизма.ОповеститьОЗаполненииЭтапов Тогда
		ЭтапыОплатыКлиент.ОповеститьОбОкончанииЗаполненияЭтаповГрафикаОплаты();
	КонецЕсли;
	Если ДополненныеПараметрыМеханизма.ОповеститьОбИзмененииОбъектаРасчетов Тогда
		ОповеститьОбИзменении(ДополненныеПараметрыМеханизма.ИзмененныйОбъектРасчетов);
	КонецЕсли;
	СписокЗаказов = Новый Массив;
	Для Каждого СтруктураПараметров Из ДополненныеПараметрыМеханизма.МассивПараметров Цикл
		Если СтруктураПараметров.ЭтоПродажаЗакупка Тогда
			ТЧ = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ПутьКДаннымТЧ);
			Если ЗначениеЗаполнено(ТЧ) И ЗначениеЗаполнено(СтруктураПараметров.ИмяРеквизитаТЧЗаказ) Тогда
				Для Каждого СтрокаТЧ Из ТЧ Цикл
					СписокЗаказов.Добавить(СтрокаТЧ[СтруктураПараметров.ИмяРеквизитаТЧЗаказ]);
				КонецЦикла;
				сч = 0;
				Пока сч < СписокЗаказов.Количество() Цикл
					Если Не ЗначениеЗаполнено(СписокЗаказов[сч]) Тогда
						СписокЗаказов.Удалить(сч);
					Иначе
						сч= сч + 1;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	СписокЗаказов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СписокЗаказов);
	Если СписокЗаказов.Количество() = 1 Тогда
		ОповеститьОбИзменении(СписокЗаказов[0]);
	ИначеЕсли СписокЗаказов.Количество() > 1 Тогда 
		ОповеститьОбИзменении(ТипЗнч(СписокЗаказов[0]));
	КонецЕсли;
КонецПроцедуры

//Оповещает о выборе при создании объекта расчетов
//
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма документа/справочника.
// 
Процедура ФормаПриЗакрытии(Форма)Экспорт
	ДополненныеПараметрыМеханизма = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "Взаиморасчеты");
	Для Каждого СтруктураПараметров Из ДополненныеПараметрыМеханизма.МассивПараметров Цикл
		СтруктураВыбора = Новый Структура;
		СтруктураВыбора.Вставить("ОбъектРасчетов",
			ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ОбъектРасчетов));
		СтруктураВыбора.Вставить("ПорядокРасчетов",
			ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ПорядокРасчетов));
		СтруктураВыбора.Вставить("Договор",
			ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Договор));
		СтруктураВыбора.Вставить("Объект",
			ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Ссылка));
		СтруктураВыбора.Вставить("ВалютаВзаиморасчетов",
			ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ВалютаВзаиморасчетов));
		СтруктураВыбора.Вставить("Контрагент",
			ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Контрагент));
		СтруктураВыбора.Вставить("Партнер",
			ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Партнер));
		СтруктураВыбора.Вставить("Дата",
			ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Дата));
		Форма.ОповеститьОВыборе(СтруктураВыбора);
		Прервать;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ГрафикПлановойОплаты

// Открывает форму редактирования правил оплаты.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма документа/справочника.
// 	Элемент - ПолеФормы - Гиперссылка открытия формы правил оплаты, связанная с конкретным набором параметров.
// 	СтандартнаяОбработка - Булево - Признак стандартной обработки события.
// 	Оповещение - ОписаниеОповещения - Описание оповещения формы, которое необходимо выполнить после окончания настройки.
//
Процедура НадписьЭтапыОплатыНажатие(Форма, Элемент, СтандартнаяОбработка, Оповещение = Неопределено) Экспорт
	
	Попытка
		Форма.ЗаблокироватьДанныеФормыДляРедактирования();
	Исключение
		ПоказатьПредупреждение(Неопределено, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	ПараметрыМеханизма = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "Взаиморасчеты");
	СистемныеНастройки = ПараметрыМеханизма.СистемныеНастройки;
	СтандартнаяОбработка = Ложь;
	СтруктураПараметров = ВзаиморасчетыКлиентСервер.СтруктураПараметровПоИмениЭлемента(ПараметрыМеханизма.МассивПараметров, Элемент.Имя);
	
	Если НЕ ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты) Тогда
		ВзаиморасчетыКлиентСервер.ПроверитьОбязательныеПараметры(СтруктураПараметров, "ДатаПлатежа");
	КонецЕсли;
	
	ПорядокРасчетов = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ПорядокРасчетов);
	ЭтоЗаказ        = СтруктураПараметров.ЭтоЗаказ;
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("ТолькоПросмотр",                          Форма.ТолькоПросмотр ИЛИ СтруктураПараметров.ЭтапыОплатыТолькоПросмотр);
	
	Если ЗначениеЗаполнено(СтруктураПараметров.СуммаЗалогаЗаТаруФорма) Тогда
		СуммаЗалоговойТары = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.СуммаЗалогаЗаТаруФорма);
	Иначе
		СуммаЗалоговойТары = 0;
	КонецЕсли;
	
	ПараметрыОткрытия.Вставить("СуммаЗалогаПоДокументу",                  СуммаЗалоговойТары);
	СуммаВсего = ВзаиморасчетыКлиентСервер.СуммаКОплате(Форма, СтруктураПараметров);
	ПараметрыОткрытия.Вставить("СуммаОплатыПоДокументу",                  СуммаВсего - СуммаЗалоговойТары);
	
	Если (ПорядокРасчетов = ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоДоговорамНакладным")
		ИЛИ ПорядокРасчетов = ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоЗаказамНакладным"))
		И ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа) Тогда
		ПараметрыОткрытия.Вставить("СуммаОбязательнойПредоплаты", СтруктураПараметров.СуммаРасшифровкиПлатежа);
	Иначе
		ПараметрыОткрытия.Вставить("СуммаОбязательнойПредоплаты", 0);
	КонецЕсли;
	
	ПараметрыОткрытия.Вставить("ТребуетсяЗалогЗаТару",                    СуммаЗалоговойТары <> 0);
	
	ЭтапыОплаты = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты);
	ЕстьСуммаОтклоненияМерныхТоваров = СистемныеНастройки.ИспользоватьДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров
										И ЭтапыОплаты <> Неопределено
										И ЭтапыОплаты.Количество() > 0
										И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтапыОплаты[0],"СуммаОтклоненияМерныхТоваров");
	Если ЕстьСуммаОтклоненияМерныхТоваров Тогда
		СуммаОтклоненияМерныхТоваров = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты).Итог("СуммаОтклоненияМерныхТоваров");
	Иначе
		СуммаОтклоненияМерныхТоваров = 0;
	КонецЕсли;
	ПараметрыОткрытия.Вставить("СуммаОтклоненияПоДокументу",                 СуммаОтклоненияМерныхТоваров);
	
	//реквизиты формы
	ПараметрыОткрытия.Вставить("УникальныйИдентификатор",                 Форма.УникальныйИдентификатор);
	ПараметрыОткрытия.Вставить("Ключ",                                    Форма.Объект.Ссылка);
	ПараметрыОткрытия.Вставить("ПараметрыВыбораРеквизитов",               СтруктураПараметров.ПараметрыВыбораРеквизитов);
	
	//реквизиты объекта
	ПараметрыОткрытия.Вставить("Партнер",                                 ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Партнер));
	ПараметрыОткрытия.Вставить("Соглашение",                              ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Соглашение));
	ПараметрыОткрытия.Вставить("Договор",                                 ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Договор));
	ПараметрыОткрытия.Вставить("Дата",                                    ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Дата));
	ПараметрыОткрытия.Вставить("Валюта",                                  ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ВалютаДокумента));
	ПараметрыОткрытия.Вставить("ГрафикОплаты",                            ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ГрафикОплаты));
	ПараметрыОткрытия.Вставить("ФормаОплаты",                             ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ФормаОплаты));
	ПараметрыОткрытия.Вставить("Касса",                                   ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Касса));
	ПараметрыОткрытия.Вставить("БанковскийСчет",                          ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.БанковскийСчетОрганизации));
	ПараметрыОткрытия.Вставить("Организация",                             ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Организация));
	ПараметрыОткрытия.Вставить("ИдентификаторПлатежа",                    ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ИдентификаторПлатежа));

	ПараметрыОткрытия.Вставить("ПорядокРасчетов",                         ПорядокРасчетов);
	ПараметрыОткрытия.Вставить("НаправлениеДеятельности",                 ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.НаправлениеДеятельности));
	ПараметрыОткрытия.Вставить("ОплатаВВалюте",                           ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ОплатаВВалюте));
	ПараметрыОткрытия.Вставить("ДатаПлатежа",                             ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ДатаПлатежа));
	
	ПутьКДаннымВалютаВзаиморасчетов = ?(СтруктураПараметров.ВалютаВзаиморасчетов = "", СтруктураПараметров.ВалютаДокумента, СтруктураПараметров.ВалютаВзаиморасчетов);
	ПараметрыОткрытия.Вставить("ВалютаВзаиморасчетов",                    ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, ПутьКДаннымВалютаВзаиморасчетов));
	
	//настройки
	НакладнаяПоЗаказам = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.НакладнаяПоЗаказам,, Ложь);
	ПараметрыОткрытия.Вставить("НакладнаяПоЗаказам",                      НакладнаяПоЗаказам);
	
	ПараметрыОткрытия.Вставить("ЭтоЗаказ",                                ЭтоЗаказ);
	ПараметрыОткрытия.Вставить("ИмяПоляЗаказ",                            СтруктураПараметров.ИмяРеквизитаТЧЗаказ);
	ПараметрыОткрытия.Вставить("ЗаказКакСчет",                            СтруктураПараметров.ЗаказКакСчет);
	
	Если ЭтоЗаказ Тогда
		ПараметрыОткрытия.Вставить("ДатаСогласования",                    ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ДатаСогласования));
		ПараметрыОткрытия.Вставить("ДатаЗаказа",                          ПараметрыОткрытия.Дата);
	КонецЕсли;
	
	Если СтруктураПараметров.ДокументРасчетовСКлиентами
		И СтруктураПараметров.ЭтоПродажаЗакупка Тогда
		ПараметрыОткрытия.Вставить("ДатаОтгрузки",                        ПараметрыОткрытия.Дата);
		ПараметрыОткрытия.Вставить("НесколькоДатОтгрузки",                Ложь);
	ИначеЕсли СтрЧислоВхождений(СтруктураПараметров.ДатаОтгрузки, ".") > 1 Тогда
		ПараметрыОткрытия.Вставить("ДатаОтгрузки",                        Дата(1,1,1));
		ПараметрыОткрытия.Вставить("НесколькоДатОтгрузки",                Истина);
	Иначе
		ПараметрыОткрытия.Вставить("ДатаОтгрузки",                        ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ДатаОтгрузки));
		ПараметрыОткрытия.Вставить("НесколькоДатОтгрузки",                Ложь);
	КонецЕсли;
	
	Если СтруктураПараметров.ДокументРасчетовСПоставщиками Тогда
		ПараметрыОткрытия.Вставить(
			"ОтключитьЗаполнениеПоПредыдущимЗаказам",
			ТипЗнч(Форма.Объект.Ссылка) <> Тип("ДокументСсылка.ЗаказПоставщику"));
	КонецЕсли;
	
	ПараметрыОткрытия.Вставить("ДатаПереходаПраваСобственности",          ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ДатаПереходаПраваСобственности));
	ПараметрыОткрытия.Вставить("РежимСамообслуживания",                   ОбщегоНазначенияУТКлиентСервер.АвторизованВнешнийПользователь());
	ПараметрыОткрытия.Вставить("АдресВоВременномХранилище",               СтруктураПараметров.АдресЭтапыОплаты);
	ПараметрыОткрытия.Вставить("АдресСуммПоЗаказам",                      СтруктураПараметров.АдресСуммПоЗаказам);
	ПараметрыОткрытия.Вставить("ЗаданГрафикИсполнения",                   СтруктураПараметров.ЗаданГрафикИсполнения);
	ПараметрыОткрытия.Вставить("ГрафикИсполненияДоговора",                СтруктураПараметров.ГрафикИсполненияДоговора);
	ПараметрыОткрытия.Вставить("СпециальныеЗаголовкиЭтаповДляВозврата", ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента"));
	ПараметрыОткрытия.Вставить("НетКонтроляПредоплаты",                   СтруктураПараметров.НетКонтроляПредоплаты);
	ПараметрыОткрытия.Вставить("ЕстьДатаПереходаПраваСобственности",      СтруктураПараметров.ЕстьДатаПереходаПраваСобственности);
	ПараметрыОткрытия.Вставить("ЕстьРучныеИзмененияГрафикаОплат",         СтруктураПараметров.ЕстьРучныеИзмененияГрафикаОплат);
	
	Если  ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.КорректировкаРеализации")
		ИЛИ ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.КорректировкаПриобретения") Тогда
		ПараметрыОткрытия.Вставить("ДоступныеПорядкиРасчетов", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыОткрытия.ПорядокРасчетов));
		ПараметрыОткрытия.Вставить("ЭтоКорректировка", Истина);
	ИначеЕсли ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.ОтчетКомиссионера")
			И ЗначениеЗаполнено(ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ДоговорКомиссионера)) Тогда
		СписокПорядков = Новый СписокЗначений;
		СписокПорядков.Добавить(ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов"));
		СписокПорядков.Добавить(ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоЗаказам"), НСтр("ru = 'По отчетам комиссионера/реализациям через комиссионера'"));
		ПараметрыОткрытия.Вставить("ДоступныеПорядкиРасчетов", СписокПорядков);
	ИначеЕсли ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
			И ЗначениеЗаполнено(ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ДоговорКомиссионера)) Тогда
		СписокПорядков = Новый СписокЗначений;
		Если СтруктураПараметров.ВестиРасчетыЧерезКонечныхПокупателей Тогда
			СписокПорядков.Добавить(ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов"));
		Иначе
			СписокПорядков.Добавить(ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов"));
			СписокПорядков.Добавить(ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоДоговорамНакладным"), НСтр("ru = 'Аванс по договорам, долг по накладным (только реализация)'"));
			СписокПорядков.Добавить(ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоЗаказам"), НСтр("ru = 'По отчетам комиссионера/реализациям через комиссионера'"));
		КонецЕсли;
		ПараметрыОткрытия.Вставить("ДоступныеПорядкиРасчетов", СписокПорядков);
	
	ИначеЕсли ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями")
		Или ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями")
		Или ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями")
		Или ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациямиОСписании") Тогда
		
		Если Форма.Объект.РасчетыЧерезОтдельногоКонтрагента Тогда
			
			ПараметрыОткрытия.Вставить(
				"ДоступныеПорядкиРасчетов",
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыОткрытия.ПорядокРасчетов));
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ДополнительныеПараметры.Вставить("СтруктураПараметров", СтруктураПараметров);
	ДополнительныеПараметры.Вставить("ОповещениеПослеЗавершения", Оповещение);
	ДополнительныеПараметры.Вставить("ПараметрыМеханизма", ПараметрыМеханизма);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("НадписьЭтапыОплатыНажатиеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если СтруктураПараметров.ДокументРасчетовСКлиентами Тогда
		ОткрытьФорму("ОбщаяФорма.ЭтапыОплатыКлиентом", 
			ПараметрыОткрытия,
			Форма,,,,
			ОповещениеОЗакрытии,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ОткрытьФорму("ОбщаяФорма.ЭтапыОплатыПоставщику", 
			ПараметрыОткрытия,
			Форма,,,,
			ОповещениеОЗакрытии,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

// Служебный обработчик закрытия формы правил оплаты.
Процедура НадписьЭтапыОплатыНажатиеЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда 
		Если ДополнительныеПараметры.ОповещениеПослеЗавершения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеЗавершения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Форма               = ДополнительныеПараметры.Форма;
	СтруктураПараметров = ДополнительныеПараметры.СтруктураПараметров;
	ПараметрыМеханизма  = ДополнительныеПараметры.ПараметрыМеханизма;
	
	ЭтапыОплаты    = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты); // ДанныеФормыКоллекция
	СуммаДокумента = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.СуммаДокументаФорма);
	ДатаПлатежа    = ОбщегоНазначенияУТКлиентСервер.ДанныеДляПрисвоения(Форма, СтруктураПараметров.ДатаПлатежа);
	
	//Реквизиты шапки
	МассивПолей = Новый Массив();
	МассивПолей.Добавить("Касса");
	МассивПолей.Добавить("БанковскийСчетОрганизации");
	МассивПолей.Добавить("ОплатаВВалюте");
	МассивПолей.Добавить("ФормаОплаты");
	МассивПолей.Добавить("ПорядокРасчетов");
	МассивПолей.Добавить("ДатаПлатежа");
	МассивПолей.Добавить("ГрафикОплаты");
	СтарыеЗначенияИзмененныхРеквизитов = ПрисвоитьНовыеЗначения(Форма, СтруктураПараметров, РезультатЗакрытия, МассивПолей);
	СтруктураПараметров.ЕстьРучныеИзмененияГрафикаОплат = РезультатЗакрытия.ЕстьРучныеИзмененияГрафикаОплат;
	
	//Этапы оплаты или дата платежа
	Если ЭтапыОплаты <> Неопределено Тогда
		Если РезультатЗакрытия.Свойство("АдресВоВременномХранилище") Тогда
			СтруктураПараметров.АдресЭтапыОплаты = РезультатЗакрытия.АдресВоВременномХранилище;
		ИначеЕсли РезультатЗакрытия.Свойство("ДатаПлатежа") Тогда
			НовСтр = ЭтапыОплаты.Добавить();
			НовСтр.ДатаПлатежа    = РезультатЗакрытия.ДатаПлатежа;
			НовСтр.СуммаПлатежа   = СуммаДокумента;
			НовСтр.ПроцентПлатежа = 100;
		КонецЕсли;
		ИмяТЧ = Прав(СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты, СтрДлина(СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты) - Найти(СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты,"."));
		СтарыеЗначенияИзмененныхРеквизитов.Вставить(ИмяТЧ, Неопределено);
	Иначе
		ИмяСвойстваДатаПлатежа = Прав(СтруктураПараметров.ДатаПлатежа,СтрДлина(СтруктураПараметров.ДатаПлатежа) - СтрНайти(СтруктураПараметров.ДатаПлатежа, "."));
		РеквизитДатаПлатежа = ДатаПлатежа;
		РеквизитДатаПлатежа.Данные[РеквизитДатаПлатежа.Имя] = РезультатЗакрытия.ДатаПлатежа;
		Если РезультатЗакрытия.Свойство("Сдвиг") Тогда
			СтруктураПараметров.СдвигДатыПлатежа = РезультатЗакрытия.Сдвиг;
		КонецЕсли;
	КонецЕсли;
	
	//Стандартный возврат в форму
	РезультатыОбработки = Новый Структура();
	РезультатыОбработки.Вставить("СтарыеЗначенияИзмененныхРеквизитов", СтарыеЗначенияИзмененныхРеквизитов);
	
	ВзаиморасчетыКлиентСервер.УстановитьВидимостьЗачетаОплаты(Форма, СтруктураПараметров);
	
	Форма.Модифицированность = Истина;
	
	ОбщегоНазначенияУТКлиент.СохранитьДанныеМеханизмаВКэшФормы(Форма, "Взаиморасчеты", ПараметрыМеханизма);
	
	Если ДополнительныеПараметры.ОповещениеПослеЗавершения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеЗавершения, РезультатыОбработки);
	КонецЕсли;
	
КонецПроцедуры

// Служебная процедура, заполняет текст гиперссылки правил оплаты 
// 
// Параметры:
//	Форма       - ФормаКлиентскогоПриложения - Договор, указанный в документе:
//	 * Элементы - ЭлементыФормы - элементы вызывающей формы
//	СтруктураПараметров - см. ВзаиморасчетыСервер.ПараметрыМеханизма
//	СистемныеНастройки  - Структура - Системные настройки из дополненных параметров, если уже получены.
//
Процедура ОбновитьТекстГиперссылкиЭтапыОплаты(Форма, СтруктураПараметров = Неопределено, СистемныеНастройки = Неопределено) Экспорт
	
	Если СтруктураПараметров <> Неопределено И СистемныеНастройки <> Неопределено Тогда
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(СтруктураПараметров);
	Иначе
		ДополненныеПараметрыМеханизма = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "Взаиморасчеты");
		МассивПараметров = ДополненныеПараметрыМеханизма.МассивПараметров; // Массив из см. ВзаиморасчетыСервер.ПараметрыМеханизма
		СистемныеНастройки = ДополненныеПараметрыМеханизма.СистемныеНастройки;
	КонецЕсли;
	
	Для Каждого СтруктураПараметров Из МассивПараметров Цикл
		
		Если Не ЗначениеЗаполнено(СтруктураПараметров.НадписьЭтапыОплаты) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ СтруктураПараметров.ИзменяетПланОплаты И НЕ СтруктураПараметров.ЗаказКакСчет Тогда
			Форма.Элементы[СтруктураПараметров.ЭлементыФормы.НадписьЭтапы].Видимость = Ложь;
		Иначе
			Форма.Элементы[СтруктураПараметров.ЭлементыФормы.НадписьЭтапы].Видимость = Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты) Тогда
			ВзаиморасчетыКлиентСервер.ПроверитьОбязательныеПараметры(СтруктураПараметров, "ДатаПлатежа");
		КонецЕсли;
		
		Шаблон = ВзаиморасчетыКлиентСервер.ФорматируемаяСтрокаЭтаповОплаты(Форма, СтруктураПараметров, СистемныеНастройки);
		ФорматированнаяСтрока = СтроковыеФункцииКлиент.ФорматированнаяСтрока(Шаблон);
		
		Реквизит = ОбщегоНазначенияУТКлиентСервер.ДанныеДляПрисвоения(Форма, СтруктураПараметров.НадписьЭтапыОплаты);
		Реквизит.Данные[Реквизит.Имя] = ФорматированнаяСтрока;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗачетОплатыРасшифровкаПлатежа

// Открывает форму подбора объектов расчетов в табличную часть Расшифровка платежа платежных документов.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма документа.
// 	ИмяЭлемента - Строка - Имя элемента, по нажатию на который вызван подбор.
// 	Оповещение - ОписаниеОповещения - Описание оповещения формы, которое необходимо выполнить после закрытия формы редактирования расшифровки.
// 	ДополнительныеОтборы - Соответствие из КлючИЗначение:
// 		Ключ - имя реквизита справочника Объекты расчетов, 
// 		Значение - правое значение отбора.
//
Процедура ПодборВРасшифровкуПлатежа(Форма, ИмяЭлемента, Оповещение = Неопределено, ДополнительныеОтборы = Неопределено) Экспорт 
	
	Попытка
		Форма.ЗаблокироватьДанныеФормыДляРедактирования();
	Исключение
		ПоказатьПредупреждение(Неопределено, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	ПараметрыМеханизма = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "Взаиморасчеты");
	СтруктураПараметров = ВзаиморасчетыКлиентСервер.СтруктураПараметровПоИмениЭлемента(ПараметрыМеханизма.МассивПараметров, ИмяЭлемента);
	
	ПартнерПрочиеОтношения = СтруктураПараметров.ПартнерПрочиеОтношения;
	ПодборДебиторскойЗадолженности = СтруктураПараметров.ПодборДебиторскойЗадолженности;
	ПодборТолькоБезусловнойЗадолженности = СтруктураПараметров.ПодборТолькоБезусловнойЗадолженности;
	
	Контрагент           = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Контрагент);
	Ссылка               = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Ссылка);
	Организация          = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Организация);
	Валюта               = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ВалютаДокумента);
	СуммаДокумента       = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.СуммаДокумента);
	Дата                 = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Дата);
	ИдентификаторПлатежа = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ИдентификаторПлатежа);
	ТипРасчетов          = СтруктураПараметров.ТипРасчетов;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ОбъектСсылка",                          Ссылка);
	ПараметрыОткрытия.Вставить("АдресПлатежейВХранилище",               СтруктураПараметров.АдресРасшифровкаПлатежа);
	ПараметрыОткрытия.Вставить("Организация",                           Организация);
	ПараметрыОткрытия.Вставить("Контрагент",                            Контрагент);
	ПараметрыОткрытия.Вставить("ВалютаДокумента",                       Валюта);
	ПараметрыОткрытия.Вставить("СуммаДокумента",                        СуммаДокумента);
	ПараметрыОткрытия.Вставить("ДатаДокумента",                         Дата);
	ПараметрыОткрытия.Вставить("ТипРасчетов",                           ТипРасчетов);
	ПараметрыОткрытия.Вставить("ИдентификаторПлатежа",                  ИдентификаторПлатежа);
	ПараметрыОткрытия.Вставить("ПартнерПрочиеОтношения",                ПартнерПрочиеОтношения);
	ПараметрыОткрытия.Вставить("УчитыватьФилиалы",                      Истина);
	ПараметрыОткрытия.Вставить("ЗаполнятьНДСВРасшифровке",              Истина);
	ПараметрыОткрытия.Вставить("ПодборДебиторскойЗадолженности",        ПодборДебиторскойЗадолженности);
	ПараметрыОткрытия.Вставить("ПодборТолькоБезусловнойЗадолженности",  ПодборТолькоБезусловнойЗадолженности);
	ПараметрыОткрытия.Вставить("ДополнительныеОтборы",                  ДополнительныеОтборы);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("СтруктураПараметров", СтруктураПараметров);
	ДополнительныеПараметры.Вставить("ОповещениеПослеЗавершения", Оповещение);
	ДополнительныеПараметры.Вставить("ПараметрыМеханизма", ПараметрыМеханизма);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПодборВРасшифровкуПлатежаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму(
		"Справочник.ОбъектыРасчетов.Форма.ПодборОбъектовРасчетов",
		ПараметрыОткрытия, 
		Форма,,,,
		ОповещениеОЗакрытии,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Служебный обработчик закрытия формы правил оплаты.
Процедура ПодборВРасшифровкуПлатежаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда 
		Если ДополнительныеПараметры.ОповещениеПослеЗавершения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеЗавершения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Форма               = ДополнительныеПараметры.Форма;
	СтруктураПараметров = ДополнительныеПараметры.СтруктураПараметров;
	ПараметрыМеханизма  = ДополнительныеПараметры.ПараметрыМеханизма;
	
	//Этапы оплаты или дата платежа
	Если ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа) Тогда
		Если РезультатЗакрытия.Свойство("АдресПлатежейВХранилище") Тогда
			СтруктураПараметров.АдресРасшифровкаПлатежа = РезультатЗакрытия.АдресПлатежейВХранилище;
		КонецЕсли;
	КонецЕсли;
	
	//Стандартный возврат в форму
	РезультатыОбработки = Новый Структура();
	РезультатыОбработки.Вставить("Выполнена", Истина);
	
	Форма.Модифицированность = Истина;
	
	ОбщегоНазначенияУТКлиент.СохранитьДанныеМеханизмаВКэшФормы(Форма, "Взаиморасчеты", ПараметрыМеханизма);
	
	Если ДополнительныеПараметры.ОповещениеПослеЗавершения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеЗавершения, РезультатыОбработки);
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму выбора объекта расчетов по переданным отборам и настройкам.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма документа.
// 	Элемент - ПолеФормы - Поле, в котором выбирается объект расчетов или основание платежа.
// 	СтандартнаяОбработка - Булево - Признак стандартной обработки события.
// 	ВыборОснованияПлатежа - Булево - Истина если выбирается Основание платежа, Ложь - если объект расчетов.
// 	ТекущееЗначение - СправочникСсылка, ДокументСсылка - Указывается ссылка на текущий Объект расчетов или текущее Основание платежа для начального позиционирования.
// 	ДополнительныеОтборы - Соответствие из КлючИЗначение, Неопределено - дополнительный отбор по объектам расчетов.
//
Процедура ОбъектРасчетовНачалоВыбора(Форма, Элемент, СтандартнаяОбработка, ВыборОснованияПлатежа = ЛОЖЬ, ТекущееЗначение = Неопределено, ДополнительныеОтборы = Неопределено) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Попытка
		Форма.ЗаблокироватьДанныеФормыДляРедактирования();
	Исключение
		ПоказатьПредупреждение(Неопределено, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	ПараметрыМеханизма  = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "Взаиморасчеты");
	СтруктураПараметров = ПараметрыМеханизма.МассивПараметров[0]; // см. ВзаиморасчетыСервер.ПараметрыМеханизма
	
	Ссылка = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Ссылка);
	
	ТаблицаФормы = ОбщегоНазначенияУТКлиентСервер.ТаблицаФормыЭлемента(Элемент);
	ИдентификаторСтроки = Неопределено;
	Если ТаблицаФормы <> Неопределено Тогда 
		ИдентификаторСтроки = ТаблицаФормы.ТекущаяСтрока;
	КонецЕсли;
	
	Контрагент                = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Контрагент, ИдентификаторСтроки);
	Организация               = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Организация, ИдентификаторСтроки);
	
	Валюта                    = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ВалютаДокумента);
	ТипРасчетов               = СтруктураПараметров.ТипРасчетов;
	ПлатежиПо275ФЗ            = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ПлатежиПо275ФЗ, , Ложь);
	ПодборДебиторскойЗадолженности = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ПодборДебиторскойЗадолженности);
	
	Если ЗначениеЗаполнено(СтруктураПараметров.ЭлементыФормы.РасшифровкаПлатежа) Тогда
		ЭлементРасшифровкаПлатежа = Форма.Элементы[СтруктураПараметров.ЭлементыФормы.РасшифровкаПлатежа];
		Сумма = ЭлементРасшифровкаПлатежа.ТекущиеДанные.Сумма;
	Иначе
		Сумма = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.СуммаДокумента);
	КонецЕсли;
	
	ЗначенияОтбора = Новый Структура;
	ЗначенияОтбора.Вставить("ТипРасчетов", ТипРасчетов);
	ЗначенияОтбора.Вставить("Организация", Организация);
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ЗначенияОтбора.Вставить("Контрагент",  Контрагент);
	КонецЕсли;
	ЗначенияОтбора.Вставить("ПлатежиПо275ФЗ" , ПлатежиПо275ФЗ);
	
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Организации") Тогда
		ЗначенияОтбора.Вставить("Партнер", ПредопределенноеЗначение("Справочник.Партнеры.НашеПредприятие"));
	ИначеЕсли Не ЗначениеЗаполнено(Контрагент) Тогда
		Партнер = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Партнер, ИдентификаторСтроки);
		Если ТипЗнч(Партнер) = Тип("СправочникСсылка.Партнеры") Тогда
			ЗначенияОтбора.Вставить("Партнер", Партнер);
		КонецЕсли;
	КонецЕсли;
	
	Если ДополнительныеОтборы <> Неопределено Тогда
		ЗначенияОтбора.Вставить("ДополнительныеОтборы", ДополнительныеОтборы);
	КонецЕсли;
	
	НастройкиВыбора = Новый Структура;
	НастройкиВыбора.Вставить("УчитыватьФилиалы", Истина);
	НастройкиВыбора.Вставить("ВыборОснованияПлатежа", ВыборОснованияПлатежа);
	НастройкиВыбора.Вставить("РедактируемыйДокумент", Ссылка);
	НастройкиВыбора.Вставить("Валюта", Валюта);
	НастройкиВыбора.Вставить("Сумма", Сумма);
	НастройкиВыбора.Вставить("Отбор", ЗначенияОтбора);
	НастройкиВыбора.Вставить("ВернутьСтруктуру", Истина);
	НастройкиВыбора.Вставить("ПодборДебиторскойЗадолженности", ПодборДебиторскойЗадолженности);
	Если ТекущееЗначение <> Неопределено Тогда
		НастройкиВыбора.Вставить("ТекущееЗначение", ТекущееЗначение);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.ОбъектыРасчетов.Форма.ФормаВыбора", НастройкиВыбора, Элемент);
	
КонецПроцедуры

// Открывает форму редактирования расшифровки платежа документа возврата.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма документа.
// 	Элемент - ПолеФормы - Гиперссылка редактирования расшифровки платежа.
// 	Оповещение - ОписаниеОповещения - Описание оповещения формы, которое необходимо выполнить после закрытия формы редактирования расшифровки.
//
Процедура ВзаиморасчетыПоВозвратуТоваров(Форма, Элемент, Оповещение = Неопределено ) Экспорт
	
	Попытка
		Форма.ЗаблокироватьДанныеФормыДляРедактирования();
	Исключение
		ПоказатьПредупреждение(Неопределено, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	ПараметрыМеханизма = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "Взаиморасчеты");
	СтруктураПараметров = ВзаиморасчетыКлиентСервер.СтруктураПараметровПоИмениЭлемента(ПараметрыМеханизма.МассивПараметров, Элемент.Имя);
	
	Валюта               = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ВалютаДокумента);
	Дата                 = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Дата);
	Контрагент           = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Контрагент);
	Организация          = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Организация);
	Партнер              = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Партнер);
	Проведен             = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, "Объект.Проведен");
	Если ЗначениеЗаполнено(СтруктураПараметров.СуммаДокументаФорма) Тогда
		СуммаДокументаФорма  = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.СуммаДокументаФорма);
	Иначе
		ТЧ = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ПутьКДаннымТЧ);
		СуммаДокументаФорма = ТЧ.Итог(СтруктураПараметров.ИмяРеквизитаТЧСуммаСНДС);
	КонецЕсли;
	Ссылка               = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Ссылка);
	ЭтоРасчетыСКлиентами = СтруктураПараметров.ДокументРасчетовСКлиентами;
	ПартнерПрочиеОтношения = СтруктураПараметров.ПартнерПрочиеОтношения;
	ПодборТолькоБезусловнойЗадолженности = СтруктураПараметров.ПодборТолькоБезусловнойЗадолженности;
	
	СтруктураОткрытия = Новый Структура;
	СтруктураОткрытия.Вставить("Валюта", Валюта);
	СтруктураОткрытия.Вставить("Дата", Дата);
	СтруктураОткрытия.Вставить("Контрагент", Контрагент);
	СтруктураОткрытия.Вставить("Организация", Организация);
	СтруктураОткрытия.Вставить("Партнер", Партнер);
	СтруктураОткрытия.Вставить("Проведен", Проведен);
	СтруктураОткрытия.Вставить("СуммаТоваров", СуммаДокументаФорма);
	СтруктураОткрытия.Вставить("ИдентификаторВызывающейФормы", Форма.УникальныйИдентификатор);
	СтруктураОткрытия.Вставить("Документ", Ссылка);
	СтруктураОткрытия.Вставить("ЭтоРасчетыСКлиентами", ЭтоРасчетыСКлиентами);
	СтруктураОткрытия.Вставить("АдресПлатежейВХранилище", СтруктураПараметров.АдресРасшифровкаПлатежа);
	СтруктураОткрытия.Вставить("ТолькоПросмотр", Форма.ТолькоПросмотр);
	СтруктураОткрытия.Вставить("Объект", Форма.Объект);
	СтруктураОткрытия.Вставить("ПодборТолькоБезусловнойЗадолженности", ПодборТолькоБезусловнойЗадолженности);
	СтруктураОткрытия.Вставить("ПартнерПрочиеОтношения", ПартнерПрочиеОтношения);
	СтруктураОткрытия.Вставить("ИмяВызывающегоЭлемента", Элемент.Имя);
	
	ОткрытьФорму("ОбщаяФорма.ВзаиморасчетыПоВозвратуТоваров",
		СтруктураОткрытия, 
		Форма,,,,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Открывает форму помощника зачета оплат
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма документа.
// 	Элемент - ЭлементыФормы - Элемент для определения набора параметров из массива параметров.
//
Процедура ЗачетОплаты(Форма, Элемент = Неопределено) Экспорт
	
	ОчиститьСообщения();
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	
	Обработчик = Новый ОписаниеОповещения("ЗачетОплатыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если Форма.Модифицированность Тогда
		ТекстВопроса = НСтр("ru = 'Данные модифицированы.
			|Зачет оплат доступен только после записи данных.
			|Данные будут записаны.'");
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ВыполнитьОбработкуОповещения(Обработчик, КодВозвратаДиалога.Пропустить);
	КонецЕсли;
	
КонецПроцедуры

// Служебный обработчик авто подбора Объектов расчетов и Оснований платежа
//
//  Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма документа.
// 	Элемент - ЭлементыФормы - Элемент для определения набора параметров из массива параметров.
// 	Текст - Строка - Текст для поиска по строке.
// 	ДанныеВыбора - СписокЗначений - Найденные данные.
// 	СтандартнаяОбработка - Булево.
// 	ЭтоУИП - Булево - Признак того, что выполняется поиск Уникального идентификатора платежа.
// 	ЭтоОбъектРасчетов - Булево - Признак того, что выполняется поиск объекта расчетов.
//
Процедура ОбъектРасчетовОснованиеПлатежаАвтоПодбор(Форма, Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, ЭтоУИП = Ложь, ЭтоОбъектРасчетов = Ложь) Экспорт
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыМеханизма  = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "Взаиморасчеты");
		СтруктураПараметров = ВзаиморасчетыКлиентСервер.СтруктураПараметровПоИмениЭлемента(ПараметрыМеханизма.МассивПараметров, Элемент.Имя);
		
		ТаблицаФормы = ОбщегоНазначенияУТКлиентСервер.ТаблицаФормыЭлемента(Элемент);
		ИдентификаторСтроки = Неопределено;
		Если ТаблицаФормы <> Неопределено Тогда 
			ИдентификаторСтроки = ТаблицаФормы.ТекущаяСтрока;
		КонецЕсли;
		
		Ссылка                         = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Ссылка);
		ПодборДебиторскойЗадолженности = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ПодборДебиторскойЗадолженности);
		Контрагент                     = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Контрагент, ИдентификаторСтроки);
		Организация                    = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Организация, ИдентификаторСтроки);
		ТипРасчетов                    = СтруктураПараметров.ТипРасчетов;
		
		НастройкиПодбора = ВзаиморасчетыКлиентСервер.СтруктураОтбораДанныхВыбора();
		НастройкиПодбора.РедактируемыйДокумент          = Ссылка;
		НастройкиПодбора.ПодборДебиторскойЗадолженности = ПодборДебиторскойЗадолженности; 
		НастройкиПодбора.УчитыватьФилиалы               = Истина; 
		НастройкиПодбора.Контрагент                     = Контрагент;
		НастройкиПодбора.Организация                    = Организация;
		НастройкиПодбора.ТипРасчетов                    = ТипРасчетов;
		НастройкиПодбора.Текст                          = Текст;
		
		ВзаиморасчетыВызовСервера.ОбъектРасчетовОснованиеПлатежаОбработкаПолученияДанныхВыбора(
			ДанныеВыбора, 
			НастройкиПодбора, 
			ЭтоУИП, 
			ЭтоОбъектРасчетов);
		
	КонецЕсли;
	
КонецПроцедуры

// Нужен вызов обработки оповещения.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма документа или справочника
//  ИмяСобытия - Строка - Имя события
//  Параметр - Произвольный - Параметр
// 
// Возвращаемое значение:
//  Булево - Нужен вызов обработки оповещения
Функция НуженВызовОбработкиОповещения(Форма, ИмяСобытия, Параметр) Экспорт
	
	Возврат ИмяСобытия = "ЗачтенаОплата" И Форма.Объект.Ссылка = Параметр
		Или ИмяСобытия = "Запись_ОперацияПоПлатежнойКарте"
		Или ИмяСобытия = "Запись_ПоступлениеБезналичныхДенежныхСредств"
		Или ИмяСобытия = "Запись_ПриходныйКассовыйОрдер"
		Или ИмяСобытия = "Запись_ВзаимозачетЗадолженности"
		Или ИмяСобытия = "Запись_СписаниеЗадолженности"
		Или ИмяСобытия = "Запись_АвансовыйОтчет"
		Или ИмяСобытия = "Запись_СписаниеБезналичныхДенежныхСредств"
		Или ИмяСобытия = "Запись_РасходныйКассовыйОрдер";
	
КонецФункции

#КонецОбласти

#Область ВалютыИКурсДокумента

// Открывает форму редактирования валют и курса взаиморасчетов документа.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма объекта настройки.
// 	Элемент - ДекорацияФормы - Гиперссылка открытия формы правил оплаты, связанная с конкретным набором параметров.
// 	СтандартнаяОбработка - Булево - Признак стандартной обработки события.
// 	Оповещение - ОписаниеОповещения - Описание оповещения, которое необходимо выполнить после окончания настройки.
//
Процедура ВалютыИКурсДокументаНажатие(Форма, Элемент, СтандартнаяОбработка, Оповещение = Неопределено) Экспорт
	
	Попытка
		Форма.ЗаблокироватьДанныеФормыДляРедактирования();
	Исключение
		ПоказатьПредупреждение(Неопределено, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыМеханизма  = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "Взаиморасчеты");
	СистемныеНастройки  = ПараметрыМеханизма.СистемныеНастройки;
	СтруктураПараметров = ПараметрыМеханизма.МассивПараметров[0]; //Курс всегда один на документ.
	
	Если ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧ) Тогда
		ТЧ = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ПутьКДаннымТЧ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураПараметров.СуммаДокументаФорма) Тогда
		СуммаДокумента = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.СуммаДокументаФорма);
	ИначеЕсли ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧ) Тогда
		СуммаДокумента = ТЧ.Итог(СтруктураПараметров.ИмяРеквизитаТЧСуммаСНДС);
	Иначе
		СуммаДокумента = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.СуммаДокумента,,0);
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("ВалютаДокумента",      ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ВалютаДокумента));
	ПараметрыОткрытия.Вставить("ВалютаВзаиморасчетов", ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ВалютаВзаиморасчетов));
	Если ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧ) Тогда
		ПараметрыОткрытия.Вставить("СуммаВзаиморасчетов", ТЧ.Итог("СуммаВзаиморасчетов"));
	Иначе
		ПараметрыОткрытия.Вставить("СуммаВзаиморасчетов",  ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.СуммаВзаиморасчетов));
	КонецЕсли;
	ПараметрыОткрытия.Вставить("СуммаДокумента",               СуммаДокумента);
	ПараметрыОткрытия.Вставить("КурсЧислитель",                ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.КурсЧислитель));
	ПараметрыОткрытия.Вставить("КурсЗнаменатель",              ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.КурсЗнаменатель));
	ПараметрыОткрытия.Вставить("ДатаДокумента",                ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Дата));
	ПараметрыОткрытия.Вставить("Организация",                  ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Организация));
	ПараметрыОткрытия.Вставить("ДатаКурсаВалютыДокумента",     ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ДатаКурсаВалютыДокумента));
	ПараметрыОткрытия.Вставить("ЕстьДатаКурсаВалютыДокумента", ЗначениеЗаполнено(СтруктураПараметров.ДатаКурсаВалютыДокумента));
	ПараметрыОткрытия.Вставить("Договор",                      ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Договор));
	ПараметрыОткрытия.Вставить("ВариантКурсаДоговора",           ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ВариантКурсаДоговора));
	
	ПараметрыОткрытия.Вставить("ЭтоДокументПродажи",                 СтруктураПараметров.ДокументРасчетовСКлиентами);
	ПараметрыОткрытия.Вставить("ЭтоДокументЗакупки",                 СтруктураПараметров.ДокументРасчетовСПоставщиками);
	ПараметрыОткрытия.Вставить("ТолькоПросмотр",                     Форма.ТолькоПросмотр 
	                                                                 ИЛИ СтруктураПараметров.ВалютыИКурсДокументаТолькоПросмотр
	                                                                 ИЛИ СтруктураПараметров.ВалютаДокументаТолькоПросмотр 
	                                                                 	И СтруктураПараметров.ВалютаВзаиморасчетовТолькоПросмотр
	                                                                 	И ПараметрыОткрытия.ВалютаДокумента = ПараметрыОткрытия.ВалютаВзаиморасчетов);
	ПараметрыОткрытия.Вставить("ВалютаДокументаТолькоПросмотр",      СтруктураПараметров.ВалютаДокументаТолькоПросмотр);
	ПараметрыОткрытия.Вставить("ВалютаВзаиморасчетовТолькоПросмотр", СтруктураПараметров.ВалютаВзаиморасчетовТолькоПросмотр);
	ПараметрыОткрытия.Вставить("НеПоказыватьРасчеты",                СтруктураПараметров.НеПоказыватьРасчеты);
	ПараметрыОткрытия.Вставить("НеПересчитыватьСуммуДокумента",      СтруктураПараметров.НеПересчитыватьСуммуДокумента);
	
	//валюта документа только просмотр переносим в форму, т.к. там серверный вызов
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ДополнительныеПараметры.Вставить("СтруктураПараметров", СтруктураПараметров);
	ДополнительныеПараметры.Вставить("СистемныеНастройки", СистемныеНастройки);
	ДополнительныеПараметры.Вставить("ОповещениеПослеЗавершения", Оповещение);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВалютыИКурсДокументаНажатиеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.ВалютыИКурсДокумента", ПараметрыОткрытия, Форма,,,, ОповещениеОЗакрытии);
	
КонецПроцедуры

// Обработчик завершения редактирования курса и валют документа.
// 
Процедура ВалютыИКурсДокументаНажатиеЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено ИЛИ РезультатЗакрытия = КодВозвратаДиалога.Отмена Тогда 
		Если ДополнительныеПараметры.ОповещениеПослеЗавершения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеЗавершения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Форма               = ДополнительныеПараметры.Форма;
	СтруктураПараметров = ДополнительныеПараметры.СтруктураПараметров;
	
	МассивПолей = Новый Массив();
	МассивПолей.Добавить("ВалютаДокумента");
	МассивПолей.Добавить("ВалютаВзаиморасчетов");
	МассивПолей.Добавить("СуммаВзаиморасчетов");
	МассивПолей.Добавить("КурсЧислитель");
	МассивПолей.Добавить("КурсЗнаменатель");
	МассивПолей.Добавить("ДатаКурсаВалютыДокумента");
	
	РезультатЗакрытия.Вставить("ВалютаДокумента",РезультатЗакрытия.Валюта);
	
	СтарыеЗначенияИзмененныхРеквизитов = ПрисвоитьНовыеЗначения(Форма, СтруктураПараметров, РезультатЗакрытия, МассивПолей);
	
	Если СтарыеЗначенияИзмененныхРеквизитов.Количество() > 0 Тогда
		Форма.Модифицированность = Истина;
	КонецЕсли;
	
	РезультатыОбработки = Новый Структура();
	РезультатыОбработки.Вставить("СтарыеЗначенияИзмененныхРеквизитов", СтарыеЗначенияИзмененныхРеквизитов);
	РезультатыОбработки.Вставить("НеобходимПересчетСуммДокумента", РезультатЗакрытия.НеобходимПересчетСуммДокумента);
	
	Если ДополнительныеПараметры.ОповещениеПослеЗавершения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеЗавершения, РезультатыОбработки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОграниченияЗадолженности

// Открывает форму отчета о причинах ограничения отгрузки.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма документа/справочника.
// 	Элемент - ПолеФормы - Гиперссылка, по которой отрывается отчет.
// 	СтандартнаяОбработка - Булево - Признак стандартной обработки события.
//
Процедура ОграниченияЗадолженностиНажатие(Форма, Элемент, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыМеханизма  = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "Взаиморасчеты");
	СистемныеНастройки  = ПараметрыМеханизма.СистемныеНастройки;
	СтруктураПараметров = ПараметрыМеханизма.МассивПараметров[0]; //Курс всегда один на документ.
	
	ВзаиморасчетыКлиентСервер.ПроверитьОбязательныеПараметры(СтруктураПараметров,
		"Дата, ВалютаДокумента, Договор, СуммаДокумента, Организация");
	
	Дата                    = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Дата);
	Договор                 = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Договор);
	ВалютаДокумента         = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ВалютаДокумента);
	СуммаДокумента          = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.СуммаДокумента);
	Организация             = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Организация);
		
	ПутьКВалютеВзаиморасчетов = ?(СтруктураПараметров.ВалютаВзаиморасчетов="", СтруктураПараметров.ВалютаДокумента, СтруктураПараметров.ВалютаВзаиморасчетов);
	ВалютаВзаиморасчетов    = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, ПутьКВалютеВзаиморасчетов);
	
	ПутьКСуммеВзаиморасчетов = ?(СтруктураПараметров.СуммаВзаиморасчетов="", СтруктураПараметров.СуммаДокумента, СтруктураПараметров.СуммаВзаиморасчетов);
	СуммаВзаиморасчетов     = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, ПутьКСуммеВзаиморасчетов);
	
	НазначениеИспользования = Форма.Объект.Ссылка;
	
	ДанныеПоСуммеПродажи = Новый Структура();
	ДанныеПоСуммеПродажи.Вставить("Дата", Дата); 
	ДанныеПоСуммеПродажи.Вставить("Валюта", ВалютаДокумента);
	ДанныеПоСуммеПродажи.Вставить("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
	ДанныеПоСуммеПродажи.Вставить("СуммаДокумента", СуммаДокумента);
	ДанныеПоСуммеПродажи.Вставить("Организация", Организация);
	
	Если ВалютаДокумента = ВалютаВзаиморасчетов Тогда
		ДанныеПоСуммеПродажи.Вставить("СуммаВзаиморасчетов", СуммаДокумента);
	Иначе //ПутьКДаннымТЧ
		ДанныеПоСуммеПродажи.Вставить("СуммаВзаиморасчетов", СуммаВзаиморасчетов);
	КонецЕсли;
	
	ПродажиКлиент.ОткрытьОтчетРасшифровкиЗапретаОтгрузки(Договор, ДанныеПоСуммеПродажи, НазначениеИспользования, СистемныеНастройки.НоваяАрхитектураВзаиморасчетов);
	
КонецПроцедуры

#КонецОбласти

#Область СостояниеРасчетов

// Открывает форму отчета Карточка расчетов.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма документа/справочника.
// 	Элемент - ПолеФормы - Гиперссылка, по которой отрывается отчет.
// 	СтандартнаяОбработка - Булево - Признак стандартной обработки события.
//
Процедура РасчетыНажатие(Форма, Элемент, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыМеханизма  = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "Взаиморасчеты");
	СтруктураПараметров = ПараметрыМеханизма.МассивПараметров[0]; //Курс всегда один на документ.
	
	ВзаиморасчетыКлиентСервер.ПроверитьОбязательныеПараметры(СтруктураПараметров,
		"Дата, ВалютаДокумента, Договор, СуммаДокумента");
	
	Если ПараметрыМеханизма.СистемныеНастройки.НоваяАрхитектураВзаиморасчетов Тогда
		ПараметрОтчета = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Ссылка);
	Иначе
		Если СтруктураПараметров.ЭтоСправочник
			И ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ПорядокРасчетов)
				= ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоДоговорамНакладным") 
			ИЛИ (СтруктураПараметров.ЭтоЗаказ 
				И ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ПорядокРасчетов)
					= ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоЗаказамНакладным")) Тогда
			ПараметрОтчета = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Ссылка);
		Иначе
			ПараметрОтчета = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ОбъектРасчетов);
		КонецЕсли;
		Если ТипЗнч(ПараметрОтчета) = Тип("Массив") Тогда
			ПараметрОтчета = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ПараметрОтчета);
			Если ПараметрОтчета.Количество() = 1 Тогда
				 ПараметрОтчета = ПараметрОтчета[0];
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураПараметров.ТипРасчетов = ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом") Тогда
		ОтчетыУТКлиентПереопределяемый.ОткрытьОтчетКарточкаРасчетовСКлиентами("КарточкаРасчетовСКлиентамиПоДокументамКонтекст", ПараметрОтчета);
	Иначе
		ОтчетыУТКлиентПереопределяемый.ОткрытьОтчетКарточкаРасчетовСПоставщиками("КарточкаРасчетовСПоставщикамиПоДокументамКонтекст", ПараметрОтчета);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПрисвоитьНовыеЗначения(Объект, СтруктураПараметров, СтруктураНовыхЗначений, МассивПолей) 
	
	СтарыеЗначенияИзмененныхРеквизитов = Новый Структура;
	
	Для Каждого Поле Из МассивПолей Цикл
		
		Если СтрЧислоВхождений(СтруктураПараметров[Поле],".") > 1 Тогда
			Продолжить;
		КонецЕсли;
		
		Реквизит = ОбщегоНазначенияУТКлиентСервер.ДанныеДляПрисвоения(Объект, СтруктураПараметров[Поле]);
		Если Реквизит <> Неопределено И Реквизит.Данные[Реквизит.Имя] <> СтруктураНовыхЗначений[Поле] Тогда
			СтарыеЗначенияИзмененныхРеквизитов.Вставить(Реквизит.Имя, Реквизит.Данные[Реквизит.Имя]);
			Реквизит.Данные[Реквизит.Имя] = СтруктураНовыхЗначений[Поле];
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтарыеЗначенияИзмененныхРеквизитов;
	
КонецФункции

// Параметры:
// 	Ответ - КодВозвратаДиалога -
// 	ДополнительныеПараметры - Структура - :
// 	 * Форма - РасширениеУправляемойФормыДляОбъектов
// 	 * Элемент - ПолеФормы - Элемент, которым вызван зачет оплаты.
Процедура ЗачетОплатыЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	Элемент = ДополнительныеПараметры.Элемент;
	Отказ = Ложь;
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		ОчиститьСообщения();
		Отказ = НЕ Форма.Записать();
	КонецЕсли;
	
	Если Ответ = КодВозвратаДиалога.Отмена ИЛИ Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыМеханизма  = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "Взаиморасчеты");
	Если Элемент = Неопределено Тогда
		СтруктураПараметров = ПараметрыМеханизма.МассивПараметров[0]; // см. ВзаиморасчетыСервер.ПараметрыМеханизма
	Иначе
		СтруктураПараметров = ВзаиморасчетыКлиентСервер.СтруктураПараметровПоИмениЭлемента(ПараметрыМеханизма.МассивПараметров, Элемент.Имя);
	КонецЕсли;
	
	Если ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ПорядокРасчетов) = ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоЗаказамНакладным")
		И ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧ)
		И ЗначениеЗаполнено(СтруктураПараметров.ИмяРеквизитаТЧЗаказ)
		И ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.НакладнаяПоЗаказам,,Ложь)
		И СтруктураПараметров.ЭтоПродажаЗакупка Тогда
		
		ПодстрокиПути = СтрРазделить(СтруктураПараметров.ПутьКДаннымТЧ,".");
		ПутьКОбъектамЗачета = ПодстрокиПути[ПодстрокиПути.Количество()-1] + "." + СтруктураПараметров.ИмяРеквизитаТЧЗаказ;
		
	ИначеЕсли ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ПорядокРасчетов) = ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоДоговорамНакладным")
		И СтруктураПараметров.ЭтоПродажаЗакупка Тогда
		ПодстрокиПути = СтрРазделить(СтруктураПараметров.Договор,".");
		ПутьКОбъектамЗачета = "." + ПодстрокиПути[ПодстрокиПути.Количество()-1];
	Иначе
		ПутьКОбъектамЗачета = "";
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ОбъектРасчетов, Организация, ТипРасчетов, ПутьКОбъектамЗачета");
	Если ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа) Тогда
		ПараметрыФормы.Вставить("ИмяТЧРасшифровкаПлатежа", СтрРазделить(СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа,".")[1]);
	КонецЕсли;
	
	Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, "Проведен")
		ИЛИ НЕ Форма.Объект.Проведен Тогда
		ПараметрыФормы.Вставить("АдресРасшифровкаПлатежа", СтруктураПараметров.АдресРасшифровкаПлатежа);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("Документ", ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Ссылка));
	ПараметрыФормы.Вставить("ПартнерДокумента", ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Партнер));
	
	ОбъектРасчетов = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ОбъектРасчетов);
	Если ТипЗнч(ОбъектРасчетов) = Тип("Массив") Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(ОбъектРасчетов, ПредопределенноеЗначение("Справочник.ОбъектыРасчетов.ПустаяСсылка"));
		ОбъектРасчетов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОбъектРасчетов);
		Если ОбъектРасчетов.Количество() = 1 Тогда
			ОбъектРасчетов = ОбъектРасчетов[0];
		Иначе
			ОбъектРасчетов = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектРасчетов) Тогда
		ПараметрыФормы.ОбъектРасчетов = ОбъектРасчетов;
	Иначе
		ПорядокРасчетов = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ПорядокРасчетов);
		Если ПорядокРасчетов = ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов") Тогда
			ПараметрыФормы.ОбъектРасчетов = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Договор);
		Иначе
			ПараметрыФормы.ОбъектРасчетов = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Ссылка);
		КонецЕсли;
		ПараметрыФормы.Организация = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Организация);
		ПараметрыФормы.ТипРасчетов = СтруктураПараметров.ТипРасчетов;
	КонецЕсли;
	ПараметрыФормы.ПутьКОбъектамЗачета = ПутьКОбъектамЗачета;
	ПараметрыФормы.Вставить("ПорядокРасчетов", ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ПорядокРасчетов));
	
	Если СтруктураПараметров.ЭтоЗаказ
		И ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ПорядокРасчетов) = ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоЗаказамНакладным") Тогда
		ЭтапыОплаты = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты);
		ВариантОплатыАванс = ?(СтруктураПараметров.ТипРасчетов = ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом"),
		                       ПредопределенноеЗначение("Перечисление.ВариантыКонтроляОплатыКлиентом.ПредоплатаДоОтгрузки"),
		                       ПредопределенноеЗначение("Перечисление.ВариантыКонтроляОплатыПоставщику.ПредоплатаДоПоступления"));
		СтрокиАванса = ЭтапыОплаты.НайтиСтроки(Новый Структура("ВариантОплаты", ВариантОплатыАванс));
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			СтрокиАванса,
			ЭтапыОплаты.НайтиСтроки(Новый Структура("ВариантОтсчета", ПредопределенноеЗначение("Перечисление.ВариантыОтсчетаДатыПлатежа.ДоДатыОтгрузки"))),
			Истина);
		СуммаКОплате = 0;
		Для Каждого СтрокаЭтапа Из СтрокиАванса Цикл
			СуммаКОплате = СуммаКОплате + СтрокаЭтапа.СуммаПлатежа + СтрокаЭтапа.СуммаЗалогаЗаТару;
		КонецЦикла;
		ПараметрыФормы.Вставить("СуммаКОплате", СуммаКОплате);
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ПомощникЗачетаОплат.Форма", ПараметрыФормы);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаВариантКурсаДоговораНажатие(ТекущиеДанные, СтандартнаяОбработка) Экспорт 
	СтандартнаяОбработка = Ложь;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТекущиеДанные.ВариантКурсаДоговора = ПредопределенноеЗначение("Перечисление.ВариантыКурсаДоговора.УстановленныйВДоговоре") Тогда
		Договор = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ОбъектРасчетов, "Договор");
		ПараметрыОткрытия = Новый Структура("Отбор", Новый Структура("Договор", Договор));
		ОткрытьФорму("РегистрСведений.КурсыВалютРасчетовПоДоговорам.Форма.ФормаСпискаПоДоговору", ПараметрыОткрытия);
	ИначеЕсли ТекущиеДанные.ВариантКурсаДоговора = ПредопределенноеЗначение("Перечисление.ВариантыКурсаДоговора.ФиксированныйНаДатуОтгрузки") Тогда
		ПараметрыОткрытия = Новый Структура("Ключ", ТекущиеДанные.ОбъектРасчетов);
		ОткрытьФорму("Справочник.ОбъектыРасчетов.ФормаОбъекта", ПараметрыОткрытия);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
