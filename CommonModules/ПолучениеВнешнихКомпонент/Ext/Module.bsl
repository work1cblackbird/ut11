///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "Получение внешних компонент".
// ОбщийМодуль.ПолучениеВнешнихКомпонент.
//
// Серверные функции загрузки файлов внешних компонент:
//  - получение измененных файлов внешних компонент регламентным заданием в тихом режиме (без участия пользователя);
//  - получение файлов актуальных версий внешних компонент;
//  - получение файлов версий внешних компонент;
//  - обработки событий Библиотеки технологии сервиса;
//  - обработки событий Библиотеки стандартных подсистем.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Создает таблицу описания внешних компонент, которая используется для обновления из сервиса.
//
// Возвращаемое значение:
//  ТаблицаЗначений - описание запроса внешних компонент:
//    *Идентификатор - Строка - содержит уникальный идентификатор внешней
//                    компоненты, который указывается пользователем в базе публикаций;
//    *Версия        - Строка - содержит версию внешней компоненты;
//    *Наименование  - Строка - содержит наименование компоненты;
//    *ДатаВерсии    - Дата - содержит дату версии (сборки) внешней компоненты.
//    *ОбновлятьАвтоматически - Булево - признак автоматического обновления внешней компоненты.
//
Функция ОписаниеВнешнихКомпонент() Экспорт
	
	ОписательВнешнихКомпонент = Новый ТаблицаЗначений;
	ОписательВнешнихКомпонент.Колонки.Добавить("Идентификатор", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ОписательВнешнихКомпонент.Колонки.Добавить("Версия",        ОбщегоНазначения.ОписаниеТипаСтрока(25));
	ОписательВнешнихКомпонент.Колонки.Добавить("Наименование",  ОбщегоНазначения.ОписаниеТипаСтрока(150));
	ОписательВнешнихКомпонент.Колонки.Добавить("ДатаВерсии",    ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ОписательВнешнихКомпонент.Колонки.Добавить("ОбновлятьАвтоматически", Новый ОписаниеТипов("Булево"));
	
	Возврат ОписательВнешнихКомпонент;
	
КонецФункции

// Выполняет загрузку файлов актуальных версий внешних компонент.
//
// Параметры:
//  ОписаниеВнешнихКомпонент - ТаблицаЗначений - описание внешних компонент, которые необходимо,
//                             загрузить в ИБ. См. функцию ПолучениеВнешнихКомпонент.ОписаниеВнешнихКомпонент.
//                             Если в таблице заполнена версия внешней компоненты, будет выполнена
//                             проверка номера версии, т.е. если номер версии в сервисе равен номеру версии
//                             в ИБ, файл не будет загружен и для версии будет установлена ошибка АктуальнаяВерсия.
//
// Возвращаемое значение:
//  Структура - содержит результат загрузки внешних компонент:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//                  может быть обработан вызывающим функционалом:
//                    - <Пустая строка> - обновление выполнено успешно;
//                    - "НеверныйЛогинИлиПароль" - неверный логин или пароль;
//                    - "ПревышеноКоличествоПопыток" - превышено количество попыток
//                      получения обновления с некорректным логином и паролем;
//                    - "ОшибкаПодключения" - ошибка при подключении к сервису;
//                    - "ОшибкаСервиса" - внутренняя ошибка сервиса;
//                    - "НеизвестнаяОшибка" - при получении информации возникла
//                      неизвестная (не обрабатываемая) ошибка;
//                    - "СервисВременноНеДоступен" - на сервер ведутся регламентные работы;
//                    - "НетДоступаКПрограмме" - отсутствует доступ к программе на Портале 1С:ИТС;
//    *СообщениеОбОшибке      - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке     - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//    *ДанныеВнешнихКомпонент - ТаблицаЗначений, Неопределено - содержит информацию о загруженных
//                                внешних компонентах:
//     **Идентификатор        - Строка - содержит идентификатор внешней компоненты, который
//                              указывается пользователем при создании новой компоненты;
//     **Версия               - Строка, Неопределено - содержит номер версии загруженного компонента;
//     **ДатаВерсии           - Дата, Неопределено - содержит дату выхода версии загруженного,
//                              компонента установленную в при заполнении информации о версии
//                              внешней компоненты;
//     **Наименование         - Строка, Неопределено - содержит наименование внешней компоненты, к которой
//                              относится версия;
//     **ИмяФайла             - Строка, Неопределено - содержит имя файла, установленное
//                              в при создании версии внешней компоненты;
//     **Размер               - Число - размер файла;
//     **АдресФайла           - Строка, Неопределено - содержит адрес файла внешней
//                              компоненты во временно хранилище;
//     **КодОшибки            - Строка - содержит код ошибки загрузки внешней компоненты:
//                               - <Пустая строка> - обновление загружено успешно;
//                               - ОтсутствуетКомпонента - в сервисе внешних компонент
//                                 не обнаружена внешняя компонента по переданному идентификатору;
//                               - ФайлНеЗагружен - при попытке загрузить файл внешней компоненты из сервиса,
//                                 возникла ошибка;
//                               - АктуальнаяВерсия - при получении последней (актуальной) внешней компоненты
//                                 не обнаружена более новая версия.
//
// Пример:
//	// 1. Обновление версии
//
//	МодульПолучениеВнешнихКомпонент = ОбщегоНазначения.ОбщийМодуль("ПолучениеВнешнихКомпонент");
//	ОписаниеВнешнихКомпонент = МодульПолучениеВнешнихКомпонент.ОписаниеВнешнихКомпонент();
//
//	СтрокаТаблицы = ОписаниеВнешнихКомпонент.Добавить();
//	СтрокаТаблицы.Идентификатор = "InputDevice";
//	СтрокаТаблицы.Версия        = "8_1_7_0"; // Допустимо оставить версию пустой.
//
//	Результат = МодульПолучениеВнешнихКомпонент.АктуальныеВерсииВнешнихКомпонент(ОписаниеВнешнихКомпонент);
//
//	// Результат загрузки:
//	Результат.КодОшибки          = "";
//	Результат.СообщениеОбОшибке  = "";
//	Результат.ИнформацияОбОшибке = "";
//
//	СтрокаРезультата = Результат.ОписаниеВнешнихКомпонент[0];
//	СтрокаРезультат.Идентификатор = "InputDevice";
//	СтрокаРезультат.Версия        = "8_1_8_0";
//	СтрокаРезультат.ДатаВерсии    = '10.01.2017 18:00';
//	СтрокаРезультат.Наименование  = "1С:Сканеры штрихкода (NativeApi)";
//	СтрокаРезультат.ИмяФайла      = "Драйвер1СУстройстваВводаNative_8_1_8_0.zip";
//	СтрокаРезультат.АдресФайла    = [uid временного хранилища];
//	СтрокаРезультат.КодОшибки     = "";
//
//	// 2. Ошибка работы с сервисом
//
//	МодульПолучениеВнешнихКомпонент = ОбщегоНазначения.ОбщийМодуль("ПолучениеВнешнихКомпонент");
//	ОписаниеВнешнихКомпонент = МодульПолучениеВнешнихКомпонент.ОписаниеВнешнихКомпонент();
//
//	СтрокаТаблицы = ОписаниеВнешнихКомпонент.Добавить();
//	СтрокаТаблицы.Идентификатор = "ProtonScanner";
//	СтрокаТаблицы.Версия        = "1_1";
//
//	Результат = МодульПолучениеВнешнихКомпонент.АктуальныеВерсииВнешнихКомпонент(ОписаниеВнешнихКомпонент);
//
//	// Результат загрузки
//	Результат.КодОшибки                = "СервисВременноНедоступен";
//	Результат.СообщениеОбОшибке        = "Сервис временно не доступен в связи с регламентными работами.";
//	Результат.ИнформацияОбОшибке       = "Не удалось подключиться к сервису внешних компонент.
//		|Сервис временно недоступен.";
//	Результат.ОписаниеВнешнихКомпонент = Неопределено;
//
//	// 3. Ошибка загрузки внешней компоненты
//
//	МодульПолучениеВнешнихКомпонент = ОбщегоНазначения.ОбщийМодуль("ПолучениеВнешнихКомпонент");
//	ОписаниеВнешнихКомпонент = МодульПолучениеВнешнихКомпонент.ОписаниеВнешнихКомпонент();
//
//	СтрокаТаблицы = ОписаниеВнешнихКомпонент.Добавить();
//	СтрокаТаблицы.Идентификатор = "ProtonScanner";
//	СтрокаТаблицы.Версия        = "1_2";
//
//	Результат = МодульПолучениеВнешнихКомпонент.АктуальныеВерсииВнешнихКомпонент(ОписаниеВнешнихКомпонент);
//
//	// Результат загрузки
//	Результат.КодОшибки          = "";
//	Результат.СообщениеОбОшибке  = "";
//	Результат.ИнформацияОбОшибке = "";
//	Результат.ОписаниеВнешнихКомпонент = Неопределено;
//
//	СтрокаРезультата = Результат.ОписаниеВнешнихКомпонент[0];
//	СтрокаРезультат.Идентификатор = "ProtonScanner";
//	СтрокаРезультат.Версия        = Неопределено;
//	СтрокаРезультат.ДатаВерсии    = Неопределено;
//	СтрокаРезультат.Наименование  = Неопределено;
//	СтрокаРезультат.ИмяФайла      = Неопределено;
//	СтрокаРезультат.АдресФайла    = Неопределено;
//	СтрокаРезультат.КодОшибки     = "АктуальнаяВерсия";
//
Функция АктуальныеВерсииВнешнихКомпонент(ОписаниеВнешнихКомпонент) Экспорт
	
	// 1. Проверка доступности загрузки внешних компонент
	// из сервиса.
	ПроверитьДоступностьЗагрузки();
	
	// 2. Проверка запроса внешних компонент.
	Если ОписаниеВнешнихКомпонент.Количество() = 0 Тогда
		РезультатОперации = ОписаниеРезультатаЗагрузки();
		УдалитьСлужебныеДанныеВнешнихКомпонент(РезультатОперации.ДанныеВнешнихКомпонент);
		Возврат ОписаниеРезультатаЗагрузки();
	КонецЕсли;
	
	// 3. Проверка данных для запроса внешних компонент.
	РезультатОперации = ПроверитьЗаполнениеДанныхВнешнихКомпонент(
		ОписаниеВнешнихКомпонент);
	Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
		Возврат РезультатОперации;
	КонецЕсли;
	
	// 4. Получение информации об актуальных версиях внешних компонент
	// из сервиса.
	ДанныеПодключения = ДанныеАутентификации();
	Если ДанныеПодключения.Ошибка Тогда
		РезультатОперации.КодОшибки = КодОшибкиНеверныйЛогинИлиПароль();
		ЗаполнитьЗначенияСвойств(РезультатОперации, ДанныеПодключения, "ИнформацияОбОшибке");
		РезультатОперации.СообщениеОбОшибке = ДанныеПодключения.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	РезультатОперации = ИнформацияОбАктуальныхВерсияхВнешнихКомпонент(
		ОписаниеВнешнихКомпонент,
		ДанныеПодключения.ДанныеАутентификации);
	
	Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
		Возврат РезультатОперации;
	КонецЕсли;
	
	// 5. Определение актуальных версий.
	ОбработатьАктуальныеВерсии(ОписаниеВнешнихКомпонент, РезультатОперации.ДанныеВнешнихКомпонент);
	
	// 6. Загрузка файлов внешних компонент.
	ЗагрузитьФайлыВнешнихКомпонент(РезультатОперации);
	
	// 7. Подготовка результат загрузки.
	УдалитьСлужебныеДанныеВнешнихКомпонент(РезультатОперации.ДанныеВнешнихКомпонент);
	
	Возврат РезультатОперации;
	
КонецФункции

// Выполняет загрузка файлов версий внешних компонент.
//
// Параметры:
//  ОписаниеВнешнихКомпонент - ТаблицаЗначений - описание внешних компонент, которые необходимо,
//                             загрузить в ИБ. См. функцию ПолучениеВнешнихКомпонент.ОписаниеВнешнихКомпонент.
//
// Возвращаемое значение:
//  Структура - содержит результат загрузки внешних компонент:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//                  может быть обработан вызывающим функционалом:
//                    - <Пустая строка> - обновление выполнено успешно;
//                    - "НеверныйЛогинИлиПароль" - неверный логин или пароль;
//                    - "ПревышеноКоличествоПопыток" - превышено количество попыток
//                      получения обновления с некорректным логином и паролем;
//                    - "ОшибкаПодключения" - ошибка при подключении к сервису;
//                    - "ОшибкаСервиса" - внутренняя ошибка сервиса;
//                    - "НеизвестнаяОшибка" - при получении информации возникла
//                      неизвестная (не обрабатываемая) ошибка;
//                    - "СервисВременноНеДоступен" - на сервер ведутся регламентные работы;
//                    - "НетДоступаКПрограмме" - отсутствует доступ к программе на Портале 1С:ИТС;
//    *СообщениеОбОшибке      - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке     - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//    *ДанныеВнешнихКомпонент - ТаблицаЗначений, Неопределено - содержит информацию о загруженных
//                              внешних компонентах:
//     **Идентификатор        - Строка - содержит идентификатор внешней компоненты, который
//                              указывается пользователем при создании новой компоненты;
//     **Версия               - Строка, Неопределено - содержит номер версии загруженного компонента;
//     **ДатаВерсии           - Дата, Неопределено - содержит дату выхода версии загруженного,
//                              компонента установленную в при заполнении информации о версии
//                              внешней компоненты;
//     **Наименование         - Строка, Неопределено - содержит наименование внешней компоненты, к которой
//                              относится версия;
//     **ИмяФайла             - Строка, Неопределено - содержит имя файла, установленное
//                              в при создании версии внешней компоненты;
//     **Размер               - Число - размер файла;
//     **АдресФайла           - Строка, Неопределено - содержит адрес файла внешней
//                              компоненты во временно хранилище;
//     **КодОшибки            - Строка - содержит код ошибки загрузки внешней компоненты:
//                               - <Пустая строка> - обновление загружено успешно;
//                               - ОтсутствуетКомпонента - в сервисе внешних компонент
//                                 не обнаружена внешняя компонента по переданному идентификатору;
//                               - ФайлНеЗагружен - при попытке загрузить файл внешней компоненты из сервиса,
//                                 возникла ошибка;
//                               - ОтсутствуетВерсия - в сервисе внешних компонент не обнаружена версия
//                                 внешней компонента по переданному номеру версии.
//
// Пример:
//	// 1. Обновление версии
//
//	МодульПолучениеВнешнихКомпонент = ОбщегоНазначения.ОбщийМодуль("ПолучениеВнешнихКомпонент");
//	ОписаниеВнешнихКомпонент = МодульПолучениеВнешнихКомпонент.ОписаниеВнешнихКомпонент();
//
//	СтрокаТаблицы = ОписаниеВнешнихКомпонент.Добавить();
//	СтрокаТаблицы.Идентификатор = "InputDevice";
//	СтрокаТаблицы.Версия        = "8_1_8_0";
//
//	Результат = МодульПолучениеВнешнихКомпонент.АктуальныеВерсииВнешнихКомпонент(ОписаниеВнешнихКомпонент);
//
//	// Результат загрузки:
//	Результат.КодОшибки          = "";
//	Результат.СообщениеОбОшибке  = "";
//	Результат.ИнформацияОбОшибке = "";
//
//	СтрокаРезультата = Результат.ОписаниеВнешнихКомпонент[0];
//	СтрокаРезультат.Идентификатор = "InputDevice";
//	СтрокаРезультат.Версия        = "8_1_8_0";
//	СтрокаРезультат.ДатаВерсии    = '10.01.2017 18:00';
//	СтрокаРезультат.Наименование  = "1С:Сканеры штрихкода (NativeApi)";
//	СтрокаРезультат.ИмяФайла      = "Драйвер1СУстройстваВводаNative_8_1_8_0.zip";
//	СтрокаРезультат.АдресФайла    = [uid временного хранилища];
//	СтрокаРезультат.КодОшибки     = "";
//
//	// 2. Ошибка работы с сервисом
//
//	МодульПолучениеВнешнихКомпонент = ОбщегоНазначения.ОбщийМодуль("ПолучениеВнешнихКомпонент");
//	ОписаниеВнешнихКомпонент = МодульПолучениеВнешнихКомпонент.ОписаниеВнешнихКомпонент();
//
//	СтрокаТаблицы = ОписаниеВнешнихКомпонент.Добавить();
//	СтрокаТаблицы.Идентификатор = "ProtonScanner";
//	СтрокаТаблицы.Версия        = "1_1";
//
//	Результат = МодульПолучениеВнешнихКомпонент.АктуальныеВерсииВнешнихКомпонент(ОписаниеВнешнихКомпонент);
//
//	// Результат загрузки
//	Результат.КодОшибки                = "СервисВременноНедоступен";
//	Результат.СообщениеОбОшибке        = "Сервис временно не доступен в связи с регламентными работами.";
//	Результат.ИнформацияОбОшибке       = "При подключении к сервису ХХХХХХХХ возникли ошибки ХХХХХХХ.";
//	Результат.ОписаниеВнешнихКомпонент = Неопределено;
//
//	// 3. Ошибка загрузки внешней компоненты
//
//	МодульПолучениеВнешнихКомпонент = ОбщегоНазначения.ОбщийМодуль("ПолучениеВнешнихКомпонент");
//	ОписаниеВнешнихКомпонент = МодульПолучениеВнешнихКомпонент.ОписаниеВнешнихКомпонент();
//
//	СтрокаТаблицы = ОписаниеВнешнихКомпонент.Добавить();
//	СтрокаТаблицы.Идентификатор = "ProtonScanner";
//	СтрокаТаблицы.Версия        = "1_2";
//
//	Результат = МодульПолучениеВнешнихКомпонент.АктуальныеВерсииВнешнихКомпонент(ОписаниеВнешнихКомпонент);
//
//	// Результат загрузки
//	Результат.КодОшибки                = "";
//	Результат.СообщениеОбОшибке        = "";
//	Результат.ИнформацияОбОшибке       = "";
//	Результат.ОписаниеВнешнихКомпонент = Неопределено;
//
//	СтрокаРезультата = Результат.ОписаниеВнешнихКомпонент[0];
//	СтрокаРезультат.Идентификатор = "ProtonScanner";
//	СтрокаРезультат.Версия        = Неопределено;
//	СтрокаРезультат.ДатаВерсии    = Неопределено;
//	СтрокаРезультат.Наименование  = Неопределено;
//	СтрокаРезультат.ИмяФайла      = Неопределено;
//	СтрокаРезультат.АдресФайла    = Неопределено;
//	СтрокаРезультат.КодОшибки     = "ОтсутствуетВерсия";
//
Функция ВерсииВнешнихКомпонент(ОписаниеВнешнихКомпонент) Экспорт
	
	// 1. Проверка доступности загрузки внешних компонент
	// из сервиса.
	ПроверитьДоступностьЗагрузки();
	
	// 2. Проверка запроса внешних компонент.
	Если ОписаниеВнешнихКомпонент.Количество() = 0 Тогда
		РезультатОперации = ОписаниеРезультатаЗагрузки();
		УдалитьСлужебныеДанныеВнешнихКомпонент(РезультатОперации.ДанныеВнешнихКомпонент);
		Возврат ОписаниеРезультатаЗагрузки();
	КонецЕсли;
	
	// 3. Проверка данных для запроса внешних компонент.
	РезультатОперации = ПроверитьЗаполнениеДанныхВнешнихКомпонент(
		ОписаниеВнешнихКомпонент);
	Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
		Возврат РезультатОперации;
	КонецЕсли;
	
	// 4. Получение информации об актуальных версиях внешних компонент
	// из сервиса.
	РезультатОперации = ИнформацияОВерсияхВнешнихКомпонент(ОписаниеВнешнихКомпонент);
	
	Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
		Возврат РезультатОперации;
	КонецЕсли;
	
	// 5. Загрузка файлов внешних компонент.
	ЗагрузитьФайлыВнешнихКомпонент(РезультатОперации);
	
	// 6. Подготовка результат загрузки.
	УдалитьСлужебныеДанныеВнешнихКомпонент(РезультатОперации.ДанныеВнешнихКомпонент);
	
	Возврат РезультатОперации;
	
КонецФункции

// Проверяет возможность загрузки внешних компонент.
//
// Возвращаемое значение:
//  Булево - если Истина, загрузка внешних компонент доступна.
//
Функция ДоступнаЗагрузкаВнешнихКомпонент() Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Проверяет возможность запуска обработки обновления внешних компонент.
//
// Возвращаемое значение:
//  Булево - если Истина, обработка обновления внешних компонент доступна.
//
Функция ДоступнаИнтерактивнаяЗагрузкаВнешнихКомпонент() Экспорт
	
	Если ДоступнаЗагрузкаВнешнихКомпонент()
		И Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает описание внешних компонент, у которых доступны обновления
// в сервисе внешних компонент.
//
// Параметры:
//  Идентификаторы - Массив из Строка, Неопределено - список уникальных идентификаторов
//                   внешних компонент.
// 
// Возвращаемое значение:
//  Структура - содержит результат проверки внешних компонент:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//                  может быть обработан вызывающим функционалом:
//                    - <Пустая строка> - ошибок нет;
//                    - "НеверныйЛогинИлиПароль" - неверный логин или пароль;
//                    - "ПревышеноКоличествоПопыток" - превышено количество попыток
//                      получения обновления с некорректным логином и паролем;
//                    - "ОшибкаПодключения" - ошибка при подключении к сервису;
//                    - "ОшибкаСервиса" - внутренняя ошибка сервиса;
//                    - "НеизвестнаяОшибка" - при получении информации возникла
//                      неизвестная (не обрабатываемая) ошибка;
//                    - "СервисВременноНеДоступен" - на сервер ведутся регламентные работы;
//                    - "НетДоступаКПрограмме" - отсутствует доступ к программе на Портале 1С:ИТС;
//    *СообщениеОбОшибке      - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке     - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//    *ДанныеВнешнихКомпонент - ТаблицаЗначений, Неопределено - содержит информацию о внешних компонентах,
//                                см ОписаниеВнешнихКомпонент.
//
Функция ДоступноОбновлениеВнешнихКомпонент(Идентификаторы = Неопределено) Экспорт
	
	РезультатОперации = Новый Структура;
	РезультатОперации.Вставить("КодОшибки",              "");
	РезультатОперации.Вставить("СообщениеОбОшибке",      "");
	РезультатОперации.Вставить("ИнформацияОбОшибке",     "");
	РезультатОперации.Вставить("ДанныеВнешнихКомпонент", Неопределено);
	
	// 1. Проверка доступности получения внешних компонент из сервиса.
	ПроверитьДоступностьЗагрузки();
	
	// 2. Актуализация списка компонент для запроса в сервис.
	МодульВнешниеКомпонентыСервер = ОбщегоНазначения.ОбщийМодуль("ВнешниеКомпонентыСервер");
	ОписаниеВнешнихКомпонент = МодульВнешниеКомпонентыСервер.ИспользуемыеКомпоненты("ДляЗагрузки");
	
	СтрокиУдалить = Новый Массив;
	Если Идентификаторы <> Неопределено Тогда
		
		Для Каждого ОписаниеВнешнейКомпоненты Из ОписаниеВнешнихКомпонент Цикл
			Если Идентификаторы.Найти(ОписаниеВнешнейКомпоненты.Идентификатор) = Неопределено Тогда
				СтрокиУдалить.Добавить(ОписаниеВнешнейКомпоненты);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ОписаниеВнешнейКомпоненты Из СтрокиУдалить Цикл
			ОписаниеВнешнихКомпонент.Удалить(ОписаниеВнешнейКомпоненты);
		КонецЦикла;
		
	КонецЕсли;
	
	// 3. Обновить данные кэша из сервиса внешних компонент
	РезультатОбновления = ОбновитьДанныеКэшаВнешнихКомпонент(ОписаниеВнешнихКомпонент);
	Если ЗначениеЗаполнено(РезультатОбновления.КодОшибки) Тогда
		ЗаполнитьЗначенияСвойств(
			РезультатОбновления,
			РезультатОперации,
			"КодОшибки,СообщениеОбОшибке,ИнформацияОбОшибке");
		Возврат РезультатОперации;
	КонецЕсли;
	
	// 4. Заполняем данными из кэша.
	ДанныеВнешнихКомпонент = ОписаниеВнешнихКомпонент();
	Для Каждого ОписаниеВнешнейКомпоненты Из ОписаниеВнешнихКомпонент Цикл
		
		ДанныеКэшаВерсии = РегистрыСведений.КэшДанныхВнешнихКомпонент.ДанныеКэша(ОписаниеВнешнейКомпоненты.Идентификатор);
		Если ДанныеКэшаВерсии = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеКэшаВерсии.ДатаВерсии > ОписаниеВнешнейКомпоненты.ДатаВерсии Тогда
			ОписаниеВнешнейКомпоненты = ДанныеВнешнихКомпонент.Добавить();
			ЗаполнитьЗначенияСвойств(
				ОписаниеВнешнейКомпоненты,
				ДанныеКэшаВерсии);
		КонецЕсли;
		
	КонецЦикла;
	РезультатОперации.ДанныеВнешнихКомпонент = ДанныеВнешнихКомпонент;
	
	Возврат РезультатОперации;
	
КонецФункции

// Возвращает настройки обновления внешних компонент.
// 
// Возвращаемое значение:
//  Структура - Настройки регламентного задания обновления внешних компонент.
//    **ВариантОбновления - Число - вариант обновления внешних компонент;
//                    0 - отключено;
//                    1 - По расписанию через Интернет;
//                    2 - По расписанию через Файл;
//    **ФайлВнешнихКомпонент - Строка - путь к файлу внешних компонент;
//    **Расписание - РасписаниеРегламентногоЗадания - расписание обновления внешних компонент;
//    **ПредставлениеРасписания - Строка - пользовательское представление расписания;
//    **ДоступнаЗагрузкаВнешнихКомпонент - Булево - возможность загрузки внешних компонент.
//
Функция НастройкиОбновленияВнешнихКомпонент() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ВариантОбновления",       РежимОбновленияОтключено());
	Результат.Вставить("ФайлВнешнихКомпонент",    "");
	Результат.Вставить("Расписание",              Неопределено);
	Результат.Вставить("ПредставлениеРасписания", НСтр("ru = 'Настроить расписание'"));
	Результат.Вставить(
		"ДоступнаЗагрузкаВнешнихКомпонент",
		ДоступнаЗагрузкаВнешнихКомпонент());
	
	Если Не Результат.ДоступнаЗагрузкаВнешнихКомпонент Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Константы.ВариантОбновленияВнешнихКомпонент) Тогда
		Результат.ВариантОбновления    = Константы.ВариантОбновленияВнешнихКомпонент.Получить();
		Результат.ФайлВнешнихКомпонент = Константы.ФайлВнешнихКомпонент.Получить();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаданияОбновления = ЗаданияОбновлениеВнешнихКомпонент();
	Если ЗаданияОбновления.Количество() = 0 Тогда
		ДобавитьРегламентноеЗаданиеОбновления(Ложь);
		ЗаданияОбновления = ЗаданияОбновлениеВнешнихКомпонент();
	КонецЕсли;
	
	Если ЗаданияОбновления.Количество() <> 0 Тогда
		Результат.Расписание = ЗаданияОбновления[0].Расписание;
		Результат.ПредставлениеРасписания =
			ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеРасписания(
				Результат.Расписание);
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

// Изменяет настройки обновления внешних компонент.
//
// Параметры:
//  Настройки - Структура - Настройки регламентного задания обновления внешних компонент.
//    **ВариантОбновления - Число - вариант обновления внешних компонент;
//    **ФайлВнешнихКомпонент - Строка - путь к файлу внешних компонент;
//    **Расписание - РасписаниеРегламентногоЗадания - расписание обновления внешних компонент.
//
Процедура ИзменитьНастройкиОбновленияВнешнихКомпонент(Настройки) Экспорт
	
	Если Не ДоступнаЗагрузкаВнешнихКомпонент() Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиОбновления = Новый Структура("Расписание,ВариантОбновления,ФайлВнешнихКомпонент");
	ЗаполнитьЗначенияСвойств(НастройкиОбновления, Настройки);
	
	Если НастройкиОбновления.Расписание <> Неопределено Тогда
		ЗаписатьРасписаниеОбновления(Настройки.Расписание);
	КонецЕсли;
	
	Если Не ДоступноИзменениеНастроекРегламентногоЗадания() Тогда
		Возврат;
	КонецЕсли;
	
	Если НастройкиОбновления.ВариантОбновления <> Неопределено Тогда
		Константы.ВариантОбновленияВнешнихКомпонент.Установить(Настройки.ВариантОбновления);
	КонецЕсли;
	
	Если НастройкиОбновления.ФайлВнешнихКомпонент <> Неопределено Тогда
		Константы.ФайлВнешнихКомпонент.Установить(Настройки.ФайлВнешнихКомпонент);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ИнтеграцияСБиблиотекойСтандартныхПодсистем

#Область БСПБазоваяФункциональность

// Интеграция с подсистемой СтандартныеПодсистемы.БазоваяФункциональность.
//
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
	НовыеРазрешения = Новый Массив;
	МодульРаботаВБезопасномРежиме = ОбщегоНазначения.ОбщийМодуль("РаботаВБезопасномРежиме");
	
	Разрешение = МодульРаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTPS",
		ХостСервисаВнешнихКомпонент(0),
		443,
		НСтр("ru = 'Сервис внешних компонент (ru)'"));
	НовыеРазрешения.Добавить(Разрешение);
	
	Разрешение = МодульРаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTPS",
		ХостСервисаВнешнихКомпонент(1),
		443,
		НСтр("ru = 'Сервис внешних компонент (eu)'"));
	НовыеРазрешения.Добавить(Разрешение);
	
	ЗапросыРазрешений.Добавить(МодульРаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(НовыеРазрешения));
	
КонецПроцедуры

#КонецОбласти

#Область БСПОбновлениеИнформационнойБазы

// Заполняет список обработчиков обновления информационной базы.
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия              = "2.3.1.7";
		Обработчик.Процедура           = "ПолучениеВнешнихКомпонент.ОбновитьНастройкиПолучениеВнешнихКомпонент";
		Обработчик.ОбщиеДанные         = Ложь;
		Обработчик.НачальноеЗаполнение = Ложь;
		Обработчик.РежимВыполнения     = "Отложенно";
		Обработчик.Идентификатор       = Новый УникальныйИдентификатор("0589c734-f2a8-4af1-97b1-6e8deb4830d6");
		Обработчик.Комментарий         = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1. Обновление настроек получения внешних компонент.'"),
			ИмяСобытияЖурналаРегистрации());
	КонецЕсли;
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия              = "2.7.2.23";
		Обработчик.Процедура           = "ПолучениеВнешнихКомпонент.УстановитьНастройкиПолученияВнешнихКомпонент";
		Обработчик.ОбщиеДанные         = Ложь;
		Обработчик.НачальноеЗаполнение = Ложь;
		Обработчик.РежимВыполнения     = "Отложенно";
		Обработчик.Идентификатор       = Новый УникальныйИдентификатор("71c61b49-5110-49d7-99ea-9c038445df88");
		Обработчик.Комментарий         = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1. Установка настроек получения внешних компонент.'"),
			ИмяСобытияЖурналаРегистрации());
	КонецЕсли;
	
КонецПроцедуры

// Добавляет регламентное задание проверки обновлений внешних компонент.
//
Процедура ОбновитьНастройкиПолучениеВнешнихКомпонент(Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Обновление настроек подсистемы ""Получение внешних компонент"". Начало обновления.'"),
		Ложь);
	
	ДобавитьРегламентноеЗаданиеОбновления();
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Обновление настроек подсистемы ""Получение внешних компонент"". Успешно завершено.'"),
		Ложь);
	
КонецПроцедуры

// Устанавливает начальное значение константы ВариантОбновленияВнешнихКомпонент.
//
Процедура УстановитьНастройкиПолученияВнешнихКомпонент(Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Обновление настроек подсистемы ""Получение внешних компонент"". Начало обновления.'"),
		Ложь);
	
	Если Не ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки() Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ОбновлениеВнешнихКомпонент);
	Отбор.Вставить("Использование", Истина);
	
	ЗаданияОбновления = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	
	Если ЗаданияОбновления.Количество() > 0 Тогда
		
		НачатьТранзакцию();
		
		Попытка
			Константы.ВариантОбновленияВнешнихКомпонент.Установить(РежимОбновленияИзСервиса());
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ИнформацияОбОшибке = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЗаписатьИнформациюВЖурналРегистрации(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось задать вариант обновления внешних компонент по причине:
							|%1'"),
						ИнформацияОбОшибке));
			ВызватьИсключение ИнформацияОбОшибке;
		КонецПопытки;
		
		ЗаписатьИнформациюВЖурналРегистрации(
			НСтр("ru = 'Установлен вариант обновления внешних компонент.'"),
			Ложь);
		
	Иначе
		ДобавитьРегламентноеЗаданиеОбновления();
	КонецЕсли;
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Обновление настроек подсистемы ""Получение внешних компонент"". Успешно завершено.'"),
		Ложь);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ИнтеграцияПодсистемИнтернетПоддержкиПользователей

// Вызывается при изменении логина и пароля пользователя ИПП в
// информационной базе из всех контекстов использования библиотеки.
//
Процедура ПриИзмененииДанныхАутентификации(Логин, Пароль) Экспорт
	
	Если ЗначениеЗаполнено(Логин) Тогда
		Если Константы.ВариантОбновленияВнешнихКомпонент.Получить() = РежимОбновленияОтключено() Тогда
			Константы.ВариантОбновленияВнешнихКомпонент.Установить(
				РежимОбновленияИзСервиса());
			// Использование регламентных заданий включится в менеджере константы.
		Иначе
			УстановитьИспользованиеРегламентныхЗаданий(Истина);
		КонецЕсли;
	Иначе
		Если Константы.ВариантОбновленияВнешнихКомпонент.Получить() = РежимОбновленияИзСервиса() Тогда
			УстановитьИспользованиеРегламентныхЗаданий(Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет описание используемых в подсистеме хостов сервисов Интернет-поддержки.
//
// Параметры:
//  ХостыСервисовИнтернетПоддержки - Соответствие - хост и название используемого сервиса.
//
Процедура ПриЗаполненииХостовСервисовИнтернетПоддержки(ХостыСервисовИнтернетПоддержки) Экспорт
	
	ХостыСервисовИнтернетПоддержки.Вставить(
		ХостСервисаВнешнихКомпонент(0),
		НСтр("ru = 'Получение внешних компонент'"));
	ХостыСервисовИнтернетПоддержки.Вставить(
		ХостСервисаВнешнихКомпонент(1),
		НСтр("ru = 'Получение внешних компонент'"));
	
КонецПроцедуры

// Вызывается из обработчика ПриСозданииНаСервере() панели администрирования
// БИП, выполняется настройку отображения элементов управления для подсистем
// библиотеки ИПП.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма панели управления.
//
Процедура ИнтернетПоддержкаИСервисыПриСозданииНаСервере(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	Если Не Пользователи.ЭтоПолноправныйПользователь() Тогда
		Элементы.ОбновлениеВнешнихКомпонент.Видимость = Ложь;
	КонецЕсли;
	
	НастройкиОбновления = НастройкиОбновленияВнешнихКомпонент();
	
	Если НастройкиОбновления.ДоступнаЗагрузкаВнешнихКомпонент
			И ДоступноИзменениеНастроекРегламентногоЗадания() Тогда
		Элементы.ГруппаОбновлениеВнешнихКомпонент.Видимость = Истина;
	Иначе
		Элементы.ГруппаОбновлениеВнешнихКомпонент.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Форма.ВариантОбновленияВнешнихКомпонент = НастройкиОбновления.ВариантОбновления;
	Форма.ФайлВнешнихКомпонент = НастройкиОбновления.ФайлВнешнихКомпонент;
	Форма.ВариантОбновленияВнешнихКомпонентПредыдущееЗначение = НастройкиОбновления.ВариантОбновления;
	
	Элементы.ДекорацияРасписаниеОбновленияВнешнихКомпонент.Заголовок = НастройкиОбновления.ПредставлениеРасписания;
	
	Если Не ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки()
			И Форма.ВариантОбновленияВнешнихКомпонент = РежимОбновленияИзСервиса() Тогда
		Элементы.ДекорацияОбновлениеВнешнихКомпонентНеВыполняется.Видимость = Истина;
	Иначе
		Элементы.ДекорацияОбновлениеВнешнихКомпонентНеВыполняется.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРегламентныхЗаданий

// Обработчик регламентного задания "ОбновлениеВнешнихКомпонент"
//
Процедура ОбновлениеВнешнихКомпонент() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ОбновлениеВнешнихКомпонент);
		
	РежимОбновления = Константы.ВариантОбновленияВнешнихКомпонент.Получить();
	Если РежимОбновления = РежимОбновленияИзСервиса() Тогда
		
		Если Не ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки() Тогда
			ЗаписатьИнформациюВЖурналРегистрации(
				НСтр("ru = 'Не заполнены данные аутентификации Интернет-поддержки пользователей.
					|Обновление внешних компонент из сервиса невозможно.'"),
			Ложь,
			Метаданные.РегламентныеЗадания.ОбновлениеВнешнихКомпонент);
			Возврат;
		КонецЕсли;
		
		ОбновитьВнешниеКомпоненты();
		
	ИначеЕсли РежимОбновления = РежимОбновленияИзФайла() Тогда
		
		ИмяФайла = Константы.ФайлВнешнихКомпонент.Получить();
		Если Не ЗначениеЗаполнено(ИмяФайла) Тогда
			ЗаписатьИнформациюВЖурналРегистрации(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Файл %1 с внешними компонентами не найден.'"),
					ИмяФайла),
				Истина,
				Метаданные.РегламентныеЗадания.ОбновлениеВнешнихКомпонент);
			Возврат;
		КонецЕсли;
		
		ФайлВнешнихКомпонент = Новый Файл(ИмяФайла);
		Если Не ФайлВнешнихКомпонент.Существует() Тогда
			ЗаписатьИнформациюВЖурналРегистрации(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Файл %1 с внешними компонентами не существует.'"),
					ИмяФайла),
				Истина,
				Метаданные.РегламентныеЗадания.ОбновлениеВнешнихКомпонент);
			Возврат;
		КонецЕсли;
		
		ОбновитьВнешниеКомпонентыИзФайла(ИмяФайла);
		
	КонецЕсли;
	
КонецПроцедуры

// Изменяет признак использования регламентного задания "ОбновлениеВнешнихКомпонент".
//
// Параметры:
//  Использование - Булево - признак использования регламентного задания.
//
Процедура УстановитьИспользованиеРегламентныхЗаданий(Использование) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Задания = ЗаданияОбновлениеВнешнихКомпонент();
	Если Задания.Количество() <> 0 Тогда
		Для Каждого Задание Из Задания Цикл
			РегламентныеЗаданияСервер.УстановитьИспользованиеРегламентногоЗадания(
				Задание,
				Использование);
		КонецЦикла;
	Иначе
		ДобавитьРегламентноеЗаданиеОбновления(Использование);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаВМоделиСервиса

// См. ПоставляемыеДанныеПереопределяемый.ПолучитьОбработчикиПоставляемыхДанных.
//
Процедура ПриОпределенииОбработчиковПоставляемыхДанных(Обработчики) Экспорт
	
	ВидыДанных = ВидыПоставляемыхДанныхВнешниеКомпоненты();
	Для Каждого ВидДанных Из ВидыДанных Цикл 
		СтрОбработчик = Обработчики.Добавить();
		СтрОбработчик.ВидДанных      = ВидДанных;
		СтрОбработчик.КодОбработчика = ВидДанных;
		СтрОбработчик.Обработчик     = ОбщегоНазначения.ОбщийМодуль("ПолучениеВнешнихКомпонент");
	КонецЦикла;
	
КонецПроцедуры

// Вызывается при получении уведомления о новых данных.
// В теле следует проверить, необходимы ли эти данные приложению,
//  и если ДА - установить флажок Загружать.
// 
// Параметры:
//   Дескриптор   - ОбъектXDTO Descriptor.
//   Загружать    - булево, возвращаемое.
//
Процедура ДоступныНовыеДанные(Знач Дескриптор, Загружать) Экспорт
	
	ВидДанных = Дескриптор.DataType;
	Если СтрНайти(ВидДанных, ВидПоставляемыхДанныхВнешниеКомпоненты()) = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Идентификатор = "";
	Для Каждого Характеристика Из Дескриптор.Properties.Property Цикл
		Если Характеристика.Code = "Идентификатор" Тогда
			Идентификатор = Характеристика.Value;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Идентификатор) Тогда
		Возврат;
	КонецЕсли;
	
	ИспользуемыеКомпоненты = ИспользуемыеКомпоненты();
	
	Загружать = (ИспользуемыеКомпоненты.Найти(Идентификатор) <> Неопределено);
	
КонецПроцедуры

// Вызывается после вызова ДоступныНовыеДанные, позволяет разобрать данные.
//
// Параметры:
//   Дескриптор   - ОбъектXDTO Дескриптор.
//   ПутьКФайлу   - строка. Полное имя извлеченного файла. Файл будет автоматически удален 
//                  после завершения процедуры.
//
Процедура ОбработатьНовыеДанные(Знач Дескриптор, Знач ПутьКФайлу) Экспорт
	
	ВидДанных = Дескриптор.DataType;
	Если СтрНайти(ВидДанных, ВидПоставляемыхДанныхВнешниеКомпоненты()) = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МодульВнешниеКомпоненты = ОбщегоНазначения.ОбщийМодуль("ВнешниеКомпонентыСервер");
	ОписаниеКомпоненты      = МодульВнешниеКомпоненты.ОписаниеПоставляемойОбщейКомпоненты();
	
	Для Каждого Характеристика Из Дескриптор.Properties.Property Цикл
		Если Характеристика.Code = "Идентификатор" Тогда
			ОписаниеКомпоненты.Идентификатор = Характеристика.Value;
		ИначеЕсли Характеристика.Code = "Версия" Тогда
			ОписаниеКомпоненты.Версия = Характеристика.Value;
		ИначеЕсли Характеристика.Code = "ДатаВерсии" Тогда
			ОписаниеКомпоненты.ДатаВерсии = СтрокаВДату(Характеристика.Value);
		ИначеЕсли Характеристика.Code = "Наименование" Тогда
			ОписаниеКомпоненты.Наименование = Характеристика.Value;
		ИначеЕсли Характеристика.Code = "ИмяФайла" Тогда
			ОписаниеКомпоненты.ИмяФайла = Характеристика.Value;
		КонецЕсли;
	КонецЦикла;
	
	ОписаниеКомпоненты.ПутьКФайлу = ПутьКФайлу;
	МодульВнешниеКомпоненты.ОбновитьОбщуюКомпоненту(ОписаниеКомпоненты);
	
КонецПроцедуры

// Вызывается при отмене обработки данных в случае сбоя
//
Процедура ОбработкаДанныхОтменена(Знач Дескриптор) Экспорт
	
	МодульПоставляемыеДанные = ОбщегоНазначения.ОбщийМодуль("ПоставляемыеДанные");
	
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Обработка поставляемых данных не выполнена.
				|Поставляемые данные:
				|%1'"),
			МодульПоставляемыеДанные.ПолучитьОписаниеДанных(Дескриптор)));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаОбновлениеВнешнихКомпонент

// Получение всех идентификаторов и версий внешних компонент,
// которые используются в конфигурации. Функция используется для
// интерактивной загрузки данных из обработки "Обновление внешних компонент".
//
// Параметры:
//  ФильтрВнешнихКомпонент - СписокЗначений - фильтр по идентификаторам внешних компонент.
//
// Возвращаемое значение:
//  ТаблицаЗначений - содержит настройки внешних компонент.
//
Функция ДанныеВнешнихКомпонентДляИнтерактивногоОбновления(
		ФильтрВнешнихКомпонент) Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		ВызватьИсключение НСтр("ru = 'Использование функции при работе в модели сервиса запрещено.'");
	КонецЕсли;
	
	МодульВнешниеКомпонентыСервер = ОбщегоНазначения.ОбщийМодуль("ВнешниеКомпонентыСервер");
	ОписаниеВнешнихКомпонент = МодульВнешниеКомпонентыСервер.ИспользуемыеКомпоненты("ДляЗагрузки");
	
	ФильтрУстановлен = ФильтрВнешнихКомпонент.Количество() > 0;
	СтрокиУдалить = Новый Массив;
	Для Каждого ОписаниеВнешнейКомпоненты Из ОписаниеВнешнихКомпонент Цикл
		
		Если ФильтрУстановлен
				И ФильтрВнешнихКомпонент.НайтиПоЗначению(ОписаниеВнешнейКомпоненты.Идентификатор) = Неопределено Тогда
			СтрокиУдалить.Добавить(ОписаниеВнешнейКомпоненты);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ОписаниеВнешнейКомпоненты Из СтрокиУдалить Цикл
		ОписаниеВнешнихКомпонент.Удалить(ОписаниеВнешнейКомпоненты);
	КонецЦикла;
	
	Возврат ОписаниеВнешнихКомпонент;
	
КонецФункции

// Выполняет обновление данных внешних компонент в фоновом задании.
//
// Параметры:
//  ПараметрыПроцедуры - Структура - данные для обновления;
//  АдресХранилища - Строка - адрес хранилища результат обновления.
//
Процедура ИнтерактивноеОбновлениеВнешнихКомпонентИзСервиса(
		ПараметрыПроцедуры,
		АдресХранилища) Экспорт
	
	РезультатОбновления = Новый Структура;
	РезультатОбновления.Вставить("КодОшибки",         "");
	РезультатОбновления.Вставить("СообщениеОбОшибке", "");
	
	ДанныеВнешнихКомпонент = ПараметрыПроцедуры.ДанныеВнешнихКомпонент;
	ДанныеВнешнихКомпонент.Колонки.Добавить("АдресФайла", ОбщегоНазначения.ОписаниеТипаСтрока(250));
	ДанныеВнешнихКомпонент.Колонки.Добавить("КодОшибки", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	
	Результат = ДанныеАутентификации();
	Если Результат.Ошибка Тогда
		РезультатОбновления.КодОшибки = "НеверныйЛогинИлиПароль";
		РезультатОбновления.СообщениеОбОшибке = Результат.ИнформацияОбОшибке;
		ПоместитьВоВременноеХранилище(РезультатОбновления, АдресХранилища);
		Возврат;
	КонецЕсли;
	
	РезультатЗагрузки = Новый Структура;
	РезультатЗагрузки.Вставить("КодОшибки",         "");
	РезультатЗагрузки.Вставить("СообщениеОбОшибке", "");
	РезультатЗагрузки.Вставить("ИнформацияОбОшибке",     "");
	РезультатЗагрузки.Вставить("ДанныеВнешнихКомпонент", ДанныеВнешнихКомпонент);
	ЗагрузитьФайлыВнешнихКомпонент(
		РезультатЗагрузки);
	
	Если ЗначениеЗаполнено(РезультатЗагрузки.КодОшибки) Тогда
		ЗаполнитьЗначенияСвойств(
			РезультатОбновления,
			РезультатЗагрузки,
			"КодОшибки, СообщениеОбОшибке");
		ПоместитьВоВременноеХранилище(РезультатОбновления, АдресХранилища);
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РезультатЗагрузки.КодОшибки) Тогда
		МодульВнешниеКомпонентыСервер = ОбщегоНазначения.ОбщийМодуль("ВнешниеКомпонентыСервер");
		МодульВнешниеКомпонентыСервер.ОбновитьВнешниеКомпоненты(РезультатЗагрузки.ДанныеВнешнихКомпонент, АдресХранилища);
	КонецЕсли;
	
КонецПроцедуры

// Обработка файла с обновлениями внешних компонент в фоновом задании.
//
// Параметры:
//  ПараметрыПроцедуры - Структура - данные для обновления;
//  АдресХранилища - Строка - адрес хранилища результат обновления.
//
Процедура ИнтерактивноеОбновлениеВнешнихКомпонентИзФайла(
		ПараметрыПроцедуры,
		АдресХранилища) Экспорт
	
	ДанныеФайла            = ПараметрыПроцедуры.ДанныеФайла;
	ДанныеВнешнихКомпонент = ПараметрыПроцедуры.ДанныеВнешнихКомпонент;
	
	ДанныеВнешнихКомпонент.Колонки.Добавить("АдресФайла", ОбщегоНазначения.ОписаниеТипаСтрока(250));
	ДанныеВнешнихКомпонент.Колонки.Добавить("КодОшибки", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	
	ИмяФайлаВнешнихКомпонент = ПолучитьИмяВременногоФайла(".zip");
	ДанныеФайла.Записать(ИмяФайлаВнешнихКомпонент);
	ДанныеФайла = Неопределено;
	
	ПомещениеФайловВнешнихКомпонентВХранилище(
		ИмяФайлаВнешнихКомпонент,
		ДанныеВнешнихКомпонент);
	
	ФайловаяСистема.УдалитьВременныйФайл(ИмяФайлаВнешнихКомпонент);
	
	МодульВнешниеКомпонентыСервер = ОбщегоНазначения.ОбщийМодуль("ВнешниеКомпонентыСервер");
	МодульВнешниеКомпонентыСервер.ОбновитьВнешниеКомпоненты(ДанныеВнешнихКомпонент, АдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиРегламентныхЗаданий

// Создает регламентное задание "ОбновлениеВнешнихКомпонент"
// при обновлении ИБ или при подключении Интернет-поддержки пользователей.
//
// Параметры:
//  Использование - Булево - признак использования регламентного задания
//
Процедура ДобавитьРегламентноеЗаданиеОбновления(Использование = Истина)
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки() Тогда
		Возврат;
	КонецЕсли;
		
	Отбор = Новый Структура;
	Отбор.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ОбновлениеВнешнихКомпонент);
	ЗаданияОбновления = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	
	Если ЗаданияОбновления.Количество() = 0 Тогда
		
		// Чтобы не создавать пиковых нагрузок на сервис,
		// время обновления будет выбрано случайным образом
		// между 00:00 и 06:00.
		Генератор = Новый ГенераторСлучайныхЧисел;
		Расписание = Новый РасписаниеРегламентногоЗадания;
		Расписание.ВремяНачала       = Дата("00010101") + Генератор.СлучайноеЧисло(0, 21600);
		Расписание.ПериодПовтораДней = 1;
		
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("Использование", Использование);
		ПараметрыЗадания.Вставить("Метаданные",    Метаданные.РегламентныеЗадания.ОбновлениеВнешнихКомпонент);
		ПараметрыЗадания.Вставить("Расписание",    Расписание);
		ПараметрыЗадания.Вставить("Наименование",  НСтр("ru = 'Обновление внешних компонент'"));
		
		НачатьТранзакцию();
		
		Попытка
			РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
			Если Использование
					И Константы.ВариантОбновленияВнешнихКомпонент.Получить() = РежимОбновленияОтключено() Тогда
				Константы.ВариантОбновленияВнешнихКомпонент.Установить(
					РежимОбновленияИзСервиса());
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ИнформацияОбОшибке = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЗаписатьИнформациюВЖурналРегистрации(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось создать регламентное задание обновления внешних компонент по причине:
							|%1'"),
						ИнформацияОбОшибке),
					Истина,
					Метаданные.РегламентныеЗадания.ОбновлениеВнешнихКомпонент);
			ВызватьИсключение ИнформацияОбОшибке;
		КонецПопытки;
		
		ЗаписатьИнформациюВЖурналРегистрации(
			НСтр("ru = 'Создано регламентное задание обновления внешних компонент.'"),
			Ложь,
			Метаданные.РегламентныеЗадания.ОбновлениеВнешнихКомпонент);
	КонецЕсли;
	
КонецПроцедуры

// Задает расписание регламентного задания.
//
// Параметры:
//  Расписание - РасписаниеРегламентногоЗадания - расписание обновления внешних компонент.
//
Процедура ЗаписатьРасписаниеОбновления(Расписание)
	
	ПериодПовтораВТечениеДня = Расписание.ПериодПовтораВТечениеДня;
	Если ПериодПовтораВТечениеДня > 0
		И ПериодПовтораВТечениеДня < 300 Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Интервал обновления не может быть задан чаще, чем один раз 5 минут.'"));
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ЗаданияОбновления = ЗаданияОбновлениеВнешнихКомпонент();
	Если ЗаданияОбновления.Количество() <> 0 Тогда
		РегламентныеЗаданияСервер.УстановитьРасписаниеРегламентногоЗадания(
			ЗаданияОбновления[0],
			Расписание);
	КонецЕсли;
	
КонецПроцедуры

// Определяет созданные регламентные задания ОбновлениеВнешнихКомпонент.
//
// Возвращаемое значение:
//  Массив из РегламентноеЗадание - массив регламентных заданий см. описание метода РегламентноеЗадание
//  в синтакс-помощнике.
//
Функция ЗаданияОбновлениеВнешнихКомпонент()
	
	Отбор = Новый Структура;
	Отбор.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ОбновлениеВнешнихКомпонент);
	Возврат РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	
КонецФункции

#КонецОбласти

#Область ВызовОперацийСервиса

////////////////////////////////////////////////////////////////////////////////
// Вызов операции /external-components/version/latest.

// Возвращает список описаний актуальных версий компонент, которые доступны пользователю
// на текущий момент.
//
// Параметры:
//  ОписаниеВнешнихКомпонент  - ТаблицаЗначений - см. функцию ПолучениеВнешнихКомпонент.ОписаниеВнешнихКомпонент.
//
// Возвращаемое значение:
//   Структура - содержит результат операции:
//    *КодОшибки              - Строка -код ошибки сервиса внешних компонент;
//    *СообщениеОбОшибке      - Строка - описание ошибки для пользователя;
//    *ИнформацияОбОшибке     - Строка - описание ошибки для администратора;
//    *ДанныеВнешнихКомпонент - ТаблицаЗначений - информация о внешних компонент:
//      **Идентификатор       - Строка - содержит уникальный идентификатор внешней компоненты, который
//                              указывается пользователем при создании новой компоненты;
//      **Версия              - Строка, Неопределено - содержит номер версии загруженного компонента;
//      **ДатаВерсии          - Дата, Неопределено - содержит дату выхода версии загруженного,
//                              компонента установленную в при заполнении информации о версии
//                              внешней компоненты;
//       **Наименование       - Строка, Неопределено - содержит наименование внешней компоненты, к которой
//                              относится версия;
//      **ИмяФайла            - Строка, Неопределено - содержит имя файла, установленное
//                             в при создании версии внешней компоненты;
//      **ИдентификаторФайла  - Строка - содержит URL, по которому доступно скачивание
//                             файла внешней компоненты;
//      **КонтрольнаяСумма    - Строка - содержит хеш MD5 закодированный в строку base64.
//                             Используется для проверки целостности файлов;
//      **АдресФайла          - Строка, Неопределено - содержит адрес файла внешней
//                              компоненты во временно хранилище;
//      **КодОшибки           - Строка - содержит код ошибки загрузки внешней компоненты.
//
Функция ИнформацияОбАктуальныхВерсияхВнешнихКомпонент(ОписаниеВнешнихКомпонент, ДанныеАутентификации)
	
	Идентификаторы = ОписаниеВнешнихКомпонент.ВыгрузитьКолонку("Идентификатор");
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Начало получения информации об актуальных версиях внешних компонент: %1'"),
		СтрСоединить(Идентификаторы, ","));
	
	ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	РезультатОперации    = ОписаниеРезультатаЗагрузки();
	ПараметрыПодключения = ИнициализироватьПараметрыОбновления();
	
	URLОперации = URLОперацииСервисаВнешнихКомпонент(
		"/version/latest",
		ПараметрыПодключения.НастройкиСоединения.ДоменРасположенияСерверовИПП);
	
	ПараметрыЗапросаJSON = versionlatest(
		Идентификаторы,
		ДанныеАутентификации,
		ИнтернетПоддержкаПользователей.ДополнительныеПараметрыВызоваОперацииСервиса());
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки         = ПереопределитьКодОшибкиСервиса(РезультатОтправки.КодСостояния);
		РезультатОперации.СообщениеОбОшибке = ПереопределитьСообщениеПользователю(РезультатОперации.КодОшибки);
		
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункции.ФорматированнаяСтрока(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось получить актуальные версии внешних компонент.
					|
					|%1
					|
					|Техническая информация об ошибке:
					|При получении информации об актуальных версиях внешних компонент сервис вернул ошибку.
					|URL: %2
					|Код ошибки: %3
					|Подробная информация:
					|%4'"),
				Строка(РезультатОперации.СообщениеОбОшибке),
				URLОперации,
				РезультатОтправки.КодОшибки,
				РезультатОтправки.ИнформацияОбОшибке));
		
		ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	ОбработатьОтветСервиса(
		РезультатОтправки.Содержимое,
		РезультатОперации.ДанныеВнешнихКомпонент,
		ПараметрыПодключения.НастройкиСоединения.ДоменРасположенияСерверовИПП);
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Завершено получение актуальных версий внешних компонент: %1'"),
		СтрСоединить(Идентификаторы, ","));
	
	ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	Возврат РезультатОперации;

КонецФункции

// Формирует параметры запроса для операции
// /external-components/version/latest.
//
Функция versionlatest(Идентификаторы, ДанныеАутентификации, ДополнительныеПараметры)
	
	// {
	//    "programNick":"nick",
	//    "externalComponentList":[nick1,nick2],
	//    "authenticationInfo": {
	//            "login": "User",
	//            "password":"Pass",
	//    },
	//    "additionalParameters" : {
	//        "key":"value"
	//    }
	// }
	
	ИмяПрограммы = ИнтернетПоддержкаПользователей.СлужебнаяИмяПрограммы();
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписатьДанныеАутентификации(ЗаписьДанныхСообщения, ДанныеАутентификации);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("programNick");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ИмяПрограммы);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("externalComponentNickList");
	ЗаписьДанныхСообщения.ЗаписатьНачалоМассива();
	Для каждого Идентификатор Из Идентификаторы Цикл
		ЗаписьДанныхСообщения.ЗаписатьЗначение(Идентификатор);
	КонецЦикла;
	ЗаписьДанныхСообщения.ЗаписатьКонецМассива();
	
	ИнтернетПоддержкаПользователей.ЗаписатьДополнительныеПараметрыЗапроса(
		ДополнительныеПараметры,
		ЗаписьДанныхСообщения);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вызов операции /external-components/version.

// Возвращает список описаний версий компонент, которые доступны пользователю
// на текущий момент.
//
// Параметры:
//  ОписаниеВнешнихКомпонент  - ТаблицаЗначений - см. функцию ПолучениеВнешнихКомпонент.ОписаниеВнешнихКомпонент.
//
// Возвращаемое значение:
//   Структура - содержит результат операции:
//    *КодОшибки              - Строка -код ошибки сервиса внешних компонент;
//    *СообщениеОбОшибке      - Строка - описание ошибки для пользователя;
//    *ИнформацияОбОшибке     - Строка - описание ошибки для администратора;
//    *ДанныеВнешнихКомпонент - ТаблицаЗначений - информация о внешних компонент:
//      **Идентификатор       - Строка - содержит уникальный идентификатор внешней компоненты, который
//                              указывается пользователем при создании новой компоненты;
//      **Версия              - Строка, Неопределено - содержит номер версии загруженного компонента;
//      **ДатаВерсии          - Дата, Неопределено - содержит дату выхода версии загруженного,
//                              компонента установленную в при заполнении информации о версии
//                              внешней компоненты;
//      **Наименование       - Строка, Неопределено - содержит наименование внешней компоненты, к которой
//                              относится версия;
//      **ИмяФайла            - Строка, Неопределено - содержит имя файла, установленное
//                             в при создании версии внешней компоненты;
//      **ИдентификаторФайла  - Строка - содержит URL, по которому доступно скачивание
//                             файла внешней компоненты;
//      **КонтрольнаяСумма    - Строка - содержит хеш MD5 закодированный в строку base64.
//                             Используется для проверки целостности файлов;
//      **АдресФайла          - Строка, Неопределено - содержит адрес файла внешней
//                              компоненты во временно хранилище;
//      **КодОшибки           - Строка - содержит код ошибки загрузки внешней компоненты.
//
Функция ИнформацияОВерсияхВнешнихКомпонент(ОписаниеВнешнихКомпонент)
	
	Идентификаторы = ОписаниеВнешнихКомпонент.ВыгрузитьКолонку("Идентификатор");
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Начало получения информации о версиях внешних компонент: %1'"),
		СтрСоединить(Идентификаторы, ","));
	
	ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	РезультатОперации    = ОписаниеРезультатаЗагрузки();
	ПараметрыПодключения = ИнициализироватьПараметрыОбновления();
	
	URLОперации = URLОперацииСервисаВнешнихКомпонент(
		"/version",
		ПараметрыПодключения.НастройкиСоединения.ДоменРасположенияСерверовИПП);
	
	Результат = ДанныеАутентификации();
	Если Результат.Ошибка Тогда
		РезультатОперации.КодОшибки = "НеверныйЛогинИлиПароль";
		ЗаполнитьЗначенияСвойств(РезультатОперации, Результат, "Ошибка, ИнформацияОбОшибке");
		РезультатОперации.СообщениеОбОшибке = Результат.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	ДанныеАутентификации = Результат.ДанныеАутентификации;
	
	ПараметрыЗапросаJSON = version(
		ОписаниеВнешнихКомпонент,
		ДанныеАутентификации,
		ИнтернетПоддержкаПользователей.ДополнительныеПараметрыВызоваОперацииСервиса());
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки         = ПереопределитьКодОшибкиСервиса(РезультатОтправки.КодСостояния);
		РезультатОперации.СообщениеОбОшибке = ПереопределитьСообщениеПользователю(РезультатОперации.КодОшибки);
		
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункции.ФорматированнаяСтрока(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось получить информацию о версиях внешних компонент.
					|
					|При получении информации о версиях внешних компонент сервис вернул ошибку.
					|
					|Техническая информация об ошибке:
					|При получении информации о версиях внешних компонент сервис вернул ошибку.
					|URL: %1
					|Код ошибки: %2
					|Подробная информация:
					|%3'"),
				URLОперации,
				РезультатОтправки.КодОшибки,
				РезультатОтправки.ИнформацияОбОшибке));
		
		ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	ОбработатьОтветСервиса(
		РезультатОтправки.Содержимое,
		РезультатОперации.ДанныеВнешнихКомпонент,
		ПараметрыПодключения.НастройкиСоединения.ДоменРасположенияСерверовИПП);
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Завершено получение версий внешних компонент: %1'"),
		СтрСоединить(Идентификаторы, ","));
	
	ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	Возврат РезультатОперации;

КонецФункции

// Формирует параметры запроса для операции
// /external-components/version.
//
Функция version(ОписаниеВнешнихКомпонент, ДанныеАутентификации, ДополнительныеПараметры)
	
	// {
	// "programNick":"nick",
	// "externalComponents": {
	// [
	//   {
	//    "externalComponentNick": "nick1",
	//    "version": "1"
	//    }
	//   {
	//   "externalComponentNick": "nick2",
	//   "version": "2"
	//   }
	// ],
	// "authenticationInfo": {
	//   "login": "User",
	//   "password":"Pass"},
	// "additionalParameters" : {
	//   "key":"value"}
	// }
	
	ИмяПрограммы = ИнтернетПоддержкаПользователей.СлужебнаяИмяПрограммы();
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписатьДанныеАутентификации(ЗаписьДанныхСообщения, ДанныеАутентификации);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("programNick");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ИмяПрограммы);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("externalComponents");
	ЗаписьДанныхСообщения.ЗаписатьНачалоМассива();
	Для Каждого ОписаниеВнешнейКомпоненты Из ОписаниеВнешнихКомпонент Цикл
		
		ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
		
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("externalComponentNick");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(ОписаниеВнешнейКомпоненты.Идентификатор);
		
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("version");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(ОписаниеВнешнейКомпоненты.Версия);
		
		ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
		
	КонецЦикла;
	ЗаписьДанныхСообщения.ЗаписатьКонецМассива();
	
	ИнтернетПоддержкаПользователей.ЗаписатьДополнительныеПараметрыЗапроса(
		ДополнительныеПараметры,
		ЗаписьДанныхСообщения);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработка ответа сервиса.

// Чтение ответа операции /external-components/version/latest
// и /external-components/version.
//
Процедура ОбработатьОтветСервиса(
		ТелоJSON,
		ДанныеВнешнихКомпонент,
		ДоменРасположенияСерверовИПП = 1)
	
	// Описание ответа сервиса:
	// externalComponentNick - идентификатор внешней компоненты в сервисе;
	// externalComponentName - наименование внешней компоненты.
	// version - номер актуальной версии;
	// fileUrl - ссылка на скачивание файла актуальной версии;
	// hashSum - контрольная сумма файла;
	// buildDate - дата создания версии;
	// fileSize - размер файла;
	// errorCode - код ошибки;
	//
	// {
	//   [
	//     {
	//      "externalComponentNick": "Идентификатор",
	//      "externalComponentName": "Электронная подпись",
	//      "version": "1",
	//      "buildData": "2017120212122323",
	//      "fileName": "ElectronicSignature_1_1_2_1.zip",
	//      "fileUrl": "https://fileUrl",
	//      "hashSum": "Контрольная сумма",
	//      "fileSize": "Размер в байтах",
	//      "errorCode": "Код ошибки"
	//     }
	//   ]
	// }
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получен ответ Сервиса внешних компонент:
			|%1'"),
		ТелоJSON);
	
	ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	ТекущийУровень = 0;
	ТекстОшибки    = "";
	
	Пока ЧтениеОтвета.Прочитать() Цикл
		
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоМассива Тогда
			ТекущийУровень = ТекущийУровень + 1;
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецМассива Тогда
			ТекущийУровень = ТекущийУровень - 1;
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства
			И ТекущийУровень = 1 Тогда
			
			Если ЧтениеОтвета.ТекущееЗначение = "externalComponentName" Тогда
				ОписательВерсии = ДанныеВнешнихКомпонент.Добавить();
				ОписательВерсии.Наименование = ЗначениеСвойстваJSON(ЧтениеОтвета, 0);
			ИначеЕсли ЧтениеОтвета.ТекущееЗначение = "externalComponentNick" Тогда
				ОписательВерсии.Идентификатор = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
			ИначеЕсли ЧтениеОтвета.ТекущееЗначение = "version" Тогда
				ОписательВерсии.Версия = ЗначениеСвойстваJSON(ЧтениеОтвета, 0);
			ИначеЕсли ЧтениеОтвета.ТекущееЗначение = "fileUrl" Тогда
				ОписательВерсии.ИдентификаторФайла = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
			ИначеЕсли ЧтениеОтвета.ТекущееЗначение = "hashSum" Тогда
				ОписательВерсии.КонтрольнаяСумма = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
			ИначеЕсли ЧтениеОтвета.ТекущееЗначение = "buildDate" Тогда
				ОписательВерсии.ДатаВерсии = ПривестиЗначениеКДате(
					ЗначениеСвойстваJSON(ЧтениеОтвета, ""));
			ИначеЕсли ЧтениеОтвета.ТекущееЗначение = "fileSize" Тогда
				ОписательВерсии.Размер = ЗначениеСвойстваJSON(ЧтениеОтвета, 0);
			ИначеЕсли ЧтениеОтвета.ТекущееЗначение = "fileName" Тогда
				ОписательВерсии.ИмяФайла = ЗначениеСвойстваJSON(ЧтениеОтвета, 0);
			ИначеЕсли ЧтениеОтвета.ТекущееЗначение = "errorCode" Тогда
				ОписательВерсии.КодОшибки = ПереопределитьКодОшибкиВнешнейКомпоненты(ЗначениеСвойстваJSON(ЧтениеОтвета, ""));
				Если ЗначениеЗаполнено(ОписательВерсии.КодОшибки) Тогда
					ТекстОшибки = ТекстОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '- при загрузке внешней компоненты %1 сервис вернул ошибку %2;'"),
						ОписательВерсии.Идентификатор,
						ОписательВерсии.КодОшибки);
					ТекстОшибки = ТекстОшибки + Символы.ПС;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибки при получении информации о внешних компонентах:
				|%1'"),
			ТекстОшибки);
		ЗаписатьИнформациюВЖурналРегистрации(ТекстОшибки);
	КонецЕсли;
	
	// Проверка формата ответа.
	ХостСервиса = ХостСервисаВнешнихКомпонент(ДоменРасположенияСерверовИПП);
	Для Каждого ОписательВерсии Из ДанныеВнешнихКомпонент Цикл
		Если Не ЗначениеЗаполнено(ОписательВерсии.Идентификатор) Тогда
			
			СообщениеОбОшибке = НСтр("ru = 'Неверный формат ответа Сервиса внешних компонент.'");
			ЗаписатьИнформациюВЖурналРегистрации(СообщениеОбОшибке);
			ВызватьИсключение СообщениеОбОшибке;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ОписательВерсии.ИдентификаторФайла) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(ОписательВерсии.ИдентификаторФайла);
		Если Прав(НРег(СокрЛП(СтруктураURI.Хост)), 6) <> Прав(НРег(СокрЛП(ХостСервиса)), 6) Тогда
			
			СообщениеОбОшибке = НСтр("ru = 'Неверный адрес файла обновления внешней компоненты.'");
			ЗаписатьИнформациюВЖурналРегистрации(СообщениеОбОшибке);
			ВызватьИсключение СообщениеОбОшибке;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вызов операции загрузки файлов /version/download/.

// Выполняет загрузку файлов по переданным ранее URL.
//
// Параметры:
//  РезультатОперации  - Структура - см. функцию ПолучениеВнешнихКомпонент.ОписаниеРезультатаЗагрузки().
//
Процедура ЗагрузитьФайлыВнешнихКомпонент(РезультатОперации)
	
	ДанныеАутентификации = ДанныеАутентификации();
	
	Результат = ДанныеАутентификации();
	Если Результат.Ошибка Тогда
		РезультатОперации.КодОшибки = "НеверныйЛогинИлиПароль";
		РезультатОперации.ИнформацияОбОшибке = Результат.ИнформацияОбОшибке;
		РезультатОперации.СообщениеОбОшибке  = Результат.ИнформацияОбОшибке;
		Возврат;
	КонецЕсли;
	
	ДанныеАутентификации = Результат.ДанныеАутентификации;
	ПараметрыЗапросаJSON = versiondownload(ДанныеАутентификации);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод",                    "POST");
	ПараметрыОтправки.Вставить("Таймаут",                  2560);
	ПараметрыОтправки.Вставить("ФорматОтвета",             2);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки",       ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("Заголовки",                Заголовки);
	
	Для Каждого ОписаниеВнешнейКомпоненты Из РезультатОперации.ДанныеВнешнихКомпонент Цикл
		
		// Если ИБ уже содержит актуальную версию внешней компоненты, повторная
		// загрузка файла не требуется.
		Если ЗначениеЗаполнено(ОписаниеВнешнейКомпоненты.КодОшибки) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Получение файла внешней компоненты: %1'"),
				ОписаниеВнешнейКомпоненты.ИдентификаторФайла),
			Ложь);
		
		ИнтернетПоддержкаПользователей.ПроверитьURL(ОписаниеВнешнейКомпоненты.ИдентификаторФайла);
		
		РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
			ОписаниеВнешнейКомпоненты.ИдентификаторФайла,
			,
			,
			ПараметрыОтправки);
		
		Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
			
			РезультатОперации.КодОшибки          = КодОшибкиФайлНеЗагружен();
			РезультатОперации.СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при получении файла внешней компоненты %1: 
					|%2'"),
				ОписаниеВнешнейКомпоненты.Идентификатор,
				РезультатОтправки.СообщениеОбОшибке);
				
			РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось получить файл внешней компоненты %1.
					|%2
					|
					|Техническая информация об ошибке:
					|При загрузке файла сервис вернул ошибку.
					|Код ошибки: %3.
					|URL Файла: %4
					|Подробная информация:
					|%5'"),
				ОписаниеВнешнейКомпоненты.Идентификатор,
				Строка(РезультатОперации.СообщениеОбОшибке),
				РезультатОперации.КодОшибки,
				ОписаниеВнешнейКомпоненты.ИдентификаторФайла,
				РезультатОтправки.ИнформацияОбОшибке);
			ЗаписатьИнформациюВЖурналРегистрации(
				РезультатОперации.ИнформацияОбОшибке,
				Истина);
			
			Продолжить;
			
		КонецЕсли;
		
		КонтрольнаяСуммаФайл = ИнтернетПоддержкаПользователей.КонтрольнаяСуммаФайла(РезультатОтправки.Содержимое);
		Если ОписаниеВнешнейКомпоненты.КонтрольнаяСумма <> КонтрольнаяСуммаФайл Тогда
			РезультатОперации.КодОшибки          = КодОшибкиФайлНеЗагружен();
			РезультатОперации.СообщениеОбОшибке  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при получении файла внешней компоненты %1: 
					|%2'"),
				ОписаниеВнешнейКомпоненты.Идентификатор,
				НСтр("ru = 'Получен некорректный файл.'"));
				
			РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось получить файл внешней компоненты %1.
					|Контрольная сумма полученного файла отличается от ожидаемой.'"),
				ОписаниеВнешнейКомпоненты.Идентификатор);
			ЗаписатьИнформациюВЖурналРегистрации(РезультатОперации.ИнформацияОбОшибке);
			
			Продолжить;
		КонецЕсли;
		
		ОписаниеВнешнейКомпоненты.АдресФайла = ПоместитьВоВременноеХранилище(РезультатОтправки.Содержимое);
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует параметры запроса для операции
// /version/download/.
//
Функция versiondownload(ДанныеАутентификации)
	
	// {
	//  "programNick":"nick",
	//  "login": "User",
	//  "password":"Pass"
	// }
	
	ИмяПрограммы = ИнтернетПоддержкаПользователей.СлужебнаяИмяПрограммы();
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("programNick");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ИмяПрограммы);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("login");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеАутентификации.Логин);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("password");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеАутентификации.Пароль);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

#КонецОбласти

#Область ОбработкаВнешнихКомпонентИзФайла

// Выполняет загрузку обновления внешних компонент и обработку данных из файла.
//
// Параметры:
//  ИмяФайла - Строка - путь к файлу с данными внешних компонент.
//
Процедура ОбновитьВнешниеКомпонентыИзФайла(ИмяФайла)
	
	// 1. Проверка доступности получения внешних компонент из сервиса.
	ПроверитьДоступностьЗагрузки();
	
	// 2. Формирование списка внешних компонент к обновлению.
	МодульВнешниеКомпонентыСервер = ОбщегоНазначения.ОбщийМодуль("ВнешниеКомпонентыСервер");
	ВерсииВнешнихКомпонентИБ = МодульВнешниеКомпонентыСервер.ИспользуемыеКомпоненты("ДляОбновления");
	Если ВерсииВнешнихКомпонентИБ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// 3. Получение информации об актуальных версиях внешних компонент из файла.
	РезультатОперации = ВерсииВнешнихКомпонентИзФайла(ИмяФайла);
	Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	// 4. Определение актуальных версий к обновлению.
	ДанныеВнешнихКомпонентДляОбновления(ВерсииВнешнихКомпонентИБ, РезультатОперации);
	
	// 5. Копирование файлов версий внешних компонент.
	ПомещениеФайловВнешнихКомпонентВХранилище(
		ИмяФайла,
		РезультатОперации.ДанныеВнешнихКомпонент);
	
	// 6. Подготовка результата загрузки.
	УдалитьСлужебныеДанныеВнешнихКомпонент(РезультатОперации.ДанныеВнешнихКомпонент);
	
	// 7. Обработка загруженных компонент.
	Если Не ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
		МодульВнешниеКомпонентыСервер.ОбновитьВнешниеКомпоненты(РезультатОперации.ДанныеВнешнихКомпонент);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает описание версий внешних компонент из файла-архива.
//
// Параметры:
//  ИмяФайла - Строка - путь к файлу.
// 
// Возвращаемое значение:
//  Структура - см ОписаниеРезультатаЗагрузки.
//
Функция ВерсииВнешнихКомпонентИзФайла(ИмяФайла) Экспорт
	
	РезультатОперации = ОписаниеРезультатаЗагрузки();
	
	Если ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ИмяФайла) <> "zip" Тогда
		Возврат РезультатОперации;
	КонецЕсли;
	
	ФайлМанифеста = Неопределено;
	
	ЧтениеZipФайла = Новый ЧтениеZipФайла(ИмяФайла);
	Для Каждого ЭлементАрхива Из ЧтениеZipФайла.Элементы Цикл
		
		Если ВРег(ЭлементАрхива.Имя) = "EXTERNAL-COMPONENTS.JSON" Тогда
			ФайлМанифеста = ЭлементАрхива;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ФайлМанифеста = Неопределено Тогда
		
		РезультатОперации.КодОшибки          = "ОтсутствуетФайлОписанияВнешнихКомпонент";
		РезультатОперации.СообщениеОбОшибке  = НСтр("ru = 'Отсутствует файл с описанием внешних компонент.'");
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить описание внешних компонент из файла по причине:
				|%1'"),
			РезультатОперации.СообщениеОбОшибке);
		ЗаписатьИнформациюВЖурналРегистрации(
			РезультатОперации.ИнформацияОбОшибке);
		
		ЧтениеZipФайла.Закрыть();
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	КаталогОписания = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(
		ПолучитьИмяВременногоФайла(ФайлМанифеста.ИмяБезРасширения));
	ЧтениеZipФайла.Извлечь(ФайлМанифеста, КаталогОписания, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
	ИмяФайлаОписания = КаталогОписания + ФайлМанифеста.Имя;
	
	РезультатОперации = ИнформацияОВерсияхВнешнихКомпонентИзФайла(ИмяФайлаОписания);
	УдалитьФайлы(КаталогОписания);
	
	ЧтениеZipФайла.Закрыть();
	
	Возврат РезультатОперации;
	
КонецФункции

// Возвращает описание версий внешних компонент из файла-манифеста json.
//
// Параметры:
//  ИмяФайла - Строка - путь к файлу.
// 
// Возвращаемое значение:
//  Структура - см ОписаниеРезультатаЗагрузки.
//
Функция ИнформацияОВерсияхВнешнихКомпонентИзФайла(ИмяФайла)
	
	РезультатОперации = ОписаниеРезультатаЗагрузки();
	
	Попытка
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.ОткрытьФайл(ИмяФайла);
		ВерсииВнешнихКомпонент = ПрочитатьJSON(ЧтениеJSON, , "buildDate");
		
		// Заполнение таблицы с обновлениями.
		Для Каждого ОписаниеВнешнейКомпоненты Из ВерсииВнешнихКомпонент Цикл
			
			ОписательВерсии = РезультатОперации.ДанныеВнешнихКомпонент.Добавить();
			ОписательВерсии.Идентификатор      = ОписаниеВнешнейКомпоненты.externalComponentNick;
			ОписательВерсии.Наименование       = ОписаниеВнешнейКомпоненты.externalComponentName;
			ОписательВерсии.Версия             = ОписаниеВнешнейКомпоненты.version;
			ОписательВерсии.ДатаВерсии         = ОписаниеВнешнейКомпоненты.buildDate;
			ОписательВерсии.ИмяФайла           = ОписаниеВнешнейКомпоненты.fileName;
			ОписательВерсии.ИдентификаторФайла = ОписаниеВнешнейКомпоненты.fileName;
			
		КонецЦикла;
	
	Исключение
		
		РезультатОперации.КодОшибки = "НекорректныйФайлОписанияВнешнихКомпонент";
		РезультатОперации.СообщениеОбОшибке  = НСтр("ru = 'Ошибка обработки файла описания внешних компонент.'");
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить описание внешних компонент из файла по причине:
				|%1'"),
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписатьИнформациюВЖурналРегистрации(
			РезультатОперации.ИнформацияОбОшибке);
		
	КонецПопытки;
	
	ЧтениеJSON.Закрыть();
	
	Возврат РезультатОперации;
	
КонецФункции

// Оставляет в таблице только используемые внешние компоненты, которым требуется обновление.
//
// Параметры:
//  ВерсииВнешнихКомпонентИБ - ТаблицаЗначений - внешние компоненты для обновления.
//                             см. ПолучениеВнешнихКомпонент.ОписаниеВнешнихКомпонент
//  РезультатОперации - Структура - данные внешних компонент в файле.
//                             см ОписаниеРезультатаЗагрузки.
//
Процедура ДанныеВнешнихКомпонентДляОбновления(ВерсииВнешнихКомпонентИБ, РезультатОперации)
	
	СтрокиУдалить = Новый Массив;
	Для Каждого ОписаниеВнешнейКомпоненты Из РезультатОперации.ДанныеВнешнихКомпонент Цикл
		
		ТребуетсяОбновление = Истина;
		ВнешняяКомпонентаИспользуется = Ложь;
		Для Каждого ВерсияВнешнейКомпонентыИБ Из ВерсииВнешнихКомпонентИБ Цикл
			Если ВерсияВнешнейКомпонентыИБ.Идентификатор = ОписаниеВнешнейКомпоненты.Идентификатор Тогда
				ВнешняяКомпонентаИспользуется = Истина;
				Если ВерсияВнешнейКомпонентыИБ.ДатаВерсии >= ОписаниеВнешнейКомпоненты.ДатаВерсии Тогда
					ТребуетсяОбновление = Ложь;
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ВнешняяКомпонентаИспользуется Или Не ТребуетсяОбновление Тогда
			СтрокиУдалить.Добавить(ОписаниеВнешнейКомпоненты);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ОписаниеВнешнейКомпоненты Из СтрокиУдалить Цикл
		РезультатОперации.ДанныеВнешнихКомпонент.Удалить(ОписаниеВнешнейКомпоненты);
	КонецЦикла;
	
КонецПроцедуры

// Помещает файлы внешних компонент во временное хранилище.
//
// Параметры:
//  ИмяФайлаВнешнихКомпонент - Строка - путь к файлу внешних компонент.
//  ДанныеВнешнихКомпонент - ТаблицаЗначений - см ОписаниеРезультатаЗагрузки.
//
Процедура ПомещениеФайловВнешнихКомпонентВХранилище(
		ИмяФайлаВнешнихКомпонент,
		ДанныеВнешнихКомпонент)
	
	КаталогВнешнихКомпонент = ФайловаяСистема.СоздатьВременныйКаталог(
		Строка(Новый УникальныйИдентификатор));
	
	ЧтениеZipФайла = Новый ЧтениеZipФайла(ИмяФайлаВнешнихКомпонент);
	Для Каждого ОписаниеВнешнейКомпоненты Из ДанныеВнешнихКомпонент Цикл
		
		ЭлементАрхива = ЧтениеZipФайла.Элементы.Найти(ОписаниеВнешнейКомпоненты.ИдентификаторФайла);
		Если ЭлементАрхива = Неопределено Тогда
			ЗаписатьИнформациюВЖурналРегистрации(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось найти файл внешней компоненты %1 в архиве %2.'"),
					ОписаниеВнешнейКомпоненты.Идентификатор,
					ИмяФайлаВнешнихКомпонент));
			Продолжить;
		КонецЕсли;
		
		ЧтениеZipФайла.Извлечь(ЭлементАрхива, КаталогВнешнихКомпонент);
		ДанныеФайла = Новый ДвоичныеДанные(КаталогВнешнихКомпонент + ОписаниеВнешнейКомпоненты.ИдентификаторФайла);
		
		Если ДанныеФайла.Размер() = 0 Тогда
			ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Файл внешней компоненты %1 (%2) имеет размер равный 0.
					|Загрузка данных остановлена.'"),
				ОписаниеВнешнейКомпоненты.Наименование,
				ОписаниеВнешнейКомпоненты.Идентификатор);
			ЗаписатьИнформациюВЖурналРегистрации(
				ТекстИсключения);
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
		
		ОписаниеВнешнейКомпоненты.Размер           = ДанныеФайла.Размер();
		ОписаниеВнешнейКомпоненты.КонтрольнаяСумма = ИнтернетПоддержкаПользователей.КонтрольнаяСуммаФайла(ДанныеФайла);
		ОписаниеВнешнейКомпоненты.АдресФайла       = ПоместитьВоВременноеХранилище(ДанныеФайла);
		
	КонецЦикла;
	
	ФайловаяСистема.УдалитьВременныйФайл(КаталогВнешнихКомпонент);
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеСлужебныеПроцедурыФункции

// Список идентификаторов внешних компонент, которые используются в конфигурации.
// Указанные внешние компоненты будут загружены при обработке поставляемых данных.
// 
// Возвращаемое значение:
//  Массив из Строка - содержит идентификаторы внешних компоненты.
//
Функция ИспользуемыеКомпоненты() Экспорт
	
	ИспользуемыеКомпоненты = Новый Массив;
	
	МодульВнешниеКомпонентыСервер = ОбщегоНазначения.ОбщийМодуль("ВнешниеКомпонентыСервер");
	ПоставляемыеИспользуемыеКомпоненты = МодульВнешниеКомпонентыСервер.ИспользуемыеКомпоненты("Поставляемые");
	Для Каждого ИспользуемаяКомпонента Из ПоставляемыеИспользуемыеКомпоненты Цикл
		ИспользуемыеКомпоненты.Добавить(ИспользуемаяКомпонента);
	КонецЦикла;
	
	ИнтеграцияПодсистемБИП.ПриОпределенииИспользуемыхВерсийВнешнихКомпонент(
		ИспользуемыеКомпоненты);
	
	МодульПолучениеВнешнихКомпонентВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль(
		"ПолучениеВнешнихКомпонентВМоделиСервисаПереопределяемый");
	МодульПолучениеВнешнихКомпонентВМоделиСервиса.ПриОпределенииИспользуемыхВерсийВнешнихКомпонент(
		ИспользуемыеКомпоненты);
		
	ИспользуемыеКомпоненты = ОбщегоНазначенияКлиентСервер.СвернутьМассив(
		ИспользуемыеКомпоненты);
		
	Возврат ИспользуемыеКомпоненты;
	
КонецФункции

// Удаляет из результата служебные данные, которые использовались для
// загрузки внешних компонент.
//
// Параметры:
//  ДанныеВнешнихКомпонент - ТаблицаЗначений - см. функцию
//                               ПолучениеВнешнихКомпонент.ОписаниеРезультатаЗагрузки;
Процедура УдалитьСлужебныеДанныеВнешнихКомпонент(ДанныеВнешнихКомпонент)
	
	ДанныеВнешнихКомпонент.Колонки.Удалить("ИдентификаторФайла");
	ДанныеВнешнихКомпонент.Колонки.Удалить("КонтрольнаяСумма");
	
КонецПроцедуры

// Производит определение версий, для которых не требуется обновление,
// которые определяются на основании данных ИБ.
//
// Параметры:
//  ОписаниеВнешнихКомпонент - ТаблицаЗначений - см. функцию
//                          ПолучениеВнешнихКомпонент.ОписаниеВнешнихКомпонент().
//  ДанныеВнешнихКомпонент - ТаблицаЗначений - см. функцию
//                          ПолучениеВнешнихКомпонент.ОписаниеРезультатаЗагрузки().
//
Процедура ОбработатьАктуальныеВерсии(ОписаниеВнешнихКомпонент, ДанныеВнешнихКомпонент)
	
	ТекстОшибки = "";
	Для Каждого ОписаниеЗапроса Из ОписаниеВнешнихКомпонент Цикл
		
		Отбор = Новый Структура;
		Отбор.Вставить("Идентификатор", ОписаниеЗапроса.Идентификатор);
		
		НайденныеСтроки = ДанныеВнешнихКомпонент.НайтиСтроки(Отбор);
		Для каждого ОписательВерсии Из НайденныеСтроки Цикл
			Если ОписательВерсии.Версия = ОписаниеЗапроса.Версия Тогда
				ОписательВерсии.КодОшибки = "АктуальнаяВерсия";
				ТекстОшибки = ТекстОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '- при загрузке внешней компоненты %1 сервис вернул ошибку %2;'"),
						ОписательВерсии.Идентификатор,
						ОписательВерсии.КодОшибки);
					ТекстОшибки = ТекстОшибки + Символы.ПС;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибки при получении информации о внешних компонентах:
				|%1'"),
			ТекстОшибки);
		ЗаписатьИнформациюВЖурналРегистрации(
			ТекстОшибки,
			Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Создает структуру, которая будет использоваться как
// возвращаемое значение см. функций ПолучениеВнешнихКомпонент.АктуальныеВерсииВнешнихКомпонент
// и ПолучениеВнешнихКомпонент.ВерсииВнешнихКомпонент.
//
// Возвращаемое значение:
//   Структура - результат загрузки внешних компонент:
//    *КодОшибки              - Строка - содержит код ошибки сервиса внешних компонент;
//    *СообщениеОбОшибке      - Строка - содержит описание ошибки сервиса внешних компонент.
//                                Сообщение предназначено для вывода информации об ошибке
//                                рядовому пользователя конфигурации;
//    *ИнформацияОбОшибке     - Строка - содержит полное описание ошибки сервиса внешних компонент.
//                                Сообщение предназначено для записи в журнал регистрации; 
//    *ДанныеВнешнихКомпонент - ТаблицаЗначений, Неопределено - содержит информацию о загруженных
//                                внешних компонентах:
//     **Идентификатор          - Строка - содержит уникальный идентификатор внешней компоненты, который
//                                указывается пользователем при создании новой компоненты;
//     **Версия                 - Строка, Неопределено - содержит номер версии загруженного компонента;
//     **ДатаВерсии             - Дата, Неопределено - содержит дату выхода версии загруженного,
//                                компонента установленную в при заполнении информации о версии
//                                внешней компоненты;
//     **Наименование           - Строка, Неопределено - содержит наименование внешней компоненты, к которой
//                                относится версия;
//     **ИмяФайла               - Строка, Неопределено - содержит имя файла, установленное
//                                в при создании версии внешней компоненты;
//     **ИдентификаторФайла     - Строка - содержит URL, по которому доступно скачивание
//                                файла внешней компоненты;
//     **Размер                 - Число - размер файла;
//     **КонтрольнаяСумма       - Строка - содержит хеш MD5 закодированный в строку base64.
//                                Используется для проверки целостности файлов;
//     **АдресФайла             - Строка, Неопределено - содержит адрес файла внешней
//                                компоненты во временно хранилище;
//     **КодОшибки              - Строка - содержит код ошибки загрузки внешней компоненты;
//
Функция ОписаниеРезультатаЗагрузки()
	
	ДанныеВнешнихКомпонент = Новый ТаблицаЗначений;
	ДанныеВнешнихКомпонент.Колонки.Добавить("Идентификатор", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	ДанныеВнешнихКомпонент.Колонки.Добавить("Версия",        ОбщегоНазначения.ОписаниеТипаСтрока(20));
	ДанныеВнешнихКомпонент.Колонки.Добавить("ДатаВерсии",    ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ДанныеВнешнихКомпонент.Колонки.Добавить("Наименование",  ОбщегоНазначения.ОписаниеТипаСтрока(150));
	ДанныеВнешнихКомпонент.Колонки.Добавить("ИмяФайла",      ОбщегоНазначения.ОписаниеТипаСтрока(260));
	ДанныеВнешнихКомпонент.Колонки.Добавить("АдресФайла",    ОбщегоНазначения.ОписаниеТипаСтрока(250));
	ДанныеВнешнихКомпонент.Колонки.Добавить("КодОшибки",     ОбщегоНазначения.ОписаниеТипаСтрока(25));
	ДанныеВнешнихКомпонент.Колонки.Добавить("Размер",        ОбщегоНазначения.ОписаниеТипаЧисло(32));
	
	// Служебные колонки, будут удалены после загрузки файлов.
	ДанныеВнешнихКомпонент.Колонки.Добавить("ИдентификаторФайла", ОбщегоНазначения.ОписаниеТипаСтрока(500));
	ДанныеВнешнихКомпонент.Колонки.Добавить("КонтрольнаяСумма",   ОбщегоНазначения.ОписаниеТипаСтрока(64));
	
	ОписательРезультатаЗагрузки = Новый Структура;
	ОписательРезультатаЗагрузки.Вставить("КодОшибки",              "");
	ОписательРезультатаЗагрузки.Вставить("СообщениеОбОшибке",      "");
	ОписательРезультатаЗагрузки.Вставить("ИнформацияОбОшибке",     "");
	ОписательРезультатаЗагрузки.Вставить("ДанныеВнешнихКомпонент", ДанныеВнешнихКомпонент);
	
	Возврат ОписательРезультатаЗагрузки;
	
КонецФункции

// Создает структуру настроек подключения к сервису внешних компонент.
//
Функция ИнициализироватьПараметрыОбновления()
	
	ПараметрыЗагрузки = Новый Структура;
	ПараметрыЗагрузки.Вставить("НастройкиСоединения"   , ИнтернетПоддержкаПользователей.НастройкиСоединенияССерверами());
	ПараметрыЗагрузки.Вставить("НастройкиПроксиСервера", ПолучениеФайловИзИнтернета.НастройкиПроксиНаСервере());
	
	Возврат ПараметрыЗагрузки;
	
КонецФункции

// Определяет по коду состояния тип ошибки сервиса.
//
// Параметры:
//  КодСостояния - Число - код состояния ответа сервиса.
//
// Возвращаемое значение:
//  Строка - код ошибки сервиса.
//
Функция ПереопределитьКодОшибкиСервиса(КодСостояния)
	
	Если ПустаяСтрока(КодСостояния) Тогда
		Возврат "";
	КонецЕсли;
	
	Если КодСостояния = 200 Тогда
		Возврат "";
	ИначеЕсли КодСостояния = 403 Тогда
		Возврат "НетДоступаКПрограмме";
	ИначеЕсли КодСостояния = 401 Тогда
		Возврат "НеверныйЛогинИлиПароль";
	ИначеЕсли КодСостояния = 429 Тогда
		Возврат "ПревышеноКоличествоПопыток";
	ИначеЕсли КодСостояния = 500 Тогда
		Возврат "ОшибкаСервиса";
	ИначеЕсли КодСостояния = 503 Тогда
		Возврат "СервисВременноНеДоступен";
	ИначеЕсли КодСостояния = 0 Тогда
		Возврат "ОшибкаПодключения";
	Иначе
		Возврат КодОшибкиНеизвестнаяОшибка();
	КонецЕсли;
	
КонецФункции

// Определяет по коду ошибки сообщение пользователю.
//
// Параметры:
//  КодОшибки - Строка - ошибка сервиса см. процедуру
//              ПереопределитьКодОшибкиСервиса.
//
// Возвращаемое значение:
//  Строка - сообщение пользователю.
//
Функция ПереопределитьСообщениеПользователю(КодОшибки)
	
	Если КодОшибки = "НетДоступаКПрограмме" Тогда
		Возврат СтроковыеФункции.ФорматированнаяСтрока(
			НСтр("ru = 'Доступ к обновлениям внешних компонент невозможен, так как ваша программа не находится на <a href = ""https://portal.1c.ru/support/"">официальной поддержке</a>.'"));
	ИначеЕсли КодОшибки = "НеверныйЛогинИлиПароль" Тогда
		Возврат НСтр("ru = 'Ошибка авторизации на Портале 1С:ИТС.
			|Подробнее см. в журнале регистрации.'");
	ИначеЕсли КодОшибки = "ПревышеноКоличествоПопыток" Тогда
		Возврат НСтр("ru = 'Превышено количество попыток ввода логина и пароля.
			|Проверьте правильность данных авторизации и повторите
			|попытку через 30 минут.'");
	ИначеЕсли КодОшибки = "СервисВременноНеДоступен" Тогда
		Возврат НСтр("ru = 'Не удалось подключиться к сервису внешних компонент. Сервис временно недоступен.
			|Повторите попытку подключения позже.'");
	ИначеЕсли КодОшибки = "ОшибкаСервиса" Тогда
		Возврат НСтр("ru = 'Ошибка работы с сервисом внешних компонент.
			|Подробнее см. в журнале регистрации.'");
	ИначеЕсли КодОшибки = "ОшибкаПодключения" Тогда
		Возврат НСтр("ru = 'Не удалось подключиться к сервису внешних компонент.
			|Подробнее см. в журнале регистрации.'");
	Иначе
		Возврат НСтр("ru = 'Неизвестная ошибка при подключении к сервису.
			|Подробнее см. в журнале регистрации.'");
	КонецЕсли;
	
КонецФункции

// Определяет по коду ошибки сервиса тип ошибки подсистемы.
//
// Параметры:
//  КодОшибки - Строка - код ошибки ответа сервиса.
//
// Возвращаемое значение:
//  Строка - код ошибки подсистемы.
//
Функция ПереопределитьКодОшибкиВнешнейКомпоненты(КодОшибки)
	
	Если Не ЗначениеЗаполнено(КодОшибки) Тогда
		Возврат "";
	ИначеЕсли ВРег(КодОшибки) = ВРег("Component_not_found") Тогда
		Возврат "ОтсутствуетКомпонента";
	ИначеЕсли ВРег(КодОшибки) = ВРег("Component_version_not_found")
		Или ВРег(КодОшибки) = ВРег("Actual_component_version_not_found") Тогда
		Возврат "ОтсутствуетВерсия";
	Иначе
		Возврат КодОшибкиНеизвестнаяОшибка();
	КонецЕсли;
	
КонецФункции

// Возвращает логин и пароль Интернет-поддержки.
//
// Возвращаемое значение:
//  Структура - структура, содержащая результаты определения параметров
//              аутентификации пользователя Интернет-поддержки:
//    *ДанныеАутентификации - Структура - параметры аутентификации пользователя Интернет-поддержки;
//    *ИнформацияОбОшибке   - Строка    - информация об ошибке для пользователя.
//    *Ошибка               - Строка    - признак наличия ошибки.
//
Функция ДанныеАутентификации()
	
	Результат = Новый Структура;
	Результат.Вставить("ДанныеАутентификации", Новый Структура);
	Результат.Вставить("ИнформацияОбОшибке",   "");
	Результат.Вставить("Ошибка",               Ложь);
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		ВызватьИсключение НСтр("ru = 'При работе в модели сервиса информация о внешних компонентах
			|загружается из поставляемых данных.'");
		
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		Результат.ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
		УстановитьПривилегированныйРежим(Ложь);
		Если Результат.ДанныеАутентификации = Неопределено Тогда
			Результат.Ошибка                = Истина;
			Результат.ИнформацияОбОшибке    =
				НСтр("ru = 'Для обновления внешних компонент необходимо подключить Интернет-поддержку пользователей.'");
			ЗаписатьИнформациюВЖурналРегистрации(Результат.ИнформацияОбОшибке);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выполняет проверку доступности загрузки файлов версий внешних компонент.
//
Процедура ПроверитьДоступностьЗагрузки()
	
	Если Не ДоступнаЗагрузкаВнешнихКомпонент() Тогда
		ТекстИсключения = НСтр("ru = 'Получение внешних компонент недоступно при работе в модели сервиса.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет параметры запроса внешних компонент, перед обращением к сервису.
//
// Параметры:
//  ОписаниеВнешнихКомпонент - ТаблицаЗначений - см. функцию ОписаниеВнешнихКомпонент.
//
// Возвращаемое значение:
//  Структура - см. функцию ОписаниеРезультатаЗагрузки.
//
Функция ПроверитьЗаполнениеДанныхВнешнихКомпонент(ОписаниеВнешнихКомпонент)
	
	СообщениеОбОшибке = "";
	РезультатОперации = ОписаниеРезультатаЗагрузки();
	
	Для Каждого ОписаниеКомпоненты Из ОписаниеВнешнихКомпонент Цикл
		Если Не ЗначениеЗаполнено(ОписаниеКомпоненты.Идентификатор) Тогда
			СообщениеОбОшибке = НСтр("ru = 'В запросе на загрузку внешних компонент отсутствует идентификаторы компоненты. Заполните идентификатор и повторите загрузку.'");
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		РезультатОперации.КодОшибки = КодОшибкиНеизвестнаяОшибка();
		УдалитьСлужебныеДанныеВнешнихКомпонент(РезультатОперации.ДанныеВнешнихКомпонент);
		РезультатОперации.СообщениеОбОшибке  = СообщениеОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = СообщениеОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	Возврат РезультатОперации;
	
КонецФункции

// Выполняет преобразование формата YYYY-MM-DDThh:mm:ss±hh:mm
// в дату.
//
// Параметры:
//  Значение - Строка - значение которое необходимо преобразовать.
//
// Возвращаемое значение:
//  Дата - результат преобразования.
//
Функция ПривестиЗначениеКДате(Знач Значение)
	
	Если Не ЗначениеЗаполнено(Значение) Тогда
		Возврат Дата(1, 1, 1);
	КонецЕсли;
	
	// Часовой пояс игнорируется, т.к. при расчете значения
	// при интерактивной загрузке он также не учитывается.
	ЗначениеДата = Лев(Значение, СтрДлина(Значение) - 10);
	ЗначениеДата = СокрЛП(СтрЗаменить(ЗначениеДата, ".", ""));
	ЗначениеДата = СокрЛП(СтрЗаменить(ЗначениеДата, "-", ""));
	ЗначениеДата = СокрЛП(СтрЗаменить(ЗначениеДата, ":", ""));
	ЗначениеДата = СокрЛП(СтрЗаменить(ЗначениеДата, "T", ""));
	
	ОписаниеТипа = Новый ОписаниеТипов("Дата");
	
	Возврат ОписаниеТипа.ПривестиЗначение(ЗначениеДата);
	
КонецФункции

// Добавление в запись JSON данных аутентификации.
//
// Параметры:
//  ЗаписьДанныхСообщения  - ЗаписьJSON - запись, в которую необходимо
//                         добавить данные аутентификации;
//  ДанныеАутентификации   - Структура - параметры аутентификации пользователя
//                         Интернет-поддержки. См. ДанныеАутентификации().
//
Процедура ЗаписатьДанныеАутентификации(ЗаписьДанныхСообщения, ДанныеАутентификации)
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("authenticationInfo");
	
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("login");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеАутентификации.Логин);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("password");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеАутентификации.Пароль);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
КонецПроцедуры

// Определяет URL для вызова сервиса получения внешних компонент.
//
// Параметры:
//  Операция  - Строка - путь к ресурсу;
//  Домен     - Число  - идентификатор домена.
//
// Возвращаемое значение:
//  Строка - URL операции.
//
Функция URLОперацииСервисаВнешнихКомпонент(Операция, Домен)
	
	Возврат "https://"
		+ ХостСервисаВнешнихКомпонент(Домен)
		+ "/api/external-components"
		+ Операция;
	
КонецФункции 

// Определяет хост для вызова сервиса получения внешних компонент.
//
// Параметры:
//  Домен - Число  - идентификатор домена.
//
// Возвращаемое значение:
//  Строка - хост подключения.
//
Функция ХостСервисаВнешнихКомпонент(Домен)
	
	
	Если Домен = 0 Тогда
		Возврат "external-components-manager.1c.ru";
	Иначе
		Возврат "external-components-manager.1c.eu";
	КонецЕсли;
	
КонецФункции

// Добавляет запись в журнал регистрации.
//
// Параметры:
//  СообщениеОбОшибке - Строка - комментарий к записи журнала регистрации;
//  Ошибка - Булево - если истина будет установлен уровень журнала регистрации "Ошибка";
//  ОбъектМетаданных - ОбъектМетаданных - объект метаданных для которого регистрируется ошибка.
//
Процедура ЗаписатьИнформациюВЖурналРегистрации(
		СообщениеОбОшибке,
		Ошибка = Истина,
		ОбъектМетаданных = Неопределено)
	
	УровеньЖР = ?(Ошибка, УровеньЖурналаРегистрации.Ошибка, УровеньЖурналаРегистрации.Информация);
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации(),
		УровеньЖР,
		ОбъектМетаданных,
		,
		Лев(СообщениеОбОшибке, 5120));
	
КонецПроцедуры

// Возвращает имя события для журнала регистрации
//
// Возвращаемое значение:
//  Строка - имя события.
//
Функция ИмяСобытияЖурналаРегистрации()
	
	Возврат НСтр("ru = 'Получение внешних компонент.'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

// Определяет значение свойства из чтения JSON.
//
// Параметры:
//  ЧтениеОбъектаJSON    - ЧтениеJSON - чтение JSON для определения значения;
//  ЗначениеПоУмолчанию  - Неопределено, Строка, Число, Булево - определяет
//                         значение по умолчанию.
//
// Возвращаемое значение:
//  Неопределено, Строка, Число, Булево - значение.
//
Функция ЗначениеСвойстваJSON(ЧтениеОбъектаJSON, ЗначениеПоУмолчанию = Неопределено)
	
	ИмяСвойства = ЧтениеОбъектаJSON.ТекущееЗначение;
	
	ЧтениеОбъектаJSON.Прочитать();
	Если ЧтениеОбъектаJSON.ТипТекущегоЗначения = ТипЗначенияJSON.Строка
		Или ЧтениеОбъектаJSON.ТипТекущегоЗначения = ТипЗначенияJSON.Число
		Или ЧтениеОбъектаJSON.ТипТекущегоЗначения = ТипЗначенияJSON.Булево Тогда
		Возврат ЧтениеОбъектаJSON.ТекущееЗначение;
	ИначеЕсли ЧтениеОбъектаJSON.ТипТекущегоЗначения = ТипЗначенияJSON.Null
		Или ЧтениеОбъектаJSON.ТипТекущегоЗначения = ТипЗначенияJSON.Ничего Тогда
		Возврат ЗначениеПоУмолчанию;
	Иначе
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось прочитать значение свойства %1. Некорректный тип значения свойства (%2).'"),
			ИмяСвойства,
			Строка(Строка(ЧтениеОбъектаJSON.ТипТекущегоЗначения)));
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецФункции

// Определяет виды данных.
//
// Возвращаемое значение:
//  Массив из Строка - наименование вида данных.
//
Функция ВидыПоставляемыхДанныхВнешниеКомпоненты()
	
	ВидыДанных = Новый Массив;
	
	ИспользуемыеКомпоненты = ИспользуемыеКомпоненты();
	Для Каждого Идентификатор Из ИспользуемыеКомпоненты Цикл
		ВидДанных = ВидПоставляемыхДанныхВнешниеКомпоненты(Идентификатор);
		ВидыДанных.Добавить(ВидДанных);
	КонецЦикла;
	
	Возврат ВидыДанных;
	
КонецФункции

// Определяет вид данных и код обработчика для поставляемых данных.
//
// Параметры:
//  Идентификатор - Строка - Идентификатор компоненты в сервисе.
//
// Возвращаемое значение:
//  Строка - наименование вида данных.
//
Функция ВидПоставляемыхДанныхВнешниеКомпоненты(Идентификатор = "")
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"ExtComponents.%1",
		Идентификатор);
	
КонецФункции

// Возвращает код ошибки "ФайлНеЗагружен".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиФайлНеЗагружен()
	
	Возврат "ФайлНеЗагружен";
	
КонецФункции

// Возвращает код ошибки "НеизвестнаяОшибка".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиНеизвестнаяОшибка()
	
	Возврат "НеизвестнаяОшибка";
	
КонецФункции

// Возвращает код ошибки "НеверныйЛогинИлиПароль".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиНеверныйЛогинИлиПароль()
	
	Возврат "НеверныйЛогинИлиПароль";
	
КонецФункции

// Преобразует исходную строку в дату.
//
// Параметры:
//  Значение - Строка - Строка, которую необходимо привести к дате.
//                      Формат даты должен быть в виде "ДД.ММ.ГГГГ чч:мм:сс".
//
// Возвращаемое значение:
//  Дата - полученная дата.
//
Функция СтрокаВДату(Значение)
	
	Время = Сред(Значение, СтрНайти(Значение, " ", НаправлениеПоиска.СКонца));
	Время = СтрЗаменить(Время, ":", "");
	Время = СтрЗаменить(Время, " ", "");
	Дата  = Лев(Значение,  СтрНайти(Значение, " "));
	Дата  = СтрЗаменить(Дата, " ", "");
	Дата  = Сред(Дата, 7) + Сред(Дата, 4, 2) + Лев(Дата, 2);
	
	ОписаниеТипа = Новый ОписаниеТипов("Дата");
	Результат    = ОписаниеТипа.ПривестиЗначение(Дата + Время);
	
	Возврат Результат;
	
КонецФункции

// Возвращает числовое значение отключенного режима обновления.
// 
// Возвращаемое значение:
//  Число - Значение режима обновления.
//
Функция РежимОбновленияОтключено()
	Возврат 0;
КонецФункции

// Возвращает числовое значение режима обновления из сервиса.
// 
// Возвращаемое значение:
//  Число - Значение режима обновления.
//
Функция РежимОбновленияИзСервиса()
	Возврат 1;
КонецФункции

// Возвращает числовое значение режима обновления из файла.
// 
// Возвращаемое значение:
//  Число - Значение режима обновления.
//
Функция РежимОбновленияИзФайла()
	Возврат 2;
КонецФункции

// Проверяет наличие доступных обновлений внешних компонент в Сервисе внешних компонент.
//
// Параметры:
//  ОписаниеВнешнихКомпонент - ТаблицаЗначений - идентификаторы внешних компонент в сервисе,
//                   обновление которых необходимо загрузить;
//  ДанныеАутентификации - Структура, Неопределено - логин и пароль для авторизации в сервисе внешних компонент.
//
// Возвращаемое значение:
//  Структура - информация о доступных обновлениях:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//                  может быть обработан вызывающим функционалом:
//                    - <Пустая строка> - обновление выполнено успешно;
//                    - "НеверныйЛогинИлиПароль" - неверный логин или пароль;
//                    - "ПревышеноКоличествоПопыток" - превышено количество попыток
//                      получения обновления с некорректным логином и паролем;
//                    - "ОшибкаПодключения" - ошибка при подключении к сервису;
//                    - "ОшибкаСервиса" - внутренняя ошибка сервиса;
//                    - "НеизвестнаяОшибка" - при получении информации возникла
//                      неизвестная (не обрабатываемая) ошибка;
//                    - "СервисВременноНеДоступен" - на сервер ведутся регламентные работы;
//                    - "НеизвестнаяВнешняяКомпонентаИлиПрограмма" - внешняя компонента или программа
//                      в сервисе не обнаружены по переданному идентификатору;
//                    - "НетДоступаКПрограмме" - отсутствует доступ к программе на Портале 1С:ИТС;
//                    - "ОбновлениеНеТребуется" - загружены актуальные версии внешних компонент;
//    *СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора;
//    *ДоступныеВерсии - Массив - содержит информацию о доступных обновлениях
//      **Идентификатор      - Строка - идентификатор внешней компоненты в сервисе;
//      **Версия             - Строка - номер актуальной версии;
//      **КонтрольнаяСумма   - Число - контрольная сумма файла;
//      **ОписаниеВерсии     - Строка - описание изменений в версии;
//      **ИдентификаторФайла - Строка - идентификатор файла, который будет использован для загрузки;
//      **Размер             - Строка - размер файла;
//      **Наименование       - Строка - наименование внешней компоненты;
//
Функция СлужебнаяДоступныеОбновленияВнешнихКомпонент(
		ОписаниеВнешнихКомпонент,
		ДанныеАутентификации = Неопределено) Экспорт
		
	// 1. Проверка доступности обновления.
	ПроверитьДоступностьЗагрузки();
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("КодОшибки",          "");
	РезультатПроверки.Вставить("СообщениеОбОшибке",  "");
	РезультатПроверки.Вставить("ИнформацияОбОшибке", "");
	РезультатПроверки.Вставить("ДоступныеВерсии ",   Новый Массив);
	Если ДанныеАутентификации = Неопределено Тогда
		Результат = ДанныеАутентификации();
		Если Результат.Ошибка Тогда
			РезультатПроверки.КодОшибки = КодОшибкиНеверныйЛогинИлиПароль();
			ЗаполнитьЗначенияСвойств(РезультатПроверки, Результат, "ИнформацияОбОшибке");
			РезультатПроверки.СообщениеОбОшибке = Результат.ИнформацияОбОшибке;
			Возврат РезультатПроверки;
		КонецЕсли;
		ДанныеДляАутентификации = Результат.ДанныеАутентификации;
	Иначе
		ДанныеДляАутентификации = ДанныеАутентификации;
	КонецЕсли;
	
	// 2. Из сервиса загружается информация об актуальных версиях внешних компонент,
	// а также ссылки на файл.
	РезультатОперации = ИнформацияОбАктуальныхВерсияхВнешнихКомпонент(
		ОписаниеВнешнихКомпонент,
		ДанныеДляАутентификации);
		
	Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
		ЗаполнитьЗначенияСвойств(
			РезультатПроверки,
			РезультатОперации,
			"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
		Возврат РезультатПроверки;
	КонецЕсли;
	
	// 3. Определение актуальных версий.
	ОбработатьАктуальныеВерсии(ОписаниеВнешнихКомпонент, РезультатОперации.ДанныеВнешнихКомпонент);
	
	Для Каждого ОписательВерсии Из РезультатОперации.ДанныеВнешнихКомпонент Цикл
		
		Если ЗначениеЗаполнено(ОписательВерсии.КодОшибки)
			И ОписательВерсии.КодОшибки <> "АктуальнаяВерсия" Тогда
			Продолжить;
		КонецЕсли;
		
		ИдентификаторФайла = Новый Структура;
		ИдентификаторФайла.Вставить("ИдентификаторФайла", ОписательВерсии.ИдентификаторФайла);
		ИдентификаторФайла.Вставить("КонтрольнаяСумма",   ОписательВерсии.КонтрольнаяСумма);
		ИдентификаторФайла.Вставить("Размер",             ОписательВерсии.Размер);
		ИдентификаторФайла.Вставить("ОписаниеВерсии",     "");
		
		ДанныеВерсии = Новый Структура;
		ДанныеВерсии.Вставить("Идентификатор",      ОписательВерсии.Идентификатор);
		ДанныеВерсии.Вставить("Наименование",       ОписательВерсии.Наименование);
		ДанныеВерсии.Вставить("Версия",             ОписательВерсии.Версия);
		ДанныеВерсии.Вставить("ОписаниеВерсии",     "");
		ДанныеВерсии.Вставить("Размер",             ОписательВерсии.Размер);
		ДанныеВерсии.Вставить("ИдентификаторФайла", ИдентификаторФайла);
		ДанныеВерсии.Вставить("ДатаВерсии",         ОписательВерсии.ДатаВерсии);
		РезультатПроверки.ДоступныеВерсии.Добавить(ДанныеВерсии);
		
	КонецЦикла;
	
	Возврат РезультатПроверки;
	
КонецФункции

// Выполняет загрузку обновления внешних компонент из сервиса.
Процедура ОбновитьВнешниеКомпоненты()
	
	// 1. Проверка доступности получения внешних компонент из сервиса.
	ПроверитьДоступностьЗагрузки();
	
	// 2. Формирование запроса для загрузки внешних компонент.
	МодульВнешниеКомпонентыСервер = ОбщегоНазначения.ОбщийМодуль("ВнешниеКомпонентыСервер");
	ОписаниеВнешнихКомпонент = МодульВнешниеКомпонентыСервер.ИспользуемыеКомпоненты("ДляОбновления");
	РезультатОперации        = АктуальныеВерсииВнешнихКомпонент(ОписаниеВнешнихКомпонент);
	
	// 3. Обработка загруженных компонент.
	Если Не ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
		МодульВнешниеКомпонентыСервер.ОбновитьВнешниеКомпоненты(РезультатОперации.ДанныеВнешнихКомпонент);
		ОбновитьКэшВнешнихКомпонент(РезультатОперации.ДанныеВнешнихКомпонент);
	КонецЕсли;
	
КонецПроцедуры

// Обновляет кэш данных внешних компонент.
//
// Параметры:
//  ДанныеВнешнихКомпонент - ТаблицаЗначений - см ОписаниеРезультатаЗагрузки.
//
Процедура ОбновитьКэшВнешнихКомпонент(ДанныеВнешнихКомпонент)
	
	Для Каждого ОписаниеВнешнейКомпоненты Из ДанныеВнешнихКомпонент Цикл
		
		Если ЗначениеЗаполнено(ОписаниеВнешнейКомпоненты.КодОшибки) Тогда
			Продолжить;
		КонецЕсли;
		РегистрыСведений.КэшДанныхВнешнихКомпонент.ОбновитьДанныеКэша(ОписаниеВнешнейКомпоненты);
		
	КонецЦикла;
	
КонецПроцедуры

// Обновляет данные кэша данными из сервиса по переданному описанию внешних компонент.
//
// Параметры:
//  ОписаниеВнешнихКомпонент - Структура - см ОписаниеВнешнихКомпонент.
// 
// Возвращаемое значение:
//  Структура - см. функцию ОписаниеРезультатаЗагрузки.
//
Функция ОбновитьДанныеКэшаВнешнихКомпонент(ОписаниеВнешнихКомпонент)
	
	РезультатОперации = ОписаниеРезультатаЗагрузки();
	
	// 1. Проверка актуальности кэша.
	ОписаниеВнешнихКомпонентДляОбновления = ОписаниеВнешнихКомпонент();
	Для Каждого ОписаниеВнешнейКомпоненты Из ОписаниеВнешнихКомпонент Цикл
		Идентификатор = ОписаниеВнешнейКомпоненты.Идентификатор;
		ДанныеКэшаВерсии = РегистрыСведений.КэшДанныхВнешнихКомпонент.ДанныеКэша(Идентификатор);
		Если ДанныеКэшаВерсии = Неопределено Тогда
			ОписаниеВнешнейКомпонентыДляОбновления = ОписаниеВнешнихКомпонентДляОбновления.Добавить();
			ЗаполнитьЗначенияСвойств(
				ОписаниеВнешнейКомпонентыДляОбновления,
				ОписаниеВнешнейКомпоненты)
		КонецЕсли;
	КонецЦикла;
	
	Если ОписаниеВнешнихКомпонентДляОбновления.Количество() > 0 Тогда
		
		// 2. Проверка данных для запроса внешних компонент.
		РезультатОперации = ПроверитьЗаполнениеДанныхВнешнихКомпонент(
			ОписаниеВнешнихКомпонентДляОбновления);
		Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
			Возврат РезультатОперации;
		КонецЕсли;
		
		// 3. Получение информации об актуальных версиях внешних компонент
		// из сервиса.
		ДанныеПодключения = ДанныеАутентификации();
		Если ДанныеПодключения.Ошибка Тогда
			РезультатОперации.КодОшибки = КодОшибкиНеверныйЛогинИлиПароль();
			ЗаполнитьЗначенияСвойств(РезультатОперации, ДанныеПодключения, "ИнформацияОбОшибке");
			РезультатОперации.СообщениеОбОшибке = ДанныеПодключения.ИнформацияОбОшибке;
			Возврат РезультатОперации;
		КонецЕсли;
		РезультатОперации = ИнформацияОбАктуальныхВерсияхВнешнихКомпонент(
			ОписаниеВнешнихКомпонентДляОбновления,
			ДанныеПодключения.ДанныеАутентификации);
		
		Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
			Возврат РезультатОперации;
		КонецЕсли;
		
		// 4. Обновление данных кэша внешних компонент.
		ОбновитьКэшВнешнихКомпонент(
			РезультатОперации.ДанныеВнешнихКомпонент);
		
	КонецЕсли;
	
	Возврат РезультатОперации;
	
КонецФункции

Функция ДоступноИзменениеНастроекРегламентногоЗадания()
	Возврат ПравоДоступа("Изменение", Метаданные.Константы.ВариантОбновленияВнешнихКомпонент);
КонецФункции

#КонецОбласти

#КонецОбласти
