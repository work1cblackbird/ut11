
#Область ПрограммныйИнтерфейс

#Область ЗаказыНаПередачуВПроизводство


#КонецОбласти

#Область ЗаказыПоставщикам

// Обработчик подключенной команды.
//
// Параметры:
//   ДокументОснование - ДокументОбъект. - Документ, для которого выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура СозданиеЗаказовПоставщикамНаОсновании(ДокументОснование, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	СозданиеНаОснованииУТВызовСервера.ПроверитьВозможностьВводаНаОсновании(ДокументОснование);
	ПараметрыФормы = Новый Структура("ДокументОснование", ДокументОснование);
	ОткрытьФорму(
		"Документ.ЗаказПоставщику.Форма.СозданиеЗаказовПоставщикамНаОсновании", ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник, ПараметрыВыполненияКоманды.Уникальность, ПараметрыВыполненияКоманды.Окно);
КонецПроцедуры

#КонецОбласти

#Область СчетНаОплату

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура СоздатьСчетНаОплату(МассивСсылок, ПараметрыВыполнения) Экспорт
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	Если НЕ ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		ПараметрКоманды = МассивСсылок;
	Иначе
		ПараметрКоманды = МассивСсылок[0];
	КонецЕсли;
	
	ДокументОснование = ПродажиВызовСервера.ПолучитьОснованиеДляСчетаНаОплату(ПараметрКоманды);
	ПараметрыФормы = Новый Структура("ДокументОснование", ДокументОснование);
	
	ОткрытьФорму(
		"Документ.СчетНаОплатуКлиенту.Форма.ФормаСозданияСчетовНаОплату",
		ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно);

КонецПроцедуры

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура СоздатьСчетНаОплатуРеализацияАкт(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);

	Если НЕ ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		ПараметрКоманды = МассивСсылок;
	Иначе
		ПараметрКоманды = МассивСсылок[0];
	КонецЕсли;

	ПараметрыОткрытияФормы = СозданиеНаОснованииУТВызовСервера.СчетНаОплатуРеализацияАктПолучитьПараметрыОткрытияФормы(ПараметрКоманды);
	
	Если ПараметрыОткрытияФормы = Неопределено Тогда
		
		ТекстОшибки = НСтр("ru='%Документ% оформлена по нескольким заказам. Необходимо ввести счет на оплату на основании заказов.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ПараметрКоманды);
	
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	ОткрытьФорму(
		ПараметрыОткрытияФормы.ИмяФормы,
		ПараметрыОткрытияФормы.ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно);

КонецПроцедуры

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура СоздатьСчетНаОплатуПоДоговору(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	Если НЕ ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		ПараметрКоманды = МассивСсылок;
	Иначе
		ПараметрКоманды = МассивСсылок[0];
	КонецЕсли;
	
	Если НЕ СозданиеНаОснованииУТВызовСервера.СчетНаОплатуПоДоговоруПроверитьВозможностьСозданияСчетовНаОплату(ПараметрКоманды) Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не требуется вводить счет на оплату на основании договора %1. Расчеты ведутся по заказам / накладным.'"),
			ПараметрКоманды);
		ВызватьИсключение Текст;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ДокументОснование", ПараметрКоманды);
	
	ОткрытьФорму(
		"Документ.СчетНаОплатуКлиенту.Форма.ФормаСозданияСчетовНаОплату",
		ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно);
	

КонецПроцедуры

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура СоздатьСчетНаОплатуПредоплатаПоДоговору(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	Если НЕ ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		ПараметрКоманды = МассивСсылок;
	Иначе
		ПараметрКоманды = МассивСсылок[0];
	КонецЕсли;
	
	Если Не СозданиеНаОснованииУТВызовСервера.СчетНаОплатуПоДоговоруПроверитьВозможностьСозданияСчетовНаОплату(ПараметрКоманды) Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не требуется вводить счет на оплату на основании договора %1. Расчеты ведутся по заказам / накладным.'"),
			ПараметрКоманды);
		ВызватьИсключение Текст;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Основание", ПараметрКоманды);
	
	ОткрытьФорму(
		"Документ.СчетНаОплатуКлиенту.Форма.ФормаДокумента",
		ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно);

КонецПроцедуры


#КонецОбласти

#Область ДокументыНаОснованииЗаказа

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура АктВыполненныхРаботСоздатьНаОснованииЗаказа(МассивСсылок, ПараметрыВыполнения) Экспорт

	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	ОчиститьСообщения();
	
	ПараметрыОткрытия = СозданиеНаОснованииУТВызовСервера.АктВыполненныхРаботПараметрыОткрытияФормы(МассивСсылок);
	Если ПараметрыОткрытия <> Неопределено Тогда
	
		ОткрытьФорму(
			"Документ.АктВыполненныхРабот.Форма.ФормаДокумента",
			ПараметрыОткрытия,
			ПараметрыВыполненияКоманды.Источник,
			ПараметрыВыполненияКоманды.Уникальность,
			ПараметрыВыполненияКоманды.Окно,
			ПараметрыВыполненияКоманды.НавигационнаяСсылка);
			
	КонецЕсли;

КонецПроцедуры

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура ВнутреннееПотреблениеСоздатьНаОснованииЗаказа(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"ОбщийМодуль.СозданиеНаОснованииУТКлиент.ВнутреннееПотреблениеСоздатьНаОснованииЗаказа");
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрыОткрытия =
		СозданиеНаОснованииУТВызовСервера.ПараметрыОткрытияФормыНакладнойНаОснованииЗаказа(
			МассивСсылок,
			"ВнутреннееПотребление");
	Если ПараметрыОткрытия.ПараметрыФормы.Свойство("Основание") Тогда
		ПараметрыОткрытия.ПараметрыФормы.Основание.Вставить("ОтборПоСкладу", Ложь);
	КонецЕсли;
	
	ОчиститьСообщения();

	ОткрытьФорму(
		ПараметрыОткрытия.ИмяФормы,
		ПараметрыОткрытия.ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно,
		ПараметрыВыполненияКоманды.НавигационнаяСсылка,,
		ПараметрыОткрытия.РежимОткрытияОкнаФормы);
	
КонецПроцедуры

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура ПоступлениеТоваровОтХранителяСоздатьНаОснованииЗаказа(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"ОбщийМодуль.СозданиеНаОснованииУТКлиент.ПоступлениеТоваровОтХранителяСоздатьНаОснованииЗаказа");
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрыОткрытия = СозданиеНаОснованииУТВызовСервера.ПараметрыОткрытияФормыНакладнойНаОснованииЗаказа(МассивСсылок,
																											"ПоступлениеТоваровОтХранителя");
	
	ОчиститьСообщения();

	ОткрытьФорму(
		ПараметрыОткрытия.ИмяФормы,
		ПараметрыОткрытия.ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно,
		ПараметрыВыполненияКоманды.НавигационнаяСсылка,,
		ПараметрыОткрытия.РежимОткрытияОкнаФормы);
	
КонецПроцедуры

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура ПоступлениеТоваровОтКомиссионераСоздатьНаОснованииЗаказа(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"ОбщийМодуль.СозданиеНаОснованииУТКлиент.ПоступлениеТоваровОтХранителяСоздатьНаОснованииЗаказа");
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрыОткрытия = СозданиеНаОснованииУТВызовСервера.ПараметрыОткрытияФормыНакладнойНаОснованииЗаказа(МассивСсылок,
						"ПоступлениеТоваровОтХранителя",ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера"));
	
	ОчиститьСообщения();

	ОткрытьФорму(
		ПараметрыОткрытия.ИмяФормы,
		ПараметрыОткрытия.ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно,
		ПараметрыВыполненияКоманды.НавигационнаяСсылка,,
		ПараметрыОткрытия.РежимОткрытияОкнаФормы);
	
КонецПроцедуры

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура ПриобретениеТоваровУслугСоздатьНаОснованииЗаказа(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрыОткрытия = СозданиеНаОснованииУТВызовСервера.ПриобретениеТоваровУслугПараметрыОткрытияФормы(МассивСсылок);
	Если ПараметрыОткрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();

	ОткрытьФорму(
		"Документ.ПриобретениеТоваровУслуг.Форма.ФормаДокумента",
		ПараметрыОткрытия,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно,
		ПараметрыВыполненияКоманды.НавигационнаяСсылка);

КонецПроцедуры

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура СборкаТоваровСоздатьНаОснованииЗаказа(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"ОбщийМодуль.СозданиеНаОснованииУТКлиент.СборкаТоваровСоздатьНаОснованииЗаказа");
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрыОткрытия = СозданиеНаОснованииУТВызовСервера.ПараметрыОткрытияФормыНакладнойНаОснованииЗаказа(МассивСсылок,
		"СборкаТоваров");
	
	ОчиститьСообщения();

	ОткрытьФорму(
		ПараметрыОткрытия.ИмяФормы,
		ПараметрыОткрытия.ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно,
		ПараметрыВыполненияКоманды.НавигационнаяСсылка,,
		ПараметрыОткрытия.РежимОткрытияОкнаФормы);
	
КонецПроцедуры

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура РеализацияТоваровУслугСоздатьНаОснованииЗаказа(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"ОбщийМодуль.СозданиеНаОснованииУТКлиент.РеализацияТоваровУслугСоздатьНаОснованииЗаказа");
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	ОчиститьСообщения();
	
	ПараметрыОткрытия = СозданиеНаОснованииУТВызовСервера.РеализацияТоваровУслугПараметрыОткрытияФормы(МассивСсылок);
	
	Если НЕ ПараметрыОткрытия = Неопределено Тогда
	
		ОткрытьФорму(
			"Документ.РеализацияТоваровУслуг.Форма.ФормаДокумента",
			ПараметрыОткрытия,
			ПараметрыВыполненияКоманды.Источник,
			ПараметрыВыполненияКоманды.Уникальность,
			ПараметрыВыполненияКоманды.Окно,
			ПараметрыВыполненияКоманды.НавигационнаяСсылка);
		
	КонецЕсли;
		
КонецПроцедуры

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура ПеремещениеТоваровСоздатьНаОснованииЗаказа(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"ОбщийМодуль.СозданиеНаОснованииУТКлиент.ПеремещениеТоваровСоздатьНаОснованииЗаказа");
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрыОткрытия = СозданиеНаОснованииУТВызовСервера.ПараметрыОткрытияФормыНакладнойНаОснованииЗаказа(МассивСсылок,
		"ПеремещениеТоваров");
	
	ОчиститьСообщения();

	ОткрытьФорму(
		ПараметрыОткрытия.ИмяФормы,
		ПараметрыОткрытия.ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно,
		ПараметрыВыполненияКоманды.НавигационнаяСсылка,,
		ПараметрыОткрытия.РежимОткрытияОкнаФормы);
	
КонецПроцедуры


// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура ПередачаТоваровХранителюСоздатьНаОснованииЗаказа(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"ОбщийМодуль.СозданиеНаОснованииУТКлиент.ПередачаТоваровХранителюСоздатьНаОснованииЗаказа");
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	ОчиститьСообщения();
	
	ПараметрыОткрытия = СозданиеНаОснованииУТВызовСервера.ПередачаТоваровХранителюПараметрыОткрытияФормы(МассивСсылок);
	
	Если Не ПараметрыОткрытия = Неопределено Тогда
		
		ОткрытьФорму("Документ.ПередачаТоваровХранителю.Форма.ФормаДокумента",
					ПараметрыОткрытия,
					ПараметрыВыполненияКоманды.Источник,
					ПараметрыВыполненияКоманды.Уникальность,
					ПараметрыВыполненияКоманды.Окно,
					ПараметрыВыполненияКоманды.НавигационнаяСсылка);
		
	КонецЕсли;
	
КонецПроцедуры


// Обработчик подключения для команды создания на основании документа ОперацияПоПлатежной карте для хозяйственной операции
// по возврату оплаты.
//
// Параметры:
//	МассивСсылок - Массив - массив ссылок объектов, для которых выполняется обработчик.
//	ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды.
//
Процедура ОперацияПоПлатежнойКарте_Возврат(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник, Уникальность, Окно, НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрыФормы = СозданиеНаОснованииУТВызовСервера.ОперацияПоПлатежнойКарте_ВозвратПараметрыЗаполнения(МассивСсылок);
	
	ОткрытьФорму("Документ.ОперацияПоПлатежнойКарте.Форма.ФормаДокумента",
					ПараметрыФормы,
					ПараметрыВыполненияКоманды.Источник,
					ПараметрыВыполненияКоманды.Уникальность,
					ПараметрыВыполненияКоманды.Окно,
					ПараметрыВыполненияКоманды.НавигационнаяСсылка);	
	
КонецПроцедуры

#КонецОбласти

#Область СогласованиеПродажи

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура СоздатьНовоеСогласованиеЗаказаКлиента(МассивСсылок, ПараметрыВыполнения) Экспорт

	Если НЕ ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		Основание = МассивСсылок;
	Иначе
		Основание = МассивСсылок[0];
	КонецЕсли;
	
	ОткрытьФорму("БизнесПроцесс.СогласованиеПродажи.ФормаОбъекта",
	Новый Структура("Основание", Основание),
	,
	,);

КонецПроцедуры 

#КонецОбласти 

#Область СогласованиеЗакупки

Процедура СоздатьНовоеСогласованиеЗаказаПоставщику(МассивСсылок, ПараметрыВыполнения) Экспорт

	ОткрытьФорму("БизнесПроцесс.СогласованиеЗакупки.ФормаОбъекта",
	Новый Структура("Основание",МассивСсылок),
	,
	,);

КонецПроцедуры 

#КонецОбласти 


// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура СозданиеСвязанныхОбъектов(МассивСсылок, ПараметрыВыполнения) Экспорт

	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	ПараметрыВыполненияКоманды.Источник = ПараметрыВыполнения.Форма;
	
	ДополнительныеОтчетыИОбработкиКлиент.ОткрытьФормуКомандДополнительныхОтчетовИОбработок(
		МассивСсылок,
		ПараметрыВыполненияКоманды,
		ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиСозданиеСвязанныхОбъектов());

КонецПроцедуры 

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура ОпределитьСправочноеРазмещениеПоЯчейкам(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	Если НЕ ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		ПараметрКоманды = МассивСсылок;
	Иначе
		ПараметрКоманды = МассивСсылок[0];
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("ДокументПриемки",ПараметрКоманды);
	ОткрытьФорму("Обработка.СправочноеРазмещениеНоменклатуры.Форма.Форма",Параметры,ПараметрыВыполненияКоманды.Источник,ПараметрКоманды);

КонецПроцедуры

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура ПередачаВЭксплуатациюНаОсновании(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	Если НЕ ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		ПараметрКоманды = МассивСсылок;
	Иначе
		ПараметрКоманды = МассивСсылок[0];
	КонецЕсли;
	
	Основание = Новый Структура;
	Основание.Вставить("ДокументОснование", ПараметрКоманды);
	Основание.Вставить("ХозяйственнаяОперация", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаВЭксплуатацию"));
	
	ПараметрыФормы = Новый Структура("Основание", Основание);
	
	ОткрытьФорму(
		"Документ.ВнутреннееПотребление.ФормаОбъекта",
		ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно,
		ПараметрыВыполненияКоманды.НавигационнаяСсылка);

КонецПроцедуры

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура СписаниеНаРасходыАктивыНаОсновании(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	Если НЕ ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		ПараметрКоманды = МассивСсылок;
	Иначе
		ПараметрКоманды = МассивСсылок[0];
	КонецЕсли;
	
	Основание = Новый Структура;
	Основание.Вставить("ДокументОснование", ПараметрКоманды);
	Основание.Вставить("ХозяйственнаяОперация", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СписаниеТоваровПоТребованию"));
	
	ПараметрыФормы = Новый Структура("Основание", Основание);
	
	ОткрытьФорму(
		"Документ.ВнутреннееПотребление.ФормаОбъекта",
		ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно,
		ПараметрыВыполненияКоманды.НавигационнаяСсылка);

КонецПроцедуры



// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура СоздатьНаОснованииРасходныйОрдерНаТовары(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ОчиститьСообщения();
	
	МассивРаспоряжений = Новый Массив;
	Если НЕ ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		МассивРаспоряжений.Добавить(МассивСсылок);
	Иначе
		МассивРаспоряжений = МассивСсылок;
	КонецЕсли;
		
	ОткрытьФорму("Обработка.УправлениеОтгрузкой.Форма.ФормаНастроекСозданияОрдеров",Новый Структура("МассивРаспоряжений",МассивРаспоряжений),,,,,);	
	
КонецПроцедуры

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура АктНаПередачуПрав(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	Если НЕ ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		ПараметрКоманды = МассивСсылок;
	Иначе
		ПараметрКоманды = МассивСсылок[0];
	КонецЕсли;
	
	ИмяФормы = "Документ.РеализацияТоваровУслуг.Форма.ФормаДокумента";
	
	ПараметрыОснования = Новый Структура;
	
	ПараметрыОснования.Вставить("ДокументОснование",   ПараметрКоманды);
	ПараметрыОснования.Вставить("ЗаполнятьПоОстаткам", Истина);
	ПараметрыОснования.Вставить("ВариантОформленияПродажи",
	ПредопределенноеЗначение("Перечисление.ВариантыОформленияПродажи.АктНаПередачуПрав"));
	
	ОткрытьФорму(ИмяФормы, Новый Структура("Основание", ПараметрыОснования));

КонецПроцедуры

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура СоздатьЗаказНаВнутреннееПотребление(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	Если НЕ ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		ПараметрКоманды = МассивСсылок;
	Иначе
		ПараметрКоманды = МассивСсылок[0];
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидСоздаваемыхДокументов", "ЗаказНаВнутреннееПотребление");
	ПараметрыФормы.Вставить("ДокументОснование", ПараметрКоманды);
	ОткрытьФорму("Обработка.ПомощникФормированияСкладскихДокументовПоВыводуИзАссортимента.Форма.Форма",
					ПараметрыФормы,
					ПараметрыВыполненияКоманды.Источник,
					ПараметрыВыполненияКоманды.Уникальность,
					ПараметрыВыполненияКоманды.Окно);

КонецПроцедуры 

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура СоздатьЗаказНаПеремещение(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	Если НЕ ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		ПараметрКоманды = МассивСсылок;
	Иначе
		ПараметрКоманды = МассивСсылок[0];
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидСоздаваемыхДокументов", "ЗаказНаПеремещение");
	ПараметрыФормы.Вставить("ДокументОснование", ПараметрКоманды);
	ОткрытьФорму("Обработка.ПомощникФормированияСкладскихДокументовПоВыводуИзАссортимента.Форма.Форма",
					ПараметрыФормы,
					ПараметрыВыполненияКоманды.Источник,
					ПараметрыВыполненияКоманды.Уникальность,
					ПараметрыВыполненияКоманды.Окно);
КонецПроцедуры

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура СоздатьОбеспечивающийЗаказ(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрКоманды = ?(ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор, МассивСсылок[0], МассивСсылок);
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(
		"СоздатьОбеспечивающийЗаказПослеУточненияТоваров",
		СозданиеНаОснованииУТКлиент,
		ПараметрыВыполнения);
		
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("Ссылка", ПараметрКоманды);
	ПараметрыОткрытия.Вставить("ИмяМенеджераДокумента",
		ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры.ИмяМенеджераДокумента);
	ПараметрыОткрытия.Вставить("ПараметрыОписаныВОбщемМодуле",
		ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыОписаныВОбщемМодуле);
	
	ОткрытьФорму(
		"ОбщаяФорма.СозданиеНаОснованииУточнениеЗаказываемогоКоличества",
		ПараметрыОткрытия,
		ПараметрыВыполнения.Форма,
		Новый УникальныйИдентификатор(),
		,
		,
		ОписаниеОповещенияОЗакрытии,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура СоздатьОбеспечивающийЗаказПослеУточненияТоваров(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Основание = Новый Структура();
	Основание.Вставить("АдресТовары", Результат.АдресТовары);
	Основание.Вставить("Основание", Результат.Основание);
	Основание.Вставить("Склад", Результат.Склад);
	
	ПараметрыОткрытия = Новый Структура("Основание", Основание);
	
	ДопПараметры = ДополнительныеПараметры.ОписаниеКоманды; // - Структура
	ОткрытьФорму(ДопПараметры.ДополнительныеПараметры.ИмяФормы,
		ПараметрыОткрытия,
		ДополнительныеПараметры.Форма,
		Новый УникальныйИдентификатор);
	
КонецПроцедуры

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура СоздатьЗаказНаПеремещениеНаОснованииПриобретенияТоваровУслугПоГруппеСкладов(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	Если НЕ ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		ПараметрКоманды = МассивСсылок;
	Иначе
		ПараметрКоманды = МассивСсылок[0];
	КонецЕсли;
	
	ПараметрыСоздания = СозданиеНаОснованииУТВызовСервера.СоздатьЗаказНаПеремещениеНаОснованииПриобретенияТоваровУслугПоГруппеСкладовПараметрыСоздания(ПараметрКоманды);
	
	СоздатьЗаказНаПеремещениеНаОснованииПоГруппеСкладовПослеПолученияСпискаСкладов(ПараметрыСоздания, ПараметрыВыполнения);
	
КонецПроцедуры

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура СоздатьЗаказНаПеремещениеНаОснованииПриемкиТоваровНаХранениеПоГруппеСкладов(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	Если НЕ ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		ПараметрКоманды = МассивСсылок;
	Иначе
		ПараметрКоманды = МассивСсылок[0];
	КонецЕсли;
	
	ПараметрыСоздания = СозданиеНаОснованииУТВызовСервера.СоздатьЗаказНаПеремещениеНаОснованииПриемкиТоваровНаХранениеПоГруппеСкладовПараметрыСоздания(ПараметрКоманды);
	
	СоздатьЗаказНаПеремещениеНаОснованииПоГруппеСкладовПослеПолученияСпискаСкладов(ПараметрыСоздания, ПараметрыВыполнения);
	
КонецПроцедуры

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура СоздатьПеремещениеТоваровНаОснованииПоГруппеСкладов(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	Если НЕ ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		ПараметрКоманды = МассивСсылок;
	Иначе
		ПараметрКоманды = МассивСсылок[0];
	КонецЕсли;
	
	ПараметрыСоздания = СозданиеНаОснованииУТВызовСервера.СоздатьПеремещениеТоваровНаОснованииПоГруппеСкладовПараметрыСоздания(ПараметрКоманды);
	
	Если ПараметрыСоздания.НесколькоСкладов Тогда
		
		ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(
			"СоздатьПеремещениеТоваровНаОснованииПоГруппеСкладовПослеВыбораСклада",СозданиеНаОснованииУТКлиент, ПараметрыВыполнения);
			
		ПараметрыОткрытия = Новый Структура();
		ПараметрыОткрытия.Вставить("ЗначенияДляВыбора", ПараметрыСоздания.СписокСкладов);
		ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru = 'Выбор склада'"));
		
		ОткрытьФорму(
			"ОбщаяФорма.ВыборЗначенияИзСписка",
			ПараметрыОткрытия,
			ПараметрыВыполнения.Форма,
			Новый УникальныйИдентификатор(),
			,
			,
			ОписаниеОповещенияОЗакрытии,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		
		СоздатьПеремещениеТоваровНаОснованииПоГруппеСкладовПослеВыбораСклада(ПараметрыСоздания.СписокСкладов[0], ПараметрыВыполнения);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура УстановитьПоддержаниеЗапасов(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	Если НЕ ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		ПараметрКоманды = МассивСсылок;
	Иначе
		ПараметрКоманды = МассивСсылок[0];
	КонецЕсли;
	
	Если Не СозданиеНаОснованииУТВызовСервера.УстановитьПоддержаниеЗапасов(ПараметрКоманды) Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Поддержание запаса не установлено, так как нет ни одного склада указанного формата'"));
		Возврат;
		
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("Документ", ПараметрКоманды);
	ПараметрыФормы = Новый Структура("Отбор, Источник", СтруктураОтбора, "ИзменениеАссортимента");
	ОткрытьФорму("Обработка.НастройкаПоддержанияЗапасов.Форма", ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник, ПараметрыВыполненияКоманды.Уникальность, ПараметрыВыполненияКоманды.Окно);
		
КонецПроцедуры

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура НастройкаПоддержанияЗапасов(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	Если НЕ ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		ПараметрКоманды = МассивСсылок;
	Иначе
		ПараметрКоманды = МассивСсылок[0];
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("Документ", ПараметрКоманды);
	ПараметрыФормы = Новый Структура("Отбор, Источник", СтруктураОтбора, "ИзменениеАссортимента");
	ОткрытьФорму("Обработка.НастройкаПоддержанияЗапасов.Форма", ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник, ПараметрыВыполненияКоманды.Уникальность, ПараметрыВыполненияКоманды.Окно);
		
КонецПроцедуры

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура ПомощникОформленияСкладскихАктов(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	Если НЕ ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		ПараметрКоманды = МассивСсылок;
	Иначе
		ПараметрКоманды = МассивСсылок[0];
	КонецЕсли;
	
	Если ТипЗнч(ПараметрКоманды) = Тип("ДокументСсылка.ПересчетТоваров") Тогда
		РезультатПроверки = СозданиеНаОснованииУТВызовСервера.ПроверитьСтатусПересчетаНаСервере(ПараметрКоманды);
		Если Не РезультатПроверки.МожноОткрытьПомощник Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.СообщениеПользователю);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Основание", ПараметрКоманды);
	ОткрытьФорму("Обработка.ПомощникОформленияСкладскихАктов.Форма", 
		ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно);
		
КонецПроцедуры





#Область КорректировкаНазначения

// Открывает форму обработки заполнения документа "Корректировка назначения товаров" для снятия резервов.
//  Параметры:
//   ПараметрыВыполнения - см. ОбеспечениеКлиент.ПараметрыФормыЗаполненияКорректировкиНазначенияТоваров
Процедура ОткрытьМастерСнятияРезерва(ПараметрыВыполнения) Экспорт
	
	ПараметрыФормы = ОбеспечениеКлиент.ПараметрыФормыЗаполненияКорректировкиНазначенияТоваров();
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, ПараметрыВыполнения);
	ПараметрыФормы.Мастер = Истина;
	ПараметрыФормы.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкиНазначения.СнятьРезерв");
	ПараметрыФормы.Заказ = ПараметрыВыполнения.ОбъектыОснований[0];
	
	ОткрытьФорму("Обработка.ЗаполнениеКорректировкиНазначения.Форма.ФормаОбъекта",
		ПараметрыФормы, ПараметрыВыполнения.Форма);
	
КонецПроцедуры

// Открывает форму обработки заполнения документа "Корректировка назначения товаров" для снятия резервов с нескольких назначений.
//  Параметры:
//   ПараметрыВыполнения - см. ОбеспечениеКлиент.ПараметрыФормыЗаполненияКорректировкиНазначенияТоваров
Процедура ОткрытьМастерМассовогоСнятияРезерва(ПараметрыВыполнения) Экспорт
	
	ПараметрыФормы = ОбеспечениеКлиент.ПараметрыФормыЗаполненияКорректировкиНазначенияТоваров();
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, ПараметрыВыполнения);
	ПараметрыФормы.Мастер = Истина;
	ПараметрыФормы.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкиНазначения.СнятьРезервПоМногимНазначениям");
	ПараметрыФормы.Заказ = ПараметрыВыполнения.ОбъектыОснований[0];
	ПараметрыФормы.НесколькоНазначений = Истина;
	
	ОткрытьФорму("Обработка.ЗаполнениеКорректировкиНазначения.Форма.ФормаОбъекта",
		ПараметрыФормы, ПараметрыВыполнения.Форма);
	
КонецПроцедуры

// Открывает форму обработки заполнения документа "Корректировка назначения товаров" для резервирования товаров.
//  Параметры:
//   ПараметрыВыполнения - см. ОбеспечениеКлиент.ПараметрыФормыЗаполненияКорректировкиНазначенияТоваров
Процедура ОткрытьМастерРезервирования(ПараметрыВыполнения) Экспорт
	
	ПараметрыФормы = ОбеспечениеКлиент.ПараметрыФормыЗаполненияКорректировкиНазначенияТоваров();
	
	ПараметрыФормы.Мастер = Истина;
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, ПараметрыВыполнения);
	ПараметрыФормы.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкиНазначения.Резервировать");
	ПараметрыФормы.Заказ = ПараметрыВыполнения.ОбъектыОснований[0];
	
	ОткрытьФорму("Обработка.ЗаполнениеКорректировкиНазначения.Форма.ФормаОбъекта",
		ПараметрыФормы, ПараметрыВыполнения.Форма);
	
КонецПроцедуры

// Открывает форму обработки заполнения документа "Корректировка назначения товаров" для резервирования товаров под несколько назначений.
//  Параметры:
//   ПараметрыВыполнения - см. ОбеспечениеКлиент.ПараметрыФормыЗаполненияКорректировкиНазначенияТоваров
Процедура ОткрытьМастерМассовогоРезервирования(ПараметрыВыполнения) Экспорт
	
	ПараметрыФормы = ОбеспечениеКлиент.ПараметрыФормыЗаполненияКорректировкиНазначенияТоваров();
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, ПараметрыВыполнения);
	ПараметрыФормы.Мастер = Истина;
	ПараметрыФормы.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкиНазначения.Резервировать");
	ПараметрыФормы.Заказ = ПараметрыВыполнения.ОбъектыОснований[0];
	ПараметрыФормы.НесколькоНазначений = Истина;
	
	ОткрытьФорму("Обработка.ЗаполнениеКорректировкиНазначения.Форма.ФормаОбъекта",
		ПараметрыФормы, ПараметрыВыполнения.Форма);
	
КонецПроцедуры


#КонецОбласти

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура СоздатьРасходныйКассовыйОрдер(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ДенежныеСредстваКлиент.СоздатьДокументОплатыНаОснованииЗаявокНаРасходДС(
		МассивСсылок,
		"РасходныйКассовыйОрдер");
	
КонецПроцедуры

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура СоздатьСписаниеБезналичныхДС(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ДенежныеСредстваКлиент.СоздатьДокументОплатыНаОснованииЗаявокНаРасходДС(
		МассивСсылок,
		"СписаниеБезналичныхДенежныхСредств");
	
КонецПроцедуры

// Обработчик подключенной команды.
//
// Параметры:
//   ДокументСсылка - ЛюбаяСсылка - ссылка на документ, для которого выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура СоздатьОперациюПоПлатежнойКарте(ДокументСсылка, ПараметрыВыполнения) Экспорт
	
	ДенежныеСредстваКлиент.СоздатьДокументОплатыНаОснованииЗаявокНаРасходДС(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументСсылка),
		"ОперацияПоПлатежнойКарте");
	
КонецПроцедуры

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура ПоручениеЭкспедитору(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ОткрытьФорму("Документ.ПоручениеЭкспедитору.Форма.ФормаДокумента", Новый Структура("Основание", МассивСсылок));
	
КонецПроцедуры

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура СписаниеБезналичныхДсНаОснованииОтчетаПоКомиссии_Вознаграждение(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрыОснования = Новый Структура;
	ПараметрыОснования.Вставить("ОтчетПоКомиссииМеждуОрганизациями",  МассивСсылок);
	
	ОткрытьФорму(
		"Документ.СписаниеБезналичныхДенежныхСредств.Форма.ФормаДокумента",
		Новый Структура("Основание", ПараметрыОснования),
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно);
			
КонецПроцедуры

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура ПоступлениеБезналичныхДсНаОснованииОтчетаПоКомиссии_Вознаграждение(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрыОснования = Новый Структура;	
	ПараметрыОснования.Вставить("ОтчетПоКомиссииМеждуОрганизациями",  МассивСсылок);
	
	ОткрытьФорму(
		"Документ.ПоступлениеБезналичныхДенежныхСредств.Форма.ФормаДокумента",
		Новый Структура("Основание", ПараметрыОснования),
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно);
			
КонецПроцедуры

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура ЗаявкаНаРасходованиеДсНаОснованииОтчетаПоКомиссии_Вознаграждение(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрыОснования = Новый Структура;	
	ПараметрыОснования.Вставить("ОтчетПоКомиссииМеждуОрганизациями",  МассивСсылок);
	
	ОткрытьФорму(
		"Документ.ЗаявкаНаРасходованиеДенежныхСредств.Форма.ФормаДокумента",
		Новый Структура("Основание", ПараметрыОснования),
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно);
			
КонецПроцедуры

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура ПриемкаТоваровНаХранениеСоздатьНаОснованииЗаказа(МассивСсылок, ПараметрыВыполнения) Экспорт

	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрКоманды = МассивСсылок;
	
	ОчиститьСообщения();
	ПараметрыОткрытия = СозданиеНаОснованииУТВызовСервера.ПриемкаТоваровНаХранениеПараметрыОткрытияФормы(ПараметрКоманды);
	Если ПараметрыОткрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму(
		"Документ.ПриемкаТоваровНаХранение.Форма.ФормаДокумента",
		ПараметрыОткрытия,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно,
		ПараметрыВыполненияКоманды.НавигационнаяСсылка);

КонецПроцедуры

Процедура СоздатьЗаказНаПеремещениеНаОснованииПоГруппеСкладовПослеПолученияСпискаСкладов(ПараметрыСоздания, ПараметрыВыполнения)
	
	Если ПараметрыСоздания.НесколькоСкладов Тогда
		
		ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(
			"СоздатьЗаказНаПеремещениеНаОснованииПоГруппеСкладовПослеВыбораСклада",
			СозданиеНаОснованииУТКлиент, ПараметрыВыполнения);
			
		ПараметрыОткрытия = Новый Структура();
		ПараметрыОткрытия.Вставить("ЗначенияДляВыбора", ПараметрыСоздания.СписокСкладов);
		ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru = 'Выбор склада'"));
		
		ОткрытьФорму(
			"ОбщаяФорма.ВыборЗначенияИзСписка",
			ПараметрыОткрытия,
			ПараметрыВыполнения.Форма,
			Новый УникальныйИдентификатор(),
			,
			,
			ОписаниеОповещенияОЗакрытии,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		
		СоздатьЗаказНаПеремещениеНаОснованииПоГруппеСкладовПослеВыбораСклада(ПараметрыСоздания.СписокСкладов[0], ПараметрыВыполнения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьЗаказНаПеремещениеНаОснованииПоГруппеСкладовПослеВыбораСклада(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено
		 Или ТипЗнч(ДополнительныеПараметры.МассивСсылок) = Тип("Массив")
			 И ДополнительныеПараметры.МассивСсылок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Основание = Новый Структура();
	Основание.Вставить("Склад", Результат);
	Основание.Вставить("Основание");
	Если ДополнительныеПараметры.ОписаниеКоманды.МножественныйВыбор Тогда
		Основание.Основание = ДополнительныеПараметры.МассивСсылок;
	Иначе
		Основание.Основание = ДополнительныеПараметры.МассивСсылок[0];
	КонецЕсли; 
	ПараметрыОткрытия = Новый Структура("Основание", Основание);
	
	ОткрытьФорму("Документ.ЗаказНаПеремещение.ФормаОбъекта",
		ПараметрыОткрытия,
		ДополнительныеПараметры.Форма,
		Новый УникальныйИдентификатор);
	
КонецПроцедуры

Процедура СоздатьПеремещениеТоваровНаОснованииПоГруппеСкладовПослеВыбораСклада(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено
		 Или ТипЗнч(ДополнительныеПараметры.МассивСсылок) = Тип("Массив")
			 И ДополнительныеПараметры.МассивСсылок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Основание = Новый Структура();
	Основание.Вставить("Склад", Результат);
	Основание.Вставить("Основание");
	Если ДополнительныеПараметры.ОписаниеКоманды.МножественныйВыбор Тогда
		Основание.Основание = ДополнительныеПараметры.МассивСсылок;
	Иначе
		Основание.Основание = ДополнительныеПараметры.МассивСсылок[0];
	КонецЕсли; 
	ПараметрыОткрытия = Новый Структура("Основание", Основание);
	
	ОткрытьФорму("Документ.ПеремещениеТоваров.ФормаОбъекта",
		ПараметрыОткрытия,
		ДополнительныеПараметры.Форма,
		Новый УникальныйИдентификатор);
	
КонецПроцедуры

//++ Локализация


//-- Локализация



// Обработчик подключенной команды.
//
// Параметры:
//   Обработчик - ДокументСсылка.ПриобретениеТоваровУслуг - ссылка на документ, для которого выполняется команда.
//   ОписаниеКоманды - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура СоздатьАктОРасхожденияхПослеПриемкиНаОснованииПриобретенияТоваровУслуг(Обработчик, ОписаниеКоманды) Экспорт
	
	ОчиститьСообщения();
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ОписаниеКоманды.ДополнительныеПараметры);
	ОчиститьСообщения();
	ПараметрКоманды = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Обработчик);
	
	ПараметрыОткрытия = СозданиеНаОснованииУТВызовСервера.АктОРасхожденияхПослеПриемкиПараметрыОткрытияФормы(ПараметрКоманды);
	Если ПараметрыОткрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Документ.АктОРасхожденияхПослеПриемки.Форма.ФормаДокумента",
		ПараметрыОткрытия,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно,
		ПараметрыВыполненияКоманды.НавигационнаяСсылка);
	
КонецПроцедуры

Процедура СоздатьКорректировкуНазначенияТоваровНаОснованииЗаказаКлиента(СсылкаНаДокумент, ПараметрыВыполнения) Экспорт
		
	РезультатПроверки = СозданиеНаОснованииУТВызовСервера.СоздатьКорректировкуНазначенияТоваровНаОснованииЗаказаКлиентаПроверкаТипаНазначения(СсылкаНаДокумент);
	Если РезультатПроверки.ТекстОшибки <> Неопределено Тогда
		ПоказатьПредупреждение(, РезультатПроверки.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Документ.КорректировкаНазначенияТоваров.ФормаОбъекта", Новый Структура("Основание", СсылкаНаДокумент), ПараметрыВыполнения.Форма);
	
КонецПроцедуры

Процедура СоздатьОтгрузкуТоваровСХраненияНаОснованииЗаказаКлиента(СсылкаНаДокумент, ПараметрыВыполнения) Экспорт
		
	РезультатПроверки = СозданиеНаОснованииУТВызовСервера.СоздатьОтгрузкуТоваровСХраненияНаОснованииЗаказаКлиентаПроверкаТипаНазначения(СсылкаНаДокумент);
	Если РезультатПроверки.ТекстОшибки <> Неопределено Тогда
		ПоказатьПредупреждение(, РезультатПроверки.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Документ.ОтгрузкаТоваровСХранения.ФормаОбъекта", Новый Структура("Основание", СсылкаНаДокумент), ПараметрыВыполнения.Форма);
	
КонецПроцедуры

#КонецОбласти
