#Область ПрограммныйИнтерфейс

Процедура МодификацияРеквизитовФормы(Форма, ПараметрыИнтеграции, ДобавляемыеРеквизиты) Экспорт
	
	ДобавитьОбщиеНастройкиВстраивания(Форма, ПараметрыИнтеграции);
	ДобавитьРеквизитТекстСостояниеСАТУРН(Форма, ПараметрыИнтеграции, ДобавляемыеРеквизиты);
	
КонецПроцедуры

Процедура МодификацияЭлементовФормы(Форма) Экспорт
	
	СобытияФормИС.ВстроитьСтрокуИнтеграцииВДокументОснованиеПоПараметрам(Форма, "САТУРН.ДокументОснование");
	
КонецПроцедуры

Процедура ЗаполнениеРеквизитовФормы(Форма) Экспорт
	
	ИмяРеквизитаФормыОбъект = Форма.ПараметрыИнтеграцииГосИС.Получить("САТУРН").ИмяРеквизитаФормыОбъект;
	
	Общие = Форма.ПараметрыИнтеграцииГосИС.Получить("ИС.ДокументОснование");
	ПараметрыИнтеграции = Форма.ПараметрыИнтеграцииГосИС.Получить("САТУРН.ДокументОснование");
	Если ПараметрыИнтеграции <> Неопределено И ЗначениеЗаполнено(ПараметрыИнтеграции.ИмяРеквизитаФормы) Тогда
		Если ЗначениеЗаполнено(Форма[Общие.ИмяРеквизитаФормы]) Тогда
			Форма.Элементы[ПараметрыИнтеграции.ИмяЭлементаФормы].Видимость = Ложь;
		Иначе
			ТекстНадписи = ИнтеграцияСАТУРНВызовСервера.ТекстНадписиПоляИнтеграцииВФормеДокументаОснования(Форма[ИмяРеквизитаФормыОбъект].Ссылка);
			Форма[ПараметрыИнтеграции.ИмяРеквизитаФормы] = ТекстНадписи;
			Форма.Элементы[ПараметрыИнтеграции.ИмяЭлементаФормы].Видимость = ЗначениеЗаполнено(ТекстНадписи);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьСтатусыОформления(Ссылка, ПараметрыИнтеграцииГосИС, РеквизитыФормыСтатусовОформления) Экспорт
	
	ПараметрыИнтеграции = ПараметрыИнтеграцииГосИС.Получить("САТУРН.ДокументОснование");
	Если ПараметрыИнтеграции <> Неопределено И ЗначениеЗаполнено(ПараметрыИнтеграции.ИмяРеквизитаФормы) Тогда
		ТекстНадписи = ИнтеграцияСАТУРНВызовСервера.ТекстНадписиПоляИнтеграцииВФормеДокументаОснования(Ссылка);
		РеквизитыФормыСтатусовОформления.Вставить(ПараметрыИнтеграции.ИмяРеквизитаФормы, ТекстНадписи);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеЗаписиНаСервере(Форма) Экспорт
	
	СобытияФормСАТУРНПереопределяемый.ПослеЗаписиНаСервере(Форма);
	
КонецПроцедуры

Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	СобытияФормСАТУРНПереопределяемый.ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
	СобытияФормСАТУРНПереопределяемый.ПриЧтенииНаСервере(Форма, ТекущийОбъект);
	
КонецПроцедуры

#Область СобытияЭлементовФорм

// Серверная переопределяемая процедура, вызываемая из обработчика события элемента.
//
// Параметры:
//   Форма                   - ФормаКлиентскогоПриложения - форма, из которой происходит вызов процедуры.
//   Элемент                 - Строка           - имя элемента-источника события "При изменении"
//   ДополнительныеПараметры - Структура        - значения дополнительных параметров влияющих на обработку.
//
Процедура ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры) Экспорт
	
	СобытияФормСАТУРНПереопределяемый.ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область ФормыСписков

Процедура ЗаполнитьСписокВыбораОрганизацииПоСохраненнымНастройкам(Форма, Знач ЗначениеПрефиксы = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеПрефиксы = Неопределено Тогда
		Префиксы = Новый Массив;
		Префиксы.Добавить("Оформлено");
		Префиксы.Добавить("КОформлению");
	Иначе
		Если ТипЗнч(ЗначениеПрефиксы) = Тип("Строка") Тогда
			Префиксы = Новый Массив();
			Префиксы.Добавить(ЗначениеПрефиксы);
		Иначе
			Префиксы = ЗначениеПрефиксы;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Значение Из Префиксы Цикл
		Форма.Элементы[Значение + "Организация"].СписокВыбора.Очистить();
		Форма.Элементы[Значение + "Организации"].СписокВыбора.Очистить();
	КонецЦикла;
	
	ПараметрыОтбора = Новый Структура("КлючОбъекта", "ОбщаяФорма.ФормаВыбораОрганизацийСАТУРН");
	
	Выборка = ХранилищеНастроекДанныхФорм.Выбрать(ПараметрыОтбора);
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Настройки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураОтбораОрганизаций = Выборка.Настройки.Получить("СтруктураОтбораОрганизаций");
		Если СтруктураОтбораОрганизаций <> Неопределено Тогда
			Для Каждого Значение Из Префиксы Цикл
				ЭлементОтбораОрганизация = Форма.Элементы.Найти(Значение + "Организация");
				Если ЭлементОтбораОрганизация <> Неопределено Тогда
					ЭлементОтбораОрганизация.СписокВыбора.Добавить(СтруктураОтбораОрганизаций, СтруктураОтбораОрганизаций.Представление);
				КонецЕсли;
		
				ЭлементОтбораОрганизации = Форма.Элементы.Найти(Значение + "Организации");
				Если ЭлементОтбораОрганизация <> Неопределено Тогда
					ЭлементОтбораОрганизации.СписокВыбора.Добавить(СтруктураОтбораОрганизаций, СтруктураОтбораОрганизаций.Представление);
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Дорабатывает форму списка документов:
//   * Добавляет необходимые отборы
//   * Скрывает списки к оформлению при необходимости.
//
// Параметры:
//   Форма     - ФормаКлиентскогоПриложения - форма списка документов.
//   Настройки - Структура        - (См. ИнтеграцияИС.НастройкиФормыСпискаДокументов).
//             - Неопределено     - будут использованы значения по умолчанию описанные здесь.
//
Процедура ПриСозданииНаСервереФормыСпискаДокументов(Форма, Настройки = Неопределено) Экспорт
	
	Если Настройки = Неопределено Тогда
		Настройки = ИнтеграцияИС.НастройкиФормыСпискаДокументов();
		Настройки.ТипыКОформлению = Метаданные.ОпределяемыеТипы.ДокументыСАТУРНПоддерживающиеСтатусыОформления;
		Настройки.ТипыКОбмену     = Метаданные.ОпределяемыеТипы.ДокументыСАТУРН;
	КонецЕсли;
	ИнтеграцияИС.ПриСозданииНаСервереФормыСпискаДокументов(Форма, Настройки);
	ИнтеграцияСАТУРНКлиентСервер.НастроитьОтборПоОрганизации(Форма, Форма.ОрганизацииСАТУРН);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область СвязиПараметровВыбора

// Устанавливает связь элемента формы с полем ввода ПАТ.
//
// Параметры:
//	Форма					- ФормаКлиентскогоПриложения	- Форма, в которой нужно установить связь.
//	ИмяПоляВвода			- Строка			- Имя поля, связываемого с ПАТ.
//	ПутьКДаннымПАТ			- Строка			- Путь к данным ПАТ в форме.
//
Процедура УстановитьСвязиПараметровВыбораСПАТ(Форма, ИмяПоляВвода,
	ПутьКДаннымПАТ = "Элементы.Товары.ТекущиеДанные.ПАТ") Экспорт
	
	СвязиПараметровВыбора = ОбщегоНазначения.СкопироватьРекурсивно(
		Форма.Элементы[ИмяПоляВвода].СвязиПараметровВыбора, Ложь);
	СвязиПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.ПАТ", ПутьКДаннымПАТ));
	
	Форма.Элементы[ИмяПоляВвода].СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
	
КонецПроцедуры

// Устанавливает связь элемента формы с полем ввода организации и места хранения.
//
// Параметры:
//	Форма                    - ФормаКлиентскогоПриложения - Форма, в которой нужно установить связь.
//	ИмяПоляВвода             - Строка                     - Имя поля, связываемого с организацией и местом хранения.
//	ПутьКДаннымОрганизации   - Строка                     - Путь к данным организации в шапке формы.
//	ПутьКДаннымМестаХранения - Строка                     - Путь к данным места хранения в шапке формы
//
Процедура УстановитьСвязиПараметровВыбораСОрганизациейМестомХранения(Форма, ИмяПоляВвода,
	ПутьКДаннымОрганизации = "Объект.ОрганизацияСАТУРН", ПутьКДаннымМестаХранения = "Объект.МестоХранения") Экспорт
	
	СвязиПараметровВыбора = ОбщегоНазначения.СкопироватьРекурсивно(
		Форма.Элементы[ИмяПоляВвода].СвязиПараметровВыбора, Ложь);
	
	СвязиПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.ОрганизацияСАТУРН", ПутьКДаннымОрганизации));
	
	Если ЗначениеЗаполнено(ПутьКДаннымМестаХранения) Тогда
		СвязиПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.МестоХранения", ПутьКДаннымМестаХранения));
	КонецЕсли;
	
	Форма.Элементы[ИмяПоляВвода].СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
	
КонецПроцедуры

#КонецОбласти

#Область ПараметрыВыбора

// Устанавливает параметры выбора организации.
//
// Параметры:
//	Форма                    - ФормаКлиентскогоПриложения - Форма, в которой нужно установить связь.
//	ИмяПоляВвода             - Строка                     - Имя поля, для которого устанавливаются параметры выбора.
//
Процедура УстановитьПараметрыВыбораОрганизации(Форма, ИмяПоляВвода = "ОрганизацияСАТУРН") Экспорт
	
	ПараметрыВыбора = ОбщегоНазначения.СкопироватьРекурсивно(
		Форма.Элементы[ИмяПоляВвода].ПараметрыВыбора, Ложь);
	
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Соответствует", "Организации"));
	
	Форма.Элементы[ИмяПоляВвода].ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
	
КонецПроцедуры

#КонецОбласти

Процедура ЗаполнитьГиперссылкиРеквизитовУпрощенно(Форма, ИмяПоляСопоставленияМестаХранения = "ТорговыйОбъект", ОбязательноеСопоставлениеОрганизации = Ложь, ОбязательноеСопоставлениМестаХранения = Ложь) Экспорт
	
	Объект = Форма.Объект;
	
	ПараметрыПолученияСопоставлений = Новый Массив;
	
	ПараметрПредставления = ИнтеграцияСАТУРН.НовыеПараметрыФормированияПредставленияСопоставлений();
	ПараметрПредставления.ОрганизацияСАТУРН                       = Объект.ОрганизацияСАТУРН;
	ПараметрПредставления.ОрганизацияСАТУРНОбязательноеЗаполнение = ОбязательноеСопоставлениеОрганизации;
	ПараметрПредставления.ОрганизацияКонтрагент                   = Форма.ОрганизацияИзОснованияДляОтбораОрганизацииСАТУРН;
	ЕстьРеквизитМестаХранения = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "МестоХранения");
	
	Если ЕстьРеквизитМестаХранения Тогда
	
		ПараметрПредставления.МестоХранения                       = Объект.МестоХранения;
		ПараметрПредставления.МестоХраненияОбязательноеЗаполнение = ОбязательноеСопоставлениМестаХранения;
		ПараметрПредставления.Склад                               = Форма.СкладИзОснованияДляОтбораМестаХранения;
		
	КонецЕсли;
	
	ПараметрыПолученияСопоставлений.Добавить(ПараметрПредставления);
	
	ДанныеПредставлений = ИнтеграцияСАТУРН.ПредставленияСопоставлений(ПараметрыПолученияСопоставлений);
	
	Для Каждого КлючИЗначение Из ДанныеПредставлений Цикл
		
		ПараметрПредставления = КлючИЗначение.Ключ;
		ДанныеПредставления   = КлючИЗначение.Значение;
		
		Форма["Надпись" + ПараметрПредставления.Префикс + "ОрганизацияСАТУРН"] = ДанныеПредставления.ОрганизацияКонтрагент.Представление;
		
		Если ЕстьРеквизитМестаХранения Тогда
			
			Если ЗначениеЗаполнено(ПараметрПредставления.Склад) Тогда
				
				Если ДанныеПредставления.ТорговыйОбъект.Значение = ПараметрПредставления.Склад
					 Или ТипЗнч(ДанныеПредставления.ТорговыйОбъект.Значение) = Тип("Массив")
					   И ДанныеПредставления.ТорговыйОбъект.Значение.Найти(ПараметрПредставления.Склад) <> Неопределено Тогда
					Форма["Надпись" + ПараметрПредставления.Префикс + "МестоХранения"] = ДанныеПредставления.ТорговыйОбъект.Представление;
				ИначеЕсли ДанныеПредставления.ПроизводственныйОбъект.Значение = ПараметрПредставления.Склад
					Или ТипЗнч(ДанныеПредставления.ПроизводственныйОбъект.Значение) = Тип("Массив")
					   И ДанныеПредставления.ПроизводственныйОбъект.Значение.Найти(ПараметрПредставления.Склад) <> Неопределено Тогда
					Форма["Надпись" + ПараметрПредставления.Префикс + "МестоХранения"] = ДанныеПредставления.ПроизводственныйОбъект.Представление;
				Иначе
					Форма["Надпись" + ПараметрПредставления.Префикс + "МестоХранения"] = ДанныеПредставления[ИмяПоляСопоставленияМестаХранения].Представление;
				КонецЕсли;
				
			Иначе
				
				Форма["Надпись" + ПараметрПредставления.Префикс + "МестоХранения"] = ДанныеПредставления[ИмяПоляСопоставленияМестаХранения].Представление;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Локализация

Процедура ДобавитьОбщиеНастройкиВстраивания(Форма, ПараметрыИнтеграции)
	
	ОбщиеНастройки = СобытияФормИС.ОбщиеПараметрыИнтеграции("СобытияФормСАТУРН");
	ПараметрыИнтеграции.Вставить("САТУРН", ОбщиеНастройки);
	
КонецПроцедуры

// Встраивает реквизит - форматированную строку перехода к САТУРН в прикладные формы
// 
// Параметры:
//   Форма                - ФормаКлиентскогоПриложения - форма в которую происходит встраивание
//   ПараметрыИнтеграции  - см. ПараметрыИнтеграцииСАТУРН
//   ДобавляемыеРеквизиты - Массив           - массив реквизитов формы к добавлению

Процедура ДобавитьРеквизитТекстСостояниеСАТУРН(Форма, ПараметрыИнтеграции, ДобавляемыеРеквизиты)
	
	ПараметрыИнтеграцииСАТУРН = ПараметрыИнтеграцииСАТУРН(Форма);
	
	Если ЗначениеЗаполнено(ПараметрыИнтеграцииСАТУРН.ИмяРеквизитаФормы) Тогда
		ПараметрыИнтеграции.Вставить("САТУРН.ДокументОснование", ПараметрыИнтеграцииСАТУРН);
		Реквизит = Новый РеквизитФормы(
			ПараметрыИнтеграцииСАТУРН.ИмяРеквизитаФормы,
			Новый ОписаниеТипов("ФорматированнаяСтрока"),,
			ПараметрыИнтеграцииСАТУРН.Заголовок);
		ДобавляемыеРеквизиты.Добавить(Реквизит);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру, заполненную значениями по умолчанию, используемую для интеграции реквизитов САТУРН
//   в прикладные формы конфигурации - потребителя библиотеки ГосИС. Если передана форма - сразу заполняет ее
//   специфику в переопределяемом модуле.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения, Неопределено - форма для которой возвращаются параметры интеграции
//
// ВозвращаемоеЗначение:
//   Структура - (См. СобытияФормИС.ПараметрыИнтеграцииДляДокументаОснования).
//
Функция ПараметрыИнтеграцииСАТУРН(Форма = Неопределено)
	
	ПараметрыНадписи = СобытияФормИС.ПараметрыИнтеграцииДляДокументаОснования();
	ПараметрыНадписи.Вставить("Ключ",              "ЗаполнениеТекстаДокументаСАТУРН");
	ПараметрыНадписи.Вставить("МодульЗаполнения",  "СобытияФормСАТУРН");
	ПараметрыНадписи.Вставить("ИмяЭлементаФормы",  "ТекстДокументаСАТУРН");
	ПараметрыНадписи.Вставить("ИмяРеквизитаФормы", "ТекстДокументаСАТУРН");
	
	Если НЕ(Форма = Неопределено) Тогда
		СобытияФормСАТУРНПереопределяемый.ПриОпределенииПараметровИнтеграцииСАТУРН(Форма, ПараметрыНадписи);
	КонецЕсли;
	
	Возврат ПараметрыНадписи;
	
КонецФункции

#КонецОбласти

#КонецОбласти
