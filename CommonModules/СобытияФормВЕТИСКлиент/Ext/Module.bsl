#Область ПрограммныйИнтерфейс

#Область Локализация

// Выполняет переопределяемую команду
//
// Параметры:
//  Форма                   - ФормаКлиентскогоПриложения - форма, в которой расположена команда
//  Команда                 - КомандаФормы     - команда формы
//  ДополнительныеПараметры - Структура        - дополнительные параметры.
//
Процедура ВыполнитьПереопределяемуюКоманду(Форма, Команда, ДополнительныеПараметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Обрабатывает нажатие на гиперссылку со статусом обработки документа в ВетИС.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма документа, в которой произошло нажатие на гиперссылку,
//  НавигационнаяСсылкаФорматированнойСтроки - Строка - значение гиперссылки форматированной строки,
//  СтандартнаяОбработка - Булево - признак стандартной (системной) обработки события.
//
Процедура ОбработкаНавигационнойСсылки(Форма, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка) Экспорт
	
	Если НЕ ЭтоНавигационнаяСсылкаВЕТИС(НавигационнаяСсылкаФорматированнойСтроки) Тогда
		Возврат;
	КонецЕсли;
	
	Объект = Форма[Форма.ПараметрыИнтеграцииГосИС.Получить("ВЕТИС").ИмяРеквизитаФормыОбъект];
	ИнтеграцияВЕТИСКлиент.ОбработкаНавигационнойСсылкиВФормеДокументаОснования(
		Форма,
		Объект,
		Неопределено,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка);
	
КонецПроцедуры

// Обработка оповещения ВетИС.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма в которую пришло оповещение
//  ИмяСобытия - Строка - Имя события
//  Параметр - Произвольный - Параметр
//  Источник - Произвольный - Источник
//  ДополнительныеПараметры - Произвольный - Дополнительные параметры
Процедура ОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник, ДополнительныеПараметры) Экспорт
	
	Если НЕ ЭтоОповещениеВЕТИС(ИмяСобытия) Тогда
		Возврат;
	КонецЕсли;
	
	МестоВызова = Новый Структура;
	МестоВызова.Вставить("Форма",  Форма);
	МестоВызова.Вставить("Объект", Форма[Форма.ПараметрыИнтеграцииГосИС.Получить("ВЕТИС").ИмяРеквизитаФормыОбъект]);
	
	Событие = Новый Структура;
	Событие.Вставить("Имя",        ИмяСобытия);
	Событие.Вставить("Параметр",   Параметр);
	Событие.Вставить("Источник",   Источник);
	Событие.Вставить("Обработано", Ложь);
	
	СобытияФормИСКлиентПереопределяемый.ОбработкаОповещенияВФормеДокументаОснования(МестоВызова, Событие);
	
	Если Событие.Обработано Тогда
		Возврат;
	КонецЕсли;
	
	Подсистема = Новый Структура;
	Подсистема.Вставить("Имя",ИнтеграцияВЕТИСКлиентСервер.ИмяПодсистемы());
	Подсистема.Вставить("МодульВызовСервера",ИнтеграцияВЕТИСВызовСервера);
	
	СобытияФормИСКлиент.ОбработкаОповещенияВФормеДокументаОснования(МестоВызова, Событие, Подсистема);
	
КонецПроцедуры

Процедура ПослеЗаписи(Форма, ПараметрыЗаписи) Экспорт
	
	СобытияФормВЕТИСКлиентПереопределяемый.ПослеЗаписи(Форма, ПараметрыЗаписи);
	
КонецПроцедуры

#Область СобытияЭлементовФорм

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
// Параметры:
//   Форма                   - ФормаКлиентскогоПриложения - форма, из которой происходит вызов процедуры.
//   Элемент                 - ЭлементФормы     - элемент-источник события "При изменении"
//   ДополнительныеПараметры - Структура        - значения дополнительных параметров влияющих на обработку.
//
Процедура ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры) Экспорт
	
	СобытияФормВЕТИСКлиентПереопределяемый.ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры);
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
Процедура ПриВыбореЭлемента(Форма, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ДополнительныеПараметры = Неопределено) Экспорт
	
	//++ Локализация
	СобытияФормВЕТИСКлиентПереопределяемый.ПриВыбореЭлемента(Форма, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ДополнительныеПараметры);
	//-- Локализация
	Возврат;
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
Процедура ПриАктивизацииЯчейки(Форма, Элемент, ДополнительныеПараметры) Экспорт
	
	СобытияФормВЕТИСКлиентПереопределяемый.ПриАктивизацииЯчейки(Форма, Элемент, ДополнительныеПараметры);
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
Процедура ПриНачалеРедактирования(Форма, Элемент, НоваяСтрока, Копирование, ДополнительныеПараметры) Экспорт
	
	СобытияФормВЕТИСКлиентПереопределяемый.ПриНачалеРедактирования(Форма, Элемент, НоваяСтрока, Копирование, ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

// Вызывается при наступлении события "Выбор" в табличной части.
// Открывает форму выбранного элемента, если имя реквизита входит в массив имен.
//
// Параметры:
// Форма - ФормаКлиентскогоПриложения - форма объекта,
// ТаблицаФормы - ТаблицаФормы - таблица в которой произошло событие,
// ВыбранноеПоле - ПолеФормы
Процедура ВыборЭлементаТабличнойЧастиОткрытьФормуЭлемента(Форма, ТаблицаФормы, ВыбранноеПоле) Экспорт
	
	МассивИмен = МассивИменРеквизитовФормыОткрытия();
	
	ИмяТабличнойЧасти = ТаблицаФормы.Имя;
	
	Для Каждого ИмяЭлемента Из МассивИмен Цикл
		
		Если Форма.Элементы.Найти(ИмяТабличнойЧасти + ИмяЭлемента) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Форма.Элементы[ИмяТабличнойЧасти + ИмяЭлемента] = ВыбранноеПоле
			И ЗначениеЗаполнено(ТаблицаФормы.ТекущиеДанные[ИмяЭлемента]) Тогда
			
			НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ТаблицаФормы.ТекущиеДанные[ИмяЭлемента]);
			ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(НавигационнаяСсылка);
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#Область ВыборОснования

// Открывает форму выбора документа-основания.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, из которой выполняется команда выбора,
//  ОповещениеПриЗавершении - ОписаниеОповещения - действие формы после завершения выбора,
//  Основание - Строка - имя метаданных документа-основания.
//  ТипОбъекта - Тип - тип документа ВетИС для которого происходит выбор основания
// 
// Возвращаемое значение:
//  Булево - форма выбора основания документа подсистемы ВетИС открыта
Функция ОткрытьФормуВыбораОснованияДокументаИС(Форма, ОповещениеПриЗавершении, Основание, ТипОбъекта) Экспорт
	
	Если ТипОбъекта = Тип("ДокументСсылка.ВходящаяТранспортнаяОперацияВЕТИС")Тогда
		ОткрытьФормуВыбораОснованияВходящейТранспортнойОперации(Форма, ОповещениеПриЗавершении, Основание);
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.ИнвентаризацияПродукцииВЕТИС") Тогда
		ОткрытьФормуВыбораОснованияИнвентаризацииПродукции(Форма, ОповещениеПриЗавершении, Основание);
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.ИсходящаяТранспортнаяОперацияВЕТИС")Тогда
		ОткрытьФормуВыбораОснованияИсходящейТранспортнойОперации(Форма, ОповещениеПриЗавершении, Основание);
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.ПроизводственнаяОперацияВЕТИС") Тогда
		ОткрытьФормуВыбораОснованияПроизводственнойОперации(Форма, ОповещениеПриЗавершении, Основание);
	Иначе
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область Номенклатура

// Открывает форму подбора номенклатуры.
//
// Параметры:
//  Форма                   - ФормаКлиентскогоПриложения   - форма, в которой вызывается команда открытия обработки сопоставления;
//  ОповещениеПриЗавершении - ОписаниеОповещения - процедура, вызываемая после закрытия формы подбора,
//  ПараметрыПодбора        - Структура          - параметры открытия формы подбора товаров, состав полей определен в функции
//                                                 ИнтеграцияВЕТИСКлиентСерверПереопределяемый.ПараметрыФормыПодбораТоваров.
//
Процедура ОткрытьФормуПодбораНоменклатуры(Форма, ОповещениеПриЗавершении = Неопределено, ПараметрыПодбора = Неопределено) Экспорт
	
	ОсобенностьУчета = Новый Массив;
	ОсобенностьУчета.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС"));
	ОсобенностьУчета.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПодконтрольнаяПродукцияВЕТИС"));
	ОсобенностьУчета.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ЗерноВЕТИС"));
	ОсобенностьУчета.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродуктыПереработкиЗернаВЕТИС"));
	ОсобенностьУчета.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МорепродуктыПодконтрольныеВЕТИС"));
	ОсобенностьУчета.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхПодконтрольныеВЕТИС"));
	ОсобенностьУчета.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КонсервированнаяПродукцияПодконтрольнаяВЕТИС"));
	ОсобенностьУчета.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МясоПодконтрольноеВЕТИС"));
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ЗаписьСкладскогоЖурнала

Процедура ВыполнитьДействиеРазбитьСтроку(ТабличнаяЧасть, ИсходнаяСтрока, ВычитаемоеКоличествоВЕТИС, ВыбранноеЗначение, ДействиеИзмененияКоличества) Экспорт
	
	НоваяСтрока = ТабличнаяЧасть.Вставить(ТабличнаяЧасть.Индекс(ИсходнаяСтрока) + 1);
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходнаяСтрока);
	НоваяСтрока.ИдентификаторСтроки = Новый УникальныйИдентификатор;
	ПолеВЕТИС = "Количество"+ВыбранноеЗначение.Суффикс+"ВЕТИС";
	Поле = "Количество"+ВыбранноеЗначение.Суффикс;
	Если ИсходнаяСтрока[ПолеВЕТИС] <> 0 Тогда
		Коэффициент = 1 - ВычитаемоеКоличествоВЕТИС / НоваяСтрока[ПолеВЕТИС];
		НоваяСтрока[ПолеВЕТИС] = НоваяСтрока[ПолеВЕТИС] - ВычитаемоеКоличествоВЕТИС;
		НоваяСтрока[Поле] = НоваяСтрока[Поле] * Коэффициент;
	КонецЕсли;
	Если ДействиеИзмененияКоличества <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДействиеИзмененияКоличества, НоваяСтрока);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьВыборЗаписиЖурналаСНедостаткомКоличества(ТабличнаяЧасть, ВыбранноеЗначение, ТекущиеДанные,
		ДействиеВыбораЗаписи, ДействиеИзмененияКоличества = Неопределено) Экспорт
	
	Знак = ?(ТекущиеДанные.Количество > 0, 1, -1);
	ТекстВопроса = СтрШаблон(НСтр("ru = 'Остаток по записи журнала (%1) меньше, чем указано в строке табличной части (%2)'"),
		ВыбранноеЗначение.КоличествоВЕТИС / ВыбранноеЗначение.КоэффициентПересчета,
		Знак * ТекущиеДанные["Количество" + ВыбранноеЗначение.Суффикс + "ВЕТИС"]);
	ВариантыЗаполнения = Новый СписокЗначений;
	ВариантыЗаполнения.Добавить("РазбитьСтроку", НСтр("ru = 'Разбить строку'"));
	ВариантыЗаполнения.Добавить("ИзменитьСтроку", НСтр("ru = 'Изменить количество'"));
	ВариантыЗаполнения.Добавить(КодВозвратаДиалога.Пропустить);
	ВариантыЗаполнения.Добавить(КодВозвратаДиалога.Отмена);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ТабличнаяЧасть", ТабличнаяЧасть);
	ДополнительныеПараметры.Вставить("ВыбранноеЗначение", ВыбранноеЗначение);
	ДополнительныеПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
	ДополнительныеПараметры.Вставить("ДействиеВыбораЗаписи", ДействиеВыбораЗаписи);
	ДополнительныеПараметры.Вставить("ДействиеИзмененияКоличества", ДействиеИзмененияКоличества);
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьВыборЗаписиЖурналаСНедостаткомКоличестваЗавершение", ЭтотОбъект, ДополнительныеПараметры),
		ТекстВопроса,
		ВариантыЗаполнения,,
		"РазбитьСтроку");
		
КонецПроцедуры

Процедура ОбработатьВыборЗаписиЖурналаСНедостаткомКоличестваЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено
		Или Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ТабличнаяЧасть              = ДополнительныеПараметры.ТабличнаяЧасть;
	ВыбранноеЗначение           = ДополнительныеПараметры.ВыбранноеЗначение;
	ТекущиеДанные               = ДополнительныеПараметры.ТекущиеДанные;
	ДействиеВыбораЗаписи        = ДополнительныеПараметры.ДействиеВыбораЗаписи;
	ДействиеИзмененияКоличества = ДополнительныеПараметры.ДействиеИзмененияКоличества;
	Знак = ?(ТекущиеДанные.Количество > 0, 1, -1);
	
	Если Результат = КодВозвратаДиалога.Пропустить Тогда
		ВыполнитьОбработкуОповещения(ДействиеВыбораЗаписи, ВыбранноеЗначение);
		Возврат;
	КонецЕсли;
	
	ВыбранноеКоличество = ВыбранноеЗначение.КоличествоВЕТИС / ВыбранноеЗначение.КоэффициентПересчета;
	
	Если Результат = "РазбитьСтроку" Тогда
		ВыполнитьДействиеРазбитьСтроку(
			ТабличнаяЧасть, ТекущиеДанные, Знак*ВыбранноеКоличество, ВыбранноеЗначение, ДействиеИзмененияКоличества);
	КонецЕсли;
	
	Если Результат = "РазбитьСтроку" Или Результат = "ИзменитьСтроку" Тогда
		ТекущиеДанные["Количество" + ВыбранноеЗначение.Суффикс] = ТекущиеДанные["Количество" + ВыбранноеЗначение.Суффикс]
			* Знак * ВыбранноеКоличество
			/ ТекущиеДанные["Количество" + ВыбранноеЗначение.Суффикс + "ВЕТИС"];
		ТекущиеДанные["Количество" + ВыбранноеЗначение.Суффикс + "ВЕТИС"] = Знак * ВыбранноеЗначение.КоличествоВЕТИС;
		ТекущиеДанные.ЕдиницаИзмеренияВЕТИС = ВыбранноеЗначение.ЕдиницаИзмеренияВЕТИС;
		Если ДействиеИзмененияКоличества <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДействиеИзмененияКоличества, ТекущиеДанные);
		КонецЕсли;
		ВыполнитьОбработкуОповещения(ДействиеВыбораЗаписи, ВыбранноеЗначение);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьВыборЗаписиСкладскогоЖурналаИзФормыПодбора(СтрокаТабличнойЧасти, ВыбранноеЗначение) Экспорт
	
	СтрокаТабличнойЧасти.ЗаписьСкладскогоЖурнала = ВыбранноеЗначение.ЗаписьСкладскогоЖурнала;
	Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Продукция) Тогда
		СтрокаТабличнойЧасти.Продукция = ВыбранноеЗначение.Продукция;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция МассивИменРеквизитовФормыОткрытия()
	
	Массив = Новый Массив;
	Массив.Добавить("ЗаписьСкладскогоЖурнала");
	Массив.Добавить("Продукция");
	Массив.Добавить("ВетеринарноСопроводительныйДокумент");
	
	Возврат Массив;
	
КонецФункции

Функция ЭтоНавигационнаяСсылкаВЕТИС(НавигационнаяСсылка)
	
	Возврат СтрНайти(НавигационнаяСсылка, "ИнтеграцияИС_КомандаНавигационнойСсылки#ВетИС#") > 0;
	
КонецФункции

Функция ЭтоОповещениеВЕТИС(ИмяСобытия)
	
	Возврат СтрНайти(ИмяСобытия, "ИнтеграцияИС_СобытиеОповещения#ВЕТИС#") > 0;
	
КонецФункции

#Область ВыборОснования

// Открывает форму выбора документа-основания по исходящей транспортной операции ВЕТИС.
//
// Параметры:
//  ФормаВладелец           - ФормаКлиентскогоПриложения   - форма, из которой выполняется команда выбора,
//  ОповещениеПриЗавершении - ОписаниеОповещения - действие формы после завершения выбора,
//  ИмяДокумента            - Строка             - имя метаданных документа-основания.
//
Процедура ОткрытьФормуВыбораОснованияИсходящейТранспортнойОперации(Форма, ОповещениеПриЗавершении, ИмяДокумента)
	
	Если НЕ ПроверитьВсяПродукцияСопоставлена(Форма,Форма.Объект.Товары) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура;
	
	СоответствиеПолейДокументовОснованийИТранспортныхОпераций = Новый Соответствие;
	ИнтеграцияВЕТИСКлиентСерверПереопределяемый.ЗаполнитьСоответствиеПолейДокументовОснованийИИсходящейТранспортнойОперации(
		СоответствиеПолейДокументовОснованийИТранспортныхОпераций);
		
	СоответствиеПолеРеквизит = Новый Соответствие;
	СоответствиеПолеРеквизит.Вставить("ГрузоотправительХозяйствующийСубъект", "ГрузоотправительСопоставлениеХСДляОтбораОснований");
	СоответствиеПолеРеквизит.Вставить("ГрузоотправительПредприятие",          "ГрузоотправительСопоставлениеПредприятияДляОтбораОснований");
	СоответствиеПолеРеквизит.Вставить("ГрузополучательХозяйствующийСубъект",  "ГрузополучательСопоставлениеХСДляОтбораОснований");
	СоответствиеПолеРеквизит.Вставить("ГрузополучательПредприятие",           "ГрузополучательСопоставлениеПредприятияДляОтбораОснований");
		
	Для Каждого СоответствиеПоля Из СоответствиеПолейДокументовОснованийИТранспортныхОпераций[ИмяДокумента] Цикл
		Если ЗначениеЗаполнено(СоответствиеПоля.Значение) 
			И ЗначениеЗаполнено(Форма[СоответствиеПолеРеквизит[СоответствиеПоля.Ключ]]) Тогда
			СтруктураОтбора.Вставить(СоответствиеПоля.Значение, Форма[СоответствиеПолеРеквизит[СоответствиеПоля.Ключ]]);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыОткрытияФормы = Новый Структура;
	Если СтруктураОтбора.Количество() > 0 Тогда
		ПараметрыОткрытияФормы.Вставить("Отбор", СтруктураОтбора);
	КонецЕсли;
	
	ДополнительныеПараметры = ПодключаемыеКомандыИСКлиент.ПараметрыЗавершенияВыбораОснования();
	ДополнительныеПараметры.Форма                   = Форма;
	ДополнительныеПараметры.ОповещениеПриЗавершении = ОповещениеПриЗавершении;
	ДополнительныеПараметры.ПерезаполнениеДоступно  = НЕ(Форма.РедактированиеФормыНедоступно ИЛИ Форма.ТолькоПросмотр);
	ИмяФормыВыбора = "Документ." + ИмяДокумента + ".ФормаВыбора";
	
	ПодключаемыеКомандыИСКлиент.ОткрытьФормуВыбораОснования(
		ИмяФормыВыбора,
		ПараметрыОткрытияФормы,
		Форма,
		ДополнительныеПараметры);
	
КонецПроцедуры

// Открывает форму выбора документа-основания по входящей транспортной операции ВЕТИС.
//
// Параметры:
//  ФормаВладелец           - ФормаКлиентскогоПриложения   - форма, из которой выполняется команда выбора,
//  ОповещениеПриЗавершении - ОписаниеОповещения - действие формы после завершения выбора,
//  ИмяДокумента            - Строка             - имя метаданных документа-основания.
//
Процедура ОткрытьФормуВыбораОснованияВходящейТранспортнойОперации(Форма, ОповещениеПриЗавершении, ИмяДокумента)
	
	Если НЕ ПроверитьВсяПродукцияСопоставлена_Уточнение(Форма) 
		ИЛИ НЕ ПроверитьВсяПродукцияСопоставлена(Форма, Форма.Объект.Товары.НайтиСтроки(Новый Структура("ЕстьУточнения",Ложь))) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытияФормы = Новый Структура;
	
	ДополнительныеПараметры = ПодключаемыеКомандыИСКлиент.ПараметрыЗавершенияВыбораОснования();
	ДополнительныеПараметры.Форма                   = Форма;
	ДополнительныеПараметры.ОповещениеПриЗавершении = ОповещениеПриЗавершении;
	
	ИмяФормыВыбора = "Документ." + ИмяДокумента + ".ФормаВыбора";
	
	ПодключаемыеКомандыИСКлиент.ОткрытьФормуВыбораОснования(
		ИмяФормыВыбора,
		ПараметрыОткрытияФормы,
		Форма,
		ДополнительныеПараметры);
	
КонецПроцедуры

// Открывает форму выбора документа-основания по производственной операции ВЕТИС.
//
// Параметры:
//  ФормаВладелец           - ФормаКлиентскогоПриложения   - форма, из которой выполняется команда выбора,
//  ОповещениеПриЗавершении - ОписаниеОповещения - действие формы после завершения выбора,
//  ИмяДокумента            - Строка             - имя метаданных документа-основания.
//
Процедура ОткрытьФормуВыбораОснованияПроизводственнойОперации(Форма, ОповещениеПриЗавершении, ИмяДокумента)
	
	Если НЕ ПроверитьВсяПродукцияСопоставлена(Форма, Форма.Объект.Товары) 
		ИЛИ НЕ ПроверитьВсяПродукцияСопоставлена(Форма, Форма.Объект.Сырье) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура;
	
	СоответствиеПолей = Новый Соответствие;
	ИнтеграцияВЕТИСКлиентСерверПереопределяемый.ЗаполнитьСоответствиеПолейДокументовОснованийИПроизводственнойОперации(СоответствиеПолей);
	
	Для Каждого СоответствиеПоля Из СоответствиеПолей[ИмяДокумента] Цикл
		Если ЗначениеЗаполнено(СоответствиеПоля.Значение)
			И ЗначениеЗаполнено(Форма[СоответствиеПоля.Ключ+"Соответствие"]) Тогда
			СтруктураОтбора.Вставить(СоответствиеПоля.Значение, Форма[СоответствиеПоля.Ключ+"Соответствие"]);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыОткрытияФормы = Новый Структура;
	Если СтруктураОтбора.Количество() > 0 Тогда
		ПараметрыОткрытияФормы.Вставить("Отбор", СтруктураОтбора);
	КонецЕсли;
	
	ДополнительныеПараметры = ПодключаемыеКомандыИСКлиент.ПараметрыЗавершенияВыбораОснования();
	ДополнительныеПараметры.Форма                   = Форма;
	ДополнительныеПараметры.ОповещениеПриЗавершении = ОповещениеПриЗавершении;
	ДополнительныеПараметры.ПерезаполнениеДоступно  = Не Форма.ТолькоПросмотр;
	
	ИмяФормыВыбора = "Документ." + ИмяДокумента + ".ФормаВыбора";
	
	ПодключаемыеКомандыИСКлиент.ОткрытьФормуВыбораОснования(
		ИмяФормыВыбора,
		ПараметрыОткрытияФормы,
		Форма,
		ДополнительныеПараметры);
	
КонецПроцедуры

// Открывает форму выбора документа-основания по инвентаризации продукции ВЕТИС.
//
// Параметры:
//  ФормаВладелец           - ФормаКлиентскогоПриложения   - форма, из которой выполняется команда выбора,
//  ОповещениеПриЗавершении - ОписаниеОповещения - действие формы после завершения выбора,
//  ИмяДокумента            - Строка             - имя метаданных документа-основания.
//
Процедура ОткрытьФормуВыбораОснованияИнвентаризацииПродукции(Форма, ОповещениеПриЗавершении, ИмяДокумента)
	
	Если НЕ ПроверитьВсяПродукцияСопоставлена(Форма, Форма.Объект.Товары) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура;
	
	СоответствиеПолей = Новый Соответствие;
	ИнтеграцияВЕТИСКлиентСерверПереопределяемый.ЗаполнитьСоответствиеПолейДокументовОснованийИИнвентаризацииПродукции(СоответствиеПолей);
	
	Для Каждого СоответствиеПоля Из СоответствиеПолей[ИмяДокумента] Цикл
		Если ЗначениеЗаполнено(СоответствиеПоля.Значение)
			И ЗначениеЗаполнено(Форма[СоответствиеПоля.Ключ+"Соответствие"]) Тогда
			СтруктураОтбора.Вставить(СоответствиеПоля.Значение, Форма[СоответствиеПоля.Ключ+"Соответствие"]);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыОткрытияФормы = Новый Структура;
	Если СтруктураОтбора.Количество() > 0 Тогда
		ПараметрыОткрытияФормы.Вставить("Отбор", СтруктураОтбора);
	КонецЕсли;
	
	ДополнительныеПараметры = ПодключаемыеКомандыИСКлиент.ПараметрыЗавершенияВыбораОснования();
	ДополнительныеПараметры.Форма                   = Форма;
	ДополнительныеПараметры.ОповещениеПриЗавершении = ОповещениеПриЗавершении;
	ДополнительныеПараметры.ПерезаполнениеДоступно  = НЕ(Форма.РедактированиеФормыНедоступно ИЛИ Форма.ТолькоПросмотр);
	
	ИмяФормыВыбора = "Документ." + ИмяДокумента + ".ФормаВыбора";
	
	ПодключаемыеКомандыИСКлиент.ОткрытьФормуВыбораОснования(
		ИмяФормыВыбора,
		ПараметрыОткрытияФормы,
		Форма,
		ДополнительныеПараметры);
	
КонецПроцедуры

Функция ПроверитьВсяПродукцияСопоставлена(Форма, ТабличнаяЧасть, ИмяТабличнойЧасти = "Товары")
	
	Отказ = Ложь;
	
	Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура)Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Требуется сопоставить номенклатуру'"),,
				СтрШаблон("Объект.%1[%2].Номенклатура",ИмяТабличнойЧасти,СтрокаТабличнойЧасти.НомерСтроки),,
				Отказ);
		КонецЕсли;
	КонецЦикла;

	Возврат НЕ Отказ;
	
КонецФункции

Функция ПроверитьВсяПродукцияСопоставлена_Уточнение(Форма)
	
	Отказ = Ложь;
	
	Для Каждого СтрокаТабличнойЧасти Из Форма.Объект.ТоварыУточнение Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Количество) Тогда
			СтрокиТовары = Форма.Объект.Товары.НайтиСтроки(Новый Структура("ИдентификаторСтроки",СтрокаТабличнойЧасти.ИдентификаторСтроки));
			Если СтрокиТовары.Количество() Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(
					НСтр("ru = 'Требуется сопоставить номенклатуру'"),,
					СтрШаблон("Объект.Товары[%1].Номенклатура",СтрокиТовары[0].НомерСтроки),,
				Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат НЕ Отказ;
	
КонецФункции

#КонецОбласти

#КонецОбласти
