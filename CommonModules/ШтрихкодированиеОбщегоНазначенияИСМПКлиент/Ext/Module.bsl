#Область ПрограммныйИнтерфейс

#Область ПроверкаКодовМаркировкиСредствамиКТТ

// Запускает проверку кодов маркировки средствами ККТ. По завершении проверки будет вызвано оповещение, переданное в параметрах.
// 
// Параметры:
//  ПараметрыНачалаПроверки - см. ПараметрыНачалаПроверкиКодовМаркировкиСредствамиККТ.
Процедура НачатьПроверкуКодовМаркировкиСредствамиККТ(ПараметрыНачалаПроверки) Экспорт
	
	ПараметрыПроверки = НовыеПараметрыПроверкиНаККТ(ПараметрыНачалаПроверки);
	
	Для Каждого ЭлементПроверки Из ПараметрыПроверки.ЭлементыПроверки Цикл
		
		РезультатПроверки = НовыйРезультатПроверкиЭлементаСредствамиККТ();
		РезультатПроверки.ВидУпаковки = ЭлементПроверки.ВидУпаковки;
		ПараметрыПроверки.Результат.ДанныеПроверки.Вставить(ЭлементПроверки.ИдентификаторЭлемента, РезультатПроверки);
		
		Если ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияИСМП(ЭлементПроверки.ВидПродукции, Истина)
			И ПараметрыПроверки.ПараметрыСканирования.ТребуетсяПроверкаСредствамиККТ Тогда
			ЗаполнитьПланируемыйСтатусТовара(ЭлементПроверки, ПараметрыПроверки.ПараметрыСканирования);
			РезультатПроверки.ТребуетсяРазрешительныйЗапросГИСМТ = ОбщегоНазначенияИСМПКлиентСерверПовтИсп.ПродукцияПодлежитОбязательнойОнлайнПроверкеПередРозничнойПродажей(
				ЭлементПроверки.ВидПродукции,
				ПараметрыПроверки.ПараметрыСканирования.ВидОперацииИСМП,
				ПараметрыПроверки.ПараметрыСканирования.ТребуетсяПроверкаСредствамиККТ);
			КонтролироватьКодыМаркировкиСредствамиККТ = НастройкаПараметровСканированияСлужебныйКлиентСерверПовтИсп.КонтролироватьКодыМаркировкиСредствамиККТ(
				ЭлементПроверки.ВидПродукции,
				ПараметрыПроверки.ПараметрыСканирования.ВидОперацииИСМП);
			РезультатПроверки.ОтображатьОшибки             = КонтролироватьКодыМаркировкиСредствамиККТ;
			РезультатПроверки.ПропуститьОжиданиеОтветаОИСМ = Не КонтролироватьКодыМаркировкиСредствамиККТ;
			Если ЭлементПроверкиСредствамиКТТПроверяетсяНаОборудовании(ЭлементПроверки) Тогда
				ПараметрыПроверки.ЕстьДанныеДляПроверкиИСМП = Истина;
			КонецЕсли;
		ИначеЕсли ЭлементПроверки.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная") Тогда
			ПараметрыПроверки.ЕстьДанныеДляПроверкиЕГАИС = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДанныеДляПроверкиСредствамиККТСодержатОшибки(ПараметрыПроверки) Тогда
		Возврат;
	КонецЕсли;
	
	ФормаБлокировкиПоПараметрамПроверки = ФормаБлокировкиПоПараметрамПроверки(ПараметрыПроверки);
	
	Если ПараметрыПроверки.ЕстьДанныеДляПроверкиИСМП Тогда
		
		Если Не ЗначениеЗаполнено(ПараметрыПроверки.ИдентификаторУстройства) Тогда
			ВызватьИсключение НСтр("ru = 'Внутреняя ошибка. Не заполнен идентификатор устройства ККТ'");
		КонецЕсли;
		
		Если Не ПараметрыПроверки.РежимБРМК Тогда
			
			ОткрытьФорму(
				"ОбщаяФорма.ОжиданиеПроверкиКодовМаркировкиИСМП",,
				ФормаБлокировкиПоПараметрамПроверки(ПараметрыПроверки));
			
		КонецЕсли;
		
		Если ИспользуетсяВерсияБПОСЕдинымМетодомПроверкиКМСредствамиККТ() Тогда
			
			УстановитьНачалоПроверкиСредствамиККТ(ПараметрыПроверки);
			
		Иначе
			
			//@skip-check code-after-async-call
			Оповестить(
				"НачалоПроверкиСредствамиККТ",
				ПараметрыПроверки,
				ФормаБлокировкиПоПараметрамПроверки);
			
		КонецЕсли;
		
	ИначеЕсли ПараметрыПроверки.ЕстьДанныеДляПроверкиЕГАИС Тогда
		
		ОбработкаРезультатаПроверкиСредствамиККТ(ПараметрыПроверки, ФормаБлокировкиПоПараметрамПроверки);
		
	Иначе
		
		ПараметрыПроверки.Результат.ВыполнитьФискализацию = Истина;
		ВыполнитьОбработкуОповещения(ПараметрыПроверки.ОповещениеОЗавершении, ПараметрыПроверки.Результат);
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры начала проверки кодов маркировки средствами ККТ.
// Параметры используюся дла начала проверки методом (см. НачатьПроверкуКодовМаркировкиСредствамиККТ).
// 
// Возвращаемое значение:
//  Структура:
// * ОповещениеОЗавершении   - ОписаниеОповещения - Оповещение, которое будет вызвано по окончании проверки,
//                             в качестве результат будет передано значения типа (см. НовыйРезультатПроверкиСредствамиККТ).
// * ДанныеДляПроверки       - см. ШтрихкодированиеОбщегоНазначенияИСМПКлиентСервер.НовыйЭлементДанныхПроверкиСредствамиККТ
// * ДанныеДляПроверки       - Массив из см. ШтрихкодированиеОбщегоНазначенияИСМПКлиентСервер.НовыйЭлементДанныхПроверкиСредствамиККТ
// * ПараметрыСканирования   - см. ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования
// * ФормаОсновногоОбъекта   - ФормаКлиентскогоПриложения               - Форма, связанная с основным объектов проверки, например, форма РТиУ.
// * ФормаВспомогательная    - ФормаКлиентскогоПриложения, неопределено - Форма, отображаемая пользоваетелю в текущий момент, например, форма предпросмотра чека.
// * ЗаголовокКнопкиИгнорировать - Строка, Неопределено - Заголовок кнопки для игнорирования ошибки проверки на ККТ.
//                                                        Результат проверки на ККТ может быть отрицательным, описание ошибки
//                                                        отображается в соответствующей форме.
//                                                        После подтверждения покупателем отрицательного результата проверки
//                                                        ошибка может быть проигнорирована и операция продолжена.
//                                                        Если это операция пробития чека то в этом свойстве может быть задано, например:
//                                                        "Прибить чек", "Покупатель согласен", "Оформить передачу". По-умолчанию "Игнорировать ошибку". 
// * ЭтоДокументОплаты       - Булево - Взвести флаг, если вызов происходит по отдельному документу оплаты, без привязки к форме документа с кодами маркировки, Например ПКО по РТиУ.
// * ЭтоСканирование         - Булево - Внутренний. Признак вызова проверки при сканировании.
// * ПроверятьЗапросыГИСМТ   - Булево - Признак проверки идентификаторов запросов ГИС МТ при розничной продаже
Функция ПараметрыНачалаПроверкиКодовМаркировкиСредствамиККТ() Экспорт
	
	ВозвращаемоеЗначение = Новый Структура();
	
	ВозвращаемоеЗначение.Вставить("ОповещениеОЗавершении",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ДанныеДляПроверки",           Неопределено);
	ВозвращаемоеЗначение.Вставить("ПараметрыСканирования",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ФормаОсновногоОбъекта",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ФормаВспомогательная",        Неопределено);
	ВозвращаемоеЗначение.Вставить("ЗаголовокКнопкиИгнорировать", Неопределено);
	ВозвращаемоеЗначение.Вставить("ЭтоСканирование",             Ложь);
	ВозвращаемоеЗначение.Вставить("ЭтоДокументОплаты",           Ложь);
	ВозвращаемоеЗначение.Вставить("ПроверятьЗапросыГИСМТ",       Ложь);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Проверка кода маркировки средствами ККТ по данным штрихкода.
// 
// Параметры:
//  ПараметрыСканирования - см. ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования
//  РезультатОбработкиШтрихкода - см. ШтрихкодированиеОбщегоНазначенияИСМП.РезультатОбработкиКодаМаркировки
//  ФормаВладелец - ФормаКлиентскогоПриложения - Владелец
//  ОписаниеОповещения - ОписаниеОповещения - 
//  ИсходныйРезультатВыбора - Неопределено - Исходный результат выбора
Процедура ПроверкаКодаМаркировкиСредствамиККТПоДаннымШтрихкода(ПараметрыСканирования, РезультатОбработкиШтрихкода, ФормаВладелец, ОписаниеОповещения, ИсходныйРезультатВыбора = Неопределено) Экспорт
	
	ДанныеШтрихкода = РезультатОбработкиШтрихкода.ДанныеШтрихкода;
	
	Если ИсходныйРезультатВыбора <> Неопределено Тогда
		Если ИсходныйРезультатВыбора.ДанныеВыбора.ЧастичноеВыбытие Тогда
			ДанныеШтрихкода.ЧастичноеВыбытие = Истина;
			ДанныеШтрихкода.Количество       = ИсходныйРезультатВыбора.ДанныеВыбора.Количество;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ДанныеШтрихкода.ВидПродукции)
			И ЗначениеЗаполнено(ИсходныйРезультатВыбора.ДанныеВыбора.Номенклатура)
			И ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда
			МодульШтрихкодированиеИСМПВызовСервера = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеИСМПВызовСервера");
			МодульШтрихкодированиеИСМПВызовСервера.ДополнитьДанныеШтрихкодаПоРезультатамУточненияДляПроверкиККТ(
				ДанныеШтрихкода,
				ИсходныйРезультатВыбора.ДанныеВыбора,
				ПараметрыСканирования);
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеШтрихкода.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая") Тогда
		ЭлементыПроверки = РезультатОбработкиШтрихкода.ВложенныеШтрихкодыДляПроверкиККТ;
	Иначе
		ЭлементыПроверки = Новый Массив;
		ЭлементПроверки = ШтрихкодированиеОбщегоНазначенияИСМПКлиентСервер.НовыйЭлементПроверкиСредствамиККТПоДаннымШтрихкода(
			ДанныеШтрихкода);
		ЭлементыПроверки.Добавить(ЭлементПроверки);
		Если ЗначениеЗаполнено(ЭлементПроверки.ЧастичноеВыбытиеКоличество) Тогда
			ЭлементОбработки = ШтрихкодированиеОбщегоНазначенияИСМПКлиентСервер.НоваяСтруктураУстановкиДополнительныхСвойствПриПроверкеККТ();
			Если ИсходныйРезультатВыбора <> Неопределено
				И ИсходныйРезультатВыбора.ДанныеВыбора.ЧастичноеВыбытие Тогда
				ЭлементОбработки.СтрокаТовары = ИсходныйРезультатВыбора.ДанныеВыбора;
			Иначе
				ЭлементОбработки.СтрокаТовары = ДанныеШтрихкода;
			КонецЕсли;
			ЭлементОбработки.СтрокаНазначения    = ЭлементПроверки;
			ЭлементОбработки.ЭтоЧастичноеВыбытие = Истина;
			ДанныеЗаполненияСвойствПриПроверкеККТ = Новый Массив();
			ДанныеЗаполненияСвойствПриПроверкеККТ.Добавить(ЭлементОбработки);
			ШтрихкодированиеОбщегоНазначенияИСМПКлиентСервер.ПриУстановкеДополнительныхСвойствЭлеметовПроверкиСредствамиККТ(ДанныеЗаполненияСвойствПриПроверкеККТ);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыОповещенияЗавершения = Новый Структура;
	ПараметрыОповещенияЗавершения.Вставить("УточнениеДанныхЗавершение",   ОписаниеОповещения);
	ПараметрыОповещенияЗавершения.Вставить("ПараметрыСканирования",       ПараметрыСканирования);
	ПараметрыОповещенияЗавершения.Вставить("РезультатОбработкиШтрихкода", РезультатОбработкиШтрихкода);
	ПараметрыОповещенияЗавершения.Вставить("ИсходныйРезультатВыбора",     ИсходныйРезультатВыбора);
	
	ОповещениеЗавершения = Новый ОписаниеОповещения(
		"ПроверкаКодовМаркировкиСредствамиККТЗавершение",
		ЭтотОбъект,
		ПараметрыОповещенияЗавершения);
	
	ПараметрыПроверки = ПараметрыНачалаПроверкиКодовМаркировкиСредствамиККТ();
	ПараметрыПроверки.ОповещениеОЗавершении = ОповещениеЗавершения;
	ПараметрыПроверки.ДанныеДляПроверки     = ЭлементыПроверки;
	ПараметрыПроверки.ПараметрыСканирования = ПараметрыСканирования;
	ПараметрыПроверки.ФормаОсновногоОбъекта = ФормаВладелец;
	ПараметрыПроверки.ЭтоСканирование       = Истина;
	
	ШтрихкодированиеИСМПКлиентСерверПереопределяемый.ПриУстановкеДополнительныхПараметровПроверкиКодовМаркировкиСредствамиККТ(ПараметрыПроверки, ПараметрыСканирования);
	
	ПараметрыПроверки.ЗаголовокКнопкиИгнорировать = НСтр("ru = 'Добавить товар'");
	
	НачатьПроверкуКодовМаркировкиСредствамиККТ(ПараметрыПроверки);
	
КонецПроцедуры

// Обработка оповещения при проверке средствами ККТ.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  ИмяСобытия - Строка
//  Параметры - Произвольный -
//  Источник - Произвольный -
Процедура ОбработкаОповещенияПриПроверкеСредствамиККТ(Форма, ИмяСобытия, Параметры, Источник) Экспорт
	
	Если Форма.ВладелецФормы <> Источник И Форма <> Источник
		Или Источник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяСобытия = "НачалоПроверкиСредствамиККТ" Тогда
		
		УстановитьНачалоПроверкиСредствамиККТ(Параметры)
		
	КонецЕсли;
	
КонецПроцедуры

// Имя события оповещения изменилось состояние проверки средствами ККТ.
// 
// Возвращаемое значение:
//  Строка - Имя события оповещения изменилось состояние проверки средствами ККТ
Функция ИмяСобытияОповещенияИзменилосьСостояниеПроверкиСредствамиККТ() Экспорт
	Возврат "ИзменилосьСостояниеПроверкиСредствамиККТ";
КонецФункции

// Имя события оповещения следующего шага проверки средствами ККТ.
// 
// Возвращаемое значение:
//  Строка - Имя события оповещения следующего шага проверки средствами ККТ
Функция ИмяСобытияОповещенияСледующегоШагаПроверкиСредствамиККТ() Экспорт
	Возврат "СледующийШагПроверкиСредствамиККТ";
КонецФункции

// Имя события оповещения есть ошибки проверки средствами ККТ.
// 
// Возвращаемое значение:
//  Строка - Имя события оповещения есть ошибки проверки средствами ККТ
Функция ИмяСобытияОповещенияЕстьОшибкиПроверкиСредствамиККТ() Экспорт
	Возврат "ЕстьОшибкиПроверкиСредствамиККТ";
КонецФункции

// Имя события оповещения прогресс получения идентификаторов запроса ГИС МТ.
// 
// Возвращаемое значение:
//  Строка - Имя события оповещения прогресс получения идентификаторов запроса ГИС МТ
Функция ИмяСобытияОповещенияПрогрессПолученияИдентификаторовЗапросаГИСМТ() Экспорт
	Возврат "ПрогрессПолученияИдентификаторовЗапросаГИСМТ";
КонецФункции

// Выполнение шага проверки средствами ККТ.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения -
//  ПараметрыПроверки - см. НовыеПараметрыПроверкиНаККТ
Процедура ВыполнениеШагаПроверкиСредствамиККТ(Форма, ПараметрыПроверки) Экспорт
	
	ВыполняемыеОперации = ШтрихкодированиеОбщегоНазначенияИСМПКлиентСервер.ВыполняемыеОперацииПроверкиСредствамиККТ();
	
	ФормаИсточник = ФормаБлокировкиПоПараметрамПроверки(ПараметрыПроверки);
	
	Если ПараметрыПроверки.ЭлементыПроверки.Количество() = 0
		Или ПараметрыПроверки.ТекущийИндекс > ПараметрыПроверки.ЭлементыПроверки.ВГраница()
		Или ЗначениеЗаполнено(ПараметрыПроверки.Результат.ТекстОшибки)
		Или ЗначениеЗаполнено(ПараметрыПроверки.Результат.ТекстОшибкиГИСМТ)
		Или (ПараметрыПроверки.ПерерватьОперацию
			И ПараметрыПроверки.ТекущаяОперация = ВыполняемыеОперации.ЛокальнаяПроверка) Тогда
		
		ОбработкаРезультатаПроверкиСредствамиККТ(ПараметрыПроверки, ФормаИсточник);
		Возврат;
	
	КонецЕсли;
	
	Оповестить(
		ИмяСобытияОповещенияИзменилосьСостояниеПроверкиСредствамиККТ(),
		ПараметрыПроверки,
		ФормаИсточник);
	
	Если ПараметрыПроверки.ТекущаяОперация = ВыполняемыеОперации.ПроверкаЕдинымМетодомБПО Тогда
		
		ПроверкаКМСредствамиККТЕдинымМетодомБПО(ПараметрыПроверки);
		
	ИначеЕсли ПараметрыПроверки.ТекущаяОперация = ВыполняемыеОперации.ЛокальнаяПроверка Тогда
		
		ЛокальнаяПроверкаИОтправкаЗапроса(ПараметрыПроверки);
		
	ИначеЕсли ПараметрыПроверки.ТекущаяОперация = ВыполняемыеОперации.УдаленнаяПроверка Тогда
		
		ПолучениеРезультатаУдаленнойПроверки(ПараметрыПроверки);
		
	ИначеЕсли ПараметрыПроверки.ТекущаяОперация = ВыполняемыеОперации.Подтверждение Тогда
		
		ПодтверждениеКодаМаркировки(ПараметрыПроверки);
	
	ИначеЕсли ПараметрыПроверки.ТекущаяОперация = ВыполняемыеОперации.ПроверкаИдентификатораГИСМТ Тогда
		
		ПроверкаИдентификатораГИСМТПоКодуМаркировки(ПараметрыПроверки);
		
	ИначеЕсли ПараметрыПроверки.ТекущаяОперация = ВыполняемыеОперации.ПолучениеТокенаГИСМТ Тогда
		
		ПолучениеТокенаГИСМТ(ПараметрыПроверки);
		
	ИначеЕсли ПараметрыПроверки.ТекущаяОперация = ВыполняемыеОперации.ОбновлениеCDNПлощадок Тогда
		
		ОбновлениеCDNПлощадокГИСМТ(ПараметрыПроверки);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает текущий элемент коллекции для проверки средствами ККТ.
// 
// Параметры:
//  ПараметрыПроверки - см. НовыеПараметрыПроверкиНаККТ
// 
// Возвращаемое значение:
//  см. ШтрихкодированиеОбщегоНазначенияИСМПКлиентСервер.НовыйЭлементДанныхПроверкиСредствамиККТ
Функция ТекущийЭлементПроверкиСредствамиККТ(ПараметрыПроверки) Экспорт
	Возврат ПараметрыПроверки.ЭлементыПроверки[ПараметрыПроверки.ТекущийИндекс];
КонецФункции

#КонецОбласти

#Область ОбработкаКодовСлужебныеПроцедурыИФункции

// Проверяет результат обработки штрихкода на необходимость интерактивного уточнения данных у пользователя.
// 
// Параметры:
//  РезультатОбработки - Структура - (См. ШтрихкодированиеОбщегоНазначенияИСМП.ИнициализироватьРезультатОбработкиШтрихкода).
// Возвращаемое значение:
//  Булево - Истина, если необходимо уточнить данные у пользователя.
Функция ТребуетсяУточнениеДанныхУПользователя(РезультатОбработки) Экспорт
	
	Возврат РезультатОбработки.ТребуетсяАвторизацияИСМП
		Или РезультатОбработки.ТребуетсяУточнениеДанных
		Или РезультатОбработки.ТребуетсяАвторизацияИСМПРозница;
	
КонецФункции

// Выполняет анализ результат обработки штрихкода, на основании которого выполняет необходимые действия.
// 
// Параметры:
//  ПараметрыЗавершенияВводаШтрихкода - Структура - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыЗавершенияОбработкиШтрихкода).
//  ВыполнятьОбработчикОповещения     - Булево    - Выполнять обработчик оповещения.
// 
// Возвращаемое значение:
//  Булево - Завершить обработку ввода штрихкода.
Функция ЗавершитьОбработкуВводаШтрихкода(ПараметрыЗавершенияВводаШтрихкода, ВыполнятьОбработчикОповещения = Истина) Экспорт
	
	Форма                       = ПараметрыЗавершенияВводаШтрихкода.Форма;
	ПараметрыСканирования       = ПараметрыЗавершенияВводаШтрихкода.ПараметрыСканирования;
	РезультатОбработкиШтрихкода = ПараметрыЗавершенияВводаШтрихкода.РезультатОбработкиШтрихкода;
	
	АвторизацияИСМП = РезультатОбработкиШтрихкода.Свойство("ТребуетсяАвторизацияИСМП") И РезультатОбработкиШтрихкода.ТребуетсяАвторизацияИСМП;
	Если АвторизацияИСМП Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("АвторизацияПользователяЗавершение",
			ЭтотОбъект, ПараметрыЗавершенияВводаШтрихкода);
		
		ПараметрыЗапросаКлючаСессии = ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ПараметрыЗапросаКлючаСессии(ПараметрыСканирования.Организация);
		ИнтерфейсАвторизацииИСМПКлиент.ЗапроситьКлючСессии(ПараметрыЗапросаКлючаСессии, ОписаниеОповещения);
		
		Возврат Истина;
		
	КонецЕсли;
	
	АвторизацияИСМПРозница = РезультатОбработкиШтрихкода.Свойство("ТребуетсяАвторизацияИСМПРозница") И РезультатОбработкиШтрихкода.ТребуетсяАвторизацияИСМПРозница;
	Если АвторизацияИСМПРозница Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("АвторизацияПользователяЗавершение",
			ЭтотОбъект, ПараметрыЗавершенияВводаШтрихкода);
		
		ПараметрыЗапросаКлючаСессии = ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ПараметрыЗапросаКлючаСессииИСМПРозница(ПараметрыСканирования.Организация);
		ИнтерфейсАвторизацииИСМПКлиент.ЗапроситьКлючСессии(ПараметрыЗапросаКлючаСессии, ОписаниеОповещения);
		
		Возврат Истина;
		
	КонецЕсли;
	
	ЗавершитьОбработкуПринудительно = ОбработкаРасширенныхУточненийДанныхПоШтрихкодам(ПараметрыЗавершенияВводаШтрихкода);
	
	Если ЗавершитьОбработкуПринудительно Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияИСМП(
		РезультатОбработкиШтрихкода.ДанныеШтрихкода.ВидПродукции, Истина)
		И РезультатОбработкиШтрихкода.ТребуетсяПроверкаСредствамиККТ
		И Не РезультатОбработкиШтрихкода.ПроверкаСредствамиККТЗавершена Тогда
			
		ПараметрыЗавершенияВводаШтрихкода.Форма = Неопределено;
		Форма.КодМаркировкиДляУточнения = ПараметрыЗавершенияВводаШтрихкода;
		Форма.ПодключитьОбработчикОжидания("Подключаемый_ОткрытьФормуУточненияДанных", 0.1, Истина);
		Возврат Истина;
			
	КонецЕсли;
	
	Если ВыполнятьОбработчикОповещения И Не (ПараметрыЗавершенияВводаШтрихкода.ОповещениеПриЗавершении = Неопределено) Тогда
		
		ВыполнитьОбработкуОповещения(ПараметрыЗавершенияВводаШтрихкода.ОповещениеПриЗавершении, РезультатОбработкиШтрихкода);
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Выполняет повторно вызов клиентских функий обработки штрихкодов в случае успешного прохождения авторизации.
// 
// Параметры:
// 	Результат - Соответствие - содержит информация о необходимости авторизации по организации.
// 	ПараметрыЗавершенияОбработкиШтрихкода - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыЗавершенияОбработкиШтрихкода).
Процедура АвторизацияПользователяЗавершение(Результат, ПараметрыЗавершенияОбработкиШтрихкода) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Соответствие") Тогда
		Возврат;
	КонецЕсли;
	
	Форма                       = ПараметрыЗавершенияОбработкиШтрихкода.Форма;
	ПараметрыСканирования       = ПараметрыЗавершенияОбработкиШтрихкода.ПараметрыСканирования;
	РезультатОбработкиШтрихкода = ПараметрыЗавершенияОбработкиШтрихкода.РезультатОбработкиШтрихкода;
	
	Организация = ПараметрыСканирования.Организация;
	
	АвторизацияПрошлаУспешно = Результат[Организация] = Истина;
	
	Если АвторизацияПрошлаУспешно Тогда
		
		Если ПараметрыЗавершенияОбработкиШтрихкода.ВызовИзФормыДокумента Тогда
			
			ОповещениеПовторнойОбработки = Новый ОписаниеОповещения(ПараметрыЗавершенияОбработкиШтрихкода.ОбработатьШтрихкод, Форма);
			ВыполнитьОбработкуОповещения(ОповещениеПовторнойОбработки, ПараметрыЗавершенияОбработкиШтрихкода.ДанныеШтрихкода);
			
		Иначе
			
			ЗавершениеОбработки   = ПараметрыЗавершенияОбработкиШтрихкода.ЗавершениеОбработки;
			ДанныеШтрихкода       = ПараметрыЗавершенияОбработкиШтрихкода.ДанныеШтрихкода;
			ПараметрыСканирования = ПараметрыЗавершенияОбработкиШтрихкода.ПараметрыСканирования;
			
			ШтрихкодированиеОбщегоНазначенияИСКлиент.ОбработатьДанныеШтрихкода(
				ЗавершениеОбработки, Форма, ДанныеШтрихкода, ПараметрыСканирования);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Результат[Организация]) = Тип("Строка") Тогда
		
		Если ПараметрыСканирования.РежимБРМК Тогда
			
			ПараметрыЗавершенияОбработкиШтрихкода.Форма = Неопределено;
			
			РезультатОбработкиШтрихкода.ТекстОшибки                 = Результат[Организация];
			РезультатОбработкиШтрихкода.ЕстьОшибки                  = Истина;
			
			Форма.КодМаркировкиДляУточнения = ПараметрыЗавершенияОбработкиШтрихкода;
			Форма.ПодключитьОбработчикОжидания("Подключаемый_СообщитьОНевозможностиПодбора", 0.1, Истина);
			
		Иначе
			ПараметрыОткрытияФормы = Новый Структура("ТекстОшибки", Результат[Организация]);
			ОткрытьФорму("ОбщаяФорма.ИнформацияОНевозможностиДобавленияОтсканированного", ПараметрыОткрытияФормы);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроверкаКодовМаркировкиСредствамиКТТ

Функция РежимПроверкиПриСканировании() Экспорт

	НастройкиСканирования = ОбщегоНазначенияИСМПКлиентСерверПовтИсп.НастройкиСканированияКодовМаркировки();
	РежимыКонтроля        = НастройкаПараметровСканированияСлужебныйКлиентСерверПовтИсп.РежимыКонтроляСредствамиККТ();
	
	Возврат (НастройкиСканирования.РежимКонтроляСредствамиККТ = РежимыКонтроля.ПриСканировании);
	
КонецФункции

// Элемент подлежит проверке ККТНа оборудовании.
// 
// Параметры:
//  ЭлементПроверки - см. ШтрихкодированиеОбщегоНазначенияИСМПКлиентСервер.НовыйЭлементДанныхПроверкиСредствамиККТ
// 
// Возвращаемое значение:
//  Булево - Подлежит проверки на оборудовании
Функция ЭлементПроверкиСредствамиКТТПроверяетсяНаОборудовании(ЭлементПроверки) Экспорт
	Возврат (ЭлементПроверки.ВидПродукции <> ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха")
		И ЭлементПроверки.ВидПродукции <> ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная"));
КонецФункции

Процедура ЗаполнитьПланируемыйСтатусТовара(ЭлементПроверки, ПараметрыСканирования)
	
	ПланируемыйСтатусТовара = ПредопределенноеЗначение("Перечисление.ПланируемыйСтатусМаркируемогоТовара.ПустаяСсылка");
	
	Если ПараметрыСканирования.ВидОперацииИСМП = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВыводИзОборотаРозничнаяПродажа")
		Или ПараметрыСканирования.ВидОперацииИСМП = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ОтгрузкаПродажа") Тогда
		
		Если ЗначениеЗаполнено(ЭлементПроверки.ЧастичноеВыбытиеКоличество)
			Или ЭлементПроверки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.ОбъемноСортовойУчет") Тогда
			ПланируемыйСтатусТовара = ПредопределенноеЗначение("Перечисление.ПланируемыйСтатусМаркируемогоТовара.МерныйТоварВСтадииРеализации");
		Иначе
			ПланируемыйСтатусТовара = ПредопределенноеЗначение("Перечисление.ПланируемыйСтатусМаркируемогоТовара.ШтучныйТоварРеализован");
		КонецЕсли;
		
	ИначеЕсли ПараметрыСканирования.ВидОперацииИСМП = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВозвратВОборотПриРозничнойРеализации")
		Или ПараметрыСканирования.ВидОперацииИСМП = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ПриемкаПродажа") Тогда
		
		Если ЗначениеЗаполнено(ЭлементПроверки.ЧастичноеВыбытиеКоличество) Тогда
			ПланируемыйСтатусТовара = ПредопределенноеЗначение("Перечисление.ПланируемыйСтатусМаркируемогоТовара.ЧастьТовараВозвращена");
		Иначе
			ПланируемыйСтатусТовара = ПредопределенноеЗначение("Перечисление.ПланируемыйСтатусМаркируемогоТовара.ШтучныйТоварВозвращен");
		КонецЕсли;
		
	КонецЕсли;
	
	ЭлементПроверки.ПланируемыйСтатусТовара = ПланируемыйСтатусТовара;
	
КонецПроцедуры

Функция ДанныеДляПроверкиСредствамиККТСодержатОшибки(ПараметрыПроверки)
	
	ПараметрыСканирования = ПараметрыПроверки.ПараметрыСканирования;
	
	Для Каждого СтрокаПроверки Из ПараметрыПроверки.Результат.ЭлементыПроверки Цикл
		
		Если СтрокаПроверки.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная") Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаРезультат = ПараметрыПроверки.Результат.ДанныеПроверки[СтрокаПроверки.ИдентификаторЭлемента];
		
		Если Не ЗначениеЗаполнено(СтрокаПроверки.ПолныйКодМаркировки) Тогда
			
			Если Не ПараметрыСканирования.ТребуетсяПроверкаСредствамиККТ
				И СтрокаПроверки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская")
				И СтрокаПроверки.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак") Тогда
			
				СоставКодаМаркировки   = СтрокаПроверки.СоставКодаМаркировки;
				КодВключаетКриптоХвост = Ложь;
				КодВключаетМРЦ         = Ложь;
				
				Если СоставКодаМаркировки <> Неопределено Тогда
					Если СоставКодаМаркировки.Свойство("ВключаетМРЦ") Тогда
						КодВключаетМРЦ = СоставКодаМаркировки.ВключаетМРЦ;
					КонецЕсли;
					Если СоставКодаМаркировки.Свойство("КодВключаетКриптоХвост") Тогда
						КодВключаетКриптоХвост = СоставКодаМаркировки.КодВключаетКриптоХвост;
					КонецЕсли;
				КонецЕсли;
				
				Если Не (КодВключаетКриптоХвост Или КодВключаетМРЦ ) Тогда
					СтрокаРезультат.ТекстОшибки = НСтр("ru = 'Требуется полный код маркировки (включая МРЦ)'");
					СтрокаРезультат.ТребуетсяПолныйКодМаркировки = Истина;
					СтрокаРезультат.ПредставлениеВЧеке           = ШтрихкодированиеОбщегоНазначенияИСМПКлиентСервер.ПредставлениеКодаМаркировкиВЧеке().Отсутствует;
					ПараметрыПроверки.Результат.ЕстьОшибки       = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаПроверки.ТекстОшибки) Тогда
			СтрокаРезультат.ТекстОшибки            = СтрокаПроверки.ТекстОшибки;
			ПараметрыПроверки.Результат.ЕстьОшибки = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПараметрыПроверки.Результат.ЕстьОшибки Тогда
		
		Оповестить(
				ИмяСобытияОповещенияЕстьОшибкиПроверкиСредствамиККТ(),
				ПараметрыПроверки,
				ФормаБлокировкиПоПараметрамПроверки(ПараметрыПроверки));
		
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

Функция НовыйРезультатПроверкиЭлементаСредствамиККТ()
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",           "");
	ВозвращаемоеЗначение.Вставить("ТекстОшибкиГИСМТ",      "");
	ВозвращаемоеЗначение.Вставить("КодМаркировкиПроверен", Ложь);
	ВозвращаемоеЗначение.Вставить("РезультатПроверки",     Ложь);
	
	ВозвращаемоеЗначение.Вставить("РезультаПроверкиОИСМ",  Ложь);
	ВозвращаемоеЗначение.Вставить("КодРезультатаПроверки", 0);
	ВозвращаемоеЗначение.Вставить("СтатусТовара",          Неопределено);
	ВозвращаемоеЗначение.Вставить("КодОбработкиЗапроса",   0);
	
	ВозвращаемоеЗначение.Вставить("ПодтвержденНаККТ",      Ложь);
	ВозвращаемоеЗначение.Вставить("ОтображатьОшибки",      Ложь);
	ВозвращаемоеЗначение.Вставить("ВидУпаковки",           Неопределено);
	
	ВозвращаемоеЗначение.Вставить("ПропуститьОжиданиеОтветаОИСМ",    Ложь);
	ВозвращаемоеЗначение.Вставить("ТребуетсяПолныйКодМаркировки",    Ложь);
	ВозвращаемоеЗначение.Вставить("ПредставлениеРезультатаПроверки", "");
	ВозвращаемоеЗначение.Вставить("ПредставлениеВЧеке",              "");
	
	ВозвращаемоеЗначение.Вставить("ПолученИдентификаторЗапросаГИСМТ",   Ложь);
	ВозвращаемоеЗначение.Вставить("ТребуетсяРазрешительныйЗапросГИСМТ", Ложь);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Новые параметры проверки на ККТ.
// 
// Параметры:
//  ПараметрыНачалаПроверки - см. ПараметрыНачалаПроверкиКодовМаркировкиСредствамиККТ
// 
// Возвращаемое значение:
//  Структура - Новые параметры проверки на ККТ:
// * ФормаОсновногоОбъекта       - ФормаКлиентскогоПриложения - Форма объекта с доступной формой проверки.
// * ФормаВспомогательная        - ФормаКлиентскогоПриложения - Дополнительная форма, вспомогательная, например, форма предпросмотра чека.
// * ОповещениеОЗавершении       - ОписаниеОповещения         - Вызываемое оповещение при завершении проверки.
// * ПараметрыСканирования       - см. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования
// * ИдентификаторУстройства     - Неопределено, СправочникСсылка.ПодключаемоеОборудование - ККТ.
// * ТекущийИндекс               - Число - Текущий индекс проверяемого элемента
// * ЭлементыПроверки            - Массив из см. НовыйЭлементПроверкиСредствамиККТПоДаннымРаспределения.
// * ВыполняетсяЛогирование      - Булево - Записывать в лог запросы и ответы ККТ.
// * ЗаголовокКнопкиИгнорировать - Неопределено, Строка - Надпись на кнопки для игнорирования отрицательного результата проверки.
// * ЗапрещеноИгнорироватьОшибку - Булево - Возникла ошибка цепочки проверки. При такой ошибки фискализация завершиться не успешно.
// * ЭтоСканирование             - Булево - Проверка запущена при сканиронии.
// * ВидПродукции                - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции.
// * ОткрытьФормуПроверки        - Булево - Необходимость отображения формы проверки и подобра.
// * ПерерватьОперацию           - Булево - Признак прервания цепочки операции проверки.
// * ПропускатьПроверкуСредствамиККТ  - Булево - Пропускать проверку статуса средствами ККТ если выполнен контроль статусов.
// * ТекущаяОперация             - Строка, Неопределено - Текущая операция проверки
// * РежимБРМК                   - Булево - Проверка на ККТ выполняется без открытия дополнительных форм
// * ПроверятьЗапросыГИСМТ            - Булево - Признак необходимости проверять наличие идентификаторов ГИС МТ в разрешительном режиме
// * СрокДействияИдентификаторовГИСМТ - Число - Срок действия идентификаторов разрешительного режима, в секундах
// * ЕстьДанныеДляПроверкиИСМП - Булево - наличие продукции ИСМП
// * ЕстьДанныеДляПроверкиЕГАИС - Булево - наличие продукции ЕГАИС
Функция НовыеПараметрыПроверкиНаККТ(ПараметрыНачалаПроверки)
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("ФормаОсновногоОбъекта",   Неопределено);
	ВозвращаемоеЗначение.Вставить("ФормаВспомогательная",    Неопределено);
	ВозвращаемоеЗначение.Вставить("ОповещениеОЗавершении",   Неопределено);
	ВозвращаемоеЗначение.Вставить("ПараметрыСканирования",   Неопределено);
	ВозвращаемоеЗначение.Вставить("ИдентификаторУстройства", Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекущийИндекс",           0);
	ВозвращаемоеЗначение.Вставить("ЭлементыПроверки",        Новый Массив);
	ВозвращаемоеЗначение.Вставить("Результат",               НовыйРезультатПроверкиСредствамиККТ());
	ВозвращаемоеЗначение.Вставить(
		"ВыполняетсяЛогирование",
		ЛогированиеЗапросовИСМПКлиент.ВыполняетсяЛогированиеЗапросов());
	ВозвращаемоеЗначение.Вставить("ЗаголовокКнопкиИгнорировать", Неопределено);
	ВозвращаемоеЗначение.Вставить("ЭтоСканирование",             Ложь);
	ВозвращаемоеЗначение.Вставить("ВидПродукции",                Неопределено);
	ВозвращаемоеЗначение.Вставить("ОткрытьФормуПроверки",        Ложь);
	ВозвращаемоеЗначение.Вставить("ПерерватьОперацию",           Ложь);
	ВозвращаемоеЗначение.Вставить("ЗапрещеноИгнорироватьОшибку", Ложь);
	ВозвращаемоеЗначение.Вставить("ПроверятьЗапросыГИСМТ",       Ложь);
	ВозвращаемоеЗначение.Вставить("РежимБРМК",                   Ложь);
	ВозвращаемоеЗначение.Вставить("ТекущаяОперация",             Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекущийЭтапПроверки",         Неопределено);
	ВозвращаемоеЗначение.Вставить("ЕстьДанныеДляПроверкиИСМП",   Ложь);
	ВозвращаемоеЗначение.Вставить("ЕстьДанныеДляПроверкиЕГАИС",  Ложь);
	
	НастройкиСканирования = ОбщегоНазначенияИСМПКлиентСерверПовтИсп.НастройкиСканированияКодовМаркировки();
	
	ВозвращаемоеЗначение.Вставить(
		"ПропускатьПроверкуСредствамиККТ",
		НастройкиСканирования.ПропускатьПроверкуСредствамиККТ);
		
	ВозвращаемоеЗначение.Вставить(
		"СрокДействияИдентификаторовГИСМТ",
		НастройкиСканирования.СрокДействияИдентификатораРазрешительногоРежима);
	
	ВозвращаемоеЗначение.ОповещениеОЗавершении       = ПараметрыНачалаПроверки.ОповещениеОЗавершении;
	ВозвращаемоеЗначение.ПараметрыСканирования       = ПараметрыНачалаПроверки.ПараметрыСканирования;
	ВозвращаемоеЗначение.ФормаОсновногоОбъекта       = ПараметрыНачалаПроверки.ФормаОсновногоОбъекта;
	ВозвращаемоеЗначение.ЗаголовокКнопкиИгнорировать = ПараметрыНачалаПроверки.ЗаголовокКнопкиИгнорировать;
	ВозвращаемоеЗначение.ФормаВспомогательная        = ПараметрыНачалаПроверки.ФормаВспомогательная;
	ВозвращаемоеЗначение.ЭтоСканирование             = ПараметрыНачалаПроверки.ЭтоСканирование;
	ВозвращаемоеЗначение.Результат.ЭтоСканирование   = ПараметрыНачалаПроверки.ЭтоСканирование;
	ВозвращаемоеЗначение.Результат.ЭтоДокументОплаты = ПараметрыНачалаПроверки.ЭтоДокументОплаты;
	ВозвращаемоеЗначение.ПроверятьЗапросыГИСМТ       = ПараметрыНачалаПроверки.ПроверятьЗапросыГИСМТ;
	ВозвращаемоеЗначение.РежимБРМК                   = ПараметрыНачалаПроверки.ПараметрыСканирования.РежимБРМК;
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
		ВозвращаемоеЗначение.ФормаОсновногоОбъекта,
		"ПараметрыУказанияСерий") Тогда
		ВозвращаемоеЗначение.Результат.ОтсутствуетФормаПроверки = Истина;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыНачалаПроверки.ДанныеДляПроверки) = Тип("Массив") Тогда
		ВозвращаемоеЗначение.ЭлементыПроверки = ПараметрыНачалаПроверки.ДанныеДляПроверки;
	Иначе
		ВозвращаемоеЗначение.ЭлементыПроверки.Добавить(ПараметрыНачалаПроверки.ДанныеДляПроверки);
	КонецЕсли;
	
	Если ВозвращаемоеЗначение.ЭлементыПроверки.Количество()
		И ПараметрыНачалаПроверки.ПараметрыСканирования.Свойство("ККТФФД12ИСМП") Тогда
		ВозвращаемоеЗначение.ИдентификаторУстройства = ПараметрыНачалаПроверки.ПараметрыСканирования.ККТФФД12ИСМП;
	КонецЕсли;
	
	ВозвращаемоеЗначение.Результат.ЭлементыПроверки = ВозвращаемоеЗначение.ЭлементыПроверки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Конструктор структуры данных результата проверки средствами ККТ.
// 
// Возвращаемое значение:
//  Структура:
// * ЕстьОшибки            - Булево       - Признак наличия ошибок при проверке
// * ТекстОшибки           - Строка       - Текст общей ошибки, например, не подключено оборудование.
// * ТекстОшибкиГИСМТ      - Строка       - Текст ошибки с ГИС МТ
// * ДанныеПроверки        - Соответствие Из КлючИЗначение - результат проверки в соответсвии с исходными переданным данными для проверки.
// * ЭлементыПроверки      - Массив из см. НовыйЭлементПроверкиСредствамиККТПоДаннымРаспределения      - Элементы проверки.
// * ВыполнитьФискализацию - Булево       - Истина, если ошибок не было или пользователь согласен с ошибками проверки.
// * ЗакрытьВспомогательнуюФорму - Булево - Истина, если требуется закрыть не основную форму.
// * ДанныеВыбора          - Структура    - Служебное. Не предназначено для использования.
// * ЗапомнитьВыбор        - Булево       - Служебное. Не предназначено для использования.
// * ЭтоДокументОплаты     - Булево       - Взвести флаг, если вызов происходит по отдельному документу оплаты, без привязки к форме документа с кодами маркировки.
// * ЭтоСканирование       - Булево       - Внутренний. Признак вызова проверки при сканировании.
// * ЭтоДокументОплаты     - Булево       - Внутренний. Признак пробития чека объектом, отличным от объекта хранения марок.
// * ОтсутствуетФормаПроверки - Булево    - Внутренний. Истина, если к форме объекта не подключена форма проверки.
Функция НовыйРезультатПроверкиСредствамиККТ()
	
	ВозвращаемоеЗначение = Новый Структура();
	
	ВозвращаемоеЗначение.Вставить("ЕстьОшибки",       Ложь);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",      "");
	ВозвращаемоеЗначение.Вставить("ТекстОшибкиГИСМТ", "");
	ВозвращаемоеЗначение.Вставить("ДанныеПроверки",   Новый Соответствие);
	ВозвращаемоеЗначение.Вставить("ЭлементыПроверки", Новый Массив());
	
	ВозвращаемоеЗначение.Вставить("ВыполнитьФискализацию",       Ложь);
	ВозвращаемоеЗначение.Вставить("ЗакрытьВспомогательнуюФорму", Ложь);
	ВозвращаемоеЗначение.Вставить("ЭтоСканирование",             Ложь);
	ВозвращаемоеЗначение.Вставить("ЭтоДокументОплаты",           Ложь);
	ВозвращаемоеЗначение.Вставить("ОтсутствуетФормаПроверки",    Ложь);
	
	// для механизмов штрихкодирования
	ВозвращаемоеЗначение.Вставить("ДанныеВыбора",   Новый Структура);
	ВозвращаемоеЗначение.Вставить("ЗапомнитьВыбор", Ложь);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ФормаБлокировкиПоПараметрамПроверки(ПараметрыПроверки, ДляОборудования = Ложь) Экспорт
	
	Если ПараметрыПроверки.ФормаВспомогательная = Неопределено Тогда
		Если ДляОборудования
			И ПараметрыПроверки.ПараметрыСканирования.ИспользуетсяСоответствиеШтрихкодовСтрокДерева
			И Не ПараметрыПроверки.ПараметрыСканирования.РежимБРМК
			И ПараметрыПроверки.ФормаОсновногоОбъекта.ВладелецФормы <> Неопределено Тогда
			Возврат ПараметрыПроверки.ФормаОсновногоОбъекта.ВладелецФормы;
		Иначе
			Возврат ПараметрыПроверки.ФормаОсновногоОбъекта;
		КонецЕсли;
	ИначеЕсли ДляОборудования Тогда
		Возврат ПараметрыПроверки.ФормаОсновногоОбъекта;
	Иначе
		Возврат ПараметрыПроверки.ФормаВспомогательная;
	КонецЕсли;
	
КонецФункции

Процедура ДополнитьРезультатПроверкиСредствамиККТДаннымиОстаткаЧастичногоВыбытия(ПараметрыПроверки, ЭлементПроверки, РезультатПроверки)
	
	ОперацияИС = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ОперацияИС(ПараметрыПроверки.ПараметрыСканирования, ЭлементПроверки.ВидПродукции);
	
	Если Не ПараметрыПроверки.ЭтоСканирование
		И ЗначениеЗаполнено(ЭлементПроверки.ЧастичноеВыбытиеКоличество)
		И (ОперацияИС = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВыводИзОборотаРозничнаяПродажа")
			Или ОперацияИС = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ОтгрузкаПродажа")
			Или (ЭлементПроверки.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная")
				И ОперацияИС = ПредопределенноеЗначение("Перечисление." + "ВидыДокументовЕГАИС.ЧекККМ")))
		И ЗначениеЗаполнено(ЭлементПроверки.ЧастичноеВыбытиеКоличество)
		И ЭлементПроверки.ЧастичноеВыбытиеОстаток <> Неопределено
		И ЭлементПроверки.ЧастичноеВыбытиеКоличество > ЭлементПроверки.ЧастичноеВыбытиеОстаток Тогда
		
		Если ЗначениеЗаполнено(РезультатПроверки.ТекстОшибки) Тогда
			РезультатПроверки.ТекстОшибки = РезультатПроверки.ТекстОшибки + Символы.ПС;
		КонецЕсли;
		
		ПредставлениеЕдиницы = ОбщегоНазначенияИСКлиентСервер.ПредставлениеЕдиницыЧастичногоВыбытия(ЭлементПроверки.ВидПродукции);
		
		Если ЭлементПроверки.ЧастичноеВыбытиеОстаток < 0 Тогда
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Недостаточно остатка во вскрытой потребительской упаковке: %1 %2'"),
				-(ЭлементПроверки.ЧастичноеВыбытиеКоличество - ЭлементПроверки.ЧастичноеВыбытиеОстаток),
				ПредставлениеЕдиницы);
		Иначе
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Недостаточно остатка во вскрытой потребительской упаковке: %1 %2'"),
				-(ЭлементПроверки.ЧастичноеВыбытиеОстаток - ЭлементПроверки.ЧастичноеВыбытиеКоличество),
				ПредставлениеЕдиницы);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭлементПроверки.ЧастичноеВыбытиеКомментарий) Тогда
			ТекстОшибки = СтрШаблон(
				"%1 (%2)",
				ТекстОшибки,
				ЭлементПроверки.ЧастичноеВыбытиеКомментарий);
		КонецЕсли;
		
		РезультатПроверки.ТекстОшибки          = РезультатПроверки.ТекстОшибки + ТекстОшибки;
		ПараметрыПроверки.Результат.ЕстьОшибки = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаРезультатаПроверкиСредствамиККТ(ПараметрыПроверки, ФормаИсточник = Неопределено)
	
	Если ФормаИсточник = Неопределено Тогда
		ФормаИсточник = ФормаБлокировкиПоПараметрамПроверки(ПараметрыПроверки);
	КонецЕсли;
	
	РежимПроверкиПриСканировании = РежимПроверкиПриСканировании();
	
	Для Каждого СтрокаПроверки Из ПараметрыПроверки.Результат.ЭлементыПроверки Цикл
		
		РезультатПроверкиСтроки = ПараметрыПроверки.Результат.ДанныеПроверки[СтрокаПроверки.ИдентификаторЭлемента];
		
		Если Не ПараметрыПроверки.ЭтоСканирование
			И (РежимПроверкиПриСканировании Или ПараметрыПроверки.ПараметрыСканирования.РежимБРМК)
			И Не (РезультатПроверкиСтроки.ПодтвержденНаККТ
				Или РезультатПроверкиСтроки.ТребуетсяПолныйКодМаркировки) Тогда
			ДополнитьРезультатПроверкиСредствамиККТДаннымиОстаткаЧастичногоВыбытия(
				ПараметрыПроверки, СтрокаПроверки, РезультатПроверкиСтроки);
			Продолжить;
		КонецЕсли;
		
		Если Не РезультатПроверкиСтроки.ОтображатьОшибки
			И Не РезультатПроверкиСтроки.ТребуетсяПолныйКодМаркировки Тогда
			ДополнитьРезультатПроверкиСредствамиККТДаннымиОстаткаЧастичногоВыбытия(
				ПараметрыПроверки, СтрокаПроверки, РезультатПроверкиСтроки);
			Продолжить;
		КонецЕсли;
		
		Если Не ЭлементПроверкиСредствамиКТТПроверяетсяНаОборудовании(СтрокаПроверки) Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеПредставления = ШтрихкодированиеОбщегоНазначенияИСМПКлиентСервер.ДанныеПредставленияРезультатовПроверкиСредствамиККТ(РезультатПроверкиСтроки);
		
		Если ДанныеПредставления.ЕстьОшибки Тогда
			РезультатПроверкиСтроки.ПредставлениеВЧеке = ДанныеПредставления.ПредставлениеВЧеке;
			РезультатПроверкиСтроки.ТекстОшибки        = ДанныеПредставления.ОписаниеОшибок;
			ПараметрыПроверки.Результат.ЕстьОшибки     = Истина;
		КонецЕсли;
		
		ДополнитьРезультатПроверкиСредствамиККТДаннымиОстаткаЧастичногоВыбытия(
			ПараметрыПроверки, СтрокаПроверки, РезультатПроверкиСтроки);
		
	КонецЦикла;
	
	Если ПараметрыПроверки.ПерерватьОперацию Тогда
		
		Если Не ПараметрыПроверки.ЭтоСканирование  Тогда
			ВыполнитьОбработкуОповещения(ПараметрыПроверки.ОповещениеОЗавершении, ПараметрыПроверки.Результат);
		КонецЕсли;
		
		Оповестить("ЗакрытьОкноОжиданияПроверкиСредствамиККТ",, ФормаИсточник);
		
	ИначеЕсли ПараметрыПроверки.Результат.ЕстьОшибки Тогда
		
		Если ПараметрыПроверки.ЕстьДанныеДляПроверкиЕГАИС
			И Не ПараметрыПроверки.ЕстьДанныеДляПроверкиИСМП Тогда
			
			МодульШтрихкодированиеИСМПКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеИСМПКлиент");
			МодульШтрихкодированиеИСМПКлиент.ОткрытьФормуОтображенияОшибок(ПараметрыПроверки);
			
		Иначе
			
			Оповестить(
				ИмяСобытияОповещенияЕстьОшибкиПроверкиСредствамиККТ(),
				ПараметрыПроверки,
				ФормаИсточник);
			
		КонецЕсли;
		
	Иначе
		
		Если Не ПараметрыПроверки.ЭтоСканирование Тогда
			ПараметрыПроверки.Результат.ВыполнитьФискализацию = Истина;
		КонецЕсли;
		
		Оповестить("ЗакрытьОкноОжиданияПроверкиСредствамиККТ",, ФормаИсточник);
		ВыполнитьОбработкуОповещения(ПараметрыПроверки.ОповещениеОЗавершении, ПараметрыПроверки.Результат);
		
	КонецЕсли;
	
КонецПроцедуры

// Оповещает формы о необходимости выполнить следующий шаг проверки средствами ККТ
// 
// Параметры:
//  ПараметрыПроверки - см. НовыеПараметрыПроверкиНаККТ
//  Интервал - Неопределено, Число - Интервал
Процедура СледующийШагПроверкиСредствамиККТ(ПараметрыПроверки, Интервал = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Интервал) Тогда
		Интервал = 0.1;
	КонецЕсли;
	
	Оповестить(
		ИмяСобытияОповещенияСледующегоШагаПроверкиСредствамиККТ(),
		Интервал,
		ФормаБлокировкиПоПараметрамПроверки(ПараметрыПроверки));
	
КонецПроцедуры

// Следующий код на проверку средствами ККТ.
// 
// Параметры:
//  ПараметрыПроверки - см. НовыеПараметрыПроверкиНаККТ
Процедура СледующийКодНаПроверкуСредствамиККТ(ПараметрыПроверки)
	
	ВыполняемыеОперации = ШтрихкодированиеОбщегоНазначенияИСМПКлиентСервер.ВыполняемыеОперацииПроверкиСредствамиККТ();
	
	Если ИспользуетсяВерсияБПОСЕдинымМетодомПроверкиКМСредствамиККТ() Тогда
		ПараметрыПроверки.ТекущаяОперация = ВыполняемыеОперации.ПроверкаЕдинымМетодомБПО;
	Иначе
		ПараметрыПроверки.ТекущаяОперация = ВыполняемыеОперации.ЛокальнаяПроверка;
	КонецЕсли;
	ПараметрыПроверки.ТекущийИндекс = ПараметрыПроверки.ТекущийИндекс + 1;

	СледующийШагПроверкиСредствамиККТ(ПараметрыПроверки);
	
КонецПроцедуры

Функция ВыходныеПараметрыИзРезультатаБПО(ДанныеОтвета)
	
	Если ОбщегоНазначенияИСМПКлиентСерверПовтИсп.РедакцияБПО() = 2 Тогда
		Если ДанныеОтвета.ВыходныеПараметры <> Неопределено
			И ТипЗнч(ДанныеОтвета.ВыходныеПараметры[0]) = Тип("Структура") Тогда
			Возврат ДанныеОтвета.ВыходныеПараметры[0];
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Возврат ДанныеОтвета;
	КонецЕсли;
	
КонецФункции

Функция ТекстДляЗаписиВЛогЗапросов(Операция, ПараметрыПроверки, ЗапросXML = Неопределено, РезультатXML = Неопределено)
	
	СтрокиЛога = Новый Массив;
	
	СтрокиЛога.Добавить(СтрШаблон(
		НСтр("ru = 'Операция: %1 (%2)'"),
		Операция,
		ПараметрыПроверки.ИдентификаторУстройства));
	
	Если ЗначениеЗаполнено(ЗапросXML) Тогда
		СтрокиЛога.Добавить(НСтр("ru = 'Запрос:'"));
		СтрокиЛога.Добавить(ЗапросXML);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РезультатXML) Тогда
		СтрокиЛога.Добавить(НСтр("ru = 'Результат:'"));
		СтрокиЛога.Добавить(РезультатXML);
	КонецЕсли;
	
	Возврат СтрСоединить(СтрокиЛога, Символы.ПС);
	
КонецФункции

Процедура ПроверкаКодовМаркировкиСредствамиККТЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.РезультатОбработкиШтрихкода.ТребуетсяПроверкаСредствамиККТ = Ложь;
	ДополнительныеПараметры.РезультатОбработкиШтрихкода.ПроверкаСредствамиККТЗавершена = Истина;
	
	Если ДополнительныеПараметры.ИсходныйРезультатВыбора = Неопределено Тогда
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.УточнениеДанныхЗавершение, Результат);
	
	Иначе
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.УточнениеДанныхЗавершение, ДополнительныеПараметры.ИсходныйРезультатВыбора);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьНачалоПроверкиСредствамиККТ(ПараметрыПроверки)
	
	ВыполняемыеОперации = ШтрихкодированиеОбщегоНазначенияИСМПКлиентСервер.ВыполняемыеОперацииПроверкиСредствамиККТ();
		
	ПараметрыПроверки.ТекущаяОперация = ВыполняемыеОперации.ПроверкаИдентификатораГИСМТ;
	
	СледующийШагПроверкиСредствамиККТ(ПараметрыПроверки);
	
	Оповестить(
		ИмяСобытияОповещенияИзменилосьСостояниеПроверкиСредствамиККТ(),
		ПараметрыПроверки,
		ФормаБлокировкиПоПараметрамПроверки(ПараметрыПроверки));
	
КонецПроцедуры

#Область НачальныеОперации

Процедура ПроверкаКМСредствамиККТЕдинымМетодомБПО(ПараметрыПроверки)
	
	//@skip-check unknown-method-property
	ПараметрыПроверкиКМ = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыПроверкиКМ();
	
	ТекущийИндекс = -1;
	Для Каждого ЭлементПроверки Из ПараметрыПроверки.ЭлементыПроверки Цикл
		
		ТекущийИндекс = ТекущийИндекс + 1;
		
		Если Не ЭлементПроверкиСредствамиКТТПроверяетсяНаОборудовании(ЭлементПроверки) Тогда
			Продолжить;
		КонецЕсли;
		
		РезультатПроверки = ПараметрыПроверки.Результат.ДанныеПроверки[ЭлементПроверки.ИдентификаторЭлемента]; // см. НовыйРезультатПроверкиЭлементаСредствамиККТ
		
		ПараметрыЗапросаКМ = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыЗапросКМ();
		ПараметрыЗапросаКМ.ИдентификаторЗапроса            = ЭлементПроверки.ИдентификаторЗапроса;
		ПараметрыЗапросаКМ.КонтрольнаяМарка                = ЭлементПроверки.ПолныйКодМаркировки;
		ПараметрыЗапросаКМ.ПланируемыйСтатусТовара         = ЭлементПроверки.ПланируемыйСтатусТовара;
		ПараметрыЗапросаКМ.ЗапросРазрешенияПродажиКМ       = РезультатПроверки.ТребуетсяРазрешительныйЗапросГИСМТ;
		ПараметрыЗапросаКМ.ИдентификаторЗапросаРазрешения  = ЭлементПроверки.РазрешительныйРежимИдентификаторЗапросаГИСМТ;
		ПараметрыЗапросаКМ.ВремяЗапросаРазрешения          = ЭлементПроверки.РазрешительныйРежимДатаЗапросаГИСМТ;
		ПараметрыЗапросаКМ.Наименование                    = ЭлементПроверки.ПредставлениеНоменклатуры;
		ПараметрыЗапросаКМ.ИгнорироватьРезультатПроверкиКМ = Истина;
		ПараметрыЗапросаКМ.ДополнительныеПараметры         = Новый Структура;
		ПараметрыЗапросаКМ.ДополнительныеПараметры.Вставить("ИдентификаторЭлемента", ЭлементПроверки.ИдентификаторЭлемента);
		ПараметрыЗапросаКМ.ДополнительныеПараметры.Вставить("ИндексЭлемента",        ТекущийИндекс);
		ПараметрыЗапросаКМ.АдресСервераЗапросаРазрешения  = ЭлементПроверки.РазрешительныйРежимАдресСервера;
		ПараметрыЗапросаКМ.ТекстЗапросаРазрешения         = ЭлементПроверки.РазрешительныйРежимТелоЗапросаJSON;
		ПараметрыЗапросаКМ.КодОтветаРазрешения            = ЭлементПроверки.РазрешительныйРежимКодОтвета;
		ПараметрыЗапросаКМ.РезультатЗапросаРазрешения     = ЭлементПроверки.РазрешительныйРежимТелоОтветаJSON;
		
		ПараметрыЗапросаКМ.ОжидатьПолучениеОтветаОИСМ      = Не РезультатПроверки.ПропуститьОжиданиеОтветаОИСМ;
		
		Если (ЭлементПроверки.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Пиво")
				Или ЭлементПроверки.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПивоВПотребительскихУпаковках"))
			И ЗначениеЗаполнено(ЭлементПроверки.ЧастичноеВыбытиеКоличество) Тогда
			
			ПараметрыЗапросаКМ.Количество                    = ЭлементПроверки.Количество;
			ПараметрыЗапросаКМ.МераКоличестваПредметаРасчета = ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Литр");
			
		Иначе
			
			ПараметрыЗапросаКМ.Количество = 1;
			
			Если ЭлементПроверки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.ОбъемноСортовойУчет") Тогда
				
				GTINВBase64 = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ШтрихкодВBase64(ЭлементПроверки.СоставКодаМаркировки.GTIN);
				
				ПараметрыЗапросаКМ.МераКоличестваПредметаРасчета = ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Штука");
				ПараметрыЗапросаКМ.ЗапросПроверкиКМСредствамиККТ = Ложь;
				ПараметрыЗапросаКМ.КонтрольнаяМарка              = GTINВBase64;
				
			Иначе
				
				ПараметрыЗапросаКМ.ДробноеКоличество.Числитель   = ЭлементПроверки.ЧастичноеВыбытиеКоличество;
				ПараметрыЗапросаКМ.ДробноеКоличество.Знаменатель = ЭлементПроверки.ЕмкостьПотребительскойУпаковки;
				ПараметрыЗапросаКМ.КодЕдиницыИзмерения           = ЭлементПроверки.КодЕдиницыИзмерения;
				
			КонецЕсли;
		
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ПараметрыЗапросаКМ.КонтрольнаяМарка)
			И ЭлементПроверки.ВидУпаковки <> ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.ОбъемноСортовойУчет") Тогда
			РезультатПроверки.ТребуетсяПолныйКодМаркировки = Истина;
			ПараметрыПроверки.ЗапрещеноИгнорироватьОшибку  = Истина;
			Продолжить;
		КонецЕсли;
		
		Если Не ПараметрыПроверки.ЭтоСканирование Тогда
			
			ИдентификаторСессии = МенеджерОборудованияИСКлиент.СессияПроверкиКодовМаркировки(ПараметрыПроверки.ИдентификаторУстройства);
			
			Если ИдентификаторСессии <> Неопределено Тогда
				
				РезультатПроверки = МенеджерОборудованияИСКлиент.РезультатПроверкиКодаМаркировки(
					ПараметрыПроверки.ИдентификаторУстройства,
					ИдентификаторСессии,
					ПараметрыЗапросаКМ);
				
				Если РезультатПроверки <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЕсли;
		
		ПараметрыПроверкиКМ.ЗапросыКМ.Добавить(ПараметрыЗапросаКМ);
		
	КонецЦикла;
	
	Если ПараметрыПроверкиКМ.ЗапросыКМ.Количество() Тогда
	
		ПроверкаКМСредствамиККТЗавершение = Новый ОписаниеОповещения(
			"ПроверкаКМСредствамиККТЗавершение",
			ЭтотОбъект,
			ПараметрыПроверки);
		
		//@skip-check unknown-method-property
		ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьПроверкуКМ(
			ПроверкаКМСредствамиККТЗавершение,
			ФормаБлокировкиПоПараметрамПроверки(ПараметрыПроверки, Истина).УникальныйИдентификатор,
			ПараметрыПроверки.ИдентификаторУстройства,
			ПараметрыПроверкиКМ);
			
	Иначе
		
		ОбработкаРезультатаПроверкиСредствамиККТ(ПараметрыПроверки);
		
	КонецЕсли;
	
КонецПроцедуры

// Локальная проверка и отправка запроса.
// 
// Параметры:
//  ПараметрыПроверки - см. НовыеПараметрыПроверкиНаККТ
Процедура ЛокальнаяПроверкаИОтправкаЗапроса(ПараметрыПроверки)
	
	ЭлементПроверки   = ТекущийЭлементПроверкиСредствамиККТ(ПараметрыПроверки);
	РезультатПроверки = ПараметрыПроверки.Результат.ДанныеПроверки[ЭлементПроверки.ИдентификаторЭлемента];
	
	Если Не ЭлементПроверкиСредствамиКТТПроверяетсяНаОборудовании(ЭлементПроверки) Тогда
		СледующийКодНаПроверкуСредствамиККТ(ПараметрыПроверки);
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапросаКМ                            = МенеджерОборудованияКлиентСервер.ПараметрыЗапросКМ();
	ПараметрыЗапросаКМ.ИдентификаторЗапроса       = ЭлементПроверки.ИдентификаторЗапроса;
	ПараметрыЗапросаКМ.КонтрольнаяМарка           = ЭлементПроверки.ПолныйКодМаркировки;
	ПараметрыЗапросаКМ.ПланируемыйСтатусТовара    = ЭлементПроверки.ПланируемыйСтатусТовара;
	ПараметрыЗапросаКМ.ОжидатьПолучениеОтветаОИСМ = (Не РезультатПроверки.ПропуститьОжиданиеОтветаОИСМ);
	
	Если (ЭлементПроверки.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Пиво")
			Или ЭлементПроверки.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПивоВПотребительскихУпаковках"))
		И ЗначениеЗаполнено(ЭлементПроверки.ЧастичноеВыбытиеКоличество) Тогда
		
		ПараметрыЗапросаКМ.Количество                    = ЭлементПроверки.Количество;
		ПараметрыЗапросаКМ.МераКоличестваПредметаРасчета = ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Литр");
		
	Иначе
		
		ПараметрыЗапросаКМ.Количество = 1;
		
		Если ЭлементПроверки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.ОбъемноСортовойУчет") Тогда
			
			GTINВBase64 = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ШтрихкодВBase64(ЭлементПроверки.СоставКодаМаркировки.GTIN);
			
			ПараметрыЗапросаКМ.МераКоличестваПредметаРасчета = ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Штука");
			ПараметрыЗапросаКМ.ОтправлятьНаСерверОИСМ        = Ложь;
			ПараметрыЗапросаКМ.КонтрольнаяМарка              = GTINВBase64;
			
		Иначе
			
			ПараметрыЗапросаКМ.ДробноеКоличество.Числитель   = ЭлементПроверки.ЧастичноеВыбытиеКоличество;
			ПараметрыЗапросаКМ.ДробноеКоличество.Знаменатель = ЭлементПроверки.ЕмкостьПотребительскойУпаковки;
			ПараметрыЗапросаКМ.КодЕдиницыИзмерения           = ЭлементПроверки.КодЕдиницыИзмерения;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыЗапросаКМ.КонтрольнаяМарка)
		И ЭлементПроверки.ВидУпаковки <> ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.ОбъемноСортовойУчет") Тогда
		РезультатПроверки.ТребуетсяПолныйКодМаркировки = Истина;
		ПараметрыПроверки.ЗапрещеноИгнорироватьОшибку  = Истина;
		СледующийКодНаПроверкуСредствамиККТ(ПараметрыПроверки);
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыПроверки.ЭтоСканирование Тогда
		
		ИдентификаторСессии = МенеджерОборудованияИСКлиент.СессияПроверкиКодовМаркировки(ПараметрыПроверки.ИдентификаторУстройства);
		
		Если ИдентификаторСессии <> Неопределено Тогда
			
			РезультатПроверки = МенеджерОборудованияИСКлиент.РезультатПроверкиКодаМаркировки(
				ПараметрыПроверки.ИдентификаторУстройства,
				ИдентификаторСессии,
				ПараметрыЗапросаКМ);
			
			Если РезультатПроверки <> Неопределено Тогда
				СледующийКодНаПроверкуСредствамиККТ(ПараметрыПроверки);
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
	
	ЛокальнаяПроверкаСредствамиККТЗавершение = Новый ОписаниеОповещения(
		"ЛокальнаяПроверкаСредствамиККТЗавершение",
		ЭтотОбъект,
		ПараметрыПроверки);
	
	МенеджерОборудованияИСКлиент.НачатьЗапросКМ(
		ЛокальнаяПроверкаСредствамиККТЗавершение,
		ФормаБлокировкиПоПараметрамПроверки(ПараметрыПроверки, Истина).УникальныйИдентификатор,
		ПараметрыЗапросаКМ,
		ПараметрыПроверки.ИдентификаторУстройства);
	
КонецПроцедуры

// Получение результата удаленной проверки.
// 
// Параметры:
//  ПараметрыПроверки - см. НовыеПараметрыПроверкиНаККТ
Процедура ПолучениеРезультатаУдаленнойПроверки(ПараметрыПроверки)
	
	УдаленнаяПроверкаКодаМаркировкиСредствамиККТЗавершение = Новый ОписаниеОповещения(
		"УдаленнаяПроверкаКодаМаркировкиСредствамиККТЗавершение",
		ЭтотОбъект,
		ПараметрыПроверки);
	
	МенеджерОборудованияИСКлиент.НачатьПолученияРезультатовЗапросаКМ(
		УдаленнаяПроверкаКодаМаркировкиСредствамиККТЗавершение,
		ФормаБлокировкиПоПараметрамПроверки(ПараметрыПроверки, Истина).УникальныйИдентификатор,
		Неопределено,
		ПараметрыПроверки.ИдентификаторУстройства);
	
КонецПроцедуры

// Подтверждение кода маркировки.
// 
// Параметры:
//  ПараметрыПроверки - см. НовыеПараметрыПроверкиНаККТ
Процедура ПодтверждениеКодаМаркировки(ПараметрыПроверки)
	
	ЭлементПроверки          = ТекущийЭлементПроверкиСредствамиККТ(ПараметрыПроверки);
	ПараметрыПодтвержденияКМ = МенеджерОборудованияКлиентСервер.ПараметрыПодтверждениеКМ();
	ПараметрыПодтвержденияКМ.ИдентификаторЗапроса = ЭлементПроверки.ИдентификаторЗапроса;
	
	ПодтверждениеКодаМаркировкиНаККТЗавершение = Новый ОписаниеОповещения(
		"ПодтверждениеКодаМаркировкиНаККТЗавершение",
		ЭтотОбъект,
		ПараметрыПроверки);
	
	МенеджерОборудованияИСКлиент.НачатьПодтверждениеКМ(
		ПодтверждениеКодаМаркировкиНаККТЗавершение,
		ФормаБлокировкиПоПараметрамПроверки(ПараметрыПроверки, Истина).УникальныйИдентификатор,
		ПараметрыПодтвержденияКМ,
		ПараметрыПроверки.ИдентификаторУстройства);
	
КонецПроцедуры

Процедура ПолучениеТокенаГИСМТ(ПараметрыПроверки)
	
	ОповещениеПриЗапросеКлючаСессии = Новый ОписаниеОповещения(
		"ЗапроситьКлючСессииПриПолученииТокенаГИСМТЗавершение",
		ЭтотОбъект,
		ПараметрыПроверки);
	
	ИнтерфейсАвторизацииИСМПКлиент.ЗапроситьКлючСессии(
		ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ПараметрыЗапросаКлючаСессииИСМПРозница(ПараметрыПроверки.ПараметрыСканирования.Организация),
		ОповещениеПриЗапросеКлючаСессии);
	
КонецПроцедуры

Процедура ОбновлениеCDNПлощадокГИСМТ(ПараметрыПроверки)
	
	ОповещениеПриОбновленииПлощадок = Новый ОписаниеОповещения("ОбновлениеCDNПлощадокГИСМТЗавершение", ЭтотОбъект, ПараметрыПроверки);
	
	ПараметрыЗапроса                         = ИнтерфейсИСМПОбщегоНазначенияКлиент.ПараметрыЗапросаДанных();
	ПараметрыЗапроса.ОповещениеОЗавершении   = ОповещениеПриОбновленииПлощадок;
	ПараметрыЗапроса.УникальныйИдентификатор = ФормаБлокировкиПоПараметрамПроверки(ПараметрыПроверки).УникальныйИдентификатор;
	ПараметрыЗапроса.Организация             = ПараметрыПроверки.ПараметрыСканирования.Организация;
	ПараметрыЗапроса.Параметры               = Новый Структура("НеВыводитьОкноОжидания", Истина);
	
	ИнтерфейсИСМПОбщегоНазначенияКлиент.АктуализацияСпискаCDNПлощадок(ПараметрыЗапроса);
	
КонецПроцедуры

Процедура ПроверкаИдентификатораГИСМТПоКодуМаркировки(ПараметрыПроверки)
	
	ЭлементыПроверки        = ПараметрыПроверки.ЭлементыПроверки;
	ДанныеДляЗапроса        = Новый Массив;
	ДействуетАварийныйРежим = ОбщегоНазначенияИСМПКлиентСерверПовтИсп.ДействуетАварийныйРежимДляРозничныхПродаж();
	ПараметрыСканирования   = ПараметрыПроверки.ПараметрыСканирования;
	
	Для Каждого ЭлементПроверки Из ЭлементыПроверки Цикл
		
		РезультатПроверки = ПараметрыПроверки.Результат.ДанныеПроверки[ЭлементПроверки.ИдентификаторЭлемента];
		
		Если Не ОбщегоНазначенияИСМПКлиентСерверПовтИсп.ПродукцияПодлежитОбязательнойОнлайнПроверкеПередРозничнойПродажей(ЭлементПроверки.ВидПродукции, ПараметрыСканирования.ВидОперацииИСМП, ПараметрыСканирования.ТребуетсяПроверкаСредствамиККТ) Тогда
			
			ПроизведенКонтрольСтатусов = НастройкаПараметровСканированияСлужебныйКлиентСерверПовтИсп.КонтролироватьСтатусыКодовМаркировки(
				ЭлементПроверки.ВидПродукции,
				ПараметрыПроверки.ПараметрыСканирования.ВидОперацииИСМП,
				ПараметрыСканирования.ТребуетсяПроверкаСредствамиККТ);
				
			ПроизведенКонтрольВладельцев = НастройкаПараметровСканированияСлужебныйКлиентСерверПовтИсп.КонтролироватьВладельцевКодовМаркировки(
				ЭлементПроверки.ВидПродукции,
				ПараметрыПроверки.ПараметрыСканирования.ВидОперацииИСМП);
				
			Если ПараметрыПроверки.ПропускатьПроверкуСредствамиККТ
				И (ПроизведенКонтрольСтатусов Или ПроизведенКонтрольВладельцев) Тогда
				
				РезультатПроверки.ОтображатьОшибки             = Ложь;
				РезультатПроверки.ПропуститьОжиданиеОтветаОИСМ = Истина;
				
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		Если ДействуетАварийныйРежим Тогда
			
			ЭлементПроверки.РазрешительныйРежимКодОтвета = ОбщегоНазначенияИСМПКлиентСерверПовтИсп.АварийныйРежимКодОтветаСервисаГИСМТ();
			Продолжить;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭлементПроверки.РазрешительныйРежимДатаЗапросаГИСМТ) Тогда
			
			ДатаПолученияИдентификатораРазрешительногоРежима = ?(ЗначениеЗаполнено(ЭлементПроверки.РазрешительныйРежимДатаЗапросаГИСМТ),
				ОбщегоНазначенияИСКлиентСервер.ДатаИзСтрокиUNIX(ЭлементПроверки.РазрешительныйРежимДатаЗапросаГИСМТ),
				Дата(1, 1, 1));
			
			Если ДатаПолученияИдентификатораРазрешительногоРежима >= МенеджерОборудованияКлиент.ДатаСеанса() - ПараметрыПроверки.СрокДействияИдентификаторовГИСМТ Тогда
				// идентификатор не просрочен, еще действует
				
				Если ПараметрыПроверки.ПропускатьПроверкуСредствамиККТ И ЗначениеЗаполнено(ЭлементПроверки.РазрешительныйРежимИдентификаторЗапросаГИСМТ) Тогда
					
					РезультатПроверки.ПропуститьОжиданиеОтветаОИСМ = Истина;
					РезультатПроверки.ОтображатьОшибки             = Ложь;
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;
			
			ЭлементПроверки.РазрешительныйРежимИдентификаторЗапросаГИСМТ = "";
			ЭлементПроверки.РазрешительныйРежимДатаЗапросаГИСМТ          = "";
			
		КонецЕсли;
		
		Если Не РезультатПроверки.ТребуетсяРазрешительныйЗапросГИСМТ Тогда
			Продолжить;
		КонецЕсли;
		
		ПользовательскиеПараметрыРазбораКодаМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПользовательскиеПараметрыРазбораКодаМаркировки();
		ПользовательскиеПараметрыРазбораКодаМаркировки.ВалидироватьШтрихкодЛогистическойУпаковкиGS1128СОшибками = Ложь;
		НормализованныйШтрихкод = РазборКодаМаркировкиИССлужебныйКлиент.НормализованныйШтрихкод(
			ЭлементПроверки.КодМаркировки, ЭлементПроверки.ВидПродукции,, ПользовательскиеПараметрыРазбораКодаМаркировки);
			
		ЭлементДанныхЗапроса = Новый Структура();
		ЭлементДанныхЗапроса.Вставить("ПолныйКодМаркировки",          ЭлементПроверки.ПолныйКодМаркировки);
		ЭлементДанныхЗапроса.Вставить("НормализованныйКодМаркировки", НормализованныйШтрихкод);
		ЭлементДанныхЗапроса.Вставить("ВидПродукции",                 ЭлементПроверки.ВидПродукции);
		ЭлементДанныхЗапроса.Вставить("СоставКодаМаркировки",         ЭлементПроверки.СоставКодаМаркировки);
		ЭлементДанныхЗапроса.Вставить("ПредставлениеНоменклатуры",    ЭлементПроверки.ПредставлениеНоменклатуры);
		ЭлементДанныхЗапроса.Вставить("ИндексЭлемента",               ЭлементыПроверки.Найти(ЭлементПроверки));
		
		ДанныеДляЗапроса.Добавить(ЭлементДанныхЗапроса);
		
	КонецЦикла;
	
	Если ДанныеДляЗапроса.Количество() = 0 Тогда
		ВыполняемыеОперации = ШтрихкодированиеОбщегоНазначенияИСМПКлиентСервер.ВыполняемыеОперацииПроверкиСредствамиККТ();
		Если ИспользуетсяВерсияБПОСЕдинымМетодомПроверкиКМСредствамиККТ() Тогда
			ПараметрыПроверки.ТекущаяОперация = ВыполняемыеОперации.ПроверкаЕдинымМетодомБПО;
		Иначе
			ПараметрыПроверки.ТекущаяОперация = ВыполняемыеОперации.ЛокальнаяПроверка;
		КонецЕсли;
		ПараметрыПроверки.ТекущийИндекс = 0;
		СледующийШагПроверкиСредствамиККТ(ПараметрыПроверки);
		Возврат;
	КонецЕсли;
	
	Если ПараметрыПроверки.ВыполняетсяЛогирование Тогда
		
		ТекстЛога = ТекстДляЗаписиВЛогЗапросов(
			НСтр("ru = 'Получение идентификаторов разрешительного режима'"),
			ПараметрыПроверки);
		
		ЛогированиеЗапросовИСМПКлиент.Вывести(ТекстЛога);
		
	КонецЕсли;
	
	ДлительнаяОперация = ОбщегоНазначенияИСМПВызовСервера.НачатьПолучениеИдентификаторовЗапросаГИСМТПриРозничнойПродаже(
		ПараметрыПроверки.ПараметрыСканирования,
		ДанныеДляЗапроса,
		ФормаБлокировкиПоПараметрамПроверки(ПараметрыПроверки).УникальныйИдентификатор);
	
	ПолучениеИдентификатораГИСМТЗавершение = Новый ОписаниеОповещения(
		"ПолучениеИдентификатораГИСМТЗавершение",
		ЭтотОбъект,
		ПараметрыПроверки);
	
	ПрогрессПолученияИдентификатораГИСМТ = Новый ОписаниеОповещения(
		"ПрогрессПолученияИдентификатораГИСМТ",
		ЭтотОбъект,
		ПараметрыПроверки);
	
	ПараметрыОжидания                                = ДлительныеОперацииКлиент.ПараметрыОжидания(ФормаБлокировкиПоПараметрамПроверки(ПараметрыПроверки));
	ПараметрыОжидания.ВыводитьОкноОжидания           = Ложь;
	ПараметрыОжидания.ТекстСообщения                 = НСтр("ru = 'Получение идентификаторов запроса ГИС МТ при розничной продаже.'");
	ПараметрыОжидания.Интервал                       = 1;
	ПараметрыОжидания.ВыводитьСообщения              = Истина;
	ПараметрыОжидания.ОповещениеОПрогрессеВыполнения = ПрогрессПолученияИдентификатораГИСМТ;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ПолучениеИдентификатораГИСМТЗавершение, ПараметрыОжидания);
	
КонецПроцедуры

#КонецОбласти 

#Область ЗавершенияОпераций

Процедура ПроверкаКМСредствамиККТЗавершение(ДанныеОтвета, ПараметрыПроверки) Экспорт
	
	Если ДанныеОтвета.Результат Тогда
		
		Для Каждого РезультатОперации Из ДанныеОтвета.РезультатыОпераций Цикл
			
			ДополнительныеПараметры = РезультатОперации.ДополнительныеПараметры;
			РезультатПроверки       = ПараметрыПроверки.Результат.ДанныеПроверки.Получить(ДополнительныеПараметры.ИдентификаторЭлемента);
			
			Если РезультатОперации.Результат Тогда
				
				РезультатПроверки.КодМаркировкиПроверен = РезультатОперации.КодМаркировкиПроверен;
				РезультатПроверки.РезультатПроверки     = РезультатОперации.РезультатПроверки;
				РезультатПроверки.РезультаПроверкиОИСМ  = РезультатОперации.РезультатПроверкиОИСМ;
				РезультатПроверки.СтатусТовара          = РезультатОперации.СтатусТовара;
				РезультатПроверки.ПодтвержденНаККТ      = Истина;
				РезультатПроверки.КодРезультатаПроверки = РезультатОперации.КодРезультатаПроверкиОИСМ;
				РезультатПроверки.КодОбработкиЗапроса   = РезультатОперации.КодОбработкиЗапроса;
				РезультатПроверки.ПредставлениеРезультатаПроверки = РезультатОперации.РезультатПроверкиОИСМПредставление;
				
			Иначе
				
				РезультатПроверки.ТекстОшибки = ДанныеОтвета.ОписаниеОшибки;
				
			КонецЕсли;
			
		КонецЦикла;
		
	
	Иначе
		
		ПараметрыПроверки.Результат.ТекстОшибки       = ДанныеОтвета.ОписаниеОшибки;
		ПараметрыПроверки.Результат.ЕстьОшибки        = Истина;
		ПараметрыПроверки.ЗапрещеноИгнорироватьОшибку = Истина;
		
	КонецЕсли;
	
	ОбработкаРезультатаПроверкиСредствамиККТ(ПараметрыПроверки);
	
КонецПроцедуры

Процедура ЛокальнаяПроверкаСредствамиККТЗавершение(ДанныеОтвета, ПараметрыПроверки) Экспорт
	
	ЭлементПроверки           = ТекущийЭлементПроверкиСредствамиККТ(ПараметрыПроверки);
	РезультатЭлементаПроверки = ПараметрыПроверки.Результат.ДанныеПроверки.Получить(ЭлементПроверки.ИдентификаторЭлемента);
	ВыходныеПараметры         = ВыходныеПараметрыИзРезультатаБПО(ДанныеОтвета);
	
	Если ПараметрыПроверки.ВыполняетсяЛогирование
		И ВыходныеПараметры <> Неопределено Тогда
		
		ДанныеРезультата = Новый Массив();
		
		Если ВыходныеПараметры.Свойство("РезультатXML")
			И ЗначениеЗаполнено(ВыходныеПараметры.РезультатXML) Тогда
			ДанныеРезультата.Добавить(ВыходныеПараметры.РезультатXML);
		КонецЕсли;
		
		Если Не ДанныеОтвета.Результат
			И ЗначениеЗаполнено(ДанныеОтвета.ОписаниеОшибки) Тогда
			ДанныеРезультата.Добавить(ДанныеОтвета.ОписаниеОшибки);
		КонецЕсли;
		
		ТекстЛога = ТекстДляЗаписиВЛогЗапросов(
			НСтр("ru = 'Локальная проверка средствами ККТ'"),
			ПараметрыПроверки,
			ВыходныеПараметры.ЗапросXML,
			СтрСоединить(ДанныеРезультата, Символы.ПС));
		ЛогированиеЗапросовИСМПКлиент.Вывести(ТекстЛога);
		
	КонецЕсли;
	
	Если ДанныеОтвета.Результат Тогда
		
		ВыполняемыеОперации = ШтрихкодированиеОбщегоНазначенияИСМПКлиентСервер.ВыполняемыеОперацииПроверкиСредствамиККТ();
		
		РезультатЭлементаПроверки.КодМаркировкиПроверен = ВыходныеПараметры.КодМаркировкиПроверен;
		РезультатЭлементаПроверки.РезультатПроверки     = ВыходныеПараметры.РезультатПроверки;
		ПараметрыПроверки.ТекущаяОперация               = ВыполняемыеОперации.УдаленнаяПроверка;
	
	Иначе
		
		РезультатЭлементаПроверки.ТекстОшибки         = ДанныеОтвета.ОписаниеОшибки;
		ПараметрыПроверки.Результат.ТекстОшибки       = ДанныеОтвета.ОписаниеОшибки;
		ПараметрыПроверки.Результат.ЕстьОшибки        = Истина;
		ПараметрыПроверки.ЗапрещеноИгнорироватьОшибку = Истина;
		
	КонецЕсли;
	
	СледующийШагПроверкиСредствамиККТ(ПараметрыПроверки);
	
КонецПроцедуры

Процедура УдаленнаяПроверкаКодаМаркировкиСредствамиККТЗавершение(ДанныеОтвета, ПараметрыПроверки) Экспорт
	
	ЭлементПроверки           = ТекущийЭлементПроверкиСредствамиККТ(ПараметрыПроверки);
	РезультатЭлементаПроверки = ПараметрыПроверки.Результат.ДанныеПроверки.Получить(ЭлементПроверки.ИдентификаторЭлемента);
	ВыходныеПараметры         = ВыходныеПараметрыИзРезультатаБПО(ДанныеОтвета);
	ИнтервалСледующегоШага    = Неопределено;
	
	Если ЭлементПроверки.ПолученРезультатЗапросаКМ Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыПроверки.ВыполняетсяЛогирование Тогда
		
		ДанныеДляЛогирования = Новый Массив();
		
		Если ВыходныеПараметры.Свойство("РезультатXML")
			И ЗначениеЗаполнено(ВыходныеПараметры.РезультатXML) Тогда
			ДанныеДляЛогирования.Добавить(ВыходныеПараметры.РезультатXML);
		КонецЕсли;
		
		Если (ДанныеОтвета.Результат = Ложь Или ДанныеОтвета.Результат = 1)
			И ЗначениеЗаполнено(ДанныеОтвета.ОписаниеОшибки) Тогда
			ДанныеДляЛогирования.Добавить(ДанныеОтвета.ОписаниеОшибки);
		КонецЕсли;
		
		Если ДанныеДляЛогирования.Количество() Тогда
			ТекстЛога = ТекстДляЗаписиВЛогЗапросов(
				НСтр("ru = 'Проверка статуса товара ОИСМ средствами ККТ'"),
				ПараметрыПроверки,,
				СтрСоединить(ДанныеДляЛогирования, Символы.ПС));
			ЛогированиеЗапросовИСМПКлиент.Вывести(ТекстЛога);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеОтвета.Результат Тогда
		
		РезультатЭлементаПроверки.РезультаПроверкиОИСМ = ВыходныеПараметры.РезультатПроверкиОИСМ;
		РезультатЭлементаПроверки.СтатусТовара         = ВыходныеПараметры.СтатусТовара;
		РезультатЭлементаПроверки.КодРезультатаПроверки           = ВыходныеПараметры.КодРезультатаПроверкиОИСМ;
		РезультатЭлементаПроверки.ПредставлениеРезультатаПроверки = ВыходныеПараметры.РезультатПроверкиОИСМПредставление;
		РезультатЭлементаПроверки.КодОбработкиЗапроса             = ВыходныеПараметры.КодОбработкиЗапроса;
		
		ВыполняемыеОперации = ШтрихкодированиеОбщегоНазначенияИСМПКлиентСервер.ВыполняемыеОперацииПроверкиСредствамиККТ();
		
		Если ВыходныеПараметры.СтатусРезультата = ПредопределенноеЗначение("Перечисление.СтатусРезультатаЗапросаКМ.Получен")
			Или ВыходныеПараметры.СтатусРезультата = ПредопределенноеЗначение("Перечисление.СтатусРезультатаЗапросаКМ.НеМожетБытьПолучен") Тогда
			
			ПараметрыПроверки.ТекущаяОперация         = ВыполняемыеОперации.Подтверждение;
			ЭлементПроверки.ПолученРезультатЗапросаКМ = Истина;
			
		ИначеЕсли ВыходныеПараметры.СтатусРезультата = ПредопределенноеЗначение("Перечисление.СтатусРезультатаЗапросаКМ.Ожидается") Тогда
		
			Если РезультатЭлементаПроверки.ПропуститьОжиданиеОтветаОИСМ Тогда
				ПараметрыПроверки.ТекущаяОперация = ВыполняемыеОперации.Подтверждение;
			Иначе
				ИнтервалСледующегоШага = 1;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		РезультатЭлементаПроверки.ТекстОшибки         = ДанныеОтвета.ОписаниеОшибки;
		ПараметрыПроверки.Результат.ТекстОшибки       = ДанныеОтвета.ОписаниеОшибки;
		ПараметрыПроверки.Результат.ЕстьОшибки        = Истина;
		ПараметрыПроверки.ЗапрещеноИгнорироватьОшибку = Истина;
		
	КонецЕсли;
	
	СледующийШагПроверкиСредствамиККТ(ПараметрыПроверки, ИнтервалСледующегоШага);
	
КонецПроцедуры

Процедура ПодтверждениеКодаМаркировкиНаККТЗавершение(ДанныеОтвета, ПараметрыПроверки) Экспорт
	
	ЭлементПроверки           = ТекущийЭлементПроверкиСредствамиККТ(ПараметрыПроверки);
	РезультатЭлементаПроверки = ПараметрыПроверки.Результат.ДанныеПроверки.Получить(ЭлементПроверки.ИдентификаторЭлемента);
	
	Если ПараметрыПроверки.ВыполняетсяЛогирование Тогда
		
		ТекстОшибки = Неопределено;
		
		Если Не ДанныеОтвета.Результат Тогда
			ТекстОшибки = ДанныеОтвета.ОписаниеОшибки;
		КонецЕсли;
		
		ТекстЛога = ТекстДляЗаписиВЛогЗапросов(
			НСтр("ru = 'Подтверждение кода маркировки при выбытии'"),
			ПараметрыПроверки,
			ЭлементПроверки.ИдентификаторЗапроса,
			ТекстОшибки);
		
		ЛогированиеЗапросовИСМПКлиент.Вывести(ТекстЛога);
		
	КонецЕсли;
	
	Если ДанныеОтвета.Результат Тогда
		
		РезультатЭлементаПроверки.ПодтвержденНаККТ = Истина;
		
	Иначе
		
		РезультатЭлементаПроверки.ТекстОшибки   = ДанныеОтвета.ОписаниеОшибки;
		ПараметрыПроверки.Результат.ТекстОшибки = ДанныеОтвета.ОписаниеОшибки;
		ПараметрыПроверки.Результат.ЕстьОшибки  = Истина;
		
		ПараметрыПроверки.ЗапрещеноИгнорироватьОшибку = Истина;
		
	КонецЕсли;
	
	СледующийКодНаПроверкуСредствамиККТ(ПараметрыПроверки);
	
КонецПроцедуры

Процедура ЗапроситьКлючСессииПриПолученииТокенаГИСМТЗавершение(Результат, ПараметрыПроверки) Экспорт
	
	ОтказОтАвторизации = Ложь;
	ОшибкаАвторизации  = Ложь;
	
	Если ТипЗнч(Результат) <> Тип("Соответствие") Тогда
		ОтказОтАвторизации = Истина;
	Иначе
		
		РезультатАвторизации = Результат[ПараметрыПроверки.ПараметрыСканирования.Организация];
		
		Если РезультатАвторизации = Неопределено Тогда
			ОшибкаАвторизации = Истина;
			ТекстОшибки = НСтр("ru = 'Произошла ошибка при авторизации в ИС МП.'");
		ИначеЕсли РезультатАвторизации <> Истина Тогда
			ОшибкаАвторизации = Истина;
			ТекстОшибки = РезультатАвторизации;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОтказОтАвторизации Или ОшибкаАвторизации Тогда
		
		ПараметрыПроверки.Результат.ЕстьОшибки        = Истина;
		ПараметрыПроверки.Результат.ТекстОшибкиГИСМТ  = ТекстОшибки;
		
		ПараметрыПроверки.ЗапрещеноИгнорироватьОшибку = Истина;
		
		Если ПараметрыПроверки.Результат.ЕстьОшибки Тогда
			ФормаИсточник = ФормаБлокировкиПоПараметрамПроверки(ПараметрыПроверки);
			Оповестить(
				ИмяСобытияОповещенияЕстьОшибкиПроверкиСредствамиККТ(),
				ПараметрыПроверки,
				ФормаИсточник);
		КонецЕсли;
		
	Иначе
		
		ВыполняемыеОперации = ШтрихкодированиеОбщегоНазначенияИСМПКлиентСервер.ВыполняемыеОперацииПроверкиСредствамиККТ();
		ПараметрыПроверки.ТекущийИндекс   = 0;
		ПараметрыПроверки.ТекущаяОперация = ВыполняемыеОперации.ПроверкаИдентификатораГИСМТ;
		СледующийШагПроверкиСредствамиККТ(ПараметрыПроверки);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучениеИдентификатораГИСМТЗавершение(Результат, ПараметрыПроверки) Экспорт
	
	ДанныеОтвета = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	Если Результат.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.КраткоеПредставлениеОшибки);
		Возврат;
	КонецЕсли;
	
	Если ПараметрыПроверки.ВыполняетсяЛогирование Тогда
		ЛогированиеЗапросовИСМПВызовСервера.ДописатьВТекущийЛогДанныеИзФоновогоЗадания(ДанныеОтвета);
	КонецЕсли;
	
	ДействуетАварийныйРежим          = ОбщегоНазначенияИСМПКлиентСерверПовтИсп.ДействуетАварийныйРежимДляРозничныхПродаж();
	
	ВыполняемыеОперации = ШтрихкодированиеОбщегоНазначенияИСМПКлиентСервер.ВыполняемыеОперацииПроверкиСредствамиККТ();
	
	Если ДанныеОтвета.ТребуетсяАвторизацияИСМПРозница Тогда
		
		ПараметрыПроверки.ТекущаяОперация = ВыполняемыеОперации.ПолучениеТокенаГИСМТ;
		ПараметрыПроверки.ТекущийИндекс   = 0;
		СледующийШагПроверкиСредствамиККТ(ПараметрыПроверки);
		Возврат;
		
	КонецЕсли;
	
	Если ДанныеОтвета.ОтсутствуютCDNПлощадки Тогда
		
		ПараметрыПроверки.ТекущаяОперация = ВыполняемыеОперации.ОбновлениеCDNПлощадок;
		ПараметрыПроверки.ТекущийИндекс   = 0;
		СледующийШагПроверкиСредствамиККТ(ПараметрыПроверки);
		Возврат;
		
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из ДанныеОтвета.ДанныеИдентификаторов Цикл
		
		ЭлементПроверки = ПараметрыПроверки.ЭлементыПроверки[КлючИЗначение.Ключ];
		ДанныеПоКМ      = КлючИЗначение.Значение.ДанныеШтрихкода;
		
		Если ДанныеПоКМ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		РезультатЭлементаПроверки = ПараметрыПроверки.Результат.ДанныеПроверки.Получить(ЭлементПроверки.ИдентификаторЭлемента);
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеПоКМ, "ТекстОшибки")
			И ЗначениеЗаполнено(ДанныеПоКМ.ТекстОшибки) Тогда
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(ДанныеПоКМ.ТекстОшибки);
			
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(КлючИЗначение.Значение, "ТекстОшибки")
			И ЗначениеЗаполнено(КлючИЗначение.Значение.ТекстОшибки) Тогда
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(КлючИЗначение.Значение.ТекстОшибки);
			
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеПоКМ, "КонтролиРазрешительногоРежима") Тогда
		
			Если ДанныеПоКМ.КонтролиРазрешительногоРежима.Количество() Тогда
				
				ТекстОшибки = СтрСоединить(ДанныеПоКМ.КонтролиРазрешительногоРежима, Символы.ПС);
				
				РезультатЭлементаПроверки.ТекстОшибкиГИСМТ   = ТекстОшибки;
				ПараметрыПроверки.Результат.ЕстьОшибки       = Истина;
				
				ПараметрыПроверки.ЗапрещеноИгнорироватьОшибку = Истина;
				
			ИначеЕсли Не ДействуетАварийныйРежим Тогда
			
				ЭлементПроверки.РазрешительныйРежимИдентификаторЗапросаГИСМТ = ДанныеПоКМ.РазрешительныйРежимИдентификаторЗапросаГИСМТ;
				ЭлементПроверки.РазрешительныйРежимДатаЗапросаГИСМТ          = ДанныеПоКМ.РазрешительныйРежимДатаЗапросаГИСМТ;
				ЭлементПроверки.РазрешительныйРежимАдресСервера              = ДанныеПоКМ.РазрешительныйРежимАдресСервера;
				ЭлементПроверки.РазрешительныйРежимТелоЗапросаJSON           = ДанныеПоКМ.РазрешительныйРежимТелоЗапросаJSON;
				ЭлементПроверки.РазрешительныйРежимТелоОтветаJSON            = ДанныеПоКМ.РазрешительныйРежимТелоОтветаJSON;
				ЭлементПроверки.РазрешительныйРежимКодОтвета                 = ДанныеПоКМ.РазрешительныйРежимКодОтвета;
				
				Если ЗначениеЗаполнено(ЭлементПроверки.РазрешительныйРежимДатаЗапросаГИСМТ) Тогда
					
					РезультатЭлементаПроверки.ПолученИдентификаторЗапросаГИСМТ = ЗначениеЗаполнено(ЭлементПроверки.РазрешительныйРежимИдентификаторЗапросаГИСМТ);
					
					Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеПоКМ, "ЧастичноеВыбытиеОстатокГИСМТ")
						И ДанныеПоКМ.ЧастичноеВыбытиеОстатокГИСМТ <> Неопределено Тогда
						
						Если ЭлементПроверки.Количество > ДанныеПоКМ.ЧастичноеВыбытиеОстатокГИСМТ Тогда
						
							ТекстОшибкиОстатокВКеге = СтрШаблон(
								НСтр("ru = 'Остаток в кеге по данным ГИС МТ: %1 л., требуется: %2 л.'"),
								ДанныеПоКМ.ЧастичноеВыбытиеОстатокГИСМТ,
								ЭлементПроверки.Количество);
							
							РезультатЭлементаПроверки.ТекстОшибкиГИСМТ    = ТекстОшибкиОстатокВКеге;
							ПараметрыПроверки.Результат.ТекстОшибкиГИСМТ  = ТекстОшибкиОстатокВКеге;
							
						КонецЕсли;
						
					КонецЕсли;
					
					Если ПараметрыПроверки.ПропускатьПроверкуСредствамиККТ И ЗначениеЗаполнено(ЭлементПроверки.РазрешительныйРежимИдентификаторЗапросаГИСМТ) Тогда
						
						РезультатЭлементаПроверки.ПропуститьОжиданиеОтветаОИСМ = Истина;
						РезультатЭлементаПроверки.ОтображатьОшибки             = Ложь;
					
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИспользуетсяВерсияБПОСЕдинымМетодомПроверкиКМСредствамиККТ() Тогда
		ПараметрыПроверки.ТекущаяОперация = ВыполняемыеОперации.ПроверкаЕдинымМетодомБПО;
	Иначе
		ПараметрыПроверки.ТекущаяОперация = ВыполняемыеОперации.ЛокальнаяПроверка;
	КонецЕсли;
	ПараметрыПроверки.ТекущийИндекс = 0;
	
	СледующийШагПроверкиСредствамиККТ(ПараметрыПроверки);
	
КонецПроцедуры

Процедура ПрогрессПолученияИдентификатораГИСМТ(ДанныеПрогресса, ПараметрыПроверки) Экспорт
	
	Если ДанныеПрогресса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеПрогресса.Прогресс <> Неопределено Тогда
		
		ПараметрОповещения = Новый Структура();
		ПараметрОповещения.Вставить("ПроцентВыполнения", ДанныеПрогресса.Прогресс.Процент);
		ПараметрОповещения.Вставить("ПараметрыПроверки", ПараметрыПроверки);
		
		Оповестить(
			ИмяСобытияОповещенияПрогрессПолученияИдентификаторовЗапросаГИСМТ(),
			ПараметрОповещения,
			ФормаБлокировкиПоПараметрамПроверки(ПараметрыПроверки));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновлениеCDNПлощадокГИСМТЗавершение(Результат, ПараметрыПроверки) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.ЕстьОшибки И ЗначениеЗаполнено(Результат.ТекстОшибки) Тогда
		
		ПараметрыПроверки.Результат.ЕстьОшибки        = Истина;
		ПараметрыПроверки.Результат.ТекстОшибкиГИСМТ  = Результат.ТекстОшибки;
		
		ПараметрыПроверки.ЗапрещеноИгнорироватьОшибку = Истина;
		
		Оповестить(
			ИмяСобытияОповещенияЕстьОшибкиПроверкиСредствамиККТ(),
			ПараметрыПроверки,
			ФормаБлокировкиПоПараметрамПроверки(ПараметрыПроверки));
		
	ИначеЕсли Результат.Результат.Свойство("ОтказОтАвторизации") И Результат.Результат.ОтказОтАвторизации Тогда
		
		ПараметрыПроверки.Результат.ЕстьОшибки        = Истина;
		ПараметрыПроверки.Результат.ТекстОшибкиГИСМТ  = НСтр("ru = 'Произошла ошибка при получении CDN-площадок ГИС МТ.'");
		
		ПараметрыПроверки.ЗапрещеноИгнорироватьОшибку = Истина;
		
		Оповестить(
			ИмяСобытияОповещенияЕстьОшибкиПроверкиСредствамиККТ(),
			ПараметрыПроверки,
			ФормаБлокировкиПоПараметрамПроверки(ПараметрыПроверки));
		
	Иначе
		
		ВыполняемыеОперации = ШтрихкодированиеОбщегоНазначенияИСМПКлиентСервер.ВыполняемыеОперацииПроверкиСредствамиККТ();
		
		ПараметрыПроверки.ТекущийИндекс   = 0;
		ПараметрыПроверки.ТекущаяОперация = ВыполняемыеОперации.ПроверкаИдентификатораГИСМТ;
		СледующийШагПроверкиСредствамиККТ(ПараметрыПроверки)
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

Функция ИспользуетсяВерсияБПОСЕдинымМетодомПроверкиКМСредствамиККТ() Экспорт
	
	ИменаПараметровРаботыКлиента = ОбщегоНазначенияИСМПКлиентСервер.ИменаПараметровРаботыКлиента();
	
	ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента();
	Возврат ПараметрыРаботыКлиента[ИменаПараметровРаботыКлиента.ВерсияБПОПоддерживаетПроверкуКМЕдинымМетодом];
	
КонецФункции

Функция ОбработкаРасширенныхУточненийДанныхПоШтрихкодам(ПараметрыЗавершенияВводаШтрихкода)

	ПараметрыСканирования           = ПараметрыЗавершенияВводаШтрихкода.ПараметрыСканирования;
	ЗавершитьОбработкуПринудительно = Ложь;
	
	Если Не ПараметрыСканирования.РежимБРМК Тогда
		
		//@skip-check wrong-string-literal-content
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеИСМПКлиент");
		ЗавершитьОбработкуПринудительно = Модуль.ОбработкаРасширенныхУточненийДанныхПоШтрихкодам(ПараметрыЗавершенияВводаШтрихкода);
		
	КонецЕсли;
	
	Возврат ЗавершитьОбработкуПринудительно;

КонецФункции

Процедура ДополнительныеПроверкиПередЗавершениемОбработкиШтрихкода(Форма, ПараметрыСканирования, РезультатОбработкиШтрихкода) Экспорт
	
	Если Не РезультатОбработкиШтрихкода.Свойство("ТребуетсяАктуализацияCDNПлощадок")
		Или Не РезультатОбработкиШтрихкода.ТребуетсяАктуализацияCDNПлощадок Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапроса                         = ИнтерфейсИСМПОбщегоНазначенияКлиент.ПараметрыЗапросаДанных();
	ПараметрыЗапроса.УникальныйИдентификатор = Новый УникальныйИдентификатор;
	ПараметрыЗапроса.Организация             = ПараметрыСканирования.Организация;
	ПараметрыЗапроса.Параметры               = Новый Структура("НеВыводитьОкноОжидания", Истина);
	
	ИнтерфейсИСМПОбщегоНазначенияКлиент.АктуализацияСпискаCDNПлощадок(ПараметрыЗапроса);
	
КонецПроцедуры

#КонецОбласти