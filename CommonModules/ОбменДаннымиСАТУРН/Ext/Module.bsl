// @strict-types

#Область ПрограммныйИнтерфейс

#Область РегламентныеЗадания

// Процедура запуска регламентного задания ОтправкаПолучениеДанныхСАТУРН.
// 
// Параметры:
//  НастройкаРегламентногоЗадания - СправочникСсылка.НастройкиРегламентныхЗаданийСАТУРН.
//
Процедура ОбменДаннымиРегламентноеЗадание(НастройкаРегламентногоЗадания = Неопределено) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОтправкаПолучениеДанныхСАТУРН);
	
	Если НастройкаРегламентногоЗадания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьВИсториюВыполненияОбменов(НастройкаРегламентногоЗадания, Истина);
	
	ИнтеграцияСАТУРНВызовСервера.ВыполнитьОбмен(НастройкаРегламентногоЗадания);
	
	ЗаписатьВИсториюВыполненияОбменов(НастройкаРегламентногоЗадания, Ложь);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РегламентныеЗадания

Процедура ЗаписатьВИсториюВыполненияОбменов(Настройка, Начало)
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	Если Начало Тогда
		Запись = РегистрыСведений.ИсторияВыполненияОбменовССАТУРН.СоздатьМенеджерЗаписи();
		Запись.НастройкаРегламентногоЗадания = Настройка;
		Запись.ДатаНачала = ТекущаяДата;
		Запись.ДатаОкончания = Дата(1, 1, 1);
		Запись.Записать();
	Иначе
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Настройка", Настройка);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	МАКСИМУМ(ИсторияВыполненияОбменов.ДатаНачала) КАК ДатаНачала
		|ИЗ
		|	РегистрСведений.ИсторияВыполненияОбменовССАТУРН КАК ИсторияВыполненияОбменов
		|ГДЕ
		|	ИсторияВыполненияОбменов.НастройкаРегламентногоЗадания = &Настройка
		|	И ИсторияВыполненияОбменов.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Запись = РегистрыСведений.ИсторияВыполненияОбменовССАТУРН.СоздатьМенеджерЗаписи();
			Запись.НастройкаРегламентногоЗадания = Настройка;
			Запись.ДатаНачала = Выборка.ДатаНачала;
			Запись.ДатаОкончания = ТекущаяДата;
			Запись.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Запрос настроек регламентых заданий.
// 
// Параметры:
//  СтруктураОтбораОрганизаций - Структура - Структура отбора организаций см. ИнтеграцияСАТУРНКлиентСервер.СтруктураОтбораОрганизаций
// 
// Возвращаемое значение:
//  Запрос - Запрос настроек регламентых заданий
Функция ЗапросНастроекРегламентыхЗаданий(СтруктураОтбораОрганизаций) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИсторияВыполненияОбменов.НастройкаРегламентногоЗадания КАК Настройка,
	|	ИсторияВыполненияОбменов.ДатаНачала КАК ДатаНачала,
	|	РАЗНОСТЬДАТ(ИсторияВыполненияОбменов.ДатаНачала, ИсторияВыполненияОбменов.ДатаОкончания, СЕКУНДА) КАК ВремяВыполнения
	|ПОМЕСТИТЬ ТаблицаВремяВыполнения
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИсторияВыполненияОбменов.НастройкаРегламентногоЗадания КАК НастройкаРегламентногоЗадания,
	|		МАКСИМУМ(ИсторияВыполненияОбменов.ДатаНачала) КАК ДатаНачала
	|	ИЗ
	|		РегистрСведений.ИсторияВыполненияОбменовССАТУРН КАК ИсторияВыполненияОбменов
	|	ГДЕ
	|		ИсторияВыполненияОбменов.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
	|	СГРУППИРОВАТЬ ПО
	|		ИсторияВыполненияОбменов.НастройкаРегламентногоЗадания) КАК НачалоВыполнения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияВыполненияОбменовССАТУРН КАК ИсторияВыполненияОбменов
	|		ПО НачалоВыполнения.НастройкаРегламентногоЗадания = ИсторияВыполненияОбменов.НастройкаРегламентногоЗадания
	|		И НачалоВыполнения.ДатаНачала = ИсторияВыполненияОбменов.ДатаНачала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДляОтбора.Организация
	|ПОМЕСТИТЬ ДанныеДляОтбора
	|ИЗ
	|	&ДанныеДляОтбора КАК ДанныеДляОтбора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДляОтбора.Организация КАК Организация,
	|	Настройки.Ссылка КАК Настройка
	|ПОМЕСТИТЬ ТаблицаОтбора
	|ИЗ
	|	ДанныеДляОтбора КАК ДанныеДляОтбора
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиРегламентныхЗаданийСАТУРН КАК Настройки
	|		ПО ДанныеДляОтбора.Организация = Настройки.ОрганизацияСАТУРН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОтбора.Организация КАК Организация,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ТаблицаОтбора.Организация) КАК ОрганизацияПредставление
	|ИЗ
	|	ТаблицаОтбора КАК ТаблицаОтбора
	|ГДЕ
	|	ТаблицаОтбора.Настройка ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Настройки.Ссылка КАК Настройка,
	|	Настройки.РегламентноеЗадание КАК РегламентноеЗадание,
	|	Настройки.ПометкаУдаления КАК ПометкаУдаления,
	|	Настройки.ОрганизацияСАТУРН КАК Организация,
	|	Настройки.ВидНастройкиОбмена КАК ВидНастройкиОбмена,
	|	Настройки.ОрганизацияСАТУРН.ПометкаУдаления КАК ПометкаУдаленияОрганизация,
	|	ЕСТЬNULL(ТаблицаВремяВыполнения.ДатаНачала, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаНачалаВыполнения,
	|	ЕСТЬNULL(ТаблицаВремяВыполнения.ВремяВыполнения, 0) КАК ВремяВыполнения
	|ИЗ
	|	Справочник.НастройкиРегламентныхЗаданийСАТУРН КАК Настройки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаВремяВыполнения КАК ТаблицаВремяВыполнения
	|		ПО Настройки.Ссылка = ТаблицаВремяВыполнения.Настройка
	|ГДЕ
	|	НЕ &ИспользоватьОтбор
	|	ИЛИ Настройки.Ссылка В
	|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			Настройка
	|		ИЗ
	|			ТаблицаОтбора)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Настройки.Наименование";
	
	ТаблицаОрганизаций = ТаблицаОрганизаций(СтруктураОтбораОрганизаций);
	Запрос.УстановитьПараметр("ДанныеДляОтбора",   ТаблицаОрганизаций);
	Запрос.УстановитьПараметр("ИспользоватьОтбор", ТаблицаОрганизаций.Количество() > 0);
	
	Возврат Запрос;
		
КонецФункции

// Таблица организаций.
// 
// Параметры:
//  СтруктураОтбораОрганизаций - Структура
//  * Организации - Массив из СправочникСсылка.КлассификаторОрганизацийСАТУРН
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица организаций:
// * Организация - СправочникСсылка.КлассификаторОрганизацийСАТУРН
Функция ТаблицаОрганизаций(СтруктураОтбораОрганизаций)

	ТаблицаОрганизаций = Новый ТаблицаЗначений;
	ТаблицаОрганизаций.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.КлассификаторОрганизацийСАТУРН"));
	Если СтруктураОтбораОрганизаций.Свойство("Организации") Тогда
	Для Каждого Организация Из СтруктураОтбораОрганизаций.Организации Цикл
		Строка = ТаблицаОрганизаций.Добавить();
		Строка.Организация = Организация;
	КонецЦикла;
	КонецЕсли;
	Возврат ТаблицаОрганизаций;
	
КонецФункции

Функция ДопустимоеВремяВыполненияРегламентногоЗаданияПоНастройкеОбмена() Экспорт
	
	Возврат 1800;
	
КонецФункции

Функция СвойстваРегламентногоЗадания() Экспорт
	
	Возврат "Использование,Расписание,Наименование,Ключ";
	
КонецФункции

Функция ДанныеРегламентныхЗаданий() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Соответствие;
	Свойства  = СвойстваРегламентногоЗадания();
	
	ОтборРегламентныхЗаданий = Новый Структура;
	ОтборРегламентныхЗаданий.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ОтправкаПолучениеДанныхСАТУРН);
	НайденныеЗадания = РегламентныеЗаданияСервер.НайтиЗадания(ОтборРегламентныхЗаданий);
	
	Для Каждого РегламентноеЗадание Из НайденныеЗадания Цикл
		ДанныеРегламентногоЗадания = Новый Структура(Свойства);
		ЗаполнитьЗначенияСвойств(ДанныеРегламентногоЗадания, РегламентноеЗадание);
		Результат.Вставить(РегламентныеЗаданияСервер.УникальныйИдентификатор(РегламентноеЗадание), ДанныеРегламентногоЗадания);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти
