
#Область ПрограммныйИнтерфейс

// Возвращает выражение получения идентификатора характеристики. Следует обратить внимание, что выражение
// в обычном запросе и в наборе-запросе СКД отличаются.
// 
// Параметры:
// 	МетаданныеВидаХарактеристик - ОбъектМетаданных - Объект метаданных характеристик. См. РаботаСФормуламиПовтИсп.СвойстваПоддерживаемыхИсточниковХарактеристик.
// 	ДляСКД - Булево - Флаг получения выражения для текста запроса в СКД.
// Возвращаемое значение:
// 	Строка - Выражение поля идентификатора, включающего скобки и обращение к указанному в СвойстваПоддерживаемыхИсточниковХарактеристик полю.
//
Функция ВыражениеПолногоИдентификатораХарактеристики(МетаданныеВидаХарактеристик, ДляСКД = Ложь) Экспорт
	
	СвойстваХарактеристик = РаботаСФормуламиПовтИсп.СвойстваПоддерживаемыхИсточниковХарактеристик();
	СвойстваХарактеристики = СвойстваХарактеристик.Найти(МетаданныеВидаХарактеристик, "МетаданныеИсточника");
	Если НЕ СвойстваХарактеристики = Неопределено Тогда
		Если ДляСКД Тогда
			// В расширении языков запросов сейчас нельзя указать более 1 таблицы видов характеристик с ограничением
			// фигурными скобками.
			Шаблон = """[%1"" + %ИмяТаблицы%.%2 + ""]""";
		Иначе
			Шаблон = """{%1"" + %ИмяТаблицы%.%2 + ""}""";
		КонецЕсли;
		ВыражениеПоля = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Шаблон,
			СвойстваХарактеристики.ПрефиксТипаВидаХарактеристик,
			СвойстваХарактеристики.ПолеИдентификатора);
	Иначе
		ВыражениеПоля = "";
	КонецЕсли;
	
	Возврат ВыражениеПоля;
КонецФункции

// Возвращает модифицированное выражение операнда для СКД с наборами данных - запросами, в которых переопределено
// получение характеристик.
// 
// Параметры:
// 	ИсходноеВыражение - Строка - Выражение операнда. Например, "Номенклатура.{ДР.Характеристика1}.Контрагент"
// Возвращаемое значение:
// 	Строка - модифицированное выражение. Например, "Номенклатура.[[ДР.Характеристика1]]].Контрагент".
Функция МодифицированноеВыражениеОперандаДляСКД(ИсходноеВыражение) Экспорт
	
	// В связи с текущей особенностью СКД, заменяем фигурные скобки на квадратные.
	// Закрывающих скобок 3, одна - часть выражения характеристики, и две добавляет СКД для проверки закрытия выражения
	// поля в СКД (внутренний механизм)).
	МодифицированноеВыражение = СтрЗаменить(ИсходноеВыражение, "{", "[[");
	МодифицированноеВыражение = СтрЗаменить(МодифицированноеВыражение, "}", "]]]");
	
	Возврат МодифицированноеВыражение;
	
КонецФункции


// Возвращает свойства характеристики по ее выражению на языке формул
// 
// Параметры:
// 	ВыражениеХарактеристики - Строка - Например, "{ДР.ОсновнойПоставщик}".
// Возвращаемое значение:
// 	Структура - Описание:
// * Метаданные - ОбъектМетаданныхПланВидовХарактеристик, ОбъектМетаданныхСправочник - Метаданные источника характеристик.
// 				Например, Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения
// 				или Метаданные.Справочники.ВидыКонтактнойИнформации.
// * Идентификатор - Строка - Идентификатор характеристики, указанный в соответствующем реквизите, хранимом в таблице характеристик.
// * Префикс - Строка - Префикс вида характеристик. Например "ДР." - Для дополнительных реквизитов и сведений.
Функция СвойстваХарактеристики(ВыражениеХарактеристики) Экспорт
	
	СвойстваХарактеристики = Новый Структура;
	СвойстваХарактеристики.Вставить("Префикс", "");
	СвойстваХарактеристики.Вставить("Идентификатор", "");
	СвойстваХарактеристики.Вставить("Метаданные");
	
	СвойстваПоддерживаемыхХарактеристик = РаботаСФормуламиПовтИсп.СвойстваПоддерживаемыхИсточниковХарактеристик();
	ВыражениеБезСкобок = СтрЗаменить(ВыражениеХарактеристики, "[", "");
	ВыражениеБезСкобок = СтрЗаменить(ВыражениеБезСкобок, "]", "");
	ВыражениеБезСкобок = СтрЗаменить(ВыражениеБезСкобок, "{", "");
	ВыражениеБезСкобок = СтрЗаменить(ВыражениеБезСкобок, "}", "");
	
	Для Каждого ОписаниеСвойств Из СвойстваПоддерживаемыхХарактеристик Цикл
		Если СтрНачинаетсяС(ВыражениеБезСкобок, ОписаниеСвойств.ПрефиксТипаВидаХарактеристик) Тогда
			СвойстваХарактеристики.Префикс = ОписаниеСвойств.ПрефиксТипаВидаХарактеристик;
			СвойстваХарактеристики.Идентификатор = Сред(ВыражениеБезСкобок, СтрДлина(ОписаниеСвойств.ПрефиксТипаВидаХарактеристик) + 1);
			СвойстваХарактеристики.Метаданные = ОписаниеСвойств.МетаданныеИсточника;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СвойстваХарактеристики;
	
КонецФункции

// Возвращает имя поля идентификатора для формул дополнительных реквизитов и сведений.
// 
// Возвращаемое значение:
// 	Строка - Имя поля "ИдентификаторДляФормул"
Функция ПолеИдентификатораДополнительныхРеквизитовИСведений() Экспорт
	МетаданныеХарактеристики = Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения;
	СвойстваХарактеристик = РаботаСФормуламиПовтИсп.СвойстваПоддерживаемыхИсточниковХарактеристик();
	ОписаниеСвойств = СвойстваХарактеристик.Найти(МетаданныеХарактеристики, "МетаданныеИсточника");
	
	Возврат ОписаниеСвойств.ПолеИдентификатора;
КонецФункции

#Область РаботаСДеревомОперандов

// Формирует дерево значений с колонками Идентификатор, Представление.
//
// Возвращаемое значение:
//  ДеревоЗначений - Пустое дерево операндов с колонками:
//    *Идентификатор - Строка - Идентификатор операнда.
//    *Представление - Строка - Представление операнда.
//    *ТипЭлементаДерева - Строка - См. РаботаСФормулами.ТипыЭлементовДереваОперандов
//    *РазрешаетсяВыборОперанда - Булево - Если истина, то строку дерева операнда можно будет выбирать в формулу.
//    		Например, не имеет смысла выбор групп операндов.
//    *ВключаетсяВИдентификатор - Булево - Признак включения идентификатора текущей строки в состав идентификатора нижерасположенной строки.
//    		Например, если группа операндов идентифицирует путь к данным, то она должна включаться в идентификатор.
//    		Если группа операндов используется только для логической компоновки операндов, то она не должна включаться в идентификатор.
//    *ТипЗначения              - ОписаниеТипов - Описание типов операнда. Разрешается не указывать тип только для групп операндов.
//    		В остальных случаях заполнение обязательно.
//    *РазворачиватьДоРеквизитов - Булево - Признак необходимости рекурсивно разворачивать ссылочный операнд до реквизитов.
//    *Значение - Число - Значение операнда. Может использоваться, например, для интерактивного расчета значения по формуле.
//    *СодержитЗначение - Булево - Флаг, что строка операнда содержит значение.
//    *ПометкаУдаления  - Булево - Заполняется, если операнд представляет из себя ссылку на объект (например, тип цен).
//    		Если элемент помечен на удаление, то при выборе будет выведено дополнительное оповещение.
//
Функция ПолучитьПустоеДеревоОперандов() Экспорт
	
	Дерево = Новый ДеревоЗначений();
	
	// Основные свойства
	Дерево.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	Дерево.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	
	Дерево.Колонки.Добавить("ТипЭлементаДерева", Новый ОписаниеТипов("Строка"));
	Дерево.Колонки.Добавить("РазрешаетсяВыборОперанда", Новый ОписаниеТипов("Булево"));
	Дерево.Колонки.Добавить("ВключаетсяВИдентификатор", Новый ОписаниеТипов("Булево"));
	
	Дерево.Колонки.Добавить("ТипЗначения",   Новый ОписаниеТипов("ОписаниеТипов"));
	Дерево.Колонки.Добавить("РазворачиватьДоРеквизитов", Новый ОписаниеТипов("Булево"));
	
	// Дополнительные свойства
	Дерево.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(32, 3, ДопустимыйЗнак.Любой)));
	Дерево.Колонки.Добавить("СодержитЗначение", Новый ОписаниеТипов("Булево"));
	
	Дерево.Колонки.Добавить("ПометкаУдаления", Новый ОписаниеТипов("Булево"));
	
	Возврат Дерево;
	
КонецФункции

// Типы элементов дерева операндов. Тип элемента влияет на картинку строки в дереве, а также может влиять на поведение.
// Реализация в виде структуры позволяет использовать ее в коде как перечисление.
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * Операнд - Строка - Обычный операнд не относящийся к метаданным. Например, вид цен. Значение по умолчанию.
// * Группа - Строка - Группа операндов или реквизитов или параметров. Картинка как папка.
// * ГруппаСтрокВерхнегоУровня - Строка - Группа операндов или реквизитов. Картинка как три реквизита.
// * Реквизит - Строка - Реквизит метаданных. Например, реквизит вид номенклатуры.
// * ДополнительныйРеквизит - Строка - Дополнительный реквизит. Отличается от дополнительного сведения только картинкой (и местом хранения значения).
// * ДополнительноеСведение - Строка - Дополнительное сведение.
// * ВидКонтактнойИнформации_Адрес - Строка - Вид контактной информации с типом "адрес".
// * ВидКонтактнойИнформации_Телефон - Строка - Вид контактной информации с типом "телефон".
// * ВидКонтактнойИнформации_АдресЭлектроннойПочты - Строка - Вид контактной информации с типом "адрес электронной почты".
// * ВидКонтактнойИнформации_Skype - Строка - Вид контактной информации с типом "skype".
// * ВидКонтактнойИнформации_ВебСтраница - Строка - Вид контактной информации с типом "веб страница".
// * ВидКонтактнойИнформации_Факс - Строка - Вид контактной информации с типом "факс".
// * ВидКонтактнойИнформации_Другое - Строка - Вид контактной информации с типом "другое".
// * ВидКонтактнойИнформации_НесколькоВидовКонтактнойИнформации - Строка - Идентификатор по указанному идентификатору существует несколько
// 		элементов справочника виды контактной информации с разными типами.
// * ПрочаяХарактеристика - Строка - Другой вид характеристик, не являющийся доп.реквизитами и сведениями или контактной информацией.
//
Функция ТипыЭлементовДереваОперандов() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Операнд", "Операнд"); // Простой операнд, например, вид цен.
	Результат.Вставить("Группа", "Группа"); // Группа операндов. Картинка как папка. Например, поля схемы компоновки, сгруппированные в поля группы.
	Результат.Вставить("ГруппаСтрокВерхнегоУровня", "ГруппаСтрокВерхнегоУровня"); // Группа операндов. Картинка как три реквизита.
	
	Результат.Вставить("Реквизит", "Реквизит");
	
	Результат.Вставить("ДополнительныйРеквизит", "ДополнительныйРеквизит");
	Результат.Вставить("ДополнительноеСведение", "ДополнительноеСведение");
	
	Результат.Вставить("ВидКонтактнойИнформации_Адрес", "ВидКонтактнойИнформации_Адрес");
	Результат.Вставить("ВидКонтактнойИнформации_Телефон", "ВидКонтактнойИнформации_Телефон");
	Результат.Вставить("ВидКонтактнойИнформации_АдресЭлектроннойПочты", "ВидКонтактнойИнформации_АдресЭлектроннойПочты");
	Результат.Вставить("ВидКонтактнойИнформации_Skype", "ВидКонтактнойИнформации_Skype");
	Результат.Вставить("ВидКонтактнойИнформации_ВебСтраница", "ВидКонтактнойИнформации_ВебСтраница");
	Результат.Вставить("ВидКонтактнойИнформации_Факс", "ВидКонтактнойИнформации_Факс");
	Результат.Вставить("ВидКонтактнойИнформации_Другое", "ВидКонтактнойИнформации_Другое");
	Результат.Вставить("ВидКонтактнойИнформации_НесколькоВидовКонтактнойИнформации", "ВидКонтактнойИнформации_НесколькоВидовКонтактнойИнформации");
	
	Результат.Вставить("ПрочаяХарактеристика", "ПрочаяХарактеристика");
	
	Возврат Результат;
	
КонецФункции

// Добавляет в указанное место подчиненную строку дерева и заполняет ее значениями по умолчанию.
// 
// Параметры:
// 	МестоДобавления - ДеревоЗначений, СтрокаДереваЗначений, ДанныеФормыДерево, ДанныеФормыЭлементДерева - дерево,
// 			полученное методом ПолучитьПустоеДеревоОперандов или дерево на форме или строки дерева.
// Возвращаемое значение:
// 	- СтрокаДереваЗначений - Строка, добавленная в дерево значений.
// 	- ДанныеФормыЭлементДерева - Строка, добавленная в дерево на форме.
Функция НоваяСтрокаДереваОперанда(МестоДобавления) Экспорт
	
	Если ТипЗнч(МестоДобавления) = Тип("ДеревоЗначений")
	 ИЛИ ТипЗнч(МестоДобавления) = Тип("СтрокаДереваЗначений") Тогда
		НоваяСтрокаДерева = МестоДобавления.Строки.Добавить();
	Иначе
		НоваяСтрокаДерева = МестоДобавления.ПолучитьЭлементы().Добавить();
	КонецЕсли;
	
	// Базовые свойства.
	
	// Обязательный. Используется в самой формуле.
	НоваяСтрокаДерева.Идентификатор = "";
	
	// Обязательный. Используется в пользовательском представлении.
	НоваяСтрокаДерева.Представление = "";
	
	// Обязательный. Используется для определения картинки строки дерева.
	НоваяСтрокаДерева.ТипЭлементаДерева = ТипыЭлементовДереваОперандов().Операнд;
	
	// Флаг, указывающий, можно ли выбирать текущую строку дерева в формулу.
	// Например, объединяющую группу операндов не имеет смысл выбирать.
	НоваяСтрокаДерева.РазрешаетсяВыборОперанда = Истина;
	
	// Флаг, указывающий, нужно ли включать идентификатор данной строки объединяющей группы идентификаторов
	// может включаться или не включаться в идентификатор нижестоящих операндов.
	НоваяСтрокаДерева.ВключаетсяВИдентификатор = Истина;
	
	// Рекурсивный разворот строк дерева и отображение типа операнда на форме.
	
	// Обязательный (исключение группы операндов). Обязателен для рекурсивного разворота в конструкторе формул.
	НоваяСтрокаДерева.ТипЗначения = Неопределено;
	
	// Флаг необходимости дальнейшего рекурсивного разворота строки дерева в конструкторе формул.
	// Требует указания типа значения на текущую строку дерева.
	НоваяСтрокаДерева.РазворачиватьДоРеквизитов = Ложь;
	
	// Свойства для онлайн расчета значения формулы в конструкторе формул.
	НоваяСтрокаДерева.Значение = 0; // Не обязательный. Числовое значение для онлайн расчета значения по формуле, если известно.
	НоваяСтрокаДерева.СодержитЗначение = Ложь; // Не обязательный. Флаг, если содержит значение (0 - тоже значение).
	
	// Дополнительные свойства.
	
	// Указывается, если операнд представляет из себя указатель на ссылку, например, вид цен или статью расходов,
	// и необходимо при выборе операнда в конструкторе формул дополнительно предупреждать пользователя о пометке
	// на удаление элемента.
	НоваяСтрокаДерева.ПометкаУдаления = Ложь; 
	
	
	Возврат НоваяСтрокаДерева;
	
КонецФункции

// Возвращает шаблон параметров дополнительных ограничений развертки операндов.
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * РекурсивноРазворачиватьОперандыСхемыКомпоновки - Булево - Значение по умолчанию Истина (разворачиваются). Но можно отключить разворот строк
// 		одним параметром без указания соответствующего параметра для каждой строки дерева операндов.
// * МаксимальныйУровеньРазверткиСтрок - Число - Значение по умолчанию 0 (не контролируется). Контроль максимального уровня строк в дереве при развертке.
// * ВыводитьРеквизиты - Булево - Значение по умолчанию Истина. Флаг необходимости выводить обычные реквизиты при развертке.
// * ВыводитьХарактеристики - Булево - Значение по умолчанию Истина. Флаг необходимости выводить характеристики (доп.реквизиты и сведения, а также контактную информацию).
// * НаборыДополнительныхРеквизитов - Массив из СправочникСсылка.НаборыДополнительныхРеквизитовИСведений - Если массив пустой, то дополнительный отбор для доп.реквизитов
// 		и сведений по наборам не накладывается. Действует только отбор, описанный в метаданных (кнопка "Характеристики") для объектов
// 		из типа значения разворачиваемой строки.
// 		Если массив не пустой, то в дополнению к отбору из метаданных накладывается отбор на вхождение доп.реквизитов и сведений
// 		в указанные наборы.
// * ВыводимыеРеквизиты - Строка - Значение по умолчанию "" (вывод реквизитов не ограничивается). Возможность ограничить выводимые реквизиты списком, перечисленным через запятую.
// 		Если значение заполнено, то при выводе реквизита будет выполняться проверка на вхождение в этот список.
// * НеВыводимыеРеквизиты - Строка - Значение по умолчанию "" (вывод реквизитов не ограничивается). Возможность ограничить выводимые реквизиты списком, перечисленным через запятую.
// 		Если значение заполнено, то при выводе реквизита будет выполняться проверка на НЕ вхождение в этот список.
//
Функция ОграниченияРазверткиОперандов() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("РекурсивноРазворачиватьОперандыСхемыКомпоновки", Истина);
	
	Результат.Вставить("МаксимальныйУровеньРазверткиСтрок", 0);
	
	Результат.Вставить("ВыводитьРеквизиты", Истина);
	Результат.Вставить("ВыводитьХарактеристики", Истина);
	Результат.Вставить("НаборыДополнительныхРеквизитов", Новый Массив);
	
	Результат.Вставить("ВыводимыеРеквизиты", "");
	Результат.Вставить("НеВыводимыеРеквизиты", "");
	
	Возврат Результат;
	
КонецФункции

// Разворачиваем строку дерева операндов на один уровень по ее типу значения (добавляются подчиненные строки - реквизиты и характеристики).
// 
// Параметры:
// 	СтрокаДерева - СтрокаДереваЗначений - разворачиваемая строка дерева:
// 	 *Идентификатор - Строка - Для всех типов значений. Идентификатор строки.
// 	 *Представление - Строка - Для всех типов значений. Представление строки.
// 	 *ТипЭлементаДерева - Строка - Для всех типов значений. см. РаботаСФормулами.ТипыЭлементовДереваОперандов.
// 	 *РазрешаетсяВыборОперанда - Булево - Для всех типов значений. Флаг возможности выбора строки операнда.
// 	 *ВключаетсяВИдентификатор - Булево - Для всех типов значений. Флаг включения текущего операнда в нижеследующие.
// 	СтрокаДерева - ДанныеФормыЭлементДерева - разворачиваемая строка дерева.
// 	 *Идентификатор - Строка - Для всех типов значений. Идентификатор строки.
// 	 *Представление - Строка - Для всех типов значений. Представление строки.
// 	 *ТипЭлементаДерева - Строка - Для всех типов значений. см. РаботаСФормулами.ТипыЭлементовДереваОперандов.
// 	 *РазрешаетсяВыборОперанда - Булево - Для всех типов значений. Флаг возможности выбора строки операнда.
// 	 *ВключаетсяВИдентификатор - Булево - Для всех типов значений. Флаг включения текущего операнда в нижеследующие.
// 	ОграниченияРазвертки - Неопределено - Значения развертки по умолчанию.
// 	ОграниченияРазвертки - см. РаботаСФормулами.ОграниченияРазверткиОперандов.
//
Процедура РазвернутьСтрокуОперанда(СтрокаДерева, ОграниченияРазвертки = Неопределено) Экспорт
	Если ТипЗнч(СтрокаДерева) = Тип("ДанныеФормыЭлементДерева") Тогда
		Если СтрокаДерева.ПодчиненныеСтрокиРазворачивались Тогда
			Возврат;
		КонецЕсли;
	ИначеЕсли ТипЗнч(СтрокаДерева) = Тип("СтрокаДереваЗначений") Тогда
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Для строки-реквизита разворачивается сам реквизит,
	// для строки-таблицы (табличной части) ищется строка-владелец и разворачивается она.
	РазворачиваетсяТаблица = (СтрокаДерева.ТипЭлементаДерева = "ТабличнаяЧасть");
	Если РазворачиваетсяТаблица Тогда
		ТипЗначения = Новый ОписаниеТипов();
		Если ТипЗнч(СтрокаДерева) = Тип("ДанныеФормыЭлементДерева") Тогда
			СтрокаРодитель = СтрокаДерева.ПолучитьРодителя();
		Иначе
			СтрокаРодитель = СтрокаДерева.Родитель;
		КонецЕсли;
		Если СтрокаРодитель = Неопределено Тогда
			ТекстОшибки = НСтр("ru = 'Для таблицы %1 не определен объект владелец таблицы, невозможно определить реквизиты таблицы'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстОшибки,
				СтрокаДерева.Представление);
			ВызватьИсключение ТекстОшибки;
		Иначе
			ТипЗначения = СтрокаРодитель.ТипЗначения;
		КонецЕсли;
	Иначе
		ТипЗначения = СтрокаДерева.ТипЗначения;
	КонецЕсли;
	
	Если ТипЗначения.Типы().Количество() = 0 Тогда
		ТекстОшибки = НСтр("ru = 'Для строки операнда не задан тип значения, развертка не возможна'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ПараметрыДобавленияСтрок = ПараметрыДобавленияСтрокиПоПолюКомпоновки();
	ПараметрыДобавленияСтрок.ТипЗначенияПоляРодителя = ТипЗначения;
	
	Если ОграниченияРазвертки = Неопределено Тогда
		ПараметрыДобавленияСтрок.РекурсивноРазворачиватьОперандыСхемыКомпоновки = Истина;
		ВыводитьХарактеристики = Истина;
		НаборыДополнительныхРеквизитов = Новый Массив;
	Иначе
		ПараметрыДобавленияСтрок.РекурсивноРазворачиватьОперандыСхемыКомпоновки = ОграниченияРазвертки.РекурсивноРазворачиватьОперандыСхемыКомпоновки;
		ВыводитьХарактеристики = ОграниченияРазвертки.ВыводитьХарактеристики;
		НаборыДополнительныхРеквизитов = ОграниченияРазвертки.НаборыДополнительныхРеквизитов;
	КонецЕсли;
	
	ПараметрыДобавленияСтрок.УдаляемыйПрефиксИдентификатора = "Реквизит";
	// программно генерируемая СКД, у поля "Реквизит" нет представления на пользовательский язык.
	ПараметрыДобавленияСтрок.УдаляемыйПрефиксПредставления = "Реквизит";
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДанныеФормыЭлементДерева") Тогда
		// Дерево на форме имеет расширенный состав колонок, в т.ч. "ПолныйИдентификаторСтроки" и "ПолноеПредставлениеСтроки".
		// В случае подготовки дерева операндов до его загрузки на форму данных колонок еще не существует, они будут
		// рассчитаны позднее при загрузке.
		// Поэтому заполнение добавляемых префиксов только для строки дерева формы.
		Если СтрокаДерева.ВключаетсяВИдентификатор Тогда
			ПараметрыДобавленияСтрок.ДобавляемыйПрефиксИдентификатора = СтрокаДерева.ПолныйИдентификаторСтроки;
			ПараметрыДобавленияСтрок.ДобавляемыйПрефиксПредставления  = СтрокаДерева.ПолноеПредставлениеСтроки;
		Иначе
			ПараметрыДобавленияСтрок.ДобавляемыйПрефиксИдентификатора = "";
			ПараметрыДобавленияСтрок.ДобавляемыйПрефиксПредставления  = "";
		КонецЕсли;
	КонецЕсли;
	
	СхемаКомпоновки = СхемаКомпоновкиПолученияРеквизитовПоТипуЗначения(ТипЗначения, ВыводитьХарактеристики, НаборыДополнительныхРеквизитов);
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки));
	
	Для Каждого ДоступноеПоле Из КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы Цикл
		
		// Системные поля на первом уровне - уровне типизированного реквизита.
		Если ДоступноеПоле.Папка Тогда
			Продолжить;
		КонецЕсли;
		Если ДоступноеПоле.Таблица Тогда
			Продолжить;
		КонецЕсли;
		
		Если РазворачиваетсяТаблица Тогда
			
			// В доступных элементах ищем таблицу с тем же идентификатором и разворачиваем только ее.
			Для Каждого ДоступноеПолеКомпоновки Из ДоступноеПоле.Элементы Цикл
		
				Если НЕ ДоступноеПолеКомпоновки.Таблица Тогда
					Продолжить;
				КонецЕсли;
				
				ИдентификаторПоля = ИдентификаторСтрокиПоляКомпоновки(ДоступноеПолеКомпоновки, ПараметрыДобавленияСтрок);
				Если ИдентификаторПоля <> СтрокаДерева.Идентификатор Тогда
					Продолжить;
				КонецЕсли;
				
				ПараметрыДобавленияСтрок.УдаляемыйПрефиксИдентификатора = ПараметрыДобавленияСтрок.УдаляемыйПрефиксИдентификатора
					+ "." + СтрокаДерева.Идентификатор;
				ПараметрыДобавленияСтрок.УдаляемыйПрефиксПредставления = ПараметрыДобавленияСтрок.УдаляемыйПрефиксПредставления
					+ "." + СтрокаДерева.Представление;
				
				СписокПолей = ОтсортированныйСписокПолейКомпоновки(
					ДоступноеПолеКомпоновки.Элементы,
					ПараметрыДобавленияСтрок);
					
				Для Каждого ЭлементСписка Из СписокПолей Цикл
					НоваяСтрокаДереваПоПолюКомпоновки(ЭлементСписка,
						СтрокаДерева,
						ПараметрыДобавленияСтрок,
						ОграниченияРазвертки);
				КонецЦикла;
				
				Прервать;
			КонецЦикла;
			
		Иначе
			
			СписокПолей = ОтсортированныйСписокПолейКомпоновки(
				ДоступноеПоле.Элементы,
				ПараметрыДобавленияСтрок);
				
			Для Каждого ЭлементСписка Из СписокПолей Цикл
				НоваяСтрокаДереваПоПолюКомпоновки(ЭлементСписка,
					СтрокаДерева,
					ПараметрыДобавленияСтрок,
					ОграниченияРазвертки);
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	
КонецПроцедуры

// Разворачиваем строку дерева операндов на один уровень по ее типу значения (добавляются подчиненные строки - реквизиты и характеристики).
// Вызывается из формы с деревом операндов при событии развертки строки дерева. Поиск строки по ее идентификатору и удаление подчиненной служебной строки.
// 
// Параметры:
// 	ДеревоОперандовФормы - ДанныеФормыДерево - Дерево операндов на форме.
// 	ИдентификаторТекущейСтрокиДереваОперандов - Число - Идентификатор строки дерева формы.
// 	МаксимальныйУровеньРазверткиСтрок - Число - Значение по умолчанию 0 (не контролируется). Контроль максимального уровня строк в дереве при развертке.
//
Процедура РазвернутьСтрокуОперандаДереваФормы(ДеревоОперандовФормы, ИдентификаторТекущейСтрокиДереваОперандов, МаксимальныйУровеньРазверткиСтрок = 0) Экспорт
	
	СтрокаДерева = ДеревоОперандовФормы.НайтиПоИдентификатору(ИдентификаторТекущейСтрокиДереваОперандов);
	ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();
	
	// В подчиненных строках одна строка с флагом ПодчиненнаяСтрокаСлужебная
	// для отображения наличия подчиненных строк. Данную строку нужно удалить.
	СлужебнаяСтрокаНаУдаление = Неопределено;
	Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
		Если ПодчиненнаяСтрока.ПодчиненнаяСтрокаСлужебная Тогда
			СлужебнаяСтрокаНаУдаление = ПодчиненнаяСтрока;
		КонецЕсли;
	КонецЦикла;
	
	ОграниченияРазвертки = ОграниченияРазверткиОперандов();
	ОграниченияРазвертки.МаксимальныйУровеньРазверткиСтрок = МаксимальныйУровеньРазверткиСтрок;
	
	РазвернутьСтрокуОперанда(СтрокаДерева, ОграниченияРазвертки);
	
	Если НЕ СлужебнаяСтрокаНаУдаление = Неопределено Тогда
		ПодчиненныеСтроки.Удалить(СлужебнаяСтрокаНаУдаление);
	КонецЕсли;
	
КонецПроцедуры


// Добавляет в указанное место дерева операндов первый уровень полей по схеме компоновки данных.
// 
// Параметры:
// 	МестоДобавления - ДеревоЗначений, СтрокаДереваЗначений - Строки добавляются непосредственно в дерево операндов
// 				или в указанную строку дерева операндов.
// 	СхемаКомпоновки - СхемаКомпоновкиДанных - Произвольная схема компоновки, поля выборки которой необходимо добавить
// 				в указанное место.
// 	ОграниченияРазвертки - Неопределено, Структура - см. РаботаСФормулами.ОграниченияРазверткиОперандов.
//
Процедура ДобавитьВДеревоДоступныеПоляПоСхемеКомпоновки(МестоДобавления, СхемаКомпоновки, ОграниченияРазвертки = Неопределено) Экспорт
	
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки));
	
	ПараметрыДобавленияСтрок = ПараметрыДобавленияСтрокиПоПолюКомпоновки();
	ПараметрыДобавленияСтрок.ДобавлениеПолейПоСхемеКомпоновки = Истина;
	
	Если ОграниченияРазвертки = Неопределено Тогда
		ПараметрыДобавленияСтрок.РекурсивноРазворачиватьОперандыСхемыКомпоновки = Истина;
	Иначе
		ПараметрыДобавленияСтрок.РекурсивноРазворачиватьОперандыСхемыКомпоновки = ОграниченияРазвертки.РекурсивноРазворачиватьОперандыСхемыКомпоновки;
	КонецЕсли;
	
	// Обработка доступности реквизитов в пользовательской схеме компоновки.
	// Разворачивать доступные поля для сложных составных типов затратно, поэтому
	// анализируются флаги доступности полей в самой схеме.
	ПоляСОграничениемДоступностиРеквизитов = Новый Массив;
	Для Каждого НаборДанных Из СхемаКомпоновки.НаборыДанных Цикл
		Для Каждого ПолеНабора Из НаборДанных.Поля Цикл
			ПроверитьДополнениеРазворачиваемыхГруппПолейСКД(ПараметрыДобавленияСтрок.РазворачиваемыеГруппыПолейСКД,
				ПолеНабора.ПутьКДанным);
			Если НЕ ТипЗнч(ПолеНабора) = Тип("ПолеНабораДанныхСхемыКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			ИмяПоля = ПолеНабора.ПутьКДанным;
			ОграничениеИспользования = ПолеНабора.ОграничениеИспользования.Поле;
			ОграничениеИспользованияРеквизитов = ПолеНабора.ОграничениеИспользованияРеквизитов.Поле;
			Если НЕ ОграничениеИспользования И ОграничениеИспользованияРеквизитов Тогда
				Если ПоляСОграничениемДоступностиРеквизитов.Найти(ИмяПоля) = Неопределено Тогда
					ПоляСОграничениемДоступностиРеквизитов.Добавить(ИмяПоля);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Для Каждого ВычисляемоеПоле Из СхемаКомпоновки.ВычисляемыеПоля Цикл
		ПроверитьДополнениеРазворачиваемыхГруппПолейСКД(ПараметрыДобавленияСтрок.РазворачиваемыеГруппыПолейСКД,
			ПолеНабора.ПутьКДанным);
		ИмяПоля = ВычисляемоеПоле.ПутьКДанным;
		ОграничениеИспользования = ВычисляемоеПоле.ОграничениеИспользования.Поле;
		//ОграничениеИспользованияРеквизитов = ВычисляемоеПоле.ОграничениеИспользованияРеквизитов.Поле;
		//Если НЕ ОграничениеИспользования И ОграничениеИспользованияРеквизитов Тогда
		//	Если ПоляСОграничениемДоступностиРеквизитов.Найти(ИмяПоля) = Неопределено Тогда
		//		ПоляСОграничениемДоступностиРеквизитов.Добавить(ИмяПоля);
		//	КонецЕсли;
		//КонецЕсли;
	КонецЦикла;
	
	СписокПолей = ОтсортированныйСписокПолейКомпоновки(
		КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы,
		ПараметрыДобавленияСтрок,
		ПоляСОграничениемДоступностиРеквизитов);
	
	Для Каждого ЭлементСписка Из СписокПолей Цикл
		НоваяСтрокаДереваПоПолюКомпоновки(ЭлементСписка,
			МестоДобавления, ПараметрыДобавленияСтрок, ОграниченияРазвертки);
	КонецЦикла;
	
КонецПроцедуры

// Загружает в дерево на форме инициализированное разработчиком дерево значений,
// также заполняет соответствие значений операндов, если соответствующий параметр передан.
// 
// Параметры:
// 	ДеревоФормы - ДанныеФормыДерево - Дерево на форме, в которое загружается инициализированное разработчиком дерево значений.
// 				Имеет служебные колонки, которых нет в ДеревоОперандов, они заполняются в данном методе.
// 	ДеревоОперандов - ДеревоЗначений - Инициализированное разработчиком дерево значений. См. ПолучитьПустоеДеревоОперандов.
// 	МассивРазрешенныхОперандов - Неопределено, Массив - имена разрешенных операндов для проверки корректности формулы.
// 	ЗначенияОперандов - Неопределено - Значение по умолчанию. Соответствие операндов и их значений не заполняется.
// 				Соответствие - Соответствие операндов и их значений:
// 					* Ключ - Строка - Идентификатор операнда.
// 					* Значение - Число - значение операнда.
Процедура ЗагрузитьДеревоОперандовВДеревоФормы(ДеревоФормы, ДеревоОперандов, МассивРазрешенныхОперандов = Неопределено,
						ЗначенияОперандов = Неопределено) Экспорт
	
	ДеревоФормы.ПолучитьЭлементы().Очистить();
	ЗагрузитьСтрокиДереваОперандов(ДеревоФормы, ДеревоОперандов, МассивРазрешенныхОперандов, ЗначенияОперандов);
	
КонецПроцедуры



#КонецОбласти

#Область РаботаСДеревомОператоров

// Формирует дерево значений с колонками Наименование, Оператор, Сдвиг.
//
// Возвращаемое значение:
//  ДеревоЗначений - Пустое дерево операторов с колонками:
//  * Наименование - Строка - Наименование оператора.
//  * Оператор - Строка - Оператор.
//  * Сдвиг - Число - Сдвиг оператора.
//
Функция ПолучитьПустоеДеревоОператоров() Экспорт
	
	Дерево = Новый ДеревоЗначений();
	Дерево.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); // Представление оператора на языке пользователя.
	Дерево.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка")); // Идентификатор оператора на языке кода.
	
	// Текст, вставляемый в формулу, идентификатор оператора на языке кода с дополнительными элементами - скобки,
	// указание на параметры, пояснения к параметрам могут быть на языке пользователя.
	// Например, для функции формат для конфигурации с русским языком кода для пользователя с английским 
	// интерфейсом "Формат(<Value>, <Format string>)".
	Дерево.Колонки.Добавить("КонструкцияДляВставки", Новый ОписаниеТипов("Строка"));
	
	Дерево.Колонки.Добавить("Сдвиг", Новый ОписаниеТипов("Число"));
	Дерево.Колонки.Добавить("Пояснение", Новый ОписаниеТипов("Строка"));
	
	Дерево.Колонки.Добавить("ЭтоГруппа", Новый ОписаниеТипов("Булево"));
	
	Возврат Дерево;
	
КонецФункции

// Добавляет в дерево операторов группу операторов с переданным наименованием.
//
// Параметры:
//  Дерево - ДеревоЗначений - Дерево операторов. см. функцию ПолучитьПустоеДеревоОператоров().
//  Идентификатор - Строка - Идентификатор оператора на встроенном языке.
//  Представление - Строка - Наименование группы дерева операторов на языке пользователя.
//
// Возвращаемое значение:
//  СтрокаДереваЗначений - Добавленная группа операторов.
//
Функция ДобавитьГруппуОператоров(Дерево, Идентификатор, Представление) Экспорт
	
	НоваяГруппа = Дерево.Строки.Добавить();
	НоваяГруппа.Идентификатор = Идентификатор;
	НоваяГруппа.Представление = Представление;
	НоваяГруппа.ЭтоГруппа = Истина;
	
	Возврат НоваяГруппа;
	
КонецФункции

// Добавляет в дерево операторов группу операторов с переданным наименованием.
//
// Параметры:
//  МестоДобавления - ДеревоЗначений, СтрокаДереваЗначений - Дерево операторов или группа операторов, в которую необходимо добавить оператор.
//  Идентификатор - Строка - Идентификатор оператора на встроенном языке.
//  КонструкцияДляВставки - Строка - Текст, добавляемый в формулу при выборе, идентификатор со скобками и параметрами.
//  Представление - Строка - Представление оператора на языке пользователя.
//  Пояснение - Строка - Опциональное пояснение для пользователя, что выполняет оператор.
//  Сдвиг - Число - необходим для определения позиции курсора.
//
// Возвращаемое значение:
//  СтрокаДереваЗначений - Добавленный оператор.
//
Функция ДобавитьОператор(МестоДобавления, Идентификатор, КонструкцияДляВставки, Представление, Пояснение = "", Сдвиг = 0) Экспорт
	
	НоваяСтрока = МестоДобавления.Строки.Добавить();
	НоваяСтрока.Идентификатор = Идентификатор;
	НоваяСтрока.КонструкцияДляВставки = КонструкцияДляВставки;
	НоваяСтрока.Представление = Представление;
	НоваяСтрока.Пояснение = Пояснение;
	НоваяСтрока.Сдвиг = Сдвиг;
	НоваяСтрока.ЭтоГруппа = Ложь;
	
	Возврат НоваяСтрока;
	
КонецФункции

// Формирует дерево со стандартными операторами "+", "-", "*", "/"
//
// Возвращаемое значение:
//  ДеревоЗначений - дерево операторов. см. функцию ПолучитьПустоеДеревоОператоров().
//
Функция ПолучитьСтандартноеДеревоОператоров() Экспорт
	
	Дерево = ПолучитьПустоеДеревоОператоров();
	
	ПредставлениеГруппыОператора = НСтр("ru = 'Операторы'");
	ГруппаОператоров = ДобавитьГруппуОператоров(Дерево, "Операторы", ПредставлениеГруппыОператора);
	
	ДобавитьОператор(ГруппаОператоров, "+", " + ", "+");
	ДобавитьОператор(ГруппаОператоров, "-", " - ", "-");
	ДобавитьОператор(ГруппаОператоров, "*", " * ", "*");
	ДобавитьОператор(ГруппаОператоров, "/", " / ", "/");
	
	Возврат Дерево;
	
КонецФункции

// Заполняет дерево операторов для конструктора формул.
//
// Параметры:
//  Параметры - Структура - содержит виды операторов, которые необходимо добавить в дерево.
//  УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор формы, в которой выполняется действия, 
//  		необходим для корректного помещения во временное хранилище.
//
// Возвращаемое значение:
//  Строка - Адрес во временном хранилище.
//
Функция ПостроитьДеревоОператоров(Параметры, УникальныйИдентификатор) Экспорт
	
	Дерево = ПолучитьПустоеДеревоОператоров();
	
	Если Параметры.Свойство("СтандартныеОператоры") И Параметры.СтандартныеОператоры Тогда
		ДобавитьГруппуСтандартныхОператоров(Дерево);
	КонецЕсли;
	
	Если Параметры.Свойство("ЛогическиеОператоры") И Параметры.ЛогическиеОператоры Тогда
		ДобавитьГруппуЛогическихОператоров(Дерево);
	КонецЕсли;
	
	Если Параметры.Свойство("Функции") И Параметры.Функции Тогда
		ДобавитьГруппуФункции(Дерево);
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(Дерево, УникальныйИдентификатор);
	
КонецФункции

#КонецОбласти

#Область ПроверкаФормулы

// Возвращает шаблон параметров проверки формулы.
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * ФункцииОбщегоМодуля - Массив из см. РаботаСФормуламиКлиентСервер.ОписаниеФункцииОбщегоМодуля - Описание добавленных функций.
// * ФормулаДляВычисленияВЗапросе - Булево - Признак исполнения функции в качестве выражения текста запроса.
// * Поле - Строка - Путь к реквизиту формы, для которого было выведено сообщение, или к данным объекта.
// * ПутьКДанным - Строка - Содержит путь в форме, которая будет отображать сообщение, до объекта, связанного с этим сообщением.
// * СообщениеОбОшибке - Строка - Значение по умолчанию "". Если сообщение заполнено, то при наличии ошибки будет выводится указанное сообщение.
// * НеВыводитьСообщения - Булево - Флаг, позволяющий отключить вывод сообщений об ошибках.
//
Функция ПараметрыПроверкиФормулы() Экспорт
	
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("ФункцииОбщегоМодуля", Новый Массив);
	ПараметрыПроверки.Вставить("Поле", "");
	ПараметрыПроверки.Вставить("ПутьКДанным", "");
	ПараметрыПроверки.Вставить("СообщениеОбОшибке", "");
	ПараметрыПроверки.Вставить("НеВыводитьСообщения", Ложь);
	
	Возврат ПараметрыПроверки;
	
КонецФункции

// Осуществляет проверку корректности формулы
//
// Параметры:
//   Формула - Строка - текст формулы.
//   Операнды - Массив из Строка - операнды формулы.
//   ТипРезультата - ОписаниеТипов - ожидаемый тип результата вычисления.
//   ПараметрыПроверки - см. ПараметрыПроверкиФормулы
//
// Возвращаемое значение:
//  Булево - Ложь, если есть ошибки, иначе Истина.
//
Функция ПроверитьФормулу(Формула, Операнды, ТипРезультата, ПараметрыПроверки = Неопределено) Экспорт
	
	
	Если ПараметрыПроверки = Неопределено Тогда
		ФункцииОбщегоМодуля = Новый Массив; // Массив из см. РаботаСФормуламиКлиентСервер.ОписаниеФункцииОбщегоМодуля - 
		ВыводитьСообщения = Истина;
		Поле = "";
		ПутьКДанным = "";
		СообщениеОбОшибке = "";
	Иначе
		ФункцииОбщегоМодуля = ПараметрыПроверки.ФункцииОбщегоМодуля; // Массив из см. РаботаСФормуламиКлиентСервер.ОписаниеФункцииОбщегоМодуля -
		ВыводитьСообщения = НЕ ПараметрыПроверки.НеВыводитьСообщения;
		Поле = ПараметрыПроверки.Поле;
		ПутьКДанным = ПараметрыПроверки.ПутьКДанным;
		СообщениеОбОшибке = ПараметрыПроверки.СообщениеОбОшибке;
	КонецЕсли;
	
	Результат = Истина;
	
	Если ЗначениеЗаполнено(Формула) Тогда
		
		ТипыРезультата = ТипРезультата.Типы();
		Если ТипыРезультата.Количество() = 1
			И ТипыРезультата[0] = Тип("Строка") Тогда
			ТекстРасчета = """Строка"" + " + Формула;
			ЗначениеЗамены = """1""";
		ИначеЕсли ТипыРезультата.Количество() = 1
			И ТипыРезультата[0] = Тип("Дата") Тогда
				ЗначениеЗамены = 1;
			ТекстРасчета = Формула;
		Иначе
			ЗначениеЗамены = 1;
			ТекстРасчета = Формула;
		КонецЕсли;
		
		РаботаСФормуламиВызовСервера.ПолучитьТекстРасчета(ТекстРасчета, Операнды, ЗначениеЗамены);
		
		Попытка
			
				Если ФункцииОбщегоМодуля.Количество() > 0 Тогда
					
					Для Каждого СвойстваФункции Из ФункцииОбщегоМодуля Цикл
						ТекстРасчета = СтрЗаменить(ТекстРасчета, СвойстваФункции.Идентификатор, СвойстваФункции.ПолныйПуть);
					КонецЦикла; 
					
				КонецЕсли;
				
				РезультатРасчета = ОбщегоНазначения.ВычислитьВБезопасномРежиме(ТекстРасчета);
			
			
			ТекстПроверки = СтрЗаменить(Формула, Символы.ПС, "");
			ТекстПроверки = СтрЗаменить(ТекстПроверки, " ", "");
			ОтсутствиеРазделителей = Найти(ТекстПроверки, "][")
				+ Найти(ТекстПроверки, """[")
				+ Найти(ТекстПроверки, "]""");
			Если ОтсутствиеРазделителей > 0 Тогда
				Если ВыводитьСообщения Тогда
					ТекстСообщения = НСтр("ru = 'В формуле обнаружены ошибки. Между операндами должен присутствовать оператор или разделитель'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения,
						,
						Поле,
						ПутьКДанным,);
				КонецЕсли;
				Результат = Ложь;
			КонецЕсли;
			
			ТипРезультатаРасчетаПравильный = Ложь;
			
			Для Каждого ДопустимыйТип Из ТипРезультата.Типы() Цикл
				Если ТипЗнч(РезультатРасчета) = ДопустимыйТип Тогда
					ТипРезультатаРасчетаПравильный = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если Не ТипРезультатаРасчетаПравильный Тогда
				Результат = Ложь;
				Если ВыводитьСообщения Тогда
					ТекстСообщения = НСтр("ru = 'В формуле обнаружены ошибки. Результат расчета должен быть типа %1'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
						ТипРезультата);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения,,
						Поле,
						ПутьКДанным);
				КонецЕсли;
			КонецЕсли;
		
		Исключение
			
			Результат = Ложь;
			
			Если ВыводитьСообщения Тогда
				Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
					ТекстСообщения = СообщениеОбОшибке;
				Иначе
					ТекстСообщения = НСтр("ru = 'В формуле обнаружены ошибки. Проверьте формулу. Формулы должны составляться по правилам написания выражений на встроенном языке 1С:Предприятия.'");
				КонецЕсли;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,,
					Поле,
					ПутьКДанным);
			КонецЕсли;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ИсполнениеФормул

#Область ПолучениеВыраженийСПредставлениемХарактеристикДляОнлайнПроверки

// Возвращает соответствие выражение с идентификаторами - выражение с представлениями.
// Используется для онлайн проверки корректности выражений СКД из форм подбора аналитики и субконто.
// В случае указания контактной информации, для идентификатора которой подходят несколько представлений, вернет
// не сложное выражение через конструкцию ВЫБОР КОГДА, а первое подходящее представление контактной информации
// (для корректного отображения в поле на форме).
// Для онлайн проверки выражений в выражения следует подставлять представления характеристик.
// Использование переопределения имен характеристик для онлайн проверки не используется из-за высоких накладных расходов
// при инициализации компоновщика.
// 
// Параметры:
// 	ВыраженияСИдентификаторами - Массив из Строка - выражение операнда в терминах идентификаторов. Например, Номенклатура.{ДР.Экспедитор}.ГоловнойКонтрагент.{КИ.Телефон}
// 	СхемаКомпоновки - Неопределено, СхемаКомпоновкиДанных - Схемы компоновки по которой проверяется существование полей операндов.
// 				Если схема компоновки не задана парсинг выражений не возможен.
// 	
// Возвращаемое значение:
// 	Соответствие из КлючИЗначение - соответствие выражений в терминах идентификаторов и выражения с использованием представления:
// 	 *Ключ - Строка - выражение с идентификаторами. Например, Номенклатура.{ДР.Экспедитор}.ГоловнойКонтрагент.{КИ.Телефон}.
// 	 *Значение - Строка - выражение с представлениями характеристик. Например, Номенклатура.[Главный экспедитор].ГоловнойКонтрагент.Телефон.
//
Функция ВыраженияСПредставлениямиХарактеристикДляОнлайнПроверки(ВыраженияСИдентификаторами, СхемаКомпоновки = Неопределено) Экспорт
	
	СоответствияВыражений = Новый Соответствие;
	
	СвойстваХарактеристик = РаботаСФормуламиПовтИсп.СвойстваПоддерживаемыхИсточниковХарактеристик();
	
	// В зависимости от свойства УникальностьИмениВПределахВсейТаблицыХарактеристик бывают характеристики,
	// где один идентификатор характеристики представляет один объект базы данных (и соответственно представление),
	// и бывают характеристики (как контактная информация), где один идентификатор уникален только в рамках своего набора.
	// Например, идентификатор "ДополнительныйТелефон" может быть для контрагентов и организаций, и у объектов БД может быть
	// разное представление.
	// Выполняем проверку на наличие разных элементов с разным представлением. Парсинг по схеме компоновки
	// выполняем в крайнем случае из-за высоких накладных расходов.
	
	ТаблицаВыражений = Новый ТаблицаЗначений();
	ТаблицаВыражений.Колонки.Добавить("МетаданныеИсточникаХарактеристик");
	ТаблицаВыражений.Колонки.Добавить("ВыражениеХарактеристики", Новый ОписаниеТипов("Строка"));
	ТаблицаВыражений.Колонки.Добавить("ПутьДоХарактеристики", Новый ОписаниеТипов("Строка"));
	
	Для Каждого ВыражениеСИдентификаторами Из ВыраженияСИдентификаторами Цикл
		Если СтрНайти(ВыражениеСИдентификаторами, "{") = 0 Тогда
			// Нет характеристик.
			СоответствияВыражений.Вставить(ВыражениеСИдентификаторами, ВыражениеСИдентификаторами);
		Иначе
			
			ЧастиОперанда = РаботаСФормуламиКлиентСервер.ЧастиОперанда(ВыражениеСИдентификаторами);
			ПутьДоХарактеристики = "";
			Для Каждого ЧастьОперанда Из ЧастиОперанда Цикл
				Если СтрНайти(ЧастьОперанда, "{") = 1 Тогда
					МетаданныеХарактеристики = СвойстваХарактеристики(ЧастьОперанда).Метаданные;
					СвойстваХарактеристики = СвойстваХарактеристик.Найти(МетаданныеХарактеристики, "МетаданныеИсточника");
					
					СтрокаВыражения = ТаблицаВыражений.Добавить();
					СтрокаВыражения.МетаданныеИсточникаХарактеристик = СвойстваХарактеристики.МетаданныеИсточника;
					СтрокаВыражения.ВыражениеХарактеристики = ЧастьОперанда;
					СтрокаВыражения.ПутьДоХарактеристики = ПутьДоХарактеристики;
					
				КонецЕсли;
				ПутьДоХарактеристики = ПутьДоХарактеристики + ?(ПутьДоХарактеристики = "", "", ".") + ЧастьОперанда;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаВыражений.Количество() > 0 Тогда
		ТаблицаВыражений.Свернуть("МетаданныеИсточникаХарактеристик, ВыражениеХарактеристики, ПутьДоХарактеристики");
		
		ТаблицаВыражений.Колонки.Добавить("НеобходимПарсинг", Новый ОписаниеТипов("Булево"));
		ТаблицаВыражений.Колонки.Добавить("ПредставлениеХарактеристики", Новый ОписаниеТипов("Строка"));
		
		ТаблицаВыражений.Индексы.Добавить("МетаданныеИсточникаХарактеристик");
		ТаблицаВыражений.Индексы.Добавить("ВыражениеХарактеристики");
		
		// Получение уникальных представлений характеристик по идентификаторам.
		Для Каждого СвойстваХарактеристики Из СвойстваХарактеристик Цикл
			Поиск = Новый Структура("МетаданныеИсточникаХарактеристик", СвойстваХарактеристики.МетаданныеИсточника);
			СтрокиВидаХарактеристик = ТаблицаВыражений.НайтиСтроки(Поиск);
			Если СтрокиВидаХарактеристик.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			Идентификаторы = Новый Массив;
			Для Каждого СтрокаТаблицы Из СтрокиВидаХарактеристик Цикл
				Если Идентификаторы.Найти(СтрокаТаблицы.ВыражениеХарактеристики) = Неопределено Тогда
					Идентификаторы.Добавить(СтрокаТаблицы.ВыражениеХарактеристики);
				КонецЕсли;
			КонецЦикла;
			
			Запрос = Новый Запрос;
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	&ВыражениеИдентификатор КАК Идентификатор,
			|	ПРЕДСТАВЛЕНИЕ(Таблица.Ссылка) КАК Представление
			|ИЗ
			|	&ИсточникХарактеристик КАК Таблица
			|ГДЕ
			|	&ВыражениеИдентификатор В (&Идентификаторы)
			|ИТОГИ ПО
			|	Идентификатор";
			
			ИсточникХарактеристик = РаботаСФормуламиПовтИсп.ПолноеИмяТаблицыДанных(
				СвойстваХарактеристики.МетаданныеИсточника.ПолноеИмя());
			ВыражениеИдентификатор = ВыражениеПолногоИдентификатораХарактеристики(СвойстваХарактеристики.МетаданныеИсточника, Ложь);
			ВыражениеИдентификатор = СтрЗаменить(ВыражениеИдентификатор, "%ИмяТаблицы%", "Таблица");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИсточникХарактеристик", ИсточникХарактеристик);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВыражениеИдентификатор", ВыражениеИдентификатор);
			
			Запрос.Текст = ТекстЗапроса;
			Запрос.УстановитьПараметр("Идентификаторы", Идентификаторы);
			
			ВыборкаИдентификатор = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Идентификатор");
			Пока ВыборкаИдентификатор.Следующий() Цикл
				Идентификатор = ВыборкаИдентификатор.Идентификатор;
				ЕстьМножествоПредставлений = Ложь;
				ПредставлениеХарактеристики = "";
				ВыборкаПредставления = ВыборкаИдентификатор.Выбрать();
				Пока ВыборкаПредставления.Следующий() Цикл
					ПредставлениеХарактеристики = ВыборкаПредставления.Представление;
					Прервать;
				КонецЦикла;
				Если НЕ СвойстваХарактеристики.УникальностьИмениВПределахВсейТаблицыХарактеристик Тогда
					ЕстьМножествоПредставлений = (ВыборкаПредставления.Количество() > 1);
					Если ЕстьМножествоПредставлений Тогда
						ПредставлениеХарактеристики = "";
					КонецЕсли;
				КонецЕсли;
				
				СтрокиТаблицыВыражений = ТаблицаВыражений.НайтиСтроки(Новый Структура("ВыражениеХарактеристики", Идентификатор));
				Для Каждого СтрокаТаблицы Из СтрокиТаблицыВыражений Цикл
					СтрокаТаблицы.ПредставлениеХарактеристики = ПредставлениеХарактеристики;
					СтрокаТаблицы.НеобходимПарсинг = ЕстьМножествоПредставлений;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		// Получение представлений характеристик, в случае если представления не уникальны.
		ТаблицаВыражений.Сортировать("НеобходимПарсинг, ПутьДоХарактеристики");
		
		ВыраженияТребующиеПарсинга = ТаблицаВыражений.НайтиСтроки(Новый Структура("НеобходимПарсинг", Истина));
		Если ВыраженияТребующиеПарсинга.Количество() > 0
			И ТипЗнч(СхемаКомпоновки) = Тип("СхемаКомпоновкиДанных") Тогда
			// Оптимизация парсинга. Хранит представления характеристик, вычисленные при парсинге.
			КэшПредставленийХарактеристик = Новый Соответствие();
			// Оптимизация парсинга. Хранит ближайший рассчитанный тип.
			КэшТиповПутьДоХарактеристик = Новый Соответствие;
			
			Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
			Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки));
			Компоновщик.ЗагрузитьНастройки(СхемаКомпоновки.НастройкиПоУмолчанию);
			Компоновщик.Настройки.Отбор.Элементы.Очистить();
			
			Для Каждого СтрокаТаблицы Из ВыраженияТребующиеПарсинга Цикл
				ПолныйПутьХарактеристики = СтрокаТаблицы.ПутьДоХарактеристики + "." + СтрокаТаблицы.ВыражениеХарактеристики;
				ПредставлениеХарактеристики = КэшПредставленийХарактеристик.Получить(ПолныйПутьХарактеристики);
				Если ЗначениеЗаполнено(ПредставлениеХарактеристики) Тогда
					СтрокаТаблицы.ПредставлениеХарактеристики = ПредставлениеХарактеристики;
					СтрокаТаблицы.НеобходимПарсинг = Ложь;
					Продолжить;
				КонецЕсли;
				
				ЧастиПути = РаботаСФормуламиКлиентСервер.ЧастиОперанда(СтрокаТаблицы.ПутьДоХарактеристики);
				// Попытка найти ближайший закэшированный тип данных.
				КоличествоПопытокПоиска = ЧастиПути.Количество();
				БлижайшийНайденныйПуть = "";
				ОписаниеТиповПоБлижайшемуПути = Неопределено;
				Для НомерПопытки = 1 По КоличествоПопытокПоиска Цикл
					ПутьТекущейПопытки = "";
					Для Сч = 0 По КоличествоПопытокПоиска - НомерПопытки Цикл
						ПутьТекущейПопытки = ПутьТекущейПопытки + ?(ПутьТекущейПопытки = "", "", ".") + ЧастиПути[Сч];
					КонецЦикла;
					ОписаниеТиповПоБлижайшемуПути = КэшТиповПутьДоХарактеристик.Получить(ПутьТекущейПопытки);
					Если НЕ ОписаниеТиповПоБлижайшемуПути = Неопределено Тогда
						БлижайшийНайденныйПуть = ПутьТекущейПопытки;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если БлижайшийНайденныйПуть = "" Тогда
					// Обращение к полю СКД первого уровня (это не может быть характеристика).
					// Сразу в кэшируемые поля добавляются все поля первого уровня.
					БлижайшийНайденныйПуть = ЧастиПути[0];
					Для Каждого ДоступноеПоле Из Компоновщик.Настройки.Выбор.ДоступныеПоляВыбора.Элементы Цикл
						Если ДоступноеПоле.Папка ИЛИ ДоступноеПоле.Таблица Тогда
							Продолжить;
						КонецЕсли;
						Путь = Строка(ДоступноеПоле.Поле);
						Если КэшТиповПутьДоХарактеристик.Получить(Путь) = Неопределено Тогда
							КэшТиповПутьДоХарактеристик.Вставить(Путь, ДоступноеПоле.ТипЗначения);
						КонецЕсли;
						Если Путь = ЧастиПути[0] Тогда
							ОписаниеТиповПоБлижайшемуПути = ДоступноеПоле.ТипЗначения;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Если БлижайшийНайденныйПуть = "" Тогда
					// Схема компоновки изменена и не содержит прежнего пути.
					СтрокаТаблицы.ПредставлениеХарактеристики = СтрокаТаблицы.ВыражениеХарактеристики;
					СтрокаТаблицы.НеобходимПарсинг = Ложь;
				КонецЕсли;
				Пока СтрокаТаблицы.НеобходимПарсинг Цикл
					
					СхемаПоТипу = СхемаКомпоновкиПолученияРеквизитовПоТипуЗначения(ОписаниеТиповПоБлижайшемуПути);
					Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных();
					Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаПоТипу));
					
					ПараметрыДобавленияСтрок = ПараметрыДобавленияСтрокиПоПолюКомпоновки();
					ПараметрыДобавленияСтрок.ТипЗначенияПоляРодителя = ОписаниеТиповПоБлижайшемуПути;
					ПараметрыДобавленияСтрок.УдаляемыйПрефиксИдентификатора = "Реквизит";
					// Программно генерируемая СКД, у поля "Реквизит" нет представления на пользовательский язык.
					ПараметрыДобавленияСтрок.УдаляемыйПрефиксПредставления = "Реквизит";
					
					// Получение представлений характеристик.
					СлужебноеПолеРеквизита = Неопределено;
					Для Каждого ДоступноеПоле Из Компоновщик.Настройки.ДоступныеПоляВыбора.Элементы Цикл
						Если НЕ ДоступноеПоле.Папка
							И НЕ ДоступноеПоле.Таблица
							И Строка(ДоступноеПоле.Поле) = "Реквизит" Тогда
							СлужебноеПолеРеквизита = ДоступноеПоле;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					СледующийШагНайден = Ложь;
					Если НЕ СлужебноеПолеРеквизита = Неопределено Тогда
						// Ссылочный тип.
						СписокСТипамиИПредставлениями = ОтсортированныйСписокПолейКомпоновки(СлужебноеПолеРеквизита.Элементы,
							ПараметрыДобавленияСтрок);
						Для Каждого ЭлементСписка Из СписокСТипамиИПредставлениями Цикл
							ДоступноеПоле = ЭлементСписка.Значение.Поле;
							ИдентификаторНовойСтроки = ИдентификаторСтрокиПоляКомпоновки(ДоступноеПоле, ПараметрыДобавленияСтрок);
							ПредставлениеПоля = ЭлементСписка.Представление;
							ТипЗначенияСтроки = ЭлементСписка.Значение.ТипЗначения; // тип с возможным переопределением типа.
							ЭтоХарактеристика = ЭлементСписка.Значение.ЭтоХарактеристика;
							
							Путь = БлижайшийНайденныйПуть + "." + ИдентификаторНовойСтроки;
							КэшТиповПутьДоХарактеристик.Вставить(Путь, ТипЗначенияСтроки);
							
							Если ЭтоХарактеристика Тогда
								КэшПредставленийХарактеристик.Вставить(Путь, ПредставлениеПоля);
							КонецЕсли;
							Если ПолныйПутьХарактеристики = Путь Тогда
								СледующийШагНайден = Истина;
								БлижайшийНайденныйПуть = Путь;
								ОписаниеТиповПоБлижайшемуПути = ТипЗначенияСтроки;
								
								СтрокаТаблицы.ПредставлениеХарактеристики = ПредставлениеПоля;
								СтрокаТаблицы.НеобходимПарсинг = Ложь;
							Иначе
								СтрокаПоиска = Путь + ".";
								Если СтрНайти(ПолныйПутьХарактеристики, СтрокаПоиска) = 1 Тогда
									СледующийШагНайден = Истина;
									БлижайшийНайденныйПуть = Путь;
									ОписаниеТиповПоБлижайшемуПути = ТипЗначенияСтроки;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					Если НЕ СледующийШагНайден Тогда
						// Схема компоновки изменена или изменен идентификатор характеристики.
						СтрокаТаблицы.ПредставлениеХарактеристики = "";
						СтрокаТаблицы.НеобходимПарсинг = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		НаправлениеСортировкиКолонки = "УБЫВ";
		ТаблицаВыражений.Сортировать("ПутьДоХарактеристики" + " " + НаправлениеСортировкиКолонки);
		
		Для Каждого ВыражениеСИдентификаторами Из ВыраженияСИдентификаторами Цикл
			
			// Выражение содержало характеристик и не было помещено в соответствие ранее.
			ВыражениеСодержитХарактеристики = (СоответствияВыражений.Получить(ВыражениеСИдентификаторами) = Неопределено);
			Если ВыражениеСодержитХарактеристики Тогда
				
				НовоеЗначениеВыражения = ВыражениеСИдентификаторами;
				Для Каждого СтрокаПредставлений Из ТаблицаВыражений Цикл
					Если ЗначениеЗаполнено(СтрокаПредставлений.ПредставлениеХарактеристики) Тогда
						ПолныйПутьКХарактеристике = СтрокаПредставлений.ПутьДоХарактеристики + "." + СтрокаПредставлений.ВыражениеХарактеристики;
						Если СтрНайти(НовоеЗначениеВыражения, ПолныйПутьКХарактеристике) = 1 Тогда
							Если НЕ ЗначениеЗаполнено(СтрокаПредставлений.ПредставлениеХарактеристики) Тогда
								// Не удалось распарсить характеристику.
								ПредставлениеХарактеристики = СтрокаПредставлений.ВыражениеХарактеристики;
							Иначе
								ПредставлениеХарактеристики = ПредставлениеХарактеристикиВВыраженииСКД(
									СтрокаПредставлений.ПредставлениеХарактеристики);
							КонецЕсли;
							НовоеЗначениеВыражения = Сред(НовоеЗначениеВыражения, 1, СтрДлина(СтрокаПредставлений.ПутьДоХарактеристики + "."))
								+ ПредставлениеХарактеристики + Сред(НовоеЗначениеВыражения, СтрДлина(ПолныйПутьКХарактеристике) + 1);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				СоответствияВыражений.Вставить(ВыражениеСИдентификаторами, НовоеЗначениеВыражения);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СоответствияВыражений;
	
КонецФункции

#КонецОбласти

#Область ПолучениеДанныхДляФормул

// Вычисляет значения выражений операндов для таблицы значений. Возвращает таблицу данных с добавленными колонками результатов вычислений.
// Колонки таблицы данных должны быть типизированы.
// 
// Параметры:
// 	ТаблицаДанных - ТаблицаЗначений - Таблица данных, содержащая произвольное количество типизированных колонок.
// 	ВыраженияВычисления - Соответствие - Выражение (операнд) вычисления и имя колонки результата. В зависимости
// 				от контекста выполнения формулы указываются все выражения (операнды), которые можно вычислить
// 				по данным таблицы данных:
// 	 * Ключ - Строка - Выражение вычисления в формате операнда формулы.
// 	 			Например, "Номенклатура.{ДР.Экспедитор}.ГоловнойКонтрагент.{КИ.Телефон}".
// 	 			Если выражение вычисления начинается с определенной колонки, например "Номенклатура", то данная колонка
// 	 			должна быть в таблице данных.
// 	 * Значение - Строка - Имя колонки, в которую будет помещен результат вычисления выражения.
// 	ИменаКолонокХарактеристик - Неопределено, Соответствие - если выражение вычисления начинается с характеристики,
// 				то необходимо указать имя колонки, в которой содержится соответствующие значения характеристик.
// 				Например, при вычислении наименования новой не записанной в базу номенклатуры,
// 				значения операндов могут рассчитываться из заполненных в карточке товара дополнительных реквизитов:
// 		* Ключ - Строка - Часть операнда, выражение характеристики в формате формул. Например "{ДР.ОсновнаяНоменклатураСписания}".
// 		* Значение - Строка - Имя колонки в таблице источников вычисления.
// 	ВыполнятьПроверкуВыражений - Булево - Флаг, указывающий, нужно ли проводить полную проверку выражений.
// 				Если полная проверка всего выражения не проводится, то это может сэкономить время на парсинге выражений
// 				(предполагается, что выражения указаны корректно), что может быть критично для механизмов, используемых
// 				в транзакции. Если полная проверка всего выражения не проводится, то выражения парсятся только для
// 				получения типов, для которых указана характеристика или для получения представления характеристики.
// 				Если полная проверка всего выражения проводится, то все выражение проверяется на корректность
// 				не зависимо от наличия в нем характеристик.
// 	
// Возвращаемое значение:
// 	Структура - структура со свойствами:
// * ТаблицаРезультатов - ТаблицаЗначений - Таблица, содержащая колонки таблицы источников вычислений и колонки результатов вычислений:
// 	 ** ИндексСтроки - Число - колонка индекса строки. Если она отсутствует в таблице источников, то будет добавлена.
// * ЕстьОшибки - Булево - Флаг наличия ошибок при преобразовании выражений.
// * СообщенияОшибокПреобразования - Соответствие - Сообщения ошибок преобразования, при их наличии:
//    ** Ключ - Строка - Исходное выражение, для которого зарегистрирована ошибка.
//    ** Значение - Строка - Текст сообщения об ошибке.
//
Функция ПолучитьДанныеОперандовДляТаблицыДанных(ТаблицаДанных, ВыраженияВычисления, ИменаКолонокХарактеристик = Неопределено,
			ВыполнятьПроверкуВыражений = Ложь) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ТаблицаРезультатов", Неопределено);
	Результат.Вставить("ЕстьОшибки", Ложь);
	Результат.Вставить("СообщенияОшибокПреобразования", Новый Соответствие);
	
	Если ТаблицаДанных.Колонки.Найти("ИндексСтроки") = Неопределено Тогда
		ОписаниеТипаИндекс = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный));
		ТаблицаДанных.Колонки.Добавить("ИндексСтроки", ОписаниеТипаИндекс);
		ТекущееЗначениеИндекса = 0;
		Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
			СтрокаТаблицы.ИндексСтроки = ТекущееЗначениеИндекса;
			ТекущееЗначениеИндекса = ТекущееЗначениеИндекса + 1;
		КонецЦикла;
	КонецЕсли;
	
	ТекстОшибки = "";
	ИменаИспользуемыхКолонок = Новый Массив;
	НачальныеПроверкиПолученияДанных(ТаблицаДанных,
		ВыраженияВычисления,
		ИменаКолонокХарактеристик,
		ИменаИспользуемыхКолонок,
		ТекстОшибки);
		
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		Результат.ЕстьОшибки = Истина;
		Для Каждого ИсходноеВыражение Из ВыраженияВычисления Цикл
			Результат.СообщенияОшибокПреобразования.Вставить(ИсходноеВыражение, ТекстОшибки);
		КонецЦикла;
		
		Возврат Результат;
	КонецЕсли;
	
	ИменаКолонокРезультатовПоВыражениям = Новый Соответствие;
	МассивВыражений = Новый Массив;
	Для Каждого ВыражениеИИмяКолонки Из ВыраженияВычисления Цикл
		ИсходноеВыражение = ВыражениеИИмяКолонки.Ключ;
		ИмяКолонкиРезультата = ВыражениеИИмяКолонки.Значение;
		Если ТипЗнч(ИменаКолонокХарактеристик) = Тип("Соответствие") Тогда
			Для Каждого ХарактеристикаИИмяКолонки Из ИменаКолонокХарактеристик Цикл
				ВыражениеХарактеристики = ХарактеристикаИИмяКолонки.Ключ;
				ИмяКолонки = ХарактеристикаИИмяКолонки.Значение;
				Если СтрНачинаетсяС(ИсходноеВыражение, ВыражениеХарактеристики) Тогда
					ОстатокИсходногоВыражения = Сред(ИсходноеВыражение, СтрДлина(ВыражениеХарактеристики) + 1);
					ИсходноеВыражение = ИмяКолонки + ?(ОстатокИсходногоВыражения = "", "", ".") + ОстатокИсходногоВыражения;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		МассивВыражений.Добавить(ИсходноеВыражение);
		ИменаКолонокРезультатовПоВыражениям.Вставить(ИсходноеВыражение, ИмяКолонкиРезультата);
	КонецЦикла;
	
	
	СхемаКомпоновки = КомпоновкаДанныхСервер.ПустаяСхема();
	НаборДанных = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(СхемаКомпоновки,
		Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"),
		"ТаблицаДанных");
	Если ИменаИспользуемыхКолонок.Найти("ИндексСтроки") = Неопределено Тогда
		НовоеПоле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		НовоеПоле.Поле = "ИндексСтроки";
		НовоеПоле.ПутьКДанным = "ИндексСтроки";
		НовоеПоле.ТипЗначения = ТаблицаДанных.Колонки["ИндексСтроки"].ТипЗначения;
	КонецЕсли;
	Для Каждого ИмяКолонкиТаблицы Из ИменаИспользуемыхКолонок Цикл
		КолонкаТаблицыДанных = ТаблицаДанных.Колонки[ИмяКолонкиТаблицы];
		
		НовоеПоле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		НовоеПоле.Поле = ИмяКолонкиТаблицы;
		НовоеПоле.ПутьКДанным = ИмяКолонкиТаблицы;
		НовоеПоле.ТипЗначения = КолонкаТаблицыДанных.ТипЗначения;
	КонецЦикла;
	
	
	РезультатПреобразования = ДанныеДляПолученияВыраженийФормулЧерезСКД(СхемаКомпоновки,
		МассивВыражений, ВыполнятьПроверкуВыражений);
	
	Если РезультатПреобразования.ЕстьОшибки Тогда
		Результат.ЕстьОшибки = РезультатПреобразования.ЕстьОшибки;
		Результат.СообщенияОшибокПреобразования = РезультатПреобразования.СообщенияОшибокПреобразования;
		
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого ИсходноеВыражениеИЗамена Из РезультатПреобразования.ПреобразованныеВыражения Цикл
		ИсходноеВыражение = ИсходноеВыражениеИЗамена.Ключ;
		ПреобразованноеВыражение = ИсходноеВыражениеИЗамена.Значение;
		ИмяКолонкиРезультата = ИменаКолонокРезультатовПоВыражениям.Получить(ИсходноеВыражение);
		
		ВычисляемоеПоле = СхемаКомпоновки.ВычисляемыеПоля.Добавить();
		ВычисляемоеПоле.ПутьКДанным = ИмяКолонкиРезультата;
		ВычисляемоеПоле.Выражение = ПреобразованноеВыражение;
	КонецЦикла;
	
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновки.НастройкиПоУмолчанию);
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьГруппировку(Настройки);
	Для Каждого ПолеНабора Из НаборДанных.Поля Цикл
		КомпоновкаДанныхКлиентСервер.ДобавитьВыбранноеПоле(Настройки, ПолеНабора.Поле);
	КонецЦикла;
	Для Каждого ВычисляемоеПоле Из СхемаКомпоновки.ВычисляемыеПоля Цикл
		КомпоновкаДанныхКлиентСервер.ДобавитьВыбранноеПоле(Настройки, ВычисляемоеПоле.ПутьКДанным);
	КонецЦикла;
	ЭлементПорядка = Настройки.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	ЭлементПорядка.Использование = Истина;
	ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных("ИндексСтроки");
	ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
	
	ВнешниеНаборы = Новый Структура;
	ВнешниеНаборы.Вставить("ТаблицаДанных", ТаблицаДанных);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновки, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ТаблицаРезультатов = Новый ТаблицаЗначений();
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборы,,Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаРезультатов);
	ТаблицаРезультатов = ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	
	Результат.ТаблицаРезультатов = ТаблицаРезультатов;
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру параметров для получения данных через СКД, а также, выполняет корректировку СКД
// (если для получения выражений используются только наборы данных запросы, то по указанным выражениям вычисляются
// все типы данных, для которых указаны характеристики указывается в текстах соответствующих наборов запросов
// текст переопределения получения характеристик на языке расширения запросов (ограниченное количество типов,
// т.к. указание переопределения характеристик для всех возможных типов не оптимально).
// В случае, если для вычисления выражений используются наборы объекты, то выражения преобразуются с использованием
// представлений характеристик на языке текущего пользователя.
// 
// Параметры:
// 	СхемаКомпоновки - СхемаКомпоновкиДанных - Схема компоновки, используемая для получения данных.
// 	ИсходныеВыражения - Массив из Строка - Массив исходных выражений в формате написания формул.
// 				Например, "Номенклатура.{ДР.ОсновнойПоставщикТовара}.{КИ.Телефон}".
// 	ВыполнятьПроверкуВыражений - Булево - Флаг, указывающий, нужно ли проводить полную проверку выражений.
// 				Если полная проверка всего выражения не проводится, то это может сэкономить время на парсинге выражений
// 				(предполагается, что выражения указаны корректно), что может быть критично для механизмов, используемых
// 				в транзакции. Если полная проверка всего выражения не проводится, то выражения парсятся только для
// 				получения типов, для которых указана характеристика или для получения представления характеристики.
// 				Если полная проверка всего выражения проводится, то все выражение проверяется на корректность
// 				не зависимо от наличия в нем характеристик.
// 	ИспользоватьТолькоПредставленияХарактеристик - Булево - Настройка позволяет принудительно включить преобразование
// 				характеристик к представлению на языке текущего пользователя. Бывает полезна для механизм, где критична
// 				производительность механизма получения данных (например, выполнение в транзакции), т.к. парсинг
// 				выражения с целью получения типов данных занимает время. Если Истина будет выполнена замена характеристик
// 				на представления не зависимо от того, какие наборы данных используются в схеме компоновки.
// Возвращаемое значение:
// 	Структура - Описание:
// * ПреобразованныеВыражения - Соответствие - Результат преобразования выражений.
// 		*Ключ - Строка - Исходное выражение.
// 		*Значение - Строка - Результат преобразования для СКД. В случае, если для вычисления выражений
// 			используются только наборы запросы, то, например, "Номенклатура.[[ДР.ОсновнойПоставщикТовара]]].[[КИ.Телефон]]]".
// 			Если для вычисления выражений используются также наборы объекты, то выражение преобразуется с использованием
// 			представлений. Например, "Номенклатура.[Основной поставщик товара (Обувь)].Телефон".
// * ЕстьОшибки - Булево - Флаг наличия ошибок при преобразовании выражений.
// * СообщенияОшибокПреобразования - Соответствие - Сообщения ошибок преобразования, при их наличии:
//    **Ключ - Строка - Исходное выражение, для которого зарегистрирована ошибка.
//    **Значение - Строка - Текст сообщения об ошибке.
// * СхемаКомпоновкиИзменена - Булево - Флаг, указывающий, что схема компоновки изменена (в наборы данных запросы
//   			добавлено переопределение получения характеристик на языке расширения запросов.
//
Функция ДанныеДляПолученияВыраженийФормулЧерезСКД(СхемаКомпоновки, ИсходныеВыражения, ВыполнятьПроверкуВыражений = Ложь,
				ИспользоватьТолькоПредставленияХарактеристик = Ложь) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ПреобразованныеВыражения", Новый Соответствие);
	Результат.Вставить("ЕстьОшибки", Ложь);
	Результат.Вставить("СообщенияОшибокПреобразования", Новый Соответствие);
	Результат.Вставить("СхемаКомпоновкиИзменена", Ложь);
	
	ВыраженияДляПроверки = Новый Массив;
	
	Для Каждого ИсходноеВыражение Из ИсходныеВыражения Цикл
		ВыражениеСодержитХарактеристики = (СтрНайти(ИсходноеВыражение, "{") > 0);
		Если НЕ ВыражениеСодержитХарактеристики 
			И НЕ ВыполнятьПроверкуВыражений Тогда
			// Выражение выполняется как есть, без дальнейших проверок.
			Результат.ПреобразованныеВыражения.Вставить(ИсходноеВыражение, ИсходноеВыражение);
		Иначе
			ВыраженияДляПроверки.Добавить(ИсходноеВыражение);
		КонецЕсли;
	КонецЦикла;
	
	Если ВыраженияДляПроверки.Количество() > 0 Тогда
		
		ЕстьНаборыОбъекты = Ложь;
		
		ИспользуемыеНаборыДанных = ИспользуемыеНаборыДанныхСхемыКомпоновки(СхемаКомпоновки,
			ВыраженияДляПроверки);
		
		ИменаПолейСРодителями = Новый Массив;
		
		Для Каждого НаборДанныхИПоля Из ИспользуемыеНаборыДанных Цикл
			НаборДанных = НаборДанныхИПоля.Ключ;
			ПараметрыИспользованияНабора = НаборДанныхИПоля.Значение;
			ПоляНабора = ПараметрыИспользованияНабора.ПоляНабора;
			НаборДанныхИспользуетсяВВыраженияхХарактеристик = ПараметрыИспользованияНабора.НаборДанныхИспользуетсяВВыраженияхХарактеристик;
			
			Если НаборДанныхИспользуетсяВВыраженияхХарактеристик
				И ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъектСхемыКомпоновкиДанных") Тогда
				ЕстьНаборыОбъекты = Истина;
			КонецЕсли;
			Для Каждого ПутьКДаннымПоля Из ПоляНабора Цикл
				Если (СтрНайти(ПутьКДаннымПоля, ".") > 0)
					И (ИменаПолейСРодителями.Найти(ПутьКДаннымПоля) = Неопределено) Тогда
					ИменаПолейСРодителями.Добавить(ПутьКДаннымПоля);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// При проверке родителей поля будет использоваться первое подошедшее максимальное значение.
		СортировкаИменПолей = Новый СписокЗначений();
		СортировкаИменПолей.ЗагрузитьЗначения(ИменаПолейСРодителями);
		СортировкаИменПолей.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
		
		ИменаПолейСРодителями = СортировкаИменПолей.ВыгрузитьЗначения();
		
		ПараметрыПроверкиВыражений = Новый Структура;
		ПараметрыПроверкиВыражений.Вставить("СхемаКомпоновки", СхемаКомпоновки);
		ПараметрыПроверкиВыражений.Вставить("ИменаПолейСРодителями", ИменаПолейСРодителями);
		ПараметрыПроверкиВыражений.Вставить("ТипыДляПереопределенияХарактеристик", Новый Массив);
		ПараметрыПроверкиВыражений.Вставить("ВыраженияДляПроверки", ВыраженияДляПроверки);
		ПараметрыПроверкиВыражений.Вставить("ВыполнятьПроверкуВыражений", ВыполнятьПроверкуВыражений);
		
		Если ЕстьНаборыОбъекты ИЛИ ИспользоватьТолькоПредставленияХарактеристик Тогда
			
			// Для вычисления полей с характеристиками и используются (по крайней мере, в том числе) наборы-объекты.
			// 
			// Если бы использовался только один набор данных-объект, можно было бы добавить служебный набор данных
			// объединение запросов и настроить соединение по ссылке между наборами. Но т.к. в общем случае
			// количество наборов данных и связи между ними не известны, то используется метод подстановки
			// представлений в качестве характеристик.
			// 
			// Т.к. метаданные (кнопка характеристики на закладке данные) не предполагает указания полей для идентификаторов,
			// механизм схемы компоновки данных по умолчанию в качестве идентификатора характеристики использует
			// представление характеристики. Причем именно представление на языке текущего пользователя
			// (которое можно переопределить программно), а не поля, например, Наименование.
			// ==> Если вместо идентификаторов в формате {ПрефиксВидаХарактеристики.ИдентификаторХарактеристики}
			// подставить представление на языке текущего пользователя, то механизм схемы компоновки получит данные.
			// 		Если представление простое, не содержит спецсимволов и его можно указать как реквизит, то
			// 		представление должно быть указано как реквизит. Например, Заказ.Экспедитор, где Экспедитор - представление.
			// 		Если представление сложное, то оно указывается в квадратных скобках, например, Заказ.[Основной экспедитор].
			// В подстановке представления есть сложность. Представление характеристики должно быть уникальным для
			// всех характеристик (поддерживаемых и не поддерживаемых) которые подходят для одного объекта метаданных.
			// Подходящие характеристики для объекта метаданных определяются с учетом отбора характеристик, указанного
			// в метаданных. Например, если есть поле составного типа (справочники Контрагенты и Организации), то для
			// них можно указать представление характеристики "Телефон" (разные виды контактной информации, но в рамках
			// одного объекта метаданных представление "Телефон" будет уникальным. Однако, нельзя указать дополнительный
			// реквизит с представлением "Телефон", если для объекта метаданных указана контактная информация и
			// есть подходящий вид контактной информации с таким же представлением.
			
			ПараметрыПроверкиВыражений.Вставить("ПреобразованиеХарактеристикКПредставлению", Истина);
			
			ВыполнениеПроверкиИПреобразованияВыражений(ПараметрыПроверкиВыражений, Результат);
			
		Иначе
			
			// Для вычисления полей с характеристиками используются наборы данных-запросы.
			// Значит в текстах наборов данных-запросов при помощи языка расширений запросов можно переопределить
			// идентификаторы характеристик.
			// ==> Парсятся выражения, определяются типы значений, для которых необходимо переопределение
			// на языке расширения запросов, составляется текст переопределения методом ОписаниеХарактеристикСКДДляОписанияТипов
			// и данный текст вставляется в текст запросов (текст на языке расширения запросов не является текстом самого
			// запроса, поэтому длину текста можно не контролировать).
			// Сами выражения на данный момент нужно тоже преобразовывать, заменив фигурные скобки на квадратные
			// в формате {ПрефиксВидаХарактеристики.ИдентификаторХарактеристики} --> [[ПрефиксВидаХарактеристики.ИдентификаторХарактеристики]]]
			// (третья закрывающая скобка является служебной для механизма парсинга выражения схемы компоновки).
			
			ПараметрыПроверкиВыражений.Вставить("ПреобразованиеХарактеристикКПредставлению", Ложь);
			
			ВыполнениеПроверкиИПреобразованияВыражений(ПараметрыПроверкиВыражений, Результат);
				
			Если ПараметрыПроверкиВыражений.ТипыДляПереопределенияХарактеристик.Количество() > 0 Тогда
				
				ОписаниеТипов = Новый ОписаниеТипов(ПараметрыПроверкиВыражений.ТипыДляПереопределенияХарактеристик);
				ТекстХарактеристик = ОписаниеХарактеристикСКДДляОписанияТипов(ОписаниеТипов);
				
				Для Каждого НаборДанныхИПоля Из ИспользуемыеНаборыДанных Цикл
					ПараметрыИспользованияНабора = НаборДанныхИПоля.Значение;
					НаборДанныхИспользуетсяВВыраженияхХарактеристик = ПараметрыИспользованияНабора.НаборДанныхИспользуетсяВВыраженияхХарактеристик;
					Если НаборДанныхИспользуетсяВВыраженияхХарактеристик Тогда
						НаборДанныхЗапрос = НаборДанныхИПоля.Ключ;
						НаборДанныхЗапрос.Запрос = НаборДанныхЗапрос.Запрос + Символы.ПС + Символы.ПС + ТекстХарактеристик;
					КонецЕсли;
				КонецЦикла;
				
				Результат.СхемаКомпоновкиИзменена = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПолучениеДанныхДляФормул

Функция ПредставлениеХарактеристикиВВыраженииСКД(ПредставлениеХарактеристики)
	ПредставлениеХарактеристикиВСКД = ПредставлениеХарактеристики;
	
	СпецСимволы = РаботаСФормуламиКлиентСервер.СпецСимволы();
	
	СодержитСпецсимволы = Ложь;
	Для НомСимвола = 1 По СтрДлина(СпецСимволы) Цикл
		Символ = Сред(СпецСимволы, НомСимвола, 1);
		Если СтрНайти(ПредставлениеХарактеристики, Символ) > 0 Тогда
			СодержитСпецсимволы = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если СодержитСпецсимволы Тогда
		ПредставлениеХарактеристикиВСКД = "[" + ПредставлениеХарактеристики + "]";
	КонецЕсли;
	
	Возврат ПредставлениеХарактеристикиВСКД;
КонецФункции

// Выполняет начальную проверку переданной таблицы данных и заполняет список используемых колонок.
// 
// Параметры:
// 	ТаблицаДанных - ТаблицаЗначений - 
// 	ВыраженияВычисления - Соответствие - 
// 	ИменаКолонокХарактеристик - Неопределено, Соответствие -
// 	ИменаКолонокХарактеристик - Массив из Строка - 
// 	ТекстОшибок - Строка - 
//
Процедура НачальныеПроверкиПолученияДанных(ТаблицаДанных, ВыраженияВычисления, ИменаКолонокХарактеристик,
			ИменаИспользуемыхКолонок, ТекстОшибок = "")
	
	Для Каждого ВыражениеИИмяКолонкиРезультата Из ВыраженияВычисления Цикл
		
		Выражение = ВыражениеИИмяКолонкиРезультата.Ключ;
		ЧастиОперанда = РаботаСФормуламиКлиентСервер.ЧастиОперанда(Выражение);
		ПерваяЧастьОперанда = ЧастиОперанда[0];
		ЭтоХарактеристика  = (СтрНайти(ПерваяЧастьОперанда, "{") > 0);
		
		// Начальные проверки. Присутствие колонки в таблице
		ИмяКолонкиТаблицы = Неопределено;
		Если ЭтоХарактеристика И НЕ ИменаКолонокХарактеристик = Неопределено Тогда
			ИмяКолонкиТаблицы = ИменаКолонокХарактеристик.Получить(ПерваяЧастьОперанда);
		ИначеЕсли НЕ ЭтоХарактеристика ИЛИ ИменаКолонокХарактеристик = Неопределено Тогда
			ИмяКолонкиТаблицы = ПерваяЧастьОперанда;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ИмяКолонкиТаблицы) Тогда
			ТекстОшибок = НСтр("ru = 'Необходимо указать имя колонки таблицы для характеристики ""%1"".'");
			ТекстОшибок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибок, ПерваяЧастьОперанда);
			Возврат;
		КонецЕсли;
		КолонкаТаблицы = ТаблицаДанных.Колонки.Найти(ИмяКолонкиТаблицы);
		Если КолонкаТаблицы = Неопределено Тогда
			ТекстОшибок = НСтр("ru = 'В таблице источников отсутствует колонка с именем ""%1"".'");
			ТекстОшибок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибок, ИмяКолонкиТаблицы);
			Возврат;
		КонецЕсли;
		
		ОписаниеТипов = КолонкаТаблицы.ТипЗначения;
		Если ОписаниеТипов.Типы().Количество() = 0 Тогда
			ТекстОшибок = НСтр("ru = 'Колонка таблицы ""%1"" не типизирована, получение данных не возможно.'");
			ТекстОшибок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибок, ИмяКолонкиТаблицы);
			Возврат;
		КонецЕсли;
		
		Если ИменаИспользуемыхКолонок.Найти(ИмяКолонкиТаблицы) = Неопределено Тогда
			ИменаИспользуемыхКолонок.Добавить(ИмяКолонкиТаблицы);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнениеПроверкиИПреобразованияВыражений(ПараметрыПроверкиВыражений, СтруктураРезультата)
	
	СхемаКомпоновки = ПараметрыПроверкиВыражений.СхемаКомпоновки;
	ИменаПолейСРодителями = ПараметрыПроверкиВыражений.ИменаПолейСРодителями;
	ПреобразованиеХарактеристикКПредставлению = ПараметрыПроверкиВыражений.ПреобразованиеХарактеристикКПредставлению;
	ТипыДляПереопределенияХарактеристик = ПараметрыПроверкиВыражений.ТипыДляПереопределенияХарактеристик;
	ВыраженияДляПроверки = ПараметрыПроверкиВыражений.ВыраженияДляПроверки;
	ВыполнятьПроверкуВыражений = ПараметрыПроверкиВыражений.ВыполнятьПроверкуВыражений;
	СообщенияОшибокПреобразования = СтруктураРезультата.СообщенияОшибокПреобразования; // Соответствие -
	СвойстваИсточниковХарактеристик = РаботаСФормуламиПовтИсп.СвойстваПоддерживаемыхИсточниковХарактеристик();
	
	КомпоновщикИсходнаяСхема = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикИсходнаяСхема.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки));
	
	КэшТиповВыражений = Новый Соответствие;
	КешИсточниковХарактеристик = Новый Соответствие;
	КэшПредставленийХарактеристик = Новый Соответствие;
	
	ПараметрыУказанияХарактеристик = ПолучитьПараметрыУказанияХарактеристикВВыражениях(ВыраженияДляПроверки,
		ПараметрыПроверкиВыражений,
		СтруктураРезультата,
		СвойстваИсточниковХарактеристик);
	ПараметрыУникальныхХарактеристик = ПараметрыУказанияХарактеристик.ПараметрыУникальныхХарактеристик;
	ВыраженияСОшибками = ПараметрыУказанияХарактеристик.ВыраженияСОшибками;
	ВыраженияСНеУникальнымиХарактеристиками = ПараметрыУказанияХарактеристик.ВыраженияСНеУникальнымиХарактеристиками;
	СоответствияИменСтандартныхРеквизитов = РаботаСФормуламиПовтИсп.СоответствияИменСтандартныхРеквизитов();
	
	Для Каждого ИсходноеВыражение Из ВыраженияДляПроверки Цикл
		
		СтруктураРезультата.ПреобразованныеВыражения.Вставить(ИсходноеВыражение, "");
		
		Если НЕ ВыраженияСОшибками.Получить(ИсходноеВыражение) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПарситьВыражение = ВыполнятьПроверкуВыражений
			ИЛИ НЕ ПреобразованиеХарактеристикКПредставлению
			ИЛИ ВыраженияСНеУникальнымиХарактеристиками.Найти(ИсходноеВыражение) <> Неопределено;
		
		ЕстьОшибкиПреобразованияВыражения = Ложь;
		ВыражениеЗамены = Неопределено;
		
		Если НЕ ПарситьВыражение Тогда
			
			ВыражениеЗамены = ИсходноеВыражение;
			Для Каждого ИдентификаторХарактеристикиИПараметры Из ПараметрыУникальныхХарактеристик Цикл
				ИдентификаторХарактеристики = ИдентификаторХарактеристикиИПараметры.Ключ;
				ПараметрыХарактеристики = ИдентификаторХарактеристикиИПараметры.Значение;
				ПредставлениеХарактеристики = ПредставлениеХарактеристикиВВыраженииСКД(
					ПараметрыХарактеристики.Представление);
				ВыражениеЗамены = СтрЗаменить(ВыражениеЗамены, ИдентификаторХарактеристики, ПредставлениеХарактеристики);
			КонецЦикла;
			
		Иначе
		
			Если ВыполнятьПроверкуВыражений Тогда
				// Парсинг всего выражения целиком.
				ПроверяемаяЧастьВыражения = ИсходноеВыражение;
			Иначе
				// Парсинг выражения с целью подставить представление характеристики. Доходим
				// до последней характеристики, включая ее.
				НомерПозиции = СтрНайти(ИсходноеВыражение, "}", НаправлениеПоиска.СКонца);
			
				Если НомерПозиции = 0 Тогда
					// Парсинг выражения не осуществляется, т.к. не содержит характеристик и не нужна проверка всего выражения.
					ПроверяемаяЧастьВыражения = "";
				Иначе
					// Парсинг выражения до последней характеристики, с целью определить
					// типы данных, которым может соответствовать характеристика или установить нужное представление.
					ПроверяемаяЧастьВыражения = Сред(ИсходноеВыражение, 1, НомерПозиции);
				КонецЕсли;
			КонецЕсли;
			
			Если ПустаяСтрока(ПроверяемаяЧастьВыражения) Тогда
				
				// Не требуется полная проверка выражения и нет характеристик.
				ВыражениеЗамены = ИсходноеВыражение;
				
			Иначе
				
				ВыражениеЗамены = "";
				
				// Проверка на использование сложного пути к данным (через группу или другой элемент).
				ПолеСУчетомРодителя = "";
				Для Каждого ИмяПоляСРодителями Из ИменаПолейСРодителями Цикл
					Если СтрНачинаетсяС(ИсходноеВыражение, ИмяПоляСРодителями) Тогда
						СледующийСимвол = Сред(ИсходноеВыражение, СтрДлина(ИмяПоляСРодителями) + 1, 1);
						Если СледующийСимвол = "." ИЛИ СледующийСимвол = "" Тогда
							ПолеСУчетомРодителя = ИмяПоляСРодителями;
							Прервать;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				Если ПустаяСтрока(ПолеСУчетомРодителя) Тогда
					ОстатокВыражения = ИсходноеВыражение;
				Иначе
					ОстатокВыражения = Сред(ИсходноеВыражение, СтрДлина(ПолеСУчетомРодителя + ".") + 1);
				КонецЕсли;
				
				ЧастиВыражения = РаботаСФормуламиКлиентСервер.ЧастиОперанда(ОстатокВыражения,, Ложь);
				Если ПустаяСтрока(ПолеСУчетомРодителя) Тогда
					НакопленныйПуть = ЧастиВыражения[0];
					ЧастиВыражения.Удалить(0);
				Иначе
					НакопленныйПуть = ПолеСУчетомРодителя;
				КонецЕсли;
				
				
				// В начале выражения не может быть характеристики, т.к. характеристика всегда принадлежит
				// какому-либо объекту (полю в запросе или колонке таблицы). Поэтому ищем по исходной схеме компоновки
				// поле, с учетом, что для поля может быть задан сложный путь к данным.
				ТипПоля = КэшТиповВыражений.Получить(НакопленныйПуть);
				Если ТипПоля = Неопределено Тогда
					ПолеСКД = КомпоновкаДанныхСервер.НайтиПолеСКДПоПолномуИмени(
						КомпоновщикИсходнаяСхема.Настройки.Выбор.ДоступныеПоляВыбора.Элементы,
						НакопленныйПуть);
					Если ПолеСКД = Неопределено Тогда
						ЕстьОшибкиПреобразованияВыражения = Истина;
						
						ТекстСообщения = НСтр("ru = 'Не найдено поле %1 в выражении %2. Проверьте корректность выражения.'");
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
							НакопленныйПуть, ИсходноеВыражение);
						СообщенияОшибокПреобразования.Вставить(ИсходноеВыражение, ТекстСообщения);
					Иначе
						ТипПоля = ПолеСКД.Тип;
						КэшТиповВыражений.Вставить(НакопленныйПуть, ТипПоля);
					КонецЕсли;
				КонецЕсли;
				Если ЕстьОшибкиПреобразованияВыражения Тогда
					Продолжить;
				Иначе
					ВыражениеЗамены = НакопленныйПуть;
				КонецЕсли;
				
				Пока НЕ ЕстьОшибкиПреобразованияВыражения
					И ЧастиВыражения.Количество() > 0
					И ПроверяемаяЧастьВыражения <> НакопленныйПуть Цикл
					
					ЧастьВыражения = ЧастиВыражения[0];
					ЧастиВыражения.Удалить(0);
					
					ЭтоХарактеристика = (СтрНайти(ЧастьВыражения, "{") > 0);
					Если ЭтоХарактеристика И НЕ ПреобразованиеХарактеристикКПредставлению Тогда
						ДополнитьТипыДляПереопределенияХарактеристик(ТипыДляПереопределенияХарактеристик,
							ТипПоля);
					КонецЕсли;
					
					ТекущееВыражение = НакопленныйПуть + "." + ЧастьВыражения;
					
					Если ЭтоХарактеристика Тогда
						ПараметрыУникальнойХарактеристики = ПараметрыУникальныхХарактеристик.Получить(ЧастьВыражения);
						Если НЕ ПараметрыУникальнойХарактеристики = Неопределено Тогда
							ТипТекущегоВыражения = ПараметрыУникальнойХарактеристики.ТипЗначения;
							Представление = ПараметрыУникальнойХарактеристики.Представление;
							Если НЕ ПреобразованиеХарактеристикКПредставлению Тогда
								ВыражениеЗамены = ВыражениеЗамены + "." + МодифицированноеВыражениеОперандаДляСКД(ЧастьВыражения);
							Иначе
								ВыражениеЗамены = ВыражениеЗамены + "." + ПредставлениеХарактеристикиВВыраженииСКД(Представление);
							КонецЕсли;
						Иначе
							// Не уникальное представление характеристики и ПреобразованиеХарактеристикКПредставлению = Истина.
							
							ПараметрыДополнения = Новый Структура;
							ПараметрыДополнения.Вставить("КэшТиповВыражений", КэшТиповВыражений);
							ПараметрыДополнения.Вставить("КэшПредставленийХарактеристик", КэшПредставленийХарактеристик);
							ПараметрыДополнения.Вставить("КешИсточниковХарактеристик", КешИсточниковХарактеристик);
							ПараметрыДополнения.Вставить("СвойстваИсточниковХарактеристик", СвойстваИсточниковХарактеристик);
							ПараметрыДополнения.Вставить("НакопленныйПуть", НакопленныйПуть);
							ПараметрыДополнения.Вставить("ВыражениеХарактеристики", ЧастьВыражения);
							ПараметрыДополнения.Вставить("ИсходноеВыражение", ИсходноеВыражение);
								
							ДополнитьВыражениеЗаменыПредставлениемХарактеристики(ВыражениеЗамены,
								ПараметрыДополнения,
								ЕстьОшибкиПреобразованияВыражения,
								СообщенияОшибокПреобразования);
								
							ТипТекущегоВыражения = КэшТиповВыражений.Получить(ТекущееВыражение);
						КонецЕсли;
							
					Иначе
						ТипТекущегоВыражения = КэшТиповВыражений.Получить(ТекущееВыражение);
						Если ТипТекущегоВыражения = Неопределено Тогда
							МассивНайденныхТипов = Новый Массив;
							Типы = ТипПоля.Типы();
							Для Каждого Тип Из Типы Цикл
								ОбъектМД = Метаданные.НайтиПоТипу(Тип);
								Если ОбъектМД = Неопределено Тогда
									Продолжить;
								КонецЕсли;
								Если ОбщегоНазначения.ЭтоПеречисление(ОбъектМД) Тогда
									Продолжить;
								КонецЕсли;
								РеквизитНайден = Ложь;
								Реквизит = ОбъектМД.Реквизиты.Найти(ЧастьВыражения);
								Если НЕ Реквизит = Неопределено Тогда
									РеквизитНайден = Истина;
									ТипыРеквизита = Реквизит.Тип.Типы();
									Для Каждого ТипРеквизита Из ТипыРеквизита Цикл
										Если МассивНайденныхТипов.Найти(ТипРеквизита) = Неопределено Тогда
											МассивНайденныхТипов.Добавить(ТипРеквизита);
										КонецЕсли;
									КонецЦикла;
								КонецЕсли;
								Если НЕ РеквизитНайден Тогда
									Для Каждого Реквизит Из ОбъектМД.СтандартныеРеквизиты Цикл
										Если Реквизит.Имя = ЧастьВыражения
											ИЛИ СоответствияИменСтандартныхРеквизитов.Получить(Реквизит.Имя) = ЧастьВыражения Тогда
											РеквизитНайден = Истина;
											ТипыРеквизита = Реквизит.Тип.Типы();
											Для Каждого ТипРеквизита Из ТипыРеквизита Цикл
												Если МассивНайденныхТипов.Найти(ТипРеквизита) = Неопределено Тогда
													МассивНайденныхТипов.Добавить(ТипРеквизита);
												КонецЕсли;
											КонецЦикла;
											Прервать;
										КонецЕсли;
									КонецЦикла;
								КонецЕсли;
							КонецЦикла;
							Если МассивНайденныхТипов.Количество() = 0 Тогда
								ЕстьОшибкиПреобразованияВыражения = Истина;
								
								ТекстСообщения = НСтр("ru = 'Не найдено поле %1 в выражении %2. Проверьте корректность выражения.'");
								ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
									НакопленныйПуть, ИсходноеВыражение);
								СообщенияОшибокПреобразования.Вставить(ИсходноеВыражение, ТекстСообщения);
							Иначе
								ТипТекущегоВыражения = Новый ОписаниеТипов(МассивНайденныхТипов);
							КонецЕсли;
							
						КонецЕсли;
						
						ВыражениеЗамены = ВыражениеЗамены + "." + ЧастьВыражения;
						
						Если НЕ ЕстьОшибкиПреобразованияВыражения Тогда
							КэшТиповВыражений.Вставить(ТекущееВыражение, ТипТекущегоВыражения);
						КонецЕсли;
						
					КонецЕсли;
					Если НЕ ЕстьОшибкиПреобразованияВыражения Тогда
						КэшТиповВыражений.Вставить(ТекущееВыражение, ТипТекущегоВыражения);
					КонецЕсли;
					
					ТипПоля = ТипТекущегоВыражения;
					НакопленныйПуть = ТекущееВыражение;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЕстьОшибкиПреобразованияВыражения Тогда
			СтруктураРезультата.ПреобразованныеВыражения.Вставить(ИсходноеВыражение, ВыражениеЗамены);
		КонецЕсли;
		
		Если ЕстьОшибкиПреобразованияВыражения Тогда
			СтруктураРезультата.ЕстьОшибки = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьПараметрыУказанияХарактеристикВВыражениях(ВыраженияДляПроверки, ПараметрыПроверкиВыражений,
				СтруктураРезультата, СвойстваИсточниковХарактеристик)
	
	ПараметрыУказанияХарактеристик = Новый Структура;
	
	СообщенияОшибокПреобразования = СтруктураРезультата.СообщенияОшибокПреобразования;
	ПреобразованиеХарактеристикКПредставлению = ПараметрыПроверкиВыражений.ПреобразованиеХарактеристикКПредставлению;
	
	КонтрольПредставлений = ПреобразованиеХарактеристикКПредставлению;
	
	// Характеристики, у которых свойство УникальностьИмениВПределахВсейТаблицыХарактеристик = Истина. Например, доп. реквизиты.
	ПараметрыУникальныхХарактеристик = Новый Соответствие;
	ВыраженияСНеУникальнымиХарактеристиками = Новый Массив;
	ВыраженияСОшибками = Новый Соответствие;
	
	ИдентификаторыХарактеристикПоВидам = Новый Соответствие;
	Для Каждого ИсходноеВыражение Из ВыраженияДляПроверки Цикл
		Если СтрНайти(ИсходноеВыражение, "{") = 0 Тогда
			Продолжить;
		КонецЕсли;
		ВыражениеСодержитОшибкиПарсинга = Ложь;
		ДлинаВыражения = СтрДлина(ИсходноеВыражение);
		
		Для Каждого ОписаниеИсточника Из СвойстваИсточниковХарактеристик Цикл
			МетаданныеИсточника = ОписаниеИсточника.МетаданныеИсточника;
			
			ТегНачала = "{" + ОписаниеИсточника.ПрефиксТипаВидаХарактеристик;
			ДлинаТегаНачала = СтрДлина(ТегНачала);
			ТегОкончания = "}";
			
			ПроверкиВыполнены = Ложь;
			НомерПозиции = 0;
			Пока НЕ ПроверкиВыполнены И НЕ ВыражениеСодержитОшибкиПарсинга Цикл
				НомерПозиции = СтрНайти(ИсходноеВыражение, ТегНачала,, НомерПозиции + 1);
				Если НомерПозиции = 0 Тогда
					ПроверкиВыполнены = Истина;
					Прервать;
				Иначе
					НомерПозицииОкончания = СтрНайти(ИсходноеВыражение, ТегОкончания,, НомерПозиции + ДлинаТегаНачала);
					Если НомерПозицииОкончания = 0 Тогда
						СтруктураРезультата.ЕстьОшибки = Истина;
						ВыраженияСОшибками.Вставить(ИсходноеВыражение, Истина);
						
						ТекстСообщения = НСтр("ru = 'Ошибка парсинга выражения ""%1"". Не найден тег окончания характеристики.'");
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
							ИсходноеВыражение);
						СообщенияОшибокПреобразования.Вставить(ИсходноеВыражение, ТекстСообщения);
						Прервать;
					КонецЕсли;
					ПолныйИдентификатор = Сред(ИсходноеВыражение, НомерПозиции, НомерПозицииОкончания - НомерПозиции + 1);
					ДлинаИдентификатора = НомерПозицииОкончания - (НомерПозиции + ДлинаТегаНачала);
					ИдентификаторХарактеристики = Сред(ИсходноеВыражение, НомерПозиции + ДлинаТегаНачала, ДлинаИдентификатора);
					
					
					ТаблицаИдентификаторов = ИдентификаторыХарактеристикПоВидам.Получить(МетаданныеИсточника);
					Если ТаблицаИдентификаторов = Неопределено Тогда
						ОписаниеТипаИдентификатора = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(1000, ДопустимаяДлина.Переменная));
						ТаблицаИдентификаторов = Новый ТаблицаЗначений;
						ТаблицаИдентификаторов.Колонки.Добавить("ИдентификаторПоля", ОписаниеТипаИдентификатора);
						ТаблицаИдентификаторов.Колонки.Добавить("ЗначениеПоляИмени", ОписаниеТипаИдентификатора);
					КонецЕсли;
					СтрокаИдентификатора = ТаблицаИдентификаторов.Добавить();
					СтрокаИдентификатора.ИдентификаторПоля = ПолныйИдентификатор;
					СтрокаИдентификатора.ЗначениеПоляИмени = ИдентификаторХарактеристики;
					
					ИдентификаторыХарактеристикПоВидам.Вставить(МетаданныеИсточника, ТаблицаИдентификаторов);
					
					НомерПозиции = НомерПозицииОкончания + 1;
					Если НомерПозиции > ДлинаВыражения Тогда
						ПроверкиВыполнены = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если ВыражениеСодержитОшибкиПарсинга Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ХарактеристикиСОшибками = Новый Соответствие;
	НеУникальныеХарактеристики = Новый Массив;
	Для Каждого ВидХарактеристикИИдентификаторы Из ИдентификаторыХарактеристикПоВидам Цикл
		МетаданныеИсточника = ВидХарактеристикИИдентификаторы.Ключ;
		ТаблицаИдентификаторов = ВидХарактеристикИИдентификаторы.Значение;
		ТаблицаИдентификаторов.Свернуть("ИдентификаторПоля, ЗначениеПоляИмени");
		
		СвойстваИсточникаХарактеристик = СвойстваИсточниковХарактеристик.Найти(МетаданныеИсточника, "МетаданныеИсточника");
		ТаблицаБД = РаботаСФормуламиПовтИсп.ПолноеИмяТаблицыДанных(
			СвойстваИсточникаХарактеристик.МетаданныеИсточника.ПолноеИмя());
		
		Запрос = Новый Запрос;
		Текст =
		"ВЫБРАТЬ
		|	ИдентификаторыХарактеристик.ИдентификаторПоля КАК ИдентификаторПоля,
		|	ИдентификаторыХарактеристик.ЗначениеПоляИмени КАК ЗначениеПоляИмени
		|ПОМЕСТИТЬ ИдентификаторыХарактеристик
		|ИЗ
		|	&ИдентификаторыХарактеристик КАК ИдентификаторыХарактеристик
		|;
		|
		|ВЫБРАТЬ
		|	ИдентификаторыХарактеристик.ИдентификаторПоля КАК ИдентификаторПоля,
		|	ИдентификаторыХарактеристик.ЗначениеПоляИмени КАК ЗначениеПоляИмени,
		|	ТаблицаВидовХарактеристик.Ссылка КАК Ссылка,
		|	&ВыражениеПредставленияХарактеристики КАК ПредставлениеХарактеристики,
		|	&ВыражениеТипЗначения КАК ТипЗначения
		|ИЗ
		|	ИдентификаторыХарактеристик КАК ИдентификаторыХарактеристик
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	#ИмяТаблицыИсточникаХарактеристик КАК ТаблицаВидовХарактеристик
		|ПО
		|	&ВыражениеСоединенияТаблиц
		|
		|ИТОГИ
		|	МАКСИМУМ(ЗначениеПоляИмени) КАК ЗначениеПоляИмени
		|ПО
		|	ИдентификаторПоля";
		
		ВыражениеСоединенияТаблиц = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"ИдентификаторыХарактеристик.ЗначениеПоляИмени = ТаблицаВидовХарактеристик.%1",
			СвойстваИсточникаХарактеристик.ПолеИдентификатора);
		Если СвойстваИсточникаХарактеристик.ИспользуетсяВыражениеТипаЗначений Тогда
			ВыражениеТипЗначения = СвойстваИсточникаХарактеристик.ВыражениеТипаЗначений;
		Иначе
			ВыражениеТипЗначения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"ТаблицаВидовХарактеристик.%1",
				СвойстваИсточникаХарактеристик.ПолеТипаЗначений);
		КонецЕсли;
		Если ПреобразованиеХарактеристикКПредставлению Тогда
			ВыражениеПредставленияХарактеристики = "ВЫБОР
			|		КОГДА НЕ ТаблицаВидовХарактеристик.Ссылка ЕСТЬ NULL
			|			ТОГДА ПРЕДСТАВЛЕНИЕ(ТаблицаВидовХарактеристик.Ссылка)
			|		ИНАЧЕ """"
			|	КОНЕЦ";
		Иначе
			ВыражениеПредставленияХарактеристики = """""";
		КонецЕсли;
			
		Текст = СтрЗаменить(Текст, "#ИмяТаблицыИсточникаХарактеристик", ТаблицаБД);
		Текст = СтрЗаменить(Текст, "&ВыражениеСоединенияТаблиц", ВыражениеСоединенияТаблиц);
		Текст = СтрЗаменить(Текст, "&ВыражениеТипЗначения", ВыражениеТипЗначения);
		Текст = СтрЗаменить(Текст, "&ВыражениеПредставленияХарактеристики", ВыражениеПредставленияХарактеристики);
		
		Запрос.Текст = Текст;
		Запрос.УстановитьПараметр("ИдентификаторыХарактеристик", ТаблицаИдентификаторов);
		
		ВыборкаИдентификатор = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ИдентификаторПоля");
		Пока ВыборкаИдентификатор.Следующий() Цикл
			ИдентификаторПоля = ВыборкаИдентификатор.ИдентификаторПоля;
			ЗначениеПоляИмени = ВыборкаИдентификатор.ЗначениеПоляИмени;
			
			ВыборкаДетальные = ВыборкаИдентификатор.Выбрать();
			Если СвойстваИсточникаХарактеристик.УникальностьИмениВПределахВсейТаблицыХарактеристик
				И ВыборкаДетальные.Количество() > 1 Тогда
				ТекстСообщения = НСтр("ru = 'Не обеспечена уникальность характеристики по идентификатору ""%1""'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
					ЗначениеПоляИмени);
				
				ХарактеристикиСОшибками.Вставить(ИдентификаторПоля, ТекстСообщения);
				Продолжить;
			КонецЕсли;
			ТипДанныхХарактеристики = Неопределено;
			ПредставлениеХарактеристики = Неопределено;
			
			ХарактеристикаНеУникальна = Ложь;
			ЕстьОшибкиВХарактеристике = Ложь;
			Пока ВыборкаДетальные.Следующий() Цикл
				Если НЕ ЗначениеЗаполнено(ВыборкаДетальные.Ссылка) Тогда
					ТекстСообщения = НСтр("ru = 'Не найдена характеристика по идентификатору ""%1""'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
						ЗначениеПоляИмени);
					
					ХарактеристикиСОшибками.Вставить(ИдентификаторПоля, ТекстСообщения);
					ЕстьОшибкиВХарактеристике = Истина;
					Прервать;
				КонецЕсли;
				ТипДанных = ВыборкаДетальные.ТипЗначения;
				Если ЗначениеЗаполнено(СвойстваИсточникаХарактеристик.ПереопределениеВыраженияТипаЗначений) Тогда
					ТипДанных = СвойстваИсточникаХарактеристик.ПереопределениеВыраженияТипаЗначений;
				КонецЕсли;
				Если КонтрольПредставлений
					И НЕ ПредставлениеХарактеристики = Неопределено
					И ПредставлениеХарактеристики <> ВыборкаДетальные.ПредставлениеХарактеристики Тогда
					ХарактеристикаНеУникальна = Истина;
					Прервать;
				КонецЕсли;
				ПредставлениеХарактеристики = ВыборкаДетальные.ПредставлениеХарактеристики;
				ТипДанныхХарактеристики = ТипДанных;
			КонецЦикла;
			
			Если НЕ ЕстьОшибкиВХарактеристике Тогда
				Если ХарактеристикаНеУникальна Тогда
					НеУникальныеХарактеристики.Добавить(ИдентификаторПоля);
				Иначе
					ПараметрыХарактеристики = Новый Структура;
					ПараметрыХарактеристики.Вставить("Представление", ПредставлениеХарактеристики);
					ПараметрыХарактеристики.Вставить("ТипЗначения", ТипДанныхХарактеристики);
					ПараметрыУникальныхХарактеристик.Вставить(ИдентификаторПоля, ПараметрыХарактеристики);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ИсходноеВыражение Из ВыраженияДляПроверки Цикл
		ЕстьОшибкиВВыражении = Ложь;
		Для Каждого ХарактеристикаИТекстОшибки Из ХарактеристикиСОшибками Цикл
			ИдентификаторХарактеристики = ХарактеристикаИТекстОшибки.Ключ;
			ТекстОшибки = ХарактеристикаИТекстОшибки.Значение;
			НомерПозиции = СтрНайти(ИсходноеВыражение, ИдентификаторХарактеристики);
			Если НомерПозиции > 0 Тогда
				ВыраженияСОшибками.Вставить(ИсходноеВыражение, Истина);
				СообщенияОшибокПреобразования.Вставить(ИсходноеВыражение, ТекстОшибки);
				СтруктураРезультата.ЕстьОшибки = Истина;
				ЕстьОшибкиВВыражении = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЕстьОшибкиВВыражении Тогда
			Продолжить;
		КонецЕсли;
		ЕстьНеУникальныеХарактеристики = Ложь;
		Для Каждого ИдентификаторХарактеристики Из НеУникальныеХарактеристики Цикл
			НомерПозиции = СтрНайти(ИсходноеВыражение, ИдентификаторХарактеристики);
			Если НомерПозиции > 0 Тогда
				ЕстьНеУникальныеХарактеристики = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЕстьНеУникальныеХарактеристики Тогда
			ВыраженияСНеУникальнымиХарактеристиками.Добавить(ИсходноеВыражение);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыУказанияХарактеристик.Вставить("ПараметрыУникальныхХарактеристик", ПараметрыУникальныхХарактеристик);
	ПараметрыУказанияХарактеристик.Вставить("ВыраженияСНеУникальнымиХарактеристиками", ВыраженияСНеУникальнымиХарактеристиками);
	ПараметрыУказанияХарактеристик.Вставить("ВыраженияСОшибками", ВыраженияСОшибками);
	
	Возврат ПараметрыУказанияХарактеристик;
	
КонецФункции

Процедура ДополнитьТипыДляПереопределенияХарактеристик(ТипыДляПереопределенияХарактеристик, ОписаниеТипов)
	
	Типы = ОписаниеТипов.Типы();
	Для Каждого Тип Из Типы Цикл
		Если ОбщегоНазначения.ЭтоСсылка(Тип) Тогда
			Если ТипыДляПереопределенияХарактеристик.Найти(Тип) = Неопределено Тогда
				ТипыДляПереопределенияХарактеристик.Добавить(Тип);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьВыражениеЗаменыПредставлениемХарактеристики(ВыражениеЗамены, ПараметрыДополнения,
				ЕстьОшибкиПреобразованияВыражения, СообщенияОшибокПреобразования)
	
	КэшТиповВыражений = ПараметрыДополнения.КэшТиповВыражений;
	КэшПредставленийХарактеристик = ПараметрыДополнения.КэшПредставленийХарактеристик;
	КешИсточниковХарактеристик = ПараметрыДополнения.КешИсточниковХарактеристик;
	СвойстваИсточниковХарактеристик = ПараметрыДополнения.СвойстваИсточниковХарактеристик;
	НакопленныйПуть = ПараметрыДополнения.НакопленныйПуть;
	ВыражениеХарактеристики = ПараметрыДополнения.ВыражениеХарактеристики;
	ИсходноеВыражение = ПараметрыДополнения.ИсходноеВыражение;
	
	ВыражениеСХарактеристикой = НакопленныйПуть + "." + ВыражениеХарактеристики;
	Выражения = КэшПредставленийХарактеристик.Получить(ВыражениеСХарактеристикой);
	
	Если Выражения = Неопределено Тогда
		ТипПоляВладельцаХарактеристики = КэшТиповВыражений.Получить(НакопленныйПуть);
		Выражения = ПолучитьПредставленияХарактеристикиДляОбъектовТипа(ТипПоляВладельцаХарактеристики,
			ВыражениеХарактеристики, СвойстваИсточниковХарактеристик, КешИсточниковХарактеристик);
		КэшПредставленийХарактеристик.Вставить(ВыражениеСХарактеристикой, Выражения);
	КонецЕсли;
	Если Выражения.Количество() = 0 Тогда
		ЕстьОшибкиПреобразованияВыражения = Истина;
		ТекстСообщения = НСтр("ru = 'Не найдено характеристики с идентификатором %1 в выражении %2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
			ВыражениеХарактеристики, ВыражениеСХарактеристикой);
		СообщенияОшибокПреобразования.Вставить(ИсходноеВыражение, ТекстСообщения);
	ИначеЕсли Выражения.Количество() = 1 Тогда
		Для Каждого ОписаниеТиповИПредставление Из Выражения Цикл
			Представление = ОписаниеТиповИПредставление.Значение;
			ВыражениеЗамены = ВыражениеЗамены + "." + ПредставлениеХарактеристикиВВыраженииСКД(Представление);
		КонецЦикла;
	
	Иначе
		// Контактная информация предполагает возможность нескольких представлений.
		// Т.к. тип значения контактной информации - строка (представление), то после нее
		// выражений быть не может.
		НовоеВыражениеЗамены = "";
		Для Каждого ОписаниеТиповИПредставление Из Выражения Цикл
			Представление = ОписаниеТиповИПредставление.Значение;
			ОписаниеТипов = ОписаниеТиповИПредставление.Ключ;
			ПредставлениеВСКД = ПредставлениеХарактеристикиВВыраженииСКД(Представление);
			Типы = ОписаниеТипов.Типы();
			ВыражениеЗаменыТипов = "";
			Для Каждого Тип Из Типы Цикл
				ОбъектМД = ОбъектМетаданныхПоТипуЗначения(Тип);
				ВидОбъектаМД = ВидОбъектаМетаданных(ОбъектМД);
				Если ВыражениеЗаменыТипов = "" Тогда
					ВыражениеЗаменыТипов = "КОГДА" + " ";
				Иначе
					ВыражениеЗаменыТипов = ВыражениеЗаменыТипов + Символы.ПС + " " + "ИЛИ" + " ";
				КонецЕсли;
				ВыражениеЗаменыТипов = ВыражениеЗаменыТипов + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"ТИПЗНАЧЕНИЯ(%1) = ТИП(""%2"")",
					ВыражениеЗамены,
					ВидОбъектаМД + "." + ОбъектМД.Имя);
			КонецЦикла;
			ВыражениеЗаменыТипов = ВыражениеЗаменыТипов + " " + Символы.ПС + Символы.Таб
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"ТОГДА %1",
					ВыражениеЗамены + "." + ПредставлениеВСКД);
			НовоеВыражениеЗамены = НовоеВыражениеЗамены + ?(НовоеВыражениеЗамены = "", "", Символы.ПС + " ")
				+ ВыражениеЗаменыТипов;
		КонецЦикла;
		НовоеВыражениеЗамены = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"ВЫБОР
			|	%1
			|КОНЕЦ",
			НовоеВыражениеЗамены);
		ВыражениеЗамены = НовоеВыражениеЗамены;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗапросСвойствХарактеристикПоОбъектамМетаданных(ОписаниеТипов, СвойстваИсточниковХарактеристик, КешИсточниковХарактеристик,
			ВыражениеХарактеристики = "", ОтборПоНаборамДополнительныхРеквизитов = Неопределено, ИспользоватьНаименованиеВместоПредставления = Ложь)
	
	Запрос = Новый Запрос;
	
	ШаблоныСоединенийТаблиц = Новый ТаблицаЗначений;
	ШаблоныСоединенийТаблиц.Колонки.Добавить("НомерШаблона");
	ШаблоныСоединенийТаблиц.Колонки.Добавить("ОписаниеИсточникаХарактеристик");
	
	ШаблоныСоединенийТаблиц.Колонки.Добавить("ВидыХарактеристик");
	ШаблоныСоединенийТаблиц.Колонки.Добавить("ПолеКлюча");
	ШаблоныСоединенийТаблиц.Колонки.Добавить("ПолеОтбораВидов");
	
	КвЧ = Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Любой);
	КвС = Новый КвалификаторыСтроки(1000, ДопустимаяДлина.Переменная);
	КвД = Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя);
	ОписаниеСсылочныхЗначений = ОбщегоНазначения.ОписаниеТипаВсеСсылки();
	ОписаниеТипаСтрока = Новый ОписаниеТипов("Строка",,,, КвС, КвД);
	ОписаниеТипаЧисло = Новый ОписаниеТипов("Число",,, КвЧ);
	ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
	ОписаниеТипаДата = Новый ОписаниеТипов("Булево",,,,, КвД);
	ФлагиИндексов = Новый Структура;
	ФлагиИндексов.Вставить("ЕстьСтроки", Ложь);
	ФлагиИндексов.Вставить("ЕстьЧисла", Ложь);
	ФлагиИндексов.Вставить("ЕстьБулево", Ложь);
	ФлагиИндексов.Вставить("ЕстьДаты", Ложь);
	ФлагиИндексов.Вставить("ЕстьСсылки", Ложь);
	
	
	ХарактеристикиОбъектовМетаданныхПоШаблонам = Новый ТаблицаЗначений;
	ХарактеристикиОбъектовМетаданныхПоШаблонам.Колонки.Добавить("ОписаниеТипаВладельцаХарактеристики",
		ОбщегоНазначения.ОписаниеТипаСтрока(1000));
	ХарактеристикиОбъектовМетаданныхПоШаблонам.Колонки.Добавить("НомерШаблона",
		ОбщегоНазначения.ОписаниеТипаЧисло(5, 0));
	ХарактеристикиОбъектовМетаданныхПоШаблонам.Колонки.Добавить("ЗначениеОтбораВидовСсылки", ОписаниеСсылочныхЗначений);
	ХарактеристикиОбъектовМетаданныхПоШаблонам.Колонки.Добавить("ЗначениеОтбораВидовСтрока", ОписаниеТипаСтрока);
	ХарактеристикиОбъектовМетаданныхПоШаблонам.Колонки.Добавить("ЗначениеОтбораВидовЧисло", ОписаниеТипаЧисло);
	ХарактеристикиОбъектовМетаданныхПоШаблонам.Колонки.Добавить("ЗначениеОтбораВидовБулево", ОписаниеТипаБулево);
	ХарактеристикиОбъектовМетаданныхПоШаблонам.Колонки.Добавить("ЗначениеОтбораВидовДата", ОписаниеТипаДата);
	
	ВыражениеУсловияПоИдентификатору = "";
	Если НЕ ПустаяСтрока(ВыражениеХарактеристики) Тогда
		Для Каждого ОписаниеИсточникаХарактеристик Из СвойстваИсточниковХарактеристик Цикл
			ИскомаяСтрока = "{" + ОписаниеИсточникаХарактеристик.ПрефиксТипаВидаХарактеристик;
			Если НЕ СтрНачинаетсяС(ВыражениеХарактеристики, ИскомаяСтрока) Тогда
				Продолжить;
			КонецЕсли;
		
			ИдентификаторХарактеристики = Сред(ВыражениеХарактеристики, СтрДлина(ИскомаяСтрока) + 1);
			ИдентификаторХарактеристики = Сред(ИдентификаторХарактеристики, 1, СтрДлина(ИдентификаторХарактеристики) -1);
			ВыражениеУсловияПоИдентификатору = "ТаблицаВидовХарактеристик.%1 = ""%2""";
			ВыражениеУсловияПоИдентификатору = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ВыражениеУсловияПоИдентификатору,
				ОписаниеИсточникаХарактеристик.ПолеИдентификатора,
				ИдентификаторХарактеристики);
			Прервать;
		КонецЦикла;
	КонецЕсли;
	
	Типы = ОписаниеТипов.Типы();
	Для Каждого Тип Из Типы Цикл
		ОбъектМД = ОбъектМетаданныхПоТипуЗначения(Тип);
		Если ОбъектМД = Неопределено Тогда
			Продолжить
		КонецЕсли;
		ВидОбъектаМД = ВидОбъектаМетаданных(ОбъектМД, Истина);
		Если ВидОбъектаМД = Неопределено Тогда
			// Перечисление не имеет реквизитов
			Продолжить;
		КонецЕсли;
		
		ВыражениеТипаИсточника = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1.%2",
			ВидОбъектаМД,
			ОбъектМД.Имя);
		
		ИсточникиХарактеристик = КешИсточниковХарактеристик.Получить(Тип);
		Если ИсточникиХарактеристик = Неопределено Тогда
			ИсточникиХарактеристик = Новый Соответствие;
			ЗаполнитьИспользуемыеИсточникиХарактеристик(ИсточникиХарактеристик,
				ОбъектМД, СвойстваИсточниковХарактеристик);
			КешИсточниковХарактеристик.Вставить(Тип, ИсточникиХарактеристик);
		КонецЕсли;
		
		Если ИсточникиХарактеристик.Количество() > 0 Тогда
			Для Каждого ОписаниеИсточникаХарактеристик Из СвойстваИсточниковХарактеристик Цикл
				Если ТипЗнч(ОтборПоНаборамДополнительныхРеквизитов) = Тип("Массив")
					И ОписаниеИсточникаХарактеристик.МетаданныеИсточника <> Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения Тогда
					Продолжить;
				КонецЕсли;
				
				ВключатьИсточникХарактеристикВЗапрос = Ложь;
				Если ПустаяСтрока(ВыражениеХарактеристики) Тогда
					ИсточникиТекущейХарактеристики = ИсточникиХарактеристик.Получить(ОписаниеИсточникаХарактеристик.МетаданныеИсточника);
					ВключатьИсточникХарактеристикВЗапрос = (ИсточникиТекущейХарактеристики <> Неопределено);
				Иначе
					ИскомаяСтрока = "{" + ОписаниеИсточникаХарактеристик.ПрефиксТипаВидаХарактеристик;
					Если СтрНачинаетсяС(ВыражениеХарактеристики, ИскомаяСтрока) Тогда
						ВключатьИсточникХарактеристикВЗапрос = Истина;
					КонецЕсли;
				КонецЕсли;
				Если ВключатьИсточникХарактеристикВЗапрос Тогда
					ИсточникиТекущейХарактеристики = ИсточникиХарактеристик.Получить(ОписаниеИсточникаХарактеристик.МетаданныеИсточника);
					
					Для Каждого ОписаниеХарактеристикиВМетаданных Из ИсточникиТекущейХарактеристики Цикл
						
						ПоискПоШаблону = Новый Структура;
						ПоискПоШаблону.Вставить("ВидыХарактеристик", ОписаниеХарактеристикиВМетаданных.ВидыХарактеристик);
						ПоискПоШаблону.Вставить("ПолеКлюча", ОписаниеХарактеристикиВМетаданных.ПолеКлюча);
						ПоискПоШаблону.Вставить("ПолеОтбораВидов", ОписаниеХарактеристикиВМетаданных.ПолеОтбораВидов);
						СтрокиШаблона = ШаблоныСоединенийТаблиц.НайтиСтроки(ПоискПоШаблону);
						Если СтрокиШаблона.Количество() = 0 Тогда
							СтрокаШаблона = ШаблоныСоединенийТаблиц.Добавить();
							НомерШаблона = ШаблоныСоединенийТаблиц.Количество();
							ЗаполнитьЗначенияСвойств(СтрокаШаблона, ОписаниеХарактеристикиВМетаданных);
							СтрокаШаблона.НомерШаблона = НомерШаблона;
							СтрокаШаблона.ОписаниеИсточникаХарактеристик = ОписаниеИсточникаХарактеристик;
							
						Иначе
							СтрокаШаблона = СтрокиШаблона[0];
							НомерШаблона = СтрокаШаблона.НомерШаблона;
						КонецЕсли;
						
						СтрокаОтбораПоТипуХарактеристик = ХарактеристикиОбъектовМетаданныхПоШаблонам.Добавить();
						СтрокаОтбораПоТипуХарактеристик.НомерШаблона = НомерШаблона;
						СтрокаОтбораПоТипуХарактеристик.ОписаниеТипаВладельцаХарактеристики = ВыражениеТипаИсточника;
						ТипОтбора = ТипЗнч(ОписаниеХарактеристикиВМетаданных.ЗначениеОтбораВидов);
						Если ТипОтбора = Тип("Строка") Тогда
							СтрокаОтбораПоТипуХарактеристик.ЗначениеОтбораВидовСтрока = ОписаниеХарактеристикиВМетаданных.ЗначениеОтбораВидов;
							ФлагиИндексов.ЕстьСтроки = Истина;
						ИначеЕсли ТипОтбора = Тип("Число") Тогда
							СтрокаОтбораПоТипуХарактеристик.ЗначениеОтбораВидовЧисло = ОписаниеХарактеристикиВМетаданных.ЗначениеОтбораВидов;
							ФлагиИндексов.ЕстьЧисла = Истина;
						ИначеЕсли ТипОтбора = Тип("Булево") Тогда
							СтрокаОтбораПоТипуХарактеристик.ЗначениеОтбораВидовБулево = ОписаниеХарактеристикиВМетаданных.ЗначениеОтбораВидов;
							ФлагиИндексов.ЕстьБулево = Истина;
						ИначеЕсли ТипОтбора = Тип("Дата") Тогда
							СтрокаОтбораПоТипуХарактеристик.ЗначениеОтбораВидовДата = ОписаниеХарактеристикиВМетаданных.ЗначениеОтбораВидов;
							ФлагиИндексов.ЕстьДаты = Истина;
						Иначе
							СтрокаОтбораПоТипуХарактеристик.ЗначениеОтбораВидовСсылки = ОписаниеХарактеристикиВМетаданных.ЗначениеОтбораВидов;
							ФлагиИндексов.ЕстьСсылки = Истина;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если ХарактеристикиОбъектовМетаданныхПоШаблонам.Количество() > 0 Тогда
		
		ТекстРазделителя = "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|";
		ТекстыЗапроса = Новый Массив;
		ТекстЗапроса = 
		"ВЫБРАТЬ
			|	ХарактеристикиОбъектовМетаданныхПоШаблонам.НомерШаблона КАК НомерШаблона,
			|	ХарактеристикиОбъектовМетаданныхПоШаблонам.ЗначениеОтбораВидовСсылки КАК ЗначениеОтбораВидовСсылки,
			|	ХарактеристикиОбъектовМетаданныхПоШаблонам.ЗначениеОтбораВидовСтрока КАК ЗначениеОтбораВидовСтрока,
			|	ХарактеристикиОбъектовМетаданныхПоШаблонам.ЗначениеОтбораВидовЧисло КАК ЗначениеОтбораВидовЧисло,
			|	ХарактеристикиОбъектовМетаданныхПоШаблонам.ЗначениеОтбораВидовБулево КАК ЗначениеОтбораВидовБулево,
			|	ХарактеристикиОбъектовМетаданныхПоШаблонам.ЗначениеОтбораВидовДата КАК ЗначениеОтбораВидовДата,
			|	ХарактеристикиОбъектовМетаданныхПоШаблонам.ОписаниеТипаВладельцаХарактеристики КАК ОписаниеТипаВладельцаХарактеристики
			|ПОМЕСТИТЬ ХарактеристикиОбъектовМетаданныхПоШаблонам
			|ИЗ
			|	&ХарактеристикиОбъектовМетаданныхПоШаблонам КАК ХарактеристикиОбъектовМетаданныхПоШаблонам
			|ИНДЕКСИРОВАТЬ ПО
			|	ХарактеристикиОбъектовМетаданныхПоШаблонам.НомерШаблона";
		Если ФлагиИндексов.ЕстьСсылки Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			|	ХарактеристикиОбъектовМетаданныхПоШаблонам.ЗначениеОтбораВидовСсылки";
		КонецЕсли;
		Если ФлагиИндексов.ЕстьСтроки Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			|	ХарактеристикиОбъектовМетаданныхПоШаблонам.ЗначениеОтбораВидовСтрока";
		КонецЕсли;
		Если ФлагиИндексов.ЕстьЧисла Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			|	ХарактеристикиОбъектовМетаданныхПоШаблонам.ЗначениеОтбораВидовЧисло";
		КонецЕсли;
		Если ФлагиИндексов.ЕстьБулево Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			|	ХарактеристикиОбъектовМетаданныхПоШаблонам.ЗначениеОтбораВидовБулево";
		КонецЕсли;
		Если ФлагиИндексов.ЕстьДаты Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			|	ХарактеристикиОбъектовМетаданныхПоШаблонам.ЗначениеОтбораВидовДата";
		КонецЕсли;
		
		Для Каждого ОписаниеШаблонаВыборки Из ШаблоныСоединенийТаблиц Цикл
			Текст = ТекстВыборкиСвойствХарактеристикПоШаблону(ОписаниеШаблонаВыборки,
				ФлагиИндексов,
				ВыражениеУсловияПоИдентификатору,
				ОтборПоНаборамДополнительныхРеквизитов,
				ИспользоватьНаименованиеВместоПредставления);
			ТекстыЗапроса.Добавить(Текст);
		КонецЦикла;
		
		ТекстЗапроса = ТекстЗапроса + "
		|;
		|
		|" + СтрСоединить(ТекстыЗапроса, ТекстРазделителя);
		
		Запрос.УстановитьПараметр("ХарактеристикиОбъектовМетаданныхПоШаблонам", ХарактеристикиОбъектовМетаданныхПоШаблонам);
		Запрос.УстановитьПараметр("НаборыДополнительныхРеквизитов", ОтборПоНаборамДополнительныхРеквизитов);
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	"""" КАК ОписаниеТипаВладельцаХарактеристики,
		|	НЕОПРЕДЕЛЕНО КАК Ссылка,
		|	"""" КАК ПолныйИдентификатор,
		|	"""" КАК ИдентификаторДляФормул,
		|	"""" КАК ПрефиксТипаВидаХарактеристик,
		|	"""" КАК ПредставлениеХарактеристики,
		|	НЕОПРЕДЕЛЕНО КАК ТипЗначения
		|ГДЕ
		|	ЛОЖЬ";
		
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос;
	
КонецФункции

Функция ТекстВыборкиСвойствХарактеристикПоШаблону(ОписаниеШаблонаВыборки, ФлагиИндексов, ВыражениеУсловияПоИдентификатору,
				НаборыДополнительныхРеквизитов, ИспользоватьНаименованиеВместоПредставления)
	
	ОписаниеИсточникаХарактеристик = ОписаниеШаблонаВыборки.ОписаниеИсточникаХарактеристик;
	МДИсточникаХарактеристик = ОписаниеИсточникаХарактеристик.МетаданныеИсточника;
	ТаблицаВидовХарактеристик = РаботаСФормуламиПовтИсп.ПолноеИмяТаблицыДанных(МДИсточникаХарактеристик.ПолноеИмя());
	
	ПолеКлюча = ОписаниеШаблонаВыборки.ПолеКлюча; // ОбъектМетаданныхПоле - 
	
	Если ОписаниеШаблонаВыборки.ВидыХарактеристик = МДИсточникаХарактеристик Тогда
		
		ТекстПодзапроса =
		"ВЫБРАТЬ
		|	ХарактеристикиОбъектовМетаданныхПоШаблонам.ОписаниеТипаВладельцаХарактеристики КАК ОписаниеТипаВладельцаХарактеристики,
		|	&ВыражениеПоляСсылка КАК Ссылка,
		|	&ВыражениеПоляПолныйИдентификатор КАК ПолныйИдентификатор,
		|	&ВыражениеПоляИдентификаторДляФормул КАК ИдентификаторДляФормул,
		|	&ВыражениеПоляПрефиксТипаВидаХарактеристик КАК ПрефиксТипаВидаХарактеристик,
		|	&ВыражениеПредставления КАК ПредставлениеХарактеристики,
		|	&ВыражениеТипаЗначения КАК ТипЗначения
		|ИЗ
		|	&ХарактеристикиОбъектовМетаданныхПоШаблонам КАК ХарактеристикиОбъектовМетаданныхПоШаблонам
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	#ИсточникВидовХарактеристик КАК ТаблицаВидовХарактеристик
		|ПО
		|	ХарактеристикиОбъектовМетаданныхПоШаблонам.НомерШаблона = &НомерШаблона
		|	И &УсловияОтбораВидовХарактеристик
		|	И &УсловияПоХарактеристикам";
		
	Иначе
		
		ТекстПодзапроса =
		"ВЫБРАТЬ
		|	ХарактеристикиОбъектовМетаданныхПоШаблонам.ОписаниеТипаВладельцаХарактеристики КАК ОписаниеТипаВладельцаХарактеристики,
		|	&ВыражениеПоляСсылка КАК Ссылка,
		|	&ВыражениеПоляПолныйИдентификатор КАК ПолныйИдентификатор,
		|	&ВыражениеПоляИдентификаторДляФормул КАК ИдентификаторДляФормул,
		|	&ВыражениеПоляПрефиксТипаВидаХарактеристик КАК ПрефиксТипаВидаХарактеристик,
		|	&ВыражениеПредставления КАК ПредставлениеХарактеристики,
		|	&ВыражениеТипаЗначения КАК ТипЗначения
		|ИЗ
		|	&ХарактеристикиОбъектовМетаданныхПоШаблонам КАК ХарактеристикиОбъектовМетаданныхПоШаблонам
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	#ИсточникВидовХарактеристик КАК ТаблицаИсточник
		|ПО
		|	ХарактеристикиОбъектовМетаданныхПоШаблонам.НомерШаблона = &НомерШаблона
		|	И &УсловияОтбораВидовХарактеристик
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	#ТаблицаВидовХарактеристик КАК ТаблицаВидовХарактеристик
		|ПО
		|	&УсловиеСоединения
		|	И &УсловияПоХарактеристикам";
		
		УсловиеСоединения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"ТаблицаИсточник.%1 = ТаблицаВидовХарактеристик.Ссылка",
			ПолеКлюча.Имя);
		
		Если НЕ ПустаяСтрока(ВыражениеУсловияПоИдентификатору) Тогда
			УсловиеСоединения = УсловиеСоединения + "
			|	И " + ВыражениеУсловияПоИдентификатору;
		КонецЕсли;
		
		ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "#ТаблицаВидовХарактеристик", ТаблицаВидовХарактеристик);
		ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "&УсловиеСоединения", УсловиеСоединения);
		
	КонецЕсли;
	
	ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "&УсловияПоХарактеристикам", "ТаблицаВидовХарактеристик.%1 <> """"");
	
	ТекстПодзапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПодзапроса,
		ОписаниеИсточникаХарактеристик.ПолеИдентификатора);
	
	ИсточникВидовХарактеристик = РаботаСФормуламиПовтИсп.ПолноеИмяТаблицыДанных(
		ОписаниеШаблонаВыборки.ВидыХарактеристик.ПолноеИмя());
	
	Если ОписаниеШаблонаВыборки.ВидыХарактеристик = МДИсточникаХарактеристик Тогда
		ВыражениеПоляСсылка = "ТаблицаВидовХарактеристик."
			+ ПолеКлюча.Имя;
	Иначе
		ВыражениеПоляСсылка = "ТаблицаИсточник."
			+ ПолеКлюча.Имя;
	КонецЕсли;
	
	ВыражениеПоляПолныйИдентификатор = ВыражениеПолногоИдентификатораХарактеристики(МДИсточникаХарактеристик, Ложь);
	ВыражениеПоляПолныйИдентификатор = СтрЗаменить(ВыражениеПоляПолныйИдентификатор, "%ИмяТаблицы%", "ТаблицаВидовХарактеристик");
	ВыражениеПоляИдентификаторДляФормул = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"ТаблицаВидовХарактеристик.%1",
		ОписаниеИсточникаХарактеристик.ПолеИдентификатора);
	ВыражениеПоляПрефиксТипаВидаХарактеристик = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"""%1""",
		ОписаниеИсточникаХарактеристик.ПрефиксТипаВидаХарактеристик);
	Если НЕ ИспользоватьНаименованиеВместоПредставления Тогда
		ВыражениеПредставления = "ПРЕДСТАВЛЕНИЕ(ТаблицаВидовХарактеристик.Ссылка)";
	Иначе
		ВыражениеПредставления = "ТаблицаВидовХарактеристик.Наименование";
	КонецЕсли;
	
	Если ОписаниеИсточникаХарактеристик.ИспользуетсяВыражениеТипаЗначений Тогда
		ВыражениеТипаЗначения = ОписаниеИсточникаХарактеристик.ВыражениеТипаЗначений;
	Иначе
		ВыражениеТипаЗначения = "ТаблицаВидовХарактеристик."
			+ ОписаниеИсточникаХарактеристик.ПолеТипаЗначений;
	КонецЕсли;
	
	УсловияОтбораВидовХарактеристик = "";
	Если ОписаниеШаблонаВыборки.ПолеОтбораВидов = Неопределено Тогда
		
		УсловияОтбораВидовХарактеристик = "ИСТИНА";
		
	Иначе
		
		ПолеОтбораВидов = ОписаниеШаблонаВыборки.ПолеОтбораВидов; // ОбъектМетаданныхПоле -
		ТипыПоляОтбора = Неопределено;
		ПолеОтбораСсылочногоТипа = Ложь;
		ПолеОтбораСтрока = Ложь;
		ПолеОтбораЧисло = Ложь;
		ПолеОтбораБулево = Ложь;
		ПолеОтбораДата = Ложь;
		
		ПолноеИмяВидаХарактеристики = ОписаниеШаблонаВыборки.ВидыХарактеристик.ПолноеИмя();
		Если СтрНайти(ВРЕГ(ПолноеИмяВидаХарактеристики), ВРЕГ(".ТабличнаяЧасть."))> 0
			И ВРЕГ(ПолеОтбораВидов.Имя) = "ССЫЛКА" Тогда
			РодительскийОбъектМД = ОписаниеШаблонаВыборки.ВидыХарактеристик.Родитель(); // ОбъектМетаданных -
			ОписаниеТиповПоляОтбора = Новый ОписаниеТипов(ВидОбъектаМетаданных(РодительскийОбъектМД, Истина)
				+ "." + РодительскийОбъектМД.Имя);
			ТипыПоляОтбора = ОписаниеТиповПоляОтбора.Типы();
		Иначе
			Реквизит = ОписаниеШаблонаВыборки.ВидыХарактеристик.Реквизиты.Найти(ПолеОтбораВидов.Имя);
			Если Реквизит = Неопределено Тогда
				КоличествоРеквизитов = ОписаниеШаблонаВыборки.ВидыХарактеристик.СтандартныеРеквизиты.Количество();
				Для НомерРеквизита = 1 По КоличествоРеквизитов Цикл
					ОписаниеРеквизита = ОписаниеШаблонаВыборки.ВидыХарактеристик.СтандартныеРеквизиты[НомерРеквизита - 1]; // ОбъектМетаданныхПоле -
					Если ОписаниеРеквизита.Имя = ПолеОтбораВидов.Имя Тогда
						ТипыПоляОтбора = ОписаниеРеквизита.Тип.Типы();
						Прервать;
					КонецЕсли;
				КонецЦикла;
			Иначе
				ТипыПоляОтбора = Реквизит.Тип.Типы();
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ТипыПоляОтбора = Неопределено Тогда
			Если ТипыПоляОтбора.Найти(Тип("Строка")) <> Неопределено Тогда
				ПолеОтбораСтрока = Истина;
			ИначеЕсли ТипыПоляОтбора.Найти(Тип("Число")) <> Неопределено Тогда
				ПолеОтбораЧисло = Истина;
			ИначеЕсли ТипыПоляОтбора.Найти(Тип("Булево")) <> Неопределено Тогда
				ПолеОтбораБулево = Истина;
			ИначеЕсли ТипыПоляОтбора.Найти(Тип("Дата")) <> Неопределено Тогда
				ПолеОтбораДата = Истина;
			Иначе
				ПолеОтбораСсылочногоТипа = Истина;
			КонецЕсли;
		КонецЕсли;
		
		УсловияОтбораВидовХарактеристик = "";
		Если ФлагиИндексов.ЕстьСсылки Тогда
			УсловияОтбораВидовХарактеристик = УсловияОтбораВидовХарактеристик + ?(УсловияОтбораВидовХарактеристик = "", "", "
					|	И ");
			Если ПолеОтбораСсылочногоТипа Тогда
				УсловияОтбораВидовХарактеристик = УсловияОтбораВидовХарактеристик
					+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							"%ИмяТаблицыОтбора%.%1 = ХарактеристикиОбъектовМетаданныхПоШаблонам.ЗначениеОтбораВидовСсылки",
							ПолеОтбораВидов.Имя);
			Иначе
				УсловияОтбораВидовХарактеристик = УсловияОтбораВидовХарактеристик
					+ "ХарактеристикиОбъектовМетаданныхПоШаблонам.ЗначениеОтбораВидовСсылки = НЕОПРЕДЕЛЕНО";
			КонецЕсли;
		КонецЕсли;
		Если ФлагиИндексов.ЕстьСтроки Тогда
			УсловияОтбораВидовХарактеристик = УсловияОтбораВидовХарактеристик + ?(УсловияОтбораВидовХарактеристик = "", "", "
					|	И ");
					
			Если ПолеОтбораСтрока Тогда
				УсловияОтбораВидовХарактеристик = УсловияОтбораВидовХарактеристик
					+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							"%ИмяТаблицыОтбора%.%1 = ХарактеристикиОбъектовМетаданныхПоШаблонам.ЗначениеОтбораВидовСтрока",
							ПолеОтбораВидов.Имя);
			Иначе
				УсловияОтбораВидовХарактеристик = УсловияОтбораВидовХарактеристик
					+ "ХарактеристикиОбъектовМетаданныхПоШаблонам.ЗначениеОтбораВидовСтрока = """"";
			КонецЕсли;
		КонецЕсли;
		Если ФлагиИндексов.ЕстьЧисла Тогда
			УсловияОтбораВидовХарактеристик = УсловияОтбораВидовХарактеристик + ?(УсловияОтбораВидовХарактеристик = "", "", "
					|	И ");
					
			Если ПолеОтбораЧисло Тогда
				УсловияОтбораВидовХарактеристик = УсловияОтбораВидовХарактеристик
					+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							"%ИмяТаблицыОтбора%.%1 = ХарактеристикиОбъектовМетаданныхПоШаблонам.ЗначениеОтбораВидовЧисло",
							ПолеОтбораВидов.Имя);
			Иначе
				УсловияОтбораВидовХарактеристик = УсловияОтбораВидовХарактеристик
					+ "ХарактеристикиОбъектовМетаданныхПоШаблонам.ЗначениеОтбораВидовЧисло = 0";
			КонецЕсли;
		КонецЕсли;
		Если ФлагиИндексов.ЕстьБулево Тогда
			УсловияОтбораВидовХарактеристик = УсловияОтбораВидовХарактеристик + ?(УсловияОтбораВидовХарактеристик = "", "", "
					|	И ");
				
			Если ПолеОтбораБулево Тогда
				УсловияОтбораВидовХарактеристик = УсловияОтбораВидовХарактеристик
					+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							"%ИмяТаблицыОтбора%.%1 = ХарактеристикиОбъектовМетаданныхПоШаблонам.ЗначениеОтбораВидовБулево",
							ПолеОтбораВидов.Имя);
			Иначе
				УсловияОтбораВидовХарактеристик = УсловияОтбораВидовХарактеристик
					+ "ХарактеристикиОбъектовМетаданныхПоШаблонам.ЗначениеОтбораВидовБулево = ЛОЖЬ";
			КонецЕсли;
		КонецЕсли;
		Если ФлагиИндексов.ЕстьДаты Тогда
			УсловияОтбораВидовХарактеристик = УсловияОтбораВидовХарактеристик + ?(УсловияОтбораВидовХарактеристик = "", "", "
					|	И ");
				
			Если ПолеОтбораДата Тогда
				УсловияОтбораВидовХарактеристик = УсловияОтбораВидовХарактеристик
					+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							"%ИмяТаблицыОтбора%.%1 = ХарактеристикиОбъектовМетаданныхПоШаблонам.ЗначениеОтбораВидовДата",
							ПолеОтбораВидов.Имя);
			Иначе
				УсловияОтбораВидовХарактеристик = УсловияОтбораВидовХарактеристик
					+ "ХарактеристикиОбъектовМетаданныхПоШаблонам.ЗначениеОтбораВидовДата = ЛОЖЬ";
			КонецЕсли;
		КонецЕсли;
		Если ОписаниеШаблонаВыборки.ВидыХарактеристик = МДИсточникаХарактеристик Тогда
			ИмяТаблицыОтбора = "ТаблицаВидовХарактеристик";
		Иначе
			ИмяТаблицыОтбора = "ТаблицаИсточник";
		КонецЕсли;
		УсловияОтбораВидовХарактеристик = СтрЗаменить(УсловияОтбораВидовХарактеристик, "%ИмяТаблицыОтбора%", ИмяТаблицыОтбора);
		
	КонецЕсли;
	
	ВыражениеДополнительногоОтбора = "";
	Если МДИсточникаХарактеристик = Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения Тогда
		Если ТипЗнч(НаборыДополнительныхРеквизитов) = Тип("Массив")
			И НаборыДополнительныхРеквизитов.Количество() > 0 Тогда
			// Выражение дополнительных отборов источника характеристик должно содержать только условия к полям ТаблицаВидовХарактеристик
			// т.к. дополнительные условия задаются на объект метаданных видов характеристик.
			ВыражениеДополнительногоОтбора =
			"ТаблицаВидовХарактеристик.Ссылка В
			|	(&ВыражениеВыборкиДопРеквизитов)";
			ШаблонВыраженияВыборкиДопРеквизитов =
			"ВЫБРАТЬ
			|	НаборыСвойствСостав.Свойство КАК Свойство
			|ИЗ
			|	&ТаблицаНаборов КАК НаборыСвойствСостав
			|ГДЕ
			|	НаборыСвойствСостав.Ссылка В (&НаборыДополнительныхРеквизитов)";
			Если ОписаниеШаблонаВыборки.ВидыХарактеристик = Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений.ТабличныеЧасти.ДополнительныеРеквизиты Тогда
				ВыражениеВыборки = СтрЗаменить(ШаблонВыраженияВыборкиДопРеквизитов,
					"&ТаблицаНаборов", "Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты");
			ИначеЕсли ОписаниеШаблонаВыборки.ВидыХарактеристик = Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений.ТабличныеЧасти.ДополнительныеСведения Тогда
				ВыражениеВыборки = СтрЗаменить(ШаблонВыраженияВыборкиДопРеквизитов,
					"&ТаблицаНаборов", "Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения");
			Иначе
				ВыражениеВыборки = СтрЗаменить(ШаблонВыраженияВыборкиДопРеквизитов,
					"&ТаблицаНаборов", "Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты")
					+ "
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|"
					+ СтрЗаменить(ШаблонВыраженияВыборкиДопРеквизитов,
					"&ТаблицаНаборов", "Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения");
			КонецЕсли;
			ВыражениеДополнительногоОтбора = СтрЗаменить(ВыражениеДополнительногоОтбора, "&ВыражениеВыборкиДопРеквизитов", ВыражениеВыборки);
		КонецЕсли;
	КонецЕсли;
	Если ОписаниеШаблонаВыборки.ВидыХарактеристик = МДИсточникаХарактеристик Тогда
		Если НЕ ПустаяСтрока(ВыражениеУсловияПоИдентификатору) Тогда
			УсловияОтбораВидовХарактеристик = УсловияОтбораВидовХарактеристик + "
			|	И " + ВыражениеУсловияПоИдентификатору;
		КонецЕсли;
	КонецЕсли;
	Если НЕ ВыражениеДополнительногоОтбора = "" Тогда
		ТекстПодзапроса = ТекстПодзапроса + "
		|ГДЕ
		|	" + ВыражениеДополнительногоОтбора;
	КонецЕсли;
	
	ВыражениеНомерШаблона = Формат(ОписаниеШаблонаВыборки.НомерШаблона, "ЧН=0; ЧГ=0;");
	
	ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "&ХарактеристикиОбъектовМетаданныхПоШаблонам", "ХарактеристикиОбъектовМетаданныхПоШаблонам");
	ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "#ИсточникВидовХарактеристик", ИсточникВидовХарактеристик);
	ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "#ТаблицаВидовХарактеристик", ТаблицаВидовХарактеристик);
	
	ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "&ВыражениеПоляСсылка", ВыражениеПоляСсылка);
	ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "&ВыражениеПоляПолныйИдентификатор", ВыражениеПоляПолныйИдентификатор);
	ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "&ВыражениеПоляИдентификаторДляФормул", ВыражениеПоляИдентификаторДляФормул);
	ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "&ВыражениеПоляПрефиксТипаВидаХарактеристик", ВыражениеПоляПрефиксТипаВидаХарактеристик);
	ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "&ВыражениеПредставления", ВыражениеПредставления);
	ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "&ВыражениеТипаЗначения", ВыражениеТипаЗначения);
	ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "&УсловияОтбораВидовХарактеристик", УсловияОтбораВидовХарактеристик);
	
	ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "&НомерШаблона", ВыражениеНомерШаблона);
	
	Возврат ТекстПодзапроса;
	
КонецФункции

Функция ПолучитьПредставленияХарактеристикиДляОбъектовТипа(ОписаниеТипов, ВыражениеХарактеристики, 
		СвойстваИсточниковХарактеристик, КешИсточниковХарактеристик)
	
	ПредставленияХарактеристики = Новый Соответствие();
	
	Запрос = ЗапросСвойствХарактеристикПоОбъектамМетаданных(ОписаниеТипов,
		СвойстваИсточниковХарактеристик, КешИсточниковХарактеристик, ВыражениеХарактеристики);
	
	ТипыВладельцевХарактеристикПоПредставлениям = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Представление = Выборка.ПредставлениеХарактеристики;
		МассивТипов = ТипыВладельцевХарактеристикПоПредставлениям.Получить(Представление);
		Если МассивТипов = Неопределено Тогда
			МассивТипов = Новый Массив;
		КонецЕсли;
		Тип = Тип(Выборка.ОписаниеТипаВладельцаХарактеристики);
		МассивТипов.Добавить(Тип);
		ТипыВладельцевХарактеристикПоПредставлениям.Вставить(Представление, МассивТипов);
	КонецЦикла;
	Для Каждого КлючИЗначение Из ТипыВладельцевХарактеристикПоПредставлениям Цикл
		ОписаниеТипов = Новый ОписаниеТипов(КлючИЗначение.Значение);
		Представление = КлючИЗначение.Ключ;
		ПредставленияХарактеристики.Вставить(ОписаниеТипов, Представление);
	КонецЦикла;
	
	Возврат ПредставленияХарактеристики;
	
КонецФункции

Функция ТаблицаСвойствХарактеристикПоТипуВладельца(ОписаниеТиповВозможныхХарактеристик)
	
	ОписаниеТипаИдентификатора = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(1000, ДопустимаяДлина.Переменная));
	ОписаниеТипаПрефикса = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(10, ДопустимаяДлина.Переменная));
	
	Таблица = Новый ТаблицаЗначений();
	Таблица.Колонки.Добавить("Ссылка", ОписаниеТиповВозможныхХарактеристик);
	Таблица.Колонки.Добавить("ПолныйИдентификатор", ОписаниеТипаИдентификатора);
	Таблица.Колонки.Добавить("ИдентификаторДляФормул", ОписаниеТипаИдентификатора);
	Таблица.Колонки.Добавить("ПрефиксТипаВидаХарактеристик", ОписаниеТипаПрефикса);
	Таблица.Колонки.Добавить("ПредставлениеХарактеристики", ОписаниеТипаИдентификатора);
	Таблица.Колонки.Добавить("ПредставлениеХарактеристикиВерхнийРегистр", ОписаниеТипаИдентификатора);
	Таблица.Колонки.Добавить("ТипЗначения");
	
	Возврат Таблица;
	
КонецФункции

// Возвращает таблицы характеристик и их свойств для каждого типа значений
// 
// Параметры:
// 	ОписаниеТипов - ОписаниеТипов - Типы, для которых необходимо получить характеристики.
// 	ОтборПоНаборамДополнительныхРеквизитов - Неопределено, Массив из СправочникСсылка.НаборыДополнительныхРеквизитовИСведений - В случае,
// 			если задан отбор, будут получены только доп. реквизиты и сведения, удовлетворяющие отбору.
// 	ИспользоватьНаименованиеВместоПредставления - Булево - Истина, если в качестве представлений нужно получить наименования.
// 			Например, в шаблонах наименований видов номенклатур.
// Возвращаемое значение:
// 	Соответствие - Соответствие типа данных, входящего в переданное в метод описание типов и таблицы свойств характеристик:
// 	  * Ключ - Тип - Тип значений.
// 	  * Значение - см. ТаблицаСвойствХарактеристикПоТипуВладельца
//
Функция ПолучитьСвойстваХарактеристикДляОбъектовТипа(ОписаниеТипов, ОтборПоНаборамДополнительныхРеквизитов = Неопределено,
			ИспользоватьНаименованиеВместоПредставления = Ложь)
	
	СвойстваИсточниковХарактеристик = РаботаСФормуламиПовтИсп.СвойстваПоддерживаемыхИсточниковХарактеристик();
	КешИсточниковХарактеристик = Новый Соответствие;
	
	СвойстваХарактеристикПоТипамДанных = Новый Соответствие();
	ПереопределенияТиповЗначений = Новый Соответствие;
	ОписаниеТиповВозможныхХарактеристик = Новый Массив;
	Для Каждого ОписаниеВозможныхХарактеристик Из СвойстваИсточниковХарактеристик Цикл
		МетаданныеХарактеристик = ОписаниеВозможныхХарактеристик.МетаданныеИсточника; // ОбъектМетаданныхПланВидовХарактеристик - 
		ВидОбъектаМД = ВидОбъектаМетаданных(МетаданныеХарактеристик, Истина);
		ТипСтрокой = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1.%2",
			ВидОбъектаМД, МетаданныеХарактеристик.Имя);
		ТипХарактеристики = Тип(ТипСтрокой);
		ОписаниеТиповВозможныхХарактеристик.Добавить(ТипХарактеристики);
		Если ЗначениеЗаполнено(ОписаниеВозможныхХарактеристик.ПереопределениеВыраженияТипаЗначений) Тогда
			ПереопределенияТиповЗначений.Вставить(ОписаниеВозможныхХарактеристик.ПрефиксТипаВидаХарактеристик,
				ОписаниеВозможныхХарактеристик.ПереопределениеВыраженияТипаЗначений);
		КонецЕсли;
	КонецЦикла;
	ОписаниеТиповВозможныхХарактеристик = Новый ОписаниеТипов(ОписаниеТиповВозможныхХарактеристик);
	
	Запрос = ЗапросСвойствХарактеристикПоОбъектамМетаданных(ОписаниеТипов,
		СвойстваИсточниковХарактеристик,
		КешИсточниковХарактеристик,
		"",
		ОтборПоНаборамДополнительныхРеквизитов,
		ИспользоватьНаименованиеВместоПредставления);
	
	Если ТипЗнч(ОтборПоНаборамДополнительныхРеквизитов) = Тип("Массив") Тогда
		
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|ИТОГИ ПО
	|	ОписаниеТипаВладельцаХарактеристики";
	
	ВыборкаТипВладельца = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ОписаниеТипаВладельцаХарактеристики");
	
	Пока ВыборкаТипВладельца.Следующий() Цикл
		Тип = Тип(ВыборкаТипВладельца.ОписаниеТипаВладельцаХарактеристики);
		ТаблицаСвойствХарактеристик = ТаблицаСвойствХарактеристикПоТипуВладельца(ОписаниеТиповВозможныхХарактеристик);
		
		Выборка = ВыборкаТипВладельца.Выбрать();
		Пока Выборка.Следующий() Цикл
			СтрокаСвойств = ТаблицаСвойствХарактеристик.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСвойств, Выборка);
			СтрокаСвойств.ПредставлениеХарактеристикиВерхнийРегистр = ВРЕГ(Выборка.ПредставлениеХарактеристики);
			ПереопределениеТипа = ПереопределенияТиповЗначений.Получить(Выборка.ПрефиксТипаВидаХарактеристик);
			Если ЗначениеЗаполнено(ПереопределениеТипа) Тогда
				СтрокаСвойств.ТипЗначения = ПереопределениеТипа;
			КонецЕсли;
		КонецЦикла;
		
		СвойстваХарактеристикПоТипамДанных.Вставить(Тип, ТаблицаСвойствХарактеристик);
	КонецЦикла;
	
	Возврат СвойстваХарактеристикПоТипамДанных;
	
КонецФункции

// Возвращает текст из конструкций расширения языка запросов для описания характеристик.
// 
// Параметры:
// 	ОписаниеТипов - ОписаниеТипов - типы, для которых необходимо составить выражения описания характеристик на языке расширения запросов СКД.
// Возвращаемое значение:
// 	Строка - выражения описания характеристик на языке расширения запросов СКД.
//
Функция ОписаниеХарактеристикСКДДляОписанияТипов(ОписаниеТипов)
	
	ВыраженияРасширенийЯзыкаЗапроса = "";
	
	СвойстваИсточниковХарактеристик = РаботаСФормуламиПовтИсп.СвойстваПоддерживаемыхИсточниковХарактеристик();
	
	ТипыДанныхСтроки = ОписаниеТипов.Типы();
	Для Каждого ТипЗначения Из ТипыДанныхСтроки Цикл
		ОбъектМД = ОбъектМетаданныхПоТипуЗначения(ТипЗначения);
		Если ОбъектМД = Неопределено Тогда
			Продолжить
		КонецЕсли;
		ВидОбъектаМД = ВидОбъектаМетаданных(ОбъектМД);
		Если ВидОбъектаМД = Неопределено Тогда
			// Перечисление не имеет реквизитов
			Продолжить;
		КонецЕсли;
		
		ТекстыХарактеристик = Новый Массив;
		
		Если ОбъектМД.Характеристики.Количество() = 0 Тогда
			// Для объекта метаданных не определены любые (не только поддерживаемые) характеристики на уровне метаданных,
			// значит выражение переопределяющее получение характеристик не нужно.
			Продолжить;
		КонецЕсли;
		
		// Соответствие Ключ - объект метаданных вид характеристик, Значение - ОписаниеХарактеристик.
		ИспользуемыеИсточникиХарактеристик = Новый Соответствие;
		
		ЗаполнитьИспользуемыеИсточникиХарактеристик(ИспользуемыеИсточникиХарактеристик,
			ОбъектМД,
			СвойстваИсточниковХарактеристик);
		
		ВыражениеТипаИсточника = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"%1.%2",
				ВидОбъектаМД,
				ОбъектМД.Имя);
		
		Если ИспользуемыеИсточникиХарактеристик.Количество() = 0 Тогда
			// Не могут быть определены поддерживаемые виды характеристик. Запрещаем использование любых характеристик.
			
			ШаблонТекстаХарактеристик = "
			|{ХАРАКТЕРИСТИКИ
			|	ТИП(&ВыражениеТипаИсточника)
			|	ВИДЫХАРАКТЕРИСТИК (ВЫБРАТЬ
			|			НЕОПРЕДЕЛЕНО КАК Идентификатор,
			|			"""" КАК Имя,
			|			НЕОПРЕДЕЛЕНО КАК ТипЗначения
			|		ГДЕ ЛОЖЬ)
			|	ПОЛЕКЛЮЧА Идентификатор
			|	ПОЛЕИМЕНИ Имя
			|	ПОЛЕТИПАЗНАЧЕНИЯ ТипЗначения
			|	ЗНАЧЕНИЯХАРАКТЕРИСТИК (ВЫБРАТЬ
			|			НЕОПРЕДЕЛЕНО КАК Ссылка,
			|			НЕОПРЕДЕЛЕНО КАК Свойство,
			|			НЕОПРЕДЕЛЕНО КАК Значение
			|		ГДЕ ЛОЖь)
			|	ПОЛЕОБЪЕКТА Ссылка
			|	ПОЛЕВИДА Свойство
			|	ПОЛЕЗНАЧЕНИЯ Значение }";
			ТекстХарактеристик = СтрЗаменить(ШаблонТекстаХарактеристик,
				"&ВыражениеТипаИсточника", ВыражениеТипаИсточника);
			
			ТекстыХарактеристик.Добавить(ТекстХарактеристик);
			
		Иначе
			
			ШаблонТекстаХарактеристик = "
			|{ХАРАКТЕРИСТИКИ
			|	ТИП(&ВыражениеТипаИсточника)
			|	ВИДЫХАРАКТЕРИСТИК (&ТекстПодзапросаИсточникиХарактеристик
			|		)
			|	ПОЛЕКЛЮЧА Идентификатор
			|	ПОЛЕИМЕНИ Имя
			|	ПОЛЕТИПАЗНАЧЕНИЯ ТипЗначения
			|	ЗНАЧЕНИЯХАРАКТЕРИСТИК (&ТекстПодзапросаИсточникиЗначений)
			|	ПОЛЕОБЪЕКТА Ссылка
			|	ПОЛЕВИДА Свойство
			|	ПОЛЕЗНАЧЕНИЯ Значение }";
			
			ТекстПодзапросаИсточникиХарактеристик = "";
			
			ТекстПодзапросаИсточникиЗначений = "";
			
			Для Каждого ОбъектИсточникаИОписанияХарактеристик Из ИспользуемыеИсточникиХарактеристик Цикл
				
				МДИсточникаХарактеристик = ОбъектИсточникаИОписанияХарактеристик.Ключ;
				ОписанияХарактеристик = ОбъектИсточникаИОписанияХарактеристик.Значение;
				
				СвойстваИсточника = СвойстваИсточниковХарактеристик.Найти(МДИсточникаХарактеристик, "МетаданныеИсточника");
				
				Для Каждого ОписаниеХарактеристик Из ОписанияХарактеристик Цикл
					
					// В подзапрос выборки видов характеристик нельзя помещать объединение подзапросов, поэтому
					// каждый набор характеристик - новый запрос.
					ТекстПодзапросаИсточникиХарактеристик = ТекстПодзапросаИсточниковВидовХарактеристик(
						СвойстваИсточника,
						ОписаниеХарактеристик,,
						Истина);
					
					ТекстПодзапросаИсточникиЗначений = ТекстПодзапросаИсточниковЗначенийХарактеристик(ОписаниеХарактеристик);
					
					ТекстХарактеристик = ШаблонТекстаХарактеристик;
					ТекстХарактеристик = СтрЗаменить(ТекстХарактеристик, "&ТекстПодзапросаИсточникиХарактеристик", ТекстПодзапросаИсточникиХарактеристик);
					ТекстХарактеристик = СтрЗаменить(ТекстХарактеристик, "&ТекстПодзапросаИсточникиЗначений", ТекстПодзапросаИсточникиЗначений);
					ТекстХарактеристик = СтрЗаменить(ТекстХарактеристик, "&ВыражениеТипаИсточника", ВыражениеТипаИсточника);
					
					ТекстыХарактеристик.Добавить(ТекстХарактеристик);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ВыраженияРасширенийЯзыкаЗапроса = ВыраженияРасширенийЯзыкаЗапроса
			+ СтрСоединить(ТекстыХарактеристик, Символы.ПС);
		
	КонецЦикла;
	
	Возврат ВыраженияРасширенийЯзыкаЗапроса;
	
КонецФункции

// Возвращает список используемых наборов данных для вычислений выражений.
// 
// Параметры:
// 	СхемаКомпоновки - СхемаКомпоновкиДанных - Схема компоновки, используемая для вычисления выражений.
// 	ВыраженияДляПроверки - Массив из Строка - Выражения для вычислений.
// 
// Возвращаемое значение:
// 	Соответствие - используемые наборы для вычисления выражений и их свойства:
// 	 *Ключ - НаборДанныхЗапросСхемыКомпоновкиДанных, НаборДанныхОбъектСхемыКомпоновкиДанных - набор данных схемы компоновки.
// 	 *Значение - Структура - Свойства используемого набора:
// 	   **ПоляНабора - Массив из Строка - перечисление путей к данным полей набора.
// 	   **НаборДанныхИспользуетсяВВыраженияхХарактеристик - Булево - флаг использование набора для вычисления выражения с характеристикой.
//
Функция ИспользуемыеНаборыДанныхСхемыКомпоновки(СхемаКомпоновки, ВыраженияДляПроверки)
	ИспользуемыеНаборыДанных = Новый Соответствие;
		
	НаборыДанныхСхемы = НаборыДанныхСхемыКомпоновки(СхемаКомпоновки);
	Для Каждого НаборДанныхИПоля Из НаборыДанныхСхемы Цикл
		НаборДанных = НаборДанныхИПоля.Ключ;
		ПоляНабора = НаборДанныхИПоля.Значение; // - Массив из Строка -
		
		НаборДанныхИспользуетсяВВыражениях = Ложь;
		НаборДанныхИспользуетсяВВыраженияхХарактеристик = Ложь;
		Для Каждого ПутьКДаннымПоля Из ПоляНабора Цикл
			Для Каждого ИсходноеВыражение Из ВыраженияДляПроверки Цикл
				Если СтрНайти(ИсходноеВыражение, ПутьКДаннымПоля) = 1 Тогда
					НаборДанныхИспользуетсяВВыражениях = Истина;
					
					ВыражениеСодержитХарактеристики = (СтрНайти(ИсходноеВыражение, "{") > 0);
					Если ВыражениеСодержитХарактеристики Тогда
						НаборДанныхИспользуетсяВВыраженияхХарактеристик = Истина;
					КонецЕсли;
					Если НаборДанныхИспользуетсяВВыраженияхХарактеристик Тогда
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если НаборДанныхИспользуетсяВВыраженияхХарактеристик Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НаборДанныхИспользуетсяВВыражениях Тогда
			ПараметрыИспользования = Новый Структура;
			ПараметрыИспользования.Вставить("ПоляНабора", ПоляНабора);
			ПараметрыИспользования.Вставить("НаборДанныхИспользуетсяВВыраженияхХарактеристик", НаборДанныхИспользуетсяВВыраженияхХарактеристик);
			ИспользуемыеНаборыДанных.Вставить(НаборДанных, ПараметрыИспользования);
		КонецЕсли;
	КонецЦикла;
		
	Возврат ИспользуемыеНаборыДанных;
КонецФункции

Функция НаборыДанныхСхемыКомпоновки(СхемаКомпоновки)
	СоответствиеНаборовДанных = Новый Соответствие;
	Для Каждого НаборДанных Из СхемаКомпоновки.НаборыДанных Цикл
		ЗаполнитьНаборыПолученияДанныхРекурсивно(СоответствиеНаборовДанных, НаборДанных);
	КонецЦикла;
	
	Возврат СоответствиеНаборовДанных;
КонецФункции

Процедура ЗаполнитьНаборыПолученияДанныхРекурсивно(СписокНаборовДанных, ТекущийНабор)
	Если ТипЗнч(ТекущийНабор) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
		Для Каждого ВложенныйНабор Из ТекущийНабор.Элементы Цикл
			ЗаполнитьНаборыПолученияДанныхРекурсивно(СписокНаборовДанных, ВложенныйНабор);
		КонецЦикла;
	Иначе
		СписокНаборовДанных.Вставить(ТекущийНабор, ПоляНабораСхемыКомпоновки(ТекущийНабор));
	КонецЕсли;
КонецПроцедуры

Функция ПоляНабораСхемыКомпоновки(НаборДанныхСхемыКомпоновки)
	МассивПолей = Новый Массив;
	
	Для Каждого Поле Из НаборДанныхСхемыКомпоновки.Поля Цикл
		Если ТипЗнч(Поле) = Тип("ПапкаПолейНабораДанныхСхемыКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		МассивПолей.Добавить(Поле.ПутьКДанным);
	КонецЦикла;
	
	Возврат МассивПолей;
КонецФункции

#КонецОбласти

#Область СхемаКомпоновкиПоОписаниюТипов

// Возвращает схему компоновки для получения реквизитов и дополнительных реквизитов по переданному описанию типов.
// Схема компоновки имеет одно поле "Реквизит" соответствующего типа, также, может быть указана секция описания характеристик.
//
// Параметры:
//  ОписаниеТипов - ОписаниеТипов - Описание типов поля, для которого будет получена схема компоновки данных.
//  ВыводитьХарактеристики - Булево - Признак необходимости вывода дополнительных реквизитов и сведений и контактной информации. Значение по умолчанию Истина.
//  НаборыДополнительныхРеквизитов - Неопределено, Массив из СправочникСсылка.НаборыДополнительныхРеквизитовИСведений - Если в массиве есть элементы,
//  				то дополнительно накладывается отбор для дополнительных реквизитов и сведений на вхождение в указанные наборы.
//  				Неопределено - значение по умолчанию. Дополнительных отборов по наборам не указывается. 
//  				Применяются только стандартные отборы на характеристики, указанные в объектах метаданных указанного типа.
//
// Возвращаемое значение:
//  СхемаКомпоновкиДанных - Схема компоновки для получения реквизитов и доп. характеристик.
//
Функция СхемаКомпоновкиПолученияРеквизитовПоТипуЗначения(ОписаниеТипов, ВыводитьХарактеристики = Истина,
					НаборыДополнительныхРеквизитов = Неопределено)
	
	СхемаКомпоновки = Новый СхемаКомпоновкиДанных;
	ИсточникДанныхСхемы = СхемаКомпоновки.ИсточникиДанных.Добавить();
	ИсточникДанныхСхемы.Имя = "ИсточникДанных1";
	ИсточникДанныхСхемы.ТипИсточникаДанных = "Local";
	
	НаборОбъединение = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(СхемаКомпоновки,
		Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных"),
		"СледующийУровеньРеквизитовТекущейСтроки");
	
	СвойстваИсточниковХарактеристик = РаботаСФормуламиПовтИсп.СвойстваПоддерживаемыхИсточниковХарактеристик();
	
	ТипыДанныхСтроки = ОписаниеТипов.Типы();
	Для Каждого ТипЗначения Из ТипыДанныхСтроки Цикл
		ОбъектМД = ОбъектМетаданныхПоТипуЗначения(ТипЗначения);
		Если ОбъектМД = Неопределено Тогда
			Продолжить
		КонецЕсли;
		ВидОбъектаМД = ВидОбъектаМетаданных(ОбъектМД);
		Если ВидОбъектаМД = Неопределено Тогда
			// Перечисление не имеет реквизитов
			Продолжить;
		КонецЕсли;
		
		// Выполнение в одном запросе текста по всем типам невозможно из-за превышения допустимой длины запроса на SQL
		// (выборка пустой ссылки).
		ИмяНабора = ВидОбъектаМД + "_" + ОбъектМД.Имя;
		НаборТекущегоТипаРеквизита = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(НаборОбъединение,
			Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"),
			ИмяНабора);
		
		
		ТекстНабораДанных = "";
		ТекстыХарактеристик = Новый Массив;
		
		
		// Соответствие Ключ - объект метаданных вид характеристик, Значение - ОписаниеХарактеристик.
		ИспользуемыеИсточникиХарактеристик = Новый Соответствие;
		
		Если ВыводитьХарактеристики Тогда
			
			ЗаполнитьИспользуемыеИсточникиХарактеристик(ИспользуемыеИсточникиХарактеристик,
				ОбъектМД,
				СвойстваИсточниковХарактеристик);
		КонецЕсли;
		
		ТекстЗапроса = "ВЫБРАТЬ
		|	&ВыражениеПустаяСсылка КАК Реквизит
		|{ВЫБРАТЬ Реквизит.*}
		|ИЗ
		|	&ТаблицаИсточника КАК ТаблицаИсточника
		|{ГДЕ (&ВыражениеПустаяСсылка).* КАК Реквизит}";
		
		ВыражениеПустаяСсылка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"ЗНАЧЕНИЕ(%1.%2.ПустаяСсылка)",
			ВидОбъектаМД,
			ОбъектМД.Имя);
		
		ТаблицаИсточника = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1.%2",
			ВидОбъектаМД,
			ОбъектМД.Имя);
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВыражениеПустаяСсылка", ВыражениеПустаяСсылка);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТаблицаИсточника", ТаблицаИсточника);
		
		ВыражениеТипаИсточника = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"%1.%2",
				ВидОбъектаМД,
				ОбъектМД.Имя);
		
		Если ИспользуемыеИсточникиХарактеристик.Количество() = 0 Тогда
			
			ШаблонТекстаХарактеристик = "
			|{ХАРАКТЕРИСТИКИ
			|	ТИП(&ВыражениеТипаИсточника)
			|	ВИДЫХАРАКТЕРИСТИК (ВЫБРАТЬ
			|			НЕОПРЕДЕЛЕНО КАК Идентификатор,
			|			"""" КАК Имя,
			|			НЕОПРЕДЕЛЕНО КАК ТипЗначения
			|		ГДЕ ЛОЖЬ)
			|	ПОЛЕКЛЮЧА Идентификатор
			|	ПОЛЕИМЕНИ Имя
			|	ПОЛЕТИПАЗНАЧЕНИЯ ТипЗначения
			|	ЗНАЧЕНИЯХАРАКТЕРИСТИК (ВЫБРАТЬ
			|			НЕОПРЕДЕЛЕНО КАК Ссылка,
			|			НЕОПРЕДЕЛЕНО КАК Свойство,
			|			НЕОПРЕДЕЛЕНО КАК Значение
			|		ГДЕ ЛОЖь)
			|	ПОЛЕОБЪЕКТА Ссылка
			|	ПОЛЕВИДА Свойство
			|	ПОЛЕЗНАЧЕНИЯ Значение }";
			ТекстХарактеристик = СтрЗаменить(ШаблонТекстаХарактеристик,
				"&ВыражениеТипаИсточника", ВыражениеТипаИсточника);
			
			ТекстыХарактеристик.Добавить(ТекстХарактеристик);
			
		Иначе
			
			ШаблонТекстаХарактеристик = "
			|{ХАРАКТЕРИСТИКИ
			|	ТИП(&ВыражениеТипаИсточника)
			|	ВИДЫХАРАКТЕРИСТИК (&ТекстПодзапросаИсточникиХарактеристик
			|		)
			|	ПОЛЕКЛЮЧА Идентификатор
			|	ПОЛЕИМЕНИ Имя
			|	ПОЛЕТИПАЗНАЧЕНИЯ ТипЗначения
			|	ЗНАЧЕНИЯХАРАКТЕРИСТИК (&ТекстПодзапросаИсточникиЗначений)
			|	ПОЛЕОБЪЕКТА Ссылка
			|	ПОЛЕВИДА Свойство
			|	ПОЛЕЗНАЧЕНИЯ Значение }";
			
			ТекстПодзапросаИсточникиХарактеристик = "";
			
			ТекстПодзапросаИсточникиЗначений = "";
			
			Для Каждого ОбъектИсточникаИОписанияХарактеристик Из ИспользуемыеИсточникиХарактеристик Цикл
				
				МДИсточникаХарактеристик = ОбъектИсточникаИОписанияХарактеристик.Ключ;
				ОписанияХарактеристикВМетаданных = ОбъектИсточникаИОписанияХарактеристик.Значение;
				
				СвойстваИсточника = СвойстваИсточниковХарактеристик.Найти(МДИсточникаХарактеристик, "МетаданныеИсточника");
				
				Для Каждого ОписаниеХарактеристикВМетаданных Из ОписанияХарактеристикВМетаданных Цикл
					
					// В подзапрос выборки видов характеристик нельзя помещать объединение подзапросов, поэтому
					// каждый набор характеристик - новый запрос.
					ТекстПодзапросаИсточникиХарактеристик = ТекстПодзапросаИсточниковВидовХарактеристик(
						СвойстваИсточника,
						ОписаниеХарактеристикВМетаданных,
						НаборыДополнительныхРеквизитов,
						Истина);
					
					ТекстПодзапросаИсточникиЗначений = ТекстПодзапросаИсточниковЗначенийХарактеристик(ОписаниеХарактеристикВМетаданных);
					
					ТекстХарактеристик = ШаблонТекстаХарактеристик;
					ТекстХарактеристик = СтрЗаменить(ТекстХарактеристик, "&ТекстПодзапросаИсточникиХарактеристик", ТекстПодзапросаИсточникиХарактеристик);
					ТекстХарактеристик = СтрЗаменить(ТекстХарактеристик, "&ТекстПодзапросаИсточникиЗначений", ТекстПодзапросаИсточникиЗначений);
					ТекстХарактеристик = СтрЗаменить(ТекстХарактеристик, "&ВыражениеТипаИсточника", ВыражениеТипаИсточника);
					
					ТекстыХарактеристик.Добавить(ТекстХарактеристик);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ТекстНабораДанных = ТекстЗапроса + СтрСоединить(ТекстыХарактеристик, Символы.ПС);
		
		НаборТекущегоТипаРеквизита.Запрос = ТекстНабораДанных;
		
		НаборТекущегоТипаРеквизита.АвтоЗаполнениеДоступныхПолей = Ложь;
		ПоляНабора = НаборТекущегоТипаРеквизита.Поля; // ПоляНабораДанныхСхемыКомпоновкиДанных -
		ПолеНабора = ПоляНабора.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ПолеНабора.Поле = "Реквизит"; // Служебное обрабатываемое имя.
		ПолеНабора.ПутьКДанным = "Реквизит"; // Служебное обрабатываемое имя.
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипЗначения);
		ПолеНабора.ТипЗначения = Новый ОписаниеТипов(МассивТипов);
		
	КонецЦикла;
	
	ПоляНабора = НаборОбъединение.Поля; // ПоляНабораДанныхСхемыКомпоновкиДанных -
	ПолеНабора = ПоляНабора.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	ПолеНабора.Поле = "Реквизит"; // Служебное обрабатываемое имя.
	ПолеНабора.ПутьКДанным = "Реквизит"; // Служебное обрабатываемое имя.
	ПолеНабора.ТипЗначения = ОписаниеТипов;
	
	Если ВыводитьХарактеристики
		И ТипЗнч(НаборыДополнительныхРеквизитов) = Тип("Массив")
		И НаборыДополнительныхРеквизитов.Количество() > 0 Тогда
		ПараметрКомпоновки = СхемаКомпоновки.Параметры.Добавить();
		ПараметрКомпоновки.Имя = "НаборыДополнительныхРеквизитов";
		ПараметрКомпоновки.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		ПараметрКомпоновки.Значение = НаборыДополнительныхРеквизитов;
		ПараметрКомпоновки.ДоступенСписокЗначений = Истина;
	КонецЕсли;
	
	Возврат СхемаКомпоновки;
	
КонецФункции

// Возвращает пустую таблицу описания характеристик в метаданных. Повторяет колонки соответствующих свойств в метаданных.
// 
// Возвращаемое значение:
// 	ТаблицаЗначений - таблица описания характеристик в метаданных:
// 	  * ВидыХарактеристик - ОбъектМетаданных - (виды характеристик) объект источника видов характеристик.
// 	  * ПолеКлюча - ОбъектМетаданных - (виды характеристик) поле ключа источника характеристик.
//    * ПолеОтбораВидов - ОбъектМетаданных, Неопределено - (виды характеристик) поле отбора источника характеристик.
// 				Неопределено - значение по умолчанию, если отбор в метаданных не задан.
//    * ЗначениеОтбораВидов - Неопределено, ЛюбаяСсылка, Булево, Число, Строка, Дата - значение отбора.
//    * ЗначенияХарактеристик - ОбъектМетаданных - (значения характеристик) объект источника значений характеристик.
// 	  * ПолеОбъекта - ОбъектМетаданных - (значения характеристик) поле объекта, которому принадлежат характеристики.
// 	  * ПолеВида - ОбъектМетаданных - (значения характеристик) поле, в котором содержится вид характеристики.
// 	  * ПолеЗначения - ОбъектМетаданных - (значения характеристик) поле, в котором содержится значение характеристики.
//
Функция ТаблицаСвойствХарактеристикПоМетаданным()
	ТаблицаСвойствХарактеристик = Новый ТаблицаЗначений();
	// Колонки описания видов характеристик.
	ТаблицаСвойствХарактеристик.Колонки.Добавить("ВидыХарактеристик");
	ТаблицаСвойствХарактеристик.Колонки.Добавить("ПолеКлюча");
	ТаблицаСвойствХарактеристик.Колонки.Добавить("ПолеОтбораВидов");
	ТаблицаСвойствХарактеристик.Колонки.Добавить("ЗначениеОтбораВидов");
	
	// Колонки описания значений характеристик.
	ТаблицаСвойствХарактеристик.Колонки.Добавить("ЗначенияХарактеристик");
	ТаблицаСвойствХарактеристик.Колонки.Добавить("ПолеОбъекта");
	ТаблицаСвойствХарактеристик.Колонки.Добавить("ПолеВида");
	ТаблицаСвойствХарактеристик.Колонки.Добавить("ПолеЗначения");
	
	Возврат ТаблицаСвойствХарактеристик;
КонецФункции

// Заполняет соответствие используемых источников характеристик
// 
// Параметры:
// 	ИспользуемыеИсточникиХарактеристик - Соответствие из КлючИЗначение - соответствие метаданных источника характеристик и таблицы описания свойств характеристик по метаданным:
// 	  * Ключ - ОбъектМетаданных - объект метаданных источника характеристик, например Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения
// 	  * Значение - см. ТаблицаСвойствХарактеристикПоМетаданным
// 	ОбъектМД - ОбъектМетаданныхСправочник - объект метаданных поля дерева операндов, содержащего характеристики, например, Метаданные.Справочники.Организации.
// 	         - ОбъектМетаданныхДокумент - объект метаданных поля дерева операндов.
// 	         - ОбъектМетаданныхПланОбмена - объект метаданных поля дерева операндов.
// 	         - ОбъектМетаданныхПланВидовХарактеристик - объект метаданных поля дерева операндов.
// 	         - ОбъектМетаданныхПланСчетов - объект метаданных поля дерева операндов.
// 	         - ОбъектМетаданныхПланВидовРасчета - объект метаданных поля дерева операндов.
// 	         - ОбъектМетаданныхБизнесПроцесс - объект метаданных поля дерева операндов.
// 	         - ОбъектМетаданныхЗадача - объект метаданных поля дерева операндов.
// 	СвойстваИсточниковХарактеристик - см. РаботаСФормуламиПовтИсп.СвойстваПоддерживаемыхИсточниковХарактеристик
// 	ОтборПоМетаданнымИсточникаХарактеристик - Неопределено, ОбъектМетаданных - Пустое значение отбора по метаданным источника характеристик.
// 				В случае указания объекта метаданных - значение отбора по метаданным источника характеристик. Например, Метаданные.Справочники.ВидыКонтактнойИнформации.
//
Процедура ЗаполнитьИспользуемыеИсточникиХарактеристик(ИспользуемыеИсточникиХарактеристик, ОбъектМД, СвойстваИсточниковХарактеристик,
				ОтборПоМетаданнымИсточникаХарактеристик = Неопределено)
	
	Для Каждого ОписаниеХарактеристик Из ОбъектМД.Характеристики Цикл
		Если ОписаниеХарактеристик.ПолеКлюча = Неопределено
				ИЛИ ОписаниеХарактеристик.ПолеОбъекта = Неопределено
				ИЛИ ОписаниеХарактеристик.ПолеВида = Неопределено
				ИЛИ ОписаниеХарактеристик.ВидыХарактеристик = Неопределено
				ИЛИ ОписаниеХарактеристик.ЗначенияХарактеристик = Неопределено Тогда
				// Ошибочное заполнение характеристик.
			Продолжить;
		КонецЕсли;
		ПолеКлюча = ОписаниеХарактеристик.ПолеКлюча.Имя;
		ИсточникиХарактеристик = ОписаниеХарактеристик.ВидыХарактеристик;
		ПолеИсточниковХарактеристик = ИсточникиХарактеристик.Реквизиты.Найти(ПолеКлюча);
		Если ПолеИсточниковХарактеристик = Неопределено Тогда
			ПолеИсточниковХарактеристик = ИсточникиХарактеристик.СтандартныеРеквизиты[ПолеКлюча];
		КонецЕсли;
		Если ПолеИсточниковХарактеристик = Неопределено Тогда
			Если СтрНайти(ВРЕГ(ОписаниеХарактеристик.ВидыХарактеристик.ПолноеИмя()), ВРЕГ(".ТабличнаяЧасть.")) > 0
				И ВРЕГ(ПолеКлюча) = "ССЫЛКА" Тогда
				ВладелецТЧ = ОписаниеХарактеристик.ВидыХарактеристик.Родитель(); // ОбъектМетаданныхСправочник - 
				ПолеИсточниковХарактеристик = ВладелецТЧ.СтандартныеРеквизиты[ПолеКлюча];
			КонецЕсли;
		КонецЕсли;
		ТипыИсточниковХарактеристик = ПолеИсточниковХарактеристик.Тип.Типы();
		Для Каждого ТипИсточникаХарактеристик Из ТипыИсточниковХарактеристик Цикл
			МДИсточникаХарактеристик = Метаданные.НайтиПоТипу(ТипИсточникаХарактеристик);
			
			СвойстваИсточника = СвойстваИсточниковХарактеристик.Найти(МДИсточникаХарактеристик, "МетаданныеИсточника");
			Если СвойстваИсточника = Неопределено Тогда
				// Не доступный источник характеристик.
				Продолжить;
			КонецЕсли;
			Если НЕ ОтборПоМетаданнымИсточникаХарактеристик = Неопределено
				И МДИсточникаХарактеристик <> ОтборПоМетаданнымИсточникаХарактеристик Тогда
				Продолжить;
			КонецЕсли;
			
			ОписанияХарактеристик = ИспользуемыеИсточникиХарактеристик.Получить(МДИсточникаХарактеристик);
			Если ОписанияХарактеристик = Неопределено Тогда
				ОписанияХарактеристик = ТаблицаСвойствХарактеристикПоМетаданным();
			КонецЕсли;
			СтрокаОписанияХарактеристик = ОписанияХарактеристик.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОписанияХарактеристик, ОписаниеХарактеристик);
			ИспользуемыеИсточникиХарактеристик.Вставить(МДИсточникаХарактеристик, ОписанияХарактеристик);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает текст подзапроса источников вида характеристик
// 
// Параметры:
// 	СвойстваИсточника - СтрокаТаблицыЗначений - Описание свойств вида характеристик.
// 	ОписаниеХарактеристикВМетаданных - СтрокаТаблицыЗначений - Строка таблицы описаний характеристик по метаданным. Конструктор таблицы см. ТаблицаСвойствХарактеристикПоМетаданным.
// 	НаборыДополнительныхРеквизитов - Массив из СправочникСсылка.НаборыДополнительныхРеквизитовИСведений - Дополнительный отбор по наборам дополнительных реквизитов и сведений.
// 	НаборыДополнительныхРеквизитов - Неопределено - Значение по умолчанию.
// 	ДляСКД - Булево - Флаг составления текста запроса для СКД.
// Возвращаемое значение:
// 	Строка - Текст подзапроса.
Функция ТекстПодзапросаИсточниковВидовХарактеристик(СвойстваИсточника, ОписаниеХарактеристикВМетаданных, НаборыДополнительныхРеквизитов = Неопределено, ДляСКД = Ложь)
	
	МДИсточникаХарактеристик = СвойстваИсточника.МетаданныеИсточника;
	ТаблицаВидовХарактеристик = РаботаСФормуламиПовтИсп.ПолноеИмяТаблицыДанных(МДИсточникаХарактеристик.ПолноеИмя());
	
	ПолеКлюча = ОписаниеХарактеристикВМетаданных.ПолеКлюча; // ОбъектМетаданныхПоле - 
	
	Если ОписаниеХарактеристикВМетаданных.ВидыХарактеристик = МДИсточникаХарактеристик Тогда
		
		ТекстПодзапроса =
		"ВЫБРАТЬ
		|	&ВыражениеПоляИдентификатора КАК Идентификатор,
		|	&ВыражениеПоляИмени КАК Имя,
		|	&ВыражениеТипаЗначения КАК ТипЗначения
		|ИЗ
		|	&ИсточникВидовХарактеристик КАК ТаблицаВидовХарактеристик
		|ГДЕ
		|	&УсловияОтбораВидовХарактеристик";
		
	Иначе
		
		ТекстПодзапроса =
		"ВЫБРАТЬ
		|	&ВыражениеПоляИдентификатора КАК Идентификатор,
		|	&ВыражениеПоляИмени КАК Имя,
		|	&ВыражениеТипаЗначения КАК ТипЗначения
		|ИЗ
		|	&ИсточникВидовХарактеристик КАК ТаблицаИсточник
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	#ТаблицаВидовХарактеристик КАК ТаблицаВидовХарактеристик
		|ПО
		|	&УсловиеСоединения
		|ГДЕ
		|	&УсловияОтбораВидовХарактеристик";
		
		УсловиеСоединения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"ТаблицаИсточник.%1 = ТаблицаВидовХарактеристик.Ссылка",
		ПолеКлюча.Имя);
		
		ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "#ТаблицаВидовХарактеристик", ТаблицаВидовХарактеристик);
		ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "&УсловиеСоединения", УсловиеСоединения);
		
	КонецЕсли;
	
	ИсточникВидовХарактеристик = РаботаСФормуламиПовтИсп.ПолноеИмяТаблицыДанных(
		ОписаниеХарактеристикВМетаданных.ВидыХарактеристик.ПолноеИмя());
	
	Если ОписаниеХарактеристикВМетаданных.ВидыХарактеристик = МДИсточникаХарактеристик Тогда
		
		ВыражениеПоляИдентификатора = "ТаблицаВидовХарактеристик."
			+ ПолеКлюча.Имя;
		
	Иначе
		
		ВыражениеПоляИдентификатора = "ТаблицаИсточник."
			+ ПолеКлюча.Имя;
		
	КонецЕсли;
	
	ВыражениеПоляИмени = ВыражениеПолногоИдентификатораХарактеристики(МДИсточникаХарактеристик, ДляСКД);
	ВыражениеПоляИмени = СтрЗаменить(ВыражениеПоляИмени, "%ИмяТаблицы%", "ТаблицаВидовХарактеристик");
	
	Если СвойстваИсточника.ИспользуетсяВыражениеТипаЗначений Тогда
		ВыражениеТипаЗначения = СвойстваИсточника.ВыражениеТипаЗначений;
	Иначе
		ВыражениеТипаЗначения = "ТаблицаВидовХарактеристик."
			+ СвойстваИсточника.ПолеТипаЗначений;
	КонецЕсли;
	
	УсловияОтбораВидовХарактеристик = "";
	Если ОписаниеХарактеристикВМетаданных.ПолеОтбораВидов <> Неопределено Тогда
		
		УсловияОтбораВидовХарактеристик = УсловиеОтбораХарактеристикПоДаннымМетаданных(ОписаниеХарактеристикВМетаданных,
			МДИсточникаХарактеристик,
			"ТаблицаИсточник",
			"ТаблицаВидовХарактеристик");
		
		ВыражениеДополнительногоОтбора = "";
		Если МДИсточникаХарактеристик = Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения Тогда
			Если ТипЗнч(НаборыДополнительныхРеквизитов) = Тип("Массив")
				И НаборыДополнительныхРеквизитов.Количество() > 0 Тогда
				// Выражение дополнительных отборов источника характеристик должно содержать только условия к полям ТаблицаВидовХарактеристик
				// т.к. дополнительные условия задаются на объект метаданных видов характеристик.
				ВыражениеДополнительногоОтбора =
				"ТаблицаВидовХарактеристик.Ссылка В
				|	(&ВыражениеВыборкиДопРеквизитов)";
				ШаблонВыраженияВыборкиДопРеквизитов =
				"ВЫБРАТЬ
				|	НаборыСвойствСостав.Свойство КАК Свойство
				|ИЗ
				|	&ТаблицаНаборов КАК НаборыСвойствСостав
				|ГДЕ
				|	НаборыСвойствСостав.Ссылка В (&НаборыДополнительныхРеквизитов)";
				Если ОписаниеХарактеристикВМетаданных.ВидыХарактеристик = Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений.ТабличныеЧасти.ДополнительныеРеквизиты Тогда
					ВыражениеВыборки = СтрЗаменить(ШаблонВыраженияВыборкиДопРеквизитов,
						"&ТаблицаНаборов", "Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты");
				ИначеЕсли ОписаниеХарактеристикВМетаданных.ВидыХарактеристик = Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений.ТабличныеЧасти.ДополнительныеСведения Тогда
					ВыражениеВыборки = СтрЗаменить(ШаблонВыраженияВыборкиДопРеквизитов,
						"&ТаблицаНаборов", "Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения");
				Иначе
					ВыражениеВыборки = СтрЗаменить(ШаблонВыраженияВыборкиДопРеквизитов,
						"&ТаблицаНаборов", "Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты")
						+ "
						|
						|ОБЪЕДИНИТЬ ВСЕ
						|
						|"
						+ СтрЗаменить(ШаблонВыраженияВыборкиДопРеквизитов,
						"&ТаблицаНаборов", "Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения");
				КонецЕсли;
				ВыражениеДополнительногоОтбора = СтрЗаменить(ВыражениеДополнительногоОтбора, "&ВыражениеВыборкиДопРеквизитов", ВыражениеВыборки);
			КонецЕсли;
		КонецЕсли;
		Если УсловияОтбораВидовХарактеристик <> ""
			И ВыражениеДополнительногоОтбора <> "" Тогда
			УсловияОтбораВидовХарактеристик = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1 И %2",
			УсловияОтбораВидовХарактеристик,
			ВыражениеДополнительногоОтбора);
		ИначеЕсли УсловияОтбораВидовХарактеристик = ""
			И ВыражениеДополнительногоОтбора <> "" Тогда
			УсловияОтбораВидовХарактеристик = ВыражениеДополнительногоОтбора;
		КонецЕсли;
	КонецЕсли;
	УсловияОтбораВидовХарактеристик = УсловияОтбораВидовХарактеристик + ?(УсловияОтбораВидовХарактеристик = "", "", " " + "И" + " ")
		+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("(ТаблицаВидовХарактеристик.%1 <> """")",
			СвойстваИсточника.ПолеИдентификатора);
	
	ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "&ВыражениеПоляИдентификатора", ВыражениеПоляИдентификатора);
	ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "&ВыражениеПоляИмени", ВыражениеПоляИмени);
	ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "&ВыражениеТипаЗначения", ВыражениеТипаЗначения);
	ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "&ИсточникВидовХарактеристик", ИсточникВидовХарактеристик);
	ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "&УсловияОтбораВидовХарактеристик", УсловияОтбораВидовХарактеристик);
	
	Возврат ТекстПодзапроса;
	
КонецФункции

// Возвращает текст условия по описанию характеристик, заданному в метаданных.
// 
// Параметры:
// 	ОписаниеХарактеристикВМетаданных - СтрокаТаблицыЗначений - Строка таблицы описаний характеристик по метаданным. Конструктор таблицы см. ТаблицаСвойствХарактеристикПоМетаданным:
// 	 * ВидыХарактеристик - ОбъектМетаданныхСправочник - (виды характеристик) объект источника видов характеристик.
// 	 * ВидыХарактеристик - ОбъектМетаданныхДокумент - (виды характеристик) объект источника видов характеристик.
// 	 * ВидыХарактеристик - ОбъектМетаданныхПланОбмена - (виды характеристик) объект источника видов характеристик.
// 	 * ВидыХарактеристик - ОбъектМетаданныхПланВидовХарактеристик - (виды характеристик) объект источника видов характеристик.
// 	 * ВидыХарактеристик - ОбъектМетаданныхПланВидовРасчета - (виды характеристик) объект источника видов характеристик.
// 	 * ВидыХарактеристик - ОбъектМетаданныхБизнесПроцесс - (виды характеристик) объект источника видов характеристик.
// 	 * ВидыХарактеристик - ОбъектМетаданныхЗадача - (виды характеристик) объект источника видов характеристик.
// 	 * ВидыХарактеристик - ОбъектМетаданныхТабличнаяЧасть - (виды характеристик) объект источника видов характеристик.
// 	 * ПолеКлюча - ОбъектМетаданных - (виды характеристик) поле ключа источника характеристик.
// 	 * ПолеОтбораВидов - ОбъектМетаданныхПоле - (виды характеристик) поле отбора источника характеристик.
// 	 * ПолеОтбораВидов - Неопределено - значение по умолчанию, если отбор в метаданных не задан.
// 	 * ЗначениеОтбораВидов - Неопределено, ЛюбаяСсылка, Булево, Число, Строка, Дата - значение отбора.
// 	 * ЗначенияХарактеристик - ОбъектМетаданных - (значения характеристик) объект источника значений характеристик.
// 	 * ПолеОбъекта - ОбъектМетаданных - (значения характеристик) поле объекта, которому принадлежат характеристики.
// 	 * ПолеВида - ОбъектМетаданных - (значения характеристик) поле, в котором содержится вид характеристики.
// 	 * ПолеЗначения - ОбъектМетаданных - (значения характеристик) поле, в котором содержится значение характеристики.
// 	МДВидовХарактеристик - ОбъектМетаданныхСправочник - Метаданные видов характеристик. Например, ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.
// 	МДВидовХарактеристик - ОбъектМетаданныхДокумент - Метаданные видов характеристик.
// 	МДВидовХарактеристик - ОбъектМетаданныхПланОбмена - Метаданные видов характеристик.
// 	МДВидовХарактеристик - ОбъектМетаданныхПланВидовХарактеристик - Метаданные видов характеристик.
// 	МДВидовХарактеристик - ОбъектМетаданныхПланСчетов - Метаданные видов характеристик.
// 	МДВидовХарактеристик - ОбъектМетаданныхПланВидовРасчета - Метаданные видов характеристик.
// 	МДВидовХарактеристик - ОбъектМетаданныхБизнесПроцесс - Метаданные видов характеристик.
// 	МДВидовХарактеристик - ОбъектМетаданныхЗадача - Метаданные видов характеристик.
// 	ИмяТаблицыИсточник - Строка - Имя таблицы, для которой указывается условие, в случае, если таблица источника характеристик, как это задано в метаданных,
// 					(например, Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты)
// 					НЕ совпадает с таблицей самого вида характеристик (например, Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения).
// 	ИмяТаблицыВидовХарактеристик - Строка - Имя таблицы, для которой указывается условие, в случае, если таблица источника характеристик, как это задано в метаданных,
// 					(например, Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты)
// 					совпадает с таблицей самого вида характеристик (например, Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения).
//
// Возвращаемое значение:
// 	Строка - Текст условия по описанию характеристик, заданному в метаданных.
//
Функция УсловиеОтбораХарактеристикПоДаннымМетаданных(ОписаниеХарактеристикВМетаданных, МДВидовХарактеристик, ИмяТаблицыИсточник, ИмяТаблицыВидовХарактеристик)
	УсловияОтбораВидовХарактеристик = "";
	
	Если ОписаниеХарактеристикВМетаданных.ПолеОтбораВидов <> Неопределено Тогда
		
		ПолеОтбораВидов = ОписаниеХарактеристикВМетаданных.ПолеОтбораВидов; // ОбъектМетаданныхПоле - 
		ВыражениеВидаСравнения = "";
		ВыражениеЗначения = "";
		
		ЗначениеОтбораВидов = ОписаниеХарактеристикВМетаданных.ЗначениеОтбораВидов;
		ТипЗначенияОтбораВидов = ТипЗнч(ЗначениеОтбораВидов);
		Если ОбщегоНазначения.ЭтоСсылка(ТипЗначенияОтбораВидов) Тогда
			ВидМетаданных = ЗначениеОтбораВидов.Метаданные();
			ВыражениеВидаСравнения = "=";
			ВыражениеЗначения = "ЗНАЧЕНИЕ(%1)";
			ВыражениеЗначения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ВыражениеЗначения,
				РаботаСФормуламиПовтИсп.ПолноеИмяТаблицыДанных(ВидМетаданных.ПолноеИмя())
					+ "." + ЗначениеОтбораВидов.ИмяПредопределенныхДанных);
		Иначе
			ВыражениеВидаСравнения = "=";
			Если ТипЗначенияОтбораВидов = Тип("Строка") Тогда
				ВыражениеЗначения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"""%1""",
					ЗначениеОтбораВидов);
			ИначеЕсли ТипЗначенияОтбораВидов = Тип("Булево") Тогда
				ВыражениеЗначения = ?(ЗначениеОтбораВидов, "ИСТИНА", "ЛОЖЬ");
			ИначеЕсли ТипЗначенияОтбораВидов = Тип("Дата") Тогда
				ВыражениеЗначения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"ДАТАВРЕМЯ(%1,%2,%3,%4,%5,%6)",
					Год(ЗначениеОтбораВидов),
					Месяц(ЗначениеОтбораВидов),
					День(ЗначениеОтбораВидов),
					Час(ЗначениеОтбораВидов),
					Минута(ЗначениеОтбораВидов),
					Секунда(ЗначениеОтбораВидов));
			Иначе
				ВыражениеЗначения = "НЕОПРЕДЕЛЕНО";
			КонецЕсли;
		КонецЕсли;
		Если ОписаниеХарактеристикВМетаданных.ВидыХарактеристик = МДВидовХарактеристик Тогда
			УсловияОтбораВидовХарактеристик = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"&ТаблицаВидовХарактеристик.%1 %2 %3",
				ПолеОтбораВидов.Имя,
				ВыражениеВидаСравнения,
				ВыражениеЗначения);
			УсловияОтбораВидовХарактеристик = СтрЗаменить(УсловияОтбораВидовХарактеристик, "&ТаблицаВидовХарактеристик", ИмяТаблицыВидовХарактеристик);
		Иначе
			УсловияОтбораВидовХарактеристик = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"&ТаблицаИсточник.%1 %2 %3",
				ПолеОтбораВидов.Имя,
				ВыражениеВидаСравнения,
				ВыражениеЗначения);
			УсловияОтбораВидовХарактеристик = СтрЗаменить(УсловияОтбораВидовХарактеристик, "&ТаблицаИсточник", ИмяТаблицыИсточник);
		КонецЕсли;
	КонецЕсли;
	
	
	Возврат УсловияОтбораВидовХарактеристик;
	
КонецФункции

// Возвращает текст подзапроса источников значений характеристик.
// 
// Параметры:
// 	ОписаниеХарактеристик - СтрокаТаблицыЗначений - Строка таблицы описаний характеристик по метаданным. Конструктор таблицы см. ТаблицаСвойствХарактеристикПоМетаданным:
//
// Возвращаемое значение:
// 	Строка - Текст подзапроса источников значений характеристик.
//
Функция ТекстПодзапросаИсточниковЗначенийХарактеристик(ОписаниеХарактеристик)
	ТекстПодзапроса =
	"ВЫБРАТЬ
	|	&ВыражениеПоляОбъекта КАК Ссылка,
	|	&ВыражениеПоляВида КАК Свойство,
	|	&ВыражениеПоляЗначения КАК Значение
	|ИЗ
	|	&ИсточникЗначенийХарактеристик КАК ТаблицаЗначенийХарактеристик";
	
	ПолеОбъекта = ОписаниеХарактеристик.ПолеОбъекта; // ОбъектМетаданныхПоле - 
	ПолеВида = ОписаниеХарактеристик.ПолеВида; // ОбъектМетаданныхПоле -
	ПолеЗначения = ОписаниеХарактеристик.ПолеЗначения; // ОбъектМетаданныхПоле -
	
	ИсточникЗначенийХарактеристик = РаботаСФормуламиПовтИсп.ПолноеИмяТаблицыДанных(
		ОписаниеХарактеристик.ЗначенияХарактеристик.ПолноеИмя());
	ВыражениеПоляОбъекта = "ТаблицаЗначенийХарактеристик." + ПолеОбъекта.Имя;
	ВыражениеПоляВида = "ТаблицаЗначенийХарактеристик." + ПолеВида.Имя;
	Если ОписаниеХарактеристик.ПолеЗначения = Неопределено Тогда
		ВыражениеПоляЗначения = "НЕОПРЕДЕЛЕНО";
	Иначе
		ВыражениеПоляЗначения = "ТаблицаЗначенийХарактеристик." + ПолеЗначения.Имя;
	КонецЕсли;
	
	ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "&ИсточникЗначенийХарактеристик", ИсточникЗначенийХарактеристик);
	ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "&ВыражениеПоляОбъекта", ВыражениеПоляОбъекта);
	ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "&ВыражениеПоляВида", ВыражениеПоляВида);
	ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "&ВыражениеПоляЗначения", ВыражениеПоляЗначения);
	
	Возврат ТекстПодзапроса;
	
КонецФункции

Функция ПолноеИмяТаблицыДанных(ОбъектМетаданных) Экспорт
	
	Если ТипЗнч(ОбъектМетаданных) = Тип("Строка") Тогда
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ОбъектМетаданных);
	КонецЕсли;
	
	Если ОбщегоНазначения.ЭтоСправочник(ОбъектМетаданных) Тогда
		Результат = "Справочник." + ОбъектМетаданных.Имя;
	ИначеЕсли ОбщегоНазначения.ЭтоДокумент(ОбъектМетаданных) Тогда
		Результат = "Документ." + ОбъектМетаданных.Имя;
	ИначеЕсли ОбщегоНазначения.ЭтоПланВидовХарактеристик(ОбъектМетаданных) Тогда
		Результат = "ПланВидовХарактеристик." + ОбъектМетаданных.Имя;
	ИначеЕсли ОбщегоНазначения.ЭтоРегистрСведений(ОбъектМетаданных) Тогда
		Результат = "РегистрСведений." + ОбъектМетаданных.Имя;
	ИначеЕсли ОбщегоНазначения.ЭтоПланСчетов(ОбъектМетаданных) Тогда
		Результат = "ПланСчетов." + ОбъектМетаданных.Имя;
	ИначеЕсли ОбщегоНазначения.ЭтоПланВидовРасчета(ОбъектМетаданных) Тогда
		Результат = "ПланВидовРасчета." + ОбъектМетаданных.Имя;
	ИначеЕсли ОбщегоНазначения.ЭтоПланОбмена(ОбъектМетаданных) Тогда
		Результат = "ПланОбмена." + ОбъектМетаданных.Имя;
	ИначеЕсли ОбщегоНазначения.ЭтоБизнесПроцесс(ОбъектМетаданных) Тогда
		Результат = "БизнесПроцесс." + ОбъектМетаданных.Имя;
	ИначеЕсли ОбщегоНазначения.ЭтоЗадача(ОбъектМетаданных) Тогда
		Результат = "Задача." + ОбъектМетаданных.Имя;
	Иначе
		// Табличная часть.
		РодительскийОбъектМД = ОбъектМетаданных.Родитель();
		Результат = ПолноеИмяТаблицыДанных(РодительскийОбъектМД)
			+ "." + ОбъектМетаданных.Имя;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РаботаСДеревомОперандов

// Дополняет массив разворачиваемых групп группами, входящими в состав ПутьКДанным поля компоновки (в случае если группы указаны).
// 
// Параметры:
// 	РазворачиваемыеГруппыПолейСКД - Массив из Строка - Перечисление групп, которые необходимо развернуть сразу
// 			при добавлении полей по схеме компановки.
// 	ПутьКДаннымПоля - Строка - Путь к данным поля компоновки.
Процедура ПроверитьДополнениеРазворачиваемыхГруппПолейСКД(РазворачиваемыеГруппыПолейСКД, ПутьКДаннымПоля)
	Если СтрНайти(ПутьКДаннымПоля, ".") > 0 Тогда
		// Поле включено в группу.
		ГруппыИПоле = СтрРазделить(ПутьКДаннымПоля, ".", Ложь);
		ГруппыИПоле.Удалить(ГруппыИПоле.Количество() - 1);
		ТолькоГруппы = СтрСоединить(ГруппыИПоле, ".");
		Если РазворачиваемыеГруппыПолейСКД.Найти(ТолькоГруппы) = Неопределено Тогда
			РазворачиваемыеГруппыПолейСКД.Добавить(ТолькоГруппы);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ОтсортированныйСписокПолейКомпоновки(ЭлементыДоступныхПолейКомпоновки, ПараметрыДобавленияСтроки, ПоляСОграничениемДоступностиРеквизитов = Неопределено)
	
	ОписаниеТипаИдентификатора = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(1000, ДопустимаяДлина.Переменная));
	ИдентификаторыХарактеристик = Новый Соответствие;
	СвойстваИсточниковХарактеристик = РаботаСФормуламиПовтИсп.СвойстваПоддерживаемыхИсточниковХарактеристик();
	
	ВидыХарактеристикСПереопределениемТипаЗначений = ПараметрыДобавленияСтроки.ВидыХарактеристикСПереопределениемТипаЗначений;
	// Быстрый поиск нужного элемента списка при дозаполнении представления и пометки удаления списка полей.
	ЭлементыСпискаДопХарактеристик = Новый Соответствие;
	
	Список = Новый СписокЗначений();
	
	ИменаПредопределенныхГруппСКД = Новый Массив;
	ИменаПредопределенныхГруппСКД.Добавить("СистемныеПоля");
	ИменаПредопределенныхГруппСКД.Добавить("ПараметрыДанных");
	
	Для Каждого ДоступноеПолеКомпоновки Из ЭлементыДоступныхПолейКомпоновки Цикл
		
		Если ДоступноеПолеКомпоновки.Папка
			И НЕ ДоступноеПолеКомпоновки.Таблица
			И ИменаПредопределенныхГруппСКД.Найти(Строка(ДоступноеПолеКомпоновки.Поле)) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		// Табличные части не выводятся.
		Если ДоступноеПолеКомпоновки.Таблица Тогда
			Продолжить;
		КонецЕсли;

		ИдентификаторПоля = ИдентификаторСтрокиПоляКомпоновки(ДоступноеПолеКомпоновки, ПараметрыДобавленияСтроки);
		
		ЗначениеЭлементаСписка = Новый Структура;
		ЗначениеЭлементаСписка.Вставить("Поле", ДоступноеПолеКомпоновки);
		ЗначениеЭлементаСписка.Вставить("ПометкаУдаления", Ложь);
		ЗначениеЭлементаСписка.Вставить("ТипЗначения", ДоступноеПолеКомпоновки.ТипЗначения); // Возможно будет переопределено ниже для характеристик.
		
		ЗначениеЭлементаСписка.Вставить("ЭтоХарактеристика", Ложь);
		ЗначениеЭлементаСписка.Вставить("ЭтоГруппа", Ложь);
		ЗначениеЭлементаСписка.Вставить("ЭтоТаблица", Ложь);
		
		Если ДоступноеПолеКомпоновки.Папка Тогда
			ЗначениеЭлементаСписка.ЭтоГруппа = Истина;
		КонецЕсли;
		Если ДоступноеПолеКомпоновки.Таблица Тогда
			ЗначениеЭлементаСписка.ЭтоТаблица = Истина;
		КонецЕсли;
		Если СтрНайти(ИдентификаторПоля, "{") > 0 Тогда
			ЗначениеЭлементаСписка.ЭтоХарактеристика = Истина;
		КонецЕсли;
		
		// Дополнительное влияние на тип элемента и пиктограмму элемента дерева
		ЗначениеЭлементаСписка.Вставить("ЭтоДополнительныйРеквизит", Ложь);
		ЗначениеЭлементаСписка.Вставить("ЭтоДополнительноеСведение", Ложь);
		ЗначениеЭлементаСписка.Вставить("ЭтоВидКонтактнойИнформации", Ложь);
		ЗначениеЭлементаСписка.Вставить("ТипКонтактнойИнформации", Неопределено);
		
		ЗначениеЭлементаСписка.Вставить("МетаданныеВидаХарактеристик", Неопределено);
		
		ЗначениеЭлементаСписка.Вставить("ОграничениеДоступностиРеквизитов", Ложь);
		Если ПоляСОграничениемДоступностиРеквизитов <> Неопределено
			И ПоляСОграничениемДоступностиРеквизитов.Найти(ИдентификаторПоля) <> Неопределено Тогда
			ЗначениеЭлементаСписка.ОграничениеДоступностиРеквизитов = Истина;
		КонецЕсли;
		
		ЭлементСписка = Список.Добавить(ЗначениеЭлементаСписка, "");
		
		ИдентификаторБезСкобок = СтрЗаменить(ИдентификаторПоля, "[", "");
		ИдентификаторБезСкобок = СтрЗаменить(ИдентификаторБезСкобок, "]", "");
		
		ИдентификаторБезСкобок = СтрЗаменить(ИдентификаторБезСкобок, "{", "");
		ИдентификаторБезСкобок = СтрЗаменить(ИдентификаторБезСкобок, "}", "");
		Если СтрНайти(ИдентификаторПоля, "{") > 0 Тогда
			Для Каждого СвойстваИсточникаХарактеристик Из СвойстваИсточниковХарактеристик Цикл
				ПрефиксТипаВидаХарактеристик = СвойстваИсточникаХарактеристик.ПрефиксТипаВидаХарактеристик;
				Если СтрНайти(ИдентификаторБезСкобок, ПрефиксТипаВидаХарактеристик) = 1 Тогда
					МетаданныеХарактеристики = СвойстваИсточникаХарактеристик.МетаданныеИсточника;
					ЭлементСписка.Значение.МетаданныеВидаХарактеристик = МетаданныеХарактеристики;
					ПереопределениеОписанияТипа = ВидыХарактеристикСПереопределениемТипаЗначений.Получить(МетаданныеХарактеристики);
					Если НЕ ПереопределениеОписанияТипа = Неопределено Тогда
						ЭлементСписка.Значение.ТипЗначения = ПереопределениеОписанияТипа;
					КонецЕсли;
					
					ИдентификаторБезТипаИсточника = Сред(ИдентификаторБезСкобок, СтрДлина(ПрефиксТипаВидаХарактеристик) + 1);
					ТаблицаИдентификаторов = ИдентификаторыХарактеристик.Получить(ПрефиксТипаВидаХарактеристик);
					Если ТаблицаИдентификаторов = Неопределено Тогда
						ТаблицаИдентификаторов = Новый ТаблицаЗначений;
						ТаблицаИдентификаторов.Колонки.Добавить("ИдентификаторПоля", ОписаниеТипаИдентификатора);
						ТаблицаИдентификаторов.Колонки.Добавить("ЗначениеПоляИмени", ОписаниеТипаИдентификатора);
					КонецЕсли;
					СтрокаИдентификатора = ТаблицаИдентификаторов.Добавить();
					СтрокаИдентификатора.ИдентификаторПоля = ИдентификаторПоля;
					СтрокаИдентификатора.ЗначениеПоляИмени = ИдентификаторБезТипаИсточника;
					
					ИдентификаторыХарактеристик.Вставить(ПрефиксТипаВидаХарактеристик, ТаблицаИдентификаторов);
					
					ЭлементыСпискаДопХарактеристик.Вставить(ИдентификаторПоля, ЭлементСписка);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			ПредставлениеПоля = Строка(ДоступноеПолеКомпоновки.Заголовок);
			Если НЕ ПустаяСтрока(ПараметрыДобавленияСтроки.УдаляемыйПрефиксПредставления) Тогда
				УдаляемыйПрефикс = ПараметрыДобавленияСтроки.УдаляемыйПрефиксПредставления + ".";
				ДлинаПрефикса = СтрДлина(УдаляемыйПрефикс);
				Если Лев(ПредставлениеПоля, ДлинаПрефикса) = УдаляемыйПрефикс Тогда
					ПредставлениеПоля = Сред(ПредставлениеПоля, ДлинаПрефикса + 1);
				КонецЕсли;
			КонецЕсли;
			ЭлементСписка.Представление = ПредставлениеПоля;
		КонецЕсли;
		
	КонецЦикла;
	
	// Дозаполнение представления и пометки удаления списка полей.
	Для Каждого ТипИсточникаИИдентификаторы Из ИдентификаторыХарактеристик Цикл
		
		ПрефиксТипаВидаХарактеристик = ТипИсточникаИИдентификаторы.Ключ;
		ТаблицаИдентификаторов       = ТипИсточникаИИдентификаторы.Значение;
		СвойстваИсточникаХарактеристик = СвойстваИсточниковХарактеристик.Найти(ПрефиксТипаВидаХарактеристик, "ПрефиксТипаВидаХарактеристик");
		ТаблицаБД = РаботаСФормуламиПовтИсп.ПолноеИмяТаблицыДанных(
			СвойстваИсточникаХарактеристик.МетаданныеИсточника.ПолноеИмя());
		
		Запрос = Новый Запрос;
		Текст =
		"ВЫБРАТЬ
		|	ИдентификаторыХарактеристик.ИдентификаторПоля КАК ИдентификаторПоля,
		|	ИдентификаторыХарактеристик.ЗначениеПоляИмени КАК ЗначениеПоляИмени
		|ПОМЕСТИТЬ ИдентификаторыХарактеристик
		|ИЗ
		|	&ИдентификаторыХарактеристик КАК ИдентификаторыХарактеристик
		|;
		|
		|ВЫБРАТЬ
		|	ИдентификаторыХарактеристик.ИдентификаторПоля КАК ИдентификаторПоля,
		|	ИдентификаторыХарактеристик.ЗначениеПоляИмени КАК ЗначениеПоляИмени,
		|	ТаблицаВидовХарактеристик.Ссылка КАК Ссылка,
		|	ЕСТЬNULL(ТаблицаВидовХарактеристик.ПометкаУдаления, ЛОЖЬ) КАК ПометкаУдаления,
		|	&ВыражениеЭтоДополнительныйРеквизит КАК ЭтоДополнительныйРеквизит,
		|	&ВыражениеЭтоДополнительноеСведение КАК ЭтоДополнительноеСведение,
		|	&ВыражениеЭтоВидКонтактнойИнформации КАК ЭтоВидКонтактнойИнформации,
		|	&ВыражениеТипКонтактнойИнформации КАК ТипКонтактнойИнформации,
		|	ВЫБОР
		|		КОГДА НЕ ТаблицаВидовХарактеристик.Ссылка ЕСТЬ NULL
		|			ТОГДА ПРЕДСТАВЛЕНИЕ(ТаблицаВидовХарактеристик.Ссылка)
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ПредставлениеХарактеристики
		|ИЗ
		|	ИдентификаторыХарактеристик КАК ИдентификаторыХарактеристик
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	#ИмяТаблицыИсточникаХарактеристик КАК ТаблицаВидовХарактеристик
		|ПО
		|	&ВыражениеСоединенияТаблиц";
		
		ВыражениеСоединенияТаблиц = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"ИдентификаторыХарактеристик.ЗначениеПоляИмени = ТаблицаВидовХарактеристик.%1",
			СвойстваИсточникаХарактеристик.ПолеИдентификатора);
		Если СвойстваИсточникаХарактеристик.МетаданныеИсточника = Метаданные.Справочники.ВидыКонтактнойИнформации Тогда
			ВыражениеТипКонтактнойИнформации = "ТаблицаВидовХарактеристик.Тип";
			ВыражениеЭтоВидКонтактнойИнформации = "ИСТИНА";
		Иначе
			ВыражениеТипКонтактнойИнформации = "НЕОПРЕДЕЛЕНО";
			ВыражениеЭтоВидКонтактнойИнформации = "ЛОЖЬ";
		КонецЕсли;
		Если СвойстваИсточникаХарактеристик.МетаданныеИсточника = Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения Тогда
			ВыражениеЭтоДополнительныйРеквизит = "НЕ ТаблицаВидовХарактеристик.ЭтоДополнительноеСведение";
			ВыражениеЭтоДополнительноеСведение = "ТаблицаВидовХарактеристик.ЭтоДополнительноеСведение";
		Иначе
			ВыражениеЭтоДополнительныйРеквизит = "ЛОЖЬ";
			ВыражениеЭтоДополнительноеСведение = "ЛОЖЬ";
		КонецЕсли;
		
		Если НЕ СвойстваИсточникаХарактеристик.УникальностьИмениВПределахВсейТаблицыХарактеристик Тогда
			// Т.к. с данным идентификатором в таблице характеристик может быть две и более характеристики (например,
			// в видах контактной информации идентификатор "Телефон" может быть указан для набора Организации / Контрагенты и т.д.),
			// то необходимо по типу значения поля родителя ограничить количество выбранных характеристик, используя
			// отбор, заданный в метаданных для характеристик.
			// Также в таком случае необходимо указать итоги по полю ИдентификаторПоля, чтобы проанализировать
			// различия в выбираемых полях (ПредставлениеХарактеристики - будет взято минимальное значение, как и для обычных реквизитов,
			// ПометкаУдаления - максимальное значение, ТипКонтактнойИнформации - неопределено, если есть различные).
			
			Текст = Текст + "
			|ГДЕ
			|	&ВыражениеОтбораХарактеристикПоТипуЗначенияРодителя
			|ИТОГИ ПО
			|	ИдентификаторПоля";
			
			ТипЗначенияПоляРодителя = ПараметрыДобавленияСтроки.ТипЗначенияПоляРодителя;
			ВыражениеОтбора = ВыражениеОтбораХарактеристикПоТипуЗначенияРодителя(ТипЗначенияПоляРодителя,
				СвойстваИсточникаХарактеристик, СвойстваИсточниковХарактеристик);
			Текст = СтрЗаменить(Текст, "&ВыражениеОтбораХарактеристикПоТипуЗначенияРодителя", ВыражениеОтбора);
		КонецЕсли;
		
		Текст = СтрЗаменить(Текст, "#ИмяТаблицыИсточникаХарактеристик", ТаблицаБД);
		Текст = СтрЗаменить(Текст, "&ВыражениеСоединенияТаблиц", ВыражениеСоединенияТаблиц);
		Текст = СтрЗаменить(Текст, "&ВыражениеЭтоДополнительныйРеквизит", ВыражениеЭтоДополнительныйРеквизит);
		Текст = СтрЗаменить(Текст, "&ВыражениеЭтоДополнительноеСведение", ВыражениеЭтоДополнительноеСведение);
		Текст = СтрЗаменить(Текст, "&ВыражениеЭтоВидКонтактнойИнформации", ВыражениеЭтоВидКонтактнойИнформации);
		Текст = СтрЗаменить(Текст, "&ВыражениеТипКонтактнойИнформации", ВыражениеТипКонтактнойИнформации);
		
		Запрос.Текст = Текст;
		Запрос.УстановитьПараметр("ИдентификаторыХарактеристик", ТаблицаИдентификаторов);
		
		Если СвойстваИсточникаХарактеристик.УникальностьИмениВПределахВсейТаблицыХарактеристик Тогда
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				ЭлементСписка = ЭлементыСпискаДопХарактеристик.Получить(Выборка.ИдентификаторПоля);
				ЗначениеЭлементаСписка = ЭлементСписка.Значение;
				ЗначениеЭлементаСписка.ПометкаУдаления = Выборка.ПометкаУдаления;
				ЗначениеЭлементаСписка.ЭтоДополнительныйРеквизит = Выборка.ЭтоДополнительныйРеквизит;
				ЗначениеЭлементаСписка.ЭтоДополнительноеСведение = Выборка.ЭтоДополнительноеСведение;
				ЗначениеЭлементаСписка.ЭтоВидКонтактнойИнформации = Выборка.ЭтоВидКонтактнойИнформации;
				ЗначениеЭлементаСписка.ТипКонтактнойИнформации = Выборка.ТипКонтактнойИнформации;

				ЭлементСписка.Значение = ЗначениеЭлементаСписка;
				ЭлементСписка.Представление = Выборка.ПредставлениеХарактеристики;
			КонецЦикла;
		Иначе
			ВыборкаИдентификаторПоля = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ИдентификаторПоля");
			Пока ВыборкаИдентификаторПоля.Следующий() Цикл
				ЭлементСписка = ЭлементыСпискаДопХарактеристик.Получить(ВыборкаИдентификаторПоля.ИдентификаторПоля);
				ЗначениеЭлементаСписка = ЭлементСписка.Значение;
				
				Представление = "";
				ПометкаУдаления = Ложь;
				ЭтоДополнительныйРеквизит = Ложь;
				ЭтоДополнительноеСведение = Ложь;
				ЭтоВидКонтактнойИнформации = Ложь;
				ТипКонтактнойИнформации = Неопределено;
				ЕстьРазныеТипыКонтактнойИнформации = Ложь;
				Выборка = ВыборкаИдентификаторПоля.Выбрать();
				Пока Выборка.Следующий() Цикл
					Представление = ?(Представление = "", Выборка.ПредставлениеХарактеристики, Мин(Представление, Выборка.ПредставлениеХарактеристики));
					ПометкаУдаления = Макс(ПометкаУдаления, Выборка.ПометкаУдаления);
					Если НЕ ЕстьРазныеТипыКонтактнойИнформации Тогда
						ТипКонтактнойИнформации = ?(ТипКонтактнойИнформации = Неопределено, Выборка.ТипКонтактнойИнформации, ТипКонтактнойИнформации);
						ЕстьРазныеТипыКонтактнойИнформации = (ТипКонтактнойИнформации <> Выборка.ТипКонтактнойИнформации);
					КонецЕсли;
					Если ЕстьРазныеТипыКонтактнойИнформации Тогда
						ТипКонтактнойИнформации = Неопределено;
					КонецЕсли;
					ЭтоДополнительныйРеквизит = Макс(ЭтоДополнительныйРеквизит, Выборка.ЭтоДополнительныйРеквизит);
					ЭтоДополнительноеСведение = Макс(ЭтоДополнительноеСведение, Выборка.ЭтоДополнительноеСведение);
					ЭтоВидКонтактнойИнформации = Макс(ЭтоВидКонтактнойИнформации, Выборка.ЭтоВидКонтактнойИнформации);
				КонецЦикла;
				
				ЗначениеЭлементаСписка.ПометкаУдаления = ПометкаУдаления;
				ЗначениеЭлементаСписка.ЭтоДополнительныйРеквизит = ЭтоДополнительныйРеквизит;
				ЗначениеЭлементаСписка.ЭтоДополнительноеСведение = ЭтоДополнительноеСведение;
				ЗначениеЭлементаСписка.ЭтоВидКонтактнойИнформации = ЭтоВидКонтактнойИнформации;
				ЗначениеЭлементаСписка.ТипКонтактнойИнформации = ТипКонтактнойИнформации;

				ЭлементСписка.Значение = ЗначениеЭлементаСписка;
				ЭлементСписка.Представление = Представление;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Список.СортироватьПоПредставлению();
	
	Возврат Список;
	
КонецФункции

Функция ОбъектМетаданныхПоТипуЗначения(ТипЗначения)
	ОбъектМД = Неопределено;
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗначения) Тогда
		ОбъектМД = Метаданные.НайтиПоТипу(ТипЗначения);
	КонецЕсли;
	
	Возврат ОбъектМД;
КонецФункции


Функция ВидОбъектаМетаданных(ОбъектМД, ДляУказанияТипа = Ложь)
	ВидОбъектаМД = Неопределено;
	Если ОбщегоНазначения.ЭтоСправочник(ОбъектМД) Тогда
		ВидОбъектаМД = "Справочник";
	ИначеЕсли ОбщегоНазначения.ЭтоДокумент(ОбъектМД) Тогда
		ВидОбъектаМД = "Документ";
	ИначеЕсли ОбщегоНазначения.ЭтоПланВидовХарактеристик(ОбъектМД) Тогда
		ВидОбъектаМД = "ПланВидовХарактеристик";
	ИначеЕсли ОбщегоНазначения.ЭтоПланСчетов(ОбъектМД) Тогда
		ВидОбъектаМД = "ПланСчетов";
	ИначеЕсли ОбщегоНазначения.ЭтоПланВидовРасчета(ОбъектМД) Тогда
		ВидОбъектаМД = "ПланВидовРасчета";
	ИначеЕсли ОбщегоНазначения.ЭтоПланОбмена(ОбъектМД) Тогда
		ВидОбъектаМД = "ПланОбмена";
	ИначеЕсли ОбщегоНазначения.ЭтоБизнесПроцесс(ОбъектМД) Тогда
		ВидОбъектаМД = "БизнесПроцесс";
	ИначеЕсли ОбщегоНазначения.ЭтоЗадача(ОбъектМД) Тогда
		ВидОбъектаМД = "Задача";
	КонецЕсли;
	// Перечисление не имеет реквизитов, поэтому для него не указывается значение.
	Если ДляУказанияТипа И НЕ ВидОбъектаМД = Неопределено Тогда
		ВидОбъектаМД = ВидОбъектаМД + "Ссылка";
	КонецЕсли;
	
	Возврат ВидОбъектаМД;
КонецФункции

Функция ВыражениеОтбораХарактеристикПоТипуЗначенияРодителя(ТипЗначенияПоляРодителя, СвойстваИсточникаХарактеристик, СвойстваИсточниковХарактеристик)
	ВыражениеОтбора = "";
	
	Если ТипЗначенияПоляРодителя = Неопределено Тогда
		ВыражениеОтбора = "ЛОЖЬ";
	Иначе
		МетаданныеИсточника = СвойстваИсточникаХарактеристик.МетаданныеИсточника;
		ТипыПоляРодителя = ТипЗначенияПоляРодителя.Типы();
		
		ИспользуемыеИсточникиХарактеристик = Новый Соответствие();
		Для Каждого ТипЗначения Из ТипыПоляРодителя Цикл
			ОбъектМД = ОбъектМетаданныхПоТипуЗначения(ТипЗначения);
			Если ОбъектМД = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ВидОбъектаМД = ВидОбъектаМетаданных(ОбъектМД);
			Если ВидОбъектаМД = Неопределено Тогда
				// Перечисление не имеет реквизитов
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьИспользуемыеИсточникиХарактеристик(ИспользуемыеИсточникиХарактеристик,
				ОбъектМД,
				СвойстваИсточниковХарактеристик,
				МетаданныеИсточника);
		КонецЦикла;
		
		ТаблицаСвойствХарактеристикПоМетаданным = ИспользуемыеИсточникиХарактеристик.Получить(МетаданныеИсточника);
		Если ТаблицаСвойствХарактеристикПоМетаданным = Неопределено
			ИЛИ ТаблицаСвойствХарактеристикПоМетаданным.Количество() = 0 Тогда
			ВыражениеОтбора = "ЛОЖЬ";
		Иначе
			// Для полей составного типа в таблице могут быть одинаковые строки. Для оптимизации выражения условия таблица сворачивается.
			// Составляется выражение вида ГДЕ Ссылка В (ВЫБРАТЬ ЗначенияОтборовПоМетаданным1 ОБЪЕДИНИТЬ ВСЕ ЗначенияОтборовПоМетаданным2)
			КолонкиСвертки = "ВидыХарактеристик, ПолеКлюча, ПолеОтбораВидов, ЗначениеОтбораВидов";
			ТаблицаСвойствХарактеристикПоМетаданным.Свернуть(КолонкиСвертки);
			ЧастиВыражения = Новый Массив;
			ШаблонВыборки =
			"ВЫБРАТЬ
			|	ТаблицаИсточник.Ссылка
			|ИЗ
			|	&ИсточникВидовХарактеристик КАК ТаблицаИсточник
			|ГДЕ
			|	&УсловияОтбораВидовХарактеристик";
			Для Каждого ОписаниеХарактеристикВМетаданных Из ТаблицаСвойствХарактеристикПоМетаданным Цикл
				ВыражениеВыборки = ШаблонВыборки;
				ИсточникВидовХарактеристик = РаботаСФормуламиПовтИсп.ПолноеИмяТаблицыДанных(
					ОписаниеХарактеристикВМетаданных.ВидыХарактеристик.ПолноеИмя());
				УсловияОтбораВидовХарактеристик = УсловиеОтбораХарактеристикПоДаннымМетаданных(ОписаниеХарактеристикВМетаданных,
					МетаданныеИсточника, "ТаблицаИсточник", "ТаблицаИсточник");
				
				Если УсловияОтбораВидовХарактеристик = "" Тогда
					УсловияОтбораВидовХарактеристик = "ИСТИНА";
				КонецЕсли;
				ВыражениеВыборки = СтрЗаменить(ВыражениеВыборки, "&ИсточникВидовХарактеристик", ИсточникВидовХарактеристик);
				ВыражениеВыборки = СтрЗаменить(ВыражениеВыборки, "&УсловияОтбораВидовХарактеристик", УсловияОтбораВидовХарактеристик);
				
				ЧастиВыражения.Добавить(ВыражениеВыборки);
			КонецЦикла;
			
			Разделитель = "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|";
			ОбъединениеВыборок = СтрСоединить(ЧастиВыражения, Разделитель);
			ВыражениеОтбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"ТаблицаВидовХарактеристик.Ссылка В (%1)", ОбъединениеВыборок);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВыражениеОтбора;
КонецФункции


// Рассчитывает текущий уровень строки в дереве с учетом групп строк.
// 
// Параметры:
// 	ЭлементДерева - СтрокаДереваЗначений, ДанныеФормыЭлементДерева, ДеревоЗначений, ДанныеФормыДерево - Элемент дерева, уровень которого нужно посчитать.
// 	ТипыЭлементов - см. РаботаСФормулами.ТипыЭлементовДереваОперандов
// 	
// Возвращаемое значение:
// 	Число - Описание
Функция ТекущийУровеньРекурсииРеквизитов(ЭлементДерева, ТипыЭлементов)
	Если ТипЗнч(ЭлементДерева) = Тип("ДеревоЗначений")
	 ИЛИ ТипЗнч(ЭлементДерева) = Тип("ДанныеФормыДерево") Тогда
		ТекущийУровень = 0;
	ИначеЕсли ТипЗнч(ЭлементДерева) = Тип("СтрокаДереваЗначений") Тогда
		ТекущийУровень = 0;
		СтрокаРодитель = ЭлементДерева.Родитель;
		Пока НЕ СтрокаРодитель = Неопределено Цикл
			Если НЕ СтрокаРодитель.ТипЭлементаДерева = ТипыЭлементов.Группа
				И НЕ СтрокаРодитель.ТипЭлементаДерева = ТипыЭлементов.ГруппаСтрокВерхнегоУровня Тогда
				ТекущийУровень = ТекущийУровень + 1;
			КонецЕсли;
			СтрокаРодитель = СтрокаРодитель.ПолучитьРодителя();
		КонецЦикла;
	ИначеЕсли ТипЗнч(ЭлементДерева) = Тип("ДанныеФормыЭлементДерева") Тогда
		ТекущийУровень = 0;
		СтрокаРодитель = ЭлементДерева.ПолучитьРодителя();
		Пока НЕ СтрокаРодитель = Неопределено Цикл
			Если НЕ СтрокаРодитель.ТипЭлементаДерева = ТипыЭлементов.Группа
				И НЕ СтрокаРодитель.ТипЭлементаДерева = ТипыЭлементов.ГруппаСтрокВерхнегоУровня Тогда
				ТекущийУровень = ТекущийУровень + 1;
			КонецЕсли;
			СтрокаРодитель = СтрокаРодитель.ПолучитьРодителя();
		КонецЦикла;
	КонецЕсли;
	Возврат ТекущийУровень;
КонецФункции

Функция НоваяСтрокаДереваПоПолюКомпоновки(ЭлементСпискаПолей, МестоДобавления, ПараметрыДобавленияСтроки, ОграниченияРазвертки = Неопределено)
	
	ДоступноеПоле = ЭлементСпискаПолей.Значение.Поле;
	ТипЗначенияСтроки = ЭлементСпискаПолей.Значение.ТипЗначения; // тип с учетом возможного переопределения.
	ПометкаУдаления = ЭлементСпискаПолей.Значение.ПометкаУдаления;
	ЭтоГруппа = ЭлементСпискаПолей.Значение.ЭтоГруппа;
	ЭтоТаблица = ЭлементСпискаПолей.Значение.ЭтоТаблица;
	ЭтоХарактеристика = ЭлементСпискаПолей.Значение.ЭтоХарактеристика;
	ЭтоДополнительныйРеквизит = ЭлементСпискаПолей.Значение.ЭтоДополнительныйРеквизит;
	ЭтоДополнительноеСведение = ЭлементСпискаПолей.Значение.ЭтоДополнительноеСведение;
	ЭтоВидКонтактнойИнформации = ЭлементСпискаПолей.Значение.ЭтоВидКонтактнойИнформации;
	ТипКонтактнойИнформации = ЭлементСпискаПолей.Значение.ТипКонтактнойИнформации;
	ОграничениеДоступностиРеквизитов = ЭлементСпискаПолей.Значение.ОграничениеДоступностиРеквизитов;
	РазворачиваемыеГруппыПолейСКД = ПараметрыДобавленияСтроки.РазворачиваемыеГруппыПолейСКД;
	ДобавлениеПолейПоСхемеКомпоновки = ПараметрыДобавленияСтроки.ДобавлениеПолейПоСхемеКомпоновки;
	
	Если ТипЗнч(МестоДобавления) = Тип("ДеревоЗначений")
		ИЛИ ТипЗнч(МестоДобавления) = Тип("СтрокаДереваЗначений") Тогда
		МестоДобавленияНаФорме = Ложь;
	Иначе
		МестоДобавленияНаФорме = Истина;
	КонецЕсли;
	
	ТипыЭлементов = ТипыЭлементовДереваОперандов();
	
	ИдентификаторНовойСтроки = ИдентификаторСтрокиПоляКомпоновки(ДоступноеПоле, ПараметрыДобавленияСтроки);
	ПредставлениеПоля = ЭлементСпискаПолей.Представление;
	
	ВыводитьСтроку = Истина;
	
	ТипыПоля = ТипЗначенияСтроки.Типы();
	Если ТипыПоля.Количество() = 1
		И ТипыПоля[0] = Тип("ХранилищеЗначения") Тогда
		ВыводитьСтроку = Ложь;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПараметрыДобавленияСтроки.ДобавляемыйПрефиксИдентификатора) Тогда
		ПолныйИдентификаторСтроки = ПараметрыДобавленияСтроки.ДобавляемыйПрефиксИдентификатора
			+ "." + ИдентификаторНовойСтроки;
	Иначе
		ПолныйИдентификаторСтроки = ИдентификаторНовойСтроки;
	КонецЕсли;
	Если НЕ ПустаяСтрока(ПараметрыДобавленияСтроки.ДобавляемыйПрефиксПредставления) Тогда
		ПолноеПредставлениеСтроки = ПараметрыДобавленияСтроки.ДобавляемыйПрефиксПредставления
			+ "." + ПредставлениеПоля;
	Иначе
		ПолноеПредставлениеСтроки = ПредставлениеПоля;
	КонецЕсли;
	
	Если ВыводитьСтроку
		И НЕ ОграниченияРазвертки = Неопределено Тогда
		Если НЕ ОграниченияРазвертки.ВыводитьРеквизиты
			И НЕ ЭтоХарактеристика
			И НЕ ЭтоТаблица Тогда
			ВыводитьСтроку = Ложь;
		КонецЕсли;
		Если ВыводитьСтроку
			И ОграниченияРазвертки.МаксимальныйУровеньРазверткиСтрок > 0 Тогда
			ТекущийУровень = ТекущийУровеньРекурсииРеквизитов(МестоДобавления, ТипыЭлементов) + 1;
			Если ТекущийУровень > ОграниченияРазвертки.МаксимальныйУровеньРазверткиСтрок Тогда
				ВыводитьСтроку = Ложь;
			КонецЕсли;
		КонецЕсли;
		Если ДобавлениеПолейПоСхемеКомпоновки Тогда
			ПроверяемыйИдентификатор = ПолныйИдентификаторСтроки;
		Иначе
			ПроверяемыйИдентификатор = ИдентификаторНовойСтроки;
		КонецЕсли;
		Если ВыводитьСтроку
			И НЕ ПустаяСтрока(ОграниченияРазвертки.ВыводимыеРеквизиты)
			И НЕ ЭтоХарактеристика Тогда
			МассивВыводимыхРеквизитов = СтрРазделить(ОграниченияРазвертки.ВыводимыеРеквизиты, ",", Ложь);
			Если МассивВыводимыхРеквизитов.Найти(ПроверяемыйИдентификатор) = Неопределено Тогда
				ВыводитьСтроку = Ложь;
			КонецЕсли;
		КонецЕсли;
		Если ВыводитьСтроку
			И НЕ ПустаяСтрока(ОграниченияРазвертки.НеВыводимыеРеквизиты)
			И НЕ ЭтоХарактеристика Тогда
			МассивНеВыводимыхРеквизитов = СтрРазделить(ОграниченияРазвертки.НеВыводимыеРеквизиты, ",", Ложь);
			Если МассивНеВыводимыхРеквизитов.Найти(ПроверяемыйИдентификатор) <> Неопределено Тогда
				ВыводитьСтроку = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если Не ВыводитьСтроку Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ МестоДобавленияНаФорме Тогда
		СтрокаОперанда = МестоДобавления.Строки.Добавить();
	Иначе
		СтрокаОперанда = МестоДобавления.ПолучитьЭлементы().Добавить();
	КонецЕсли;
	
	СтрокаОперанда.Идентификатор = ИдентификаторНовойСтроки;
	СтрокаОперанда.Представление = ПредставлениеПоля;
	
	Если ЭтоТаблица Тогда
		СтрокаОперанда.ТипЭлементаДерева = "ТабличнаяЧасть";
	ИначеЕсли ЭтоГруппа Тогда
		СтрокаОперанда.ТипЭлементаДерева = ТипыЭлементов.Группа;
	ИначеЕсли ЭтоДополнительныйРеквизит Тогда
		СтрокаОперанда.ТипЭлементаДерева = ТипыЭлементов.ДополнительныйРеквизит;
	ИначеЕсли ЭтоДополнительноеСведение Тогда
		СтрокаОперанда.ТипЭлементаДерева = ТипыЭлементов.ДополнительноеСведение;
	ИначеЕсли ЭтоВидКонтактнойИнформации Тогда
		Если ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			СтрокаОперанда.ТипЭлементаДерева = ТипыЭлементов.ВидКонтактнойИнформации_Адрес;
		ИначеЕсли ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			СтрокаОперанда.ТипЭлементаДерева = ТипыЭлементов.ВидКонтактнойИнформации_Телефон;
		ИначеЕсли ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.Skype Тогда
			СтрокаОперанда.ТипЭлементаДерева = ТипыЭлементов.ВидКонтактнойИнформации_Skype;
		ИначеЕсли ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			СтрокаОперанда.ТипЭлементаДерева = ТипыЭлементов.ВидКонтактнойИнформации_АдресЭлектроннойПочты;
		ИначеЕсли ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
			СтрокаОперанда.ТипЭлементаДерева = ТипыЭлементов.ВидКонтактнойИнформации_ВебСтраница;
		ИначеЕсли ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
			СтрокаОперанда.ТипЭлементаДерева = ТипыЭлементов.ВидКонтактнойИнформации_Факс;
		ИначеЕсли ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.Другое Тогда 
			СтрокаОперанда.ТипЭлементаДерева = ТипыЭлементов.ВидКонтактнойИнформации_Другое;
		Иначе
			СтрокаОперанда.ТипЭлементаДерева = ТипыЭлементов.ВидКонтактнойИнформации_НесколькоВидовКонтактнойИнформации;
		КонецЕсли;
	ИначеЕсли ЭтоХарактеристика Тогда
		СтрокаОперанда.ТипЭлементаДерева = ТипыЭлементов.ПрочаяХарактеристика;
	Иначе
		СтрокаОперанда.ТипЭлементаДерева = ТипыЭлементов.Реквизит;
	КонецЕсли;
	
	Если МестоДобавленияНаФорме Тогда
		СтрокаОперанда.ПолныйИдентификаторСтроки = ПолныйИдентификаторСтроки;
		СтрокаОперанда.ПолноеПредставлениеСтроки = ПолноеПредставлениеСтроки;
		СтрокаОперанда.КодКартинки = КодКартинкиСтрокиДереваОперандов(СтрокаОперанда, ТипыЭлементов);
	КонецЕсли;
	
	СтрокаОперанда.ТипЗначения = ТипЗначенияСтроки;
	Если ЭтоГруппа ИЛИ ЭтоТаблица Тогда
		СтрокаОперанда.РазрешаетсяВыборОперанда = Ложь;
	Иначе
		СтрокаОперанда.РазрешаетсяВыборОперанда = Истина;
	КонецЕсли;
	СтрокаОперанда.ПометкаУдаления = ПометкаУдаления;
	СтрокаОперанда.ВключаетсяВИдентификатор = Истина;
	
	РазворачиватьДоРеквизитов = Ложь;
	Если ПараметрыДобавленияСтроки.РекурсивноРазворачиватьОперандыСхемыКомпоновки
		И НЕ ОграничениеДоступностиРеквизитов Тогда
		Если ЭтоТаблица Тогда
			РазворачиватьДоРеквизитов = Истина;
		Иначе
			Типы = СтрокаОперанда.ТипЗначения.Типы();
			Для Каждого ТипПоля Из Типы Цикл
				НайденныйОбъектМД = Метаданные.НайтиПоТипу(ТипПоля);
				Если НайденныйОбъектМД <> Неопределено Тогда
					Если НЕ Метаданные.Перечисления.Содержит(НайденныйОбъектМД) Тогда
						РазворачиватьДоРеквизитов = Истина;
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Если НЕ ОграниченияРазвертки = Неопределено
		И ОграниченияРазвертки.МаксимальныйУровеньРазверткиСтрок > 0 Тогда
		ТекущийУровень = ТекущийУровеньРекурсииРеквизитов(МестоДобавления, ТипыЭлементов) + 1;
		Если ТекущийУровень = ОграниченияРазвертки.МаксимальныйУровеньРазверткиСтрок Тогда
			РазворачиватьДоРеквизитов = Ложь;
		КонецЕсли;
	КонецЕсли;
	СтрокаОперанда.РазворачиватьДоРеквизитов = РазворачиватьДоРеквизитов;
	
	Если МестоДобавленияНаФорме Тогда
		// Дерево операндов на форме имеет расширенный состав колонок, в т.ч. имеет служебный
		// реквизит ПодчиненныеСтрокиРазворачивались, отвечающий за необходимость добавления
		// подчиненных строк рекурсивно по типу данных родительской строки (родительская строка
		// на форме имеет подчиненную служебную строку).
		МестоДобавления.ПодчиненныеСтрокиРазворачивались = Истина;
	КонецЕсли;
	
	РазверткаПоляПриДобавленииПолейПоСхемеКомпоновки = Ложь;
	Если НЕ ЭтоГруппа
		И РазворачиваемыеГруппыПолейСКД.Количество() <> 0
		И СтрокаОперанда.РазворачиватьДоРеквизитов
		И НЕ МестоДобавленияНаФорме Тогда
		Если РазворачиваемыеГруппыПолейСКД.Найти(ПолныйИдентификаторСтроки) <> Неопределено Тогда
			РазверткаПоляПриДобавленииПолейПоСхемеКомпоновки = Истина;
		КонецЕсли;
	КонецЕсли;
	Если ЭтоГруппа ИЛИ РазверткаПоляПриДобавленииПолейПоСхемеКомпоновки Тогда
		
		НовыеПараметрыДобавленияСтроки = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыДобавленияСтроки);
		НовыеПараметрыДобавленияСтроки.УдаляемыйПрефиксИдентификатора = Строка(ДоступноеПоле.Поле);
		НовыеПараметрыДобавленияСтроки.УдаляемыйПрефиксПредставления  = Строка(ДоступноеПоле.Заголовок);
		
		Если МестоДобавленияНаФорме Тогда
			// Дерево операндов на форме имеет расширенный состав колонок.
			НовыеПараметрыДобавленияСтроки.ДобавляемыйПрефиксИдентификатора = СтрокаОперанда.ПолныйИдентификаторСтроки;
			НовыеПараметрыДобавленияСтроки.ДобавляемыйПрефиксПредставления  = СтрокаОперанда.ПолноеПредставлениеСтроки;
		Иначе
			НовыеПараметрыДобавленияСтроки.ДобавляемыйПрефиксИдентификатора = ПолныйИдентификаторСтроки;
			НовыеПараметрыДобавленияСтроки.ДобавляемыйПрефиксПредставления  = ПолноеПредставлениеСтроки;
		КонецЕсли;
		
		СписокПолей = ОтсортированныйСписокПолейКомпоновки(ДоступноеПоле.Элементы, НовыеПараметрыДобавленияСтроки);
		Для Каждого ЭлементСписка Из СписокПолей Цикл
				
			НоваяСтрокаДереваПоПолюКомпоновки(ЭлементСписка, СтрокаОперанда, НовыеПараметрыДобавленияСтроки, ОграниченияРазвертки);
			
		КонецЦикла;
		
	ИначеЕсли СтрокаОперанда.РазворачиватьДоРеквизитов Тогда
		
		Если МестоДобавленияНаФорме Тогда
			// Дерево операндов на форме имеет расширенный состав колонок, в т.ч. имеет служебный
			// реквизит ПодчиненнаяСтрокаСлужебная. Если текущая строка операнда имеет ссылочный тип
			// и должна быть развернута, то в качестве подчиненной строки добавляется служебная строка,
			// чтобы появился значок плюса, нажав на который пользователь мог развернуть текущую строку операнда.
			// Список подчиненных реквизитов будет получен при интерактивном разворачивании.
			СлужебнаяСтрока = СтрокаОперанда.ПолучитьЭлементы().Добавить();
			СлужебнаяСтрока.ПодчиненнаяСтрокаСлужебная = Истина;
		КонецЕсли;
	КонецЕсли;

	Возврат СтрокаОперанда;
	
КонецФункции

Функция ИдентификаторСтрокиПоляКомпоновки(ПолеКомпоновки, ПараметрыДобавленияСтроки)
	
	УдаляемыйПрефиксИдентификатора = ПараметрыДобавленияСтроки.УдаляемыйПрефиксИдентификатора;
	ИдентификаторНовойСтроки = Строка(ПолеКомпоновки.Поле);
	Если НЕ ПустаяСтрока(УдаляемыйПрефиксИдентификатора) Тогда
		УдаляемыйПрефикс = УдаляемыйПрефиксИдентификатора + ".";
		ДлинаПрефикса = СтрДлина(УдаляемыйПрефикс);
		Если Лев(ИдентификаторНовойСтроки, ДлинаПрефикса) = УдаляемыйПрефикс Тогда
			ИдентификаторНовойСтроки = Сред(ИдентификаторНовойСтроки, ДлинаПрефикса + 1);
		КонецЕсли;
	КонецЕсли;
	
	// Платформа добавляет к полям, не соответствующим требованиям к переменным скобки [], причем на конце ]].
	Пока СтрНайти(ИдентификаторНовойСтроки, "[[") > 0 Цикл 
		ИдентификаторНовойСтроки = СтрЗаменить(ИдентификаторНовойСтроки, "[[", "[");
	КонецЦикла;
	Пока СтрНайти(ИдентификаторНовойСтроки, "]]") > 0 Цикл 
		ИдентификаторНовойСтроки = СтрЗаменить(ИдентификаторНовойСтроки, "]]", "]");
	КонецЦикла;
	
	// В СКД фигурные скобки заменяются на квадратные
	// (см. описание метода ВыражениеПолногоИдентификатораХарактеристики).
	Если СтрНайти(ИдентификаторНовойСтроки, "[") > 0
		И СтрНайти(ИдентификаторНовойСтроки, "]") > 0 Тогда
		ИдентификаторНовойСтроки = СтрЗаменить(ИдентификаторНовойСтроки, "[", "{");
		ИдентификаторНовойСтроки = СтрЗаменить(ИдентификаторНовойСтроки, "]", "}");
	КонецЕсли;
	
	Возврат ИдентификаторНовойСтроки;
	
КонецФункции


// Загружает строки дерева операндов в дерево формы рекурсивно.
// 
// Параметры:
// 	ДеревоФормы - ДанныеФормыДерево - Дерево на форме, в которое загружается инициализированное разработчиком дерево значений.
// 	                                  Имеет служебные колонки, которых нет в ДеревоОперандов, они заполняются в данном методе.
// 	ДеревоОперандов - ДеревоЗначений - Инициализированное разработчиком дерево значений. См. ПолучитьПустоеДеревоОперандов.
// 	ЗначенияОперандов - Неопределено - Значение по умолчанию. Соответствие операндов и их значений не заполняется.
// 	                    Соответствие - Соответствие операндов и их значений:
// 	                       * Ключ - Строка - Идентификатор операнда.
// 	                       * Значение - Число - значение операнда.
Процедура ЗагрузитьСтрокиДереваОперандов(МестоДобавления, Знач ИсточникСтрок, МассивРазрешенныхОперандов = Неопределено,
			ЗначенияОперандов = Неопределено)
	
	КоллекцияЭлементовДереваФормы = МестоДобавления.ПолучитьЭлементы(); // ДанныеФормыКоллекцияЭлементовДерева
	СтрокиДереваОперандов = ИсточникСтрок.Строки;
	ТипыЭлементовДерева = ТипыЭлементовДереваОперандов();
	
	Для Каждого СтрокаДереваОперандов Из СтрокиДереваОперандов Цикл
		
		НоваяСтрокаДереваФормы = КоллекцияЭлементовДереваФормы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаДереваФормы, СтрокаДереваОперандов);
		
		НоваяСтрокаДереваФормы.КодКартинки = КодКартинкиСтрокиДереваОперандов(НоваяСтрокаДереваФормы, ТипыЭлементовДерева);
		Если ТипЗнч(МестоДобавления) = Тип("ДанныеФормыДерево") Тогда
			Если НоваяСтрокаДереваФормы.ВключаетсяВИдентификатор Тогда
				НоваяСтрокаДереваФормы.ПолныйИдентификаторСтроки = НоваяСтрокаДереваФормы.Идентификатор;
			КонецЕсли;
			НоваяСтрокаДереваФормы.ПолноеПредставлениеСтроки = НоваяСтрокаДереваФормы.Представление;
		Иначе // МестоДобавления - строка дерева.
			Если МестоДобавления.ВключаетсяВИдентификатор Тогда
				НоваяСтрокаДереваФормы.ПолныйИдентификаторСтроки = МестоДобавления.ПолныйИдентификаторСтроки
					+ "." + НоваяСтрокаДереваФормы.Идентификатор;
			Иначе
				НоваяСтрокаДереваФормы.ПолныйИдентификаторСтроки = НоваяСтрокаДереваФормы.Идентификатор;
			КонецЕсли;
			НоваяСтрокаДереваФормы.ПолноеПредставлениеСтроки = МестоДобавления.ПолноеПредставлениеСтроки
				+ "." + НоваяСтрокаДереваФормы.Представление;
		КонецЕсли;
		Если СтрокаДереваОперандов.Строки.Количество() = 0 Тогда
			НоваяСтрокаДереваФормы.ПодчиненныеСтрокиРазворачивались = Ложь;
			
			Если НоваяСтрокаДереваФормы.РазворачиватьДоРеквизитов Тогда
				НоваяСлужебнаяСтрока = НоваяСтрокаДереваФормы.ПолучитьЭлементы().Добавить();
				НоваяСлужебнаяСтрока.ПодчиненнаяСтрокаСлужебная = Истина;
			КонецЕсли;
		Иначе
			НоваяСтрокаДереваФормы.ПодчиненныеСтрокиРазворачивались = Истина;
			
			ЗагрузитьСтрокиДереваОперандов(НоваяСтрокаДереваФормы,
				СтрокаДереваОперандов,
				МассивРазрешенныхОперандов,
				ЗначенияОперандов);
		КонецЕсли;
		
		Если НЕ МассивРазрешенныхОперандов = Неопределено
			И СтрокаДереваОперандов.РазрешаетсяВыборОперанда Тогда
			МассивРазрешенныхОперандов.Добавить(НоваяСтрокаДереваФормы.ПолныйИдентификаторСтроки);
			
			Если ТипЗнч(МестоДобавления) = Тип("ДанныеФормыЭлементДерева")
				И НЕ МестоДобавления.ВключаетсяВИдентификатор
				И НоваяСтрокаДереваФормы.РазворачиватьДоРеквизитов Тогда
				// Если идентификатор добавленной строки состоит из нескольких частей,
				// не являющимися частями вышестоящих строк, и если добавленная строка
				// разворачивается до реквизитов, то добавляем первую часть операнда
				// в массив разрешенных, чтобы проконтролировать развернутые до реквизитов
				// строки нижестоящие строки добавленной строки.
				ЧастиТекущегоОперанда = РаботаСФормуламиКлиентСервер.ЧастиОперанда(
					НоваяСтрокаДереваФормы.ПолныйИдентификаторСтроки);
				Если ЧастиТекущегоОперанда.Количество() > 1 Тогда
					Если МассивРазрешенныхОперандов.Найти(ЧастиТекущегоОперанда[0]) = Неопределено Тогда
						МассивРазрешенныхОперандов.Добавить(ЧастиТекущегоОперанда[0]);
						МассивРазрешенныхОперандов.Добавить(ЧастиТекущегоОперанда[0] + ".");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если НоваяСтрокаДереваФормы.РазворачиватьДоРеквизитов
				И НЕ НоваяСтрокаДереваФормы.ПодчиненныеСтрокиРазворачивались Тогда
				МассивРазрешенныхОперандов.Добавить(НоваяСтрокаДереваФормы.ПолныйИдентификаторСтроки + ".");
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначенияОперандов = Неопределено
			И НоваяСтрокаДереваФормы.СодержитЗначение Тогда
			ЗначенияОперандов.Вставить(НоваяСтрокаДереваФормы.ПолныйИдентификаторСтроки, НоваяСтрокаДереваФормы.Значение);
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

Функция КодКартинкиСтрокиДереваОперандов(СтрокаДерева, ТипыЭлементовДерева)
	
	КодКартинки = 10;
	Если СтрокаДерева.ТипЭлементаДерева = ТипыЭлементовДерева.Операнд Тогда
		Если СтрокаДерева.ПометкаУдаления Тогда
			КодКартинки = 11;
		Иначе
			КодКартинки = 10;
		КонецЕсли;
	ИначеЕсли СтрокаДерева.ТипЭлементаДерева = ТипыЭлементовДерева.Реквизит Тогда
		КодКартинки = 10;
	ИначеЕсли СтрокаДерева.ТипЭлементаДерева = ТипыЭлементовДерева.ГруппаСтрокВерхнегоУровня Тогда
		КодКартинки = 8;
	ИначеЕсли СтрокаДерева.ТипЭлементаДерева = ТипыЭлементовДерева.Группа Тогда
		КодКартинки = 9;
	ИначеЕсли СтрокаДерева.ТипЭлементаДерева = ТипыЭлементовДерева.ДополнительныйРеквизит Тогда
		Если СтрокаДерева.ПометкаУдаления Тогда
			КодКартинки = 14;
		Иначе
			КодКартинки = 12;
		КонецЕсли;
	ИначеЕсли СтрокаДерева.ТипЭлементаДерева = ТипыЭлементовДерева.ДополнительноеСведение Тогда
		Если СтрокаДерева.ПометкаУдаления Тогда
			КодКартинки = 15;
		Иначе
			КодКартинки = 13;
		КонецЕсли;
	ИначеЕсли СтрокаДерева.ТипЭлементаДерева = ТипыЭлементовДерева.ВидКонтактнойИнформации_Skype Тогда
		КодКартинки = 7;
	ИначеЕсли СтрокаДерева.ТипЭлементаДерева = ТипыЭлементовДерева.ВидКонтактнойИнформации_Адрес Тогда
		КодКартинки = 6;
	ИначеЕсли СтрокаДерева.ТипЭлементаДерева = ТипыЭлементовДерева.ВидКонтактнойИнформации_АдресЭлектроннойПочты Тогда
		КодКартинки = 2;
	ИначеЕсли СтрокаДерева.ТипЭлементаДерева = ТипыЭлементовДерева.ВидКонтактнойИнформации_ВебСтраница Тогда
		КодКартинки = 3;
	ИначеЕсли СтрокаДерева.ТипЭлементаДерева = ТипыЭлементовДерева.ВидКонтактнойИнформации_Другое Тогда
		КодКартинки = 5;
	ИначеЕсли СтрокаДерева.ТипЭлементаДерева = ТипыЭлементовДерева.ВидКонтактнойИнформации_НесколькоВидовКонтактнойИнформации Тогда
		КодКартинки = 5;
	ИначеЕсли СтрокаДерева.ТипЭлементаДерева = ТипыЭлементовДерева.ВидКонтактнойИнформации_Телефон Тогда
		КодКартинки = 1;
	ИначеЕсли СтрокаДерева.ТипЭлементаДерева = ТипыЭлементовДерева.ВидКонтактнойИнформации_Факс Тогда
		КодКартинки = 4;
	Иначе
		КодКартинки = 10;
	КонецЕсли;
	Возврат КодКартинки;
КонецФункции

// Возвращает шаблон параметров для добавления строки по полю компоновки.
// В случае добавления строк на форме, дерево имеет расширенный состав колонок, по
// сравнению с этапом подготовки дерева.
//
// Возвращаемое значение:
//  Структура - Структура параметров со свойствами:
//   *ДобавляемыйПрефиксИдентификатора - Строка - Значение по умолчанию "". Будет добавлен перед идентификатором поля компоновки
//   					получения полного идентификатора строки. Например, разворачивается строка "Номенклатура.Контрагент",
//   					тогда для поля ИНН контрагента добавляемый префикс "Номенклатура.Контрагент".
//   *ДобавляемыйПрефиксПредставления - Строка - Значение по умолчанию "". То же, что и ДобавляемыйПрефиксИдентификатора,
//   					но для получения полного представления.
//   *УдаляемыйПрефиксИдентификатора - Строка - Значение по умолчанию "". Используется в случае, когда слева от имени поля компоновки нужно
//   					удалить часть строки идентификатора для получения полного идентификатора строки
//   					(при рекурсивном развороте строки нужно удалять имя реквизита верхнего уровня,
//   					например, служебный идентификатор "Реквизит").
//   *УдаляемыйПрефиксПредставления - Строка - Значение по умолчанию "". То же, что и УдаляемыйПрефиксИдентификатора,
//   					но для получения полного представления.
//   *МаксимальныйУровеньРазверткиСтрок - Число - Значение по умолчанию 0. Максимальный уровень с при добавлении строк дерева
//   					по настройкам компановки. Если 0, то уровень не контролируется (любой).
//   *РекурсивноРазворачиватьОперандыСхемыКомпоновки - Булево - параметр, определяющий, можно ли рекурсивно разворачивать
//   					строки дерева операндов.
//   *ТипЗначенияПоляРодителя - Неопределено, ОписаниеТипов - Если есть родительская строка и у нее описан тип значения. Используется
//   					для задания дополнительного отбора по характеристикам, уникальность которых не гарантируется
//   					в пределах всей таблицы характеристик (например, виды контактной информации).
//   *ВидыХарактеристикСПереопределениемТипаЗначений - Соответствие - содержит метаданные вида характеристик и назначаемый
//   					для него описание типов, если указано переопределение типа значений
//   					(используется, если тип значения вычисляется выражением, т.е.
//   					метаданные вида характеристик - не план видов характеристик, т.к.
//   					выражение типа в запросе возвращает просто тип (не конкретный)).
//   *РазворачиваемыеГруппыПолейСКД - Массив из Строка - Заполняется только в методе ДобавитьВДеревоДоступныеПоляПоСхемеКомпоновки.
//   					В схеме компоновки данных некоторые поля могут быть включены в другие поля (ПутьКДанным, причем это могут быть
//   					поля групп или поля обычных реквизитов). При добавлении строк дерева операндов по схеме компановки такие поля
//   					необходимо развернуть сразу, т.к. при развороте строк интерактивно программно создаваемая схема компоновки
//   					ничего не знает о существовании дополнительных полей в интерактивно разворачиваемом поле, т.к. они определены
//   					только в исходной схеме компоновки.
//   *ДобавлениеПолейПоСхемеКомпоновки - Булево - Флаг добавления полей по схеме компоновки. Если Истина, то поля добавляются
//						по переданной в метод схеме компоновки, включая поля в группах. Тогда, если заданы ограничения по именам
//						выводимых полей, при проверке нужно получать полный идентификатор поля.
//
Функция ПараметрыДобавленияСтрокиПоПолюКомпоновки()
	
	Результат = Новый Структура;
	
	// Добавляемые префиксы для получения полного идентификатора и представления строки (включающего вышестоящие строки).
	Результат.Вставить("ДобавляемыйПрефиксИдентификатора", "");
	Результат.Вставить("ДобавляемыйПрефиксПредставления", "");
	
	// Удаляемые префиксы для получения идентификатора и представления на текущем уровне вложенности.
	// Это может быть идентификатор (представление) вышестоящей строки или служебное имя поля "Реквизит",
	// указываемого в схеме компоновки при рекурсивном получении вложенных полей.
	Результат.Вставить("УдаляемыйПрефиксИдентификатора", "");
	Результат.Вставить("УдаляемыйПрефиксПредставления", "");
	
	// Ограничение максимального уровня рекурсии для всего дерева операндов. 0 - не ограничивать.
	Результат.Вставить("МаксимальныйУровеньРазверткиСтрок", 0);
	
	// Флаг необходимости рекурсивно разворачивать ссылочные операнды.
	Результат.Вставить("РекурсивноРазворачиватьОперандыСхемыКомпоновки", Истина);
	
	Результат.Вставить("ТипЗначенияПоляРодителя", Неопределено);
	
	ВидыХарактеристикСПереопределениемТипаЗначений = Новый Соответствие;
	СвойстваВсехХарактеристик = РаботаСФормуламиПовтИсп.СвойстваПоддерживаемыхИсточниковХарактеристик();
	Для Каждого СвойстваХарактеристики Из СвойстваВсехХарактеристик Цикл
		Если СвойстваХарактеристики.ИспользуетсяВыражениеТипаЗначений
			И ТипЗнч(СвойстваХарактеристики.ПереопределениеВыраженияТипаЗначений) = Тип("ОписаниеТипов") Тогда
			ВидыХарактеристикСПереопределениемТипаЗначений.Вставить(СвойстваХарактеристики.МетаданныеИсточника,
				СвойстваХарактеристики.ПереопределениеВыраженияТипаЗначений);
		КонецЕсли;
	КонецЦикла;
	Результат.Вставить("ВидыХарактеристикСПереопределениемТипаЗначений", ВидыХарактеристикСПереопределениемТипаЗначений);
	
	Результат.Вставить("РазворачиваемыеГруппыПолейСКД", Новый Массив);
	
	Результат.Вставить("ДобавлениеПолейПоСхемеКомпоновки", Ложь);
	
	Возврат Результат;
КонецФункции


#КонецОбласти

#Область РаботаСДеревомОператоров

// Добавляет в дерево операторов группу стандартных операторов (+,-,*,/)
//
// Параметры:
//  Дерево - ДеревоЗначений - дерево операторов. см. функцию ПолучитьПустоеДеревоОператоров().
//
Процедура ДобавитьГруппуСтандартныхОператоров(Дерево)

	ПредставлениеГруппыОператора = НСтр("ru = 'Операторы'");
	ГруппаОператоров = ДобавитьГруппуОператоров(Дерево, "Операторы", ПредставлениеГруппыОператора);
	
	ДобавитьОператор(ГруппаОператоров, "+", " + ", "+");
	ДобавитьОператор(ГруппаОператоров, "-", " - ", "-");
	ДобавитьОператор(ГруппаОператоров, "*", " * ", "*");
	ДобавитьОператор(ГруппаОператоров, "/", " / ", "/");

КонецПроцедуры

// Добавляет в дерево операторов группу логических операторов
//
// Параметры:
//  Дерево - ДеревоЗначений - дерево операторов. см. функцию ПолучитьПустоеДеревоОператоров().
//
Процедура ДобавитьГруппуЛогическихОператоров(Дерево)

	ПредставлениеГруппыОператора = НСтр("ru = 'Логические операторы и константы'");
	ГруппаОператоров = ДобавитьГруппуОператоров(Дерево, "ЛогическиеОператорыИКонстанты", ПредставлениеГруппыОператора);
	
	ДобавитьОператор(ГруппаОператоров, "<", " < ", "<");
	ДобавитьОператор(ГруппаОператоров, ">", " > ", ">");
	ДобавитьОператор(ГруппаОператоров, "<=", " <= ", "<=");
	ДобавитьОператор(ГруппаОператоров, ">=", " >= ", ">=");
	ДобавитьОператор(ГруппаОператоров, "=", " = ", "=");
	ДобавитьОператор(ГруппаОператоров, "<>", " <> ", "<>");
	
	ИдентификаторОператора = "И";
	ПредставлениеОператора = НСтр("ru = 'И'");
	ОператорНаЯзыкеКодаДляВставки = " " + ИдентификаторОператора + " ";
	ДобавитьОператор(ГруппаОператоров,
		ИдентификаторОператора,
		ОператорНаЯзыкеКодаДляВставки,
		ПредставлениеОператора);
	
	ИдентификаторОператора = "ИЛИ";
	ПредставлениеОператора = НСтр("ru = 'ИЛИ'");
	ОператорНаЯзыкеКодаДляВставки = " " + ИдентификаторОператора + " ";
	ДобавитьОператор(ГруппаОператоров,
		ИдентификаторОператора,
		ОператорНаЯзыкеКодаДляВставки,
		ПредставлениеОператора);
	
	ИдентификаторОператора = "НЕ";
	ПредставлениеОператора = НСтр("ru = 'НЕ'");
	ОператорНаЯзыкеКодаДляВставки = " " + ИдентификаторОператора + " ";
	ДобавитьОператор(ГруппаОператоров,
		ИдентификаторОператора,
		ОператорНаЯзыкеКодаДляВставки,
		ПредставлениеОператора);
	
	ИдентификаторОператора = "ИСТИНА";
	ПредставлениеОператора = НСтр("ru = 'ИСТИНА'");
	ОператорНаЯзыкеКодаДляВставки = " " + ИдентификаторОператора + " ";
	ДобавитьОператор(ГруппаОператоров,
		ИдентификаторОператора,
		ОператорНаЯзыкеКодаДляВставки,
		ПредставлениеОператора);
	
	ИдентификаторОператора = "ЛОЖЬ";
	ПредставлениеОператора = НСтр("ru = 'ЛОЖЬ'");
	ОператорНаЯзыкеКодаДляВставки = " " + ИдентификаторОператора + " ";
	ДобавитьОператор(ГруппаОператоров,
		ИдентификаторОператора,
		ОператорНаЯзыкеКодаДляВставки,
		ПредставлениеОператора);

КонецПроцедуры

// Добавляет в дерево операторов группу функций
//
// Параметры:
//  Дерево - ДеревоЗначений - дерево операторов. см. функцию ПолучитьПустоеДеревоОператоров().
//
Процедура ДобавитьГруппуФункции(Дерево)

	ПредставлениеГруппыОператора = НСтр("ru = 'Функции'");
	ГруппаОператоров = ДобавитьГруппуОператоров(Дерево, "Функции", ПредставлениеГруппыОператора);
	
	
	ИдентификаторОператора = "Макс";
	ПредставлениеОператора = НСтр("ru = 'Максимум'");
	ОператорНаЯзыкеКодаДляВставки = "Макс(,)";
	ПояснениеОператора = НСтр("ru = 'Возвращает максимальное значение из переданных значений'");
	ДобавитьОператор(ГруппаОператоров,
		ИдентификаторОператора,
		ОператорНаЯзыкеКодаДляВставки,
		ПредставлениеОператора,
		ПояснениеОператора,
		2);
	
	ИдентификаторОператора = "Мин";
	ПредставлениеОператора = НСтр("ru = 'Минимум'");
	ОператорНаЯзыкеКодаДляВставки = "Мин(,)";
	ПояснениеОператора = НСтр("ru = 'Возвращает минимальное значение из переданных значений'");
	ДобавитьОператор(ГруппаОператоров,
		ИдентификаторОператора,
		ОператорНаЯзыкеКодаДляВставки,
		ПредставлениеОператора,
		ПояснениеОператора,
		2);
	
	ИдентификаторОператора = "Окр";
	ПредставлениеОператора = НСтр("ru = 'Округление'");
	ТекстОкругляемоеЗначение = НСтр("ru = '<Округляемое значение>'");
	ТекстКоличествоЗнаков = НСтр("ru = '<Знаков после запятой>'");
	ОператорНаЯзыкеКодаДляВставки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"Окр(%1,%2)",
		ТекстОкругляемоеЗначение,
		ТекстКоличествоЗнаков);
	ПояснениеОператора            = НСтр("ru = 'Округляет переданное значение'");
	ДобавитьОператор(ГруппаОператоров,
		ИдентификаторОператора,
		ОператорНаЯзыкеКодаДляВставки,
		ПредставлениеОператора,
		ПояснениеОператора,
		2);
	
	ИдентификаторОператора = "Цел";
	ПредставлениеОператора = НСтр("ru = 'Целая часть'");
	ОператорНаЯзыкеКодаДляВставки = "Цел()";
	ПояснениеОператора = НСтр("ru = 'Возвращает целую часть переданного числа'");
	ДобавитьОператор(ГруппаОператоров,
		ИдентификаторОператора,
		ОператорНаЯзыкеКодаДляВставки,
		ПредставлениеОператора,
		ПояснениеОператора,
		1);
	
	ИдентификаторОператора = "?";
	ПредставлениеОператора = НСтр("ru = 'Условие'");
	ТекстУсловие = НСтр("ru = '<Условие>'");
	ТекстЗначениеИстина = НСтр("ru = '<Значение если истина>'");
	ТекстЗначениеЛожь = НСтр("ru = '<Значение если ложь>'");
	ОператорНаЯзыкеКодаДляВставки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"?(%1, %2, %3)",
		ТекстУсловие,
		ТекстЗначениеИстина,
		ТекстЗначениеЛожь);
	ПояснениеОператора = НСтр("ru = 'Вычисляет значение в зависимости от значения условия'");
	ДобавитьОператор(ГруппаОператоров,
		ИдентификаторОператора,
		ОператорНаЯзыкеКодаДляВставки,
		ПредставлениеОператора,
		ПояснениеОператора,
		3);
	
	ИдентификаторОператора = "ПредопределенноеЗначение";
	ПредставлениеОператора = НСтр("ru = 'Предопределенное значение'");
	ОператорНаЯзыкеКодаДляВставки = "ПредопределенноеЗначение()";
	ПояснениеОператора = НСтр("ru = 'Обращение к предопределенному элементу по его имени'");
	ДобавитьОператор(ГруппаОператоров,
		ИдентификаторОператора,
		ОператорНаЯзыкеКодаДляВставки,
		ПредставлениеОператора,
		ПояснениеОператора);
	
	ИдентификаторОператора = "ЗначениеЗаполнено";
	ПредставлениеОператора = НСтр("ru = 'Значение заполнено'");
	ОператорНаЯзыкеКодаДляВставки = "ЗначениеЗаполнено()";
	ПояснениеОператора = НСтр("ru = 'Проверка заполненности значения'");
	ДобавитьОператор(ГруппаОператоров,
		ИдентификаторОператора,
		ОператорНаЯзыкеКодаДляВставки,
		ПредставлениеОператора,
		ПояснениеОператора);
	
КонецПроцедуры

#КонецОбласти

#Область МетодыДляОбновленияИнформационнойБазы

// Возвращает таблицы характеристик и их свойств для каждого типа значений
// 
// Параметры:
// 	ОписаниеТипов - ОписаниеТипов - Типы, для которых необходимо получить характеристики.
// 	ОтборПоНаборамДополнительныхРеквизитов - Неопределено, Массив из СправочникСсылка.НаборыДополнительныхРеквизитовИСведений - В случае,
// 			если задан отбор, будут получены только доп. реквизиты и сведения, удовлетворяющие отбору.
// 	ИспользоватьНаименованиеВместоПредставления - Булево - Истина, если в качестве представлений нужно получить наименования.
// 			Например, в шаблонах наименований видов номенклатур.
// Возвращаемое значение:
// 	Соответствие - Соответствие типа данных, входящего в переданное в метод описание типов и таблицы свойств характеристик:
// 	  * Ключ - Тип - Тип значений.
// 	  * Значение - см. ТаблицаСвойствХарактеристикПоТипуВладельца
//
Функция ХарактеристикиПоПредставлениям(ОписаниеТипов, ОтборПоНаборамДополнительныхРеквизитов = Неопределено, ИспользоватьНаименованиеВместоПредставления = Ложь) Экспорт
	
	СвойстваХарактеристикПоТипу = ПолучитьСвойстваХарактеристикДляОбъектовТипа(ОписаниеТипов,
		ОтборПоНаборамДополнительныхРеквизитов,
		ИспользоватьНаименованиеВместоПредставления);
	
	Для Каждого КлючИЗначение Из СвойстваХарактеристикПоТипу Цикл
		ТаблицаСвойств = КлючИЗначение.Значение; // ТаблицаЗначений -
		ТаблицаСвойств.Индексы.Добавить("ПредставлениеХарактеристики");
	КонецЦикла;
	
	Возврат СвойстваХарактеристикПоТипу;
	
КонецФункции

// Преобразует выражение операнда в новый формат формул (вместо представлений характеристик
// будут указаны идентификаторы в формате "{ПрефиксТипаХарактеристик.ИдентификаторХарактеристик}".
// 
// Параметры:
// 	ИсходныеОперанды - Массив из Строка - Тексты исходных операндов.
// 	СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - Схема компоновки, по которой строятся операнды
// Возвращаемое значение:
// 	Структура - Описание:
// * ПреобразованныеВыражения - Соответствие - состоит из:
//    **Ключ - Строка - Исходное выражение.
//    **Значение - Строка - Преобразованное выражение.
// * ЕстьОшибки - Булево - Флаг наличия ошибки преобразования.
// * СообщенияОшибокПреобразования - Строка - Описания ошибок преобразования:
//    **Ключ - Строка - Исходное выражение.
//    **Значение - Строка - Текст ошибки преобразования.
//
Функция ПреобразоватьВФорматИдентификаторовОперандыФормулыСКД(ИсходныеОперанды, СхемаКомпоновкиДанных) Экспорт
	
	РезультатПреобразования = Новый Структура;
	РезультатПреобразования.Вставить("ПреобразованныеВыражения", Новый Соответствие);
	РезультатПреобразования.Вставить("ЕстьОшибки", Ложь);
	РезультатПреобразования.Вставить("СообщенияОшибокПреобразования", Новый Соответствие);
	
	ИменаПолейСРодителями = Новый Массив;
	Для Каждого НаборДанных Из СхемаКомпоновкиДанных.НаборыДанных Цикл
		ПоляНабора = НаборДанных.Поля;
		Для Каждого ОписаниеПоля Из ПоляНабора Цикл
			ПутьКДанным = ОписаниеПоля.ПутьКДанным;
			Если СтрНайти(ПутьКДанным, ".") > 0 Тогда
				Если ИменаПолейСРодителями.Найти(ПутьКДанным) = Неопределено Тогда
					ИменаПолейСРодителями.Добавить(ПутьКДанным);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	
	ПредставленияВсехХарактеристикПоТипам = РаботаСФормуламиПовтИсп.ХарактеристикиПоПредставлениям();
	
	ПараметрыПреобразования = Новый Структура;
	ПараметрыПреобразования.Вставить("ИменаПолейСРодителями", ИменаПолейСРодителями);
	ПараметрыПреобразования.Вставить("ПредставленияХарактеристик", ПредставленияВсехХарактеристикПоТипам);
	ПараметрыПреобразования.Вставить("ПереопределенияПредставленийХарактеристикДляТипов", Неопределено);
	ПараметрыПреобразования.Вставить("КэшПараметровВыражений", Новый Соответствие);
	ПараметрыПреобразования.Вставить("ПерваяЧастьОперандаНеВключаетсяВТекст", Ложь);
	
	Для Каждого ИсходныйОперанд Из ИсходныеОперанды Цикл
		Если ОперандУказанВФорматеИдентификаторов(ИсходныйОперанд) Тогда
			РезультатПреобразования.ПреобразованныеВыражения.Вставить(ИсходныйОперанд, ИсходныйОперанд);
			Продолжить;
		КонецЕсли;
		
		РезультатПреобразованияОперанда = ПреобразоватьВФорматИдентификаторовОперандФормулы(ИсходныйОперанд,
			КомпоновщикНастроек, ПараметрыПреобразования);
		Если РезультатПреобразованияОперанда.ЕстьОшибки Тогда
			РезультатПреобразования.ЕстьОшибки = Истина;
			РезультатПреобразования.СообщенияОшибокПреобразования.Вставить(ИсходныйОперанд, РезультатПреобразованияОперанда.ТекстОшибки);
			РезультатПреобразования.ПреобразованныеВыражения.Вставить(ИсходныйОперанд, "");
		Иначе
			РезультатПреобразования.ПреобразованныеВыражения.Вставить(ИсходныйОперанд, РезультатПреобразованияОперанда.ПреобразованныйОперанд);
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатПреобразования;
	
КонецФункции

// Преобразует выражение операнда в новый формат формул (вместо представлений характеристик
// будут указаны идентификаторы в формате "{ПрефиксТипаХарактеристик.ИдентификаторХарактеристик}".
// 
// Параметры:
// 	ИсходныйОперанд - Строка - Текст исходного операнда.
// 	КомпоновщикНастроекПервогоУровняОперанда - КомпоновщикНастроекКомпоновкиДанных - инициализированный компоновщик настроек для поиска первой части выражения.
// 	ПараметрыПреобразования - Структура - Вспомогательные параметры преобразования:
// 	 * ИменаПолейСРодителями - Массив из Строка - Список полей, путь к данным которых указан через точку. Например, "Счет.Субконто1".
// 	 * ПредставленияХарактеристик - см. РаботаСФормулами.ХарактеристикиПоПредставлениям
// 	 * ПереопределенияПредставленийХарактеристикДляТипов - Неопределено, Соответствие - В случае, если для определенных типов было задано переопределение получения характеристик:
// 	   ** Ключ - Тип - Тип данных, для которого было задано переопределение получения характеристик.
// 	   ** Значение - см. РаботаСФормулами.ХарактеристикиПоПредставлениям
// 	 * ПерваяЧастьОперандаНеВключаетсяВТекст - Булево - Признак того, что первая часть выражения не включается в операнд.
// 	 		Например, в операндах формулы видов номенклатур, операнд-характеристика ноенклатуры пишется как
// 	 		[Представление характеристики], вместо [Номенклатура.[Представление характеристики]].
// 	 *КэшТиповВыражений - Соответствие - 
// Возвращаемое значение:
// 	Структура - Описание:
// * ТекстОшибки - Строка - Описание ошибки преобразования.
// * ЕстьОшибки - Булево - Флаг наличия ошибки преобразования.
// * ПреобразованныйОперанд - Строка - Значение преобразованного операнда.
Функция ПреобразоватьВФорматИдентификаторовОперандФормулы(ИсходныйОперанд, КомпоновщикНастроекПервогоУровняОперанда, ПараметрыПреобразования)
	
	РезультатПреобразования = Новый Структура;
	РезультатПреобразования.Вставить("ПреобразованныйОперанд", "");
	РезультатПреобразования.Вставить("ЕстьОшибки", Ложь);
	РезультатПреобразования.Вставить("ТекстОшибки", "");
	
	ИменаПолейСРодителями = ПараметрыПреобразования.ИменаПолейСРодителями;
	ПереопределенияПредставленийХарактеристикДляТипов = ПараметрыПреобразования.ПереопределенияПредставленийХарактеристикДляТипов;
	ПредставленияХарактеристик = ПараметрыПреобразования.ПредставленияХарактеристик;
	КэшПараметровВыражений = ПараметрыПреобразования.КэшПараметровВыражений;
	ПерваяЧастьОперандаНеВключаетсяВТекст = ПараметрыПреобразования.ПерваяЧастьОперандаНеВключаетсяВТекст;
	Если ПерваяЧастьОперандаНеВключаетсяВТекст Тогда
		ЧастиОперанда = РаботаСФормуламиКлиентСервер.ЧастиОперанда(ИсходныйОперанд);
		ЧастиОперанда.Удалить(0);
		ПредставлениеИсходногоОперанда = СтрСоединить(ЧастиОперанда, ".");
	Иначе
		ПредставлениеИсходногоОперанда = ИсходныйОперанд;
	КонецЕсли;
	СоответствияИменСтандартныхРеквизитов = РаботаСФормуламиПовтИсп.СоответствияИменСтандартныхРеквизитов();
	
	ВыражениеЗамены = "";
	НакопленныйПуть = "";
	ЕстьСкобкиОперанда = СтрНачинаетсяС(ИсходныйОперанд, "[") И СтрЗаканчиваетсяНа(ИсходныйОперанд, "]");
	Если ЕстьСкобкиОперанда Тогда
		ИсходныйОперандБезВнешнихСкобок = Сред(ИсходныйОперанд, 1, СтрДлина(ИсходныйОперанд) - 1);
		ИсходныйОперандБезВнешнихСкобок = Сред(ИсходныйОперандБезВнешнихСкобок, 2);
	Иначе
		ИсходныйОперандБезВнешнихСкобок = ИсходныйОперанд;
	КонецЕсли;
	
	// Проверка на сложное поле компоновки, например "Счет.Субконто1".
	ПолеСУчетомРодителя = "";
	Для Каждого ИмяПоляСРодителями Из ИменаПолейСРодителями Цикл
		Если СтрНачинаетсяС(ИсходныйОперанд, ИмяПоляСРодителями) Тогда
			СледующийСимвол = Сред(ИсходныйОперанд, СтрДлина(ИмяПоляСРодителями) + 1, 1);
			Если СледующийСимвол = "." ИЛИ СледующийСимвол = "" Тогда
				ПолеСУчетомРодителя = ИмяПоляСРодителями;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если ПустаяСтрока(ПолеСУчетомРодителя) Тогда
		ОстатокВыражения = ИсходныйОперанд;
	Иначе
		ОстатокВыражения = Сред(ИсходныйОперанд, СтрДлина(ПолеСУчетомРодителя + ".") + 1);
	КонецЕсли;
	
	ЧастиВыражения = РаботаСФормуламиКлиентСервер.ЧастиОперанда(ОстатокВыражения,, Ложь);
	Если ПустаяСтрока(ПолеСУчетомРодителя) Тогда
		НакопленныйПуть = ЧастиВыражения[0];
		ЧастиВыражения.Удалить(0);
	Иначе
		НакопленныйПуть = ПолеСУчетомРодителя;
	КонецЕсли;
	
	
	// В начале выражения не может быть характеристики, т.к. характеристика всегда принадлежит
	// какому-либо объекту (полю в запросе или колонке таблицы). Поэтому ищем по исходной схеме компоновки
	// поле, с учетом, что для поля может быть задан сложный путь к данным.
	ПараметрыВыражения = КэшПараметровВыражений.Получить(НакопленныйПуть);
	Если ПараметрыВыражения = Неопределено Тогда
		ПолеСКД = КомпоновкаДанныхСервер.НайтиПолеСКДПоПолномуИмени(
			КомпоновщикНастроекПервогоУровняОперанда.Настройки.Выбор.ДоступныеПоляВыбора.Элементы,
			НакопленныйПуть);
		Если ПолеСКД = Неопределено Тогда
			РезультатПреобразования.ЕстьОшибки = Истина;
			
			ТекстСообщения = НСтр("ru = 'Не найдено поле ""%1"" в выражении ""%2"". Проверьте корректность выражения.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
				НакопленныйПуть, ПредставлениеИсходногоОперанда);
			РезультатПреобразования.ТекстОшибки =  ТекстСообщения;
		Иначе
			ТипЗначения = ПолеСКД.Тип;
			ВыражениеВФорматеФормул = НакопленныйПуть;
			ПараметрыВыражения = Новый Структура("ТипЗначения, ВыражениеВФорматеФормул", ТипЗначения, ВыражениеВФорматеФормул);
			КэшПараметровВыражений.Вставить(НакопленныйПуть, ПараметрыВыражения);
		КонецЕсли;
	Иначе
		ТипЗначения = ПараметрыВыражения.ТипЗначения;
		ВыражениеВФорматеФормул = ПараметрыВыражения.ВыражениеВФорматеФормул;
	КонецЕсли;
	Если НЕ РезультатПреобразования.ЕстьОшибки Тогда
		ВыражениеЗамены = НакопленныйПуть;
	КонецЕсли;
	
	Пока НакопленныйПуть <> ИсходныйОперандБезВнешнихСкобок
		И ЧастиВыражения.Количество() > 0
		И НЕ РезультатПреобразования.ЕстьОшибки Цикл
		
		ЧастьВыражения = ЧастиВыражения[0];
		ЧастиВыражения.Удалить(0);
		
		ТипыЧастиВыражения = Новый Массив;
		
		ЭтоХарактеристика = (ВРЕГ(РаботаСФормуламиКлиентСервер.ИдентификаторДляФормул(ЧастьВыражения)) <> ВРЕГ(ЧастьВыражения));
		ВозможноЭтоРеквизит = Ложь;
		Если НЕ ЭтоХарактеристика Тогда
			// Возможно это реквизит, а возможно характеристика с простым представлением.
			ВозможноЭтоРеквизит = Истина;
			РеквизитНайден = Ложь;
			Типы = ТипЗначения.Типы();
			Для Каждого Тип Из Типы Цикл
				ОбъектМД = Метаданные.НайтиПоТипу(Тип);
				Если ОбъектМД = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Если ОбщегоНазначения.ЭтоПеречисление(ОбъектМД) Тогда
					Продолжить;
				КонецЕсли;
				
				Реквизит = ОбъектМД.Реквизиты.Найти(ЧастьВыражения);
				Если НЕ Реквизит = Неопределено Тогда
					РеквизитНайден = Истина;
					ТипыЧастиВыражения = Новый Массив;
					ТипыРеквизита = Реквизит.Тип.Типы();
					Для Каждого ТипРеквизита Из ТипыРеквизита Цикл
						Если ТипыЧастиВыражения.Найти(ТипРеквизита) = Неопределено Тогда
							ТипыЧастиВыражения.Добавить(ТипРеквизита);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Если НЕ РеквизитНайден Тогда
					Для Каждого Реквизит Из ОбъектМД.СтандартныеРеквизиты Цикл
						Если Реквизит.Имя = ЧастьВыражения
							ИЛИ СоответствияИменСтандартныхРеквизитов.Получить(Реквизит.Имя) = ЧастьВыражения Тогда
							РеквизитНайден = Истина;
							ТипыРеквизита = Реквизит.Тип.Типы();
							Для Каждого ТипРеквизита Из ТипыРеквизита Цикл
								Если ТипыЧастиВыражения.Найти(ТипРеквизита) = Неопределено Тогда
									ТипыЧастиВыражения.Добавить(ТипРеквизита);
								КонецЕсли;
							КонецЦикла;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			Если РеквизитНайден Тогда
				НакопленныйПуть = НакопленныйПуть + "." + ЧастьВыражения;
				ВыражениеЗамены = ВыражениеЗамены + "." + ЧастьВыражения;
				ТипЗначения = Новый ОписаниеТипов(ТипыЧастиВыражения);
			Иначе
				ЭтоХарактеристика = Истина;
			КонецЕсли;
		КонецЕсли;
		Если ЭтоХарактеристика Тогда
			Если СтрНачинаетсяС(ЧастьВыражения, "[") И СтрЗаканчиваетсяНа(ЧастьВыражения, "]") Тогда
				ПредставлениеХарактеристики = Сред(ЧастьВыражения, 1, СтрДлина(ЧастьВыражения) - 1);
				ПредставлениеХарактеристики = Сред(ПредставлениеХарактеристики, 2);
			Иначе
				ПредставлениеХарактеристики = ЧастьВыражения;
			КонецЕсли;
			
			Типы = ТипЗначения.Типы();
			ПодходящиеИдентификаторы = Новый Массив;
			Для Каждого Тип Из Типы Цикл
				СвойстваХарактеристикТипа = Неопределено;
				Если ТипЗнч(ПереопределенияПредставленийХарактеристикДляТипов) = Тип("Соответствие") Тогда
					СвойстваХарактеристикТипа = ПереопределенияПредставленийХарактеристикДляТипов.Получить(Тип);
				КонецЕсли;
				Если СвойстваХарактеристикТипа = Неопределено Тогда
					СвойстваХарактеристикТипа = ПредставленияХарактеристик.Получить(Тип);
				КонецЕсли;
				
				Если ТипЗнч(СвойстваХарактеристикТипа) = Тип("ТаблицаЗначений") Тогда
					Поиск = Новый Структура("ПредставлениеХарактеристикиВерхнийРегистр", ВРЕГ(ПредставлениеХарактеристики));
					НайденныеХарактеристики = СвойстваХарактеристикТипа.НайтиСтроки(Поиск);
					Если НайденныеХарактеристики.Количество() > 1 Тогда
						РезультатПреобразования.ЕстьОшибки = Истина;
						ТекстОшибки = НСтр("ru = 'Для типа значений %1 по найдено более 1 характеристики по представлению ""%2"". Выражение не может быть преобразовано.'");
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
							Тип, ПредставлениеХарактеристики);
						РезультатПреобразования.ТекстОшибки = ТекстОшибки;
						Прервать;
					ИначеЕсли НайденныеХарактеристики.Количество() = 1 Тогда
						ТипыХарактеристики = НайденныеХарактеристики[0].ТипЗначения; // ОписаниеТипов -
						Для Каждого Тип Из ТипыХарактеристики.Типы() Цикл
							Если ТипыЧастиВыражения.Найти(Тип) = Неопределено Тогда
								ТипыЧастиВыражения.Добавить(Тип);
							КонецЕсли;
						КонецЦикла;
						Если ПодходящиеИдентификаторы.Найти(НайденныеХарактеристики[0].ПолныйИдентификатор) = Неопределено Тогда
							ПодходящиеИдентификаторы.Добавить(НайденныеХарактеристики[0].ПолныйИдентификатор);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если РезультатПреобразования.ЕстьОшибки Тогда
				Прервать;
			КонецЕсли;
			Если ПодходящиеИдентификаторы.Количество() = 1 Тогда
				НакопленныйПуть = НакопленныйПуть + "." + ЧастьВыражения;
				ВыражениеЗамены = ВыражениеЗамены + "." + ПодходящиеИдентификаторы[0];
				ТипЗначения = Новый ОписаниеТипов(ТипыЧастиВыражения);
			ИначеЕсли ПодходящиеИдентификаторы.Количество() = 0 Тогда
				РезультатПреобразования.ЕстьОшибки = Истина;
				Если ВозможноЭтоРеквизит Тогда
					ТекстОшибки = НСтр("ru = 'Не найдено поле ""%1"" в выражении ""%2"". Проверьте корректность выражения.'");
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
						ПредставлениеХарактеристики, ПредставлениеИсходногоОперанда);
				Иначе
					ТекстОшибки = НСтр("ru = 'В выражении ""%1"" по представлению характеристики ""%2"" не найдено соответствующей доступной характеристики. Выражение не может быть преобразовано.'");
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
						ПредставлениеИсходногоОперанда, ПредставлениеХарактеристики);
				КонецЕсли;
				РезультатПреобразования.ТекстОшибки = ТекстОшибки;
			Иначе
				РезультатПреобразования.ЕстьОшибки = Истина;
				ТекстОшибки = НСтр("ru = 'В выражении ""%1"" по представлению характеристики ""%2"" найдено более 1 соответствующей доступной характеристики. Выражение не может быть преобразовано.'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
					ПредставлениеИсходногоОперанда, ПредставлениеХарактеристики);
				РезультатПреобразования.ТекстОшибки = ТекстОшибки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ РезультатПреобразования.ЕстьОшибки Тогда
		Если ЕстьСкобкиОперанда Тогда
			ВыражениеЗамены = РаботаСФормуламиКлиентСервер.ПолучитьТекстОперандаДляВставки(ВыражениеЗамены);
		КонецЕсли;
		РезультатПреобразования.ПреобразованныйОперанд = ВыражениеЗамены;
	КонецЕсли;
	
	
	
	Возврат РезультатПреобразования;
	
КонецФункции

Функция ОперандУказанВФорматеИдентификаторов(Операнд)
	
	// Если выражение содержит характеристики и эти характеристики указаны в новом формате,
	// то операнд точно указан в новом формате.
	// Иначе необходимо парсить операнд, т.к. нельзя точно отделить написание реквизита от написания характеристики.
	// Например, Номенклатура.Экспедитор.
	ОперандВФорматеИдентификаторов = Ложь;
	
	СвойстваИсточниковХарактеристик = РаботаСФормуламиПовтИсп.СвойстваПоддерживаемыхИсточниковХарактеристик();
	Для Каждого ОписаниеСвойств Из СвойстваИсточниковХарактеристик Цикл
		Если СтрНайти(Операнд, "{" + ОписаниеСвойств.ПрефиксТипаВидаХарактеристик) > 0 Тогда
			ОперандВФорматеИдентификаторов = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОперандВФорматеИдентификаторов;
КонецФункции

#Область ОсобенностиОбновленияОбъектовМетаданных

// Преобразует выражение шаблона наименования вида номенклатуры в формат идентификаторов формул
// (характеристики будут заменены на строку формата "{ПрефиксТипаХарактеристик.ИдентификаторХарактеристик}".
// Например, "Контрагент.Основной склад доставки" --> "Контрагент.{ДР.ОсновнойСкладДоставки}".
// 
// Параметры:
// 	ИсходноеВыражение - Строка - Исходное выражение формулы.
// 	ТипНазначенияШаблона - Тип - Тип, для которого указывается шаблон наименования (формула):
// 			СправочникСсылка.Номенклатура, СправочникСсылка.ХарактеристикиНоменклатуры, СправочникСсылка.СерииНоменклатуры.
// 	НаборыДопРеквизитовПервогоУровня - Массив из СправочникСсылка.НаборыДополнительныхРеквизитовИСведений - отбор по наборам
// 			доп. реквизитов, которые могут быть указаны в качестве первой части операндов формулы.
// Возвращаемое значение:
// 	Структура - Описание:
// * ТекстОшибки - Строка - Текст ошибки в случае ее наличия.
// * ЕстьОшибки - Булево - Флаг ошибки при преобразовании формулы
// * ПреобразованноеВыражение - Строка - Преобразованная в формат идентификаторов формула.
//
Функция ПреобразоватьВФорматИдентификаторовВыражениеФормулыВидовНоменклатуры(ИсходноеВыражение, ТипНазначенияШаблона,
				НаборыДопРеквизитовПервогоУровня) Экспорт
	
	РезультатПреобразования = Новый Структура;
	РезультатПреобразования.Вставить("ПреобразованноеВыражение", "");
	РезультатПреобразования.Вставить("ЕстьОшибки", Ложь);
	РезультатПреобразования.Вставить("ТекстОшибки", "");
	
	ТаблицаЗаменОперандов = Новый ТаблицаЗначений;
	ТаблицаЗаменОперандов.Колонки.Добавить("ИсходныйОперанд");
	ТаблицаЗаменОперандов.Колонки.Добавить("ЗаменаОперанда");
	
	ИсходноеВыражениеВФорматеИдентификаторов = Ложь;
	ОперандыФормулы = РаботаСФормуламиКлиентСервер.ОперандыТекстовойФормулы(ИсходноеВыражение, Истина);
	Для Каждого ИсходныйОперанд Из ОперандыФормулы Цикл
		СтрокаЗамен = ТаблицаЗаменОперандов.Добавить();
		СтрокаЗамен.ИсходныйОперанд = РаботаСФормуламиКлиентСервер.ПолучитьТекстОперандаДляВставки(ИсходныйОперанд);
		
		Если ОперандУказанВФорматеИдентификаторов(СтрокаЗамен.ИсходныйОперанд) Тогда
			ИсходноеВыражениеВФорматеИдентификаторов = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ИсходноеВыражениеВФорматеИдентификаторов Тогда
		// Не может быть так, что один операнд указан в новом формате, другой в старом.
		// Ситуация возможна, например, при программном изменении объектов БД.
		РезультатПреобразования.ПреобразованноеВыражение = ИсходноеВыражение;
		Возврат РезультатПреобразования;
	КонецЕсли;
	Если ТаблицаЗаменОперандов.Количество() = 0 Тогда
		// Не используются вычисляемые операнды
		РезультатПреобразования.ПреобразованноеВыражение = ИсходноеВыражение;
		Возврат РезультатПреобразования;
	КонецЕсли;

	// Префикс выражения нужен для выполнения основного алгоритма парсинга, т.к. для него
	// задается тип значения. В принципе, нет разницы какое именно у него текстовое значение,
	// т.к. в видах номенклатур в операндах первая часть не указывается.
	Если ТипНазначенияШаблона = Тип("СправочникСсылка.Номенклатура") Тогда
		ПрефиксВыражения = "Номенклатура";
		ЗаголовокПоля = НСтр("ru = 'Номенклатура'");
	ИначеЕсли ТипНазначенияШаблона = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") Тогда
		ПрефиксВыражения = "ХарактеристикаНоменклатуры";
		ЗаголовокПоля = НСтр("ru = 'Характеристика номенклатуры'");
	Иначе
		ПрефиксВыражения = "СерияНоменклатуры";
		ЗаголовокПоля = НСтр("ru = 'Серия номенклатуры'");
	КонецЕсли;
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(ТипНазначенияШаблона);
	ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
	СхемаКомпоновки = СхемаКомпоновкиПолученияРеквизитовПоТипуЗначения(ОписаниеТипов, Истина, НаборыДопРеквизитовПервогоУровня);
	НаборОбъединение = СхемаКомпоновки.НаборыДанных[0]; // НаборДанныхОбъединениеСхемыКомпоновкиДанных -
	ПолеРеквизита = НаборОбъединение.Поля.Найти("Реквизит");
	ПолеРеквизита.ПутьКДанным = ПрефиксВыражения;
	ПолеРеквизита.Заголовок = ЗаголовокПоля;
	
	ИсточникиДоступныхХарактеристик = РаботаСФормуламиПовтИсп.СвойстваПоддерживаемыхИсточниковХарактеристик();
	
	ПредставленияВсехХарактеристикПоТипам = РаботаСФормуламиПовтИсп.ХарактеристикиПоПредставлениям();
	ПереопределенияПредставленийХарактеристикДляТипов = ХарактеристикиПоПредставлениям(ОписаниеТипов, ИсточникиДоступныхХарактеристик, Истина);
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки));
	ИменаПолейСРодителями = Новый Массив;
	
	ТаблицаЗаменОперандов.Сортировать("ИсходныйОперанд УБЫВ");
	
	Для Каждого СтрокаЗамен Из ТаблицаЗаменОперандов Цикл
		ИсходныйОперанд = СтрокаЗамен.ИсходныйОперанд;
		
		ПромежуточноеВыражение = ИсходныйОперанд;
		ЕстьСкобки = СтрНачинаетсяС(ИсходныйОперанд, "[") И СтрЗаканчиваетсяНа(ИсходныйОперанд, "]");
		Если ЕстьСкобки Тогда
			ПромежуточноеВыражение = Сред(ПромежуточноеВыражение, 1, СтрДлина(ПромежуточноеВыражение) - 1);
			ПромежуточноеВыражение = Сред(ПромежуточноеВыражение, 2);
		КонецЕсли;
		ПромежуточноеВыражение = ПрефиксВыражения + "." + ПромежуточноеВыражение;
		
		ПараметрыПреобразования = Новый Структура;
		ПараметрыПреобразования.Вставить("ИменаПолейСРодителями", ИменаПолейСРодителями);
		ПараметрыПреобразования.Вставить("ПредставленияХарактеристик", ПредставленияВсехХарактеристикПоТипам);
		ПараметрыПреобразования.Вставить("ПереопределенияПредставленийХарактеристикДляТипов", ПереопределенияПредставленийХарактеристикДляТипов);
		ПараметрыПреобразования.Вставить("КэшПараметровВыражений", Новый Соответствие);
		ПараметрыПреобразования.Вставить("ПерваяЧастьОперандаНеВключаетсяВТекст", Истина);
		
		РезультатПреобразованияОперанда = ПреобразоватьВФорматИдентификаторовОперандФормулы(ПромежуточноеВыражение,
			КомпоновщикНастроек,
			ПараметрыПреобразования);
		
		Если РезультатПреобразованияОперанда.ЕстьОшибки Тогда
			РезультатПреобразования.ЕстьОшибки = Истина;
			РезультатПреобразования.ТекстОшибки = РезультатПреобразованияОперанда.ТекстОшибки;
			Прервать;
		КонецЕсли;
		
		ПреобразованныйОперанд = РезультатПреобразованияОперанда.ПреобразованныйОперанд;
		// Удаление префикса выражения.
		ПреобразованныйОперанд = Сред(ПреобразованныйОперанд, СтрДлина(ПрефиксВыражения) + 2); // ПрефиксВыражения + "."
		// Добавляем скобки для идентификации операнда.
		ПреобразованныйОперанд = РаботаСФормуламиКлиентСервер.ПолучитьТекстОперандаДляВставки(ПреобразованныйОперанд);
		
		СтрокаЗамен.ЗаменаОперанда = ПреобразованныйОперанд;
	КонецЦикла;
	
	Если НЕ РезультатПреобразования.ЕстьОшибки Тогда
		ПреобразованноеВыражение = ИсходноеВыражение;
		Для Каждого СтрокаЗамен Из ТаблицаЗаменОперандов Цикл
			ПреобразованноеВыражение = СтрЗаменить(ПреобразованноеВыражение, СтрокаЗамен.ИсходныйОперанд, СтрокаЗамен.ЗаменаОперанда);
		КонецЦикла;
		
		РезультатПреобразования.ПреобразованноеВыражение = ПреобразованноеВыражение;
	КонецЕсли;
	
	Возврат РезультатПреобразования;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти
