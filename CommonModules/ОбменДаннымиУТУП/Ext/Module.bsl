#Область ПрограммныйИнтерфейс

// Возвращает сведения о том, какие группы обменов настроены
//
// Возвращаемое значение:
//	Структура - Структура содержащия сведения о том, какие типы обменов настроены.
//
Функция ОбщиеСведенияОНастроенныхОбменах() Экспорт

	Сведения = Новый Структура();
	Сведения.Вставить("ОбменРИБ", Ложь);
	Сведения.Вставить("ОбменED",  Ложь);
	Сведения.Вставить("ОбменXML", Ложь);
	
	//++ Локализация
	ПланыОбменаБСП = ОбменДаннымиСервер.УзлыОбменаБСП();
	
	Для Каждого ПланОбменаБСП Из ПланыОбменаБСП Цикл
		
		Если ПланОбменаБСП.УзелИнформационнойБазы.Метаданные().РаспределеннаяИнформационнаяБаза Тогда
			Сведения.ОбменРИБ = Истина;
		ИначеЕсли ОбменДаннымиСервер.ЭтоПланОбменаXDTO(ПланОбменаБСП.УзелИнформационнойБазы) Тогда
			Сведения.ОбменED = Истина;
		Иначе
			Если ПланОбменаБСП.УзелИнформационнойБазы.Метаданные() = Метаданные.ПланыОбмена.ОбменУправлениеТорговлейБухгалтерияПредприятия
				Или ПланОбменаБСП.УзелИнформационнойБазы.Метаданные() = Метаданные.ПланыОбмена.ОбменУправлениеТорговлейБухгалтерияПредприятия30
				Или ПланОбменаБСП.УзелИнформационнойБазы.Метаданные() = Метаданные.ПланыОбмена.ОбменУправлениеТорговлейБухгалтерияПредприятияКОРП
				Или ПланОбменаБСП.УзелИнформационнойБазы.Метаданные() = Метаданные.ПланыОбмена.ОбменУправлениеТорговлейБухгалтерияПредприятияКОРП30
				Или ПланОбменаБСП.УзелИнформационнойБазы.Метаданные() = Метаданные.ПланыОбмена.ОбменУправлениеТорговлейРозница
			Тогда
				Сведения.ОбменXML = Истина;
			ИНаче
				Продолжить;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	//-- Локализация
	
	Возврат Сведения;

КонецФункции

// Создает список доступных для создания планов обмена
Процедура СписокПлановОбмена(ПланыОбменаПодсистемы) Экспорт
	
	ЭтоБазоваяВерсия = СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации();
	
	Если Не ЭтоБазоваяВерсия Тогда
		
		ПланыОбменаПодсистемы.Добавить(Метаданные.ПланыОбмена.ОбменУправлениеТорговлейДокументооборот);
		ПланыОбменаПодсистемы.Добавить(Метаданные.ПланыОбмена.ОбменУправлениеТорговлейДокументооборот20);
		ПланыОбменаПодсистемы.Добавить(Метаданные.ПланыОбмена.ОбменУправлениеТорговлейРозница);
		ПланыОбменаПодсистемы.Добавить(Метаданные.ПланыОбмена.ОбменУправлениеТорговлейБухгалтерияПредприятия);
		ПланыОбменаПодсистемы.Добавить(Метаданные.ПланыОбмена.ОбменУправлениеТорговлейБухгалтерияПредприятия30);
		
		ПланыОбменаПодсистемы.Добавить(Метаданные.ПланыОбмена.ОбменУправлениеТорговлейБухгалтерияПредприятияКОРП);
		ПланыОбменаПодсистемы.Добавить(Метаданные.ПланыОбмена.ОбменУправлениеТорговлейБухгалтерияПредприятияКОРП30);
		ПланыОбменаПодсистемы.Добавить(Метаданные.ПланыОбмена.Полный);
		ПланыОбменаПодсистемы.Добавить(Метаданные.ПланыОбмена.СОтборами);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает признак доступности плана обмена, для базовой или проф версии
// Возвращаемое значение:
//  Булево - признак доступности
//
Функция ЭтоСозданиеУзлаОбмена(ПланОбмена) Экспорт
	
	Если СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
		Возврат ДоступностьПланаОбменаВБазовойВерсии(ПланОбмена.ПустаяСсылка().МетаДанные().Имя);
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

// Производит регистрацию объектов для начальной выгрузки 
// с помощью оптимизированного алгоритма.
Процедура РегистрацияИзмененияДляНачальнойВыгрузки(Получатель, СтандартнаяОбработка, Отбор) Экспорт
	
	Если ТипЗнч(Получатель) = Тип("ПланОбменаСсылка.ОбменУправлениеТорговлейРозница") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Получатель, "ИспользоватьОтборПоОрганизациям, 
			|ДатаНачалаВыгрузкиДокументов, 
			|Организации");
		
		Организации = ?(ЗначенияРеквизитов.ИспользоватьОтборПоОрганизациям, 
			ЗначенияРеквизитов.Организации.Выгрузить().ВыгрузитьКолонку("Организация"), Неопределено);
		
		ОбменДаннымиСервер.ЗарегистрироватьДанныеПоДатеНачалаВыгрузкиИОрганизациям( Получатель, 
			ЗначенияРеквизитов.ДатаНачалаВыгрузкиДокументов,
			Организации,
			Отбор);
		
	ИначеЕсли ТипЗнч(Получатель) = Тип("ПланОбменаСсылка.ОбменУправлениеТорговлейБухгалтерияПредприятия")
		Или ТипЗнч(Получатель) = Тип("ПланОбменаСсылка.ОбменУправлениеТорговлейБухгалтерияПредприятия30")
		Или ТипЗнч(Получатель) = Тип("ПланОбменаСсылка.ОбменУправлениеТорговлейБухгалтерияПредприятияКОРП30")
		Или ТипЗнч(Получатель) = Тип("ПланОбменаСсылка.ОбменУправлениеТорговлейБухгалтерияПредприятияКОРП") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Получатель, "ИспользоватьОтборПоОрганизациям, 
			|ДатаНачалаВыгрузкиДокументов, 
			|Организации, 
			|ВыгружатьУправленческуюОрганизацию,
			|ПравилаОтправкиСправочников,
			|ПравилаОтправкиДокументов,
			|ВыгружатьЦеныНоменклатуры");
		
		Организации = ?(ЗначенияРеквизитов.ИспользоватьОтборПоОрганизациям,
			ЗначенияРеквизитов.Организации.Выгрузить().ВыгрузитьКолонку("Организация"), Неопределено);
			
		Если Организации = Неопределено
			И Не ЗначенияРеквизитов.ВыгружатьУправленческуюОрганизацию Тогда
			
			Запрос = Новый Запрос("ВЫБРАТЬ
				|	Организации.Ссылка КАК Организация
				|ИЗ
				|	Справочник.Организации КАК Организации
				|ГДЕ
				|	Организации.ПометкаУдаления = ЛОЖЬ
				|	И Организации.Ссылка <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
				|
				|СГРУППИРОВАТЬ ПО
				|	Организации.Ссылка");
			
			Результат = Запрос.Выполнить();
			
			Если Не Результат.Пустой() Тогда
				Организации = Результат.Выгрузить().ВыгрузитьКолонку("Организация");
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначенияРеквизитов.ПравилаОтправкиСправочников <> "НеСинхронизировать"
			Или ЗначенияРеквизитов.ПравилаОтправкиДокументов = "АвтоматическаяСинхронизация" Тогда
			
			Если Отбор = Неопределено Тогда
				
				Отбор = Новый Массив();
				ИмяПланаОбмена = ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(Получатель);
				СоставПланаОбмена = Метаданные.ПланыОбмена[ИмяПланаОбмена].Состав;
				
				Для Каждого ЭлементСоставаПланаОбмена Из СоставПланаОбмена Цикл 
				
					Если (ОбщегоНазначения.ЭтоСправочник(ЭлементСоставаПланаОбмена.Метаданные) 
						И ЗначенияРеквизитов.ПравилаОтправкиСправочников = "АвтоматическаяСинхронизация"
						ИЛИ (ЗначенияРеквизитов.ПравилаОтправкиСправочников = "СинхронизироватьПоНеобходимости"
						И ЭлементСоставаПланаОбмена.Метаданные.Имя = "Организации"))
						ИЛИ (ОбщегоНазначения.ЭтоДокумент(ЭлементСоставаПланаОбмена.Метаданные)
						И ЗначенияРеквизитов.ПравилаОтправкиДокументов = "АвтоматическаяСинхронизация") 
						ИЛИ (ОбщегоНазначения.ЭтоРегистрСведений(ЭлементСоставаПланаОбмена.Метаданные)
						И ЗначенияРеквизитов.ПравилаОтправкиСправочников = "АвтоматическаяСинхронизация"
						И ЗначенияРеквизитов.ВыгружатьЦеныНоменклатуры) Тогда
						
						Отбор.Добавить(ЭлементСоставаПланаОбмена.Метаданные);
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если Отбор.Количество() = 0 Тогда
					Отбор = Неопределено;
				КонецЕсли;
				
			КонецЕсли;
			
			ОбменДаннымиСобытияУТУП.ЗарегистрироватьДанныеПоДатеНачалаВыгрузкиИОрганизациям( Получатель,
				ЗначенияРеквизитов.ДатаНачалаВыгрузкиДокументов,
				Организации,
				Отбор);
		
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Получатель) = Тип("ПланОбменаСсылка.СинхронизацияДанныхЧерезУниверсальныйФормат") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Получатель, "ИспользоватьОтборПоОрганизациям, 
			|ДатаНачалаВыгрузкиДокументов, 
			|Организации, 
			|ВыгружатьУправленческуюОрганизацию,
			|ПравилаОтправкиСправочников,
			|ПравилаОтправкиДокументов");
		
		Организации = ?(ЗначенияРеквизитов.ИспользоватьОтборПоОрганизациям,
			ЗначенияРеквизитов.Организации.Выгрузить().ВыгрузитьКолонку("Организация"), Неопределено);
			
		Если Организации = Неопределено
			И Не ЗначенияРеквизитов.ВыгружатьУправленческуюОрганизацию Тогда
			
			Запрос = Новый Запрос("ВЫБРАТЬ
				|	Организации.Ссылка КАК Организация
				|ИЗ
				|	Справочник.Организации КАК Организации
				|ГДЕ
				|	Организации.ПометкаУдаления = ЛОЖЬ
				|	И Организации.Ссылка <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
				|
				|СГРУППИРОВАТЬ ПО
				|	Организации.Ссылка");
			
			Результат = Запрос.Выполнить();
			
			Если Не Результат.Пустой() Тогда
				Организации = Результат.Выгрузить().ВыгрузитьКолонку("Организация");
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначенияРеквизитов.ПравилаОтправкиСправочников <> "НеСинхронизировать"
			ИЛИ ЗначенияРеквизитов.ПравилаОтправкиДокументов = "АвтоматическаяСинхронизация" Тогда
			
			Если Отбор = Неопределено Тогда
				
				Отбор = Новый Массив();
				ИмяПланаОбмена = ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(Получатель);
				СоставПланаОбмена = Метаданные.ПланыОбмена[ИмяПланаОбмена].Состав;
				
				Для Каждого ЭлементСоставаПланаОбмена Из СоставПланаОбмена Цикл 
				
					Если ОбщегоНазначения.ЭтоСправочник(ЭлементСоставаПланаОбмена.Метаданные) Тогда
						
						Если ЗначенияРеквизитов.ПравилаОтправкиСправочников = "АвтоматическаяСинхронизация"
							ИЛИ (ЗначенияРеквизитов.ПравилаОтправкиСправочников = "СинхронизироватьПоНеобходимости"
							И ЭлементСоставаПланаОбмена.Метаданные.Имя = "Организации") Тогда
							Отбор.Добавить(ЭлементСоставаПланаОбмена.Метаданные);
						КонецЕсли;
						
					ИначеЕсли ОбщегоНазначения.ЭтоДокумент(ЭлементСоставаПланаОбмена.Метаданные) Тогда
						
						Если ЗначенияРеквизитов.ПравилаОтправкиДокументов = "АвтоматическаяСинхронизация" Тогда
							Отбор.Добавить(ЭлементСоставаПланаОбмена.Метаданные);
						КонецЕсли;
					ИначеЕсли ОбщегоНазначения.ЭтоРегистр(ЭлементСоставаПланаОбмена.Метаданные) Тогда 
						
						Если ЗначенияРеквизитов.ПравилаОтправкиСправочников = "АвтоматическаяСинхронизация" Тогда
							Отбор.Добавить(ЭлементСоставаПланаОбмена.Метаданные);
						КонецЕсли;
	
					КонецЕсли;
					
				КонецЦикла;
				
				Если Отбор.Количество() = 0 Тогда
					Отбор = Неопределено;
				КонецЕсли;
				
			КонецЕсли;
				
			ОбменДаннымиСобытияУТУП.ЗарегистрироватьДанныеПоДатеНачалаВыгрузкиИОрганизациям(Получатель, 
				ЗначенияРеквизитов.ДатаНачалаВыгрузкиДокументов,
				Организации,
				Отбор);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает признак наличия действующих обменов, использующих формирование договоров по заказам.
// 
// Возвращаемое значение:
//  Булево - признак наличия узлов
//
Функция ЕстьОбменыСФормированиемДоговоровПоЗаказам() Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Обмены.Ссылка
		|ИЗ
		|	ПланОбмена.ОбменУправлениеТорговлейБухгалтерияПредприятия КАК Обмены
		|ГДЕ
		|	Обмены.ПометкаУдаления = ЛОЖЬ
		|	И Обмены.ПравилаСозданияДоговоровКонтрагентов = ""ПоЗаказам""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Обмены.Ссылка
		|ИЗ
		|	ПланОбмена.ОбменУправлениеТорговлейБухгалтерияПредприятия30 КАК Обмены
		|ГДЕ
		|	Обмены.ПометкаУдаления = ЛОЖЬ
		|	И Обмены.ПравилаСозданияДоговоровКонтрагентов = ""ПоЗаказам""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Обмены.Ссылка
		|ИЗ
		|	ПланОбмена.ОбменУправлениеТорговлейБухгалтерияПредприятияКОРП30 КАК Обмены
		|ГДЕ
		|	Обмены.ПометкаУдаления = ЛОЖЬ
		|	И Обмены.ПравилаСозданияДоговоровКонтрагентов = ""ПоЗаказам""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Обмены.Ссылка
		|ИЗ
		|	ПланОбмена.ОбменУправлениеТорговлейБухгалтерияПредприятияКОРП КАК Обмены
		|ГДЕ
		|	Обмены.ПометкаУдаления = ЛОЖЬ
		|	И Обмены.ПравилаСозданияДоговоровКонтрагентов = ""ПоЗаказам""");
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Возвращает значение ссылки управленческой организации 
// для настройки отбора, при настройке через внешнее соединение
//
// Возвращаемое значение:
//  Строка - идентификатор ссылки управленческой организации
//
Функция СсылкаУправленческойОрганизации() Экспорт
	Возврат ЗначениеВСтрокуВнутр(Справочники.Организации.УправленческаяОрганизация);
КонецФункции

// Объединяет массивы, возвращая результат объединения
// Возвращаемое значение:
//  Массив - объединенный массив значений
Функция ОбъединитьМассивы(Массив1, Массив2) Экспорт
	
	ОбъединенныйМассив = Новый Массив;
	
	Для Каждого ЭлементМассива Из Массив1 Цикл
	
		Если ОбъединенныйМассив.Найти(ЭлементМассива) = Неопределено Тогда
			ОбъединенныйМассив.Добавить(ЭлементМассива);
		КонецЕсли; 
	
	КонецЦикла;
	
	Для Каждого ЭлементМассива Из Массив2 Цикл
	
		Если ОбъединенныйМассив.Найти(ЭлементМассива) = Неопределено Тогда
			ОбъединенныйМассив.Добавить(ЭлементМассива);
		КонецЕсли; 
	
	КонецЦикла;
	
	Возврат ОбъединенныйМассив;
	
КонецФункции

// Блокирует изменение настроек узла плана обмена
//
Процедура УстановитьДоступностьНастроекУзлаИнформационнойБазы(Форма) Экспорт
	
	Если ОбменДаннымиПовтИспУТУП.ЭтоПодчиненныйУзелРИБСОтбором() Тогда
	
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ГруппаПояснениеБлокировки",
			"Видимость",
			Истина);
			
		РазрешенныеНастройки = НастройкиДоступныеДляИзмененияВПодчиненномУзле();
		
		Для Каждого ЭлементФормы Из Форма.Элементы Цикл
			
			Если ТипЗнч(ЭлементФормы) = Тип("ПолеФормы")
				И РазрешенныеНастройки.Найти(ЭлементФормы.ПутьКДанным)= Неопределено Тогда
				
				ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
					Форма.Элементы,
					ЭлементФормы.Имя,
					"Доступность",
					Ложь);
					
			КонецЕсли;
				
		КонецЦикла; 
		
	КонецЕсли;
	
КонецПроцедуры

// Предназначена для точной идентификации имени этой конфигурации при настройке 
// синхронизации данных в модели сервиса.
// В случае если данная конфигурация разработана на основе оригинальной конфигурации
// и должна поддерживать обмен с другими прикладными решениями с помощью плана обмена,
// взятого из оригинальной конфигурации, то следует вернуть имя оригинальной конфигурации.
// Например, для конфигурации МояБухгалтерия, которая является доработанной конфигурацией БухгалтерияПредприятия,
// следует вернуть БухгалтерияПредприятия.
//
// Используется только для планов обмена в модели сервиса.
//
// Возвращаемое значение:
//	Строка - имя этой или другой конфигурации, от имени которой выполняется обмен данными
//			(имя конфигурации как задано в метаданных).
//
// Пример:
//  Возврат "БухгалтерияПредприятия";
//
Функция ИмяКонфигурацииИсточника() Экспорт
	Возврат "УправлениеТорговлей";
КонецФункции

// Определить объекты метаданных, в модулях менеджеров которых ограничивается возможность редактирования реквизитов
// с помощью экспортной функции ПолучитьБлокируемыеРеквизитыОбъекта.
//
// Параметры:
//   Объекты - Соответствие - в качестве ключа указать полное имя объекта метаданных,
//                            подключенного к подсистеме "Запрет редактирования реквизитов объектов";
//                            В качестве значения - пустую строку.
//
// Пример: 
//   Объекты.Вставить(Метаданные.Документы.ЗаказПокупателя.ПолноеИмя(), "");
//
Процедура ПриОпределенииОбъектовСЗаблокированнымиРеквизитами(Объекты) Экспорт
	
	Объекты.Вставить(Метаданные.ПланыОбмена.СОтборами.ПолноеИмя(), "ПолучитьБлокируемыеРеквизитыОбъекта");
	
КонецПроцедуры

#Область ОбщиеПроцедурыИФункцииДляПлановОбменаРИБ

Функция РегистрыДляСозданияЗаданийКРасчетуСебестоимости() Экспорт
	
	ТипыРегистров = Новый Массив();
	ТипыРегистров.Добавить(Тип("РегистрНакопленияНаборЗаписей.ПартииПроизводственныхЗатрат"));
	ТипыРегистров.Добавить(Тип("РегистрНакопленияНаборЗаписей.ПартииПрочихРасходов"));
	ТипыРегистров.Добавить(Тип("РегистрНакопленияНаборЗаписей.ПартииРасходовНаСебестоимостьТоваров"));
	ТипыРегистров.Добавить(Тип("РегистрНакопленияНаборЗаписей.ПартииТоваровОрганизаций"));
	ТипыРегистров.Добавить(Тип("РегистрНакопленияНаборЗаписей.ПартииТоваровПереданныеНаКомиссию"));
	ТипыРегистров.Добавить(Тип("РегистрНакопленияНаборЗаписей.МатериалыИРаботыВПроизводстве"));
	ТипыРегистров.Добавить(Тип("РегистрНакопленияНаборЗаписей.ПрочиеРасходы"));
	ТипыРегистров.Добавить(Тип("РегистрНакопленияНаборЗаписей.СебестоимостьТоваров"));
	ТипыРегистров.Добавить(Тип("РегистрНакопленияНаборЗаписей.ТоварыКОформлениюОтчетовКомитенту"));
	ТипыРегистров.Добавить(Тип("РегистрНакопленияНаборЗаписей.ТоварыОрганизаций"));
	ТипыРегистров.Добавить(Тип("РегистрНакопленияНаборЗаписей.ТоварыОрганизацийКПередаче"));
	ТипыРегистров.Добавить(Тип("РегистрНакопленияНаборЗаписей.ТоварыПереданныеНаКомиссию"));
	
	Возврат ТипыРегистров;
	
КонецФункции

Функция РегистрыДляСозданияЗаданийКРасчетуВзаиморасчетовСКлиентами() Экспорт
	
	ТипыРегистров = Новый Массив();
	ТипыРегистров.Добавить(Тип("РегистрНакопленияНаборЗаписей.РасчетыСКлиентами"));
	ТипыРегистров.Добавить(Тип("РегистрНакопленияНаборЗаписей.РасчетыСКлиентамиПоДокументам"));
	
	Возврат ТипыРегистров;
	
КонецФункции

Функция РегистрыДляСозданияЗаданийКРасчетуВзаиморасчетовСПоставщиками() Экспорт
	
	ТипыРегистров = Новый Массив();
	ТипыРегистров.Добавить(Тип("РегистрНакопленияНаборЗаписей.РасчетыСПоставщиками"));
	ТипыРегистров.Добавить(Тип("РегистрНакопленияНаборЗаписей.РасчетыСПоставщикамиПоДокументам"));
	
	Возврат ТипыРегистров;
	
КонецФункции

Функция РегистрыДляПроверкиБлокировкиЗакрытияМесяца() Экспорт
	
	Возврат Метаданные.ПодпискиНаСобытия.ЗаданияКЗакрытиюМесяцаПередЗаписью.Источник.Типы();
	
КонецФункции

Процедура СоздатьЗаданияКРасчетуОффлайновыхРегистров(ПолученныеДанные, ИмяРегистраДляСозданияЗаписи) Экспорт
	
	ДокументЗадания = ПолученныеДанные.Отбор.Регистратор.Значение;
	
	//Задания для расчета полученных данных
	ТаблицаНабора = Новый ТаблицаЗначений();
	ТаблицаНабора.Колонки.Добавить("Период");
	
	Если ПолученныеДанные.Количество() > 0 Тогда
		
		ТаблицаНабора = ПолученныеДанные.Выгрузить();
		ТаблицаНабора.Свернуть("Период");
		
		Для Каждого СтрокаТаблицы Из ТаблицаНабора Цикл
			СтрокаТаблицы.Период = НачалоМесяца(СтрокаТаблицы.Период);
			РегистрыСведений[ИмяРегистраДляСозданияЗаписи].СоздатьЗаписьРегистра(СтрокаТаблицы.Период, ДокументЗадания);
		КонецЦикла;
		
	КонецЕсли;
	
	//Задания для перерасчета имеющихся в базе данных
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ВыбираемыйРегистр.Период, МЕСЯЦ) КАК ПериодЗадания
		|ИЗ
		|	РегистрНакопления.%ИмяРегистра% КАК ВыбираемыйРегистр
		|ГДЕ
		|	ВыбираемыйРегистр.Регистратор = &Регистратор");
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяРегистра%", ПолученныеДанные.Метаданные().Имя);
	Запрос.УстановитьПараметр("Регистратор", ДокументЗадания);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ТаблицаНабора.Найти(Выборка.ПериодЗадания, "Период") = Неопределено Тогда
			РегистрыСведений[ИмяРегистраДляСозданияЗаписи].СоздатьЗаписьРегистра(Выборка.ПериодЗадания, ДокументЗадания);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбщиеПроцедурыИФункцииДляПланаОбменаРИБСОтборами

// Формирует текст запроса и параметры запроса по узлам обмена
// Для контроля прохождения фильтра ПРО
Процедура ЗаполнитьПараметрыЗапроса(Объект, ТекстЗапроса, ПараметрыЗапроса) Экспорт
	
	Если Не ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	ПараметрыЗапроса = ОпределитьПараметрыЗапросаОбъекта(Объект);
	ТекстЗапроса     = СформироватьТекстЗапросаПравилРегистрации();
	
КонецПроцедуры

// Определяет параметры запроса ПРО для выгружаемых объектов
// Возвращаемое значение:
//  ПараметрыЗапроса - Структура параметров запроса
//    Отказ                 - Отказ от выполнения регистрации
//    Подразделения         - Массив подразделений объекта
//    Организации           - Массив организаций объекта
//    ВидыЦен               - Массив видов цен объекта
//    ФильтрПоПодразделению - Булево Определяет применение к объекту фильтра по подразделению
//    ФильтрПоОрганизации   - Булево Определяет применение к объекту фильтра по организации
//    ФильтрПоВидуЦен       - Булево Определяет применение к объекту фильтра по виду цен
//
Функция ОпределитьПараметрыЗапросаОбъекта(ЭлементДанных, ТипЗначенияОбъекта = Неопределено, ФормироватьИерархию = Истина) Экспорт
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Отказ",                               Ложь);
	ПараметрыЗапроса.Вставить("КонтрольПроведенияПоОдномуИзУсловий", Ложь);
	ПараметрыЗапроса.Вставить("СообщениеПользователю",               "");
	ПараметрыЗапроса.Вставить("РеквизитПроверкиПодразделения",       "");
	
	ПараметрыЗапроса.Вставить("Подразделения", Новый Массив);
	ПараметрыЗапроса.Вставить("Организации",   Новый Массив);
	ПараметрыЗапроса.Вставить("ВидыЦен",       Новый Массив);
	
	ПараметрыЗапроса.Вставить("ФильтрПоПодразделению", Ложь);
	ПараметрыЗапроса.Вставить("ФильтрПоОрганизации",   Ложь);
	ПараметрыЗапроса.Вставить("ФильтрПоВидуЦен",       Ложь);
	
	Если Не ЗначениеЗаполнено(ТипЗначенияОбъекта) Тогда
		ТипЗначенияОбъекта = ТипЗнч(ЭлементДанных);
	КонецЕсли;
	
	Если ТипЗначенияОбъекта = Тип("ДокументОбъект.Встреча")
		Или ТипЗначенияОбъекта = Тип("ДокументОбъект.ЗапланированноеВзаимодействие")
		Или ТипЗначенияОбъекта = Тип("ДокументОбъект.СообщениеSMS")
		Или ТипЗначенияОбъекта = Тип("ДокументОбъект.ТелефонныйЗвонок")
		Или ТипЗначенияОбъекта = Тип("ДокументОбъект.ЭлектронноеПисьмоВходящее")
		Или ТипЗначенияОбъекта = Тип("ДокументОбъект.ЭлектронноеПисьмоИсходящее") Тогда
		
		ЗначенияФильтра_ДокументовВзаимодействия(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ВзаимозачетЗадолженности") Тогда
		
		ЗначенияФильтра_ВзаимозачетЗадолженности(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.СверкаВзаиморасчетов2_4") Тогда
		
		ЗначенияФильтра_СверкаВзаиморасчетов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.КорректировкаЗадолженности") Тогда
		
		ЗначенияФильтра_СписаниеЗадолженности(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.АвансовыйОтчет") Тогда
		
		ЗначенияФильтра_АвансовыйОтчет(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.АктОРасхожденияхПослеПриемки") Тогда
		
		ЗначенияФильтра_АктОРасхожденияхПослеПриемки(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.АктОРасхожденияхПослеПеремещения") Тогда
		
		ЗначенияФильтра_АктОРасхожденияхПослеПеремещения(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.Бронирование") Тогда
		
		ЗначенияФильтра_Бронирование(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ВозвратТоваровПоставщику") Тогда
		
		ЗначенияФильтра_ВозвратТоваровПоставщику(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ВыкупВозвратнойТарыУПоставщика") Тогда
		
		ЗначенияФильтра_ВыкупВозвратнойТарыУПоставщика(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ДоверенностьВыданная") Тогда
		
		ЗначенияФильтра_ДоверенностьВыданная(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ЗаказПоставщику") Тогда
		
		ЗначенияФильтра_ЗаказПоставщику(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ЗаписьКнигиПокупок") Тогда
		
		ЗначенияФильтра_ЗаписьКнигиПокупок(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ЗаявкаНаКомандировку") Тогда
		
		ЗначенияФильтра_ЗаявкаНаКомандировку(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.КорректировкаПриобретения") Тогда
		
		ЗначенияФильтра_КорректировкаПриобретения(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ПланЗакупок") Тогда
		
		ЗначенияФильтра_ПланЗакупок(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ПоступлениеТоваровНаСклад") Тогда
		
		ЗначенияФильтра_ПоступлениеТоваров(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ПриобретениеТоваровУслуг") Тогда
		
		ЗначенияФильтра_ПриобретениеТоваровУслуг(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ПриобретениеУслугПрочихАктивов") Тогда
		
		ЗначенияФильтра_ПриобретениеУслугПрочихАктивов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.РегистрацияЦенНоменклатурыПоставщика") Тогда
		
		ЗначенияФильтра_РегистрацияЦенНоменклатурыПоставщика(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.СчетФактураПолученный") Тогда
		
		ЗначенияФильтра_СчетФактураПолученный(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.СчетФактураПолученныйАванс") Тогда
		
		ЗначенияФильтра_СчетФактураПолученныйАванс(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ТаможеннаяДекларацияИмпорт") Тогда
		
		ЗначенияФильтра_ТаможеннаяДекларацияИмпорт(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ЗаявлениеОВвозеТоваров") Тогда
		
		ЗначенияФильтра_ЗаявлениеОВвозеТоваров(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ВозвратТоваровМеждуОрганизациями") Тогда
		
		ЗначенияФильтра_ВозвратТоваровМеждуОрганизациями(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ОтчетПоКомиссииМеждуОрганизациями") Тогда
		
		ЗначенияФильтра_ОтчетПоКомиссииМеждуОрганизациями(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ПередачаТоваровМеждуОрганизациями") Тогда
		
		ЗначенияФильтра_ПередачаТоваровМеждуОрганизациями(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ОтчетКомиссионера") Тогда
		
		ЗначенияФильтра_ОтчетКомиссионера(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ОтчетКомиссионераОСписании") Тогда
		
		ЗначенияФильтра_ОтчетКомиссионераОСписании(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ОтчетКомитенту") Тогда
		
		ЗначенияФильтра_ОтчетКомитенту(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ОтчетКомитентуОСписании") Тогда
		
		ЗначенияФильтра_ОтчетКомитентуОСписании(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.АктВыполненныхРабот") Тогда
		
		ЗначенияФильтра_АктВыполненныхРабот(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.АктОРасхожденияхПослеОтгрузки") Тогда
		
		ЗначенияФильтра_АктОРасхожденияхПослеОтгрузки(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.БлокировкаВычетаНДС") Тогда
		
		ЗначенияФильтра_БлокировкаВычетаНДС(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ВозвратПодарочныхСертификатов") Тогда
		
		ЗначенияФильтра_ВозвратПодарочныхСертификатов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ВозвратТоваровОтКлиента") Тогда
		
		ЗначенияФильтра_ВозвратТоваровОтКлиента(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ВыкупВозвратнойТарыКлиентом") Тогда
		
		ЗначенияФильтра_ВыкупВозвратнойТарыКлиентом(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ЗаказКлиента") Тогда
		
		ЗначенияФильтра_ЗаказКлиента(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ЗаписьКнигиПродаж") Тогда
		
		ЗначенияФильтра_ЗаписьКнигиПродаж(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
		
		ЗначенияФильтра_ЗаявкаНаВозвратТоваровОтКлиента(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ИсправлениеРазвернутогоСальдоТоваровОрганизаций") Тогда
		
		ЗначенияФильтра_ИсправлениеРазвернутогоСальдоТоваровОрганизаций(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.КорректировкаРеализации") Тогда
		
		ЗначенияФильтра_КорректировкаРеализации(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ОтчетОРозничныхВозвратах") Тогда
		
		ЗначенияФильтра_ОтчетОРозничныхВозвратах(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ОтчетОРозничныхПродажах") Тогда
		
		ЗначенияФильтра_ОтчетОРозничныхПродажах(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ПеремещениеТоваров") Тогда
		
		ЗначенияФильтра_ПеремещениеТоваров(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ПланПродаж") Тогда
		
		ЗначенияФильтра_ПланПродаж(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ПланПродажПоКатегориям") Тогда
		
		ЗначенияФильтра_ПланПродажПоКатегориям(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.РеализацияПодарочныхСертификатов") Тогда
		
		ЗначенияФильтра_РеализацияПодарочныхСертификатов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
		
		ЗначенияФильтра_РеализацияТоваровИУслуг(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.РеализацияУслугПрочихАктивов") Тогда
		
		ЗначенияФильтра_РеализацияУслугПрочихАктивов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.СчетНаОплатуКлиенту") Тогда
		
		ЗначенияФильтра_СчетНаОплатуКлиенту(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.СчетФактураВыданный") Тогда
		
		ЗначенияФильтра_СчетФактураВыданный(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.СчетФактураВыданныйАванс") Тогда
		
		ЗначенияФильтра_СчетФактураВыданныйАванс(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.СчетФактураНаНеподтвержденнуюРеализацию0") Тогда
		
		ЗначенияФильтра_СчетФактураНаНеподтвержденнуюРеализацию(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ТранспортнаяНакладная") Тогда
		
		ЗначенияФильтра_ТранспортнаяНакладная(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.АннулированиеПодарочныхСертификатов") Тогда
		
		ЗначенияФильтра_АннулированиеПодарочныхСертификатов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ВводОстатков") Тогда
		
		ЗначенияФильтра_ВводОстатков(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ВводОстатковВзаиморасчетов") Тогда
		
		ЗначенияФильтра_ВводОстатковВзаиморасчетов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ВводОстатковДенежныхСредств") Тогда
		
		ЗначенияФильтра_ВводОстатковДенежныхСредств(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ВводОстатковНДСПредъявленного") Тогда
		
		ЗначенияФильтра_ВводОстатковНДСПредъявленного(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ВводОстатковОПродажахЗаПрошлыеПериоды") Тогда
		
		ЗначенияФильтра_ВводОстатковОПродажахЗаПрошлыеПериоды(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ВводОстатковПоФинансовымИнструментам") Тогда
		
		ЗначенияФильтра_ВводОстатковПоФинансовымИнструментам(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ВводОстатковПрочиеРасходы") Тогда
		
		ЗначенияФильтра_ВводОстатковПрочиеРасходы(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ВводОстатковПрочихАктивовПассивов") Тогда
		
		ЗначенияФильтра_ВводОстатковПрочихАктивовПассивов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ВводОстатковРасчетовПоЭквайрингу") Тогда
		
		ЗначенияФильтра_ВводОстатковРасчетовПоЭквайрингу(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ВводОстатковСПодотчетниками") Тогда
		
		ЗначенияФильтра_ВводОстатковСПодотчетниками(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ВводОстатковТоваров") Тогда
		
		ЗначенияФильтра_ВводОстатковТоваров(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ВыкупПринятыхНаХранениеТоваров") Тогда
		
		ЗначенияФильтра_ВыкупПринятыхНаХранениеТоваров(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ВыкупТоваровХранителем") Тогда
		
		ЗначенияФильтра_ВыкупТоваровХранителем(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ЗаданиеТорговомуПредставителю") Тогда
		
		ЗначенияФильтра_ЗаданиеТорговомуПредставителю(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ИнойДокументПодтвержденияНДС") Тогда
		
		ЗначенияФильтра_ИнойДокументПодтвержденияНДС(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);	
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.КоммерческоеПредложениеКлиенту") Тогда
		
		ЗначенияФильтра_КоммерческоеПредложениеКлиенту(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.КорректировкаНазначенияТоваров") Тогда
		
		ЗначенияФильтра_КорректировкаНазначенияТоваров(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.КорректировкаНалогообложенияНДСПартийТоваров") Тогда
		
		ЗначенияФильтра_КорректировкаНалогообложенияНДСПартийТоваров(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.КорректировкаВидаДеятельностиНДС") Тогда
		
		ЗначенияФильтра_КорректировкаВидаДеятельностиНДС(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.НачисленияКредитовИДепозитов") Тогда
		
		ЗначенияФильтра_НачисленияКредитовИДепозитов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ДвижениеПрочихАктивовПассивов") Тогда
		
		ЗначенияФильтра_ДвижениеПрочихАктивовПассивов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.УведомлениеОбОстаткахПрослеживаемыхТоваров") Тогда
		
		ЗначенияФильтра_УведомлениеОбОстаткахПрослеживаемыхТоваров(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.УведомлениеОВвозеПрослеживаемыхТоваров") Тогда
		
		ЗначенияФильтра_УведомлениеОВвозеПрослеживаемыхТоваров(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.УведомлениеОПеремещенииПрослеживаемыхТоваров") Тогда
		
		ЗначенияФильтра_УведомлениеОПеремещенииПрослеживаемыхТоваров(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ОтгрузкаТоваровСХранения") Тогда
		
		ЗначенияФильтра_ОтгрузкаТоваровСХранения(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ОтчетКомитентуОЗакупках") Тогда
		
		ЗначенияФильтра_ОтчетКомитентуОЗакупках(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ПервичныйДокумент") Тогда
		
		ЗначенияФильтра_ПервичныйДокумент(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ПередачаТоваровХранителю") Тогда
		
		ЗначенияФильтра_ПередачаТоваровХранителю(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ПланВнутреннихПотреблений") Тогда
		
		ЗначенияФильтра_ПланВнутреннихПотреблений(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ПоступлениеТоваровОтХранителя") Тогда
		
		ЗначенияФильтра_ПоступлениеТоваровОтХранителя(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ПриемкаТоваровНаХранение") Тогда
		
		ЗначенияФильтра_ПриемкаТоваровНаХранение(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.РасчетКурсовыхРазниц") Тогда
		
		ЗначенияФильтра_РасчетКурсовыхРазниц(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ПрочиеДоходыРасходы") Тогда
		
		ЗначенияФильтра_ПрочиеДоходыРасходы(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.РаспределениеНДС") Тогда
		
		ЗначенияФильтра_РаспределениеНДС(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.РаспределениеРасходовБудущихПериодов") Тогда
		
		ЗначенияФильтра_РаспределениеРасходовБудущихПериодов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.РасчетСебестоимостиТоваров") Тогда
		
		ЗначенияФильтра_РасчетСебестоимостиТоваров(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.УстановкаЦенНоменклатуры") Тогда
		
		ЗначенияФильтра_УстановкаЦенНоменклатуры(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ВнутреннееПотребление") Тогда
		
		ЗначенияФильтра_ВнутреннееПотребление(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ЗаданиеНаПеревозку") Тогда
		
		ЗначенияФильтра_ЗаданиеНаПеревозку(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ЗаказНаВнутреннееПотребление") Тогда
		
		ЗначенияФильтра_ЗаказНаВнутреннееПотребление(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ЗаказНаПеремещение") Тогда
		
		ЗначенияФильтра_ЗаказНаПеремещение(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ЗаказНаСборку") Тогда
		
		ЗначенияФильтра_ЗаказНаСборку(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ИзменениеАссортимента") Тогда
		
		ЗначенияФильтра_ИзменениеАссортимента(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.КорректировкаИзлишковНедостачПоТоварнымМестам") Тогда
		
		ЗначенияФильтра_КорректировкаИзлишковНедостачПоТоварнымМестам(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.КорректировкаОбособленногоУчетаЗапасов") Тогда
		
		ЗначенияФильтра_КорректировкаОбособленногоУчетаЗапасов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ОприходованиеИзлишковТоваров") Тогда
		
		ЗначенияФильтра_ОприходованиеИзлишковТоваров(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ОприходованиеИзлишковТоваровУХранителя") Тогда
		
		ЗначенияФильтра_ОприходованиеИзлишковТоваровУХранителя(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ОрдерНаОтражениеИзлишковТоваров") Тогда
		
		ЗначенияФильтра_ОрдерНаОтражениеИзлишковТоваров(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ОрдерНаОтражениеНедостачТоваров") Тогда
		
		ЗначенияФильтра_ОрдерНаОтражениеНедостачТоваров(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ОрдерНаОтражениеПересортицыТоваров") Тогда
		
		ЗначенияФильтра_ОрдерНаОтражениеПересортицыТоваров(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ОрдерНаОтражениеПорчиТоваров") Тогда
		
		ЗначенияФильтра_ОрдерНаОтражениеПорчиТоваров(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ОрдерНаПеремещениеТоваров") Тогда
		
		ЗначенияФильтра_ОрдерНаПеремещениеТоваров(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ОтборРазмещениеТоваров") Тогда
		
		ЗначенияФильтра_ОтборРазмещениеТоваров(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.КорректировкаПоОрдеруНаТовары") Тогда
		
		ЗначенияФильтра_КорректировкаПоОрдеруНаТовары(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ПересортицаТоваров") Тогда
		
		ЗначенияФильтра_ПересортицаТоваров(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ПересортицаТоваровУХранителя") Тогда
		
		ЗначенияФильтра_ПересортицаТоваровУХранителя(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ПересчетТоваров") Тогда
		
		ЗначенияФильтра_ПересчетТоваров(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ПланОстатков") Тогда
		
		ЗначенияФильтра_ПланОстатков(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ПланСборкиРазборки") Тогда
		
		ЗначенияФильтра_ПланСборкиРазборки(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию)
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ПорчаТоваров") Тогда
		
		ЗначенияФильтра_ПорчаТоваров(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ПорчаТоваровУХранителя") Тогда
		
		ЗначенияФильтра_ПорчаТоваровУХранителя(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ПриходныйОрдерНаТовары") Тогда
		
		ЗначенияФильтра_ПриходныйОрдерНаТовары(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ПрочееОприходованиеТоваров") Тогда
		
		ЗначенияФильтра_ПрочееОприходованиеТоваров(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.РасходныйОрдерНаТовары") Тогда
		
		ЗначенияФильтра_РасходныйОрдерНаТовары(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.РасчетПроцентныхРасходовДисконтирования") Тогда
		
		ЗначенияФильтра_РасчетПроцентныхРасходовДисконтирования(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.СборкаТоваров") Тогда
		
		ЗначенияФильтра_СборкаТоваров(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.СписаниеНедостачТоваров") Тогда
		
		ЗначенияФильтра_СписаниеНедостачТоваров(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию); 
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.СписаниеРасхожденийПоступлениеПриобретение") Тогда
		
		ЗначенияФильтра_СписаниеРасхожденийПоступлениеПриобретение(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.НачислениеРеверсивногоНДС") Тогда
		
		ЗначениеФильтра_НачислениеРеверсивногоНДС(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ОтчетОСписанииТоваровСХранения") Тогда
		
		ЗначенияФильтра_СписаниеПринятыхНаХранениеТоваров(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ОтчетОСписанииТоваровУХранителя") Тогда
		
		ЗначенияФильтра_СписаниеТоваровУХранителя(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.УстановкаБлокировокЯчеек") Тогда
		
		ЗначенияФильтра_УстановкаБлокировокЯчеек(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ИнвентаризационнаяОпись") Тогда
		
		ЗначенияФильтра_ИнвентаризационнаяОпись(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.УстановкаКвотАссортимента") Тогда
		
		ЗначенияФильтра_УстановкаКвотАссортимента(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ВнесениеДенежныхСредствВКассуККМ") Тогда
		
		ЗначенияФильтра_ВнесениеДенежныхСредствВКассуККМ(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ВыемкаДенежныхСредствИзКассыККМ") Тогда
		
		ЗначенияФильтра_ВыемкаДенежныхСредствИзКассыККМ(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникОбъект.КассовыеКниги") Тогда
		
		ЗначенияФильтра_Справочники_КассовыеКниги(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
		
		ЗначенияФильтра_ЗаявкаНаРасходованиеДенежныхСредств(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ЛистКассовойКниги") Тогда
		
		ЗначенияФильтра_ЛистКассовойКниги(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.КорректировкаЗадолженностиПоФинансовымИнструментам") Тогда
		
		ЗначенияФильтра_КорректировкаЗадолженностиПоФинансовымИнструментам(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.КассоваяСмена") Тогда
		
		ЗначенияФильтра_КассоваяСмена(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ЛимитыРасходаДенежныхСредств") Тогда
		
		ЗначенияФильтра_ЛимитыРасходаДенежныхСредств(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ОперацияПоПлатежнойКарте") Тогда
		
		ЗначенияФильтра_ОперацияПоПлатежнойКарте(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ОтчетБанкаПоОперациямЭквайринга") Тогда
		
		ЗначенияФильтра_ОтчетБанкаПоОперациямЭквайринга(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ОжидаемоеПоступлениеДенежныхСредств") Тогда
		
		ЗначенияФильтра_ОжидаемоеПоступлениеДенежныхСредств(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ПоступлениеБезналичныхДенежныхСредств") Тогда
		
		ЗначенияФильтра_ПоступлениеБезналичныхДенежныхСредств(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ПриходныйКассовыйОрдер") Тогда
		
		ЗначенияФильтра_ПриходныйКассовыйОрдер(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.РаспоряжениеНаПеремещениеДенежныхСредств") Тогда
		
		ЗначенияФильтра_РаспоряжениеНаПеремещениеДенежныхСредств(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.РасходныйКассовыйОрдер") Тогда
		
		ЗначенияФильтра_РасходныйКассовыйОрдер(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.РегистраторРасчетов") Тогда
		
		ЗначенияФильтра_РегистраторРасчетов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.РегистраторЗапасыИПотребности") Тогда
		
		ЗначенияФильтра_РегистраторЗапасыИПотребности(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.СписаниеБезналичныхДенежныхСредств") Тогда
		
		ЗначенияФильтра_СписаниеБезналичныхДенежныхСредств(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.УведомлениеОЗачисленииВалюты") Тогда
		
		ЗначенияФильтра_УведомлениеОЗачисленииВалюты(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.СписаниеНДСНаРасходы") Тогда
		
		ЗначенияФильтра_СписаниеНДСНаРасходы(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.СправкаОПодтверждающихДокументах") Тогда
		
		ЗначенияФильтра_СправкаОПодтверждающихДокументах(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ПодтверждениеЗачисленияЗарплаты") Тогда
		
		ЗначенияФильтра_ПодтверждениеЗачисленияЗарплаты(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ЧекККМ") Тогда
		
		ЗначенияФильтра_ЧекККМ(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ЧекККМВозврат") Тогда
		
		ЗначенияФильтра_ЧекККМВозврат(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ЧекККМКоррекции") Тогда
		
		ЗначенияФильтра_ЧекККМКоррекции(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ОтражениеРасхожденийПриИнкассацииДенежныхСредств") Тогда
		
		ЗначенияФильтра_ОтражениеРасхожденийПриИнкассацииДенежныхСредств(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ИнвентаризацияНаличныхДенежныхСредств") Тогда
		
		ЗначенияФильтра_ИнвентаризацияНаличныхДенежныхСредств(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ГрафикИсполненияДоговора") Тогда
		
		ЗначенияФильтра_ГрафикИсполненияДоговора(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ПоручениеЭкспедитору") Тогда
		
		ЗначенияФильтра_ПоручениеЭкспедитору(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ТТНВходящаяЕГАИС") Тогда
		
		ЗначенияФильтра_ТТНВходящаяЕГАИС(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.УведомлениеОПланируемомИмпортеЕГАИС") Тогда
		
		ЗначенияФильтра_УведомлениеОПланируемомИмпортеЕГАИС(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ТТНИсходящаяЕГАИС") Тогда
		
		ЗначенияФильтра_ТТНИсходящаяЕГАИС(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ЗапросСкладскогоЖурналаВЕТИС")
		Или ТипЗначенияОбъекта = Тип("ДокументОбъект.ИнвентаризацияПродукцииВЕТИС")
		Или ТипЗначенияОбъекта = Тип("ДокументОбъект.ПроизводственнаяОперацияВЕТИС")Тогда
		
		ЗначенияФильтра_ДокументыВЕТИСОдинХозяйствующийСубъект(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ВходящаяТранспортнаяОперацияВЕТИС")
		Или ТипЗначенияОбъекта = Тип("ДокументОбъект.ИсходящаяТранспортнаяОперацияВЕТИС") Тогда
		
		ЗначенияФильтра_ДокументыВЕТИСНесколькоХозяйствующихСубъектов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ОбъединениеЗаписейСкладскогоЖурналаВЕТИС") Тогда
		
		ЗначенияФильтра_ОбъединениеЗаписейСкладскогоЖурналаВЕТИС(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ЗаявкаНаВыпускКиЗГИСМ")
		Или ТипЗначенияОбъекта = Тип("ДокументОбъект.УведомлениеОВвозеМаркированныхТоваровИзЕАЭСГИСМ")
		Или ТипЗначенияОбъекта = Тип("ДокументОбъект.УведомлениеОПоступленииМаркированныхТоваровГИСМ")
		Или ТипЗначенияОбъекта = Тип("ДокументОбъект.УведомлениеОСписанииКиЗГИСМ")
		Или ТипЗначенияОбъекта = Тип("ДокументОбъект.УведомлениеОбИмпортеМаркированныхТоваровГИСМ")
		Или ТипЗначенияОбъекта = Тип("ДокументОбъект.УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ") 
		Или ТипЗначенияОбъекта = Тип("ДокументОбъект.ВыводИзОборотаИСМП")
		Или ТипЗначенияОбъекта = Тип("ДокументОбъект.МаркировкаТоваровИСМП")
		Или ТипЗначенияОбъекта = Тип("ДокументОбъект.ПеремаркировкаТоваровИСМП")
		Или ТипЗначенияОбъекта = Тип("ДокументОбъект.СписаниеКодовМаркировкиИСМП")
		Или ТипЗначенияОбъекта = Тип("ДокументОбъект.ПодключениеКегаКОборудованиюРозливаИСМП")
		Или ТипЗначенияОбъекта = Тип("ДокументОбъект.ЗаказНаЭмиссиюКодовМаркировкиСУЗ")
		Или ТипЗначенияОбъекта = Тип("ДокументОбъект.ВнесениеСведенийОСобранномУрожаеЗЕРНО")
		Или ТипЗначенияОбъекта = Тип("ДокументОбъект.ЗапросОстатковПартийЗЕРНО") 
		Или ТипЗначенияОбъекта = Тип("ДокументОбъект.ОформлениеСДИЗЗЕРНО") 
		Или ТипЗначенияОбъекта = Тип("ДокументОбъект.ПогашениеСДИЗЗЕРНО") 
		Или ТипЗначенияОбъекта = Тип("ДокументОбъект.СписаниеПартийЗЕРНО") 
		Или ТипЗначенияОбъекта = Тип("ДокументОбъект.ФормированиеПартийИзДругихПартийЗЕРНО") 
		Или ТипЗначенияОбъекта = Тип("ДокументОбъект.ФормированиеПартийПриПроизводствеЗЕРНО") Тогда
		
		ЗначенияФильтра_ДокументыГосИСБезСклада(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.МаркировкаТоваровГИСМ")
		Или ТипЗначенияОбъекта = Тип("ДокументОбъект.ПеремаркировкаТоваровГИСМ") Тогда
		
		ЗначенияФильтра_ДокументыГосИССоСкладом(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);  
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.АктИнвентаризацииСАТУРН")
		Или ТипЗначенияОбъекта = Тип("ДокументОбъект.АктПримененияСАТУРН")
		Или ТипЗначенияОбъекта = Тип("ДокументОбъект.ЗапросОстатковПартийСАТУРН")
		Или ТипЗначенияОбъекта = Тип("ДокументОбъект.ИмпортПродукцииСАТУРН")
		Или ТипЗначенияОбъекта = Тип("ДокументОбъект.ПроизводственнаяОперацияСАТУРН")
		Или ТипЗначенияОбъекта = Тип("ДокументОбъект.ПланПримененияСАТУРН") Тогда
		
		ЗначениеФильтра_ДокуменнтыГосИС_САТУРН(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию); 
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.НакладнаяСАТУРН") Тогда
		
		ЗначениеФильтра_ДокуменнтыГосИС_НакладнаяСАТУРН(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.АктПремииКлиенту")  Тогда
		
		ЗначениеФильтра_РетроБонусыКлиентовПоОрганизацииПодразделению(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.НачислениеРетроБонусовКлиента") 
		Или ТипЗначенияОбъекта = Тип("ДокументОбъект.СписаниеРетроБонусовКлиента") 
		Или ТипЗначенияОбъекта = Тип("ДокументОбъект.УсловияРетроБонусовКлиентов")
		Или ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.РетроБонусыКлиентовДоговорыСоглашения") 
		Или ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.РетроБонусыКлиентовУсловия") 
		Или ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.РетроБонусыКлиентов") Тогда
		
		ЗначениеФильтра_РетроБонусыКлиентовПоОрганизации(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.РетроБонусыКлиентовИНН")
		Или ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.РетроБонусыКлиентовКонтрагенты")
		Или ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.РетроБонусыКлиентовСегментыПартнеров")
		Или ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.РетроБонусыКлиентовСегментыТоваров")
		Или ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.РетроБонусыКлиентовТовары") Тогда
		
		ЗначенияФильтра_РетроБонусыКлиентовПоДокументуУсловий(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ВыручкаИСебестоимостьПродаж") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ВыручкаИСебестоимостьПродаж(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ДвиженияДенежныеСредстваДоходыРасходы") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ДвиженияДенежныеСредстваДоходыРасходы(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ДвиженияДенежныеСредстваКонтрагент") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ДвиженияДенежныеСредстваКонтрагент(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ДвиженияДенежныхСредств") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ДвиженияДенежныхСредств(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.Закупки") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_Закупки(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ДвиженияДоходыРасходыПрочиеАктивыПассивы") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ДвиженияДоходыРасходыПрочиеАктивыПассивы(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ДвиженияКонтрагентДоходыРасходы") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ДвиженияКонтрагентДоходыРасходы(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ДвиженияКонтрагентКонтрагент") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ДвиженияКонтрагентКонтрагент(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ДвиженияНоменклатураДоходыРасходы") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ДвиженияНоменклатураДоходыРасходы(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ДвиженияПоНДС") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ДвиженияПоНДС(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ДвиженияПоПрочимАктивамПассивам") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ДвиженияПоПрочимАктивамПассивам(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ДвиженияНоменклатураНоменклатура") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ДвиженияНоменклатураНоменклатура(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ДвиженияСерийТоваров") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ДвиженияСерийТоваров(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ДенежныеСредстваБезналичные") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ДенежныеСредстваБезналичные(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ДенежныеСредстваВКассахККМ") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ДенежныеСредстваВКассахККМ(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ДенежныеСредстваКВыплате") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ДенежныеСредстваКВыплате(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ДенежныеСредстваВПути") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ДенежныеСредстваВПути(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ДенежныеСредстваНаличные") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ДенежныеСредстваНаличные(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ДенежныеСредстваУПодотчетныхЛиц") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ДенежныеСредстваУПодотчетныхЛиц(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.РаспоряженияНаОтгрузку") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_Распоряжения(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ЗаказыНаВнутреннееПотребление") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_Заказы(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ЗаказыНаПеремещение") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ЗаказыНаПеремещение(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ЗаказыНаСборку") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ЗаказыНаСборку(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ЗаказыПоставщикам") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ЗаказыПоставщикам(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ЗапасыИПотребности") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ЗапасыИПотребности(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ЗаявкиНаВозвратТоваровОтКлиентов") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ЗаявкиНаВозвратТоваровОтКлиентов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ПрослеживаемыеТоварыОтгруженныеВЕАЭС") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ПрослеживаемыеТоварыОтгруженныеВЕАЭС(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.КорректировкиПлановыхПотребностей") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_КорректировкиПлановыхПотребностей(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ЛимитыРасходаДенежныхСредств") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ЛимитыРасходаДенежныхСредств(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ПланыОплатКлиентов") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ПланыОплатКлиентов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию)
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ПланыОплатПоставщикам") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ПланыОплатПоставщикам(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию)
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.НДСАвансыВыданные") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_НДСАвансыВыданные(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.НДСАвансыПолученные") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_НДСАвансыПолученные(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.НДСЗаписиКнигиПокупок") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_НДСЗаписиКнигиПокупок(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.НДСЗаписиКнигиПродаж") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_НДСЗаписиКнигиПродаж(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.НДСПредъявленный") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_НДСПредъявленный(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ПартииЗатратНаВыпуск") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ПартииЗатратНаВыпуск(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ПартииНДСКРаспределению") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ПартииНДСКРаспределению(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ПартииПроизводственныхЗатрат") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ПартииПроизводственныхЗатрат(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ПартииПрочихРасходов") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ПартииПрочихРасходов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ПартииРасходовНаСебестоимостьТоваров") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ПартииРасходовНаСебестоимостьТоваров(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ПартииТоваровОрганизаций") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ПартииТоваровОрганизаций(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ПартииТоваровПереданныеНаКомиссию") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ПартииТоваровПереданныеНаКомиссию(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ПереданнаяВозвратнаяТара") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ПереданнаяВозвратнаяТара(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ПланыВнутреннихПотреблений") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ПланыВнутреннихПотреблений(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ПланыЗакупок") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ПланыЗакупок(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ПланыОстатков") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ПланыОстатков(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ПланыПотребленияКомплектующих") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ПланыПотребленияКомплектующих(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ПланыПродаж") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ПланыПродаж(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ПланыПродажПоКатегориям") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ПланыПродажПоКатегориям(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ПланыСборкиРазборки") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ПланыСборкиРазборки(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ПринятаяВозвратнаяТара") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ПринятаяВозвратнаяТара(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.МатериалыИРаботыВПроизводстве") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_МатериалыИРаботыВПроизводстве(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ПрочаяВыручка") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ПрочаяВыручка(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ПрочиеАктивыПассивы") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ПрочиеАктивыПассивы(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ПрочиеДоходы") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ПрочиеДоходы(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ПрочиеРасходы") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ПрочиеРасходы(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ДетализацияПартийТоваровДляНДСиУСН") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ДетализацияПартийТоваровДляНДСиУСН(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.РасчетыПоФинансовымИнструментам") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_РасчетыПоФинансовымИнструментам(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.РасчетыПоЭквайрингу") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_РасчетыПоЭквайрингу(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.РасчетыСКлиентами") 
		Или ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.РасчетыСКлиентамиПоСрокам") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_РасчетыСКлиентами(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.РасчетыСКлиентамиПоДокументам") Тогда
	    ЗначенияФильтра_РегистрыНакопления_РасчетыСКлиентамиПоДокументам(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.РасчетыСПоставщиками") 
		Или ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.РасчетыСПоставщикамиПоСрокам") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_РасчетыСПоставщиками(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.РасчетыСПоставщикамиПоДокументам") Тогда
		ЗначенияФильтра_РегистрыНакопления_РасчетыСПоставщикамиПоДокументам(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);	
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.СебестоимостьТоваров") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_СебестоимостьТоваров(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ТоварыВЯчейках") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ТоварыВЯчейках(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ТоварыКОтбору") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ТоварыКОтбору(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ТоварыКОтгрузке") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ТоварыКОтгрузке(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ТоварыКОформлениюИзлишковНедостач") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ТоварыКОформлениюИзлишковНедостач(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ТоварыКОформлениюОтчетовКомитенту") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ТоварыКОформлениюОтчетовКомитенту(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.УслугиКОформлениюОтчетовПринципалу") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_УслугиКОформлениюОтчетовПринципалу(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ТоварыКПоступлению") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ТоварыКПоступлению(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ТоварныеМестаКОтражениюИзлишковНедостач") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ТоварныеМестаКОтражениюИзлишковНедостач(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ТоварыНаСкладах") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ТоварыНаСкладах(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ТоварыОрганизаций") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ТоварыОрганизаций(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ТоварыКОформлениюДокументовИмпорта") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ТоварыОрганизацийКОформлению(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ТоварыОрганизацийКПередаче") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ТоварыОрганизацийКПередаче(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ТоварыПереданныеНаКомиссию") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ТоварыПереданныеНаКомиссию(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ТоварыУслугиКОформлениюОтчетовКомитентуОЗакупках") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ТоварыУслугиКОформлениюОтчетовКомитентуОЗакупках(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ФинансовыеРезультаты") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ФинансовыеРезультаты(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.АктивацияПодарочныхСертификатов") Тогда
		
		ЗначенияФильтра_РегистрыСведений_АктивацияПодарочныхСертификатов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.Ассортимент") Тогда
		
		ЗначенияФильтра_РегистрыСведений_Ассортимент(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
 	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.БлокировкиСкладскихЯчеек") Тогда
		
		ЗначенияФильтра_РегистрыСведений_БлокировкиСкладскихЯчеек(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию); 
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.ВалютыИКурсыДокументов") Тогда
		
		ЗначенияФильтра_РегистрыСведений_ВалютыИКурсыДокументов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.ГрафикНачисленийКредитовИДепозитов") Тогда
		
		ЗначенияФильтра_РегистрыСведений_ГрафикНачисленийКредитовИДепозитов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.ГрафикОплатКредитовИДепозитов") Тогда
		
		ЗначенияФильтра_РегистрыСведений_ГрафикОплатКредитовИДепозитов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.ГрафикТраншейКредитовИДепозитов") Тогда
		
		ЗначенияФильтра_РегистрыСведений_ГрафикТраншейКредитовИДепозитов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.ДатыПередачиТоваровНаКомиссию") Тогда
		
		ЗначенияФильтра_РегистрыСведений_ДатыПередачиТоваровНаКомиссию(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.ДатыПоступленияТоваровОрганизаций") Тогда
		
		ЗначенияФильтра_РегистрыСведений_ДатыПоступленияТоваровОрганизаций(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.ДействиеСкидокНаценок") Тогда
		
		ЗначенияФильтра_РегистрыСведений_ДействиеСкидокНаценок(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.ИнформативныеЦеныНоменклатуры") Тогда
		
		ЗначенияФильтра_РегистрыСведений_ИнформативныеЦеныНоменклатуры(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.ДетализацияСебестоимостиТоваров") Тогда
		
		ЗначенияФильтра_РегистрыСведений_ДетализацияСебестоимостиТоваров(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.ДетализацияСебестоимостиПартииТоваров") Тогда
		
		ЗначенияФильтра_РегистрыСведений_ДетализацияСебестоимостиПартииТоваров(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.ДетализацияСебестоимостиПартииТоваровПостатейныеЗатраты") Тогда
		
		ЗначенияФильтра_РегистрыСведений_ДетализацияСебестоимостиПартииТоваровПостатейныеЗатраты(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.ДетализацияСебестоимостиТоваровПостатейныеЗатраты") Тогда
		
		ЗначенияФильтра_РегистрыСведений_ДетализацияСебестоимостиТоваровПостатейныеЗатраты(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.ДетализацияСебестоимостиТоваровПостатейныеЗатратыНЗП") Тогда
		
		ЗначенияФильтра_РегистрыСведений_ДетализацияСебестоимостиТоваровПостатейныеЗатратыНЗП(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.ВспомогательнаяИнформацияВзаиморасчетов") Тогда
		
		ЗначенияФильтра_РегистрыСведений_ВспомогательнаяИнформацияВзаиморасчетов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.ГрафикПлатежей") Тогда
		
		ЗначенияФильтра_РегистрыСведений_ГрафикПлатежей(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.ДанныеПервичныхДокументов") Тогда
		
		ЗначенияФильтра_РегистрыСведений_ДанныеПервичныхДокументов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.ДокументыПоВыпущеннойПродукции") Тогда
		
		ЗначенияФильтра_РегистрыСведений_ДокументыПоВыпущеннойПродукции(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.ЖурналУчетаСчетовФактур") Тогда
		
		ЗначенияФильтра_РегистрыСведений_ЖурналУчетаСчетовФактур(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.ИсточникиПервичногоИнтереса") Тогда
		
		ЗначенияФильтра_РегистрыСведений_ИсточникиПервичногоИнтереса(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.КонтактыВзаимодействий") Тогда
		
		ЗначенияФильтра_РегистрыСведений_КонтактыВзаимодействий(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.КвотыАссортимента") Тогда
		
		ЗначенияФильтра_РегистрыСведений_КвотыАссортимента(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.КодыТоваровПодключаемогоОборудованияOffline") Тогда
		
		ЗначенияФильтра_РегистрыСведений_КодыТоваровПодключаемогоОборудованияOffline(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию); 
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.ИсправленияДокументов") Тогда
		
		ЗначенияФильтра_РегистрыСведений_ИсправленияДокументов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.НастройкаКонтроляОбеспечения") Тогда
		
		ЗначенияФильтра_РегистрыСведений_НастройкаКонтроляОбеспечения(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.КрупнейшийНалогоплательщикИсторияРегистрацийВНалоговомОргане") Тогда
		
		ЗначенияФильтра_РегистрыСведений_КрупнейшийНалогоплательщикИсторияРегистрацийВНалоговомОргане(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.НастройкаПередачиТоваровМеждуОрганизациями") Тогда
		
		ЗначенияФильтра_РегистрыСведений_НастройкаПередачиТоваровМеждуОрганизациями(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.НастройкаРаспределенияПоНаправлениямДеятельности") Тогда
		
		ЗначенияФильтра_РегистрыСведений_НастройкаРаспределенияПоНаправлениямДеятельности(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.НастройкиАдресныхСкладов") Тогда
		
		ЗначенияФильтра_РегистрыСведений_НастройкиАдресныхСкладов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию); 
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.НастройкаБлокировкиОтИзменений") Тогда
		
		ЗначенияФильтра_РегистрыСведений_НастройкаБлокировкиОтИзменений(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.НастройкиСистемыНалогообложения") Тогда
		
		ЗначенияФильтра_РегистрыСведений_НастройкиСистемыНалогообложения(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.НастройкиУчетаНДС") 
		Или ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.НастройкиУчетаНДСПриУСН") Тогда
		
		ЗначенияФильтра_РегистрыСведений_НастройкиУчетаНДС(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.НастройкиУчетаУСН") Тогда
		
		ЗначенияФильтра_РегистрыСведений_НастройкиУчетаУСН(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.ОчередьЗаказовККорректировкеСтрокМерныхТоваров") Тогда
		
		ЗначенияФильтра_РегистрыСведений_ОчередьЗаказовККорректировкеСтрокМерныхТоваров(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.ОчередьПереоформленияРасходныхОрдеров") Тогда
		
		ЗначенияФильтра_РегистрыСведений_ОчередьПереоформленияРасходныхОрдеров(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.ОшибочныеРеквизитыКонтрагентов") Тогда
		
		ЗначенияФильтра_РегистрыСведений_ОшибочныеРеквизитыКонтрагентов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.СчетаФактурыПоставщиковКПеревыставлениюКомитентам") Тогда
		
		ЗначенияФильтра_РегистрыСведений_СчетаФактурыПоставщиковКПеревыставлениюКомитентам(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.УчетнаяПолитикаФинансовогоУчета") Тогда
		
		ЗначенияФильтра_РегистрыСведений_УчетнаяПолитикаФинансовогоУчета(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.НДССостояниеРеализации0") Тогда
		
		ЗначенияФильтра_РегистрыСведений_НДССостояниеРеализации0(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.ВариантыОбеспеченияРаботами") Тогда
		
		ЗначенияФильтра_РегистрыСведений_ВариантыОбеспеченияРаботами(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.ПоследнийОбменСБанками") Тогда
		
		ЗначенияФильтра_РегистрыСведений_ПоследнийОбменСБанками(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.ВариантыОбеспеченияТоварами") Тогда
		
		ЗначенияФильтра_РегистрыСведений_ВариантыОбеспеченияТоварами(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.ПравилаРазмещенияТоваровВЯчейках") Тогда
		
		ЗначенияФильтра_РегистрыСведений_ПравилаРазмещенияТоваровВЯчейках(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.ИсторияИзмененияФорматовМагазинов") Тогда
		
		ЗначенияФильтра_РегистрыСведений_ИсторияИзмененияФорматовМагазинов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию); 
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.КурсыВалютРасчетовПоДоговорам") Тогда
		
		ЗначенияФильтра_РегистрыСведений_КурсыВалютРасчетовПоДоговорам(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.ПримененияЕНВД") Тогда
		
		ЗначенияФильтра_РегистрыСведений_ПримененияЕНВД(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.ПрогнозыРасходаУпаковок") Тогда
		
		ЗначенияФильтра_РегистрыСведений_ПрогнозыРасходаУпаковок(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.РазмещениеНоменклатурыПоСкладскимЯчейкам") Тогда
		
		ЗначенияФильтра_РегистрыСведений_РазмещениеНоменклатурыПоСкладскимЯчейкам(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.РаспределениеЗапасов") Тогда
		
		ЗначенияФильтра_РегистрыСведений_РаспределениеЗапасов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.СостоянияВнутреннихЗаказов") Тогда
		
		ЗначенияФильтра_РегистрыСведений_СостоянияВнутреннихЗаказов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.СостоянияЗаказовКлиентов") Тогда
		
		ЗначенияФильтра_РегистрыСведений_СостоянияЗаказовКлиентов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.СостоянияЗаказовПоставщикам") Тогда
		
		ЗначенияФильтра_РегистрыСведений_СостоянияЗаказовПоставщикам(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.РегистрацииВНалоговомОргане") Тогда
		
		ЗначенияФильтра_РегистрыСведений_РегистрацииВНалоговомОргане(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.СостоянияИРеквизитыДоставки") Тогда
		
		ЗначенияФильтра_РегистрыСведений_СостоянияИРеквизитыДоставки(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.РегламентныеЗаданияЗакрытияМесяца") Тогда
		
		ЗначенияФильтра_РегистрыСведений_РегламентныеЗаданияЗакрытияМесяца(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.СостоянияПересчетовЯчеек") Тогда
		
		ЗначенияФильтра_РегистрыСведений_СостоянияПересчетовЯчеек(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.ПроцентныеСтавкиФинансовыхИнструментов") Тогда
		
		ЗначенияФильтра_РегистрыСведений_ПроцентныеСтавкиФинансовыхИнструментов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.СтавкиДисконтирования") Тогда
		
		ЗначенияФильтра_РегистрыСведений_СтавкиДисконтирования(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.СтатистикаСделокСКлиентами") Тогда
		
		ЗначенияФильтра_РегистрыСведений_СтатистикаСделокСКлиентами(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.СчетаФактурыКомиссионерамКОформлению") Тогда
		
		ЗначенияФильтра_РегистрыСведений_СчетаФактурыКомиссионерамКОформлению(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.СчетаФактурыКомитентовКРегистрации") Тогда
		
		ЗначенияФильтра_РегистрыСведений_СчетаФактурыКомитентовКРегистрации(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.ТребуетсяОформлениеСчетаФактуры") Тогда
		
		ЗначенияФильтра_РегистрыСведений_ТребуетсяОформлениеСчетаФактуры(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.СтоимостьТоваров") Тогда
		
		ЗначенияФильтра_РегистрыСведений_СтоимостьТоваров(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.ТоварныеОграничения") Тогда
		
		ЗначенияФильтра_РегистрыСведений_ТоварныеОграничения(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.ТоварыКДоставке") Тогда
		
		ЗначенияФильтра_РегистрыСведений_ТоварыКДоставке(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.ЦеныНоменклатуры") Тогда
		
		ЗначенияФильтра_РегистрыСведений_ЦеныНоменклатуры(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.ЦеныНоменклатуры25") Тогда
		
		ЗначенияФильтра_РегистрыСведений_ЦеныНоменклатуры(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.ЦеныНоменклатурыПоставщиков") Тогда
		
		ЗначенияФильтра_РегистрыСведений_ЦеныНоменклатурыПоставщиков(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.ШтрихкодыНоменклатуры") Тогда
		
		ЗначенияФильтра_РегистрыСведений_ШтрихкодыНоменклатуры(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.ГруппыЗаявокПлатежногоКалендаря") Тогда
		
		ЗначенияФильтра_РегистрыСведений_ГруппыЗаявокПлатежногоКалендаря(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.ПорядокПлатежногоКалендаря") Тогда
		
		ЗначенияФильтра_РегистрыСведений_ПорядокПлатежногоКалендаря(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.СхемыОбеспечения") Тогда
		
		ЗначенияФильтра_РегистрыСведений_СхемыОбеспечения(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.СостоянияКоммерческихПредложенийКлиентам") Тогда
		ЗначенияФильтра_РегистрыСведений_СостоянияКоммерческихПредложенийКлиентам(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникОбъект.ГосударственныеКонтракты") Тогда
		
		ЗначенияФильтра_Справочники_ГосударственныеКонтракты(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникОбъект.Претензии") Тогда
		
		ЗначенияФильтра_Справочники_ПретензииКлиентов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникОбъект.Проекты") Тогда
		
		ЗначенияФильтра_Справочники_Проекты(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникОбъект.СделкиСКлиентами") Тогда
		
		ЗначенияФильтра_Справочники_СделкиСКлиентами(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникОбъект.ДоговорыКредитовИДепозитов") Тогда
		
		ЗначенияФильтра_Справочники_ДоговорыКредитовИДепозитов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникОбъект.ДоговорыКонтрагентов") Тогда
		
		ЗначенияФильтра_Справочники_ДоговорыКонтрагентов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникОбъект.ДоговорыЭквайринга") Тогда
		
		ЗначенияФильтра_Справочники_ДоговорыЭквайринга(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникОбъект.ДоговорыМеждуОрганизациями") Тогда
		
		ЗначенияФильтра_Справочники_ДоговорыМеждуОрганизациями(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникОбъект.СоглашенияСПоставщиками") Тогда
		
		ЗначенияФильтра_Справочники_СоглашенияСПоставщиками(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникОбъект.СоглашенияСКлиентами") Тогда
		
		ЗначенияФильтра_Справочники_СоглашенияСКлиентами(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникОбъект.ВариантыГрафиковКредитовИДепозитов") Тогда
		
		ЗначенияФильтра_Справочники_ВариантыГрафиковКредитовИДепозитов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникОбъект.ВидыЦен") Тогда
		
		ЗначенияФильтра_Справочники_ВидыЦен(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникОбъект.Патенты") Тогда
		
		ЗначенияФильтра_Справочники_Патенты(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникОбъект.Пользователи") Тогда
		
		ЗначенияФильтра_Справочники_Пользователи(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
	
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникОбъект.УсловияОбслуживанияПартнеровТорговымиПредставителями") Тогда
		
		ЗначенияФильтра_Справочники_УсловияОбслуживанияПартнеровТорговымиПредставителями(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникОбъект.ОбластиХранения") Тогда
		
		ЗначенияФильтра_Справочники_ОбластиХранения(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникОбъект.ПодключаемоеОборудование") Тогда
		
		ЗначенияФильтра_Справочники_ПодключаемоеОборудование(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникОбъект.ДрайверыОборудования") Тогда
		
		ЗначенияФильтра_Справочники_ДрайверыОборудования(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникОбъект.РабочиеУчастки") Тогда
		
		ЗначенияФильтра_Справочники_РабочиеУчастки(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникОбъект.СкладскиеПомещения") Тогда
		
		ЗначенияФильтра_Справочники_СкладскиеПомещения(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникОбъект.СкладскиеЯчейки") Тогда
		
		ЗначенияФильтра_Справочники_СкладскиеЯчейки(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникОбъект.СпособыОбеспеченияПотребностей") Тогда
		
		ЗначенияФильтра_Справочники_СпособыОбеспеченияПотребностей(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникОбъект.БанковскиеСчетаОрганизаций") Тогда
		
		ЗначенияФильтра_Справочники_БанковскиеСчетаОрганизаций(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникОбъект.Кассы") Тогда
		
		ЗначенияФильтра_Справочники_Кассы(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникОбъект.КассыККМ") Тогда
		
		ЗначенияФильтра_Справочники_КассыККМ(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникОбъект.Организации") Тогда
		
		ЗначенияФильтра_Справочники_Организации(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникОбъект.ОтветственныеЛицаОрганизаций") Тогда
		
		ЗначенияФильтра_Справочники_ОтветственныеЛицаОрганизаций(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникОбъект.РегистрацииВНалоговомОргане") Тогда
		
		ЗначенияФильтра_Справочники_РегистрацииВНалоговомОргане(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникОбъект.СтруктураПредприятия") Тогда
		
		ЗначенияФильтра_Справочники_СтруктураПредприятия(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникОбъект.ЭквайринговыеТерминалы") Тогда
		
		ЗначенияФильтра_Справочники_ЭквайринговыеТерминалы(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникОбъект.ОбъектыРасчетов") Тогда
		
		ЗначенияФильтра_Справочники_ОбъектыРасчетов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	КонецЕсли;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

//Очищает пустые значения в массиве объектов
//
Процедура ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов) Экспорт
	
	МаксимальныйИндекс = МассивОбъектов.ВГраница();
	
	Если МаксимальныйИндекс > 0 Тогда
		
		Пока МаксимальныйИндекс >= 0 Цикл
			
			ЭлементМассива = МассивОбъектов[МаксимальныйИндекс];
			
			Если Не ЗначениеЗаполнено(ЭлементМассива) Тогда
				МассивОбъектов.Удалить(МаксимальныйИндекс);
			КонецЕсли; 
			
			МаксимальныйИндекс = МаксимальныйИндекс - 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Информирует пользователя о запрете создания или изменения объекта в этой 
// информационной базе
Процедура КонтрольСозданияДокументовВРаспределеннойИБ(Объект, Отказ) Экспорт
	
	Если ОбменДаннымиПовтИспУТУП.ЭтоПодчиненныйУзелРИБСОтбором() Тогда
		
		Отказ = Истина;
		
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Документ запрещено создавать в подчиненном узле распределенной информационной базы'");
		Сообщение.УстановитьДанные(Объект);
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает признак того, что объект не проходит установленный фильтр
//
// Возращаемое значение:
//  Булево - Отказ от действий с объектом
//
Функция ОбъектНеПроходитФильтр(ЭлементДанных,
	                           УзелПланаОбмена = Неопределено,
	                           ЗагрузкаОбъекта = Ложь,
	                           СообщениеПользователю = "") Экспорт
	
	Отказ = Ложь;
	
	Если Не ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	ТипЗначенияОбъекта = ТипЗнч(ЭлементДанных);
	ПараметрыЗапроса   = ОпределитьПараметрыЗапросаОбъекта(ЭлементДанных, ТипЗначенияОбъекта, Ложь);
	
	Если ПараметрыЗапроса.Отказ Тогда
		СообщениеПользователю = ПараметрыЗапроса.СообщениеПользователю;
		Возврат Истина;
	Иначе
		Отказ = Не ДанныеОбъектаСоответсвуютНастройкамУзла(ПараметрыЗапроса, ЗагрузкаОбъекта, УзелПланаОбмена);
	КонецЕсли;
	
	Если Отказ Тогда
		СообщениеПользователю = ПараметрыЗапроса.СообщениеПользователю;
	Иначе
		Если ТипЗначенияОбъекта = Тип("ДокументОбъект.ПоступлениеБезналичныхДенежныхСредств") Тогда
		
			Если ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента
				Или ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика Тогда
				
				Отказ = ОбъектРасчетовВТабличнойЧастиНеСоответствуетФильтру(
					ЭлементДанных, УзелПланаОбмена, СообщениеПользователю, "РасшифровкаПлатежа", "ОбъектРасчетов");
				
			ИначеЕсли ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеДоходы Тогда
				
				Отказ = ПодразделенияВТабличнойЧастиНеСоответствуетФильтру(
					ЭлементДанных, УзелПланаОбмена, СообщениеПользователю);
				
			ИначеЕсли ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоКредитам
				Или ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоЗаймамВыданным
				Или ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоДепозитам Тогда
				//Проверка договора кредитов и депозитов
				
				Отказ = ДоговорКредитаИДепозитаВТабличнойЧастиНеСоответствуетФильтру(
					ЭлементДанных, УзелПланаОбмена, СообщениеПользователю, "РасшифровкаПлатежа", "ДоговорКредитаДепозита");
				
			КонецЕсли;
			
		ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ПриходныйКассовыйОрдер") Тогда
		
			Если ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента
				Или ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика Тогда
				
				Отказ = ОбъектРасчетовВТабличнойЧастиНеСоответствуетФильтру(
					ЭлементДанных, УзелПланаОбмена, СообщениеПользователю, "РасшифровкаПлатежа", "ОбъектРасчетов");
				
			ИначеЕсли ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка Тогда
				//По счету банка
				Отказ = БанковскийСчетНеСоответствуетФильтру(
					ЭлементДанных, УзелПланаОбмена, Ложь, СообщениеПользователю);
				
			ИначеЕсли ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеДоходы Тогда
				
				Отказ = ПодразделенияВТабличнойЧастиНеСоответствуетФильтру(
					ЭлементДанных, УзелПланаОбмена, СообщениеПользователю);
				
			ИначеЕсли ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоКредитам
				Или ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоЗаймамВыданным Тогда
				
				Отказ = ДоговорКредитаИДепозитаВТабличнойЧастиНеСоответствуетФильтру(
					ЭлементДанных, УзелПланаОбмена, СообщениеПользователю, "РасшифровкаПлатежа", "ДоговорКредитаДепозита");
				
			КонецЕсли;
			
		ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.РасходныйКассовыйОрдер") Тогда
		
			Если ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику
				Или ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
				
				Отказ = ОбъектРасчетовВТабличнойЧастиНеСоответствуетФильтру(
					ЭлементДанных, УзелПланаОбмена, СообщениеПользователю, "РасшифровкаПлатежа", "ОбъектРасчетов");
				
			ИначеЕсли ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику Тогда
				
				Отказ = ПодразделениеВШапкеНеСоответствуетФильтру(
					ЭлементДанных, УзелПланаОбмена, СообщениеПользователю);
				
			ИначеЕсли ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию
				Или ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию
				Или ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
				
				Отказ = КассыПолучателяНеСоответствуютФильтру(
					ЭлементДанных, УзелПланаОбмена, СообщениеПользователю);
				
			ИначеЕсли ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеРасходы Тогда
				
				Отказ = ПодразделенияВТабличнойЧастиНеСоответствуетФильтру(
					ЭлементДанных, УзелПланаОбмена, СообщениеПользователю);
				
			ИначеЕсли ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоКредитам
				Или ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймов Тогда
				
				Отказ = ДоговорКредитаИДепозитаВТабличнойЧастиНеСоответствуетФильтру(
					ЭлементДанных, УзелПланаОбмена, СообщениеПользователю, "РасшифровкаПлатежа", "ДоговорКредитаДепозита");
				
			ИначеЕсли ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк Тогда
				
				Отказ = БанковскийСчетНеСоответствуетФильтру(
					ЭлементДанных, УзелПланаОбмена, Ложь, СообщениеПользователю);
				
			КонецЕсли;
			
		ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.СписаниеБезналичныхДенежныхСредств") Тогда
		
			Если ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику 
				Или ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту
				Или ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеТаможне Тогда
				//Проверка объекта расчетов
				
				Отказ = ОбъектРасчетовВТабличнойЧастиНеСоответствуетФильтру(
					ЭлементДанных, УзелПланаОбмена, СообщениеПользователю, "РасшифровкаПлатежа", "ОбъектРасчетов");
				
			ИначеЕсли ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоКредитам
				Или ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты
				Или ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймов Тогда
				//Проверка договора кредитов и депозитов
				
				Отказ = ДоговорКредитаИДепозитаВТабличнойЧастиНеСоответствуетФильтру(
					ЭлементДанных, УзелПланаОбмена, СообщениеПользователю, "РасшифровкаПлатежа", "ДоговорКредитаДепозита");
				
			ИначеЕсли ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию
				Или ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию
				Или ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
				//Проверка банковского счета получателя
				
				Отказ = БанковскийСчетНеСоответствуетФильтру(
					ЭлементДанных, УзелПланаОбмена, Истина, СообщениеПользователю);
				
			ИначеЕсли ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета
				Или ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту Тогда
				//Проверка подразделения в шапке
				
				Отказ = ПодразделениеВШапкеНеСоответствуетФильтру(
					ЭлементДанных, УзелПланаОбмена, СообщениеПользователю);
				
			ИначеЕсли ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеРасходы Тогда
				//Проверка подразделения в таб. части
				
				Отказ = ПодразделенияВТабличнойЧастиНеСоответствуетФильтру(
					ЭлементДанных, УзелПланаОбмена, СообщениеПользователю);
				
				КонецЕсли;
				
		ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ВводОстатков") Тогда
			
			Если ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковЗадолженностиКлиентов
				ИЛИ ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковЗадолженностиПоставщикам
				ИЛИ ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковАвансовКлиентов
				ИЛИ ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковАвансовПоставщикам Тогда
				//Проверка объекта расчетов
				
				Отказ = ОбъектРасчетовВТабличнойЧастиНеСоответствуетФильтру(
					ЭлементДанных, УзелПланаОбмена, СообщениеПользователю, "РасчетыСПартнерами", "ОбъектРасчетов");
					
					
			ИначеЕсли ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковПоДоговорамКредитовИДепозитов Тогда
				
				Отказ = ДоговорКредитаИДепозитаВТабличнойЧастиНеСоответствуетФильтру(
					ЭлементДанных, УзелПланаОбмена, СообщениеПользователю, "РасчетыПоФинансовымИнструментам", "Договор");
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

// Возвращает иерархию элементов структуры предприятия
// 
// Возращаемое значение:
//  Массив - Список родителей элемента справочника СтруктураПредприятия
//
Функция СформироватьИерархиюЭлементов(СсылкаНаОбъект, ФормироватьИерархию) Экспорт
	
	ИерархияОбъектов = Новый Массив;
	
	Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		
		Если ФормироватьИерархию Тогда
			
			ИерархияОбъектов.Добавить(СсылкаНаОбъект);
			ТекущийРодитель = СсылкаНаОбъект.Родитель;
			
			Пока ТекущийРодитель <> Справочники[СсылкаНаОбъект.Метаданные().Имя].ПустаяСсылка() Цикл
				ИерархияОбъектов.Добавить(ТекущийРодитель);
				ТекущийРодитель = ТекущийРодитель.Родитель;
			КонецЦикла;
			
		Иначе
			ИерархияОбъектов.Добавить(СсылкаНаОбъект);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИерархияОбъектов;
	
КонецФункции

// Возвращает массив с организациями для использования в запросе ПРО
//
// Возращаемое значение:
//  Массив - Список организаций
//
Функция СформироватьМассивОрганизаций(ЗначениеМассива) Экспорт
	
	Если ТипЗнч(ЗначениеМассива) = Тип("Массив") Тогда 
		МассивОрганизаций = ЗначениеМассива;
	Иначе
		МассивОрганизаций = Новый Массив;
		МассивОрганизаций.Добавить(ЗначениеМассива);
	КонецЕсли;
	
	Возврат МассивОрганизаций;
	
КонецФункции

// Возвращает текст запроса ПРО для использования его в обработчиках правил регистрации
//
// Возращаемое значение:
//  Строка - Текст запроса ПРО
//
Функция СформироватьТекстЗапросаПравилРегистрации() Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПланОбменаОсновнаяТаблица.Ссылка КАК Ссылка
		|ИЗ
		|	ПланОбмена.СОтборами КАК ПланОбменаОсновнаяТаблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланОбмена.СОтборами.Подразделения КАК ПланОбменаТаблицаПодразделения
		|		ПО ПланОбменаОсновнаяТаблица.Ссылка = ПланОбменаТаблицаПодразделения.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланОбмена.СОтборами.Организации КАК ПланОбменаТаблицаОрганизации
		|		ПО ПланОбменаОсновнаяТаблица.Ссылка = ПланОбменаТаблицаОрганизации.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланОбмена.СОтборами.ВидыЦен КАК ПланОбменаТаблицаВидыЦен
		|		ПО ПланОбменаОсновнаяТаблица.Ссылка = ПланОбменаТаблицаВидыЦен.Ссылка
		|ГДЕ
		|	НЕ ПланОбменаОсновнаяТаблица.Ссылка = &СОтборамиЭтотУзел
		|	И НЕ ПланОбменаОсновнаяТаблица.ПометкаУдаления
		|	И (НЕ &СвойствоОбъекта_ФильтрПоОрганизации
		|			ИЛИ (ПланОбменаТаблицаОрганизации.Организация В (&СвойствоОбъекта_Организации)
		|				ИЛИ НЕ ПланОбменаОсновнаяТаблица.ИспользоватьОтборПоОрганизациям))
		|	И (НЕ &СвойствоОбъекта_ФильтрПоПодразделению
		|			ИЛИ ПланОбменаТаблицаПодразделения.Подразделение В (&СвойствоОбъекта_Подразделения))
		|	И (НЕ &СвойствоОбъекта_ФильтрПоВидуЦен
		|			ИЛИ (ПланОбменаТаблицаВидыЦен.ВидЦены В (&СвойствоОбъекта_ВидыЦен)
		|				ИЛИ НЕ ПланОбменаОсновнаяТаблица.ИспользоватьОтборПоВидамЦен))";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция УзлыПлановОбменаСДатойНачалаВыгрузкиРаньшеЧемДатаСвертки(ДатаСвертки) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	БП2.Ссылка,
		|	БП2.ДатаНачалаВыгрузкиДокументов,
		|	БП2.ПометкаУдаления
		|ИЗ
		|	ПланОбмена.ОбменУправлениеТорговлейБухгалтерияПредприятия КАК БП2
		|ГДЕ
		|	БП2.Ссылка <> &ЭтотУзелБП2
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	БП3.Ссылка,
		|	БП3.ДатаНачалаВыгрузкиДокументов,
		|	БП3.ПометкаУдаления
		|ИЗ
		|	ПланОбмена.ОбменУправлениеТорговлейБухгалтерияПредприятия30 КАК БП3
		|ГДЕ
		|	БП3.Ссылка <> &ЭтотУзелБП3
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	БП2КОРП.Ссылка,
		|	БП2КОРП.ДатаНачалаВыгрузкиДокументов,
		|	БП2КОРП.ПометкаУдаления
		|ИЗ
		|	ПланОбмена.ОбменУправлениеТорговлейБухгалтерияПредприятияКОРП КАК БП2КОРП
		|ГДЕ
		|	БП2КОРП.Ссылка <> &ЭтотУзелБП2КОРП
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РТ2.Ссылка,
		|	РТ2.ДатаНачалаВыгрузкиДокументов,
		|	РТ2.ПометкаУдаления
		|ИЗ
		|	ПланОбмена.ОбменУправлениеТорговлейРозница КАК РТ2
		|ГДЕ
		|	РТ2.Ссылка <> &ЭтотУзелРТ2
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	УФ.Ссылка,
		|	УФ.ДатаНачалаВыгрузкиДокументов,
		|	УФ.ПометкаУдаления
		|ИЗ
		|	ПланОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат КАК УФ
		|ГДЕ
		|	УФ.Ссылка <> &ЭтотУзелУФ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УзлыОбмена.Ссылка КАК Ссылка
		|ИЗ
		|	УзлыОбмена КАК УзлыОбмена
		|ГДЕ
		|	УзлыОбмена.ДатаНачалаВыгрузкиДокументов <= &ДатаСвертки");

	Запрос.УстановитьПараметр("ДатаСвертки",     ДатаСвертки);
	Запрос.УстановитьПараметр("ЭтотУзелБП2",     ПланыОбмена.ОбменУправлениеТорговлейБухгалтерияПредприятия.ЭтотУзел());
	Запрос.УстановитьПараметр("ЭтотУзелБП3",     ПланыОбмена.ОбменУправлениеТорговлейБухгалтерияПредприятия30.ЭтотУзел());
	Запрос.УстановитьПараметр("ЭтотУзелБП2КОРП", ПланыОбмена.ОбменУправлениеТорговлейБухгалтерияПредприятияКОРП.ЭтотУзел());
	Запрос.УстановитьПараметр("ЭтотУзелРТ2",     ПланыОбмена.ОбменУправлениеТорговлейРозница.ЭтотУзел());
	Запрос.УстановитьПараметр("ЭтотУзелУФ",      ПланыОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.ЭтотУзел());
	
	ВыборкаУзлов = Запрос.Выполнить().Выбрать();
	
	Возврат ВыборкаУзлов;
	
КонецФункции

// Возвращает сокращенное строковое представление коллекции значений
// 
// Параметры:
//  Коллекция 						- массив или список значений.
//  МаксимальноеКоличествоЭлементов - число, максимальное количество элементов включаемое в представление.
//
// Возвращаемое значение:
//  Строка.
//
Функция СокращенноеПредставлениеКоллекцииЗначений(Коллекция, МаксимальноеКоличествоЭлементов = 2) Экспорт
	
	СтрокаПредставления = "";
	
	КоличествоЗначений			 = Коллекция.Количество();
	КоличествоВыводимыхЭлементов = Мин(КоличествоЗначений, МаксимальноеКоличествоЭлементов);
	
	Если КоличествоВыводимыхЭлементов = 0 Тогда
		
		Возврат "";
		
	Иначе
		
		Для НомерЗначения = 1 По КоличествоВыводимыхЭлементов Цикл
			
			СтрокаПредставления = СтрокаПредставления + Коллекция.Получить(НомерЗначения - 1) + ", ";	
			
		КонецЦикла;
		
		СтрокаПредставления = Лев(СтрокаПредставления, СтрДлина(СтрокаПредставления) - 2);
		Если КоличествоЗначений > КоличествоВыводимыхЭлементов Тогда
			СтрокаПредставления = СтрокаПредставления + ", ... ";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрокаПредставления;
	
КонецФункции

Функция ЗапросУзлыОбменаСБухгалтерией() Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	ОбменУправлениеТорговлейБухгалтерияПредприятия.Ссылка
		|ИЗ
		|	ПланОбмена.ОбменУправлениеТорговлейБухгалтерияПредприятия КАК ОбменУправлениеТорговлейБухгалтерияПредприятия
		|ГДЕ
		|	ОбменУправлениеТорговлейБухгалтерияПредприятия.ПометкаУдаления = ЛОЖЬ
		|	И НЕ ОбменУправлениеТорговлейБухгалтерияПредприятия.ЭтотУзел
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОбменУправлениеТорговлейБухгалтерияПредприятия30.Ссылка
		|ИЗ
		|	ПланОбмена.ОбменУправлениеТорговлейБухгалтерияПредприятия30 КАК ОбменУправлениеТорговлейБухгалтерияПредприятия30
		|ГДЕ
		|	ОбменУправлениеТорговлейБухгалтерияПредприятия30.ПометкаУдаления = ЛОЖЬ
		|	И НЕ ОбменУправлениеТорговлейБухгалтерияПредприятия30.ЭтотУзел
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОбменУправлениеТорговлейБухгалтерияПредприятияКОРП30.Ссылка
		|ИЗ
		|	ПланОбмена.ОбменУправлениеТорговлейБухгалтерияПредприятияКОРП30 КАК ОбменУправлениеТорговлейБухгалтерияПредприятияКОРП30
		|ГДЕ
		|	ОбменУправлениеТорговлейБухгалтерияПредприятияКОРП30.ПометкаУдаления = ЛОЖЬ
		|	И НЕ ОбменУправлениеТорговлейБухгалтерияПредприятияКОРП30.ЭтотУзел
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОбменУправлениеТорговлейБухгалтерияПредприятияКОРП.Ссылка
		|ИЗ
		|	ПланОбмена.ОбменУправлениеТорговлейБухгалтерияПредприятияКОРП КАК ОбменУправлениеТорговлейБухгалтерияПредприятияКОРП
		|ГДЕ
		|	ОбменУправлениеТорговлейБухгалтерияПредприятияКОРП.ПометкаУдаления = ЛОЖЬ
		|	И НЕ ОбменУправлениеТорговлейБухгалтерияПредприятияКОРП.ЭтотУзел
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СинхронизацияДанныхЧерезУниверсальныйФормат.Ссылка
		|ИЗ
		|	ПланОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат КАК СинхронизацияДанныхЧерезУниверсальныйФормат
		|ГДЕ
		|	СинхронизацияДанныхЧерезУниверсальныйФормат.ПометкаУдаления = ЛОЖЬ
		|	И НЕ СинхронизацияДанныхЧерезУниверсальныйФормат.ЭтотУзел
		|	И СинхронизацияДанныхЧерезУниверсальныйФормат.ВариантНастройки В (&МассивВариантов)");

	МассивВариантов = Новый Массив();
	МассивВариантов.Добавить("ОбменБП30");
	МассивВариантов.Добавить("ОбменБПКОРП30");
	МассивВариантов.Добавить("ОбменУТБП");
	МассивВариантов.Добавить("ОбменУниверсальный");
	Запрос.УстановитьПараметр("МассивВариантов", МассивВариантов);
	
	Возврат Запрос;

КонецФункции

// Возвращает признак доступности плана обмена в базовой версии
Функция ДоступностьПланаОбменаВБазовойВерсии(ИмяПланаОбмена,СообщатьПользователю = Истина)
	
	КоличествоУзловПланаОбмена = 2;
	СписокДоступныхПлановОбмена = ОбменДаннымиПовтИсп.ПланыОбменаБСП();
	
	Если СписокДоступныхПлановОбмена.Найти(ИмяПланаОбмена) <> Неопределено
		И ОбменДаннымиСобытия.ВсеУзлыПланаОбмена(ИмяПланаОбмена).Количество() < КоличествоУзловПланаОбмена Тогда
		Возврат Истина;
	Иначе
		
		Если СообщатьПользователю тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Используются ограничения базовой версии. Выбранный план обмена создать невозможно.'");
			Сообщение.Сообщить();
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

// Возвращает массив доступных для изменения в подчиненном узле констант
Функция НастройкиДоступныеДляИзмененияВПодчиненномУзле()
	
	МассивНастроек = Новый Массив;
	МассивНастроек.Добавить("НаборКонстант.ПрефиксВесовогоШтрихкода");
	МассивНастроек.Добавить("НаборКонстант.ПрефиксШтучногоШтрихкода");
	МассивНастроек.Добавить("НаборКонстант.ВедетсяРаботаЧерезТорговыхПредставителей");
	МассивНастроек.Добавить("НаборКонстант.ИспользованиеЗаданийТорговымПредставителям");
	МассивНастроек.Добавить("НаборКонстант.ДетализироватьЗаданияТорговымПредставителямПоНоменклатуре");
	МассивНастроек.Добавить("НаборКонстант.ИспользоватьМобильноеПриложение1СЗаказыКлиентов");
	МассивНастроек.Добавить("НаборКонстант.ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения");
	
	Возврат МассивНастроек;
	
КонецФункции

#Область ФункцииПланаОбменаРИБСОтборами

#Область ПроцедурыИФункцииОпределенияУсловийВыгрузкиДокументовПланаОбменаРибСОтборами

#Область Документы

#Область ДокументыВзаимодействия

Процедура ЗначенияФильтра_ДокументовВзаимодействия(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение, указанное в ответственном'");
	ПараметрыЗапроса.Подразделения = СформироватьИерархиюЭлементов(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ответственный, "Подразделение"), ФормироватьИерархию);
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	
КонецПроцедуры

#КонецОбласти 

#Область ДокументыВзаиморасчетов

Процедура ЗначенияФильтра_ВзаимозачетЗадолженности(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	МассивОрганизаций = Новый Массив;
	МассивОрганизаций.Добавить(Объект.Организация);
	
	Если ТипЗнч(Объект.КонтрагентДебитор) = Тип("СправочникСсылка.Организации") Тогда
		МассивОрганизаций.Добавить(Объект.КонтрагентДебитор);
	КонецЕсли;
	
	Если ТипЗнч(Объект.КонтрагентКредитор) = Тип("СправочникСсылка.Организации") Тогда
		МассивОрганизаций.Добавить(Объект.КонтрагентКредитор);
	КонецЕсли;
	
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение, указанное в объекте'");
	ПараметрыЗапроса.Подразделения                 = СформироватьИерархиюЭлементов(Объект.Подразделение, ФормироватьИерархию);
	ПараметрыЗапроса.Организации                   = СформироватьМассивОрганизаций(МассивОрганизаций);
	
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_СверкаВзаиморасчетов(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_СписаниеЗадолженности(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ТабличнаяЧастьЗадолженность.ОбъектРасчетов КАК ОбъектРасчетов
	                      |ПОМЕСТИТЬ ТабличнаяЧастьЗадолженность
	                      |ИЗ
	                      |	&ТабличнаяЧастьЗадолженность КАК ТабличнаяЧастьЗадолженность
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	ОбъектыРасчетов.Подразделение КАК Подразделение
	                      |ИЗ
	                      |	ТабличнаяЧастьЗадолженность КАК ТабличнаяЧастьЗадолженность
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	                      |		ПО ((ВЫРАЗИТЬ(ТабличнаяЧастьЗадолженность.ОбъектРасчетов КАК Справочник.ОбъектыРасчетов)) = ОбъектыРасчетов.Ссылка)
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	ДоговорыКредитовИДепозитов.Подразделение
	                      |ИЗ
	                      |	ТабличнаяЧастьЗадолженность КАК ТабличнаяЧастьЗадолженность
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКредитовИДепозитов КАК ДоговорыКредитовИДепозитов
	                      |		ПО ((ВЫРАЗИТЬ(ТабличнаяЧастьЗадолженность.ОбъектРасчетов КАК Справочник.ДоговорыКредитовИДепозитов)) = ДоговорыКредитовИДепозитов.Ссылка)");
		
	Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
	Запрос.УстановитьПараметр("ТабличнаяЧастьЗадолженность", Объект.Задолженность);
	
	МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
	
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение указанное в объектах расчетов табличной части'");
	ПараметрыЗапроса.Подразделения = МассивОбъектов;
	ПараметрыЗапроса.Организации   = СформироватьМассивОрганизаций(Объект.Организация);
	
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
КонецПроцедуры

#КонецОбласти

#Область ДокументыЗакупки

Процедура ЗначенияФильтра_АвансовыйОтчет(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_АктОРасхожденияхПослеПриемки(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	СтруктураОбъекта = Новый Структура;
	СтруктураОбъекта.Вставить("Организация",                     Объект.Организация);
	СтруктураОбъекта.Вставить("ТабЧастьТовары",                  Объект.Товары);
	СтруктураОбъекта.Вставить("ПодразделениеОбъекта",            Объект.Подразделение);
	СтруктураОбъекта.Вставить("НаименованиеКолонкиСклад",        "Склад");
	СтруктураОбъекта.Вставить("НаименованиеКолонкиНоменклатура", "Номенклатура");
	
	ОтборПоПодразделениюИзСкладаТабЧастиТоварыИОрганизации(СтруктураОбъекта, ПараметрыЗапроса, ФормироватьИерархию);
	
КонецПроцедуры

Процедура ЗначенияФильтра_ВозвратТоваровПоставщику(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение, указанное в складе'");
КонецПроцедуры

Процедура ЗначенияФильтра_ВыкупВозвратнойТарыУПоставщика(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_ДоверенностьВыданная(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_ЗаказПоставщику(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзСкладаИлиПодразделениюТабЧастиТоварыИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_ЗаписьКнигиПокупок(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_КорректировкаПриобретения(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	СтруктураОбъекта = Новый Структура;
	СтруктураОбъекта.Вставить("Организация",                     Объект.Организация);
	СтруктураОбъекта.Вставить("ТабЧастьТовары",                  Объект.Товары);
	СтруктураОбъекта.Вставить("ПодразделениеОбъекта",            Объект.Подразделение);
	СтруктураОбъекта.Вставить("НаименованиеКолонкиСклад",        "Склад");
	СтруктураОбъекта.Вставить("НаименованиеКолонкиНоменклатура", "Номенклатура");
	
	ОтборПоПодразделениюИзСкладаТабЧастиТоварыИОрганизации(СтруктураОбъекта, ПараметрыЗапроса, ФормироватьИерархию);
	
КонецПроцедуры

Процедура ЗначенияФильтра_ПланЗакупок(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		ПодразделениеОбъекта = Объект.Подразделение;
		ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение, указанное в объекте'");
	Иначе
		ПодразделениеОбъекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Склад, "Подразделение");
		ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение, указанное в складе'");
	КонецЕсли;
	
	ПараметрыЗапроса.Подразделения = СформироватьИерархиюЭлементов(ПодразделениеОбъекта, ФормироватьИерархию);
	ПараметрыЗапроса.ФильтрПоПодразделению = ЗначениеЗаполнено(ПодразделениеОбъекта);
	
КонецПроцедуры

Процедура ЗначенияФильтра_ПоступлениеТоваров(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		ПодразделениеОбъекта = Объект.Подразделение;
		ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение, указанное в объекте'");
	Иначе
		ПодразделениеОбъекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Склад, "Подразделение");
		ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение, указанное в складе'");
	КонецЕсли;
	
	ПараметрыЗапроса.Подразделения = СформироватьИерархиюЭлементов(ПодразделениеОбъекта, ФормироватьИерархию);
	ПараметрыЗапроса.ФильтрПоПодразделению = ЗначениеЗаполнено(ПодразделениеОбъекта);
	
	ПараметрыЗапроса.Организации           = СформироватьМассивОрганизаций(Объект.Организация);
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_ПриемкаТоваровНаХранение(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	СтруктураОбъекта = Новый Структура;
	СтруктураОбъекта.Вставить("Организация",                     Объект.Организация);
	СтруктураОбъекта.Вставить("ТабЧастьТовары",                  Объект.Товары);
	СтруктураОбъекта.Вставить("ПодразделениеОбъекта",            Объект.Подразделение);
	СтруктураОбъекта.Вставить("НаименованиеКолонкиСклад",        "Склад");
	СтруктураОбъекта.Вставить("НаименованиеКолонкиНоменклатура", "Номенклатура");
	
	ОтборПоПодразделениюИзСкладаТабЧастиТоварыИОрганизации(СтруктураОбъекта, ПараметрыЗапроса, ФормироватьИерархию);
	
КонецПроцедуры

Процедура ЗначенияФильтра_ПриобретениеТоваровУслуг(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзСкладаИлиПодразделениюТабЧастиТоварыИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_ПриобретениеУслугПрочихАктивов(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	МассивОбъектов = Объект.Расходы.Выгрузить().ВыгрузитьКолонку("Подразделение");
	
	Если ФормироватьИерархию Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
			|	СтруктураПредприятия.Ссылка КАК Подразделение
			|ИЗ
			|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
			|ГДЕ
			|	СтруктураПредприятия.Ссылка В(&МассивСсылок)
			|ИТОГИ ПО
			|	Подразделение ТОЛЬКО ИЕРАРХИЯ");
		
		Запрос.УстановитьПараметр("МассивСсылок", МассивОбъектов);
		МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	КонецЕсли;
	
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
	
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение, указанное в табличной части расходы'");
	ПараметрыЗапроса.Подразделения = МассивОбъектов;
	ПараметрыЗапроса.Организации   = СформироватьМассивОрганизаций(Объект.Организация);
	
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрацияЦенНоменклатурыПоставщика(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если ПроверитьНаличиеСвязаннойСсылки(Объект.ДокументОснование, ПараметрыЗапроса) Тогда
		
		ДокументОснование = Объект.ДокументОснование.ПолучитьОбъект();
		ПараметрыЗапроса  = ОпределитьПараметрыЗапросаОбъекта(ДокументОснование, ТипЗнч(ДокументОснование), ФормироватьИерархию);
		
		ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Документ основание'");
		
	Иначе
		ПараметрыЗапроса.Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗначенияФильтра_СписаниеПринятыхНаХранениеТоваров(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзСкладаИлиПодразделениюТабЧастиТоварыИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_СписаниеТоваровУХранителя(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_СписаниеРасхожденийПоступлениеПриобретение(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение, указанное в складе'");
КонецПроцедуры

Процедура ЗначенияФильтра_СчетФактураПолученный(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Для Каждого СтрокаТаблицы Из Объект.ДокументыОснования Цикл
		
		ПараметрыЗапросаДокументаОснования = ОпределитьПараметрыЗапросаОбъекта(СтрокаТаблицы.ДокументОснование.ПолучитьОбъект(),,ФормироватьИерархию);
		ПараметрыЗапроса = ОбъединитьУсловияОтбора(ПараметрыЗапроса, ПараметрыЗапросаДокументаОснования);
		
		Если ПараметрыЗапроса.Отказ Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Один из документов основания'");
	
КонецПроцедуры

Процедура ЗначенияФильтра_СчетФактураПолученныйАванс(Объект, ПараметрыЗапроса, ФормироватьИерархию)
		
	ПараметрыЗапроса = ОпределитьПараметрыЗапросаОбъекта(Объект.ДокументОснование.ПолучитьОбъект(),,ФормироватьИерархию);
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Документ основание'");
	
КонецПроцедуры

Процедура ЗначенияФильтра_ТаможеннаяДекларацияИмпорт(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Склады.Подразделение КАК Подразделение
			|ИЗ
			|	Справочник.Склады КАК Склады
			|ГДЕ
			|	Склады.Ссылка В (&МассивСкладов)");
	
	Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
	Запрос.УстановитьПараметр("МассивСкладов", Объект.Товары.ВыгрузитьКолонку("Склад"));
	
	МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
	
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение, указанное в складе либо складах табличной части'");
	ПараметрыЗапроса.Подразделения = МассивОбъектов;
	ПараметрыЗапроса.Организации   = СформироватьМассивОрганизаций(Объект.Организация);
	
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_ЗаявлениеОВвозеТоваров(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Склады.Подразделение КАК Подразделение
			|ИЗ
			|	Справочник.Склады КАК Склады
			|ГДЕ
			|	Склады.Ссылка В (&МассивСкладов)");
	
	Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
	Запрос.УстановитьПараметр("МассивСкладов", Объект.Товары.ВыгрузитьКолонку("Склад"));
	
	МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
	
	ПараметрыЗапроса.Подразделения = МассивОбъектов;
	ПараметрыЗапроса.Организации   = СформироватьМассивОрганизаций(Объект.Организация);
	
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_ОтгрузкаТоваровСХранения(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	СтруктураОбъекта = Новый Структура;
	СтруктураОбъекта.Вставить("Организация",                     Объект.Организация);
	СтруктураОбъекта.Вставить("ТабЧастьТовары",                  Объект.Товары);
	СтруктураОбъекта.Вставить("ПодразделениеОбъекта",            Объект.Подразделение);
	СтруктураОбъекта.Вставить("НаименованиеКолонкиСклад",        "Склад");
	СтруктураОбъекта.Вставить("НаименованиеКолонкиНоменклатура", "Номенклатура");
	
	ОтборПоПодразделениюИзСкладаТабЧастиТоварыИОрганизации(СтруктураОбъекта, ПараметрыЗапроса, ФормироватьИерархию);
	
КонецПроцедуры

Процедура ЗначенияФильтра_ОтчетКомитентуОЗакупках(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

#КонецОбласти 

#Область ДокументыИнтеркампани

Процедура ЗначенияФильтра_ВозвратТоваровМеждуОрганизациями(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение, указанное в складе'");
	ПараметрыЗапроса.Подразделения = СформироватьИерархиюЭлементов(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Склад, "Подразделение"), ФормироватьИерархию);
	
	МассивОрганизаций = Новый Массив;
	МассивОрганизаций.Добавить(Объект.Организация);
	МассивОрганизаций.Добавить(Объект.ОрганизацияПолучатель);
	
	ПараметрыЗапроса.Организации = МассивОрганизаций;
	
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_ОтчетПоКомиссииМеждуОрганизациями(Объект, ПараметрыЗапроса, ФормироватьИерархию)

	МассивОрганизаций = Новый Массив;
	МассивОрганизаций.Добавить(Объект.Организация);
	МассивОрганизаций.Добавить(Объект.Комиссионер);
	
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение, указанное в документе'");
	ПараметрыЗапроса.Подразделения = СформироватьИерархиюЭлементов(Объект.Подразделение, ФормироватьИерархию);
	ПараметрыЗапроса.Организации   = МассивОрганизаций;
	
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_ПередачаТоваровМеждуОрганизациями(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение, указанное в складе'");
	ПараметрыЗапроса.Подразделения = СформироватьИерархиюЭлементов(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Склад, "Подразделение"), ФормироватьИерархию);
		
	МассивОрганизаций = Новый Массив;
	МассивОрганизаций.Добавить(Объект.Организация);
	МассивОрганизаций.Добавить(Объект.ОрганизацияПолучатель);
	
	ПараметрыЗапроса.Организации = МассивОрганизаций;
	
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
КонецПроцедуры

#КонецОбласти 

#Область ДокументыКомиссии

Процедура ЗначенияФильтра_ОтчетКомиссионера(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_ОтчетКомиссионераОСписании(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_ОтчетКомитенту(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_ОтчетКомитентуОСписании(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

#КонецОбласти 

#Область ДокументыПродажи

Процедура ЗначенияФильтра_АктВыполненныхРабот(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_АктОРасхожденияхПослеОтгрузки(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	СтруктураОбъекта = Новый Структура;
	СтруктураОбъекта.Вставить("Организация",                     Объект.Организация);
	СтруктураОбъекта.Вставить("ТабЧастьТовары",                  Объект.Товары);
	СтруктураОбъекта.Вставить("ПодразделениеОбъекта",            Справочники.СтруктураПредприятия.ПустаяСсылка());
	СтруктураОбъекта.Вставить("НаименованиеКолонкиСклад",        "Склад");
	СтруктураОбъекта.Вставить("НаименованиеКолонкиНоменклатура", "Номенклатура");
	
	ОтборПоПодразделениюИзСкладаТабЧастиТоварыИОрганизации(СтруктураОбъекта, ПараметрыЗапроса, ФормироватьИерархию);
	
КонецПроцедуры

Процедура ЗначенияФильтра_БлокировкаВычетаНДС(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Для Каждого СтрокаТаблицы Из Объект.СчетаФактуры Цикл
		
		ПараметрыЗапросаДокументаОснования = ОпределитьПараметрыЗапросаОбъекта(СтрокаТаблицы.СчетФактура.ПолучитьОбъект(),,ФормироватьИерархию);
		ПараметрыЗапроса = ОбъединитьУсловияОтбора(ПараметрыЗапроса, ПараметрыЗапросаДокументаОснования);
		
		Если ПараметрыЗапроса.Отказ Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Один из документов основания'");
	
КонецПроцедуры

Процедура ЗначенияФильтра_ВозвратПодарочныхСертификатов(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если ПроверитьНаличиеСвязаннойСсылки(Объект.КассоваяСмена, ПараметрыЗапроса) Тогда
		
		КассоваяСмена = Объект.КассоваяСмена.ПолучитьОбъект();
		ПараметрыЗапроса = ОпределитьПараметрыЗапросаОбъекта(КассоваяСмена, ТипЗнч(КассоваяСмена), ФормироватьИерархию);
		
		ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Кассовая смена'");
		
	Иначе
		ПараметрыЗапроса.Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗначенияФильтра_ВозвратТоваровОтКлиента(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение, указанное в складе'");
КонецПроцедуры

Процедура ЗначенияФильтра_ВыкупВозвратнойТарыКлиентом(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_ЗаказКлиента(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	СтруктураОбъекта = Новый Структура;
	СтруктураОбъекта.Вставить("Организация",                     Объект.Организация);
	СтруктураОбъекта.Вставить("ТабЧастьТовары",                  Объект.Товары);
	СтруктураОбъекта.Вставить("ПодразделениеОбъекта",            Объект.Подразделение);
	СтруктураОбъекта.Вставить("НаименованиеКолонкиСклад",        "Склад");
	СтруктураОбъекта.Вставить("НаименованиеКолонкиНоменклатура", "Номенклатура");
	
	ОтборПоПодразделениюИзСкладаТабЧастиТоварыИОрганизации(СтруктураОбъекта, ПараметрыЗапроса, ФормироватьИерархию);
	
КонецПроцедуры

Процедура ЗначенияФильтра_ЗаписьКнигиПродаж(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_ЗаявкаНаВозвратТоваровОтКлиента(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры

Процедура ЗначенияФильтра_КорректировкаРеализации(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	СтруктураОбъекта = Новый Структура;
	СтруктураОбъекта.Вставить("Организация",                     Объект.Организация);
	СтруктураОбъекта.Вставить("ТабЧастьТовары",                  Объект.Товары);
	СтруктураОбъекта.Вставить("ПодразделениеОбъекта",            Объект.Подразделение);
	СтруктураОбъекта.Вставить("НаименованиеКолонкиСклад",        "Склад");
	СтруктураОбъекта.Вставить("НаименованиеКолонкиНоменклатура", "Номенклатура");
	
	ОтборПоПодразделениюИзСкладаТабЧастиТоварыИОрганизации(СтруктураОбъекта, ПараметрыЗапроса, ФормироватьИерархию);
	
КонецПроцедуры

Процедура ЗначениеФильтра_НачислениеРеверсивногоНДС(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
	Иначе
		ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗначенияФильтра_ОтчетОРозничныхВозвратах(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение, указанное в складе'");
КонецПроцедуры

Процедура ЗначенияФильтра_ОтчетОРозничныхПродажах(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение, указанное в складе'");
КонецПроцедуры

Процедура ЗначенияФильтра_ПередачаТоваровХранителю(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры

Процедура ЗначенияФильтра_ПеремещениеТоваров(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Склады.Подразделение КАК Подразделение
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	Склады.Ссылка В (&МассивСкладов)");
		
	МассивСкладов = Новый Массив;
	МассивСкладов.Добавить(Объект.СкладОтправитель);
	МассивСкладов.Добавить(Объект.СкладПолучатель);

	Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
	Запрос.УстановитьПараметр("МассивСкладов", МассивСкладов);
	
	МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
	
	ПараметрыЗапроса.КонтрольПроведенияПоОдномуИзУсловий = Истина;
	ПараметрыЗапроса.РеквизитПроверкиПодразделения       = НСтр("ru = 'Подразделения указанные в складах'");
	ПараметрыЗапроса.Подразделения                       = МассивОбъектов;
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	
	ПараметрыЗапроса.Организации   = СформироватьМассивОрганизаций(Объект.Организация);
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_АктОРасхожденияхПослеПеремещения(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Склады.Подразделение КАК Подразделение
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	Склады.Ссылка В (&МассивСкладов)");
		
	МассивСкладов = Новый Массив;
	МассивСкладов.Добавить(Объект.СкладОтправитель);
	МассивСкладов.Добавить(Объект.СкладПолучатель);
	
	Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
	Запрос.УстановитьПараметр("МассивСкладов", МассивСкладов);
	
	МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
	
	ПараметрыЗапроса.КонтрольПроведенияПоОдномуИзУсловий = Истина;
	ПараметрыЗапроса.РеквизитПроверкиПодразделения       = НСтр("ru = 'Подразделения указанные в складах'");
	ПараметрыЗапроса.Подразделения                       = МассивОбъектов;
	ПараметрыЗапроса.ФильтрПоПодразделению               = Истина;
	
	ПараметрыЗапроса.Организации         = СформироватьМассивОрганизаций(Объект.Организация);
	ПараметрыЗапроса.ФильтрПоОрганизации = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_ПланПродаж(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		ОтборПоПодразделениюОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
	Иначе
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидПлана, "ЗаполнятьСклад") Тогда
			
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	Склады.Подразделение КАК Подразделение
				|ИЗ
				|	Справочник.Склады КАК Склады
				|ГДЕ
				|	Склады.Ссылка В (&МассивСкладов)");
				
			Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
			Запрос.УстановитьПараметр("МассивСкладов", Объект.Товары.ВыгрузитьКолонку("Склад"));
			
			МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
			ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
			
			ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделения указанные в складах табличной части'");
			ПараметрыЗапроса.Подразделения                 = МассивОбъектов;
			ПараметрыЗапроса.ФильтрПоПодразделению         = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

Процедура ЗначенияФильтра_ПоступлениеТоваровОтХранителя(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение, указанное в складе'");
КонецПроцедуры

Процедура ЗначенияФильтра_ПланПродажПоКатегориям(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если ЗначениеЗаполнено(Объект.ВидПлана) Тогда
		ФлагиФильтра = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ВидПлана, "ЗаполнятьСклад, ЗаполнятьПодразделение");
		Если ФлагиФильтра.ЗаполнятьСклад Тогда
			ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
			ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение указанное в складе'");
		ИначеЕсли ФлагиФильтра.ЗаполнятьПодразделение Тогда
			ОтборПоПодразделениюОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РеализацияПодарочныхСертификатов(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "КассаККМ");
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение указанное в кассе ККМ'");
КонецПроцедуры

Процедура ЗначенияФильтра_РеализацияТоваровИУслуг(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	СтруктураОбъекта = Новый Структура;
	СтруктураОбъекта.Вставить("Организация",                     Объект.Организация);
	СтруктураОбъекта.Вставить("ТабЧастьТовары",                  Объект.Товары);
	СтруктураОбъекта.Вставить("ПодразделениеОбъекта",            Объект.Подразделение);
	СтруктураОбъекта.Вставить("НаименованиеКолонкиСклад",        "Склад");
	СтруктураОбъекта.Вставить("НаименованиеКолонкиНоменклатура", "Номенклатура");
	
	ОтборПоПодразделениюИзСкладаТабЧастиТоварыИОрганизации(СтруктураОбъекта, ПараметрыЗапроса, ФормироватьИерархию);
	
КонецПроцедуры

Процедура ЗначенияФильтра_РеализацияУслугПрочихАктивов(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию)
КонецПроцедуры

Процедура ЗначенияФильтра_СчетНаОплатуКлиенту(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если ПроверитьНаличиеСвязаннойСсылки(Объект.ДокументОснование, ПараметрыЗапроса) Тогда
		
		ДокументОснование = Объект.ДокументОснование.ПолучитьОбъект();
		ПараметрыЗапроса  = ОпределитьПараметрыЗапросаОбъекта(ДокументОснование, ТипЗнч(ДокументОснование), ФормироватьИерархию);
		
		ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Документ основание'");
		
	Иначе
		ПараметрыЗапроса.Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗначенияФильтра_СчетФактураВыданный(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Для Каждого СтрокаТаблицы Из Объект.ДокументыОснования Цикл
		
		ПараметрыЗапросаДокументаОснования = ОпределитьПараметрыЗапросаОбъекта(СтрокаТаблицы.ДокументОснование.ПолучитьОбъект(),,ФормироватьИерархию);
		ПараметрыЗапроса = ОбъединитьУсловияОтбора(ПараметрыЗапроса, ПараметрыЗапросаДокументаОснования);
		
		Если ПараметрыЗапроса.Отказ Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Один из документов основания'");
	
КонецПроцедуры

Процедура ЗначенияФильтра_СчетФактураВыданныйАванс(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПараметрыЗапроса = ОпределитьПараметрыЗапросаОбъекта(Объект.ДокументОснование.ПолучитьОбъект(),,ФормироватьИерархию);
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Документ основание'");
	
КонецПроцедуры

Процедура ЗначенияФильтра_СчетФактураНаНеподтвержденнуюРеализацию(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПараметрыЗапроса = ОпределитьПараметрыЗапросаОбъекта(Объект.ДокументОснование.ПолучитьОбъект(),,ФормироватьИерархию);
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Документ основание'");
	
КонецПроцедуры

Процедура ЗначенияФильтра_ТранспортнаяНакладная(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Для Каждого СтрокаТаблицы Из Объект.ДокументыОснования Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ДокументОснование) Тогда
			ПараметрыЗапроса.Отказ = Истина;
			Прервать;
		КонецЕсли;
		
		ПараметрыЗапросаДокументаОснования = ОпределитьПараметрыЗапросаОбъекта(СтрокаТаблицы.ДокументОснование.ПолучитьОбъект(),,ФормироватьИерархию);
		ПараметрыЗапроса = ОбъединитьУсловияОтбора(ПараметрыЗапроса, ПараметрыЗапросаДокументаОснования);
		
		Если ПараметрыЗапроса.Отказ Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Один из документов основания'");
	
КонецПроцедуры

Процедура ЗначенияФильтра_ТТНВходящаяЕГАИС(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если ЗначениеЗаполнено(Объект.ТорговыйОбъект) И ТипЗнч(Объект.ТорговыйОбъект) = Тип("СправочникСсылка.Склады") Тогда
		ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "ТорговыйОбъект");
		ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение указанное в складе'");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗначенияФильтра_ТТНИсходящаяЕГАИС(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫРАЗИТЬ(ТТНИсходящаяЕГАИС.Грузоотправитель.ТорговыйОбъект КАК Справочник.Склады).Подразделение КАК Подразделение
		|ИЗ
		|	Документ.ТТНИсходящаяЕГАИС КАК ТТНИсходящаяЕГАИС
		|ГДЕ
		|	ТТНИсходящаяЕГАИС.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ТТНИсходящаяЕГАИС.Грузополучатель.ТорговыйОбъект КАК Справочник.Склады).Подразделение
		|ИЗ
		|	Документ.ТТНИсходящаяЕГАИС КАК ТТНИсходящаяЕГАИС
		|ГДЕ
		|	ТТНИсходящаяЕГАИС.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ТТНИсходящаяЕГАИС.Поставщик.ТорговыйОбъект КАК Справочник.Склады).Подразделение
		|ИЗ
		|	Документ.ТТНИсходящаяЕГАИС КАК ТТНИсходящаяЕГАИС
		|ГДЕ
		|	ТТНИсходящаяЕГАИС.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
	Если МассивОбъектов.Количество() > 0 Тогда
		ПараметрыЗапроса.КонтрольПроведенияПоОдномуИзУсловий = Истина;
		ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение указанное в складе грузоотправителя или грузополучателя'");
		ПараметрыЗапроса.Подразделения                 = МассивОбъектов;
		ПараметрыЗапроса.ФильтрПоПодразделению         = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗначенияФильтра_УведомлениеОПланируемомИмпортеЕГАИС(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ПараметрыЗапроса.Отказ = Истина;
КонецПроцедуры

#КонецОбласти 

#Область ДокументыПрочее

Процедура ЗначенияФильтра_АннулированиеПодарочныхСертификатов(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ПараметрыЗапроса.Отказ = Истина;
КонецПроцедуры

Процедура ЗначенияФильтра_Бронирование(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_ВводОстатков(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	МассивОрганизаций = Новый Массив;
	МассивОрганизаций.Добавить(Объект.Организация);
	
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковВАвтономныхКассахККМКОформлениюОтчетовОРозничныхПродажах
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковВАвтономныхКассахККМПоРозничнойВыручке Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
			|	ВводОстатковКассыККМ.КассаККМ
			|ПОМЕСТИТЬ ТабличнаяЧастьКассыККМ
			|ИЗ
			|	&ТабличнаяЧастьКассыККМ КАК ВводОстатковКассыККМ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	КассыККМ.Подразделение КАК Подразделение
			|ИЗ
			|	ТабличнаяЧастьКассыККМ КАК ТабличнаяЧастьКассыККМ
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КассыККМ КАК КассыККМ
			|		ПО ТабличнаяЧастьКассыККМ.КассаККМ = КассыККМ.Ссылка");
		
		Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
		Запрос.УстановитьПараметр("ТабличнаяЧастьКассыККМ", Объект.КассыККМ.Выгрузить());
		МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
		ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение указанное в кассе ККМ табличной части'");
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковВКассах Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
			|	ВводОстатковКассы.Касса
			|ПОМЕСТИТЬ ТабличнаяЧастьКассы
			|ИЗ
			|	&ТабличнаяЧастьКассы КАК ВводОстатковКассы
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Кассы.Подразделение КАК Подразделение
			|ИЗ
			|	ТабличнаяЧастьКассы КАК ТабличнаяЧастьКассы
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Кассы КАК Кассы
			|		ПО ТабличнаяЧастьКассы.Касса = Кассы.Ссылка");
		
		Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
		Запрос.УстановитьПараметр("ТабличнаяЧастьКассы", Объект.Кассы.Выгрузить());
		МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
		ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение указанное в кассе табличной части'");
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковЗадолженностиКлиентов
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковЗадолженностиПоставщикам
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковАвансовКлиентов
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковАвансовПоставщикам Тогда
		
		ПараметрыЗапроса.ФильтрПоПодразделению = Ложь;
	
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковПоДоговорамКредитовИДепозитов Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
			|	ВводОстатковРасчетыКредитыИДепозиты.Договор
			|ПОМЕСТИТЬ ТабличнаяЧастьРасчеты
			|ИЗ
			|	&ТабличнаяЧастьРасчетыКредитыИДепозиты КАК ВводОстатковРасчетыКредитыИДепозиты
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДоговорыКредитовИДепозитов.Подразделение КАК Подразделение
			|ИЗ
			|	ТабличнаяЧастьРасчеты КАК ТабличнаяЧастьРасчеты
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКредитовИДепозитов КАК ДоговорыКредитовИДепозитов
			|		ПО ТабличнаяЧастьРасчеты.Договор = ДоговорыКредитовИДепозитов.Ссылка");
		
		Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
		Запрос.УстановитьПараметр("ТабличнаяЧастьРасчетыКредитыИДепозиты", Объект.РасчетыПоФинансовымИнструментам.Выгрузить());
		МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
		ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение указанное в договоре табличной части'");
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковНаБанковскихСчетах Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
			|	ВводОстатковБанковскиеСчета.БанковскийСчет
			|ПОМЕСТИТЬ ТабличнаяЧастьБанковскиеСчета
			|ИЗ
			|	&ТабличнаяЧастьБанковскиеСчета КАК ВводОстатковБанковскиеСчета
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	БанковскиеСчета.Подразделение КАК Подразделение
			|ИЗ
			|	ТабличнаяЧастьБанковскиеСчета КАК ТабличнаяЧастьБанковскиеСчета
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчета
			|		ПО ТабличнаяЧастьБанковскиеСчета.БанковскийСчет = БанковскиеСчета.Ссылка");
		
		Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
		Запрос.УстановитьПараметр("ТабличнаяЧастьБанковскиеСчета", Объект.БанковскиеСчета.Выгрузить());
		МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
		ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение указанное в банковском счете табличной части'");
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковЗадолженностиПодотчетников
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковПерерасходовПодотчетныхСредств Тогда
		
		МассивОбъектов = СформироватьИерархиюЭлементов(Объект.Подразделение, ФормироватьИерархию);
		ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение указанное в объекте'");
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковРасчетовМеждуОрганизациямиПоАвансам
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковРасчетовМеждуОрганизациямиПоРеализациям Тогда
		
		ПараметрыЗапроса.ФильтрПоПодразделению = Ложь;
		МассивОрганизаций.Добавить(Объект.ОрганизацияПолучатель);
	
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковСобственныхТоваров
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковТоваровПереданныхНаКомиссию
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковТоваровПолученныхНаКомиссию
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковВозвратнойТарыПереданнойКлиентам
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковВозвратнойТарыПринятойОтПоставщиков
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковПриПереходеНаИспользованиеАдресногоХраненияОстатков
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковПриПереходеНаИспользованиеСкладскихПомещений
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковМатериаловПереданныхПереработчикам
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковМатериаловПереданныхВПроизводство
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковОптовыхПродажЗаПрошлыеПериоды 
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковРозничныхПродажЗаПрошлыеПериоды Тогда
		
		МассивОбъектов = СформироватьИерархиюЭлементов(
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Склад, "Подразделение"), ФормироватьИерархию);
		ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение указанное в складе'");
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковДенежныхСредствКПоступлениюОтЭквайера Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
			|	ТаблицаЭквайринговыеТерминалы.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал
			|ПОМЕСТИТЬ ТаблицаЭквайринговыеТерминалы
			|ИЗ
			|	&ТаблицаЭквайринговыеТерминалы КАК ТаблицаЭквайринговыеТерминалы
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	БанковскиеСчета.Подразделение КАК Подразделение,
			|	БанковскиеСчета.Владелец КАК Организация
			|ИЗ
			|	ТаблицаЭквайринговыеТерминалы КАК ТаблицаЭквайринговыеТерминалы
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
			|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчета
			|			ПО ЭквайринговыеТерминалы.Владелец.БанковскийСчет = БанковскиеСчета.Ссылка
			|		ПО ТаблицаЭквайринговыеТерминалы.ЭквайринговыйТерминал = ЭквайринговыеТерминалы.Ссылка");
			
		Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
		Запрос.УстановитьПараметр("ТаблицаЭквайринговыеТерминалы", Объект.РасчетыПоЭквайрингу.Выгрузить());
		Результат = Запрос.Выполнить().Выгрузить();
		
		ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение указанное в экварийнговых терминалах'");
		МассивОбъектов    = Результат.ВыгрузитьКолонку("Подразделение");
		МассивОрганизаций = Результат.ВыгрузитьКолонку("Организация");
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковПодарочныхСертификатов Тогда
		ПараметрыЗапроса.ФильтрПоПодразделению = Ложь;
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковТМЦВЭксплуатации
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковПрочихАктивовПассивов
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковПрочихРасходов 
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковФинансовогоРезультатаЗаПрошлыеПериоды Тогда
		
		Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
			ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
			МассивОбъектов = ПараметрыЗапроса.Подразделения;
		Иначе
			ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
			ПараметрыЗапроса.ФильтрПоПодразделению = Ложь;
		КонецЕсли;
		
	Иначе
		
		ПараметрыЗапроса.ФильтрПоПодразделению = Ложь;
		ПараметрыЗапроса.ФильтрПоОрганизации   = Ложь;
		ПараметрыЗапроса.ФильтрПоВидуЦен       = Ложь;
		ПараметрыЗапроса.Отказ                 = Истина;
		
		Возврат;
		
	КонецЕсли;
	
	Если ПараметрыЗапроса.ФильтрПоПодразделению Тогда
		ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
	КонецЕсли;
	
	ПараметрыЗапроса.Подразделения = МассивОбъектов;
	ПараметрыЗапроса.Организации   = МассивОрганизаций;

КонецПроцедуры

Процедура ЗначенияФильтра_ВводОстатковВзаиморасчетов(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию)
КонецПроцедуры

Процедура ЗначенияФильтра_ВводОстатковДенежныхСредств(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковВАвтономныхКассахККМКОформлениюОтчетовОРозничныхПродажах
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковВАвтономныхКассахККМПоРозничнойВыручке Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
			|	ВводОстатковКассыККМ.КассаККМ
			|ПОМЕСТИТЬ ТабличнаяЧастьКассыККМ
			|ИЗ
			|	&ТабличнаяЧастьКассыККМ КАК ВводОстатковКассыККМ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	КассыККМ.Подразделение КАК Подразделение
			|ИЗ
			|	ТабличнаяЧастьКассыККМ КАК ТабличнаяЧастьКассыККМ
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КассыККМ КАК КассыККМ
			|		ПО ТабличнаяЧастьКассыККМ.КассаККМ = КассыККМ.Ссылка");
		
		Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
		Запрос.УстановитьПараметр("ТабличнаяЧастьКассыККМ", Объект.КассыККМ.Выгрузить());
		МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
		ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение указанное в кассе ККМ табличной части'");
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковВКассах Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
			|	ВводОстатковКассы.Касса
			|ПОМЕСТИТЬ ТабличнаяЧастьКассы
			|ИЗ
			|	&ТабличнаяЧастьКассы КАК ВводОстатковКассы
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Кассы.Подразделение КАК Подразделение
			|ИЗ
			|	ТабличнаяЧастьКассы КАК ТабличнаяЧастьКассы
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Кассы КАК Кассы
			|		ПО ТабличнаяЧастьКассы.Касса = Кассы.Ссылка");
		
		Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
		Запрос.УстановитьПараметр("ТабличнаяЧастьКассы", Объект.Кассы.Выгрузить());
		МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
		ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение указанное в кассе табличной части'");
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковНаБанковскихСчетах Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
			|	ВводОстатковБанковскиеСчета.БанковскийСчет
			|ПОМЕСТИТЬ ТабличнаяЧастьБанковскиеСчета
			|ИЗ
			|	&ТабличнаяЧастьБанковскиеСчета КАК ВводОстатковБанковскиеСчета
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	БанковскиеСчета.Подразделение КАК Подразделение
			|ИЗ
			|	ТабличнаяЧастьБанковскиеСчета КАК ТабличнаяЧастьБанковскиеСчета
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчета
			|		ПО ТабличнаяЧастьБанковскиеСчета.БанковскийСчет = БанковскиеСчета.Ссылка");
		
		Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
		Запрос.УстановитьПараметр("ТабличнаяЧастьБанковскиеСчета", Объект.БанковскиеСчета.Выгрузить());
		МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
		ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение указанное в банковском счете табличной части'");
		
	КонецЕсли;
	
	Если ПараметрыЗапроса.ФильтрПоПодразделению Тогда
		ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
	КонецЕсли;
	
	ПараметрыЗапроса.Подразделения = МассивОбъектов;

КонецПроцедуры

Процедура ЗначенияФильтра_ВводОстатковНДСПредъявленного(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию)
КонецПроцедуры

Процедура ЗначенияФильтра_ВводОстатковОПродажахЗаПрошлыеПериоды(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковОптовыхПродажЗаПрошлыеПериоды 
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковРозничныхПродажЗаПрошлыеПериоды 
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковФинансовогоРезультатаЗаПрошлыеПериоды Тогда
		
		ОтборПоПодразделениюОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗначенияФильтра_ВводОстатковПоФинансовымИнструментам(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	ВводОстатковРасчетыКредитыИДепозиты.Договор
		|ПОМЕСТИТЬ ТабличнаяЧастьРасчеты
		|ИЗ
		|	&ТабличнаяЧастьРасчетыКредитыИДепозиты КАК ВводОстатковРасчетыКредитыИДепозиты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДоговорыКредитовИДепозитов.Подразделение КАК Подразделение
		|ИЗ
		|	ТабличнаяЧастьРасчеты КАК ТабличнаяЧастьРасчеты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКредитовИДепозитов КАК ДоговорыКредитовИДепозитов
		|		ПО ТабличнаяЧастьРасчеты.Договор = ДоговорыКредитовИДепозитов.Ссылка");
	
	Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
	Запрос.УстановитьПараметр("ТабличнаяЧастьРасчетыКредитыИДепозиты", Объект.РасчетыПоФинансовымИнструментам.Выгрузить());
	МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение указанное в договоре табличной части'");
		
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
	
	ПараметрыЗапроса.Подразделения = МассивОбъектов;
	
КонецПроцедуры

Процедура ЗначенияФильтра_УведомлениеОбОстаткахПрослеживаемыхТоваров(Объект, ПараметрыЗапроса, ФормироватьИерархию);
	ОтборПоПодразделениюИзСкладаИлиПодразделениюТабЧастиТоварыИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_УведомлениеОВвозеПрослеживаемыхТоваров(Объект, ПараметрыЗапроса, ФормироватьИерархию);
	ОтборПоПодразделениюИзСкладаИлиПодразделениюТабЧастиТоварыИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_УведомлениеОПеремещенииПрослеживаемыхТоваров(Объект, ПараметрыЗапроса, ФормироватьИерархию);
	ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_ВводОстатковПрочиеРасходы(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
	Иначе
		ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗначенияФильтра_ВводОстатковПрочихАктивовПассивов(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
	Иначе
		ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗначенияФильтра_ВводОстатковРасчетовПоЭквайрингу(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	МассивОрганизаций = Новый Массив;
	МассивОрганизаций.Добавить(Объект.Организация);
	
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	ТаблицаЭквайринговыеТерминалы.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал
		|ПОМЕСТИТЬ ТаблицаЭквайринговыеТерминалы
		|ИЗ
		|	&ТаблицаЭквайринговыеТерминалы КАК ТаблицаЭквайринговыеТерминалы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	БанковскиеСчета.Подразделение КАК Подразделение,
		|	БанковскиеСчета.Владелец КАК Организация
		|ИЗ
		|	ТаблицаЭквайринговыеТерминалы КАК ТаблицаЭквайринговыеТерминалы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчета
		|			ПО ЭквайринговыеТерминалы.Владелец.БанковскийСчет = БанковскиеСчета.Ссылка
		|		ПО ТаблицаЭквайринговыеТерминалы.ЭквайринговыйТерминал = ЭквайринговыеТерминалы.Ссылка");
		
	Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
	Запрос.УстановитьПараметр("ТаблицаЭквайринговыеТерминалы", Объект.РасчетыПоЭквайрингу.Выгрузить());
	Результат = Запрос.Выполнить().Выгрузить();
	
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение указанное в экварийнговых терминалах'");
	МассивОбъектов    = Результат.ВыгрузитьКолонку("Подразделение");
	МассивОрганизаций = Результат.ВыгрузитьКолонку("Организация");
	
	Если ПараметрыЗапроса.ФильтрПоПодразделению Тогда
		ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
	КонецЕсли;
	
	ПараметрыЗапроса.Подразделения = МассивОбъектов;
	ПараметрыЗапроса.Организации   = МассивОрганизаций;

КонецПроцедуры

Процедура ЗначенияФильтра_ВводОстатковСПодотчетниками(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_ВводОстатковТоваров(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_ВыкупПринятыхНаХранениеТоваров(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзСкладаИлиПодразделениюТабЧастиТоварыИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_ВыкупТоваровХранителем(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_ГрафикИсполненияДоговора(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если ПроверитьНаличиеСвязаннойСсылки(Объект.Договор, ПараметрыЗапроса) Тогда
		ЗначенияФильтра_Справочники_ДоговорыКонтрагентов(Объект.Договор.ПолучитьОбъект(), ПараметрыЗапроса, ФормироватьИерархию);
	КонецЕсли;
	
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Договор с контрагентом'");
	
КонецПроцедуры

Процедура ЗначенияФильтра_ЗаданиеТорговомуПредставителю(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение указанное в складе'");
КонецПроцедуры

Процедура ЗначенияФильтра_ЗаявкаНаКомандировку(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_ПоручениеЭкспедитору(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	МассивПодразделений = Новый Массив();
	
	ПодразделениеПункта = Новый Массив();
	ПодразделениеСклада = Новый Массив();
	
	Если ЗначениеЗаполнено(Объект.Склад) ТОгда
		ПодразделениеСклада = СформироватьИерархиюЭлементов(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Склад, "Подразделение")
			, ФормироватьИерархию);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Пункт) Тогда
		Если ТипЗнч(Объект.Пункт) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
			ПодразделениеПункта = СформироватьИерархиюЭлементов(Объект.Пункт, ФормироватьИерархию);
		ИначеЕсли ТипЗнч(Объект.Пункт) = Тип("СправочникСсылка.Склады") Тогда
			ПодразделениеПункта = СформироватьИерархиюЭлементов(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Пункт, "Подразделение")
				, ФормироватьИерархию);
		КонецЕсли;
	КонецЕсли;
	
	МассивПодразделений = ОбъединитьМассивы(ПодразделениеСклада, ПодразделениеПункта);
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивПодразделений);
	
	ПараметрыЗапроса.КонтрольПроведенияПоОдномуИзУсловий = Истина;
	ПараметрыЗапроса.РеквизитПроверкиПодразделения       = НСтр("ru = 'Подразделение указанное в складе или пункте назначения'");
	ПараметрыЗапроса.Подразделения                       = МассивПодразделений;
	ПараметрыЗапроса.ФильтрПоПодразделению               = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_ИнойДокументПодтвержденияНДС(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_ИсправлениеРазвернутогоСальдоТоваровОрганизаций(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_КоммерческоеПредложениеКлиенту(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_КорректировкаНазначенияТоваров(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	КорректировкаНазначенияТоваровТовары.Склад КАК Склад
		|ПОМЕСТИТЬ ТабличнаяЧастьТовары
		|ИЗ
		|	&КорректировкаНазначенияТоваровТовары КАК КорректировкаНазначенияТоваровТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Склады.Подразделение КАК Подразделение
		|ИЗ
		|	ТабличнаяЧастьТовары КАК ТабличнаяЧастьТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
		|		ПО ТабличнаяЧастьТовары.Склад = Склады.Ссылка");
		
	Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
	Запрос.УстановитьПараметр("КорректировкаНазначенияТоваровТовары", Объект.Товары);
	
	МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
	
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение указанное в складе табличной части товары'");
	ПараметрыЗапроса.Подразделения                 = МассивОбъектов;
	ПараметрыЗапроса.ФильтрПоПодразделению         = Истина;
	
	ПараметрыЗапроса.Организации         = СформироватьМассивОрганизаций(Объект.Организация);
	ПараметрыЗапроса.ФильтрПоОрганизации = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_КорректировкаНалогообложенияНДСПартийТоваров(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_КорректировкаВидаДеятельностиНДС(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры

Процедура ЗначенияФильтра_НачисленияКредитовИДепозитов(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ПараметрыЗапроса.Отказ = Истина;
КонецПроцедуры

Процедура ЗначенияФильтра_ДвижениеПрочихАктивовПассивов(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ПараметрыЗапроса.Отказ = Истина;
КонецПроцедуры

Процедура ЗначенияФильтра_РасчетКурсовыхРазниц(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ПараметрыЗапроса.Организации = СформироватьМассивОрганизаций(Объект.Организация);
		
	ПараметрыЗапроса.ФильтрПоПодразделению = Ложь;
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
КонецПроцедуры

Процедура ЗначенияФильтра_РегистраторРасчетов(Объект, ПараметрыЗапроса, ФормироватьИерархию) 
	
	Если ПроверитьНаличиеСвязаннойСсылки(Объект.ОбъектРасчетов, ПараметрыЗапроса) Тогда
		ПараметрыЗапроса = ОпределитьПараметрыЗапросаОбъекта(Объект.ОбъектРасчетов.ПолучитьОбъект(),,ФормироватьИерархию);	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистраторЗапасыИПотребности(Объект, ПараметрыЗапроса, ФормироватьИерархию) 
	
	Если ПроверитьНаличиеСвязаннойСсылки(Объект.Распоряжение, ПараметрыЗапроса) Тогда 
		ПараметрыЗапроса = ОпределитьПараметрыЗапросаОбъекта(Объект.Распоряжение.ПолучитьОбъект(),,ФормироватьИерархию);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗначенияФильтра_ПервичныйДокумент(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_ПрочиеДоходыРасходы(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ПараметрыЗапроса.Отказ = Истина;
КонецПроцедуры

Процедура ЗначенияФильтра_ПодтверждениеЗачисленияЗарплаты(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РаспределениеНДС(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ПараметрыЗапроса.Отказ = Истина;
КонецПроцедуры

Процедура ЗначенияФильтра_СписаниеНДСНаРасходы(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ПараметрыЗапроса.Отказ = Истина;
КонецПроцедуры

Процедура ЗначенияФильтра_СправкаОПодтверждающихДокументах(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РаспределениеРасходовБудущихПериодов(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РасчетСебестоимостиТоваров(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ПараметрыЗапроса.Отказ = Истина;
КонецПроцедуры

Процедура ЗначенияФильтра_УстановкаЦенНоменклатуры(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ПараметрыЗапроса.Отказ = ПланыОбмена.СОтборами.ЭтотУзел().ИспользоватьОтборПоВидамЦен;
КонецПроцедуры

#КонецОбласти

#Область ДокументыСклад

Процедура ЗначенияФильтра_ВнутреннееПотребление(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение указанное в складе'");
КонецПроцедуры

Процедура ЗначенияФильтра_ЗаданиеНаПеревозку(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение указанное в складе'");
КонецПроцедуры

Процедура ЗначенияФильтра_ЗаказНаВнутреннееПотребление(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение указанное в складе'");
КонецПроцедуры

Процедура ЗначенияФильтра_ЗаказНаПеремещение(Объект, ПараметрыЗапроса, ФормироватьИерархию)

	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Склады.Подразделение КАК Подразделение
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	Склады.Ссылка В (&МассивСкладов)");
		
	Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
	
	МассивСкладов = Новый Массив;
	МассивСкладов.Добавить(Объект.СкладОтправитель);
	МассивСкладов.Добавить(Объект.СкладПолучатель);
	
	Запрос.УстановитьПараметр("МассивСкладов", МассивСкладов);
	
	МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	
	МассивОрганизаций = Новый Массив;
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		МассивОрганизаций.Добавить(Объект.Организация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ОрганизацияПолучатель) Тогда
		МассивОрганизаций.Добавить(Объект.ОрганизацияПолучатель);
	КонецЕсли;
	
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
	
	ПараметрыЗапроса.КонтрольПроведенияПоОдномуИзУсловий = Истина;
	ПараметрыЗапроса.РеквизитПроверкиПодразделения       = НСтр("ru = 'Подразделение указанное в складах'");
	ПараметрыЗапроса.Подразделения                       = МассивОбъектов;
	ПараметрыЗапроса.ФильтрПоПодразделению               = Истина;
	
	ПараметрыЗапроса.Организации         = МассивОрганизаций;
	ПараметрыЗапроса.ФильтрПоОрганизации = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_ЗаказНаСборку(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение указанное в складе'");
КонецПроцедуры

Процедура ЗначенияФильтра_ИзменениеАссортимента(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если ПроверитьНаличиеСвязаннойСсылки(Объект.ОбъектПланирования, ПараметрыЗапроса) Тогда
		
		ОбъектПланирования = Объект.ОбъектПланирования.ПолучитьОбъект();
		ПараметрыЗапроса   = ОпределитьПараметрыЗапросаОбъекта(ОбъектПланирования, ТипЗнч(ОбъектПланирования), ФормироватьИерархию);
		
		ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Объект планирования'");
		
	Иначе
		ПараметрыЗапроса.Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗначенияФильтра_КорректировкаИзлишковНедостачПоТоварнымМестам(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение указанное в складе'");
КонецПроцедуры

Процедура ЗначенияФильтра_КорректировкаОбособленногоУчетаЗапасов(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение указанное в складе'");
КонецПроцедуры

Процедура ЗначенияФильтра_ОприходованиеИзлишковТоваров(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение указанное в складе'");
КонецПроцедуры

Процедура ЗначенияФильтра_ОприходованиеИзлишковТоваровУХранителя(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение, указанное в ответственном'");
	ПараметрыЗапроса.Подразделения = СформироватьИерархиюЭлементов(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ответственный, "Подразделение"), ФормироватьИерархию);
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
КонецПроцедуры

Процедура ЗначенияФильтра_ОрдерНаОтражениеИзлишковТоваров(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение указанное в складе'");
КонецПроцедуры

Процедура ЗначенияФильтра_ОрдерНаОтражениеНедостачТоваров(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение указанное в складе'");
КонецПроцедуры

Процедура ЗначенияФильтра_ОрдерНаОтражениеПересортицыТоваров(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение указанное в складе'");
КонецПроцедуры

Процедура ЗначенияФильтра_ОрдерНаОтражениеПорчиТоваров(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение указанное в складе'");
КонецПроцедуры

Процедура ЗначенияФильтра_ОрдерНаПеремещениеТоваров(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение указанное в складе'");
КонецПроцедуры

Процедура ЗначенияФильтра_ОтборРазмещениеТоваров(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение указанное в складе'");
КонецПроцедуры

Процедура ЗначенияФильтра_КорректировкаПоОрдеруНаТовары(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение указанное в складе'");
КонецПроцедуры

Процедура ЗначенияФильтра_ПересортицаТоваров(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение указанное в складе'");
КонецПроцедуры

Процедура ЗначенияФильтра_ПересортицаТоваровУХранителя(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение указанное в складе'");
КонецПроцедуры

Процедура ЗначенияФильтра_ПересчетТоваров(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение указанное в складе'");
КонецПроцедуры

Процедура ЗначенияФильтра_ПланВнутреннихПотреблений(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение указанное в складе'");
КонецПроцедуры

Процедура ЗначенияФильтра_ПланОстатков(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидПлана, "ЗаполнятьСклад") Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Склады.Подразделение КАК Подразделение
			|ИЗ
			|	Справочник.Склады КАК Склады
			|ГДЕ
			|	Склады.Ссылка В (&МассивСкладов)");
			
		Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
		Запрос.УстановитьПараметр("МассивСкладов", Объект.Товары.ВыгрузитьКолонку("Склад"));
		
		МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
		ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
		
		ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделения указанные в складах табличной части'");
		ПараметрыЗапроса.Подразделения                 = МассивОбъектов;
		ПараметрыЗапроса.ФильтрПоПодразделению         = Истина;
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗначенияФильтра_ПланСборкиРазборки(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение указанное в складе'");
КонецПроцедуры

Процедура ЗначенияФильтра_ПорчаТоваров(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение указанное в складе'");
КонецПроцедуры

Процедура ЗначенияФильтра_ПорчаТоваровУХранителя(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение указанное в складе'");
КонецПроцедуры

Процедура ЗначенияФильтра_ПриходныйОрдерНаТовары(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение указанное в складе'");
КонецПроцедуры

Процедура ЗначенияФильтра_ПрочееОприходованиеТоваров(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение указанное в складе'");
КонецПроцедуры

Процедура ЗначенияФильтра_РасходныйОрдерНаТовары(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение указанное в складе'");
КонецПроцедуры

Процедура ЗначенияФильтра_РасчетПроцентныхРасходовДисконтирования(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение указанное в складе'");
КонецПроцедуры

Процедура ЗначенияФильтра_СборкаТоваров(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение указанное в складе'");
КонецПроцедуры

Процедура ЗначенияФильтра_СписаниеНедостачТоваров(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение указанное в складе'");
КонецПроцедуры

Процедура ЗначенияФильтра_УстановкаБлокировокЯчеек(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение указанное в складе'");
КонецПроцедуры

Процедура ЗначенияФильтра_ИнвентаризационнаяОпись(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение указанное в складе'");
КонецПроцедуры

Процедура ЗначенияФильтра_УстановкаКвотАссортимента(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если ПроверитьНаличиеСвязаннойСсылки(Объект.ОбъектПланирования, ПараметрыЗапроса) Тогда
		
		ОбъектПланирования = Объект.ОбъектПланирования.ПолучитьОбъект();
		ПараметрыЗапроса   = ОпределитьПараметрыЗапросаОбъекта(ОбъектПланирования, ТипЗнч(ОбъектПланирования), ФормироватьИерархию);
		
		ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Объект планирования'");
		
	Иначе
		ПараметрыЗапроса.Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДокументыФинансы

Процедура ЗначенияФильтра_ВнесениеДенежныхСредствВКассуККМ(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "КассаККМ");
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение указанное в кассе ККМ'");
КонецПроцедуры

Процедура ЗначенияФильтра_ВыемкаДенежныхСредствИзКассыККМ(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "КассаККМ");
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение указанное в кассе ККМ'");
КонецПроцедуры

Процедура ЗначенияФильтра_ЗаявкаНаРасходованиеДенежныхСредств(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_ЛистКассовойКниги(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
	
КонецПроцедуры

Процедура ЗначенияФильтра_КорректировкаЗадолженностиПоФинансовымИнструментам(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_КассоваяСмена(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	Если ЗначениеЗаполнено(Объект.КассаККМ)Тогда
		ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "КассаККМ");
		ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение указанное в кассе ККМ'");
	Иначе
		ПараметрыЗапроса.Отказ = ФормироватьИерархию;
	КонецЕсли;
КонецПроцедуры

Процедура ЗначенияФильтра_ЛимитыРасходаДенежныхСредств(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЛимитыРасходаДенежныхСредствПоОрганизациям")
		И ПолучитьФункциональнуюОпцию("ИспользоватьЛимитыРасходаДенежныхСредствПоПодразделениям") Тогда
		
		ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ПолучитьФункциональнуюОпцию("ИспользоватьЛимитыРасходаДенежныхСредствПоОрганизациям") Тогда
		
		ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ПолучитьФункциональнуюОпцию("ИспользоватьЛимитыРасходаДенежныхСредствПоПодразделениям") Тогда
		
		ОтборПоПодразделениюОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗначенияФильтра_ОперацияПоПлатежнойКарте(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	ЕСТЬNULL(БанковскиеСчета.Подразделение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) КАК Подразделение
		|ИЗ
		|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчета
		|		ПО ЭквайринговыеТерминалы.Владелец.БанковскийСчет = БанковскиеСчета.Ссылка
		|ГДЕ
		|	ЭквайринговыеТерминалы.Ссылка = &Ссылка");
	
	Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
	Запрос.УстановитьПараметр("Ссылка", Объект.ЭквайринговыйТерминал);
	
	МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
	
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение указанное в банковском счете экварийрингого терминала'");
	ПараметрыЗапроса.Подразделения = МассивОбъектов;
	ПараметрыЗапроса.Организации   = СформироватьМассивОрганизаций(Объект.Организация);
	
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_ОтчетБанкаПоОперациямЭквайринга(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "ДоговорЭквайринга");
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение указанное в банковском счете'");
КонецПроцедуры

Процедура ЗначенияФильтра_ОжидаемоеПоступлениеДенежныхСредств(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если ЗначениеЗаполнено(Объект.БанковскийСчет)
		Или ЗначениеЗаполнено(Объект.Касса) Тогда
		
		Если ПроверитьНаличиеСвязаннойСсылки(Объект.БанковскийСчет, ПараметрыЗапроса) Тогда
			ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "БанковскийСчет");
			ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение указанное в банковском счете'");
			Возврат;
		ИначеЕсли ПроверитьНаличиеСвязаннойСсылки(Объект.Касса, ПараметрыЗапроса) Тогда
			ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Касса");
			ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение указанное в кассе'");
			Возврат;
		КонецЕсли;
		
	Иначе
		ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗначенияФильтра_ПоступлениеБезналичныхДенежныхСредств(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "БанковскийСчет");
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение указанное в банковском счете'");
КонецПроцедуры

Процедура ЗначенияФильтра_ПриходныйКассовыйОрдер(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Касса");
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение указанное в кассе'");
КонецПроцедуры

Процедура ЗначенияФильтра_РаспоряжениеНаПеремещениеДенежныхСредств(Объект, ПараметрыЗапроса, ФормироватьИерархию)

	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	БанковскиеСчетаОрганизаций.Подразделение КАК Подразделение
		|ИЗ
		|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
		|ГДЕ
		|	(БанковскиеСчетаОрганизаций.Ссылка = &БанковскийСчетПолучатель
		|			ИЛИ БанковскиеСчетаОрганизаций.Ссылка = &БанковскийСчет)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Кассы.Подразделение
		|ИЗ
		|	Справочник.Кассы КАК Кассы
		|ГДЕ
		|	(Кассы.Ссылка = &Касса
		|			ИЛИ Кассы.Ссылка = &КассаПолучатель)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РаспоряжениеНаПеремещениеДенежныхСредств.Подразделение
		|ИЗ
		|	Документ.РаспоряжениеНаПеремещениеДенежныхСредств КАК РаспоряжениеНаПеремещениеДенежныхСредств
		|ГДЕ
		|	РаспоряжениеНаПеремещениеДенежныхСредств.Ссылка = &Ссылка");
		
	Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
	
	Запрос.УстановитьПараметр("БанковскийСчет",           Объект.БанковскийСчет);
	Запрос.УстановитьПараметр("БанковскийСчетПолучатель", Объект.БанковскийСчетПолучатель);
	Запрос.УстановитьПараметр("Касса",                    Объект.Касса);
	Запрос.УстановитьПараметр("КассаПолучатель",          Объект.КассаПолучатель);
	Запрос.УстановитьПараметр("Ссылка",                   Объект.Ссылка);
	
	МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
	
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение указанное в банковском счете, кассе или документе'");
	ПараметрыЗапроса.Подразделения = МассивОбъектов;
	ПараметрыЗапроса.Организации   = СформироватьМассивОрганизаций(Объект.Организация);
	
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РасходныйКассовыйОрдер(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Касса");
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение указанное в кассе'");
КонецПроцедуры

Процедура ЗначенияФильтра_СписаниеБезналичныхДенежныхСредств(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "БанковскийСчет");
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение указанное в банковском счете'");
КонецПроцедуры

Процедура ЗначенияФильтра_УведомлениеОЗачисленииВалюты(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "БанковскийСчет");
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение указанное в банковском счете'");
КонецПроцедуры

Процедура ЗначенияФильтра_ЧекККМ(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "КассаККМ");
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение указанное в кассе ККМ'");
КонецПроцедуры

Процедура ЗначенияФильтра_ЧекККМВозврат(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "КассаККМ");
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение указанное в кассе ККМ'");
КонецПроцедуры

Процедура ЗначенияФильтра_ЧекККМКоррекции(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "КассаККМ");
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение указанное в кассе ККМ'");
КонецПроцедуры

Процедура ЗначенияФильтра_ОтражениеРасхожденийПриИнкассацииДенежныхСредств(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если ОбщегоНазначения.СсылкаСуществует(Объект.РасходныйКассовыйОрдер) Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
			|	Кассы.Подразделение КАК Подразделение
			|ИЗ
			|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Кассы КАК Кассы
			|		ПО РасходныйКассовыйОрдер.Касса = Кассы.Ссылка
			|ГДЕ
			|	РасходныйКассовыйОрдер.Ссылка = &Ссылка");
			
		Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
		
		Запрос.УстановитьПараметр("Ссылка", Объект.РасходныйКассовыйОрдер);
		
		МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
		
		ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
		
		ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение указанное в кассе расходно-кассового ордера'");
		ПараметрыЗапроса.Подразделения = МассивОбъектов;
		ПараметрыЗапроса.Организации   = СформироватьМассивОрганизаций(Объект.Организация);
		
		ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
		ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
		
	Иначе
		ПараметрыЗапроса.Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗначенияФильтра_ИнвентаризацияНаличныхДенежныхСредств(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	ИнвентаризацияНаличныхДенежныхСредств.Касса
		|ПОМЕСТИТЬ ТабличнаяЧастьКассы
		|ИЗ
		|	&ТабличнаяЧастьКассы КАК ИнвентаризацияНаличныхДенежныхСредств
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Кассы.Подразделение КАК Подразделение
		|ИЗ
		|	ТабличнаяЧастьКассы КАК ТабличнаяЧастьКассы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Кассы КАК Кассы
		|		ПО ТабличнаяЧастьКассы.Касса = Кассы.Ссылка");
		
	Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
	Запрос.УстановитьПараметр("ТабличнаяЧастьКассы", Объект.Кассы);
	
	МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
	
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение указанное в кассах табличной части'");
	ПараметрыЗапроса.Подразделения = МассивОбъектов;
	ПараметрыЗапроса.Организации   = СформироватьМассивОрганизаций(Объект.Организация);
	
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ГосИС

Процедура ЗначенияФильтра_ДокументыВЕТИСОдинХозяйствующийСубъект(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	РеквизитыХозСубъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ХозяйствующийСубъект, "СоответствуетОрганизации, Контрагент");
	Если РеквизитыХозСубъекта.СоответствуетОрганизации
		И ЗначениеЗаполнено(РеквизитыХозСубъекта.Контрагент) Тогда
		
		ПараметрыЗапроса.Организации = СформироватьМассивОрганизаций(РеквизитыХозСубъекта.Контрагент);
		ПараметрыЗапроса.ФильтрПоОрганизации = Истина;
	КонецЕсли;
	
	УстановитьФильтрПоПодразделениюТорговогоОбъектаВЕТИС(Объект, ПараметрыЗапроса, ФормироватьИерархию);
	
КонецПроцедуры

Процедура ЗначенияФильтра_ДокументыВЕТИСНесколькоХозяйствующихСубъектов(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	// Грузоотправитель.
	РеквизитыХозСубъектаГрузоотправитель = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ГрузоотправительХозяйствующийСубъект,
		"СоответствуетОрганизации, Контрагент");
	Если РеквизитыХозСубъектаГрузоотправитель.СоответствуетОрганизации
		И ЗначениеЗаполнено(РеквизитыХозСубъектаГрузоотправитель.Контрагент) Тогда
		
		ПараметрыЗапроса.ФильтрПоОрганизации = Истина;
		ПараметрыЗапроса.Организации = СформироватьМассивОрганизаций(РеквизитыХозСубъектаГрузоотправитель.Контрагент);
	КонецЕсли;
	
	// Грузополучатель.
	РеквизитыХозСубъектаГрузополучатель = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ГрузополучательХозяйствующийСубъект,
		"СоответствуетОрганизации, Контрагент");
	Если РеквизитыХозСубъектаГрузополучатель.СоответствуетОрганизации
		И ЗначениеЗаполнено(РеквизитыХозСубъектаГрузополучатель.Контрагент) Тогда
		
		Если ПараметрыЗапроса.ФильтрПоОрганизации Тогда
			ПараметрыЗапроса.Организации.Добавить(РеквизитыХозСубъектаГрузополучатель.Контрагент);
		Иначе
			ПараметрыЗапроса.Организации = СформироватьМассивОрганизаций(РеквизитыХозСубъектаГрузополучатель.Контрагент);
			ПараметрыЗапроса.ФильтрПоОрганизации = Истина;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьФильтрПоПодразделениюТорговогоОбъектаВЕТИС(Объект, ПараметрыЗапроса, ФормироватьИерархию);
	
КонецПроцедуры

Процедура ЗначенияФильтра_ОбъединениеЗаписейСкладскогоЖурналаВЕТИС(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	РеквизитыХозСубъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ХозяйствующийСубъект, "СоответствуетОрганизации, Контрагент");
	Если РеквизитыХозСубъекта.СоответствуетОрганизации
		И ЗначениеЗаполнено(РеквизитыХозСубъекта.Контрагент) Тогда
		
		ПараметрыЗапроса.Организации = СформироватьМассивОрганизаций(РеквизитыХозСубъекта.Контрагент);
		ПараметрыЗапроса.ФильтрПоОрганизации = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьФильтрПоПодразделениюТорговогоОбъектаВЕТИС(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если ЗначениеЗаполнено(Объект.ТорговыйОбъект)
		И ТипЗнч(Объект.ТорговыйОбъект) = Тип("СправочникСсылка.Склады") Тогда
		
		Подразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТорговыйОбъект, "Подразделение");
	
		Если ЗначениеЗаполнено(Подразделение) Тогда
			ПараметрыЗапроса.КонтрольПроведенияПоОдномуИзУсловий = Истина;
			ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение указанное в складе'");
			ПараметрыЗапроса.Подразделения                 = СформироватьИерархиюЭлементов(Подразделение, ФормироватьИерархию);
			ПараметрыЗапроса.ФильтрПоПодразделению         = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗначенияФильтра_ДокументыГосИСБезСклада(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
	
КонецПроцедуры

Процедура ЗначенияФильтра_ДокументыГосИССоСкладом(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение, указанное в складе'");
	
КонецПроцедуры

Процедура ЗначениеФильтра_ДокуменнтыГосИС_САТУРН(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	КонтрагентОрганизацииСАТУРН = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ОрганизацияСАТУРН, "Контрагент");
	Если ЗначениеЗаполнено(КонтрагентОрганизацииСАТУРН)
		И ТипЗнч(КонтрагентОрганизацииСАТУРН) = Тип("СправочникСсылка.Организации") Тогда
		
		ПараметрыЗапроса.Организации = СформироватьМассивОрганизаций(КонтрагентОрганизацииСАТУРН);
		ПараметрыЗапроса.ФильтрПоОрганизации = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗначениеФильтра_ДокуменнтыГосИС_НакладнаяСАТУРН(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	КонтрагентГрузоотправителяСАТУРН = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ГрузоотправительОрганизацияСАТУРН, "Контрагент");
	Если ЗначениеЗаполнено(КонтрагентГрузоотправителяСАТУРН)
		И ТипЗнч(КонтрагентГрузоотправителяСАТУРН) = Тип("СправочникСсылка.Организации") Тогда
		
		ПараметрыЗапроса.Организации = СформироватьМассивОрганизаций(КонтрагентГрузоотправителяСАТУРН);
		ПараметрыЗапроса.ФильтрПоОрганизации = Истина;
	КонецЕсли; 
	
	КонтрагентГрузополучателяСАТУРН = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ГрузополучательОрганизацияСАТУРН, "Контрагент");
	Если ЗначениеЗаполнено(КонтрагентГрузополучателяСАТУРН)
		И ТипЗнч(КонтрагентГрузополучателяСАТУРН) = Тип("СправочникСсылка.Организации") Тогда
		
		ПараметрыЗапроса.Организации = СформироватьМассивОрганизаций(КонтрагентГрузополучателяСАТУРН);
		ПараметрыЗапроса.ФильтрПоОрганизации = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РетроБонусы

Процедура ЗначениеФильтра_РетроБонусыКлиентовПоОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию)

	ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);

КонецПроцедуры

Процедура ЗначенияФильтра_РетроБонусыКлиентовПоДокументуУсловий(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если ПроверитьНаличиеСвязаннойСсылки(Объект.ДокументУсловий, ПараметрыЗапроса) Тогда 
		
		ДокументУсловий = Объект.ДокументУсловий.ПолучитьОбъект();
		ПараметрыЗапроса = ОпределитьПараметрыЗапросаОбъекта(ДокументУсловий, ТипЗнч(ДокументУсловий), ФормироватьИерархию); 
		
	КонецЕсли;
	
КонецПроцедуры 

Процедура ЗначениеФильтра_РетроБонусыКлиентовПоОрганизацииПодразделению(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
	Иначе
		ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти 

#Область РегистрыНакопления

#Область РегистрыЗаказов

Процедура ЗначенияФильтра_РегистрыНакопления_Заказы(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
	Иначе
		ПараметрыЗапроса = ОпределитьПараметрыЗапросаОбъекта(Объект.ЗаказКлиента.ПолучитьОбъект(),,ФормироватьИерархию);
	КонецЕсли;
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ЗаказыПоставщикам(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
	Иначе
		ПараметрыЗапроса = ОпределитьПараметрыЗапросаОбъекта(Объект.ЗаказПоставщику.ПолучитьОбъект(),,ФормироватьИерархию);
	КонецЕсли;
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_Распоряжения(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
	Иначе
		ПараметрыЗапроса = ОпределитьПараметрыЗапросаОбъекта(Объект.Распоряжение.ПолучитьОбъект(),,ФормироватьИерархию);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти

#Область РегистрыПрочие

Процедура ЗначенияФильтра_РегистрыНакопления_НДСАвансыВыданные(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_НДСАвансыПолученные(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_НДСЗаписиКнигиПокупок(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	Если ПроверитьНаличиеСвязаннойСсылки(Объект.СчетФактура, ПараметрыЗапроса) Тогда
		СчетФактура      = Объект.СчетФактура.ПолучитьОбъект();
		ПараметрыЗапроса = ОпределитьПараметрыЗапросаОбъекта(СчетФактура, ТипЗнч(СчетФактура), ФормироватьИерархию);
	Иначе
		ПараметрыЗапроса.Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_НДСЗаписиКнигиПродаж(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	Если ПроверитьНаличиеСвязаннойСсылки(Объект.СчетФактура, ПараметрыЗапроса) Тогда
		СчетФактура      = Объект.СчетФактура.ПолучитьОбъект();
		ПараметрыЗапроса = ОпределитьПараметрыЗапросаОбъекта(СчетФактура, ТипЗнч(СчетФактура), ФормироватьИерархию);
	Иначе
		ПараметрыЗапроса.Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_НДСПредъявленный(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	Если ПроверитьНаличиеСвязаннойСсылки(Объект.СчетФактура, ПараметрыЗапроса) Тогда
		СчетФактура      = Объект.СчетФактура.ПолучитьОбъект();
		ПараметрыЗапроса = ОпределитьПараметрыЗапросаОбъекта(СчетФактура, ТипЗнч(СчетФактура), ФормироватьИерархию);
	Иначе
		ПараметрыЗапроса.Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ПартииЗатратНаВыпуск(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюАналитикиУчетаНоменклатурыИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ПартииНДСКРаспределению(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ПартииПроизводственныхЗатрат(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюАналитикиУчетаНоменклатурыИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ПартииПрочихРасходов(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ПартииРасходовНаСебестоимостьТоваров(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПараметрыЗапроса.Подразделения = СформироватьИерархиюЭлементов(Объект.ПодразделениеРасходов, ФормироватьИерархию);
	ПараметрыЗапроса.Организации   = СформироватьМассивОрганизаций(Объект.Организация);
	
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ПартииТоваровОрганизаций(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	//Если запись регистра не первичная и это периферийный узел то не регистрируем изменения
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено И Не Объект.Первичное Тогда
		ПараметрыЗапроса.Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ОтборПоПодразделениюАналитикиУчетаНоменклатурыИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ПартииТоваровПереданныеНаКомиссию(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюАналитикиУчетаНоменклатурыИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_МатериалыИРаботыВПроизводстве(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюАналитикиУчетаНоменклатурыИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ПрочиеДоходы(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ПрочиеРасходы(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_СебестоимостьТоваров(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ТипСкладаАналитикиУчетаНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.АналитикаУчетаНоменклатуры, "МестоХранения");
	
	Если ТипЗнч(ТипСкладаАналитикиУчетаНоменклатуры) = Тип("СправочникСсылка.Склады") Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Склады.Подразделение КАК Подразделение
			|ИЗ
			|	РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
			|		ПО АналитикаУчетаНоменклатуры.МестоХранения = Склады.Ссылка
			|ГДЕ
			|	АналитикаУчетаНоменклатуры.КлючАналитики = &КлючАналитики");

		Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
		Запрос.УстановитьПараметр("КлючАналитики", Объект.АналитикаУчетаНоменклатуры);
		
		МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
		ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
		
		ПараметрыЗапроса.Подразделения         = МассивОбъектов;
		ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
		
	ИначеЕсли ТипЗнч(ТипСкладаАналитикиУчетаНоменклатуры) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		
		ПараметрыЗапроса.Подразделения         = СформироватьИерархиюЭлементов(
			ТипСкладаАналитикиУчетаНоменклатуры, ФормироватьИерархию);
		ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
		
	КонецЕсли;
	
	МассивОрганизаций = Новый Массив;
	МассивОрганизаций.Добавить(Объект.Организация);
	
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОрганизаций);
	
	ПараметрыЗапроса.Организации         = МассивОрганизаций;
	ПараметрыЗапроса.ФильтрПоОрганизации = Истина;

КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ТоварыОрганизаций(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	СкладАналитикиУчетаНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.АналитикаУчетаНоменклатуры, "МестоХранения");
	
	Если ТипЗнч(СкладАналитикиУчетаНоменклатуры) = Тип("СправочникСсылка.Склады") Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Склады.Подразделение КАК Подразделение
			|ИЗ
			|	РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
			|		ПО АналитикаУчетаНоменклатуры.МестоХранения = Склады.Ссылка
			|ГДЕ
			|	АналитикаУчетаНоменклатуры.КлючАналитики = &КлючАналитики");

		Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
		Запрос.УстановитьПараметр("КлючАналитики", Объект.АналитикаУчетаНоменклатуры);
		
		МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
		ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
		
		ПараметрыЗапроса.Подразделения         = МассивОбъектов;
		ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
		
	ИначеЕсли ТипЗнч(СкладАналитикиУчетаНоменклатуры) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		
		ПараметрыЗапроса.Подразделения         = СформироватьИерархиюЭлементов(
			СкладАналитикиУчетаНоменклатуры, ФормироватьИерархию);
		ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
		
	КонецЕсли;
	
	МассивОрганизаций = Новый Массив;
	МассивОрганизаций.Добавить(Объект.Организация);
	МассивОрганизаций.Добавить(Объект.ОрганизацияОтгрузки);
	
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОрганизаций);
	
	ПараметрыЗапроса.Организации         = МассивОрганизаций;
	ПараметрыЗапроса.ФильтрПоОрганизации = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ТоварыОрганизацийКОформлению(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюАналитикиУчетаНоменклатурыИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ТоварыОрганизацийКПередаче(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	СкладАналитикиУчетаНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.АналитикаУчетаНоменклатуры, "МестоХранения");
	
	Если ТипЗнч(СкладАналитикиУчетаНоменклатуры) = Тип("СправочникСсылка.Склады") Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Склады.Подразделение КАК Подразделение
			|ИЗ
			|	РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
			|		ПО АналитикаУчетаНоменклатуры.МестоХранения = Склады.Ссылка
			|ГДЕ
			|	АналитикаУчетаНоменклатуры.КлючАналитики = &КлючАналитики");
		
		Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
		Запрос.УстановитьПараметр("КлючАналитики", Объект.АналитикаУчетаНоменклатуры);
		
		МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
		ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
		
		ПараметрыЗапроса.Подразделения         = МассивОбъектов;
		ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
		
	ИначеЕсли ТипЗнч(СкладАналитикиУчетаНоменклатуры) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		
		ПараметрыЗапроса.Подразделения         = СформироватьИерархиюЭлементов(
			СкладАналитикиУчетаНоменклатуры, ФормироватьИерархию);
		ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
		
	КонецЕсли;
	
	ПараметрыЗапроса.Организации         = СформироватьМассивОрганизаций(Объект.ОрганизацияВладелец);
	ПараметрыЗапроса.ФильтрПоОрганизации = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ТоварыПереданныеНаКомиссию(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюАналитикиУчетаНоменклатурыИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ЗаявкиНаВозвратТоваровОтКлиентов(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Склады.Подразделение КАК Подразделение
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаявкаНаВозвратТоваровОтКлиента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
		|		ПО ЗаявкаНаВозвратТоваровОтКлиента.Склад = Склады.Ссылка
		|ГДЕ
		|	ЗаявкаНаВозвратТоваровОтКлиента.Ссылка = &Ссылка");
	
	Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
	Запрос.УстановитьПараметр("Ссылка", Объект.ЗаявкаНаВозвратТоваровОтКлиента);
	
	МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
	
	ПараметрыЗапроса.Подразделения = МассивОбъектов;
	ПараметрыЗапроса.Организации   = СформироватьМассивОрганизаций(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ЗаявкаНаВозвратТоваровОтКлиента, "Организация"));
	
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ПрослеживаемыеТоварыОтгруженныеВЕАЭС(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_КорректировкиПлановыхПотребностей(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	Если ПроверитьНаличиеСвязаннойСсылки(Объект.План, ПараметрыЗапроса) Тогда
		ПараметрыЗапроса = ОпределитьПараметрыЗапросаОбъекта(Объект.План.ПолучитьОбъект(),,ФормироватьИерархию);
	КонецЕсли;
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ПрочаяВыручка(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ПрочиеАктивыПассивы(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ДетализацияПартийТоваровДляНДСиУСН(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ТоварыУслугиКОформлениюОтчетовКомитентуОЗакупках(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

#КонецОбласти

#Область РегистрыСклад

Процедура ЗначенияФильтра_РегистрыНакопления_ДвиженияСерийТоваров(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если ТипЗнч(Объект.Отправитель) = Тип("СправочникСсылка.Склады") 
		И ТипЗнч(Объект.Получатель) = Тип("СправочникСсылка.Склады") Тогда
		
		МассивОтправителя = СформироватьИерархиюЭлементов(
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Отправитель, "Подразделение"), ФормироватьИерархию);
		МассивПолучателя  = СформироватьИерархиюЭлементов(
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Получатель, "Подразделение"), ФормироватьИерархию);
			
		ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
		ПараметрыЗапроса.Подразделения = ОбъединитьМассивы(МассивОтправителя, МассивПолучателя);
		
	ИначеЕсли ТипЗнч(Объект.Отправитель) = Тип("СправочникСсылка.Склады") Тогда
		ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Отправитель");
	ИначеЕсли ТипЗнч(Объект.Получатель) = Тип("СправочникСсылка.Склады") Тогда
		ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Получатель");
	Иначе
		ПараметрыЗапроса.Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ЗаказыНаПеремещение(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Склады.Подразделение КАК Подразделение
		|ИЗ
		|	Документ.ЗаказНаПеремещение КАК ЗаказНаПеремещение
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
		|		ПО (ЗаказНаПеремещение.СкладОтправитель = Склады.Ссылка
		|				ИЛИ ЗаказНаПеремещение.СкладПолучатель = Склады.Ссылка)
		|ГДЕ
		|	ЗаказНаПеремещение.Ссылка = &Ссылка");
		
	Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
	Запрос.УстановитьПараметр("Ссылка", Объект.ЗаказНаПеремещение);
	
	МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
	ПараметрыЗапроса.Подразделения = МассивОбъектов;
	
	МассивОрганизаций = Новый Массив;
	МассивОрганизаций.Добавить(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ЗаказНаПеремещение, "Организация"));
	МассивОрганизаций.Добавить(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ЗаказНаПеремещение, "ОрганизацияПолучатель"));
	
	ПараметрыЗапроса.Организации = МассивОрганизаций;
	
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ЗаказыНаСборку(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Склады.Подразделение КАК Подразделение
		|ИЗ
		|	Документ.ЗаказНаСборку КАК ДокументРаспоряжение
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
		|		ПО ДокументРаспоряжение.Склад = Склады.Ссылка
		|ГДЕ
		|	ДокументРаспоряжение.Ссылка = &Ссылка");
		
	Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
	Запрос.УстановитьПараметр("Ссылка", Объект.ЗаказНаСборку);
	
	МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
	
	ПараметрыЗапроса.Подразделения         = МассивОбъектов;
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ЗапасыИПотребности(Объект, ПараметрыЗапроса, ФормироватьИерархию) 
	
	ОтборПоРегистраторуНабораЗаписей(Объект, ПараметрыЗапроса, ФормироватьИерархию);
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ПереданнаяВозвратнаяТара(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Склады.Подразделение КАК Подразделение
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
		|		ПО РеализацияТоваровУслугТовары.Склад = Склады.Ссылка
		|ГДЕ
		|	РеализацияТоваровУслугТовары.Ссылка = &Ссылка");
		
	Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
	Запрос.УстановитьПараметр("Ссылка", Объект.ДокументПередачи);
	
	МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
	
	ПараметрыЗапроса.Подразделения = МассивОбъектов;
	ПараметрыЗапроса.Организации   = СформироватьМассивОрганизаций(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументПередачи, "Организация"));
	
	ПараметрыЗапроса.ФильтрПоПодразделению = МассивОбъектов.Количество() > 0;
	ПараметрыЗапроса.ФильтрПоОрганизации   = ЗначениеЗаполнено(Объект.ДокументПередачи);
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ПланыВнутреннихПотреблений(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ПланыЗакупок(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ПланыОстатков(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ПланыПотребленияКомплектующих(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ПланыПродаж(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ПланыПродажПоКатегориям(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ПараметрыЗапроса = ОпределитьПараметрыЗапросаОбъекта(Объект.ПланПродажПоКатегориям,,ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ПланыСборкиРазборки(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ПринятаяВозвратнаяТара(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Склады.Подразделение КАК Подразделение
		|ИЗ
		|	Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслугТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
		|		ПО ПриобретениеТоваровУслугТовары.Склад = Склады.Ссылка
		|ГДЕ
		|	ПриобретениеТоваровУслугТовары.Ссылка = &Ссылка
		|	И ПриобретениеТоваровУслугТовары.Номенклатура = &Номенклатура
		|	И ПриобретениеТоваровУслугТовары.Характеристика = &Характеристика");
	
	Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
	Запрос.УстановитьПараметр("Ссылка",         Объект.ДокументПоступления);
	Запрос.УстановитьПараметр("Номенклатура",   Объект.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Объект.Характеристика);
	
	МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
	
	ПараметрыЗапроса.Подразделения = МассивОбъектов;
	ПараметрыЗапроса.Организации   = СформироватьМассивОрганизаций(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументПоступления, "Организация"));
	
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ТоварыВЯчейках(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Склады.Подразделение
		|ИЗ
		|	Справочник.СкладскиеЯчейки КАК СкладскиеЯчейки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
		|		ПО СкладскиеЯчейки.Владелец = Склады.Ссылка
		|ГДЕ
		|	СкладскиеЯчейки.Ссылка = &Ссылка");
		
		
	Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ячейка);
	
	МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
	
	ПараметрыЗапроса.Подразделения         = МассивОбъектов;
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ТоварыКОтбору(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Склады.Подразделение КАК Подразделение
		|ИЗ
		|	Документ.%ВидДокумента% КАК ДокументРаспоряжение
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
		|		ПО ДокументРаспоряжение.Склад = Склады.Ссылка
		|ГДЕ
		|	ДокументРаспоряжение.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Распоряжение);
	
	Если ТипЗнч(Объект.Распоряжение) = Тип("ДокументСсылка.ОрдерНаПеремещениеТоваров") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ВидДокумента%", "ОрдерНаПеремещениеТоваров");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ВидДокумента%", "РасходныйОрдерНаТовары");
	КонецЕсли;
	
	Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
	
	МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
	
	ПараметрыЗапроса.Подразделения = МассивОбъектов;
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ТоварыКОтгрузке(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ТоварыКОформлениюИзлишковНедостач(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ТоварыКОформлениюОтчетовКомитенту(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	СкладАналитикиУчетаНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.АналитикаУчетаНоменклатуры, "МестоХранения");
	
	Если ТипЗнч(СкладАналитикиУчетаНоменклатуры) = Тип("СправочникСсылка.Склады") Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Склады.Подразделение КАК Подразделение
			|ИЗ
			|	РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
			|		ПО АналитикаУчетаНоменклатуры.МестоХранения = Склады.Ссылка
			|ГДЕ
			|	АналитикаУчетаНоменклатуры.КлючАналитики = &КлючАналитики");
		
		Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
		Запрос.УстановитьПараметр("КлючАналитики", Объект.АналитикаУчетаНоменклатуры);
		
		МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
		ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
		
		ПараметрыЗапроса.Подразделения = МассивОбъектов;
		ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
		
	ИначеЕсли ТипЗнч(СкладАналитикиУчетаНоменклатуры) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		
		ПараметрыЗапроса.Подразделения = СформироватьИерархиюЭлементов(
			СкладАналитикиУчетаНоменклатуры, ФормироватьИерархию);
		ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
		
	КонецЕсли;
	
	ПараметрыЗапроса.Организации = СформироватьМассивОрганизаций(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидЗапасов, "Организация"));
	ПараметрыЗапроса.ФильтрПоОрганизации = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_УслугиКОформлениюОтчетовПринципалу(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюАналитикиУчетаНоменклатурыИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ТоварыКПоступлению(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ТоварныеМестаКОтражениюИзлишковНедостач(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ТоварыНаСкладах(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры

#КонецОбласти 

#Область РегистрыФинансы

Процедура ЗначенияФильтра_РегистрыНакопления_ВыручкаИСебестоимостьПродаж(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПараметрыЗапроса.Подразделения = СформироватьИерархиюЭлементов(Объект.Подразделение, ФормироватьИерархию);
	ПараметрыЗапроса.Организации   = СформироватьМассивОрганизаций(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.АналитикаУчетаПоПартнерам, "Организация"));
	
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ДвиженияДенежныхСредств(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА НастройкиХозяйственныхОпераций.Расход = ЗНАЧЕНИЕ(Перечисление.ТипыДанныхУчета.ДенежныеСредства)
		|			ТОГДА &ДенежныеСредства
		|		ИНАЧЕ &КорДенежныеСредства
		|	КОНЕЦ КАК ДенежныеСредства
		|ПОМЕСТИТЬ ТаблицаДенежныхСредств
		|ИЗ
		|	Справочник.НастройкиХозяйственныхОпераций КАК НастройкиХозяйственныхОпераций
		|ГДЕ
		|	НастройкиХозяйственныхОпераций.ХозяйственнаяОперация = &ХозОперация
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДенежныеСредства
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаДенежныхСредств.ДенежныеСредства) = ТИП(Справочник.ФизическиеЛица)
		|				ИЛИ ТИПЗНАЧЕНИЯ(ТаблицаДенежныхСредств.ДенежныеСредства) = ТИП(Справочник.Контрагенты)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаДенежныхСредств.ДенежныеСредства) = ТИП(Справочник.ЭквайринговыеТерминалы)
		|			ТОГДА ЭквайринговыеТерминалы.Подразделение
		|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаДенежныхСредств.ДенежныеСредства) = ТИП(Справочник.КассыККМ)
		|			ТОГДА КассыККМ.Подразделение
		|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаДенежныхСредств.ДенежныеСредства) = ТИП(Справочник.ДоговорыКредитовИДепозитов)
		|			ТОГДА ДоговорыКредитовИДепозитов.Подразделение
		|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаДенежныхСредств.ДенежныеСредства) = ТИП(Справочник.ДоговорыЭквайринга)
		|			ТОГДА ДоговорыЭквайринга.Подразделение
		|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаДенежныхСредств.ДенежныеСредства) = ТИП(Справочник.БанковскиеСчетаОрганизаций)
		|			ТОГДА БанковскиеСчетаОрганизаций.Подразделение
		|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаДенежныхСредств.ДенежныеСредства) = ТИП(Справочник.Кассы)
		|			ТОГДА Кассы.Подразделение
		|	КОНЕЦ КАК Подразделение
		|ИЗ
		|	ТаблицаДенежныхСредств КАК ТаблицаДенежныхСредств
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			БанковскиеСчетаОрганизаций.Подразделение КАК Подразделение,
		|			ЭквайринговыеТерминалы.Ссылка КАК Ссылка
		|		ИЗ
		|			Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
		|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
		|				ПО ЭквайринговыеТерминалы.Владелец.БанковскийСчет = БанковскиеСчетаОрганизаций.Ссылка) КАК ЭквайринговыеТерминалы
		|		ПО ТаблицаДенежныхСредств.ДенежныеСредства = ЭквайринговыеТерминалы.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
		|		ПО ТаблицаДенежныхСредств.ДенежныеСредства = БанковскиеСчетаОрганизаций.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Кассы КАК Кассы
		|		ПО ТаблицаДенежныхСредств.ДенежныеСредства = Кассы.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КассыККМ КАК КассыККМ
		|		ПО ТаблицаДенежныхСредств.ДенежныеСредства = КассыККМ.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКредитовИДепозитов КАК ДоговорыКредитовИДепозитов
		|		ПО ТаблицаДенежныхСредств.ДенежныеСредства = ДоговорыКредитовИДепозитов.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыЭквайринга КАК ДоговорыЭквайринга
		|		ПО ТаблицаДенежныхСредств.ДенежныеСредства = ДоговорыЭквайринга.Ссылка");
		
	Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
	
	Запрос.УстановитьПараметр("ДенежныеСредства",    Объект.ДенежныеСредства);
	Запрос.УстановитьПараметр("КорДенежныеСредства", Объект.КорДенежныеСредства);
	Запрос.УстановитьПараметр("ХозОперация",         Объект.ХозяйственнаяОперация);
	
	МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
	МассивОбъектовСИерархией = Новый Массив;
	Для Каждого Подразделение Из МассивОбъектов Цикл
		 ИерархияОбъектов = СформироватьИерархиюЭлементов(Подразделение, Истина);
		 Для Каждого ПодразделениеИехархия ИЗ ИерархияОбъектов Цикл
			 МассивОбъектовСИерархией.Добавить(ПодразделениеИехархия);
		 КонецЦикла;
	КонецЦикла;
	ПараметрыЗапроса.Подразделения = МассивОбъектовСИерархией;
	
	ПараметрыЗапроса.Организации = СформироватьМассивОрганизаций(Объект.Организация);
		
	ПараметрыЗапроса.ФильтрПоПодразделению = МассивОбъектовСИерархией.Количество() > 0;
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ДвиженияДенежныеСредстваДоходыРасходы(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ПараметрыФильтровДвиженияДенежныхСредств(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ДвиженияДенежныеСредстваКонтрагент(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ПараметрыФильтровДвиженияДенежныхСредств(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ПараметрыФильтровДвиженияДенежныхСредств(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПараметрыЗапросаИзРегистратора = Ложь;
	
	Если ТипЗнч(Объект.ДенежныеСредства) = Тип("СправочникСсылка.ФизическиеЛица")
		ИЛИ ТипЗнч(Объект.ДенежныеСредства) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		МассивОбъектов = Новый Массив();
		
	ИначеЕсли ТипЗнч(Объект.ДенежныеСредства) = Тип("СправочникСсылка.ЭквайринговыеТерминалы") Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
			|	БанковскиеСчетаОрганизаций.Подразделение КАК Подразделение
			|ИЗ
			|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
			|		ПО ЭквайринговыеТерминалы.Владелец.БанковскийСчет = БанковскиеСчетаОрганизаций.Ссылка
			|ГДЕ
			|	ЭквайринговыеТерминалы.Ссылка = &Ссылка");
			
		Запрос.УстановитьПараметр("Ссылка", Объект.ДенежныеСредства);
		Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
		
		МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
		ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
		
		ПараметрыЗапроса.Подразделения = МассивОбъектов;
		
	Иначе
		
		Если ЗначениеЗаполнено(Объект.ДенежныеСредства) Тогда
			
			ПодразделениеОбъекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДенежныеСредства, "Подразделение");
			МассивОбъектов = СформироватьИерархиюЭлементов(ПодразделениеОбъекта, ФормироватьИерархию);
			
			ПараметрыЗапроса.Подразделения = МассивОбъектов;
			
		Иначе
			ПараметрыЗапросаИзРегистратора = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыЗапросаИзРегистратора Тогда
		
		ОтборПоРегистраторуНабораЗаписей(Объект, ПараметрыЗапроса, ФормироватьИерархию);
		
	Иначе
		
		ПараметрыЗапроса.Организации           = СформироватьМассивОрганизаций(Объект.Организация);
		
		ПараметрыЗапроса.ФильтрПоПодразделению = МассивОбъектов.Количество() > 0;
		ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ДвиженияДоходыРасходыПрочиеАктивыПассивы(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ДвиженияКонтрагентДоходыРасходы(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ДвиженияКонтрагентКонтрагент(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ДвиженияНоменклатураДоходыРасходы(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ДвиженияПоНДС(Объект, ПараметрыЗапроса, ФормироватьИерархию);
	ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ДвиженияПоПрочимАктивамПассивам(Объект, ПараметрыЗапроса, ФормироватьИерархию);
	ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_Закупки(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если ТипЗнч(Объект.Склад) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		
		ПараметрыЗапроса.Подразделения = СформироватьИерархиюЭлементов(Объект.Склад, ФормироватьИерархию);
		ПараметрыЗапроса.Организации   = СформироватьМассивОрганизаций(Объект.Организация);
		
		ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
		ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
		
	ИначеЕсли ТипЗнч(Объект.Склад) = Тип("СправочникСсылка.Склады") Тогда
		ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
	Иначе
		ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ДвиженияНоменклатураНоменклатура(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если ТипЗнч(Объект.Склад) = Тип("СправочникСсылка.СтруктураПредприятия")
		Или ТипЗнч(Объект.КорСклад) = Тип("СправочникСсылка.СтруктураПредприятия")
		Или ТипЗнч(Объект.Склад) = Тип("СправочникСсылка.Склады")
		Или ТипЗнч(Объект.КорСклад) = Тип("СправочникСсылка.Склады") Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВыбранноеПодразделение.%ЗначениеРеквизита% КАК Подразделение
			|ИЗ
			|	Справочник.%ВидСправочника% КАК ВыбранноеПодразделение
			|ГДЕ
			|	ВыбранноеПодразделение.Ссылка = &Склад
			|	ИЛИ ВыбранноеПодразделение.Ссылка = &КорСклад");
			
		Если ТипЗнч(Объект.Склад) = Тип("СправочникСсылка.СтруктураПредприятия")
			Или ТипЗнч(Объект.КорСклад) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ЗначениеРеквизита%", "Ссылка");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ВидСправочника%",    "СтруктураПредприятия");
			
		ИначеЕсли ТипЗнч(Объект.Склад) = Тип("СправочникСсылка.Склады")
			Или ТипЗнч(Объект.КорСклад) = Тип("СправочникСсылка.Склады") Тогда
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ЗначениеРеквизита%", "Подразделение");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ВидСправочника%",    "Склады");
			
		КонецЕсли;
		
		Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
		
		Запрос.УстановитьПараметр("Склад",    Объект.Склад);
		Запрос.УстановитьПараметр("КорСклад", Объект.КорСклад);
		
		МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
		ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
		
		ПараметрыЗапроса.Подразделения = МассивОбъектов;
		
	Иначе
		
		ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
		
	КонецЕсли;
	
	ПараметрыЗапроса.Организации = СформироватьМассивОрганизаций(Объект.Организация);
	
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ДенежныеСредстваБезналичные(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПараметрыЗапроса.Подразделения = СформироватьИерархиюЭлементов(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БанковскийСчет, "Подразделение"), ФормироватьИерархию);
		
	ПараметрыЗапроса.Организации = СформироватьМассивОрганизаций(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БанковскийСчет, "Владелец"));
	
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ДенежныеСредстваНаличные(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Касса");
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ДенежныеСредстваВКассахККМ(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПараметрыЗапроса.Подразделения = СформироватьИерархиюЭлементов(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КассаККМ, "Подразделение"), ФормироватьИерархию);
		
	ПараметрыЗапроса.Организации = СформироватьМассивОрганизаций(Объект.Организация);
	
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ДенежныеСредстваКВыплате(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если ЗначениеЗаполнено(Объект.БанковскийСчетКасса) И ЗначениеЗаполнено(Объект.Организация) Тогда
		ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "БанковскийСчетКасса");
		ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение указанное в банковском счете'");
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ТаблицаДокумента.Организация
			|ИЗ
			|	Документ.РаспоряжениеНаПеремещениеДенежныхСредств КАК ТаблицаДокумента
			|ГДЕ
			|	ТаблицаДокумента.Ссылка = &Ссылка" + ";" + Символы.ПС;
		
		Если ТипЗнч(Объект.ЗаявкаНаРасходованиеДенежныхСредств) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "РаспоряжениеНаПеремещениеДенежныхСредств", "ЗаявкаНаРасходованиеДенежныхСредств");
			Запрос.Текст = Запрос.Текст + "
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	Пользователи.Подразделение КАК Подразделение
				|ИЗ
				|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
				|		ПО ЗаявкаНаРасходованиеДенежныхСредств.КтоЗаявил = Пользователи.Ссылка
				|ГДЕ
				|	ЗаявкаНаРасходованиеДенежныхСредств.Ссылка = &Ссылка";
		Иначе
			Запрос.Текст = Запрос.Текст + "
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	Кассы.Подразделение КАК Подразделение
				|ИЗ
				|	Документ.РаспоряжениеНаПеремещениеДенежныхСредств КАК РаспоряжениеНаПеремещениеДенежныхСредств
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Кассы КАК Кассы
				|		ПО РаспоряжениеНаПеремещениеДенежныхСредств.Касса = Кассы.Ссылка
				|ГДЕ
				|	РаспоряжениеНаПеремещениеДенежныхСредств.Ссылка = &Ссылка
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	БанковскиеСчетаОрганизаций.Подразделение
				|ИЗ
				|	Документ.РаспоряжениеНаПеремещениеДенежныхСредств КАК РаспоряжениеНаПеремещениеДенежныхСредств
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
				|		ПО РаспоряжениеНаПеремещениеДенежныхСредств.БанковскийСчет = БанковскиеСчетаОрганизаций.Ссылка
				|ГДЕ
				|	РаспоряжениеНаПеремещениеДенежныхСредств.Ссылка = &Ссылка";
		КонецЕсли;
		
		ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
		Запрос.УстановитьПараметр("Ссылка", Объект.ЗаявкаНаРасходованиеДенежныхСредств);
		Результат = Запрос.ВыполнитьПакет();
		
		МассивОбъектов = Результат[1].Выгрузить().ВыгрузитьКолонку("Подразделение");
		ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
		ПараметрыЗапроса.Подразделения = МассивОбъектов;
		
		Организации = Результат[0].Выгрузить().ВыгрузитьКолонку("Организация");
		ОчиститьПустыеСсылкиИзМассиваОбъектов(Организации);
		ПараметрыЗапроса.Организации = Организации;
		
	КонецЕсли;
	
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ДенежныеСредстваВПути(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	МассивПодразделенийОтправителя = Новый Массив();
	МассивПодразделенийПолучателя  = Новый Массив();
	
	Если ЗначениеЗаполнено(Объект.Отправитель) Тогда
		МассивПодразделенийОтправителя = СформироватьИерархиюЭлементов(
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Отправитель, "Подразделение"), ФормироватьИерархию);
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Объект.Получатель) Тогда
		МассивПодразделенийПолучателя = СформироватьИерархиюЭлементов(
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Получатель, "Подразделение"), ФормироватьИерархию);
	КонецЕсли;
		
	ПараметрыЗапроса.Подразделения = ОбъединитьМассивы(МассивПодразделенийОтправителя, МассивПодразделенийПолучателя);
	ПараметрыЗапроса.Организации   = СформироватьМассивОрганизаций(Объект.Организация);
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ДенежныеСредстваУПодотчетныхЛиц(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ЛимитыРасходаДенежныхСредств(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЛимитыРасходаДенежныхСредствПоОрганизациям")
		И ПолучитьФункциональнуюОпцию("ИспользоватьЛимитыРасходаДенежныхСредствПоПодразделениям") Тогда
		
		ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ПолучитьФункциональнуюОпцию("ИспользоватьЛимитыРасходаДенежныхСредствПоОрганизациям") Тогда
		
		ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ПолучитьФункциональнуюОпцию("ИспользоватьЛимитыРасходаДенежныхСредствПоПодразделениям") Тогда
		
		ОтборПоПодразделениюОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ПланыОплатКлиентов(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если ПроверитьНаличиеСвязаннойСсылки(Объект.План, ПараметрыЗапроса) Тогда
		ПараметрыЗапроса = ОпределитьПараметрыЗапросаОбъекта(Объект.План.ПолучитьОбъект(),,ФормироватьИерархию);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ПланыОплатПоставщикам(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если ПроверитьНаличиеСвязаннойСсылки(Объект.План, ПараметрыЗапроса) Тогда
		ПараметрыЗапроса = ОпределитьПараметрыЗапросаОбъекта(Объект.План.ПолучитьОбъект(),,ФормироватьИерархию);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_РасчетыПоФинансовымИнструментам(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПараметрыЗапроса.Подразделения = СформироватьИерархиюЭлементов(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Договор, "Подразделение"), ФормироватьИерархию);
		
	ПараметрыЗапроса.Организации = СформироватьМассивОрганизаций(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.АналитикаУчетаПоПартнерам, "Организация"));
	
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_РасчетыПоЭквайрингу(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	БанковскиеСчета.Подразделение КАК Подразделение
		|ИЗ
		|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчета
		|		ПО ЭквайринговыеТерминалы.Владелец.БанковскийСчет = БанковскиеСчета.Ссылка
		|ГДЕ
		|	ЭквайринговыеТерминалы.Ссылка = &Ссылка");
		
	Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
	Запрос.УстановитьПараметр("Ссылка", Объект.ЭквайринговыйТерминал);
	
	МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
	
	ПараметрыЗапроса.Подразделения = МассивОбъектов;
	ПараметрыЗапроса.Организации   = СформироватьМассивОрганизаций(Объект.Организация);
	
	ПараметрыЗапроса.ФильтрПоПодразделению = МассивОбъектов.Количество() > 0;
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_РасчетыСКлиентами(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если ЗначениеЗаполнено(Объект.ОбъектРасчетов)
		И ОбщегоНазначения.СсылкаСуществует(Объект.ОбъектРасчетов) Тогда 
		
		ПараметрыЗапроса = ОпределитьПараметрыЗапросаОбъекта(Объект.ОбъектРасчетов.ПолучитьОбъект(),,ФормироватьИерархию);
		
	ИначеЕсли ЗначениеЗаполнено(Объект.АналитикаУчетаПоПартнерам)
		И ОбщегоНазначения.СсылкаСуществует(Объект.АналитикаУчетаПоПартнерам) Тогда 
		
		ПараметрыЗапроса.Организации = СформироватьМассивОрганизаций(
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.АналитикаУчетаПоПартнерам, "Организация"));
		ПараметрыЗапроса.ФильтрПоОрганизации = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_РасчетыСКлиентамиПоДокументам(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если ЗначениеЗаполнено(Объект.ЗаказКлиента)
		И ОбщегоНазначения.СсылкаСуществует(Объект.ЗаказКлиента) Тогда 
		
		ПараметрыЗапроса = ОпределитьПараметрыЗапросаОбъекта(Объект.ЗаказКлиента.ПолучитьОбъект(),,ФормироватьИерархию);
		
	ИначеЕсли ЗначениеЗаполнено(Объект.АналитикаУчетаПоПартнерам)
		И ОбщегоНазначения.СсылкаСуществует(Объект.АналитикаУчетаПоПартнерам) Тогда 
		
		ПараметрыЗапроса.Организации = СформироватьМассивОрганизаций(
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.АналитикаУчетаПоПартнерам, "Организация"));
		ПараметрыЗапроса.ФильтрПоОрганизации = Истина;
		
	КонецЕсли;
	
КонецПроцедуры


Процедура ЗначенияФильтра_РегистрыНакопления_РасчетыСПоставщиками(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если ЗначениеЗаполнено(Объект.ОбъектРасчетов)
		И ОбщегоНазначения.СсылкаСуществует(Объект.ОбъектРасчетов) Тогда 
		
		ПараметрыЗапроса = ОпределитьПараметрыЗапросаОбъекта(Объект.ОбъектРасчетов.ПолучитьОбъект(),,ФормироватьИерархию);
		
	ИначеЕсли ЗначениеЗаполнено(Объект.АналитикаУчетаПоПартнерам)
		И ОбщегоНазначения.СсылкаСуществует(Объект.АналитикаУчетаПоПартнерам) Тогда 
		
		ПараметрыЗапроса.Организации = СформироватьМассивОрганизаций(
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.АналитикаУчетаПоПартнерам, "Организация"));
		ПараметрыЗапроса.ФильтрПоОрганизации = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_РасчетыСПоставщикамиПоДокументам(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если ЗначениеЗаполнено(Объект.ЗаказПоставщику)
		И ОбщегоНазначения.СсылкаСуществует(Объект.ЗаказПоставщику) Тогда 
		
		ПараметрыЗапроса = ОпределитьПараметрыЗапросаОбъекта(Объект.ЗаказПоставщику.ПолучитьОбъект(),,ФормироватьИерархию);
		
	ИначеЕсли ЗначениеЗаполнено(Объект.АналитикаУчетаПоПартнерам)
		И ОбщегоНазначения.СсылкаСуществует(Объект.АналитикаУчетаПоПартнерам) Тогда 
		
		ПараметрыЗапроса.Организации = СформироватьМассивОрганизаций(
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.АналитикаУчетаПоПартнерам, "Организация"));
		ПараметрыЗапроса.ФильтрПоОрганизации = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ФинансовыеРезультаты(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПараметрыЗапроса.Подразделения = СформироватьИерархиюЭлементов(Объект.Подразделение, ФормироватьИерархию);
	ПараметрыЗапроса.Организации   = СформироватьМассивОрганизаций(Объект.Организация);
	
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти

#Область РегистрыСведений

#Область АналитикиУчета

Процедура ЗначенияФильтра_РегистрыСведений_ДатыПередачиТоваровНаКомиссию(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПараметрыЗапроса.Организации         = СформироватьМассивОрганизаций(Объект.Организация);
	ПараметрыЗапроса.ФильтрПоОрганизации = Истина;
	
	ОбъектОтбора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.АналитикаУчетаНоменклатуры, "МестоХранения");
	
	Если ТипЗнч(ОбъектОтбора) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		
		ПараметрыЗапроса.Подразделения         = СформироватьИерархиюЭлементов(ОбъектОтбора, ФормироватьИерархию);
		ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
		
	ИначеЕсли ТипЗнч(ОбъектОтбора) = Тип("СправочникСсылка.Склады") Тогда
		
		ПараметрыЗапроса.Подразделения = СформироватьИерархиюЭлементов(
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектОтбора, "Подразделение"), ФормироватьИерархию);
		ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_СтоимостьТоваров(Объект, ПараметрыЗапроса, ФормироватьИерархию)	
	ПараметрыЗапроса.Организации = СформироватьМассивОрганизаций(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидЗапасов, "Организация"));
	ПараметрыЗапроса.ФильтрПоОрганизации = Истина;
КонецПроцедуры

#КонецОбласти 

#Область КредитыИЗаймы

Процедура ЗначенияФильтра_РегистрыСведений_ГрафикНачисленийКредитовИДепозитов(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ЗначениеФильтраИзВариантаГрафика(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_ГрафикОплатКредитовИДепозитов(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ЗначениеФильтраИзВариантаГрафика(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_ГрафикТраншейКредитовИДепозитов(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ЗначениеФильтраИзВариантаГрафика(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_ПроцентныеСтавкиФинансовыхИнструментов(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюОбъектаИОрганизации(Объект.Договор, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_СтавкиДисконтирования(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначениеФильтраИзВариантаГрафика(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДоговорыКредитовИДепозитов.Подразделение КАК Подразделение,
		|	ДоговорыКредитовИДепозитов.Организация КАК Организация
		|ИЗ
		|	Справочник.ВариантыГрафиковКредитовИДепозитов КАК ВариантыГрафиковКредитовИДепозитов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКредитовИДепозитов КАК ДоговорыКредитовИДепозитов
		|		ПО ВариантыГрафиковКредитовИДепозитов.Владелец = ДоговорыКредитовИДепозитов.Ссылка
		|ГДЕ
		|	ВариантыГрафиковКредитовИДепозитов.Ссылка = &Ссылка");
		
	Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
	Запрос.УстановитьПараметр("Ссылка", Объект.ВариантГрафика);

	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	МассивОбъектов = ТаблицаЗапроса.ВыгрузитьКолонку("Подразделение");
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
	
	МассивОрганизаций = ТаблицаЗапроса.ВыгрузитьКолонку("Организация");
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОрганизаций);
	
	ПараметрыЗапроса.Подразделения = МассивОбъектов;
	ПараметрыЗапроса.Организации   = МассивОрганизаций;
	
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
КонецПроцедуры
	
#КонецОбласти

#Область Настройки

Процедура ЗначенияФильтра_РегистрыСведений_ДатыПоступленияТоваровОрганизаций(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ПараметрыЗапроса.Организации = СформироватьМассивОрганизаций(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидЗапасов, "Организация"));
	ПараметрыЗапроса.ФильтрПоОрганизации = Истина;
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_НастройкаПередачиТоваровМеждуОрганизациями(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	МассивОрганизаций = Новый Массив;
	МассивОрганизаций.Добавить(Объект.ОрганизацияВладелец);
	МассивОрганизаций.Добавить(Объект.ОрганизацияПродавец);
	
	ПараметрыЗапроса.Организации         = МассивОрганизаций;
	ПараметрыЗапроса.ФильтрПоОрганизации = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_НастройкаРаспределенияПоНаправлениямДеятельности(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_НастройкиСистемыНалогообложения(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_НастройкиУчетаНДС(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_НастройкиУчетаУСН(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_УчетнаяПолитикаФинансовогоУчета(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_РегламентныеЗаданияЗакрытияМесяца(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

#КонецОбласти

#Область НоменклатураИЦены

Процедура ЗначенияФильтра_РегистрыСведений_ДействиеСкидокНаценок(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если ТипЗнч(Объект.Источник) = Тип("СправочникСсылка.Склады") Тогда
		
		МассивОбъектов = СформироватьИерархиюЭлементов(
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Источник, "Подразделение"), ФормироватьИерархию);
		
		ПараметрыЗапроса.Подразделения         = МассивОбъектов;
		ПараметрыЗапроса.ФильтрПоПодразделению = МассивОбъектов.Количество() > 0;
		
	ИначеЕсли ТипЗнч(Объект.Источник) = Тип("СправочникСсылка.СоглашенияСКлиентами") Тогда
		
		ЗначенияФильтра_Справочники_СоглашенияСКлиентами(Объект.Источник, ПараметрыЗапроса, ФормироватьИерархию);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_ИнформативныеЦеныНоменклатуры(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(Объект.ПравилоФормированиеЦены);
	
	ПараметрыЗапроса.ВидыЦен         = МассивОбъектов;
	ПараметрыЗапроса.ФильтрПоВидуЦен = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_ЦеныНоменклатуры(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(Объект.ВидЦены);
	
	ПараметрыЗапроса.ВидыЦен         = МассивОбъектов;
	ПараметрыЗапроса.ФильтрПоВидуЦен = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_ЦеныНоменклатурыПоставщиков(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Склады.Подразделение КАК Подразделение
		|ИЗ
		|	Справочник.СоглашенияСПоставщиками КАК СоглашенияСПоставщиками
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
		|		ПО СоглашенияСПоставщиками.Склад = Склады.Ссылка
		|ГДЕ
		|	СоглашенияСПоставщиками.ВидЦеныПоставщика = &ВидЦеныПоставщика");
		
	Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
	Запрос.УстановитьПараметр("ВидЦеныПоставщика", Объект.ВидЦеныПоставщика);
	
	МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
	
	ПараметрыЗапроса.Подразделения         = МассивОбъектов;
	ПараметрыЗапроса.ФильтрПоПодразделению = МассивОбъектов.Количество() > 0;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_ШтрихкодыНоменклатуры(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если Лев(Объект.ШтрихКод, 1) = "2" Тогда
		
		МассивСтруктурШтучныхШтрихКодов = ЗначениеНастроекПовтИсп.ДиапазоныШтучныхШтрихкодов();
		МассивСтруктурВесовыхШтрихКодов = ЗначениеНастроекПовтИсп.ДиапазоныВесовыхШтрихкодов();
		
		ЭтоВесовойШтрихКод = Ложь;
		ЭтоШтучныйШтрихКод = Ложь;
		
		Для Каждого СтрокаТЧ Из МассивСтруктурШтучныхШтрихКодов Цикл
			Если СтрокаТЧ.Диапазон = Лев(Объект.ШтрихКод, 2) Тогда
				ЭтоШтучныйШтрихКод = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если Лев(Объект.ШтрихКод, 2) = "2_" Тогда
			ЭтоВесовойШтрихКод = Истина;
		КонецЕсли;
		
		Если ЭтоШтучныйШтрихКод
			И Не Константы.ВыгружатьВнутренниеШтрихкодыШтучныхТоваров.Получить() Тогда
			ПараметрыЗапроса.Отказ = Истина;
		КонецЕсли;
		
		Если ЭтоВесовойШтрихКод
			И Не Константы.ИспользоватьФасовкуВесовогоТовара.Получить() Тогда
			ПараметрыЗапроса.Отказ = Истина;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура ЗначенияФильтра_РегистрыСведений_АктивацияПодарочныхСертификатов(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ОтборПоРегистраторуНабораЗаписей(Объект, ПараметрыЗапроса, ФормироватьИерархию);
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_ВспомогательнаяИнформацияВзаиморасчетов(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если ПроверитьНаличиеСвязаннойСсылки(Объект.РасчетныйДокумент, ПараметрыЗапроса) Тогда
		ПараметрыЗапроса = ОпределитьПараметрыЗапросаОбъекта(Объект.РасчетныйДокумент.ПолучитьОбъект(),,ФормироватьИерархию);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_ГрафикПлатежей(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если ЗначениеЗаполнено(Объект.БанковскийСчетКасса) Тогда
		Если ОбщегоНазначения.СсылкаСуществует(Объект.БанковскийСчетКасса) Тогда
			ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "БанковскийСчетКасса");
		Иначе
			ПараметрыЗапроса.Отказ = Истина;
		КонецЕсли;
	Иначе
		ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_ДанныеПервичныхДокументов(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если ПроверитьНаличиеСвязаннойСсылки(Объект.Документ, ПараметрыЗапроса) Тогда
		ПараметрыЗапроса = ОпределитьПараметрыЗапросаОбъекта(Объект.Документ.ПолучитьОбъект(),,ФормироватьИерархию);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_ДетализацияСебестоимостиТоваров(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_ДетализацияСебестоимостиПартииТоваров(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_ДетализацияСебестоимостиПартииТоваровПостатейныеЗатраты(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_ДетализацияСебестоимостиТоваровПостатейныеЗатраты(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_ДетализацияСебестоимостиТоваровПостатейныеЗатратыНЗП(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_ДокументыПоВыпущеннойПродукции(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_ЖурналУчетаСчетовФактур(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если ПроверитьНаличиеСвязаннойСсылки(Объект.СчетФактура, ПараметрыЗапроса) Тогда
		ПараметрыЗапроса = ОпределитьПараметрыЗапросаОбъекта(Объект.СчетФактура.ПолучитьОбъект(),,ФормироватьИерархию);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_ИсточникиПервичногоИнтереса(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	Пользователи.Подразделение КАК Подразделение
		|ИЗ
		|	Справочник.СделкиСКлиентами КАК СделкиСКлиентами
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО СделкиСКлиентами.Ответственный = Пользователи.Ссылка
		|ГДЕ
		|	СделкиСКлиентами.Ссылка = &Ссылка");
		
	Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
	Запрос.УстановитьПараметр("Ссылка", Объект.Сделка);
	
	МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
	
	ПараметрыЗапроса.Подразделения         = МассивОбъектов;
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_КонтактыВзаимодействий(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	Если ПроверитьНаличиеСвязаннойСсылки(Объект.Взаимодействие, ПараметрыЗапроса) Тогда
		ОбъектВзаимодействия = Объект.Взаимодействие.ПолучитьОбъект();
		ПараметрыЗапроса     = ОпределитьПараметрыЗапросаОбъекта(ОбъектВзаимодействия, ТипЗнч(ОбъектВзаимодействия), ФормироватьИерархию);
	Иначе
		ПараметрыЗапроса.Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_ОшибочныеРеквизитыКонтрагентов(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
	
	ПараметрыЗапросаСФ = ОпределитьПараметрыЗапросаОбъекта(Объект.СчетФактура.ПолучитьОбъект(),,ФормироватьИерархию);
	ПараметрыЗапроса = ОбъединитьУсловияОтбора(ПараметрыЗапроса, ПараметрыЗапросаСФ);
		
	Если ПараметрыЗапроса.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапросаСФ = ОпределитьПараметрыЗапросаОбъекта(Объект.ИсходныйСчетФактура.ПолучитьОбъект(),,ФормироватьИерархию);
	ПараметрыЗапроса = ОбъединитьУсловияОтбора(ПараметрыЗапроса, ПараметрыЗапросаСФ);

КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_НДССостояниеРеализации0(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ДокументРеализации = Объект.ДокументРеализации;
	
	Если ТипЗнч(ДокументРеализации) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ЗначенияФильтра_РеализацияТоваровИУслуг(ДокументРеализации, ПараметрыЗапроса, ФормироватьИерархию);
	Иначе
		
		МассивОбъектов = СформироватьИерархиюЭлементов(
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументРеализации, "Подразделение"), ФормироватьИерархию);
			
		ПараметрыЗапроса.Подразделения = МассивОбъектов;
		ПараметрыЗапроса.Организации   = СФормироватьМассивОрганизаций(Объект.Организация);
		
		ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
		ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_ВариантыОбеспеченияРаботами(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	РеквизитыОтбора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.СпособОбеспеченияПотребностей, "Подразделение, Организация");
		
	Если ЗначениеЗаполнено(РеквизитыОтбора.Подразделение) Тогда
		ПараметрыЗапроса.Подразделения         = СформироватьИерархиюЭлементов(РеквизитыОтбора.Подразделение, ФормироватьИерархию);
		ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыОтбора.Организация) Тогда
		ПараметрыЗапроса.Организации         = СФормироватьМассивОрганизаций(РеквизитыОтбора.Организация);
		ПараметрыЗапроса.ФильтрПоОрганизации = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_ПоследнийОбменСБанками(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПодразделениеОбъекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БанковскийСчет, "Подразделение");
	
	ПараметрыЗапроса.Подразделения = СформироватьИерархиюЭлементов(ПодразделениеОбъекта, ФормироватьИерархию);
	ПараметрыЗапроса.Организации   = СформироватьМассивОрганизаций(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БанковскийСчет, "Владелец"));
	
	ПараметрыЗапроса.ФильтрПоПодразделению = ЗначениеЗаполнено(ПодразделениеОбъекта);
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_СтатистикаСделокСКлиентами(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПараметрыЗапроса.Подразделения =  СформироватьИерархиюЭлементов(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ответственный, "Подразделение"), ФормироватьИерархию);
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_СчетаФактурыКомиссионерамКОформлению(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если ПроверитьНаличиеСвязаннойСсылки(Объект.ОтчетКомиссионера, ПараметрыЗапроса) Тогда
		ПараметрыЗапроса = ОпределитьПараметрыЗапросаОбъекта(Объект.ОтчетКомиссионера.ПолучитьОбъект(),,ФормироватьИерархию);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_СчетаФактурыКомитентовКРегистрации(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если ПроверитьНаличиеСвязаннойСсылки(Объект.СчетФактураВыданный, ПараметрыЗапроса) Тогда
		ПараметрыЗапроса = ОпределитьПараметрыЗапросаОбъекта(Объект.СчетФактураВыданный.ПолучитьОбъект(),,ФормироватьИерархию);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_СчетаФактурыПоставщиковКПеревыставлениюКомитентам(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если ПроверитьНаличиеСвязаннойСсылки(Объект.СчетФактураПолученный, ПараметрыЗапроса) Тогда
		ПараметрыЗапроса = ОпределитьПараметрыЗапросаОбъекта(Объект.СчетФактураПолученный.ПолучитьОбъект(),,ФормироватьИерархию);
	ИначеЕсли ПроверитьНаличиеСвязаннойСсылки(Объект.ОтчетКомитентуОЗакупках, ПараметрыЗапроса) Тогда
		ПараметрыЗапроса = ОпределитьПараметрыЗапросаОбъекта(Объект.ОтчетКомитентуОЗакупках.ПолучитьОбъект(),,ФормироватьИерархию);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_ТребуетсяОформлениеСчетаФактуры(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если ПроверитьНаличиеСвязаннойСсылки(Объект.Основание, ПараметрыЗапроса) Тогда
		ПараметрыЗапроса = ОпределитьПараметрыЗапросаОбъекта(Объект.Основание.ПолучитьОбъект(),,ФормироватьИерархию);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_ГруппыЗаявокПлатежногоКалендаря(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если ПроверитьНаличиеСвязаннойСсылки(Объект.ЗаявкаНаРасходованиеДенежныхСредств, ПараметрыЗапроса) Тогда
		ЗаявкаНаРасходованиеДС = Объект.ЗаявкаНаРасходованиеДенежныхСредств.ПолучитьОбъект();
		ПараметрыЗапроса = ОпределитьПараметрыЗапросаОбъекта(ЗаявкаНаРасходованиеДС, ТипЗнч(ЗаявкаНаРасходованиеДС), ФормироватьИерархию);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_ПорядокПлатежногоКалендаря(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если ЗначениеЗаполнено(Объект.БанковскийСчетКасса) Тогда
		Если ОбщегоНазначения.СсылкаСуществует(Объект.БанковскийСчетКасса) Тогда
			ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "БанковскийСчетКасса");
		Иначе
			ПараметрыЗапроса.Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_КурсыВалютРасчетовПоДоговорам(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если ПроверитьНаличиеСвязаннойСсылки(Объект.Договор, ПараметрыЗапроса) Тогда
		Договор = Объект.Договор.ПолучитьОбъект();
		ПараметрыЗапроса = ОпределитьПараметрыЗапросаОбъекта(Договор, ТипЗнч(Договор), ФормироватьИерархию);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Складские

Процедура ЗначенияФильтра_РегистрыСведений_Ассортимент(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Склады.Подразделение КАК Подразделение
		|ИЗ
		|	РегистрСведений.ИсторияИзмененияФорматовМагазинов.СрезПоследних КАК ИсторияИзмененияФорматовМагазиновСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
		|		ПО ИсторияИзмененияФорматовМагазиновСрезПоследних.Склад = Склады.Ссылка
		|ГДЕ
		|	ИсторияИзмененияФорматовМагазиновСрезПоследних.ФорматМагазина = &ФорматМагазина");
		
	Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
	Запрос.УстановитьПараметр("ФорматМагазина", Объект.ОбъектПланирования);
	
	МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
	
	ПараметрыЗапроса.Подразделения         = МассивОбъектов;
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_БлокировкиСкладскихЯчеек(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Склады.Подразделение КАК Подразделение
		|ИЗ
		|	Справочник.СкладскиеЯчейки КАК СкладскиеЯчейки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
		|		ПО СкладскиеЯчейки.Владелец = Склады.Ссылка
		|ГДЕ
		|	СкладскиеЯчейки.Ссылка = &Ссылка");
		
	Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ячейка);
	
	МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
	
	ПараметрыЗапроса.Подразделения         = МассивОбъектов;
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_ВалютыИКурсыДокументов(Объект, ПараметрыЗапроса, ФормироватьИерархию)   
	
	Если ПроверитьНаличиеСвязаннойСсылки(Объект.Документ, ПараметрыЗапроса) Тогда 
		ОбъектДляОпределенияПараметровЗапроса = Объект.Документ.ПолучитьОбъект();
		ПараметрыЗапроса = ОпределитьПараметрыЗапросаОбъекта(ОбъектДляОпределенияПараметровЗапроса, ТипЗнч(ОбъектДляОпределенияПараметровЗапроса), ФормироватьИерархию);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_КвотыАссортимента(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Склады.Подразделение КАК Подразделение
		|ИЗ
		|	РегистрСведений.ИсторияИзмененияФорматовМагазинов.СрезПоследних КАК ИсторияИзмененияФорматовМагазиновСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
		|		ПО ИсторияИзмененияФорматовМагазиновСрезПоследних.Склад = Склады.Ссылка
		|ГДЕ
		|	ИсторияИзмененияФорматовМагазиновСрезПоследних.ФорматМагазина = &ФорматМагазина");
		
	Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
	Запрос.УстановитьПараметр("ФорматМагазина", Объект.ОбъектПланирования);
	
	МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
	
	ПараметрыЗапроса.Подразделения         = МассивОбъектов;
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_КодыТоваровПодключаемогоОборудованияOffline(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Склады.Подразделение КАК Подразделение
		|ИЗ
		|	Справочник.ПравилаОбменаСПодключаемымОборудованиемOffline КАК ПравилаОбменаСПодключаемымОборудованиемOffline
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
		|		ПО ПравилаОбменаСПодключаемымОборудованиемOffline.Склад = Склады.Ссылка
		|ГДЕ
		|	ПравилаОбменаСПодключаемымОборудованиемOffline.Ссылка = &Ссылка");
		
	Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
	Запрос.УстановитьПараметр("Ссылка", Объект.ПравилоОбмена);
	
	МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
	
	ПараметрыЗапроса.Подразделения         = МассивОбъектов;
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_ИсправленияДокументов(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если ПроверитьНаличиеСвязаннойСсылки(Объект.ИсправляемыйДокумент, ПараметрыЗапроса) Тогда
		ОбъектДляОпределенияПараметровЗапроса = Объект.ИсправляемыйДокумент.ПолучитьОбъект();
		ПараметрыЗапроса = ОпределитьПараметрыЗапросаОбъекта(ОбъектДляОпределенияПараметровЗапроса, ТипЗнч(ОбъектДляОпределенияПараметровЗапроса), ФормироватьИерархию);
	Иначе
		ПараметрыЗапроса.Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_НастройкаКонтроляОбеспечения(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_НастройкиАдресныхСкладов(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_НастройкаБлокировкиОтИзменений(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_ОчередьЗаказовККорректировкеСтрокМерныхТоваров(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если ПроверитьНаличиеСвязаннойСсылки(Объект.Заказ, ПараметрыЗапроса) Тогда
		ПараметрыЗапроса = ОпределитьПараметрыЗапросаОбъекта(Объект.Заказ.ПолучитьОбъект(),,ФормироватьИерархию);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_ОчередьПереоформленияРасходныхОрдеров(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	Склады.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ТаблицаПодраздений
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	Склады.Ссылка = &Склад
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(&Получатель) = ЗНАЧЕНИЕ(Справочник.Склады)
		|			ТОГДА СтруктураПредприятия.Ссылка
		|		КОГДА ТИПЗНАЧЕНИЯ(&Получатель) = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия)
		|			ТОГДА &Получатель
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|	КОНЕЦ
		|ИЗ
		|	Справочник.Склады КАК Склады
		|		ПОЛНОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|		ПО Склады.Подразделение = СтруктураПредприятия.Ссылка
		|ГДЕ
		|	(Склады.Ссылка = &Получатель
		|		ИЛИ СтруктураПредприятия.Ссылка = &Получатель)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПодраздений.Подразделение КАК Подразделение
		|ИЗ
		|	ТаблицаПодраздений КАК ТаблицаПодраздений");
		
	Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
	Запрос.УстановитьПараметр("Склад",      Объект.Склад);
	Запрос.УстановитьПараметр("Получатель", Объект.Получатель);
	
	МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
	
	ПараметрыЗапроса.Подразделения         = МассивОбъектов;
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_ВариантыОбеспеченияТоварами(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_ПравилаРазмещенияТоваровВЯчейках(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_ПрогнозыРасходаУпаковок(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_РазмещениеНоменклатурыПоСкладскимЯчейкам(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_РаспределениеЗапасов(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_СостоянияВнутреннихЗаказов(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	Если ПроверитьНаличиеСвязаннойСсылки(Объект.Заказ, ПараметрыЗапроса) Тогда
		ОбъектЗаказ      = Объект.Заказ.ПолучитьОбъект();
		ПараметрыЗапроса = ОпределитьПараметрыЗапросаОбъекта(ОбъектЗаказ, ТипЗнч(ОбъектЗаказ), ФормироватьИерархию);
	Иначе
		ПараметрыЗапроса.Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_СостоянияЗаказовКлиентов(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	Если ПроверитьНаличиеСвязаннойСсылки(Объект.Заказ, ПараметрыЗапроса) Тогда
		ОбъектЗаказ      = Объект.Заказ.ПолучитьОбъект();
		ПараметрыЗапроса = ОпределитьПараметрыЗапросаОбъекта(ОбъектЗаказ, ТипЗнч(ОбъектЗаказ), ФормироватьИерархию);
	Иначе
		ПараметрыЗапроса.Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_СостоянияЗаказовПоставщикам(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	Если ПроверитьНаличиеСвязаннойСсылки(Объект.Заказ, ПараметрыЗапроса) Тогда
		ОбъектЗаказ      = Объект.Заказ.ПолучитьОбъект();
		ПараметрыЗапроса = ОпределитьПараметрыЗапросаОбъекта(ОбъектЗаказ, ТипЗнч(ОбъектЗаказ), ФормироватьИерархию);
	Иначе
		ПараметрыЗапроса.Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_СостоянияПересчетовЯчеек(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Склады.Подразделение КАК Подразделение
		|ИЗ
		|	Справочник.СкладскиеЯчейки КАК СкладскиеЯчейки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
		|		ПО СкладскиеЯчейки.Владелец = Склады.Ссылка
		|ГДЕ
		|	СкладскиеЯчейки.Ссылка = &Ссылка");
		
	Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ячейка);
	
	МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
	
	ПараметрыЗапроса.Подразделения         = МассивОбъектов;
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_ТоварныеОграничения(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_ТоварыКДоставке(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_СхемыОбеспечения(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если ТипЗнч(Объект.Склад) = Тип("СправочникСсылка.ФорматыМагазинов") Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
			|	ЕСТЬNULL(Склады.Подразделение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) КАК Подразделение
			|ИЗ
			|	РегистрСведений.ИсторияИзмененияФорматовМагазинов КАК ИсторияИзмененияФорматовМагазинов
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
			|		ПО ИсторияИзмененияФорматовМагазинов.Склад = Склады.Ссылка
			|ГДЕ
			|	ИсторияИзмененияФорматовМагазинов.ФорматМагазина = &ФорматМагазина
			|
			|СГРУППИРОВАТЬ ПО
			|	ЕСТЬNULL(Склады.Подразделение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))");
			
		Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
		Запрос.УстановитьПараметр("ФорматМагазина", Объект.Склад);
		
		МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
		ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
		
		ПараметрыЗапроса.Подразделения = МассивОбъектов;
		
	Иначе
		ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
	КонецЕсли;
	
	ПараметрыЗапроса.ФильтрПоПодразделению = ПараметрыЗапроса.Подразделения.Количество() > 0;
	
КонецПроцедуры 

Процедура ЗначенияФильтра_РегистрыСведений_СостоянияКоммерческихПредложенийКлиентам(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию) 
	ЗначенияФильтра_КоммерческоеПредложениеКлиенту(ЭлементДанных.КоммерческоеПредложениеКлиенту, ПараметрыЗапроса, ФормироватьИерархию)
КонецПроцедуры

#КонецОбласти 

#Область СтруктураПредприятия

Процедура ЗначенияФильтра_РегистрыСведений_ИсторияИзмененияФорматовМагазинов(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_ПримененияЕНВД(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_РегистрацииВНалоговомОргане(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_СостоянияИРеквизитыДоставки(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	Склады.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ТаблицаПодраздений
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	Склады.Ссылка = &Склад
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(&Получатель) = ЗНАЧЕНИЕ(Справочник.Склады)
		|			ТОГДА СтруктураПредприятия.Ссылка
		|		КОГДА ТИПЗНАЧЕНИЯ(&Получатель) = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия)
		|			ТОГДА &Получатель
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|	КОНЕЦ
		|ИЗ
		|	Справочник.Склады КАК Склады
		|		ПОЛНОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|		ПО Склады.Подразделение = СтруктураПредприятия.Ссылка
		|ГДЕ
		|	(Склады.Ссылка = &Получатель
		|		ИЛИ СтруктураПредприятия.Ссылка = &Получатель)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПодраздений.Подразделение КАК Подразделение
		|ИЗ
		|	ТаблицаПодраздений КАК ТаблицаПодраздений");
		
	Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
	Запрос.УстановитьПараметр("Склад",      Объект.Склад);
	Запрос.УстановитьПараметр("Получатель", Объект.ПолучательОтправитель);
	
	МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
	
	ПараметрыЗапроса.Подразделения         = МассивОбъектов;
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_КрупнейшийНалогоплательщикИсторияРегистрацийВНалоговомОргане(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

#КонецОбласти 

#КонецОбласти

#Область Справочники

#Область Взаимодействия

Процедура ЗначенияФильтра_Справочники_ПретензииКлиентов(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзОтветственного(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_Справочники_Проекты(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзОтветственного(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_Справочники_СделкиСКлиентами(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзОтветственного(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ОтборПоПодразделениюИзОтветственного(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПодразделениеОбъекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ответственный, "Подразделение");
	
	Если ЗначениеЗаполнено(ПодразделениеОбъекта) Тогда
		ПараметрыЗапроса.Подразделения = СформироватьИерархиюЭлементов(ПодразделениеОбъекта, ФормироватьИерархию);
	КонецЕсли;
	
	ПараметрыЗапроса.ФильтрПоПодразделению = ЗначениеЗаполнено(ПодразделениеОбъекта);
	
КонецПроцедуры

#КонецОбласти 

#Область ДоговорыИСоглашения

Процедура ЗначенияФильтра_Справочники_ГосударственныеКонтракты(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_Справочники_ДоговорыКредитовИДепозитов(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_Справочники_ДоговорыКонтрагентов(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПараметрыЗапроса.Подразделения = СформироватьИерархиюЭлементов(Объект.Подразделение, ФормироватьИерархию);
	ПараметрыЗапроса.Организации   = СформироватьМассивОрганизаций(Объект.Организация);
	
	ПараметрыЗапроса.ФильтрПоПодразделению = ЗначениеЗаполнено(Объект.Подразделение);
	ПараметрыЗапроса.ФильтрПоОрганизации   = ЗначениеЗаполнено(Объект.Организация);
	
КонецПроцедуры

Процедура ЗначенияФильтра_Справочники_ДоговорыЭквайринга(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_Справочники_ДоговорыМеждуОрганизациями(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	МассивПодразделений = Новый Массив();
	
	Подразделения = Новый Массив();
	
	Если ЗначениеЗаполнено(Объект.БанковскийСчет) ТОгда
		ПодразделениеСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БанковскийСчет, "Подразделение");
		МассивПодразделений = СформироватьИерархиюЭлементов(ПодразделениеСсылка, ФормироватьИерархию);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.БанковскийСчетПолучателя) ТОгда
		ПодразделениеСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БанковскийСчетПолучателя, "Подразделение");
		Подразделения = СформироватьИерархиюЭлементов(ПодразделениеСсылка, ФормироватьИерархию);
		МассивПодразделений = ОбъединитьМассивы(МассивПодразделений, Подразделения);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Подразделение) ТОгда
		Подразделения = СформироватьИерархиюЭлементов(Объект.Подразделение, ФормироватьИерархию);
		МассивПодразделений = ОбъединитьМассивы(МассивПодразделений, Подразделения);
	КонецЕсли;
	
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивПодразделений);
	
	ПараметрыЗапроса.Подразделения = МассивПодразделений;
	
	МассивОрганизаций = Новый Массив;
	Если ЗначениеЗаполнено(Объект.Организация) ТОгда
		МассивОрганизаций.Добавить(Объект.Организация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ОрганизацияПолучатель) ТОгда
		МассивОрганизаций.Добавить(Объект.ОрганизацияПолучатель);
	КонецЕсли;
	
	ПараметрыЗапроса.Организации   = МассивОрганизаций;
	
	ПараметрыЗапроса.ФильтрПоПодразделению = МассивПодразделений.Количество() > 0;
	ПараметрыЗапроса.ФильтрПоОрганизации   = МассивОрганизаций.Количество() > 0;
	
КонецПроцедуры


Процедура ЗначенияФильтра_Справочники_СоглашенияСПоставщиками(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПодразделениеОбъекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Склад, "Подразделение");
	
	ПараметрыЗапроса.Подразделения = СформироватьИерархиюЭлементов(ПодразделениеОбъекта, ФормироватьИерархию);
	ПараметрыЗапроса.Организации   = СформироватьМассивОрганизаций(Объект.Организация);
	
	ПараметрыЗапроса.ФильтрПоПодразделению = ЗначениеЗаполнено(ПодразделениеОбъекта);
	ПараметрыЗапроса.ФильтрПоОрганизации   = ЗначениеЗаполнено(Объект.Организация);
	
КонецПроцедуры

Процедура ЗначенияФильтра_Справочники_СоглашенияСКлиентами(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		ПодразделениеОбъекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Склад, "Подразделение");
	Иначе
		ПодразделениеОбъекта = Неопределено;
	КонецЕсли;
	
	ПараметрыЗапроса.Подразделения = СформироватьИерархиюЭлементов(ПодразделениеОбъекта, ФормироватьИерархию);
	ПараметрыЗапроса.Организации   = СформироватьМассивОрганизаций(Объект.Организация);
	
	ПараметрыЗапроса.ФильтрПоПодразделению = ЗначениеЗаполнено(ПодразделениеОбъекта);
	ПараметрыЗапроса.ФильтрПоОрганизации   = ЗначениеЗаполнено(Объект.Организация);
	
КонецПроцедуры

#КонецОбласти 

#Область Прочее

Процедура ЗначенияФильтра_Справочники_ВариантыГрафиковКредитовИДепозитов(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПараметрыЗапроса.Подразделения = СформироватьИерархиюЭлементов(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Владелец, "Подразделение"), ФормироватьИерархию);
		
	ПараметрыЗапроса.Организации = СформироватьМассивОрганизаций(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Владелец, "Организация"));
	
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_Справочники_ВидыЦен(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	МассивВидовЦен = Новый Массив;
	МассивВидовЦен.Добавить(Объект.Ссылка);
	
	ПараметрыЗапроса.Вставить("ВидыЦен", МассивВидовЦен);
	ПараметрыЗапроса.Вставить("ФильтрПоВидуЦен",       Истина);
	
КонецПроцедуры

Процедура ЗначенияФильтра_Справочники_Патенты(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	МассивОбъектов = Объект.ПрименениеПатента.Выгрузить().ВыгрузитьКолонку("Подразделение");
	
	Если ФормироватьИерархию Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
			|	СтруктураПредприятия.Ссылка КАК Подразделение
			|ИЗ
			|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
			|ГДЕ
			|	СтруктураПредприятия.Ссылка В(&МассивСсылок)
			|ИТОГИ ПО
			|	Подразделение ТОЛЬКО ИЕРАРХИЯ");
		
		Запрос.УстановитьПараметр("МассивСсылок", МассивОбъектов);
		МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	КонецЕсли;
	
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
	
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение, указанное в табличной части применение патента'");
	ПараметрыЗапроса.Подразделения = МассивОбъектов;
	ПараметрыЗапроса.Организации   = СформироватьМассивОрганизаций(Объект.Владелец);
	
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_Справочники_ОбъектыРасчетов(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_Справочники_Пользователи(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПараметрыЗапроса.Подразделения         = СформироватьИерархиюЭлементов(Объект.Подразделение, ФормироватьИерархию);
	ПараметрыЗапроса.ФильтрПоПодразделению = ЗначениеЗаполнено(Объект.Подразделение);
	
КонецПроцедуры

Процедура ЗначенияФильтра_Справочники_УсловияОбслуживанияПартнеровТорговымиПредставителями(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПодразделениеОбъекта = Справочники.СтруктураПредприятия.ПустаяСсылка();
	ОрганизацияОбъекта   = Справочники.Организации.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Склады.Подразделение КАК Подразделение,
			|	СоглашенияСКлиентами.Организация КАК Организация
			|ИЗ
			|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
			|		ПО СоглашенияСКлиентами.Склад = Склады.Ссылка
			|ГДЕ
			|	СоглашенияСКлиентами.Ссылка = &Ссылка");
			
		Запрос.УстановитьПараметр("Ссылка", Объект.Соглашение);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ПодразделениеОбъекта = Выборка.Подразделение;
			ОрганизацияОбъекта   = Выборка.Организация;
		КонецЕсли;
		
	Иначе
		ПодразделениеОбъекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Объект.ТорговыйПредставитель, "Подразделение");
	КонецЕсли;
	
	ПараметрыЗапроса.Подразделения = СформироватьИерархиюЭлементов(ПодразделениеОбъекта, ФормироватьИерархию);
	ПараметрыЗапроса.Организации   = СформироватьМассивОрганизаций(ОрганизацияОбъекта);
	
	ПараметрыЗапроса.ФильтрПоПодразделению = ЗначениеЗаполнено(ПодразделениеОбъекта);
	ПараметрыЗапроса.ФильтрПоОрганизации   = ЗначениеЗаполнено(ОрганизацияОбъекта);
	
КонецПроцедуры

#КонецОбласти 

#Область СкладскиеСправочники

Процедура ЗначенияФильтра_Справочники_ОбластиХранения(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИПустомуЗначениюИзВладельца(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_Справочники_ПодключаемоеОборудование(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Склады.Подразделение КАК Подразделение
		|ИЗ
		|	Справочник.ПравилаОбменаСПодключаемымОборудованиемOffline КАК ПравилаОбменаСПодключаемымОборудованиемOffline
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
		|		ПО ПравилаОбменаСПодключаемымОборудованиемOffline.Склад = Склады.Ссылка
		|ГДЕ
		|	ПравилаОбменаСПодключаемымОборудованиемOffline.Ссылка = &Ссылка");
		
	Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
	Запрос.УстановитьПараметр("Ссылка", Объект.ПравилоОбмена);
	
	МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
	
	ПараметрыЗапроса.Подразделения         = МассивОбъектов;
	ПараметрыЗапроса.ФильтрПоПодразделению = МассивОбъектов.Количество() > 0;
	
	ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
	
КонецПроцедуры

Процедура ЗначенияФильтра_Справочники_ДрайверыОборудования(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если Не Объект.ЭтоНовый() Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
			|	ЕСТЬNULL(Склады.Подразделение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) КАК Подразделение
			|ИЗ
			|	Справочник.ДрайверыОборудования КАК ДрайверыОборудования
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
			|		ПО ДрайверыОборудования.Ссылка = ПодключаемоеОборудование.ДрайверОборудования
			|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПравилаОбменаСПодключаемымОборудованиемOffline КАК ПравилаОбменаСПодключаемымОборудованиемOffline
			|			ПО ПодключаемоеОборудование.ПравилоОбмена = ПравилаОбменаСПодключаемымОборудованиемOffline.Ссылка
			|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
			|				ПО ПравилаОбменаСПодключаемымОборудованиемOffline.Склад = Склады.Ссылка
			|ГДЕ
			|	ДрайверыОборудования.Ссылка = &Ссылка");
			
		Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		
		МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
		ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
		
		ПараметрыЗапроса.Подразделения         = МассивОбъектов;
		ПараметрыЗапроса.ФильтрПоПодразделению = МассивОбъектов.Количество() > 0;
		
	Иначе
		ПараметрыЗапроса.Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗначенияФильтра_Справочники_РабочиеУчастки(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИПустомуЗначениюИзВладельца(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_Справочники_СкладскиеПомещения(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИПустомуЗначениюИзВладельца(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_Справочники_СкладскиеЯчейки(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИПустомуЗначениюИзВладельца(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_Справочники_СпособыОбеспеченияПотребностей(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПараметрыЗапроса.Подразделения = СформироватьИерархиюЭлементов(Объект.Подразделение, ФормироватьИерархию);
	ПараметрыЗапроса.Организации   = СформироватьМассивОрганизаций(Объект.Организация);
	
	ПараметрыЗапроса.ФильтрПоПодразделению = ЗначениеЗаполнено(Объект.Подразделение);
	ПараметрыЗапроса.ФильтрПоОрганизации   = ЗначениеЗаполнено(Объект.Организация);
	
КонецПроцедуры

Процедура ОтборПоПодразделениюИПустомуЗначениюИзВладельца(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПодразделениеОбъекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Владелец, "Подразделение");
	
	ПараметрыЗапроса.Подразделения         = СформироватьИерархиюЭлементов(ПодразделениеОбъекта, ФормироватьИерархию);
	ПараметрыЗапроса.ФильтрПоПодразделению = ЗначениеЗаполнено(ПодразделениеОбъекта);
	
КонецПроцедуры

#КонецОбласти

#Область СтруктураПредприятия

Процедура ЗначенияФильтра_Справочники_БанковскиеСчетаОрганизаций(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПараметрыЗапроса.Подразделения = СформироватьИерархиюЭлементов(Объект.Подразделение, ФормироватьИерархию);
	ПараметрыЗапроса.Организации   = СформироватьМассивОрганизаций(Объект.Владелец);
		
	ПараметрыЗапроса.ФильтрПоПодразделению = ЗначениеЗаполнено(Объект.Подразделение);
	ПараметрыЗапроса.ФильтрПоОрганизации   = ЗначениеЗаполнено(Объект.Владелец);
	
КонецПроцедуры

Процедура ЗначенияФильтра_Справочники_Кассы(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПараметрыЗапроса.Подразделения = СформироватьИерархиюЭлементов(Объект.Подразделение, ФормироватьИерархию);
	ПараметрыЗапроса.Организации   = СформироватьМассивОрганизаций(Объект.Владелец);
		
	ПараметрыЗапроса.ФильтрПоПодразделению = ЗначениеЗаполнено(Объект.Подразделение);
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_Справочники_КассыККМ(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПараметрыЗапроса.Подразделения = СформироватьИерархиюЭлементов(Объект.Подразделение, ФормироватьИерархию);
	ПараметрыЗапроса.Организации   = СформироватьМассивОрганизаций(Объект.Владелец);
		
	ПараметрыЗапроса.ФильтрПоПодразделению = ЗначениеЗаполнено(Объект.Подразделение);
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_Справочники_КассовыеКниги(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПараметрыЗапроса.Организации         = СформироватьМассивОрганизаций(Объект.Владелец);
	ПараметрыЗапроса.ФильтрПоОрганизации = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_Справочники_Организации(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПараметрыЗапроса.Вставить("Организации", СформироватьМассивОрганизаций(Объект.Ссылка));
		
	ПараметрыЗапроса.Вставить("ФильтрПоПодразделению", Ложь);
	ПараметрыЗапроса.Вставить("ФильтрПоОрганизации",   Истина);
	ПараметрыЗапроса.Вставить("ФильтрПоВидуЦен",       Ложь);

КонецПроцедуры

Процедура ЗначенияФильтра_Справочники_ОтветственныеЛицаОрганизаций(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПараметрыЗапроса.Организации         = СформироватьМассивОрганизаций(Объект.Владелец);
	ПараметрыЗапроса.ФильтрПоОрганизации = Истина;

КонецПроцедуры

Процедура ЗначенияФильтра_Справочники_РегистрацииВНалоговомОргане(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если Объект.ЭтоНовый() Тогда
		ПараметрыЗапроса.Отказ = Истина;
	Иначе
		
		ОсновнаяРегистрацияВладельца = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Владелец, "РегистрацияВНалоговомОргане");
		
		ПараметрыЗапроса.Организации         = СформироватьМассивОрганизаций(Объект.Владелец);
		ПараметрыЗапроса.ФильтрПоОрганизации = Истина;
		
		Если Объект.Ссылка <> ОсновнаяРегистрацияВладельца Тогда
			
			ТаблицаНабораЗаписей = Новый ТаблицаЗначений;
			
			Если Объект.ДополнительныеСвойства.Свойство("РегистрацияОбъектаИзЗаписиРегистра", ТаблицаНабораЗаписей) Тогда
				Запрос = Новый Запрос("ВЫБРАТЬ
					|	НаборЗаписей.РегистрацияВНалоговомОргане КАК ЭлементСправочникаРегистрацииВНалоговомОргане,
					|	НаборЗаписей.Подразделение КАК Подразделение
					|ПОМЕСТИТЬ НаборЗаписейРегистра
					|ИЗ
					|	&НаборЗаписейРегистра КАК НаборЗаписей
					|;
					|ВЫБРАТЬ
					|	РегистрацииВНалоговомОргане.Подразделение КАК Подразделение
					|ИЗ
					|	НаборЗаписейРегистра КАК РегистрацииВНалоговомОргане
					|ГДЕ
					|	РегистрацииВНалоговомОргане.ЭлементСправочникаРегистрацииВНалоговомОргане = &РегистрацияВНалоговомОргане");
					
				Запрос.УстановитьПараметр("НаборЗаписейРегистра", ТаблицаНабораЗаписей);
			Иначе
				Запрос = Новый Запрос("
					|ВЫБРАТЬ
					|	РегистрацииВНалоговомОргане.Подразделение КАК Подразделение
					|ИЗ
					|	РегистрСведений.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
					|ГДЕ
					|	РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане = &РегистрацияВНалоговомОргане");
			КонецЕсли;
			
			Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
			Запрос.УстановитьПараметр("РегистрацияВНалоговомОргане", Объект.Ссылка);
			
			МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
			ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
			ПараметрыЗапроса.Подразделения = МассивОбъектов;
			ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
			
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗначенияФильтра_Справочники_СтруктураПредприятия(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПараметрыЗапроса.Подразделения         = СформироватьИерархиюЭлементов(Объект.Ссылка, ФормироватьИерархию);
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_Справочники_ЭквайринговыеТерминалы(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	МассивОбъектов = Новый Массив;
	Если Не Объект.ЭтоГруппа Тогда
		Подразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Владелец, "Подразделение");
		МассивОбъектов = СформироватьИерархиюЭлементов(Подразделение, ФормироватьИерархию);
	КонецЕсли;
	
	ПараметрыЗапроса.Подразделения = МассивОбъектов;
	ПараметрыЗапроса.ФильтрПоПодразделению = МассивОбъектов.Количество() > 0;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

Функция ДанныеОбъектаСоответсвуютНастройкамУзла(ПараметрыЗапроса, ЗагрузкаОбъекта, УзелПланаОбмена = Неопределено)
	
	Если ПараметрыЗапроса.ФильтрПоПодразделению Тогда
		
		ОбъектПроходитФильтрПоПодразделению = Истина;
		
		Если ПараметрыЗапроса.КонтрольПроведенияПоОдномуИзУсловий
			И Не ЗагрузкаОбъекта Тогда
			ОбъектПроходитФильтрПоПодразделению = СоответсвиеОдногоИзДанныхОбъектаНастройкамУзла(
				ПараметрыЗапроса.Подразделения, МассивДоступныхПодразделений(УзелПланаОбмена));
		Иначе
			ОбъектПроходитФильтрПоПодразделению = ПолноеСоответсвиеДанныхОбъектаНастройкамУзла(
				ПараметрыЗапроса.Подразделения, МассивДоступныхПодразделений(УзелПланаОбмена));
		КонецЕсли;
			
		Если Не ОбъектПроходитФильтрПоПодразделению Тогда
			ТекстСообщения = НСтр("ru = '%1 не соответствует настройкам узла распределенной информационной базы.'");
			ПараметрыЗапроса.СообщениеПользователю = СтрШаблон(
				ТекстСообщения, ?(ПустаяСтрока(ПараметрыЗапроса.РеквизитПроверкиПодразделения), "Объект", ПараметрыЗапроса.РеквизитПроверкиПодразделения));
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыЗапроса.ФильтрПоОрганизации Тогда
		МассивОрганизацийУзла = МассивДоступныхОрганизаций(УзелПланаОбмена);
		Если УзелПланаОбмена.ИспользоватьОтборПоОрганизациям
			И Не ПолноеСоответсвиеДанныхОбъектаНастройкамУзла(ПараметрыЗапроса.Организации, МассивОрганизацийУзла) Тогда
			ПараметрыЗапроса.СообщениеПользователю = НСтр("ru = 'Организация объекта не соответствует настройкам узла распределенной информационной базы.'");
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыЗапроса.ФильтрПоВидуЦен Тогда
		МассивВидовЦенУзла = МассивДоступныхВидовЦен(УзелПланаОбмена);
		Если УзелПланаОбмена.ИспользоватьОтборПоВидамЦен
			И Не ПолноеСоответсвиеДанныхОбъектаНастройкамУзла(ПараметрыЗапроса.ВидыЦен, МассивВидовЦенУзла) Тогда
			ПараметрыЗапроса.СообщениеПользователю = НСтр("ru = 'Вид цены объекта не соответствует настройкам узла распределенной информационной базы.'");
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПроверитьНаличиеСвязаннойСсылки(Объект, ПараметрыФильтра)
	
	Если ЗначениеЗаполнено(Объект)
		И ОбщегоНазначения.СсылкаСуществует(Объект) Тогда
		
		Возврат Истина;
		
	Иначе
		
		ПараметрыФильтра.Вставить("ФильтрПоПодразделению", Ложь);
		ПараметрыФильтра.Вставить("ФильтрПоОрганизации",   Ложь);
		ПараметрыФильтра.Вставить("ФильтрПоВидуЦен",       Ложь);
		ПараметрыФильтра.Вставить("Отказ",                 Истина);
		
		Возврат Ложь;
		
	КонецЕсли;
		
КонецФункции

Функция ПолноеСоответсвиеДанныхОбъектаНастройкамУзла(МассивОбъекта, МассивДоступных)
	
	Если МассивОбъекта.Количество() > 0 Тогда
		Результат = ОбщегоНазначенияКлиентСервер.СократитьМассив(МассивОбъекта, МассивДоступных);
		Возврат Результат.Количество() = 0;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция СоответсвиеОдногоИзДанныхОбъектаНастройкамУзла(МассивОбъекта, МассивДоступных)
	
	Для Каждого ЭлементОбъекта Из МассивОбъекта Цикл
		Если МассивДоступных.Найти(ЭлементОбъекта) <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция МассивДоступныхПодразделений(УзелПланаОбмена)
	
	Если Не ЗначениеЗаполнено(УзелПланаОбмена) Тогда
		УзелПланаОбмена = ПланыОбмена.СОтборами.ЭтотУзел();
	КонецЕсли;
	
	МассивПодразделенийУзла = УзелПланаОбмена.Подразделения.ВыгрузитьКолонку("Подразделение");
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СтруктураПредприятия.Ссылка КАК Подразделение
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|ГДЕ
		|	СтруктураПредприятия.Ссылка В ИЕРАРХИИ(&МассивОбъектов)");
		
	Запрос.УстановитьПараметр("МассивОбъектов", МассивПодразделенийУзла);
	
	МассивДопустимыхЗначений = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	
	Возврат МассивДопустимыхЗначений;
	
КонецФункции

Функция МассивДоступныхОрганизаций(УзелПланаОбмена)
	
	Если Не ЗначениеЗаполнено(УзелПланаОбмена) Тогда
		УзелПланаОбмена = ПланыОбмена.СОтборами.ЭтотУзел();
	КонецЕсли;
	
	Возврат УзелПланаОбмена.Организации.ВыгрузитьКолонку("Организация");
	
КонецФункции

Функция МассивДоступныхВидовЦен(УзелПланаОбмена)
	
	Если Не ЗначениеЗаполнено(УзелПланаОбмена) Тогда
		УзелПланаОбмена = ПланыОбмена.СОтборами.ЭтотУзел();
	КонецЕсли;
		
	Возврат УзелПланаОбмена.ВидыЦен.ВыгрузитьКолонку("ВидЦены");
	
КонецФункции

Функция ДобавитьИтогиКЗапросу(ТекстЗапроса, ФормироватьИерархию)
	
	Если ФормироватьИерархию Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|ИТОГИ ПО
			|	Подразделение ТОЛЬКО ИЕРАРХИЯ";
	КонецЕсли;
		
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПараметрыЗапроса.Организации         = СформироватьМассивОрганизаций(Объект.Организация);
	ПараметрыЗапроса.ФильтрПоОрганизации = Истина;
	
КонецПроцедуры

Процедура ОтборПоПодразделениюОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение, указанное в объекте'");
	ПараметрыЗапроса.Подразделения                 = СформироватьИерархиюЭлементов(Объект.Подразделение, ФормироватьИерархию);
	ПараметрыЗапроса.ФильтрПоПодразделению         = Истина;
	
КонецПроцедуры

Процедура ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение, указанное в объекте'");
	ПараметрыЗапроса.Подразделения                 = СформироватьИерархиюЭлементов(Объект.Подразделение, ФормироватьИерархию);
	ПараметрыЗапроса.Организации                   = СформироватьМассивОрганизаций(Объект.Организация);
	
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
КонецПроцедуры

Процедура ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, ИмяРеквизита)
	
	ПараметрыЗапроса.Подразделения = СформироватьИерархиюЭлементов(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект[ИмяРеквизита], "Подразделение"), ФормироватьИерархию);
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	
КонецПроцедуры

Процедура ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, ИмяРеквизита)
	
	ПараметрыЗапроса.Подразделения =  СформироватьИерархиюЭлементов(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект[ИмяРеквизита], "Подразделение"), ФормироватьИерархию);
	ПараметрыЗапроса.Организации = СформироватьМассивОрганизаций(Объект.Организация);
	
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
КонецПроцедуры

Процедура ОтборПоПодразделениюАналитикиУчетаНоменклатурыИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	СкладАналитикиУчетаНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Объект.АналитикаУчетаНоменклатуры, "МестоХранения");
	
	Если ТипЗнч(СкладАналитикиУчетаНоменклатуры) = Тип("СправочникСсылка.Склады") Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Склады.Подразделение КАК Подразделение
			|ИЗ
			|	РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
			|		ПО АналитикаУчетаНоменклатуры.МестоХранения = Склады.Ссылка
			|ГДЕ
			|	АналитикаУчетаНоменклатуры.КлючАналитики = &КлючАналитики");

		Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
		Запрос.УстановитьПараметр("КлючАналитики", Объект.АналитикаУчетаНоменклатуры);
		
		МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
		ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
		
		ПараметрыЗапроса.Подразделения         = МассивОбъектов;
		ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
		
	ИначеЕсли ТипЗнч(СкладАналитикиУчетаНоменклатуры) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		ПараметрыЗапроса.Подразделения = СформироватьИерархиюЭлементов(
			СкладАналитикиУчетаНоменклатуры, ФормироватьИерархию);
		ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	КонецЕсли;

	ПараметрыЗапроса.Организации         = СформироватьМассивОрганизаций(Объект.Организация);
	ПараметрыЗапроса.ФильтрПоОрганизации = Истина;
	
КонецПроцедуры

Процедура ОтборПоПодразделениюИзСкладаТабЧастиТоварыИОрганизации(СтруктураОбъекта, ПараметрыЗапроса, ФормироватьИерархию)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	ТабЧастьДокумента.%НаименованиеКолонкиСклада% КАК Склад,
		|	ТабЧастьДокумента.%НаименованиеКолонкиНоменклатуры% КАК Номенклатура
		|ПОМЕСТИТЬ ТабличнаяЧастьТовары
		|ИЗ
		|	&ТабличнаяЧастьТовары КАК ТабЧастьДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СправочникНоменклатура.Ссылка) КАК Товары
		|ПОМЕСТИТЬ КоличествоТоваров
		|ИЗ
		|	ТабличнаяЧастьТовары КАК ДокументТабЧасти
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО ДокументТабЧасти.Номенклатура = СправочникНоменклатура.Ссылка
		|ГДЕ
		|	(СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
		|			ИЛИ СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА КоличествоТоваров.Товары > 0
		|			ТОГДА Склады.Подразделение
		|		ИНАЧЕ &ПодразделениеДокумента
		|	КОНЕЦ КАК Подразделение
		|ПОМЕСТИТЬ ТаблицаПодразделений
		|ИЗ
		|	КоличествоТоваров КАК КоличествоТоваров,
		|	ТабличнаяЧастьТовары КАК ТабличнаяЧастьТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
		|		ПО ТабличнаяЧастьТовары.Склад = Склады.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПодразделений.Подразделение КАК Подразделение
		|ИЗ
		|	ТаблицаПодразделений КАК ТаблицаПодразделений");
	
		
	Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
	
	Запрос.УстановитьПараметр("ТабличнаяЧастьТовары",   СтруктураОбъекта.ТабЧастьТовары);
	Запрос.УстановитьПараметр("ПодразделениеДокумента", СтруктураОбъекта.ПодразделениеОбъекта);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%НаименованиеКолонкиСклада%",       СтруктураОбъекта.НаименованиеКолонкиСклад);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%НаименованиеКолонкиНоменклатуры%", СтруктураОбъекта.НаименованиеКолонкиНоменклатура);
	
	МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
	
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение, указанное в складе табличной части объекта'");
	ПараметрыЗапроса.Подразделения = МассивОбъектов;
	ПараметрыЗапроса.Организации   = СформироватьМассивОрганизаций(СтруктураОбъекта.Организация);
	
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
КонецПроцедуры

Процедура ОтборПоПодразделениюИзСкладаИлиПодразделениюТабЧастиТоварыИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	ТабЧастьДокумента.Склад КАК Склад,
		|	ТабЧастьДокумента.Подразделение КАК ПодразделениеТабЧасти,
		|	ТабЧастьДокумента.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ ТабличнаяЧастьТовары
		|ИЗ
		|	&ТабличнаяЧастьТовары КАК ТабЧастьДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
		|			ИЛИ СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
		|			ТОГДА Склады.Подразделение
		|		ИНАЧЕ ТабЧастьТовары.ПодразделениеТабЧасти
		|	КОНЕЦ КАК Подразделение
		|ПОМЕСТИТЬ ТаблицаПодразделений
		|ИЗ
		|	ТабличнаяЧастьТовары КАК ТабЧастьТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
		|		ПО ТабЧастьТовары.Склад = Склады.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО ТабЧастьТовары.Номенклатура = СправочникНоменклатура.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПодразделений.Подразделение КАК Подразделение
		|ИЗ
		|	ТаблицаПодразделений КАК ТаблицаПодразделений");
	
		
	Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
	
	Запрос.УстановитьПараметр("ТабличнаяЧастьТовары", Объект.Товары);
	
	МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
	
	ПараметрыЗапроса.РеквизитПроверкиПодразделения = НСтр("ru = 'Подразделение, указанное в складе или табличной части объекта'");
	ПараметрыЗапроса.Подразделения = МассивОбъектов;
	ПараметрыЗапроса.Организации   = СформироватьМассивОрганизаций(Объект.Организация);
	
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
КонецПроцедуры

Процедура ОтборПоРегистраторуНабораЗаписей(Объект, ПараметрыЗапроса, ФормироватьИерархию) 
	
	Если ПроверитьНаличиеСвязаннойСсылки(Объект.Регистратор, ПараметрыЗапроса) Тогда
		ОбъектДляОпределенияПараметровЗапроса = Объект.Регистратор.ПолучитьОбъект();
		ПараметрыЗапроса = ОпределитьПараметрыЗапросаОбъекта(ОбъектДляОпределенияПараметровЗапроса, ТипЗнч(ОбъектДляОпределенияПараметровЗапроса), ФормироватьИерархию);
	КонецЕсли;
	
КонецПроцедуры

Функция ДоговорКредитаИДепозитаВТабличнойЧастиНеСоответствуетФильтру(ЭлементДанных, УзелПланаОбмена, СообщениеПользователю,
	ИмяТабличнойЧасти, ИмяРеквизита)
	
	Отказ = Ложь;
	
	ТабличнаяЧасть = ЭлементДанных[ИмяТабличнойЧасти];
	
	ТекстЗапроса = "ВЫБРАТЬ
		|	&ИмяПоляДоговорКредитаДепозита КАК ДоговорКредитаДепозита
		|ПОМЕСТИТЬ ТабличнаяЧастьДоговорыКредитовДепозитов
		|ИЗ
		|	&ТабличнаяЧасть КАК ТабЧасть
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	
		|	ДоговорыКредитовИДепозитов.Подразделение КАК Подразделение,
		|	ДоговорыКредитовИДепозитов.Организация КАК Организация,
		|	ВЫБОР
		|		КОГДА ДоговорыКредитовИДепозитов.Ссылка ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьБитаяСсылкаДоговора,
		|	ВЫБОР
		|		КОГДА СтруктураПредприятия.Ссылка ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьБитаяСсылкаПодразделения,
		|	ВЫБОР
		|		КОГДА Организации.Ссылка ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьБитаяСсылкаОрганизаций
		|ПОМЕСТИТЬ ТаблицаДоговоровПодразделенийОрганизаций
		|ИЗ
		|	ТабличнаяЧастьДоговорыКредитовДепозитов КАК ТабличнаяЧастьДоговорыКредитовДепозитов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКредитовИДепозитов КАК ДоговорыКредитовИДепозитов
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|			ПО ДоговорыКредитовИДепозитов.Подразделение = СтруктураПредприятия.Ссылка
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|			ПО ДоговорыКредитовИДепозитов.Организация = Организации.Ссылка
		|		ПО ТабличнаяЧастьДоговорыКредитовДепозитов.ДоговорКредитаДепозита = ДоговорыКредитовИДепозитов.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДоговоровПодразделенийОрганизаций.Подразделение КАК Подразделение,
		|	ТаблицаДоговоровПодразделенийОрганизаций.Организация КАК Организация
		|ИЗ
		|	ТаблицаДоговоровПодразделенийОрганизаций КАК ТаблицаДоговоровПодразделенийОрганизаций
		|ГДЕ
		|	ТаблицаДоговоровПодразделенийОрганизаций.ЕстьБитаяСсылкаДоговора = ЛОЖЬ
		|	И ТаблицаДоговоровПодразделенийОрганизаций.ЕстьБитаяСсылкаПодразделения = ЛОЖЬ
		|	И ТаблицаДоговоровПодразделенийОрганизаций.ЕстьБитаяСсылкаОрганизаций = ЛОЖЬ";
		
	Запрос = Новый Запрос;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса , "&ИмяПоляДоговорКредитаДепозита", "ТабЧасть." + ИмяРеквизита);
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ТабличнаяЧасть", ТабличнаяЧасть);
	Запрос.УстановитьПараметр("МассивДоступныхПодразделений",     МассивДоступныхПодразделений(УзелПланаОбмена));
	Запрос.УстановитьПараметр("МассивДоступныхОрганизаций",       МассивДоступныхОрганизаций(УзелПланаОбмена));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		СообщениеПользователю = НСтр("ru = 'Договор кредитов и депозитов в табличной части 
		|не соответствует настройкам узла распределенной информационной базы.'");
		Отказ = Истина;
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

Функция ОбъектРасчетовВТабличнойЧастиНеСоответствуетФильтру(ЭлементДанных, УзелПланаОбмена, СообщениеПользователю,
	ИмяТабличнойЧасти, ИмяРеквизита)
	
	Отказ = Ложь;
	
	ОбъектыРасчетов = ЭлементДанных[ИмяТабличнойЧасти].Выгрузить();
	ОбъектыРасчетов.Свернуть(ИмяРеквизита);
	
	Для Каждого ОбъектРасчетов Из ОбъектыРасчетов Цикл
		
		СсылкаНаОбъектРасчетов = ОбъектРасчетов[ИмяРеквизита];
		Если ТипЗнч(СсылкаНаОбъектРасчетов) = Тип("СправочникСсылка.ОбъектыРасчетов") Тогда
			СсылкаНаОбъектРасчетов = СсылкаНаОбъектРасчетов.Объект;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СсылкаНаОбъектРасчетов) Тогда
			
			Если ОбщегоНазначения.СсылкаСуществует(СсылкаНаОбъектРасчетов) Тогда
				
				ПараметрыЗапроса = ОпределитьПараметрыЗапросаОбъекта(СсылкаНаОбъектРасчетов.ПолучитьОбъект(),,Ложь);
				
				Если ПараметрыЗапроса.Отказ Тогда
					Отказ = Истина;
				Иначе
					Отказ = Не ДанныеОбъектаСоответсвуютНастройкамУзла(ПараметрыЗапроса, Ложь, УзелПланаОбмена);
				КонецЕсли;
				
			Иначе
				Отказ = Истина;
			КонецЕсли;
			
			Если Отказ Тогда
				СообщениеПользователю = НСтр("ru = 'Объект расчетов в табличной части не соответсвует настройкам узла.'");
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Отказ;
	
КонецФункции

Функция БанковскийСчетНеСоответствуетФильтру(ЭлементДанных, УзелПланаОбмена, Получатель = Истина, СообщениеПользователю)
	
	Отказ = Ложь;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	БанковскиеСчетаОрганизаций.Ссылка,
		|	БанковскиеСчетаОрганизаций.Подразделение КАК Подразделение,
		|	БанковскиеСчетаОрганизаций.Владелец КАК Организация,
		|	ВЫБОР
		|		КОГДА БанковскиеСчетаОрганизаций.Ссылка ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьБитаяСсылкаСчета,
		|	ВЫБОР
		|		КОГДА СтруктураПредприятия.Ссылка ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьБитаяСсылкаПодразделения,
		|	ВЫБОР
		|		КОГДА Организации.Ссылка ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьБитаяСсылкаОрганизаций
		|ПОМЕСТИТЬ ТаблицаСчетовПодразделенийОрганизаций
		|ИЗ
		|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|		ПО БанковскиеСчетаОрганизаций.Подразделение = СтруктураПредприятия.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО БанковскиеСчетаОрганизаций.Владелец = Организации.Ссылка
		|ГДЕ
		|	БанковскиеСчетаОрганизаций.Ссылка = &Ссылка
		|	И БанковскиеСчетаОрганизаций.Подразделение В(&МассивДоступныхПодразделений)
		|	И БанковскиеСчетаОрганизаций.Владелец В(&МассивДоступныхОрганизаций)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	БанковскиеСчетаОрганизаций.Ссылка,
		|	БанковскиеСчетаОрганизаций.Организация,
		|	БанковскиеСчетаОрганизаций.Подразделение
		|ИЗ
		|	ТаблицаСчетовПодразделенийОрганизаций КАК БанковскиеСчетаОрганизаций
		|ГДЕ
		|	БанковскиеСчетаОрганизаций.ЕстьБитаяСсылкаСчета = ЛОЖЬ
		|	И БанковскиеСчетаОрганизаций.ЕстьБитаяСсылкаПодразделения = ЛОЖЬ
		|	И БанковскиеСчетаОрганизаций.ЕстьБитаяСсылкаОрганизаций = ЛОЖЬ");
		
	Если Получатель Тогда
		Запрос.УстановитьПараметр("Ссылка", ЭлементДанных.БанковскийСчетПолучатель);
	Иначе
		Запрос.УстановитьПараметр("Ссылка", ЭлементДанных.БанковскийСчет);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивДоступныхПодразделений", МассивДоступныхПодразделений(УзелПланаОбмена));
	Запрос.УстановитьПараметр("МассивДоступныхОрганизаций",   МассивДоступныхОрганизаций(УзелПланаОбмена));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		СообщениеПользователю = НСтр("ru = 'Банковский счет%1 не соответствует настройкам узла распределенной информационной базы.'");
		СообщениеПользователю = СтрШаблон(СообщениеПользователю, ?(Получатель, НСтр("ru = ' получатель'"), ""));
		Отказ = Истина;
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

Функция КассыПолучателяНеСоответствуютФильтру(ЭлементДанных, УзелПланаОбмена, СообщениеПользователю)
	
	Отказ = Ложь;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	Кассы.Ссылка,
		|	Кассы.Подразделение КАК Подразделение,
		|	Кассы.Владелец КАК Организация,
		|	ВЫБОР
		|		КОГДА Кассы.Ссылка ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьБитаяСсылкаКассы,
		|	ВЫБОР
		|		КОГДА СтруктураПредприятия.Ссылка ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьБитаяСсылкаПодразделения,
		|	ВЫБОР
		|		КОГДА Организации.Ссылка ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьБитаяСсылкаОрганизаций
		|ПОМЕСТИТЬ ТаблицаКассПодразделенийОрганизаций
		|ИЗ
		|	Справочник.Кассы КАК Кассы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|		ПО Кассы.Подразделение = СтруктураПредприятия.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО Кассы.Владелец = Организации.Ссылка
		|ГДЕ
		|	Кассы.Ссылка = &Ссылка
		|	И Кассы.Подразделение В(&МассивДоступныхПодразделений)
		|	И Кассы.Владелец В(&МассивДоступныхОрганизаций)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаКассПодразделенийОрганизаций.Ссылка,
		|	ТаблицаКассПодразделенийОрганизаций.Подразделение,
		|	ТаблицаКассПодразделенийОрганизаций.Организация
		|ИЗ
		|	ТаблицаКассПодразделенийОрганизаций КАК ТаблицаКассПодразделенийОрганизаций
		|ГДЕ
		|	ТаблицаКассПодразделенийОрганизаций.ЕстьБитаяСсылкаКассы = ЛОЖЬ
		|	И ТаблицаКассПодразделенийОрганизаций.ЕстьБитаяСсылкаПодразделения = ЛОЖЬ
		|	И ТаблицаКассПодразделенийОрганизаций.ЕстьБитаяСсылкаОрганизаций = ЛОЖЬ");
		
	Запрос.УстановитьПараметр("Ссылка", ЭлементДанных.КассаПолучатель);
	Запрос.УстановитьПараметр("МассивДоступныхПодразделений", МассивДоступныхПодразделений(УзелПланаОбмена));
	Запрос.УстановитьПараметр("МассивДоступныхОрганизаций",   МассивДоступныхОрганизаций(УзелПланаОбмена));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		СообщениеПользователю = НСтр("ru = 'Касса получатель не соответствует настройкам узла распределенной информационной базы.'");
		Отказ = Истина;
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

Функция ПодразделенияВТабличнойЧастиНеСоответствуетФильтру(ЭлементДанных, УзелПланаОбмена, СообщениеПользователю)
	
	Отказ = Ложь;
	
	ТабличнаяЧастьРасшифровкаПлатежа = ЭлементДанных.РасшифровкаПлатежа;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	ТабЧасть.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ТабличнаяЧастьРасшифровкаПлатежа
		|ИЗ
		|	&ТабличнаяЧастьРасшифровкаПлатежа КАК ТабЧасть
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабличнаяЧастьРасшифровкаПлатежа.Подразделение КАК Подразделение,
		|	ВЫБОР
		|		КОГДА Подразделения.Ссылка ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьБитаяСсылка
		|ПОМЕСТИТЬ ТаблицаПодразделений
		|ИЗ
		|	ТабличнаяЧастьРасшифровкаПлатежа КАК ТабличнаяЧастьРасшифровкаПлатежа
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК Подразделения
		|		ПО ТабличнаяЧастьРасшифровкаПлатежа.Подразделение = Подразделения.Ссылка
		|ГДЕ
		|	ТабличнаяЧастьРасшифровкаПлатежа.Подразделение В(&МассивДоступныхПодразделений)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаПодразделений.Подразделение КАК Подразделение
		|ИЗ
		|	ТаблицаПодразделений КАК ТаблицаПодразделений
		|ГДЕ
		|	ТаблицаПодразделений.ЕстьБитаяСсылка = ЛОЖЬ");
		
	Запрос.УстановитьПараметр("ТабличнаяЧастьРасшифровкаПлатежа", ТабличнаяЧастьРасшифровкаПлатежа);
	Запрос.УстановитьПараметр("МассивДоступныхПодразделений",     МассивДоступныхПодразделений(УзелПланаОбмена));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		СообщениеПользователю = НСтр("ru = 'Подразделение в табличной части не соответствует настройкам узла распределенной информационной базы.'");
		Отказ = Истина;
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

Функция ПодразделениеВШапкеНеСоответствуетФильтру(ЭлементДанных, УзелПланаОбмена, СообщениеПользователю)
	
	Отказ = Ложь;
	
	Если ЗначениеЗаполнено(ЭлементДанных.Подразделение)
		И ОбщегоНазначения.СсылкаСуществует(ЭлементДанных.Подразделение) Тогда
		
		МассивДоступныхЗначений = МассивДоступныхПодразделений(УзелПланаОбмена);
		Если МассивДоступныхЗначений.Найти(ЭлементДанных.Подразделение) = Неопределено Тогда
			Отказ = Истина;
		КонецЕсли;
		
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		СообщениеПользователю = НСтр("ru = 'Подразделение документа не соответствует настройкам узла распределенной информационной базы.'");
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

Функция ОбъединитьУсловияОтбора(ПараметрыЗапроса, ПараметрыЗапросаДокументаОснования)
	
	Если Не ПараметрыЗапросаДокументаОснования.Отказ Тогда
		
		Если ПараметрыЗапросаДокументаОснования.ФильтрПоПодразделению Тогда
			ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
		КонецЕсли;
		
		Если ПараметрыЗапросаДокументаОснования.ФильтрПоОрганизации Тогда
			ПараметрыЗапроса.ФильтрПоОрганизации = Истина;
		КонецЕсли;
		
		Если ПараметрыЗапросаДокументаОснования.ФильтрПоВидуЦен Тогда
			ПараметрыЗапроса.ФильтрПоВидуЦен = Истина;
		КонецЕсли;
		
		Если ПараметрыЗапроса.ФильтрПоПодразделению Тогда
			ПараметрыЗапроса.Подразделения = ОбъединитьМассивы(ПараметрыЗапроса.Подразделения, ПараметрыЗапросаДокументаОснования.Подразделения);
		КонецЕсли;
		
		Если ПараметрыЗапроса.ФильтрПоОрганизации Тогда
			ПараметрыЗапроса.Организации = ОбъединитьМассивы(ПараметрыЗапроса.Организации, ПараметрыЗапросаДокументаОснования.Организации);
		КонецЕсли;
		
		Если ПараметрыЗапроса.ФильтрПоВидуЦен Тогда
			ПараметрыЗапроса.ВидыЦен = ОбъединитьМассивы(ПараметрыЗапроса.ВидыЦен, ПараметрыЗапросаДокументаОснования.ВидыЦен);
		КонецЕсли;
	Иначе
		ПараметрыЗапроса = ПараметрыЗапросаДокументаОснования;
	КонецЕсли;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

#КонецОбласти 

#Область ОбработчикиОбновленияИнформационнойБазы

#КонецОбласти

#КонецОбласти
