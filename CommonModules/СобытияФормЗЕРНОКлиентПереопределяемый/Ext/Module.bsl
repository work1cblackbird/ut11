#Область СлужебныйПрограммныйИнтерфейс

Процедура ПослеЗаписи(Форма, ПараметрыЗаписи) Экспорт
	
	//++ НЕ ГОСИС
	
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

#Область СобытияЭлементовФорм

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
// Параметры:
//   Форма                   - ФормаКлиентскогоПриложения - форма, из которой происходит вызов процедуры.
//   Элемент                 - Произвольный     - элемент-источник события "При изменении"
//   ДополнительныеПараметры - Структура        - значения дополнительных параметров влияющих на обработку.
//
Процедура ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры) Экспорт
	
	//++ НЕ ГОСИС
	
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
Процедура ПриВыбореЭлемента(Форма, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ДополнительныеПараметры = Неопределено) Экспорт
	
	//++ НЕ ГОСИС
	
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
Процедура ПриАктивизацииЯчейки(Форма, Элемент, ДополнительныеПараметры) Экспорт
	
	//++ НЕ ГОСИС
	
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
Процедура ПриНачалеРедактирования(Форма, Элемент, НоваяСтрока, Копирование, ДополнительныеПараметры) Экспорт
	
	//++ НЕ ГОСИС
	
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Номенклатура

// Выполняется при обработке выбора. Требуется выделить и обработать событие выбора номенклатуры.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - Метод формы, который обрабатывает событие выбора.
//  ВыбранноеЗначение       - ОпределяемыйТип.Номенклатура - Результат выбора.
//  ИсточникВыбора          - ФормаКлиентскогоПриложения - Форма, в которой произведен выбор.
Процедура ОбработкаВыбораНоменклатуры(ОповещениеПриЗавершении, ВыбранноеЗначение, ИсточникВыбора) Экспорт
	
	//++ НЕ ГОСИС
	
	Если ТипЗнч(ОповещениеПриЗавершении.Модуль) = Тип("ФормаКлиентскогоПриложения") Тогда
		ОповещениеПриЗавершении.Модуль.Модифицированность = Истина;
	КонецЕсли;
	Если СтрНачинаетсяС(ИсточникВыбора.ИмяФормы, "Справочник.Номенклатура") Тогда
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, ВыбранноеЗначение);
	КонецЕсли;
	
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Выполняет действия при изменении номенклатуры в строке таблицы формы.
//
// Параметры:
//  Форма                  - ФормаКлиентскогоПриложения - форма, в которой произошло событие,
//  ТекущаяСтрока          - ДанныеФормыЭлементКоллекции - текущие данные редактируемой строки таблицы товаров,
//  КэшированныеЗначения   - Структура - сохраненные значения параметров, используемых при обработке,
//  ПараметрыУказанияСерий - ФиксированнаяСтруктура - параметры указаний серий формы
Процедура ПриИзмененииНоменклатуры(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыУказанияСерий = Неопределено) Экспорт
	
	//++ НЕ ГОСИС
	СтруктураДействий = Новый Структура;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Характеристика") Тогда
		СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу",
			ТекущаяСтрока.Характеристика);
			
		СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Серия")
			И ПараметрыУказанияСерий <> Неопределено Тогда
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры",
			Новый Структура("Номенклатура", "ТипНоменклатуры"));
			
		ИсточникЗначенийВФорме = Форма;
		ПараметрыУказанияСерийКопия = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ПараметрыУказанияСерий, Ложь);
			
		ИмяТЧ = "Товары";
		Если ПараметрыУказанияСерий <> Неопределено Тогда
			
			Если ПараметрыУказанияСерийКопия.Свойство("Сырье") Тогда
				ПараметрыУказанияСерийКопия = ПараметрыУказанияСерийКопия.Сырье;
			КонецЕсли;
			
			Если ПараметрыУказанияСерийКопия.ИмяИсточникаЗначенийВФормеОбъекта = "ТекущиеДанные" Тогда
				ИсточникЗначенийВФорме = ТекущаяСтрока;
			ИначеЕсли ЗначениеЗаполнено(ПараметрыУказанияСерийКопия.ИмяИсточникаЗначенийВФормеОбъекта) Тогда
				ИсточникЗначенийВФорме = Форма[ПараметрыУказанияСерийКопия.ИмяИсточникаЗначенийВФормеОбъекта];
			КонецЕсли;
		КонецЕсли;
	
		Склад = Неопределено;
		СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус",
			Новый Структура("ПараметрыУказанияСерий, Склад", ПараметрыУказанияСерийКопия, Склад));
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "ОКПД2") Тогда
		СтруктураДействий.Вставить("ЗаполнитьКодОКПД2", Новый Структура("Номенклатура", "ОКПД2"));
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "ЕдиницаИзмерения") Тогда
		СтруктураДействий.Вставить("ЗаполнитьПризнакЕдиницаИзмерения", Новый Структура("Номенклатура", "ЕдиницаИзмерения"));
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "КодТНВЭД") Тогда
		СтруктураДействий.Вставить("ЗаполнитьКодТНВЭД");
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "КоличествоЗЕРНО")
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Количество")
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ЕдиницаИзмеренияКилограмм") Тогда
		Если Форма.ИмяФормы = "Документ.ЗапросОстатковПартийЗЕРНО.Форма.ФормаДокумента" Тогда
			ТекущаяСтрока.Количество = 0;
		КонецЕсли;
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницПоЗЕРНО",
			Новый Структура("Упаковка", Форма.ЕдиницаИзмеренияКилограмм));
	КонецЕсли;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// Открывает форму подбора номенклатуры.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой вызывается команда открытия обработки подбора,
//  ОповещениеПриЗавершении - ОписаниеОповещения - процедура, вызываемая после закрытия формы подбора.
Процедура ОткрытьФормуПодбораНоменклатуры(Форма, ОповещениеПриЗавершении = Неопределено) Экспорт
	
	//++ НЕ ГОСИС
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор номенклатуры в %Документ%'");
	
	Если ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Форма.Объект.Ссылка);
	Иначе
		ТипОбъектаФормыПодбора = ТипЗнч(Форма.Объект.Ссылка);
		Если ТипОбъектаФормыПодбора = Тип("ДокументСсылка.ВнесениеСведенийОСобранномУрожаеЗЕРНО") Тогда
			ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru='Внесение сведений о собранном урожае ФГИС ""Зерно""'"));
		ИначеЕсли ТипОбъектаФормыПодбора = Тип("ДокументСсылка.ОформлениеСДИЗЗЕРНО") Тогда
			ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru='оформление СДИЗ ФГИС ""Зерно""'"));
		ИначеЕсли ТипОбъектаФормыПодбора = Тип("ДокументСсылка.СписаниеПартийЗЕРНО") Тогда
			ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru='списание партий ФГИС ""Зерно""'"));
		ИначеЕсли ТипОбъектаФормыПодбора = Тип("ДокументСсылка.ФормированиеПартийЗЕРНО") Тогда
			ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru='формирование партий ФГИС ""Зерно""'"));
		ИначеЕсли ТипОбъектаФормыПодбора = Тип("ДокументСсылка.ФормированиеПартийПриПроизводствеЗЕРНО") Тогда
			ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru='формирование партий при производстве ФГИС ""Зерно""'"));
		КонецЕсли;
	КонецЕсли;
	
	Если ТипОбъектаФормыПодбора = Тип("ДокументСсылка.ВнесениеСведенийОСобранномУрожаеЗЕРНО") Тогда
		ОсобенностьУчета = Новый Массив;
		ОсобенностьУчета.Добавить(ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.Зерно"));
		ОсобенностьУчета.Добавить(ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ЗерноВЕТИС"));
	ИначеЕсли ТипОбъектаФормыПодбора = Тип("ДокументСсылка.ФормированиеПартийПриПроизводствеЗЕРНО") Тогда
		ОсобенностьУчета = Новый Массив;
		ОсобенностьУчета.Добавить(ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.Зерно"));
		ОсобенностьУчета.Добавить(ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ЗерноВЕТИС"));
		ОсобенностьУчета.Добавить(ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ПродуктыПереработкиЗерна"));
		ОсобенностьУчета.Добавить(ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ПродуктыПереработкиЗернаВЕТИС"));
	Иначе
		ФильтрВидПродукции = ИнтеграцияЗЕРНОКлиентСервер.РасширенныеВидыПродукции(Форма.Объект.ВидПродукции);
		ОсобенностьУчета = Новый Массив;
		Для Каждого ВидПродукции Из ФильтрВидПродукции Цикл
			ОсобенностьУчета.Добавить(ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукции));
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОсобенностьУчета",                        ОсобенностьУчета);
	ПараметрыФормы.Вставить("РежимПодбораБезКоличественныхПараметров", Истина);
	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров",       Истина);
	ПараметрыФормы.Вставить("СкрыватьКолонкуВидЦены",                  Истина);
	ПараметрыФормы.Вставить("СкрыватьКомандуЦеныНоменклатуры",         Истина);
	ПараметрыФормы.Вставить("СкрыватьКомандуОстаткиНаСкладах",         Истина);
	ПараметрыФормы.Вставить("СкрыватьКнопкуЗапрашиватьКоличество",     Истина);
	ПараметрыФормы.Вставить("Заголовок",                               ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата",                                    Форма.Объект.Дата);
	ПараметрыФормы.Вставить("Документ",                                Форма.Объект.Ссылка);
	ПараметрыФормы.Вставить("СкрыватьКолонкуВидЦены",                  Истина);
	
	ОткрытьФорму("Обработка.ПодборТоваровВДокументПродажи.Форма",
				ПараметрыФормы,
				Форма,
				Форма.УникальныйИдентификатор,
				,
				,
				ОповещениеПриЗавершении);
	
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// Обрабатывает результат выбора в форму документа ЗЕРНО (например из формы подбора номенклатуры,
//   при использовании множественного выбора вместо закрытия формы подбора с общим результатом).
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой вызывается команда открытия обработки сопоставления,
//  ВыбранноеЗначение - Произвольный - результат выбора.
//  ИсточникВыбора    - ФормаКлиентскогоПриложения - форма, в которой произведен выбор.
Процедура ОбработкаВыбора(Форма, ВыбранноеЗначение, ИсточникВыбора) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ХарактеристикиНоменклатуры

// Выполняется при начале выбора характеристики. Требуется определить и открыть форму выбора.
//
// Параметры:
//  Владелец     - ФормаКлиентскогоПриложения            - форма, в которой вызывается команда выбора характеристики.
//  ДанныеСтроки - ДанныеФормыЭлементКоллекции - текущие данные строки таблицы товаров откуда производится выбор.
//  СтандартнаяОбработка - Булево - Выключается в переопределении
//  ИмяКолонкиНоменклатура - Строка - имя колонки с данными номенклатуры.
//  Описание - ОписаниеОповещения - Вызывается при выборе значения в форме выбора.
//
Процедура ПриНачалеВыбораХарактеристики(
	Владелец, ДанныеСтроки, СтандартнаяОбработка, ИмяКолонкиНоменклатура="Номенклатура", Описание=Неопределено) Экспорт
	
	//++ НЕ ГОСИС
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыХарактеристики = Новый Структура;
	ПараметрыХарактеристики.Вставить("Номенклатура", ДанныеСтроки[ИмяКолонкиНоменклатура]);
	
	ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.ФормаВыбора", ПараметрыХарактеристики, Владелец,,,, Описание);
	
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// Выполняет действия при изменении характеристики номенклатуры в строке таблицы формы.
//
// Параметры:
//  Форма                - ФормаКлиентскогоПриложения - форма, в которой произошло событие,
//  ТекущаяСтрока        - ДанныеФормыЭлементКоллекции - текущие данные редактируемой строки таблицы товаров,
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке,
Процедура ПриИзмененииХарактеристики(Форма, ТекущаяСтрока, КэшированныеЗначения) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Серии

// Выполняет действия при изменении серии номенклатуры в строке таблицы формы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке,
//  ПараметрыУказанияСерий - ФиксированнаяСтруктура - параметры указаний серий формы
Процедура ПриИзмененииСерии(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыУказанияСерий) Экспорт
	
	//++ НЕ ГОСИС
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	ВыбранноеЗначение.Значение = ТекущаяСтрока.Серия;
	
	Попытка
		ВыбранноеЗначение.ИдентификаторТекущейСтроки = ТекущаяСтрока.ПолучитьИдентификатор();
	Исключение
		// это шапка (текущей строкой передана форма)
	КонецПопытки;
	
	Если Форма.ИмяФормы = "Документ.ФормированиеПартийПриПроизводствеЗЕРНО.Форма.ФормаДокумента" Тогда
		Если ЗначениеЗаполнено(ВыбранноеЗначение.ИдентификаторТекущейСтроки) Тогда
			НоменклатураКлиент.ОбработатьУказаниеСерии(Форма, ПараметрыУказанияСерий.Сырье, ВыбранноеЗначение);
		Иначе
			НоменклатураКлиент.ОбработатьУказаниеСерии(Форма, ПараметрыУказанияСерий.Шапка, ВыбранноеЗначение);
		КонецЕсли;
	Иначе
		НоменклатураКлиент.ОбработатьУказаниеСерии(Форма, ПараметрыУказанияСерий, ВыбранноеЗначение);
	КонецЕсли;
	
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// Выполняется при обработке выбора. Требуется выделить и обработать событие выбора серии.
// 
// Параметры:
//  Форма                  - ФормаКлиентскогоПриложения - Форма для которой требуется обработать событие выбора.
//  ВыбранноеЗначение      - ОпределяемыйТип.СерияНоменклатуры - результат выбора.
//  ИсточникВыбора         - ФормаКлиентскогоПриложения - Форма, в которой произведен выбор.
//  ПараметрыУказанияСерий - ФиксированнаяСтруктура - параметры указаний серий формы.
//  ТекущиеДанные          - Произвольный - текущие данные
Процедура ОбработкаВыбораСерии(Форма, ВыбранноеЗначение, ИсточникВыбора, ПараметрыУказанияСерий, ТекущиеДанные = Неопределено) Экспорт
	
	//++ НЕ ГОСИС
	
	Если НоменклатураКлиент.ЭтоУказаниеСерий(ИсточникВыбора) Тогда
		
		Если Форма.ИмяФормы = "Документ.ФормированиеПартийПриПроизводствеЗЕРНО.Форма.ФормаДокумента"
			И ИсточникВыбора.ПараметрыУказанияСерий.ИмяТЧТовары = "Сырье" Тогда
				НоменклатураКлиент.ОбработатьУказаниеСерии(Форма, ИсточникВыбора.ПараметрыУказанияСерий, ВыбранноеЗначение);
		Иначе
			НоменклатураКлиент.ОбработатьУказаниеСерии(Форма, ИсточникВыбора.ПараметрыУказанияСерий, ВыбранноеЗначение, ТекущиеДанные);
		КонецЕсли;
	КонецЕсли;
	
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Количество

// Выполняет действия при изменении подобранного количества (поле Количество) в строке таблицы формы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  ЕдиницаИзмеренияКилограмм - ОпределяемыйТип.Упаковка - единица измерения по классификатору "Килограмм",
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке.
Процедура ПриИзмененииКоличества(Форма, ТекущаяСтрока, ЕдиницаИзмеренияКилограмм, КэшированныеЗначения) Экспорт
	
	//++ НЕ ГОСИС
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	КонецЕсли;
	
	Коэффициент = КэшированныеЗначения.КоэффициентыУпаковок[ТекущаяСтрока.Номенклатура];
	Если Коэффициент = Неопределено Тогда
		Коэффициент = ИнтеграцияИСВызовСервера.КоэффициентУпаковки(ЕдиницаИзмеренияКилограмм, ТекущаяСтрока.Номенклатура, КэшированныеЗначения);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Коэффициент) Тогда
		Коэффициент = 1;
	КонецЕсли;
	
	ТекущаяСтрока.КоличествоЗЕРНО = ТекущаяСтрока.Количество / Коэффициент;
	
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// Выполняет действия при изменении количества в килограммах (поле КоличествоЗЕРНО) в строке таблицы формы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  ЕдиницаИзмеренияКилограмм - ОпределяемыйТип.Упаковка - единица измерения по классификатору "Килограмм",
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке.
Процедура ПриИзмененииКоличестваВКилограммах(Форма, ТекущаяСтрока, ЕдиницаИзмеренияКилограмм, КэшированныеЗначения) Экспорт
	
	//++ НЕ ГОСИС
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
	
		Если КэшированныеЗначения = Неопределено Тогда
			КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		КонецЕсли;
		
		Коэффициент = КэшированныеЗначения.КоэффициентыУпаковок[ТекущаяСтрока.Номенклатура];
		Если Коэффициент = Неопределено Тогда
			Коэффициент = ИнтеграцияИСВызовСервера.КоэффициентУпаковки(ЕдиницаИзмеренияКилограмм, ТекущаяСтрока.Номенклатура);
			КэшированныеЗначения.КоэффициентыУпаковок.Вставить(ТекущаяСтрока.Номенклатура, Коэффициент);
		КонецЕсли;
		
		ТекущаяСтрока.Количество = ТекущаяСтрока.КоличествоЗЕРНО * Коэффициент;
		
	Иначе
		ТекущаяСтрока.Количество = 0;
	КонецЕсли;
	
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

// Выполняется при начале выбора договора ИС. Требуется определить и открыть форму выбора.
//
// Параметры:
//  Владелец     - ФормаКлиентскогоПриложения  - форма, в которой вызывается команда выбора договора.
//  ДанныеДоговора - Структура - данные договора хранения ЗЕРНО, для которого выбирается прикладной договор:
//  	Договор - ОпределеяемыйТип.ДоговорКонтрагентаИС - текущий договор.
//  	Контрагент - ОпределяемыйТип.ОрганизацияКонтрагентГосИС - организацияя/контрагент с которым заключен договор.
//  	Организация - ОпределеяемыйТип.Организация - организация владелец договора.
//  СтандартнаяОбработка - Булево - Выключается в переопределении
//  ОповещениеПриЗавершении - ОписаниеОповещения - Вызывается при выборе значения в форме выбора.
//
Процедура ПриНачалеВыбораДоговораОрганизацииКонтрагента(Владелец, ДанныеДоговора, СтандартнаяОбработка, ОповещениеПриЗавершении) Экспорт
	
	//++ НЕ ГОСИС
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(ДанныеДоговора.Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Организация", ДанныеДоговора.Организация);
	СтруктураОтбора.Вставить("ПометкаУдаления", Ложь);
	
	СтруктураПараметровВыбора = Новый Структура;
	СтруктураПараметровВыбора.Вставить("РежимВыбора", Истина);
	
	Если ТипЗнч(ДанныеДоговора.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
		
		СтруктураОтбора.Вставить("ОрганизацияПолучатель", ДанныеДоговора.Контрагент);
		СтруктураПараметровВыбора.Вставить("Отбор",СтруктураОтбора);
		ОткрытьФорму("Справочник.ДоговорыМеждуОрганизациями.Форма.ФормаВыбора",
			СтруктураПараметровВыбора,
			Владелец,
			Владелец,,,
			ОповещениеПриЗавершении);
		
	Иначе
		
		СтруктураОтбора.Вставить("Контрагент", ДанныеДоговора.Контрагент);
		СтруктураПараметровВыбора.Вставить("Отбор",СтруктураОтбора);
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.Форма.ФормаВыбора",
			СтруктураПараметровВыбора,
			Владелец,
			Владелец,,,
			ОповещениеПриЗавершении);
		
	КонецЕсли;
	
	//-- НЕ ГОСИС
	
КонецПроцедуры

#КонецОбласти
