#Область СлужебныйПрограммныйИнтерфейс

Процедура ПодготовитьСтрокиВыписки(ДокументыКЗагрузке, БанковскийСчет, РеквизитыСчета, НастройкиЗагрузки) Экспорт
	
	ТипыПлатежныхДокументовПоступления = Новый Соответствие;
	ТипыПлатежныхДокументовПоступления.Вставить("ПЛАТЕЖНОЕПОРУЧЕНИЕ", Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение);
	ТипыПлатежныхДокументовПоступления.Вставить("ПЛАТЕЖНОЕТРЕБОВАНИЕ", Перечисления.ТипыПлатежныхДокументов.ПлатежноеТребование);
	ТипыПлатежныхДокументовПоступления.Вставить("ПЛАТЕЖНЫЙОРДЕР", Перечисления.ТипыПлатежныхДокументов.ПлатежныйОрдер);
	ТипыПлатежныхДокументовПоступления.Вставить("БАНКОВСКИЙОРДЕР", Перечисления.ТипыПлатежныхДокументов.ПлатежныйОрдер);
	ТипыПлатежныхДокументовПоступления.Вставить("МЕМОРИАЛЬНЫЙОРДЕР", Перечисления.ТипыПлатежныхДокументов.ПлатежныйОрдер);
	ТипыПлатежныхДокументовПоступления.Вставить("ИНКАССОВОЕПОРУЧЕНИЕ", Перечисления.ТипыПлатежныхДокументов.ИнкассовоеПоручение);
	
	ТипыПлатежныхДокументовСписания = Новый Соответствие;
	ТипыПлатежныхДокументовСписания.Вставить("ПЛАТЕЖНОЕПОРУЧЕНИЕ", Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение);
	ТипыПлатежныхДокументовСписания.Вставить("ПЛАТЕЖНОЕТРЕБОВАНИЕ", Перечисления.ТипыПлатежныхДокументов.ПлатежноеТребование);
	ТипыПлатежныхДокументовСписания.Вставить("ПЛАТЕЖНЫЙОРДЕР", Перечисления.ТипыПлатежныхДокументов.ПлатежныйОрдер);
	ТипыПлатежныхДокументовСписания.Вставить("БАНКОВСКИЙОРДЕР", Перечисления.ТипыПлатежныхДокументов.БанковскийОрдер);
	ТипыПлатежныхДокументовСписания.Вставить("МЕМОРИАЛЬНЫЙОРДЕР", Перечисления.ТипыПлатежныхДокументов.БанковскийОрдер);
	ТипыПлатежныхДокументовСписания.Вставить("ИНКАССОВОЕПОРУЧЕНИЕ", Перечисления.ТипыПлатежныхДокументов.ИнкассовоеПоручение);
	
	СтатусыСоставителейТаможенныхПлатежей = Новый Массив;
	СтатусыСоставителейТаможенныхПлатежей.Добавить("06");
	СтатусыСоставителейТаможенныхПлатежей.Добавить("16");
	СтатусыСоставителейТаможенныхПлатежей.Добавить("17");
	СтатусыСоставителейТаможенныхПлатежей.Добавить("18");
	СтатусыСоставителейТаможенныхПлатежей.Добавить("19");
	СтатусыСоставителейТаможенныхПлатежей.Добавить("20");
	
	СобственныеСчета = СобственныеСчета(БанковскийСчет);
	
	НомерСчета = РеквизитыСчета.НомерСчета;
	
	//++ Локализация
	НомерЛицевогоСчета = РеквизитыСчета.НомерЛицевогоСчета;
	РазделЛицевогоСчета = РеквизитыСчета.РазделЛицевогоСчета;
	//-- Локализация
	
	// Подготовка строк выписки к поиску документов и контрагентов, заполнение общих реквизитов. Первичное распознавание.
	Для каждого СтрокаДокумента Из ДокументыКЗагрузке Цикл
		
		Если Не СтрокаДокумента.Загружать 
			Или (Не СтрокаДокумента.ПлательщикСчет = НомерСчета
			И Не СтрокаДокумента.ПолучательСчет = НомерСчета) Тогда
			СтрокаДокумента.Загружать = Ложь;
			Продолжить;
		КонецЕсли;
		
		// Входящий или исходящий платеж
		Если СтрокаДокумента.ПлательщикСчет = НомерСчета И СтрокаДокумента.ПолучательСчет = НомерСчета Тогда // Если БИК банка изменился, а номер счета остался прежним
			Исходящий = ЗначениеЗаполнено(СтрокаДокумента.ДатаСписано);
		Иначе
			Исходящий = (СтрокаДокумента.ПлательщикСчет = НомерСчета);
		КонецЕсли;
		СтрокаДокумента.Исходящий = Исходящий;
		
		//++ Локализация
		НеподходящийЛицевойСчет = СтрокаДокумента.ПлательщикЛицевойСчет <> НомерЛицевогоСчета
									И СтрокаДокумента.ПолучательЛицевойСчет <> НомерЛицевогоСчета;
		
		Если НеподходящийЛицевойСчет Тогда
			СтрокаДокумента.Загружать = Ложь;
			Продолжить;
		КонецЕсли;
		
		НеподходящийКодРаздела = СтрокаДокумента.АналитическийКодРаздела <> РазделЛицевогоСчета;
		
		Если Исходящий
			И НеподходящийКодРаздела Тогда
			СтрокаДокумента.Загружать = Ложь;
			Продолжить;
		КонецЕсли;
		//-- Локализация
		
		// Дата документа
		Если Не ЗначениеЗаполнено(СтрокаДокумента.ДатаДок) Тогда
			СтрокаДокумента.ДатаДок = ДенежныеСредстваКлиентСервер.ПолучитьДатуИзСтроки(СтрокаДокумента.Дата);
			Если Не ЗначениеЗаполнено(СтрокаДокумента.ДатаДок) Тогда
				СтрокаДокумента.ДатаДок = ДенежныеСредстваКлиентСервер.ПолучитьДатуИзСтроки(
					?(Исходящий, СтрокаДокумента.ДатаСписано, СтрокаДокумента.ДатаПоступило));
			КонецЕсли;
		КонецЕсли;
		
		// Тип платежного документа
		ТипСтрокой = СтрЗаменить(ВРЕГ(СтрЗаменить(СокрЛП(СтрокаДокумента.Операция), " ", "")), "Ё", "Е");
		Если Исходящий Тогда
			ТипПлатежногоДокумента = ТипыПлатежныхДокументовСписания.Получить(ТипСтрокой);
		Иначе
			ТипПлатежногоДокумента = ТипыПлатежныхДокументовПоступления.Получить(ТипСтрокой);
		КонецЕсли;
		Если ТипПлатежногоДокумента = Неопределено Тогда
			ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение;
		КонецЕсли;

		СтрокаДокумента.ТипПлатежногоДокумента = ТипПлатежногоДокумента;
		
		// Хоз. операция по виду оплаты
		Если СтрокаДокумента.ВидОплаты = "03" Тогда
			СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.СнятиеНаличныхДенежныхСредств;
			
		ИначеЕсли СтрокаДокумента.ВидОплаты = "04" Тогда
			СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыНаРасчетныйСчет;
			
		ИначеЕсли СтрокаДокумента.ВидОплаты = "13" Тогда
			Если Исходящий Тогда
				СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ВозвратОплатыНаПлатежнуюКарту;
			Иначе
				СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыПоПлатежнойКарте;
			КонецЕсли;
		КонецЕсли;
		
		// Переводы
		Если СтрокаДокумента.Исходящий Тогда
			
			Если ЗначениеЗаполнено(СтрокаДокумента.ПолучательБИК) Тогда
				СтруктураПоиска = Новый Структура("НомерСчета, БИК", СтрокаДокумента.ПолучательСчет, СтрокаДокумента.ПолучательБИК);
			ИначеЕсли ЗначениеЗаполнено(СтрокаДокумента.ПолучательСВИФТ) Тогда
				СтруктураПоиска = Новый Структура("НомерСчета, СВИФТ", СтрокаДокумента.ПолучательСчет, СтрокаДокумента.ПолучательСВИФТ);
			Иначе
				СтруктураПоиска = Новый Структура("НомерСчета", СтрокаДокумента.ПолучательСчет);
			КонецЕсли;
			
			СобственныеСчетаПолучатели = СобственныеСчета.НайтиСтроки(СтруктураПоиска);
			Если СобственныеСчетаПолучатели.Количество() > 0 Тогда
				СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет;
				СтрокаДокумента.СчетКонтрагента = СобственныеСчетаПолучатели[0]["Ссылка"];
				Если Не ЗначениеЗаполнено(СтрокаДокумента.ДатаСписано) Тогда
					СтрокаДокумента.Загружать = Ложь;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		Иначе
			
			Если ЗначениеЗаполнено(СтрокаДокумента.ПлательщикБИК) Тогда
				СтруктураПоиска = Новый Структура("НомерСчета, БИК", СтрокаДокумента.ПлательщикСчет, СтрокаДокумента.ПлательщикБИК);
			ИначеЕсли ЗначениеЗаполнено(СтрокаДокумента.ПлательщикСВИФТ) Тогда
				СтруктураПоиска = Новый Структура("НомерСчета, СВИФТ", СтрокаДокумента.ПлательщикСчет, СтрокаДокумента.ПлательщикСВИФТ);
			Иначе
				СтруктураПоиска = Новый Структура("НомерСчета", СтрокаДокумента.ПлательщикСчет);
			КонецЕсли;
			
			СобственныеСчетаОтправители = СобственныеСчета.НайтиСтроки(СтруктураПоиска);
			Если СобственныеСчетаОтправители.Количество() > 0 Тогда
				СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствСДругогоСчета;
				СтрокаДокумента.СчетКонтрагента = СобственныеСчетаОтправители[0]["Ссылка"];
				Если Не ЗначениеЗаполнено(СтрокаДокумента.ДатаПоступило) Тогда
					СтрокаДокумента.Загружать = Ложь;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Инкассация
		Если Не ЗначениеЗаполнено(СтрокаДокумента.ВидОперации) Тогда
			
			БалансовыйСчет = Лев(СтрокаДокумента.ПлательщикСчет, 5);
			Если БалансовыйСчет    = "20202" // поступление/списание наличных из кассы
				Или БалансовыйСчет = "20208" // поступление/списание наличных из банкомата, устройства Cash-in
			Тогда
				Если СтрокаДокумента.Исходящий Тогда
					СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.СнятиеНаличныхДенежныхСредств;
				Иначе
					СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыНаРасчетныйСчет;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Контрагент
		Если Исходящий Тогда
			Если СтрокаДокумента.Получатель1 <> "" Тогда
				СтрокаДокумента.ИмяКонтрагента = СтрокаДокумента.Получатель1;
			Иначе
				СтрокаДокумента.ИмяКонтрагента = СтрокаДокумента.Получатель;
			КонецЕсли;
		Иначе
			Если СтрокаДокумента.Плательщик1 <> "" Тогда
				СтрокаДокумента.ИмяКонтрагента = СтрокаДокумента.Плательщик1;
			Иначе
				СтрокаДокумента.ИмяКонтрагента = СтрокаДокумента.Плательщик;
			КонецЕсли;
		КонецЕсли;
		
		//++ Локализация

		ЗаполнитьДанныеКонтрагентаПоПлатежу(Исходящий, СтрокаДокумента, СтрокаДокумента.ИмяКонтрагента);

		//-- Локализация
		
		СтруктураНаименования = ДенежныеСредстваСерверЛокализация.НаименованиеОрганизации(СтрокаДокумента.ИмяКонтрагента);
		СтрокаДокумента.СокрИмяКонтрагента = СтруктураНаименования.СокращенноеНаименование;
		
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Лев(СтрокаДокумента.ИмяКонтрагента, 10)) Тогда
			Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Лев(СтрокаДокумента.ИмяКонтрагента, 12)) Тогда
				СтрокаДокумента.ИмяКонтрагента = СокрЛП(Сред(СтрокаДокумента.ИмяКонтрагента, 13));
			Иначе
				СтрокаДокумента.ИмяКонтрагента = СокрЛП(Сред(СтрокаДокумента.ИмяКонтрагента, 11));
			КонецЕсли;
		КонецЕсли;
		
		ИННДляПоиска = ?(Исходящий, СтрокаДокумента.ПолучательИНН, СтрокаДокумента.ПлательщикИНН);
		СтрокаДокумента.ПроверятьИНН = ЗначениеЗаполнено(ИННДляПоиска)
										И ИННДляПоиска <> "000000000000"
										И ИННДляПоиска <> "0000000000";
	
		КППДляПоиска = ?(Исходящий, СтрокаДокумента.ПолучательКПП, СтрокаДокумента.ПлательщикКПП);
		СтрокаДокумента.ПроверятьКПП = (ЗначениеЗаполнено(КППДляПоиска) И КППДляПоиска <> "0");
		
		// УИП
		Если ЗначениеЗаполнено(СтрокаДокумента.Код) Тогда
			СтрокаДокумента.ЗаполненУИП = Истина;
		КонецЕсли;
		
		// Назначение платежа
		Если ПустаяСтрока(СтрокаДокумента.НазначениеПлатежа) Тогда
			СтрокаДокумента.НазначениеПлатежа = СтрокаДокумента.НазначениеПлатежа1;
			Для инд = 2 По 6 Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаДокумента["НазначениеПлатежа" + инд]) Тогда
					Прервать;
				КонецЕсли;
				СтрокаДокумента.НазначениеПлатежа =
					СтрокаДокумента.НазначениеПлатежа + Символы.ПС + СтрокаДокумента["НазначениеПлатежа" + инд];
			КонецЦикла;
		КонецЕсли;
		
		СтрокаДокумента.ФорматированноеНазначениеПлатежа =
			ДенежныеСредстваСервер.ФорматироватьНазначениеПлатежа(СтрокаДокумента.НазначениеПлатежа);
		
		// Сумма
		СписокСумм = СтрРазделить(СтрокаДокумента.Сумма, "+");
		
		Для Каждого ТекущаяСумма Из СписокСумм Цикл
			
			Сумма = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ТекущаяСумма);
			Если Сумма <> Неопределено Тогда
				Если Сумма < 0 Тогда
					Сумма = - Сумма;
				КонецЕсли;
				СтрокаДокумента.СуммаДокумента = СтрокаДокумента.СуммаДокумента + Сумма;
				Если Исходящий Тогда
					СтрокаДокумента.СуммаСписано   = СтрокаДокумента.СуммаСписано + Сумма;
				Иначе
					СтрокаДокумента.СуммаПоступило = СтрокаДокумента.СуммаПоступило + Сумма;
				КонецЕсли;
			Иначе
				ДобавитьЗамечание(СтрокаДокумента.ОшибкиЗагрузки,
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Неверная сумма документа (%1)!'"), СтрокаДокумента.Сумма));
			КонецЕсли;
		
		КонецЦикла;
		
		//++ Локализация
		
		// Очередность платежа
		Буфер = СокрЛП(СтрокаДокумента.Очередность);
		Если Буфер <> "" И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Буфер) Тогда
			СтрокаДокумента.ОчередностьПлатежа = Число(Буфер);
		Иначе
			СтрокаДокумента.ОчередностьПлатежа = 5;
		КонецЕсли;
		
		// СБП
		РаспознаваниеОперацииСБП(НастройкиЗагрузки, СтрокаДокумента, ИННДляПоиска);
		
		// Платеж в бюджет
		Если ЗначениеЗаполнено(СтрокаДокумента.СтатусСоставителя) Тогда
			СтрокаДокумента.ПлатежВБюджет = Истина;
			
			Если СтатусыСоставителейТаможенныхПлатежей.Найти(СтрокаДокумента.СтатусСоставителя) <> Неопределено Тогда
				СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ПеречислениеТаможне;
				СтрокаДокумента.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ТаможенныйПлатеж;
			ИначеЕсли СтрокаДокумента.СтатусСоставителя = "08" Тогда
				СтрокаДокумента.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ИнойПлатеж;
			Иначе
				СтрокаДокумента.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж;
			КонецЕсли;
			
			Если СтрокаДокумента.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж И Исходящий Тогда
				СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет;
			ИначеЕсли СтрокаДокумента.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж И Не Исходящий Тогда
				СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ВозвратНалогов;
			ИначеЕсли СтрокаДокумента.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ТаможенныйПлатеж И Исходящий Тогда
				СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ПеречислениеТаможне;
			ИначеЕсли СтрокаДокумента.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ИнойПлатеж И Исходящий Тогда
				СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств;
			КонецЕсли;
		КонецЕсли;
		
		// Показатель даты бюджетного платежа
		Если НЕ ПустаяСтрока(СтрокаДокумента.ПоказательДаты) Тогда
			СтрокаДокумента.ПоказательДатыДок = ДенежныеСредстваКлиентСервер.ПолучитьДатуИзСтроки(СтрокаДокумента.ПоказательДаты);
			Если НЕ ЗначениеЗаполнено(СтрокаДокумента.ПоказательДатыДок) Тогда
				СтрокаДокумента.ПоказательДатыДок = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		// Выплата зарплаты
		РаспознаваниеОперацииВыплатаЗарплаты(СтрокаДокумента);
		
		// Эквайринг
		РаспознаваниеОперацииЭквайринг(СтрокаДокумента);
		
		//-- Локализация
		
		// Дата проведения банком
		Если Исходящий Тогда
			Если Не ЗначениеЗаполнено(СтрокаДокумента.Списано) Тогда
				
				Если ЗначениеЗаполнено(СтрокаДокумента.ДатаСписано) Тогда
					СтрокаДокумента.Списано = ДенежныеСредстваКлиентСервер.ПолучитьДатуИзСтроки(
						СтрокаДокумента.ДатаСписано);
				Иначе
					СтрокаДокумента.Списано = ДенежныеСредстваКлиентСервер.ПолучитьДатуИзСтроки(
						СтрокаДокумента.Дата);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаДокумента.Списано) Тогда
					СтрокаДокумента.ДатаПроведения = СтрокаДокумента.Списано;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если Не ЗначениеЗаполнено(СтрокаДокумента.Поступило) Тогда
				
				Если ЗначениеЗаполнено(СтрокаДокумента.ДатаПоступило) Тогда
					СтрокаДокумента.Поступило = ДенежныеСредстваКлиентСервер.ПолучитьДатуИзСтроки(
						СтрокаДокумента.ДатаПоступило);
				Иначе
					СтрокаДокумента.Поступило = ДенежныеСредстваКлиентСервер.ПолучитьДатуИзСтроки(
						СтрокаДокумента.Дата);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаДокумента.Поступило) Тогда
					СтрокаДокумента.ДатаПроведения = СтрокаДокумента.Поступило;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		//++ Локализация
		
		// Дата отсылки платежного требования
		Если Не ПустаяСтрока(СтрокаДокумента.ДатаОтсылкиДок) Тогда
			СтрокаДокумента.ДатаОтсылки = ДенежныеСредстваКлиентСервер.ПолучитьДатуИзСтроки(СтрокаДокумента.ДатаОтсылкиДок);
		КонецЕсли;
		//-- Локализация
	КонецЦикла;
	
	// Ранее загруженные/введенные вручную документы
	Отбор = Новый Структура;
	Отбор.Вставить("Загружать", Истина);
	СтрокиКЗагрузке = ДокументыКЗагрузке.НайтиСтроки(Отбор);
	ТаблицаДокументов = ДокументыКЗагрузке.Скопировать(
		СтрокиКЗагрузке,
		"НомерСтроки, ДатаДок, Поступило, Списано, Номер, НомерСокр, Исходящий, ПолучательСчет, ПлательщикСчет, ТипПлатежногоДокумента,
		|ПолучательИНН, ПлательщикИНН, ПолучательКПП, ПлательщикКПП, ПроверятьИНН, ПроверятьКПП, ДанныеВыписки, Код, Операция, ЭтоЗагрузкаBankFeeds");
	ЗаполнитьСсылкиНаДокументы(ДокументыКЗагрузке, ТаблицаДокументов, БанковскийСчет);
	
	// Основание платежа по УИП
	Отбор = Новый Структура;
	Отбор.Вставить("Загружать", Истина);
	Отбор.Вставить("Исходящий", Ложь);
	Отбор.Вставить("НайденДокументВБазе", Ложь);
	Отбор.Вставить("ЗаполненУИП", Истина);
	СтрокиКЗагрузке = ДокументыКЗагрузке.НайтиСтроки(Отбор);
	Если СтрокиКЗагрузке.Количество() Тогда
		ТаблицаДокументов = ДокументыКЗагрузке.Скопировать(СтрокиКЗагрузке, "НомерСтроки, Код");
		ЗаполнитьОснованиеПлатежейПоУИП(ДокументыКЗагрузке, ТаблицаДокументов, БанковскийСчет);
	КонецЕсли;
	
	// Контрагенты, счета контрагентов
	Отбор = Новый Структура;
	Отбор.Вставить("Загружать", Истина);
	СтрокиКЗагрузке = ДокументыКЗагрузке.НайтиСтроки(Отбор);
	ТаблицаДокументов = ДокументыКЗагрузке.Скопировать(
		СтрокиКЗагрузке,
		"НомерСтроки, Исходящий, ИмяКонтрагента, СокрИмяКонтрагента, Контрагент, ПолучательСчет, ПолучательБИК, ПлательщикСчет, ПлательщикБИК,
		|ПолучательИНН, ПлательщикИНН, ПолучательКПП, ПлательщикКПП, ПроверятьИНН, ПроверятьКПП, ВидОперации");
	ЗаполнитьКонтрагентов(ДокументыКЗагрузке, ТаблицаДокументов);
	
	// Партнеры
	Отбор = Новый Структура;
	Отбор.Вставить("Загружать", Истина);
	Отбор.Вставить("НайденКонтрагент", Истина);
	СтрокиКЗагрузке = ДокументыКЗагрузке.НайтиСтроки(Отбор);
	ТаблицаДокументов = ДокументыКЗагрузке.Скопировать(
		СтрокиКЗагрузке,
		"НомерСтроки, Контрагент, Партнер");
	ЗаполнитьПартнеров(ДокументыКЗагрузке, ТаблицаДокументов, БанковскийСчет);
	
	// Образцы документов для заполнения
	Отбор = Новый Структура;
	Отбор.Вставить("Загружать", Истина);
	Отбор.Вставить("НайденДокументВБазе", Ложь);
	Отбор.Вставить("НайденоОснованиеПлатежа", Ложь);
	Отбор.Вставить("НайденСчетКонтрагента", Истина);
	СтрокиКЗагрузке = ДокументыКЗагрузке.НайтиСтроки(Отбор);
	ЗаполнитьОбразцы(СтрокиКЗагрузке, БанковскийСчет);
	
	// Заполнение по косвенным данным
	Отбор = Новый Структура;
	Отбор.Вставить("Загружать", Истина);
	Отбор.Вставить("НайденДокументВБазе", Ложь);
	Отбор.Вставить("НайденоОснованиеПлатежа", Ложь);
	Отбор.Вставить("НайденКонтрагент", Истина);
	СтрокиКЗагрузке = ДокументыКЗагрузке.НайтиСтроки(Отбор);
	ЗаполнитьПоКосвеннымДанным(СтрокиКЗагрузке, БанковскийСчет);
	
	// Поиск ПКО при инкассации
	Отбор = Новый Структура;
	Отбор.Вставить("Загружать", Истина);
	Отбор.Вставить("НайденДокументВБазе", Ложь);
	Отбор.Вставить("НайденоОснованиеПлатежа", Ложь);
	Отбор.Вставить("НайденОбразец", Ложь);
	Отбор.Вставить("ВидОперации", Перечисления.ХозяйственныеОперации.СнятиеНаличныхДенежныхСредств);
	СтрокиКЗагрузке = ДокументыКЗагрузке.НайтиСтроки(Отбор);
	ТаблицаДокументов = ДокументыКЗагрузке.Скопировать(
		СтрокиКЗагрузке,
		"НомерСтроки, СуммаДокумента, ДатаПроведения");
	ЗаполнитьКассовыйДокумент(ДокументыКЗагрузке, ТаблицаДокументов, БанковскийСчет, Истина);
	
	// Поиск РКО при инкассации
	Отбор = Новый Структура;
	Отбор.Вставить("Загружать", Истина);
	Отбор.Вставить("НайденДокументВБазе", Ложь);
	Отбор.Вставить("НайденоОснованиеПлатежа", Ложь);
	Отбор.Вставить("НайденОбразец", Ложь);
	Отбор.Вставить("ВидОперации", Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыНаРасчетныйСчет);
	СтрокиКЗагрузке = ДокументыКЗагрузке.НайтиСтроки(Отбор);
	ТаблицаДокументов = ДокументыКЗагрузке.Скопировать(
		СтрокиКЗагрузке,
		"НомерСтроки, СуммаДокумента, ДатаПроведения");
	ЗаполнитьКассовыйДокумент(ДокументыКЗагрузке, ТаблицаДокументов, БанковскийСчет, Ложь);
	
КонецПроцедуры

Процедура ОбновитьДокументы(ДокументыКЗагрузке, БанковскийСчет, СоздаватьКонтрагентов, ПроводитьДокументы) Экспорт
	
	Перем РеквизитыВсе, РеквизитыХозОперации;
	
	Отбор = Новый Структура("БанковскийСчет, Загружать, НайденДокументВБазе",
		БанковскийСчет, Истина, Истина);
	СтрокиКЗагрузке = ДокументыКЗагрузке.НайтиСтроки(Отбор);
	
	Для каждого СтрокаДокумента Из СтрокиКЗагрузке Цикл
		
		ДокументОбъект = СтрокаДокумента.Документ.ПолучитьОбъект();
		
		СделатьНепроведенным = Ложь;
		
		ВалютаРеглУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(ДокументОбъект.Организация);
		
		УстановитьСвойство(ДокументОбъект, "ПроведеноБанком", Истина);
		УстановитьСвойство(ДокументОбъект, "ДатаПроведенияБанком", СтрокаДокумента.ДатаПроведения);
		
		ЗаменитьСтароеЗначение = Ложь;
		//++ Локализация
		ЗаменитьСтароеЗначение = (СтрокаДокумента.Операция <> "Операция по Яндекс.Кассе");
		//-- Локализация
		УстановитьСвойство(ДокументОбъект, "НомерВходящегоДокумента", СтрокаДокумента.Номер, ЗаменитьСтароеЗначение);
		
		Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПоступлениеБезналичныхДенежныхСредств") Тогда
			Документы.ПоступлениеБезналичныхДенежныхСредств.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
				ДокументОбъект, РеквизитыВсе, РеквизитыХозОперации);
				
		ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.СписаниеБезналичныхДенежныхСредств") Тогда
			Документы.СписаниеБезналичныхДенежныхСредств.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
				ДокументОбъект, РеквизитыВсе, РеквизитыХозОперации);
		КонецЕсли;
		
		// Контрагент
		Если РеквизитыХозОперации.Найти("Контрагент") <> Неопределено И Не ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
			Если ЗначениеЗаполнено(СтрокаДокумента.Контрагент) Тогда
				УстановитьСвойство(ДокументОбъект, "Контрагент", СтрокаДокумента.Контрагент);
			ИначеЕсли СоздаватьКонтрагентов И СтрокаДокумента.СоздаватьКонтрагента Тогда
				УстановитьСвойство(ДокументОбъект, "Контрагент", СоздатьКонтрагента(ДокументыКЗагрузке, СтрокаДокумента));
			Иначе
				УстановитьСвойство(ДокументОбъект, "ИмяКонтрагента", СтрокаДокумента.ИмяКонтрагента);
			КонецЕсли;
		КонецЕсли;
		
		// Счет контрагента
		Если РеквизитыХозОперации.Найти("БанковскийСчетКонтрагента") <> Неопределено И Не ЗначениеЗаполнено(ДокументОбъект.БанковскийСчетКонтрагента) Тогда
			Если ЗначениеЗаполнено(СтрокаДокумента.СчетКонтрагента) Тогда
				УстановитьСвойство(ДокументОбъект, "БанковскийСчетКонтрагента", СтрокаДокумента.СчетКонтрагента);
			ИначеЕсли ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
				УстановитьСвойство(ДокументОбъект, "БанковскийСчетКонтрагента",
				СоздатьБанковскийСчетКонтрагента(ДокументыКЗагрузке, СтрокаДокумента, ДокументОбъект.Контрагент));
			КонецЕсли;
		КонецЕсли;
		
		СтатьяДвиженияДенежныхСредств =
			Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(ДокументОбъект.ХозяйственнаяОперация);
		
		Для каждого СтрокаРасшифровки Из ДокументОбъект.РасшифровкаПлатежа Цикл
			
			// Партнер
			Если Не ЗначениеЗаполнено(СтрокаРасшифровки.Партнер)
				И РеквизитыХозОперации.Найти("РасшифровкаПлатежа.Партнер") <> Неопределено Тогда
				СтрокаРасшифровки.Партнер = СтрокаДокумента.Партнер;
			КонецЕсли;
			
			Если СтрокаРасшифровки.КурсЧислительВзаиморасчетов = 0
				Или СтрокаРасшифровки.КурсЗнаменательВзаиморасчетов = 0 Тогда
				РаботаСКурсамиВалютУТ.ЗаполнитьКурсДокументаПоУмолчанию(СтрокаРасшифровки.КурсЧислительВзаиморасчетов,
																		СтрокаРасшифровки.КурсЗнаменательВзаиморасчетов,
																		ДокументОбъект.Валюта,
																		СтрокаРасшифровки.ВалютаВзаиморасчетов,
																		ДокументОбъект.Организация,
																		?(ЗначениеЗаполнено(СтрокаДокумента.ДатаПроведения), СтрокаДокумента.ДатаПроведения, ДокументОбъект.Дата),,
																		СтрокаРасшифровки.ОбъектРасчетов);
			КонецЕсли;
			
			// Статья ДДС
			Если РеквизитыХозОперации.Найти("РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств") <> Неопределено
				И Не ЗначениеЗаполнено(СтрокаРасшифровки.СтатьяДвиженияДенежныхСредств) Тогда
				
				Если ЗначениеЗаполнено(СтрокаРасшифровки.ОбъектРасчетов) Тогда
					
					РеквизитыОбъектаРасчетов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
									СтрокаРасшифровки.ОбъектРасчетов,
									"Договор.СтатьяДвиженияДенежныхСредств, Соглашение.СтатьяДвиженияДенежныхСредств");
					
					СтатьяДвиженияДенежныхСредствОбъектаРасчетов = 
						?(ЗначениеЗаполнено(РеквизитыОбъектаРасчетов.ДоговорСтатьяДвиженияДенежныхСредств),
						РеквизитыОбъектаРасчетов.ДоговорСтатьяДвиженияДенежныхСредств,
						РеквизитыОбъектаРасчетов.СоглашениеСтатьяДвиженияДенежныхСредств);
					
					Если ЗначениеЗаполнено(СтатьяДвиженияДенежныхСредствОбъектаРасчетов) Тогда
						СтрокаРасшифровки.СтатьяДвиженияДенежныхСредств =
							?(ЗначениеЗаполнено(РеквизитыОбъектаРасчетов.ДоговорСтатьяДвиженияДенежныхСредств),
							РеквизитыОбъектаРасчетов.ДоговорСтатьяДвиженияДенежныхСредств,
							РеквизитыОбъектаРасчетов.СоглашениеСтатьяДвиженияДенежныхСредств);
					КонецЕсли;
					
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(СтрокаРасшифровки.СтатьяДвиженияДенежныхСредств)
					И ЗначениеЗаполнено(СтатьяДвиженияДенежныхСредств) Тогда
					СтрокаРасшифровки.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		СуммыРазличаются = (СтрокаДокумента.СуммаДокумента <> ДокументОбъект.СуммаДокумента);
		
		Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.СписаниеБезналичныхДенежныхСредств")
			И ДокументОбъект.ПлатежСКонвертацией Тогда
			УстановитьСвойство(ДокументОбъект, "СуммаВВалютеОтправителя", СтрокаДокумента.СуммаДокумента, Истина);
		Иначе
			УстановитьСвойство(ДокументОбъект, "СуммаДокумента", СтрокаДокумента.СуммаДокумента, Истина);
		КонецЕсли;
		
		УстановитьСвойство(ДокументОбъект, "НазначениеПлатежа", СтрокаДокумента.НазначениеПлатежа, Истина);
		УстановитьСвойство(ДокументОбъект, "ФорматированноеНазначениеПлатежа", СтрокаДокумента.ФорматированноеНазначениеПлатежа, Истина);
		УстановитьСвойство(ДокументОбъект, "ДанныеВыписки", СтрокаДокумента.ДанныеВыписки, Истина);
		
		Если СуммыРазличаются Тогда
			Если ДокументОбъект.РасшифровкаПлатежа.Количество() = 1 Тогда
				СтрокаРасшифровки = ДокументОбъект.РасшифровкаПлатежа[0];
				СтрокаРасшифровки.Сумма = ДокументОбъект.СуммаДокумента;
				
				ДенежныеСредстваКлиентСервер.РассчитатьСуммуВзаиморасчетовВСтрокеРасшифровки(
					СтрокаРасшифровки, ДокументОбъект.Валюта, ВалютаРеглУчета);
					
				СтруктураПересчетаСуммы = Новый Структура;
				СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", Истина);
				СтруктураДействий = Новый Структура;
				СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаРасшифровки, СтруктураДействий, Неопределено);
				
			Иначе
				СделатьНепроведенным = Истина;
				ОписаниеОшибки = НСтр("ru = 'Сумма документа отличается от суммы строк расшифровки платежа.'");
				ДобавитьЗамечание(СтрокаДокумента.ОшибкиЗагрузки, ОписаниеОшибки);
			КонецЕсли;
		КонецЕсли;
		
		УстановитьСвойство(ДокументОбъект, "Комментарий", СтрокаДокумента.Комментарий);
		
		Если ДокументОбъект.Модифицированность() Тогда
			УстановитьСвойство(ДокументОбъект, "ДатаЗагрузки", ТекущаяДатаСеанса(), Истина);
		КонецЕсли;
		
		ДокументОбъект.ДополнительныеСвойства.Вставить("ОбменСБанками", Истина);
		ДокументОбъект.Движения.ДенежныеСредстваБезналичные.ДополнительныеСвойства.Вставить("ОбменСБанками", Истина);
		ДокументОбъект.ПроверитьЗаполнение();
		
		Если ДокументОбъект.ДополнительныеСвойства.Свойство("ОшибкиЗаполнения") Тогда
			УстановитьСвойство(ДокументОбъект, "ОшибкиЗагрузки", ДокументОбъект.ДополнительныеСвойства.ОшибкиЗаполнения, Истина);
		КонецЕсли;
		
		Если ПроводитьДокументы
			И СокрЛП(ДокументОбъект.ОшибкиЗагрузки) = "" Тогда
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
		Иначе
			РежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;
		
		ЗаписатьОбъект(ДокументОбъект, ?(СделатьНепроведенным, РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписи), СтрокаДокумента);
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьДокументы(ДокументыКЗагрузке, БанковскийСчет, СоздаватьКонтрагентов, ПроводитьДокументы) Экспорт
	
	РеквизитыСчета = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(БанковскийСчет);
	РазрешитьПлатежиБезУказанияЗаявок = РеквизитыСчета.РазрешитьПлатежиБезУказанияЗаявок;
	
	Организация          = РеквизитыСчета.Организация;
	Префикс              = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "Префикс");
	Валюта               = РеквизитыСчета.Валюта;
	ТекущийПользователь  = Пользователи.ТекущийПользователь();
	
	Отбор = Новый Структура("БанковскийСчет, Загружать, НайденДокументВБазе",
		БанковскийСчет, Истина, Ложь);
	СтрокиКЗагрузке = ДокументыКЗагрузке.НайтиСтроки(Отбор);
	
	Для каждого СтрокаДокумента Из СтрокиКЗагрузке Цикл
		
		Если СтрокаДокумента.Исходящий Тогда
			ДокументОбъект = Документы.СписаниеБезналичныхДенежныхСредств.СоздатьДокумент();
		Иначе
			ДокументОбъект = Документы.ПоступлениеБезналичныхДенежныхСредств.СоздатьДокумент();
		КонецЕсли;
		
		// Общие реквизиты
		ДатаВхДокумента = ДенежныеСредстваКлиентСервер.ПолучитьДатуИзСтроки(СтрокаДокумента.Дата);
		Если ЗначениеЗаполнено(ДатаВхДокумента) Тогда
			УстановитьСвойство(ДокументОбъект, "ДатаВходящегоДокумента", ДатаВхДокумента);
		Иначе
			УстановитьСвойство(ДокументОбъект, "ДатаВходящегоДокумента", СтрокаДокумента.ДатаДок);
		КонецЕсли;
		УстановитьСвойство(ДокументОбъект, "НомерВходящегоДокумента", СтрокаДокумента.Номер);
		
		УстановитьСвойство(ДокументОбъект, "Организация", Организация);
		УстановитьСвойство(ДокументОбъект, "БанковскийСчет", БанковскийСчет);
		УстановитьСвойство(ДокументОбъект, "Валюта", Валюта);
		
		УстановитьСвойство(ДокументОбъект, "ТипПлатежногоДокумента", СтрокаДокумента.ТипПлатежногоДокумента);
		УстановитьСвойство(ДокументОбъект, "СуммаДокумента", СтрокаДокумента.СуммаДокумента);
		
		УстановитьСвойство(ДокументОбъект, "НазначениеПлатежа", СтрокаДокумента.НазначениеПлатежа);
		УстановитьСвойство(ДокументОбъект, "ФорматированноеНазначениеПлатежа", СтрокаДокумента.ФорматированноеНазначениеПлатежа);
		УстановитьСвойство(ДокументОбъект, "ДанныеВыписки", СтрокаДокумента.ДанныеВыписки);
		УстановитьСвойство(ДокументОбъект, "ИдентификаторПлатежа", СтрокаДокумента.Код);
		
		УстановитьСвойство(ДокументОбъект, "Комментарий", СтрокаДокумента.Комментарий);
		УстановитьСвойство(ДокументОбъект, "ДатаЗагрузки", ТекущаяДатаСеанса());
		
		УстановитьСвойство(ДокументОбъект, "ТипНалога", СтрокаДокумента.ТипНалога);
		УстановитьСвойство(ДокументОбъект, "НастройкаСчетовУчета", СтрокаДокумента.НастройкаСчетовУчета);
		
		УстановитьСвойство(ДокументОбъект, "ОшибкиЗагрузки", СтрокаДокумента.ОшибкиЗагрузки);
		
		УстановитьСвойство(ДокументОбъект, "Ответственный", ТекущийПользователь);
		
		// Индивидуальное заполнение
		Если СтрокаДокумента.Исходящий Тогда
			ЗаполнитьРеквизитыСписания(ДокументыКЗагрузке, СтрокаДокумента, ДокументОбъект, СоздаватьКонтрагентов, ПроводитьДокументы, Префикс);
		Иначе
			ЗаполнитьРеквизитыПоступления(ДокументыКЗагрузке, СтрокаДокумента, ДокументОбъект, СоздаватьКонтрагентов, ПроводитьДокументы);
		КонецЕсли;
		
		//++ Локализация
		Если СтрокаДокумента.Операция <> "Операция по Яндекс.Кассе" Тогда
		//-- Локализация
			УстановитьСвойство(ДокументОбъект, "ПроведеноБанком", Истина);
		//++ Локализация
		КонецЕсли;
		//-- Локализация
		
		Если ЗначениеЗаполнено(СтрокаДокумента.ДатаПроведения) Тогда
			УстановитьСвойство(ДокументОбъект, "ДатаПроведенияБанком", СтрокаДокумента.ДатаПроведения);
		Иначе
			УстановитьСвойство(ДокументОбъект, "ДатаПроведенияБанком", ДокументОбъект.Дата);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДокументОбъект.ДатаВходящегоДокумента) Тогда
			ДокументОбъект.ДатаВходящегоДокумента = ДокументОбъект.Дата;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ДокументОбъект.НомерВходящегоДокумента) Тогда
			ДокументОбъект.НомерВходящегоДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДокументОбъект.Номер);
		КонецЕсли;
		
		ДокументОбъект.ДополнительныеСвойства.Вставить("ОбменСБанками", Истина);
		ДокументОбъект.Движения.ДенежныеСредстваБезналичные.ДополнительныеСвойства.Вставить("ОбменСБанками", Истина);
		ДокументОбъект.ПроверитьЗаполнение();
		
		Если ДокументОбъект.ДополнительныеСвойства.Свойство("ОшибкиЗаполнения") Тогда
			ДокументОбъект.ОшибкиЗагрузки = СокрЛП(ДокументОбъект.ОшибкиЗагрузки + "
			|" + ДокументОбъект.ДополнительныеСвойства.ОшибкиЗаполнения);
		КонецЕсли;
		
		Если ПроводитьДокументы
			И СокрЛП(ДокументОбъект.ОшибкиЗагрузки) = "" Тогда
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
		Иначе
			РежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;
		
		Если ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации 
			ИЛИ ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию Тогда
			Если СтрокаДокумента.Исходящий Тогда
				ЗеркальныйПлатежСсылка = Документы.СписаниеБезналичныхДенежныхСредств.НайтиЗеркальныйПлатеж(ДокументОбъект.Ссылка);
				Если ЗначениеЗаполнено(ЗеркальныйПлатежСсылка) И ЗеркальныйПлатежСсылка.СуммаДокумента = ДокументОбъект.СуммаДокумента Тогда
					Документы.ПоступлениеБезналичныхДенежныхСредств.ПривестиВСоответствиеЗеркальныйПлатеж(ЗеркальныйПлатежСсылка, ДокументОбъект);
				КонецЕсли;
			Иначе
				ЗеркальныйПлатежСсылка = Документы.ПоступлениеБезналичныхДенежныхСредств.НайтиЗеркальныйПлатеж(ДокументОбъект.Ссылка);
				Если ЗначениеЗаполнено(ЗеркальныйПлатежСсылка) И ЗеркальныйПлатежСсылка.СуммаДокумента = ДокументОбъект.СуммаДокумента Тогда
					Документы.СписаниеБезналичныхДенежныхСредств.ПривестиВСоответствиеЗеркальныйПлатеж(ЗеркальныйПлатежСсылка, ДокументОбъект);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ЗаписатьОбъект(ДокументОбъект, РежимЗаписи, СтрокаДокумента);
		
		СтрокаДокумента.Документ = ДокументОбъект.Ссылка;
	КонецЦикла;
	
КонецПроцедуры

// Создает элемент справочника "Контрагенты"
//
// Параметры:
//    ДокументыКЗагрузке - ТаблицаЗначений - Таблица документов выписки
//    СтрокаДокумента - СтрокаТаблицыЗначений - Содержит описание контрагента и связанных данных.
//
// Возвращаемое значение:
//    СправочникСсылка.Контрагенты - Ссылка на новый элемент справочника.
//
Функция СоздатьКонтрагента(ДокументыКЗагрузке, СтрокаДокумента) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если СтрокаДокумента.Исходящий Тогда
		
		ИмяКолонкиНаименованиеМеждународное = "ПОЛУЧАТЕЛЬНаименованиеМеждународное";
		ИмяКолонкиИНН    = "ПОЛУЧАТЕЛЬИНН";
		ИмяКолонкиКПП    = "ПОЛУЧАТЕЛЬКПП";
		ИмяКолонкиСтрана = "ПОЛУЧАТЕЛЬСтрана";
		
	Иначе
		
		ИмяКолонкиНаименованиеМеждународное = "ПЛАТЕЛЬЩИКНаименованиеМеждународное";
		ИмяКолонкиИНН = "ПЛАТЕЛЬЩИКИНН";
		ИмяКолонкиКПП = "ПЛАТЕЛЬЩИККПП";
		ИмяКолонкиСтрана = "ПЛАТЕЛЬЩИКСтрана";	
		
	КонецЕсли;
	
	СтруктураНаименования = ДенежныеСредстваСерверЛокализация.НаименованиеОрганизации(СтрокаДокумента.ИмяКонтрагента);
	
	ДанныеКонтрагента = РеквизитыЗаполненияКонтрагента();
	ДанныеПартнера = РеквизитыЗаполненияПартнера();
	
	ДанныеКонтрагента.Вставить("Наименование", СтруктураНаименования.СокращенноеНаименование);
	ДанныеКонтрагента.Вставить("НаименованиеПолное", СтрокаДокумента.ИмяКонтрагента);
	ДанныеКонтрагента.Вставить("НаименованиеМеждународное", СтрокаДокумента[ИмяКолонкиНаименованиеМеждународное]);
	ДанныеКонтрагента.Вставить("ИНН", ?(СтрокаДокумента[ИмяКолонкиИНН] = "000000000000" Или СтрокаДокумента[ИмяКолонкиИНН] = "0000000000",
										"",
										СтрокаДокумента[ИмяКолонкиИНН]));
	ДанныеКонтрагента.Вставить("КПП", ?(СтрокаДокумента[ИмяКолонкиКПП] = "0", "", СтрокаДокумента[ИмяКолонкиКПП]));
	ДанныеКонтрагента.Вставить("СтранаРегистрации", Справочники.СтраныМира.НайтиПоРеквизиту("КодАльфа2", СтрокаДокумента[ИмяКолонкиСтрана]));
	
	ОсновнаяСтрана = Константы.ОсновнаяСтрана.Получить();
	Если Не ЗначениеЗаполнено(ДанныеКонтрагента.СтранаРегистрации) Тогда
		ДанныеКонтрагента.Вставить("СтранаРегистрации", ОсновнаяСтрана);
	КонецЕсли;
	
	Если СтрДлина(ДанныеКонтрагента.ИНН) = 10
			Или СтрокаДокумента.ЭтоЗагрузкаBankFeeds Тогда
		ДанныеКонтрагента.Вставить("ЮрФизЛицо", Перечисления.ЮрФизЛицо.ЮрЛицо);
	ИначеЕсли ЗначениеЗаполнено(ДанныеКонтрагента.СтранаРегистрации)
		И ДанныеКонтрагента.СтранаРегистрации <> ОсновнаяСтрана Тогда
		ДанныеКонтрагента.Вставить("ЮрФизЛицо", Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент);
	Иначе
		
		Если СтрокаДокумента.ЭтоФизЛицо Тогда
			ДанныеКонтрагента.Вставить("ЮрФизЛицо", Перечисления.ЮрФизЛицо.ФизЛицо);
			ДанныеПартнера.Вставить("ЮрФизЛицо", Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо);
		Иначе
			ДанныеКонтрагента.Вставить("ЮрФизЛицо", Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДанныеПартнера, ДанныеКонтрагента, , "ЮрФизЛицо");
	
	Если ЗначениеЗаполнено(СтрокаДокумента.Контрагент) Тогда
		Возврат СтрокаДокумента.Контрагент;
	КонецЕсли;
	
	Партнер = НайтиСоздатьПартнера(ДанныеПартнера);
	ДанныеКонтрагента.Вставить("Партнер", Партнер);
	
	Контрагент = НайтиСоздатьКонтрагента(СтрокаДокумента, ДанныеКонтрагента);
	
	СтрокаДокумента.Контрагент = Контрагент;
	СтрокаДокумента.Партнер = Партнер;
	
	// Нужно подставить нового контрагента и партнера в другие строки выписки
	Если Не ПустаяСтрока(ДанныеКонтрагента.ИНН) Тогда
		
		ПоляОтбора = "БанковскийСчет, ПОЛУЧАТЕЛЬИНН, Исходящий";
		СтруктураПоиска = Новый Структура(
			ПоляОтбора, СтрокаДокумента.БанковскийСчет, ДанныеКонтрагента.ИНН, Истина);
		ЗаполнитьКонтрагентаВДокументахЗагрузки(Контрагент, Партнер, ДокументыКЗагрузке, СтруктураПоиска);
		
		ПоляОтбора = "БанковскийСчет, ПЛАТЕЛЬЩИКИНН, Исходящий";
		СтруктураПоиска = Новый Структура(
			ПоляОтбора, СтрокаДокумента.БанковскийСчет, ДанныеКонтрагента.ИНН, Ложь);
		ЗаполнитьКонтрагентаВДокументахЗагрузки(Контрагент, Партнер, ДокументыКЗагрузке, СтруктураПоиска);
		
	Иначе
		
		ПоляОтбора = "БанковскийСчет, ИмяКонтрагента";
		СтруктураПоиска = Новый Структура(
			ПоляОтбора, СтрокаДокумента.БанковскийСчет, СтрокаДокумента.ИмяКонтрагента);
		ЗаполнитьКонтрагентаВДокументахЗагрузки(Контрагент, Партнер, ДокументыКЗагрузке, СтруктураПоиска);
		
	КонецЕсли;
	
	Возврат Контрагент;
	
КонецФункции

// Создает элемент справочника "БанковскиеСчетаКонтрагентов"
//
// Параметры:
//    ДокументыКЗагрузке - ТаблицаЗначений - Таблица документов выписки
//    СтрокаДокумента - СтрокаТаблицыЗначений - Содержит описание счета и связанных данных
//    ВладелецСчета - СправочникСсылка.Контрагенты - Контрагент - владелец счета.
//
// Возвращаемое значение:
//    СправочникСсылка.БанковскиеСчетаКонтрагентов - Ссылка на новый элемент справочника.
//
Функция СоздатьБанковскийСчетКонтрагента(ДокументыКЗагрузке, СтрокаДокумента, ВладелецСчета) Экспорт
	
	Если СтрокаДокумента.Исходящий Тогда
		
		ИмяКолонкиСчет              = "ПОЛУЧАТЕЛЬСЧЕТ";
		ИмяКолонкиПрямыеРасчеты     = "ПОЛУЧАТЕЛЬ2";
		ИмяКолонкиНаименованиеБанкаНеПрямыеРасчеты     = "ПОЛУЧАТЕЛЬ3";
		ИмяКолонкиГородБанкаНеПрямыеРасчеты     = "ПОЛУЧАТЕЛЬ4";
		ИмяКолонкиБИК               = "ПОЛУЧАТЕЛЬБИК";
		ИмяКолонкиКорСчет           = "ПОЛУЧАТЕЛЬКОРСЧЕТ";
		ИмяКолонкиРасчСчет          = "ПОЛУЧАТЕЛЬРАСЧСЧЕТ";
		ИмяКолонкиКодСтраныБанка    = "ПОЛУЧАТЕЛЬБАНК5";
		ИмяКолонкиСВИФТ             = "ПОЛУЧАТЕЛЬСВИФТ";
		ИмяКолонкиНаименованиеБанка = "ПОЛУЧАТЕЛЬБАНК1";
		ИмяКолонкиГородБанка        = "ПОЛУЧАТЕЛЬБАНК2";
		
	Иначе
		
		ИмяКолонкиСчет              = "ПЛАТЕЛЬЩИКСЧЕТ";
		ИмяКолонкиПрямыеРасчеты     = "ПЛАТЕЛЬЩИК2";
		ИмяКолонкиНаименованиеБанкаНеПрямыеРасчеты     = "ПЛАТЕЛЬЩИК3";
		ИмяКолонкиГородБанкаНеПрямыеРасчеты     = "ПЛАТЕЛЬЩИК4";
		ИмяКолонкиБИК               = "ПЛАТЕЛЬЩИКБИК";
		ИмяКолонкиКорСчет           = "ПЛАТЕЛЬЩИККОРСЧЕТ";
		ИмяКолонкиРасчСчет          = "ПЛАТЕЛЬЩИКРАСЧСЧЕТ";
		ИмяКолонкиКодСтраныБанка    = "ПЛАТЕЛЬЩИКБАНК5";
		ИмяКолонкиСВИФТ             = "ПЛАТЕЛЬЩИКСВИФТ";
		ИмяКолонкиНаименованиеБанка = "ПЛАТЕЛЬЩИКБАНК1";
		ИмяКолонкиГородБанка        = "ПЛАТЕЛЬЩИКБАНК2";
		
	КонецЕсли;
	
	НомерСчета = СтрокаДокумента[ИмяКолонкиСчет];
	Если Не ЗначениеЗаполнено(НомерСчета) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеСчета = РеквизитыБанковскогоСчета();
	
	ДанныеСчета.Вставить("Владелец",              ВладелецСчета);
	ДанныеСчета.Вставить("ВалютаДенежныхСредств", СтрокаДокумента.Валюта);
	ДанныеСчета.Вставить("НомерСчета",            НомерСчета);
	
	Если СтрокаДокумента.ЭтоЗагрузкаBankFeeds 
		И ДенежныеСредстваКлиентСервер.ПравильнаяДлинаIBAN(НомерСчета) Тогда
		
		ДанныеСчета.Вставить("ЭтоIBAN",   Истина);
		
	КонецЕсли;
	
	ПрямыеРасчеты = ПустаяСтрока(СтрокаДокумента[ИмяКолонкиПрямыеРасчеты]);
	ОсновнаяСтрана = Константы.ОсновнаяСтрана.Получить();
	Если ПрямыеРасчеты Тогда
		
		// Банк контрагента
		БикБанка       = СтрокаДокумента[ИмяКолонкиБИК];
		КоррСчетБанка  = СтрокаДокумента[ИмяКолонкиКорСчет];
		
		Банк = Неопределено;
		Если Не ПустаяСтрока(БикБанка) Тогда
			Банк = Справочники.КлассификаторБанков.НайтиПоКоду(БикБанка);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Банк) И Не ПустаяСтрока(КоррСчетБанка) Тогда
			Банк = Справочники.КлассификаторБанков.НайтиПоРеквизиту("КоррСчет", КоррСчетБанка);
		КонецЕсли;
		
		КодСтраныБанка = СтрокаДокумента[ИмяКолонкиКодСтраныБанка];
		Если ЗначениеЗаполнено(КодСтраныБанка) Тогда
			СтранаБанка = Справочники.СтраныМира.НайтиПоРеквизиту("КодАльфа2", КодСтраныБанка);
			Если ЗначениеЗаполнено(СтранаБанка)
				//++ Локализация
				И СтранаБанка <> ОсновнаяСтрана
				//-- Локализация
				Тогда
				ДанныеСчета.Вставить("ИностранныйБанк", Истина);
			КонецЕсли;
			ДанныеСчета.Вставить("СтранаБанка", СтранаБанка);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Банк) Тогда
			
			СтранаБанка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Банк, "Страна");
			
			Если СтранаБанка = ОсновнаяСтрана Тогда
				ДанныеСчета.Вставить("Банк", Банк);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеСчета.Банк) Тогда
			ДанныеСчета.Вставить("РучноеИзменениеРеквизитовБанка", Истина);
			ДанныеСчета.Вставить("БИКБанка",          СтрокаДокумента[ИмяКолонкиБИК]);
			ДанныеСчета.Вставить("СВИФТБанка",        СтрокаДокумента[ИмяКолонкиСВИФТ]);
			ДанныеСчета.Вставить("НаименованиеБанка", СтрокаДокумента[ИмяКолонкиНаименованиеБанка]);
			ДанныеСчета.Вставить("ГородБанка",        СтрокаДокумента[ИмяКолонкиГородБанка]);
			ДанныеСчета.Вставить("КоррСчетБанка",     СтрокаДокумента[ИмяКолонкиКорСчет]);
		КонецЕсли;
		
	Иначе
		
		// Банк контрагента
		НаимБанка      = СтрокаДокумента[ИмяКолонкиНаименованиеБанкаНеПрямыеРасчеты];
		КоррСчетБанка  = СтрокаДокумента[ИмяКолонкиРасчСчет];
		
		Банк = Неопределено;
		Если Не ПустаяСтрока(НаимБанка) И Не ПустаяСтрока(КоррСчетБанка) Тогда
			Банк = Справочники.КлассификаторБанков.НайтиПоРеквизиту("КоррСчет", КоррСчетБанка);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Банк) Тогда
			
			СтранаБанка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Банк, "Страна");
			
			Если СтранаБанка = ОсновнаяСтрана Тогда
				ДанныеСчета.Вставить("Банк", Банк);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеСчета.Банк) Тогда
			ДанныеСчета.Вставить("РучноеИзменениеРеквизитовБанка", Истина);
			ДанныеСчета.Вставить("НаименованиеБанка", НаимБанка);
			ДанныеСчета.Вставить("ГородБанка",        СтрокаДокумента[ИмяКолонкиГородБанкаНеПрямыеРасчеты]);
			ДанныеСчета.Вставить("КоррСчетБанка",     КоррСчетБанка);
		КонецЕсли;
		
		// РЦ банка контрагента
		РЦБанка         = СтрокаДокумента[ИмяКолонкиНаименованиеБанка];
		БикРЦБанка      = СтрокаДокумента[ИмяКолонкиБИК];
		КоррСчетРЦБанка = СтрокаДокумента[ИмяКолонкиКорСчет];
		
		РЦБанк = Неопределено;
		Если Не ПустаяСтрока(РЦБанка) И Не ПустаяСтрока(БикРЦБанка) Тогда
			РЦБанк = Справочники.КлассификаторБанков.НайтиПоКоду(БикРЦБанка);
			Если Не ЗначениеЗаполнено(РЦБанк) Тогда
				РЦБанк = Справочники.КлассификаторБанков.НайтиПоРеквизиту("КоррСчет", КоррСчетРЦБанка);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РЦБанк) Тогда
			
			СтранаБанка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РЦБанк, "Страна");
			
			Если СтранаБанка = ОсновнаяСтрана Тогда
				ДанныеСчета.Вставить("БанкДляРасчетов", РЦБанк);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеСчета.БанкДляРасчетов) Тогда
			ДанныеСчета.Вставить("РучноеИзменениеРеквизитовБанкаДляРасчетов", Истина);
			ДанныеСчета.Вставить("НаименованиеБанкаДляРасчетов", РЦБанка);
			ДанныеСчета.Вставить("ГородБанкаДляРасчетов",        СтрокаДокумента[ИмяКолонкиГородБанка]);
			ДанныеСчета.Вставить("БИКБанкаДляРасчетов",          БикРЦБанка);
			ДанныеСчета.Вставить("КоррСчетБанкаДляРасчетов",     КоррСчетРЦБанка);
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеСчета.РучноеИзменениеРеквизитовБанка Тогда
		СтрокаНаименования = Прав(СокрЛП(ДанныеСчета.НомерСчета), 4)
			+ ?(ЗначениеЗаполнено(ДанныеСчета.НаименованиеБанка), " в " + Строка(ДанныеСчета.НаименованиеБанка), "")
			+ " (" + Строка(ДанныеСчета.ВалютаДенежныхСредств) + ")";
	Иначе
		СтрокаНаименования = Прав(СокрЛП(ДанныеСчета.НомерСчета), 4) 
			+ ?(ЗначениеЗаполнено(ДанныеСчета.Банк), " в " + Строка(ДанныеСчета.Банк), "")
			+ " (" + Строка(ДанныеСчета.ВалютаДенежныхСредств) + ")";
	КонецЕсли;
	
	ДанныеСчета.Вставить("Наименование", Лев(СтрокаНаименования, 150));
	
	Если ЗначениеЗаполнено(СтрокаДокумента.СчетКонтрагента) Тогда
		Возврат СтрокаДокумента.СчетКонтрагента;
	КонецЕсли;
	
	Счет = НайтиСоздатьБанковскийСчетКонтрагента(ДанныеСчета);
	
	// Нужно подставить новый счет в другие строки выписки
	СтруктураПоиска = Новый Структура("ПОЛУЧАТЕЛЬСЧЕТ, Контрагент, БанковскийСчет",
		ДанныеСчета.НомерСчета, ВладелецСчета, СтрокаДокумента.БанковскийСчет);
	
	ЗаписиКонтрагента = ДокументыКЗагрузке.НайтиСтроки(СтруктураПоиска);
	
	Для каждого ЗаписьКонтрагента Из ЗаписиКонтрагента Цикл
		ЗаписьКонтрагента.СчетКонтрагента = Счет;
	КонецЦикла;
	
	СтруктураПоиска = Новый Структура("ПЛАТЕЛЬЩИКСЧЕТ, Контрагент, БанковскийСчет",
		ДанныеСчета.НомерСчета, ВладелецСчета, СтрокаДокумента.БанковскийСчет);
	
	ЗаписиКонтрагента = ДокументыКЗагрузке.НайтиСтроки(СтруктураПоиска);
	
	Для каждого ЗаписьКонтрагента Из ЗаписиКонтрагента Цикл
		ЗаписьКонтрагента.СчетКонтрагента = Счет;
	КонецЦикла;
	
	Возврат Счет;
	
КонецФункции

Процедура ЗаполнитьКонтрагентов(ДокументыКЗагрузке, ТаблицаДокументов) Экспорт
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки,
	|	ТаблицаДокументов.ИмяКонтрагента КАК Наименование,
	|	ТаблицаДокументов.СокрИмяКонтрагента КАК СокращенноеНаименование,
	|	ТаблицаДокументов.Контрагент КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументов.Исходящий ТОГДА
	|			ТаблицаДокументов.ПолучательИНН
	|		ИНАЧЕ
	|			ТаблицаДокументов.ПлательщикИНН
	|	КОНЕЦ КАК ИНН,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументов.Исходящий ТОГДА
	|		ТаблицаДокументов.ПолучательКПП
	|	ИНАЧЕ
	|		ТаблицаДокументов.ПлательщикКПП
	|	КОНЕЦ КАК КПП,
	|	ТаблицаДокументов.ПроверятьИНН,
	|	ТаблицаДокументов.ПроверятьКПП,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументов.Исходящий ТОГДА
	|			ТаблицаДокументов.ПолучательСчет
	|		ИНАЧЕ
	|			ТаблицаДокументов.ПлательщикСчет
	|	КОНЕЦ КАК НомерСчета,
	|	ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА ТаблицаДокументов.Исходящий ТОГДА
	|			ТаблицаДокументов.ПолучательБИК
	|		ИНАЧЕ
	|			ТаблицаДокументов.ПлательщикБИК
	|	КОНЕЦ КАК Строка(9)) КАК БИКБанка,
	|	ТаблицаДокументов.ВидОперации
	|
	|ПОМЕСТИТЬ ТаблицаДокументов
	|
	|ИЗ
	|	&ТаблицаДокументов КАК ТаблицаДокументов
	|";
	
	Запрос.УстановитьПараметр("ТаблицаДокументов", ТаблицаДокументов);
	Запрос.Выполнить();
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
	|	ДанныеСправочника.Владелец КАК Контрагент,
	|	ДанныеСправочника.Ссылка КАК СчетКонтрагента,
	|	0 КАК Приоритет
	|
	|ИЗ
	|	ТаблицаДокументов
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.БанковскиеСчетаОрганизаций КАК ДанныеСправочника
	|	ПО
	|		ДанныеСправочника.НомерСчета = ТаблицаДокументов.НомерСчета
	|		И (ДанныеСправочника.Банк.Код = ТаблицаДокументов.БИКБанка ИЛИ ДанныеСправочника.БИКБанка = ТаблицаДокументов.БИКБанка)
	|		И ДанныеСправочника.Владелец.ИНН = ТаблицаДокументов.ИНН
	|		И ТаблицаДокументов.ПроверятьИНН
	|		И НЕ ДанныеСправочника.Закрыт,
	|	Константа.ИспользоватьПередачиТоваровМеждуОрганизациями КАК ИспользоватьПередачиТоваровМеждуОрганизациями
	|ГДЕ
	|	ВЫБОР
	|		КОГДА ТаблицаДокументов.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)
	|				ИЛИ ТаблицаДокументов.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации)
	|				ИЛИ ТаблицаДокументов.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию)
	|			ТОГДА ИспользоватьПередачиТоваровМеждуОрганизациями.Значение
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ // Контрагент уже найден, ищем счет
	|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
	|	Контрагенты.Ссылка КАК Контрагент,
	|	ДанныеСправочника.Ссылка КАК СчетКонтрагента,
	|	5 КАК Приоритет
	|
	|ИЗ
	|	ТаблицаДокументов
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.Контрагенты КАК Контрагенты
	|	ПО
	|		Контрагенты.Ссылка = ТаблицаДокументов.Контрагент
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.БанковскиеСчетаКонтрагентов КАК ДанныеСправочника
	|	ПО
	|		ДанныеСправочника.НомерСчета = ТаблицаДокументов.НомерСчета
	|		И ДанныеСправочника.Владелец = Контрагенты.Ссылка
	|		И НЕ ДанныеСправочника.Закрыт
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
	|	ДанныеСправочника.Владелец КАК Контрагент,
	|	ДанныеСправочника.Ссылка КАК СчетКонтрагента,
	|	10 КАК Приоритет
	|
	|ИЗ
	|	ТаблицаДокументов
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.БанковскиеСчетаКонтрагентов КАК ДанныеСправочника
	|	ПО
	|		ДанныеСправочника.НомерСчета = ТаблицаДокументов.НомерСчета
	|		И ДанныеСправочника.Владелец.ИНН = ТаблицаДокументов.ИНН
	|		И ДанныеСправочника.Владелец.КПП = ТаблицаДокументов.КПП
	|		И ТаблицаДокументов.ПроверятьКПП
	|		И НЕ ДанныеСправочника.Закрыт
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
	|	ДанныеСправочника.Владелец КАК Контрагент,
	|	ДанныеСправочника.Ссылка КАК СчетКонтрагента,
	|	20 КАК Приоритет
	|
	|ИЗ
	|	ТаблицаДокументов
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.БанковскиеСчетаКонтрагентов КАК ДанныеСправочника
	|	ПО
	|		ДанныеСправочника.НомерСчета = ТаблицаДокументов.НомерСчета
	|		И ДанныеСправочника.Владелец.ИНН = ТаблицаДокументов.ИНН
	|		И ТаблицаДокументов.ПроверятьИНН
	|		И НЕ ДанныеСправочника.Закрыт
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
	|	ДанныеСправочника.Владелец КАК Контрагент,
	|	ДанныеСправочника.Ссылка КАК СчетКонтрагента,
	|	30 КАК Приоритет
	|
	|ИЗ
	|	ТаблицаДокументов
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.БанковскиеСчетаКонтрагентов КАК ДанныеСправочника
	|	ПО
	|		ДанныеСправочника.НомерСчета = ТаблицаДокументов.НомерСчета
	|		И (ДанныеСправочника.Владелец.НаименованиеПолное = ТаблицаДокументов.Наименование
	|			ИЛИ ДанныеСправочника.Владелец.НаименованиеПолное = ТаблицаДокументов.СокращенноеНаименование)
	|		И НЕ ДанныеСправочника.Закрыт
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
	|	ДанныеСправочника.Ссылка КАК Контрагент,
	|	НЕОПРЕДЕЛЕНО КАК СчетКонтрагента,
	|	40 КАК Приоритет
	|
	|ИЗ
	|	ТаблицаДокументов
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.Контрагенты КАК ДанныеСправочника
	|	ПО
	|		ДанныеСправочника.ИНН = ТаблицаДокументов.ИНН
	|		И ДанныеСправочника.КПП = ТаблицаДокументов.КПП
	|		И ТаблицаДокументов.ПроверятьКПП
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
	|	ДанныеСправочника.Ссылка КАК Контрагент,
	|	НЕОПРЕДЕЛЕНО КАК СчетКонтрагента,
	|	50 КАК Приоритет
	|
	|ИЗ
	|	ТаблицаДокументов
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.Контрагенты КАК ДанныеСправочника
	|	ПО
	|		ДанныеСправочника.ИНН = ТаблицаДокументов.ИНН
	|		И ТаблицаДокументов.ПроверятьИНН
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
	|	ДанныеСправочника.Ссылка КАК Контрагент,
	|	НЕОПРЕДЕЛЕНО КАК СчетКонтрагента,
	|	60 КАК Приоритет
	|
	|ИЗ
	|	ТаблицаДокументов
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.Контрагенты КАК ДанныеСправочника
	|	ПО
	|		ДанныеСправочника.НаименованиеПолное = ТаблицаДокументов.Наименование
	|		И (ДанныеСправочника.ИНН = """"
	|			ИЛИ НЕ ТаблицаДокументов.ПроверятьИНН)
	|		И (ДанныеСправочника.КПП = """"
	|			ИЛИ НЕ ТаблицаДокументов.ПроверятьКПП)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
	|	ДанныеСправочника.Ссылка КАК Контрагент,
	|	НЕОПРЕДЕЛЕНО КАК СчетКонтрагента,
	|	70 КАК Приоритет
	|
	|ИЗ
	|	ТаблицаДокументов
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.ФизическиеЛица КАК ДанныеСправочника
	|	ПО
	|		ДанныеСправочника.Наименование = ТаблицаДокументов.Наименование
	|		И (ДанныеСправочника.ИНН = ТаблицаДокументов.ИНН
	|			ИЛИ ДанныеСправочника.ИНН = """"
	|			ИЛИ НЕ ТаблицаДокументов.ПроверятьИНН)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки,
	|	ДанныеСправочника.Владелец,
	|	ДанныеСправочника.Ссылка,
	|	80
	|
	|ИЗ
	|	ТаблицаДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.БанковскиеСчетаКонтрагентов КАК ДанныеСправочника
	|		ПО ДанныеСправочника.НомерСчета = ТаблицаДокументов.НомерСчета
	|			И НЕ ДанныеСправочника.Закрыт
	|			И (ДанныеСправочника.Владелец.ИНН = """"
	|				ИЛИ НЕ ТаблицаДокументов.ПроверятьИНН)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	Приоритет
	|";
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
		
		СтрокаДокумента = ДокументыКЗагрузке.Найти(Выборка.НомерСтроки, "НомерСтроки");
		Если СтрокаДокумента <> Неопределено Тогда
			
			НайденоКонтрагентов = 0;
			ТекущийПриоритет = 99;
			
			Пока Выборка.Следующий() Цикл
				Если ТекущийПриоритет < Выборка.Приоритет Тогда
					Прервать;
				КонецЕсли;
				
				Если СтрокаДокумента.ЭтоСБП
					И Не ЗначениеЗаполнено(СтрокаДокумента.Контрагент)
					И Выборка.Контрагент = Справочники.Контрагенты.РозничныйПокупатель Тогда
					Продолжить;
				КонецЕсли;
				
				ТекущийПриоритет = Выборка.Приоритет;
				НайденоКонтрагентов = НайденоКонтрагентов + 1;
				
				Если НайденоКонтрагентов = 1 Тогда
					
					СтрокаДокумента.Контрагент = Выборка.Контрагент;
					СтрокаДокумента.НайденКонтрагент = Истина;
					
					Если ЗначениеЗаполнено(Выборка.СчетКонтрагента) Тогда
						СтрокаДокумента.СчетКонтрагента = Выборка.СчетКонтрагента;
						СтрокаДокумента.НайденСчетКонтрагента = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			// Если найдено два одинаковых контрагента с одинаковым номером счета, тогда контрагента не заполняем, 
			// будет предложено выбрать контрагента, по выбранному контрагенту определится счет.
			// Если найдено два одинаковых контрагента без найденного счета, тогда контрагент не заполняем, 
			// будет предложено выбрать контрагента и для него будет создан счет.
			// Если у одного контрагента 2 и более одинаковых счета, тогда контрагента не заполняем.
			// В остальных случаях если найдены дубли с одинаковым приоритетом, то контрагент останется пустым и новый создаваться не будет.
			Если НайденоКонтрагентов > 1 Тогда
				
				СтрокаДокумента.Контрагент = Неопределено;
				СтрокаДокумента.СчетКонтрагента = Неопределено;
				СтрокаДокумента.СоздаватьКонтрагента = Ложь;
				СтрокаДокумента.НайденКонтрагент = Ложь;
				СтрокаДокумента.НайденСчетКонтрагента = Ложь;
			
				ДобавитьЗамечание(СтрокаДокумента.ОшибкиЗагрузки,
					СтрШаблон(НСтр("ru='Найдено более одного контрагента или банковского счета контрагента (%1)!'"), СтрокаДокумента.ИмяКонтрагента));
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает пустую таблицу счетов для проверки запрета редактирования данных в загружаемом периоде.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Пустая таблица счетов для проверки запрета редактирования:
// * Объект - СправочникСсылка.БанковскиеСчетаОрганизаций - банковский счет.
// * Дата - Дата - проверяемая дата.
Функция ПустаяТаблицаСчетовДляПроверкиЗапретаРедактирования() Экспорт

	Таблица = Новый ТаблицаЗначений;
	
	Таблица.Колонки.Добавить("Объект", Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчетаОрганизаций"));
	Таблица.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	
	Возврат Таблица;

КонецФункции

// Возвращает список счетов с запретом изменения в загружаемом периоде.
// 
// Параметры:
//  ПроверяемыеСчета - см. ПустаяТаблицаСчетовДляПроверкиЗапретаРедактирования.
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.БанковскиеСчетаОрганизаций - список счетов.
//
Функция ЗаполнитьСписокСчетовСЗапретомИзмененияВЗагружаемомПериоде(ПроверяемыеСчета) Экспорт

	СписокСчетов = Новый Массив;
	
	Если ПроверяемыеСчета.Количество() = 0 Тогда
		Возврат СписокСчетов;
	КонецЕсли;
	
	ДанныеДляПроверки = ДатыЗапретаИзменения.ШаблонДанныхДляПроверки();
	
	Для Каждого Счет Из ПроверяемыеСчета Цикл
		
		НоваяСтрока = ДанныеДляПроверки.Добавить();
		НоваяСтрока.Дата = Счет.Дата;
		НоваяСтрока.Раздел = "Банк";
		НоваяСтрока.Объект = Счет.Объект;
		
	КонецЦикла;
	
	ПараметрыСообщения = ДатыЗапретаИзменения.ПараметрыСообщенияОЗапрете();
	ОписаниеОшибки = Новый Структура;
	
	ИзмененияЗапрещены = ДатыЗапретаИзменения.НайденЗапретИзмененияДанных(ДанныеДляПроверки, ПараметрыСообщения, ОписаниеОшибки);
	
	Если Не ИзмененияЗапрещены Тогда
		Возврат СписокСчетов;
	КонецЕсли;
	
	Для Каждого Ошибка Из ОписаниеОшибки.Запреты Цикл
		СписокСчетов.Добавить(Ошибка.Объект);
	КонецЦикла;
	
	Возврат СписокСчетов;

КонецФункции

//++ Локализация

// Заполняет данные контрагента по платежу в выписке
//
// Параметры:
//  Исходящий - Булево - признак исходящего платежа.
//  СтрокаПлатежа - СтрокаТаблицыЗначений, Структура - данные платежа.
//  ИмяКонтрагента - Строка - имя контрагента в выписке.
//
Процедура ЗаполнитьДанныеКонтрагентаПоПлатежу(Исходящий, СтрокаПлатежа, ИмяКонтрагента) Экспорт

	СписокДанных = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		ИмяКонтрагента, "//", Ложь, Истина);
	
	НомерСчета = ?(Исходящий, СтрокаПлатежа.ПолучательСчет, СтрокаПлатежа.ПлательщикСчет);
	
	ИНН = ?(Исходящий, СтрокаПлатежа.ПолучательИНН, СтрокаПлатежа.ПлательщикИНН);
	
	ДанныеКонтрагента = Новый Структура;
	ДанныеКонтрагента.Вставить("ИНН", ИНН);
	ДанныеКонтрагента.Вставить("ИмяКонтрагента", ИмяКонтрагента);
	ДанныеКонтрагента.Вставить("АдресКонтрагента", "");
	ДанныеКонтрагента.Вставить("ЭтоФизЛицо", Ложь);
	
	Если СписокДанных.Количество() > 1 Тогда
		
		ИсходныеДанные = Новый Структура;
		ИсходныеДанные.Вставить("ЭтоАктивныйСчетНезавершенныхРасчетов", ЭтоАктивныйСчетНезавершенныхРасчетов(НомерСчета));
		ИсходныеДанные.Вставить("ЭтоЮрЛицо", СтрДлина(ИНН) = 10);
		ИсходныеДанные.Вставить("ЭтоСчетКлиента", ЭтоСчетОперацийСКлиентами(НомерСчета));
		
		РазобратьДанныеКонтрагента(ИсходныеДанные, ДанныеКонтрагента, СписокДанных, 0);
		
		Если ИсходныеДанные.ЭтоАктивныйСчетНезавершенныхРасчетов
			И ДанныеКонтрагента.ЭтоФизЛицо Тогда
			НомерСчета = "";
		КонецЕсли;
		
		Если Не ПустаяСтрока(НомерСчета) Тогда
			ДанныеКонтрагента.ЭтоФизЛицо = ЭтоСчетФизическогоЛица(НомерСчета); 
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеКонтрагента.ИмяКонтрагента <> ""
		И СтрНачинаетсяС(ДанныеКонтрагента.ИмяКонтрагента, "ИНН ") Тогда
		ДанныеКонтрагента.ИмяКонтрагента = СтрЗаменить(ВРег(ДанныеКонтрагента.ИмяКонтрагента), "ИНН ", "");
	КонецЕсли;
	
	ПозицияСчетаВНаименовании = СтрНайти(ВРег(ДанныеКонтрагента.ИмяКонтрагента), "Р/С");
	
	Если ПозицияСчетаВНаименовании > 0 Тогда
		
		НаименованиеКонтрагента = СокрЛП(Сред(ДанныеКонтрагента.ИмяКонтрагента, 1, ПозицияСчетаВНаименовании - 1));
		
		Если ЭтоАктивныйСчетРасчетовСФилиалами(НомерСчета) Тогда
			
			ПодстрокаБезНаименования = СокрЛП(Сред(ДанныеКонтрагента.ИмяКонтрагента, ПозицияСчетаВНаименовании));
			ПодстрокаБезНаименования = СокрЛ(СтрЗаменить(ВРег(ПодстрокаБезНаименования), "Р/С", ""));
			СписокФраз = СтрРазделить(ПодстрокаБезНаименования, " ", Ложь);
			
			Если СписокФраз.Количество() > 0
				И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СписокФраз[0]) Тогда
				НомерСчета = СписокФраз[0];
				ДанныеКонтрагента.ЭтоФизЛицо = ЭтоСчетФизическогоЛица(НомерСчета);
			КонецЕсли;
			
		КонецЕсли;
		
		ДанныеКонтрагента.ИмяКонтрагента = ?(НаименованиеКонтрагента <> "", НаименованиеКонтрагента, ДанныеКонтрагента.ИмяКонтрагента);
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаПлатежа, ДанныеКонтрагента);
	
	Если Исходящий Тогда
		СтрокаПлатежа.ПолучательИНН = ДанныеКонтрагента.ИНН;
		СтрокаПлатежа.ПолучательКПП = ?(ДанныеКонтрагента.ЭтоФизЛицо, "", СтрокаПлатежа.ПолучательКПП);
		СтрокаПлатежа.ПолучательСчет = НомерСчета;
	Иначе
		СтрокаПлатежа.ПлательщикИНН = ДанныеКонтрагента.ИНН;
		СтрокаПлатежа.ПлательщикКПП = ?(ДанныеКонтрагента.ЭтоФизЛицо, "", СтрокаПлатежа.ПлательщикКПП);
		СтрокаПлатежа.ПлательщикСчет = НомерСчета;
	КонецЕсли;

КонецПроцедуры

// Заполняет данные нового контрагента, полученные из сервиса.
// 
// Параметры:
//  ПараметрыЗаполнения - Структура - Параметры процедуры для заполнения:
//  *ИНН - Строка - ИНН контрагента, по которому выполняется запрос в сервис.
//  *Ссылка - СправочникСсылка.Контрагенты - заполняемый контрагент.
//  *ЭтоЮридическоеЛицо - Булево - признак юридического лица.
//  *Дата - Дата - дата, с которой начинается действие контактной информации.
//  АдресХранилища - Строка - Адрес хранилища.
Процедура ЗаполнитьДанныеНовогоКонтрагента(ПараметрыЗаполнения, АдресХранилища) Экспорт

	Если ПараметрыЗаполнения.ЭтоЮридическоеЛицо Тогда
		
		Результат = РаботаСКонтрагентами.СведенияОЮридическомЛицеПоИНН(ПараметрыЗаполнения.ИНН);
		ДанныеКонтрагента = ПартнерыИКонтрагентыЛокализация.РезультатПреобразованияСведенийОЮрЛице(Результат);
		
	Иначе
		
		Результат = РаботаСКонтрагентами.РеквизитыПредпринимателяПоИНН(ПараметрыЗаполнения.ИНН);
		ДанныеКонтрагента = ПартнерыИКонтрагентыЛокализация.РезультатПреобразованияСведенийОФизЛице(Результат);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеКонтрагента.ОписаниеОшибки) Тогда
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("Справочник.Контрагенты");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ПараметрыЗаполнения.Ссылка);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка.Заблокировать();
			
			СправочникОбъект = ПараметрыЗаполнения.Ссылка.ПолучитьОбъект();
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеКонтрагента, "КПП")
				И СправочникОбъект.КПП = ""
				И ДанныеКонтрагента.КПП <> ""
				И ПараметрыЗаполнения.ЭтоЮридическоеЛицо Тогда
				СправочникОбъект.КПП = ДанныеКонтрагента.КПП;
			КонецЕсли;
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеКонтрагента, "РегистрационныйНомер") Тогда
				СправочникОбъект.РегистрационныйНомер = ДанныеКонтрагента.РегистрационныйНомер;
			КонецЕсли;
			
			Если СправочникОбъект.Модифицированность() Тогда
				СправочникОбъект.Записать();
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			Событие = СтрШаблон(
				"%1.%2",
				НСтр("ru = 'Данные'", ОбщегоНазначения.КодОсновногоЯзыка()),
				НСтр("ru = 'Изменение'", ОбщегоНазначения.КодОсновногоЯзыка()));
			ЗаписьЖурналаРегистрации(
				Событие,
				УровеньЖурналаРегистрации.Ошибка,
				ПараметрыЗаполнения.Ссылка.Метаданные(),
				ПараметрыЗаполнения.Ссылка,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеКонтрагента, "Телефон")
			И ЗначениеЗаполнено(ДанныеКонтрагента.Телефон) Тогда
			УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(
				ПараметрыЗаполнения.Ссылка,
				ДанныеКонтрагента.Телефон.КонтактнаяИнформация,
				Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента,
				ПараметрыЗаполнения.Дата,
				Ложь);
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеКонтрагента, "ЮридическийАдрес")
			И ЗначениеЗаполнено(ДанныеКонтрагента.ЮридическийАдрес) Тогда
			
			ЮрАдрес = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
				ПараметрыЗаполнения.Ссылка,
				Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента,
				ПараметрыЗаполнения.Дата, );
			
			Если ЮрАдрес = "" Тогда
				УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(
					ПараметрыЗаполнения.Ссылка,
					ДанныеКонтрагента.ЮридическийАдрес.КонтактнаяИнформация,
					Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента,
					ПараметрыЗаполнения.Дата,
					Ложь);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

//-- Локализация

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьРасшифровкуПлатежаПоОбъектуРасчетов(ДанныеРасшифровки)

	Если Не ЗначениеЗаполнено(ДанныеРасшифровки.ОбъектРасчетов) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыОбъектаРасчетов = "ВалютаВзаиморасчетов, НаправлениеДеятельности, Организация, Подразделение";
	ЗаполнитьЗначенияСвойств(ДанныеРасшифровки, ДанныеРасшифровки.ОбъектРасчетов, РеквизитыОбъектаРасчетов);

КонецПроцедуры

Процедура ЗаполнитьРасшифровкуПлатежаПоДоговоруКредитаДепозита(ДанныеРасшифровки)

	РеквизитыДоговора = "ВалютаВзаиморасчетов, ХарактерДоговора, СтатьяДДСОсновногоДолга, СтатьяДДСПоступленияВыдачи";
	СвойстваДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеРасшифровки.ДоговорКредитаДепозита, РеквизитыДоговора);
	ЗаполнитьЗначенияСвойств(ДанныеРасшифровки, СвойстваДоговора);
	
	Если СвойстваДоговора.ХарактерДоговора = Перечисления.ХарактерыДоговоровФинансовыхИнструментов.КредитИлиЗайм Тогда
		Если ЗначениеЗаполнено(СвойстваДоговора.СтатьяДДСПоступленияВыдачи) Тогда
			ДанныеРасшифровки.СтатьяДвиженияДенежныхСредств = СвойстваДоговора.СтатьяДДСПоступленияВыдачи;
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(СвойстваДоговора.СтатьяДДСОсновногоДолга) Тогда
			ДанныеРасшифровки.СтатьяДвиженияДенежныхСредств = СвойстваДоговора.СтатьяДДСОсновногоДолга;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьРеквизитыСписания(ДокументыКЗагрузке, СтрокаДокумента, ДокументОбъект, СоздаватьКонтрагентов, ПроводитьДокументы, Префикс)
	
	Перем РеквизитыВсе, РеквизитыХозОперации;
	
	УстановитьСвойство(ДокументОбъект, "Дата", ДокументОбъект.ДатаВходящегоДокумента);
	
	Если НачалоДня(ДокументОбъект.Дата) = НачалоДня(ТекущаяДатаСеанса()) Тогда
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
	Иначе
		ДокументОбъект.Дата = КонецДня(ДокументОбъект.Дата);
	КонецЕсли;
	
	//++ Локализация
	
	// Контроль заявок
	Если ДокументОбъект.ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.ИнкассовоеПоручение
		Или ДокументОбъект.ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.ПлатежныйОрдер
		Или ДокументОбъект.ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.БанковскийОрдер Тогда
	
		ДокументОбъект.НеКонтролироватьЗаполнениеЗаявки = Истина;
	Иначе
	//-- Локализация
		ДокументОбъект.ОплатаПоЗаявкам = ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаРасходованиеДенежныхСредств")
			И Не ДенежныеСредстваСервер.РазрешеныПлатежиБезУказанияЗаявок(ДокументОбъект);
	//++ Локализация
	КонецЕсли;
	
	РеквизитыПлательщика = ДенежныеСредстваПовтИспРФ.ДанныеПлательщика(ДокументОбъект.Организация, ДокументОбъект.БанковскийСчет);
	УстановитьСвойство(ДокументОбъект, "ИННПлательщика", РеквизитыПлательщика.ИННПлательщика);
	УстановитьСвойство(ДокументОбъект, "КПППлательщика", РеквизитыПлательщика.КПППлательщика);
	УстановитьСвойство(ДокументОбъект, "ТекстПлательщика", РеквизитыПлательщика.ТекстПлательщика);
	//-- Локализация
	
	// Хоз. операция
	Если ЗначениеЗаполнено(СтрокаДокумента.ВидОперации) Тогда
		ХозяйственнаяОперация = СтрокаДокумента.ВидОперации;
	Иначе
		ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику;
	КонецЕсли;
	УстановитьСвойство(ДокументОбъект, "ХозяйственнаяОперация", ХозяйственнаяОперация);
	
	// Статья по умолчанию
	Если Не ЗначениеЗаполнено(СтрокаДокумента.СтатьяДвиженияДенежныхСредств) Тогда
		СтрокаДокумента.СтатьяДвиженияДенежныхСредств =
			Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(ХозяйственнаяОперация);
	КонецЕсли;
	
	Документы.СписаниеБезналичныхДенежныхСредств.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		ДокументОбъект, РеквизитыВсе, РеквизитыХозОперации);
	
	// Контрагент
	Если РеквизитыХозОперации.Найти("Контрагент") <> Неопределено Тогда
		Если ЗначениеЗаполнено(СтрокаДокумента.Контрагент) Тогда
			УстановитьСвойство(ДокументОбъект, "Контрагент", СтрокаДокумента.Контрагент);
		ИначеЕсли СоздаватьКонтрагентов И СтрокаДокумента.СоздаватьКонтрагента Тогда
			УстановитьСвойство(ДокументОбъект, "Контрагент", СоздатьКонтрагента(ДокументыКЗагрузке, СтрокаДокумента));
		Иначе
			УстановитьСвойство(ДокументОбъект, "ИмяКонтрагента", СтрокаДокумента.ИмяКонтрагента);
		КонецЕсли;
	КонецЕсли;
	
	// Счет контрагента
	Если РеквизитыХозОперации.Найти("БанковскийСчетКонтрагента") <> Неопределено Тогда
		Если ЗначениеЗаполнено(СтрокаДокумента.СчетКонтрагента) Тогда
			УстановитьСвойство(ДокументОбъект, "БанковскийСчетКонтрагента", СтрокаДокумента.СчетКонтрагента);
		ИначеЕсли ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
			УстановитьСвойство(ДокументОбъект, "БанковскийСчетКонтрагента",
				СоздатьБанковскийСчетКонтрагента(ДокументыКЗагрузке, СтрокаДокумента, ДокументОбъект.Контрагент));
		КонецЕсли;
	КонецЕсли;
	
	// Подотчетное лицо
	Если РеквизитыХозОперации.Найти("ПодотчетноеЛицо") <> Неопределено Тогда
		Если СтрокаДокумента.НайденКонтрагент Тогда
			УстановитьСвойство(ДокументОбъект, "ПодотчетноеЛицо", СтрокаДокумента.Контрагент);
		Иначе
			УстановитьСвойство(ДокументОбъект, "ПодотчетноеЛицо", СтрокаДокумента.ПодотчетноеЛицо);
		КонецЕсли;
	КонецЕсли;
	
	Если РеквизитыХозОперации.Найти("ДатаАвансовогоОтчета") <> Неопределено Тогда
		УстановитьСвойство(ДокументОбъект, "ДатаАвансовогоОтчета",
			?(ЗначениеЗаполнено(ДокументОбъект.Дата), ДокументОбъект.Дата, ТекущаяДатаСеанса()) + 7 * 24 * 3600);
	КонецЕсли;
	
	// Банковский счет получатель
	Если РеквизитыХозОперации.Найти("БанковскийСчетПолучатель") <> Неопределено Тогда
		УстановитьСвойство(ДокументОбъект, "БанковскийСчетПолучатель", СтрокаДокумента.СчетКонтрагента);
	КонецЕсли;
	
	// Прочие реквизиты
	ЗаполнитьЗначенияСвойств(ДокументОбъект, СтрокаДокумента,
		"СтатьяДвиженияДенежныхСредств, Подразделение, КассаПолучатель");
	
	//++ Локализация
	Если ЗначениеЗаполнено(СтрокаДокумента.ОчередностьПлатежа) Тогда
		УстановитьСвойство(ДокументОбъект, "ОчередностьПлатежа", СтрокаДокумента.ОчередностьПлатежа);
	Иначе
		УстановитьСвойство(ДокументОбъект, "ОчередностьПлатежа", 5);
	КонецЕсли;
	
	СписокКВД = ПлатежиВБюджетКлиентСервер.КодыВидовДохода(ДокументОбъект.Дата,
		ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту
		ИЛИ ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета);
	КодВидаДохода =
		?(СписокКВД.НайтиПоЗначению(СтрокаДокумента.КодНазПлатежа) <> Неопределено, СтрокаДокумента.КодНазПлатежа, "");
	УстановитьСвойство(ДокументОбъект, "КодВидаДохода", КодВидаДохода);
	УстановитьСвойство(ДокументОбъект, "КодВыплат", СтрокаДокумента.ПоказательТипа);
	
	Если СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств
		И СтрокаДокумента.ЭтоСБП Тогда // Комиссия СБП
	
		СпособПроведенияПлатежа = Перечисления.СпособыПроведенияПлатежей.СистемаБыстрыхПлатежей;
		ПараметрыОтбора = Справочники.ДоговорыЭквайринга.ПараметрыОтбораДоговораЭквайринга();
		
		ПараметрыОтбора.Организация = ДокументОбъект.Организация;
		ПараметрыОтбора.Эквайер = ДокументОбъект.Контрагент;
		ПараметрыОтбора.БанковскийСчет = ДокументОбъект.БанковскийСчет;
		ПараметрыОтбора.СпособПроведенияПлатежа = СпособПроведенияПлатежа;
		
		ДоговорЭквайринга = Справочники.ДоговорыЭквайринга.ДоговорЭквайрингаПоУмолчанию(ПараметрыОтбора);
		
		Если ЗначениеЗаполнено(ДоговорЭквайринга) Тогда
			
			РеквизитыДоговора = Справочники.ДоговорыЭквайринга.РеквизитыДоговора(ДоговорЭквайринга);
			
			СтрокаДокумента.Подразделение = РеквизитыДоговора.ПодразделениеРасходов;
			СтрокаДокумента.СтатьяРасходов = РеквизитыДоговора.СтатьяРасходов;
			СтрокаДокумента.АналитикаРасходов = РеквизитыДоговора.АналитикаРасходов;
			СтрокаДокумента.СтатьяДвиженияДенежныхСредств = РеквизитыДоговора.СтатьяДвиженияДенежныхСредствКомиссия;
			
		КонецЕсли;
	
	КонецЕсли;
		
	Если СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ВозвратОплатыНаПлатежнуюКарту Тогда
		ЗаполнитьОперациюОплатыПоПлатежнойКарте(СтрокаДокумента, ДокументОбъект);
	КонецЕсли;
	
	// Бюджетные реквизиты
	Если СтрокаДокумента.ПлатежВБюджет Тогда
		УстановитьСвойство(ДокументОбъект, "ПеречислениеВБюджет", Истина);
		УстановитьСвойство(ДокументОбъект, "ВидПеречисленияВБюджет", СтрокаДокумента.ВидПеречисленияВБюджет);
		УстановитьСвойство(ДокументОбъект, "КодБК", СтрокаДокумента.ПоказательКБК);
		УстановитьСвойство(ДокументОбъект, "КодОКАТО", СтрокаДокумента.ОКАТО);
		УстановитьСвойство(ДокументОбъект, "СтатусСоставителя", СтрокаДокумента.СтатусСоставителя);
		Если СтрокаДокумента.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ИнойПлатеж Тогда
			УстановитьСвойство(ДокументОбъект, "ПоказательОснования", "0");
			УстановитьСвойство(ДокументОбъект, "ПоказательПериода", "0");
			УстановитьСвойство(ДокументОбъект, "ПоказательНомера", "0");
			УстановитьСвойство(ДокументОбъект, "ПоказательДаты", "0");
		Иначе
			УстановитьСвойство(ДокументОбъект, "ПоказательОснования", СтрокаДокумента.ПоказательОснования);
			УстановитьСвойство(ДокументОбъект, "ПоказательПериода", СтрокаДокумента.ПоказательПериода);
			УстановитьСвойство(ДокументОбъект, "ПоказательНомера", СтрокаДокумента.ПоказательНомера);
			УстановитьСвойство(ДокументОбъект, "ПоказательДаты", СтрокаДокумента.ПоказательДаты);
		КонецЕсли;
		УстановитьСвойство(ДокументОбъект, "ПоказательТипа", СтрокаДокумента.ПоказательТипа);
	Иначе
		УстановитьСвойство(ДокументОбъект, "ВидПеречисленияВБюджет", Перечисления.ВидыПеречисленийВБюджет.ИнойПлатеж);
	КонецЕсли;
	
	Если ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
		РеквизитыПлательщика = ДенежныеСредстваСерверЛокализация.РеквизитыПлательщика(ДокументОбъект);
		ЗаполнитьЗначенияСвойств(ДокументОбъект, РеквизитыПлательщика);
	КонецЕсли;
	
	УстановитьСвойство(ДокументОбъект, "ВидПлатежа", СтрокаДокумента.ВидПлатежа);
	
	//-- Локализация
	
	// Расшифровка платежа
	Если РеквизитыХозОперации.Найти("РасшифровкаПлатежа") <> Неопределено Тогда
		
		Если РеквизитыХозОперации.Найти("РасшифровкаПлатежа.ДоговорКредитаДепозита") <> Неопределено Тогда
			
			СтрокаРасшифровки = ДокументОбъект.РасшифровкаПлатежа.Добавить();
			
			Запрос = Новый Запрос;
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	ДанныеРегистра.ОбъектОплаты КАК ДоговорКредитаДепозита,
			|	ВЫРАЗИТЬ(ДанныеРегистра.ОбъектОплаты КАК Справочник.ДоговорыКредитовИДепозитов).Партнер КАК Партнер,
			|	ВЫРАЗИТЬ(ДанныеРегистра.ОбъектОплаты КАК Справочник.ДоговорыКредитовИДепозитов).СтатьяДДСПоступленияВыдачи КАК СтатьяДвиженияДенежныхСредств
			|ИЗ
			|	РегистрСведений.ГрафикПлатежей КАК ДанныеРегистра
			|ГДЕ
			|	ДанныеРегистра.БанковскийСчетКасса = &БанковскийСчет
			|	И ДанныеРегистра.ПлательщикПолучатель = &Контрагент
			|	И ДанныеРегистра.ПоступлениеСписание = ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияДенежныхСредств.Списание)
			|	И ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоКредитам)
			|СГРУППИРОВАТЬ ПО
			|	ДанныеРегистра.ОбъектОплаты
			|ИМЕЮЩИЕ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеРегистра.ОбъектОплаты) = 1
			|";
			
			Запрос.УстановитьПараметр("БанковскийСчет", ДокументОбъект.БанковскийСчет);
			Запрос.УстановитьПараметр("Контрагент", ДокументОбъект.Контрагент);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, Выборка);
			Иначе
				
				Если Не ЗначениеЗаполнено(СтрокаДокумента.ДоговорКредитаДепозита) Тогда
					
					СтрокиКЗагрузке = Новый Массив;
					СтрокиКЗагрузке.Добавить(СтрокаДокумента);
					ЗаполнитьПоКосвеннымДанным(СтрокиКЗагрузке, ДокументОбъект.БанковскийСчет);
					
				КонецЕсли;

				ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, СтрокаДокумента,
					"Партнер, СтатьяДвиженияДенежныхСредств, ДоговорКредитаДепозита");
			КонецЕсли;
			
			ЗаполнитьРасшифровкуПлатежаПоДоговоруКредитаДепозита(СтрокаРасшифровки);
			
			СтрокаРасшифровки.Сумма = СтрокаДокумента.СуммаДокумента;
			
			РаботаСКурсамиВалютУТ.ЗаполнитьКурсДокументаПоУмолчанию(
				СтрокаРасшифровки.КурсЧислительВзаиморасчетов,
				СтрокаРасшифровки.КурсЗнаменательВзаиморасчетов,
				ДокументОбъект.Валюта,
				СтрокаРасшифровки.ВалютаВзаиморасчетов,
				ДокументОбъект.Организация,
				?(ЗначениеЗаполнено(СтрокаДокумента.ДатаПроведения), СтрокаДокумента.ДатаПроведения, ДокументОбъект.Дата));
			ВалютаРеглУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(ДокументОбъект.Организация);
			ДенежныеСредстваКлиентСервер.РассчитатьСуммуВзаиморасчетовВСтрокеРасшифровки(
				СтрокаРасшифровки, ДокументОбъект.Валюта, ВалютаРеглУчета);
		
		ИначеЕсли РеквизитыХозОперации.Найти("РасшифровкаПлатежа.ОбъектРасчетов") = Неопределено Тогда
			
			СтрокаРасшифровки = ДокументОбъект.РасшифровкаПлатежа.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, СтрокаДокумента,
				"Партнер, СтатьяДвиженияДенежныхСредств, СтатьяРасходов, АналитикаРасходов, АналитикаАктивовПассивов, Подразделение");
			//++ Локализация


			//-- Локализация
			СтрокаРасшифровки.Сумма = СтрокаДокумента.СуммаДокумента;
			РаботаСКурсамиВалютУТ.ЗаполнитьКурсДокументаПоУмолчанию(
				СтрокаРасшифровки.КурсЧислительВзаиморасчетов,
				СтрокаРасшифровки.КурсЗнаменательВзаиморасчетов,
				ДокументОбъект.Валюта,
				СтрокаРасшифровки.ВалютаВзаиморасчетов,
				ДокументОбъект.Организация,
				?(ЗначениеЗаполнено(СтрокаДокумента.ДатаПроведения), СтрокаДокумента.ДатаПроведения, ДокументОбъект.Дата));
		
		Иначе
			
			Реквизиты = Новый Структура;
			Реквизиты.Вставить("Дата", ДокументОбъект.Дата);
			Реквизиты.Вставить("Организация", ДокументОбъект.Организация);
			Реквизиты.Вставить("СуммаДокумента", 0);
			Реквизиты.Вставить("Валюта", ДокументОбъект.Валюта);
			
			Если ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
				Реквизиты.Вставить("Контрагент", ДокументОбъект.Контрагент);
			Иначе
				Реквизиты.Вставить("Контрагент", ДокументОбъект.ИмяКонтрагента);
			КонецЕсли;
			
			Если ТипЗнч(СтрокаДокумента.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
				Реквизиты.Вставить("Партнер", Справочники.Партнеры.НашеПредприятие);
			Иначе
				Реквизиты.Вставить("Партнер", Неопределено);
			КонецЕсли;
			
			Реквизиты.Вставить("ХозяйственнаяОперация", ДокументОбъект.ХозяйственнаяОперация);
			
			Реквизиты.Вставить("ТипРасчетов", Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком);
			Реквизиты.Вставить("ПартнерПрочиеОтношения", Ложь);
			Реквизиты.Вставить("ПодборДебиторскойЗадолженности", Ложь);
			Реквизиты.Вставить("ПодборТолькоБезусловнойЗадолженности", Ложь);
			Реквизиты.Вставить("ПоДатамПлатежей", Истина);
			Реквизиты.Вставить("НаДатуВозникновения", ДокументОбъект.Дата);
			
			//++ Локализация


			ОперацияССамозанятым = Неопределено;

			//-- Локализация
			
			АдресПлатежейВХранилище = "";
			ТаблицаОстатковРасчетов = Неопределено;
			
			ВзаиморасчетыСервер.ЗаполнитьТаблицуОстатковРасчетов(Реквизиты, АдресПлатежейВХранилище, ТаблицаОстатковРасчетов);
			КолонкиТаблицыОстатковВзаиморасчетов = ТаблицаОстатковРасчетов.Колонки; // КоллекцияКолонокТаблицыЗначений 
			КолонкиТаблицыОстатковВзаиморасчетов.Добавить("Обработано", Новый ОписаниеТипов("Булево"));
			
			РаспределяемаяСумма = ДокументОбъект.СуммаДокумента;
		
			Для Каждого СтрокаТаблицы Из ТаблицаОстатковРасчетов Цикл
				
				Если ТипЗнч(СтрокаТаблицы.ОбъектРасчетов) = Тип("СправочникСсылка.ОбъектыРасчетов") Тогда
					
					НомерДокументаРасчетов = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(СтрокаТаблицы.Номер, Истина, Истина);
					Если СтрЧислоВхождений(СтрокаДокумента.НазначениеПлатежа, НомерДокументаРасчетов) > 0 Тогда
						
						//++ Локализация

						Если ОперацияССамозанятым <> Неопределено
							И СтрокаТаблицы.ОперацияССамозанятым <> ОперацияССамозанятым
							И СтрокаТаблицы.ОперацияССамозанятым <> Неопределено Тогда
							СтрокаТаблицы.Обработано = Истина;
							Продолжить;
						КонецЕсли;
						
						ОперацияССамозанятым = СтрокаТаблицы.ОперацияССамозанятым;

						//-- Локализация
						
						СтрокаРасшифровки = ДокументОбъект.РасшифровкаПлатежа.Добавить();
						
						СуммаСтроки = Мин(РаспределяемаяСумма, СтрокаТаблицы.Сумма);
						РаспределяемаяСумма = РаспределяемаяСумма - СтрокаТаблицы.Сумма;
						
						ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, СтрокаТаблицы,, "Сумма");
						//++ Локализация


						//-- Локализация
						СтрокаРасшифровки.Сумма = СуммаСтроки;
						
						РаботаСКурсамиВалютУТ.ЗаполнитьКурсДокументаПоУмолчанию(
							СтрокаРасшифровки.КурсЧислительВзаиморасчетов,
							СтрокаРасшифровки.КурсЗнаменательВзаиморасчетов,
							ДокументОбъект.Валюта,
							СтрокаРасшифровки.ВалютаВзаиморасчетов,
							ДокументОбъект.Организация,
							?(ЗначениеЗаполнено(СтрокаДокумента.ДатаПроведения), СтрокаДокумента.ДатаПроведения, ДокументОбъект.Дата),,
							СтрокаРасшифровки.ОбъектРасчетов);
						
						СтрокаТаблицы.Обработано = Истина;
						
						Если РаспределяемаяСумма <= 0 Тогда
							Прервать;
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если ПроводитьДокументы И РаспределяемаяСумма > 0 Тогда // Подбор объектов расчетов
				
				Для Каждого СтрокаТаблицы Из ТаблицаОстатковРасчетов Цикл
					
					Если ЗначениеЗаполнено(СтрокаТаблицы.ОбъектРасчетов) Тогда
						
						Если СтрокаТаблицы.Обработано Тогда
							Продолжить;
						КонецЕсли;
						
						//++ Локализация

						Если ОперацияССамозанятым <> Неопределено
							И СтрокаТаблицы.ОперацияССамозанятым <> ОперацияССамозанятым
							И СтрокаТаблицы.ОперацияССамозанятым <> Неопределено Тогда
							СтрокаТаблицы.Обработано = Истина;
							Продолжить;
						КонецЕсли;
						
						ОперацияССамозанятым = СтрокаТаблицы.ОперацияССамозанятым;

						//-- Локализация
						
						СтрокаРасшифровки = ДокументОбъект.РасшифровкаПлатежа.Добавить();
						
						СуммаСтроки = Мин(РаспределяемаяСумма, СтрокаТаблицы.Сумма);
						РаспределяемаяСумма = РаспределяемаяСумма - СтрокаТаблицы.Сумма;
						
						ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, СтрокаТаблицы, , "Сумма");
						//++ Локализация


						//-- Локализация
						СтрокаРасшифровки.Сумма = СуммаСтроки;
						
						РаботаСКурсамиВалютУТ.ЗаполнитьКурсДокументаПоУмолчанию(
							СтрокаРасшифровки.КурсЧислительВзаиморасчетов,
							СтрокаРасшифровки.КурсЗнаменательВзаиморасчетов,
							ДокументОбъект.Валюта,
							СтрокаРасшифровки.ВалютаВзаиморасчетов,
							ДокументОбъект.Организация,
							?(ЗначениеЗаполнено(СтрокаДокумента.ДатаПроведения), СтрокаДокумента.ДатаПроведения, ДокументОбъект.Дата),,
							СтрокаРасшифровки.ОбъектРасчетов);
						
						СтрокаТаблицы.Обработано = Истина;
						
						Если РаспределяемаяСумма <= 0 Тогда
							Прервать;
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если РаспределяемаяСумма > 0 Или Не ДокументОбъект.РасшифровкаПлатежа.Количество() Тогда
				
				//++ Локализация
				Если ОперацияССамозанятым <> Неопределено
					И СтрокаДокумента.ДоговорССамозанятым <> ОперацияССамозанятым Тогда
					ЗаполняемыеРеквизиты = "Контрагент, Партнер, СтатьяДвиженияДенежныхСредств";
				Иначе
				//-- Локализация
				
					УстановитьСвойство(ДокументОбъект, "Договор", СтрокаДокумента.Договор);
					ЗаполняемыеРеквизиты = "Контрагент, Партнер, ОбъектРасчетов, СтатьяДвиженияДенежныхСредств";

				//++ Локализация
				КонецЕсли;
				
				ОперацияССамозанятым = СтрокаДокумента.ДоговорССамозанятым;
				//-- Локализация
				
				СтрокаРасшифровки = ДокументОбъект.РасшифровкаПлатежа.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, СтрокаДокумента, ЗаполняемыеРеквизиты);
				ЗаполнитьРасшифровкуПлатежаПоОбъектуРасчетов(СтрокаРасшифровки);
				
				ЗаполнитьСтавкуНДСПоДоговору(ДокументОбъект, СтрокаРасшифровки);
				
				//++ Локализация


				//-- Локализация
				СтрокаРасшифровки.Сумма = РаспределяемаяСумма;
				РаботаСКурсамиВалютУТ.ЗаполнитьКурсДокументаПоУмолчанию(
					СтрокаРасшифровки.КурсЧислительВзаиморасчетов,
					СтрокаРасшифровки.КурсЗнаменательВзаиморасчетов,
					ДокументОбъект.Валюта,
					СтрокаРасшифровки.ВалютаВзаиморасчетов,
					ДокументОбъект.Организация,
					?(ЗначениеЗаполнено(СтрокаДокумента.ДатаПроведения), СтрокаДокумента.ДатаПроведения, ДокументОбъект.Дата),,
					СтрокаРасшифровки.ОбъектРасчетов);
			КонецЕсли;
			
			ДокументОбъект.РасшифровкаПлатежа.Свернуть(
				"Контрагент, Партнер, СтатьяДвиженияДенежныхСредств, ВалютаВзаиморасчетов, Подразделение, Организация,
				|ОбъектРасчетов, КурсЧислительВзаиморасчетов, КурсЗнаменательВзаиморасчетов, СтатьяЦелевыхСредств, ДатаПогашения,
				|НаправлениеДеятельности, СтавкаНДС, НастройкаСчетовУчета",
				"Сумма, СуммаВзаиморасчетов, СуммаНДС");
			
			//++ Локализация
			УстановитьСвойство(ДокументОбъект, "ОперацияССамозанятым", ?(ОперацияССамозанятым = Неопределено, Ложь, ОперацияССамозанятым));
			//-- Локализация
			
			ДенежныеСредстваСервер.ЗаполнитьНДСВРасшифровке(
				ДокументОбъект.РасшифровкаПлатежа,
				ДенежныеСредстваСервер.РасшифровкаПлатежаНДС(ДокументОбъект.Организация,
					ДокументОбъект.Дата, ДокументОбъект.Валюта, ДокументОбъект.РасшифровкаПлатежа.ВыгрузитьКолонку("ОбъектРасчетов"), Ложь));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыПоступления(ДокументыКЗагрузке, СтрокаДокумента, ДокументОбъект, СоздаватьКонтрагентов, ПроводитьДокументы)
	
	Перем РеквизитыВсе, РеквизитыХозОперации;
	
	УстановитьСвойство(ДокументОбъект, "Дата", ДокументОбъект.ДатаВходящегоДокумента);
	
	Если НачалоДня(ДокументОбъект.Дата) = НачалоДня(ТекущаяДатаСеанса()) Тогда
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
	Иначе
		ДокументОбъект.Дата = КонецДня(ДокументОбъект.Дата);
	КонецЕсли;
	
	// Хоз. операция
	Если ЗначениеЗаполнено(СтрокаДокумента.ВидОперации) Тогда
		ХозяйственнаяОперация = СтрокаДокумента.ВидОперации;
	Иначе
		ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента;
	КонецЕсли;
	УстановитьСвойство(ДокументОбъект, "ХозяйственнаяОперация", ХозяйственнаяОперация);
	
	// Статья по умолчанию
	Если Не ЗначениеЗаполнено(СтрокаДокумента.СтатьяДвиженияДенежныхСредств) Тогда
		СтрокаДокумента.СтатьяДвиженияДенежныхСредств =
			Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(ХозяйственнаяОперация);
	КонецЕсли;
	
	Документы.ПоступлениеБезналичныхДенежныхСредств.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		ДокументОбъект, РеквизитыВсе, РеквизитыХозОперации);
	
	ВалютаРеглУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(ДокументОбъект.Организация);
	
	// Контрагент
	Если РеквизитыХозОперации.Найти("Контрагент") <> Неопределено Тогда
		Если ЗначениеЗаполнено(СтрокаДокумента.Контрагент) Тогда
			УстановитьСвойство(ДокументОбъект, "Контрагент", СтрокаДокумента.Контрагент);
		ИначеЕсли СоздаватьКонтрагентов И СтрокаДокумента.СоздаватьКонтрагента Тогда
			УстановитьСвойство(ДокументОбъект, "Контрагент", СоздатьКонтрагента(ДокументыКЗагрузке, СтрокаДокумента));
		Иначе
			УстановитьСвойство(ДокументОбъект, "ИмяКонтрагента", СтрокаДокумента.ИмяКонтрагента);
		КонецЕсли;
	КонецЕсли;
	
	// Счет контрагента
	Если РеквизитыХозОперации.Найти("БанковскийСчетКонтрагента") <> Неопределено Тогда
		Если ЗначениеЗаполнено(СтрокаДокумента.СчетКонтрагента) Тогда
			УстановитьСвойство(ДокументОбъект, "БанковскийСчетКонтрагента", СтрокаДокумента.СчетКонтрагента);
		ИначеЕсли ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
			УстановитьСвойство(ДокументОбъект, "БанковскийСчетКонтрагента",
				СоздатьБанковскийСчетКонтрагента(ДокументыКЗагрузке, СтрокаДокумента, ДокументОбъект.Контрагент));
		КонецЕсли;
	КонецЕсли;
	
	// Подотчетное лицо
	Если РеквизитыХозОперации.Найти("ПодотчетноеЛицо") <> Неопределено Тогда
		Если СтрокаДокумента.НайденКонтрагент Тогда
			УстановитьСвойство(ДокументОбъект, "ПодотчетноеЛицо", СтрокаДокумента.Контрагент);
		Иначе
			УстановитьСвойство(ДокументОбъект, "ПодотчетноеЛицо", СтрокаДокумента.ПодотчетноеЛицо);
		КонецЕсли;
	КонецЕсли;
	
	// Банковский счет отправитель
	Если РеквизитыХозОперации.Найти("БанковскийСчетОтправитель") <> Неопределено Тогда
		УстановитьСвойство(ДокументОбъект, "БанковскийСчетОтправитель", СтрокаДокумента.СчетКонтрагента);
	КонецЕсли;
	
	// Прочие реквизиты
	ЗаполнитьЗначенияСвойств(ДокументОбъект, СтрокаДокумента,
		"СтатьяДвиженияДенежныхСредств, Подразделение, КассаОтправитель");
	
	// Поступление оплаты по эквайрингу
	Если РеквизитыХозОперации.Найти("ДоговорЭквайринга") <> Неопределено Тогда
		
		ОбработатьКомиссию = Ложь;
		
		Если ЗначениеЗаполнено(СтрокаДокумента.ДоговорЭквайринга) Тогда
			УстановитьСвойство(ДокументОбъект, "ДоговорЭквайринга", СтрокаДокумента.ДоговорЭквайринга);
			УстановитьСвойство(ДокументОбъект, "СтатьяРасходов", СтрокаДокумента.СтатьяРасходов);
			УстановитьСвойство(ДокументОбъект, "АналитикаРасходов", СтрокаДокумента.АналитикаРасходов);
			РеквизитыДоговора = Справочники.ДоговорыЭквайринга.РеквизитыДоговора(ДокументОбъект.ДоговорЭквайринга);
			УстановитьСвойство(ДокументОбъект, "ОтражатьКомиссию",
				РеквизитыДоговора.СпособОтраженияКомиссии = Перечисления.СпособыОтраженияЭквайринговойКомиссии.ПриЗачислении);
			ОбработатьКомиссию = ДокументОбъект.ОтражатьКомиссию;
		Иначе
			
			СпособПроведенияПлатежа = Неопределено;
			
			Если СтрокаДокумента.ЭтоСБП Тогда
				СпособПроведенияПлатежа = Перечисления.СпособыПроведенияПлатежей.СистемаБыстрыхПлатежей;
			КонецЕсли;
			
			ПараметрыОтбора = Справочники.ДоговорыЭквайринга.ПараметрыОтбораДоговораЭквайринга();
		
			ПараметрыОтбора.Организация = ДокументОбъект.Организация;
			ПараметрыОтбора.Эквайер = ДокументОбъект.Контрагент;
			ПараметрыОтбора.БанковскийСчет = ДокументОбъект.БанковскийСчет;
			ПараметрыОтбора.СпособПроведенияПлатежа = СпособПроведенияПлатежа;
			
			ДоговорЭквайринга = Справочники.ДоговорыЭквайринга.ДоговорЭквайрингаПоУмолчанию(ПараметрыОтбора);
			УстановитьСвойство(ДокументОбъект, "ДоговорЭквайринга", ДоговорЭквайринга);
			
			Если ЗначениеЗаполнено(ДокументОбъект.ДоговорЭквайринга) Тогда
				РеквизитыДоговора = Справочники.ДоговорыЭквайринга.РеквизитыДоговора(ДокументОбъект.ДоговорЭквайринга);
				УстановитьСвойство(ДокументОбъект, "Подразделение", РеквизитыДоговора.ПодразделениеРасходов);
				УстановитьСвойство(ДокументОбъект, "СтатьяРасходов", РеквизитыДоговора.СтатьяРасходов);
				УстановитьСвойство(ДокументОбъект, "АналитикаРасходов", РеквизитыДоговора.АналитикаРасходов);
				УстановитьСвойство(ДокументОбъект, "СтатьяДвиженияДенежныхСредств", РеквизитыДоговора.СтатьяДвиженияДенежныхСредствПоступлениеОплаты);
				УстановитьСвойство(ДокументОбъект, "ОтражатьКомиссию",
					РеквизитыДоговора.СпособОтраженияКомиссии = Перечисления.СпособыОтраженияЭквайринговойКомиссии.ПриЗачислении);
				ОбработатьКомиссию = ДокументОбъект.ОтражатьКомиссию;
			КонецЕсли;
		КонецЕсли;
		//++ Локализация
		Если ОбработатьКомиссию И РеквизитыДоговора.ФиксированнаяСтавкаКомиссии Тогда
			СуммаКомиссии = Окр(ДенежныеСредстваКлиентСервер.РассчитатьСуммуКомиссии(
				ДокументОбъект.СуммаДокумента, РеквизитыДоговора.СтавкаКомиссии, Истина), 2);
			Если ЕстьСуммаКомиссииВНазначении(ДокументОбъект.НазначениеПлатежа, СуммаКомиссии) Тогда
				УстановитьСвойство(ДокументОбъект, "СуммаКомиссии", СуммаКомиссии);
			КонецЕсли;
		КонецЕсли;
		//-- Локализация
	КонецЕсли;
	
	//++ Локализация
	
	// Бюджетные реквизиты
	Если СтрокаДокумента.ПлатежВБюджет Тогда
		УстановитьСвойство(ДокументОбъект, "ПеречислениеВБюджет", Истина);
		УстановитьСвойство(ДокументОбъект, "ВидПеречисленияВБюджет", СтрокаДокумента.ВидПеречисленияВБюджет);
		УстановитьСвойство(ДокументОбъект, "КодБК", СтрокаДокумента.ПоказательКБК);
		УстановитьСвойство(ДокументОбъект, "КодОКАТО", СтрокаДокумента.ОКАТО);
		УстановитьСвойство(ДокументОбъект, "СтатусСоставителя", СтрокаДокумента.СтатусСоставителя);
		Если СтрокаДокумента.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ИнойПлатеж Тогда
			УстановитьСвойство(ДокументОбъект, "ПоказательОснования", "0");
			УстановитьСвойство(ДокументОбъект, "ПоказательПериода", "0");
			УстановитьСвойство(ДокументОбъект, "ПоказательНомера", "0");
			УстановитьСвойство(ДокументОбъект, "ПоказательДаты", "0");
		Иначе
			УстановитьСвойство(ДокументОбъект, "ПоказательОснования", СтрокаДокумента.ПоказательОснования);
			УстановитьСвойство(ДокументОбъект, "ПоказательПериода", СтрокаДокумента.ПоказательПериода);
			УстановитьСвойство(ДокументОбъект, "ПоказательНомера", СтрокаДокумента.ПоказательНомера);
			УстановитьСвойство(ДокументОбъект, "ПоказательДаты", СтрокаДокумента.ПоказательДаты);
		КонецЕсли;
		УстановитьСвойство(ДокументОбъект, "ПоказательТипа", СтрокаДокумента.ПоказательТипа);
	Иначе
		УстановитьСвойство(ДокументОбъект, "ВидПеречисленияВБюджет", Перечисления.ВидыПеречисленийВБюджет.ИнойПлатеж);
	КонецЕсли;
	//-- Локализация
	
	// Расшифровка платежа
	Если РеквизитыХозОперации.Найти("РасшифровкаПлатежа") <> Неопределено Тогда
		
		Если СтрокаДокумента.НайденоОснованиеПлатежа Тогда // УИП
			
			СтрокаРасшифровки = ДокументОбъект.РасшифровкаПлатежа.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, СтрокаДокумента,
				"Партнер, ОснованиеПлатежа, ОбъектРасчетов, СтатьяДвиженияДенежныхСредств");
			ЗаполнитьРасшифровкуПлатежаПоОбъектуРасчетов(СтрокаРасшифровки);
			//++ Локализация


			//-- Локализация
			СтрокаРасшифровки.Сумма = ДокументОбъект.СуммаДокумента;
			
			РаботаСКурсамиВалютУТ.ЗаполнитьКурсДокументаПоУмолчанию(
				СтрокаРасшифровки.КурсЧислительВзаиморасчетов,
				СтрокаРасшифровки.КурсЗнаменательВзаиморасчетов,
				ДокументОбъект.Валюта,
				СтрокаРасшифровки.ВалютаВзаиморасчетов,
				ДокументОбъект.Организация,
				?(ЗначениеЗаполнено(СтрокаДокумента.ДатаПроведения), СтрокаДокумента.ДатаПроведения, ДокументОбъект.Дата),,
				СтрокаРасшифровки.ОбъектРасчетов);
			
			ДенежныеСредстваСервер.ЗаполнитьНДСВРасшифровке(
				ДокументОбъект.РасшифровкаПлатежа,
				ДенежныеСредстваСервер.РасшифровкаПлатежаНДС(ДокументОбъект.Организация,
					ДокументОбъект.Дата, ДокументОбъект.Валюта, ДокументОбъект.РасшифровкаПлатежа.ВыгрузитьКолонку("ОбъектРасчетов"), Истина));
					
		ИначеЕсли РеквизитыХозОперации.Найти("РасшифровкаПлатежа.ДоговорКредитаДепозита") <> Неопределено Тогда
			
			СтрокаРасшифровки = ДокументОбъект.РасшифровкаПлатежа.Добавить();
			
			Запрос = Новый Запрос;
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	ДанныеРегистра.ОбъектОплаты КАК ДоговорКредитаДепозита,
			|	ВЫРАЗИТЬ(ДанныеРегистра.ОбъектОплаты КАК Справочник.ДоговорыКредитовИДепозитов).Партнер КАК Партнер,
			|	ВЫРАЗИТЬ(ДанныеРегистра.ОбъектОплаты КАК Справочник.ДоговорыКредитовИДепозитов).СтатьяДДСПоступленияВыдачи КАК СтатьяДвиженияДенежныхСредств
			|ИЗ
			|	РегистрСведений.ГрафикПлатежей КАК ДанныеРегистра
			|ГДЕ
			|	ДанныеРегистра.БанковскийСчетКасса = &БанковскийСчет
			|	И ДанныеРегистра.ПлательщикПолучатель = &Контрагент
			|	И ДанныеРегистра.ПоступлениеСписание = ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияДенежныхСредств.Поступление)
			|	И ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоКредитам)
			|СГРУППИРОВАТЬ ПО
			|	ДанныеРегистра.ОбъектОплаты
			|ИМЕЮЩИЕ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеРегистра.ОбъектОплаты) = 1
			|";
			
			Запрос.УстановитьПараметр("БанковскийСчет", ДокументОбъект.БанковскийСчет);
			Запрос.УстановитьПараметр("Контрагент", ДокументОбъект.Контрагент);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, Выборка);
			Иначе
				
				Если Не ЗначениеЗаполнено(СтрокаДокумента.ДоговорКредитаДепозита) Тогда
					
					СтрокиКЗагрузке = Новый Массив;
					СтрокиКЗагрузке.Добавить(СтрокаДокумента);
					ЗаполнитьПоКосвеннымДанным(СтрокиКЗагрузке, ДокументОбъект.БанковскийСчет);
					
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, СтрокаДокумента,
					"Партнер, СтатьяДвиженияДенежныхСредств, ДоговорКредитаДепозита");
			КонецЕсли;
			
			ЗаполнитьРасшифровкуПлатежаПоДоговоруКредитаДепозита(СтрокаРасшифровки);
			
			СтрокаРасшифровки.Сумма = СтрокаДокумента.СуммаДокумента;
			
			РаботаСКурсамиВалютУТ.ЗаполнитьКурсДокументаПоУмолчанию(
				СтрокаРасшифровки.КурсЧислительВзаиморасчетов,
				СтрокаРасшифровки.КурсЗнаменательВзаиморасчетов,
				ДокументОбъект.Валюта,
				СтрокаРасшифровки.ВалютаВзаиморасчетов,
				ДокументОбъект.Организация,
				?(ЗначениеЗаполнено(СтрокаДокумента.ДатаПроведения), СтрокаДокумента.ДатаПроведения, ДокументОбъект.Дата));
			ДенежныеСредстваКлиентСервер.РассчитатьСуммуВзаиморасчетовВСтрокеРасшифровки(
				СтрокаРасшифровки, ДокументОбъект.Валюта, ВалютаРеглУчета);
			
		ИначеЕсли РеквизитыХозОперации.Найти("РасшифровкаПлатежа.ОбъектРасчетов") = Неопределено Тогда // Прочие платежи
			
			СтрокаРасшифровки = ДокументОбъект.РасшифровкаПлатежа.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, СтрокаДокумента,
				"Партнер, СтатьяДвиженияДенежныхСредств, СтатьяДоходов, АналитикаДоходов, АналитикаАктивовПассивов, Подразделение");
			//++ Локализация


			//-- Локализация
			СтрокаРасшифровки.Сумма = СтрокаДокумента.СуммаДокумента;
			РаботаСКурсамиВалютУТ.ЗаполнитьКурсДокументаПоУмолчанию(
				СтрокаРасшифровки.КурсЧислительВзаиморасчетов,
				СтрокаРасшифровки.КурсЗнаменательВзаиморасчетов,
				ДокументОбъект.Валюта,
				СтрокаРасшифровки.ВалютаВзаиморасчетов,
				ДокументОбъект.Организация,
				?(ЗначениеЗаполнено(СтрокаДокумента.ДатаПроведения), СтрокаДокумента.ДатаПроведения, ДокументОбъект.Дата));
		
		Иначе
			
			Реквизиты = Новый Структура;
			Реквизиты.Вставить("Дата", ДокументОбъект.Дата);
			Реквизиты.Вставить("Организация", ДокументОбъект.Организация);
			Реквизиты.Вставить("СуммаДокумента", 0);
			Реквизиты.Вставить("Валюта", ДокументОбъект.Валюта);
			
			Если ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
				Реквизиты.Вставить("Контрагент", ДокументОбъект.Контрагент);
			Иначе
				Реквизиты.Вставить("Контрагент", ДокументОбъект.ИмяКонтрагента);
			КонецЕсли;
			
			Если ТипЗнч(СтрокаДокумента.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
				Реквизиты.Вставить("Партнер", Справочники.Партнеры.НашеПредприятие);
			Иначе
				Реквизиты.Вставить("Партнер", Неопределено);
			КонецЕсли;
			
			Реквизиты.Вставить("ХозяйственнаяОперация", ДокументОбъект.ХозяйственнаяОперация);
			
			Реквизиты.Вставить("ТипРасчетов", Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом);
			Реквизиты.Вставить("ПартнерПрочиеОтношения", Ложь);
			Реквизиты.Вставить("ПодборДебиторскойЗадолженности", Истина);
			Реквизиты.Вставить("ПодборТолькоБезусловнойЗадолженности", Ложь);
			Реквизиты.Вставить("ПоДатамПлатежей", Истина);
			Реквизиты.Вставить("НаДатуВозникновения", ДокументОбъект.Дата);
			
			//++ Локализация


			//-- Локализация
			
			АдресПлатежейВХранилище = "";
			ТаблицаОстатковРасчетов = Неопределено;
			
			ВзаиморасчетыСервер.ЗаполнитьТаблицуОстатковРасчетов(Реквизиты, АдресПлатежейВХранилище, ТаблицаОстатковРасчетов);
			КолонкиТаблицыОстатковВзаиморасчетов = ТаблицаОстатковРасчетов.Колонки; // КоллекцияКолонокТаблицыЗначений
			КолонкиТаблицыОстатковВзаиморасчетов.Добавить("Обработано", Новый ОписаниеТипов("Булево"));
			КолонкиТаблицыОстатковВзаиморасчетов.Объект.Имя = "ОснованиеПлатежа";
			
			РаспределяемаяСумма = ДокументОбъект.СуммаДокумента;
			
			Для Каждого СтрокаТаблицы Из ТаблицаОстатковРасчетов Цикл
				
				Если ТипЗнч(СтрокаТаблицы.ОбъектРасчетов) = Тип("СправочникСсылка.ОбъектыРасчетов") Тогда
					
					НомерДокументаРасчетов = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(СтрокаТаблицы.Номер, Истина, Истина);
					
					Если СтрЧислоВхождений(СтрокаДокумента.НазначениеПлатежа, НомерДокументаРасчетов) > 0 Тогда
						
						СтрокаРасшифровки = ДокументОбъект.РасшифровкаПлатежа.Добавить();
						
						СуммаСтроки = Мин(РаспределяемаяСумма, СтрокаТаблицы.Сумма);
						РаспределяемаяСумма = РаспределяемаяСумма - СтрокаТаблицы.Сумма;
						
						ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, СтрокаТаблицы,, "Сумма");
						//++ Локализация


						//-- Локализация
						СтрокаРасшифровки.Сумма = СуммаСтроки;
						
						РаботаСКурсамиВалютУТ.ЗаполнитьКурсДокументаПоУмолчанию(
							СтрокаРасшифровки.КурсЧислительВзаиморасчетов,
							СтрокаРасшифровки.КурсЗнаменательВзаиморасчетов,
							ДокументОбъект.Валюта,
							СтрокаРасшифровки.ВалютаВзаиморасчетов,
							ДокументОбъект.Организация,
							?(ЗначениеЗаполнено(СтрокаДокумента.ДатаПроведения), СтрокаДокумента.ДатаПроведения, ДокументОбъект.Дата),,
							СтрокаРасшифровки.ОбъектРасчетов);
						
						СтрокаТаблицы.Обработано = Истина;
						
						Если РаспределяемаяСумма <= 0 Тогда
							Прервать;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ПроводитьДокументы И РаспределяемаяСумма > 0 Тогда // Подбор объектов расчетов
				
				Для Каждого СтрокаТаблицы Из ТаблицаОстатковРасчетов Цикл
					
					Если ЗначениеЗаполнено(СтрокаТаблицы.ОбъектРасчетов) Тогда
						
						Если СтрокаТаблицы.Обработано Тогда
							Продолжить;
						КонецЕсли;
						
						СтрокаРасшифровки = ДокументОбъект.РасшифровкаПлатежа.Добавить();
						
						СуммаСтроки = Мин(РаспределяемаяСумма, СтрокаТаблицы.Сумма);
						РаспределяемаяСумма = РаспределяемаяСумма - СтрокаТаблицы.Сумма;
						
						ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, СтрокаТаблицы,, "Сумма");
						//++ Локализация


						//-- Локализация
						СтрокаРасшифровки.Сумма = СуммаСтроки;
						
						РаботаСКурсамиВалютУТ.ЗаполнитьКурсДокументаПоУмолчанию(
							СтрокаРасшифровки.КурсЧислительВзаиморасчетов,
							СтрокаРасшифровки.КурсЗнаменательВзаиморасчетов,
							ДокументОбъект.Валюта,
							СтрокаРасшифровки.ВалютаВзаиморасчетов,
							ДокументОбъект.Организация,
							?(ЗначениеЗаполнено(СтрокаДокумента.ДатаПроведения), СтрокаДокумента.ДатаПроведения, ДокументОбъект.Дата),,
							СтрокаРасшифровки.ОбъектРасчетов);
						
						СтрокаТаблицы.Обработано = Истина;
						
						Если РаспределяемаяСумма <= 0 Тогда
							Прервать;
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если РаспределяемаяСумма > 0 Или Не ДокументОбъект.РасшифровкаПлатежа.Количество() Тогда
				
				УстановитьСвойство(ДокументОбъект, "Договор", СтрокаДокумента.Договор);
				
				СтрокаРасшифровки = ДокументОбъект.РасшифровкаПлатежа.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, СтрокаДокумента,
					"Партнер, ОснованиеПлатежа, ОбъектРасчетов, СтатьяДвиженияДенежныхСредств");
				ЗаполнитьРасшифровкуПлатежаПоОбъектуРасчетов(СтрокаРасшифровки);
				
				ЗаполнитьСтавкуНДСПоДоговору(ДокументОбъект, СтрокаРасшифровки);
				
				//++ Локализация


				//-- Локализация
				СтрокаРасшифровки.Сумма = РаспределяемаяСумма;
				РаботаСКурсамиВалютУТ.ЗаполнитьКурсДокументаПоУмолчанию(
					СтрокаРасшифровки.КурсЧислительВзаиморасчетов,
					СтрокаРасшифровки.КурсЗнаменательВзаиморасчетов,
					ДокументОбъект.Валюта,
					СтрокаРасшифровки.ВалютаВзаиморасчетов,
					ДокументОбъект.Организация,
					?(ЗначениеЗаполнено(СтрокаДокумента.ДатаПроведения), СтрокаДокумента.ДатаПроведения, ДокументОбъект.Дата),,
					СтрокаРасшифровки.ОбъектРасчетов);
			КонецЕсли;
			
			ДокументОбъект.РасшифровкаПлатежа.Свернуть(
				"ОснованиеПлатежа, Партнер, СтатьяДвиженияДенежныхСредств, ВалютаВзаиморасчетов, Подразделение, Организация,
				|ОбъектРасчетов, КурсЧислительВзаиморасчетов, КурсЗнаменательВзаиморасчетов, СтатьяЦелевыхСредств, ДатаПогашения,
				|НаправлениеДеятельности, СтавкаНДС, НастройкаСчетовУчета",
				"Сумма, СуммаВзаиморасчетов, СуммаНДС");
			
			ДенежныеСредстваСервер.ЗаполнитьНДСВРасшифровке(
				ДокументОбъект.РасшифровкаПлатежа,
				ДенежныеСредстваСервер.РасшифровкаПлатежаНДС(ДокументОбъект.Организация,
					ДокументОбъект.Дата, ДокументОбъект.Валюта, ДокументОбъект.РасшифровкаПлатежа.ВыгрузитьКолонку("ОбъектРасчетов"), Истина));
		КонецЕсли;
	КонецЕсли;
	
	УстановитьСвойство(ДокументОбъект, "ВалютаКонвертации", СтрокаДокумента.ВалютаКонвертации);
	
	Если ЗначениеЗаполнено(ДокументОбъект.ВалютаКонвертации) Тогда
		ДенежныеСредстваСервер.ПересчитатьПараметрыКонвертации(ДокументОбъект, ВалютаРеглУчета, "ВалютаКонвертации");
	КонецЕсли;
	
	Если СтрокаДокумента.СуммаКонвертации <> 0 Тогда
		
		УстановитьСвойство(ДокументОбъект, "СуммаКонвертации", СтрокаДокумента.СуммаКонвертации, Истина);
		ДенежныеСредстваСервер.ПересчитатьПараметрыКонвертации(ДокументОбъект, ВалютаРеглУчета, "СуммаКонвертации");
		
	КонецЕсли;
	
	//++ Локализация
	Если НЕ ПустаяСтрока(ДокументОбъект.НазначениеПлатежа) Тогда
		ДокументОбъект.ЗаполнитьКодВалютнойОперации();
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

Функция РеквизитыЗаполненияКонтрагента()

	РеквизитыКонтрагента = Новый Структура;
	РеквизитыКонтрагента.Вставить("Наименование", "");
	РеквизитыКонтрагента.Вставить("НаименованиеПолное", "");
	РеквизитыКонтрагента.Вставить("НаименованиеМеждународное", "");
	РеквизитыКонтрагента.Вставить("ИНН", "");
	РеквизитыКонтрагента.Вставить("КПП", "");
	РеквизитыКонтрагента.Вставить("СтранаРегистрации", Неопределено);
	РеквизитыКонтрагента.Вставить("ЮрФизЛицо", Неопределено);
	РеквизитыКонтрагента.Вставить("Партнер", Неопределено);
	
	Возврат РеквизитыКонтрагента;

КонецФункции

Функция РеквизитыЗаполненияПартнера()

	РеквизитыПартнера = Новый Структура;
	РеквизитыПартнера.Вставить("Наименование", "");
	РеквизитыПартнера.Вставить("НаименованиеПолное", "");
	РеквизитыПартнера.Вставить("Клиент", Истина);
	РеквизитыПартнера.Вставить("Поставщик", Истина);
	РеквизитыПартнера.Вставить("ПрочиеОтношения", Истина);
	РеквизитыПартнера.Вставить("ЮрФизЛицо", Перечисления.КомпанияЧастноеЛицо.Компания);
	
	Возврат РеквизитыПартнера;

КонецФункции

Функция НайтиСоздатьПартнера(Отбор)

	Результат = СсылкаИзТаблицыСОтбором("Справочник.Партнеры", Отбор);
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		
		НовыйПартнер = Справочники.Партнеры.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(НовыйПартнер, Отбор);
		НовыйПартнер.ДатаРегистрации = ТекущаяДатаСеанса();
		НовыйПартнер.Комментарий = НСтр("ru = '#Создан автоматически при импорте банковских документов'");
		НовыйПартнер.Записать();
		
		Результат = НовыйПартнер.Ссылка;
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция НайтиСоздатьКонтрагента(ИсходныеДанные, Отбор)

	Результат = СсылкаИзТаблицыСОтбором("Справочник.Контрагенты", Отбор);
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		
		НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(НовыйКонтрагент, Отбор);
		НовыйКонтрагент.Записать();
		
		Результат = НовыйКонтрагент.Ссылка;
		
		ДатаДействия = ?(ЗначениеЗаполнено(ИсходныеДанные.ДатаПроведения), ИсходныеДанные.ДатаПроведения, ИсходныеДанные.Дата);
		ЗаполнитьАдресКонтрагента(ДатаДействия, Результат, Отбор.ЮрФизЛицо, ИсходныеДанные.АдресКонтрагента);
		
		//++ Локализация
		ЗапуститьЗаполнениеДанныхКонтрагента(Результат, Отбор, ДатаДействия);
		//-- Локализация
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Процедура ЗаполнитьКонтрагентаВДокументахЗагрузки(Контрагент, Партнер, ДокументыКЗагрузке, Отбор)

	ЗаписиКонтрагента = ДокументыКЗагрузке.НайтиСтроки(Отбор);
	
	Для каждого ЗаписьКонтрагента Из ЗаписиКонтрагента Цикл
		ЗаписьКонтрагента.Контрагент = Контрагент;
		ЗаписьКонтрагента.Партнер = Партнер;
	КонецЦикла;

КонецПроцедуры

Функция РеквизитыБанковскогоСчета()

	РеквизитыСчета = Новый Структура;
	РеквизитыСчета.Вставить("Владелец", Неопределено);
	РеквизитыСчета.Вставить("ВалютаДенежныхСредств", Неопределено);
	РеквизитыСчета.Вставить("НомерСчета", "");
	РеквизитыСчета.Вставить("ИностранныйБанк", Ложь);
	РеквизитыСчета.Вставить("СтранаБанка", Справочники.СтраныМира.ПустаяСсылка());
	РеквизитыСчета.Вставить("Банк", Неопределено);
	РеквизитыСчета.Вставить("РучноеИзменениеРеквизитовБанка", Ложь);
	РеквизитыСчета.Вставить("БИКБанка", "");
	РеквизитыСчета.Вставить("СВИФТБанка", "");
	РеквизитыСчета.Вставить("НаименованиеБанка", "");
	РеквизитыСчета.Вставить("ГородБанка", "");
	РеквизитыСчета.Вставить("КоррСчетБанка", "");
	РеквизитыСчета.Вставить("БанкДляРасчетов", "");
	РеквизитыСчета.Вставить("РучноеИзменениеРеквизитовБанкаДляРасчетов", Ложь);
	РеквизитыСчета.Вставить("НаименованиеБанкаДляРасчетов", "");
	РеквизитыСчета.Вставить("ГородБанкаДляРасчетов", "");
	РеквизитыСчета.Вставить("БИКБанкаДляРасчетов", "");
	РеквизитыСчета.Вставить("КоррСчетБанкаДляРасчетов", "");
	РеквизитыСчета.Вставить("Наименование", "");
	
	Возврат РеквизитыСчета;

КонецФункции

Функция СсылкаИзТаблицыСОтбором(ИмяТаблицы, ПараметрыЗапроса)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Таблица.Ссылка КАК Ссылка
		|ИЗ
		|	&ИмяТаблицы КАК Таблица
		|ГДЕ
		|	НЕ Таблица.ПометкаУдаления
		|	И &Условия";
	
	СписокУсловий = Новый Массив;
	
	Для Каждого ТекущийПараметр Из ПараметрыЗапроса Цикл
		
		СписокУсловий.Добавить(СтрШаблон("Таблица.%1 = &%1", ТекущийПараметр.Ключ));
		Запрос.УстановитьПараметр(ТекущийПараметр.Ключ, ТекущийПараметр.Значение);
		
	КонецЦикла;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяТаблицы", ИмяТаблицы);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условия", СтрСоединить(СписокУсловий, " И ")); //@Query-part
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

Функция НайтиСоздатьБанковскийСчетКонтрагента(Отбор)

	Результат = СсылкаИзТаблицыСОтбором("Справочник.БанковскиеСчетаКонтрагентов", Отбор);
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
	
		НовыйСчет = Справочники.БанковскиеСчетаКонтрагентов.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(НовыйСчет, Отбор);
		
		НовыйСчет.Записать();
		Результат = НовыйСчет.Ссылка;
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ТекстОшибкиЗаписиДокумента()

	Возврат НСтр("ru = 'Произошли ошибки при записи документа!'");

КонецФункции

Процедура ЗаписатьОшибкуИзмененияДокументаВЖурнал(Объект, ДокументСсылка, Комментарий)

	Событие = НСтр("ru = 'Данные'", ОбщегоНазначения.КодОсновногоЯзыка())
		+ "." + НСтр("ru = 'Изменение'", ОбщегоНазначения.КодОсновногоЯзыка());
	ЗаписьЖурналаРегистрации(
		Событие,
		УровеньЖурналаРегистрации.Ошибка,
		Объект.Метаданные(),
		ДокументСсылка,
		Комментарий);

КонецПроцедуры

Процедура ВывестиОшибкуЗаписи(Объект, ОписаниеОшибки, ОшибкиЗагрузки)

	НазваниеОбъекта = Строка(Объект);
	ЭтоНовыйДокумент = Объект.ЭтоНовый();
	
	ТекстСообщения  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1%2. %3'"),
		Врег(Лев(НазваниеОбъекта, 1)) + Сред(НазваниеОбъекта, 2),
		?(ЭтоНовыйДокумент, " " + НСтр("ru = 'не создан'"), " " + НСтр("ru = 'не записан'")),
		ТекстОшибкиЗаписиДокумента());
	
	ДокументСсылка = ?(ЭтоНовыйДокумент, "", Объект.Ссылка);
	
	ПодробноеОписаниеОшибки = СформироватьОписаниеОшибкиЗаписиДокумента(ОписаниеОшибки);
	
	ТекстОшибки = НСтр("ru = '%1
						|%2'");
	
	Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстОшибки,
		ПодробноеОписаниеОшибки,
		?(ЭтоНовыйДокумент, ТекстСообщения, ТекстОшибкиЗаписиДокумента()));
	
	ЗаписатьОшибкуИзмененияДокументаВЖурнал(Объект, ДокументСсылка, Комментарий);
	
	Если ПодробноеОписаниеОшибки <> "" Тогда
		ДобавитьЗамечание(ОшибкиЗагрузки, ПодробноеОписаниеОшибки);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьОбъект(ОбъектДляЗаписи, РежимЗаписи, СтрокаДокумента)
	
	ОбъектМодифицирован = ОбъектДляЗаписи.Модифицированность();
	ОбъектПроведен      = ОбъектДляЗаписи.Проведен;
	Проводить = (РежимЗаписи = РежимЗаписиДокумента.Проведение Или ОбъектПроведен И РежимЗаписи = РежимЗаписиДокумента.Запись);
	
	Если ОбъектМодифицирован
		И Не Проводить Тогда
		Попытка
			ОбъектДляЗаписи.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			
			ОписаниеОшибки = ИнформацияОбОшибке();
			ВывестиОшибкуЗаписи(ОбъектДляЗаписи, ОписаниеОшибки, СтрокаДокумента.ОшибкиЗагрузки);
			Возврат;
			
		КонецПопытки;
	КонецЕсли;
	
	Если Проводить И (ОбъектМодифицирован Или НЕ ОбъектПроведен) Тогда
		
		Попытка
			ОбъектДляЗаписи.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			
			ОписаниеОшибки = ИнформацияОбОшибке();
			ТекстОшибки = НСтр("ru = '%1
				|Произошли ошибки при проведении!'");
			
			Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстОшибки,
				ОписаниеОшибки.Описание);
			ЗаписатьОшибкуИзмененияДокументаВЖурнал(ОбъектДляЗаписи, ОбъектДляЗаписи.Ссылка, Комментарий);
			
			Если ОписаниеОшибки.Причина <> Неопределено Тогда
				ДобавитьЗамечание(СтрокаДокумента.ОшибкиЗагрузки, ОписаниеОшибки.Причина.Описание);
			КонецЕсли;
			
		КонецПопытки;
		
		Если Не ОбъектДляЗаписи.Проведен Тогда
			
			Попытка
				ОбъектДляЗаписи.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				ОписаниеОшибки = ИнформацияОбОшибке();
				ВывестиОшибкуЗаписи(ОбъектДляЗаписи, ОписаниеОшибки, СтрокаДокумента.ОшибкиЗагрузки);
			КонецПопытки;
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСвойство(Объект, ИмяСвойства, ЗначениеСвойства, ОбязательнаяЗаменаСтарогоЗначения = Ложь)
	
	Если ЗначениеСвойства <> Неопределено И Объект[ИмяСвойства] <> ЗначениеСвойства Тогда
		Если (Не ЗначениеЗаполнено(Объект[ИмяСвойства]) Или ОбязательнаяЗаменаСтарогоЗначения)
			Или ТипЗнч(Объект[ИмяСвойства]) = Тип("Булево")
			Или ТипЗнч(Объект[ИмяСвойства]) = Тип("Дата") Тогда
			
			Объект[ИмяСвойства] = ЗначениеСвойства;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСсылкиНаДокументы(ДокументыКЗагрузке, ТаблицаДокументов, БанковскийСчет)
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки,
	|	ТаблицаДокументов.ДатаДок,
	|	ТаблицаДокументов.Поступило,
	|	ТаблицаДокументов.Списано,
	|	ТаблицаДокументов.Номер,
	|	ТаблицаДокументов.НомерСокр,
	|	ТаблицаДокументов.Исходящий,
	|	ТаблицаДокументов.ТипПлатежногоДокумента,
	|	ТаблицаДокументов.ПолучательСчет,
	|	ТаблицаДокументов.ПлательщикСчет,
	|	ТаблицаДокументов.ПолучательИНН,
	|	ТаблицаДокументов.ПлательщикИНН,
	|	ТаблицаДокументов.ПолучательКПП,
	|	ТаблицаДокументов.ПлательщикКПП,
	|	ТаблицаДокументов.ПроверятьИНН,
	|	ТаблицаДокументов.ПроверятьКПП,
	|	ВЫРАЗИТЬ(ТаблицаДокументов.Код КАК Строка(25)) КАК Код,
	|	ВЫРАЗИТЬ(ТаблицаДокументов.ДанныеВыписки КАК Строка(1024)) КАК ДанныеВыписки,
	|	ВЫРАЗИТЬ(ТаблицаДокументов.Операция КАК Строка(128)) КАК Операция,
	|	ТаблицаДокументов.ЭтоЗагрузкаBankFeeds 
	|
	|ПОМЕСТИТЬ ТаблицаДокументов
	|
	|ИЗ
	|	&ТаблицаДокументов КАК ТаблицаДокументов
	|";
	
	Запрос.УстановитьПараметр("ТаблицаДокументов", ТаблицаДокументов);
	Запрос.Выполнить();
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Проведен КАК Проведен
	|
	|ИЗ
	|	ТаблицаДокументов
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|	ПО
	|		ДанныеДокумента.БанковскийСчет = &БанковскийСчет
	|		
	|		И (НАЧАЛОПЕРИОДА(ДанныеДокумента.ДатаВходящегоДокумента, ДЕНЬ) = ТаблицаДокументов.ДатаДок
	|			И НЕ ДанныеДокумента.ПроведеноБанком
	|			ИЛИ НАЧАЛОПЕРИОДА(ДанныеДокумента.ДатаВходящегоДокумента, ДЕНЬ) = ТаблицаДокументов.ДатаДок
	|				И ДанныеДокумента.ДатаПроведенияБанком = ТаблицаДокументов.Списано
	|				И ДанныеДокумента.ПроведеноБанком)
	|		
	|		И (ДанныеДокумента.НомерВходящегоДокумента = ТаблицаДокументов.Номер
	|			ИЛИ ДанныеДокумента.НомерВходящегоДокумента = ТаблицаДокументов.НомерСокр)
	|		И ДанныеДокумента.ТипПлатежногоДокумента = ТаблицаДокументов.ТипПлатежногоДокумента
	|	
	|		И (ДанныеДокумента.БанковскийСчетПолучатель.НомерСчета = ТаблицаДокументов.ПолучательСчет
	|			ИЛИ ДанныеДокумента.БанковскийСчетКонтрагента.НомерСчета = ТаблицаДокументов.ПолучательСчет
	|			ИЛИ (ЕСТЬNULL(ДанныеДокумента.БанковскийСчетПолучатель.НомерСчета, """") = """"
	|				И ЕСТЬNULL(ДанныеДокумента.БанковскийСчетКонтрагента.НомерСчета, """") = """")
	|			ИЛИ ТаблицаДокументов.ПолучательСчет = """"
	|			)
	//++ Локализация
	|		И (НЕ ТаблицаДокументов.ПроверятьИНН
	|			ИЛИ (ЕСТЬNULL(ДанныеДокумента.БанковскийСчетПолучатель.Владелец.ИНН, """") = """"
	|				И ЕСТЬNULL(ДанныеДокумента.БанковскийСчетКонтрагента.Владелец.ИНН, """") = """")
	|			ИЛИ ДанныеДокумента.БанковскийСчетПолучатель.Владелец.ИНН = ТаблицаДокументов.ПолучательИНН
	|			ИЛИ ДанныеДокумента.БанковскийСчетКонтрагента.Владелец.ИНН = ТаблицаДокументов.ПолучательИНН
	|			ИЛИ ДанныеДокумента.БанковскийСчетКонтрагента.ИННКорреспондента = ТаблицаДокументов.ПолучательИНН
	|			)
	|		И (
	|			(НЕ ТаблицаДокументов.ПроверятьКПП
	|			ИЛИ (ЕСТЬNULL(ДанныеДокумента.БанковскийСчетПолучатель.Владелец.КПП, """") = """"
	|				И ЕСТЬNULL(ДанныеДокумента.БанковскийСчетКонтрагента.Владелец.КПП, """") = """")
	|			ИЛИ ДанныеДокумента.БанковскийСчетПолучатель.Владелец.КПП = ТаблицаДокументов.ПолучательКПП
	|			ИЛИ ДанныеДокумента.БанковскийСчетКонтрагента.Владелец.КПП = ТаблицаДокументов.ПолучательКПП
	|			ИЛИ ДанныеДокумента.БанковскийСчетКонтрагента.КППКорреспондента = ТаблицаДокументов.ПолучательКПП
	|			)
	|			ИЛИ 
	|			(ВЫРАЗИТЬ(ДанныеДокумента.ДанныеВыписки КАК Строка(1024)) = ТаблицаДокументов.ДанныеВыписки
	|				И ВЫРАЗИТЬ(ДанныеДокумента.ДанныеВыписки КАК Строка(1024)) <> """"))
	//-- Локализация
	|		
	|ГДЕ
	|	ТаблицаДокументов.Исходящий
	|	И НЕ ДанныеДокумента.Ссылка ЕСТЬ NULL
	|	И НЕ ДанныеДокумента.ПометкаУдаления
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Проведен КАК Проведен
	|
	|ИЗ
	|	ТаблицаДокументов
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.ПоступлениеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|	ПО
	|		ДанныеДокумента.БанковскийСчет = &БанковскийСчет
	//++ Локализация
	|		И НЕ ДанныеДокумента.ДанныеВыписки ПОДОБНО (&ТекстСекцияДокументОперацияПоЯндексКассе)
	//-- Локализация
	|		
	|		И (НАЧАЛОПЕРИОДА(ДанныеДокумента.ДатаВходящегоДокумента, ДЕНЬ) = ТаблицаДокументов.ДатаДок
	|			И НЕ ДанныеДокумента.ПроведеноБанком
	|			ИЛИ НАЧАЛОПЕРИОДА(ДанныеДокумента.ДатаВходящегоДокумента, ДЕНЬ) = ТаблицаДокументов.ДатаДок
	|				И ДанныеДокумента.ДатаПроведенияБанком = ТаблицаДокументов.Поступило
	|				И ДанныеДокумента.ПроведеноБанком)
	|		
	|		И (ДанныеДокумента.НомерВходящегоДокумента = ТаблицаДокументов.Номер
	|			ИЛИ ДанныеДокумента.НомерВходящегоДокумента = ТаблицаДокументов.НомерСокр)
	|		И ДанныеДокумента.ТипПлатежногоДокумента = ТаблицаДокументов.ТипПлатежногоДокумента
	|		
	|		И (ДанныеДокумента.БанковскийСчетОтправитель.НомерСчета = ТаблицаДокументов.ПлательщикСчет
	|			ИЛИ ДанныеДокумента.БанковскийСчетКонтрагента.НомерСчета = ТаблицаДокументов.ПлательщикСчет
	|			ИЛИ (ЕСТЬNULL(ДанныеДокумента.БанковскийСчетОтправитель.НомерСчета, """") = """"
	|				И ЕСТЬNULL(ДанныеДокумента.БанковскийСчетКонтрагента.НомерСчета, """") = """")
	|			ИЛИ ТаблицаДокументов.ПлательщикСчет = """"
	|			)
	//++ Локализация
	|		И (НЕ ТаблицаДокументов.ПроверятьИНН
	|			ИЛИ (ЕСТЬNULL(ДанныеДокумента.БанковскийСчетОтправитель.Владелец.ИНН, """") = """"
	|				И ЕСТЬNULL(ДанныеДокумента.БанковскийСчетКонтрагента.Владелец.ИНН, """") = """")
	|			ИЛИ ДанныеДокумента.БанковскийСчетОтправитель.Владелец.ИНН = ТаблицаДокументов.ПлательщикИНН
	|			ИЛИ ДанныеДокумента.БанковскийСчетКонтрагента.Владелец.ИНН = ТаблицаДокументов.ПлательщикИНН
	|			ИЛИ ДанныеДокумента.БанковскийСчетКонтрагента.ИННКорреспондента = ТаблицаДокументов.ПолучательИНН
	|			)
	|		
	|		И (НЕ ТаблицаДокументов.ПроверятьИНН
	|			ИЛИ (ЕСТЬNULL(ДанныеДокумента.Контрагент.ИНН, """") = """"
	|				И ЕСТЬNULL(ДанныеДокумента.ПодотчетноеЛицо.ИНН, """") = """")
	|			ИЛИ ДанныеДокумента.Контрагент.ИНН = ТаблицаДокументов.ПлательщикИНН
	|			ИЛИ ДанныеДокумента.ПодотчетноеЛицо.ИНН = ТаблицаДокументов.ПлательщикИНН)
	|		
	|		И ((НЕ ТаблицаДокументов.ПроверятьКПП
	|			ИЛИ ЕСТЬNULL(ДанныеДокумента.Контрагент.КПП, """") = """"
	|			ИЛИ ДанныеДокумента.Контрагент.КПП = ТаблицаДокументов.ПлательщикКПП)
	|			
	|			ИЛИ (ВЫРАЗИТЬ(ДанныеДокумента.ДанныеВыписки КАК Строка(1024)) = ТаблицаДокументов.ДанныеВыписки
	|				И ВЫРАЗИТЬ(ДанныеДокумента.ДанныеВыписки КАК Строка(1024)) <> """"))
	//-- Локализация
	|		И (
	//++ Локализация
	|			(НЕ ТаблицаДокументов.ПроверятьКПП
	|			ИЛИ (ЕСТЬNULL(ДанныеДокумента.БанковскийСчетОтправитель.Владелец.КПП, """") = """"
	|				И ЕСТЬNULL(ДанныеДокумента.БанковскийСчетКонтрагента.Владелец.КПП, """") = """")
	|			ИЛИ ДанныеДокумента.БанковскийСчетОтправитель.Владелец.КПП = ТаблицаДокументов.ПлательщикКПП
	|			ИЛИ ДанныеДокумента.БанковскийСчетКонтрагента.Владелец.КПП = ТаблицаДокументов.ПлательщикКПП
	|			ИЛИ ДанныеДокумента.БанковскийСчетКонтрагента.КППКорреспондента = ТаблицаДокументов.ПолучательКПП
	|			)
	|			ИЛИ 
	//-- Локализация
	|			(ВЫРАЗИТЬ(ДанныеДокумента.ДанныеВыписки КАК Строка(1024)) = ТаблицаДокументов.ДанныеВыписки
	|				И ВЫРАЗИТЬ(ДанныеДокумента.ДанныеВыписки КАК Строка(1024)) <> """")
	|			ИЛИ ТаблицаДокументов.ЭтоЗагрузкаBankFeeds)
	|		
	|ГДЕ
	|	НЕ ТаблицаДокументов.Исходящий
	|	И НЕ ДанныеДокумента.Ссылка ЕСТЬ NULL
	|	И НЕ ДанныеДокумента.ПометкаУдаления
	//++ Локализация
	|	И НЕ ТаблицаДокументов.Операция ПОДОБНО (&ТекстОперацияПоЯндексКассе)
	//-- Локализация
	|	
	//++ Локализация
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ // Проведение банком платежа ЯндексКассы
	|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Проведен КАК Проведен
	|
	|ИЗ
	|	ТаблицаДокументов
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.ПоступлениеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|	ПО
	|		ДанныеДокумента.БанковскийСчет = &БанковскийСчет
	|		И ДанныеДокумента.ИдентификаторПлатежа = ТаблицаДокументов.Код
	|		И ДанныеДокумента.ДанныеВыписки ПОДОБНО (&ТекстСекцияДокументОперацияПоЯндексКассе)
	|		
	|ГДЕ
	|	НЕ ТаблицаДокументов.Исходящий
	|	И НЕ ДанныеДокумента.Ссылка ЕСТЬ NULL
	|	И НЕ ДанныеДокумента.ПометкаУдаления
	|	И ТаблицаДокументов.Код <> """"
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ // Платеж ЯндексКассы
	|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Проведен КАК Проведен
	|
	|ИЗ
	|	ТаблицаДокументов
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.ПоступлениеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|	ПО
	|		ДанныеДокумента.БанковскийСчет = &БанковскийСчет
	|		И ДанныеДокумента.ИдентификаторПлатежа = ТаблицаДокументов.Код
	|		
	|ГДЕ
	|	НЕ ТаблицаДокументов.Исходящий
	|	И НЕ ДанныеДокумента.Ссылка ЕСТЬ NULL
	|	И НЕ ДанныеДокумента.ПометкаУдаления
	|	И ТаблицаДокументов.Код <> """"
	|	И ТаблицаДокументов.Операция ПОДОБНО (&ТекстОперацияПоЯндексКассе)
	//-- Локализация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Проведен УБЫВ";
	
	Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
	
	//++ Локализация
	Запрос.УстановитьПараметр("ТекстОперацияПоЯндексКассе", "Операция по Яндекс.Кассе%");
	Запрос.УстановитьПараметр("ТекстСекцияДокументОперацияПоЯндексКассе", "СЕКЦИЯДОКУМЕНТ=Операция по Яндекс.Кассе%");
	//-- Локализация
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаДокумента = ДокументыКЗагрузке.Найти(Выборка.НомерСтроки, "НомерСтроки");
		Если СтрокаДокумента <> Неопределено Тогда
			
			// Если документ найден, создавать новый не будем. Если найдено несколько документов,
			// то дубли документа пропускаем, обновляем только первый найденный документ.
			Если ЗначениеЗаполнено(СтрокаДокумента.Документ) Тогда
				Продолжить;
			КонецЕсли;
			СтрокаДокумента.Документ = Выборка.Ссылка;
			СтрокаДокумента.НайденДокументВБазе = Истина;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция РазделенныйСписокУИП(ТаблицаДокументов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаУИП.Код КАК Код,
		|	ТаблицаУИП.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ СписокУИП
		|ИЗ
		|	&ТаблицаУИП КАК ТаблицаУИП
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СписокУИП.НомерСтроки КАК НомерСтроки,
		|	СписокУИП.Код КАК Код
		|ПОМЕСТИТЬ СписокУИПКонвертацииВалюты
		|ИЗ
		|	СписокУИП КАК СписокУИП
		|ГДЕ
		|	СписокУИП.Код ПОДОБНО &ПрефиксКонвертации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СписокУИП.Код КАК Код,
		|	СписокУИП.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	СписокУИП КАК СписокУИП
		|ГДЕ
		|	НЕ СписокУИП.НомерСтроки В
		|				(ВЫБРАТЬ
		|					СписокУИПКонвертацииВалюты.НомерСтроки КАК НомерСтроки
		|				ИЗ
		|					СписокУИПКонвертацииВалюты КАК СписокУИПКонвертацииВалюты)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СписокУИПКонвертацииВалюты.НомерСтроки КАК НомерСтроки,
		|	СписокУИПКонвертацииВалюты.Код КАК Код
		|ИЗ
		|	СписокУИПКонвертацииВалюты КАК СписокУИПКонвертацииВалюты";
	
	Запрос.УстановитьПараметр("ТаблицаУИП", ТаблицаДокументов);
	Запрос.УстановитьПараметр("ПрефиксКонвертации", НСтр("ru = 'ПП%'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	МассивЗапросов = Запрос.ВыполнитьПакет();
	УИПРасчетовСКлиентами = МассивЗапросов[МассивЗапросов.ВГраница() - 1].Выгрузить();
	УИПКонвертации = МассивЗапросов[МассивЗапросов.ВГраница()].Выгрузить();
	
	СпискиУИП = Новый Структура;
	СпискиУИП.Вставить("УИПРасчетовСКлиентами", УИПРасчетовСКлиентами);
	СпискиУИП.Вставить("УИПКонвертации", УИПКонвертации);
	
	Возврат СпискиУИП;
	
КонецФункции

Процедура ЗаполнитьОснованиеПлатежейПоУИП(ДокументыКЗагрузке, ТаблицаДокументов, БанковскийСчет)
	
	СпискиУИП = РазделенныйСписокУИП(ТаблицаДокументов);
	
	Если СпискиУИП.УИПРасчетовСКлиентами.Количество() <> 0 Тогда
	
		ДанныеВыбора = Новый СписокЗначений;
	
		СтруктураОтбора = ВзаиморасчетыКлиентСервер.СтруктураОтбораДанныхВыбора();
		СтруктураОтбора.Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет, "Владелец");
		СтруктураОтбора.Текст       = СпискиУИП.УИПРасчетовСКлиентами.ВыгрузитьКолонку("Код");
		СтруктураОтбора.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом;
		СтруктураОтбора.УчитыватьФилиалы = Истина;
		
		ВзаиморасчетыСервер.ЗаполнитьДанныеВыбораУИП(
			ДанныеВыбора,
			СтруктураОтбора,
			Ложь);
	
		Для Каждого ЭлементДанных Из ДанныеВыбора Цикл
			
			Выборка = ЭлементДанных.Значение.Значение;
			
			Отбор = Новый Структура("Код", Выборка.ИдентификаторПлатежа);
			СтрокиТаблицы = СпискиУИП.УИПРасчетовСКлиентами.НайтиСтроки(Отбор);
			Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
				
				СтрокаДокумента = ДокументыКЗагрузке.Найти(СтрокаТаблицы["НомерСтроки"], "НомерСтроки");
				Если СтрокаДокумента <> Неопределено Тогда
					
					СтрокаДокумента.НайденоОснованиеПлатежа = Истина;
					СтрокаДокумента.НайденКонтрагент = Истина;
					СтрокаДокумента.СоздаватьКонтрагента = Ложь;
					
					ЗаполнитьЗначенияСвойств(СтрокаДокумента, Выборка, "Контрагент, Партнер, ОснованиеПлатежа, ОбъектРасчетов");
					
					Если ТипЗнч(СтрокаДокумента.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
						СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента;
					ИначеЕсли ТипЗнч(СтрокаДокумента.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
						СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтрокаДокумента.ОбъектРасчетов) Тогда
						СтрокаДокумента.СтатьяДвиженияДенежныхСредств =
							ДенежныеСредстваСервер.СтатьяДвиженияДенежныхСредствОбъектаРасчетов(СтрокаДокумента.ОбъектРасчетов, СтрокаДокумента.ВидОперации);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	Если СпискиУИП.УИПКонвертации.Количество() <> 0 Тогда
	
		ДанныеДокументов = ДенежныеСредстваСервер.ОснованияОперацииКонвертацииПоУИП(
			СпискиУИП.УИПКонвертации.ВыгрузитьКолонку("Код"), ТекущаяДатаСеанса());
	
		Для Каждого ТекущиеДанные Из ДанныеДокументов Цикл
			
			ОтборИдентификатора = Новый Структура;
			ОтборИдентификатора.Вставить("Код", ТекущиеДанные.ИдентификаторПлатежа);
			СтрокиДокументов = ДокументыКЗагрузке.НайтиСтроки(ОтборИдентификатора);
			
			Для Каждого СтрокаДокумента Из СтрокиДокументов Цикл
				
				СтрокаДокумента.НайденоОснованиеПлатежа = Истина;
				СтрокаДокумента.НайденКонтрагент = Истина;
				СтрокаДокумента.СоздаватьКонтрагента = Ложь;
			
				ЗаполнитьЗначенияСвойств(
					СтрокаДокумента,
					ТекущиеДанные, 
					"Контрагент, Партнер, ОснованиеПлатежа, Подразделение, СтатьяДвиженияДенежныхСредств, ВалютаКонвертации, СуммаКонвертации");
				СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.КонвертацияВалюты;
			
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция РеквизитыХозОперацийПоступления()
	
	РеквизитыХозОпераций = Новый Соответствие;
	
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ПоступлениеОплатыПоПлатежнойКарте,
		Новый Структура("ДоговорЭквайринга, Подразделение, СтатьяРасходов, АналитикаРасходов, СтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств,
		Новый Структура("СтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствСДругогоСчета,
		Новый Структура(""));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ИнкассацияДенежныхСредствВБанк,
		Новый Структура("Касса"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоКредитам,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоДепозитам,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоЗаймамВыданным,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.КонвертацияВалюты,
		Новый Структура("СтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ПрочееПоступлениеДенежныхСредств,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств, РасшифровкаПлатежаСтатьяДоходов, РасшифровкаПлатежаАналитикаДоходов, РасшифровкаПлатежаАналитикаАктивовПассивов, РасшифровкаПлатежаПодразделение"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПодотчетника,
		Новый Структура("СтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ВозвратНеперечисленныхДС,
		Новый Структура(""));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ВозвратНалогов,
		Новый Структура("ТипНалога, НастройкаСчетовУчета, РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств"));
	
	Возврат РеквизитыХозОпераций;
	
КонецФункции

Функция РеквизитыХозОперацийСписания()
	
	РеквизитыХозОпераций = Новый Соответствие;
	
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ОплатаПоставщику,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику,
		Новый Структура("ПодотчетноеЛицо, Подразделение, РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет,
		Новый Структура("ТипНалога, НастройкаСчетовУчета, РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ПеречислениеТаможне,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств,
		Новый Структура("СтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета,
		Новый Структура("СтатьяДвиженияДенежныхСредств, Подразделение"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту,
		Новый Структура("СтатьяДвиженияДенежныхСредств, Подразделение"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет,
		Новый Структура(""));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ИнкассацияДенежныхСредствИзБанка,
		Новый Структура("КассаПолучатель"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ОплатаПоКредитам,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ВыдачаЗаймов,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.КонвертацияВалюты,
		Новый Структура("СтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств, РасшифровкаПлатежаСтатьяРасходов, РасшифровкаПлатежаАналитикаРасходов, РасшифровкаПлатежаАналитикаАктивовПассивов, РасшифровкаПлатежаПодразделение"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ВозвратОплатыНаПлатежнуюКарту,
		Новый Структура("ДоговорЭквайринга, Подразделение, СтатьяРасходов, АналитикаРасходов, СтатьяДвиженияДенежныхСредств"));
	
	Возврат РеквизитыХозОпераций;
	
КонецФункции

Функция ПоискКорректен(СтрокаДокумента, Выборка, НаборРеквизитов, ТекстУсловия)
	
	Запрос = Новый Запрос;
	
	Если СтрокаДокумента.Исходящий Тогда
		
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ
		|	Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ТабЧасть
		|	ПО
		|		ТабЧасть.Ссылка = ДанныеДокумента.Ссылка
		|ГДЕ
		|	&Условие
		|	
		|";
		
	Иначе
		
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ
		|	Документ.ПоступлениеБезналичныхДенежныхСредств КАК ДанныеДокумента
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		Документ.ПоступлениеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ТабЧасть
		|	ПО
		|		ТабЧасть.Ссылка = ДанныеДокумента.Ссылка
		|ГДЕ
		|	&Условие
		|	
		|";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", ТекстУсловия);
	
	Запрос.УстановитьПараметр("БанковскийСчет", СтрокаДокумента.БанковскийСчет);
	Запрос.УстановитьПараметр("СчетКонтрагента", СтрокаДокумента.СчетКонтрагента);
	
	Если Запрос.НайтиПараметры().Найти("Контрагент") <> Неопределено Тогда
		Запрос.УстановитьПараметр("Контрагент", СтрокаДокумента.Контрагент);
	КонецЕсли;
	Если Запрос.НайтиПараметры().Найти("ФорматированноеНазначениеПлатежа") <> Неопределено Тогда
		Запрос.УстановитьПараметр("ФорматированноеНазначениеПлатежа", СтрокаДокумента.ФорматированноеНазначениеПлатежа);
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|	И ДанныеДокумента.Проведен
	|	И ДанныеДокумента.Дата > &ПериодПроверки";
	Запрос.УстановитьПараметр("ПериодПроверки", ТекущаяДатаСеанса() - 60 * 60 * 24 * 15); // Проверяются документы за последние 15 дней
	
	Если ЗначениеЗаполнено(СтрокаДокумента.ВидОперации) Тогда
		Запрос.Текст = Запрос.Текст + " И ДанныеДокумента.ХозяйственнаяОперация = &ХозяйственнаяОперация И (ИСТИНА";
		Запрос.УстановитьПараметр("ХозяйственнаяОперация", СтрокаДокумента.ВидОперации);
	Иначе
		Запрос.Текст = Запрос.Текст + " И (ДанныеДокумента.ХозяйственнаяОперация <> &ХозяйственнаяОперация";
		Запрос.УстановитьПараметр("ХозяйственнаяОперация", Выборка.ХозяйственнаяОперация);
	КонецЕсли;
	
	СтрокаУсловия = "";
	Если НаборРеквизитов <> Неопределено Тогда
		Для каждого Реквизит Из НаборРеквизитов Цикл
			
			Если Не ЗначениеЗаполнено(Реквизит.Значение) Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрНайти(Реквизит.Ключ, "РасшифровкаПлатежа") Тогда
				ИмяРеквизита = Сред(Реквизит.Ключ, СтрДлина("РасшифровкаПлатежа") + 1);
				СтрокаУсловия = " ИЛИ ТабЧасть.ИмяРеквизита <> &ИмяРеквизита";
			Иначе
				ИмяРеквизита = Реквизит.Ключ;
				СтрокаУсловия = " ИЛИ ДанныеДокумента.ИмяРеквизита <> &ИмяРеквизита";
			КонецЕсли;
			
			СтрокаУсловия = СтрЗаменить(СтрокаУсловия, "ИмяРеквизита", ИмяРеквизита);
			Запрос.Текст = Запрос.Текст + СтрокаУсловия;
			Запрос.УстановитьПараметр(ИмяРеквизита, Реквизит.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + ")";
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Пустой();
	
КонецФункции

Процедура ЗаполнитьОбразцы(СтрокиКЗагрузке, БанковскийСчет)
	
	РеквизитыХозОперацийПоступления = РеквизитыХозОперацийПоступления();
	РеквизитыХозОперацийСписания = РеквизитыХозОперацийСписания();
	
	Запрос = Новый Запрос;
	
	ТекстЗапросаВходящие = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеДокумента.Ссылка                          КАК Ссылка,
	|	ДанныеДокумента.ХозяйственнаяОперация           КАК ХозяйственнаяОперация,
	|	ТабЧасть.СтатьяДвиженияДенежныхСредств          КАК РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств,
	|	ДанныеДокумента.СтатьяДвиженияДенежныхСредств   КАК СтатьяДвиженияДенежныхСредств,
	|	ДанныеДокумента.ПодотчетноеЛицо                 КАК ПодотчетноеЛицо,
	|	ДанныеДокумента.КассаОтправитель                КАК КассаОтправитель,
	|	ТабЧасть.Подразделение                          КАК РасшифровкаПлатежаПодразделение,
	|	ДанныеДокумента.Подразделение                   КАК Подразделение,
	|	ТабЧасть.СтатьяДоходов                          КАК РасшифровкаПлатежаСтатьяДоходов,
	|	ТабЧасть.АналитикаДоходов                       КАК РасшифровкаПлатежаАналитикаДоходов,
	|	ТабЧасть.АналитикаАктивовПассивов               КАК РасшифровкаПлатежаАналитикаАктивовПассивов,
	|	ДанныеДокумента.ДоговорЭквайринга               КАК ДоговорЭквайринга,
	|	ДанныеДокумента.СтатьяРасходов                  КАК СтатьяРасходов,
	|	ДанныеДокумента.АналитикаРасходов               КАК АналитикаРасходов,
	|	ДанныеДокумента.ТипНалога                       КАК ТипНалога,
	|	ДанныеДокумента.НастройкаСчетовУчета            КАК НастройкаСчетовУчета
	|	
	|ИЗ
	|	Документ.ПоступлениеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.ПоступлениеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ТабЧасть
	|	ПО
	|		ТабЧасть.Ссылка = ДанныеДокумента.Ссылка
	|	
	|ГДЕ
	|	&Условие
	|	
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокумента.Дата УБЫВ
	|";
	
	ТекстЗапросаИсходящие = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеДокумента.Ссылка                          КАК Ссылка,
	|	ДанныеДокумента.ХозяйственнаяОперация           КАК ХозяйственнаяОперация,
	|	ТабЧасть.СтатьяДвиженияДенежныхСредств          КАК РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств,
	|	ДанныеДокумента.СтатьяДвиженияДенежныхСредств   КАК СтатьяДвиженияДенежныхСредств,
	|	ДанныеДокумента.ПодотчетноеЛицо                 КАК ПодотчетноеЛицо,
	|	ДанныеДокумента.КассаПолучатель                 КАК КассаПолучатель,
	|	ТабЧасть.Подразделение                          КАК РасшифровкаПлатежаПодразделение,
	|	ДанныеДокумента.Подразделение                   КАК Подразделение,
	|	ТабЧасть.СтатьяРасходов                         КАК РасшифровкаПлатежаСтатьяРасходов,
	|	ТабЧасть.АналитикаРасходов                      КАК РасшифровкаПлатежаАналитикаРасходов,
	|	ТабЧасть.АналитикаАктивовПассивов               КАК РасшифровкаПлатежаАналитикаАктивовПассивов,
	|	ДанныеДокумента.ДоговорЭквайринга               КАК ДоговорЭквайринга,
	|	ДанныеДокумента.СтатьяРасходов                  КАК СтатьяРасходов,
	|	ДанныеДокумента.АналитикаРасходов               КАК АналитикаРасходов,
	|	ДанныеДокумента.ТипНалога                       КАК ТипНалога,
	|	ДанныеДокумента.НастройкаСчетовУчета            КАК НастройкаСчетовУчета
	|	
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ТабЧасть
	|	ПО
	|		ТабЧасть.Ссылка = ДанныеДокумента.Ссылка
	|	
	|ГДЕ
	|	&Условие
	|	
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокумента.Дата УБЫВ
	|";
	
	Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
	
	// Шаг 1. Поиск по счету отправителя, получателя, назначению платежа
	УсловиеИсходящие = "
	|	ДанныеДокумента.БанковскийСчет = &БанковскийСчет
	|	И (ДанныеДокумента.БанковскийСчетКонтрагента = &СчетКонтрагента
	|		ИЛИ ДанныеДокумента.БанковскийСчетПолучатель = &СчетКонтрагента)
	|	И ДанныеДокумента.ФорматированноеНазначениеПлатежа = &ФорматированноеНазначениеПлатежа
	|	И ДанныеДокумента.Проведен
	|";

	УсловиеВходящие = "
	|	ДанныеДокумента.БанковскийСчет = &БанковскийСчет
	|	И (ДанныеДокумента.БанковскийСчетКонтрагента = &СчетКонтрагента
	|		ИЛИ ДанныеДокумента.БанковскийСчетОтправитель = &СчетКонтрагента
	|		ИЛИ (ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыПоПлатежнойКарте)
	|			И ДанныеДокумента.Контрагент = &Контрагент))
	|	И ДанныеДокумента.ФорматированноеНазначениеПлатежа = &ФорматированноеНазначениеПлатежа
	|	И ДанныеДокумента.Проведен
	|";
	
	СтрокиПоискаШаг2 = Новый Массив;
	Для каждого СтрокаДокумента Из СтрокиКЗагрузке Цикл
		
		Если СтрокаДокумента.Исходящий Тогда
			Запрос.Текст = ТекстЗапросаИсходящие;
			ТекстУсловия = УсловиеИсходящие;
			Реквизиты = РеквизитыХозОперацийСписания;
		Иначе
			Запрос.Текст = ТекстЗапросаВходящие;
			ТекстУсловия = УсловиеВходящие;
			Реквизиты = РеквизитыХозОперацийПоступления;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДокумента.ВидОперации) Тогда
			ТекстУсловия = ТекстУсловия + "
			|	И ДанныеДокумента.ХозяйственнаяОперация = &ХозяйственнаяОперация";
			Запрос.УстановитьПараметр("ХозяйственнаяОперация", СтрокаДокумента.ВидОперации);
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", ТекстУсловия);
		
		Если Запрос.НайтиПараметры().Найти("Контрагент") <> Неопределено Тогда
			Запрос.УстановитьПараметр("Контрагент", СтрокаДокумента.Контрагент);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("СчетКонтрагента", СтрокаДокумента.СчетКонтрагента);
		Запрос.УстановитьПараметр("ФорматированноеНазначениеПлатежа", СтрокаДокумента.ФорматированноеНазначениеПлатежа);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			НаборРеквизитов = Реквизиты.Получить(Выборка.ХозяйственнаяОперация);
			Если НаборРеквизитов <> Неопределено Тогда
				
				ЗаполнитьЗначенияСвойств(НаборРеквизитов, Выборка);
				
				Если ПоискКорректен(СтрокаДокумента, Выборка, НаборРеквизитов, ТекстУсловия) Тогда
					
					СтрокаДокумента.НайденОбразец = Истина;
					СтрокаДокумента.Образец = Выборка.Ссылка;
					СтрокаДокумента.ВидОперации = Выборка.ХозяйственнаяОперация;
					
					Для каждого Реквизит Из НаборРеквизитов Цикл
						Если Не ЗначениеЗаполнено(Реквизит.Значение) Тогда
							Продолжить;
						КонецЕсли;
						Если СтрНайти(Реквизит.Ключ, "РасшифровкаПлатежа") Тогда
							ИмяРеквизита = Сред(Реквизит.Ключ, СтрДлина("РасшифровкаПлатежа") + 1);
						Иначе
							ИмяРеквизита = Реквизит.Ключ;
						КонецЕсли;
						СтрокаДокумента[ИмяРеквизита] = Реквизит.Значение;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		Иначе
			СтрокиПоискаШаг2.Добавить(СтрокаДокумента);
		КонецЕсли;
	КонецЦикла;
	
	Если Не СтрокиПоискаШаг2.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	// Шаг 2. Поиск по счету отправителя, получателя, без учета назначения платежа
	УсловиеИсходящие = "
	|	ДанныеДокумента.БанковскийСчет = &БанковскийСчет
	|	И (ДанныеДокумента.БанковскийСчетКонтрагента = &СчетКонтрагента
	|		ИЛИ ДанныеДокумента.БанковскийСчетПолучатель = &СчетКонтрагента)
	|	И ДанныеДокумента.Проведен
	|";

	УсловиеВходящие = "
	|	ДанныеДокумента.БанковскийСчет = &БанковскийСчет
	|	И (ДанныеДокумента.БанковскийСчетКонтрагента = &СчетКонтрагента
	|		ИЛИ ДанныеДокумента.БанковскийСчетОтправитель = &СчетКонтрагента
	|		ИЛИ (ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыПоПлатежнойКарте)
	|			И ДанныеДокумента.Контрагент = &Контрагент))
	|	И ДанныеДокумента.Проведен
	|";
	
	СтрокиПоискаШаг3 = Новый Массив;
	Для каждого СтрокаДокумента Из СтрокиПоискаШаг2 Цикл
		
		Если СтрокаДокумента.Исходящий Тогда
			Запрос.Текст = ТекстЗапросаИсходящие;
			ТекстУсловия = УсловиеИсходящие;
			Реквизиты = РеквизитыХозОперацийСписания;
		Иначе
			Запрос.Текст = ТекстЗапросаВходящие;
			ТекстУсловия = УсловиеВходящие;
			Реквизиты = РеквизитыХозОперацийПоступления;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДокумента.ВидОперации) Тогда
			ТекстУсловия = ТекстУсловия + "
			|	И ДанныеДокумента.ХозяйственнаяОперация = &ХозяйственнаяОперация";
			Запрос.УстановитьПараметр("ХозяйственнаяОперация", СтрокаДокумента.ВидОперации);
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", ТекстУсловия);
		
		Запрос.УстановитьПараметр("СчетКонтрагента", СтрокаДокумента.СчетКонтрагента);
		Если Запрос.НайтиПараметры().Найти("Контрагент") <> Неопределено Тогда
			Запрос.УстановитьПараметр("Контрагент", СтрокаДокумента.Контрагент);
		КонецЕсли;
	
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			НаборРеквизитов = Реквизиты.Получить(Выборка.ХозяйственнаяОперация);
			Если НаборРеквизитов <> Неопределено Тогда
				
				ЗаполнитьЗначенияСвойств(НаборРеквизитов, Выборка);
				
				Если ПоискКорректен(СтрокаДокумента, Выборка, НаборРеквизитов, ТекстУсловия) Тогда
					
					СтрокаДокумента.НайденОбразец = Истина;
					СтрокаДокумента.Образец = Выборка.Ссылка;
					СтрокаДокумента.ВидОперации = Выборка.ХозяйственнаяОперация;
					
					Для каждого Реквизит Из НаборРеквизитов Цикл
						Если Не ЗначениеЗаполнено(Реквизит.Значение) Тогда
							Продолжить;
						КонецЕсли;
						Если СтрНайти(Реквизит.Ключ, "РасшифровкаПлатежа") Тогда
							ИмяРеквизита = Сред(Реквизит.Ключ, СтрДлина("РасшифровкаПлатежа") + 1);
						Иначе
							ИмяРеквизита = Реквизит.Ключ;
						КонецЕсли;
						СтрокаДокумента[ИмяРеквизита] = Реквизит.Значение;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		Иначе
			СтрокиПоискаШаг3.Добавить(СтрокаДокумента);
		КонецЕсли;
	КонецЦикла;
	
	Если Не СтрокиПоискаШаг3.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	// Шаг 3. Зеркальный платеж
	УсловиеИсходящие = "
	|	ДанныеДокумента.БанковскийСчет = &СчетКонтрагента
	|	И (ДанныеДокумента.БанковскийСчетКонтрагента = &БанковскийСчет
	|		ИЛИ ДанныеДокумента.БанковскийСчетПолучатель = &БанковскийСчет)
	|	И ДанныеДокумента.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию)
	|	)
	|	И ДанныеДокумента.Проведен
	|";
	
	УсловиеВходящие = "
	|	ДанныеДокумента.БанковскийСчет = &СчетКонтрагента
	|	И (ДанныеДокумента.БанковскийСчетКонтрагента = &БанковскийСчет
	|		ИЛИ ДанныеДокумента.БанковскийСчетОтправитель = &БанковскийСчет)
	|	И ДанныеДокумента.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации)
	|	)
	|	И ДанныеДокумента.Проведен
	|";
	
	Для каждого СтрокаДокумента Из СтрокиПоискаШаг3 Цикл
		
		Если СтрокаДокумента.Исходящий Тогда
			Запрос.Текст = ТекстЗапросаВходящие;
			ТекстУсловия = УсловиеВходящие;
			Реквизиты = РеквизитыХозОперацийПоступления;
		Иначе
			Запрос.Текст = ТекстЗапросаИсходящие;
			ТекстУсловия = УсловиеИсходящие;
			Реквизиты = РеквизитыХозОперацийСписания;
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", ТекстУсловия);
		Запрос.УстановитьПараметр("СчетКонтрагента", СтрокаДокумента.СчетКонтрагента);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			НаборРеквизитов = Реквизиты.Получить(Выборка.ХозяйственнаяОперация);
			Если НаборРеквизитов <> Неопределено Тогда
				
				ЗаполнитьЗначенияСвойств(НаборРеквизитов, Выборка);
				
				СтрокаДокумента.НайденОбразец = Истина;
				СтрокаДокумента.Образец = Выборка.Ссылка;
				
				Если Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику Тогда
					СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика;
				ИначеЕсли Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию Тогда
					СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации;
				ИначеЕсли Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхДокументовПодотчетнику Тогда
					СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПодотчетника;
				КонецЕсли;
				
				Если Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента Тогда
					СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту;
				ИначеЕсли Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации Тогда
					СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию;
				КонецЕсли;
				
				Для каждого Реквизит Из НаборРеквизитов Цикл
					Если Не ЗначениеЗаполнено(Реквизит.Значение) Тогда
						Продолжить;
					КонецЕсли;
					Если СтрНайти(Реквизит.Ключ, "РасшифровкаПлатежа") Тогда
						ИмяРеквизита = Сред(Реквизит.Ключ, СтрДлина("РасшифровкаПлатежа") + 1);
					Иначе
						ИмяРеквизита = Реквизит.Ключ;
					КонецЕсли;
					СтрокаДокумента[ИмяРеквизита] = Реквизит.Значение;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПартнеров(ДокументыКЗагрузке, ТаблицаДокументов, БанковскийСчет)
	
	Организация = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(БанковскийСчет).Организация;
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки,
	|	ТаблицаДокументов.Контрагент КАК Контрагент
	|
	|ПОМЕСТИТЬ ТаблицаДокументов
	|
	|ИЗ
	|	&ТаблицаДокументов КАК ТаблицаДокументов
	|ГДЕ
	|	ТаблицаДокументов.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|";
	
	Запрос.УстановитьПараметр("ТаблицаДокументов", ТаблицаДокументов);
	Запрос.Выполнить();
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки,
	|	ВЫБОР КОГДА ДанныеСправочника.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка) ТОГДА
	|		ДанныеСправочника.Партнер
	|	КОГДА НЕ АналитикаУчетаПоПартнерам.Партнер ЕСТЬ NULL ТОГДА
	|		АналитикаУчетаПоПартнерам.Партнер
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.Партнеры.НеизвестныйПартнер)
	|	КОНЕЦ КАК Партнер
	|
	|ПОМЕСТИТЬ НайденныеПартнеры
	|ИЗ
	|	ТаблицаДокументов
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.Контрагенты КАК ДанныеСправочника
	|	ПО
	|		ДанныеСправочника.Ссылка = ТаблицаДокументов.Контрагент
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	|		ПО
	|			АналитикаУчетаПоПартнерам.Контрагент = ДанныеСправочника.Ссылка
	|			И АналитикаУчетаПоПартнерам.Организация = &Организация
	|			И АналитикаУчетаПоПартнерам.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НайденныеПартнеры.НомерСтроки КАК НомерСтроки,
	|	НайденныеПартнеры.Партнер КАК Партнер,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Партнеры.ПрочиеОтношения, ЛОЖЬ) = ИСТИНА
	|				И ЕСТЬNULL(Партнеры.Клиент, ЛОЖЬ) = ЛОЖЬ
	|				И ЕСТЬNULL(Партнеры.Поставщик, ЛОЖЬ) = ЛОЖЬ
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПрочиеОтношения
	|ИЗ
	|	НайденныеПартнеры КАК НайденныеПартнеры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
	|		ПО НайденныеПартнеры.Партнер = Партнеры.Ссылка";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаДокумента = ДокументыКЗагрузке.Найти(Выборка.НомерСтроки, "НомерСтроки");
		Если СтрокаДокумента <> Неопределено Тогда
			СтрокаДокумента.Партнер = Выборка.Партнер;
			Если Не ЗначениеЗаполнено(СтрокаДокумента.ВидОперации)
				И Выборка.ПрочиеОтношения Тогда
				СтрокаДокумента.ВидОперации = 
					?(СтрокаДокумента.Исходящий,
					Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств,
					Перечисления.ХозяйственныеОперации.ПрочееПоступлениеДенежныхСредств);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает таблицу с объектами расчетов по договорам контрагентов.
// 
// Параметры:
//  БанковскийСчет - СправочникСсылка.БанковскиеСчетаОрганизаций -  Банковский счет организации.
//  Организация - СправочникСсылка.Организации -  Организация.
//  ИсходнаяТаблица - ТаблицаЗначений - таблица, содержащая список контрагентов и их счетов:
//   *Контрагент - СправочникСсылка.Организации, СправочникСсылка.Контрагенты, Строка, СправочникСсылка.ФизическиеЛица - 
//                контрагент, по которому выполняется поиск договоров контрагентов.
//   *СчетКонтрагента - СправочникСсылка.БанковскиеСчетаКонтрагентов, СправочникСсылка.БанковскиеСчетаОрганизаций, Строка - 
//                     банковский счет контрагента, по которому выполняется поиск договоров контрагентов.
// 
// Возвращаемое значение:
//  ТаблицаЗначений -  Список объектов расчетов по найденным договорам контрагентов:
//   *Контрагент - СправочникСсылка.Организации, СправочникСсылка.Контрагенты, Строка, СправочникСсылка.ФизическиеЛица - 
//                контрагент, по которому выполнялся поиск договоров контрагентов.
//   *СчетКонтрагента - СправочникСсылка.БанковскиеСчетаКонтрагентов, СправочникСсылка.БанковскиеСчетаОрганизаций, Строка - 
//                     банковский счет контрагента, по которому выполнялся поиск договоров контрагентов.
//   *Договор - СправочникСсылка.ДоговорыКонтрагентов - найденный договор контрагента.
//   *СтатьяДвиженияДенежныхСредств - СправочникСсылка.СтатьиДвиженияДенежныхСредств - статья ДДС по договору.
//   *ОбъектРасчетов - СправочникСсылка.ОбъектыРасчетов - объект расчетов по договору.
//
Функция СписокОбъектовРасчетовПоДоговорам(БанковскийСчет, Организация, ИсходнаяТаблица)

	ИсходнаяТаблица.Индексы.Добавить("Контрагент, СчетКонтрагента");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Таблица.Контрагент КАК Контрагент,
		|	Таблица.СчетКонтрагента КАК СчетКонтрагента
		|ПОМЕСТИТЬ КонтрагентыИСчета
		|ИЗ
		|	&Таблица КАК Таблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КонтрагентыИСчета.Контрагент КАК Контрагент,
		|	КонтрагентыИСчета.СчетКонтрагента КАК СчетКонтрагента,
		|	ДоговорыКонтрагентов.Ссылка КАК Договор,
		|	ДоговорыКонтрагентов.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
		|	ДоговорыКонтрагентов.БанковскийСчет КАК БанковскийСчет,
		|	ДоговорыКонтрагентов.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	ДоговорыКонтрагентов.ДоговорССамозанятым КАК ДоговорССамозанятым,
		|	ДоговорыКонтрагентов.Статус КАК Статус,
		|	НЕОПРЕДЕЛЕНО КАК ОбъектРасчетов,
		|	ВЫБОР
		|		КОГДА ДоговорыКонтрагентов.ТипДоговора В (
		|			ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПокупателем),
		|			ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СКомиссионером),
		|			ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СХранителем),

		
		|			ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СКомитентомНаЗакупку),
		|			ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.РеализацияЧерезКомиссионера))
		|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
		|	ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
		|КОНЕЦ КАК ТипРасчетов
		|ПОМЕСТИТЬ ДоговорыСКонтрагентами
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КонтрагентыИСчета КАК КонтрагентыИСчета
		|		ПО ДоговорыКонтрагентов.Контрагент = КонтрагентыИСчета.Контрагент
		|			И ДоговорыКонтрагентов.Организация = &Организация
		|			И (ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
		|				ИЛИ ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.НеСогласован))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	БанковскийСчетКонтрагента,
		|	БанковскийСчет,
		|	Статус
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Контрагент КАК Контрагент,
		|	ДоговорыКонтрагентов.СчетКонтрагента КАК СчетКонтрагента,
		|	ДоговорыКонтрагентов.Договор КАК Договор,
		|	ДоговорыКонтрагентов.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	ДоговорыКонтрагентов.ДоговорССамозанятым КАК ДоговорССамозанятым,
		|	ДоговорыКонтрагентов.ОбъектРасчетов КАК ОбъектРасчетов,
		|	ДоговорыКонтрагентов.ТипРасчетов КАК ТипРасчетов,
		|	ВЫБОР
		|		КОГДА ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК Приоритет
		|ИЗ
		|	ДоговорыСКонтрагентами КАК ДоговорыКонтрагентов
		|ГДЕ
		|	(ДоговорыКонтрагентов.БанковскийСчетКонтрагента = ДоговорыКонтрагентов.СчетКонтрагента
		|		ИЛИ ДоговорыКонтрагентов.БанковскийСчетКонтрагента = ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка))
		|	И (ДоговорыКонтрагентов.БанковскийСчет = &БанковскийСчет
		|		ИЛИ ДоговорыКонтрагентов.БанковскийСчет = ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Контрагент,
		|	ДоговорыКонтрагентов.СчетКонтрагента,
		|	ДоговорыКонтрагентов.Договор,
		|	ДоговорыКонтрагентов.СтатьяДвиженияДенежныхСредств,
		|	ДоговорыКонтрагентов.ДоговорССамозанятым,
		|	ДоговорыКонтрагентов.ОбъектРасчетов,
		|	ДоговорыКонтрагентов.ТипРасчетов,
		|	ВЫБОР
		|		КОГДА ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
		|			ТОГДА 3
		|		ИНАЧЕ 4
		|	КОНЕЦ
		|ИЗ
		|	ДоговорыСКонтрагентами КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.БанковскийСчетКонтрагента <> ДоговорыКонтрагентов.СчетКонтрагента
		|	И ДоговорыКонтрагентов.БанковскийСчетКонтрагента <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)
		|	И (ДоговорыКонтрагентов.БанковскийСчет = &БанковскийСчет
		|		ИЛИ ДоговорыКонтрагентов.БанковскийСчет = ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Контрагент,
		|	ДоговорыКонтрагентов.СчетКонтрагента,
		|	ДоговорыКонтрагентов.Договор,
		|	ДоговорыКонтрагентов.СтатьяДвиженияДенежныхСредств,
		|	ДоговорыКонтрагентов.ДоговорССамозанятым,
		|	ДоговорыКонтрагентов.ОбъектРасчетов,
		|	ДоговорыКонтрагентов.ТипРасчетов,
		|	ВЫБОР
		|		КОГДА ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
		|			ТОГДА 3
		|		ИНАЧЕ 4
		|	КОНЕЦ
		|ИЗ
		|	ДоговорыСКонтрагентами КАК ДоговорыКонтрагентов
		|ГДЕ
		|	(ДоговорыКонтрагентов.БанковскийСчетКонтрагента = ДоговорыКонтрагентов.СчетКонтрагента
		|		ИЛИ ДоговорыКонтрагентов.БанковскийСчетКонтрагента = ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка))
		|	И ДоговорыКонтрагентов.БанковскийСчет <> &БанковскийСчет
		|	И ДоговорыКонтрагентов.БанковскийСчет <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Контрагент,
		|	ДоговорыКонтрагентов.СчетКонтрагента,
		|	ДоговорыКонтрагентов.Договор,
		|	ДоговорыКонтрагентов.СтатьяДвиженияДенежныхСредств,
		|	ДоговорыКонтрагентов.ДоговорССамозанятым,
		|	ДоговорыКонтрагентов.ОбъектРасчетов,
		|	ДоговорыКонтрагентов.ТипРасчетов,
		|	ВЫБОР
		|		КОГДА ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
		|			ТОГДА 3
		|		ИНАЧЕ 4
		|	КОНЕЦ
		|ИЗ
		|	ДоговорыСКонтрагентами КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.БанковскийСчетКонтрагента <> ДоговорыКонтрагентов.СчетКонтрагента
		|	И ДоговорыКонтрагентов.БанковскийСчетКонтрагента <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)
		|	И ДоговорыКонтрагентов.БанковскийСчет <> &БанковскийСчет
		|	И ДоговорыКонтрагентов.БанковскийСчет <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка)
		|";
	
	Запрос.УстановитьПараметр("Таблица", ИсходнаяТаблица);
	Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() <> 0 Тогда
		
		Отбор = ОбъектыРасчетовСервер.ДополнительныеКритерииПоиска();
		Отбор.Вставить("ВернутьПервый", Истина);
		
		ДоговорыИОбъектыРасчетов = ОбъектыРасчетовСервер.ПолучитьОбъектыРасчетовПоСсылкам(
			Результат.ВыгрузитьКолонку("Договор"),
			Организация, ,
			Отбор);
		
		Для Каждого СтрокаДоговора Из Результат Цикл
			СтрокаДоговора.ОбъектРасчетов = ДоговорыИОбъектыРасчетов[СтрокаДоговора.Договор];
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Возвращает таблицу с договорами кредитов и депозитов.
// 
// Параметры:
//  БанковскийСчет - СправочникСсылка.БанковскиеСчетаОрганизаций -  Банковский счет организации.
//  Организация - СправочникСсылка.Организации -  Организация.
//  ИсходнаяТаблица - ТаблицаЗначений - таблица, содержащая список контрагентов и их счетов:
//   *Контрагент - СправочникСсылка.Организации, СправочникСсылка.Контрагенты, Строка, СправочникСсылка.ФизическиеЛица - 
//                контрагент, по которому выполняется поиск договоров.
//   *СчетКонтрагента - СправочникСсылка.БанковскиеСчетаКонтрагентов, СправочникСсылка.БанковскиеСчетаОрганизаций, Строка - 
//                     банковский счет контрагента, по которому выполняется поиск договоров.
// 
// Возвращаемое значение:
//  ТаблицаЗначений -  Список объектов расчетов по найденным договорам:
//   *Контрагент - СправочникСсылка.Организации, СправочникСсылка.Контрагенты, Строка, СправочникСсылка.ФизическиеЛица - 
//                контрагент, по которому выполнялся поиск договоров.
//   *СчетКонтрагента - СправочникСсылка.БанковскиеСчетаКонтрагентов, СправочникСсылка.БанковскиеСчетаОрганизаций, Строка - 
//                     банковский счет контрагента, по которому выполнялся поиск договоров.
//   *Ссылка - СправочникСсылка.ДоговорыКредитовИДепозитов - найденный договор кредита и депозита.
//   *ХарактерДоговора - ПеречислениеСсылка.ХарактерыДоговоровФинансовыхИнструментов - характер договора.
//   *СтатьяДДСПоступленияВыдачи - СправочникСсылка.СтатьиДвиженияДенежныхСредств - статья движения денежных средств 
//                                 поступления (выдачи) по договору.
//   *СтатьяДДСОсновногоДолга - СправочникСсылка.ОбъектыРасчетов - Статья движения денежных средств основного долга по 
//                              договору.
//
Функция СписокДоговоровКредитовДепозитов(БанковскийСчет, ИсходнаяТаблица)

	ИсходнаяТаблица.Индексы.Добавить("Контрагент, СчетКонтрагента");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Таблица.Контрагент КАК Контрагент,
		|	Таблица.СчетКонтрагента КАК СчетКонтрагента
		|ПОМЕСТИТЬ КонтрагентыИСчета
		|ИЗ
		|	&Таблица КАК Таблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КонтрагентыИСчета.Контрагент КАК Контрагент,
		|	КонтрагентыИСчета.СчетКонтрагента КАК СчетКонтрагента,
		|	ДоговорыКредитовИДепозитов.Ссылка КАК Ссылка,
		|	ДоговорыКредитовИДепозитов.ХарактерДоговора КАК ХарактерДоговора,
		|	ДоговорыКредитовИДепозитов.СтатьяДДСПоступленияВыдачи КАК СтатьяДДСПоступленияВыдачи,
		|	ДоговорыКредитовИДепозитов.СтатьяДДСОсновногоДолга КАК СтатьяДДСОсновногоДолга
		|ИЗ
		|	Справочник.ДоговорыКредитовИДепозитов КАК ДоговорыКредитовИДепозитов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КонтрагентыИСчета КАК КонтрагентыИСчета
		|		ПО ДоговорыКредитовИДепозитов.Контрагент = КонтрагентыИСчета.Контрагент
		|			И ДоговорыКредитовИДепозитов.БанковскийСчетКонтрагента = КонтрагентыИСчета.СчетКонтрагента
		|			И (ДоговорыКредитовИДепозитов.БанковскийСчет = &БанковскийСчет)
		|			И (ДоговорыКредитовИДепозитов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует))";
	
	Запрос.УстановитьПараметр("Таблица", ИсходнаяТаблица);
	Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Процедура ЗаполнитьПоКосвеннымДанным(СтрокиКЗагрузке, БанковскийСчет)
	
	Если СтрокиКЗагрузке.Количество() <> 0 Тогда
		
		Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет, "Владелец");
		МассивВзаимосвязанныхОрганизаций = Справочники.Организации.МассивВзаимосвязанныхОрганизаций(Организация);
		
		СтрокаТаблицы = СтрокиКЗагрузке.Получить(0);
		ТаблицаКЗагрузке = СтрокаТаблицы.Владелец();
		КонтрагентыИСчета = ТаблицаКЗагрузке.Скопировать(СтрокиКЗагрузке, "Контрагент, СчетКонтрагента");
		КонтрагентыИСчета.Свернуть("Контрагент, СчетКонтрагента");
		
		ОбъектыРасчетовПоДоговорам = СписокОбъектовРасчетовПоДоговорам(БанковскийСчет, Организация, КонтрагентыИСчета);
		ОбъектыРасчетовПоДоговорам.Индексы.Добавить("Контрагент, СчетКонтрагента");
		
		ДоговорыКредитовДепозитов = СписокДоговоровКредитовДепозитов(БанковскийСчет, КонтрагентыИСчета);
		ДоговорыКредитовДепозитов.Индексы.Добавить("Контрагент, СчетКонтрагента");
		
	КонецЕсли;
	
	Для каждого СтрокаДокумента Из СтрокиКЗагрузке Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаДокумента.ВидОперации) И ТипЗнч(СтрокаДокумента.Контрагент) = Тип("СправочникСсылка.Организации") Тогда // Собственная организация
			
			Если МассивВзаимосвязанныхОрганизаций.Найти(СтрокаДокумента.Контрагент) <> Неопределено Тогда
				СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств;
			Иначе
				
				Если СтрокаДокумента.Исходящий Тогда
					СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию;
				Иначе
					СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации;
				КонецЕсли;
				
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура ("Контрагент, СчетКонтрагента");
		ЗаполнитьЗначенияСвойств(ПараметрыОтбора, СтрокаДокумента);
		
		// Договор кредита/депозита
		НайденныеДоговорыКредитовДепозитов = ДоговорыКредитовДепозитов.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеДоговорыКредитовДепозитов.Количество() = 1 Тогда
			
			Выборка = НайденныеДоговорыКредитовДепозитов.Получить(0);
			СтрокаДокумента.ДоговорКредитаДепозита = Выборка.Ссылка;
			СтрокаДокумента.ВидОперации = Справочники.ДоговорыКредитовИДепозитов.ОперацияПоХарактеруДоговора(
				Выборка.ХарактерДоговора,
				Не СтрокаДокумента.Исходящий);
				
			Если Выборка.ХарактерДоговора = Перечисления.ХарактерыДоговоровФинансовыхИнструментов.КредитИлиЗайм Тогда
				СтрокаДокумента.СтатьяДвиженияДенежныхСредств =
					?(Не СтрокаДокумента.Исходящий, Выборка.СтатьяДДСПоступленияВыдачи, Выборка.СтатьяДДСОсновногоДолга);
			Иначе
				СтрокаДокумента.СтатьяДвиженияДенежныхСредств =
					?(Не СтрокаДокумента.Исходящий, Выборка.СтатьяДДСОсновногоДолга, Выборка.СтатьяДДСПоступленияВыдачи);
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		// Договор с контрагентом
		Если Не ЗначениеЗаполнено(СтрокаДокумента.ОбъектРасчетов) Тогда
			
			ДополнитьПараметрыОтбораДоговора(ПараметрыОтбора);
			
			Если СтрокаДокумента.Исходящий Тогда
				ПараметрыОтбора.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком;
			КонецЕсли;
				
			ЗаполнитьОбъектРасчетовПлатежаПоДоговору(СтрокаДокумента, ОбъектыРасчетовПоДоговорам, ПараметрыОтбора);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьКассовыйДокумент(ДокументыКЗагрузке, ТаблицаДокументов, БанковскийСчет, Исходящие)
	
	Если Не ТаблицаДокументов.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки,
	|	ТаблицаДокументов.ДатаПроведения,
	|	ТаблицаДокументов.СуммаДокумента
	|
	|ПОМЕСТИТЬ ТаблицаДокументов
	|
	|ИЗ
	|	&ТаблицаДокументов КАК ТаблицаДокументов
	|";
	
	Запрос.УстановитьПараметр("ТаблицаДокументов", ТаблицаДокументов);
	Запрос.Выполнить();
	
	Если Исходящие Тогда
	
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
		|	ДанныеДокумента.Ссылка КАК Ссылка
		|ИЗ
		|	ТаблицаДокументов
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		Документ.ПриходныйКассовыйОрдер КАК ДанныеДокумента
		|	ПО
		|		ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка)
		|		И ДанныеДокумента.БанковскийСчет = &БанковскийСчет
		|		И НАЧАЛОПЕРИОДА(ДанныеДокумента.Дата, ДЕНЬ) = ТаблицаДокументов.ДатаПроведения
		|		И ДанныеДокумента.СуммаДокумента = ТаблицаДокументов.СуммаДокумента
		|		И ДанныеДокумента.Проведен
		|ГДЕ
		|	НЕ ДанныеДокумента.Ссылка ЕСТЬ NULL
		|";
		
	Иначе
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
		|	ДанныеДокумента.Ссылка КАК Ссылка
		|ИЗ
		|	ТаблицаДокументов
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		Документ.РасходныйКассовыйОрдер КАК ДанныеДокумента
		|	ПО
		|		ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СдачаДенежныхСредствВБанк)
		|		И ДанныеДокумента.БанковскийСчет = &БанковскийСчет
		|		И НАЧАЛОПЕРИОДА(ДанныеДокумента.Дата, ДЕНЬ) = ТаблицаДокументов.ДатаПроведения
		|		И ДанныеДокумента.СуммаДокумента = ТаблицаДокументов.СуммаДокумента
		|		И ДанныеДокумента.Проведен
		|ГДЕ
		|	НЕ ДанныеДокумента.Ссылка ЕСТЬ NULL
		|";
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаДокумента = ДокументыКЗагрузке.Найти(Выборка.НомерСтроки, "НомерСтроки");
		Если СтрокаДокумента <> Неопределено Тогда
			СтрокаДокумента.КассовыйДокумент = Выборка.Ссылка;
			СтрокаДокумента.Загружать = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция СобственныеСчета(БанковскийСчет)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	БанковскиеСчета.Ссылка КАК Ссылка,
	|	БанковскиеСчета.НомерСчета КАК НомерСчета,
	|	ВЫБОР
	|		КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанка ТОГДА
	|			БанковскиеСчета.БИКБанка
	|		ИНАЧЕ
	|			БанковскиеСчета.Банк.Код
	|	КОНЕЦ КАК БИК,
	|	ВЫБОР
	|		КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанка ТОГДА
	|			БанковскиеСчета.СВИФТБанка
	|		ИНАЧЕ
	|			БанковскиеСчета.Банк.СВИФТБИК
	|	КОНЕЦ КАК СВИФТ
	|ИЗ
	|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчета
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
	|	ПО
	|		БанковскиеСчетаОрганизаций.Владелец = БанковскиеСчета.Владелец
	|		И БанковскиеСчетаОрганизаций.Ссылка = &БанковскийСчет
	|	
	|ГДЕ
	|	БанковскиеСчета.Ссылка <> &БанковскийСчет
	|	И НЕ БанковскиеСчета.ПометкаУдаления
	|";
	
	Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ДобавитьЗамечание(Буфер, НоваяСтрока, Разделитель = "")
	
	Если ПустаяСтрока(Буфер) Тогда
		Буфер = НоваяСтрока;
	Иначе
		Шаблон = НСтр("ru = '%1%2%3'");
		Буфер = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Шаблон,
			Буфер,
			?(ПустаяСтрока(Разделитель), Символы.ПС, Разделитель),
			НоваяСтрока);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьАдресКонтрагента(Дата, Контрагент, ВидКонтрагента, Адрес)

	Если ПустаяСтрока(Адрес) Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидКонтрагента = Перечисления.ЮрФизЛицо.ЮрЛицо
		Или ВидКонтрагента = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Тогда
		УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(
			Контрагент,
			Адрес,
			Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента,
			Дата,
			Ложь);
	Иначе
		УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(
			Контрагент,
			Адрес,
			Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента,
			Дата,
			Ложь);
	КонецЕсли;

КонецПроцедуры

Функция СформироватьОписаниеОшибкиЗаписиДокумента(ОписаниеОшибки)

	Причина = ?(
		ОписаниеОшибки.Причина <> Неопределено, СформироватьОписаниеОшибкиЗаписиДокумента(ОписаниеОшибки.Причина), "");
	
	Если ОписаниеОшибки.ИмяМодуля <> "" Тогда
		Описание = СтрШаблон(НСтр("ru = '%1
						|{%2(%3)}:%4'"),
				ОписаниеОшибки.Описание,
				ОписаниеОшибки.ИмяМодуля,
				ОписаниеОшибки.НомерСтроки,
				ОписаниеОшибки.ИсходнаяСтрока);
	Иначе
		Описание = СтрШаблон("%1", ОписаниеОшибки.Описание);
	КонецЕсли;
	
	Возврат ?(Причина <> "", Причина + Символы.ПС, Причина) + Описание;

КонецФункции

Процедура ЗаполнитьСтавкуНДСПоДоговору(Объект, СтрокаРасшифровки)

	Если Не ЗначениеЗаполнено(СтрокаРасшифровки.ОбъектРасчетов) Тогда
		
		Если ЗначениеЗаполнено(Объект.Договор)
			И Не ЗначениеЗаполнено(Объект.НалогообложениеНДС) Тогда
				
			НалогообложениеПоДоговору = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Договор, "НалогообложениеНДС");
			УстановитьСвойство(Объект, "НалогообложениеНДС", НалогообложениеПоДоговору);
			
		КонецЕсли;
		
		УчетНДСУП.ЗаполнитьСтавкуНДСДляПлатежей(
			СтрокаРасшифровки.СтавкаНДС,
			Объект.НалогообложениеНДС,
			Объект.Организация,
			Объект.Дата);
		
	КонецЕсли;

КонецПроцедуры

Процедура ДополнитьПараметрыОтбораДоговора(ПараметрыОтбора)

	ПараметрыОтбора.Вставить("Приоритет", 1);
	ПараметрыОтбора.Вставить("ТипРасчетов", Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом);

КонецПроцедуры

Процедура ЗаполнитьОбъектРасчетовПлатежаПоДоговору(СтрокаПлатежа, ОбъектыРасчетовПоДоговорам, Отбор)

	Если Отбор.Приоритет > 4 Тогда
		Возврат;
	КонецЕсли;
	
	СписокОбъектовРасчетов = ОбъектыРасчетовПоДоговорам.НайтиСтроки(Отбор);
	
	Если СписокОбъектовРасчетов.Количество() = 1 Тогда
		ЗаполнитьЗначенияСвойств(
			СтрокаПлатежа, СписокОбъектовРасчетов[0], "ОбъектРасчетов, СтатьяДвиженияДенежныхСредств, ДоговорССамозанятым, Договор");
	ИначеЕсли СписокОбъектовРасчетов.Количество() = 0 Тогда
		
		Отбор.Вставить("Приоритет", Отбор.Приоритет + 1);
		ЗаполнитьОбъектРасчетовПлатежаПоДоговору(СтрокаПлатежа, ОбъектыРасчетовПоДоговорам, Отбор);
		
	КонецЕсли;

КонецПроцедуры

//++ Локализация

#Область Локализация

Процедура РаспознаваниеОперацииСБП(НастройкиЗагрузки, Платеж, ИННКонтрагента)

	Если ЗначениеЗаполнено(Платеж.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	Платеж.ЭтоСБП = ЭтоОперацияСБП(Платеж.НазначениеПлатежа);
	
	Если Не Платеж.ЭтоСБП Тогда
		Возврат;
	КонецЕсли;
	
	СтатусКонтрагента = ?(Платеж.Исходящий, Лев(Платеж.ПолучательСчет, 3), Лев(Платеж.ПлательщикСчет, 3));
	ЭтоСчетФизЛица = СтатусКонтрагента = "408";
	
	Если Платеж.Исходящий Тогда
		
		Если ЭтоКомиссияСБП(Платеж.НазначениеПлатежа) Тогда
			Платеж.ВидОперации = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств;
		ИначеЕсли ЭтоВозврат(Платеж.НазначениеПлатежа) Тогда
			
			Если СтрДлина(ИННКонтрагента) = 12
				Или (Не Платеж.ПроверятьИНН И ЭтоСчетФизЛица) Тогда
				Платеж.ВидОперации = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту;
			Иначе
				Платеж.ВидОперации = Перечисления.ХозяйственныеОперации.ВозвратОплатыНаПлатежнуюКарту;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если СтрДлина(ИННКонтрагента) = 12
			Или (Не Платеж.ПроверятьИНН И ЭтоСчетФизЛица) Тогда
			Платеж.ВидОперации = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента;
		Иначе
			Платеж.ВидОперации = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыПоПлатежнойКарте;
		КонецЕсли;
		
	КонецЕсли;
	
	Если (Платеж.Получатель = Платеж.ПолучательБанк1
		Или Платеж.Плательщик = Платеж.ПлательщикБанк1)
		И ЭтоСчетФизЛица Тогда
		
		Если НастройкиЗагрузки.РежимЗаполненияКонтрагентаПоQRПлатежу = 0 Тогда
			
			Платеж.ИмяКонтрагента = ВРег(ВырезкаФИОФизлицаВНазначенииПлатежаСБП(Платеж.НазначениеПлатежа));
			
			Если Платеж.ИмяКонтрагента <> "" Тогда
				СтруктураНаименования = ДенежныеСредстваСерверЛокализация.НаименованиеОрганизации(Платеж.ИмяКонтрагента);
				Платеж.СокрИмяКонтрагента = СтруктураНаименования.СокращенноеНаименование;
			Иначе
				Платеж.СоздаватьКонтрагента = Ложь;
			КонецЕсли;
			
		Иначе
			Платеж.Контрагент = Справочники.Контрагенты.РозничныйПокупатель;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоСчетФизЛица
		И Не Платеж.ПроверятьИНН Тогда
		Платеж.ЭтоФизЛицо = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура РаспознаваниеОперацииВыплатаЗарплаты(Платеж)

	Если ЗначениеЗаполнено(Платеж.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	НомерСчета = ?(Платеж.Исходящий, Платеж.ПолучательСчет, Платеж.ПлательщикСчет);
	ЭтоВыплатаЗарплаты = ЭтоОперацияВыплатаЗарплаты(Платеж.НазначениеПлатежа, Платеж.КодНазПлатежа);
	ЭтоВыплатаПоГПХ = ЭтоОперацияВыплатаИсполнителюПоГПХ(НомерСчета, Платеж.НазначениеПлатежа);
	ЭтоВыплатаПоИсполнительномуЛисту = ЭтоОперацияВыплатыПоИсполнительномуЛисту(НомерСчета, Платеж.НазначениеПлатежа);
	
	Если ЭтоВыплатаПоИсполнительномуЛисту Тогда
		
		Платеж.ВидОперации = ?(
			Платеж.Исходящий,
			Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств,
			Перечисления.ХозяйственныеОперации.ПрочееПоступлениеДенежныхСредств);
		Возврат;
		
	КонецЕсли;
	
	Если ЭтоВыплатаПоГПХ Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЭтоВыплатаЗарплаты Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьРеестр = ЭтоПлатежПоВедомости(Платеж.НазначениеПлатежа);
	
	Платеж.ЭтоФизЛицо = ЭтоСчетФизическогоЛица(НомерСчета);
	
	Если ЕстьРеестр Тогда
		Платеж.ВидОперации = ?(
			Платеж.Исходящий,
			Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту,
			Перечисления.ХозяйственныеОперации.ВозвратНеперечисленнойЗарплатыПоЗарплатномуПроекту);
	КонецЕсли;
	
	Если Платеж.ЭтоФизЛицо Тогда
		Платеж.ВидОперации = ?(
		Платеж.Исходящий,
		Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета,
		Перечисления.ХозяйственныеОперации.ВозвратНеперечисленныхДС);
	КонецЕсли;

КонецПроцедуры

Процедура РаспознаваниеОперацииЭквайринг(Платеж)

	Если ЗначениеЗаполнено(Платеж.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	НомерСчета = ?(Платеж.Исходящий, Платеж.ПолучательСчет, Платеж.ПлательщикСчет);
	ЭтоЭквайринг = ЭтоОперацияЭквайринга(НомерСчета, Платеж.НазначениеПлатежа);
	
	Если Не ЭтоЭквайринг Тогда
		Возврат;
	КонецЕсли;
	
	Платеж.ВидОперации = ?(
		Платеж.Исходящий,
		Перечисления.ХозяйственныеОперации.ВозвратОплатыНаПлатежнуюКарту,
		Перечисления.ХозяйственныеОперации.ПоступлениеОплатыПоПлатежнойКарте);

КонецПроцедуры

Процедура ЗаполнитьОперациюОплатыПоПлатежнойКарте(Платеж, ДокументОбъект)

	ПараметрыОтбора = Справочники.ДоговорыЭквайринга.ПараметрыОтбораДоговораЭквайринга();
	ПараметрыОтбора.Организация = ДокументОбъект.Организация;
	ПараметрыОтбора.БанковскийСчет = ДокументОбъект.БанковскийСчет;
	
	Если Платеж.ЭтоСБП Тогда
		СпособПроведенияПлатежа = Перечисления.СпособыПроведенияПлатежей.СистемаБыстрыхПлатежей;
	Иначе
		
		СпособПроведенияПлатежа = Неопределено;
		ПараметрыОтбора.Эквайер = ДокументОбъект.Контрагент;
		
	КонецЕсли;
	
	ПараметрыОтбора.СпособПроведенияПлатежа = СпособПроведенияПлатежа;
	ДоговорЭквайринга = Справочники.ДоговорыЭквайринга.ДоговорЭквайрингаПоУмолчанию(ПараметрыОтбора);
	
	Если ЗначениеЗаполнено(ДоговорЭквайринга) Тогда
		
		РеквизитыДоговора = Справочники.ДоговорыЭквайринга.РеквизитыДоговора(ДоговорЭквайринга);
		
		УстановитьСвойство(ДокументОбъект, "Контрагент", РеквизитыДоговора.Эквайер, Истина);
		УстановитьСвойство(ДокументОбъект, "ДоговорЭквайринга", ДоговорЭквайринга);
		УстановитьСвойство(
			ДокументОбъект,
			"БанковскийСчетКонтрагента",
			РеквизитыДоговора.БанковскийСчетКонтрагента,
			Истина);
		УстановитьСвойство(
			ДокументОбъект,
			"СтатьяДвиженияДенежныхСредств",
			РеквизитыДоговора.СтатьяДвиженияДенежныхСредствВозврат,
			Истина);
		
		ОтражатьКомиссию = 
			(РеквизитыДоговора.СпособОтраженияКомиссии = 
				Перечисления.СпособыОтраженияЭквайринговойКомиссии.ПриЗачислении
			И РеквизитыДоговора.ВзимаетсяКомиссияПриВозврате);
		УстановитьСвойство(ДокументОбъект, "ОтражатьКомиссию", ОтражатьКомиссию);
		
		Если ОтражатьКомиссию Тогда
		
			УстановитьСвойство(ДокументОбъект, "СтатьяРасходов", РеквизитыДоговора.СтатьяРасходов);
			УстановитьСвойство(ДокументОбъект, "АналитикаРасходов", РеквизитыДоговора.АналитикаРасходов);
			УстановитьСвойство(ДокументОбъект, "Подразделение", РеквизитыДоговора.ПодразделениеРасходов);
			УстановитьСвойство(
				ДокументОбъект, "НаправлениеДеятельности", РеквизитыДоговора.НаправлениеДеятельности);
			
			Если РеквизитыДоговора.ФиксированнаяСтавкаКомиссии Тогда
				ДокументОбъект.СуммаКомиссии = ДенежныеСредстваКлиентСервер.РассчитатьСуммуКомиссии(
					Платеж.СуммаДокумента, РеквизитыДоговора.СтавкаКомиссии);
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Функция ЭтоКомиссияСБП(Знач ИсходнаяСтрока)

	Возврат СтрНайти(НРег(ИсходнаяСтрока), "комисси") > 0
		И ЭтоОперацияСБП(ИсходнаяСтрока);

КонецФункции

Функция ЭтоОперацияСБП(Знач ИсходнаяСтрока)

	СписокПодстрок = Новый Массив;
	СписокПодстрок.Добавить(НСтр("ru = 'систем'"));
	СписокПодстрок.Добавить(НСтр("ru = 'быстры'"));
	СписокПодстрок.Добавить(НСтр("ru = 'платеж'"));
	
	ПодстрокаКод = Новый Массив;
	ПодстрокаКод.Добавить(НСтр("ru = 'qr'"));
	ПодстрокаКод.Добавить(НСтр("ru = 'код'"));
	
	Возврат СтрНайти(ВРег(ИсходнаяСтрока), СтрШаблон(" %1 ", НСтр("ru = 'СБП'"))) > 0
		ИЛИ СтрНайти(ИсходнаяСтрока, НСтр("ru = 'СБП'")) > 0
		ИЛИ НайденаФразаИзСпискаПодстрок(ИсходнаяСтрока, СписокПодстрок, 1, 0)
		ИЛИ НайденаФразаИзСпискаПодстрок(ИсходнаяСтрока, ПодстрокаКод, 1, 0);

КонецФункции

// Возращает признак наличия фразы в исходной строке.
//
// Параметры:
//  ИсходнаяСтрока - Строка - исходная строка, в которой выполняется поиск фразы.
//  СписокПодстрок - Массив из Строка - массив искомой подстроки в виде отдельных слов.
//  ПозицияПодстроки - Число - позиция, с учетом которой выполняется поиск в исходной строке.
//  Индекс - Число - индекс, рассматриваемой строки списка подстрок.
// 
// Возвращаемое значение:
//   - Булево
//
Функция НайденаФразаИзСпискаПодстрок(ИсходнаяСтрока, СписокПодстрок, ПозицияПодстроки, Индекс)

	Подстрока = СписокПодстрок.Получить(Индекс);
	
	Если Индекс = 0 Тогда
		ПредыдущаяПодстрока = "";
	Иначе
		ПредыдущаяПодстрока = СписокПодстрок.Получить(Индекс - 1);
	КонецЕсли;
	
	НачальнаяПозиция = ПозицияПодстроки + СтрДлина(ПредыдущаяПодстрока);
	ПозицияПодстроки = СтрНайти(НРег(ИсходнаяСтрока), Подстрока, , НачальнаяПозиция);
	
	Если ПозицияПодстроки > 0 Тогда
		
		Если СписокПодстрок.ВГраница() >= Индекс + 1 Тогда
			Результат = НайденаФразаИзСпискаПодстрок(ИсходнаяСтрока, СписокПодстрок, ПозицияПодстроки, Индекс + 1);
		Иначе
			Результат = Истина;
		КонецЕсли;
		
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ВырезкаФИОФизлицаВНазначенииПлатежаСБП(Знач ИсходнаяСтрока)

	Результат = "";
	
	ПодстрокаСФИО = ВырезаннаяПодстрока(ИсходнаяСтрока, НСтр("ru = 'от'"));
	
	Если ПодстрокаСФИО <> "" Тогда
		Результат = ВырезатьФИОИзСтроки(ПодстрокаСФИО);
	Иначе
		
		ПодстрокаСФИО = ВырезаннаяПодстрока(ИсходнаяСтрока, НСтр("ru = 'в пользу'"));
		
		Если ПодстрокаСФИО <> "" Тогда
			Результат = ВырезатьФИОИзСтроки(ПодстрокаСФИО);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ВырезаннаяПодстрока(Знач ИсходнаяСтрока, Фраза)

	ВырезаннаяПодстрока = "";
	
	Подстрока = СтрШаблон(" %1 ", Фраза);
	НачальнаяПозиция = СтрНайти(НРег(ИсходнаяСтрока), Подстрока);
	
	Если НачальнаяПозиция > 0 Тогда
		ВырезаннаяПодстрока = Прав(ИсходнаяСтрока, СтрДлина(ИсходнаяСтрока) - (НачальнаяПозиция + СтрДлина(Подстрока) - 1));
	КонецЕсли;
	
	Возврат ВырезаннаяПодстрока;

КонецФункции

Функция ВырезатьФИОИзСтроки(ИсходнаяСтрока)

	МассивПодстрокСФИО = СтрРазделить(ИсходнаяСтрока, " ", Ложь);
	ЧастиФИО = Новый Массив;
	
	ЧастиОтчества = Новый Массив;
	ЧастиОтчества.Добавить(НСтр("ru = 'оглы'"));
	ЧастиОтчества.Добавить(НСтр("ru = 'улы'"));
	ЧастиОтчества.Добавить(НСтр("ru = 'уулу'"));
	ЧастиОтчества.Добавить(НСтр("ru = 'кызы'"));
	ЧастиОтчества.Добавить(НСтр("ru = 'гызы'"));
	ЧастиОтчества.Добавить(НСтр("ru = 'угли'"));
	
	Для Каждого СтрокаМассива Из МассивПодстрокСФИО Цикл
		
		ПерваяБуква = Лев(СтрокаМассива, 1);
		
		Если Не ЭтоЗаглавнаяБуква(ПерваяБуква)
			И ЧастиФИО.Количество() > 0
			И ЧастиОтчества.Найти(СтрокаМассива) = Неопределено Тогда
			Прервать;
		Иначе
			ЧастиФИО.Добавить(СтрокаМассива);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтрСоединить(ЧастиФИО, " ");

КонецФункции

Функция ЭтоВозврат(Знач ИсходнаяСтрока)

	Возврат СтрНайти(НРег(ИсходнаяСтрока), "возврат") > 0;

КонецФункции

Функция ЭтоЗаглавнаяБуква(Буква)

	Возврат ВРег(Буква) = Буква;

КонецФункции

Процедура РазобратьДанныеКонтрагента(ДанныеПлатежа, ДанныеКонтрагента, ЭлементыКонтрагента, ТекущийИндекс)

	Если ЭлементыКонтрагента.ВГраница() < ТекущийИндекс Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущийИндекс = 0 Тогда
		ДанныеКонтрагента.ИмяКонтрагента = ЭлементыКонтрагента[ТекущийИндекс];
	КонецЕсли;
	
	Если ТекущийИндекс = 1 Тогда
		
		Если ДанныеПлатежа.ЭтоЮрЛицо
			И ДанныеПлатежа.ЭтоАктивныйСчетНезавершенныхРасчетов Тогда
			
			ТолькоСимволы = СтроковыеФункцииКлиентСервер.ТолькоСимволыНациональногоАлфавитаВСтроке(
				СтрЗаменить(ЭлементыКонтрагента[ТекущийИндекс], " ", ""));
			
			Если ТолькоСимволы Тогда
				ДанныеКонтрагента.ИмяКонтрагента = ЭлементыКонтрагента[ТекущийИндекс];
				ДанныеКонтрагента.ИНН = "";
				ДанныеКонтрагента.ЭтоФизЛицо = Истина;
			КонецЕсли;
			
		ИначеЕсли ДанныеПлатежа.ЭтоСчетКлиента Тогда
			ДанныеКонтрагента.АдресКонтрагента = ЭлементыКонтрагента[ТекущийИндекс];
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТекущийИндекс > 1
		И ДанныеПлатежа.ЭтоЮрЛицо
		И ДанныеПлатежа.ЭтоАктивныйСчетНезавершенныхРасчетов Тогда
		
		ТолькоЦифры = СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЭлементыКонтрагента[ТекущийИндекс]);
		
		Если ТолькоЦифры
			И СтрДлина(ЭлементыКонтрагента[ТекущийИндекс]) = 12 Тогда
			ДанныеКонтрагента.ИНН = ЭлементыКонтрагента[ТекущийИндекс];
			ДанныеКонтрагента.ЭтоФизЛицо = Истина;
		ИначеЕсли Не ТолькоЦифры Тогда
			ДанныеКонтрагента.АдресКонтрагента = ЭлементыКонтрагента[ТекущийИндекс];
		КонецЕсли;
		
	КонецЕсли;
	
	РазобратьДанныеКонтрагента(ДанныеПлатежа, ДанныеКонтрагента, ЭлементыКонтрагента, ТекущийИндекс + 1);

КонецПроцедуры

Функция ЭтоАктивныйСчетНезавершенныхРасчетов(НомерСчета)

	Возврат Лев(НомерСчета, 5) = "30233";

КонецФункции

Функция ЭтоПассивныйСчетНезавершенныхРасчетов(НомерСчета)

	Возврат Лев(НомерСчета, 5) = "30232";

КонецФункции

Функция ЭтоАктивныйСчетРасчетовСФилиалами(НомерСчета)

	Возврат Лев(НомерСчета, 5) = "30302";

КонецФункции

Функция ЭтоСчетОперацийСКлиентами(НомерСчета)

	СчетПервогоПорядка = Лев(НомерСчета, 3);
	
	Возврат СчетПервогоПорядка = "401" // Средства федерального бюджета
		Или СчетПервогоПорядка = "402" // Средства бюджетов субъектов Российской Федерации и местных бюджетов
		Или СчетПервогоПорядка = "403" // Прочие средства бюджетов
		Или СчетПервогоПорядка = "404" // Средства государственных и других внебюджетных фондов
		Или СчетПервогоПорядка = "405" // Счета организаций, находящихся в федеральной собственности
		Или СчетПервогоПорядка = "406" // Счета организаций, находящихся в государственной (кроме федеральной) собственности
		Или СчетПервогоПорядка = "407" // Счета негосударственных организаций
		Или СчетПервогоПорядка = "408" // Прочие счета
		Или СчетПервогоПорядка = "409" // Средства в расчетах

КонецФункции

Функция ЭтоСчетФизическогоЛица(НомерСчета)

	СчетВторогоПорядка = Лев(НомерСчета, 5);
	
	Возврат СчетВторогоПорядка = "40817"
		Или СчетВторогоПорядка = "40820"

КонецФункции

Функция ЭтоОперацияВыплатаИсполнителюПоГПХ(НомерСчета, ИсходнаяСтрока)

	Если Не Лев(НомерСчета, 5) = "40817"
		И Не Лев(НомерСчета, 5) = "47422"
		И Не Лев(НомерСчета, 5) = "40820"
		И Не ЭтоПассивныйСчетНезавершенныхРасчетов(НомерСчета) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПроверяемыеФразы = Новый Массив;
	
	СписокПодстрок = Новый Массив;
	СписокПодстрок.Добавить(НСтр("ru = 'гражданск'"));
	СписокПодстрок.Добавить(НСтр("ru = 'правово'"));
	СписокПодстрок.Добавить(НСтр("ru = 'характер'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок);
	
	СписокПодстрок = Новый Массив;
	СписокПодстрок.Добавить(НСтр("ru = 'гражданск'"));
	СписокПодстрок.Добавить(НСтр("ru = 'правово'"));
	СписокПодстрок.Добавить(НСтр("ru = 'дог'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок);
	
	Если НайденаФразаВМассивеИзСпискаПодстрок(ИсходнаяСтрока, ПроверяемыеФразы, 1, 0) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат СтрНайти(ИсходнаяСтрока, НСтр("ru = 'ГПХ'")) > 0
		Или СтрНайти(ВРег(ИсходнаяСтрока), СтрШаблон(" %1 ", НСтр("ru = 'ГПХ'"))) > 0

КонецФункции

Функция ЭтоОперацияВыплатыПоИсполнительномуЛисту(НомерСчета, ИсходнаяСтрока)

	Если Не Лев(НомерСчета, 5) = "40817"
		И Не Лев(НомерСчета, 5) = "40820"
		И Не ЭтоПассивныйСчетНезавершенныхРасчетов(НомерСчета) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат СтрНайти(НРег(ИсходнаяСтрока), НСтр("ru = 'алимент'")) > 0

КонецФункции

Функция ЭтоОперацияВыплатаЗарплаты(ИсходнаяСтрока, КодНазначения)

	ПроверяемыеФразы = Новый Массив;
	
	СписокПодстрок = Новый Массив;
	СписокПодстрок.Добавить("заработн");
	СписокПодстрок.Добавить("плат");
	
	ПроверяемыеФразы.Добавить(СписокПодстрок);
	
	СписокПодстрок = Новый Массив;
	СписокПодстрок.Добавить("зар.");
	СписокПодстрок.Добавить("плат");
	
	ПроверяемыеФразы.Добавить(СписокПодстрок);
	
	СписокПодстрок = Новый Массив;
	СписокПодстрок.Добавить("зараб.");
	СписокПодстрок.Добавить("плат");
	
	ПроверяемыеФразы.Добавить(СписокПодстрок);
	
	СписокПодстрок = Новый Массив;
	СписокПодстрок.Добавить("оплат");
	СписокПодстрок.Добавить("труда");
	СписокПодстрок.Добавить("по дог");
	
	ПроверяемыеФразы.Добавить(СписокПодстрок);
	
	СписокПодстрок = Новый Массив;
	СписокПодстрок.Добавить("лист");
	СписокПодстрок.Добавить("нетрудоспособ");
	
	ПроверяемыеФразы.Добавить(СписокПодстрок);
	
	СписокПодстрок = Новый Массив;
	СписокПодстрок.Добавить("расчет");
	СписокПодстрок.Добавить("увольнени");
	
	ПроверяемыеФразы.Добавить(СписокПодстрок);
	
	СписокПодстрок = Новый Массив;
	СписокПодстрок.Добавить("компенсаци");
	СписокПодстрок.Добавить("увольнени");
	
	ПроверяемыеФразы.Добавить(СписокПодстрок);
	
	СписокПодстрок = Новый Массив;
	СписокПодстрок.Добавить("пособи");
	СписокПодстрок.Добавить("по уходу за ребенком");
	
	ПроверяемыеФразы.Добавить(СписокПодстрок);
	
	Если НайденаФразаВМассивеИзСпискаПодстрок(ИсходнаяСтрока, ПроверяемыеФразы, 1, 0) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат СтрНайти(НРег(ИсходнаяСтрока), "з/п") > 0
		Или СтрНайти(НРег(ИсходнаяСтрока), "з.п") > 0
		Или СтрНайти(НРег(ИсходнаяСтрока), "зпл") > 0
		Или СтрНайти(НРег(ИсходнаяСтрока), "зарплат") > 0
		Или СтрНайти(НРег(ИсходнаяСтрока), "по трудовому договору") > 0
		Или СтрНайти(НРег(ИсходнаяСтрока), "оклад") > 0
		Или СтрНайти(НРег(ИсходнаяСтрока), "отпуск") > 0
		Или СтрНайти(НРег(ИсходнаяСтрока), "преми") > 0
		Или СтрНайти(НРег(ИсходнаяСтрока), "больничн") > 0
		Или СтрНайти(НРег(ИсходнаяСтрока), "бонус") > 0
		Или (СтрНайти(НРег(ИсходнаяСтрока), "аванс") > 0
		И КодНазначения = "1");

КонецФункции

Функция ЭтоПлатежПоВедомости(ИсходнаяСтрока)

	Возврат СтрНайти(НРег(ИсходнаяСтрока), "реестр") > 0
		Или СтрНайти(НРег(ИсходнаяСтрока), "ведомост") > 0;

КонецФункции

Функция ЭтоОперацияЭквайринга(НомерСчета, ИсходнаяСтрока)

	Если ЭтоЭквайрингПравилоПервое(НомерСчета, ИсходнаяСтрока) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЭтоЭквайрингПравилоВторое(НомерСчета, ИсходнаяСтрока) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЭтоЭквайрингПравилоТретье(НомерСчета, ИсходнаяСтрока) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЭтоЭквайрингПравилоЧетвертое(НомерСчета, ИсходнаяСтрока) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЭтоЭквайрингПравилоПятое(НомерСчета, ИсходнаяСтрока) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЭтоЭквайрингПравилоШестое(НомерСчета, ИсходнаяСтрока) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПодстрокиТЭ = Новый Массив; // торговый эквайринг
	ПодстрокиТЭ.Добавить("по");
	ПодстрокиТЭ.Добавить("дог");
	ПодстрокиТЭ.Добавить("тэ");
	
	Возврат НайденаФразаИзСпискаПодстрок(ИсходнаяСтрока, ПодстрокиТЭ, 1, 0);

КонецФункции

Функция ЭтоЭквайрингПравилоПервое(НомерСчета, ИсходнаяСтрока)

	Если Не ЭтоАктивныйСчетНезавершенныхРасчетов(НомерСчета)
		И Не ЭтоПассивныйСчетНезавершенныхРасчетов(НомерСчета) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СтрНайти(НРег(ИсходнаяСтрока), "займ") > 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПроверяемыеФразы = Новый Массив;
	
	СписокПодстрок1 = Новый Массив;
	СписокПодстрок1.Добавить(НСтр("ru = 'комис'"));
	СписокПодстрок1.Добавить(НСтр("ru = 'терминал'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок1);
	
	СписокПодстрок2 = Новый Массив;
	СписокПодстрок2.Добавить(НСтр("ru = 'комис'"));
	СписокПодстрок2.Добавить(НСтр("ru = 'тсп'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок2);
	
	// "сумма возмещения" и "комис"
	СписокПодстрок3 = Новый Массив;
	СписокПодстрок3.Добавить(НСтр("ru = 'сумм'"));
	СписокПодстрок3.Добавить(НСтр("ru = 'возм'"));
	СписокПодстрок3.Добавить(НСтр("ru = 'комис'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок3);
	
	// "перечисление по договору" и "комис"
	СписокПодстрок4 = Новый Массив;
	СписокПодстрок4.Добавить(НСтр("ru = 'перечислени'"));
	СписокПодстрок4.Добавить(НСтр("ru = 'по дог'"));
	СписокПодстрок4.Добавить(НСтр("ru = 'комис'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок4);
	
	// "перевод принятых денежных средств по договору" и "комис"
	СписокПодстрок5 = Новый Массив;
	СписокПодстрок5.Добавить(НСтр("ru = 'перевод принятых'"));
	СписокПодстрок5.Добавить(НСтр("ru = 'средств'"));
	СписокПодстрок5.Добавить(НСтр("ru = 'по дог'"));
	СписокПодстрок5.Добавить(НСтр("ru = 'комис'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок5);
	
	// "оплата по договору" и "MISC комиссия"
	СписокПодстрок6 = Новый Массив;
	СписокПодстрок6.Добавить(НСтр("ru = 'оплат'"));
	СписокПодстрок6.Добавить(НСтр("ru = 'по дог'"));
	СписокПодстрок6.Добавить(НСтр("ru = 'misc комиссия'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок6);
	
	// "перевод средств по договору" и "по реестру операций"
	СписокПодстрок7 = Новый Массив;
	СписокПодстрок7.Добавить(НСтр("ru = 'перевод'"));
	СписокПодстрок7.Добавить(НСтр("ru = 'средств'"));
	СписокПодстрок7.Добавить(НСтр("ru = 'по дог'"));
	СписокПодстрок7.Добавить(НСтр("ru = 'по реестр'"));
	СписокПодстрок7.Добавить(НСтр("ru = 'операц'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок7);
	
	СписокПодстрок8 = Новый Массив;
	СписокПодстрок8.Добавить(НСтр("ru = 'расчеты по дог'"));
	СписокПодстрок8.Добавить(НСтр("ru = 'комис'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок8);
	
	Если НайденаФразаВМассивеИзСпискаПодстрок(ИсходнаяСтрока, ПроверяемыеФразы, 1, 0) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат СтрНайти(НРег(ИсходнаяСтрока), "эквайр") > 0
		Или СтрНайти(НРег(ИсходнаяСтрока), "мерчант") > 0;

КонецФункции

Функция ЭтоЭквайрингПравилоВторое(НомерСчета, ИсходнаяСтрока)

	Если Не ЭтоАктивныйСчетНезавершенныхРасчетов(НомерСчета)
		И Не ЭтоПассивныйСчетНезавершенныхРасчетов(НомерСчета) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПроверяемыеФразы = Новый Массив;
	
	// начинается со слова "возм"
	СписокПодстрок1 = Новый Массив;
	СписокПодстрок1.Добавить(НСтр("ru = 'возм'"));
	СписокПодстрок1.Добавить(НСтр("ru = 'к.'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок1);
	
	СписокПодстрок2 = Новый Массив;
	СписокПодстрок2.Добавить(НСтр("ru = 'возм'"));
	СписокПодстрок2.Добавить(НСтр("ru = 'комис'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок2);
	
	СписокПодстрок3 = Новый Массив;
	СписокПодстрок3.Добавить(НСтр("ru = 'возм'"));
	СписокПодстрок3.Добавить(НСтр("ru = 'ком.'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок3);
	
	СписокПодстрок4 = Новый Массив;
	СписокПодстрок4.Добавить(НСтр("ru = 'возм'"));
	СписокПодстрок4.Добавить(НСтр("ru = 'удержано'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок4);
	
	Если НайденаФразаВМассивеИзСпискаПодстрок(ИсходнаяСтрока, ПроверяемыеФразы, 1, 0) Тогда
			Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

Функция ЕстьСуммаКомиссииВНазначении(НазначениеПлатежа, СуммаКомиссии) Экспорт

	Для Каждого ТекущийШаблон Из ШаблоныФорматаСуммы() Цикл
		
		Для Каждого ТекущийСимвол Из СимволыВСумме() Цикл
			
			СуммаСтрокой = Формат(СуммаКомиссии, СтрШаблон(ТекущийШаблон, ТекущийСимвол));
			
			Если СтрНайти(НазначениеПлатежа, СуммаСтрокой) Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	СуммаКомиссииСтрокой = Строка(Цел(СуммаКомиссии));
	
	Если СтрНайти(НазначениеПлатежа, СуммаКомиссииСтрокой) Тогда
		Возврат Истина;
	КонецЕсли;
	
	СуммаКомиссииСтрокой = Формат(Цел(СуммаКомиссии), "ЧГ=0");
	
	Если СтрНайти(НазначениеПлатежа, СуммаКомиссииСтрокой) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

Функция ЭтоЭквайрингПравилоТретье(НомерСчета, ИсходнаяСтрока)

	Если Не Лев(НомерСчета, 5) = "30302" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// "расчеты по опер. безнал оплаты с исп. БК"
	СписокПодстрок = Новый Массив;
	СписокПодстрок.Добавить(НСтр("ru = 'расчет'"));
	СписокПодстрок.Добавить(НСтр("ru = 'по опер'"));
	СписокПодстрок.Добавить(НСтр("ru = 'безнал'"));
	СписокПодстрок.Добавить(НСтр("ru = 'бк'"));
	
	Возврат НайденаФразаИзСпискаПодстрок(ИсходнаяСтрока, СписокПодстрок, 1, 0);

КонецФункции

Функция ЭтоЭквайрингПравилоЧетвертое(НомерСчета, ИсходнаяСтрока)

	Если Не Лев(НомерСчета, 5) = "47422" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПроверяемыеФразы = Новый Массив;
	
	// "//реестр//" и "перечисление денежных средств по договору НЭК"
	СписокПодстрок1 = Новый Массив;
	СписокПодстрок1.Добавить(НСтр("ru = '//реестр//'"));
	СписокПодстрок1.Добавить(НСтр("ru = 'перечис'"));
	СписокПодстрок1.Добавить(НСтр("ru = 'средств'"));
	СписокПодстрок1.Добавить(НСтр("ru = 'дог'"));
	СписокПодстрок1.Добавить(НСтр("ru = 'нэк'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок1);
	
	// "возмещение за", и "комиссия", и "операции возврата/отмены"
	СписокПодстрок2 = Новый Массив;
	СписокПодстрок2.Добавить(НСтр("ru = 'возм'"));
	СписокПодстрок2.Добавить(НСтр("ru = 'комис'"));
	СписокПодстрок2.Добавить(НСтр("ru = 'возв'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок2);
	
	Возврат Ложь;

КонецФункции

Функция ЭтоЭквайрингПравилоПятое(НомерСчета, ИсходнаяСтрока)

	Если Не Лев(НомерСчета, 5) = "40907" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// "//реестр// кол-во" и "с учетом взаимозачет. вознагр."
	СписокПодстрок = Новый Массив;
	СписокПодстрок.Добавить(НСтр("ru = '//реестр//'"));
	СписокПодстрок.Добавить(НСтр("ru = 'кол-во'"));
	СписокПодстрок.Добавить(НСтр("ru = 'взаимозачет'"));
	СписокПодстрок.Добавить(НСтр("ru = 'вознагр'"));
	
	Возврат НайденаФразаИзСпискаПодстрок(ИсходнаяСтрока, СписокПодстрок, 1, 0);

КонецФункции

Функция ЭтоЭквайрингПравилоШестое(НомерСчета, ИсходнаяСтрока)

	ПроверяемыеФразы = Новый Массив;
	
	// "перевод средств по договору N ИЭ-", и "по реестру операций от", и "сумма комиссии"
	СписокПодстрок1 = Новый Массив;
	СписокПодстрок1.Добавить(НСтр("ru = 'перевод средств по дог'"));
	СписокПодстрок1.Добавить(НСтр("ru = 'иэ'"));
	СписокПодстрок1.Добавить(НСтр("ru = 'по реестру операций от'"));
	СписокПодстрок1.Добавить(НСтр("ru = 'сумма комиссии'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок1);
	
	// "перевод средств по договору", и "(FOLDS) по реестру операций от", и "сумма комиссии"
	СписокПодстрок2 = Новый Массив;
	СписокПодстрок2.Добавить(НСтр("ru = 'перевод средств по дог'"));
	СписокПодстрок2.Добавить(НСтр("ru = '(folds) по реестру операций от'"));
	СписокПодстрок2.Добавить(НСтр("ru = 'сумма комиссии'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок2);
	
	// "зачисление средств по операциям эквайринга. мерчант N", и "дата реестра", и "комиссия", и "возврат покупки"
	СписокПодстрок3 = Новый Массив;
	СписокПодстрок3.Добавить(НСтр("ru = 'зачисление средств по операциям эквайринга'"));
	СписокПодстрок3.Добавить(НСтр("ru = 'мерчант'"));
	СписокПодстрок3.Добавить(НСтр("ru = 'дата реестра'"));
	СписокПодстрок3.Добавить(НСтр("ru = 'комиссия'"));
	СписокПодстрок3.Добавить(НСтр("ru = 'возврат покупки'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок3);
	
	// "зачисление средств по операциям с МБК (на основании реестров платежей). мерчант N", и "дата реестра", и "комиссия", и "возврат покупки"
	СписокПодстрок4 = Новый Массив;
	СписокПодстрок4.Добавить(НСтр("ru = 'зачисление средств по операциям с мбк (на основании реестров платежей)'"));
	СписокПодстрок4.Добавить(НСтр("ru = 'мерчант'"));
	СписокПодстрок4.Добавить(НСтр("ru = 'дата реестра'"));
	СписокПодстрок4.Добавить(НСтр("ru = 'комиссия'"));
	СписокПодстрок4.Добавить(НСтр("ru = 'возврат покупки'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок4);
	
	// "возмещение по торговому эквайрингу мерчант", и "комиссия", и "терминал", и "возврат покупки"
	СписокПодстрок5 = Новый Массив;
	СписокПодстрок5.Добавить(НСтр("ru = 'возмещение по торговому эквайрингу мерчант'"));
	СписокПодстрок5.Добавить(НСтр("ru = 'комиссия'"));
	СписокПодстрок5.Добавить(НСтр("ru = 'терминал'"));
	СписокПодстрок5.Добавить(НСтр("ru = 'возврат покупки'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок5);
	
	// "оплата товаров и услуг по ТСТ", и "реестр от", и "комиссия", и "возврат покупки по ТСТ"
	СписокПодстрок6 = Новый Массив;
	СписокПодстрок6.Добавить(НСтр("ru = 'оплата товаров и услуг по тст'"));
	СписокПодстрок6.Добавить(НСтр("ru = 'реестр от'"));
	СписокПодстрок6.Добавить(НСтр("ru = 'комиссия'"));
	СписокПодстрок6.Добавить(НСтр("ru = 'возврат покупки по тст'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок6);
	
	// "оплата товаров и услуг по банковским картам (МПК) согласно реестра торг. операций. кол-во операций:", и "удержано по операциям возврата:", и "сумма комиссии"
	СписокПодстрок7 = Новый Массив;
	СписокПодстрок7.Добавить(НСтр("ru = 'оплата товаров и услуг по банковским картам (мпк) согласно реестра торг. операций. кол-во операций:'"));
	СписокПодстрок7.Добавить(НСтр("ru = 'удержано по операциям возврата:'"));
	СписокПодстрок7.Добавить(НСтр("ru = 'сумма комиссии'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок7);
	
	// "эквайринг за", и "комиссия", и "возврат:", и "возврат др. ТСТ:", и "реестр:"
	СписокПодстрок8 = Новый Массив;
	СписокПодстрок8.Добавить(НСтр("ru = 'эквайринг за'"));
	СписокПодстрок8.Добавить(НСтр("ru = 'комиссия'"));
	СписокПодстрок8.Добавить(НСтр("ru = 'возврат:'"));
	СписокПодстрок8.Добавить(НСтр("ru = 'возврат др. тст:'"));
	СписокПодстрок8.Добавить(НСтр("ru = 'реестр:'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок8);
	
	// "эквайринг, по мерчанту", и "удержано ком", и "возвр"
	СписокПодстрок9 = Новый Массив;
	СписокПодстрок9.Добавить(НСтр("ru = 'эквайринг, по мерчанту'"));
	СписокПодстрок9.Добавить(НСтр("ru = 'удержано ком'"));
	СписокПодстрок9.Добавить(НСтр("ru = 'возвр'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок9);
	
	// "по принятым платежам с", и "в т.ч. усл. банка:", и "согласно эл. реестру"
	СписокПодстрок10 = Новый Массив;
	СписокПодстрок10.Добавить(НСтр("ru = 'по принятым платежам с'"));
	СписокПодстрок10.Добавить(НСтр("ru = 'в т.ч. усл. банка:'"));
	СписокПодстрок10.Добавить(НСтр("ru = 'согласно эл. реестру'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок10);
	
	// "терминал N", и "дата операций", и "комиссия банка"
	СписокПодстрок11 = Новый Массив;
	СписокПодстрок11.Добавить(НСтр("ru = 'терминал'"));
	СписокПодстрок11.Добавить(НСтр("ru = 'дата операций'"));
	СписокПодстрок11.Добавить(НСтр("ru = 'комиссия банка'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок11);
	
	// "возмещение ден. ср-в ТСП за" и "комиссия банка"
	СписокПодстрок12 = Новый Массив;
	СписокПодстрок12.Добавить(НСтр("ru = 'возмещение ден. ср-в тсп за'"));
	СписокПодстрок12.Добавить(НСтр("ru = 'комиссия банка'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок12);
	
	// "сумма возмещения", и "по договору N", и "(TTR за", и "комиссия"
	СписокПодстрок13 = Новый Массив;
	СписокПодстрок13.Добавить(НСтр("ru = 'сумма возмещения'"));
	СписокПодстрок13.Добавить(НСтр("ru = 'по дог'"));
	СписокПодстрок13.Добавить(НСтр("ru = '(ttr за'"));
	СписокПодстрок13.Добавить(НСтр("ru = 'комиссия'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок13);
	
	// "возмещение ср-в по операциям эквайринга за", и "согласно договору", и "комиссия по операциям"
	СписокПодстрок14 = Новый Массив;
	СписокПодстрок14.Добавить(НСтр("ru = 'возмещение ср-в по операциям эквайринга за'"));
	СписокПодстрок14.Добавить(НСтр("ru = 'согласно дог'"));
	СписокПодстрок14.Добавить(НСтр("ru = 'комиссия по операциям'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок14);
	
	// "возмещение ден. ср-в по дог. экв.", и "оборот:", и "комиссия"
	СписокПодстрок15 = Новый Массив;
	СписокПодстрок15.Добавить(НСтр("ru = 'возмещение ден. ср-в по дог. экв.'"));
	СписокПодстрок15.Добавить(НСтр("ru = 'оборот:'"));
	СписокПодстрок15.Добавить(НСтр("ru = 'комиссия'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок15);
	
	// "общая сумма к возмещению", и "комиссия за осущ. расч.", и "RURвозмещение ден. ср-в по дог. экв.", и "оборот:", и "комиссия:"
	СписокПодстрок16 = Новый Массив;
	СписокПодстрок16.Добавить(НСтр("ru = 'общая сумма к возмещению'"));
	СписокПодстрок16.Добавить(НСтр("ru = 'комиссия за осущ. расч.'"));
	СписокПодстрок16.Добавить(НСтр("ru = 'rurвозмещение ден. ср-в по дог. экв.'"));
	СписокПодстрок16.Добавить(НСтр("ru = 'оборот:'"));
	СписокПодстрок16.Добавить(НСтр("ru = 'комиссия:'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок16);
	
	// "возм. по дог. экв. N", и "об.:", и "ком.:"
	СписокПодстрок17 = Новый Массив;
	СписокПодстрок17.Добавить(НСтр("ru = 'возм. по дог. экв.'"));
	СписокПодстрок17.Добавить(НСтр("ru = 'об.:'"));
	СписокПодстрок17.Добавить(НСтр("ru = 'ком.:'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок17);
	
	// "зачисление денежных средств по договору об обслуживании держателей платежных карт по терминалу" и "сумма комиссии"
	СписокПодстрок18 = Новый Массив;
	СписокПодстрок18.Добавить(НСтр("ru = 'зачисление денежных средств по договору об обслуживании держателей платежных карт по терминалу'"));
	СписокПодстрок18.Добавить(НСтр("ru = 'сумма комиссии'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок18);
	
	// "перечисление по договору N", и "с ТСП ИНН", и "комиссия банка"
	// или "перечисление по договору с ТСП" и "комиссия банка"
	СписокПодстрок19 = Новый Массив;
	СписокПодстрок19.Добавить(НСтр("ru = 'перечисление по дог'"));
	СписокПодстрок19.Добавить(НСтр("ru = 'тсп'"));
	СписокПодстрок19.Добавить(НСтр("ru = 'комиссия банка'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок19);
	
	// "расчеты по дог.", и "за период с", и "сумма оплат", и "сумма возвратов", и "сумма отмены возвратов", и "комиссия"
	СписокПодстрок20 = Новый Массив;
	СписокПодстрок20.Добавить(НСтр("ru = 'расчеты по дог'"));
	СписокПодстрок20.Добавить(НСтр("ru = 'за период с'"));
	СписокПодстрок20.Добавить(НСтр("ru = 'сумма оплат'"));
	СписокПодстрок20.Добавить(НСтр("ru = 'сумма возвратов'"));
	СписокПодстрок20.Добавить(НСтр("ru = 'сумма отмены возвратов'"));
	СписокПодстрок20.Добавить(НСтр("ru = 'комиссия'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок20);
	
	// "возмещение по терминалам:" и "в т.ч. комиссия"
	СписокПодстрок21 = Новый Массив;
	СписокПодстрок21.Добавить(НСтр("ru = 'возмещение по терминалам:'"));
	СписокПодстрок21.Добавить(НСтр("ru = 'в т.ч. комиссия'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок21);
	
	// "расч по дог. б/н опер." и "ком банка"
	СписокПодстрок22 = Новый Массив;
	СписокПодстрок22.Добавить(НСтр("ru = 'расч по дог. б/н опер.'"));
	СписокПодстрок22.Добавить(НСтр("ru = 'ком банка'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок22);
	
	// "возмещение по ТСО по сумме", и "сумма комиссии", и "сумма возмещения", и "дата расчета", и "договор"
	СписокПодстрок23 = Новый Массив;
	СписокПодстрок23.Добавить(НСтр("ru = 'возмещение по тсо по сумме'"));
	СписокПодстрок23.Добавить(НСтр("ru = 'сумма комиссии'"));
	СписокПодстрок23.Добавить(НСтр("ru = 'сумма возмещения'"));
	СписокПодстрок23.Добавить(НСтр("ru = 'дата расчета'"));
	СписокПодстрок23.Добавить(НСтр("ru = 'дог'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок23);
	
	// "перечисление денежных средств по договору MRC/", и "комиссия", и "выплата за"
	СписокПодстрок24 = Новый Массив;
	СписокПодстрок24.Добавить(НСтр("ru = 'перечисление денежных средств по договору mrc'"));
	СписокПодстрок24.Добавить(НСтр("ru = 'комиссия'"));
	СписокПодстрок24.Добавить(НСтр("ru = 'выплата за'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок24);
	
	// "платежи по дог.", и "принято", и "комиссия", и "удержана"
	СписокПодстрок25 = Новый Массив;
	СписокПодстрок25.Добавить(НСтр("ru = 'платежи по дог'"));
	СписокПодстрок25.Добавить(НСтр("ru = 'принято'"));
	СписокПодстрок25.Добавить(НСтр("ru = 'комиссия'"));
	СписокПодстрок25.Добавить(НСтр("ru = 'удержана'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок25);
	
	// "//реестр//", и "количество", и "перечисление денежных средств по договору", и "по реестру за"
	СписокПодстрок26 = Новый Массив;
	СписокПодстрок26.Добавить(НСтр("ru = '//реестр//'"));
	СписокПодстрок26.Добавить(НСтр("ru = 'количество'"));
	СписокПодстрок26.Добавить(НСтр("ru = 'перечисление денежных средств по дог'"));
	СписокПодстрок26.Добавить(НСтр("ru = 'по реестру за'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок26);
	
	// "перечисл. ден. ср-в с уч. упл. комис.", и "по дог. от", и "за пер. с"
	СписокПодстрок27 = Новый Массив;
	СписокПодстрок27.Добавить(НСтр("ru = 'перечисл. ден. ср-в с уч. упл. комис.'"));
	СписокПодстрок27.Добавить(НСтр("ru = 'по дог. от'"));
	СписокПодстрок27.Добавить(НСтр("ru = 'за пер. с'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок27);
	
	// "возврат денежных средств по эквайринговым операциям от" и "согласно договору"
	СписокПодстрок28 = Новый Массив;
	СписокПодстрок28.Добавить(НСтр("ru = 'возврат денежных средств по эквайринговым операциям от'"));
	СписокПодстрок28.Добавить(НСтр("ru = 'согласно договору'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок28);
	
	// "расчеты по договору N", и "по операции", и "по мерчанту"
	СписокПодстрок29 = Новый Массив;
	СписокПодстрок29.Добавить(НСтр("ru = 'расчеты по дог'"));
	СписокПодстрок29.Добавить(НСтр("ru = 'по операции'"));
	СписокПодстрок29.Добавить(НСтр("ru = 'по мерчанту'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок29);
	
	Если НайденаФразаВМассивеИзСпискаПодстрок(ИсходнаяСтрока, ПроверяемыеФразы, 1, 0) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат СтрНайти(НРег(ИсходнаяСтрока), "зачисление средств по терминалам эквайринга от") > 0
		Или СтрНайти(НРег(ИсходнаяСтрока), "возмещение средств по услуге эквайринга по реестру операций") > 0
		Или СтрНайти(НРег(ИсходнаяСтрока), "удержание средств по услуге интернет-эквайринга по реестру операций от") > 0;

КонецФункции

Функция НайденаФразаВМассивеИзСпискаПодстрок(ИсходнаяСтрока, МассивСпискаПодстрок, ПозицияПодстроки, Индекс)

	Для Каждого СписокПодстрок Из МассивСпискаПодстрок Цикл
		
		ТекущаяПозицияПодстроки = ПозицияПодстроки;
		ТекущийИндекс = Индекс;
		
		Если НайденаФразаИзСпискаПодстрок(ИсходнаяСтрока, СписокПодстрок, ТекущаяПозицияПодстроки, ТекущийИндекс) Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;

КонецФункции

Процедура ЗапуститьЗаполнениеДанныхКонтрагента(Контрагент, ДанныеКонтрагента, Дата)

	Если ПустаяСтрока(ДанныеКонтрагента.ИНН) Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоЮрЛицо = ОбщегоНазначенияУТКлиентСервер.ЭтоЮрЛицо(ДанныеКонтрагента.ЮрФизЛицо);
	
	Если ЭтоЮрЛицо
		И Не РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(ДанныеКонтрагента.ИНН, ЭтоЮрЛицо, "") Тогда
		Возврат;
	КонецЕсли;
	
	ВозможноПодключение = ПартнерыИКонтрагентыЛокализацияКлиентСервер.ЗаполнениеРеквизитовПоДаннымИННВозможно(
		Истина,
		ПартнерыИКонтрагентыЛокализация.НастройкиПодключенияКСервисуИППЗаданы(),
		ДанныеКонтрагента.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо,
		ДанныеКонтрагента.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель,
		Ложь);
	
	Если Не ВозможноПодключение Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Ссылка", Контрагент);
	ПараметрыПроцедуры.Вставить("ИНН", ДанныеКонтрагента.ИНН);
	ПараметрыПроцедуры.Вставить("ЭтоЮридическоеЛицо", ЭтоЮрЛицо);
	ПараметрыПроцедуры.Вставить("Дата", Дата);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru='Загрузка выписки банка: заполнение данных контрагена по ИНН'");
	ПараметрыВыполнения.КлючФоновогоЗадания = Контрагент.УникальныйИдентификатор();

	Попытка
		Результат = ДлительныеОперации.ВыполнитьВФоне(
			"КлиентБанкСервер.ЗаполнитьДанныеНовогоКонтрагента",
			ПараметрыПроцедуры,
			ПараметрыВыполнения);
	Исключение
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Длительные операции.Ошибка выполнения'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , ,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

КонецПроцедуры

Функция СимволыВСумме()
	
	Массив = Новый Массив;
	Массив.Добавить(",");
	Массив.Добавить(":");
	Массив.Добавить(".");
	Массив.Добавить("-");
	Массив.Добавить("=");
	
	Возврат Массив;
	
КонецФункции

Функция ШаблоныФорматаСуммы()
	
	Шаблон = Новый Массив;
	Шаблон.Добавить("ЧРД=%1");
	Шаблон.Добавить("ЧРД=%1; ЧГ=0");
	
	Возврат Шаблон;
	
КонецФункции

#КонецОбласти

//-- Локализация

#КонецОбласти
