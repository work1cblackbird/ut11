#Область ПрограммныйИнтерфейс

#Область МетодыДляУчетногоМеханизма

// Функция-конструктор параметров учетного механизма.
//
// Возвращаемое значение:
//  Структура - со свойствами:
//     * НезависимыеРегистры - Массив Из ОбъектМетаданныхРегистрСведений -
//     * ПодчиненныеРегистры - Массив Из ОбъектМетаданныхРегистрСведений -
//                           - Массив Из ОбъектМетаданныхРегистрНакопления -
//                           - Массив Из ОбъектМетаданныхРегистрБухгалтерии -
//                           - Массив Из ОбъектМетаданныхРегистрРасчета  - список подчиненных регистратору регистров, который записываются учетным механизмом.
//     * КонтрольныеРегистрыИзменений - Массив Из ОбъектМетаданныхРегистрСведений -
//                                    - Массив Из ОбъектМетаданныхРегистрНакопления -
//                                    - Массив Из ОбъектМетаданныхРегистрБухгалтерии -
//                                    - Массив Из ОбъектМетаданныхРегистрРасчета - список подчиненных регистратору регистров,
//                                                                                 по которым необходимо контролировать изменения.
//     * КонтрольныеРегистрыЗаданий - Массив Из ОбъектМетаданныхРегистрСведений -
//                                  - Массив Из ОбъектМетаданныхРегистрНакопления -
//                                  - Массив Из ОбъектМетаданныхРегистрБухгалтерии -
//                                  - Массив Из ОбъектМетаданныхРегистрРасчета - список подчиненных регистратору регистров,
//                                                                               по изменению которых необходимо формировать задания.
//     * КонтрольныеРегистрыДатаЗапрета - Массив Из ОбъектМетаданныхРегистрСведений -
//                                  - Массив Из ОбъектМетаданныхРегистрНакопления -
//                                  - Массив Из ОбъектМетаданныхРегистрБухгалтерии -
//                                  - Массив Из ОбъектМетаданныхРегистрРасчета - список регистров, по которым необходимо проверить дату
//                                                                              запрета изменений с помощью таблицы изменений.
//     * ЕстьПроизводныеДвижения - Булево - формируются вторичные движения используя данные уже записанных регистров,
//                                          сделанных в том числе другими механизмами.
//
Функция ПараметрыУчетногоМеханизма() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("НезависимыеРегистры",            Новый Массив);
	Параметры.Вставить("ПодчиненныеРегистры",            Новый Массив);
	Параметры.Вставить("КонтрольныеРегистрыИзменений",   Новый Массив);
	Параметры.Вставить("КонтрольныеРегистрыЗаданий",     Новый Массив);
	Параметры.Вставить("ЕстьПроизводныеДвижения",        Ложь);
	Параметры.Вставить("КонтрольныеРегистрыДатаЗапрета", Новый Массив);
	
	Возврат Параметры;
	
КонецФункции

// Функция возвращает учетные механизмы документа.
//
// Параметры:
//  Документ - ДокументМенеджер - менеджер документа для которого требуется получить учетные механизмы. 
//  
// Возвращаемое значение:
//  Массив Из Строка- содержит учетные механизмы документа.
//
Функция УчетныеМеханизмыДокумента(Документ) Экспорт 
	
	МеханизмыДокумента = Новый Массив;
	Документ.ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента);
	
	Возврат МеханизмыДокумента;
		
КонецФункции

// Загружает для записи данные в набор записей движений документа по указанному регистру.
//
// Параметры:
//  ТаблицыДляДвижений - Структура - список таблиц для движений, содержащий таблицу данных для указанного регистра,
//      с колонками соответствующие полям регистра и именем в формате "Таблица" + ИмяРегистра.
//  Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//  ИмяРегистра - Строка - имя регистра, данные которого необходимо загрузить.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, ИмяРегистра) Экспорт
	
	ИмяТаблицыДвижений = "Таблица" + ИмяРегистра;
	
	Если ТаблицыДляДвижений.Свойство(ИмяТаблицыДвижений)
		И ЗначениеЗаполнено(ТаблицыДляДвижений[ИмяТаблицыДвижений]) Тогда
		
		Движения[ИмяРегистра].Записывать = Истина;
		Движения[ИмяРегистра].Загрузить(ТаблицыДляДвижений[ИмяТаблицыДвижений]);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////
// Вызывается из процедур контроля изменений

// Проверяет есть ли записи по указанной таблице контроля.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  ИмяТаблицы - Строка - имя таблицы контроля.
//
// Возвращаемое значение:
//  Булево - Истина, если есть изменения по указанной таблице контроля.
//
Функция ЕстьЗаписиВТаблице(Документ, ИмяТаблицы) Экспорт
	
	ТаблицыКонтроля = Документ.ДополнительныеСвойства.ПроведениеДокументов.ТаблицыКонтроля;
	Возврат ТаблицыКонтроля.Свойство(ИмяТаблицы) И ТаблицыКонтроля[ИмяТаблицы].ЕстьЗаписиВТаблице;
	
КонецФункции

/////////////////////////////////////////
// Вызывается из набора записей регистров

// Проверяет необходимость контроля изменений движений по регистру.
//
// Параметры:
//  ДополнительныеСвойстваНабораЗаписей - Структура - дополнительные свойства набора записей.
//
// Возвращаемое значение:
//  Булево - Истина, если есть необходимости выполнения контроля изменений движений.
//
Функция КонтролироватьИзменения(ДополнительныеСвойстваНабораЗаписей) Экспорт
	
	ЭтоСверткаИБ = ДополнительныеСвойстваНабораЗаписей.Свойство("СверткаИБ") 
		И ДополнительныеСвойстваНабораЗаписей.СверткаИБ;
	
	Возврат ДополнительныеСвойстваНабораЗаписей.Свойство("ТаблицыКонтроля")
		И ДополнительныеСвойстваНабораЗаписей.Свойство("МенеджерВременныхТаблиц")
		И Не ЭтоСверткаИБ;
		
КонецФункции

// Проверяет необходимость рассчитывать результат изменений движений по регистру.
//
// Параметры:
//  ДополнительныеСвойстваНабораЗаписей - Структура - дополнительные свойства набора записей.
//
// Возвращаемое значение:
//  Булево - Истина, если есть необходимость выполнения расчета результата изменений движений.
//
Функция РассчитыватьИзменения(ДополнительныеСвойстваНабораЗаписей) Экспорт
	
	Возврат Не ЗначениеЗаполнено(ПараметрыСеанса.ПараметрыОбработчикаОбновления.РежимВыполнения)
		И ДополнительныеСвойстваНабораЗаписей.Свойство("РассчитыватьИзменения")
		И ДополнительныеСвойстваНабораЗаписей.РассчитыватьИзменения;
	
КонецФункции

// Проверяет принадлежит ли регистр записываемого набора записей к контрольным регистрам изменений.
//
// Параметры:
//  ДополнительныеСвойстваНабораЗаписей - Структура - дополнительные свойства набора записей.
//
// Возвращаемое значение:
//  Булево - Истина, если регистр записываемого набора записей является контрольным регистром изменений.
//
Функция ЭтоКонтрольныйРегистрИзменений(ДополнительныеСвойстваНабораЗаписей) Экспорт
	
	Возврат ДополнительныеСвойстваНабораЗаписей.Свойство("ЭтоКонтрольныйРегистрИзменений")
		И ДополнительныеСвойстваНабораЗаписей.ЭтоКонтрольныйРегистрИзменений;
	
КонецФункции

// Регистрирует таблицу контроля изменений для последующего использования.
//
// Параметры:
//  ДополнительныеСвойстваНабораЗаписей - Структура - дополнительные свойства набора записей
//  ИмяТаблицы - Строка - имя таблицы контроля
//  ЕстьЗаписиВТаблице - Булево - признак наличия записей в таблице
//  Параметры - Произвольный - передаваемые параметры таблицы.
//
Процедура ЗарегистрироватьТаблицуКонтроля(ДополнительныеСвойстваНабораЗаписей, ИмяТаблицы, ЕстьЗаписиВТаблице,
	Параметры = Неопределено) Экспорт
	
	ДополнительныеСвойстваНабораЗаписей.ТаблицыКонтроля.Вставить(ИмяТаблицы,
		Новый Структура("ЕстьЗаписиВТаблице, Параметры", ЕстьЗаписиВТаблице, Параметры));
	
КонецПроцедуры

// Регистрирует таблицу контроля изменений для последующего использования.
//
// Параметры:
//  ДополнительныеСвойстваДокумента - Структура - дополнительные свойства документа
//  ИмяТаблицы - Строка - имя таблицы контроля
//  ЕстьЗаписиВТаблице - Булево - признак наличия записей в таблице
//  Параметры - Произвольный - передаваемые параметры таблицы.
//
Процедура ЗарегистрироватьТаблицуКонтроляДокумента(ДополнительныеСвойстваДокумента, ИмяТаблицы, ЕстьЗаписиВТаблице,
	Параметры = Неопределено) Экспорт
	
	ДополнительныеСвойстваДокумента.ПроведениеДокументов.ТаблицыКонтроля.Вставить(ИмяТаблицы,
		Новый Структура("ЕстьЗаписиВТаблице, Параметры", ЕстьЗаписиВТаблице, Параметры));
	
КонецПроцедуры

#КонецОбласти

#Область СобытияДокумента

// Инициализирует в обработчике документа ПередЗаписью() свойства, необходимые для проведения документа.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  РежимЗаписи - РежимЗаписиДокумента - текущий режим проведения документа
//  РежимПроведения - РежимПроведенияДокумента - текущий режим проведения документа.
//
Процедура ПередЗаписьюДокумента(Документ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Документ.Проведен И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	КонецЕсли;
	
	Документ.ДополнительныеСвойства.Вставить("ПроведениеДокументов", Новый Структура);
	
	СвойстваДокумента = Новый ФиксированнаяСтруктура("ЭтоНовый, РежимЗаписи, РежимПроведения, Проведен",
		Документ.ЭтоНовый(),
		РежимЗаписи,
		РежимПроведения,
		Документ.Проведен);
	
	Документ.ДополнительныеСвойства.ПроведениеДокументов.Вставить("СвойстваДокумента", СвойстваДокумента);
	Документ.ДополнительныеСвойства.ПроведениеДокументов.Вставить("ТаблицыКонтроля", Новый Структура);
	
КонецПроцедуры

// Формирует в обработчике документа ПриЗаписи() движения по независимым регистрам, определенных в учетных документах.
//
// Параметры:
//  Документ - ДокументОбъект - Записываемый документ
//  Отказ - Булево - Признак отказа от записи.
//
Процедура ПриЗаписиДокумента(Документ, Отказ) Экспорт
	
	Если СвойстваДокумента(Документ).РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
		ЗаписатьДокумент(Документ, Отказ);
	ИначеЕсли СвойстваДокумента(Документ).РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		ЗаписатьДокумент(Документ, Отказ);
		ПровестиДокумент(Документ, Отказ, Неопределено);	
	КонецЕсли;
		
КонецПроцедуры

// Формирует в обработчике документа ОбработкаПроведения() движения по регистрам, определенных в учетных документах.
//
// Параметры:
//	Документ - ДокументОбъект - Записываемый документ.
//	Отказ - Булево - Признак отказа от записи.
//	ДопПараметры - см. ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения.
//
Процедура ОбработкаПроведенияДокумента(Документ, Отказ, ДопПараметры = Неопределено) Экспорт
	
	Если СвойстваДокумента(Документ).РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ПровестиДокумент(Документ, Отказ, ДопПараметры);
	КонецЕсли;
	
КонецПроцедуры

// Очищает в обработчике документа ОбработкаУдаленияПроведения() движения по подчиненным регистрам.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Отказ - Булево -  признак отказа от записи.
//
Процедура ОбработкаУдаленияПроведенияДокумента(Документ, Отказ) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ПроведениеЧерезОперацииМеханизмов

// Определяет необходимость сформировать таблицу для движений, необходимую для проведения документа по регистру.
//
// Параметры:
//  ИмяРегистра - Строка - имя регистра в конфигурации
//  Регистры - Структура - список имен регистров, для которых требуется формирование таблиц,
//      если список не указан, то всегда возвращается Истина.
//
// Возвращаемое значение:
//  Булево - Истина, если требуется формировать указанную таблицу.
//
Функция ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Экспорт
	
	Если ЗначениеЗаполнено(Регистры) Тогда
		Если ТипЗнч(Регистры) = Тип("Строка") Тогда
			СписокРегистров = Новый Структура(Регистры);
		Иначе
			СписокРегистров = Регистры;
		КонецЕсли;
		
		Возврат СписокРегистров.Свойство(ИмяРегистра);
	Иначе
		Возврат Истина
	КонецЕсли;
	
КонецФункции

// Проверяет наличие текста запроса для формирования указанной таблицы в списке запросов пакета.
//
// Параметры:
//  ИмяТаблицы - Строка - имя таблицы, наличие которой необходимо проверить
//  ТекстыЗапроса - СписокЗначений Из Строка- пакет запросов, где значениями являются тексты запросов,
//      а представлениями - имена формируемых таблиц.
//
// Возвращаемое значение:
//  Булево - Истина, если текст запроса таблицы есть в списке запросов пакета.
//
Функция ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Экспорт
	
	Если ТекстыЗапроса = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для каждого ТекстЗапроса Из ТекстыЗапроса Цикл
		Если НРег(ТекстЗапроса.Представление) = НРег(ИмяТаблицы) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Выполняет подготовку итоговых запросов отражения документа по учетным регистрам механизма на основании
//  - шаблонов отражения операций в регистрах
//  - запросов получения данных документа.
// Дополняет запрос отражения документа итоговыми текстами запросов отражения в регистрах.
//
// Параметры:
//  Запрос - Запрос - Запрос отражения документа. В него устанавливаются параметры.
//  ТекстыЗапроса - СписокЗначений Из Строка - Список текстов запроса отражения документа.
//  ТекстыШаблоновОтражения - Структура Из КлючИЗначение- Тексты шаблонов запросов отражения в учетных регистрах:
//     * Ключ - Строка - Имя регистра.
//     * Значение - Строка - Текст шаблона запроса.
//  ТекстыЗапросовДанныхДокумента - Структура Из КлючИЗначение- - Тексты запросов выборки данных из документов:
//     * Ключ - Строка - Имя таблицы, необходимой для отражения.
//     * Значение - Строка - Текст запроса выборки данных.
//  ТекстыШаблоновВременныхТаблиц - Структура Из КлючИЗначение- - Тексты запросов инициализации дополнительных временных таблиц для отражения:
//     * Ключ - Строка - Имя временной таблицы.
//     * Значение - Строка - Текст запроса инициализации дополнительной временной таблицы.
//
Процедура ДополнитьЗапросОтраженияДокумента(Запрос, ТекстыЗапроса, ТекстыШаблоновОтражения, ТекстыЗапросовДанныхДокумента, ТекстыШаблоновВременныхТаблиц = Неопределено) Экспорт
	
	Если ТекстыШаблоновОтражения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВременныеТаблицы = Новый Массив();
	
	// Проверим и подготовим запросы выборки данных из документов.
	Для каждого КлючИЗначение Из ТекстыЗапросовДанныхДокумента Цикл
		
		ТекстЗапроса = КлючИЗначение.Значение;
		
		Если СтрНайти(ТекстЗапроса, "//") <> 0 Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru = 'Текст запроса ""%1"" не должен содержать комментариев'"), КлючИЗначение.Ключ);
		КонецЕсли;
		
		Если ПозицияКлючевогоСлова("СГРУППИРОВАТЬ", ТекстЗапроса) <> Неопределено Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru = 'Текст запроса ""%1"" не должен содержать конструкцию СГРУППИРОВАТЬ'"), КлючИЗначение.Ключ);
		КонецЕсли;
		
		Если ПозицияКлючевогоСлова("РАЗЛИЧНЫЕ", ТекстЗапроса) <> Неопределено Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru = 'Текст запроса ""%1"" не должен содержать конструкцию РАЗЛИЧНЫЕ'"), КлючИЗначение.Ключ);
		КонецЕсли;
		
		Если ПозицияКлючевогоСлова("УПОРЯДОЧИТЬ", ТекстЗапроса) <> Неопределено Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru = 'Текст запроса ""%1"" не должен содержать конструкцию УПОРЯДОЧИТЬ'"), КлючИЗначение.Ключ);
		КонецЕсли;
		
		Если ПозицияКлючевогоСлова("ОБЪЕДИНИТЬ", ТекстЗапроса) <> Неопределено Тогда
			// Поместим результат объединения во временную таблицу.
			ИмяВременнойТаблицы = КлючИЗначение.Ключ;
			
			ТекстСозданияВременнойТаблицы =
			"ВЫБРАТЬ
			|	*
			|ПОМЕСТИТЬ ВременнаяТаблица
			|ИЗ
			|	&ВложенныйЗапрос КАК ВложенныйЗапрос
			|";
			ТекстСозданияВременнойТаблицы = СтрЗаменить(ТекстСозданияВременнойТаблицы, "ПОМЕСТИТЬ ВременнаяТаблица", СтрШаблон("ПОМЕСТИТЬ %1", ИмяВременнойТаблицы));
			ТекстСозданияВременнойТаблицы = СтрЗаменить(ТекстСозданияВременнойТаблицы, "&ВложенныйЗапрос", "(" + КлючИЗначение.Значение + ")");
			
			ТекстыЗапроса.Добавить(ТекстСозданияВременнойТаблицы, ИмяВременнойТаблицы, Истина);
			ВременныеТаблицы.Добавить(ИмяВременнойТаблицы);
			ТекстыЗапросовДанныхДокумента[КлючИЗначение.Ключ] = "";
		Иначе
			ТекстыЗапросовДанныхДокумента[КлючИЗначение.Ключ] = РазобратьТекстЗапроса(КлючИЗначение.Значение);
		КонецЕсли;
	КонецЦикла;
	
	// Подготовим тексты запросов дополнительных временных таблицы.
	Если ТекстыШаблоновВременныхТаблиц <> Неопределено Тогда
		Для каждого КлючИЗначение Из ТекстыШаблоновВременныхТаблиц Цикл
			ИмяВременнойТаблицы = КлючИЗначение.Ключ;
			ТекстЗапроса = КлючИЗначение.Значение;
			ПодготовитьТекстЗапросаОтраженияДокумента(ТекстЗапроса, ТекстыЗапросовДанныхДокумента);
			ВставитьПомещениеВоВременнуюТаблицу(ТекстЗапроса, ИмяВременнойТаблицы);
			ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяВременнойТаблицы, Истина);
		КонецЦикла;
	КонецЕсли;
	
	// Подготовим тексты запросов отражения операций в регистрах.
	Для каждого КлючИЗначение Из ТекстыШаблоновОтражения Цикл
		ИмяРегистра = КлючИЗначение.Ключ;
		ТекстОтражения = КлючИЗначение.Значение;
		
		ВыполнитьЗаменуПоПолномуСоответствию(ТекстОтражения, "ОБЪЕДИНИТЬ", "$");
		ФрагментыТекстаОтражения = СтрРазделить(ТекстОтражения, "$");
		Индекс = 0;
		Для каждого ФрагментОбъединения Из ФрагментыТекстаОтражения Цикл 
			ПодготовитьТекстЗапросаОтраженияДокумента(ФрагментыТекстаОтражения[Индекс], ТекстыЗапросовДанныхДокумента, ТекстыШаблоновВременныхТаблиц);
			Индекс = Индекс + 1;
		КонецЦикла;
		ТекстОтражения = СтрСоединить(ФрагментыТекстаОтражения, "ОБЪЕДИНИТЬ");
		
		ТекстыЗапроса.Добавить(ТекстОтражения, ИмяРегистра);
	КонецЦикла;
	
	// Удалим созданные для отражения временные таблицы.
	Для каждого ИмяВременнойТаблицы Из ВременныеТаблицы Цикл
		ТекстУдаления = СтрШаблон("УНИЧТОЖИТЬ %1", ИмяВременнойТаблицы);
		ТекстыЗапроса.Добавить(ТекстУдаления);
	КонецЦикла;
	
	// Удалим временные таблицы операции.
	Если ТекстыШаблоновВременныхТаблиц <> Неопределено Тогда
		Для каждого КлючИЗначение Из ТекстыШаблоновВременныхТаблиц Цикл
			ТекстУдаления = СтрШаблон("УНИЧТОЖИТЬ %1", КлючИЗначение.Ключ);
			ТекстыЗапроса.Добавить(ТекстУдаления);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет сборку запроса отражения конкретного документа по операции механизма.
//
// Параметры:
//  ТекстШаблонаОтражения - Строка - Текст запроса отражения операции.
//  ТекстыЗапросовДанныхДокумента - Структура Из КлючИЗначение - Тексты запросов выборки данных документа:
//     * Ключ - Строка - Имя таблицы, необходимой для отражения.
//     * Значение - Строка, Структура - Текст запроса выборки данных из документа.
//          Значение может быть как неразобранный текст запроса (значение типа Строка) или
//          текст запроса разобранный в структуру с помощью РазобратьТекстЗапроса().
//  ТекстыЗапросовВременныхТаблиц - Структура Из КлючИЗначение - Тексты запросов временных таблиц для проведения:
//     * Ключ - Строка - Имя временной таблицы.
//     * Значение - Строка - Текст запроса создания таблицы.
//
Процедура ПодготовитьТекстЗапросаОтраженияДокумента(ТекстШаблонаОтражения, ТекстыЗапросовДанныхДокумента, ТекстыЗапросовВременныхТаблиц = Неопределено) Экспорт
	
	Для каждого ТекстЗапросаДокумента Из ТекстыЗапросовДанныхДокумента Цикл
		
		Если СтрНайти(ТекстШаблонаОтражения, ТекстЗапросаДокумента.Ключ) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяТаблицыДанных = ТекстЗапросаДокумента.Ключ;
		ТекстЗапросаДанных = ТекстЗапросаДокумента.Значение;
		
		Если Не ЗначениеЗаполнено(ТекстЗапросаДанных) Тогда
			ТекстШаблонаОтражения = ЗапросОтраженияСВыборомДанныхИзВременнойТаблицы(ТекстШаблонаОтражения, ИмяТаблицыДанных);
		Иначе
			ТекстШаблонаОтражения = ЗапросОтраженияСВыборомДанныхИзДокумента(ТекстШаблонаОтражения, ИмяТаблицыДанных, ТекстЗапросаДанных);
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрНайти(ТекстШаблонаОтражения, "#") > 0 И ТекстыЗапросовВременныхТаблиц <> Неопределено Тогда
		// В качестве таблиц-источников данных также могут быть использованы созданные временные таблицы.
		Для каждого КлючИЗначение Из ТекстыЗапросовВременныхТаблиц Цикл
			ТекстШаблонаОтражения = ЗапросОтраженияСВыборомДанныхИзВременнойТаблицы(ТекстШаблонаОтражения, КлючИЗначение.Ключ);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// Инициализирует данные документа для проведения.
//
// Параметры:
//	Запрос - Запрос - запрос, хранящий параметры, используемые в списке запросов.
//	ТекстыЗапроса - СписокЗначений ИЗ Строка - список текстов запросов и их имен.
//	ДопПараметры - см. ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения
//
// Возвращаемое значение:
//	Структура Из КлючИЗначение - Таблицы проведения:
//			* Ключ - Строка - Имя таблицы
//			* Значение - ТаблицаЗначений - Таблица данных проведения
//	СписокЗначений Из Строка - список значений, содержащий тексты запросов и их имена.
//						Возвращается в случае, если свойство 'ПолучитьТекстыЗапроса' параметра ДопПараметры
//						имеет значение Истина.
//
Функция ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Если ДопПараметры.ПолучитьТекстыЗапроса Тогда
		ДанныеДокументаДляПроведения = ТекстыЗапроса;
	Иначе
		ДанныеДокументаДляПроведения = ИнициализироватьТаблицыДляДвижений(Запрос,
																			ТекстыЗапроса,
																			ДопПараметры.ТолькоПомеченные);
	КонецЕсли;
	
	Возврат ДанныеДокументаДляПроведения;
	
КонецФункции

// Возвращает параметры инициализации данных документа, используемые в механизмах проведения.
//
// Возвращаемое значение:
//	Структура - Структура со следующими ключами:
//		* ТолькоПомеченные - Булево - Признак, указывающий о необходимости получения только
//		                              тех таблиц проведения, у которых установлена пометка
//		                              в списке текстов запросов. Значение по умолчанию Ложь.
//		* ПолучитьТекстыЗапроса - Булево - Признак, указывающий о необходимости получения только
//		                                   текстов запроса проведения документа. Значение по умолчанию Ложь.
//		* МенеджерВременныхТаблиц - МенеджерВременныхТаблиц -
//		                          - Неопределено - Менеджер временных таблиц, содержащий таблицы,
//		                                           используемые для инициализации данных документа в
//		                                           процессе отражения в учете. Значение по умолчанию Неопределено.
//		* ДополнительныеСвойства - Неопределено - Дополнительные свойства документа, используемые для
//		                                          инициализации данных документа в процессе отражения в учете.
//		                                          Значение по умолчанию Неопределено.
//
Функция ДопПараметрыИнициализироватьДанныеДокументаДляПроведения() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ТолькоПомеченные",			Ложь);
	Результат.Вставить("ПолучитьТекстыЗапроса",		Ложь);
	Результат.Вставить("МенеджерВременныхТаблиц",	Неопределено);
	Результат.Вставить("ДополнительныеСвойства",	Неопределено);
	
	Возврат Результат;
	
КонецФункции

// Выбирает регистраторы, по которым движения записанные в регистр отличаются от тех, которые формируются запросом
// механизма проведения.
//
// Параметры:
//	ТекстыЗапросов - СписокЗначений Из Строка - Список текстов запросов отражения документа в регистре в учете и имена таблиц. 
//	ПолноеИмяРегистра - Строка - Полное имя регистра, как оно задается в языке запросов (например, РегистрНакопления.ТоварыНаСкладах)
//	ПолноеИмяДокумента - Строка - Полное имя документа, как оно задается в языке запросов (например, Документ.ПриобретениеТоваровУслуг).
//
// Возвращаемое значение:
//	Массив из ДокументСсылка - ссылки на документы, по которым нужно переформировать движения по регистру.
//
Функция РегистраторыДляПерепроведения(ТекстыЗапросов, ПолноеИмяРегистра, ПолноеИмяДокумента) Экспорт
	
	ЧастиИмениРегистра	= СтрРазделить(ПолноеИмяРегистра, ".", Ложь);
	ТипРегистра			= ЧастиИмениРегистра[0];
	
	Если ТипРегистра = "РегистрНакопления" Тогда
		
		МетаданныеРегистра = Метаданные.НайтиПоПолномуИмени(ПолноеИмяРегистра);
		
	Иначе
		ТекстИсключения = НСтр("ru = 'Функция пока не поддерживает работу с регистрами типа %ТипРегистра%.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ТипРегистра%", ТипРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	ТекстыВТ		= Новый Массив;
	ТекстыЗапроса	= Новый Массив;
	ПакетыЗапроса	= Новый Соответствие;
	
	Для Каждого ТекстЗапроса Из ТекстыЗапросов Цикл
		
		ТекстВыборки = ТекстЗапроса.Значение;
		
		Если СтрНайти(ТекстВыборки, "УНИЧТОЖИТЬ") > 0 Тогда //@query-part
			Продолжить;
		Иначе
			
			ИндексПакета	= ТекстыЗапроса.Количество();
			ИменаВТ			= ПакетыЗапроса.Получить(ИндексПакета);
			
			Если СтрНайти(ВРег(ТекстВыборки), "ПОМЕСТИТЬ") > 0 Тогда //@query-part
				
				ТекущееИмяВТ = ТекстЗапроса.Представление;
				
				Если ИменаВТ = Неопределено Тогда
					ПакетыЗапроса.Вставить(ИндексПакета, Новый Структура(ТекущееИмяВТ));
				Иначе
					ШаблонСтрокиПоиска = "%1 КАК"; //@query-part
					
					Для Каждого ИмяВТ Из ИменаВТ Цикл
						СтрокаПоиска	= СтрШаблон(ШаблонСтрокиПоиска, ИмяВТ.Ключ);
						НовоеИмяВТ		= ИмяВТ.Ключ + "_" + ИндексПакета;
						
						ТекстВыборки = СтрЗаменить(ТекстВыборки, СтрокаПоиска, НовоеИмяВТ);
					КонецЦикла;
					
					ИменаВТ.Вставить(ТекущееИмяВТ);
					ПакетыЗапроса.Вставить(ИндексПакета, ИменаВТ);
				КонецЕсли;
				
				ШаблонСтрокиПоиска	= "ПОМЕСТИТЬ %1"; //@query-part
				СтрокаПоиска		= СтрШаблон(ШаблонСтрокиПоиска, ТекущееИмяВТ);
				НовоеИмяВТ			= "ПОМЕСТИТЬ " + ТекущееИмяВТ + "_" + ИндексПакета; //@query-part
				
				ТекстВыборки = СтрЗаменить(ТекстВыборки, СтрокаПоиска, НовоеИмяВТ);
				
				ТекстыВТ.Добавить(ТекстВыборки);
				
			Иначе
				
				Если ИменаВТ <> Неопределено Тогда
					ШаблонСтрокиПоиска = "%1 КАК"; //@query-part
					
					Для Каждого ИмяВТ Из ИменаВТ Цикл
						СтрокаПоиска	= СтрШаблон(ШаблонСтрокиПоиска, ИмяВТ.Ключ);
						НовоеИмяВТ		= ИмяВТ.Ключ + "_" + ИндексПакета;
						
						ТекстВыборки = СтрЗаменить(ТекстВыборки, СтрокаПоиска, НовоеИмяВТ + " КАК "); //@query-part
					КонецЦикла;
				КонецЕсли;
				
				ТекстыЗапроса.Добавить(ТекстВыборки);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	РазделительЗапросов	= ОбщегоНазначения.РазделительПакетаЗапросов();
	ТекстСхемыЗапроса	= СтрСоединить(ТекстыЗапроса, РазделительЗапросов);
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстСхемыЗапроса);
	
	ПакетЗапросов = СхемаЗапроса.ПакетЗапросов;
	
	СтандартныеРеквизиты = Новый Массив;
	
	Если ТипРегистра = "РегистрНакопления" Тогда
		СтандартныеРеквизиты.Добавить("ВидДвижения");
		СтандартныеРеквизиты.Добавить("Регистратор");
		СтандартныеРеквизиты.Добавить("Период");
	КонецЕсли;
	
	СоставПолейРегистра = Новый Массив;
	СоставПолейРегистра.Добавить("Измерения");
	СоставПолейРегистра.Добавить("Ресурсы");
	СоставПолейРегистра.Добавить("Реквизиты");
	
	ЗначенияПараметров = Новый Структура;
	
	Для Каждого ПакетЗапроса Из ПакетЗапросов Цикл
		
		ИндексКолонки = 0;
		
		КолонкиПакета	= ПакетЗапроса.Колонки;
		ОператорыПакета	= ПакетЗапроса.Операторы;
		
		Для Каждого СтандартныйРеквизит Из СтандартныеРеквизиты Цикл
			
			КолонкаПакета = КолонкиПакета.Найти(СтандартныйРеквизит);
			
			Если КолонкаПакета <> Неопределено Тогда
				КолонкиПакета.Переместить(КолонкаПакета, ИндексКолонки);
			КонецЕсли;
			
			ИндексКолонки = ИндексКолонки + 1;
			
		КонецЦикла;
		
		Для Каждого ПоляРегистра Из СоставПолейРегистра Цикл
			
			Для Каждого ПолеРегистра Из МетаданныеРегистра[ПоляРегистра] Цикл
				
				ИмяПоля			= ПолеРегистра.Имя;
				КолонкаПакета	= КолонкиПакета.Найти(ИмяПоля);
				
				Если КолонкаПакета = Неопределено Тогда
					
					Если ПоляРегистра = "Ресурсы"
						И ТипРегистра = "РегистрНакопления" Тогда
						
						ЗначениеПоля = "0";
						
					Иначе
						ЗначениеПоля = "&ПустоеЗначение" + ИмяПоля;
						
						ЗначенияПараметров.Вставить("ПустоеЗначение" + ИмяПоля, ПолеРегистра.Тип.ПривестиЗначение());
					КонецЕсли;
					
					Для Каждого ОператорПакета Из ОператорыПакета Цикл
						ОператорПакета.ВыбираемыеПоля.Добавить(ЗначениеПоля);
					КонецЦикла;
					
					КолонкаПакета = КолонкиПакета.Получить(КолонкиПакета.Количество() - 1);
					КолонкаПакета.Псевдоним = ИмяПоля;
					
				КонецЕсли;
				
				КолонкиПакета.Переместить(КолонкаПакета, ИндексКолонки);
				
				ИндексКолонки = ИндексКолонки + 1;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТекстНовойСтроки = Символы.ПС + Символы.Таб;
	
	ПоляВыборкиРегистра				= Новый Массив;
	ПоляВыборкиСуммирующегоЗапроса	= Новый Массив;
	ГруппировкиСуммирующегоЗапроса	= Новый Массив;
	УсловияСуммирующегоЗапроса		= Новый Массив;
	
	ШаблонПоляВыборкиРегистра				= "ТаблицаРегистра.%1";
	ШаблонПоляСуммирующегоЗапроса			= "ВложенныйЗапрос.%1 КАК %1";
	ШаблонГруппировкиСуммирующегоЗапроса	= "ВложенныйЗапрос.%1";
	ШаблонУсловияСуммирующегоЗапроса		= "ИЛИ СУММА(ВложенныйЗапрос.%1) <> 0";
	
	Если ТипРегистра = "РегистрНакопления" Тогда
		ШаблонРесурсаВыборкиРегистра		= "-ТаблицаРегистра.%1";
		ШаблонРесурсаСуммирующегоЗапроса	= "СУММА(ВложенныйЗапрос.%1) КАК %1";
	Иначе
		ШаблонРесурсаВыборкиРегистра		= ШаблонПоляВыборкиРегистра;
		ШаблонРесурсаСуммирующегоЗапроса	= ШаблонПоляСуммирующегоЗапроса;
	КонецЕсли;
	
	Для Каждого СтандартныйРеквизит Из СтандартныеРеквизиты Цикл
		ПолеВыборкиРегистра				= СтрШаблон(ШаблонПоляВыборкиРегистра,				СтандартныйРеквизит);
		ПолеВыборкиСуммирующегоЗапроса	= СтрШаблон(ШаблонПоляСуммирующегоЗапроса,			СтандартныйРеквизит);
		ГруппировкаСуммирующегоЗапроса	= СтрШаблон(ШаблонГруппировкиСуммирующегоЗапроса,	СтандартныйРеквизит);
		
		ПоляВыборкиРегистра.Добавить(ПолеВыборкиРегистра);
		ПоляВыборкиСуммирующегоЗапроса.Добавить(ПолеВыборкиСуммирующегоЗапроса);
		ГруппировкиСуммирующегоЗапроса.Добавить(ГруппировкаСуммирующегоЗапроса);
	КонецЦикла;
	
	Для Каждого ПоляРегистра Из СоставПолейРегистра Цикл
		
		Для Каждого ПолеРегистра Из МетаданныеРегистра[ПоляРегистра] Цикл
			
			ИмяПоля = ПолеРегистра.Имя;
			
			Если ПоляРегистра = "Ресурсы"
				И ТипРегистра = "РегистрНакопления" Тогда
				
				ПолеВыборкиРегистра				= СтрШаблон(ШаблонРесурсаВыборкиРегистра,		ИмяПоля);
				ПолеВыборкиСуммирующегоЗапроса	= СтрШаблон(ШаблонРесурсаСуммирующегоЗапроса,	ИмяПоля);
				УсловиеСуммирующегоЗапроса		= СтрШаблон(ШаблонУсловияСуммирующегоЗапроса,	ИмяПоля);
				
				УсловияСуммирующегоЗапроса.Добавить(УсловиеСуммирующегоЗапроса);
				
			Иначе
				
				ПолеВыборкиРегистра				= СтрШаблон(ШаблонПоляВыборкиРегистра,				ИмяПоля);
				ПолеВыборкиСуммирующегоЗапроса	= СтрШаблон(ШаблонПоляСуммирующегоЗапроса,			ИмяПоля);
				ГруппировкаСуммирующегоЗапроса	= СтрШаблон(ШаблонГруппировкиСуммирующегоЗапроса,	ИмяПоля);
				
				ГруппировкиСуммирующегоЗапроса.Добавить(ГруппировкаСуммирующегоЗапроса);
				
			КонецЕсли;
			
			ПоляВыборкиРегистра.Добавить(ПолеВыборкиРегистра);
			ПоляВыборкиСуммирующегоЗапроса.Добавить(ПолеВыборкиСуммирующегоЗапроса);
			
		КонецЦикла;
		
	КонецЦикла;
	
	РазделительПолей = "," + ТекстНовойСтроки;
	
	ТекстПолейВыборкиРегистра					= СтрСоединить(ПоляВыборкиРегистра,				РазделительПолей);
	ТекстПолейВыборкиСуммирующегоЗапроса		= СтрСоединить(ПоляВыборкиСуммирующегоЗапроса,	РазделительПолей);
	ТекстПолейГруппировкиСуммирующегоЗапроса	= СтрСоединить(ГруппировкиСуммирующегоЗапроса,	РазделительПолей);
	ТекстПолейУсловияСуммирующегоЗапроса		= СтрСоединить(УсловияСуммирующегоЗапроса,		ТекстНовойСтроки);
	
	ТекстЗапросаФормированияДвижений = СхемаЗапроса.ПолучитьТекстЗапроса();
	ТекстЗапросаФормированияДвижений = СтрЗаменить(ТекстЗапросаФормированияДвижений,
													РазделительЗапросов,
													ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ТекстЗапросаВТ = СтрСоединить(ТекстыВТ, РазделительЗапросов);
	
	ШаблонТекстРегистра = 
	"ВЫБРАТЬ
	|	&ПоляВыборки
	|ИЗ
	|	&ИсточникДанных КАК ТаблицаРегистра
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ТаблицаРегистра.Регистратор) В (&ОписаниеТипов)
	|";
	
	ТекстЗапросаРегистра = СтрЗаменить(ШаблонТекстРегистра, "&ПоляВыборки", ТекстПолейВыборкиРегистра);
	ТекстЗапросаРегистра = СтрЗаменить(ТекстЗапросаРегистра, "&ИсточникДанных", ПолноеИмяРегистра);
		
	ТекстЗапроса = ТекстЗапросаВТ + ?(Не ПустаяСтрока(ТекстЗапросаВТ), РазделительЗапросов, "") +
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&НеправильныеДвиженияРегистратор КАК Регистратор
	|ПОМЕСТИТЬ НеправильныеДвижения
	|ИЗ
	|	(ВЫБРАТЬ
	|		&НаборПолейСуммирующий
	|	ИЗ
	|		(ВЫБРАТЬ &ИсточникТекстЗапросаФормированиеДвижений
	|
	|		ОБЪЕДИНИТЬ ВСЕ
	|
	|		ВЫБРАТЬ &ТекстЗапросаРегистра) КАК ВложенныйЗапрос
	|
	|	СГРУППИРОВАТЬ ПО
	|		&НаборПолейГруппировки
	|
	|	ИМЕЮЩИЕ
	|		&УсловиеИмеющие
	|
	|	) КАК НеправильныеДвижения  
	|ИНДЕКСИРОВАТЬ ПО 
	|	Регистратор
	|;
	|
	|/////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеестрДокументов.ИсправляемыйДокумент КАК ИсправляемыйДокумент
	|ПОМЕСТИТЬ ИсправляемыеДокументы
	|ИЗ
	|	НеправильныеДвижения КАК НеправильныеДвижения
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.РеестрДокументов КАК РеестрДокументов 
	|	ПО
	|		НеправильныеДвижения.Регистратор = РеестрДокументов.СторнируемыйДокумент
	|		И НЕ РеестрДокументов.ДополнительнаяЗапись
	|ГДЕ
	|	НЕ РеестрДокументов.Ссылка ЕСТЬ NULL
	|	И РеестрДокументов.ИсправляемыйДокумент <> НЕОПРЕДЕЛЕНО
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИсправляемыйДокумент
	|;
	|
	|ВЫБРАТЬ
	|	НеправильныеДвижения.Регистратор КАК Регистратор
	|ИЗ
	|	НеправильныеДвижения КАК НеправильныеДвижения
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	РеестрДокументов.Ссылка КАК Регистратор
	|ИЗ
	|	ИсправляемыеДокументы КАК ИсправляемыеДокументы
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.РеестрДокументов КАК РеестрДокументов 
	|	ПО
	|		ИсправляемыеДокументы.ИсправляемыйДокумент = РеестрДокументов.ИсправляемыйДокумент
	|		И НЕ РеестрДокументов.ДополнительнаяЗапись
	|ГДЕ
	|	НЕ РеестрДокументов.Ссылка ЕСТЬ NULL
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НеправильныеДвиженияРегистратор", "НеправильныеДвижения.Регистратор");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НаборПолейСуммирующий", ТекстПолейВыборкиСуммирующегоЗапроса);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ &ИсточникТекстЗапросаФормированиеДвижений", ТекстЗапросаФормированияДвижений);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ &ТекстЗапросаРегистра", ТекстЗапросаРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеИмеющие", "ЛОЖЬ " + Символы.ПС + ТекстПолейУсловияСуммирующегоЗапроса);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НаборПолейГруппировки", ТекстПолейГруппировкиСуммирующегоЗапроса);
	
	СтрокаЗамены = "Ссылка.Проведен";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Ссылка В (&Ссылка)",	СтрокаЗамены);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Ссылка В(&Ссылка)",	СтрокаЗамены);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	ТекстДокументСсылкаШаблон = "ДокументСсылка.%1";
	ИмяДокумента = СтрРазделить(ПолноеИмяДокумента, ".")[1];
	ТекстДокументСсылка = СтрШаблон(ТекстДокументСсылкаШаблон, ИмяДокумента);
	
	ОписаниеТиповИсточниковДанных = Новый Массив();
	ОписаниеТиповИсточниковДанных.Добавить(Тип(ТекстДокументСсылка));
	
	Запрос.УстановитьПараметр("ОписаниеТипов", ОписаниеТиповИсточниковДанных);
	
	Для Каждого Параметр Из ЗначенияПараметров Цикл
		Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	
	Возврат Регистраторы;
	
КонецФункции

#КонецОбласти

#Область ВспомогательныеФункции

// Возвращает список свойств проводимого документа.
//
// Параметры:
//  Документ - ДокументОбъект - документ, по которому необходимо получить свойства.
//
// Возвращаемое значение:
//  ФиксированнаяСтруктура - со свойствами:
//     * ЭтоНовый - Булево - Истина - документ перед записью не был записан в базу, Ложь - документ уже был записан
//     * Проведен - Булево - Истина - документ перед записью уже был проведен; Ложь - документ не был проведен
//     * РежимЗаписи - РежимЗаписиДокумента - текущий режим записи документа
//     * РежимПроведения - РежимПроведенияДокумента - текущий режим проведения документа.
//
Функция СвойстваДокумента(Знач Документ) Экспорт
	
	Возврат Документ.ДополнительныеСвойства.ПроведениеДокументов.СвойстваДокумента;
	
КонецФункции

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка - ссылка на документ, по которому необходимо получить данные
//  Регистры - Строка, Структура - список имен регистров, разделенный запятыми, таблицы которых необходимо получить;
//      Если список не указан, будут получены все доступные таблицы данных документа.
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  Структура Из КлючИЗначение - Где:
//  	* Ключ - Строка - Имя таблицы проведения
//  	* Значение - ТаблицаЗначений - Таблица проведения
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры = Неопределено, ДопПараметры = Неопределено) Экспорт
	
	МенеджерДокумента = Документы[Документ.Метаданные().Имя];
	ПроведениеДокументовЛокализация.ПереназначитьМодульПолученияДанныхДокумента(МенеджерДокумента);
	
	Возврат МенеджерДокумента.ДанныеДокументаДляПроведения(Документ,
		?(ТипЗнч(Регистры) = Тип("Строка"), Новый Структура(Регистры), Регистры),
		?(ДопПараметры <> Неопределено, ДопПараметры, ДопПараметрыИнициализироватьДанныеДокументаДляПроведения()));
	
КонецФункции

// Удаляет все записи в базе данных из наборов записей движений документа по указанным регистрам.
//
// Параметры:
//  Документ - ДокументОбъект - документ, по которому необходимо удалить движения.
//  Регистры - Строка - список имен регистров, разделенный запятыми, движения которых необходимо удалить;
//      Если список не указан, будут удалены движения документа по всем регистрам.
//
Процедура ОчиститьДвиженияДокумента(Документ, Регистры = Неопределено) Экспорт
	
	Свойства = СвойстваДокумента(Документ);
	Если Не Свойства.ЭтоНовый Тогда
		Если Не ЗначениеЗаполнено(Регистры) Тогда
			ЗаписываемыеРегистры = ПодготовитьНаборыЗаписейКРегистрацииДвижений(Документ, Свойства, Неопределено);
			Документ.Движения.Записать();
			ОтметитьВыполнениеОбработкиОбновленияПодчиненныхРегистров(ЗаписываемыеРегистры, Документ);
		Иначе
			Для Каждого ИмяРегистра Из СтрРазделить(Регистры, ", ", Ложь) Цикл
				НаборЗаписей = Документ.Движения[СокрЛП(ИмяРегистра)];
				НаборЗаписей.Очистить();
				НаборЗаписей.ДополнительныеСвойства.Вставить("СвойстваДокумента", Свойства);
				НаборЗаписей.Записать(Истина);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Добавляет дополнительную таблицу для движений по регистру учетного механизма.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  ИмяТаблицы - Строка - имя таблицы для движений
//  Таблица - ТаблицаЗначений - таблица для движений.
//
Процедура ДобавитьТаблицуДанныхДокумента(Документ, ИмяТаблицы, Таблица) Экспорт
	
	Если Не Документ.ДополнительныеСвойства.ПроведениеДокументов.Свойство("ДополнительныеТаблицыДанныхДокумента") Тогда
		Документ.ДополнительныеСвойства.ПроведениеДокументов.Вставить("ДополнительныеТаблицыДанныхДокумента", Новый Структура);
	КонецЕсли;
	
	Документ.ДополнительныеСвойства.ПроведениеДокументов.ДополнительныеТаблицыДанныхДокумента.Вставить(ИмяТаблицы, Таблица);
	
КонецПроцедуры

// Возвращает менеджер временных таблиц, используемый для хранения таблиц контроля изменений регистров.
//
// Параметры:
//  Документ - ДокументОбъект - документ, в рамках которого существует менеджер временных таблиц.
//
// Возвращаемое значение:
//  МенеджерВременныхТаблиц - менеджер временных таблиц.
//
Функция МенеджерВременныхТаблицКонтроля(Знач Документ) Экспорт
	
	Если Не Документ.ДополнительныеСвойства.ПроведениеДокументов.Свойство("МенеджерВременныхТаблицКонтроля") Тогда
		Документ.ДополнительныеСвойства.ПроведениеДокументов.Вставить(
			"МенеджерВременныхТаблицКонтроля", Новый МенеджерВременныхТаблиц);
	КонецЕсли;
	
	Возврат Документ.ДополнительныеСвойства.ПроведениеДокументов.МенеджерВременныхТаблицКонтроля;
	
КонецФункции

// Инициализирует доп. свойства регистра для выполнения контроля изменений движений по регистру.
//
// Параметры:
//  ДвиженияРегистра - РегистрНакопленияНаборЗаписей, РегистрСведенийНаборЗаписей - коллекция записей регистра
//  Документ - ДокументОбъект - записываемый документ
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц,
//      используемый для хранения таблиц контроля изменений регистров
//  РассчитыватьИзменения - Булево - признак, указывающий рассчитывать результат изменений движений по регистру.
//  ЭтоКонтрольныйРегистрИзменений - Булево - признак, указывающий, что записываться будет регистр изменений.
//                                 - Неопределено - если назначение регистра не анализируется при записи.
//  ЭтоКонтрольныйРегистрДатЗапрета - Булево - признак, указывающий, что записываться будет регистр механизма дат запрета.
//                                  - Неопределено - если назначение регистра не анализируется при записи.
//  ЭтоКонтрольныйРегистрЗаданий - Булево - признак, указывающий, что записываться будет регистр заданий.
//                               - Неопределено - если назначение регистра не анализируется при записи.
//
Процедура УстановитьДопСвойстваРегистра(ДвиженияРегистра, Документ,
	МенеджерВременныхТаблиц = Неопределено, РассчитыватьИзменения = Ложь, ЭтоКонтрольныйРегистрИзменений = Неопределено,
	ЭтоКонтрольныйРегистрДатЗапрета = Неопределено, ЭтоКонтрольныйРегистрЗаданий = Неопределено) Экспорт
	
	ДвиженияРегистра.ДополнительныеСвойства.Вставить("СвойстваДокумента", СвойстваДокумента(Документ));
	Если МенеджерВременныхТаблиц <> Неопределено Тогда
		УстановитьДопСвойстваДляКонтроля(
			ДвиженияРегистра,
			Документ,
			МенеджерВременныхТаблиц,
			РассчитыватьИзменения,
			ЭтоКонтрольныйРегистрИзменений,
			ЭтоКонтрольныйРегистрДатЗапрета,
			ЭтоКонтрольныйРегистрЗаданий);
	КонецЕсли;
	
КонецПроцедуры

// Записывает движения документа, выполняя контроль их изменений по регистрам.
//
//	Параметры:
//		Документ - ДокументОбъект - Записываемый документ
//		Отказ - Булево - признак отказа от записи
//		Изменения - Булево - признак, указывающий рассчитывать результат изменений движений по регистрам
//		Задания - Булево - признак, указывающий формировать задания исходя из движений по регистрам.
//
Процедура ЗаписатьДвиженияСКонтролем(Документ, Отказ, Изменения, Задания) Экспорт
	
	Свойства = СвойстваДокумента(Документ);
	МенеджерДокумента = Документы[Документ.Метаданные().Имя];
	ПроведениеДокументовЛокализация.ПереназначитьМодульПолученияДанныхДокумента(МенеджерДокумента);
	
	Если ТипЗнч(Документ) = Тип("ДокументОбъект.Сторно") Тогда
		// Список механизмов получим из сторнируемого документа
		МенеджерСторнируемогоДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Документ.СторнируемыйДокумент);
		МеханизмыДокумента    = УчетныеМеханизмыДокумента(МенеджерСторнируемогоДокумента);
	Иначе
		МеханизмыДокумента    = УчетныеМеханизмыДокумента(МенеджерДокумента);
	КонецЕсли;
	МеханизмыКонфигурации = УчетныеМеханизмыКонфигурации();
	
	Механизмы            = Новый СписокЗначений;
	Для каждого Механизм Из МеханизмыДокумента Цикл
		МодульМеханизма = ОбщегоНазначения.ОбщийМодуль(МеханизмыКонфигурации[Механизм]);
		
		ПараметрыМеханизма = МодульМеханизма.ПараметрыДляПроведенияДокумента(Документ, Свойства); // см. ПроведениеДокументов.ПараметрыУчетногоМеханизма -  
		ПараметрыМеханизма.Вставить("МодульМеханизма", МодульМеханизма);
		
		Механизмы.Добавить(ПараметрыМеханизма, Механизм);
	КонецЦикла;
	Механизмы.СортироватьПоПредставлению();
	
	ЗакрытиеМесяцаСервер.ИнициализироватьПараметрСеансаСформированныеЗадания(Документ);
	
	МенеджерВременныхТаблиц = МенеджерВременныхТаблицКонтроля(Документ);
	
	Для каждого Механизм Из Механизмы Цикл
		Если Изменения Тогда
			Для каждого Регистр Из Механизм.Значение.КонтрольныеРегистрыИзменений Цикл
				ДвиженияРегистра = Документ.Движения.Найти(Регистр.Имя);
				Если ДвиженияРегистра <> Неопределено И ДвиженияРегистра.Записывать Тогда
					ДвиженияРегистра.ДополнительныеСвойства.Вставить("СвойстваДокумента", Свойства);
					УстановитьДопСвойстваДляКонтроля(
						ДвиженияРегистра,
						Документ,
						МенеджерВременныхТаблиц,
						Истина,
						Истина,
						Ложь,
						Ложь);
				КонецЕсли;
			КонецЦикла;
			Для каждого Регистр Из Механизм.Значение.КонтрольныеРегистрыДатаЗапрета Цикл
				ДвиженияРегистра = Документ.Движения.Найти(Регистр.Имя);
				Если ДвиженияРегистра <> Неопределено И ДвиженияРегистра.Записывать Тогда
					ДвиженияРегистра.ДополнительныеСвойства.Вставить("СвойстваДокумента", Свойства);
					УстановитьДопСвойстваДляКонтроля(
						ДвиженияРегистра,
						Документ,
						МенеджерВременныхТаблиц,
						Истина,
						Ложь,
						Истина,
						Ложь);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если Задания Тогда
			Для каждого Регистр Из Механизм.Значение.КонтрольныеРегистрыЗаданий Цикл
				ДвиженияРегистра = Документ.Движения.Найти(Регистр.Имя);
				Если ДвиженияРегистра <> Неопределено И ДвиженияРегистра.Записывать Тогда
					ДвиженияРегистра.ДополнительныеСвойства.Вставить("СвойстваДокумента", Свойства);
					УстановитьДопСвойстваДляКонтроля(
						ДвиженияРегистра,
						Документ,
						МенеджерВременныхТаблиц,
						Истина,
						Ложь,
						Ложь,
						Истина);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ОбработатьДокументПередЗаписьюДвижений(Механизмы, Документ, МенеджерВременныхТаблиц, Отказ);
	Документ.Движения.Записать();
	
	ОбработатьДокументПослеЗаписиДвижений(Механизмы, Документ, МенеджерВременныхТаблиц, Отказ);
	ПроверитьДатуЗапретаПоТаблицеИзменений(Механизмы, Документ, МенеджерВременныхТаблиц, Отказ);	
	Если Изменения Тогда
		ВыполнитьКонтрольРезультатовПроведения(Механизмы, Документ, МенеджерВременныхТаблиц, Отказ);
	КонецЕсли;
	Если Задания И Не Отказ Тогда
		СформироватьЗаданияНаОтложенныеДвижения(Документ, МенеджерВременныхТаблиц);
	КонецЕсли;
	
	ЗакрытиеМесяцаСервер.ПроверитьСформированныеЗаданияПриПроведенииДокумента(Документ, Отказ);
	
КонецПроцедуры

// Создает структуру данных, заменяющую объект документа, пригодную для инициализации доп. свойства регистров
// при выполнения контроля изменений движений по регистрам и формировании заданий на отложенные движения.
//
// Параметры:
//  Ссылка - ДокументСсылка - ссылка на документ
//  Дата - Дата - дата документа.
//
// Возвращаемое значение:
//  Структура - Свойства:
//     * Ссылка - ДокументСсылка - ссылка на документ
//     * Дата - Дата - дата документа
//     * ДополнительныеСвойства - Структура
//
Функция ЭмуляцияДокумента(Ссылка, Дата) Экспорт
	
	Документ = Новый Структура("Ссылка, Дата, ДополнительныеСвойства",
		Ссылка, Дата, Новый Структура);
	
	Документ.ДополнительныеСвойства.Вставить("ПроведениеДокументов", Новый Структура);
	
	СвойстваДокумента = Новый ФиксированнаяСтруктура("ЭтоНовый, РежимЗаписи, РежимПроведения, ЭтоПерепроведение",
		Ложь,
		РежимЗаписиДокумента.Проведение,
		РежимПроведенияДокумента.Неоперативный,
		Истина);
	
	Документ.ДополнительныеСвойства.ПроведениеДокументов.Вставить("СвойстваДокумента", СвойстваДокумента);
	Документ.ДополнительныеСвойства.ПроведениеДокументов.Вставить("ТаблицыКонтроля", Новый Структура);
	
	Возврат Документ;
	
КонецФункции

// Формирует задания на отложенные движения исходя из выполненных движений по регистрам.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  		 - Структура - см. ЭмуляцияДокумента()
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц,
//      используемый для хранения таблиц контроля изменений регистров.
//
Процедура СформироватьЗаданияНаОтложенныеДвижения(Документ, МенеджерВременныхТаблиц) Экспорт

	ИмяОперации = СтрШаблон("ПроведениеДокументов.%1.СформироватьЗаданияНаОтложенныеДвижения", Документ.Ссылка.Метаданные().Имя);
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(ИмяОперации);
	
	ВзаиморасчетыСервер.ОтразитьЗаданияКРаспределениюРасчетовСКлиентами(Документ, МенеджерВременныхТаблиц);
	ВзаиморасчетыСервер.ОтразитьЗаданияКРаспределениюРасчетовСПоставщиками(Документ, МенеджерВременныхТаблиц);
	РаспределениеЗапасовДвижения.ОтразитьЗаданияКРаспределениюЗапасов(Документ, МенеджерВременныхТаблиц);
	
	ЕстьРасчетыСКлиентами = Ложь;
	ЕстьРасчетыСПоставщиками = Ложь;
	Если ПланыОбмена.ГлавныйУзел() = Неопределено И Константы.АктуализироватьВзаиморасчетыПриПроведенииДокументов.Получить()
		И НЕ Константы.НоваяАрхитектураВзаиморасчетов.Получить() Тогда
		Если (МенеджерВременныхТаблиц.Таблицы.Найти("РасчетыСКлиентамиИзменения") <> Неопределено
			ИЛИ МенеджерВременныхТаблиц.Таблицы.Найти("РасчетыСКлиентамиПоДокументамЗаданияКРасчетамСКлиентами") <> Неопределено) Тогда
			ЕстьРасчетыСКлиентами = Истина;
		КонецЕсли;
		Если (МенеджерВременныхТаблиц.Таблицы.Найти("РасчетыСПоставщикамиИзменения") <> Неопределено
			ИЛИ МенеджерВременныхТаблиц.Таблицы.Найти("РасчетыСПоставщикамиПоДокументамЗаданияКРасчетамСПоставщиками") <> Неопределено) Тогда
			ЕстьРасчетыСПоставщиками = Истина;
		КонецЕсли;
		
		Если ЕстьРасчетыСКлиентами И ЕстьРасчетыСПоставщиками Тогда
			РаспределениеВзаиморасчетовВызовСервера.РаспределитьРасчетыФоновымЗаданием();
		ИначеЕсли ЕстьРасчетыСКлиентами Тогда
			РаспределениеВзаиморасчетовВызовСервера.РаспределитьРасчетыФоновымЗаданием(Неопределено, Неопределено, "РасчетыСКлиентами");
		ИначеЕсли ЕстьРасчетыСПоставщиками Тогда
			РаспределениеВзаиморасчетовВызовСервера.РаспределитьРасчетыФоновымЗаданием(Неопределено, Неопределено, "РасчетыСПоставщиками");
		КонецЕсли;
	КонецЕсли;
	
	ПартионныйУчетСервер.ОтразитьЗаданияКРасчетуСебестоимости(Документ, МенеджерВременныхТаблиц);
	ЗакрытиеМесяцаСервер.ОтразитьЗаданияКЗакрытиюМесяца(Документ, МенеджерВременныхТаблиц);
	УчетНДСУП.ОтразитьЗаписиРегистраЗаданияКФормированиюДвиженийПоНДС(Документ, МенеджерВременныхТаблиц);
	СостоянияДокументов.ОтразитьСостоянияДокументов(Документ, МенеджерВременныхТаблиц);
	
	

	ПроведениеДокументовЛокализация.СформироватьЗаданияНаОтложенныеДвижения(Документ, МенеджерВременныхТаблиц);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, 1);
	
КонецПроцедуры

// Преобразует таблицы контроля изменений по документу в структуру данных используемую в предыдущей версии проведения,
// пригодную для вызова формирования заданий на отложенные движения для внеоборотных активов.
// (См. ВнеоборотныеАктивы.СформироватьЗаписиРегистровЗаданий)
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц, используемый для хранения таблиц контроля изменений регистров.
//
// Возвращаемое значение:
//  Структура -
//
Функция ДанныеТаблицСтаройСтруктуры(Документ, МенеджерВременныхТаблиц) Экспорт
	
	ДанныеТаблиц = Новый Структура;
	ДанныеТаблиц.Вставить("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц);
	
	Для Каждого Таблица Из Документ.ДополнительныеСвойства.ПроведениеДокументов.ТаблицыКонтроля Цикл
		ДанныеТаблиц.Вставить(Таблица.Ключ, Таблица.Значение.ЕстьЗаписиВТаблице);
	КонецЦикла;
	
	Возврат ДанныеТаблиц;
	
КонецФункции

// Генерирует текст запроса для сторнирования записей по регистру накопления.
// Для числовых ресурсов и числовых реквизитов регистра формирует записи со знаком минус.
// 
// Параметры:
// 	МетаданныеРегистра - ОбъектМетаданныхРегистрНакопления - Метаданные регистра накопления для сторнирования.
// 	МетаданныеДокумента - ОбъектМетаданныхДокумент - Метаданные регистра накопления для сторнирования.
// 	
// 	ТекстДопУсловий - Строка - Текст условий отбора записей регистра для сторнирования для секции ГДЕ.
// Возвращаемое значение:
// 	Строка - Текст сторнирующего запроса.
Функция ТекстСторнирующегоЗапроса(МетаданныеРегистра, МетаданныеДокумента, ТекстДопУсловий = "") Экспорт
	
	ШаблонЗапроса = "ВЫБРАТЬ
	|	ДокументыСторно.Ссылка  КАК Регистратор,
	|	ДокументыСторно.Дата КАК Период,
	|	&ПоляВыборки,
	|	ИСТИНА КАК Сторно
	|ИЗ
	|	&ИмяРегистра КАК ДанныеРегистра
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		&ИмяДокумента КАК ДокументыСторно
	|	ПО
	|		ДанныеРегистра.Регистратор = ДокументыСторно.СторнируемыйДокумент
	|		И ДокументыСторно.Ссылка В (&Ссылка)
	|ГДЕ
	|	НЕ ДанныеРегистра.Сторно 
	|	И &ДопУсловия";
	
	МассивПолейВыборки = Новый Массив;
	
	Исключения = Новый Массив;
	Исключения.Добавить("Регистратор");
	Исключения.Добавить("Период");
	Исключения.Добавить("Сторно");
	Исключения.Добавить("НомерСтроки");
	Исключения.Добавить("Активность");

	ДобавитьПоляВыборкиСторнирующегоЗапроса(МетаданныеРегистра.СтандартныеРеквизиты, 
		МассивПолейВыборки,
		Исключения);
	ДобавитьПоляВыборкиСторнирующегоЗапроса(МетаданныеРегистра.Измерения, 
		МассивПолейВыборки,
		Исключения);
	ДобавитьПоляВыборкиСторнирующегоЗапроса(МетаданныеРегистра.Ресурсы, 
		МассивПолейВыборки,
		Исключения,
		Истина);
	ДобавитьПоляВыборкиСторнирующегоЗапроса(МетаданныеРегистра.Реквизиты, 
		МассивПолейВыборки,
		Исключения,
		Истина);
		
	ТекстПоляВыборки= СтрСоединить(МассивПолейВыборки,"," + Символы.ПС);
	
	ТекстЗапроса = СтрЗаменить(ШаблонЗапроса, "&ПоляВыборки", ТекстПоляВыборки);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяРегистра", МетаданныеРегистра.ПолноеИмя());
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяДокумента", МетаданныеДокумента.ПолноеИмя());
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
		"&ДопУсловия",
		?(ЗначениеЗаполнено(ТекстДопУсловий), ТекстДопУсловий, "ИСТИНА"));
	Возврат ТекстЗапроса;
	
КонецФункции

// Собирает шаблон-структуру из текстов запросов по таблице изменений для дальнейшей проверки даты запрета.
// 
// Параметры:
// 	Запрос - Запрос - Запрос по проверке даты запрета, можно установить параметры
// 	ИмяРегистра - Строка - 
// 	ИмяТаблицыИзменений - Строка -
// 	ИмяРаздела - Строка -
// Возвращаемое значение:
// 	Структура - см. ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов
Функция ШаблонТекстЗапросаКонтрольДатыЗапрета(Запрос, ИмяРегистра, ИмяТаблицыИзменений, ИмяРаздела) Экспорт
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.Период КАК Период,
	|	Таблица.Организация КАК Организация,
	|	&ИмяРегистра КАК ИмяРегистра,
	|	&Раздел КАК РазделДатыЗапрета
	|ИЗ
	|	&ИмяТаблицыИзменений КАК Таблица
	|";
	
	ИмяПараметраИмяРегистра = "ИмяРегистра" + ИмяРегистра;
	ИмяПараметраРаздел = "Раздел" + ИмяРегистра;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ИмяРегистра", "&" + ИмяПараметраИмяРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&Раздел", "&" + ИмяПараметраРаздел);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ИмяТаблицыИзменений", ИмяТаблицыИзменений);
	
	Запрос.УстановитьПараметр(ИмяПараметраИмяРегистра, ИмяРегистра);
	Запрос.УстановитьПараметр(ИмяПараметраРаздел, ИмяРаздела);
	
	СтруктураТекстовЗапросов = ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов(ТекстЗапроса);
	
	Возврат СтруктураТекстовЗапросов

КонецФункции

// Возвращает значение идентификатора финансовой записи для движения регистра накопления,
// которое не должно учитываться при формировании проводок по данным регистров
//
// Возвращаемое значение:
// 	Строка - значение идентификатора
//
Функция ИдентификаторНеиспользуемойФинЗаписи() Экспорт
	
	Возврат Строка(ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор());
	
КонецФункции

// Вызывается ПередЗаписью набора записей регистра - сохраняет движения, сформированные отложенно.
// Такие движения имеют реквизит ВидИсточника.
// При перепроведении документа эти движения добавляются к набору движений, сформированному самим документом.
//
// Параметры:
//	НаборЗаписей - РегистрНакопленияНаборЗаписей - свойство ЭтотОбъект модуля набора записей.
//	Замещение - Булево - режим записи набора (параметр события ПередЗаписью).
//	ВидИсточника - Массив из ПеречислениеСсылка.ВидыИсточниковДвижений - Источник движений
//	ИсключитьНастройкиХО - Массив из СправочникСсылка.НастройкиХозяйственныхОпераций - Не сохранять движения с указанной настройкой.
//
Процедура СохранитьДвиженияСформированныеОтложенно(НаборЗаписей, Замещение, ВидИсточника, ИсключитьНастройкиХО = Неопределено) Экспорт
	
	Если НЕ Замещение ИЛИ НЕ ЗначениеЗаполнено(ВидИсточника) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ НаборЗаписей.ДополнительныеСвойства.Свойство("СвойстваДокумента")
		ИЛИ НаборЗаписей.ДополнительныеСвойства.СвойстваДокумента.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		Возврат;
	КонецЕсли;
	
	Если НаборЗаписей.ДополнительныеСвойства.Свойство("ФормированиеУправленческогоБаланса") Тогда
		Возврат; // движения сформированные для упр.баланса содержат в себе все движения
	КонецЕсли;
	
	МетаданныеРегистра = НаборЗаписей.Метаданные();
	
	Если МетаданныеРегистра.Реквизиты.Найти("ВидИсточника") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоляОсновнойТаблицыРегистра = Новый Массив;
	
	ЧастьЗапроса = "КАК"; //@query-part
	
	Для Каждого ОписаниеМетаданных Из МетаданныеРегистра.Измерения Цикл
		ПоляОсновнойТаблицыРегистра.Добавить(?(ПоляОсновнойТаблицыРегистра.Количество() <> 0, ",", "") + "Таблица." + ОписаниеМетаданных.Имя + " " + ЧастьЗапроса + " " + ОписаниеМетаданных.Имя);
	КонецЦикла;
	Для Каждого ОписаниеМетаданных Из МетаданныеРегистра.Ресурсы Цикл
		ПоляОсновнойТаблицыРегистра.Добавить(", Таблица." + ОписаниеМетаданных.Имя + " " + ЧастьЗапроса + " " + ОписаниеМетаданных.Имя);
	КонецЦикла;
	Для Каждого ОписаниеМетаданных Из МетаданныеРегистра.Реквизиты Цикл
		ПоляОсновнойТаблицыРегистра.Добавить(", Таблица." + ОписаниеМетаданных.Имя + " " + ЧастьЗапроса + " " + ОписаниеМетаданных.Имя);
	КонецЦикла;
	
	ПоляОсновнойТаблицыРегистра = СтрСоединить(ПоляОсновнойТаблицыРегистра, Символы.ПС);

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Таблица.Период КАК Период,
	|	Таблица.ВидДвижения КАК ВидДвижения,
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Таблица.Активность КАК Активность,
	|	&ПоляРегистра
	|ИЗ
	|	&ИмяРегистра КАК Таблица
	|
	|ГДЕ
	|	Таблица.Регистратор = &Регистратор
	|	И Таблица.ВидИсточника В (&ВидИсточника)
	|	И НЕ Таблица.НастройкаХозяйственнойОперации В (&ИсключитьНастройкиХО)
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляРегистра", ПоляОсновнойТаблицыРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяРегистра", МетаданныеРегистра.ПолноеИмя());

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Регистратор", НаборЗаписей.Отбор.Регистратор.Значение);
	Запрос.УстановитьПараметр("ВидИсточника", ВидИсточника);
	Запрос.УстановитьПараметр("ИсключитьНастройкиХО", ?(ИсключитьНастройкиХО <> Неопределено, ИсключитьНастройкиХО, Новый Массив));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
КонецПроцедуры

// Выполняет общие операции при заполнении параметров инициализации
// 
// Параметры:
//  Запрос - Запрос -
//  ДокументСсылка - ДокументСсылка - Документ
//  ДопПараметры - Структура - Доп параметры
Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка, ДопПараметры) Экспорт
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);

	Если Запрос.МенеджерВременныхТаблиц = Неопределено Тогда
		
		МенеджерВременныхТаблиц = Неопределено;
		
		Если ДопПараметры <> Неопределено
			И ДопПараметры.Свойство("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц) Тогда
			
			МенеджерВременныхТаблиц = ?(МенеджерВременныхТаблиц = Неопределено, Новый МенеджерВременныхТаблиц, МенеджерВременныхТаблиц);
			
		Иначе
			МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		КонецЕсли;
		
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

// Добавляет в общий запрос проведения исправительного документа тексты запросов сторнирования движений.
// 
// Параметры:
// 	Запрос - Запрос - Запрос проведения
// 	ТекстыЗапроса - СписокЗначений Из Строка - Список текстов запросов для проведения документа
// 	Регистры - Массив из Строка - Имена регистров, по которым выполняется проведение
// 	МетаданныеДокумента - ОбъектМетаданныхДокумент - Объект метаданных документа, который проводится
//
Процедура ДобавитьЗапросыСторноДвижений(Запрос, ТекстыЗапроса, Регистры, МетаданныеДокумента) Экспорт
	
	ТекстЗапросаИсправления =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Документы.Ссылка КАК Ссылка
	|ИЗ
	|	&ИмяДокумента КАК Документы
	|ГДЕ
	|	Документы.Ссылка В (&Ссылка)
	|	И Документы.Исправление
	|";
	
	ТекстЗапросаИсправления = СтрЗаменить(ТекстЗапросаИсправления, "&ИмяДокумента", "Документ." + МетаданныеДокумента.Имя);
	
	Если Запрос.Параметры.Свойство("Исправление") И Не Запрос.Параметры.Исправление Тогда
		
		Возврат;
		
	ИначеЕсли Не Запрос.Параметры.Свойство("Исправление") И Запрос.Параметры.Свойство("Ссылка") Тогда
		
		ЗапросИсправления = Новый Запрос;
		ЗапросИсправления.Текст = ТекстЗапросаИсправления;
		ЗапросИсправления.УстановитьПараметр("Ссылка", Запрос.Параметры.Ссылка);
		
		Если ЗапросИсправления.Выполнить().Пустой() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	МенеджерДокумента = Документы[МетаданныеДокумента.Имя];
	УчетныеМеханизмы = УчетныеМеханизмыДокумента(МенеджерДокумента);
	МеханизмыКонфигурации = УчетныеМеханизмыКонфигурации();
	
	Для каждого Механизм Из УчетныеМеханизмы Цикл
		
		МодульМеханизма = ОбщегоНазначения.ОбщийМодуль(МеханизмыКонфигурации[Механизм]);
		ТекстыЗапросовСторнирования = МодульМеханизма.ТекстыЗапросовСторнирования(МетаданныеДокумента);
		Для каждого КлючИЗначение Из ТекстыЗапросовСторнирования Цикл
			ОбъектМетаданныхРегистр = Метаданные.НайтиПоПолномуИмени(КлючИЗначение.Ключ);
			Если ТребуетсяТаблицаДляДвижений(ОбъектМетаданныхРегистр.Имя, Регистры)
					И МетаданныеДокумента.Движения.Содержит(ОбъектМетаданныхРегистр) Тогда
				ТекстыЗапроса.Добавить(КлючИЗначение.Значение, ОбъектМетаданныхРегистр.Имя);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ИсправлениеДокументов.ДополнитьТекстыЗапросовПроведения(Запрос, ТекстыЗапроса, Регистры, МетаданныеДокумента);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает массив имен учетных механизмов, по которым осуществляется проведение
// 
// Возвращаемое значение:
// 	Массив Из Строка - 
Функция ИменаУчетныхМеханизмовКонфигурации() Экспорт
	
	МеханизмыКонфигурации = УчетныеМеханизмыКонфигурации();
	Результат = Новый Массив;
	
	Для каждого КлючИЗначение Из МеханизмыКонфигурации Цикл
		Результат.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Описывает учетные механизмы используемые в конфигурации.
//
// Возвращаемое значение:
// 	Структура Из КлючИЗначение - Где:
// 			* Ключ - Строка - Имя механизма
// 			* Значение - Строка - Имя модуля менеджера
Функция УчетныеМеханизмыКонфигурации() Экспорт
	
	МеханизмыКонфигурации = Новый Структура;
	
	МеханизмыКонфигурации.Вставить("АдресныйСклад", "СкладыСервер");
	МеханизмыКонфигурации.Вставить("Взаиморасчеты", "ВзаиморасчетыСервер");
	МеханизмыКонфигурации.Вставить("ВнутреннееТовародвижение", "ВнутреннееТовародвижение");
	МеханизмыКонфигурации.Вставить("Закупки", "Закупки");
	


	МеханизмыКонфигурации.Вставить("Обеспечение", "РаспределениеЗапасовДвижения");
	МеханизмыКонфигурации.Вставить("ОборотныеРегистрыУправленческогоУчета", "УправленческийУчетПроведениеСервер");
	МеханизмыКонфигурации.Вставить("ОперативныйУчетТоваровОрганизаций", "ЗапасыСервер");
	МеханизмыКонфигурации.Вставить("ПередачаНаОтветхранение", "ПередачаНаОтветхранение");
	МеханизмыКонфигурации.Вставить("ПланированиеЗапасов", "Планирование");
	МеханизмыКонфигурации.Вставить("ПланированиеКонтрольДенежныхСредств", "ЛимитыРасходованияДенежныхСредствСервер");
	МеханизмыКонфигурации.Вставить("ПодарочныеСертификаты", "ПодарочныеСертификатыСервер");
	МеханизмыКонфигурации.Вставить("ПриемНаОтветхранение", "ПриемНаОтветхранение");
	МеханизмыКонфигурации.Вставить("Продажи", "Продажи");
	МеханизмыКонфигурации.Вставить("ОформлениеОтчетовКомитентуОЗакупках", "РегистрыНакопления.ТоварыУслугиКОформлениюОтчетовКомитентуОЗакупках");
	
	МеханизмыКонфигурации.Вставить("РетроБонусы", "РетроБонусыСервер");
	
	МеханизмыКонфигурации.Вставить("РасчетыСПодотчетниками", "РегистрыНакопления.ДенежныеСредстваУПодотчетныхЛиц");
	МеханизмыКонфигурации.Вставить("РеестрДокументов", "РегистрыСведений.РеестрДокументов");
	МеханизмыКонфигурации.Вставить("ИсправлениеДокументов", "ИсправлениеДокументов");
	МеханизмыКонфигурации.Вставить("СебестоимостьИПартионныйУчет", "ПартионныйУчетСервер");
	МеханизмыКонфигурации.Вставить("СерийныйУчет", "РегистрыНакопления.ДвиженияСерийТоваров");
	МеханизмыКонфигурации.Вставить("СуммыДокументовВВалютахУчета", "РегистрыСведений.СуммыДокументовВВалютахУчета");
	МеханизмыКонфигурации.Вставить("УправлениеАссортиментом", "АссортиментСервер");
	МеханизмыКонфигурации.Вставить("УчетДенежныхСредств", "ДенежныеСредстваСервер");
	МеханизмыКонфигурации.Вставить("УчетДоходовРасходов", "ДоходыИРасходыСервер");
	МеханизмыКонфигурации.Вставить("УчетИмпорта", "УчетИмпорта");
	МеханизмыКонфигурации.Вставить("УчетНДС", "УчетНДСУП");
	МеханизмыКонфигурации.Вставить("УчетПрочихАктивовПассивов", "ПрочиеАктивыПассивыСервер");
	МеханизмыКонфигурации.Вставить("УчетРабот", "РегистрыНакопления.МатериалыИРаботыВПроизводстве");
	МеханизмыКонфигурации.Вставить("ФинансовыеИнструменты", "РегистрыНакопления.РасчетыПоФинансовымИнструментам");
	МеханизмыКонфигурации.Вставить("ФинансовыйРезультат", "РегистрыНакопления.ФинансовыеРезультаты");
	МеханизмыКонфигурации.Вставить("ЦеныИСкидки", "Ценообразование");
	
	
	МеханизмыКонфигурации.Вставить("ТМЦВЭксплуатации", "ТМЦВЭксплуатацииСервер");
	
	ПроведениеДокументовЛокализация.ДополнитьУчетныеМеханизмыКонфигурации(МеханизмыКонфигурации);
	
	Возврат МеханизмыКонфигурации;
	
КонецФункции

Процедура ЗаписатьДокумент(Документ, Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Свойства = СвойстваДокумента(Документ);
	МенеджерДокумента = Документы[Документ.Метаданные().Имя];
	ПроведениеДокументовЛокализация.ПереназначитьМодульПолученияДанныхДокумента(МенеджерДокумента);
	
	Если ТипЗнч(Документ) = Тип("ДокументОбъект.Сторно") Тогда
		// Список механизмов получим из сторнируемого документа
		МенеджерСторнируемогоДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Документ.СторнируемыйДокумент);
		МеханизмыДокумента    = УчетныеМеханизмыДокумента(МенеджерСторнируемогоДокумента);
	Иначе
		МеханизмыДокумента    = УчетныеМеханизмыДокумента(МенеджерДокумента);
	КонецЕсли;
	МеханизмыКонфигурации = УчетныеМеханизмыКонфигурации();
	
	ДвижимыеРегистры    = Новый Структура;
	Механизмы           = Новый СписокЗначений;
	Для каждого Механизм Из МеханизмыДокумента Цикл
		МодульМеханизма = ОбщегоНазначения.ОбщийМодуль(МеханизмыКонфигурации[Механизм]);
		
		ПараметрыМеханизма = МодульМеханизма.ПараметрыДляПроведенияДокумента(Документ, Свойства); // см. ПроведениеДокументов.ПараметрыУчетногоМеханизма - 
		ПараметрыМеханизма.Вставить("МодульМеханизма", МодульМеханизма);
		
		Для каждого Регистр Из ПараметрыМеханизма.НезависимыеРегистры Цикл
			ДвижимыеРегистры.Вставить(Регистр.Имя);
		КонецЦикла;
		
		Механизмы.Добавить(ПараметрыМеханизма, Механизм);
	КонецЦикла;
	Механизмы.СортироватьПоПредставлению();
	
	ТаблицыДляДвижений = ТаблицыДляДвижений(Документ, МенеджерДокумента, ДвижимыеРегистры, Неопределено);
	
	МенеджерВременныхТаблиц = Неопределено;
	
	ЗаписатьДвиженияНезависимыхРегистров(Механизмы, Документ, ТаблицыДляДвижений, МенеджерВременныхТаблиц, Отказ);
	
КонецПроцедуры

Процедура ПровестиДокумент(Документ, Отказ, ДопПараметры)
	
	УстановитьПривилегированныйРежим(Истина); 

	Свойства = СвойстваДокумента(Документ);
	МенеджерДокумента = Документы[Документ.Метаданные().Имя];
	ПроведениеДокументовЛокализация.ПереназначитьМодульПолученияДанныхДокумента(МенеджерДокумента);
	
	Если ТипЗнч(Документ) = Тип("ДокументОбъект.Сторно") Тогда
		// Список механизмов получим из сторнируемого документа
		МенеджерСторнируемогоДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Документ.СторнируемыйДокумент);
		МеханизмыДокумента    = УчетныеМеханизмыДокумента(МенеджерСторнируемогоДокумента);
	Иначе
		МеханизмыДокумента    = УчетныеМеханизмыДокумента(МенеджерДокумента);
	КонецЕсли;
	МеханизмыКонфигурации = УчетныеМеханизмыКонфигурации();
	
	ЗакрытиеМесяцаСервер.ИнициализироватьПараметрСеансаСформированныеЗадания(Документ);
	
	РегистрыКРегистрации = Новый Массив;
	ДвижимыеРегистры     = Новый Структура;
	Механизмы            = Новый СписокЗначений;
	Для каждого Механизм Из МеханизмыДокумента Цикл
		МодульМеханизма = ОбщегоНазначения.ОбщийМодуль(МеханизмыКонфигурации[Механизм]);
		
		ПараметрыМеханизма = МодульМеханизма.ПараметрыДляПроведенияДокумента(Документ, Свойства); // см. ПроведениеДокументов.ПараметрыУчетногоМеханизма
		ПараметрыМеханизма.Вставить("МодульМеханизма", МодульМеханизма);
		
		Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РегистрыКРегистрации, ПараметрыМеханизма.ПодчиненныеРегистры);
			
			Для каждого Регистр Из ПараметрыМеханизма.ПодчиненныеРегистры Цикл
				ДвижимыеРегистры.Вставить(Регистр.Имя);
			КонецЦикла;
			
			Для каждого Регистр Из ПараметрыМеханизма.НезависимыеРегистры Цикл
				ДвижимыеРегистры.Вставить(Регистр.Имя);
			КонецЦикла;
		КонецЕсли;
		
		Механизмы.Добавить(ПараметрыМеханизма, Механизм);
	КонецЦикла;
	Механизмы.СортироватьПоПредставлению();
	
	ЗаписываемыеРегистры = ПодготовитьНаборыЗаписейКРегистрацииДвижений(Документ, Свойства, РегистрыКРегистрации);
	
	Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ТаблицыДляДвижений = ТаблицыДляДвижений(Документ, МенеджерДокумента, ДвижимыеРегистры, ДопПараметры);
		ОтразитьДвиженияПодчиненныхРегистров(Механизмы, Документ, ТаблицыДляДвижений, Отказ);
	КонецЕсли;
	
	МенеджерВременныхТаблиц = МенеджерВременныхТаблицКонтроля(Документ);
	УстановитьДопСвойстваКонтрольныхРегистров(Механизмы, Документ, МенеджерВременныхТаблиц);
	
	Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ЗаписатьДвиженияНезависимыхРегистров(Механизмы, Документ, ТаблицыДляДвижений, МенеджерВременныхТаблиц, Отказ);
	КонецЕсли;
	
	ОбработатьДокументПередЗаписьюДвижений(Механизмы, Документ, МенеджерВременныхТаблиц, Отказ);

	Документ.Движения.Записать();
	
	ОбработатьДокументПослеЗаписиДвижений(Механизмы, Документ, МенеджерВременныхТаблиц, Отказ);
	ПроверитьДатуЗапретаПоТаблицеИзменений(Механизмы, Документ, МенеджерВременныхТаблиц, Отказ);
	ВыполнитьКонтрольРезультатовПроведения(Механизмы, Документ, МенеджерВременныхТаблиц, Отказ);
	
	Если Не Отказ Тогда
		СформироватьЗаданияНаОтложенныеДвижения(Документ, МенеджерВременныхТаблиц);
		ОтметитьВыполнениеОбработкиОбновленияПодчиненныхРегистров(ЗаписываемыеРегистры, Документ);
	КонецЕсли;
	
	ЗакрытиеМесяцаСервер.ПроверитьСформированныеЗаданияПриПроведенииДокумента(Документ, Отказ);
	
	МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры

// Формирует таблицы для движений по переданным параметрам и списку запросов.
//
// Параметры:
//	Запрос - Запрос - запрос, хранящий параметры используемые в списке запросов.
//	ТекстыЗапроса - СписокЗначений из Строка - список текстов запросов и их имен.
//	ТолькоПомеченные - Булево - "Истина" указывает на то, что возвращаются только те таблицы, у которых установлена
//	                            пометка в списке текстов запросов.
//
// Возвращаемое значение:
//	Структура - структура в которую помещены полученные таблицы.
//
Функция ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ТолькоПомеченные)
	
	Для Каждого ТекстЗапроса Из ТекстыЗапроса Цикл
		
		ИмяТаблицы = ТекстЗапроса.Представление;
		
		Если Не ПустаяСтрока(ИмяТаблицы) Тогда
			
			Если ТолькоПомеченные И Не ТекстЗапроса.Пометка Тогда
				ИмяТаблицы = "";
			ИначеЕсли Не СтрНачинаетсяС(ИмяТаблицы, "Таблица") Тогда
				// Таблицы для проведения должны начинаться с "Таблица".
				ИмяТаблицы = "Таблица" + ИмяТаблицы;
			КонецЕсли;
			
			ТекстЗапроса.Представление = ИмяТаблицы;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВыгрузитьРезультатыЗапросаПроведения(Запрос, ТекстыЗапроса);
	
КонецФункции

Функция ВыгрузитьРезультатыЗапросаПроведения(Запрос, ТекстыЗапроса) Экспорт
	
	Таблицы = Новый Структура;
	
	ОбходРезультата = ОбходРезультатаЗапроса.Прямой;
	
	Результаты = ОбщегоНазначенияУТ.ВыполнитьПакетЗапросов(Запрос, ТекстыЗапроса);
	
	Если Результаты <> Неопределено Тогда
		
		// Помещение результатов запроса в таблицы.
		ИндексРезультата = -1;
		Для Каждого ТекстЗапроса Из ТекстыЗапроса Цикл
			ИмяТаблицы = ТекстЗапроса.Представление;
			Подзапросы = СтрРазделить(СокрЛП(ТекстЗапроса.Значение), ";", Ложь);
			// Выгружаем результат последнего запроса пакета.
			ИндексРезультата = ИндексРезультата + Подзапросы.Количество(); 
			Если НЕ ПустаяСтрока(ИмяТаблицы) Тогда // имя таблицы
				Результат = Результаты[ИндексРезультата];
				Если Результат <> Неопределено Тогда
					ТаблицаЗапроса = Результат.Выгрузить(ОбходРезультата);
					Если Таблицы.Свойство(ТекстЗапроса.Представление) Тогда
						ОбъединитьТаблицыРезультатовЗапроса(ТаблицаЗапроса, Таблицы[ИмяТаблицы]);
					Иначе
						Таблицы.Вставить(ИмяТаблицы, ТаблицаЗапроса);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Таблицы;
	
КонецФункции

// Выполняет добавление строк из таблицы источника в таблицу приемник с предварительной проверкой:
// - типов колонок
// - состава колонок
// При необходимости выполняет корректировку таблицы-приемника.
// Параметры:
//  ТаблицаИсточник - ТаблицаЗначений -
//  ТаблицаПриемник - ТаблицаЗначений -
//
Процедура ОбъединитьТаблицыРезультатовЗапроса(ТаблицаИсточник, ТаблицаПриемник)
	
	КолонкиДляОбъединенияТипов = Новый Структура();
	КолонкиДляДобавления = Новый Структура();
	Для каждого КолонкаИсточника Из ТаблицаИсточник.Колонки Цикл
		КолонкаПриемника = ТаблицаПриемник.Колонки.Найти(КолонкаИсточника.Имя);
		Если КолонкаПриемника <> Неопределено Тогда
			
			КолонкаИсточникаТипы = КолонкаИсточника.ТипЗначения.Типы();
			ОтсутствующиеТипы = Новый Массив;
			
			// Проверим наличие типов входящих в описание источника в приемнике.
			// Если отсутствуют - объединим описания типов, пересоздадим колонки таблицы.
			Для каждого ТипКолонкиИсточника Из КолонкаИсточникаТипы Цикл
				Если НЕ КолонкаПриемника.ТипЗначения.СодержитТип(ТипКолонкиИсточника) Тогда
					ОтсутствующиеТипы.Добавить(ТипКолонкиИсточника);
				КонецЕсли;
			КонецЦикла;
			
			// Сравним квалификаторы примитивных типов источника и приемника.
			// Если в описании типов источника квалификаторы "более общие", то возьмем их.
			ИзменитьКвалификаторыЧисла = Ложь;
			КвалификаторыЧисла = КолонкаПриемника.ТипЗначения.КвалификаторыЧисла;
			Если КолонкаИсточника.ТипЗначения.СодержитТип(Тип("Число")) И КолонкаПриемника.ТипЗначения.СодержитТип(Тип("Число")) Тогда
				КвалификаторыЧислаИсточника = КолонкаИсточника.ТипЗначения.КвалификаторыЧисла;  
				Если КвалификаторыЧислаИсточника.Разрядность > КвалификаторыЧисла.Разрядность Тогда
					Разрядность = КвалификаторыЧислаИсточника.Разрядность;
					ИзменитьКвалификаторыЧисла = Истина;
				Иначе
					Разрядность = КвалификаторыЧисла.Разрядность;
				КонецЕсли;
				Если КвалификаторыЧислаИсточника.РазрядностьДробнойЧасти > КвалификаторыЧисла.РазрядностьДробнойЧасти Тогда
					РазрядностьДробнойЧасти = КвалификаторыЧислаИсточника.РазрядностьДробнойЧасти;
					ИзменитьКвалификаторыЧисла = Истина;
				Иначе
					РазрядностьДробнойЧасти = КвалификаторыЧисла.РазрядностьДробнойЧасти;
				КонецЕсли;
				Если КвалификаторыЧислаИсточника.ДопустимыйЗнак <> КвалификаторыЧисла.ДопустимыйЗнак Тогда
					Знак = ДопустимыйЗнак.Любой;
					ИзменитьКвалификаторыЧисла = Истина;
				Иначе
					Знак = КвалификаторыЧисла.ДопустимыйЗнак;
				КонецЕсли;
				Если ИзменитьКвалификаторыЧисла Тогда
					КвалификаторыЧисла = Новый КвалификаторыЧисла(Разрядность, РазрядностьДробнойЧасти, Знак);
				КонецЕсли;
			КонецЕсли;
			
			ИзменитьКвалификаторыСтроки = Ложь;
			КвалификаторыСтроки = КолонкаПриемника.ТипЗначения.КвалификаторыСтроки;
			Если КолонкаИсточника.ТипЗначения.СодержитТип(Тип("Строка")) 
				 И КолонкаПриемника.ТипЗначения.СодержитТип(Тип("Строка")) Тогда
				КвалификаторыСтрокиИсточника = КолонкаИсточника.ТипЗначения.КвалификаторыСтроки;
				Если КвалификаторыСтроки.Длина <> 0 И КвалификаторыСтрокиИсточника.Длина > КвалификаторыСтроки.Длина Тогда
					ИзменитьКвалификаторыСтроки = Истина;
					КвалификаторыСтроки = Новый КвалификаторыСтроки(КвалификаторыСтрокиИсточника.Длина);
				КонецЕсли; 
			КонецЕсли;
			
			ИзменитьКвалификаторыДаты = Ложь;
			КвалификаторыДаты = КолонкаПриемника.ТипЗначения.КвалификаторыДаты;
			Если КолонкаИсточника.ТипЗначения.СодержитТип(Тип("Дата")) 
				 И КолонкаПриемника.ТипЗначения.СодержитТип(Тип("Дата")) Тогда
				КвалификаторыДатыИсточника = КолонкаИсточника.ТипЗначения.КвалификаторыДаты;
				Если КвалификаторыДатыИсточника.ЧастиДаты <> КвалификаторыДаты.ЧастиДаты Тогда
					ИзменитьКвалификаторыДаты = Истина;
					КвалификаторыДаты = Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя);
				КонецЕсли; 
			КонецЕсли;
			
			ИзменитьКвалификаторыДвоичныхДанных = Ложь;
			КвалификаторыДвоичныхДанных = КолонкаПриемника.ТипЗначения.КвалификаторыДвоичныхДанных;
			Если КолонкаИсточника.ТипЗначения.СодержитТип(Тип("ДвоичныеДанные")) 
				 И КолонкаПриемника.ТипЗначения.СодержитТип(Тип("ДвоичныеДанные")) Тогда
				КвалификаторыДвоичныхДанныхИсточника = КолонкаИсточника.ТипЗначения.КвалификаторыДвоичныхДанных;
				Если КвалификаторыДвоичныхДанных.Длина <> 0 И КвалификаторыДвоичныхДанныхИсточника.Длина > КвалификаторыДвоичныхДанных.Длина Тогда
					ИзменитьКвалификаторыДвоичныхДанных = Истина;
					КвалификаторыДвоичныхДанных = Новый КвалификаторыДвоичныхДанных(КвалификаторыДвоичныхДанныхИсточника.Длина);
				КонецЕсли; 
			КонецЕсли;
			
			Если ОтсутствующиеТипы.Количество() > 0
				Или ИзменитьКвалификаторыЧисла 
				Или ИзменитьКвалификаторыСтроки 
				Или ИзменитьКвалификаторыДаты
				Или ИзменитьКвалификаторыДвоичныхДанных Тогда
				
				МассивТиповОбъединение = КолонкаПриемника.ТипЗначения.Типы();
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивТиповОбъединение, ОтсутствующиеТипы);
				
				ОписаниеТиповОбъединение = Новый ОписаниеТипов(МассивТиповОбъединение, 
															   КвалификаторыЧисла, 
															   КвалификаторыСтроки, 
															   КвалификаторыДаты, 
															   КвалификаторыДвоичныхДанных);
				КолонкиДляОбъединенияТипов.Вставить(КолонкаПриемника.Имя, ОписаниеТиповОбъединение);
			КонецЕсли;
		Иначе
			КолонкиДляДобавления.Вставить(КолонкаИсточника.Имя, КолонкаИсточника.ТипЗначения)
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Колонка Из КолонкиДляОбъединенияТипов Цикл
		ЗначенияВКолонке = ТаблицаПриемник.ВыгрузитьКолонку(Колонка.Ключ);
		ТаблицаПриемник.Колонки.Удалить(Колонка.Ключ);
		ТаблицаПриемник.Колонки.Добавить(Колонка.Ключ, Колонка.Значение);
		ТаблицаПриемник.ЗагрузитьКолонку(ЗначенияВКолонке, Колонка.Ключ);
	КонецЦикла;
	
	Для каждого Колонка Из КолонкиДляДобавления Цикл
		ТаблицаПриемник.Колонки.Добавить(Колонка.Ключ, Колонка.Значение);
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаИсточник, ТаблицаПриемник);
	
КонецПроцедуры

Процедура ДобавитьПоляВыборкиСторнирующегоЗапроса(Реквизиты, МассивПолейВыборки, Исключения, ИнвертироватьЧисловые = Ложь) Экспорт
	
	Шаблон = "ДанныеРегистра.%1 КАК %2";
	ШаблонОтрицательноеЧисло = "- " + Шаблон;
	
	Для каждого Реквизит Из Реквизиты Цикл
		Если Исключения.Найти(Реквизит.Имя) = Неопределено Тогда
			Если ИнвертироватьЧисловые И Реквизит.Тип.СодержитТип(Тип("Число")) Тогда
				МассивПолейВыборки.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонОтрицательноеЧисло,
					Реквизит.Имя,
					Реквизит.Имя));
			Иначе
				МассивПолейВыборки.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					Шаблон,
					Реквизит.Имя,
					Реквизит.Имя));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#Область ЭтапыПроведения

// Описание
// 
// Параметры:
// 	Документ - ДокументОбъект - Описание
// 	Свойства - см. ПроведениеДокументов.СвойстваДокумента
// 	Регистры - Массив Из ОбъектМетаданныхРегистрНакопления -
// 	         - Массив Из ОбъектМетаданныхРегистрСведений -
// 	         - Массив Из ОбъектМетаданныхРегистрБухгалтерии -
//
// Возвращаемое значение:
//  Массив Из Строка - Имена записываемых регистров
Функция ПодготовитьНаборыЗаписейКРегистрацииДвижений(Документ, Свойства, Регистры = Неопределено)
	
	ИменаРегистровДляЗаписи = Новый Массив;
	
	Если ЗначениеЗаполнено(Регистры) Тогда
		РегистрыКОбработке = Новый Массив;
		НаборыЗаписейКОбработке = Новый Массив;
		
		Движения = Документ.Метаданные().Движения;
		Для каждого Регистр Из Регистры Цикл
			Если Движения.Содержит(Регистр) Тогда
				РегистрыКОбработке.Добавить(Регистр);
				НаборыЗаписейКОбработке.Добавить(Документ.Движения[Регистр.Имя]);
			КонецЕсли;
		КонецЦикла;
	Иначе
		РегистрыКОбработке = Документ.Метаданные().Движения;
		НаборыЗаписейКОбработке = Документ.Движения;
	КонецЕсли;
	
	Для Каждого НаборЗаписей Из НаборыЗаписейКОбработке Цикл
		
		// Очистим наборы записей от "старых записей" (ситуация возможна только в толстом клиенте)
		Если ЗначениеЗаполнено(НаборЗаписей) И Не НаборЗаписей.Записывать Тогда
			НаборЗаписей.Очистить();
		КонецЕсли;
		
		// Пробросим свойства документа
		НаборЗаписей.ДополнительныеСвойства.Вставить("СвойстваДокумента", Свойства);
		
	КонецЦикла;
	
	// Взведем флаг записи у наборов, по которым документ имеет движения
	Если Не Свойства.ЭтоНовый Тогда
		
		МассивИменРегистров = ПолучитьИспользуемыеРегистры(Документ.Ссылка, РегистрыКОбработке);
		
		Для Каждого ИмяРегистра Из МассивИменРегистров Цикл
			Документ.Движения[ИмяРегистра].Записывать = Истина;
			ИменаРегистровДляЗаписи.Добавить(ИмяРегистра);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ИменаРегистровДляЗаписи;
	
КонецФункции

Функция ПолучитьИспользуемыеРегистры(Регистратор, СписокРегистров)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	
	Результат = Новый Массив;
	МаксимумТаблицВЗапросе = 256;
	СчетчикТаблиц = 0;
	ОсталосьРегистров = СписокРегистров.Количество();
	
	ТекстыЗапроса = Новый Массив;
	ШаблонЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	""&ИмяРегистра"" КАК ИмяРегистра
	|ИЗ
	|	&Таблица
	|ГДЕ
	|	Регистратор = &Регистратор";
	
	Для каждого Регистр Из СписокРегистров Цикл
		
		ТекстЗапроса = СтрЗаменить(ШаблонЗапроса, "&ИмяРегистра", Регистр.Имя);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Таблица", Регистр.ПолноеИмя());
		
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		
		СчетчикТаблиц = СчетчикТаблиц + 1;
		ОсталосьРегистров = ОсталосьРегистров - 1;
		
		Если СчетчикТаблиц = МаксимумТаблицВЗапросе Или ОсталосьРегистров = 0 И СчетчикТаблиц <> 0 Тогда
			
			Запрос.Текст  = СтрСоединить(ТекстыЗапроса, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
			СчетчикТаблиц = 0;
			ТекстыЗапроса.Очистить();
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИмяРегистра"));
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ТаблицыДляДвижений(Документ, МенеджерДокумента, ДвижимыеРегистры, ДопПараметры)
	
	Если ЗначениеЗаполнено(ДвижимыеРегистры) Тогда
		
		ИмяОперации = СтрШаблон("ПроведениеДокументов.%1.ТаблицыДляДвижений", Документ.Метаданные().Имя);
		ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(ИмяОперации);

		Если ДопПараметры = Неопределено Тогда
			ДопПараметры = ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
		КонецЕсли;
		
		ТаблицыДляДвижений = МенеджерДокумента.ДанныеДокументаДляПроведения(Документ, ДвижимыеРегистры, ДопПараметры);

		Если Документ.ДополнительныеСвойства.ПроведениеДокументов.Свойство("ДополнительныеТаблицыДанныхДокумента") Тогда
			Для Каждого Таблица Из Документ.ДополнительныеСвойства.ПроведениеДокументов.ДополнительныеТаблицыДанныхДокумента Цикл
				Если ТаблицыДляДвижений.Свойство(Таблица.Ключ) Тогда
					ВызватьИсключение СтрШаблон(НСтр("ru = 'Пересечение имен таблиц данных документа: ""%1"".'"), Таблица.Ключ);
				Иначе
					ТаблицыДляДвижений.Вставить(Таблица.Ключ, Таблица.Значение);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, 1);
		
		Возврат ТаблицыДляДвижений;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ОтразитьДвиженияПодчиненныхРегистров(Механизмы, Документ, ТаблицыДляДвижений, Отказ)
	
	Если СвойстваДокумента(Документ).РежимЗаписи = РежимЗаписиДокумента.Проведение И ЗначениеЗаполнено(ТаблицыДляДвижений) Тогда
		Для каждого Механизм Из Механизмы Цикл
			Механизм.Значение.МодульМеханизма.ОтразитьДвижения(ТаблицыДляДвижений, Документ.Движения, Отказ);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьДопСвойстваКонтрольныхРегистров(Механизмы, Документ, МенеджерВременныхТаблиц)
	
	Для каждого Механизм Из Механизмы Цикл
		Для каждого Регистр Из Механизм.Значение.КонтрольныеРегистрыЗаданий Цикл
			ДвиженияРегистра = Документ.Движения.Найти(Регистр.Имя);
			Если ДвиженияРегистра <> Неопределено И ДвиженияРегистра.Записывать Тогда
				УстановитьДопСвойстваДляКонтроля(
					ДвиженияРегистра,
					Документ,
					МенеджерВременныхТаблиц,
					Истина,
					Ложь,
					Ложь,
					Истина);
			КонецЕсли;
		КонецЦикла;
		Для каждого Регистр Из Механизм.Значение.КонтрольныеРегистрыИзменений Цикл
			ДвиженияРегистра = Документ.Движения.Найти(Регистр.Имя);
			Если ДвиженияРегистра <> Неопределено И ДвиженияРегистра.Записывать Тогда
				УстановитьДопСвойстваДляКонтроля(
					ДвиженияРегистра,
					Документ,
					МенеджерВременныхТаблиц,
					Истина,
					Истина,
					Ложь,
					Ложь);
			КонецЕсли;
		КонецЦикла;
		Для каждого Регистр Из Механизм.Значение.КонтрольныеРегистрыДатаЗапрета Цикл
			ДвиженияРегистра = Документ.Движения.Найти(Регистр.Имя);
			Если ДвиженияРегистра <> Неопределено И ДвиженияРегистра.Записывать Тогда
				УстановитьДопСвойстваДляКонтроля(
					ДвиженияРегистра,
					Документ,
					МенеджерВременныхТаблиц,
					Истина,
					Ложь,
					Истина,
					Ложь);
				ОтключитьПроверкуДатыЗапретаИзменения(ДвиженияРегистра);
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьДопСвойстваДляКонтроля(ДвиженияРегистра, Документ, МенеджерВременныхТаблиц, РассчитыватьИзменения,
			ЭтоКонтрольныйРегистрИзменений, ЭтоКонтрольныйРегистрДатЗапрета, ЭтоКонтрольныйРегистрЗаданий)
	
	ДопСвойстваРегистра = ДвиженияРегистра.ДополнительныеСвойства;
	ДопСвойстваРегистра.Вставить("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц);
	ДопСвойстваРегистра.Вставить("ТаблицыКонтроля", Документ.ДополнительныеСвойства.ПроведениеДокументов.ТаблицыКонтроля);
	ДопСвойстваРегистра.Вставить("ДатаРегистратора", Документ.Дата);
	ДопСвойстваРегистра.Вставить("РассчитыватьИзменения", РассчитыватьИзменения);
	Если ЭтоКонтрольныйРегистрИзменений <> Неопределено Тогда
		ДопСвойстваРегистра.Вставить("ЭтоКонтрольныйРегистрИзменений", ЭтоКонтрольныйРегистрИзменений);
	КонецЕсли;
	Если ЭтоКонтрольныйРегистрДатЗапрета <> Неопределено Тогда
		ДопСвойстваРегистра.Вставить("ЭтоКонтрольныйРегистрДатЗапрета", ЭтоКонтрольныйРегистрДатЗапрета);
	КонецЕсли;
	Если ЭтоКонтрольныйРегистрЗаданий <> Неопределено Тогда
		ДопСвойстваРегистра.Вставить("ЭтоКонтрольныйРегистрЗаданий", ЭтоКонтрольныйРегистрЗаданий);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтключитьПроверкуДатыЗапретаИзменения(ДвиженияРегистра)
	
	ДопСвойстваРегистра = ДвиженияРегистра.ДополнительныеСвойства;
	ДопСвойстваРегистра.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
	
КонецПроцедуры

Процедура ОбработатьДокументПередЗаписьюДвижений(Механизмы, Документ, МенеджерВременныхТаблиц, Отказ);
	
	Для каждого Механизм Из Механизмы Цикл
		Если Механизм.Значение.ЕстьПроизводныеДвижения Тогда
			Механизм.Значение.МодульМеханизма.ПередЗаписьюДвиженийДокумента(Документ, МенеджерВременныхТаблиц, Отказ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьДатуЗапретаПоТаблицеИзменений(Механизмы, Документ, МенеджерВременныхТаблиц, Отказ) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ШаблонЗапроса = "
	|ВЫБРАТЬ
	|	МИНИМУМ(Таблица.Период) КАК Период,
	|	Таблица.Организация КАК Организация,
	|	Таблица.ИмяРегистра КАК ИмяРегистра,
	|	Таблица.РазделДатыЗапрета КАК РазделДатыЗапрета
	|ИЗ
	|	&КоллекцияДанных КАК Таблица
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Организация,
	|	Таблица.РазделДатыЗапрета,
	|	Таблица.ИмяРегистра
	|;
	|";
	
	ТекстВложенногоЗапроса = "";
	ТекстЗапросаВременныхТаблиц = "";
	ИменаВременныхТаблиц = "";
	
	ДополнитьТекстЗапросаКонтроля(
		Запрос,
		ТекстВложенногоЗапроса,
		ТекстЗапросаВременныхТаблиц,
		ИменаВременныхТаблиц,
		Механизмы);
	
	ТекстУничтожитьВт = ЗакрытиеМесяцаСервер.ТестЗапросаУничтоженияВременныхТаблиц(ИменаВременныхТаблиц);
	
	Если ЗначениеЗаполнено(ТекстВложенногоЗапроса) Тогда // есть хотя бы один контрольный регистр.
		Запрос.Текст = ТекстЗапросаВременныхТаблиц
			+ СтрЗаменить(ШаблонЗапроса, "&КоллекцияДанных", "(" + ТекстВложенногоЗапроса + ")")
			+ ТекстУничтожитьВт;
			
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ДанныеДляПроверки = ДатыЗапретаИзменения.ШаблонДанныхДляПроверки();
			
			НоваяСтрока = ДанныеДляПроверки.Добавить();
			НоваяСтрока.Дата   = НачалоДня(Выборка.Период);
			НоваяСтрока.Объект = Выборка.Организация;
			НоваяСтрока.Раздел = Выборка.РазделДатыЗапрета;
			
			ОписаниеОшибки = НСтр("ru = 'Изменяемые данные находятся в закрытом периоде.'");
			Движения = Документ.Движения[Выборка.ИмяРегистра];
			Если Движения.ДополнительныеСвойства.Свойство("ПроверкаДатыЗапретаИзменения") 
					И НЕ Движения.ДополнительныеСвойства.ПроверкаДатыЗапретаИзменения Тогда
				Продолжить
			КонецЕсли;
			Если Движения.ДополнительныеСвойства.Свойство("ПропуститьПроверкуЗапретаИзменения") 
					И Движения.ДополнительныеСвойства.ПропуститьПроверкуЗапретаИзменения Тогда
				Продолжить
			КонецЕсли;
			Если ДатыЗапретаИзменения.НайденЗапретИзмененияДанных(ДанныеДляПроверки, 
					Новый Структура("НоваяВерсия, Данные", Истина, Документ.Движения[Выборка.ИмяРегистра]),
					ОписаниеОшибки) Тогда
				ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки, ,,,Отказ);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Дополняет текст запроса механизма расчета состояний.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 	ТекстЗапроса - Строка - строка с текстом запроса.
// 	ТекстЗапросаВременныхТаблиц - Строка - строка с текстом запроса временных таблиц.
// 	ИменаВременныхТаблиц - Строка - массив имен создаваемых временных таблиц для последующего уничтожения.
// 	Механизмы - СписокЗначений - список механизмов.
Процедура ДополнитьТекстЗапросаКонтроля(Запрос, ТекстЗапроса, ТекстЗапросаВременныхТаблиц, ИменаВременныхТаблиц, Механизмы)
	Для каждого Механизм Из Механизмы Цикл
		СоответствиеЗапросов = Механизм.Значение.МодульМеханизма.ТекстыЗапросовКонтрольДатыЗапретаПоТаблицеИзменений(Запрос);
		
		Для Каждого ЭлементСоответствия Из СоответствиеЗапросов Цикл
			ЗакрытиеМесяцаСервер.ДополнитьТекстЗапросаЗаданий(ЭлементСоответствия.Ключ,
				ЭлементСоответствия.Значение,
				Запрос.МенеджерВременныхТаблиц.Таблицы,
				ТекстЗапроса,
				ТекстЗапросаВременныхТаблиц,
				ИменаВременныхТаблиц);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры


// Выполняет запись движений в независимый регистр сведений.
// 
// Параметры:
// 	Механизмы - СписокЗначений Из см. ПроведениеДокументов.ПараметрыУчетногоМеханизма
// 	Документ - ДокументОбъект - 
// 	ТаблицыДляДвижений - Структура -
// 	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц -
// 	Отказ - Булево -
Процедура ЗаписатьДвиженияНезависимыхРегистров(Механизмы, Документ, ТаблицыДляДвижений, МенеджерВременныхТаблиц, Отказ)
	
	Если ЗначениеЗаполнено(ТаблицыДляДвижений) Тогда
		Для каждого Механизм Из Механизмы Цикл
			Если ЗначениеЗаполнено(Механизм.Значение.НезависимыеРегистры) Тогда
				Механизм.Значение.МодульМеханизма.ЗаписатьДанные(ТаблицыДляДвижений, Документ.Ссылка, МенеджерВременныхТаблиц, Отказ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьДокументПослеЗаписиДвижений(Механизмы, Документ, МенеджерВременныхТаблиц, Отказ);
	
	Для каждого Механизм Из Механизмы Цикл
		Если Механизм.Значение.ЕстьПроизводныеДвижения Тогда
			Механизм.Значение.МодульМеханизма.ПослеЗаписиДвиженийДокумента(Документ, МенеджерВременныхТаблиц, Отказ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьКонтрольРезультатовПроведения(Механизмы, Документ, МенеджерВременныхТаблиц, Отказ)
	
	Если ЗначениеЗаполнено(ПараметрыСеанса.ПараметрыОбработчикаОбновления.РежимВыполнения) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос        = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Для каждого Механизм Из Механизмы Цикл
		
		Если Не ЗначениеЗаполнено(Механизм.Значение.КонтрольныеРегистрыИзменений) Тогда
			Продолжить;
		КонецЕсли;
		
		Механизм.Значение.МодульМеханизма.ИнициализироватьДанныеКонтроляИзменений(Запрос, ТекстыЗапроса, Документ);
		
	КонецЦикла;
	
	Если ТекстыЗапроса.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РезультатыКонтроля = ОбщегоНазначенияУТ.ВыгрузитьРезультатыЗапроса(Запрос, ТекстыЗапроса,, Истина);
	
	Для каждого Механизм Из Механизмы Цикл
		
		Если Не ЗначениеЗаполнено(Механизм.Значение.КонтрольныеРегистрыИзменений) Тогда
			Продолжить;
		КонецЕсли;
		
		Механизм.Значение.МодульМеханизма.СообщитьОРезультатахКонтроляИзменений(РезультатыКонтроля, Документ, Отказ);
		
	КонецЦикла;
	
	Если Отказ Тогда
		
		Если СвойстваДокумента(Документ).РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			ТекстСообщения = НСтр("ru = 'Проведение не выполнено %1'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Отмена проведения не выполнена %1'");
		КонецЕсли;
		
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(ТекстСообщения, Строка(Документ)), Документ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтметитьВыполнениеОбработкиОбновленияПодчиненныхРегистров(ИменаРегистров, Документ)

	Если ОбновлениеИнформационнойБазы.ОтложенноеОбновлениеЗавершено() Тогда
		Возврат;
	КонецЕсли;
	
	ПланОбмена = Метаданные.ПланыОбмена.ОбновлениеИнформационнойБазы;
	
	Для каждого ИмяРегистра Из ИменаРегистров Цикл
		НаборЗаписей = Документ.Движения[ИмяРегистра];
		Если ПланОбмена.Состав.Содержит(НаборЗаписей.Метаданные()) Тогда
			ОбновлениеИнформационнойБазыУТ.ОтметитьВыполнениеОбработкиИнтерактивно(НаборЗаписей);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроведениеЧерезОперацииМеханизмов

Процедура ВставитьПомещениеВоВременнуюТаблицу(ТекстЗапроса, Знач ИмяВременнойТаблицы)
	
	Если ПозицияКлючевогоСлова("ПОМЕСТИТЬ", ТекстЗапроса) <> Неопределено Тогда //@Query-part
		Возврат;
	КонецЕсли;
	
	СтрокаЗамены = СтрШаблон("ПОМЕСТИТЬ %1 
		                     |ИЗ", ИмяВременнойТаблицы); //@Query-part
	// ПОМЕСТИТЬ необходимо вставить только в первый фрагмент объединения
	МассивОбъединений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекстЗапроса, "ОБЪЕДИНИТЬ"); //@Query-part
	ВыполнитьЗаменуПоПолномуСоответствию(МассивОбъединений[0], "ИЗ", СтрокаЗамены, Истина); //@Query-part
	ТекстЗапроса = СтрСоединить(МассивОбъединений,  "ОБЪЕДИНИТЬ"); //@Query-part
	
КонецПроцедуры

Процедура ВыполнитьЗаменуПоПолномуСоответствию(Текст, СтрокаПоиска, СтрокаЗамены, ТолькоПервый = Ложь)
	
	Если СтрокаПоиска = СтрокаЗамены Тогда
		Возврат;
	КонецЕсли; 
	
	ИсходныйТекст = Текст;
	Текст = "";
	
	ДлинаТекста = СтрДлина(ИсходныйТекст);
	ДлинаСтрокиПоиска = СтрДлина(СтрокаПоиска);
	ДлинаСтрокиЗамены = СтрДлина(СтрокаЗамены);
	
	РазницаСтрокПоискаИЗамены = ДлинаСтрокиЗамены - ДлинаСтрокиПоиска;
	
	ПозицияСтрокиПоиска = 1;
	НачальнаяПозицияПоиска = 1;
	
	Пока ПозицияСтрокиПоиска <> 0 Цикл
		
		ПозицияСтрокиПоиска = СтрНайти(ИсходныйТекст, СтрокаПоиска);
		Если ПозицияСтрокиПоиска = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ВыполнятьЗамену = Истина;
		Если ПозицияСтрокиПоиска > 1 Тогда
			ПредыдущийСимвол = Сред(ИсходныйТекст, ПозицияСтрокиПоиска -1 , 1);
			Если Не СлужебныйСимвол(ПредыдущийСимвол) Тогда
				ВыполнятьЗамену = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если ВыполнятьЗамену Тогда
			Если ПозицияСтрокиПоиска < ДлинаТекста Тогда
				СледующийСимвол = Сред(ИсходныйТекст, ПозицияСтрокиПоиска + ДлинаСтрокиПоиска, 1);
				Если Не СлужебныйСимвол(СледующийСимвол) Тогда
					ВыполнятьЗамену = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ВыполнятьЗамену Тогда	
			Текст = Текст + Лев(ИсходныйТекст, ПозицияСтрокиПоиска - 1) + СтрокаЗамены;
			ИсходныйТекст = Сред(ИсходныйТекст, ПозицияСтрокиПоиска + ДлинаСтрокиПоиска, ДлинаТекста);
			ДлинаТекста = ДлинаТекста - ПозицияСтрокиПоиска + 1 - ДлинаСтрокиПоиска;
			Если ТолькоПервый Тогда
				ПозицияСтрокиПоиска = 0;
				Продолжить;
			КонецЕсли;
		Иначе
			Текст = Текст + Лев(ИсходныйТекст, ПозицияСтрокиПоиска - 1) + СтрокаПоиска;
			ИсходныйТекст = Сред(ИсходныйТекст, ПозицияСтрокиПоиска + ДлинаСтрокиПоиска, ДлинаТекста);
			ДлинаТекста = ДлинаТекста - ПозицияСтрокиПоиска + 1 - ДлинаСтрокиПоиска;
		КонецЕсли;
		
	КонецЦикла;
	
	Текст = Текст + ИсходныйТекст; 
	
КонецПроцедуры

Функция РазобратьТекстЗапроса(Знач ТекстЗапроса)
	
	Результат = Новый Структура;
	
	ПозицияВЫБРАТЬ = ПозицияКлючевогоСлова("ВЫБРАТЬ", ТекстЗапроса); //@Query-part
	ПозицияИЗ      = ПозицияКлючевогоСлова("ИЗ", ТекстЗапроса); //@Query-part
	ПозицияГДЕ     = ПозицияКлючевогоСлова("ГДЕ", ТекстЗапроса); //@Query-part
	
	СимволовВыборки = ПозицияИЗ.НачальнаяПозиция - ПозицияВЫБРАТЬ.КонечнаяПозиция;
	ТекстВыборки = Сред(ТекстЗапроса, ПозицияВЫБРАТЬ.КонечнаяПозиция, СимволовВыборки); 
	СтруктураПолейВыборки = СтруктураПолейВыборки(ТекстВыборки);
	
	Если ПозицияГДЕ = Неопределено Тогда
		
		СимволовТаблицы = СтрДлина(ТекстЗапроса) - ПозицияИЗ.КонечнаяПозиция;
		ТекстТаблицы = СокрЛП(Прав(ТекстЗапроса, СимволовТаблицы));
		ТекстОтбор = "";
		
	Иначе
		
		СимволовТаблицы = ПозицияГДЕ.НачальнаяПозиция - ПозицияИЗ.КонечнаяПозиция;
		ТекстТаблицы = СокрЛП(Сред(ТекстЗапроса, ПозицияИЗ.КонечнаяПозиция, СимволовТаблицы));
		
		СимволовОтбор =  СтрДлина(ТекстЗапроса) - ПозицияГДЕ.КонечнаяПозиция;
		ТекстОтбор = СокрЛП(Прав(ТекстЗапроса, СимволовОтбор));
		
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ПоляВыборки", СтруктураПолейВыборки);
	Результат.Вставить("Таблицы", ТекстТаблицы);
	Результат.Вставить("Отбор", ТекстОтбор);
	
	Возврат Результат;
	
КонецФункции

Функция ЗапросОтраженияСВыборомДанныхИзВременнойТаблицы(Знач ТекстШаблонОтражения, Знач ИмяТаблицыДанных)
	
	ТекстЗапросОтражения = ТекстШаблонОтражения;
	
	ЧастиСтрокиПоиска = Новый Массив;
	ЧастиСтрокиПоиска.Добавить("#");
	ЧастиСтрокиПоиска.Добавить(ИмяТаблицыДанных);
	СтрокаПоиска = СтрСоединить(ЧастиСтрокиПоиска);
	
	ТекстЗапросОтражения = СтрЗаменить(ТекстШаблонОтражения, СтрокаПоиска, ИмяТаблицыДанных);
	
	Возврат ТекстЗапросОтражения;
	
КонецФункции

Функция ЗапросОтраженияСВыборомДанныхИзДокумента(Знач ТекстШаблонОтражения, Знач ИмяТаблицыДанных, Знач ТекстЗапросаДанных)
	
	ТекстЗапросОтражения = ТекстШаблонОтражения;
	
	Если СтрНайти(ТекстЗапросОтражения, "#" + ИмяТаблицыДанных, НаправлениеПоиска.СКонца) = 0 Тогда
		// В запросе не требуется выборка из таблицы данных.
		Возврат ТекстЗапросОтражения;
	КонецЕсли;
	
	Если ТипЗнч(ТекстЗапросаДанных) = Тип("Строка") Тогда
		РезультатРазбораТекстаЗапроса = РазобратьТекстЗапроса(ТекстЗапросаДанных);
	Иначе
		РезультатРазбораТекстаЗапроса = ТекстЗапросаДанных;
	КонецЕсли;
	
	ВыполнитьЗаменыВСекцииИЗ(ТекстЗапросОтражения, ИмяТаблицыДанных, РезультатРазбораТекстаЗапроса); 
	ВыполнитьЗаменыВСекцииВЫБРАТЬ(ТекстЗапросОтражения, ИмяТаблицыДанных, РезультатРазбораТекстаЗапроса);
	ОбъединитьОтборыВСекцииГДЕ(ТекстЗапросОтражения, ИмяТаблицыДанных, РезультатРазбораТекстаЗапроса);
	
	Возврат ТекстЗапросОтражения;
	
КонецФункции

Процедура ВыполнитьЗаменыВСекцииИЗ(ТекстЗапроса, ИмяТаблицыДанных, РезультатРазбораТекстаЗапросаДанных)
	
	СтрокаПоиска = СтрШаблон("#%1 КАК %1", ИмяТаблицыДанных);
	СтрокаЗамены = СтрШаблон("%1 //#%2", РезультатРазбораТекстаЗапросаДанных.Таблицы, ИмяТаблицыДанных);
	ВыполнитьЗаменуПоПолномуСоответствию(ТекстЗапроса, СтрокаПоиска, СтрокаЗамены);
	
КонецПроцедуры

Процедура ВыполнитьЗаменыВСекцииВЫБРАТЬ(ТекстЗапроса, ИмяТаблицыДанных, РезультатРазбораТекстаЗапросаДанных)
	
	ТегиДляЗамены = Новый Соответствие;
	Для каждого ПолеВыборки Из РезультатРазбораТекстаЗапросаДанных.ПоляВыборки Цикл
		СтрокаПоиска = СтрШаблон("%1.%2", ИмяТаблицыДанных, ПолеВыборки.Ключ); 
		ВыполнитьЗаменуПоПолномуСоответствию(ТекстЗапроса, СтрокаПоиска, ПолеВыборки.Значение);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбъединитьОтборыВСекцииГДЕ(ТекстЗапросОтражения, ИмяТаблицыДанных, РезультатРазбораТекстаЗапросаДанных)
	
	ОтборЗапросаДанныхДокумента = РезультатРазбораТекстаЗапросаДанных.Отбор; 
	Если Не ЗначениеЗаполнено(ОтборЗапросаДанныхДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	МассивФрагментовПакета = СтрРазделить(ТекстЗапросОтражения, ";");
	МаксимальныйИндексПакета = МассивФрагментовПакета.Количество() - 1;
	Для ИндексПакета = 0 По МаксимальныйИндексПакета Цикл 
		
		МассивФрагментовОбъединения = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(МассивФрагментовПакета[ИндексПакета], "ОБЪЕДИНИТЬ"); //@Query-part
		
		// Возможны два сценария вставки отбора
		// 1. Объединение с имеющимся отбором. Если отбор в запросе уже есть, то его берем в "()" и вставляем доп. отбор с "И".
		// 2. Добавление отбора. Если отбора в запросе нет, то вставляем вместе с "ГДЕ".
		// Место вставки определяем по ключевому слову, предшествующем отбору.
		// Если ключевое слово не найдено, то отбор вставляем в конец запроса.
		КлючевыеСлова = Новый Массив;
		КлючевыеСлова.Добавить("СГРУППИРОВАТЬ"); //@Query-part
		КлючевыеСлова.Добавить("УПОРЯДОЧИТЬ"); //@Query-part
		КлючевыеСлова.Добавить("ИТОГИ"); //@Query-part
		
		МаксимальныйИндексОбъединение = МассивФрагментовОбъединения.Количество() - 1; 
		Для ИндексОбъединения = 0 По МаксимальныйИндексОбъединение Цикл
			
			Если СтрНайти(МассивФрагментовОбъединения[ИндексОбъединения], "#" + ИмяТаблицыДанных) = 0 Тогда
				// В фрагменте объединения выборка из текущей таблицы данных не выполняется.
				Продолжить;
			КонецЕсли;
			
			ПозицияГДЕ = ПозицияКлючевогоСлова("ГДЕ", МассивФрагментовОбъединения[ИндексОбъединения]); //@Query-part
			
			КлючевоеСловоПередОтбором = Неопределено;
			Для каждого КлючевоеСлово Из КлючевыеСлова Цикл
				ПозицияКлючевогоСлова = ПозицияКлючевогоСлова(КлючевоеСлово, МассивФрагментовОбъединения[ИндексОбъединения]);
				Если ПозицияКлючевогоСлова <> Неопределено Тогда
					КлючевоеСловоПередОтбором = КлючевоеСлово;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ПозицияГДЕ = Неопределено Тогда
				Если КлючевоеСловоПередОтбором = Неопределено Тогда
					ШаблонОтбора = 
					   "ГДЕ
					   |	%1
					   |";
					ТекстОтбор = СтрШаблон(ШаблонОтбора, ОтборЗапросаДанныхДокумента);
					МассивФрагментовОбъединения[ИндексОбъединения] = МассивФрагментовОбъединения[ИндексОбъединения] + "
					   |" + ТекстОтбор;
				Иначе
					ШаблонОтбора = 
					   "ГДЕ
					   |	%1
					   |%2";
					ТекстОтбор = СтрШаблон(ШаблонОтбора, ОтборЗапросаДанныхДокумента, КлючевоеСловоПередОтбором);
					ВыполнитьЗаменуПоПолномуСоответствию(МассивФрагментовОбъединения[ИндексОбъединения],
														КлючевоеСловоПередОтбором,
														ТекстОтбор,
														Истина);
				КонецЕсли;
			Иначе
				Если КлючевоеСловоПередОтбором = Неопределено Тогда
					ШаблонОтбора = 
					   "ГДЕ
					   |	(%1) 
					   |	И (";
					ТекстОтбор = СтрШаблон(ШаблонОтбора, ОтборЗапросаДанныхДокумента);
					ВыполнитьЗаменуПоПолномуСоответствию(МассивФрагментовОбъединения[ИндексОбъединения],
														"ГДЕ", //@Query-part
														ТекстОтбор,
														Истина);
					МассивФрагментовОбъединения[ИндексОбъединения] = МассивФрагментовОбъединения[ИндексОбъединения] + ")";
				Иначе
					ШаблонОтбора = 
					   "ГДЕ
					   |	(%1) 
					   |	И (";
					ТекстОтбор = СтрШаблон(ШаблонОтбора, ОтборЗапросаДанныхДокумента);
					ВыполнитьЗаменуПоПолномуСоответствию(МассивФрагментовОбъединения[ИндексОбъединения],
														"ГДЕ", //@Query-part
														ТекстОтбор,
														Истина);
					ТекстЗаменыКлючевогоСлова = СтрШаблон(") %1", КлючевоеСловоПередОтбором);
					ВыполнитьЗаменуПоПолномуСоответствию(МассивФрагментовОбъединения[ИндексОбъединения],
														КлючевоеСловоПередОтбором,
														ТекстЗаменыКлючевогоСлова,
														Истина);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		МассивФрагментовПакета[ИндексПакета] = СтрСоединить(МассивФрагментовОбъединения, "ОБЪЕДИНИТЬ"); //@Query-part
		
	КонецЦикла;
	
	ТекстЗапросОтражения = СтрСоединить(МассивФрагментовПакета, ";");
	
КонецПроцедуры

Функция СтруктураПолейВыборки(ТекстВыборки)
	
	СтруктураПолейВыборки = Новый Структура;
	ПодстрокиВыборкиДляАнализа = СтрРазделить(ТекстВыборки, ",", Ложь);
	
	// Преобразуем массив подстрок выборки разделенных "," в массив выражений выборки.
	ПодстрокиВыборки = Новый Массив;
	ТекущийМассивПодстрок = Новый Массив;
	Для каждого Подстрока Из ПодстрокиВыборкиДляАнализа Цикл
		
		ТекущийМассивПодстрок.Добавить(Подстрока);
		ТекущаяПодстрока = СтрСоединить(ТекущийМассивПодстрок, ",");
		
		ЧислоВхожденийОткрытиеСкобки = СтрЧислоВхождений(ТекущаяПодстрока, "(");
		ЧислоВхожденийЗакрытиеСкобки = СтрЧислоВхождений(ТекущаяПодстрока, ")");
		ЧислоВхожденийДвойныхКавычек = СтрЧислоВхождений(ТекущаяПодстрока, """");
		
		Если ЧислоВхожденийОткрытиеСкобки = ЧислоВхожденийЗакрытиеСкобки И ЧислоВхожденийДвойныхКавычек%2 = 0 Тогда
			ПодстрокиВыборки.Добавить(ТекущаяПодстрока);
			ТекущийМассивПодстрок.Очистить();
		КонецЕсли;
		
	КонецЦикла;
	
	ДлинаСловаКАК = СтрДлина("КАК");
	// Сформируем структуру полей выборки:
	// - Ключ - Псевдоним
	// - Значение - Выражение
	Для каждого Подстрока Из ПодстрокиВыборки Цикл
		
		ПозицияКАК = СтрНайти(Подстрока, "КАК", НаправлениеПоиска.СКонца);
		Если ПозицияКАК = 0 Тогда
			ВызватьИсключение НСтр("ru = 'Для всех полей выборки должен быть задан псевдоним'");
		КонецЕсли;  
		
		Выражение = "(" + СокрЛП(Лев(Подстрока, ПозицияКАК - 1)) + ")";
		Псевдоним = СокрЛП(Прав(Подстрока, СтрДлина(Подстрока) - (ПозицияКАК + ДлинаСловаКАК)));
		СтруктураПолейВыборки.Вставить(Псевдоним, Выражение);
	КонецЦикла;
	
	Возврат СтруктураПолейВыборки;
	
КонецФункции

Функция ПозицияКлючевогоСлова(КлючевоеСлово, Знач ТекстЗапроса, Знач НачальнаяПозицияПоиска = 1, ПоискСКонца = Ложь)
	
	Результат = Неопределено;
	
	ДлинаСлова = СтрДлина(КлючевоеСлово);
	ДлинаЗапроса = СтрДлина(ТекстЗапроса);
	
	Если ПоискСКонца Тогда
		НаправлениеПоискаСлова = НаправлениеПоиска.СКонца;
		НачальнаяПозицияПоиска = ДлинаЗапроса - НачальнаяПозицияПоиска + 1;
	Иначе
		НаправлениеПоискаСлова = НаправлениеПоиска.СНачала;
	КонецЕсли;
	
	Если НачальнаяПозицияПоиска > ДлинаЗапроса Тогда
		Возврат Результат;
	КонецЕсли;
	
	Пока НачальнаяПозицияПоиска > 0 Цикл
		
		НачальнаяПозицияСлова = СтрНайти(ТекстЗапроса, КлючевоеСлово, НаправлениеПоискаСлова, НачальнаяПозицияПоиска);
		
		Если НачальнаяПозицияСлова = 0 Тогда
			// Ключевое слово не найдено
			Прервать;
		КонецЕсли;
		
		ЭтоКлючевоеСлово = Истина;
		
		ПозицияСледующегоСимвола = НачальнаяПозицияСлова + ДлинаСлова + 1;
		Если ПозицияСледующегоСимвола < ДлинаЗапроса Тогда
			СледующийСимвол = Сред(ТекстЗапроса, НачальнаяПозицияСлова + ДлинаСлова, 1);
			Если Не СлужебныйСимвол(СледующийСимвол) Тогда
				ЭтоКлючевоеСлово = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоКлючевоеСлово Тогда
			ПозицияПредыдущегоСимвола = НачальнаяПозицияСлова - 1;
			Если ПозицияПредыдущегоСимвола > 0 Тогда
				ПредыдущийСимвол = Сред(ТекстЗапроса, ПозицияПредыдущегоСимвола, 1);
				Если Не СлужебныйСимвол(ПредыдущийСимвол) Тогда
					ЭтоКлючевоеСлово = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоКлючевоеСлово Тогда
			// Слово найдено
			Результат = Новый Структура(
							"НачальнаяПозиция, КонечнаяПозиция", 
							НачальнаяПозицияСлова, НачальнаяПозицияСлова + ДлинаСлова);
			Прервать;
		КонецЕсли;
		
		Если ПоискСКонца Тогда
			НачальнаяПозицияПоиска = НачальнаяПозицияСлова - ДлинаСлова;
		Иначе
			НачальнаяПозицияПоиска = НачальнаяПозицияСлова + ДлинаСлова + 1;
			Если НачальнаяПозицияПоиска > ДлинаЗапроса Тогда
				НачальнаяПозицияПоиска = 0;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СлужебныйСимвол(Символ)
	
	Если Символ = " "
		ИЛИ Символ = "
					|"
		ИЛИ Символ = "."
		ИЛИ Символ = "	"
		ИЛИ Символ = ","
		ИЛИ Символ = ")"
		ИЛИ Символ = "("
		ИЛИ Символ = "-"
		ИЛИ Символ = "+"
		ИЛИ Символ = "/"
		ИЛИ Символ = "*"
		ИЛИ Символ = "" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область ВосстановлениеДвиженийДокументов

// Инициализирует структуру параметров проведения.
// 
// Параметры:
//  ИсточникДанных - Запрос, Неопределено - Источник данных
//  РасшифровкаКодовОшибок - Соответствие - Расшифровка кодов ошибок
//  ИмяВременнойТаблицыЧастичноеПроведение - Строка - Имя временной таблицы частичное проведение
//  ИмяВременнойТаблицыПолноеПроведение - Строка - Имя временной таблицы полное проведение
// 
// Возвращаемое значение:
//  Структура - Инициализировать параметры восстановления движений:
// * ИмяВременнойТаблицыЧастичноеПроведение - Строка -
// * ИмяВременнойТаблицыПолноеПроведение - Строка -
// * ТекстДополнительногоЗапросаПодготовкиДанных - Строка -
// * ПричинаПерепроведения - Строка -
// * ДополнительныеПоля - Неопределено -
// * ТолькоРегистрироватьОшибки - Булево -
// * ТолькоПерепроведение - Булево -
// * ОперацииЗакрытияМесяца - Неопределено -
// * ПериодРасчета - Неопределено -
// * Важность - Неопределено -
// * ЗаписыватьОшибкиВЖурналРегистрации - Булево -
// * ИмяСобытияЖурналаРегистрации - Строка -
// * ВызываетсяИзРасчетаСебестоимости - Булево -
// * ЭтапПроизводстваТолькоВТекущемПериоде - Булево -
// * ДокументыДляПолногоПроведения - ТаблицаЗначений -:
// ** Ссылка - ДокументСсылка - 
// ** Организация - СправочникСсылка.Организации -
// ** КодОшибки - Число -
Функция ИнициализироватьПараметрыВосстановленияДвижений(ИсточникДанных, РасшифровкаКодовОшибок,
			ИмяВременнойТаблицыЧастичноеПроведение = "", ИмяВременнойТаблицыПолноеПроведение = "") Экспорт
	
	ПараметрыПроведения = Новый Структура;
	ПараметрыПроведения.Вставить("ИсточникДанных", 							ИсточникДанных);
	ПараметрыПроведения.Вставить("РасшифровкаКодовОшибок", 					РасшифровкаКодовОшибок);
	ПараметрыПроведения.Вставить("ИмяВременнойТаблицыЧастичноеПроведение",	ИмяВременнойТаблицыЧастичноеПроведение);
	ПараметрыПроведения.Вставить("ИмяВременнойТаблицыПолноеПроведение",     ИмяВременнойТаблицыПолноеПроведение);
	
	ПараметрыПроведения.Вставить("ТекстДополнительногоЗапросаПодготовкиДанных", "");
	
	ПараметрыПроведения.Вставить("ПричинаПерепроведения", 				"");
	ПараметрыПроведения.Вставить("ДополнительныеПоля", 					Неопределено);
	ПараметрыПроведения.Вставить("ТолькоРегистрироватьОшибки", 			Ложь); // без перепроведения
	ПараметрыПроведения.Вставить("ТолькоПерепроведение", 				Ложь); // без регистрации ошибок
	ПараметрыПроведения.Вставить("ОперацииЗакрытияМесяца", 				Неопределено);
	ПараметрыПроведения.Вставить("ПериодРасчета", 						Неопределено);
	ПараметрыПроведения.Вставить("Важность", 							Неопределено);
	ПараметрыПроведения.Вставить("ЗаписыватьОшибкиВЖурналРегистрации",	Истина);
	ПараметрыПроведения.Вставить("ИмяСобытияЖурналаРегистрации", 		"");
	
	// Служебные параметры
	ПараметрыПроведения.Вставить("ВызываетсяИзРасчетаСебестоимости", 	  Ложь);
	ПараметрыПроведения.Вставить("ЭтапПроизводстваТолькоВТекущемПериоде", Ложь);
	
	ДокументыДляПолногоПроведения = Новый ТаблицаЗначений;
	ДокументыДляПолногоПроведения.Колонки.Добавить("Ссылка",		Новый ОписаниеТипов(Документы.ТипВсеСсылки()));
	ДокументыДляПолногоПроведения.Колонки.Добавить("Организация",	Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ДокументыДляПолногоПроведения.Колонки.Добавить("КодОшибки", 	Новый ОписаниеТипов("Число"));
	
	ПараметрыПроведения.Вставить("ДокументыДляПолногоПроведения", ДокументыДляПолногоПроведения); // документы, которые не получилось провести по отдельному регистру
	
	Возврат ПараметрыПроведения;
	
КонецФункции

// Перепроводит документы по нескольким регистрам накопления.
//
// Параметры:
//	ПараметрыПроведения - см. ИнициализироватьПараметрыВосстановленияДвижений
//
// Возвращаемое значение:
//  Структура -
//
Функция ВосстановитьДвиженияДокументов(ПараметрыПроведения) Экспорт
	
	РезультатПроведения = Новый Структура;
	РезультатПроведения.Вставить("ВремяФормирования", 	Новый Массив);
	РезультатПроведения.Вставить("ИзмененныеРегистры",  Новый Структура);
	РезультатПроведения.Вставить("ПроведеноДокументов", 0);
	РезультатПроведения.Вставить("ВыполненоУспешно",    Ложь);
	РезультатПроведения.Вставить("ОшибкиПроведения",    Новый Массив);
	РезультатПроведения.Вставить("РасшифровкаОшибок",   Новый Массив);
	
	НачалоВыполненияЗапроса = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	#Область ФормированиеТаблицыДокументов
	
	Запрос = ПараметрыПроведения.ИсточникДанных; // Запрос
	Запрос.УстановитьПараметр("ТипыСлужебныхДокументов", ТипыСлужебныхДокументовБезПерепроведения());
	
	ИсходныйТекстЗапроса = Запрос.Текст;
	
	СуществующиеВТ = РасчетСебестоимостиПрикладныеАлгоритмы.ПолучитьПереченьСуществующихВременныхТаблиц(Запрос);
	
	Запрос.Выполнить();
	
	СуществующиеВТ = РасчетСебестоимостиПрикладныеАлгоритмы.ПолучитьПереченьСуществующихВременныхТаблиц(Запрос, СуществующиеВТ);
		
	#КонецОбласти
	
	#Область ТаблицаМоментовВремени
	
	Если НЕ РасчетСебестоимостиПрикладныеАлгоритмы.ВременнаяТаблицаСуществует(Запрос, "ВТМоментыВремени") Тогда
		
		НовыйТекстЗапроса = "";
		ШаблонЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.Ссылка
		|ПОМЕСТИТЬ ВТРегистраторыСводно
		|ИЗ
		|	ИмяВременнойТаблицы КАК Т";
		
		Если ЗначениеЗаполнено(ПараметрыПроведения.ИмяВременнойТаблицыЧастичноеПроведение) Тогда
			
			НовыйТекстЗапроса = СтрЗаменить(ШаблонЗапроса, "ИмяВременнойТаблицы", ПараметрыПроведения.ИмяВременнойТаблицыЧастичноеПроведение);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрыПроведения.ИмяВременнойТаблицыПолноеПроведение) Тогда
			
			Если НЕ ЗначениеЗаполнено(ПараметрыПроведения.ИмяВременнойТаблицыЧастичноеПроведение) Тогда
				
				НовыйТекстЗапроса = СтрЗаменить(ШаблонЗапроса, "ИмяВременнойТаблицы", ПараметрыПроведения.ИмяВременнойТаблицыПолноеПроведение);
				
			Иначе
				
				НовыйТекстЗапроса = НовыйТекстЗапроса + "
					|
					|ОБЪЕДИНИТЬ
					|" 
					+ СтрЗаменить(
						СтрЗаменить(ШаблонЗапроса, "ПОМЕСТИТЬ ВТРегистраторыСводно", ""),
						"ИмяВременнойТаблицы",
						ПараметрыПроведения.ИмяВременнойТаблицыПолноеПроведение);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Запрос.Текст = НовыйТекстЗапроса;
		Запрос.Выполнить();
		
		РасчетСебестоимостиПрикладныеАлгоритмы.СформироватьТаблицуМоментовВремени(Запрос, "ВТРегистраторыСводно", "Ссылка"); // создает ВТМоментыВремени
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область КорректировкаДанныхДляОбработки
	
	Если ЗначениеЗаполнено(ПараметрыПроведения.ТекстДополнительногоЗапросаПодготовкиДанных) Тогда
		
		Запрос.Текст = ПараметрыПроведения.ТекстДополнительногоЗапросаПодготовкиДанных;
		Запрос.Выполнить();
		
	КонецЕсли;
	
	#КонецОбласти
	
	РезультатПроведения.ВремяФормирования.Добавить(Новый Структура("ВремяНачала, ВремяОкончания", НачалоВыполненияЗапроса, ТекущаяУниверсальнаяДатаВМиллисекундах()));
	
	ЕстьДокументыДляЧастичногоПроведения = Ложь;
	ЕстьДокументыДляПолногоПроведения    = Ложь;
	ИмяВременнойТаблицыПолноеПроведение  = ПараметрыПроведения.ИмяВременнойТаблицыПолноеПроведение;
	
	РазмерТаблицыПерепроведения = 0
		+ ?(ЗначениеЗаполнено(ПараметрыПроведения.ИмяВременнойТаблицыЧастичноеПроведение),
			РасчетСебестоимостиПрикладныеАлгоритмы.РазмерВременнойТаблицы(Запрос, ПараметрыПроведения.ИмяВременнойТаблицыЧастичноеПроведение), 0)
		+ ?(ЗначениеЗаполнено(ИмяВременнойТаблицыПолноеПроведение),
			РасчетСебестоимостиПрикладныеАлгоритмы.РазмерВременнойТаблицы(Запрос, ИмяВременнойТаблицыПолноеПроведение), 0);
	
	#Область ВосстановлениеДвижений
	
	Если НЕ ПараметрыПроведения.ТолькоРегистрироватьОшибки Тогда
		
		#Область ЧастичноеВосстановлениеДвижений
		
		Если ЗначениеЗаполнено(ПараметрыПроведения.ИмяВременнойТаблицыЧастичноеПроведение) Тогда
			
			НовыйТекстЗапроса =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Т.ИмяРегистра 				 КАК ИмяРегистра,
			|	Т.Ссылка 	  				 КАК Ссылка,
			|	Т.Организация  				 КАК Организация,
			|	Т.КодОшибки   				 КАК КодОшибки,
			|	МоментыВремени.МоментВремени КАК МоментВремени
			|ИЗ
			|	ИмяВременнойТаблицы КАК Т
			|	ЛЕВОЕ СОЕДИНЕНИЕ ВТМоментыВремени КАК МоментыВремени
			|		ПО Т.Ссылка = МоментыВремени.Ссылка
			|ГДЕ
			|	НЕ (ТИПЗНАЧЕНИЯ(Т.Ссылка) В (&ТипыСлужебныхДокументов))
			|
			|УПОРЯДОЧИТЬ ПО
			|	ИмяРегистра,
			|	МоментВремени
			|
			|ИТОГИ ПО
			|	ИмяРегистра";
			
			НовыйТекстЗапроса = СтрЗаменить(НовыйТекстЗапроса, "ИмяВременнойТаблицы", ПараметрыПроведения.ИмяВременнойТаблицыЧастичноеПроведение);
			
			Запрос.Текст = НовыйТекстЗапроса;
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ЕстьДокументыДляЧастичногоПроведения = НЕ РезультатЗапроса.Пустой();
			
		КонецЕсли;
		
		Если ЕстьДокументыДляЧастичногоПроведения Тогда
			
			// Обнаружены некорректные движения.
			ВыборкаРегистры = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаРегистры.Следующий() Цикл
				
				// Перепроведем документы с некорректными движениями по текущему регистру.
				ВыборкаРегистраторы = ВыборкаРегистры.Выбрать();
				
				РезультатПроведения.ИзмененныеРегистры.Вставить(СокрЛП(ВыборкаРегистры.ИмяРегистра), ВыборкаРегистраторы.Количество());
				
				ОшибкиПроведения = ПерепровестиДокументыПоРегиструНакопления(ПараметрыПроведения, ВыборкаРегистраторы, СокрЛП(ВыборкаРегистры.ИмяРегистра));
				
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РезультатПроведения.ОшибкиПроведения, ОшибкиПроведения, Ложь);
				
			КонецЦикла;
				
		КонецЕсли;
		
		#КонецОбласти
		
		#Область ПолноеВосстановлениеДвижений
		
		Если ЗначениеЗаполнено(ИмяВременнойТаблицыПолноеПроведение)
		 ИЛИ ЗначениеЗаполнено(ПараметрыПроведения.ДокументыДляПолногоПроведения) Тогда
		 
			Если ЗначениеЗаполнено(ПараметрыПроведения.ДокументыДляПолногоПроведения) Тогда
				
				ПереченьПолей = "%1" + "Ссылка" + ",%1" + "Организация" + ",%1" + "КодОшибки";
				
				Если ЗначениеЗаполнено(ИмяВременнойТаблицыПолноеПроведение) Тогда
					
					// Дополним таблицу документов для полного проведения.
					РасчетСебестоимостиПрикладныеАлгоритмы.ОбъединитьТаблицуЗначенийИВременнуюТаблицу(
						Запрос,
						ИмяВременнойТаблицыПолноеПроведение,
						ПараметрыПроведения.ДокументыДляПолногоПроведения,
						ПереченьПолей,
						ПереченьПолей,
						"");
					
				Иначе
					
					ИмяВременнойТаблицыПолноеПроведение = "ВТРегистраторыДляПолногоПроведения";
					
					// Создадим таблицу документов для полного проведения.
					РасчетСебестоимостиПрикладныеАлгоритмы.ПоместитьТаблицуЗначенийВоВременнуюТаблицу(
						Запрос,
						ИмяВременнойТаблицыПолноеПроведение,
						ПараметрыПроведения.ДокументыДляПолногоПроведения,
						ПереченьПолей);
					
				КонецЕсли;
				
			КонецЕсли;
			
	 	КонецЕсли;
	 	
		Если ЗначениеЗаполнено(ИмяВременнойТаблицыПолноеПроведение) Тогда
			
			НовыйТекстЗапроса =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Т.Ссылка 	  				 КАК Ссылка,
			|	Т.Организация  				 КАК Организация,
			|	Т.КодОшибки   				 КАК КодОшибки,
			|	МоментыВремени.МоментВремени КАК МоментВремени
			|ИЗ
			|	ИмяВременнойТаблицы КАК Т
			|	ЛЕВОЕ СОЕДИНЕНИЕ ВТМоментыВремени КАК МоментыВремени
			|		ПО Т.Ссылка = МоментыВремени.Ссылка
			|ГДЕ
			|	НЕ (ТИПЗНАЧЕНИЯ(Т.Ссылка) В (&ТипыСлужебныхДокументов))
			|
			|УПОРЯДОЧИТЬ ПО
			|	МоментВремени";
			
			НовыйТекстЗапроса = СтрЗаменить(НовыйТекстЗапроса, "ИмяВременнойТаблицы", ИмяВременнойТаблицыПолноеПроведение);
			
			Запрос.Текст = НовыйТекстЗапроса;
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ЕстьДокументыДляПолногоПроведения = НЕ РезультатЗапроса.Пустой();
			
		КонецЕсли;
		
		Если ЕстьДокументыДляПолногоПроведения Тогда
			
			// Перепроведем документы с некорректными движениями по текущему регистру.
			ВыборкаРегистраторы = РезультатЗапроса.Выбрать();
			
			РезультатПроведения.ПроведеноДокументов = ВыборкаРегистраторы.Количество();
			
			ОшибкиПроведения = ПерепровестиДокументыПолностью(ПараметрыПроведения, ВыборкаРегистраторы);
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РезультатПроведения.ОшибкиПроведения, ОшибкиПроведения, Ложь);
			
		КонецЕсли;
		
		#КонецОбласти
		
		#Область ПереформированиеТаблицыДокументов
		
		Если (ЕстьДокументыДляЧастичногоПроведения ИЛИ ЕстьДокументыДляПолногоПроведения)
		 И НЕ ПараметрыПроведения.ТолькоПерепроведение Тогда
			
			// Повторно проанализируем движения после перепроведения документов - ожидаем, что теперь ошибок быть не должно.
			// Служебные документы включаем в результат - об их ошибках тоже надо сообщить.
			РасчетСебестоимостиПрикладныеАлгоритмы.УничтожитьВременныеТаблицы(Запрос, СуществующиеВТ);
			
			НачалоВыполненияЗапроса = ТекущаяУниверсальнаяДатаВМиллисекундах();
			
			Запрос.Текст = ИсходныйТекстЗапроса;
			
			Запрос.Выполнить();
			
			Если ЗначениеЗаполнено(ПараметрыПроведения.ТекстДополнительногоЗапросаПодготовкиДанных) Тогда
				
				Запрос.Текст = ПараметрыПроведения.ТекстДополнительногоЗапросаПодготовкиДанных;
				Запрос.Выполнить();
				
			КонецЕсли;
			
			РезультатПроведения.ВремяФормирования.Добавить(Новый Структура("ВремяНачала, ВремяОкончания", НачалоВыполненияЗапроса, ТекущаяУниверсальнаяДатаВМиллисекундах()));
			
			РазмерТаблицыПерепроведения = 0
				+ ?(ЗначениеЗаполнено(ПараметрыПроведения.ИмяВременнойТаблицыЧастичноеПроведение),
					РасчетСебестоимостиПрикладныеАлгоритмы.РазмерВременнойТаблицы(Запрос, ПараметрыПроведения.ИмяВременнойТаблицыЧастичноеПроведение), 0)
				+ ?(ЗначениеЗаполнено(ИмяВременнойТаблицыПолноеПроведение),
					РасчетСебестоимостиПрикладныеАлгоритмы.РазмерВременнойТаблицы(Запрос, ИмяВременнойТаблицыПолноеПроведение), 0);
			
			РезультатПроведения.ВыполненоУспешно = (РазмерТаблицыПерепроведения = 0);
			
		КонецЕсли;
		
		#КонецОбласти
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область РегистрацияОшибок
	
	Если НЕ ПараметрыПроведения.ТолькоПерепроведение И РазмерТаблицыПерепроведения > 0 Тогда
		
	 	// Остались некорректные движения. Соберем детальную информацию об ошибках в движениях документов.
		ШаблонТекстаЗапроса =
		"ВЫБРАТЬ
		|	&ДополнительныеПоля,
		|	Т.ИмяРегистра 				 КАК ИмяРегистра,
		|	Т.Ссылка 	  				 КАК Ссылка,
		|	Т.Организация  				 КАК Организация,
		|	ЕСТЬNULL(МоментыВремени.МоментВремени, НЕОПРЕДЕЛЕНО) КАК МоментВремени,
		|	Т.КодОшибки   				 КАК КодОшибки
		|ИЗ
		|	ИмяВременнойТаблицы КАК Т
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТМоментыВремени КАК МоментыВремени
		|		ПО Т.Ссылка = МоментыВремени.Ссылка
		|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРегистров КАК Корректировки
		|		ПО Т.Ссылка = Корректировки.Ссылка
		|ГДЕ
		|	Корректировки.Ссылка ЕСТЬ NULL
		|	ИЛИ Корректировки.Операция В
		|		(ЗНАЧЕНИЕ(Перечисление.ОперацииКорректировкиРегистров.ПустаяСсылка),
		|		 ЗНАЧЕНИЕ(Перечисление.ОперацииКорректировкиРегистров.РучнаяКорректировка))
		|";
		
		Запрос.Текст = "";
		
		Если ЗначениеЗаполнено(ПараметрыПроведения.ИмяВременнойТаблицыЧастичноеПроведение) Тогда
			Запрос.Текст = СтрЗаменить(ШаблонТекстаЗапроса, "ИмяВременнойТаблицы", ПараметрыПроведения.ИмяВременнойТаблицыЧастичноеПроведение);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрыПроведения.ИмяВременнойТаблицыПолноеПроведение) Тогда
			
			Если ЗначениеЗаполнено(Запрос.Текст) Тогда
				Запрос.Текст = Запрос.Текст + "
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|";
			КонецЕсли;
			
			Запрос.Текст = Запрос.Текст
				+ СтрЗаменить(
					СтрЗаменить(ШаблонТекстаЗапроса, "Т.ИмяРегистра", """"""),
					"ИмяВременнойТаблицы", ПараметрыПроведения.ИмяВременнойТаблицыПолноеПроведение);
			
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	КодОшибки,
		|	МоментВремени,
		|	ИмяРегистра
		|
		|ИТОГИ ПО
		|	КодОшибки";
		
		ТекстДополнительныхПолей = "";
		
		Если ПараметрыПроведения.ДополнительныеПоля <> Неопределено Тогда
			Для Каждого Поле Из ПараметрыПроведения.ДополнительныеПоля Цикл
				ТекстДополнительныхПолей = ТекстДополнительныхПолей + "Т." + Поле.Ключ + ", ";
			КонецЦикла;
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДополнительныеПоля,", ТекстДополнительныхПолей);
		
		ВыборкаКодыОшибок = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаКодыОшибок.Следующий() Цикл
			
			ТекстОшибки = ПараметрыПроведения.РасшифровкаКодовОшибок[ВыборкаКодыОшибок.КодОшибки];
			
			Если НЕ ЗначениеЗаполнено(ТекстОшибки) Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='№%1, описание отсутствует'", ОбщегоНазначения.КодОсновногоЯзыка()),
					ВыборкаКодыОшибок.КодОшибки);
			КонецЕсли;
			
			РасшифровкаОшибки = Новый Массив;
			
			Выборка = ВыборкаКодыОшибок.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				ТекстДополнительныхПолей = "";
				
				Если ПараметрыПроведения.ДополнительныеПоля <> Неопределено Тогда
					Для Каждого Поле Из ПараметрыПроведения.ДополнительныеПоля Цикл
						Если ЗначениеЗаполнено(Выборка[Поле.Ключ]) Тогда
							ТекстДополнительныхПолей = ТекстДополнительныхПолей
								+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(", %1 ""%2""", Поле.Значение, Выборка[Поле.Ключ]);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СокрЛП(Выборка.ИмяРегистра)) Тогда
					ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='%1 (%2), организация ""%3"", регистр ""%4""%5'", ОбщегоНазначения.КодОсновногоЯзыка()),
						СокрЛП(Выборка.Ссылка),
						ПолучитьНавигационнуюСсылку(Выборка.Ссылка),
						СокрЛП(Выборка.Организация),
						СокрЛП(Выборка.ИмяРегистра),
						ТекстДополнительныхПолей);
				Иначе
					ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='%1 (%2), организация ""%3""%4'", ОбщегоНазначения.КодОсновногоЯзыка()),
						СокрЛП(Выборка.Ссылка),
						ПолучитьНавигационнуюСсылку(Выборка.Ссылка),
						СокрЛП(Выборка.Организация),
						ТекстДополнительныхПолей);
				КонецЕсли;
				
				РасшифровкаОшибки.Добавить(ТекстДляПротокола);
				
				Если ЗначениеЗаполнено(ПараметрыПроведения.ОперацииЗакрытияМесяца) Тогда
					
					ЗарегистрироватьПроблемуВЗакрытииМесяца(
						ПараметрыПроведения,
						Выборка.Организация,
						НСтр("ru='Не удалось исправить проблемы в движениях документов'", ОбщегоНазначения.КодОсновногоЯзыка()),
						ТекстОшибки + ":" + Символы.ПС + ТекстДляПротокола,
						Выборка.Ссылка);
					
				КонецЕсли;
					
			КонецЦикла;
			
			РезультатПроведения.РасшифровкаОшибок.Добавить(
				Новый Структура("ТипОшибки, Подробнее", ТекстОшибки, РасшифровкаОшибки));
			
		КонецЦикла;
		
	Иначе
		
		РезультатПроведения.ВыполненоУспешно = (РазмерТаблицыПерепроведения = 0);
		
	КонецЕсли;
	
	#КонецОбласти
	
	Запрос.Текст = ИсходныйТекстЗапроса;
	
	РасчетСебестоимостиПрикладныеАлгоритмы.УничтожитьВременныеТаблицы(
		Запрос,
		РасчетСебестоимостиУниверсальныеАлгоритмы.СоединитьСтроки(
			ПараметрыПроведения.ИмяВременнойТаблицыЧастичноеПроведение,
			ПараметрыПроведения.ИмяВременнойТаблицыПолноеПроведение,
			"ВТРегистраторыСводно, ВТМоментыВремени, ВТРегистраторыДляПолногоПроведения"));
	
	Возврат РезультатПроведения;
	
КонецФункции

// Перепроводит документы по одному регистру накопления.
//
// Параметры:
//	ПараметрыПроведения - см. ИнициализироватьПараметрыВосстановленияДвижений
//	ВыборкаДокументов - ВыборкаИзРезультатаЗапроса - выборка запроса, обязательно должна содержать поле Ссылка
//	ИмяРегистраНакопления - Строка - имя регистра накопления, по которому надо перепровести документы.
//
// Возвращаемое значение:
//	Массив из Строка - Ошибки проведения
//
Функция ПерепровестиДокументыПоРегиструНакопления(ПараметрыПроведения, ВыборкаДокументов, ИмяРегистраНакопления) Экспорт
	
	ОшибкиПроведения = Новый Массив;
	
	Если ВыборкаДокументов.Количество() = 0 Тогда
		Возврат ОшибкиПроведения;
	КонецЕсли;
	
	ОбработанныеДокументы = Новый Соответствие;
	
	РегистрыСОчисткой = РегистрыДляПредварительнойОчисткиПриПерепроведении();
	
	НаборЗаписей = РегистрыНакопления[ИмяРегистраНакопления].СоздатьНаборЗаписей();
	НаборЗаписей.ДополнительныеСвойства.Вставить(РасчетСебестоимостиПрикладныеАлгоритмы.ИмяСлужебногоДополнительногоСвойстваОбъекта(), Истина);
	НаборЗаписей.ДополнительныеСвойства.Вставить("ДатаРегистратора", ПараметрыПроведения.ПериодРасчета);
	НаборЗаписей.ДополнительныеСвойства.Вставить("НеСохранятьРасчетныеДвижения", Истина);
	
	// Сформируем запрос для сохранения движений документа в прошлых периодах.
	// Другие механики сохранения движений вызываться не будут.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыПроведения.ПериодРасчета);
	Запрос.УстановитьПараметр("КонецПериода",  КонецМесяца(ПараметрыПроведения.ПериодРасчета));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	ИмяРегистраНакопления КАК Т
	|ГДЕ
	|	Т.Регистратор = &Регистратор
	|	И Т.Период < &НачалоПериода";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяРегистраНакопления", "РегистрНакопления." + ИмяРегистраНакопления);
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		Регистратор = ВыборкаДокументов.Ссылка;
		
		Если ОбработанныеДокументы.Получить(Регистратор) <> Неопределено Тогда
			Продолжить; // у одного документа движения по нескольким организациям, повторно перепроводить его не нужно
		КонецЕсли;
		
		УстановитьДопСвойстваРегистра(
			НаборЗаписей,
			ЭмуляцияДокумента(
				Регистратор,
				ПараметрыПроведения.ПериодРасчета));
	
		ДопПараметры = ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
		
		
		НачатьТранзакцию();
		
		Попытка
			
			Если ПроведениеДокументовЛокализация.ПерепровестиДокументыПоРегиструНакопления(Регистратор) Тогда
				// Проведение выполнено в модуле локализации.
			Иначе
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления." + ИмяРегистраНакопления + ".НаборЗаписей");
				ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
				Блокировка.Заблокировать();
				
				ДатыЗапретаИзмененияУТ.ОтключитьПроверкуДатыЗапретаИзменения(НаборЗаписей);
				
				НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
				НаборЗаписей.Очистить();
				
				Если РегистрыСОчисткой.Свойство(ИмяРегистраНакопления) Тогда
					
					НаборЗаписей.Записывать = Истина;
					НаборЗаписей.Записать(Истина);
					
				КонецЕсли;
				
				ТаблицыДляДвижений = ДанныеДокументаДляПроведения(Регистратор, ИмяРегистраНакопления, ДопПараметры);
				
				// Если у документа нет нужной таблицы движений, то это значит что документ больше не формирует движения
				// по указанному регистру. Ранее сформированные движения будут очищены.
				ТекущаяТаблица = Неопределено; //ТаблицаЗначений
				ТаблицыДляДвижений.Свойство("Таблица" + ИмяРегистраНакопления, ТекущаяТаблица);
				
				Если ЗначениеЗаполнено(ТекущаяТаблица) Тогда
					
					Если ТекущаяТаблица.Колонки.Найти("Период") <> Неопределено Тогда // движения в виде выборки
						
						// Добавим в набор первичные движения документа в текущем и последующих периодах.
						Для Каждого СтрокаТаблицыДвижений Из ТаблицыДляДвижений["Таблица" + ИмяРегистраНакопления] Цикл
							
							Если НачалоМесяца(СтрокаТаблицыДвижений.Период) >= ПараметрыПроведения.ПериодРасчета Тогда
								ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), СтрокаТаблицыДвижений);
							КонецЕсли;
							
						КонецЦикла;
						
					Иначе
						
						// Движения во временной таблице - перепроведем документ целиком.
						НоваяСтрока = ПараметрыПроведения.ДокументыДляПолногоПроведения.Добавить();
						НоваяСтрока.Ссылка 		= Регистратор;
						НоваяСтрока.Организация = ВыборкаДокументов.Организация;
						НоваяСтрока.КодОшибки 	= ВыборкаДокументов.КодОшибки;
						
					КонецЕсли;
					
				КонецЕсли;
				
				// Дополним всеми движениями документа в прошлых периодах из ИБ.
				Запрос.УстановитьПараметр("Регистратор", Регистратор);
				ВыборкаДвижений = Запрос.Выполнить().Выбрать();
				
				Пока ВыборкаДвижений.Следующий() Цикл
					ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), ВыборкаДвижений);
				КонецЦИкла;
				
				НаборЗаписей.Записывать = Истина;
				НаборЗаписей.Записать(Истина);
				НаборЗаписей.Очистить();
				
			КонецЕсли;
			
			ОбработанныеДокументы.Вставить(Регистратор, ВыборкаДокументов.Организация);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обработать документ ""%1"" (%2)по причине:
					|		%3'", ОбщегоНазначения.КодОсновногоЯзыка()),
				Регистратор,
				ПолучитьНавигационнуюСсылку(Регистратор),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			ОшибкиПроведения.Добавить(ТекстСообщения);
			
			Если ПараметрыПроведения.ЗаписыватьОшибкиВЖурналРегистрации Тогда
				
				ЗаписьЖурналаРегистрации(
					ПараметрыПроведения.ИмяСобытияЖурналаРегистрации, 
					УровеньЖурналаРегистрации.Ошибка,
					Регистратор.Метаданные(),
					Регистратор,
					ТекстСообщения);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПараметрыПроведения.ОперацииЗакрытияМесяца) Тогда
				
				ЗарегистрироватьПроблемуВЗакрытииМесяца(
					ПараметрыПроведения,
					ВыборкаДокументов.Организация,
					НСтр("ru='Не удалось исправить проблемы в движениях документов'", ОбщегоНазначения.КодОсновногоЯзыка()),
					ТекстСообщения,
					Регистратор);
				
			КонецЕсли;
			
			НаборЗаписей.Очистить();
			
		КонецПопытки;
			
	КонецЦикла;
	
	Возврат ОшибкиПроведения;
	
КонецФункции

// Перепроводит документы полностью.
//
// Параметры:
//	ПараметрыПроведения - см. ИнициализироватьПараметрыВосстановленияДвижений
//	ВыборкаДокументов - ВыборкаИзРезультатаЗапроса - выборка запроса, обязательно должна содержать поле Ссылка
//
// Возвращаемое значение:
//	Массив -
//
Функция ПерепровестиДокументыПолностью(ПараметрыПроведения, ВыборкаДокументов) Экспорт
	
	ОшибкиПроведения = Новый Массив;
	
	Если ВыборкаДокументов.Количество() = 0 Тогда
		Возврат ОшибкиПроведения;
	КонецЕсли;
	
	ОбработанныеДокументы = Новый Соответствие;
	РегистрыСОчисткой = РегистрыДляПредварительнойОчисткиПриПерепроведении();
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		Регистратор = ВыборкаДокументов.Ссылка;
		
		Если ОбработанныеДокументы.Получить(Регистратор) <> Неопределено Тогда
			Продолжить; // у одного документа движения по нескольким организациям, повторно перепроводить его не нужно
		КонецЕсли;
		
		НачатьТранзакцию();
		
		Попытка
			
			МетаДвижения = Регистратор.Метаданные().Движения;
			
			Для Каждого КлючИЗначение Из РегистрыСОчисткой Цикл
				
				Если МетаДвижения.Содержит(Метаданные.РегистрыНакопления[КлючИЗначение.Ключ]) Тогда
					
					НаборЗаписей = РегистрыНакопления[КлючИЗначение.Ключ].СоздатьНаборЗаписей();
					НаборЗаписей.ДополнительныеСвойства.Вставить("НеСохранятьРасчетныеДвижения", Истина);

					НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
								
					НаборЗаписей.Записывать = Истина;
					НаборЗаписей.Записать(Истина);
					
				КонецЕсли;
				
			КонецЦикла;
				
			ДокументДляПроведения = Регистратор.ПолучитьОбъект();
			
			Если ПараметрыПроведения.ВызываетсяИзРасчетаСебестоимости Тогда
				
				РасчетСебестоимостиПрикладныеАлгоритмы.УстановитьПризнакВыполненияРасчетаПартийИСебестоимости(ДокументДляПроведения);
				ДокументДляПроведения.ДополнительныеСвойства.Вставить(ЗапасыСервер.ИмяДопСвойстваДляПерезаполненияВидовЗапасов(), Истина);
				
			КонецЕсли;
			
			МассивСообщенийДоПроведения = ПолучитьСообщенияПользователю(Ложь);
			
			ДокументДляПроведения.Записать(РежимЗаписиДокумента.Проведение);
			
			ОбработанныеДокументы.Вставить(Регистратор, ВыборкаДокументов.Организация);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обработать документ ""%1"" (%2)по причине:
					|		%3'", ОбщегоНазначения.КодОсновногоЯзыка()),
				Регистратор,
				ПолучитьНавигационнуюСсылку(Регистратор),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			МассивСообщенийПослеПроведения = ПолучитьСообщенияПользователю(Ложь);
			
			Для НомерСообщения = МассивСообщенийДоПроведения.Количество() + 1 По МассивСообщенийПослеПроведения.Количество() Цикл
				// Если при проведении были диагностированы проблемы, из-за которых документ не был проведен,
				// то добавим текст сообщений об этих проблемах в протокол.
				ТекстСообщения = ТекстСообщения + Символы.ПС + СокрЛП(МассивСообщенийПослеПроведения[НомерСообщения-1].Текст);
			КонецЦикла;
			
			ОшибкиПроведения.Добавить(ТекстСообщения);
			
			Если ПараметрыПроведения.ЗаписыватьОшибкиВЖурналРегистрации Тогда
				
				ЗаписьЖурналаРегистрации(
					ПараметрыПроведения.ИмяСобытияЖурналаРегистрации, 
					УровеньЖурналаРегистрации.Ошибка,
					Регистратор.Метаданные(),
					Регистратор,
					ТекстСообщения);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПараметрыПроведения.ОперацииЗакрытияМесяца) Тогда
				
				ЗарегистрироватьПроблемуВЗакрытииМесяца(
					ПараметрыПроведения,
					ВыборкаДокументов.Организация,
					НСтр("ru='Не удалось исправить проблемы в движениях документов'", ОбщегоНазначения.КодОсновногоЯзыка()),
					ТекстСообщения,
					Регистратор);
				
			КонецЕсли;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат ОшибкиПроведения;
	
КонецФункции

Процедура ЗарегистрироватьПроблемуВЗакрытииМесяца(ПараметрыПроведения, Организация, ТекстПроблемы, ТекстУточнения, Объект)
	
	ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемыРасчета(
		ПараметрыПроведения.ОперацииЗакрытияМесяца,
		Организация,
		ПараметрыПроведения.ПериодРасчета);
	
	Если НЕ ЗначениеЗаполнено(ТекстПроблемы) Тогда
		ТекстПроблемы = НСтр("ru='При выполнении расчета были диагностированы ошибки'", ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	
	ПолныйТекстПроблемы = ТекстПроблемы + " " + НСтр("ru='по организации ""%1"" за период ""%2""'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемуВыполненияРасчета(
		ПараметрыРегистрации,
		ПолныйТекстПроблемы,
		ПараметрыПроведения.Важность,
		ТекстУточнения,
		Объект);
	
КонецПроцедуры


// Возвращает типы служебных документов без проведения.
//
// Возвращаемое значение:
//	Массив Из Тип - 
//
Функция ТипыСлужебныхДокументовБезПерепроведения() Экспорт
	
	ТипыСлужебныхДокументов = Новый Массив;
	
	ТипыСлужебныхДокументов.Добавить(Тип("ДокументСсылка.КорректировкаРегистров"));
	ТипыСлужебныхДокументов.Добавить(Тип("ДокументСсылка.РасчетСебестоимостиТоваров"));
	ТипыСлужебныхДокументов.Добавить(Тип("ДокументСсылка.РегистраторРасчетов"));
	
	Возврат ТипыСлужебныхДокументов;
	
КонецФункции

// Возвращает имена регистров для предварительной очистки перед проведением документа.
// Очистка нужна в случае, когда необходимо восстановить движения по "связанным" регистрам, при этом данные "основного" регистра не изменыются.
// Например, для восстановления движений регистра РасчетыСКлиентамиПоСрокам по данным регистра РасчетыСКлиентами.
//
// Возвращаемое значение:
//	Структура - имена регистров
//
Функция РегистрыДляПредварительнойОчисткиПриПерепроведении()
	
	Результат = Новый Структура;
	Результат.Вставить(Метаданные.РегистрыНакопления.РасчетыСКлиентами.Имя);
	Результат.Вставить(Метаданные.РегистрыНакопления.РасчетыСПоставщиками.Имя);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти
