
#Область СлужебныйПрограммныйИнтерфейс

Процедура СписокВыборНаФорме(Форма, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка) Экспорт
	
	Если Поле = Форма.Элементы.МобильноеПриложение Тогда
		СтандартнаяОбработка = Ложь;
		
		ДанныеСтроки = Элемент.ДанныеСтроки(ВыбраннаяСтрока);
		Если ДанныеСтроки.Организация <> ДанныеСтроки.Перевозчик
			И ТипЗнч(ДанныеСтроки.Ссылка) <> Тип("ДокументСсылка.ЭлектронныйПутевойЛист") Тогда
			ПоказатьПредупреждение(, НСтр("ru='Мобильное приложение доступно только перевозчику'"));
		Иначе
			ПараметрыДействийМП = ПараметрыДействийДляМобильногоПриложения(
				ДанныеСтроки.Ссылка,
				ДанныеСтроки.МобильноеПриложение,
				ДанныеСтроки.ИдентификаторЗаписиМП);
			Если ПараметрыДействийМП = Неопределено Тогда
				ПоказатьПредупреждение(, НСтр("ru='Документ не поддерживает обмен с мобильным приложением'"));
				Возврат;
			КонецЕсли;
			ПараметрыДействийМП.Вставить("Форма", Форма);
			Если ЗначениеЗаполнено(ДанныеСтроки.МобильноеПриложение) Тогда			
				СписокМеню = Новый СписокЗначений();
				СписокМеню.Добавить("Открыть", "Открыть");
				СписокМеню.Добавить("Отвязать", "Отвязать от документа");
				Если ПараметрыДействийМП.ПользователиМП.Количество() > 1 Тогда
					СписокМеню.Добавить("Выбрать", "Выбрать другого");
				КонецЕсли;
				ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборДействияНаФорме", ЭтотОбъект, ПараметрыДействийМП);
				Форма.ПоказатьВыборИзМеню(ОписаниеОповещения, СписокМеню, Поле);
			Иначе
				ОбработатьВыборДействияНаФорме(Новый Структура("Значение", "Выбрать"), ПараметрыДействийМП);	
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

Процедура ОбработатьВыборДействияНаФорме(Результат, ПараметрыДействийМП) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ПараметрыДействийМП.Форма;
	ПараметрыДействийМП.Удалить("Форма");

	Если Результат.Значение = "Выбрать" Тогда
		ОткрытьФорму("Обработка.ВзаимодействиеМПЭПД.Форма.ВыборДействияПоДокументу", 
			ПараметрыДействийМП, 
			Форма, 
			,,,,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли Результат.Значение = "Открыть" Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("УчетнаяЗаписьЭДО", ПараметрыДействийМП.ИдентификаторЭДО);
		ПараметрыФормы.Вставить("Организация", ПараметрыДействийМП.Организация);
		ПараметрыФормы.Вставить("Идентификатор", ПараметрыДействийМП.ИдентификаторЗаписиТекущегоМП);
		
		ОткрытьФормуПользователяМобильногоУстройства(ПараметрыФормы);
	ИначеЕсли Результат.Значение = "Отвязать" Тогда
		Результат = СервисВзаимодействияМПЭПДВызовСервера.СервисОтвязатьДокумент(ПараметрыДействийМП.Документ, ПараметрыДействийМП.ИдентификаторЭДО);
		Если Результат = Истина Тогда
			Оповестить("МПОтвязаноОтДокумента", , ПараметрыДействийМП.Документ);
		Иначе
			ПоказатьПредупреждение(, НСтр("ru='Не удалось отвязать мобильное приложение от документа'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыДействийДляМобильногоПриложения(Документ, НаименованиеМП = Неопределено, ИдентификаторЗаписиМП = Неопределено, ТитулМП = Неопределено) Экспорт
	
	ТолькоИзДокумента = Ложь;
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ЭлектроннаяТранспортнаяНакладная") Тогда
		ИмяРеквизитаИдентификаторЭДО = "ИдентификаторПеревозчика";
		РеквизитыДокумента = ОбменСГИСЭПДВызовСервера.ЗначенияРеквизитовОбъекта(Документ, ИмяРеквизитаИдентификаторЭДО + ", Организация, ТекущийТитул");
	
		Если ТитулМП = Неопределено Тогда
			ТитулМП = РеквизитыДокумента.ТекущийТитул;
		КонецЕсли;
	
		ЗаголовокПользователяМП = "Водитель";
		ИмяТаблицыПользователейМП = "ТитулГрузоотправителяВодители";
		ИмяТаблицыТелефоныПользователейМП = "ТитулГрузоотправителяВодительНомераТелефонов";
		ТитулСПользователямиМП = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул1");
		ТолькоИзДокумента = Истина;	
		ВидыДокументовОтбор = СервисВзаимодействияМПЭПДКлиентСервер.ВидыДокументовПоддерживаемыеМП(Истина, 0);	
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ЭлектронныйПутевойЛист") Тогда
		РеквизитыДокумента = ОбменСГИСЭПДВызовСервера.ЗначенияРеквизитовОбъекта(Документ, 
			"ИдентификаторОформителя, ИдентификаторМедорганизации, ИдентификаторТехконтроль, ИдентификаторПоказанияОдометра, Организация, ТекущийТитул");
	
		Если ТитулМП = Неопределено Тогда
			ТитулМП = РеквизитыДокумента.ТекущийТитул;
		КонецЕсли;
		
		АтомарныеРоли = СервисВзаимодействияМПЭПДКлиентСервер.АтомарныеРолиМП();
		Если ТитулМП = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул1") Тогда
			ИндексАтомарнойРоли = 4;
			ИмяРеквизитаИдентификаторЭДО = "ИдентификаторОформителя";
			ИмяТаблицыПользователейМП = "ТитулОформлениеВодители";
			ТитулСПользователямиМП = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул1");
			ТолькоИзДокумента = Истина;
		ИначеЕсли ТитулМП = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул2")
			Или ТитулМП = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул6") Тогда
			ИндексАтомарнойРоли = 1;
			ИмяРеквизитаИдентификаторЭДО = "ИдентификаторМедорганизации";
		ИначеЕсли ТитулМП = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул3") Тогда
			ИмяРеквизитаИдентификаторЭДО = "ИдентификаторТехконтроль";
			ИндексАтомарнойРоли = 2;
		ИначеЕсли ТитулМП = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул4")
			Или ТитулМП = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул5") Тогда
			ИмяРеквизитаИдентификаторЭДО = "ИдентификаторПоказанияОдометра";
			ИндексАтомарнойРоли = 3;			
		КонецЕсли;
		Если ИндексАтомарнойРоли <> Неопределено Тогда
			ЗаголовокПользователяМП = АтомарныеРоли[ИндексАтомарнойРоли];
			ПредставленияРолейМП = СервисВзаимодействияМПЭПДКлиентСервер.ПредставленияРолейМП(Истина, ИндексАтомарнойРоли);
		КонецЕсли;
		ВидыДокументовОтбор = СервисВзаимодействияМПЭПДКлиентСервер.ВидыДокументовПоддерживаемыеМП(Истина, 1);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Если ИмяРеквизитаИдентификаторЭДО = Неопределено Тогда
		ИдентификаторЭДО = Неопределено;
	Иначе
		ИдентификаторЭДО = РеквизитыДокумента[ИмяРеквизитаИдентификаторЭДО];
	КонецЕсли;
	
	ПользователиМП = Неопределено;
	Если ТитулСПользователямиМП <> Неопределено Тогда
		СтруктураРеквизитовТитула = ОбменСГИСЭПДВызовСервера.ДанныеРеквизитовЭПД(Документ, ТитулСПользователямиМП);
		
		Если СтруктураРеквизитовТитула.Свойство(ИмяТаблицыПользователейМП, ПользователиМП) Тогда
			Если ЗначениеЗаполнено(ИмяТаблицыТелефоныПользователейМП) Тогда
				ТелефоныПользователейМП = СтруктураРеквизитовТитула[ИмяТаблицыТелефоныПользователейМП];
				Для Каждого СтрокаТелефон Из ТелефоныПользователейМП Цикл
					Для Каждого СтрокаПользователь Из ПользователиМП Цикл
						Если СтрокаПользователь.ИдентификаторСтроки = СтрокаТелефон.ИдентификаторСтрокиРодителя
						И СтрокаПользователь.Свойство("НомерТелефона") = Ложь Тогда
							СтрокаПользователь.Вставить("НомерТелефона", СтрокаТелефон.Телефон);	
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		Иначе
			ПользователиМП = Новый Массив;
		КонецЕсли;
	ИначеЕсли ПредставленияРолейМП <> Неопределено Тогда
		Отборы = Новый Структура;
		Отборы.Вставить("Организация", РеквизитыДокумента.Организация);
		СписокРолей = Новый СписокЗначений();
		Для Каждого КиЗ Из ПредставленияРолейМП Цикл
			СписокРолей.Добавить(КиЗ.Ключ);
		КонецЦикла;
		Отборы.Вставить("Роль", СписокРолей);
		СписокВидовДокументов = Новый СписокЗначений();
		Для Каждого ВидЧисловой Из ВидыДокументовОтбор Цикл
			СписокВидовДокументов.Добавить(ВидЧисловой);
		КонецЦикла;
		Отборы.Вставить("ВидыДокументов", СписокВидовДокументов);
		ПользователиМП = СервисВзаимодействияМПЭПДВызовСервера.СписокПодключенныхМП(Отборы, , Истина);	
	КонецЕсли;
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ЭлектроннаяТранспортнаяНакладная") Тогда
		ДоступенОтказ = РеквизитыДокумента.ТекущийТитул = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул2");
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ЭлектронныйПутевойЛист") Тогда
		ДоступенОтказ = РеквизитыДокумента.ТекущийТитул = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул2");
	КонецЕсли;
	
	Если ПользователиМП = Неопределено Тогда
		ПоказатьПредупреждение(, "Для текущего состояния документа нельзя назначить пользователя мобильного приложения");
	ИначеЕсли ПользователиМП.Количество() = 0 Тогда
		ПоказатьПредупреждение(, "Нет подключенных пользователей мобильных приложений с ролью """ + ЗаголовокПользователяМП + """");
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПользователиМП", ПользователиМП);
	ПараметрыФормы.Вставить("ЗаголовокПользователяМП", ЗаголовокПользователяМП);
	ПараметрыФормы.Вставить("Документ", Документ);
	ПараметрыФормы.Вставить("НаименованиеТекущегоМП", НаименованиеМП);
	ПараметрыФормы.Вставить("ИдентификаторЗаписиТекущегоМП", ИдентификаторЗаписиМП);
	ПараметрыФормы.Вставить("Организация", РеквизитыДокумента.Организация);
	ПараметрыФормы.Вставить("ДоступенОтказ", ДоступенОтказ);
	ПараметрыФормы.Вставить("ТолькоИзДокумента", ТолькоИзДокумента);
	
	ПараметрыФормы.Вставить("ИдентификаторЭДО", ИдентификаторЭДО);
	
	Возврат ПараметрыФормы;
	
КонецФункции


Функция РезультатАссинхронныйСценарий(ДополнительныеПараметры) Экспорт
	
	ОписаниеФункции = Новый ОписаниеОповещения(
							"ПродолжитьАссинхронныйСценарий", 
							СервисВзаимодействияМПЭПДКлиент,
							ДополнительныеПараметры,
							"ПродолжитьАссинхронныйСценарийОшибка",
							СервисВзаимодействияМПЭПДКлиент);
	Возврат ОписаниеФункции;
	
КонецФункции

Функция РезультатАссинхронныйСценарийБезПараметров(ДополнительныеПараметры) Экспорт
	
	ОписаниеФункции = Новый ОписаниеОповещения(
							"ПродолжитьАссинхронныйСценарийБезПараметров", 
							СервисВзаимодействияМПЭПДКлиент,
							ДополнительныеПараметры,
							"ПродолжитьАссинхронныйСценарийОшибка",
							СервисВзаимодействияМПЭПДКлиент);
	Возврат ОписаниеФункции;
	
КонецФункции

Процедура ПродолжитьАссинхронныйСценарий(РезультатВызова = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеУправления, РезультатВызова);
	
КонецПроцедуры

Процедура ПродолжитьАссинхронныйСценарийБезПараметров(ДополнительныеПараметры = Неопределено) Экспорт
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеУправления, Неопределено);
	
КонецПроцедуры

Процедура ПродолжитьАссинхронныйСценарийОшибка(ДанныеОшибки, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ПродолжитьАссинхронныйСценарий(ДанныеОшибки, ДополнительныеПараметры)
	
КонецПроцедуры

Функция ЕстьОшибкаАссинхронногоСценария(РезультатВызова) Экспорт
	
	Результат = ТипЗнч(РезультатВызова) = Тип("ИнформацияОбОшибке");
	Возврат Результат;
	
КонецФункции

Функция ОбработатьОшибку(СостояниеОшибки) Экспорт
	
	Результат = Ложь;
	Если ТипЗнч(СостояниеОшибки) = Тип("Строка") Тогда
		Результат = Истина;
	ИначеЕсли ЕстьОшибкаАссинхронногоСценария(СостояниеОшибки) Тогда
		Результат = Истина;
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

Процедура НовоеФоновоеЗадание(ИмяФункции, ПараметрыЗадания, ПараметрыЦикла, УникальныйИдентификатор) Экспорт
	
	ДлительнаяОперация = СервисВзаимодействияМПЭПДВызовСервера.ОжидатьФоновоеЗадание(ИмяФункции, ПараметрыЗадания, УникальныйИдентификатор);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	Если ТипЗнч(ПараметрыЦикла) = Тип("Структура") Тогда
		Оповещение = РезультатАссинхронныйСценарий(ПараметрыЦикла);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	Иначе
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ПараметрыЦикла, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьЗаписьПодключенныхМПЭПД(ИдентификаторЭДО, Идентификатор) Экспорт
	
	СервисВзаимодействияМПЭПДВызовСервера.УдалитьЗаписьПодключенныхМПЭПД(ИдентификаторЭДО, Идентификатор);
	
КонецПроцедуры

Функция НоваяСтруктураПодключенияОрганизации() Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("ИдентификаторЭДО");
	Структура.Вставить("Организация");
	
	Возврат Структура;
	
КонецФункции

Процедура ПодключениеОрганизации(СтруктураПодключенияОрганизации, УникальныйИдентификаторФормы = Неопределено,
		ОповещениеОЗавершении = Неопределено) Экспорт
	
	ИдентификаторЭДО = СтруктураПодключенияОрганизации.ИдентификаторЭДО;
	
	// Серверный вызов для получения данных выполняется только здесь
	СтруктураДанныхДляПодключения = 
		НеобходимыеДанныеССервераДляРегистрацииУчетнойЗаписи(ИдентификаторЭДО);
	
	Если СтруктураДанныхДляПодключения.НужноВвестиДанныеИнтернетПоддержки
		И Не СтруктураДанныхДляПодключения.ДоступенВводДанныхИнтернетПоддержки Тогда
		                                        
		ТекстПредупреждения = НСтр("ru='Для работы с мобильными устройствами необходимо подключиться к сервисам Интернет-поддержки пользователей.'") 
				+ НСтр("ru=' Недостаточно прав для подключения Интернет-поддержки пользователей.'")
				+ Символы.ПС + Символы.ПС + НСтр("ru='Обратитесь к администратору.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Результат = Ложь;
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Результат);
		Возврат;
	КонецЕсли;
	
	ИмяПервогоЭтапа = "НачалоПодключения";
	КонтекстСценария = ПодготовитьКонтекстСценария(ИмяПервогоЭтапа, ОповещениеОЗавершении, УникальныйИдентификаторФормы);
	
	КонтекстСценария.Вставить("ИдентификаторЭДО", СтруктураПодключенияОрганизации.ИдентификаторЭДО);
	КонтекстСценария.Вставить("Организация", СтруктураПодключенияОрганизации.Организация);
	КонтекстСценария.Вставить("НужноВвестиДанныеИнтернетПоддержки", СтруктураДанныхДляПодключения.НужноВвестиДанныеИнтернетПоддержки);
	
	Оповещение = Новый ОписаниеОповещения("СценарийПодключенияОрганизации", ЭтотОбъект, КонтекстСценария);
	НачатьАссинхронныйСценарий(Оповещение);
	
КонецПроцедуры

Процедура СценарийПодключенияОрганизации(РезультатПредыдущегоШага, КонтекстСценария) Экспорт
	
	Если КонтекстСценария.Этап = "НачалоПодключения" Тогда
		Если КонтекстСценария.НужноВвестиДанныеИнтернетПоддержки Тогда
			КонтекстСценария.Этап = "ВводДанныхИнтернетПоддержки";
			Оповещение = РезультатАссинхронныйСценарийБезПараметров(КонтекстСценария);
			ТекстПредупреждения = НСтр("ru='Для работы с мобильными устройствами необходимо подключиться к сервисам Интернет-поддержки пользователей.'");
			ПоказатьПредупреждение(Оповещение, ТекстПредупреждения);
			Возврат;
		Иначе
			КонтекстСценария.Этап = "ПолучениеМаркера";
		КонецЕсли;
	КонецЕсли;
	
	Если КонтекстСценария.Этап = "ВводДанныхИнтернетПоддержки" Тогда
		КонтекстСценария.Этап = "ПослеВведенияДанныхИнтернетПоддержки";
		Оповещение = РезультатАссинхронныйСценарий(КонтекстСценария);
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(Оповещение, ЭтотОбъект);
		Возврат;
	КонецЕсли;
	
	Если КонтекстСценария.Этап = "ПослеВведенияДанныхИнтернетПоддержки" Тогда
		// Данные интернет-поддержки не были ввыедены. Сценарий прерывается.
		Если РезультатПредыдущегоШага = Неопределено Тогда
			ТекстПредупреждения = НСтр("ru ='Без подключения к сервисам Интернет-поддержки пользователей работа с мобильными устройствами невозможна.'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Результат = Ложь;
			ВыполнитьОбработкуОповещенияОЗавершенииСценария(КонтекстСценария, Результат);
			Возврат;
		КонецЕсли;
		
		КонтекстСценария.Этап = "ПолучениеМаркера";
	КонецЕсли;
	
	Если КонтекстСценария.Этап = "ПолучениеМаркера" Тогда
		КонтекстСценария.Этап = "ПослеПолученияМаркера";
		МассивИдентификаторов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(КонтекстСценария.ИдентификаторЭДО);
		КонтекстДиагностики = ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики();
		Оповещение = РезультатАссинхронныйСценарий(КонтекстСценария);
		СинхронизацияЭДОКлиент.АвторизоватьсяВСервисеЭлектронногоДокументооборота(Оповещение,
				КонтекстДиагностики, МассивИдентификаторов);
		Возврат;
	КонецЕсли;
	
	Если КонтекстСценария.Этап = "ПослеПолученияМаркера" Тогда
		КлючиСинхронизации = РезультатПредыдущегоШага.КлючиСинхронизации;
		ДанныеМаркера = КлючиСинхронизации[КонтекстСценария.ИдентификаторЭДО];
		
		Если ДанныеМаркера = Неопределено Тогда
			ТекстПредупреждения = НСтр("ru = 'Не удалось авторизоваться на сервере 1С-ЭДО.'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Результат = Ложь;
			ВыполнитьОбработкуОповещенияОЗавершенииСценария(КонтекстСценария, Результат);
			Возврат;
		КонецЕсли;
		
		КонтекстСценария.Этап = "РезультатРегистрацииОрганизации";
		
		Маркер = ПолучитьСтрокуИзДвоичныхДанных(ДанныеМаркера.МаркерРасшифрованный);
		УникальныйИдентификаторФормы = КонтекстСценария.УникальныйИдентификаторФормы;
		КонтекстСценария.Вставить("Маркер", Маркер);
		
		ПараметрыЗадания = МассивИзЗначений(КонтекстСценария.ИдентификаторЭДО,
				КонтекстСценария.Организация, Маркер);
		НовоеФоновоеЗадание("СервисВзаимодействияМПЭПД.СервисРегистрацияОрганизации",
				ПараметрыЗадания, КонтекстСценария, УникальныйИдентификаторФормы);
		Возврат;
	КонецЕсли;
	
	Если КонтекстСценария.Этап = "РезультатРегистрацииОрганизации" Тогда
		УспешностьРегистрации = ПолучитьИзВременногоХранилища(РезультатПредыдущегоШага.АдресРезультата);
		
		Если Не УспешностьРегистрации Тогда
			ТекстПредупреждения = НСтр("ru = 'Не удалось успешно зарегистрироваться на сервере взаимодействия с мобильными устройствами.'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Результат = Ложь;
			ВыполнитьОбработкуОповещенияОЗавершенииСценария(КонтекстСценария, Результат);
		Иначе
			Результат = Истина;
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Маркер", КонтекстСценария.Маркер);
			ВыполнитьОбработкуОповещенияОЗавершенииСценария(КонтекстСценария, Результат, ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьФормуСпискаМП(ВладелецФормы, Организация = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Организация", Организация);
	
	ОткрытьФорму("Обработка.ВзаимодействиеМПЭПД.Форма.СостояниеПодключенияМП", ПараметрыФормы, ВладелецФормы);
	
КонецПроцедуры

Процедура ОткрытьФормуПользователяМобильногоУстройства(ПараметрыФормы, ВладелецФормы = Неопределено, ОповещениеЗавершения = Неопределено) Экспорт
		
	Если ПараметрыФормы = Неопределено Тогда
		ПараметрыФормы = Новый Структура;
	КонецЕсли;
		
	Идентификатор = Неопределено;
	ПараметрыФормы.Свойство("Идентификатор", Идентификатор);
		
	Если Не ЗначениеЗаполнено(Идентификатор) Тогда
		Идентификатор = СокрЛП(Новый УникальныйИдентификатор());
		ПараметрыФормы.Вставить("Идентификатор", Идентификатор);
	КонецЕсли;	
	
	Уникальность = Идентификатор;
	
	Если ОповещениеЗавершения = Неопределено Тогда
		Если ВладелецФормы <> Неопределено Тогда
			ОткрытьФорму("Обработка.ВзаимодействиеМПЭПД.Форма.ПодключениеВодителя", ПараметрыФормы,
					ВладелецФормы, Уникальность, , , , РежимОткрытияОкнаФормы.Независимый);
		Иначе
			ОткрытьФорму("Обработка.ВзаимодействиеМПЭПД.Форма.ПодключениеВодителя", ПараметрыФормы,
					, Уникальность, , , , РежимОткрытияОкнаФормы.Независимый);
		КонецЕсли;
	Иначе
		Если ВладелецФормы <> Неопределено Тогда
			ОткрытьФорму("Обработка.ВзаимодействиеМПЭПД.Форма.ПодключениеВодителя", ПараметрыФормы,
					ВладелецФормы, Уникальность, , , ОповещениеЗавершения, РежимОткрытияОкнаФормы.Независимый);
		Иначе
			ОткрытьФорму("Обработка.ВзаимодействиеМПЭПД.Форма.ПодключениеВодителя", ПараметрыФормы,
					, Уникальность, , , ОповещениеЗавершения, РежимОткрытияОкнаФормы.Независимый);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьФормуПодборУчетныхЗаписейЭДО(ВладелецФормы, ОповещениеЗавершения, Организация = Неопределено) Экспорт

	ПараметрыФормы = Новый Структура("Организация", Организация);
	ОткрытьФорму("Обработка.ВзаимодействиеМПЭПД.Форма.ВыборУчетныхЗаписейЭДО", ПараметрыФормы, ВладелецФормы, , , , ОповещениеЗавершения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ОткрытьФормуВыбораМП(ВладелецФормы, Организация = Неопределено, ИдентификаторЭДО = Неопределено, СтруктураОтбора = Неопределено, ОповещениеЗавершения = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("ИдентификаторЭДО", ИдентификаторЭДО);
	ПараметрыФормы.Вставить("СтруктураОтбора", СтруктураОтбора);

	ОткрытьФорму("Обработка.ВзаимодействиеМПЭПД.Форма.ВыборВодителя", ПараметрыФормы, ВладелецФормы, , , , ОповещениеЗавершения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура НачатьАссинхронныйСценарий(ФункцияУправления) Экспорт
	
	ОповещениеУправления = Новый ОписаниеОповещения(
							ФункцияУправления.ИмяПроцедуры, 
							ФункцияУправления.Модуль,
							ФункцияУправления.ДополнительныеПараметры,
							"ПродолжитьАссинхронныйСценарийОшибка",
							СервисВзаимодействияМПЭПДКлиент);
							
	ФункцияУправления.ДополнительныеПараметры.Вставить("ОповещениеУправления", ОповещениеУправления);
	ФункцияУправления.ДополнительныеПараметры.Вставить("ИдентификаторСценарий", Новый УникальныйИдентификатор());

	ПродолжитьАссинхронныйСценарий(Неопределено, ФункцияУправления.ДополнительныеПараметры);
	
КонецПроцедуры

Функция ИмяОповещенияОбОбновленииСпискаМобильныхУстройств() Экспорт
	
	Возврат "ВзаимодействиеМПЭПД.ОповещениеОбОбновленииСпискаМобильныхУстройств1СЭПД";
	
КонецФункции

Функция ИмяОповещенияОбИзмененииУстройства() Экспорт
	
	Возврат "ВзаимодействиеМПЭПД.ОповещениеОбИзмененииУстройства";
	
КонецФункции

Функция ИмяОповещенияОЗавершенииРегистрации() Экспорт
	
	Возврат "ВзаимодействиеМПЭПД.ОповещениеОЗавершенииРегистрации";
	
КонецФункции

Функция ИмяОповещенияОбИзмененииПрофиляПользователяМП() Экспорт
	
	Возврат "ВзаимодействиеМПЭПД.ОповещениеОбИзмененииПрофиляПользователяМП";
	
КонецФункции

Функция КлючевыеПоляКонтроляПовторенийРегистраПодключенныхМПЭПД() Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("СНИЛС");
	Структура.Вставить("ИНН");
	
	Возврат Структура;
	
КонецФункции

Функция СтруктураПолейРегистраПодключенныхМПЭПД() Экспорт
	
	Структура = Новый Структура();
	Структура.Вставить("Идентификатор", Неопределено);
	Структура.Вставить("ИдентификаторЭДО", Неопределено);
	Структура.Вставить("ИдентификаторМП", Неопределено);
	Структура.Вставить("Состояние", Неопределено);
	Структура.Вставить("ИНН", Неопределено);
	Структура.Вставить("СНИЛС", Неопределено);
	Структура.Вставить("Наименование", Неопределено);
	Структура.Вставить("ВидПодписи", Неопределено);
	Структура.Вставить("Телефоны", Неопределено);
	Структура.Вставить("МЧД", Неопределено);
	Структура.Вставить("ЕстьБумажнаяДоверенность", Неопределено);
	Структура.Вставить("ПрямойОбмен", Неопределено);
	Структура.Вставить("ФизическоеЛицо", Неопределено);
	Структура.Вставить("Фамилия", Неопределено);
	Структура.Вставить("Имя", Неопределено);
	Структура.Вставить("Отчество", Неопределено);
	Структура.Вставить("ДатаВремяПолученияКодаРегистрации", Неопределено);
	Структура.Вставить("КодРегистрации", Неопределено);
	Структура.Вставить("Найден", Ложь);
	Структура.Вставить("АдресФото", Неопределено);
	Структура.Вставить("Роль", Неопределено);
	Структура.Вставить("ВидыДокументов", Неопределено);
	
	Возврат Структура;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Создает массив и помещает в него переданные значения.
//
// Параметры:
//  Значение1 - Произвольный - любое значение.
//  Значение2 - Произвольный
//  Значение3 - Произвольный
//  Значение4 - Произвольный
//
// Возвращаемое значение:
//  Массив 
//  
// Пример:
//   Результат = ОбщегоНазначенияКлиентСервер.МассивЗначений(1, 2, 3);
//
//@skip-check doc-comment-collection-item-type
Функция МассивИзЗначений(Знач Значение1, Знач Значение2 = Неопределено, Знач Значение3 = Неопределено, 
	Знач Значение4 = Неопределено) Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить(Значение1);
	Если Значение2 <> Неопределено Тогда
		Результат.Добавить(Значение2);
	КонецЕсли;
	Если Значение3 <> Неопределено Тогда
		Результат.Добавить(Значение3);
	КонецЕсли;
	Если Значение4 <> Неопределено Тогда
		Результат.Добавить(Значение4);
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

Функция НеобходимыеДанныеССервераДляРегистрацииУчетнойЗаписи(ИдентификаторЭДО) Экспорт
	
	// см. СервисВзаимодействияМПЭПД.НоваяСтруктураНеобходимыхДанныхДляРегистрацииУчетнойЗаписи
	Структура = СервисВзаимодействияМПЭПДВызовСервера.НеобходимыеДанныеДляРегистрацииУчетнойЗаписи(ИдентификаторЭДО);
	
	Если Не Структура.УчетнаяЗаписьПодключена
		И Структура.НужноВвестиДанныеИнтернетПоддержки Тогда
		
		ДоступенВводДанныхИнтернетПоддержки =
			ИнтернетПоддержкаПользователейКлиент.ДоступноПодключениеИнтернетПоддержки();
		Структура.Вставить("ДоступенВводДанныхИнтернетПоддержки", ДоступенВводДанныхИнтернетПоддержки);
	Иначе
		Структура.Вставить("ДоступенВводДанныхИнтернетПоддержки", Истина);
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции

Функция ПодготовитьКонтекстСценария(ИмяПервогоЭтапа, ОповещениеОЗавершении, УникальныйИдентификаторФормы)
	
	КонтекстСценария = Новый Структура;
	КонтекстСценария.Вставить("Этап", ИмяПервогоЭтапа);
	КонтекстСценария.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	КонтекстСценария.Вставить("УникальныйИдентификаторФормы", УникальныйИдентификаторФормы);
	
	Возврат КонтекстСценария;
	
КонецФункции

Функция НовыйРезультатЗавершенияСценария()
	
	Структура = Новый Структура;
	Структура.Вставить("Успешность");
	Структура.Вставить("ДополнительныеПараметры");
	
	Возврат Структура;
	
КонецФункции

Процедура ВыполнитьОбработкуОповещенияОЗавершенииСценария(КонтекстСценария, Успешность, ДополнительныеПараметры = Неопределено)
	
	Если КонтекстСценария.ОповещениеОЗавершении <> Неопределено Тогда
		СтруктураРезультата = НовыйРезультатЗавершенияСценария(); 
		СтруктураРезультата.Успешность = Успешность;
		СтруктураРезультата.ДополнительныеПараметры = ДополнительныеПараметры;
		ВыполнитьОбработкуОповещения(КонтекстСценария.ОповещениеОЗавершении, СтруктураРезультата);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
