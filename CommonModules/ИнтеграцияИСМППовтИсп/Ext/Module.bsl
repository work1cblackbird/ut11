#Область ПрограммныйИнтерфейс

// Проверяет доступность объекта метаданных. Проверки выполняются по:
// - доступности вида продукции;
// - функциональным опциям;
// 
// Параметры:
// 	ПолноеИмяМетаданных - Строка - полное имя проверяемого объекта метаданных.
// Возвращаемое значение:
// 	Булево - Признак доступности объекта.
Функция ОбъектМетаданныхДоступен(ПолноеИмяМетаданных) Экспорт
	
	ОбъектМетаданных         = Метаданные.НайтиПоПолномуИмени(ПолноеИмяМетаданных);
	ВозвращаемоеЗначение     = Ложь;
	НедоступныеВидыПродукции = Новый Массив();
	
	Если ОбъектМетаданных = Метаданные.Документы.ПеремаркировкаТоваровИСМП Тогда
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.Табак);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.АльтернативныйТабак);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.НикотиносодержащаяПродукция);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.МорепродуктыПодконтрольныеВЕТИС);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.КормаДляЖивотныхПодконтрольныеВЕТИС);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.КормаДляЖивотныхБезВЕТИС);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.МясоПодконтрольноеВЕТИС);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.ВетеринарныеПрепараты);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.ИгрыИИгрушкиДляДетей);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.РадиоэлектроннаяПродукция);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.ТитановаяМеталлопродукция);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.КонсервированнаяПродукцияПодконтрольнаяВЕТИС);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.КонсервированнаяПродукцияБезВЕТИС);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.РастительныеМасла);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.ОптоволокноИОптоволоконнаяПродукция);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.ПарфюмерныеИКосметическиеСредстваИБытоваяХимия);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.ПечатнаяПродукция);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.СтроительныеМатериалы);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.ОтопительныеПриборы);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.Бакалея);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.АлкогольнаяПродукцияДо9Процентов);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.ТелефоныИНоутбуки);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.ПиротехническиеИзделияИСредстваПожарнойБезопасности);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.КабельнаяПродукция);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.МоторныеМасла);
	ИначеЕсли ОбъектМетаданных = Метаданные.Документы.ОтгрузкаТоваровИСМП Тогда
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.Табак);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.АльтернативныйТабак);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.НикотиносодержащаяПродукция);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.КормаДляЖивотныхПодконтрольныеВЕТИС);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.КормаДляЖивотныхБезВЕТИС);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.МясоПодконтрольноеВЕТИС);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.ВетеринарныеПрепараты);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.ИгрыИИгрушкиДляДетей);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.РадиоэлектроннаяПродукция);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.ТитановаяМеталлопродукция);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.КонсервированнаяПродукцияПодконтрольнаяВЕТИС);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.КонсервированнаяПродукцияБезВЕТИС);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.РастительныеМасла);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.ОптоволокноИОптоволоконнаяПродукция);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.ПарфюмерныеИКосметическиеСредстваИБытоваяХимия);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.ПечатнаяПродукция);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.СтроительныеМатериалы);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.ОтопительныеПриборы);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.Бакалея);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.АлкогольнаяПродукцияДо9Процентов);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.ТелефоныИНоутбуки);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.ПиротехническиеИзделияИСредстваПожарнойБезопасности);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.КабельнаяПродукция);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.МоторныеМасла);
	ИначеЕсли ОбъектМетаданных = Метаданные.Документы.ПриемкаТоваровИСМП Тогда
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.Табак);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.АльтернативныйТабак);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.НикотиносодержащаяПродукция);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.КормаДляЖивотныхПодконтрольныеВЕТИС);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.КормаДляЖивотныхБезВЕТИС);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.МясоПодконтрольноеВЕТИС);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.ВетеринарныеПрепараты);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.ИгрыИИгрушкиДляДетей);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.РадиоэлектроннаяПродукция);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.ТитановаяМеталлопродукция);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.КонсервированнаяПродукцияПодконтрольнаяВЕТИС);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.КонсервированнаяПродукцияБезВЕТИС);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.РастительныеМасла);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.ОптоволокноИОптоволоконнаяПродукция);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.ПарфюмерныеИКосметическиеСредстваИБытоваяХимия);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.ПечатнаяПродукция);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.СтроительныеМатериалы);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.ОтопительныеПриборы);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.Бакалея);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.АлкогольнаяПродукцияДо9Процентов);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.ТелефоныИНоутбуки);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.ПиротехническиеИзделияИСредстваПожарнойБезопасности);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.КабельнаяПродукция);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.МоторныеМасла);
	ИначеЕсли ОбъектМетаданных = Метаданные.Документы.ВозвратВОборотИСМП Тогда
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.Табак);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.АльтернативныйТабак);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.НикотиносодержащаяПродукция);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.МясоПодконтрольноеВЕТИС);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.ТитановаяМеталлопродукция);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.РастительныеМасла);
	ИначеЕсли ОбъектМетаданных = Метаданные.Документы.УточнениеСведенийОКодахМаркировкиИСМП Тогда
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.КреслаКоляски);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.ТехническиеСредстваРеабилитации);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.МедицинскиеИзделия);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.Антисептики);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.БАДы);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.МорепродуктыПодконтрольныеВЕТИС);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.КормаДляЖивотныхПодконтрольныеВЕТИС);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.КормаДляЖивотныхБезВЕТИС);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.МясоПодконтрольноеВЕТИС);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.ВетеринарныеПрепараты);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.ИгрыИИгрушкиДляДетей);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.РадиоэлектроннаяПродукция);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.ТитановаяМеталлопродукция);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.КонсервированнаяПродукцияПодконтрольнаяВЕТИС);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.КонсервированнаяПродукцияБезВЕТИС);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.РастительныеМасла);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.ОптоволокноИОптоволоконнаяПродукция);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.ПарфюмерныеИКосметическиеСредстваИБытоваяХимия);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.ПечатнаяПродукция);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.СтроительныеМатериалы);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.ОтопительныеПриборы);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.Бакалея);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.АлкогольнаяПродукцияДо9Процентов);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.ТелефоныИНоутбуки);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.ПиротехническиеИзделияИСредстваПожарнойБезопасности);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.КабельнаяПродукция);
		НедоступныеВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.МоторныеМасла);
	ИначеЕсли ОбъектМетаданных = Метаданные.РегистрыСведений.ВскрытыеПотребительскиеУпаковкиИС
		Или ОбъектМетаданных = Метаданные.Документы.ПодключениеКегаКОборудованиюРозливаИСМП Тогда
		Для Каждого ВидПродукции Из ОбщегоНазначенияИСКлиентСервер.ВидыПродукцииИСМП(Истина, Истина, Истина) Цикл
			Если Не ОбщегоНазначенияИСКлиентСерверПовтИсп.ПоддерживаетсяЧастичноеВыбытие(ВидПродукции) Тогда
				НедоступныеВидыПродукции.Добавить(ВидПродукции);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если НедоступныеВидыПродукции.Количество() Тогда
		
		ВидыПродукции = Новый Массив();
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВидыПродукции, ОбщегоНазначенияИСКлиентСервер.ВидыПродукцииИСМП(Истина));
		
		ПроверяемыеВидыПродукции = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ВидыПродукции, НедоступныеВидыПродукции);
		
		Для Каждого ВидПродукции Из ПроверяемыеВидыПродукции Цикл
			
			Если ИнтеграцияИСМПКлиентСерверПовтИсп.ВестиУчетМаркируемойПродукции(ВидПродукции) Тогда
				ВозвращаемоеЗначение = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
	
	Иначе
		ВозвращаемоеЗначение = Истина;
	КонецЕсли;
	
	Если ВозвращаемоеЗначение
		И ОбъектМетаданных = Метаданные.РегистрыСведений.ВскрытыеПотребительскиеУпаковкиИС
		И ИнтеграцияИСВызовСервера.ВидыПродукцииИспользующиеВскрытыеПотребительскихУпаковок(Истина, Ложь, Ложь).Количество() = 0 Тогда
		ВозвращаемоеЗначение = Ложь;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Возвращает параметры включения аварийного режима
// 
// Возвращаемое значение:
//  см. ПараметрыАварийногоРежима
Функция ДанныеНастройкиАварийногоРежима() Экспорт
	
	ДанныеАварийногоРежима = ПараметрыАварийногоРежима();
	
	ДанныеАварийногоРежима.ДатаОкончания = 
		ОбщегоНазначенияИСМПВызовСервера.НастройкиСканированияКодовМаркировки().АварийноеОтключенияРазрешительногоРежимаДоУниверсальнаяДата;
	
	Если ТекущаяУниверсальнаяДата() < ДанныеАварийногоРежима.ДатаОкончания Тогда
		ДанныеАварийногоРежима.Включено = Истина;
	Иначе
		ДанныеАварийногоРежима.ДатаОкончания = Дата(1, 1, 1);
	КонецЕсли;
	
	Возврат ДанныеАварийногоРежима;
	
КонецФункции

// Возвращает признак, поддерживает ли БПО логирование проверок КМ и проверку КМ единым методом
// 
// Возвращаемое значение:
//  Булево - Истина, если версия БПО выше 3.2.2.24
Функция ВерсияБПОПоддерживаетПроверкуКМЕдинымМетодом() Экспорт
	
	ВерсияБПО        = МенеджерОборудованияВызовСервера.ВерсияБиблиотеки();
	Возврат ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияБПО, "3.2.2.24") >= 0;
	
КонецФункции

// Возвращает признак, нужно ли писать данные успешных операций сканирования в РС ОперацииПроверкиКМ при настройке
// Проверка кодов маркировки средствами ККТ = Перед пробитием чека
// 
// Возвращаемое значение:
//  Булево - Истина, если установлена нужная версия БПО, есть где хранить логи, Проверка кодов маркировки средствами ККТ = Перед пробитием чека и
//  включена настройка Хранить успешные операции при разрешительном режиме
Функция ХранитьУспешныеОперацииПриПроверкеКМ() Экспорт
	
	ВерсияБПО        = МенеджерОборудованияВызовСервера.ВерсияБиблиотеки();
	
	Если Не ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияБПО, "3.2.2.24") >= 0 Тогда
		Возврат Ложь;
	Иначе
		
		//@skip-check wrong-string-literal-content
		МодульМенеджерОборудованияМаркировка = ОбщегоНазначения.ОбщийМодуль("МенеджерОборудованияМаркировка");
		Возврат МодульМенеджерОборудованияМаркировка.ХранитьУспешныеОперацииРазрешения();
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ТаблицаПолейДанныйДляРасшифровкиОшибок() Экспорт
	
	ТаблицаДанных = РаботаСXMLИС.ПустаяТаблицаПредставленийПолей();
	
	ПространствоИмен = Метаданные.ПакетыXDTO.ТипыМОТП.ПространствоИмен;
	
	НоваяСтрока = ТаблицаДанных.Добавить();
	НоваяСтрока.ПространствоИмен = ПространствоИмен;
	НоваяСтрока.ЛокальноеИмя     = "Индекс";
	НоваяСтрока.Представление    = НСтр("ru = 'Индекс'");
	НоваяСтрока.Обязательное     = Истина;
	
	НоваяСтрока = ТаблицаДанных.Добавить();
	НоваяСтрока.ПространствоИмен = ПространствоИмен;
	НоваяСтрока.ЛокальноеИмя     = "КодСтр";
	НоваяСтрока.Представление    = НСтр("ru = 'Код страны'");
	НоваяСтрока.Обязательное     = Истина;
	
	НоваяСтрока = ТаблицаДанных.Добавить();
	НоваяСтрока.ПространствоИмен = ПространствоИмен;
	НоваяСтрока.ЛокальноеИмя     = "АдрТекст";
	НоваяСтрока.Представление    = НСтр("ru = 'Адрес'");
	НоваяСтрока.Обязательное     = Истина;
	
	НоваяСтрока = ТаблицаДанных.Добавить();
	НоваяСтрока.ПространствоИмен = ПространствоИмен;
	НоваяСтрока.ЛокальноеИмя     = "ПричинаВыбытия";
	НоваяСтрока.Представление    = НСтр("ru = 'Причина выбытия'");
	НоваяСтрока.Обязательное     = Истина;
	
	НоваяСтрока = ТаблицаДанных.Добавить();
	НоваяСтрока.ПространствоИмен = ПространствоИмен;
	НоваяСтрока.ЛокальноеИмя     = "Дата";
	НоваяСтрока.Представление    = НСтр("ru = 'Дата'");
	НоваяСтрока.Обязательное     = Истина;
	
	НоваяСтрока = ТаблицаДанных.Добавить();
	НоваяСтрока.ПространствоИмен = ПространствоИмен;
	НоваяСтрока.ЛокальноеИмя     = "Время";
	НоваяСтрока.Представление    = НСтр("ru = 'Время'");
	НоваяСтрока.Обязательное     = Истина;
	
	НоваяСтрока = ТаблицаДанных.Добавить();
	НоваяСтрока.ПространствоИмен = ПространствоИмен;
	НоваяСтрока.ЛокальноеИмя     = "Наименование";
	НоваяСтрока.Представление    = НСтр("ru = 'Наименование первичного документа'");
	НоваяСтрока.Обязательное     = Истина;
	
	НоваяСтрока = ТаблицаДанных.Добавить();
	НоваяСтрока.ПространствоИмен = ПространствоИмен;
	НоваяСтрока.ЛокальноеИмя     = "Номер";
	НоваяСтрока.Представление    = НСтр("ru = 'Номер'");
	НоваяСтрока.Обязательное     = Истина;
	
	НоваяСтрока = ТаблицаДанных.Добавить();
	НоваяСтрока.ПространствоИмен = ПространствоИмен;
	НоваяСтрока.ЛокальноеИмя     = "КодРегион";
	НоваяСтрока.Представление    = НСтр("ru = 'Код региона'");
	НоваяСтрока.Обязательное     = Истина;
	
	НоваяСтрока = ТаблицаДанных.Добавить();
	НоваяСтрока.ПространствоИмен = ПространствоИмен;
	НоваяСтрока.ЛокальноеИмя     = "ИННФЛТип";
	НоваяСтрока.Представление    = НСтр("ru = 'ИНН физического лица'");
	НоваяСтрока.Обязательное     = Истина;
	
	НоваяСтрока = ТаблицаДанных.Добавить();
	НоваяСтрока.ПространствоИмен = ПространствоИмен;
	НоваяСтрока.ЛокальноеИмя     = "ИННЮЛТип";
	НоваяСтрока.Представление    = НСтр("ru = 'ИНН юридического лица'");
	НоваяСтрока.Обязательное     = Истина;
	
	Возврат ТаблицаДанных;
	
КонецФункции

Функция ТекстЗапросаПоискаДокументаПоИдентификаторуЗаявки() Экспорт
	
	ТекстыЗапроса = Новый Массив();
	ШаблонЗапроса = "
	|ВЫБРАТЬ
	|	ДокументИСМП.Ссылка                КАК Ссылка,
	|	Представление(ДокументИСМП.Ссылка) КАК Представление,
	|	ДокументИСМП.Проведен              КАК Проведен,
	|	ДокументИСМП.ИдентификаторЗаявки   КАК ИдентификаторЗаявки
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП КАК ДокументИСМП
	|ГДЕ
	|	ДокументИСМП.ИдентификаторЗаявки В (&ИдентификаторыДокументов)";
	
	Для Каждого ЭлементПодсистемы Из Метаданные.Подсистемы.ГосИС.Подсистемы.ИСМП.Состав Цикл
		
		Если ОбщегоНазначения.ЭтоДокумент(ЭлементПодсистемы) Тогда
			ТекстыЗапроса.Добавить(
				СтрЗаменить(
					ШаблонЗапроса,
					"Документ.МаркировкаТоваровИСМП",
					СтрШаблон("Документ.%1", ЭлементПодсистемы.Имя)));
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстЗапроса =  СтрСоединить(
		ТекстыЗапроса,
		"
		|ОБЪЕДИНИТЬ ВСЕ
		|");
	
	ТекстЗапроса = СтрШаблон(
		"%1
		|УПОРЯДОЧИТЬ ПО
		|	Проведен",
		ТекстЗапроса);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Определяет максимальное количество кодов в сообщении при запросе статусов.
// 
// Возвращаемое значение:
// 	Число - количество кодов.
Функция КоличествоКодовВПакетеДляЗапросаСтатусов() Экспорт
	
	КоличествоКодовВПакетеДляЗапросаСтатусов = ОбщегоНазначенияИСМПКлиентСерверПовтИсп.НастройкиСканированияКодовМаркировки().КоличествоКодовВПакетеДляЗапросаСтатусов;
	Если КоличествоКодовВПакетеДляЗапросаСтатусов = 0 Тогда
		КоличествоКодовВПакетеДляЗапросаСтатусов = 500;
	ИначеЕсли КоличествоКодовВПакетеДляЗапросаСтатусов > 1000 Тогда
		КоличествоКодовВПакетеДляЗапросаСтатусов = 1000;
	КонецЕсли;
	
	Возврат КоличествоКодовВПакетеДляЗапросаСтатусов;
	
КонецФункции

// Настройки аварийного режима разрешительной системы розничных продаж
// 
// Возвращаемое значение:
//  Структура - Параметры аварийного режима:
// * ДатаОкончания - Дата - универсальная дата окончания аварийного режима
// * Включено - Булево - признак активности аварийного режима
Функция ПараметрыАварийногоРежима() Экспорт
	
	СтруктураВозврата = Новый Структура();
	
	СтруктураВозврата.Вставить("ДатаОкончания", Дата(1, 1, 1));
	СтруктураВозврата.Вставить("Включено",      Ложь);
	
	Возврат СтруктураВозврата;
	
КонецФункции

#КонецОбласти
