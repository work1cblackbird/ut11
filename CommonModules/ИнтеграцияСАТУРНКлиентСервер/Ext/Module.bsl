#Область ПрограммныйИнтерфейс

Функция ИмяПодсистемы() Экспорт
	
	Возврат "САТУРН";
	
КонецФункции

// Определяет включение режима использования тестового контура.
//
// Возвращаемое значение:
//  Булево - Истина, если включен режим работы с тестовым контуром.
//
Функция РежимРаботыСТестовымКонтуромСАТУРН() Экспорт
	
	Возврат ИнтеграцияСАТУРНВызовСервера.РежимРаботыСТестовымКонтуромСАТУРН();
	
КонецФункции

// Возвращает соответствие полей документов-оснований и документов САТУРН
//
// Параметры:
//   ТипДокумента - Тип - тип документа САТУРН
//   ТипОснования - Тип - тип документа-основания
// 
// Возвращаемое значение:
//  КлючИЗначение - элемент соответствия типа:
//  * Ключ - ДокументСсылка - ключем свойства является имя документа, например "РеализацияТоваровУслуг",
//  * Значение - Соответствие Из КлючИЗначение:
//    ** ГрузоотправительОрганизацияСАТУРН - Строка - имя поля документа, по которому нужно делать отбор организации САТУРН грузоотправителя
//    ** ГрузоотправительМестоХранения     - Строка - имя поля документа, по которому нужно делать места хранения грузоотправителя
//    ** ГрузополучательОрганизацияСАТУРН  - Строка - имя поля документа, по которому нужно делать отбор организации САТУРН грузополучателя
//    ** ГрузополучательМестоХранения      - Строка - имя поля документа, по которому нужно делать места хранения  грузополучателя
//    ** ОрганизацияСАТУРН                 - Строка - имя поля документа, по которому нужно делать отбор организации САТУРН
//    ** МестоХранения                     - Строка - имя поля документа, по которому нужно делать места хранения
Функция СоответствиеПолейДокументовОснованийИДокументовСАТУРН(ТипДокумента, ТипОснования) Экспорт
	
	СоответствиеПолей = Новый Соответствие;
	Если ТипДокумента = Тип("ДокументСсылка.НакладнаяСАТУРН")Тогда
		ИнтеграцияСАТУРНКлиентСерверПереопределяемый.ЗаполнитьСоответствиеПолейДокументовОснованийНакладнойСАТУРН(СоответствиеПолей);
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.АктИнвентаризацииСАТУРН")Тогда
		ИнтеграцияСАТУРНКлиентСерверПереопределяемый.ЗаполнитьСоответствиеПолейДокументовОснованийАктаИнвентаризацииСАТУРН(СоответствиеПолей);
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.АктПримененияСАТУРН")Тогда
		ИнтеграцияСАТУРНКлиентСерверПереопределяемый.ЗаполнитьСоответствиеПолейДокументовОснованийАктаПримененияСАТУРН(СоответствиеПолей);
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ИмпортПродукцииСАТУРН")Тогда
		ИнтеграцияСАТУРНКлиентСерверПереопределяемый.ЗаполнитьСоответствиеПолейДокументовОснованийИмпортаПродукцииСАТУРН(СоответствиеПолей);
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПланПримененияСАТУРН")Тогда
		ИнтеграцияСАТУРНКлиентСерверПереопределяемый.ЗаполнитьСоответствиеПолейДокументовОснованийПланаПримененияСАТУРН(СоответствиеПолей);
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПроизводственнаяОперацияСАТУРН")Тогда
		ИнтеграцияСАТУРНКлиентСерверПереопределяемый.ЗаполнитьСоответствиеПолейДокументовОснованийПроизводственнойОперацииСАТУРН(СоответствиеПолей);
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ЗапросОстатковПартийСАТУРН")Тогда
		ИнтеграцияСАТУРНКлиентСерверПереопределяемый.ЗаполнитьСоответствиеПолейДокументовОснованийЗапросаОстатковПартийСАТУРН(СоответствиеПолей);
	КонецЕсли;
	
	Возврат СоответствиеПоТипу(СоответствиеПолей,ТипОснования);
	
КонецФункции

#Область ПодборПартий

// Это выбор партии САТУРН.
// 
// Параметры:
//  ВыбранноеЗначение - Произвольный
// 
// Возвращаемое значение:
//  Булево - Это выбор партии САТУРН
Функция ЭтоВыборПартииСАТУРН(ВыбранноеЗначение) Экспорт
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура")
		И ВыбранноеЗначение.Свойство("Операция")
		И ВыбранноеЗначение.Операция = "ПодборВыборПартииСАТУРН" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОтборПоОрганизации

Функция СтруктураОтбораОрганизаций(ОрганизацииСАТУРН, ОрганизациииИБ = Неопределено, ФормироватьПредставление = Истина) Экспорт
	
	Если ТипЗнч(ОрганизацииСАТУРН) = Тип("СписокЗначений") Тогда
		Организации = ОрганизацииСАТУРН.ВыгрузитьЗначения();
	Иначе
		Организации = ОрганизацииСАТУРН;
	КонецЕсли;
	
	Если ОрганизациииИБ = Неопределено Тогда
		СопоставленныеОрганизации = Новый Массив;
	ИначеЕсли ТипЗнч(ОрганизациииИБ) = Тип("СписокЗначений") Тогда
		СопоставленныеОрганизации = ОрганизациииИБ.ВыгрузитьЗначения();
	Иначе
		СопоставленныеОрганизации = ОрганизациииИБ;
	КонецЕсли;
	
	Если ФормироватьПредставление Тогда
		
		Если Организации.Количество() = 1 Тогда
			Организация   = Организации[0];
			Представление = СтрСоединить(Организации, ";");
		ИначеЕсли Организации.Количество() = 0 Тогда
			Организация = Неопределено;
			Представление = "";
		Иначе
			Организация = Неопределено;
			Представление = СтрСоединить(Организации, ";");
		КонецЕсли;
		
	Иначе
		Организация   = Неопределено;
		Представление = "";
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Организации",   Организации);
	Результат.Вставить("Организация",   Организация);
	Результат.Вставить("Представление", Представление);
	Результат.Вставить("СопоставленныеОрганизации", СопоставленныеОрганизации);
	
	Возврат Результат;
	
КонецФункции

Процедура НастроитьОтборПоОрганизации(Форма, Результат = Неопределено, Префикс = Неопределено, ЗначениеПрефиксы = Неопределено) Экспорт
	
	ОбновлятьПредставление = Результат <> Форма.ОрганизацииСАТУРН;
	Если ОбновлятьПредставление Тогда
		
		ЕстьСопоставленныеОрганизации = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "СопоставленныеОрганизации");
		
		Если ТипЗнч(Результат) = Тип("Массив") Тогда
			Форма.ОрганизацииСАТУРН.ЗагрузитьЗначения(Результат);
		ИначеЕсли ТипЗнч(Результат) = Тип("СписокЗначений") Тогда
		ИначеЕсли Результат = Неопределено Или Не ЗначениеЗаполнено(Результат) Тогда
			Форма.ОрганизацииСАТУРН.Очистить();
			Если ЕстьСопоставленныеОрганизации Тогда
				Форма.СопоставленныеОрганизации.Очистить();
			КонецЕсли;
		ИначеЕсли ТипЗнч(Результат) = Тип("Структура")Тогда
			Форма.ОрганизацииСАТУРН.ЗагрузитьЗначения(Результат.Организации);
			Если ЕстьСопоставленныеОрганизации Тогда
				Форма.СопоставленныеОрганизации.ЗагрузитьЗначения(Результат.СопоставленныеОрганизации);
			КонецЕсли;
		Иначе
			Форма.ОрганизацииСАТУРН.Очистить();
			ЭлементСписка = Форма.ОрганизацииСАТУРН.Добавить();
			ЭлементСписка.Значение = Результат;
			Если Не(ЭлементСписка.Значение = Результат) Тогда
				Форма.ОрганизацииСАТУРН.Очистить();
				Если ЕстьСопоставленныеОрганизации Тогда
					Форма.СопоставленныеОрганизации.Очистить();
				КонецЕсли;
			ИначеЕсли ЕстьСопоставленныеОрганизации Тогда
				РезультатСопоставления = ИнтеграцияСАТУРНВызовСервера.ОрганизацияСАТУРНСопоставленаСОрганизациейИБ(
					Результат);
				Если РезультатСопоставления.Сопоставлено Тогда
					ЭлементСписка = Форма.СопоставленныеОрганизации.Добавить();
					ЭлементСписка.Значение = РезультатСопоставления.Организация;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Форма.ОрганизацииСАТУРН.Количество() = 1 Тогда
			Форма.ОрганизацияСАТУРН = Форма.ОрганизацииСАТУРН.Получить(0).Значение;
			Форма.ОрганизацииСАТУРНПредставление = Строка(Форма.ОрганизацияСАТУРН);
		ИначеЕсли Форма.ОрганизацииСАТУРН.Количество() = 0 Тогда
			Форма.ОрганизацияСАТУРН = Неопределено;
			Форма.ОрганизацииСАТУРНПредставление = "";
		Иначе
			Форма.ОрганизацияСАТУРН = Неопределено;
			Форма.ОрганизацииСАТУРНПредставление = Строка(Форма.ОрганизацииСАТУРН);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Форма.ОрганизацииСАТУРН.Количество() = 0 Или ЗначениеЗаполнено(Форма.ОрганизацияСАТУРН)Тогда 
		ИмяЭлементаОрганизация = "Организация";
	Иначе 
		ИмяЭлементаОрганизация = "Организации";
	КонецЕсли;
	
	Если ЗначениеПрефиксы = Неопределено Тогда
		Префиксы = Новый Массив;
		Префиксы.Добавить("Оформлено");
		Префиксы.Добавить("КОформлению");
	Иначе
		Если ТипЗнч(ЗначениеПрефиксы) = Тип("Строка") Тогда
			Префиксы = Новый Массив();
			Префиксы.Добавить(ЗначениеПрефиксы);
		Иначе
			Префиксы = ЗначениеПрефиксы;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Значение Из Префиксы Цикл
		
		Если Значение = "Отбор" Тогда
			Постфикс = "Организация";
		Иначе
			Постфикс = "ОтборОрганизация";
		КонецЕсли;
		
		СтраницыОтбораОрганизация = Форма.Элементы.Найти("Страницы" + Значение + Постфикс);
		Если СтраницыОтбораОрганизация <> Неопределено Тогда
			СтраницыОтбораОрганизация.ТекущаяСтраница = Форма.Элементы["Страница" + Значение + ИмяЭлементаОрганизация];
		КонецЕсли;
	КонецЦикла;
	
	Если Префикс <> Неопределено Тогда
		ТекущийЭлемент = Форма.Элементы.Найти(Префикс + ИмяЭлементаОрганизация);
		Если ТекущийЭлемент <> Неопределено Тогда
			Форма.ТекущийЭлемент = ТекущийЭлемент;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьОтборыДинамическогоСпискаПоОрганизацииСАТУРН(Форма, ПрефиксСписков = Неопределено) Экспорт
	
	Если ПрефиксСписков = Неопределено Тогда 
		ПрефиксСписков = "";
	КонецЕсли;
	
	ИмяПоляОтбора = "ОрганизацияСАТУРН";
	ИмяДокумента = ИнтеграцияИСКлиентСервер.ИмяОбъектаИзИмениФормы(Форма, Ложь);
	Если ИмяДокумента = "НакладнаяСАТУРН" Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяПрефикса", "Грузополучатель");
	КонецЕсли;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Список") Тогда
		УстановитьОтборПоОрганизацииСАТУРН(Форма.Список, Форма.ОрганизацииСАТУРН, ПрефиксСписков, ИмяПоляОтбора, ДополнительныеПараметры);
	КонецЕсли;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "СписокКОформлению") Тогда
		Если ИмяДокумента = "ИмпортПродукцииСАТУРН" Тогда
			УстановитьОтборПоОрганизацииСАТУРН(Форма.СписокКОформлению, Форма.ОрганизацииСАТУРН,, ИмяПоляОтбора);
		Иначе
			ИмяПоляОтбора = "Организация";
			УстановитьОтборПоОрганизацииСАТУРН(Форма.СписокКОформлению, Форма.СопоставленныеОрганизации,, ИмяПоляОтбора);
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "СписокПоТоварнымНакладным") Тогда
		УстановитьОтборПоОрганизацииСАТУРН(Форма.СписокПоТоварнымНакладным, Форма.ОрганизацииСАТУРН,, ИмяПоляОтбора);
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьОтборПоОрганизацииСАТУРН(Список, Организации, Префиксы, ИмяПоляОтбора = "ОрганизацияСАТУРН",
	ДополнительныеПараметры = Неопределено) Экспорт 
	
	Если Префиксы = Неопределено Тогда 
		Префиксы = "";
	КонецЕсли;
	
	МассивПрефиксов = СтрРазделить(Префиксы, ",");
	
	Если МассивПрефиксов.Количество() = 0 Тогда
		МассивПрефиксов.Добавить("");
	КонецЕсли;
	
	Если МассивПрефиксов.Количество() = 1 Тогда
		ГруппаОтбора = Список.Отбор;
	Иначе
		ГруппаОтбора = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
			Список.Отбор,
			НСтр("ru = 'Отбор по организации'"),
			ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		ГруппаОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	КонецЕсли;
	
	Для Каждого Префикс Из МассивПрефиксов Цикл
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			ГруппаОтбора,
			Префикс + ИмяПоляОтбора,
			?(Организации.Количество(), Организации, Неопределено),,,
			Организации.Количество() > 0); 
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОписаниеСтруктурТиповДанных

Функция СтруктураДанныхПАТ() Экспорт
	
	ДанныеПАТ = Новый Структура;
	ДанныеПАТ.Вставить("Ссылка",          ПредопределенноеЗначение("Справочник.КлассификаторПАТСАТУРН.ПустаяСсылка"));
	ДанныеПАТ.Вставить("Идентификатор",   "");
	ДанныеПАТ.Вставить("Статус",          ПредопределенноеЗначение("Перечисление.СтатусыОбъектовСАТУРН.ПустаяСсылка"));
	ДанныеПАТ.Вставить("Наименование",    "");
	ДанныеПАТ.Вставить("ОКПД2",           "");
	ДанныеПАТ.Вставить("ВидПродукции",    "");
	ДанныеПАТ.Вставить("Комментарий",     "");
	ДанныеПАТ.Вставить("Производитель",   ПредопределенноеЗначение("Справочник.КлассификаторОрганизацийСАТУРН.ПустаяСсылка"));
	ДанныеПАТ.Вставить("СоставТукосмеси", Новый Массив);
	ДанныеПАТ.Вставить("СоставКомбипака", Новый Массив);
	
	Возврат ДанныеПАТ;
	
КонецФункции

Функция СтруктураДанныхОрганизации() Экспорт
	
	ДанныеОрганизации = Новый Структура;
	ДанныеОрганизации.Вставить("Ссылка",            ПредопределенноеЗначение("Справочник.КлассификаторОрганизацийСАТУРН.ПустаяСсылка"));
	ДанныеОрганизации.Вставить("Идентификатор",     "");
	ДанныеОрганизации.Вставить("Статус",            ПредопределенноеЗначение("Перечисление.СтатусыОбъектовСАТУРН.ПустаяСсылка"));
	ДанныеОрганизации.Вставить("Наименование",      "");
	ДанныеОрганизации.Вставить("ИНН",               "");
	ДанныеОрганизации.Вставить("ОтветственноеЛицо", "");
	ДанныеОрганизации.Вставить("ЮридическийАдрес",  "");
	ДанныеОрганизации.Вставить("ФактическийАдрес",  "");
	ДанныеОрганизации.Вставить("Телефон",           "");
	ДанныеОрганизации.Вставить("Email",             "");
	ДанныеОрганизации.Вставить("МассивРолей",       Новый Массив);
	
	Возврат ДанныеОрганизации;
	
КонецФункции

#КонецОбласти

// Возвращает структуру параметров заполнения табличной части.
//
// Возвращаемое значение:
//	Структура - Структура со свойствами:
//		* ОбновитьПАТ							- Булево - Признак необходимости заполнения значения реквизита 
//													'ПАТ' в табличной части объекта.
//		* ПересчитатьКоличествоСАТУРН			- Булево - Признак необходимости пересчета значения количества 
//													САТУРН.
//		* ПересчитатьКоличествоУпаковокПоСАТУРН	- Булево - Признак необходимости пересчета значения количества 
//													по количеству САТУРН.
//		* ПересчитатьКоличествоВУпаковкеСАТУРН	- Булево - Признак необходимости пересчета значения количества 
//													в упаковке САТУРН.
//		* ПересчитатьКоличествоУпаковокПоОстаткуСАТУРН	- Булево - Признак необходимости пересчета значения количества 
//													упаковок по остатку САТУРН (остаток в базовых единицах).
//		* КоличествоСуффикс						- Строка - суффиксы реквизитов Количество в документе для пересчета. Может быть указано несколько значений через запятую.
Функция ПараметрыЗаполненияТабличнойЧасти() Экспорт
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ОбновитьПАТ",        Ложь);
	ПараметрыЗаполнения.Вставить("ПересчитатьКоличествоСАТУРН",           Ложь);
	ПараметрыЗаполнения.Вставить("ПересчитатьКоличествоУпаковокПоСАТУРН", Ложь);
	// Действие по умолчанию.
	ПараметрыЗаполнения.Вставить("ПересчитатьКоличествоВУпаковкеСАТУРН",          Истина);
	ПараметрыЗаполнения.Вставить("ПересчитатьКоличествоУпаковокПоОстаткуСАТУРН",  Ложь);
	
	ПараметрыЗаполнения.Вставить("КоличествоСуффикс", "");
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПодборПартий

Функция РезультатВыбораПартииСАТУРН(ВыбранноеЗначение) Экспорт
	
	РезультатВыбора = Новый Структура;
	РезультатВыбора.Вставить("Операция", "ПодборВыборПартииСАТУРН");
	РезультатВыбора.Вставить("Партия", ВыбранноеЗначение.Партия);
	Если ЗначениеЗаполнено(ВыбранноеЗначение.ПАТ) Тогда
		РезультатВыбора.Вставить("ПАТ", ВыбранноеЗначение.ПАТ);
	КонецЕсли;
	
	РезультатВыбора.Вставить("КоличествоСАТУРН", ВыбранноеЗначение.ДоступныйОстаток);
	Если ВыбранноеЗначение.ДоступныйОстатокУпаковок = 0 Тогда
		РезультатВыбора.Вставить("КоличествоВУпаковкеСАТУРН", 0);
	Иначе
		РезультатВыбора.Вставить("КоличествоВУпаковкеСАТУРН", ВыбранноеЗначение.ДоступныйОстаток / ВыбранноеЗначение.ДоступныйОстатокУпаковок);
	КонецЕсли;
	
	РезультатВыбора.Вставить("ТипИзмеряемойВеличины", ВыбранноеЗначение.ТипИзмеряемойВеличины);
	РезультатВыбора.Вставить("КоличествоОстатокПартииСАТУРН", ВыбранноеЗначение.Остаток);
	
	Возврат РезультатВыбора;
	
КонецФункции

#КонецОбласти

#Область ПредставленияТабличныхЧастейСтрокой

// Возвращает настройки для формирования надписи-представления табличной части
//
// Параметры:
//  ПоляПодстановки - Строка - имена колонок коллекции, которые будут использоваться в представлении
// 
// Возвращаемое значение:
//  Структура - с параметрами:
//   * Поля  - Строка - имена колонок табличной части, которые будут использоваться в представлении,
//      в порядке подстановки в шаблон (разделитель - ",");
//   * Пустая      - Строка - надпись по умолчанию для пустой коллекции (по умолчанию "не заполнено");
//   * НеЗаполнено - Строка - надпись по умолчанию для пустого значения элемента (по умолчанию "не заполнено");
//   * Шаблон      - Строка, Массив Из Строка - шаблон вывода строки коллекции (по умолчанию "%1"), 
//      если передан массив то объединяться будут только части с непустыми параметрами;
//   * Количество  - Число  - количество строк выводимых в представлении (по умолчанию 1);
//   * Разделитель - Строка - строка, которой будут разделяться выводимые элементы табличной части (по умолчанию ",");
//   * Уникальные  - Булево - вывод уникальных представлений строк (по умолчанию Ложь);
//   * Пустые      - Булево - вывод представлений строк из пустых элементов (по умолчанию Истина).
//
Функция ПараметрыПредставленияТабличнойЧасти(ПоляПодстановки) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Поля",        ПоляПодстановки);
	Результат.Вставить("Пустая",      НСтр("ru = '<не заполнено>'"));
	Результат.Вставить("НеЗаполнено", НСтр("ru = '<не заполнено>'"));
	Результат.Вставить("Шаблон",      "%1");
	Результат.Вставить("Количество",  1);
	Результат.Вставить("Разделитель", ", ");
	Результат.Вставить("Уникальные",  Ложь);
	Результат.Вставить("Пустые",      Истина);
	Возврат Результат;
	
КонецФункции

// Формирует надпись (представление) гиперссылки для перехода в данные таб. части
// 
// Параметры:
//  Данные - ДанныеФормыКоллекция, ТаблицаЗначений, Массив из СтрокаТаблицыЗначений - данные информацию о которых необходимо вывести;
//  ПараметрыНадписи - Структура, Строка -См. ПараметрыНадписиПредставленияТабличнойЧасти()(строка вызывает конструктор структуры)
// 
// Возвращаемое значение:
//  Строка - пользовательское представление табличной части
Функция СформироватьНадписьПоДаннымТабличнойЧасти(Данные, ПараметрыНадписи) Экспорт
	
	Если ТипЗнч(ПараметрыНадписи) = Тип("Строка") Тогда
		// Передано имя реквизита, считаем что строка-шаблон состоит только из него:
		ПараметрыНадписи = ПараметрыПредставленияТабличнойЧасти(ПараметрыНадписи);
	КонецЕсли;
	
	ИменаКолонок = СтрРазделить(ПараметрыНадписи.Поля, ",");
	
	КоличествоСтрок = Данные.Количество();
	
	МассивВыводимых = Новый Массив;
	МассивПрочих    = Новый Массив;
	СчетчикСтрок    = 0;
	
	Для НомерВыводимойСтроки = 1 По КоличествоСтрок Цикл
		
		СтрокаТабличнойЧасти = Данные[НомерВыводимойСтроки-1];
		Если ТипЗнч(ПараметрыНадписи.Шаблон) = Тип("Массив") Тогда
			ДобавляемаяСтрока = Новый Массив;
		Иначе
			ДобавляемаяСтрока = ПараметрыНадписи.Шаблон;
		КонецЕсли;
		ЭтоПустаяСтрока = Истина;
		
		Для Ит = 0 По ИменаКолонок.ВГраница() Цикл
			ЗначениеПараметра = "";
			ИмяКолонки = СокрЛП(ИменаКолонок[Ит]);
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти[ИмяКолонки]) Тогда
				ЗначениеПараметра = СтрокаТабличнойЧасти[ИмяКолонки];
				Если ТипЗнч(ЗначениеПараметра) = Тип("Дата") Тогда
					ЗначениеПараметра = Формат(ЗначениеПараметра, "ДЛФ=D");
				КонецЕсли;
				ЭтоПустаяСтрока = Ложь;
			КонецЕсли;
			Если ТипЗнч(ПараметрыНадписи.Шаблон) = Тип("Массив") Тогда
				Если ЗначениеЗаполнено(СтрокаТабличнойЧасти[ИмяКолонки]) Тогда
					ДобавляемаяСтрока.Добавить(СтрЗаменить(ПараметрыНадписи.Шаблон[Ит],"%1", ЗначениеПараметра));
				КонецЕсли;
			Иначе
				ДобавляемаяСтрока = СтрЗаменить(ДобавляемаяСтрока, "%"+Формат(Ит+1,"ЧГ="), ЗначениеПараметра);
			КонецЕсли;
		КонецЦикла;
		
		Если ЭтоПустаяСтрока Тогда
			ДобавляемаяСтрока = ПараметрыНадписи.Пустая;
		ИначеЕсли ТипЗнч(ПараметрыНадписи.Шаблон) = Тип("Массив") Тогда
			ДобавляемаяСтрока = СтрСоединить(ДобавляемаяСтрока, " ");
		КонецЕсли;
		
		Если ЭтоПустаяСтрока И НЕ ПараметрыНадписи.Пустые Тогда
			Продолжить;
		ИначеЕсли ПараметрыНадписи.Уникальные И МассивВыводимых.Найти(ДобавляемаяСтрока) <> Неопределено Тогда
			Продолжить;
		ИначеЕсли СчетчикСтрок < ПараметрыНадписи.Количество Тогда
			МассивВыводимых.Добавить(ДобавляемаяСтрока);
		ИначеЕсли ПараметрыНадписи.Уникальные И МассивПрочих.Найти(ДобавляемаяСтрока) <> Неопределено Тогда
			Продолжить;
		Иначе 
			МассивПрочих.Добавить(ДобавляемаяСтрока);
		КонецЕсли;
		
		СчетчикСтрок = СчетчикСтрок + 1;
		
		//Если надо вывести все - дальше не считаем
		Если СчетчикСтрок = ПараметрыНадписи.Количество
			И ПараметрыНадписи.Пустые
			И НЕ ПараметрыНадписи.Уникальные Тогда
			СчетчикСтрок = КоличествоСтрок;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СчетчикСтрок = 0 Тогда
		Возврат ПараметрыНадписи.Пустая;
	КонецЕсли;
	
	СтрокаРезультата = СтрСоединить(МассивВыводимых, ПараметрыНадписи.Разделитель);
	
	Если СчетчикСтрок > ПараметрыНадписи.Количество Тогда
		СтрокаРезультата = СтрШаблон(НСтр("ru = '%1 (+ еще %2...)'"), СтрокаРезультата, СчетчикСтрок - ПараметрыНадписи.Количество);
	КонецЕсли;
	
	Возврат СтрокаРезультата;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеИдентификаторовТовараИПартий

// Параметры идентификации товара партии.
// 
// Возвращаемое значение:
//  Структура - Параметры идентификации товара партии:
// * Номенклатура    - ОпределяемыйТип.Номенклатура               - Номенклатура
// * Характеристика  - ОпределяемыйТип.ХарактеристикаНоменклатуры - Характеристика
// * Серия           - ОпределяемыйТип.СерияНоменклатуры          - Серия
Функция ПараметрыИдентификацииТовараПартии() Экспорт
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("Номенклатура");
	ВозвращаемоеЗначение.Вставить("Характеристика");
	ВозвращаемоеЗначение.Вставить("Серия");
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

// Возвращает элемент соответствия с ключем (именем метаданных) соответствующим типу
//
// Параметры:
//   СоответствиеПоТипам - Соответствие Из КлючИЗначение:
//                         * Ключ     - Строка - Имя метаданных документа
//                         * Значение - Произвольный -
//   ТипОснования        - Тип - ключ поиска
// 
// Возвращаемое значение:
//   - Неопределено                  - не найдено
//   - Соответствие Из КлючИЗначение - элемент соответствия
Функция СоответствиеПоТипу(СоответствиеПоТипам,ТипОснования)
	
	Для Каждого КлючИЗначение Из СоответствиеПоТипам Цикл
		Если ТипОснования = Тип("ДокументСсылка." + КлючИЗначение.Ключ) Тогда
			Возврат КлючИЗначение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Процедура СформироватьПредставлениеДанныхНовойПартии(Данные, ИмяРеквизита = "ДанныеНовойПартии") Экспорт
	
	Если Данные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Данные) = Тип("ДанныеФормыКоллекция") Тогда
		ДанныеДляОбработки = Данные;
	Иначе
		ДанныеДляОбработки = Новый Массив;
		ДанныеДляОбработки.Добавить(Данные);
	КонецЕсли;
	
	Для Каждого Строка Из ДанныеДляОбработки Цикл
		Если Не ЗначениеЗаполнено(Строка.НомерПартии) Тогда
			Строка[ИмяРеквизита] = "";
		Иначе
			МассивСтрок = Новый Массив;
			МассивСтрок.Добавить(СтрШаблон(НСтр("ru = '№ партии: %1'"),
				Строка.НомерПартии));
			Если ЗначениеЗаполнено(Строка.ТорговоеНаименование) Тогда
				МассивСтрок.Добавить(СтрШаблон(НСтр("ru = 'марка: %1'"),
					Строка.ТорговоеНаименование));
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.АртикулПроизводителя) Тогда
				МассивСтрок.Добавить(СтрШаблон(НСтр("ru = 'артикул производителя: %1'"),
					Строка.АртикулПроизводителя));
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.ДатаПроизводства) Тогда
				МассивСтрок.Добавить(СтрШаблон(НСтр("ru = 'дата производства %1'"),
					Формат(Строка.ДатаПроизводства, "ДФ=dd.MM.yyyy;")));
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.СрокГодности) Тогда
				МассивСтрок.Добавить(СтрШаблон(НСтр("ru = 'срок годности %1'"),
					Формат(Строка.СрокГодности, "ДФ=dd.MM.yyyy;")));
			КонецЕсли;
			Строка[ИмяРеквизита] = СтрСоединить(МассивСтрок, ", ");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция СтруктураИнтервала(НачалоПериода, КонецПериода = Неопределено) Экспорт
	
	Интервал = Новый Структура;
	Интервал.Вставить("НачалоПериода", НачалоПериода);
	Интервал.Вставить("КонецПериода", КонецПериода);
	
	Возврат Интервал;
	
КонецФункции

Функция ИнициализироватьПараметрыНастройкиОбмена(ВидНастройкиОбмена) Экспорт
	
	ПараметрыНастройкиОбмена = Новый Структура;
	
	Возврат ПараметрыНастройкиОбмена;
	
КонецФункции

#КонецОбласти
