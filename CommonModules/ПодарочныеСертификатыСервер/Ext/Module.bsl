
#Область ПрограммныйИнтерфейс

#Область Проведение

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Свойства - См. ПроведениеДокументов.СвойстваДокумента
//
// Возвращаемое значение:
//  См. ПроведениеДокументов.ПараметрыУчетногоМеханизма
//
Функция ПараметрыДляПроведенияДокумента(Документ, Свойства) Экспорт
	
	Параметры = ПроведениеДокументов.ПараметрыУчетногоМеханизма();
	
	//Проведение
	Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.ПодарочныеСертификаты);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыСведений.ИсторияПодарочныхСертификатов);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыСведений.АктивацияПодарочныхСертификатов);
		
	КонецЕсли;
	
	// Контроль даты запрета
	Если Свойства.РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
		Параметры.КонтрольныеРегистрыДатаЗапрета.Добавить(Метаданные.РегистрыНакопления.ПодарочныеСертификаты);
	КонецЕсли;
			
	Возврат Параметры;
	
КонецФункции

// Дополняет текст запроса механизма проверки даты запрета по таблице изменений.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 
// Возвращаемое значение:
//	Соответствие из КлючИЗначение:
//		* Ключ - Строка
//		* Значение - Строка - соответствие имен таблиц изменения регистров и текстов запросов.
//	
Функция ТекстыЗапросовКонтрольДатыЗапретаПоТаблицеИзменений(Запрос) Экспорт

	СоответствиеТекстовЗапросов = Новый Соответствие();
	СоответствиеТекстовЗапросов.Вставить("ТаблицаИзмененийПодарочныеСертификаты", 
		РегистрыНакопления.ПодарочныеСертификаты.ТекстЗапросаКонтрольДатыЗапрета(Запрос));
	Возврат СоответствиеТекстовЗапросов;
	
КонецФункции

// Возвращает тексты запросов для сторнирования движений при исправлении документов
// 
// Параметры:
// 	МетаданныеДокумента - ОбъектМетаданныхДокумент - Метаданные документа, который проводится.
// 
// Возвращаемое значение:
//	Соответствие из КлючИЗначение:
//		* Ключ - Строка
//		* Значение - Строка - Соответствие полного имени регистра тексту запроса сторнирования.
//
Функция ТекстыЗапросовСторнирования(МетаданныеДокумента) Экспорт
	
	ДвиженияДокумента = МетаданныеДокумента.Движения;

	ТекстыЗапросов = Новый Соответствие();
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.ПодарочныеСертификаты;
	Если ДвиженияДокумента.Содержит(МетаданныеРегистра) Тогда
		ТекстыЗапросов.Вставить(МетаданныеРегистра.ПолноеИмя(),	
			ПроведениеДокументов.ТекстСторнирующегоЗапроса(
				МетаданныеРегистра, МетаданныеДокумента));
	КонецЕсли;
	
	Возврат ТекстыЗапросов;
	
КонецФункции

// Процедура формирования движений по подчиненным регистрам подарочных сертификатов.
//
// Параметры:
//	ТаблицыДляДвижений - Структура - таблицы данных документа
//	Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//	Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	#Область ПодарочныеСертификаты
	
	ИмяТаблицы = "Таблица" + "ПодарочныеСертификаты";
	
	Если ТаблицыДляДвижений.Свойство(ИмяТаблицы)
		И ЗначениеЗаполнено(ТаблицыДляДвижений[ИмяТаблицы]) Тогда
		
		Движения.ПодарочныеСертификаты.Записывать = Истина;
		Движения.ПодарочныеСертификаты.Загрузить(ТаблицыДляДвижений[ИмяТаблицы]);
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ИсторияПодарочныхСертификатов
	
	ИмяТаблицы = "Таблица" + "ИсторияПодарочныхСертификатов";
	
	Если ТаблицыДляДвижений.Свойство(ИмяТаблицы)
		И ЗначениеЗаполнено(ТаблицыДляДвижений[ИмяТаблицы]) Тогда
		
		Движения.ИсторияПодарочныхСертификатов.Записывать = Истина;
		Движения.ИсторияПодарочныхСертификатов.Загрузить(ТаблицыДляДвижений[ИмяТаблицы]);
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область АктивацияПодарочныхСертификатов
	
	ИмяТаблицы = "Таблица" + "АктивацияПодарочныхСертификатов";
	
	Если ТаблицыДляДвижений.Свойство(ИмяТаблицы)
		И ЗначениеЗаполнено(ТаблицыДляДвижений[ИмяТаблицы]) Тогда
		
		Движения.АктивацияПодарочныхСертификатов.Записывать = Истина;
		Движения.АктивацияПодарочныхСертификатов.Загрузить(ТаблицыДляДвижений[ИмяТаблицы]);
		
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

// Формирует тексты запросов для контроля изменений записанных движений регистров.
//
// Параметры:
//  Запрос - Запрос - запрос, хранящий параметры используемые в списке запросов
//  ТекстыЗапроса - СписокЗначений Из Строка - список текстов запросов и их имен.
//  Документ - ДокументОбъект - записываемый документ.
//
Процедура ИнициализироватьДанныеКонтроляИзменений(Запрос, ТекстыЗапроса, Документ) Экспорт
	
КонецПроцедуры

// Выводит сообщения пользователю при наличии ошибок контроля изменений записанных движений регистров.
//
// Параметры:
//  РезультатыКонтроля - Структура - таблицы с результатами контроля изменений
//  Документ - ДокументОбъект - записываемый документ
//  Отказ - Булево - признак отказа от проведения документа.
//
Процедура СообщитьОРезультатахКонтроляИзменений(РезультатыКонтроля, Документ, Отказ) Экспорт
	
КонецПроцедуры

#КонецОбласти

// Процедура записывает в базу данных подарочный сертификат на основании
// переданной структуры с данными подарочного сертификата.
//
// Параметры:
//  СтруктураДанныхПодарочногоСертификата - см. ПодарочныеСертификатыВызовСервера.ИнициализироватьОписаниеПодарочногоСертификата
//
// Возвращаемое значение:
//  СправочникСсылка.ПодарочныеСертификаты - Зарегистрированный подарочный сертификат.
//
Функция ЗарегистрироватьПодарочныйСертификат(СтруктураДанныхПодарочногоСертификата) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПодарочныйСертификатОбъект = Справочники.ПодарочныеСертификаты.СоздатьЭлемент();
	
	ПодарочныйСертификатОбъект.Штрихкод      = СтруктураДанныхПодарочногоСертификата.Штрихкод;
	ПодарочныйСертификатОбъект.МагнитныйКод  = СтруктураДанныхПодарочногоСертификата.МагнитныйКод;
		
	ПодарочныйСертификатОбъект.Владелец      = СтруктураДанныхПодарочногоСертификата.ВидПодарочногоСертификата;
	Если ЗначениеЗаполнено(СтруктураДанныхПодарочногоСертификата.СерийныйНомер) Тогда
		ПодарочныйСертификатОбъект.Код = СтруктураДанныхПодарочногоСертификата.СерийныйНомер;
	КонецЕсли;
	
	ПодарочныйСертификатОбъект.Наименование = Строка(ПодарочныйСертификатОбъект.Владелец)
	                                        + ?(ЗначениеЗаполнено(ПодарочныйСертификатОбъект.Штрихкод), " " + Строка(ПодарочныйСертификатОбъект.Штрихкод), "")
	                                        + ?(ЗначениеЗаполнено(ПодарочныйСертификатОбъект.МагнитныйКод), " " + Строка(ПодарочныйСертификатОбъект.МагнитныйКод), "");
	ПодарочныйСертификатОбъект.Записать();
	
	Возврат ПодарочныйСертификатОбъект.Ссылка;
	
КонецФункции

// Функция возвращает тип кода подарочного сертификата, если только он
// используется в видах подарочных сертификатов.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ТипыКодовКарт, Неопределено - Основной тип кода подарочного сертификата.
//
Функция ПолучитьОсновнойТипКодаПодарочногоСертификата() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВидыПодарочныхСертификатов.ТипКарты КАК ТипКарты
	|ИЗ
	|	Справочник.ВидыПодарочныхСертификатов КАК ВидыПодарочныхСертификатов");
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Количество = Выборка.Количество();
	Если Количество = 0 Тогда
		Возврат Неопределено;
	ИначеЕсли Количество = 1 Тогда
		Выборка.Следующий();
		Если Выборка.ТипКарты = Перечисления.ТипыКарт.Штриховая Тогда
			Возврат Перечисления.ТипыКодовКарт.Штрихкод;
		ИначеЕсли Выборка.ТипКарты = Перечисления.ТипыКарт.Магнитная Тогда
			Возврат Перечисления.ТипыКодовКарт.МагнитныйКод;
		ИначеЕсли Выборка.ТипКарты = Перечисления.ТипыКарт.Смешанная Тогда
			Возврат Неопределено;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Процедура для проверки заполнения подарочных сертификатов/объектов расчетов в табличных частях документов.
//
// Параметры:
//  Объект - ДокументОбъект - Текущий документ.
//  Отказ - Булево - Признак отказа от проведения документа.
//
Процедура ОбработкаПроверкиЗаполнения(Объект, Отказ) Экспорт
	
	ТипСсылкиОбъекта = ТипЗнч(Объект.Ссылка); // ДокументОбъект
	Если ТипСсылкиОбъекта = Тип("ДокументСсылка.РеализацияПодарочныхСертификатов")
		Или ТипСсылкиОбъекта = Тип("ДокументСсылка.АннулированиеПодарочныхСертификатов")
		Или ТипСсылкиОбъекта = Тип("ДокументСсылка.ВводОстатков") 
		Или ТипСсылкиОбъекта = Тип("ДокументСсылка.ВводОстатковОПродажахЗаПрошлыеПериоды")
		Или ТипСсылкиОбъекта = Тип("ДокументСсылка.ВозвратПодарочныхСертификатов")
		Или ТипСсылкиОбъекта = Тип("ДокументСсылка.ЧекККМ")
		Или ТипСсылкиОбъекта = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
			
		ПроверитьЗаполнениеТабличнойЧастиПодарочныеСертификаты(Объект, Отказ);
		
	ИначеЕсли ТипСсылкиОбъекта = Тип("ДокументСсылка.ВводОстатковВзаиморасчетов") Тогда
		
		ПроверитьЗаполнениеТабличнойЧастиРасшифровкаПлатежа(Объект, Отказ);
		
	ИначеЕсли (ТипСсылкиОбъекта = Тип("ДокументСсылка.ПриходныйКассовыйОрдер")
				Или ТипСсылкиОбъекта = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств")
				Или ТипСсылкиОбъекта = Тип("ДокументСсылка.ОперацияПоПлатежнойКарте"))
			И Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента Тогда
				
		ПроверитьЗаполнениеТабличнойЧастиРасшифровкаПлатежа(Объект, Отказ);
		
	ИначеЕсли (ТипСсылкиОбъекта = Тип("ДокументСсылка.РасходныйКассовыйОрдер")
				Или ТипСсылкиОбъекта = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств")
				Или ТипСсылкиОбъекта = Тип("ДокументСсылка.ОперацияПоПлатежнойКарте")
				Или ТипСсылкиОбъекта = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств"))
			И Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
		
		ПроверитьЗаполнениеТабличнойЧастиРасшифровкаПлатежа(Объект, Отказ);
		
	ИначеЕсли ТипСсылкиОбъекта = Тип("ДокументСсылка.ВзаимозачетЗадолженности") Тогда
		
		ПроверитьЗаполнениеТабличнойЧастиРасшифровкаПлатежа(Объект, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет заполнение реквизита "СуммаВВалютеСертификата" в табличной части ПодарочныеСертификаты.
//
// Параметры:
//	ТабличнаяЧасть - ТабличнаяЧасть - подарочные сертификаты.
//	Организация - СправочникСсылка.Организации - Организация документа.
//	Дата - Дата - Дата документа.
//	Валюта - СправочникСсылка.Валюты - Валюта документа.
//
Процедура ЗаполнитьСуммуВВалютеСертификатаВТабличнойЧасти(ТабличнаяЧасть, Организация, Дата, Валюта) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Сумма КАК Сумма,
	|	ТаблицаДокумента.СуммаВВалютеСертификата КАК СуммаВВалютеСертификата,
	|	ТаблицаДокумента.ПодарочныйСертификат КАК ПодарочныйСертификат
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.СуммаВВалютеСертификата = 0
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|
	|	ВЫБОР КОГДА ТаблицаДокумента.СуммаВВалютеСертификата = 0 ТОГДА
	|		(ТаблицаДокумента.Сумма *
	|		ЕСТЬNULL(КурсыВалютДокумента.КурсЧислитель, 1) * 
	|		ЕСТЬNULL(КурсыВалют.КурсЗнаменатель, 1)
	|		) / (
	|		ЕСТЬNULL(КурсыВалют.КурсЧислитель, 1) * 
	|		ЕСТЬNULL(КурсыВалютДокумента.КурсЗнаменатель, 1)
	|		)
	|	ИНАЧЕ
	|		ТаблицаДокумента.СуммаВВалютеСертификата
	|	КОНЕЦ КАК СуммаВВалютеСертификата
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта И БазоваяВалюта = &БазоваяВалюта) КАК КурсыВалютДокумента
	|	ПО
	|		ИСТИНА
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата, БазоваяВалюта = &БазоваяВалюта) КАК КурсыВалют
	|	ПО
	|		ТаблицаДокумента.ПодарочныйСертификат.Владелец.Валюта = КурсыВалют.Валюта
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДокумента.НомерСтроки
	|;
	|");
	
	Запрос.Параметры.Вставить("ТаблицаДокумента", ТабличнаяЧасть.Выгрузить());
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Валюта", Валюта);
	Запрос.УстановитьПараметр("БазоваяВалюта", ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Организация));
	
	// Получим таблицу документа с рассчитанной суммой взаиморасчетов.
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаТаблицы = ТабличнаяЧасть.Найти(Выборка.НомерСтроки, "НомерСтроки");
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка, ,"НомерСтроки");
		
	КонецЦикла;
	
КонецПроцедуры

// Обработать подарочный сертификат при подборе в табличую часть Расшифровка платежа.
// Параметры:
//  ПодарочныйСертификат - СправочникСсылка.ПодарочныеСертификаты - 
//  Форма - ФормаКлиентскогоПриложения - 
// 
// Возвращаемое значение:
//	СтрокаТабличнойЧасти, Неопределено - 
//
Функция ДобавитьПодарочныйСертификатВТабличуюЧастьРасшифровкаПлатежа(ПодарочныйСертификат, Форма) Экспорт
	
	НайденнаяСтрока = Неопределено;

	СсылкаОбъектаФормы = Форма.Объект.Ссылка; // ДокументСсылка
	ТипСсылкиОбъектаФормы = ТипЗнч(СсылкаОбъектаФормы);
	
	ОбрабатываемыеТипы = Новый Массив;
	ОбрабатываемыеТипы.Добавить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"));
	ОбрабатываемыеТипы.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	ОбрабатываемыеТипы.Добавить(Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств"));
	ОбрабатываемыеТипы.Добавить(Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств"));
	ОбрабатываемыеТипы.Добавить(Тип("ДокументСсылка.ОперацияПоПлатежнойКарте"));
	ОбрабатываемыеТипы.Добавить(Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств"));
	
	Если Не ОбрабатываемыеТипы.Найти(ТипСсылкиОбъектаФормы) = Неопределено Тогда
		 
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ОбъектыРасчетов.Ссылка                 КАК ОбъектРасчетов,
		|	
		|	ПодарочныеСертификаты.Владелец.Валюта  КАК ВалютаВзаиморасчетов,
		|	ПодарочныеСертификаты.Владелец.Номинал КАК СуммаВзаиморасчетов,
		|	ПодарочныеСертификаты.Владелец.Номинал КАК Сумма,
		|	ПодарочныеСертификаты.Владелец.СтатьяДвиженияДенежныхСредствПродажа КАК СтатьяДвиженияДенежныхСредствПродажа,
		|	ПодарочныеСертификаты.Владелец.СтатьяДвиженияДенежныхСредствВозврат КАК СтатьяДвиженияДенежныхСредствВозврат
		|	
		|ИЗ
		|	Справочник.ПодарочныеСертификаты КАК ПодарочныеСертификаты
		|
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|	ПО ОбъектыРасчетов.Объект = ПодарочныеСертификаты.Ссылка
		|
		|ГДЕ
		|	ПодарочныеСертификаты.Ссылка = &Ссылка
		|");
		
		Запрос.УстановитьПараметр("Ссылка", ПодарочныйСертификат);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		ТабличнаяЧасть = Форма.Объект.РасшифровкаПлатежа;
		Если Выборка.Следующий() Тогда
			
			НайденныеСтроки = ТабличнаяЧасть.НайтиСтроки(Новый Структура("ОбъектРасчетов", Выборка.ОбъектРасчетов));
			Если НайденныеСтроки.Количество() = 0 Тогда
				Если ТабличнаяЧасть.Количество() = 1
					И НЕ ЗначениеЗаполнено(ТабличнаяЧасть[0].ОбъектРасчетов) Тогда
					НайденнаяСтрока = ТабличнаяЧасть[0];
				Иначе
					НайденнаяСтрока = ТабличнаяЧасть.Добавить();
					Если ТипСсылкиОбъектаФормы = Тип("ДокументСсылка.РасходныйКассовыйОрдер") 
						Или ТипСсылкиОбъектаФормы = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
						НайденнаяСтрока.НалогообложениеНДС = Форма.Объект.НалогообложениеНДС;
					КонецЕсли;
				КонецЕсли;
			Иначе
				НайденнаяСтрока = НайденныеСтроки[0];
			КонецЕсли;
			
			Если Не ТипСсылкиОбъектаФормы = Тип("ДокументСсылка.ОперацияПоПлатежнойКарте") Тогда
				НайденнаяСтрока.Организация    = Форма.Объект.Организация;
			КонецЕсли;
			НайденнаяСтрока.Партнер        = Справочники.Партнеры.РозничныйПокупатель;
			Если ЗначениеЗаполнено(Форма.Партнер) Тогда
				// Используется реквизит формы Партнер, т.к. реквизит объекта в документах обрабатываемых типов 
				// заполняется перед записью (из расшифровки платежа или как основной партнер контрагента).
				НайденнаяСтрока.Партнер    = Форма.Партнер;
			КонецЕсли;
			НайденнаяСтрока.ОбъектРасчетов = Выборка.ОбъектРасчетов;
			НайденнаяСтрока.Сумма          = Выборка.Сумма;
			
			НайденнаяСтрока.ВалютаВзаиморасчетов = Выборка.ВалютаВзаиморасчетов;
			НайденнаяСтрока.СуммаВзаиморасчетов  = Выборка.СуммаВзаиморасчетов;
			
			НайденнаяСтрока.КурсЧислительВзаиморасчетов = 1;
			НайденнаяСтрока.КурсЗнаменательВзаиморасчетов = 1;
			
			Если Форма.Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента Тогда
				НайденнаяСтрока.СтатьяДвиженияДенежныхСредств = Выборка.СтатьяДвиженияДенежныхСредствПродажа;
			Иначе
				НайденнаяСтрока.СтатьяДвиженияДенежныхСредств = Выборка.СтатьяДвиженияДенежныхСредствВозврат;
			КонецЕсли;
			
			Если ТипСсылкиОбъектаФормы = Тип("ДокументСсылка.РасходныйКассовыйОрдер") 
				Или ТипСсылкиОбъектаФормы = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
					
				Если Не ЗначениеЗаполнено(НайденнаяСтрока.СтавкаНДС) Тогда
					НайденнаяСтрока.СтавкаНДС = УчетНДСУП.СтавкаНДСПоУмолчанию(Форма.Объект.Организация, Форма.Объект.Дата, Истина);
					
					СтруктураПараметровДействия = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(Форма.Объект);
					СтруктураДействий = Новый Структура;
					СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", СтруктураПараметровДействия);
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НайденнаяСтрока, СтруктураДействий, Неопределено);
				КонецЕсли;
				
			ИначеЕсли ТипСсылкиОбъектаФормы = Тип("ДокументСсылка.ОперацияПоПлатежнойКарте") Тогда
				
				Если Не ЗначениеЗаполнено(НайденнаяСтрока.СуммаНДС) Тогда
					НайденнаяСтрока.СтавкаНДС = УчетНДСУП.СтавкаНДСПоУмолчанию(Форма.Объект.Организация, Форма.Объект.Дата, Истина);
					СтруктураПересчетаСуммы = Новый Структура;
					СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", Истина);
					СтруктураДействий = Новый Структура;
					СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НайденнаяСтрока, СтруктураДействий, Неопределено);
				КонецЕсли;
				
			Иначе
				
				НайденнаяСтрока.СтавкаНДС = УчетНДСУП.СтавкаНДСПоУмолчанию(Форма.Объект.Организация, Форма.Объект.Дата, Истина);
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НайденнаяСтрока;
КонецФункции

#Область ПоискПодарочныхСертификатов

// Выполняет поиск видов подарочных сертификатов, которые могут иметь заданный код и тип кода.
//
// Параметры:
//  КодКарты - Строка - Код карты.
//  ТипКода - ПеречислениеСсылка.ТипыКодовКарт - Тип кода карты.
//
// Возвращаемое значение:
//  Массив из СправочникСсылка.ВидыПодарочныхСертификатов - Ссылки на найденные виды подарочных сертификатов.
//
Функция ПолучитьВозможныеВидыПодарочныхСертификатовПоКодуПодарочногоСертификата(КодКарты, ТипКода) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВидыПодарочныхСертификатов = Новый Массив;
	
	Если ТипКода = Перечисления.ТипыКодовКарт.МагнитныйКод Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ШаблоныКодовПодарочныхСертификатов.Ссылка КАК ВидПодарочногоСертификата
		|ИЗ
		|	Справочник.ВидыПодарочныхСертификатов.ШаблоныКодовПодарочныхСертификатов КАК ШаблоныКодовПодарочныхСертификатов
		|ГДЕ
		|	  ШаблоныКодовПодарочныхСертификатов.НачалоДиапазонаМагнитногоКода <= &КодКарты
		|	И ШаблоныКодовПодарочныхСертификатов.КонецДиапазонаМагнитногоКода  >= &КодКарты
		|	И ШаблоныКодовПодарочныхСертификатов.ДлинаМагнитногоКода = &ДлинаКода
		|
		|УПОРЯДОЧИТЬ ПО
		|	НачалоДиапазонаМагнитногоКода");
	Иначе
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ШаблоныКодовПодарочныхСертификатов.Ссылка КАК ВидПодарочногоСертификата
		|ИЗ
		|	Справочник.ВидыПодарочныхСертификатов.ШаблоныКодовПодарочныхСертификатов КАК ШаблоныКодовПодарочныхСертификатов
		|ГДЕ
		|	ШаблоныКодовПодарочныхСертификатов.НачалоДиапазонаШтрихкода <= &КодКарты
		|	И ШаблоныКодовПодарочныхСертификатов.КонецДиапазонаШтрихкода >= &КодКарты
		|	И ШаблоныКодовПодарочныхСертификатов.ДлинаШтрихкода = &ДлинаКода
		|
		|УПОРЯДОЧИТЬ ПО
		|	ШаблоныКодовПодарочныхСертификатов.НачалоДиапазонаШтрихкода");
	КонецЕсли;

	Запрос.УстановитьПараметр("КодКарты",  Строка(КодКарты));
	Запрос.УстановитьПараметр("ДлинаКода", СтрДлина(Строка(КодКарты)));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ВидыПодарочныхСертификатов.Добавить(Выборка.ВидПодарочногоСертификата);
	КонецЦикла;
	
	Возврат ВидыПодарочныхСертификатов;
	
КонецФункции

// Выполняет поиск подарочных сертификатов.
//
// Параметры:
//  КодКарты - Строка - Код карты подарочного сертификата.
//  ТипКода - ПеречислениеСсылка.ТипыКодовКарт - Тип кода карты подарочного сертификата.
//  Отборы - Структура - Дополнительные отборы для поиска.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * ЗарегистрированныеПодарочныеСертификаты - Массив из см. ПодарочныеСертификатыВызовСервера.ИнициализироватьОписаниеПодарочногоСертификата - 
//   * НеЗарегистрированныеПодарочныеСертификаты - Массив из см. ПодарочныеСертификатыВызовСервера.ИнициализироватьОписаниеПодарочногоСертификата - 
//
Функция НайтиПодарочныеСертификаты(КодКарты, ТипКода, Отборы = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗарегистрированныеПодарочныеСертификаты = Новый Массив;
	НеЗарегистрированныеПодарочныеСертификаты = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ШаблоныКодовПодарочныхСертификатов.Ссылка                            КАК Ссылка,
	|	ШаблоныКодовПодарочныхСертификатов.Ссылка.ПериодДействия             КАК ПериодДействия,
	|	ШаблоныКодовПодарочныхСертификатов.Ссылка.КоличествоПериодовДействия КАК КоличествоПериодовДействия,
	|	ШаблоныКодовПодарочныхСертификатов.Ссылка.Номинал                    КАК Номинал,
	|	ШаблоныКодовПодарочныхСертификатов.Ссылка.Валюта                     КАК Валюта,
	|	ШаблоныКодовПодарочныхСертификатов.Ссылка.ТипКарты                   КАК ТипКарты,
	|	ШаблоныКодовПодарочныхСертификатов.Ссылка.СегментНоменклатуры        КАК СегментНоменклатуры,
	|	ШаблоныКодовПодарочныхСертификатов.Ссылка.УчетПодарочныхСертификатов2_5 КАК УчетПодарочныхСертификатов2_5,
	|	ШаблоныКодовПодарочныхСертификатов.Ссылка.ЧастичнаяОплата            КАК ЧастичнаяОплата,
	|	ШаблоныКодовПодарочныхСертификатов.Ссылка.СтатьяДвиженияДенежныхСредствПродажа КАК СтатьяДвиженияДенежныхСредствПродажа,
	|	ШаблоныКодовПодарочныхСертификатов.Ссылка.СтатьяДвиженияДенежныхСредствВозврат КАК СтатьяДвиженияДенежныхСредствВозврат,
	|	ШаблоныКодовПодарочныхСертификатов.Ссылка.СтатьяДоходов	КАК СтатьяДоходов,
	|	ШаблоныКодовПодарочныхСертификатов.Ссылка.АналитикаДоходов	КАК АналитикаДоходов,
	|
	|	ШаблоныКодовПодарочныхСертификатов.Ссылка.Организация                КАК Организация
	|ПОМЕСТИТЬ ВидыПодарочныхСертификатов
	|ИЗ
	|	Справочник.ВидыПодарочныхСертификатов.ШаблоныКодовПодарочныхСертификатов КАК ШаблоныКодовПодарочныхСертификатов
	|ГДЕ
	|	&УсловиеНачалоДиапазона                    <= &КодКарты
	|	И &УсловиеКонецДиапазона                   >= &КодКарты
	|	И &УсловиеДлинаКода                         = &ДлинаКода
	|	И &УсловиеОтбораВалюта
	|	И &УсловиеОтбораУчетПодарочныхСертификатов2_5
	|	И ШаблоныКодовПодарочныхСертификатов.Ссылка.ПометкаУдаления = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПодарочныеСертификаты.Ссылка                КАК Ссылка,
	|	ПодарочныеСертификаты.Наименование          КАК Наименование,
	|	ПодарочныеСертификаты.МагнитныйКод          КАК МагнитныйКод,
	|	ПодарочныеСертификаты.Штрихкод              КАК Штрихкод,
	|	ПодарочныеСертификаты.Код                   КАК СерийныйНомер,
	|	ЕСТЬNULL(ОбъектыРасчетов.Ссылка, ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)) КАК ОбъектРасчетов,
	|	ЕСТЬNULL(ОбъектыРасчетов.Партнер, ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)) КАК Партнер,
	|	ВЫБОР
	|		КОГДА ВидыПодарочныхСертификатов.УчетПодарочныхСертификатов2_5
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыПодарочныхСертификатов.ПустаяСсылка)
	|		ИНАЧЕ ЕСТЬNULL(ИсторияПодарочныхСертификатов.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыПодарочныхСертификатов.НеАктивирован))
	|	КОНЕЦ КАК СтатусИзИсторииПодарочныхСертификатов,
	|	ЕСТЬNULL(АктивацияПодарочныхСертификатов.Активность, ЛОЖЬ) КАК СтатусАктивации,

	|	ВидыПодарочныхСертификатов.Ссылка                            КАК ВидПодарочногоСертификата,
	|	ВидыПодарочныхСертификатов.ПериодДействия                    КАК ПериодДействия,
	|	ВидыПодарочныхСертификатов.КоличествоПериодовДействия        КАК КоличествоПериодовДействия,
	|	ВидыПодарочныхСертификатов.Номинал                           КАК Номинал,
	|	ВидыПодарочныхСертификатов.Валюта                            КАК Валюта,
	|	ВидыПодарочныхСертификатов.ТипКарты                          КАК ТипКарты,
	|	ВидыПодарочныхСертификатов.СегментНоменклатуры               КАК СегментНоменклатуры,
	|	ВидыПодарочныхСертификатов.УчетПодарочныхСертификатов2_5 КАК УчетПодарочныхСертификатов2_5,
	|	ВидыПодарочныхСертификатов.ЧастичнаяОплата КАК ЧастичнаяОплата,
	|	ВидыПодарочныхСертификатов.СтатьяДвиженияДенежныхСредствПродажа КАК СтатьяДвиженияДенежныхСредствПродажа,
	|	ВидыПодарочныхСертификатов.СтатьяДвиженияДенежныхСредствВозврат КАК СтатьяДвиженияДенежныхСредствВозврат,
	|	ВидыПодарочныхСертификатов.СтатьяДоходов КАК СтатьяДоходов,
	|	ВидыПодарочныхСертификатов.АналитикаДоходов КАК АналитикаДоходов,
	|	ЕСТЬNULL(АктивацияПодарочныхСертификатов.Организация, ВЫБОР
	|			КОГДА ВидыПодарочныхСертификатов.УчетПодарочныхСертификатов2_5
	|				ТОГДА ВидыПодарочныхСертификатов.Организация
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|		КОНЕЦ) КАК Организация,
	|
	|	ЕСТЬNULL(АктивацияПодарочныхСертификатов.ДатаНачалаДействия, ДАТАВРЕМЯ(1,1,1)) КАК ДатаНачалаДействия,
	|	ЕСТЬNULL(АктивацияПодарочныхСертификатов.ДатаОкончанияДействия, ДАТАВРЕМЯ(1,1,1)) КАК ДатаОкончанияДействия
	|
	|ПОМЕСТИТЬ ПодарочныеСертификаты
	|ИЗ
	|	Справочник.ПодарочныеСертификаты КАК ПодарочныеСертификаты
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВидыПодарочныхСертификатов
	|		ПО ВидыПодарочныхСертификатов.Ссылка  = ПодарочныеСертификаты.Владелец
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АктивацияПодарочныхСертификатов КАК АктивацияПодарочныхСертификатов
	|		ПО АктивацияПодарочныхСертификатов.ПодарочныйСертификат = ПодарочныеСертификаты.Ссылка	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияПодарочныхСертификатов.СрезПоследних(,) КАК ИсторияПодарочныхСертификатов
	|		ПО ИсторияПодарочныхСертификатов.ПодарочныйСертификат = ПодарочныеСертификаты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|		ПО (ОбъектыРасчетов.Объект = ПодарочныеСертификаты.Ссылка)
	|	
	|ГДЕ
	| ИСТИНА
	| И &ИмяПоляКодКарты = &КодКарты
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПодарочныеСертификаты.Ссылка КАК Ссылка,
	|	ПодарочныеСертификаты.ОбъектРасчетов КАК ОбъектРасчетов
	|ПОМЕСТИТЬ ПодарочныеСертификатыСтарогоОбразца
	|ИЗ
	|	ПодарочныеСертификаты КАК ПодарочныеСертификаты
	|ГДЕ
	|	НЕ ПодарочныеСертификаты.УчетПодарочныхСертификатов2_5
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПодарочныеСертификаты.Ссылка КАК Ссылка,
	|	ПодарочныеСертификаты.ОбъектРасчетов КАК ОбъектРасчетов
	|ПОМЕСТИТЬ ПодарочныеСертификатыНовогоОбразца
	|ИЗ
	|	ПодарочныеСертификаты КАК ПодарочныеСертификаты
	|ГДЕ
	|	ПодарочныеСертификаты.УчетПодарочныхСертификатов2_5
	|	И НЕ ПодарочныеСертификаты.ОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиСертификатов.ПодарочныйСертификат КАК ПодарочныйСертификат,
	|	ОстаткиСертификатов.СуммаОстаток
	|ПОМЕСТИТЬ ОстаткиПодарочныхСертификатов
	|ИЗ
	|	РегистрНакопления.ПодарочныеСертификаты.Остатки(
	|		,
	|		ПодарочныйСертификат В
	|			(ВЫБРАТЬ
	|				Т.Ссылка
	|			ИЗ
	|				ПодарочныеСертификатыСтарогоОбразца КАК Т)) КАК ОстаткиСертификатов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОстаткиСертификатов.ОбъектРасчетов.Объект КАК ПодарочныйСертификат,
	|	ВЫБОР КОГДА ОстаткиСертификатов.СуммаОстаток < 0 
	|		ТОГДА -ОстаткиСертификатов.СуммаОстаток
	|		ИНАЧЕ ОстаткиСертификатов.СуммаОстаток
	|	КОНЕЦ	
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Остатки(
	|		,
	|		ОбъектРасчетов В
	|			(ВЫБРАТЬ
	|				Т.ОбъектРасчетов
	|			ИЗ
	|				ПодарочныеСертификатыНовогоОбразца КАК Т)) КАК ОстаткиСертификатов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПодарочныйСертификат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПодарочныеСертификаты.Ссылка КАК ПодарочныйСертификат,
	|	ВЫБОР КОГДА (ПодарочныеСертификаты.Ссылка, ИСТИНА) 
	|		В (ВЫБРАТЬ ПЕРВЫЕ 1
	|				Т.ПодарочныйСертификат, 
	|				ИСТИНА 
	|			ИЗ РегистрНакопления.ПодарочныеСертификаты КАК Т
	|			ГДЕ
	|				Т.Регистратор ССЫЛКА Документ.АннулированиеПодарочныхСертификатов
	|				И Т.Активность
	|				И Т.ПодарочныйСертификат = ПодарочныеСертификаты.Ссылка) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК Аннулирован,
	|	ВЫБОР КОГДА (ПодарочныеСертификаты.Ссылка, ИСТИНА) 
	|		В (ВЫБРАТЬ ПЕРВЫЕ 1
	|				Т.ПодарочныйСертификат, 
	|				ИСТИНА 
	|			ИЗ РегистрНакопления.ПодарочныеСертификаты КАК Т
	|			ГДЕ
	|				Т.Регистратор ССЫЛКА Документ.ВозвратПодарочныхСертификатов
	|				И Т.Активность
	|				И Т.Сумма <> 0
	|				И Т.ПодарочныйСертификат = ПодарочныеСертификаты.Ссылка) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ОформленВозврат
	|ПОМЕСТИТЬ СостояниеПодарочныхСертификатов
	|ИЗ
	|	ПодарочныеСертификатыСтарогоОбразца КАК ПодарочныеСертификаты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПодарочныеСертификаты.Ссылка КАК ПодарочныйСертификат,
	|	ВЫБОР КОГДА (ПодарочныеСертификаты.ОбъектРасчетов, ИСТИНА) 
	|		В (ВЫБРАТЬ ПЕРВЫЕ 1
	|				Т.ОбъектРасчетов, 
	|				ИСТИНА 
	|			ИЗ РегистрНакопления.РасчетыСКлиентами КАК Т
	|			ГДЕ
	|				Т.Регистратор ССЫЛКА Документ.АннулированиеПодарочныхСертификатов
	|				И Т.Активность
	|				И Т.ОбъектРасчетов = ПодарочныеСертификаты.ОбъектРасчетов) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК Аннулирован,
	|	ВЫБОР КОГДА (ПодарочныеСертификаты.ОбъектРасчетов, ИСТИНА) 
	|		В (ВЫБРАТЬ ПЕРВЫЕ 1
	|				Т.ОбъектРасчетов, 
	|				ИСТИНА 
	|			ИЗ РегистрНакопления.РасчетыСКлиентами КАК Т
	|			ГДЕ
	|				(Т.Регистратор ССЫЛКА Документ.ВозвратПодарочныхСертификатов
	|				ИЛИ Т.Регистратор ССЫЛКА Документ.РасходныйКассовыйОрдер
	|				ИЛИ Т.Регистратор ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств
	|				ИЛИ Т.Регистратор ССЫЛКА Документ.ОперацияПоПлатежнойКарте
	|				ИЛИ Т.Регистратор ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств)
	|				И Т.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту),
	|											ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса))
	|				И Т.Активность
	|				И Т.Сумма <> 0
	|				И Т.ОбъектРасчетов = ПодарочныеСертификаты.ОбъектРасчетов) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ОформленВозврат
	|ИЗ
	|	ПодарочныеСертификатыНовогоОбразца КАК ПодарочныеСертификаты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПодарочныйСертификат
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1                                           КАК Порядок,
	|	ПодарочныеСертификаты.Ссылка                КАК Ссылка,
	|	ПодарочныеСертификаты.Наименование          КАК Наименование,
	|	ПодарочныеСертификаты.МагнитныйКод          КАК МагнитныйКод,
	|	ПодарочныеСертификаты.Штрихкод              КАК Штрихкод,
	
	|	ПодарочныеСертификаты.СерийныйНомер         КАК СерийныйНомер,
	|	ПодарочныеСертификаты.СтатусИзИсторииПодарочныхСертификатов КАК СтатусИзИсторииПодарочныхСертификатов,
	|	ПодарочныеСертификаты.СтатусАктивации         КАК СтатусАктивации,
	|	ЕСТЬNULL(ОстаткиСертификатов.СуммаОстаток, 0) КАК Остаток,
	|	
	|	ПодарочныеСертификаты.ВидПодарочногоСертификата         КАК ВидПодарочногоСертификата,
	|	ПодарочныеСертификаты.ПериодДействия                    КАК ПериодДействия,
	|	ПодарочныеСертификаты.КоличествоПериодовДействия        КАК КоличествоПериодовДействия,
	|	ПодарочныеСертификаты.Номинал                           КАК Номинал,
	|	ПодарочныеСертификаты.Валюта                            КАК Валюта,
	|	ПодарочныеСертификаты.ТипКарты                          КАК ТипКарты,
	|	ПодарочныеСертификаты.СегментНоменклатуры               КАК СегментНоменклатуры,
	|	ПодарочныеСертификаты.УчетПодарочныхСертификатов2_5 КАК УчетПодарочныхСертификатов2_5,
	|	ПодарочныеСертификаты.ЧастичнаяОплата                   КАК ЧастичнаяОплата,
	|	ПодарочныеСертификаты.ДатаНачалаДействия                КАК ДатаНачалаДействия,
	|	ПодарочныеСертификаты.ДатаОкончанияДействия             КАК ДатаОкончанияДействия,
	|	ПодарочныеСертификаты.ОбъектРасчетов 					КАК ОбъектРасчетов,
	|	ПодарочныеСертификаты.Партнер 							КАК Партнер,
	|	ПодарочныеСертификаты.СтатьяДвиженияДенежныхСредствПродажа КАК СтатьяДвиженияДенежныхСредствПродажа,
	|	ПодарочныеСертификаты.СтатьяДвиженияДенежныхСредствВозврат КАК СтатьяДвиженияДенежныхСредствВозврат,
	|	ПодарочныеСертификаты.СтатьяДоходов	КАК СтатьяДоходов,
	|	ПодарочныеСертификаты.АналитикаДоходов	КАК АналитикаДоходов,
	
	|	ПодарочныеСертификаты.Организация						КАК Организация,
	|	ЕСТЬNULL(СостояниеПодарочныхСертификатов.ОформленВозврат, ЛОЖЬ) КАК ОформленВозврат,
	|	ЕСТЬNULL(СостояниеПодарочныхСертификатов.Аннулирован, ЛОЖЬ) КАК Аннулирован
	|ИЗ
	|	ПодарочныеСертификаты КАК ПодарочныеСертификаты
	|   ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиПодарочныхСертификатов КАК ОстаткиСертификатов
	|	ПО ОстаткиСертификатов.ПодарочныйСертификат = ПодарочныеСертификаты.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ СостояниеПодарочныхСертификатов КАК СостояниеПодарочныхСертификатов
	|	ПО ПодарочныеСертификаты.Ссылка = СостояниеПодарочныхСертификатов.ПодарочныйСертификат
	|	
	|ГДЕ
	|	НЕ ПодарочныеСертификаты.УчетПодарочныхСертификатов2_5
	|	И &УсловиеОтбораОрганизацияПоТипуОперации
	|	И &УсловиеОтбораСтатусИзИсторииПодарочныхСертификатов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1                                           КАК Порядок,
	|	ПодарочныеСертификаты.Ссылка                КАК Ссылка,
	|	ПодарочныеСертификаты.Наименование          КАК Наименование,
	|	ПодарочныеСертификаты.МагнитныйКод          КАК МагнитныйКод,
	|	ПодарочныеСертификаты.Штрихкод              КАК Штрихкод,
	
	|	ПодарочныеСертификаты.СерийныйНомер         КАК СерийныйНомер,
	|	ПодарочныеСертификаты.СтатусИзИсторииПодарочныхСертификатов КАК СтатусИзИсторииПодарочныхСертификатов,
	|	ПодарочныеСертификаты.СтатусАктивации         КАК СтатусАктивации,
	|	ЕСТЬNULL(ОстаткиСертификатов.СуммаОстаток, 0) КАК Остаток,
	|	
	|	ПодарочныеСертификаты.ВидПодарочногоСертификата         КАК ВидПодарочногоСертификата,
	|	ПодарочныеСертификаты.ПериодДействия                    КАК ПериодДействия,
	|	ПодарочныеСертификаты.КоличествоПериодовДействия        КАК КоличествоПериодовДействия,
	|	ПодарочныеСертификаты.Номинал                           КАК Номинал,
	|	ПодарочныеСертификаты.Валюта                            КАК Валюта,
	|	ПодарочныеСертификаты.ТипКарты                          КАК ТипКарты,
	|	ПодарочныеСертификаты.СегментНоменклатуры               КАК СегментНоменклатуры,
	|	ПодарочныеСертификаты.УчетПодарочныхСертификатов2_5 КАК УчетПодарочныхСертификатов2_5,
	|	ПодарочныеСертификаты.ЧастичнаяОплата                   КАК ЧастичнаяОплата,
	|	ПодарочныеСертификаты.ДатаНачалаДействия                КАК ДатаНачалаДействия,
	|	ПодарочныеСертификаты.ДатаОкончанияДействия             КАК ДатаОкончанияДействия,
	|	ПодарочныеСертификаты.ОбъектРасчетов 					КАК ОбъектРасчетов,
	|	ПодарочныеСертификаты.Партнер 							КАК Партнер,
	|	ПодарочныеСертификаты.СтатьяДвиженияДенежныхСредствПродажа КАК СтатьяДвиженияДенежныхСредствПродажа,
	|	ПодарочныеСертификаты.СтатьяДвиженияДенежныхСредствВозврат КАК СтатьяДвиженияДенежныхСредствВозврат,
	|	ПодарочныеСертификаты.СтатьяДоходов	КАК СтатьяДоходов,
	|	ПодарочныеСертификаты.АналитикаДоходов	КАК АналитикаДоходов,
	
	|	ПодарочныеСертификаты.Организация						КАК Организация,
	|	ЕСТЬNULL(СостояниеПодарочныхСертификатов.ОформленВозврат, ЛОЖЬ) КАК ОформленВозврат,
	|	ЕСТЬNULL(СостояниеПодарочныхСертификатов.Аннулирован, ЛОЖЬ) КАК Аннулирован
	|ИЗ
	|	ПодарочныеСертификаты КАК ПодарочныеСертификаты
	|   ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиПодарочныхСертификатов КАК ОстаткиСертификатов
	|	ПО ОстаткиСертификатов.ПодарочныйСертификат = ПодарочныеСертификаты.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ СостояниеПодарочныхСертификатов КАК СостояниеПодарочныхСертификатов
	|	ПО ПодарочныеСертификаты.Ссылка = СостояниеПодарочныхСертификатов.ПодарочныйСертификат
	|	
	|ГДЕ
	|	ПодарочныеСертификаты.УчетПодарочныхСертификатов2_5
	|	И &УсловиеОтбораОрганизация
	|	И &УсловиеОтбораПоТипуОперации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2                                                         КАК Порядок,
	|	ЗНАЧЕНИЕ(Справочник.ПодарочныеСертификаты.ПустаяСсылка)   КАК Ссылка,
	|	Неопределено                                              КАК Наименование,
	|	&МагнитныйКод                                             КАК МагнитныйКод,
	|	&Штрихкод                                                 КАК Штрихкод,
	|	Неопределено                                                       КАК СерийныйНомер,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыПодарочныхСертификатов.НеАктивирован) КАК СтатусИзИсторииПодарочныхСертификатов,
	|	ЛОЖЬ                                                               КАК СтатусАктивации,
	|	0                                                                  КАК Остаток,
	|	
	|	ВидыПодарочныхСертификатов.Ссылка                            КАК ВидПодарочногоСертификата,
	|	ВидыПодарочныхСертификатов.ПериодДействия                    КАК ПериодДействия,
	|	ВидыПодарочныхСертификатов.КоличествоПериодовДействия        КАК КоличествоПериодовДействия,
	|	ВидыПодарочныхСертификатов.Номинал                           КАК Номинал,
	|	ВидыПодарочныхСертификатов.Валюта                            КАК Валюта,
	|	ВидыПодарочныхСертификатов.ТипКарты                          КАК ТипКарты,
	|	ВидыПодарочныхСертификатов.СегментНоменклатуры               КАК СегментНоменклатуры,
	|	ВидыПодарочныхСертификатов.УчетПодарочныхСертификатов2_5     КАК УчетПодарочныхСертификатов2_5,
	|	ВидыПодарочныхСертификатов.ЧастичнаяОплата                   КАК ЧастичнаяОплата,
	|	
	|	&ТекущаяДата КАК ДатаНачалаДействия,
	|	ВЫБОР
	|		КОГДА ВидыПодарочныхСертификатов.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, ВидыПодарочныхСертификатов.КоличествоПериодовДействия)
	|		КОГДА ВидыПодарочныхСертификатов.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&ТекущаяДата, НЕДЕЛЯ, ВидыПодарочныхСертификатов.КоличествоПериодовДействия)
	|		КОГДА ВидыПодарочныхСертификатов.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&ТекущаяДата, МЕСЯЦ, ВидыПодарочныхСертификатов.КоличествоПериодовДействия)
	|		КОГДА ВидыПодарочныхСертификатов.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&ТекущаяДата, КВАРТАЛ, ВидыПодарочныхСертификатов.КоличествоПериодовДействия)
	|		КОГДА ВидыПодарочныхСертификатов.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&ТекущаяДата, ГОД, ВидыПодарочныхСертификатов.КоличествоПериодовДействия)
	|		КОГДА ВидыПодарочныхСертификатов.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕКАДА, ВидыПодарочныхСертификатов.КоличествоПериодовДействия)
	|		КОГДА ВидыПодарочныхСертификатов.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&ТекущаяДата, ПОЛУГОДИЕ, ВидыПодарочныхСертификатов.КоличествоПериодовДействия)
	|		ИНАЧЕ &ТекущаяДата
	|	КОНЕЦ КАК ДатаОкончанияДействия,
	|	ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)	КАК ОбъектРасчетов,
	|	ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)	КАК Партнер,
	|	ВидыПодарочныхСертификатов.СтатьяДвиженияДенежныхСредствПродажа	КАК СтатьяДвиженияДенежныхСредствПродажа,
	|	ВидыПодарочныхСертификатов.СтатьяДвиженияДенежныхСредствВозврат	КАК СтатьяДвиженияДенежныхСредствВозврат,
	|	ВидыПодарочныхСертификатов.СтатьяДоходов	КАК СтатьяДоходов,
	|	ВидыПодарочныхСертификатов.АналитикаДоходов	КАК АналитикаДоходов,
	|	ЕСТЬNULL(Организации.Ссылка, ВидыПодарочныхСертификатов.Организация) КАК Организация,
	|	ЛОЖЬ КАК ОформленВозврат,
	|	ЛОЖЬ КАК Аннулирован
	|ИЗ
	|	ВидыПодарочныхСертификатов КАК ВидыПодарочныхСертификатов
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|	ПО &УсловиеСоединенияПоОрганизацииПоТипуОперации
	|ГДЕ
	|	(НЕ ВидыПодарочныхСертификатов.Ссылка В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					Т.ВидПодарочногоСертификата
	|				ИЗ
	|					ПодарочныеСертификаты КАК Т))
	|	И НЕ ВидыПодарочныхСертификатов.УчетПодарочныхСертификатов2_5
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2                                                         КАК Порядок,
	|	ЗНАЧЕНИЕ(Справочник.ПодарочныеСертификаты.ПустаяСсылка)   КАК Ссылка,
	|	Неопределено                                              КАК Наименование,
	|	&МагнитныйКод                                             КАК МагнитныйКод,
	|	&Штрихкод                                                 КАК Штрихкод,
	|	Неопределено                                                       КАК СерийныйНомер,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыПодарочныхСертификатов.НеАктивирован) КАК СтатусИзИсторииПодарочныхСертификатов,
	|	ЛОЖЬ                                                               КАК СтатусАктивации,
	|	0                                                                  КАК Остаток,
	|	
	|	ВидыПодарочныхСертификатов.Ссылка                            КАК ВидПодарочногоСертификата,
	|	ВидыПодарочныхСертификатов.ПериодДействия                    КАК ПериодДействия,
	|	ВидыПодарочныхСертификатов.КоличествоПериодовДействия        КАК КоличествоПериодовДействия,
	|	ВидыПодарочныхСертификатов.Номинал                           КАК Номинал,
	|	ВидыПодарочныхСертификатов.Валюта                            КАК Валюта,
	|	ВидыПодарочныхСертификатов.ТипКарты                          КАК ТипКарты,
	|	ВидыПодарочныхСертификатов.СегментНоменклатуры               КАК СегментНоменклатуры,
	|	ВидыПодарочныхСертификатов.УчетПодарочныхСертификатов2_5     КАК УчетПодарочныхСертификатов2_5,
	|	ВидыПодарочныхСертификатов.ЧастичнаяОплата                   КАК ЧастичнаяОплата,
	|	
	|	&ТекущаяДата КАК ДатаНачалаДействия,
	|	ВЫБОР
	|		КОГДА ВидыПодарочныхСертификатов.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, ВидыПодарочныхСертификатов.КоличествоПериодовДействия)
	|		КОГДА ВидыПодарочныхСертификатов.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&ТекущаяДата, НЕДЕЛЯ, ВидыПодарочныхСертификатов.КоличествоПериодовДействия)
	|		КОГДА ВидыПодарочныхСертификатов.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&ТекущаяДата, МЕСЯЦ, ВидыПодарочныхСертификатов.КоличествоПериодовДействия)
	|		КОГДА ВидыПодарочныхСертификатов.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&ТекущаяДата, КВАРТАЛ, ВидыПодарочныхСертификатов.КоличествоПериодовДействия)
	|		КОГДА ВидыПодарочныхСертификатов.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&ТекущаяДата, ГОД, ВидыПодарочныхСертификатов.КоличествоПериодовДействия)
	|		КОГДА ВидыПодарочныхСертификатов.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕКАДА, ВидыПодарочныхСертификатов.КоличествоПериодовДействия)
	|		КОГДА ВидыПодарочныхСертификатов.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&ТекущаяДата, ПОЛУГОДИЕ, ВидыПодарочныхСертификатов.КоличествоПериодовДействия)
	|		ИНАЧЕ &ТекущаяДата
	|	КОНЕЦ КАК ДатаОкончанияДействия,
	|	ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)	КАК ОбъектРасчетов,
	|	ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)	КАК Партнер,
	|	ВидыПодарочныхСертификатов.СтатьяДвиженияДенежныхСредствПродажа	КАК СтатьяДвиженияДенежныхСредствПродажа,
	|	ВидыПодарочныхСертификатов.СтатьяДвиженияДенежныхСредствВозврат	КАК СтатьяДвиженияДенежныхСредствВозврат,
	|	ВидыПодарочныхСертификатов.СтатьяДоходов	КАК СтатьяДоходов,
	|	ВидыПодарочныхСертификатов.АналитикаДоходов	КАК АналитикаДоходов,
	|	ВидыПодарочныхСертификатов.Организация КАК Организация,
	|	ЛОЖЬ КАК ОформленВозврат,
	|	ЛОЖЬ КАК Аннулирован
	|ИЗ
	|	ВидыПодарочныхСертификатов КАК ВидыПодарочныхСертификатов
	|ГДЕ
	|	(НЕ ВидыПодарочныхСертификатов.Ссылка В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					Т.ВидПодарочногоСертификата
	|				ИЗ
	|					ПодарочныеСертификаты КАК Т))
	|	И ВидыПодарочныхСертификатов.УчетПодарочныхСертификатов2_5
	|	И &УсловиеОтбораВидаПодарочногоСертификатаПоОрганизации

	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок ВОЗР
	|");
	
	Если ТипКода = Перечисления.ТипыКодовКарт.МагнитныйКод Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&УсловиеНачалоДиапазона", "ШаблоныКодовПодарочныхСертификатов.НачалоДиапазонаМагнитногоКода");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&УсловиеКонецДиапазона",  "ШаблоныКодовПодарочныхСертификатов.КонецДиапазонаМагнитногоКода");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&УсловиеДлинаКода",       "ШаблоныКодовПодарочныхСертификатов.ДлинаМагнитногоКода");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ИмяПоляКодКарты",        "ПодарочныеСертификаты.МагнитныйКод");
		
		Запрос.УстановитьПараметр("Штрихкод",     "");
		Запрос.УстановитьПараметр("МагнитныйКод", КодКарты);
		
	Иначе
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&УсловиеНачалоДиапазона", "ШаблоныКодовПодарочныхСертификатов.НачалоДиапазонаШтрихкода");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&УсловиеКонецДиапазона",  "ШаблоныКодовПодарочныхСертификатов.КонецДиапазонаШтрихкода");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&УсловиеДлинаКода",       "ШаблоныКодовПодарочныхСертификатов.ДлинаШтрихкода");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ИмяПоляКодКарты",        "ПодарочныеСертификаты.Штрихкод");
		
		Запрос.УстановитьПараметр("Штрихкод",     КодКарты);
		Запрос.УстановитьПараметр("МагнитныйКод", "");
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("КодКарты",    КодКарты);
	Запрос.УстановитьПараметр("ДлинаКода",   СтрДлина(КодКарты));
	
	УсловияОтбора = Отборы;
	Если Не ТипЗнч(Отборы) = Тип("Структура") Тогда
		УсловияОтбора = Новый Структура;
	КонецЕсли;
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	Если УсловияОтбора.Свойство("Дата") И ЗначениеЗаполнено(УсловияОтбора.Дата) Тогда
		ТекущаяДатаСеанса = УсловияОтбора.Дата;
	КонецЕсли;
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса);
	
	ТекстЗаменыУсловияОтбораПоТипуОперации = "ИСТИНА";
	Если УсловияОтбора.Свойство("ТипОперации") Тогда
		Если УсловияОтбора.ТипОперации = 1 Тогда
		// Продажа
			ТекстЗаменыУсловияОтбораПоТипуОперации = "НЕ ПодарочныеСертификаты.СтатусАктивации";
		ИначеЕсли УсловияОтбора.ТипОперации = 2 Тогда
		// Возврат
			ТекстЗаменыУсловияОтбораПоТипуОперации = "ПодарочныеСертификаты.СтатусАктивации
			|	И ЕСТЬNULL(СостояниеПодарочныхСертификатов.ОформленВозврат, ЛОЖЬ) = ЛОЖЬ
			|	И ПодарочныеСертификаты.ДатаОкончанияДействия >= &ТекущаяДата 
			|	И ЕСТЬNULL(ОстаткиСертификатов.СуммаОстаток, 0) = ПодарочныеСертификаты.Номинал";
		ИначеЕсли УсловияОтбора.ТипОперации = 3 Тогда
		// Оплата
			ТекстЗаменыУсловияОтбораПоТипуОперации = "ПодарочныеСертификаты.СтатусАктивации 
			|	И ПодарочныеСертификаты.ДатаНачалаДействия <= &ТекущаяДата И ПодарочныеСертификаты.ДатаОкончанияДействия >= &ТекущаяДата 
			|	И (ЕСТЬNULL(ОстаткиСертификатов.СуммаОстаток, 0) > 0 И ПодарочныеСертификаты.ЧастичнаяОплата
			|		ИЛИ ЕСТЬNULL(ОстаткиСертификатов.СуммаОстаток, 0) = ПодарочныеСертификаты.Номинал И НЕ ПодарочныеСертификаты.ЧастичнаяОплата)";
		ИначеЕсли УсловияОтбора.ТипОперации = 4 Тогда
		// Аннулирование
			ТекстЗаменыУсловияОтбораПоТипуОперации = "ПодарочныеСертификаты.СтатусАктивации
			|	И ЕСТЬNULL(ОстаткиСертификатов.СуммаОстаток, 0) > 0
			|	И (ПодарочныеСертификаты.ЧастичнаяОплата = ЛОЖЬ И 
			|			ЕСТЬNULL(ОстаткиСертификатов.СуммаОстаток, 0) <= ПодарочныеСертификаты.Номинал
			|		ИЛИ ПодарочныеСертификаты.ЧастичнаяОплата = ИСТИНА)";
		КонецЕсли;
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&УсловиеОтбораПоТипуОперации", ТекстЗаменыУсловияОтбораПоТипуОперации);
	
	ТекстЗаменыУсловияОтбора = "ИСТИНА";
	ТекстЗаменыУсловияОтбораПоТипуОперации = "ИСТИНА";
	ТекстЗаменыУсловияОтбораВида = "ИСТИНА";
	ТекстЗаменыУсловияСоединенияПоТипуОперации = "ЛОЖЬ";
	Если УсловияОтбора.Свойство("Организация") Тогда
		ТекстЗаменыУсловияОтбора = "ПодарочныеСертификаты.Организация В (&Организация)";
		ТекстЗаменыУсловияОтбораВида = "ВидыПодарочныхСертификатов.Организация В (&Организация)";
		Запрос.УстановитьПараметр("Организация", УсловияОтбора.Организация);
		Если УсловияОтбора.Свойство("ТипОперации") Тогда
			Если УсловияОтбора.ТипОперации > 1 Тогда
				ТекстЗаменыУсловияОтбораПоТипуОперации = "ПодарочныеСертификаты.Организация В (&Организация)";
				ТекстЗаменыУсловияСоединенияПоТипуОперации = "Организации.Ссылка В (&Организация)";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&УсловиеОтбораОрганизацияПоТипуОперации", ТекстЗаменыУсловияОтбораПоТипуОперации);
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&УсловиеОтбораОрганизация", ТекстЗаменыУсловияОтбора);
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&УсловиеСоединенияПоОрганизацииПоТипуОперации", ТекстЗаменыУсловияСоединенияПоТипуОперации);
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&УсловиеОтбораВидаПодарочногоСертификатаПоОрганизации", ТекстЗаменыУсловияОтбораВида);
	
	ТекстЗаменыУсловияОтбора = "ИСТИНА";
	Если УсловияОтбора.Свойство("Валюта") Тогда
		ТекстЗаменыУсловияОтбора = "ШаблоныКодовПодарочныхСертификатов.Ссылка.Валюта В (&Валюта)";
		Запрос.УстановитьПараметр("Валюта", УсловияОтбора.Валюта);
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&УсловиеОтбораВалюта", ТекстЗаменыУсловияОтбора);
	
	ТекстЗаменыУсловияОтбора = "ИСТИНА";
	Если УсловияОтбора.Свойство("УчетПодарочныхСертификатов2_5") Тогда
		ТекстЗаменыУсловияОтбора = "ШаблоныКодовПодарочныхСертификатов.Ссылка.УчетПодарочныхСертификатов2_5 = &УчетПодарочныхСертификатов2_5";
		Запрос.УстановитьПараметр("УчетПодарочныхСертификатов2_5", УсловияОтбора.УчетПодарочныхСертификатов2_5);
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&УсловиеОтбораУчетПодарочныхСертификатов2_5", ТекстЗаменыУсловияОтбора);
	
	ТекстЗаменыУсловияОтбора = "ИСТИНА";
	Если УсловияОтбора.Свойство("Статус") Тогда
		ТекстЗаменыУсловияОтбора = "ПодарочныеСертификаты.СтатусИзИсторииПодарочныхСертификатов В (&Статус)";
		Запрос.УстановитьПараметр("Статус", УсловияОтбора.Статус);
		Если УсловияОтбора.Свойство("ТипОперации") Тогда
			Если УсловияОтбора.ТипОперации = 3 Тогда
			// Оплата
				ТекстЗаменыУсловияОтбора = ТекстЗаменыУсловияОтбора + " И ЕСТЬNULL(ОстаткиСертификатов.СуммаОстаток, 0) > 0";
			ИначеЕсли УсловияОтбора.ТипОперации = 4 Тогда
			// Аннулирование
				// Нельзя аннулировать многоразовый подарочный сертификат, если он частично погашен и у него остаток равен нулю.
				// Документ Чек ККМ при вычислении статуса не учитывает остаток по подарочному сертификату.
				ТекстЗаменыУсловияОтбора = ТекстЗаменыУсловияОтбора + "
					|И НЕ (ПодарочныеСертификаты.ЧастичнаяОплата = ИСТИНА 
					|		И ПодарочныеСертификаты.СтатусИзИсторииПодарочныхСертификатов = ЗНАЧЕНИЕ(Перечисление.СтатусыПодарочныхСертификатов.ЧастичноПогашен) 
					|		И ЕСТЬNULL(ОстаткиСертификатов.СуммаОстаток, 0) = 0)";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&УсловиеОтбораСтатусИзИсторииПодарочныхСертификатов", ТекстЗаменыУсловияОтбора);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ПодарочныеСертификатыВызовСервера.ИнициализироватьОписаниеПодарочногоСертификата();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
			ЗарегистрированныеПодарочныеСертификаты.Добавить(НоваяСтрока);
		Иначе
			НеЗарегистрированныеПодарочныеСертификаты.Добавить(НоваяСтрока);
		КонецЕсли;
	
	КонецЦикла;
	
	ВозвращаемоеЗначение = Новый Структура("ЗарегистрированныеПодарочныеСертификаты, НеЗарегистрированныеПодарочныеСертификаты");
	ВозвращаемоеЗначение.ЗарегистрированныеПодарочныеСертификаты   = ЗарегистрированныеПодарочныеСертификаты;
	ВозвращаемоеЗначение.НеЗарегистрированныеПодарочныеСертификаты = НеЗарегистрированныеПодарочныеСертификаты;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область ОтражениеДвиженийВРегистрах

// Процедура формирования движений по регистру "ДвиженияДенежныеСредстваКонтрагент"
// для документов "РеализацияПодарочныхСертификатов" и "ВозвратПодарочныхСертификатов".
// Определяет какие сертификаты оплачены картой
// (распределяет сумму оплаты по карте по стоимостям сертификатов в порядке следования серификатов).
//
// Параметры:
//  ОплатаПодарочныеСертификаты - ТаблицаЗначений
//  ОплатаПлатежныеКарты - ТаблицаЗначений
//  
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица, содержащая таблицы движений.
// 
Функция ПодготовитьТаблицуДвиженияДенежныеСредстваКонтрагент(ОплатаПодарочныеСертификаты, ОплатаПлатежныеКарты) Экспорт
	
	ТаблицаДвижений = РегистрыНакопления.ДвиженияДенежныеСредстваКонтрагент.СоздатьНаборЗаписей().ВыгрузитьКолонки();
		
	ВсеОплатыПлатежнымиКартамиРаспределены = Ложь;
	Для Каждого Сертификат Из ОплатаПодарочныеСертификаты Цикл
		
		Если Не ВсеОплатыПлатежнымиКартамиРаспределены Тогда
			СтруктураПоиска = Новый Структура("ОплатаОбработана", Ложь);
			НеОбработанныеОплатыПлатежнымиКартами = ОплатаПлатежныеКарты.НайтиСтроки(СтруктураПоиска);
			ВсеОплатыПлатежнымиКартамиРаспределены = (НеОбработанныеОплатыПлатежнымиКартами.Количество() = 0);
			Для Каждого СтрокаОплаты Из НеОбработанныеОплатыПлатежнымиКартами Цикл
				
				Сумма =     ВзаиморасчетыСервер.СписатьСумму(СтрокаОплаты.СуммаОплатыВВалютеПлатежа, Сертификат.СуммаОплатыВВалютеПлатежа);
				СуммаУпр =  ВзаиморасчетыСервер.СписатьСумму(СтрокаОплаты.СуммаОплаты,               Сертификат.СуммаОплаты);
				СуммаРегл = ВзаиморасчетыСервер.СписатьСумму(СтрокаОплаты.СуммаОплатыРегл,           Сертификат.СуммаОплатыРегл);
				
				// Часть стоимости оплатим картой
				Если Сумма > 0 Тогда
					
					НовоеДвижение = ТаблицаДвижений.Добавить();
					ЗаполнитьЗначенияСвойств(НовоеДвижение, СтрокаОплаты);
					НовоеДвижение.ОбъектРасчетов = Сертификат.ОбъектРасчетов;
					
					НовоеДвижение.СуммаОплаты = СуммаУпр;
					НовоеДвижение.СуммаОплатыРегл = СуммаРегл;
					НовоеДвижение.СуммаОплатыВВалютеПлатежа = Сумма;
					НовоеДвижение.СуммаОплатыВВалютеВзаиморасчетов = Сумма;
					
					НовоеДвижение.СуммаПредоплаты = СуммаУпр;
					НовоеДвижение.СуммаПредоплатыРегл = СуммаРегл;
					НовоеДвижение.СуммаПредоплатыВВалютеПлатежа = Сумма;
					НовоеДвижение.СуммаПредоплатыВВалютеВзаиморасчетов = Сумма;
					
				КонецЕсли;	
				
				СтрокаОплаты.ОплатаОбработана = (СтрокаОплаты.СуммаОплатыВВалютеПлатежа = 0);
				
				Если Сертификат.СуммаОплатыВВалютеПлатежа = 0 Тогда
					// Полностью покрыли стоимость сертификата, переходим к другому
					Прервать;
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;	
			
		// Оставшуюся стоимость сертификата закроем наличными
		Если Сертификат.СуммаОплатыВВалютеПлатежа > 0 Тогда
			
			НовоеДвижение = ТаблицаДвижений.Добавить();
			ЗаполнитьЗначенияСвойств(НовоеДвижение, Сертификат);
			
			НовоеДвижение.СуммаОплатыВВалютеВзаиморасчетов = НовоеДвижение.СуммаОплатыВВалютеПлатежа;
			
			НовоеДвижение.СуммаПредоплаты = НовоеДвижение.СуммаОплаты;
			НовоеДвижение.СуммаПредоплатыРегл = НовоеДвижение.СуммаОплатыРегл;
			НовоеДвижение.СуммаПредоплатыВВалютеПлатежа = НовоеДвижение.СуммаОплатыВВалютеПлатежа;
			НовоеДвижение.СуммаПредоплатыВВалютеВзаиморасчетов = НовоеДвижение.СуммаОплатыВВалютеВзаиморасчетов;
			
		КонецЕсли;
		
	КонецЦикла;	
		
	Возврат ТаблицаДвижений;
	
КонецФункции

#КонецОбласти

//Проверяет, что переданный тип ссылки входит в состав разрешенных типов для зачета оплат подарочными сертификатами.
//
// Параметры:
//  ТипСсылки - Тип - Тип ссылки для проверки.
//
// Возвращаемое значение:
//  Булево - 
//
Функция ТипРазрешенДляЗачетаОплатыПодарочнымиСертификатами(ТипСсылки) Экспорт
	
	РазрешенныеТипы = Новый Массив;
	РазрешенныеТипы.Добавить(Тип("СправочникСсылка.ДоговорыКонтрагентов"));
	РазрешенныеТипы.Добавить(Тип("ДокументСсылка.АктВыполненныхРабот"));
	РазрешенныеТипы.Добавить(Тип("ДокументСсылка.ВыкупВозвратнойТарыКлиентом"));
	РазрешенныеТипы.Добавить(Тип("ДокументСсылка.ВыкупТоваровХранителем"));
	РазрешенныеТипы.Добавить(Тип("ДокументСсылка.ЗаказКлиента"));
	РазрешенныеТипы.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
	РазрешенныеТипы.Добавить(Тип("ДокументСсылка.РеализацияУслугПрочихАктивов"));
	
	ПодарочныеСертификатыЛокализация.ДополнитьРазрешенныеТипыДляЗачетаОплатыПодарочнымиСертификатами(РазрешенныеТипы);
	
	Результат = Не (РазрешенныеТипы.Найти(ТипСсылки) = Неопределено);
	Возврат Результат;
	
КонецФункции

//Возвращает таблицу значений с данными документа для анализа возможности оплаты подарочными сертификатами.
//
// Параметры:
//  Ссылка - ДокументСсылка, СправочникСсылка - 
//
// Возвращаемое значение:
//  ТаблицаЗначений -Таблица значений с данными документа для анализа:
//   * Номенклатура - СправочникСсылка.Номенклатура -
//   * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры -
//   * Сумма - Число - 
//  ,Неопределено
Функция ТоварыДляАнализаВозможностиОплатыПодарочнымиСертификатами(Ссылка) Экспорт
	
	ТоварыДляАнализа = Неопределено;
	
	ТипСсылкиОбъекта = ТипЗнч(Ссылка);
	МассивСсылок = Новый Массив();
	Если ТипСсылкиОбъекта = Тип("ДокументСсылка.ВзаимозачетЗадолженности") Тогда
		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДебиторскаяЗадолженность.ОбъектРасчетов.Объект КАК Ссылка
		|ИЗ
		|	Документ.ВзаимозачетЗадолженности.ДебиторскаяЗадолженность КАК ДебиторскаяЗадолженность
		|ГДЕ
		|	ДебиторскаяЗадолженность.Ссылка = &Ссылка";
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		ОбъектыДебиторскойЗадолженности = Запрос.Выполнить().Выгрузить();
		Если ОбъектыДебиторскойЗадолженности.Количество() Тогда
			МассивСсылок = ОбъектыДебиторскойЗадолженности.ВыгрузитьКолонку("Ссылка");
		КонецЕсли;
	Иначе
		МассивСсылок.Добавить(Ссылка)
	КонецЕсли;
	
	Если МассивСсылок.Количество() Тогда
		Запрос = Новый Запрос;
		
		ТекстШаблонаЗапроса = "ВЫБРАТЬ
		|	ТоварыДляАнализа.Номенклатура КАК Номенклатура,
		|	ТоварыДляАнализа.Характеристика КАК Характеристика,
		|	СУММА(ТоварыДляАнализа.Сумма) КАК Сумма
		|ИЗ
		|	&ЗапросТабличныхЧастей КАК ТоварыДляАнализа
		|СГРУППИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика";
		
		ТекстШаблонаЗапросаТабличнойЧастиЧекККМ = "
		|ВЫБРАТЬ
		|		ТабличнаяЧасть.Номенклатура КАК Номенклатура,
		|		ТабличнаяЧасть.Характеристика КАК Характеристика,
		|		ТабличнаяЧасть.Сумма КАК Сумма
		|	ИЗ
		|		&ТабличнаяЧасть КАК ТабличнаяЧасть
		|	ГДЕ
		|		ТабличнаяЧасть.Ссылка В (&МассивСсылок)
		|		И ТабличнаяЧасть.Ссылка.Проведен
		|";
		
		ТекстШаблонаЗапросаТабличнойЧастиУниверсальный = "
		|ВЫБРАТЬ
		|		ТабличнаяЧасть.Номенклатура КАК Номенклатура,
		|		ТабличнаяЧасть.Характеристика КАК Характеристика,
		|		ТабличнаяЧасть.СуммаСНДС КАК Сумма
		|	ИЗ
		|		&ТабличнаяЧасть КАК ТабличнаяЧасть
		|	ГДЕ
		|		ТабличнаяЧасть.Ссылка В (&МассивСсылок)
		|		И ТабличнаяЧасть.Ссылка.Проведен
		|";
		
		ТекстШаблонаЗапросаТабличнойЧастиВозвратТоваровОтКлиента = "
		|ВЫБРАТЬ
		|		ТабличнаяЧасть.Номенклатура КАК Номенклатура,
		|		ТабличнаяЧасть.Характеристика КАК Характеристика,
		|		-ТабличнаяЧасть.СуммаСНДС КАК Сумма
		|	ИЗ
		|		Документ.ВозвратТоваровОтКлиента.Товары КАК ТабличнаяЧасть
		|	ГДЕ
		|		ТабличнаяЧасть.Ссылка.ДокументРеализации В (&МассивСсылок)
		|		И ТабличнаяЧасть.Ссылка.Проведен
		|";
		
		ТекстШаблонаЗапросаТабличнойЧастиКорректировкаРелизации = "
		|ВЫБРАТЬ
		|		ТабличнаяЧасть.Номенклатура КАК Номенклатура,
		|		ТабличнаяЧасть.Характеристика КАК Характеристика,
		|		ТабличнаяЧасть.СуммаСНДС КАК Сумма
		|	ИЗ
		|		Документ.КорректировкаРеализации.Расхождения КАК ТабличнаяЧасть
		|	ГДЕ
		|		ТабличнаяЧасть.Ссылка.ДокументОснование В (&МассивСсылок)
		|		И ТабличнаяЧасть.Ссылка.Проведен
		|";

		ТекстШаблонаЗапросаТабличнойЧасти = ТекстШаблонаЗапросаТабличнойЧастиУниверсальный;
		
		СсылкиПоТипам = Новый Соответствие;
		Для Каждого Ссылка Из МассивСсылок Цикл
			Если Не ЗначениеЗаполнено(Ссылка) Тогда
				Продолжить;
			КонецЕсли;
			Тип = ТипЗнч(Ссылка);
			Если СсылкиПоТипам[Тип] = Неопределено Тогда
				СсылкиПоТипам[Тип] = Новый Массив;
			КонецЕсли;
			ЭлементПоТипу = СсылкиПоТипам[Тип]; // Массив
			ЭлементПоТипу.Добавить(Ссылка);
		КонецЦикла;
		
		МассивТекстовЗапросов = Новый Массив;
		Для Каждого КлючЗначение Из СсылкиПоТипам Цикл
			// Всегда есть хотя бы один элемент массива.
			МетаданныеСсылки = КлючЗначение.Значение[0].Метаданные(); // ОбъектМетаданных
			ИмяПараметраЗапроса = "МассивСсылок"+ МетаданныеСсылки.Имя;
			МетаданныеТабличнаяЧасть = Неопределено;
			УчестьКорректировкуРеализации = Ложь;
			УчестьВозвратТоваровОтКлиента = Ложь;
			
			ТекстЗапросаТабличнойЧасти = "";
			Если КлючЗначение.Ключ = Тип("ДокументСсылка.ЧекККМ") Тогда
				
				ТекстШаблонаЗапросаТабличнойЧасти = ТекстШаблонаЗапросаТабличнойЧастиЧекККМ;
				Запрос.УстановитьПараметр(ИмяПараметраЗапроса, КлючЗначение.Значение);
				МетаданныеТабличнаяЧасть = МетаданныеСсылки.ТабличныеЧасти.Товары; // ОбъектМетаданныхТабличнаяЧасть
			
			ИначеЕсли КлючЗначение.Ключ = Тип("ДокументСсылка.ВыкупВозвратнойТарыКлиентом")
				Или КлючЗначение.Ключ = Тип("ДокументСсылка.ВыкупТоваровХранителем")
				Или КлючЗначение.Ключ = Тип("ДокументСсылка.ЗаказКлиента")
				Или КлючЗначение.Ключ = Тип("ДокументСсылка.РеализацияТоваровУслуг") 
				Или КлючЗначение.Ключ = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
				
				Запрос.УстановитьПараметр(ИмяПараметраЗапроса, КлючЗначение.Значение);
				Если КлючЗначение.Ключ = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
					МетаданныеТабличнаяЧасть = МетаданныеСсылки.ТабличныеЧасти.Услуги; // ОбъектМетаданныхТабличнаяЧасть
				Иначе
					МетаданныеТабличнаяЧасть = МетаданныеСсылки.ТабличныеЧасти.Товары; // ОбъектМетаданныхТабличнаяЧасть
				КонецЕсли;
				
				Если КлючЗначение.Ключ = Тип("ДокументСсылка.РеализацияТоваровУслуг") 
					Или КлючЗначение.Ключ = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
					УчестьКорректировкуРеализации = Истина;
					Если КлючЗначение.Ключ = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
						УчестьВозвратТоваровОтКлиента = Истина;
					КонецЕсли;
				КонецЕсли;

			КонецЕсли;
			
			Если Запрос.Параметры.Свойство(ИмяПараметраЗапроса) Тогда
				ТекстЗапросаТабличнойЧасти = СтрЗаменить(ТекстШаблонаЗапросаТабличнойЧасти,"&ТабличнаяЧасть", МетаданныеСсылки.ПолноеИмя()+"."+МетаданныеТабличнаяЧасть.Имя);
				ТекстЗапросаТабличнойЧасти = СтрЗаменить(ТекстЗапросаТабличнойЧасти,"МассивСсылок", ИмяПараметраЗапроса);
				МассивТекстовЗапросов.Добавить(ТекстЗапросаТабличнойЧасти);
				Если УчестьКорректировкуРеализации = Истина Тогда
					МассивТекстовЗапросов.Добавить(СтрЗаменить(ТекстШаблонаЗапросаТабличнойЧастиКорректировкаРелизации,"МассивСсылок", ИмяПараметраЗапроса));
				КонецЕсли;
				Если УчестьВозвратТоваровОтКлиента = Истина Тогда
					МассивТекстовЗапросов.Добавить(СтрЗаменить(ТекстШаблонаЗапросаТабличнойЧастиВозвратТоваровОтКлиента,"МассивСсылок", ИмяПараметраЗапроса));
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если МассивТекстовЗапросов.Количество() Тогда
			ТекстЗапросаТабличныхЧастей = СтрСоединить(МассивТекстовЗапросов, "ОБЪЕДИНИТЬ ВСЕ");
			Запрос.Текст = СтрЗаменить(ТекстШаблонаЗапроса, "&ЗапросТабличныхЧастей", "("+ТекстЗапросаТабличныхЧастей+")");
			РезультатЗапроса = Запрос.Выполнить();
			Если Не РезультатЗапроса.Пустой() Тогда
				ТоварыДляАнализа = РезультатЗапроса.Выгрузить();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТоварыДляАнализа;
КонецФункции

// Запускает автоматическое начисление и списание баллов и контролирует результат.
Процедура АннулированиеПодарочныхСертификатовРегламентноеЗадание() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.АннулированиеПодарочныхСертификатов);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПодарочныеСертификаты") Тогда
		Возврат;
	КонецЕсли;

	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Организации");
	Организация = ОграничениеТипа.ПривестиЗначение(Неопределено);
	
	ПараметрыЖурнала = Новый Структура("ГруппаСобытий, Метаданные, Данные");
	ПараметрыЖурнала.ГруппаСобытий = НСтр("ru = 'Автоматическое аннулирование подарочных сертификатов. Запуск по расписанию'");
	ПараметрыЖурнала.Метаданные    = Организация.Метаданные();
	ПараметрыЖурнала.Данные        = Организация;
	
	СегментыСервер.ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Примечание, "", НСтр("ru = 'Запуск'"));
	
	Документы.АннулированиеПодарочныхСертификатов.АннулированиеПросроченныхПодарочныхСертификатов(Организация);
	СегментыСервер.ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Примечание, "",НСтр("ru = 'Завершение'"));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиЭтаповЗакрытияМесяца

#Область АннулированиеСертификатов

// Добавляет этап в таблицу этапов закрытия месяца.
// Элементы данной таблицы являются элементами второго уровня в дереве этапов в форме закрытия месяца.
// 
// Параметры:
// 	ТаблицаЭтапов - см. Обработки.ОперацииЗакрытияМесяца.ИнициализироватьТаблицуОписанияЭтапов
// 	ТекущийРодитель - Строка - идентификатор группы.
Процедура ДобавитьЭтап_АннулированиеПодарочныхСертификатов(ТаблицаЭтапов,ТекущийРодитель) Экспорт
	
	НоваяСтрока = ЗакрытиеМесяцаСервер.ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.АннулированиеПодарочныхСертификатов,,,,
		Перечисления.ОперацииЗакрытияМесяца.ОтражениеЗарплатыВФинансовомУчете);
	НоваяСтрока.ТекстВыполнить = НСтр("ru='Аннулировать'");
	НоваяСтрока.ДействиеИспользование = ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"ПодарочныеСертификатыСервер.Использование_АннулированиеПодарочныхСертификатов");
	НоваяСтрока.ДействиеВыполнить  = ЗакрытиеМесяцаСервер.ОписаниеДействия_ВыполнитьРасчет(
		"ПодарочныеСертификатыСервер.Выполнить_АннулированиеПодарочныхСертификатов");
	НоваяСтрока.ДействиеПодробнее = ЗакрытиеМесяцаСервер.ОписаниеДействия_ОткрытьФорму(
		Метаданные.Документы.АннулированиеПодарочныхСертификатов.Формы.ФормаСписка.ПолноеИмя());
		
КонецПроцедуры

// Обработчики этапа.

Процедура Использование_АннулированиеПодарочныхСертификатов(ПараметрыОбработчика) Экспорт
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПодарочныеСертификаты") Тогда
		ЗакрытиеМесяцаСервер.УстановитьСостояниеОтключено(
			ПараметрыОбработчика,
			НСтр("ru='Подарочные сертификаты не используются.'", ОбщегоНазначения.КодОсновногоЯзыка()));
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ЗакрытиеМесяцаСервер.ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Документы.АннулированиеПодарочныхСертификатов.ПросроченныеПодарочныеСертификатыНаДату(
		ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций,
		ПараметрыОбработчика.ПараметрыРасчета.ДатаОкончанияПериода + 1,
		,
		"СертификатыКАннулированию",
		ПараметрыОбработчика.МенеджерВременныхТаблиц);
	
	Запрос.Текст = "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Аннулирование.Организация КАК Организация
	|ПОМЕСТИТЬ АннулированныеСертификаты
	|ИЗ
	|	Документ.АннулированиеПодарочныхСертификатов КАК Аннулирование
	|ГДЕ
	|	Аннулирование.Организация В(&МассивОрганизаций)
	|	И Аннулирование.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Аннулирование.Проведен";
	
	Запрос.Выполнить();
	
	РазмерыВременныхТаблиц = ЗакрытиеМесяцаСервер.РазмерыВременныхТаблиц(Запрос, ПараметрыОбработчика);
	
	Если РазмерыВременныхТаблиц.СертификатыКАннулированию > 0 Тогда
			
		ЗакрытиеМесяцаСервер.ЗафиксироватьРезультатыОбработчикаИспользованияПоОрганизациям(
			ПараметрыОбработчика,
			НСтр("ru='По организации ""%1"" за период %2 есть сертификаты, которые необходимо аннулировать.'", ОбщегоНазначения.КодОсновногоЯзыка()),
			Запрос,
			"СертификатыКАннулированию",
			Ложь,
			Истина);
		
	ИначеЕсли РазмерыВременныхТаблиц.АннулированныеСертификаты = 0 Тогда
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru='Нет сертификатов, которые необходимо аннулировать.'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Выполнить_АннулированиеПодарочныхСертификатов(ПараметрыОбработчика) Экспорт
	
	Документы.АннулированиеПодарочныхСертификатов.АннулироватьПодарочныеСертификатыПриЗакрытииМесяца(
		ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций,
		ПараметрыОбработчика.ПараметрыРасчета.ДатаОкончанияПериода);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроверкаЗаполнения

// Процедура проверяет заполнение подарочных сертификатов табличной части "РасшифровкаПлатежа".
//
// Параметры:
//  Объект - ДокументОбъект - Текущий документ.
//  ИмяТабличнойЧасти - Строка - 
//  Отказ - Булево - Признак отказа от проведения документа.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиРасшифровкаПлатежа(Объект, Отказ)
	
	ТипСсылкиОбъекта = ТипЗнч(Объект.Ссылка);
	ИмяТабличнойЧасти = "";
	ПроверятьРавенствоСуммыИНоминала = Истина;
	ОбъектРасчетовЭтоОбъект = Ложь;
	Если ТипСсылкиОбъекта = Тип("ДокументСсылка.ВзаимозачетЗадолженности") Тогда
		ИмяТабличнойЧасти = Объект.Ссылка.Метаданные().ТабличныеЧасти.КредиторскаяЗадолженность.Имя;
		ПроверятьРавенствоСуммыИНоминала = Ложь;
	ИначеЕсли ТипСсылкиОбъекта = Тип("ДокументСсылка.ВводОстатковВзаиморасчетов") Тогда
		ИмяТабличнойЧасти = Объект.Ссылка.Метаданные().ТабличныеЧасти.РасчетыСПартнерами.Имя;
		ПроверятьРавенствоСуммыИНоминала = Ложь;
		ОбъектРасчетовЭтоОбъект = Истина;
	ИначеЕсли ТипСсылкиОбъекта = Тип("ДокументСсылка.ПриходныйКассовыйОрдер")
			Или ТипСсылкиОбъекта = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств")
			Или ТипСсылкиОбъекта = Тип("ДокументСсылка.ОперацияПоПлатежнойКарте")
			Или ТипСсылкиОбъекта = Тип("ДокументСсылка.РасходныйКассовыйОрдер")
			Или ТипСсылкиОбъекта = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств")
			Или ТипСсылкиОбъекта = Тип("ДокументСсылка.ОперацияПоПлатежнойКарте")
			Или ТипСсылкиОбъекта = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
		ИмяТабличнойЧасти = Объект.Ссылка.Метаданные().ТабличныеЧасти.РасшифровкаПлатежа.Имя;
	Иначе
		Возврат;
	КонецЕсли;
	
	СинонимИмениТабличнойЧасти = Объект.Ссылка.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Синоним;
	ТабличнаяЧасть = Объект[ИмяТабличнойЧасти];
	
	Если ТабличнаяЧасть.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТипОперацииПоПодарочнымСертификатам = ПодарочныеСертификатыКлиентСервер.ТипОперацииПоПодарочнымСертификатам(Объект);
	ТекущаяДата = ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Дата, ТекущаяДатаСеанса());
	
	ОбъектыРасчетовПоПодарочнымСертификатам = Новый Соответствие;
	ПодарочныеСертификатыПоОбъектамРасчетов = Новый Соответствие;
	ПодарочныеСертификаты = Новый Массив;
	Если ОбъектРасчетовЭтоОбъект Тогда
		Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
			Если ТипЗнч(СтрокаТабличнойЧасти.ОбъектРасчетов) = Тип("СправочникСсылка.ПодарочныеСертификаты") Тогда
				ПодарочныеСертификаты.Добавить(СтрокаТабличнойЧасти.ОбъектРасчетов);
			КонецЕсли;
		КонецЦикла;
		ОбъектыРасчетовПоПодарочнымСертификатам = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ПодарочныеСертификаты, "ОбъектРасчетов");
		Для Каждого КлючЗначение Из ОбъектыРасчетовПоПодарочнымСертификатам Цикл
			Если ЗначениеЗаполнено(КлючЗначение.Ключ) И ЗначениеЗаполнено(КлючЗначение.Значение) Тогда
				ПодарочныеСертификатыПоОбъектамРасчетов.Вставить(КлючЗначение.Значение, КлючЗначение.Ключ);
			КонецЕсли;
		КонецЦикла;		
	Иначе
		ПодарочныеСертификатыПоОбъектамРасчетов = Справочники.ПодарочныеСертификаты.ПодарочныеСертификатыПоОбъектамРасчетов(ТабличнаяЧасть.ВыгрузитьКолонку("ОбъектРасчетов"));
	КонецЕсли;
	
	Если ПодарочныеСертификатыПоОбъектамРасчетов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПодарочныеСертификаты = ОбщегоНазначения.ВыгрузитьКолонку(ПодарочныеСертификатыПоОбъектамРасчетов, "Значение", Истина);
	ДанныеПодарочныхСертификатов = ПодарочныеСертификатыВызовСервера.ПолучитьДанныеПодарочныхСертификатов(ПодарочныеСертификаты, ТекущаяДата, Объект.Ссылка);
	НомераСтрокОбъектовРасчетов = Новый Соответствие;
	Для Каждого СтрокаРасшифровки Из ТабличнаяЧасть Цикл
		
		ПодарочныйСертификат = Неопределено;
		Если ОбъектРасчетовЭтоОбъект Тогда
			Если Не ОбъектыРасчетовПоПодарочнымСертификатам[СтрокаРасшифровки.ОбъектРасчетов] = Неопределено Тогда
				ПодарочныйСертификат = СтрокаРасшифровки.ОбъектРасчетов;
			КонецЕсли;
		Иначе
			ПодарочныйСертификат = ПодарочныеСертификатыПоОбъектамРасчетов.Получить(СтрокаРасшифровки.ОбъектРасчетов);
		КонецЕсли;
		Если ЗначениеЗаполнено(ПодарочныйСертификат) Тогда
			ДанныеПодарочногоСертификата = ДанныеПодарочныхСертификатов[ПодарочныйСертификат];
			
			ТекстОшибки = "";
			НомерСтрокиОбъектаРасчетов = НомераСтрокОбъектовРасчетов[СтрокаРасшифровки.ОбъектРасчетов];
			Если НомерСтрокиОбъектаРасчетов = Неопределено Тогда
				СтрокаТаблЧасти  = СтрокаРасшифровки; // СтрокаТабличнойЧасти
				НомераСтрокОбъектовРасчетов.Вставить(СтрокаРасшифровки.ОбъектРасчетов, СтрокаТаблЧасти.НомерСтроки);
			Иначе
				ТекстОшибки = НСтр("ru='Объект расчетов %Сертификат% В строке %НомерСтроки% списка ""%ТабличнаяЧасть%"" дублируется в других строках.'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Сертификат%",  ПодарочныйСертификат);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", НомерСтрокиОбъектаРасчетов);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ТабличнаяЧасть%", СинонимИмениТабличнойЧасти);
				ОбщегоНазначения.СообщитьПользователю(
					ТекстОшибки,
					Объект,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТабличнойЧасти, НомерСтрокиОбъектаРасчетов, "ОбъектРасчетов"),
					,
					Отказ);
			КонецЕсли;
			
			ТекстОшибки = "";
			Если ТипОперацииПоПодарочнымСертификатам = 1 Тогда
			// Продажа
				Если ДанныеПодарочногоСертификата.СтатусАктивации Тогда
					ТекстОшибки = НСтр("ru='Подарочный сертификат %Сертификат% в строке %НомерСтроки% списка ""%ТабличнаяЧасть%"" уже активирован и недоступен для продажи'");
				КонецЕсли;
			ИначеЕсли ТипОперацииПоПодарочнымСертификатам = 2 Тогда
			// Возврат
				Если Не ДанныеПодарочногоСертификата.СтатусАктивации Тогда
					ТекстОшибки = НСтр("ru='Подарочный сертификат %Сертификат% в строке %НомерСтроки% списка ""%ТабличнаяЧасть%"" не активирован и недоступен для возврата.'");
				ИначеЕсли ДанныеПодарочногоСертификата.ДатаОкончанияДействия < Объект.Дата Тогда
					ТекстОшибки = НСтр("ru='Подарочный сертификат %Сертификат% в строке %НомерСтроки% списка ""%ТабличнаяЧасть%"" просрочен и недоступен для возврата.'");
				КонецЕсли;
			ИначеЕсли ТипОперацииПоПодарочнымСертификатам = 3 Тогда
			// Оплата
				Если Не ДанныеПодарочногоСертификата.СтатусАктивации Тогда
					ТекстОшибки = НСтр("ru='Подарочный сертификат %Сертификат% в строке %НомерСтроки% списка ""%ТабличнаяЧасть%"" не активирован и недоступен для оплаты.'");
				ИначеЕсли Не(ДанныеПодарочногоСертификата.ДатаНачалаДействия <= Объект.Дата И ДанныеПодарочногоСертификата.ДатаОкончанияДействия >= Объект.Дата) Тогда
					ТекстОшибки = НСтр("ru='Подарочный сертификат %Сертификат% в строке %НомерСтроки% списка ""%ТабличнаяЧасть%"" просрочен и недоступен для оплаты.'");
				КонецЕсли;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
				Если СтрокаРасшифровки.Сумма > ДанныеПодарочногоСертификата.Номинал Тогда
					ТекстОшибки = НСтр("ru='Для подарочного сертификата %Сертификат% в строке %НомерСтроки% списка ""%ТабличнаяЧасть%"" указана сумма больше номинала.'");
				ИначеЕсли ПроверятьРавенствоСуммыИНоминала = Истина И СтрокаРасшифровки.Сумма <> ДанныеПодарочногоСертификата.Номинал Тогда
					ТекстОшибки = НСтр("ru='Для подарочного сертификата %Сертификат% в строке %НомерСтроки% списка ""%ТабличнаяЧасть%"" сумма не равна номиналу подарочного сертификата.'");
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекстОшибки) Тогда
				
				СтрокаТаблЧасти  = СтрокаРасшифровки; // СтрокаТабличнойЧасти
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Сертификат%",  ПодарочныйСертификат);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", СтрокаТаблЧасти.НомерСтроки);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ТабличнаяЧасть%", СинонимИмениТабличнойЧасти);
				
				ОбщегоНазначения.СообщитьПользователю(
					ТекстОшибки,
					Объект,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТабличнойЧасти, СтрокаТаблЧасти.НомерСтроки, "ОбъектРасчетов"),
					,
					Отказ);
			КонецЕсли;
			
		Иначе
			СтрокаТаблЧасти  = СтрокаРасшифровки; // СтрокаТабличнойЧасти
			ТекстОшибки = НСтр("ru = 'В документе расчета по подарочному сертификату не должно быть иных объектов расчетов'");
			ОбщегоНазначения.СообщитьПользователю(
					ТекстОшибки,
					Объект,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТабличнойЧасти, СтрокаТаблЧасти.НомерСтроки, "ОбъектРасчетов"),
					,
					Отказ);
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура проверяет заполнение подарочных сертификатов табличной части "ПодарочныеСертификаты".
//
// Параметры:
//  Объект - ДокументОбъект - Текущий документ.
//  Отказ - Булево - Признак отказа от проведения документа.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПодарочныеСертификаты(Объект, Отказ)
	
	Если Объект.ПодарочныеСертификаты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяТабличнойЧасти = Объект.Ссылка.Метаданные().ТабличныеЧасти.ПодарочныеСертификаты.Имя;
	СинонимИмениТабличнойЧасти = Объект.Ссылка.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Синоним;
	ТабличнаяЧасть = Объект[ИмяТабличнойЧасти];
	
	ТипОперацииПоПодарочнымСертификатам = ПодарочныеСертификатыКлиентСервер.ТипОперацииПоПодарочнымСертификатам(Объект);
	ДопустимыеСтатусыИзИсторииПодарочныхСертификатов = ПодарочныеСертификатыКлиентСервер.ДопустимыеСтатусыПодарочныхСертификатов(Объект);
	
	ТекущаяДата = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса());
	ДанныеПодарочныхСертификатов = ПодарочныеСертификатыВызовСервера.ПолучитьДанныеПодарочныхСертификатов(ТабличнаяЧасть.ВыгрузитьКолонку("ПодарочныйСертификат"), ТекущаяДата, Объект.Ссылка);
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ВводОстатков") 
		Или ТипЗнч(Объект) = Тип("ДокументОбъект.ВводОстатковОПродажахЗаПрошлыеПериоды") Тогда
		РеквизитыВидПодарочногоСертификата = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ВидПодарочногоСертификата, "Номинал, Валюта");
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл // СтрокаТабличнойЧасти
		ДанныеПодарочногоСертификата = ДанныеПодарочныхСертификатов[СтрокаТаблицы.ПодарочныйСертификат];
	
		Если ДанныеПодарочногоСертификата = Неопределено Тогда
			ТекстОшибки = НСтр("ru='В строке %НомерСтроки% табличной части ""%ТабличнаяЧасть%"" не указан подарочный сертификат.'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ТабличнаяЧасть%",  СинонимИмениТабличнойЧасти);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", СтрокаТаблицы.НомерСтроки);
			
			ОбщегоНазначения.СообщитьПользователю(
				ТекстОшибки,
				Объект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТабличнойЧасти, СтрокаТаблицы.НомерСтроки, "ПодарочныйСертификат"),
				,
				Отказ);
			Продолжить;
		КонецЕсли;

		Если (ТипЗнч(Объект) = Тип("ДокументОбъект.ВводОстатков") 
				Или ТипЗнч(Объект) = Тип("ДокументОбъект.ВводОстатковОПродажахЗаПрошлыеПериоды"))
			И РеквизитыВидПодарочногоСертификата.Номинал < СтрокаТаблицы.СуммаВВалютеСертификата Тогда
			
			ТекстОшибки = НСтр("ru='Подарочный сертификат %Сертификат% в строке %НомерСтроки% списка ""%ТабличнаяЧасть%"" имеет остаток, превышающий номинал %Номинал% %Валюта%.'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ТабличнаяЧасть%", СинонимИмениТабличнойЧасти);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Сертификат%",  СтрокаТаблицы.ПодарочныйСертификат);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", СтрокаТаблицы.НомерСтроки);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номинал%",     РеквизитыВидПодарочногоСертификата.Номинал);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Валюта%",      РеквизитыВидПодарочногоСертификата.Валюта);
			
			ОбщегоНазначения.СообщитьПользователю(
				ТекстОшибки,
				Объект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТабличнойЧасти, СтрокаТаблицы.НомерСтроки, "ПодарочныйСертификат"),
				,
				Отказ);
				
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов")
			И НЕ ЗначениеЗаполнено(ДанныеПодарочногоСертификата.СтатьяДоходов) Тогда
			
			ТекстОшибки = НСтр("ru='В строке %НомерСтроки% табличной части ""%ТабличнаяЧасть%"" не заполнены данные вида сертификата %ВидСертификата%. 
									|Заполните статью доходов в виде сертификата.'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ТабличнаяЧасть%",  СинонимИмениТабличнойЧасти);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВидСертификата%",  ДанныеПодарочногоСертификата.ВидПодарочногоСертификата);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Сертификат%",  СтрокаТаблицы.ПодарочныйСертификат);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", СтрокаТаблицы.НомерСтроки);
			
			ОбщегоНазначения.СообщитьПользователю(
				ТекстОшибки,
				Объект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТабличнойЧасти, СтрокаТаблицы.НомерСтроки, "ПодарочныйСертификат"),
				,
				Отказ);
			
		КонецЕсли;

		Если ДанныеПодарочногоСертификата.УчетПодарочныхСертификатов2_5 Тогда
			
			Если ТипОперацииПоПодарочнымСертификатам = 1 Тогда
			// Продажа
				Если ДанныеПодарочногоСертификата.СтатусАктивации Тогда
					ТекстОшибки = НСтр("ru='Подарочный сертификат %Сертификат% в строке %НомерСтроки% списка ""%ТабличнаяЧасть%"" уже активирован.'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ТабличнаяЧасть%", СинонимИмениТабличнойЧасти);
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Сертификат%",  СтрокаТаблицы.ПодарочныйСертификат);
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", СтрокаТаблицы.НомерСтроки);
					
					ОбщегоНазначения.СообщитьПользователю(
						ТекстОшибки,
						Объект,
						ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТабличнойЧасти, СтрокаТаблицы.НомерСтроки, "ПодарочныйСертификат"),
						,
						Отказ);
				КонецЕсли;
			ИначеЕсли ТипОперацииПоПодарочнымСертификатам = 2 Тогда
			// Возврат
				Если Не ДанныеПодарочногоСертификата.СтатусАктивации
						Или ДанныеПодарочногоСертификата.ДатаОкончанияДействия < Объект.Дата
						Или ДанныеПодарочногоСертификата.ОформленВозврат
						Или Не (ДанныеПодарочногоСертификата.Остаток = ДанныеПодарочногоСертификата.Номинал) Тогда
					ТекстОшибки = НСтр("ru='Подарочный сертификат %Сертификат% в строке %НомерСтроки% списка ""%ТабличнаяЧасть%"" недоступен для возврата. Он, либо просрочен, либо возвращен, либо им уже была произведена оплата.'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ТабличнаяЧасть%", СинонимИмениТабличнойЧасти);
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Сертификат%",  СтрокаТаблицы.ПодарочныйСертификат);
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", СтрокаТаблицы.НомерСтроки);
					
					ОбщегоНазначения.СообщитьПользователю(
						ТекстОшибки,
						Объект,
						ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТабличнойЧасти, СтрокаТаблицы.НомерСтроки, "ПодарочныйСертификат"),
						,
						Отказ);
				КонецЕсли;
			ИначеЕсли ТипОперацииПоПодарочнымСертификатам = 3 Тогда
			// Оплата
				Если Не ДанныеПодарочногоСертификата.СтатусАктивации 
						Или Не(ДанныеПодарочногоСертификата.ДатаНачалаДействия <= Объект.Дата И ДанныеПодарочногоСертификата.ДатаОкончанияДействия >= Объект.Дата)
						Или ДанныеПодарочногоСертификата.Остаток < ДанныеПодарочногоСертификата.Номинал И ДанныеПодарочногоСертификата.ЧастичнаяОплата = Ложь
						Или	ДанныеПодарочногоСертификата.Остаток <= 0 И ДанныеПодарочногоСертификата.ЧастичнаяОплата = Истина Тогда
					ТекстОшибки = НСтр("ru='Подарочный сертификат %Сертификат% в строке %НомерСтроки% списка ""%ТабличнаяЧасть%"", либо не активирован, либо просрочен, либо полностью погашен.'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ТабличнаяЧасть%", СинонимИмениТабличнойЧасти);
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Сертификат%",  СтрокаТаблицы.ПодарочныйСертификат);
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", СтрокаТаблицы.НомерСтроки);
					
					ОбщегоНазначения.СообщитьПользователю(
						ТекстОшибки,
						Объект,
						ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТабличнойЧасти, СтрокаТаблицы.НомерСтроки, "ПодарочныйСертификат"),
						,
						Отказ);
				КонецЕсли;
			ИначеЕсли ТипОперацииПоПодарочнымСертификатам = 4 Тогда
			// Аннулирование
				Если Не ДанныеПодарочногоСертификата.СтатусАктивации
						Или Не ДанныеПодарочногоСертификата.Остаток > 0
						Или Не (ДанныеПодарочногоСертификата.ЧастичнаяОплата = Ложь И
										(ДанныеПодарочногоСертификата.Остаток <= ДанныеПодарочногоСертификата.Номинал)
								Или ДанныеПодарочногоСертификата.ЧастичнаяОплата = Истина) Тогда
					ТекстОшибки = НСтр("ru='Подарочный сертификат %Сертификат% в строке %НомерСтроки% списка ""%ТабличнаяЧасть%"", либо не был активирован, либо полностью погашен, либо уже аннулирован.'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ТабличнаяЧасть%", СинонимИмениТабличнойЧасти);
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Сертификат%",  СтрокаТаблицы.ПодарочныйСертификат);
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", СтрокаТаблицы.НомерСтроки);
					
					ОбщегоНазначения.СообщитьПользователю(
						ТекстОшибки,
						Объект,
						ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТабличнойЧасти, СтрокаТаблицы.НомерСтроки, "ПодарочныйСертификат"),
						,
						Отказ);
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Если (ДопустимыеСтатусыИзИсторииПодарочныхСертификатов.Найти(ДанныеПодарочногоСертификата.СтатусИзИсторииПодарочныхСертификатов) = Неопределено
					И ТипЗнч(Объект) <> Тип("ДокументОбъект.ВводОстатков")
					И ТипЗнч(Объект) <> Тип("ДокументОбъект.ВводОстатковОПродажахЗаПрошлыеПериоды"))
				Или (ДопустимыеСтатусыИзИсторииПодарочныхСертификатов.Найти(ДанныеПодарочногоСертификата.СтатусИзИсторииПодарочныхСертификатов) = Неопределено 
					И (ТипЗнч(Объект) = Тип("ДокументОбъект.ВводОстатков")
						Или ТипЗнч(Объект) = Тип("ДокументОбъект.ВводОстатковОПродажахЗаПрошлыеПериоды"))
					И ДанныеПодарочногоСертификата.ДокументПродажи <> Объект.Ссылка) Тогда
				
				// Для многоразовых сертификатов старого образца допустим статус Частично погашен при остатке равном нулю.
				// Поэтому, для операции оплаты нужно проверить, что остаток больше нуля.
				Если Не (ТипОперацииПоПодарочнымСертификатам = 3 И ДанныеПодарочногоСертификата.Остаток > 0) 
				
					// Нельзя аннулировать многоразовый подарочный сертификат старого образца, если он частично погашен и у него остаток равен нулю.
					// Документ Чек ККМ при вычислении статуса не учитывает остаток по подарочному сертификату.
					Или (ТипОперацииПоПодарочнымСертификатам = 4 
						И ДанныеПодарочногоСертификата.ЧастичнаяОплата = Истина 
						И ДанныеПодарочногоСертификата.СтатусИзИсторииПодарочныхСертификатов = ПредопределенноеЗначение("Перечисление.СтатусыПодарочныхСертификатов.ЧастичноПогашен")
						И ДанныеПодарочногоСертификата.Остаток = 0) Тогда
							
					ТекстОшибки = НСтр("ru='Подарочный сертификат %Сертификат% в строке %НомерСтроки% списка ""%ТабличнаяЧасть%"" имеет недопустимый статус ""%Статус%"".'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ТабличнаяЧасть%", СинонимИмениТабличнойЧасти);
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Сертификат%",  СтрокаТаблицы.ПодарочныйСертификат);
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", СтрокаТаблицы.НомерСтроки);
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Статус%",      ДанныеПодарочногоСертификата.СтатусИзИсторииПодарочныхСертификатов);
					
					ОбщегоНазначения.СообщитьПользователю(
						ТекстОшибки,
						Объект,
						ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТабличнойЧасти, СтрокаТаблицы.НомерСтроки, "ПодарочныйСертификат"),
						,
						Отказ);
				КонецЕсли;
			КонецЕсли;
		
			Если ТипЗнч(Объект) = Тип("ДокументОбъект.ЧекККМ")
				ИЛИ ТипЗнч(Объект) = Тип("ДокументОбъект.ВозвратПодарочныхСертификатов") Тогда
				Если ДанныеПодарочногоСертификата.ДатаОкончанияДействия < Объект.Дата Тогда
				
					ТекстОшибки = НСтр("ru='Подарочный сертификат %Сертификат% в строке %НомерСтроки% списка ""%ТабличнаяЧасть%"" просрочен. Дата окончания действия %ДатаОкончанияДействия%.'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ТабличнаяЧасть%", СинонимИмениТабличнойЧасти);
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Сертификат%",             СтрокаТаблицы.ПодарочныйСертификат);
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%",            СтрокаТаблицы.НомерСтроки);
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДатаОкончанияДействия%",  ДанныеПодарочногоСертификата.ДатаОкончанияДействия);
					
					ОбщегоНазначения.СообщитьПользователю(
						ТекстОшибки,
						Объект,
						ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТабличнойЧасти, СтрокаТаблицы.НомерСтроки, "ПодарочныйСертификат"),
						,
						Отказ);
					
				КонецЕсли;
			КонецЕсли;
			
			Если ТипЗнч(Объект) = Тип("ДокументОбъект.ВозвратПодарочныхСертификатов") Тогда
				Если Не ДанныеПодарочногоСертификата.Номинал = ДанныеПодарочногоСертификата.Остаток Тогда
					
					ТекстОшибки = НСтр("ru='Подарочный сертификат %Сертификат% в строке %НомерСтроки% списка ""%ТабличнаяЧасть%"" имеет остаток %Остаток% %Валюта% при номинале в %Номинал% %Валюта% и недоступен для возврата.'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ТабличнаяЧасть%", СинонимИмениТабличнойЧасти);
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Сертификат%",  СтрокаТаблицы.ПодарочныйСертификат);
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", СтрокаТаблицы.НомерСтроки);
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Остаток%",     ДанныеПодарочногоСертификата.Остаток);
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Валюта%",      ДанныеПодарочногоСертификата.Валюта);
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номинал%",     ДанныеПодарочногоСертификата.Номинал);
					
					ОбщегоНазначения.СообщитьПользователю(
						ТекстОшибки,
						Объект,
						ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТабличнойЧасти, СтрокаТаблицы.НомерСтроки, "ПодарочныйСертификат"),
						,
						Отказ);
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ВводОстатков") 
		Или ТипЗнч(Объект) = Тип("ДокументОбъект.ВводОстатковОПродажахЗаПрошлыеПериоды") Тогда
		
		ТипКарты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидПодарочногоСертификата, "ТипКарты");
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Таблица.ВидПодарочногоСертификата КАК ВидПодарочногоСертификата,
		|	Таблица.Штрихкод КАК Штрихкод,
		|	Таблица.МагнитныйКод КАК МагнитныйКод,
		|	Таблица.ДлинаШтрихкода КАК ДлинаШтрихкода,
		|	Таблица.ДлинаМагнитногоКода КАК ДлинаМагнитногоКода,
		|	Таблица.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ Таблица
		|ИЗ
		|	&ПодарочныеСертификаты КАК Таблица
		|;
		|
		|ВЫБРАТЬ
		|	Таблица.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ КорректныеКоды
		|ИЗ
		|	Таблица КАК Таблица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыПодарочныхСертификатов.ШаблоныКодовПодарочныхСертификатов КАК ШаблоныКодовПодарочныхСертификатов
		|		ПО ШаблоныКодовПодарочныхСертификатов.Ссылка = Таблица.ВидПодарочногоСертификата
		|	И &ПроверитьМагнитныйКод
		|	И &ПроверитьШтрихкод
		|;
		|ВЫБРАТЬ
		|	Таблица.НомерСтроки КАК НомерСтроки,
		|	Таблица.МагнитныйКод КАК МагнитныйКод,
		|	Таблица.Штрихкод КАК Штрихкод
		|ИЗ
		|	Таблица
		|ГДЕ
		|	Таблица.НомерСтроки НЕ В (ВЫБРАТЬ Т.НомерСтроки ИЗ КорректныеКоды КАК Т)
		|");
		
		ПодарочныеСертификаты = ТабличнаяЧасть.Выгрузить(); // ТаблицаЗначений
		ПодарочныеСертификаты.Колонки.Добавить("ВидПодарочногоСертификата", Новый ОписаниеТипов("СправочникСсылка.ВидыПодарочныхСертификатов"));
		ПодарочныеСертификаты.Колонки.Добавить("ДлинаШтрихкода",            ОбщегоНазначения.ОписаниеТипаЧисло(3,0));
		ПодарочныеСертификаты.Колонки.Добавить("ДлинаМагнитногоКода",       ОбщегоНазначения.ОписаниеТипаЧисло(3,0));
		Для Каждого СтрокаТЧ Из ПодарочныеСертификаты Цикл
			СтрокаТЧ.ВидПодарочногоСертификата = Объект.ВидПодарочногоСертификата;
			СтрокаТЧ.ДлинаШтрихкода = СтрДлина(СтрокаТЧ.Штрихкод);
			СтрокаТЧ.ДлинаМагнитногоКода = СтрДлина(СтрокаТЧ.МагнитныйКод);
		КонецЦикла;
		
		ТипКарты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидПодарочногоСертификата, "ТипКарты");
		Если ТипКарты = Перечисления.ТипыКарт.Магнитная ИЛИ ТипКарты = Перечисления.ТипыКарт.Смешанная Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ПроверитьМагнитныйКод", 
				"И ШаблоныКодовПодарочныхСертификатов.НачалоДиапазонаМагнитногоКода <= Таблица.МагнитныйКод
				|	И ШаблоныКодовПодарочныхСертификатов.КонецДиапазонаМагнитногоКода  >= Таблица.МагнитныйКод
				|	И ШаблоныКодовПодарочныхСертификатов.ДлинаМагнитногоКода           = Таблица.ДлинаМагнитногоКода");
		Иначе	
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ПроверитьМагнитныйКод", "");
		КонецЕсли;
		Если ТипКарты = Перечисления.ТипыКарт.Штриховая ИЛИ ТипКарты = Перечисления.ТипыКарт.Смешанная Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ПроверитьШтрихкод", 
				"И ШаблоныКодовПодарочныхСертификатов.НачалоДиапазонаШтрихкода <= Таблица.Штрихкод
				|	И ШаблоныКодовПодарочныхСертификатов.КонецДиапазонаШтрихкода  >= Таблица.Штрихкод
				|	И ШаблоныКодовПодарочныхСертификатов.ДлинаШтрихкода           = Таблица.ДлинаШтрихкода");
		Иначе	
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ПроверитьШтрихкод", "");
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ПодарочныеСертификаты", ПодарочныеСертификаты);
		
		Если ТипКарты = Перечисления.ТипыКарт.Магнитная Тогда
			ТекстОшибки = НСтр("ru='Магнитный код %МагнитныйКод% в строке %НомерСтроки% табличной части ""%ТабличнаяЧасть%"" не соответствует требованиям вида подарочного сертификата """"%ВидПодарочногоСертификата%""""'");
		ИначеЕсли ТипКарты = Перечисления.ТипыКарт.Штриховая  Тогда
			ТекстОшибки = НСтр("ru='Штрихкод %Штрихкод% в строке %НомерСтроки% табличной части ""%ТабличнаяЧасть%"" не соответствует требованиям вида подарочного сертификата """"%ВидПодарочногоСертификата%""""'");
		Иначе
			ТекстОшибки = НСтр("ru='Магнитный код %МагнитныйКод% или штрихкод %Штрихкод% в строке %НомерСтроки% табличной части ""%ТабличнаяЧасть%"" не соответствует требованиям вида подарочного сертификата """"%ВидПодарочногоСертификата%""""'");
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Текст = ТекстОшибки;
			Текст = СтрЗаменить(Текст, "%ТабличнаяЧасть%", СинонимИмениТабличнойЧасти);
			Текст = СтрЗаменить(Текст, "%ВидПодарочногоСертификата%",             Объект.ВидПодарочногоСертификата);
			Текст = СтрЗаменить(Текст, "%Штрихкод%",     Выборка.Штрихкод);
			Текст = СтрЗаменить(Текст, "%МагнитныйКод%", Выборка.МагнитныйКод);
			Текст = СтрЗаменить(Текст, "%НомерСтроки%",  Выборка.НомерСтроки);
			
			ОбщегоНазначения.СообщитьПользователю(
				Текст,
				Объект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТабличнойЧасти, Выборка.НомерСтроки, "ПодарочныйСертификат"),
				,
				Отказ);
		
		КонецЦикла;
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Таблица.Штрихкод КАК Штрихкод,
		|	Таблица.МагнитныйКод КАК МагнитныйКод,
		|	Таблица.НомерСтроки КАК НомерСтроки,
		|	Таблица.СерийныйНомер КАК СерийныйНомер
		|ПОМЕСТИТЬ Таблица
		|ИЗ
		|	&ПодарочныеСертификаты КАК Таблица
		|;
		|
		|ВЫБРАТЬ
		|	Таблица.Штрихкод КАК Штрихкод,
		|	Таблица.МагнитныйКод КАК МагнитныйКод,
		|	Таблица.НомерСтроки КАК НомерСтроки,
		|	Таблица.СерийныйНомер КАК СерийныйНомер,
		|	ЕСТЬNULL(СправочникПодарочныеСертификатыПоШтрихкоду.Ссылка, ЗНАЧЕНИЕ(Справочник.ПодарочныеСертификаты.ПустаяСсылка)) КАК ПодарочныйСертификатПоШтрихкоду,
		|	ЕСТЬNULL(СправочникПодарочныеСертификатыПоМагнитномуКоду.Ссылка, ЗНАЧЕНИЕ(Справочник.ПодарочныеСертификаты.ПустаяСсылка)) КАК ПодарочныйСертификатПоМагнитномуКоду,
		|	ЕСТЬNULL(СправочникПодарочныйСертификатПоСерийномуНомеру.Ссылка, ЗНАЧЕНИЕ(Справочник.ПодарочныеСертификаты.ПустаяСсылка)) КАК ПодарочныйСертификатПоСерийномуНомеру
		|ИЗ
		|	Таблица КАК Таблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодарочныеСертификаты КАК СправочникПодарочныеСертификатыПоШтрихкоду
		|		ПО СправочникПодарочныеСертификатыПоШтрихкоду.Штрихкод = Таблица.Штрихкод
		|		И СправочникПодарочныеСертификатыПоШтрихкоду.Владелец = &ВидПодарочногоСертификата
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодарочныеСертификаты КАК СправочникПодарочныеСертификатыПоМагнитномуКоду
		|		ПО СправочникПодарочныеСертификатыПоМагнитномуКоду.МагнитныйКод = Таблица.МагнитныйКод
		|		И СправочникПодарочныеСертификатыПоМагнитномуКоду.Владелец = &ВидПодарочногоСертификата
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодарочныеСертификаты КАК СправочникПодарочныйСертификатПоСерийномуНомеру
		|		ПО СправочникПодарочныйСертификатПоСерийномуНомеру.Код = Таблица.СерийныйНомер
		|");
		
		Запрос.УстановитьПараметр("ВидПодарочногоСертификата", Объект.ВидПодарочногоСертификата);
		Запрос.УстановитьПараметр("ПодарочныеСертификаты", ТабличнаяЧасть.Выгрузить());
		
		Таблица = Запрос.Выполнить().Выгрузить();
		
		Для Каждого СтрокаТЧ Из ПодарочныеСертификаты Цикл  // СтрокаТабличнойЧасти
			
			Если Не ЗначениеЗаполнено(СтрокаТЧ.ПодарочныйСертификат) Тогда
				
				НайденнаяСтрока = Таблица.НайтиСтроки(Новый Структура("НомерСтроки", СтрокаТЧ.НомерСтроки))[0];
				
				Если ТипКарты = Перечисления.ТипыКарт.Штриховая Тогда
					
					Если НайденнаяСтрока.ПодарочныйСертификатПоСерийномуНомеру <> НайденнаяСтрока.ПодарочныйСертификатПоШтрихкоду Тогда
						
						Текст = НСтр("ru='В строке %НомерСтроки% табличной части ""%ТабличнаяЧасть%"" данные заполнены некорректно.
						                 |Для штрихкода %Штрихкод% сертификат %1%.
						                 |Для серийного номера %СерийныйНомер% сертификат %2%.'");
						Текст = СтрЗаменить(Текст, "%ТабличнаяЧасть%", СинонимИмениТабличнойЧасти);
						Текст = СтрЗаменить(Текст, "%Штрихкод%",      НайденнаяСтрока.Штрихкод);
						Текст = СтрЗаменить(Текст, "%СерийныйНомер%", НайденнаяСтрока.СерийныйНомер);
						Текст = СтрЗаменить(Текст, "%МагнитныйКод%",  НайденнаяСтрока.МагнитныйКод);
						Текст = СтрЗаменить(Текст, "%НомерСтроки%",   НайденнаяСтрока.НомерСтроки);
						Текст = СтрЗаменить(Текст, "%1%", ?(ЗначениеЗаполнено(НайденнаяСтрока.ПодарочныйСертификатПоШтрихкоду),НайденнаяСтрока.ПодарочныйСертификатПоШтрихкоду,НСтр("ru = 'не найден'")));
						Текст = СтрЗаменить(Текст, "%2%", ?(ЗначениеЗаполнено(НайденнаяСтрока.ПодарочныйСертификатПоСерийномуНомеру),НайденнаяСтрока.ПодарочныйСертификатПоСерийномуНомеру,НСтр("ru = 'не найден'")));
						
						ОбщегоНазначения.СообщитьПользователю(
							Текст,
							Объект,
							ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТабличнойЧасти, НайденнаяСтрока.НомерСтроки, "ПодарочныйСертификат"),
							,
							Отказ);
					КонецЕсли;
					
				ИначеЕсли ТипКарты = Перечисления.ТипыКарт.Магнитная Тогда
					
					Если НайденнаяСтрока.ПодарочныйСертификатПоСерийномуНомеру <> НайденнаяСтрока.ПодарочныйСертификатПоМагнитномуКоду Тогда
						
						Текст = НСтр("ru='В строке %НомерСтроки% табличной части ""%ТабличнаяЧасть%"" данные заполнены некорректно.
						                 |Для магнитного кода %МагнитныйКод% сертификат %1%.
						                 |Для серийного номера %СерийныйНомер% сертификат %2%.'");
						Текст = СтрЗаменить(Текст, "%ТабличнаяЧасть%", СинонимИмениТабличнойЧасти);
						Текст = СтрЗаменить(Текст, "%Штрихкод%",      НайденнаяСтрока.Штрихкод);
						Текст = СтрЗаменить(Текст, "%СерийныйНомер%", НайденнаяСтрока.СерийныйНомер);
						Текст = СтрЗаменить(Текст, "%МагнитныйКод%",  НайденнаяСтрока.МагнитныйКод);
						Текст = СтрЗаменить(Текст, "%НомерСтроки%",   НайденнаяСтрока.НомерСтроки);
						Текст = СтрЗаменить(Текст, "%1%", ?(ЗначениеЗаполнено(НайденнаяСтрока.ПодарочныйСертификатПоМагнитномуКоду),НайденнаяСтрока.ПодарочныйСертификатПоМагнитномуКоду,НСтр("ru = 'не найден'")));
						Текст = СтрЗаменить(Текст, "%2%", ?(ЗначениеЗаполнено(НайденнаяСтрока.ПодарочныйСертификатПоСерийномуНомеру),НайденнаяСтрока.ПодарочныйСертификатПоСерийномуНомеру,НСтр("ru = 'не найден'")));
						
						ОбщегоНазначения.СообщитьПользователю(
							Текст,
							Объект,
							ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТабличнойЧасти, НайденнаяСтрока.НомерСтроки, "ПодарочныйСертификат"),
							,
							Отказ);
						
					КонецЕсли;
					
				Иначе
					
					Если НайденнаяСтрока.ПодарочныйСертификатПоСерийномуНомеру <> НайденнаяСтрока.ПодарочныйСертификатПоМагнитномуКоду
						ИЛИ НайденнаяСтрока.ПодарочныйСертификатПоСерийномуНомеру <> НайденнаяСтрока.ПодарочныйСертификатПоШтрихкоду Тогда
						
						Текст = НСтр("ru='В строке %НомерСтроки% табличной части ""%ТабличнаяЧасть%"" данные заполнены некорректно.
						                 |Для магнитного кода %МагнитныйКод% сертификат %1%.
						                 |Для штрихкода %Штрихкод% сертификат %2%.
						                 |Для серийного номера %СерийныйНомер% сертификат %3%.'");
						Текст = СтрЗаменить(Текст, "%ТабличнаяЧасть%", СинонимИмениТабличнойЧасти);
						Текст = СтрЗаменить(Текст, "%Штрихкод%",      НайденнаяСтрока.Штрихкод);
						Текст = СтрЗаменить(Текст, "%СерийныйНомер%", НайденнаяСтрока.СерийныйНомер);
						Текст = СтрЗаменить(Текст, "%МагнитныйКод%",  НайденнаяСтрока.МагнитныйКод);
						Текст = СтрЗаменить(Текст, "%НомерСтроки%",   НайденнаяСтрока.НомерСтроки);
						Текст = СтрЗаменить(Текст, "%1%", ?(ЗначениеЗаполнено(НайденнаяСтрока.ПодарочныйСертификатПоМагнитномуКоду),НайденнаяСтрока.ПодарочныйСертификатПоМагнитномуКоду,НСтр("ru = 'не найден'")));
						Текст = СтрЗаменить(Текст, "%2%", ?(ЗначениеЗаполнено(НайденнаяСтрока.ПодарочныйСертификатПоШтрихкоду),НайденнаяСтрока.ПодарочныйСертификатПоШтрихкоду,НСтр("ru = 'не найден'")));
						Текст = СтрЗаменить(Текст, "%3%", ?(ЗначениеЗаполнено(НайденнаяСтрока.ПодарочныйСертификатПоСерийномуНомеру),НайденнаяСтрока.ПодарочныйСертификатПоСерийномуНомеру,НСтр("ru = 'не найден'")));
						
						ОбщегоНазначения.СообщитьПользователю(
							Текст,
							Объект,
							ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТабличнойЧасти, НайденнаяСтрока.НомерСтроки, "ПодарочныйСертификат"),
							,
							Отказ);
						
					КонецЕсли;
					
				КонецЕсли;
			
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	КлючевыеРеквизиты = Новый Массив;
	КлючевыеРеквизиты.Добавить("ПодарочныйСертификат");
	ОбщегоНазначенияУТ.ПроверитьНаличиеДублейСтрокТЧ(Объект, ИмяТабличнойЧасти, КлючевыеРеквизиты, Отказ, СинонимИмениТабличнойЧасти);
	
КонецПроцедуры

#КонецОбласти

#Область АннулированиеПодарочныхСертификатов

#КонецОбласти

#КонецОбласти
