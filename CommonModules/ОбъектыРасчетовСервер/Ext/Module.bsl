#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Взаиморасчеты

// Создает и заполняет/удаляет элементы справочника "Объекты расчетов" перед записью связанного объекта.
// Для платежных документов создание происходит раньше, в методе ВзаиморасчетыСервер.ПроверитьЗаполнитьРасшифровкуПлатежа.
//
// Параметры:
// 	Объект - СправочникОбъект, ДокументОбъект - Записываемый объект.
// 	МассивСтруктур - Массив из см. ВзаиморасчетыСервер.ПараметрыМеханизма - Массив структур параметров взаиморасчетов.
// 	РежимЗаписи - РежимЗаписиДокумента - Режим записи, если метод вызывается из события ПередЗаписью.
// 	Отказ - Булево - Флаг Отказ из объекта.
//
Процедура ПроверитьОбъектыРасчетовПередЗаписью(Объект, МассивСтруктур, РежимЗаписи, Отказ) Экспорт
	
	// Очистка объекта от ссылок на объекты расчетов.
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		ОчиститьОбъектыРасчетов(Объект, МассивСтруктур);
	КонецЕсли;
	
	МассивОбъектовРасшифровки = Новый Массив();
	ТаблицаСторон = ТаблицаСторон(Объект, МассивСтруктур);
	Ссылка = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, "Объект.Ссылка");
	
	Для Каждого СтруктураПараметров Из МассивСтруктур Цикл
		
		Если СтруктураПараметров.Свойство("СсылкаНового") Тогда
			Ссылка = СтруктураПараметров.СсылкаНового;
		КонецЕсли;
		
		//Создание элементов справочника
		ОбъектРасчетов = Неопределено;
		Если СсылкаЯвляетсяОбъектомРасчетов(Объект, СтруктураПараметров) Тогда
			ОбъектРасчетов = ПроверитьЗаполнитьОбъектРасчетовПоСтруктуре(Объект, СтруктураПараметров,,РежимЗаписи);
		КонецЕсли;
		
		//Заполнение расшифровки платежа
		Если ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа)
			И СтруктураПараметров.ИзменяетРасчеты Тогда
			
			СуммыДокумента        = ВзаиморасчетыСервер.СуммыДокумента(Объект, СтруктураПараметров);
			
			//Документ мультивалютный, расшифровку не проверяем.
			Если СуммыДокумента.СуммаДокументаБезЗалога = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			РасшифровкаПлатежа = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа); // ТабличнаяЧасть
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОбъектовРасшифровки, РасшифровкаПлатежа.Выгрузить().ВыгрузитьКолонку("ОбъектРасчетов"));
			
			Валюта                = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ВалютаДокумента);
			Дата                  = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Дата);
			ЗаказОснование        = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ЗаказОснование);
			Договор               = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Договор);
			ПорядокРасчетов       = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ПорядокРасчетов);
			Организация           = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Организация);
			ТипРасчетов           = СтруктураПараметров.ТипРасчетов;
			
			//В документах возврата Порядок расчетов не кэшируется и получается из договора.
			Если ПорядокРасчетов = Неопределено Тогда
				Договор = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Договор);
				Если ЗначениеЗаполнено(Договор) Тогда
					ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ПорядокРасчетов")
				КонецЕсли;
			КонецЕсли;
			
			Если СтруктураПараметров.ЭтоПлатежИлиПрочийДокумент
				И Метаданные.ОпределяемыеТипы.ОбъектРасчетовАванс.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
				
				СтрокиСПустымОбъектом = РасшифровкаПлатежа.Выгрузить(Новый Структура("ОбъектРасчетов",Справочники.ОбъектыРасчетов.ПустаяСсылка()));
				МассивВалютВзаиморасчетов = СтрокиСПустымОбъектом.ВыгрузитьКолонку("ВалютаВзаиморасчетов");
				МассивВалютВзаиморасчетов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивВалютВзаиморасчетов);
				Если МассивВалютВзаиморасчетов.Количество() > 1 Тогда
					ТекстОшибки = НСтр("ru = 'Запрещено указывать разные валюты взаиморасчетов для неразнесенного платежа.'");
					ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,,,Отказ);
				КонецЕсли;
				
				ВзаиморасчетыСервер.ЗаполнитьСуммуВзаиморасчетовВТабличнойЧасти(
					Валюта,
					Дата,
					РасшифровкаПлатежа,
					Организация);
				
				ЗаполнитьСтавкуНДС = РасшифровкаПлатежа.Количество() > 0 
					И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(РасшифровкаПлатежа[0], "СтавкаНДС");
				СтавкаНДС = Справочники.СтавкиНДС.ПустаяСсылка();
				
				Если СтрокиСПустымОбъектом.Количество() > 0 И ЗначениеЗаполнено(ЗаказОснование) И ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказам Тогда
					ОбъектРасчетов = ПолучитьОбъектРасчетовПоСсылке(ЗаказОснование, Организация, ТипРасчетов);
					Если ЗаполнитьСтавкуНДС Тогда
						СтавкаНДС = ДенежныеСредстваСервер.СтавкаНДСОбъектаРасчетов(Организация, ОбъектРасчетов, ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом);
					КонецЕсли;
					Для Каждого СтрокаРасшифровки Из РасшифровкаПлатежа Цикл
						Если НЕ ЗначениеЗаполнено(СтрокаРасшифровки.ОбъектРасчетов) Тогда
							СтрокаРасшифровки.ОбъектРасчетов = ОбъектРасчетов;
							Если ЗаполнитьСтавкуНДС И ЗначениеЗаполнено(СтавкаНДС) Тогда
								СтрокаРасшифровки.СтавкаНДС = СтавкаНДС;
								СтруктураПересчетаСуммы = Новый Структура("ЦенаВключаетНДС", Истина);
								СтруктураДействий = Новый Структура("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
								ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаРасшифровки, СтруктураДействий, Неопределено);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				ИначеЕсли СтрокиСПустымОбъектом.Количество() > 0 И ЗначениеЗаполнено(Договор) И ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
					ОбъектРасчетов = ПолучитьОбъектРасчетовПоСсылке(Договор, Организация, ТипРасчетов);
					Если ЗаполнитьСтавкуНДС Тогда
						СтавкаНДС = ДенежныеСредстваСервер.СтавкаНДСОбъектаРасчетов(Организация, ОбъектРасчетов, ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом);
					КонецЕсли;
					Для Каждого СтрокаРасшифровки Из РасшифровкаПлатежа Цикл
						Если НЕ ЗначениеЗаполнено(СтрокаРасшифровки.ОбъектРасчетов) Тогда
							СтрокаРасшифровки.ОбъектРасчетов = ОбъектРасчетов;
							Если ЗаполнитьСтавкуНДС И ЗначениеЗаполнено(СтавкаНДС) Тогда
								СтрокаРасшифровки.СтавкаНДС = СтавкаНДС;
								СтруктураПересчетаСуммы = Новый Структура("ЦенаВключаетНДС", Истина);
								СтруктураДействий = Новый Структура("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
								ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаРасшифровки, СтруктураДействий, Неопределено);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				Иначе
					ОбъектыРасчетов = ПроверитьЗаполнитьОбъектРасчетовПоСтруктуре(Объект, СтруктураПараметров, Истина, РежимЗаписи);
					
					СтруктураПоиска = Новый Структура;
					СтруктураПоиска.Вставить("Организация");
					СтруктураПоиска.Вставить("Контрагент");СтруктураПоиска.Вставить("Партнер");
					
					Для Каждого СтрокаРасшифровки Из РасшифровкаПлатежа Цикл
						Если НЕ ЗначениеЗаполнено(СтрокаРасшифровки.ОбъектРасчетов)
							И ОбъектыРасчетов.Количество() > 0 Тогда
							
							Если ТипЗнч(Объект) = Тип("ФормаКлиентскогоПриложения") Тогда
								Идентификатор = СтрокаРасшифровки.ПолучитьИдентификатор();
							Иначе
								Идентификатор = СтрокаРасшифровки.НомерСтроки;
							КонецЕсли;
							
							Если СтруктураПараметров.ОрганизацияВСтроках Тогда
								СтруктураПоиска.Организация = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Организация, Идентификатор);
							Иначе
								СтруктураПоиска.Организация = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Организация);
							КонецЕсли;
							
							Если СтруктураПараметров.КонтрагентВСтроках Тогда
								СтруктураПоиска.Контрагент = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Контрагент, Идентификатор);
							Иначе
								СтруктураПоиска.Контрагент = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Контрагент);
							КонецЕсли;
							
							Если СтруктураПараметров.ПартнерВСтроках Тогда
								СтруктураПоиска.Партнер = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Партнер, Идентификатор);
							Иначе
								СтруктураПоиска.Партнер = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Партнер);
							КонецЕсли;
							
							СтрокаРасшифровки.ОбъектРасчетов = ОбъектыРасчетов.НайтиСтроки(СтруктураПоиска)[0].ОбъектРасчетов;
							Если ЗаполнитьСтавкуНДС Тогда
								СтавкаНДС = ДенежныеСредстваСервер.СтавкаНДСОбъектаРасчетов(Организация, СтрокаРасшифровки.ОбъектРасчетов, ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом);
								Если ЗначениеЗаполнено(СтавкаНДС) Тогда
									СтрокаРасшифровки.СтавкаНДС = СтавкаНДС;
									СтруктураПересчетаСуммы = Новый Структура("ЦенаВключаетНДС", Истина);
									СтруктураДействий = Новый Структура("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
									ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаРасшифровки, СтруктураДействий, Неопределено);
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
			ИначеЕсли СтруктураПараметров.ЭтоПродажаЗакупка И ЗначениеЗаполнено(ОбъектРасчетов) Тогда
				
				СуммаДокумента        = СуммыДокумента.СуммаЗалогаЗаТару + СуммыДокумента.СуммаДокументаБезЗалога;
				СуммаВзаиморасчетов   = СуммыДокумента.СуммаВзаиморасчетовБезЗалога + СуммыДокумента.СуммаВзаиморасчетовПоТаре;
				ВзаиморасчетыСервер.ЗаполнитьСуммыРасшифровкиНакладной(СуммаДокумента, СуммаВзаиморасчетов, РасшифровкаПлатежа, ОбъектРасчетов);
				
			КонецЕсли;
		КонецЕсли;
		
		Если СтруктураПараметров.Организация = Справочники.Организации.УправленческаяОрганизация Тогда
			МассивОбъектовРасшифровки.Добавить(ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ОбъектРасчетов));
		КонецЕсли;
		
	КонецЦикла;
	
	// Удаление лишних элементов справочника.
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаСторон.Организация КАК Организация,
	|	ТаблицаСторон.Контрагент  КАК Контрагент,
	|	ТаблицаСторон.Партнер     КАК Партнер,
	|	ТаблицаСторон.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ТаблицаСторон.ТипРасчетов КАК ТипРасчетов
	|ПОМЕСТИТЬ ТаблицаСторон
	|ИЗ &ТаблицаСторон КАК ТаблицаСторон
	|;
	|ВЫБРАТЬ
	|	ОбъектыРасчетов.Ссылка КАК Ссылка,
	|	ОбъектыРасчетов.ТолькоОстатки КАК ТолькоОстатки
	|ИЗ
	|	Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСторон КАК ТаблицаСторон
	|			ПО ТаблицаСторон.Организация = ОбъектыРасчетов.Организация
	|				И ТаблицаСторон.ТипРасчетов = ОбъектыРасчетов.ТипРасчетов
	|				И ТаблицаСторон.Контрагент = ОбъектыРасчетов.Контрагент
	|				И ТаблицаСторон.Партнер = ОбъектыРасчетов.Партнер
	|				И ТаблицаСторон.ВалютаВзаиморасчетов = ОбъектыРасчетов.ВалютаВзаиморасчетов
	|				И НЕ ОбъектыРасчетов.ТолькоОстатки
	|ГДЕ
	|	ОбъектыРасчетов.Объект = &Ссылка
	|	И ТаблицаСторон.ТипРасчетов ЕСТЬ NULL
	|	И ОбъектыРасчетов.Ссылка НЕ В (&МассивОбъектовРасшифровки)");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ТаблицаСторон", ТаблицаСторон);
	Запрос.УстановитьПараметр("МассивОбъектовРасшифровки", МассивОбъектовРасшифровки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.ОбъектыРасчетов");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
		Блокировка.Заблокировать();
		
		ПроверитьУдалитьОбъектРасчетов(Выборка.Ссылка, Отказ, НЕ Выборка.ТолькоОстатки);
	КонецЦикла;
	
	//Заполнение объектов расчетов в Объект
	Если НЕ Отказ И РежимЗаписи <> РежимЗаписиДокумента.ОтменаПроведения Тогда
		ЗаполнитьОбъектРасчетов(Объект, МассивСтруктур, РежимЗаписи);
	КонецЕсли;
	
КонецПроцедуры

// Создает, перезаполняет при необходимости и возвращает ссылку на объект расчетов по параметрам механизма взаиморасчетов.
// Если в рамках одной структуры было создано несколько элементов объектов расчетов то возвращает первый.
// 
// Параметры:
// 	Объект - ДокументОбъект, СправочникОбъект - Объект, по ссылке на который проверяется объект расчетов.
// 	СтруктураПараметров - Структура - Текущий набор параметров. см. ВзаиморасчетыСервер.ПараметрыМеханизма.
// 	ВернутьВсеОбъекты - Булево - Вернуть один объект расчетов или таблицу всех объектов расчетов.
// 	РежимЗаписи - РежимЗаписиДокумента - Режим записи, если метод вызывается из события ПередЗаписью.
// 	
// Возвращаемое значение:
// 	СправочникСсылка.ОбъектыРасчетов - Ссылка на объект расчетов.
//
Функция ПроверитьЗаполнитьОбъектРасчетовПоСтруктуре(Объект, СтруктураПараметров, ВернутьВсеОбъекты = Ложь, РежимЗаписи = Неопределено) Экспорт
	
	Если СтруктураПараметров.Свойство("СсылкаНового") Тогда
		Ссылка = СтруктураПараметров.СсылкаНового;
	Иначе
		Ссылка = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Ссылка);
	КонецЕсли;
	
	ОрганизацияВСтроках = СтруктураПараметров.ОрганизацияВСтроках И ТипЗнч(СтруктураПараметров.Организация) = Тип("Строка");
	КонтрагентВСтроках  = СтруктураПараметров.КонтрагентВСтроках И ТипЗнч(СтруктураПараметров.Контрагент) = Тип("Строка");
	
	ТаблицаСторон = ТаблицаСторон(Объект, СтруктураПараметров);
	ТаблицаСторон.Колонки.Добавить("ОбъектРасчетов", Новый ОписаниеТипов("СправочникСсылка.ОбъектыРасчетов"));
	
	СуммаВзаиморасчетов = 0;
	Если СтруктураПараметров.ЭтоПлатежИлиПрочийДокумент  И ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа) Тогда
		ТабличнаяЧасть = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа); // ТабличнаяЧасть
		Для Каждого Стр Из ТабличнаяЧасть Цикл
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Стр, "СуммаВзаиморасчетов") Тогда
				СуммаВзаиморасчетов = СуммаВзаиморасчетов + Стр.СуммаВзаиморасчетов;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Стр Из ТаблицаСторон Цикл
		
		ПараметрыОбъектаРасчетов = РеквизитыОбъектаРасчетовПоСтруктуре(Объект, Ссылка, СтруктураПараметров, РежимЗаписи);
		
		//Ключевые реквизиты.
		ПараметрыОбъектаРасчетов.Организация = Стр.Организация;
		ПараметрыОбъектаРасчетов.Контрагент = Стр.Контрагент;
		ПараметрыОбъектаРасчетов.Партнер =  Стр.Партнер;
		
		Если ЗначениеЗаполнено(Стр.ВалютаВзаиморасчетов) ИЛИ ТипЗнч(ПараметрыОбъектаРасчетов.ВалютаВзаиморасчетов) = Тип("Массив") Тогда
			ПараметрыОбъектаРасчетов.ВалютаВзаиморасчетов = Стр.ВалютаВзаиморасчетов;
		КонецЕсли;
		Если СуммаВзаиморасчетов > 0 Тогда
			ПараметрыОбъектаРасчетов.СуммаВзаиморасчетов = СуммаВзаиморасчетов;
		КонецЕсли;
		
		ДополнительныеРеквизиты = ?(Объект.Метаданные().ТабличныеЧасти.Найти("ДополнительныеРеквизиты") <> Неопределено,
									Объект.ДополнительныеРеквизиты.Выгрузить(),
									Неопределено);
		
		ОбновлениеИБ = СтруктураПараметров.Свойство("ТолькоОстатки") И СтруктураПараметров.ТолькоОстатки;
		
		ЕстьИзмененияВОбъектеРасчетов = Ложь;
		Если ЗначениеЗаполнено(ПараметрыОбъектаРасчетов.Организация)
			И ЗначениеЗаполнено(ПараметрыОбъектаРасчетов.Контрагент)
			И ЗначениеЗаполнено(ПараметрыОбъектаРасчетов.Партнер)
			И ЗначениеЗаполнено(ПараметрыОбъектаРасчетов.ВалютаВзаиморасчетов) Тогда
			Стр.ОбъектРасчетов = ПроверитьСоздатьОбъектРасчетов(ПараметрыОбъектаРасчетов, ДополнительныеРеквизиты, ОбновлениеИБ, ЕстьИзмененияВОбъектеРасчетов);
		КонецЕсли;
		Если ЕстьИзмененияВОбъектеРасчетов Тогда
			Объект.ДополнительныеСвойства.Вставить("ОповеститьОбИзмененииОбъектаРасчетов", Истина);
			Объект.ДополнительныеСвойства.Вставить("ИзмененныйОбъектРасчетов", Стр.ОбъектРасчетов);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВернутьВсеОбъекты Тогда
		Если ОрганизацияВСтроках И КонтрагентВСтроках Тогда
			ТаблицаСторон.Индексы.Добавить("Организация, Контрагент");
		ИначеЕсли ОрганизацияВСтроках Тогда
			ТаблицаСторон.Индексы.Добавить("Организация");
		Иначе
			ТаблицаСторон.Индексы.Добавить("Контрагент");
		КонецЕсли;
		
		Возврат ТаблицаСторон;
	ИначеЕсли ТаблицаСторон.Количество() > 0 Тогда
		Возврат ТаблицаСторон[0].ОбъектРасчетов;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Создает, перезаполняет при необходимости и возвращает ссылку на объект расчетов по параметрам механизма взаиморасчетов.
// Если в рамках одной структуры было создано несколько элементов объектов расчетов то возвращает первый.
// 
// Параметры:
// 	Объект - ДокументОбъект, СправочникОбъект - Объект, по ссылке на который проверяется объект расчетов.
// 	Ссылка - ДокументСсылка, СправочникСсылка - Ссылка на объект.
// 	СтруктураПараметров - Структура - Текущий набор параметров. см. ВзаиморасчетыСервер.ПараметрыМеханизма.
// 	РежимЗаписи - РежимЗаписиДокумента - Режим записи, если метод вызывается из события ПередЗаписью.
// 	
// Возвращаемое значение:
// 	Структура - Структура параметров, где:
// 		* Объект - ОпределяемыйТип.ОбъектРасчетов.
// 		* ТипРасчетов - ПеречислениеСсылка.ТипыРасчетовСПартнерами.
// 		* Организация - СправочникСсылка.Организации.
// 		* Контрагент - СправочникСсылка.Контрагенты.
// 		* Партнер - СправочникСсылка.Партнеры.
// 		* Наименование - Строка.
// 		* ТипСсылки - см. ОбщегоНазначения.ИдентификаторОбъектаМетаданных
// 		* ПометкаУдаления - Булево.
// 		* ГруппаФинансовогоУчета - СправочникСсылка.ГруппыФинансовогоУчетаРасчетов.
// 		* Менеджер - СправочникСсылка.Пользователи.
// 		* Подразделение - СправочникСсылка.СтруктураПредприятия. 
// 		* ИдентификаторПлатежа - Строка. 
// 		* НалогообложениеНДС - ПеречислениеСсылка.ТипыНалогообложенияНДС. 
// 		* НомерВходящегоДокумента - Строка.
// 		* ДатаВходящегоДокумента - Дата.
// 		* НаименованиеПервичногоДокумента - Строка
// 		* Сумма - Число.
// 		* Валюта - СправочникСсылка.Валюты. 
// 		* ВалютаВзаиморасчетов - СправочникСсылка.Валюты. 
// 		* СуммаВзаиморасчетов - Число. 
// 		* Договор - СправочникСсылка.ДоговорыКонтрагентов
// 		          - СправочникСсылка.ДоговорыМеждуОрганизациями.
// 		* НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности. 
// 		* ОплатаВВалюте - Булево.
// 		* Номер - Строка.
// 		* Дата-  Дата.
// 		* Комментарий - Строка. 
// 		* БанковскийСчетОрганизации - СправочникСсылка.БанковскиеСчетаОрганизаций. 
// 		* БанковскийСчетКонтрагента - СправочникСсылка.БанковскиеСчетаКонтрагентов.
// 		* Касса - СправочникСсылка.Кассы. 
// 		* ФормаОплаты - ПеречислениеСсылка.ФормыОплаты.
// 		* ТолькоОстатки - Булево.
// 	
//
Функция РеквизитыОбъектаРасчетовПоСтруктуре(Объект, Ссылка, СтруктураПараметров, РежимЗаписи) Экспорт
	
	ЭтоДокумент = Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Ссылка));
	
	ПараметрыОбъектаРасчетов = Новый Структура;
	
	//Ключевые реквизиты.
	Если СтруктураПараметров.Свойство("СсылкаНового") Тогда
		ПараметрыОбъектаРасчетов.Вставить("Объект", СтруктураПараметров.СсылкаНового);
	Иначе
		ПараметрыОбъектаРасчетов.Вставить("Объект", Ссылка);
	КонецЕсли;
	ПараметрыОбъектаРасчетов.Вставить("ТипРасчетов", СтруктураПараметров.ТипРасчетов);
	ПараметрыОбъектаРасчетов.Вставить("Организация", ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Организация, ,Справочники.Организации.ПустаяСсылка()));
	ПараметрыОбъектаРасчетов.Вставить("Контрагент",  ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Контрагент, ,Справочники.Контрагенты.ПустаяСсылка()));
	ПараметрыОбъектаРасчетов.Вставить("Партнер",     ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Партнер, ,Справочники.Партнеры.ПустаяСсылка()));
	
	//Служебные реквизиты.
	ПараметрыОбъектаРасчетов.Вставить("Наименование", ?(Строка(Объект)="",НСтр("ru = '<Пустой>'"),Строка(Объект)));
	
	ПараметрыОбъектаРасчетов.Вставить("ТипСсылки", ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Ссылка)));
	ПометкаУдаления = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект,"Объект.ПометкаУдаления");
	ПараметрыОбъектаРасчетов.Вставить("ПометкаУдаления", ПометкаУдаления);
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Состояние = 1;
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		Состояние = ?(ПараметрыОбъектаРасчетов.ПометкаУдаления,2,0);
	Иначе
		Если ЭтоДокумент Тогда
			Состояние = ?(ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект,"Объект.Проведен"),1,?(ПараметрыОбъектаРасчетов.ПометкаУдаления,2,0));
		Иначе
			Состояние = ?(ПараметрыОбъектаРасчетов.ПометкаУдаления,2,0);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыОбъектаРасчетов.Вставить("Состояние", Состояние);
	
	Если СтруктураПараметров.ЭтоСправочник Тогда
		ТипОбъектаРасчетов = Перечисления.ТипыОбъектовРасчетов.Договор;
	ИначеЕсли СтруктураПараметров.ЭтоЗаказ Тогда
		ТипОбъектаРасчетов = Перечисления.ТипыОбъектовРасчетов.Заказ;
	ИначеЕсли СтруктураПараметров.ЭтоПродажаЗакупка Тогда
		ТипОбъектаРасчетов = Перечисления.ТипыОбъектовРасчетов.Накладная;
	Иначе
		ТипОбъектаРасчетов = Перечисления.ТипыОбъектовРасчетов.ПлатежВозврат;
	КонецЕсли;
	ПараметрыОбъектаРасчетов.Вставить("ТипОбъектаРасчетов", ТипОбъектаРасчетов);
	
	ВалютаВзаиморасчетов = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ВалютаВзаиморасчетов,,Справочники.Валюты.ПустаяСсылка());
	
	СуммыДокумента = ВзаиморасчетыСервер.СуммыДокумента(Объект, СтруктураПараметров);
	СуммаДокумента = СуммыДокумента.СуммаДокумента;
	СуммаВзаиморасчетов = СуммыДокумента.СуммаВзаиморасчетов;
	
	ПараметрыОбъектаРасчетов.Вставить("ГруппаФинансовогоУчета", 
		ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ГруппаФинансовогоУчета,,Справочники.ГруппыФинансовогоУчетаРасчетов.ПустаяСсылка()));
	ПараметрыОбъектаРасчетов.Вставить("Менеджер",
		ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект,СтруктураПараметров.Менеджер,, Справочники.Пользователи.ПустаяСсылка()));
	ПараметрыОбъектаРасчетов.Вставить("Подразделение", 
		ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект,СтруктураПараметров.Подразделение,,Справочники.СтруктураПредприятия.ПустаяСсылка()));
	ПараметрыОбъектаРасчетов.Вставить("ИдентификаторПлатежа", 
		ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект,СтруктураПараметров.ИдентификаторПлатежа,,""));
	ПараметрыОбъектаРасчетов.Вставить("НалогообложениеНДС", 
		ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект,СтруктураПараметров.НалогообложениеНДС,,Перечисления.ТипыНалогообложенияНДС.ПустаяСсылка()));
	ПараметрыОбъектаРасчетов.Вставить("НомерВходящегоДокумента",
		ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект,СтруктураПараметров.НомерВходящегоДокумента,,""));
	ПараметрыОбъектаРасчетов.Вставить("ДатаВходящегоДокумента",
		ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект,СтруктураПараметров.ДатаВходящегоДокумента,,Дата(1,1,1)));
	ПараметрыОбъектаРасчетов.Вставить("НаименованиеПервичногоДокумента",
		ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект,СтруктураПараметров.НаименованиеПервичногоДокумента,,""));
	ПараметрыОбъектаРасчетов.Вставить("Сумма",
		СуммаДокумента);
	ПараметрыОбъектаРасчетов.Вставить("Валюта", 
		ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ВалютаДокумента,,Справочники.Валюты.ПустаяСсылка()));
	ПараметрыОбъектаРасчетов.Вставить("ВалютаВзаиморасчетов", 
		?(ЗначениеЗаполнено(ВалютаВзаиморасчетов),ВалютаВзаиморасчетов,ПараметрыОбъектаРасчетов.Валюта));
	ПараметрыОбъектаРасчетов.Вставить("СуммаВзаиморасчетов", 
		СуммаВзаиморасчетов);
	ПараметрыОбъектаРасчетов.Вставить("Договор", 
		?(СтруктураПараметров.ЭтоСправочник 
			И (ТипЗнч(Ссылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
				ИЛИ ТипЗнч(Ссылка) = Тип("СправочникСсылка.ДоговорыМеждуОрганизациями")), 
			Ссылка, 
			ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Договор,, Неопределено)));
	ПараметрыОбъектаРасчетов.Вставить("НаправлениеДеятельности", 
		ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.НаправлениеДеятельности,, Справочники.НаправленияДеятельности.ПустаяСсылка()));
	ПараметрыОбъектаРасчетов.Вставить("ОплатаВВалюте", 
		ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ОплатаВВалюте,, Ложь));
	ПараметрыОбъектаРасчетов.Вставить("Номер", 
		ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Номер, ,""));
	ПараметрыОбъектаРасчетов.Вставить("Дата", 
		ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Дата, ,Дата(1,1,1)));
	ПараметрыОбъектаРасчетов.Вставить("Комментарий", 
		ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, "Объект.Комментарий", ,""));
	ПараметрыОбъектаРасчетов.Вставить("БанковскийСчетОрганизации", 
		ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.БанковскийСчетОрганизации,,Справочники.БанковскиеСчетаОрганизаций));
	ПараметрыОбъектаРасчетов.Вставить("БанковскийСчетКонтрагента", 
		ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.БанковскийСчетКонтрагента,,Справочники.БанковскиеСчетаКонтрагентов.ПустаяСсылка()));
	ПараметрыОбъектаРасчетов.Вставить("Касса", 
		ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Касса,,Справочники.Кассы.ПустаяСсылка()));
	ПараметрыОбъектаРасчетов.Вставить("ФормаОплаты", 
		ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ФормаОплаты,, Перечисления.ФормыОплаты.ПустаяСсылка()));
		
	ПустоеСоглашение = ?(СтруктураПараметров.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом, 
		Справочники.СоглашенияСКлиентами.ПустаяСсылка(),
		Справочники.СоглашенияСПоставщиками.ПустаяСсылка());
	ПараметрыОбъектаРасчетов.Вставить("Соглашение", 
		ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Соглашение,,ПустоеСоглашение));
		
	ПараметрыОбъектаРасчетов.Вставить("ТолькоОстатки", СтруктураПараметров.ТолькоОстатки);
	
	Если СтруктураПараметров.ОперацияССамозанятым = Ложь
		И ТипЗнч(ПараметрыОбъектаРасчетов.Объект) = Тип("ДокументСсылка.ПервичныйДокумент")
		И ЗначениеЗаполнено(ПараметрыОбъектаРасчетов.Договор)
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПараметрыОбъектаРасчетов.Договор, "ДоговорССамозанятым") Тогда
		СтруктураПараметров.ОперацияССамозанятым = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыОбъектаРасчетов.Договор, "ДоговорССамозанятым");
	КонецЕсли;
	
	ПараметрыОбъектаРасчетов.Вставить("ОперацияССамозанятым",
		ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ОперацияССамозанятым, , Ложь));
	
	Если ТипОбъектаРасчетов = Перечисления.ТипыОбъектовРасчетов.Договор
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект,"ПорядокРасчетов")
			И Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамНакладным
		ИЛИ ТипОбъектаРасчетов = Перечисления.ТипыОбъектовРасчетов.Заказ
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект,"ПорядокРасчетов")
			И Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным Тогда
		КонтролироватьОстаткиАвансов = Истина;
	Иначе
		КонтролироватьОстаткиАвансов = Ложь;
	КонецЕсли;
	
	ПараметрыОбъектаРасчетов.Вставить("КонтролироватьОстаткиАвансов", КонтролироватьОстаткиАвансов);
	
	Возврат ПараметрыОбъектаРасчетов;
	
КонецФункции

#КонецОбласти

#Область Общий

// Возвращает ссылку на уже имеющийся объект расчетов.
// Платежи с разными партнерами и контрагентами не поддерживаются.
// 
// Параметры: 
// 	Ссылка - ДокументСсылка, СправочникСсылка - Ссылка на исходный объект.
// 	Организация - СправочникСсылка.Организации - Организация.
// 	ТипРасчетов - ПеречислениеСсылка.ТипыРасчетовСПартнерами - Тип расчетов объекта расчетов.
// 	ДополнительныеКритерииПоиска - см. ОбъектыРасчетовСервер.ДополнительныеКритерииПоиска.
// 
// Возвращаемое значение: 
// 	СправочникСсылка.ОбъектыРасчетов - Ссылка на объект расчетов.
//
Функция ПолучитьОбъектРасчетовПоСсылке(Ссылка, Организация = Неопределено, ТипРасчетов = Неопределено, ДополнительныеКритерииПоиска = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Справочники.ОбъектыРасчетов.ПустаяСсылка();
	КонецЕсли;
	
	Массив = Новый Массив;
	Массив.Добавить(Ссылка);
	
	Если ДополнительныеКритерииПоиска = Неопределено Тогда
		ДополнительныеКритерииПоиска = ДополнительныеКритерииПоиска();
		ДополнительныеКритерииПоиска.ВернутьПервый = Истина;
	КонецЕсли;
	
	Возврат ПолучитьОбъектыРасчетовПоСсылкам(Массив, Организация, ТипРасчетов, ДополнительныеКритерииПоиска)[Ссылка];
	
КонецФункции

// Возвращает соответствие ссылок имеющимся объектам расчетов.
// 
// Параметры: 
// 	МассивСсылок - Массив из ДокументСсылка, СправочникСсылка - Массив ссылок на исходные объекты.
// 	Организация - СправочникСсылка.Организации - Кем является организация.
// 	ТипРасчетов - ПеречислениеСсылка.ТипыРасчетовСПартнерами - Тип расчетов объектов расчетов.
// 	ДополнительныеКритерииПоиска - см. ОбъектыРасчетовСервер.ДополнительныеКритерииПоиска.
// 
// Возвращаемое значение: 
// 	Соответствие из КлючИЗначение:
// 		* Ключ - ДокументСсылка, СправочникСсылка - исходная ссылка.
// 		* Значение - СправочникСсылка.ОбъектыРасчетов - ссылка на объект расчетов.
//
Функция ПолучитьОбъектыРасчетовПоСсылкам(МассивСсылок, Организация = Неопределено, ТипРасчетов = Неопределено, ДополнительныеКритерииПоиска = Неопределено) Экспорт
	
	Если ДополнительныеКритерииПоиска = Неопределено Тогда
		ДополнительныеКритерииПоиска = ДополнительныеКритерииПоиска();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ОбъектыРасчетов.Объект КАК Объект,
	|	ОбъектыРасчетов.Ссылка КАК Ссылка,
	|	ОбъектыРасчетов.ТолькоОстатки КАК ТолькоОстатки,
	|	ОбъектыРасчетов.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК Договоры
	|	ПО ОбъектыРасчетов.Объект = Договоры.Ссылка
	|ГДЕ
	|	ОбъектыРасчетов.Объект В (&МассивСсылок)
	|	И (ОбъектыРасчетов.Организация = &Организация ИЛИ &ЛюбаяОрганизация)
	|	И (ОбъектыРасчетов.ТипРасчетов = &ТипРасчетов ИЛИ &ЛюбойТип)
	|	И (ВЫБОР КОГДА &ЭтоДочернийПартнер
	|			И ТИПЗНАЧЕНИЯ(ОбъектыРасчетов.Объект) = ТИП(Справочник.ДоговорыКонтрагентов) И ЕСТЬNULL(Договоры.РазрешенаРаботаСДочернимиПартнерами, ЛОЖЬ)
	|		ТОГДА
	|			Договоры.Партнер
	|		ИНАЧЕ
	|			&Партнер
	|	КОНЕЦ = ОбъектыРасчетов.Партнер ИЛИ &ЛюбойПартнер)
	|	И (ОбъектыРасчетов.Контрагент = &Контрагент ИЛИ &ЛюбойКонтрагент)
	|	И &ВалютаВзаиморасчетов
	|	И &УсловиеТолькоОстатки";
	
	Запрос.УстановитьПараметр("МассивСсылок",     МассивСсылок);
	Запрос.УстановитьПараметр("Организация",      Организация);
	Запрос.УстановитьПараметр("ТипРасчетов",      ТипРасчетов);
	Запрос.УстановитьПараметр("Партнер",          ДополнительныеКритерииПоиска.Партнер);
	Запрос.УстановитьПараметр("ЭтоДочернийПартнер", Ложь);
	Если ЗначениеЗаполнено(ДополнительныеКритерииПоиска.Партнер) Тогда
		Запрос.УстановитьПараметр("ЭтоДочернийПартнер",  
			ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДополнительныеКритерииПоиска.Партнер, "Родитель")));
	КонецЕсли;
	Запрос.УстановитьПараметр("Контрагент",       ДополнительныеКритерииПоиска.Контрагент);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ДополнительныеКритерииПоиска.ВалютаВзаиморасчетов);
	Запрос.УстановитьПараметр("ОбновлениеИБ",     ДополнительныеКритерииПоиска.ОбновлениеИБ);
	Запрос.УстановитьПараметр("ЛюбаяОрганизация", ?(Организация = Неопределено, Истина, Ложь));
	Запрос.УстановитьПараметр("ЛюбойТип",         ?(ТипРасчетов = Неопределено, Истина, Ложь));
	Запрос.УстановитьПараметр("ЛюбойПартнер",     ?(ДополнительныеКритерииПоиска.Партнер     = Неопределено, Истина, Ложь));
	Запрос.УстановитьПараметр("ЛюбойКонтрагент",  ?(ДополнительныеКритерииПоиска.Контрагент  = Неопределено, Истина, Ложь));
	
	Если ДополнительныеКритерииПоиска.Свойство("ТолькоОстатки") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&УсловиеТолькоОстатки", "ОбъектыРасчетов.ТолькоОстатки = &ТолькоОстатки");
		Запрос.УстановитьПараметр("ТолькоОстатки", ДополнительныеКритерииПоиска.ТолькоОстатки);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&УсловиеТолькоОстатки", "ИСТИНА");
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ВалютаВзаиморасчетов", 
		?(ДополнительныеКритерииПоиска.ОбновлениеИБ 
			И ЗначениеЗаполнено(ДополнительныеКритерииПоиска.ВалютаВзаиморасчетов), 
			"ОбъектыРасчетов.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов", 
			"ИСТИНА"));
	
	УстановитьПривилегированныйРежим(Истина);
	ОбъектыРасчетов = Запрос.Выполнить().Выгрузить();
	ОбъектыРасчетов.Индексы.Добавить("Объект");
	
	Результат = Новый Соответствие;
	Для Каждого Ссылка Из МассивСсылок Цикл
		СтрокиОбъектов = ОбъектыРасчетов.Скопировать(Новый Структура("Объект", Ссылка));
		Если СтрокиОбъектов.Количество() > 1 Тогда
			Если ДополнительныеКритерииПоиска.ВернутьПервый Тогда
				СтрокиОбъектов.Сортировать("ПометкаУдаления ВОЗР, ТолькоОстатки ВОЗР");
				Результат.Вставить(Ссылка, СтрокиОбъектов[0].Ссылка);
			Иначе
				ВызватьИсключение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'По %1 найдено несколько объектов расчетов.'"),
					Ссылка));
			КонецЕсли;
		ИначеЕсли СтрокиОбъектов.Количество() = 1 Тогда
			Результат.Вставить(Ссылка, СтрокиОбъектов[0].Ссылка);
		Иначе
			Результат.Вставить(Ссылка, Справочники.ОбъектыРасчетов.ПустаяСсылка());
		КонецЕсли;
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

// Возвращает все объекты расчетов по ссылке.
// 
// Параметры:
// 	Ссылка - ДокументСсылка - объект по которому нужно найти Объекты расчетов.
// Возвращаемое значение:
// 	Массив из СправочникСсылка.ОбъектыРасчетов - Массив объектов расчетов.
//
Функция ВсеОбъектыРасчетовПоСсылке(Ссылка) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ОбъектыРасчетов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|ГДЕ 
	|	НЕ ТолькоОстатки
	|	И НЕ ОбъектыРасчетов.ПометкаУдаления
	|	И ОбъектыРасчетов.Объект = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	ОбъектыРасчетов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Возврат ОбъектыРасчетов;
КонецФункции

// Возвращает структуру дополнительных параметров по для поиска объектов расчета по умолчанию
// 
// Возвращаемое значение:
// 	Структура - Описание:
// 		* ОбновлениеИБ - Булево - Признак, указывающий что следует производить поиск и среди некорректных объектов расчетов
// 		* ВернутьПервый - Булево - Признак, указывающий что следует вернуть первый найденный объект расчетов
// 		* Партнер - Неопределено, СправочникСсылка.Партнеры - Значение поиска по полю Партнер
// 		* ВалютаВзаиморасчетов - Неопределено, СправочникСсылка.Валюты - Значение поиска по полю Партнер
// 		* Контрагент - Неопределено, СправочникСсылка.Контрагенты - Значение поиска по полю Контрагент
Функция ДополнительныеКритерииПоиска() Экспорт
	
	КритерииПоискаОбъектаРасчетов = Новый Структура();
	КритерииПоискаОбъектаРасчетов.Вставить("Контрагент", Неопределено);
	КритерииПоискаОбъектаРасчетов.Вставить("Партнер", Неопределено);
	КритерииПоискаОбъектаРасчетов.Вставить("ВалютаВзаиморасчетов", Неопределено);
	КритерииПоискаОбъектаРасчетов.Вставить("ОбновлениеИБ", Ложь);
	КритерииПоискаОбъектаРасчетов.Вставить("ВернутьПервый", Ложь);
	
	Возврат КритерииПоискаОбъектаРасчетов;
	
КонецФункции

// Создает, перезаполняет при необходимости и возвращает ссылку на объект расчетов по переданной структуре реквизитов.
// 
// Параметры:
// 	РеквизитыОбъекта - Структура - Текущий набор реквизитов объекта расчетов.
// 	ДопРеквизитыИсточника - ТаблицаЗначений - Таблица дополнительных свойств и их значений объекта-источника.
// 	ОбновлениеИБ - Булево - Признак выполнения обновления информационной базы.
// 	ЕстьИзменения - Булево - Переменная передаваемая в процедуру для отметки о наличии изменений в объекте расчетов
// 
// Возвращаемое значение:
// 	СправочникСсылка.ОбъектыРасчетов - Ссылка на объект расчетов.
//
Функция ПроверитьСоздатьОбъектРасчетов(РеквизитыОбъекта, ДопРеквизитыИсточника = Неопределено, ОбновлениеИБ = Ложь, ЕстьИзменения = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(РеквизитыОбъекта.Объект) Тогда
		ВызватьИсключение(НСтр("ru='Невозможно создать объект расчетов. Не указаны обязательные параметры.'"))
	КонецЕсли;
	
	Если ТипЗнч(РеквизитыОбъекта.Контрагент) = Тип("СправочникСсылка.Организации")
		И (РеквизитыОбъекта.Договор = Неопределено
			ИЛИ ТипЗнч(РеквизитыОбъекта.Договор) <> Тип("СправочникСсылка.ДоговорыМеждуОрганизациями")) Тогда
		РеквизитыОбъекта.Договор = Справочники.ДоговорыМеждуОрганизациями.ПустаяСсылка();
	ИначеЕсли ТипЗнч(РеквизитыОбъекта.Контрагент) <> Тип("СправочникСсылка.Организации")
		И (РеквизитыОбъекта.Договор = Неопределено
			ИЛИ ТипЗнч(РеквизитыОбъекта.Договор) <> Тип("СправочникСсылка.ДоговорыКонтрагентов")) Тогда
		РеквизитыОбъекта.Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	РеквизитыСправочника = РеквизитыСправочникаОбъектыРасчетов();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ *
	|ИЗ
	|	Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|ГДЕ
	|	ОбъектыРасчетов.Объект = &Объект
	|	И ОбъектыРасчетов.Организация = &Организация
	|	И ОбъектыРасчетов.Контрагент = &Контрагент
	|	И ОбъектыРасчетов.Партнер = &Партнер
	|	И ОбъектыРасчетов.ТипРасчетов = &ТипРасчетов
	|	И &ВалютаВзаиморасчетов";
	Запрос.УстановитьПараметр("Объект", РеквизитыОбъекта.Объект);
	Запрос.УстановитьПараметр("Организация", РеквизитыОбъекта.Организация);
	Запрос.УстановитьПараметр("Контрагент", РеквизитыОбъекта.Контрагент);
	Запрос.УстановитьПараметр("Партнер", РеквизитыОбъекта.Партнер);
	Запрос.УстановитьПараметр("ТипРасчетов", РеквизитыОбъекта.ТипРасчетов);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ВалютаВзаиморасчетов", 
		?(ЗначениеЗаполнено(РеквизитыОбъекта.ВалютаВзаиморасчетов), "ОбъектыРасчетов.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов" , "ИСТИНА"));
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", РеквизитыОбъекта.ВалютаВзаиморасчетов);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ТребуетсяПерезаполнение = Ложь;
		
		Для Каждого Реквизит Из РеквизитыСправочника Цикл
			Если РеквизитыОбъекта.Свойство(Реквизит) И Выборка[Реквизит] <> РеквизитыОбъекта[Реквизит] Тогда
				ТребуетсяПерезаполнение = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если ДопРеквизитыИсточника <> Неопределено Тогда
			ДопРеквизитыОбъектаРасчетов = Выборка.ДополнительныеРеквизиты.Выгрузить(); // ТаблицаЗначений -
			ДопРеквизитыОбъектаРасчетов.Индексы.Добавить("Свойство");
			Для Каждого Реквизит Из ДопРеквизитыИсточника Цикл
				Если УправлениеСвойствами.ПроверитьСвойствоУОбъекта(Выборка.Ссылка,Реквизит.Свойство) Тогда
					СтрокаДопРеквизита = ДопРеквизитыОбъектаРасчетов.Найти(Реквизит.Свойство);
					Если СтрокаДопРеквизита = Неопределено
						ИЛИ СтрокаДопРеквизита.Значение <> Реквизит.Значение Тогда
						ТребуетсяПерезаполнение = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если Выборка.ПометкаУдаления <> РеквизитыОбъекта.ПометкаУдаления Тогда
			ТребуетсяПерезаполнение = Истина;
		КонецЕсли;
		
		Если ТребуетсяПерезаполнение Тогда
			УстановитьПривилегированныйРежим(Истина);
			СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект(); // СправочникОбъект -
			ЗаполнитьЗначенияСвойств(СправочникОбъект, РеквизитыОбъекта);
			
			Если ДопРеквизитыИсточника <> Неопределено Тогда
				Для Каждого Реквизит Из ДопРеквизитыИсточника Цикл
					Если УправлениеСвойствами.ПроверитьСвойствоУОбъекта(Выборка.Ссылка,Реквизит.Свойство) Тогда
						СтрокаДопРеквизита = ДопРеквизитыОбъектаРасчетов.Найти(Реквизит.Свойство);
						Если СтрокаДопРеквизита = Неопределено Тогда
							СтрокаДопРеквизита = ДопРеквизитыОбъектаРасчетов.Добавить();
						КонецЕсли;
						СтрокаДопРеквизита.Свойство = Реквизит.Свойство;
						СтрокаДопРеквизита.Значение = Реквизит.Значение;
						СтрокаДопРеквизита.ТекстоваяСтрока = Реквизит.ТекстоваяСтрока;
					КонецЕсли;
				КонецЦикла;
				СправочникОбъект.ДополнительныеРеквизиты.Загрузить(ДопРеквизитыОбъектаРасчетов);
			КонецЕсли;
			
			СправочникОбъект.Записать();
			УстановитьПривилегированныйРежим(Ложь);
			ЕстьИзменения = Истина;
			Возврат СправочникОбъект.Ссылка;
		КонецЕсли;
		
		Возврат Выборка.Ссылка;
		
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		СправочникОбъект = Справочники.ОбъектыРасчетов.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(СправочникОбъект, РеквизитыОбъекта);
		СправочникОбъект.УникальныйИдентификатор = Новый УникальныйИдентификатор();
		
		Если ДопРеквизитыИсточника <> Неопределено Тогда
			Для Каждого Реквизит Из ДопРеквизитыИсточника Цикл
				Если УправлениеСвойствами.ПроверитьСвойствоУОбъекта(СправочникОбъект.Ссылка,Реквизит.Свойство) Тогда
					СтрокаДопРеквизита = СправочникОбъект.ДополнительныеРеквизиты.Добавить();
					СтрокаДопРеквизита.Свойство = Реквизит.Свойство;
					СтрокаДопРеквизита.Значение = Реквизит.Значение;
					СтрокаДопРеквизита.ТекстоваяСтрока = Реквизит.ТекстоваяСтрока;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		СправочникОбъект.Записать();
		УстановитьПривилегированныйРежим(Ложь);
		Возврат СправочникОбъект.Ссылка;
	КонецЕсли;
	
КонецФункции

// Проверяет наличие ссылок в объектах данных на переданный объект расчетов. Если ссылок нет, то удаляет объект непосредственно.
//
// Параметры:
// 	ОбъектРасчетов - СправочникСсылка.ОбъектыРасчетов - Ссылка на объект расчетов.
// 	Отказ - Булево - Флаг отказа из объекта.
// 	ВызыватьИсключение - Булево - Вызывать ли исключение если не удается удалить объект расчетов.
Процедура ПроверитьУдалитьОбъектРасчетов(ОбъектРасчетов, Отказ, ВызыватьИсключение) Экспорт
	
	Если Не ЗначениеЗаполнено(ОбъектРасчетов)  Тогда
		ВызватьИсключение(НСтр("ru='Невозможно создать объект расчетов. Не указаны обязательные параметры.'"))
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 100
	|	ОбъектРасчетов.Ссылка КАК Ссылка
	|ИЗ
	|	КритерийОтбора.ОбъектРасчетов(&ОбъектРасчетов) КАК ОбъектРасчетов
	|ГДЕ
	|	ОбъектРасчетов.Ссылка <> &Ссылка
	|
	|;
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 100
	|	Расчеты.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК Расчеты
	|ГДЕ
	|	Расчеты.ОбъектРасчетов = &ОбъектРасчетов
	|	И Расчеты.Регистратор <> &Ссылка
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 100
	|	Расчеты.ДокументРегистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК Расчеты
	|ГДЕ
	|	Расчеты.ОбъектРасчетов = &ОбъектРасчетов
	|	И Расчеты.ДокументРегистратор <> &Ссылка
	|	И НЕ Расчеты.ДокументРегистратор ССЫЛКА Документ.РасчетКурсовыхРазниц
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 100
	|	Расчеты.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК Расчеты
	|ГДЕ
	|	Расчеты.ЗаказКлиента = &ОбъектРасчетов
	|	И Расчеты.Регистратор <> &Ссылка
	|	И НЕ Расчеты.Регистратор ССЫЛКА Документ.РасчетКурсовыхРазниц
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 100
	|	Расчеты.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
	|ГДЕ
	|	Расчеты.ОбъектРасчетов = &ОбъектРасчетов
	|	И Расчеты.Регистратор <> &Ссылка
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 100
	|	Расчеты.ДокументРегистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК Расчеты
	|ГДЕ
	|	Расчеты.ОбъектРасчетов = &ОбъектРасчетов
	|	И Расчеты.ДокументРегистратор <> &Ссылка
	|	И НЕ Расчеты.ДокументРегистратор ССЫЛКА Документ.РасчетКурсовыхРазниц
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 100
	|	Расчеты.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК Расчеты
	|ГДЕ
	|	Расчеты.ЗаказПоставщику = &ОбъектРасчетов
	|	И Расчеты.Регистратор <> &Ссылка
	|	И НЕ Расчеты.Регистратор ССЫЛКА Документ.РасчетКурсовыхРазниц
	|";
	Запрос.УстановитьПараметр("ОбъектРасчетов", ОбъектРасчетов);
	Запрос.УстановитьПараметр("Ссылка", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектРасчетов, "Объект"));
	
	УстановитьПривилегированныйРежим(Истина);
	Результаты = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ЕстьСсылки = НЕ Результаты[0].Пустой();
	ЕстьДвижения = НЕ Результаты[1].Пустой();
	
	Если НЕ ЕстьСсылки И НЕ ЕстьДвижения Тогда
		УстановитьПривилегированныйРежим(Истина);
		ОбъектРасчетовОбъект = ОбъектРасчетов.ПолучитьОбъект();
		Попытка
			ОбъектРасчетовОбъект.Заблокировать();
		Исключение
			ВызватьИсключение(НСтр("ru = 'Изменение запрещено, объект расчетов уже используется в других сеансах.'"));
		КонецПопытки;
		ОбъектРасчетовОбъект.Удалить();
		УстановитьПривилегированныйРежим(Ложь);
	ИначеЕсли ЕстьСсылки И НЕ ЕстьДвижения Тогда
		УстановитьПривилегированныйРежим(Истина);
		ОбъектРасчетовОбъект = ОбъектРасчетов.ПолучитьОбъект();
		Попытка
			ОбъектРасчетовОбъект.Заблокировать();
		Исключение
			ВызватьИсключение(НСтр("ru = 'Изменение запрещено, объект расчетов уже используется в других сеансах.'"));
		КонецПопытки;
		Если НЕ ОбъектРасчетовОбъект.ПометкаУдаления Тогда
			ОбъектРасчетовОбъект.УстановитьПометкуУдаления(Истина);
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
	ИначеЕсли ВызыватьИсключение И ЕстьДвижения Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Изменение запрещено, объект расчетов %1 используется в других объектах:'"),
				ОбъектРасчетов);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,,,Отказ);
		Выборка = Результаты[1].Выбрать();
		Пока Выборка.Следующий() Цикл
			Сообщение = Новый СообщениеПользователю();
			Сообщение.КлючДанных = Выборка.Ссылка;
			Сообщение.Текст = Символы.Таб + Выборка.Ссылка;
			Сообщение.Сообщить();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру с обязательными данными для генерации/поиска объекта расчетов
// 
// Возвращаемое значение:
// 	Структура - Описание:
// 		* Объект - ОпределяемыйТип.ОбъектРасчетов - Ссылка на источник объекта расчетов.
// 		* ТипРасчетов - ПеречислениеСсылка.ТипыРасчетовСПартнерами - В каких расчетах отражается, с клиентами или с поставщиками.
// 		* Организация - СправочникСсылка.Организации - Организация объекта расчетов.
// 		* Контрагент - Неопределено - Контрагент объекта расчетов.
// 		* Партнер - СправочникСсылка.Партнеры - Партнер объекта расчетов.
// 		* Договор - Неопределено - Договор объекта расчетов.
// 		* НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - Направление деятельности, по которому отражается объект расчетов.
Функция ПолучитьПараметрыОбъектаРасчетов() Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Объект");
	СтруктураПараметров.Вставить("ТипРасчетов");
	СтруктураПараметров.Вставить("Организация",             Справочники.Организации.ПустаяСсылка());
	СтруктураПараметров.Вставить("Валюта",                  Справочники.Валюты.ПустаяСсылка());
	СтруктураПараметров.Вставить("Партнер",                 Справочники.Партнеры.ПустаяСсылка());
	СтруктураПараметров.Вставить("Контрагент",              Неопределено);
	СтруктураПараметров.Вставить("Договор",                 Неопределено);
	СтруктураПараметров.Вставить("НаправлениеДеятельности", Справочники.НаправленияДеятельности.ПустаяСсылка());
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Дополняет массив ссылок ссылками на связанные объекты расчетов.
// 
// Параметры:
// 	МассивСсылок - Массив из ДокументСсылка, СправочникСсылка - Массив ссылок на документы и справочники.
//
Процедура ДополнитьСсылкамиНаОбъектыРасчетов(МассивСсылок) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбъектыРасчетов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|ГДЕ
	|	ОбъектыРасчетов.Объект В (&МассивСсылок)
	|	И НЕ ОбъектыРасчетов.ПометкаУдаления";
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	МассивОбъектовРасчетов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСсылок,МассивОбъектовРасчетов);
	
КонецПроцедуры

// Проверяет, что ссылка указанного объекта может содержаться в объекте расчетов
// 
// Параметры:
// 	Объект - СправочникОбъект, ДокументОбъект - проверяемый объект.
// 	СтруктураПараметров - Структура - Текущий набор параметров. см. ВзаиморасчетыСервер.ПараметрыМеханизма.
// 
// Возвращаемое значение:
// 	Булево - Истина, если является объектом расчетов
//
Функция СсылкаЯвляетсяОбъектомРасчетов(Объект, СтруктураПараметров) Экспорт
	
	ИзменяетРасчеты            = СтруктураПараметров.ИзменяетРасчеты;
	ЭтоСправочник              = СтруктураПараметров.ЭтоСправочник;
	ЭтоЗаказ                   = СтруктураПараметров.ЭтоЗаказ;
	ЭтоПродажаЗакупка          = СтруктураПараметров.ЭтоПродажаЗакупка;
	ЭтоПлатежИлиПрочийДокумент = СтруктураПараметров.ЭтоПлатежИлиПрочийДокумент;
	ПорядокРасчетов            = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ПорядокРасчетов, , Перечисления.ПорядокРасчетов.ПоНакладным);
	НакладнаяПоЗаказам         = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.НакладнаяПоЗаказам, ,Ложь);
	ЗаказОснование             = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ЗаказОснование);
	ИспользоватьРасширенные    = СтруктураПараметров.ДокументРасчетовСКлиентами И НЕ СтруктураПараметров.ЗаказКакСчет
								ИЛИ СтруктураПараметров.ДокументРасчетовСПоставщиками;
	
	Возврат ЭтоСправочник И (ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов
							ИЛИ ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамНакладным)
			ИЛИ ЭтоЗаказ И (ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказам
														ИЛИ ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным)
			ИЛИ ЭтоПродажаЗакупка И ИзменяетРасчеты 
				И (ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным
					ИЛИ ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным
					ИЛИ ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамНакладным
					ИЛИ (НЕ ИспользоватьРасширенные ИЛИ НЕ НакладнаяПоЗаказам) И ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказам) 
					// Корректировки реализаций и приобретений.
					И СтруктураПараметров.Ссылка = "Объект.Ссылка"
			ИЛИ ЭтоПлатежИлиПрочийДокумент И ИзменяетРасчеты
				// Возвраты товаров не по договорам.
				И ЗначениеЗаполнено(СтруктураПараметров.ОбъектРасчетов) И ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов
				// Возвраты товаров клиентов не по заявке.
				И НЕ (ЗначениеЗаполнено(ЗаказОснование) И ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказам);
	
КонецФункции

// Находит используемый объект расчетов (или несколько) по указанной ссылке
//
// Параметры:
// 	Ссылка - СправочникСсылка, ДокументСсылка - документ или справочник, использующий учетный механизм Взаиморасчеты
// 
// Возвращаемое значение:
// 	- СправочникСсылка.ОбъектыРасчетов - Найденный объект расчетов
// 	- Массив из СправочникСсылка.ОбъектыРасчетов - Если найдено несколько объектов расчетов
//
Функция ОбъектРасчетовИзСсылки(Ссылка) Экспорт
	
	МодульМенеджера = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Ссылка);
	ПараметрыВзаиморасчеты = МодульМенеджера.ПараметрыВзаиморасчеты(Ссылка);
	
	Если ТипЗнч(ПараметрыВзаиморасчеты) = Тип("Массив") Тогда
		МассивПараметров = ПараметрыВзаиморасчеты;
	Иначе
		МассивПараметров = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыВзаиморасчеты);
	КонецЕсли;
	
	ОбъектРасчетов = Справочники.ОбъектыРасчетов.ПустаяСсылка();
	Для Каждого СтруктураПараметров Из МассивПараметров Цикл
		Если ЗначениеЗаполнено(СтруктураПараметров.ОбъектРасчетов) Тогда
			ЧастиПути = СтрРазделить(СтруктураПараметров.ОбъектРасчетов, ".");
			Если ЧастиПути.Количество() = 2 Тогда // ОР в рекизите
				ОбъектРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ЧастиПути[1]);
			ИначеЕсли ЧастиПути.Количество() = 3 Тогда // ОР в табличной части
				МетаданныеПоСсылке = Ссылка.Метаданные();
				Если МетаданныеПоСсылке.ТабличныеЧасти.Найти(ЧастиПути[1]) <> Неопределено Тогда
					Запрос = Новый Запрос;
					Запрос.Текст = 
						"ВЫБРАТЬ РАЗЛИЧНЫЕ
						|	ТабличнаяЧасть.ИмяРеквизита КАК ОбъектРасчетов
						|ИЗ
						|	&ТабличнаяЧасть КАК ТабличнаяЧасть
						|ГДЕ
						|	ТабличнаяЧасть.Ссылка = &Ссылка";
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТабличнаяЧасть", МетаданныеПоСсылке.ПолноеИмя() + "." + ЧастиПути[1]);
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяРеквизита", ЧастиПути[2]);
					Запрос.УстановитьПараметр("Ссылка", Ссылка);
					МассивОбъектовРасчетов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОбъектРасчетов");
					Если МассивОбъектовРасчетов.Количество() > 1 Тогда
						ОбъектРасчетов =  МассивОбъектовРасчетов;
					ИначеЕсли МассивОбъектовРасчетов.Количество() = 1 Тогда 
						ОбъектРасчетов = МассивОбъектовРасчетов[0];
					КонецЕсли;
				Иначе
					ВызватьИсключение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'В модуле менеджера документа указан некоррекный путь к объекту расчетов %1'"),
						СтруктураПараметров.ОбъектРасчетов));
				КонецЕсли;
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОбъектРасчетов;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает соответствия ссылок элементам справочника объекты расчетов
// 
// Параметры:
// 	ТаблицаПоиска - ТаблицаЗначений - таблица ссылок для поиска:
// 	 * НомерСтроки - Число - номер строки поиска.
// Возвращаемое значение:
// 	Соответствие Из КлючИЗначение:
// 		* Ключ - Число - Номер строки в ТаблицаПоиска
//		* Значение - СправочникСсылка.ОбъектыРасчетов.
//
Функция НайтиОбъектыРасчетовПоАналитикеУчетаПоПартнерам(ТаблицаПоиска) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеПоиска.НомерСтроки,
		|	ДанныеПоиска.Организация,
		|	ДанныеПоиска.Партнер,
		|	ДанныеПоиска.Контрагент,
		|	ДанныеПоиска.Договор,
		|	ДанныеПоиска.НаправлениеДеятельности,
		|	ДанныеПоиска.ТипРасчетов,
		|	ДанныеПоиска.ВалютаВзаиморасчетов
		|ПОМЕСТИТЬ ВТДанныеПоиска
		|ИЗ 
		|	&ДанныеПоиска КАК ДанныеПоиска
		|;
		|
		|ВЫБРАТЬ
		|	ДанныеПоиска.НомерСтроки КАК НомерСтроки,
		|	ОбъектыРасчетов.Ссылка КАК ОбъектРасчетов
		|ИЗ
		|	ВТДанныеПоиска КАК ДанныеПоиска
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|		ПО ОбъектыРасчетов.Организация = ДанныеПоиска.Организация
		|		И ОбъектыРасчетов.Партнер = ДанныеПоиска.Партнер
		|		И ОбъектыРасчетов.Контрагент = ДанныеПоиска.Контрагент
		|		И ОбъектыРасчетов.Договор = ДанныеПоиска.Договор
		|		И ОбъектыРасчетов.НаправлениеДеятельности = ДанныеПоиска.НаправлениеДеятельности
		|		И ОбъектыРасчетов.ТипРасчетов = ДанныеПоиска.ТипРасчетов
		|		И ОбъектыРасчетов.ВалютаВзаиморасчетов = ДанныеПоиска.ВалютаВзаиморасчетов
		|		И ОбъектыРасчетов.Объект = НЕОПРЕДЕЛЕНО";
	
	Запрос.УстановитьПараметр("ДанныеПоиска", ТаблицаПоиска);
	ОбъектыРасчетов = Запрос.Выполнить().Выгрузить();

	Результат = Новый Соответствие;
	Для Каждого СтрокаАналитики Из ТаблицаПоиска Цикл
		СтрокиОбъектов = ОбъектыРасчетов.НайтиСтроки(Новый Структура("НомерСтроки", СтрокаАналитики.НомерСтроки));
		Если СтрокиОбъектов.Количество() > 1 Тогда
			ВызватьИсключение(НСтр("ru='Ошибка заполнения объекта расчетов. Найдено несколько объектов расчетов.'"));
		ИначеЕсли СтрокиОбъектов.Количество() = 1 Тогда
			Результат.Вставить(СтрокаАналитики.НомерСтроки, СтрокиОбъектов[0].ОбъектРасчетов);
		Иначе
			Результат.Вставить(СтрокаАналитики.НомерСтроки, Справочники.ОбъектыРасчетов.ПустаяСсылка());
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращаемое значение:
// 	ТаблицаЗначений:
// 		* НомерСтроки             - Число.
// 		* Организация             - СправочникСсылка.Организации.
// 		* Контрагент              - СправочникСсылка.Контрагенты.
// 		                          - СправочникСсылка.Организации.
// 		* Партнер                 - СправочникСсылка.Партнеры.
// 		* Договор                 - СправочникСсылка.ДоговорыКонтрагентов.
// 		                          - СправочникСсылка.ДоговорыМеждуОрганизациями.
// 		* НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности.
// 		* ТипРасчетов             - ПеречислениеСсылка.ТипыРасчетовСПартнерами. 
// 		* ВалютаВзаиморасчетов    - СправочникСсылка.Валюты.
//
Функция ПараметрыПоискаПустогоОбъектаРасчетов() Экспорт
	
	ПараметрыПоиска = Новый ТаблицаЗначений();
	ПараметрыПоиска.Колонки.Добавить("НомерСтроки",             Новый ОписаниеТипов("Число"));
	ПараметрыПоиска.Колонки.Добавить("Организация",             Новый ОписаниеТипов("СправочникСсылка.Организации"));
	
	СписокТиповКонтрагенты = Новый Массив();
	СписокТиповКонтрагенты.Добавить(Тип("СправочникСсылка.Организации"));
	СписокТиповКонтрагенты.Добавить(Тип("СправочникСсылка.Контрагенты"));
	ПараметрыПоиска.Колонки.Добавить("Контрагент",              Новый ОписаниеТипов(СписокТиповКонтрагенты));
	ПараметрыПоиска.Колонки.Добавить("Партнер",                 Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	
	СписокТиповДоговора = Новый Массив();
	СписокТиповДоговора.Добавить(Тип("СправочникСсылка.ДоговорыКонтрагентов"));
	СписокТиповДоговора.Добавить(Тип("СправочникСсылка.ДоговорыМеждуОрганизациями"));
	ПараметрыПоиска.Колонки.Добавить("Договор",                 Новый ОписаниеТипов(СписокТиповДоговора));
	ПараметрыПоиска.Колонки.Добавить("НаправлениеДеятельности", Новый ОписаниеТипов("СправочникСсылка.НаправленияДеятельности"));
	ПараметрыПоиска.Колонки.Добавить("ТипРасчетов",             Новый ОписаниеТипов("ПеречислениеСсылка.ТипыРасчетовСПартнерами"));
	ПараметрыПоиска.Колонки.Добавить("ВалютаВзаиморасчетов",    Новый ОписаниеТипов("СправочникСсылка.Валюты"));

	Возврат ПараметрыПоиска;
	
КонецФункции

// Удалить в LTS после 2.5.13
// Проверяет наличие в расшифровке платежа объектов расчетов по управленческой организации, которые не являются текущим документом
//
// Параметры:
//  СсылкаНаДокумент	 - ДокументСсылка.РеализацияТоваровУслуг, ДокументСсылка.ПриобретениеТоваровУслуг - Текущий документ
//  РасшифровкаПлатежа	 - ТабличнаяЧасть - Расшифровка платежа текущего документа
// 
// Возвращаемое значение:
//  Булево - Истина, если в расшифровке найдены объекты расчетов по управленческой организации, отличные от текущего документа
//
Функция ЕстьОбъектыРасчетовПоУпрОрганизации(СсылкаНаДокумент, РасшифровкаПлатежа) Экспорт
	
	Если РасшифровкаПлатежа.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СсылкаНаДокумент", СсылкаНаДокумент);
	Запрос.УстановитьПараметр("ОбъектыРасчетов", РасшифровкаПлатежа.ВыгрузитьКолонку("ОбъектРасчетов"));
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЕстьОбъектыРасчетовПоУпрОрганизации
		|ИЗ
		|	Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|ГДЕ
		|	ОбъектыРасчетов.Ссылка В(&ОбъектыРасчетов)
		|	И ОбъектыРасчетов.Объект <> &СсылкаНаДокумент
		|	И ОбъектыРасчетов.Организация = ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Генерирует и заполняет Объектов расчетов в табличной части документа Ввод остатков взаиморасчетов
//
// Параметры:
//   Объект - ДокументОбъект.ВводОстатковВзаиморасчетов
//
Процедура СгенерироватьЗаполнитьОбъектыРасчетов(Объект) Экспорт
	
	Объекты = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
				Объект.РасчетыСПартнерами.ВыгрузитьКолонку("ОбъектРасчетовОтправитель"),
				"Объект, Организация",
				Истина);
	
	Для Каждого СтрокаТЧ Из Объект.РасчетыСПартнерами Цикл
		
		Если СтрокаТЧ.ОбъектРасчетовОтправитель = Справочники.ОбъектыРасчетов.ПустаяСсылка() 
			Или Объекты.Получить(СтрокаТЧ.ОбъектРасчетовОтправитель) <> Неопределено
				И (СтрокаТЧ.ОбъектРасчетов <> Объекты.Получить(СтрокаТЧ.ОбъектРасчетовОтправитель).Объект
					Или Объект.Организация <> Объекты.Получить(СтрокаТЧ.ОбъектРасчетовОтправитель).Организация) Тогда
			
			ИсточникОбъектаРасчетов = СтрокаТЧ.ОбъектРасчетов;
			
			Если ЗначениеЗаполнено(ИсточникОбъектаРасчетов) Тогда
				Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковАвансовПоставщикам
					Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковЗадолженностиПоставщикам Тогда
						ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком;
				ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковАвансовКлиентов
					Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковЗадолженностиКлиентов Тогда
						ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом;
				КонецЕсли;
				
				БлокировкаИсточникОбъектаРасчетов = Новый БлокировкаДанных;
				
				ЭлементБлокировки = БлокировкаИсточникОбъектаРасчетов.Добавить(ИсточникОбъектаРасчетов.Метаданные().ПолноеИмя());
				ЭлементБлокировки.УстановитьЗначение("Ссылка", ИсточникОбъектаРасчетов);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
				
				БлокировкаИсточникОбъектаРасчетов.Заблокировать();
			
				Если ТипЗнч(ИсточникОбъектаРасчетов) = Тип("ДокументСсылка.ПервичныйДокумент") Тогда
					СтрокаТЧ.ОбъектРасчетовОтправитель = Документы.ПервичныйДокумент.СгенерироватьОбъектРасчетов(ИсточникОбъектаРасчетов.ПолучитьОбъект());
				Иначе
					ОбъектИсточник = ИсточникОбъектаРасчетов.ПолучитьОбъект();
					МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ИсточникОбъектаРасчетов);
					ПараметрыВзаиморасчеты = МенеджерОбъекта.ПараметрыВзаиморасчеты(ОбъектИсточник);
					ДополненныеПараметры = ВзаиморасчетыСервер.ДополненныеПараметрыМеханизма(ОбъектИсточник, ПараметрыВзаиморасчеты);
					Для Каждого СтруктураПараметров Из ДополненныеПараметры.МассивПараметров Цикл
						Если ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(ОбъектИсточник, СтруктураПараметров.Организация) = Объект.Организация
							И ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(ОбъектИсточник, СтруктураПараметров.ТипРасчетов) = ТипРасчетов Тогда
							ПараметрыВзаиморасчеты = СтруктураПараметров;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если СсылкаЯвляетсяОбъектомРасчетов(ОбъектИсточник, ПараметрыВзаиморасчеты) Тогда
						СсылкаОбъектРасчетов = ПроверитьЗаполнитьОбъектРасчетовПоСтруктуре(ОбъектИсточник, ПараметрыВзаиморасчеты);
						СтрокаТЧ.ОбъектРасчетовОтправитель = СсылкаОбъектРасчетов;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОчиститьОбъектыРасчетов(Объект, МассивСтруктур)
	
	Для Каждого СтруктураПараметров Из МассивСтруктур Цикл
		
		РеквизитОбъектРасчетов     = ОбщегоНазначенияУТКлиентСервер.ДанныеДляПрисвоения(Объект, СтруктураПараметров.ОбъектРасчетов);
		ЭтоСправочник                 = СтруктураПараметров.ЭтоСправочник;
		
		Если РеквизитОбъектРасчетов = Неопределено И НЕ ЭтоСправочник Тогда
			Возврат;
		КонецЕсли;
		
		ТЧЭтапыОплаты              = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты);
		
		Если РеквизитОбъектРасчетов <> Неопределено Тогда
			Если СтрРазделить(СтруктураПараметров.ОбъектРасчетов,".").Количество() = 3 Тогда
				Для Каждого СтрокаТЧ Из РеквизитОбъектРасчетов.Данные Цикл
					СтрокаТЧ[РеквизитОбъектРасчетов.Имя] = Справочники.ОбъектыРасчетов.ПустаяСсылка();
				КонецЦикла;
			Иначе
				РеквизитОбъектРасчетов.Данные[РеквизитОбъектРасчетов.Имя] = Справочники.ОбъектыРасчетов.ПустаяСсылка();
			КонецЕсли;
			Если ТЧЭтапыОплаты <> Неопределено И ТЧЭтапыОплаты.Количество() > 0 
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТЧЭтапыОплаты[0],"ОбъектРасчетов") Тогда
				Для Каждого СтрокаТЧ Из ТЧЭтапыОплаты Цикл
					СтрокаТЧ.ОбъектРасчетов = Справочники.ОбъектыРасчетов.ПустаяСсылка();
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если СтруктураПараметров.ЭтоПродажаЗакупка  И ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа) Тогда
			ТЧРасшифровка = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа);
			ТЧРасшифровка.Очистить();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция РеквизитыСправочникаОбъектыРасчетов()
	
	СлужебныеРеквизиты = Новый Массив;
	СлужебныеРеквизиты.Добавить("Ссылка");
	СлужебныеРеквизиты.Добавить("ПометкаУдаления");
	СлужебныеРеквизиты.Добавить("Объект");
	СлужебныеРеквизиты.Добавить("Организация");
	СлужебныеРеквизиты.Добавить("ТипРасчетов");
	СлужебныеРеквизиты.Добавить("ТипСсылки");
	СлужебныеРеквизиты.Добавить("УникальныйИдентификатор");
	
	РеквизитыСправочника = Метаданные.Справочники.ОбъектыРасчетов.Реквизиты;
	
	Реквизиты = Новый Массив();
	
	Для Каждого Реквизит Из РеквизитыСправочника Цикл
		Если СлужебныеРеквизиты.Найти(Реквизит.Имя) = Неопределено Тогда
			Реквизиты.Добавить(Реквизит.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Реквизиты.Добавить("Наименование");
	
	Возврат Реквизиты;
	
КонецФункции

Процедура ЗаполнитьОбъектРасчетов(Объект, МассивСтруктур, РежимЗаписи = Неопределено)
	
	Для Каждого СтруктураПараметров Из МассивСтруктур Цикл
		
		РеквизитОбъектРасчетов     = ОбщегоНазначенияУТКлиентСервер.ДанныеДляПрисвоения(Объект, СтруктураПараметров.ОбъектРасчетов);
		ЭтоСправочник              = СтруктураПараметров.ЭтоСправочник;
		
		Если (РеквизитОбъектРасчетов = Неопределено ИЛИ НЕ СтруктураПараметров.ИзменяетРасчеты) И НЕ ЭтоСправочник
			ИЛИ СтруктураПараметров.Организация = Справочники.Организации.УправленческаяОрганизация Тогда 
			// Для управленческой организации Объект расчетов заполняется перед записью в модуле объекта документа
			Продолжить;
		КонецЕсли;
		
		ЭтоЗаказ                   = СтруктураПараметров.ЭтоЗаказ;
		ЭтоПродажаЗакупка          = СтруктураПараметров.ЭтоПродажаЗакупка;
		ЭтоПлатежИлиПрочийДокумент = СтруктураПараметров.ЭтоПлатежИлиПрочийДокумент;
		ТипРасчетов                = СтруктураПараметров.ТипРасчетов;
		ОрганизацияДоговора        = СтруктураПараметров.ОрганизацияДоговора;
		
		ИмяРеквизитаТЧЗаказ        = СтруктураПараметров.ИмяРеквизитаТЧЗаказ;
		Организация                = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Организация);
		ЗаказОснование             = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ЗаказОснование);
		ТЧ                         = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ПутьКДаннымТЧ);
		ТЧЭтапыОплаты              = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты);
		
		Договор               = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Договор);
		НакладнаяПоЗаказам    = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.НакладнаяПоЗаказам, , Ложь);
		Если СтруктураПараметров.Свойство("СсылкаНового") Тогда
			Ссылка = СтруктураПараметров.СсылкаНового;
		Иначе
			Ссылка = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Ссылка);
		КонецЕсли;
		
		ОбъектРасчетовНеНужен      = Ложь;
		
		ПорядокРасчетов            = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ПорядокРасчетов);
		Если ПорядокРасчетов = Неопределено И ЗначениеЗаполнено(Договор) Тогда
			ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ПорядокРасчетов");
		КонецЕсли;
		
		ДополнительныеКритерииПоиска = ДополнительныеКритерииПоиска();
		ДополнительныеКритерииПоиска.Контрагент = ?(Не СтруктураПараметров.КонтрагентВСтроках,
			ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Контрагент),
			Неопределено);
		ДополнительныеКритерииПоиска.Партнер = ?(Не СтруктураПараметров.ПартнерВСтроках,
			ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Партнер),
			Неопределено);
		
		//Определение.
		ДополнительныеКритерииПоиска.ВернутьПервый = Истина;
		Если СсылкаЯвляетсяОбъектомРасчетов(Объект, СтруктураПараметров) Тогда
			ОбъектРасчетов = ПолучитьОбъектРасчетовПоСсылке(Ссылка, Организация, ТипРасчетов, ДополнительныеКритерииПоиска);
		ИначеЕсли ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов
			И (ЭтоЗаказ ИЛИ ЭтоПродажаЗакупка ИЛИ ЭтоПлатежИлиПрочийДокумент И ЗначениеЗаполнено(СтруктураПараметров.ОбъектРасчетов))
			ИЛИ ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамНакладным И ЭтоЗаказ Тогда
				
			Если НЕ ЗначениеЗаполнено(Договор) И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
				ВызватьИсключение (СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru='Не заполнено поле ""Договор"".'"),
									Договор));
			КонецЕсли;
			
			ОбъектРасчетов = ПолучитьОбъектРасчетовПоСсылке(Договор, Организация, ТипРасчетов, ДополнительныеКритерииПоиска);
			Если НЕ ЗначениеЗаполнено(ОбъектРасчетов) И ЗначениеЗаполнено(ОрганизацияДоговора) Тогда
				ОбъектРасчетов = ПолучитьОбъектРасчетовПоСсылке(Договор, ОрганизацияДоговора, ТипРасчетов, ДополнительныеКритерииПоиска);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбъектРасчетов) И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
				ВызватьИсключение (СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru='Не удалось найти объект расчетов для договора %1.'"),
									Договор));
			КонецЕсли;
			
		ИначеЕсли ЭтоПродажаЗакупка И НакладнаяПоЗаказам И НЕ ЗначениеЗаполнено(ИмяРеквизитаТЧЗаказ) И ЗначениеЗаполнено(ЗаказОснование) 
			ИЛИ ЭтоПлатежИлиПрочийДокумент И ЗначениеЗаполнено(ЗаказОснование) И ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказам Тогда
			
			ОбъектРасчетов = ПолучитьОбъектРасчетовПоСсылке(ЗаказОснование, Организация, ТипРасчетов, ДополнительныеКритерииПоиска);
			
			Если НЕ ЗначениеЗаполнено(ОбъектРасчетов) И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
				ВызватьИсключение (СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru='Не удалось найти объект расчетов для %1. Проверьте соответствие ключевых реквизитов заказу.'"),
									ЗаказОснование));
			КонецЕсли;
			
		ИначеЕсли ЭтоПродажаЗакупка И НакладнаяПоЗаказам И ЗначениеЗаполнено(ИмяРеквизитаТЧЗаказ) 
			И ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказам Тогда
			
			Заказы = ТЧ.ВыгрузитьКолонку(ИмяРеквизитаТЧЗаказ);
		
			Если Заказы.Количество() > 0 Тогда
				ОбъектРасчетов = ПолучитьОбъектыРасчетовПоСсылкам(Заказы, Организация, ТипРасчетов);
			Иначе
				Возврат;
			КонецЕсли;
			
			Если Не ОбъектРасчетов = Неопределено Тогда 
				Для Каждого Элемент Из ОбъектРасчетов Цикл
					Если НЕ ЗначениеЗаполнено(ОбъектРасчетов.Получить(Элемент.Ключ)) И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
						ВызватьИсключение (СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											НСтр("ru='Не удалось найти объект расчетов для %1. Проверьте соответствие ключевых реквизитов заказу.'"),
											Элемент.Ключ));
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		// Корректировки реализации и приобретения.
		ИначеЕсли ЭтоПродажаЗакупка И ЗначениеЗаполнено(СтруктураПараметров.Ссылка) И СтруктураПараметров.Ссылка <> "Объект.Ссылка" 
			И (ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным
				ИЛИ ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным
				ИЛИ ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамНакладным
				ИЛИ НЕ НакладнаяПоЗаказам И ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказам) Тогда
			ОбъектРасчетов = ПолучитьОбъектРасчетовПоСсылке(
					ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Ссылка),
					Организация,
					СтруктураПараметров.ТипРасчетов,
					ДополнительныеКритерииПоиска);
			
			Если НЕ ЗначениеЗаполнено(ОбъектРасчетов) И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
				ВызватьИсключение (СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru='Не удалось найти объект расчетов для %1.'"),
									Объект));
			КонецЕсли;
		Иначе
			ОбъектРасчетов = Справочники.ОбъектыРасчетов.ПустаяСсылка();
			ОбъектРасчетовНеНужен = Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбъектРасчетов) И Не ОбъектРасчетовНеНужен 
			И (ЭтоСправочник ИЛИ ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, "Объект.Проведен")) Тогда
				ВызватьИсключение (НСтр("ru = 'Не удалось найти объект расчетов.'"))
		КонецЕсли;
		
		ЭтоДокумент = Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Ссылка));
		
		Если НЕ ЭтоДокумент
			ИЛИ РежимЗаписи = РежимЗаписиДокумента.Проведение
			ИЛИ РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
			//Присвоение.
			Если РеквизитОбъектРасчетов <> Неопределено Тогда
				Если ТипЗнч(ОбъектРасчетов) = Тип("Соответствие") Тогда
					Для Каждого СтрокаТЧ Из ТЧ Цикл
						СтрокаТЧ[РеквизитОбъектРасчетов.Имя] = ОбъектРасчетов[СтрокаТЧ[ИмяРеквизитаТЧЗаказ]];
					КонецЦикла;
					Если ТЧЭтапыОплаты <> Неопределено И ТЧЭтапыОплаты.Количество() > 0
						И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТЧЭтапыОплаты[0], "Заказ") Тогда
						Для Каждого СтрокаТЧ Из ТЧЭтапыОплаты Цикл
							СтрокаТЧ.ОбъектРасчетов = ОбъектРасчетов[СтрокаТЧ.Заказ];
						КонецЦикла;
					КонецЕсли;
				Иначе
					Если СтрРазделить(СтруктураПараметров.ОбъектРасчетов,".").Количество() = 3 Тогда
						Для Каждого СтрокаТЧ Из РеквизитОбъектРасчетов.Данные Цикл
							СтрокаТЧ[РеквизитОбъектРасчетов.Имя] = ОбъектРасчетов;
						КонецЦикла;
					Иначе
						РеквизитОбъектРасчетов.Данные[РеквизитОбъектРасчетов.Имя] = ОбъектРасчетов;
					КонецЕсли;
					Если ТЧЭтапыОплаты <> Неопределено И ТЧЭтапыОплаты.Количество() > 0 
						И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТЧЭтапыОплаты[0],"ОбъектРасчетов") Тогда
						Для Каждого СтрокаТЧ Из ТЧЭтапыОплаты Цикл
							СтрокаТЧ.ОбъектРасчетов = ОбъектРасчетов;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
// 	Объект - ДокументОбъект,СправочникОбъект - .
// 	
// Возвращаемое значение:
// 	ТаблицаЗначений
//
Функция ТаблицаСторон(Объект, Параметры)
	
	СписокТипов = Новый Массив;
	СписокТипов.Добавить(Тип("СправочникСсылка.Организации"));
	СписокТипов.Добавить(Тип("СправочникСсылка.Контрагенты"));
	ОписаниеТипаПоляКонтрагент = Новый ОписаниеТипов(СписокТипов);
	
	ТаблицаСторон = Новый ТаблицаЗначений;
	ТаблицаСторон.Колонки.Добавить("Контрагент", Новый ОписаниеТипов(ОписаниеТипаПоляКонтрагент));
	ТаблицаСторон.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаСторон.Колонки.Добавить("Партнер", Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	ТаблицаСторон.Колонки.Добавить("ВалютаВзаиморасчетов",Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаСторон.Колонки.Добавить("ТипРасчетов",Новый ОписаниеТипов("ПеречислениеСсылка.ТипыРасчетовСПартнерами"));
	
	Если ТипЗнч(Параметры) <> Тип("Массив") Тогда
		МассивСтруктур = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Параметры);
	Иначе
		МассивСтруктур = Параметры;
	КонецЕсли;
	
	Для Каждого СтруктураПараметров Из МассивСтруктур Цикл
		
		Если СтруктураПараметров.Свойство("СсылкаНового") Тогда
			Ссылка = СтруктураПараметров.СсылкаНового;
		Иначе
			Ссылка = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Ссылка);
		КонецЕсли;
		
		ОрганизацияВСтроках  = СтруктураПараметров.ОрганизацияВСтроках И ТипЗнч(СтруктураПараметров.Организация) = Тип("Строка");
		КонтрагентВСтроках   = СтруктураПараметров.КонтрагентВСтроках И ТипЗнч(СтруктураПараметров.Контрагент) = Тип("Строка");
		ПартнерВСтроках      = СтруктураПараметров.ПартнерВСтроках И ТипЗнч(СтруктураПараметров.Партнер) = Тип("Строка");
		ВалютаВзаиморасчетовВСтроках = СтруктураПараметров.ВалютаВзаиморасчетовВСтроках И ТипЗнч(СтруктураПараметров.ВалютаВзаиморасчетов) = Тип("Строка");
		ВалютаДокумента = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ВалютаДокумента);
		
		Если ОрганизацияВСтроках ИЛИ КонтрагентВСтроках ИЛИ ПартнерВСтроках ИЛИ ВалютаВзаиморасчетовВСтроках Тогда
			
			Если ОрганизацияВСтроках И КонтрагентВСтроках
				И СтрРазделить(СтруктураПараметров.Организация, ".")[1] <> СтрРазделить(СтруктураПараметров.Контрагент, ".")[1] Тогда
				ВызватьИсключение(НСтр("ru = 'Ошибка встраивания. Отличаются табличные части содержащие контрагента и организацию.'"));
			КонецЕсли;
			
			Если ОрганизацияВСтроках Тогда
				Имена = СтрРазделить(СтруктураПараметров.Организация, ".");
				Имена.Удалить(Имена.ВГраница());
				ТабличнаяЧасть = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтрСоединить(Имена, ".")); // ТабличнаяЧасть 
			ИначеЕсли КонтрагентВСтроках ИЛИ ПартнерВСтроках ИЛИ ВалютаВзаиморасчетовВСтроках Тогда
				ТабличнаяЧасть = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа); // ТабличнаяЧасть
			КонецЕсли;
			
			ОбъектыРасчетовВСтроках = Ложь;
			Если ТабличнаяЧасть.Количество() > 0 И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТабличнаяЧасть[0], "ОбъектРасчетов") Тогда
				ОбъектыРасчетовВСтроках = Истина;
				Объекты = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
					ОбщегоНазначенияКлиентСервер.СвернутьМассив(ТабличнаяЧасть.Выгрузить(,"ОбъектРасчетов").ВыгрузитьКолонку("ОбъектРасчетов")),"Объект");
			КонецЕсли;
			
			Для Каждого Стр Из ТабличнаяЧасть Цикл
				
				Если НЕ СсылкаЯвляетсяОбъектомРасчетов(Объект, СтруктураПараметров) 
					И НЕ (ОбъектыРасчетовВСтроках
							И (НЕ ЗначениеЗаполнено(Стр.ОбъектРасчетов)
									ИЛИ Объекты[Стр.ОбъектРасчетов].Объект = Ссылка)) Тогда
					Продолжить;
				КонецЕсли;
				
				НовСтр = ТаблицаСторон.Добавить();
				
				Если ТипЗнч(Объект) = Тип("ФормаКлиентскогоПриложения") Тогда
					Идентификатор = Стр.ПолучитьИдентификатор();
				Иначе
					Идентификатор = Стр.НомерСтроки;
				КонецЕсли;
				
				Если ОрганизацияВСтроках Тогда
					НовСтр.Организация = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Организация, Идентификатор);
				Иначе
					НовСтр.Организация = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Организация);
				КонецЕсли;
				
				Если КонтрагентВСтроках Тогда
					НовСтр.Контрагент = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Контрагент, Идентификатор);
				Иначе
					НовСтр.Контрагент = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Контрагент);
				КонецЕсли;
				
				Если ПартнерВСтроках Тогда
					НовСтр.Партнер = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Партнер, Идентификатор);
				Иначе
					НовСтр.Партнер = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Партнер);
				КонецЕсли;
				
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Стр, "ВалютаВзаиморасчетов") Тогда
					НовСтр.ВалютаВзаиморасчетов = ?(ЗначениеЗаполнено(Стр.ВалютаВзаиморасчетов), Стр.ВалютаВзаиморасчетов, ВалютаДокумента);
				Иначе
					НовСтр.ВалютаВзаиморасчетов = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(
						Объект, ?(ЗначениеЗаполнено(СтруктураПараметров.ВалютаВзаиморасчетов), 
									СтруктураПараметров.ВалютаВзаиморасчетов, 
									СтруктураПараметров.ВалютаДокумента));
				КонецЕсли;
				
				НовСтр.ТипРасчетов = СтруктураПараметров.ТипРасчетов;
				
			КонецЦикла;
			
		Иначе
			Если СсылкаЯвляетсяОбъектомРасчетов(Объект, СтруктураПараметров)
				И (ЗначениеЗаполнено(СтруктураПараметров.ОбъектРасчетов) ИЛИ СтруктураПараметров.ЭтоСправочник)
				ИЛИ СтруктураПараметров.ТолькоОстатки Тогда
				НовСтр = ТаблицаСторон.Добавить();
				НовСтр.Организация = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Организация);
				НовСтр.Контрагент = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Контрагент);
				НовСтр.Партнер = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Партнер);
				НовСтр.ВалютаВзаиморасчетов = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(
						Объект, ?(ЗначениеЗаполнено(СтруктураПараметров.ВалютаВзаиморасчетов), 
									СтруктураПараметров.ВалютаВзаиморасчетов, 
									СтруктураПараметров.ВалютаДокумента));
				НовСтр.ТипРасчетов = СтруктураПараметров.ТипРасчетов;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаСторон;
	
КонецФункции

#КонецОбласти

#КонецЕсли
