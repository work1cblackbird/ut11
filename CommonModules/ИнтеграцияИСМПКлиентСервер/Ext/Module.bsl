#Область ПрограммныйИнтерфейс

Функция ИмяПодсистемы() Экспорт
	
	Возврат "ИСМП";
	
КонецФункции

Функция ПредставлениеПодсистемы() Экспорт
	
	Возврат "ИС МП";
	
КонецФункции

Функция ИмяКомандыПулКодовМаркировки(ИмяПодсистемы) Экспорт
	
	Возврат
		ИнтеграцияИСКлиентСервер.ОбщийПрефиксКомандыНавигационнойСсылки(ИмяПодсистемы)
		+ "ПерейтиВПулКодовМаркировки";
	
КонецФункции

Функция ЭтоКомандаНавигационнойСсылкиПулКодовМаркировки(ОписаниеКоманды) Экспорт
	
	Возврат ОписаниеКоманды[2] = "ПерейтиВПулКодовМаркировки";
	
КонецФункции

Функция ИмяКомандыОткрытьФормуСверкиКодовМаркировки(ИмяПодсистемы) Экспорт
	
	Возврат
		ИнтеграцияИСКлиентСервер.ОбщийПрефиксКомандыНавигационнойСсылки(ИмяПодсистемы)
		+ "ОткрытьФормуСверкиКодовМаркировки";
	
КонецФункции

Функция ЭтоКомандаНавигационнойСсылкиОткрытьФормуСверкиКодовМаркировки(ОписаниеКоманды) Экспорт
	
	Возврат ОписаниеКоманды[2] = "ОткрытьФормуСверкиКодовМаркировки";
	
КонецФункции

Функция ШаблонКодаМаркировкиПоВидуПродукции(ВидПродукции, РежимВключенияУпаковокИНаборов = 0) Экспорт
	
	СписокШаблонов = ШаблоныКодовПоВидуПродукции(ВидПродукции, РежимВключенияУпаковокИНаборов);
	
	Если СписокШаблонов.Количество() > 0 Тогда
		Возврат СписокШаблонов.Получить(0).Значение;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает все шаблоны групповых упаковок
//
// Возвращаемое значение:
//   Массив Из ПеречислениеСсылка.ШаблоныКодовМаркировкиСУЗ - шаблоны групповых упаковок
//
Функция ШаблоныГрупповыхУпаковок() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БлокТабачныхПачек"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АльтернативныйТабакБлок"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.НикотиносодержащаяПродукцияБлок"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АнтисептикиГрупповаяУпаковка"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АнтисептикиГрупповаяУпаковкаСтандартныйКМ"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БАДыГрупповаяУпаковка"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БАДыГрупповаяУпаковкаСтандартныйКМ"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияПодконтрольнаяВЕТИСГрупповаяУпаковка"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияБезВЕТИСГрупповаяУпаковка"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПивоГрупповаяУпаковка"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.УпакованнаяВодаГрупповаяУпаковка"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КреслаКоляскиГрупповаяУпаковка"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.СоковаяПродукцияГрупповаяУпаковка"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МорепродуктыГрупповаяУпаковка"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МорепродуктыГрупповаяУпаковкаСтандартныйКМ"));
	
	Если ОбщегоНазначенияИСМПКлиентСервер.КормаДляЖивотныхПодконтрольныеВЕТИСИспользуетГрупповуюУпаковку() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.КормаДляЖивотныхПодконтрольныеВЕТИСИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КормаДляЖивотныхГрупповаяУпаковка"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.КормаДляЖивотныхПодконтрольныеВЕТИСИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КормаДляЖивотныхГрупповаяУпаковкаСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.КормаДляЖивотныхБезВЕТИСИспользуетГрупповуюУпаковку() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.КормаДляЖивотныхБезВЕТИСИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КормаДляЖивотныхБезВЕТИСГрупповаяУпаковка"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.КормаДляЖивотныхБезВЕТИСИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КормаДляЖивотныхБезВЕТИСГрупповаяУпаковкаСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.МясоПодконтрольноеВЕТИСИспользуетГрупповуюУпаковку() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.МясоПодконтрольноеВЕТИСИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МясоГрупповаяУпаковка"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.МясоПодконтрольноеВЕТИСИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МясоГрупповаяУпаковкаСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.ВетеринарныеПрепаратыИспользуетГрупповуюУпаковку() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.ВетеринарныеПрепаратыИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ВетеринарныеПрепаратыГрупповаяУпаковка"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.ВетеринарныеПрепаратыИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ВетеринарныеПрепаратыГрупповаяУпаковкаСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.ИгрыИИгрушкиДляДетейИспользуетГрупповуюУпаковку() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.ИгрыИИгрушкиДляДетейИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ИгрыИИгрушкиДляДетейГрупповаяУпаковка"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.ИгрыИИгрушкиДляДетейИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ИгрыИИгрушкиДляДетейГрупповаяУпаковкаСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.РадиоэлектроннаяПродукцияИспользуетГрупповуюУпаковку() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.РадиоэлектроннаяПродукцияИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.РадиоэлектроннаяПродукцияГрупповаяУпаковка"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.РадиоэлектроннаяПродукцияИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.РадиоэлектроннаяПродукцияГрупповаяУпаковкаСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.ТитановаяМеталлопродукцияИспользуетГрупповуюУпаковку() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.ТитановаяМеталлопродукцияИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ТитановаяМеталлопродукцияГрупповаяУпаковка"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.ТитановаяМеталлопродукцияИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ТитановаяМеталлопродукцияГрупповаяУпаковкаСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.КонсервированнаяПродукцияПодконтрольнаяВЕТИСИспользуетГрупповуюУпаковку() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.КонсервированнаяПродукцияПодконтрольнаяВЕТИСИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КонсервированнаяПродукцияГрупповаяУпаковка"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.КонсервированнаяПродукцияПодконтрольнаяВЕТИСИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КонсервированнаяПродукцияГрупповаяУпаковкаСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.КонсервированнаяПродукцияБезВЕТИСИспользуетГрупповуюУпаковку() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.КонсервированнаяПродукцияБезВЕТИСИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КонсервированнаяПродукцияБезВЕТИСГрупповаяУпаковка"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.КонсервированнаяПродукцияБезВЕТИСИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КонсервированнаяПродукцияБезВЕТИСГрупповаяУпаковкаСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.РастительныеМаслаИспользуетГрупповуюУпаковку() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.РастительныеМаслаИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.РастительныеМаслаГрупповаяУпаковка"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.РастительныеМаслаИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.РастительныеМаслаГрупповаяУпаковкаСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.ОптоволокноИОптоволоконнаяПродукцияИспользуетГрупповуюУпаковку() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.ОптоволокноИОптоволоконнаяПродукцияИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ОптоволокноИОптоволоконнаяПродукцияГрупповаяУпаковка"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.ОптоволокноИОптоволоконнаяПродукцияИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ОптоволокноИОптоволоконнаяПродукцияГрупповаяУпаковкаСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.ПарфюмерныеИКосметическиеСредстваИБытоваяХимияИспользуетГрупповуюУпаковку() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.ПарфюмерныеИКосметическиеСредстваИБытоваяХимияИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПарфюмерныеИКосметическиеСредстваИБытоваяХимияГрупповаяУпаковка"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.ПарфюмерныеИКосметическиеСредстваИБытоваяХимияИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПарфюмерныеИКосметическиеСредстваИБытоваяХимияГрупповаяУпаковкаСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.ПечатнаяПродукцияИспользуетГрупповуюУпаковку() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.ПечатнаяПродукцияИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПечатнаяПродукцияГрупповаяУпаковка"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.ПечатнаяПродукцияИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПечатнаяПродукцияГрупповаяУпаковкаСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.СтроительныеМатериалыИспользуетГрупповуюУпаковку() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.СтроительныеМатериалыИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.СтроительныеМатериалыГрупповаяУпаковка"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.СтроительныеМатериалыИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.СтроительныеМатериалыГрупповаяУпаковкаСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.ОтопительныеПриборыИспользуетГрупповуюУпаковку() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.ОтопительныеПриборыИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ОтопительныеПриборыГрупповаяУпаковка"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.ОтопительныеПриборыИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ОтопительныеПриборыГрупповаяУпаковкаСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.БакалеяИспользуетГрупповуюУпаковку() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.БакалеяИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БакалеяГрупповаяУпаковка"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.БакалеяИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БакалеяГрупповаяУпаковкаСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.АлкогольнаяПродукцияДо9ПроцентовИспользуетГрупповуюУпаковку() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.АлкогольнаяПродукцияДо9ПроцентовИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АлкогольнаяПродукцияДо9ПроцентовГрупповаяУпаковка"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.АлкогольнаяПродукцияДо9ПроцентовИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АлкогольнаяПродукцияДо9ПроцентовГрупповаяУпаковкаСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.ТелефоныИНоутбукиИспользуетГрупповуюУпаковку() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.ТелефоныИНоутбукиИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ТелефоныИНоутбукиГрупповаяУпаковка"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.ТелефоныИНоутбукиИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ТелефоныИНоутбукиГрупповаяУпаковкаСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.ПиротехническиеИзделияИСредстваПожарнойБезопасностиИспользуетГрупповуюУпаковку() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.ПиротехническиеИзделияИСредстваПожарнойБезопасностиИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПиротехническиеИзделияИСредстваПожарнойБезопасностиГрупповаяУпаковка"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.ПиротехническиеИзделияИСредстваПожарнойБезопасностиИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПиротехническиеИзделияИСредстваПожарнойБезопасностиГрупповаяУпаковкаСтКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.КабельнаяПродукцияИспользуетГрупповуюУпаковку() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.КабельнаяПродукцияИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КабельнаяПродукцияГрупповаяУпаковка"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.КабельнаяПродукцияИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КабельнаяПродукцияГрупповаяУпаковкаСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.МоторныеМаслаИспользуетГрупповуюУпаковку() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.МоторныеМаслаИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МоторныеМаслаГрупповаяУпаковка"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.МоторныеМаслаИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МоторныеМаслаГрупповаяУпаковкаСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает шаблоны кодов маркировки, которые могут находиться в составе групповой упаковки
//
// Возвращаемое значение:
//   Массив Из ПеречислениеСсылка.ШаблоныКодовМаркировкиСУЗ - шаблоны индивидуальных упаковок, входящих в состав групповых.
//
Функция ШаблоныИндивидуальныхУпаковокВСоставеГрупповых() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ТабачнаяПачка"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АльтернативныйТабакПачка"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АльтернативныйТабакПачкаGS1"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.НикотиносодержащаяПродукцияПачка"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.Антисептики"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АнтисептикиСтандартныйКМ"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.Бады"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БАДыСтандартныйКМ"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияСерия6СимволовВЕТИС"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияСерия6СимволовБезВЕТИС"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.Пиво"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.УпакованнаяВода"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КреслаКоляски"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.СоковаяПродукция"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.Морепродукты"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МорепродуктыСтандартныйКМ"));
	
	Если ОбщегоНазначенияИСМПКлиентСервер.КормаДляЖивотныхПодконтрольныеВЕТИСИспользуетГрупповуюУпаковку() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.КормаДляЖивотныхПодконтрольныеВЕТИСИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КормаДляЖивотных"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.КормаДляЖивотныхПодконтрольныеВЕТИСИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КормаДляЖивотныхСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.КормаДляЖивотныхБезВЕТИСИспользуетГрупповуюУпаковку() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.КормаДляЖивотныхБезВЕТИСИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КормаДляЖивотныхБезВЕТИС"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.КормаДляЖивотныхБезВЕТИСИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КормаДляЖивотныхБезВЕТИССтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.МясоПодконтрольноеВЕТИСИспользуетГрупповуюУпаковку() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.МясоПодконтрольноеВЕТИСИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.Мясо"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.МясоПодконтрольноеВЕТИСИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МясоСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.ВетеринарныеПрепаратыИспользуетГрупповуюУпаковку() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.ВетеринарныеПрепаратыИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ВетеринарныеПрепараты"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.ВетеринарныеПрепаратыИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ВетеринарныеПрепаратыСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.ИгрыИИгрушкиДляДетейИспользуетГрупповуюУпаковку() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.ИгрыИИгрушкиДляДетейИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ИгрыИИгрушкиДляДетей"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.ИгрыИИгрушкиДляДетейИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ИгрыИИгрушкиДляДетейСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.РадиоэлектроннаяПродукцияИспользуетГрупповуюУпаковку() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.РадиоэлектроннаяПродукцияИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.РадиоэлектроннаяПродукция"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.РадиоэлектроннаяПродукцияИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.РадиоэлектроннаяПродукцияСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.ТитановаяМеталлопродукцияИспользуетГрупповуюУпаковку() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.ТитановаяМеталлопродукцияИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ТитановаяМеталлопродукция"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.ТитановаяМеталлопродукцияИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ТитановаяМеталлопродукцияСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.КонсервированнаяПродукцияПодконтрольнаяВЕТИСИспользуетГрупповуюУпаковку() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.КонсервированнаяПродукцияПодконтрольнаяВЕТИСИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КонсервированнаяПродукция"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.КонсервированнаяПродукцияПодконтрольнаяВЕТИСИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КонсервированнаяПродукцияСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.КонсервированнаяПродукцияБезВЕТИСИспользуетГрупповуюУпаковку() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.КонсервированнаяПродукцияБезВЕТИСИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КонсервированнаяПродукцияБезВЕТИС"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.КонсервированнаяПродукцияБезВЕТИСИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КонсервированнаяПродукцияБезВЕТИССтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.РастительныеМаслаИспользуетГрупповуюУпаковку() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.РастительныеМаслаИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.РастительныеМасла"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.РастительныеМаслаИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.РастительныеМаслаСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.ОптоволокноИОптоволоконнаяПродукцияИспользуетГрупповуюУпаковку() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.ОптоволокноИОптоволоконнаяПродукцияИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ОптоволокноИОптоволоконнаяПродукция"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.ОптоволокноИОптоволоконнаяПродукцияИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ОптоволокноИОптоволоконнаяПродукцияСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.ПарфюмерныеИКосметическиеСредстваИБытоваяХимияИспользуетГрупповуюУпаковку() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.ПарфюмерныеИКосметическиеСредстваИБытоваяХимияИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПарфюмерныеИКосметическиеСредстваИБытоваяХимия"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.ПарфюмерныеИКосметическиеСредстваИБытоваяХимияИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПарфюмерныеИКосметическиеСредстваИБытоваяХимияСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.ПечатнаяПродукцияИспользуетГрупповуюУпаковку() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.ПечатнаяПродукцияИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПечатнаяПродукция"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.ПечатнаяПродукцияИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПечатнаяПродукцияСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.СтроительныеМатериалыИспользуетГрупповуюУпаковку() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.СтроительныеМатериалыИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.СтроительныеМатериалы"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.СтроительныеМатериалыИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.СтроительныеМатериалыСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.ОтопительныеПриборыИспользуетГрупповуюУпаковку() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.ОтопительныеПриборыИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ОтопительныеПриборы"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.ОтопительныеПриборыИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ОтопительныеПриборыСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.БакалеяИспользуетГрупповуюУпаковку() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.БакалеяИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.Бакалея"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.БакалеяИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БакалеяСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.АлкогольнаяПродукцияДо9ПроцентовИспользуетГрупповуюУпаковку() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.АлкогольнаяПродукцияДо9ПроцентовИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АлкогольнаяПродукцияДо9Процентов"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.АлкогольнаяПродукцияДо9ПроцентовИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АлкогольнаяПродукцияДо9ПроцентовСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.ТелефоныИНоутбукиИспользуетГрупповуюУпаковку() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.ТелефоныИНоутбукиИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ТелефоныИНоутбуки"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.ТелефоныИНоутбукиИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ТелефоныИНоутбукиСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.ПиротехническиеИзделияИСредстваПожарнойБезопасностиИспользуетГрупповуюУпаковку() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.ПиротехническиеИзделияИСредстваПожарнойБезопасностиИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПиротехническиеИзделияИСредстваПожарнойБезопасности"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.ПиротехническиеИзделияИСредстваПожарнойБезопасностиИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПиротехническиеИзделияИСредстваПожарнойБезопасностиСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.КабельнаяПродукцияИспользуетГрупповуюУпаковку() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.КабельнаяПродукцияИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КабельнаяПродукция"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.КабельнаяПродукцияИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КабельнаяПродукцияСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.МоторныеМаслаИспользуетГрупповуюУпаковку() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.МоторныеМаслаИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МоторныеМасла"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.МоторныеМаслаИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МоторныеМаслаСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает шаблоны кодов маркировки, являющихся наборами
//
// Возвращаемое значение:
//   Массив Из ПеречислениеСсылка.ШаблоныКодовМаркировкиСУЗ - шаблоны наборов
//
Функция ШаблоныНаборов() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ЛегкаяПромышленностьНабор"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ДухиНабор"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ФотоаппаратыНабор"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АнтисептикиНабор"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АнтисептикиНаборСтандартныйКМ"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БАДыНабор"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БАДыНаборСтандартныйКМ"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияПодконтрольнаяВЕТИСНабор"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияБезВЕТИСНабор"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.НикотиносодержащаяПродукцияНабор"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КреслаКоляскиНабор"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.СоковаяПродукцияНабор"));
	
	Если ОбщегоНазначенияИСМПКлиентСервер.КормаДляЖивотныхПодконтрольныеВЕТИСИспользуетНабор() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.КормаДляЖивотныхПодконтрольныеВЕТИСИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КормаДляЖивотныхНабор"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.КормаДляЖивотныхПодконтрольныеВЕТИСИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КормаДляЖивотныхНаборСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.КормаДляЖивотныхБезВЕТИСИспользуетНабор() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.КормаДляЖивотныхБезВЕТИСИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КормаДляЖивотныхБезВЕТИСНабор"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.КормаДляЖивотныхБезВЕТИСИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КормаДляЖивотныхБезВЕТИСНаборСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.МясоПодконтрольноеВЕТИСИспользуетНабор() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.МясоПодконтрольноеВЕТИСИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МясоНабор"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.МясоПодконтрольноеВЕТИСИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МясоНаборСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.ВетеринарныеПрепаратыИспользуетНабор() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.ВетеринарныеПрепаратыИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ВетеринарныеПрепаратыНабор"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.ВетеринарныеПрепаратыИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ВетеринарныеПрепаратыНаборСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.ИгрыИИгрушкиДляДетейИспользуетНабор() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.ИгрыИИгрушкиДляДетейИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ИгрыИИгрушкиДляДетейНабор"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.ИгрыИИгрушкиДляДетейИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ИгрыИИгрушкиДляДетейНаборСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.РадиоэлектроннаяПродукцияИспользуетНабор() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.РадиоэлектроннаяПродукцияИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.РадиоэлектроннаяПродукцияНабор"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.РадиоэлектроннаяПродукцияИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.РадиоэлектроннаяПродукцияНаборСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.ТитановаяМеталлопродукцияИспользуетНабор() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.ТитановаяМеталлопродукцияИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ТитановаяМеталлопродукцияНабор"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.ТитановаяМеталлопродукцияИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ТитановаяМеталлопродукцияНаборСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.КонсервированнаяПродукцияПодконтрольнаяВЕТИСИспользуетНабор() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.КонсервированнаяПродукцияПодконтрольнаяВЕТИСИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КонсервированнаяПродукцияНабор"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.КонсервированнаяПродукцияПодконтрольнаяВЕТИСИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КонсервированнаяПродукцияНаборСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.КонсервированнаяПродукцияБезВЕТИСИспользуетНабор() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.КонсервированнаяПродукцияБезВЕТИСИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КонсервированнаяПродукцияБезВЕТИСНабор"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.КонсервированнаяПродукцияБезВЕТИСИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КонсервированнаяПродукцияБезВЕТИСНаборСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.РастительныеМаслаИспользуетНабор() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.РастительныеМаслаИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.РастительныеМаслаНабор"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.РастительныеМаслаИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.РастительныеМаслаНаборСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.ОптоволокноИОптоволоконнаяПродукцияИспользуетНабор() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.ОптоволокноИОптоволоконнаяПродукцияИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ОптоволокноИОптоволоконнаяПродукцияНабор"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.ОптоволокноИОптоволоконнаяПродукцияИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ОптоволокноИОптоволоконнаяПродукцияНаборСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.ПарфюмерныеИКосметическиеСредстваИБытоваяХимияИспользуетНабор() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.ПарфюмерныеИКосметическиеСредстваИБытоваяХимияИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПарфюмерныеИКосметическиеСредстваИБытоваяХимияНабор"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.ПарфюмерныеИКосметическиеСредстваИБытоваяХимияИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПарфюмерныеИКосметическиеСредстваИБытоваяХимияНаборСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.ПечатнаяПродукцияИспользуетНабор() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.ПечатнаяПродукцияИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПечатнаяПродукцияНабор"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.ПечатнаяПродукцияИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПечатнаяПродукцияНаборСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.СтроительныеМатериалыИспользуетНабор() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.СтроительныеМатериалыИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.СтроительныеМатериалыНабор"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.СтроительныеМатериалыИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.СтроительныеМатериалыНаборСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.ОтопительныеПриборыИспользуетНабор() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.ОтопительныеПриборыИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ОтопительныеПриборыНабор"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.ОтопительныеПриборыИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ОтопительныеПриборыНаборСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.БакалеяИспользуетНабор() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.БакалеяИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БакалеяНабор"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.БакалеяИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БакалеяНаборСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.АлкогольнаяПродукцияДо9ПроцентовИспользуетНабор() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.АлкогольнаяПродукцияДо9ПроцентовИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АлкогольнаяПродукцияДо9ПроцентовНабор"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.АлкогольнаяПродукцияДо9ПроцентовИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АлкогольнаяПродукцияДо9ПроцентовНаборСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.ТелефоныИНоутбукиИспользуетНабор() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.ТелефоныИНоутбукиИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ТелефоныИНоутбукиНабор"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.ТелефоныИНоутбукиИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ТелефоныИНоутбукиНаборСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.ПиротехническиеИзделияИСредстваПожарнойБезопасностиИспользуетНабор() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.ПиротехническиеИзделияИСредстваПожарнойБезопасностиИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПиротехническиеИзделияИСредстваПожарнойБезопасностиНабор"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.ПиротехническиеИзделияИСредстваПожарнойБезопасностиИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПиротехническиеИзделияИСредстваПожарнойБезопасностиНаборСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.КабельнаяПродукцияИспользуетНабор() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.КабельнаяПродукцияИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КабельнаяПродукцияНабор"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.КабельнаяПродукцияИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КабельнаяПродукцияНаборСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.МоторныеМаслаИспользуетНабор() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.МоторныеМаслаИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МоторныеМаслаНабор"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.МоторныеМаслаИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МоторныеМаслаНаборСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает шаблоны кодов маркировки, которые могут находиться в составе набора
//
// Возвращаемое значение:
//   Массив Из ПеречислениеСсылка.ШаблоныКодовМаркировкиСУЗ - шаблоны комплектующих набора
//
Функция ШаблоныКомплектующихНаборов() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ЛегкаяПромышленность"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.Духи"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.Фотоаппараты"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.Антисептики"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АнтисептикиСтандартныйКМ"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БАДы"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БАДыСтандартныйКМ"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияСерия6СимволовВЕТИС"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияСерия6СимволовБезВЕТИС"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.НикотиносодержащаяПродукцияПачка"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КреслаКоляски"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.СоковаяПродукция"));
	
	Если ОбщегоНазначенияИСМПКлиентСервер.КормаДляЖивотныхПодконтрольныеВЕТИСИспользуетНабор() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.КормаДляЖивотныхПодконтрольныеВЕТИСИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КормаДляЖивотных"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.КормаДляЖивотныхПодконтрольныеВЕТИСИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КормаДляЖивотныхСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.КормаДляЖивотныхБезВЕТИСИспользуетНабор() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.КормаДляЖивотныхБезВЕТИСИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КормаДляЖивотныхБезВЕТИС"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.КормаДляЖивотныхБезВЕТИСИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КормаДляЖивотныхБезВЕТИССтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.МясоПодконтрольноеВЕТИСИспользуетНабор() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.МясоПодконтрольноеВЕТИСИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.Мясо"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.МясоПодконтрольноеВЕТИСИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МясоСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.ВетеринарныеПрепаратыИспользуетНабор() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.ВетеринарныеПрепаратыИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ВетеринарныеПрепараты"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.ВетеринарныеПрепаратыИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ВетеринарныеПрепаратыСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.ИгрыИИгрушкиДляДетейИспользуетНабор() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.ИгрыИИгрушкиДляДетейИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ИгрыИИгрушкиДляДетей"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.ИгрыИИгрушкиДляДетейИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ИгрыИИгрушкиДляДетейСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.РадиоэлектроннаяПродукцияИспользуетНабор() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.РадиоэлектроннаяПродукцияИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.РадиоэлектроннаяПродукция"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.РадиоэлектроннаяПродукцияИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.РадиоэлектроннаяПродукцияСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.ТитановаяМеталлопродукцияИспользуетНабор() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.ТитановаяМеталлопродукцияИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ТитановаяМеталлопродукция"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.ТитановаяМеталлопродукцияИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ТитановаяМеталлопродукцияСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.КонсервированнаяПродукцияПодконтрольнаяВЕТИСИспользуетНабор() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.КонсервированнаяПродукцияПодконтрольнаяВЕТИСИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КонсервированнаяПродукция"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.КонсервированнаяПродукцияПодконтрольнаяВЕТИСИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КонсервированнаяПродукцияСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.КонсервированнаяПродукцияБезВЕТИСИспользуетНабор() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.КонсервированнаяПродукцияБезВЕТИСИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КонсервированнаяПродукцияБезВЕТИС"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.КонсервированнаяПродукцияБезВЕТИСИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КонсервированнаяПродукцияБезВЕТИССтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.РастительныеМаслаИспользуетНабор() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.РастительныеМаслаИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.РастительныеМасла"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.РастительныеМаслаИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.РастительныеМаслаСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.ОптоволокноИОптоволоконнаяПродукцияИспользуетНабор() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.ОптоволокноИОптоволоконнаяПродукцияИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ОптоволокноИОптоволоконнаяПродукция"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.ОптоволокноИОптоволоконнаяПродукцияИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ОптоволокноИОптоволоконнаяПродукцияСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.ПарфюмерныеИКосметическиеСредстваИБытоваяХимияИспользуетНабор() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.ПарфюмерныеИКосметическиеСредстваИБытоваяХимияИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПарфюмерныеИКосметическиеСредстваИБытоваяХимия"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.ПарфюмерныеИКосметическиеСредстваИБытоваяХимияИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПарфюмерныеИКосметическиеСредстваИБытоваяХимияСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.ПечатнаяПродукцияИспользуетНабор() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.ПечатнаяПродукцияИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПечатнаяПродукция"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.ПечатнаяПродукцияИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПечатнаяПродукцияСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.СтроительныеМатериалыИспользуетНабор() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.СтроительныеМатериалыИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.СтроительныеМатериалы"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.СтроительныеМатериалыИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.СтроительныеМатериалыСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.ОтопительныеПриборыИспользуетНабор() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.ОтопительныеПриборыИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ОтопительныеПриборы"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.ОтопительныеПриборыИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ОтопительныеПриборыСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.БакалеяИспользуетНабор() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.БакалеяИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.Бакалея"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.БакалеяИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БакалеяСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.АлкогольнаяПродукцияДо9ПроцентовИспользуетНабор() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.АлкогольнаяПродукцияДо9ПроцентовИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АлкогольнаяПродукцияДо9Процентов"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.АлкогольнаяПродукцияДо9ПроцентовИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АлкогольнаяПродукцияДо9ПроцентовСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.ТелефоныИНоутбукиИспользуетНабор() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.ТелефоныИНоутбукиИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ТелефоныИНоутбуки"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.ТелефоныИНоутбукиИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ТелефоныИНоутбукиСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.ПиротехническиеИзделияИСредстваПожарнойБезопасностиИспользуетНабор() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.ПиротехническиеИзделияИСредстваПожарнойБезопасностиИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПиротехническиеИзделияИСредстваПожарнойБезопасности"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.ПиротехническиеИзделияИСредстваПожарнойБезопасностиИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПиротехническиеИзделияИСредстваПожарнойБезопасностиСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.КабельнаяПродукцияИспользуетНабор() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.КабельнаяПродукцияИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КабельнаяПродукция"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.КабельнаяПродукцияИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КабельнаяПродукцияСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияИСМПКлиентСервер.МоторныеМаслаИспользуетНабор() Тогда
		Если ОбщегоНазначенияИСМПКлиентСервер.МоторныеМаслаИспользуетУкороченныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МоторныеМасла"));
		КонецЕсли;
		Если ОбщегоНазначенияИСМПКлиентСервер.МоторныеМаслаИспользуетСтандартныйКМ() Тогда
			Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МоторныеМаслаСтандартныйКМ"));
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает доступные шаблоны по виду продукции с представлением.
// 
// Параметры:
// 	ВидПродукции                   - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции.
// 	РежимВключенияУпаковокИНаборов - Число - Режим включения шаблонов для групповых упаковок и наборов:
// 	 0 - включать только потребительские упаковки
// 	 1 - включать групповые упаковки и потребительские упаковки
// 	 2 - включать наборы и потребительские упаковки
// 	 3 - включать групповые упаковки, наборы и потребительские упаковки
// 	 4 - включать только групповые упаковки
// 	 5 - включать только наборы.
// Возвращаемое значение:
// 	СписокЗначений - Список значений с представлениями.
Функция ШаблоныКодовПоВидуПродукции(ВидПродукции, РежимВключенияУпаковокИНаборов = 1) Экспорт
	
	ВключатьИндивидуальныеУпаковки =
			РежимВключенияУпаковокИНаборов = 0
		Или РежимВключенияУпаковокИНаборов = 1
		Или РежимВключенияУпаковокИНаборов = 2
		Или РежимВключенияУпаковокИНаборов = 3;
		
	ВключатьГрупповыеУпаковки =
			РежимВключенияУпаковокИНаборов = 1
		Или РежимВключенияУпаковокИНаборов = 3
		Или РежимВключенияУпаковокИНаборов = 4;
	
	ВключатьНаборы =
			РежимВключенияУпаковокИНаборов = 2
		Или РежимВключенияУпаковокИНаборов = 3
		Или РежимВключенияУпаковокИНаборов = 5;
	
	СписокВыбора = Новый СписокЗначений();
	Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак") Тогда
		Если ВключатьИндивидуальныеУпаковки Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ТабачнаяПачка"));
		КонецЕсли;
		Если ВключатьГрупповыеУпаковки Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БлокТабачныхПачек"));
		КонецЕсли;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Обувь") Тогда
		Если ВключатьИндивидуальныеУпаковки Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.Обувь"));
		КонецЕсли;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС") Тогда
		Если ВключатьИндивидуальныеУпаковки Тогда
			СписокВыбора.Добавить(
			ПредопределенноеЗначение(
				"Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияСерия6СимволовВЕТИС"));
		КонецЕсли;
		Если ВключатьГрупповыеУпаковки Тогда
			СписокВыбора.Добавить(
			ПредопределенноеЗначение(
				"Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияПодконтрольнаяВЕТИСГрупповаяУпаковка"));
		КонецЕсли;
		Если ВключатьНаборы Тогда
			СписокВыбора.Добавить(
			ПредопределенноеЗначение(
				"Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияПодконтрольнаяВЕТИСНабор"));
		КонецЕсли;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС") Тогда
		Если ВключатьИндивидуальныеУпаковки Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияСерия6СимволовБезВЕТИС"));
		КонецЕсли;
		Если ВключатьГрупповыеУпаковки Тогда
			СписокВыбора.Добавить(
			ПредопределенноеЗначение(
				"Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияБезВЕТИСГрупповаяУпаковка"));
		КонецЕсли;
		Если ВключатьНаборы Тогда
			СписокВыбора.Добавить(
			ПредопределенноеЗначение(
				"Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияБезВЕТИСНабор"));
		КонецЕсли;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность") Тогда
		Если ВключатьИндивидуальныеУпаковки Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ЛегкаяПромышленность"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ЛегкаяПромышленностьКомплект"));
		КонецЕсли;
		Если ВключатьНаборы Тогда
			СписокВыбора.Добавить(
					ПредопределенноеЗначение(
						"Перечисление.ШаблоныКодовМаркировкиСУЗ.ЛегкаяПромышленностьНабор"));
		КонецЕсли;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Шины") Тогда
		Если ВключатьИндивидуальныеУпаковки Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.Шины"));
		КонецЕсли;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Фотоаппараты") Тогда
		Если ВключатьИндивидуальныеУпаковки Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.Фотоаппараты"));
		КонецЕсли;
		Если ВключатьНаборы Тогда
			СписокВыбора.Добавить(
					ПредопределенноеЗначение(
						"Перечисление.ШаблоныКодовМаркировкиСУЗ.ФотоаппаратыНабор"));
		КонецЕсли;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Велосипеды") Тогда
		Если ВключатьИндивидуальныеУпаковки Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.Велосипеды"));
		КонецЕсли;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КреслаКоляски")
			Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТехническиеСредстваРеабилитации")
			Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МедицинскиеИзделия") Тогда
		Если ВключатьИндивидуальныеУпаковки Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КреслаКоляски"));
		КонецЕсли;
		Если ВключатьГрупповыеУпаковки Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КреслаКоляскиГрупповаяУпаковка"));
		КонецЕсли;
		Если ВключатьНаборы Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КреслаКоляскиНабор"));
		КонецЕсли;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Духи") Тогда
		Если ВключатьИндивидуальныеУпаковки Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.Духи"));
		КонецЕсли;
		Если ВключатьНаборы Тогда
			СписокВыбора.Добавить(
					ПредопределенноеЗначение(
						"Перечисление.ШаблоныКодовМаркировкиСУЗ.ДухиНабор"));
		КонецЕсли;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АльтернативныйТабак") Тогда
		Если ВключатьИндивидуальныеУпаковки Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АльтернативныйТабакПачка"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АльтернативныйТабакПачкаGS1"));
		КонецЕсли;
		Если ВключатьГрупповыеУпаковки Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АльтернативныйТабакБлок"));
		КонецЕсли;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.НикотиносодержащаяПродукция") Тогда
		Если ВключатьИндивидуальныеУпаковки Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.НикотиносодержащаяПродукцияПачка"));
		КонецЕсли;
		Если ВключатьГрупповыеУпаковки Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.НикотиносодержащаяПродукцияБлок"));
		КонецЕсли;
		Если ВключатьНаборы Тогда
			СписокВыбора.Добавить(
					ПредопределенноеЗначение(
						"Перечисление.ШаблоныКодовМаркировкиСУЗ.НикотиносодержащаяПродукцияНабор"));
		КонецЕсли;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.УпакованнаяВода") Тогда
		Если ВключатьИндивидуальныеУпаковки Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.УпакованнаяВода"));
		КонецЕсли;
		Если ВключатьГрупповыеУпаковки Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.УпакованнаяВодаГрупповаяУпаковка"));
		КонецЕсли;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Антисептики") Тогда
		Если ВключатьИндивидуальныеУпаковки Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АнтисептикиСтандартныйКМ"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.Антисептики"));
		КонецЕсли;
		Если ВключатьГрупповыеУпаковки Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АнтисептикиГрупповаяУпаковкаСтандартныйКМ"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АнтисептикиГрупповаяУпаковка"));
		КонецЕсли;
		Если ВключатьНаборы Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АнтисептикиНаборСтандартныйКМ"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АнтисептикиНабор"));
		КонецЕсли;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БАДы") Тогда
		Если ВключатьИндивидуальныеУпаковки Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БАДыСтандартныйКМ"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БАДы"));
		КонецЕсли;
		Если ВключатьГрупповыеУпаковки Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БАДыГрупповаяУпаковкаСтандартныйКМ"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БАДыГрупповаяУпаковка"));
		КонецЕсли;
		Если ВключатьНаборы Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БАДыНаборСтандартныйКМ"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БАДыНабор"));
		КонецЕсли;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Пиво")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПивоВПотребительскихУпаковках") Тогда
		Если ВключатьИндивидуальныеУпаковки Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.Пиво"));
		КонецЕсли;
		Если ВключатьГрупповыеУпаковки Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПивоГрупповаяУпаковка"));
		КонецЕсли;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха") Тогда
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПродукцияИзНатуральногоМеха"));
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.СоковаяПродукция")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БезалкогольныеНапитки") Тогда
		Если ВключатьИндивидуальныеУпаковки Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.СоковаяПродукция"));
		КонецЕсли;
		Если ВключатьГрупповыеУпаковки Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.СоковаяПродукцияГрупповаяУпаковка"));
		КонецЕсли;
		Если ВключатьНаборы Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.СоковаяПродукцияНабор"));
		КонецЕсли;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БезалкогольноеПиво") Тогда
		Если ВключатьИндивидуальныеУпаковки Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БезалкогольноеПиво"));
		КонецЕсли;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МорепродуктыПодконтрольныеВЕТИС") Тогда
		Если ВключатьИндивидуальныеУпаковки Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МорепродуктыСтандартныйКМ"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.Морепродукты"));
		КонецЕсли;
		Если ВключатьГрупповыеУпаковки Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МорепродуктыГрупповаяУпаковкаСтандартныйКМ"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МорепродуктыГрупповаяУпаковка"));
		КонецЕсли;
		
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхПодконтрольныеВЕТИС") Тогда
		Если ВключатьИндивидуальныеУпаковки Тогда
			Если ОбщегоНазначенияИСМПКлиентСервер.КормаДляЖивотныхПодконтрольныеВЕТИСИспользуетУкороченныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КормаДляЖивотных"));
			КонецЕсли;
			Если ОбщегоНазначенияИСМПКлиентСервер.КормаДляЖивотныхПодконтрольныеВЕТИСИспользуетСтандартныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КормаДляЖивотныхСтандартныйКМ"));
			КонецЕсли;
		КонецЕсли;
		Если ВключатьГрупповыеУпаковки
			И ОбщегоНазначенияИСМПКлиентСервер.КормаДляЖивотныхПодконтрольныеВЕТИСИспользуетГрупповуюУпаковку() Тогда
			Если ОбщегоНазначенияИСМПКлиентСервер.КормаДляЖивотныхПодконтрольныеВЕТИСИспользуетУкороченныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КормаДляЖивотныхГрупповаяУпаковка"));
			КонецЕсли;
			Если ОбщегоНазначенияИСМПКлиентСервер.КормаДляЖивотныхПодконтрольныеВЕТИСИспользуетСтандартныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КормаДляЖивотныхГрупповаяУпаковкаСтандартныйКМ"));
			КонецЕсли;
		КонецЕсли;
		Если ВключатьНаборы
			И ОбщегоНазначенияИСМПКлиентСервер.КормаДляЖивотныхПодконтрольныеВЕТИСИспользуетНабор() Тогда
			Если ОбщегоНазначенияИСМПКлиентСервер.КормаДляЖивотныхПодконтрольныеВЕТИСИспользуетУкороченныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КормаДляЖивотныхНабор"));
			КонецЕсли;
			Если ОбщегоНазначенияИСМПКлиентСервер.КормаДляЖивотныхПодконтрольныеВЕТИСИспользуетСтандартныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КормаДляЖивотныхНаборСтандартныйКМ"));
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхБезВЕТИС") Тогда
		Если ВключатьИндивидуальныеУпаковки Тогда
			Если ОбщегоНазначенияИСМПКлиентСервер.КормаДляЖивотныхБезВЕТИСИспользуетУкороченныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КормаДляЖивотныхБезВЕТИС"));
			КонецЕсли;
			Если ОбщегоНазначенияИСМПКлиентСервер.КормаДляЖивотныхБезВЕТИСИспользуетСтандартныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КормаДляЖивотныхБезВЕТИССтандартныйКМ"));
			КонецЕсли;
		КонецЕсли;
		Если ВключатьГрупповыеУпаковки
			И ОбщегоНазначенияИСМПКлиентСервер.КормаДляЖивотныхБезВЕТИСИспользуетГрупповуюУпаковку() Тогда
			Если ОбщегоНазначенияИСМПКлиентСервер.КормаДляЖивотныхБезВЕТИСИспользуетУкороченныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КормаДляЖивотныхБезВЕТИСГрупповаяУпаковка"));
			КонецЕсли;
			Если ОбщегоНазначенияИСМПКлиентСервер.КормаДляЖивотныхБезВЕТИСИспользуетСтандартныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КормаДляЖивотныхБезВЕТИСГрупповаяУпаковкаСтандартныйКМ"));
			КонецЕсли;
		КонецЕсли;
		Если ВключатьНаборы
			И ОбщегоНазначенияИСМПКлиентСервер.КормаДляЖивотныхБезВЕТИСИспользуетНабор() Тогда
			Если ОбщегоНазначенияИСМПКлиентСервер.КормаДляЖивотныхБезВЕТИСИспользуетУкороченныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КормаДляЖивотныхБезВЕТИСНабор"));
			КонецЕсли;
			Если ОбщегоНазначенияИСМПКлиентСервер.КормаДляЖивотныхБезВЕТИСИспользуетСтандартныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КормаДляЖивотныхБезВЕТИСНаборСтандартныйКМ"));
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МясоПодконтрольноеВЕТИС") Тогда
		Если ВключатьИндивидуальныеУпаковки Тогда
			Если ОбщегоНазначенияИСМПКлиентСервер.МясоПодконтрольноеВЕТИСИспользуетУкороченныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.Мясо"));
			КонецЕсли;
			Если ОбщегоНазначенияИСМПКлиентСервер.МясоПодконтрольноеВЕТИСИспользуетСтандартныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МясоСтандартныйКМ"));
			КонецЕсли;
		КонецЕсли;
		Если ВключатьГрупповыеУпаковки
			И ОбщегоНазначенияИСМПКлиентСервер.МясоПодконтрольноеВЕТИСИспользуетГрупповуюУпаковку() Тогда
			Если ОбщегоНазначенияИСМПКлиентСервер.МясоПодконтрольноеВЕТИСИспользуетУкороченныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МясоГрупповаяУпаковка"));
			КонецЕсли;
			Если ОбщегоНазначенияИСМПКлиентСервер.МясоПодконтрольноеВЕТИСИспользуетСтандартныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МясоГрупповаяУпаковкаСтандартныйКМ"));
			КонецЕсли;
		КонецЕсли;
		Если ВключатьНаборы
			И ОбщегоНазначенияИСМПКлиентСервер.МясоПодконтрольноеВЕТИСИспользуетНабор() Тогда
			Если ОбщегоНазначенияИСМПКлиентСервер.МясоПодконтрольноеВЕТИСИспользуетУкороченныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МясоНабор"));
			КонецЕсли;
			Если ОбщегоНазначенияИСМПКлиентСервер.МясоПодконтрольноеВЕТИСИспользуетСтандартныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МясоНаборСтандартныйКМ"));
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ВетеринарныеПрепараты") Тогда
		Если ВключатьИндивидуальныеУпаковки Тогда
			Если ОбщегоНазначенияИСМПКлиентСервер.ВетеринарныеПрепаратыИспользуетУкороченныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ВетеринарныеПрепараты"));
			КонецЕсли;
			Если ОбщегоНазначенияИСМПКлиентСервер.ВетеринарныеПрепаратыИспользуетСтандартныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ВетеринарныеПрепаратыСтандартныйКМ"));
			КонецЕсли;
		КонецЕсли;
		Если ВключатьГрупповыеУпаковки
			И ОбщегоНазначенияИСМПКлиентСервер.ВетеринарныеПрепаратыИспользуетГрупповуюУпаковку() Тогда
			Если ОбщегоНазначенияИСМПКлиентСервер.ВетеринарныеПрепаратыИспользуетУкороченныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ВетеринарныеПрепаратыГрупповаяУпаковка"));
			КонецЕсли;
			Если ОбщегоНазначенияИСМПКлиентСервер.ВетеринарныеПрепаратыИспользуетСтандартныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ВетеринарныеПрепаратыГрупповаяУпаковкаСтандартныйКМ"));
			КонецЕсли;
		КонецЕсли;
		Если ВключатьНаборы
			И ОбщегоНазначенияИСМПКлиентСервер.ВетеринарныеПрепаратыИспользуетНабор() Тогда
			Если ОбщегоНазначенияИСМПКлиентСервер.ВетеринарныеПрепаратыИспользуетУкороченныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ВетеринарныеПрепаратыНабор"));
			КонецЕсли;
			Если ОбщегоНазначенияИСМПКлиентСервер.ВетеринарныеПрепаратыИспользуетСтандартныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ВетеринарныеПрепаратыНаборСтандартныйКМ"));
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ИгрыИИгрушкиДляДетей") Тогда
		Если ВключатьИндивидуальныеУпаковки Тогда
			Если ОбщегоНазначенияИСМПКлиентСервер.ИгрыИИгрушкиДляДетейИспользуетУкороченныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ИгрыИИгрушкиДляДетей"));
			КонецЕсли;
			Если ОбщегоНазначенияИСМПКлиентСервер.ИгрыИИгрушкиДляДетейИспользуетСтандартныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ИгрыИИгрушкиДляДетейСтандартныйКМ"));
			КонецЕсли;
		КонецЕсли;
		Если ВключатьГрупповыеУпаковки
			И ОбщегоНазначенияИСМПКлиентСервер.ИгрыИИгрушкиДляДетейИспользуетГрупповуюУпаковку() Тогда
			Если ОбщегоНазначенияИСМПКлиентСервер.ИгрыИИгрушкиДляДетейИспользуетУкороченныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ИгрыИИгрушкиДляДетейГрупповаяУпаковка"));
			КонецЕсли;
			Если ОбщегоНазначенияИСМПКлиентСервер.ИгрыИИгрушкиДляДетейИспользуетСтандартныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ИгрыИИгрушкиДляДетейГрупповаяУпаковкаСтандартныйКМ"));
			КонецЕсли;
		КонецЕсли;
		Если ВключатьНаборы
			И ОбщегоНазначенияИСМПКлиентСервер.ИгрыИИгрушкиДляДетейИспользуетНабор() Тогда
			Если ОбщегоНазначенияИСМПКлиентСервер.ИгрыИИгрушкиДляДетейИспользуетУкороченныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ИгрыИИгрушкиДляДетейНабор"));
			КонецЕсли;
			Если ОбщегоНазначенияИСМПКлиентСервер.ИгрыИИгрушкиДляДетейИспользуетСтандартныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ИгрыИИгрушкиДляДетейНаборСтандартныйКМ"));
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.РадиоэлектроннаяПродукция") Тогда
		Если ВключатьИндивидуальныеУпаковки Тогда
			Если ОбщегоНазначенияИСМПКлиентСервер.РадиоэлектроннаяПродукцияИспользуетУкороченныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.РадиоэлектроннаяПродукция"));
			КонецЕсли;
			Если ОбщегоНазначенияИСМПКлиентСервер.РадиоэлектроннаяПродукцияИспользуетСтандартныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.РадиоэлектроннаяПродукцияСтандартныйКМ"));
			КонецЕсли;
		КонецЕсли;
		Если ВключатьГрупповыеУпаковки
			И ОбщегоНазначенияИСМПКлиентСервер.РадиоэлектроннаяПродукцияИспользуетГрупповуюУпаковку() Тогда
			Если ОбщегоНазначенияИСМПКлиентСервер.РадиоэлектроннаяПродукцияИспользуетУкороченныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.РадиоэлектроннаяПродукцияГрупповаяУпаковка"));
			КонецЕсли;
			Если ОбщегоНазначенияИСМПКлиентСервер.РадиоэлектроннаяПродукцияИспользуетСтандартныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.РадиоэлектроннаяПродукцияГрупповаяУпаковкаСтандартныйКМ"));
			КонецЕсли;
		КонецЕсли;
		Если ВключатьНаборы
			И ОбщегоНазначенияИСМПКлиентСервер.РадиоэлектроннаяПродукцияИспользуетНабор() Тогда
			Если ОбщегоНазначенияИСМПКлиентСервер.РадиоэлектроннаяПродукцияИспользуетУкороченныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.РадиоэлектроннаяПродукцияНабор"));
			КонецЕсли;
			Если ОбщегоНазначенияИСМПКлиентСервер.РадиоэлектроннаяПродукцияИспользуетСтандартныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.РадиоэлектроннаяПродукцияНаборСтандартныйКМ"));
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТитановаяМеталлопродукция") Тогда
		Если ВключатьИндивидуальныеУпаковки Тогда
			Если ОбщегоНазначенияИСМПКлиентСервер.ТитановаяМеталлопродукцияИспользуетУкороченныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ТитановаяМеталлопродукция"));
			КонецЕсли;
			Если ОбщегоНазначенияИСМПКлиентСервер.ТитановаяМеталлопродукцияИспользуетСтандартныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ТитановаяМеталлопродукцияСтандартныйКМ"));
			КонецЕсли;
		КонецЕсли;
		Если ВключатьГрупповыеУпаковки
			И ОбщегоНазначенияИСМПКлиентСервер.ТитановаяМеталлопродукцияИспользуетГрупповуюУпаковку() Тогда
			Если ОбщегоНазначенияИСМПКлиентСервер.ТитановаяМеталлопродукцияИспользуетУкороченныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ТитановаяМеталлопродукцияГрупповаяУпаковка"));
			КонецЕсли;
			Если ОбщегоНазначенияИСМПКлиентСервер.ТитановаяМеталлопродукцияИспользуетСтандартныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ТитановаяМеталлопродукцияГрупповаяУпаковкаСтандартныйКМ"));
			КонецЕсли;
		КонецЕсли;
		Если ВключатьНаборы
			И ОбщегоНазначенияИСМПКлиентСервер.ТитановаяМеталлопродукцияИспользуетНабор() Тогда
			Если ОбщегоНазначенияИСМПКлиентСервер.ТитановаяМеталлопродукцияИспользуетУкороченныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ТитановаяМеталлопродукцияНабор"));
			КонецЕсли;
			Если ОбщегоНазначенияИСМПКлиентСервер.ТитановаяМеталлопродукцияИспользуетСтандартныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ТитановаяМеталлопродукцияНаборСтандартныйКМ"));
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КонсервированнаяПродукцияПодконтрольнаяВЕТИС") Тогда
		Если ВключатьИндивидуальныеУпаковки Тогда
			Если ОбщегоНазначенияИСМПКлиентСервер.КонсервированнаяПродукцияПодконтрольнаяВЕТИСИспользуетУкороченныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КонсервированнаяПродукция"));
			КонецЕсли;
			Если ОбщегоНазначенияИСМПКлиентСервер.КонсервированнаяПродукцияПодконтрольнаяВЕТИСИспользуетСтандартныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КонсервированнаяПродукцияСтандартныйКМ"));
			КонецЕсли;
		КонецЕсли;
		Если ВключатьГрупповыеУпаковки
			И ОбщегоНазначенияИСМПКлиентСервер.КонсервированнаяПродукцияПодконтрольнаяВЕТИСИспользуетГрупповуюУпаковку() Тогда
			Если ОбщегоНазначенияИСМПКлиентСервер.КонсервированнаяПродукцияПодконтрольнаяВЕТИСИспользуетУкороченныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КонсервированнаяПродукцияГрупповаяУпаковка"));
			КонецЕсли;
			Если ОбщегоНазначенияИСМПКлиентСервер.КонсервированнаяПродукцияПодконтрольнаяВЕТИСИспользуетСтандартныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КонсервированнаяПродукцияГрупповаяУпаковкаСтандартныйКМ"));
			КонецЕсли;
		КонецЕсли;
		Если ВключатьНаборы
			И ОбщегоНазначенияИСМПКлиентСервер.КонсервированнаяПродукцияПодконтрольнаяВЕТИСИспользуетНабор() Тогда
			Если ОбщегоНазначенияИСМПКлиентСервер.КонсервированнаяПродукцияПодконтрольнаяВЕТИСИспользуетУкороченныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КонсервированнаяПродукцияНабор"));
			КонецЕсли;
			Если ОбщегоНазначенияИСМПКлиентСервер.КонсервированнаяПродукцияПодконтрольнаяВЕТИСИспользуетСтандартныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КонсервированнаяПродукцияНаборСтандартныйКМ"));
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КонсервированнаяПродукцияБезВЕТИС") Тогда
		Если ВключатьИндивидуальныеУпаковки Тогда
			Если ОбщегоНазначенияИСМПКлиентСервер.КонсервированнаяПродукцияБезВЕТИСИспользуетУкороченныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КонсервированнаяПродукцияБезВЕТИС"));
			КонецЕсли;
			Если ОбщегоНазначенияИСМПКлиентСервер.КонсервированнаяПродукцияБезВЕТИСИспользуетСтандартныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КонсервированнаяПродукцияБезВЕТИССтандартныйКМ"));
			КонецЕсли;
		КонецЕсли;
		Если ВключатьГрупповыеУпаковки
			И ОбщегоНазначенияИСМПКлиентСервер.КонсервированнаяПродукцияБезВЕТИСИспользуетГрупповуюУпаковку() Тогда
			Если ОбщегоНазначенияИСМПКлиентСервер.КонсервированнаяПродукцияБезВЕТИСИспользуетУкороченныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КонсервированнаяПродукцияБезВЕТИСГрупповаяУпаковка"));
			КонецЕсли;
			Если ОбщегоНазначенияИСМПКлиентСервер.КонсервированнаяПродукцияБезВЕТИСИспользуетСтандартныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КонсервированнаяПродукцияБезВЕТИСГрупповаяУпаковкаСтандартныйКМ"));
			КонецЕсли;
		КонецЕсли;
		Если ВключатьНаборы
			И ОбщегоНазначенияИСМПКлиентСервер.КонсервированнаяПродукцияБезВЕТИСИспользуетНабор() Тогда
			Если ОбщегоНазначенияИСМПКлиентСервер.КонсервированнаяПродукцияБезВЕТИСИспользуетУкороченныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КонсервированнаяПродукцияБезВЕТИСНабор"));
			КонецЕсли;
			Если ОбщегоНазначенияИСМПКлиентСервер.КонсервированнаяПродукцияБезВЕТИСИспользуетСтандартныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КонсервированнаяПродукцияБезВЕТИСНаборСтандартныйКМ"));
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.РастительныеМасла") Тогда
		Если ВключатьИндивидуальныеУпаковки Тогда
			Если ОбщегоНазначенияИСМПКлиентСервер.РастительныеМаслаИспользуетУкороченныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.РастительныеМасла"));
			КонецЕсли;
			Если ОбщегоНазначенияИСМПКлиентСервер.РастительныеМаслаИспользуетСтандартныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.РастительныеМаслаСтандартныйКМ"));
			КонецЕсли;
		КонецЕсли;
		Если ВключатьГрупповыеУпаковки
			И ОбщегоНазначенияИСМПКлиентСервер.РастительныеМаслаИспользуетГрупповуюУпаковку() Тогда
			Если ОбщегоНазначенияИСМПКлиентСервер.РастительныеМаслаИспользуетУкороченныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.РастительныеМаслаГрупповаяУпаковка"));
			КонецЕсли;
			Если ОбщегоНазначенияИСМПКлиентСервер.РастительныеМаслаИспользуетСтандартныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.РастительныеМаслаГрупповаяУпаковкаСтандартныйКМ"));
			КонецЕсли;
		КонецЕсли;
		Если ВключатьНаборы
			И ОбщегоНазначенияИСМПКлиентСервер.РастительныеМаслаИспользуетНабор() Тогда
			Если ОбщегоНазначенияИСМПКлиентСервер.РастительныеМаслаИспользуетУкороченныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.РастительныеМаслаНабор"));
			КонецЕсли;
			Если ОбщегоНазначенияИСМПКлиентСервер.РастительныеМаслаИспользуетСтандартныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.РастительныеМаслаНаборСтандартныйКМ"));
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ОптоволокноИОптоволоконнаяПродукция") Тогда
		Если ВключатьИндивидуальныеУпаковки Тогда
			Если ОбщегоНазначенияИСМПКлиентСервер.ОптоволокноИОптоволоконнаяПродукцияИспользуетУкороченныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ОптоволокноИОптоволоконнаяПродукция"));
			КонецЕсли;
			Если ОбщегоНазначенияИСМПКлиентСервер.ОптоволокноИОптоволоконнаяПродукцияИспользуетСтандартныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ОптоволокноИОптоволоконнаяПродукцияСтандартныйКМ"));
			КонецЕсли;
		КонецЕсли;
		Если ВключатьГрупповыеУпаковки
			И ОбщегоНазначенияИСМПКлиентСервер.ОптоволокноИОптоволоконнаяПродукцияИспользуетГрупповуюУпаковку() Тогда
			Если ОбщегоНазначенияИСМПКлиентСервер.ОптоволокноИОптоволоконнаяПродукцияИспользуетУкороченныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ОптоволокноИОптоволоконнаяПродукцияГрупповаяУпаковка"));
			КонецЕсли;
			Если ОбщегоНазначенияИСМПКлиентСервер.ОптоволокноИОптоволоконнаяПродукцияИспользуетСтандартныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ОптоволокноИОптоволоконнаяПродукцияГрупповаяУпаковкаСтандартныйКМ"));
			КонецЕсли;
		КонецЕсли;
		Если ВключатьНаборы
			И ОбщегоНазначенияИСМПКлиентСервер.ОптоволокноИОптоволоконнаяПродукцияИспользуетНабор() Тогда
			Если ОбщегоНазначенияИСМПКлиентСервер.ОптоволокноИОптоволоконнаяПродукцияИспользуетУкороченныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ОптоволокноИОптоволоконнаяПродукцияНабор"));
			КонецЕсли;
			Если ОбщегоНазначенияИСМПКлиентСервер.ОптоволокноИОптоволоконнаяПродукцияИспользуетСтандартныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ОптоволокноИОптоволоконнаяПродукцияНаборСтандартныйКМ"));
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПарфюмерныеИКосметическиеСредстваИБытоваяХимия") Тогда
		Если ВключатьИндивидуальныеУпаковки Тогда
			Если ОбщегоНазначенияИСМПКлиентСервер.ПарфюмерныеИКосметическиеСредстваИБытоваяХимияИспользуетУкороченныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПарфюмерныеИКосметическиеСредстваИБытоваяХимия"));
			КонецЕсли;
			Если ОбщегоНазначенияИСМПКлиентСервер.ПарфюмерныеИКосметическиеСредстваИБытоваяХимияИспользуетСтандартныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПарфюмерныеИКосметическиеСредстваИБытоваяХимияСтандартныйКМ"));
			КонецЕсли;
		КонецЕсли;
		Если ВключатьГрупповыеУпаковки
			И ОбщегоНазначенияИСМПКлиентСервер.ПарфюмерныеИКосметическиеСредстваИБытоваяХимияИспользуетГрупповуюУпаковку() Тогда
			Если ОбщегоНазначенияИСМПКлиентСервер.ПарфюмерныеИКосметическиеСредстваИБытоваяХимияИспользуетУкороченныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПарфюмерныеИКосметическиеСредстваИБытоваяХимияГрупповаяУпаковка"));
			КонецЕсли;
			Если ОбщегоНазначенияИСМПКлиентСервер.ПарфюмерныеИКосметическиеСредстваИБытоваяХимияИспользуетСтандартныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПарфюмерныеИКосметическиеСредстваИБытоваяХимияГрупповаяУпаковкаСтандартныйКМ"));
			КонецЕсли;
		КонецЕсли;
		Если ВключатьНаборы
			И ОбщегоНазначенияИСМПКлиентСервер.ПарфюмерныеИКосметическиеСредстваИБытоваяХимияИспользуетНабор() Тогда
			Если ОбщегоНазначенияИСМПКлиентСервер.ПарфюмерныеИКосметическиеСредстваИБытоваяХимияИспользуетУкороченныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПарфюмерныеИКосметическиеСредстваИБытоваяХимияНабор"));
			КонецЕсли;
			Если ОбщегоНазначенияИСМПКлиентСервер.ПарфюмерныеИКосметическиеСредстваИБытоваяХимияИспользуетСтандартныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПарфюмерныеИКосметическиеСредстваИБытоваяХимияНаборСтандартныйКМ"));
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПечатнаяПродукция") Тогда
		Если ВключатьИндивидуальныеУпаковки Тогда
			Если ОбщегоНазначенияИСМПКлиентСервер.ПечатнаяПродукцияИспользуетУкороченныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПечатнаяПродукция"));
			КонецЕсли;
			Если ОбщегоНазначенияИСМПКлиентСервер.ПечатнаяПродукцияИспользуетСтандартныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПечатнаяПродукцияСтандартныйКМ"));
			КонецЕсли;
		КонецЕсли;
		Если ВключатьГрупповыеУпаковки
			И ОбщегоНазначенияИСМПКлиентСервер.ПечатнаяПродукцияИспользуетГрупповуюУпаковку() Тогда
			Если ОбщегоНазначенияИСМПКлиентСервер.ПечатнаяПродукцияИспользуетУкороченныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПечатнаяПродукцияГрупповаяУпаковка"));
			КонецЕсли;
			Если ОбщегоНазначенияИСМПКлиентСервер.ПечатнаяПродукцияИспользуетСтандартныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПечатнаяПродукцияГрупповаяУпаковкаСтандартныйКМ"));
			КонецЕсли;
		КонецЕсли;
		Если ВключатьНаборы
			И ОбщегоНазначенияИСМПКлиентСервер.ПечатнаяПродукцияИспользуетНабор() Тогда
			Если ОбщегоНазначенияИСМПКлиентСервер.ПечатнаяПродукцияИспользуетУкороченныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПечатнаяПродукцияНабор"));
			КонецЕсли;
			Если ОбщегоНазначенияИСМПКлиентСервер.ПечатнаяПродукцияИспользуетСтандартныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПечатнаяПродукцияНаборСтандартныйКМ"));
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.СтроительныеМатериалы") Тогда
		Если ВключатьИндивидуальныеУпаковки Тогда
			Если ОбщегоНазначенияИСМПКлиентСервер.СтроительныеМатериалыИспользуетУкороченныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.СтроительныеМатериалы"));
			КонецЕсли;
			Если ОбщегоНазначенияИСМПКлиентСервер.СтроительныеМатериалыИспользуетСтандартныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.СтроительныеМатериалыСтандартныйКМ"));
			КонецЕсли;
		КонецЕсли;
		Если ВключатьГрупповыеУпаковки
			И ОбщегоНазначенияИСМПКлиентСервер.СтроительныеМатериалыИспользуетГрупповуюУпаковку() Тогда
			Если ОбщегоНазначенияИСМПКлиентСервер.СтроительныеМатериалыИспользуетУкороченныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.СтроительныеМатериалыГрупповаяУпаковка"));
			КонецЕсли;
			Если ОбщегоНазначенияИСМПКлиентСервер.СтроительныеМатериалыИспользуетСтандартныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.СтроительныеМатериалыГрупповаяУпаковкаСтандартныйКМ"));
			КонецЕсли;
		КонецЕсли;
		Если ВключатьНаборы
			И ОбщегоНазначенияИСМПКлиентСервер.СтроительныеМатериалыИспользуетНабор() Тогда
			Если ОбщегоНазначенияИСМПКлиентСервер.СтроительныеМатериалыИспользуетУкороченныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.СтроительныеМатериалыНабор"));
			КонецЕсли;
			Если ОбщегоНазначенияИСМПКлиентСервер.СтроительныеМатериалыИспользуетСтандартныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.СтроительныеМатериалыНаборСтандартныйКМ"));
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ОтопительныеПриборы") Тогда
		Если ВключатьИндивидуальныеУпаковки Тогда
			Если ОбщегоНазначенияИСМПКлиентСервер.ОтопительныеПриборыИспользуетУкороченныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ОтопительныеПриборы"));
			КонецЕсли;
			Если ОбщегоНазначенияИСМПКлиентСервер.ОтопительныеПриборыИспользуетСтандартныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ОтопительныеПриборыСтандартныйКМ"));
			КонецЕсли;
		КонецЕсли;
		Если ВключатьГрупповыеУпаковки
			И ОбщегоНазначенияИСМПКлиентСервер.ОтопительныеПриборыИспользуетГрупповуюУпаковку() Тогда
			Если ОбщегоНазначенияИСМПКлиентСервер.ОтопительныеПриборыИспользуетУкороченныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ОтопительныеПриборыГрупповаяУпаковка"));
			КонецЕсли;
			Если ОбщегоНазначенияИСМПКлиентСервер.ОтопительныеПриборыИспользуетСтандартныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ОтопительныеПриборыГрупповаяУпаковкаСтандартныйКМ"));
			КонецЕсли;
		КонецЕсли;
		Если ВключатьНаборы
			И ОбщегоНазначенияИСМПКлиентСервер.ОтопительныеПриборыИспользуетНабор() Тогда
			Если ОбщегоНазначенияИСМПКлиентСервер.ОтопительныеПриборыИспользуетУкороченныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ОтопительныеПриборыНабор"));
			КонецЕсли;
			Если ОбщегоНазначенияИСМПКлиентСервер.ОтопительныеПриборыИспользуетСтандартныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ОтопительныеПриборыНаборСтандартныйКМ"));
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Бакалея") Тогда
		Если ВключатьИндивидуальныеУпаковки Тогда
			Если ОбщегоНазначенияИСМПКлиентСервер.БакалеяИспользуетУкороченныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.Бакалея"));
			КонецЕсли;
			Если ОбщегоНазначенияИСМПКлиентСервер.БакалеяИспользуетСтандартныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БакалеяСтандартныйКМ"));
			КонецЕсли;
		КонецЕсли;
		Если ВключатьГрупповыеУпаковки
			И ОбщегоНазначенияИСМПКлиентСервер.БакалеяИспользуетГрупповуюУпаковку() Тогда
			Если ОбщегоНазначенияИСМПКлиентСервер.БакалеяИспользуетУкороченныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БакалеяГрупповаяУпаковка"));
			КонецЕсли;
			Если ОбщегоНазначенияИСМПКлиентСервер.БакалеяИспользуетСтандартныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БакалеяГрупповаяУпаковкаСтандартныйКМ"));
			КонецЕсли;
		КонецЕсли;
		Если ВключатьНаборы
			И ОбщегоНазначенияИСМПКлиентСервер.БакалеяИспользуетНабор() Тогда
			Если ОбщегоНазначенияИСМПКлиентСервер.БакалеяИспользуетУкороченныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БакалеяНабор"));
			КонецЕсли;
			Если ОбщегоНазначенияИСМПКлиентСервер.БакалеяИспользуетСтандартныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БакалеяСтандартныйКМ"));
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АлкогольнаяПродукцияДо9Процентов") Тогда
		Если ВключатьИндивидуальныеУпаковки Тогда
			Если ОбщегоНазначенияИСМПКлиентСервер.АлкогольнаяПродукцияДо9ПроцентовИспользуетУкороченныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АлкогольнаяПродукцияДо9Процентов"));
			КонецЕсли;
			Если ОбщегоНазначенияИСМПКлиентСервер.АлкогольнаяПродукцияДо9ПроцентовИспользуетСтандартныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АлкогольнаяПродукцияДо9ПроцентовСтандартныйКМ"));
			КонецЕсли;
		КонецЕсли;
		Если ВключатьГрупповыеУпаковки
			И ОбщегоНазначенияИСМПКлиентСервер.АлкогольнаяПродукцияДо9ПроцентовИспользуетГрупповуюУпаковку() Тогда
			Если ОбщегоНазначенияИСМПКлиентСервер.АлкогольнаяПродукцияДо9ПроцентовИспользуетУкороченныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АлкогольнаяПродукцияДо9ПроцентовГрупповаяУпаковка"));
			КонецЕсли;
			Если ОбщегоНазначенияИСМПКлиентСервер.АлкогольнаяПродукцияДо9ПроцентовИспользуетСтандартныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АлкогольнаяПродукцияДо9ПроцентовГрупповаяУпаковкаСтандартныйКМ"));
			КонецЕсли;
		КонецЕсли;
		Если ВключатьНаборы
			И ОбщегоНазначенияИСМПКлиентСервер.АлкогольнаяПродукцияДо9ПроцентовИспользуетНабор() Тогда
			Если ОбщегоНазначенияИСМПКлиентСервер.АлкогольнаяПродукцияДо9ПроцентовИспользуетУкороченныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АлкогольнаяПродукцияДо9ПроцентовНабор"));
			КонецЕсли;
			Если ОбщегоНазначенияИСМПКлиентСервер.АлкогольнаяПродукцияДо9ПроцентовИспользуетСтандартныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АлкогольнаяПродукцияДо9ПроцентовНаборСтандартныйКМ"));
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТелефоныИНоутбуки") Тогда
		Если ВключатьИндивидуальныеУпаковки Тогда
			Если ОбщегоНазначенияИСМПКлиентСервер.ТелефоныИНоутбукиИспользуетУкороченныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ТелефоныИНоутбуки"));
			КонецЕсли;
			Если ОбщегоНазначенияИСМПКлиентСервер.ТелефоныИНоутбукиИспользуетСтандартныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ТелефоныИНоутбукиСтандартныйКМ"));
			КонецЕсли;
		КонецЕсли;
		Если ВключатьГрупповыеУпаковки
			И ОбщегоНазначенияИСМПКлиентСервер.ТелефоныИНоутбукиИспользуетГрупповуюУпаковку() Тогда
			Если ОбщегоНазначенияИСМПКлиентСервер.ТелефоныИНоутбукиИспользуетУкороченныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ТелефоныИНоутбукиГрупповаяУпаковка"));
			КонецЕсли;
			Если ОбщегоНазначенияИСМПКлиентСервер.ТелефоныИНоутбукиИспользуетСтандартныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ТелефоныИНоутбукиГрупповаяУпаковкаСтандартныйКМ"));
			КонецЕсли;
		КонецЕсли;
		Если ВключатьНаборы
			И ОбщегоНазначенияИСМПКлиентСервер.ТелефоныИНоутбукиИспользуетНабор() Тогда
			Если ОбщегоНазначенияИСМПКлиентСервер.ТелефоныИНоутбукиИспользуетУкороченныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ТелефоныИНоутбукиНабор"));
			КонецЕсли;
			Если ОбщегоНазначенияИСМПКлиентСервер.ТелефоныИНоутбукиИспользуетСтандартныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ТелефоныИНоутбукиСтандартныйКМ"));
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПиротехническиеИзделияИСредстваПожарнойБезопасности") Тогда
		Если ВключатьИндивидуальныеУпаковки Тогда
			Если ОбщегоНазначенияИСМПКлиентСервер.ПиротехническиеИзделияИСредстваПожарнойБезопасностиИспользуетУкороченныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПиротехническиеИзделияИСредстваПожарнойБезопасности"));
			КонецЕсли;
			Если ОбщегоНазначенияИСМПКлиентСервер.ПиротехническиеИзделияИСредстваПожарнойБезопасностиИспользуетСтандартныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПиротехническиеИзделияИСредстваПожарнойБезопасностиСтандартныйКМ"));
			КонецЕсли;
		КонецЕсли;
		Если ВключатьГрупповыеУпаковки
			И ОбщегоНазначенияИСМПКлиентСервер.ПиротехническиеИзделияИСредстваПожарнойБезопасностиИспользуетГрупповуюУпаковку() Тогда
			Если ОбщегоНазначенияИСМПКлиентСервер.ПиротехническиеИзделияИСредстваПожарнойБезопасностиИспользуетУкороченныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПиротехническиеИзделияИСредстваПожарнойБезопасностиГрупповаяУпаковка"));
			КонецЕсли;
			Если ОбщегоНазначенияИСМПКлиентСервер.ПиротехническиеИзделияИСредстваПожарнойБезопасностиИспользуетСтандартныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПиротехническиеИзделияИСредстваПожарнойБезопасностиГрупповаяУпаковкаСтКМ"));
			КонецЕсли;
		КонецЕсли;
		Если ВключатьНаборы
			И ОбщегоНазначенияИСМПКлиентСервер.ПиротехническиеИзделияИСредстваПожарнойБезопасностиИспользуетНабор() Тогда
			Если ОбщегоНазначенияИСМПКлиентСервер.ПиротехническиеИзделияИСредстваПожарнойБезопасностиИспользуетУкороченныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПиротехническиеИзделияИСредстваПожарнойБезопасностиНабор"));
			КонецЕсли;
			Если ОбщегоНазначенияИСМПКлиентСервер.ПиротехническиеИзделияИСредстваПожарнойБезопасностиИспользуетСтандартныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПиротехническиеИзделияИСредстваПожарнойБезопасностиНаборСтандартныйКМ"));
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КабельнаяПродукция") Тогда
		Если ВключатьИндивидуальныеУпаковки Тогда
			Если ОбщегоНазначенияИСМПКлиентСервер.КабельнаяПродукцияИспользуетУкороченныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КабельнаяПродукция"));
			КонецЕсли;
			Если ОбщегоНазначенияИСМПКлиентСервер.КабельнаяПродукцияИспользуетСтандартныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КабельнаяПродукцияСтандартныйКМ"));
			КонецЕсли;
		КонецЕсли;
		Если ВключатьГрупповыеУпаковки
			И ОбщегоНазначенияИСМПКлиентСервер.КабельнаяПродукцияИспользуетГрупповуюУпаковку() Тогда
			Если ОбщегоНазначенияИСМПКлиентСервер.КабельнаяПродукцияИспользуетУкороченныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КабельнаяПродукцияГрупповаяУпаковка"));
			КонецЕсли;
			Если ОбщегоНазначенияИСМПКлиентСервер.КабельнаяПродукцияИспользуетСтандартныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КабельнаяПродукцияГрупповаяУпаковкаСтандартныйКМ"));
			КонецЕсли;
		КонецЕсли;
		Если ВключатьНаборы
			И ОбщегоНазначенияИСМПКлиентСервер.КабельнаяПродукцияИспользуетНабор() Тогда
			Если ОбщегоНазначенияИСМПКлиентСервер.КабельнаяПродукцияИспользуетУкороченныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КабельнаяПродукцияНабор"));
			КонецЕсли;
			Если ОбщегоНазначенияИСМПКлиентСервер.КабельнаяПродукцияИспользуетСтандартныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КабельнаяПродукцияНаборСтандартныйКМ"));
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МоторныеМасла") Тогда
		Если ВключатьИндивидуальныеУпаковки Тогда
			Если ОбщегоНазначенияИСМПКлиентСервер.МоторныеМаслаИспользуетУкороченныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МоторныеМасла"));
			КонецЕсли;
			Если ОбщегоНазначенияИСМПКлиентСервер.МоторныеМаслаИспользуетСтандартныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МоторныеМаслаСтандартныйКМ"));
			КонецЕсли;
		КонецЕсли;
		Если ВключатьГрупповыеУпаковки
			И ОбщегоНазначенияИСМПКлиентСервер.МоторныеМаслаИспользуетГрупповуюУпаковку() Тогда
			Если ОбщегоНазначенияИСМПКлиентСервер.МоторныеМаслаИспользуетУкороченныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МоторныеМаслаГрупповаяУпаковка"));
			КонецЕсли;
			Если ОбщегоНазначенияИСМПКлиентСервер.МоторныеМаслаИспользуетСтандартныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МоторныеМаслаГрупповаяУпаковкаСтандартныйКМ"));
			КонецЕсли;
		КонецЕсли;
		Если ВключатьНаборы
			И ОбщегоНазначенияИСМПКлиентСервер.МоторныеМаслаИспользуетНабор() Тогда
			Если ОбщегоНазначенияИСМПКлиентСервер.МоторныеМаслаИспользуетУкороченныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МоторныеМаслаНабор"));
			КонецЕсли;
			Если ОбщегоНазначенияИСМПКлиентСервер.МоторныеМаслаИспользуетСтандартныйКМ() Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МоторныеМаслаНаборСтандартныйКМ"));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПредставленияШаблонов = ПредставленияШаблоновКодаМаркировки();
	Для Каждого ЭлементСпискаЗначений Из СписокВыбора Цикл
		ЭлементПредставления = ПредставленияШаблонов.НайтиПоЗначению(ЭлементСпискаЗначений.Значение);
		Если ЭлементПредставления <> Неопределено Тогда
			ЭлементСпискаЗначений.Представление = ЭлементПредставления.Представление;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокВыбора;
	
КонецФункции

Функция ШаблоныКодовПоНоменклатуре(Номенклатура, РежимВключенияУпаковокИНаборов = 1) Экспорт
	
	ВидПродукции = ИнтеграцияИСМПВызовСервера.ВидПродукцииПоНоменклатуре(Номенклатура);
	
	Возврат ШаблоныКодовПоВидуПродукции(ВидПродукции, РежимВключенияУпаковокИНаборов);
	
КонецФункции

Функция ПредставлениеGTINОстаткиПоВидуПродукции(Представление, ВидПродукции) Экспорт
	
	Если ЗначениеЗаполнено(Представление) Тогда
		Возврат Представление;
	КонецЕсли;
	
	МассивПредставления = Новый Массив();
	МассивПредставления.Добавить(НСтр("ru = 'Остатки'"));
	Если ЗначениеЗаполнено(ВидПродукции) Тогда
		МассивПредставления.Добавить(ВидПродукции);
	КонецЕсли;
	
	ПредставлениеНовое = СтрСоединить(МассивПредставления, ". ");
	
	Возврат ПредставлениеНовое;
	
КонецФункции

Функция ПредставлениеПустойНоменклатурыПоВидуПродукции(ВходныеДанные, ВидПродукции, Префикс = Неопределено) Экспорт

	Представление = "";

	Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха") Тогда

		Поля = Новый Массив();
		Поля.Добавить("СпособВводаВОборот");
		Поля.Добавить("ВидКИЗ");
		Поля.Добавить("РазмерКИЗ");

		ИсходныеДанные = Новый Структура(СтрСоединить(Поля, ","));
		ЗаполнитьЗначенияСвойств(ИсходныеДанные, ВходныеДанные);

		ИтоговоеЗначение = Новый Массив();
		Если ЗначениеЗаполнено(Префикс) Тогда
			ИтоговоеЗначение.Добавить(Префикс);
		Иначе
			ИтоговоеЗначение.Добавить(НСтр("ru = 'КИЗ без индивидуализации'"));
		КонецЕсли;

		Для Каждого ИмяПоля Из Поля Цикл
			Если ЗначениеЗаполнено(ИсходныеДанные[ИмяПоля]) Тогда
				ИтоговоеЗначение.Добавить(ИсходныеДанные[ИмяПоля]);
			КонецЕсли;
		КонецЦикла;

		Представление = СтрСоединить(ИтоговоеЗначение, ", ");

	КонецЕсли;

	Возврат Представление;

КонецФункции

Функция ПредставлениеКИЗ() Экспорт

	Представление = НСтр("ru = 'КИЗ (без детальной информации)'");

	Возврат Представление;

КонецФункции

Функция КодТНВЭДПрочиеПредметыОдеждыИСМП() Экспорт

	Возврат "4303109080";

КонецФункции

Функция ПредставлениеВидаОперацииИСМП(Операция) Экспорт
	
	Если Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.Агрегация") Тогда
		Возврат НСтр("ru = 'Агрегация'");
	ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС") Тогда
		Возврат НСтр("ru = 'Импорт'");
	ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотИмпортСФТС") Тогда
		Возврат НСтр("ru = 'Импорт с ФТС'");
	ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотИмпортСФТСМех") Тогда
		Возврат НСтр("ru = 'Импорт с ФТС'");
	ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоРФ") Тогда
		Возврат НСтр("ru = 'Производство'");
	ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотКонтрактноеПроизводствоЕАЭС") Тогда
		Возврат НСтр("ru = 'Контрактное производство ЕАЭС'");
	ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговору") Тогда
		Возврат НСтр("ru = 'Контрактное производство (от лица исполнителя)'");
	ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговоруНаСторонеЗаказчика") Тогда
		Возврат НСтр("ru = 'Контрактное производство (от лица заказчика)'");
	ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотПолучениеПродукцииОтФизическихЛиц") Тогда
		Возврат НСтр("ru = 'Получение продукции от физических лиц'");
	ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля") Тогда
		Возврат НСтр("ru = 'Ввоз из ЕАЭС'");
	ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков") Тогда
		Возврат НСтр("ru = 'Маркировка остатков'");
	ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ИндивидуализацияКИЗ") Тогда
		Возврат НСтр("ru = 'Индивидуализация КИЗ'");
	ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ПодтверждениеПоступленияКИЗ") Тогда
		Возврат НСтр("ru = 'Подтверждение поступления КИЗ'");
	Иначе
		Возврат Строка(Операция);
	КонецЕсли;
	
КонецФункции

// Возвращает список операций нанесения.
// 
// Параметры:
//  ПолныйСписок - Булево - Истина, если нужен полный список операций, включая неиспользуемые.
//  ЭтоПродукцияИзНатуральногоМеха - Булево - доступные операции для вид продукции из натурального меха.
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.ВидыОперацийИСМП.
//
Функция ОперацииНанесенияКодовМаркировки(ПолныйСписок = Истина, ЭтоПродукцияИзНатуральногоМеха = Ложь) Экспорт
	
	Результат = Новый Массив;
	
	Если ПолныйСписок Тогда
		Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ОтчетОВерификацииНанесенныхКМ"));
		Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.УдалитьОтчетОПечатиКМ"));
		Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.УдалитьОтчетОПередачеКМНаПринтер"));
		Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.УдалитьОтчетОПередачеКМНаПроизводственнуюЛинию"));
		Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.УдалитьОтчетОПотереРаспечатанныхКМ"));
		Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ИндивидуализацияКИЗ"));
	ИначеЕсли ЭтоПродукцияИзНатуральногоМеха Тогда
		Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ИндивидуализацияКИЗ"));
	Иначе
		Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ОтчетОВерификацииНанесенныхКМ"));
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Вид продукции ИС МП с возможным, но необязательным указанием срока годности в операциях нанесения КМ
// 
// Параметры:
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции
// 
// Возвращаемое значение:
//  Булево - вид продукции не требует обязательного указания срока годности
Функция ЭтоВидПродукцииСоСрокамиГодностиБезОбязательногоЗаполнения(ВидПродукции) Экспорт
	
	Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КреслаКоляски")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТехническиеСредстваРеабилитации")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МедицинскиеИзделия") Тогда
		Возврат Истина;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхПодконтрольныеВЕТИС") Тогда
		Возврат КормаДляЖивотныхПодконтрольныеВЕТИСИспользуетСрокГодностиБезОбязательногоЗаполнения();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхБезВЕТИС") Тогда
		Возврат КормаДляЖивотныхБезВЕТИСИспользуетСрокГодностиБезОбязательногоЗаполнения();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МясоПодконтрольноеВЕТИС") Тогда
		Возврат МясоПодконтрольноеВЕТИСИспользуетСрокГодностиБезОбязательногоЗаполнения();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ВетеринарныеПрепараты") Тогда
		Возврат ВетеринарныеПрепаратыИспользуетСрокГодностиБезОбязательногоЗаполнения();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ИгрыИИгрушкиДляДетей") Тогда
		Возврат ИгрыИИгрушкиДляДетейИспользуетСрокГодностиБезОбязательногоЗаполнения();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.РадиоэлектроннаяПродукция") Тогда
		Возврат РадиоэлектроннаяПродукцияИспользуетСрокГодностиБезОбязательногоЗаполнения();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТитановаяМеталлопродукция") Тогда
		Возврат ТитановаяМеталлопродукцияИспользуетСрокГодностиБезОбязательногоЗаполнения();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КонсервированнаяПродукцияПодконтрольнаяВЕТИС") Тогда
		Возврат КонсервированнаяПродукцияПодконтрольнаяВЕТИСИспользуетСрокГодностиБезОбязательногоЗаполнения();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КонсервированнаяПродукцияБезВЕТИС") Тогда
		Возврат КонсервированнаяПродукцияБезВЕТИСИспользуетСрокГодностиБезОбязательногоЗаполнения();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.РастительныеМасла") Тогда
		Возврат РастительныеМаслаИспользуетСрокГодностиБезОбязательногоЗаполнения();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ОптоволокноИОптоволоконнаяПродукция") Тогда
		Возврат ОптоволокноИОптоволоконнаяПродукцияИспользуетСрокГодностиБезОбязательногоЗаполнения();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПарфюмерныеИКосметическиеСредстваИБытоваяХимия") Тогда
		Возврат ПарфюмерныеИКосметическиеСредстваИБытоваяХимияИспользуетСрокГодностиБезОбязательногоЗаполнения();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПечатнаяПродукция") Тогда
		Возврат ПечатнаяПродукцияИспользуетСрокГодностиБезОбязательногоЗаполнения();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.СтроительныеМатериалы") Тогда
		Возврат СтроительныеМатериалыИспользуетСрокГодностиБезОбязательногоЗаполнения();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ОтопительныеПриборы") Тогда
		Возврат ОтопительныеПриборыИспользуетСрокГодностиБезОбязательногоЗаполнения();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Бакалея") Тогда
		Возврат БакалеяИспользуетСрокГодностиБезОбязательногоЗаполнения();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АлкогольнаяПродукцияДо9Процентов") Тогда
		Возврат АлкогольнаяПродукцияДо9ПроцентовИспользуетСрокГодностиБезОбязательногоЗаполнения();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТелефоныИНоутбуки") Тогда
		Возврат ТелефоныИНоутбукиИспользуетСрокГодностиБезОбязательногоЗаполнения();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПиротехническиеИзделияИСредстваПожарнойБезопасности") Тогда
		Возврат ПиротехническиеИзделияИСредстваПожарнойБезопасностиИспользуетСрокГодностиБезОбязательногоЗаполнения();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КабельнаяПродукция") Тогда
		Возврат КабельнаяПродукцияИспользуетСрокГодностиБезОбязательногоЗаполнения();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МоторныеМасла") Тогда
		Возврат МоторныеМаслаИспользуетСрокГодностиБезОбязательногоЗаполнения();
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Вид продукции ИС МП требует указание даты производства в операциях нанесения КМ
// 
// Параметры:
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции
// 
// Возвращаемое значение:
//  Булево - вид продукции требует указания даты производства
Функция ДляВидаПродукцииИспользуетсяДатаПроизводства(ВидПродукции) Экспорт
	
	Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БАДы")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Антисептики")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КреслаКоляски")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТехническиеСредстваРеабилитации")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МедицинскиеИзделия")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БезалкогольноеПиво")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Пиво")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПивоВПотребительскихУпаковках")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.СоковаяПродукция")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БезалкогольныеНапитки")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МорепродуктыПодконтрольныеВЕТИС")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Велосипеды") Тогда
		Возврат Истина;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхПодконтрольныеВЕТИС") Тогда
		Возврат КормаДляЖивотныхПодконтрольныеВЕТИСИспользуетДатуПроизводства();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхБезВЕТИС") Тогда
		Возврат КормаДляЖивотныхБезВЕТИСИспользуетДатуПроизводства();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МясоПодконтрольноеВЕТИС") Тогда
		Возврат МясоПодконтрольноеВЕТИСИспользуетДатуПроизводства();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ВетеринарныеПрепараты") Тогда
		Возврат ВетеринарныеПрепаратыИспользуетДатуПроизводства();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ИгрыИИгрушкиДляДетей") Тогда
		Возврат ИгрыИИгрушкиДляДетейИспользуетДатуПроизводства();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.РадиоэлектроннаяПродукция") Тогда
		Возврат РадиоэлектроннаяПродукцияИспользуетДатуПроизводства();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТитановаяМеталлопродукция") Тогда
		Возврат ТитановаяМеталлопродукцияИспользуетДатуПроизводства();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КонсервированнаяПродукцияПодконтрольнаяВЕТИС") Тогда
		Возврат КонсервированнаяПродукцияПодконтрольнаяВЕТИСИспользуетДатуПроизводства();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КонсервированнаяПродукцияБезВЕТИС") Тогда
		Возврат КонсервированнаяПродукцияБезВЕТИСИспользуетДатуПроизводства();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.РастительныеМасла") Тогда
		Возврат РастительныеМаслаИспользуетДатуПроизводства();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ОптоволокноИОптоволоконнаяПродукция") Тогда
		Возврат ОптоволокноИОптоволоконнаяПродукцияИспользуетДатуПроизводства();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПарфюмерныеИКосметическиеСредстваИБытоваяХимия") Тогда
		Возврат ПарфюмерныеИКосметическиеСредстваИБытоваяХимияИспользуетДатуПроизводства();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПечатнаяПродукция") Тогда
		Возврат ПечатнаяПродукцияИспользуетДатуПроизводства();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.СтроительныеМатериалы") Тогда
		Возврат СтроительныеМатериалыИспользуетДатуПроизводства();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ОтопительныеПриборы") Тогда
		Возврат ОтопительныеПриборыИспользуетДатуПроизводства();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Бакалея") Тогда
		Возврат БакалеяИспользуетДатуПроизводства();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АлкогольнаяПродукцияДо9Процентов") Тогда
		Возврат АлкогольнаяПродукцияДо9ПроцентовИспользуетДатуПроизводства();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТелефоныИНоутбуки") Тогда
		Возврат ТелефоныИНоутбукиИспользуетДатуПроизводства();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПиротехническиеИзделияИСредстваПожарнойБезопасности") Тогда
		Возврат ПиротехническиеИзделияИСредстваПожарнойБезопасностиИспользуетДатуПроизводства();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КабельнаяПродукция") Тогда
		Возврат КабельнаяПродукцияИспользуетДатуПроизводства();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МоторныеМасла") Тогда
		Возврат МоторныеМаслаИспользуетДатуПроизводства();
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Вид продукции ИС МП требует указание кода ФИАС в операциях нанесения КМ
// 
// Параметры:
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции
// 
// Возвращаемое значение:
//  Булево - вид продукции требует указания кода ФИАС
Функция ДляВидаПродукцииИспользуетсяКодФИАС(ВидПродукции) Экспорт
	
	Возврат ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Пиво")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПивоВПотребительскихУпаковках")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БезалкогольноеПиво")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.СоковаяПродукция")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БезалкогольныеНапитки")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АльтернативныйТабак")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.НикотиносодержащаяПродукция")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак");
	
КонецФункции

// Вид продукции ИС МП с возможным, но необязательным указанием кода ФИАС в операциях нанесения КМ
// 
// Параметры:
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции
// 
// Возвращаемое значение:
//  Булево - вид продукции не требует обязательного указания кода ФИАС
Функция ДляВидаПродукцииИспользуетсяКодФИАСБезОбязательногоЗаполнения(ВидПродукции) Экспорт
	
	Возврат ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Пиво")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БезалкогольноеПиво")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПивоВПотребительскихУпаковках");
	
КонецФункции

// Возвращает список операций ввода в оборот.
//
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.ВидыОперацийИСМП.
Функция ОперацииВводаВОборотКодовМаркировки() Экспорт

	Результат = Новый Массив;
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоРФ"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговору"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговоруНаСторонеЗаказчика"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотИмпортСФТС"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотИмпортСФТСМех"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотПолучениеПродукцииОтФизическихЛиц"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ПодтверждениеПоступленияКИЗ"));

	Возврат Результат;
	
КонецФункции

// Возвращает список операций для уточнения сведений о кодах маркировки:
// сведения о разрешительной документации или отчет о перевзвешивании.
//
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.ВидыОперацийИСМП.
Функция ОперацииУточненияСведенийОКодахМаркировки() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.СведенияОКодахИдентификацииДляВводаВОборот"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.СведенияОРазрешительнойДокументацииДляВводаВОборот"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ОтчетОПеревзвешивании"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.КорректировкаСведенийКМ"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.КорректировкаСведенийКМСрокГодности"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.КорректировкаСведенийКМСрокГодностиВСД"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.КорректировкаСведенийКМФактическийВес"));
	
	Возврат Результат;
	
Конецфункции

// Реализовать получение значения Признать определяемого типа ВариантДействийПоРасхождениямКодовМаркировкиИСМП.
//
// Возвращаемое значение:
//  ОпределяемыйТип.ВариантДействийПоРасхождениямКодовМаркировкиИСМП.
//
Функция ВариантДействийПоРасхождениямКодовМаркировкиИСМППризнать() Экспорт
	
	ВариантДействия = Неопределено;
	ИнтеграцияИСМПКлиентСерверПереопределяемый.ПриОпределенииВариантаДействийПоРасхождениямКодовМаркировкиИСМППризнать(ВариантДействия);
	Возврат ВариантДействия;
	
КонецФункции

// Реализовать получение значения Признать определяемого типа ВариантДействийПоРасхождениямКодовМаркировкиИСМП.
//
// Возвращаемое значение:
//  ОпределяемыйТип.ВариантДействийПоРасхождениямКодовМаркировкиИСМП.
//
Функция ВариантДействийПоРасхождениямКодовМаркировкиИСМПНеПризнать() Экспорт
	
	ВариантДействия = Неопределено;
	ИнтеграцияИСМПКлиентСерверПереопределяемый.ПриОпределенииВариантаДействийПоРасхождениямКодовМаркировкиИСМПНеПризнать(ВариантДействия);
	Возврат ВариантДействия;
	
КонецФункции

#Область Сертификация

// Подготавливает новую структуру данных сертификации
// 
// Возвращаемое значение:
//  Структура - Описание:
//  * ВидСертификации   - Неопределено, ПеречислениеСсылка.ВидыДокументовОбязательнойСертификацииИС - вид сертификации.
//  * НомерСертификации - Неопределено, Строка - Идентификационный номер сертификата.
//  * ДатаСертификации  - Неопределено, Дата - Дата начала действия.
//  * НомерСкважины     - Строка - номер скважины.
//  * ИспользоватьНомерСкважины - Булево - истина, если использовать.
Функция ИнициализироватьДанныеЗаполненияСертификации() Экспорт

	Результат = Новый Структура;
	Результат.Вставить("ВидСертификации",           Неопределено);
	Результат.Вставить("КемВыдан",                  "");
	Результат.Вставить("НомерСертификации",         Неопределено);
	Результат.Вставить("ДатаСертификации",          Неопределено);
	Результат.Вставить("НомерСкважины",             "");
	Результат.Вставить("ИспользоватьНомерСкважины", Ложь);

	Возврат Результат;

КонецФункции

// Подготавливает новую структуру данных лиценизий на пользование недрами (для ТГ Упакованная вода)
// 
// Возвращаемое значение:
//  Структура - Описание:
//  * НомерЛицензииНаПользованиеНедрами - Неопределено, Строка - Номер лицензии.
//  * ДатаЛицензииНаПользованиеНедрами  - Неопределено, Дата - Дата начала действия.
Функция ИнициализироватьДанныеЗаполненияЛицензииНаНедра() Экспорт

	Результат = Новый Структура;
	Результат.Вставить("НомерЛицензииНаПользованиеНедрами", "");
	Результат.Вставить("ДатаЛицензииНаПользованиеНедрами",  Неопределено);

	Возврат Результат;

КонецФункции

// Подготавливает новую структуру данных сведений об импорте
// 
// Возвращаемое значение:
//  Структура - Описание:
//  * Импортер - Неопределено - Импорте
//  * РегистрационныйНомерДекларации - Строка - Номер декларации.
//  * ДатаДекларации  - Неопределено, Дата - Дата декларации.
Функция ИнициализироватьДанныеЗаполненияСведенийОбИмпорте() Экспорт

	Результат = Новый Структура;
	Результат.Вставить("Импортер",                       Неопределено);
	Результат.Вставить("РегистрационныйНомерДекларации", "");
	Результат.Вставить("ДатаДекларации",                 Неопределено);

	Возврат Результат;

КонецФункции

// Формирует представление сертификации
//
// Параметры:
//  ДанныеСертификации - См. ИнтеграцияИСМПКлиентСервер.ИнициализироватьДанныеЗаполненияСертификации
//
// Возвращаемое значение:
//  Строка
Функция ПредставлениеСертификации(ДанныеСертификации) Экспорт
	
	Представление = "";
	
	Если ЗначениеЗаполнено(ДанныеСертификации.НомерСертификации)
		И ЗначениеЗаполнено(ДанныеСертификации.ДатаСертификации) Тогда
		Если ЗначениеЗаполнено(ДанныеСертификации.ВидСертификации) Тогда
			Если ДанныеСертификации.ИспользоватьНомерСкважины Тогда
				Представление = СтрШаблон(НСтр("ru = '%1 №%2 от %3, номер скважины: %4'"),
					ДанныеСертификации.ВидСертификации,
					ДанныеСертификации.НомерСертификации,
					Формат(ДанныеСертификации.ДатаСертификации, "ДФ=dd.MM.yyyy"),
					?(ЗначениеЗаполнено(ДанныеСертификации.НомерСкважины), ДанныеСертификации.НомерСкважины, НСтр("ru = 'не указан'")));
			Иначе
				Представление = СтрШаблон(НСтр("ru = '%1 №%2 от %3'"),
					ДанныеСертификации.ВидСертификации,
					ДанныеСертификации.НомерСертификации,
					Формат(ДанныеСертификации.ДатаСертификации, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(ДанныеСертификации.КемВыдан) Тогда
			Представление = СтрШаблон(НСтр("ru = '№%1 от %2 выдан %3'"),
				ДанныеСертификации.НомерСертификации,
				Формат(ДанныеСертификации.ДатаСертификации, "ДФ=dd.MM.yyyy"),
				ДанныеСертификации.КемВыдан);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

// Формирует представление лицензии на недра
//
// Параметры:
//  ДанныеЛицензии - См. ИнтеграцияИСМПКлиентСервер.ИнициализироватьДанныеЗаполненияЛицензииНаНедра
//
// Возвращаемое значение:
//  Строка
Функция ПредставлениеЛицензииНаНедра(ДанныеЛицензии) Экспорт

	ПредставлениеЛицензии = "";
	Шаблон = "№%1 от %2";
	Если ЗначениеЗаполнено(ДанныеЛицензии.НомерЛицензииНаПользованиеНедрами)
		И ЗначениеЗаполнено(ДанныеЛицензии.ДатаЛицензииНаПользованиеНедрами) Тогда

		ПредставлениеЛицензии = СтрШаблон(Шаблон,
			ДанныеЛицензии.НомерЛицензииНаПользованиеНедрами,
			Формат(ДанныеЛицензии.ДатаЛицензииНаПользованиеНедрами, "ДФ=dd.MM.yyyy"));

	КонецЕсли;

	Возврат ПредставлениеЛицензии;

КонецФункции

// Формирует представление данных импорта
//
// Параметры:
//  ДанныеИмпорта - См. ИнтеграцияИСМПКлиентСервер.ИнициализироватьДанныеЗаполненияСведенийОбИмпорте
//
// Возвращаемое значение:
//  Строка
Функция ПредставлениеДанныхИмпорта(ДанныеИмпорта) Экспорт

	ПредставлениеДанныхИмпорта = "";
	Шаблон = "%1, декларация №%2 от %3";

	Если ЗначениеЗаполнено(ДанныеИмпорта.Импортер)
		И ЗначениеЗаполнено(ДанныеИмпорта.РегистрационныйНомерДекларации)
		И ЗначениеЗаполнено(ДанныеИмпорта.ДатаДекларации) Тогда

		ПредставлениеДанныхИмпорта = СтрШаблон(Шаблон,
			ДанныеИмпорта.Импортер,
			ДанныеИмпорта.РегистрационныйНомерДекларации,
			Формат(ДанныеИмпорта.ДатаДекларации, "ДФ=dd.MM.yyyy"));

	КонецЕсли;

	Возврат ПредставлениеДанныхИмпорта;

КонецФункции

// Определяет признак заполнения номера скважины в документах
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма документа
//
// Возвращаемое значение:
//  Булево
Функция ИспользоватьНомерСкважины(Форма) Экспорт

	Операция = Форма.Объект.Операция;

	ОперацииМаркировки = ИнтеграцияИСМПСлужебныйКлиентСервер.ОперацииМаркировки(Операция);
	ВидПродукции = Форма.Объект.ВидПродукции;

	Если (ОперацииМаркировки.ЭтоПроизводствоРФ
		Или ОперацииМаркировки.ЭтоПроизводствоПоДоговоруНаСторонеЗаказчика
		Или ОперацииМаркировки.ЭтоПроизводствоПоДоговору)
		И ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.УпакованнаяВода") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

Функция ИспользоватьПаспортСоответствия(Форма) Экспорт
	
	Возврат ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.МаркировкаТоваровИСМП")
		И Форма.Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТитановаяМеталлопродукция")
		И (Форма.Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ОтчетОВерификацииНанесенныхКМ")
		Или ЗначениеЗаполнено(Форма.Объект.ОперацияНанесения));
	
КонецФункции

// Заполняет в переданных данных сведения о сертификации и лиценизиях
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма документа
//  ДанныеДляЗаполнения - Неопределено, Массив из ДанныеФормыЭлементКоллекции, ДанныеФормыЭлементКоллекции - данные для заполнения.
Процедура ЗаполнитьСертификациюЛицензииНоменклатурыПоСтроке(Форма, ДанныеДляЗаполнения) Экспорт

	Если ДанныеДляЗаполнения = Неопределено Тогда
		Возврат;
	ИначеЕсли ТипЗнч(ДанныеДляЗаполнения) = Тип("Массив") Тогда
		МассивДанныхЗаполнения = ДанныеДляЗаполнения;
	Иначе
		МассивДанныхЗаполнения = Новый Массив();
		МассивДанныхЗаполнения.Добавить(ДанныеДляЗаполнения);
	КонецЕсли;

	ИспользоватьПаспортСоответствия = ИспользоватьПаспортСоответствия(Форма);
	ДоступноУказаниеНомераСкважины  = ДоступноУказаниеНомераСкважиныВДанныхСертификации(Форма.Объект.Операция);
	ДоступноЗаполнениеДанныхИмпорта = ДоступноЗаполнениеДанныхИмпорта(Форма.Объект.Операция);
	Для Каждого СтрокаДанныхЗаполнения Из МассивДанныхЗаполнения Цикл

		Если ТипЗнч(СтрокаДанныхЗаполнения) = Тип("Число") Тогда
			ДанныеСтроки = Форма.Объект.Товары.НайтиПоИдентификатору(СтрокаДанныхЗаполнения);
		Иначе
			ДанныеСтроки = СтрокаДанныхЗаполнения;
		КонецЕсли;

		ЗаполнитьСертификациюПоСтроке(Форма, ДанныеСтроки, ДоступноУказаниеНомераСкважины);

		Если ИспользоватьПаспортСоответствия Тогда
			ЗаполнитьПаспортСоответствияПоСтроке(Форма, ДанныеСтроки);
		КонецЕсли;

		Если ДоступноУказаниеНомераСкважины И ИспользоватьНомерСкважины(Форма) Тогда
			ЗаполнитьЛицензииНаНедраПоСтроке(Форма, ДанныеСтроки);
		КонецЕсли;

		Если ДоступноЗаполнениеДанныхИмпорта Тогда
			ЗаполнитьДанныеИмпортаПоСтроке(Форма, ДанныеСтроки);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьПаспортСоответствияПоСтроке(Форма, ДанныеСтроки)

	Если ЗначениеЗаполнено(ДанныеСтроки.КемВыданПаспортСоответствия) Тогда

		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("НомерСертификации", ДанныеСтроки.НомерПаспортаСоответствия);
		ПараметрыПоиска.Вставить("ДатаСертификации",  ДанныеСтроки.ДатаПаспортаСоответствия);
		ПараметрыПоиска.Вставить("КемВыдан",          ДанныеСтроки.КемВыданПаспортСоответствия);
		ПараметрыПоиска.Вставить("Номенклатура",      ДанныеСтроки.Номенклатура);

		НайденныеСтроки = Форма.КэшСертификации.НайтиСтроки(ПараметрыПоиска);

		Если НайденныеСтроки.Количество() > 0 Тогда

			СтрокаКеша = НайденныеСтроки.Получить(0);

			Если ДанныеСтроки.ПаспортСоответствия <> СтрокаКеша.Представление Тогда
				ДанныеСтроки.ПаспортСоответствия = СтрокаКеша.Представление;
			КонецЕсли;

			Возврат;

		Иначе

			ДанныеСтроки.КемВыданПаспортСоответствия = "";
			ДанныеСтроки.НомерПаспортаСоответствия   = "";
			ДанныеСтроки.ДатаПаспортаСоответствия    = Дата('00010101');
			ДанныеСтроки.ПаспортСоответствия         = "";

		КонецЕсли;

	Иначе

		ДанныеСтроки.ПаспортСоответствия = "";

	КонецЕсли;

	ПараметрыПоиска = Новый Структура();
	ПараметрыПоиска.Вставить("Номенклатура", ДанныеСтроки.Номенклатура);

	НайденныеСтроки = Форма.КэшСертификации.НайтиСтроки(ПараметрыПоиска);
	Для Каждого СтрокаКеша Из НайденныеСтроки Цикл
		Если ЗначениеЗаполнено(СтрокаКеша.КемВыдан) Тогда
			ДанныеСтроки.НомерПаспортаСоответствия   = СтрокаКеша.НомерСертификации;
			ДанныеСтроки.ДатаПаспортаСоответствия    = СтрокаКеша.ДатаСертификации;
			ДанныеСтроки.КемВыданПаспортСоответствия = СтрокаКеша.КемВыдан;
			ДанныеСтроки.ПаспортСоответствия         = СтрокаКеша.Представление;
			Прервать;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьЛицензииНаНедраПоСтроке(Форма, ДанныеСтроки)

	Если ЗначениеЗаполнено(ДанныеСтроки.НомерЛицензииНаПользованиеНедрами) Тогда

		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("НомерЛицензииНаПользованиеНедрами", ДанныеСтроки.НомерЛицензииНаПользованиеНедрами);
		ПараметрыПоиска.Вставить("ДатаЛицензииНаПользованиеНедрами",  ДанныеСтроки.ДатаЛицензииНаПользованиеНедрами);
		ПараметрыПоиска.Вставить("Номенклатура",                      ДанныеСтроки.Номенклатура);

		НайденныеСтроки = Форма.КэшЛицензийНаПользованиеНедрами.НайтиСтроки(ПараметрыПоиска);

		Если НайденныеСтроки.Количество() > 0 Тогда

			СтрокаКеша = НайденныеСтроки.Получить(0);

			Если ДанныеСтроки.ЛицензияНаПользованиеНедрами <> СтрокаКеша.Представление Тогда
				ДанныеСтроки.ЛицензияНаПользованиеНедрами = СтрокаКеша.Представление;
			КонецЕсли;

			Возврат;

		Иначе

			ДанныеСтроки.НомерЛицензииНаПользованиеНедрами = "";
			ДанныеСтроки.ДатаЛицензииНаПользованиеНедрами  = Дата('00010101');
			ДанныеСтроки.ЛицензияНаПользованиеНедрами      = "";

		КонецЕсли;

	Иначе

		ДанныеСтроки.ЛицензияНаПользованиеНедрами = "";

	КонецЕсли;

	ПараметрыПоиска = Новый Структура();
	ПараметрыПоиска.Вставить("Номенклатура", ДанныеСтроки.Номенклатура);

	НайденныеСтроки = Форма.КэшЛицензийНаПользованиеНедрами.НайтиСтроки(ПараметрыПоиска);
	Если НайденныеСтроки.Количество() > 0 Тогда
		СтрокаКеша = НайденныеСтроки.Получить(0);

		ДанныеСтроки.НомерЛицензииНаПользованиеНедрами   = СтрокаКеша.НомерЛицензииНаПользованиеНедрами;
		ДанныеСтроки.ДатаЛицензииНаПользованиеНедрами    = СтрокаКеша.ДатаЛицензииНаПользованиеНедрами;
		ДанныеСтроки.ЛицензияНаПользованиеНедрами        = СтрокаКеша.Представление;

	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьДанныеИмпортаПоСтроке(Форма, ДанныеСтроки)

	Если ЗначениеЗаполнено(ДанныеСтроки.РегистрационныйНомерДекларации) Тогда

		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("РегистрационныйНомерДекларации", ДанныеСтроки.РегистрационныйНомерДекларации);
		ПараметрыПоиска.Вставить("ДатаДекларации",                 ДанныеСтроки.ДатаДекларации);
		ПараметрыПоиска.Вставить("Импортер",                       ДанныеСтроки.Импортер);
		ПараметрыПоиска.Вставить("Номенклатура",                   ДанныеСтроки.Номенклатура);

		НайденныеСтроки = Форма.КэшДанныхИмпорта.НайтиСтроки(ПараметрыПоиска);

		Если НайденныеСтроки.Количество() > 0 Тогда

			СтрокаКеша = НайденныеСтроки.Получить(0);

			Если ДанныеСтроки.ДанныеИмпорта <> СтрокаКеша.Представление Тогда
				ДанныеСтроки.ДанныеИмпорта = СтрокаКеша.Представление;
			КонецЕсли;

			Возврат;

		Иначе

			ДанныеСтроки.РегистрационныйНомерДекларации = "";
			ДанныеСтроки.ДатаДекларации                 = Дата('00010101');
			ДанныеСтроки.Импортер                       = Неопределено;
			ДанныеСтроки.ДанныеИмпорта                  = "";

		КонецЕсли;

	Иначе

		ДанныеСтроки.ДанныеИмпорта = "";

	КонецЕсли;

	ПараметрыПоиска = Новый Структура();
	ПараметрыПоиска.Вставить("Номенклатура", ДанныеСтроки.Номенклатура);

	НайденныеСтроки = Форма.КэшДанныхИмпорта.НайтиСтроки(ПараметрыПоиска);
	Если НайденныеСтроки.Количество() > 0 Тогда
		СтрокаКеша = НайденныеСтроки.Получить(0);

		ДанныеСтроки.РегистрационныйНомерДекларации   = СтрокаКеша.РегистрационныйНомерДекларации;
		ДанныеСтроки.ДатаДекларации                   = СтрокаКеша.ДатаДекларации;
		ДанныеСтроки.Импортер                         = СтрокаКеша.Импортер;
		ДанныеСтроки.ДанныеИмпорта                    = СтрокаКеша.Представление;

	КонецЕсли;

КонецПроцедуры

// Возвращает признак использования данных по номеру скважину по виду операции
// Параметры:
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - вид операции.
//
// Возвращаемое значение:
//  Булево.
Функция ДоступноУказаниеНомераСкважиныВДанныхСертификации(Операция) Экспорт

	Если Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоРФ")
		Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговору")
		Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговоруНаСторонеЗаказчика") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

// Возвращает признак заполнения данных импорта и деклараций по виду операции документа
// Параметры:
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - вид операции.
//
// Возвращаемое значение:
//  Булево.
Функция ДоступноЗаполнениеДанныхИмпорта(Операция) Экспорт

	Если Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ОтгрузкаЕАЭССПризнаниемКИ") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

// Дополнение кеша сертификации на форме документа новыми данными.
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма документа.
//  ДанныеЗаполненияСертификации - См. ИнициализироватьДанныеЗаполненияСертификации.
//  Номенклатура - Неопределено, ОпределяемыйТип.Номенклатура - номенклатура.
Процедура ОбновитьКэшСертификации(Форма, ДанныеЗаполненияСертификации, Номенклатура = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(ДанныеЗаполненияСертификации.ВидСертификации)
		И Не ЗначениеЗаполнено(ДанныеЗаполненияСертификации.НомерСертификации)
		И Не ЗначениеЗаполнено(ДанныеЗаполненияСертификации.ДатаСертификации) Тогда
		Возврат;
	КонецЕсли;

	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеЗаполненияСертификации, "ИспользоватьНомерСкважины") Тогда
		ДанныеЗаполненияСертификации.Вставить("ИспользоватьНомерСкважины", Ложь);
		ДанныеЗаполненияСертификации.Вставить("НомерСкважины", "");
	КонецЕсли;

	ПараметрыПоиска = Новый Структура("НомерСертификации, ДатаСертификации");
	Если ЗначениеЗаполнено(ДанныеЗаполненияСертификации.КемВыдан) Тогда
		ПараметрыПоиска.Вставить("КемВыдан");
	Иначе
		ПараметрыПоиска.Вставить("ВидСертификации");
	КонецЕсли;
	Если ДанныеЗаполненияСертификации.ИспользоватьНомерСкважины Тогда
		ПараметрыПоиска.Вставить("НомерСкважины");
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ПараметрыПоиска, ДанныеЗаполненияСертификации);

	Если Номенклатура <> Неопределено Тогда
		ПараметрыПоиска.Вставить("Номенклатура", Номенклатура);
	КонецЕсли;

	НайденныеСтроки = Форма.КэшСертификации.НайтиСтроки(ПараметрыПоиска);
	Если НайденныеСтроки.Количество() = 0 Тогда

		НоваяСтрока = Форма.КэшСертификации.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеЗаполненияСертификации);
		НоваяСтрока.Номенклатура      = Номенклатура;
		НоваяСтрока.Представление     = ПредставлениеСертификации(ДанныеЗаполненияСертификации);

	КонецЕсли;

КонецПроцедуры

// Дополнение кеша лицензий на пользование недрами на форме документа новыми данными.
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма документа.
//  ДанныеЗаполнения - См. ИнициализироватьДанныеЗаполненияЛицензииНаНедра.
//  Номенклатура - Неопределено, ОпределяемыйТип.Номенклатура - номенклатура.
Процедура ОбновитьКэшЛицензииНаПользованиеНедрами(Форма, ДанныеЗаполнения, Номенклатура = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(ДанныеЗаполнения.НомерЛицензииНаПользованиеНедрами)
		И Не ЗначениеЗаполнено(ДанныеЗаполнения.ДатаЛицензииНаПользованиеНедрами) Тогда
		Возврат;
	КонецЕсли;

	ПараметрыПоиска = Новый Структура("НомерЛицензииНаПользованиеНедрами, ДатаЛицензииНаПользованиеНедрами");
	ЗаполнитьЗначенияСвойств(ПараметрыПоиска, ДанныеЗаполнения);

	Если Номенклатура <> Неопределено Тогда
		ПараметрыПоиска.Вставить("Номенклатура", Номенклатура);
	КонецЕсли;

	НайденныеСтроки = Форма.КэшЛицензийНаПользованиеНедрами.НайтиСтроки(ПараметрыПоиска);
	Если НайденныеСтроки.Количество() = 0 Тогда

		НоваяСтрока = Форма.КэшЛицензийНаПользованиеНедрами.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеЗаполнения);
		НоваяСтрока.Номенклатура      = Номенклатура;
		НоваяСтрока.Представление     = ПредставлениеЛицензииНаНедра(ДанныеЗаполнения);

	КонецЕсли;

КонецПроцедуры

// Дополнение кеша лицензий на пользование недрами на форме документа новыми данными.
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма документа.
//  ДанныеЗаполнения - См. ИнициализироватьДанныеЗаполненияСведенийОбИмпорте.
//  Номенклатура - Неопределено, ОпределяемыйТип.Номенклатура - номенклатура.
Процедура ОбновитьКэшДанныхИмпорта(Форма, ДанныеЗаполнения, Номенклатура) Экспорт

	Если Не ЗначениеЗаполнено(ДанныеЗаполнения.РегистрационныйНомерДекларации) Тогда
		Возврат;
	КонецЕсли;

	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Импортер");
	ПараметрыПоиска.Вставить("РегистрационныйНомерДекларации");
	ПараметрыПоиска.Вставить("ДатаДекларации");
	ПараметрыПоиска.Вставить("Номенклатура");
	
	ЗаполнитьЗначенияСвойств(ПараметрыПоиска, ДанныеЗаполнения);
	ПараметрыПоиска.Номенклатура = Номенклатура;

	НайденныеСтроки = Форма.КэшДанныхИмпорта.НайтиСтроки(ПараметрыПоиска);
	Если НайденныеСтроки.Количество() = 0 Тогда

		НоваяСтрока = Форма.КэшДанныхИмпорта.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеЗаполнения);
		НоваяСтрока.Номенклатура      = Номенклатура;
		НоваяСтрока.Представление     = ПредставлениеДанныхИмпорта(ДанныеЗаполнения);

	КонецЕсли;

КонецПроцедуры

// Получение сертификатов по номенклатуры (вызов переопределения) и заполнение кеша на форме полученными данными.
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма документа.
//  СписокНоменклатуры - ОпределяемыйТип.Номенклатура, Массив из ОпределяемыйТип.Номенклатура - номенклатура.
Процедура ДобавитьСертификатыНоменклатурыВКэш(Форма, СписокНоменклатуры) Экспорт

	СертификатыНоменклатуры = ИнтеграцияИСМПВызовСервера.ИнформацияСертификатовНоменклатуры(СписокНоменклатуры);

	Для Каждого КлючЗначение Из СертификатыНоменклатуры Цикл

		Номенклатура = КлючЗначение.Ключ;
		Для Каждого Сертификат Из КлючЗначение.Значение Цикл

			ОбновитьКэшСертификации(
				Форма, Сертификат, Номенклатура);

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

// Заполнение кешей на форме переданным данными.
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма документа.
//  ДанныеЗаполнения - Массив из ДанныеФормыЭлементКоллекции, ТаблицаЗначений - данные заполнения.
Процедура ОбновитьКешСертификацииПоСтатистике(Форма, ДанныеЗаполнения) Экспорт

	ИспользоватьПаспортСоответствия = ИспользоватьПаспортСоответствия(Форма);
	ДоступноУказаниеНомераСкважины  = ДоступноУказаниеНомераСкважиныВДанныхСертификации(Форма.Объект.Операция);
	ДоступноУказаниеДанныхИмпорта   = ДоступноЗаполнениеДанныхИмпорта(Форма.Объект.Операция);
	ИспользоватьНомерСкважины = Ложь;
	Если ДоступноУказаниеНомераСкважины Тогда
		ИспользоватьНомерСкважины = ИспользоватьНомерСкважины(Форма);
	КонецЕсли;

	Для Каждого СтрокаДанных Из ДанныеЗаполнения Цикл

		СтруктураЗаполнения = ИнициализироватьДанныеЗаполненияСертификации();
		
		СтруктураЗаполнения.ВидСертификации           = СтрокаДанных.ВидДокументаСертификации;
		СтруктураЗаполнения.НомерСертификации         = СтрокаДанных.НомерДокументаСертификации;
		СтруктураЗаполнения.ДатаСертификации          = СтрокаДанных.ДатаДокументаСертификации;
		СтруктураЗаполнения.ИспользоватьНомерСкважины = ИспользоватьНомерСкважины;
		Если ДоступноУказаниеНомераСкважины Тогда
			СтруктураЗаполнения.НомерСкважины = СтрокаДанных.НомерСкважины;
		КонецЕсли;
		
		ОбновитьКэшСертификации(Форма, СтруктураЗаполнения, СтрокаДанных.Номенклатура);
		
		Если ИспользоватьПаспортСоответствия Тогда
			СтруктураЗаполнения = ИнициализироватьДанныеЗаполненияСертификации();
			СтруктураЗаполнения.НомерСертификации = СтрокаДанных.НомерПаспортаСоответствия;
			СтруктураЗаполнения.ДатаСертификации  = СтрокаДанных.ДатаПаспортаСоответствия;
			СтруктураЗаполнения.КемВыдан          = СтрокаДанных.КемВыданПаспортСоответствия;
			ОбновитьКэшСертификации(Форма, СтруктураЗаполнения, СтрокаДанных.Номенклатура);
		КонецЕсли;

		Если ИспользоватьНомерСкважины Тогда

			СтруктураЗаполнения = ИнициализироватьДанныеЗаполненияЛицензииНаНедра();
			ЗаполнитьЗначенияСвойств(СтруктураЗаполнения, СтрокаДанных);
			ОбновитьКэшЛицензииНаПользованиеНедрами(Форма, СтруктураЗаполнения, СтрокаДанных.Номенклатура);

		КонецЕсли;

		Если ДоступноУказаниеДанныхИмпорта Тогда

			СтруктураЗаполнения = ИнициализироватьДанныеЗаполненияСведенийОбИмпорте();
			ЗаполнитьЗначенияСвойств(СтруктураЗаполнения, СтрокаДанных);
			ОбновитьКэшДанныхИмпорта(Форма, СтруктураЗаполнения, СтрокаДанных.Номенклатура);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ЕГАИС

// Возвращает активные виды продукции ЕГАИС.
// 
// Параметры:
//  ТолькоИСМП - Булево - Только подконтрольные ИСМП
// 
// Возвращаемое значение:
//  Массив Из ПеречислениеСсылка.ВидыПродукцииИС - Виды продукции
//
Функция ВидыПродукцииЕГАИС(ТолькоИСМП = Ложь) Экспорт
	
	Результат = Новый Массив;
	
	ВидыИСМП = ОбщегоНазначенияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции();
	ВидыЕГАИС = ОбщегоНазначенияИСКлиентСервер.ВидыПродукцииЕГАИС();
	
	Для Каждого ВидПродукции Из ВидыЕГАИС Цикл
		Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная") Тогда
			Если Не ТолькоИСМП Тогда
				Результат.Добавить(ВидПродукции);
			КонецЕсли;
		Иначе
			Если ВидыИСМП.Найти(ВидПродукции) <> Неопределено Тогда
				Результат.Добавить(ВидПродукции);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура УстановитьКартинкуСканированияКодаПоВидуПродукции(ЭлементФормыКартинка, ВидМаркируемойПродукции) Экспорт
	
	Если ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак") Тогда
		КартинкаСканированияКода = БиблиотекаКартинок.СканированиеКодаМаркировкиТабакаИСМП;
	ИначеЕсли ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС")
		Или ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС") Тогда
		КартинкаСканированияКода = БиблиотекаКартинок.СканированиеКодаМаркировкиМолочнойПродукцииИСМП;
	ИначеЕсли ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Шины") Тогда
		КартинкаСканированияКода = БиблиотекаКартинок.СканированиеКодаМаркировкиШинИСМП;
	ИначеЕсли ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Фотоаппараты") Тогда
		КартинкаСканированияКода = БиблиотекаКартинок.СканированиеКодаМаркировкиФотоаппаратовИСМП;
	ИначеЕсли ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Велосипеды") Тогда
		КартинкаСканированияКода = БиблиотекаКартинок.СканированиеКодаМаркировкиВелосипедовИСМП;
	ИначеЕсли ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КреслаКоляски")
		Или ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТехническиеСредстваРеабилитации")
		Или ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МедицинскиеИзделия") Тогда
		КартинкаСканированияКода = БиблиотекаКартинок.СканированиеКодаМаркировкиМедицинскихИзделийИСМП;
	ИначеЕсли ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Духи") Тогда
		КартинкаСканированияКода = БиблиотекаКартинок.СканированиеКодаМаркировкиДуховИСМП;
	ИначеЕсли ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АльтернативныйТабак") Тогда
		КартинкаСканированияКода = БиблиотекаКартинок.СканированиеКодаМаркировкиАльтернативногоТабакаИСМП;
	ИначеЕсли ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.УпакованнаяВода") Тогда
		КартинкаСканированияКода = БиблиотекаКартинок.СканированиеКодаМаркировкиУпакованнойВодыИСМП;
	ИначеЕсли ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Антисептики") Тогда
		КартинкаСканированияКода = БиблиотекаКартинок.СканированиеКодаМаркировкиАнтисептиковИСМП;
	ИначеЕсли ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.НикотиносодержащаяПродукция") Тогда
		КартинкаСканированияКода = БиблиотекаКартинок.СканированиеКодаМаркировкиНикотиносодержащейПродукцииИСМП;
	ИначеЕсли ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Пиво")
		Или ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПивоВПотребительскихУпаковках") Тогда
		КартинкаСканированияКода = БиблиотекаКартинок.СканированиеКодаМаркировкиПиваИСМП;
	ИначеЕсли ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БАДы") Тогда
		КартинкаСканированияКода = БиблиотекаКартинок.СканированиеКодаМаркировкиБАДовИСМП;
	ИначеЕсли ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха") Тогда
		КартинкаСканированияКода = БиблиотекаКартинок.СканированиеКодаМаркировкиПродукцииИзНатуральногоМехаИСМП;
	ИначеЕсли ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.СоковаяПродукция")
		Или ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БезалкогольныеНапитки") Тогда
		КартинкаСканированияКода = БиблиотекаКартинок.СканированиеКодаМаркировкиСоковойПродукцииИСМП;
	ИначеЕсли ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БезалкогольноеПиво") Тогда
		КартинкаСканированияКода = БиблиотекаКартинок.СканированиеКодаМаркировкиБезалкогольногоПиваИСМП;
	ИначеЕсли ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МорепродуктыПодконтрольныеВЕТИС") Тогда
		КартинкаСканированияКода = БиблиотекаКартинок.СканированиеКодаМаркировкиМорепродуктовИСМП;
	ИначеЕсли ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхПодконтрольныеВЕТИС")
		Или ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхБезВЕТИС") Тогда
		КартинкаСканированияКода = БиблиотекаКартинок.СканированиеКодаМаркировкиКормаДляЖивотныхИСМП;
	ИначеЕсли ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МясоПодконтрольноеВЕТИС") Тогда
		КартинкаСканированияКода = БиблиотекаКартинок.СканированиеКодаМаркировкиМясоИСМП;
	ИначеЕсли ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ВетеринарныеПрепараты") Тогда
		КартинкаСканированияКода = БиблиотекаКартинок.СканированиеКодаМаркировкиВетеринарныеПрепаратыИСМП;
	ИначеЕсли ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ИгрыИИгрушкиДляДетей") Тогда
		КартинкаСканированияКода = БиблиотекаКартинок.СканированиеКодаМаркировкиИгрушкиИСМП;
	ИначеЕсли ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.РадиоэлектроннаяПродукция") Тогда
		КартинкаСканированияКода = БиблиотекаКартинок.СканированиеКодаМаркировкиРадиоэлектроннаяПродукцияИСМП;
	ИначеЕсли ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТитановаяМеталлопродукция") Тогда
		КартинкаСканированияКода = БиблиотекаКартинок.СканированиеКодаМаркировкиТитановаяМеталлопродукцияИСМП;
	ИначеЕсли ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КонсервированнаяПродукцияПодконтрольнаяВЕТИС")
		Или ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КонсервированнаяПродукцияБезВЕТИС") Тогда
		КартинкаСканированияКода = БиблиотекаКартинок.СканированиеКодаМаркировкиКонсервированнаяПродукцияИСМП;
	ИначеЕсли ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.РастительныеМасла") Тогда
		КартинкаСканированияКода = БиблиотекаКартинок.СканированиеКодаМаркировкиРастительныеМаслаИСМП;
	ИначеЕсли ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ОптоволокноИОптоволоконнаяПродукция") Тогда
		КартинкаСканированияКода = БиблиотекаКартинок.СканированиеКодаМаркировкиОптоволокноИСМП;
	ИначеЕсли ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПарфюмерныеИКосметическиеСредстваИБытоваяХимия") Тогда
		КартинкаСканированияКода = БиблиотекаКартинок.СканированиеКодаМаркировкиПарфюмерияИБытоваяХимияИСМП;
	ИначеЕсли ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПечатнаяПродукция") Тогда
		КартинкаСканированияКода = БиблиотекаКартинок.СканированиеКодаМаркировкиПечатнойПродукцииИСМП;
	ИначеЕсли ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ОтопительныеПриборы") Тогда
		КартинкаСканированияКода = БиблиотекаКартинок.СканированиеКодаМаркировкиОтопительныхПриборовИСМП;
	ИначеЕсли ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.СтроительныеМатериалы") Тогда
		КартинкаСканированияКода = БиблиотекаКартинок.СканированиеКодаМаркировкиСтроительныхМатериаловИСМП;
	ИначеЕсли ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПиротехническиеИзделияИСредстваПожарнойБезопасности") Тогда
		КартинкаСканированияКода = БиблиотекаКартинок.СканированиеКодаМаркировкиПиротехникиИСМП;
	ИначеЕсли ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АлкогольнаяПродукцияДо9Процентов") Тогда
		КартинкаСканированияКода = БиблиотекаКартинок.СканированиеКодаМаркировкиСлабоалкогольныхНапитковИСМП;
	ИначеЕсли ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТелефоныИНоутбуки") Тогда
		КартинкаСканированияКода = БиблиотекаКартинок.СканированиеКодаМаркировкиТелефоновИНоутбуковИСМП;
	ИначеЕсли ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КабельнаяПродукция") Тогда
		КартинкаСканированияКода = БиблиотекаКартинок.СканированиеКодаМаркировкиКабельнойПродукцииИСМП;
	ИначеЕсли ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Бакалея") Тогда
		КартинкаСканированияКода = БиблиотекаКартинок.СканированиеКодаМаркировкиБакалеиИСМП;
	ИначеЕсли ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МоторныеМасла") Тогда
		КартинкаСканированияКода = БиблиотекаКартинок.СканированиеКодаМаркировкиМоторныхМаселИСМП;
	Иначе
		КартинкаСканированияКода = БиблиотекаКартинок.СканированиеКодаМаркировкиИСМП;
	КонецЕсли;
	
	ЭлементФормыКартинка.Картинка = КартинкаСканированияКода; 
	
КонецПроцедуры

Функция ПредставленияШаблоновКодаМаркировки() Экспорт
	
	СписокВидовПродукции = Новый СписокЗначений();
	
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ТабачнаяПачка"),
		НСтр("ru = 'Пачка'"));
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БлокТабачныхПачек"),
		НСтр("ru = 'Блок'"));
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияБезУказанияСроковГодностиВЕТИС"),
		НСтр("ru = 'Без срока годности'"));
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияПодконтрольнаяВЕТИС"),
		НСтр("ru = 'Со сроком годности (до дней)'"));
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.СкоропортящаясяМолочнаяПродукцияВЕТИС"),
		НСтр("ru = 'Со сроком годности (до часов)'"));
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияБезВЕТИС"),
		НСтр("ru = 'Единица товара'"));
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияСерия6СимволовБезВЕТИС"),
		НСтр("ru = 'Единица товара'"));
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияСерия6СимволовВЕТИС"),
		НСтр("ru = 'Единица товара'"));
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АльтернативныйТабакБлок"),
		НСтр("ru = 'Блок (GS1)'"));
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АльтернативныйТабакПачка"),
		НСтр("ru = 'Пачка (Классический табак)'"));
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АльтернативныйТабакПачкаGS1"),
		НСтр("ru = 'Пачка (GS1)'"));
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.НикотиносодержащаяПродукцияПачка"),
		НСтр("ru = 'Пачка'"));
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.НикотиносодержащаяПродукцияБлок"),
		НСтр("ru = 'Блок'"));
	
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ЛегкаяПромышленность"),
		НСтр("ru = 'Единица товара'"));
		
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.Фотоаппараты"),
		НСтр("ru = 'Единица товара'"));
		
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.Духи"),
		НСтр("ru = 'Единица товара'"));
		
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.Антисептики"),
		НСтр("ru = 'Единица товара (Укороченный КМ)'"));
		
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АнтисептикиСтандартныйКМ"),
		НСтр("ru = 'Единица товара (Стандартный КМ)'"));
		
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БАДы"),
		НСтр("ru = 'Единица товара (Укороченный КМ)'"));
		
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БАДыСтандартныйКМ"),
		НСтр("ru = 'Единица товара (Стандартный КМ)'"));
		
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.Морепродукты"),
		НСтр("ru = 'Единица товара (Укороченный КМ)'"));
		
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МорепродуктыСтандартныйКМ"),
		НСтр("ru = 'Единица товара (Стандартный КМ)'"));
		
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.Пиво"),
		НСтр("ru = 'Единица товара'"));
		
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.УпакованнаяВода"),
		НСтр("ru = 'Единица товара'"));

	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.СоковаяПродукция"),
		НСтр("ru = 'Единица товара'"));

	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БезалкогольноеПиво"),
		НСтр("ru = 'Единица товара'"));
		
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КреслаКоляски"),
		НСтр("ru = 'Единица товара'"));
		
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ДухиКомплект"),
		НСтр("ru = 'Комплект'"));
		
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ЛегкаяПромышленностьКомплект"),
		НСтр("ru = 'Комплект'"));
		
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ФотоаппаратыКомплект"),
		НСтр("ru = 'Комплект'"));

	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПродукцияИзНатуральногоМеха"),
		НСтр("ru = 'Единица товара'"));

	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ДухиНабор"),
		НСтр("ru = 'Набор'"));
		
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ЛегкаяПромышленностьНабор"),
		НСтр("ru = 'Набор'"));
		
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ФотоаппаратыНабор"),
		НСтр("ru = 'Набор'"));
		
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АнтисептикиНабор"),
		НСтр("ru = 'Набор (Укороченный КМ)'"));
		
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АнтисептикиНаборСтандартныйКМ"),
		НСтр("ru = 'Набор (Стандартный КМ)'"));
		
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БАДыНабор"),
		НСтр("ru = 'Набор (Укороченный КМ)'"));
		
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БАДыНаборСтандартныйКМ"),
		НСтр("ru = 'Набор (Стандартный КМ)'"));
		
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияПодконтрольнаяВЕТИСНабор"),
		НСтр("ru = 'Набор'"));
		
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияБезВЕТИСНабор"),
		НСтр("ru = 'Набор'"));
		
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.НикотиносодержащаяПродукцияНабор"),
		НСтр("ru = 'Набор'"));
		
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КреслаКоляскиНабор"),
		НСтр("ru = 'Набор'"));
		
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.СоковаяПродукцияНабор"),
		НСтр("ru = 'Набор'"));
		
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АнтисептикиГрупповаяУпаковка"),
		НСтр("ru = 'Групповая упаковка (Укороченный КМ)'"));
		
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АнтисептикиГрупповаяУпаковкаСтандартныйКМ"),
		НСтр("ru = 'Групповая упаковка (Стандартный КМ)'"));
		
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БАДыГрупповаяУпаковка"),
		НСтр("ru = 'Групповая упаковка (Укороченный КМ)'"));
		
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БАДыГрупповаяУпаковкаСтандартныйКМ"),
		НСтр("ru = 'Групповая упаковка (Стандартный КМ)'"));
		
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МорепродуктыГрупповаяУпаковка"),
		НСтр("ru = 'Групповая упаковка (Укороченный КМ)'"));
		
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МорепродуктыГрупповаяУпаковкаСтандартныйКМ"),
		НСтр("ru = 'Групповая упаковка (Стандартный КМ)'"));
		
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПивоГрупповаяУпаковка"),
		НСтр("ru = 'Групповая упаковка'"));
		
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияПодконтрольнаяВЕТИСГрупповаяУпаковка"),
		НСтр("ru = 'Групповая упаковка'"));
		
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияБезВЕТИСГрупповаяУпаковка"),
		НСтр("ru = 'Групповая упаковка'"));
		
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.УпакованнаяВодаГрупповаяУпаковка"),
		НСтр("ru = 'Групповая упаковка'"));
		
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КреслаКоляскиГрупповаяУпаковка"),
		НСтр("ru = 'Групповая упаковка'"));
		
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.СоковаяПродукцияГрупповаяУпаковка"),
		НСтр("ru = 'Групповая упаковка'"));
	
	ПродукцияИспользуетСтандартныйКМ     = ОбщегоНазначенияИСМПКлиентСервер.КормаДляЖивотныхПодконтрольныеВЕТИСИспользуетСтандартныйКМ();
	ПродукцияИспользуетУкороченныйКМ     = ОбщегоНазначенияИСМПКлиентСервер.КормаДляЖивотныхПодконтрольныеВЕТИСИспользуетУкороченныйКМ();
	ПродукцияИспользуетГрупповуюУпаковку = ОбщегоНазначенияИСМПКлиентСервер.КормаДляЖивотныхПодконтрольныеВЕТИСИспользуетГрупповуюУпаковку();
	ПродукцияИспользуетНабор             = ОбщегоНазначенияИСМПКлиентСервер.КормаДляЖивотныхПодконтрольныеВЕТИСИспользуетНабор();
	Если ПродукцияИспользуетСтандартныйКМ И ПродукцияИспользуетУкороченныйКМ Тогда
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КормаДляЖивотных"),
			НСтр("ru = 'Единица товара (Укороченный КМ)'"));
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КормаДляЖивотныхСтандартныйКМ"),
			НСтр("ru = 'Единица товара (Стандартный КМ)'"));
		Если ПродукцияИспользуетГрупповуюУпаковку Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КормаДляЖивотныхГрупповаяУпаковка"),
				НСтр("ru = 'Групповая упаковка (Укороченный КМ)'"));
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КормаДляЖивотныхГрупповаяУпаковкаСтандартныйКМ"),
				НСтр("ru = 'Групповая упаковка (Стандартный КМ)'"));
		КонецЕсли;
		Если ПродукцияИспользуетНабор Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КормаДляЖивотныхНабор"),
				НСтр("ru = 'Набор (Укороченный КМ)'"));
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КормаДляЖивотныхНаборСтандартныйКМ"),
				НСтр("ru = 'Набор (Стандартный КМ)'"));
		КонецЕсли;
	ИначеЕсли ПродукцияИспользуетСтандартныйКМ Тогда
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КормаДляЖивотныхСтандартныйКМ"),
			НСтр("ru = 'Единица товара'"));
		Если ПродукцияИспользуетГрупповуюУпаковку Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КормаДляЖивотныхГрупповаяУпаковкаСтандартныйКМ"),
				НСтр("ru = 'Групповая упаковка'"));
		КонецЕсли;
		Если ПродукцияИспользуетНабор Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КормаДляЖивотныхНаборСтандартныйКМ"),
				НСтр("ru = 'Набор'"));
		КонецЕсли;
	ИначеЕсли ПродукцияИспользуетУкороченныйКМ Тогда
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КормаДляЖивотных"),
			НСтр("ru = 'Единица товара'"));
		Если ПродукцияИспользуетГрупповуюУпаковку Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КормаДляЖивотныхГрупповаяУпаковка"),
				НСтр("ru = 'Групповая упаковка'"));
		КонецЕсли;
		Если ПродукцияИспользуетНабор Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КормаДляЖивотныхНабор"),
				НСтр("ru = 'Набор'"));
		КонецЕсли;
	КонецЕсли;
	
	ПродукцияИспользуетСтандартныйКМ     = ОбщегоНазначенияИСМПКлиентСервер.КормаДляЖивотныхБезВЕТИСИспользуетСтандартныйКМ();
	ПродукцияИспользуетУкороченныйКМ     = ОбщегоНазначенияИСМПКлиентСервер.КормаДляЖивотныхБезВЕТИСИспользуетУкороченныйКМ();
	ПродукцияИспользуетГрупповуюУпаковку = ОбщегоНазначенияИСМПКлиентСервер.КормаДляЖивотныхБезВЕТИСИспользуетГрупповуюУпаковку();
	ПродукцияИспользуетНабор             = ОбщегоНазначенияИСМПКлиентСервер.КормаДляЖивотныхБезВЕТИСИспользуетНабор();
	Если ПродукцияИспользуетСтандартныйКМ И ПродукцияИспользуетУкороченныйКМ Тогда
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КормаДляЖивотныхБезВЕТИС"),
			НСтр("ru = 'Единица товара (Укороченный КМ)'"));
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КормаДляЖивотныхБезВЕТИССтандартныйКМ"),
			НСтр("ru = 'Единица товара (Стандартный КМ)'"));
		Если ПродукцияИспользуетГрупповуюУпаковку Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КормаДляЖивотныхБезВЕТИСГрупповаяУпаковка"),
				НСтр("ru = 'Групповая упаковка (Укороченный КМ)'"));
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КормаДляЖивотныхБезВЕТИСГрупповаяУпаковкаСтандартныйКМ"),
				НСтр("ru = 'Групповая упаковка (Стандартный КМ)'"));
		КонецЕсли;
		Если ПродукцияИспользуетНабор Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КормаДляЖивотныхБезВЕТИСНабор"),
				НСтр("ru = 'Набор (Укороченный КМ)'"));
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КормаДляЖивотныхБезВЕТИСНаборСтандартныйКМ"),
				НСтр("ru = 'Набор (Стандартный КМ)'"));
		КонецЕсли;
	ИначеЕсли ПродукцияИспользуетСтандартныйКМ Тогда
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КормаДляЖивотныхБезВЕТИССтандартныйКМ"),
			НСтр("ru = 'Единица товара'"));
		Если ПродукцияИспользуетГрупповуюУпаковку Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КормаДляЖивотныхБезВЕТИСГрупповаяУпаковкаСтандартныйКМ"),
				НСтр("ru = 'Групповая упаковка'"));
		КонецЕсли;
		Если ПродукцияИспользуетНабор Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КормаДляЖивотныхБезВЕТИСНаборСтандартныйКМ"),
				НСтр("ru = 'Набор'"));
		КонецЕсли;
	ИначеЕсли ПродукцияИспользуетУкороченныйКМ Тогда
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КормаДляЖивотныхБезВЕТИС"),
			НСтр("ru = 'Единица товара'"));
		Если ПродукцияИспользуетГрупповуюУпаковку Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КормаДляЖивотныхБезВЕТИСГрупповаяУпаковка"),
				НСтр("ru = 'Групповая упаковка'"));
		КонецЕсли;
		Если ПродукцияИспользуетНабор Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КормаДляЖивотныхБезВЕТИСНабор"),
				НСтр("ru = 'Набор'"));
		КонецЕсли;
	КонецЕсли;
	
	ПродукцияИспользуетСтандартныйКМ     = ОбщегоНазначенияИСМПКлиентСервер.МясоПодконтрольноеВЕТИСИспользуетСтандартныйКМ();
	ПродукцияИспользуетУкороченныйКМ     = ОбщегоНазначенияИСМПКлиентСервер.МясоПодконтрольноеВЕТИСИспользуетУкороченныйКМ();
	ПродукцияИспользуетГрупповуюУпаковку = ОбщегоНазначенияИСМПКлиентСервер.МясоПодконтрольноеВЕТИСИспользуетГрупповуюУпаковку();
	ПродукцияИспользуетНабор             = ОбщегоНазначенияИСМПКлиентСервер.МясоПодконтрольноеВЕТИСИспользуетНабор();
	Если ПродукцияИспользуетСтандартныйКМ И ПродукцияИспользуетУкороченныйКМ Тогда
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.Мясо"),
			НСтр("ru = 'Единица товара (Укороченный КМ)'"));
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МясоСтандартныйКМ"),
			НСтр("ru = 'Единица товара (Стандартный КМ)'"));
		Если ПродукцияИспользуетГрупповуюУпаковку Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МясоГрупповаяУпаковка"),
				НСтр("ru = 'Групповая упаковка (Укороченный КМ)'"));
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МясоГрупповаяУпаковкаСтандартныйКМ"),
				НСтр("ru = 'Групповая упаковка (Стандартный КМ)'"));
		КонецЕсли;
		Если ПродукцияИспользуетНабор Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МясоНабор"),
				НСтр("ru = 'Набор (Укороченный КМ)'"));
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МясоНаборСтандартныйКМ"),
				НСтр("ru = 'Набор (Стандартный КМ)'"));
		КонецЕсли;
	ИначеЕсли ПродукцияИспользуетСтандартныйКМ Тогда
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МясоСтандартныйКМ"),
			НСтр("ru = 'Единица товара'"));
		Если ПродукцияИспользуетГрупповуюУпаковку Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МясоГрупповаяУпаковкаСтандартныйКМ"),
				НСтр("ru = 'Групповая упаковка'"));
		КонецЕсли;
		Если ПродукцияИспользуетНабор Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МясоНаборСтандартныйКМ"),
				НСтр("ru = 'Набор'"));
		КонецЕсли;
	ИначеЕсли ПродукцияИспользуетУкороченныйКМ Тогда
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.Мясо"),
			НСтр("ru = 'Единица товара'"));
		Если ПродукцияИспользуетГрупповуюУпаковку Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МясоГрупповаяУпаковка"),
				НСтр("ru = 'Групповая упаковка'"));
		КонецЕсли;
		Если ПродукцияИспользуетНабор Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МясоНабор"),
				НСтр("ru = 'Набор'"));
		КонецЕсли;
	КонецЕсли;
	
	ПродукцияИспользуетСтандартныйКМ     = ОбщегоНазначенияИСМПКлиентСервер.ВетеринарныеПрепаратыИспользуетСтандартныйКМ();
	ПродукцияИспользуетУкороченныйКМ     = ОбщегоНазначенияИСМПКлиентСервер.ВетеринарныеПрепаратыИспользуетУкороченныйКМ();
	ПродукцияИспользуетГрупповуюУпаковку = ОбщегоНазначенияИСМПКлиентСервер.ВетеринарныеПрепаратыИспользуетГрупповуюУпаковку();
	ПродукцияИспользуетНабор             = ОбщегоНазначенияИСМПКлиентСервер.ВетеринарныеПрепаратыИспользуетНабор();
	Если ПродукцияИспользуетСтандартныйКМ И ПродукцияИспользуетУкороченныйКМ Тогда
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ВетеринарныеПрепараты"),
			НСтр("ru = 'Единица товара (Укороченный КМ)'"));
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ВетеринарныеПрепаратыСтандартныйКМ"),
			НСтр("ru = 'Единица товара (Стандартный КМ)'"));
		Если ПродукцияИспользуетГрупповуюУпаковку Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ВетеринарныеПрепаратыГрупповаяУпаковка"),
				НСтр("ru = 'Групповая упаковка (Укороченный КМ)'"));
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ВетеринарныеПрепаратыГрупповаяУпаковкаСтандартныйКМ"),
				НСтр("ru = 'Групповая упаковка (Стандартный КМ)'"));
		КонецЕсли;
		Если ПродукцияИспользуетНабор Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ВетеринарныеПрепаратыНабор"),
				НСтр("ru = 'Набор (Укороченный КМ)'"));
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ВетеринарныеПрепаратыНаборСтандартныйКМ"),
				НСтр("ru = 'Набор (Стандартный КМ)'"));
		КонецЕсли;
	ИначеЕсли ПродукцияИспользуетСтандартныйКМ Тогда
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ВетеринарныеПрепаратыСтандартныйКМ"),
			НСтр("ru = 'Единица товара'"));
		Если ПродукцияИспользуетГрупповуюУпаковку Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ВетеринарныеПрепаратыГрупповаяУпаковкаСтандартныйКМ"),
				НСтр("ru = 'Групповая упаковка'"));
		КонецЕсли;
		Если ПродукцияИспользуетНабор Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ВетеринарныеПрепаратыНаборСтандартныйКМ"),
				НСтр("ru = 'Набор'"));
		КонецЕсли;
	ИначеЕсли ПродукцияИспользуетУкороченныйКМ Тогда
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ВетеринарныеПрепараты"),
			НСтр("ru = 'Единица товара'"));
		Если ПродукцияИспользуетГрупповуюУпаковку Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ВетеринарныеПрепаратыГрупповаяУпаковка"),
				НСтр("ru = 'Групповая упаковка'"));
		КонецЕсли;
		Если ПродукцияИспользуетНабор Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ВетеринарныеПрепаратыНабор"),
				НСтр("ru = 'Набор'"));
		КонецЕсли;
	КонецЕсли;
	
	ПродукцияИспользуетСтандартныйКМ     = ОбщегоНазначенияИСМПКлиентСервер.ИгрыИИгрушкиДляДетейИспользуетСтандартныйКМ();
	ПродукцияИспользуетУкороченныйКМ     = ОбщегоНазначенияИСМПКлиентСервер.ИгрыИИгрушкиДляДетейИспользуетУкороченныйКМ();
	ПродукцияИспользуетГрупповуюУпаковку = ОбщегоНазначенияИСМПКлиентСервер.ИгрыИИгрушкиДляДетейИспользуетГрупповуюУпаковку();
	ПродукцияИспользуетНабор             = ОбщегоНазначенияИСМПКлиентСервер.ИгрыИИгрушкиДляДетейИспользуетНабор();
	Если ПродукцияИспользуетСтандартныйКМ И ПродукцияИспользуетУкороченныйКМ Тогда
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ИгрыИИгрушкиДляДетей"),
			НСтр("ru = 'Единица товара (Укороченный КМ)'"));
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ИгрыИИгрушкиДляДетейСтандартныйКМ"),
			НСтр("ru = 'Единица товара (Стандартный КМ)'"));
		Если ПродукцияИспользуетГрупповуюУпаковку Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ИгрыИИгрушкиДляДетейГрупповаяУпаковка"),
				НСтр("ru = 'Групповая упаковка (Укороченный КМ)'"));
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ИгрыИИгрушкиДляДетейГрупповаяУпаковкаСтандартныйКМ"),
				НСтр("ru = 'Групповая упаковка (Стандартный КМ)'"));
		КонецЕсли;
		Если ПродукцияИспользуетНабор Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ИгрыИИгрушкиДляДетейНабор"),
				НСтр("ru = 'Набор (Укороченный КМ)'"));
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ИгрыИИгрушкиДляДетейНаборСтандартныйКМ"),
				НСтр("ru = 'Набор (Стандартный КМ)'"));
		КонецЕсли;
	ИначеЕсли ПродукцияИспользуетСтандартныйКМ Тогда
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ИгрыИИгрушкиДляДетейСтандартныйКМ"),
			НСтр("ru = 'Единица товара'"));
		Если ПродукцияИспользуетГрупповуюУпаковку Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ИгрыИИгрушкиДляДетейГрупповаяУпаковкаСтандартныйКМ"),
				НСтр("ru = 'Групповая упаковка'"));
		КонецЕсли;
		Если ПродукцияИспользуетНабор Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ИгрыИИгрушкиДляДетейНаборСтандартныйКМ"),
				НСтр("ru = 'Набор'"));
		КонецЕсли;
	ИначеЕсли ПродукцияИспользуетУкороченныйКМ Тогда
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ИгрыИИгрушкиДляДетей"),
			НСтр("ru = 'Единица товара'"));
		Если ПродукцияИспользуетГрупповуюУпаковку Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ИгрыИИгрушкиДляДетейГрупповаяУпаковка"),
				НСтр("ru = 'Групповая упаковка'"));
		КонецЕсли;
		Если ПродукцияИспользуетНабор Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ИгрыИИгрушкиДляДетейНабор"),
				НСтр("ru = 'Набор'"));
		КонецЕсли;
	КонецЕсли;
	
	ПродукцияИспользуетСтандартныйКМ     = ОбщегоНазначенияИСМПКлиентСервер.РадиоэлектроннаяПродукцияИспользуетСтандартныйКМ();
	ПродукцияИспользуетУкороченныйКМ     = ОбщегоНазначенияИСМПКлиентСервер.РадиоэлектроннаяПродукцияИспользуетУкороченныйКМ();
	ПродукцияИспользуетГрупповуюУпаковку = ОбщегоНазначенияИСМПКлиентСервер.РадиоэлектроннаяПродукцияИспользуетГрупповуюУпаковку();
	ПродукцияИспользуетНабор             = ОбщегоНазначенияИСМПКлиентСервер.РадиоэлектроннаяПродукцияИспользуетНабор();
	Если ПродукцияИспользуетСтандартныйКМ И ПродукцияИспользуетУкороченныйКМ Тогда
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.РадиоэлектроннаяПродукция"),
			НСтр("ru = 'Единица товара (Укороченный КМ)'"));
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.РадиоэлектроннаяПродукцияСтандартныйКМ"),
			НСтр("ru = 'Единица товара (Стандартный КМ)'"));
		Если ПродукцияИспользуетГрупповуюУпаковку Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.РадиоэлектроннаяПродукцияГрупповаяУпаковка"),
				НСтр("ru = 'Групповая упаковка (Укороченный КМ)'"));
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.РадиоэлектроннаяПродукцияГрупповаяУпаковкаСтандартныйКМ"),
				НСтр("ru = 'Групповая упаковка (Стандартный КМ)'"));
		КонецЕсли;
		Если ПродукцияИспользуетНабор Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.РадиоэлектроннаяПродукцияНабор"),
				НСтр("ru = 'Набор (Укороченный КМ)'"));
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.РадиоэлектроннаяПродукцияНаборСтандартныйКМ"),
				НСтр("ru = 'Набор (Стандартный КМ)'"));
		КонецЕсли;
	ИначеЕсли ПродукцияИспользуетСтандартныйКМ Тогда
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.РадиоэлектроннаяПродукцияСтандартныйКМ"),
			НСтр("ru = 'Единица товара'"));
		Если ПродукцияИспользуетГрупповуюУпаковку Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.РадиоэлектроннаяПродукцияГрупповаяУпаковкаСтандартныйКМ"),
				НСтр("ru = 'Групповая упаковка'"));
		КонецЕсли;
		Если ПродукцияИспользуетНабор Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.РадиоэлектроннаяПродукцияНаборСтандартныйКМ"),
				НСтр("ru = 'Набор'"));
		КонецЕсли;
	ИначеЕсли ПродукцияИспользуетУкороченныйКМ Тогда
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.РадиоэлектроннаяПродукция"),
			НСтр("ru = 'Единица товара'"));
		Если ПродукцияИспользуетГрупповуюУпаковку Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.РадиоэлектроннаяПродукцияГрупповаяУпаковка"),
				НСтр("ru = 'Групповая упаковка'"));
		КонецЕсли;
		Если ПродукцияИспользуетНабор Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.РадиоэлектроннаяПродукцияНабор"),
				НСтр("ru = 'Набор'"));
		КонецЕсли;
	КонецЕсли;
	
	ПродукцияИспользуетСтандартныйКМ     = ОбщегоНазначенияИСМПКлиентСервер.ТитановаяМеталлопродукцияИспользуетСтандартныйКМ();
	ПродукцияИспользуетУкороченныйКМ     = ОбщегоНазначенияИСМПКлиентСервер.ТитановаяМеталлопродукцияИспользуетУкороченныйКМ();
	ПродукцияИспользуетГрупповуюУпаковку = ОбщегоНазначенияИСМПКлиентСервер.ТитановаяМеталлопродукцияИспользуетГрупповуюУпаковку();
	ПродукцияИспользуетНабор             = ОбщегоНазначенияИСМПКлиентСервер.ТитановаяМеталлопродукцияИспользуетНабор();
	Если ПродукцияИспользуетСтандартныйКМ И ПродукцияИспользуетУкороченныйКМ Тогда
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ТитановаяМеталлопродукция"),
			НСтр("ru = 'Единица товара (Укороченный КМ)'"));
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ТитановаяМеталлопродукцияСтандартныйКМ"),
			НСтр("ru = 'Единица товара (Стандартный КМ)'"));
		Если ПродукцияИспользуетГрупповуюУпаковку Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ТитановаяМеталлопродукцияГрупповаяУпаковка"),
				НСтр("ru = 'Групповая упаковка (Укороченный КМ)'"));
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ТитановаяМеталлопродукцияГрупповаяУпаковкаСтандартныйКМ"),
				НСтр("ru = 'Групповая упаковка (Стандартный КМ)'"));
		КонецЕсли;
		Если ПродукцияИспользуетНабор Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ТитановаяМеталлопродукцияНабор"),
				НСтр("ru = 'Набор (Укороченный КМ)'"));
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ТитановаяМеталлопродукцияНаборСтандартныйКМ"),
				НСтр("ru = 'Набор (Стандартный КМ)'"));
		КонецЕсли;
	ИначеЕсли ПродукцияИспользуетСтандартныйКМ Тогда
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ТитановаяМеталлопродукцияСтандартныйКМ"),
			НСтр("ru = 'Единица товара'"));
		Если ПродукцияИспользуетГрупповуюУпаковку Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ТитановаяМеталлопродукцияГрупповаяУпаковкаСтандартныйКМ"),
				НСтр("ru = 'Групповая упаковка'"));
		КонецЕсли;
		Если ПродукцияИспользуетНабор Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ТитановаяМеталлопродукцияНаборСтандартныйКМ"),
				НСтр("ru = 'Набор'"));
		КонецЕсли;
	ИначеЕсли ПродукцияИспользуетУкороченныйКМ Тогда
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ТитановаяМеталлопродукция"),
			НСтр("ru = 'Единица товара'"));
		Если ПродукцияИспользуетГрупповуюУпаковку Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ТитановаяМеталлопродукцияГрупповаяУпаковка"),
				НСтр("ru = 'Групповая упаковка'"));
		КонецЕсли;
		Если ПродукцияИспользуетНабор Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ТитановаяМеталлопродукцияНабор"),
				НСтр("ru = 'Набор'"));
		КонецЕсли;
	КонецЕсли;
	
	ПродукцияИспользуетСтандартныйКМ     = ОбщегоНазначенияИСМПКлиентСервер.КонсервированнаяПродукцияПодконтрольнаяВЕТИСИспользуетСтандартныйКМ();
	ПродукцияИспользуетУкороченныйКМ     = ОбщегоНазначенияИСМПКлиентСервер.КонсервированнаяПродукцияПодконтрольнаяВЕТИСИспользуетУкороченныйКМ();
	ПродукцияИспользуетГрупповуюУпаковку = ОбщегоНазначенияИСМПКлиентСервер.КонсервированнаяПродукцияПодконтрольнаяВЕТИСИспользуетГрупповуюУпаковку();
	ПродукцияИспользуетНабор             = ОбщегоНазначенияИСМПКлиентСервер.КонсервированнаяПродукцияПодконтрольнаяВЕТИСИспользуетНабор();
	Если ПродукцияИспользуетСтандартныйКМ И ПродукцияИспользуетУкороченныйКМ Тогда
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КонсервированнаяПродукция"),
			НСтр("ru = 'Единица товара (Укороченный КМ)'"));
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КонсервированнаяПродукцияСтандартныйКМ"),
			НСтр("ru = 'Единица товара (Стандартный КМ)'"));
		Если ПродукцияИспользуетГрупповуюУпаковку Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КонсервированнаяПродукцияГрупповаяУпаковка"),
				НСтр("ru = 'Групповая упаковка (Укороченный КМ)'"));
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КонсервированнаяПродукцияГрупповаяУпаковкаСтандартныйКМ"),
				НСтр("ru = 'Групповая упаковка (Стандартный КМ)'"));
		КонецЕсли;
		Если ПродукцияИспользуетНабор Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КонсервированнаяПродукцияНабор"),
				НСтр("ru = 'Набор (Укороченный КМ)'"));
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КонсервированнаяПродукцияНаборСтандартныйКМ"),
				НСтр("ru = 'Набор (Стандартный КМ)'"));
		КонецЕсли;
	ИначеЕсли ПродукцияИспользуетСтандартныйКМ Тогда
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КонсервированнаяПродукцияСтандартныйКМ"),
			НСтр("ru = 'Единица товара'"));
		Если ПродукцияИспользуетГрупповуюУпаковку Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КонсервированнаяПродукцияГрупповаяУпаковкаСтандартныйКМ"),
				НСтр("ru = 'Групповая упаковка'"));
		КонецЕсли;
		Если ПродукцияИспользуетНабор Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КонсервированнаяПродукцияНаборСтандартныйКМ"),
				НСтр("ru = 'Набор'"));
		КонецЕсли;
	ИначеЕсли ПродукцияИспользуетУкороченныйКМ Тогда
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КонсервированнаяПродукция"),
			НСтр("ru = 'Единица товара'"));
		Если ПродукцияИспользуетГрупповуюУпаковку Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КонсервированнаяПродукцияГрупповаяУпаковка"),
				НСтр("ru = 'Групповая упаковка'"));
		КонецЕсли;
		Если ПродукцияИспользуетНабор Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КонсервированнаяПродукцияНабор"),
				НСтр("ru = 'Набор'"));
		КонецЕсли;
	КонецЕсли;
	
	ПродукцияИспользуетСтандартныйКМ     = ОбщегоНазначенияИСМПКлиентСервер.КонсервированнаяПродукцияБезВЕТИСИспользуетСтандартныйКМ();
	ПродукцияИспользуетУкороченныйКМ     = ОбщегоНазначенияИСМПКлиентСервер.КонсервированнаяПродукцияБезВЕТИСИспользуетУкороченныйКМ();
	ПродукцияИспользуетГрупповуюУпаковку = ОбщегоНазначенияИСМПКлиентСервер.КонсервированнаяПродукцияБезВЕТИСИспользуетГрупповуюУпаковку();
	ПродукцияИспользуетНабор             = ОбщегоНазначенияИСМПКлиентСервер.КонсервированнаяПродукцияБезВЕТИСИспользуетНабор();
	Если ПродукцияИспользуетСтандартныйКМ И ПродукцияИспользуетУкороченныйКМ Тогда
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КонсервированнаяПродукцияБезВЕТИС"),
			НСтр("ru = 'Единица товара (Укороченный КМ)'"));
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КонсервированнаяПродукцияБезВЕТИССтандартныйКМ"),
			НСтр("ru = 'Единица товара (Стандартный КМ)'"));
		Если ПродукцияИспользуетГрупповуюУпаковку Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КонсервированнаяПродукцияБезВЕТИСГрупповаяУпаковка"),
				НСтр("ru = 'Групповая упаковка (Укороченный КМ)'"));
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КонсервированнаяПродукцияБезВЕТИСГрупповаяУпаковкаСтандартныйКМ"),
				НСтр("ru = 'Групповая упаковка (Стандартный КМ)'"));
		КонецЕсли;
		Если ПродукцияИспользуетНабор Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КонсервированнаяПродукцияБезВЕТИСНабор"),
				НСтр("ru = 'Набор (Укороченный КМ)'"));
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КонсервированнаяПродукцияБезВЕТИСНаборСтандартныйКМ"),
				НСтр("ru = 'Набор (Стандартный КМ)'"));
		КонецЕсли;
	ИначеЕсли ПродукцияИспользуетСтандартныйКМ Тогда
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КонсервированнаяПродукцияБезВЕТИССтандартныйКМ"),
			НСтр("ru = 'Единица товара'"));
		Если ПродукцияИспользуетГрупповуюУпаковку Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КонсервированнаяПродукцияБезВЕТИСГрупповаяУпаковкаСтандартныйКМ"),
				НСтр("ru = 'Групповая упаковка'"));
		КонецЕсли;
		Если ПродукцияИспользуетНабор Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КонсервированнаяПродукцияБезВЕТИСНаборСтандартныйКМ"),
				НСтр("ru = 'Набор'"));
		КонецЕсли;
	ИначеЕсли ПродукцияИспользуетУкороченныйКМ Тогда
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КонсервированнаяПродукцияБезВЕТИС"),
			НСтр("ru = 'Единица товара'"));
		Если ПродукцияИспользуетГрупповуюУпаковку Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КонсервированнаяПродукцияБезВЕТИСГрупповаяУпаковка"),
				НСтр("ru = 'Групповая упаковка'"));
		КонецЕсли;
		Если ПродукцияИспользуетНабор Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КонсервированнаяПродукцияБезВЕТИСНабор"),
				НСтр("ru = 'Набор'"));
		КонецЕсли;
	КонецЕсли;
	
	ПродукцияИспользуетСтандартныйКМ     = ОбщегоНазначенияИСМПКлиентСервер.РастительныеМаслаИспользуетСтандартныйКМ();
	ПродукцияИспользуетУкороченныйКМ     = ОбщегоНазначенияИСМПКлиентСервер.РастительныеМаслаИспользуетУкороченныйКМ();
	ПродукцияИспользуетГрупповуюУпаковку = ОбщегоНазначенияИСМПКлиентСервер.РастительныеМаслаИспользуетГрупповуюУпаковку();
	ПродукцияИспользуетНабор             = ОбщегоНазначенияИСМПКлиентСервер.РастительныеМаслаИспользуетНабор();
	Если ПродукцияИспользуетСтандартныйКМ И ПродукцияИспользуетУкороченныйКМ Тогда
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.РастительныеМасла"),
			НСтр("ru = 'Единица товара (Укороченный КМ)'"));
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.РастительныеМаслаСтандартныйКМ"),
			НСтр("ru = 'Единица товара (Стандартный КМ)'"));
		Если ПродукцияИспользуетГрупповуюУпаковку Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.РастительныеМаслаГрупповаяУпаковка"),
				НСтр("ru = 'Групповая упаковка (Укороченный КМ)'"));
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.РастительныеМаслаГрупповаяУпаковкаСтандартныйКМ"),
				НСтр("ru = 'Групповая упаковка (Стандартный КМ)'"));
		КонецЕсли;
		Если ПродукцияИспользуетНабор Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.РастительныеМаслаНабор"),
				НСтр("ru = 'Набор (Укороченный КМ)'"));
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.РастительныеМаслаНаборСтандартныйКМ"),
				НСтр("ru = 'Набор (Стандартный КМ)'"));
		КонецЕсли;
	ИначеЕсли ПродукцияИспользуетСтандартныйКМ Тогда
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.РастительныеМаслаСтандартныйКМ"),
			НСтр("ru = 'Единица товара'"));
		Если ПродукцияИспользуетГрупповуюУпаковку Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.РастительныеМаслаГрупповаяУпаковкаСтандартныйКМ"),
				НСтр("ru = 'Групповая упаковка'"));
		КонецЕсли;
		Если ПродукцияИспользуетНабор Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.РастительныеМаслаНаборСтандартныйКМ"),
				НСтр("ru = 'Набор'"));
		КонецЕсли;
	ИначеЕсли ПродукцияИспользуетУкороченныйКМ Тогда
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.РастительныеМасла"),
			НСтр("ru = 'Единица товара'"));
		Если ПродукцияИспользуетГрупповуюУпаковку Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.РастительныеМаслаГрупповаяУпаковка"),
				НСтр("ru = 'Групповая упаковка'"));
		КонецЕсли;
		Если ПродукцияИспользуетНабор Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.РастительныеМаслаНабор"),
				НСтр("ru = 'Набор'"));
		КонецЕсли;
	КонецЕсли;
	
	ПродукцияИспользуетСтандартныйКМ     = ОбщегоНазначенияИСМПКлиентСервер.ОптоволокноИОптоволоконнаяПродукцияИспользуетСтандартныйКМ();
	ПродукцияИспользуетУкороченныйКМ     = ОбщегоНазначенияИСМПКлиентСервер.ОптоволокноИОптоволоконнаяПродукцияИспользуетУкороченныйКМ();
	ПродукцияИспользуетГрупповуюУпаковку = ОбщегоНазначенияИСМПКлиентСервер.ОптоволокноИОптоволоконнаяПродукцияИспользуетГрупповуюУпаковку();
	ПродукцияИспользуетНабор             = ОбщегоНазначенияИСМПКлиентСервер.ОптоволокноИОптоволоконнаяПродукцияИспользуетНабор();
	Если ПродукцияИспользуетСтандартныйКМ И ПродукцияИспользуетУкороченныйКМ Тогда
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ОптоволокноИОптоволоконнаяПродукция"),
			НСтр("ru = 'Единица товара (Укороченный КМ)'"));
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ОптоволокноИОптоволоконнаяПродукцияСтандартныйКМ"),
			НСтр("ru = 'Единица товара (Стандартный КМ)'"));
		Если ПродукцияИспользуетГрупповуюУпаковку Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ОптоволокноИОптоволоконнаяПродукцияГрупповаяУпаковка"),
				НСтр("ru = 'Групповая упаковка (Укороченный КМ)'"));
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ОптоволокноИОптоволоконнаяПродукцияГрупповаяУпаковкаСтандартныйКМ"),
				НСтр("ru = 'Групповая упаковка (Стандартный КМ)'"));
		КонецЕсли;
		Если ПродукцияИспользуетНабор Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ОптоволокноИОптоволоконнаяПродукцияНабор"),
				НСтр("ru = 'Набор (Укороченный КМ)'"));
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ОптоволокноИОптоволоконнаяПродукцияНаборСтандартныйКМ"),
				НСтр("ru = 'Набор (Стандартный КМ)'"));
		КонецЕсли;
	ИначеЕсли ПродукцияИспользуетСтандартныйКМ Тогда
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ОптоволокноИОптоволоконнаяПродукцияСтандартныйКМ"),
			НСтр("ru = 'Единица товара'"));
		Если ПродукцияИспользуетГрупповуюУпаковку Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ОптоволокноИОптоволоконнаяПродукцияГрупповаяУпаковкаСтандартныйКМ"),
				НСтр("ru = 'Групповая упаковка'"));
		КонецЕсли;
		Если ПродукцияИспользуетНабор Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ОптоволокноИОптоволоконнаяПродукцияНаборСтандартныйКМ"),
				НСтр("ru = 'Набор'"));
		КонецЕсли;
	ИначеЕсли ПродукцияИспользуетУкороченныйКМ Тогда
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ОптоволокноИОптоволоконнаяПродукция"),
			НСтр("ru = 'Единица товара'"));
		Если ПродукцияИспользуетГрупповуюУпаковку Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ОптоволокноИОптоволоконнаяПродукцияГрупповаяУпаковка"),
				НСтр("ru = 'Групповая упаковка'"));
		КонецЕсли;
		Если ПродукцияИспользуетНабор Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ОптоволокноИОптоволоконнаяПродукцияНабор"),
				НСтр("ru = 'Набор'"));
		КонецЕсли;
	КонецЕсли;
	
	ПродукцияИспользуетСтандартныйКМ     = ОбщегоНазначенияИСМПКлиентСервер.ПарфюмерныеИКосметическиеСредстваИБытоваяХимияИспользуетСтандартныйКМ();
	ПродукцияИспользуетУкороченныйКМ     = ОбщегоНазначенияИСМПКлиентСервер.ПарфюмерныеИКосметическиеСредстваИБытоваяХимияИспользуетУкороченныйКМ();
	ПродукцияИспользуетГрупповуюУпаковку = ОбщегоНазначенияИСМПКлиентСервер.ПарфюмерныеИКосметическиеСредстваИБытоваяХимияИспользуетГрупповуюУпаковку();
	ПродукцияИспользуетНабор             = ОбщегоНазначенияИСМПКлиентСервер.ПарфюмерныеИКосметическиеСредстваИБытоваяХимияИспользуетНабор();
	Если ПродукцияИспользуетСтандартныйКМ И ПродукцияИспользуетУкороченныйКМ Тогда
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПарфюмерныеИКосметическиеСредстваИБытоваяХимия"),
			НСтр("ru = 'Единица товара (Укороченный КМ)'"));
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПарфюмерныеИКосметическиеСредстваИБытоваяХимияСтандартныйКМ"),
			НСтр("ru = 'Единица товара (Стандартный КМ)'"));
		Если ПродукцияИспользуетГрупповуюУпаковку Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПарфюмерныеИКосметическиеСредстваИБытоваяХимияГрупповаяУпаковка"),
				НСтр("ru = 'Групповая упаковка (Укороченный КМ)'"));
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПарфюмерныеИКосметическиеСредстваИБытоваяХимияГрупповаяУпаковкаСтандартныйКМ"),
				НСтр("ru = 'Групповая упаковка (Стандартный КМ)'"));
		КонецЕсли;
		Если ПродукцияИспользуетНабор Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПарфюмерныеИКосметическиеСредстваИБытоваяХимияНабор"),
				НСтр("ru = 'Набор (Укороченный КМ)'"));
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПарфюмерныеИКосметическиеСредстваИБытоваяХимияНаборСтандартныйКМ"),
				НСтр("ru = 'Набор (Стандартный КМ)'"));
		КонецЕсли;
	ИначеЕсли ПродукцияИспользуетСтандартныйКМ Тогда
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПарфюмерныеИКосметическиеСредстваИБытоваяХимияСтандартныйКМ"),
			НСтр("ru = 'Единица товара'"));
		Если ПродукцияИспользуетГрупповуюУпаковку Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПарфюмерныеИКосметическиеСредстваИБытоваяХимияГрупповаяУпаковкаСтандартныйКМ"),
				НСтр("ru = 'Групповая упаковка'"));
		КонецЕсли;
		Если ПродукцияИспользуетНабор Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПарфюмерныеИКосметическиеСредстваИБытоваяХимияНаборСтандартныйКМ"),
				НСтр("ru = 'Набор'"));
		КонецЕсли;
	ИначеЕсли ПродукцияИспользуетУкороченныйКМ Тогда
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПарфюмерныеИКосметическиеСредстваИБытоваяХимия"),
			НСтр("ru = 'Единица товара'"));
		Если ПродукцияИспользуетГрупповуюУпаковку Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПарфюмерныеИКосметическиеСредстваИБытоваяХимияГрупповаяУпаковка"),
				НСтр("ru = 'Групповая упаковка'"));
		КонецЕсли;
		Если ПродукцияИспользуетНабор Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПарфюмерныеИКосметическиеСредстваИБытоваяХимияНабор"),
				НСтр("ru = 'Набор'"));
		КонецЕсли;
	КонецЕсли;
	
	ПродукцияИспользуетСтандартныйКМ     = ОбщегоНазначенияИСМПКлиентСервер.ПечатнаяПродукцияИспользуетСтандартныйКМ();
	ПродукцияИспользуетУкороченныйКМ     = ОбщегоНазначенияИСМПКлиентСервер.ПечатнаяПродукцияИспользуетУкороченныйКМ();
	ПродукцияИспользуетГрупповуюУпаковку = ОбщегоНазначенияИСМПКлиентСервер.ПечатнаяПродукцияИспользуетГрупповуюУпаковку();
	ПродукцияИспользуетНабор             = ОбщегоНазначенияИСМПКлиентСервер.ПечатнаяПродукцияИспользуетНабор();
	Если ПродукцияИспользуетСтандартныйКМ И ПродукцияИспользуетУкороченныйКМ Тогда
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПечатнаяПродукция"),
			НСтр("ru = 'Единица товара (Укороченный КМ)'"));
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПечатнаяПродукцияСтандартныйКМ"),
			НСтр("ru = 'Единица товара (Стандартный КМ)'"));
		Если ПродукцияИспользуетГрупповуюУпаковку Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПечатнаяПродукцияГрупповаяУпаковка"),
				НСтр("ru = 'Групповая упаковка (Укороченный КМ)'"));
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПечатнаяПродукцияГрупповаяУпаковкаСтандартныйКМ"),
				НСтр("ru = 'Групповая упаковка (Стандартный КМ)'"));
		КонецЕсли;
		Если ПродукцияИспользуетНабор Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПечатнаяПродукцияНабор"),
				НСтр("ru = 'Набор (Укороченный КМ)'"));
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПечатнаяПродукцияНаборСтандартныйКМ"),
				НСтр("ru = 'Набор (Стандартный КМ)'"));
		КонецЕсли;
	ИначеЕсли ПродукцияИспользуетСтандартныйКМ Тогда
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПечатнаяПродукцияСтандартныйКМ"),
			НСтр("ru = 'Единица товара'"));
		Если ПродукцияИспользуетГрупповуюУпаковку Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПечатнаяПродукцияГрупповаяУпаковкаСтандартныйКМ"),
				НСтр("ru = 'Групповая упаковка'"));
		КонецЕсли;
		Если ПродукцияИспользуетНабор Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПечатнаяПродукцияНаборСтандартныйКМ"),
				НСтр("ru = 'Набор'"));
		КонецЕсли;
	ИначеЕсли ПродукцияИспользуетУкороченныйКМ Тогда
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПечатнаяПродукция"),
			НСтр("ru = 'Единица товара'"));
		Если ПродукцияИспользуетГрупповуюУпаковку Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПечатнаяПродукцияГрупповаяУпаковка"),
				НСтр("ru = 'Групповая упаковка'"));
		КонецЕсли;
		Если ПродукцияИспользуетНабор Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПечатнаяПродукцияНабор"),
				НСтр("ru = 'Набор'"));
		КонецЕсли;
	КонецЕсли;
	
	ПродукцияИспользуетСтандартныйКМ     = ОбщегоНазначенияИСМПКлиентСервер.СтроительныеМатериалыИспользуетСтандартныйКМ();
	ПродукцияИспользуетУкороченныйКМ     = ОбщегоНазначенияИСМПКлиентСервер.СтроительныеМатериалыИспользуетУкороченныйКМ();
	ПродукцияИспользуетГрупповуюУпаковку = ОбщегоНазначенияИСМПКлиентСервер.СтроительныеМатериалыИспользуетГрупповуюУпаковку();
	ПродукцияИспользуетНабор             = ОбщегоНазначенияИСМПКлиентСервер.СтроительныеМатериалыИспользуетНабор();
	Если ПродукцияИспользуетСтандартныйКМ И ПродукцияИспользуетУкороченныйКМ Тогда
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.СтроительныеМатериалы"),
			НСтр("ru = 'Единица товара (Укороченный КМ)'"));
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.СтроительныеМатериалыСтандартныйКМ"),
			НСтр("ru = 'Единица товара (Стандартный КМ)'"));
		Если ПродукцияИспользуетГрупповуюУпаковку Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.СтроительныеМатериалыГрупповаяУпаковка"),
				НСтр("ru = 'Групповая упаковка (Укороченный КМ)'"));
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.СтроительныеМатериалыГрупповаяУпаковкаСтандартныйКМ"),
				НСтр("ru = 'Групповая упаковка (Стандартный КМ)'"));
		КонецЕсли;
		Если ПродукцияИспользуетНабор Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.СтроительныеМатериалыНабор"),
				НСтр("ru = 'Набор (Укороченный КМ)'"));
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.СтроительныеМатериалыНаборСтандартныйКМ"),
				НСтр("ru = 'Набор (Стандартный КМ)'"));
		КонецЕсли;
	ИначеЕсли ПродукцияИспользуетСтандартныйКМ Тогда
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.СтроительныеМатериалыСтандартныйКМ"),
			НСтр("ru = 'Единица товара'"));
		Если ПродукцияИспользуетГрупповуюУпаковку Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.СтроительныеМатериалыГрупповаяУпаковкаСтандартныйКМ"),
				НСтр("ru = 'Групповая упаковка'"));
		КонецЕсли;
		Если ПродукцияИспользуетНабор Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.СтроительныеМатериалыНаборСтандартныйКМ"),
				НСтр("ru = 'Набор'"));
		КонецЕсли;
	ИначеЕсли ПродукцияИспользуетУкороченныйКМ Тогда
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.СтроительныеМатериалы"),
			НСтр("ru = 'Единица товара'"));
		Если ПродукцияИспользуетГрупповуюУпаковку Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.СтроительныеМатериалыГрупповаяУпаковка"),
				НСтр("ru = 'Групповая упаковка'"));
		КонецЕсли;
		Если ПродукцияИспользуетНабор Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.СтроительныеМатериалыНабор"),
				НСтр("ru = 'Набор'"));
		КонецЕсли;
	КонецЕсли;
	
	ПродукцияИспользуетСтандартныйКМ     = ОбщегоНазначенияИСМПКлиентСервер.ОтопительныеПриборыИспользуетСтандартныйКМ();
	ПродукцияИспользуетУкороченныйКМ     = ОбщегоНазначенияИСМПКлиентСервер.ОтопительныеПриборыИспользуетУкороченныйКМ();
	ПродукцияИспользуетГрупповуюУпаковку = ОбщегоНазначенияИСМПКлиентСервер.ОтопительныеПриборыИспользуетГрупповуюУпаковку();
	ПродукцияИспользуетНабор             = ОбщегоНазначенияИСМПКлиентСервер.ОтопительныеПриборыИспользуетНабор();
	Если ПродукцияИспользуетСтандартныйКМ И ПродукцияИспользуетУкороченныйКМ Тогда
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ОтопительныеПриборы"),
			НСтр("ru = 'Единица товара (Укороченный КМ)'"));
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ОтопительныеПриборыСтандартныйКМ"),
			НСтр("ru = 'Единица товара (Стандартный КМ)'"));
		Если ПродукцияИспользуетГрупповуюУпаковку Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ОтопительныеПриборыГрупповаяУпаковка"),
				НСтр("ru = 'Групповая упаковка (Укороченный КМ)'"));
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ОтопительныеПриборыГрупповаяУпаковкаСтандартныйКМ"),
				НСтр("ru = 'Групповая упаковка (Стандартный КМ)'"));
		КонецЕсли;
		Если ПродукцияИспользуетНабор Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ОтопительныеПриборыНабор"),
				НСтр("ru = 'Набор (Укороченный КМ)'"));
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ОтопительныеПриборыНаборСтандартныйКМ"),
				НСтр("ru = 'Набор (Стандартный КМ)'"));
		КонецЕсли;
	ИначеЕсли ПродукцияИспользуетСтандартныйКМ Тогда
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ОтопительныеПриборыСтандартныйКМ"),
			НСтр("ru = 'Единица товара'"));
		Если ПродукцияИспользуетГрупповуюУпаковку Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ОтопительныеПриборыГрупповаяУпаковкаСтандартныйКМ"),
				НСтр("ru = 'Групповая упаковка'"));
		КонецЕсли;
		Если ПродукцияИспользуетНабор Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ОтопительныеПриборыНаборСтандартныйКМ"),
				НСтр("ru = 'Набор'"));
		КонецЕсли;
	ИначеЕсли ПродукцияИспользуетУкороченныйКМ Тогда
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ОтопительныеПриборы"),
			НСтр("ru = 'Единица товара'"));
		Если ПродукцияИспользуетГрупповуюУпаковку Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ОтопительныеПриборыГрупповаяУпаковка"),
				НСтр("ru = 'Групповая упаковка'"));
		КонецЕсли;
		Если ПродукцияИспользуетНабор Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ОтопительныеПриборыНабор"),
				НСтр("ru = 'Набор'"));
		КонецЕсли;
	КонецЕсли;
	
	ПродукцияИспользуетСтандартныйКМ     = ОбщегоНазначенияИСМПКлиентСервер.АлкогольнаяПродукцияДо9ПроцентовИспользуетСтандартныйКМ();
	ПродукцияИспользуетУкороченныйКМ     = ОбщегоНазначенияИСМПКлиентСервер.АлкогольнаяПродукцияДо9ПроцентовИспользуетУкороченныйКМ();
	ПродукцияИспользуетГрупповуюУпаковку = ОбщегоНазначенияИСМПКлиентСервер.АлкогольнаяПродукцияДо9ПроцентовИспользуетГрупповуюУпаковку();
	ПродукцияИспользуетНабор             = ОбщегоНазначенияИСМПКлиентСервер.АлкогольнаяПродукцияДо9ПроцентовИспользуетНабор();
	Если ПродукцияИспользуетСтандартныйКМ И ПродукцияИспользуетУкороченныйКМ Тогда
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АлкогольнаяПродукцияДо9Процентов"),
			НСтр("ru = 'Единица товара (Укороченный КМ)'"));
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АлкогольнаяПродукцияДо9ПроцентовСтандартныйКМ"),
			НСтр("ru = 'Единица товара (Стандартный КМ)'"));
		Если ПродукцияИспользуетГрупповуюУпаковку Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АлкогольнаяПродукцияДо9ПроцентовГрупповаяУпаковка"),
				НСтр("ru = 'Групповая упаковка (Укороченный КМ)'"));
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АлкогольнаяПродукцияДо9ПроцентовГрупповаяУпаковкаСтандартныйКМ"),
				НСтр("ru = 'Групповая упаковка (Стандартный КМ)'"));
		КонецЕсли;
		Если ПродукцияИспользуетНабор Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АлкогольнаяПродукцияДо9ПроцентовНабор"),
				НСтр("ru = 'Набор (Укороченный КМ)'"));
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АлкогольнаяПродукцияДо9ПроцентовНаборСтандартныйКМ"),
				НСтр("ru = 'Набор (Стандартный КМ)'"));
		КонецЕсли;
	ИначеЕсли ПродукцияИспользуетСтандартныйКМ Тогда
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АлкогольнаяПродукцияДо9ПроцентовСтандартныйКМ"),
			НСтр("ru = 'Единица товара'"));
		Если ПродукцияИспользуетГрупповуюУпаковку Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АлкогольнаяПродукцияДо9ПроцентовГрупповаяУпаковкаСтандартныйКМ"),
				НСтр("ru = 'Групповая упаковка'"));
		КонецЕсли;
		Если ПродукцияИспользуетНабор Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АлкогольнаяПродукцияДо9ПроцентовНаборСтандартныйКМ"),
				НСтр("ru = 'Набор'"));
		КонецЕсли;
	ИначеЕсли ПродукцияИспользуетУкороченныйКМ Тогда
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АлкогольнаяПродукцияДо9Процентов"),
			НСтр("ru = 'Единица товара'"));
		Если ПродукцияИспользуетГрупповуюУпаковку Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АлкогольнаяПродукцияДо9ПроцентовГрупповаяУпаковка"),
				НСтр("ru = 'Групповая упаковка'"));
		КонецЕсли;
		Если ПродукцияИспользуетНабор Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АлкогольнаяПродукцияДо9ПроцентовНабор"),
				НСтр("ru = 'Набор'"));
		КонецЕсли;
	КонецЕсли;
	
	ПродукцияИспользуетСтандартныйКМ     = ОбщегоНазначенияИСМПКлиентСервер.ТелефоныИНоутбукиИспользуетСтандартныйКМ();
	ПродукцияИспользуетУкороченныйКМ     = ОбщегоНазначенияИСМПКлиентСервер.ТелефоныИНоутбукиИспользуетУкороченныйКМ();
	ПродукцияИспользуетГрупповуюУпаковку = ОбщегоНазначенияИСМПКлиентСервер.ТелефоныИНоутбукиИспользуетГрупповуюУпаковку();
	ПродукцияИспользуетНабор             = ОбщегоНазначенияИСМПКлиентСервер.ТелефоныИНоутбукиИспользуетНабор();
	Если ПродукцияИспользуетСтандартныйКМ И ПродукцияИспользуетУкороченныйКМ Тогда
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ТелефоныИНоутбуки"),
			НСтр("ru = 'Единица товара (Укороченный КМ)'"));
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ТелефоныИНоутбукиСтандартныйКМ"),
			НСтр("ru = 'Единица товара (Стандартный КМ)'"));
		Если ПродукцияИспользуетГрупповуюУпаковку Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ТелефоныИНоутбукиГрупповаяУпаковка"),
				НСтр("ru = 'Групповая упаковка (Укороченный КМ)'"));
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ТелефоныИНоутбукиГрупповаяУпаковкаСтандартныйКМ"),
				НСтр("ru = 'Групповая упаковка (Стандартный КМ)'"));
		КонецЕсли;
		Если ПродукцияИспользуетНабор Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ТелефоныИНоутбукиНабор"),
				НСтр("ru = 'Набор (Укороченный КМ)'"));
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ТелефоныИНоутбукиНаборСтандартныйКМ"),
				НСтр("ru = 'Набор (Стандартный КМ)'"));
		КонецЕсли;
	ИначеЕсли ПродукцияИспользуетСтандартныйКМ Тогда
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ТелефоныИНоутбукиСтандартныйКМ"),
			НСтр("ru = 'Единица товара'"));
		Если ПродукцияИспользуетГрупповуюУпаковку Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ТелефоныИНоутбукиГрупповаяУпаковкаСтандартныйКМ"),
				НСтр("ru = 'Групповая упаковка'"));
		КонецЕсли;
		Если ПродукцияИспользуетНабор Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ТелефоныИНоутбукиНаборСтандартныйКМ"),
				НСтр("ru = 'Набор'"));
		КонецЕсли;
	ИначеЕсли ПродукцияИспользуетУкороченныйКМ Тогда
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ТелефоныИНоутбуки"),
			НСтр("ru = 'Единица товара'"));
		Если ПродукцияИспользуетГрупповуюУпаковку Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ТелефоныИНоутбукиГрупповаяУпаковка"),
				НСтр("ru = 'Групповая упаковка'"));
		КонецЕсли;
		Если ПродукцияИспользуетНабор Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ТелефоныИНоутбукиНабор"),
				НСтр("ru = 'Набор'"));
		КонецЕсли;
	КонецЕсли;
	
	ПродукцияИспользуетСтандартныйКМ     = ОбщегоНазначенияИСМПКлиентСервер.ПиротехническиеИзделияИСредстваПожарнойБезопасностиИспользуетСтандартныйКМ();
	ПродукцияИспользуетУкороченныйКМ     = ОбщегоНазначенияИСМПКлиентСервер.ПиротехническиеИзделияИСредстваПожарнойБезопасностиИспользуетУкороченныйКМ();
	ПродукцияИспользуетГрупповуюУпаковку = ОбщегоНазначенияИСМПКлиентСервер.ПиротехническиеИзделияИСредстваПожарнойБезопасностиИспользуетГрупповуюУпаковку();
	ПродукцияИспользуетНабор             = ОбщегоНазначенияИСМПКлиентСервер.ПиротехническиеИзделияИСредстваПожарнойБезопасностиИспользуетНабор();
	Если ПродукцияИспользуетСтандартныйКМ И ПродукцияИспользуетУкороченныйКМ Тогда
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПиротехническиеИзделияИСредстваПожарнойБезопасности"),
			НСтр("ru = 'Единица товара (Укороченный КМ)'"));
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПиротехническиеИзделияИСредстваПожарнойБезопасностиСтандартныйКМ"),
			НСтр("ru = 'Единица товара (Стандартный КМ)'"));
		Если ПродукцияИспользуетГрупповуюУпаковку Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПиротехническиеИзделияИСредстваПожарнойБезопасностиГрупповаяУпаковка"),
				НСтр("ru = 'Групповая упаковка (Укороченный КМ)'"));
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПиротехническиеИзделияИСредстваПожарнойБезопасностиГрупповаяУпаковкаСтКМ"),
				НСтр("ru = 'Групповая упаковка (Стандартный КМ)'"));
		КонецЕсли;
		Если ПродукцияИспользуетНабор Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПиротехническиеИзделияИСредстваПожарнойБезопасностиНабор"),
				НСтр("ru = 'Набор (Укороченный КМ)'"));
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПиротехническиеИзделияИСредстваПожарнойБезопасностиНаборСтандартныйКМ"),
				НСтр("ru = 'Набор (Стандартный КМ)'"));
		КонецЕсли;
	ИначеЕсли ПродукцияИспользуетСтандартныйКМ Тогда
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПиротехническиеИзделияИСредстваПожарнойБезопасностиСтандартныйКМ"),
			НСтр("ru = 'Единица товара'"));
		Если ПродукцияИспользуетГрупповуюУпаковку Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПиротехническиеИзделияИСредстваПожарнойБезопасностиГрупповаяУпаковкаСтКМ"),
				НСтр("ru = 'Групповая упаковка'"));
		КонецЕсли;
		Если ПродукцияИспользуетНабор Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПиротехническиеИзделияИСредстваПожарнойБезопасностиНаборСтандартныйКМ"),
				НСтр("ru = 'Набор'"));
		КонецЕсли;
	ИначеЕсли ПродукцияИспользуетУкороченныйКМ Тогда
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПиротехническиеИзделияИСредстваПожарнойБезопасности"),
			НСтр("ru = 'Единица товара'"));
		Если ПродукцияИспользуетГрупповуюУпаковку Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПиротехническиеИзделияИСредстваПожарнойБезопасностиГрупповаяУпаковка"),
				НСтр("ru = 'Групповая упаковка'"));
		КонецЕсли;
		Если ПродукцияИспользуетНабор Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПиротехническиеИзделияИСредстваПожарнойБезопасностиНабор"),
				НСтр("ru = 'Набор'"));
		КонецЕсли;
	КонецЕсли;
	
	ПродукцияИспользуетСтандартныйКМ     = ОбщегоНазначенияИСМПКлиентСервер.КабельнаяПродукцияИспользуетСтандартныйКМ();
	ПродукцияИспользуетУкороченныйКМ     = ОбщегоНазначенияИСМПКлиентСервер.КабельнаяПродукцияИспользуетУкороченныйКМ();
	ПродукцияИспользуетГрупповуюУпаковку = ОбщегоНазначенияИСМПКлиентСервер.КабельнаяПродукцияИспользуетГрупповуюУпаковку();
	ПродукцияИспользуетНабор             = ОбщегоНазначенияИСМПКлиентСервер.КабельнаяПродукцияИспользуетНабор();
	Если ПродукцияИспользуетСтандартныйКМ И ПродукцияИспользуетУкороченныйКМ Тогда
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КабельнаяПродукция"),
			НСтр("ru = 'Единица товара (Укороченный КМ)'"));
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КабельнаяПродукцияСтандартныйКМ"),
			НСтр("ru = 'Единица товара (Стандартный КМ)'"));
		Если ПродукцияИспользуетГрупповуюУпаковку Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КабельнаяПродукцияГрупповаяУпаковка"),
				НСтр("ru = 'Групповая упаковка (Укороченный КМ)'"));
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КабельнаяПродукцияГрупповаяУпаковкаСтандартныйКМ"),
				НСтр("ru = 'Групповая упаковка (Стандартный КМ)'"));
		КонецЕсли;
		Если ПродукцияИспользуетНабор Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КабельнаяПродукцияНабор"),
				НСтр("ru = 'Набор (Укороченный КМ)'"));
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КабельнаяПродукцияНаборСтандартныйКМ"),
				НСтр("ru = 'Набор (Стандартный КМ)'"));
		КонецЕсли;
	ИначеЕсли ПродукцияИспользуетСтандартныйКМ Тогда
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КабельнаяПродукцияСтандартныйКМ"),
			НСтр("ru = 'Единица товара'"));
		Если ПродукцияИспользуетГрупповуюУпаковку Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КабельнаяПродукцияГрупповаяУпаковкаСтандартныйКМ"),
				НСтр("ru = 'Групповая упаковка'"));
		КонецЕсли;
		Если ПродукцияИспользуетНабор Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КабельнаяПродукцияНаборСтандартныйКМ"),
				НСтр("ru = 'Набор'"));
		КонецЕсли;
	ИначеЕсли ПродукцияИспользуетУкороченныйКМ Тогда
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КабельнаяПродукция"),
			НСтр("ru = 'Единица товара'"));
		Если ПродукцияИспользуетГрупповуюУпаковку Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КабельнаяПродукцияГрупповаяУпаковка"),
				НСтр("ru = 'Групповая упаковка'"));
		КонецЕсли;
		Если ПродукцияИспользуетНабор Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КабельнаяПродукцияНабор"),
				НСтр("ru = 'Набор'"));
		КонецЕсли;
	КонецЕсли;
	
	ПродукцияИспользуетСтандартныйКМ     = ОбщегоНазначенияИСМПКлиентСервер.БакалеяИспользуетСтандартныйКМ();
	ПродукцияИспользуетУкороченныйКМ     = ОбщегоНазначенияИСМПКлиентСервер.БакалеяИспользуетУкороченныйКМ();
	ПродукцияИспользуетГрупповуюУпаковку = ОбщегоНазначенияИСМПКлиентСервер.БакалеяИспользуетГрупповуюУпаковку();
	ПродукцияИспользуетНабор             = ОбщегоНазначенияИСМПКлиентСервер.БакалеяИспользуетНабор();
	Если ПродукцияИспользуетСтандартныйКМ И ПродукцияИспользуетУкороченныйКМ Тогда
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.Бакалея"),
			НСтр("ru = 'Единица товара (Укороченный КМ)'"));
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БакалеяСтандартныйКМ"),
			НСтр("ru = 'Единица товара (Стандартный КМ)'"));
		Если ПродукцияИспользуетГрупповуюУпаковку Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БакалеяГрупповаяУпаковка"),
				НСтр("ru = 'Групповая упаковка (Укороченный КМ)'"));
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БакалеяГрупповаяУпаковкаСтандартныйКМ"),
				НСтр("ru = 'Групповая упаковка (Стандартный КМ)'"));
		КонецЕсли;
		Если ПродукцияИспользуетНабор Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БакалеяНабор"),
				НСтр("ru = 'Набор (Укороченный КМ)'"));
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БакалеяНаборСтандартныйКМ"),
				НСтр("ru = 'Набор (Стандартный КМ)'"));
		КонецЕсли;
	ИначеЕсли ПродукцияИспользуетСтандартныйКМ Тогда
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БакалеяСтандартныйКМ"),
			НСтр("ru = 'Единица товара'"));
		Если ПродукцияИспользуетГрупповуюУпаковку Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БакалеяГрупповаяУпаковкаСтандартныйКМ"),
				НСтр("ru = 'Групповая упаковка'"));
		КонецЕсли;
		Если ПродукцияИспользуетНабор Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БакалеяНаборСтандартныйКМ"),
				НСтр("ru = 'Набор'"));
		КонецЕсли;
	ИначеЕсли ПродукцияИспользуетУкороченныйКМ Тогда
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.Бакалея"),
			НСтр("ru = 'Единица товара'"));
		Если ПродукцияИспользуетГрупповуюУпаковку Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БакалеяГрупповаяУпаковка"),
				НСтр("ru = 'Групповая упаковка'"));
		КонецЕсли;
		Если ПродукцияИспользуетНабор Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БакалеяНабор"),
				НСтр("ru = 'Набор'"));
		КонецЕсли;
	КонецЕсли;
	
	ПродукцияИспользуетСтандартныйКМ     = ОбщегоНазначенияИСМПКлиентСервер.МоторныеМаслаИспользуетСтандартныйКМ();
	ПродукцияИспользуетУкороченныйКМ     = ОбщегоНазначенияИСМПКлиентСервер.МоторныеМаслаИспользуетУкороченныйКМ();
	ПродукцияИспользуетГрупповуюУпаковку = ОбщегоНазначенияИСМПКлиентСервер.МоторныеМаслаИспользуетГрупповуюУпаковку();
	ПродукцияИспользуетНабор             = ОбщегоНазначенияИСМПКлиентСервер.МоторныеМаслаИспользуетНабор();
	Если ПродукцияИспользуетСтандартныйКМ И ПродукцияИспользуетУкороченныйКМ Тогда
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МоторныеМасла"),
			НСтр("ru = 'Единица товара (Укороченный КМ)'"));
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МоторныеМаслаСтандартныйКМ"),
			НСтр("ru = 'Единица товара (Стандартный КМ)'"));
		Если ПродукцияИспользуетГрупповуюУпаковку Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МоторныеМаслаГрупповаяУпаковка"),
				НСтр("ru = 'Групповая упаковка (Укороченный КМ)'"));
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МоторныеМаслаГрупповаяУпаковкаСтандартныйКМ"),
				НСтр("ru = 'Групповая упаковка (Стандартный КМ)'"));
		КонецЕсли;
		Если ПродукцияИспользуетНабор Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МоторныеМаслаНабор"),
				НСтр("ru = 'Набор (Укороченный КМ)'"));
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МоторныеМаслаНаборСтандартныйКМ"),
				НСтр("ru = 'Набор (Стандартный КМ)'"));
		КонецЕсли;
	ИначеЕсли ПродукцияИспользуетСтандартныйКМ Тогда
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МоторныеМаслаСтандартныйКМ"),
			НСтр("ru = 'Единица товара'"));
		Если ПродукцияИспользуетГрупповуюУпаковку Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МоторныеМаслаГрупповаяУпаковкаСтандартныйКМ"),
				НСтр("ru = 'Групповая упаковка'"));
		КонецЕсли;
		Если ПродукцияИспользуетНабор Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МоторныеМаслаНаборСтандартныйКМ"),
				НСтр("ru = 'Набор'"));
		КонецЕсли;
	ИначеЕсли ПродукцияИспользуетУкороченныйКМ Тогда
		СписокВидовПродукции.Добавить(
			ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МоторныеМасла"),
			НСтр("ru = 'Единица товара'"));
		Если ПродукцияИспользуетГрупповуюУпаковку Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МоторныеМаслаГрупповаяУпаковка"),
				НСтр("ru = 'Групповая упаковка'"));
		КонецЕсли;
		Если ПродукцияИспользуетНабор Тогда
			СписокВидовПродукции.Добавить(
				ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МоторныеМаслаНабор"),
				НСтр("ru = 'Набор'"));
		КонецЕсли;
	КонецЕсли;
	
	Возврат СписокВидовПродукции;
	
КонецФункции

Процедура УстновитьОтборПоОрганизацииИПустомуЗначению(Форма) Экспорт
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Форма.Список, "Организация");
	ПредставлениеГруппы = "Отбор с пустой организацией";
	Отбор = Форма.Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор;
	ГруппаОтборов = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(Отбор,, ПредставлениеГруппы);
	Если ГруппаОтборов.Количество() Тогда
		ГруппаОтборов = ГруппаОтборов[0];
	Иначе
		ГруппаОтборов = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
			Отбор, ПредставлениеГруппы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	КонецЕсли;
	Если Форма.Организации.Количество() Тогда
		ГруппаОтборов.Использование = Истина;
		ГруппаОтборов.Элементы.Очистить();
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ГруппаОтборов,
			"Организация",
			ВидСравненияКомпоновкиДанных.ВСписке,
			Форма.Организации);
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ГруппаОтборов,
			"Организация",
			ВидСравненияКомпоновкиДанных.НеЗаполнено);
	Иначе
		ГруппаОтборов.Использование = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Функция ИспользуетсяТипОплатыКодовМаркировки(ВидПродукции, Организация = Неопределено) Экспорт
	
	Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.УпакованнаяВода")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.СоковаяПродукция")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БезалкогольныеНапитки")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Пиво")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПивоВПотребительскихУпаковках")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БАДы")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Антисептики")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МорепродуктыПодконтрольныеВЕТИС")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КреслаКоляски")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТехническиеСредстваРеабилитации")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МедицинскиеИзделия")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Велосипеды")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.РастительныеМасла") Тогда
		Результат = Истина;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС") Тогда
		Если Организация = Неопределено Тогда
			Результат = Истина;
		Иначе
			Результат = Не ИнтеграцияИСМПВызовСервера.ОрганизацияЯвляетсяФермером(Организация);
		КонецЕсли;
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ИспользуетсяВладелецGTINВЗаказеНаЭмиссию(СпособВводаВОборот, ВидПродукции) Экспорт
	
	Если СпособВводаВОборот = ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗ.Перемаркировка")
			И (ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Обувь")
			Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность")
			Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БАДы")
			Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КреслаКоляски")
			Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТехническиеСредстваРеабилитации")
			Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МедицинскиеИзделия")
			Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Велосипеды"))
		Или СпособВводаВОборот = ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗ.МаркировкаОстатков")
			И (ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Антисептики")
			Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КреслаКоляски")
			Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТехническиеСредстваРеабилитации")
			Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МедицинскиеИзделия")
			Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность")
			Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Велосипеды")) Тогда
		Возврат Истина;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхПодконтрольныеВЕТИС") Тогда
		Возврат КормаДляЖивотныхПодконтрольныеВЕТИСИспользуетВладельцаGTINВЗаказеНаЭмиссию(СпособВводаВОборот);
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхБезВЕТИС") Тогда
		Возврат КормаДляЖивотныхБезВЕТИСИспользуетВладельцаGTINВЗаказеНаЭмиссию(СпособВводаВОборот);
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МясоПодконтрольноеВЕТИС") Тогда
		Возврат МясоПодконтрольноеВЕТИСИспользуетВладельцаGTINВЗаказеНаЭмиссию(СпособВводаВОборот);
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ВетеринарныеПрепараты") Тогда
		Возврат ВетеринарныеПрепаратыИспользуетВладельцаGTINВЗаказеНаЭмиссию(СпособВводаВОборот);
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ИгрыИИгрушкиДляДетей") Тогда
		Возврат ИгрыИИгрушкиДляДетейИспользуетВладельцаGTINВЗаказеНаЭмиссию(СпособВводаВОборот);
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.РадиоэлектроннаяПродукция") Тогда
		Возврат РадиоэлектроннаяПродукцияИспользуетВладельцаGTINВЗаказеНаЭмиссию(СпособВводаВОборот);
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТитановаяМеталлопродукция") Тогда
		Возврат ТитановаяМеталлопродукцияИспользуетВладельцаGTINВЗаказеНаЭмиссию(СпособВводаВОборот);
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КонсервированнаяПродукцияПодконтрольнаяВЕТИС") Тогда
		Возврат КонсервированнаяПродукцияПодконтрольнаяВЕТИСИспользуетВладельцаGTINВЗаказеНаЭмиссию(СпособВводаВОборот);
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КонсервированнаяПродукцияБезВЕТИС") Тогда
		Возврат КонсервированнаяПродукцияБезВЕТИСИспользуетВладельцаGTINВЗаказеНаЭмиссию(СпособВводаВОборот);
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.РастительныеМасла") Тогда
		Возврат РастительныеМаслаИспользуетВладельцаGTINВЗаказеНаЭмиссию(СпособВводаВОборот);
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ОптоволокноИОптоволоконнаяПродукция") Тогда
		Возврат ОптоволокноИОптоволоконнаяПродукцияИспользуетВладельцаGTINВЗаказеНаЭмиссию(СпособВводаВОборот);
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПарфюмерныеИКосметическиеСредстваИБытоваяХимия") Тогда
		Возврат ПарфюмерныеИКосметическиеСредстваИБытоваяХимияИспользуетВладельцаGTINВЗаказеНаЭмиссию(СпособВводаВОборот);
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПечатнаяПродукция") Тогда
		Возврат ПечатнаяПродукцияИспользуетВладельцаGTINВЗаказеНаЭмиссию(СпособВводаВОборот);
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.СтроительныеМатериалы") Тогда
		Возврат СтроительныеМатериалыИспользуетВладельцаGTINВЗаказеНаЭмиссию(СпособВводаВОборот);
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ОтопительныеПриборы") Тогда
		Возврат ОтопительныеПриборыИспользуетВладельцаGTINВЗаказеНаЭмиссию(СпособВводаВОборот);
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Бакалея") Тогда
		Возврат БакалеяИспользуетВладельцаGTINВЗаказеНаЭмиссию(СпособВводаВОборот);
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АлкогольнаяПродукцияДо9Процентов") Тогда
		Возврат АлкогольнаяПродукцияДо9ПроцентовИспользуетВладельцаGTINВЗаказеНаЭмиссию(СпособВводаВОборот);
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТелефоныИНоутбуки") Тогда
		Возврат ТелефоныИНоутбукиИспользуетВладельцаGTINВЗаказеНаЭмиссию(СпособВводаВОборот);
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПиротехническиеИзделияИСредстваПожарнойБезопасности") Тогда
		Возврат ПиротехническиеИзделияИСредстваПожарнойБезопасностиИспользуетВладельцаGTINВЗаказеНаЭмиссию(СпособВводаВОборот);
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КабельнаяПродукция") Тогда
		Возврат КабельнаяПродукцияИспользуетВладельцаGTINВЗаказеНаЭмиссию(СпособВводаВОборот);
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МоторныеМасла") Тогда
		Возврат МоторныеМаслаИспользуетВладельцаGTINВЗаказеНаЭмиссию(СпособВводаВОборот);
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ИменаПараметровРаботыКлиента() Экспорт
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить(
		"ВерсияБПОПоддерживаетПроверкуКМЕдинымМетодом",
		"ИнтеграцияИСМП_ВерсияБПОПоддерживаетПроверкуКМСредствамиККТЕдинымМетодом");
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#Область ЗаполнениеСтруктур

Функция РеквизитыСозданияКонтрагента() Экспорт
	
	ДанныеКонтрагента = Новый Структура;
	ДанныеКонтрагента.Вставить("Наименование");
	ДанныеКонтрагента.Вставить("НаименованиеПолное");
	ДанныеКонтрагента.Вставить("ИНН");
	ДанныеКонтрагента.Вставить("КПП");
	ДанныеКонтрагента.Вставить("ЮридическийАдрес");
	ДанныеКонтрагента.Вставить("РегистрационныйНомер");
	Возврат ДанныеКонтрагента;
	
КонецФункции

Функция ИнициализироватьСтруктуруПодбораКодаТНВЭД() Экспорт
	
	ДанныеКодТНВЭД = Новый Структура;
	ДанныеКодТНВЭД.Вставить("Организация", Неопределено);
	ДанныеКодТНВЭД.Вставить("ВидПродукции", Неопределено);
	ДанныеКодТНВЭД.Вставить("КодТНВЭД", Неопределено);
	ДанныеКодТНВЭД.Вставить("ВозвращатьСсылкуНаЭлементКлассификатора", Ложь);
	Возврат ДанныеКодТНВЭД;
	
КонецФункции

#КонецОбласти

#Область ПервичныйДокумент

//Возвращает представление первичного документа собранное из составных частей
//
//Параметры:
//   Реквизиты - Структура - информация о первичном документе:
//   * Оплачен - Булево - оплачен
//   * ВидПервичногоДокумента - ПеречислениеСсылка.ВидыПервичныхДокументовИСМП - вид документа
//   * НаименованиеПервичногоДокумента - Строка - наименование документа
//   * НомерПервичногоДокумента - Строка - номер документа
//   * ДатаПервичногоДокумента - Дата - дата документа
//
//Возвращаемое значение:
//   Строка - представление первичного документа
//
Функция ПредставлениеПервичногоДокумента(Реквизиты) Экспорт
	
	Если Не ЗначениеЗаполнено(Реквизиты.ВидПервичногоДокумента) Тогда
		Возврат "";
	КонецЕсли;
	
	ЧастиИмени = Новый Массив;
	
	Если Реквизиты.ВидПервичногоДокумента = ПредопределенноеЗначение("Перечисление.ВидыПервичныхДокументовИСМП.АктУничтожения") Тогда
		ЧастиИмени.Добавить(НСтр("ru = 'Акт уничтожения'"));
	ИначеЕсли Реквизиты.ВидПервичногоДокумента = ПредопределенноеЗначение("Перечисление.ВидыПервичныхДокументовИСМП.КассовыйЧек") Тогда
		ЧастиИмени.Добавить(НСтр("ru = 'Чек'"));
	ИначеЕсли Реквизиты.ВидПервичногоДокумента = ПредопределенноеЗначение("Перечисление.ВидыПервичныхДокументовИСМП.ТаможеннаяДекларация") Тогда
		ЧастиИмени.Добавить(НСтр("ru = 'ГТД'"));
	ИначеЕсли Реквизиты.ВидПервичногоДокумента = ПредопределенноеЗначение("Перечисление.ВидыПервичныхДокументовИСМП.ТоварнаяНакладная") Тогда
		ЧастиИмени.Добавить(НСтр("ru = 'Товарная накладная'"));
	ИначеЕсли Реквизиты.ВидПервичногоДокумента = ПредопределенноеЗначение("Перечисление.ВидыПервичныхДокументовИСМП.ТоварныйЧек") Тогда
		ЧастиИмени.Добавить(НСтр("ru = 'Товарный чек'"));
	ИначеЕсли Реквизиты.ВидПервичногоДокумента = ПредопределенноеЗначение("Перечисление.ВидыПервичныхДокументовИСМП.УПД") Тогда
		ЧастиИмени.Добавить(НСтр("ru = 'УПД'"));
	ИначеЕсли Реквизиты.ВидПервичногоДокумента = ПредопределенноеЗначение("Перечисление.ВидыПервичныхДокументовИСМП.Прочее") Тогда
		ЧастиИмени.Добавить(Реквизиты.НаименованиеПервичногоДокумента);
	КонецЕсли;
	ЧастиИмени.Добавить(СтрШаблон(НСтр("ru = '№ %1'"), Реквизиты.НомерПервичногоДокумента));
	ЧастиИмени.Добавить(СтрШаблон(НСтр("ru = 'от %1'"), Формат(Реквизиты.ДатаПервичногоДокумента,"ДЛФ=D;")));
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Реквизиты, "Оплачен")
		И Реквизиты.Оплачен Тогда
		ЧастиИмени.Добавить(НСтр("ru = '(оплачен)'"));
	КонецЕсли;
	Возврат СтрСоединить(ЧастиИмени, " ");
	
КонецФункции

Функция СоответствиеПричинПеремаркировкиПервичногоДокумента(Причина1, Причина2) Экспорт
	
	Возврат Причина1 = Причина2
	Или (Причина1 = ПредопределенноеЗначение("Перечисление.ПричиныПеремаркировкиТоваровИСМП.ВозвратОтРозничногоПокупателя")
		И Причина2 = ПредопределенноеЗначение("Перечисление.ПричиныПеремаркировкиТоваровИСМП.ВозвратВСлучаеДистанционнойПродажи"))
	Или (Причина2 = ПредопределенноеЗначение("Перечисление.ПричиныПеремаркировкиТоваровИСМП.ВозвратОтРозничногоПокупателя")
		И Причина1 = ПредопределенноеЗначение("Перечисление.ПричиныПеремаркировкиТоваровИСМП.ВозвратВСлучаеДистанционнойПродажи"))
	Или (Причина1 = ПредопределенноеЗначение("Перечисление.ПричиныПеремаркировкиТоваровИСМП.ВозвратОтЮридическогоЛица")
		И Причина2 = ПредопределенноеЗначение("Перечисление.ПричиныПеремаркировкиТоваровИСМП.ВозвратИзЕАЭС"))
	Или (Причина2 = ПредопределенноеЗначение("Перечисление.ПричиныПеремаркировкиТоваровИСМП.ВозвратОтЮридическогоЛица")
		И Причина1 = ПредопределенноеЗначение("Перечисление.ПричиныПеремаркировкиТоваровИСМП.ВозвратИзЕАЭС"));
	
КонецФункции

Функция ПолучитьНеДоступныеПричиныПеремаркировкиДляПервичногоДокумента() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ПричиныПеремаркировкиТоваровИСМП.ПустаяСсылка"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ПричиныПеремаркировкиТоваровИСМП.ОшибкиОписанияТовара"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ПричиныПеремаркировкиТоваровИСМП.ИспорченоУтрачено"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ПричиныПеремаркировкиТоваровИСМП.РеализацияТоваровПриобретенныхНеДляПродажи"));
	
	Возврат Результат;
	
КонецФункции

Функция ПричинаПеремаркировкиДоступнаДляПервичногоДокумента(ПричинаПеремаркировки) Экспорт
	
	Возврат ПолучитьНеДоступныеПричиныПеремаркировкиДляПервичногоДокумента().Найти(ПричинаПеремаркировки) = Неопределено;
	
КонецФункции

Функция ПолучитьДоступныеВидыПервичныхДокументовДляПричиныПеремаркировки(ПричинаПеремаркировки) Экспорт
	
	ДоступныеВидыПервичныхДокументов = Новый СписокЗначений;
	Если ПричинаПеремаркировки = ПредопределенноеЗначение("Перечисление.ПричиныПеремаркировкиТоваровИСМП.ВозвратОтРозничногоПокупателя")
		Или ПричинаПеремаркировки = ПредопределенноеЗначение("Перечисление.ПричиныПеремаркировкиТоваровИСМП.ВозвратВСлучаеДистанционнойПродажи")
		Тогда
		
		ДоступныеВидыПервичныхДокументов.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПервичныхДокументовИСМП.КассовыйЧек"));
		ДоступныеВидыПервичныхДокументов.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПервичныхДокументовИСМП.ТоварныйЧек"));
		
	ИначеЕсли ПричинаПеремаркировки = ПредопределенноеЗначение("Перечисление.ПричиныПеремаркировкиТоваровИСМП.ВозвратОтЮридическогоЛица")
		Или ПричинаПеремаркировки = ПредопределенноеЗначение("Перечисление.ПричиныПеремаркировкиТоваровИСМП.ВозвратИзЕАЭС")
		Тогда
		
		ДоступныеВидыПервичныхДокументов.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПервичныхДокументовИСМП.ТоварнаяНакладная"));
		ДоступныеВидыПервичныхДокументов.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПервичныхДокументовИСМП.УПД"));
		
	Иначе
		Возврат ДоступныеВидыПервичныхДокументов;
	КонецЕсли;
	
	ДоступныеВидыПервичныхДокументов.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПервичныхДокументовИСМП.Прочее"));
	
	Возврат ДоступныеВидыПервичныхДокументов;
	
КонецФункции

#КонецОбласти

#Область НанесениеКодовМаркировки

Функция ОбязательноеУказаниеПервичногоДокументаДляПиваВОтчетеОНанесении() Экспорт
	
	Возврат Ложь;
	
КонецФункции

Функция ОбязательноеУказаниеСодержанияЭтиловогоСпиртаДляПиваВОтчетеОНанесении() Экспорт
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Сертификация

Процедура ЗаполнитьСертификациюПоСтроке(Форма, ДанныеСтроки, ДоступноУказаниеНомераСкважины)

	Если ЗначениеЗаполнено(ДанныеСтроки.ВидДокументаСертификации) Тогда

		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("ВидСертификации",   ДанныеСтроки.ВидДокументаСертификации);
		ПараметрыПоиска.Вставить("НомерСертификации", ДанныеСтроки.НомерДокументаСертификации);
		ПараметрыПоиска.Вставить("ДатаСертификации",  ДанныеСтроки.ДатаДокументаСертификации);
		ПараметрыПоиска.Вставить("КемВыдан",          "");
		Если ДоступноУказаниеНомераСкважины Тогда
			ПараметрыПоиска.Вставить("НомерСкважины", ДанныеСтроки.НомерСкважины);
		КонецЕсли;
		ПараметрыПоиска.Вставить("Номенклатура", ДанныеСтроки.Номенклатура);

		НайденныеСтроки = Форма.КэшСертификации.НайтиСтроки(ПараметрыПоиска);

		Если НайденныеСтроки.Количество() > 0 Тогда

			СтрокаКеша = НайденныеСтроки.Получить(0);

			Если ДанныеСтроки.Сертификация <> СтрокаКеша.Представление Тогда
				ДанныеСтроки.Сертификация = СтрокаКеша.Представление;
			КонецЕсли;

			Возврат;

		Иначе

			ДанныеСтроки.ВидДокументаСертификации     = ПредопределенноеЗначение("Перечисление.ВидыДокументовОбязательнойСертификацииИС.ПустаяСсылка");
			ДанныеСтроки.НомерДокументаСертификации   = "";
			ДанныеСтроки.ДатаДокументаСертификации    = Дата('00010101');
			ДанныеСтроки.НомерСкважины = "";
			ДанныеСтроки.Сертификация = "";

		КонецЕсли;

	Иначе

		ДанныеСтроки.Сертификация = "";

	КонецЕсли;

	ПараметрыПоиска = Новый Структура();
	ПараметрыПоиска.Вставить("Номенклатура", ДанныеСтроки.Номенклатура);
	ПараметрыПоиска.Вставить("КемВыдан",     "");

	НайденныеСтроки = Форма.КэшСертификации.НайтиСтроки(ПараметрыПоиска);
	Если НайденныеСтроки.Количество() > 0 Тогда
		СтрокаКеша = НайденныеСтроки.Получить(0);

		ДанныеСтроки.ВидДокументаСертификации   = СтрокаКеша.ВидСертификации;
		ДанныеСтроки.НомерДокументаСертификации = СтрокаКеша.НомерСертификации;
		ДанныеСтроки.ДатаДокументаСертификации  = СтрокаКеша.ДатаСертификации;
		
		Если ДоступноУказаниеНомераСкважины Тогда
			ДанныеСтроки.НомерСкважины = СтрокаКеша.НомерСкважины;
		КонецЕсли;

		ДанныеСтроки.Сертификация = СтрокаКеша.Представление;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область НовыеТоварныеГруппыВнедрение

#Область ИспользуетСрокГодностиБезОбязательногоЗаполнения

Функция КормаДляЖивотныхПодконтрольныеВЕТИСИспользуетСрокГодностиБезОбязательногоЗаполнения()
	Возврат Истина;
КонецФункции

Функция КормаДляЖивотныхБезВЕТИСИспользуетСрокГодностиБезОбязательногоЗаполнения()
	Возврат Истина;
КонецФункции

Функция МясоПодконтрольноеВЕТИСИспользуетСрокГодностиБезОбязательногоЗаполнения()
	Возврат Ложь;
КонецФункции

Функция ВетеринарныеПрепаратыИспользуетСрокГодностиБезОбязательногоЗаполнения()
	Возврат Истина;
КонецФункции

Функция ИгрыИИгрушкиДляДетейИспользуетСрокГодностиБезОбязательногоЗаполнения()
	Возврат Истина;
КонецФункции

Функция РадиоэлектроннаяПродукцияИспользуетСрокГодностиБезОбязательногоЗаполнения()
	Возврат Ложь;
КонецФункции

Функция ТитановаяМеталлопродукцияИспользуетСрокГодностиБезОбязательногоЗаполнения()
	Возврат Ложь;
КонецФункции

Функция КонсервированнаяПродукцияПодконтрольнаяВЕТИСИспользуетСрокГодностиБезОбязательногоЗаполнения()
	Возврат Истина;
КонецФункции

Функция КонсервированнаяПродукцияБезВЕТИСИспользуетСрокГодностиБезОбязательногоЗаполнения()
	Возврат Истина;
КонецФункции

Функция РастительныеМаслаИспользуетСрокГодностиБезОбязательногоЗаполнения()
	Возврат Истина;
КонецФункции

Функция ОптоволокноИОптоволоконнаяПродукцияИспользуетСрокГодностиБезОбязательногоЗаполнения()
	Возврат Ложь;
КонецФункции

Функция ПарфюмерныеИКосметическиеСредстваИБытоваяХимияИспользуетСрокГодностиБезОбязательногоЗаполнения()
	Возврат Истина;
КонецФункции

Функция ПечатнаяПродукцияИспользуетСрокГодностиБезОбязательногоЗаполнения()
	Возврат Ложь;
КонецФункции

Функция СтроительныеМатериалыИспользуетСрокГодностиБезОбязательногоЗаполнения()
	Возврат Ложь;
КонецФункции

Функция ОтопительныеПриборыИспользуетСрокГодностиБезОбязательногоЗаполнения()
	Возврат Ложь;
КонецФункции

Функция БакалеяИспользуетСрокГодностиБезОбязательногоЗаполнения()
	Возврат Ложь;
КонецФункции

Функция АлкогольнаяПродукцияДо9ПроцентовИспользуетСрокГодностиБезОбязательногоЗаполнения()
	Возврат Истина;
КонецФункции

Функция ТелефоныИНоутбукиИспользуетСрокГодностиБезОбязательногоЗаполнения()
	Возврат Ложь;
КонецФункции

Функция ПиротехническиеИзделияИСредстваПожарнойБезопасностиИспользуетСрокГодностиБезОбязательногоЗаполнения()
	Возврат Ложь;
КонецФункции

Функция КабельнаяПродукцияИспользуетСрокГодностиБезОбязательногоЗаполнения()
	Возврат Ложь;
КонецФункции

Функция МоторныеМаслаИспользуетСрокГодностиБезОбязательногоЗаполнения()
	Возврат Ложь;
КонецФункции

#КонецОбласти

#Область ИспользуетДатуПроизводства

Функция КормаДляЖивотныхПодконтрольныеВЕТИСИспользуетДатуПроизводства()
	Возврат Истина;
КонецФункции

Функция КормаДляЖивотныхБезВЕТИСИспользуетДатуПроизводства()
	Возврат Истина;
КонецФункции

Функция МясоПодконтрольноеВЕТИСИспользуетДатуПроизводства()
	Возврат Ложь;
КонецФункции

Функция ВетеринарныеПрепаратыИспользуетДатуПроизводства()
	Возврат Истина;
КонецФункции

Функция ИгрыИИгрушкиДляДетейИспользуетДатуПроизводства()
	Возврат Истина;
КонецФункции

Функция РадиоэлектроннаяПродукцияИспользуетДатуПроизводства()
	Возврат Истина;
КонецФункции

Функция ТитановаяМеталлопродукцияИспользуетДатуПроизводства()
	Возврат Истина;
КонецФункции

Функция КонсервированнаяПродукцияПодконтрольнаяВЕТИСИспользуетДатуПроизводства()
	Возврат Истина;
КонецФункции

Функция КонсервированнаяПродукцияБезВЕТИСИспользуетДатуПроизводства()
	Возврат Истина;
КонецФункции

Функция РастительныеМаслаИспользуетДатуПроизводства()
	Возврат Истина;
КонецФункции

Функция ОптоволокноИОптоволоконнаяПродукцияИспользуетДатуПроизводства()
	Возврат Истина;
КонецФункции

Функция ПарфюмерныеИКосметическиеСредстваИБытоваяХимияИспользуетДатуПроизводства()
	Возврат Истина;
КонецФункции

Функция ПечатнаяПродукцияИспользуетДатуПроизводства()
	Возврат Истина;
КонецФункции

Функция СтроительныеМатериалыИспользуетДатуПроизводства()
	Возврат Истина;
КонецФункции

Функция ОтопительныеПриборыИспользуетДатуПроизводства()
	Возврат Истина;
КонецФункции

Функция БакалеяИспользуетДатуПроизводства()
	Возврат Истина;
КонецФункции

Функция АлкогольнаяПродукцияДо9ПроцентовИспользуетДатуПроизводства()
	Возврат Истина;
КонецФункции

Функция ТелефоныИНоутбукиИспользуетДатуПроизводства()
	Возврат Истина;
КонецФункции

Функция ПиротехническиеИзделияИСредстваПожарнойБезопасностиИспользуетДатуПроизводства()
	Возврат Истина;
КонецФункции

Функция КабельнаяПродукцияИспользуетДатуПроизводства()
	Возврат Истина;
КонецФункции

Функция МоторныеМаслаИспользуетДатуПроизводства()
	Возврат Истина;
КонецФункции

#КонецОбласти

#Область ИспользуетВладельцаGTINВЗаказеНаЭмиссию

Функция КормаДляЖивотныхПодконтрольныеВЕТИСИспользуетВладельцаGTINВЗаказеНаЭмиссию(СпособВводаВОборот)
	Возврат Ложь;
КонецФункции

Функция КормаДляЖивотныхБезВЕТИСИспользуетВладельцаGTINВЗаказеНаЭмиссию(СпособВводаВОборот)
	Возврат Ложь;
КонецФункции

Функция МясоПодконтрольноеВЕТИСИспользуетВладельцаGTINВЗаказеНаЭмиссию(СпособВводаВОборот)
	Возврат Ложь;
КонецФункции

Функция ВетеринарныеПрепаратыИспользуетВладельцаGTINВЗаказеНаЭмиссию(СпособВводаВОборот)
	Возврат Ложь;
КонецФункции

Функция ИгрыИИгрушкиДляДетейИспользуетВладельцаGTINВЗаказеНаЭмиссию(СпособВводаВОборот)
	Возврат Ложь;
КонецФункции

Функция РадиоэлектроннаяПродукцияИспользуетВладельцаGTINВЗаказеНаЭмиссию(СпособВводаВОборот)
	Возврат Ложь;
КонецФункции

Функция ТитановаяМеталлопродукцияИспользуетВладельцаGTINВЗаказеНаЭмиссию(СпособВводаВОборот)
	Возврат Ложь;
КонецФункции

Функция КонсервированнаяПродукцияПодконтрольнаяВЕТИСИспользуетВладельцаGTINВЗаказеНаЭмиссию(СпособВводаВОборот)
	Возврат Ложь;
КонецФункции

Функция КонсервированнаяПродукцияБезВЕТИСИспользуетВладельцаGTINВЗаказеНаЭмиссию(СпособВводаВОборот)
	Возврат Ложь;
КонецФункции

Функция РастительныеМаслаИспользуетВладельцаGTINВЗаказеНаЭмиссию(СпособВводаВОборот)
	Возврат Ложь;
КонецФункции

Функция ОптоволокноИОптоволоконнаяПродукцияИспользуетВладельцаGTINВЗаказеНаЭмиссию(СпособВводаВОборот)
	Возврат Ложь;
КонецФункции

Функция ПарфюмерныеИКосметическиеСредстваИБытоваяХимияИспользуетВладельцаGTINВЗаказеНаЭмиссию(СпособВводаВОборот)
	Возврат Ложь;
КонецФункции

Функция ПечатнаяПродукцияИспользуетВладельцаGTINВЗаказеНаЭмиссию(СпособВводаВОборот)
	Возврат Ложь;
КонецФункции

Функция СтроительныеМатериалыИспользуетВладельцаGTINВЗаказеНаЭмиссию(СпособВводаВОборот)
	Возврат Ложь;
КонецФункции

Функция ОтопительныеПриборыИспользуетВладельцаGTINВЗаказеНаЭмиссию(СпособВводаВОборот)
	Возврат Ложь;
КонецФункции

Функция БакалеяИспользуетВладельцаGTINВЗаказеНаЭмиссию(СпособВводаВОборот)
	Возврат Ложь;
КонецФункции

Функция АлкогольнаяПродукцияДо9ПроцентовИспользуетВладельцаGTINВЗаказеНаЭмиссию(СпособВводаВОборот)
	Возврат Ложь;
КонецФункции

Функция ТелефоныИНоутбукиИспользуетВладельцаGTINВЗаказеНаЭмиссию(СпособВводаВОборот)
	Возврат Ложь;
КонецФункции

Функция ПиротехническиеИзделияИСредстваПожарнойБезопасностиИспользуетВладельцаGTINВЗаказеНаЭмиссию(СпособВводаВОборот)
	Возврат Ложь;
КонецФункции

Функция КабельнаяПродукцияИспользуетВладельцаGTINВЗаказеНаЭмиссию(СпособВводаВОборот)
	Возврат Ложь;
КонецФункции

Функция МоторныеМаслаИспользуетВладельцаGTINВЗаказеНаЭмиссию(СпособВводаВОборот)
	Возврат Ложь;
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти
