
////////////////////////////////////////////////////////////////////////////////
// КОД ПРОЦЕДУР И ФУНКЦИЙ модуля ДатыЗапретаИзмененияПереопределяемый
// для поддержки библиотечного подхода разработки.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Вызывается из переопределяемого модуля.
// Позволяет изменить работу интерфейса при встраивании.
//
// Параметры:
//  НастройкиРаботыИнтерфейса - Структура - содержит свойство:
//   * ИспользоватьВнешнихПользователей - Булево - (начальное значение Ложь),
//     если установить Истина, тогда даты запрета можно будет настраивать для внешних пользователей.
//
Процедура НастройкаИнтерфейса(Знач НастройкиРаботыИнтерфейса) Экспорт
	
	НастройкиРаботыИнтерфейса.ИспользоватьВнешнихПользователей = Истина;
	
КонецПроцедуры

// Вызывается из переопределяемого модуля.
// Содержит описание таблиц и полей объектов для проверки запретов изменения данных.
//   Вызывается из процедуры ИзменениеЗапрещено общего модуля ДатыЗапретаИзменения,
//   используемой в подписке на событие ПередЗаписью объекта для проверки наличия
//   запретов и отказа от изменений запрещенного объекта.
//
// Параметры:
//  ИсточникиДанных - ТаблицаЗначений - с колонками:
//   * Таблица     - Строка - полное имя объекта метаданных,
//                   например, Метаданные.Документы.ПриходнаяНакладная.ПолноеИмя().
//   * ПолеДаты    - Строка - имя реквизита объекта или табличной части,
//                   например "Дата", "Товары.ДатаОтгрузки".
//   * Раздел      - Строка - имя предопределенного элемента
//                   "ПланВидовХарактеристикСсылка.РазделыДатЗапрета".
//   * ПолеОбъекта - Строка - имя реквизита объекта или реквизита табличной части,
//                   например "Организация", "Товары.Склад".
//
//  Для добавления строки имеется процедура ДобавитьСтроку в общем модуле ДатыЗапретаИзменения.
//
Процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(Знач ИсточникиДанных) Экспорт
	
	

	ТМЦВЭксплуатацииСервер.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	
	// Данные(Таблица, ПолеДаты, Раздел, ПолеОбъекта)

	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.НачислениеИСписаниеБонусныхБаллов.ПолноеИмя(),
										"Дата");

#Область АвансовыеОтчеты
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.АвансовыйОтчет.ПолноеИмя(),
										"Дата",
										"АвансовыеОтчеты",
										"Организация");
#КонецОбласти

#Область Банк
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ОтчетБанкаПоОперациямЭквайринга.ПолноеИмя(),
										"Дата",
										"Банк",
										"ДоговорЭквайринга.БанковскийСчет");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ПоступлениеБезналичныхДенежныхСредств.ПолноеИмя(),
										"ДатаПроведенияБанком",
										"Банк",
										"БанковскийСчет");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.СписаниеБезналичныхДенежныхСредств.ПолноеИмя(),
										"ДатаПроведенияБанком",
										"Банк",
										"БанковскийСчет");
#КонецОбласти
	

#Область ВводОстатков
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ВводОстатков.ПолноеИмя(),
										"Дата",
										"ВводОстатков",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ВводОстатковВзаиморасчетов.ПолноеИмя(),
										"Дата",
										"ВводОстатков",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ВводОстатковДенежныхСредств.ПолноеИмя(),
										"Дата",
										"ВводОстатков",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ВводОстатковОПродажахЗаПрошлыеПериоды.ПолноеИмя(),
										"Дата",
										"ВводОстатков",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ВводОстатковПоФинансовымИнструментам.ПолноеИмя(),
										"Дата",
										"ВводОстатков",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ВводОстатковПрочиеРасходы.ПолноеИмя(),
										"Дата",
										"ВводОстатков",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ВводОстатковПрочихАктивовПассивов.ПолноеИмя(),
										"Дата",
										"ВводОстатков",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ВводОстатковРасчетовПоЭквайрингу.ПолноеИмя(),
										"Дата",
										"ВводОстатков",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ВводОстатковСПодотчетниками.ПолноеИмя(),
										"Дата",
										"ВводОстатков",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ВводОстатковТоваров.ПолноеИмя(),
										"Дата",
										"ВводОстатков",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ПервичныйДокумент.ПолноеИмя(),
										"Дата",
										"ВводОстатков",
										"Организация");
#КонецОбласти

#Область ВнутреннееТовародвижение
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.АктОРасхожденияхПослеПеремещения.ПолноеИмя(),
										"Дата",
										"ВнутреннееТовародвижение",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.КорректировкаНазначенияТоваров.ПолноеИмя(),
										"Дата",
										"ВнутреннееТовародвижение",
										"Организация");

	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.СборкаТоваров.ПолноеИмя(),
										"Дата",
										"ВнутреннееТовародвижение",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ВнутреннееПотребление.ПолноеИмя(),
										"Дата",
										"ВнутреннееТовародвижение",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ОприходованиеИзлишковТоваров.ПолноеИмя(),
										"Дата",
										"ВнутреннееТовародвижение",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ПеремещениеТоваров.ПолноеИмя(),
										"Дата",
										"ВнутреннееТовародвижение",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ПересортицаТоваров.ПолноеИмя(),
										"Дата",
										"ВнутреннееТовародвижение",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ПорчаТоваров.ПолноеИмя(),
										"Дата",
										"ВнутреннееТовародвижение",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ПрочееОприходованиеТоваров.ПолноеИмя(),
										"Дата",
										"ВнутреннееТовародвижение",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.СписаниеНедостачТоваров.ПолноеИмя(),
										"Дата",
										"ВнутреннееТовародвижение",
										"Организация");
#КонецОбласти

#Область Закупки
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.АктОРасхожденияхПослеПриемки.ПолноеИмя(),
										"Дата",
										"Закупки",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ВозвратТоваровПоставщику.ПолноеИмя(),
										"Дата",
										"Закупки",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ВыкупВозвратнойТарыУПоставщика.ПолноеИмя(),
										"Дата",
										"Закупки",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.КорректировкаПриобретения.ПолноеИмя(),
										"Дата",
										"Закупки",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ОтчетКомитенту.ПолноеИмя(),
										"Дата",
										"Закупки",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ОтчетКомитентуОСписании.ПолноеИмя(),
										"Дата",
										"Закупки",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ПриобретениеТоваровУслуг.ПолноеИмя(),
										"Дата",
										"Закупки",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ПриобретениеУслугПрочихАктивов.ПолноеИмя(),
										"Дата",
										"Закупки",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ПоступлениеТоваровНаСклад.ПолноеИмя(),
										"Дата",
										"Закупки",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ПоступлениеУслугВПодразделение.ПолноеИмя(),
										"Дата",
										"Закупки",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ТаможеннаяДекларацияИмпорт.ПолноеИмя(),
										"Дата",
										"Закупки",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ВыкупПринятыхНаХранениеТоваров.ПолноеИмя(),
										"Дата",
										"Закупки",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ОтгрузкаТоваровСХранения.ПолноеИмя(),
										"Дата",
										"Закупки",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ПриемкаТоваровНаХранение.ПолноеИмя(),
										"Дата",
										"Закупки",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ПоступлениеТоваровНаСклад.ПолноеИмя(),
										"Дата",
										"Закупки",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ОтчетОСписанииТоваровСХранения.ПолноеИмя(),
										"Дата",
										"Закупки",
										"Организация");

	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.СписаниеРасхожденийПоступлениеПриобретение.ПолноеИмя(),
										"Дата",
										"Закупки",
										"Организация");
#КонецОбласти

#Область Касса
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ОперацияПоПлатежнойКарте.ПолноеИмя(),
										"Дата",
										"Касса",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ПриходныйКассовыйОрдер.ПолноеИмя(),
										"Дата",
										"Касса",
										"Касса");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.РасходныйКассовыйОрдер.ПолноеИмя(),
										"Дата",
										"Касса",
										"Касса");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ИнвентаризацияНаличныхДенежныхСредств.ПолноеИмя(),
										"Дата",
										"Касса",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ОтражениеРасхожденийПриИнкассацииДенежныхСредств.ПолноеИмя(),
										"Дата",
										"Касса",
										"Организация");
#КонецОбласти
	

#Область Планирование
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ПланПродажПоКатегориям.ПолноеИмя(),
										"НачалоПериода",
										"Планирование",
										"Сценарий");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.НормативРаспределенияПлановПродажПоКатегориям.ПолноеИмя(),
										"ДатаНачалаДействия",
										"Планирование",
										"");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ПланОстатков.ПолноеИмя(),
										"НачалоПериода",
										"Планирование",
										"Сценарий");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ПланЗакупок.ПолноеИмя(),
										"НачалоПериода",
										"Планирование",
										"Сценарий");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ПланПродаж.ПолноеИмя(),
										"НачалоПериода",
										"Планирование",
										"Сценарий");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ПланСборкиРазборки.ПолноеИмя(),
										"НачалоПериода",
										"Планирование",
										"Сценарий");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.КорректировкаПлановыхПотребностей.ПолноеИмя(),
										"Период",
										"Планирование",
										"Сценарий");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ПланВнутреннихПотреблений.ПолноеИмя(),
										"НачалоПериода",
										"Планирование",
										"Сценарий");
#КонецОбласти

#Область Продажи
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.АктВыполненныхРабот.ПолноеИмя(),
										"Дата",
										"Продажи",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.АктОРасхожденияхПослеОтгрузки.ПолноеИмя(),
										"Дата",
										"Продажи",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ВозвратТоваровОтКлиента.ПолноеИмя(),
										"Дата",
										"Продажи",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.КорректировкаРеализации.ПолноеИмя(),
										"Дата",
										"Продажи",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ОтчетКомиссионера.ПолноеИмя(),
										"Дата",
										"Продажи",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ОтчетКомиссионераОСписании.ПолноеИмя(),
										"Дата",
										"Продажи",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.РеализацияТоваровУслуг.ПолноеИмя(),
										"Дата",
										"Продажи",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.РеализацияУслугПрочихАктивов.ПолноеИмя(),
										"Дата",
										"Продажи",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ВыкупВозвратнойТарыКлиентом.ПолноеИмя(),
										"Дата",
										"Продажи",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ВыкупТоваровХранителем.ПолноеИмя(),
										"Дата",
										"Продажи",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ПередачаТоваровХранителю.ПолноеИмя(),
										"Дата",
										"Продажи",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ПоступлениеТоваровОтХранителя.ПолноеИмя(),
										"Дата",
										"Продажи",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ОтчетОСписанииТоваровУХранителя.ПолноеИмя(),
										"Дата",
										"Продажи",
										"Организация");
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ПересортицаТоваровУХранителя.ПолноеИмя(),
										"Дата",
										"Продажи",
										"Организация");
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ПорчаТоваровУХранителя.ПолноеИмя(),
										"Дата",
										"Продажи",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ОприходованиеИзлишковТоваровУХранителя.ПолноеИмя(),
										"Дата",
										"Продажи",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ОтчетКомитентуОЗакупках.ПолноеИмя(),
										"Дата",
										"Продажи",
										"Организация");
										
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.УстановкаЦенНоменклатуры.ПолноеИмя(),
										"Дата",
										"Продажи");
#КонецОбласти

#Область ПродажиМеждуОрганизациями
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ВозвратТоваровМеждуОрганизациями.ПолноеИмя(),
										"Дата",
										"ПродажиМеждуОрганизациями",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ВозвратТоваровМеждуОрганизациями.ПолноеИмя(),
										"Дата",
										"ПродажиМеждуОрганизациями",
										"ОрганизацияПолучатель");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ПередачаТоваровМеждуОрганизациями.ПолноеИмя(),
										"Дата",
										"ПродажиМеждуОрганизациями",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ПередачаТоваровМеждуОрганизациями.ПолноеИмя(),
										"Дата",
										"ПродажиМеждуОрганизациями",
										"ОрганизацияПолучатель");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ОтчетПоКомиссииМеждуОрганизациями.ПолноеИмя(),
										"Дата",
										"ПродажиМеждуОрганизациями",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ОтчетПоКомиссииМеждуОрганизациями.ПолноеИмя(),
										"Дата",
										"ПродажиМеждуОрганизациями",
										"Комиссионер");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ОтчетПоКомиссииМеждуОрганизациямиОСписании.ПолноеИмя(),
										"Дата",
										"ПродажиМеждуОрганизациями",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ОтчетПоКомиссииМеждуОрганизациямиОСписании.ПолноеИмя(),
										"Дата",
										"ПродажиМеждуОрганизациями",
										"Комиссионер");
	
	
#КонецОбласти

#Область Производство
#КонецОбласти

#Область РегламентныеОперации
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.РаспределениеДоходовПоНаправлениямДеятельности.ПолноеИмя(),
										"Дата",
										"РегламентныеОперации",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.РаспределениеПрочихЗатрат.ПолноеИмя(),
										"Дата",
										"РегламентныеОперации",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.РаспределениеРасходовБудущихПериодов.ПолноеИмя(),
										"РаспределениеРасходов.Дата",
										"РегламентныеОперации",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.РасчетСебестоимостиТоваров.ПолноеИмя(),
										"Дата",
										"РегламентныеОперации",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ПрочиеДоходыРасходы.ПолноеИмя(),
										"Дата",
										"РегламентныеОперации",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ПрочиеДоходыРасходы.ПолноеИмя(),
										"ПрочиеРасходы.ДатаОтражения",
										"РегламентныеОперации",
										"ПрочиеРасходы.ДатаОтражения");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ПрочиеДоходыРасходы.ПолноеИмя(),
										"ПрочиеДоходы.ДатаОтражения",
										"РегламентныеОперации",
										"ПрочиеРасходы.ДатаОтражения");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ДвижениеПрочихАктивовПассивов.ПолноеИмя(),
										"Дата",
										"РегламентныеОперации",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.НачисленияКредитовИДепозитов.ПолноеИмя(),
										"Дата",
										"РегламентныеОперации",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.РасчетКурсовыхРазниц.ПолноеИмя(),
										"Дата",
										"РегламентныеОперации",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.РасчетПроцентныхРасходовДисконтирования.ПолноеИмя(),
										"Дата",
										"РегламентныеОперации",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.Сторно.ПолноеИмя(),
										"Дата",
										"РегламентныеОперации",
										"Организация");
#КонецОбласти

#Область РозничныеПродажи
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.АннулированиеПодарочныхСертификатов.ПолноеИмя(),
										"Дата",
										"РозничныеПродажи",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ВнесениеДенежныхСредствВКассуККМ.ПолноеИмя(),
										"Дата",
										"РозничныеПродажи",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ВозвратПодарочныхСертификатов.ПолноеИмя(),
										"Дата",
										"РозничныеПродажи",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ВыемкаДенежныхСредствИзКассыККМ.ПолноеИмя(),
										"Дата",
										"РозничныеПродажи",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ОтчетОРозничныхВозвратах.ПолноеИмя(),
										"Дата",
										"РозничныеПродажи",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ОтчетОРозничныхПродажах.ПолноеИмя(),
										"Дата",
										"РозничныеПродажи",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.РеализацияПодарочныхСертификатов.ПолноеИмя(),
										"Дата",
										"РозничныеПродажи",
										"Организация");
#КонецОбласти

#Область СверкиИКорректировкиЗадолженности
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ВзаимозачетЗадолженности.ПолноеИмя(),
										"Дата",
										"СверкиИКорректировкиЗадолженности",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ВзаимозачетЗадолженности.ПолноеИмя(),
										"Дата",
										"СверкиИКорректировкиЗадолженности",
										"ОрганизацияКредитор");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ВзаимозачетЗадолженности.ПолноеИмя(),
										"Дата",
										"СверкиИКорректировкиЗадолженности",
										"КонтрагентДебитор");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ВзаимозачетЗадолженности.ПолноеИмя(),
										"Дата",
										"СверкиИКорректировкиЗадолженности",
										"КонтрагентКредитор");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.КорректировкаЗадолженности.ПолноеИмя(),
										"Дата",
										"СверкиИКорректировкиЗадолженности",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.КорректировкаЗадолженности.ПолноеИмя(),
										"Дата",
										"СверкиИКорректировкиЗадолженности",
										"Контрагент");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.СверкаВзаиморасчетов2_4.ПолноеИмя(),
										"Дата",
										"СверкиИКорректировкиЗадолженности",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.СверкаВзаиморасчетов2_4.ПолноеИмя(),
										"Дата",
										"СверкиИКорректировкиЗадолженности",
										"Контрагент");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.СверкаВзаиморасчетов2_5_11.ПолноеИмя(),
										"Дата",
										"СверкиИКорректировкиЗадолженности",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.СверкаВзаиморасчетов2_5_11.ПолноеИмя(),
										"Дата",
										"СверкиИКорректировкиЗадолженности",
										"Контрагент");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.КорректировкаЗадолженностиПоФинансовымИнструментам.ПолноеИмя(),
										"Дата",
										"СверкиИКорректировкиЗадолженности",
										"Организация");
#КонецОбласти

#Область СкладскиеОперации
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ОрдерНаОтражениеИзлишковТоваров.ПолноеИмя(),
										"Дата",
										"СкладскиеОперации",
										"Склад");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ОрдерНаОтражениеНедостачТоваров.ПолноеИмя(),
										"Дата",
										"СкладскиеОперации",
										"Склад");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ОрдерНаОтражениеПересортицыТоваров.ПолноеИмя(),
										"Дата",
										"СкладскиеОперации",
										"Склад");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ОрдерНаОтражениеПорчиТоваров.ПолноеИмя(),
										"Дата",
										"СкладскиеОперации",
										"Склад");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ОрдерНаПеремещениеТоваров.ПолноеИмя(),
										"Дата",
										"СкладскиеОперации",
										"Склад");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ОтборРазмещениеТоваров.ПолноеИмя(),
										"Дата",
										"СкладскиеОперации",
										"Склад");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.КорректировкаПоОрдеруНаТовары.ПолноеИмя(),
										"Дата",
										"СкладскиеОперации",
										"Склад");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.КорректировкаИзлишковНедостачПоТоварнымМестам.ПолноеИмя(),
										"Дата",
										"СкладскиеОперации",
										"Склад");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ПересчетТоваров.ПолноеИмя(),
										"Дата",
										"СкладскиеОперации",
										"Склад");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ПриходныйОрдерНаТовары.ПолноеИмя(),
										"Дата",
										"СкладскиеОперации",
										"Склад");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.РасходныйОрдерНаТовары.ПолноеИмя(),
										"ДатаОтгрузки",
										"СкладскиеОперации",
										"Склад");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.СверкаНачальныхОстатковПоСкладу.ПолноеИмя(),
										"Дата",
										"СкладскиеОперации",
										"Организация");
#КонецОбласти

#Область ФинансовыйКонтур
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.РегистрыНакопления.ПереданнаяВозвратнаяТара.ПолноеИмя(),
										"Период",
										"ФинансовыйКонтур");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.РегистрыНакопления.ПодарочныеСертификаты.ПолноеИмя(),
										"Период",
										"ФинансовыйКонтур");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.РегистрыНакопления.ПринятаяВозвратнаяТара.ПолноеИмя(),
										"Период",
										"ФинансовыйКонтур");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.РегистрыНакопления.ДвиженияПоПрочимАктивамПассивам.ПолноеИмя(),
										"Период",
										"ФинансовыйКонтур",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.РегистрыНакопления.ПрочиеДоходы.ПолноеИмя(),
										"Период",
										"ФинансовыйКонтур",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.РегистрыНакопления.ТоварыУслугиКОформлениюОтчетовКомитентуОЗакупках.ПолноеИмя(),
										"Период",
										"ФинансовыйКонтур",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.РегистрыНакопления.УслугиКОформлениюОтчетовПринципалу.ПолноеИмя(),
										"Период",
										"ФинансовыйКонтур",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.Бронирование.ПолноеИмя(),
										"Дата",
										"ФинансовыйКонтур",
										"Организация");
#КонецОбласти

#Область РетроБонусыКлиентов
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.СписаниеРетроБонусовКлиента.ПолноеИмя(),
										"Дата",
										"РетроБонусыКлиентов",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.АктПремииКлиенту.ПолноеИмя(),
										"ДатаПризнанияВУчете",
										"РетроБонусыКлиентов",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.НачислениеРетроБонусовКлиента.ПолноеИмя(),
										"Дата",
										"РетроБонусыКлиентов",
										"Организация");
	
#КонецОбласти

	РегистрыСведений.ЗаданияКЗакрытиюМесяца.ОписаниеРегистровДляКонтроляДатЗапретаИзменения(ИсточникиДанных);
	РегистрыСведений.ЗаданияКРасчетуСебестоимости.ОписаниеРегистровДляКонтроляДатЗапретаИзменения(ИсточникиДанных);
	РегистрыСведений.ЗаданияКРаспределениюРасчетовСКлиентами.ОписаниеРегистровДляКонтроляДатЗапретаИзменения(ИсточникиДанных);
	РегистрыСведений.ЗаданияКРаспределениюРасчетовСПоставщиками.ОписаниеРегистровДляКонтроляДатЗапретаИзменения(ИсточникиДанных);

	УчетНДСУП.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	

КонецПроцедуры

// Вызывается из переопределяемого модуля.
// Позволяет переопределить выполнение проверок запретов по произвольному условию.
//
// Параметры:
//  Объект       - СправочникОбъект,
//                 ДокументОбъект,
//                 ПланВидовХарактеристикОбъект,
//                 ПланСчетовОбъект,
//                 ПланВидовРасчетаОбъект,
//                 БизнесПроцессОбъект,
//                 ЗадачаОбъект,
//                 ПланОбменаОбъект - объект данных (ПередЗаписью или ПриЧтенииНаСервере).
//               - РегистрСведенийНаборЗаписей,
//                 РегистрНакопленияНаборЗаписей,
//                 РегистрБухгалтерииНаборЗаписей,
//                 РегистрРасчетаНаборЗаписей - набор записей (ПередЗаписью или ПриЧтенииНаСервере).
//
//                 Для документов в свойство ДополнительныеСвойства вставляется свойство РежимЗаписи,
//                 если вызов делается в процессе записи документа.
//  
//  ВыполнятьПроверку    		- Булево - когда Истина, тогда проверка изменения выполняется.
//                                Если установить Ложь, тогда проверка запрета изменения будет пропущена.
//
//  УзелПроверки 				- Неопределено - проверка запрета загрузки не выполняется.
//                              - ПланОбменаСсылка - проверка запрета загрузки выполняется. Если
//                                установить Неопределено, проверка запрета загрузки будет пропущена.
//
//  ВерсияОбъекта               - Строка - начальное значение "". Проверяются обе версии объекта.
//                                Если установить "СтараяВерсия" или "НоваяВерсия", тогда будет
//                                выполнена проверка только старой или только новой версии объекта.
//
Процедура ПередПроверкойЗапретаИзменения(Объект, ВыполнятьПроверку, УзелПроверки, ВерсияОбъекта) Экспорт
	
	Если ОбщегоНазначения.ЭтоРегистр(Объект.Метаданные())
	 И Объект.Отбор.Найти("Регистратор") <> Неопределено Тогда
		ТипРегистратора = ТипЗнч(Объект.Отбор.Регистратор.Значение); // это набор записей документа-регистратора
	Иначе
		ТипРегистратора = Неопределено;
	КонецЕсли;
	
	ТипОбъекта = ТипЗнч(Объект);
		
	Если ТипОбъекта = Тип("ДокументОбъект.СписаниеБезналичныхДенежныхСредств")
	 ИЛИ ТипОбъекта = Тип("ДокументОбъект.ПоступлениеБезналичныхДенежныхСредств") Тогда
		
		// Отказ от проверки с учетом того, что ДатаПроведенияБанком, используемая в проверке, не указывается,
		// если документ не проведен банком, а указывается позже, после проведения документа банком.
		ПроведеноБанкомНоваяВерсия  = Объект.ПроведеноБанком;
		ПроведеноБанкомСтараяВерсия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Объект.Ссылка, "ПроведеноБанком") = Истина;
		
		Если Не ПроведеноБанкомНоваяВерсия И Не ПроведеноБанкомСтараяВерсия Тогда
			ВыполнятьПроверку = Ложь;
			УзелПроверки = Неопределено;
			
		ИначеЕсли Не ПроведеноБанкомНоваяВерсия Тогда
			ВерсияОбъекта = "СтараяВерсия"; // Проверить только новую версию объекта.
			
		ИначеЕсли Не ПроведеноБанкомСтараяВерсия Тогда
			ВерсияОбъекта = "НоваяВерсия"; // Проверить только старую версию объекта.
		КонецЕсли;
		
	КонецЕсли;
	
	ЕстьСвойствоПроверкаДатыЗапретаИзменения = Ложь;
	ПроверитьСвойствоПроверкаДатыЗапретаИзменения(Объект, ВыполнятьПроверку, ЕстьСвойствоПроверкаДатыЗапретаИзменения);
	
	// Для распределения РБП проверка запрета изменений реализована в форме документа.
	Если НЕ ЕстьСвойствоПроверкаДатыЗапретаИзменения
	 И (ТипОбъекта = Тип("ДокументОбъект.РаспределениеРасходовБудущихПериодов")
	 ИЛИ ТипРегистратора = Тип("ДокументСсылка.РаспределениеРасходовБудущихПериодов")) Тогда
		ВыполнятьПроверку = Ложь;
	КонецЕсли;
	
	// Для планов проверка запрета изменений реализована в модуле объекта.
	Если ТипОбъекта = Тип("ДокументОбъект.ПланЗакупок")
	 ИЛИ ТипРегистратора = Тип("ДокументСсылка.ПланЗакупок")
	 ИЛИ ТипОбъекта = Тип("ДокументОбъект.ПланОстатков")
	 ИЛИ ТипРегистратора = Тип("ДокументСсылка.ПланОстатков") 
	 ИЛИ ТипОбъекта = Тип("ДокументОбъект.ПланПродаж")
	 ИЛИ ТипРегистратора = Тип("ДокументСсылка.ПланПродаж")
	 ИЛИ ТипОбъекта = Тип("ДокументОбъект.ПланПродажПоКатегориям")
	 ИЛИ ТипРегистратора = Тип("ДокументСсылка.ПланПродажПоКатегориям")
	 ИЛИ ТипОбъекта = Тип("ДокументОбъект.ПланСборкиРазборки")
	 ИЛИ ТипРегистратора = Тип("ДокументСсылка.ПланСборкиРазборки")
	 ИЛИ ТипОбъекта = Тип("ДокументОбъект.ПланВнутреннихПотреблений")
	 ИЛИ ТипРегистратора = Тип("ДокументСсылка.ПланВнутреннихПотреблений") Тогда
		ВыполнятьПроверку = Ложь;
	КонецЕсли;
	
	
	
	// Движения заказов и заявок на расход ДС по регистрам расчетов проверять не нужно.
	Если ТипОбъекта = Тип("РегистрНакопленияНаборЗаписей.РасчетыСКлиентами")
	 И (ТипРегистратора = Тип("ДокументСсылка.ЗаказКлиента")
		ИЛИ ТипРегистратора = Тип("ДокументСсылка.ГрафикИсполненияДоговора")
		ИЛИ ТипРегистратора = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента")
		) Тогда
		
		ВыполнятьПроверку = Ложь;
		
	ИначеЕсли ТипОбъекта = Тип("РегистрНакопленияНаборЗаписей.РасчетыСПоставщиками")
	 И (ТипРегистратора = Тип("ДокументСсылка.ЗаказПоставщику")
		ИЛИ ТипРегистратора = Тип("ДокументСсылка.ГрафикИсполненияДоговора")
		) Тогда
		
		ВыполнятьПроверку = Ложь;
		
	ИначеЕсли ТипРегистратора = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
		
		ВыполнятьПроверку = Ложь;
		
	КонецЕсли;
	
	// Для отгрузки без перехода права собственности в закрытом периоде
	Если (ТипОбъекта = Тип("ДокументОбъект.РеализацияТоваровУслуг")
	 ИЛИ ТипОбъекта = Тип("ДокументОбъект.РеализацияУслугПрочихАктивов"))
		И Объект.ДополнительныеСвойства.Свойство("ИзменилосьТолькоСостояниеПереходаПраваСобственности")
		И Объект.ДополнительныеСвойства.ИзменилосьТолькоСостояниеПереходаПраваСобственности Тогда
		
		ВерсияОбъекта = "НоваяВерсия"; // Проверить только новую версию объекта.
		
	КонецЕсли;
	
	// Для изменения статуса Сверки взаиморасчетов в закрытом периоде
	Если ТипОбъекта = Тип("ДокументОбъект.СверкаВзаиморасчетов2_4") 
		И Объект.ДополнительныеСвойства.Свойство("ИзменилсяТолькоСтатусСвереноНаСверке")
		И Объект.ДополнительныеСвойства.ИзменилсяТолькоСтатусСвереноНаСверке Тогда 
		
		ВыполнятьПроверку = Ложь;		
				
	КонецЕсли;
	
	Если ТипРегистратора = Тип("ДокументСсылка.Бронирование") Тогда
		ВыполнятьПроверку = Ложь;
	КонецЕсли;
	
	Если ТипОбъекта = Тип("ДокументОбъект.АктПремииКлиенту") Тогда
		
		ВыполнятьПроверкуНовойВерсии = Ложь;
		ВыполнятьПроверкуСтаройВерсии = Ложь;
		
		Если Объект.Статус = Перечисления.СтатусыАктовПремийКлиентам.Получен
		   И Объект.ДатаПризнанияВУчете <> Дата(1, 1, 1) Тогда
			
			ВыполнятьПроверкуНовойВерсии = Истина;
			
		КонецЕсли;
		
		Реквизиты = "Статус, ДатаПризнанияВУчете";
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Ссылка, Реквизиты);
		
		Если ЗначенияРеквизитов.Статус = Перечисления.СтатусыАктовПремийКлиентам.Получен
		   И ЗначенияРеквизитов.ДатаПризнанияВУчете <> Дата(1, 1, 1) Тогда
			
			ВыполнятьПроверкуСтаройВерсии = Истина;
			
		КонецЕсли;
		
		Если Не ВыполнятьПроверкуНовойВерсии
		   И Не ВыполнятьПроверкуСтаройВерсии Тогда
			
			ВыполнятьПроверку = Ложь;
			УзелПроверки = Неопределено;
			
		ИначеЕсли ВыполнятьПроверкуНовойВерсии Тогда
			
			ВерсияОбъекта = "НоваяВерсия";
			
		Иначе
			
			ВерсияОбъекта = "СтараяВерсия";
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура добавляет в дополнительные свойства параметр, отключающий проверку даты запрета изменений.
//
// Параметры:
//  Объект       - СправочникОбъект,
//                 ДокументОбъект,
//                 ПланВидовХарактеристикОбъект,
//                 ПланСчетовОбъект,
//                 ПланВидовРасчетаОбъект,
//                 БизнесПроцессОбъект,
//                 ЗадачаОбъект,
//                 ПланОбменаОбъект - объект данных (ПередЗаписью или ПриЧтенииНаСервере).
//                 РегистрСведенийНаборЗаписей,
//                 РегистрНакопленияНаборЗаписей,
//                 РегистрБухгалтерииНаборЗаписей.
//
Процедура ОтключитьПроверкуДатыЗапретаИзменения(Объект) Экспорт
	
	Объект.ДополнительныеСвойства.Вставить("ПроверкаДатыЗапретаИзменения", Ложь);
	
КонецПроцедуры

// Процедура добавляет в дополнительные свойства параметр, принудительно включающий проверку даты запрета изменений.
//
// Параметры:
//  Объект       - СправочникОбъект,
//                 ДокументОбъект,
//                 ПланВидовХарактеристикОбъект,
//                 ПланСчетовОбъект,
//                 ПланВидовРасчетаОбъект,
//                 БизнесПроцессОбъект,
//                 ЗадачаОбъект,
//                 ПланОбменаОбъект - объект данных (ПередЗаписью или ПриЧтенииНаСервере).
//                 РегистрСведенийНаборЗаписей,
//                 РегистрНакопленияНаборЗаписей,
//                 РегистрБухгалтерииНаборЗаписей.
//
Процедура ВключитьПроверкуДатыЗапретаИзменения(Объект) Экспорт
	
	Объект.ДополнительныеСвойства.Вставить("ПроверкаДатыЗапретаИзменения", Истина);
	
КонецПроцедуры

Процедура ПроверитьСвойствоПроверкаДатыЗапретаИзменения(Объект, ВыполнятьПроверку, ЕстьСвойствоПроверкаДатыЗапретаИзменения)
	
	ЕстьСвойствоПроверкаДатыЗапретаИзменения = Объект.ДополнительныеСвойства.Свойство("ПроверкаДатыЗапретаИзменения");
	Если ЕстьСвойствоПроверкаДатыЗапретаИзменения Тогда
		ВыполнятьПроверку = Объект.ДополнительныеСвойства.ПроверкаДатыЗапретаИзменения;
	КонецЕсли;
	
КонецПроцедуры

// Позволяет переопределить получение данных для проверки даты запрета старой (существующей) версии данных.
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект метаданных получаемых данных.
//  ИдентификаторДанных - СправочникСсылка,
//                        ДокументСсылка,
//                        ПланВидовХарактеристикСсылка,
//                        ПланСчетовСсылка,
//                        ПланВидовРасчетаСсылка,
//                        БизнесПроцессСсылка,
//                        ЗадачаСсылка,
//                        ПланОбменаСсылка,
//                        Отбор        - ссылка на элемент данных или отбор набора записей, который нужно проверить.
//                                       При этом значение для проверки будет получено из базы данных.
//
//  УзелПроверкиЗапретаЗагрузки - Неопределено, ПланОбменаСсылка - если Неопределено, то проверить запрет 
//                                изменения данных; иначе - загрузку данных из указанного узла плана обмена.
//
//  ДанныеДляПроверки - ТаблицаЗначений - таблица для заполнения правил проверок и последующей передачи в
//                                         функцию НайденЗапретИзмененияДанных общего модуля ДатыЗапретаИзменения.
//                                        см. ДатыЗапретаИзменения.ШаблонДанныхДляПроверки.
//
//  Пример:
//  Если ТипЗнч(ИдентификаторДанных) = Тип("ДокументСсылка.Заказ") Тогда
//  	Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИдентификаторДанных, "Организация, ДатаОкончанияРабот, ЗаказНаряд");
//  	Если Данные.ЗаказНаряд Тогда
//  		Проверка = ДанныеДляПроверки.Добавить();
//  		Проверка.Раздел = "ЗаказНаряды";
//  		Проверка.Объект =  Данные.Организация;
//  		Проверка.Дата   = Данные.ДатаОкончанияРабот;
//  	КонецЕсли;
//  КонецЕсли;
//
Процедура ПередПроверкойСтаройВерсииДанных(ОбъектМетаданных, ИдентификаторДанных, УзелПроверкиЗапретаЗагрузки, ДанныеДляПроверки) Экспорт
	
	Если ТипЗнч(ИдентификаторДанных) = Тип("ДокументСсылка.Сторно") Тогда
		
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИдентификаторДанных, "СторнируемыйДокумент, Дата");
		ТипДокументаОснования = Данные.СторнируемыйДокумент.Метаданные().ПолноеИмя();
		ДатыЗапретаДействующие = ДатыЗапретаИзмененияСлужебный.ИсточникиДанныхДляПроверкиЗапретаИзменения();
		ДатыЗапретаПоОснованию = ДатыЗапретаДействующие.Получить(ТипДокументаОснования);
		
		Для Каждого Запрет Из ДатыЗапретаПоОснованию.Состав Цикл
			Раздел = Запрет.Раздел;
			ПутьКПолюОбъект = Запрет.ПолеОбъекта.Имя;
			
			НоваяСтрока			= ДанныеДляПроверки.Добавить();
			НоваяСтрока.Дата	= Данные.Дата;
			НоваяСтрока.Раздел	= Раздел;
			Если ЗначениеЗаполнено(ПутьКПолюОбъект) Тогда
				НоваяСтрока.Объект	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Данные.СторнируемыйДокумент, ПутьКПолюОбъект);
			КонецЕсли;
		КонецЦикла; 
	ИначеЕсли ТипЗнч(ИдентификаторДанных) = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств") Тогда
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИдентификаторДанных, "Дата, Исправление, БанковскийСчет"); 
		Если ЗначенияРеквизитов.Исправление Тогда
			НоваяСтрока			= ДанныеДляПроверки.Добавить();
			НоваяСтрока.Дата	= ЗначенияРеквизитов.Дата; 
			НоваяСтрока.Раздел	= "Банк";
			НоваяСтрока.Объект  = ЗначенияРеквизитов.БанковскийСчет;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ИдентификаторДанных) = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств") Тогда
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИдентификаторДанных, "Дата, Исправление, БанковскийСчет"); 
		Если ЗначенияРеквизитов.Исправление Тогда
			НоваяСтрока			= ДанныеДляПроверки.Добавить();
			НоваяСтрока.Дата	= ЗначенияРеквизитов.Дата;
			НоваяСтрока.Раздел	= "Банк";
			НоваяСтрока.Объект  = ЗначенияРеквизитов.БанковскийСчет;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Позволяет переопределить получение данных для проверки даты запрета новой (будущей) версии данных.
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект метаданных получаемых данных.
//  Данные  - СправочникОбъект,
//                        ДокументОбъект,
//                        ПланВидовХарактеристикОбъект,
//                        ПланСчетовОбъект,
//                        ПланВидовРасчетаОбъект,
//                        БизнесПроцессОбъект,
//                        ЗадачаОбъект,
//                        ПланОбменаОбъект,
//                        РегистрСведенийНаборЗаписей,
//                        РегистрНакопленияНаборЗаписей,
//                        РегистрБухгалтерииНаборЗаписей,
//                        РегистрРасчетаНаборЗаписей      - проверяемый элемент данных или набор записей.
//
//  УзелПроверкиЗапретаЗагрузки - Неопределено, ПланОбменаСсылка - если Неопределено, то проверить запрет 
//                                изменения данных; иначе - загрузку данных из указанного узла плана обмена.
//
//  ДанныеДляПроверки - ТаблицаЗначений - таблица для заполнения правил проверок и последующей передачи в
//                                         функцию НайденЗапретИзмененияДанных общего модуля ДатыЗапретаИзменения.
//                                        см. ДатыЗапретаИзменения.ШаблонДанныхДляПроверки.
//
//  Пример:
//  Если ТипЗнч(Данные) = Тип("ДокументОбъект.Заказ") И Данные.ЗаказНаряд Тогда
//  	
//  	Проверка = ДанныеДляПроверки.Добавить();
//  	Проверка.Раздел = "ЗаказНаряды";
//  	Проверка.Объект =  Данные.Организация;
//  	Проверка.Дата   = Данные.ДатаОкончанияРабот;
//  	
//  КонецЕсли;
//
Процедура ПередПроверкойНовойВерсииДанных(ОбъектМетаданных, Данные, УзелПроверкиЗапретаЗагрузки, ДанныеДляПроверки) Экспорт

	Если ТипЗнч(Данные) = Тип("ДокументОбъект.Сторно") Тогда
		
		ТипДокументаОснования = Данные.СторнируемыйДокумент.Метаданные().ПолноеИмя();
		ДатыЗапретаДействующие = ДатыЗапретаИзмененияСлужебный.ИсточникиДанныхДляПроверкиЗапретаИзменения();
		ДатыЗапретаПоОснованию = ДатыЗапретаДействующие.Получить(ТипДокументаОснования);
		
		Для Каждого Запрет Из ДатыЗапретаПоОснованию.Состав Цикл
			Раздел = Запрет.Раздел;
			ПутьКПолюОбъект = Запрет.ПолеОбъекта.Имя;
			
			НоваяСтрока			= ДанныеДляПроверки.Добавить();
			НоваяСтрока.Дата	= Данные.Дата;
			НоваяСтрока.Раздел	= Раздел;
			Если ЗначениеЗаполнено(ПутьКПолюОбъект) Тогда
				НоваяСтрока.Объект	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Данные.СторнируемыйДокумент, ПутьКПолюОбъект);
			КонецЕсли;
		КонецЦикла; 
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.СписаниеБезналичныхДенежныхСредств") И Данные.Исправление Тогда
		
		НоваяСтрока			= ДанныеДляПроверки.Добавить();
		НоваяСтрока.Дата	= Данные.Дата;
		НоваяСтрока.Раздел	= "Банк";
		НоваяСтрока.Объект	= Данные.БанковскийСчет;
		
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.ПоступлениеБезналичныхДенежныхСредств") И Данные.Исправление Тогда
		
		НоваяСтрока			= ДанныеДляПроверки.Добавить();
		НоваяСтрока.Дата	= Данные.Дата;
		НоваяСтрока.Раздел	= "Банк";
		НоваяСтрока.Объект	= Данные.БанковскийСчет;
		
	ИначеЕсли (ТипЗнч(Данные) = Тип("ДокументОбъект.РеализацияТоваровУслуг")
				Или ТипЗнч(Данные) = Тип("ДокументОбъект.РеализацияУслугПрочихАктивов"))
		И Данные.ДополнительныеСвойства.Свойство("ИзменилосьТолькоСостояниеПереходаПраваСобственности")
		И Данные.ДополнительныеСвойства.ИзменилосьТолькоСостояниеПереходаПраваСобственности Тогда
		
		НоваяСтрока			= ДанныеДляПроверки.Добавить();
		НоваяСтрока.Дата	= Данные.ДатаПереходаПраваСобственности;
		НоваяСтрока.Раздел	= "Продажи";
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
