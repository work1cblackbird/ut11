
#Область ПрограммныйИнтерфейс

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив Из Строка - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	//++ Локализация
	

	//-- Локализация
	
КонецПроцедуры

// Функция находит заявления о ввозе товаров заданного документа-основания.
//
// Параметры:
//	ДокументОснование - ДокументСсылка - Документ, для которого необходимо найти заявление о ввозе товаров.
//	Организация - СправочникСсылка.Организации - Организация, для которой формируется заявление о ввозе товаров.
//	Проведен - Булево - Признак того, что необходимо получить проведенные документы.
//
// Возвращаемое значение:
//	ТаблицаЗначений - Таблица найденных заявлений о ввозе товаров, содержит колонки:
//		* Ссылка - ДокументСсылка.ЗаявлениеОВвозеТоваров - ссылка на документ заявление о ввозе товаров.
//		* Проведен - Булево - признак проведенности документа. 
//		* Номер - Строка - номер документа заявления о ввозе товаров.
//		* Дата - Дата - дата документа заявления о ввозе товаров.
//		* Организация - СправочникСсылка.Организации - организация заявления о ввозе товаров.
//		* Контрагент - СправочникСсылка.Контрагенты - контрагент заявления о ввозе товаров.
//		* ДатаПодтвержденияОплаты - Дата - дата, когда была подтверждена оплата налога по данному заявлению.
//		* ДокументОснование - ДокументСсылка.ЗаключениеДоговораАренды, ДокументСсылка.ОтчетПереработчика2_5, ДокументСсылка.ПриобретениеТоваровУслуг, ДокументСсылка.ПриобретениеУслугПрочихАктивов - документ поступления товаров.
//
Функция ЗаявленияОВвозеТоваровПоОснованию(ДокументОснование, Организация = Неопределено, Проведен = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Операция.Ссылка                                  КАК Ссылка,
	|	Операция.Проведен                                КАК Проведен,
	|	Операция.Номер                                   КАК Номер,
	|	Операция.Дата                                    КАК Дата,
	|	Операция.Организация                             КАК Организация,
	|	Операция.Контрагент                              КАК Контрагент,
	//++ Локализация
	|	ЕСТЬNULL(ПолученоПодтверждение.ДатаПодтвержденияОплаты, ДАТАВРЕМЯ(1,1,1)) КАК ДатаПодтвержденияОплаты,
	//-- Локализация
	|	ЗаявлениеОВвозеТоваровТовары.ДокументПоступления КАК ДокументОснование
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК ЗаявлениеОВвозеТоваровТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		Документ.ЗаявлениеОВвозеТоваров КАК Операция
	|	ПО
	|		ЗаявлениеОВвозеТоваровТовары.Ссылка = Операция.Ссылка
	|		И Операция.ПометкаУдаления = ЛОЖЬ
	|		И (Операция.Организация = &Организация
	|			ИЛИ &Организация = НЕОПРЕДЕЛЕНО)
	//++ Локализация
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.ПодтверждениеОплатыНДСВБюджет КАК ПолученоПодтверждение
	|	ПО 
	|		Операция.Ссылка = ПолученоПодтверждение.СчетФактура
	|		И ПолученоПодтверждение.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОплатыНДСВБюджет.ПолученоПодтверждение)
	//-- Локализация
	|ГДЕ
	|	ЗаявлениеОВвозеТоваровТовары.ДокументПоступления = &ДокументОснование
	|";
	
	Если Проведен Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПометкаУдаления = ЛОЖЬ", "Проведен");
	КонецЕсли;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда 
		Запрос.УстановитьПараметр("ДокументОснование", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "ДокументПоступления"));
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.КорректировкаПриобретения") Тогда
		Запрос.УстановитьПараметр("ДокументОснование", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "ДокументОснование"));
	Иначе
		Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	КонецЕсли;
	Запрос.УстановитьПараметр("Организация",       Организация);
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаЗаявлений = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаЗаявлений;
	
КонецФункции

#Область ОбработчикиСобытий

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый документ.
//  Отказ - Булево - Признак проведения документа.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то проведение документа выполнено не будет.
//  РежимПроведения - РежимПроведенияДокумента - В данный параметр передается текущий режим проведения.
//
Процедура ОбработкаПроведения(Объект, Отказ, РежимПроведения) Экспорт
	
	//++ Локализация
	ЗарегистрироватьСчетаФактурыОжидаетОплатыНДС(Объект, Истина);
	//-- Локализация
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то будет выполнен отказ от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Объект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект.
//  ДанныеЗаполнения - Произвольный - Значение, которое используется как основание для заполнения.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаЗаполнения(Объект, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	//++ Локализация
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ТипДанныхЗаполнения = Тип("ДокументСсылка.ИсходящаяТранспортнаяОперацияВЕТИС") Тогда
		ИнтеграцияВЕТИСУТ.ЗаполнитьВозвратТоваровПоставщикуНаОснованииИсходящейТранспортнойОперацииВЕТИС(
			Объект,
			ДанныеЗаполнения);
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то запись выполнена не будет и будет вызвано исключение.
//
Процедура ОбработкаУдаленияПроведения(Объект, Отказ) Экспорт
	
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то запись выполнена не будет и будет вызвано исключение.
//  РежимЗаписи - РежимЗаписиДокумента - В параметр передается текущий режим записи документа. Позволяет определить в теле процедуры режим записи.
//  РежимПроведения - РежимПроведенияДокумента - В данный параметр передается текущий режим проведения.
//
Процедура ПередЗаписью(Объект, Отказ, РежимЗаписи, РежимПроведения) Экспорт

	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина, то запись выполнена не будет и будет вызвано исключение.
//
Процедура ПриЗаписи(Объект, Отказ) Экспорт
	
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  ОбъектКопирования - ДокументОбъект - Исходный документ, который является источником копирования.
//
Процедура ПриКопировании(Объект, ОбъектКопирования) Экспорт
	
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	
КонецПроцедуры

// Добавляет команду создания документа.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Процедура ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт


КонецПроцедуры

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	
КонецПроцедуры

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	//++ Локализация

	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "ЗаявлениеОВвозеТоваров";
	КомандаПечати.Представление  = НСтр("ru = 'Заявление о ввозе товаров'");
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Заявление о ввозе товаров и уплате косвенных налогов'");
	КомандаПечати.Обработчик     = "УчетНДСРФКлиент.ПечатьЗаявлениеОВвозеТоваров";
	КомандаПечати.СписокФорм     = "ФормаДокумента,ФормаСписка,СписокДокументов";
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "СтатистическаяФормаУчетаПеремещенияТоваров";
	КомандаПечати.Представление  = НСтр("ru = 'Статистическая форма учета перемещения товаров'");
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Статистическая форма учета перемещения товаров'");
	КомандаПечати.Обработчик     = "УчетНДСРФКлиент.ПечатьСтатистическаяФормаУчетаПеремещенияТоваров";
	КомандаПечати.СписокФорм     = "ФормаСписка";
	
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив Из ДокументСсылка.ЗаявлениеОВвозеТоваров   - ссылки на объекты, которые нужно распечатать.
//  ПараметрыПечати - Структура - дополнительные настройки печати.
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений Из ДокументСсылка.ЗаявлениеОВвозеТоваров - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр).
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	//++ Локализация
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаявлениеОВвозеТоваров") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"ЗаявлениеОВвозеТоваров", 
			НСтр("ru = 'Заявление о ввозе товаров и уплате косвенных налогов'"),
			ПечатьЗаявленияОВвозеТоваров(МассивОбъектов, ОбъектыПечати));
			
	КонецЕсли;
		
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СтатистическаяФормаУчетаПеремещенияТоваров") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"СтатистическаяФормаУчетаПеремещенияТоваров", 
			НСтр("ru = 'Статистическая форма учета перемещения товаров'"),
			ПечатьСтатистическойФормыУчетаПеремещенияТоваров(МассивОбъектов, ОбъектыПечати));
			
	КонецЕсли;
	
	ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
	
	//-- Локализация
	
КонецПроцедуры

//++ Локализация

// Формирует печатную форму "Заявление о ввозе товаров и уплате косвенных налогов".
//
// Параметры:
//  МассивОбъектов  - Массив Из ДокументСсылка.ЗаявлениеОВвозеТоваров   - ссылки на объекты, которые нужно распечатать;
//  ОбъектыПечати   - СписокЗначений Из ДокументСсылка.ЗаявлениеОВвозеТоваров - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
// Возвращаемое значение:
// ТабличныйДокумент - сформированный табличный документ
//
Функция ПечатьЗаявленияОВвозеТоваров(МассивОбъектов, ОбъектыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результаты = ПодготовитьТаблицыЗаявленияОВвозеТоваровДляВыгрузкиПечати(МассивОбъектов);
	
	Возврат Результаты.ТабДокумент;

КонецФункции

// Формирует печатную форму "Статистическая форма учета перемещения товаров".
//
// Параметры:
//  МассивОбъектов  - Массив Из ДокументСсылка.ЗаявлениеОВвозеТоваров   - ссылки на объекты, которые нужно распечатать;
//  ОбъектыПечати   - СписокЗначений Из ДокументСсылка.ЗаявлениеОВвозеТоваров - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
// Возвращаемое значение:
// ТабличныйДокумент - сформированный табличный документ
//
Функция ПечатьСтатистическойФормыУчетаПеремещенияТоваров(МассивОбъектов, ОбъектыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результаты = ПодготовитьТаблицыСтатистическойФормыУчетаПеремещенияТоваровДляВыгрузкиПечати(МассивОбъектов);
	
	Возврат Результаты.ТабДокумент;

КонецФункции

// Формирует структуру таблиц для выгрузки "Заявление о ввозе товаров и уплате косвенных налогов".
//
// Параметры:
//  МассивДокументов  - Массив Из ДокументСсылка.ЗаявлениеОВвозеТоваров   - ссылки на выгружаемые объекты;
//
// Возвращаемое значение:
// Структура - структура с данными выгрузки, содержит:
// 		* РеквизитыШапка - Структура - данные шапки документа "Заявление о ввозе товаров и уплате косвенных налогов";
//		* ТаблицаДокументы - Структура - данные документов;
//		* ТаблицаТоварыДляВыгрузки - Структура - товары для выгрузки;
//		* ТабДокумент - ТабличныйДокумент - сформированный табличный документ
//
Функция ПодготовитьТаблицыСтатистическойФормыУчетаПеремещенияТоваровДляВыгрузкиПечати(МассивДокументов) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.УстановитьПараметр("ИспользоватьНоменклатуруПартнеров", ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруПартнеров"));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявлениеОВвозеТоваров.Ссылка КАК ДокументСсылка,
	|	ЗаявлениеОВвозеТоваров.Номер КАК СистемныйНомер,
	|	ЗаявлениеОВвозеТоваров.Дата КАК Дата,
	|	НЕОПРЕДЕЛЕНО КАК ДатаЗаполненияД1,
	|	НЕОПРЕДЕЛЕНО КАК ДатаЗаполненияД2,
	|	НЕОПРЕДЕЛЕНО КАК ДатаЗаполненияМ1,
	|	НЕОПРЕДЕЛЕНО КАК ДатаЗаполненияМ2,
	|	НЕОПРЕДЕЛЕНО КАК ДатаЗаполненияГ1,
	|	НЕОПРЕДЕЛЕНО КАК ДатаЗаполненияГ2,
	|	НЕОПРЕДЕЛЕНО КАК ДатаЗаполненияГ3,
	|	НЕОПРЕДЕЛЕНО КАК ДатаЗаполненияГ4,
	|	НЕОПРЕДЕЛЕНО КАК ОтчетныйМесяцМ1,
	|	НЕОПРЕДЕЛЕНО КАК ОтчетныйМесяцМ2,
	|	НЕОПРЕДЕЛЕНО КАК ОтчетныйМесяцГ1,
	|	НЕОПРЕДЕЛЕНО КАК ОтчетныйМесяцГ2,
	|	НЕОПРЕДЕЛЕНО КАК ОтчетныйМесяцГ3,
	|	НЕОПРЕДЕЛЕНО КАК ОтчетныйМесяцГ4,
	|	ЗаявлениеОВвозеТоваров.Контрагент.ИНН КАК ОтправительКоды,
	|	НЕОПРЕДЕЛЕНО КАК ОтправительРеквизиты,
	|	НЕОПРЕДЕЛЕНО КАК ОтправительНаименование,
	|	ЗаявлениеОВвозеТоваров.Контрагент,
	|	ЗаявлениеОВвозеТоваров.НомерДоговора КАК НомерДоговора,
	|	ЗаявлениеОВвозеТоваров.ДатаДоговора КАК ДатаДоговора,
	|	ЗаявлениеОВвозеТоваров.Организация.ИНН КАК ПокупательИНН,
	|	ЗаявлениеОВвозеТоваров.Организация.КПП КАК ПокупательКПП,
	|	НЕОПРЕДЕЛЕНО КАК ПолучательКоды,
	|	НЕОПРЕДЕЛЕНО КАК ПолучательРеквизиты,
	|	НЕОПРЕДЕЛЕНО КАК ОргПочтовыйАдрес,
	|	НЕОПРЕДЕЛЕНО КАК ОргТелефонИсп,
	|	ЗаявлениеОВвозеТоваров.Валюта КАК ВалютаДокумента,
	|	ЗаявлениеОВвозеТоваров.Валюта.Код КАК ВалютаТовараКод,
	|	ЗаявлениеОВвозеТоваров.Организация,
	|	ЗаявлениеОВвозеТоваров.Организация.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	ЗаявлениеОВвозеТоваров.Организация.ЮридическоеФизическоеЛицо КАК ЮридическоеФизическоеЛицо,
	|	НЕОПРЕДЕЛЕНО КАК ОргИсполнитель,
	|	НЕОПРЕДЕЛЕНО КАК ОргДолжностьИсп,
	|	НЕОПРЕДЕЛЕНО КАК ОргАдресЭлПочты,
	|	ЗаявлениеОВвозеТоваров.Контрагент.СтранаРегистрации.КодАльфа2 КАК ТоргующаяСтранаКод,
	|	ЗаявлениеОВвозеТоваров.Контрагент.СтранаРегистрации.Наименование КАК ТоргующаяСтранаНаименование,
	|	ЗаявлениеОВвозеТоваров.Контрагент.СтранаРегистрации.КодАльфа2 КАК СтранаОтправленияКод,
	|	ЗаявлениеОВвозеТоваров.Контрагент.СтранаРегистрации.Наименование КАК СтранаОтправленияНаименование,
	|	НЕОПРЕДЕЛЕНО КАК ВидТранспортаКод,
	|	НЕОПРЕДЕЛЕНО КАК ВидТранспортаНаименование,
	|	НЕОПРЕДЕЛЕНО КАК ОтвЛицоФинУрКоды,
	|	НЕОПРЕДЕЛЕНО КАК ОтвЛицоФинУрРеквизиты,
	|	""ИМ"" КАК НаправлениеПеремещения,
	|	""ИМ"" КАК НапрПеремещения,
	|	""РОССИЯ"" КАК СтранаНазначенияНаименование,
	|	""RU"" КАК СтранаНазначенияКод,
	|	НЕОПРЕДЕЛЕНО КАК ОргПочтовыйАдресСоответствие,
	|	ВЫБОР
	|		КОГДА ЗаявлениеОВвозеТоваров.Валюта= ЗаявлениеОВвозеТоваров.Организация.ВалютаРегламентированногоУчета
	|			ТОГДА ""RUB""
	|		ИНАЧЕ ЗаявлениеОВвозеТоваров.Валюта.Наименование
	|	КОНЕЦ КАК КодВалютыЦеныТовара,
	|	"""" КАК ИмяКлючевогоУзлаСодержательнойЧасти,
	|	"""" КАК ИмяФайла,
	|	ВЫБОР
	|		КОГДА ЗаявлениеОВвозеТоваров.Контрагент.СтранаРегистрации.КодАльфа2 = ""KZ""
	|			ТОГДА ""РК""
	|		КОГДА ЗаявлениеОВвозеТоваров.Контрагент.СтранаРегистрации.КодАльфа2 = ""BY""
	|			ТОГДА ""РБ""
	|		КОГДА ЗаявлениеОВвозеТоваров.Контрагент.СтранаРегистрации.КодАльфа2 = ""AM""
	|			ТОГДА ""АМ""
	|		КОГДА ЗаявлениеОВвозеТоваров.Контрагент.СтранаРегистрации.КодАльфа2 = ""KG""
	|			ТОГДА ""КГ""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК СтранаОтправления,
	|	""РФ"" КАК СтранаНазначения,
	|	ЗаявлениеОВвозеТоваров.Контрагент.ЮридическоеФизическоеЛицо КАК ОтправительЮридическоеФизическоеЛицо,
	|	ЗаявлениеОВвозеТоваров.Организация.ИндивидуальныйПредприниматель КАК ИндивидуальныйПредприниматель,
	|	ЗаявлениеОВвозеТоваров.Организация.ОГРН КАК ОГРН,
	|	"""" КАК Отправитель_ФормаСобственности,
	|	ЗаявлениеОВвозеТоваров.Организация.НаименованиеОКОПФ КАК Получатель_ФормаСобственности
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров КАК ЗаявлениеОВвозеТоваров
	|ГДЕ
	|	ЗаявлениеОВвозеТоваров.Ссылка В(&МассивДокументов)";
	
	Шапка = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявлениеОВвозеТоваровТовары.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ЗаявлениеОВвозеТоваровТовары.Содержание <> """"
	|			ТОГДА ЗаявлениеОВвозеТоваровТовары.Содержание
	|		КОГДА &ИспользоватьНоменклатуруПартнеров И
	|				ЗаявлениеОВвозеТоваровТовары.НоменклатураПартнера <> ЗНАЧЕНИЕ(Справочник.НоменклатураКонтрагентов.ПустаяСсылка) ТОГДА
	|			ЗаявлениеОВвозеТоваровТовары.НоменклатураПартнера.Наименование
	|		ИНАЧЕ
	|			ВЫБОР
	|				КОГДА ЗаявлениеОВвозеТоваровТовары.Номенклатура.НаименованиеПолное = """"
	|					ТОГДА ЗаявлениеОВвозеТоваровТовары.Номенклатура.Наименование
	|				ИНАЧЕ ЗаявлениеОВвозеТоваровТовары.Номенклатура.НаименованиеПолное
	|			КОНЕЦ 
	|	КОНЕЦ КАК НаименованиеТовара,
	|	ЕСТЬNULL(ЗаявлениеОВвозеТоваровТовары.КодТНВЭД.Код, """") КАК КодТовара,
	|	ЗаявлениеОВвозеТоваровТовары.ФактурнаяСтоимость КАК ЦенаТовараВыбВал,
	|	ЗаявлениеОВвозеТоваровТовары.СерияНомерТСД КАК СерияНомерТСД,
	|	ЗаявлениеОВвозеТоваровТовары.ДатаТСД КАК ДатаТСД,
	|	ЕСТЬNULL(СчетФактураПолученный.Ссылка.Номер,СчетФактураПолученныйНА.Ссылка.Номер) КАК НомерСчетаФактуры,
	|	ЕСТЬNULL(СчетФактураПолученный.Ссылка.Дата,СчетФактураПолученныйНА.Ссылка.Дата) КАК ДатаСчетаФактуры,
	|	ЗаявлениеОВвозеТоваровТовары.НалоговаяБазаНДС КАК ЦенаТовараВалРубль,
	|	ВЫБОР
	|		КОГДА ЗаявлениеОВвозеТоваровТовары.Валюта = ЗаявлениеОВвозеТоваровТовары.Ссылка.Организация.ВалютаРегламентированногоУчета
	|			ТОГДА ""RUB""
	|		ИНАЧЕ ЗаявлениеОВвозеТоваровТовары.Валюта.Наименование
	|	КОНЕЦ КАК ВалютаТовараКод,
	|	ЗаявлениеОВвозеТоваровТовары.СтатСтоимостьДолларыСША КАК ЦенаТовараВалДоллар,
	|	ЕСТЬNULL(ЗаявлениеОВвозеТоваровТовары.НомерТД.СтранаПроисхождения.Наименование, """") КАК СтранаТовараНаименование,
	|	ЕСТЬNULL(ЗаявлениеОВвозеТоваровТовары.НомерТД.СтранаПроисхождения.КодАльфа2, """")    КАК СтранаТовараКод,
	|	ЗаявлениеОВвозеТоваровТовары.ВесНеттоКг КАК ВесТовара,
	|	ЗаявлениеОВвозеТоваровТовары.КодВидаТранспорта КАК КодВидаТранспорта,
	|	ЗаявлениеОВвозеТоваровТовары.Ссылка КАК ДокументСсылка,
	|	ЕСТЬNULL(ЗаявлениеОВвозеТоваровТовары.ДокументПоступления.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ОтчетныйПериод,
	|	ВЫБОР
	|		КОГДА ЗаявлениеОВвозеТоваровТовары.КодТНВЭД.ЕдиницаИзмерения.Код = ""166""
	|			ТОГДА 0
	|		ИНАЧЕ ЗаявлениеОВвозеТоваровТовары.КоличествоПоТНВЭД
	|	КОНЕЦ КАК ЕдИзмТовараКво,
	|	ВЫБОР
	|		КОГДА ЗаявлениеОВвозеТоваровТовары.КодТНВЭД.ЕдиницаИзмерения.Код = ""166""
	|			ТОГДА """"
	|		ИНАЧЕ ЗаявлениеОВвозеТоваровТовары.КодТНВЭД.ЕдиницаИзмерения.Наименование
	|	КОНЕЦ КАК ЕдИзмТовараКратко,
	|	ВЫБОР
	|		КОГДА ЗаявлениеОВвозеТоваровТовары.КодТНВЭД.ЕдиницаИзмерения.Код = ""166""
	|			ТОГДА """"
	|		ИНАЧЕ ЗаявлениеОВвозеТоваровТовары.КодТНВЭД.ЕдиницаИзмерения.Код
	|	КОНЕЦ КАК ЕдИзмТовараКод,
	|	ЕСТЬNULL(ЗаявлениеОВвозеТоваровТовары.НомерТД.Код, """") КАК НомерТаможеннойДекларации,
	|	ЗаявлениеОВвозеТоваровТовары.Номенклатура.ПроизводительИмпортерКонтрагент КАК Производитель,
	|	ЗаявлениеОВвозеТоваровТовары.Номенклатура КАК Номенклатура
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК ЗаявлениеОВвозеТоваровТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученный
	|		ПО ЗаявлениеОВвозеТоваровТовары.ДокументПоступления = СчетФактураПолученный.ДокументОснование
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученныйНалоговыйАгент.ДокументыОснования КАК СчетФактураПолученныйНА
	|		ПО ЗаявлениеОВвозеТоваровТовары.ДокументПоступления = СчетФактураПолученныйНА.ДокументОснование
	|ГДЕ
	|	ЗаявлениеОВвозеТоваровТовары.Ссылка В(&МассивДокументов)
	|	И НЕ ЗаявлениеОВвозеТоваровТовары.Ссылка.ПечатьИВыгрузкаСводноПоНоменклатуре
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МИНИМУМ(ЗаявлениеОВвозеТоваровТовары.НомерСтроки) КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ЗаявлениеОВвозеТоваровТовары.Содержание <> """"
	|			ТОГДА ЗаявлениеОВвозеТоваровТовары.Содержание
	|		КОГДА &ИспользоватьНоменклатуруПартнеров И
	|				ЗаявлениеОВвозеТоваровТовары.НоменклатураПартнера <> ЗНАЧЕНИЕ(Справочник.НоменклатураКонтрагентов.ПустаяСсылка) ТОГДА
	|			ЗаявлениеОВвозеТоваровТовары.НоменклатураПартнера.Наименование
	|		ИНАЧЕ
	|			ВЫБОР
	|				КОГДА ЗаявлениеОВвозеТоваровТовары.Номенклатура.НаименованиеПолное = """"
	|					ТОГДА ЗаявлениеОВвозеТоваровТовары.Номенклатура.Наименование
	|				ИНАЧЕ ЗаявлениеОВвозеТоваровТовары.Номенклатура.НаименованиеПолное
	|			КОНЕЦ 
	|	КОНЕЦ КАК НаименованиеТовара,
	|	ЕСТЬNULL(ЗаявлениеОВвозеТоваровТовары.КодТНВЭД.Код, """") КАК КодТовара,
	|	СУММА(ЗаявлениеОВвозеТоваровТовары.ФактурнаяСтоимость) КАК ЦенаТовараВыбВал,
	|	ЗаявлениеОВвозеТоваровТовары.СерияНомерТСД КАК СерияНомерТСД,
	|	ЗаявлениеОВвозеТоваровТовары.ДатаТСД КАК ДатаТСД,
	|	ЕСТЬNULL(СчетФактураПолученный.Ссылка.Номер,СчетФактураПолученныйНА.Ссылка.Номер) КАК НомерСчетаФактуры,
	|	ЕСТЬNULL(СчетФактураПолученный.Ссылка.Дата,СчетФактураПолученныйНА.Ссылка.Дата) КАК ДатаСчетаФактуры,
	|	СУММА(ЗаявлениеОВвозеТоваровТовары.НалоговаяБазаНДС) КАК ЦенаТовараВалРубль,
	|	ВЫБОР
	|		КОГДА ЗаявлениеОВвозеТоваровТовары.Валюта = ЗаявлениеОВвозеТоваровТовары.Ссылка.Организация.ВалютаРегламентированногоУчета
	|			ТОГДА ""RUB""
	|		ИНАЧЕ ЗаявлениеОВвозеТоваровТовары.Валюта.Наименование
	|	КОНЕЦ КАК ВалютаТовараКод,
	|	СУММА(ЗаявлениеОВвозеТоваровТовары.СтатСтоимостьДолларыСША) КАК ЦенаТовараВалДоллар,
	|	ЕСТЬNULL(ЗаявлениеОВвозеТоваровТовары.НомерТД.СтранаПроисхождения.Наименование, """") КАК СтранаТовараНаименование,
	|	ЕСТЬNULL(ЗаявлениеОВвозеТоваровТовары.НомерТД.СтранаПроисхождения.КодАльфа2, """")    КАК СтранаТовараКод,
	|	СУММА(ЗаявлениеОВвозеТоваровТовары.ВесНеттоКг) КАК ВесТовара,
	|	ЗаявлениеОВвозеТоваровТовары.КодВидаТранспорта КАК КодВидаТранспорта,
	|	ЗаявлениеОВвозеТоваровТовары.Ссылка КАК ДокументСсылка,
	|	ЕСТЬNULL(ЗаявлениеОВвозеТоваровТовары.ДокументПоступления.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ОтчетныйПериод,
	|	ВЫБОР
	|		КОГДА ЗаявлениеОВвозеТоваровТовары.КодТНВЭД.ЕдиницаИзмерения.Код = ""166""
	|			ТОГДА 0
	|		ИНАЧЕ ЗаявлениеОВвозеТоваровТовары.КоличествоПоТНВЭД
	|	КОНЕЦ КАК ЕдИзмТовараКво,
	|	ВЫБОР
	|		КОГДА ЗаявлениеОВвозеТоваровТовары.КодТНВЭД.ЕдиницаИзмерения.Код = ""166""
	|			ТОГДА """"
	|		ИНАЧЕ ЗаявлениеОВвозеТоваровТовары.КодТНВЭД.ЕдиницаИзмерения.Наименование
	|	КОНЕЦ КАК ЕдИзмТовараКратко,
	|	ВЫБОР
	|		КОГДА ЗаявлениеОВвозеТоваровТовары.КодТНВЭД.ЕдиницаИзмерения.Код = ""166""
	|			ТОГДА """"
	|		ИНАЧЕ ЗаявлениеОВвозеТоваровТовары.КодТНВЭД.ЕдиницаИзмерения.Код
	|	КОНЕЦ КАК ЕдИзмТовараКод,
	|	ЕСТЬNULL(ЗаявлениеОВвозеТоваровТовары.НомерТД.Код, """") КАК НомерТаможеннойДекларации,
	|	ЗаявлениеОВвозеТоваровТовары.Номенклатура.ПроизводительИмпортерКонтрагент КАК Производитель,
	|	ЗаявлениеОВвозеТоваровТовары.Номенклатура КАК Номенклатура
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК ЗаявлениеОВвозеТоваровТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученный
	|		ПО ЗаявлениеОВвозеТоваровТовары.ДокументПоступления = СчетФактураПолученный.ДокументОснование
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученныйНалоговыйАгент.ДокументыОснования КАК СчетФактураПолученныйНА
	|		ПО ЗаявлениеОВвозеТоваровТовары.ДокументПоступления = СчетФактураПолученныйНА.ДокументОснование
	|ГДЕ
	|	ЗаявлениеОВвозеТоваровТовары.Ссылка В(&МассивДокументов)
	|	И ЗаявлениеОВвозеТоваровТовары.Ссылка.ПечатьИВыгрузкаСводноПоНоменклатуре
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ЗаявлениеОВвозеТоваровТовары.Содержание <> """"
	|			ТОГДА ЗаявлениеОВвозеТоваровТовары.Содержание
	|		КОГДА &ИспользоватьНоменклатуруПартнеров И
	|				ЗаявлениеОВвозеТоваровТовары.НоменклатураПартнера <> ЗНАЧЕНИЕ(Справочник.НоменклатураКонтрагентов.ПустаяСсылка) ТОГДА
	|			ЗаявлениеОВвозеТоваровТовары.НоменклатураПартнера.Наименование
	|		ИНАЧЕ
	|			ВЫБОР
	|				КОГДА ЗаявлениеОВвозеТоваровТовары.Номенклатура.НаименованиеПолное = """"
	|					ТОГДА ЗаявлениеОВвозеТоваровТовары.Номенклатура.Наименование
	|				ИНАЧЕ ЗаявлениеОВвозеТоваровТовары.Номенклатура.НаименованиеПолное
	|			КОНЕЦ 
	|	КОНЕЦ,
	|	ЕСТЬNULL(ЗаявлениеОВвозеТоваровТовары.КодТНВЭД.Код, """"),
	|	ЗаявлениеОВвозеТоваровТовары.СерияНомерТСД,
	|	ЗаявлениеОВвозеТоваровТовары.ДатаТСД,
	|	ЕСТЬNULL(СчетФактураПолученный.Ссылка.Номер,СчетФактураПолученныйНА.Ссылка.Номер),
	|	ЕСТЬNULL(СчетФактураПолученный.Ссылка.Дата,СчетФактураПолученныйНА.Ссылка.Дата),
	|	ВЫБОР
	|		КОГДА ЗаявлениеОВвозеТоваровТовары.Валюта = ЗаявлениеОВвозеТоваровТовары.Ссылка.Организация.ВалютаРегламентированногоУчета
	|			ТОГДА ""RUB""
	|		ИНАЧЕ ЗаявлениеОВвозеТоваровТовары.Валюта.Наименование
	|	КОНЕЦ,
	|	ЕСТЬNULL(ЗаявлениеОВвозеТоваровТовары.НомерТД.СтранаПроисхождения.Наименование, """"),
	|	ЕСТЬNULL(ЗаявлениеОВвозеТоваровТовары.НомерТД.СтранаПроисхождения.КодАльфа2, """"),
	|	ЗаявлениеОВвозеТоваровТовары.КодВидаТранспорта,
	|	ЗаявлениеОВвозеТоваровТовары.Ссылка,
	|	ЕСТЬNULL(ЗаявлениеОВвозеТоваровТовары.ДокументПоступления.Дата, ДАТАВРЕМЯ(1, 1, 1)),
	|	ВЫБОР
	|		КОГДА ЗаявлениеОВвозеТоваровТовары.КодТНВЭД.ЕдиницаИзмерения.Код = ""166""
	|			ТОГДА 0
	|		ИНАЧЕ ЗаявлениеОВвозеТоваровТовары.КоличествоПоТНВЭД
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЗаявлениеОВвозеТоваровТовары.КодТНВЭД.ЕдиницаИзмерения.Код = ""166""
	|			ТОГДА """"
	|		ИНАЧЕ ЗаявлениеОВвозеТоваровТовары.КодТНВЭД.ЕдиницаИзмерения.Наименование
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЗаявлениеОВвозеТоваровТовары.КодТНВЭД.ЕдиницаИзмерения.Код = ""166""
	|			ТОГДА """"
	|		ИНАЧЕ ЗаявлениеОВвозеТоваровТовары.КодТНВЭД.ЕдиницаИзмерения.Код
	|	КОНЕЦ,
	|	ЕСТЬNULL(ЗаявлениеОВвозеТоваровТовары.НомерТД.Код, """"),
	|	ЗаявлениеОВвозеТоваровТовары.Номенклатура.ПроизводительИмпортерКонтрагент,
	|	ЗаявлениеОВвозеТоваровТовары.Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТаблицаТовары = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявлениеОВвозе.Ссылка КАК ДокументСсылка,
	|	ЗаявлениеОВвозе.Номенклатура КАК Номенклатура,
	|	ШтрихкодыУпаковок.ШтрихкодУпаковки.ЗначениеШтрихкода КАК ШтрихкодУпаковки
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК ЗаявлениеОВвозе
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг.ШтрихкодыУпаковок КАК ШтрихкодыУпаковок
	|		ПО ЗаявлениеОВвозе.ДокументПоступления = ШтрихкодыУпаковок.Ссылка
	|			И ЗаявлениеОВвозе.Номенклатура = ШтрихкодыУпаковок.ШтрихкодУпаковки.Номенклатура
	|ГДЕ
	|	ЗаявлениеОВвозе.Ссылка В(&МассивДокументов)
	|	И НЕ ШтрихкодыУпаковок.ШтрихкодУпаковки ЕСТЬ NULL";
	
	ШтрихкодыУпаковок = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявлениеОВвозеТоваровСведенияОДокументах.Ссылка КАК ДокументСсылка,
	|	ЗаявлениеОВвозеТоваровСведенияОДокументах.Наименование КАК Наименование,
	|	ЗаявлениеОВвозеТоваровСведенияОДокументах.Номер КАК Номер,
	|	ЗаявлениеОВвозеТоваровСведенияОДокументах.Дата КАК Дата
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.СведенияОДокументах КАК ЗаявлениеОВвозеТоваровСведенияОДокументах
	|ГДЕ
	|	ЗаявлениеОВвозеТоваровСведенияОДокументах.Ссылка В(&МассивДокументов)";
	
	СведенияОДокументах = Запрос.Выполнить().Выгрузить();
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ПолеСверху	= 10;
	ТабДокумент.ПолеСнизу	= 10;
	ТабДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	
	СисИнфо = Новый СистемнаяИнформация;
	Если ПустаяСтрока(СисИнфо.ИнформацияПрограммыПросмотра) Тогда 
		ТабДокумент.ПолеСлева  = 0;
		ТабДокумент.ПолеСправа = 0;
	Иначе
		ТабДокумент.ПолеСлева  = 10;
		ТабДокумент.ПолеСправа = 10;
	КонецЕсли;
	
	ТабДокумент.ИмяПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_СтатистическаяФормаУчетаПеремещенияТоваров";
	
	ПервыйДокумент = Истина;
	
	СписокВидовТранспорта = Новый СписокЗначений;
	ЗаполнитьСписокВыбораВидовТранспорта(СписокВидовТранспорта);
	
	Для каждого СтрокаШапки Из Шапка Цикл
		
		Правила891 = Ложь;
		
		Если СтрокаШапки.Дата < '20160101' Тогда
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаявлениеОВвозеТоваров.СтатФормаУчетаПеремещенияТоваров2011Кв1");
		ИначеЕсли СтрокаШапки.Дата < '20200701' Тогда 
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаявлениеОВвозеТоваров.СтатФормаУчетаПеремещенияТоваров2016Кв1");
		Иначе 
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаявлениеОВвозеТоваров.СтатФормаУчетаПеремещенияТоваров2020Кв1");
			Правила891 = Истина;
		КонецЕсли;
		
		ОсновнаяЧасть1      = Макет.ПолучитьОбласть("ОсновнаяЧасть1");
		МногострочнаяЧасть1 = Макет.ПолучитьОбласть("МногострочнаяЧасть1");
		МногострочнаяЧасть2 = Макет.ПолучитьОбласть("МногострочнаяЧасть2");
		ОсновнаяЧасть2      = Макет.ПолучитьОбласть("ОсновнаяЧасть2");
		ОсновнаяЧасть3      = Макет.ПолучитьОбласть("ОсновнаяЧасть3");
		
		РеквизитыШапка = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаШапки); // Структура для выгрузки
		РеквизитыШапка.СистемныйНомер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыШапка.СистемныйНомер, Истина, Ложь);
		
		Если ЗначениеЗаполнено(РеквизитыШапка.Организация) И ЗначениеЗаполнено(РеквизитыШапка.Контрагент) Тогда
			
			СведенияОПродавце = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(РеквизитыШапка.Контрагент, РеквизитыШапка.Дата);
			СведенияОПокупателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(РеквизитыШапка.Организация, РеквизитыШапка.Дата);
			
			РеквизитыШапка.ПолучательРеквизиты = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,СтранаРегистрации,ЮридическийАдрес,");
			РеквизитыШапка.ПолучательКоды = РеквизитыШапка.ПокупательИНН + ?(РеквизитыШапка.ПокупательКПП = "", "", "/" + РеквизитыШапка.ПокупательКПП);
			
			РеквизитыШапка.ОтвЛицоФинУрРеквизиты = РеквизитыШапка.ПолучательРеквизиты;
			РеквизитыШапка.ОтвЛицоФинУрКоды = РеквизитыШапка.ПолучательКоды;
			
			РеквизитыШапка.ОргПочтовыйАдрес = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(РеквизитыШапка.Организация, Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации, СтрокаШапки.Дата);
			РеквизитыШапка.ОргТелефонИсп = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(РеквизитыШапка.Организация, Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации, СтрокаШапки.Дата);
			РеквизитыШапка.ОргАдресЭлПочты = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(РеквизитыШапка.Организация, Справочники.ВидыКонтактнойИнформации.EmailОрганизации, СтрокаШапки.Дата);
			
			// Отправитель
			
			РеквизитыШапка.ОтправительРеквизиты = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПродавце, "ПолноеНаименование,ЮридическийАдрес,");
			РеквизитыШапка.ОтправительНаименование = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПродавце, "ПолноеНаименование,");
		
			РеквизитыШапка.Вставить("ОтправительРБ_УНП", "");
			РеквизитыШапка.Вставить("ОтправительРК_БИН", "");
			РеквизитыШапка.Вставить("ОтправительРК_ИИН", "");
			РеквизитыШапка.Вставить("ОтправительРА_УНН", "");
			РеквизитыШапка.Вставить("ОтправительРА_Соц", "");
			РеквизитыШапка.Вставить("ОтправительКодКГ", "");
			РеквизитыШапка.Вставить("ОтправительКГ_ИНН", "");
			РеквизитыШапка.Вставить("ОтправительКГ_ОКПО", "");
		
			Если РеквизитыШапка.СтранаОтправления = "РБ" Тогда
				РеквизитыШапка.Вставить("ОтправительРБ_УНП", РеквизитыШапка.ОтправительКоды);
			ИначеЕсли РеквизитыШапка.СтранаОтправления = "РК" Тогда
				Если РеквизитыШапка.ОтправительЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
					РеквизитыШапка.Вставить("ОтправительРК_БИН", РеквизитыШапка.ОтправительКоды);
				Иначе
					РеквизитыШапка.Вставить("ОтправительРК_ИИН", РеквизитыШапка.ОтправительКоды);
				КонецЕсли;
			ИначеЕсли РеквизитыШапка.СтранаОтправления = "АМ" Тогда
				РеквизитыШапка.Вставить("ОтправительРА_УНН", РеквизитыШапка.ОтправительКоды);
			ИначеЕсли РеквизитыШапка.СтранаОтправления = "КГ" Тогда
				Если РеквизитыШапка.ОтправительЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
					РеквизитыШапка.Вставить("ОтправительКГ_ИНН", РеквизитыШапка.ОтправительКоды);
				Иначе
					РеквизитыШапка.Вставить("ОтправительКГ_ОКПО", РеквизитыШапка.ОтправительКоды);
				КонецЕсли;
			КонецЕсли;
			
			ОтправительАдрес = ПолучитьАдресВВидеСоответствия(РеквизитыШапка.Контрагент, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, СтрокаШапки.Дата);
			
			РеквизитыШапка.Вставить("ОтправительСтранаКод", РеквизитыШапка.ТоргующаяСтранаКод);
			РеквизитыШапка.Вставить("ОтправительСтранаНаименование", РеквизитыШапка.ТоргующаяСтранаНаименование);
			РеквизитыШапка.Вставить("ОтправительИндекс", ОтправительАдрес.Получить("Индекс"));
			РеквизитыШапка.Вставить("ОтправительНаселенныйПункт", ОтправительАдрес.Получить("НаселенныйПункт"));
			Если ПустаяСтрока(РеквизитыШапка.ОтправительНаселенныйПункт) Тогда
				РеквизитыШапка.ОтправительНаселенныйПункт = ОтправительАдрес.Получить("Город");
			КонецЕсли;
			
			// Дата выдачи документа, удостоверяющего личность отправителя
			РеквизитыШапка.Вставить("Отправитель_ДатаДокСтр", "");
			РеквизитыШапка.Вставить("Отправитель_ВидДокКод", "");
			РеквизитыШапка.Вставить("Отправитель_ВидДокНаим", "");
			РеквизитыШапка.Вставить("Отправитель_СерДок", "");
			РеквизитыШапка.Вставить("Отправитель_НомДок", "");
			РеквизитыШапка.Вставить("Отправитель_ДатаДок", "");
			РеквизитыШапка.Вставить("Отправитель_ОргДок", "");
			
			РеквизитыШапка.Вставить("Отправитель_Тел", СведенияОПродавце.Телефоны);
			РеквизитыШапка.Вставить("Отправитель_Факс", СведенияОПродавце.Телефоны);
			РеквизитыШапка.Вставить("Отправитель_Телекс", "");
			РеквизитыШапка.Вставить("Отправитель_Почта", СведенияОПродавце.ЭлектроннаяПочта);
			
			// В документе "Заявление о ввозе товаров" получателем всегда является РФ, а отправителем иностранное государство,
			// поэтому данные реквизиты передаются пустыми.
			
			РеквизитыШапка.Вставить("ПолучательРА_УНН", "");
			РеквизитыШапка.Вставить("ПолучательРА_Соц", "");
			РеквизитыШапка.Вставить("ПолучательКГ_ИНН", "");
			РеквизитыШапка.Вставить("ПолучательКГ_ОКПО", "");
			РеквизитыШапка.Вставить("ПолучательКодКГ", ""); 
			РеквизитыШапка.Вставить("ОтправительРФ_ИНН", "");
			РеквизитыШапка.Вставить("ОтправительРФ_КПП", "");
			РеквизитыШапка.Вставить("ОтправительРФ_ОГРН", "");
			РеквизитыШапка.Вставить("ОтправительОбласть", ОтправительАдрес.Получить("Регион"));
			РеквизитыШапка.Вставить("ОтправительУлицаНомерДома", 
				"" + ОтправительАдрес.Получить("Улица") + ", " + ОтправительАдрес.Получить("Дом") + ", " 
				+ ОтправительАдрес.Получить("Корпус") + ", " + ОтправительАдрес.Получить("Квартира"));
				
			// Получатель
			
			ПолучательНаименование = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,");
			ПолучательАдрес = ПолучитьАдресВВидеСоответствия(РеквизитыШапка.Организация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, СтрокаШапки.Дата);
			
			РеквизитыШапка.Вставить("ОтвЛицоФинУрНаименование", ПолучательНаименование);
			
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПасВидДок", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПасДатаДок", '00010101');
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПасДатаДокумента", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПасНаименование", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПасНомерДок", "");
			// Серия документа,удостоверяющего личность физ лица - составителя статистики
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПасСерДок", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПасОрг", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУр", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрКоды", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрРФ_ИНН", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрРФ_КПП", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрРФ_ОГРН", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрРеквизиты", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПодИндекс", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПодНаименование", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПодНаселенныйПункт", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПодОбласть", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПодРФ_ИНН", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПодРФ_КПП", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПодРФ_ОГРН", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПодСтранаКод", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПодСтранаНаименование", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПодУлицаНомерДома", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрИндекс", ПолучательАдрес.Получить("Индекс"));
			РеквизитыШапка.Вставить("ОтвЛицоФинУрСтранаКод", РеквизитыШапка.СтранаНазначенияКод);
			РеквизитыШапка.Вставить("ОтвЛицоФинУрСтранаНаименование", РеквизитыШапка.СтранаНазначенияНаименование);
			РеквизитыШапка.Вставить("ОтвЛицоФинУрОбласть", ПолучательАдрес.Получить("Регион"));
			РеквизитыШапка.Вставить("ОтвЛицоФинУрНаселенныйПункт", ПолучательАдрес.Получить("НаселенныйПункт"));
			РеквизитыШапка.Вставить("ОтвЛицоФинУрУлицаНомерДома", ПолучательАдрес.Получить("Улица") 
				+ ", " 
				+ ПолучательАдрес.Получить("Дом") + ", " 
				+ ПолучательАдрес.Получить("Корпус") + ", " + ПолучательАдрес.Получить("Квартира"));
				
			Если РеквизитыШапка.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
				
				// Получатель физ лицо
				ДанныеДокументаПредставление = "";
				
				Если ЗначениеЗаполнено(РеквизитыШапка.ИндивидуальныйПредприниматель) Тогда
				
					ДанныеДокумента = ПолучитьДокФизЛица(РеквизитыШапка.ИндивидуальныйПредприниматель, РеквизитыШапка.Дата);
					
					Если ЗначениеЗаполнено(ДанныеДокумента) Тогда
						
						РеквизитыШапка.ОтвЛицоФинУрПасВидДок 		= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеДокумента.ВидДокумента, "КодМВД");
						РеквизитыШапка.ОтвЛицоФинУрПасДатаДок 		= ДанныеДокумента.ДатаВыдачи;
						РеквизитыШапка.ОтвЛицоФинУрПасДатаДокумента = ДанныеДокумента.ДатаВыдачи;
						РеквизитыШапка.ОтвЛицоФинУрПасНаименование 	= ДанныеДокумента.Представление;
						РеквизитыШапка.ОтвЛицоФинУрПасНомерДок 		= ДанныеДокумента.Номер;
						РеквизитыШапка.ОтвЛицоФинУрПасСерДок        = ДанныеДокумента.Серия;
						РеквизитыШапка.ОтвЛицоФинУрПасОрг           = ДанныеДокумента.КемВыдан;
						ДанныеДокументаПредставление                = ДанныеДокумента.Представление;
						
					КонецЕсли; 
					
				КонецЕсли; 
				
				РеквизитыШапка.ОтвЛицоФинУрРФ_ИНН = РеквизитыШапка.ПокупательИНН;
				РеквизитыШапка.ОтвЛицоФинУрРФ_ОГРН = РеквизитыШапка.ОГРН;
				
				// Для физического лица, зарегистрированного на территории Российской Федерации в качестве индивидуального предпринимателя, 
				// - фамилия, имя, отчество, место жительства, а также сведения о документе, удостоверяющем его личность
				РеквизитыШапка.ОтвЛицоФинУрКоды = РеквизитыШапка.ПолучательКоды;
				РеквизитыШапка.ОтвЛицоФинУрРеквизиты = СтрШаблон("%1, %2", РеквизитыШапка.ПолучательРеквизиты, ДанныеДокументаПредставление);
				
			ИначеЕсли РеквизитыШапка.ОбособленноеПодразделение Тогда
				
				// Получатель обособленное подразделение
				
				РеквизитыШапка.ОтвЛицоФинУрПодРФ_ИНН = РеквизитыШапка.ПокупательИНН;
				РеквизитыШапка.ОтвЛицоФинУрПодРФ_КПП = РеквизитыШапка.ПокупательКПП;
				РеквизитыШапка.ОтвЛицоФинУрПодРФ_ОГРН = РеквизитыШапка.ОГРН;
				
				РеквизитыШапка.ОтвЛицоФинУрПодСтранаКод = РеквизитыШапка.СтранаНазначенияКод;
				РеквизитыШапка.ОтвЛицоФинУрПодСтранаНаименование = РеквизитыШапка.СтранаНазначенияНаименование;
				РеквизитыШапка.ОтвЛицоФинУрПодНаименование = ПолучательНаименование;
				РеквизитыШапка.ОтвЛицоФинУрПодИндекс = ПолучательАдрес.Получить("Индекс");
				РеквизитыШапка.ОтвЛицоФинУрПодОбласть = ПолучательАдрес.Получить("Регион");
				РеквизитыШапка.ОтвЛицоФинУрПодУлицаНомерДома = 
					ПолучательАдрес.Получить("Улица") + ", " + ПолучательАдрес.Получить("Дом") + ", " 
					+ ПолучательАдрес.Получить("Корпус") + ", " + ПолучательАдрес.Получить("Квартира");
				
			Иначе	
				
				// Получатель юридическое лицо
				
				РеквизитыШапка.ОтвЛицоФинУр = ПолучательНаименование;
				РеквизитыШапка.ОтвЛицоФинУрКоды = РеквизитыШапка.ПолучательКоды;
				РеквизитыШапка.ОтвЛицоФинУрРФ_ИНН = РеквизитыШапка.ПокупательИНН;
				РеквизитыШапка.ОтвЛицоФинУрРФ_КПП = РеквизитыШапка.ПокупательКПП;
				РеквизитыШапка.ОтвЛицоФинУрРФ_ОГРН = РеквизитыШапка.ОГРН;
				РеквизитыШапка.ОтвЛицоФинУрРеквизиты = РеквизитыШапка.ПолучательРеквизиты;
				
			КонецЕсли;
			
			РеквизитыШапка.Вставить("ПолучательИндекс", ПолучательАдрес.Получить("Индекс"));
			РеквизитыШапка.Вставить("ПолучательКоды", РеквизитыШапка.ПолучательКоды);
			РеквизитыШапка.Вставить("ПолучательНаименование", ПолучательНаименование);
			РеквизитыШапка.Вставить("ПолучательНаселенныйПункт", ПолучательАдрес.Получить("НаселенныйПункт"));
			РеквизитыШапка.Вставить("ПолучательОбласть", ПолучательАдрес.Получить("Регион"));
			РеквизитыШапка.Вставить("ПолучательРБ_УНП", "");
			РеквизитыШапка.Вставить("ПолучательРК_БИН", "");
			РеквизитыШапка.Вставить("ПолучательРК_ИИН", "");
			РеквизитыШапка.Вставить("ПолучательРФ_ИНН", РеквизитыШапка.ПокупательИНН);
			РеквизитыШапка.Вставить("ПолучательРФ_КПП", РеквизитыШапка.ПокупательКПП);
			РеквизитыШапка.Вставить("ПолучательРФ_ОГРН", РеквизитыШапка.ОГРН);
			РеквизитыШапка.Вставить("ПолучательРеквизиты", РеквизитыШапка.ПолучательРеквизиты);
			РеквизитыШапка.Вставить("ПолучательСтранаКод", РеквизитыШапка.СтранаНазначенияКод);
			РеквизитыШапка.Вставить("ПолучательСтранаНаименование", РеквизитыШапка.СтранаНазначенияНаименование);
			РеквизитыШапка.Вставить("ПолучательУлицаНомерДома", 
				ПолучательАдрес.Получить("Улица") + ", " + ПолучательАдрес.Получить("Дом") + ", " 
				+ ПолучательАдрес.Получить("Корпус") + ", " + ПолучательАдрес.Получить("Квартира"));
			
			Если Правила891 Тогда
				ПочтовыйАдресОрганизации = СтрШаблон("%1, %2", РеквизитыШапка.СтранаНазначенияНаименование, РеквизитыШапка.ОргПочтовыйАдрес);
			Иначе
				ПочтовыйАдресОрганизации = СтрШаблон("643, %1", РеквизитыШапка.ОргПочтовыйАдрес);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РеквизитыШапка.ИндивидуальныйПредприниматель) Тогда
				РеквизитыШапка.ОргИсполнитель = РеквизитыШапка.ИндивидуальныйПредприниматель;
				РеквизитыШапка.ОргДолжностьИсп = НСтр("ru = 'Индивидуальный предприниматель'"); 
				ФИО = ПолучитьФИОФизЛица(РеквизитыШапка.ИндивидуальныйПредприниматель);
			Иначе
				Руководители                   = ОтветственныеЛицаБП.ОтветственныеЛица(СтрокаШапки.Организация, СтрокаШапки.Дата);
				РеквизитыШапка.ОргИсполнитель  = Руководители.РуководительПредставление;
				РеквизитыШапка.ОргДолжностьИсп = Руководители.РуководительДолжностьПредставление;
				ФИО = Руководители.РуководительФИО;
			КонецЕсли;
			
			РеквизитыШапка.Вставить("ОргИмяИсп",      ФИО.Имя);
			РеквизитыШапка.Вставить("ОргФамилияИсп",  ФИО.Фамилия);
			РеквизитыШапка.Вставить("ОргОтчествоИсп", ФИО.Отчество);
			
			РеквизитыШапка.Вставить("ОргТелефонИсп",  РеквизитыШапка.ОргТелефонИсп);
			
			РеквизитыШапка.Вставить("ОргИндекс", 			ПолучательАдрес.Получить("Индекс"));
			РеквизитыШапка.Вставить("ОргНаселенныйПункт", 	ПолучательАдрес.Получить("НаселенныйПункт"));
			РеквизитыШапка.Вставить("ОргОбласть", 			ПолучательАдрес.Получить("Регион"));
			РеквизитыШапка.Вставить("ОргУлицаНомерДома", 
				ПолучательАдрес.Получить("Улица") + ", " + ПолучательАдрес.Получить("Дом") + ", " 
				+ ПолучательАдрес.Получить("Корпус") + ", " + ПолучательАдрес.Получить("Квартира"));
			
			РеквизитыШапка.Вставить("ОргАдресЭлПочты", 			РеквизитыШапка.ОргАдресЭлПочты);
			РеквизитыШапка.Вставить("ОргПочтовыйАдрес", 		ПочтовыйАдресОрганизации);
			РеквизитыШапка.Вставить("ОргСтранаКод", 			РеквизитыШапка.СтранаНазначенияКод);
			РеквизитыШапка.Вставить("ОргСтранаНаименование", 	РеквизитыШапка.СтранаНазначенияНаименование);
			
			РеквизитыШапка.Вставить("ОргПочтовыйАдрес", 			ПочтовыйАдресОрганизации);
			РеквизитыШапка.Вставить("мАдресвФорматеДляВыгрузки", 	ПочтовыйАдресОрганизации);
			
			РеквизитыШапка.Вставить("Получатель_ДатаДокСтр", РеквизитыШапка.ОтвЛицоФинУрПасДатаДокумента);
			РеквизитыШапка.Вставить("Получатель_ВидДокКод",  РеквизитыШапка.ОтвЛицоФинУрПасВидДок);
			РеквизитыШапка.Вставить("Получатель_ВидДокНаим", РеквизитыШапка.ОтвЛицоФинУрПасНаименование);
			РеквизитыШапка.Вставить("Получатель_СерДок",     РеквизитыШапка.ОтвЛицоФинУрПасСерДок);
			РеквизитыШапка.Вставить("Получатель_НомДок",     РеквизитыШапка.ОтвЛицоФинУрПасНомерДок);
			РеквизитыШапка.Вставить("Получатель_ДатаДок",    РеквизитыШапка.ОтвЛицоФинУрПасДатаДокумента);
			РеквизитыШапка.Вставить("Получатель_ОргДок",     РеквизитыШапка.ПолучательНаименование);
			
			РеквизитыШапка.Вставить("Получатель_Тел",    РеквизитыШапка.ОргТелефонИсп);
			РеквизитыШапка.Вставить("Получатель_Факс",   РеквизитыШапка.ОргТелефонИсп);
			РеквизитыШапка.Вставить("Получатель_Телекс", "");
			РеквизитыШапка.Вставить("Получатель_Почта",  РеквизитыШапка.ОргАдресЭлПочты);
			
			// Реквизиты подписи - сокращенное наименование организации-покупателя.
			РеквизитыШапка.Вставить("ПолнСокрНаим", СведенияОПокупателе.СокращенноеНаименование);
			
			// Реквизиты подписи - ИНН/КПП/ОГРН организации-покупателя.
			ИННКППОГРН = РеквизитыШапка.ПокупательИНН 
				+ ?(РеквизитыШапка.ПокупательКПП = "", "", "/" + РеквизитыШапка.ПокупательКПП)
				+ "/" + РеквизитыШапка.ОГРН;
			
			РеквизитыШапка.Вставить("ИннКппОгрн", ИННКППОГРН);
			
		КонецЕсли;
		
		Если НЕ ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли; 
		
		ПервыйДокумент = Ложь;
		
		СтруктураПоиска = Новый Структура("ДокументСсылка", СтрокаШапки.ДокументСсылка);
		НайденныеСтрокиТовары = ТаблицаТовары.НайтиСтроки(СтруктураПоиска);
		
		ОбщаяЦенаТоваров = 0;
		
		Если НайденныеСтрокиТовары.Количество() > 0 Тогда
		
			Для каждого СтрокаТовары Из НайденныеСтрокиТовары Цикл
			
				Если ЗначениеЗаполнено(СтрокаТовары.КодВидаТранспорта) Тогда
					
					РеквизитыШапка.ВидТранспортаКод = СтрокаТовары.КодВидаТранспорта;
					ВидТранспорта = СписокВидовТранспорта.НайтиПоЗначению(СтрокаТовары.КодВидаТранспорта);
					
					Если ВидТранспорта <> Неопределено Тогда
						РеквизитыШапка.ВидТранспортаНаименование = Сред(ВидТранспорта, 6);
					КонецЕсли;
					
				КонецЕсли;
				
				ОтчетныйПериод = СтрокаТовары.ОтчетныйПериод;
				
				ОбщаяЦенаТоваров = ОбщаяЦенаТоваров + СтрокаТовары.ЦенаТовараВыбВал;
				
			КонецЦикла;
			
		КонецЕсли;

		// Графа 7 - общая стоимость
		РеквизитыШапка.Вставить("ОбщаяЦенаТоваров", ОбщаяЦенаТоваров);
		
		ОсновнаяЧасть1.Параметры.Заполнить(РеквизитыШапка);
		ТабДокумент.Вывести(ОсновнаяЧасть1);
		
		ТаблицаДокументы = Новый ТаблицаЗначений; // Таблица для выгрузки
		ТаблицаДокументы.Колонки.Добавить("НаименованиеДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(1000));
		ТаблицаДокументы.Колонки.Добавить("НомерДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(1000));
		ТаблицаДокументы.Колонки.Добавить("ДатаДокумента", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
		
		НоваяСтрокаВыгрузки = ТаблицаДокументы.Добавить();
		НоваяСтрокаВыгрузки.НаименованиеДокумента = "Договор";
		НоваяСтрокаВыгрузки.НомерДокумента = РеквизитыШапка.НомерДоговора;
		НоваяСтрокаВыгрузки.ДатаДокумента = РеквизитыШапка.ДатаДоговора;
		
		Если НайденныеСтрокиТовары.Количество() > 0 Тогда
			
			// Реквизиты сопроводительных документов и счетов-фактур
			
			Для Каждого СтрокаТовары Из НайденныеСтрокиТовары Цикл
				
				Если ЗначениеЗаполнено(СтрокаТовары.СерияНомерТСД) Тогда
					
					НоваяСтрокаВыгрузки = ТаблицаДокументы.Добавить();
					
					НоваяСтрокаВыгрузки.НаименованиеДокумента = НСтр("ru = 'Счет-проформа (проформа-инвойс)'");
					НоваяСтрокаВыгрузки.НомерДокумента = СтрокаТовары.СерияНомерТСД;
					НоваяСтрокаВыгрузки.ДатаДокумента = СтрокаТовары.ДатаТСД;
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаТовары.НомерСчетаФактуры) Тогда
					
					НоваяСтрокаВыгрузки = ТаблицаДокументы.Добавить();
					
					НоваяСтрокаВыгрузки.НаименованиеДокумента = НСтр("ru = 'Счет-фактура (инвойс)'");
					НоваяСтрокаВыгрузки.НомерДокумента = СтрокаТовары.НомерСчетаФактуры;
					НоваяСтрокаВыгрузки.ДатаДокумента = СтрокаТовары.ДатаСчетаФактуры;
					
				КонецЕсли;
				
			КонецЦикла;
			
			НайденныеСтрокиСведенияОДокументах = СведенияОДокументах.НайтиСтроки(СтруктураПоиска);
			
			Если НайденныеСтрокиСведенияОДокументах.Количество() > 0 Тогда
				
				Для Каждого СтрокаТаблицы Из НайденныеСтрокиСведенияОДокументах Цикл
					
					НоваяСтрокаВыгрузки = ТаблицаДокументы.Добавить();
					
					НоваяСтрокаВыгрузки.НаименованиеДокумента = СтрокаТаблицы.Наименование;
					НоваяСтрокаВыгрузки.НомерДокумента = СтрокаТаблицы.Номер;
					НоваяСтрокаВыгрузки.ДатаДокумента = СтрокаТаблицы.Дата;
					
				КонецЦикла;
				
			КонецЕсли;
			
			ТаблицаДокументы.Свернуть("НаименованиеДокумента,НомерДокумента,ДатаДокумента");
			
			Для каждого СтрокаДокумента Из ТаблицаДокументы Цикл
			
				МногострочнаяЧасть1.Параметры.Документы = 
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '%1 № %2 от %3 г.'"),
						СтрокаДокумента.НаименованиеДокумента,
						СтрокаДокумента.НомерДокумента, 
						Формат(СтрокаДокумента.ДатаДокумента, "ДФ=dd.MM.yyyy"));
						
				ТабДокумент.Вывести(МногострочнаяЧасть1);
			
			КонецЦикла; 
			
			ТабДокумент.Вывести(ОсновнаяЧасть2);
			
			ТаблицаТоварыДляВыгрузки = ТаблицаТовары.СкопироватьКолонки();   // Таблица для выгрузки
			ТаблицаТоварыДляВыгрузки.Колонки.Добавить("КодТО");              // Код таможенного органа
			ТаблицаТоварыДляВыгрузки.Колонки.Добавить("ДатаРегистрацииСтр"); // Дата таможенной декларации
			ТаблицаТоварыДляВыгрузки.Колонки.Добавить("НомерДок");           // Номер таможенной декларации
			ТаблицаТоварыДляВыгрузки.Колонки.Добавить("ДекларацияНом");      // Порядковый номер строки в декларации
			
			
			ОбщаяЦенаТоваров = 0;
			
			Для Каждого СтрокаТовары Из НайденныеСтрокиТовары Цикл
				
				НоваяСтрокаВыгрузки = ТаблицаТоварыДляВыгрузки.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрокаВыгрузки, СтрокаТовары);
				ЗаполнитьРеквизитыТаможеннойДекларации(СтрокаТовары, НоваяСтрокаВыгрузки);
				ЗаполнитьСведенияОПроизводителе(СтрокаТовары, НоваяСтрокаВыгрузки, Правила891, РеквизитыШапка.Дата);
				ЗаполнитьСведенияОМаркируемыхТоварах(СтрокаТовары, НоваяСтрокаВыгрузки, Правила891, ШтрихкодыУпаковок);
				
				МногострочнаяЧасть2.Параметры.Заполнить(НоваяСтрокаВыгрузки);
				ТабДокумент.Вывести(МногострочнаяЧасть2);
				
				НоваяСтрокаВыгрузки.ЕдИзмТовараКратко = ВРег(СтрокаТовары.ЕдИзмТовараКратко);
				
			КонецЦикла;
			
		Иначе
			ТабДокумент.Вывести(МногострочнаяЧасть2);
		КонецЕсли;
		
		// Подвал
	
		РеквизитыШапка.Вставить("ДатаЗаполнения", Формат(РеквизитыШапка.Дата, "ДФ=yyyy-MM-dd"));
		
		РеквизитыШапка.ДатаЗаполненияД1 = Лев(Формат(РеквизитыШапка.Дата, "ДФ=""дд"""), 1);
		РеквизитыШапка.ДатаЗаполненияД2 = Прав(Формат(РеквизитыШапка.Дата, "ДФ=""дд"""), 1);
		
		РеквизитыШапка.Вставить("ДатаЗаполненияД", Лев(Формат(РеквизитыШапка.Дата, "ДФ=""дд"""), 2));
		
		РеквизитыШапка.ДатаЗаполненияМ1 = Сред(Формат(РеквизитыШапка.Дата, "ДФ=dd.MM.yyyy"), 4, 1);
		РеквизитыШапка.ДатаЗаполненияМ2 = Сред(Формат(РеквизитыШапка.Дата, "ДФ=dd.MM.yyyy"), 5, 1);
		
		РеквизитыШапка.Вставить("ДатаЗаполненияМ", Сред(Формат(РеквизитыШапка.Дата, "ДФ=dd.MM.yyyy"), 4, 2));

		РеквизитыШапка.ДатаЗаполненияГ1 = Лев(Формат(РеквизитыШапка.Дата, "ДФ=""гггг"""), 1);
		РеквизитыШапка.ДатаЗаполненияГ2 = Сред(Формат(РеквизитыШапка.Дата, "ДФ=""гггг"""), 2, 1);
		РеквизитыШапка.ДатаЗаполненияГ3 = Сред(Формат(РеквизитыШапка.Дата, "ДФ=""гггг"""), 3, 1);
		РеквизитыШапка.ДатаЗаполненияГ4 = Прав(Формат(РеквизитыШапка.Дата, "ДФ=""гггг"""), 1);
		
		РеквизитыШапка.Вставить("ДатаЗаполненияГ", Формат(РеквизитыШапка.Дата, "ДФ=""гггг"""));
		
		РеквизитыШапка.ОтчетныйМесяцМ1 = Сред(Формат(ОтчетныйПериод, "ДФ=dd.MM.yyyy"), 4, 1);
		РеквизитыШапка.ОтчетныйМесяцМ2 = Сред(Формат(ОтчетныйПериод, "ДФ=dd.MM.yyyy"), 5, 1);
		
		РеквизитыШапка.Вставить("ОтчетныйМесяцМ", Сред(Формат(ОтчетныйПериод, "ДФ=dd.MM.yyyy"), 4, 2));
		
		РеквизитыШапка.ОтчетныйМесяцГ1 = Лев(Формат(ОтчетныйПериод, "ДФ=""гггг"""), 1);
		РеквизитыШапка.ОтчетныйМесяцГ2 = Сред(Формат(ОтчетныйПериод, "ДФ=""гггг"""), 2, 1);
		РеквизитыШапка.ОтчетныйМесяцГ3 = Сред(Формат(ОтчетныйПериод, "ДФ=""гггг"""), 3, 1);
		РеквизитыШапка.ОтчетныйМесяцГ4 = Прав(Формат(ОтчетныйПериод, "ДФ=""гггг"""), 1);
		
		РеквизитыШапка.Вставить("ОтчетныйМесяцГ", Формат(ОтчетныйПериод, "ДФ=""гггг"""));
		РеквизитыШапка.Вставить("ОтчетныйМесяц",  Формат(ОтчетныйПериод, "ДФ=yyyy-MM")); 
		РеквизитыШапка.Вставить("УникальныйИД",   РеквизитыШапка.ДокументСсылка.УникальныйИдентификатор());
		
		ОсновнаяЧасть3.Параметры.Заполнить(РеквизитыШапка);
		
		ТабДокумент.Вывести(ОсновнаяЧасть3);
		
	КонецЦикла;
	
	Если ТаблицаТоварыДляВыгрузки <> Неопределено Тогда
		ТаблицаТоварыДляВыгрузки.Колонки.Удалить("ДатаСчетаФактуры");
		ТаблицаТоварыДляВыгрузки.Колонки.Удалить("ДатаТСД");
		ТаблицаТоварыДляВыгрузки.Колонки.Удалить("ДокументСсылка");
		ТаблицаТоварыДляВыгрузки.Колонки.Удалить("НомерСчетаФактуры");
		ТаблицаТоварыДляВыгрузки.Колонки.Удалить("ОтчетныйПериод");
		ТаблицаТоварыДляВыгрузки.Колонки.Удалить("СерияНомерТСД");
		ТаблицаТоварыДляВыгрузки.Колонки.Удалить("НомерСтроки");
		ТаблицаТоварыДляВыгрузки.Колонки.Удалить("КодВидаТранспорта");
	КонецЕсли;
	
	Структура = Новый Структура;
	Структура.Вставить("РеквизитыШапка",           РеквизитыШапка);
	Структура.Вставить("ТаблицаДокументы",         ТаблицаДокументы);
	Структура.Вставить("ТаблицаТоварыДляВыгрузки", ТаблицаТоварыДляВыгрузки);
	Структура.Вставить("ТабДокумент",              ТабДокумент);
	
	Возврат Структура;
	
КонецФункции

//-- Локализация

#КонецОбласти

#Область Проведение

// Процедура дополняет тексты запросов проведения документа.
//
// Параметры:
//  Запрос - Запрос - Общий запрос проведения документа.
//  ТекстыЗапроса - СписокЗначений - Список текстов запроса проведения.
//  Регистры - Строка, Структура - Список регистров проведения документа через запятую или в ключах структуры.
//
Процедура ДополнитьТекстыЗапросовПроведения(Запрос, ТекстыЗапроса, Регистры) Экспорт
	
	//++ Локализация
	ТекстЗапросаТаблицаЖурналУчетаСчетовФактур(Запрос, ТекстыЗапроса, Регистры);
	//-- Локализация
	
КонецПроцедуры

// Переформировывает движения в ЖурналУчетаСчетовФактур без перепроведения документа.
// Формирует задание на отражение в книге покупок.
// Сбрасывает статус отражения в регл. учете.
//
// Параметры:
//	МассивРегистраторов - Массив Из ДокументСсылка.ЗаявлениеОВвозеТоваров - Документы, движения которых необходимо актуализировать.
//	ПризнакОтменаПроведения - Булево - Признак, что переформировать движения необходимо по причине отмены проведения документа.
//
Процедура СформироватьДвиженияВЖурналУчетаСчетовФактур(МассивРегистраторов, ПризнакОтменаПроведения = Ложь) Экспорт
	
	//++ Локализация
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.Текст = 	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Заявления.Ссылка КАК СчетФактура,
	|	Заявления.Организация КАК Организация,
	|	НАЧАЛОПЕРИОДА(ДанныеОплатыВБюджет.ДатаПодтвержденияОплаты, МЕСЯЦ) КАК Месяц,
	|	ДанныеОплатыВБюджет.ДатаПодтвержденияОплаты КАК ДатаОтражения
	|ИЗ
	|	РегистрСведений.ПодтверждениеОплатыНДСВБюджет КАК ДанныеОплатыВБюджет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявлениеОВвозеТоваров КАК Заявления
	|		ПО ДанныеОплатыВБюджет.СчетФактура = Заявления.Ссылка
	|ГДЕ
	|	ДанныеОплатыВБюджет.СчетФактура В(&МассивРегистраторов)
	|	И ДанныеОплатыВБюджет.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОплатыНДСВБюджет.ПолученоПодтверждение)
	|	И Заявления.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Заявления.Ссылка,
	|	Заявления.Организация,
	|	НАЧАЛОПЕРИОДА(ЖурналУчетаСчетовФактур.ДатаСчетаФактуры, МЕСЯЦ),
	|	ЖурналУчетаСчетовФактур.ДатаСчетаФактуры
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров КАК Заявления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналУчетаСчетовФактур КАК ЖурналУчетаСчетовФактур
	|		ПО ЖурналУчетаСчетовФактур.СчетФактура = Заявления.Ссылка
	|ГДЕ
	|	Заявления.Ссылка В(&МассивРегистраторов)
	|	И Заявления.Проведен
	|ИТОГИ ПО
	|	СчетФактура";
	
	Запрос.УстановитьПараметр("МассивРегистраторов", МассивРегистраторов);
	
	МассивСчетовФактур = Новый Массив;
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЖурналУчетаСчетовФактур.НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.СчетФактура);
			ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.НДСЗаписиКнигиПокупок.НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.СчетФактура);
			
			Блокировка.Заблокировать();
			
			Движения = Новый Структура;
			
			ЖурналУчетаСчетовФактур = РегистрыСведений.ЖурналУчетаСчетовФактур.СоздатьНаборЗаписей();
			ЖурналУчетаСчетовФактур.Отбор.Регистратор.Установить(Выборка.СчетФактура);
			Движения.Вставить("ЖурналУчетаСчетовФактур", ЖурналУчетаСчетовФактур);
			
			
			
			Регистры = Новый Структура;
			Регистры.Вставить("ЖурналУчетаСчетовФактур");
			
			ТаблицыДляДвижений = ПроведениеДокументов.ДанныеДокументаДляПроведения(Выборка.СчетФактура, Регистры);
			УчетНДСУП.ОтразитьДвижения(ТаблицыДляДвижений, Движения, Ложь);
			
			ВыборкаДатыОтражения = Выборка.Выбрать();
			РегистрыСведений.ЗаданияКФормированиюДвиженийПоНДС.СоздатьЗаписиРегистраПоДаннымВыборки(ВыборкаДатыОтражения);
			
			
			
			Для каждого Движение Из Движения Цикл
				Движение.Значение.Записать();
			КонецЦикла;
			
			
			МассивСчетовФактур.Добавить(Выборка.СчетФактура);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = СтрШаблон(
					НСтр("ru = 'Не удалось выполнить отражение в учете НДС документа ""%1"" по причине: %2'"),
					Выборка.СчетФактура,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение ТекстСообщения;
		КонецПопытки
		
	КонецЦикла;
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти


#КонецОбласти

// ++ Локализация

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ТекстЗапросаТаблицаЖурналУчетаСчетовФактур(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ЖурналУчетаСчетовФактур";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЖурналУчетаСчетовФактур.Период КАК Период,
	|	ЖурналУчетаСчетовФактур.Организация КАК Организация,
	|	ЖурналУчетаСчетовФактур.Контрагент КАК Контрагент,
	|	ЖурналУчетаСчетовФактур.СчетФактура КАК СчетФактура,
	|	ЖурналУчетаСчетовФактур.ЧастьЖурнала КАК ЧастьЖурнала,
	|	ЖурналУчетаСчетовФактур.НомерСчетаФактуры КАК НомерСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.ДатаСчетаФактуры КАК ДатаСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.КодВидаОперации КАК КодВидаОперации,
	|	ЖурналУчетаСчетовФактур.КодВидаСделки КАК КодВидаСделки,
	|	ЖурналУчетаСчетовФактур.КодСпособаВыставленияПолучения КАК КодСпособаВыставленияПолучения,
	|	ЖурналУчетаСчетовФактур.Валюта КАК Валюта,
	|	ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуре КАК СуммаПоСчетуФактуре,
	|	ЖурналУчетаСчетовФактур.СуммаНДС КАК СуммаНДС,
	|	ЖурналУчетаСчетовФактур.ИндексСтроки КАК ИндексСтроки,
	|	ЖурналУчетаСчетовФактур.Сторно КАК Сторно,
	|	ЖурналУчетаСчетовФактур.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	ЖурналУчетаСчетовФактур.СчетФактураВыданныйПокупателю КАК СчетФактураВыданныйПокупателю,
	|	ЖурналУчетаСчетовФактур.СчетФактураПолученныйОтПродавца КАК СчетФактураПолученныйОтПродавца,
	|	ЖурналУчетаСчетовФактур.ИсправлениеСобственнойОшибки КАК ИсправлениеСобственнойОшибки,
	|	ЖурналУчетаСчетовФактур.ДатаВыставленияПолучения КАК ДатаВыставленияПолучения,
	|	ЖурналУчетаСчетовФактур.НомерИсправления КАК НомерИсправления,
	|	ЖурналУчетаСчетовФактур.ДатаИсправления КАК ДатаИсправления,
	|	ЖурналУчетаСчетовФактур.НомерКорректировочногоСчетаФактуры КАК НомерКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.ДатаКорректировочногоСчетаФактуры КАК ДатаКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.НомерИсправленияКорректировочногоСчетаФактуры КАК НомерИсправленияКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.ДатаИсправленияКорректировочногоСчетаФактуры КАК ДатаИсправленияКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУменьшение КАК СуммаПоСчетуФактуреРазницаУменьшение,
	|	ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУвеличение КАК СуммаПоСчетуФактуреРазницаУвеличение,
	|	ЖурналУчетаСчетовФактур.СуммаНДСРазницаУменьшение КАК СуммаНДСРазницаУменьшение,
	|	ЖурналУчетаСчетовФактур.СуммаНДСРазницаУвеличение КАК СуммаНДСРазницаУвеличение,
	|	ЖурналУчетаСчетовФактур.ПоСтавкеБезНДС КАК ПоСтавкеБезНДС,
	|	ЖурналУчетаСчетовФактур.СчетФактураНеВыставляется КАК СчетФактураНеВыставляется,
	|	ЖурналУчетаСчетовФактур.Продавец КАК Продавец,
	|	ЖурналУчетаСчетовФактур.КППКонтрагента КАК КППКонтрагента,
	|	ЖурналУчетаСчетовФактур.Посредник КАК Посредник,
	|	ЖурналУчетаСчетовФактур.УдалитьСчетФактураВыданныйПокупателю КАК УдалитьСчетФактураВыданныйПокупателю,
	|	ЖурналУчетаСчетовФактур.Субкомиссионер КАК Субкомиссионер,
	|	ЖурналУчетаСчетовФактур.НомерСчетаФактурыПродавца КАК НомерСчетаФактурыПродавца,
	|	ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреКомиссия КАК СуммаПоСчетуФактуреКомиссия,
	|	ЖурналУчетаСчетовФактур.СуммаНДСКомиссия КАК СуммаНДСКомиссия,
	|	ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУменьшениеКомиссия КАК СуммаПоСчетуФактуреРазницаУменьшениеКомиссия,
	|	ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУвеличениеКомиссия КАК СуммаПоСчетуФактуреРазницаУвеличениеКомиссия,
	|	ЖурналУчетаСчетовФактур.СуммаНДСРазницаУменьшениеКомиссия КАК СуммаНДСРазницаУменьшениеКомиссия,
	|	ЖурналУчетаСчетовФактур.СуммаНДСРазницаУвеличениеКомиссия КАК СуммаНДСРазницаУвеличениеКомиссия,
	|	ЖурналУчетаСчетовФактур.КодВидаОперацииКомиссия КАК КодВидаОперацииКомиссия,
	|	ЖурналУчетаСчетовФактур.ДатаСчетаФактурыПродавца КАК ДатаСчетаФактурыПродавца,
	|	ЖурналУчетаСчетовФактур.ИННКонтрагента КАК ИННКонтрагента,
	|	ЖурналУчетаСчетовФактур.ИННПродавца КАК ИННПродавца,
	|	ЖурналУчетаСчетовФактур.КПППродавца КАК КПППродавца,
	|	ЖурналУчетаСчетовФактур.ИННСубкомиссионера КАК ИННСубкомиссионера,
	|	ЖурналУчетаСчетовФактур.КППСубкомиссионера КАК КППСубкомиссионера
	|ИЗ
	|	РегистрСведений.ЖурналУчетаСчетовФактур КАК ЖурналУчетаСчетовФактур
	|ГДЕ
	|	ЖурналУчетаСчетовФактур.Регистратор = &Ссылка
	|	И &РучнаяКорректировкаЖурналаСФ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Организация КАК Организация,
	|	&Контрагент КАК Контрагент,
	|	&Ссылка КАК СчетФактура,
	|	ЗНАЧЕНИЕ(Перечисление.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры) КАК ЧастьЖурнала,
	|	ЕСТЬNULL(ПодтверждениеОплатыНДСВБюджет.НомерОтметкиОРегистрации, """") КАК НомерСчетаФактуры,
	|	ЕСТЬNULL(ПодтверждениеОплатыНДСВБюджет.ДатаПодтвержденияОплаты, &Период) КАК ДатаСчетаФактуры,
	|	""19"" КАК КодВидаОперации,
	|	2 КАК КодВидаСделки,
	|	1 КАК КодСпособаПолучения,
	|	&ВалютаРегламентированногоУчета КАК Валюта,
	|	&НалоговаяБазаНДС КАК СуммаПоСчетуФактуре,
	|	&СуммаНДС КАК СуммаНДС,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	РегистрСведений.ПодтверждениеОплатыНДСВБюджет КАК ПодтверждениеОплатыНДСВБюджет
	|ГДЕ
	|	ПодтверждениеОплатыНДСВБюджет.СчетФактура = &Ссылка
	|	И ПодтверждениеОплатыНДСВБюджет.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОплатыНДСВБюджет.ПолученоПодтверждение)
	|	И НЕ &РучнаяКорректировкаЖурналаСФ
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ЗарегистрироватьСчетаФактурыОжидаетОплатыНДС(Объект, Проведен)
	
	СчетаФактуры = УчетНДСРФ.НоваяТаблицаСчетовФактур();
	СтрокаСчетаФактуры = СчетаФактуры.Добавить();
	СтрокаСчетаФактуры.СчетФактура = Объект.Ссылка;
	СтрокаСчетаФактуры.СуммаОплаты = Объект.СуммаДокумента;
	
	УчетНДСРФ.ЗарегистрироватьСчетаФактурыОжидаетОплатыНДС(СчетаФактуры, Объект.Ссылка, Проведен);
	
	Если Объект.Дата >= РеглУчетСервер.ДатаНачалаОбязательногоПримененияЕНП() Тогда 
		
		СчетаФактуры = УчетНДСРФ.НоваяТаблицаСчетовФактур();
		СтрокаСчетаФактуры = СчетаФактуры.Добавить();
		СтрокаСчетаФактуры.СчетФактура = Объект.Ссылка;
		СтрокаСчетаФактуры.СуммаОплаты = Объект.СуммаДокумента;
	
		РеквизитыДокументаОплаты = Новый Структура("ДатаПеречисленияВБюджет");
		РеквизитыДокументаОплаты.Вставить("НомерДокумента", "-");
		РеквизитыДокументаОплаты.Вставить("ДатаДокумента",  Объект.Дата);
		РеквизитыДокументаОплаты.Вставить("ТипНалога",      Справочники.ВидыНалоговВзносов.НДС_ВвозимыеТовары);
	
		УчетНДСРФ.ЗарегистрироватьОплатуНДСПоСчетамФактурам(СчетаФактуры, Объект.Ссылка, РеквизитыДокументаОплаты, Проведен);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти


#Область ПроцедурыИФункцииПечати

Функция ПодготовитьТаблицыЗаявленияОВвозеТоваровДляВыгрузкиПечати(МассивДокументов)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.УстановитьПараметр("ИспользоватьНоменклатуруПартнеров", ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруПартнеров"));
	Запрос.УстановитьПараметр("ПервичноеЗаявление", НСтр("ru = 'первичное заявление'"));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК ДокументСсылка,
	|	Реквизиты.Номер КАК НомерЗаяв,
	|	Реквизиты.Дата КАК ДатаДокНП,
	|	Реквизиты.Дата КАК Дата,
	|	ДЕНЬ(Реквизиты.Дата) КАК Число,
	|	МЕСЯЦ(Реквизиты.Дата) КАК Месяц,
	|	ГОД(Реквизиты.Дата) КАК Год,
	|	НЕОПРЕДЕЛЕНО КАК СтрВсего,
	|	НЕОПРЕДЕЛЕНО КАК ПродавецИНН_КПП,
	|	ВЫБОР
	|		КОГДА Реквизиты.Контрагент.НаименованиеПолное = """"
	|			ТОГДА Реквизиты.Контрагент.Наименование
	|		ИНАЧЕ Реквизиты.Контрагент.НаименованиеПолное
	|	КОНЕЦ КАК ПродавецНаимОрг,
	|	Реквизиты.Контрагент.СтранаРегистрации.Код КАК КодСтраныПродавец,
	|	Реквизиты.Контрагент.СтранаРегистрации.НаименованиеПолное КАК НаименованиеСтраныПродавец,
	|	НЕОПРЕДЕЛЕНО КАК ПродавецМестоНахожд,
	|	ЛОЖЬ КАК ПродавецБайконур,
	|	Реквизиты.НомерДоговора КАК НомерДог,
	|	Реквизиты.ДатаДоговора КАК ДатаДог,
	|	НЕОПРЕДЕЛЕНО КАК НомерСпецификации,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаСпецификации,
	|	НЕОПРЕДЕЛЕНО КАК ИННОрг_1,
	|	НЕОПРЕДЕЛЕНО КАК НаимОрг_1,
	|	НЕОПРЕДЕЛЕНО КАК КодСтраныОрг1,
	|	НЕОПРЕДЕЛЕНО КАК МестоНахождОрг_1,
	|	ЛОЖЬ КАК КомиссионерБайконур,
	|	НЕОПРЕДЕЛЕНО КАК НомКонтр_2,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаКонтр_2,
	|	НЕОПРЕДЕЛЕНО КАК НомерСпецификации_07,
	|	НЕОПРЕДЕЛЕНО КАК ДатаСпецификации_07,
	|	НЕОПРЕДЕЛЕНО КАК РеквизитыПосредник,
	|	ВЫБОР
	|		КОГДА ЛОЖЬ
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПрЛизинг,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(Реквизиты.Договор) = ТИП(Справочник.ДоговорыКонтрагентов)
	|			И ВЫРАЗИТЬ(Реквизиты.Договор КАК Справочник.ДоговорыКонтрагентов).ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПереработчиком2_5_ЕАЭС)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПрДавСырья,
	|	ЛОЖЬ КАК ПрПродФЛ,
	|	Реквизиты.Организация.ИНН КАК ПокупательИНН,
	|	Реквизиты.Организация.КПП КАК ПокупательКПП,
	|	НЕОПРЕДЕЛЕНО КАК ПокупательИНН_КПП,
	|	НЕОПРЕДЕЛЕНО ПокупательНаимОрг,
	|	""643"" КАК КодСтраныПокупатель,
	|	НЕОПРЕДЕЛЕНО КАК ПокупательМестоНахожд,
	|	ЛОЖЬ КАК ПокупательБайконур,
	|	Реквизиты.Проведен,
	|	ВЫБОР КОГДА Реквизиты.Организация.ОбособленноеПодразделение ТОГДА
	|		Реквизиты.Организация.ГоловнаяОрганизация
	|	ИНАЧЕ
	|		Реквизиты.Организация
	|	КОНЕЦ КАК Организация,
	|	Реквизиты.Контрагент,
	|	Реквизиты.Договор,
	|	Реквизиты.Валюта,
	|	Реквизиты.Ответственный,
	|	Реквизиты.СуммаДокумента,
	|	Реквизиты.Валюта.Код,
	|	НЕОПРЕДЕЛЕНО КАК ФИОРук,
	|	НЕОПРЕДЕЛЕНО КАК ФИОБух,
	|	Реквизиты.Дата КАК ДатаПодписиРук,
	|	Реквизиты.Дата КАК ДатаПодписиБух,
	|	&ПервичноеЗаявление КАК ПричинаЗаявления,
	|	"""" КАК НомерОтметки,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОтметки,
	|	0 КАК ИзмениеЦеныМесяц,
	|	0 КАК ИзмениеЦеныГод,
	|	Реквизиты.ИспользоватьАкцизы КАК ИспользоватьАкцизы
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка В(&МассивДокументов)";
	
	Шапка = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Спецификации.НомерСпецификации КАК Номер,
	|	Спецификации.ДатаСпецификации КАК Дата,
	|	Спецификации.НомерСтроки КАК НомерСтроки,
	|	Спецификации.Ссылка КАК ДокументСсылка
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.Спецификации КАК Спецификации
	|ГДЕ
	|	Спецификации.Ссылка В(&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТаблицаСпецификацииКонтрагента = Запрос.Выполнить().Выбрать();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.НомерСтроки КАК П000010000101,
	|	ВЫБОР
	|		КОГДА Товары.Содержание <> """"
	|			ТОГДА Товары.Содержание
	|		КОГДА &ИспользоватьНоменклатуруПартнеров И
	|				Товары.НоменклатураПартнера <> ЗНАЧЕНИЕ(Справочник.НоменклатураКонтрагентов.ПустаяСсылка) ТОГДА
	|			Товары.НоменклатураПартнера.НаименованиеНоменклатуры
	|		ИНАЧЕ
	|			ВЫБОР
	|				КОГДА Товары.Номенклатура.НаименованиеПолное = """"
	|					ТОГДА Товары.Номенклатура.Наименование
	|				ИНАЧЕ Товары.Номенклатура.НаименованиеПолное
	|			КОНЕЦ 
	|	КОНЕЦ КАК П000010000102,
	|	Товары.КодТНВЭД.Код КАК П000010000103,
	|	Товары.ЕдиницаИзмерения.Наименование КАК П000010000104,
	|	Товары.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	Товары.Количество КАК П000010000105,
	|	Товары.ФактурнаяСтоимость КАК П000010000106,
	|	Товары.СерияНомерТСД КАК П000010000109,
	|	Товары.ДатаТСД КАК ДатаТСД,
	|	Товары.НомерСчетаФактуры КАК П000010000111,
	|	Товары.ДатаСчетаФактуры КАК ДатаСчетаФактуры,
	|	Товары.ДатаПринятияНаУчет КАК ДатаПринятияНаУчет,
	|	Товары.НалоговаяБазаАкцизы КАК П000010000114,
	|	Товары.НалоговаяБазаНДС КАК П000010000115,
	|	Товары.ТвердаяСтавкаАкциза КАК П000010000116,
	|	Товары.АдвалорнаяСтавкаАкциза КАК П000010000117,
	|	Товары.СтавкаНДС КАК П000010000118,
	|	Товары.СуммаАкциза КАК П000010000119,
	|	Товары.СуммаНДС КАК П000010000120,
	|	Товары.Валюта КАК Валюта,
	|	Товары.Валюта.Код КАК П000010000107,
	|	НЕОПРЕДЕЛЕНО КАК П000010000108,
	|	НЕОПРЕДЕЛЕНО КАК П000010000125,
	|	НЕОПРЕДЕЛЕНО КАК П000010000110,
	|	НЕОПРЕДЕЛЕНО КАК П000010000112,
	|	НЕОПРЕДЕЛЕНО КАК П000010000113,
	|	Товары.Ссылка КАК ДокументСсылка
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК Товары 
	|ГДЕ
	|	Товары.Ссылка В(&МассивДокументов)
	|	И НЕ Товары.Ссылка.ПечатьИВыгрузкаСводноПоНоменклатуре
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МИНИМУМ(Товары.НомерСтроки) КАК П000010000101,
	|	ВЫБОР
	|		КОГДА Товары.Содержание <> """"
	|			ТОГДА Товары.Содержание
	|		КОГДА &ИспользоватьНоменклатуруПартнеров
	|			И Товары.НоменклатураПартнера <> ЗНАЧЕНИЕ(Справочник.НоменклатураКонтрагентов.ПустаяСсылка)
	|			ТОГДА Товары.НоменклатураПартнера.НаименованиеНоменклатуры
	|		ИНАЧЕ 
	|			ВЫБОР
	|				КОГДА Товары.Номенклатура.НаименованиеПолное = """"
	|					ТОГДА Товары.Номенклатура.Наименование
	|				ИНАЧЕ 
	|					Товары.Номенклатура.НаименованиеПолное
	|			КОНЕЦ
	|	КОНЕЦ КАК П000010000102,
	|	Товары.КодТНВЭД.Код КАК П000010000103,
	|	Товары.ЕдиницаИзмерения.Наименование КАК П000010000104,
	|	Товары.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	СУММА(Товары.Количество) КАК П000010000105,
	|	СУММА(Товары.ФактурнаяСтоимость) КАК П000010000106,
	|	Товары.СерияНомерТСД КАК П000010000109,
	|	Товары.ДатаТСД КАК ДатаТСД,
	|	Товары.НомерСчетаФактуры КАК П000010000111,
	|	Товары.ДатаСчетаФактуры КАК ДатаСчетаФактуры,
	|	Товары.ДатаПринятияНаУчет КАК ДатаПринятияНаУчет,
	|	СУММА(Товары.НалоговаяБазаАкцизы) КАК П000010000114,
	|	СУММА(Товары.НалоговаяБазаНДС) КАК П000010000115,
	|	Товары.ТвердаяСтавкаАкциза КАК П000010000116,
	|	Товары.АдвалорнаяСтавкаАкциза КАК П000010000117,
	|	Товары.СтавкаНДС КАК П000010000118,
	|	СУММА(Товары.СуммаАкциза) КАК П000010000119,
	|	СУММА(Товары.СуммаНДС) КАК П000010000120,
	|	Товары.Валюта КАК Валюта,
	|	Товары.Валюта.Код КАК П000010000107,
	|	НЕОПРЕДЕЛЕНО КАК П000010000108,
	|	НЕОПРЕДЕЛЕНО КАК П000010000125,
	|	НЕОПРЕДЕЛЕНО КАК П000010000110,
	|	НЕОПРЕДЕЛЕНО КАК П000010000112,
	|	НЕОПРЕДЕЛЕНО КАК П000010000113,
	|	Товары.Ссылка КАК ДокументСсылка
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка В (&МассивДокументов)
	|	И Товары.Ссылка.ПечатьИВыгрузкаСводноПоНоменклатуре
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА Товары.Содержание <> """"
	|			ТОГДА Товары.Содержание
	|		КОГДА &ИспользоватьНоменклатуруПартнеров
	|			И Товары.НоменклатураПартнера <> ЗНАЧЕНИЕ(Справочник.НоменклатураКонтрагентов.ПустаяСсылка)
	|			ТОГДА Товары.НоменклатураПартнера.НаименованиеНоменклатуры
	|		ИНАЧЕ 
	|			ВЫБОР
	|				КОГДА Товары.Номенклатура.НаименованиеПолное = """"
	|					ТОГДА Товары.Номенклатура.Наименование
	|				ИНАЧЕ 
	|					Товары.Номенклатура.НаименованиеПолное
	|			КОНЕЦ
	|	КОНЕЦ,
	|	Товары.КодТНВЭД.Код,
	|	Товары.ЕдиницаИзмерения.Наименование,
	|	Товары.ЕдиницаИзмерения.Код,
	|	Товары.СерияНомерТСД,
	|	Товары.ДатаТСД,
	|	Товары.НомерСчетаФактуры,
	|	Товары.ДатаСчетаФактуры,
	|	Товары.ДатаПринятияНаУчет,
	|	Товары.ТвердаяСтавкаАкциза,
	|	Товары.АдвалорнаяСтавкаАкциза,
	|	Товары.СтавкаНДС,
	|	Товары.Валюта,
	|	Товары.Валюта.Код,
	|	Товары.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки";
	
	ТаблицаТовары = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчастникиСделки.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА УчастникиСделки.РольПродавца = ЗНАЧЕНИЕ(Перечисление.СубъектыГражданскоПравовыхОтношений.Комитент)
	|			ТОГДА ""0""
	|		КОГДА УчастникиСделки.РольПродавца = ЗНАЧЕНИЕ(Перечисление.СубъектыГражданскоПравовыхОтношений.Доверитель)
	|			ТОГДА ""1""
	|		КОГДА УчастникиСделки.РольПродавца = ЗНАЧЕНИЕ(Перечисление.СубъектыГражданскоПравовыхОтношений.Принципал)
	|			ТОГДА ""2""
	|		КОГДА УчастникиСделки.РольПродавца = ЗНАЧЕНИЕ(Перечисление.СубъектыГражданскоПравовыхОтношений.Продавец)
	|			ТОГДА ""6""
	|		КОГДА УчастникиСделки.РольПродавца = ЗНАЧЕНИЕ(Перечисление.СубъектыГражданскоПравовыхОтношений.Покупатель)
	|			ТОГДА ""7""
	|		ИНАЧЕ ""0""
	|	КОНЕЦ КАК ТипПрод_Пр,
	|	УчастникиСделки.РольПродавца КАК ТипПродавца,
	|	ВЫБОР
	|		КОГДА УчастникиСделки.РольПокупателя = ЗНАЧЕНИЕ(Перечисление.СубъектыГражданскоПравовыхОтношений.Комиссионер)
	|			ТОГДА ""3""
	|		КОГДА УчастникиСделки.РольПокупателя = ЗНАЧЕНИЕ(Перечисление.СубъектыГражданскоПравовыхОтношений.Поверенный)
	|			ТОГДА ""4""
	|		КОГДА УчастникиСделки.РольПокупателя = ЗНАЧЕНИЕ(Перечисление.СубъектыГражданскоПравовыхОтношений.Агент)
	|			ТОГДА ""5""
	|		КОГДА УчастникиСделки.РольПокупателя = ЗНАЧЕНИЕ(Перечисление.СубъектыГражданскоПравовыхОтношений.Покупатель)
	|			ТОГДА ""7""
	|		ИНАЧЕ ""3""
	|	КОНЕЦ КАК ТипПок_Пр,
	|	УчастникиСделки.РольПокупателя КАК ТипПокупателя,
	|	УчастникиСделки.Продавец,
	|	УчастникиСделки.Продавец.СтранаРегистрации.Код КАК КодСтраныПродавец,
	|	УчастникиСделки.Продавец.СтранаРегистрации.НаименованиеПолное КАК НаименованиеСтраныПродавец,
	|	УчастникиСделки.Покупатель,
	|	УчастникиСделки.Покупатель.СтранаРегистрации.Код КАК КодСтраныПокупатель,
	|	УчастникиСделки.Покупатель.СтранаРегистрации.НаименованиеПолное КАК НаименованиеСтраныПокупатель,
	|	УчастникиСделки.НомерДоговора КАК НомерДог,
	|	УчастникиСделки.ДатаДоговора КАК ДатаДог,
	|	УчастникиСделки.НомерСпецификации,
	|	УчастникиСделки.ДатаСпецификации,
	|	НЕОПРЕДЕЛЕНО КАК ПродавецИНН_КПП,
	|	НЕОПРЕДЕЛЕНО КАК ПродавецНаимОрг,
	|	НЕОПРЕДЕЛЕНО КАК ПродавецМестоНахожд,
	|	НЕОПРЕДЕЛЕНО КАК ПокупательИНН_КПП,
	|	НЕОПРЕДЕЛЕНО КАК ПокупательНаимОрг,
	|	НЕОПРЕДЕЛЕНО КАК ПокупательМестоНахожд,
	|	ЛОЖЬ КАК ПродавецБайконур,
	|	ЛОЖЬ КАК ПокупательБайконур,
	|	УчастникиСделки.Ссылка КАК ДокументСсылка,
	|	НЕОПРЕДЕЛЕНО КАК НомерЗаяв,
	|	НЕОПРЕДЕЛЕНО КАК Число,
	|	НЕОПРЕДЕЛЕНО КАК Месяц,
	|	НЕОПРЕДЕЛЕНО КАК Год
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.УчастникиСделки КАК УчастникиСделки
	|ГДЕ
	|	УчастникиСделки.Ссылка В(&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	ТаблицаУчастникиСделки = Запрос.Выполнить().Выгрузить();
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ПолеСверху = 10;
	ТабДокумент.ПолеСнизу  = 10;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	СисИнфо = Новый СистемнаяИнформация;
	Если ПустаяСтрока(СисИнфо.ИнформацияПрограммыПросмотра) Тогда 
		ТабДокумент.ПолеСлева  = 0;
		ТабДокумент.ПолеСправа = 0;
	Иначе
		ТабДокумент.ПолеСлева  = 10;
		ТабДокумент.ПолеСправа = 10;
	КонецЕсли;
	
	ТабДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаявлениеОВвозеТоваров";
	
	ПервыйДокумент = Истина;
	
	// Объявление таблиц
	
	ТаблицаСпецификацииДляВыгрузки = Новый ТаблицаЗначений;
	ТаблицаСпецификацииДляВыгрузки.Колонки.Добавить("Номер");
	ТаблицаСпецификацииДляВыгрузки.Колонки.Добавить("Дата");
	
	ТЗСпецификации07           = ТаблицаСпецификацииДляВыгрузки.СкопироватьКолонки();
	ТЗСпецификацииРаздел3      = ТаблицаСпецификацииДляВыгрузки.СкопироватьКолонки();
	ТаблСпецификацииПриложение = ТаблицаСпецификацииДляВыгрузки.СкопироватьКолонки();
	
	ТТД = Новый ТаблицаЗначений;
	ТТД.Колонки.Добавить("Номер");
	ТТД.Колонки.Добавить("Дата");
	
	МассивТиповПродавцов = Новый Массив();
	МассивТиповПродавцов.Добавить(Перечисления.СубъектыГражданскоПравовыхОтношений.Доверитель);
	МассивТиповПродавцов.Добавить(Перечисления.СубъектыГражданскоПравовыхОтношений.Комитент);
	МассивТиповПродавцов.Добавить(Перечисления.СубъектыГражданскоПравовыхОтношений.Принципал);
	МассивТиповПродавцов.Добавить(Перечисления.СубъектыГражданскоПравовыхОтношений.Продавец);
	
	Для каждого СтрокаШапки Из Шапка Цикл
		
		Если СтрокаШапки.Дата < '20150101' Тогда
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаявлениеОВвозеТоваров.ЗаявлениеОВвозе2012кв3");
		Иначе
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаявлениеОВвозеТоваров.ЗаявлениеОВвозе2015кв1");
		КонецЕсли;
		
		Если НЕ ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли; 
		
		ПервыйДокумент = Ложь;
		
		СтруктураПоиска = Новый Структура("ДокументСсылка", СтрокаШапки.ДокументСсылка);
		
		// Структуры для выгрузки
		
		РеквизитыРаздел1 = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаШапки); 
		РеквизитыРаздел2 = Новый Структура("НомерЗаяв,Число,Месяц,Год,СтрВсего,Стр");
		РеквизитыРаздел3 = Новый Структура("НомерЗаяв,Число,Месяц,Год,СтрВсего,Стр,ТипПрод_3,
			|ТипПродавца,ПродавецИНН_КПП,ПродавецНаимОрг,КодСтраныПродавец,
			|ПродавецМестоНахожд,ПродавецАдрес,ПродавецБайконур,НомерДог,ДатаДог,
			|НомерСпецификации,ДатаСпецификации,ТипПок_3,ТипПокупателя,ПокупательИНН_КПП,
			|ПокупательНаимОрг,КодСтраныПокупатель,ПокупательМестоНахожд,ПокупательАдрес,
			|ПокупательБайконур,ФИОРук,ФИОБух,ДатаПодписиРук,ДатаПодписиБух"); 
		РеквизитыПриложение = Новый Структура("НомерЗаяв,Число,Месяц,Год");
		
		ТаблицаСпецификацииДляВыгрузки.Очистить();
		ТЗСпецификации07.Очистить();
		ТЗСпецификацииРаздел3.Очистить();
		ТаблСпецификацииПриложение.Очистить();

		НомераСпецификаций = "";
		ДатыСпецификаций = "";
		
		ПечататьРаздел3 = Ложь;
		
		// Раздел 1
		
		Если НЕ ЗначениеЗаполнено(СтрокаШапки.Организация) 
		 ИЛИ НЕ ЗначениеЗаполнено(СтрокаШапки.Контрагент) Тогда
			Продолжить;
		КонецЕсли;
		
		// Сведения о покупателе-импортере
		
		Руководители = ОтветственныеЛицаБП.ОтветственныеЛица(СтрокаШапки.Организация, СтрокаШапки.Дата);
		
		РеквизитыРаздел1.ФИОРук = Руководители.РуководительПредставление;
		РеквизитыРаздел1.ФИОБух = Руководители.ГлавныйБухгалтерПредставление;
		
		СведенияОПокупателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(СтрокаШапки.Организация, СтрокаШапки.Дата);
		
		РеквизитыРаздел1.ПокупательМестоНахожд = СформироватьПредставлениеМестонахожденияКонтрагента(
			РеквизитыРаздел1.КодСтраныПокупатель,
			ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес,"));
			
		РеквизитыРаздел1.ПокупательИНН_КПП = РеквизитыРаздел1.ПокупательИНН
			+ ?(СтрокаШапки.Дата >= '20150101' ИЛИ РеквизитыРаздел1.ПокупательКПП = "", "", "/" + РеквизитыРаздел1.ПокупательКПП);
		
		Если СведенияОПокупателе.ЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			РеквизитыРаздел1.ПокупательНаимОрг = СведенияОПокупателе.ФИОФизлица;
		Иначе
			РеквизитыРаздел1.ПокупательНаимОрг = СведенияОПокупателе.НаименованиеДляПечатныхФорм;
		КонецЕсли; 
			
		РеквизитыРаздел1.НомерЗаяв = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыРаздел1.НомерЗаяв, Истина, Ложь);
		
		// Адрес покупателя для выгрузки
		РеквизитыРаздел1.Вставить("ПокупательАдрес", 
			ПолучитьАдресВВидеСоответствия(СтрокаШапки.Организация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, СтрокаШапки.Дата));
			
		// Адрес продавца для выгрузки
		РеквизитыРаздел1.Вставить("ПродавецАдрес", ПустойРоссийскийАдрес());
		// Адрес комиссионера для выгрузки
		РеквизитыРаздел1.Вставить("КомиссионерАдрес", ПустойРоссийскийАдрес());
		
		// Если сделка осуществляется через третьих лиц необходимо определить
		// первоначального продавца товаров (продавца, комитента, доверителя или принципала),
		// заполнить раздел 3 либо Приложение к Заявлению.
		
		НайденныеСтрокиУчастникиСделки = ТаблицаУчастникиСделки.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтрокиУчастникиСделки.Количество() > 0 Тогда
			
			СтрокаУчастникиСделки = Неопределено;
			
			Для Каждого СтрокаТаблицыУчастникиСделки Из НайденныеСтрокиУчастникиСделки Цикл
				Если МассивТиповПродавцов.Найти(СтрокаТаблицыУчастникиСделки.ТипПродавца) <> Неопределено Тогда
					СтрокаУчастникиСделки = СтрокаТаблицыУчастникиСделки;
					Прервать;
				КонецЕсли;
			КонецЦикла; 
			
			Если СтрокаУчастникиСделки <> Неопределено Тогда
				
				РеквизитыРаздел1.КодСтраныПродавец = СтрокаУчастникиСделки.КодСтраныПродавец;
				
				СведенияОПродавце = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(
					СтрокаУчастникиСделки.Продавец, РеквизитыРаздел1.Дата);
				
				РеквизитыРаздел1.ПродавецНаимОрг = СведенияОПродавце.НаименованиеДляПечатныхФорм;
				
				Если СведенияОПродавце.СтранаРегистрации = Справочники.СтраныМира.Россия Тогда
					РеквизитыРаздел1.ПродавецИНН_КПП = СведенияОПродавце.ИНН 
						+ ?(СтрокаШапки.Дата >= '20150101' ИЛИ СведенияОПродавце.КПП = "", "", "/" + СведенияОПродавце.КПП);
				Иначе
					РеквизитыРаздел1.ПродавецИНН_КПП = СведенияОПродавце.НалоговыйНомерВСтранеРегистрации;
				КонецЕсли;
				
				РеквизитыРаздел1.ПродавецМестоНахожд = СформироватьПредставлениеМестонахожденияКонтрагента(
					СтрокаУчастникиСделки.КодСтраныПродавец, СведенияОПродавце.ЮридическийАдрес);
				
				РеквизитыРаздел1.НомерДог          = СтрокаУчастникиСделки.НомерДог;
				РеквизитыРаздел1.ДатаДог           = СтрокаУчастникиСделки.ДатаДог;
				РеквизитыРаздел1.НомерСпецификации = СтрокаУчастникиСделки.НомерСпецификации;
				РеквизитыРаздел1.ДатаСпецификации  = Формат(СтрокаУчастникиСделки.ДатаСпецификации, "ДЛФ=D");
				
				Если ЗначениеЗаполнено(СтрокаУчастникиСделки.НомерСпецификации) 
					И ЗначениеЗаполнено(СтрокаУчастникиСделки.ДатаСпецификации) Тогда
					СтрокаСпецификации = ТаблицаСпецификацииДляВыгрузки.Добавить();
					СтрокаСпецификации.Номер = СтрокаУчастникиСделки.НомерСпецификации;
					СтрокаСпецификации.Дата =  Формат(СтрокаУчастникиСделки.ДатаСпецификации, "ДЛФ=D");
				КонецЕсли;
				
				АдресПродавца = ПолучитьАдресВВидеСоответствия(
					СтрокаУчастникиСделки.Продавец, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, СтрокаШапки.Дата);
					
				РеквизитыРаздел1.ПродавецАдрес = АдресПродавца;
				
				Если НайденныеСтрокиУчастникиСделки.Количество() = 1 Тогда
					
					ПечататьРаздел3 = Истина;
					РеквизитыРаздел1.СтрВсего = 3; // Если строка одна
					
					// Раздел 3
					ЗаполнитьЗначенияСвойств(РеквизитыРаздел3, РеквизитыРаздел1, 
						"НомерЗаяв,Число,Месяц,Год,СтрВсего,ФИОРук,ФИОБух,ДатаПодписиРук,ДатаПодписиБух");
					
					РеквизитыРаздел3.ТипПрод_3 = СтрокаУчастникиСделки.ТипПрод_Пр;
					РеквизитыРаздел3.ТипПок_3  = СтрокаУчастникиСделки.ТипПок_Пр;
					
					РеквизитыРаздел3.ТипПродавца   = СтрокаУчастникиСделки.ТипПродавца;
					РеквизитыРаздел3.ТипПокупателя = СтрокаУчастникиСделки.ТипПокупателя;
										
					РеквизитыРаздел3.ПродавецБайконур   = СтрокаУчастникиСделки.ПродавецБайконур;
					РеквизитыРаздел3.ПокупательБайконур = СтрокаУчастникиСделки.ПокупательБайконур;
					
					Если СведенияОПродавце.СтранаРегистрации = Справочники.СтраныМира.Россия Тогда
						РеквизитыРаздел3.ПродавецИНН_КПП = СведенияОПродавце.ИНН 
							+ ?(СтрокаШапки.Дата >= '20150101' ИЛИ СведенияОПродавце.КПП = "", "", "/" + СведенияОПродавце.КПП);
					Иначе
						РеквизитыРаздел3.ПродавецИНН_КПП = СведенияОПродавце.НалоговыйНомерВСтранеРегистрации;
					КонецЕсли;
					РеквизитыРаздел3.ПродавецНаимОрг     = СведенияОПродавце.ПолноеНаименование;
					РеквизитыРаздел3.КодСтраныПродавец   = СтрокаУчастникиСделки.КодСтраныПродавец; 
					РеквизитыРаздел3.ПродавецМестоНахожд = СформироватьПредставлениеМестонахожденияКонтрагента(
						СтрокаУчастникиСделки.КодСтраныПродавец, СведенияОПродавце.ЮридическийАдрес);
						
					СведенияОПокупателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(
						СтрокаУчастникиСделки.Покупатель, РеквизитыРаздел1.Дата);
						
					Если СведенияОПокупателе.СтранаРегистрации = Справочники.СтраныМира.Россия Тогда
						РеквизитыРаздел3.ПокупательИНН_КПП = СведенияОПокупателе.ИНН 
							+ ?(СтрокаШапки.Дата >= '20150101' ИЛИ СведенияОПокупателе.КПП = "", "", "/" + СведенияОПокупателе.КПП);
					Иначе
						РеквизитыРаздел3.ПокупательИНН_КПП = СведенияОПокупателе.НалоговыйНомерВСтранеРегистрации;
					КонецЕсли;
					
					РеквизитыРаздел3.ПокупательНаимОрг     = СведенияОПокупателе.ПолноеНаименование;
					РеквизитыРаздел3.КодСтраныПокупатель   = СтрокаУчастникиСделки.КодСтраныПокупатель;
					РеквизитыРаздел3.ПокупательМестоНахожд = СформироватьПредставлениеМестонахожденияКонтрагента(
						СтрокаУчастникиСделки.КодСтраныПокупатель, СведенияОПокупателе.ЮридическийАдрес);
					
					РеквизитыРаздел3.НомерДог          = СтрокаУчастникиСделки.НомерДог;
					РеквизитыРаздел3.ДатаДог           = СтрокаУчастникиСделки.ДатаДог;
					РеквизитыРаздел3.НомерСпецификации = СтрокаУчастникиСделки.НомерСпецификации;
					РеквизитыРаздел3.ДатаСпецификации  = СтрокаУчастникиСделки.ДатаСпецификации;
					
					РеквизитыРаздел3.ПродавецАдрес   = АдресПродавца;
					РеквизитыРаздел3.ПокупательАдрес = ПолучитьАдресВВидеСоответствия(
						СтрокаУчастникиСделки.Покупатель, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, СтрокаШапки.Дата);
					
					ТЗСпецификацииРаздел3 = ТаблицаСпецификацииДляВыгрузки;
					
				Иначе
					РеквизитыРаздел1.СтрВсего = 2;
				КонецЕсли; 
			КонецЕсли;
		Иначе
			РеквизитыРаздел1.СтрВсего = 2;
		КонецЕсли;
		
		
		// Сведения о контрагенте
		
		СведенияОКонтрагенте = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(СтрокаШапки.Контрагент, СтрокаШапки.Дата);
		МестонахождениеКонтрагента = СформироватьПредставлениеМестонахожденияКонтрагента(
			СтрокаШапки.КодСтраныПродавец, 
			ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКонтрагенте, "ЮридическийАдрес,"));
		Если СведенияОКонтрагенте.СтранаРегистрации = Справочники.СтраныМира.Россия Тогда
			ИНН_КППКонтрагента = СведенияОКонтрагенте.ИНН
				+ ?(СтрокаШапки.Дата >= '20150101' ИЛИ СведенияОКонтрагенте.КПП = "", "", "/" + СведенияОКонтрагенте.КПП);
		Иначе
			ИНН_КППКонтрагента = СведенияОКонтрагенте.НалоговыйНомерВСтранеРегистрации;
		КонецЕсли;
		
		ТаблицаСпецификацииДляВыгрузкиВременная = ТаблицаСпецификацииДляВыгрузки.СкопироватьКолонки();
		
		Пока ТаблицаСпецификацииКонтрагента.НайтиСледующий(СтруктураПоиска) Цикл
			НомераСпецификаций = НомераСпецификаций + ?(НомераСпецификаций = "", "", ", ") + ТаблицаСпецификацииКонтрагента.Номер;
			ДатыСпецификаций   = ДатыСпецификаций + ?(ДатыСпецификаций = "", "", ", ") + Формат(ТаблицаСпецификацииКонтрагента.Дата, "ДЛФ=D");
			НоваяСтрокаСпецификаций = ТаблицаСпецификацииДляВыгрузкиВременная.Добавить();
			НоваяСтрокаСпецификаций.Дата = Формат(ТаблицаСпецификацииКонтрагента.Дата, "ДЛФ=D");
			НоваяСтрокаСпецификаций.Номер = ТаблицаСпецификацииКонтрагента.Номер;
		КонецЦикла;
			
		Если СтрокаУчастникиСделки <> Неопределено Тогда
			
			// Контрагент не является продавцом, сведения о нем указываем в строках 06, 07 Заявления.
			
			РеквизитыРаздел1.КодСтраныОрг1        = СтрокаШапки.КодСтраныПродавец;
			РеквизитыРаздел1.НаимОрг_1            = СведенияОКонтрагенте.НаименованиеДляПечатныхФорм;
			РеквизитыРаздел1.ИННОрг_1             = ИНН_КППКонтрагента;
			РеквизитыРаздел1.МестоНахождОрг_1     = МестонахождениеКонтрагента;
			РеквизитыРаздел1.НомКонтр_2           = СтрокаШапки.НомерДог;
			РеквизитыРаздел1.ДатаКонтр_2          = СтрокаШапки.ДатаДог;
			РеквизитыРаздел1.НомерСпецификации_07 = НомераСпецификаций;
			РеквизитыРаздел1.ДатаСпецификации_07  = ДатыСпецификаций;
			
			РеквизитыРаздел1.РеквизитыПосредник = СведенияОКонтрагенте.ПолноеНаименование + ", " + МестонахождениеКонтрагента;
			РеквизитыРаздел1.КомиссионерАдрес   = ПолучитьАдресВВидеСоответствия(
				СтрокаШапки.Контрагент, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, СтрокаШапки.Дата);

			ТЗСпецификации07 = ТаблицаСпецификацииДляВыгрузкиВременная;
			
		Иначе
			
			// Контрагент является продавцом, сведения о нем указываем в строках 01, 03 Заявления.
			
			РеквизитыРаздел1.ПродавецМестоНахожд = МестонахождениеКонтрагента;
			РеквизитыРаздел1.ПродавецИНН_КПП     = ИНН_КППКонтрагента;
			РеквизитыРаздел1.ПродавецНаимОрг     = СведенияОКонтрагенте.НаименованиеДляПечатныхФорм;
			РеквизитыРаздел1.НомерСпецификации   = НомераСпецификаций;
			РеквизитыРаздел1.ДатаСпецификации    = ДатыСпецификаций;
			РеквизитыРаздел1.ПродавецАдрес       = ПолучитьАдресВВидеСоответствия(
				СтрокаШапки.Контрагент, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, СтрокаШапки.Дата);

			ТаблицаСпецификацииДляВыгрузки = ТаблицаСпецификацииДляВыгрузкиВременная;
			
		КонецЕсли;
		
		// Вывод на печать
		
		ШапкаРаздел1 = Макет.ПолучитьОбласть("Шапка");
		ШапкаРаздел1.Параметры.Заполнить(РеквизитыРаздел1);
		
		Если РеквизитыРаздел1.ПрДавСырья Тогда 
			ШапкаРаздел1.Области.ПрДавСырья.Текст = "Х";
		КонецЕсли;
		Если РеквизитыРаздел1.ПрЛизинг Тогда 
			ШапкаРаздел1.Области.ПрЛизинг.Текст = "Х";
		КонецЕсли;
		
		ТабДокумент.Вывести(ШапкаРаздел1);
		
		// Товары
		
		ТекущийНомерСтраницы = 1;
		ЗаголовокТаблицыТоваров = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ЗаголовокТаблицыТоваров.Параметры.НомерСтраницы = ТекущийНомерСтраницы;
		ТабДокумент.Вывести(ЗаголовокТаблицыТоваров);
		
		ТаблицаТоварыРаздел1 = ТаблицаТовары.СкопироватьКолонки(); // Таблица для выгрузки
		
		ТТД.Очистить();
		
		МногострочнаяЧасть = Макет.ПолучитьОбласть("ТаблицаТовары");
		ПодвалТаблицаТовары = Макет.ПолучитьОбласть("ПодвалТаблицаТовары");
		
		МассивОбластейДляПроверкиВывода = Новый Массив;
		
		НайденныеСтрокиТовары = ТаблицаТовары.НайтиСтроки(СтруктураПоиска);
		
		БазоваяВалюта = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(СтрокаШапки.Организация);
		
		Если НайденныеСтрокиТовары.Количество() > 0 Тогда
			
			Для каждого СтрокаТоваров Из НайденныеСтрокиТовары Цикл
				
				НоваяСтрокаТоваровДляВыгрузки = ТаблицаТоварыРаздел1.Добавить();
				
				СтруктураКурса = РаботаСКурсамиВалютУТ.ПолучитьКурсВалюты(СтрокаТоваров.Валюта, СтрокаТоваров.ДатаПринятияНаУчет, БазоваяВалюта);
			
				СтрокаТоваров.П000010000108 = СтруктураКурса.КурсЧислитель;
				СтрокаТоваров.П000010000125 = СтруктураКурса.КурсЗнаменатель;
				СтрокаТоваров.П000010000110 = Формат(СтрокаТоваров.ДатаТСД, "ДФ=dd.MM.yyyy");
				СтрокаТоваров.П000010000112 = Формат(СтрокаТоваров.ДатаСчетаФактуры, "ДФ=dd.MM.yyyy");
				СтрокаТоваров.П000010000113 = Формат(СтрокаТоваров.ДатаПринятияНаУчет, "ДФ=dd.MM.yyyy");
				
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТоваровДляВыгрузки, СтрокаТоваров);
				
				НоваяСтрокаДокументы = ТТД.Добавить();
				НоваяСтрокаДокументы.Номер = СтрокаТоваров.П000010000109;
				НоваяСтрокаДокументы.Дата = СтрокаТоваров.П000010000110;
				
				МногострочнаяЧасть.Параметры.Заполнить(СтрокаТоваров);
				
				Если Не СтрокаШапки.ИспользоватьАкцизы Тогда
					МногострочнаяЧасть.Параметры.П000010000114 = "--";
					МногострочнаяЧасть.Параметры.П000010000116 = "--";
					МногострочнаяЧасть.Параметры.П000010000117 = "--";
					МногострочнаяЧасть.Параметры.П000010000119 = "--";
				КонецЕсли;
				
				МассивОбластейДляПроверкиВывода.Очистить();
				МассивОбластейДляПроверкиВывода.Добавить(МногострочнаяЧасть);
				МассивОбластейДляПроверкиВывода.Добавить(ПодвалТаблицаТовары);
				Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(
						ТабДокумент, МассивОбластейДляПроверкиВывода) Тогда
					
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ТекущийНомерСтраницы = ТекущийНомерСтраницы + 1;
					ЗаголовокТаблицыТоваров.Параметры.НомерСтраницы = ТекущийНомерСтраницы;
					ТабДокумент.Вывести(ЗаголовокТаблицыТоваров);
				КонецЕсли;
				
				ТабДокумент.Вывести(МногострочнаяЧасть);
				
			КонецЦикла;
		КонецЕсли;
		
		РеквизитыРаздел1.Вставить("П000010000114", ТаблицаТоварыРаздел1.Итог("П000010000114"));
		РеквизитыРаздел1.Вставить("П000010000115", ТаблицаТоварыРаздел1.Итог("П000010000115"));
		
		// Итоговые суммы налогов подлежат округлению до целых рублей
		РеквизитыРаздел1.Вставить("П000010000119", Окр(ТаблицаТоварыРаздел1.Итог("П000010000119")));
		РеквизитыРаздел1.Вставить("П000010000120", Окр(ТаблицаТоварыРаздел1.Итог("П000010000120")));
		
		ПодвалТаблицаТовары.Параметры.П000010000114 = РеквизитыРаздел1.П000010000114;
		ПодвалТаблицаТовары.Параметры.П000010000115 = РеквизитыРаздел1.П000010000115;
		ПодвалТаблицаТовары.Параметры.П000010000119 = РеквизитыРаздел1.П000010000119;
		ПодвалТаблицаТовары.Параметры.П000010000120 = РеквизитыРаздел1.П000010000120;
		
		ТабДокумент.Вывести(ПодвалТаблицаТовары);
		
		Подвал = Макет.ПолучитьОбласть("Подвал");
		Подвал.Параметры.Заполнить(РеквизитыРаздел1);
		МассивОбластейДляПроверкиВывода.Очистить();
		МассивОбластейДляПроверкиВывода.Добавить(Подвал);
		Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(
						ТабДокумент, МассивОбластейДляПроверкиВывода) Тогда
			
			ТабДокумент.ВывестиВертикальныйРазделительСтраниц();
			ТекущийНомерСтраницы = ТекущийНомерСтраницы + 1;
		КонецЕсли;

		ТабДокумент.Вывести(Подвал);
		
		// Раздел 2
		
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		ЗаполнитьЗначенияСвойств(РеквизитыРаздел2, РеквизитыРаздел1, "НомерЗаяв,Число,Месяц,Год,СтрВсего");
		
		ТекущийНомерСтраницы = ТекущийНомерСтраницы + 1;
		РеквизитыРаздел2.Стр = ТекущийНомерСтраницы;
			
		ОсновнаяЧасть = Макет.ПолучитьОбласть("Раздел2");
		ОсновнаяЧасть.Параметры.Заполнить(РеквизитыРаздел2);
		ТабДокумент.Вывести(ОсновнаяЧасть);
		
		// Раздел 3
		
		Если ПечататьРаздел3 Тогда
		
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
			ТекущийНомерСтраницы = ТекущийНомерСтраницы + 1;
			РеквизитыРаздел3.Стр = ТекущийНомерСтраницы;
			
			ОсновнаяЧасть = Макет.ПолучитьОбласть("Раздел3");
			ОсновнаяЧасть.Параметры.Заполнить(РеквизитыРаздел3);
			ТабДокумент.Вывести(ОсновнаяЧасть);
		
		КонецЕсли; 
		
		// Приложение
		
		ТаблицаДляВыгрузкиПриложение = ТаблицаУчастникиСделки.СкопироватьКолонки(); // Таблица для выгрузки
		ТаблицаДляВыгрузкиПриложение.Колонки.Добавить("ПродавецАдрес");
		ТаблицаДляВыгрузкиПриложение.Колонки.Добавить("ПокупательАдрес");
		
		Если НайденныеСтрокиУчастникиСделки.Количество() > 1 Тогда
			
			ОсновнаяЧасть = Макет.ПолучитьОбласть("Приложение");
			
			Для каждого СтрокаУчастникиСделки Из НайденныеСтрокиУчастникиСделки Цикл
				
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
				СведенияОПродавце   = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(
					СтрокаУчастникиСделки.Продавец, РеквизитыРаздел1.Дата);
				СведенияОПокупателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(
					СтрокаУчастникиСделки.Покупатель, РеквизитыРаздел1.Дата);
				
				Если СведенияОПродавце.СтранаРегистрации = Справочники.СтраныМира.Россия Тогда
					СтрокаУчастникиСделки.ПродавецИНН_КПП = СведенияОПродавце.ИНН 
						+ ?(СтрокаШапки.Дата >= '20150101' ИЛИ СведенияОПродавце.КПП = "", "", "/" + СведенияОПродавце.КПП);
				Иначе
					СтрокаУчастникиСделки.ПродавецИНН_КПП = СведенияОПродавце.НалоговыйНомерВСтранеРегистрации;
				КонецЕсли;
				СтрокаУчастникиСделки.ПродавецНаимОрг     = СведенияОПродавце.ПолноеНаименование;
				СтрокаУчастникиСделки.ПродавецМестоНахожд = СформироватьПредставлениеМестонахожденияКонтрагента(
					СтрокаУчастникиСделки.КодСтраныПродавец, СведенияОПродавце.ЮридическийАдрес);
				
				Если СведенияОПокупателе.СтранаРегистрации = Справочники.СтраныМира.Россия Тогда
					СтрокаУчастникиСделки.ПокупательИНН_КПП = СведенияОПокупателе.ИНН 
						+ ?(СтрокаШапки.Дата >= '20150101' ИЛИ СведенияОПокупателе.КПП = "", "", "/" + СведенияОПокупателе.КПП);
				Иначе
					СтрокаУчастникиСделки.ПокупательИНН_КПП = СведенияОПокупателе.НалоговыйНомерВСтранеРегистрации;
				КонецЕсли;
				
				СтрокаУчастникиСделки.ПокупательНаимОрг     = СведенияОПокупателе.ПолноеНаименование;
				СтрокаУчастникиСделки.ПокупательМестоНахожд = СформироватьПредставлениеМестонахожденияКонтрагента(
					СтрокаУчастникиСделки.КодСтраныПокупатель, СведенияОПокупателе.ЮридическийАдрес);
				
				ЗаполнитьЗначенияСвойств(СтрокаУчастникиСделки, РеквизитыРаздел1, "НомерЗаяв,Число,Месяц,Год");
				
				Если ЗначениеЗаполнено(СтрокаУчастникиСделки.НомерСпецификации)
					И ЗначениеЗаполнено(СтрокаУчастникиСделки.ДатаСпецификации) Тогда
					СтрокаСпецификацииПриложение = ТаблСпецификацииПриложение.Добавить();
					СтрокаСпецификацииПриложение.Номер = СтрокаУчастникиСделки.НомерСпецификации;
					СтрокаСпецификацииПриложение.Дата  =  СтрокаУчастникиСделки.ДатаСпецификации;
	 			КонецЕсли;
				
				СтрокаВыгрузки = ТаблицаДляВыгрузкиПриложение.Добавить();
				
				ЗаполнитьЗначенияСвойств(СтрокаВыгрузки, СтрокаУчастникиСделки);
				
				// Адрес продавца в Приложении для выгрузки
				СтрокаВыгрузки.ПродавецАдрес = ПолучитьАдресВВидеСоответствия(
					СтрокаУчастникиСделки.Продавец, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, СтрокаШапки.Дата);
				
				// Адрес покупателя в Приложении для выгрузки
				СтрокаВыгрузки.ПокупательАдрес = ПолучитьАдресВВидеСоответствия(
					СтрокаУчастникиСделки.Покупатель, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, СтрокаШапки.Дата);
				
				ОсновнаяЧасть.Параметры.Заполнить(СтрокаВыгрузки);
				ТабДокумент.Вывести(ОсновнаяЧасть);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаВыпискиБанка = Новый ТаблицаЗначений;
	ТаблицаСведенияОЗачете = Новый ТаблицаЗначений;
	
	Если ТаблицаТоварыРаздел1 <> Неопределено Тогда
		ТаблицаТоварыРаздел1.Колонки.Удалить("ДокументСсылка");
		ТаблицаТоварыРаздел1.Колонки.Удалить("ДатаТСД");
		ТаблицаТоварыРаздел1.Колонки.Удалить("ДатаСчетаФактуры");
		ТаблицаТоварыРаздел1.Колонки.Удалить("ДатаПринятияНаУчет");
		
		ТаблицаТоварыРаздел1.Колонки.Удалить("П000010000104");
		ТаблицаТоварыРаздел1.Колонки.ЕдиницаИзмеренияКод.Имя = "П000010000104";
	КонецЕсли;
	
	Если ТаблицаДляВыгрузкиПриложение <> Неопределено Тогда
		ТаблицаДляВыгрузкиПриложение.Колонки.Удалить("ДокументСсылка");
		ТаблицаДляВыгрузкиПриложение.Колонки.Удалить("Покупатель");
		ТаблицаДляВыгрузкиПриложение.Колонки.Удалить("Продавец");
		ТаблицаДляВыгрузкиПриложение.Колонки.Удалить("ТипПродавца");
		ТаблицаДляВыгрузкиПриложение.Колонки.Удалить("ТипПокупателя");
	КонецЕсли;
	
	КоличествоСтраниц = ТабДокумент.КоличествоСтраниц();
	ОбластьКоличествоСтраниц = ТабДокумент.НайтиТекст("СтрВсего");
	Пока ОбластьКоличествоСтраниц <> Неопределено Цикл
		ОбластьКоличествоСтраниц.Текст = КоличествоСтраниц;
		ОбластьКоличествоСтраниц = ТабДокумент.НайтиТекст("СтрВсего", ОбластьКоличествоСтраниц)
	КонецЦикла;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("РеквизитыРаздел1",		 РеквизитыРаздел1);
	СтруктураВозврата.Вставить("ТаблицаРаздел1",		 ТаблицаТоварыРаздел1);
	СтруктураВозврата.Вставить("РеквизитыРаздел2",		 РеквизитыРаздел2);
	СтруктураВозврата.Вставить("РеквизитыРаздел3",		 РеквизитыРаздел3);
	СтруктураВозврата.Вставить("ТаблицаПриложение",		 ТаблицаДляВыгрузкиПриложение);
	СтруктураВозврата.Вставить("ТЗСпецификации",		 ТаблицаСпецификацииДляВыгрузки);
	СтруктураВозврата.Вставить("ТЗСпецификации07",		 ТЗСпецификации07);
	СтруктураВозврата.Вставить("ТЗСпецификацииРаздел3",  ТЗСпецификацииРаздел3);
	СтруктураВозврата.Вставить("ТаблСпецПрил3",			 ТаблСпецификацииПриложение);
	СтруктураВозврата.Вставить("ТТД",					 ТТД);
	СтруктураВозврата.Вставить("ТаблицаВыпискиБанка", 	 ТаблицаВыпискиБанка);
	СтруктураВозврата.Вставить("ТаблицаСведенияОЗачете", ТаблицаСведенияОЗачете);
	СтруктураВозврата.Вставить("ТабДокумент",			 ТабДокумент);
	
	Возврат СтруктураВозврата;
		
КонецФункции

Функция ПолучитьАдресВВидеСоответствия(СсылкаНаОбъект, ВидКонтактнойИнформации, Дата = '00010101')
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(СсылкаНаОбъект);
	КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(
		МассивОбъектов,
		,
		ВидКонтактнойИнформации,
		Дата);
	
	ЗначениеКонтактнойИнформации = "";
	ПредставлениеКонтактнойИнформации = "";
	ЗначениеJSON = "";
	
	Если КонтактнаяИнформация.Количество() > 0 Тогда
		ЗначениеКонтактнойИнформации = КонтактнаяИнформация[0].ЗначенияПолей;
		ПредставлениеКонтактнойИнформации = КонтактнаяИнформация[0].Представление;
		ЗначениеJSON = КонтактнаяИнформация[0].Значение;
	КонецЕсли;
	
	РоссийскийАдрес = ПустойРоссийскийАдрес();
	
	Если СтрНайти(ЗначениеКонтактнойИнформации, "АдресРФ") > 0 Тогда
		СформироватьАдрес(ЗначениеКонтактнойИнформации, РоссийскийАдрес);
	Иначе
		СформироватьАдресИзСтрокиВФорматеДевятьЗапятых(ЗначениеJSON, ПредставлениеКонтактнойИнформации, РоссийскийАдрес);
	КонецЕсли;
	
	ЗаполнитьНаселенныйПунктВРоссийскомАдресе(РоссийскийАдрес);
	
	Возврат РоссийскийАдрес;

КонецФункции

Функция ПустойРоссийскийАдрес()

	РоссийскийАдрес = Новый Соответствие;
	
	РоссийскийАдрес.Вставить("Индекс",	        );
	РоссийскийАдрес.Вставить("Регион",          );
	РоссийскийАдрес.Вставить("КодРегиона",      );
	РоссийскийАдрес.Вставить("Район",           );
	РоссийскийАдрес.Вставить("Город",           );
	РоссийскийАдрес.Вставить("НаселенныйПункт", );
	РоссийскийАдрес.Вставить("Улица",           );
	РоссийскийАдрес.Вставить("Дом",             );
	РоссийскийАдрес.Вставить("Корпус",          );
	РоссийскийАдрес.Вставить("Квартира",        );
	
	Возврат РоссийскийАдрес;

КонецФункции

Процедура СформироватьАдрес(КонтактнаяИнформация, РоссийскийАдрес)
	
	СтруктураАдресаЗаписи = РаботаСАдресами.СведенияОбАдресе(КонтактнаяИнформация);
	
	СокращенияОбъектовАдресацииАдресаРФ = РаботаСАдресами.СокращенияОбъектовАдресацииАдресаРФ();
	
	Корпуса = "";
	ПредставлениеКорпуса = "";
	
	Если СтруктураАдресаЗаписи.Свойство("Корпуса", Корпуса) Тогда
		
		Для Индекс = 0 По Корпуса.Количество() - 1 Цикл
			
			Корпус = Корпуса[Индекс];
			
			ПредставлениеКорпуса = ПредставлениеКорпуса
			+ СокрЛП(?(Корпус.Свойство("ТипКорпуса") И Индекс > 0,
			НРег(СокращенияОбъектовАдресацииАдресаРФ[НРег(Корпус.ТипКорпуса)]), ""))
			+ " "
			+ СокрЛП(?(Корпус.Свойство("Номер"), Корпус.Номер, ""))
			+ " ";
			
		КонецЦикла;
		
	КонецЕсли;	
	
	СтруктураАдресаЗаписи.Вставить("Корпус", СокрЛП(ПредставлениеКорпуса));
	
	Помещения = "";
	ПредставлениеПомещения = "";
	
	Если СтруктураАдресаЗаписи.Свойство("Помещения", Помещения) Тогда
		
		Для Индекс = 0 По Помещения.Количество() - 1 Цикл
			
			Помещение = Помещения[Индекс];
			
			ПредставлениеПомещения = ПредставлениеПомещения
			+ СокрЛП(?(Помещение.Свойство("ТипПомещения") И Индекс > 0,
			НРег(СокращенияОбъектовАдресацииАдресаРФ[НРег(Помещение.ТипПомещения)]), ""))
			+ " "
			+ СокрЛП(?(Помещение.Свойство("Номер"), Помещение.Номер, ""))
			+ " ";
			
		КонецЦикла;
		
	КонецЕсли;
	
	СтруктураАдресаЗаписи.Вставить("Квартира", СокрЛП(ПредставлениеПомещения));
	
	СтруктураАдресаЗаписи.Вставить("Дом",
		?(СтруктураАдресаЗаписи.Свойство("Здание")
		И СтруктураАдресаЗаписи.Здание.Свойство("Номер"), 
		СокрЛП(СтруктураАдресаЗаписи.Здание.Номер), ""));
	
	СтруктураАдресаЗаписи.Вставить("ТипДома",
		?(СтруктураАдресаЗаписи.Свойство("Здание")
		И СтруктураАдресаЗаписи.Здание.Свойство("ТипЗдания"), 
		СокрЛП(СтруктураАдресаЗаписи.Здание.ТипЗдания), "Дом"));
	
	СтруктураАдресаЗаписи.Вставить("ТипКорпуса",
		?(СтруктураАдресаЗаписи.Свойство("Корпуса")
		И СтруктураАдресаЗаписи.Корпуса.Количество() > 0
		И СтруктураАдресаЗаписи.Корпуса[0].Свойство("ТипКорпуса"), 
		СокрЛП(СтруктураАдресаЗаписи.Корпуса[0].ТипКорпуса),
		"Корпус"));	  
	
	СтруктураАдресаЗаписи.Вставить("ТипКвартиры",
		?(СтруктураАдресаЗаписи.Свойство("Помещения")
		И СтруктураАдресаЗаписи.Помещения.Количество() > 0
		И СтруктураАдресаЗаписи.Помещения[0].Свойство("ТипПомещения"), 
		СокрЛП(СтруктураАдресаЗаписи.Помещения[0].ТипПомещения),
		"Квартира"));	  
	      	
	Для Каждого Элемент Из РоссийскийАдрес Цикл
		
		РоссийскийАдрес[Элемент.Ключ] = "";
		
	КонецЦикла;
	
	Для Каждого ЗаписьАдреса Из СтруктураАдресаЗаписи Цикл
		
		ПредставлениеСтр = СокрЛП(ЗаписьАдреса.Ключ);
		ЗначениеСтр		 = СокрЛП(ЗаписьАдреса.Значение);
		
		Если ТипЗнч(РоссийскийАдрес) = Тип("Соответствие")
			И ЗначениеЗаполнено(ПредставлениеСтр)
			И НЕ РоссийскийАдрес.Получить(ПредставлениеСтр) = Неопределено Тогда
			
			ПредставлениеСтрСокращение = "";
			
			Если СтруктураАдресаЗаписи.Свойство(ПредставлениеСтр + "Сокращение", ПредставлениеСтрСокращение) Тогда
				
				ЗначениеСтр = ЗначениеСтр + " " + СокрЛП(ПредставлениеСтрСокращение);
				
			КонецЕсли;	
			
			РоссийскийАдрес[ПредставлениеСтр] = СокрЛП(ЗначениеСтр);
			          			
			Если ПредставлениеСтр = "НаселенныйПункт"
			   И СтруктураАдресаЗаписи.Свойство("Территория")
			   И ЗначениеЗаполнено(СтруктураАдресаЗаписи.Территория) Тогда
				
				РоссийскийАдрес[ПредставлениеСтр]
					= СокрЛП(РоссийскийАдрес[ПредставлениеСтр]
					+ " " + СокрЛП(СтруктураАдресаЗаписи.Территория)
					+ " " + СокрЛП(СтруктураАдресаЗаписи.ТерриторияСокращение));
				
			КонецЕсли;	
			
		ИначеЕсли ТипЗнч(РоссийскийАдрес) = Тип("Структура")
			И ЗначениеЗаполнено(ПредставлениеСтр)
			И РоссийскийАдрес.Свойство(ПредставлениеСтр) Тогда
			
			ПредставлениеСтрСокращение = "";
			
			Если СтруктураАдресаЗаписи.Свойство(ПредставлениеСтр + "Сокращение", ПредставлениеСтрСокращение) Тогда
				
				ЗначениеСтр = ЗначениеСтр + " " + СокрЛП(ПредставлениеСтрСокращение);
				
			КонецЕсли;	
			            			
			РоссийскийАдрес[ПредставлениеСтр] = СокрЛП(ЗначениеСтр);
			
			Если ПредставлениеСтр = "НаселенныйПункт"
			   И СтруктураАдресаЗаписи.Свойство("Территория")
			   И ЗначениеЗаполнено(СтруктураАдресаЗаписи.Территория) Тогда
				
				РоссийскийАдрес[ПредставлениеСтр]
					= СокрЛП(РоссийскийАдрес[ПредставлениеСтр]
					+ " " + СокрЛП(СтруктураАдресаЗаписи.ТерриторияСокращение)
					+ " " + СокрЛП(СтруктураАдресаЗаписи.Территория));
				
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьНаселенныйПунктВРоссийскомАдресе(РоссийскийАдрес)

	Если ТипЗнч(РоссийскийАдрес) = Тип("Соответствие") Тогда
		
		Город           = РоссийскийАдрес.Получить("Город");
		НаселенныйПункт = РоссийскийАдрес.Получить("НаселенныйПункт");
		Регион          = РоссийскийАдрес.Получить("Регион");
		
		Если НЕ ПустаяСтрока(Город) Тогда
			
			НаселенныйПункт = Город + ?(НЕ ПустаяСтрока(НаселенныйПункт), ", " + НаселенныйПункт, "");
			РоссийскийАдрес.Вставить("НаселенныйПункт", НаселенныйПункт);
			
		ИначеЕсли НЕ ПустаяСтрока(Регион) И ПустаяСтрока(НаселенныйПункт) Тогда
			
			РоссийскийАдрес.Вставить("НаселенныйПункт", Регион);
		
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры

Процедура СформироватьАдресИзСтрокиВФорматеДевятьЗапятых(ЗначениеКонтактнойИнформации, ПредставлениеКонтактнойИнформации, РоссийскийАдрес)
	
	Для Каждого Элемент Из РоссийскийАдрес Цикл
		РоссийскийАдрес[Элемент.Ключ] = "";
	КонецЦикла;

	Если ПредставлениеКонтактнойИнформации = "" Тогда
		Возврат;
	КонецЕсли;
	
	КоординатыПервойЗапятой = СтрНайти(ПредставлениеКонтактнойИнформации, ",");
	
	Если КоординатыПервойЗапятой > 0 Тогда
		Если СтрЧислоВхождений(ПредставлениеКонтактнойИнформации, ",") = 10 Тогда
			// Для иностранного адреса представление может содержать наименование страны
			ПредставлениеКонтактнойИнформации = СокрЛП(Сред(ПредставлениеКонтактнойИнформации, КоординатыПервойЗапятой + 1));
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если СтрЧислоВхождений(ПредставлениеКонтактнойИнформации, ",") <> 9 Тогда 
		
		ПредставлениеКонтактнойИнформации = РаботаСАдресами.СведенияОбАдресе(ЗначениеКонтактнойИнформации);
		
		РоссийскийАдрес.Вставить("Индекс",          ПредставлениеКонтактнойИнформации.Индекс);
		РоссийскийАдрес.Вставить("Регион",          ПредставлениеКонтактнойИнформации.Регион);
		РоссийскийАдрес.Вставить("Район",           ПредставлениеКонтактнойИнформации.Район);
		РоссийскийАдрес.Вставить("Город",           ПредставлениеКонтактнойИнформации.Город);
		РоссийскийАдрес.Вставить("НаселенныйПункт", ПредставлениеКонтактнойИнформации.НаселенныйПункт);
		РоссийскийАдрес.Вставить("Улица",           ПредставлениеКонтактнойИнформации.Улица);
		
		РоссийскийАдрес.Вставить("Дом",
			?(ЗначениеЗаполнено(ПредставлениеКонтактнойИнформации.Здание.Номер), 
			ПредставлениеКонтактнойИнформации.Здание.Номер, ""));
			
		Если ПредставлениеКонтактнойИнформации.Корпуса.Количество() <> 0
			И ЗначениеЗаполнено(ПредставлениеКонтактнойИнформации.Корпуса[0].Номер) Тогда
			РоссийскийАдрес.Вставить("Корпус", ПредставлениеКонтактнойИнформации.Корпуса[0].Номер);
		КонецЕсли;
		
		Если ПредставлениеКонтактнойИнформации.Помещения.Количество() <> 0
			И ЗначениеЗаполнено(ПредставлениеКонтактнойИнформации.Помещения[0].Номер) Тогда
			РоссийскийАдрес.Вставить("Квартира", ПредставлениеКонтактнойИнформации.Помещения[0].Номер);
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	РоссийскийАдрес = АдресВФормате9ЗапятыхВСтруктуруПорталаТС(ПредставлениеКонтактнойИнформации);
	
КонецПроцедуры

Функция ПолучитьНазваниеРегионаПоКоду(КодРегиона)
    	
	Если НЕ ЗначениеЗаполнено(КодРегиона) Тогда
		Возврат "";
	КонецЕсли;

	Попытка
		ЧисловойКодРегиона = Число(КодРегиона);
	Исключение
		Возврат "";
	КонецПопытки;
	
	Возврат АдресныйКлассификатор.НаименованиеРегионаПоКоду(ЧисловойКодРегиона);

КонецФункции

Функция АдресВФормате9ЗапятыхВСтруктуруПорталаТС(АдресВФормате9Запятых)
	 
	КопияАдреса = АдресВФормате9Запятых;
	
	ПоследняяКоордината = 0;
	СоставляющиеАдреса = Новый Массив;
	КоординатыЗапятых = Новый Массив;
	Для Сч = 1 По 12 Цикл
		КоординатаЗапятой = СтрНайти(КопияАдреса, ",");
		Если КоординатаЗапятой > 0 Тогда
			КоординатыЗапятых.Добавить(ПоследняяКоордината + КоординатаЗапятой);
			ПоследняяКоордината = ПоследняяКоордината + КоординатаЗапятой;
			КопияАдреса = Сред(КопияАдреса, КоординатаЗапятой + 1);
		Иначе
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	
	КоличествоЗапятых = КоординатыЗапятых.Количество();

	СоставляющиеАдреса.Добавить(СокрЛП(Лев(АдресВФормате9Запятых, КоординатыЗапятых[0] - 1)));
	Для Сч = 0 По КоличествоЗапятых - 2 Цикл
		СоставляющиеАдреса.Добавить(СокрЛП(Сред(АдресВФормате9Запятых, КоординатыЗапятых[Сч] + 1, КоординатыЗапятых[Сч + 1] - (КоординатыЗапятых[Сч] + 1))));
	КонецЦикла;
	СоставляющиеАдреса.Добавить(СокрЛП(Сред(АдресВФормате9Запятых, КоординатыЗапятых[КоличествоЗапятых - 1] + 1)));
	
	Регион = "";
	
	Если СокрЛП(СоставляющиеАдреса[2]) <> "" Тогда
		Регион = СокрЛП(СоставляющиеАдреса[2]);
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Регион) Тогда
			Регион = ПолучитьНазваниеРегионаПоКоду(Регион);
		КонецЕсли;
	КонецЕсли;
	
	РоссийскийАдрес = Новый Соответствие;
	
	РоссийскийАдрес.Вставить("Индекс",			СоставляющиеАдреса[1]);
	РоссийскийАдрес.Вставить("Регион",          Регион);
	РоссийскийАдрес.Вставить("КодРегиона",      СоставляющиеАдреса[2]);
	РоссийскийАдрес.Вставить("Район",           СоставляющиеАдреса[3]);
	РоссийскийАдрес.Вставить("Город",           СоставляющиеАдреса[4]);
	РоссийскийАдрес.Вставить("НаселенныйПункт", СоставляющиеАдреса[5]);
	РоссийскийАдрес.Вставить("Улица",           СоставляющиеАдреса[6]);
	РоссийскийАдрес.Вставить("Дом",             СоставляющиеАдреса[7]);
	РоссийскийАдрес.Вставить("Корпус",          СоставляющиеАдреса[8]);
	РоссийскийАдрес.Вставить("Квартира",        СоставляющиеАдреса[9]);
	
	Возврат РоссийскийАдрес;
	
КонецФункции

Функция СформироватьПредставлениеМестонахожденияКонтрагента(КодСтраны, ПредставлениеКонтактнойИнформации)
	
	Если КодСтраны = "643" Тогда
		ПредставлениеМестонахождения = КодСтраны + ", " + ПредставлениеКонтактнойИнформации;
	Иначе
		Страна = Справочники.СтраныМира.НайтиПоКоду(КодСтраны);
		Если Страна.Пустая() Тогда
			Возврат ", " + ПредставлениеКонтактнойИнформации;
		КонецЕсли;
		НаименованиеСтраны = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Страна, "Наименование");
		Если СтрНачинаетсяС(ПредставлениеКонтактнойИнформации, НаименованиеСтраны) Тогда
			ПредставлениеМестонахождения = СтрЗаменить(ПредставлениеКонтактнойИнформации, НаименованиеСтраны, КодСтраны);
		Иначе
			ПредставлениеМестонахождения = КодСтраны + ", " + ПредставлениеКонтактнойИнформации;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПредставлениеМестонахождения;
	
КонецФункции

Процедура ЗаполнитьРеквизитыТаможеннойДекларации(СтрокаДокумента, СтрокаВыгрузки)
	
	// Получим из номера таможенной декларации
	//   КодТО              - Код таможенного органа
	//   ДатаРегистрацииСтр - Дата таможенной декларации
	//   НомерДок           - Номер таможенной декларации
	//   ДекларацияНом      - Порядковый номер строки в декларации.
	
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.НомерТаможеннойДекларации) Тогда
		Возврат;
	КонецЕсли;
	
	МассивСлов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(СтрокаДокумента.НомерТаможеннойДекларации, "/");
		
	Если МассивСлов.Количество() < 3
		ИЛИ МассивСлов.Количество() > 4 Тогда
		// Регистрационный номер таможенной декларации введен не корректно.
		Возврат;
	КонецЕсли;
	
	СтрокаВыгрузки.КодТО    = МассивСлов[0];
	ДатаРегистрацииСтр      = МассивСлов[1];
	СтрокаВыгрузки.НомерДок = МассивСлов[2];
	
	Если СтрДлина(ДатаРегистрацииСтр) = 6 Тогда
		Число = Лев(ДатаРегистрацииСтр, 2);
		Месяц = Сред(ДатаРегистрацииСтр, 3, 2);
		Год   = Прав(ДатаРегистрацииСтр, 2);
		СтрокаВыгрузки.ДатаРегистрацииСтр = "20" + Год + "-" + Месяц  + "-" + Число;
	Иначе
		СтрокаВыгрузки.ДатаРегистрацииСтр = "0001-01-01";
	КонецЕсли; 
	
	Если МассивСлов.Количество() = 4 Тогда
		// Регистрационный номер таможенной декларации содержит порядковый номер строки в декларации.
		ТипЧисло = Новый ОписаниеТипов("Число");
		СтрокаВыгрузки.ДекларацияНом = ТипЧисло.ПривестиЗначение(МассивСлов[3]);
	ИначеЕсли ЗначениеЗаполнено(СтрокаВыгрузки.КодТО)
		Или ЗначениеЗаполнено(ДатаРегистрацииСтр)
		Или ЗначениеЗаполнено(СтрокаВыгрузки.НомерДок) Тогда
	
		СтрокаВыгрузки.ДекларацияНом = 1;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОПроизводителе(СтрокаДокумента, СтрокаВыгрузки, Правила891, Дата)
	
	Если Не Правила891 Или Не ЗначениеЗаполнено(СтрокаДокумента.Производитель) Тогда
		Возврат;
	КонецЕсли;
	
	СведенияОПроизводителе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(СтрокаДокумента.Производитель, Дата);
	РеквизитыПроизводителя = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(
		СведенияОПроизводителе, "ПолноеНаименование,ИНН,КПП,ОГРН");
		
	СтрокаВыгрузки.НаименованиеТовара = СтрШаблон("%1, производитель: %2",
		СтрокаВыгрузки.НаименованиеТовара, РеквизитыПроизводителя);
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОМаркируемыхТоварах(СтрокаДокумента, СтрокаВыгрузки, Правила891, ШтрихкодыУпаковок)
	
	Если Не Правила891 Тогда
		Возврат;
	КонецЕсли;

	СтруктураПоиска = Новый Структура("ДокументСсылка,Номенклатура",
		СтрокаДокумента.ДокументСсылка, СтрокаДокумента.Номенклатура);
	НайденныеСтрокиТовары = ШтрихкодыУпаковок.НайтиСтроки(СтруктураПоиска);

	Если НайденныеСтрокиТовары.Количество() > 0 Тогда
		
		ШтрихкодыУпаковокДляВыгрузки = "";
		Для Каждого СтрокаТовары Из НайденныеСтрокиТовары Цикл
			Если ЗначениеЗаполнено(ШтрихкодыУпаковокДляВыгрузки) Тогда
				ШтрихкодыУпаковокДляВыгрузки = СтрШаблон("%1, %2", ШтрихкодыУпаковокДляВыгрузки, СтрокаТовары.ШтрихкодУпаковки);
			Иначе
				ШтрихкодыУпаковокДляВыгрузки = СтрокаТовары.ШтрихкодУпаковки;
			КонецЕсли; 
		КонецЦикла;
	
		Если ЗначениеЗаполнено(ШтрихкодыУпаковокДляВыгрузки) Тогда
			СтрокаВыгрузки.НаименованиеТовара = СтрШаблон("%1, %2",
				СтрокаВыгрузки.НаименованиеТовара, ШтрихкодыУпаковокДляВыгрузки);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область Прочее

Функция ПолучитьДокФизЛица(ФизЛицо, ДатаЗначения) Экспорт
	
	Удостоверения = РегистрыСведений.ДокументыФизическихЛиц.СрезПоследних(ДатаЗначения, Новый Структура("ФизЛицо", ФизЛицо));

	Если Удостоверения.Количество() > 0 Тогда
		Возврат Удостоверения[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьФИОФизЛица(ФизЛицо, НаДату = Неопределено)
	
	Результат = Новый Структура("Фамилия, Имя, Отчество", "", "", "");
	Если Метаданные.Справочники.Найти("ФизическиеЛица") = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Результат, ФизЛицо);
	Иначе
		ДанныеФЛ = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(?(ЗначениеЗаполнено(НаДату), НаДату, ТекущаяДатаСеанса()), Новый Структура("ФизическоеЛицо", ФизЛицо));
		Если ДанныеФЛ.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(Результат, ДанныеФЛ[0]);
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьСписокВыбораВидовТранспорта(СписокЗначений)

	СписокЗначений.Очистить();
	СписокЗначений.Добавить("10", НСтр("ru = '10 - Морской/речной транспорт'"));
	СписокЗначений.Добавить("20", НСтр("ru = '20 - Железнодорожный транспорт'"));
	СписокЗначений.Добавить("30", НСтр("ru = '30 - Автодорожный транспорт, за исключением транспортных средств, указанных под кодами 31, 32'"));
	СписокЗначений.Добавить("31", НСтр("ru = '31 - Состав транспортных средств (тягач с полуприцепом или прицепом)'"));
	СписокЗначений.Добавить("32", НСтр("ru = '32 - Состав транспортных средств (тягач с полуприцепом(-ами) или прицепом(-ами))'"));
	СписокЗначений.Добавить("40", НСтр("ru = '40 - Воздушный транспорт'"));
	СписокЗначений.Добавить("50", НСтр("ru = '50 - Почтовое отправление'"));
	СписокЗначений.Добавить("71", НСтр("ru = '71 - Трубопроводный транспорт'"));
	СписокЗначений.Добавить("72", НСтр("ru = '72 - Линии электропередачи'"));
	СписокЗначений.Добавить("80", НСтр("ru = '80 - Внутренний водный транспорт'"));
	СписокЗначений.Добавить("90", НСтр("ru = '90 - Транспортное средство, перемещающееся в качестве товара своим ходом'"));
	СписокЗначений.Добавить("99", НСтр("ru = '99 - Прочее'"));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

// -- Локализация
