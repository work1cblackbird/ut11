////////////////////////////////////////////////////////////////////////////////
//МОДУЛЬ СОДЕРЖИТ ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ПАКЕТАМИ ОБМЕНА С МОБИЛЬНЫМ ПРИЛОЖЕНИЕМ "1С: ЗАКАЗЫ"
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область Вспомогательные

// Возвращает валюту мобильного приложения.
//
// Возвращаемое значение:
//  СправочникСсылка.Валюты - валюта заказа.
//
Функция ВалютаЗаказов() Экспорт
	
	НаборВалют = Константы.СоздатьНабор("ВалютаРегламентированногоУчета, ВалютаУправленческогоУчета");
	НаборВалют.Прочитать();
	ВалютаЗаказов = ?(ЗначениеЗаполнено(НаборВалют.ВалютаРегламентированногоУчета),
		НаборВалют.ВалютаРегламентированногоУчета, НаборВалют.ВалютаУправленческогоУчета);
	
	Возврат ВалютаЗаказов;
	
КонецФункции

// Возвращает строковое представление идентификатора валюты.
//
// Возвращаемое значение:
//  Строка - идентификатор валюты.
//
Функция ИдентификаторВалютыЗаказов() Экспорт
	
	Валюта = ВалютаЗаказов();
	
	Возврат СокрЛП(Валюта.УникальныйИдентификатор());
	
КонецФункции

// Возвращает настройки компоновки для узла обмена
// Параметры:
//  УзелОбмена - ПланОбменаСсылка - узел обмена с мобильным приложением.
//
// Возвращаемое значение:
//  КомпоновщикНастроекКомпоновкиДанных - настройки обмена.
//
Функция НастройкиОбмена(УзелОбмена) Экспорт
	
	ВидНастройкиОбмена = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УзелОбмена, "ВидНастройкиОбмена");
	Если ЗначениеЗаполнено(ВидНастройкиОбмена) Тогда
		ХранилищеНастроек = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидНастройкиОбмена, "НастройкиОбмена"); // ХранилищеЗначения
	Иначе
		ХранилищеНастроек = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УзелОбмена, "НастройкиОбмена"); // ХранилищеЗначения
	КонецЕсли;
	Возврат ХранилищеНастроек.Получить();
	
КонецФункции

// Возвращает соответствие имен данных между ERP и 1С Заказы для замены в итоговом сообщении
//
// Параметры:
//  Выгрузка - Булево - Выгрузка - Истина, Загрузка - Ложь
// 
// Возвращаемое значение:
// Соответствие из КлючИЗначение:
// * Ключ - Строка
// * Значение - Строка
Функция СоответствиеНаЗамену(Выгрузка = Истина) Экспорт
	
	Результат = Новый Соответствие;
	
	Если Метаданные.ВариантВстроенногоЯзыка = Метаданные.СвойстваОбъектов.ВариантВстроенногоЯзыка.Русский Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Выгрузка Тогда
		Результат.Вставить(Метаданные.ПланыОбмена.МобильноеПриложениеЗаказыКлиентов.Имя, "МобильноеПриложениеЗаказыКлиентов"); //@NON-NLS-1
		Результат.Вставить("CatalogRef." + Метаданные.Справочники.Партнеры.Имя, "CatalogRef.Клиенты"); //@NON-NLS-1 @NON-NLS-2
		Результат.Вставить("CatalogRef." + Метаданные.Справочники.КонтактныеЛицаПартнеров.Имя, "CatalogRef.КонтактныеЛицаКлиентов"); //@NON-NLS-1 @NON-NLS-2
	Иначе
		Результат.Вставить("МобильноеПриложениеЗаказыКлиентов", Метаданные.ПланыОбмена.МобильноеПриложениеЗаказыКлиентов.Имя); //@NON-NLS-1
		Результат.Вставить("CatalogRef.Клиенты", "CatalogRef." + Метаданные.Справочники.Партнеры.Имя); //@NON-NLS-1 @NON-NLS-2
		Результат.Вставить("CatalogRef.КонтактныеЛицаКлиентов", "CatalogRef." + Метаданные.Справочники.КонтактныеЛицаПартнеров.Имя); //@NON-NLS-1 @NON-NLS-2
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает соответствие имен данных между ERP и 1С Заказы
//
// Возвращаемое значение:
// Соответствие из КлючИЗначение:
// * Ключ - Строка
// * Значение - Строка
Функция СоответствиеИменПартнеровИКлиентов() Экспорт
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Результат = Новый Соответствие;
	
	Результат.Вставить(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Справочники.ВидыКонтактнойИнформации.СправочникПартнеры, "ИмяПредопределенныхДанных"),
		"СправочникКлиенты"); //@NON-NLS-1
	Результат.Вставить(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Справочники.ВидыКонтактнойИнформации.СправочникКонтактныеЛицаПартнеров, "ИмяПредопределенныхДанных"),
		"СправочникКонтактныеЛицаКлиентов"); //@NON-NLS-1
	Результат.Вставить(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Справочники.ВидыКонтактнойИнформации.СправочникСклады, "ИмяПредопределенныхДанных"),
		"СправочникСклады"); //@NON-NLS-1
	Результат.Вставить(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Справочники.ВидыКонтактнойИнформации.СправочникОрганизации, "ИмяПредопределенныхДанных"),
		"СправочникОрганизации"); //@NON-NLS-1
	
	ЛокальноеИмя = НСтр("ru = 'Контактная информация справочника ""Контактные лица партнеров""'", КодОсновногоЯзыка);
	ЗаказыЛокальноеИмя = "Контактная информация справочника ""Контактные лица клиентов"""; //@NON-NLS-1
	Результат.Вставить(ЛокальноеИмя, ЗаказыЛокальноеИмя);

	ЛокальноеИмя = НСтр("ru = 'Контактная информация справочника ""Партнеры""'", КодОсновногоЯзыка);
	ЗаказыЛокальноеИмя = "Контактная информация справочника ""Клиенты"""; //@NON-NLS-1
	Результат.Вставить(ЛокальноеИмя, ЗаказыЛокальноеИмя);

	ЛокальноеИмя = "CatalogTabularSectionRow.КонтактныеЛицаПартнеров.КонтактнаяИнформация"; //@NON-NLS-1
	ЗаказыЛокальноеИмя = "CatalogTabularSectionRow.КонтактныеЛицаКлиентов.КонтактнаяИнформация"; //@NON-NLS-1
	Результат.Вставить(ЛокальноеИмя, ЗаказыЛокальноеИмя);
	
	ЛокальноеИмя = "CatalogTabularSectionRow.Партнеры.КонтактнаяИнформация"; //@NON-NLS-1
	ЗаказыЛокальноеИмя = "CatalogTabularSectionRow.Клиенты.КонтактнаяИнформация"; //@NON-NLS-1
	Результат.Вставить(ЛокальноеИмя, ЗаказыЛокальноеИмя);
	
	Возврат Результат;
	
КонецФункции

// Возвращает соответствие имен данных между типом XDTO и Перечислением ЮрФизЛицо
//
// Возвращаемое значение:
// Соответствие из КлючИЗначение:
// * Ключ - Строка
// * Значение - Строка
Функция СоответствиеТиповЮрФизЛицо() Экспорт
	
	Результат = Новый Соответствие;
	
	Результат.Вставить(Перечисления.ЮрФизЛицо.ЮрЛицо, "ЮрЛицо"); //@NON-NLS-1
	Результат.Вставить(Перечисления.ЮрФизЛицо.ФизЛицо, "ФизЛицо"); //@NON-NLS-1
	Результат.Вставить(Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент, "ЮрЛицоНеРезидент"); //@NON-NLS-1
	Результат.Вставить(Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель, "ИндивидуальныйПредприниматель"); //@NON-NLS-1
	
	Результат.Вставить("ЮрЛицо", Перечисления.ЮрФизЛицо.ЮрЛицо); //@NON-NLS-1
	Результат.Вставить("ФизЛицо", Перечисления.ЮрФизЛицо.ФизЛицо); //@NON-NLS-1
	Результат.Вставить("ЮрЛицоНеРезидент", Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент); //@NON-NLS-1
	Результат.Вставить("ИндивидуальныйПредприниматель", Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель); //@NON-NLS-1

	Возврат Результат;
	
КонецФункции

// Возвращает соответствие имен данных между типом XDTO и Перечислением ТипыКонтактнойИнформации
//
// Возвращаемое значение:
// Соответствие из КлючИЗначение:
// * Ключ - Строка
// * Значение - Строка
Функция СоответствиеТиповКонтактнойИнформации() Экспорт
	
	Результат = Новый Соответствие;
	
	Результат.Вставить(Перечисления.ТипыКонтактнойИнформации.Адрес, "Адрес"); //@NON-NLS-1
	Результат.Вставить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, "АдресЭлектроннойПочты"); //@NON-NLS-1
	Результат.Вставить(Перечисления.ТипыКонтактнойИнформации.Факс, "Факс"); //@NON-NLS-1
	Результат.Вставить(Перечисления.ТипыКонтактнойИнформации.Другое, "Другое"); //@NON-NLS-1
	Результат.Вставить(Перечисления.ТипыКонтактнойИнформации.Телефон, "Телефон"); //@NON-NLS-1
	Результат.Вставить(Перечисления.ТипыКонтактнойИнформации.Skype, "Skype"); //@NON-NLS-1
	Результат.Вставить(Перечисления.ТипыКонтактнойИнформации.ВебСтраница, "ВебСтраница"); //@NON-NLS-1

	Возврат Результат;
	
КонецФункции

// Возвращает соответствие имен данных между типом XDTO и Перечислением ФормыОплаты
//
// Возвращаемое значение:
// Соответствие из КлючИЗначение:
// * Ключ - Строка
// * Значение - Строка
Функция СоответствиеТиповФормыОплаты() Экспорт
	
	Результат = Новый Соответствие;
	
	Результат.Вставить(Перечисления.ФормыОплаты.Наличная, "Наличная"); //@NON-NLS-1
	Результат.Вставить(Перечисления.ФормыОплаты.Безналичная, "Безналичная"); //@NON-NLS-1
	Результат.Вставить(Перечисления.ФормыОплаты.ПлатежнаяКарта, "ПлатежнаяКарта"); //@NON-NLS-1
	Результат.Вставить(Перечисления.ФормыОплаты.Взаимозачет, "Взаимозачет"); //@NON-NLS-1

	Результат.Вставить("Наличная", Перечисления.ФормыОплаты.Наличная); //@NON-NLS-1
	Результат.Вставить("Безналичная", Перечисления.ФормыОплаты.Безналичная); //@NON-NLS-1
	Результат.Вставить("ПлатежнаяКарта", Перечисления.ФормыОплаты.ПлатежнаяКарта); //@NON-NLS-1
	Результат.Вставить("Взаимозачет", Перечисления.ФормыОплаты.Взаимозачет); //@NON-NLS-1
	
	Возврат Результат;
	
КонецФункции

// Возвращает соответствие имен данных между типом XDTO и Перечислением СистемыНалогообложения
//
// Возвращаемое значение:
// Соответствие из КлючИЗначение:
// * Ключ - Строка
// * Значение - Строка
Функция СоответствиеТиповСистемыНалогообложения() Экспорт
	
	Результат = Новый Соответствие;
	
	Результат.Вставить(Перечисления.СистемыНалогообложения.Общая, "Общая"); //@NON-NLS-1
	Результат.Вставить(Перечисления.СистемыНалогообложения.Упрощенная, "Упрощенная"); //@NON-NLS-1

	Возврат Результат;
	
КонецФункции

// Возвращает соответствие имен данных между именами предопределенных значений справочника "Виды контакнтой информации"
//
// Возвращаемое значение:
// Соответствие из КлючИЗначение:
// * Ключ - Строка
// * Значение - Строка
Функция СоответствиеПредопределенныеВидыКонтактнойИнформации() Экспорт
	
	Результат = Новый Соответствие;
	
	Результат.Вставить("СправочникКонтактныеЛицаПартнеров", "СправочникКонтактныеЛицаПартнеров"); //@NON-NLS-2
	Результат.Вставить("СправочникКонтрагенты", "СправочникКонтрагенты"); //@NON-NLS-2
	Результат.Вставить("СправочникОрганизации", "СправочникОрганизации"); //@NON-NLS-2
	Результат.Вставить("СправочникПартнеры", "СправочникПартнеры"); //@NON-NLS-2
	Результат.Вставить("СправочникПользователи", "СправочникПользователи"); //@NON-NLS-2
	Результат.Вставить("СправочникРегистрацииВНалоговомОргане", "СправочникРегистрацииВНалоговомОргане"); //@NON-NLS-2
	Результат.Вставить("СправочникСклады", "СправочникСклады"); //@NON-NLS-2
	Результат.Вставить("СправочникТорговыеТочки", "СправочникТорговыеТочки"); //@NON-NLS-2
	Результат.Вставить("СправочникФизическиеЛица", "СправочникФизическиеЛица"); //@NON-NLS-2
	Результат.Вставить("АдресТорговойТочки", "АдресТорговойТочки"); //@NON-NLS-2
	Результат.Вставить("МобильныйТелефонКонтактногоЛица", "МобильныйТелефонКонтактногоЛица"); //@NON-NLS-2
	Результат.Вставить("ТелефонКонтактногоЛица", "ТелефонКонтактногоЛица"); //@NON-NLS-2
	Результат.Вставить("EmailКонтактногоЛица", "EmailКонтактногоЛица"); //@NON-NLS-2
	Результат.Вставить("ДругаяИнформацияКонтрагенты", "ДругаяИнформацияКонтрагенты"); //@NON-NLS-2
	Результат.Вставить("МеждународныйАдресКонтрагента", "МеждународныйАдресКонтрагента"); //@NON-NLS-2
	Результат.Вставить("ПочтовыйАдресКонтрагента", "ПочтовыйАдресКонтрагента"); //@NON-NLS-2
	Результат.Вставить("ТелефонКонтрагента", "ТелефонКонтрагента"); //@NON-NLS-2
	Результат.Вставить("ФаксКонтрагенты", "ФаксКонтрагенты"); //@NON-NLS-2
	Результат.Вставить("ФактАдресКонтрагента", "ФактАдресКонтрагента"); //@NON-NLS-2
	Результат.Вставить("EmailКонтрагента", "EmailКонтрагента"); //@NON-NLS-2
	Результат.Вставить("ЮрАдресКонтрагента", "ЮрАдресКонтрагента"); //@NON-NLS-2
	Результат.Вставить("ДругаяИнформацияОрганизации", "ДругаяИнформацияОрганизации"); //@NON-NLS-2
	Результат.Вставить("МеждународныйАдресОрганизации", "МеждународныйАдресОрганизации"); //@NON-NLS-2
	Результат.Вставить("ПочтовыйАдресОрганизации", "ПочтовыйАдресОрганизации"); //@NON-NLS-2
	Результат.Вставить("ТелефонОрганизации", "ТелефонОрганизации"); //@NON-NLS-2
	Результат.Вставить("ФаксОрганизации", "ФаксОрганизации"); //@NON-NLS-2
	Результат.Вставить("ФактАдресОрганизации", "ФактАдресОрганизации"); //@NON-NLS-2
	Результат.Вставить("EmailОрганизации", "EmailОрганизации"); //@NON-NLS-2
	Результат.Вставить("ЮрАдресОрганизации", "ЮрАдресОрганизации"); //@NON-NLS-2
	Результат.Вставить("АдресПартнера", "АдресКлиента"); //@NON-NLS-2
	Результат.Вставить("ТелефонПартнера", "ТелефонКлиента"); //@NON-NLS-2
	Результат.Вставить("EmailПартнера", "EmailКлиента"); //@NON-NLS-2
	Результат.Вставить("ТелефонПользователя", "ТелефонПользователя"); //@NON-NLS-2
	Результат.Вставить("EmailПользователя", "EmailПользователя"); //@NON-NLS-2
	Результат.Вставить("АдресНалоговогоОргана", "АдресНалоговогоОргана"); //@NON-NLS-2
	Результат.Вставить("ТелефонНалоговогоОргана", "ТелефонНалоговогоОргана"); //@NON-NLS-2
	Результат.Вставить("ФактАдресОбособленногоПодразделения", "ФактАдресОбособленногоПодразделения"); //@NON-NLS-2
	Результат.Вставить("АдресСклада", "АдресСклада"); //@NON-NLS-2
	Результат.Вставить("ТелефонСклада", "ТелефонСклада"); //@NON-NLS-2
	Результат.Вставить("EMailФизическиеЛица", "EMailФизическиеЛица"); //@NON-NLS-2
	Результат.Вставить("АдресДляИнформированияФизическиеЛица", "АдресДляИнформированияФизическиеЛица"); //@NON-NLS-2
	Результат.Вставить("АдресЗаПределамиРФФизическиеЛица", "АдресЗаПределамиРФФизическиеЛица"); //@NON-NLS-2
	Результат.Вставить("АдресМестаПроживанияФизическиеЛица", "АдресМестаПроживанияФизическиеЛица"); //@NON-NLS-2
	Результат.Вставить("АдресПоПропискеФизическиеЛица", "АдресПоПропискеФизическиеЛица"); //@NON-NLS-2
	Результат.Вставить("ТелефонДомашнийФизическиеЛица", "ТелефонДомашнийФизическиеЛица"); //@NON-NLS-2
	Результат.Вставить("ТелефонМобильныйФизическиеЛица", "ТелефонМобильныйФизическиеЛица"); //@NON-NLS-2
	Результат.Вставить("ТелефонРабочийФизическиеЛица", "ТелефонРабочийФизическиеЛица"); //@NON-NLS-2
	
	Возврат Результат;
	
КонецФункции

// Возвращает соответствие имен данных между типом XDTO и Перечислением СтатусыЗаказовКлиентов
//
// Возвращаемое значение:
// Соответствие из КлючИЗначение:
// * Ключ - Строка
// * Значение - Строка
Функция СоответствиеТиповСтатусыЗаказовКлиентов() Экспорт
	
	Результат = Новый Соответствие;
	
	Результат.Вставить(Перечисления.СтатусыЗаказовКлиентов.НеСогласован, "НеСогласован"); //@NON-NLS-1
	Результат.Вставить(Перечисления.СтатусыЗаказовКлиентов.КОбеспечению, "КОбеспечению"); //@NON-NLS-1
	Результат.Вставить(Перечисления.СтатусыЗаказовКлиентов.КОтгрузке, "КОтгрузке"); //@NON-NLS-1
	Результат.Вставить(Перечисления.СтатусыЗаказовКлиентов.Закрыт, "Закрыт"); //@NON-NLS-1

	Возврат Результат;
	
КонецФункции

// Возвращает соответствие имен данных между типом XDTO и Перечислением СостоянияЗаявокНаВозврат
//
// Возвращаемое значение:
// Соответствие из КлючИЗначение:
// * Ключ - Строка
// * Значение - Строка
Функция СоответствиеТиповСостоянияЗаявокНаВозврат() Экспорт
	
	Результат = Новый Соответствие;
	
	Результат.Вставить(Перечисления.СостоянияЗаявокНаВозвратТоваровОтКлиентов.ОжидаетсяСогласование, 
			"ОжидаетсяСогласование"); //@NON-NLS-1
	Результат.Вставить(Перечисления.СостоянияЗаявокНаВозвратТоваровОтКлиентов.ГотоваКВозврату, 
			"ГотоваКВозврату"); //@NON-NLS-1
	Результат.Вставить(Перечисления.СостоянияЗаявокНаВозвратТоваровОтКлиентов.ОжидаетсяАвансИлиВозвратДоОбеспечения,
			"ОжидаетсяАвансИлиВозвратДоОбеспечения"); //@NON-NLS-1
	Результат.Вставить(Перечисления.СостоянияЗаявокНаВозвратТоваровОтКлиентов.ГотоваКОбеспечению,
			"ГотоваКОбеспечению"); //@NON-NLS-1
	Результат.Вставить(Перечисления.СостоянияЗаявокНаВозвратТоваровОтКлиентов.ОжидаетсяПредоплатаИлиВозвратДоОтгрузки,
			"ОжидаетсяПредоплатаИлиВозвратДоОтгрузки"); //@NON-NLS-1
	Результат.Вставить(Перечисления.СостоянияЗаявокНаВозвратТоваровОтКлиентов.ОжидаетсяОбеспечение,
			"ОжидаетсяОбеспечение"); //@NON-NLS-1
	Результат.Вставить(Перечисления.СостоянияЗаявокНаВозвратТоваровОтКлиентов.ГотоваКОтгрузке,
			"ГотоваКОтгрузке"); //@NON-NLS-1
	Результат.Вставить(Перечисления.СостоянияЗаявокНаВозвратТоваровОтКлиентов.ВПроцессеОтгрузки,
			"ВПроцессеОтгрузки"); //@NON-NLS-1
	Результат.Вставить(Перечисления.СостоянияЗаявокНаВозвратТоваровОтКлиентов.ОжидаетсяОплатаИлиВозвратПослеОтгрузки,
			"ОжидаетсяОплатаИлиВозвратПослеОтгрузки"); //@NON-NLS-1
	Результат.Вставить(Перечисления.СостоянияЗаявокНаВозвратТоваровОтКлиентов.ОжидаетсяВыполнение,
			"ОжидаетсяВыполнение"); //@NON-NLS-1
	Результат.Вставить(Перечисления.СостоянияЗаявокНаВозвратТоваровОтКлиентов.Выполнена,
			"Выполнена"); //@NON-NLS-1
	Результат.Вставить(Перечисления.СостоянияЗаявокНаВозвратТоваровОтКлиентов.Отклонена,
			"Отклонена"); //@NON-NLS-1

	Возврат Результат;
	
КонецФункции

// Возвращает соответствие имен данных между типом XDTO и Перечислением СостоянияЗаказовКлиентов
//
// Возвращаемое значение:
// Соответствие из КлючИЗначение:
// * Ключ - Строка
// * Значение - Строка
Функция СоответствиеТиповСостоянияЗаказовКлиентов() Экспорт
	
	Результат = Новый Соответствие;
	
	Результат.Вставить(Перечисления.СостоянияЗаказовКлиентов.ОжидаетсяСогласование, "ОжидаетсяСогласование"); //@NON-NLS-1
	Результат.Вставить(Перечисления.СостоянияЗаказовКлиентов.ОжидаетсяАвансДоОбеспечения, "ОжидаетсяАвансДоОбеспечения"); //@NON-NLS-1
	Результат.Вставить(Перечисления.СостоянияЗаказовКлиентов.ГотовКОбеспечению, "ГотовКОбеспечению"); //@NON-NLS-1
	Результат.Вставить(Перечисления.СостоянияЗаказовКлиентов.ОжидаетсяПредоплатаДоОтгрузки, "ОжидаетсяПредоплатаДоОтгрузки"); //@NON-NLS-1
	Результат.Вставить(Перечисления.СостоянияЗаказовКлиентов.ОжидаетсяОбеспечение, "ОжидаетсяОбеспечение"); //@NON-NLS-1
	Результат.Вставить(Перечисления.СостоянияЗаказовКлиентов.ГотовКОтгрузке, "ГотовКОтгрузке"); //@NON-NLS-1
	Результат.Вставить(Перечисления.СостоянияЗаказовКлиентов.ВПроцессеОтгрузки, "ВПроцессеОтгрузки"); //@NON-NLS-1
	Результат.Вставить(Перечисления.СостоянияЗаказовКлиентов.ОжидаетсяОплатаПослеОтгрузки, "ОжидаетсяОплатаПослеОтгрузки"); //@NON-NLS-1
	Результат.Вставить(Перечисления.СостоянияЗаказовКлиентов.ГотовКЗакрытию, "ГотовКЗакрытию"); //@NON-NLS-1
	Результат.Вставить(Перечисления.СостоянияЗаказовКлиентов.Закрыт, "Закрыт"); //@NON-NLS-1

	Возврат Результат;
	
КонецФункции

// Возвращает соответствие имен данных между типом XDTO и Перечислением СпособыКомпенсацииВозвратовТоваров
//
// Возвращаемое значение:
// Соответствие из КлючИЗначение:
// * Ключ - Строка
// * Значение - Строка
Функция СоответствиеТиповСпособыКомпенсацииВозвратовТоваров() Экспорт
	
	Результат = Новый Соответствие;
	
	Результат.Вставить(Перечисления.СпособыКомпенсацииВозвратовТоваров.ЗаменитьТовары, "ЗаменитьТовары"); //@NON-NLS-1
	Результат.Вставить(Перечисления.СпособыКомпенсацииВозвратовТоваров.ВернутьДенежныеСредства, "ВернутьДенежныеСредства"); //@NON-NLS-1
	Результат.Вставить(Перечисления.СпособыКомпенсацииВозвратовТоваров.ОставитьВКачествеАванса, "ОставитьВКачествеАванса"); //@NON-NLS-1

	Результат.Вставить("ЗаменитьТовары", Перечисления.СпособыКомпенсацииВозвратовТоваров.ЗаменитьТовары); //@NON-NLS-1
	Результат.Вставить("ВернутьДенежныеСредства", Перечисления.СпособыКомпенсацииВозвратовТоваров.ВернутьДенежныеСредства); //@NON-NLS-1
	Результат.Вставить("ОставитьВКачествеАванса", Перечисления.СпособыКомпенсацииВозвратовТоваров.ОставитьВКачествеАванса); //@NON-NLS-1
	
	Возврат Результат;
	
КонецФункции

// Возвращает соответствие имен данных между типом XDTO и Перечислением СтатусыЗаданийТорговымПредставителям
//
// Возвращаемое значение:
// Соответствие из КлючИЗначение:
// * Ключ - Строка
// * Значение - Строка
Функция СоответствиеТиповСтатусыЗаданийТорговымПредставителям() Экспорт
	
	Результат = Новый Соответствие;
	
	Результат.Вставить(Перечисления.СтатусыЗаданийТорговымПредставителям.НеПодготовлено, "НеПодготовлено"); //@NON-NLS-1
	Результат.Вставить(Перечисления.СтатусыЗаданийТорговымПредставителям.КОтработке, "КОтработке"); //@NON-NLS-1
	Результат.Вставить(Перечисления.СтатусыЗаданийТорговымПредставителям.Отработано, "Отработано"); //@NON-NLS-1
	Результат.Вставить(Перечисления.СтатусыЗаданийТорговымПредставителям.НеОтработано, "НеОтработано"); //@NON-NLS-1
	Результат.Вставить(Перечисления.СтатусыЗаданийТорговымПредставителям.Отменено, "Отменено"); //@NON-NLS-1

	Результат.Вставить("НеПодготовлено", Перечисления.СтатусыЗаданийТорговымПредставителям.НеПодготовлено); //@NON-NLS-1
	Результат.Вставить("КОтработке", Перечисления.СтатусыЗаданийТорговымПредставителям.КОтработке); //@NON-NLS-1
	Результат.Вставить("Отработано", Перечисления.СтатусыЗаданийТорговымПредставителям.Отработано); //@NON-NLS-1
	Результат.Вставить("НеОтработано", Перечисления.СтатусыЗаданийТорговымПредставителям.НеОтработано); //@NON-NLS-1
	Результат.Вставить("Отменено", Перечисления.СтатусыЗаданийТорговымПредставителям.Отменено); //@NON-NLS-1

	Возврат Результат;
	
КонецФункции

// Возвращает соответствие имен данных между типом XDTO и Перечислением СтатусыЗаявокНаВозвратТоваровОтКлиентов
//
// Возвращаемое значение:
// Соответствие из КлючИЗначение:
// * Ключ - Строка
// * Значение - Строка
Функция СоответствиеТиповСтатусыЗаявокНаВозвратТоваровОтКлиентов() Экспорт
	
	Результат = Новый Соответствие;
	
	Результат.Вставить(Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована, "НеСогласована"); //@NON-NLS-1
	Результат.Вставить(Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату, "КВозврату"); //@NON-NLS-1
	Результат.Вставить(Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению, "КОбеспечению"); //@NON-NLS-1
	Результат.Вставить(Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке, "КОтгрузке"); //@NON-NLS-1
	Результат.Вставить(Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена, "Выполнена"); //@NON-NLS-1
	Результат.Вставить(Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Отклонена, "Отклонена"); //@NON-NLS-1

	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти
