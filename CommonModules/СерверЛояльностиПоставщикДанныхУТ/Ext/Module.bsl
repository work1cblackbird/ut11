///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Проверяет использование библиотеки сервера лояльности
//
// Параметры:
//  Ответ - HTTPСервисОтвет - ответ сервера лояльности
//  Результат - Булево - Истина, если Сервер лояльности используется, Ложь - если не используется.
//
Процедура ИспользоватьСерверЛояльности(Ответ, Результат) Экспорт
	
	ИспользоватьСерверЛояльности = Константы.ИспользоватьСерверЛояльностиПоставщикДанных.Получить();
	Если Не ИспользоватьСерверЛояльности Тогда
		Ответ.КодСостояния = 423;
		Ответ.УстановитьТелоИзСтроки(НСтр("ru = 'Использование сервера лояльности отключено в настройках программы'"));
	КонецЕсли;
	
	Результат = ИспользоватьСерверЛояльности;
	
КонецПроцедуры

// Заполняет список управляемых скидок
//
// Параметры:
//  Результат - Неопределено, ТаблицаЗначений - возвращаемое значение
//
Процедура ЗаполнитьТаблицуУправляемыхСкидок(Результат) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДействиеСкидокНаценокСрезПоследних.СкидкаНаценка КАК СкидкаНаценка,
		|	ДействиеСкидокНаценокСрезПоследних.СкидкаНаценка.ЗначениеСкидкиНаценки КАК ЗначениеСкидки,
		|	""Автоматическая"" КАК ТипСкидки,
		|	ДействиеСкидокНаценокСрезПоследних.СкидкаНаценка.Представление КАК Представление,
		|	""На документ"" КАК ОбластьДействия
		|ИЗ
		|	РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(&СкидкиНаДату, ) КАК ДействиеСкидокНаценокСрезПоследних
		|ГДЕ
		|	ДействиеСкидокНаценокСрезПоследних.СкидкаНаценка.Управляемая
		|	И ДействиеСкидокНаценокСрезПоследних.Статус = &СтатусДействует
		|";
	
	Запрос.УстановитьПараметр("СкидкиНаДату", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("СтатусДействует", Перечисления.СтатусыДействияСкидок.Действует);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НоваяСтрока, "ИдентификаторСкидки") Тогда
			НоваяСтрока.ИдентификаторСкидки = Строка(Выборка.СкидкаНаценка.УникальныйИдентификатор());
		КонецЕсли;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Заполняет бонусную программу по дисконтной карте покупателя
//
// Параметры:
//  ДисконтнаяКарта - ОпределяемыйТип.КартаЛояльностиСерверЛояльности - 
//                    карта лояльности, по которой будут заполнены данные о бонусах
//  БонуснаяПрограмма - ОпределяемыйТип.БонуснаяПрограммаСерверЛояльности - Бонусная программа лояльности
//
Процедура ЗаполнитьБонуснуюПрограммуПоДисконтнойКарте(ДисконтнаяКарта, БонуснаяПрограмма) Экспорт
	
	РеквизитыБонуснойПрограммы = БонусныеБаллыСервер.БонуснаяПрограммаКартыЛояльности(ДисконтнаяКарта);
	БонуснаяПрограмма = РеквизитыБонуснойПрограммы.БонуснаяПрограммаЛояльности;
	
КонецПроцедуры

// Заполняет структуру ответа Сервера лояльности данными об остатках бонусных баллов
//
// Параметры:
//  ДисконтнаяКарта - ОпределяемыйТип.КартаЛояльностиСерверЛояльности - 
//                    карта лояльности, по которой будут заполнены данные о бонусах
//  СтруктураОтвета - см. СерверЛояльностиПоставщикДанных.ПолучитьСтруктуруОтвета
//
Процедура ЗаполнитьДанныеОБонусах(ДисконтнаяКарта, СтруктураОтвета) Экспорт
	
	РеквизитыБонуснойПрограммы = БонусныеБаллыСервер.БонуснаяПрограммаКартыЛояльности(ДисконтнаяКарта);

	ОстаткиБонусныхБаллов = ПолучитьБонусыКлиента(РеквизитыБонуснойПрограммы.БонуснаяПрограммаЛояльности, РеквизитыБонуснойПрограммы.Партнер);
	БонусныеБаллыРезерв = СерверЛояльностиПоставщикДанных.ПолучитьБонусныеБаллыРезерв(ДисконтнаяКарта);
	
	Если ЗначениеЗаполнено(РеквизитыБонуснойПрограммы.МаксимальныйПроцентОплатыБонусами) Тогда
		СтруктураОтвета.PaymentPercent = РеквизитыБонуснойПрограммы.МаксимальныйПроцентОплатыБонусами;
	КонецЕсли;
	
	// Проверяем ситуацию когда бонусных баллов в резерве может быть больше чем на остатке,
	// в этом случае возвращаем 0
	Если БонусныеБаллыРезерв > ОстаткиБонусныхБаллов Тогда
		СтруктураОтвета.BonusCount = 0;
	Иначе
		СтруктураОтвета.BonusCount = ОстаткиБонусныхБаллов - БонусныеБаллыРезерв;
	КонецЕсли
	
КонецПроцедуры

// Производит поиск карты клиента по параметрам, полученным через http-сервис
//
// Параметры:
//  Данные - Структура - структура, содержащая в себе параметры клиента:
//    * ИдентификаторКартыКлиента - Строка - код карты лояльности
//    * Клиент - Строка - ФИО владельца карты
//    * АдресЭП - Строка - адрес электронной почты владельца карты
//    * НомерТелефона - Строка - номер телефона владельца карты
//  Результат - ОпределяемыйТип.КартаЛояльностиСерверЛояльности, Неопределено - дисконтная карта клиента
//
Процедура НайтиКартуКлиента(Данные, Результат = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ВложенныйЗапрос.Ссылка КАК Ссылка,
		|	ВложенныйЗапрос.Приоритет КАК Приоритет
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		КартыЛояльности.Ссылка КАК Ссылка,
		|		1 КАК Приоритет
		|	ИЗ
		|		Справочник.КартыЛояльности КАК КартыЛояльности
		|	ГДЕ
		|		НЕ КартыЛояльности.ПометкаУдаления
		|		И КартыЛояльности.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКартЛояльности.Действует)
		|		И &ИдентификаторКартыКлиента <> """"
		|		И (&ВидКарты = ЗНАЧЕНИЕ(Справочник.ВидыКартЛояльности.ПустаяСсылка) ИЛИ КартыЛояльности.Владелец = &ВидКарты)
		|		И &ИдентификаторКартыКлиента В (КартыЛояльности.Штрихкод, КартыЛояльности.МагнитныйКод)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		КартыЛояльности.Ссылка,
		|		2
		|	ИЗ
		|		Справочник.КартыЛояльности КАК КартыЛояльности
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
		|			ПО КартыЛояльности.Партнер = ПартнерыКонтактнаяИнформация.Ссылка
		|				И КартыЛояльности.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКартЛояльности.Действует)
		|				И ПартнерыКонтактнаяИнформация.НомерТелефона = &НомерТелефона
		|				И &НомерТелефона <> """"
		|				И ПартнерыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
		|				И НЕ ПартнерыКонтактнаяИнформация.Ссылка.ПометкаУдаления
		|				И (&ВидКарты = ЗНАЧЕНИЕ(Справочник.ВидыКартЛояльности.ПустаяСсылка) ИЛИ КартыЛояльности.Владелец = &ВидКарты)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		КартыЛояльности.Ссылка,
		|		3
		|	ИЗ
		|		Справочник.КартыЛояльности КАК КартыЛояльности
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
		|			ПО КартыЛояльности.Партнер = ПартнерыКонтактнаяИнформация.Ссылка
		|				И КартыЛояльности.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКартЛояльности.Действует)
		|				И ПартнерыКонтактнаяИнформация.АдресЭП = &АдресЭП
		|				И &АдресЭП <> """"
		|				И НЕ ПартнерыКонтактнаяИнформация.Ссылка.ПометкаУдаления
		|				И (&ВидКарты = ЗНАЧЕНИЕ(Справочник.ВидыКартЛояльности.ПустаяСсылка) ИЛИ КартыЛояльности.Владелец = &ВидКарты)
		|				И ПартнерыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)) КАК ВложенныйЗапрос
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";
	
	ВидКарты = Справочники.ВидыКартЛояльности.ПустаяСсылка();
	Если ЗначениеЗаполнено(Данные.ГУИДВидаКарты)
			И Не Данные.ГУИДВидаКарты = ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор() Тогда
		ВидКарты = Справочники.ВидыКартЛояльности.ПолучитьСсылку(Новый УникальныйИдентификатор(Данные.ГУИДВидаКарты));
	КонецЕсли;
	
	СтрокаПоискаТелефона = ПодготовитьСтрокуПоискаПоНомеруТелефона(Данные.НомерТелефона);
	Если ЗначениеЗаполнено(СтрокаПоискаТелефона) И Лев(СтрокаПоискаТелефона, 1) = "%" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НомерТелефона = &НомерТелефона",
			"НомерТелефона ПОДОБНО &НомерТелефона");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ИдентификаторКартыКлиента", Данные.ИдентификаторКартыКлиента);
	Запрос.УстановитьПараметр("ВидКарты", ВидКарты);
	Запрос.УстановитьПараметр("НомерТелефона", СтрокаПоискаТелефона);
	Запрос.УстановитьПараметр("АдресЭП", Данные.АдресЭП);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

// Создает карты клиента
//
// Параметры:
//  ДанныеКарты - см. СерверЛояльностиПоставщикДанныхПереопределяемый.СоздатьКартуКлиента.ДанныеКарты
//  Результат - ОпределяемыйТип.КартаЛояльностиСерверЛояльности, Неопределено - содержит значение,
//				в котором будет храниться ссылка на созданную карту лояльности.
//  ДругойКлиент - СправочникСсылка.Контрагенты - контрагент с совпадающим e-mail, но другим телефоном
//  ОписаниеОшибки - Строка - возвращаемое значение
//
Процедура СоздатьКартуКлиента(ДанныеКарты, Результат = Неопределено, ДругойКлиент = Неопределено, ОписаниеОшибки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	ВидКартыЛояльности = ПолучитьВидКартыЛояльности(ДанныеКарты.ГУИДВидаКарты);
	
	Если Не ПроверитьДанныеКарты(ДанныеКарты.ИдентификаторКартыКлиента, ВидКартыЛояльности) Тогда
		Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Номер карты (%1) введен неверно'"),
			ДанныеКарты.ИдентификаторКартыКлиента);
		ОписаниеОшибки = Описание;
		ЗаписьЖурналаРегистрации("СерверЛояльности.СоздатьКартуКлиента",
			УровеньЖурналаРегистрации.Ошибка,,,
			Описание);
		Возврат;
	КонецЕсли;
	
	КартаЛояльности = Справочники.КартыЛояльности.ПустаяСсылка();
	
	Если ВидКартыЛояльности <> Неопределено Тогда
		Персонализирована = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидКартыЛояльности, "Персонализирована");
		ВладелецКарты = Справочники.Контрагенты.ПустаяСсылка();
		Если Персонализирована Тогда
			РезультатПолучения = ПолучитьВладельцаКарты(ДанныеКарты);
			Если ЗначениеЗаполнено(РезультатПолучения.ВладелецКарты) Тогда
				Если РезультатПолучения.СтатусПолучения = 3 Тогда
					ДругойКлиент = РезультатПолучения.ВладелецКарты;
				Иначе
					ВладелецКарты = РезультатПолучения.ВладелецКарты;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	
		Если ЗначениеЗаполнено(ВладелецКарты) Или Не Персонализирована Тогда
		
			НачатьТранзакцию();
			
			Попытка
				
				СтруктураДанныхКарты = КартыЛояльностиСервер.ИнициализироватьДанныеКартыЛояльности();
				СтруктураДанныхКарты.Штрихкод 			= ДанныеКарты.ИдентификаторКартыКлиента;
				СтруктураДанныхКарты.МагнитныйКод 		= ДанныеКарты.ИдентификаторКартыКлиента;
				СтруктураДанныхКарты.ГруппаДоступа		= Константы.ГруппаДоступаПартнераПриАвтоматическомСоздании.Получить();
				СтруктураДанныхКарты.ВидКарты			= ВидКартыЛояльности;
				СтруктураДанныхКарты.Партнер			= ВладелецКарты;
				
				КартаЛояльности = КартыЛояльностиСервер.ЗарегистрироватьКартуЛояльности(СтруктураДанныхКарты);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ШаблонОписанияОшибки = НСтр(
					"ru='Ошибка создания карты (%1) по причине:
					|""%2""'");
				Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонОписанияОшибки,
					ДанныеКарты.ИдентификаторКартыКлиента,
					ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
				ЗаписьЖурналаРегистрации("СерверЛояльности.СоздатьКартуКлиента",
					УровеньЖурналаРегистрации.Ошибка,,,
					Описание);
				ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонОписанияОшибки,
					ДанныеКарты.ИдентификаторКартыКлиента,
					ОбработкаОшибок.ПредставлениеОшибкиДляПользователя(ИнформацияОбОшибке));
				
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Результат = КартаЛояльности;
	
КонецПроцедуры

// Заполняет структуру ответа http-сервиса данными дисконтной карты
//
// Параметры:
//  ДисконтнаяКарта - ОпределяемыйТип.КартаЛояльностиСерверЛояльности
//  СтруктураОтвета - см. СерверЛояльностиПоставщикДанных.ПолучитьСтруктуруОтвета
//  КартаСуществует - Булево
//
Процедура ЗаполнитьСтруктуруОтветаДаннымиКарты(ДисконтнаяКарта, СтруктураОтвета, КартаСуществует = Ложь) Экспорт 
	
	Данные = ПолучитьДанныеКартыЛояльности(ДисконтнаяКарта);
	
	Если Данные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СтруктураОтвета.CardID 			= Данные.НомерКарты;
	СтруктураОтвета.CardRef 		= XMLСтрока(ДисконтнаяКарта);
	СтруктураОтвета.Client 			= Данные.ПартнерПредставление;
	СтруктураОтвета.PhoneNumber		= Данные.НомерТелефона;
	СтруктураОтвета.Email 			= Данные.ЭлектроннаяПочта;
	СтруктураОтвета.ExistingCard	= КартаСуществует;
	СтруктураОтвета.DateOfBirth		= Данные.ДатаРождения;
	СтруктураОтвета.PaymentPercent	= Данные.МаксимальныйПроцентОплатыБонусами;

КонецПроцедуры

// Заполняет структуру ответа http-сервиса данными клиента
//
// Параметры:
//  Клиент - СправочникСсылка.Контрагенты
//  СтруктураОтвета - см. СерверЛояльностиПоставщикДанных.ПолучитьСтруктуруОтвета
//
Процедура ЗаполнитьСтруктуруОтветаДаннымиКлиента(Клиент, СтруктураОтвета) Экспорт
	
	Данные = ПолучитьДанныеКлиента(Клиент);
	
	Если Данные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СтруктураОтвета.Client 			= Данные.ПартнерПредставление;
	СтруктураОтвета.PhoneNumber		= Данные.НомерТелефона;
	СтруктураОтвета.Email 			= Данные.ЭлектроннаяПочта;
	СтруктураОтвета.ExistingCard	= Истина;
	СтруктураОтвета.DateOfBirth		= Данные.ДатаРождения;
	СтруктураОтвета.ElseClient		= Истина;
	
КонецПроцедуры

// Возвращает данные об использовании автоматических скидок
//
// Параметры:
//  Результат - Булево - Истина, автоматические скидки используются,
//						 Ложь, автоматические скидки не используются.
//
Процедура ИспользоватьАвтоматическиеСкидки(Результат) Экспорт
	
	Результат = Константы.ИспользоватьАвтоматическиеСкидкиВПродажах.Получить();
	
КонецПроцедуры

// Рассчитывает автоматические скидки
//
// Параметры:
//  ПараметрыРасчета - Структура - см. ДесериализоватьПараметрыРасчета
//  Результат - Структура - структура данных с рассчитанными автоматическими скидками.
//
Процедура РассчитатьАвтоматическиеСкидки(ПараметрыРасчета, Результат) Экспорт
	
	ЧекККМОбъект = Документы.ЧекККМ.СоздатьДокумент();
	ЗаполнитьЗначенияСвойств(ЧекККМОбъект, ПараметрыРасчета);
	
	Для Каждого СтрокаТовар Из ПараметрыРасчета.Товары Цикл
		НоваяСтрока = ЧекККМОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовар);
	КонецЦикла;
	
	ВходныеПараметры = Новый Структура;
	ВходныеПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	ВходныеПараметры.Вставить("ПрименятьКОбъекту", Истина);
	ВходныеПараметры.Вставить("ТолькоПредварительныйРасчет", Ложь);
	
	УправляемыеСкидки = Новый СписокЗначений();
	УправляемыеСкидки.ЗагрузитьЗначения(ПараметрыРасчета.ВыбранныеУправляемыеСкидки.ВыгрузитьКолонку("СкидкаНаценка"));
	ВходныеПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	
	РезультатРасчета = СкидкиНаценкиСервер.Рассчитать(ЧекККМОбъект, ВходныеПараметры);
	
	СериализованнаяСтруктураСкидок = СериализоватьРезультатРасчета(ЧекККМОбъект);
	
	ТаблицаСкидкиНаценки = РезультатРасчета.ТаблицаСкидкиНаценки;
	
	// Заполним связь скидки со строкой таблицы товаров
	ТаблицаСкидкиНаценки.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Строка", , , Новый КвалификаторыСтроки(36)));
	Для Каждого СтрокаСкидки Из ТаблицаСкидкиНаценки Цикл
		Если ЗначениеЗаполнено(СтрокаСкидки.КлючСвязи) Тогда // Иначе, идентификатор строки не требуется
			СтрокиТоваровСкидки = ПараметрыРасчета.Товары.НайтиСтроки(Новый Структура("КлючСвязи", СтрокаСкидки.КлючСвязи));
			Если СтрокиТоваровСкидки.Количество() Тогда
				СтрокаСкидки.ИдентификаторСтроки = СтрокиТоваровСкидки[0].ИдентификаторСтроки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ДополнитьСтруктуруСкидокТаблицейСкидокНаценок(СериализованнаяСтруктураСкидок, ТаблицаСкидкиНаценки);
	
	ДополнитьСтруктуруСкидокСообщениями(СериализованнаяСтруктураСкидок, ЧекККМОбъект);
	
	Если ЧекККМОбъект.БонусныеБаллы.Количество() > 0 Тогда
		ДополнитьСтруктуруСкидокТаблицейБонусов(СериализованнаяСтруктураСкидок, РезультатРасчета, ЧекККМОбъект);
	КонецЕсли;
	
	Результат = СериализованнаяСтруктураСкидок;
	
КонецПроцедуры

// Десериализует параметры расчета автоматических скидок, полученными в формате JSON
//
// Параметры:
//  ВходящиеДанные - Строка - содержит строковое значение тела запроса в формате JSON.
//  Результат - Структура - структура данных с десереализованными параметрами расчета автоматических скидок:
//    * ВходныеПараметры				 - Структура:
//       * ТолькоПредварительныйРасчет - Булево
//    * Товары							 - ТаблицаЗначений
//    * ВалютаУправленческогоУчета		 - СправочникСсылка.Валюты
//    * Пользователь					 - Неопределено
//    * ТекущаяДата						 - Дата
//    * Дата							 - Дата
//    * ТолькоСообщенияПослеОформления	 - Булево
//    * Регистратор						 - ДокументСсылка.ЧекККМ
//    * Ссылка							 - ДокументСсылка.ЧекККМ
//    * СуммаВключаетНДС				 - Булево
//    * СкидкиРассчитаны				 - Булево
//    * ДисконтнаяКарта					 - СправочникСсылка.КартыЛояльности
//    * ВидДисконтнойКарты				 - Неопределено
//    * Контрагент						 - Неопределено
//    * ПроцентСкидкиПоДисконтнойКарте	 - Число
//    * Склад							 - Неопределено
//    * ВалютаДокумента					 - Неопределено
//    * ВидЦен							 - СправочникСсылка.ВидыЦен
//    * ВалютаДокумента					 - СправочникСсылка.Валюты
//
Процедура ДесериализоватьПараметрыРасчета(ВходящиеДанные, Результат) Экспорт
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("ЕстьОшибки", Ложь);
	ПараметрыРасчета.Вставить("ОписаниеОшибки", "");
	
	Попытка
		
		ЧтениеJSON = Новый ЧтениеJSON();
		ЧтениеJSON.УстановитьСтроку(ВходящиеДанные);
		ВходящиеДанныеВJSON = ПрочитатьJSON(ЧтениеJSON, , "CurrentDate", ФорматДатыJSON.ISO);
		ЧтениеJSON.Закрыть();
		
		Если ПроверитьКорректностьВходящихДанных(ВходящиеДанныеВJSON, ПараметрыРасчета) Тогда
			
			Регистратор = Документы.ЧекККМ.ПустаяСсылка();
			ДисконтнаяКарта = Неопределено;
			ПолучитьДисконтнуюКарту(ВходящиеДанныеВJSON, "LoyaltyCardsList", ДисконтнаяКарта);
			
			ВходныеПараметры = Новый Структура;
			ВходныеПараметры.Вставить("ТолькоПредварительныйРасчет", Ложь);
			
			// Бонусная программа
			Если ЗначениеЗаполнено(ДисконтнаяКарта) Тогда
				РеквизитыБонуснойПрограммы = БонусныеБаллыСервер.БонуснаяПрограммаКартыЛояльности(ДисконтнаяКарта);
				Если ЗначениеЗаполнено(РеквизитыБонуснойПрограммы.БонуснаяПрограммаЛояльности) Тогда
					ВходныеПараметры.Вставить("БонуснаяПрограмма", РеквизитыБонуснойПрограммы.БонуснаяПрограммаЛояльности);
					ВходныеПараметры.Вставить("ПрименятьКОбъекту", Истина);
				КонецЕсли;
				ПараметрыРасчета.Вставить("ВидДисконтнойКарты", РеквизитыБонуснойПрограммы.ВидКартыЛояльности);
				ПараметрыРасчета.Вставить("Партнер", РеквизитыБонуснойПрограммы.Партнер);
				ПараметрыРасчета.Вставить("ПроцентСкидкиПоДисконтнойКарте", РеквизитыБонуснойПрограммы.МаксимальныйПроцентОплатыБонусами);
			Иначе
				ПараметрыРасчета.Вставить("ВидДисконтнойКарты", Справочники.ВидыКартЛояльности.ПустаяСсылка());
				ПараметрыРасчета.Вставить("Партнер", Справочники.Партнеры.ПустаяСсылка());
				ПараметрыРасчета.Вставить("ПроцентСкидкиПоДисконтнойКарте", 0);
			КонецЕсли;
			
			ПараметрыРасчета.Вставить("Товары", ПолучитьДесериализованнуюТаблицуТоваров(ВходящиеДанныеВJSON, "Goods"));
			ПараметрыРасчета.Вставить("ВыбранныеУправляемыеСкидки", ПолучитьДесериализованнуюТаблицуВыбранныхУправляемыхСкидок(ВходящиеДанныеВJSON, "ControlledDiscountsList"));
			ПараметрыРасчета.Вставить("ВалютаУправленческогоУчета", Константы.ВалютаУправленческогоУчета.Получить());
			ПараметрыРасчета.Вставить("Пользователь", Неопределено);
			ПараметрыРасчета.Вставить("ТекущаяДата", ВходящиеДанныеВJSON.CurrentDate);
			ПараметрыРасчета.Вставить("Дата", ВходящиеДанныеВJSON.CurrentDate);
			ПараметрыРасчета.Вставить("ТолькоСообщенияПослеОформления", Ложь);
			ПараметрыРасчета.Вставить("Регистратор", Регистратор);
			ПараметрыРасчета.Вставить("Ссылка", Регистратор);
			ПараметрыРасчета.Вставить("СуммаВключаетНДС", Истина);
			ПараметрыРасчета.Вставить("СкидкиРассчитаны", Ложь);
			ПараметрыРасчета.Вставить("КартаЛояльности", ДисконтнаяКарта);
			ПараметрыРасчета.Вставить("ГраницаДокумента", Новый Граница(ВходящиеДанныеВJSON.CurrentDate, ВидГраницы.Исключая));
			
			ПараметрыРасчета.Вставить("Склад", СерверЛояльностиПоставщикДанных.ПолучитьДесериализованноеСсылочноеЗначение(ВходящиеДанныеВJSON, "RetailStore", "Справочники.Склады"));
			
			Если ЗначениеЗаполнено(ПараметрыРасчета.Склад) Тогда
				ПараметрыРасчета.Вставить("ВидЦены", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыРасчета.Склад, "РозничныйВидЦены"));
				ПараметрыРасчета.Вставить("Валюта", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыРасчета.ВидЦены, "ВалютаЦены"));
			Иначе
				ПараметрыРасчета.Вставить("ВидЦены", Справочники.ВидыЦен.ПустаяСсылка());
				ПараметрыРасчета.Вставить("Валюта", ПараметрыРасчета.ВалютаУправленческогоУчета);
			КонецЕсли;
			
			ПараметрыРасчета.Вставить("ВходныеПараметры", ВходныеПараметры);
			
			ПараметрыРасчета.Вставить("ВернутьДанныеКарты", Ложь);
			Если ВходящиеДанныеВJSON.Свойство("GetLoyaltyCardData") Тогда
				ПараметрыРасчета.ВернутьДанныеКарты = ВходящиеДанныеВJSON.GetLoyaltyCardData;
			КонецЕсли;
			ПараметрыРасчета.Вставить("БлокироватьКарту", "0");
			Если ВходящиеДанныеВJSON.Свойство("BlockBonuses") Тогда
				ПараметрыРасчета.БлокироватьКарту = ВходящиеДанныеВJSON.BlockBonuses;
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		
		Описание = СтрШаблон(НСтр("ru = 'Ошибка преобразования тела запроса по причине: %1'"), ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПараметрыРасчета.ЕстьОшибки = Истина;
		ПараметрыРасчета.ОписаниеОшибки = Описание;
		
		ЗаписьЖурналаРегистрации("СерверЛояльности.АвтоматическийРасчетСкидок",
			УровеньЖурналаРегистрации.Ошибка,,,
			Описание);
		
	КонецПопытки;
	
	Результат = ПараметрыРасчета;
	
КонецПроцедуры

// Проверяет использование функции оплаты подарочными сертификатами
//
// Параметры:
//  Результат - Булево - переменная, в которую будет записан результат проверки использования
//			 функции оплаты подарочными сертификатами.
//
Процедура ПроверитьИспользованиеПодарочныхСертификатов(Результат) Экспорт
	
	Результат = Ложь;
	
КонецПроцедуры

// Заполняет полученную структуру реквизитов именами реквизитов документа продажи (ЧекККМ)
//
// Параметры:
//  ИменаРеквизитов - Структура:
//    * ИмяРеквизитаДисконтнаяКарта - Строка
//    * ИмяРеквизитаТаблицаОплата - Строка
//    * ИмяРеквизитаПодарочныйСертификат - Строка
//    * ИмяРеквизитаСерийныйНомер - Строка
//    * ИмяРеквизитаСуммаБонусов - Строка
//    * ИмяРеквизитаТаблицаПогашенияСертификатов - Строка
//    * ИмяРеквизитаСуммаПогашенияСертификата - Строка
//
Процедура ЗаполнитьИменаРеквизитовПоставщикаДанных(ИменаРеквизитов) Экспорт
	
	ИменаРеквизитов = Новый Структура;
	ИменаРеквизитов.Вставить("ИмяРеквизитаДисконтнаяКарта", "КартаЛояльности");
	ИменаРеквизитов.Вставить("ИмяРеквизитаТаблицаОплата", "Товары");
	ИменаРеквизитов.Вставить("ИмяРеквизитаСуммаБонусов", "СуммаБонусныхБалловКСписаниюВВалюте");
	
КонецПроцедуры

// Заполняет структуру ответа http-сервиса данными найденных карт
//
// Параметры:
//  ПараметрыМетода - Структура - структура, содержащая в себе параметры поиска карт:
//    * ИдентификаторКартыКлиента - Строка - код карты лояльности
//    * НомерТелефона - Строка - номер телефона или последняя часть номера телефона для поиска
//    * АдресЭП - Строка - адрес электронной почты владельца карты для поиска
//  СтруктураОтвета - см. СерверЛояльностиПоставщикДанных.ПолучитьСтруктуруОтвета
//
Процедура НайтиКартыЛояльности(ПараметрыМетода, СтруктураОтвета) Экспорт
	
	КартаКлиента	= ПолучитьКартуПоУникальномуИдентификатору(ПараметрыМетода.УникальныйИдентификаторКарты);
	ВладелецКарты	= ПолучитьВладельцаКартыПоУникальномуИдентификатору(ПараметрыМетода.УникальныйИдентификаторВладельцаКарты);
	Если ЗначениеЗаполнено(КартаКлиента) Тогда
		НайтиКартуЛояльностиПоСсылке(КартаКлиента, СтруктураОтвета);
	КонецЕсли;
	Если СтруктураОтвета.LoyaltyCardsList.Количество() = 0 И ЗначениеЗаполнено(ВладелецКарты) Тогда
		НайтиКартуЛояльностиПоВладельцу(ВладелецКарты, СтруктураОтвета);
	КонецЕсли;
	Если СтруктураОтвета.LoyaltyCardsList.Количество() = 0
			И ЗначениеЗаполнено(ПараметрыМетода.ИдентификаторКартыКлиента) Тогда
		НайтиКартуЛояльностиПоНомеруКарты(ПараметрыМетода.ИдентификаторКартыКлиента, СтруктураОтвета);
	КонецЕсли;
	Если СтруктураОтвета.LoyaltyCardsList.Количество() = 0 Тогда
		СтрокаПоискаТелефона = ПодготовитьСтрокуПоискаПоНомеруТелефона(ПараметрыМетода.НомерТелефона);
		Если СтрокаПоискаТелефона <> "" Или ПараметрыМетода.АдресЭП <> "" Тогда
			НайтиКартыЛояльностиПоКонтактнойинформации(СтрокаПоискаТелефона, ПараметрыМетода.АдресЭП, СтруктураОтвета);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет структуру ответа http-сервиса номерами и уникальным идентификатором дисконтной карты
//
// Параметры:
//  КартаКлиента - ОпределяемыйТип.КартаЛояльностиСерверЛояльности
//  СтруктураОтвета - см. СерверЛояльностиПоставщикДанных.ПолучитьСтруктуруОтвета
//
Процедура ЗаполнитьСтруктуруОтветаНомерамиКарты(КартаКлиента, СтруктураОтвета) Экспорт
	
	НомераКарты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(КартаКлиента, "Штрихкод,МагнитныйКод");
	
	СтруктураОтвета.CardRef = XMLСтрока(КартаКлиента);
	СтруктураОтвета.Barcode = НомераКарты.Штрихкод;
	СтруктураОтвета.MagneticCode = НомераКарты.МагнитныйКод;
	
КонецПроцедуры

// Заполняет список видов карт
//
// Параметры:
//  Результат - Неопределено, ТаблицаЗначений - возвращаемое значение
//
Процедура ЗаполнитьТаблицуВидовКарт(Результат) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВидКарты = Константы.ВидКартыСерверЛояльности.Получить();
	
	Если ЗначениеЗаполнено(ВидКарты) Тогда 
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.Идентификатор	= Строка(ВидКарты.Ссылка.УникальныйИдентификатор());
		НоваяСтрока.Наименование	= ВидКарты.Наименование;
		НоваяСтрока.ЭтоИменнаяКарта	= ВидКарты.Персонализирована;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВидыКартЛояльности.Ссылка КАК Ссылка,
		|	ВидыКартЛояльности.Наименование КАК Наименование,
		|	ВидыКартЛояльности.Персонализирована КАК ЭтоИменнаяКарта
		|ИЗ
		|	Справочник.ВидыКартЛояльности КАК ВидыКартЛояльности
		|ГДЕ
		|	НЕ ВидыКартЛояльности.ПометкаУдаления
		|	И ВидыКартЛояльности.ДатаНачалаДействия <= &ДатаСеанса
		|	И (ВидыКартЛояльности.ДатаОкончанияДействия = ДАТАВРЕМЯ(1,1,1)
		|		ИЛИ ВидыКартЛояльности.ДатаОкончанияДействия >= &ДатаСеанса)";
		
		Запрос.УстановитьПараметр("ДатаСеанса", ТекущаяДатаСеанса());
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = Результат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.Идентификатор = Строка(Выборка.Ссылка.УникальныйИдентификатор());
		КонецЦикла;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Заполняет структуру ответа Сервера лояльности данными об оборотах
//
// Параметры:
//  ДисконтнаяКарта - ОпределяемыйТип.КартаЛояльностиСерверЛояльности - 
//                    карта лояльности, по которой будут заполнены данные о бонусах
//  СтруктураОтвета - см. СерверЛояльностиПоставщикДанных.ПолучитьСтруктуруОтвета
//
Процедура ЗаполнитьДанныеОбОборотахПродаж(ДисконтнаяКарта, СтруктураОтвета) Экспорт
	
	СтруктураОтвета.SellCount = ПолучитьОборотыПродажКлиента(ДисконтнаяКарта);
	
КонецПроцедуры

// Заполняет карту лояльности клиента
//
// Параметры:
//  СтрокаУникальногоИдентификатора - Строка - уникальный идентификатор карты,
//  КартаКлиента - СправочникСсылка.КартыЛояльности - карта клиента
//
Процедура ПолучитьКартуКлиентаПоУникальномуИдентификатору(СтрокаУникальногоИдентификатора, КартаКлиента) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	КартаКлиента = Справочники.КартыЛояльности.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаУникальногоИдентификатора));
	
КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает данные об остатках номенклатуры в разрезе складов и характеристик. 
// Используется в методе HTTP-сервиса Сервера лояльности.
// Например, в магазине закончился товар с определенной характеристикой и кассир может проверить в каких магазинах
// есть этот товар и с какими характеристиками.
//
// Параметры:
//  ПараметрыМетода - Структура - содержит параметры получения остатков.
//  СтруктураОтвета - Структура - содержит данные о балансе сертификата,
//                                см. СерверЛояльностиПоставщикДанных.ПолучитьСтруктуруОтвета
//
Процедура ОстаткиПоНоменклатуреВРазрезеСкладовИХарактеристик(ПараметрыМетода, СтруктураОтвета) Экспорт
	
	МассивОстатков = Новый Массив;
	
	ТаблицаОстатков = ТаблицаОстатковПоПараметрам(ПараметрыМетода);
	
	Для Каждого СтрокаОстатков Из ТаблицаОстатков Цикл
		СтруктураОстатков = СерверЛояльностиПоставщикДанных.ПолучитьСтруктуруОстатков();
		СтруктураОстатков.LeftoverLocation = СтрокаОстатков.МестоХранения;
		СтруктураОстатков.Variant = СтрокаОстатков.Характеристика;
		СтруктураОстатков.Leftover = СтрокаОстатков.Остаток;
		СтруктураОстатков.Reserved = СтрокаОстатков.ВРезерве;
		СтруктураОстатков.FreeLeftover = СтрокаОстатков.Свободно;
		
		МассивОстатков.Добавить(СтруктураОстатков);
	КонецЦикла;
	
	СтруктураОтвета.Вставить("LeftoversList", МассивОстатков);
	
КонецПроцедуры

// Возвращает таблицу остатков
//
// Параметры:
//  ПараметрыПолученияОстатков - Структура - содержит параметры получения остатков.
//
// Возвращаемое значение:
//  ТаблицаЗначений:
//   *МестоХранения - СправочникСсылка.Склады
//   *Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры
//   *Остаток - Число - 
//   *ВРезерве - Число -
//   *Свободно - Число -
//
Функция ТаблицаОстатковПоПараметрам(ПараметрыПолученияОстатков) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕССЫЛКИ(ОстаткиТоваров.Характеристика), """") КАК Характеристика,
	|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕССЫЛКИ(ОстаткиТоваров.Склад), """") КАК МестоХранения,
	|	&Упаковка КАК Упаковка,
	|	ОстаткиТоваров.ВНаличииОстаток КАК ОстатокВБазовыхЕИ,
	|	ОстаткиТоваров.РезервироватьНаСкладеОстаток 
	|			+ ОстаткиТоваров.РезервироватьПоМереПоступленияОстаток КАК ВРезервеВБазовыхЕИ
	|ПОМЕСТИТЬ ВТСвободныеОстатки
	|ИЗ
	|	РегистрНакопления.ЗапасыИПотребности.Остатки(, Номенклатура = &Номенклатура
	|	И Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)) КАК ОстаткиТоваров
	|ГДЕ
	|	ОстаткиТоваров.ВНаличииОстаток 
	|		- ОстаткиТоваров.РезервироватьНаСкладеОстаток 
	|		- ОстаткиТоваров.РезервироватьПоМереПоступленияОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСвободныеОстатки.МестоХранения КАК МестоХранения,
	|	ВТСвободныеОстатки.Характеристика КАК Характеристика,
	|	ВТСвободныеОстатки.ОстатокВБазовыхЕИ / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК Остаток,
	|	ВТСвободныеОстатки.ВРезервеВБазовыхЕИ / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК ВРезерве,
	|	(ВТСвободныеОстатки.ОстатокВБазовыхЕИ - ВТСвободныеОстатки.ВРезервеВБазовыхЕИ) / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК
	|		Свободно
	|ИЗ
	|	ВТСвободныеОстатки КАК ВТСвободныеОстатки";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Номенклатура", ПараметрыПолученияОстатков.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", ПараметрыПолученияОстатков.Характеристика);
	Запрос.УстановитьПараметр("Упаковка", ПараметрыПолученияОстатков.Упаковка);

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ВТСвободныеОстатки.Упаковка",
			"ВТСвободныеОстатки.Номенклатура"));

	ТаблицаОстатков = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаОстатков;
	
КонецФункции

// Возвращает структуру параметраов из http запроса
//
// Параметры:
//  ВходящиеДанные - Строка - содержит строковое значение тела запроса в формате JSON.
//  Результат - Структура - содержит в себе набор параметров, которые могут быть переданы через hhtp-запрос:
//    * Номенклатура 	- Строка
//    * Характеристика 	- Строка
//    * Упаковка 		- Строка
//
Процедура ПараметрыИзЗапросаПолучитьОстатки(ВходящиеДанные, Результат) Экспорт
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("ЕстьОшибки", Ложь);
	ПараметрыРасчета.Вставить("ОписаниеОшибки", "");
	
	Попытка
	
		ЧтениеJSON = Новый ЧтениеJSON();
		ЧтениеJSON.УстановитьСтроку(ВходящиеДанные);
		ВходящиеДанныеВJSON = ПрочитатьJSON(ЧтениеJSON, , "CurrentDate", ФорматДатыJSON.ISO);
		ЧтениеJSON.Закрыть();
		
		Номенклатура = СерверЛояльностиПоставщикДанных.ПолучитьДесериализованноеСсылочноеЗначение(ВходящиеДанныеВJSON, "Item", "Справочники.Номенклатура");
		Характеристика = СерверЛояльностиПоставщикДанных.ПолучитьДесериализованноеСсылочноеЗначение(ВходящиеДанныеВJSON, "Variant", "Справочники.ХарактеристикиНоменклатуры");
		Упаковка = СерверЛояльностиПоставщикДанных.ПолучитьДесериализованноеСсылочноеЗначение(ВходящиеДанныеВJSON, "Package", "Справочники.УпаковкиЕдиницыИзмерения");
		
		ПараметрыПолученияОстатков = Новый Структура("Номенклатура, Характеристика, Упаковка", Номенклатура, Характеристика, Упаковка);
		
	Исключение
		
		Описание = СтрШаблон(НСтр("ru = 'Ошибка преобразования тела запроса по причине: %1'"), ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПараметрыРасчета.ЕстьОшибки = Истина;
		ПараметрыРасчета.ОписаниеОшибки = Описание;
		
		ЗаписьЖурналаРегистрации("СерверЛояльности.ПолучитьОстатки",
			УровеньЖурналаРегистрации.Ошибка,,,
			Описание);
		
	КонецПопытки;
	
	Результат = ПараметрыПолученияОстатков;
	
КонецПроцедуры

Функция ПроверитьКорректностьВходящихДанных(ВходящиеДанные, ПараметрыРасчета)
	
	МассивПроверяемыхПараметров = МассивОбязательныхПараметровРасчетаСкидок();
	
	Для каждого ПроверяемыйПараметр Из МассивПроверяемыхПараметров Цикл
		Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ВходящиеДанные, ПроверяемыйПараметр) Тогда
			ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Во входящих параметрах не обнаружен параметр %1'"), ПроверяемыйПараметр);
			ПараметрыРасчета.ОписаниеОшибки = ПараметрыРасчета.ОписаниеОшибки + ОписаниеОшибки + ?(ПустаяСтрока(ПараметрыРасчета.ОписаниеОшибки), "", Символы.ПС);
			ПараметрыРасчета.ЕстьОшибки = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Не ПараметрыРасчета.ЕстьОшибки;
	
КонецФункции

Функция МассивОбязательныхПараметровРасчетаСкидок()
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить("ObjectTime");
	МассивПараметров.Добавить("LoyaltyCardsList");
	МассивПараметров.Добавить("Goods");
	МассивПараметров.Добавить("RetailStore");
	
	Возврат МассивПараметров;
	
КонецФункции

Функция ПолучитьДанныеКартыЛояльности(КартаЛояльности)
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(Партнеры.Ссылка, """") КАК ВладелецКарты,
	|	ЕСТЬNULL(Партнеры.НаименованиеПолное, """") КАК ПартнерПредставление,
	|	ВЫБОР
	|		КОГДА КартыЛояльности.Владелец.ТипКарты = ЗНАЧЕНИЕ(Перечисление.ТипыКарт.Штриховая)
	|			ТОГДА КартыЛояльности.Штрихкод
	|		ИНАЧЕ КартыЛояльности.МагнитныйКод
	|	КОНЕЦ КАК НомерКарты,
	|	ЕСТЬNULL(КонтактнаяИнформацияТелефон.Представление, """") КАК НомерТелефона,
	|	ЕСТЬNULL(КонтактнаяИнформацияЭлектроннаяПочта.Представление, """") КАК ЭлектроннаяПочта,
	|	ЕСТЬNULL(Партнеры.ДатаРождения, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаРождения,
	|	ЕСТЬNULL(ВидыКартЛояльности.БонуснаяПрограммаЛояльности.МаксимальныйПроцентОплатыБонусами, 0) КАК МаксимальныйПроцентОплатыБонусами
	|ИЗ
	|	Справочник.КартыЛояльности КАК КартыЛояльности
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры.КонтактнаяИнформация КАК КонтактнаяИнформацияТелефон
	|		ПО КартыЛояльности.Партнер = КонтактнаяИнформацияТелефон.Ссылка
	|			И (КонтактнаяИнформацияТелефон.ВидДляСписка = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонПартнера))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры.КонтактнаяИнформация КАК КонтактнаяИнформацияЭлектроннаяПочта
	|		ПО КартыЛояльности.Партнер = КонтактнаяИнформацияЭлектроннаяПочта.Ссылка
	|			И (КонтактнаяИнформацияЭлектроннаяПочта.ВидДляСписка = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailПартнера))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыКартЛояльности КАК ВидыКартЛояльности
	|		ПО КартыЛояльности.Владелец = ВидыКартЛояльности.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
	|		ПО КартыЛояльности.Партнер = Партнеры.Ссылка
	|ГДЕ
	|	КартыЛояльности.Ссылка = &КартаЛояльности
	|	И КартыЛояльности.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКартЛояльности.Действует)
	|";
	
	Запрос.УстановитьПараметр("КартаЛояльности", КартаЛояльности);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьДанныеКлиента(Клиент)
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Партнеры.Ссылка КАК ВладелецКарты,
	|	Партнеры.НаименованиеПолное КАК ПартнерПредставление,
	|	ЕСТЬNULL(КонтактнаяИнформацияТелефон.Представление, """") КАК НомерТелефона,
	|	ЕСТЬNULL(КонтактнаяИнформацияЭлектроннаяПочта.Представление, """") КАК ЭлектроннаяПочта,
	|	ЕСТЬNULL(Партнеры.ДатаРождения, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаРождения
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры.КонтактнаяИнформация КАК КонтактнаяИнформацияТелефон
	|		ПО Партнеры.Ссылка = КонтактнаяИнформацияТелефон.Ссылка
	|			И (КонтактнаяИнформацияТелефон.ВидДляСписка = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонПартнера))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры.КонтактнаяИнформация КАК КонтактнаяИнформацияЭлектроннаяПочта
	|		ПО Партнеры.Ссылка = КонтактнаяИнформацияЭлектроннаяПочта.Ссылка
	|			И (КонтактнаяИнформацияЭлектроннаяПочта.ВидДляСписка = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailПартнера))
	|ГДЕ
	|	Партнеры.Ссылка = &Клиент";
	
	Запрос.УстановитьПараметр("Клиент", Клиент);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПроверитьДанныеКарты(КодКарты, ВидКарты)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ШаблоныКодовКартЛояльности.Ссылка                                              КАК Ссылка,
	|	ШаблоныКодовКартЛояльности.Ссылка.Статус                                       КАК Статус,
	|	ШаблоныКодовКартЛояльности.Ссылка.Персонализирована                            КАК Персонализирована,
	|	ШаблоныКодовКартЛояльности.Ссылка.ТипКарты                                     КАК ТипКарты,
	|	ШаблоныКодовКартЛояльности.Ссылка.АвтоматическаяРегистрацияПриПервомСчитывании КАК АвтоматическаяРегистрацияПриПервомСчитывании,
	|	ШаблоныКодовКартЛояльности.Ссылка.ДатаНачалаДействия                           КАК ДатаНачалаДействия,
	|	ШаблоныКодовКартЛояльности.Ссылка.ДатаОкончанияДействия                        КАК ДатаОкончанияДействия,
	|	ШаблоныКодовКартЛояльности.Ссылка.Организация                                  КАК Организация
	|ИЗ
	|	Справочник.ВидыКартЛояльности.ШаблоныКодовКартЛояльности КАК ШаблоныКодовКартЛояльности
	|ГДЕ
	|	ШаблоныКодовКартЛояльности.Ссылка = &ВидКарты
	|	И ШаблоныКодовКартЛояльности.НачалоДиапазонаШтрихкода <= &КодКарты
	|	И ШаблоныКодовКартЛояльности.КонецДиапазонаШтрихкода >= &КодКарты
	|	И ШаблоныКодовКартЛояльности.ДлинаШтрихкода = &ДлинаКода
	|	И ШаблоныКодовКартЛояльности.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВидовКартЛояльности.Действует)
	|";
	Запрос.УстановитьПараметр("ВидКарты", ВидКарты);
	Запрос.УстановитьПараметр("КодКарты", КодКарты);
	Запрос.УстановитьПараметр("ДлинаКода", СтрДлина(КодКарты));
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат Выборка.Следующий();
	
КонецФункции

// Получает действующий вид дисконтной карты по идентификатору
//
// Параметры:
//  ГУИДВидаКарты - УникальныйИдентификатор
//  
// Возвращаемое значение:
//  СправочникСсылка.ВидыКартЛояльности
//
Функция ПолучитьВидКартыЛояльности(ГУИДВидаКарты = Неопределено) Экспорт
	
	ВидКарты = Неопределено;
	
	Если ГУИДВидаКарты = Неопределено Тогда
		
		ВидКарты = Константы.ВидКартыСерверЛояльности.Получить();
		
		Если Не ЗначениеЗаполнено(ВидКарты) Тогда 
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	ВидыКартЛояльности.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ВидыКартЛояльности КАК ВидыКартЛояльности
			|ГДЕ
			|	НЕ ВидыКартЛояльности.ПометкаУдаления
			|	И ВидыКартЛояльности.Персонализирована";
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Выборка = РезультатЗапроса.Выбрать();
			
			Если Выборка.Следующий() Тогда
				ВидКарты = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		Если ЗначениеЗаполнено(ГУИДВидаКарты)
				И Не ГУИДВидаКарты = ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор() Тогда
			ВидКарты = Справочники.ВидыКартЛояльности.ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИДВидаКарты));
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВидКарты;
	
КонецФункции

Функция ПолучитьДесериализованнуюТаблицуТоваров(ВходящиеДанные, ИмяПараметра)
	
	ОписаниеТиповЧисло = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15,2));
	ОписаниеТиповЧислоДляКоличества = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15,3));
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТоваров.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ТаблицаТоваров.Колонки.Добавить("Заказ", Новый ОписаниеТипов("ДокументСсылка.ЗаказКлиента"));
	ТаблицаТоваров.Колонки.Добавить("ВидМинимальныхЦен", Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
	ТаблицаТоваров.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	ТаблицаТоваров.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС"));
	ТаблицаТоваров.Колонки.Добавить("КоличествоУпаковок", ОписаниеТиповЧислоДляКоличества);
	ТаблицаТоваров.Колонки.Добавить("Количество", ОписаниеТиповЧислоДляКоличества);
	ТаблицаТоваров.Колонки.Добавить("Сумма", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("Цена", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("КлючСвязи", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("ПроцентРучнойСкидки", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("СуммаРучнойСкидки", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("СуммаСкидкиОплатыБонусом", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("ПроцентАвтоматическойСкидки", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("СуммаАвтоматическойСкидки", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("Всего", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Строка"));
	
	МассивСтрокТаблицы = ВходящиеДанные[ИмяПараметра];
	
	ТаблицаСтавкиНДС = Новый ТаблицаЗначений;
	ТаблицаСтавкиНДС.Колонки.Добавить("СтавкаСтрока", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(10)));
	
	Для каждого СтрокаТаблицы Из МассивСтрокТаблицы Цикл
		НоваяСтрока = ТаблицаСтавкиНДС.Добавить();
		НоваяСтрока.СтавкаСтрока = СтрокаТаблицы.VATRate;
	КонецЦикла;
	
	СтавкаНДСПоНаименованию(ТаблицаСтавкиНДС);
	
	НомерСтроки = 1;
	
	Для каждого СтрокаТаблицы Из МассивСтрокТаблицы Цикл
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		НоваяСтрока.Номенклатура = СерверЛояльностиПоставщикДанных.ПолучитьДесериализованноеСсылочноеЗначение(СтрокаТаблицы, "Item", "Справочники.Номенклатура");
		НоваяСтрока.Упаковка = СерверЛояльностиПоставщикДанных.ПолучитьДесериализованноеСсылочноеЗначение(СтрокаТаблицы, "Package", "Справочники.УпаковкиЕдиницыИзмерения");
		НоваяСтрока.Характеристика = СерверЛояльностиПоставщикДанных.ПолучитьДесериализованноеСсылочноеЗначение(СтрокаТаблицы, "Variant", "Справочники.ХарактеристикиНоменклатуры");
		НоваяСтрока.Цена = СтрокаТаблицы.Price;
		НоваяСтрока.Сумма = СтрокаТаблицы.Amount;
		НоваяСтрока.Количество = СтрокаТаблицы.Count;
		НоваяСтрока.КоличествоУпаковок = СтрокаТаблицы.PackagesCount;
		НоваяСтрока.ПроцентАвтоматическойСкидки = СтрокаТаблицы.PercentOfAutomaticDiscount;
		НоваяСтрока.ПроцентРучнойСкидки = СтрокаТаблицы.PercentOfManualDiscount;
		НоваяСтрока.СуммаАвтоматическойСкидки = СтрокаТаблицы.AmountOfAutomaticDiscount;
		НоваяСтрока.СуммаРучнойСкидки = СтрокаТаблицы.AmountOfManualDiscount;
		НоваяСтрока.Всего = СтрокаТаблицы.TotalAmount;
		НоваяСтрока.СуммаНДС = СтрокаТаблицы.VATAmount;
		НоваяСтрока.ИдентификаторСтроки = СтрокаТаблицы.LineUID;
		
		НоваяСтрока.КлючСвязи = НомерСтроки;
		НоваяСтрока.НомерСтроки = НомерСтроки;
		
		СтрокаСтавка = ТаблицаСтавкиНДС.Найти(СтрокаТаблицы.VATRate, "СтавкаСтрока");
		Если СтрокаСтавка <> Неопределено Тогда
			НоваяСтрока.СтавкаНДС = СтрокаСтавка.Ссылка;
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	Возврат ТаблицаТоваров;
	
КонецФункции

Функция ПолучитьДесериализованнуюТаблицуВыбранныхУправляемыхСкидок(ВходящиеДанные, ИмяПараметра)
	
	ТаблицаВыбранныхУправляемыхСкидок = Новый ТаблицаЗначений;
	ТаблицаВыбранныхУправляемыхСкидок.Колонки.Добавить("ИдентификаторСкидки", Новый ОписаниеТипов("Строка"));
	ТаблицаВыбранныхУправляемыхСкидок.Колонки.Добавить("СкидкаНаценка", Новый ОписаниеТипов("СправочникСсылка.СкидкиНаценки"));
	ТаблицаВыбранныхУправляемыхСкидок.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Строка"));
	ТаблицаВыбранныхУправляемыхСкидок.Колонки.Добавить("КлючСвязи", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(10,0)));
	
	МассивСтрокТаблицы = ВходящиеДанные[ИмяПараметра];
	
	Для каждого СтрокаТаблицы Из МассивСтрокТаблицы Цикл
		
		НоваяСтрока = ТаблицаВыбранныхУправляемыхСкидок.Добавить();
		НоваяСтрока.ИдентификаторСкидки = СтрокаТаблицы.ControlledDiscountUID;
		НоваяСтрока.СкидкаНаценка = Справочники.СкидкиНаценки.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТаблицы.ControlledDiscountUID));
		НоваяСтрока.ИдентификаторСтроки = СтрокаТаблицы.LineUID;
		НоваяСтрока.КлючСвязи = СтрокаТаблицы.KeyRelation;
		
	КонецЦикла;
	
	Возврат ТаблицаВыбранныхУправляемыхСкидок;
	
КонецФункции

Процедура СтавкаНДСПоНаименованию(ТаблицаСтавкиНДС)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВТ.СтавкаСтрока КАК СтавкаСтрока
		|ПОМЕСТИТЬ ТаблицаСтавкиНДСВТ
		|ИЗ
		|	&ТаблицаСтавкиНДС КАК ВТ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаСтавкиНДСВТ.СтавкаСтрока КАК СтавкаСтрока,
		|	СтавкиНДС.Ссылка КАК Ссылка
		|ИЗ
		|	ТаблицаСтавкиНДСВТ КАК ТаблицаСтавкиНДСВТ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтавкиНДС КАК СтавкиНДС
		|		ПО (ВЫБОР
		|				КОГДА ПОДСТРОКА(СТРЗАМЕНИТЬ(СТРЗАМЕНИТЬ(НРЕГ(ТаблицаСтавкиНДСВТ.СтавкаСтрока), "" "", """"), ""%"", """"), 1, 3) = ПОДСТРОКА(СТРЗАМЕНИТЬ(СтавкиНДС.Наименование, ""%"", """"), 1, 3)
		|					ТОГДА ИСТИНА
		|			КОНЕЦ)
		|
		|СГРУППИРОВАТЬ ПО
		|	СтавкиНДС.Ссылка,
		|	ТаблицаСтавкиНДСВТ.СтавкаСтрока";
	
	Запрос.УстановитьПараметр("ТаблицаСтавкиНДС", ТаблицаСтавкиНДС);
	ТаблицаСтавкиНДС = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// Сериализует параметры расчета в структуру
//
// Параметры:
//  Объект - СправочникСсылка
//  
// Возвращаемое значение:
//  Массив из Структура:
//    *  Item						- см. ПолучитьСтруктуруСсылки
//    *  Variant					- см. ПолучитьСтруктуруСсылки
//    *  Package					- см. ПолучитьСтруктуруСсылки
//    *  Count						- Число
//    *  PackagesCount				- Число
//    *  Price						- Число
//    *  Amount						- Число
//    *  TotalAmount				- Число
//    *  LineUID					- Строка
//    *  VATRate					- Строка
//    *  VATAmount					- Число
//    *  AmountOfAutomaticDiscount	- Число
//    *  AmountOfManualDiscount		- Число
//    *  PercentOfAutomaticDiscount	- Число
//    *  PercentOfManualDiscount	- Число
//
Функция СериализоватьРезультатРасчета(Объект)
	
	СериализованнаяСтруктураСкидок = Новый Структура;
	
	МассивТоваров = Новый Массив;
	
	Для каждого СтрокаТовар Из Объект.Товары Цикл
	
		СтруктураСтроки = Новый Структура;
		
		СтруктураСтроки.Вставить("Item", ПолучитьСтруктуруСсылки(СтрокаТовар.Номенклатура));
		СтруктураСтроки.Вставить("Variant", ПолучитьСтруктуруСсылки(СтрокаТовар.Характеристика));
		СтруктураСтроки.Вставить("Package", ПолучитьСтруктуруСсылки(СтрокаТовар.Упаковка));
		СтруктураСтроки.Вставить("Count", СтрокаТовар.Количество);
		СтруктураСтроки.Вставить("PackagesCount", СтрокаТовар.КоличествоУпаковок);
		СтруктураСтроки.Вставить("Price", СтрокаТовар.Цена);
		СтруктураСтроки.Вставить("Amount", СтрокаТовар.Сумма);
		СтруктураСтроки.Вставить("TotalAmount", СтрокаТовар.Сумма);
		СтруктураСтроки.Вставить("LineUID", СтрокаТовар.ИдентификаторСтроки);
		СтруктураСтроки.Вставить("VATRate", Строка(СтрокаТовар.СтавкаНДС));
		СтруктураСтроки.Вставить("VATAmount", СтрокаТовар.СуммаНДС);
		СтруктураСтроки.Вставить("AmountOfAutomaticDiscount", СтрокаТовар.СуммаАвтоматическойСкидки);
		СтруктураСтроки.Вставить("AmountOfManualDiscount",  СтрокаТовар.СуммаРучнойСкидки);
		СтруктураСтроки.Вставить("PercentOfAutomaticDiscount",  СтрокаТовар.ПроцентАвтоматическойСкидки);
		СтруктураСтроки.Вставить("PercentOfManualDiscount", СтрокаТовар.ПроцентРучнойСкидки);
		
		МассивТоваров.Добавить(СтруктураСтроки);
		
	КонецЦикла;
		
	СериализованнаяСтруктураСкидок.Вставить("Goods", МассивТоваров);
	
	Возврат СериализованнаяСтруктураСкидок;
	
КонецФункции

// Возвращает структуру ссылки для последующего ее преобразования в JSON
//
// Параметры:
//  Ссылка - ЛюбаяСсылка
//
// Возвращаемое значение:
//  Структура:
//    *Ref  - Строка - строковое значение ГУИД переданной ссылки.
//    *Name - Строка - наименование переданной ссылки.
//
Функция ПолучитьСтруктуруСсылки(Ссылка)
	
	СтруктураСсылки = Новый Структура;
	СтруктураСсылки.Вставить("Ref", XMLСтрока(Ссылка));
	СтруктураСсылки.Вставить("Name", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Наименование"));
	
	Возврат СтруктураСсылки;
	
КонецФункции

// Получает дисконтную карту
//
// Параметры:
//  ВходящиеДанные - Структура - структура, содержащая в себе параметры http-запроса.
//  ИмяПараметра - Строка - имя параметра, в котором содержится искомая дисконтная карта.
//  Результат - Неопределено, ОпределяемыйТип.КартаЛояльностиСерверЛояльности - найденная дисконтная карта.
//
Процедура ПолучитьДисконтнуюКарту(ВходящиеДанные, ИмяПараметра, Результат)
	
	ДисконтнаяКарта = Справочники.КартыЛояльности.ПустаяСсылка();
	
	Если ТипЗнч(ВходящиеДанные) = Тип("Структура") Тогда
		
		МассивНомеровКарт = ВходящиеДанные[ИмяПараметра];
		
		Если ЗначениеЗаполнено(МассивНомеровКарт) Тогда
			
			ПараметрыПоискаКарты = Новый Структура;
			ПараметрыПоискаКарты.Вставить("ИдентификаторКартыКлиента", МассивНомеровКарт[0]);
			ПараметрыПоискаКарты.Вставить("Клиент", "");
			ПараметрыПоискаКарты.Вставить("НомерТелефона", "");
			ПараметрыПоискаКарты.Вставить("АдресЭП", "");
			ПараметрыПоискаКарты.Вставить("ГУИДВидаКарты", "");
			
			НайденнаяКарта = Неопределено;
			НайтиКартуКлиента(ПараметрыПоискаКарты, НайденнаяКарта);
			Если НайденнаяКарта <> Неопределено Тогда
				ДисконтнаяКарта = НайденнаяКарта;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = ДисконтнаяКарта;
	
КонецПроцедуры

// Ищет клиента по наименованию
// 
// Параметры:
//  ДанныеКарты - Структура - структура, содержащая данные карты лояльности:
//    * ИдентификаторКартыКлиента	 - Строка - код карты лояльности
//    * Клиент						 - Строка - ФИО владельца карты
//    * АдресЭП						 - Строка - адрес электронной почты владельца карты
//    * НомерТелефона				 - Строка - номер телефона владельца карты
//
// Возвращаемое значение:
//  Структура - результат поиска/ создания владельца карты:
//    * ВладелецКарты - СправочникСсылка.Партнеры, Неопределено - владелец карты лояльности
//    * СтатусПолучения - Число - возможные значения: 1-создан, 2-найден, 3-занят (найден похожий, но другой клиент)
//
Функция ПолучитьВладельцаКарты(ДанныеКарты) Экспорт
	
	РезультатФункции = Новый Структура("ВладелецКарты,СтатусПолучения", Неопределено, 0);
	
	НомерТелефона = ДанныеКарты.НомерТелефона;
	Запрос = Новый Запрос;
	Если ЗначениеЗаполнено(НомерТелефона) Тогда
		СтрокаПоискаТелефона = ПодготовитьСтрокуПоискаПоНомеруТелефона(НомерТелефона);
		Запрос.Текст = ТекстЗапросаКлиентаПоНомеруТелефона(СтрокаПоискаТелефона);
		Запрос.УстановитьПараметр("НомерТелефона", СтрокаПоискаТелефона);
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			РезультатФункции.Вставить("ВладелецКарты", Выборка.Клиент);
			РезультатФункции.Вставить("СтатусПолучения", 2);
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ДанныеКарты.АдресЭП) Тогда
		Запрос.Текст = ТекстЗапросаКлиентаСТелефономПоАдресуЭП();
		Запрос.УстановитьПараметр("АдресЭП", ДанныеКарты.АдресЭП);
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			РезультатФункции.Вставить("ВладелецКарты", Выборка.Клиент);
			Если Выборка.НомерТелефона = "" Тогда
				РезультатФункции.Вставить("СтатусПолучения", 2);
			Иначе
				РезультатФункции.Вставить("СтатусПолучения", 3);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если РезультатФункции.ВладелецКарты = Неопределено Тогда
		
		СтруктураДанныхКарты = КартыЛояльностиСервер.ИнициализироватьДанныеКартыЛояльности();
		
		СтруктураДанныхКарты.ГруппаДоступа			= Константы.ГруппаДоступаПартнераПриАвтоматическомСоздании.Получить();
		СтруктураДанныхКарты.Штрихкод				= ДанныеКарты.ИдентификаторКартыКлиента;
		СтруктураДанныхКарты.ФИОПартнера			= ДанныеКарты.Клиент;
		СтруктураДанныхКарты.ДатаРожденияПартнера	= ДанныеКарты.ДатаРождения;
		СтруктураДанныхКарты.НомерТелефона			= ДанныеКарты.НомерТелефона;
		СтруктураДанныхКарты.ЭлектроннаяПочта		= ДанныеКарты.АдресЭП;
		СтруктураДанныхКарты.СоздаватьКонтрагента	= Истина;
		
		ВладелецКарты = КартыЛояльностиСервер.СоздатьПартнераДержателяКартыЛояльности(СтруктураДанныхКарты);
		РезультатФункции.Вставить("ВладелецКарты", ВладелецКарты);
		РезультатФункции.Вставить("СтатусПолучения", 1);
		
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ПолучитьКартуПоУникальномуИдентификатору(СтрокаУникальногоИдентификатора)
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатФункции = Неопределено;
	Если ЗначениеЗаполнено(СтрокаУникальногоИдентификатора)
			И Не СтрокаУникальногоИдентификатора = ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор() Тогда
			
		РезультатФункции
			= Справочники.КартыЛояльности.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаУникальногоИдентификатора));
			
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ПолучитьВладельцаКартыПоУникальномуИдентификатору(СтрокаУникальногоИдентификатора)
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатФункции = Неопределено;
	Если ЗначениеЗаполнено(СтрокаУникальногоИдентификатора)
			И Не СтрокаУникальногоИдентификатора = ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор() Тогда
			
		РезультатФункции
			= Справочники.Партнеры.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаУникальногоИдентификатора));
			
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура НайтиКартуЛояльностиПоСсылке(КартаКлиента, СтруктураОтвета)
	
	ЗапросКарт = Новый Запрос;
	ЗапросКарт.Текст = ТекстЗапросаКартыЛояльностиПоСсылке();
	ЗапросКарт.УстановитьПараметр("КартаЛояльности", КартаКлиента);
	ЗапросКарт.УстановитьПараметр("ПериодЗапроса", КонецДня(ТекущаяДатаСеанса()));
	ЗаполнитьОписанияКартПоРезультатуЗапроса(ЗапросКарт, СтруктураОтвета);
	
КонецПроцедуры

Процедура НайтиКартуЛояльностиПоВладельцу(ВладелецКарты, СтруктураОтвета)
	
	ЗапросКарт = Новый Запрос;
	ЗапросКарт.Текст = ТекстЗапросаКартЛояльностиПоВладельцуКарты();
	ЗапросКарт.УстановитьПараметр("ВладелецКарты", ВладелецКарты);
	ЗапросКарт.УстановитьПараметр("ПериодЗапроса", КонецДня(ТекущаяДатаСеанса()));
	ЗаполнитьОписанияКартПоРезультатуЗапроса(ЗапросКарт, СтруктураОтвета);
	
КонецПроцедуры

Процедура НайтиКартуЛояльностиПоНомеруКарты(ИдентификаторКартыКлиента, СтруктураОтвета)

	ЗапросКарт = Новый Запрос;
	ЗапросКарт.Текст = ТекстЗапросаКартЛояльностиПоНомеру();
	ЗапросКарт.УстановитьПараметр("ИдентификаторКартыКлиента", ИдентификаторКартыКлиента);
	ЗапросКарт.УстановитьПараметр("ПериодЗапроса", КонецДня(ТекущаяДатаСеанса()));
	ЗаполнитьОписанияКартПоРезультатуЗапроса(ЗапросКарт, СтруктураОтвета);
	
КонецПроцедуры

Процедура НайтиКартыЛояльностиПоКонтактнойинформации(СтрокаПоискаТелефона, АдресЭП, СтруктураОтвета)
	
	ЗапросКарт = Новый Запрос;
	ЗапросКарт.Текст = ТекстЗапросаКартЛояльностиПоКонтактнойИнформации(СтрокаПоискаТелефона);
	ЗапросКарт.УстановитьПараметр("НомерТелефона", СтрокаПоискаТелефона);
	ЗапросКарт.УстановитьПараметр("АдресЭП", АдресЭП);
	ЗапросКарт.УстановитьПараметр("ПериодЗапроса", КонецДня(ТекущаяДатаСеанса()));
	ЗаполнитьОписанияКартПоРезультатуЗапроса(ЗапросКарт, СтруктураОтвета);
	
КонецПроцедуры

Процедура ЗаполнитьОписанияКартПоРезультатуЗапроса(ЗапросКарт, СтруктураОтвета)
	
	РезультатЗапроса = ЗапросКарт.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ВыборкаКарт = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаКарт.Следующий() Цикл
			ОписаниеКарты = СерверЛояльностиПоставщикДанных.СтруктураКартыЛояльности();
			ЗаполнитьОписаниеКарты(ОписаниеКарты, ВыборкаКарт);
			СтруктураОтвета.LoyaltyCardsList.Добавить(ОписаниеКарты);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОписаниеКарты(ОписаниеКарты, Данные)
	
	ОписаниеКарты.ClientName				= Данные.ПартнерНаименование;
	ОписаниеКарты.IsPerson					= (Данные.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо);
	ОписаниеКарты.DateOfBirth				= Данные.ДатаРождения;
	ОписаниеКарты.Phone						= Данные.НомерТелефона;
	ОписаниеКарты.Email						= Данные.АдресЭП;
	ОписаниеКарты.Barcode					= Данные.Штрихкод;
	ОписаниеКарты.MagneticCode				= Данные.МагнитныйКод;
	ОписаниеКарты.CardGUID					= Строка(Данные.Карта.УникальныйИдентификатор());
	ОписаниеКарты.ClientGUID				= Строка(Данные.Партнер.УникальныйИдентификатор());
	ОписаниеКарты.IsBlocked					= Данные.БонусыЗаблокированы;
	ОписаниеКарты.BonusData.PaymentPercent	= Данные.МаксимальныйПроцентОплатыБонусами;
	ОписаниеКарты.BonusData.BonusCount		= ?(ОписаниеКарты.IsBlocked, 0, Данные.ОстатокБонусов);
	ОписаниеКарты.BonusData.BonusCurrency	= Данные.КодВалютыКонвертацииБонусов;
	ОписаниеКарты.BonusData.BonusRate		= Данные.КурсКонвертацииБонусовВВалюту;
	ОписаниеКарты.SellCount					= Данные.ПродажиОборот;
	ОписаниеКарты.SearchType				= ТипПоискаПоКоду(Данные.ТипПоиска);
	
КонецПроцедуры

Функция ТекстЗапросаКлиентаПоНомеруТелефона(СтрокаПоискаТелефона)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ПартнерыКонтактнаяИнформация.Ссылка КАК Клиент
	|ИЗ
	|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	|ГДЕ
	|	ПартнерыКонтактнаяИнформация.НомерТелефона = &НомерТелефона
	|	И ПартнерыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|	И НЕ ПартнерыКонтактнаяИнформация.Ссылка.ПометкаУдаления";
	
	Если ЗначениеЗаполнено(СтрокаПоискаТелефона) И Лев(СтрокаПоискаТелефона, 1) = "%" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НомерТелефона = &НомерТелефона",
			"НомерТелефона ПОДОБНО &НомерТелефона");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаКлиентаСТелефономПоАдресуЭП()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ПартнерыКонтактнаяИнформацияАдресЭП.Ссылка КАК Клиент,
	|	ЕСТЬNULL(ПартнерыКонтактнаяИнформацияТелефон.НомерТелефона, """") КАК НомерТелефона
	|ИЗ
	|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформацияАдресЭП
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформацияТелефон
	|		ПО ПартнерыКонтактнаяИнформацияАдресЭП.Ссылка = ПартнерыКонтактнаяИнформацияТелефон.Ссылка
	|			И (ПартнерыКонтактнаяИнформацияТелефон.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	|			И (НЕ ПартнерыКонтактнаяИнформацияТелефон.НомерТелефона = """")
	|ГДЕ
	|	ПартнерыКонтактнаяИнформацияАдресЭП.АдресЭП = &АдресЭП
	|	И НЕ ПартнерыКонтактнаяИнформацияАдресЭП.Ссылка.ПометкаУдаления
	|	И ПартнерыКонтактнаяИнформацияАдресЭП.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаКартЛояльностиПоВладельцуКарты()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КартыЛояльности.Ссылка КАК Карта,
	|	КартыЛояльности.Партнер КАК Партнер,
	|	КартыЛояльности.Владелец.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
	|	1 КАК ТипПоиска
	|ПОМЕСТИТЬ КартыЛояльности
	|ИЗ
	|	Справочник.КартыЛояльности КАК КартыЛояльности
	|ГДЕ
	|	КартыЛояльности.Партнер = &ВладелецКарты 
	|	И НЕ КартыЛояльности.ПометкаУдаления
	|	И КартыЛояльности.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКартЛояльности.Действует)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|" + ОбщаяЧастьЗапросаКартЛояльности();
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаКартыЛояльностиПоСсылке()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КартыЛояльности.Ссылка КАК Карта,
	|	КартыЛояльности.Партнер КАК Партнер,
	|	КартыЛояльности.Владелец.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
	|	0 КАК ТипПоиска
	|ПОМЕСТИТЬ КартыЛояльности
	|ИЗ
	|	Справочник.КартыЛояльности КАК КартыЛояльности
	|ГДЕ
	|	КартыЛояльности.Ссылка = &КартаЛояльности"
	+ "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|" + ОбщаяЧастьЗапросаКартЛояльности();
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаКартЛояльностиПоНомеру()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	КартыЛояльности.Ссылка КАК Карта,
	|	КартыЛояльности.Партнер КАК Партнер,
	|	КартыЛояльности.Владелец.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
	|	2 КАК ТипПоиска
	|ПОМЕСТИТЬ КартыЛояльности
	|ИЗ
	|	Справочник.КартыЛояльности КАК КартыЛояльности
	|ГДЕ
	|	НЕ КартыЛояльности.ПометкаУдаления
	|	И КартыЛояльности.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКартЛояльности.Действует)
	|	И &ИдентификаторКартыКлиента В (КартыЛояльности.Штрихкод, КартыЛояльности.МагнитныйКод)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|" + ОбщаяЧастьЗапросаКартЛояльности();
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаКартЛояльностиПоКонтактнойИнформации(СтрокаПоискаТелефона)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПартнерыКонтактнаяИнформация.Ссылка КАК Партнер,
	|	3 КАК ТипПоиска
	|ПОМЕСТИТЬ Партнеры
	|ИЗ
	|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	|ГДЕ
	|	&НомерТелефона <> """"
	|	И ПартнерыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|	И НЕ ПартнерыКонтактнаяИнформация.Ссылка.ПометкаУдаления
	|	И ПартнерыКонтактнаяИнформация.НомерТелефона = &НомерТелефона
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПартнерыКонтактнаяИнформация.Ссылка,
	|	4 КАК ТипПоиска
	|ИЗ
	|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	|ГДЕ
	|	&АдресЭП <> """"
	|	И ПартнерыКонтактнаяИнформация.АдресЭП = &АдресЭП
	|	И НЕ ПартнерыКонтактнаяИнформация.Ссылка.ПометкаУдаления
	|	И ПартнерыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КартыЛояльности.Ссылка КАК Карта,
	|	Партнеры.Партнер КАК Партнер,
	|	КартыЛояльности.Владелец.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
	|	Партнеры.ТипПоиска КАК ТипПоиска
	|ПОМЕСТИТЬ КартыЛояльности
	|ИЗ
	|	Справочник.КартыЛояльности КАК КартыЛояльности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Партнеры КАК Партнеры
	|		ПО КартыЛояльности.Партнер = Партнеры.Партнер
	|ГДЕ
	|	НЕ КартыЛояльности.ПометкаУдаления
	|	И КартыЛояльности.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКартЛояльности.Действует)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|" + ОбщаяЧастьЗапросаКартЛояльности();
	
	Если ЗначениеЗаполнено(СтрокаПоискаТелефона) И Лев(СтрокаПоискаТелефона, 1) = "%" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НомерТелефона = &НомерТелефона",
			"НомерТелефона ПОДОБНО &НомерТелефона");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ОбщаяЧастьЗапросаКартЛояльности()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	КартыЛояльности.Карта КАК Карта,
	|	КартыЛояльности.Партнер КАК Партнер,
	|	СУММА(ЕСТЬNULL(БонусныеБаллыКСписанию.КСписанию, 0)) КАК КСписанию
	|ПОМЕСТИТЬ КартыЛояльностиРезерв
	|ИЗ
	|	КартыЛояльности КАК КартыЛояльности
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.БонусныеБаллыКСписанию КАК БонусныеБаллыКСписанию
	|		ПО КартыЛояльности.Карта = БонусныеБаллыКСписанию.ДисконтнаяКарта
	|
	|СГРУППИРОВАТЬ ПО
	|	КартыЛояльности.Карта,
	|	КартыЛояльности.Партнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КартыЛояльности.Карта КАК Карта,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(БонусныеБаллыОстатки.НачисленоОстаток, 0) - ЕСТЬNULL(БонусныеБаллыОстатки.КСписаниюОстаток, 0) < 0
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(БонусныеБаллыОстатки.НачисленоОстаток, 0) - ЕСТЬNULL(БонусныеБаллыОстатки.КСписаниюОстаток, 0)
	|	КОНЕЦ КАК Остаток
	|ПОМЕСТИТЬ КартыЛояльностиОстаток
	|ИЗ
	|	КартыЛояльности КАК КартыЛояльности
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.БонусныеБаллы.Остатки(
	|				&ПериодЗапроса,
	|				Партнер В
	|					(ВЫБРАТЬ
	|						КартыЛояльности.Партнер КАК Партнер
	|					ИЗ
	|						КартыЛояльности КАК КартыЛояльности)) КАК БонусныеБаллыОстатки
	|		ПО КартыЛояльности.Партнер = БонусныеБаллыОстатки.Партнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КартыЛояльности.Карта КАК Карта,
	|	КартыЛояльности.Партнер КАК Партнер,
	|	КонтактнаяИнформацияТелефон.НомерТелефона КАК НомерТелефона,
	|	КонтактнаяИнформацияЭлПочта.АдресЭП КАК АдресЭП
	|ПОМЕСТИТЬ ПартнерыКонтактнаяИнформация
	|ИЗ
	|	КартыЛояльности КАК КартыЛояльности
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры.КонтактнаяИнформация КАК КонтактнаяИнформацияТелефон
	|			ПО КартыЛояльности.Партнер = КонтактнаяИнформацияТелефон.Ссылка
	|			И КонтактнаяИнформацияТелефон.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры.КонтактнаяИнформация КАК КонтактнаяИнформацияЭлПочта
	|			ПО КартыЛояльности.Партнер = КонтактнаяИнформацияЭлПочта.Ссылка
	|			И КонтактнаяИнформацияЭлПочта.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КартыЛояльности.Карта КАК Карта,
	|	КартыЛояльности.Партнер КАК Партнер,
	|	КлючиАналитикиУчетаПоПартнерам.Ссылка КАК КлючАналитикиПоПартнеру
	|ПОМЕСТИТЬ ПартнерыКлючиАналитик
	|ИЗ
	|	КартыЛояльности КАК КартыЛояльности
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК КлючиАналитикиУчетаПоПартнерам
	|		ПО КартыЛояльности.Партнер = КлючиАналитикиУчетаПоПартнерам.Партнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КартыЛояльности.Карта КАК Карта,
	|	КартыЛояльности.Партнер КАК Партнер,
	|	ВыручкаИСебестоимостьПродажОбороты.СуммаВыручкиОборот КАК СуммаВыручкиОборот
	|ПОМЕСТИТЬ КартыЛояльностиПродажиОборот
	|ИЗ
	|	КартыЛояльности КАК КартыЛояльности
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты( , , ,
	|				АналитикаУчетаПоПартнерам В
	|					(ВЫБРАТЬ
	|						ПартнерыКлючиАналитик.Партнер КАК Партнер
	|					ИЗ
	|						ПартнерыКлючиАналитик КАК ПартнерыКлючиАналитик)) КАК ВыручкаИСебестоимостьПродажОбороты
	|		ПО КартыЛояльности.Партнер = ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаПоПартнерам.Партнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КартыЛояльности.Карта КАК Карта,
	|	КартыЛояльности.ТипПоиска КАК ТипПоиска,
	|	КартыЛояльности.Партнер КАК Партнер,
	|	ЕСТЬNULL(КартыЛояльности.Партнер.Представление, """") КАК ПартнерНаименование,
	|	ЕСТЬNULL(КартыЛояльности.Партнер.ЮрФизЛицо, ЗНАЧЕНИЕ(Перечисление.КомпанияЧастноеЛицо.ПустаяСсылка)) КАК ЮрФизЛицо,
	|	ЕСТЬNULL(КартыЛояльности.Партнер.ДатаРождения, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаРождения,
	|	ЕСТЬNULL(ПартнерыКонтактнаяИнформация.НомерТелефона, """") КАК НомерТелефона,
	|	ЕСТЬNULL(ПартнерыКонтактнаяИнформация.АдресЭП, """") КАК АдресЭП,
	|	КартыЛояльности.Карта.Штрихкод КАК Штрихкод,
	|	КартыЛояльности.Карта.МагнитныйКод КАК МагнитныйКод,
	|	НЕ СостояниеБонусовСерверЛояльности.ДисконтнаяКарта ЕСТЬ NULL КАК БонусыЗаблокированы,
	|	ЕСТЬNULL(КартыЛояльности.Карта.Владелец.БонуснаяПрограммаЛояльности.МаксимальныйПроцентОплатыБонусами, 0) КАК МаксимальныйПроцентОплатыБонусами,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КартыЛояльностиОстаток.Остаток, 0) < ЕСТЬNULL(КартыЛояльностиРезерв.КСписанию, 0)
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(КартыЛояльностиОстаток.Остаток, 0) - ЕСТЬNULL(КартыЛояльностиРезерв.КСписанию, 0)
	|	КОНЕЦ КАК ОстатокБонусов,
	|	ЕСТЬNULL(КартыЛояльностиПродажиОборот.СуммаВыручкиОборот, 0) КАК ПродажиОборот,
	|	ЕСТЬNULL(БонусныеПрограммыЛояльности.КурсКонвертацииБонусовВВалюту,0) КАК КурсКонвертацииБонусовВВалюту,
	|	ЕСТЬNULL(БонусныеПрограммыЛояльности.ВалютаКонвертацииБонусов.Код,0) КАК КодВалютыКонвертацииБонусов
	|ИЗ
	|	КартыЛояльности КАК КартыЛояльности
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеБонусовСерверЛояльности КАК СостояниеБонусовСерверЛояльности
	|		ПО КартыЛояльности.Карта = СостояниеБонусовСерверЛояльности.ДисконтнаяКарта
	|		ЛЕВОЕ СОЕДИНЕНИЕ КартыЛояльностиОстаток КАК КартыЛояльностиОстаток
	|		ПО КартыЛояльности.Карта = КартыЛояльностиОстаток.Карта
	|		ЛЕВОЕ СОЕДИНЕНИЕ КартыЛояльностиРезерв КАК КартыЛояльностиРезерв
	|		ПО КартыЛояльности.Карта = КартыЛояльностиРезерв.Карта
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПартнерыКонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	|		ПО КартыЛояльности.Карта = ПартнерыКонтактнаяИнформация.Карта
	|		ЛЕВОЕ СОЕДИНЕНИЕ КартыЛояльностиПродажиОборот КАК КартыЛояльностиПродажиОборот
	|		ПО КартыЛояльности.Карта = КартыЛояльностиПродажиОборот.Карта
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БонусныеПрограммыЛояльности КАК БонусныеПрограммыЛояльности
	|		ПО КартыЛояльности.БонуснаяПрограммаЛояльности = БонусныеПрограммыЛояльности.Ссылка
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПодготовитьСтрокуПоискаПоНомеруТелефона(НомерТелефона)
	
	РезультатФункции = "";
	ДлинаНомераБезКодаСтраны = 10;
	МинимальнаяДлинаЧастиТелефона = 4;
	КодыСтраны = НСтр("ru = '78'");
	СтрокаПоискаТелефона = УбратьРазделителиВНомерТелефона(НомерТелефона);
	ДлинаНомера = СтрДлина(СтрокаПоискаТелефона);
	Если СтрНайти(СтрокаПоискаТелефона, "*") = 1 Тогда
		Если ДлинаНомера = ДлинаНомераБезКодаСтраны Тогда
			РезультатФункции = СтрокаПоискаТелефона;
		ИначеЕсли ДлинаНомера >= МинимальнаяДлинаЧастиТелефона
				И ДлинаНомера < ДлинаНомераБезКодаСтраны Тогда
			РезультатФункции = СтрШаблон("%1%2", "%", СтрокаПоискаТелефона);
		КонецЕсли;
	ИначеЕсли ДлинаНомера = ДлинаНомераБезКодаСтраны Тогда
		РезультатФункции = СтрокаПоискаТелефона;
	ИначеЕсли ДлинаНомера = ДлинаНомераБезКодаСтраны + 1
			И СтрНайти(КодыСтраны, Лев(СтрокаПоискаТелефона, 1)) > 0 Тогда
		РезультатФункции = СтрШаблон("%1%2", "%", Прав(СтрокаПоискаТелефона, ДлинаНомераБезКодаСтраны));
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

// Убирает разделители в номере телефона.
//
// Параметры:
//    НомерТелефона - Строка - номер телефона или факса.
//
// Возвращаемое значение:
//     Строка - номер телефона или факса без разделителей.
//
Функция УбратьРазделителиВНомерТелефона(Знач НомерТелефона)
	
	Поз = СтрНайти(НомерТелефона, ",");
	Если Поз <> 0 Тогда
		НомерТелефона = Лев(НомерТелефона, Поз-1);
	КонецЕсли;
	
	НомерТелефона = СтрЗаменить(НомерТелефона, "-", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, " ", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, "+", "");
	
	Возврат НомерТелефона;
	
КонецФункции

// Возвращает остатки бонусных баллов клиента
//
// Параметры: 
//  БонуснаяПрограммаЛояльности - СправочникСсылка.БонусныеПрограммыЛояльности
//  Партнер - СправочникСсылка.Партнеры
//
// Возвращаемое значение:
//  Число - остаток бонусов клиента
//
Функция ПолучитьБонусыКлиента(БонуснаяПрограммаЛояльности, Партнер)
	
	Если Не ЗначениеЗаполнено(БонуснаяПрограммаЛояльности) Или Не ЗначениеЗаполнено(Партнер) Тогда
		Возврат 0;
	КонецЕсли;
	
	ОстаткиБонусныхБаллов = БонусныеБаллыСервер.ОстаткиИДвиженияБонусныхБаллов(БонуснаяПрограммаЛояльности, Партнер);
	
	Возврат ОстаткиБонусныхБаллов[0].Сумма;
	
КонецФункции

// Возвращает обороты продаж клиента
//
// Параметры: 
//  КартаЛояльности - ОпределяемыйТип.КартаЛояльностиСерверЛояльности
//
// Возвращаемое значение:
//  Число - Оборот продаж клиента
//
Функция ПолучитьОборотыПродажКлиента(КартаЛояльности)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	КлючиАналитикиУчетаПоПартнерам.Партнер КАК Партнер,
	|	КлючиАналитикиУчетаПоПартнерам.Ссылка КАК КлючАналитикиПоПартнеру
	|ПОМЕСТИТЬ ПартнерыКлючиАналитик
	|ИЗ
	|	Справочник.КартыЛояльности КАК КартыЛояльности
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК КлючиАналитикиУчетаПоПартнерам
	|		ПО КартыЛояльности.Партнер = КлючиАналитикиУчетаПоПартнерам.Партнер
	|			И КартыЛояльности.Ссылка = &КартаЛояльности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыручкаИСебестоимостьПродажОбороты.СуммаВыручкиОборот КАК СуммаОборот
	|ИЗ
	|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты( , , ,
	|		АналитикаУчетаПоПартнерам В
	|			(ВЫБРАТЬ
	|				ПартнерыКлючиАналитик.КлючАналитикиПоПартнеру
	|			ИЗ
	|				ПартнерыКлючиАналитик КАК ПартнерыКлючиАналитик)) КАК ВыручкаИСебестоимостьПродажОбороты
	|";
	Запрос.УстановитьПараметр("КартаЛояльности", КартаЛояльности);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.СуммаОборот;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Функция ТипПоискаПоКоду(Код)
	
	ТипПоиска = "";
	
	Если Код = 1 Тогда
		ТипПоиска = "Клиент"; //@NON-NLS-1
	ИначеЕсли Код = 2 Тогда
		ТипПоиска = "КодКарты"; //@NON-NLS-1
	ИначеЕсли Код = 3 Тогда
		ТипПоиска = "Телефон"; //@NON-NLS-1
	ИначеЕсли Код = 4 Тогда
		ТипПоиска = "АдресЭП"; //@NON-NLS-1
	КонецЕсли;
	
	Возврат ТипПоиска;
	
КонецФункции

// Дополняет сериализованную структуру данными о сообщениях
//
// Параметры:
//  СериализованнаяСтруктураСкидок - см. СериализоватьРезультатРасчета
//  ЧекККМОбъект - ДокументОбъект.ЧекККМ
//
Процедура ДополнитьСтруктуруСкидокСообщениями(СериализованнаяСтруктураСкидок, ЧекККМОбъект)
	
	СтруктураСообщений = СкидкиНаценкиЗаполнениеСервер.СтруктураСообщений(ЧекККМОбъект);
	
	МассивСообщений = Новый Массив;
	
	Для каждого СтрокаСообщения Из СтруктураСообщений.Сообщения Цикл
	
		СтруктураСтроки = Новый Структура;
		
		СтруктураСтроки.Вставить("AfterSale", Ложь);
		СтруктураСтроки.Вставить("MessageText", СтрокаСообщения.СкидкаНаценка.ТекстСообщения);
		
		МассивСообщений.Добавить(СтруктураСтроки);
	
	КонецЦикла;
	
	СериализованнаяСтруктураСкидок.Вставить("Messages", МассивСообщений);
	
КонецПроцедуры

// Дополняет сериализованную структуру данными о бонусах
//
// Параметры:
//  СериализованнаяСтруктураСкидок - см. СериализоватьРезультатРасчета
//  РезультатРасчета - Структура
//  ЧекККМОбъект - ДокументОбъект.ЧекККМ
//
Процедура ДополнитьСтруктуруСкидокТаблицейБонусов(СериализованнаяСтруктураСкидок, РезультатРасчета, ЧекККМОбъект)
	
	МассивБонусов = Новый Массив;
	
	ОтборРезультатРасчета = Новый Структура("СпособПримененияСкидки", Перечисления.СпособыПримененияСкидокНаценок.НачислитьБонусныеБаллы);
	СкидкиНаценки = РезультатРасчета.ТаблицаСкидкиНаценки.НайтиСтроки(ОтборРезультатРасчета);
	
	Для каждого ЭлементБонус Из СкидкиНаценки Цикл
		
		СтруктураСтроки = Новый Структура;
		
		БонуснаяПрограмма = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементБонус.СкидкаНаценка, "БонуснаяПрограммаЛояльности");
		
		ОтборБонусы = Новый Структура("БонуснаяПрограммаЛояльности", БонуснаяПрограмма);
		Бонусы      = ЧекККМОбъект.БонусныеБаллы.НайтиСтроки(ОтборБонусы);
		
		Если Бонусы.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтруктураСсылкиСкидкаНаценка     = ПолучитьСтруктуруСсылки(ЭлементБонус.СкидкаНаценка);
		СтруктураСсылкиБонуснаяПрограмма = ПолучитьСтруктуруСсылки(БонуснаяПрограмма);
		
		СтруктураСтроки.Вставить("KeyRelation",   ЭлементБонус.КлючСвязи);
		СтруктураСтроки.Вставить("Discount",      СтруктураСсылкиСкидкаНаценка);
		СтруктураСтроки.Вставить("BonusProgramm", СтруктураСсылкиБонуснаяПрограмма);
		СтруктураСтроки.Вставить("BonusCount",    ЭлементБонус.Сумма);
		СтруктураСтроки.Вставить("AccuralDate",   Бонусы[0].ДатаНачисления);
		СтруктураСтроки.Вставить("WriteOffDate",  Бонусы[0].ДатаСписания);
		
		МассивБонусов.Добавить(СтруктураСтроки);
	
	КонецЦикла;
	
	СериализованнаяСтруктураСкидок.Вставить("BonusesToAccrue", МассивБонусов);
	
КонецПроцедуры

// Дополняет сериализованную структуру данными о скидках
//
// Параметры:
//  СериализованнаяСтруктураСкидок - см. СериализоватьРезультатРасчета
//  ТаблицаСкидокНаценок - ТаблицаЗначений
//
Процедура ДополнитьСтруктуруСкидокТаблицейСкидокНаценок(СериализованнаяСтруктураСкидок, ТаблицаСкидокНаценок)
	
	МассивСкидокНаценок = Новый Массив;
	
	Для каждого СтрокаСкидкиНаценки Из ТаблицаСкидокНаценок Цикл
	
		СтруктураСтроки = Новый Структура; 
		СтруктураСсылки = ПолучитьСтруктуруСсылки(СтрокаСкидкиНаценки.СкидкаНаценка);
		
		СтруктураСтроки.Вставить("KeyRelation", СтрокаСкидкиНаценки.КлючСвязи);
		СтруктураСтроки.Вставить("Discount", СтруктураСсылки);
		СтруктураСтроки.Вставить("DiscountValue", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаСкидкиНаценки.СкидкаНаценка, "ЗначениеСкидкиНаценки"));
		СтруктураСтроки.Вставить("Amount", СтрокаСкидкиНаценки.Сумма);
		СтруктураСтроки.Вставить("MinimalPriceRestriction", Ложь);
		СтруктураСтроки.Вставить("Comment", "");
		СтруктураСтроки.Вставить("LineUID", СтрокаСкидкиНаценки.ИдентификаторСтроки);
		
		МассивСкидокНаценок.Добавить(СтруктураСтроки);
	
	КонецЦикла;
	
	СериализованнаяСтруктураСкидок.Вставить("DiscountsList", МассивСкидокНаценок);
	
КонецПроцедуры

#КонецОбласти