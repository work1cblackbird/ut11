
#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытий

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект.
//  ДанныеЗаполнения - Произвольный - Значение, которое используется как основание для заполнения.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаЗаполнения(Объект, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОбменBankFeeds")
	И Не ПолучитьФункциональнуюОпцию("ПоддержкаПлатежейРФ")  Тогда

		Если ДанныеЗаполнения = Неопределено Тогда
			ДанныеЗаполнения = Новый Структура;
		КонецЕсли;
		
		ДанныеЗаполнения.Вставить("ИспользоватьОбменСБанкомBankFeeds", Истина);
		ДанныеЗаполнения.Вставить("ИспользоватьОбменСБанком", Ложь);
		
		Возврат;
	КонецЕсли;
	
	//++ Локализация
	Если Не ПолучитьФункциональнуюОпцию("ПоддержкаПлатежейРФ") Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеЗаполнения = Неопределено Тогда
		ДанныеЗаполнения = Новый Структура;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОбменСБанками") Тогда
		
		ДанныеЗаполнения.Вставить("ИспользоватьПрямойОбменСБанком", Истина);
		ДанныеЗаполнения.Вставить("ИспользоватьОбменСБанком", Ложь);
		
	ИначеЕсли ПолучитьФункциональнуюОпцию("ИспользоватьОбменBankFeeds") Тогда
		
		ДанныеЗаполнения.Вставить("ИспользоватьОбменСБанкомBankFeeds", Истина);
		ДанныеЗаполнения.Вставить("ИспользоватьОбменСБанком", Ложь);
		
	КонецЕсли;
	
	//-- Локализация
	
	Возврат;
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - СправочникОбъект.БанковскиеСчетаОрганизаций - Обрабатываемый объект
//  Отказ - Булево - Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то будет выполнен отказ от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив из Строка - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Объект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	//++ Локализация
	ТекстОшибки = "";
	Если Не Объект.ЭтоГруппа
		И Не Объект.ИностранныйБанк
		И Объект.ТипСчета <> Перечисления.ТипыБанковскихСчетов.Прочий
		И Не ДенежныеСредстваКлиентСерверЛокализация.ПроверитьКорректностьНомераСчета(Объект.НомерСчета,, ТекстОшибки) Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Объект, "НомерСчета",, Отказ);
	КонецЕсли;
	
	НепроверяемыеРеквизиты = Новый Массив;
	
	Дополнительно = Новый Структура;
	
	НастройкиПолей = ДенежныеСредстваСервер.ИнициализироватьНастройкиПолейФормы();
	НастройкиПолейФормы(НастройкиПолей);
	СвойстваЭлементов = ДенежныеСредстваКлиентСервер.СвойстваЭлементовФормы(Объект, НастройкиПолей,,, Дополнительно);
	ДенежныеСредстваСервер.ОтключитьПроверкуЗаполненияРеквизитовОбъекта(СвойстваЭлементов, НепроверяемыеРеквизиты);
	
	ВалютныйСчет = ЗначениеЗаполнено(Объект.ВалютаДенежныхСредств)
		И Объект.ВалютаДенежныхСредств <> ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Владелец);
	ДенежныеСредстваСерверЛокализация.ПроверитьЗаполнениеБанковскихРеквизитов(Объект, Отказ, ВалютныйСчет);
	
	
	Если Объект.ТипСчета = Перечисления.ТипыБанковскихСчетов.Казначейский Тогда
		ДенежныеСредстваСерверЛокализация.ПроверитьЛицевойСчетКазначейскогоСопровождения(Объект);
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
	//-- Локализация
	
	Возврат;
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то запись выполнена не будет и будет вызвано исключение.
//
Процедура ПередЗаписью(Объект, Отказ) Экспорт
	
	//++ Локализация
	ЭтоКазначейскийСчет = Объект.ТипСчета = Перечисления.ТипыБанковскихСчетов.Казначейский;
		
	Если Не ЭтоКазначейскийСчет Тогда
		Объект.СчетПоГосконтракту = ЭтоКазначейскийСчет;
		Объект.РазделЛицевогоСчета = "";
		Объект.НомерЛицевогоСчета = "";
	КонецЕсли;
	
	Объект.РазделЛицевогоСчета = ?(Объект.СчетПоГосконтракту, Объект.РазделЛицевогоСчета, "");
	Объект.НомерЛицевогоСчета = ?(ЭтоКазначейскийСчет, Объект.НомерЛицевогоСчета, "");
	//-- Локализация
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина, то запись выполнена не будет и будет вызвано исключение.
//
Процедура ПриЗаписи(Объект, Отказ) Экспорт
	
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - СправочникОбъект - Обрабатываемый объект
//  ОбъектКопирования - СправочникОбъект - Исходный справочник, который является источником копирования.
//
Процедура ПриКопировании(Объект, ОбъектКопирования) Экспорт
	
	Если Объект.СчетПоГосконтракту Тогда
		Объект.НаправлениеДеятельности = Справочники.НаправленияДеятельности.ПустаяСсылка();
		Объект.РазделЛицевогоСчета = "";
	КонецЕсли;
	
	Объект.СчетПоГосконтракту = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	//++ Локализация


	//-- Локализация
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив из СправочникСсылка.БанковскиеСчетаОрганизаций - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений из СправочникСсылка.БанковскиеСчетаОрганизаций - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт

	//++ Локализация


	//-- Локализация

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
//++ Локализация

// Определяет свойства полей формы в зависимости от данных
// 
// Параметры:
//  Настройки - см. ДенежныеСредстваСервер.ИнициализироватьНастройкиПолейФормы.
// 
Процедура НастройкиПолейФормы(Настройки) Экспорт
	
	Финансы = ФинансоваяОтчетностьСервер;

	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ГосударственныйКонтракт");
	Финансы.НовыйОтбор(Элемент.Условие, "ОтдельныйСчетГОЗ", Истина);
	Финансы.НовыйОтбор(Элемент.Условие, "ИностранныйБанк", Ложь);
	Элемент.Свойства.Вставить("Доступность");
	Элемент.Свойства.Вставить("АвтоОтметкаНезаполненного");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ГруппаГосударственныеКонтракты");
	Финансы.НовыйОтбор(Элемент.Условие, "ИностранныйБанк", Ложь);
	Элемент.Свойства.Вставить("Видимость");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ОтдельныйСчетГОЗ");
	Элемент.Поля.Добавить("ГосударственныйКонтракт");
	ГруппаИЛИ = Финансы.НовыйОтбор(Элемент.Условие, , , Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИЛИ, "ТипСчета", Перечисления.ТипыБанковскихСчетов.Транзитный);
	Финансы.НовыйОтбор(ГруппаИЛИ, "ТипСчета", Перечисления.ТипыБанковскихСчетов.Казначейский);
	Элемент.Свойства.Вставить("Видимость", Ложь);
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ЗаголовокТранзитныйСчет");
	Элемент.Поля.Добавить("ВвестиТранзитныйСчет");
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ТранзитныйСчетЗадан", Ложь);
	Финансы.НовыйОтбор(Элемент.Условие, "ТипСчета", Перечисления.ТипыБанковскихСчетов.Расчетный);
	Финансы.НовыйОтбор(Элемент.Условие, "ИностранныйБанк", Ложь);
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ВалютныйСчет", Истина);
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ИспользоватьВалютныеПлатежи", Истина);
	Элемент.Свойства.Вставить("Видимость");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ТранзитныйСчет");
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ТранзитныйСчетЗадан", Истина);
	Финансы.НовыйОтбор(Элемент.Условие, "ТипСчета", Перечисления.ТипыБанковскихСчетов.Расчетный);
	Финансы.НовыйОтбор(Элемент.Условие, "ИностранныйБанк", Ложь);
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ВалютныйСчет", Истина);
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ИспользоватьВалютныеПлатежи", Истина);
	Элемент.Свойства.Вставить("Видимость");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("НомерЛицевогоСчета");
	Элемент.Поля.Добавить("СчетПоГосконтракту");
	Элемент.Поля.Добавить("НаправлениеДеятельностиКазначейскогоСчета");
	Финансы.НовыйОтбор(Элемент.Условие, "ТипСчета", Перечисления.ТипыБанковскихСчетов.Казначейский);
	Элемент.Свойства.Вставить("Видимость");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ЭтоIBAN");
	Элемент.Поля.Добавить("НаправлениеДеятельности");
	Элемент.Поля.Добавить("ФорматОбмена");
	Финансы.НовыйОтбор(Элемент.Условие, "ТипСчета", Перечисления.ТипыБанковскихСчетов.Казначейский);
	Элемент.Свойства.Вставить("Видимость", Ложь);
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("РазделЛицевогоСчета");
	Финансы.НовыйОтбор(Элемент.Условие, "ТипСчета", Перечисления.ТипыБанковскихСчетов.Казначейский);
	Финансы.НовыйОтбор(Элемент.Условие, "СчетПоГосконтракту", Истина);
	Элемент.Свойства.Вставить("Видимость");
	
	// Печать платежных поручений
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ТекстКорреспондента");
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ИспользоватьТекстКорреспондента", Истина);
	Элемент.Свойства.Вставить("Доступность");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ВариантВыводаМесяца");
	Финансы.НовыйОтбор(Элемент.Условие, "ИностранныйБанк", Ложь);
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ВалютныйСчет", Ложь);
	Элемент.Свойства.Вставить("Видимость");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ВыводитьСуммуБезКопеек");
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ВалютныйСчет", Ложь);
	Элемент.Свойства.Вставить("Видимость");
	
	// Обмен с банком
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("РежимОбменаКлиентБанка");
	Финансы.НовыйОтбор(Элемент.Условие, "ОбменСБанкомВключен", Истина);
	Элемент.Свойства.Вставить("Доступность");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("РежимОбменаПрямойОбмен");
	Финансы.НовыйОтбор(Элемент.Условие, "ОбменСБанкомВключен", Истина);
	Финансы.НовыйОтбор(Элемент.Условие, "РучноеИзменениеРеквизитовБанка", Ложь);
	Элемент.Свойства.Вставить("Доступность");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("РежимОбменаBankFeeds");
	Финансы.НовыйОтбор(Элемент.Условие, "ОбменСБанкомВключен", Истина);
	Элемент.Свойства.Вставить("Доступность");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ДекорацияПояснениеИспользованиеПрямогоОбменаДаннымиСБанком");
	Элемент.Поля.Добавить("ДекорацияОтступИспользованиеПрямогоОбменаДаннымиСБанком");
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ДиректБанкНастроен", Ложь);
	Элемент.Свойства.Вставить("Видимость");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ДекорацияСоглашениеЭД");
	Элемент.Поля.Добавить("ДекорацияДобавитьСоглашениеЭД");
	Элемент.Поля.Добавить("ДекорацияНетПравСоглашениеЭД");
	Финансы.НовыйОтбор(Элемент.Условие, "ОбменСБанкомВключен", Истина);
	Финансы.НовыйОтбор(Элемент.Условие, "ИспользоватьПрямойОбменСБанком", Истина);
	Элемент.Свойства.Вставить("Доступность");

	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ДекорацияПодключениеBankFeeds");
	Элемент.Поля.Добавить("ДекорацияДобавитьПодключениеBankFeeds");
	Элемент.Поля.Добавить("ДекорацияНетПравBankFeeds");
	Финансы.НовыйОтбор(Элемент.Условие, "ОбменСБанкомВключен", Истина);
	Финансы.НовыйОтбор(Элемент.Условие, "ИспользоватьОбменСБанкомBankFeeds", Истина);
	Элемент.Свойства.Вставить("Доступность");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("БИКБанка");
	Финансы.НовыйОтбор(Элемент.Условие, "СтранаБанка", Справочники.СтраныМира.Россия);
	Элемент.Свойства.Вставить("Заголовок", НСтр("ru = 'БИК'"));
	
КонецПроцедуры


//-- Локализация

#КонецОбласти
