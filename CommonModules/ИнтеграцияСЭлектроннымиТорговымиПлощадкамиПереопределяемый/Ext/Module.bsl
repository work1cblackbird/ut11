// @strict-types
#Область ПрограммныйИнтерфейс

// При создании на сервере.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  Отказ - Булево
//  СтандартнаяОбработка - Булево - Стандартная обработка
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт

	Элементы = Форма.Элементы;

	Если Форма.ИмяФормы = "Обработка.УправлениеВыгрузкамиВБидзаар.Форма.ВыгрузкаДанных" Тогда

		НовыйЭлемент = Элементы.Добавить("ДанныеВыгрузкиНоменклатураАртикул", Тип("ПолеФормы"), Элементы.ДанныеВыгрузки);
		НовыйЭлемент.ПутьКДанным = "ДанныеВыгрузки.Номенклатура.Артикул";
		НовыйЭлемент.Ширина = 16;
		Элементы.Переместить(НовыйЭлемент, Элементы.ДанныеВыгрузки, Элементы.ДанныеВыгрузкиНоменклатура);

	ИначеЕсли Форма.ИмяФормы = "РегистрСведений.СтатусыПубликацииТоваровЭТП.Форма.ФормаЗаписи" Тогда

		НоваяСвязь = Новый СвязьПараметраВыбора("Номенклатура", "Запись.Номенклатура");
		ВсеСвязи = Новый Массив; // Массив из СвязьПараметраВыбора
		ВсеСвязи.Добавить(НоваяСвязь);
		Элементы.Характеристика.СвязиПараметровВыбора = Новый ФиксированныйМассив(ВсеСвязи);
		
		Элементы.Характеристика.АвтоОтметкаНезаполненного = Истина;
		
		ПриОпределенииОбязательностиЗаполненияХарактеристики(Форма.Запись, Элементы.Характеристика);
		
	ИначеЕсли Форма.ИмяФормы = "Документ.ЗапросКоммерческихПредложенийПоставщиков.Форма.ЗагрузкаИтоговБидзаар" Тогда
		
		ДобавитьЭлементФормыЕдиницаИзмерения(Форма, "");
		
	КонецЕсли;

	СобытияФорм.ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);

КонецПроцедуры

// Скорректировать текст.
// 
// Параметры:
//  Ключ - Строка - Ключ, по которому определяется источник текста
//  Текст - Строка - Переопределяемый текст
Процедура СкорректироватьТекст(Ключ, Текст) Экспорт
	
	Если Ключ = "ДекорацияРегистрацияБидзаар" Тогда
		Текст = Текст + Символы.ПС + НСтр(
			"ru = 'Активация: НСИ и администрирование > Интеграция с Бидзаар > Интеграция для покупателей'");
	КонецЕсли;
	
КонецПроцедуры

// Переопределяет обязательность заполнения характеристики.
// 
// Параметры:
//  Запись - ДанныеФормыСтруктура, РегистрСведенийМенеджерЗаписи.СтатусыПубликацииТоваровЭТП
//  Элемент - ПолеФормы - Элемент характеристики
//  Отказ - Булево, Неопределено - Результат
Процедура ПриОпределенииОбязательностиЗаполненияХарактеристики(Запись, Элемент, Отказ = Неопределено) Экспорт
	
	ЭтоЗапись = Отказ <> Неопределено;
	
	ХарактеристикиИспользуются = Справочники.Номенклатура.ХарактеристикиИспользуются(Запись.Номенклатура);
	
	Элемент.Доступность = ХарактеристикиИспользуются;
		
	Если ЭтоЗапись И ХарактеристикиИспользуются И Не ЗначениеЗаполнено(Запись.Характеристика) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Поле ""Характеристика"" не заполнено'"),,"Характеристика",, Отказ);
	КонецЕсли;
		
КонецПроцедуры

// Переопределяет поля формирования представления товара или услуги.
// 
// Параметры:
//  ПоляФормированияПредставления - СписокЗначений - Строковые представления реквизитов установленного типа
//	см. ОпределяемыеТипы.НоменклатураИнтеграцияСЭлектроннымиТорговымиПлощадками
Процедура ПриОпределенииПолейПредставления(ПоляФормированияПредставления) Экспорт

	Для Каждого СтруктураПоле Из ПоляФормированияПредставления Цикл
		Если СтруктураПоле.Значение = "Наименование" Тогда
			СтруктураПоле.Представление = НСтр("ru = 'Номенклатура (Рабочее наименование)'");
		ИначеЕсли СтруктураПоле.Значение = "НаименованиеПолное" Тогда
			СтруктураПоле.Представление = НСтр("ru = 'Номенклатура (Наименование для печати)'");
		КонецЕсли;
	КонецЦикла;

	СтруктураПолеАртикул = ПолучитьНовуюСтруктуруЭлементаСпискаЗначений();
	СтруктураПолеАртикул.Значение = "Артикул";
	СтруктураПолеАртикул.Представление = НСтр("ru = 'Артикул'");
	ЗаполнитьЗначенияСвойств(ПоляФормированияПредставления.Добавить(), СтруктураПолеАртикул);

КонецПроцедуры

// См. КоммерческиеПредложенияДокументыПереопределяемый.ПриОпределенииНастроекУчета
//
Процедура ПриОпределенииНастроекУчета(Настройки) Экспорт

	Настройки.ИспользоватьЗаказыПоставщикам = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПоставщикам");

КонецПроцедуры

#Область УсловияОтбораНоменклатуры

// Переопределяет текст запроса получения таблицы товаров или услуг по отбору.
// 
// Параметры:
//  ТекстЗапроса - Строка - Текст запроса
//
Процедура ТекстЗапросаОтбораНоменклатуры(ТекстЗапроса) Экспорт

КонецПроцедуры

// Переопределяет список колонок полученной таблицы товаров или услуг.
// 
// Параметры:
//  ИменаКолонокРезультатаОтбора - Строка - перечисленные через "," имена колонок (без пробелов)
//
Процедура ИменаКолонокРезультатаОтбора(ИменаКолонокРезультатаОтбора) Экспорт

КонецПроцедуры

#КонецОбласти

#Область РаботаСЕдиницамиИзмерения

// Дополняет текст запроса, подменяет указанный параметр единицей измерения номенклатуры.
//
// Параметры:
// 	ТекстЗапроса - Строка - текст запроса, где необходимо указать путь к единице измерения номенклатуры.
// 	ИмяПараметра - Строка - имя параметра, которое подменяет.
// 	ИмяТаблицы - Строка - имя таблицы.
//
Процедура ДополнитьТекстЗапросаЕдиницейИзмеренияНоменклатуры(ТекстЗапроса, Знач ИмяПараметра, Знач ИмяТаблицы) Экспорт
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		ИмяПараметра,
		СтрШаблон("%1.Номенклатура.ЕдиницаИзмерения", ИмяТаблицы));
	
КонецПроцедуры

#КонецОбласти

// Дополняет текст запроса и настройки схемы компоновки данных 
// 
// Параметры:
//  СхемаКомпоновкиДанных - СхемаКомпоновкиДанных
//  ДополнительныеПараметры - Структура - содержит значения ключевых полей объекта 
Процедура ДополнитьСКДПодбораТоваровПоОтбору(СхемаКомпоновкиДанных, ДополнительныеПараметры) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьИнтеграциюСЭТПБидзаарДляПоставщиков") Тогда
		
		ЗаголовокФормы = "";
		Если ДополнительныеПараметры.Свойство("Заголовок", ЗаголовокФормы)
			И СтрНайти(НРег(ЗаголовокФормы), "бидзаар") > 0 Тогда
			ДополнитьСКДПодбораТоваровПоОтборуПродажами(СхемаКомпоновкиДанных);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Дополняет настройки схемы компоновки данных 
// 
// Параметры:
//  НастройкиСКД - НастройкиКомпоновкиДанных
//  ДополнительныеПараметры - Структура - содержит значения ключевых полей объекта
//
Процедура ДополнитьНастройкиСКДПодбораТоваровПоОтбору(НастройкиСКД, ДополнительныеПараметры) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьИнтеграциюСЭТПБидзаарДляПоставщиков") Тогда
		ДополнитьНастройкиСКДПодбораТоваровПоОтборуПродажами(НастройкиСКД);
	КонецЕсли;
	
КонецПроцедуры

// Переносит значения используемых отбров в параметры
// 
// Параметры:
//  НастройкиСКД - НастройкиКомпоновкиДанных - Настройки
//
Процедура ПеренестиОтборВПараметры(НастройкиСКД) Экспорт
	
	Для Каждого ЭлементОтбора Из НастройкиСКД.Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) <> Тип("ЭлементОтбораКомпоновкиДанных") Тогда Продолжить; КонецЕсли;
		Если НЕ ЭлементОтбора.Использование Тогда Продолжить; КонецЕсли;
		
		Если СтрНачинаетсяС(Строка(ЭлементОтбора.ЛевоеЗначение), "НачалоПериодаПродаж") Тогда
			ЭлементОтбора.Использование = Ложь;
			
			КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НастройкиСКД, "НачалоПериодаПродаж", ЭлементОтбора.ПравоеЗначение);
			КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НастройкиСКД, "НачалоПериода", ЭлементОтбора.ПравоеЗначение);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Дополнить структуру настроек.
// 
// Параметры:
//  Форма Форма - форма обработки "Подбор товаров по отбору"
//  СтруктураНастроек - Структура
Процедура ДополнитьСтруктуруНастроекПодбораТоваровПоОтбору(Форма, СтруктураНастроек) Экспорт
	СтруктураНастроек.Вставить("Заголовок", Форма.Заголовок);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьНовуюСтруктуруЭлементаСпискаЗначений()
	Возврат Новый Структура("Значение, Представление, Пометка, Картинка", Неопределено, "", Истина, Новый Картинка);
КонецФункции

Процедура ДополнитьСКДПодбораТоваровПоОтборуПродажами(СхемаКомпоновкиДанных)
	
	НаборПродажи = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборПродажи.Имя = "Продажи";
	НаборПродажи.АвтоЗаполнениеДоступныхПолей = Истина;
	НаборПродажи.ИсточникДанных = "ИсточникДанных1";
	НаборПродажи.ИспользоватьГруппировкиЗапросаЕслиВозможно = Истина;
	
	НаборПродажи.Запрос = 
	"ВЫБРАТЬ
	|	&НачалоПериодаПродаж КАК НачалоПериодаПродаж,
	|	ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаНоменклатуры.Номенклатура КАК ПродажиНоменклатура,
	|	ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаНоменклатуры.Характеристика КАК ПродажиХарактеристика,
	|	СУММА(ВыручкаИСебестоимостьПродажОбороты.СуммаВыручкиОборот) КАК ПродажиСуммаВыручки
	|ИЗ
	|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(&НачалоПериодаПродаж, &ОкончаниеПериодаПродаж, Запись,
	|		{(АналитикаУчетаПоПартнерам.Организация).* КАК ПродажиОрганизация}) КАК ВыручкаИСебестоимостьПродажОбороты
	|СГРУППИРОВАТЬ ПО
	|	ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаНоменклатуры.Номенклатура,
	|	ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаНоменклатуры.Характеристика";
	
	//Настройка полей
	ПолеНабора = НаборПродажи.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	ПолеНабора.Поле = "ПродажиОрганизация";
	ПолеНабора.ПутьКДанным = "ПродажиОрганизация";
	ПолеНабора.ОграничениеИспользования.Группировка = Истина;
	ПолеНабора.ОграничениеИспользования.Поле = Ложь;
	ПолеНабора.ОграничениеИспользования.Условие = Ложь;
	ПолеНабора.Заголовок = "Продажи.Организация";
	
	ПолеНабора = НаборПродажи.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	ПолеНабора.Поле = "ПродажиНоменклатура";
	ПолеНабора.ПутьКДанным = "ПродажиНоменклатура";
	ПолеНабора.ОграничениеИспользования.Группировка = Истина;
	ПолеНабора.ОграничениеИспользования.Поле = Истина;
	ПолеНабора.ОграничениеИспользования.Условие = Истина;
	ПолеНабора.ОграничениеИспользования.Порядок = Истина;
	
	ПолеНабора = НаборПродажи.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	ПолеНабора.Поле = "ПродажиХарактеристика";
	ПолеНабора.ПутьКДанным = "ПродажиХарактеристика";
	ПолеНабора.ОграничениеИспользования.Группировка = Истина;
	ПолеНабора.ОграничениеИспользования.Поле = Истина;
	ПолеНабора.ОграничениеИспользования.Условие = Истина;
	
	ПолеНабора = НаборПродажи.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	ПолеНабора.Поле = "НачалоПериодаПродаж";
	ПолеНабора.ПутьКДанным = "НачалоПериодаПродаж";
	ПолеНабора.ОграничениеИспользования.Группировка = Истина;
	ПолеНабора.ОграничениеИспользования.Поле = Ложь;
	ПолеНабора.ОграничениеИспользования.Условие = Ложь;
	ПолеНабора.Заголовок = "Продажи.Начало периода продаж";
	ПолеНабора.ТипЗначения = Новый ОписаниеТипов("Дата",,,,,Новый КвалификаторыДаты(ЧастиДаты.Дата));
	
	ПолеНабора = НаборПродажи.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	ПолеНабора.Поле = "ПродажиСуммаВыручки";
	ПолеНабора.ПутьКДанным = "ПродажиСуммаВыручки";
	ПолеНабора.ОграничениеИспользования.Группировка = Истина;
	ПолеНабора.ОграничениеИспользования.Поле = Ложь;
	ПолеНабора.ОграничениеИспользования.Условие = Ложь;
	ПолеНабора.Заголовок = "Продажи.Сумма выручки";
	
	//Настройка связей
	Связь = СхемаКомпоновкиДанных.СвязиНаборовДанных.Добавить();
	Связь.НаборДанныхИсточник = "НаборДанных";
	Связь.ВыражениеИсточник = "Номенклатура";
	Связь.НаборДанныхПриемник = "Продажи";
	Связь.ВыражениеПриемник = "ПродажиНоменклатура";
	
	Связь = СхемаКомпоновкиДанных.СвязиНаборовДанных.Добавить();
	Связь.НаборДанныхИсточник = "НаборДанных";
	Связь.ВыражениеИсточник = "Характеристика";
	Связь.НаборДанныхПриемник = "Продажи";
	Связь.ВыражениеПриемник = "ПродажиХарактеристика";
	
	//Настройка ресурсов
	ПолеРесурс = СхемаКомпоновкиДанных.ПоляИтога.Добавить();
	ПолеРесурс.ПутьКДанным = "ПродажиСуммаВыручки";
	ПолеРесурс.Выражение = "СУММА(ПродажиСуммаВыручки)";
	ПолеРесурс.Группировки.Добавить("Номенклатура");
	ПолеРесурс.Группировки.Добавить("Характеристика");
	
	//Настройка параметров
	ПараметрЗапроса = СхемаКомпоновкиДанных.Параметры.Добавить();
	ПараметрЗапроса.Имя = "НачалоПериодаПродаж";
	ПараметрЗапроса.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	ПараметрЗапроса.ВключатьВДоступныеПоля = Ложь;
	
	ПараметрЗапроса = СхемаКомпоновкиДанных.Параметры.Добавить();
	ПараметрЗапроса.Имя = "ОкончаниеПериодаПродаж";
	ПараметрЗапроса.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	ПараметрЗапроса.ВключатьВДоступныеПоля = Ложь;
	
	ПараметрЗапроса = СхемаКомпоновкиДанных.Параметры.Добавить();
	ПараметрЗапроса.Имя = "НачалоПериода";
	ПараметрЗапроса.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	ПараметрЗапроса.ВключатьВДоступныеПоля = Ложь;
	
	ПараметрЗапроса = СхемаКомпоновкиДанных.Параметры.Добавить();
	ПараметрЗапроса.Имя = "КонецПериода";
	ПараметрЗапроса.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	ПараметрЗапроса.ВключатьВДоступныеПоля = Ложь;
	
КонецПроцедуры

Процедура ДополнитьНастройкиСКДПодбораТоваровПоОтборуПродажами(НастройкиСКД)
	
	НайденоПолеНачалоПериодаПродаж = Ложь;
	ПолеНачалоПериодаПродаж = Новый ПолеКомпоновкиДанных("НачалоПериодаПродаж");
	
	НайденоПолеПродажиСуммаВыручки = Ложь;
	ПолеПродажиСуммаВыручки = Новый ПолеКомпоновкиДанных("ПродажиСуммаВыручки");
	
	Для Каждого ЭлементОтбора ИЗ НастройкиСКД.Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) <> Тип("ЭлементОтбораКомпоновкиДанных") Тогда Продолжить; КонецЕсли;
		
		Если ЭлементОтбора.ЛевоеЗначение = ПолеНачалоПериодаПродаж Тогда
			НайденоПолеНачалоПериодаПродаж = Истина;
		ИначеЕсли ЭлементОтбора.ЛевоеЗначение = ПолеПродажиСуммаВыручки Тогда
			НайденоПолеПродажиСуммаВыручки = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ НайденоПолеНачалоПериодаПродаж Тогда

		ЭлементОтбора = НастройкиСКД.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = ПолеНачалоПериодаПродаж;
		ЭлементОтбора.Использование = Ложь;
		ЭлементОтбора.ПравоеЗначение = '00010101';
			
	КонецЕсли;
	
	Если НЕ НайденоПолеПродажиСуммаВыручки Тогда
		ЭлементОтбора = НастройкиСКД.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = ПолеПродажиСуммаВыручки;
		ЭлементОтбора.Использование = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Добавляет элемент "ТоварыНоменклатураЕдиницаИзмерения" табличной части "Номенклатура" для отражения единицы хранения
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которую необходимо добавить поле "ЕдиницаИзмерения"
//	ИмяОсновногоРеквизитаФормы - Строка - имя основного реквизита формы
//
Процедура ДобавитьЭлементФормыЕдиницаИзмерения(Форма, ИмяОсновногоРеквизитаФормы = "Объект.")
	
	Элемент     = Форма.Элементы.Добавить("ТоварыНоменклатураЕдиницаИзмерения", Тип("ПолеФормы"), Форма.Элементы.ТоварыУпаковкаЕдиницаИзмерения);
	Элемент.Вид                       = ВидПоляФормы.ПолеВвода;
	Элемент.КнопкаОткрытия            = Ложь;
	Элемент.ТолькоПросмотр            = Истина;
	Элемент.ОтображатьВШапке          = Ложь;
	Элемент.Ширина                    = 10;
	Элемент.ПутьКДанным               = ИмяОсновногоРеквизитаФормы + "Товары.Номенклатура.ЕдиницаИзмерения";
	Элемент.АвтоОтметкаНезаполненного = Ложь;
	
	ПараметрыУО = НоменклатураСервер.НовыеПараметрыУсловногоОформленияЕдиницИзмерения();
	ПараметрыУО.ИмяПоляЕдиницаИзмерения = Элемент.Имя;
	ПараметрыУО.ПутьКПолюУпаковка = ИмяОсновногоРеквизитаФормы + "Товары.ЕдиницаИзмерения";
	
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(Форма, ПараметрыУО);
КонецПроцедуры

#КонецОбласти