// Универсальные механизмы интеграции ИС (ЕГАИС, ГИСМ, ВЕТИС, ...)

#Область ПрограммныйИнтерфейс

#Область ЗаполнениеИПроверкаЗаполнения

// Переопределение/дополнение события "Перед записью" библиотечных справочников и документов.
//   Позволяет модифицировать библиотечные объекты при необходимости.
//   * Не вызывается в режиме "ОбменДанными.Загрузка"
// 
// Параметры:
//  Объект          - СправочникОбъект, ДокументОбъект - записываемый объект
//  Отказ           - Булево - Отказ
//  РежимЗаписи     - РежимЗаписиДокумента - режим записи (для документов)
//  РежимПроведения - РежимПроведенияДокумента - режим проведения (для документов)
// 
Процедура ПередЗаписьюОбъекта(Объект, Отказ, РежимЗаписи = Неопределено, РежимПроведения = Неопределено) Экспорт
	
	//++ НЕ ГОСИС
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ПриемкаТоваровИСМП")
		И Не ЗначениеЗаполнено(Объект.ДокументОснование)
		И Объект.ЭтоНовый() Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ИдентификаторЗаявки", Объект.НомерЗаявкиНаОтгрузку);
		Запрос.Текст = "ВЫБРАТЬ ДокументОснование Из Документ.ОтгрузкаТоваровИСМП ГДЕ ИдентификаторЗаявки = &ИдентификаторЗаявки И Не ПометкаУдаления";
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Объект.ДокументОснование = Выборка.ДокументОснование;
			Объект.ДатаПриемки = ТекущаяДатаСеанса();
		КонецЕсли;
	КонецЕсли;
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// Вызывается расширением формы при необходимости проверки заполнения реквизитов при записи или при проведении документа в форме,
// а также при выполнении метода ПроверитьЗаполнение.
//
// Параметры:
//  Объект          - СправочникОбъект, ДокументОбъект - записываемый объект
//  Отказ           - Булево - Отказ
//  ПроверяемыеРеквизиты - Массив Из Строка - массив проверяемых реквизитов
//  МассивНепроверяемыхРеквизитов - Массив Из Строка - массив непроверяемых реквизитов (заполнять для отключения проверки)
//
Процедура ОбработкаПроверкиЗаполнения(Объект, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов) Экспорт
	
	Если ТипЗнч(Объект) = Тип("СправочникОбъект.ШтрихкодыУпаковокТоваров") Тогда
		
		ИспользоватьХарактеристики = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
		Если Не ИспользоватьХарактеристики Или Не Справочники.Номенклатура.ХарактеристикиИспользуются(Объект.Номенклатура) Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Характеристика");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет в табличной части служебные реквизиты.
// ТабличнаяЧасть может иметь различный состав колонок.
// В ТабличнаяЧасть обязательно содержится колонка Номенклатура - ОпределяемыйТип.Номенклатура.
// Заполнению подлежат колонки из нижеперечисленного списка, если значения, указываемые в колонке, используются в прикладном решении.
// Например:
// 	В "ТабличнаяЧасть" присутствует колонка "Артикул".
// 	Колонка подлежит заполнению, если в прикладном решении для номенклатуры возможно указание артикула.
// Список колонок для заполнения:
// 	Артикул                    - ОпределяемыйТип.Артикул - артикул номенклатуры.
// 	Код                        - ОпределяемыйТип.УникальныйИдентификаторИС - код номенклатуры.
// 	ХарактеристикиИспользуются - Булево - признак обязательного использования характеристик номенклатуры.
// 	ЕдиницаИзмерения           - ОпределяемыйТип.Упаковка - базовая единица измерения номенклатуры, в которой осуществляется учет и хранение.
// 	ТипНоменклатуры            - ОпределяемыйТип.ТипНоменклатуры - тип номенклатуры.
// 	ТребуетВзвешивания         - Булево - признак, что для номенклатуры маркированные потребительские упаковки имеют индивидуальный вес.
// 	ПроизвольнаяЕдиницаУчета   - Булево - признак, что для номенклатуры базовая единица учета отличается от маркированной потребительской упаковки.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения, Неопределено - Форма.
//  ТабличнаяЧасть - ДанныеФормыКоллекция, ТаблицаЗначений - таблица для заполнения.
Процедура ЗаполнитьСлужебныеРеквизитыВКоллекции(Форма, ТабличнаяЧасть) Экспорт
	
	//++ НЕ ГОСИС
	ПараметрыЗаполненияРеквизитов = Новый Структура;
	
	Если ТипЗнч(ТабличнаяЧасть) = Тип("ТаблицаЗначений") Тогда
		КолонкиРеквизитов = ТабличнаяЧасть.Колонки;
	Иначе
		КолонкиРеквизитов = ТабличнаяЧасть.Выгрузить(Новый Массив).Колонки;
	КонецЕсли;
	
	Если КолонкиРеквизитов.Найти("Артикул")<> Неопределено Тогда
		ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакАртикул",
			Новый Структура("Номенклатура", "Артикул"));
	КонецЕсли;
	
	Если КолонкиРеквизитов.Найти("Код")<> Неопределено Тогда
		ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакКод",
			Новый Структура("Номенклатура", "Код"));
	КонецЕсли;
	
	Если КолонкиРеквизитов.Найти("ХарактеристикиИспользуются")<> Неопределено Тогда
		ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	КонецЕсли;
	
	Если КолонкиРеквизитов.Найти("ЕдиницаИзмерения")<> Неопределено Тогда
		ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакЕдиницаИзмерения",
			Новый Структура("Номенклатура", "ЕдиницаИзмерения"));
	КонецЕсли;
	
	Если КолонкиРеквизитов.Найти("ТипНоменклатуры")<> Неопределено Тогда
		ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакТипНоменклатуры",
			Новый Структура("Номенклатура", "ТипНоменклатуры"));
	КонецЕсли;
	
	Если КолонкиРеквизитов.Найти("ТребуетВзвешивания")<> Неопределено Тогда
		ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакТребуетВзвешивания",
			Новый Структура("Номенклатура", "ТребуетВзвешивания"));
	КонецЕсли;
	
	Если КолонкиРеквизитов.Найти("ПроизвольнаяЕдиницаУчета")<> Неопределено Тогда
		ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакПроизвольнаяЕдиницаУчета",
			Новый Структура("Номенклатура", "ПроизвольнаяЕдиницаУчета"));
	КонецЕсли;
	
	Если КолонкиРеквизитов.Найти("НоваяХарактеристикаИспользуется")<> Неопределено Тогда
		Если ПараметрыЗаполненияРеквизитов.Свойство("ЗаполнитьПризнакХарактеристикиИспользуются") Тогда
			ПараметрыЗаполненияРеквизитов.ЗаполнитьПризнакХарактеристикиИспользуются.Вставить(
				"НоваяНоменклатура", "НоваяХарактеристикаИспользуется");
		Иначе
			ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
				Новый Структура("НоваяНоменклатура", "НоваяХарактеристикаИспользуется"));
		КонецЕсли;
	КонецЕсли;
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		ТабличнаяЧасть, ПараметрыЗаполненияРеквизитов);
		
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Обрабатывает строку табличной части в соостветствии с переданной структурой действий.
//
// Параметры:
//  СтрокаТабличнойЧасти - Структура, СтрокаТабличнойЧасти, ДанныеФормыЭлементКоллекции - обрабатываемая строка.
//  СтруктураДействий - структура - структура выполняемых действий.
Процедура ОбработатьСтрокуТабличнойЧасти(СтрокаТабличнойЧасти, СтруктураДействий) Экспорт
	
	//++ НЕ ГОСИС

	ТипСтрокиТабличнойЧасти = ТипЗнч(СтрокаТабличнойЧасти);
	
	Если ТипСтрокиТабличнойЧасти = Тип("Структура") Тогда
		СтрокаТабличнойЧастиСтруктурой = ОбщегоНазначения.СкопироватьРекурсивно(СтрокаТабличнойЧасти, Ложь);
	ИначеЕсли ТипСтрокиТабличнойЧасти = Тип("СтрокаТаблицыЗначений") Тогда
		СтрокаТабличнойЧастиСтруктурой = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТабличнойЧасти);
	ИначеЕсли Метаданные.НайтиПоТипу(ТипСтрокиТабличнойЧасти) <> Неопределено Тогда
		СтрокаТабличнойЧастиСтруктурой = Новый Структура();
		ПодстрокиИмени = СтрРазделить(Метаданные.НайтиПоТипу(ТипСтрокиТабличнойЧасти).ПолноеИмя(), ".");
		
		Если ПодстрокиИмени.Количество() = 4 Тогда
			РеквизитыСтроки = Метаданные.Документы[ПодстрокиИмени[1]].ТабличныеЧасти[ПодстрокиИмени[3]].Реквизиты;
			Для Каждого РеквизитСтроки Из РеквизитыСтроки Цикл
				СтрокаТабличнойЧастиСтруктурой.Вставить(РеквизитСтроки.Имя, СтрокаТабличнойЧасти[РеквизитСтроки.Имя]);
			КонецЦикла;
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьСериюРассчитатьСтатус") Тогда
		Если Не СтруктураДействий.ПроверитьСериюРассчитатьСтатус.ПараметрыУказанияСерий.Свойство("ПолноеИмяОбъекта") Тогда
			// Отчет о производстве ЕГАИС
			Если СтрокаТабличнойЧастиСтруктурой.Свойство("ИдентификаторСтрокиТовары") Тогда
				СтруктураДействий.ПроверитьСериюРассчитатьСтатус.ПараметрыУказанияСерий = СтруктураДействий.ПроверитьСериюРассчитатьСтатус.ПараметрыУказанияСерий.Сырье;
			Иначе
				СтруктураДействий.ПроверитьСериюРассчитатьСтатус.ПараметрыУказанияСерий = СтруктураДействий.ПроверитьСериюРассчитатьСтатус.ПараметрыУказанияСерий.Товары;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаТабличнойЧастиСтруктурой.Вставить("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Товар);
	
	СтруктураПересчетаСуммы = Новый Структура;
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", Истина);
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТабличнойЧастиСтруктурой, "СтавкаНДС") Тогда
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСПоНоменклатуре", СтруктураПересчетаСуммы);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТабличнойЧастиСтруктурой, "СуммаНДС") Тогда
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТабличнойЧастиСтруктурой, "СуммаСНДС") Тогда
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТабличнойЧастиСтруктурой, "Сумма") Тогда
		СтруктураДействий.Вставить("ПересчитатьСумму");
	КонецЕсли;
	
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТабличнойЧастиСтруктурой, СтруктураДействий, Неопределено);
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТабличнойЧастиСтруктурой);

	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Проверяет заполнение характеристик в таблице значений.
//
// Параметры:
//  ТаблицаТоваров - ТаблицаЗначений - таблица для проверки с колонками: Номенклатура, Характеристика.
//  Отказ - Булево - Истина - характеристики заполнены в требуемых строках, в противном случае - Ложь.
Процедура ПроверитьЗаполнениеХарактеристикВТаблицеЗначений(ТаблицаТоваров, Отказ) Экспорт
	
	//++ НЕ ГОСИС
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ СтрокиСОшибками
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|			ИЛИ ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	|			ИЛИ ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеЗаполненаХарактеристика
	|ИЗ
	|	СтрокиСОшибками КАК СтрокиСОшибками
	|ГДЕ
	|	ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик <> ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)";

	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.НеЗаполненаХарактеристика Тогда
			Отказ = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Необходимо заполнить информацию о сертификатах номенклатуры в виде соответствия из массива структур со свойствами:
//    "ВидСертификации", "НомерСертификации", "ДатаСертификации", "СрокДействия", "Бессрочный".
// Информацию по сертификатам следует добавить в соответствие 
//     "СертификатыНоменклатуры".
// 
// Параметры:
//  СписокНоменклатуры - ОпределяемыйТип.Номенклатура - элемент номенклатура.
//  СертификатыНоменклатуры - Соответствие Из Структура
//   * Ключ - ОпределяемыйТип.Номенклатура,
//   * Значение - Массив из структура: см. ИнтеграцияИСМПКлиентСервер.ИнициализироватьДанныеЗаполненияСертификации
Процедура ПриЗаполненииСертификатовНоменклатуры(СписокНоменклатуры, СертификатыНоменклатуры) Экспорт
	
	//++ НЕ ГОСИС
	ИспользоватьСертификатыНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьСертификатыНоменклатуры");
	
	Если Не ИспользоватьСертификатыНоменклатуры Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
	|	Номенклатура.Ссылка КАК Номенклатура
	|ПОМЕСТИТЬ ВидыНоменклатуры
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В (&СписокНоменклатуры)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА ОбластиДействияСертификатовНоменклатуры.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА ВидыНоменклатуры.Номенклатура
	|		ИНАЧЕ ОбластиДействияСертификатовНоменклатуры.Номенклатура 
	|	КОНЕЦ КАК Номенклатура,
	|	СертификатыНоменклатуры.Бессрочный                   КАК Бессрочный,
	|	СертификатыНоменклатуры.ДатаОкончанияСрокаДействия   КАК ДатаОкончанияСрокаДействия,
	|	СертификатыНоменклатуры.ДатаНачалаСрокаДействия      КАК ДатаСертификации,
	|	СертификатыНоменклатуры.ТипСертификата               КАК ТипСертификата,
	|	СертификатыНоменклатуры.Номер                        КАК НомерСертификации
	|ИЗ
	|	РегистрСведений.ОбластиДействияСертификатовНоменклатуры КАК ОбластиДействияСертификатовНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СертификатыНоменклатуры КАК СертификатыНоменклатуры
	|		ПО ОбластиДействияСертификатовНоменклатуры.СертификатНоменклатуры = СертификатыНоменклатуры.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО ОбластиДействияСертификатовНоменклатуры.ВидНоменклатуры = ВидыНоменклатуры.ВидНоменклатуры
	|ГДЕ
	|	ОбластиДействияСертификатовНоменклатуры.Номенклатура В (&СписокНоменклатуры)
	|	ИЛИ (ОбластиДействияСертификатовНоменклатуры.ВидНоменклатуры В
	|		(Выбрать
	|			ВидыНоменклатуры.ВидНоменклатуры
	|		Из
	|			ВидыНоменклатуры КАК ВидыНоменклатуры)
	|	И ОбластиДействияСертификатовНоменклатуры.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	|УПОРЯДОЧИТЬ ПО
	|	Бессрочный убыв,
	|	ДатаОкончанияСрокаДействия убыв";
	
	Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры);
	
	ДанныеСертификатов = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаДанных Из ДанныеСертификатов Цикл
		
		ВидСертификации = Неопределено;
		
		Если СтрокаДанных.ТипСертификата = "Сертификат соответствия" Тогда
			ВидСертификации = Перечисления.ВидыДокументовОбязательнойСертификацииИС.СертификатСоответствия;
		ИначеЕсли СтрокаДанных.ТипСертификата = "Декларация о соответствии" Тогда 
			ВидСертификации = Перечисления.ВидыДокументовОбязательнойСертификацииИС.ДекларацияСоответствия;
		КонецЕсли;
		
		Если ВидСертификации = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИнформацияОСертификате = ИнтеграцияИСМПКлиентСервер.ИнициализироватьДанныеЗаполненияСертификации();
		ИнформацияОСертификате.Вставить("ВидСертификации",   ВидСертификации);
		ИнформацияОСертификате.Вставить("НомерСертификации", СтрокаДанных.НомерСертификации);
		ИнформацияОСертификате.Вставить("ДатаСертификации",  СтрокаДанных.ДатаСертификации);
		ИнформацияОСертификате.Вставить("СрокДействия",      СтрокаДанных.ДатаОкончанияСрокаДействия);
		ИнформацияОСертификате.Вставить("Бессрочный",        СтрокаДанных.Бессрочный);
		
		СертификатыЭлемента = СертификатыНоменклатуры.Получить(СтрокаДанных.Номенклатура);
		
		Если СертификатыЭлемента = Неопределено Тогда
			СертификатыЭлемента = Новый Массив;
			СертификатыЭлемента.Добавить(ИнформацияОСертификате);
			СертификатыНоменклатуры.Вставить(СтрокаДанных.Номенклатура, СертификатыЭлемента);
		Иначе
			СертификатыЭлемента.Добавить(ИнформацияОСертификате);
		КонецЕсли;
		
	КонецЦикла;
	
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Проведение

// Настроить способ расчета статусов оформления.
// 
// Параметры:
//  РасчетОтдельно - Булево - Истина если расчет статусов оформления осуществляется отдельно от транзакции записи
Процедура НастроитьСпособРасчетаСтатусовОформления(РасчетОтдельно) Экспорт
	
	//++ НЕ ГОСИС
	
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// Обработка проведения.
// 
// Параметры:
//  ДокументОбъект - ДокументОбъект - документ ГосИС который проводится
//  Отказ - Булево - флаг отказа
//  РежимПроведения - РежимПроведенияДокумента - Режим проведения
Процедура ОбработкаПроведения(ДокументОбъект, Отказ, РежимПроведения) Экспорт
	
	//++ НЕ ГОСИС
	
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// Встраивание движений документов ГосИС по прикладным регистрам (при необходимости, например регистрация серий)
// 
// Параметры:
//  Запрос - Запрос - запрос формирующий необходимые движения документа
//  ТекстыЗапроса - СписокЗначений Из Строка - Тексты запроса
//  Регистры - Массив Из Строка - Регистры требующие (пере)формирования движений
//  ДокументСсылка  - ДокументСсылка - Документ который проводится
//  ДополнительныеСвойства - Структура - Дополнительные свойства
Процедура ТекстыЗапросовТаблицыДвижения(Запрос, ТекстыЗапроса, Регистры, ДокументСсылка, ДополнительныеСвойства) Экспорт
	
	//++ НЕ ГОСИС
	
	ИмяРегистра = "ДвиженияСерийТоваров";
	Если НЕ ИнтеграцияИС.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	ТекстЗапроса = "";
	
	ШаблонЗапросаЗЕРНО =
	"ВЫБРАТЬ
	|	&Период                      КАК Период,
	|	ТаблицаТовары.Серия          КАК Серия,
	|	ТаблицаТовары.Номенклатура   КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	&Ссылка                      КАК Документ,
	|	&Ссылка                      КАК Регистратор,
	|	ТаблицаТовары.Количество     КАК Количество,
	|	ЛОЖЬ                         КАК ЭтоСкладскоеДвижение,
	|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ВзаимодействиеСЗЕРНО) КАК СкладскаяОперация
	|ИЗ
	|	%1 КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)";
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ВнесениеСведенийОСобранномУрожаеЗЕРНО") Тогда
		ТекстЗапроса =СтрШаблон(
			ШаблонЗапросаЗЕРНО, "Документ.ВнесениеСведенийОСобранномУрожаеЗЕРНО.Товары");
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗапросОстатковПартийЗЕРНО") Тогда
		ТекстЗапроса = СтрШаблон(
			ШаблонЗапросаЗЕРНО, "Документ.ЗапросОстатковПартийЗЕРНО.ОстаткиПоДаннымЗЕРНО");
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОформлениеСДИЗЗЕРНО") Тогда
		ТекстЗапроса = СтрШаблон(
			ШаблонЗапросаЗЕРНО, "Документ.ОформлениеСДИЗЗЕРНО.Товары");
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПогашениеСДИЗЗЕРНО") Тогда
		ТекстЗапроса = СтрШаблон(
			ШаблонЗапросаЗЕРНО, "Документ.ПогашениеСДИЗЗЕРНО.Товары");
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.СписаниеПартийЗЕРНО") Тогда
		ТекстЗапроса = СтрШаблон(
			ШаблонЗапросаЗЕРНО, "Документ.СписаниеПартийЗЕРНО.Товары");
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ФормированиеПартийЗЕРНО") Тогда
		ТекстЗапроса = СтрШаблон(
			ШаблонЗапросаЗЕРНО, "Документ.ФормированиеПартийЗЕРНО.Товары");
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ФормированиеПартийИзДругихПартийЗЕРНО") Тогда
		ТекстЗапроса = СтрШаблон(
			ШаблонЗапросаЗЕРНО, "Документ.ФормированиеПартийИзДругихПартийЗЕРНО");
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ФормированиеПартийПриПроизводствеЗЕРНО") Тогда
		ИсточникиСерий = Новый Массив;
		ИсточникиСерий.Добавить(СтрШаблон(
			ШаблонЗапросаЗЕРНО, "Документ.ФормированиеПартийПриПроизводствеЗЕРНО"));
		ИсточникиСерий.Добавить(СтрШаблон(
			ШаблонЗапросаЗЕРНО, "Документ.ФормированиеПартийПриПроизводствеЗЕРНО.Сырье"));
		ТекстЗапроса = СтрСоединить(ИсточникиСерий,"
			|ОБЪЕДИНИТЬ ВСЕ
			|");
	КонецЕсли;
	
	ШаблонЗапросаСАТУРН =
	"ВЫБРАТЬ
	|	&Период                      КАК Период,
	|	ТаблицаТовары.Серия          КАК Серия,
	|	ТаблицаТовары.Номенклатура   КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	&Ссылка                      КАК Документ,
	|	&Ссылка                      КАК Регистратор,
	|	ТаблицаТовары.Количество     КАК Количество,
	|	ЛОЖЬ                         КАК ЭтоСкладскоеДвижение,
	|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ВзаимодействиеССАТУРН) КАК СкладскаяОперация
	|ИЗ
	|	%1 КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)";
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.АктИнвентаризацииСАТУРН") Тогда
		ТекстЗапроса =СтрШаблон(
			ШаблонЗапросаСАТУРН, "Документ.АктИнвентаризацииСАТУРН.Товары");
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗапросОстатковПартийСАТУРН") Тогда
		ТекстЗапроса = СтрШаблон(
			ШаблонЗапросаСАТУРН, "Документ.ЗапросОстатковПартийСАТУРН.ОстаткиПоДаннымСАТУРН");
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.АктПримененияСАТУРН") Тогда
		ТекстЗапроса = СтрШаблон(
			ШаблонЗапросаСАТУРН, "Документ.АктПримененияСАТУРН.Товары");
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ИмпортПродукцииСАТУРН") Тогда
		ТекстЗапроса = СтрШаблон(
			ШаблонЗапросаСАТУРН, "Документ.ИмпортПродукцииСАТУРН.Товары");
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.НакладнаяСАТУРН") Тогда
		ТекстЗапроса = СтрШаблон(
			ШаблонЗапросаСАТУРН, "Документ.НакладнаяСАТУРН.Товары");
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПроизводственнаяОперацияСАТУРН") Тогда
		ИсточникиСерий = Новый Массив;
		ИсточникиСерий.Добавить(СтрШаблон(
			ШаблонЗапросаСАТУРН, "Документ.ПроизводственнаяОперацияСАТУРН.Товары"));
		ИсточникиСерий.Добавить(СтрШаблон(
			ШаблонЗапросаСАТУРН, "Документ.ПроизводственнаяОперацияСАТУРН.Сырье"));
		ТекстЗапроса = СтрСоединить(ИсточникиСерий,"
			|ОБЪЕДИНИТЬ ВСЕ
			|");
	КонецЕсли;
	
	Если ТекстЗапроса <> "" Тогда
		ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	КонецЕсли;
	
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// Процедура формирования движений по прикладным регистрам.
//
// Параметры:
//  ДополнительныеСвойства - Структура - дополнительные свойства для записи движений 
//  Движения - КоллекцияДвижений - движения по которым двигается документ
//  Отказ - Булево - признак отказа от проведения документа
Процедура ОтразитьДвижения(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	//++ НЕ ГОСИС
	
	Если Отказ
		Или Не ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаДвиженияСерийТоваров")
		Или ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДвиженияСерийТоваров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияДвиженияСерийТоваров = Движения.ДвиженияСерийТоваров;
	ДвиженияДвиженияСерийТоваров.Записывать = Истина;
	ДвиженияДвиженияСерийТоваров.Загрузить(ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДвиженияСерийТоваров);
	
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Номенклатура

// В функции требуется определить право на регистрацию нового штрихкода для текущего пользователя.
//
// Параметры:
//  ДоступРазрешен - Булево - Истина, если есть право на регистрацию штрихкода. Ложь - в противном случае.
//
Процедура ПравоРегистрацииШтрихкодовНоменклатуры(ДоступРазрешен) Экспорт
	
	//++ НЕ ГОСИС
	ДоступРазрешен = ШтрихкодированиеНоменклатурыСервер.ПравоРегистрацииШтрихкодовНоменклатурыДоступно();
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// В процедуре требуется определить признак использования характеристик 
//   * для номенклатуры, если передана номенклатура,
//   * в программе, если не передана.
//
// Параметры:
//  Использование - Булево - Признак использования характеристик (для номенклатуры или общий)
//  Номенклатура - ОпределяемыйТип.Номенклатура, Неопределено - Ссылка на элемент номенклатуры.
//
Процедура ИспользованиеХарактеристик(Использование, Номенклатура) Экспорт
	
	//++ НЕ ГОСИС
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		Использование = Ложь;
	ИначеЕсли Номенклатура = Неопределено Тогда
		Использование = Истина;
	ИначеЕсли НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		Использование = Ложь;
	Иначе
		Использование = Справочники.Номенклатура.ХарактеристикиИспользуются(Номенклатура);
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// В процедуре требуется определить наличие товаров по виду продукции для которых используется механизм частичного выбытия
//
// Параметры:
//  Использование - Булево - Признак использования частичного выбытия (для вида продукции)
//  ВидПродукцииИС - Перечислениессылка.ВидыПродукцииИС - Проверяемый вид продукции.
//
Процедура ИспользованиеЧастичноеВыбытие(Использование, ВидПродукцииИС) Экспорт
	
	//++ НЕ ГОСИС
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОсобенностьУчета", ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукцииИС));
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ
		|	Справочник.Номенклатура КАК СправочникНоменклатура
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
		|		ПО ОписаниеНоменклатурыИС.Номенклатура = СправочникНоменклатура.Ссылка
		|		И ОписаниеНоменклатурыИС.ВариантЧастичногоВыбытия <> ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаЧастичногоВыбытияИС.ПустаяСсылка)
		|ГДЕ
		|	Номенклатура.ОсобенностьУчета = &ОсобенностьУчета";
	Использование = Не Запрос.Выполнить().Пустой();
	//-- НЕ ГОСИС
	
КонецПроцедуры

// В процедуре требуется определить признак использования серий
//   * для номенклатуры, если передана номенклатура,
//   * в программе, если не передана.
//
// Параметры:
//  Использование - Булево - Признак использования серий (для номенклатуры или общий)
//  Номенклатура - ОпределяемыйТип.Номенклатура, Неопределено - Ссылка на элемент номенклатуры.
//
Процедура ИспользованиеСерий(Использование, Номенклатура) Экспорт
	
	//++ НЕ ГОСИС
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
		Использование = Ложь;
	ИначеЕсли Номенклатура = Неопределено Тогда
		Использование = Истина;
	ИначеЕсли НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		Использование = Ложь;
	Иначе
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА
		|			Номенклатура.ВладелецСерий <> ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
		|		ТОГДА
		|			Номенклатура.ВладелецСерий.ИспользоватьСерии
		|		КОГДА
		|			Номенклатура.ВидНоменклатуры <> ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
		|		ТОГДА
		|			Номенклатура.ВидНоменклатуры.ИспользоватьСерии
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ПризнакИспользованияСерий
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка = &Номенклатура";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Использование = Ложь;
		Если Выборка.Следующий() Тогда
			Использование = Выборка.ПризнакИспользованияСерий;
		КонецЕсли;
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// В процедуре требуется определить признак использования упаковок для номенклатуры.
//   * для номенклатуры, если передана номенклатура,
//   * в программе, если не передана.
//
// Параметры:
//  Использование - Булево - Признак использования упаковок (для номенклатуры или общий)
//  Номенклатура - ОпределяемыйТип.Номенклатура, Неопределено - Ссылка на элемент номенклатуры.
//
Процедура ИспользованиеУпаковок(Использование, Номенклатура) Экспорт
	
	//++ НЕ ГОСИС
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
		Использование = Ложь;
	ИначеЕсли Номенклатура = Неопределено Тогда
		Использование = Истина;
	ИначеЕсли НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		Использование = Ложь;
	Иначе
		Использование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ИспользоватьУпаковки");
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// В процедуре требуется определить признак использования видов номенклатуры.
//
// Параметры:
//  Использование - Булево - Признак использования видов номенклатуры в программе.
//
Процедура ИспользованиеВидовНоменклатуры(Использование) Экспорт
	
	//++ НЕ ГОСИС
	Использование = Истина;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Возвращает объем упаковки или единицы измерения в литрах.
//  * Если не задана упаковка, то для единицы учета номенклатуры
//  * Если задана упаковка, то для указанной упаковки
//  * Если задана единица измерения, то для указанной единицы измерения
// 
// Параметры:
//  Объем - Число - Объем упаковки (исходящий)
//  Номенклатура - ОпределяемыйТип.Номенклатура, Неопределено - Номенклатура
//  Упаковка - ОпределяемыйТип.Упаковка, ОпределяемыйТип.ЕдиницаИзмерения, Неопределено - Упаковка или единица измерения номенклатуры
//  КэшированныеЗначения - Произвольный - Кэшированные значения
Процедура ОбъемУпаковки(Объем, Знач Номенклатура, Знач Упаковка, КэшированныеЗначения) Экспорт
	
	//++ НЕ ГОСИС
	
	Если ЗначениеЗаполнено(Номенклатура) И Не ЗначениеЗаполнено(Упаковка) Тогда
		Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ЕдиницаХраненияНоменклатуры(Номенклатура);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Упаковка) Тогда
		Возврат;
	КонецЕсли;
	Объем = 0;
	Литр = Константы.ЕдиницаИзмеренияЛитрИС.Получить();
	ТипИзмеряемойВеличины = Неопределено;
	Если ЗначениеЗаполнено(Литр)
		И Справочники.УпаковкиЕдиницыИзмерения.ЭтоМернаяЕдиница(Упаковка, ТипИзмеряемойВеличины)
		И ТипИзмеряемойВеличины = "Объем" Тогда
		Объем = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(Упаковка, Неопределено)
			/ Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(Литр, Неопределено);
	КонецЕсли;
	
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// Возвращает коэффициенты переданной единицы измерения
// 
// Параметры:
//  Упаковка - ОпределяемыйТип.Упаковка, ОпределяемыйТип.ЕдиницаИзмерения - Упаковка или единица измерения
//  Номенклатура - Массив Из ОпределяемыйТип.Номенклатура - Номенклатура
//  КоэффициентыУпаковокНоменклатуры - Соответствие из КлючИЗначение:
//   * Ключ - ОпределяемыйТип.Номенклатура
//   * Значение - структура:
//   * КодОшибки - Число  - Код ошибки получения коэффициента:
//        0 - Нет ошибок;
//        1 - Не заполнена единица измерения в справочнике 'ЕдиницыИзмеренияВЕТИС';
//        2 - В справочнике 'Номенклатура' выключена возможность пересчета количества в соответствующую мерную единицу измерения;
//        3 - Не удалось сопоставить единицу хранения справочника 'Номенклатура' с единицей измерения 'Упаковка'.
//   * Коэффициент - Число  - Коэффициент пересчета единицы измерения из 'Упаковка'.
Процедура ПриОпределенииКоэффициентовУпаковки(Упаковка, Номенклатура, КоэффициентыУпаковокНоменклатуры) Экспорт
	
	//++ НЕ ГОСИС
	
	Если Номенклатура.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонРезультата = Новый Структура;
	ШаблонРезультата.Вставить("КодОшибки",   0);
	ШаблонРезультата.Вставить("Коэффициент", 1);
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	ЕдиницыИзмерения.Ссылка КАК Упаковка
	|ПОМЕСТИТЬ ДанныеУпаковок
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура,
	|	Справочник.УпаковкиЕдиницыИзмерения КАК ЕдиницыИзмерения
	|		ГДЕ Номенклатура.Ссылка В (&Номенклатура)
	|		И ЕдиницыИзмерения.Ссылка = &Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеУпаковок.Номенклатура КАК Номенклатура,
	|	ДанныеУпаковок.Упаковка КАК Упаковка,
	|	ВЫБОР
	|		КОГДА ДанныеУпаковок.Упаковка = Номенклатура.ЕдиницаИзмерения
	|			ТОГДА 1
	|		ИНАЧЕ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 0)
	|	КОНЕЦ КАК Коэффициент
	|ИЗ
	|	ДанныеУпаковок КАК ДанныеУпаковок
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК ЕдиницыХранения
	|		ПО Номенклатура.ЕдиницаИзмерения = ЕдиницыХранения.Ссылка";
	
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки("Упаковка", "Номенклатура"));
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Упаковка",     Упаковка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Результат = ОбщегоНазначения.СкопироватьРекурсивно(ШаблонРезультата);
		
		Если Выборка.Коэффициент = 0 Тогда
			Результат.Коэффициент = 1;
			Результат.КодОшибки = 3;
		Иначе
			Результат.Коэффициент = Выборка.Коэффициент;
		КонецЕсли;
		
		КоэффициентыУпаковокНоменклатуры.Вставить(Выборка.Номенклатура, Результат);
		
	КонецЦикла;
	
	//-- НЕ ГОСИС
	
КонецПроцедуры

#Область ОписаниеНоменклатурыИС

// В процедуре требуется определить наличие товаров по виду продукции для которых единица учета не совпадает с 
//   количеством в потребительском коде маркировки
//
// Параметры:
//  Использование - Булево - Признак использования произвольных единиц учета (для вида продукции) (исходящий)
//  ВидПродукцииИС - Перечислениессылка.ВидыПродукцииИС - Проверяемый вид продукции.
//
Процедура ИспользованиеПроизвольныхЕдиницУчета(Использование, ВидПродукцииИС) Экспорт
	
	//++ НЕ ГОСИС
	Запрос = Новый Запрос;
	
	ОсобенностьУчета = Новый Массив;
	Если ВидПродукцииИС = Неопределено Тогда
		Для Каждого ВидПродукции Из ОбщегоНазначенияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции() Цикл
			ОсобенностьУчета.Добавить(ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукции));
		КонецЦикла;
	Иначе
		ОсобенностьУчета.Добавить(ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукцииИС));
	КонецЕсли;
	Запрос.УстановитьПараметр("ОсобенностьУчета", ОсобенностьУчета);
	Запрос.УстановитьПараметр("МерныеТипы", Справочники.УпаковкиЕдиницыИзмерения.МерныеТипыЕдиницИзмерений());
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ
		|	Справочник.Номенклатура КАК СправочникНоменклатура
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
		|		ПО (ОписаниеНоменклатурыИС.Номенклатура = СправочникНоменклатура.Ссылка
		|			Или ОписаниеНоменклатурыИС.Номенклатура = СправочникНоменклатура.НаборУпаковок)
		|		И (ОписаниеНоменклатурыИС.КоличествоВПотребительскойУпаковке <> 1
		|			Или ОписаниеНоменклатурыИС.ЕмкостьПотребительскойУпаковки > 1)
		|ГДЕ
		|	СправочникНоменклатура.ОсобенностьУчета В(&ОсобенностьУчета)
		|
		|ОБъЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ
		|	Справочник.Номенклатура КАК СправочникНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
		|		ПО (ОписаниеНоменклатурыИС.Номенклатура = СправочникНоменклатура.Ссылка
		|			Или ОписаниеНоменклатурыИС.Номенклатура = СправочникНоменклатура.НаборУпаковок)
		|ГДЕ
		|	ОписаниеНоменклатурыИС.Номенклатура ЕСТЬ NULL
		|	И СправочникНоменклатура.ОсобенностьУчета В(&ОсобенностьУчета)
		|	И СправочникНоменклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (&МерныеТипы)
		|";
	Использование = Не Запрос.Выполнить().Пустой();
	//-- НЕ ГОСИС
	
КонецПроцедуры

#КонецОбласти

#Область МаркируемаяПродукция

Процедура ПриЗаполненииТекстаЗапросаПризнакаМаркируемаяПродукцияПоНоменклатуре(ТекстЗапроса, ИмяТаблицыНоменклатура, ИмяПоляНоменклатура) Экспорт
	
	//++ НЕ ГОСИС
	
	ТекстЗапроса = СтрШаблон(
		"ВЫБРАТЬ
		|	Товары.%1 КАК Номенклатура,
		|	%3 КАК Маркируемый
		|ИЗ %2 КАК Товары",
		ИмяПоляНоменклатура,
		ИмяТаблицыНоменклатура,
		ИнтеграцияИСУТ.ОпределениеПризнакаМаркируемаяПродукцияТекстаЗапроса(
			СтрШаблон("Товары.%1",ИмяПоляНоменклатура)));
	
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область УпаковкиЕдиницыИзмерения

// Заполняет список упаковок с коэффициентом упаковки в выходящем параметре ТаблицаУпаковокНоменклатуры
// с признаками ЯвляетсяПотребительской, ЯвляетсяУпаковкойЧастичногоВыбытия
// 
// Параметры:
//  Номерклатура - Массив из ОпределяемыйТип.Номенклатура
//  ТаблицаУпаковокНоменклатуры - см. ИнтеграцияИС.НоваяТаблицаУпаковокНоменклатуры
Процедура ПриЗаполнениУпаковокНоменклатуры(Номерклатура, ТаблицаУпаковокНоменклатуры) Экспорт
	
	//++ НЕ ГОСИС
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СправочникНоменклатура.Ссылка   КАК Номенклатура,
	|	Упаковки.Ссылка                 КАК Упаковка,
	|	Упаковки.Наименование           КАК ПредставлениеУпаковки,
	|	&ТекстЗаменыКоэффициентУпаковки КАК Коэффициент,
	|	ВЫБОР
	|		КОГДА ОписаниеНоменклатурыИС.Номенклатура ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ОписаниеНоменклатурыИС.ПотребительскаяУпаковка = Упаковки.Ссылка
	|	КОНЕЦ КАК ЯвляетсяПотребительской,
	|	ВЫБОР
	|		КОГДА ОписаниеНоменклатурыИС.Номенклатура ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ОписаниеНоменклатурыИС.УпаковкаЧастичногоВыбытия = Упаковки.Ссылка
	|	КОНЕЦ КАК ЯвляетсяУпаковкойЧастичногоВыбытия
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК Упаковки
	|		ПО (ВЫБОР
	|				КОГДА СправочникНоменклатура.НаборУпаковок = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
	|					ТОГДА СправочникНоменклатура.Ссылка = Упаковки.Владелец
	|				КОГДА СправочникНоменклатура.НаборУпаковок <> ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ПустаяСсылка)
	|					ТОГДА СправочникНоменклатура.НаборУпаковок = Упаковки.Владелец
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|			И (НЕ Упаковки.ПометкаУдаления)
	|			И (Упаковки.ТипУпаковки <> ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
	|		ПО СправочникНоменклатура.Ссылка = ОписаниеНоменклатурыИС.Номенклатура
	|ГДЕ
	|	СправочникНоменклатура.Ссылка В (&Номерклатура)
	|	И СправочникНоменклатура.ЕдиницаИзмерения <> Упаковки.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПредставлениеУпаковки";
	
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст,
		"&ТекстЗаменыКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки("Упаковки"));
	
	Запрос.УстановитьПараметр("Номерклатура", Номерклатура);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НоваяСтрока = ТаблицаУпаковокНоменклатуры.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
	КонецЦикла;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Коэффициент упаковки.
// 
// Параметры:
// Коэффициент - Число - Выходное значение коэффициента упаковки.
//  Упаковка - ОпределяемыйТип.Упаковка - Упаковка
//  Номенклатура - Неопределено, ОпределяемыйТип.Номенклатура - Номенклатура
// КэшированныеЗначения - Произвольный - Кэшированные значениия
Процедура КоэффициентУпаковки(Коэффициент, Знач Упаковка, Знач Номенклатура, КэшированныеЗначения) Экспорт
	
	//++ НЕ ГОСИС
	
	Если ЗначениеЗаполнено(Упаковка) Тогда
		Коэффициент = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(Упаковка, Номенклатура);
	Иначе
		Коэффициент = 1;
	КонецЕсли;
	
	//-- НЕ ГОСИС
	
	Возврат;

КонецПроцедуры

// В процедуре требуется определить единицу измерения веса с кодом по ОКЕИ 166.
// Используется для пересчета упаковок в килограммы.
// 
// Параметры:
//  ЕдиницаИзмеренияКилограмм - ОпределяемыйТип.Упаковка - Единица измерения веса (килограмм).
Процедура ЕдиницаИзмеренияКилограмм(ЕдиницаИзмеренияКилограмм) Экспорт
	
	//++ НЕ ГОСИС
	Результат = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("166",,,Справочники.НаборыУпаковок.БазовыеЕдиницыИзмерения);
	Если Не ЗначениеЗаполнено(Результат) Тогда
		УстановитьПривилегированныйРежим(Истина);
		Объект = Справочники.УпаковкиЕдиницыИзмерения.СоздатьЭлемент();
		Объект.Владелец = Справочники.НаборыУпаковок.БазовыеЕдиницыИзмерения;
		Объект.Код = "166";
		Объект.Наименование = НСтр("ru = 'кг'");
		Объект.НаименованиеПолное = НСтр("ru = 'Килограмм'");
		Объект.МеждународноеСокращение = "KGM";
		Объект.ТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.Вес;
		Объект.Числитель = 1;
		Объект.Знаменатель = 1;
		Объект.Записать();
		Результат = Объект.Ссылка;
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	ЕдиницаИзмеренияКилограмм = Результат;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// В процедуре требуется определить единицу измерения объема с кодом по ОКЕИ 112.
// Используется для пересчета упаковок в литры.
//  
// Параметры:
//  ЕдиницаИзмеренияЛитр - ОпределяемыйТип.Упаковка - Единица измерения объема (литр).
Процедура ЕдиницаИзмеренияЛитр(ЕдиницаИзмеренияЛитр) Экспорт
	
	//++ НЕ ГОСИС
	Результат = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("112",,,Справочники.НаборыУпаковок.БазовыеЕдиницыИзмерения);
	Если Не ЗначениеЗаполнено(Результат) Тогда
		УстановитьПривилегированныйРежим(Истина);
		Объект = Справочники.УпаковкиЕдиницыИзмерения.СоздатьЭлемент();
		Объект.Владелец = Справочники.НаборыУпаковок.БазовыеЕдиницыИзмерения;
		Объект.Код = "112";
		Объект.Наименование = НСтр("ru = 'л (дм3)'");
		Объект.НаименованиеПолное = НСтр("ru = 'Литр (Кубический дециметр)'");
		Объект.МеждународноеСокращение = "LTR";
		Объект.ТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.Объем;
		Объект.Числитель = 1;
		Объект.Знаменатель = 1000;
		Объект.Записать();
		Результат = Объект.Ссылка;
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	ЕдиницаИзмеренияЛитр = Результат;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Предназначена для получения значения коэффициента, веса, объема упаковки и типа измеряемой величины.
//
// Параметры:
//  ДанныеУпаковок - ТаблицаЗначений - Таблица с колонками:
//   * Номенклатура - ОпределяемыйТип.Номенклатура - Ссылка на номенклатуру - обязательно для указания.
//   * Упаковка     - ОпределяемыйТип.Упаковка - упаковка, данные которой нужно получить - если не указана,
//                                               тогда получаются данные базовой единицы измерения номенклатуры.
//   * Вес          - Число - Вес упаковки.
//   * Объем        - Число - Объем упаковки.
//   * Коэффициент  - Число - Коэффициент упаковки.
//   * ТипИзмеряемойВеличиныВес   - Булево - Устанавливается в значение Истина, если единица измерения номенклатуры
//                                           или упаковка, является единицой измерения веса.
//   * ТипИзмеряемойВеличиныОбъем - Булево - Устанавливается в значение Истина, если единица измерения номенклатуры
//                                           или упаковка, является единицой измерения объема.
//  ВесОбъемУпаковкиВЕдиницеКонстантИС - Булево - Если ЛОЖЬ, то вес и объем возвращаются в единицах измерения веса и объема,
//                                                иначе - в единицах измерения, указанных в константах:
//                                                ЕдиницаИзмеренияКилограммИС, ЕдиницаИзмеренияЛитрИС.
//
Процедура КоэффициентВесОбъемУпаковок(ДанныеУпаковок, ВесОбъемУпаковкиВЕдиницеКонстантИС = Истина) Экспорт
	
	//++ НЕ ГОСИС
	
	Если ДанныеУпаковок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДляЗапроса = Новый ТаблицаЗначений;
	ТаблицаДляЗапроса.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаДляЗапроса.Колонки.Добавить("Упаковка",     Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	ТаблицаДляЗапроса.Колонки.Добавить("ИндексСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(5));
	
	Для Каждого Строка Из ДанныеУпаковок Цикл
		Если ЗначениеЗаполнено(Строка.Номенклатура) Тогда
			НоваяСтрока = ТаблицаДляЗапроса.Добавить();
			НоваяСтрока.Номенклатура = Строка.Номенклатура;
			НоваяСтрока.Упаковка     = Строка.Упаковка;
			НоваяСтрока.ИндексСтроки = ДанныеУпаковок.Индекс(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Если ВесОбъемУпаковкиВЕдиницеКонстантИС Тогда
		ТекстЗапросаКоэффициентовВесаИОбъема =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ЕдиницаИзмеренияКилограммИС.Значение.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес)
		|			И ЕСТЬNULL(ЕдиницаИзмеренияКилограммИС.Значение.Знаменатель, 1) <> 0
		|		ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ЕдиницаИзмеренияКилограммИС.Значение.Числитель, 1) / ЕСТЬNULL(ЕдиницаИзмеренияКилограммИС.Значение.Знаменатель, 1) КАК Число(17,7))
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК КоэффициентВеса,
		|	ВЫБОР
		|		КОГДА ЕдиницаИзмеренияЛитрИС.Значение.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Объем)
		|			И ЕСТЬNULL(ЕдиницаИзмеренияЛитрИС.Значение.Знаменатель, 1) <> 0
		|		ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ЕдиницаИзмеренияЛитрИС.Значение.Числитель, 1) / ЕСТЬNULL(ЕдиницаИзмеренияЛитрИС.Значение.Знаменатель, 1) КАК Число(17,7))
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК КоэффициентОбъема
		|ПОМЕСТИТЬ КоэффициентыВесаИОбъема
		|ИЗ
		|	Константа.ЕдиницаИзмеренияКилограммИС КАК ЕдиницаИзмеренияКилограммИС,
		|	Константа.ЕдиницаИзмеренияЛитрИС КАК ЕдиницаИзмеренияЛитрИС";
	Иначе
		ТекстЗапросаКоэффициентовВесаИОбъема =
		"ВЫБРАТЬ
		|	1 КАК КоэффициентВеса,
		|	1 КАК КоэффициентОбъема
		|ПОМЕСТИТЬ КоэффициентыВесаИОбъема";
	КонецЕсли;
	
	ИсточникУпаковки        = "Данные.Упаковка";
	ИсточникУпаковкиБазовая = "Данные.ЕдиницаИзмерения";
	ИсточникНоменклатуры    = "Данные.Номенклатура";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДанныеУпаковок", ТаблицаДляЗапроса);
	Запрос.Текст = СтрШаблон(
	"ВЫБРАТЬ
	|	ДанныеУпаковок.ИндексСтроки,
	|	ДанныеУпаковок.Номенклатура,
	|	ДанныеУпаковок.Упаковка
	|ПОМЕСТИТЬ ДанныеУпаковок
	|ИЗ
	|	&ДанныеУпаковок КАК ДанныеУпаковок
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеУпаковок.ИндексСтроки КАК ИндексСтроки,
	|	ДанныеУпаковок.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ДанныеУпаковок.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|		ТОГДА СправочникНоменклатура.ЕдиницаИзмерения
	|		ИНАЧЕ ДанныеУпаковок.Упаковка
	|	КОНЕЦ КАК Упаковка,
	|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ПОМЕСТИТЬ Данные
	|ИЗ
	|	ДанныеУпаковок КАК ДанныеУпаковок
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|	ПО ДанныеУпаковок.Номенклатура = СправочникНоменклатура.Ссылка
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|%1
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Данные.ИндексСтроки,
	|	%2 КАК Коэффициент,
	|	ВЫБОР
	|		КОГДА ЕстьNULL(КоэффициентыВесаИОбъема.КоэффициентВеса, 0) = 0
	|		ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ(%3 / КоэффициентыВесаИОбъема.КоэффициентВеса КАК ЧИСЛО(18, 6))
	|	КОНЕЦ КАК ВесЕдиницы,
	|	ВЫБОР
	|		КОГДА ЕстьNULL(КоэффициентыВесаИОбъема.КоэффициентОбъема, 0) = 0
	|		ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ(%4 / КоэффициентыВесаИОбъема.КоэффициентОбъема КАК ЧИСЛО(18, 6))
	|	КОНЕЦ КАК ОбъемЕдиницы,
	|	Данные.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес)
	|		ИЛИ Данные.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес) КАК ТипИзмеряемойВеличиныВес,
	|	Данные.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Объем)
	|		ИЛИ Данные.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Объем) КАК ТипИзмеряемойВеличиныОбъем
	|ИЗ
	|	Данные КАК Данные
	|	ПОЛНОЕ СОЕДИНЕНИЕ КоэффициентыВесаИОбъема КАК КоэффициентыВесаИОбъема
	|	ПО ИСТИНА",
	ТекстЗапросаКоэффициентовВесаИОбъема,
	Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(ИсточникУпаковки, ИсточникНоменклатуры),
	Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки(ИсточникУпаковкиБазовая, ИсточникНоменклатуры, Ложь),
	Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки(ИсточникУпаковкиБазовая, ИсточникНоменклатуры, Ложь));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Строка = ДанныеУпаковок[Выборка.ИндексСтроки];
		Строка.Коэффициент = Выборка.Коэффициент;
		Строка.Вес         = Выборка.Коэффициент * Выборка.ВесЕдиницы;
		Строка.Объем       = Выборка.Коэффициент * Выборка.ОбъемЕдиницы;
		Строка.ТипИзмеряемойВеличиныВес   = Выборка.ТипИзмеряемойВеличиныВес;
		Строка.ТипИзмеряемойВеличиныОбъем = Выборка.ТипИзмеряемойВеличиныОбъем;
	КонецЦикла;
	
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область КодыТНВЭД

// В данной процедуре требуется переопределить текст запроса, определяющий сопоставление классификатора ТН ВЭД и данных регистра сведений КодыТНВЭДИСМП.
//   Требования к тексту запроса:
//     Если классификатора ТН ВЭД не используется, переопределение также не заполнять.
//     Результат запроса обязательно должен содержать следующие поля:
//   Колонки временной таблицы "ДанныеШтрихкодовУпаковок":
//     КодТНВЭД           - Строка - код.
//     ВидПродукции       - ПеречислениеСсылка.ВидыПродукцииИС - вид продукции.
//     НаименованиеПолное - Строка - наименование.
//     КодТНВЭДСсылка     - Произвольный - ссылка на сопоставленный элемент классификатора.
//     Сопоставлено       - Число - 0, если в базе не найден соотвествующий элемент классификатора, 1 - если найден.
// Параметры:
//  ТекстЗапроса - Строка - Переопределяемый текст запроса.
Процедура ПриОпределенииТекстаЗапросаСопоставлениеКодовТНВЭД(ТекстЗапроса) Экспорт
	
	//++ НЕ ГОСИС
	ТекстЗапроса = "ВЫБРАТЬ
	|	КодыТНВЭДИСМП.КодТНВЭД           КАК КодТНВЭД,
	|	КодыТНВЭДИСМП.ВидПродукции       КАК ВидПродукции,
	|	КодыТНВЭДИСМП.НаименованиеПолное КАК НаименованиеПолное,
	|
	|	ЕстьNULL(КлассификаторТНВЭД.Ссылка, Неопределено) КАК КодТНВЭДСсылка,
	|	ВЫБОР
	|		КОГДА КлассификаторТНВЭД.Ссылка ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Сопоставлено
	|ИЗ
	|	РегистрСведений.КодыТНВЭДИСМП КАК КодыТНВЭДИСМП
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторТНВЭД КАК КлассификаторТНВЭД
	|		ПО КодыТНВЭДИСМП.КодТНВЭД = КлассификаторТНВЭД.Код";
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ОрганизацииИКонтрагенты

// Процедура заполняет признак использования гос.контрактов по 275ФЗ.
//
// Параметры:
//  Используется - Булево - Признак использования гос.контрактов по 275ФЗ. Значение по умолчанию Ложь.
Процедура ИспользуетсяПоддержкаПлатежейВСоответствииС275ФЗ(Используется) Экспорт
	
	//++ НЕ ГОСИС
	

	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// В процедуре нужно реализовать заполнение структуры данными из информационной базы.
//
// Параметры:
//  Организация - ОпределяемыйТип.ОрганизацияКонтрагентГосИС - ссылка на собственную организацию или контрагента,
//  Сведения - Структура - структура с реквизитами организации, которые требуется заполнить,
//  ДатаСведений - Дата - дата, на которую требуется получить информацию.
//
Процедура ЗаполнитьСведенияОбОрганизации(Организация, Сведения, ДатаСведений = Неопределено) Экспорт
	
	//++ НЕ ГОСИС
	Если ДатаСведений = Неопределено Тогда
		ДатаСведений = ТекущаяДатаСеанса();
	КонецЕсли;
	
	СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Организация, ДатаСведений);
	ЗаполнитьЗначенияСвойств(Сведения, СведенияОбОрганизации);
	
	Если СведенияОбОрганизации.Свойство("ОфициальноеНаименование") Тогда
		Сведения.Вставить("Наименование", СведенияОбОрганизации.ОфициальноеНаименование);
	Иначе
		Сведения.Вставить("Наименование", СведенияОбОрганизации.Представление);
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// В процедуре нужно реализовать заполнение соответствия ИНН (или налогового номера в стране регистрации) и контрагентов
// для переданного массива контрагентов.
//
// Параметры:
//  СоответствиеИННКонтрагентам - Соответствие из Строка- соответствие для заполнения:
//   * Ключ - ОпределяемыйТип.КонтрагентГосИС - ссылка на контрагента.
//   * Значение - Строка - ИНН (или его аналог).
//  Контрагенты - Массив из ОпределяемыйТип.КонтрагентГосИС - массив контрагентов.
Процедура ПриОпределенииИНННалоговыхНомеровКонтрагентов(СоответствиеИННКонтрагентам, Контрагенты) Экспорт
	
	//++ НЕ ГОСИС
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокКонтрагентов", Контрагенты);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент)
	|			ТОГДА Контрагенты.НалоговыйНомер
	|		ИНАЧЕ Контрагенты.ИНН
	|	КОНЕЦ КАК ИНН,
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка В (&СписокКонтрагентов)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СоответствиеИННКонтрагентам.Вставить(Выборка.Ссылка, Выборка.ИНН);
	КонецЦикла;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// В процедуре нужно реализовать заполнение структуры данными ИНН/КПП/GLN из информационной базы.
//
// Параметры:
//  Сведения      - Структура - структура с реквизитами организации, которые требуется заполнить,
//  Организация   - ОпределяемыйТип.Организация - ссылка на собственную организацию,
//  Подразделение - ОпределяемыйТип.Подразделение - Подразделение организации.
Процедура ПриОпределенииИННКППGLNОрганизации(Сведения, Организация, Подразделение) Экспорт
	
	//++ НЕ ГОСИС
	Параметры = Новый Структура("ИНН, КПП, GLN, ИностранныйКонтрагент");
	ИнтеграцияГИСМПереопределяемый.ИННКППGLNОрганизации(Организация, Подразделение, Параметры);
	ЗаполнитьЗначенияСвойств(Сведения, Параметры);
	//-- НЕ ГОСИС
	
КонецПроцедуры

//Получение кода ОКОПФ по организации.
//
//Параметры:
//  КодОКОПФ    - Строка - Код ОКОПФ организации.
//  Организация - ОпределяемыйТип.Организация - Организация, для которой необходимо получить код ОКОПФ.
//
Процедура КодОКОПФОрганизации(КодОКОПФ, Организация) Экспорт
	
	//++ НЕ ГОСИС
	Если ЗначениеЗаполнено(Организация) Тогда
		КодОКОПФ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "КодОКОПФ");
	КонецЕсли;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Заполняет представление руководителя организации.
//
// Параметры:
//  ПредставлениеРуководителя - (см. ИнтеграцияИС.ДанныеРуководителяОрганизации)
//  Организация - ОпределяемыйТип.ОрганизацияКонтрагентГосИС - ссылка на собственную организацию или контрагента,
//  ДатаСведений - Дата - дата, на которую требуется получить информацию.
Процедура ОпределитьДанныеРуководителяОрганизации(ПредставлениеРуководителя, Организация, ДатаСведений) Экспорт
	
	//++ НЕ ГОСИС
	ДанныеРуководителя = ОтветственныеЛицаСервер.ПолучитьДанныеОтветственногоЛица(Организация, ДатаСведений);
	ПредставлениеРуководителя.Руководитель = Строка(ДанныеРуководителя.ФизическоеЛицо);
	ПредставлениеРуководителя.Должность = Строка(ДанныеРуководителя.Должность);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// В процедуре нужно реализовать поиск контрагента по ИНН и/или КПП.
//
// Параметры:
//  Контрагент - ОпределяемыйТип.ОрганизацияКонтрагентГосИС, ОпределяемыйТип.КонтрагентГосИС - найденный контрагент (исходящий),
//             - Неопределено - контрагент не найден (исходящий),
//  ИНН - Строка - ИНН искомого контрагента,
//  КПП - Строка - КПП искомого контрагента.
//
Процедура ЗаполнитьКонтрагентаПоИННКПП(Контрагент, ИНН, КПП) Экспорт
	
	//++ НЕ ГОСИС
	Контрагент = Неопределено;
	Если ПустаяСтрока(ИНН) И ПустаяСтрока(КПП) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатПоиска = ПартнерыИКонтрагентыЛокализация.ИННКППУжеИспользуетсяВИнформационнойБазе(ИНН, КПП);
	Если РезультатПоиска.НайденныеСовпадения.Количество() > 0  Тогда
		Контрагент = РезультатПоиска.НайденныеСовпадения[0].Ссылка;
	КонецЕсли;
	
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// В процедуре необходимо сформировать соответствие по коллекции ИНН.
//
// Параметры:
//  КоллекцияИНН - Массив Из Строка - Список ИНН.
//  Соответствие - Соответствие Из ОпределяемыйТип.КонтрагентГосИС - Соответсвие вида:
//   * Ключ - Строка - ИНН
//   * Значение - ОпределяемыйТип.КонтрагентГосИС - Контрагент
Процедура ЗаполнитьСоответствиеИННКонтрагентам(КоллекцияИНН, Соответствие) Экспорт
	
	//++ НЕ ГОСИС
	
	Если Не ПравоДоступа("Чтение", Метаданные.Справочники.Контрагенты) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Ссылка КАК Контрагент,
	|	Контрагенты.ИНН    КАК ИНН
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН В (&КоллекцияИНН)
	|");
	Запрос.УстановитьПараметр("КоллекцияИНН", КоллекцияИНН);

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Соответствие.Вставить(Выборка.ИНН, Выборка.Контрагент);
	КонецЦикла;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// В процедуре необходимо сформировать соответствие по коллекции налоговых номеров. Ключ - налоговый номер, значение - Контрагент.
//
// Параметры:
//  КоллекцияНалоговыхНомеров - Массив Из Строка - Список налоговых номеров юр.лиц за пределами РФ.
//  Соответствие - Соответствие Из ОпределяемыйТип.КонтрагентГосИС - Соответсвие вида:
//    * Ключ - Строка - Налоговый номер
//    * Значение - ОпределяемыйТип.КонтрагентГосИС - Контрагент
Процедура ПриОпределенииСоответствияНалоговыхНомеровКонтрагентам(КоллекцияНалоговыхНомеров, Соответствие) Экспорт
	
	//++ НЕ ГОСИС
	
	Если Не ПравоДоступа("Чтение", Метаданные.Справочники.Контрагенты) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Ссылка КАК Контрагент,
	|	Контрагенты.НалоговыйНомер КАК НалоговыйНомер
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.НалоговыйНомер В (&КоллекцияНалоговыхНомеров)");
	Запрос.УстановитьПараметр("КоллекцияНалоговыхНомеров", КоллекцияНалоговыхНомеров);

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Соответствие.Вставить(Выборка.НалоговыйНомер, Выборка.Контрагент);
	КонецЦикла;
	
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// В процедуре необходимо заполнить соответствие по коллекции ИНН.
//
// Параметры:
//  КоллекцияИНН - Массив Из Строка - Список ИНН.
//  Соответствие - Соответствие Из ОпределяемыйТип.Организация - Соответсвие вида:
//   * Ключ - Строка - ИНН организации
//   * Значение - ОпределяемыйТип.Организация - Организация
Процедура ЗаполнитьСоответствиеИННОрганизациям(КоллекцияИНН, Соответствие) Экспорт
	
	//++ НЕ ГОСИС
	
	Если Не ПравоДоступа("Чтение", Метаданные.Справочники.Организации) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Организация,
	|	Организации.ИНН    КАК ИНН
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ИНН В (&КоллекцияИНН)
	|");
	Запрос.УстановитьПараметр("КоллекцияИНН", КоллекцияИНН);

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Соответствие.Вставить(Выборка.ИНН, Выборка.Организация);
	КонецЦикла;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// В процедуре нужно реализовать поиск организации в прикладном объекте.
//
// Параметры:
//  Организация - ОпределяемыйТип.Организация - найденная организация
//  Объект      - Произвольный                - объект в котором производится поиск
//
Процедура ПриОпределенииОрганизацииИзПрикладногоОбъекта(Организация, Объект) Экспорт
	
	//++ НЕ ГОСИС
	Если ТипЗнч(Объект) = Тип("ДокументСсылка.ПроизводственнаяОперацияВЕТИС") Тогда
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Ссылка, "ХозяйствующийСубъект, Предприятие");
		
		ПредставленияСопоставлений = ИнтеграцияВЕТИСВызовСервера.ПредставленияСопоставлений(
			Реквизиты.ХозяйствующийСубъект, Реквизиты.Предприятие);
		
		Организация = ПредставленияСопоставлений.КонтрагентХозяйствующегоСубъекта.Ссылка;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПроизводственнаяОперацияВЕТИС") Тогда
		
		ПредставленияСопоставлений = ИнтеграцияВЕТИСВызовСервера.ПредставленияСопоставлений(
			Объект.ХозяйствующийСубъект, Объект.Предприятие);
		
		Организация = ПредставленияСопоставлений.КонтрагентХозяйствующегоСубъекта.Ссылка;
		
	ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Объект)) Тогда;
		
		Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "Организация");
		
	Иначе
		
		Организация = Объект.Организация;
		
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// В процедуре необходимо реализовать заполнение таблицы данными организаций, доступных для интеркампани.
// 
// Параметры:
//  ОрганизацииИнтеркампани - ТаблицаЗначений - Организации интеркампани:
// * Организация - ОпределяемыйТип.Организация - Ссылка на организацию.
// * Подразделение  - ОпределяемыйТип.Подразделение - Ссылка на подрезделение.
// * Представление - Строка - Представление организации.
// * ИНН - Строка - ИНН организации.
// * КПП - Строка - КПП организации.
Процедура ПриОпределенииОрганизацийИнтеркампани(ОрганизацииИнтеркампани) Экспорт
	
	//++ НЕ ГОСИС
	Если Не ОбщегоНазначенияУТВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьПередачиТоваровМеждуОрганизациями") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Организации.Ссылка        КАК Организация,
		|	Организации.Представление КАК Представление,
		|	Организации.ИНН           КАК ИНН,
		|	Организации.КПП           КАК КПП
		|ИЗ
		|	Справочник.Организации КАК Организации";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ОрганизацииИнтеркампани.Добавить(), Выборка);
	КонецЦикла;
	
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемоеОборудование

// Настраивает подключаемое оборудование в форме,
// устанавливает флаг ИспользоватьПодключаемоеОборудование в форме.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой необходимо настроить подключаемое оборудование,
//  ПрефиксыЭлементовФормы - Строка - строка имен табличных частей, разделенных запятыми, в которых нужно настроить видимость команд.
Процедура НастроитьПодключаемоеОборудование(Форма, ПрефиксыЭлементовФормы = "Товары") Экспорт
	
	//++ НЕ ГОСИС
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(Форма, ПрефиксыЭлементовФормы);
	
	Если ЗначениеЗаполнено(ПрефиксыЭлементовФормы) Тогда
		МассивПрефиксыЭлементовФормы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПрефиксыЭлементовФормы, ",");
	Иначе
		МассивПрефиксыЭлементовФормы = Новый Массив;
		МассивПрефиксыЭлементовФормы.Добавить(ПрефиксыЭлементовФормы);
	КонецЕсли;
	
	Если Форма.ИмяФормы <> "Обработка.ПроверкаИПодборАлкогольнойПродукцииЕГАИС.Форма.ПроверкаИПодбор"
		И Форма.ИмяФормы <> "Обработка.ПроверкаИПодборПродукцииИСМП.Форма.ПроверкаИПодбор"
		И Форма.ИмяФормы <> "Обработка.ПроверкаИПодборТабачнойПродукцииМОТП.Форма.ПроверкаИПодбор"
		И Форма.ИмяФормы <> "ОбщаяФорма.ФормаУточненияДанныхИС"
		И Форма.ИмяФормы <> "ОбщаяФорма.ФормаУточненияПодобраннойПродукцииИСМП" Тогда
			
		Для Каждого Префикс Из МассивПрефиксыЭлементовФормы Цикл
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Форма.Элементы,
				Префикс + "ВыгрузитьДанныеВТСД",
				"Видимость",
				Ложь);
		КонецЦикла;
		
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ДлительныеОперации

//Особенности работы с длительными операциями в конкретном окружении
//
//Параметры:
//   Параметры - Структура - параметры фонового задания.
//   ПараметрыВыполнения - см. ДлительныеОперации.ПараметрыВыполненияВФоне.
Процедура НастроитьДлительнуюОперацию(Параметры, ПараметрыВыполнения) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеПечатныхФорм

// Заполняет структуру параметров возможных получателей печатных форм при отправке по электронной почте.
//
// Параметры:
//  ПараметрыОтправки - Структура - содержит параметры отправки сформированных печатных форм
//  ДанныеОбъектовПечати - Массив,Соответствие - данные о печатаемых объектах
//  КоллекцияПечатныхФорм - ТаблицаЗначений - содержит информацию о формируемых печатных формах.
Процедура ЗаполнитьПараметрыОтправки(ПараметрыОтправки, ДанныеОбъектовПечати, КоллекцияПечатныхФорм)  Экспорт
	
	//++ НЕ ГОСИС
	ФормированиеПечатныхФорм.ЗаполнитьПараметрыОтправки(ПараметрыОтправки, ДанныеОбъектовПечати, КоллекцияПечатныхФорм);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ОбщегоНазначенияУТ

// (См ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании)
Процедура ПроверитьВозможностьВводаНаОсновании(Документ,
	                                           Статус = Неопределено,
	                                           ЕстьОшибкиПроведен = Ложь,
	                                           ЕстьОшибкиСтатус = Ложь,
	                                           МассивДопустимыхСтатусов = Неопределено,
	                                           СоглашениеДоступноВнешнемуПользователю = Неопределено) Экспорт
	
	//++ НЕ ГОСИС
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		Документ,
		Статус,
		ЕстьОшибкиПроведен,
		ЕстьОшибкиСтатус,
		МассивДопустимыхСтатусов,
		СоглашениеДоступноВнешнемуПользователю);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Возвращает представление объекта.
// 
// Параметры:
//  Представление - Строка - Исходящий параметр со значением представления.
//  ПараметрОбъект - Строка, ОбъектМетаданных - Наименование типа объекта либо сам объект.
Процедура УстановитьПредставлениеОбъекта(Представление, ПараметрОбъект) Экспорт
	
	//++ НЕ ГОСИС
	Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(ПараметрОбъект);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ВызовыИзБСП

// (См. ОбщийМодуль.ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту)
//
Процедура ПриОпределенииКомандПодключенныхКОбъекту(НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды) Экспорт
	
	//++ НЕ ГОСИС
	
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область МенюОтчеты

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
Процедура ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
Процедура ДобавитьКомандуДвиженияДокумента(КомандыОтчетов) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область СерииНоменклатуры

// Заполняет имена реквизитов, от значений которых зависят параметры указания серий.
//
// Параметры:
//  ИменаРеквизитов - Строка           - Результат заполнения.
//  ТипОбъекта      - ОбъектМетаданных - Тип объекта коллекции объектов метаданных.
Процедура ЗаполнитьИменаРеквизитовДляЗаполненияПараметровУказанияСерий(ИменаРеквизитов, ТипОбъекта) Экспорт
	
	//++ НЕ ГОСИС
	Если ТипОбъекта = Метаданные.Документы.ТТНВходящаяЕГАИС Тогда
		ИменаРеквизитов = "Дата,ДокументОснование,ВидОперации,ТорговыйОбъект";
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ВходящаяТранспортнаяОперацияВЕТИС
		Или ТипОбъекта = Метаданные.Документы.ИнвентаризацияПродукцииВЕТИС
		Или ТипОбъекта = Метаданные.Документы.ИсходящаяТранспортнаяОперацияВЕТИС
		Или ТипОбъекта = Метаданные.Документы.ЗапросСкладскогоЖурналаВЕТИС Тогда
		ИменаРеквизитов = "Дата,ТорговыйОбъект,Ссылка";
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ПроизводственнаяОперацияВЕТИС Тогда
		ИменаРеквизитов = "Дата,ДокументОснование,ТорговыйОбъект,Ссылка";
	ИначеЕсли ТипОбъекта = Метаданные.Документы.МаркировкаТоваровГИСМ Тогда
		ИменаРеквизитов = "Склад,ОперацияМаркировки,Дата";
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ПеремаркировкаТоваровГИСМ Тогда
		ИменаРеквизитов = "Склад,Дата";
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Заполняет параметры указания серий для товаров, указанных в объекте.
//
// Параметры:
//  Параметры  - Произвольный     - выходной, параметры указания серий, состав полей определен в прикладной конфигурации.
//  ТипОбъекта - ОбъектМетаданных - Тип объекта коллекции объектов метаданных.
//  Объект     - Структура        - Значения реквизитов объекта, необходимых для заполнения параметров указания серий.
Процедура ЗаполнитьПараметрыУказанияСерий(Параметры, ТипОбъекта, Объект) Экспорт
	
	//++ НЕ ГОСИС
	Если ТипОбъекта = Метаданные.Документы.ТТНИсходящаяЕГАИС Тогда
		
		Параметры = ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийТТНИсходящаяЕГАИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ТТНВходящаяЕГАИС Тогда
		
		Параметры = ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийТТНВходящаяЕГАИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ЧекЕГАИС Тогда
		
		Параметры = ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийЧекЕГАИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ЧекЕГАИСВозврат Тогда
		
		Параметры = ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийЧекЕГАИСВозврат(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.АктПостановкиНаБалансЕГАИС Тогда
		
		Параметры = ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийАктПостановкиНаБалансЕГАИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.АктСписанияЕГАИС Тогда
		
		Параметры = ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийАктСписанияЕГАИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ПередачаВРегистр2ЕГАИС Тогда
		
		Параметры = ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийПередачаВРегистр2ЕГАИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ВозвратИзРегистра2ЕГАИС Тогда
		
		Параметры = ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийВозвратИзРегистра2ЕГАИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Обработки.СопоставлениеКлассификаторовЕГАИС Тогда
		
		Параметры = ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийСопоставлениеКлассификаторовЕГАИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Справочники.ШтрихкодыУпаковокТоваров Тогда
		
		Параметры = ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийШтрихкодыУпаковокТоваров(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.РегистрыСведений.СоответствиеНоменклатурыЕГАИС Тогда
		
		Параметры = ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийСоответствиеНоменклатурыЕГАИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ОстаткиЕГАИС Тогда
		
		Параметры = ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийОстаткиЕГАИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.УведомлениеОПланируемомИмпортеЕГАИС Тогда
		
		Параметры = ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийУведомлениеОПланируемомИмпортеЕГАИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ОтчетОбИмпортеЕГАИС Тогда
		
		Параметры = ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийОтчетОбИмпортеЕГАИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ОтчетОПроизводствеЕГАИС Тогда
		
		Параметры = ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийОтчетОПроизводствеЕГАИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.РегистрыСведений.СоответствиеНоменклатурыВЕТИС Тогда
		
		Параметры = ИнтеграцияВЕТИСУТ.ПараметрыУказанияСерийСоответствиеНоменклатурыВЕТИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ВходящаяТранспортнаяОперацияВЕТИС Тогда
		
		Параметры = ИнтеграцияВЕТИСУТ.ПараметрыУказанияСерийВходящаяТранспортнаяОперацияВЕТИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ИнвентаризацияПродукцииВЕТИС Тогда
		
		Параметры = ИнтеграцияВЕТИСУТ.ПараметрыУказанияСерийИнвентаризацияПродукцииВЕТИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ПроизводственнаяОперацияВЕТИС Тогда
		
		Параметры = ИнтеграцияВЕТИСУТ.ПараметрыУказанияСерийПроизводственнаяОперацияВЕТИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ЗапросСкладскогоЖурналаВЕТИС Тогда
		
		Параметры = ИнтеграцияВЕТИСУТ.ПараметрыУказанияСерийЗапросСкладскогоЖурналаВЕТИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ИсходящаяТранспортнаяОперацияВЕТИС Тогда
		
		Параметры = ИнтеграцияВЕТИСУТ.ПараметрыУказанияСерийИсходящаяТранспортнаяОперацияВЕТИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.МаркировкаТоваровГИСМ Тогда
		
		Параметры = ИнтеграцияГИСМУТ.ПараметрыУказанияСерийМаркировкаТоваровГИСМ(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ПеремаркировкаТоваровГИСМ Тогда
		
		Параметры = ИнтеграцияГИСМУТ.ПараметрыУказанияСерийПеремаркировкаТоваровГИСМ(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.МаркировкаТоваровИСМП Тогда
		
		Параметры = ИнтеграцияИСМПУТ.ПараметрыУказанияСерийМаркировкаТоваровИСМП(Объект);
	
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ВыводИзОборотаИСМП Тогда
		
		Параметры = ИнтеграцияИСМПУТ.ПараметрыУказанияСерийВыводИзОборотаИСМП(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ВозвратВОборотИСМП Тогда
		
		Параметры = ИнтеграцияИСМПУТ.ПараметрыУказанияСерийВозвратВОборотИСМП(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Обработки.ВиртуальнаяАгрегацияУпаковокИСМП Тогда
		
		Параметры = ИнтеграцияИСМПУТ.ПараметрыУказанияСерийВиртуальнаяАгрегацияУпаковокИСМП(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Обработки.ПроверкаИПодборПродукцииИСМП
		ИЛИ ТипОбъекта = Метаданные.Обработки.ПроверкаИПодборТабачнойПродукцииМОТП Тогда
		
		ИнтеграцияИСМПУТ.ДополнитьПараметрыУказанияСерийПроверкаИПодборПродукцииИСМП(Параметры, Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.СписаниеКодовМаркировкиИСМП Тогда
		
		Параметры = ИнтеграцияИСМПУТ.ПараметрыУказанияСерийСписаниеКодовМаркировки(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ОтгрузкаТоваровИСМП Тогда
		
		Параметры = ИнтеграцияИСМПУТ.ПараметрыУказанияСерийОтгрузкаТоваровИСМП(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ПриемкаТоваровИСМП Тогда
		
		Параметры = ИнтеграцияИСМПУТ.ПараметрыУказанияСерийПриемкаТоваровИСМП(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ОтгрузкаТоваровИСМП Тогда
		
		Параметры = ИнтеграцияИСМПУТ.ПараметрыУказанияСерийОтгрузкаТоваровИСМП(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.СписаниеПартийЗЕРНО Тогда
		
		Параметры = ИнтеграцияЗЕРНОУТ.ПараметрыУказанияСерийСписаниеПартийЗЕРНО(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.ОбщиеФормы.УточнениеСоставаУпаковкиИС Тогда
		
		ИнтеграцияИСУТ.ДополнитьПараметрыУказанияСерийФормыУточнениеСоставаУпаковкиИС(Параметры, Объект);
	
	ИначеЕсли ТипОбъекта = Метаданные.ОбщиеФормы.ФормаУточненияДанныхИС Тогда
		
		ИнтеграцияИСУТ.ДополнитьПараметрыУказанияСерийФормыУточнениеДанныхИС(Параметры, Объект);
	
	ИначеЕсли ТипОбъекта = Метаданные.ОбщиеФормы.ФормаУточненияПодобраннойПродукцииИСМП Тогда
		
		ИнтеграцияИСУТ.ДополнитьПараметрыУказанияСерийФормыУточнениеДанныхИС(Параметры, Объект);
	
	ИначеЕсли ТипОбъекта = Метаданные.Документы.УточнениеСведенийОКодахМаркировкиИСМП Тогда
		
		Параметры = ИнтеграцияИСМПУТ.ПараметрыУказанияСерийУточнениеСведенийОКодахМаркировкиИСМП(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ВнесениеСведенийОСобранномУрожаеЗЕРНО Тогда
		
		Параметры = ИнтеграцияЗЕРНОУТ.ПараметрыУказанияСерийВнесениеСведенийОСобранномУрожаеЗЕРНО(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ЗапросОстатковПартийЗЕРНО Тогда
		
		Параметры = ИнтеграцияЗЕРНОУТ.ПараметрыУказанияСерийЗапросОстатковПартийЗЕРНО(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ОформлениеСДИЗЗЕРНО Тогда
		
		Параметры = ИнтеграцияЗЕРНОУТ.ПараметрыУказанияСерийОформлениеСДИЗЗЕРНО(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ПогашениеСДИЗЗЕРНО Тогда
		
		Параметры = ИнтеграцияЗЕРНОУТ.ПараметрыУказанияСерийПогашениеСДИЗЗЕРНО(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ФормированиеПартийЗЕРНО Тогда
		
		Параметры = ИнтеграцияЗЕРНОУТ.ПараметрыУказанияСерийФормированиеПартийЗЕРНО(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ФормированиеПартийИзДругихПартийЗЕРНО Тогда
		
		Параметры = ИнтеграцияЗЕРНОУТ.ПараметрыУказанияСерийФормированиеПартийИзДругихПартийЗЕРНО(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ФормированиеПартийПриПроизводствеЗЕРНО Тогда
		
		Параметры = ИнтеграцияЗЕРНОУТ.ПараметрыУказанияСерийФормированиеПартийПриПроизводствеЗЕРНО(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.РегистрыСведений.СоответствиеПартийЗЕРНО Тогда
		
		Параметры = ИнтеграцияЗЕРНОУТ.ПараметрыУказанияСерийСоответствиеПартийЗЕРНО(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.АктИнвентаризацииСАТУРН Тогда
		
		Параметры = ИнтеграцияСАТУРНУТ.ПараметрыУказанияСерийАктИнвентаризацииСАТУРН(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.АктПримененияСАТУРН Тогда
		
		Параметры = ИнтеграцияСАТУРНУТ.ПараметрыУказанияСерийАктПримененияСАТУРН(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ЗапросОстатковПартийСАТУРН Тогда
		
		Параметры = ИнтеграцияСАТУРНУТ.ПараметрыУказанияСерийЗапросОстатковПартийСАТУРН(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ИмпортПродукцииСАТУРН Тогда
		
		Параметры = ИнтеграцияСАТУРНУТ.ПараметрыУказанияСерийИмпортПродукцииСАТУРН(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.НакладнаяСАТУРН Тогда
		
		Параметры = ИнтеграцияСАТУРНУТ.ПараметрыУказанияСерийНакладнаяСАТУРН(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ПланПримененияСАТУРН Тогда
		
		Параметры = ИнтеграцияСАТУРНУТ.ПараметрыУказанияСерийПланПримененияСАТУРН(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ПроизводственнаяОперацияСАТУРН Тогда
		
		Параметры = ИнтеграцияСАТУРНУТ.ПараметрыУказанияСерийПроизводственнаяОперацияСАТУРН(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.РегистрыСведений.СоответствиеНоменклатурыСАТУРН Тогда
		
		Параметры = ИнтеграцияСАТУРНУТ.ПараметрыУказанияСерийСоответствиеНоменклатурыСАТУРН(Объект);
		
	КонецЕсли;
	
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Возвращает параметры указания серий для товаров, указанных в объекте.
//
// Параметры:
//  Параметры - Структура - выходной, параметры указания серий, состав полей определен в прикладной конфигурации.
//  Объект    - ДокументОбъект, ДанныеФормыСтруктура - Объект, для формы которого нужно сформировать параметры
//                                             указания серий.
//  МенеджерОбъекта - ДокументМенеджер - Менеджер объекта, для формы которого нужно сформировать параметры указания серий.
Процедура ЗаполнитьПараметрыУказанияСерийФормыОбъекта(Параметры, Объект, МенеджерОбъекта) Экспорт
	
	//++ НЕ ГОСИС
	Параметры = НоменклатураСервер.ПараметрыУказанияСерий(Объект, МенеджерОбъекта);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Извлекает из временного хранилища серии, указанные в форме редактирования серий, помещает эти строки в ТЧ "Серии" объекта,
//   перерасчитывает статусы указания серий строках товарной табличной части.
//
// Параметры:
//  Форма                       - ФормаКлиентскогоПриложения    - Источник вызова.
//  ПараметрыФормыУказанияСерий - Структура           - Состав полей определен в функции НоменклатураСервер.ПараметрыФормыУказанияСерий.
//  КэшированныеЗначения        - Структура           - Сохраненные значения параметров, используемых при обработке строки таблицы.
Процедура ОбработатьУказаниеСерий(Форма, ПараметрыФормыУказанияСерий, КэшированныеЗначения) Экспорт
	
	//++ НЕ ГОСИС
	ПараметрыУказанияСерий = Форма.ПараметрыУказанияСерий;
	Объект = Форма.Объект;
	
	НоменклатураСервер.ОбработатьУказаниеСерий(Объект, ПараметрыУказанияСерий, ПараметрыФормыУказанияСерий, ,
		КэшированныеЗначения);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Процедура заполняет статусы указания серий в строках товарной табличной части.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура, ФормаКлиентскогоПриложения - Общая форма или основной реквизит формы объекта.
//  ПараметрыУказанияСерий - Произвольный - Параметры указания серий номенклатуры.
//
Процедура ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий) Экспорт
	
	Если ПараметрыУказанияСерий = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("ДанныеФормыСтруктура")
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "Ссылка")
		И (ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ОтчетОПроизводствеЕГАИС")
		Или ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ФормированиеПартийПриПроизводствеЗЕРНО")
		Или ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ПроизводственнаяОперацияСАТУРН")
		) Тогда
		Для Каждого КлючИЗначение Из ПараметрыУказанияСерий Цикл
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, КлючИЗначение.Значение);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ФормаКлиентскогоПриложения")
		И Объект.ИмяФормы = "ОбщаяФорма.УточнениеСоставаУпаковкиИС" Тогда
		
		КоличествоПоСтрокамТЧ = Новый Соответствие;
		Для Каждого СтрокаТаблицы Из Объект.ДанныеДляУточнения Цикл
			КоличествоПоСтрокамТЧ.Вставить(СтрокаТаблицы, СтрокаТаблицы.Количество);
			СтрокаТаблицы.Склад = Объект.Склад;
			СтрокаТаблицы.Количество = 1;
		КонецЦикла;
		
		ВременныеПараметры = Новый Структура("ИмяТЧТовары,ИмяТЧСерии,ИмяИсточникаЗначенийВФормеОбъекта");
		ЗаполнитьЗначенияСвойств(ВременныеПараметры, ПараметрыУказанияСерий);
		
		ПараметрыУказанияСерий.ИмяТЧТовары = "ДанныеДляУточнения";
		ПараметрыУказанияСерий.ИмяТЧСерии = ПараметрыУказанияСерий.ИмяТЧТовары;
		ПараметрыУказанияСерий.ИмяИсточникаЗначенийВФормеОбъекта = "ЭтаФорма";
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
		ЗаполнитьЗначенияСвойств(ПараметрыУказанияСерий, ВременныеПараметры);
		
		Для Каждого КлючИЗначение Из КоличествоПоСтрокамТЧ Цикл
			КлючИЗначение.Ключ.Количество = КлючИЗначение.Значение;
		КонецЦикла;
		
	Иначе
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтатусыУказанияСерийФормы(Форма, ИмяРеквизитаОбъект = "Объект", ИмяРеквизитаПараметрыУказанияСерий = "ПараметрыУказанияСерий") Экспорт
	
	//++ НЕ ГОСИС
	ЗаполнитьСтатусыУказанияСерий(Форма[ИмяРеквизитаОбъект], Форма[ИмяРеквизитаПараметрыУказанияСерий]);
	//-- НЕ ГОСИС
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыУказанияСерийФормы(Менеджер, Форма, ИмяРеквизитаОбъект = "Объект", ИмяРеквизитаПараметрыУказанияСерий = "ПараметрыУказанияСерий") Экспорт
	
	//++ НЕ ГОСИС
	ЗаполнитьПараметрыУказанияСерийФормыОбъекта(Форма[ИмяРеквизитаПараметрыУказанияСерий], Форма[ИмяРеквизитаОбъект], Менеджер);
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Процедура пересчитывает статусы указания серий в строках товаров, если это необходимо, переподчиняет строки серий 
// другим строкам таблицы.
//
// Параметры:
//  Форма                      - ФормаКлиентскогоПриложения    - Источник вызова.
//  ПараметрыУказанияСерий     - Произвольный - См. ИнтеграцияИС.ПараметрыУказанияСерий.
//  ТекущаяСтрокаИдентификатор - Число               - Идентификатор текущей строки товаров в форме объекта.
//  КэшированныеЗначения       - Структура           - Сохраненные значения параметров, используемых при обработке строки таблицы.
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(
	Форма,
	ПараметрыУказанияСерий = "",
	ТекущаяСтрокаИдентификатор,
	КэшированныеЗначения) Экспорт
	
	//++ НЕ ГОСИС
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		Объект = Форма.Объект;
	Иначе
		Объект = Форма;
	КонецЕсли;
	
	Если (ПараметрыУказанияСерий = "") Тогда
		ПараметрыУказанияСерий = Форма.ПараметрыУказанияСерий;
	КонецЕсли;
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект, ПараметрыУказанияСерий,
		ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Заполняет текст запроса заполнения статусов указания серий для товаров, указанных в документе.
//
// Параметры:
//  ТекстЗапроса           - Строка           - Текст запроса заполнения статусов указания серий.
//  ТипОбъекта             - ОбъектМетаданных - Тип документа коллекции объектов метаданных.
//  ПараметрыУказанияСерий - Произвольный     - См. ИнтеграцияИС.ПараметрыУказанияСерий.
Процедура ЗаполнитьТекстЗапросаЗаполненияСтатусовУказанияСерий(ТекстЗапроса, ТипОбъекта, ПараметрыУказанияСерий) Экспорт
	
	//++ НЕ ГОСИС
	Если ТипОбъекта = Метаданные.Справочники.ШтрихкодыУпаковокТоваров Тогда
		
		ТекстЗапроса = ИнтеграцияЕГАИСУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийШтрихкодыУпаковокТоваров(ПараметрыУказанияСерий);
		
	ИначеЕсли ТипОбъекта = Метаданные.РегистрыСведений.СоответствиеНоменклатурыЕГАИС Тогда
		
		ТекстЗапроса = ИнтеграцияЕГАИСУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийСоответствиеНоменклатурыЕГАИС(ПараметрыУказанияСерий);
		
	ИначеЕсли ТипОбъекта = Метаданные.РегистрыСведений.СоответствиеНоменклатурыВЕТИС Тогда
		
		ТекстЗапроса = ИнтеграцияВЕТИСУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийСоответствиеНоменклатурыВЕТИС(ПараметрыУказанияСерий);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ЗапросСкладскогоЖурналаВЕТИС Тогда
		
		ТекстЗапроса = ИнтеграцияВЕТИСУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийЗапросСкладскогоЖурналаВЕТИС(ПараметрыУказанияСерий);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ВходящаяТранспортнаяОперацияВЕТИС Тогда
		
		ТекстЗапроса = ИнтеграцияВЕТИСУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийВходящаяТранспортнаяОперацияВЕТИС(
			ПараметрыУказанияСерий);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ИсходящаяТранспортнаяОперацияВЕТИС Тогда
		
		ТекстЗапроса = ИнтеграцияВЕТИСУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийИсходящаяТранспортнаяОперацияВЕТИС();
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ИнвентаризацияПродукцииВЕТИС Тогда
		
		ТекстЗапроса = ИнтеграцияВЕТИСУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийИнвентаризацияПродукцииВЕТИС(
			ПараметрыУказанияСерий);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ПроизводственнаяОперацияВЕТИС Тогда
		
		ТекстЗапроса = ИнтеграцияВЕТИСУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийПроизводственнаяОперацияВЕТИС(
			ПараметрыУказанияСерий);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ТТНВходящаяЕГАИС Тогда
		
		ТекстЗапроса = ИнтеграцияЕГАИСУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийТТНВходящаяЕГАИС(ПараметрыУказанияСерий);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ТТНИсходящаяЕГАИС
		ИЛИ ТипОбъекта = Метаданные.Документы.ЧекЕГАИС
		ИЛИ ТипОбъекта = Метаданные.Документы.ЧекЕГАИСВозврат
		ИЛИ ТипОбъекта = Метаданные.Документы.АктПостановкиНаБалансЕГАИС
		ИЛИ ТипОбъекта = Метаданные.Документы.АктСписанияЕГАИС
		ИЛИ ТипОбъекта = Метаданные.Документы.ПередачаВРегистр2ЕГАИС
		ИЛИ ТипОбъекта = Метаданные.Документы.ВозвратИзРегистра2ЕГАИС
		ИЛИ ТипОбъекта = Метаданные.Документы.ОстаткиЕГАИС
		ИЛИ ТипОбъекта = Метаданные.Обработки.СопоставлениеКлассификаторовЕГАИС
		Или ТипОбъекта = Метаданные.Документы.УведомлениеОПланируемомИмпортеЕГАИС
		Или ТипОбъекта = Метаданные.Документы.ОтчетОбИмпортеЕГАИС
		Или ТипОбъекта = Метаданные.Документы.ОтчетОПроизводствеЕГАИС Тогда
		
		ТекстЗапроса = ИнтеграцияЕГАИСУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.МаркировкаТоваровГИСМ Тогда
		
		ТекстЗапроса = ИнтеграцияГИСМУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийМаркировкаТоваровГИСМ(ПараметрыУказанияСерий);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ПеремаркировкаТоваровГИСМ Тогда
		
		ТекстЗапроса = ИнтеграцияГИСМУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийПеремаркировкаТоваровГИСМ(ПараметрыУказанияСерий);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.МаркировкаТоваровИСМП Тогда 
		
		ТекстЗапроса = ИнтеграцияИСМПУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийБезАнализаСклада(ПараметрыУказанияСерий);
		
	ИначеЕсли ТипОбъекта = Метаданные.Обработки.ВиртуальнаяАгрегацияУпаковокИСМП
		ИЛИ ТипОбъекта = Метаданные.Обработки.ПроверкаИПодборПродукцииИСМП
		ИЛИ ТипОбъекта = Метаданные.Обработки.ПроверкаИПодборТабачнойПродукцииМОТП Тогда
		
		ТекстЗапроса = ИнтеграцияИСМПУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийПроверкаИПодборПродукцииИСМП(ПараметрыУказанияСерий);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ВыводИзОборотаИСМП Тогда 
		
		ПараметрыУказанияСерий.Вставить("ПроверяемыйДокумент", "ВыводИзОборотаИСМП");
		ТекстЗапроса = ИнтеграцияИСМПУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийБезАнализаСклада(ПараметрыУказанияСерий);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ВозвратВОборотИСМП Тогда 
		
		ПараметрыУказанияСерий.Вставить("ПроверяемыйДокумент", "ВозвратВОборотИСМП");
		ТекстЗапроса = ИнтеграцияИСМПУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийБезАнализаСклада(ПараметрыУказанияСерий);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.СписаниеКодовМаркировкиИСМП Тогда
		
		ПараметрыУказанияСерий.Вставить("ПроверяемыйДокумент", "СписаниеКодовМаркировкиИСМП");
		ТекстЗапроса = ИнтеграцияИСМПУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийБезАнализаСклада(ПараметрыУказанияСерий);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ОтгрузкаТоваровИСМП Тогда 
		
		ПараметрыУказанияСерий.Вставить("ПроверяемыйДокумент", "ОтгрузкаТоваровИСМП");
		ТекстЗапроса = ИнтеграцияИСМПУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийБезАнализаСклада(ПараметрыУказанияСерий);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ПриемкаТоваровИСМП Тогда 
		
		ПараметрыУказанияСерий.Вставить("ПроверяемыйДокумент", "ПриемкаТоваровИСМП");
		ТекстЗапроса = ИнтеграцияИСМПУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийБезАнализаСклада(ПараметрыУказанияСерий);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.УточнениеСведенийОКодахМаркировкиИСМП Тогда
		
		ПараметрыУказанияСерий.Вставить("ПроверяемыйДокумент", "УточнениеСведенийОКодахМаркировкиИСМП");
		ТекстЗапроса = ИнтеграцияИСМПУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийБезАнализаСклада(ПараметрыУказанияСерий);
		
	Иначе
		
		//Считать значением по-умолчанию
		ТекстЗапроса = ИнтеграцияИСМПУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийБезАнализаСклада(ПараметрыУказанияСерий);
		
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Заполняет текст запроса проверки заполнения серий в документе.
//
// Параметры:
//  ТекстЗапроса           - Строка           - Текст запроса проверки заполнения серий.
//  ТипОбъекта             - ОбъектМетаданных - Тип документа коллекции объектов метаданных.
//  ПараметрыУказанияСерий - Произвольный     - См. ИнтеграцияИС.ПараметрыУказанияСерий.
Процедура ЗаполнитьТекстЗапросаПроверкиЗаполненияСерий(ТекстЗапроса, ТипОбъекта, ПараметрыУказанияСерий) Экспорт
	
	//++ НЕ ГОСИС
	Если ТипОбъекта = Метаданные.Документы.ПеремаркировкаТоваровГИСМ Тогда
		
		ТекстЗапроса = ИнтеграцияГИСМУТ.ТекстЗапросаПроверкиЗаполненияСерийПеремаркировкаТоваровГИСМ(ПараметрыУказанияСерий);
		
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Устарело. Процедура формирования движений по регистру "Движения серий товаров".
//
// Параметры:
//  ДополнительныеСвойства - Структура - дополнительные свойства для записи движений 
//  Движения - КоллекцияДвижений - движения по которым двигается документ
//  Отказ - Булево - признак отказа от проведения документа
Процедура ОтразитьДвиженияСерийТоваров(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	//++ НЕ ГОСИС
	РегистрыНакопления.ДвиженияСерийТоваров.ОтразитьДвижения(ДополнительныеСвойства.ТаблицыДляДвижений, Движения, Отказ);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Заполняет, при необходимости создает серии в документе ГосИС или его выделенных строках
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - объект для заполнения
//  Товары - ДанныеФормыКоллекция, ТаблицаЗначений - табличная часть документа
//  ВыделенныеСтроки - Массив Из ДанныеФормыЭлементКоллекции - выделенные строки документа
//  ПараметрыУказанияСерий - см. ИнтеграцияИС.ПараметрыУказанияСерий
//  РезультатЗаполненияСерий - см. ИнтеграцияИС.РезультатГенерацииИЗаполненияСерий.
Процедура ПриГенерацииСерий(Объект, Товары, ВыделенныеСтроки, ПараметрыУказанияСерий, РезультатЗаполненияСерий) Экспорт

	//++ НЕ ГОСИС
	
	//-- НЕ ГОСИС
	
	Возврат;

КонецПроцедуры

#КонецОбласти

#КонецОбласти
