#Область ПрограммныйИнтерфейс

// Подключаемое оборудование эвотор.
// 
// Параметры:
//  ИдентификаторУстройства - СправочникСсылка.ОфлайнОборудование - Идентификатор устройства.
// 
// Возвращаемое значение:
//  Булево - Подключаемое оборудование эвотор
Функция ПодключаемоеОборудованиеЭвоторОФД(ИдентификаторУстройства) Экспорт
	
	ОбработчикОфлайнОборудования = ОбщегоНазначенияБПО.ЗначенияРеквизитовОбъекта(ИдентификаторУстройства, "ОбработчикОфлайнОборудования");
	
	Если ОбработчикОфлайнОборудования.ОбработчикОфлайнОборудования = Перечисления.ОбработчикиОфлайнОборудования.Обработчик1СЭвоторККМОфлайн 
		ИЛИ ОбработчикОфлайнОборудования.ОбработчикОфлайнОборудования = Перечисления.ОбработчикиОфлайнОборудования.ОбработчикОФД Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Проверить историю загрузки устройства.
// 
// Параметры:
//  ИдентификаторУстройства - СправочникСсылка.ОфлайнОборудование - Идентификатор устройства
// 
// Возвращаемое значение:
//  Булево - Проверить историю загрузки устройства
Функция ПроверитьИсториюЗагрузкиУстройства(ИдентификаторУстройства) Экспорт
	
	Если Не ПодключаемоеОборудованиеЭвоторОФД(ИдентификаторУстройства) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ДатаЗагрузкиОтчетовКассЭвотор.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КассаЭвотор.Значение = ИдентификаторУстройства;
	НаборЗаписей.Отбор.КассаЭвотор.Использование = Истина;
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Функция возвращает структуру с данными устройства.
//
// Параметры:
//  Идентификатор - СправочникСсылка.ОфлайнОборудование - экземпляр офлайн оборудования.
//
// Возвращаемое значение:
//  Структура - см. Справочники.ОфлайнОборудование.ДанныеУстройства
//
Функция ДанныеУстройства(Идентификатор) Экспорт

	Возврат Справочники.ОфлайнОборудование.ДанныеУстройства(Идентификатор);

КонецФункции

// Функция возвращает по идентификатору устройства его параметры
//
// Параметры:
//  Идентификатор - СправочникСсылка.ОфлайнОборудование - экземпляр офлайн оборудования.
//
// Возвращаемое значение:
//  Структура.
//
Функция ПараметрыУстройства(Идентификатор) Экспорт
	
	Возврат Справочники.ОфлайнОборудование.ПараметрыУстройства(Идентификатор);
	
КонецФункции

// Процедура предназначена для сохранения параметров устройства
// в реквизит Параметры типа хранилище значения в элементе справочника.
//
// Параметры:
//  Идентификатор - СправочникСсылка.ОфлайнОборудование - экземпляр офлайн оборудования.
//  Параметры - Структура - параметры устройства.
//
// Возвращаемое значение:
//  Булево.
//
Функция СохранитьПараметрыУстройства(Идентификатор, Параметры) Экспорт
	
	Возврат Справочники.ОфлайнОборудование.СохранитьПараметрыУстройства(Идентификатор, Параметры);
	
КонецФункции

// Имя временного файла.
// 
// Возвращаемое значение:
//  Строка - Имя временного файла
//
Функция ИмяВременногоФайла() Экспорт
	
	Возврат ПолучитьИмяВременногоФайла();
	
КонецФункции

// Функция получения кодировки файла.
//
// Параметры:
//  Кодировка - КодировкаТекста - кодировка при чтении текстового файла, по умолчанию КодировкаТекста.UTF8.
//
// Возвращаемое значение:
//  КодировкаТекста 
//
Функция ПолучитьКодировкуФайла(Кодировка = Неопределено) Экспорт
	
	Если Кодировка = Неопределено ИЛИ Кодировка = "UTF8" Тогда
		Кодировка = КодировкаТекста.UTF8;
	ИначеЕсли Кодировка = "ANSI" Тогда
		Кодировка = КодировкаТекста.ANSI;
	ИначеЕсли Кодировка = "OEM" Тогда
		Кодировка = КодировкаТекста.OEM;
	ИначеЕсли Кодировка = "UTF16" Тогда
		Кодировка = КодировкаТекста.UTF16;
	КонецЕсли;
	
	Возврат Кодировка;
	
КонецФункции

#Область УстаревшиеПроцедурыИФункции

// Устарела: следует использовать ПодключаемоеОборудованиеЭвоторОФД.
// Подключаемое оборудование эвотор.
// 
// Параметры:
//  ИдентификаторУстройства - СправочникСсылка.ОфлайнОборудование - Идентификатор устройства.
// 
// Возвращаемое значение:
//  Булево - Подключаемое оборудование эвотор
Функция ПодключаемоеОборудованиеЭвотор(ИдентификаторУстройства) Экспорт
	
	Возврат ПодключаемоеОборудованиеЭвоторОФД(ИдентификаторУстройства);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Получить данные для выгрузки.
// 
// Параметры:
//  ИдентификаторУстройства - СправочникСсылка.ОфлайнОборудование - Идентификатор устройства
//  НаборВыгружаемыхДанных - ТаблицаЗначений - Набор выгружаемых данных
// 
// Возвращаемое значение:
//  Структура - Получить данные для выгрузки:
// * НастройкиККМ - Неопределено, Структура -:
// ** НаименованиеОрганизации - Строка -
// ** НаименованиеМагазина - Строка -
// ** СистемыНалогообложения - Массив -
// ** ИНН - Строка -
// ** КПП - Строка -
// ** АдресТочкиПродажи - Строка -
// ** МестоТочкиПродажи - Строка -
// ** ВидыЭлектроннойОплаты - Массив -
// ** ЭлектроннаяПочтаОтправителяЧека - Строка -
// ** ПараметрыДрайвераККМ - Структура - .
// * ПрайсЛист - Структура:
// ** Товары - Массив -
// ** ЕдиницыИзмерения - Массив -
// ** ГруппыТоваров - Массив -
// ** ДанныеПоставщиков - Массив -
// ** ДанныеАгентов - Массив -
// ** ПолнаяВыгрузка - Булево -
// * Заказы - Неопределено, Массив -
Функция ПолучитьДанныеДляВыгрузки(ИдентификаторУстройства, НаборВыгружаемыхДанных) Экспорт
	
	ОфлайнОборудование = ИдентификаторУстройства;
	НаборВыгружаемыхДанных = НаборВыгружаемыхДанных;
	
	НастройкиККМ 	= Неопределено;
	ПрайсЛист 		= Неопределено;
	Заказы 			= Неопределено;
	
	Если НаборВыгружаемыхДанных.Настройки Тогда
		НастройкиККМ = МенеджерОфлайнОборудованияКлиентСервер.НастройкиККМ();
		МенеджерОфлайнОборудованияПереопределяемый.ПриВыгрузкеНастроек(ОфлайнОборудование, НастройкиККМ);
		
		ПараметрыУстройства = Справочники.ОфлайнОборудование.ПараметрыУстройства(ОфлайнОборудование);
		
		Если ПараметрыУстройства.Свойство("ПараметрыДрайвераККМ") И НЕ ПараметрыУстройства.ПараметрыДрайвераККМ = Неопределено Тогда
			
			НастройкиККМ.Вставить("ПараметрыДрайвераККМ", ПараметрыУстройства.ПараметрыДрайвераККМ);
			
		КонецЕсли;
	КонецЕсли;
	
	Если НаборВыгружаемыхДанных.ПрайсЛист Тогда
		
		ПрайсЛист = МенеджерОфлайнОборудованияКлиентСервер.ПрайсЛистККМ();
		ПолнаяВыгрузкаПрайсЛиста = Ложь;
		МенеджерОфлайнОборудованияПереопределяемый.ПриВыгрузкеПрайсЛиста(ОфлайнОборудование, ПрайсЛист, ПолнаяВыгрузкаПрайсЛиста);
		ПрайсЛист.Вставить("ПолнаяВыгрузка", Ложь);
		
	ИначеЕсли НаборВыгружаемыхДанных.ПолныйПрайсЛист Тогда
		
		ПрайсЛист = МенеджерОфлайнОборудованияКлиентСервер.ПрайсЛистККМ();
		ПолнаяВыгрузкаПрайсЛиста = Истина;
		МенеджерОфлайнОборудованияПереопределяемый.ПриВыгрузкеПрайсЛиста(ОфлайнОборудование, ПрайсЛист, ПолнаяВыгрузкаПрайсЛиста);
		ПрайсЛист.Вставить("ПолнаяВыгрузка", Истина);
		
	КонецЕсли;
	
	Если НаборВыгружаемыхДанных.ПрайсЛист ИЛИ НаборВыгружаемыхДанных.ПолныйПрайсЛист Тогда
		
		СортироватьПрайсЛист(ПрайсЛист);
		
	КонецЕсли;
	
	Если НаборВыгружаемыхДанных.Заказы Тогда
		Заказы = МенеджерОфлайнОборудованияКлиентСервер.ЗаказыККМ();
		МенеджерОфлайнОборудованияПереопределяемый.ПриВыгрузкеЗаказов(ОфлайнОборудование, Заказы);
	КонецЕсли;
	
	
	ДанныеДляВыгрузки = Новый Структура;
	ДанныеДляВыгрузки.Вставить("НастройкиККМ", 	НастройкиККМ);
	ДанныеДляВыгрузки.Вставить("ПрайсЛист", 	ПрайсЛист);
	ДанныеДляВыгрузки.Вставить("Заказы", 		Заказы);
	
	Возврат ДанныеДляВыгрузки;
	
КонецФункции

// Передать данные загрузки.
// 
// Параметры:
//  Контекст - Структура - Контекст.
// 
// Возвращаемое значение:
//  Структура - Передать данные загрузки:
// * Успешно - Булево -
// * СообщениеОбОшибке - Строка -
Функция ПередатьДанныеЗагрузки(Контекст) Экспорт
	
	ОфлайнОборудование = Контекст.ИдентификаторУстройства;
	ДанныеИзККМ = Контекст.ДанныеИзККМ;
	
	ОтчетыОПродажах = ДанныеИзККМ.ОтчетыОПродажах;
	
	СортироватьДанныеОПродажах(ОтчетыОПродажах);
	ТаблицаФискальныхДанных = Неопределено;
	НесопоставленныеТоварыОФД = Неопределено;
	
	ОбработчикОфлайнОборудования = ОбщегоНазначенияБПО.ЗначенияРеквизитовОбъекта(ОфлайнОборудование, "ОбработчикОфлайнОборудования");
	ЭтоОбработчикОФД = ОбработчикОфлайнОборудования.ОбработчикОфлайнОборудования = ПредопределенноеЗначение("Перечисление.ОбработчикиОфлайнОборудования.ОбработчикОФД");
	Если ЭтоОбработчикОФД Тогда
		МодульОФД = ОбщегоНазначенияБПО.ОбщийМодуль("ОФД");
		ТаблицаФискальныхДанных = МодульОФД.НовыйОписаниеТаблицыФискальныхДанных();
	КонецЕсли;
	
	Отказ = Ложь;
	СообщениеОбОшибке = "";
	
	МенеджерОфлайнОборудованияПереопределяемый.ПриЗагрузкеДанныхОПродажахИзККМ(
		ОфлайнОборудование,
		ОтчетыОПродажах,
		Отказ,
		СообщениеОбОшибке,
		ТаблицаФискальныхДанных,
		НесопоставленныеТоварыОФД);
		
	Если ЭтоОбработчикОФД Тогда
		МодульОФД.ЗаписатьРезультатЗагрузкиДанныхПродаж(ОфлайнОборудование, ТаблицаФискальныхДанных); 
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		МенеджерОфлайнОборудованияПереопределяемый.ПриЗагрузкеДанныхОВскрытияхАлкогольнойТарыИзККМ(
			ОфлайнОборудование,
			ДанныеИзККМ.ВскрытияАлкогольнойТары,
			Отказ,
			СообщениеОбОшибке);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Успешно", НЕ Отказ);
	Результат.Вставить("СообщениеОбОшибке", СообщениеОбОшибке);
	Результат.Вставить("НесопоставленныеТоварыОФД", НесопоставленныеТоварыОФД);
	Результат.Вставить("ЭтоОбработчикОФД", ЭтоОбработчикОФД);
	
	Возврат Результат;
	
КонецФункции

Функция ПередатьДанныеОборотов(Контекст) Экспорт
	
	ОфлайнОборудование = Контекст.ИдентификаторУстройства;
	ДанныеОборотов = Контекст.ДанныеИзККМ;
	
	Отказ = Ложь;
	СообщениеОбОшибке = "";
	
	МенеджерОфлайнОборудованияПереопределяемый.ПриЗагрузкеДанныхОборотовИзОФД(
		ОфлайнОборудование,
		ДанныеОборотов,
		Отказ,
		СообщениеОбОшибке);
	
	Результат = Новый Структура;
	Результат.Вставить("Успешно", НЕ Отказ);
	Результат.Вставить("СообщениеОбОшибке", СообщениеОбОшибке);
	
	Возврат Результат;
	
КонецФункции

Функция ПередатьДанныеЧеков(Контекст) Экспорт
	
	ОфлайнОборудование = Контекст.ИдентификаторУстройства;
	ДанныеЧеков = Контекст.ДанныеИзККМ;
	
	Отказ = Ложь;
	СообщениеОбОшибке = "";
	
	МенеджерОфлайнОборудованияПереопределяемый.ПриЗагрузкеДанныхОЧекахИзОФД(
		ОфлайнОборудование,
		ДанныеЧеков,
		Отказ,
		СообщениеОбОшибке);
	
	Результат = Новый Структура;
	Результат.Вставить("Успешно", НЕ Отказ);
	Результат.Вставить("СообщениеОбОшибке", СообщениеОбОшибке);
	
	Возврат Результат;
	
КонецФункции

Процедура ОповеститьОбУдачнойВыгрузке(ОфлайнОборудование, Набор) Экспорт
	
	НаборВыгруженныхДанных = МенеджерОфлайнОборудованияКлиентСервер.НаборВыгруженныхДанных();
	
	Если Набор.Свойство("Настройки") И Набор.Настройки Тогда
		НаборВыгруженныхДанных.Настройки = Истина;
	КонецЕсли;
	
	Если Набор.Свойство("ПрайсЛист") И Набор.ПрайсЛист Тогда
		НаборВыгруженныхДанных.ПрайсЛист = Истина;
		
	ИначеЕсли Набор.Свойство("ПолныйПрайсЛист") И Набор.ПолныйПрайсЛист Тогда
		НаборВыгруженныхДанных.ПрайсЛист = Истина;
		
	КонецЕсли;
	
	Если Набор.Свойство("Заказы") И Набор.Заказы Тогда
		НаборВыгруженныхДанных.Заказы = Истина;
	КонецЕсли;
	
	МенеджерОфлайнОборудованияПереопределяемый.ПослеУспешнойВыгрузкиДанных(ОфлайнОборудование, НаборВыгруженныхДанных);
	
КонецПроцедуры

// Функция получает содержание текстовых файлов из временного хранилища.
// Параметры: 
//  ПомещенныеФайлы - Массив - массив содержащий элементы типа ОписаниеПередаваемогоФайла, из которых читается содержание.
//  Кодировка - Строка - кодировка текста.
// Возвращаемое значение: 
//   Структура:
//    *Успешно - Булево.
//    *СодержаниеФайлов - Массив из Структура:
//    					*ОписаниеПереданногоФайла - ТекстовыйДокумент -
//    					*ТекстСодержания - Строка
//    					- Неопределено.
//    *ТекстОшибки - Строка.
//
Функция ПолучитьСодержаниеТекстовыхФайловИзХранилища(ПомещенныеФайлы, Кодировка) Экспорт
	
	РезультатЧтения = Новый Структура;
	
	РезультатЧтения.Вставить("Успешно", Ложь);
	РезультатЧтения.Вставить("СодержаниеФайлов", Неопределено);
	РезультатЧтения.Вставить("ТекстОшибки", "");
	
	СодержаниеФайлов = Новый Массив;
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	
	Для Каждого Файл Из ПомещенныеФайлы Цикл
		
		СтруктураСодержанияФайла = Новый Структура;
		
		Если ТипЗнч(Файл) = Тип("Строка") Тогда
			Адрес = Файл;
		Иначе
			Адрес = Файл.Хранение;
		КонецЕсли;
		
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(Адрес); // ТекстовыйДокумент
		
		Попытка
			
			ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);
			
			ЧтениеТекста = Новый ЧтениеТекста(ИмяВременногоФайла, Кодировка);
			ТекстСодержания = ЧтениеТекста.Прочитать();
			
			ЧтениеТекста.Закрыть();
			
			СтруктураСодержанияФайла.Вставить("ОписаниеПереданногоФайла", Файл);
			СтруктураСодержанияФайла.Вставить("ТекстСодержания",          ТекстСодержания);
			
			СодержаниеФайлов.Добавить(СтруктураСодержанияФайла);
			
		Исключение
			
			РезультатЧтения.ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Возврат РезультатЧтения;
			
		КонецПопытки;
		
	КонецЦикла;
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	РезультатЧтения.Успешно = Истина;
	РезультатЧтения.СодержаниеФайлов = СодержаниеФайлов;
	
	Возврат РезультатЧтения;
	
КонецФункции

// Получить содержание текстовых файлов.
// 
// Параметры:
//  РезультатЧтенияФайлов - Структура - Результат чтения файлов
//  ПомещаемыеФайлы - Массив из ТекстовыйДокумент - Помещаемые файлы
//  Кодировка - Строка - Кодировка
// 
// Возвращаемое значение:
//  Булево - Получить содержание текстовых файлов
Функция ПолучитьСодержаниеТекстовыхФайлов(РезультатЧтенияФайлов, ПомещаемыеФайлы, Кодировка) Экспорт
	
	Результат = Истина;
	Содержание = Новый Массив;
	Для Каждого Файл Из ПомещаемыеФайлы Цикл
		
		СтруктураСодержанияФайла = Новый Структура;
		
		Попытка
			ЧтениеТекста = Новый ЧтениеТекста(Файл.Имя, Кодировка);
			ТекстСодержания = ЧтениеТекста.Прочитать();
		Исключение
			
			ТекстСообщения =  НСтр("ru = 'При чтении файла %ИмяФайла% произошла ошибка'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяФайла%", Файл.Имя);
			
			ОписаниеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			РезультатЧтенияФайлов.ТекстОшибки = ТекстСообщения + Символы.ПС + ОписаниеОшибки;
			Результат = Ложь;
			Прервать;
			
		КонецПопытки;
		
		СтруктураСодержанияФайла.Вставить("ОписаниеПереданногоФайла", Файл);
		СтруктураСодержанияФайла.Вставить("ТекстСодержания",          ТекстСодержания);
		
		Содержание.Добавить(СтруктураСодержанияФайла);
		ЧтениеТекста.Закрыть();
		
	КонецЦикла;
	РезультатЧтенияФайлов.СодержаниеФайлов = Содержание;
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СортироватьПрайсЛист(ПрайсЛист)
	
	Если ПрайсЛист.ГруппыТоваров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ГруппыТоваров = ПрайсЛист.ГруппыТоваров;
	ОтсортированныеГруппы = Новый Массив;
	КэшПоиска = Новый Массив;
	
	СортироватьИерархиюГруппРекурсивно(ГруппыТоваров, ОтсортированныеГруппы, КэшПоиска);
	
	ПрайсЛист.ГруппыТоваров = ОтсортированныеГруппы;
	
КонецПроцедуры

Процедура СортироватьИерархиюГруппРекурсивно(ГруппыТоваров, ОтсортированныеГруппы, КэшПоиска)
	
	ИндексыПеремещаемыхГруппы = Новый СписокЗначений;
	
	Индекс = 0;
	Для Каждого Группа Из ГруппыТоваров Цикл
		
		Если НЕ ЗначениеЗаполнено(Группа.КодГруппы) Тогда
			
			ОтсортированныеГруппы.Добавить(Группа);
			КэшПоиска.Добавить(Группа.Код);
			ИндексыПеремещаемыхГруппы.Добавить(Индекс);
			
		Иначе
			
			Если НЕ КэшПоиска.Найти(Группа.КодГруппы) = Неопределено Тогда
				
				ОтсортированныеГруппы.Добавить(Группа);
				КэшПоиска.Добавить(Группа.Код);
				ИндексыПеремещаемыхГруппы.Добавить(Индекс);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Если ИндексыПеремещаемыхГруппы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИндексыПеремещаемыхГруппы.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
	
	Для Каждого ИндексПеремещеннойГруппы Из ИндексыПеремещаемыхГруппы Цикл
		
		ГруппыТоваров.Удалить(ИндексПеремещеннойГруппы.Значение);
		
	КонецЦикла;
	
	СортироватьИерархиюГруппРекурсивно(ГруппыТоваров, ОтсортированныеГруппы, КэшПоиска);
	
КонецПроцедуры

Процедура СортироватьДанныеОПродажах(ДанныеОПродажах)
	
	СписокОтчетов = Новый СписокЗначений;
	
	Для Каждого ОтчетОПродажах Из ДанныеОПродажах Цикл
		
		// сортировка чеков
		СписокЧеков = Новый СписокЗначений;
		
		Для Каждого Чек Из ОтчетОПродажах.Чеки Цикл
			СписокЧеков.Добавить(Чек, Чек.ДатаЧека);
		КонецЦикла;
		СписокЧеков.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
		
		ОтчетОПродажах.Чеки = СписокЧеков.ВыгрузитьЗначения();
		
		// сортировка движений ДС
		СписокДвиженийДС = Новый СписокЗначений;
		
		Для Каждого ДвижениеДС Из ОтчетОПродажах.ДвиженияДС Цикл
			СписокДвиженийДС.Добавить(ДвижениеДС, ДвижениеДС.Дата);
		КонецЦикла;
		СписокДвиженийДС.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
		
		ОтчетОПродажах.ДвиженияДС = СписокДвиженийДС.ВыгрузитьЗначения();
		
		
		СписокОтчетов.Добавить(ОтчетОПродажах, ОтчетОПродажах.ДатаЗакрытияСмены);
	КонецЦикла;
	
	ДанныеОПродажах = СписокОтчетов.ВыгрузитьЗначения();
	
КонецПроцедуры

Процедура ПодготовитьЭлементУправления(ЭлементУправления) Экспорт
	
#Если МобильноеПриложениеСервер Тогда
	СтандартнаяОбработка = Истина;
	Если СтандартнаяОбработка Тогда
		ЭлементУправления.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
		ЭлементУправления.ШрифтЗаголовка = ШрифтыСтиля.МелкийШрифтТекста;
	КонецЕсли;
#КонецЕсли
	
КонецПроцедуры

#КонецОбласти