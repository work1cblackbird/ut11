///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "Новости".
// ОбщийМодуль.ОбработкаНовостейКлиент.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область РаботаСоСпискомНовостей

// Процедура показывает список значений новостей, из которого можно открыть новость или перейти к списку новостей.
//
// Параметры:
//  ФормаВладелец          - ФормаКлиентскогоПриложения - форма, в которой нужно открыть список значений;
//  СписокЛентНовостей     - СписокЗначений, Массив из СправочникСсылка.ЛентыНовостей, Неопределено - в каких лентах новостей искать новость;
//  ИмяМетаданных          - Строка - имя метаданных, обязательная часть идентификатора новости;
//  ИмяФормы               - Строка, Неопределено - имя формы, необязательная часть идентификатора новости;
//  ИмяСобытия             - Строка, Неопределено - имя события, необязательная часть идентификатора новости;
//  ПараметрыОткрытияФормы - Структура - структура, передаваемая форме контекстных новостей с ключами:
//    * ЗаголовокФормы                - Строка - заголовок формы контекстных новостей;
//    * СкрыватьКолонкуЛентаНовостей  - Булево - Истина, если надо скрыть колонку "ЛентаНовостей";
//    * СкрыватьКолонкуПодзаголовок   - Булево - Истина, если надо скрыть колонку "Подзаголовок";
//    * СкрыватьКолонкуДатаПубликации - Булево - Истина, если надо скрыть колонку "ДатаПубликации";
//    * ПоказыватьПанельПоиска        - Булево - Истина, если надо показать группу поиска текста в новостях;
//    * ПоказыватьПанельНавигации     - Булево - Истина, если надо показать гиперссылку перехода к списку всех новостей;
//    * ИнициаторОткрытияНовости      - Строка - произвольное значение для дальнейшей обработки в переопределяемых модулях;
//    * РежимОткрытияОкна             - Строка - режим открытия окна ("Независимый", "БлокироватьОкноВладельца" (по-умолчанию),
//                                         "БлокироватьВесьИнтерфейс");
//    * СписокНовостей                - СписокЗначений - Если передан непустой список новостей, то он полностью заменяет или дополняет
//                                         список контекстных новостей (в зависимости от параметра ПропуститьЗаполнениеНовостями);
//                                         Никакого контроля списка новостей (пометка на удаление, просроченность и т.п.) не осуществляется;
//    * СортировкаСпискаНовостей      - Строка - поля сортировки. Работает только если заполнен СписокНовостей;
///   * ПропуститьЗаполнениеНовостями - Булево - если Истина, то стандартного расчета списка контекстных новостей
//                                         производиться НЕ будет - все новости будут взяты из СписокНовостей.
//
Процедура ПоказатьКонтекстныеНовости(
			ФормаВладелец,
			СписокЛентНовостей,
			ЗНАЧ ИмяМетаданных,
			ЗНАЧ ИмяФормы = Неопределено,
			ЗНАЧ ИмяСобытия = Неопределено,
			ПараметрыОткрытияФормы = Неопределено) Экспорт

#Область ИнициализацияМетода

	Если НЕ РазрешенаРаботаСНовостямиТекущемуПользователю() Тогда
		Возврат;
	КонецЕсли;

	ТипСтрока         = Тип("Строка");
	ТипСтруктура      = Тип("Структура");
	ТипСписокЗначений = Тип("СписокЗначений");

	НовыеПараметрыОткрытияФормы = Новый Структура;
		НовыеПараметрыОткрытияФормы.Вставить("СписокЛентНовостей"           , СписокЛентНовостей);
		// Если не преобразовать Неопределено в "", то форма откроется > 1 раза для одинаковых ключевых параметров и ключа уникальности.
		НовыеПараметрыОткрытияФормы.Вставить("ИмяМетаданных"                , ?(ИмяМетаданных = Неопределено, "", ИмяМетаданных));
		НовыеПараметрыОткрытияФормы.Вставить("ИмяФормы"                     , ?(ИмяФормы = Неопределено, "", ИмяФормы));
		НовыеПараметрыОткрытияФормы.Вставить("ИмяСобытия"                   , ?(ИмяСобытия = Неопределено, "", ИмяСобытия));
		// Прочие параметры из ПараметрыОткрытияФормы
		НовыеПараметрыОткрытияФормы.Вставить("ЗаголовокФормы"               , "");
		НовыеПараметрыОткрытияФормы.Вставить("СкрыватьКолонкуДатаПубликации", Ложь);
		НовыеПараметрыОткрытияФормы.Вставить("СкрыватьКолонкуПодзаголовок"  , Ложь);
		НовыеПараметрыОткрытияФормы.Вставить("СкрыватьКолонкуЛентаНовостей" , Ложь);
		НовыеПараметрыОткрытияФормы.Вставить("ПоказыватьПанельПоиска"       , Ложь);
		НовыеПараметрыОткрытияФормы.Вставить("ПоказыватьПанельНавигации"    , Ложь);
		НовыеПараметрыОткрытияФормы.Вставить("ИнициаторОткрытияНовости"     , "Неизвестно");
		НовыеПараметрыОткрытияФормы.Вставить("РежимОткрытияОкна"            , "");
		НовыеПараметрыОткрытияФормы.Вставить("СписокНовостей"               , Новый СписокЗначений);
		НовыеПараметрыОткрытияФормы.Вставить("СортировкаСпискаНовостей"     , "");
		НовыеПараметрыОткрытияФормы.Вставить("ПропуститьЗаполнениеНовостями", Ложь);

	ПараметрыОткрытияФормыЭталон = Новый Структура;
		ПараметрыОткрытияФормыЭталон.Вставить("ЗаголовокФормы"               , "");
		ПараметрыОткрытияФормыЭталон.Вставить("СкрыватьКолонкуДатаПубликации", Ложь);
		ПараметрыОткрытияФормыЭталон.Вставить("СкрыватьКолонкуПодзаголовок"  , Ложь);
		ПараметрыОткрытияФормыЭталон.Вставить("СкрыватьКолонкуЛентаНовостей" , Ложь);
		ПараметрыОткрытияФормыЭталон.Вставить("ПоказыватьПанельПоиска"       , Ложь);
		ПараметрыОткрытияФормыЭталон.Вставить("ПоказыватьПанельНавигации"    , Ложь);
		ПараметрыОткрытияФормыЭталон.Вставить("ИнициаторОткрытияНовости"     , "Неизвестно");
		ПараметрыОткрытияФормыЭталон.Вставить("РежимОткрытияОкна"            , "");
		ПараметрыОткрытияФормыЭталон.Вставить("СписокНовостей"               , Новый СписокЗначений);
		ПараметрыОткрытияФормыЭталон.Вставить("СортировкаСпискаНовостей"     , "");
		ПараметрыОткрытияФормыЭталон.Вставить("ПропуститьЗаполнениеНовостями", Ложь);
	Если ТипЗнч(ПараметрыОткрытияФормы) = ТипСтруктура Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыОткрытияФормыЭталон, ПараметрыОткрытияФормы);
	КонецЕсли;

#КонецОбласти

#Область Обработка

	Если ТипЗнч(ПараметрыОткрытияФормыЭталон.ЗаголовокФормы) = ТипСтрока
			И НЕ ПустаяСтрока(ПараметрыОткрытияФормыЭталон.ЗаголовокФормы) Тогда
		НовыеПараметрыОткрытияФормы.ЗаголовокФормы = ПараметрыОткрытияФормыЭталон.ЗаголовокФормы;
	КонецЕсли;
	Если ПараметрыОткрытияФормыЭталон.СкрыватьКолонкуДатаПубликации = Истина Тогда
		НовыеПараметрыОткрытияФормы.СкрыватьКолонкуДатаПубликации = Истина;
	КонецЕсли;
	Если ПараметрыОткрытияФормыЭталон.СкрыватьКолонкуПодзаголовок = Истина Тогда
		НовыеПараметрыОткрытияФормы.СкрыватьКолонкуПодзаголовок = Истина;
	КонецЕсли;
	Если ПараметрыОткрытияФормыЭталон.СкрыватьКолонкуЛентаНовостей = Истина Тогда
		НовыеПараметрыОткрытияФормы.СкрыватьКолонкуЛентаНовостей = Истина;
	КонецЕсли;
	Если ПараметрыОткрытияФормыЭталон.ПоказыватьПанельПоиска = Истина Тогда
		НовыеПараметрыОткрытияФормы.ПоказыватьПанельПоиска = Истина;
	КонецЕсли;
	Если ПараметрыОткрытияФормыЭталон.ПоказыватьПанельНавигации = Истина Тогда
		НовыеПараметрыОткрытияФормы.ПоказыватьПанельНавигации = Истина;
	КонецЕсли;
	Если ТипЗнч(ПараметрыОткрытияФормыЭталон.ИнициаторОткрытияНовости) = ТипСтрока
			И НЕ ПустаяСтрока(ПараметрыОткрытияФормыЭталон.ИнициаторОткрытияНовости) Тогда
		НовыеПараметрыОткрытияФормы.ИнициаторОткрытияНовости = ПараметрыОткрытияФормыЭталон.ИнициаторОткрытияНовости;
	КонецЕсли;
	Если ТипЗнч(ПараметрыОткрытияФормыЭталон.РежимОткрытияОкна) = ТипСтрока Тогда
		НовыеПараметрыОткрытияФормы.РежимОткрытияОкна = ПараметрыОткрытияФормыЭталон.РежимОткрытияОкна;
	КонецЕсли;
	Если (ТипЗнч(ПараметрыОткрытияФормыЭталон.СписокНовостей) = ТипСписокЗначений)
			И (ПараметрыОткрытияФормыЭталон.СписокНовостей.Количество() > 0) Тогда
		НовыеПараметрыОткрытияФормы.СписокНовостей = ПараметрыОткрытияФормыЭталон.СписокНовостей;
	КонецЕсли;
	Если ТипЗнч(ПараметрыОткрытияФормыЭталон.СортировкаСпискаНовостей) = ТипСтрока Тогда
		НовыеПараметрыОткрытияФормы.СортировкаСпискаНовостей = ПараметрыОткрытияФормыЭталон.СортировкаСпискаНовостей;
	КонецЕсли;
	Если ПараметрыОткрытияФормыЭталон.ПропуститьЗаполнениеНовостями = Истина Тогда
		НовыеПараметрыОткрытияФормы.ПропуститьЗаполнениеНовостями = Истина;
	КонецЕсли;

	ИмяОткрываемойФормы = "Справочник.Новости.Форма.ФормаКонтекстныхНовостей"; // ИмяФормы
	ИнтеграцияПодсистемБИПКлиент.ПереопределитьПараметрыОткрытияФормыСпискаКонтекстныхНовостей(
		ИмяОткрываемойФормы,
		НовыеПараметрыОткрытияФормы);
	ОбработкаНовостейКлиентПереопределяемый.ПереопределитьПараметрыОткрытияФормыСпискаКонтекстныхНовостей(
		ИмяОткрываемойФормы,
		НовыеПараметрыОткрытияФормы);

	ОткрытьФорму(
		ИмяОткрываемойФормы, // ИмяФормы
		НовыеПараметрыОткрытияФормы, // Параметры
		ФормаВладелец, // Владелец
		ИмяМетаданных); // Уникальность, если Ложь - то уникальность по-умолчанию

#КонецОбласти

КонецПроцедуры

#КонецОбласти

#Область ОбработкаСобытий

// В процедуре прописываются вызовы процедур и функций, обязательные для чтения новостей.
// После обработки стандартных событий, управление передается в переопределяемый модуль.
//
// Параметры:
//  НовостьСсылка    - СправочникСсылка.Новости - Ссылка на новость;
//  Форма            - ФормаКлиентскогоПриложения - Форма-владелец, откуда вызывается обработчик;
//  СписокПараметров - СписокЗначений - произвольный список параметров.
//
Процедура ОбработкаСобытия(НовостьСсылка, Форма, СписокПараметров) Экспорт

	ПропуститьПереопределение = Ложь;

	ТипСписокЗначений = Тип("СписокЗначений");

	Если ТипЗнч(СписокПараметров) = ТипСписокЗначений Тогда
		НайденноеДействие = НайтиЭлементСпискаЗначений(
			СписокПараметров,
			Новый Структура("ВариантПоиска, ЗначениеПоиска",
				"ПоПредставлениюБезУчетаРегистра",
				"Действие"));
		Если НайденноеДействие <> Неопределено Тогда
			Если НайденноеДействие.Значение = "ОткрытьОбработку" Тогда
				ОткрываемаяФорма = НайтиЭлементСпискаЗначений(
					СписокПараметров,
					Новый Структура("ВариантПоиска, ЗначениеПоиска",
						"ПоПредставлениюБезУчетаРегистра",
						"ИмяФормы"));
				Если ТипЗнч(ОткрываемаяФорма) = Тип("ЭлементСпискаЗначений") Тогда
					ОткрытьФорму(ОткрываемаяФорма.Значение);
				КонецЕсли;
				ПропуститьПереопределение = Истина;
			ИначеЕсли НайденноеДействие.Значение = "ОткрытьОбработкуОбновления" Тогда
				// ////? Реализовать запуск обработки обновления конфигурации
				ПропуститьПереопределение = Истина;
			ИначеЕсли НайденноеДействие.Значение = "Предупреждение" Тогда
				Текст = НайтиЭлементСпискаЗначений(
					СписокПараметров,
					Новый Структура("ВариантПоиска, ЗначениеПоиска",
						"ПоПредставлениюБезУчетаРегистра",
						"Текст"));
				Если ТипЗнч(Текст) = Тип("ЭлементСпискаЗначений") Тогда
					Текст = Текст.Значение;
					Заголовок = НайтиЭлементСпискаЗначений(
						СписокПараметров,
						Новый Структура("ВариантПоиска, ЗначениеПоиска",
							"ПоПредставлениюБезУчетаРегистра",
							"Заголовок"));
					Если ТипЗнч(Заголовок) = Тип("ЭлементСпискаЗначений") Тогда
						Заголовок = Заголовок.Значение;
					Иначе
						Заголовок = НСтр("ru='Информация'");
					КонецЕсли;
					ПоказатьПредупреждение(
						,
						Текст,
						0,
						Заголовок);
				КонецЕсли;
				ПропуститьПереопределение = Истина;
			Иначе
				// Другие действия.
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	// Переопределение.
	Если ПропуститьПереопределение <> Истина Тогда
		ИнтеграцияПодсистемБИПКлиент.ОбработкаСобытия(НовостьСсылка, Форма, СписокПараметров);
		ОбработкаНовостейКлиентПереопределяемый.ОбработкаСобытия(НовостьСсылка, Форма, СписокПараметров);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область РаботаСФормойНовости

// Функция показывает новость в отдельном окне.
//
// Параметры:
//  НовостьСсылка          - СправочникСсылка.Новости - открываемая новость;
//  ПараметрыОткрытияФормы - Структура - параметры открытия формы новости. Можно заполнять:
//    * Ключ - Ссылка на новость;
//    * РежимОткрытияОкна - Строка - "БлокироватьОкноВладельца" или любое другое значение (которое будет воспринято как "Независимое");
//    * ИнициаторОткрытияНовости - Строка - произвольное значение для дальнейшей обработки в переопределяемых модулях.
//  ФормаВладелец          - ФормаКлиентскогоПриложения - форма, из которой нужно открыть форму новости;
//  Уникальность           - Произвольный - Уникальность открываемой формы. Ложь для уникальности по-умолчанию.
//
// Возвращаемое значение:
//  ФормаКлиентскогоПриложения, Неопределено - форма с новостью.
//
Функция ПоказатьНовость(
			НовостьСсылка,
			ПараметрыОткрытияФормы = Неопределено,
			ФормаВладелец = Неопределено,
			Уникальность = Ложь) Экспорт

	Если НЕ РазрешенаРаботаСНовостямиТекущемуПользователю() Тогда
		Возврат Неопределено;
	КонецЕсли;

	ТипСтруктура = Тип("Структура");

	ПараметрыОткрытияФормыЭталон = Новый Структура;
		ПараметрыОткрытияФормыЭталон.Вставить("ИнициаторОткрытияНовости", "Неизвестно"); // Идентификатор.
		ПараметрыОткрытияФормыЭталон.Вставить("Ключ"                    , Неопределено); // Идентификатор.
	Если ТипЗнч(ПараметрыОткрытияФормы) = ТипСтруктура Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыОткрытияФормыЭталон, ПараметрыОткрытияФормы);
	КонецЕсли;

	Если ПараметрыОткрытияФормыЭталон.Ключ = Неопределено Тогда
		ПараметрыОткрытияФормыЭталон.Ключ = НовостьСсылка;
	КонецЕсли;

	ИмяОткрываемойФормы = "Справочник.Новости.Форма.ФормаНовости"; // ИмяФормы
	ИнтеграцияПодсистемБИПКлиент.ПереопределитьПараметрыОткрытияФормыНовости(
		ИмяОткрываемойФормы,
		ПараметрыОткрытияФормыЭталон);
	ОбработкаНовостейКлиентПереопределяемый.ПереопределитьПараметрыОткрытияФормыНовости(
		ИмяОткрываемойФормы,
		ПараметрыОткрытияФормыЭталон);

	ФормаНовости = ОткрытьФорму(
		ИмяОткрываемойФормы, // ИмяФормы
		ПараметрыОткрытияФормыЭталон,
		ФормаВладелец, // Владелец
		Уникальность); // Уникальность, если Ложь - то уникальность по-умолчанию, Истина - нет проверки уникальности

	Возврат ФормаНовости;

КонецФункции

// Функция показывает несколько новостей в отдельном окне.
//
// Параметры:
//  ПараметрыОткрытияФормы   - Структура - параметры открытия формы новости. Можно заполнять:
//     * РежимОткрытияОкна    - Строка - или "БлокироватьОкноВладельца", или любое другое значение (которое будет воспринято как "Независимое");
//     * Заголовок            - Строка - Заголовок формы просмотра очень важных новостей;
//     * СписокНовостей       - СписокЗначений - Список новостей (дополняет параметр "АдресМассиваНовостей").
//                              Если передан список новостей, то в нем не производится отбор по идентификатору формы или идентификатору события,
//                                а также не осуществляется никакого другого контроля (пометка на удаление, просроченность и т.п.);
//     * АдресМассиваНовостей - Строка - Адрес временного хранилища с массивом структур новостей;
//     * ИдентификаторФормы   - Строка - идентификатор формы. Имеет смысл только вместе с параметром АдресМассиваНовостей;
//     * ИдентификаторСобытия - Строка - идентификатор события. Имеет смысл только вместе с параметром АдресМассиваНовостей;
//     * ИнициаторОткрытияНовости - Строка - произвольное значение для дальнейшей обработки в переопределяемых модулях.
//  ФормаВладелец            - ФормаКлиентскогоПриложения - форма, из которой нужно открыть форму новости;
//  Уникальность             - Произвольный - Уникальность открываемой формы. Ложь для уникальности по-умолчанию.
//
// Возвращаемое значение:
//  ФормаКлиентскогоПриложения, Неопределено - форма со списком новостей.
//
Функция ПоказатьНовости(
			ПараметрыОткрытияФормы = Неопределено,
			ФормаВладелец = Неопределено,
			Уникальность = Ложь) Экспорт

	Если НЕ РазрешенаРаботаСНовостямиТекущемуПользователю() Тогда
		Возврат Неопределено;
	КонецЕсли;

	ТипСтруктура = Тип("Структура");

	Если ТипЗнч(ПараметрыОткрытияФормы) <> ТипСтруктура Тогда
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("ИнициаторОткрытияНовости", "Неизвестно"); // Идентификатор.
	КонецЕсли;

	ИмяОткрываемойФормы = "Справочник.Новости.Форма.ФормаНовостейСоСписком"; //"Справочник.Новости.Форма.ФормаНовостей", // ИмяФормы
	ИнтеграцияПодсистемБИПКлиент.ПереопределитьПараметрыОткрытияФормыСпискаОченьВажныхКонтекстныхНовостей(
		ИмяОткрываемойФормы,
		ПараметрыОткрытияФормы);
	ОбработкаНовостейКлиентПереопределяемый.ПереопределитьПараметрыОткрытияФормыСпискаОченьВажныхКонтекстныхНовостей(
		ИмяОткрываемойФормы,
		ПараметрыОткрытияФормы);

	ФормаНовостей = ОткрытьФорму(
		ИмяОткрываемойФормы, // ИмяФормы
		ПараметрыОткрытияФормы,
		ФормаВладелец, // Владелец
		Уникальность); // Уникальность, если Ложь - то уникальность по-умолчанию, Истина - нет проверки уникальности

	Возврат ФормаНовостей;

КонецФункции

// Функция показывает основную форму новостей с возможностью позиционирования на папке.
//
// Параметры:
//  ПараметрыОткрытияФормы   - Структура - параметры открытия формы новости. Можно заполнять:
//     * АктивироватьПапку_ВариантОтбора  - Число - 0 (позиционироваться на "Все новости") или 1 (позиционироваться на выбранной ленте новостей);
//     * АктивироватьПапку_ЗначениеОтбора - Неопределено, СправочникСсылка.ЛентыНовостей - значение ленты новостей (если выбран вариант позиционирования 1).
//  ФормаВладелец            - ФормаКлиентскогоПриложения - форма, из которой нужно открыть форму новости;
//  Уникальность             - Произвольный - Уникальность открываемой формы. Ложь для уникальности по-умолчанию.
//
// Возвращаемое значение:
//  ФормаКлиентскогоПриложения, Неопределено - форма с новостью.
//
Функция ПоказатьОсновнуюФормуНовостей(
			ПараметрыОткрытияФормы = Неопределено,
			ФормаВладелец = Неопределено,
			Уникальность = Ложь) Экспорт

	Если НЕ РазрешенаРаботаСНовостямиТекущемуПользователю() Тогда
		Возврат Неопределено;
	КонецЕсли;

	ТипСтруктура = Тип("Структура");

	Если ТипЗнч(ПараметрыОткрытияФормы) <> ТипСтруктура Тогда
		ПараметрыОткрытияФормы = Новый Структура;
	КонецЕсли;

	ИмяОткрываемойФормы = "Справочник.Новости.Форма.ФормаПросмотраНовостей"; // ИмяФормы

	ФормаНовостей = ОткрытьФорму(
		ИмяОткрываемойФормы, // ИмяФормы
		ПараметрыОткрытияФормы,
		ФормаВладелец, // Владелец
		Уникальность); // Уникальность, если Ложь - то уникальность по-умолчанию, Истина - нет проверки уникальности
	Если ФормаНовостей.ЭтоПовторноеОткрытие = Истина Тогда
		ПараметрыОткрытияФормыЭталон = Новый Структура;
			ПараметрыОткрытияФормыЭталон.Вставить("АктивироватьПапку_ВариантОтбора" , Неопределено);
			ПараметрыОткрытияФормыЭталон.Вставить("АктивироватьПапку_ЗначениеОтбора", Неопределено);
		ЗаполнитьЗначенияСвойств(ПараметрыОткрытияФормыЭталон, ПараметрыОткрытияФормы);
		Если ПараметрыОткрытияФормыЭталон.АктивироватьПапку_ВариантОтбора <> Неопределено
				И ПараметрыОткрытияФормыЭталон.АктивироватьПапку_ЗначениеОтбора <> Неопределено Тогда
			ФормаНовостей.НайтиИАктивизироватьПапку(Новый Структура("ВариантОтбора, ЗначениеОтбора",
				ПараметрыОткрытияФормыЭталон.АктивироватьПапку_ВариантОтбора,
				ПараметрыОткрытияФормыЭталон.АктивироватьПапку_ЗначениеОтбора));
		КонецЕсли;
	КонецЕсли;

	Возврат ФормаНовостей;

КонецФункции

#КонецОбласти

#Область КонтекстныеНовости

// Процедура обрабатывает нажатие кнопки, принадлежащей механизму контекстных новостей.
// Должна вызываться из Подключаемый_ОбработкаНовости(Команда).
// После обработки стандартных событий, управление передается в переопределяемый модуль.
//
// Параметры:
//  Форма   - ФормаКлиентскогоПриложения - форма, в которой необходимо обработать нажатие на кнопку механизма контекстных новостей;
//  Команда - КомандаФормы, Структура - вызванная команда или Структура с ключом "Имя".
//
Процедура КонтекстныеНовости_ОбработкаКомандыНовости(Форма, Команда) Экспорт

	Если НЕ РазрешенаРаботаСНовостямиТекущемуПользователю() Тогда
		Возврат;
	КонецЕсли;

	ТипМассив = Тип("Массив");
	ТипСтрока = Тип("Строка");

	ПропуститьПереопределение = Ложь;

	// По имени команды открыть новость.

	Если (Команда.Имя = "Команда_Новость_Список") ИЛИ (Команда.Имя = "КонтекстныеНовостиСписок") Тогда
		ПараметрыОткрытияФормыКонтекстныхНовостей = Новый Структура;
			ПараметрыОткрытияФормыКонтекстныхНовостей.Вставить("ЗаголовокФормы"               , Форма.Новости.ЗаголовокФормыКонтекстныхНовостей);
			ПараметрыОткрытияФормыКонтекстныхНовостей.Вставить("СкрыватьКолонкуЛентаНовостей" , Истина);
			ПараметрыОткрытияФормыКонтекстныхНовостей.Вставить("СкрыватьКолонкуПодзаголовок"  , Ложь);
			ПараметрыОткрытияФормыКонтекстныхНовостей.Вставить("СкрыватьКолонкуДатаПубликации", Ложь);
			ПараметрыОткрытияФормыКонтекстныхНовостей.Вставить("ПоказыватьПанельНавигации"    , Ложь);
			ПараметрыОткрытияФормыКонтекстныхНовостей.Вставить("РежимОткрытияОкна"            , "БлокироватьОкноВладельца"); // Идентификатор.
			ПараметрыОткрытияФормыКонтекстныхНовостей.Вставить("ИнициаторОткрытияНовости"     ,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"КонтекстныеНовостиОткрытиеСпискаИзМеню/Метаданные=%1/Форма=%2", // Идентификатор.
					Форма.Новости.Метаданные,
					Форма.Новости.Форма));
			ПараметрыОткрытияФормыКонтекстныхНовостей.Вставить("СписокНовостей"               , Неопределено);
			ПараметрыОткрытияФормыКонтекстныхНовостей.Вставить("СортировкаСпискаНовостей"     , "");
			ПараметрыОткрытияФормыКонтекстныхНовостей.Вставить("ПропуститьЗаполнениеНовостями", Ложь);
		ИнтеграцияПодсистемБИПКлиент.ПереопределитьПараметрыОткрытияФормыКонтекстныхНовостей(
			ПараметрыОткрытияФормыКонтекстныхНовостей);
		ОбработкаНовостейКлиентПереопределяемый.ПереопределитьПараметрыОткрытияФормыКонтекстныхНовостей(
			ПараметрыОткрытияФормыКонтекстныхНовостей);
		ПоказатьКонтекстныеНовости(
			Форма, // ФормаВладелец
			Неопределено, // СписокЛентНовостей = По всем. Форма контекстных новостей сама рассчитает список лент новостей, исходя из их видимости пользователю.
			Форма.Новости.Метаданные, // ИмяМетаданных
			Форма.Новости.Форма, // ИмяФормы
			, // ИмяСобытия = По всем
			ПараметрыОткрытияФормыКонтекстныхНовостей); // ПараметрыОткрытия
		ПропуститьПереопределение = Истина;

	ИначеЕсли (Команда.Имя = "ВидимостьПанелиКонтекстныхНовостей") Тогда
		ПанельКонтекстныхНовостей_ИзменитьВидимость(Форма, НЕ Форма.Элементы.ПанельКонтекстныхНовостей.Видимость);

	ИначеЕсли СтрНачинаетсяС(ВРег(Команда.Имя), ВРег("Команда_Новость_")) Тогда
		Идентификатор = Число(Прав(Команда.Имя, СтрДлина(Команда.Имя)-16));
		Если ТипЗнч(Форма.Новости.Новости) = ТипМассив Тогда
			НайденнаяНовость = Неопределено;
			Для Каждого ТекущаяНовость Из Форма.Новости.Новости Цикл
				Если ТекущаяНовость.НомерСтрокиНовости = Идентификатор Тогда
					НайденнаяНовость = ТекущаяНовость;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли Форма.Новости.Новости = Неопределено Тогда
			// Такое возможно, когда в форму передается не массив новостей, а адрес хранилища.
			НайденнаяНовость = Неопределено;
			Если (ТипЗнч(Форма.Новости.АдресМассиваНовостей) = ТипСтрока)
					И (НЕ ПустаяСтрока(Форма.Новости.АдресМассиваНовостей)) Тогда
				НайденнаяНовость = ОбработкаНовостейВызовСервера.НайтиКонтекстнуюНовостьВМассиве(Форма.Новости.АдресМассиваНовостей, Идентификатор);
			КонецЕсли;
		Иначе // Таблица значений
			НайденнаяНовость = Форма.Новости.Новости.НайтиПоИдентификатору(Идентификатор);
		КонецЕсли;
		Если НайденнаяНовость <> Неопределено Тогда
			Форма.Новости.ТекущаяНовость = НайденнаяНовость.Новость;
			// Одна и та же новость может относиться к разным формам одного объекта метаданных.
			// Чтобы определить, в каком окне открывать новость - надо найти все новости, связанные с этой формой.
			// Если хотя бы в одной строке для этой новости есть галочка "Показывать в форме объекта", Тогда вывести новость в форме объекта.
			ПоказыватьВФормеОбъекта = Ложь;
			// Если новостей > 20, то это может привести к неявному вызову сервера.
			Если ТипЗнч(Форма.Новости.Новости) = ТипМассив Тогда
				МассивНовостейДляЭтойФормы = Новый Массив;
				Для Каждого ТекущаяНовость Из Форма.Новости.Новости Цикл
					Если ТекущаяНовость.Форма = Форма.Новости.Форма Тогда
						МассивНовостейДляЭтойФормы.Добавить(ТекущаяНовость);
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли Форма.Новости.Новости = Неопределено Тогда
				// Такое возможно, когда в форму передается не массив новостей, а адрес хранилища.
				// ////? При показе новостей в форме, в которой хранится только адрес временного хранилища, а не массив новостей
				//  всегда открывать новость в отдельном окне.
				ПоказыватьВФормеОбъекта = Ложь;
			Иначе // Таблица значений
				МассивНовостейДляЭтойФормы = Форма.Новости.Новости.НайтиСтроки(
					Новый Структура("Форма", Форма.Новости.Форма));
			КонецЕсли;
			Для каждого ТекущаяНовостьДляЭтойФормы Из МассивНовостейДляЭтойФормы Цикл
				Если ТекущаяНовостьДляЭтойФормы.ПоказыватьВФормеОбъекта = Истина Тогда
					ПоказыватьВФормеОбъекта = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			ЕстьРеквизитТекстНовостиХТМЛ = Истина;
			Попытка
				ТекстНовостиХТМЛ = Форма.ТекстНовостиХТМЛ;
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ЕстьРеквизитТекстНовостиХТМЛ = Ложь;
			КонецПопытки;
			Если (ПоказыватьВФормеОбъекта = Истина) И (ЕстьРеквизитТекстНовостиХТМЛ = Истина) Тогда
				Форма.ТекстНовостиХТМЛ = ПолучитьХТМЛТекстНовостей(НайденнаяНовость.Новость);
				Если ПустаяСтрока(Форма.ТекстНовостиХТМЛ) Тогда
					Форма.Элементы.ГруппаТекстНовости.Видимость = Ложь;
				Иначе
					Форма.Элементы.ГруппаТекстНовости.Видимость = Истина;
				КонецЕсли;
			Иначе
				Если НЕ НайденнаяНовость.Новость.Пустая() Тогда
					ПараметрыОткрытияФормы = Новый Структура;
					ПараметрыОткрытияФормы.Вставить("ИнициаторОткрытияНовости",
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							"КонтекстныеНовостиОткрытиеИзМеню/Метаданные=%1/Форма=%2", // Идентификатор.
							Форма.Новости.Метаданные,
							Форма.Новости.Форма));
					ПараметрыОткрытияФормы.Вставить("НовостьНаименование", НайденнаяНовость.НовостьНаименование); // Заголовок новости.
					ПараметрыОткрытияФормы.Вставить("НовостьКодЛентыНовостей", НайденнаяНовость.НовостьКодЛентыНовостей); // Код ленты новостей.
					ПоказатьНовость(
						НайденнаяНовость.Новость, // НовостьСсылка
						, // ПараметрыОткрытияФормы. БлокироватьОкноВладельца не нужно, т.к. неизвестно что будет за владелец
						       // и блокировать первое попавшееся окно неправильно.
						Форма, // ФормаВладелец.
						Ложь); // Уникальность по-умолчанию (по ссылке).
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ПропуститьПереопределение = Истина;

	КонецЕсли;

	// Переопределение.
	Если ПропуститьПереопределение <> Истина Тогда
		ИнтеграцияПодсистемБИПКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(Форма, Команда);
		ОбработкаНовостейКлиентПереопределяемый.КонтекстныеНовости_ОбработкаКомандыНовости(Форма, Команда);
	КонецЕсли;

КонецПроцедуры

// Процедура обрабатывает оповещение, приходящее в форму через обработчик ОбработкаОповещения.
//
// Параметры:
//  Форма        - ФормаКлиентскогоПриложения - форма, в которой необходимо обработать оповещение;
//  ИмяСобытия   - Произвольный - данные обработчика оповещения;
//  Параметр     - Произвольный - данные обработчика оповещения;
//  Источник     - Произвольный - данные обработчика оповещения.
//
Процедура КонтекстныеНовости_ОбработкаОповещения(
			Форма,
			ИмяСобытия,
			Параметр,
			Источник) Экспорт

	Если НЕ РазрешенаРаботаСНовостямиТекущемуПользователю() Тогда
		Возврат;
	КонецЕсли;

	ТипСтруктура      = Тип("Структура");
	ТипМассив         = Тип("Массив");
	ТипСоответствие   = Тип("Соответствие");
	ТипСтрока         = Тип("Строка");
	ТипЧисло          = Тип("Число");
	ТипСписокЗначений = Тип("СписокЗначений");
	ТипБулево         = Тип("Булево");

	ВсеОповещения = ВсеОповещения();

	ПропуститьПереопределение = Ложь;

	ФормаНовостиЭталон = Новый Структура;
		ФормаНовостиЭталон.Вставить("Новости"                                           , Новый Массив);
		ФормаНовостиЭталон.Вставить("НовостиДляПанелиКонтекстныхНовостей"               , Новый Массив);
		ФормаНовостиЭталон.Вставить("СпособОтображенияПанелиКонтекстныхНовостей"        , "");
		ФормаНовостиЭталон.Вставить("Метаданные"                                        , "");
		ФормаНовостиЭталон.Вставить("Форма"                                             , "");
		ФормаНовостиЭталон.Вставить("ПолучатьНовостиНаСервере"                          , Истина);
		ФормаНовостиЭталон.Вставить("ХранитьМассивНовостейТолькоНаСервере"              , Ложь);
		ФормаНовостиЭталон.Вставить("АдресМассиваНовостей"                              , "");
		ФормаНовостиЭталон.Вставить("СписокНовостейИзменениеПризнака_Прочтена"          , Неопределено);
		ФормаНовостиЭталон.Вставить("СписокНовостейИзменениеПризнака_ОповещениеВключено", Неопределено);
		ФормаНовостиЭталон.Вставить("ИндексТекущейНовостиДляПанелиКонтекстныхНовостей"  , Неопределено);
		ФормаНовостиЭталон.Вставить("КоличествоНовостейДляПанелиКонтекстныхНовостей"    , Неопределено);
	Если ТипЗнч(Форма.Новости) = ТипСтруктура Тогда
		ЗаполнитьЗначенияСвойств(ФормаНовостиЭталон, Форма.Новости);
	КонецЕсли;

	Если ИмяСобытия = ВсеОповещения.ИзмененаПометкаСпискаНовостей Тогда // АПК:761 Идентификатор.
		//

	ИначеЕсли ИмяСобытия = ВсеОповещения.НовостьПрочтена Тогда // АПК:761 Идентификатор.
		// Параметр = новое значение "НовостьПрочтена".
		// Источник = Новость.

		// Если новости хранятся на клиенте (Форма.Новости.Новости).
		// Если ФормаНовостиЭталон.Новости.Количество() > 0, значит в Форма.Новости.Новости есть элементы (новости хранятся на клиенте).
		Если ФормаНовостиЭталон.Новости.Количество() > 0 Тогда // Новости хранятся на клиенте
			Для Каждого ТекущаяНовость Из Форма.Новости.Новости Цикл
				Если ТекущаяНовость.Новость = Источник Тогда
					ТекущаяНовость.Прочтена = ?(Параметр = Истина, Истина, Ложь);
					// Прерывать цикл не нужно, т.к. одна новость может быть привязана к разным событиям.
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		// Панель контекстных новостей.
		Если ФормаНовостиЭталон.НовостиДляПанелиКонтекстныхНовостей.Количество() > 0 Тогда
			Для Каждого ТекущаяНовость Из Форма.Новости.НовостиДляПанелиКонтекстныхНовостей Цикл
				Если ТекущаяНовость.Новость = Источник Тогда
					ТекущаяНовость.Прочтена = ?(Параметр = Истина, Истина, Ложь);
					Прервать; // Здесь новости не должны повторяться.
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		// Если в форме отображается панель контекстных новостей, то перерисовать ее.
		Если (ФормаНовостиЭталон.СпособОтображенияПанелиКонтекстныхНовостей = "СписокНовостей")
				ИЛИ (ФормаНовостиЭталон.СпособОтображенияПанелиКонтекстныхНовостей = "Листание")
				ИЛИ (ФормаНовостиЭталон.СпособОтображенияПанелиКонтекстныхНовостей = "Автолистание") Тогда
			ОбработкаНовостейКлиентСервер.ПанельКонтекстныхНовостей_ОтобразитьНовости(Форма);
		КонецЕсли;

		// Новости могут рассчитываться на клиенте (в ПриОткрытии), а не на сервере (в ПриСозданииНаСервере)
		//  и хранятся в кэше (в глобальной переменной ПараметрыПриложения),
		//  в таком случае необходимо найти новость в кэше и там исправить этот признак.
		Если ТипЗнч(ФормаНовостиЭталон.Метаданные) = ТипСтрока
				И ТипЗнч(ФормаНовостиЭталон.Форма) = ТипСтрока Тогда // Есть идентификаторы метаданных и формы
			Если ФормаНовостиЭталон.ПолучатьНовостиНаСервере = Ложь Тогда // Новости рассчитываются в ПриОткрытии
				// ПараметрыПриложения - глобальная переменная.
				Если ТипЗнч(ПараметрыПриложения) <> ТипСоответствие Тогда
					ПараметрыПриложения = Новый Соответствие;
				КонецЕсли;
				ИмяПараметраПриложения = "ИнтернетПоддержкаПользователей.Новости.КэшКонтекстныхНовостей";
				ЛокальныйКэшКонтекстныхНовостей = ПараметрыПриложения[ИмяПараметраПриложения];
				Если ТипЗнч(ЛокальныйКэшКонтекстныхНовостей) = ТипСоответствие Тогда
					НайденноеЗначениеДляМетаданных = ЛокальныйКэшКонтекстныхНовостей.Получить(ФормаНовостиЭталон.Метаданные);
					Если ТипЗнч(НайденноеЗначениеДляМетаданных) = ТипСоответствие Тогда
						НайденноеЗначениеДляФормыЭталон = Новый Структура;
							НайденноеЗначениеДляФормыЭталон.Вставить("Новости", Неопределено);
						НайденноеЗначениеДляФормы = НайденноеЗначениеДляМетаданных.Получить(ФормаНовостиЭталон.Форма);
						Если ТипЗнч(НайденноеЗначениеДляФормы) = ТипСтруктура Тогда
							ЗаполнитьЗначенияСвойств(НайденноеЗначениеДляФормыЭталон, НайденноеЗначениеДляФормы);
							// На срок заполнения данных и на другие реквизиты не обращаем внимания.
							Если ТипЗнч(НайденноеЗначениеДляФормыЭталон.Новости) = ТипМассив Тогда // Если в эталоне все правильного типа, то и в источнике ОК.
								Для Каждого ТекущаяНовость Из НайденноеЗначениеДляФормы.Новости Цикл
									Если ТипЗнч(ТекущаяНовость) <> ТипСтруктура Тогда
										Продолжить;
									КонецЕсли;
									ТекущаяНовостьЭталон = Новый Структура;
										ТекущаяНовостьЭталон.Вставить("Новость" , Неопределено);
										ТекущаяНовостьЭталон.Вставить("Прочтена", Неопределено);
									ЗаполнитьЗначенияСвойств(ТекущаяНовостьЭталон, ТекущаяНовость);
									Если ТекущаяНовостьЭталон.Новость = Источник Тогда
										Если ТипЗнч(ТекущаяНовостьЭталон.Прочтена) = ТипБулево Тогда // Прочтена, ОповещениеВключено
											ТекущаяНовость.Прочтена = ?(Параметр = Истина, Истина, Ложь);
											// Прерывать цикл не нужно, т.к. одна новость может быть привязана к разным событиям.
										КонецЕсли;
									КонецЕсли;
								КонецЦикла;
								ПараметрыПриложения.Вставить(ИмяПараметраПриложения, ЛокальныйКэшКонтекстныхНовостей);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		// Если новости хранятся на сервере (Форма.Новости.Новости - пусто,
		//  Форма.Новости.ХранитьМассивНовостейТолькоНаСервере = Истина и
		//  Форма.Новости.АдресМассиваНовостей - заполнено адресом),
		//  тогда необходимо заполнить специальные реквизиты "СписокНовостейИзменениеПризнака_Прочтена" и "СписокНовостейИзменениеПризнака_ОповещениеВключено",
		//  и в дальнейшем анализировать эти реквизиты вместе с массивом структур новостей, хранимой на сервере.
		Если ФормаНовостиЭталон.ХранитьМассивНовостейТолькоНаСервере = Истина Тогда // Новости хранятся на сервере
			Если (ТипЗнч(ФормаНовостиЭталон.АдресМассиваНовостей) = ТипСтрока)
					И (НЕ (ПустаяСтрока(ФормаНовостиЭталон.АдресМассиваНовостей))) Тогда // Новости хранятся на сервере, заполнен адрес хранилища.
				Если (ТипЗнч(ФормаНовостиЭталон.СписокНовостейИзменениеПризнака_Прочтена) = ТипСписокЗначений) Тогда // Есть хранилище для списка изменения.
					// Если ТипЗнч = СписокЗначений, значит Форма.Новости.СписокНовостейИзменениеПризнака_Прочтена тоже список значений.
					НайденнаяНовость = Форма.Новости.СписокНовостейИзменениеПризнака_Прочтена.НайтиПоЗначению(Источник);
					Если НайденнаяНовость = Неопределено Тогда
						Форма.Новости.СписокНовостейИзменениеПризнака_Прочтена.Добавить(Источник, , ?(Параметр = Истина, Истина, Ложь));
					Иначе
						НайденнаяНовость.Пометка = ?(Параметр = Истина, Истина, Ложь);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли ИмяСобытия = ВсеОповещения.ИзмененоСостояниеОповещенияНовости Тогда // АПК:761 Идентификатор.
		// Параметр = новое значение "ОповещениеВключено".
		// Источник = Новость.
		// Если новости хранятся на клиенте (Форма.Новости.Новости).
		// Если ФормаНовостиЭталон.Новости.Количество() > 0, значит в Форма.Новости.Новости есть элементы (новости хранятся на клиенте).
		Если ФормаНовостиЭталон.Новости.Количество() > 0 Тогда // Новости хранятся на клиенте
			Для Каждого ТекущаяНовость Из Форма.Новости.Новости Цикл
				Если ТекущаяНовость.Новость = Источник Тогда
					ТекущаяНовость.ОповещениеВключено = ?(Параметр = Истина, Истина, Ложь);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		// Новости могут рассчитываться на клиенте (в ПриОткрытии), а не на сервере (в ПриСозданииНаСервере)
		//  и хранятся в кэше (в глобальной переменной ПараметрыПриложения),
		//  в таком случае необходимо найти новость в кэше и там исправить этот признак.
		Если ТипЗнч(ФормаНовостиЭталон.Метаданные) = ТипСтрока
				И ТипЗнч(ФормаНовостиЭталон.Форма) = ТипСтрока Тогда // Есть идентификаторы метаданных и формы
			Если ФормаНовостиЭталон.ПолучатьНовостиНаСервере = Ложь Тогда // Новости рассчитываются в ПриОткрытии
				// ПараметрыПриложения - глобальная переменная.
				Если ТипЗнч(ПараметрыПриложения) <> ТипСоответствие Тогда
					ПараметрыПриложения = Новый Соответствие;
				КонецЕсли;
				ИмяПараметраПриложения = "ИнтернетПоддержкаПользователей.Новости.КэшКонтекстныхНовостей";
				ЛокальныйКэшКонтекстныхНовостей = ПараметрыПриложения[ИмяПараметраПриложения];
				Если ТипЗнч(ЛокальныйКэшКонтекстныхНовостей) = ТипСоответствие Тогда
					НайденноеЗначениеДляМетаданных = ЛокальныйКэшКонтекстныхНовостей.Получить(ФормаНовостиЭталон.Метаданные);
					Если ТипЗнч(НайденноеЗначениеДляМетаданных) = ТипСоответствие Тогда
						НайденноеЗначениеДляФормыЭталон = Новый Структура;
							НайденноеЗначениеДляФормыЭталон.Вставить("Новости", Неопределено);
						НайденноеЗначениеДляФормы = НайденноеЗначениеДляМетаданных.Получить(ФормаНовостиЭталон.Форма);
						Если ТипЗнч(НайденноеЗначениеДляФормы) = ТипСтруктура Тогда
							ЗаполнитьЗначенияСвойств(НайденноеЗначениеДляФормыЭталон, НайденноеЗначениеДляФормы);
							// На срок заполнения данных и на другие реквизиты не обращаем внимания.
							Если ТипЗнч(НайденноеЗначениеДляФормыЭталон.Новости) = ТипМассив Тогда
								Для Каждого ТекущаяНовость Из НайденноеЗначениеДляФормы.Новости Цикл
									Если ТипЗнч(ТекущаяНовость) <> ТипСтруктура Тогда
										Продолжить;
									КонецЕсли;
									ТекущаяНовостьЭталон = Новый Структура;
										ТекущаяНовостьЭталон.Вставить("Новость"           , Неопределено);
										ТекущаяНовостьЭталон.Вставить("ОповещениеВключено", Неопределено);
									ЗаполнитьЗначенияСвойств(ТекущаяНовостьЭталон, ТекущаяНовость);
									Если ТекущаяНовостьЭталон.Новость = Источник Тогда
										Если ТипЗнч(ТекущаяНовостьЭталон.ОповещениеВключено) = ТипБулево Тогда // Прочтена, ОповещениеВключено
											ТекущаяНовость.ОповещениеВключено = ?(Параметр = Истина, Истина, Ложь);
										КонецЕсли;
									КонецЕсли;
								КонецЦикла;
								ПараметрыПриложения.Вставить(ИмяПараметраПриложения, ЛокальныйКэшКонтекстныхНовостей);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		// Если новости хранятся на сервере (Форма.Новости.Новости - пусто,
		//  Форма.Новости.ХранитьМассивНовостейТолькоНаСервере = Истина и
		//  Форма.Новости.АдресМассиваНовостей - заполнено адресом),
		//  тогда необходимо заполнить специальные реквизиты "СписокНовостейИзменениеПризнака_Прочтена" и "СписокНовостейИзменениеПризнака_ОповещениеВключено",
		//  и в дальнейшем анализировать эти реквизиты вместе с массивом структур новостей, хранимой на сервере.
		Если ФормаНовостиЭталон.ХранитьМассивНовостейТолькоНаСервере = Истина Тогда // Новости хранятся на сервере
			Если (ТипЗнч(ФормаНовостиЭталон.АдресМассиваНовостей) = ТипСтрока)
					И (НЕ (ПустаяСтрока(ФормаНовостиЭталон.АдресМассиваНовостей))) Тогда // Новости хранятся на сервере, заполнен адрес хранилища.
				Если (ТипЗнч(ФормаНовостиЭталон.СписокНовостейИзменениеПризнака_ОповещениеВключено) = ТипСписокЗначений) Тогда // Есть хранилище для списка изменения.
					// Если ТипЗнч = СписокЗначений, значит Форма.Новости.СписокНовостейИзменениеПризнака_ОповещениеВключено тоже список значений.
					НайденнаяНовость = Форма.Новости.СписокНовостейИзменениеПризнака_ОповещениеВключено.НайтиПоЗначению(Источник);
					Если НайденнаяНовость = Неопределено Тогда
						Форма.Новости.СписокНовостейИзменениеПризнака_ОповещениеВключено.Добавить(Источник, , ?(Параметр = Истина, Истина, Ложь));
					Иначе
						НайденнаяНовость.Пометка = ?(Параметр = Истина, Истина, Ложь);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли ИмяСобытия = ВсеОповещения.СобратьИнформациюОбОкнах Тогда // АПК:761 Идентификатор.
		// Для целей отладки форма обработки "УправлениеНовостями" рассылает такое оповещение.
		// Если в форму встроен механизм контекстных новостей, то в реквизит "ИнформацияОбОткрытыхОкнах" формы обработки
		//  надо добавить информацию об открытой форме, загруженных на текущий момент контекстных новостях, идентификаторах и т.п.
		// Так как мы знаем источник, и уверены, что в нем есть реквизит "ИнформацияОбОткрытыхОкнах" типа "СписокЗначений",
		//  то пишем в этот реквизит напрямую.
		Попытка
			Источник.ИнформацияОбОткрытыхОкнах.Добавить(Форма.Новости, Форма.ИмяФормы);
		Исключение
			Источник.ИнформацияОбОткрытыхОкнах.Добавить(ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), Форма.ИмяФормы);
		КонецПопытки;

	ИначеЕсли ИмяСобытия = ВсеОповещения.ПродолжитьАвтолистание Тогда // АПК:761 Идентификатор.
		// Панель контекстных новостей.
		Если Параметр = Форма.УникальныйИдентификатор Тогда
			// Если в свойствах контекстных новостей формы установлен признак автолистания,
			//  то показать следующую новость из списка (или первую, если достигли конца).
			Если ФормаНовостиЭталон.СпособОтображенияПанелиКонтекстныхНовостей = "Автолистание" Тогда // Идентификатор.
				Если ТипЗнч(ФормаНовостиЭталон.ИндексТекущейНовостиДляПанелиКонтекстныхНовостей) <> ТипЧисло Тогда
					ФормаНовостиЭталон.ИндексТекущейНовостиДляПанелиКонтекстныхНовостей = 0;
				КонецЕсли;
				Если ТипЗнч(ФормаНовостиЭталон.КоличествоНовостейДляПанелиКонтекстныхНовостей) <> ТипЧисло Тогда
					ФормаНовостиЭталон.КоличествоНовостейДляПанелиКонтекстныхНовостей = 0;
				КонецЕсли;
				Если ФормаНовостиЭталон.КоличествоНовостейДляПанелиКонтекстныхНовостей > 1 Тогда // Для единственной новости не имеет смысла что-то перелистывать.
					ФормаНовостиЭталон.ИндексТекущейНовостиДляПанелиКонтекстныхНовостей = ФормаНовостиЭталон.ИндексТекущейНовостиДляПанелиКонтекстныхНовостей + 1;
					Если (ФормаНовостиЭталон.ИндексТекущейНовостиДляПанелиКонтекстныхНовостей >= ФормаНовостиЭталон.КоличествоНовостейДляПанелиКонтекстныхНовостей) Тогда
						ФормаНовостиЭталон.ИндексТекущейНовостиДляПанелиКонтекстныхНовостей = 0;
					КонецЕсли;
					Форма.Новости.Вставить("ИндексТекущейНовостиДляПанелиКонтекстныхНовостей", ФормаНовостиЭталон.ИндексТекущейНовостиДляПанелиКонтекстныхНовостей);
					ОбработкаНовостейКлиентСервер.ПанельКонтекстныхНовостей_ОтобразитьНовости(Форма);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли ИмяСобытия = ВсеОповещения.ОтключитьАнимациюИконки Тогда // АПК:761 Идентификатор.
		// Панель контекстных новостей.
		Если Параметр = Форма.УникальныйИдентификатор Тогда
			// Если видна декорация "ПанельКонтекстныхНовостей_КартинкаНовостиИнформация",
			//  то заменить картинку в ней на "ИнформацияНовости16Статичная".
			// Это односторонняя замена, обратной замены (на анимированную картинку) не предусмотрено.
			НайденнаяДекорацияКартинки = Форма.Элементы.Найти("ПанельКонтекстныхНовостей_КартинкаНовостиИнформация");
			Если (НайденнаяДекорацияКартинки <> Неопределено)
					И (НайденнаяДекорацияКартинки.Видимость = Истина) Тогда
				НайденнаяДекорацияКартинки.Картинка = БиблиотекаКартинок.ИнформацияНовости16Статичная;
				// Переключение иконки из анимированной в статичную - однократное,
				//  поэтому можно удалить запись о необходимости переключения картинки.
				// ПараметрыПриложения - глобальная переменная.
				Если ТипЗнч(ПараметрыПриложения) <> ТипСоответствие Тогда
					ПараметрыПриложения = Новый Соответствие;
				КонецЕсли;
				ИмяПараметраПриложения = "ИнтернетПоддержкаПользователей.Новости.АнимированныеИконкиДляПанелейКонтекстныхНовостей"; // Идентификатор.
				ПараметрыАнимированныхИконок = ПараметрыПриложения[ИмяПараметраПриложения];
				Если ТипЗнч(ПараметрыАнимированныхИконок) <> ТипСоответствие Тогда
					ПараметрыАнимированныхИконок = Новый Соответствие;
				КонецЕсли;
				ПараметрыАнимированныхИконок.Удалить(Форма.УникальныйИдентификатор);
				ПараметрыПриложения.Вставить(ИмяПараметраПриложения, ПараметрыАнимированныхИконок);
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	// Переопределение.
	Если ПропуститьПереопределение <> Истина Тогда
		ИнтеграцияПодсистемБИПКлиент.КонтекстныеНовости_ОбработкаОповещения(
			Форма,
			ИмяСобытия,
			Параметр,
			Источник);
		ОбработкаНовостейКлиентПереопределяемый.КонтекстныеНовости_ОбработкаОповещения(
			Форма,
			ИмяСобытия,
			Параметр,
			Источник);
	КонецЕсли;

КонецПроцедуры

// Процедура вызывается при открытии формы с контекстными новостями.
//
// Параметры:
//  Форма        - ФормаКлиентскогоПриложения - форма, в которой необходимо обработать событие ПриОткрытии.
//
Процедура КонтекстныеНовости_ПриОткрытии(Форма) Экспорт

	Если НЕ РазрешенаРаботаСНовостямиТекущемуПользователю() Тогда
		Возврат;
	КонецЕсли;

	СтандартнаяОбработка = Истина;
	ИнтеграцияПодсистемБИПКлиент.КонтекстныеНовости_ПриОткрытии_ПередСтандартнойОбработкой(Форма, СтандартнаяОбработка);
	ОбработкаНовостейКлиентПереопределяемый.КонтекстныеНовости_ПриОткрытии_ПередСтандартнойОбработкой(Форма, СтандартнаяОбработка);
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат;
	КонецЕсли;

	ТипДата         = Тип("Дата");
	ТипЧисло        = Тип("Число");
	ТипСтруктура    = Тип("Структура");
	ТипСоответствие = Тип("Соответствие");

	ПропуститьПереопределение = Ложь;

	ФормаНовостиЭталон = Новый Структура;
		ФормаНовостиЭталон.Вставить("КоличествоОченьВажныхНовостейПриОткрытии", Неопределено);
		ФормаНовостиЭталон.Вставить("КоличествоВажныхНовостейПриОткрытии"     , Неопределено);
		ФормаНовостиЭталон.Вставить("ПолучатьНовостиНаСервере"                , Истина);
	Если ТипЗнч(Форма.Новости) = ТипСтруктура Тогда
		ЗаполнитьЗначенияСвойств(ФормаНовостиЭталон, Форма.Новости);
	КонецЕсли;

	Если (ТипЗнч(ФормаНовостиЭталон.КоличествоОченьВажныхНовостейПриОткрытии) = ТипЧисло
				И ФормаНовостиЭталон.КоличествоОченьВажныхНовостейПриОткрытии > 0)
			ИЛИ (ТипЗнч(ФормаНовостиЭталон.КоличествоВажныхНовостейПриОткрытии) = ТипЧисло
				И ФормаНовостиЭталон.КоличествоВажныхНовостейПриОткрытии > 0)
			ИЛИ (ФормаНовостиЭталон.ПолучатьНовостиНаСервере = Ложь) Тогда

		ИнтервалПодключенияОбработчикаПроверкиКонтекстныхНовостей = 0.5;

		// Если в параметрах запуска передали "ОтложитьПоказНовостей=ХХ;", то необходимо начать показ всех важных и очень важных новостей
		//  только после этого интервала.
		// Для этого в глобальной переменной ПараметрыПриложения сохраняется значение времени начала показа новостей.
		// ПараметрыПриложения - глобальная переменная.
		Если ТипЗнч(ПараметрыПриложения) = ТипСоответствие Тогда
			ИмяПараметраПриложения = "ИнтернетПоддержкаПользователей.Новости.ВремяНачалаПоказаНовостей";
			ВремяНачалаПоказаНовостей = ПараметрыПриложения.Получить(ИмяПараметраПриложения);
			Если (ТипЗнч(ВремяНачалаПоказаНовостей) = ТипДата) Тогда
				// Эта дата - в будущем?
				ТекущаяВремяНачалаПоказаНовостей = ОбщегоНазначенияКлиент.ДатаСеанса() + ИнтервалПодключенияОбработчикаПроверкиКонтекстныхНовостей;
				Если ВремяНачалаПоказаНовостей > ТекущаяВремяНачалаПоказаНовостей Тогда
					ИнтервалПодключенияОбработчикаПроверкиКонтекстныхНовостей = (ВремяНачалаПоказаНовостей - ТекущаяВремяНачалаПоказаНовостей);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		ОбработкаНовостейКлиентСерверПереопределяемый.ПереопределитьИнтервалПодключенияОбработчикаПроверкиКонтекстныхНовостей(ИнтервалПодключенияОбработчикаПроверкиКонтекстныхНовостей);
		Форма.ПодключитьОбработчикОжидания(
			"Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии",
			ИнтервалПодключенияОбработчикаПроверкиКонтекстныхНовостей,
			Истина); // Однократно

	КонецЕсли;

	// Панель контекстных новостей.
	ПанельКонтекстныхНовостей_УправлениеГлобальнымиОбработчиками(Форма);

	// Переопределение.
	Если ПропуститьПереопределение <> Истина Тогда
		ИнтеграцияПодсистемБИПКлиент.КонтекстныеНовости_ПриОткрытии_ПослеСтандартнойОбработки(Форма);
		ОбработкаНовостейКлиентПереопределяемый.КонтекстныеНовости_ПриОткрытии_ПослеСтандартнойОбработки(Форма);
	КонецЕсли;

КонецПроцедуры

// Процедура вызывается из подключаемой процедуры показа контекстных новостей для отображения
//  важных и очень важных новостей при открытии формы.
//
// Параметры:
//  Форма                            - ФормаКлиентскогоПриложения - форма, в которой необходимо обработать событие ПриОткрытии;
//  ИдентификаторыСобытийПриОткрытии - Строка, Массив из Строка - идентификаторы событий, по которым необходимо отбирать контекстные новости;
//  НастройкиПолученияНовостей       - Структура, Неопределено - структура с ключами:
//   * ПолучатьКатегорииНовостей     - Булево - если Истина, то в реквизите формы будут также сохраняться категории новостей.
//                                       Это может быть полезно для реализации особенного отбора новостей,
//                                         который невозможно реализовать с помощью регистров сведений ОтборыПоЛентамНовостей*.
//
Процедура КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(
			Форма,
			ИдентификаторыСобытийПриОткрытии,
			НастройкиПолученияНовостей = Неопределено) Экспорт

	Если НЕ РазрешенаРаботаСНовостямиТекущемуПользователю() Тогда
		Возврат;
	КонецЕсли;

	СтандартнаяОбработка = Истина;
	ИнтеграцияПодсистемБИПКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии_ПередСтандартнойОбработкой(
		Форма,
		ИдентификаторыСобытийПриОткрытии,
		СтандартнаяОбработка);
	ОбработкаНовостейКлиентПереопределяемый.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии_ПередСтандартнойОбработкой(
		Форма,
		ИдентификаторыСобытийПриОткрытии,
		СтандартнаяОбработка);
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат;
	КонецЕсли;

	ПропуститьПереопределение = Ложь;

	// Если новости еще не получены, то получить их.
	Если (Форма.Новости.ПолучатьНовостиНаСервере = Ложь) Тогда
		Форма_Новости_ИзКэша = ПолучитьКонтекстныеНовостиИзКэшаПриложения(
			Форма.Новости.Метаданные,
			Форма.Новости.Форма,
			Форма.Новости.ЗаголовокФормыКонтекстныхНовостей,
			ИдентификаторыСобытийПриОткрытии,
			НастройкиПолученияНовостей);
		ЗаполнитьЗначенияСвойств(
			Форма.Новости,
			Форма_Новости_ИзКэша,
			"Новости, КоличествоНовостей, КоличествоВажныхНовостейПриОткрытии, КоличествоОченьВажныхНовостейПриОткрытии, "
				+ "МассивСтруктурВажныхНовостей");
		// Следующие свойства НЕ будут скопированы (весь список ключей - в ОбработкаНовостей.КонтекстныеНовости_ПриСозданииНаСервере):
		//   ЗаголовокФормыКонтекстныхНовостей,
		//   Метаданные,
		//   Форма,
		//   ТекущаяНовость,
		//   КоличествоНепрочитанныхНовостей,
		//   КоличествоПостоянныхНовостей,
		//   ПолучатьНовостиНаСервере,
		//   ХранитьМассивНовостейТолькоНаСервере,
		//   АдресМассиваНовостей,
		//   МассивСтруктурПостоянныхНовостей,
		//   СписокНовостейИзменениеПризнака_Прочтена,
		//   СписокНовостейИзменениеПризнака_ОповещениеВключено.
	КонецЕсли;

	// Показать важные и очень важные новости.
	Если (Форма.Новости.КоличествоВажныхНовостейПриОткрытии > 0)
			ИЛИ (Форма.Новости.КоличествоОченьВажныхНовостейПриОткрытии > 0) Тогда
		КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриПроизвольномСобытии(
			Форма,
			ИдентификаторыСобытийПриОткрытии,
			НастройкиПолученияНовостей);
	КонецЕсли;

	// Переопределение.
	Если ПропуститьПереопределение <> Истина Тогда
		ИнтеграцияПодсистемБИПКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии_ПослеСтандартнойОбработки(Форма, ИдентификаторыСобытийПриОткрытии);
		ОбработкаНовостейКлиентПереопределяемый.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии_ПослеСтандартнойОбработки(Форма, ИдентификаторыСобытийПриОткрытии);
	КонецЕсли;

КонецПроцедуры

// Процедура отбирает новости по имени формы и имени события и, в зависимости от важности, отображает их.
// Эту процедуру следует вызывать, если в форме на клиенте хранится массив всех контекстных новостей.
// Если же на клиенте хранится только адрес временного хранилища всех новостей, то будет
//  невозможно просмотреть список важных новостей.
//
// Параметры:
//  Форма         - ФормаКлиентскогоПриложения, Структура - форма-владелец, в которой должен быть определен реквизит Новости произвольного типа (со структурой) с ключами:
//   * Новости                                  - Массив из Структура - массив структур всех новостей (со всеми важностями);
//   * АдресМассиваНовостей                     - Строка - адрес во временном хранилище (если массив Новости пустой);
//   * Метаданные                               - Строка - Имя метаданных этой формы;
//   * Форма                                    - Строка - Имя формы, по которому надо отбирать новости;
//   * ПолучатьНовостиНаСервере                 - Булево - Признак того, что новости были рассчитаны на сервере (Истина) или хранятся в кэше на клиенте (Ложь);
//   * ЗаголовокФормыКонтекстныхНовостей        - Строка - заголовок формы;
//   * МассивСтруктурВажныхНовостей             - Массив из Структура - Массив важных новостей для последовательного показа. Если он пустой, то перезаполняется заново;
//  ИдентификаторыСобытий - Строка, Массив из Строка - Имя события (имена событий), по которым надо отбирать новости;
//  НастройкиПолученияНовостей   - Структура, Неопределено - структура с ключами:
//   * ПолучатьКатегорииНовостей - Булево - если Истина, то в реквизите формы будут также сохраняться категории новостей.
//                                  Это может быть полезно для реализации особенного отбора новостей,
//                                    который невозможно реализовать с помощью регистров сведений ОтборыПоЛентамНовостей*.
//
Процедура КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриПроизвольномСобытии(
			Форма,
			ИдентификаторыСобытий,
			НастройкиПолученияНовостей = Неопределено) Экспорт

	Если НЕ РазрешенаРаботаСНовостямиТекущемуПользователю() Тогда
		Возврат;
	КонецЕсли;

	ТипСтрока = Тип("Строка");
	ТипМассив = Тип("Массив");

	ЛокальныеИдентификаторыСобытий = Новый Массив;
	Если ТипЗнч(ИдентификаторыСобытий) = ТипСтрока Тогда
		ЛокальныеИдентификаторыСобытий.Добавить(СокрЛП(Лев(ИдентификаторыСобытий, 50))); // Ограничение на длину события
	ИначеЕсли ТипЗнч(ИдентификаторыСобытий) = ТипМассив Тогда
		ЛокальныеИдентификаторыСобытий = ИдентификаторыСобытий;
	Иначе
		Возврат;
	КонецЕсли;

	// Может быть три варианта хранения новостей в форме:
	// - массив структур новостей (больше данных передается с клиента на сервер и обратно, но можно вызывать просмотр новостей на клиентские события);
	// - адрес временного хранилища (меньше данных передается с клиента на сервер и обратно, но нельзя вызывать просмотр новостей на клиентские события);
	// - клиентский кэш (в глобальной переменной "ПараметрыПриложения").
	ИдентификаторМетаданных = Форма.Новости.Метаданные;
	ИдентификаторФормы      = Форма.Новости.Форма;

	// Из списка новостей вывести на экран важные и очень важные непрочтенные новости.
	МассивВажныхНовостейСВключеннымиНапоминаниями      = Форма.Новости.МассивСтруктурВажныхНовостей;
	СписокОченьВажныхНовостейСВключеннымиНапоминаниями = Новый СписокЗначений;

	Если Форма.Новости.ПолучатьНовостиНаСервере = Истина Тогда
		МассивСтруктурНовостей = Форма.Новости.Новости; // Массив структур всех новостей или Неопределено, если передан адрес временного хранилища.
		АдресМассиваНовостей   = Форма.Новости.АдресМассиваНовостей; // Адрес временного хранилища с массивом структур новостей.
	Иначе // Новости хранятся в кэше на клиенте.
		Форма_Новости_ИзКэша = ПолучитьКонтекстныеНовостиИзКэшаПриложения(
			ИдентификаторМетаданных,
			ИдентификаторФормы,
			Форма.Новости.ЗаголовокФормыКонтекстныхНовостей,
			Неопределено, // События "ПриОткрытии" - оставить пустым, т.е. брать по-умолчанию
			НастройкиПолученияНовостей);
		МассивСтруктурНовостей = Форма_Новости_ИзКэша.Новости;
		АдресМассиваНовостей   = ""; // Адрес временного хранилища оставим пустым
	КонецЕсли;

	// В реквизите формы сохранены все найденные для этой формы контекстные новости.
	// Выбрать из них те, которые можно показать.
	Если ТипЗнч(МассивСтруктурНовостей) = ТипМассив Тогда
		Для Каждого ТекущаяНовость Из МассивСтруктурНовостей Цикл
			Если (СтрСравнить(ТекущаяНовость.Форма, ИдентификаторФормы) <> 0) // Имя формы не совпало.
					ИЛИ (ТекущаяНовость.Важность <> 1) // Кроме "Очень важная новость"
					ИЛИ (ТекущаяНовость.ОповещениеВключено <> Истина)
					ИЛИ (ТекущаяНовость.СпособОповещения = "Отключено") Тогда // Идентификатор.
				// {При добавлении способов оповещения исправлять здесь}.
				Продолжить;
			КонецЕсли;
			Для Каждого ТекущийИдентификаторСобытия Из ЛокальныеИдентификаторыСобытий Цикл
				Если СтрСравнить(ТекущаяНовость.Событие, ТекущийИдентификаторСобытия) = 0 Тогда
					// В массиве новостей могут храниться новости с одинаковым идентификатором Метаданные / Форма,
					//  но для разных событий. Исключить задвоение новостей.
					НайденнаяНовость = СписокОченьВажныхНовостейСВключеннымиНапоминаниями.НайтиПоЗначению(ТекущаяНовость.Новость);
					Если НайденнаяНовость = Неопределено Тогда
						// При формировании списка новостей надо отмечать прочтенные галочкой (Пометка = Истина).
						СписокОченьВажныхНовостейСВключеннымиНапоминаниями.Добавить(ТекущаяНовость.Новость, , ТекущаяНовость.Прочтена);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;

	// Если есть массив структур новостей, то смотреть его, иначе - по адресу временного хранилища.
	Если ЛокальныеИдентификаторыСобытий.Количество() = 0 Тогда
		ИнициаторОткрытияНовостиСобытие = "Отсутствует"; // Идентификатор.
	ИначеЕсли ЛокальныеИдентификаторыСобытий.Количество() = 1 Тогда
		ИнициаторОткрытияНовостиСобытие = ЛокальныеИдентификаторыСобытий[0];
	Иначе // > 1
		ИнициаторОткрытияНовостиСобытие = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"Массив(%1)",
			ЛокальныеИдентификаторыСобытий.Количество());
	КонецЕсли;
	ИнициаторОткрытияНовости = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"КонтекстныеНовостиОткрытиеПриСобытии/Метаданные=%1/Форма=%2/Событие=%3", // Идентификатор.
		ИдентификаторМетаданных,
		ИдентификаторФормы,
		ИнициаторОткрытияНовостиСобытие);
	Если ТипЗнч(МассивСтруктурНовостей) = ТипМассив Тогда // Массив структур новостей
		// При просмотре глобальных очень важных новостей, открывать каждую в отдельной форме.
		// Про просмотре контекстных очень важных новостей, их можно открывать в одной форме.
		ПараметрыОткрытияФормы = Новый Структура;
			ПараметрыОткрытияФормы.Вставить("РежимОткрытияОкна"                    , "БлокироватьОкноВладельца"); // Идентификатор.
			ПараметрыОткрытияФормы.Вставить("Заголовок"                            , Форма.Новости.ЗаголовокФормыКонтекстныхНовостей);
			ПараметрыОткрытияФормы.Вставить("СписокНовостей"                       , СписокОченьВажныхНовостейСВключеннымиНапоминаниями);
			ПараметрыОткрытияФормы.Вставить("ВремяПереносаПоказатьПозжеМинут"      , 15);
			ПараметрыОткрытияФормы.Вставить("СкрыватьСписокНовостейДляОднойНовости", Ложь);
			ПараметрыОткрытияФормы.Вставить("ИнициаторОткрытияНовости"             , ИнициаторОткрытияНовости);
		Если СписокОченьВажныхНовостейСВключеннымиНапоминаниями.Количество() > 1 Тогда
			ПоказатьНовости(
				ПараметрыОткрытияФормы,
				Форма, // ФормаВладелец
				Истина); // Не проверять уникальность
		ИначеЕсли СписокОченьВажныхНовостейСВключеннымиНапоминаниями.Количество() = 1 Тогда
			// Контекстную новость, даже если она одна, все равно показывать в форме
			//  с кнопками (Показать позже, Не показывать), без возможности установки флажка.
			// Показ единственной новости осуществляется функцией ПоказатьНовость.
			ПоказатьНовости(
				ПараметрыОткрытияФормы,
				Форма, // ФормаВладелец
				Истина); // Не проверять уникальность
		Иначе // Нет очень важных новостей.
		КонецЕсли;
	ИначеЕсли ТипЗнч(АдресМассиваНовостей) = ТипСтрока Тогда // Адрес временного хранилища.
		// Проверка на наличие очень важных новостей ПриОткрытии осуществляется
		//  в КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии.
		// При других событиях форма будет открываться всегда и если новостей нет, то открытие формы будет отменяться.
		СписокИдентификаторыСобытий = Новый СписокЗначений;
		СписокИдентификаторыСобытий.ЗагрузитьЗначения(ЛокальныеИдентификаторыСобытий);
		ПараметрыОткрытияФормы = Новый Структура;
			ПараметрыОткрытияФормы.Вставить("РежимОткрытияОкна"                    , "БлокироватьОкноВладельца"); // Идентификатор.
			ПараметрыОткрытияФормы.Вставить("Заголовок"                            , Форма.Новости.ЗаголовокФормыКонтекстныхНовостей);
			ПараметрыОткрытияФормы.Вставить("АдресМассиваНовостей"                 , АдресМассиваНовостей);
			ПараметрыОткрытияФормы.Вставить("ИдентификаторФормы"                   , Форма.Новости.Форма);
			ПараметрыОткрытияФормы.Вставить("ИдентификаторыСобытий"                , СписокИдентификаторыСобытий);
			ПараметрыОткрытияФормы.Вставить("ВремяПереносаПоказатьПозжеМинут"      , 15);
			ПараметрыОткрытияФормы.Вставить("СкрыватьСписокНовостейДляОднойНовости", Ложь);
			ПараметрыОткрытияФормы.Вставить("ИнициаторОткрытияНовости"             , ИнициаторОткрытияНовости);
		ПоказатьНовости(
			ПараметрыОткрытияФормы,
			Форма, // ФормаВладелец
			Истина); // Не проверять уникальность
	КонецЕсли;

	// Для ситуации, когда массив важных новостей заранее не рассчитан (это будет для всех событий, кроме ПриОткрытии),
	//  но новости уже хранятся на клиенте в памяти формы, то заполнить массив таких важных новостей заново.
	Если (ТипЗнч(МассивВажныхНовостейСВключеннымиНапоминаниями) <> ТипМассив)
			ИЛИ (ЛокальныеИдентификаторыСобытий.Найти(ВРег("ПриОткрытии")) <> Неопределено) Тогда
		Если ТипЗнч(МассивСтруктурНовостей) = ТипМассив Тогда
			МассивВажныхНовостейСВключеннымиНапоминаниями = Новый Массив; // Пересчитывать заново
			Для Каждого ТекущаяНовость Из МассивСтруктурНовостей Цикл
				Если (СтрСравнить(ТекущаяНовость.Форма, ИдентификаторФормы) <> 0) // Имя формы не совпало.
						ИЛИ (ТекущаяНовость.Важность <> 2) // Кроме "Важная новость"
						ИЛИ (ТекущаяНовость.ОповещениеВключено <> Истина)
						ИЛИ (ТекущаяНовость.СпособОповещения = "Отключено") Тогда // Идентификатор.
					// {При добавлении способов оповещения исправлять здесь}.
					Продолжить;
				КонецЕсли;
				Для Каждого ТекущийИдентификаторСобытия Из ЛокальныеИдентификаторыСобытий Цикл
					Если СтрСравнить(ТекущаяНовость.Событие, ТекущийИдентификаторСобытия) = 0 Тогда
						МассивВажныхНовостейСВключеннымиНапоминаниями.Добавить(ТекущаяНовость);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Если ТипЗнч(МассивВажныхНовостейСВключеннымиНапоминаниями) = ТипМассив Тогда
		Если МассивВажныхНовостейСВключеннымиНапоминаниями.Количество() > 0 Тогда
			НачатьПоследовательныйПоказВажныхНовостей(МассивВажныхНовостейСВключеннымиНапоминаниями);
		КонецЕсли;
	КонецЕсли;
	Форма.Новости.Вставить("МассивСтруктурВажныхНовостей", Неопределено); // После однократного показа очистить ключ, чтобы не передавался между клиентом и сервером

КонецПроцедуры

#КонецОбласти

#Область ПанельКонтекстныхНовостей

// Процедура обрабатывает нажатие на элементах управления в элементе ПанельКонтекстныхНовостей.
//
// Параметры:
//  Форма   - ФормаКлиентскогоПриложения - форма, в которой необходимо обработать событие Нажатие;
//  Элемент - ЭлементУправления - элемент управления, на котором произвели нажатие мышкой.
//
Процедура ПанельКонтекстныхНовостей_ЭлементПанелиНовостейНажатие(Форма, Элемент) Экспорт

	ТипСоответствие = Тип("Соответствие");

	СтандартнаяОбработка = Истина;
	ИнтеграцияПодсистемБИПКлиент.ПанельКонтекстныхНовостей_ЭлементПанелиНовостейНажатие(
		Форма,
		Элемент,
		СтандартнаяОбработка);
	ОбработкаНовостейКлиентПереопределяемый.ПанельКонтекстныхНовостей_ЭлементПанелиНовостейНажатие(
		Форма,
		Элемент,
		СтандартнаяОбработка);

	Если СтандартнаяОбработка <> Ложь Тогда

		Если ВРег(Элемент.Имя) = ВРег("ПанельКонтекстныхНовостей_КартинкаНовостиИнформация") Тогда
			// Ничего не делать.

		ИначеЕсли ВРег(Элемент.Имя) = ВРег("ПанельКонтекстныхНовостей_КартинкаСтрелкаВлево") Тогда
			// Показать предыдущую новость (если эта - не первая).
			Если Форма.Новости.ИндексТекущейНовостиДляПанелиКонтекстныхНовостей > 0 Тогда
				Форма.Новости.ИндексТекущейНовостиДляПанелиКонтекстныхНовостей = Форма.Новости.ИндексТекущейНовостиДляПанелиКонтекстныхНовостей - 1;
				ОбработкаНовостейКлиентСервер.ПанельКонтекстныхНовостей_ОтобразитьНовости(Форма);
			КонецЕсли;

			// Если включен режим автолистания, то приостановить автолистание на 1 минуту.
			ТекущаяДатаСеансаДляПриостановки = ОбщегоНазначенияКлиент.ДатаСеанса() + 1*60;
			// ПараметрыПриложения - глобальная переменная.
			Если ТипЗнч(ПараметрыПриложения) <> ТипСоответствие Тогда
				ПараметрыПриложения = Новый Соответствие;
			КонецЕсли;
			ИмяПараметраПриложения = "ИнтернетПоддержкаПользователей.Новости.АвтолистаниеДляПанелейКонтекстныхНовостей"; // Идентификатор.
			ПараметрыАвтолистания = ПараметрыПриложения[ИмяПараметраПриложения];
			Если ТипЗнч(ПараметрыАвтолистания) <> ТипСоответствие Тогда
				ПараметрыАвтолистания = Новый Соответствие;
			КонецЕсли;
			ПараметрыАвтолистания.Вставить(Форма.УникальныйИдентификатор, ТекущаяДатаСеансаДляПриостановки);
			ПараметрыПриложения.Вставить(ИмяПараметраПриложения, ПараметрыАвтолистания);

		ИначеЕсли ВРег(Элемент.Имя) = ВРег("ПанельКонтекстныхНовостей_КартинкаСтрелкаВправо") Тогда
			// Показать следующую новость (если эта - не последняя).
			Если Форма.Новости.ИндексТекущейНовостиДляПанелиКонтекстныхНовостей+1 < Форма.Новости.КоличествоНовостейДляПанелиКонтекстныхНовостей Тогда
				Форма.Новости.ИндексТекущейНовостиДляПанелиКонтекстныхНовостей = Форма.Новости.ИндексТекущейНовостиДляПанелиКонтекстныхНовостей + 1;
				ОбработкаНовостейКлиентСервер.ПанельКонтекстныхНовостей_ОтобразитьНовости(Форма);
			КонецЕсли;

			// Если включен режим автолистания, то приостановить автолистание на 1 минуту.
			ТекущаяДатаСеансаДляПриостановки = ОбщегоНазначенияКлиент.ДатаСеанса() + 1*60;
			// ПараметрыПриложения - глобальная переменная.
			Если ТипЗнч(ПараметрыПриложения) <> ТипСоответствие Тогда
				ПараметрыПриложения = Новый Соответствие;
			КонецЕсли;
			ИмяПараметраПриложения = "ИнтернетПоддержкаПользователей.Новости.АвтолистаниеДляПанелейКонтекстныхНовостей"; // Идентификатор.
			ПараметрыАвтолистания = ПараметрыПриложения[ИмяПараметраПриложения];
			Если ТипЗнч(ПараметрыАвтолистания) <> ТипСоответствие Тогда
				ПараметрыАвтолистания = Новый Соответствие;
			КонецЕсли;
			ПараметрыАвтолистания.Вставить(Форма.УникальныйИдентификатор, ТекущаяДатаСеансаДляПриостановки);
			ПараметрыПриложения.Вставить(ИмяПараметраПриложения, ПараметрыАвтолистания);

		ИначеЕсли ВРег(Элемент.Имя) = ВРег("ПанельКонтекстныхНовостей_КартинкаВесьСписок") Тогда
			// Показать список контекстных новостей.
			Команда = Новый Структура("Имя", "Команда_Новость_Список");
			КонтекстныеНовости_ОбработкаКомандыНовости(Форма, Команда);

		ИначеЕсли ВРег(Элемент.Имя) = ВРег("ПанельКонтекстныхНовостей_КартинкаЗакрыть") Тогда
			ПанельКонтекстныхНовостей_ИзменитьВидимость(Форма, Ложь);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Процедура обрабатывает переход по навигационным ссылкам в элементе ПанельКонтекстныхНовостей.
//
// Параметры:
//  Форма                          - ФормаКлиентскогоПриложения - форма, в которой необходимо обработать событие Нажатие;
//  Элемент                        - ЭлементУправления - элемент управления, на котором произвели нажатие мышкой;
//  НавигационнаяСсылкаЭлемента    - Строка - навигационная ссылка;
//  СтандартнаяОбработкаПлатформой - Булево - признак выполнения стандартной обработки.
//
Процедура ПанельКонтекстныхНовостей_ЭлементПанелиНовостейОбработкаНавигационнойСсылки(
			Форма,
			Элемент,
			НавигационнаяСсылкаЭлемента,
			СтандартнаяОбработкаПлатформой) Экспорт

	// В навигационной ссылке может быть ссылка на контекстную новость в специальном формате.

	ТипМассив    = Тип("Массив");
	ТипСтруктура = Тип("Структура");

	СтандартнаяОбработкаПлатформой = Ложь;

	СтандартнаяОбработкаПодсистемой = Истина;
	ИнтеграцияПодсистемБИПКлиент.ПанельКонтекстныхНовостей_ЭлементПанелиНовостейОбработкаНавигационнойСсылки(
		Форма,
		Элемент,
		НавигационнаяСсылкаЭлемента,
		СтандартнаяОбработкаПлатформой,
		СтандартнаяОбработкаПодсистемой);
	ОбработкаНовостейКлиентПереопределяемый.ПанельКонтекстныхНовостей_ЭлементПанелиНовостейОбработкаНавигационнойСсылки(
		Форма,
		Элемент,
		НавигационнаяСсылкаЭлемента,
		СтандартнаяОбработкаПлатформой,
		СтандартнаяОбработкаПодсистемой);

	Если СтандартнаяОбработкаПодсистемой <> Ложь Тогда

		Если СтрНайти(ВРег(НавигационнаяСсылкаЭлемента), ВРег("news1C:Open?")) >= 1 Тогда // Ссылка на новость
			Описатель = "news1C:Open?";
			ГдеОписатель = СтрНайти(ВРег(НавигационнаяСсылкаЭлемента), ВРег(Описатель));
			НомерНовости = Прав(НавигационнаяСсылкаЭлемента, СтрДлина(НавигационнаяСсылкаЭлемента) - ГдеОписатель - СтрДлина(Описатель) + 1);
			ФормаНовостиЭталон = Новый Структура;
				ФормаНовостиЭталон.Вставить("Новости"   , Неопределено);
				ФормаНовостиЭталон.Вставить("Метаданные", Неопределено);
				ФормаНовостиЭталон.Вставить("Форма"     , Неопределено);
			Если ТипЗнч(Форма.Новости) = ТипСтруктура Тогда
				ЗаполнитьЗначенияСвойств(ФормаНовостиЭталон, Форма.Новости);
			КонецЕсли;
			Если ТипЗнч(ФормаНовостиЭталон.Новости) = ТипМассив Тогда
				Для Каждого ТекущаяНовость Из ФормаНовостиЭталон.Новости Цикл
					Если ТипЗнч(ТекущаяНовость) <> ТипСтруктура Тогда
						Продолжить;
					КонецЕсли;
					ТекущаяНовостьЭталон = Новый Структура;
						ТекущаяНовостьЭталон.Вставить("НомерСтрокиНовости"     , Неопределено);
						ТекущаяНовостьЭталон.Вставить("Новость"                , Неопределено);
						ТекущаяНовостьЭталон.Вставить("НовостьНаименование"    , Неопределено);
						ТекущаяНовостьЭталон.Вставить("НовостьКодЛентыНовостей", Неопределено);
					ЗаполнитьЗначенияСвойств(ТекущаяНовостьЭталон, ТекущаяНовость);
					Если Строка(ТекущаяНовостьЭталон.НомерСтрокиНовости) = НомерНовости Тогда
						ПараметрыОткрытияФормы = Новый Структура;
						ПараметрыОткрытияФормы.Вставить("РежимОткрытияОкна", "БлокироватьОкноВладельца");
						ИнициаторОткрытияНовости = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							"КонтекстныеНовостиОткрытиеИзПанелиКонтекстныхНовостей/Метаданные=%1/Форма=%2", // Идентификатор.
							ФормаНовостиЭталон.Метаданные,
							ФормаНовостиЭталон.Форма);
						ПараметрыОткрытияФормы.Вставить("ИнициаторОткрытияНовости", ИнициаторОткрытияНовости);
						ПараметрыОткрытияФормы.Вставить("НовостьНаименование"     , ТекущаяНовостьЭталон.НовостьНаименование); // Заголовок новости.
						ПараметрыОткрытияФормы.Вставить("НовостьКодЛентыНовостей" , ТекущаяНовостьЭталон.НовостьКодЛентыНовостей); // Код ленты новостей.
						Уникальность = "";
						ПоказатьНовость(
							ТекущаяНовостьЭталон.Новость,
							ПараметрыОткрытияФормы,
							Форма,
							Уникальность);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли ВРег(НавигационнаяСсылкаЭлемента) = ВРег("news1C:Close") Тогда
			ПанельКонтекстныхНовостей_ИзменитьВидимость(Форма, Ложь);
		ИначеЕсли ВРег(НавигационнаяСсылкаЭлемента) = ВРег("news1C:Show") Тогда
			ПанельКонтекстныхНовостей_ИзменитьВидимость(Форма, Истина);
		ИначеЕсли ВРег(НавигационнаяСсылкаЭлемента) = ВРег("news1C:ShowList") Тогда
			КонтекстныеНовости_ОбработкаКомандыНовости(
				Форма,
				Новый Структура("Имя", "Команда_Новость_Список"));
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ФункциональныеОпции

// Функция возвращает результат - можно ли работать с новостями.
// Это результат функциональной опции "РазрешенаРаботаСНовостями"
//   И доступны нужные роли
//   И это не внешний пользователь.
//
// Возвращаемое значение:
//  Булево - ИСТИНА, если есть возможность работы с новостями.
//
Функция РазрешенаРаботаСНовостями() Экспорт

	Результат = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента().ИнтернетПоддержкаПользователей.Новости.РазрешенаРаботаСНовостями;

	Возврат Результат;

КонецФункции

// Функция возвращает результат - можно ли работать с новостями текущему пользователю.
// Это результат функциональной опции "РазрешенаРаботаСНовостями"
//   И доступны нужные роли
//   И это не внешний пользователь
//   И задан параметр сеанса ТекущийПользователь (т.е. мы не зашли в базу с отключенным списком пользователей).
//
// Возвращаемое значение:
//  Булево - ИСТИНА, если есть возможность работы с новостями текущему пользователю.
//
Функция РазрешенаРаботаСНовостямиТекущемуПользователю() Экспорт

	Результат = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента().ИнтернетПоддержкаПользователей.Новости.РазрешенаРаботаСНовостямиТекущемуПользователю;

	// Разрешено "отключать" подсистему, если она включена. Например, для работы "стартовых помощников".
	// Если же подсистема уже отключена, то запретить переопределение.
	Если Результат = Истина Тогда
		ИнтеграцияПодсистемБИПКлиент.РазрешенаРаботаСНовостямиТекущемуПользователю(Результат);
		ОбработкаНовостейКлиентПереопределяемый.РазрешенаРаботаСНовостямиТекущемуПользователю(Результат);
	КонецЕсли;

	Возврат (Результат = Истина);

КонецФункции

// Функция возвращает результат - можно ли работать с новостями через интернет.
// Это результат функциональной опции "РазрешенаРаботаСНовостямиЧерезИнтернет"
//   И доступны нужные роли
//   И это не внешний пользователь.
//
// Возвращаемое значение:
//  Булево - ИСТИНА, если разрешена работа с новостями через интернет, ЛОЖЬ, если можно работать только с локальными новостями.
//
Функция РазрешенаРаботаСНовостямиЧерезИнтернет() Экспорт

	Результат = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента().ИнтернетПоддержкаПользователей.Новости.РазрешенаРаботаСНовостямиЧерезИнтернет;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область РаботаСТекстомНовости

// Функция возвращает ХТМЛ или простой текст новости по ссылке на новость.
//
// Параметры:
//  Новости              - СправочникСсылка.Новости, Структура, Массив из СправочникСсылка.Новости - данные новости или списка новостей;
//  ПараметрыОтображения - Структура, Неопределено - параметры для отображения новости. Список возможных параметров:
//    * ОтображатьЗаголовок - Булево.
//
// Возвращаемое значение:
//  Строка - текст новости / новостей в формате HTML.
//
Функция ПолучитьХТМЛТекстНовостей(Новости, ПараметрыОтображения = Неопределено) Экспорт

	ТипМассив = Тип("Массив");

	Если ТипЗнч(Новости) = ТипМассив Тогда
		// ПовтИсп для массива - запрещено.
		Результат = ОбработкаНовостейВызовСервера.ПолучитьХТМЛТекстНовостей(Новости, ПараметрыОтображения);
	Иначе
		Результат = ОбработкаНовостейКлиентПовтИсп.ПолучитьХТМЛТекстНовостей(Новости, ПараметрыОтображения);
	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ПоискДанных

// Функция возвращает ссылку на ленту новостей по ее коду.
//
// Параметры:
//  ЛентаНовостейКод - Строка - код ленты новостей.
//
// Возвращаемое значение:
//   СправочникСсылка.ЛентыНовостей - ссылка на ленту новостей или пустая ссылка, если нет ленты новостей с таким кодом.
//
Функция ПолучитьЛентуНовостейПоКоду(ЛентаНовостейКод) Экспорт

	Результат = ОбработкаНовостейКлиентПовтИсп.ПолучитьЛентуНовостейПоКоду(ЛентаНовостейКод);

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ОбработчикиНовостейНаКлиенте

// Подключает необходимые для подсистемы Новости обработчики.
// Вызывается при подписке на событие ИнтеграцияПодсистемБИПКлиент.ПослеНачалаРаботыСистемы.
// Также необходимо вызывать после изменения значения, возвращаемого
//  ОбработкаНовостейКлиентПереопределяемый.РазрешенаРаботаСНовостямиТекущемуПользователю(Результат).
//
Процедура ПодключитьРаботуСНовостямиНаКлиенте() Экспорт

	// Подключение обработчика проверки новостей на клиенте.
	// В процедуре проверяется установка функциональной опции "РазрешенаРаботаСНовостями".
	ПодключитьОбработчикОповещенияОВажныхИОченьВажныхНовостях_ПервыйЗапуск();

	// Подключение обработчика оптимизации контекстных новостей, которые хранятся в кэше на клиенте
	//  (в случае, если в формах используется получение новостей не на сервере, а на клиенте).
	// В процедуре проверяется установка функциональной опции "РазрешенаРаботаСНовостями".
	ПодключитьОбработчикОптимизацииКонтекстныхНовостей();

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ПослеНачалаРаботыСистемы

// Процедура вызывается при подписке на событие - см. ИнтеграцияПодсистемБИПКлиент.ПослеНачалаРаботыСистемы.
// А все серверные вызовы теперь вызываются через подписку
//  на событие - см. ИнтеграцияПодсистемБИП.ПередЗапускомПрограммы.
//
Процедура ПослеНачалаРаботыСистемы() Экспорт

	// Подключить обработчики загрузки и оптимизации новостей.
	ПодключитьРаботуСНовостямиНаКлиенте();

КонецПроцедуры

#КонецОбласти

#Область ПолучениеНастроекКонфигурации

// Возвращает адрес команды открытия списка новостей.
// Если подсистема ИПП выключена из командного интерфейса, то вернуть
//   e1cib/command/Справочник.Новости.Команда.КомандаСписокНовостей.
// Если подсистема ИнтернетПоддержкаПользователей включена в командный интерфейс (хотя может быть и не видна), то вернуть
//   e1cib/navigationpoint/ИнтернетПоддержкаПользователей/Справочник.Новости.Команда.КомандаСписокНовостей.
// Так как наша система должна быть выключена из командного интерфейса, то всегда возвращать первый вариант.
// В случае внедрения в демобазу (когда подсистема включена в командный интерфейс), использовать:
//   Результат = "e1cib/navigationpoint/ИнтернетПоддержкаПользователей/Справочник.Новости.Команда.КомандаСписокНовостей";
//
// Возвращаемое значение
//  Строка - актуальный адрес команды открытия формы списка новостей.
//
Функция ПолучитьНавигационнуюСсылкуСпискаНовостей() Экспорт

	Результат = "e1cib/command/Справочник.Новости.Команда.КомандаСписокНовостей"; // Если подсистема НЕ внедрена в командный интерфейс

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ОбщегоНазначения

// Функция ищет первый элемент в списке значений по условиям.
//
// Параметры:
//  Список          - СписокЗначений - Список значений параметров;
//  ПараметрыПоиска - Структура - структура, описывающая условия поиска:
//    * ВариантПоиска - Строка - "ПоЗначению", "ПоПредставлению", "ПоПредставлениюБезУчетаРегистра";
//    * ЗначениеПоиска - Строка - Значение или представление, которое необходимо найти.
//
// Возвращаемое значение:
//   ЭлементСпискаЗначений - значение элемента списка значений, или Неопределено, если элемент не найден.
//
Функция НайтиЭлементСпискаЗначений(Список, ПараметрыПоиска) Экспорт

	ТипСписокЗначений = Тип("СписокЗначений");
	ТипСтруктура      = Тип("Структура");

	Результат = Неопределено;

	Если ТипЗнч(Список) <> ТипСписокЗначений Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если ТипЗнч(ПараметрыПоиска) <> ТипСтруктура Тогда
		Возврат Неопределено;
	КонецЕсли;

	ПараметрыПоискаЭталон = Новый Структура;
		ПараметрыПоискаЭталон.Вставить("ВариантПоиска" , "ПоЗначению");
		ПараметрыПоискаЭталон.Вставить("ЗначениеПоиска", Неопределено);
	ЗаполнитьЗначенияСвойств(ПараметрыПоискаЭталон, ПараметрыПоиска);

	Если ПараметрыПоискаЭталон.ЗначениеПоиска = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	ДопустимыеЗначенияВариантПоиска = Новый Массив;
		ДопустимыеЗначенияВариантПоиска.Добавить(ВРег("ПоЗначению"));
		ДопустимыеЗначенияВариантПоиска.Добавить(ВРег("ПоПредставлению"));
		ДопустимыеЗначенияВариантПоиска.Добавить(ВРег("ПоПредставлениюБезУчетаРегистра"));

	Если ДопустимыеЗначенияВариантПоиска.Найти(ВРег(ПараметрыПоискаЭталон.ВариантПоиска)) = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если ВРег(ПараметрыПоискаЭталон.ВариантПоиска) = ВРег("ПоЗначению") Тогда
		Результат = Список.НайтиПоЗначению(ПараметрыПоискаЭталон.ЗначениеПоиска);
	ИначеЕсли ВРег(ПараметрыПоискаЭталон.ВариантПоиска) = ВРег("ПоПредставлению") Тогда
		Для каждого ТекущийЭлементСписка Из Список Цикл
			Если ТекущийЭлементСписка.Представление = ПараметрыПоискаЭталон.ЗначениеПоиска Тогда
				Результат = ТекущийЭлементСписка;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ВРег(ПараметрыПоискаЭталон.ВариантПоиска) = ВРег("ПоПредставлениюБезУчетаРегистра") Тогда
		Для каждого ТекущийЭлементСписка Из Список Цикл
			Если ВРег(ТекущийЭлементСписка.Представление) = ВРег(ПараметрыПоискаЭталон.ЗначениеПоиска) Тогда
				Результат = ТекущийЭлементСписка;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Открывает форму управления настройками и обновлением новостей.
//
// Параметры:
//  Владелец - ФормаКлиентскогоПриложения - форма, которая будет установлена в качестве владельца.
//
Процедура НастройкаНовостей(Владелец) Экспорт
	
	ОткрытьФорму(
		"Обработка.УправлениеНовостями.Форма",
		,
		Владелец,
		"",
		,
		,
		,
		РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

// Возвращает список всех видов оповещений новостей.
//
// Возвращаемое значение:
//   Фиксированная структура.
//
Функция ВсеОповещения() Экспорт

	// АПК:1297-выкл Это идентификаторы.
	Результат = Новый Структура;
		Результат.Вставить("АктивизироватьПапкуОтбора"                  , "Новости. Активизировать папку отбора"); // Идентификатор.
		Результат.Вставить("АктивизироватьОткрытуюФормуСпискаНовостей"  , "Новости. Активизировать открытую форму списка новостей"); // Идентификатор.
		Результат.Вставить("ОткрытьФормуНастроек"                       , "Новости. Открыть форму настроек"); // Идентификатор.
		Результат.Вставить("ОткрытьФормуНастроекНастройкиЛентНовостей"  , "Новости. Открыть форму настроек / Ленты новостей"); // Идентификатор.
		Результат.Вставить("НовостьПрочтена"                            , "Новости. Новость прочтена"); // Идентификатор.
		Результат.Вставить("ПоказатьОповещение"                         , "Новости. Показать оповещение пользователю из списка новостей"); // Идентификатор.
		Результат.Вставить("ИзмененаПометкаСпискаНовостей"              , "Новости. Изменена пометка списка новостей"); // Идентификатор.
		Результат.Вставить("ИзмененаПрочтенностьСпискаНовостей"         , "Новости. Изменена прочтенность списка новостей"); // Идентификатор.
		Результат.Вставить("ИзмененаПометкаУдаления"                    , "Новости. Изменен признак удаления из списка новостей"); // Идентификатор.
		Результат.Вставить("ИзмененоСостояниеОповещенияНовости"         , "Новости. Изменено состояние оповещения о новости"); // Идентификатор.
		Результат.Вставить("ИзмененПризнакПрочитатьПозже"               , "Новости. Изменен признак Прочитать позже"); // Идентификатор.
		Результат.Вставить("ИзмененоСостояниеПодпискиНаЛентуНовостей"   , "Новости: Изменено состояние подписки на ленту новостей"); // Идентификатор.
		Результат.Вставить("ИзмененоСостояниеОповещенияЛентыНовостей"   , "Новости: Изменено состояние оповещений ленты новостей"); // Идентификатор.
		Результат.Вставить("ЗагруженыНовости"                           , "Новости. Загружены новости"); // Идентификатор.
		Результат.Вставить("ОбновленыНастройкиЧтенияНовостей"           , "Новости. Обновлены настройки чтения новостей"); // Идентификатор.
		Результат.Вставить("СкопированыВсеКатегории"                    , "Новости: скопированы все категории"); // Идентификатор.
		Результат.Вставить("ПослеЗаписиНовости"                         , "Новости: после записи новости"); // Идентификатор.
		Результат.Вставить("ОбновилсяСписокДляОтправкиНаСервер"         , "Новости: обновился список новостей для отправки на сервер новостного центра"); // Идентификатор.
		Результат.Вставить("ПослеЗаписиЛентыНовостей"                   , "Новости: после записи ленты новостей"); // Идентификатор.
		Результат.Вставить("КлассификаторыОбновлены"                    , "Новости. Обновились данные классификаторов новостей с сервера 1С"); // Идентификатор.
		Результат.Вставить("ОчищенаДатаПоследнейЗагрузкиНовостей"       , "Новости. Очищена дата последней загрузки новостей"); // Идентификатор.
		Результат.Вставить("ОчищенаДатаПоследнейЗагрузкиКлассификаторов", "Новости. Очищена дата последней загрузки классификатора"); // Идентификатор.
		Результат.Вставить("ИзменилсяСтатусОперации"                    , "Новости. Изменился статус операции"); // Идентификатор.
		Результат.Вставить("ОперацияЗавершена"                          , "Новости. Операция завершена"); // Идентификатор.
		Результат.Вставить("ПродолжитьАвтолистание"                     , "Новости. Продолжить автолистание в Панели контекстных новостей"); // Идентификатор.
		Результат.Вставить("ОтключитьАнимациюИконки"                    , "Новости. Выключить анимацию иконки в Панели контекстных новостей"); // Идентификатор.
		Результат.Вставить("СобратьИнформациюОбОкнах"                   , "Новости. Собрать информацию об открытых окнах"); // Идентификатор.
		Результат.Вставить("СкрытьПоказатьБлок"                         , "Новости. Скрыть показать блок"); // Идентификатор.
	// АПК:1297-вкл

	Возврат Новый ФиксированнаяСтруктура(Результат);

КонецФункции

// Проверяет наличие ключа по его значению в структуре.
//
// Параметры:
//  ВсеЭлементы - Структура, ФиксированнаяСтруктура - объект, где надо найти значение свойства по ключу;
//  Значение    - Строка - значение свойства.
//
// Возвращаемое значение:
//   Булево - Истина, если.найден ключ по строковому значению.
//
Функция ЕстьКлючПоЗначению(ВсеЭлементы, Значение) Экспорт

	Результат = Ложь;

	ТипЗнчВсеЭлементы = ТипЗнч(ВсеЭлементы);

	Если ТипЗнчВсеЭлементы <> Тип("ФиксированнаяСтруктура")
			И ТипЗнчВсеЭлементы <> Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;

	Для Каждого КлючЗначение Из ВсеЭлементы Цикл
		Если КлючЗначение.Значение = Значение Тогда // С тем же регистром, с точностью до символа.
			Результат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область Команды

// Открывает форму списка новостей. Если форма открыта, то не открывает заново.
// Вызывается из команд Справочник.Новости.Команды.*.
//
// Параметры:
//  ПараметрКоманды            - ПараметрКоманды, Неопределено - параметр для команды;
//  ПараметрыВыполненияКоманды - ПараметрыВыполненияКоманды, Структура - параметры выполнения, обязательные ключи:
//   * Источник;
//   * Уникальность;
//  ПараметрыОткрытияФормы     - Структура - параметры открытия формы;
//  ОткрыватьВсегда            - Булево - Ложь - если форма уже открыта, то не открывать.
//
Процедура ОткрытьСписокНовостей(ПараметрКоманды, ПараметрыВыполненияКоманды, ПараметрыОткрытияФормы, ОткрыватьВсегда) Экспорт

	Если НЕ РазрешенаРаботаСНовостямиТекущемуПользователю() Тогда
		Возврат;
	КонецЕсли;

	ИмяФормы = "Справочник.Новости.Форма.ФормаПросмотраНовостей"; // ИмяФормы

	Если ОткрыватьВсегда = Истина Тогда

		ОткрытьФорму(
			ИмяФормы,
			ПараметрыОткрытияФормы,
			ПараметрыВыполненияКоманды.Источник,
			ПараметрыВыполненияКоманды.Уникальность);

	Иначе

		// Вначале найти окно со списком новостей.
		ОкноЧтенияНовостейОткрыто = Ложь;
		СписокОткрытыхОкон = ПолучитьОкна();
		Для каждого ОткрытоеОкно Из СписокОткрытыхОкон Цикл
			// Если окно открыто на рабочем столе, то нельзя понять, открыто оно или нет
			Если (НЕ ОткрытоеОкно.Основное)
					И (НЕ ОткрытоеОкно.НачальнаяСтраница)
					И (ОткрытоеОкно.Содержимое.Количество() = 1)
					И (ТипЗнч(ОткрытоеОкно.Содержимое[0]) = Тип("ФормаКлиентскогоПриложения"))
					И (ОткрытоеОкно.Содержимое[0].ИмяФормы = ИмяФормы) Тогда
				ОкноЧтенияНовостейОткрыто = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;

		// Если окно чтения новостей не открыто, открыть его.
		Если ОкноЧтенияНовостейОткрыто = Ложь Тогда

			ИнтеграцияПодсистемБИПКлиент.ПереопределитьПараметрыОткрытияФормыСпискаНовостей(
				ИмяФормы,
				ПараметрыОткрытияФормы,
				ПараметрКоманды,
				ПараметрыВыполненияКоманды);
			ОбработкаНовостейКлиентПереопределяемый.ПереопределитьПараметрыОткрытияФормыСпискаНовостей(
				ИмяФормы,
				ПараметрыОткрытияФормы,
				ПараметрКоманды,
				ПараметрыВыполненияКоманды);

			Если ПараметрыВыполненияКоманды = Неопределено Тогда
				ОткрытьФорму(
					ИмяФормы,
					ПараметрыОткрытияФормы,
					Неопределено,
					""); // Уникальность
			Иначе
				ОткрытьФорму(
					ИмяФормы,
					ПараметрыОткрытияФормы,
					ПараметрыВыполненияКоманды.Источник,
					ПараметрыВыполненияКоманды.Уникальность);
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Обработчик команды Справочник.Новости.Команды.КомандаСписокНовостейДляРедактирования;
//
// Параметры:
//  ПараметрКоманды            - ПараметрКоманды, Неопределено - параметр для команды;
//  ПараметрыВыполненияКоманды - ПараметрыВыполненияКоманды, Структура - параметры выполнения, обязательные ключи:
//   * Источник;
//   * Уникальность.
//  ИсточникВызова             - Строка - Произвольный идентификатор.
//
Процедура ОткрытьСписокНовостейДляРедактирования(ПараметрКоманды, ПараметрыВыполненияКоманды, ИсточникВызова = "") Экспорт

	ИмяФормы = "Справочник.Новости.Форма.ФормаСпискаДляРедактирования"; // ИмяФормы

	ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("ИсточникВызова", ИсточникВызова);

	ОткрытьФорму(
		ИмяФормы,
		ПараметрыОткрытияФормы,
		Неопределено,
		""); // Уникальность

КонецПроцедуры

// Обработчик команды Справочник.Новости.Команды.КомандаСписокНовостей;
//
// Параметры:
//  ПараметрКоманды            - ПараметрКоманды, Неопределено - параметр для команды;
//  ПараметрыВыполненияКоманды - ПараметрыВыполненияКоманды, Структура - параметры выполнения, обязательные ключи:
//   * Источник;
//   * Уникальность.
//  ИсточникВызова             - Строка - Произвольный идентификатор.
//
Процедура ОткрытьСписокНовостейВсеНовости(ПараметрКоманды, ПараметрыВыполненияКоманды, ИсточникВызова = "") Экспорт

	ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("АктивироватьПапку_ВариантОтбора" , 0);
		ПараметрыОткрытияФормы.Вставить("АктивироватьПапку_ЗначениеОтбора", "");
		ПараметрыОткрытияФормы.Вставить("ИсточникВызова"                  , ИсточникВызова);

	ОткрытьСписокНовостей(ПараметрКоманды, ПараметрыВыполненияКоманды, ПараметрыОткрытияФормы, Истина);

КонецПроцедуры

// Обработчик команды Справочник.Новости.Команды.КомандаСписокВажныхНовостейТребующихПрочтения;
//
// Параметры:
//  ПараметрКоманды            - ПараметрКоманды, Неопределено - параметр для команды;
//  ПараметрыВыполненияКоманды - ПараметрыВыполненияКоманды, Структура - параметры выполнения, обязательные ключи:
//   * Источник;
//   * Уникальность.
//  ИсточникВызова             - Строка - Произвольный идентификатор.
//
Процедура ОткрытьСписокВажныхНовостейТребующихПрочтения(ПараметрКоманды, ПараметрыВыполненияКоманды, ИсточникВызова = "") Экспорт

	ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("АктивироватьПапку_ВариантОтбора" , 5);
		ПараметрыОткрытияФормы.Вставить("АктивироватьПапку_ЗначениеОтбора", "");
		ПараметрыОткрытияФормы.Вставить("ИсточникВызова"                  , ИсточникВызова);

	ОткрытьСписокНовостей(ПараметрКоманды, ПараметрыВыполненияКоманды, ПараметрыОткрытияФормы, Ложь);

	// Оповестить о фильтрации.
	// Сейчас Важные и Очень важные новости отображаются одинаково.
	Оповестить(
		ВсеОповещения().АктивизироватьПапкуОтбора, // Событие
		Новый Структура("ВариантОтбора, ЗначениеОтбора", // Параметры
			5,
			Неопределено), // ЗначениеОтбора не нужно, но для корректной обработки в "ОбработкаОповещения" нужно вставить пустое значение.
		Неопределено); // Источник.

КонецПроцедуры

// Обработчик команды Справочник.Новости.Команды.КомандаСписокОченьВажныхНовостейТребующихПрочтения;
//
// Параметры:
//  ПараметрКоманды            - ПараметрКоманды, Неопределено - параметр для команды;
//  ПараметрыВыполненияКоманды - ПараметрыВыполненияКоманды, Структура - параметры выполнения, обязательные ключи:
//   * Источник;
//   * Уникальность.
//  ИсточникВызова             - Строка - Произвольный идентификатор.
//
Процедура ОткрытьСписокОченьВажныхНовостейТребующихПрочтения(ПараметрКоманды, ПараметрыВыполненияКоманды, ИсточникВызова = "") Экспорт

	ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("АктивироватьПапку_ВариантОтбора" , 5);
		ПараметрыОткрытияФормы.Вставить("АктивироватьПапку_ЗначениеОтбора", "");
		ПараметрыОткрытияФормы.Вставить("ИсточникВызова"                  , ИсточникВызова);

	ОткрытьСписокНовостей(ПараметрКоманды, ПараметрыВыполненияКоманды, ПараметрыОткрытияФормы, Ложь);

	// Оповестить о фильтрации.
	// Сейчас Важные и Очень важные новости отображаются одинаково.
	Оповестить(
		ВсеОповещения().АктивизироватьПапкуОтбора, // Событие
		Новый Структура("ВариантОтбора, ЗначениеОтбора", // Параметры
			5,
			Неопределено), // ЗначениеОтбора не нужно, но для корректной обработки в "ОбработкаОповещения" нужно вставить пустое значение.
		Неопределено); // Источник.

КонецПроцедуры

// Обработчик команды Справочник.Новости.Команды.КомандаСписокПомеченныхНовостей;
//
// Параметры:
//  ПараметрКоманды            - ПараметрКоманды, Неопределено - параметр для команды;
//  ПараметрыВыполненияКоманды - ПараметрыВыполненияКоманды, Структура - параметры выполнения, обязательные ключи:
//   * Источник;
//   * Уникальность.
//  ИсточникВызова             - Строка - Произвольный идентификатор.
//
Процедура ОткрытьСписокПомеченныхНовостей(ПараметрКоманды, ПараметрыВыполненияКоманды, ИсточникВызова = "") Экспорт

	ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("АктивироватьПапку_ВариантОтбора" , 4);
		ПараметрыОткрытияФормы.Вставить("АктивироватьПапку_ЗначениеОтбора", "");
		ПараметрыОткрытияФормы.Вставить("ИсточникВызова"                  , ИсточникВызова);

	ОткрытьСписокНовостей(ПараметрКоманды, ПараметрыВыполненияКоманды, ПараметрыОткрытияФормы, Ложь);

	// Оповестить о фильтрации.
	Оповестить(
		ВсеОповещения().АктивизироватьПапкуОтбора, // Событие
		Новый Структура("ВариантОтбора, ЗначениеОтбора", // Параметры
			4,
			Неопределено), // ЗначениеОтбора не нужно, но для корректной обработки в "ОбработкаОповещения" нужно вставить пустое значение.
		Неопределено);

	// Вывести форму списка новостей на передний план
	Оповестить(
		ВсеОповещения().АктивизироватьОткрытуюФормуСпискаНовостей, // Событие
		Неопределено,
		Неопределено);

КонецПроцедуры

// Обработчик команды Справочник.Новости.Команды.КомандаСписокНовостейПрочитатьПозже;
//
// Параметры:
//  ПараметрКоманды            - ПараметрКоманды, Неопределено - параметр для команды;
//  ПараметрыВыполненияКоманды - ПараметрыВыполненияКоманды, Структура - параметры выполнения, обязательные ключи:
//   * Источник;
//   * Уникальность.
//  ИсточникВызова             - Строка - Произвольный идентификатор.
//
Процедура ОткрытьСписокНовостейПрочитатьПозже(ПараметрКоманды, ПараметрыВыполненияКоманды, ИсточникВызова = "") Экспорт

	ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("АктивироватьПапку_ВариантОтбора" , 6);
		ПараметрыОткрытияФормы.Вставить("АктивироватьПапку_ЗначениеОтбора", "");
		ПараметрыОткрытияФормы.Вставить("ИсточникВызова"                  , ИсточникВызова);

	ОткрытьСписокНовостей(ПараметрКоманды, ПараметрыВыполненияКоманды, ПараметрыОткрытияФормы, Ложь);

	// Оповестить о фильтрации.
	Оповестить(
		ВсеОповещения().АктивизироватьПапкуОтбора, // Событие
		Новый Структура("ВариантОтбора, ЗначениеОтбора", // Параметры
			6,
			Неопределено), // ЗначениеОтбора не нужно, но для корректной обработки в "ОбработкаОповещения" нужно вставить пустое значение.
		Неопределено);

	// Вывести форму списка новостей на передний план
	Оповестить(
		ВсеОповещения().АктивизироватьОткрытуюФормуСпискаНовостей, // Событие
		Неопределено,
		Неопределено);

КонецПроцедуры

// Обработчик команды Справочник.Новости.Команды.КомандаСписокНовостейНастройки;
//
// Параметры:
//  ПараметрКоманды            - ПараметрКоманды, Неопределено - параметр для команды;
//  ПараметрыВыполненияКоманды - ПараметрыВыполненияКоманды, Структура - параметры выполнения, обязательные ключи:
//   * Источник;
//   * Уникальность.
//  ПараметрыОткрытияФормы     - Структура - параметры открытия формы;
//  ИсточникВызова             - Строка - Произвольный идентификатор.
//
Процедура ОткрытьСписокНовостейНастройки(ПараметрКоманды, ПараметрыВыполненияКоманды, ПараметрыОткрытияФормы, ИсточникВызова = "") Экспорт

	Если НЕ РазрешенаРаботаСНовостямиТекущемуПользователю() Тогда
		Возврат;
	КонецЕсли;

	// Настройки сохраняются в самой форме настроек, но также передаются в виде структуры,
	//  чтобы повторно не считывать значения из базы данных.

	// Открыть форму настройки показа новостей.
	Если ТипЗнч(ПараметрыОткрытияФормы) <> Тип("Структура") Тогда
		ПараметрыОткрытияФормы = Новый Структура;
			ПараметрыОткрытияФормы.Вставить("Страница"      , "СтраницаЛентыНовостей");
			ПараметрыОткрытияФормы.Вставить("ЛентаНовостей" , Неопределено);
	КонецЕсли;
	ПараметрыОткрытияФормы.Вставить("ИсточникВызова", ИсточникВызова);

	ОткрытьФорму(
		"ХранилищеНастроек.НастройкиНовостей.Форма.ФормаНастройкиПоказаНовостей", // ИмяФормы
		ПараметрыОткрытияФормы, // Параметры
		ПараметрыВыполненияКоманды.Источник, // Владелец
		"", // Уникальность
		, // Окно
		, // НавигационнаяСсылка
		Неопределено, // ОписаниеОповещенияОЗакрытии
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); // РежимОткрытияОкна

КонецПроцедуры

#КонецОбласти

#Область ПослеНачалаРаботыСистемы

// Процедура переподключает обработчик проверки загруженных новостей (которые уже находятся в справочнике Новости).
//
Процедура ПодключитьОбработчикОповещенияОВажныхИОченьВажныхНовостях() Экспорт

	ОтключитьОбработчикОжидания("ПроверитьВажныеНовостиСВключеннымиНапоминаниями");

	Если НЕ РазрешенаРаботаСНовостямиТекущемуПользователю() Тогда
		Возврат;
	КонецЕсли;

	СтруктураНастроекПоказаНовостей = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента().ИнтернетПоддержкаПользователей.Новости.НастройкиПоказаНовостейНастроенныеАдминистратором;
	ИнтервалАвтообновленияСекунд = 60 * СтруктураНастроекПоказаНовостей.СписокНовостей_ИнтервалАвтообновления;
	ПодключитьОбработчикОжидания("ПроверитьВажныеНовостиСВключеннымиНапоминаниями", ИнтервалАвтообновленияСекунд, Ложь);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПослеНачалаРаботыСистемы

// Процедура переподключает обработчик проверки загруженных новостей (которые уже находятся в справочнике Новости).
// Эта процедура должна запускаться только при старте программы, потом она сама подключает
//  другой обработчик - ПодключитьОбработчикОповещенияОВажныхИОченьВажныхНовостях.
//
Процедура ПодключитьОбработчикОповещенияОВажныхИОченьВажныхНовостях_ПервыйЗапуск()

	ОтключитьОбработчикОжидания("ПроверитьВажныеНовостиСВключеннымиНапоминаниями_ПервыйЗапуск");

	Если НЕ РазрешенаРаботаСНовостямиТекущемуПользователю() Тогда
		Возврат;
	КонецЕсли;

	ТипЧисло        = Тип("Число");
	ТипСоответствие = Тип("Соответствие");

	ИнтервалСекунд = 2;
	ИнтеграцияПодсистемБИПКлиент.ПереопределитьВремяПервогоПоказаВажныхИОченьВажныхНовостейПриСтартеПрограммы(ИнтервалСекунд);
	ОбработкаНовостейКлиентПереопределяемый.ПереопределитьВремяПервогоПоказаВажныхИОченьВажныхНовостейПриСтартеПрограммы(ИнтервалСекунд);
	Если (ТипЗнч(ИнтервалСекунд) = ТипЧисло)
			И (ИнтервалСекунд > 0) Тогда
		// После первого показа новостей будет подключен обработчик ПодключитьОбработчикОповещенияОВажныхИОченьВажныхНовостях().
		// Если передан параметр запуска /C"ОтложитьПоказНовостей=ХХ;", то ИнтервалСекунд будет заменен на ХХ,
		//  где ХХ - число секунд, на которое необходимо отложить показ новостей.
		//  Если ХХ не в интервале от 2 до 999, то этот параметр запуска будет округлен до крайних значений интервала.
		ИдентификаторПараметраЗапускаНачало = "ОтложитьПоказНовостей="; // Идентификатор.
		ГдеНачало = СтрНайти(ВРег(ПараметрЗапуска), ВРег(ИдентификаторПараметраЗапускаНачало));
		Если ГдеНачало > 0 Тогда
			ГдеКонец = СтрНайти(ВРег(ПараметрЗапуска), ВРег(";"), , ГдеНачало);
			Если ГдеКонец > 0 Тогда
				ГдеНачалоЧисла = ГдеНачало + СтрДлина(ИдентификаторПараметраЗапускаНачало);
				ИнтервалСекундСтрокой = Сред(ПараметрЗапуска, ГдеНачалоЧисла, ГдеКонец - ГдеНачалоЧисла);
				Попытка
					ИнтервалСекундЧислом = Число(ИнтервалСекундСтрокой);
					Если ИнтервалСекундЧислом < 2 Тогда
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='Показ важных и очень важных новостей будет отложен на 2 секунды
								|(переданное в параметре значение %1 было увеличено до 2)'"),
							ИнтервалСекундЧислом);
						ПоказатьОповещениеПользователя(
							НСтр("ru='Изменено время первого показа новостей'"),
							,
							ТекстСообщения);
						ИнтервалСекундЧислом = 2;
					ИначеЕсли ИнтервалСекундЧислом > 999 Тогда
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='Показ важных и очень важных новостей будет отложен на 999 секунд
								|(переданное в параметре значение %1 было уменьшено до 999)'"),
							ИнтервалСекундЧислом);
						ПоказатьОповещениеПользователя(
							НСтр("ru='Изменено время первого показа новостей'"),
							,
							ТекстСообщения);
						ИнтервалСекундЧислом = 999;
					Иначе
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='Показ важных и очень важных новостей будет отложен на %1 секунд'"),
							ИнтервалСекундЧислом);
						ПоказатьОповещениеПользователя(
							НСтр("ru='Изменено время первого показа новостей'"),
							,
							ТекстСообщения);
					КонецЕсли;
					ИнтервалСекунд = ИнтервалСекундЧислом;
					// Этот интервал необходимо также сохранить в глобальной переменной, чтобы все остальные контекстные новости
					//  также откладывали показ.
					ВремяНачалаПоказаНовостей = ОбщегоНазначенияКлиент.ДатаСеанса() + ИнтервалСекунд;
					// ПараметрыПриложения - глобальная переменная.
					Если ТипЗнч(ПараметрыПриложения) <> ТипСоответствие Тогда
						ПараметрыПриложения = Новый Соответствие;
					КонецЕсли;
					ИмяПараметраПриложения = "ИнтернетПоддержкаПользователей.Новости.ВремяНачалаПоказаНовостей";
					ПараметрыПриложения.Вставить(ИмяПараметраПриложения, ВремяНачалаПоказаНовостей);
				Исключение
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Не удалось преобразовать параметр запуска (сдвиг показа новостей): %1.
							|Строка параметра: %2.
							|Необходимо указать время в секундах, от 2 до 999'"),
						ИнтервалСекундСтрокой,
						Сред(ПараметрЗапуска, ГдеНачало, ГдеКонец - ГдеНачало + 1));
					ПоказатьОповещениеПользователя(
						НСтр("ru='Ошибка изменения времени первого показа новостей'"),
						,
						ТекстСообщения);
				КонецПопытки;
			Иначе
				ТекстСообщения = НСтр("ru='Для сдвига показа важных и очень важных новостей,
					|необходимо в параметре запуска /C передать
					|ОтложитьПоказНовостей=ХХ;
					|где ХХ - число секунд от 2 до 999.
					|Параметр должен заканчиваться точкой с запятой.'");
				ПоказатьОповещениеПользователя(
					НСтр("ru='Ошибка изменения времени первого показа новостей'"),
					,
					ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
		ПодключитьОбработчикОжидания("ПроверитьВажныеНовостиСВключеннымиНапоминаниями_ПервыйЗапуск", ИнтервалСекунд, Истина);
	Иначе
		// Этот обработчик должен быть подключен в любом случае.
		ПодключитьОбработчикОповещенияОВажныхИОченьВажныхНовостях();
	КонецЕсли;

КонецПроцедуры

// Процедура переподключает обработчик оптимизации контекстных новостей
// (глобальная переменная ПараметрыПриложения["ИнтернетПоддержкаПользователей.Новости.КэшКонтекстныхНовостей"]).
//
Процедура ПодключитьОбработчикОптимизацииКонтекстныхНовостей()

	ОтключитьОбработчикОжидания("ОптимизацияВременногоХранилищаКонтекстныхНовостей");

	Если НЕ РазрешенаРаботаСНовостямиТекущемуПользователю() Тогда
		Возврат;
	КонецЕсли;

	ИнтервалАвтообновленияСекунд = 15 * 60; // 15 минут
	ПодключитьОбработчикОжидания("ОптимизацияВременногоХранилищаКонтекстныхНовостей", ИнтервалАвтообновленияСекунд, Ложь);

КонецПроцедуры

#КонецОбласти

#Область РаботаСПомеченнымиНовостями

// Процедура помечает несколько новостей пометкой (число 0..9, где 0 = нет пометки).
//
// Параметры:
//  МассивНовостей - Массив;
//  Пометка        - Число 0..9, где 0 - неотмеченная новость.
//
Процедура ИзменитьПометкуНовостей(МассивНовостей, Пометка = 1) Экспорт

	ОбработкаНовостейВызовСервера.ИзменитьПометкуНовостей(МассивНовостей, Пометка);

	Оповестить(
		ВсеОповещения().ИзмененаПометкаСпискаНовостей,
		Пометка,
		МассивНовостей);

КонецПроцедуры

#КонецОбласти

#Область РаботаСПризнакомПрочтенности

// Процедура изменяет признак прочтенности у новостей.
//
// Параметры:
//  МассивНовостей      - Массив;
//  ПризнакПрочтенности - Булево.
//
Процедура ИзменитьПризнакПрочтенностиНовостей(Знач МассивНовостей, ПризнакПрочтенности = Истина) Экспорт

	ОбработкаНовостейВызовСервера.ИзменитьПризнакПрочтенностиНовостей(МассивНовостей, ПризнакПрочтенности);

	Оповестить(
		ВсеОповещения().ИзмененаПрочтенностьСпискаНовостей, // Идентификатор.
		ПризнакПрочтенности,
		МассивНовостей);

КонецПроцедуры

#КонецОбласти

#Область РаботаСПризнакомУдаленияИзСписка

// Процедура изменяет для текущего пользователя признак удаления из списка у новостей.
// При вызове из неразделенного сеанса в модели сервиса будет ошибка.
//
// Параметры:
//  МассивНовостей          - Массив;
//  ПризнакУдаленияИзСписка - Булево.
//
Процедура ИзменитьПризнакУдаленияИзСпискаНовостей(Знач МассивНовостей, Знач ПризнакУдаленияИзСписка = Истина) Экспорт

	ОбработкаНовостейВызовСервера.ИзменитьПризнакУдаленияИзСпискаНовостей(МассивНовостей, ПризнакУдаленияИзСписка);

	Оповестить(
		ВсеОповещения().ИзмененаПометкаУдаления, // Идентификатор.
		ПризнакУдаленияИзСписка,
		МассивНовостей);

	// ////? Для помеченных на удаление новостей очистить кэш контекстных новостей.

КонецПроцедуры

#КонецОбласти

#Область РаботаСПризнакомПрочитатьПозже

// Процедура изменяет для текущего пользователя признак "ПрочитатьПозже".
// При вызове из неразделенного сеанса в модели сервиса будет ошибка.
//
// Параметры:
//  МассивНовостей - Массив;
//  ПрочитатьПозже - Булево.
//
Процедура ИзменитьПризнакПрочитатьПозже(Знач МассивНовостей, ПрочитатьПозже = Истина) Экспорт

	ОбработкаНовостейВызовСервера.ИзменитьПризнакПрочитатьПозже(МассивНовостей, ПрочитатьПозже);

	Оповестить(
		ВсеОповещения().ИзмененПризнакПрочитатьПозже, // Идентификатор.
		ПрочитатьПозже,
		МассивНовостей);

КонецПроцедуры

#КонецОбласти

#Область ПоискНовостей

// Выполняет полнотекстовый поиск по новостям. Возможна передача дополнительных параметров (период поиска и т.п.).
//
// Параметры:
//  СтруктураПараметровПоиска - Структура с ключами:
//    * СтрокПоиска - Строка;
//    * ПоискДатаОТ - Дата;
//    * ПоискДатаДО - Дата;
//    * НовостиОбластьПоиска - Неопределено, Массив из СправочникСсылка.Новости - массив ссылок на новости, в которых надо искать;
//        Если не заполнено, то поиск будет во всех новостях. Если передан массив ссылок на новости,
//         то поиск будет осуществляться только в этих новостях.
//        Имеет смысл заполнять для форм контекстных новостей, когда поиск осуществляется только среди уже отобранных новостей.
//
// Возвращаемое значение:
//  Массив из СправочникСсылка.Новости.
//
Функция НайтиНовости(СтруктураПараметровПоиска) Экспорт

	Результат = ОбработкаНовостейВызовСервера.НайтиНовости(СтруктураПараметровПоиска);

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ИнтерактивнаяРаботаСНовостью

// Функция ищет вверх по иерархии элемент (узел) с id="NewsEntry" и возвращает атрибут news_id.
//
// Параметры:
//  Узел               - COMObject - описание текущего узла;
//  ТекущаяВложенность - Число - Текущий уровень вложенности, уменьшается с каждый вложенным вызовом функции.
//
// Возвращаемое значение:
//   Строка - Идентификатор новости или пустая строка, если идентификатор не найден.
//
Функция НайтиУИННовостиХТМЛ(Узел, ТекущаяВложенность)

	Если ТекущаяВложенность <= 0 Тогда
		// Достигли предела поиска верха иерархии, но так и не нашли идентификатор новости.
		УИННовости = "";
	Иначе
		Если (Узел.parentElement <> Неопределено) Тогда
			Если (ВРег(Узел.parentElement.id) = ВРег("newsEntry")) Тогда
				// У родителя id = newsEntry, значит должен быть атрибут news_id.
				Атрибут = Узел.parentElement.attributes["news_id"];
				Если Атрибут <> Неопределено Тогда
					УИННовости = Атрибут.value;
				Иначе
					// Что-то пошло не так и не удалось получить атрибут news_id.
					УИННовости = "";
				КонецЕсли;
			Иначе
				УИННовости = НайтиУИННовостиХТМЛ(Узел.parentElement, ТекущаяВложенность - 1);
			КонецЕсли;
		Иначе
			// Достигли верха иерархии, но так и не нашли идентификатор новости.
			УИННовости = "";
		КонецЕсли;
	КонецЕсли;

	Возврат УИННовости;

КонецФункции

// Обработка нажатия на навигационную ссылку в форматированной строке - полном тексте новости.
//
// Параметры:
//  НовостьСсылка    - СправочникСсылка.Новости - Ссылка на новость;
//  Форма            - ФормаКлиентскогоПриложения - Форма-владелец, откуда вызывается обработчик;
//  Действие         - Строка;
//  СписокПараметров - СписокЗначений - произвольный список параметров.
//
// Возможные значения Действие и параметры:
// - Переход по навигационной ссылке:
//   - Необходим как минимум один параметр с именем "Навигационная ссылка";
//   - Остальные параметры будут проигнорированы.
// - Запуск процедуры с параметрами:
//   - Все параметры будут переданы как список значений в процедуру
//         ОбработкаНовостейКлиент.ОбработкаСобытия(СписокПараметров).
// - Открытие раздела справки:
//   - Необходим только один параметр с именем "Раздел справки";
//   - Остальные параметры будут проигнорированы.
// - Оповещение:
//   - Необходим как минимум один параметр "ИмяСобытия";
//   - Остальные параметры ("Параметр", "Источник") могут быть переданы списком значений.
// - Переход по интернет ссылке:
//   - Необходим как минимум один параметр "URL", могут быть переданы списком значений;
//   - Гиперссылки на web-ресурсы можно передавать в новости как обычный href="", но сама ссылка должна начинаться с http или https.
// - Открытие новости:
//   - Необходим как минимум один параметр "УИННовости";
//   - Если передать параметр "ЛентаНовостей" строкового типа, то он будет являться доп.условием для поиска новости по УИН,
//      то есть новость будет искаться в этой ленте новостей. Параметр описывает Код ленты новостей (английские буквы без пробелов).
//     Если также передать параметр "ИдентификаторМеста", то будет выполнена попытка не просто открыть новость, но и позиционироваться
//       на тэге с указанным идентификатором.
// - Показать картинку:
//   - Необходим как минимум один параметр "УИН" - идентификатор картинки из табличной части БинарныеДанные.
//
Процедура ОбработкаНавигационнойСсылки(НовостьСсылка, Форма, Действие, СписокПараметров) Экспорт

	Если Действие = "Переход по навигационной ссылке" Тогда // Идентификатор.
		// Возможно, передадут несколько ссылок - открыть их все.
		Для каждого ТекущийПараметр Из СписокПараметров Цикл
			Если ВРег(СокрЛП(ТекущийПараметр.Представление))=ВРег("Навигационная ссылка") Тогда
				Попытка
					ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(ТекущийПараметр.Значение);
				Исключение
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Произошла ошибка при обработке действия %1 с параметрами %2.
							|Подробная информация об ошибке:
							|%3'"),
						Действие,
						СписокПараметров,
						ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ОбработкаНовостейВызовСервера.ЗаписатьСообщениеВЖурналРегистрации(
						НСтр("ru='БИП:Новости.Клиент'", ОбщегоНазначенияКлиент.КодОсновногоЯзыка()), // ИмяСобытия.
						НСтр("ru='Новости. Клиент. ОбработкаНовостейКлиент. ОбработкаНавигационнойСсылки'", ОбщегоНазначенияКлиент.КодОсновногоЯзыка()), // ИдентификаторШага.
						"Ошибка", // УровеньЖурналаРегистрации строкой
						"", // ОбъектМетаданных строкой
						"", // Данные
						ТекстСообщения, // Комментарий
						ОбработкаНовостейКлиентПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;

	ИначеЕсли Действие = "Запуск процедуры с параметрами" Тогда
		ОбработкаСобытия(НовостьСсылка, Форма, СписокПараметров);

	ИначеЕсли Действие = "Оповещение" Тогда
		ИмяСобытия = "";
		Параметры = Новый СписокЗначений;
		Источники = Новый СписокЗначений;
		Для каждого ТекущийПараметр Из СписокПараметров Цикл
			Если ВРег(СокрЛП(ТекущийПараметр.Представление)) = ВРег("ИмяСобытия") Тогда
				// Имя события может быть только строковое. Если передали несколько значений, то взять последнее.
				ИмяСобытия = ТекущийПараметр.Значение;
			ИначеЕсли ВРег(СокрЛП(ТекущийПараметр.Представление)) = ВРег("Параметр") Тогда
				Параметры.Добавить(ТекущийПараметр.Значение);
			ИначеЕсли ВРег(СокрЛП(ТекущийПараметр.Представление)) = ВРег("Источник") Тогда
				Источники.Добавить(ТекущийПараметр.Значение);
			КонецЕсли;
		КонецЦикла;
		// Всегда добавлять уникальный идентификатор текущей формы.
		Источники.Добавить("УИНФормы=" + СокрЛП(Форма.УникальныйИдентификатор)); // Идентификатор.
		Оповестить(ИмяСобытия, Параметры, Источники);

	ИначеЕсли Действие = "Открытие раздела справки" Тогда
		// Возможно, передадут несколько ссылок - открыть их все.
		Для каждого ТекущийПараметр Из СписокПараметров Цикл
			Если ВРег(СокрЛП(ТекущийПараметр.Представление))=ВРег("Раздел справки") Тогда
				Попытка
					ОткрытьСправку(ТекущийПараметр.Значение);
				Исключение
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Произошла ошибка при обработке действия %1 с параметрами %2.
							|Подробная информация об ошибке:
							|%3'"),
						Действие,
						СписокПараметров,
						ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ОбработкаНовостейВызовСервера.ЗаписатьСообщениеВЖурналРегистрации(
						НСтр("ru='БИП:Новости.Клиент'", ОбщегоНазначенияКлиент.КодОсновногоЯзыка()), // ИмяСобытия.
						НСтр("ru='Новости. Клиент. ОбработкаНовостейКлиент. ОбработкаНавигационнойСсылки'", ОбщегоНазначенияКлиент.КодОсновногоЯзыка()), // ИдентификаторШага.
						"Ошибка", // УровеньЖурналаРегистрации строкой
						"", // ОбъектМетаданных строкой
						"", // Данные
						ТекстСообщения, // Комментарий
						ОбработкаНовостейКлиентПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;

	ИначеЕсли Действие = "Переход по интернет ссылке" Тогда
		// Возможно, передадут несколько ссылок - открыть их все.
		Для каждого ТекущийПараметр Из СписокПараметров Цикл
			Если ВРег(СокрЛП(ТекущийПараметр.Представление))=ВРег("URL") Тогда
				ПерейтиПоИнтернетСсылке(ТекущийПараметр.Значение);
			КонецЕсли;
		КонецЦикла;

	ИначеЕсли Действие = "Открытие новости" Тогда
		УИННовости         = "";
		ЛентаНовостейКод   = "";
		ИдентификаторМеста = "";
		Для каждого ТекущийПараметр Из СписокПараметров Цикл
			Если ВРег(СокрЛП(ТекущийПараметр.Представление))=ВРег("УИННовости") Тогда
				// УИН новости может быть только строковым. Если передали несколько значений, то взять последнее.
				УИННовости = ТекущийПараметр.Значение;
			ИначеЕсли ВРег(ТекущийПараметр.Представление) = ВРег("ЛентаНовостей") Тогда
				// Лента новостей может быть только строковой. Если передали несколько значений, то взять последнее.
				ЛентаНовостейКод = ТекущийПараметр.Значение;
			ИначеЕсли ВРег(ТекущийПараметр.Представление) = ВРег("ИдентификаторМеста") Тогда
				// ИдентификаторМеста может быть только строковый. Если передали несколько значений, то взять последнее.
				ИдентификаторМеста = ТекущийПараметр.Значение;
			КонецЕсли;
		КонецЦикла;
		СписокНовостей = ОбработкаНовостейВызовСервера.ПолучитьНовостиПоУИН(УИННовости, ЛентаНовостейКод);
		Для каждого ТекущаяНовость Из СписокНовостей Цикл
			ПараметрыОткрытияФормы = Новый Структура;
			Если НЕ ПустаяСтрока(ИдентификаторМеста) Тогда
				ПараметрыОткрытияФормы.Вставить("ИдентификаторМеста", ИдентификаторМеста);
			КонецЕсли;
			Если НЕ ТекущаяНовость.Значение.Пустая() Тогда
				ПараметрыОткрытияФормы.Вставить("ИнициаторОткрытияНовости",
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						"ДругаяНовость/ЛентаНовостей=%1/УИН=%2",
						ЛентаНовостейКод,
						УИННовости)); // Идентификатор.
				ПараметрыОткрытияФормы.Вставить("НовостьНаименование", СокрЛП(ТекущаяНовость.Значение)); // Заголовок новости.
				ПараметрыОткрытияФормы.Вставить("НовостьКодЛентыНовостей", ЛентаНовостейКод); // Код ленты новостей.
				ПоказатьНовость(
					ТекущаяНовость.Значение, // НовостьСсылка
					ПараметрыОткрытияФормы, // ПараметрыОткрытияФормы. БлокироватьОкноВладельца не нужно, т.к. неизвестно что будет за владелец
					       // и блокировать первое попавшееся окно неправильно.
					Форма, // ФормаВладелец
					Ложь); // Уникальность по-умолчанию (по ссылке)
			КонецЕсли;
		КонецЦикла;

	ИначеЕсли Действие = "Показать картинку" Тогда
		СписокУИНКартинок = Новый СписокЗначений;
		СписокКартинок = Новый СписокЗначений;
		Для каждого ТекущийПараметр Из СписокПараметров Цикл
			Если ВРег(СокрЛП(ТекущийПараметр.Представление)) = ВРег("УИН") Тогда
				// УИН картинки может быть только строковым.
				// Если передали несколько значений, то обработать их все.
				// Таким образом, может быть передано несколько параметров "УИН",
				//  а для каждого УИН может быть несколько картинок с таким УИН в табличной части БинарныеДанные,
				//  и необходимо отобразить все эти комбинации.
				СписокУИНКартинок.Добавить(ТекущийПараметр.Значение);
			ИначеЕсли ВРег(СокрЛП(ТекущийПараметр.Представление)) = ВРег("Картинка") Тогда
				Если ТекущийПараметр.Картинка.Вид <> ВидКартинки.Пустая Тогда
					СписокКартинок.Добавить(ТекущийПараметр.Значение, , , ТекущийПараметр.Картинка);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если (СписокУИНКартинок.Количество() > 0)
				ИЛИ (СписокКартинок.Количество() > 0) Тогда
			ИмяОткрываемойФормы = "Справочник.Новости.Форма.ФормаКартинки";
			ОткрытьФорму(
				ИмяОткрываемойФормы, // ИмяФормы
				Новый Структура("Ключ, СписокУИН, СписокКартинок",
					НовостьСсылка,
					СписокУИНКартинок,
					СписокКартинок), // Параметры
				Форма, // Владелец
				Ложь); // Уникальность, если Ложь - то уникальность по-умолчанию // НовостьСсылка
		КонецЕсли;

	Иначе
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Действие %1 с параметрами %2 не обрабатывается.'"),
			Действие,
			СписокПараметров);
		ОбработкаНовостейВызовСервера.ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Клиент'", ОбщегоНазначенияКлиент.КодОсновногоЯзыка()), // ИмяСобытия.
			НСтр("ru='Новости. Клиент. ОбработкаНовостейКлиент. ОбработкаНавигационнойСсылки'", ОбщегоНазначенияКлиент.КодОсновногоЯзыка()), // ИдентификаторШага.
			"Предупреждение", // УровеньЖурналаРегистрации строкой
			"", // ОбъектМетаданных строкой
			"", // Данные
			ТекстСообщения, // Комментарий
			ОбработкаНовостейКлиентПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
	КонецЕсли;

КонецПроцедуры

// Обработчик нажатия мышкой в тексте новости.
//
// Параметры:
//  Новости                        - ДанныеФормыСтруктура, СправочникСсылка.Новости, ДокументСсылка.Новости, СписокЗначений - Новость,
//                                    в которой произошло нажатие.
//                                   Если передано значение типа СписокЗначений (где Значение - СправочникСсылка.Новости,
//                                   ДокументСсылка.Новости, а представление - УИННовости), то определить,
//                                    к какой новости относится это нажатие.
//  ДанныеСобытия                  - COMОбъект - описатель события нажатия;
//  СтандартнаяОбработкаПлатформой - Булево - признак выполнения стандартной обработки нажатия платформой;
//  Форма                          - ФормаКлиентскогоПриложения - форма, в которой произошло нажатие;
//  ЭлементФормы                   - ЭлементыФормы - Элементы формы типа ПолеHTMLдокумента. // АПК:216 слово содержит и русские и английские символы.
//
Процедура ОбработкаНажатияВТекстеНовости(Новости, ДанныеСобытия, СтандартнаяОбработкаПлатформой, Форма, ЭлементФормы) Экспорт

	Перем Действие, СписокПараметров;

#Область Переопределение

	СтандартнаяОбработкаПодсистемой = Истина;
	ИнтеграцияПодсистемБИПКлиент.ОбработкаНажатияВТекстеНовости(
		Новости,
		ДанныеСобытия,
		Форма,
		ЭлементФормы,
		СтандартнаяОбработкаПлатформой,
		СтандартнаяОбработкаПодсистемой);
	ОбработкаНовостейКлиентПереопределяемый.ОбработкаНажатияВТекстеНовости(
		Новости,
		ДанныеСобытия,
		Форма,
		ЭлементФормы,
		СтандартнаяОбработкаПлатформой,
		СтандартнаяОбработкаПодсистемой);

	Если СтандартнаяОбработкаПодсистемой = Ложь Тогда
		Возврат;
	КонецЕсли;

#КонецОбласти

#Область ОпределениеСпискаНовостей

	ТипСписокЗначений = Тип("СписокЗначений");
	ТипСтрока         = Тип("Строка");

	Если ТипЗнч(Новости) = ТипСписокЗначений Тогда
		// Определить, в какой новости произошло нажатие на гиперссылку.
		УИННовости = "";
		// Допустим, что вложенность гиперссылки не более нескольких (допустим, 10) уровней.
		Если (ДанныеСобытия.Anchor <> Неопределено) Тогда
			УИННовости = НайтиУИННовостиХТМЛ(ДанныеСобытия.Anchor, 10);
		ИначеЕсли (ДанныеСобытия.Element <> Неопределено) Тогда
			УИННовости = НайтиУИННовостиХТМЛ(ДанныеСобытия.Element, 10);
		КонецЕсли;
		Если (ТипЗнч(УИННовости) = ТипСтрока)
				И (НЕ ПустаяСтрока(УИННовости)) Тогда
			Для Каждого ТекущийЭлементСписка Из Новости Цикл
				Если ВРег(ТекущийЭлементСписка.Представление) = ВРег(УИННовости) Тогда
					НовостьОбъект = ТекущийЭлементСписка.Значение;
					Прервать; // Новость найдена. Дальнейший поиск не нужен.
				КонецЕсли;
			КонецЦикла;
			Если НовостьОбъект.Пустая() Тогда
				// Не удалось определить, к какой новости относится нажатие мышкой, поэтому нельзя корректно отработать это нажатие.
				// Прервать дальнейшую обработку.
				СтандартнаяОбработкаПлатформой = Ложь;
				Возврат;
			КонецЕсли;
		Иначе
			// Не удалось определить, к какой новости относится нажатие мышкой, поэтому нельзя корректно отработать это нажатие.
			// Прервать дальнейшую обработку.
			СтандартнаяОбработкаПлатформой = Ложь;
			Возврат;
		КонецЕсли;
	Иначе // ДокументСсылка, СправочникСсылка, ДанныеФормыСтруктура
		НовостьОбъект = Новости;
	КонецЕсли;

#КонецОбласти

#Область АнализГиперссылки

	// Гиперссылка может быть:
	// - на внешний ресурс (http(s):);
	// - на внутренний ресурс (e1c:, e1cib/);
	// - на якорь внутри новости (#);
	// - специальная ссылка (1С:).
	// В зависимости от того, это тонкий клиент или веб-клиент, может различаться набор значений в ДанныеСобытия.Anchor.
	// Необходимо и в тонком и в веб-клиенте уметь переходить по всем таким ссылкам.

	СтандартнаяОбработкаПлатформой = Ложь;
	ОшибкиПереходаПоСсылке         = Новый Массив;
	ИнформацияПереходаПоСсылке     = Новый Массив;

	СтруктураГиперссылки = Новый Структура;
#Если ВебКлиент Тогда
		СтруктураГиперссылки.Вставить("ЭтоВебКлиент"             , Истина);
#Иначе
		СтруктураГиперссылки.Вставить("ЭтоВебКлиент"             , Ложь);
#КонецЕсли
		СтруктураГиперссылки.Вставить("Href"                     , "");
		СтруктураГиперссылки.Вставить("HrefБезBaseURI"           , "");
		СтруктураГиперссылки.Вставить("BaseURIИзСтрокиСоединения", Ложь);
		СтруктураГиперссылки.Вставить("BaseURI"                  , "");
		СтруктураГиперссылки.Вставить("BaseURIБезСлеша"          , "");
		СтруктураГиперссылки.Вставить("Hash"                     , ""); // Текст после # (якорь)
		СтруктураГиперссылки.Вставить("Host"                     , "");
		СтруктураГиперссылки.Вставить("ЭтоЯкорь"                 , Ложь);

	Если (ДанныеСобытия.Anchor <> Неопределено) Тогда

		ИнформацияПереходаПоСсылке.Добавить(НСтр("ru='Анализ Anchor'"));

		СтруктураГиперссылки.Hash = ДанныеСобытия.Anchor.hash; // Текст после # (якорь)
		СтруктураГиперссылки.Host = ДанныеСобытия.Anchor.host;

		Попытка
			BaseURI = ДанныеСобытия.Anchor.baseURI; // АПК:1353 Английский идентификатор.
		Исключение
			BaseURI = ""; // АПК:1353 Английский идентификатор.
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОшибкиПереходаПоСсылке.Добавить(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Ошибка получения BaseURI по причине:
						|%1'"),
					ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)));
		КонецПопытки;

		// В InternetExplorer BaseURI может быть = Неопределено.
		// В старых версиях платформы свойства BaseURI вообще может не быть.
		Если (BaseURI = Неопределено) ИЛИ ПустаяСтрока(BaseURI) Тогда // АПК:1353 Английский идентификатор.
			BaseURI = ""; // АПК:1353 Английский идентификатор.
			Если СтруктураГиперссылки.ЭтоВебКлиент = Истина Тогда
				ПараметрыСтрокиСоединения = СтроковыеФункцииКлиентСервер.ПараметрыИзСтроки(СтрокаСоединенияИнформационнойБазы());
				Если ПараметрыСтрокиСоединения.Свойство("ws") Тогда // АПК:1416 свойства может не существовать.
					BaseURI = ПараметрыСтрокиСоединения.ws; // АПК:1353 Английский идентификатор.
					СтруктураГиперссылки.BaseURIИзСтрокиСоединения = Истина;
				КонецЕсли;
			ИначеЕсли СтруктураГиперссылки.ЭтоВебКлиент = Ложь Тогда
				// Для файловой версии e1c:/filev/ПутьЧерезДробь или e1c:/file/ИмяБазы;
				// Для клиент-сервера: e1c://server/ИмяСервера/ИмяБазы.
				ПараметрыПодключения = ОбщегоНазначенияКлиентСервер.ПолучитьПараметрыПодключенияИзСтрокиСоединенияИнформационнойБазы(
					СтрокаСоединенияИнформационнойБазы());
				Если ПараметрыПодключения.ВариантРаботыИнформационнойБазы = 0 Тогда // Файловая
					КаталогИнформационнойБазы = ПараметрыПодключения.КаталогИнформационнойБазы;
					КаталогИнформационнойБазы = СтрЗаменить(КаталогИнформационнойБазы, ":\", "/");
					КаталогИнформационнойБазы = СтрЗаменить(КаталогИнформационнойБазы, "\", "/");
					Если НЕ СтрЗаканчиваетсяНа(КаталогИнформационнойБазы, "/") Тогда
						КаталогИнформационнойБазы = КаталогИнформационнойБазы + "/";
					КонецЕсли;
					BaseURI = "e1c://filev/" // АПК:1353 Английский идентификатор.
						+ КаталогИнформационнойБазы;
				Иначе // Клиент-сервер
					BaseURI = "e1c://server/" // АПК:1353 Английский идентификатор.
						+ ПараметрыПодключения.ИмяСервера1СПредприятия + "/"
						+ ПараметрыПодключения.ИмяИнформационнойБазыНаСервере1СПредприятия + "/";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		BaseURIБезСлеша = BaseURI;
		Если СтрЗаканчиваетсяНа(BaseURIБезСлеша, "/") Тогда
			СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(BaseURIБезСлеша, 1);
		КонецЕсли;

		// Возможно наличие "about:blank" в начале. Удалить "about:blank".
		Href = ДанныеСобытия.Anchor.Href; // АПК:1353 Английский идентификатор.
		СтрокаДляПоиска = "about:blank";
		Если СтрНачинаетсяС(НРег(Href), СтрокаДляПоиска) Тогда
			Href = Прав(Href, СтрДлина(Href) - СтрДлина(СтрокаДляПоиска)); // АПК:1353 Английский идентификатор.
			ИнформацияПереходаПоСсылке.Добавить(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Только ссылка без about:blank = %1'"),
					Href));
		КонецЕсли;

		// Некоторые гиперссылки дополняются спереди адресом базы (BaseURI),
		//  причем адрес базы может оканчиваться на "/".
		ЭтоВнутренняяСсылка = Ложь;
		HrefБезBaseURI = Href;
		Если (НЕ ПустаяСтрока(BaseURI))
				И (СтрНачинаетсяС(ВРег(HrefБезBaseURI), ВРег(BaseURI))) Тогда
			HrefБезBaseURI = Прав(HrefБезBaseURI, СтрДлина(HrefБезBaseURI) - СтрДлина(BaseURI));
			ЭтоВнутренняяСсылка = Истина;
		ИначеЕсли (НЕ ПустаяСтрока(BaseURIБезСлеша))
				И (СтрНачинаетсяС(ВРег(HrefБезBaseURI), ВРег(BaseURIБезСлеша))) Тогда
			HrefБезBaseURI = Прав(HrefБезBaseURI, СтрДлина(HrefБезBaseURI) - СтрДлина(BaseURIБезСлеша));
			ЭтоВнутренняяСсылка = Истина;
		КонецЕсли;
		// Если BaseURI был получен из строки соединения, то он не включает код языка.
		// Проверить наличие "/КодЯзыка/", и если есть, то удалить его.
		// Если ссылка внешняя (в ней отсутствует BaseURIБезСлеша), то не удалять ничего.
		Если (СтруктураГиперссылки.ЭтоВебКлиент = Истина)
				И (СтруктураГиперссылки.BaseURIИзСтрокиСоединения = Истина)
				И (ЭтоВнутренняяСсылка = Истина) Тогда
			ГдеРазделитель = СтрНайти(HrefБезBaseURI, "/", , 2); // Начинать искать со второго символа, т.к. может быть "/ru_RU/#Tag".
			Если ГдеРазделитель > 0 Тогда
				HrefБезBaseURI = Прав(HrefБезBaseURI, СтрДлина(HrefБезBaseURI) - ГдеРазделитель);
			КонецЕсли;
		КонецЕсли;

		СтруктураГиперссылки.Href            = Href;
		СтруктураГиперссылки.HrefБезBaseURI  = HrefБезBaseURI;
		СтруктураГиперссылки.BaseURI         = BaseURI;
		СтруктураГиперссылки.BaseURIБезСлеша = BaseURIБезСлеша;

		// Если host пустое, то это ссылка вида mailto: и т.п.
		Если ПустаяСтрока(СтруктураГиперссылки.Host) Тогда
			Если (СтрНачинаетсяС(ВРег(СтруктураГиперссылки.Href), ВРег("mailto:")))
					ИЛИ (СтрНачинаетсяС(ВРег(СтруктураГиперссылки.Href), ВРег("javascript:"))) Тогда // Специальная ссылка типа "mailto:" или "javascript:".
				СтандартнаяОбработкаПлатформой = Истина;
				Возврат;
			КонецЕсли;
		Иначе
			// Если HrefБезBaseURI пустой (для тонкого клиента старой версии платформы),
			//  или начинается с "#" (для веб-клиента или тонкого клиента новой версии платформы), и заполнен hash, то это только якорь.
			Если (СтруктураГиперссылки.ЭтоВебКлиент = Ложь)
					И (
						(ПустаяСтрока(СтруктураГиперссылки.HrefБезBaseURI))
						ИЛИ (СтрНачинаетсяС(СтруктураГиперссылки.HrefБезBaseURI, "#")))
					И (НЕ ПустаяСтрока(СтруктураГиперссылки.Hash)) Тогда
				СтруктураГиперссылки.ЭтоЯкорь = Истина;
			// Если HrefБезBaseURI пустой (для тонкого клиента), или начинается с "#" для веб-клиента, и заполнен hash, то это только якорь.
			ИначеЕсли (СтруктураГиперссылки.ЭтоВебКлиент = Истина)
					И (СтрНачинаетсяС(СтруктураГиперссылки.HrefБезBaseURI, "#"))
					И (НЕ ПустаяСтрока(СтруктураГиперссылки.Hash)) Тогда
				СтруктураГиперссылки.ЭтоЯкорь = Истина;
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли (ДанныеСобытия.Element <> Неопределено) Тогда

		ИнформацияПереходаПоСсылке.Добавить(НСтр("ru='Анализ Element'"));

		Если (ВРег(ДанныеСобытия.Element.tagName) = ВРег("area")) Тогда
			СтруктураГиперссылки.Href           = ДанныеСобытия.Element.Href;
			СтруктураГиперссылки.HrefБезBaseURI = ДанныеСобытия.Element.Href;
		Иначе
			СтандартнаяОбработкаПлатформой = Истина;
			Возврат;
		КонецЕсли;

	Иначе

		СтандартнаяОбработкаПлатформой = Истина;
		Возврат;

	КонецЕсли;

#КонецОбласти

#Область Переход

	ИнформацияПереходаПоСсылке.Добавить(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Структура гиперссылки:
				|%1'"),
			ОбработкаНовостейКлиентСервер.ПредставлениеЗначения(СтруктураГиперссылки, "=", Символы.ПС)));

	Если СтруктураГиперссылки.ЭтоЯкорь = Истина Тогда

		ЭлементЯкорь = Неопределено;
		ИдентификаторЭлемента = Прав(СтруктураГиперссылки.Hash, СтрДлина(СтруктураГиперссылки.Hash) - 1);
		Попытка
			ИнформацияПереходаПоСсылке.Добавить(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Попытка поиска элемента с идентификатором [%1]'"),
					ИдентификаторЭлемента));
			ЭлементЯкорь = ЭлементФормы.Документ.getElementById(ИдентификаторЭлемента);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОшибкиПереходаПоСсылке.Добавить(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Ошибка получения элемента якоря с идентификатором [%1] по причине:
						|%2'"),
					ИдентификаторЭлемента,
					ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)));
		КонецПопытки;

		Если ЭлементЯкорь <> Неопределено Тогда
			Попытка
				ИнформацияПереходаПоСсылке.Добавить(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Попытка перехода к элементу с идентификатором [%1]'"),
						ИдентификаторЭлемента));
				// Не все браузеры поддерживают метод scrollIntoView, наличие которого нет возможности проверить заранее.
				ЭлементЯкорь.scrollIntoView(Истина); // Не все браузеры поддерживают этот метод.
				Если ДанныеСобытия.Event.ctrlKey = Истина Тогда // Был нажат Ctrl.
					// Отображать элемент сверху экрана.
					ЭлементЯкорь.scrollIntoView(Ложь); // Не все браузеры поддерживают этот метод.
				КонецЕсли;
			Исключение
				// Не все браузеры поддерживают метод scrollIntoView, наличие которого нет возможности проверить заранее.
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ОшибкиПереходаПоСсылке.Добавить(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Ошибка перехода к якорю с идентификатором [%1] по причине:
							|%2'"),
						ИдентификаторЭлемента,
						ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)));
			КонецПопытки;
		КонецЕсли;

	Иначе

		Если СтрНачинаетсяС(ВРег(СтруктураГиперссылки.HrefБезBaseURI), ВРег("http")) Тогда
			ПерейтиПоИнтернетСсылке(СтруктураГиперссылки.HrefБезBaseURI);
			СтандартнаяОбработкаПлатформой = Ложь;
		ИначеЕсли СтрНачинаетсяС(ВРег(СтруктураГиперссылки.HrefБезBaseURI), ВРег("e1c://")) Тогда
			ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(СтруктураГиперссылки.HrefБезBaseURI);
			СтандартнаяОбработкаПлатформой = Ложь;
		ИначеЕсли СтрНачинаетсяС(ВРег(СтруктураГиперссылки.HrefБезBaseURI), ВРег("e1cib/")) Тогда
			ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(СтруктураГиперссылки.HrefБезBaseURI);
			СтандартнаяОбработкаПлатформой = Ложь;
		ИначеЕсли СтрНачинаетсяС(ВРег(СтруктураГиперссылки.HrefБезBaseURI), ВРег("1C:")) Тогда // 1C - "С" - английская
			// Запустить ОбработкаНавигационнойСсылки с параметрами.
			// При открытии из формы элемента справочника / документа.
			ОбработкаНовостейВызовСервера.ПодготовитьПараметрыНавигационнойСсылки(НовостьОбъект, СтруктураГиперссылки.HrefБезBaseURI, Действие, СписокПараметров);
			Если ТипЗнч(НовостьОбъект) = Тип("СправочникСсылка.Новости") Тогда
				ОбработкаНавигационнойСсылки(НовостьОбъект, Форма, Действие, СписокПараметров);
			Иначе
				ОбработкаНавигационнойСсылки(НовостьОбъект.Ссылка, Форма, Действие, СписокПараметров);
			КонецЕсли;
			СтандартнаяОбработкаПлатформой = Ложь;
		Иначе
			СтандартнаяОбработкаПлатформой = Истина;
			Возврат;
		КонецЕсли;

	КонецЕсли;

#КонецОбласти

#Область ОбработкаОшибок

	Если ОшибкиПереходаПоСсылке.Количество() > 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Произошла ошибка при переходе по ссылке [%1].
				|Подробная информация об ошибке:
				|%2
				|
				|%3'"),
			СтруктураГиперссылки.Href,
			СтрСоединить(ОшибкиПереходаПоСсылке, Символы.ПС),
			СтрСоединить(ИнформацияПереходаПоСсылке, Символы.ПС));
		ОбработкаНовостейВызовСервера.ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Клиент'", ОбщегоНазначенияКлиент.КодОсновногоЯзыка()), // ИмяСобытия.
			НСтр("ru='Новости. Клиент. ОбработкаНовостейКлиент. ПерейтиПоИнтернетСсылке'", ОбщегоНазначенияКлиент.КодОсновногоЯзыка()), // ИдентификаторШага.
			"Ошибка", // УровеньЖурналаРегистрации строкой
			"", // ОбъектМетаданных строкой
			СтруктураГиперссылки.Href, // Данные
			ТекстСообщения, // Комментарий
			ОбработкаНовостейКлиентПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
	КонецЕсли;

#КонецОбласти

КонецПроцедуры

#КонецОбласти

#Область ОбработкаОповещений

// Обработчик оповещения в формах показа новостей.
// Как правило, используется для интерактивной обработки представления новости в случае срабатывания действий новости типа "Оповещение".
//
// Параметры:
//  ИмяСобытия - Строка - произвольные параметры;
//  Параметр   - СписокЗначений - произвольные параметры;
//  Источник   - СписокЗначений - произвольные параметры;
//  Форма      - ФормаКлиентскогоПриложения - форма, в которой произошло оповещение.
//
Процедура ПросмотрНовости_ОбработкаОповещения(ИмяСобытия, Параметр, Источник, Форма) Экспорт

	СтандартнаяОбработка = Истина;

	ВсеОповещения = ВсеОповещения();

	// Событие не имеет отношения к новостям.
	Если НЕ ЕстьКлючПоЗначению(ВсеОповещения, ИмяСобытия) Тогда
		Возврат;
	КонецЕсли;

	Если НЕ РазрешенаРаботаСНовостямиТекущемуПользователю() Тогда
		Возврат;
	КонецЕсли;

	// Подготовим список объектов ДокументHTML:
	МассивДокументовХТМЛ = Новый Массив;
	Если Форма.ИмяФормы = "Справочник.Новости.Форма.ФормаДокумента" Тогда
		МассивДокументовХТМЛ.Добавить(Форма.Элементы.ПримерНовостиДляВнешнихИсточников.Документ);
		МассивДокументовХТМЛ.Добавить(Форма.Элементы.ПримерНовостиДля1С.Документ);
	ИначеЕсли Форма.ИмяФормы = "Справочник.Новости.Форма.ФормаНовостей" Тогда
		МассивДокументовХТМЛ.Добавить(Форма.Элементы.ТекстНовостей.Документ);
	ИначеЕсли Форма.ИмяФормы = "Справочник.Новости.Форма.ФормаНовостейСоСписком" Тогда
		МассивДокументовХТМЛ.Добавить(Форма.Элементы.ТекстНовости.Документ);
	ИначеЕсли Форма.ИмяФормы = "Справочник.Новости.Форма.ФормаНовости" Тогда
		МассивДокументовХТМЛ.Добавить(Форма.Элементы.ТекстНовости.Документ);
	ИначеЕсли Форма.ИмяФормы = "Справочник.Новости.Форма.ФормаПросмотраНовостей" Тогда
		МассивДокументовХТМЛ.Добавить(Форма.Элементы.ТекстНовостиХТМЛ.Документ);
	Иначе
		// Для остальных форм массив документов ХТМЛ останется пустым.
	КонецЕсли;

	ИнтеграцияПодсистемБИПКлиент.ПросмотрНовости_ОбработкаОповещения(
		ИмяСобытия,
		Параметр,
		Источник,
		Форма,
		МассивДокументовХТМЛ,
		СтандартнаяОбработка);
	ОбработкаНовостейКлиентПереопределяемый.ПросмотрНовости_ОбработкаОповещения(
		ИмяСобытия,
		Параметр,
		Источник,
		Форма,
		МассивДокументовХТМЛ,
		СтандартнаяОбработка);

	ТипСписокЗначений = Тип("СписокЗначений");

	Если СтандартнаяОбработка <> Истина Тогда
		Возврат;
	КонецЕсли;

	Если ИмяСобытия = ВсеОповещения.СкрытьПоказатьБлок Тогда // Идентификатор.
		// Собрать остальные параметры.
		// Для показа / скрытия блока в HTML необходимы следующие настройки:
		// Параметры:
		// - УИНБлока         - обязательная настройка;
		// - УИНМаркера       - необязательная настройка;
		// - МаркерРазвернуто - необязательная настройка;
		// - МаркерСвернуто   - необязательная настройка;
		// Источник:
		// - УИНФормы         - обязательная настройка.
		// Все настройки записываются в списке значений в Значении. В представлении пишется имя параметра.
		// Надо последовательно найти форму по идентификатору. В форме (в зависимости от ее имени) определить поле HTML документа.
		// А далее оперировать Документом HTML:
		// - найти элемент УИНБлока по идентификатору. Потом переключить класс найденного элемента (с "hidden" на "" и наоборот).
		// - при наличии элемента УИНМаркера установить ему текст.
		УИНБлока         = "";
		УИНМаркера       = "";
		МаркерРазвернуто = "";
		МаркерСвернуто   = "";
		УИНФормы         = "";
		Если ТипЗнч(Источник) = ТипСписокЗначений Тогда
			Для Каждого ТекущийЭлементСписка Из Источник Цикл
				Если СтрНачинаетсяС(ВРег(ТекущийЭлементСписка.Значение), ВРег("УИНФормы=")) Тогда
					УИНФормы = Прав(ТекущийЭлементСписка.Значение, СтрДлина(ТекущийЭлементСписка.Значение) - 9);
					Попытка
						УИНФормы = Новый УникальныйИдентификатор(УИНФормы);
					Исключение
						УИНФормы = Неопределено;
					КонецПопытки;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если Форма.УникальныйИдентификатор = УИНФормы Тогда
			Если ТипЗнч(Параметр) = ТипСписокЗначений Тогда
				Для Каждого ТекущийЭлементСписка Из Параметр Цикл
					Если СтрНачинаетсяС(ВРег(ТекущийЭлементСписка.Значение), ВРег("УИНБлока=")) Тогда
						УИНБлока = Прав(ТекущийЭлементСписка.Значение, СтрДлина(ТекущийЭлементСписка.Значение) - 9);
					ИначеЕсли СтрНачинаетсяС(ВРег(ТекущийЭлементСписка.Значение), ВРег("УИНМаркера=")) Тогда
						УИНМаркера = Прав(ТекущийЭлементСписка.Значение, СтрДлина(ТекущийЭлементСписка.Значение) - 11);
					ИначеЕсли СтрНачинаетсяС(ВРег(ТекущийЭлементСписка.Значение), ВРег("МаркерРазвернуто=")) Тогда
						МаркерРазвернуто = Прав(ТекущийЭлементСписка.Значение, СтрДлина(ТекущийЭлементСписка.Значение) - 17);
					ИначеЕсли СтрНачинаетсяС(ВРег(ТекущийЭлементСписка.Значение), ВРег("МаркерСвернуто=")) Тогда
						МаркерСвернуто = Прав(ТекущийЭлементСписка.Значение, СтрДлина(ТекущийЭлементСписка.Значение) - 15);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если МассивДокументовХТМЛ.Количество() > 0 Тогда
				Если НЕ ПустаяСтрока(УИНБлока) Тогда
					Для Каждого ТекущийДокументХТМЛ Из МассивДокументовХТМЛ Цикл
						ЭлементРаздел = ТекущийДокументХТМЛ.getElementById(УИНБлока);
						Если ЭлементРаздел <> Неопределено Тогда
							СтароеИмяКласса = ЭлементРаздел.className;
							Если ВРег(СтароеИмяКласса) = ВРег("hidden") Тогда
								НовоеИмяКласса = "";
							Иначе
								НовоеИмяКласса = "hidden";
							КонецЕсли;
							ЭлементРаздел.className = НовоеИмяКласса;
							// Если введен идентификатор раздела маркера состояния, то установить ему значение текущего состояния.
							Если НЕ ПустаяСтрока(УИНМаркера) Тогда
								ЭлементРаздел = ТекущийДокументХТМЛ.getElementById(УИНМаркера);
								Если ЭлементРаздел <> Неопределено Тогда
									Если НовоеИмяКласса = "hidden" Тогда // Сейчас - скрыто.
										ЭлементРаздел.innerHTML = МаркерСвернуто;
									Иначе // Сейчас - раскрыто.
										ЭлементРаздел.innerHTML = МаркерРазвернуто;
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область РазныеПроцедурыИФункции

// Процедура выполняет переход по интернет ссылке (http, https).
// Если эта ссылка ведет на сайт с поддержкой авторизации ВебИТС,
//  то организовать переход таким образом. чтобы пользователю не пришлось повторно вводить логин / пароль.
//
// Параметры:
//  ИнтернетСсылка - Строка - URL, по которому необходимо перейти.
//
Процедура ПерейтиПоИнтернетСсылке(ИнтернетСсылка) Экспорт

	// ////? Определить, поддерживает ли сайт возможность авторизации (по логину/хэшу пароля или по идентификатору сессии).
	// Если сайт поддерживает пре-авторизацию (чтобы окно логина не выскакивало при переходе по ссылке),
	//  то пройти процедуру авторизации предварительно и передать сайту только служебную информацию.

	// Если необходимо динамически подставлять utm-метки и другие параметры для URL,
	//  то это лучше делать на сервере следующими процедурами процедурами:
	// - ОбработкаНовостейПереопределяемый.ДополнительноОбработатьТекстНовостиПередПоказом;
	// - ОбработкаНовостейПереопределяемый.ДополнительноОбработатьТекстСпискаНовостейПередПоказом.

	Попытка
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(ИнтернетСсылка);
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Произошла ошибка при переходе по ссылке %1.
				|Подробная информация об ошибке:
				|%2'"),
			ИнтернетСсылка,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбработкаНовостейВызовСервера.ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Клиент'", ОбщегоНазначенияКлиент.КодОсновногоЯзыка()), // ИмяСобытия.
			НСтр("ru='Новости. Клиент. ОбработкаНовостейКлиент. ПерейтиПоИнтернетСсылке'", ОбщегоНазначенияКлиент.КодОсновногоЯзыка()), // ИдентификаторШага.
			"Ошибка", // УровеньЖурналаРегистрации строкой
			"", // ОбъектМетаданных строкой
			ИнтернетСсылка, // Данные
			ТекстСообщения, // Комментарий
			ОбработкаНовостейКлиентПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
	КонецПопытки;

КонецПроцедуры

// Функция возвращает описание оповещения открытия файла по его имени.
// Можно пользоваться для формирования гиперссылок открытия файла в окне показа оповещений пользователю.
//
// Параметры:
//  ПолноеИмяФайла - Строка - Полное имя файла, который необходимо открыть;
//  СпособОткрытия - Строка - Способ открытия файла, возможные значения:
//   * СредствамиОС - будет вызвано НачатьЗапускПриложения, но может быть ошибка о том. что нет соответствия расширению файла;
//   * КакТекстВ1С  - файл будет открыт как текстовый документ в 1С.
//
// Возвращаемое значение:
//   ОписаниеОповещения - указатель на функцию, открывающую файл.
//
Функция ПолучитьДействиеОткрытияФайла(ПолноеИмяФайла, СпособОткрытия) Экспорт

	ЛокальныйСпособОткрытия = СпособОткрытия;
	Если ВРег(СпособОткрытия) = ВРег("КакТекстВ1С") Тогда
		ЛокальныйСпособОткрытия = "КакТекстВ1С"; // Идентификатор.
	Иначе
		ЛокальныйСпособОткрытия = "СредствамиОС"; // Идентификатор.
	КонецЕсли;

	ДополнительныеПараметры = Новый Структура("ПолноеИмяФайла, СпособОткрытия",
		СокрЛП(ПолноеИмяФайла),
		ЛокальныйСпособОткрытия);

	Результат = Новый ОписаниеОповещения(
		"ПриВыбореФайла",
		ЭтотОбъект,
		ДополнительныеПараметры);

	Возврат Результат;

КонецФункции

// Процедура открывает файл средствами операционной системы или в 1С как текстовый документ.
//
// Параметры:
//  ДополнительныеПараметры - Структура - структура с ключами:
//   * ПолноеИмяФайла - Строка - Полное имя файла, который необходимо открыть.
//   * СпособОткрытия - Строка - Способ открытия файла, возможные значения:
//     ** СредствамиОС - будет вызвано НачатьЗапускПриложения, но может быть ошибка о том. что нет соответствия расширению файла;
//     ** КакТекстВ1С  - файл будет открыт как текстовый документ в 1С.
//
Процедура ПриВыбореФайла(ДополнительныеПараметры) Экспорт

	#Если НЕ ВебКлиент И НЕ МобильныйКлиент Тогда

	ТипСтруктура = Тип("Структура");
	ТипСтрока    = Тип("Строка");

	ДополнительныеПараметрыЭталон = Новый Структура;
		ДополнительныеПараметрыЭталон.Вставить("ПолноеИмяФайла", Неопределено);
		ДополнительныеПараметрыЭталон.Вставить("СпособОткрытия", Неопределено);
	Если ТипЗнч(ДополнительныеПараметры) = ТипСтруктура Тогда
		ЗаполнитьЗначенияСвойств(ДополнительныеПараметрыЭталон, ДополнительныеПараметры);
	Иначе
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ДополнительныеПараметрыЭталон.ПолноеИмяФайла) <> ТипСтрока
			ИЛИ ПустаяСтрока(ДополнительныеПараметрыЭталон.ПолноеИмяФайла) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ДополнительныеПараметрыЭталон.СпособОткрытия) <> ТипСтрока
			ИЛИ ПустаяСтрока(ДополнительныеПараметрыЭталон.СпособОткрытия) Тогда
		Возврат;
	КонецЕсли;

	Если ВРег(ДополнительныеПараметрыЭталон.СпособОткрытия) = ВРег("КакТекстВ1С") Тогда
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ДополнительныеПараметрыОткрытияФайла = Новый Структура;
		ДополнительныеПараметрыОткрытияФайла.Вставить("ЗаголовокОкна"    , ДополнительныеПараметрыЭталон.ПолноеИмяФайла);
		ДополнительныеПараметрыОткрытияФайла.Вставить("ПолноеИмяФайла"   , ДополнительныеПараметрыЭталон.ПолноеИмяФайла);
		ДополнительныеПараметрыОткрытияФайла.Вставить("ТекстовыйДокумент", ТекстовыйДокумент);
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПриПоказеФайла",
			ЭтотОбъект,
			ДополнительныеПараметрыОткрытияФайла);
		ТекстовыйДокумент.НачатьЧтение(ОписаниеОповещения, ДополнительныеПараметрыЭталон.ПолноеИмяФайла, "UTF-8", Символы.ПС);
	Иначе
		ФайловаяСистемаКлиент.ОткрытьФайл(ДополнительныеПараметрыЭталон.ПолноеИмяФайла);
	КонецЕсли;

	#КонецЕсли

КонецПроцедуры

// Процедура открывает файл средствами 1С как текстовый документ.
//
// Параметры:
//  ДополнительныеПараметры - Структура - структура с ключами:
//   * ПолноеИмяФайла - Строка - Полное имя файла, который необходимо открыть;
//   * ЗаголовокОкна  - Строка - Заголовок окна, в котором надо открыть текстовый файл.
//
Процедура ПриПоказеФайла(ДополнительныеПараметры) Экспорт

	ТипСтруктура = Тип("Структура");
	ТипСтрока    = Тип("Строка");
	ТипТекст     = Тип("ТекстовыйДокумент");

	ДополнительныеПараметрыЭталон = Новый Структура;
		ДополнительныеПараметрыЭталон.Вставить("ТекстовыйДокумент", Неопределено);
		ДополнительныеПараметрыЭталон.Вставить("ЗаголовокОкна"    , Неопределено);
		ДополнительныеПараметрыЭталон.Вставить("ПолноеИмяФайла"   , Неопределено);
	Если ТипЗнч(ДополнительныеПараметры) = ТипСтруктура Тогда
		ЗаполнитьЗначенияСвойств(ДополнительныеПараметрыЭталон, ДополнительныеПараметры);
	Иначе
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ДополнительныеПараметрыЭталон.ТекстовыйДокумент) <> ТипТекст Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ДополнительныеПараметрыЭталон.ЗаголовокОкна) <> ТипСтрока Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ДополнительныеПараметрыЭталон.ПолноеИмяФайла) <> ТипСтрока Тогда
		Возврат;
	КонецЕсли;

	ДополнительныеПараметрыЭталон.ТекстовыйДокумент.Показать(
		ДополнительныеПараметрыЭталон.ЗаголовокОкна, // Заголовок.
		ДополнительныеПараметрыЭталон.ПолноеИмяФайла); // Имя файла.

КонецПроцедуры

#КонецОбласти

#Область ИнтерактивныеДействия

// Процедура выполняет интерактивные действия, которые невозможно выполнить на сервере - оповещения и т.п.
//
// Параметры:
//  МассивДействий - Массив.
//
Процедура ВыполнитьИнтерактивныеДействия(МассивДействий) Экспорт

	ТипМассив    = Тип("Массив");
	ТипСтруктура = Тип("Структура");

	Если ТипЗнч(МассивДействий) = ТипМассив Тогда
		Для каждого ТекущееДействие Из МассивДействий Цикл

			ПропуститьПереопределение = Ложь;

			Если ТипЗнч(ТекущееДействие) <> ТипСтруктура Тогда
				Продолжить;
			КонецЕсли;

			ТекущееДействиеЭталон = Новый Структура;
				ТекущееДействиеЭталон.Вставить("Действие"         , Неопределено);
				ТекущееДействиеЭталон.Вставить("ПараметрыДействия", Неопределено);
			ЗаполнитьЗначенияСвойств(ТекущееДействиеЭталон, ТекущееДействие);

			Если ТекущееДействиеЭталон.Действие = "Оповещение пользователю" Тогда // Это идентификатор.

				Если ТипЗнч(ТекущееДействиеЭталон.ПараметрыДействия) <> ТипСтруктура Тогда
					Продолжить;
				КонецЕсли;

				ПараметрыДействияЭталон = Новый Структура;
					ПараметрыДействияЭталон.Вставить("Текст"              , Неопределено);
					ПараметрыДействияЭталон.Вставить("НавигационнаяСсылка", Неопределено);
					ПараметрыДействияЭталон.Вставить("Пояснение"          , Неопределено);
					ПараметрыДействияЭталон.Вставить("Картинка"           , Неопределено);
					ПараметрыДействияЭталон.Вставить("СтатусОповещения"   , Неопределено);
				ЗаполнитьЗначенияСвойств(ПараметрыДействияЭталон, ТекущееДействиеЭталон.ПараметрыДействия);

				Если ВРег(ПараметрыДействияЭталон.СтатусОповещения) = ВРег("Важное") Тогда
					ПараметрыДействияЭталон.СтатусОповещения = СтатусОповещенияПользователя.Важное;
				Иначе
					ПараметрыДействияЭталон.СтатусОповещения = СтатусОповещенияПользователя.Информация;
				КонецЕсли;

				ПоказатьОповещениеПользователя(
					ПараметрыДействияЭталон.Текст, // Текст;
					ПараметрыДействияЭталон.НавигационнаяСсылка, // НавигационнаяСсылка;
					ПараметрыДействияЭталон.Пояснение, // Пояснение;
					ПараметрыДействияЭталон.Картинка, // Картинка;
					ПараметрыДействияЭталон.СтатусОповещения,
					ПараметрыДействияЭталон.НавигационнаяСсылка); // КлючУникальности.

				ПропуститьПереопределение = Истина;

			КонецЕсли;

			// Переопределение.
			Если ПропуститьПереопределение <> Истина Тогда
				ИнтеграцияПодсистемБИПКлиент.ВыполнитьИнтерактивноеДействие(ТекущееДействие);
				ОбработкаНовостейКлиентПереопределяемый.ВыполнитьИнтерактивноеДействие(ТекущееДействие);
			КонецЕсли;

		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область КонтекстныеНовости

// Функция получает контекстные новости из кэша. В случае необходимости кэш перезаполняется.
// Она используется в том случае, если выбрана стратегия отказа от расчета списка контекстных новостей в ПриСозданииНаСервере.
//
// Параметры:
//  ИдентификаторМетаданных           - Строка - Идентификатор метаданных, должен совпадать с таким же идентификатором в самой новости;
//  ИдентификаторФормы                - Строка - Идентификатор формы, должен совпадать с таким же идентификатором в самой новости;
//  ЗаголовокФормыКонтекстныхНовостей - Строка - ;
//  ИдентификаторыСобытийПриОткрытии  - Строка, Массив - строка или массив строк идентификаторов события "ПриОткрытии".
//                                        Если передано какое-то значение, то будет подсчитано количество очень важных контекстных
//                                        новостей. И если это количество > 0, то открывающая форма инициирует
//                                        открытие формы просмотра таких новостей;
//  НастройкиПолученияНовостей        - Структура, Неопределено - структура с ключами:
//   * ПолучатьКатегорииНовостей      - Булево - если Истина, то в реквизите формы будут также сохраняться категории новостей.
//                                        Это может быть полезно для реализации особенного отбора новостей,
//                                          который невозможно реализовать с помощью регистров сведений ОтборыПоЛентамНовостей*.
//
// Возвращаемое значение:
//   Структура - структура контекстных новостей для указанной комбинации ИдентификаторМетаданных / ИдентификаторФормы.
//       Ключи см. в ОбработкаНовостейСлужебный.ПолучитьКонтекстныеНовостиДляФормы.
//
Функция ПолучитьКонтекстныеНовостиИзКэшаПриложения(
			ИдентификаторМетаданных,
			ИдентификаторФормы,
			ЗаголовокФормыКонтекстныхНовостей = "",
			ИдентификаторыСобытийПриОткрытии = "ПриОткрытии",
			НастройкиПолученияНовостей = Неопределено)

	// В памяти клиента в переменной ПараметрыПриложения["ИнтернетПоддержкаПользователей.Новости.КэшКонтекстныхНовостей"])
	//  должно храниться соответствие следующей структуры:
	// Ключ: ИдентификаторМетаданных;
	// Значение: Соответствие:
	//   Ключ: ИдентификаторФормы;
	//   Значение: Структура:
	//     Ключ: ДатаЗаполнения, если прошло много времени, то обновить;
	//     Ключ: Новости (массив структур);
	//     Ключ: ЗаголовокФормыКонтекстныхНовостей;
	//     Ключ: КоличествоНовостей;
	//     Ключ: КоличествоНепрочитанныхНовостей;
	//     Ключ: КоличествоВажныхНовостейПриОткрытии;
	//     Ключ: КоличествоОченьВажныхНовостейПриОткрытии;
	//     Ключ: КоличествоПостоянныхНовостей;
	//     Ключ: МассивСтруктурВажныхНовостей;
	//     Ключ: МассивСтруктурПостоянныхНовостей.
	ТипСоответствие = Тип("Соответствие");
	ТипСтруктура    = Тип("Структура");
	ТипДата         = Тип("Дата");
	РассчитатьДляФормы = Ложь;

	Если ТипЗнч(ПараметрыПриложения) <> ТипСоответствие Тогда
		ПараметрыПриложения = Новый Соответствие;
	КонецЕсли;
	ИмяПараметраПриложения = "ИнтернетПоддержкаПользователей.Новости.КэшКонтекстныхНовостей";
	ЛокальныйКэшКонтекстныхНовостей = ПараметрыПриложения[ИмяПараметраПриложения];

	Если ТипЗнч(ЛокальныйКэшКонтекстныхНовостей) = ТипСоответствие Тогда
		НайденноеЗначениеДляМетаданных = ЛокальныйКэшКонтекстныхНовостей.Получить(ИдентификаторМетаданных);
		Если (НайденноеЗначениеДляМетаданных = Неопределено)
				ИЛИ (ТипЗнч(НайденноеЗначениеДляМетаданных) <> ТипСоответствие) Тогда // Заполнить
			ЛокальныйКэшКонтекстныхНовостей.Вставить(ИдентификаторМетаданных, Новый Соответствие);
			РассчитатьДляФормы = Истина;
		Иначе
			НайденноеЗначениеДляФормы = НайденноеЗначениеДляМетаданных.Получить(ИдентификаторФормы);
			Если (НайденноеЗначениеДляФормы = Неопределено)
					ИЛИ (ТипЗнч(НайденноеЗначениеДляФормы) <> ТипСтруктура) Тогда // Заполнить
				РассчитатьДляФормы = Истина;
			Иначе // Структура
				НайденноеЗначениеДляФормыЭталон = Новый Структура;
					НайденноеЗначениеДляФормыЭталон.Вставить("ДатаЗаполнения"                          , Неопределено);
					НайденноеЗначениеДляФормыЭталон.Вставить("Новости"                                 , Неопределено);
					НайденноеЗначениеДляФормыЭталон.Вставить("ЗаголовокФормыКонтекстныхНовостей"       , Неопределено);
					НайденноеЗначениеДляФормыЭталон.Вставить("КоличествоНовостей"                      , Неопределено);
					НайденноеЗначениеДляФормыЭталон.Вставить("КоличествоНепрочитанныхНовостей"         , Неопределено);
					НайденноеЗначениеДляФормыЭталон.Вставить("КоличествоВажныхНовостейПриОткрытии"     , Неопределено);
					НайденноеЗначениеДляФормыЭталон.Вставить("КоличествоОченьВажныхНовостейПриОткрытии", Неопределено);
					НайденноеЗначениеДляФормыЭталон.Вставить("КоличествоПостоянныхНовостей"            , Неопределено);
					НайденноеЗначениеДляФормыЭталон.Вставить("МассивСтруктурВажныхНовостей"            , Неопределено);
					НайденноеЗначениеДляФормыЭталон.Вставить("МассивСтруктурПостоянныхНовостей"        , Неопределено);
				ЗаполнитьЗначенияСвойств(НайденноеЗначениеДляФормыЭталон, НайденноеЗначениеДляФормы);
				// Когда последний раз обновлялось?
				Если (ТипЗнч(НайденноеЗначениеДляФормыЭталон.ДатаЗаполнения) = ТипДата)
						И (НайденноеЗначениеДляФормыЭталон.ДатаЗаполнения >= (ОбщегоНазначенияКлиент.ДатаСеанса() - 1*60*60)) Тогда
					// Проверить остальные реквизиты.
					Если НайденноеЗначениеДляФормыЭталон.Новости                                        <> Неопределено
							И НайденноеЗначениеДляФормыЭталон.ЗаголовокФормыКонтекстныхНовостей         <> Неопределено
							И НайденноеЗначениеДляФормыЭталон.КоличествоНовостей                        <> Неопределено
							И НайденноеЗначениеДляФормыЭталон.КоличествоНепрочитанныхНовостей           <> Неопределено
							И НайденноеЗначениеДляФормыЭталон.КоличествоВажныхНовостейПриОткрытии       <> Неопределено
							И НайденноеЗначениеДляФормыЭталон.КоличествоОченьВажныхНовостейПриОткрытии  <> Неопределено
							И НайденноеЗначениеДляФормыЭталон.КоличествоПостоянныхНовостей              <> Неопределено
							И НайденноеЗначениеДляФормыЭталон.МассивСтруктурВажныхНовостей              <> Неопределено
							И НайденноеЗначениеДляФормыЭталон.МассивСтруктурПостоянныхНовостей          <> Неопределено Тогда
						// Ничего не делать.
					Иначе
						РассчитатьДляФормы = Истина;
					КонецЕсли;
				Иначе
					РассчитатьДляФормы = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе // Неопределено или неправильный тип.
		ЛокальныйКэшКонтекстныхНовостей = Новый Соответствие;
		ЛокальныйКэшКонтекстныхНовостей.Вставить(ИдентификаторМетаданных, Новый Соответствие);
		РассчитатьДляФормы = Истина;
	КонецЕсли;

	Если РассчитатьДляФормы = Истина Тогда
		НайденноеЗначениеДляМетаданных = ЛокальныйКэшКонтекстныхНовостей.Получить(ИдентификаторМетаданных);
		НайденноеЗначениеДляФормы = ОбработкаНовостейВызовСервера.ПолучитьКонтекстныеНовостиДляФормы(
			ИдентификаторМетаданных,
			ИдентификаторФормы,
			ЗаголовокФормыКонтекстныхНовостей,
			ИдентификаторыСобытийПриОткрытии,
			НастройкиПолученияНовостей);
		НайденноеЗначениеДляМетаданных.Вставить(ИдентификаторФормы, НайденноеЗначениеДляФормы);
		ЛокальныйКэшКонтекстныхНовостей.Вставить(ИдентификаторМетаданных, НайденноеЗначениеДляМетаданных);
	КонецЕсли;

	ПараметрыПриложения.Вставить(ИмяПараметраПриложения, ЛокальныйКэшКонтекстныхНовостей);

	Возврат НайденноеЗначениеДляФормы;

КонецФункции

// Процедура удаляет контекстные новости из кэша. Потом кэш перезаполняется.
// Ее надо запускать в том случае, когда у новостей изменился признак оповещения, чтобы кэш контекстных новостей перезаполнился.
// Она используется в том случае, если выбрана стратегия отказа от расчета списка контекстных новостей в ПриСозданииНаСервере.
//
// Параметры:
//  ИдентификаторМетаданных - Строка - Идентификатор метаданных, должен совпадать с таким же идентификатором в самой новости;
//  ИдентификаторФормы      - Строка - Идентификатор формы, должен совпадать с таким же идентификатором в самой новости.
//                                     Если Неопределено, то удаляются все контекстные новости для этого ИдентификаторМетаданных.
//
Процедура УдалитьКонтекстныеНовостиИзКэшаПриложения(
				ИдентификаторМетаданных,
				ИдентификаторФормы = Неопределено) Экспорт

	ТипСоответствие = Тип("Соответствие");

	Если ТипЗнч(ПараметрыПриложения) <> ТипСоответствие Тогда
		ПараметрыПриложения = Новый Соответствие;
	КонецЕсли;
	ИмяПараметраПриложения = "ИнтернетПоддержкаПользователей.Новости.КэшКонтекстныхНовостей";
	ЛокальныйКэшКонтекстныхНовостей = ПараметрыПриложения[ИмяПараметраПриложения];

	Если ТипЗнч(ЛокальныйКэшКонтекстныхНовостей) = ТипСоответствие Тогда
		НайденноеЗначениеДляМетаданных = ЛокальныйКэшКонтекстныхНовостей.Получить(ИдентификаторМетаданных);
		Если (НайденноеЗначениеДляМетаданных <> Неопределено)
				И (ТипЗнч(НайденноеЗначениеДляМетаданных) = ТипСоответствие) Тогда
			Если ИдентификаторФормы = Неопределено Тогда
				ЛокальныйКэшКонтекстныхНовостей.Удалить(ИдентификаторМетаданных);
			Иначе
				НайденноеЗначениеДляФормы = НайденноеЗначениеДляМетаданных.Получить(ИдентификаторФормы);
				Если (НайденноеЗначениеДляФормы <> Неопределено) Тогда // Заполнить
					НайденноеЗначениеДляМетаданных.Удалить(ИдентификаторФормы);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ПараметрыПриложения.Вставить(ИмяПараметраПриложения, ЛокальныйКэшКонтекстныхНовостей);
	Иначе
		ПараметрыПриложения.Вставить(ИмяПараметраПриложения, Новый Соответствие);
	КонецЕсли;

КонецПроцедуры

// Процедура запускает оптимизацию кэша контекстных новостей
//  (глобальной переменной ПараметрыПриложения["ИнтернетПоддержкаПользователей.Новости.КэшКонтекстныхНовостей"])).
// Оптимизация заключается в:
// 1) Если есть структуры, полученные > 1 часа назад, то удалить их;
// 2) Если количество структур Метаданные / Форма >= 50, то удалить самые старые (по времени получения), чтобы осталось 40 структур.
//
Процедура ОптимизацияКонтекстныхНовостейВКэшеПриложения() Экспорт

	ТипСоответствие = Тип("Соответствие");
	ТипСтруктура    = Тип("Структура");
	ТипДата         = Тип("Дата");

	СписокСтруктур = Новый СписокЗначений;

	Если ТипЗнч(ПараметрыПриложения) <> ТипСоответствие Тогда
		ПараметрыПриложения = Новый Соответствие;
	КонецЕсли;
	ИмяПараметраПриложения = "ИнтернетПоддержкаПользователей.Новости.КэшКонтекстныхНовостей";
	ЛокальныйКэшКонтекстныхНовостей = ПараметрыПриложения[ИмяПараметраПриложения];

	// 1. Удалить все устаревшие кэши контекстных новостей (полученные более часа назад).
	// Параллельно собрать данные для удаления кэша по времени или по количеству.
	Если ТипЗнч(ЛокальныйКэшКонтекстныхНовостей) = ТипСоответствие Тогда
		Для Каждого ЛокальноеИмяМетаданных Из ЛокальныйКэшКонтекстныхНовостей Цикл
			Если ТипЗнч(ЛокальноеИмяМетаданных.Значение) = ТипСоответствие Тогда
				Для Каждого ЛокальноеИмяФормы Из ЛокальноеИмяМетаданных.Значение Цикл
					Если ТипЗнч(ЛокальноеИмяФормы.Значение) = ТипСтруктура Тогда
						ЛокальноеИмяФормыЗначениеЭталон = Новый Структура;
							ЛокальноеИмяФормыЗначениеЭталон.Вставить("ДатаЗаполнения", Неопределено);
						ЗаполнитьЗначенияСвойств(ЛокальноеИмяФормыЗначениеЭталон, ЛокальноеИмяФормы.Значение);
						Если ТипЗнч(ЛокальноеИмяФормыЗначениеЭталон.ДатаЗаполнения) = ТипДата
								И ЛокальноеИмяФормыЗначениеЭталон.ДатаЗаполнения >= (ОбщегоНазначенияКлиент.ДатаСеанса() - 1*60*60) Тогда
							// Данные актуальны, сохранить их для следующей проверки
							СписокСтруктур.Добавить(
								Новый Структура("ИдентификаторМетаданных, ИдентификаторФормы",
									ЛокальноеИмяМетаданных.Ключ,
									ЛокальноеИмяФормы.Ключ),
								Формат(ЛокальноеИмяФормыЗначениеЭталон.ДатаЗаполнения, "ДФ=yyyyMMddhhmmss"));
						Иначе
							УдалитьКонтекстныеНовостиИзКэшаПриложения(ЛокальноеИмяМетаданных.Ключ, ЛокальноеИмяФормы.Ключ);
						КонецЕсли;
					Иначе
						УдалитьКонтекстныеНовостиИзКэшаПриложения(ЛокальноеИмяМетаданных.Ключ, ЛокальноеИмяФормы.Ключ);
					КонецЕсли;
				КонецЦикла;
			Иначе
				УдалитьКонтекстныеНовостиИзКэшаПриложения(ЛокальноеИмяМетаданных.Ключ, Неопределено);
			КонецЕсли;
		КонецЦикла;
	Иначе
		ЛокальныйКэшКонтекстныхНовостей = Новый Соответствие;
	КонецЕсли;

	ПараметрыПриложения.Вставить(ИмяПараметраПриложения, ЛокальныйКэшКонтекстныхНовостей);

	// 2. Удалить самые старые кэши контекстных новостей, если общее количество кэшей > 50, чтобы осталось 40 кэшей.
	Если СписокСтруктур.Количество() >= 50 Тогда
		СписокСтруктур.СортироватьПоПредставлению(НаправлениеСортировки.Убыв); // Самые старые - в конце
		СколькоУдалить = СписокСтруктур.Количество() - 40;
		Для С=0 По СколькоУдалить-1 Цикл
			УдалитьКонтекстныеНовостиИзКэшаПриложения(
				СписокСтруктур[40+С].Значение.ИдентификаторМетаданных,
				СписокСтруктур[40+С].Значение.ИдентификаторФормы);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПанельКонтекстныхНовостей

// Процедура регулярно оповещает открытые формы о том, что надо "перелистнуть" новость в панели контекстных новостей.
//
Процедура ПанельКонтекстныхНовостей_Автолистание() Экспорт

	Если НЕ РазрешенаРаботаСНовостямиТекущемуПользователю() Тогда
		Возврат;
	КонецЕсли;

	ТипСоответствие = Тип("Соответствие");

	ТекущаяДатаСеансаДляПроверки = ОбщегоНазначенияКлиент.ДатаСеанса();
	ПараметрыОбработчиковПанелиКонтекстныхНовостей = ПанельКонтекстныхНовостей_ПараметрыОбработчиков();
	ИнтервалАвтолистанияСекунд = ПараметрыОбработчиковПанелиКонтекстныхНовостей.ИнтервалАвтолистанияСекунд;

	// ПараметрыПриложения - глобальная переменная.
	Если ТипЗнч(ПараметрыПриложения) <> ТипСоответствие Тогда
		ПараметрыПриложения = Новый Соответствие;
	КонецЕсли;
	ИмяПараметраПриложения = "ИнтернетПоддержкаПользователей.Новости.АвтолистаниеДляПанелейКонтекстныхНовостей"; // Идентификатор.
	ПараметрыАвтолистания = ПараметрыПриложения[ИмяПараметраПриложения];
	Если ТипЗнч(ПараметрыАвтолистания) <> ТипСоответствие Тогда
		ПараметрыАвтолистания = Новый Соответствие;
	КонецЕсли;

	Если ПараметрыАвтолистания.Количество() = 0 Тогда
		ОтключитьОбработчикОжидания("АвтолистаниеВПанелиКонтекстныхНовостей");
	Иначе
		Для Каждого ТекущаяФорма Из ПараметрыАвтолистания Цикл
			Если ТекущаяФорма.Значение <= ТекущаяДатаСеансаДляПроверки Тогда
				Оповестить(
					ВсеОповещения().ПродолжитьАвтолистание,
					ТекущаяФорма.Ключ);
				ПараметрыАвтолистания.Вставить(ТекущаяФорма.Ключ, ТекущаяДатаСеансаДляПроверки + ИнтервалАвтолистанияСекунд);
			КонецЕсли;
		КонецЦикла;
		ПараметрыПриложения.Вставить(ИмяПараметраПриложения, ПараметрыАвтолистания);
	КонецЕсли;

КонецПроцедуры

// Процедура регулярно проверяет открытые формы и меняет
//  анимированную иконку "ИнформацияНовости16Анимированная" на "ИнформацияНовости16Статичная".
// Данные хранятся в ПараметрыПриложения["ИнтернетПоддержкаПользователей.Новости.АнимированныеИконкиДляПанелейКонтекстныхНовостей"].
//
Процедура ПанельКонтекстныхНовостей_ВыключениеАнимированныхИконок() Экспорт

	Если НЕ РазрешенаРаботаСНовостямиТекущемуПользователю() Тогда
		Возврат;
	КонецЕсли;

	ТипСоответствие = Тип("Соответствие");

	ТекущаяДатаСеансаДляПроверки = ОбщегоНазначенияКлиент.ДатаСеанса();

	// ПараметрыПриложения - глобальная переменная.
	Если ТипЗнч(ПараметрыПриложения) <> ТипСоответствие Тогда
		ПараметрыПриложения = Новый Соответствие;
	КонецЕсли;
	ИмяПараметраПриложения = "ИнтернетПоддержкаПользователей.Новости.АнимированныеИконкиДляПанелейКонтекстныхНовостей"; // Идентификатор.
	ПараметрыАнимированныхИконок = ПараметрыПриложения[ИмяПараметраПриложения];
	Если ТипЗнч(ПараметрыАнимированныхИконок) <> ТипСоответствие Тогда
		ПараметрыАнимированныхИконок = Новый Соответствие;
	КонецЕсли;

	Если ПараметрыАнимированныхИконок.Количество() = 0 Тогда
		ОтключитьОбработчикОжидания("ВыключениеАнимированныхИконокВПанелиКонтекстныхНовостей");
	Иначе
		БылиУдаления = Истина;
		Пока БылиУдаления = Истина Цикл
			БылиУдаления = Ложь;
			Для Каждого ТекущаяФорма Из ПараметрыАнимированныхИконок Цикл
				ПараметрыАнимированныхИконок.Удалить(ТекущаяФорма.Ключ);
				Если ТекущаяФорма.Значение <= ТекущаяДатаСеансаДляПроверки Тогда
					Оповестить(
						ВсеОповещения().ОтключитьАнимациюИконки,
						ТекущаяФорма.Ключ);
					БылиУдаления = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		ПараметрыПриложения.Вставить(ИмяПараметраПриложения, ПараметрыАнимированныхИконок);
	КонецЕсли;

КонецПроцедуры

// Процедура регулярно проверяет открытые формы и очищает глобальные переменные
//  ПараметрыПриложения["ИнтернетПоддержкаПользователей.Новости.АвтолистаниеДляПанелейКонтекстныхНовостей"]
//  ПараметрыПриложения["ИнтернетПоддержкаПользователей.Новости.АнимированныеИконкиДляПанелейКонтекстныхНовостей"]
//  от устаревших (закрытых форм).
//
Процедура ПанельКонтекстныхНовостей_ОптимизацияОбработчиков() Экспорт

	Если НЕ РазрешенаРаботаСНовостямиТекущемуПользователю() Тогда
		Возврат;
	КонецЕсли;

	ТипСоответствие = Тип("Соответствие");

#Область Автолистание

	// ПараметрыПриложения - глобальная переменная.
	Если ТипЗнч(ПараметрыПриложения) <> ТипСоответствие Тогда
		ПараметрыПриложения = Новый Соответствие;
	КонецЕсли;
	ИмяПараметраПриложения = "ИнтернетПоддержкаПользователей.Новости.АвтолистаниеДляПанелейКонтекстныхНовостей"; // Идентификатор.
	ПараметрыАвтолистания = ПараметрыПриложения[ИмяПараметраПриложения];
	Если ТипЗнч(ПараметрыАвтолистания) <> ТипСоответствие Тогда
		ПараметрыАвтолистания = Новый Соответствие;
	КонецЕсли;

	Если ПараметрыАвтолистания.Количество() = 0 Тогда
		ОтключитьОбработчикОжидания("АвтолистаниеВПанелиКонтекстныхНовостей");
	Иначе
		НовыеПараметрыАвтолистания = Новый Соответствие;
		// Формы закрывают, поэтому надо регулярно очищать соответствие.
		// Пройдем по открытым формам, и если для нее есть соответствие, то скопируем его в новый набор соответствий.
		ВсеОкна = ПолучитьОкна();
		Если ВсеОкна <> Неопределено Тогда
			Для Каждого ТекущееОкно Из ВсеОкна Цикл
				Если (НЕ ТекущееОкно.НачальнаяСтраница) И (НЕ ТекущееОкно.Основное) Тогда
					Для Каждого ТекущаяФорма Из ТекущееОкно.Содержимое Цикл
						НайденноеСоответствие = ПараметрыАвтолистания.Получить(ТекущаяФорма.УникальныйИдентификатор);
						Если НайденноеСоответствие <> Неопределено Тогда
							НовыеПараметрыАвтолистания.Вставить(ТекущаяФорма.УникальныйИдентификатор, НайденноеСоответствие);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ПараметрыПриложения.Вставить(ИмяПараметраПриложения, НовыеПараметрыАвтолистания);
		ПараметрыАвтолистания = НовыеПараметрыАвтолистания;
	КонецЕсли;

#КонецОбласти

#Область ВыключениеАнимированныхИконок

	// ПараметрыПриложения - глобальная переменная.
	Если ТипЗнч(ПараметрыПриложения) <> ТипСоответствие Тогда
		ПараметрыПриложения = Новый Соответствие;
	КонецЕсли;
	ИмяПараметраПриложения = "ИнтернетПоддержкаПользователей.Новости.АнимированныеИконкиДляПанелейКонтекстныхНовостей"; // Идентификатор.
	ПараметрыАнимированныхИконок = ПараметрыПриложения[ИмяПараметраПриложения];
	Если ТипЗнч(ПараметрыАнимированныхИконок) <> ТипСоответствие Тогда
		ПараметрыАнимированныхИконок = Новый Соответствие;
	КонецЕсли;

	Если ПараметрыАнимированныхИконок.Количество() = 0 Тогда
		ОтключитьОбработчикОжидания("ВыключениеАнимированныхИконокВПанелиКонтекстныхНовостей");
	Иначе
		НовыеПараметрыАнимированныхИконок = Новый Соответствие;
		// Формы закрывают, поэтому надо регулярно очищать соответствие.
		// Пройдем по открытым формам, и если для нее есть соответствие, то скопируем его в новый набор соответствий.
		ВсеОкна = ПолучитьОкна();
		Если ВсеОкна <> Неопределено Тогда
			Для Каждого ТекущееОкно Из ВсеОкна Цикл
				Если (НЕ ТекущееОкно.НачальнаяСтраница) И (НЕ ТекущееОкно.Основное) Тогда
					Для Каждого ТекущаяФорма Из ТекущееОкно.Содержимое Цикл
						НайденноеСоответствие = ПараметрыАнимированныхИконок.Получить(ТекущаяФорма.УникальныйИдентификатор);
						Если НайденноеСоответствие <> Неопределено Тогда
							НовыеПараметрыАнимированныхИконок.Вставить(ТекущаяФорма.УникальныйИдентификатор, НайденноеСоответствие);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ПараметрыПриложения.Вставить(ИмяПараметраПриложения, НовыеПараметрыАнимированныхИконок);
		ПараметрыАнимированныхИконок = НовыеПараметрыАнимированныхИконок;
	КонецЕсли;

#КонецОбласти

	Если (ПараметрыАнимированныхИконок.Количество() = 0)
			И (ПараметрыАвтолистания.Количество() = 0) Тогда
		ОтключитьОбработчикОжидания("ОптимизацияОбработчиковПанелейКонтекстныхНовостей");
	КонецЕсли;

КонецПроцедуры

// Процедура управляет видимостью панели контекстных новостей в форме, а также сохраняет настройки (дату закрытия),
//  чтобы через некоторое время снова открыть панель.
//
// Параметры:
//  Форма     - ФормаКлиентскогоПриложения - форма, в которой необходимо изменить видимость панели контекстных новостей;
//  Видимость - Булево - новое состояние видимости.
//
Процедура ПанельКонтекстныхНовостей_ИзменитьВидимость(Форма, Видимость)

	// Изменить видимость на форме.
	Форма.Элементы.ПанельКонтекстныхНовостей.Видимость = (Видимость = Истина);
	Если Форма.Новости.ЕстьКнопкаУправленияВидимостьюПанелиКонтекстныхНовостей = Истина Тогда
		Форма.Элементы.ФормаВидимостьПанелиКонтекстныхНовостей.Пометка = Форма.Элементы.ПанельКонтекстныхНовостей.Видимость;
	КонецЕсли;

	// Сохранить состояние в регистре сведений.
	// Здесь же будут обновлены параметры реквизита Форма.Новости:
	// - ВидимостьПанелиКонтекстныхНовостей;
	// - ДатаОтключенияПанелиКонтекстныхНовостей;
	// - ДатаПоследнейНовостиПанелиКонтекстныхНовостей.
	ОбработкаНовостейВызовСервера.ПанельКонтекстныхНовостей_ИзменитьВидимость(Форма.Новости, Видимость);

	// Подключить или удалить обработчики автолистания и замены анимированной иконки на статичную.
	ПанельКонтекстныхНовостей_УправлениеГлобальнымиОбработчиками(Форма);

КонецПроцедуры

// Возвращает основные параметры обработчиков панели контекстных новостей.
//
// Возвращаемое значение:
//   Структура - структура с ключами:
//    * ИнтервалАвтолистанияСекунд - Число - частота автолистания, 10..999 секунд. По-умолчанию - 15;
//    * ПаузаАвтолистанияПриРучнойПеремоткеСекунд - Число - пауза перед возобновлением автолистания,
//                если пользователь вручную переключился на другую новость, 10..999 секунд. По-умолчанию - 60 секунд;
//    * ВыключениеАнимированнойИконкиСекунд - Число - время, через которое анимированная иконка
//                станет статичной, 10...999 секунд. По-умолчанию - 30 секунд.
//
Функция ПанельКонтекстныхНовостей_ПараметрыОбработчиков()

	ТипЧисло     = Тип("Число");
	ТипСтруктура = Тип("Структура");

	Результат = Новый Структура;
		Результат.Вставить("ИнтервалАвтолистанияСекунд", 15);
		Результат.Вставить("ПаузаАвтолистанияПриРучнойПеремоткеСекунд", 60);
		Результат.Вставить("ВыключениеАнимированнойИконкиСекунд", 30);

	ИнтеграцияПодсистемБИПКлиент.ПанельКонтекстныхНовостей_ПараметрыОбработчиков(Результат);
	ОбработкаНовостейКлиентПереопределяемый.ПанельКонтекстныхНовостей_ПараметрыОбработчиков(Результат);

	РезультатЭталон = Новый Структура;
		РезультатЭталон.Вставить("ИнтервалАвтолистанияСекунд"               , 15);
		РезультатЭталон.Вставить("ПаузаАвтолистанияПриРучнойПеремоткеСекунд", 60);
		РезультатЭталон.Вставить("ВыключениеАнимированнойИконкиСекунд"      , 30);

	Если ТипЗнч(Результат) = ТипСтруктура Тогда
		ЗаполнитьЗначенияСвойств(РезультатЭталон, Результат);
		Если (ТипЗнч(РезультатЭталон.ИнтервалАвтолистанияСекунд) = ТипЧисло)
				И (РезультатЭталон.ИнтервалАвтолистанияСекунд >= 10)
				И (РезультатЭталон.ИнтервалАвтолистанияСекунд <= 999) Тогда
			// Ничего делать не нужно.
		Иначе
			РезультатЭталон.ИнтервалАвтолистанияСекунд = 15;
		КонецЕсли;
		Если (ТипЗнч(РезультатЭталон.ПаузаАвтолистанияПриРучнойПеремоткеСекунд) = ТипЧисло)
				И (РезультатЭталон.ПаузаАвтолистанияПриРучнойПеремоткеСекунд >= 10)
				И (РезультатЭталон.ПаузаАвтолистанияПриРучнойПеремоткеСекунд <= 999) Тогда
			// Ничего делать не нужно.
		Иначе
			РезультатЭталон.ПаузаАвтолистанияПриРучнойПеремоткеСекунд = 60;
		КонецЕсли;
		Если (ТипЗнч(РезультатЭталон.ВыключениеАнимированнойИконкиСекунд) = ТипЧисло)
				И (РезультатЭталон.ВыключениеАнимированнойИконкиСекунд >= 10)
				И (РезультатЭталон.ВыключениеАнимированнойИконкиСекунд <= 999) Тогда
			// Ничего делать не нужно.
		Иначе
			РезультатЭталон.ВыключениеАнимированнойИконкиСекунд = 30;
		КонецЕсли;
	КонецЕсли;

	ЗаполнитьЗначенияСвойств(Результат, РезультатЭталон);

	Возврат Результат;

КонецФункции

// Подключает / отключает глобальные обработчики:
//  - автолистание;
//  - замена анимированной иконки.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, которую надо подключить / отключить от глобальных обработчиков.
//
Процедура ПанельКонтекстныхНовостей_УправлениеГлобальнымиОбработчиками(Форма)

	Если НЕ РазрешенаРаботаСНовостямиТекущемуПользователю() Тогда
		Возврат;
	КонецЕсли;

	ТипСтруктура    = Тип("Структура");
	ТипСоответствие = Тип("Соответствие");

	// Если есть больше одной новости для панели контекстных новостей, включен режим листание, автолистание или список новостей,
	//  и панель контекстных новостей не скрыта,
	//  то подключить глобальные обработчики автолистания и замены анимированной иконки.
	Если (ТипЗнч(Форма.Новости) = ТипСтруктура)
			И (Форма.Новости.КоличествоНовостейДляПанелиКонтекстныхНовостей > 0)
			И (Форма.Новости.ВидимостьПанелиКонтекстныхНовостей = Истина) Тогда
		ПараметрыОбработчиковПанелиКонтекстныхНовостей = ПанельКонтекстныхНовостей_ПараметрыОбработчиков();
		Если (Форма.Новости.СпособОтображенияПанелиКонтекстныхНовостей = "Автолистание") Тогда
			// Заполнить нужные данные для глобального перелистывания.
			// В параметре хранится соответствие, где ключ = идентификатор формы, а значение - дата/время начала автолистания.
			// Если пользователь вручную перелистнет новости, то автолистание остановится на 1 минуту.

			ИнтервалАвтолистанияСекунд = ПараметрыОбработчиковПанелиКонтекстныхНовостей.ИнтервалАвтолистанияСекунд;

			// ПараметрыПриложения - глобальная переменная.
			Если ТипЗнч(ПараметрыПриложения) <> ТипСоответствие Тогда
				ПараметрыПриложения = Новый Соответствие;
			КонецЕсли;
			ИмяПараметраПриложения = "ИнтернетПоддержкаПользователей.Новости.АвтолистаниеДляПанелейКонтекстныхНовостей"; // Идентификатор.
			ПараметрыАвтолистания = ПараметрыПриложения[ИмяПараметраПриложения];
			Если ТипЗнч(ПараметрыАвтолистания) <> ТипСоответствие Тогда
				ПараметрыАвтолистания = Новый Соответствие;
			КонецЕсли;
			// Автолистание нужно только если новостей больше одной.
			Если (Форма.Новости.КоличествоНовостейДляПанелиКонтекстныхНовостей > 1) Тогда
				ПараметрыАвтолистания.Вставить(Форма.УникальныйИдентификатор, ОбщегоНазначенияКлиент.ДатаСеанса() + ИнтервалАвтолистанияСекунд - 1);
			КонецЕсли;
			ПараметрыПриложения.Вставить(ИмяПараметраПриложения, ПараметрыАвтолистания);

			// Раз мы явно подключили автолистание, то подключить необходимые глобальные обработчики.
			// При необходимости эти обработчики отключатся самостоятельно.
			ОтключитьОбработчикОжидания("АвтолистаниеВПанелиКонтекстныхНовостей");
			ПодключитьОбработчикОжидания("АвтолистаниеВПанелиКонтекстныхНовостей", ИнтервалАвтолистанияСекунд, Ложь);
			ИнтервалОптимизацииОбработчиковСекунд = 10;
			ОтключитьОбработчикОжидания("ОптимизацияОбработчиковПанелейКонтекстныхНовостей");
			ПодключитьОбработчикОжидания("ОптимизацияОбработчиковПанелейКонтекстныхНовостей", ИнтервалОптимизацииОбработчиковСекунд, Ложь);

		ИначеЕсли (Форма.Новости.СпособОтображенияПанелиКонтекстныхНовостей = "Листание")
				ИЛИ (Форма.Новости.СпособОтображенияПанелиКонтекстныхНовостей = "СписокНовостей") Тогда

			// Заполнить нужные данные для выключения анимированных иконок.
			// В параметре хранится соответствие, где ключ = идентификатор формы, а значение - дата/время начала анимирования.

			ИнтервалВыключенияИконокСекунд = ПараметрыОбработчиковПанелиКонтекстныхНовостей.ВыключениеАнимированнойИконкиСекунд;

			// ПараметрыПриложения - глобальная переменная.
			Если ТипЗнч(ПараметрыПриложения) <> ТипСоответствие Тогда
				ПараметрыПриложения = Новый Соответствие;
			КонецЕсли;
			ИмяПараметраПриложения = "ИнтернетПоддержкаПользователей.Новости.АнимированныеИконкиДляПанелейКонтекстныхНовостей"; // Идентификатор.
			ПараметрыАнимированныхИконок = ПараметрыПриложения[ИмяПараметраПриложения];
			Если ТипЗнч(ПараметрыАнимированныхИконок) <> ТипСоответствие Тогда
				ПараметрыАнимированныхИконок = Новый Соответствие;
			КонецЕсли;
			ПараметрыАнимированныхИконок.Вставить(Форма.УникальныйИдентификатор, ОбщегоНазначенияКлиент.ДатаСеанса() + ИнтервалВыключенияИконокСекунд - 1);
			ПараметрыПриложения.Вставить(ИмяПараметраПриложения, ПараметрыАнимированныхИконок);

			// Раз мы явно подключили выключение анимированных иконок, то подключить необходимые глобальные обработчики.
			// При необходимости эти обработчики отключатся самостоятельно.
			ОтключитьОбработчикОжидания("ВыключениеАнимированныхИконокВПанелиКонтекстныхНовостей");
			ПодключитьОбработчикОжидания("ВыключениеАнимированныхИконокВПанелиКонтекстныхНовостей", ИнтервалВыключенияИконокСекунд, Ложь);
			ИнтервалОптимизацииОбработчиковСекунд = 10;
			ОтключитьОбработчикОжидания("ОптимизацияОбработчиковПанелейКонтекстныхНовостей");
			ПодключитьОбработчикОжидания("ОптимизацияОбработчиковПанелейКонтекстныхНовостей", ИнтервалОптимизацииОбработчиковСекунд, Ложь);

		КонецЕсли;

	Иначе // Удалить обработчики

		// Явно отключать обработчики не обязательно - они отключатся сами, когда не будет данных.

		// ПараметрыПриложения - глобальная переменная.
		Если ТипЗнч(ПараметрыПриложения) <> ТипСоответствие Тогда
			ПараметрыПриложения = Новый Соответствие;
		КонецЕсли;
		ИмяПараметраПриложения = "ИнтернетПоддержкаПользователей.Новости.АвтолистаниеДляПанелейКонтекстныхНовостей"; // Идентификатор.
		ПараметрыАвтолистания = ПараметрыПриложения[ИмяПараметраПриложения];
		Если ТипЗнч(ПараметрыАвтолистания) <> ТипСоответствие Тогда
			ПараметрыАвтолистания = Новый Соответствие;
		КонецЕсли;
		// Автолистание нужно только если новостей больше одной.
		ПараметрыАвтолистания.Удалить(Форма.УникальныйИдентификатор);
		ПараметрыПриложения.Вставить(ИмяПараметраПриложения, ПараметрыАвтолистания);

		// ПараметрыПриложения - глобальная переменная.
		Если ТипЗнч(ПараметрыПриложения) <> ТипСоответствие Тогда
			ПараметрыПриложения = Новый Соответствие;
		КонецЕсли;
		ИмяПараметраПриложения = "ИнтернетПоддержкаПользователей.Новости.АнимированныеИконкиДляПанелейКонтекстныхНовостей"; // Идентификатор.
		ПараметрыАнимированныхИконок = ПараметрыПриложения[ИмяПараметраПриложения];
		Если ТипЗнч(ПараметрыАнимированныхИконок) <> ТипСоответствие Тогда
			ПараметрыАнимированныхИконок = Новый Соответствие;
		КонецЕсли;
		ПараметрыАнимированныхИконок.Удалить(Форма.УникальныйИдентификатор);
		ПараметрыПриложения.Вставить(ИмяПараметраПриложения, ПараметрыАнимированныхИконок);

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область РегулярнаяПроверкаНовостейТребующихПрочтения

// Начиная с 8.3.10.2168 все важные новости просто выводятся в цикле, и сама платформа отображает их пачками по 3 штуки.
// Подробности: https://wonderland.v8.1c.ru/blog/mekhanizm-opoveshcheniy-polzovatelya-i-tsentr-opoveshcheniy/.
//
// Параметры:
//  ВажныеНовости      - Массив структур - новости с важностью "Важная", где:
//    * Новость                        - СправочникСсылка.Новости - ссылка на новость, обязательный ключ;
//    * НовостьУникальныйИдентификатор - УникальныйИдентификатор, Неопределено - УИН от ссылки на новость, НЕобязательный ключ;
//    * НавигационнаяСсылка            - Строка - навигационная ссылка на новость, обязательный ключ;
//    * НовостьНаименование            - Строка - заголовок новости, обязательный ключ;
//    * НовостьПодзаголовок            - Строка - подзаголовок новости, обязательный ключ;
//    * ОповещениеВключено             - Булево, Неопределено - Признак, что оповещение включено, НЕобязательный ключ;
//    * ИконкаНовости                  - Картинка, Неопределено - иконка новости для оповещения пользователю.
//
Процедура НачатьПоследовательныйПоказВажныхНовостей(ВажныеНовостиСВключеннымиНапоминаниями) Экспорт

	ТипМассив   = Тип("Массив");
	ТипКартинка = Тип("Картинка");

	Если ТипЗнч(ВажныеНовостиСВключеннымиНапоминаниями) <> ТипМассив Тогда
		Возврат;
	КонецЕсли;

	// В этот список должны попадать только новости с включенными напоминаниями,
	//  поэтому дополнительная проверка на ОповещениеВключено не проводится.
	Для Каждого ТекущаяНовость Из ВажныеНовостиСВключеннымиНапоминаниями Цикл
		ТекущаяНовостьЭталон = Новый Структура;
			ТекущаяНовостьЭталон.Вставить("СпособОповещения"       , Неопределено);
			ТекущаяНовостьЭталон.Вставить("ИконкаНовости"          , Неопределено);
			ТекущаяНовостьЭталон.Вставить("Новость"                , Неопределено);
			ТекущаяНовостьЭталон.Вставить("НовостьНаименование"    , Неопределено);
			ТекущаяНовостьЭталон.Вставить("НовостьПодзаголовок"    , Неопределено);
			ТекущаяНовостьЭталон.Вставить("НовостьКодЛентыНовостей", Неопределено);
			ТекущаяНовостьЭталон.Вставить("НавигационнаяСсылка"    , Неопределено);
		ЗаполнитьЗначенияСвойств(ТекущаяНовостьЭталон, ТекущаяНовость);
		// {При добавлении способов оповещения исправлять здесь}.
		Если (ТекущаяНовостьЭталон.СпособОповещения = "Отключено") Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(ТекущаяНовостьЭталон.ИконкаНовости) <> ТипКартинка Тогда
			ТекущаяНовостьЭталон.ИконкаНовости = БиблиотекаКартинок.ВажностьНовостиВажная;
		КонецЕсли;
		ПараметрыОткрытияФормы = Новый Структура;
			ПараметрыОткрытияФормы.Вставить("Ключ", ТекущаяНовостьЭталон.Новость);
			ПараметрыОткрытияФормы.Вставить("РежимОткрытияОкна", "Независимое"); // Идентификатор.
			ПараметрыОткрытияФормы.Вставить("ИнициаторОткрытияНовости", "ВажнаяНовость"); // Идентификатор.
			ПараметрыОткрытияФормы.Вставить("НовостьНаименование", ТекущаяНовостьЭталон.НовостьНаименование); // Заголовок новости.
			ПараметрыОткрытияФормы.Вставить("НовостьКодЛентыНовостей", ТекущаяНовостьЭталон.НовостьКодЛентыНовостей); // Код ленты новостей.
		ПараметрыОткрытияНовости = Новый Структура;
			ПараметрыОткрытияНовости.Вставить("НовостьСсылка", ТекущаяНовостьЭталон.Новость);
			ПараметрыОткрытияНовости.Вставить("ПараметрыОткрытияФормы", ПараметрыОткрытияФормы);
			ПараметрыОткрытияНовости.Вставить("Уникальность", ТекущаяНовостьЭталон.НавигационнаяСсылка);
		ДействиеПриНажатии = Новый ОписаниеОповещения(
			"ПоказатьВажнуюНовость",
			ОбработкаНовостейКлиент,
			ПараметрыОткрытияНовости);
		ПоказатьОповещениеПользователя(
			СокрЛП(ТекущаяНовостьЭталон.НовостьНаименование), // Текст, Новость.Наименование
			ДействиеПриНажатии, // НавигационнаяСсылка
			СокрЛП(ТекущаяНовостьЭталон.НовостьПодзаголовок), // Пояснение, Новость.Подзаголовок
			ТекущаяНовостьЭталон.ИконкаНовости, // Картинка
			СтатусОповещенияПользователя.Важное, // СтатусОповещенияПользователя
			ТекущаяНовостьЭталон.НавигационнаяСсылка); // КлючУникальности
	КонецЦикла;

КонецПроцедуры

// Процедура показывает важную новость. Является "оболочкой" для функции ПоказатьНовость.
//
// Параметры:
//  ПараметрыОткрытияНовости - Структура - структура с ключами:
//   * НовостьСсылка          - СправочникСсылка.Новости - открываемая новость;
//   * ПараметрыОткрытияФормы - Структура - параметры открытия формы новости. Можно заполнять:
//     ** Ключ - Ссылка на новость;
//     ** РежимОткрытияОкна - Строка - "БлокироватьОкноВладельца" или любое другое значение (которое будет воспринято как "Независимое");
//     ** ИнициаторОткрытияНовости - Строка - произвольное значение для дальнейшей обработки в переопределяемых модулях.
//   * Уникальность           - Произвольный - Уникальность открываемой формы. Ложь для уникальности по-умолчанию.
//
Процедура ПоказатьВажнуюНовость(ПараметрыОткрытияНовости) Экспорт

	Если НЕ РазрешенаРаботаСНовостямиТекущемуПользователю() Тогда
		Возврат;
	КонецЕсли;

	ПоказатьНовость(
		ПараметрыОткрытияНовости.НовостьСсылка,
		ПараметрыОткрытияНовости.ПараметрыОткрытияФормы,
		Неопределено, // Форма-владелец.
		ПараметрыОткрытияНовости.Уникальность);

КонецПроцедуры

#КонецОбласти

#Область ЛогИОтладка

// Функция возвращает массив всех возможных событий журнала регистрации для событий подсистемы.
// Нужно для формирования журнала регистрации из Обработка.ЖурналРегистрации.Форма.ЖурналРегистрации.
//
// Возвращаемое значение:
//   Массив - Массив всех возможных событий.
//
Функция ПолучитьСписокВсехСобытийЖурналаРегистрации() Экспорт // АПК:559 не вызывается на сервере. // АПК:307 Список - не тип данных.

	Результат = Новый Массив;
		Результат.Добавить("БИП:Новости.Разное");
		Результат.Добавить("БИП:Новости.Клиент");
		Результат.Добавить("БИП:Новости.Отладка");
		Результат.Добавить("БИП:Новости.Все обновления новостей");
		Результат.Добавить("БИП:Новости.Сервис и регламент");
		Результат.Добавить("БИП:Новости.Обновление ИБ");
		Результат.Добавить("БИП:Новости.Загрузка новостей");
		Результат.Добавить("БИП:Новости.Загрузка классификаторов");
		Результат.Добавить("БИП:Новости.Хранилище настроек новостей");
		Результат.Добавить("БИП:Новости.Переопределяемый");
		Результат.Добавить("БИП:Новости.Изменение данных");
		Результат.Добавить("БИП:Новости.Валидация данных");

	Возврат Результат;

КонецФункции

// Функция возвращает массив всех возможных событий изменения данных журнала регистрации для событий подсистемы.
// Нужно для формирования журнала регистрации из Обработка.ЖурналРегистрации.Форма.ЖурналРегистрации.
// Отбор по этим событиям надо осуществлять вместе с отбором по метаданным.
//
// Возвращаемое значение:
//   Массив - Массив всех возможных событий.
//
Функция ПолучитьСписокВсехСобытийИзмененияДанныхЖурналаРегистрации() Экспорт // АПК:559 не вызывается на сервере. // АПК:307 Список - не тип данных.

	Результат = Новый Массив;
		Результат.Добавить("_$Data$_.Delete");
		Результат.Добавить("_$Data$_.New");
		Результат.Добавить("_$Data$_.Post");
		Результат.Добавить("_$Data$_.Unpost");
		Результат.Добавить("_$Data$_.Update");
		Результат.Добавить("_$Job$_.Cancel");
		Результат.Добавить("_$Job$_.Fail");
		Результат.Добавить("_$Job$_.Start");
		Результат.Добавить("_$Job$_.Succeed");
		Результат.Добавить("_$Job$_.Terminate");

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область СостояниеПодсистемы

// Получает состояние подсистемы.
//
// Возвращаемое значение:
//   Строка - см. параметр "СостояниеПодсистемы", метод ОбработкаНовостейСлужебный.УстановитьСостояниеПодсистемы().
//
Функция ПолучитьСостояниеПодсистемы() Экспорт

	Результат = ОбработкаНовостейКлиентПовтИсп.ПолучитьСостояниеПодсистемы();

	Возврат Результат;

КонецФункции

#КонецОбласти

#КонецОбласти
