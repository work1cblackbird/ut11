
#Область ПрограммныйИнтерфейс

#Область Проведение

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Свойства - См. ПроведениеДокументов.СвойстваДокумента
//
// Возвращаемое значение:
//  Структура - См. ПроведениеДокументов.ПараметрыУчетногоМеханизма
//
Функция ПараметрыДляПроведенияДокумента(Документ, Свойства) Экспорт
	
	Параметры = ПроведениеДокументов.ПараметрыУчетногоМеханизма();
	
	// Проведение
	Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.ПереданнаяВозвратнаяТара);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.ТоварыПереданныеНаКомиссию);
		
		Параметры.НезависимыеРегистры.Добавить(Метаданные.РегистрыСведений.ДатыПередачиТоваровНаКомиссию);
		
	КонецЕсли;
	
	// Контроль
	Если Свойства.РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
		
		ТипДокумента = ТипЗнч(Документ);
		
		Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение
				И (ТипДокумента = Тип("ДокументОбъект.ВозвратТоваровОтКлиента")
				Или ТипДокумента = Тип("ДокументОбъект.ВыкупВозвратнойТарыКлиентом")
				Или ТипДокумента = Тип("ДокументОбъект.ВводОстатковТоваров")
				Или ТипДокумента = Тип("ДокументОбъект.ВводОстатков")
				Или ТипДокумента = Тип("ДокументОбъект.КорректировкаРеализации"))
			Или Не Свойства.ЭтоНовый
				И (
				ТипДокумента = Тип("ДокументОбъект.РеализацияТоваровУслуг"))
			Или ИсправлениеДокументов.ЭтоИсправительныйДокумент(Документ) Тогда
			Параметры.КонтрольныеРегистрыИзменений.Добавить(Метаданные.РегистрыНакопления.ПереданнаяВозвратнаяТара);
		КонецЕсли;
		
		
		Параметры.КонтрольныеРегистрыЗаданий.Добавить(Метаданные.РегистрыНакопления.ТоварыПереданныеНаКомиссию);
		
	КонецЕсли;
	
	// Контроль даты запрета
	Если Свойства.РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
		Параметры.КонтрольныеРегистрыДатаЗапрета.Добавить(Метаданные.РегистрыНакопления.ПереданнаяВозвратнаяТара);
	КонецЕсли;
			
	Возврат Параметры;
	
КонецФункции

// Возвращает тексты запросов для сторнирования движений при исправлении документов
// 
// Параметры:
// 	МетаданныеДокумента - ОбъектМетаданныхДокумент - Метаданные документа, который проводится.
// 
// Возвращаемое значение:
// 	Соответствие - Соответствие полного имени регистра тексту запроса сторнирования
//
Функция ТекстыЗапросовСторнирования(МетаданныеДокумента) Экспорт
	
	ДвиженияДокумента = МетаданныеДокумента.Движения;

	ТекстыЗапросов = Новый Соответствие();
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.ПереданнаяВозвратнаяТара;
	Если ДвиженияДокумента.Содержит(МетаданныеРегистра) Тогда
		ТекстыЗапросов.Вставить(МетаданныеРегистра.ПолноеИмя(),
			ПроведениеДокументов.ТекстСторнирующегоЗапроса(
				МетаданныеРегистра, МетаданныеДокумента));
	КонецЕсли;
	
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.ТоварыПереданныеНаКомиссию;
	Если ДвиженияДокумента.Содержит(МетаданныеРегистра) Тогда
		ТекстыЗапросов.Вставить(МетаданныеРегистра.ПолноеИмя(),
			ПроведениеДокументов.ТекстСторнирующегоЗапроса(
				МетаданныеРегистра, МетаданныеДокумента));
	КонецЕсли;
	
	Возврат ТекстыЗапросов;
	
КонецФункции

// Процедура формирования движений по подчиненным регистрам передачи на ответхранение.
//
// Параметры:
//	ТаблицыДляДвижений - Структура - таблицы данных документа
//	Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//	Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "ПереданнаяВозвратнаяТара");
	//++ Устарело_Переработка24
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "ТоварыПереданныеПереработчику");
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "ТоварыПолученныеОтПереработчика");
	//-- Устарело_Переработка24
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "ТоварыПереданныеНаКомиссию");
	
КонецПроцедуры

// Дополняет текст запроса механизма проверки даты запрета по таблице изменений.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 
// Возвращаемое значение:
//	Соответствие - соответствие имен таблиц изменения регистров и текстов запросов.
//	
Функция ТекстыЗапросовКонтрольДатыЗапретаПоТаблицеИзменений(Запрос) Экспорт

	СоответствиеТекстовЗапросов = Новый Соответствие();
	СоответствиеТекстовЗапросов.Вставить("ДвиженияПереданнаяВозвратнаяТараИзменение", 
		РегистрыНакопления.ПереданнаяВозвратнаяТара.ТекстЗапросаКонтрольДатыЗапрета(Запрос));
	Возврат СоответствиеТекстовЗапросов;
	
КонецФункции

// Процедура формирования движений по независимым регистрам передачи на ответхранение.
//
// Параметры:
//	ТаблицыДляДвижений - Структура - таблицы данных документа
//	Документ - ДокументСсылка - ссылка на документ
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц документа
//	Отказ - Булево - признак отказа от проведения документа.
//
Процедура ЗаписатьДанные(ТаблицыДляДвижений, Документ, МенеджерВременныхТаблиц, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТаблицы = "Таблица" + "ДатыПередачиТоваровНаКомиссию";
	
	Если ТаблицыДляДвижений.Свойство(ИмяТаблицы)
		И ЗначениеЗаполнено(ТаблицыДляДвижений[ИмяТаблицы]) Тогда
		
		Для Каждого СтрокаТаблицы Из ТаблицыДляДвижений[ИмяТаблицы] Цикл
			МенеджерЗаписи = РегистрыСведений.ДатыПередачиТоваровНаКомиссию.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТаблицы);
			МенеджерЗаписи.Записать(Истина);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует тексты запросов для контроля изменений записанных движений регистров.
//
// Параметры:
//  Запрос - Запрос - запрос, хранящий параметры используемые в списке запросов
//  ТекстыЗапроса - СписокЗначений - список текстов запросов и их имен.
//  Документ - ДокументОбъект - записываемый документ.
//
Процедура ИнициализироватьДанныеКонтроляИзменений(Запрос, ТекстыЗапроса, Документ) Экспорт
	
	#Область ПереданнаяВозвратнаяТара
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияПереданнаяВозвратнаяТараИзменение") Тогда
		
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	ТаблицаОстатков.Партнер                        КАК Партнер,
			|	ТаблицаОстатков.Номенклатура                   КАК Номенклатура,
			|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения  КАК ЕдиницаИзмерения,
			|	ТаблицаОстатков.Характеристика                 КАК Характеристика,
			|	ТаблицаОстатков.ДокументПередачи               КАК ДокументПередачи,
			|	ТаблицаОстатков.ПредусмотренЗалог              КАК ПредусмотренЗалог,
			|	ТаблицаОстатков.ВидЗапасов                     КАК ВидЗапасов,
			|	ТаблицаОстатков.НомерГТД                       КАК НомерГТД,
			|	ТаблицаОстатков.КоличествоОстаток              КАК Количество,
			|	ТаблицаОстатков.СуммаОстаток                   КАК Сумма
			|ИЗ
			|	РегистрНакопления.ПереданнаяВозвратнаяТара.Остатки(,
			|			(Партнер, Номенклатура, Характеристика, ДокументПередачи, ВидЗапасов, НомерГТД, ПредусмотренЗалог) В
			|				(ВЫБРАТЬ
			|					Таблица.Партнер,
			|					Таблица.Номенклатура,
			|					Таблица.Характеристика,
			|					Таблица.ДокументПередачи,
			|					Таблица.ВидЗапасов,
			|					Таблица.НомерГТД,
			|					Таблица.ПредусмотренЗалог
			|				ИЗ
			|					ДвиженияПереданнаяВозвратнаяТараИзменение КАК Таблица)
			|	) КАК ТаблицаОстатков
			|
			|ГДЕ
			|	ТаблицаОстатков.КоличествоОстаток < 0";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса, "ОшибкиПереданнаяВозвратнаяТара");
		
	КонецЕсли;
	
	#КонецОбласти
	
	
КонецПроцедуры

// Выводит сообщения пользователю при наличии ошибок контроля изменений записанных движений регистров.
//
// Параметры:
//  РезультатыКонтроля - Структура - таблицы с результатами контроля изменений
//  Документ - ДокументОбъект - записываемый документ
//  Отказ - Булево - признак отказа от проведения документа.
//
Процедура СообщитьОРезультатахКонтроляИзменений(РезультатыКонтроля, Документ, Отказ) Экспорт
	
	#Область ПереданнаяВозвратнаяТара
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияПереданнаяВозвратнаяТараИзменение") Тогда
		
		ШаблонСообщения = НСтр("ru = 'Номенклатура %1. Возвращается (выкупается) больше на %2 %3, чем передано. %4.'");
		
		Для каждого СтрокаОшибки Из РезультатыКонтроля.ОшибкиПереданнаяВозвратнаяТара Цикл
			
			ПредставлениеНоменклатуры = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(СтрокаОшибки.Номенклатура,
				СтрокаОшибки.Характеристика);
			
			АналитикаПередачи = Новый Массив;
			
			Если ЗначениеЗаполнено(СтрокаОшибки.ДокументПередачи) Тогда 
				АналитикаПередачиСтрока = СтрШаблон(НСтр("ru = 'Документ: %1'"), СтрокаОшибки.ДокументПередачи);
				АналитикаПередачи.Добавить(АналитикаПередачиСтрока);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаОшибки.ВидЗапасов) Тогда
				АналитикаПередачиСтрока = СтрШаблон(НСтр("ru = 'Вид запасов: %1'"), СтрокаОшибки.ВидЗапасов);
				АналитикаПередачи.Добавить(АналитикаПередачиСтрока);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаОшибки.НомерГТД) Тогда
				АналитикаПередачиСтрока = СтрШаблон(НСтр("ru = 'Номер ГТД: %1'"), СтрокаОшибки.НомерГТД);
				АналитикаПередачи.Добавить(АналитикаПередачиСтрока);
			КонецЕсли;
			
			Если СтрокаОшибки.ПредусмотренЗалог Тогда
				АналитикаПередачи.Добавить(НСтр("ru = 'Под залог'"));
			КонецЕсли;
			
			АналитикаПередачиСтрока = СтрСоединить(АналитикаПередачи, ", ");
			
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПредставлениеНоменклатуры,
				-СтрокаОшибки.Количество, СтрокаОшибки.ЕдиницаИзмерения, АналитикаПередачиСтрока);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Документ,,, Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	#КонецОбласти
	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти