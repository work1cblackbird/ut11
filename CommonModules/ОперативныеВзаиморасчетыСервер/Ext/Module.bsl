#Область ПрограммныйИнтерфейс

// Выполняет заполнение регистров взаиморасчетов в новой архитектуре по переданной структуре параметров.
//
// Параметры:
//	ОсновныеПараметры - Структура, ТаблицаЗначений - Параметры пересчета, см. СтруктураПараметровЗаполненияВзаиморасчетов
//	ДополнительныеСвойстваПроведения - Структура
//
Процедура ЗаполнитьОперативныеВзаиморасчеты(ОсновныеПараметры, ДополнительныеСвойстваПроведения = Неопределено) Экспорт
	
	#Область ИнициализацияЗапросаИПеременных
	
	ТаблицаОсновныхПараметровРасчета = ТаблицаОсновныхПараметровРасчета(ОсновныеПараметры);
	
	ЕстьЗаписиРасчетовСКлиентами    = Ложь;
	ЕстьЗаписиРасчетовСПоставщиками = Ложь;
	ТребуетсяРассчитыватьПлан       = Ложь;
	
	ЗапросГлобальныхПеременных = Новый Запрос;
	ЗапросГлобальныхПеременных.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОсновныеПараметрыРасчета.ТипРасчетов КАК ТипРасчетов,
	|	ОсновныеПараметрыРасчета.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ОсновныеПараметрыРасчета.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ОсновныеПараметрыРасчета.ВалютаРасчетов КАК ВалютаРасчетов,
	|	ОсновныеПараметрыРасчета.ПорядокФакт КАК ПорядокФакт,
	|	ОсновныеПараметрыРасчета.ПорядокПлан КАК ПорядокПлан,
	|	ОсновныеПараметрыРасчета.ЭтоРасчетыСКлиентами КАК ЭтоРасчетыСКлиентами,
	|	ОсновныеПараметрыРасчета.НачальноеЗаполнение КАК НачальноеЗаполнение,
	|	ОсновныеПараметрыРасчета.Регистратор КАК Регистратор,
	|	ОсновныеПараметрыРасчета.ЗаписыватьИзменения КАК ЗаписыватьИзменения,
	|	ОсновныеПараметрыРасчета.ФиксированныйКурсНакладной КАК ФиксированныйКурсНакладной,
	|	ОсновныеПараметрыРасчета.ФиксированныйКурсРегл КАК ФиксированныйКурсРегл,
	|	ОсновныеПараметрыРасчета.ФиксированныйКурсУпр КАК ФиксированныйКурсУпр,
	|	ОсновныеПараметрыРасчета.ГрафикВДоговоре КАК ГрафикВДоговоре,
	|	ОсновныеПараметрыРасчета.РассчитыватьПлан КАК РассчитыватьПлан,
	|	ОсновныеПараметрыРасчета.РассчитыватьФакт КАК РассчитыватьФакт,
	|	ОсновныеПараметрыРасчета.Порядок КАК Порядок,
	|	ОсновныеПараметрыРасчета.НачалоДняПорядка КАК НачалоДняПорядка,
	|	ОсновныеПараметрыРасчета.НачалоДняПорядкаФакт КАК НачалоДняПорядкаФакт,
	|	ОсновныеПараметрыРасчета.ДатаПереоценки КАК ДатаПереоценки
	|ПОМЕСТИТЬ ВтОсновныеПараметрыРасчета
	|ИЗ
	|	&ОсновныеПараметрыРасчета КАК ОсновныеПараметрыРасчета
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРасчетов,
	|	АналитикаУчетаПоПартнерам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОсновныеПараметрыРасчета.ТипРасчетов КАК ТипРасчетов,
	|	ОсновныеПараметрыРасчета.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ОсновныеПараметрыРасчета.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ЕСТЬNULL(Справочник.Объект, НЕОПРЕДЕЛЕНО) КАК Объект,
	|	ЕСТЬNULL(Справочник.Договор, КлючиАналитикиУчетаПоПартнерам.Договор) КАК Договор,
	|	ОсновныеПараметрыРасчета.ВалютаРасчетов КАК ВалютаРасчетов,
	|	ОсновныеПараметрыРасчета.ПорядокФакт КАК ПорядокФакт,
	|	ОсновныеПараметрыРасчета.ПорядокПлан КАК ПорядокПлан,
	|	ОсновныеПараметрыРасчета.ЭтоРасчетыСКлиентами КАК ЭтоРасчетыСКлиентами,
	|	ОсновныеПараметрыРасчета.НачальноеЗаполнение КАК НачальноеЗаполнение,
	|	ОсновныеПараметрыРасчета.Регистратор КАК Регистратор,
	|	ОсновныеПараметрыРасчета.ЗаписыватьИзменения КАК ЗаписыватьИзменения,
	|	ОсновныеПараметрыРасчета.ФиксированныйКурсНакладной КАК ФиксированныйКурсНакладной,
	|	ОсновныеПараметрыРасчета.ФиксированныйКурсРегл КАК ФиксированныйКурсРегл,
	|	ОсновныеПараметрыРасчета.ФиксированныйКурсУпр КАК ФиксированныйКурсУпр,
	|	ОсновныеПараметрыРасчета.РассчитыватьПлан КАК РассчитыватьПлан,
	|	ОсновныеПараметрыРасчета.РассчитыватьФакт КАК РассчитыватьФакт,
	|	ОсновныеПараметрыРасчета.Порядок КАК Порядок,
	|	ОсновныеПараметрыРасчета.НачалоДняПорядка КАК НачалоДняПорядка,
	|	ОсновныеПараметрыРасчета.НачалоДняПорядкаФакт КАК НачалоДняПорядкаФакт,
	|	ОсновныеПараметрыРасчета.ДатаПереоценки КАК ДатаПереоценки,
	|	ОсновныеПараметрыРасчета.ГрафикВДоговоре КАК ГрафикВДоговоре,
	|	ЕСТЬNULL(Справочник.Договор.ВариантКурсаДоговора, ЗНАЧЕНИЕ(Перечисление.ВариантыКурсаДоговора.Переменный)) КАК
	|		ВариантКурсаДоговора,
	|	Справочник.ТипОбъектаРасчетов КАК ТипОбъектаРасчетов,
	|	ЕСТЬNULL(Справочник.Объект.ГрафикИсполненияДоговора, НЕОПРЕДЕЛЕНО) КАК ГрафикИсполненияДоговора,
	|	ЕСТЬNULL(КурсыВалют.КурсЧислительВалютыВзаиморасчетов, 0) КАК КурсЧислительВалютыВзаиморасчетов,
	|	ЕСТЬNULL(КурсыВалют.КурсЗнаменательВалютыВзаиморасчетов, 0) КАК КурсЗнаменательВалютыВзаиморасчетов,
	|	ЕСТЬNULL(КурсыВалют.КурсЧислительВалютыУправленческогоУчета, 0) КАК КурсЧислительВалютыУправленческогоУчета,
	|	ЕСТЬNULL(КурсыВалют.КурсЗнаменательВалютыУправленческогоУчета, 0) КАК КурсЗнаменательВалютыУправленческогоУчета,
	|	КлючиАналитикиУчетаПоПартнерам.Организация КАК Организация,
	|	КлючиАналитикиУчетаПоПартнерам.Контрагент КАК Контрагент,
	|	КлючиАналитикиУчетаПоПартнерам.Организация.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета
	|ИЗ
	|	ВтОсновныеПараметрыРасчета КАК ОсновныеПараметрыРасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК Справочник
	|		ПО ОсновныеПараметрыРасчета.ОбъектРасчетов = Справочник.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВалютыИКурсыДокументов КАК КурсыВалют
	|		ПО (Справочник.Объект = КурсыВалют.Документ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютРасчетовПоДоговорам.СрезПоследних(,) КАК КурсыВалютПоДоговору
	|		ПО (Справочник.Договор = КурсыВалютПоДоговору.Договор)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК КлючиАналитикиУчетаПоПартнерам
	|		ПО ОсновныеПараметрыРасчета.АналитикаУчетаПоПартнерам = КлючиАналитикиУчетаПоПартнерам.Ссылка";
	
	ЗапросГлобальныхПеременных.УстановитьПараметр("ОсновныеПараметрыРасчета", ТаблицаОсновныхПараметровРасчета);
	ТаблицаОсновныхПараметровРасчета = ЗапросГлобальныхПеременных.Выполнить().Выгрузить();

	НачалоДняПорядкаМинимальный     = '39991231235959';
	НачалоДняПорядкаФактМинимальный = '39991231235959';
	
	Для Каждого СтрокаОсновныхПараметровРасчета Из ТаблицаОсновныхПараметровРасчета Цикл

		СтрокаОсновныхПараметровРасчета.ФиксированныйКурсРегл = ?(
			СтрокаОсновныхПараметровРасчета.КурсЗнаменательВалютыВзаиморасчетов = 0, 0,
			СтрокаОсновныхПараметровРасчета.КурсЧислительВалютыВзаиморасчетов
			/ СтрокаОсновныхПараметровРасчета.КурсЗнаменательВалютыВзаиморасчетов);
			
		СтрокаОсновныхПараметровРасчета.ФиксированныйКурсУпр = ?(
			СтрокаОсновныхПараметровРасчета.КурсЗнаменательВалютыВзаиморасчетов = 0
			Или СтрокаОсновныхПараметровРасчета.КурсЧислительВалютыУправленческогоУчета = 0, 0,
			СтрокаОсновныхПараметровРасчета.КурсЧислительВалютыВзаиморасчетов
			* СтрокаОсновныхПараметровРасчета.КурсЗнаменательВалютыУправленческогоУчета
			/ (СтрокаОсновныхПараметровРасчета.КурсЗнаменательВалютыВзаиморасчетов
			* СтрокаОсновныхПараметровРасчета.КурсЧислительВалютыУправленческогоУчета));
			
		СтрокаОсновныхПараметровРасчета.ФиксированныйКурсНакладной = СтрокаОсновныхПараметровРасчета.ТипОбъектаРасчетов
			= Перечисления.ТипыОбъектовРасчетов.Накладная И СтрокаОсновныхПараметровРасчета.ВариантКурсаДоговора
			= Перечисления.ВариантыКурсаДоговора.ФиксированныйНаДатуОтгрузки;
			
		//Если график исполнения в договоре, то вместо графика заказа будет уточняться график договора.
		//Если пользователь каким-то образом ввел заказы с графиками по такому договору, то все этапы таких заказов будут отнесены к графику договора
		//и закрываться будут по ФИФО независимо от привязки накладных к заказам
		СтрокаОсновныхПараметровРасчета.ГрафикВДоговоре = ЗначениеЗаполнено(СтрокаОсновныхПараметровРасчета.ГрафикИсполненияДоговора);
		
		СтрокаОсновныхПараметровРасчета.РассчитыватьПлан = Лев(СтрокаОсновныхПараметровРасчета.ПорядокПлан, 4) <> "3000";
		СтрокаОсновныхПараметровРасчета.РассчитыватьФакт = Лев(СтрокаОсновныхПараметровРасчета.ПорядокФакт, 4) <> "3000";
		
		Если НЕ ТребуетсяРассчитыватьПлан И СтрокаОсновныхПараметровРасчета.РассчитыватьПлан Тогда
			ТребуетсяРассчитыватьПлан = Истина;
		КонецЕсли;
		
		СтрокаОсновныхПараметровРасчета.Порядок = Мин(СтрокаОсновныхПараметровРасчета.ПорядокФакт,СтрокаОсновныхПараметровРасчета.ПорядокПлан);
		
		Если ЗначениеЗаполнено(СтрокаОсновныхПараметровРасчета.Порядок) Тогда
			СтрокаОсновныхПараметровРасчета.НачалоДняПорядка = Дата(Лев(СтрокаОсновныхПараметровРасчета.Порядок,8));
		Иначе
			СтрокаОсновныхПараметровРасчета.НачалоДняПорядка = Дата(1,1,1,1,1,2);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаОсновныхПараметровРасчета.ПорядокФакт) Тогда
			СтрокаОсновныхПараметровРасчета.НачалоДняПорядкаФакт = Дата(Лев(СтрокаОсновныхПараметровРасчета.ПорядокФакт,8));
		Иначе
			СтрокаОсновныхПараметровРасчета.НачалоДняПорядкаФакт = Дата(1,1,1,1,1,2);
		КонецЕсли;
		
		Если НЕ ЕстьЗаписиРасчетовСКлиентами И СтрокаОсновныхПараметровРасчета.ЭтоРасчетыСКлиентами Тогда
			ЕстьЗаписиРасчетовСКлиентами = Истина;
		КонецЕсли;
		
		Если НЕ ЕстьЗаписиРасчетовСПоставщиками И НЕ СтрокаОсновныхПараметровРасчета.ЭтоРасчетыСКлиентами Тогда
			ЕстьЗаписиРасчетовСПоставщиками = Истина;
		КонецЕсли;
		
		Если СтрокаОсновныхПараметровРасчета.Регистратор = Тип("ДокументСсылка.ВводОстатков")
			ИЛИ СтрокаОсновныхПараметровРасчета.Регистратор = Тип("ДокументСсылка.ВводОстатковВзаиморасчетов") Тогда
			СтрокаОсновныхПараметровРасчета.ДатаПереоценки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаОсновныхПараметровРасчета.Регистратор, "Дата");
		Иначе
			Если СтрокаОсновныхПараметровРасчета.Порядок <> "" Тогда
				СтрокаОсновныхПараметровРасчета.ДатаПереоценки = НачалоДня(Дата(Лев(СтрокаОсновныхПараметровРасчета.Порядок,8))-1);
			КонецЕсли;
		КонецЕсли;
		
		НачалоДняПорядкаМинимальный = Мин(НачалоДняПорядкаМинимальный, СтрокаОсновныхПараметровРасчета.НачалоДняПорядка);
		НачалоДняПорядкаФактМинимальный = Мин(НачалоДняПорядкаФактМинимальный, СтрокаОсновныхПараметровРасчета.НачалоДняПорядкаФакт);
		
	КонецЦикла;
	
	РазмерПорцииЗаписи = РазмерПорцииЗаписи();
	ХозяйственныеОперацииНеОтгрузка = ХозяйственныеОперацииНеОтгрузка();
	ЗачетОплатПоДатеПлатежа = Константы.ЗачетОплатПоДатеПлатежа.Получить() = 1;
	ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
	НачалоДняПорядкаЕстьРазличные = ОбщегоНазначенияКлиентСервер.СвернутьМассив(
		ТаблицаОсновныхПараметровРасчета.ВыгрузитьКолонку("НачалоДняПорядка")).Количество() > 1;

	ГлобальныеПеременные = Новый Структура; 
	ГлобальныеПеременные.Вставить("ЕжедневнаяПереоценка",                               Константы.ПереоцениватьВалютныеСредстваПоДням.Получить());
	ГлобальныеПеременные.Вставить("РазмерПорцииЗаписи",                                 РазмерПорцииЗаписи);
	ГлобальныеПеременные.Вставить("ВалютаУправленческогоУчета",                         ВалютаУправленческогоУчета);
	ГлобальныеПеременные.Вставить("ТребуетсяРассчитыватьПлан",                          ТребуетсяРассчитыватьПлан);
	ГлобальныеПеременные.Вставить("ЕстьЗаписиРасчетовСКлиентами",                       ЕстьЗаписиРасчетовСКлиентами);
	ГлобальныеПеременные.Вставить("ЕстьЗаписиРасчетовСПоставщиками",                    ЕстьЗаписиРасчетовСПоставщиками);
	ГлобальныеПеременные.Вставить("НачалоДняПорядкаЕстьРазличные",                      НачалоДняПорядкаЕстьРазличные);
	
	МассивОбработчиков = Новый Массив;
	МассивОбработчиков.Добавить("РегистрыНакопления.РасчетыСКлиентами.ОбработатьДанныеДляПереходаНаНовуюВерсию");
	МассивОбработчиков.Добавить("РегистрыНакопления.РасчетыСПоставщиками.ОбработатьДанныеДляПереходаНаНовуюВерсию");
	
	Запрос                         = Новый Запрос;
	Менеджер                       = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = Менеджер;
	Запрос.УстановитьПараметр("ЗачетОплатПоДатеПлатежа",     ЗачетОплатПоДатеПлатежа);
	Запрос.УстановитьПараметр("ВалютаУпр",                   ВалютаУправленческогоУчета);
	Запрос.УстановитьПараметр("РазмерПорцииЗаписи",          РазмерПорцииЗаписи);
	Запрос.УстановитьПараметр("СписокТиповЗаказов",          СписокТиповРегистраторовПланов());
	Запрос.УстановитьПараметр("ОперацииСРучнымКурсом",        ХозяйственныеОперацииСРучнымКурсом());
	Запрос.УстановитьПараметр("ИдентификаторНеиспользуемойФинЗаписи", ПроведениеДокументов.ИдентификаторНеиспользуемойФинЗаписи());
	Запрос.УстановитьПараметр("ПустыеСсылкиНаЗаказы",        ПустыеСсылкиНаЗаказы());
	Запрос.УстановитьПараметр("НачалоДняПорядкаМинимальный", НачалоДняПорядкаМинимальный);
	Запрос.УстановитьПараметр("НачалоДняПорядкаФактМинимальный", НачалоДняПорядкаФактМинимальный);
	Запрос.УстановитьПараметр("ОсновныеПараметрыРасчета",    ТаблицаОсновныхПараметровРасчета);
	Запрос.УстановитьПараметр("СписокАналитикУчетаПоПартнерам", ОбщегоНазначенияКлиентСервер.СвернутьМассив(
		ТаблицаОсновныхПараметровРасчета.ВыгрузитьКолонку("АналитикаУчетаПоПартнерам")));
	
	#КонецОбласти
	
	#Область ПолучениеДанных
	
	//Движения до начала пересчета и остатки.
	СформироватьВТДанныхРегистров(Запрос, ГлобальныеПеременные);
	//Данные регистров с порядком меньше порядка начала расчета, далее дополняются.
	ТаблицаРасчетовСКлиентамиПоСрокам        = ЗаписиДоНачалаРасчета(Запрос, ГлобальныеПеременные, "РасчетыСКлиентамиПоСрокам", Истина);
	ТаблицаРасчетовСПоставщикамиПоСрокам     = ЗаписиДоНачалаРасчета(Запрос, ГлобальныеПеременные, "РасчетыСПоставщикамиПоСрокам", Ложь);
	Если ГлобальныеПеременные.ТребуетсяРассчитыватьПлан Тогда
		ТаблицаПланОплатКлиентам               = ЗаписиДоНачалаРасчета(Запрос, ГлобальныеПеременные, "РасчетыСКлиентамиПланОплат", Истина);
		ТаблицаПланОплатПоставщикам            = ЗаписиДоНачалаРасчета(Запрос, ГлобальныеПеременные, "РасчетыСПоставщикамиПланОплат", Ложь);
		ТаблицаПланОтгрузокПоставокКлиентам    = ЗаписиДоНачалаРасчета(Запрос, ГлобальныеПеременные, "РасчетыСКлиентамиПланОтгрузок", Истина);
		ТаблицаПланОтгрузокПоставокПоставщикам = ЗаписиДоНачалаРасчета(Запрос, ГлобальныеПеременные, "РасчетыСПоставщикамиПланПоставок", Ложь);
	КонецЕсли;
	
	Если ГлобальныеПеременные.ЕстьЗаписиРасчетовСКлиентами Тогда
		
		//Движения после начала пересчета и остатки до начала пересчета для распределения.
		РасчетыОтгрузкиПоставкиКлиенты = ПолучитьОтгрузкиПоставки(Запрос, ГлобальныеПеременные, Истина);
		РасчетыОтгрузкиПоставкиКлиенты.Индексы.Добавить("ОбъектРасчетов,АналитикаУчетаПоПартнерам,ВалютаРасчетов");
		
		//Учтены только приходы по заказам, графикам и предоплатным накладным.
		//Остальные расходы и приходы добавляются при распределении фактических взаиморасчетов.
		РасчетыОплатыКлиенты = ПолучитьОплаты(Запрос, ГлобальныеПеременные, Истина);
		РасчетыОплатыКлиенты.Индексы.Добавить("ОбъектРасчетов,АналитикаУчетаПоПартнерам,ВалютаРасчетов");
		
		ТаблицаНакладныхКлиенты = ПолучитьДанныеНакладных(Запрос, Истина);
		
	КонецЕсли;
	
	Если ГлобальныеПеременные.ЕстьЗаписиРасчетовСПоставщиками Тогда
		
		//Движения после начала пересчета и остатки до начала пересчета для распределения.
		РасчетыОтгрузкиПоставкиПоставщики = ПолучитьОтгрузкиПоставки(Запрос, ГлобальныеПеременные, Ложь);
		РасчетыОтгрузкиПоставкиПоставщики.Индексы.Добавить("ОбъектРасчетов,АналитикаУчетаПоПартнерам,ВалютаРасчетов");
		
		//Учтены только приходы по заказам, графикам и предоплатным накладным.
		//Остальные расходы и приходы добавляются при распределении фактических взаиморасчетов.
		РасчетыОплатыПоставщики = ПолучитьОплаты(Запрос, ГлобальныеПеременные, Ложь);
		РасчетыОплатыПоставщики.Индексы.Добавить("ОбъектРасчетов,АналитикаУчетаПоПартнерам,ВалютаРасчетов");
		
		ТаблицаНакладныхПоставщики = ПолучитьДанныеНакладных(Запрос, Ложь);
		
	КонецЕсли;
	
	ДатаНачалаКурсов = ОпределитьДатуНачалаКурсовВалют(Запрос, ГлобальныеПеременные.ЕстьЗаписиРасчетовСКлиентами, ГлобальныеПеременные.ЕстьЗаписиРасчетовСПоставщиками);
	
	Если ГлобальныеПеременные.ТребуетсяРассчитыватьПлан Тогда
		
		Если ГлобальныеПеременные.ЕстьЗаписиРасчетовСКлиентами Тогда
			
			// Остатки плановых оплат для уточнения и закрытия нераспределенными авансами.
			ОстаткиПлановыхОплатКлиенты = Запрос.МенеджерВременныхТаблиц.Таблицы["ВТРасчетыПланОплатОстаткиКлиенты"].ПолучитьДанные().Выгрузить(); //ТаблицаЗначений
			ОстаткиПлановыхОплатКлиенты.Индексы.Добавить("ОбъектРасчетов,АналитикаУчетаПоПартнерам,ВалютаРасчетов");
			
			// Остатки плановых отгрузок для уточнения и закрытия нераспределенными авансами.
			ОстаткиПлановыхОтгрузокКлиенты = Запрос.МенеджерВременныхТаблиц.Таблицы["ВТРасчетыПланОтгрузокПоставокОстаткиКлиенты"].ПолучитьДанные().Выгрузить(); //ТаблицаЗначений
			ОстаткиПлановыхОтгрузокКлиенты.Индексы.Добавить("ОбъектРасчетов,АналитикаУчетаПоПартнерам,ВалютаРасчетов");
			
			// Остатки и движения нераспределенных авансов.
			ДвиженияПредоплатыДляСуммированияКлиенты = ОстаткиНераспределенныхАвансовПлановойОплатыНаНачалоПересчета(Запрос, Истина);
			ДвиженияПредоплатыДляСуммированияКлиенты.Индексы.Добавить("ОбъектРасчетов,АналитикаУчетаПоПартнерам,ВалютаРасчетов");
			
			ОстаткиАвансовКлиенты = ДвиженияПредоплатыДляСуммированияКлиенты.Скопировать(Новый Структура("Зачтено, ОстатокПоложительный", Ложь, Истина));
			ОстаткиАвансовКлиенты.Свернуть("ОбъектРасчетов,АналитикаУчетаПоПартнерам,ВалютаРасчетов,ДатаВозникновения,ДатаПлановогоПогашения,ДокументПлан","Сумма");
			ОстаткиАвансовКлиенты.Индексы.Добавить("ОбъектРасчетов,АналитикаУчетаПоПартнерам,ВалютаРасчетов");
			
			ДвиженияПредоплатыДляСуммированияКлиенты.Свернуть("ОбъектРасчетов,АналитикаУчетаПоПартнерам,ВалютаРасчетов,ДатаДвижения,ДокументПлан,ДатаВозникновения,ДатаПлановогоПогашения,Регистратор,ПорядокОперации,Просуммировано","Сумма");
			
			//Расходные движения накладных, которые распределяются на остатки плановых графиков.
			УточненияГрафиковОплатКлиенты    = ПолучитьУточненияГрафиковОплат(Запрос, ГлобальныеПеременные, Истина);
			УточненияГрафиковОплатКлиенты.Индексы.Добавить("ОбъектРасчетов,АналитикаУчетаПоПартнерам,ВалютаРасчетов");
			
			УточненияГрафиковОтгрузокКлиенты = ПолучитьУточненияГрафиковОтгрузок(Запрос, ГлобальныеПеременные, Истина);
			УточненияГрафиковОтгрузокКлиенты.Индексы.Добавить("ОбъектРасчетов,АналитикаУчетаПоПартнерам,ВалютаРасчетов");
			
			//Приходные движения заказов, так же в эту таблицу дописываются движения уточнений графика.
			//Используется для переноса движений в таблицу записей регистра накопления и для определения остатков плановых оплат на каждый день.
			ДвиженияПлановыхОплатДляСуммированияКлиенты    = ПолучитьПриходныеДвиженияПоПлановымОплатам(Запрос, ГлобальныеПеременные, Истина);
			ДвиженияПлановыхОплатДляСуммированияКлиенты.Индексы.Добавить("ОбъектРасчетов,АналитикаУчетаПоПартнерам,ВалютаРасчетов");
			
			ДвиженияПлановыхОтгрузокДляСуммированияКлиенты = ПолучитьПриходныеДвиженияПоПлановымОтгрузкам(Запрос, ГлобальныеПеременные, Истина);
			ДвиженияПлановыхОтгрузокДляСуммированияКлиенты.Индексы.Добавить("ОбъектРасчетов,АналитикаУчетаПоПартнерам,ВалютаРасчетов");
			
		КонецЕсли;
		
		Если ГлобальныеПеременные.ЕстьЗаписиРасчетовСПоставщиками Тогда
			
			// Остатки плановых оплат для уточнения и закрытия нераспределенными авансами.
			ОстаткиПлановыхОплатПоставщики = Запрос.МенеджерВременныхТаблиц.Таблицы["ВТРасчетыПланОплатОстаткиПоставщики"].ПолучитьДанные().Выгрузить(); //ТаблицаЗначений
			ОстаткиПлановыхОплатПоставщики.Индексы.Добавить("ОбъектРасчетов,АналитикаУчетаПоПартнерам,ВалютаРасчетов");
			
			// Остатки плановых отгрузок для уточнения и закрытия нераспределенными авансами.
			ОстаткиПлановыхОтгрузокПоставщики = Запрос.МенеджерВременныхТаблиц.Таблицы["ВТРасчетыПланОтгрузокПоставокОстаткиПоставщики"].ПолучитьДанные().Выгрузить(); //ТаблицаЗначений
			ОстаткиПлановыхОтгрузокПоставщики.Индексы.Добавить("ОбъектРасчетов,АналитикаУчетаПоПартнерам,ВалютаРасчетов");
			
			// Остатки и движения нераспределенных авансов.
			ДвиженияПредоплатыДляСуммированияПоставщики = ОстаткиНераспределенныхАвансовПлановойОплатыНаНачалоПересчета(Запрос, Ложь);
			ДвиженияПредоплатыДляСуммированияПоставщики.Индексы.Добавить("ОбъектРасчетов,АналитикаУчетаПоПартнерам,ВалютаРасчетов");
			
			ОстаткиАвансовПоставщики = ДвиженияПредоплатыДляСуммированияПоставщики.Скопировать(Новый Структура("Зачтено, ОстатокПоложительный", Ложь, Истина));
			ОстаткиАвансовПоставщики.Свернуть("ОбъектРасчетов,АналитикаУчетаПоПартнерам,ВалютаРасчетов,ДатаВозникновения,ДатаПлановогоПогашения,ДокументПлан","Сумма");
			ОстаткиАвансовПоставщики.Индексы.Добавить("ОбъектРасчетов,АналитикаУчетаПоПартнерам,ВалютаРасчетов");
			
			ДвиженияПредоплатыДляСуммированияПоставщики.Свернуть("ОбъектРасчетов,АналитикаУчетаПоПартнерам,ВалютаРасчетов,ДатаДвижения,ДокументПлан,ДатаВозникновения,ДатаПлановогоПогашения,Регистратор,ПорядокОперации,Просуммировано","Сумма");
			
			//Расходные движения накладных, которые распределяются на остатки плановых графиков.
			УточненияГрафиковОплатПоставщики    = ПолучитьУточненияГрафиковОплат(Запрос, ГлобальныеПеременные, Ложь);
			УточненияГрафиковОплатПоставщики.Индексы.Добавить("ОбъектРасчетов,АналитикаУчетаПоПартнерам,ВалютаРасчетов");
			
			УточненияГрафиковОтгрузокПоставщики = ПолучитьУточненияГрафиковОтгрузок(Запрос, ГлобальныеПеременные, Ложь);
			УточненияГрафиковОтгрузокПоставщики.Индексы.Добавить("ОбъектРасчетов,АналитикаУчетаПоПартнерам,ВалютаРасчетов");
			
			//Приходные движения заказов, так же в эту таблицу дописываются движения уточнений графика.
			//Используется для переноса движений в таблицу записей регистра накопления и для определения остатков плановых оплат на каждый день.
			ДвиженияПлановыхОплатДляСуммированияПоставщики    = ПолучитьПриходныеДвиженияПоПлановымОплатам(Запрос, ГлобальныеПеременные, Ложь);
			ДвиженияПлановыхОплатДляСуммированияПоставщики.Индексы.Добавить("ОбъектРасчетов,АналитикаУчетаПоПартнерам,ВалютаРасчетов");
			
			ДвиженияПлановыхОтгрузокДляСуммированияПоставщики = ПолучитьПриходныеДвиженияПоПлановымОтгрузкам(Запрос, ГлобальныеПеременные, Ложь);
			ДвиженияПлановыхОтгрузокДляСуммированияПоставщики.Индексы.Добавить("ОбъектРасчетов,АналитикаУчетаПоПартнерам,ВалютаРасчетов");
			
		КонецЕсли;
		
	КонецЕсли;
	
	СоздатьТаблицуДатЗаПериод(Запрос.МенеджерВременныхТаблиц, "ТаблицаДат", ДатаНачалаКурсов, НачалоДня(ТекущаяДатаСеанса()));
	
	#КонецОбласти
	
	КоличествоСтрокКОбработке = ТаблицаОсновныхПараметровРасчета.Количество();
	
	Для Каждого СтрокаОсновныхПараметровРасчета Из ТаблицаОсновныхПараметровРасчета Цикл
		
		#Область ПолучениеДанныхДляРаспределения
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ОбъектРасчетов",            СтрокаОсновныхПараметровРасчета.ОбъектРасчетов);
		СтруктураОтбора.Вставить("АналитикаУчетаПоПартнерам", СтрокаОсновныхПараметровРасчета.АналитикаУчетаПоПартнерам);
		СтруктураОтбора.Вставить("ВалютаРасчетов",            СтрокаОсновныхПараметровРасчета.ВалютаРасчетов);
		
		Если СтрокаОсновныхПараметровРасчета.ЭтоРасчетыСКлиентами Тогда
			
			ХозяйственныеОперации = Новый Соответствие;
			ХозяйственныеОперации.Вставить("ЗачетАванса",             Перечисления.ХозяйственныеОперации.ЗачетАвансаКлиента);
			ХозяйственныеОперации.Вставить("ПогашениеЗадолженности",  Перечисления.ХозяйственныеОперации.ПогашениеЗадолженностиКлиента);
			ХозяйственныеОперации.Вставить("ВозвратАванса",           Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
			ХозяйственныеОперации.Вставить("ПереоценкаПоложительная", Перечисления.ХозяйственныеОперации.КурсовыеРазницыКлиентыПрибыль);
			ХозяйственныеОперации.Вставить("ПереоценкаОтрицательная", Перечисления.ХозяйственныеОперации.КурсовыеРазницыКлиентыУбыток);
			ХозяйственныеОперации.Вставить("Планирование",            Перечисления.ХозяйственныеОперации.ПланированиеПоЗаказуКлиента);
			
			НастройкиХО = Новый Соответствие;
			НастройкиХО.Вставить("ЗачетОплаты", Справочники.НастройкиХозяйственныхОпераций.ЗачетАвансаКлиента);
			НастройкиХО.Вставить("ПереоценкаПоложительная", Справочники.НастройкиХозяйственныхОпераций.КурсовыеРазницыКлиентыПрибыль);
			НастройкиХО.Вставить("ПереоценкаОтрицательная", Справочники.НастройкиХозяйственныхОпераций.КурсовыеРазницыКлиентыУбыток);
			
			РасчетыОтгрузкиПоставки = РасчетыОтгрузкиПоставкиКлиенты.Скопировать(СтруктураОтбора);
			РасчетыОплаты = РасчетыОплатыКлиенты.Скопировать(СтруктураОтбора);
			
			Если ГлобальныеПеременные.ТребуетсяРассчитыватьПлан Тогда
				
				ДвиженияПредоплатыДляСуммирования = ДвиженияПредоплатыДляСуммированияКлиенты.Скопировать(СтруктураОтбора);
				ДвиженияПлановыхОплатДляСуммирования = ДвиженияПлановыхОплатДляСуммированияКлиенты.Скопировать(СтруктураОтбора);
				ДвиженияПлановыхОтгрузокДляСуммирования = ДвиженияПлановыхОтгрузокДляСуммированияКлиенты.Скопировать(СтруктураОтбора);
				УточненияГрафиковОплат = УточненияГрафиковОплатКлиенты.Скопировать(СтруктураОтбора);
				УточненияГрафиковОтгрузок = УточненияГрафиковОтгрузокКлиенты.Скопировать(СтруктураОтбора);
			
				ОстаткиПлановыхОплат = ОстаткиПлановыхОплатКлиенты.Скопировать(СтруктураОтбора);
				ОстаткиПлановыхОплат.Индексы.Добавить("ДокументПлан,НераспределенныйАванс");
				
				ОстаткиПлановыхОтгрузок = ОстаткиПлановыхОтгрузокКлиенты.Скопировать(СтруктураОтбора);
				ОстаткиПлановыхОтгрузок.Индексы.Добавить("ДокументПлан,НераспределенныйАванс");
				
				ОстаткиАвансов = ОстаткиАвансовКлиенты.Скопировать(СтруктураОтбора);
				
			КонецЕсли;
			
			ДанныеНакладных = Новый Соответствие;
			ТаблицаДанныхНакладных = ТаблицаНакладныхКлиенты.Скопировать(СтруктураОтбора);
			Для Каждого Строка Из ТаблицаДанныхНакладных Цикл
				ДанныеНакладных.Вставить(Строка.Накладная,
											СтруктураСумм(Строка.Сумма,
											Строка.СуммаРегл,
											Строка.СуммаУпр));
			КонецЦикла;
			ТаблицаДанныхНакладных.Очистить();
			
			СтруктураОтбора.Удалить("ВалютаРасчетов");
			СтруктураОтбора.Вставить("Валюта",СтрокаОсновныхПараметровРасчета.ВалютаРасчетов);
			
			Если ГлобальныеПеременные.ТребуетсяРассчитыватьПлан Тогда
				ТаблицаПланОплат = ТаблицаПланОплатКлиентам.Скопировать(СтруктураОтбора);
				ТаблицаПланОтгрузокПоставок = ТаблицаПланОтгрузокПоставокКлиентам.Скопировать(СтруктураОтбора);
			КонецЕсли;
			ТаблицаРасчетовПоСрокам = ТаблицаРасчетовСКлиентамиПоСрокам.Скопировать(СтруктураОтбора);
			
			ИмяРегистраРасчетов = "РасчетыСКлиентамиПоСрокам";
			ИмяРегистраПланаОплат = "РасчетыСКлиентамиПланОплат";
			ИмяРегистраПланаОтгрузкиПоставки = "РасчетыСКлиентамиПланОтгрузок";
		
			ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом;
			
		Иначе
			
			ХозяйственныеОперации = Новый Соответствие;
			ХозяйственныеОперации.Вставить("ЗачетАванса",             Перечисления.ХозяйственныеОперации.ЗачетАвансаПоставщику);
			ХозяйственныеОперации.Вставить("ПогашениеЗадолженности",  Перечисления.ХозяйственныеОперации.ПогашениеЗадолженностиПоставщику);
			ХозяйственныеОперации.Вставить("ВозвратАванса",           Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика);
			ХозяйственныеОперации.Вставить("ПереоценкаПоложительная", Перечисления.ХозяйственныеОперации.КурсовыеРазницыПоставщикиУбыток);
			ХозяйственныеОперации.Вставить("ПереоценкаОтрицательная", Перечисления.ХозяйственныеОперации.КурсовыеРазницыПоставщикиПрибыль);
			ХозяйственныеОперации.Вставить("Планирование",            Перечисления.ХозяйственныеОперации.ПланированиеПоЗаказуПоставщику);
			
			НастройкиХО = Новый Соответствие;
			НастройкиХО.Вставить("ЗачетОплаты", Справочники.НастройкиХозяйственныхОпераций.ЗачетАвансаПоставщику);
			НастройкиХО.Вставить("ПереоценкаПоложительная", Справочники.НастройкиХозяйственныхОпераций.КурсовыеРазницыПоставщикиУбыток);
			НастройкиХО.Вставить("ПереоценкаОтрицательная", Справочники.НастройкиХозяйственныхОпераций.КурсовыеРазницыПоставщикиПрибыль);
			
			РасчетыОтгрузкиПоставки = РасчетыОтгрузкиПоставкиПоставщики.Скопировать(СтруктураОтбора);
			РасчетыОплаты = РасчетыОплатыПоставщики.Скопировать(СтруктураОтбора);
			
			Если ГлобальныеПеременные.ТребуетсяРассчитыватьПлан Тогда
				
				ДвиженияПредоплатыДляСуммирования = ДвиженияПредоплатыДляСуммированияПоставщики.Скопировать(СтруктураОтбора);
				ДвиженияПлановыхОплатДляСуммирования = ДвиженияПлановыхОплатДляСуммированияПоставщики.Скопировать(СтруктураОтбора);
				ДвиженияПлановыхОтгрузокДляСуммирования = ДвиженияПлановыхОтгрузокДляСуммированияПоставщики.Скопировать(СтруктураОтбора);
				УточненияГрафиковОплат = УточненияГрафиковОплатПоставщики.Скопировать(СтруктураОтбора);
				УточненияГрафиковОтгрузок = УточненияГрафиковОтгрузокПоставщики.Скопировать(СтруктураОтбора);
				
				ОстаткиПлановыхОплат = ОстаткиПлановыхОплатПоставщики.Скопировать(СтруктураОтбора);
				ОстаткиПлановыхОплат.Индексы.Добавить("ДокументПлан,НераспределенныйАванс");
				
				ОстаткиПлановыхОтгрузок = ОстаткиПлановыхОтгрузокПоставщики.Скопировать(СтруктураОтбора);
				ОстаткиПлановыхОтгрузок.Индексы.Добавить("ДокументПлан,НераспределенныйАванс");
				
				ОстаткиАвансов = ОстаткиАвансовПоставщики.Скопировать(СтруктураОтбора);
				
			КонецЕсли;
			
			ДанныеНакладных = Новый Соответствие;
			ТаблицаДанныхНакладных = ТаблицаНакладныхПоставщики.Скопировать(СтруктураОтбора);
			Для Каждого Строка Из ТаблицаДанныхНакладных Цикл
				ДанныеНакладных.Вставить(Строка.Накладная,
											СтруктураСумм(Строка.Сумма,
											Строка.СуммаРегл,
											Строка.СуммаУпр));
			КонецЦикла;
			ТаблицаДанныхНакладных.Очистить();
			
			СтруктураОтбора.Удалить("ВалютаРасчетов");
			СтруктураОтбора.Вставить("Валюта",СтрокаОсновныхПараметровРасчета.ВалютаРасчетов);
			
			Если ГлобальныеПеременные.ТребуетсяРассчитыватьПлан Тогда
				ТаблицаПланОплат = ТаблицаПланОплатПоставщикам.Скопировать(СтруктураОтбора);
				ТаблицаПланОтгрузокПоставок = ТаблицаПланОтгрузокПоставокПоставщикам.Скопировать(СтруктураОтбора);
			КонецЕсли;
			ТаблицаРасчетовПоСрокам = ТаблицаРасчетовСПоставщикамиПоСрокам.Скопировать(СтруктураОтбора);
			
			ИмяРегистраРасчетов = "РасчетыСПоставщикамиПоСрокам";
			ИмяРегистраПланаОплат = "РасчетыСПоставщикамиПланОплат";
			ИмяРегистраПланаОтгрузкиПоставки = "РасчетыСПоставщикамиПланПоставок";
		
			ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком;
		КонецЕсли;
		
		ГлобальныеПеременные.Вставить("Организация", СтрокаОсновныхПараметровРасчета.Организация);
		ГлобальныеПеременные.Вставить("ГрафикВДоговоре", СтрокаОсновныхПараметровРасчета.ГрафикВДоговоре);
		ГлобальныеПеременные.Вставить("ПорядокПереоценки", Новый Соответствие);
		ГлобальныеПеременные.Вставить("ХозяйственныеОперации", ХозяйственныеОперации);
		ГлобальныеПеременные.Вставить("НастройкиХО", НастройкиХО);
		ГлобальныеПеременные.Вставить("РассчитыватьПлан", Лев(СтрокаОсновныхПараметровРасчета.ПорядокПлан, 4) <> "3000");
		ГлобальныеПеременные.Вставить("РассчитыватьФакт", Лев(СтрокаОсновныхПараметровРасчета.ПорядокФакт, 4) <> "3000");
		ГлобальныеПеременные.Вставить("ВалютаРегламентированногоУчета", СтрокаОсновныхПараметровРасчета.ВалютаРегламентированногоУчета);
		ГлобальныеПеременные.Вставить("Договор", СтрокаОсновныхПараметровРасчета.Договор); 
		ГлобальныеПеременные.Вставить("ВариантКурсаДоговора", СтрокаОсновныхПараметровРасчета.ВариантКурсаДоговора);
		ГлобальныеПеременные.Вставить("Порядок", Мин(СтрокаОсновныхПараметровРасчета.ПорядокФакт, СтрокаОсновныхПараметровРасчета.ПорядокПлан));
		ГлобальныеПеременные.Вставить("ФиксированныйКурсНакладной", СтрокаОсновныхПараметровРасчета.ФиксированныйКурсНакладной);
		ГлобальныеПеременные.Вставить("ФиксированныйКурсРегл", СтрокаОсновныхПараметровРасчета.ФиксированныйКурсРегл);
		ГлобальныеПеременные.Вставить("ФиксированныйКурсУпр", СтрокаОсновныхПараметровРасчета.ФиксированныйКурсУпр);
		ГлобальныеПеременные.Вставить("АналитикаУчетаПоПартнерам", СтрокаОсновныхПараметровРасчета.АналитикаУчетаПоПартнерам);
		ГлобальныеПеременные.Вставить("ВалютаРасчетов", СтрокаОсновныхПараметровРасчета.ВалютаРасчетов);
		ГлобальныеПеременные.Вставить("ДополнительныеСвойстваПроведения", ДополнительныеСвойстваПроведения);
		ГлобальныеПеременные.Вставить("ЗаписыватьИзменения", СтрокаОсновныхПараметровРасчета.ЗаписыватьИзменения);
		ГлобальныеПеременные.Вставить("НачальноеЗаполнение", СтрокаОсновныхПараметровРасчета.НачальноеЗаполнение);
		ГлобальныеПеременные.Вставить("ОбъектРасчетов", СтрокаОсновныхПараметровРасчета.ОбъектРасчетов);
		ГлобальныеПеременные.Вставить("ПорядокФакт", СтрокаОсновныхПараметровРасчета.ПорядокФакт);
		ГлобальныеПеременные.Вставить("ПорядокПлан", СтрокаОсновныхПараметровРасчета.ПорядокПлан);
		ГлобальныеПеременные.Вставить("Регистратор", СтрокаОсновныхПараметровРасчета.Регистратор);
		ГлобальныеПеременные.Вставить("ЭтоРасчетыСКлиентами", СтрокаОсновныхПараметровРасчета.ЭтоРасчетыСКлиентами);
		ГлобальныеПеременные.Вставить("ДанныеНакладных", ДанныеНакладных);
		
		НачалоДняПорядка     = СтрокаОсновныхПараметровРасчета.НачалоДняПорядка;
		НачалоДняПорядкаФакт = СтрокаОсновныхПараметровРасчета.НачалоДняПорядкаФакт;
		
		Организация = СтрокаОсновныхПараметровРасчета.Организация;
		Контрагент = СтрокаОсновныхПараметровРасчета.Контрагент;
		
		Запрос.УстановитьПараметр("ОбъектРасчетов",             ГлобальныеПеременные.ОбъектРасчетов);
		Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам",  ГлобальныеПеременные.АналитикаУчетаПоПартнерам);
		Запрос.УстановитьПараметр("ВалютаРасчетов",             ГлобальныеПеременные.ВалютаРасчетов);
		Запрос.УстановитьПараметр("ТипРасчетов",                ТипРасчетов);
		Запрос.УстановитьПараметр("НачалоДняПорядка",           НачалоДняПорядка);
		Запрос.УстановитьПараметр("НачалоДняПорядкаФакт",       НачалоДняПорядкаФакт);
		
		НужнаПереоценка = (СтрокаОсновныхПараметровРасчета.ВалютаРасчетов <> СтрокаОсновныхПараметровРасчета.ВалютаРегламентированногоУчета 
			ИЛИ СтрокаОсновныхПараметровРасчета.ВалютаРасчетов <> ВалютаУправленческогоУчета)
			И РасчетыОтгрузкиПоставки.Количество() > 0
			И НЕ СтрокаОсновныхПараметровРасчета.НачальноеЗаполнение;
			
		Если НужнаПереоценка Тогда
			
			ТаблицаКурсовВалют = ПолучитьКурсыВалют(Запрос, ДатаНачалаКурсов, ГлобальныеПеременные);
			ГлобальныеПеременные.Вставить("ТаблицаКурсовВалют", ТаблицаКурсовВалют);
			
			ДатаНачалаКурсовыхРазниц = Макс(НачалоДняПорядкаФакт,
				?(РасчетыОтгрузкиПоставки.Количество() > 0, РасчетыОтгрузкиПоставки[0].ДатаВозникновения, ТекущаяДатаСеанса()));
			ДатаОкончанияКурсовыхРазниц = Макс(НачалоДняПорядка, ТекущаяДатаСеанса(),
				?(РасчетыОтгрузкиПоставки.Количество() > 0, РасчетыОтгрузкиПоставки[РасчетыОтгрузкиПоставки.Количество()-1].ДатаВозникновения, ТекущаяДатаСеанса()),
				?(РасчетыОплаты.Количество() > 0, РасчетыОплаты[РасчетыОплаты.Количество()-1].ДатаВозникновения, ТекущаяДатаСеанса()));
			ДокументыРасчетаКурсовыхРазниц = Документы.РасчетКурсовыхРазниц.ДокументыПереоценки(Организация,
				ДатаНачалаКурсовыхРазниц,
				ДатаОкончанияКурсовыхРазниц,
				ГлобальныеПеременные.ЭтоРасчетыСКлиентами);
				
			ГлобальныеПеременные.Вставить("ДокументыРасчетаКурсовыхРазниц", ДокументыРасчетаКурсовыхРазниц);
			
		КонецЕсли;
		
		//Для определения курса корректировки реализации в минус.
		//Ключ     - ДокументСсылка.РеализациТоваровУслуг, ДокументСсылка.АктВыполненныхРабот
		//Значение - Структура
		//     * СуммаДокумента, СуммаДокументаРегл, СуммаДокументаУпр - нужны для определения среднего курса реализации при проведении корректировок.
		ЗаписейОплаты           = РасчетыОплаты.Количество();
		ЗаписейОтгрузкиПоставки = РасчетыОтгрузкиПоставки.Количество();
		
		Индексы = Новый Структура;
		//Индекс текущей обрабатываемой строки отгрузок.
		Индексы.Вставить("ИндексОтгрузкиПоставки", 0);
		//Индекс текущей обрабатываемой строки оплат.
		Индексы.Вставить("ИндексОплаты", 0);
		
		#КонецОбласти
		
		#Область РаспределениеОплатНаНакладные
		
		ТаблицаЗачетовОплат = Новый ТаблицаЗначений;
		ТаблицаЗачетовОплат.Колонки.Добавить("ЗачетАванса", Новый ОписаниеТипов("Булево"));
		ТаблицаЗачетовОплат.Колонки.Добавить("ЭтоКорректировка", Новый ОписаниеТипов("Булево"));
		ТаблицаЗачетовОплат.Колонки.Добавить("ДатаПогашенияАвансаУточнена", Новый ОписаниеТипов("Булево"));
		ТаблицаЗачетовОплат.Колонки.Добавить("ПериодЗачета", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
		ТаблицаЗачетовОплат.Колонки.Добавить("ПорядокЗачета", ОбщегоНазначения.ОписаниеТипаСтрока(28));
		ТаблицаЗачетовОплат.Колонки.Добавить("ИндексСтрокиОплат", Новый ОписаниеТипов("Число"));
		ТаблицаЗачетовОплат.Колонки.Добавить("ИндексСтрокиОтгрузокПоставок", Новый ОписаниеТипов("Число"));
		ТаблицаЗачетовОплат.Колонки.Добавить("Сумма", Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.ДенежнаяСуммаЛюбогоЗнака.Тип));
		ТаблицаЗачетовОплат.Колонки.Добавить("ПриходДобавлен", Новый ОписаниеТипов("Булево"));
		ТаблицаЗачетовОплат.Колонки.Добавить("ДокументОплаты");
		ТаблицаЗачетовОплат.Колонки.Добавить("ДатаПлановогоПогашенияОплаты", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
		
		ТаблицаЗачетовОплат.Индексы.Добавить("ДокументОплаты,ДатаПогашенияАвансаУточнена");
		
		// Сколько строк отгрузки пропущено по порядку операции для зачета по дате платежа.
		ПропускОтгрузкиПоставки = 0;
		ПропускОплаты = 0;
		
		Пока (Индексы.ИндексОплаты + Индексы.ИндексОтгрузкиПоставки) < (ЗаписейОплаты + ЗаписейОтгрузкиПоставки) Цикл
			
			Если Индексы.ИндексОплаты <= ЗаписейОплаты - 1 И Индексы.ИндексОтгрузкиПоставки <= ЗаписейОтгрузкиПоставки - 1 Тогда 
				
				СтрокаОплаты           = РасчетыОплаты[Индексы.ИндексОплаты];
				СтрокаОтгрузкиПоставки = РасчетыОтгрузкиПоставки[Индексы.ИндексОтгрузкиПоставки];
				
				Если СтрокаОтгрузкиПоставки.СуммаДляРаспределения < 0 Или СтрокаОплаты.СуммаДляРаспределения < 0 Тогда
					ВызватьИсключение(СтрШаблон(НСтр("ru = 'В регистрах взаиморасчетов обнаружены отрицательные остатки на дату %1. Проведение невозможно.'"),
						НачалоДняПорядкаФакт));
				КонецЕсли;
				
				Если СтрокаОтгрузкиПоставки.СуммаДляРаспределения > 0 И СтрокаОплаты.СуммаДляРаспределения > 0 Тогда
					
					ЗачетВПределахРегистратора = 
						СтрокаОплаты.Регистратор = СтрокаОтгрузкиПоставки.Регистратор
						И (СтрокаОплаты.РасчетныйДокумент <> СтрокаОтгрузкиПоставки.РасчетныйДокумент
							ИЛИ СтрокаОплаты.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УдержаниеВознагражденияКомиссионера
							ИЛИ СтрокаОплаты.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УдержаниеВознагражденияКомитентом
							ИЛИ СтрокаОтгрузкиПоставки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПереносПлатежаМеждуФилиалами)
						// Дата равна, тип записи может отличаться
						И Лев(СтрокаОплаты.ПорядокОперации,9) = Лев(СтрокаОтгрузкиПоставки.ПорядокОперации,9)
						// Перенос задолженности - сначала надо отразить задолженность
						И СтрокаОплаты.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПереносЗадолженностиМеждуФилиалами
						// Возвраты оплат должны сначала проходить по долгу (реклассификация)
						И СтрокаОтгрузкиПоставки.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту
						И СтрокаОтгрузкиПоставки.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика
						И СтрокаОтгрузкиПоставки.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиентуНаПлатежнуюКарту;
				
					// Оплата раньше отгрузки.
					Если СтрокаОплаты.ПорядокОперации < СтрокаОтгрузкиПоставки.ПорядокОперации 
						// В пределах регистратора (при расчетах по накладным) должен происходить зачет аванса.
						ИЛИ ЗачетВПределахРегистратора Тогда
						
						// При порядке зачета по датам платежа могут быть документы оплаты(авансы) приоритетнее текущего
						// Поищем их и увеличим пропуск строк отгрузки поставки
						Если ПропускОплаты = 0 И ЗачетОплатПоДатеПлатежа Тогда
							ТекущийПорядокЗачетаПоДатеПлатежа = СтрокаОплаты.ПорядокЗачетаПоДатеПлатежа;
							Индекс = Индексы.ИндексОплаты + 1; 
							Пока Индекс < ЗаписейОплаты И РасчетыОплаты[Индекс].ПорядокОперации < СтрокаОтгрузкиПоставки.ПорядокОперации Цикл
								Если РасчетыОплаты[Индекс].ЕстьОстаток
									И ТекущийПорядокЗачетаПоДатеПлатежа > РасчетыОплаты[Индекс].ПорядокЗачетаПоДатеПлатежа
									И ЗначениеЗаполнено(РасчетыОплаты[Индекс].ДатаПлановогоПогашения) Тогда
									ТекущийПорядокЗачетаПоДатеПлатежа = РасчетыОплаты[Индекс].ПорядокЗачетаПоДатеПлатежа;
									ПропускОплаты = Индекс - Индексы.ИндексОплаты;
								КонецЕсли;
								Индекс = Индекс + 1;
							КонецЦикла;
							
							Если ПропускОплаты <> 0 Тогда
								Индексы.ИндексОплаты = Индексы.ИндексОплаты + ПропускОплаты;
								Продолжить;
							КонецЕсли;
						КонецЕсли;
						
						// Добавление строки зачета.
						СтрокаЗачета = ТаблицаЗачетовОплат.Добавить();
						СтрокаЗачета.ЗачетАванса       = Истина;
						СтрокаЗачета.ЭтоКорректировка  = Ложь;
						СтрокаЗачета.ИндексСтрокиОплат = Индексы.ИндексОплаты;
						СтрокаЗачета.ПриходДобавлен    = СтрокаОплаты.ПриходДобавлен;
						Строказачета.ДатаПогашенияАвансаУточнена = СтрокаОплаты.ЭтоОстаток;
						СтрокаЗачета.ПериодЗачета                   = СтрокаОтгрузкиПоставки.ПериодЗачета;
						СтрокаЗачета.ПорядокЗачета                  = СтрокаОтгрузкиПоставки.ПорядокЗачета;
						СтрокаЗачета.ИндексСтрокиОтгрузокПоставок    = РасчетыОтгрузкиПоставки.Индекс(СтрокаОтгрузкиПоставки);//СтрокаОтгрузкиПоставки.ИндексОсновнойТаблицы;
						СтрокаЗачета.Сумма                           = Мин(СтрокаОплаты.СуммаДляРаспределения, СтрокаОтгрузкиПоставки.СуммаДляРаспределения);
						
						СтрокаОплаты.СуммаДляРаспределения           = СтрокаОплаты.СуммаДляРаспределения - СтрокаЗачета.Сумма;
						СтрокаОтгрузкиПоставки.СуммаДляРаспределения = СтрокаОтгрузкиПоставки.СуммаДляРаспределения - СтрокаЗачета.Сумма;
						
						Если ТипЗнч(СтрокаОплаты.Регистратор) <> Тип("ДокументСсылка.КорректировкаПриобретения")
							И ТипЗнч(СтрокаОплаты.Регистратор) <> Тип("ДокументСсылка.КорректировкаРеализации")
							И ГлобальныеПеременные.РассчитыватьПлан Тогда
							
							Если СтрокаОплаты.ПорядокОперации >= ГлобальныеПеременные.Порядок Тогда
								НовСтр = ДвиженияПредоплатыДляСуммирования.Добавить();
								НовСтр.ДатаДвижения       = НачалоДня(СтрокаОплаты.Период);
								
								НовСтр.ДокументПлан       = СтрокаОплаты.Регистратор;
								НовСтр.ДатаВозникновения = СтрокаОплаты.Период;
								НовСтр.Сумма             = СтрокаЗачета.Сумма;
								
								НовСтр.ПорядокОперации   = СтрокаОплаты.ПорядокОперации;
								НовСтр.Регистратор       = СтрокаОплаты.Регистратор;
								НовСтр.Просуммировано    = ЛОЖЬ;
							КонецЕсли;
							
							НовСтр = ДвиженияПредоплатыДляСуммирования.Добавить();
							
							НовСтр.ДатаДвижения      = НачалоДня(СтрокаОтгрузкиПоставки.ПериодЗачета);
							
							НовСтр.ДокументПлан      = СтрокаОплаты.РасчетныйДокумент;
							НовСтр.ДатаВозникновения = СтрокаОплаты.ДатаВозникновения;
							НовСтр.Сумма             = -СтрокаЗачета.Сумма;
							
							НовСтр.Регистратор       = СтрокаОтгрузкиПоставки.РасчетныйДокумент;
							НовСтр.ПорядокОперации   = СтрокаОтгрузкиПоставки.ПорядокОперации;
							НовСтр.Просуммировано    = ЛОЖЬ;
							
						КонецЕсли;
						
					// Отгрузка раньше оплаты.
					Иначе
					
						// Обычная оплата.
						Если НЕ СтрокаОплаты.ЭтоКорректировка 
							ИЛИ РасчетыОтгрузкиПоставки.НайтиСтроки(Новый Структура("ЕстьОстаток, Регистратор", ИСТИНА, СтрокаОплаты.СвязанныйДокумент)).Количество() = 0 Тогда
							
							Если СтрокаОтгрузкиПоставки.СуммаДляРаспределения > 0 И СтрокаОплаты.СуммаДляРаспределения > 0 Тогда
								
								// При порядке зачета по датам платежа могут быть документы отгрузки/поставки приоритетнее текущего
								// Поищем их и увеличим пропуск строк отгрузки поставки
								Если ПропускОтгрузкиПоставки = 0 И ЗачетОплатПоДатеПлатежа Тогда
									ТекущийПорядокЗачетаПоДатеПлатежа = СтрокаОтгрузкиПоставки.ПорядокЗачетаПоДатеПлатежа ;
									Индекс = Индексы.ИндексОтгрузкиПоставки + 1; 
									Пока Индекс < ЗаписейОтгрузкиПоставки И РасчетыОтгрузкиПоставки[Индекс].ПорядокОперации < СтрокаОплаты.ПорядокОперации Цикл
										Если РасчетыОтгрузкиПоставки[Индекс].ЕстьОстаток
											И ТекущийПорядокЗачетаПоДатеПлатежа > РасчетыОтгрузкиПоставки[Индекс].ПорядокЗачетаПоДатеПлатежа Тогда
											ТекущийПорядокЗачетаПоДатеПлатежа = РасчетыОтгрузкиПоставки[Индекс].ПорядокЗачетаПоДатеПлатежа;
											ПропускОтгрузкиПоставки = Индекс - Индексы.ИндексОтгрузкиПоставки;
										КонецЕсли;
										Индекс = Индекс + 1;
									КонецЦикла;
									
									Если ПропускОтгрузкиПоставки <> 0 Тогда
										Индексы.ИндексОтгрузкиПоставки = Индексы.ИндексОтгрузкиПоставки + ПропускОтгрузкиПоставки;
										Продолжить;
									КонецЕсли;
								КонецЕсли;
								
								СтрокаЗачета = ТаблицаЗачетовОплат.Добавить();
								СтрокаЗачета.ЗачетАванса       = Ложь;
								СтрокаЗачета.ЭтоКорректировка  = СтрокаОплаты.ЭтоКорректировка;
								СтрокаЗачета.ИндексСтрокиОплат = Индексы.ИндексОплаты;
								СтрокаЗачета.ПриходДобавлен    = СтрокаОтгрузкиПоставки.ПриходДобавлен;
								Строказачета.ДатаПогашенияАвансаУточнена = СтрокаОплаты.ЭтоОстаток;
								СтрокаЗачета.ПериодЗачета                = СтрокаОплаты.ПериодЗачета;
								СтрокаЗачета.ПорядокЗачета               = СтрокаОплаты.ПорядокЗачета;
								СтрокаЗачета.ИндексСтрокиОтгрузокПоставок    = РасчетыОтгрузкиПоставки.Индекс(СтрокаОтгрузкиПоставки);
								СтрокаЗачета.Сумма                           = Мин(СтрокаОплаты.СуммаДляРаспределения, СтрокаОтгрузкиПоставки.СуммаДляРаспределения);
								
								СтрокаОплаты.СуммаДляРаспределения           = СтрокаОплаты.СуммаДляРаспределения - СтрокаЗачета.Сумма;
								СтрокаОтгрузкиПоставки.СуммаДляРаспределения = СтрокаОтгрузкиПоставки.СуммаДляРаспределения - СтрокаЗачета.Сумма;
								
							КонецЕсли;
							
						// Корректировка накладной в минус.
						Иначе
							
							ОстаткиСвязанногоДокумента = РасчетыОтгрузкиПоставки.НайтиСтроки(Новый Структура("ЕстьОстаток, Регистратор", ИСТИНА, СтрокаОплаты.СвязанныйДокумент));
							Для Каждого СтрокаОстаткаСвязанногоДокумента Из ОстаткиСвязанногоДокумента Цикл
								Если СтрокаОплаты.ПорядокОперации < СтрокаОстаткаСвязанногоДокумента.ПорядокОперации 
									ИЛИ СтрокаОстаткаСвязанногоДокумента.СуммаДляРаспределения = 0 Тогда
									Продолжить;
								Иначе // Если это корректировка и накладная еще не оплачена полностью, то расчетным документом должна являться накладная.
									
									Если СтрокаОплаты.СуммаДляРаспределения > 0 И СтрокаОстаткаСвязанногоДокумента.СуммаДляРаспределения > 0 Тогда
										СтрокаЗачета = ТаблицаЗачетовОплат.Добавить();
										СтрокаЗачета.ЗачетАванса       = Ложь;
										СтрокаЗачета.ЭтоКорректировка  = Истина;
										СтрокаЗачета.ИндексСтрокиОплат = Индексы.ИндексОплаты;
										СтрокаЗачета.ИндексСтрокиОтгрузокПоставок = РасчетыОтгрузкиПоставки.Индекс(СтрокаОстаткаСвязанногоДокумента);
										СтрокаЗачета.ПериодЗачета      = СтрокаОплаты.ПериодЗачета;
										СтрокаЗачета.ПорядокЗачета     = СтрокаОплаты.ПорядокЗачета;
										СтрокаЗачета.Сумма             = Мин(СтрокаОплаты.СуммаДляРаспределения, СтрокаОстаткаСвязанногоДокумента.СуммаДляРаспределения);
										СтрокаЗачета.ПриходДобавлен    = СтрокаОстаткаСвязанногоДокумента.ПриходДобавлен;
										
										СтрокаОплаты.СуммаДляРаспределения                     = СтрокаОплаты.СуммаДляРаспределения - СтрокаЗачета.Сумма;
										СтрокаОстаткаСвязанногоДокумента.СуммаДляРаспределения = СтрокаОстаткаСвязанногоДокумента.СуммаДляРаспределения - СтрокаЗачета.Сумма;
										СтрокаОстаткаСвязанногоДокумента.ЕстьОстаток = СтрокаОстаткаСвязанногоДокумента.СуммаДляРаспределения > 0;
										
									КонецЕсли;
									
								КонецЕсли;
							КонецЦикла;
							СтрокаОплаты.ЭтоКорректировка = Ложь;
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
				
				// Если порядок зачета по дате платежа - возвращаемся к нужной строке.
				Если ПропускОтгрузкиПоставки <> 0 Тогда
					Индексы.ИндексОтгрузкиПоставки = Индексы.ИндексОтгрузкиПоставки - ПропускОтгрузкиПоставки;
					ПропускОтгрузкиПоставки = 0;
					Если СтрокаОтгрузкиПоставки.СуммаДляРаспределения = 0 Тогда
						СтрокаОтгрузкиПоставки.ЕстьОстаток = Ложь;
					КонецЕсли;
				ИначеЕсли СтрокаОтгрузкиПоставки.СуммаДляРаспределения = 0 Тогда
					Индексы.ИндексОтгрузкиПоставки = Индексы.ИндексОтгрузкиПоставки + 1;
					СтрокаОтгрузкиПоставки.ЕстьОстаток = Ложь;
				КонецЕсли;
				
				Если ПропускОплаты <> 0 Тогда
					Индексы.ИндексОплаты = Индексы.ИндексОплаты - ПропускОплаты;
					ПропускОплаты = 0;
					Если СтрокаОплаты.СуммаДляРаспределения = 0 Тогда
						СтрокаОплаты.ЕстьОстаток = Ложь;
					КонецЕсли;
				ИначеЕсли СтрокаОплаты.СуммаДляРаспределения = 0 Тогда
					Индексы.ИндексОплаты = Индексы.ИндексОплаты + 1;
					СтрокаОплаты.ЕстьОстаток = Ложь;
				КонецЕсли;
				
			Иначе
				
				// Оплаты распределены, остальные отгрузки в приход.
				Если Индексы.ИндексОплаты = ЗаписейОплаты И Индексы.ИндексОтгрузкиПоставки < ЗаписейОтгрузкиПоставки Тогда 
					
					СтрокаОтгрузкиПоставки = РасчетыОтгрузкиПоставки[Индексы.ИндексОтгрузкиПоставки];
					
					СтрокаЗачета = ТаблицаЗачетовОплат.Добавить();
					СтрокаЗачета.ЗачетАванса       = Ложь;
					СтрокаЗачета.ЭтоКорректировка  = Ложь;
					СтрокаЗачета.ИндексСтрокиОплат = -1;
					СтрокаЗачета.ИндексСтрокиОтгрузокПоставок = Индексы.ИндексОтгрузкиПоставки;
					СтрокаЗачета.ПериодЗачета      = СтрокаОтгрузкиПоставки.ПериодЗачета;
					СтрокаЗачета.ПорядокЗачета     = СтрокаОтгрузкиПоставки.ПорядокЗачета;
					СтрокаЗачета.Сумма             = СтрокаОтгрузкиПоставки.СуммаДляРаспределения;
					СтрокаЗачета.ПриходДобавлен    = СтрокаОтгрузкиПоставки.ПриходДобавлен;
					
					Индексы.ИндексОтгрузкиПоставки = Индексы.ИндексОтгрузкиПоставки + 1;
					
				// Отгрузки распределены, остальные оплаты в приход.
				ИначеЕсли Индексы.ИндексОплаты < ЗаписейОплаты И Индексы.ИндексОтгрузкиПоставки = ЗаписейОтгрузкиПоставки Тогда
					
					СтрокаОплаты = РасчетыОплаты[Индексы.ИндексОплаты];
					
					СтрокаЗачета = ТаблицаЗачетовОплат.Добавить();
					СтрокаЗачета.ЗачетАванса       = Ложь;
					СтрокаЗачета.ЭтоКорректировка  = Ложь;
					СтрокаЗачета.ИндексСтрокиОплат = Индексы.ИндексОплаты;
					СтрокаЗачета.ИндексСтрокиОтгрузокПоставок = -1;
					СтрокаЗачета.ПериодЗачета      = СтрокаОплаты.ПериодЗачета;
					СтрокаЗачета.ПорядокЗачета     = СтрокаОплаты.ПорядокЗачета;
					СтрокаЗачета.Сумма             = СтрокаОплаты.СуммаДляРаспределения;
					СтрокаЗачета.ПриходДобавлен    = СтрокаОплаты.ПриходДобавлен;
					
					Если ТипЗнч(СтрокаОплаты.Регистратор) <> Тип("ДокументСсылка.КорректировкаПриобретения")
						И ТипЗнч(СтрокаОплаты.Регистратор) <> Тип("ДокументСсылка.КорректировкаРеализации") 
						И СтрокаОплаты.ПорядокОперации > ГлобальныеПеременные.Порядок
						И ГлобальныеПеременные.РассчитыватьПлан Тогда
						НовСтр = ДвиженияПредоплатыДляСуммирования.Добавить();
						НовСтр.ДатаДвижения       = НачалоДня(СтрокаОплаты.Период);
						
						НовСтр.ДокументПлан      = СтрокаОплаты.Регистратор;
						НовСтр.ДатаВозникновения = СтрокаОплаты.Период;
						НовСтр.Сумма             = СтрокаОплаты.СуммаДляРаспределения;
						
						НовСтр.ПорядокОперации   = СтрокаОплаты.ПорядокОперации;
						НовСтр.Регистратор       = СтрокаОплаты.Регистратор;
						НовСтр.Просуммировано    = ЛОЖЬ;
					КонецЕсли;
					
					Индексы.ИндексОплаты = Индексы.ИндексОплаты + 1;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		#КонецОбласти
		
		#Область РаспределениеПлановыхГрафиков
		
		Для Каждого Стр Из ТаблицаЗачетовОплат Цикл
			Если Стр.ИндексСтрокиОплат <> -1 Тогда
				Стр.ДокументОплаты = РасчетыОплаты[Стр.ИндексСтрокиОплат].Регистратор;
				Если НЕ ЗначениеЗаполнено(Стр.ДатаПлановогоПогашенияОплаты) Тогда
					Стр.ДатаПлановогоПогашенияОплаты = РасчетыОплаты[Стр.ИндексСтрокиОплат].ДатаПлановогоПогашения;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ГлобальныеПеременные.РассчитыватьПлан Тогда
			
			ДвиженияПредоплатыДляСуммирования.Сортировать("ДатаДвижения ВОЗР,ПорядокОперации ВОЗР");
			
			ДвиженияПредоплатыДляРаспределенияПоГрафикуОплаты = ДвиженияПредоплатыДляСуммирования.Скопировать();
			ДвиженияПредоплатыДляРаспределенияПоГрафикуОплаты.Свернуть("ДатаДвижения,ДокументПлан,ДатаВозникновения,Регистратор,ПорядокОперации","Сумма");
			ДвиженияПредоплатыДляРаспределенияПоГрафикуОплаты.Сортировать("ДатаДвижения УБЫВ");
			
			// 1. Определяем список дат, на конец которых нужно сделать перераспределение неиспользованных авансов.
			#Область СписокДатДляДвижений
			СписокДатДвиженийПредоплаты = ДвиженияПредоплатыДляСуммирования.Скопировать(Новый Структура("Просуммировано",Ложь),"ДатаДвижения").ВыгрузитьКолонку("ДатаДвижения");
			СписокДатДвиженийПлановыхОплат = ДвиженияПлановыхОплатДляСуммирования.Скопировать(,"Дата").ВыгрузитьКолонку("Дата");
			СписокДатДвиженийПлановыхОтгрузок = ДвиженияПлановыхОтгрузокДляСуммирования.Скопировать(,"Дата").ВыгрузитьКолонку("Дата");
			СписокДатУточненийОплат = УточненияГрафиковОплат.Скопировать(,"ДатаДвижения").ВыгрузитьКолонку("ДатаДвижения");
			СписокДатУточненийОтгрузок = УточненияГрафиковОтгрузок.Скопировать(,"ДатаДвижения").ВыгрузитьКолонку("ДатаДвижения");
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокДатДвиженийПредоплаты, СписокДатДвиженийПлановыхОплат);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокДатДвиженийПредоплаты, СписокДатДвиженийПлановыхОтгрузок);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокДатДвиженийПредоплаты, СписокДатУточненийОплат);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокДатДвиженийПредоплаты, СписокДатУточненийОтгрузок);
			МассивДат = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СписокДатДвиженийПредоплаты);
			СписокДат = Новый СписокЗначений;
			СписокДат.ЗагрузитьЗначения(МассивДат);
			СписокДат.СортироватьПоЗначению(НаправлениеСортировки.Возр);
			#КонецОбласти
			
			Для Каждого ЗначениеСписка Из СписокДат Цикл
				
				// 2. Добавляем приходы по заказам и свернем остатки плановых оплат и отгрузок
				#Область ДобавлениеДвиженийПлановыхОплат
				Пока ДвиженияПлановыхОплатДляСуммирования.Количество() > 0 Цикл
					Строка = ДвиженияПлановыхОплатДляСуммирования[0];
					Если Строка.Дата <= ЗначениеСписка.Значение Тогда
						НовСтр = ОстаткиПлановыхОплат.Добавить();
						НовСтр.ДокументПлан = Строка.Регистратор;
						НовСтр.ДатаВозникновения = Строка.ДатаВозникновения;
						НовСтр.ДатаПлановогоПогашения = Строка.ДатаПлановогоПогашения;
						НовСтр.ВариантОплаты = Строка.ВариантОплаты;
						НовСтр.НераспределенныйАванс = Ложь;
						НовСтр.КОплате = Строка.Сумма;
						
						ДвиженияПлановыхОплатДляСуммирования.Удалить(0);
					Иначе
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				ОстаткиПлановыхОплат.Сортировать("НераспределенныйАванс,ДатаПлановогоПогашения,ДатаВозникновения,ВариантОплаты", Новый СравнениеЗначений);
				#КонецОбласти
				
				#Область ДобавлениеДвиженийПлановыхОтгрузок
				Пока ДвиженияПлановыхОтгрузокДляСуммирования.Количество() > 0 Цикл
					Строка = ДвиженияПлановыхОтгрузокДляСуммирования[0];
					Если Строка.Дата <= ЗначениеСписка.Значение Тогда
						НовСтр = ОстаткиПлановыхОтгрузок.Добавить();
						НовСтр.ДокументПлан = Строка.Регистратор;
						НовСтр.ДатаВозникновения = Строка.ДатаВозникновения;
						НовСтр.ДатаПлановогоПогашения = Строка.ДатаПлановогоПогашения;
						НовСтр.НераспределенныйАванс = Ложь;
						НовСтр.Сумма = Строка.Сумма;
						
						ДвиженияПлановыхОтгрузокДляСуммирования.Удалить(0);
					Иначе
						Прервать;
					КонецЕсли;
				КонецЦикла;
				ОстаткиПлановыхОтгрузок.Свернуть("ДокументПлан,ДатаПлановогоПогашения,ДатаВозникновения,НераспределенныйАванс","Сумма");
				ОстаткиПлановыхОтгрузок.Сортировать("НераспределенныйАванс,ДатаПлановогоПогашения,ДатаВозникновения");
				#КонецОбласти
				
				// 3. Добавляем уточнения графика оплат по заказам и сторнируем записи нераспределенных авансов, если они были.
				#Область УточнениеГрафикаОплаты
				
				счУточнения = 0;
				Пока счУточнения < УточненияГрафиковОплат.Количество() Цикл
					СтрокаУточнения = УточненияГрафиковОплат[счУточнения];
					Если СтрокаУточнения.ДатаДвижения > ЗначениеСписка.Значение Тогда
						Прервать;
					Иначе
						
						//С учетом варианта оплаты
						СтрокиОстатков = ОстаткиПлановыхОплат.НайтиСтроки(Новый Структура("ДокументПлан,ВариантОплаты",СтрокаУточнения.Заказ,СтрокаУточнения.ВариантОплаты));
						СуммаСписано = 0;
						Для Каждого СтрокаОстатков Из СтрокиОстатков Цикл
							Если СтрокаУточнения.Сумма = 0 И СуммаСписано = 0 Тогда
								Прервать;
							КонецЕсли;
							Если СтрокаОстатков.НераспределенныйАванс = Ложь И СтрокаОстатков.КОплате > 0  И СтрокаУточнения.Сумма > 0 Тогда
								СуммаСписания = Мин(СтрокаОстатков.КОплате, СтрокаУточнения.Сумма);
								УменьшитьПланОплатыПоЗаказу(ТаблицаПланОплат, ОстаткиПлановыхОплат, СтрокаОстатков, СтрокаУточнения, СуммаСписания);
								СуммаСписано = СуммаСписано + СуммаСписания;
							// Нужно сторнировать именно заказ строки уточнения
							ИначеЕсли СтрокаОстатков.НераспределенныйАванс = Истина И СтрокаОстатков.КОплате < 0 И СуммаСписано > 0 Тогда
								СуммаСписания = -Мин(-СтрокаОстатков.КОплате, СуммаСписано);
								СторнироватьНераспределенныйАванс(ТаблицаПланОплат, ОстаткиПлановыхОплат, СтрокаОстатков, СтрокаУточнения, СуммаСписания);
								СуммаСписано = СуммаСписано + СуммаСписания;
							КонецЕсли;
						КонецЦикла;
						
						//Без учета варианта оплаты
						Если СтрокаУточнения.Сумма > 0 Тогда
							СтрокиОстатков = ОстаткиПлановыхОплат.НайтиСтроки(Новый Структура("ДокументПлан",СтрокаУточнения.Заказ));
							Для Каждого СтрокаОстатков Из СтрокиОстатков Цикл
								Если СтрокаУточнения.Сумма = 0 И СуммаСписано = 0 Тогда
									Прервать;
								КонецЕсли;
								Если НЕ СтрокаОстатков.НераспределенныйАванс И СтрокаОстатков.КОплате > 0 И СтрокаУточнения.Сумма > 0 Тогда
									СуммаСписания = Мин(СтрокаОстатков.КОплате,СтрокаУточнения.Сумма);
									УменьшитьПланОплатыПоЗаказу(ТаблицаПланОплат, ОстаткиПлановыхОплат, СтрокаОстатков, СтрокаУточнения, СуммаСписания);
									СуммаСписано = СуммаСписано + СуммаСписания;
								ИначеЕсли СтрокаОстатков.НераспределенныйАванс И СтрокаОстатков.КОплате < 0  И СуммаСписано > 0 Тогда
									СуммаСписания = -Мин(-СтрокаОстатков.КОплате, СуммаСписано);
									СторнироватьНераспределенныйАванс(ТаблицаПланОплат, ОстаткиПлановыхОплат, СтрокаОстатков, СтрокаУточнения, СуммаСписания);
									СуммаСписано = СуммаСписано + СуммаСписания;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
						
					КонецЕсли;
					Если СтрокаУточнения.Сумма = 0 Тогда
						УточненияГрафиковОплат.Удалить(счУточнения);
					Иначе
						счУточнения = счУточнения + 1;
					КонецЕсли;
				КонецЦикла;
				#КонецОбласти
				
				// 4. Добавляем уточнения графика отгрузок по заказам и сторнируем записи нераспределенных авансов, если они были.
				#Область УточнениеГрафикаОтгрузки
				счУточнения = 0;
				Пока счУточнения < УточненияГрафиковОтгрузок.Количество() Цикл
					СтрокаУточнения = УточненияГрафиковОтгрузок[счУточнения];
					Если СтрокаУточнения.ДатаДвижения > ЗначениеСписка.Значение Тогда
						Прервать;
					Иначе
						СтрокиОстатков = ОстаткиПлановыхОтгрузок.НайтиСтроки(Новый Структура("ДокументПлан",СтрокаУточнения.Заказ));
						СуммаСписано = 0;
						Для Каждого СтрокаОстатков Из СтрокиОстатков Цикл
							Если СтрокаУточнения.Сумма = 0 И СуммаСписано = 0 Тогда
								Прервать;
							КонецЕсли;
							Если СтрокаОстатков.НераспределенныйАванс = Ложь И СтрокаОстатков.Сумма > 0  И СтрокаУточнения.Сумма > 0 Тогда
								СуммаСписания = Мин(СтрокаОстатков.Сумма,СтрокаУточнения.Сумма);
								УменьшитьПланОтгрузкиПоЗаказу(ТаблицаПланОтгрузокПоставок, ОстаткиПлановыхОтгрузок, СтрокаОстатков, СтрокаУточнения, СуммаСписания);
								СуммаСписано = СуммаСписано + СуммаСписания;
							// Нужно уточнить именно заказ рту
							ИначеЕсли СтрокаОстатков.НераспределенныйАванс = Истина И СтрокаОстатков.Сумма < 0 И СуммаСписано > 0 Тогда
								СуммаСписания = -Мин(-СтрокаОстатков.Сумма, СуммаСписано);
								СторнироватьНераспределенныйАвансПланаОтгрузок(ТаблицаПланОтгрузокПоставок, ОстаткиПлановыхОтгрузок, СтрокаОстатков, СтрокаУточнения, СуммаСписания);
								СуммаСписано = СуммаСписано + СуммаСписания;
							КонецЕсли;
						КонецЦикла;
						
					КонецЕсли;
					Если СтрокаУточнения.Сумма = 0 Тогда
						УточненияГрафиковОтгрузок.Удалить(счУточнения);
					Иначе
						счУточнения = счУточнения + 1;
					КонецЕсли;
				КонецЦикла;
				#КонецОбласти
				
				// 5. Обновим остатки предоплат
				#Область ДобавлениеДвиженийПоПредоплате 
				Для Каждого Строка Из ДвиженияПредоплатыДляСуммирования Цикл
					Если Строка.ДатаДвижения <= ЗначениеСписка.Значение Тогда
						Если НЕ Строка.Просуммировано Тогда
							НовСтр = ОстаткиАвансов.Добавить();
							НовСтр.ДокументПлан           = Строка.ДокументПлан;
							НовСтр.ДатаВозникновения      = Строка.ДатаВозникновения;
							НовСтр.ДатаПлановогоПогашения = Строка.ДатаПлановогоПогашения;
							НовСтр.Сумма                  = Строка.Сумма;
							Строка.Просуммировано         = Истина;
						КонецЕсли;
					Иначе
						Прервать;
					КонецЕсли;
				КонецЦикла;
				ДвиженияПредоплатыДляСуммированияПланОтгрузок = ДвиженияПредоплатыДляРаспределенияПоГрафикуОплаты.Скопировать();
				#КонецОбласти
				
				// Дельта авансов = Остаток авансов на конец дня - остаток на начало дня + нераспределенная дельта за прошлый день
				СуммаАвансовДляРаспределенияПоГрафикуОплат = ОстаткиАвансов.Итог("Сумма") + ОстаткиПлановыхОплат.Скопировать(Новый Структура("НераспределенныйАванс",Истина)).Итог("КОплате");
				СуммаАвансовДляРаспределенияПоГрафикуОтгрузок = ОстаткиАвансов.Итог("Сумма") + ОстаткиПлановыхОтгрузок.Скопировать(Новый Структура("НераспределенныйАванс",Истина)).Итог("Сумма");
				ОстаткиАвансов.Свернуть("ДокументПлан, ДатаВозникновения, ДатаПлановогоПогашения","Сумма");
				ОстаткиАвансов.Сортировать("ДатаВозникновения УБЫВ");
				
				// 6. Распределение дельты суммы авансов за день по графикам плановой оплаты (движения с флагом "НераспределенныйАванс")
				#Область РаспределениеАвансовПоГрафикуОплаты
				//Если дельта положительная (сумма авансов увеличилась) то смотрим остатки с учетом уже зачтенных нераспределенных авансов (НераспределенныйАванс = Истина или Ложь)
				Если СуммаАвансовДляРаспределенияПоГрафикуОплат > 0 Тогда
					ОстаткиПлановыхОплатКопия = ОстаткиПлановыхОплат.Скопировать();
					ОстаткиПлановыхОплатКопия.Свернуть("ДокументПлан,ДатаПлановогоПогашения,ДатаВозникновения,ВариантОплаты","КОплате");
					Для Каждого СтрокаОстатков Из ОстаткиПлановыхОплатКопия Цикл
						Если СуммаАвансовДляРаспределенияПоГрафикуОплат = 0 Тогда
							Прервать;
						КонецЕсли;
						Если СтрокаОстатков.КОплате <= 0 Тогда
							Продолжить;
						КонецЕсли;
						Для Каждого ДвижениеПредоплаты Из ДвиженияПредоплатыДляРаспределенияПоГрафикуОплаты Цикл
							СуммаСписания = Мин(СуммаАвансовДляРаспределенияПоГрафикуОплат,ДвижениеПредоплаты.Сумма,СтрокаОстатков.КОплате);
							Если СуммаСписания <= 0 ИЛИ ДвижениеПредоплаты.ДатаДвижения > ЗначениеСписка.Значение Тогда
								Продолжить;
							КонецЕсли;
							
							УменьшитьПланОплатыПоЗаказу(ТаблицаПланОплат, ОстаткиПлановыхОплат, СтрокаОстатков, ДвижениеПредоплаты, СуммаСписания, КонецДня(ЗначениеСписка.Значение));
							СуммаАвансовДляРаспределенияПоГрафикуОплат = СуммаАвансовДляРаспределенияПоГрафикуОплат - СуммаСписания;
							
						КонецЦикла;
					КонецЦикла;
				ИначеЕсли СуммаАвансовДляРаспределенияПоГрафикуОплат < 0 Тогда
					//Если дельта отрицательная то нужно уменьшить только зачтенные нераспределенные авансы (НераспределенныйАванс = Истина)
					ОстаткиПлановыхОплатКопия = ОстаткиПлановыхОплат.Скопировать(Новый Структура("НераспределенныйАванс",Истина));
					ОстаткиПлановыхОплатКопия.Сортировать("ДатаПлановогоПогашения УБЫВ,ДатаВозникновения УБЫВ,ВариантОплаты УБЫВ", Новый СравнениеЗначений);
					Для Каждого СтрокаОстатков Из ОстаткиПлановыхОплатКопия Цикл
						Если СуммаАвансовДляРаспределенияПоГрафикуОплат = 0 Тогда
							Прервать;
						КонецЕсли;
						Если СтрокаОстатков.КОплате >= 0 Тогда
							Продолжить;
						КонецЕсли;
						Для Каждого ДвижениеПредоплаты Из ДвиженияПредоплатыДляРаспределенияПоГрафикуОплаты Цикл
							СуммаСписания = -Мин(-СуммаАвансовДляРаспределенияПоГрафикуОплат,-ДвижениеПредоплаты.Сумма,-СтрокаОстатков.КОплате);
							Если ДвижениеПредоплаты.ДатаДвижения > ЗначениеСписка.Значение ИЛИ СуммаСписания >= 0 Тогда
								Продолжить;
							КонецЕсли;
								
							СторнироватьНераспределенныйАванс(ТаблицаПланОплат, ОстаткиПлановыхОплат, СтрокаОстатков, ДвижениеПредоплаты, СуммаСписания, КонецДня(ЗначениеСписка.Значение));
							СуммаАвансовДляРаспределенияПоГрафикуОплат = СуммаАвансовДляРаспределенияПоГрафикуОплат - СуммаСписания;
								
						КонецЦикла;
					КонецЦикла;
				КонецЕсли;
				#КонецОбласти
				
				// 7. Распределение дельты суммы авансов за день по графикам плановой отгрузки (движения с флагом "НераспределенныйАванс")
				#Область РаспределениеАвансовПоГрафикуОтгрузки
				Если СуммаАвансовДляРаспределенияПоГрафикуОтгрузок > 0 Тогда
					ОстаткиПлановыхОтгрузокКопия = ОстаткиПлановыхОтгрузок.Скопировать();
					//Если дельта положительная (сумма авансов увеличилась) то смотрим остатки с учетом уже зачтенных нераспределенных авансов (НераспределенныйАванс = Истина или Ложь)
					ОстаткиПлановыхОтгрузокКопия.Свернуть("ДокументПлан,ДатаПлановогоПогашения,ДатаВозникновения","Сумма");
					Для Каждого СтрокаОстатков Из ОстаткиПлановыхОтгрузокКопия Цикл
						Если СуммаАвансовДляРаспределенияПоГрафикуОтгрузок = 0 Тогда
							Прервать;
						КонецЕсли;
						Если СтрокаОстатков.Сумма > 0 Тогда
							Для Каждого ДвижениеПредоплаты Из ДвиженияПредоплатыДляСуммированияПланОтгрузок Цикл
								Если ДвижениеПредоплаты.ДатаДвижения = ЗначениеСписка.Значение //Подбираем движения текущего дня, ведь именно они изменили Остаток аванса
									И ДвижениеПредоплаты.ДатаДвижения >= СтрокаОстатков.ДатаВозникновения //График отгрузок уточняют только предоплаты введенные после заказа.
									И ДвижениеПредоплаты.Сумма > 0
									И СуммаАвансовДляРаспределенияПоГрафикуОтгрузок > 0 Тогда
									
									СуммаСписания = Мин(СуммаАвансовДляРаспределенияПоГрафикуОтгрузок,ДвижениеПредоплаты.Сумма,СтрокаОстатков.Сумма);
									
									УменьшитьПланОтгрузкиПоЗаказу(ТаблицаПланОтгрузокПоставок, ОстаткиПлановыхОтгрузок, СтрокаОстатков, ДвижениеПредоплаты, СуммаСписания, КонецДня(ЗначениеСписка.Значение));
									УточнитьГрафикПогашенияАванса(ТаблицаЗачетовОплат, ДвижениеПредоплаты, СуммаСписания, СтрокаОстатков.ДатаПлановогоПогашения);
									
									СуммаАвансовДляРаспределенияПоГрафикуОтгрузок = СуммаАвансовДляРаспределенияПоГрафикуОтгрузок - СуммаСписания;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
				ИначеЕсли СуммаАвансовДляРаспределенияПоГрафикуОтгрузок < 0 Тогда
					//Если дельта отрицательная то нужно уменьшить только зачтенные нераспределенные авансы (НераспределенныйАванс = Истина)
					ОстаткиПлановыхОтгрузокКопия = ОстаткиПлановыхОтгрузок.Скопировать(Новый Структура("НераспределенныйАванс",Истина));
					ОстаткиПлановыхОтгрузокКопия.Сортировать("ДатаПлановогоПогашения УБЫВ,ДатаВозникновения УБЫВ");
					Для Каждого СтрокаОстатков Из ОстаткиПлановыхОтгрузокКопия Цикл
						Если СуммаАвансовДляРаспределенияПоГрафикуОтгрузок = 0 Тогда
							Прервать;
						КонецЕсли;
						Если СтрокаОстатков.НераспределенныйАванс И СтрокаОстатков.Сумма < 0 Тогда
							Для Каждого ДвижениеПредоплаты Из ДвиженияПредоплатыДляСуммированияПланОтгрузок Цикл
								Если ДвижениеПредоплаты.ДатаДвижения = ЗначениеСписка.Значение
									И ДвижениеПредоплаты.Сумма < 0
									И СуммаАвансовДляРаспределенияПоГрафикуОтгрузок < 0 Тогда
									СуммаСписания = -Мин(-СуммаАвансовДляРаспределенияПоГрафикуОтгрузок,-ДвижениеПредоплаты.Сумма,-СтрокаОстатков.Сумма);
									
									СторнироватьНераспределенныйАвансПланаОтгрузок(ТаблицаПланОтгрузокПоставок, ОстаткиПлановыхОтгрузок, СтрокаОстатков, ДвижениеПредоплаты, СуммаСписания, КонецДня(ЗначениеСписка.Значение));
									
									СуммаАвансовДляРаспределенияПоГрафикуОтгрузок = СуммаАвансовДляРаспределенияПоГрафикуОтгрузок - СуммаСписания;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				#КонецОбласти
				
				// 8. Удаление учтенных строк движений по предоплате
				#Область УдалениеУстаревшихСтрок
				сч = 0;
				Пока сч < ДвиженияПредоплатыДляРаспределенияПоГрафикуОплаты.Количество() Цикл
					Строка = ДвиженияПредоплатыДляРаспределенияПоГрафикуОплаты[сч];
					Если Строка.ДатаДвижения <= ЗначениеСписка.Значение И Строка.Сумма = 0 Тогда
						ДвиженияПредоплатыДляРаспределенияПоГрафикуОплаты.Удалить(сч);
					Иначе
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				#КонецОбласти
				
			КонецЦикла;
			
		КонецЕсли;
		
		#КонецОбласти
		
		#Область ДобавлениеЗаписейЗачетаОплаты
		
		ТаблицаЗачетовОплат.Свернуть("ЗачетАванса,ЭтоКорректировка,ПериодЗачета,ПорядокЗачета,ИндексСтрокиОплат,ИндексСтрокиОтгрузокПоставок,ПриходДобавлен,ДокументОплаты,ДатаПлановогоПогашенияОплаты","Сумма");
		
		ТаблицаЗачетовОплат.Индексы.Добавить("ИндексСтрокиОплат,ПриходДобавлен");
		ТаблицаЗачетовОплат.Индексы.Добавить("ИндексСтрокиОтгрузокПоставок,ПриходДобавлен");
		ТаблицаЗачетовОплат.Индексы.Добавить("ИндексСтрокиОплат,ЭтоКорректировка");
		
		Для Каждого СтрокаЗачета Из ТаблицаЗачетовОплат Цикл
			
			Если СтрокаЗачета.ИндексСтрокиОплат <> -1 И СтрокаЗачета.ИндексСтрокиОтгрузокПоставок <> -1 Тогда
			
			СтрокаОплаты           = РасчетыОплаты[СтрокаЗачета.ИндексСтрокиОплат];
			СтрокаОтгрузкиПоставки = РасчетыОтгрузкиПоставки[СтрокаЗачета.ИндексСтрокиОтгрузокПоставок];
			СуммаСписания          = СтрокаЗачета.Сумма;
			
			Если СтрокаЗачета.ЗачетАванса Тогда
				
				//Приход предоплаты.
				ДобавитьПриход(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, СтрокаОплаты, "Оплата", ТаблицаЗачетовОплат, СтрокаЗачета.ИндексСтрокиОплат);
				
				//Переброс аванса на расчетный документ - накладную.
				//Если истина - будет просто уменьшена предоплата, иначе будет создана запись по приходу и расходу долга.
				ДвойнаяЗаписьНеНужна = ХозяйственныеОперацииНеОтгрузка.Найти(СтрокаОтгрузкиПоставки.ХозяйственнаяОперация) <> Неопределено И НЕ СтрокаОтгрузкиПоставки.Сторно;
				
				//Возврат аванса отражаем по курсу возврата. Произвольный взаимозачет всегда по своему курсу.
				Если СтрокаОтгрузкиПоставки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВзаимозачетЗадолженности
					И СтрокаОтгрузкиПоставки.РучнойКурсРегл
					ИЛИ СтрокаОтгрузкиПоставки.ЭтоВозвратАванса
						И СтрокаОтгрузкиПоставки.Регистратор = СтрокаОплаты.Регистратор Тогда
					СуммаСписанияРегл = СуммаСписания(СтрокаОтгрузкиПоставки.ИсходнаяСуммаРегл/СтрокаОтгрузкиПоставки.ИсходнаяСумма,
						СтрокаОтгрузкиПоставки.СуммаРегл, СтрокаОтгрузкиПоставки.Сумма, СуммаСписания);
				//Остальные авансы по курсу аванса.
				Иначе
					СуммаСписанияРегл = СуммаСписания(0, СтрокаОплаты.СуммаРегл, СтрокаОплаты.Сумма, СуммаСписания);
				КонецЕсли;
				
				Если СтрокаОтгрузкиПоставки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВзаимозачетЗадолженности
					И СтрокаОтгрузкиПоставки.РучнойКурсУпр
					ИЛИ СтрокаОтгрузкиПоставки.ЭтоВозвратАванса 
						И СтрокаОтгрузкиПоставки.Регистратор = СтрокаОплаты.Регистратор Тогда
					СуммаСписанияУпр = СуммаСписания(СтрокаОтгрузкиПоставки.ИсходнаяСуммаУпр/СтрокаОтгрузкиПоставки.ИсходнаяСумма,
						СтрокаОтгрузкиПоставки.СуммаУпр, СтрокаОтгрузкиПоставки.Сумма, СуммаСписания);
				Иначе
					СуммаСписанияУпр = СуммаСписания(0, СтрокаОплаты.СуммаУпр, СтрокаОплаты.Сумма, СуммаСписания);
				КонецЕсли;
				
				Если СтрокаОтгрузкиПоставки.РучнойКурсУпр ИЛИ СтрокаОтгрузкиПоставки.ЭтоВозвратАванса Тогда
					ПриходДолгУпр = СуммаСписания(СтрокаОтгрузкиПоставки.ИсходнаяСуммаУпр/СтрокаОтгрузкиПоставки.ИсходнаяСумма, 
						СтрокаОтгрузкиПоставки.СуммаУпр, СтрокаОтгрузкиПоставки.Сумма, СуммаСписания);
				Иначе
					ПриходДолгУпр = СуммаСписанияУпр;
				КонецЕсли;
				Если СтрокаОтгрузкиПоставки.РучнойКурсРегл ИЛИ СтрокаОтгрузкиПоставки.ЭтоВозвратАванса Тогда
					ПриходДолгРегл = СуммаСписания(СтрокаОтгрузкиПоставки.ИсходнаяСуммаРегл/СтрокаОтгрузкиПоставки.ИсходнаяСумма, 
						СтрокаОтгрузкиПоставки.СуммаРегл, СтрокаОтгрузкиПоставки.Сумма, СуммаСписания);
				Иначе
					ПриходДолгРегл = СуммаСписанияРегл;
				КонецЕсли;
				
				#Область РасходПредоплата
				Если СтрокаЗачета.ПорядокЗачета >= ГлобальныеПеременные.ПорядокФакт Тогда
					НовСтр_Предоплата_Расход                          = ТаблицаРасчетовПоСрокам.Добавить();
					НовСтр_Предоплата_Расход.ВидДвижения              = ВидДвиженияНакопления.Расход;
					
					НовСтр_Предоплата_Расход.ДокументРегистратор      = СтрокаОтгрузкиПоставки.Регистратор;
					НовСтр_Предоплата_Расход.ВалютаДокумента          = СтрокаОтгрузкиПоставки.ВалютаДокумента;
					НовСтр_Предоплата_Расход.Период                   = СтрокаЗачета.ПериодЗачета;
					НовСтр_Предоплата_Расход.РасчетныйДокумент        = СтрокаОплаты.РасчетныйДокумент;
					НовСтр_Предоплата_Расход.ДатаВозникновения        = СтрокаОплаты.ДатаВозникновения;
					НовСтр_Предоплата_Расход.ДатаПлановогоПогашения   = ?(СтрокаЗачета.ДатаПлановогоПогашенияОплаты = Дата(1,1,1),СтрокаОплаты.ДатаПлановогоПогашения, СтрокаЗачета.ДатаПлановогоПогашенияОплаты);
					НовСтр_Предоплата_Расход.ПорядокЗачета            = ?(СтрокаЗачета.ДатаПлановогоПогашенияОплаты = Дата(1,1,1),
						СтрокаОплаты.ПорядокЗачетаПоДатеПлатежа,
						Формат(СтрокаЗачета.ДатаПлановогоПогашенияОплаты, "ДФ=yyyyMMdd") + Прав(СтрокаОплаты.ПорядокЗачетаПоДатеПлатежа,20));
					НовСтр_Предоплата_Расход.ПорядокОперации          = СтрокаЗачета.ПорядокЗачета;
					НовСтр_Предоплата_Расход.СтатьяДвиженияДенежныхСредств = СтрокаОтгрузкиПоставки.СтатьяДвиженияДенежныхСредств;
					НовСтр_Предоплата_Расход.СвязанныйДокумент        = СтрокаОплаты.СвязанныйДокумент;
					
					//С приемником связываем расходное движение по предоплате если приходного по долгу нет, иначе связываем по приходу долга.
					Если ДвойнаяЗаписьНеНужна 
						ИЛИ СтрокаОтгрузкиПоставки.ПриходДобавлен
						ИЛИ СтрокаОтгрузкиПоставки.ПорядокОперации < ГлобальныеПеременные.ПорядокФакт Тогда
						//С приемником связан только регистратор отгрузки
						НовСтр_Предоплата_Расход.АналитикаУчетаПоПартнерамПриемник = СтрокаОтгрузкиПоставки.АналитикаУчетаПоПартнерамПриемник;
						НовСтр_Предоплата_Расход.ОбъектРасчетовПриемник  = СтрокаОтгрузкиПоставки.ОбъектРасчетовПриемник;
						НовСтр_Предоплата_Расход.ВалютаПриемник  = СтрокаОтгрузкиПоставки.ВалютаПриемник;
						НовСтр_Предоплата_Расход.СуммаПриемник = СуммаСписания(0, СтрокаОтгрузкиПоставки.СуммаПриемник, СтрокаОтгрузкиПоставки.Сумма, СуммаСписания);
						СтрокаОтгрузкиПоставки.СуммаПриемник = СтрокаОтгрузкиПоставки.СуммаПриемник - НовСтр_Предоплата_Расход.СуммаПриемник;
						
						НовСтр_Предоплата_Расход.ПоДаннымОбъектаРасчетовИсточника = СтрокаОтгрузкиПоставки.ПоДаннымОбъектаРасчетовИсточника;
						НовСтр_Предоплата_Расход.КорОбъектРасчетов                = СтрокаОтгрузкиПоставки.КорОбъектРасчетов;
						НовСтр_Предоплата_Расход.КорАналитикаУчетаПоПартнерам     = СтрокаОтгрузкиПоставки.КорАналитикаУчетаПоПартнерам;
						
					Иначе
						НовСтр_Предоплата_Расход.АналитикаУчетаПоПартнерамПриемник = Справочники.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка();
						НовСтр_Предоплата_Расход.ОбъектРасчетовПриемник  = Справочники.ОбъектыРасчетов.ПустаяСсылка();
						НовСтр_Предоплата_Расход.ВалютаПриемник  = Справочники.Валюты.ПустаяСсылка();
						НовСтр_Предоплата_Расход.СуммаПриемник = 0;
						
						НовСтр_Предоплата_Расход.ПоДаннымОбъектаРасчетовИсточника = ЛОЖЬ;
						НовСтр_Предоплата_Расход.КорОбъектРасчетов                = Справочники.ОбъектыРасчетов.ПустаяСсылка();
						НовСтр_Предоплата_Расход.КорАналитикаУчетаПоПартнерам     = Справочники.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка();
					КонецЕсли;
					
					НовСтр_Предоплата_Расход.Сторно                   = СтрокаОтгрузкиПоставки.Сторно;
					
					Если СтрокаОтгрузкиПоставки.Регистратор = СтрокаОплаты.Регистратор
						И ТипЗнч(СтрокаОтгрузкиПоставки.Регистратор) = Тип("ДокументСсылка.ОтчетКомиссионера")
						И СтрокаОплаты.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УдержаниеВознагражденияКомиссионера Тогда
						ХозяйственнаяОперацияЗачетАванса = Перечисления.ХозяйственныеОперации.ЗачетВознагражденияОплатойКомиссионера;
					ИначеЕсли СтрокаОтгрузкиПоставки.Регистратор = СтрокаОплаты.Регистратор
						И ТипЗнч(СтрокаОтгрузкиПоставки.Регистратор) = Тип("ДокументСсылка.ОтчетКомитенту")
						И СтрокаОплаты.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УдержаниеВознагражденияКомитентом Тогда
						ХозяйственнаяОперацияЗачетАванса = Перечисления.ХозяйственныеОперации.ЗачетВознагражденияОплатойКомитенту;
					ИначеЕсли СтрокаОтгрузкиПоставки.Регистратор = СтрокаОплаты.Регистратор
						И ТипЗнч(СтрокаОтгрузкиПоставки.Регистратор) = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями")
						И (СтрокаОплаты.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УдержаниеВознагражденияКомиссионера
							ИЛИ СтрокаОплаты.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УдержаниеВознагражденияКомитентом) Тогда
						Если ГлобальныеПеременные.ЭтоРасчетыСКлиентами Тогда
							ХозяйственнаяОперацияЗачетАванса = Перечисления.ХозяйственныеОперации.ЗачетВознагражденияОплатойКомиссионера;
						Иначе
							ХозяйственнаяОперацияЗачетАванса = Перечисления.ХозяйственныеОперации.ЗачетВознагражденияОплатойКомитенту;
						КонецЕсли;
					ИначеЕсли СтрокаОтгрузкиПоставки.Регистратор = СтрокаОплаты.Регистратор
						И ТипЗнч(СтрокаОтгрузкиПоставки.Регистратор) = Тип("ДокументСсылка.Бронирование")
						И (СтрокаОплаты.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.БронированиеЧерезАгента
							ИЛИ СтрокаОплаты.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ИспользованиеБронированияПодотчетнымЛицом
							ИЛИ СтрокаОплаты.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.БронированиеЧерезПодотчетноеЛицо) Тогда
						ХозяйственнаяОперацияЗачетАванса = Перечисления.ХозяйственныеОперации.ИспользованиеБронированияПодотчетнымЛицом;
					Иначе
						ХозяйственнаяОперацияЗачетАванса = ХозяйственныеОперации["ЗачетАванса"];
					КонецЕсли;
					
					Если ДвойнаяЗаписьНеНужна Тогда
						НовСтр_Предоплата_Расход.ХозяйственнаяОперация = СтрокаОтгрузкиПоставки.ХозяйственнаяОперация;
						НовСтр_Предоплата_Расход.НастройкаХозяйственнойОперации = СтрокаОтгрузкиПоставки.НастройкаХозяйственнойОперации;
						НовСтр_Предоплата_Расход.ИдентификаторФинЗаписи = СтрокаОтгрузкиПоставки.ИдентификаторФинЗаписи;
					Иначе
						НовСтр_Предоплата_Расход.ХозяйственнаяОперация = ХозяйственнаяОперацияЗачетАванса;
						ИдентификаторЗачетаАванса = Новый УникальныйИдентификатор;
						НовСтр_Предоплата_Расход.НастройкаХозяйственнойОперации = НастройкиХО["ЗачетОплаты"];
						НовСтр_Предоплата_Расход.ИдентификаторФинЗаписи = ИдентификаторЗачетаАванса;
					КонецЕсли;
					
					НовСтр_Предоплата_Расход.Предоплата     = СуммаСписания;
					НовСтр_Предоплата_Расход.ПредоплатаРегл = СуммаСписанияРегл;
					НовСтр_Предоплата_Расход.ПредоплатаУпр  = СуммаСписанияУпр;
				КонецЕсли;
				
				#КонецОбласти
				
				Если НЕ ДвойнаяЗаписьНеНужна Тогда
					Если НЕ СтрокаОтгрузкиПоставки.ПриходДобавлен И СтрокаОтгрузкиПоставки.ПорядокОперации >= ГлобальныеПеременные.ПорядокФакт Тогда
					#Область ПриходДолг
					
						//Отражаем приход на сумму долга по курсу предоплаты.
						НовСтр_Долг_Приход = ТаблицаРасчетовПоСрокам.Добавить();
						НовСтр_Долг_Приход.ВидДвижения                   = ВидДвиженияНакопления.Приход;
						
						НовСтр_Долг_Приход.ДокументРегистратор           = СтрокаОтгрузкиПоставки.Регистратор;
						НовСтр_Долг_Приход.ВалютаДокумента               = СтрокаОтгрузкиПоставки.ВалютаДокумента;
						НовСтр_Долг_Приход.ПорядокОперации               = СтрокаОтгрузкиПоставки.ПорядокОперации;
						НовСтр_Долг_Приход.Сторно                        = СтрокаОтгрузкиПоставки.Сторно;
						НовСтр_Долг_Приход.Период                        = СтрокаОтгрузкиПоставки.Период;
						НовСтр_Долг_Приход.ДатаВозникновения             = СтрокаОтгрузкиПоставки.ДатаВозникновения;
						НовСтр_Долг_Приход.ДатаПлановогоПогашения        = СтрокаОтгрузкиПоставки.ДатаПлановогоПогашения;
						НовСтр_Долг_Приход.РасчетныйДокумент             = ?(СтрокаОтгрузкиПоставки.РасчетныйДокумент <> СтрокаОтгрузкиПоставки.Регистратор, СтрокаОтгрузкиПоставки.РасчетныйДокумент, СтрокаОтгрузкиПоставки.Регистратор);
						НовСтр_Долг_Приход.ПорядокЗачета                 = СтрокаОтгрузкиПоставки.ПорядокЗачетаПоДатеПлатежа;
						НовСтр_Долг_Приход.ХозяйственнаяОперация         = СтрокаОтгрузкиПоставки.ХозяйственнаяОперация;
						НовСтр_Долг_Приход.НастройкаХозяйственнойОперации = СтрокаОтгрузкиПоставки.НастройкаХозяйственнойОперации;
						НовСтр_Долг_Приход.ИдентификаторФинЗаписи        = СтрокаОтгрузкиПоставки.ИдентификаторФинЗаписи;
						//возврат ДС, статья должна быть
						НовСтр_Долг_Приход.СтатьяДвиженияДенежныхСредств = СтрокаОтгрузкиПоставки.СтатьяДвиженияДенежныхСредств;
						НовСтр_Долг_Приход.СвязанныйДокумент             = Неопределено;
						
						//С приемником связан только регистратор отгрузки
						НовСтр_Долг_Приход.АналитикаУчетаПоПартнерамПриемник = СтрокаОтгрузкиПоставки.АналитикаУчетаПоПартнерамПриемник;
						НовСтр_Долг_Приход.ОбъектРасчетовПриемник            = СтрокаОтгрузкиПоставки.ОбъектРасчетовПриемник;
						НовСтр_Долг_Приход.ВалютаПриемник                    = СтрокаОтгрузкиПоставки.ВалютаПриемник;
						НовСтр_Долг_Приход.СуммаПриемник                     = СуммаСписания(0, СтрокаОтгрузкиПоставки.СуммаПриемник, СтрокаОтгрузкиПоставки.Сумма, СуммаСписания);
						СтрокаОтгрузкиПоставки.СуммаПриемник = СтрокаОтгрузкиПоставки.СуммаПриемник - НовСтр_Долг_Приход.СуммаПриемник;
						
						НовСтр_Долг_Приход.ПоДаннымОбъектаРасчетовИсточника  = СтрокаОтгрузкиПоставки.ПоДаннымОбъектаРасчетовИсточника;
						НовСтр_Долг_Приход.КорОбъектРасчетов                 = СтрокаОтгрузкиПоставки.КорОбъектРасчетов;
						НовСтр_Долг_Приход.КорАналитикаУчетаПоПартнерам      = СтрокаОтгрузкиПоставки.КорАналитикаУчетаПоПартнерам;
						
						НовСтр_Долг_Приход.Долг                          = СуммаСписания;
						НовСтр_Долг_Приход.ДолгРегл                      = ПриходДолгРегл;
						НовСтр_Долг_Приход.ДолгУпр                       = ПриходДолгУпр;
						
					#КонецОбласти
					КонецЕсли;
					
					#Область РасходДолг
					Если СтрокаЗачета.ПорядокЗачета>= ГлобальныеПеременные.ПорядокФакт Тогда
					//Переносим предоплату на расчетный документ отгрузки.
					НовСтр_Долг_Расход = ТаблицаРасчетовПоСрокам.Добавить();
					НовСтр_Долг_Расход.ВидДвижения                   = ВидДвиженияНакопления.Расход;
					НовСтр_Долг_Расход.ВалютаДокумента               = СтрокаОтгрузкиПоставки.ВалютаДокумента;
					НовСтр_Долг_Расход.Период                        = СтрокаЗачета.ПериодЗачета;
					НовСтр_Долг_Расход.ХозяйственнаяОперация         = ХозяйственнаяОперацияЗачетАванса;
					НовСтр_Долг_Расход.НастройкаХозяйственнойОперации = НастройкиХО["ЗачетОплаты"];
					НовСтр_Долг_Расход.ИдентификаторФинЗаписи        = ИдентификаторЗачетаАванса;
					НовСтр_Долг_Расход.ДатаПлановогоПогашения        = СтрокаОтгрузкиПоставки.ДатаПлановогоПогашения;
					НовСтр_Долг_Расход.РасчетныйДокумент             = ?(СтрокаОтгрузкиПоставки.РасчетныйДокумент <> СтрокаОтгрузкиПоставки.Регистратор, СтрокаОтгрузкиПоставки.РасчетныйДокумент, СтрокаОтгрузкиПоставки.Регистратор);
					НовСтр_Долг_Расход.ДатаВозникновения             = СтрокаОтгрузкиПоставки.ДатаВозникновения;
					НовСтр_Долг_Расход.ПорядокЗачета                 = СтрокаЗачета.ПорядокЗачета;
					НовСтр_Долг_Расход.ПорядокОперации               = СтрокаЗачета.ПорядокЗачета;
					НовСтр_Долг_Расход.ДокументРегистратор           = СтрокаОтгрузкиПоставки.Регистратор;
					НовСтр_Долг_Расход.СтатьяДвиженияДенежныхСредств = СтрокаОтгрузкиПоставки.СтатьяДвиженияДенежныхСредств;
					НовСтр_Долг_Расход.Сторно                        = СтрокаОтгрузкиПоставки.Сторно;
					НовСтр_Долг_Расход.СвязанныйДокумент             = Неопределено;
					
					НовСтр_Долг_Расход.АналитикаУчетаПоПартнерамПриемник  = Справочники.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка();
					НовСтр_Долг_Расход.ОбъектРасчетовПриемник             = Справочники.ОбъектыРасчетов.ПустаяСсылка();
					НовСтр_Долг_Расход.ВалютаПриемник                     = Справочники.Валюты.ПустаяСсылка();
					НовСтр_Долг_Расход.СуммаПриемник                      = 0;
					
					НовСтр_Долг_Приход.ПоДаннымОбъектаРасчетовИсточника = ЛОЖЬ;
					НовСтр_Долг_Расход.КорОбъектРасчетов                = Справочники.ОбъектыРасчетов.ПустаяСсылка();
					НовСтр_Долг_Расход.КорАналитикаУчетаПоПартнерам     = Справочники.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка();
					
					НовСтр_Долг_Расход.Долг                          = НовСтр_Предоплата_Расход.Предоплата;
					НовСтр_Долг_Расход.ДолгУпр                       = НовСтр_Предоплата_Расход.ПредоплатаУпр;
					НовСтр_Долг_Расход.ДолгРегл                      = НовСтр_Предоплата_Расход.ПредоплатаРегл;
					КонецЕсли;
					#КонецОбласти
				
				КонецЕсли;
				
				//Уменьшаем строку оплаты на сумму зачета
				СтрокаОплаты.Сумма         = СтрокаОплаты.Сумма     - СуммаСписания;
				СтрокаОплаты.СуммаРегл     = СтрокаОплаты.СуммаРегл - СуммаСписанияРегл;
				СтрокаОплаты.СуммаУпр      = СтрокаОплаты.СуммаУпр  - СуммаСписанияУпр;
				
				//Уменьшаем сумму строку отгрузки, которая пойдет в приход.
				Если СтрокаОтгрузкиПоставки.РучнойКурсРегл И НЕ ДвойнаяЗаписьНеНужна Тогда
					СтрокаОтгрузкиПоставки.СуммаРегл = СтрокаОтгрузкиПоставки.СуммаРегл - ПриходДолгРегл;
					//В строке отгрузки может быть нулевая сумма к приходованию, но не нулевая сумма к переоценке.
					СтрокаОтгрузкиПоставки.СуммаРеглДляПереоценки = СтрокаОтгрузкиПоставки.СуммаРеглДляПереоценки - СуммаСписанияРегл;
				Иначе
					//Выше могла произойти переоценка, поэтому сумму для переоценки нужно изменить так же как сумму регл
					ПересчитанныйОстатокРегл = СуммаСписания(СтрокаОтгрузкиПоставки.ИсходнаяСуммаРегл/СтрокаОтгрузкиПоставки.ИсходнаяСумма, СтрокаОтгрузкиПоставки.СуммаРегл, СтрокаОтгрузкиПоставки.Сумма, СтрокаОтгрузкиПоставки.Сумма-СуммаСписания);
					СтрокаОтгрузкиПоставки.СуммаРеглДляПереоценки = СтрокаОтгрузкиПоставки.СуммаРеглДляПереоценки - (СтрокаОтгрузкиПоставки.СуммаРегл -ПересчитанныйОстатокРегл);
					СтрокаОтгрузкиПоставки.СуммаРегл = ПересчитанныйОстатокРегл;
				КонецЕсли;
				
				Если СтрокаОтгрузкиПоставки.РучнойКурсУпр И НЕ ДвойнаяЗаписьНеНужна Тогда
					СтрокаОтгрузкиПоставки.СуммаУпр = СтрокаОтгрузкиПоставки.СуммаУпр - ПриходДолгУпр;
					СтрокаОтгрузкиПоставки.СуммаУпрДляПереоценки  = СтрокаОтгрузкиПоставки.СуммаУпрДляПереоценки - СуммаСписанияУпр;
				Иначе
					ПересчитанныйОстатокУпр = СуммаСписания(СтрокаОтгрузкиПоставки.ИсходнаяСуммаУпр/СтрокаОтгрузкиПоставки.ИсходнаяСумма, СтрокаОтгрузкиПоставки.СуммаУпр, СтрокаОтгрузкиПоставки.Сумма, СтрокаОтгрузкиПоставки.Сумма-СуммаСписания);
					СтрокаОтгрузкиПоставки.СуммаУпрДляПереоценки = СтрокаОтгрузкиПоставки.СуммаУпрДляПереоценки - (СтрокаОтгрузкиПоставки.СуммаУпр -ПересчитанныйОстатокУпр);
					СтрокаОтгрузкиПоставки.СуммаУпр = ПересчитанныйОстатокУпр;
				КонецЕсли;
				
				СтрокаОтгрузкиПоставки.Сумма                  = СтрокаОтгрузкиПоставки.Сумма - СуммаСписания;
				
				//Хранит средневзвешанные курсы накладных для проведения корректировок.
				Если ГлобальныеПеременные.ДанныеНакладных[СтрокаОтгрузкиПоставки.Регистратор] = Неопределено Тогда
					ГлобальныеПеременные.ДанныеНакладных.Вставить(СтрокаОтгрузкиПоставки.Регистратор, СтруктураСумм());
				КонецЕсли;
				
				ДанныеНакладной                    = ГлобальныеПеременные.ДанныеНакладных[СтрокаОтгрузкиПоставки.Регистратор];
				ДанныеНакладной.СуммаДокумента     = ДанныеНакладной.СуммаДокумента     + СуммаСписания;
				ДанныеНакладной.СуммаДокументаРегл = ДанныеНакладной.СуммаДокументаРегл + СуммаСписанияРегл;
				ДанныеНакладной.СуммаДокументаУпр  = ДанныеНакладной.СуммаДокументаУпр  + СуммаСписанияУпр;
				
				Если СтрокаОплаты.Сумма = 0 Тогда
					ДобавитьЗаписьПереоценки(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, СтрокаОтгрузкиПоставки.Период,
						СтрокаОплаты, "Предоплата", -Окр(СтрокаОплаты.СуммаРегл, 2), -Окр(СтрокаОплаты.СуммаУпр, 2));
				КонецЕсли;
				
				Если СтрокаОтгрузкиПоставки.Сумма = 0 Тогда
					СтрокаОтгрузкиПоставки.ЕстьОстаток = Ложь;
					ДобавитьЗаписьПереоценки(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, Макс(НачалоДня(СтрокаЗачета.ПериодЗачета), НачалоДня(СтрокаОтгрузкиПоставки.Период)),
						СтрокаОтгрузкиПоставки, "Долг", -СтрокаОтгрузкиПоставки.СуммаРеглДляПереоценки, -СтрокаОтгрузкиПоставки.СуммаУпрДляПереоценки);
				КонецЕсли;
				
			//Отгрузка раньше оплаты.
			Иначе
				
				ХозяйственныеОперацииПереноса = ХозяйственныеОперацииПереносаРасчетов();
				
				//Обычная оплата.
				Если НЕ СтрокаЗачета.ЭтоКорректировка Тогда
					
					//Добавляем строку прихода долга по отгрузке/поставке.
					ДобавитьПриход(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, СтрокаОтгрузкиПоставки, "ОтгрузкаПоставка", ТаблицаЗачетовОплат, СтрокаЗачета.ИндексСтрокиОтгрузокПоставок);
					
					//Переоценка накладной до даты оплаты.
					Если НужнаПереоценка Тогда
						ПереоценитьДолг(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, РасчетыОтгрузкиПоставки, СтрокаОтгрузкиПоставки.Регистратор, СтрокаЗачета.ПериодЗачета);
					КонецЕсли;
					
					//Списываем долг по курсу аванса.
					СуммаСписанияРегл = СуммаСписания(0, СтрокаОплаты.СуммаРегл, СтрокаОплаты.Сумма, СуммаСписания);
					СуммаСписанияУпр = СуммаСписания(0, СтрокаОплаты.СуммаУпр, СтрокаОплаты.Сумма, СуммаСписания);
					
					#Область РасходДолг
					Если СтрокаЗачета.ПорядокЗачета >= ГлобальныеПеременные.ПорядокФакт Тогда
						НовСтр_Долг_Расход = ТаблицаРасчетовПоСрокам.Добавить();
						НовСтр_Долг_Расход.ВидДвижения                   = ВидДвиженияНакопления.Расход;
						НовСтр_Долг_Расход.ДокументРегистратор           = СтрокаОплаты.Регистратор;
						//Взаимозачет считаем взаимозачетом
						НовСтр_Долг_Расход.НастройкаХозяйственнойОперации = СтрокаОплаты.НастройкаХозяйственнойОперации;
						Если ХозяйственныеОперацииПереноса.Найти(СтрокаОплаты.ХозяйственнаяОперация) <> Неопределено Тогда
							НовСтр_Долг_Расход.ХозяйственнаяОперация         = СтрокаОплаты.ХозяйственнаяОперация;
						Иначе
							НовСтр_Долг_Расход.ХозяйственнаяОперация         = ХозяйственныеОперации["ПогашениеЗадолженности"];
						КонецЕсли;
						НовСтр_Долг_Расход.ВалютаДокумента               = СтрокаОплаты.ВалютаДокумента;
						НовСтр_Долг_Расход.Период                        = СтрокаЗачета.ПериодЗачета;
						НовСтр_Долг_Расход.ПорядокОперации               = СтрокаЗачета.ПорядокЗачета;
						НовСтр_Долг_Расход.СтатьяДвиженияДенежныхСредств = СтрокаОплаты.СтатьяДвиженияДенежныхСредств;
						НовСтр_Долг_Расход.ИдентификаторФинЗаписи        = СтрокаОплаты.ИдентификаторФинЗаписи;
						НовСтр_Долг_Расход.РасчетныйДокумент             = СтрокаОтгрузкиПоставки.РасчетныйДокумент;
						НовСтр_Долг_Расход.ДатаВозникновения             = СтрокаОтгрузкиПоставки.ДатаВозникновения;
						НовСтр_Долг_Расход.ДатаПлановогоПогашения        = СтрокаОтгрузкиПоставки.ДатаПлановогоПогашения;
						НовСтр_Долг_Расход.ПорядокЗачета                 = СтрокаОтгрузкиПоставки.ПорядокЗачетаПоДатеПлатежа;
						НовСтр_Долг_Расход.Сторно                        = СтрокаОплаты.Сторно;
						
						//С приемником связан только регистратор оплаты
						НовСтр_Долг_Расход.АналитикаУчетаПоПартнерамПриемник = СтрокаОплаты.АналитикаУчетаПоПартнерамПриемник;
						НовСтр_Долг_Расход.ОбъектРасчетовПриемник            = СтрокаОплаты.ОбъектРасчетовПриемник;
						НовСтр_Долг_Расход.ВалютаПриемник                    = СтрокаОплаты.ВалютаПриемник;
						НовСтр_Долг_Расход.СуммаПриемник                     = СуммаСписания(0, СтрокаОплаты.СуммаПриемник, СтрокаОплаты.Сумма, СуммаСписания);
						СтрокаОплаты.СуммаПриемник = СтрокаОплаты.СуммаПриемник - НовСтр_Долг_Расход.СуммаПриемник;
						
						НовСтр_Долг_Расход.ПоДаннымОбъектаРасчетовИсточника  = СтрокаОплаты.ПоДаннымОбъектаРасчетовИсточника;
						НовСтр_Долг_Расход.КорОбъектРасчетов                 = СтрокаОплаты.КорОбъектРасчетов;
						НовСтр_Долг_Расход.КорАналитикаУчетаПоПартнерам      = СтрокаОплаты.КорАналитикаУчетаПоПартнерам;
						
						НовСтр_Долг_Расход.Долг     = СуммаСписания;
						НовСтр_Долг_Расход.ДолгРегл = СуммаСписанияРегл;
						НовСтр_Долг_Расход.ДолгУпр  = СуммаСписанияУпр;
					КонецЕсли;
					#КонецОбласти
					
					//Уменьшаем строку оплаты на зачтенную сумму.
					СтрокаОплаты.Сумма       = СтрокаОплаты.Сумма     - СуммаСписания;
					СтрокаОплаты.СуммаРегл   = СтрокаОплаты.СуммаРегл - СуммаСписанияРегл;
					СтрокаОплаты.СуммаУпр    = СтрокаОплаты.СуммаУпр  - СуммаСписанияУпр;
					
					//Уменьшаем строку отгрузки/поставки на зачтенную сумму.
					СтрокаОтгрузкиПоставки.Сумма     = СтрокаОтгрузкиПоставки.Сумма     - СуммаСписания;
					СтрокаОтгрузкиПоставки.СуммаРегл = СтрокаОтгрузкиПоставки.СуммаРегл - СуммаСписанияРегл;
					СтрокаОтгрузкиПоставки.СуммаУпр  = СтрокаОтгрузкиПоставки.СуммаУпр  - СуммаСписанияУпр;
					СтрокаОтгрузкиПоставки.СуммаРеглДляПереоценки = СтрокаОтгрузкиПоставки.СуммаРеглДляПереоценки - СуммаСписанияРегл;
					СтрокаОтгрузкиПоставки.СуммаУпрДляПереоценки = СтрокаОтгрузкиПоставки.СуммаУпрДляПереоценки - СуммаСписанияУпр;
					
					Если СтрокаОтгрузкиПоставки.Сумма = 0 Тогда
						СтрокаОтгрузкиПоставки.ЕстьОстаток = ЛОЖЬ;
						ДобавитьЗаписьПереоценки(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, НачалоДня(СтрокаЗачета.ПериодЗачета),
							СтрокаОтгрузкиПоставки, "Долг", -СтрокаОтгрузкиПоставки.СуммаРеглДляПереоценки, -СтрокаОтгрузкиПоставки.СуммаУпрДляПереоценки);
					КонецЕсли;
					
				//Корректировка накладной в минус.
				Иначе
					
					//Добавляем строку прихода по долгу для сторнируемой накладной.
					ДобавитьПриход(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, СтрокаОтгрузкиПоставки, "ОтгрузкаПоставка", ТаблицаЗачетовОплат, СтрокаЗачета.ИндексСтрокиОтгрузокПоставок);
					
					//Переоценка накладной до даты оплаты.
					Если НужнаПереоценка И НачалоМесяца(СтрокаОтгрузкиПоставки.ДатаВозникновения) < НачалоМесяца(СтрокаОплаты.ДатаВозникновения) Тогда
						ПереоценитьДолг(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, РасчетыОтгрузкиПоставки, СтрокаОтгрузкиПоставки.Регистратор, СтрокаЗачета.ПериодЗачета, Ложь);
					КонецЕсли;
					
					Если СтрокаОплаты.РучнойКурсРегл
						Или ГлобальныеПеременные.ДанныеНакладных[СтрокаОплаты.СвязанныйДокумент] = Неопределено Тогда
						СуммаСторноРегл = Окр(СуммаСписания * СтрокаОплаты.СуммаРегл / СтрокаОплаты.Сумма,2);
					Иначе
						СуммаСторноРегл = Окр(СуммаСписания * 
							(ГлобальныеПеременные.ДанныеНакладных[СтрокаОплаты.СвязанныйДокумент].СуммаДокументаРегл 
								/ ГлобальныеПеременные.ДанныеНакладных[СтрокаОплаты.СвязанныйДокумент].СуммаДокумента),2);
					КонецЕсли;
							
					Если СтрокаОплаты.РучнойКурсУпр
						Или ГлобальныеПеременные.ДанныеНакладных[СтрокаОплаты.СвязанныйДокумент] = Неопределено Тогда
						СуммаСторноУпр = Окр(СуммаСписания * СтрокаОплаты.СуммаУпр / СтрокаОплаты.Сумма,2);
					Иначе
						СуммаСторноУпр = Окр(СуммаСписания * 
							(ГлобальныеПеременные.ДанныеНакладных[СтрокаОплаты.СвязанныйДокумент].СуммаДокументаУпр 
								/ ГлобальныеПеременные.ДанныеНакладных[СтрокаОплаты.СвязанныйДокумент].СуммаДокумента),2);
					КонецЕсли;
					
					#Область СторноЗапись
					Если СтрокаЗачета.ПорядокЗачета >= ГлобальныеПеременные.ПорядокФакт Тогда
						НовСтр_Сторно = ТаблицаРасчетовПоСрокам.Добавить();
						НовСтр_Сторно.ВидДвижения = ВидДвиженияНакопления.Расход;
						
						НовСтр_Сторно.ДокументРегистратор   = СтрокаОплаты.Регистратор;
						НовСтр_Сторно.РасчетныйДокумент     = СтрокаОтгрузкиПоставки.РасчетныйДокумент;
						НовСтр_Сторно.ХозяйственнаяОперация = СтрокаОплаты.ХозяйственнаяОперация;
						НовСтр_Сторно.ВалютаДокумента       = СтрокаОплаты.ВалютаДокумента;
						НовСтр_Сторно.СвязанныйДокумент     = СтрокаОплаты.СвязанныйДокумент;
						
						НовСтр_Сторно.Долг     = СуммаСписания;
						НовСтр_Сторно.ДолгРегл = СуммаСторноРегл;
						НовСтр_Сторно.ДолгУпр  = СуммаСторноУпр;
						
						НовСтр_Сторно.Период                   = СтрокаЗачета.ПериодЗачета;
						НовСтр_Сторно.ПорядокОперации          = СтрокаЗачета.ПорядокЗачета;
						НовСтр_Сторно.ПорядокЗачета            = СтрокаЗачета.ПорядокЗачета;
						НовСтр_Сторно.ДатаПлановогоПогашения   = СтрокаОтгрузкиПоставки.ДатаПлановогоПогашения;
						НовСтр_Сторно.ДатаВозникновения        = СтрокаОтгрузкиПоставки.ДатаВозникновения;
						
						НовСтр_Сторно.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
						НовСтр_Сторно.НастройкаХозяйственнойОперации = СтрокаОплаты.НастройкаХозяйственнойОперации;
						НовСтр_Сторно.ИдентификаторФинЗаписи   = СтрокаОплаты.ИдентификаторФинЗаписи;
						
						//В корректировках нет переноса расчетов
						НовСтр_Сторно.АналитикаУчетаПоПартнерамПриемник = Справочники.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка();
						НовСтр_Сторно.ОбъектРасчетовПриемник            = Справочники.ОбъектыРасчетов.ПустаяСсылка();
						НовСтр_Сторно.ВалютаПриемник                    = Справочники.Валюты.ПустаяСсылка();
						НовСтр_Сторно.СуммаПриемник                     = 0;
						
						НовСтр_Сторно.ПоДаннымОбъектаРасчетовИсточника = ЛОЖЬ;
						НовСтр_Сторно.КорОбъектРасчетов                = СтрокаОтгрузкиПоставки.КорОбъектРасчетов;
						НовСтр_Сторно.КорАналитикаУчетаПоПартнерам     = СтрокаОтгрузкиПоставки.КорАналитикаУчетаПоПартнерам;
						
					КонецЕсли;
					#КонецОбласти
					
					//Уменьшаем строку оплаты на сумму сторно.
					СтрокаОплаты.Сумма     = СтрокаОплаты.Сумма     - СуммаСписания;
					СтрокаОплаты.СуммаРегл = СтрокаОплаты.СуммаРегл - СуммаСторноРегл;
					СтрокаОплаты.СуммаУпр  = СтрокаОплаты.СуммаУпр  - СуммаСторноУпр;
					
					//Уменьшаем строку отгрузки на сумму сторно.
					СтрокаОтгрузкиПоставки.Сумма                  = СтрокаОтгрузкиПоставки.Сумма     - СуммаСписания;
					СтрокаОтгрузкиПоставки.СуммаРегл              = СтрокаОтгрузкиПоставки.СуммаРегл - СуммаСторноРегл; 
					СтрокаОтгрузкиПоставки.СуммаУпр               = СтрокаОтгрузкиПоставки.СуммаУпр  - СуммаСторноУпр;
					СтрокаОтгрузкиПоставки.СуммаРеглДляПереоценки = СтрокаОтгрузкиПоставки.СуммаРеглДляПереоценки - СуммаСторноРегл;
					СтрокаОтгрузкиПоставки.СуммаУпрДляПереоценки  = СтрокаОтгрузкиПоставки.СуммаУпрДляПереоценки - СуммаСторноУпр;
					
					Если СтрокаОтгрузкиПоставки.Сумма = 0 Тогда
						ДобавитьЗаписьПереоценки(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, НачалоДня(СтрокаОплаты.Период),
							СтрокаОтгрузкиПоставки, "Долг", -СтрокаОтгрузкиПоставки.СуммаРеглДляПереоценки, -СтрокаОтгрузкиПоставки.СуммаУпрДляПереоценки);
						СтрокаОтгрузкиПоставки.СуммаРеглДляПереоценки = 0;
						СтрокаОтгрузкиПоставки.СуммаУпрДляПереоценки = 0;
					КонецЕсли;
					
					СтрокаЗачета.ЭтоКорректировка = Ложь;
					
					//Если в таблице зачетов данная строка больше не распределяется как корректировка то пересчитаем её сумму регл и упр и будем зачитывать как обычную оплату.
					Если ТаблицаЗачетовОплат.НайтиСтроки(Новый Структура("ИндексСтрокиОплат, ЭтоКорректировка", СтрокаЗачета.ИндексСтрокиОплат, Истина)).Количество() = 0 Тогда
						ПересчитатьСуммыЕслиЭтоКорректировка(ГлобальныеПеременные, СтрокаОплаты);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Иначе
				
				Если СтрокаЗачета.ИндексСтрокиОтгрузокПоставок <> -1 Тогда
					
					СтрокаОтгрузкиПоставки = РасчетыОтгрузкиПоставки[СтрокаЗачета.ИндексСтрокиОтгрузокПоставок];
					ДобавитьПриход(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, СтрокаОтгрузкиПоставки, "ОтгрузкаПоставка", ТаблицаЗачетовОплат, СтрокаЗачета.ИндексСтрокиОтгрузокПоставок);
					
					Если НужнаПереоценка Тогда
						ПереоценитьДолг(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, РасчетыОтгрузкиПоставки, СтрокаОтгрузкиПоставки.Регистратор);
					КонецЕсли;
					
				Иначе
					
					СтрокаОплаты = РасчетыОплаты[СтрокаЗачета.ИндексСтрокиОплат];
					ДобавитьПриход(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, СтрокаОплаты, "Оплата", ТаблицаЗачетовОплат, СтрокаЗачета.ИндексСтрокиОплат);
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		#КонецОбласти
		
		#Область ФиксацияРезультатов
		
		НаборЗаписейПоСрокам = РегистрыНакопления[ИмяРегистраРасчетов].СоздатьНаборЗаписей();
		НаборЗаписейПланОплат = РегистрыНакопления[ИмяРегистраПланаОплат].СоздатьНаборЗаписей();
		НаборЗаписейПланОтгрузокПоставок = РегистрыНакопления[ИмяРегистраПланаОтгрузкиПоставки].СоздатьНаборЗаписей();
		
		ТаблицаРасчетовПоСрокам.Свернуть("Период, Регистратор, ВидДвижения, АналитикаУчетаПоПартнерам, ОбъектРасчетов, Валюта, ДокументРегистратор,
				|РасчетныйДокумент, ХозяйственнаяОперация, ДатаПлановогоПогашения, ДатаВозникновения, ПорядокЗачета, ПорядокОперации,
				|ВалютаДокумента, СвязанныйДокумент, СтатьяДвиженияДенежныхСредств, КорОбъектРасчетов, КорАналитикаУчетаПоПартнерам,
				|ОбъектРасчетовПриемник, АналитикаУчетаПоПартнерамПриемник, ВалютаПриемник, Сторно,
				|НастройкаХозяйственнойОперации,ИдентификаторФинЗаписи,ЗаписьДоНачалаРасчета,ПоДаннымОбъектаРасчетовИсточника",
				"Предоплата, ПредоплатаРегл, ПредоплатаУпр, Долг, ДолгРегл, ДолгУпр,СуммаПриемник");
		
		ТаблицаРасчетовПоСрокам.ЗаполнитьЗначения(ГлобальныеПеременные.АналитикаУчетаПоПартнерам, "АналитикаУчетаПоПартнерам");
			ТаблицаРасчетовПоСрокам.ЗаполнитьЗначения(ГлобальныеПеременные.ОбъектРасчетов,            "ОбъектРасчетов");
			ТаблицаРасчетовПоСрокам.ЗаполнитьЗначения(ГлобальныеПеременные.ВалютаРасчетов,            "Валюта");
			ТаблицаРасчетовПоСрокам.Индексы.Добавить("Регистратор");
		
		Если СтрокаОсновныхПараметровРасчета.ЗаписыватьИзменения Тогда
			ТаблицаРегистраторов = ТаблицаСвободныхРегистраторовРасчета(ГлобальныеПеременные);
		КонецЕсли;
		
		Если НЕ СтрокаОсновныхПараметровРасчета.НачальноеЗаполнение И СтрокаОсновныхПараметровРасчета.ЗаписыватьИзменения И СтрокаОсновныхПараметровРасчета.РассчитыватьФакт Тогда
			
			НаборЗаписейПоСрокам.ДополнительныеСвойства.Вставить("Порядок", ГлобальныеПеременные.ПорядокФакт );
			ПодготовитьДанныеДляЗаписи(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, НаборЗаписейПоСрокам, ТаблицаРегистраторов);
			
			#Область ПроверкаИзмененийРегистров
			
			ТаблицаИзменений = Неопределено;
			
			Если ДополнительныеСвойстваПроведения <> Неопределено
				И Не (ДополнительныеСвойстваПроведения.Свойство("ПропуститьПроверкуИзменений")
					И ДополнительныеСвойстваПроведения.ПропуститьПроверкуИзменений) Тогда
				Запрос.Текст = "
				|ВЫБРАТЬ *
				|ПОМЕСТИТЬ ВтДвиженияПосле
				|ИЗ  &ТаблицаПоСрокам КАК ДвиженияПосле
				|;
				|ВЫБРАТЬ
				|	ВложенныйЗапрос.Период                        КАК Период,
				|	ВложенныйЗапрос.АналитикаУчетаПоПартнерам     КАК АналитикаУчетаПоПартнерам,
				|	ВложенныйЗапрос.ОбъектРасчетов                КАК ОбъектРасчетов,
				|	ВложенныйЗапрос.Валюта                        КАК Валюта,
				|	ВложенныйЗапрос.РасчетныйДокумент             КАК РасчетныйДокумент,
				|	ВложенныйЗапрос.ДатаПлановогоПогашения        КАК ДатаПлановогоПогашения,
				|	ВложенныйЗапрос.ДатаВозникновения             КАК ДатаВозникновения,
				|	
				|	ВложенныйЗапрос.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
				|	ВложенныйЗапрос.ХозяйственнаяОперация         КАК ХозяйственнаяОперация,
				|	ВложенныйЗапрос.ДокументРегистратор           КАК ДокументРегистратор,
				|	
				|	СУММА(ВложенныйЗапрос.Предоплата)                    КАК Предоплата,
				|	СУММА(ВложенныйЗапрос.ПредоплатаРегл)                КАК ПредоплатаРегл,
				|	СУММА(ВложенныйЗапрос.ПредоплатаУпр)                 КАК ПредоплатаУпр,
				|	СУММА(ВложенныйЗапрос.Долг)                          КАК Долг,
				|	СУММА(ВложенныйЗапрос.ДолгРегл)                      КАК ДолгРегл,
				|	СУММА(ВложенныйЗапрос.ДолгУпр)                       КАК ДолгУпр,
				|	&СоздаватьЗаданияКЗакрытиюСледующегоМесяца    КАК СоздаватьЗаданияКЗакрытиюСледующегоМесяца
				|ПОМЕСТИТЬ ТаблицаИзмененийРасчетыСКлиентамиПоСрокам
				|ИЗ
				|	(ВЫБРАТЬ
				|		РасчетыПоСрокам.Период                        КАК Период,
				|		РасчетыПоСрокам.АналитикаУчетаПоПартнерам     КАК АналитикаУчетаПоПартнерам,
				|		РасчетыПоСрокам.ОбъектРасчетов                КАК ОбъектРасчетов,
				|		РасчетыПоСрокам.Валюта                        КАК Валюта,
				|		РасчетыПоСрокам.РасчетныйДокумент             КАК РасчетныйДокумент,
				|		ВЫБОР КОГДА РасчетыПоСрокам.Предоплата <> 0 
				|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
				|			ИНАЧЕ РасчетыПоСрокам.ДатаПлановогоПогашения
				|		КОНЕЦ                                         КАК ДатаПлановогоПогашения,
				|		РасчетыПоСрокам.ДатаВозникновения             КАК ДатаВозникновения,
				|		
				|		РасчетыПоСрокам.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
				|		ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(РасчетыПоСрокам.ДокументРегистратор)
				|						В (ТИП(Документ.КорректировкаРеализации),
				|						   ТИП(Документ.КорректировкаПриобретения))
				|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)
				|			ИНАЧЕ РасчетыПоСрокам.ХозяйственнаяОперация
				|		КОНЕЦ                                         КАК ХозяйственнаяОперация,
				|		РасчетыПоСрокам.ДокументРегистратор           КАК ДокументРегистратор,
				|		
				|		РасчетыПоСрокам.Предоплата                    КАК Предоплата,
				|		РасчетыПоСрокам.ПредоплатаРегл                КАК ПредоплатаРегл,
				|		РасчетыПоСрокам.ПредоплатаУпр                 КАК ПредоплатаУпр,
				|		РасчетыПоСрокам.Долг                          КАК Долг,
				|		РасчетыПоСрокам.ДолгРегл                      КАК ДолгРегл,
				|		РасчетыПоСрокам.ДолгУпр                       КАК ДолгУпр
				|		
				|	ИЗ
				|		РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыПоСрокам
				|	ГДЕ
				|		РасчетыПоСрокам.ДокументРегистратор В (&МассивДокументов)
				|		И РасчетыПоСрокам.Активность
				|		И РасчетыПоСрокам.ОбъектРасчетов = &ОбъектРасчетов
				|		И РасчетыПоСрокам.АналитикаУчетаПоПартнерам = &АналитикаУчетаПоПартнерам
				|		И РасчетыПоСрокам.Период >= &НачалоДняПорядкаФакт
				|	
				|	ОБЪЕДИНИТЬ ВСЕ
				|	
				|	ВЫБРАТЬ
				|		ДвиженияПосле.Период                        КАК Период,
				|		ДвиженияПосле.АналитикаУчетаПоПартнерам     КАК АналитикаУчетаПоПартнерам,
				|		ДвиженияПосле.ОбъектРасчетов                КАК ОбъектРасчетов,
				|		ДвиженияПосле.Валюта                        КАК Валюта,
				|		ДвиженияПосле.РасчетныйДокумент             КАК РасчетныйДокумент,
				|		ВЫБОР КОГДА ДвиженияПосле.Предоплата <> 0 
				|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
				|			ИНАЧЕ ДвиженияПосле.ДатаПлановогоПогашения
				|		КОНЕЦ                                       КАК ДатаПлановогоПогашения,
				|		ДвиженияПосле.ДатаВозникновения             КАК ДатаВозникновения,
				|		
				|		ДвиженияПосле.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
				|		ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(ДвиженияПосле.ДокументРегистратор)
				|						В (ТИП(Документ.КорректировкаРеализации),
				|						   ТИП(Документ.КорректировкаПриобретения))
				|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)
				|			ИНАЧЕ ДвиженияПосле.ХозяйственнаяОперация
				|		КОНЕЦ                                       КАК ХозяйственнаяОперация,
				|		ДвиженияПосле.ДокументРегистратор           КАК ДокументРегистратор,
				|		
				|		-ДвиженияПосле.Предоплата                    КАК Предоплата,
				|		-ДвиженияПосле.ПредоплатаРегл                КАК ПредоплатаРегл,
				|		-ДвиженияПосле.ПредоплатаУпр                 КАК ПредоплатаУпр,
				|		-ДвиженияПосле.Долг                          КАК Долг,
				|		-ДвиженияПосле.ДолгРегл                      КАК ДолгРегл,
				|		-ДвиженияПосле.ДолгУпр                       КАК ДолгУпр
				|	ИЗ
				|		ВтДвиженияПосле КАК ДвиженияПосле) КАК ВложенныйЗапрос
				|СГРУППИРОВАТЬ ПО
				|	ВложенныйЗапрос.Период,
				|	ВложенныйЗапрос.АналитикаУчетаПоПартнерам,
				|	ВложенныйЗапрос.ОбъектРасчетов,
				|	ВложенныйЗапрос.Валюта,
				|	ВложенныйЗапрос.РасчетныйДокумент,
				|	ВложенныйЗапрос.ДатаПлановогоПогашения,
				|	ВложенныйЗапрос.ДатаВозникновения,
				|	ВложенныйЗапрос.СтатьяДвиженияДенежныхСредств,
				|	ВложенныйЗапрос.ХозяйственнаяОперация,
				|	ВложенныйЗапрос.ДокументРегистратор
				|ИМЕЮЩИЕ
				|	СУММА(ВложенныйЗапрос.Предоплата) <> 0
				|	ИЛИ СУММА(ВложенныйЗапрос.ПредоплатаРегл) <> 0
				|	ИЛИ СУММА(ВложенныйЗапрос.ПредоплатаУпр) <> 0
				|	ИЛИ СУММА(ВложенныйЗапрос.Долг) <> 0
				|	ИЛИ СУММА(ВложенныйЗапрос.ДолгРегл) <> 0
				|	ИЛИ СУММА(ВложенныйЗапрос.ДолгУпр) <> 0";
				
				Если НЕ ГлобальныеПеременные.ЭтоРасчетыСКлиентами Тогда
					Запрос.Текст = СтрЗаменить(Запрос.Текст,
						"РегистрНакопления.РасчетыСКлиентамиПоСрокам",
						"РегистрНакопления.РасчетыСПоставщикамиПоСрокам");
					Запрос.Текст = СтрЗаменить(Запрос.Текст,
						"ТаблицаИзмененийРасчетыСКлиентамиПоСрокам",
						"ТаблицаИзмененийРасчетыСПоставщикамиПоСрокам");
				КонецЕсли;
				
				РасчетыДляПроверки = ТаблицаРасчетовПоСрокам.Скопировать(Новый Структура("ЗаписьДоНачалаРасчета",Ложь));
				
				МассивДокументов = РасчетыДляПроверки.ВыгрузитьКолонку("ДокументРегистратор");
				МассивДокументов.Добавить(СтрокаОсновныхПараметровРасчета.Регистратор);
				
				Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
				Запрос.УстановитьПараметр("ТаблицаПоСрокам", РасчетыДляПроверки);
				Запрос.УстановитьПараметр("МассивЗадействованныхРегистраторов",
					ГлобальныеПеременные["МассивЗадействованныхРегистраторов"
						+ ?(ГлобальныеПеременные.ЭтоРасчетыСКлиентами,"РасчетыСКлиентамиПоСрокам","РасчетыСПоставщикамиПоСрокам")]);
				Запрос.УстановитьПараметр("СоздаватьЗаданияКЗакрытиюСледующегоМесяца", ТипЗнч(СтрокаОсновныхПараметровРасчета.Регистратор) = Тип("ДокументСсылка.ВводОстатковВзаиморасчетов"));
				
				Запрос.Выполнить();
				
				// Не анализируем изменения по документу, инициирующему перерасчет:
				НеотражаемыйДокумент = СтрокаОсновныхПараметровРасчета.Регистратор;
				
				Если ГлобальныеПеременные.ЭтоРасчетыСКлиентами Тогда
					
					Запрос.УстановитьПараметр("НеотражаемыйДокумент", НеотражаемыйДокумент);
					
					ТекстАктуализацииОтражения =
					"ВЫБРАТЬ
					|	ТаблицаИзменений.ДокументРегистратор КАК Регистратор
					|ИЗ
					|	ТаблицаИзмененийРасчетыСКлиентамиПоСрокам КАК ТаблицаИзменений
					|
					|ГДЕ
					|	ТаблицаИзменений.ДокументРегистратор <> &НеотражаемыйДокумент
					|
					|СГРУППИРОВАТЬ ПО
					|	ТаблицаИзменений.ДокументРегистратор";
							
						
					Запрос.Текст = ТекстАктуализацииОтражения;
					
					ТаблицаИзменений = Запрос.Выполнить().Выгрузить();
					
					#Область ПроверкаДатыЗапрета
					
					ЗапросПроверкиДатыЗапрета = Новый Запрос("
					|ВЫБРАТЬ
					|	ЕСТЬNULL(МИНИМУМ(ТаблицаИзменений.Период),ДАТАВРЕМЯ(3999,1,1)) КАК Период,
					|	ЕСТЬNULL(ТаблицаИзменений.ОбъектРасчетов.Организация, НЕОПРЕДЕЛЕНО) КАК Организация
					|ИЗ
					|	ТаблицаИзмененийРасчетыСКлиентамиПоСрокам КАК ТаблицаИзменений
					|СГРУППИРОВАТЬ ПО
					|	ЕСТЬNULL(ТаблицаИзменений.ОбъектРасчетов.Организация, НЕОПРЕДЕЛЕНО)");
					
					ЗапросПроверкиДатыЗапрета.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
					ВыборкаМинимальногоПериода = ЗапросПроверкиДатыЗапрета.Выполнить().Выбрать();
					ДанныеДляПроверки = ДатыЗапретаИзменения.ШаблонДанныхДляПроверки();
					Пока ВыборкаМинимальногоПериода.Следующий() Цикл
						НоваяСтрока = ДанныеДляПроверки.Добавить();
						НоваяСтрока.Дата   = НачалоДня(ВыборкаМинимальногоПериода.Период);
						НоваяСтрока.Объект = ВыборкаМинимальногоПериода.Организация;
						НоваяСтрока.Раздел = "ФинансовыйКонтур";
					КонецЦикла;
					
					ОписаниеОшибки = НСтр("ru = 'Изменяемые данные взаиморасчетов находятся в закрытом периоде.'");
					
					Если ДатыЗапретаИзменения.НайденЗапретИзмененияДанных(ДанныеДляПроверки, НаборЗаписейПоСрокам) Тогда
						ВызватьИсключение ОписаниеОшибки;
					КонецЕсли;
					#КонецОбласти
					
	
					
					Запрос.Текст =
					"ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	НАЧАЛОПЕРИОДА(Изменения.Период, МЕСЯЦ)         КАК Период,
					|	Изменения.РасчетныйДокумент                    КАК Документ,
					|	Изменения.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент
					|ИЗ
					|	ТаблицаИзмененийРасчетыСКлиентамиПоСрокам КАК Изменения";
					
					ИзмененияНДСУП = Запрос.Выполнить().Выгрузить();
					
					ЭмуляцияДокумента = ПроведениеДокументов.ЭмуляцияДокумента(Неопределено, Неопределено);
					ЭмуляцияДокумента.ДополнительныеСвойства.ПроведениеДокументов.СвойстваДокумента =
						Новый Структура(ЭмуляцияДокумента.ДополнительныеСвойства.ПроведениеДокументов.СвойстваДокумента);
					ЭмуляцияДокумента.ДополнительныеСвойства.ПроведениеДокументов.СвойстваДокумента.РежимЗаписи =
						ДополнительныеСвойстваПроведения.СвойстваДокумента.РежимЗаписи;
					ЗакрытиеМесяцаСервер.ОтразитьЗаданияКЗакрытиюМесяца(ЭмуляцияДокумента, Запрос.МенеджерВременныхТаблиц);
					
				Иначе
					
					Запрос.УстановитьПараметр("НеотражаемыйДокумент", НеотражаемыйДокумент);
					
					ТекстАктуализацииОтражения =
					"ВЫБРАТЬ
					|	ТаблицаИзменений.ДокументРегистратор КАК Регистратор
					|ИЗ
					|	ТаблицаИзмененийРасчетыСПоставщикамиПоСрокам КАК ТаблицаИзменений
					|
					|ГДЕ
					|	ТаблицаИзменений.ДокументРегистратор <> &НеотражаемыйДокумент
					|
					|СГРУППИРОВАТЬ ПО
					|	ТаблицаИзменений.ДокументРегистратор";
					
						
					Запрос.Текст = ТекстАктуализацииОтражения;
						
					ТаблицаИзменений = Запрос.Выполнить().Выгрузить();
					
					#Область ПроверкаДатыЗапрета
					
					ЗапросПроверкиДатыЗапрета = Новый Запрос("ВЫБРАТЬ
					|	ЕСТЬNULL(МИНИМУМ(ТаблицаИзменений.Период), ДАТАВРЕМЯ(3999, 1, 1)) КАК Период,
					|	ЕСТЬNULL(ТаблицаИзменений.ОбъектРасчетов.Организация, НЕОПРЕДЕЛЕНО) КАК Организация
					|ИЗ
					|	ТаблицаИзмененийРасчетыСПоставщикамиПоСрокам КАК ТаблицаИзменений
					|СГРУППИРОВАТЬ ПО
					|	ЕСТЬNULL(ТаблицаИзменений.ОбъектРасчетов.Организация, НЕОПРЕДЕЛЕНО)");
					
					ЗапросПроверкиДатыЗапрета.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
					ВыборкаМинимальногоПериода = ЗапросПроверкиДатыЗапрета.Выполнить().Выбрать();
					ДанныеДляПроверки = ДатыЗапретаИзменения.ШаблонДанныхДляПроверки();
					
					Пока ВыборкаМинимальногоПериода.Следующий() Цикл
						НоваяСтрока = ДанныеДляПроверки.Добавить();
						НоваяСтрока.Дата = НачалоДня(ВыборкаМинимальногоПериода.Период);
						НоваяСтрока.Объект = ВыборкаМинимальногоПериода.Организация;
						НоваяСтрока.Раздел = "ФинансовыйКонтур";
					КонецЦикла;
					ОписаниеОшибки = НСтр("ru = 'Изменяемые данные взаиморасчетов находятся в закрытом периоде.'");
					Если ДатыЗапретаИзменения.НайденЗапретИзмененияДанных(ДанныеДляПроверки, НаборЗаписейПоСрокам) Тогда
						ВызватьИсключение ОписаниеОшибки;
					КонецЕсли;
					#КонецОбласти
					
	
					Запрос.Текст =
					"ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	НАЧАЛОПЕРИОДА(Изменения.Период, МЕСЯЦ)         КАК Период,
					|	Изменения.ДокументРегистратор                          КАК Документ,
					|	Изменения.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент
					|ИЗ
					|	ТаблицаИзмененийРасчетыСПоставщикамиПоСрокам КАК Изменения
					|
					|ОБЪЕДИНИТЬ
					|
					|ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	НАЧАЛОПЕРИОДА(Изменения.Период, МЕСЯЦ)         КАК Период,
					|	Изменения.РасчетныйДокумент                    КАК Документ,
					|	Изменения.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент
					|ИЗ
					|	ТаблицаИзмененийРасчетыСПоставщикамиПоСрокам КАК Изменения";
					
					ИзмененияНДСУП = Запрос.Выполнить().Выгрузить();
					
					ЭмуляцияДокумента = ПроведениеДокументов.ЭмуляцияДокумента(Неопределено, Неопределено);
					ЭмуляцияДокумента.ДополнительныеСвойства.ПроведениеДокументов.СвойстваДокумента =
						Новый Структура(ЭмуляцияДокумента.ДополнительныеСвойства.ПроведениеДокументов.СвойстваДокумента);
					ЭмуляцияДокумента.ДополнительныеСвойства.ПроведениеДокументов.СвойстваДокумента.РежимЗаписи =
						ДополнительныеСвойстваПроведения.СвойстваДокумента.РежимЗаписи;
					ЗакрытиеМесяцаСервер.ОтразитьЗаданияКЗакрытиюМесяца(ЭмуляцияДокумента, Запрос.МенеджерВременныхТаблиц);
					
				КонецЕсли;
				
				РасчетСебестоимостиПрикладныеАлгоритмы.УничтожитьВременныеТаблицы(Запрос, "ВтДвиженияПосле");
				
			КонецЕсли;
			
			#КонецОбласти
			
			ЗаписатьПорционно(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, НаборЗаписейПоСрокам);
			
			Если ДополнительныеСвойстваПроведения <> Неопределено
				И Не (ДополнительныеСвойстваПроведения.Свойство("ПропуститьПроверкуИзменений")
					И ДополнительныеСвойстваПроведения.ПропуститьПроверкуИзменений) Тогда
				Если ГлобальныеПеременные.ЭтоРасчетыСКлиентами Тогда
					УчетНДСУП.ОтразитьВУчетеНДСИзменениеРасчетовСКлиентами(ИзмененияНДСУП);
					// Уничтожаем временную таблицу изменений, т.к. могут записываться разные наборы записей с одним менеджером запросов.
					РасчетСебестоимостиПрикладныеАлгоритмы.УничтожитьВременныеТаблицы(Запрос, "ТаблицаИзмененийРасчетыСКлиентамиПоСрокам");
				Иначе
					УчетНДСУП.ОтразитьВУчетеНДСИзменениеРасчетовСПоставщиками(ИзмененияНДСУП);
					// Уничтожаем временную таблицу изменений, т.к. могут записываться разные наборы записей с одним менеджером запросов.
					РасчетСебестоимостиПрикладныеАлгоритмы.УничтожитьВременныеТаблицы(Запрос, "ТаблицаИзмененийРасчетыСПоставщикамиПоСрокам");
				КонецЕсли;
			КонецЕсли;
			
			Если ТаблицаИзменений <> Неопределено И ТаблицаИзменений.Количество() > 0 Тогда
				УдалитьСистемныеКорректировкиРегистров(НачалоДняПорядкаФакт, Организация,, Контрагент);
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаОсновныхПараметровРасчета.ЗаписыватьИзменения И ГлобальныеПеременные.РассчитыватьПлан Тогда
		
			//Приходные движения пишутся непосредственно документами
			ТаблицаПланОплат = ТаблицаПланОплат.Скопировать(Новый Структура("ВидДвижения", ВидДвиженияНакопления.Расход));
			ТаблицаПланОплат.Свернуть("Период, Регистратор, ВидДвижения, АналитикаУчетаПоПартнерам, ОбъектРасчетов, Валюта, ДокументРегистратор,
					|ДокументПлан, ДатаПлановогоПогашения, ДатаВозникновения, ВариантОплаты, ПорядокОперации, НераспределенныйАванс, ДокументОплаты",
					"КОплате");
			
			ТаблицаПланОплат.ЗаполнитьЗначения(ГлобальныеПеременные.АналитикаУчетаПоПартнерам, "АналитикаУчетаПоПартнерам");
			ТаблицаПланОплат.ЗаполнитьЗначения(ГлобальныеПеременные.ОбъектРасчетов,            "ОбъектРасчетов");
			ТаблицаПланОплат.ЗаполнитьЗначения(ГлобальныеПеременные.ВалютаРасчетов,            "Валюта");
			ТаблицаПланОплат.Индексы.Добавить("Регистратор");
		
			ПодготовитьДанныеДляЗаписи(ГлобальныеПеременные, ТаблицаПланОплат, НаборЗаписейПланОплат, ТаблицаРегистраторов);
			ЗаписатьПорционно(ГлобальныеПеременные, ТаблицаПланОплат, НаборЗаписейПланОплат);
			
		КонецЕсли;
		
		Если СтрокаОсновныхПараметровРасчета.ЗаписыватьИзменения И ГлобальныеПеременные.РассчитыватьПлан Тогда
			
			ТаблицаПланОтгрузокПоставок = ТаблицаПланОтгрузокПоставок.Скопировать(Новый Структура("ВидДвижения", ВидДвиженияНакопления.Расход));
			
			ТаблицаПланОтгрузокПоставок.ЗаполнитьЗначения(ГлобальныеПеременные.АналитикаУчетаПоПартнерам, "АналитикаУчетаПоПартнерам");
			ТаблицаПланОтгрузокПоставок.ЗаполнитьЗначения(ГлобальныеПеременные.ОбъектРасчетов,            "ОбъектРасчетов");
			ТаблицаПланОтгрузокПоставок.ЗаполнитьЗначения(ГлобальныеПеременные.ВалютаРасчетов,            "Валюта");
			ТаблицаПланОтгрузокПоставок.Индексы.Добавить("Регистратор");
		
			ПодготовитьДанныеДляЗаписи(ГлобальныеПеременные, ТаблицаПланОтгрузокПоставок, НаборЗаписейПланОтгрузокПоставок, ТаблицаРегистраторов);
			ЗаписатьПорционно(ГлобальныеПеременные, ТаблицаПланОтгрузокПоставок, НаборЗаписейПланОтгрузокПоставок);
			
		КонецЕсли;
		
		Если ПланыОбмена.ГлавныйУзел() = Неопределено И НЕ СтрокаОсновныхПараметровРасчета.НачальноеЗаполнение И СтрокаОсновныхПараметровРасчета.ЗаписыватьИзменения Тогда
			УдалитьНеиспользуемыеРегистраторыРасчетов(Запрос, ИмяРегистраРасчетов, ИмяРегистраПланаОплат, ИмяРегистраПланаОтгрузкиПоставки);
		КонецЕсли;
		
		Если КоличествоСтрокКОбработке = 1 И Не СтрокаОсновныхПараметровРасчета.НачальноеЗаполнение
			И ДополнительныеСвойстваПроведения <> Неопределено И ГлобальныеПеременные.РассчитыватьФакт Тогда
			
			Если ГлобальныеПеременные.ЭтоРасчетыСКлиентами Тогда
				ИмяРегистра = "РасчетыСКлиентамиПоСрокам";
			Иначе 
				ИмяРегистра = "РасчетыСПоставщикамиПоСрокам";
			КонецЕсли;
			ДополнительныеСвойстваПроведения.Вставить(
				ИмяРегистра,
				ТаблицаРасчетовПоСрокам);
			
		КонецЕсли;
		
		#КонецОбласти
		
	КонецЦикла;
	
КонецПроцедуры

//Вызывает пересчет измененных и связанных расчетов по таблице заданий.
//
// Параметры:
//	Параметры - см. ПараметрыРаспределенияРасчетов
//	ДополнительныеСвойства - Структура - Дополнительные свойства проведения.
//
Процедура ЗаполнитьОперативныеВзаиморасчетыПоТаблице(Параметры, ДополнительныеСвойства = Неопределено) Экспорт
	
	Регистратор             = Параметры.Регистратор;
	ТаблицаКРаспределению   = Параметры.ТаблицаИзменений;
	
	Если ДополнительныеСвойства <> Неопределено
		И (ТипЗнч(Регистратор) = Тип("ДокументСсылка.ЗаказКлиента")
			Или ТипЗнч(Регистратор) = Тип("ДокументСсылка.ЗаказПоставщику")
			
			Или ТипЗнч(Регистратор) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента")
			Или ТипЗнч(Регистратор) = Тип("ДокументСсылка.ГрафикИсполненияДоговора")) Тогда
		// Для заказов не контролируется изменение распределения фактических авансов по датам планового погашения
		ДополнительныеСвойства.Вставить("ПропуститьПроверкуИзменений", Истина);
	КонецЕсли;
	
	// Ищем все зависимые объекты расчетов, затрагиваемые перераспределением текущих и добавляем в общую таблицу
	Если Параметры.РаспределениеСУчетомПриемников Тогда
		ДополнитьТаблицуИзмененийПриемниками(ТаблицаКРаспределению, Параметры);
	КонецЕсли;
	Для Каждого СтрокаКРаспределению Из ТаблицаКРаспределению Цикл
		СтрокаКРаспределению.ПорядокОперации = Лев(СтрокаКРаспределению.ПорядокОперации, 8);
	КонецЦикла;
	ТаблицаКРаспределению.Сортировать("ПорядокОперации, Документ, ПоДаннымОбъектаРасчетовИсточника");
	
	// Разделим все строки на порции: распределение каждой следующей порции зависит от распределения предыдущей
	ТаблицаКРаспределению.Колонки.Добавить("НомерПорции", Новый ОписаниеТипов("Число"));
	ТаблицаКРаспределению.Индексы.Добавить("АналитикаУчетаПоПартнерамПриемник, ОбъектРасчетовПриемник, ВалютаПриемник");
	Отбор = Новый Структура("АналитикаУчетаПоПартнерамПриемник, ОбъектРасчетовПриемник, ВалютаПриемник");
	
	МаксимальныйНомерПорции = 0;
	Если Параметры.РаспределениеСУчетомПриемников Тогда
		Для Каждого СтрокаКРаспределению Из ТаблицаКРаспределению Цикл
			
			Отбор.АналитикаУчетаПоПартнерамПриемник = СтрокаКРаспределению.АналитикаУчетаПоПартнерам;
			Отбор.ОбъектРасчетовПриемник = СтрокаКРаспределению.ОбъектРасчетов;
			Отбор.ВалютаПриемник = СтрокаКРаспределению.ВалютаРасчетов;
			
			СтрокиИсточники = ТаблицаКРаспределению.НайтиСтроки(Отбор);
			
			Для Каждого СтрокаИсточник Из СтрокиИсточники Цикл
				// СтрокаКРаспределению - это приемник найденной строки и должен распределиться в следующей проции если имеет тот же или поздний день
				Если СтрокаИсточник.ПорядокОперации <= СтрокаКРаспределению.ПорядокОперации 
					И СтрокаКРаспределению.НомерПорции <= СтрокаИсточник.НомерПорции Тогда
					СтрокаКРаспределению.НомерПорции = СтрокаИсточник.НомерПорции + 1;
					МаксимальныйНомерПорции = Макс(МаксимальныйНомерПорции, СтрокаКРаспределению.НомерПорции);
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаКРаспределению.Индексы.Добавить("НомерПорции,ТипРасчетов,АналитикаУчетаПоПартнерам,ОбъектРасчетов,ВалютаРасчетов");
	Отбор = Новый Структура("НомерПорции,ТипРасчетов,АналитикаУчетаПоПартнерам,ОбъектРасчетов,ВалютаРасчетов");
	
	ОсновныеПараметры = СтруктураПараметровЗаполненияВзаиморасчетов();
	
	КортежиТаблицыИзменений = ТаблицаКРаспределению.Скопировать(, "НомерПорции,ТипРасчетов,АналитикаУчетаПоПартнерам,ОбъектРасчетов,ВалютаРасчетов");
	КортежиТаблицыИзменений.Свернуть("НомерПорции,ТипРасчетов,АналитикаУчетаПоПартнерам,ОбъектРасчетов,ВалютаРасчетов");
	КортежиТаблицыИзменений.Индексы.Добавить("НомерПорции");
	
	// Выполним по порядку распределение каждой порции
	Для НомерПорции = 0 По МаксимальныйНомерПорции Цикл
		
		СтрокиКортежей = КортежиТаблицыИзменений.НайтиСтроки(Новый Структура("НомерПорции", НомерПорции));
		ТаблицаРасчета = ТаблицаОсновныхПараметровРасчета();
		
		Для Каждого СтрокаКортежа Из СтрокиКортежей Цикл
			
			ЗаполнитьЗначенияСвойств(Отбор, СтрокаКортежа);
			
			СтрокиИзменений = ТаблицаКРаспределению.НайтиСтроки(Отбор);
			
			СтрокаОсновныхПараметровРасчета = ТаблицаРасчета.Добавить();
			
			// Заполняем основные параметры по умолчанию
			ЗаполнитьЗначенияСвойств(СтрокаОсновныхПараметровРасчета, ОсновныеПараметры);
			// Заполняем ключевые поля - аналитика учета по партнерам, объект расчетов, валюта и тип расчетов
			ЗаполнитьЗначенияСвойств(СтрокаОсновныхПараметровРасчета, СтрокаКортежа);
			// Заполняем порядок факт и порядок план (минимум из изменяемых строк)
			Для Каждого СтрокаКРаспределению Из СтрокиИзменений Цикл
				
				СтрокаОсновныхПараметровРасчета.НачальноеЗаполнение = Не ЗначениеЗаполнено(СтрокаКРаспределению.ПорядокФакт);
				
				Если СтрокаКРаспределению.ПорядокФакт <> "" Тогда
					Если ЗначениеЗаполнено(СтрокаОсновныхПараметровРасчета.ПорядокФакт) Тогда
						СтрокаОсновныхПараметровРасчета.ПорядокФакт = Мин(Лев(СтрокаКРаспределению.ПорядокФакт, 8) + "000000000", СтрокаОсновныхПараметровРасчета.ПорядокФакт);
					Иначе
						СтрокаОсновныхПараметровРасчета.ПорядокФакт = Лев(СтрокаКРаспределению.ПорядокФакт, 8) + "000000000";
					КонецЕсли;
				КонецЕсли;
				
				Если Параметры.РасчетПлановФоновымЗаданием Тогда
					СтрокаОсновныхПараметровРасчета.ПорядокПлан = "30000101";
				ИначеЕсли СтрокаКРаспределению.ПорядокПлан <> "" Тогда
					Если ЗначениеЗаполнено(СтрокаОсновныхПараметровРасчета.ПорядокПлан) Тогда
						СтрокаОсновныхПараметровРасчета.ПорядокПлан = Мин(Лев(СтрокаКРаспределению.ПорядокПлан, 8) + "000000000", СтрокаОсновныхПараметровРасчета.ПорядокПлан);
					Иначе
						СтрокаОсновныхПараметровРасчета.ПорядокПлан = Лев(СтрокаКРаспределению.ПорядокПлан, 8) + "000000000";
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			СтрокаОсновныхПараметровРасчета.ЭтоРасчетыСКлиентами = СтрокаКортежа.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом;
			СтрокаОсновныхПараметровРасчета.Регистратор = Регистратор;
			
		КонецЦикла;
		
		ЗаполнитьОперативныеВзаиморасчеты(ТаблицаРасчета, ДополнительныеСвойства);
		
	КонецЦикла;
	
КонецПроцедуры

//Пересчитывает все курсовые разницы за указанный период.
//
// Параметры:
//	МассивОрганизаций - Массив из СправочникСсылка.Организации- Перечень организаций по которым необходимо выполнить переоценку.
//	НачалоПериода - Дата - Начало периода пересчета курсовых разниц.
//	КонецПериода - Дата - Конец периода пересчета курсовых разниц.
//  Параметры - см. ПараметрыПереоценки
//
Процедура ВыполнитьПереоценкуЗаПериод(МассивОрганизаций, Знач НачалоПериода, Знач КонецПериода, Параметры) Экспорт
	
	ИмяЗамера = "Взаиморасчеты.РасчетКурсовыхРазницПоСрокам" + ?(Параметры.ЭтоРасчетыСКлиентами,".Клиенты",".Поставщики");
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(ИмяЗамера);
	Параметры.Вставить("ВсегоОбработано", 0);
	ДокументыПереоценки = Документы.РасчетКурсовыхРазниц.ДокументыПереоценкиПоОрганизациям(
		МассивОрганизаций, НачалоПериода, КонецПериода, Параметры.ЭтоРасчетыСКлиентами);	
	Параметры.Вставить("ДокументыПереоценки", ДокументыПереоценки);	
	ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПереоценкаРасчетовСПоставщиками;
	Если Параметры.ЭтоРасчетыСКлиентами Тогда
		ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПереоценкаРасчетовСКлиентами;
	КонецЕсли;
	Параметры.Вставить("ХозяйственнаяОперация", ХозяйственнаяОперация);
	Параметры.Вставить("ВалютаУправленческогоУчета", Константы.ВалютаУправленческогоУчета.Получить());
	
	НачалоПериода = НачалоМесяца(НачалоПериода);
	КонецПериода = КонецМесяца(НачалоПериода);
	
	ДниПереоценки = ДниПереоценки(МассивОрганизаций, НачалоПериода, КонецПериода, Параметры);
	Для Каждого День Из ДниПереоценки Цикл
		Дата = День.Дата;
		Если КонецДня(День.Дата) = КонецМесяца(День.Дата) Тогда
			Дата = КонецДня(День.Дата);
		КонецЕсли;
		ВыполнитьПереоценкуНаДату(МассивОрганизаций, Дата, Параметры);
	КонецЦикла;
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, Параметры.ВсегоОбработано);
	
КонецПроцедуры

//Добавляет записи переоценки на одну дату.
//
// Параметры:
//	МассивОрганизаций - Массив из СправочникСсылка.Организации - Перечень организаций по которым необходимо выполнить переоценку.
//	Период - Дата - Дата, на конец которой необходимо выполнить переоценку.
//  Параметры - см. ПараметрыПереоценки 
//
Процедура ВыполнитьПереоценкуНаДату(МассивОрганизаций, Период, Параметры) Экспорт

	ЭтоРасчетыСКлиентами = Параметры.ЭтоРасчетыСКлиентами;
	ПереоценкаПоДням = Параметры.ПереоценкаПоДням;
	
	Запрос = Новый Запрос;
	#Область ТекстЗапроса
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	АналитикиУчетаПоПартнерам.КлючАналитики                              КАК АналитикаУчетаПоПартнерам,
	|	АналитикиУчетаПоПартнерам.Организация                                КАК Организация,
	|	АналитикиУчетаПоПартнерам.Организация.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	&ВалютаУправленческогоУчета                                          КАК ВалютаУправленческогоУчета,
	|	АналитикиУчетаПоПартнерам.Договор                                    КАК Договор,
	|	ЕСТЬNULL(ДоговорыКонтрагентов.ПереоцениватьТоварыУслугиКОтчетуКомитенту, ЛОЖЬ) КАК ПереоцениватьТоварыУслугиКОтчетуКомитенту,
	|	ЕСТЬNULL(
	|		ЕСТЬNULL(
	|			ДоговорыКонтрагентов.ВариантКурсаДоговора, 
	|			ДоговорыМеждуОрганизациями.ВариантКурсаДоговора), 
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыКурсаДоговора.Переменный))         КАК ВариантКурсаДоговора
	|ПОМЕСТИТЬ ВтАналитикиУчетаПоПартнерам
	|ИЗ
	|	РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикиУчетаПоПартнерам 
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО АналитикиУчетаПоПартнерам.Договор = ДоговорыКонтрагентов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыМеждуОрганизациями КАК ДоговорыМеждуОрганизациями
	|		ПО АналитикиУчетаПоПартнерам.Договор = ДоговорыМеждуОрганизациями.Ссылка
	|ГДЕ
	|	АналитикиУчетаПоПартнерам.Организация В (&МассивОрганизаций)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаПоПартнерам,
	|	ВалютаРегламентированногоУчета,
	|	ВалютаУправленческогоУчета,
	|	Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Обороты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Обороты.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Обороты.Валюта КАК Валюта,
	|	Обороты.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	Обороты.РасчетныйДокумент КАК РасчетныйДокумент,
	|	Обороты.ДатаПлановогоПогашения КАК ДатаПлановогоПогашения,
	|	Обороты.ДатаВозникновения КАК ДатаВозникновения,
	|	Обороты.ДокументОплаты КАК ДокументОплаты,
	|	СУММА(Обороты.ДолгРасход) КАК ДолгРасход,
	|	СУММА(Обороты.ДолгРеглРасход) КАК ДолгРеглРасход,
	|	Обороты.ЭтоРасчетыСКлиентами КАК ЭтоРасчетыСКлиентами
	|
	|ПОМЕСТИТЬ втОборотыПоДокументамОплаты
	|ИЗ
	|	(ВЫБРАТЬ
	|		Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		Расчеты.ОбъектРасчетов КАК ОбъектРасчетов,
	|		Расчеты.Валюта КАК Валюта,
	|		Расчеты.АналитикаУчетаПоПартнерам.Организация.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|		Расчеты.РасчетныйДокумент КАК РасчетныйДокумент,
	|		Расчеты.ДатаПлановогоПогашения КАК ДатаПлановогоПогашения,
	|		Расчеты.ДатаВозникновения КАК ДатаВозникновения,
	|		ВЫБОР КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА Расчеты.Долг
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ДолгРасход,
	|		ВЫБОР КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА Расчеты.ДолгРегл
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ДолгРеглРасход,
	|		Расчеты.ДокументРегистратор КАК ДокументОплаты,
	|		&ЭтоРасчетыСКлиентами КАК ЭтоРасчетыСКлиентами
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК Расчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтАналитикиУчетаПоПартнерам КАК Аналитика
	|			ПО Расчеты.АналитикаУчетаПоПартнерам = Аналитика.АналитикаУчетаПоПартнерам
	|				И (Расчеты.Валюта <> Аналитика.ВалютаРегламентированногоУчета
	|					ИЛИ Расчеты.Валюта <> &ВалютаУправленческогоУчета)
	|		ГДЕ
	|			Расчеты.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|			И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			И ТИПЗНАЧЕНИЯ(Расчеты.ДокументРегистратор) <> ТИП(Документ.РасчетКурсовыхРазниц)
	|			И Расчеты.Долг <> 0
	|			И Расчеты.ХозяйственнаяОперация <> &ЗачетАванса
	|	) КАК Обороты
	|
	|СГРУППИРОВАТЬ ПО
	|	Обороты.АналитикаУчетаПоПартнерам,
	|	Обороты.ОбъектРасчетов,
	|	Обороты.Валюта,
	|	Обороты.ВалютаРегламентированногоУчета,
	|	Обороты.РасчетныйДокумент,
	|	Обороты.ДатаПлановогоПогашения,
	|	Обороты.ДатаВозникновения,
	|	Обороты.ДокументОплаты,
	|	Обороты.ЭтоРасчетыСКлиентами
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаПоПартнерам,
	|	ОбъектРасчетов,
	|	Валюта,
	|	РасчетныйДокумент,
	|	ДатаПлановогоПогашения,
	|	ДатаВозникновения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Обороты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Обороты.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Обороты.Валюта КАК Валюта,
	|	Обороты.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	Обороты.РасчетныйДокумент КАК РасчетныйДокумент,
	|	Обороты.ДатаПлановогоПогашения КАК ДатаПлановогоПогашения,
	|	Обороты.ДатаВозникновения КАК ДатаВозникновения,
	|	СУММА(Обороты.ДолгРасход) КАК ДолгРасход,
	|	СУММА(Обороты.ДолгРеглРасход) КАК ДолгРеглРасход,
	|	Обороты.ЭтоРасчетыСКлиентами КАК ЭтоРасчетыСКлиентами
	|
	|ПОМЕСТИТЬ втОборотыЗаДень
	|ИЗ
	|	втОборотыПоДокументамОплаты КАК Обороты
	|
	|СГРУППИРОВАТЬ ПО
	|	Обороты.АналитикаУчетаПоПартнерам,
	|	Обороты.ОбъектРасчетов,
	|	Обороты.Валюта,
	|	Обороты.ВалютаРегламентированногоУчета,
	|	Обороты.РасчетныйДокумент,
	|	Обороты.ДатаПлановогоПогашения,
	|	Обороты.ДатаВозникновения,
	|	Обороты.ЭтоРасчетыСКлиентами
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаПоПартнерам,
	|	ОбъектРасчетов,
	|	Валюта,
	|	РасчетныйДокумент,
	|	ДатаПлановогоПогашения,
	|	ДатаВозникновения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Обороты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Обороты.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Обороты.Валюта КАК Валюта,
	|	Обороты.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	Обороты.РасчетныйДокумент КАК РасчетныйДокумент,
	|	СУММА(Обороты.ДолгРасход) КАК ДолгРасход,
	|	СУММА(Обороты.ДолгРеглРасход) КАК ДолгРеглРасход,
	|	Обороты.ЭтоРасчетыСКлиентами КАК ЭтоРасчетыСКлиентами
	|
	|ПОМЕСТИТЬ втОборотыЗаДеньБезДат
	|ИЗ
	|	втОборотыПоДокументамОплаты КАК Обороты
	|
	|СГРУППИРОВАТЬ ПО
	|	Обороты.АналитикаУчетаПоПартнерам,
	|	Обороты.ОбъектРасчетов,
	|	Обороты.Валюта,
	|	Обороты.ВалютаРегламентированногоУчета,
	|	Обороты.РасчетныйДокумент,
	|	Обороты.ЭтоРасчетыСКлиентами
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаПоПартнерам,
	|	ОбъектРасчетов,
	|	Валюта,
	|	РасчетныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиИОбороты.АналитикаУчетаПоПартнерам    КАК АналитикаУчетаПоПартнерам,
	|	ОстаткиИОбороты.ОбъектРасчетов               КАК ОбъектРасчетов,
	|	ОстаткиИОбороты.Валюта                       КАК Валюта,
	|	ОстаткиИОбороты.ВалютаРегл                   КАК ВалютаРегл,
	|	ОстаткиИОбороты.РасчетныйДокумент            КАК РасчетныйДокумент,
	|	ОстаткиИОбороты.ДатаПлановогоПогашения       КАК ДатаПлановогоПогашения,
	|	ОстаткиИОбороты.ДатаВозникновения            КАК ДатаВозникновения,
	|	ОстаткиИОбороты.ВариантКурсаДоговора         КАК ВариантКурсаДоговора,
	|	СУММА(ОстаткиИОбороты.ПредоплатаОстаток)     КАК ПредоплатаОстаток,
	|	СУММА(ОстаткиИОбороты.ПредоплатаРеглОстаток) КАК ПредоплатаРеглОстаток,
	|	СУММА(ОстаткиИОбороты.ПредоплатаУпрОстаток)  КАК ПредоплатаУпрОстаток,
	|	СУММА(ОстаткиИОбороты.ДолгОстаток)           КАК ДолгОстаток,
	|	СУММА(ОстаткиИОбороты.ДолгРеглОстаток)       КАК ДолгРеглОстаток,
	|	СУММА(ОстаткиИОбороты.ДолгУпрОстаток)        КАК ДолгУпрОстаток,
	|	ОстаткиИОбороты.ЭтоРасчетыСКлиентами         КАК ЭтоРасчетыСКлиентами
	|ПОМЕСТИТЬ втОстаткиНаКонецДня
	|ИЗ 
	|	(ВЫБРАТЬ
	|		РасчетыПоСрокамОстатки.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		РасчетыПоСрокамОстатки.ОбъектРасчетов            КАК ОбъектРасчетов,
	|		РасчетыПоСрокамОстатки.Валюта                    КАК Валюта,
	|		АналитикиУчетаПоПартнерам.ВалютаРегламентированногоУчета   КАК ВалютаРегл,
	|		РасчетыПоСрокамОстатки.РасчетныйДокумент         КАК РасчетныйДокумент,
	|		РасчетыПоСрокамОстатки.ДатаПлановогоПогашения    КАК ДатаПлановогоПогашения,
	|		РасчетыПоСрокамОстатки.ДатаВозникновения         КАК ДатаВозникновения,
	|		АналитикиУчетаПоПартнерам.ВариантКурсаДоговора             КАК ВариантКурсаДоговора,
	|		РасчетыПоСрокамОстатки.ПредоплатаОстаток         КАК ПредоплатаОстаток,
	|		РасчетыПоСрокамОстатки.ПредоплатаРеглОстаток     КАК ПредоплатаРеглОстаток,
	|		РасчетыПоСрокамОстатки.ПредоплатаУпрОстаток      КАК ПредоплатаУпрОстаток,
	|		РасчетыПоСрокамОстатки.ДолгОстаток               КАК ДолгОстаток,
	|		РасчетыПоСрокамОстатки.ДолгРеглОстаток           КАК ДолгРеглОстаток,
	|		РасчетыПоСрокамОстатки.ДолгУпрОстаток            КАК ДолгУпрОстаток,
	|		&ЭтоРасчетыСКлиентами                            КАК ЭтоРасчетыСКлиентами
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоСрокам.Остатки(
	|				&НачалоПериода,
	|				НЕ (Валюта, Валюта) В (
	|					ВЫБРАТЬ 
	|						АналитикиУчетаПоПартнерам.ВалютаРегламентированногоУчета,
	|						АналитикиУчетаПоПартнерам.ВалютаУправленческогоУчета
	|					ИЗ
	|						ВтАналитикиУчетаПоПартнерам КАК АналитикиУчетаПоПартнерам
	|					)
	|			) КАК РасчетыПоСрокамОстатки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтАналитикиУчетаПоПартнерам КАК АналитикиУчетаПоПартнерам
	|				ПО РасчетыПоСрокамОстатки.АналитикаУчетаПоПартнерам = АналитикиУчетаПоПартнерам.АналитикаУчетаПоПартнерам
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		РасчетыПоСрокамОбороты.АналитикаУчетаПоПартнерам         КАК АналитикаУчетаПоПартнерам,
	|		РасчетыПоСрокамОбороты.ОбъектРасчетов                    КАК ОбъектРасчетов,
	|		РасчетыПоСрокамОбороты.Валюта                            КАК Валюта,
	|		АналитикиУчетаПоПартнерам.ВалютаРегламентированногоУчета   КАК ВалютаРегл,
	|		РасчетыПоСрокамОбороты.РасчетныйДокумент                 КАК РасчетныйДокумент,
	|		РасчетыПоСрокамОбороты.ДатаПлановогоПогашения            КАК ДатаПлановогоПогашения,
	|		РасчетыПоСрокамОбороты.ДатаВозникновения                 КАК ДатаВозникновения,
	|		АналитикиУчетаПоПартнерам.ВариантКурсаДоговора             КАК ВариантКурсаДоговора,
	|		ВЫБОР КОГДА РасчетыПоСрокамОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА РасчетыПоСрокамОбороты.Предоплата
	|			ИНАЧЕ -РасчетыПоСрокамОбороты.Предоплата
	|		КОНЕЦ                                                      КАК ПредоплатаОстаток,
	|		ВЫБОР КОГДА РасчетыПоСрокамОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА РасчетыПоСрокамОбороты.ПредоплатаРегл
	|			ИНАЧЕ -РасчетыПоСрокамОбороты.ПредоплатаРегл
	|		КОНЕЦ                                                      КАК ПредоплатаРеглОстаток,
	|		ВЫБОР КОГДА РасчетыПоСрокамОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА РасчетыПоСрокамОбороты.ПредоплатаУпр
	|			ИНАЧЕ -РасчетыПоСрокамОбороты.ПредоплатаУпр
	|		КОНЕЦ                                                      КАК ПредоплатаУпрОстаток,
	|		ВЫБОР КОГДА РасчетыПоСрокамОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА РасчетыПоСрокамОбороты.Долг
	|			ИНАЧЕ -РасчетыПоСрокамОбороты.Долг
	|		КОНЕЦ                                                      КАК ДолгОстаток,
	|		ВЫБОР КОГДА РасчетыПоСрокамОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА РасчетыПоСрокамОбороты.ДолгРегл
	|			ИНАЧЕ -РасчетыПоСрокамОбороты.ДолгРегл
	|		КОНЕЦ                                                      КАК ДолгРеглОстаток,
	|		ВЫБОР КОГДА РасчетыПоСрокамОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА РасчетыПоСрокамОбороты.ДолгУпр
	|			ИНАЧЕ -РасчетыПоСрокамОбороты.ДолгУпр
	|		КОНЕЦ                                                      КАК ДолгУпрОстаток,
	|		&ЭтоРасчетыСКлиентами                                      КАК ЭтоРасчетыСКлиентами
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыПоСрокамОбороты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтАналитикиУчетаПоПартнерам КАК АналитикиУчетаПоПартнерам
	|				ПО РасчетыПоСрокамОбороты.АналитикаУчетаПоПартнерам = АналитикиУчетаПоПартнерам.АналитикаУчетаПоПартнерам
	|				И (РасчетыПоСрокамОбороты.Валюта <> АналитикиУчетаПоПартнерам.ВалютаРегламентированногоУчета
	|						ИЛИ РасчетыПоСрокамОбороты.Валюта <> АналитикиУчетаПоПартнерам.ВалютаУправленческогоУчета)
	|	ГДЕ
	|		РасчетыПоСрокамОбороты.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И ТИПЗНАЧЕНИЯ(РасчетыПоСрокамОбороты.ДокументРегистратор) <> ТИП(Документ.РасчетКурсовыхРазниц)
	|) КАК ОстаткиИОбороты
	|		
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиИОбороты.АналитикаУчетаПоПартнерам ,
	|	ОстаткиИОбороты.ОбъектРасчетов,
	|	ОстаткиИОбороты.Валюта,
	|	ОстаткиИОбороты.ВалютаРегл,
	|	ОстаткиИОбороты.РасчетныйДокумент,
	|	ОстаткиИОбороты.ДатаПлановогоПогашения,
	|	ОстаткиИОбороты.ДатаВозникновения,
	|	ОстаткиИОбороты.ВариантКурсаДоговора,
	|	ОстаткиИОбороты.ЭтоРасчетыСКлиентами
	|	
	|ИМЕЮЩИЕ
	|	СУММА(ОстаткиИОбороты.ПредоплатаОстаток) <> 0
	|	ИЛИ СУММА(ОстаткиИОбороты.ПредоплатаРеглОстаток) <> 0
	|	ИЛИ СУММА(ОстаткиИОбороты.ПредоплатаУпрОстаток) <> 0
	|	ИЛИ СУММА(ОстаткиИОбороты.ДолгОстаток) <> 0
	|	ИЛИ СУММА(ОстаткиИОбороты.ДолгРеглОстаток) <> 0
	|	ИЛИ СУММА(ОстаткиИОбороты.ДолгУпрОстаток) <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаПоПартнерам,
	|	ОбъектРасчетов,
	|	Валюта,
	|	РасчетныйДокумент,
	|	ДатаПлановогоПогашения,
	|	ДатаВозникновения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсВалюты.Валюта КАК Валюта,
	|	КурсВалюты.БазоваяВалюта КАК БазоваяВалюта,
	|	КурсВалюты.КурсЧислитель КАК КурсЧислитель,
	|	КурсВалюты.КурсЗнаменатель КАК КурсЗнаменатель
	|ПОМЕСТИТЬ втКурсыВалют
	|ИЗ
	|	РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&ГраницаКонецДня) КАК КурсВалюты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалютПоДоговорам.Договор КАК Договор,
	|	КурсыВалютПоДоговорам.КурсЧислитель КАК КурсЧислитель,
	|	КурсыВалютПоДоговорам.КурсЗнаменатель КАК КурсЗнаменатель
	|ПОМЕСТИТЬ втКурсыВалютПоДоговорам
	|ИЗ
	|	РегистрСведений.КурсыВалютРасчетовПоДоговорам.СрезПоследних(&ГраницаКонецДня) КАК КурсыВалютПоДоговорам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиНаКонецДня.АналитикаУчетаПоПартнерам                      КАК АналитикаУчетаПоПартнерам,
	|	ОстаткиНаКонецДня.ОбъектРасчетов                                 КАК ОбъектРасчетов,
	|	ОстаткиНаКонецДня.Валюта                                         КАК Валюта,
	|	ОстаткиНаКонецДня.ВалютаРегл                                     КАК ВалютаРегл,
	|	ОстаткиНаКонецДня.РасчетныйДокумент                              КАК РасчетныйДокумент,
	|	ОстаткиНаКонецДня.ДатаПлановогоПогашения                         КАК ДатаПлановогоПогашения,
	|	ОстаткиНаКонецДня.ДатаВозникновения                              КАК ДатаВозникновения,
	|	АналитикиУчетаПоПартнерам.ВариантКурсаДоговора                   КАК ВариантКурсаДоговора,
	|	АналитикиУчетаПоПартнерам.ПереоцениватьТоварыУслугиКОтчетуКомитенту КАК ПереоцениватьТоварыУслугиКОтчетуКомитенту,
	|	ОстаткиНаКонецДня.ПредоплатаОстаток                              КАК ПредоплатаОстаток,
	|	ОстаткиНаКонецДня.ПредоплатаРеглОстаток                          КАК ПредоплатаРеглОстаток,
	|	ОстаткиНаКонецДня.ПредоплатаУпрОстаток                           КАК ПредоплатаУпрОстаток,
	|	ОстаткиНаКонецДня.ДолгОстаток                                    КАК ДолгОстаток,
	|	ОстаткиНаКонецДня.ДолгРеглОстаток                                КАК ДолгРеглОстаток,
	|	ОстаткиНаКонецДня.ДолгУпрОстаток                                 КАК ДолгУпрОстаток,
	|	ВЫБОР КОГДА АналитикиУчетаПоПартнерам.ВариантКурсаДоговора = ЗНАЧЕНИЕ(Перечисление.ВариантыКурсаДоговора.УстановленныйВДоговоре)
	|			ТОГДА ЕСТЬNULL(КурсыВалютПоДоговорам.КурсЧислитель,1)
	|		КОГДА АналитикиУчетаПоПартнерам.ВариантКурсаДоговора = ЗНАЧЕНИЕ(Перечисление.ВариантыКурсаДоговора.ФиксированныйНаДатуОтгрузки)
	|				И ОстаткиНаКонецДня.ОбъектРасчетов.ТипОбъектаРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовРасчетов.Накладная)
	|			ТОГДА ЕСТЬNULL(КурсыВалютПоДокументам.КурсЧислительВалютыВзаиморасчетов,1)
	|		ИНАЧЕ 
	|			ЕСТЬNULL(КурсыВалют.КурсЧислитель,1)
	|	КОНЕЦ                                                                           КАК КурсЧислительРегл,
	|	ВЫБОР КОГДА АналитикиУчетаПоПартнерам.ВариантКурсаДоговора = ЗНАЧЕНИЕ(Перечисление.ВариантыКурсаДоговора.УстановленныйВДоговоре)
	|			ТОГДА ЕСТЬNULL(КурсыВалютПоДоговорам.КурсЗнаменатель,1)
	|		КОГДА АналитикиУчетаПоПартнерам.ВариантКурсаДоговора = ЗНАЧЕНИЕ(Перечисление.ВариантыКурсаДоговора.ФиксированныйНаДатуОтгрузки)
	|				И ОстаткиНаКонецДня.ОбъектРасчетов.ТипОбъектаРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовРасчетов.Накладная)
	|			ТОГДА ЕСТЬNULL(КурсыВалютПоДокументам.КурсЗнаменательВалютыВзаиморасчетов,1)
	|		ИНАЧЕ
	|			ЕСТЬNULL(КурсыВалют.КурсЗнаменатель,1)
	|	КОНЕЦ                                                                           КАК КурсЗнаменательРегл,
	|	ВЫБОР КОГДА АналитикиУчетаПоПартнерам.ВариантКурсаДоговора = ЗНАЧЕНИЕ(Перечисление.ВариантыКурсаДоговора.УстановленныйВДоговоре)
	|					И ОстаткиНаКонецДня.Валюта = &ВалютаУправленческогоУчета
	|			ТОГДА ЕСТЬNULL(КурсыВалютПоДоговорам.КурсЧислитель,1)
	|		КОГДА АналитикиУчетаПоПартнерам.ВариантКурсаДоговора = ЗНАЧЕНИЕ(Перечисление.ВариантыКурсаДоговора.ФиксированныйНаДатуОтгрузки)
	|				И ОстаткиНаКонецДня.ОбъектРасчетов.ТипОбъектаРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовРасчетов.Накладная)
	|			ТОГДА 
	|				ЕСТЬNULL(КурсыВалютПоДокументам.КурсЧислительВалютыУправленческогоУчета,1)
	|		ИНАЧЕ
	|			ЕСТЬNULL(КурсВалютыУпр.КурсЧислитель,1)
	|	КОНЕЦ                                                                           КАК КурсЧислительУпр,
	|	ВЫБОР КОГДА АналитикиУчетаПоПартнерам.ВариантКурсаДоговора = ЗНАЧЕНИЕ(Перечисление.ВариантыКурсаДоговора.УстановленныйВДоговоре)
	|					И ОстаткиНаКонецДня.Валюта = &ВалютаУправленческогоУчета
	|			ТОГДА ЕСТЬNULL(КурсыВалютПоДоговорам.КурсЗнаменатель,1)
	|		КОГДА АналитикиУчетаПоПартнерам.ВариантКурсаДоговора = ЗНАЧЕНИЕ(Перечисление.ВариантыКурсаДоговора.ФиксированныйНаДатуОтгрузки)
	|				И ОстаткиНаКонецДня.ОбъектРасчетов.ТипОбъектаРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовРасчетов.Накладная)
	|			ТОГДА 
	|				ЕСТЬNULL(КурсыВалютПоДокументам.КурсЗнаменательВалютыУправленческогоУчета,1)
	|		ИНАЧЕ 
	|			ЕСТЬNULL(КурсВалютыУпр.КурсЗнаменатель,1)
	|	КОНЕЦ                                                                           КАК КурсЗнаменательУпр,
	|	ОстаткиНаКонецДня.ЭтоРасчетыСКлиентами                                          КАК ЭтоРасчетыСКлиентами
	|ПОМЕСТИТЬ ВтОстаткиСКурсами
	|ИЗ
	|	втОстаткиНаКонецДня КАК ОстаткиНаКонецДня
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтАналитикиУчетаПоПартнерам КАК АналитикиУчетаПоПартнерам
	|			ПО ОстаткиНаКонецДня.АналитикаУчетаПоПартнерам = АналитикиУчетаПоПартнерам.АналитикаУчетаПоПартнерам
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКурсыВалют КАК КурсВалютыУпр
	|			ПО ОстаткиНаКонецДня.ВалютаРегл = КурсВалютыУпр.БазоваяВалюта
	|			И КурсВалютыУпр.Валюта = &ВалютаУправленческогоУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКурсыВалют КАК КурсыВалют
	|			ПО ОстаткиНаКонецДня.Валюта = КурсыВалют.Валюта
	|			И ОстаткиНаКонецДня.ВалютаРегл = КурсыВалют.БазоваяВалюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКурсыВалютПоДоговорам КАК КурсыВалютПоДоговорам
	|			ПО КурсыВалютПоДоговорам.Договор = АналитикиУчетаПоПартнерам.Договор
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВалютыИКурсыДокументов КАК КурсыВалютПоДокументам
	|			ПО ОстаткиНаКонецДня.ОбъектРасчетов.Объект = КурсыВалютПоДокументам.Документ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаПоПартнерам,
	|	ОбъектРасчетов,
	|	Валюта,
	|	РасчетныйДокумент,
	|	ДатаПлановогоПогашения,
	|	ДатаВозникновения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтОстаткиСКурсами.АналитикаУчетаПоПартнерам                      КАК АналитикаУчетаПоПартнерам,
	|	ВтОстаткиСКурсами.ОбъектРасчетов                                 КАК ОбъектРасчетов,
	|	ВтОстаткиСКурсами.Валюта                                         КАК Валюта,
	|	ВтОстаткиСКурсами.РасчетныйДокумент                              КАК РасчетныйДокумент,
	|	ВтОстаткиСКурсами.ДатаПлановогоПогашения                         КАК ДатаПлановогоПогашения,
	|	ВтОстаткиСКурсами.ДатаВозникновения                              КАК ДатаВозникновения,
	|	ВтОстаткиСКурсами.ВариантКурсаДоговора                           КАК ВариантКурсаДоговора,
	|	ВтОстаткиСКурсами.ПереоцениватьТоварыУслугиКОтчетуКомитенту      КАК ПереоцениватьТоварыУслугиКОтчетуКомитенту,
	|	ВтОстаткиСКурсами.ПредоплатаОстаток                              КАК ПредоплатаОстаток,
	|	ВтОстаткиСКурсами.ПредоплатаРеглОстаток                          КАК ПредоплатаРеглОстаток,
	|	ВтОстаткиСКурсами.ПредоплатаУпрОстаток                           КАК ПредоплатаУпрОстаток,
	|	ЕСТЬNULL(ОборотыЗаДень.ДолгРасход, 0)                            КАК ДолгРасход,
	|	ЕСТЬNULL(ОборотыЗаДень.ДолгРеглРасход, 0)                        КАК ДолгРеглРасход,
	|	ВтОстаткиСКурсами.ДолгОстаток                                    КАК ДолгОстаток,
	|	ВтОстаткиСКурсами.ДолгРеглОстаток                                КАК ДолгРеглОстаток,
	|	ВтОстаткиСКурсами.КурсЧислительРегл 
	|		/ ВтОстаткиСКурсами.КурсЗнаменательРегл                      КАК КурсРегл,
	|	ВЫРАЗИТЬ(ВтОстаткиСКурсами.ДолгОстаток 
	|		* ВтОстаткиСКурсами.КурсЧислительРегл / ВтОстаткиСКурсами.КурсЗнаменательРегл КАК ЧИСЛО(31,2)) КАК ДолгРеглОстатокРасчетный,
	|	ВтОстаткиСКурсами.ДолгУпрОстаток                                 КАК ДолгУпрОстаток,
	|	ВЫРАЗИТЬ(ВтОстаткиСКурсами.ДолгОстаток 
	|		* ВтОстаткиСКурсами.КурсЧислительРегл / ВтОстаткиСКурсами.КурсЗнаменательРегл
	|			/ ВтОстаткиСКурсами.КурсЧислительУпр * ВтОстаткиСКурсами.КурсЗнаменательУпр КАК ЧИСЛО(31,2)) КАК ДолгУпрОстатокРасчетный,
	|	ВтОстаткиСКурсами.ЭтоРасчетыСКлиентами                           КАК ЭтоРасчетыСКлиентами
	|ПОМЕСТИТЬ ВтКРасчету
	|ИЗ
	|	ВтОстаткиСКурсами КАК ВтОстаткиСКурсами
	|	ЛЕВОЕ СОЕДИНЕНИЕ втОборотыЗаДень КАК ОборотыЗаДень
	|		ПО ВтОстаткиСКурсами.АналитикаУчетаПоПартнерам = ОборотыЗаДень.АналитикаУчетаПоПартнерам
	|			И ВтОстаткиСКурсами.ОбъектРасчетов = ОборотыЗаДень.ОбъектРасчетов
	|			И ВтОстаткиСКурсами.Валюта = ОборотыЗаДень.Валюта
	|			И ВтОстаткиСКурсами.РасчетныйДокумент = ОборотыЗаДень.РасчетныйДокумент
	|			И ВтОстаткиСКурсами.ДатаПлановогоПогашения = ОборотыЗаДень.ДатаПлановогоПогашения
	|			И ВтОстаткиСКурсами.ДатаВозникновения = ОборотыЗаДень.ДатаВозникновения
	|ГДЕ
	|	(НЕ ОборотыЗаДень.ОбъектРасчетов ЕСТЬ NULL
	|		ИЛИ &ДатаРасчета = КОНЕЦПЕРИОДА(&ДатаРасчета, МЕСЯЦ)
	|		ИЛИ &ПереоценкаПоДням)
	|	И (ВтОстаткиСКурсами.ДолгРеглОстаток
	|			- ВЫРАЗИТЬ(ВтОстаткиСКурсами.ДолгОстаток 
	|			* ВтОстаткиСКурсами.КурсЧислительРегл / ВтОстаткиСКурсами.КурсЗнаменательРегл КАК ЧИСЛО(31,2)) >= 0.01 
	|		ИЛИ ВтОстаткиСКурсами.ДолгРеглОстаток
	|			- ВЫРАЗИТЬ(ВтОстаткиСКурсами.ДолгОстаток 
	|			* ВтОстаткиСКурсами.КурсЧислительРегл / ВтОстаткиСКурсами.КурсЗнаменательРегл КАК ЧИСЛО(31,2)) <= -0.01 
	|		ИЛИ ВтОстаткиСКурсами.ДолгУпрОстаток
	|			- ВЫРАЗИТЬ(ВтОстаткиСКурсами.ДолгОстаток 
	|			* ВтОстаткиСКурсами.КурсЧислительРегл / ВтОстаткиСКурсами.КурсЗнаменательРегл
	|				/ ВтОстаткиСКурсами.КурсЧислительУпр * ВтОстаткиСКурсами.КурсЗнаменательУпр КАК ЧИСЛО(31,2)) >= 0.01
	|		ИЛИ ВтОстаткиСКурсами.ДолгУпрОстаток
	|			- ВЫРАЗИТЬ(ВтОстаткиСКурсами.ДолгОстаток 
	|			* ВтОстаткиСКурсами.КурсЧислительРегл / ВтОстаткиСКурсами.КурсЗнаменательРегл
	|				/ ВтОстаткиСКурсами.КурсЧислительУпр * ВтОстаткиСКурсами.КурсЗнаменательУпр КАК ЧИСЛО(31,2)) <= -0.01
	|		ИЛИ ВтОстаткиСКурсами.ПредоплатаОстаток = 0
	|			И (ВтОстаткиСКурсами.ПредоплатаРеглОстаток <> 0
	|				ИЛИ ВтОстаткиСКурсами.ПредоплатаУпрОстаток <> 0)
	|		ИЛИ ВтОстаткиСКурсами.ДолгОстаток = 0
	|			И (ВтОстаткиСКурсами.ДолгРеглОстаток <> 0
	|				ИЛИ ВтОстаткиСКурсами.ДолгУпрОстаток <> 0))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаПоПартнерам,
	|	ОбъектРасчетов,
	|	Валюта,
	|	РасчетныйДокумент,
	|	ДатаПлановогоПогашения,
	|	ДатаВозникновения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОстаткиНаКонецДня.ОбъектРасчетов              КАК ОбъектРасчетов,
	|	ОстаткиНаКонецДня.АналитикаУчетаПоПартнерам   КАК АналитикаУчетаПоПартнерам,
	|	ОстаткиНаКонецДня.Валюта                      КАК Валюта,
	|	ОстаткиНаКонецДня.ЭтоРасчетыСКлиентами        КАК ЭтоРасчетыСКлиентами
	|ПОМЕСТИТЬ втАналитикаОстатков
	|ИЗ 
	|	втОстаткиНаКонецДня КАК ОстаткиНаКонецДня
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРасчетов,
	|	АналитикаУчетаПоПартнерам,
	|	Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегистраторРасчетов.Ссылка                      КАК Ссылка,
	|	РегистраторРасчетов.ОбъектРасчетов              КАК ОбъектРасчетов,
	|	РегистраторРасчетов.АналитикаУчетаПоПартнерам   КАК АналитикаУчетаПоПартнерам,
	|	РегистраторРасчетов.Валюта                      КАК ВалютаРасчетов,
	|	АналитикаОстатков.ЭтоРасчетыСКлиентами          КАК ЭтоРасчетыСКлиентами,
	|	КОЛИЧЕСТВО(ЕСТЬNULL(Таблица.НомерСтроки,0))     КАК ВсегоЗаписей
	|ИЗ
	|	Документ.РегистраторРасчетов КАК РегистраторРасчетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втАналитикаОстатков КАК АналитикаОстатков
	|			ПО АналитикаОстатков.ОбъектРасчетов = РегистраторРасчетов.ОбъектРасчетов
	|				И АналитикаОстатков.АналитикаУчетаПоПартнерам = РегистраторРасчетов.АналитикаУчетаПоПартнерам
	|				И АналитикаОстатков.Валюта = РегистраторРасчетов.Валюта
	|				И РегистраторРасчетов.ТипРасчетов = &ТипРасчетов
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ #ИмяТаблицы КАК Таблица
	|			ПО Таблица.Регистратор = РегистраторРасчетов.Ссылка
	|		
	|СГРУППИРОВАТЬ ПО
	|	РегистраторРасчетов.Ссылка,
	|	РегистраторРасчетов.ОбъектРасчетов,
	|	РегистраторРасчетов.АналитикаУчетаПоПартнерам,
	|	РегистраторРасчетов.Валюта,
	|	АналитикаОстатков.ЭтоРасчетыСКлиентами
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ЕСТЬNULL(Таблица.НомерСтроки,0)) < &РазмерПорции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыПоСрокамОбороты.Регистратор                       КАК Регистратор,
	|	&ЭтоРасчетыСКлиентами                                    КАК ЭтоРасчетыСКлиентами
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыПоСрокамОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтАналитикиУчетаПоПартнерам КАК АналитикиУчетаПоПартнерам
	|			ПО РасчетыПоСрокамОбороты.АналитикаУчетаПоПартнерам = АналитикиУчетаПоПартнерам.АналитикаУчетаПоПартнерам
	|ГДЕ
	|	РасчетыПоСрокамОбороты.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ТИПЗНАЧЕНИЯ(РасчетыПоСрокамОбороты.ДокументРегистратор) = ТИП(Документ.РасчетКурсовыхРазниц)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.АналитикаУчетаПоПартнерам                      КАК АналитикаУчетаПоПартнерам,
	|	Т.ОбъектРасчетов                                 КАК ОбъектРасчетов,
	|	Т.ВалютаРасчетов                                 КАК ВалютаРасчетов,
	|	Т.ЭтоРасчетыСКлиентами                           КАК ЭтоРасчетыСКлиентами,
	|	Т.Организация                                    КАК Организация
	|ИЗ (
	|	ВЫБРАТЬ
	|		ВтКРасчету.АналитикаУчетаПоПартнерам         КАК АналитикаУчетаПоПартнерам,
	|		ВтКРасчету.ОбъектРасчетов                    КАК ОбъектРасчетов,
	|		ВтКРасчету.Валюта                            КАК ВалютаРасчетов,
	|		ВтКРасчету.ЭтоРасчетыСКлиентами              КАК ЭтоРасчетыСКлиентами,
	|		Аналитика.Организация                        КАК Организация
	|	ИЗ ВтКРасчету КАК ВтКРасчету
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|			ПО ВтКРасчету.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
	|) КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтКРасчету.ЭтоРасчетыСКлиентами                  КАК ЭтоРасчетыСКлиентами,
	|	ВтКРасчету.АналитикаУчетаПоПартнерам             КАК АналитикаУчетаПоПартнерам,
	|	ВтКРасчету.ОбъектРасчетов                        КАК ОбъектРасчетов,
	|	ВтКРасчету.Валюта                                КАК ВалютаРасчетов,
	|	ВтКРасчету.РасчетныйДокумент                     КАК РасчетныйДокумент,
	|	ВтКРасчету.ДатаПлановогоПогашения                КАК ДатаПлановогоПогашения,
	|	ВтКРасчету.ДатаВозникновения                     КАК ДатаВозникновения,
	|	ВтКРасчету.ВариантКурсаДоговора                  КАК ВариантКурсаДоговора,
	|	ВтКРасчету.ДолгРеглОстаток                       КАК ДолгРеглОстаток,
	|	ВтКРасчету.ДолгРеглОстатокРасчетный              КАК ДолгРеглОстатокРасчетный,
	|	ВтКРасчету.ДолгУпрОстаток                        КАК ДолгУпрОстаток,
	|	ВтКРасчету.ДолгУпрОстатокРасчетный               КАК ДолгУпрОстатокРасчетный,
	|	ВтКРасчету.ПредоплатаОстаток                     КАК ПредоплатаОстаток,
	|	ВтКРасчету.ПредоплатаРеглОстаток                 КАК ПредоплатаРеглОстаток,
	|	ВтКРасчету.ПредоплатаУпрОстаток                  КАК ПредоплатаУпрОстаток,
	|	МАКСИМУМ(ЕСТЬNULL(РасчетыПоСрокам.ПорядокЗачета, """")) КАК ПорядокЗачета,
	|	МАКСИМУМ(ЕСТЬNULL(РасчетыПоСрокам.ВалютаДокумента, """")) КАК ВалютаДокумента
	|ИЗ ВтКРасчету КАК ВтКРасчету
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыПоСрокам
	|		ПО ВтКРасчету.ЭтоРасчетыСКлиентами
	|			И ВтКРасчету.АналитикаУчетаПоПартнерам = РасчетыПоСрокам.АналитикаУчетаПоПартнерам
	|			И ВтКРасчету.ОбъектРасчетов = РасчетыПоСрокам.ОбъектРасчетов
	|			И ВтКРасчету.Валюта = РасчетыПоСрокам.Валюта
	|			И ВтКРасчету.РасчетныйДокумент = РасчетыПоСрокам.РасчетныйДокумент
	|			И ВтКРасчету.ДатаПлановогоПогашения = РасчетыПоСрокам.ДатаПлановогоПогашения
	|			И РасчетыПоСрокам.Активность
	|СГРУППИРОВАТЬ ПО
	|	ВтКРасчету.ЭтоРасчетыСКлиентами,
	|	ВтКРасчету.АналитикаУчетаПоПартнерам,
	|	ВтКРасчету.ОбъектРасчетов,
	|	ВтКРасчету.Валюта,
	|	ВтКРасчету.РасчетныйДокумент,
	|	ВтКРасчету.ДатаПлановогоПогашения,
	|	ВтКРасчету.ДатаВозникновения,
	|	ВтКРасчету.ВариантКурсаДоговора,
	|	ВтКРасчету.ПредоплатаОстаток,
	|	ВтКРасчету.ПредоплатаРеглОстаток,
	|	ВтКРасчету.ПредоплатаУпрОстаток,
	|	ВтКРасчету.ДолгРеглОстаток,
	|	ВтКРасчету.ДолгРеглОстатокРасчетный,
	|	ВтКРасчету.ДолгУпрОстаток,
	|	ВтКРасчету.ДолгУпрОстатокРасчетный";
	#КонецОбласти

	Запрос.УстановитьПараметр("ЭтоРасчетыСКлиентами", ЭтоРасчетыСКлиентами);
	Если ЭтоРасчетыСКлиентами Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяТаблицы", Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоСрокам.ПолноеИмя());
		Запрос.УстановитьПараметр("ЗачетАванса", Перечисления.ХозяйственныеОперации.ЗачетАвансаКлиента);
		Запрос.УстановитьПараметр("ТипРасчетов", Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяТаблицы", Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.ПолноеИмя());
		Запрос.УстановитьПараметр("ЗачетАванса", Перечисления.ХозяйственныеОперации.ЗачетАвансаПоставщику);
		Запрос.УстановитьПараметр("ТипРасчетов", Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
				Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоСрокам.ПолноеИмя(),
				Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.ПолноеИмя());
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);
	Запрос.УстановитьПараметр("ВалютаУправленческогоУчета", Параметры.ВалютаУправленческогоУчета);
	
	ГраницаКонецДня = Новый Граница(КонецДня(Период),ВидГраницы.Включая);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(Период));
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(Период));
	Запрос.УстановитьПараметр("ГраницаКонецДня", ГраницаКонецДня);
	Запрос.УстановитьПараметр("ДатаРасчета", Период);
	Запрос.УстановитьПараметр("РазмерПорции", РазмерПорцииЗаписи());
	Если ПереоценкаПоДням = Неопределено Тогда
		ПереоценкаПоДням = Константы.ПереоцениватьВалютныеСредстваПоДням.Получить();
	КонецЕсли;
	Запрос.УстановитьПараметр("ПереоценкаПоДням", ПереоценкаПоДням);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	ПоследнийИндекс = РезультатыЗапроса.ВГраница();
	ПоляПоиска = "ЭтоРасчетыСКлиентами, АналитикаУчетаПоПартнерам, ОбъектРасчетов, ВалютаРасчетов"; 
	ОбъектыКПереоценке = РезультатыЗапроса[ПоследнийИндекс-1].Выгрузить();
	Параметры.ВсегоОбработано = Параметры.ВсегоОбработано + ОбъектыКПереоценке.Количество();
	ДетальныеЗаписи    = РезультатыЗапроса[ПоследнийИндекс].Выгрузить();
	ДетальныеЗаписи.Индексы.Добавить(ПоляПоиска);
	КурсовыеРазницыКУдалению = РезультатыЗапроса[ПоследнийИндекс-2].Выгрузить();
	РегистраторыРасчетов = РезультатыЗапроса[ПоследнийИндекс-3].Выгрузить();
	РегистраторыРасчетов.Индексы.Добавить(ПоляПоиска);
	СтруктураПоиска = Новый Структура(ПоляПоиска);
	
	Порядок = Порядок(Период,"",Тип("ДокументСсылка.РасчетКурсовыхРазниц"),"9","99");
	РазмерПорцииЗаписи = РазмерПорцииЗаписи();
	
	ТаблицаИзменений = Новый ТаблицаЗначений;
	ТаблицаИзменений.Колонки.Добавить("Регистратор", Документы.ТипВсеСсылки());
	Если ЭтоРасчетыСКлиентами Тогда
		ПереоценкаПоложительная 	= Перечисления.ХозяйственныеОперации.КурсовыеРазницыКлиентыПрибыль;
		ПереоценкаОтрицательная 	= Перечисления.ХозяйственныеОперации.КурсовыеРазницыКлиентыУбыток;
		ПереоценкаПоложительнаяСпр 	= Справочники.НастройкиХозяйственныхОпераций.КурсовыеРазницыКлиентыПрибыль;
		ПереоценкаОтрицательнаяСпр 	= Справочники.НастройкиХозяйственныхОпераций.КурсовыеРазницыКлиентыУбыток;
		НаборЗаписей = РегистрыНакопления.РасчетыСКлиентамиПоСрокам.СоздатьНаборЗаписей();
	Иначе
		ПереоценкаПоложительная 	= Перечисления.ХозяйственныеОперации.КурсовыеРазницыПоставщикиУбыток;
		ПереоценкаОтрицательная 	= Перечисления.ХозяйственныеОперации.КурсовыеРазницыПоставщикиПрибыль;
		ПереоценкаПоложительнаяСпр 	= Справочники.НастройкиХозяйственныхОпераций.КурсовыеРазницыПоставщикиУбыток;
		ПереоценкаОтрицательнаяСпр 	= Справочники.НастройкиХозяйственныхОпераций.КурсовыеРазницыПоставщикиПрибыль;
		НаборЗаписей = РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.СоздатьНаборЗаписей();
	КонецЕсли;
	НаборЗаписей.ДополнительныеСвойства.Вставить("ПроверятьИзмененияРегистра", Истина);
	Для Каждого СтрокаПереоценки Из ОбъектыКПереоценке Цикл
		
		Если Параметры.ДокументыПереоценки.Количество() = 1 Тогда
			ДокументРегистратор = Параметры.ДокументыПереоценки[0].Ссылка; //ДокументСсылка
		Иначе
			СтруктураПоискаДокумента = Новый Структура("Дата, Организация", НачалоМесяца(Период), СтрокаПереоценки.Организация);
			НайденныеДокументы = Параметры.ДокументыПереоценки.НайтиСтроки(СтруктураПоискаДокумента);// Массив из СтрокаТаблицыЗначений
			ДокументРегистратор = НайденныеДокументы[0].Ссылка; //ДокументСсылка
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаПереоценки);
		СтрокиДетальныхЗаписей = ДетальныеЗаписи.НайтиСтроки(СтруктураПоиска);
		
		НовСтр = ТаблицаИзменений.Добавить();
		НовСтр.Регистратор = ДокументРегистратор;
		Если СтрокиДетальныхЗаписей.Количество() > 0 И НЕ Параметры.ПерезаполнениеРегистровНУ Тогда
			ТаблицаСвободныхРегистраторов = РегистраторыКурсовыхРазниц(СтрокаПереоценки, РегистраторыРасчетов, СтрокиДетальныхЗаписей.Количество() * 4);
			счРегистратор = 0;
			счСтрок = 0;
			
			РегистраторРасчетов = ТаблицаСвободныхРегистраторов[счРегистратор].Ссылка;
			НаборЗаписей.Отбор.Регистратор.Установить(РегистраторРасчетов);
			НаборЗаписей.Прочитать();
			УдалитьКурсовыеРазницыЗаДень(Период, НаборЗаписей);
			СтрокаКУдалению = КурсовыеРазницыКУдалению.Найти(РегистраторРасчетов,"Регистратор");
			Если СтрокаКУдалению <> Неопределено Тогда
				КурсовыеРазницыКУдалению.Удалить(СтрокаКУдалению);
			КонецЕсли;
			
			Для Каждого СтрокаДетальныхЗаписей Из СтрокиДетальныхЗаписей Цикл
				
				#Область ПоложительнаяКурсоваяРазница
				Если СтрокаДетальныхЗаписей.ДолгРеглОстаток < СтрокаДетальныхЗаписей.ДолгРеглОстатокРасчетный 
					ИЛИ СтрокаДетальныхЗаписей.ДолгУпрОстаток < СтрокаДетальныхЗаписей.ДолгУпрОстатокРасчетный Тогда
					НовСтр = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтр, СтрокаДетальныхЗаписей);
					
					НовСтр.Регистратор           = ТаблицаСвободныхРегистраторов[счРегистратор].Ссылка;
					НовСтр.ДокументРегистратор   = ДокументРегистратор;
					НовСтр.Период                = КонецДня(Период);
					НовСтр.ПорядокОперации       = Порядок;
					НовСтр.ВидДвижения           = ВидДвиженияНакопления.Приход;
					НовСтр.ХозяйственнаяОперация = ПереоценкаПоложительная;
					НовСтр.Валюта                = СтрокаДетальныхЗаписей.ВалютаРасчетов;
					НовСтр.НастройкаХозяйственнойОперации 	= ПереоценкаПоложительнаяСпр;
					НовСтр.ИдентификаторФинЗаписи			= Строка(Новый УникальныйИдентификатор);

					Если СтрокаДетальныхЗаписей.ДолгРеглОстаток < СтрокаДетальныхЗаписей.ДолгРеглОстатокРасчетный Тогда
						НовСтр.ДолгРегл = СтрокаДетальныхЗаписей.ДолгРеглОстатокРасчетный - СтрокаДетальныхЗаписей.ДолгРеглОстаток;
					КонецЕсли;
					Если СтрокаДетальныхЗаписей.ДолгУпрОстаток < СтрокаДетальныхЗаписей.ДолгУпрОстатокРасчетный Тогда
						НовСтр.ДолгУпр = СтрокаДетальныхЗаписей.ДолгУпрОстатокРасчетный - СтрокаДетальныхЗаписей.ДолгУпрОстаток;
					КонецЕсли;
					
					счСтрок = счСтрок + 1;
					Если счСтрок = РазмерПорцииЗаписи Тогда
						счСтрок = 0;
						счРегистратор = счРегистратор + 1;
						НаборЗаписей.Записать();
						НаборЗаписей.Отбор.Регистратор.Установить(ТаблицаСвободныхРегистраторов[счРегистратор].Ссылка);
						НаборЗаписей.Прочитать();
					КонецЕсли;
					
				КонецЕсли;
				#КонецОбласти
				
				#Область ОтрицательнаяКурсоваяРазница
				Если СтрокаДетальныхЗаписей.ДолгРеглОстаток > СтрокаДетальныхЗаписей.ДолгРеглОстатокРасчетный 
					ИЛИ СтрокаДетальныхЗаписей.ДолгУпрОстаток > СтрокаДетальныхЗаписей.ДолгУпрОстатокРасчетный Тогда
					НовСтр = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтр, СтрокаДетальныхЗаписей);
					
					НовСтр.Регистратор           = ТаблицаСвободныхРегистраторов[счРегистратор].Ссылка;
					НовСтр.ДокументРегистратор   = ДокументРегистратор;
					НовСтр.Период                = КонецДня(Период);
					НовСтр.ПорядокОперации       = Порядок;
					НовСтр.ВидДвижения           = ВидДвиженияНакопления.Расход;
					НовСтр.ХозяйственнаяОперация = ПереоценкаОтрицательная;
					НовСтр.Валюта                = СтрокаДетальныхЗаписей.ВалютаРасчетов;
					НовСтр.НастройкаХозяйственнойОперации 	= ПереоценкаОтрицательнаяСпр;
					НовСтр.ИдентификаторФинЗаписи			= Строка(Новый УникальныйИдентификатор);

					Если СтрокаДетальныхЗаписей.ДолгРеглОстаток > СтрокаДетальныхЗаписей.ДолгРеглОстатокРасчетный Тогда
						НовСтр.ДолгРегл = СтрокаДетальныхЗаписей.ДолгРеглОстаток - СтрокаДетальныхЗаписей.ДолгРеглОстатокРасчетный;
					КонецЕсли;
					Если СтрокаДетальныхЗаписей.ДолгУпрОстаток > СтрокаДетальныхЗаписей.ДолгУпрОстатокРасчетный Тогда
						НовСтр.ДолгУпр = СтрокаДетальныхЗаписей.ДолгУпрОстаток - СтрокаДетальныхЗаписей.ДолгУпрОстатокРасчетный;
					КонецЕсли;
					
					счСтрок = счСтрок + 1;
					Если счСтрок = РазмерПорцииЗаписи Тогда
						счСтрок = 0;
						счРегистратор = счРегистратор + 1;
						НаборЗаписей.Записать();
						НаборЗаписей.Отбор.Регистратор.Установить(ТаблицаСвободныхРегистраторов[счРегистратор].Ссылка);
						НаборЗаписей.Прочитать();
					КонецЕсли;
					
				КонецЕсли;
				#КонецОбласти
				
				#Область КорректировкаПредоплатыВНоль
				Если СтрокаДетальныхЗаписей.ПредоплатаОстаток = 0
					И (СтрокаДетальныхЗаписей.ПредоплатаРеглОстаток > 0
						ИЛИ СтрокаДетальныхЗаписей.ПредоплатаУпрОстаток > 0) Тогда
					
					НовСтр = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтр, СтрокаДетальныхЗаписей);
					
					НовСтр.Регистратор           = ТаблицаСвободныхРегистраторов[счРегистратор].Ссылка;
					НовСтр.ДокументРегистратор   = ДокументРегистратор;
					НовСтр.Период                = КонецДня(Период);
					НовСтр.ПорядокОперации       = Порядок;
					НовСтр.ВидДвижения           = ВидДвиженияНакопления.Расход;
					НовСтр.ХозяйственнаяОперация = ПереоценкаПоложительная;
					НовСтр.Валюта                = СтрокаДетальныхЗаписей.ВалютаРасчетов;
					НовСтр.НастройкаХозяйственнойОперации 	= ПереоценкаПоложительнаяСпр;
					НовСтр.ИдентификаторФинЗаписи			= Строка(Новый УникальныйИдентификатор);

					Если СтрокаДетальныхЗаписей.ПредоплатаРеглОстаток > 0 Тогда
						НовСтр.ПредоплатаРегл = СтрокаДетальныхЗаписей.ПредоплатаРеглОстаток;
					КонецЕсли;
					Если СтрокаДетальныхЗаписей.ПредоплатаУпрОстаток > 0 Тогда
						НовСтр.ПредоплатаУпр = СтрокаДетальныхЗаписей.ПредоплатаУпрОстаток;
					КонецЕсли;
					
					счСтрок = счСтрок + 1;
					Если счСтрок = РазмерПорцииЗаписи Тогда
						счСтрок = 0;
						счРегистратор = счРегистратор + 1;
						НаборЗаписей.Записать();
						НаборЗаписей.Отбор.Регистратор.Установить(ТаблицаСвободныхРегистраторов[счРегистратор].Ссылка);
						НаборЗаписей.Прочитать();
					КонецЕсли;
					
				КонецЕсли;
				
				Если СтрокаДетальныхЗаписей.ПредоплатаОстаток = 0
					И (СтрокаДетальныхЗаписей.ПредоплатаРеглОстаток < 0
						ИЛИ СтрокаДетальныхЗаписей.ПредоплатаУпрОстаток < 0) Тогда
					
					НовСтр = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтр, СтрокаДетальныхЗаписей);
					
					НовСтр.Регистратор           = ТаблицаСвободныхРегистраторов[счРегистратор].Ссылка;
					НовСтр.ДокументРегистратор   = ДокументРегистратор;
					НовСтр.Период                = НачалоДня(Период);
					НовСтр.ПорядокОперации       = Порядок;
					НовСтр.ВидДвижения           = ВидДвиженияНакопления.Приход;
					НовСтр.ХозяйственнаяОперация = ПереоценкаОтрицательная;
					НовСтр.Валюта                = СтрокаДетальныхЗаписей.ВалютаРасчетов;
					НовСтр.НастройкаХозяйственнойОперации 	= ПереоценкаОтрицательнаяСпр;
					НовСтр.ИдентификаторФинЗаписи			= Строка(Новый УникальныйИдентификатор);
					
					Если СтрокаДетальныхЗаписей.ПредоплатаРеглОстаток < 0 Тогда
						НовСтр.ПредоплатаРегл = -СтрокаДетальныхЗаписей.ПредоплатаРеглОстаток;
					КонецЕсли;
					Если СтрокаДетальныхЗаписей.ПредоплатаУпрОстаток < 0 Тогда
						НовСтр.ПредоплатаУпр = -СтрокаДетальныхЗаписей.ПредоплатаУпрОстаток;
					КонецЕсли;
					
					счСтрок = счСтрок + 1;
					Если счСтрок = РазмерПорцииЗаписи Тогда
						счСтрок = 0;
						счРегистратор = счРегистратор + 1;
						НаборЗаписей.Записать();
						НаборЗаписей.Отбор.Регистратор.Установить(ТаблицаСвободныхРегистраторов[счРегистратор].Ссылка);
						НаборЗаписей.Прочитать();
					КонецЕсли;
					
				КонецЕсли;
				#КонецОбласти
				
			КонецЦикла;
			НаборЗаписей.Записать();
		КонецЕсли;
		
	КонецЦикла; //по объектам переоценки
	
	Для Каждого СтрокаКУдалению Из КурсовыеРазницыКУдалению Цикл
		
		Если СтрокаКУдалению.ЭтоРасчетыСКлиентами Тогда
			НаборЗаписей = РегистрыНакопления.РасчетыСКлиентамиПоСрокам.СоздатьНаборЗаписей();
		Иначе
			НаборЗаписей = РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.СоздатьНаборЗаписей();
		КонецЕсли;
		НаборЗаписей.ДополнительныеСвойства.Вставить("ПроверятьИзмененияРегистра", Истина);
		
		НаборЗаписей.Отбор.Регистратор.Установить(СтрокаКУдалению.Регистратор);
		НаборЗаписей.Прочитать();
		Если УдалитьКурсовыеРазницыЗаДень(Период, НаборЗаписей) Тогда
			НаборЗаписей.Записать(); //удалим старые курсовые разницы
		КонецЕсли;
	КонецЦикла;
	
	ПоляСворачивания = "Регистратор";
	ТаблицаИзменений.Свернуть(ПоляСворачивания);
	
	Если ЭтоРасчетыСКлиентами <> Неопределено Тогда
		Для Каждого Организация Из МассивОрганизаций Цикл
			
			ДокументыРасчетаКурсовыхРазниц = Документы.РасчетКурсовыхРазниц.ДокументыПереоценки(Организация,
				Период, Период,
				ЭтоРасчетыСКлиентами);
			ДокументРегистратор = ДокументыРасчетаКурсовыхРазниц[НачалоМесяца(Период)];
			
			Если ЭтоРасчетыСКлиентами Тогда
				НаборДвиженийПоДокументам = РегистрыНакопления.РасчетыСКлиентамиПоДокументам.СоздатьНаборЗаписей();
			Иначе
				НаборДвиженийПоДокументам = РегистрыНакопления.РасчетыСПоставщикамиПоДокументам.СоздатьНаборЗаписей();
			КонецЕсли;
			
			НаборДвиженийПоДокументам.Отбор.Регистратор.Установить(ДокументРегистратор);
			НаборДвиженийПоДокументам.Прочитать();
			Если НаборДвиженийПоДокументам.Количество() > 0 Тогда
				НаборДвиженийПоДокументам.Очистить();
				НаборДвиженийПоДокументам.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

//Возвращает строковый порядок документа по переданным параметрам.
// 
// Параметры:
// 	Дата - Дата - Дата по которой нужно сделать строковый порядок.
// 	Номер - Строка - Номер документа.
// 	ТипДокумента - Тип - Тип ссылки документа.
// 	Вид - Строка - 1 Заказы, график исполнения договора.
//									2 Накладные;
//									3 Корректировки реализации в минус;
//									4 Оплаты, возвраты.
// 	Тип - Строка,Число - см. НомерТипа.
// Возвращаемое значение:
// 	Строка - Описание
Функция Порядок(Дата, Номер, ТипДокумента, Вид, Тип = Неопределено) Экспорт
	Если НЕ ЗначениеЗаполнено(Дата) Тогда 
		Возврат Неопределено;
	КонецЕсли;
	ДатаСтрокой = Формат(Дата, "ДФ=yyyyMMddHHmmss");
	Если Тип = Неопределено Тогда
		Тип = НомерТипа(ТипДокумента);
	КонецЕсли;
	Возврат Лев(ДатаСтрокой, 8) + Вид + Прав(ДатаСтрокой, 6) + Тип + Номер;
КонецФункции

// Возвращает структуру параметров, необходимых для заполнения регистров взаиморасчетов в новой архитектуре.
// 
// Возвращаемое значение:
//  Структура - Структура параметров заполнения взаиморасчетов:
// * ОбъектРасчетов - СправочникСсылка.ОбъектыРасчетов - объект расчетов, в рамках которого происходит распределение взаиморасчетов.
// * АналитикаУчетаПоПартнерам - СправочникСсылка.КлючиАналитикиУчетаПоПартнерам - аналитика, в рамках которой происходит распределение взаиморасчетов.
// * ВалютаРасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов.
// * ЭтоРасчетыСКлиентами - Булево - Определяет регистры для заполнения - с клиентами или с поставщиками.
// * ПорядокФакт - Строка - Момент времени начиная с которого необходимо выполнить распределение, подробнее в ОперативныеВзаиморасчетыСервер.Порядок().
// * ПорядокПлан - Строка - Момент времени начиная с которого необходимо выполнить распределение, подробнее в ОперативныеВзаиморасчетыСервер.Порядок().
// * НачальноеЗаполнение - Булево - Истина, если это начальное заполнение.
// * Регистратор - ДокументСсылка, Неопределено - Документ регистратор, инициировавший распределение.
// * ДополнительныеСвойстваПроведения - Структура - Структура дополнительных свойств проведения, транслируемая из регистров накопления РасчетыСКлиентами РасчетыСПоставщиками:
// ** МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Дополняется таблицей сформированных движений для дальнейшего использования в регл и упр учете
// * ЗаписыватьИзменения - Булево - Ложь, если требуется получить таблицу сформированных движений без записи документов.
Функция СтруктураПараметровЗаполненияВзаиморасчетов() Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("ОбъектРасчетов", Справочники.ОбъектыРасчетов.ПустаяСсылка());
	Структура.Вставить("АналитикаУчетаПоПартнерам", Справочники.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка());
	Структура.Вставить("ВалютаРасчетов", Справочники.Валюты.ПустаяСсылка());
	Структура.Вставить("ЭтоРасчетыСКлиентами", Истина);
	Структура.Вставить("ПорядокФакт","");
	Структура.Вставить("ПорядокПлан","");
	Структура.Вставить("НачальноеЗаполнение", Ложь);
	Структура.Вставить("Регистратор", Неопределено);
	Структура.Вставить("ДополнительныеСвойстваПроведения", Неопределено);
	Структура.Вставить("ЗаписыватьИзменения", Истина);
	
	Возврат Структура;
	
КонецФункции

//Возвращает таблицу служебных документов РегистраторРасчетов для перезаписи по переданным параметрам.
//
// Параметры:
//	Параметры - Структура - Описание:
//		* ОбъектРасчетов - ОпределяемыйТип.ОбъектРасчетов - Объект расчетов.
//		* АналитикаУчетаПоПартнерам - СправочникСсылка.КлючиАналитикиУчетаПоПартнерам - Аналитика взаиморасчетов.
//		* Валюта - СправочникСсылка.Валюты - Валюта взаиморасчетов.
//		* ЭтоРасчетыСКлиентами - Булево - это расчеты с клиентами, а не с поставщиками.
//		* Организация - Неопределено, СправочникСсылка.Организации - Организация расчета.
//	ИмяТаблицы - Строка - Имя регистра накопления, по которому определятся свободный регистратор или нет.
//	КоличествоЗаписей - Число - Количество записей для последующей записи в регистр.
//	ТаблицаСвободныхРегистраторов - см. ТаблицаСвободныхРегистраторовРасчета.
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица со следующими колонками:
//		* Ссылка - ДокументСсылка.РегистраторРасчетов - найденный служебный документ;
//		* ТребуетсяОчистка - Булево - У данного документа есть движения в переданной таблице.
//
Функция СвободныеРегистраторыРасчетов(Параметры, ИмяТаблицы, КоличествоЗаписей, ТаблицаСвободныхРегистраторов)
	
	Если КоличествоЗаписей = 0 Тогда
		КоличествоРегистраторов = 0;
	Иначе
		КоличествоРегистраторов = Цел(КоличествоЗаписей/РазмерПорцииЗаписи()) + 1;
	КонецЕсли;
	
	ТаблицаДокументов = Новый ТаблицаЗначений();
	ТаблицаДокументов.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.РегистраторРасчетов"));
	ТаблицаДокументов.Колонки.Добавить("ТребуетсяОчистка", Новый ОписаниеТипов("Булево"));
	
	ТипРасчетов = ?(Параметры.ЭтоРасчетыСКлиентами, Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом, Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком);
	
	СвободныеРегистраторы = ТаблицаСвободныхРегистраторов.НайтиСтроки(Новый Структура("ИмяТаблицы", ИмяТаблицы));
	
	Для Каждого СтрокаСвободныеРегистраторы Из СвободныеРегистраторы Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаДокументов.Добавить(), СтрокаСвободныеРегистраторы);
	КонецЦикла;
	
	Пока ТаблицаДокументов.Количество() < КоличествоРегистраторов Цикл
		ДокументОбъект = Документы.РегистраторРасчетов.СоздатьДокумент();
		ДокументОбъект.Валюта = Параметры.ВалютаРасчетов;
		ДокументОбъект.АналитикаУчетаПоПартнерам = Параметры.АналитикаУчетаПоПартнерам;
		ДокументОбъект.Организация = ?(Параметры.Организация = Неопределено,
										ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.АналитикаУчетаПоПартнерам, "Организация"),
										Параметры.Организация);
		ДокументОбъект.ОбъектРасчетов = Параметры.ОбъектРасчетов;
		ДокументОбъект.ТипРасчетов = ТипРасчетов;
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		НовСтр = ТаблицаДокументов.Добавить();
		НовСтр.Ссылка = ДокументОбъект.Ссылка;
		НовСтр.ТребуетсяОчистка = Ложь;
	КонецЦикла;
	
	Возврат ТаблицаДокументов;
	
КонецФункции

// Таблица свободных регистраторов расчета.
// 
// Параметры:
//	Параметры - Структура - Описание:
//		* ОбъектРасчетов - ОпределяемыйТип.ОбъектРасчетов - Объект расчетов.
//		* АналитикаУчетаПоПартнерам - СправочникСсылка.КлючиАналитикиУчетаПоПартнерам - Аналитика взаиморасчетов.
//		* Валюта - СправочникСсылка.Валюты - Валюта взаиморасчетов.
//		* ЭтоРасчетыСКлиентами - Булево - это расчеты с клиентами, а не с поставщиками.
//		* Организация - Неопределено, СправочникСсылка.Организации - Организация расчета.
// 
// Возвращаемое значение:
//	ТаблицаЗначений - таблица со следующими колонками:
//		* ИмяТаблицы - Строка - Имя регистра накопления;
//		* Ссылка - ДокументСсылка.РегистраторРасчетов - найденный служебный документ;
//		* ТребуетсяОчистка - Булево - У данного документа есть движения в переданной таблице.
//
//  
Функция ТаблицаСвободныхРегистраторовРасчета(Параметры)

	Если Параметры.ЭтоРасчетыСКлиентами Тогда
		ТаблицаРасчетыПоСрокам             = "РасчетыСКлиентамиПоСрокам";
		ТаблицаРасчетыПланОплат            = "РасчетыСКлиентамиПланОплат";
		ТаблицаРасчетыПланОтгрузокПоставок = "РасчетыСКлиентамиПланОтгрузок";
	Иначе
		ТаблицаРасчетыПоСрокам             = "РасчетыСПоставщикамиПоСрокам";
		ТаблицаРасчетыПланОплат            = "РасчетыСПоставщикамиПланОплат";
		ТаблицаРасчетыПланОтгрузокПоставок = "РасчетыСПоставщикамиПланПоставок";
	КонецЕсли;
	
	РассчитыватьПлан = Ложь;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Параметры, "РассчитыватьПлан") Тогда
		РассчитыватьПлан = Параметры.РассчитыватьПлан;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Валюта",                    Параметры.ВалютаРасчетов);
	Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам", Параметры.АналитикаУчетаПоПартнерам);
	Запрос.УстановитьПараметр("ОбъектРасчетов",            Параметры.ОбъектРасчетов);
	Запрос.УстановитьПараметр("ТаблицаРасчетыПоСрокам",    ТаблицаРасчетыПоСрокам);
	Запрос.УстановитьПараметр("ТаблицаРасчетыПланОплат",   ТаблицаРасчетыПланОплат);
	Запрос.УстановитьПараметр("ТаблицаРасчетыПланОтгрузокПоставок", ТаблицаРасчетыПланОтгрузокПоставок);
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Параметры,ТаблицаРасчетыПоСрокам + "Регистраторы") Тогда
		СписокПолныхРегистраторовРасчетыПоСрокам = Параметры[ТаблицаРасчетыПоСрокам + "Регистраторы"];
	Иначе
		СписокПолныхРегистраторовРасчетыПоСрокам = Новый Массив;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СписокПолныхРегистраторовРасчетыПоСрокам", СписокПолныхРегистраторовРасчетыПоСрокам);
	
	Если РассчитыватьПлан Тогда
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Параметры, ТаблицаРасчетыПланОплат + "Регистраторы") Тогда
			СписокПолныхРегистраторовРасчетыПланОплат = Параметры[ТаблицаРасчетыПланОплат + "Регистраторы"];
		Иначе
			СписокПолныхРегистраторовРасчетыПланОплат = Новый Массив;
		КонецЕсли;

		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Параметры, ТаблицаРасчетыПланОтгрузокПоставок + "Регистраторы") Тогда
			СписокПолныхРегистраторовРасчетыПланОтгрузокПоставок = Параметры[ТаблицаРасчетыПланОтгрузокПоставок + "Регистраторы"];
		Иначе
			СписокПолныхРегистраторовРасчетыПланОтгрузокПоставок = Новый Массив;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("СписокПолныхРегистраторовРасчетыПланОплат", СписокПолныхРегистраторовРасчетыПланОплат);
		Запрос.УстановитьПараметр("СписокПолныхРегистраторовРасчетыПланОтгрузокПоставок", СписокПолныхРегистраторовРасчетыПланОтгрузокПоставок);
		
	КонецЕсли;
	
	МассивТекстовЗапроса = Новый Массив;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&ТаблицаРасчетыПоСрокам КАК ИмяТаблицы,
	|	КоличествоЗаписейРегистраторовРасчетов.Документ КАК Ссылка,
	|	СУММА(КоличествоЗаписейРегистраторовРасчетов.КоличествоЗаписей) > 0 КАК ТребуетсяОчистка
	|ИЗ
	|	РегистрСведений.КоличествоЗаписейРегистраторовРасчетов КАК КоличествоЗаписейРегистраторовРасчетов
	|ГДЕ
	|	КоличествоЗаписейРегистраторовРасчетов.АналитикаУчетаПоПартнерам = &АналитикаУчетаПоПартнерам
	|	И КоличествоЗаписейРегистраторовРасчетов.ОбъектРасчетов = &ОбъектРасчетов
	|	И КоличествоЗаписейРегистраторовРасчетов.Валюта = &Валюта
	|	И КоличествоЗаписейРегистраторовРасчетов.ИмяТаблицы = &ТаблицаРасчетыПоСрокам
	|	И НЕ КоличествоЗаписейРегистраторовРасчетов.Документ В (&СписокПолныхРегистраторовРасчетыПоСрокам)
	|СГРУППИРОВАТЬ ПО
	|	КоличествоЗаписейРегистраторовРасчетов.Документ";
		
	МассивТекстовЗапроса.Добавить(ТекстЗапроса);
		
	Если РассчитыватьПлан Тогда
			
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	&ТаблицаРасчетыПланОплат КАК ИмяТаблицы,
		|	КоличествоЗаписейРегистраторовРасчетов.Документ КАК Ссылка,
		|	СУММА(КоличествоЗаписейРегистраторовРасчетов.КоличествоЗаписей) > 0 КАК ТребуетсяОчистка
		|ИЗ
		|	РегистрСведений.КоличествоЗаписейРегистраторовРасчетов КАК КоличествоЗаписейРегистраторовРасчетов
		|ГДЕ
		|	КоличествоЗаписейРегистраторовРасчетов.АналитикаУчетаПоПартнерам = &АналитикаУчетаПоПартнерам
		|	И КоличествоЗаписейРегистраторовРасчетов.ОбъектРасчетов = &ОбъектРасчетов
		|	И КоличествоЗаписейРегистраторовРасчетов.Валюта = &Валюта
		|	И КоличествоЗаписейРегистраторовРасчетов.ИмяТаблицы = &ТаблицаРасчетыПланОплат
		|	И НЕ КоличествоЗаписейРегистраторовРасчетов.Документ В (&СписокПолныхРегистраторовРасчетыПланОплат)
		|СГРУППИРОВАТЬ ПО
		|	КоличествоЗаписейРегистраторовРасчетов.Документ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&ТаблицаРасчетыПланОтгрузокПоставок КАК ИмяТаблицы,
		|	КоличествоЗаписейРегистраторовРасчетов.Документ КАК Ссылка,
		|	СУММА(КоличествоЗаписейРегистраторовРасчетов.КоличествоЗаписей) > 0 КАК ТребуетсяОчистка
		|ИЗ
		|	РегистрСведений.КоличествоЗаписейРегистраторовРасчетов КАК КоличествоЗаписейРегистраторовРасчетов
		|ГДЕ
		|	КоличествоЗаписейРегистраторовРасчетов.АналитикаУчетаПоПартнерам = &АналитикаУчетаПоПартнерам
		|	И КоличествоЗаписейРегистраторовРасчетов.ОбъектРасчетов = &ОбъектРасчетов
		|	И КоличествоЗаписейРегистраторовРасчетов.Валюта = &Валюта
		|	И КоличествоЗаписейРегистраторовРасчетов.ИмяТаблицы = &ТаблицаРасчетыПланОтгрузокПоставок
		|	И НЕ КоличествоЗаписейРегистраторовРасчетов.Документ В (&СписокПолныхРегистраторовРасчетыПланОтгрузокПоставок)
		|СГРУППИРОВАТЬ ПО
		|	КоличествоЗаписейРегистраторовРасчетов.Документ";
			
		МассивТекстовЗапроса.Добавить(ТекстЗапроса);
			
	КонецЕсли;
		
	Запрос.Текст = СтрСоединить(МассивТекстовЗапроса, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
		
	ТаблицаДокументов = Запрос.Выполнить().Выгрузить(); // см.СвободныеРегистраторыРасчетов
	ТаблицаДокументов.Индексы.Добавить("ИмяТаблицы");
	
	Возврат ТаблицаДокументов;
	
КонецФункции

//Выполняет первоначальное заполнение регистров новой архитектуры
//
// Параметры:
//	Параметры - Структура - параметры обработчика ожидания
//	УникальныйИдентификатор - УникальныйИдентификатор - идентификатор обработчика ожидания.
//
Процедура ЗаполнитьРегистрыПриВключенииНовойАрхитектуры(Параметры, УникальныйИдентификатор) Экспорт
	
	Если НЕ ОбновлениеИнформационнойБазы.ОтложенноеОбновлениеЗавершено() Тогда
		Текст = НСтр("ru = 'Включение онлайн взаиморасчетов с партнерами возможно только после завершения отложенного обновления.'");
		ВызватьИсключение Текст;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗаданияКРаспределениюРасчетовСКлиентами");
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗаданияКРаспределениюРасчетовСПоставщиками");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		Блокировка.Заблокировать();
		
		РаспределениеВзаиморасчетовВызовСервера.РаспределитьВсеРасчетыСКлиентами(ТекущаяДатаСеанса());
		РаспределениеВзаиморасчетовВызовСервера.РаспределитьВсеРасчетыСПоставщиками(ТекущаяДатаСеанса());
		
		Если НЕ Параметры.Свойство("ПовторныйЗапуск") Тогда
			ЗаполнитьРегистрПереходаНаОнлайн();
		КонецЕсли;
		Константы.НачатПереходНаНовуюАрхитектуруВзаиморасчетов.Установить(Истина);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Текст = НСтр("ru = 'Включение онлайн взаиморасчетов с партнерами. Не удалось заполнить регистр перехода.'",
					ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(Текст,
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	ОписаниеЗамераПерехода = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("Взаиморасчеты.ПереходНаНовуюАрхитектуру.Многопоточный");
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		ОписаниеЗамераПерехода = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("Взаиморасчеты.ПереходНаНовуюАрхитектуру.ФайловаяБаза");
	КонецЕсли;
	Если НЕ Параметры.Свойство("ПовторныйЗапуск") Тогда
		ОчиститьРегистрыВзаиморасчетов();
		ВключитьИтогиРегистровРасчетов();
	КонецЕсли;
	
	//Фаза 1 - основной перенос
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		ВсегоОбработано = ВыполнитьПереносОфлайнВзаиморасчетов();
	Иначе
		ПараметрыМП = ПараметрыМногопоточнойОбработкиРасчетов();
		ПараметрыМП.Процедура.Имя = "ОперативныеВзаиморасчетыСервер.ВыполнитьПереносОфлайнВзаиморасчетов";
		ПараметрыМП.Процедура.ПредставлениеЗадания = НСтр("ru = 'Перенос офлайн взаиморасчетов'");
		ПараметрыМП.Данные.УсловиеЗапроса = "Задания.ДатаПересчета = ДАТАВРЕМЯ(1,1,1)";
		
		ВсегоОбработано = МногопоточнаяОбработкаЗаданийКРаспределениюРасчетов(ПараметрыМП);
	КонецЕсли;
	
	
	//Фаза 2 - перенос хвостов (перепроведенные за время основного переноса)
	НомерПопытки = 0;
	Пока НомерПопытки < 5 Цикл
		Константы.НачатПереходНаНовуюАрхитектуруВзаиморасчетов.Установить(Ложь);
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗаданияКРаспределениюРасчетовСКлиентами");
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗаданияКРаспределениюРасчетовСПоставщиками");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			РаспределениеВзаиморасчетовВызовСервера.РаспределитьВсеРасчетыСКлиентами(ТекущаяДатаСеанса());
			РаспределениеВзаиморасчетовВызовСервера.РаспределитьВсеРасчетыСПоставщиками(ТекущаяДатаСеанса());
			
			Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
				ВсегоОбработано = ВсегоОбработано + ВыполнитьПереносОфлайнВзаиморасчетов();
			Иначе
				ПараметрыМП.Данные.УсловиеЗапроса = "";
				КоличествоЗаписей = МногопоточнаяОбработкаЗаданийКРаспределениюРасчетов(ПараметрыМП);
				
				ВсегоОбработано = ВсегоОбработано + КоличествоЗаписей; 
			КонецЕсли;
			
			// Исправим развернутое сальдо.
			ИсправитьРазвернутоеСальдо(НачалоМесяца(ТекущаяДатаСеанса()));
			
			Константы.НоваяАрхитектураВзаиморасчетов.Установить(Истина);
			ХранилищеОбщихНастроек.Удалить("ПереходНаНовуюАрхитектуруВзаиморасчетов", "ВсегоКПереносу", Неопределено);
			
			ЗафиксироватьТранзакцию();
			
			Прервать;// Выходим из цикла попыток блокировки
			
		Исключение
			ОтменитьТранзакцию();
			
			НомерПопытки = НомерПопытки + 1;
			Текст =  НСтр("ru = 'Попытка'", ОбщегоНазначения.КодОсновногоЯзыка())+ " №" + НомерПопытки + Символы.ПС + Символы.ПС;
			Событие = НСтр("ru = 'Включение онлайн взаиморасчетов с партнерами. Этап 2.'", 
							ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(Событие,
				УровеньЖурналаРегистрации.Ошибка,,, Текст + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			Если НомерПопытки >= 5 Тогда
				ВызватьИсключение НСтр("ru = 'Не удалось завершить переход на онлайн взаиморасчеты. 
				|Ошибки см. в журнале регистрации.'");
			КонецЕсли;
		КонецПопытки;
	КонецЦикла;
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамераПерехода, ВсегоОбработано);
	
КонецПроцедуры

//Очищает новые регистры расчетов в транзакции с блокировкой всех расчетов.
Процедура ОчиститьРегистрыПриВыключенииНовойАрхитектуры(Параметры = Неопределено, УникальныйИдентификатор = Неопределено) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		ВернутьДвиженияПоРасчетамСКлиентами();
		Константы.НоваяАрхитектураВзаиморасчетов.Установить(Ложь);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Выключение онлайн взаиморасчетов с партнерами.'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
		
	ОчиститьРегистрыВзаиморасчетов();
	
	УдалитьСистемныеКорректировкиРегистров(Дата(1,1,1));
		
	ВключитьИтогиРегистровРасчетов();
	
КонецПроцедуры

//Заполнение новых регистров по всем объектам расчетов.
Процедура ЗаполнитьПоВсемРасчетам(НачальноеЗаполнение = Ложь) Экспорт
	
	ОчиститьРегистрыВзаиморасчетов();
	
	ПараметрыРаспределения = ПараметрыРаспределенияРасчетов();
	ПараметрыРаспределения.РаспределениеСУчетомПриемников = Истина;
	ПараметрыРаспределения.ТаблицаИзменений = ПолучитьВсеОбъекты(, Истина);
	
	ЗаполнитьОперативныеВзаиморасчетыПоТаблице(ПараметрыРаспределения);
	
КонецПроцедуры

//Заполнение новых регистров плановых оплат и отгрузок по всем объектам расчетов.
Процедура ЗаполнитьПлановыеРасчеты(ПараметрыВыполнения, АдресХранилища) Экспорт
	
	ТаблицаОбъектов = ПолучитьВсеОбъекты();
	КвалификаторСтроки = Новый КвалификаторыСтроки(40);
	ТаблицаОбъектов.Колонки.Добавить("ПорядокФакт", Новый ОписаниеТипов("Строка", , , , КвалификаторСтроки));
	ТаблицаОбъектов.Колонки.Добавить("ПорядокПлан", Новый ОписаниеТипов("Строка", , , , КвалификаторСтроки));
	ТаблицаОбъектов.ЗаполнитьЗначения("30000101","ПорядокФакт");
	
	ТаблицаОсновныхПараметровРасчета = ТаблицаОсновныхПараметровРасчета();
	
	ПорядокОбработки = СформироватьПорцииОбработкиДанныхРегистровВзаиморасчетов(ТаблицаОбъектов, 1000);
	ОбработатьПорцииДанныхЗаполненияОперативныхВзаиморасчетов(ПорядокОбработки, ТаблицаОбъектов, ТаблицаОсновныхПараметровРасчета, Неопределено);
	
КонецПроцедуры

#Область ИсправлениеОшибок

// Формирует текст запроса для поиска некорректных данных в расчетных регистрах. 
// 
// Параметры:
// 	ИмяВТ - Строка - Имя временной таблицы для помещения результата
// 	БезРучныхКорректировок - Булево - необходимость исключения из результата запроса Аналитик расчетов по партнерам 
// 	                                  и Объектов расчетов, по которым введены ручные корректировки регистров.
// Возвращаемое значение:
// 	Строка - Текст запроса
Функция ТекстЗапросаНекорректныхОстаткиВзаиморасчетовПоСрокам(ИмяВТ = "", БезРучныхКорректировок = Истина) Экспорт
	
	МассивТекстовЗапросов = Новый Массив;
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Ключи.Ссылка      КАК АналитикаУчетаПоПартнерам,
		|	Ключи.Организация КАК Организация
		|ПОМЕСТИТЬ ВтАналитика
		|ИЗ
		|	Справочник.КлючиАналитикиУчетаПоПартнерам КАК Ключи
		|ГДЕ
		|	Ключи.Организация В (&МассивОрганизаций)
		|ИНДЕКСИРОВАТЬ ПО
		|	АналитикаУчетаПоПартнерам";
	МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	МИНИМУМ(ВложенныйЗапрос.Период) КАК Период
		|ПОМЕСТИТЬ ПериодВводаОстатков
		|ИЗ (
		|	ВЫБРАТЬ
		|		Ввод.Дата КАК Период
		|	ИЗ
		|		Документ.ВводОстатковВзаиморасчетов КАК Ввод
		|	ГДЕ
		|		Ввод.Проведен
		|	) КАК ВложенныйЗапрос
		|;
		|
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.ТипРасчетов                           КАК ТипРасчетов,
		|	ВложенныйЗапрос.АналитикаУчетаПоПартнерам             КАК АналитикаУчетаПоПартнерам,
		|	ВложенныйЗапрос.ОбъектРасчетов                        КАК ОбъектРасчетов,
		|	ВложенныйЗапрос.Валюта                                КАК Валюта,
		|	СУММА(ВложенныйЗапрос.Сумма)                          КАК Сумма,
		|	СУММА(ВложенныйЗапрос.СуммаПоСрокам)                  КАК СуммаПоСрокам
		|ПОМЕСТИТЬ ВтОстатки
		|ИЗ (ВЫБРАТЬ
		|		ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом) КАК ТипРасчетов,
		|		РасчетыСКлиентами.АналитикаУчетаПоПартнерам                     КАК АналитикаУчетаПоПартнерам,
		|		РасчетыСКлиентами.ОбъектРасчетов                                КАК ОбъектРасчетов,
		|		РасчетыСКлиентами.Валюта                                        КАК Валюта,
		|		
		|		РасчетыСКлиентами.СуммаОстаток                                  КАК Сумма,
		|		0                                                               КАК СуммаПоСрокам
		|	ИЗ
		|		РегистрНакопления.РасчетыСКлиентами.Остатки(&НачалоМесяца, АналитикаУчетаПоПартнерам В
		|			(ВЫБРАТЬ
		|				ВтАналитика.АналитикаУчетаПоПартнерам
		|			ИЗ
		|				ВтАналитика КАК ВтАналитика)) КАК РасчетыСКлиентами
		|	ГДЕ
		|		РасчетыСКлиентами.СуммаОстаток <> 0
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)                     КАК ТипРасчетов,
		|		РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам                                 КАК АналитикаУчетаПоПартнерам,
		|		РасчетыСКлиентамиПоСрокам.ОбъектРасчетов                                            КАК ОбъектРасчетов,
		|		РасчетыСКлиентамиПоСрокам.Валюта                                                    КАК Валюта,
		|		
		|		0                                                                                   КАК Сумма,
		|		РасчетыСКлиентамиПоСрокам.ДолгОстаток - РасчетыСКлиентамиПоСрокам.ПредоплатаОстаток КАК СуммаПоСрокам
		|	ИЗ
		|		РегистрНакопления.РасчетыСКлиентамиПоСрокам.Остатки(&НачалоМесяца, АналитикаУчетаПоПартнерам В
		|			(ВЫБРАТЬ
		|				ВтАналитика.АналитикаУчетаПоПартнерам
		|			ИЗ
		|				ВтАналитика КАК ВтАналитика)) КАК РасчетыСКлиентамиПоСрокам
		|	ГДЕ
		|		РасчетыСКлиентамиПоСрокам.ДолгОстаток <> 0
		|		ИЛИ РасчетыСКлиентамиПоСрокам.ПредоплатаОстаток <> 0
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком) КАК ТипРасчетов,
		|		РасчетыСПоставщиками.АналитикаУчетаПоПартнерам                     КАК АналитикаУчетаПоПартнерам,
		|		РасчетыСПоставщиками.ОбъектРасчетов                                КАК ОбъектРасчетов,
		|		РасчетыСПоставщиками.Валюта                                        КАК Валюта,
		|		
		|		РасчетыСПоставщиками.СуммаОстаток                                  КАК Сумма,
		|		0                                                                  КАК СуммаПоСрокам
		|	ИЗ
		|		РегистрНакопления.РасчетыСПоставщиками.Остатки(&НачалоМесяца, АналитикаУчетаПоПартнерам В
		|			(ВЫБРАТЬ
		|				ВтАналитика.АналитикаУчетаПоПартнерам
		|			ИЗ
		|				ВтАналитика КАК ВтАналитика)) КАК РасчетыСПоставщиками
		|	ГДЕ
		|		РасчетыСПоставщиками.СуммаОстаток <> 0
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)                        КАК ТипРасчетов,
		|		РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам                                    КАК АналитикаУчетаПоПартнерам,
		|		РасчетыСПоставщикамиПоСрокам.ОбъектРасчетов                                               КАК ОбъектРасчетов,
		|		РасчетыСПоставщикамиПоСрокам.Валюта                                                       КАК Валюта,
		|		
		|		0                                                                                         КАК Сумма,
		|		РасчетыСПоставщикамиПоСрокам.ПредоплатаОстаток - РасчетыСПоставщикамиПоСрокам.ДолгОстаток КАК СуммаПоСрокам
		|	ИЗ
		|		РегистрНакопления.РасчетыСПоставщикамиПоСрокам.Остатки(&НачалоМесяца, АналитикаУчетаПоПартнерам В
		|			(ВЫБРАТЬ
		|				ВтАналитика.АналитикаУчетаПоПартнерам
		|			ИЗ
		|				ВтАналитика КАК ВтАналитика)) КАК РасчетыСПоставщикамиПоСрокам
		|	ГДЕ
		|		РасчетыСПоставщикамиПоСрокам.ДолгОстаток <> 0
		|		ИЛИ РасчетыСПоставщикамиПоСрокам.ПредоплатаОстаток <> 0) КАК ВложенныйЗапрос
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПериодВводаОстатков КАК ПериодВводаОстатков
		|		ПО ИСТИНА
		|ГДЕ
		|	&НачалоМесяца > ЕСТЬNULL(ПериодВводаОстатков.Период, ДАТАВРЕМЯ(1,1,1))
		|СГРУППИРОВАТЬ ПО 
		|	ВложенныйЗапрос.ТипРасчетов,
		|	ВложенныйЗапрос.АналитикаУчетаПоПартнерам,
		|	ВложенныйЗапрос.ОбъектРасчетов,
		|	ВложенныйЗапрос.Валюта
		|ИМЕЮЩИЕ
		|	СУММА(ВложенныйЗапрос.СуммаПоСрокам) <> СУММА(ВложенныйЗапрос.Сумма)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)    КАК ТипРасчетов,
		|	РасчетыПоСрокам.АналитикаУчетаПоПартнерам                          КАК АналитикаУчетаПоПартнерам,
		|	РасчетыПоСрокам.ОбъектРасчетов                                     КАК ОбъектРасчетов,
		|	РасчетыПоСрокам.Валюта                                             КАК Валюта,
		|	ВЫБОР КОГДА НЕ РасчетыПоСрокам.РасчетныйДокумент ЕСТЬ NULL
		|		И НЕ РасчетыПоСрокам.ДатаПлановогоПогашения ЕСТЬ NULL
		|		И НЕ РасчетыПоСрокам.ДатаВозникновения ЕСТЬ NULL
		|		ТОГДА 0
		|		ИНАЧЕ 0 
		|	КОНЕЦ                                                              КАК Сумма,
		|	РасчетыПоСрокам.ДолгОстаток + РасчетыПоСрокам.ПредоплатаОстаток    КАК СуммаПоСрокам
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентамиПоСрокам.Остатки(&НачалоМесяца, АналитикаУчетаПоПартнерам В
		|			(ВЫБРАТЬ
		|				ВтАналитика.АналитикаУчетаПоПартнерам
		|			ИЗ
		|				ВтАналитика КАК ВтАналитика)) КАК РасчетыПоСрокам
		|ГДЕ
		|	РасчетыПоСрокам.ДолгОстаток < 0
		|	ИЛИ РасчетыПоСрокам.ПредоплатаОстаток < 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком) КАК ТипРасчетов,
		|	РасчетыПоСрокам.АналитикаУчетаПоПартнерам                          КАК АналитикаУчетаПоПартнерам,
		|	РасчетыПоСрокам.ОбъектРасчетов                                     КАК ОбъектРасчетов,
		|	РасчетыПоСрокам.Валюта                                             КАК Валюта,
		|	ВЫБОР КОГДА НЕ РасчетыПоСрокам.РасчетныйДокумент ЕСТЬ NULL
		|		И НЕ РасчетыПоСрокам.ДатаПлановогоПогашения ЕСТЬ NULL
		|		И НЕ РасчетыПоСрокам.ДатаВозникновения ЕСТЬ NULL
		|		ТОГДА 0
		|		ИНАЧЕ 0 
		|	КОНЕЦ                                                              КАК Сумма,
		|	РасчетыПоСрокам.ДолгОстаток + РасчетыПоСрокам.ПредоплатаОстаток    КАК СуммаПоСрокам
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам.Остатки(&НачалоМесяца, АналитикаУчетаПоПартнерам В
		|			(ВЫБРАТЬ
		|				ВтАналитика.АналитикаУчетаПоПартнерам
		|			ИЗ
		|				ВтАналитика КАК ВтАналитика)) КАК РасчетыПоСрокам
		|ГДЕ
		|	РасчетыПоСрокам.ДолгОстаток < 0
		|	ИЛИ РасчетыПоСрокам.ПредоплатаОстаток < 0";
	Если Не БезРучныхКорректировок Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НачалоМесяца", "&НачалоПериода");
	КонецЕсли;
	МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = "УНИЧТОЖИТЬ ПериодВводаОстатков";
	МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = ТекстЗапросаВтРучныхКорректировок();
	Если Не БезРучныхКорректировок Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НачалоМесяца", "&НачалоПериода");
	КонецЕсли;
	МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	
	Если БезРучныхКорректировок Тогда
		ТекстЗапроса = "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Аналитика.Организация             КАК Организация,
			|	Остатки.ТипРасчетов               КАК ТипРасчетов,
			|	Остатки.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
			|	Остатки.ОбъектРасчетов            КАК ОбъектРасчетов,
			|	Остатки.Валюта                    КАК ВалютаРасчетов
			|ПОМЕСТИТЬ ИмяВТ
			|ИЗ ВтОстатки КАК Остатки
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтАналитика КАК Аналитика
			|		ПО Аналитика.АналитикаУчетаПоПартнерам = Остатки.АналитикаУчетаПоПартнерам
			|ГДЕ
			|	НЕ (Остатки.АналитикаУчетаПоПартнерам, Остатки.ОбъектРасчетов) В
			|				(ВЫБРАТЬ
			|					ВтРучныеКорректировки.АналитикаУчетаПоПартнерам,
			|					ВтРучныеКорректировки.ОбъектРасчетов
			|				ИЗ
			|					ВтРучныеКорректировки)
			|	И НЕ Остатки.ОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)";
	Иначе
		ТекстЗапроса = "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Аналитика.Организация             КАК Организация,
			|	Остатки.ТипРасчетов               КАК ТипРасчетов,
			|	Остатки.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
			|	Остатки.ОбъектРасчетов            КАК ОбъектРасчетов,
			|	Остатки.Валюта                    КАК ВалютаРасчетов,
			|	ВтРучныеКорректировки.Регистратор КАК РучнаяКорректировка
			|ПОМЕСТИТЬ ИмяВТ
			|ИЗ
			|	ВтОстатки КАК Остатки
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтАналитика КАК Аналитика
			|		ПО (Аналитика.АналитикаУчетаПоПартнерам = Остатки.АналитикаУчетаПоПартнерам)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтРучныеКорректировки КАК ВтРучныеКорректировки
			|		ПО Остатки.АналитикаУчетаПоПартнерам = ВтРучныеКорректировки.АналитикаУчетаПоПартнерам
			|			И Остатки.ОбъектРасчетов = ВтРучныеКорректировки.ОбъектРасчетов
			|ГДЕ
			|	&ПериодВДиапазонеПересчета";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяВТ) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ПОМЕСТИТЬ ИмяВТ","ПОМЕСТИТЬ "+ИмяВТ);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ПОМЕСТИТЬ ИмяВТ","");
	КонецЕсли;
	
	МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = СтрСоединить(МассивТекстовЗапросов, ";");
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Формирует текст запроса для поиска записей с развернутым сальдо в расчетных регистрах. 
// 
// Параметры:
// 	ИмяВТ - Строка - Имя временной таблицы для помещения результата
// 	БезРучныхКорректировок - Булево - необходимость исключения из результата запроса Аналитик расчетов по партнерам 
// Возвращаемое значение:
// 	Строка - Текст запроса
Функция ТекстЗапросаРазвернутоеСальдо(ИмяВт = "", БезРучныхКорректировок = Истина) Экспорт
	
	МассивТекстовЗапросов = Новый Массив;
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Ключи.Ссылка      КАК АналитикаУчетаПоПартнерам,
		|	Ключи.Организация КАК Организация
		|ПОМЕСТИТЬ ВтАналитика
		|ИЗ
		|	Справочник.КлючиАналитикиУчетаПоПартнерам КАК Ключи
		|ГДЕ
		|	Ключи.Организация В (&МассивОрганизаций)
		|ИНДЕКСИРОВАТЬ ПО
		|	АналитикаУчетаПоПартнерам";
	МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом) КАК ТипРасчетов,
		|	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам              КАК АналитикаУчетаПоПартнерам,
		|	РасчетыСКлиентамиОстатки.ОбъектРасчетов                         КАК ОбъектРасчетов,
		|	РасчетыСКлиентамиОстатки.Валюта                                 КАК Валюта,
		|	РасчетыСКлиентамиОстатки.ДолгОстаток                            КАК ДолгОстаток,
		|	РасчетыСКлиентамиОстатки.ПредоплатаОстаток                      КАК ПредоплатаОстаток
		|ПОМЕСТИТЬ ВтСальдо
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентамиПоСрокам.Остатки(&НачалоМесяца, АналитикаУчетаПоПартнерам В
		|			(ВЫБРАТЬ
		|				ВтАналитика.АналитикаУчетаПоПартнерам
		|			ИЗ
		|				ВтАналитика КАК ВтАналитика)) КАК РасчетыСКлиентамиОстатки
		|ГДЕ
		|	РасчетыСКлиентамиОстатки.ДолгОстаток > 0 
		|	И РасчетыСКлиентамиОстатки.ПредоплатаОстаток > 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком) КАК ТипРасчетов,
		|	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам              КАК АналитикаУчетаПоПартнерам,
		|	РасчетыСПоставщикамиОстатки.ОбъектРасчетов                         КАК ОбъектРасчетов,
		|	РасчетыСПоставщикамиОстатки.Валюта                                 КАК Валюта,
		|	РасчетыСПоставщикамиОстатки.ДолгОстаток                            КАК ДолгОстаток,
		|	РасчетыСПоставщикамиОстатки.ПредоплатаОстаток                      КАК ПредоплатаОстаток
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам.Остатки(&НачалоМесяца, АналитикаУчетаПоПартнерам В
		|			(ВЫБРАТЬ
		|				ВтАналитика.АналитикаУчетаПоПартнерам
		|			ИЗ
		|				ВтАналитика КАК ВтАналитика)) КАК РасчетыСПоставщикамиОстатки
		|ГДЕ
		|	РасчетыСПоставщикамиОстатки.ДолгОстаток > 0 
		|	И РасчетыСПоставщикамиОстатки.ПредоплатаОстаток > 0";
	Если Не БезРучныхКорректировок Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НачалоМесяца", "&НачалоПериода");
	КонецЕсли;
	МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = ТекстЗапросаВтРучныхКорректировок();
	Если Не БезРучныхКорректировок Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НачалоМесяца", "&НачалоПериода");
	КонецЕсли;
	МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	
	Если БезРучныхКорректировок Тогда
		ТекстЗапроса = "
			|ВЫБРАТЬ
			|	Аналитика.Организация             КАК Организация,
			|	Сальдо.ТипРасчетов                КАК ТипРасчетов,
			|	Сальдо.АналитикаУчетаПоПартнерам  КАК АналитикаУчетаПоПартнерам,
			|	Сальдо.ОбъектРасчетов             КАК ОбъектРасчетов,
			|	Сальдо.Валюта                     КАК ВалютаРасчетов,
			|	Сальдо.ДолгОстаток                КАК ДолгОстаток,
			|	Сальдо.ПредоплатаОстаток          КАК ПредоплатаОстаток
			|ПОМЕСТИТЬ ИмяВТ
			|ИЗ ВтСальдо КАК Сальдо
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтАналитика КАК Аналитика
			|		ПО Аналитика.АналитикаУчетаПоПартнерам = Сальдо.АналитикаУчетаПоПартнерам
			|ГДЕ
			|	НЕ (Сальдо.АналитикаУчетаПоПартнерам, Сальдо.ОбъектРасчетов) В
			|				(ВЫБРАТЬ
			|					ВтРучныеКорректировки.АналитикаУчетаПоПартнерам,
			|					ВтРучныеКорректировки.ОбъектРасчетов
			|				ИЗ
			|					ВтРучныеКорректировки)
			|	И НЕ Сальдо.ОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)";
	Иначе
		ТекстЗапроса = "
			|ВЫБРАТЬ
			|	Аналитика.Организация             КАК Организация,
			|	Сальдо.ТипРасчетов                КАК ТипРасчетов,
			|	Сальдо.АналитикаУчетаПоПартнерам  КАК АналитикаУчетаПоПартнерам,
			|	Сальдо.ОбъектРасчетов             КАК ОбъектРасчетов,
			|	Сальдо.Валюта                     КАК ВалютаРасчетов,
			|	Сальдо.ДолгОстаток                КАК ДолгОстаток,
			|	Сальдо.ПредоплатаОстаток          КАК ПредоплатаОстаток,
			|	ВтРучныеКорректировки.Регистратор КАК РучнаяКорректировка
			|ПОМЕСТИТЬ ИмяВТ
			|ИЗ
			|	ВтСальдо КАК Сальдо
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтАналитика КАК Аналитика
			|		ПО (Аналитика.АналитикаУчетаПоПартнерам = Сальдо.АналитикаУчетаПоПартнерам)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтРучныеКорректировки КАК ВтРучныеКорректировки
			|		ПО Сальдо.АналитикаУчетаПоПартнерам = ВтРучныеКорректировки.АналитикаУчетаПоПартнерам
			|			И Сальдо.ОбъектРасчетов = ВтРучныеКорректировки.ОбъектРасчетов
			|ГДЕ
			|	&ПериодВДиапазонеПересчета";
	КонецЕсли;
	
	Если ИмяВт <> "" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ПОМЕСТИТЬ ИмяВТ","ПОМЕСТИТЬ "+ИмяВт);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ПОМЕСТИТЬ ИмяВТ","");
	КонецЕсли;
	
	МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = СтрСоединить(МассивТекстовЗапросов, ";");
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Временная таблица для определения наличичия ручных корректировок регистров 
// при проверке развернутого сальдо и некорректных остатков
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ТекстЗапросаВтРучныхКорректировок()
	
	Возврат "
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ВложенныйЗапрос.ОбъектРасчетов КАК ОбъектРасчетов,
	|	МАКСИМУМ(ВложенныйЗапрос.Регистратор) КАК Регистратор
	|ПОМЕСТИТЬ ВтРучныеКорректировки
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		РасчетыСКлиентамиПоСрокам.ОбъектРасчетов            КАК ОбъектРасчетов,
	|		РасчетыСКлиентамиПоСрокам.Регистратор               КАК Регистратор
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыСКлиентамиПоСрокам
	|	ГДЕ
	|		РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам В
	|			(ВЫБРАТЬ
	|				Т.АналитикаУчетаПоПартнерам
	|			ИЗ
	|				ВтАналитика КАК Т)
	|		И РасчетыСКлиентамиПоСрокам.Активность
	|		И РасчетыСКлиентамиПоСрокам.Регистратор ССЫЛКА Документ.КорректировкаРегистров
	|		И ВЫРАЗИТЬ(РасчетыСКлиентамиПоСрокам.Регистратор КАК Документ.КорректировкаРегистров).Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииКорректировкиРегистров.РучнаяКорректировка)
	|		И РасчетыСКлиентамиПоСрокам.Период <= &НачалоМесяца
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам,
	|		РасчетыСПоставщикамиПоСрокам.ОбъектРасчетов,
	|		РасчетыСПоставщикамиПоСрокам.Регистратор
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК РасчетыСПоставщикамиПоСрокам
	|	ГДЕ
	|		РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам В
	|			(ВЫБРАТЬ
	|				Т.АналитикаУчетаПоПартнерам
	|			ИЗ
	|				ВтАналитика КАК Т)
	|		И РасчетыСПоставщикамиПоСрокам.Активность
	|		И РасчетыСПоставщикамиПоСрокам.Регистратор ССЫЛКА Документ.КорректировкаРегистров
	|		И ВЫРАЗИТЬ(РасчетыСПоставщикамиПоСрокам.Регистратор КАК Документ.КорректировкаРегистров).Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииКорректировкиРегистров.РучнаяКорректировка)
	|		И РасчетыСПоставщикамиПоСрокам.Период <= &НачалоМесяца
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РасчетыСКлиентами.АналитикаУчетаПоПартнерам,
	|		РасчетыСКлиентами.ОбъектРасчетов,
	|		РасчетыСКлиентами.Регистратор
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|	ГДЕ
	|		РасчетыСКлиентами.АналитикаУчетаПоПартнерам.Организация В
	|			(ВЫБРАТЬ
	|				Т.АналитикаУчетаПоПартнерам
	|			ИЗ
	|				ВтАналитика КАК Т)
	|		И РасчетыСКлиентами.Активность
	|		И РасчетыСКлиентами.Регистратор ССЫЛКА Документ.КорректировкаРегистров
	|		И ВЫРАЗИТЬ(РасчетыСКлиентами.Регистратор КАК Документ.КорректировкаРегистров).Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииКорректировкиРегистров.РучнаяКорректировка)
	|		И РасчетыСКлиентами.Период <= &НачалоМесяца
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РасчетыСПоставщиками.АналитикаУчетаПоПартнерам,
	|		РасчетыСПоставщиками.ОбъектРасчетов,
	|		РасчетыСПоставщиками.Регистратор
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
	|	ГДЕ
	|		РасчетыСПоставщиками.АналитикаУчетаПоПартнерам.Организация В
	|			(ВЫБРАТЬ
	|				Т.АналитикаУчетаПоПартнерам
	|			ИЗ
	|				ВтАналитика КАК Т)
	|		И РасчетыСПоставщиками.Активность
	|		И РасчетыСПоставщиками.Регистратор ССЫЛКА Документ.КорректировкаРегистров
	|		И ВЫРАЗИТЬ(РасчетыСПоставщиками.Регистратор КАК Документ.КорректировкаРегистров).Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииКорректировкиРегистров.РучнаяКорректировка)
	|		И РасчетыСПоставщиками.Период <= &НачалоМесяца) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.АналитикаУчетаПоПартнерам,
	|	ВложенныйЗапрос.ОбъектРасчетов
	|";
	
КонецФункции

// Исправление остатков по взаиморасчетам
// 
// Параметры:
// 	Период - Дата - Период проверки, на начало месяца периода будут проверены остатки, 
//		если они некорректные, то будет создана корректировка на конец предыдущего месяца.
//		Если на начало периода остатки в порядке, а на начало следующего месяца - нет, то будет запущен частичный пересчет расчетов.
// 	МассивОрганизаций - Массив - Массив организация, по которым требуется исправить остатки взаиморасчетов
Процедура ИсправитьОстаткиВзаиморасчетов(Период, ЗНАЧ МассивОрганизаций = Неопределено) Экспорт
	
	ДатаКорректировки    = НачалоМесяца(Период)-1; //Для корректировки и движений
	ПорядокКорректировки = Формат(ДатаКорректировки,"ДФ=ггггММдд9ЧЧммсс99"); //Для запроса данных остатков.
	ПериодРасчета        = НачалоМесяца(Период); //Для сравнения остатков
	ПорядокРасчета       = Формат(ПериодРасчета, "ДФ=ггггММдд00000000"); //Для запуска пересчета
	
	МассивОрганизаций = ?(МассивОрганизаций = Неопределено,
							Справочники.Организации.ДоступныеОрганизации(),
							МассивОрганизаций);
	
	ТипыРасчетов = Новый Массив;
	ТипыРасчетов.Добавить(Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом);
	ТипыРасчетов.Добавить(Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = ТекстЗапросаНекорректныхОстаткиВзаиморасчетовПоСрокам();
	Запрос.УстановитьПараметр("НачалоМесяца",       ПериодРасчета);
	Запрос.УстановитьПараметр("МассивОрганизаций",  МассивОрганизаций);
	Запрос.УстановитьПараметр("Порядок",            ПорядокКорректировки);
	
	//Удалим корректировки
	НекорректныеОстатки = Запрос.Выполнить().Выгрузить();
	
	Если НекорректныеОстатки.Количество() > 0 Тогда
		МассивОрганизацийДляОбработки = НекорректныеОстатки.Скопировать(,"Организация");
		МассивОрганизацийДляОбработки.Свернуть("Организация");
		МассивОрганизацийДляОбработки = МассивОрганизацийДляОбработки.ВыгрузитьКолонку("Организация");
		Для Каждого Организация Из МассивОрганизаций Цикл
			УдалитьСистемныеКорректировкиРегистров(ДатаКорректировки,Организация)
		КонецЦикла;
		
		Запрос.Текст = "УНИЧТОЖИТЬ ВтАналитика; УНИЧТОЖИТЬ ВтОстатки; УНИЧТОЖИТЬ ВтРучныеКорректировки";
		Запрос.Выполнить();
		
		//Перечитываем остатки
		Запрос.Текст = ТекстЗапросаНекорректныхОстаткиВзаиморасчетовПоСрокам();
		
		НекорректныеОстатки = Запрос.Выполнить().Выгрузить();
		НекорректныеОстатки.Индексы.Добавить("ТипРасчетов, Организация");
		СтруктураПоиска = Новый Структура("ТипРасчетов, Организация");
		
		МассивОрганизацийДляОбработки = НекорректныеОстатки.Скопировать(,"Организация");
		МассивОрганизацийДляОбработки.Свернуть("Организация");
		МассивОрганизацийДляОбработки = МассивОрганизацийДляОбработки.ВыгрузитьКолонку("Организация");
		
		Для Каждого Организация Из МассивОрганизацийДляОбработки Цикл
			
			КорректировкаОбъект = КорректировкаРегистров(ДатаКорректировки, Организация, Перечисления.ОперацииКорректировкиРегистров.ИсправлениеРазрывовОстатковВзаиморасчетов);
			
			Для Каждого ТипРасчетов Из ТипыРасчетов Цикл
				
				Если ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом Тогда
					Движения = КорректировкаОбъект.Движения["РасчетыСКлиентамиПоСрокам"]; // РегистрНакопленияНаборЗаписей
				Иначе
					Движения = КорректировкаОбъект.Движения["РасчетыСПоставщикамиПоСрокам"]; // РегистрНакопленияНаборЗаписей
				КонецЕсли;
				
				СтруктураПоиска.ТипРасчетов = ТипРасчетов;
				СтруктураПоиска.Организация = Организация;
				ЗаписиНекорректныхОстатков = НекорректныеОстатки.НайтиСтроки(СтруктураПоиска);
				
				Для Каждого ЗаписьНекорректныхОстатков Из ЗаписиНекорректныхОстатков Цикл
					
					//Рассчитаем корректные остатки.
					
					ДополнительныеСвойства = Новый Структура;
					
					ОсновныеПараметры = СтруктураПараметровЗаполненияВзаиморасчетов();
					
					ЗаполнитьЗначенияСвойств(ОсновныеПараметры, ЗаписьНекорректныхОстатков);
					ОсновныеПараметры.ЭтоРасчетыСКлиентами             = ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом;
					ОсновныеПараметры.ДополнительныеСвойстваПроведения = ДополнительныеСвойства;
					ОсновныеПараметры.ЗаписыватьИзменения              = Ложь;
					
					ЗаполнитьОперативныеВзаиморасчеты(ОсновныеПараметры, ОсновныеПараметры.ДополнительныеСвойстваПроведения);
					
					//Сравним с остатками до и рассчитаем записи корректировки.
					
					Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам", ЗаписьНекорректныхОстатков.АналитикаУчетаПоПартнерам);
					Запрос.УстановитьПараметр("ОбъектРасчетов",            ЗаписьНекорректныхОстатков.ОбъектРасчетов);
					Запрос.УстановитьПараметр("Валюта",                    ЗаписьНекорректныхОстатков.ВалютаРасчетов);
					Если ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом Тогда
						Запрос.УстановитьПараметр("РасчетыПоСрокам",           ДополнительныеСвойства["РасчетыСКлиентамиПоСрокам"]);
					Иначе
						Запрос.УстановитьПараметр("РасчетыПоСрокам",           ДополнительныеСвойства["РасчетыСПоставщикамиПоСрокам"]);
					КонецЕсли;
					
					Запрос.Текст = "
						//Записи после
						|ВЫБРАТЬ
						|	РасчетыПоСрокамПосле.Период                        КАК Период,
						|	РасчетыПоСрокамПосле.ВидДвижения                   КАК ВидДвижения,
						|	
						|	РасчетыПоСрокамПосле.АналитикаУчетаПоПартнерам     КАК АналитикаУчетаПоПартнерам,
						|	РасчетыПоСрокамПосле.ОбъектРасчетов                КАК ОбъектРасчетов,
						|	РасчетыПоСрокамПосле.Валюта                        КАК Валюта,
						|	РасчетыПоСрокамПосле.РасчетныйДокумент             КАК РасчетныйДокумент,
						|	РасчетыПоСрокамПосле.ДатаПлановогоПогашения        КАК ДатаПлановогоПогашения,
						|	РасчетыПоСрокамПосле.ДатаВозникновения             КАК ДатаВозникновения,
						|	
						|	ВЫРАЗИТЬ(РасчетыПоСрокамПосле.Предоплата КАК ЧИСЛО(31,2))     КАК Предоплата,
						|	ВЫРАЗИТЬ(РасчетыПоСрокамПосле.ПредоплатаРегл КАК ЧИСЛО(31,2)) КАК ПредоплатаРегл,
						|	ВЫРАЗИТЬ(РасчетыПоСрокамПосле.ПредоплатаУпр КАК ЧИСЛО(31,2))  КАК ПредоплатаУпр,
						|	ВЫРАЗИТЬ(РасчетыПоСрокамПосле.Долг КАК ЧИСЛО(31,2))           КАК Долг,
						|	ВЫРАЗИТЬ(РасчетыПоСрокамПосле.ДолгРегл КАК ЧИСЛО(31,2))       КАК ДолгРегл,
						|	ВЫРАЗИТЬ(РасчетыПоСрокамПосле.ДолгУпр КАК ЧИСЛО(31,2))        КАК ДолгУпр,
						|	
						|	РасчетыПоСрокамПосле.ПорядокЗачета                 КАК ПорядокЗачета,
						|	РасчетыПоСрокамПосле.ПорядокОперации               КАК ПорядокОперации,
						|	РасчетыПоСрокамПосле.СвязанныйДокумент             КАК СвязанныйДокумент,
						|	РасчетыПоСрокамПосле.ВалютаДокумента               КАК ВалютаДокумента,
						|	РасчетыПоСрокамПосле.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств
						|ПОМЕСТИТЬ РасчетыПоСрокамПосле
						|ИЗ &РасчетыПоСрокам КАК РасчетыПоСрокамПосле
						|ИНДЕКСИРОВАТЬ ПО
						|	АналитикаУчетаПоПартнерам, ОбъектРасчетов, Валюта, РасчетныйДокумент
						|;
						//Расхождения
						|ВЫБРАТЬ
						|	ВложенныйЗапрос.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
						|	ВложенныйЗапрос.ОбъектРасчетов            КАК ОбъектРасчетов,
						|	ВложенныйЗапрос.Валюта                    КАК Валюта,
						|	ВложенныйЗапрос.РасчетныйДокумент         КАК РасчетныйДокумент,
						|	ВложенныйЗапрос.ДатаПлановогоПогашения    КАК ДатаПлановогоПогашения,
						|	ВложенныйЗапрос.ДатаВозникновения         КАК ДатаВозникновения,
						|	СУММА(ВложенныйЗапрос.Предоплата)         КАК Предоплата,
						|	СУММА(ВложенныйЗапрос.ПредоплатаРегл)     КАК ПредоплатаРегл,
						|	СУММА(ВложенныйЗапрос.ПредоплатаУпр)      КАК ПредоплатаУпр,
						|	СУММА(ВложенныйЗапрос.Долг)               КАК Долг,
						|	СУММА(ВложенныйЗапрос.ДолгРегл)           КАК ДолгРегл,
						|	СУММА(ВложенныйЗапрос.ДолгУпр)            КАК ДолгУпр
						|ПОМЕСТИТЬ ТаблицаИзменений
						|ИЗ
						|	(ВЫБРАТЬ
						|		РасчетыПоСрокамДо.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
						|		РасчетыПоСрокамДо.ОбъектРасчетов            КАК ОбъектРасчетов,
						|		РасчетыПоСрокамДо.Валюта                    КАК Валюта,
						|		РасчетыПоСрокамДо.РасчетныйДокумент         КАК РасчетныйДокумент,
						|		РасчетыПоСрокамДо.ДатаПлановогоПогашения    КАК ДатаПлановогоПогашения,
						|		РасчетыПоСрокамДо.ДатаВозникновения         КАК ДатаВозникновения,
						|		-РасчетыПоСрокамДо.ПредоплатаОстаток        КАК Предоплата,
						|		-РасчетыПоСрокамДо.ПредоплатаРеглОстаток    КАК ПредоплатаРегл,
						|		-РасчетыПоСрокамДо.ПредоплатаУпрОстаток     КАК ПредоплатаУпр,
						|		-РасчетыПоСрокамДо.ДолгОстаток              КАК Долг,
						|		-РасчетыПоСрокамДо.ДолгРеглОстаток          КАК ДолгРегл,
						|		-РасчетыПоСрокамДо.ДолгУпрОстаток           КАК ДолгУпр
						|	ИЗ
						|		РегистрНакопления.РасчетыСКлиентамиПоСрокам.Остатки(&НачалоМесяца, 
						|			АналитикаУчетаПоПартнерам = &АналитикаУчетаПоПартнерам
						|			И ОбъектРасчетов = &ОбъектРасчетов
						|			И Валюта = &Валюта) КАК РасчетыПоСрокамДо
						|		
						|	ОБЪЕДИНИТЬ ВСЕ
						|	
						|	ВЫБРАТЬ
						|		РасчетыПоСрокамПосле.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
						|		РасчетыПоСрокамПосле.ОбъектРасчетов            КАК ОбъектРасчетов,
						|		РасчетыПоСрокамПосле.Валюта                    КАК Валюта,
						|		РасчетыПоСрокамПосле.РасчетныйДокумент         КАК РасчетныйДокумент,
						|		РасчетыПоСрокамПосле.ДатаПлановогоПогашения    КАК ДатаПлановогоПогашения,
						|		РасчетыПоСрокамПосле.ДатаВозникновения         КАК ДатаВозникновения,
						|		ВЫБОР КОГДА РасчетыПоСрокамПосле.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
						|				ТОГДА -РасчетыПоСрокамПосле.Предоплата
						|			ИНАЧЕ РасчетыПоСрокамПосле.Предоплата
						|		КОНЕЦ                                          КАК Предоплата,
						|		ВЫБОР КОГДА РасчетыПоСрокамПосле.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
						|				ТОГДА -РасчетыПоСрокамПосле.ПредоплатаРегл
						|			ИНАЧЕ РасчетыПоСрокамПосле.ПредоплатаРегл
						|		КОНЕЦ                                          КАК ПредоплатаРегл,
						|		ВЫБОР КОГДА РасчетыПоСрокамПосле.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
						|				ТОГДА -РасчетыПоСрокамПосле.ПредоплатаУпр
						|			ИНАЧЕ РасчетыПоСрокамПосле.ПредоплатаУпр
						|		КОНЕЦ                                          КАК ПредоплатаУпр,
						|		ВЫБОР КОГДА РасчетыПоСрокамПосле.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
						|				ТОГДА -РасчетыПоСрокамПосле.Долг
						|			ИНАЧЕ РасчетыПоСрокамПосле.Долг
						|		КОНЕЦ                                          КАК Долг,
						|		ВЫБОР КОГДА РасчетыПоСрокамПосле.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
						|				ТОГДА -РасчетыПоСрокамПосле.ДолгРегл
						|			ИНАЧЕ РасчетыПоСрокамПосле.ДолгРегл
						|		КОНЕЦ                                          КАК ДолгРегл,
						|		ВЫБОР КОГДА РасчетыПоСрокамПосле.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
						|				ТОГДА -РасчетыПоСрокамПосле.ДолгУпр
						|			ИНАЧЕ РасчетыПоСрокамПосле.ДолгУпр
						|		КОНЕЦ                                          КАК ДолгУпр
						|	ИЗ
						|		РасчетыПоСрокамПосле КАК РасчетыПоСрокамПосле
						|	ГДЕ
						|		РасчетыПоСрокамПосле.Период < &НачалоМесяца) КАК ВложенныйЗапрос
						|СГРУППИРОВАТЬ ПО
						|	ВложенныйЗапрос.АналитикаУчетаПоПартнерам,
						|	ВложенныйЗапрос.ОбъектРасчетов,
						|	ВложенныйЗапрос.Валюта,
						|	ВложенныйЗапрос.РасчетныйДокумент,
						|	ВложенныйЗапрос.ДатаПлановогоПогашения,
						|	ВложенныйЗапрос.ДатаВозникновения
						|ИМЕЮЩИЕ
						|	СУММА(ВложенныйЗапрос.Предоплата) <> 0 ИЛИ СУММА(ВложенныйЗапрос.Долг) <> 0
						|ИНДЕКСИРОВАТЬ ПО
						|	АналитикаУчетаПоПартнерам, ОбъектРасчетов, Валюта, РасчетныйДокумент
						|;
						|
						//Данные для движений
						|ВЫБРАТЬ
						|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                       КАК ВидДвижения,
						|	
						|	Изменения.АналитикаУчетаПоПартнерам                          КАК АналитикаУчетаПоПартнерам,
						|	Изменения.ОбъектРасчетов                                     КАК ОбъектРасчетов,
						|	Изменения.Валюта                                             КАК Валюта,
						|	Изменения.РасчетныйДокумент                                  КАК РасчетныйДокумент,
						|	Изменения.ДатаПлановогоПогашения                             КАК ДатаПлановогоПогашения,
						|	Изменения.ДатаВозникновения                                  КАК ДатаВозникновения,
						|	
						|	Изменения.Предоплата                                         КАК Предоплата,
						|	Изменения.ПредоплатаРегл                                     КАК ПредоплатаРегл,
						|	Изменения.ПредоплатаУпр                                      КАК ПредоплатаУпр,
						|	Изменения.Долг                                               КАК Долг,
						|	Изменения.ДолгРегл                                           КАК ДолгРегл,
						|	Изменения.ДолгУпр                                            КАК ДолгУпр,
						|	
						|	МИНИМУМ(РасчетыПоСрокамПосле.ПорядокЗачета)                  КАК ПорядокЗачета,
						|	МИНИМУМ(РасчетыПоСрокамПосле.ПорядокОперации)                КАК ПорядокОперации,
						|	МАКСИМУМ(РасчетыПоСрокамПосле.СвязанныйДокумент)             КАК СвязанныйДокумент,
						|	МИНИМУМ(РасчетыПоСрокамПосле.ВалютаДокумента)                КАК ВалютаДокумента,
						|	МАКСИМУМ(РасчетыПоСрокамПосле.СтатьяДвиженияДенежныхСредств) КАК СтатьяДвиженияДенежныхСредств,
						|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)    КАК ХозяйственнаяОперация
						|
						|ИЗ
						|	ТаблицаИзменений КАК Изменения
						|		ЛЕВОЕ СОЕДИНЕНИЕ РасчетыПоСрокамПосле КАК РасчетыПоСрокамПосле
						|			ПО РасчетыПоСрокамПосле.АналитикаУчетаПоПартнерам    = Изменения.АналитикаУчетаПоПартнерам
						|				И РасчетыПоСрокамПосле.ОбъектРасчетов            = Изменения.ОбъектРасчетов
						|				И РасчетыПоСрокамПосле.Валюта                    = Изменения.Валюта
						|				И РасчетыПоСрокамПосле.РасчетныйДокумент         = Изменения.РасчетныйДокумент
						|ГДЕ
						|	Изменения.Предоплата > 0 ИЛИ Изменения.Долг > 0
						|СГРУППИРОВАТЬ ПО
						|	Изменения.АналитикаУчетаПоПартнерам,
						|	Изменения.ОбъектРасчетов,
						|	Изменения.Валюта,
						|	Изменения.РасчетныйДокумент,
						|	Изменения.ДатаПлановогоПогашения,
						|	Изменения.ДатаВозникновения,
						|	Изменения.Предоплата,
						|	Изменения.ПредоплатаРегл,
						|	Изменения.ПредоплатаУпр,
						|	Изменения.Долг,
						|	Изменения.ДолгРегл,
						|	Изменения.ДолгУпр
						|	
						|ОБЪЕДИНИТЬ ВСЕ
						|	
						|ВЫБРАТЬ
						|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
						|	
						|	Изменения.АналитикаУчетаПоПартнерам                       КАК АналитикаУчетаПоПартнерам,
						|	Изменения.ОбъектРасчетов                                  КАК ОбъектРасчетов,
						|	Изменения.Валюта                                          КАК Валюта,
						|	Изменения.РасчетныйДокумент                               КАК РасчетныйДокумент,
						|	Изменения.ДатаПлановогоПогашения                          КАК ДатаПлановогоПогашения,
						|	Изменения.ДатаВозникновения                               КАК ДатаВозникновения,
						|	
						|	-Изменения.Предоплата                                     КАК Предоплата,
						|	-Изменения.ПредоплатаРегл                                 КАК ПредоплатаРегл,
						|	-Изменения.ПредоплатаУпр                                  КАК ПредоплатаУпр,
						|	-Изменения.Долг                                           КАК Долг,
						|	-Изменения.ДолгРегл                                       КАК ДолгРегл,
						|	-Изменения.ДолгУпр                                        КАК ДолгУпр,
						|	
						|	МИНИМУМ(РасчетыПоСрокамДо.ПорядокЗачета)                  КАК ПорядокЗачета,
						|	МИНИМУМ(РасчетыПоСрокамДо.ПорядокОперации)                КАК ПорядокОперации,
						|	МАКСИМУМ(РасчетыПоСрокамДо.СвязанныйДокумент)             КАК СвязанныйДокумент,
						|	МИНИМУМ(РасчетыПоСрокамДо.ВалютаДокумента)                КАК ВалютаДокумента,
						|	МАКСИМУМ(РасчетыПоСрокамДо.СтатьяДвиженияДенежныхСредств) КАК СтатьяДвиженияДенежныхСредств,
						|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка) КАК ХозяйственнаяОперация
						|
						|ИЗ
						|	ТаблицаИзменений КАК Изменения
						|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыПоСрокамДо
						|			ПО РасчетыПоСрокамДо.АналитикаУчетаПоПартнерам    = Изменения.АналитикаУчетаПоПартнерам
						|				И РасчетыПоСрокамДо.ОбъектРасчетов            = Изменения.ОбъектРасчетов
						|				И РасчетыПоСрокамДо.Валюта                    = Изменения.Валюта
						|				И РасчетыПоСрокамДо.РасчетныйДокумент         = Изменения.РасчетныйДокумент
						|				И РасчетыПоСрокамДо.Период                    < &НачалоМесяца
						|				И РасчетыПоСрокамДо.Активность
						|ГДЕ
						|	Изменения.Предоплата < 0 ИЛИ Изменения.Долг < 0
						|СГРУППИРОВАТЬ ПО
						|	Изменения.АналитикаУчетаПоПартнерам,
						|	Изменения.ОбъектРасчетов,
						|	Изменения.Валюта,
						|	Изменения.РасчетныйДокумент,
						|	Изменения.ДатаПлановогоПогашения,
						|	Изменения.ДатаВозникновения,
						|	-Изменения.Предоплата,
						|	-Изменения.ПредоплатаРегл,
						|	-Изменения.ПредоплатаУпр,
						|	-Изменения.Долг,
						|	-Изменения.ДолгРегл,
						|	-Изменения.ДолгУпр";
						
						Если ТипРасчетов <> Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом Тогда
							Запрос.Текст = СтрЗаменить(Запрос.Текст,
								"РегистрНакопления.РасчетыСКлиентамиПоСрокам",
								"РегистрНакопления.РасчетыСПоставщикамиПоСрокам");
						КонецЕсли;
						
						Результат = Запрос.Выполнить();
						Выборка = Результат.Выбрать();
						
						Запрос.Текст = "УНИЧТОЖИТЬ РасчетыПоСрокамПосле; УНИЧТОЖИТЬ ТаблицаИзменений";
						Запрос.Выполнить();
						
						Пока Выборка.Следующий() Цикл
							
							НовСтр = Движения.Добавить();
							ЗаполнитьЗначенияСвойств(НовСтр, Выборка);
							
							НовСтр.ДокументРегистратор = КорректировкаОбъект.Ссылка;
							НовСтр.Период = ДатаКорректировки;
							
						КонецЦикла;
						
				КонецЦикла;
				
				Движения.Записать();
				
				Для Каждого ЗаписьНекорректныхОстатков Из ЗаписиНекорректныхОстатков Цикл
					
					ОсновныеПараметры = СтруктураПараметровЗаполненияВзаиморасчетов();
					
					ЗаполнитьЗначенияСвойств(ОсновныеПараметры, ЗаписьНекорректныхОстатков);
					ОсновныеПараметры.ЭтоРасчетыСКлиентами = ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом;
					ОсновныеПараметры.ПорядокФакт              = ПорядокРасчета;
					ОсновныеПараметры.ПорядокПлан              = ПорядокРасчета;
					
					ЗаполнитьОперативныеВзаиморасчеты(ОсновныеПараметры);
					
				КонецЦикла;
				
			КонецЦикла;
			
			Если КорректировкаОбъект.Движения.РасчетыСКлиентамиПоСрокам.Количество() = 0 
				И КорректировкаОбъект.Движения.РасчетыСПоставщикамиПоСрокам.Количество() = 0 Тогда
				КорректировкаОбъект.Удалить();
			Иначе
				ДополнитьКорректировкуДвижениямиПоПрочимДоходамРасходам(КорректировкаОбъект);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос.Текст = "УНИЧТОЖИТЬ ВтАналитика; УНИЧТОЖИТЬ ВтОстатки; УНИЧТОЖИТЬ ВтРучныеКорректировки";
	Запрос.Выполнить();
	
	//Если на начало периода все хорошо, а на конец есть некорректные остатки - пересчитаем их.
	Запрос.Текст = ТекстЗапросаНекорректныхОстаткиВзаиморасчетовПоСрокам();
	Запрос.УстановитьПараметр("НачалоМесяца",       КонецМесяца(ПериодРасчета));
	Запрос.УстановитьПараметр("Порядок",            Формат(КонецМесяца(ПериодРасчета),"ДФ=ггггММдд9ЧЧммсс99"));
	НекорректныеОстатки = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Стр Из НекорректныеОстатки Цикл
		
		ОсновныеПараметры = СтруктураПараметровЗаполненияВзаиморасчетов();
		
		ЗаполнитьЗначенияСвойств(ОсновныеПараметры, Стр);
		ОсновныеПараметры.ЭтоРасчетыСКлиентами = Стр.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом;
		ОсновныеПараметры.ПорядокПлан              = ПорядокРасчета;
		ОсновныеПараметры.ПорядокФакт              = ПорядокРасчета;
		
		ЗаполнитьОперативныеВзаиморасчеты(ОсновныеПараметры);
		
	КонецЦикла;
	
КонецПроцедуры

// Исправление развернутого сальдо по взаиморасчетам
// 
// Параметры:
// 	Период - Дата - Период проверки, требуется указать конец месяца
// 	МассивОрганизаций - Массив - Массив организация, по которым требуется исправить развернутое сальдо взаиморасчетов
Процедура ИсправитьРазвернутоеСальдо(Период, ЗНАЧ МассивОрганизаций = Неопределено) Экспорт
	
	ДатаКорректировки    = НачалоМесяца(Период)-1; //Для корректировки и движений
	ПорядокКорректировки = Формат(ДатаКорректировки,"ДФ=ггггММдд9ЧЧммсс99"); //Для запроса данных остатков.
	ПериодРасчета        = НачалоМесяца(Период); //Для сравнения остатков
	ПорядокРасчета       = Формат(ПериодРасчета, "ДФ=ггггММдд00000000"); //Для запуска пересчета
	
	МассивОрганизаций = ?(МассивОрганизаций = Неопределено,
							Справочники.Организации.ДоступныеОрганизации(),
							МассивОрганизаций);
	
	ТипыРасчетов = Новый Массив;
	ТипыРасчетов.Добавить(Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом);
	ТипыРасчетов.Добавить(Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = ТекстЗапросаРазвернутоеСальдо("АналитикиСуммы");
	Запрос.УстановитьПараметр("НачалоМесяца",       ПериодРасчета);
	Запрос.УстановитьПараметр("МассивОрганизаций",  МассивОрганизаций);
	Запрос.УстановитьПараметр("Порядок",            ПорядокКорректировки);
	Запрос.Выполнить();
	
	РазвернутоеСальдо = Запрос.МенеджерВременныхТаблиц.Таблицы["АналитикиСуммы"].ПолучитьДанные().Выгрузить();
	
	МассивОрганизацийДляОбработки = РазвернутоеСальдо.Скопировать(,"Организация");
	МассивОрганизацийДляОбработки.Свернуть("Организация");
	МассивОрганизацийДляОбработки = МассивОрганизацийДляОбработки.ВыгрузитьКолонку("Организация");
	
	Если РазвернутоеСальдо.Количество() > 0 Тогда
		Для Каждого Организация Из МассивОрганизаций Цикл
			УдалитьСистемныеКорректировкиРегистров(ДатаКорректировки, Организация, Перечисления.ОперацииКорректировкиРегистров.ИсправлениеРазвернутогоСальдоВзаиморасчетов)
		КонецЦикла;
		
		Запрос.Текст = "УНИЧТОЖИТЬ ВтАналитика; УНИЧТОЖИТЬ ВтСальдо; УНИЧТОЖИТЬ АналитикиСуммы; УНИЧТОЖИТЬ ВтРучныеКорректировки";
		Запрос.Выполнить();
		
		//Перечитываем остатки
		
		Запрос.Текст = ТекстЗапросаРазвернутоеСальдо("АналитикиСуммы");
		Запрос.Выполнить();
		РазвернутоеСальдо = Запрос.МенеджерВременныхТаблиц.Таблицы["АналитикиСуммы"].ПолучитьДанные().Выгрузить(); //ТаблицаЗначений
		
		РазвернутоеСальдо.Индексы.Добавить("ТипРасчетов, Организация");
		СтруктураПоиска = Новый Структура("ТипРасчетов, Организация");
		
		Запрос.Текст = "ВЫБРАТЬ
			|	РасчетыСКлиентамиПоСрокамОстатки.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
			|	РасчетыСКлиентамиПоСрокамОстатки.ОбъектРасчетов КАК ОбъектРасчетов,
			|	РасчетыСКлиентамиПоСрокамОстатки.Валюта КАК Валюта,
			|	РасчетыСКлиентамиПоСрокамОстатки.РасчетныйДокумент КАК РасчетныйДокумент,
			|	РасчетыСКлиентамиПоСрокамОстатки.ДатаПлановогоПогашения КАК ДатаПлановогоПогашения,
			|	РасчетыСКлиентамиПоСрокамОстатки.ДатаВозникновения КАК ДатаВозникновения,
			|	РасчетыСКлиентамиПоСрокамОстатки.ПредоплатаОстаток КАК Предоплата,
			|	РасчетыСКлиентамиПоСрокамОстатки.ПредоплатаРеглОстаток КАК ПредоплатаРегл,
			|	РасчетыСКлиентамиПоСрокамОстатки.ПредоплатаУпрОстаток КАК ПредоплатаУпр,
			|	РасчетыСКлиентамиПоСрокамОстатки.ДолгОстаток КАК Долг,
			|	РасчетыСКлиентамиПоСрокамОстатки.ДолгРеглОстаток КАК ДолгРегл,
			|	РасчетыСКлиентамиПоСрокамОстатки.ДолгУпрОстаток КАК ДолгУпр
			|ПОМЕСТИТЬ ВТРасчетыСКлиентамиПоСрокамОстатки
			|ИЗ
			|	РегистрНакопления.РасчетыСКлиентамиПоСрокам.Остатки(&НачалоМесяца, 
			|		(АналитикаУчетаПоПартнерам, ОбъектРасчетов, Валюта)
			|			В (ВЫБРАТЬ АналитикаУчетаПоПартнерам, ОбъектРасчетов, ВалютаРасчетов 
			|				ИЗ АналитикиСуммы
			|				ГДЕ ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
			|				)) КАК РасчетыСКлиентамиПоСрокамОстатки
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	АналитикаУчетаПоПартнерам, ОбъектРасчетов, Валюта, РасчетныйДокумент
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	РасчетыСПоставщикамиПоСрокамОстатки.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
			|	РасчетыСПоставщикамиПоСрокамОстатки.ОбъектРасчетов КАК ОбъектРасчетов,
			|	РасчетыСПоставщикамиПоСрокамОстатки.Валюта КАК Валюта,
			|	РасчетыСПоставщикамиПоСрокамОстатки.РасчетныйДокумент КАК РасчетныйДокумент,
			|	РасчетыСПоставщикамиПоСрокамОстатки.ДатаПлановогоПогашения КАК ДатаПлановогоПогашения,
			|	РасчетыСПоставщикамиПоСрокамОстатки.ДатаВозникновения КАК ДатаВозникновения,
			|	РасчетыСПоставщикамиПоСрокамОстатки.ПредоплатаОстаток КАК ПредоплатаОстаток,
			|	РасчетыСПоставщикамиПоСрокамОстатки.ПредоплатаРеглОстаток КАК ПредоплатаРеглОстаток,
			|	РасчетыСПоставщикамиПоСрокамОстатки.ПредоплатаУпрОстаток КАК ПредоплатаУпрОстаток,
			|	РасчетыСПоставщикамиПоСрокамОстатки.ДолгОстаток КАК ДолгОстаток,
			|	РасчетыСПоставщикамиПоСрокамОстатки.ДолгРеглОстаток КАК ДолгРеглОстаток,
			|	РасчетыСПоставщикамиПоСрокамОстатки.ДолгУпрОстаток КАК ДолгУпрОстаток
			|ПОМЕСТИТЬ ВТРасчетыСПоставщикамиПоСрокамОстатки
			|ИЗ
			|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам.Остатки(&НачалоМесяца, 
			|		(АналитикаУчетаПоПартнерам, ОбъектРасчетов, Валюта)
			|			В (ВЫБРАТЬ АналитикаУчетаПоПартнерам, ОбъектРасчетов, ВалютаРасчетов 
			|					ИЗ АналитикиСуммы
			|					ГДЕ ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
			|					)) КАК РасчетыСПоставщикамиПоСрокамОстатки
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	АналитикаУчетаПоПартнерам, ОбъектРасчетов, Валюта, РасчетныйДокумент
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом) КАК ТипРасчетов,
			|	РасчетыПоСрокамОстатки.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
			|	РасчетыПоСрокамОстатки.ОбъектРасчетов КАК ОбъектРасчетов,
			|	РасчетыПоСрокамОстатки.Валюта КАК Валюта,
			|	РасчетыПоСрокамОстатки.РасчетныйДокумент КАК РасчетныйДокумент,
			|	РасчетыПоСрокамОстатки.ДатаПлановогоПогашения КАК ДатаПлановогоПогашения,
			|	РасчетыПоСрокамОстатки.ДатаВозникновения КАК ДатаВозникновения,
			|	РасчетыПоСрокамОстатки.Предоплата КАК Предоплата,
			|	РасчетыПоСрокамОстатки.ПредоплатаРегл КАК ПредоплатаРегл,
			|	РасчетыПоСрокамОстатки.ПредоплатаУпр КАК ПредоплатаУпр,
			|	РасчетыПоСрокамОстатки.Долг КАК Долг,
			|	РасчетыПоСрокамОстатки.ДолгРегл КАК ДолгРегл,
			|	РасчетыПоСрокамОстатки.ДолгУпр КАК ДолгУпр,
			|	МИНИМУМ(РасчетыПоСрокамДо.ПорядокЗачета) КАК ПорядокЗачета,
			|	МИНИМУМ(РасчетыПоСрокамДо.ПорядокОперации) КАК ПорядокОперации,
			|	МАКСИМУМ(РасчетыПоСрокамДо.СвязанныйДокумент) КАК СвязанныйДокумент,
			|	МИНИМУМ(РасчетыПоСрокамДо.ВалютаДокумента) КАК ВалютаДокумента,
			|	МАКСИМУМ(РасчетыПоСрокамДо.СтатьяДвиженияДенежныхСредств) КАК СтатьяДвиженияДенежныхСредств,
			|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка) КАК ХозяйственнаяОперация
			|ИЗ
			|	ВТРасчетыСКлиентамиПоСрокамОстатки КАК РасчетыПоСрокамОстатки
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыПоСрокамДо
			|		ПО (РасчетыПоСрокамДо.АналитикаУчетаПоПартнерам = РасчетыПоСрокамОстатки.АналитикаУчетаПоПартнерам)
			|			И (РасчетыПоСрокамДо.ОбъектРасчетов = РасчетыПоСрокамОстатки.ОбъектРасчетов)
			|			И (РасчетыПоСрокамДо.Валюта = РасчетыПоСрокамОстатки.Валюта)
			|			И (РасчетыПоСрокамДо.РасчетныйДокумент = РасчетыПоСрокамОстатки.РасчетныйДокумент)
			|			И (РасчетыПоСрокамДо.Период < &НачалоМесяца)
			|			И (РасчетыПоСрокамДо.Активность)
			|
			|СГРУППИРОВАТЬ ПО
			|	РасчетыПоСрокамОстатки.АналитикаУчетаПоПартнерам,
			|	РасчетыПоСрокамОстатки.ОбъектРасчетов,
			|	РасчетыПоСрокамОстатки.Валюта,
			|	РасчетыПоСрокамОстатки.РасчетныйДокумент,
			|	РасчетыПоСрокамОстатки.ДатаПлановогоПогашения,
			|	РасчетыПоСрокамОстатки.ДатаВозникновения,
			|	РасчетыПоСрокамОстатки.Предоплата,
			|	РасчетыПоСрокамОстатки.ПредоплатаРегл,
			|	РасчетыПоСрокамОстатки.ПредоплатаУпр,
			|	РасчетыПоСрокамОстатки.Долг,
			|	РасчетыПоСрокамОстатки.ДолгРегл,
			|	РасчетыПоСрокамОстатки.ДолгУпр
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком),
			|	РасчетыПоСрокамОстатки.АналитикаУчетаПоПартнерам,
			|	РасчетыПоСрокамОстатки.ОбъектРасчетов,
			|	РасчетыПоСрокамОстатки.Валюта,
			|	РасчетыПоСрокамОстатки.РасчетныйДокумент,
			|	РасчетыПоСрокамОстатки.ДатаПлановогоПогашения,
			|	РасчетыПоСрокамОстатки.ДатаВозникновения,
			|	РасчетыПоСрокамОстатки.ПредоплатаОстаток,
			|	РасчетыПоСрокамОстатки.ПредоплатаРеглОстаток,
			|	РасчетыПоСрокамОстатки.ПредоплатаУпрОстаток,
			|	РасчетыПоСрокамОстатки.ДолгОстаток,
			|	РасчетыПоСрокамОстатки.ДолгРеглОстаток,
			|	РасчетыПоСрокамОстатки.ДолгУпрОстаток,
			|	МИНИМУМ(РасчетыПоСрокамДо.ПорядокЗачета),
			|	МИНИМУМ(РасчетыПоСрокамДо.ПорядокОперации),
			|	МАКСИМУМ(РасчетыПоСрокамДо.СвязанныйДокумент),
			|	МИНИМУМ(РасчетыПоСрокамДо.ВалютаДокумента),
			|	МАКСИМУМ(РасчетыПоСрокамДо.СтатьяДвиженияДенежныхСредств),
			|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)
			|ИЗ
			|	ВТРасчетыСПоставщикамиПоСрокамОстатки КАК РасчетыПоСрокамОстатки
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК РасчетыПоСрокамДо
			|		ПО (РасчетыПоСрокамДо.АналитикаУчетаПоПартнерам = РасчетыПоСрокамОстатки.АналитикаУчетаПоПартнерам)
			|			И (РасчетыПоСрокамДо.ОбъектРасчетов = РасчетыПоСрокамОстатки.ОбъектРасчетов)
			|			И (РасчетыПоСрокамДо.Валюта = РасчетыПоСрокамОстатки.Валюта)
			|			И (РасчетыПоСрокамДо.РасчетныйДокумент = РасчетыПоСрокамОстатки.РасчетныйДокумент)
			|			И (РасчетыПоСрокамДо.Период < &НачалоМесяца)
			|			И (РасчетыПоСрокамДо.Активность)
			|
			|СГРУППИРОВАТЬ ПО
			|	РасчетыПоСрокамОстатки.АналитикаУчетаПоПартнерам,
			|	РасчетыПоСрокамОстатки.ОбъектРасчетов,
			|	РасчетыПоСрокамОстатки.Валюта,
			|	РасчетыПоСрокамОстатки.РасчетныйДокумент,
			|	РасчетыПоСрокамОстатки.ДатаПлановогоПогашения,
			|	РасчетыПоСрокамОстатки.ДатаВозникновения,
			|	РасчетыПоСрокамОстатки.ПредоплатаОстаток,
			|	РасчетыПоСрокамОстатки.ПредоплатаРеглОстаток,
			|	РасчетыПоСрокамОстатки.ПредоплатаУпрОстаток,
			|	РасчетыПоСрокамОстатки.ДолгОстаток,
			|	РасчетыПоСрокамОстатки.ДолгРеглОстаток,
			|	РасчетыПоСрокамОстатки.ДолгУпрОстаток
			|
			|УПОРЯДОЧИТЬ ПО
			|	МИНИМУМ(РасчетыПоСрокамДо.ПорядокОперации)";
		
		ДетальныеЗаписи = Запрос.Выполнить().Выгрузить();
		ДетальныеЗаписи.Индексы.Добавить("ТипРасчетов, АналитикаУчетаПоПартнерам, ОбъектРасчетов, Валюта");
		СтруктураПоискаДетальныхЗаписей = Новый Структура("ТипРасчетов, АналитикаУчетаПоПартнерам, ОбъектРасчетов, Валюта");
		
		МассивОрганизацийДляОбработки = РазвернутоеСальдо.Скопировать(,"Организация");
		МассивОрганизацийДляОбработки.Свернуть("Организация");
		МассивОрганизацийДляОбработки = МассивОрганизацийДляОбработки.ВыгрузитьКолонку("Организация");
		
		Для Каждого Организация Из МассивОрганизацийДляОбработки Цикл
			
			КорректировкаОбъект = КорректировкаРегистров(ДатаКорректировки, Организация, Перечисления.ОперацииКорректировкиРегистров.ИсправлениеРазвернутогоСальдоВзаиморасчетов);
			
			Для Каждого ТипРасчетов Из ТипыРасчетов Цикл
				
				ТипРасчетовСтрокой = ?(ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом,"РасчетыСКлиентами","РасчетыСПоставщиками");
				
				Движения = КорректировкаОбъект.Движения[ТипРасчетовСтрокой + "ПоСрокам"]; // РегистрНакопленияНаборЗаписей
				
				СтруктураПоиска.ТипРасчетов = ТипРасчетов;
				СтруктураПоиска.Организация = Организация;
				ЗаписиРазвернутогоСальдо = РазвернутоеСальдо.НайтиСтроки(СтруктураПоиска);
				
				Для Каждого ЗаписьРазвернутогоСальдо Из ЗаписиРазвернутогоСальдо Цикл
					ЗаполнитьЗначенияСвойств(СтруктураПоискаДетальныхЗаписей, ЗаписьРазвернутогоСальдо);
					СтруктураПоискаДетальныхЗаписей.Валюта = ЗаписьРазвернутогоСальдо.ВалютаРасчетов;
					ДетальныеЗаписиАналитики = ДетальныеЗаписи.НайтиСтроки(СтруктураПоискаДетальныхЗаписей);
					
					СуммаКРаспределениюДолг = Мин(ЗаписьРазвернутогоСальдо.ДолгОстаток, ЗаписьРазвернутогоСальдо.ПредоплатаОстаток);
					СуммаКРаспределениюПредоплата = СуммаКРаспределениюДолг;
					
					Для Каждого СтрокаДетальныхЗаписей Из ДетальныеЗаписиАналитики Цикл
						
						Если СуммаКРаспределениюДолг = 0 И СуммаКРаспределениюПредоплата = 0 Тогда
							Прервать;
						КонецЕсли;
						
						НовСтр = Движения.Добавить();
						ЗаполнитьЗначенияСвойств(НовСтр, СтрокаДетальныхЗаписей);
						
						НовСтр.Период              = ДатаКорректировки;
						НовСтр.ВидДвижения         = ВидДвиженияНакопления.Расход;
						НовСтр.ДокументРегистратор = КорректировкаОбъект.Ссылка;
						НовСтр.ПорядокОперации     = ПорядокКорректировки;
						
						Если СтрокаДетальныхЗаписей.Долг > 0 Тогда
							СуммаСписания = Мин(СуммаКРаспределениюДолг, СтрокаДетальныхЗаписей.Долг);
							
							НовСтр.ДолгРегл = СтрокаДетальныхЗаписей.ДолгРегл / СтрокаДетальныхЗаписей.Долг * СуммаСписания;
							НовСтр.ДолгУпр  = СтрокаДетальныхЗаписей.ДолгУпр / СтрокаДетальныхЗаписей.Долг * СуммаСписания;
							НовСтр.Долг     = СуммаСписания;
							
							СуммаКРаспределениюДолг = СуммаКРаспределениюДолг - СуммаСписания;
						КонецЕсли;
						
						Если СтрокаДетальныхЗаписей.Предоплата > 0 Тогда
							СуммаСписания = Мин(СуммаКРаспределениюПредоплата, СтрокаДетальныхЗаписей.Предоплата);
							
							НовСтр.ПредоплатаРегл = СтрокаДетальныхЗаписей.ПредоплатаРегл / СтрокаДетальныхЗаписей.Предоплата * СуммаСписания;
							НовСтр.ПредоплатаУпр  = СтрокаДетальныхЗаписей.ПредоплатаУпр / СтрокаДетальныхЗаписей.Предоплата * СуммаСписания;
							НовСтр.Предоплата     = СуммаСписания;
							
							СуммаКРаспределениюПредоплата = СуммаКРаспределениюПредоплата - СуммаСписания;
						КонецЕсли;
						
					КонецЦикла;
				КонецЦикла;
				
				Движения.Записать();
				
				Для Каждого СтрокаАналитики Из ЗаписиРазвернутогоСальдо Цикл
					
					ОсновныеПараметры = СтруктураПараметровЗаполненияВзаиморасчетов();
					
					ЗаполнитьЗначенияСвойств(ОсновныеПараметры, СтрокаАналитики);
					ОсновныеПараметры.ЭтоРасчетыСКлиентами = ТипРасчетовСтрокой = "РасчетыСКлиентами";
					ОсновныеПараметры.ПорядокФакт              = ПорядокРасчета;
					ОсновныеПараметры.ПорядокПлан              = ПорядокРасчета;
					
					ЗаполнитьОперативныеВзаиморасчеты(ОсновныеПараметры);
					
				КонецЦикла;
				
			КонецЦикла;
			
			Если КорректировкаОбъект.Движения.РасчетыСКлиентамиПоСрокам.Количество() = 0 
				И КорректировкаОбъект.Движения.РасчетыСПоставщикамиПоСрокам.Количество() = 0 Тогда
				КорректировкаОбъект.Удалить();
			Иначе
				ДополнитьКорректировкуДвижениямиПоПрочимДоходамРасходам(КорректировкаОбъект);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос.Текст = "УНИЧТОЖИТЬ ВтАналитика; УНИЧТОЖИТЬ ВтСальдо; УНИЧТОЖИТЬ ВтРучныеКорректировки";
	Запрос.Выполнить();
	
	//Если на начало периода все хорошо, а на конец есть развернутое сальдо - пересчитаем их.
	Запрос.Текст = ТекстЗапросаРазвернутоеСальдо();
	Запрос.УстановитьПараметр("НачалоМесяца",       КонецМесяца(ПериодРасчета));
	Запрос.УстановитьПараметр("Порядок",            Формат(КонецМесяца(ПериодРасчета),"ДФ=ггггММдд9ЧЧммсс99"));
	НекорректныеОстатки = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Стр Из НекорректныеОстатки Цикл
		
		ОсновныеПараметры = СтруктураПараметровЗаполненияВзаиморасчетов();
		
		ЗаполнитьЗначенияСвойств(ОсновныеПараметры, Стр);
		ОсновныеПараметры.ЭтоРасчетыСКлиентами = Стр.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом;
		ОсновныеПараметры.ПорядокПлан              = ПорядокРасчета;
		ОсновныеПараметры.ПорядокФакт              = ПорядокРасчета;
		
		ЗаполнитьОперативныеВзаиморасчеты(ОсновныеПараметры);
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет в движения данные по прочим доходам/расходам 
// 
// Параметры:
// 	КорректировкаОбъект - ДокументОбъект.КорректировкаРегистров - ДокументОбъект, с уже записанными движениями по расчетам.
Процедура ДополнитьКорректировкуДвижениямиПоПрочимДоходамРасходам(КорректировкаОбъект) Экспорт
	
	Если КорректировкаОбъект.ТаблицаРегистров.Найти("ПрочиеДоходы","Имя") = Неопределено Тогда
		НовСтр = КорректировкаОбъект.ТаблицаРегистров.Добавить();
		НовСтр.Имя = "ПрочиеДоходы";
	КонецЕсли;
	
	Если КорректировкаОбъект.ТаблицаРегистров.Найти("ПрочиеРасходы","Имя") = Неопределено Тогда
		НовСтр = КорректировкаОбъект.ТаблицаРегистров.Добавить();
		НовСтр.Имя = "ПрочиеРасходы";
	КонецЕсли;
	
	Если КорректировкаОбъект.ТаблицаРегистров.Найти("ПрочиеАктивыПассивы","Имя") = Неопределено Тогда
		НовСтр = КорректировкаОбъект.ТаблицаРегистров.Добавить();
		НовСтр.Имя = "ПрочиеАктивыПассивы";
	КонецЕсли;
	
	НачалоТекущегоПериода = КонецМесяца(КорректировкаОбъект.Дата)+1;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КорректировкаСсылка", КорректировкаОбъект.Ссылка);
	Запрос.УстановитьПараметр("Период", НачалоТекущегоПериода);
	Запрос.УстановитьПараметр("СтатьяДоходов", ПланыВидовХарактеристик.СтатьиДоходов.ПрибыльУбытокПрошлыхЛет);
	Запрос.УстановитьПараметр("СтатьяРасходов", ПланыВидовХарактеристик.СтатьиРасходов.ПрибыльУбытокПрошлыхЛет);
	Запрос.УстановитьПараметр("УправленческийУчетОрганизаций", РасчетСебестоимостиПовтИсп.УправленческийУчетОрганизаций(НачалоТекущегоПериода));
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	&Период                                 КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)  КАК ВидДвижения,
	|	ВложенныйЗапрос.Организация             КАК Организация,
	|	ВложенныйЗапрос.Подразделение           КАК Подразделение,
	|	ВложенныйЗапрос.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	&СтатьяДоходов                          КАК СтатьяДоходов,
	|	ВложенныйЗапрос.Организация             КАК АналитикаДоходов,
	|	СУММА(ВложенныйЗапрос.Сумма)            КАК Сумма,
	|	СУММА(ВложенныйЗапрос.СуммаРегл)        КАК СуммаРегл,
	|	СУММА(ВЫБОР КОГДА &УправленческийУчетОрганизаций 
	|				ТОГДА ВложенныйЗапрос.СуммаУпр
	|				ИНАЧЕ 0
	|		КОНЕЦ)                              КАК СуммаУпр
	|ИЗ (ВЫБРАТЬ
	|		Расчеты.АналитикаУчетаПоПартнерам.Организация             КАК Организация,
	|		ЕСТЬNULL(Расчеты.ОбъектРасчетов.Подразделение,
	|			ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) КАК Подразделение,
	|		Расчеты.АналитикаУчетаПоПартнерам.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|		
	|		ВЫБОР КОГДА Расчеты.Долг < 0
	|			ТОГДА -Расчеты.Долг
	|			ИНАЧЕ Расчеты.Долг
	|		КОНЕЦ +
	|		ВЫБОР КОГДА Расчеты.Предоплата < 0
	|			ТОГДА -Расчеты.Предоплата
	|			ИНАЧЕ Расчеты.Предоплата
	|		КОНЕЦ                                                     КАК Сумма,
	|		ВЫБОР КОГДА Расчеты.ДолгРегл < 0
	|			ТОГДА -Расчеты.ДолгРегл
	|			ИНАЧЕ Расчеты.ДолгРегл
	|		КОНЕЦ +
	|		ВЫБОР КОГДА Расчеты.ПредоплатаРегл < 0
	|			ТОГДА -Расчеты.ПредоплатаРегл
	|			ИНАЧЕ Расчеты.ПредоплатаРегл
	|		КОНЕЦ                                                     КАК СуммаРегл,
	|		ВЫБОР КОГДА Расчеты.ДолгУпр < 0
	|			ТОГДА -Расчеты.ДолгУпр
	|			ИНАЧЕ Расчеты.ДолгУпр
	|		КОНЕЦ +
	|		ВЫБОР КОГДА Расчеты.ПредоплатаУпр < 0
	|			ТОГДА -Расчеты.ПредоплатаУпр
	|			ИНАЧЕ Расчеты.ПредоплатаУпр
	|		КОНЕЦ                                                     КАК СуммаУпр
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК Расчеты
	|	ГДЕ
	|		Расчеты.Активность
	|		И Расчеты.Регистратор = &КорректировкаСсылка
	|		И ((Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				И (Расчеты.Предоплата > 0 ИЛИ Расчеты.Долг < 0))
	|			ИЛИ (Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				И (Расчеты.Долг > 0 ИЛИ Расчеты.Предоплата < 0)))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Расчеты.АналитикаУчетаПоПартнерам.Организация             КАК Организация,
	|		ЕСТЬNULL(Расчеты.ОбъектРасчетов.Подразделение,
	|			ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) КАК Подразделение,
	|		Расчеты.АналитикаУчетаПоПартнерам.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|		
	|		ВЫБОР КОГДА Расчеты.Долг < 0
	|				ТОГДА -Расчеты.Долг
	|			ИНАЧЕ Расчеты.Долг
	|		КОНЕЦ +
	|		ВЫБОР КОГДА Расчеты.Предоплата < 0
	|			ТОГДА -Расчеты.Предоплата
	|			ИНАЧЕ Расчеты.Предоплата
	|		КОНЕЦ                                                     КАК Сумма,
	|		ВЫБОР КОГДА Расчеты.ДолгРегл < 0
	|			ТОГДА -Расчеты.ДолгРегл
	|			ИНАЧЕ Расчеты.ДолгРегл
	|		КОНЕЦ +
	|		ВЫБОР КОГДА Расчеты.ПредоплатаРегл < 0
	|			ТОГДА -Расчеты.ПредоплатаРегл
	|			ИНАЧЕ Расчеты.ПредоплатаРегл
	|		КОНЕЦ                                                     КАК СуммаРегл,
	|		ВЫБОР КОГДА Расчеты.ДолгУпр < 0
	|			ТОГДА -Расчеты.ДолгУпр
	|			ИНАЧЕ Расчеты.ДолгУпр
	|		КОНЕЦ +
	|		ВЫБОР КОГДА Расчеты.ПредоплатаУпр < 0
	|			ТОГДА -Расчеты.ПредоплатаУпр
	|			ИНАЧЕ Расчеты.ПредоплатаУпр
	|		КОНЕЦ                                                     КАК СуммаУпр
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК Расчеты
	|	ГДЕ	
	|		Расчеты.Активность
	|		И Расчеты.Регистратор = &КорректировкаСсылка
	|		И ((Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				И (Расчеты.Предоплата > 0 ИЛИ Расчеты.Долг < 0))
	|			ИЛИ (Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				И (Расчеты.Долг > 0 ИЛИ Расчеты.Предоплата < 0)))) КАК ВложенныйЗапрос
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Организация,
	|	ВложенныйЗапрос.Подразделение,
	|	ВложенныйЗапрос.НаправлениеДеятельности
	|;
	|ВЫБРАТЬ
	|	&Период                                 КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)  КАК ВидДвижения,
	|	ВложенныйЗапрос.Организация             КАК Организация,
	|	ВложенныйЗапрос.Подразделение           КАК Подразделение,
	|	ВложенныйЗапрос.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	&СтатьяРасходов                         КАК СтатьяРасходов,
	|	ВложенныйЗапрос.Организация             КАК АналитикаРасходов,
	|	СУММА(ВложенныйЗапрос.Сумма)            КАК Сумма,
	|	СУММА(ВложенныйЗапрос.Сумма)            КАК СуммаБезНДС,
	|	СУММА(ВложенныйЗапрос.СуммаРегл)        КАК СуммаРегл,
	|	СУММА(ВЫБОР КОГДА &УправленческийУчетОрганизаций
	|				ТОГДА ВложенныйЗапрос.СуммаУпр
	|				ИНАЧЕ 0
	|		КОНЕЦ)                              КАК СуммаУпр,
	|	0                                       КАК ПостояннаяРазница,
	|	0                                       КАК ВременнаяРазница
	|ИЗ (ВЫБРАТЬ
	|		Расчеты.АналитикаУчетаПоПартнерам.Организация             КАК Организация,
	|		ЕСТЬNULL(Расчеты.ОбъектРасчетов.Подразделение,
	|			ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) КАК Подразделение,
	|		Расчеты.АналитикаУчетаПоПартнерам.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|		
	|		ВЫБОР КОГДА Расчеты.Долг < 0
	|			ТОГДА -Расчеты.Долг
	|			ИНАЧЕ Расчеты.Долг
	|		КОНЕЦ +
	|		ВЫБОР КОГДА Расчеты.Предоплата < 0
	|			ТОГДА -Расчеты.Предоплата
	|			ИНАЧЕ Расчеты.Предоплата
	|		КОНЕЦ                                                     КАК Сумма,
	|		ВЫБОР КОГДА Расчеты.ДолгРегл < 0
	|			ТОГДА -Расчеты.ДолгРегл
	|			ИНАЧЕ Расчеты.ДолгРегл
	|		КОНЕЦ +
	|		ВЫБОР КОГДА Расчеты.ПредоплатаРегл < 0
	|			ТОГДА -Расчеты.ПредоплатаРегл
	|			ИНАЧЕ Расчеты.ПредоплатаРегл
	|		КОНЕЦ                                                     КАК СуммаРегл,
	|		ВЫБОР КОГДА Расчеты.ДолгУпр < 0
	|			ТОГДА -Расчеты.ДолгУпр
	|			ИНАЧЕ Расчеты.ДолгУпр
	|		КОНЕЦ +
	|		ВЫБОР КОГДА Расчеты.ПредоплатаУпр < 0
	|			ТОГДА -Расчеты.ПредоплатаУпр
	|			ИНАЧЕ Расчеты.ПредоплатаУпр
	|		КОНЕЦ                                                     КАК СуммаУпр
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК Расчеты
	|	ГДЕ
	|		Расчеты.Активность
	|		И Расчеты.Регистратор = &КорректировкаСсылка
	|		И ((Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				И (Расчеты.Предоплата > 0 ИЛИ Расчеты.Долг < 0))
	|			ИЛИ (Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				И (Расчеты.Долг > 0 ИЛИ Расчеты.Предоплата < 0)))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Расчеты.АналитикаУчетаПоПартнерам.Организация             КАК Организация,
	|		ЕСТЬNULL(Расчеты.ОбъектРасчетов.Подразделение,
	|			ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) КАК Подразделение,
	|		Расчеты.АналитикаУчетаПоПартнерам.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|		
	|		ВЫБОР КОГДА Расчеты.Долг < 0
	|				ТОГДА -Расчеты.Долг
	|			ИНАЧЕ Расчеты.Долг
	|		КОНЕЦ +
	|		ВЫБОР КОГДА Расчеты.Предоплата < 0
	|			ТОГДА -Расчеты.Предоплата
	|			ИНАЧЕ Расчеты.Предоплата
	|		КОНЕЦ                                                     КАК Сумма,
	|		ВЫБОР КОГДА Расчеты.ДолгРегл < 0
	|			ТОГДА -Расчеты.ДолгРегл
	|			ИНАЧЕ Расчеты.ДолгРегл
	|		КОНЕЦ +
	|		ВЫБОР КОГДА Расчеты.ПредоплатаРегл < 0
	|			ТОГДА -Расчеты.ПредоплатаРегл
	|			ИНАЧЕ Расчеты.ПредоплатаРегл
	|		КОНЕЦ                                                     КАК СуммаРегл,
	|		ВЫБОР КОГДА Расчеты.ДолгУпр < 0
	|			ТОГДА -Расчеты.ДолгУпр
	|			ИНАЧЕ Расчеты.ДолгУпр
	|		КОНЕЦ +
	|		ВЫБОР КОГДА Расчеты.ПредоплатаУпр < 0
	|			ТОГДА -Расчеты.ПредоплатаУпр
	|			ИНАЧЕ Расчеты.ПредоплатаУпр
	|		КОНЕЦ                                                     КАК СуммаУпр
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК Расчеты
	|	ГДЕ	
	|		Расчеты.Активность
	|		И Расчеты.Регистратор = &КорректировкаСсылка
	|		И ((Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				И (Расчеты.Предоплата > 0 ИЛИ Расчеты.Долг < 0))
	|			ИЛИ (Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				И (Расчеты.Долг > 0 ИЛИ Расчеты.Предоплата < 0)))) КАК ВложенныйЗапрос
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Организация,
	|	ВложенныйЗапрос.Подразделение,
	|	ВложенныйЗапрос.НаправлениеДеятельности
	|";
	
	Результаты = Запрос.ВыполнитьПакет();
	
	Доходы = Результаты[0].Выгрузить();
	Расходы = Результаты[1].Выгрузить();
	
	ДвиженияДоходы = КорректировкаОбъект.Движения.ПрочиеДоходы;
	ДвиженияДоходы.Загрузить(Доходы);
	ДвиженияДоходы.Записать();
	
	ДвиженияРасходы = КорректировкаОбъект.Движения.ПрочиеРасходы;
	ДвиженияРасходы.Загрузить(Расходы);
	ДвиженияРасходы.Записать();
	
	КорректировкаОбъект.Записать();
	
	УправленческийУчетПроведениеСервер.ОбновитьДвиженияАктивовПассивов(КорректировкаОбъект.Ссылка, КорректировкаОбъект.Движения);
	
	АктивыПассивы = КорректировкаОбъект.Движения.ПрочиеАктивыПассивы.Выгрузить();
	АктивыПассивы.ЗаполнитьЗначения(НачалоТекущегоПериода, "Период");
	КорректировкаОбъект.Движения.ПрочиеАктивыПассивы.Загрузить(АктивыПассивы);
	КорректировкаОбъект.Движения.ПрочиеАктивыПассивы.Записать();
	
КонецПроцедуры

#КонецОбласти

// Возвращает структуру параметров необходимых для регистрации документа к отложенному распределению расчетов.
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * Регистратор - ДокументСсылка - Документ по которому необходимо зарегистрировать отложенные расчеты.
// * РасчетПлановФоновымЗаданием - Булево - Плановые расчеты заполняются фоновым заданием.
// * Загрузка - Булево - Значение флага ОбменДанными.Загрузка
// * РаспределениеСУчетомПриемников - Булево - При запуске распределения будут учтены связи объектов расчетов
// * ТаблицаИзменений - ТаблицаЗначений - Объекты расчетов по которым есть изменения:
//                                        ** ПорядокФакт - Строка.
//                                        ** ПорядокПлан - Строка.
//                                        ** АналитикаУчетаПоПартнерам - СправочникСсылка.КлючиАналитикиУчетаПоПартнерам.
//                                        ** ОбъектРасчетов - СправочникСсылка.ОбъектыРасчетов.
//                                        ** ПоДаннымОбъектаРасчетовИсточника - Булево - Истина, если движение заполняется из приемника.
//                                        ** ВалютаРасчетов - СправочникСсылка.Валюты.
Функция ПараметрыРаспределенияРасчетов() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Регистратор", Неопределено);
	Результат.Вставить("Загрузка", Ложь);
	Результат.Вставить("ТаблицаИзменений", Неопределено);
	Результат.Вставить("РасчетПлановФоновымЗаданием", Ложь);
	Результат.Вставить("РаспределениеСУчетомПриемников", Ложь);
	
	Возврат Результат;
	
КонецФункции

// Регистрирует объекты расчетов для отложенного расчета по срокам и планом
// 
// Параметры:
// 	Параметры - см. ПараметрыРаспределенияРасчетов
Процедура ЗарегистрироватьИзмененияКОтложенномуРаспределению(Параметры) Экспорт
	
	НачатПереходНаНовуюАрхитектуру = Константы.НачатПереходНаНовуюАрхитектуруВзаиморасчетов.Получить();
	Если НЕ Константы.НоваяАрхитектураВзаиморасчетов.Получить() И НЕ НачатПереходНаНовуюАрхитектуру Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ (Параметры.Загрузка ИЛИ НачатПереходНаНовуюАрхитектуру ИЛИ Параметры.РасчетПлановФоновымЗаданием) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаИзменений Из Параметры.ТаблицаИзменений Цикл
		
		НаборЗаписей = РегистрыСведений.ЗаданияКРаспределениюРасчетов.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.ТипРасчетов.Установить(СтрокаИзменений.ТипРасчетов);
		НаборЗаписей.Отбор.АналитикаУчетаПоПартнерам.Установить(СтрокаИзменений.АналитикаУчетаПоПартнерам);
		НаборЗаписей.Отбор.ОбъектРасчетов.Установить(СтрокаИзменений.ОбъектРасчетов);
		НаборЗаписей.Отбор.Валюта.Установить(СтрокаИзменений.ВалютаРасчетов);
		
		Если СтрокаИзменений.ПорядокПлан = "" Тогда
			ДатаПлан = Дата(1,1,1);
		Иначе
			ДатаПлан = Дата(Лев(СтрокаИзменений.ПорядокПлан, 8));
		КонецЕсли;
		
		Если Параметры.РасчетПлановФоновымЗаданием Тогда
			ДатаФакт = Дата(3000,1,1);
		ИначеЕсли СтрокаИзменений.ПорядокФакт = "" Тогда
			ДатаФакт = Дата(1,1,1);
		Иначе
			ДатаФакт = Дата(Лев(СтрокаИзменений.ПорядокФакт, 8));
		КонецЕсли;
		
		НаборЗаписей.Отбор.ДатаПересчетаПлан.Установить(ДатаПлан);
		НаборЗаписей.Отбор.ДатаПересчета.Установить(ДатаФакт);
		НаборЗаписей.Отбор.Документ.Установить(Параметры.Регистратор);
		
		НовСтр = НаборЗаписей.Добавить();
		НовСтр.ТипРасчетов = СтрокаИзменений.ТипРасчетов;
		НовСтр.АналитикаУчетаПоПартнерам = СтрокаИзменений.АналитикаУчетаПоПартнерам;
		НовСтр.ОбъектРасчетов = СтрокаИзменений.ОбъектРасчетов;
		НовСтр.Валюта = СтрокаИзменений.ВалютаРасчетов;
		НовСтр.ДатаПересчета = ДатаФакт;
		НовСтр.ДатаПересчетаПлан = ДатаПлан;
		НовСтр.Документ = Параметры.Регистратор;
		НовСтр.Приоритет = ?(СтрокаИзменений.ПоДаннымОбъектаРасчетовИсточника, 2, 1);
		НовСтр.КоличествоДокументов = 1;
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет распределение расчетов по текущим заданиям к распределению в регистре ЗаданияКРаспределениюРасчетов
// 
// Параметры:
// 	Параметры - Структура, Неопределено - В структуре передается таблица заданий для распределения:
// 	 *ДанныеКОтработке - см. ДанныеДляОбработки.
// 	АдресРезультата - Строка - адрес временного хранилища, в которое будет помещен результат работы процедуры.
Процедура ВыполнитьОтложенноеРаспределение(Параметры = Неопределено, АдресРезультата = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	Если НЕ Константы.НоваяАрхитектураВзаиморасчетов.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры <> Неопределено И Параметры.Свойство("ДанныеКОбработке") Тогда
		ДанныеКОбработке = Параметры.ДанныеКОбработке;
	Иначе
		ПараметрыДанных = ПараметрыДанныхМногопоточнойОбработки();
		ДанныеКОбработке = ДанныеДляОбработки(ПараметрыДанных).Данные;
	КонецЕсли;
	
	ТаблицаОбъектовОплаты = Новый ТаблицаЗначений;
	ТаблицаОбъектовОплаты.Колонки.Добавить("ОбъектОплаты", Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.ОбъектРасчетов.Тип));
	ТаблицаОбъектовОплаты.Колонки.Добавить("ОбъектРасчетов", Новый ОписаниеТипов("СправочникСсылка.ОбъектыРасчетов"));
	ТаблицаОбъектовОплаты.Колонки.Добавить("ЭтоРасчетыСКлиентами", Новый ОписаниеТипов("Булево"));
	
	КвалификаторСтроки = Новый КвалификаторыСтроки(40);
	ДанныеКОбработке.Колонки.Добавить("ПорядокФакт", Новый ОписаниеТипов("Строка", , , , КвалификаторСтроки));
	ДанныеКОбработке.Колонки.Добавить("ПорядокПлан", Новый ОписаниеТипов("Строка", , , , КвалификаторСтроки));
	ДанныеКОбработке.Колонки.Добавить("ПорядокОперации", Новый ОписаниеТипов("Строка", , , , КвалификаторСтроки));
	
	Для Каждого СтрокаТаблицы Из ДанныеКОбработке Цикл
		
		СтрокаТаблицы.ПорядокФакт = Порядок(СтрокаТаблицы.ДатаПересчета,"", Тип("ДокументСсылка.КорректировкаРегистров"),"1","21");
		СтрокаТаблицы.ПорядокПлан = Порядок(СтрокаТаблицы.ДатаПересчетаПлан,"", Тип("ДокументСсылка.КорректировкаРегистров"),"1","21");
		СтрокаТаблицы.ПоДаннымОбъектаРасчетовИсточника = СтрокаТаблицы.Приоритет = 2;
		
	КонецЦикла;
	
	ПараметрыРаспределения = ПараметрыРаспределенияРасчетов();
	ПараметрыРаспределения.РаспределениеСУчетомПриемников = Истина;
	ПараметрыРаспределения.ТаблицаИзменений = ДанныеКОбработке;
	
	НачатьТранзакцию();
	
	Попытка
		
		ЗаполнитьОперативныеВзаиморасчетыПоТаблице(ПараметрыРаспределения);
		
		Для Каждого Запись Из ДанныеКОбработке Цикл
			
			ОтметитьВыполнениеЗадания(Запись,"Документ");
			
			Если ЗначениеЗаполнено(Запись.Объект) Тогда
				НовСтр = ТаблицаОбъектовОплаты.Добавить();
				НовСтр.ЭтоРасчетыСКлиентами = Запись.ЭтоРасчетыСКлиентами;
				НовСтр.ОбъектРасчетов = Запись.ОбъектРасчетов;
				НовСтр.ОбъектОплаты = Запись.Объект;
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки;
	
	// Для определения состояний заказов используются данные распределенных расчетов
	ОтразитьСостоянияЗаказов(ДанныеКОбработке);
	
	РегистрыСведений.ГрафикПлатежей.РассчитатьГрафикПлатежейПоРасчетамСКлиентами(
				ТаблицаОбъектовОплаты.Скопировать(Новый Структура("ЭтоРасчетыСКлиентами", Истина)));
	РегистрыСведений.ГрафикПлатежей.РассчитатьГрафикПлатежейПоРасчетамСПоставщиками(
				ТаблицаОбъектовОплаты.Скопировать(Новый Структура("ЭтоРасчетыСКлиентами", Ложь)));
КонецПроцедуры

// Запускает распределение плановых расчетов по текущим заданиям к распределению в регистре ЗаданияКРаспределениюРасчетов
// в фоновом задании.
// 
// Параметры:
// 	РаспределитьФактическиеРасчеты - Булево - Истина, запуск распределения фактических расчетов
//
Процедура ЗапуститьОтложенноеРаспределениеВзаиморасчетов(РаспределитьФактическиеРасчеты = Ложь) Экспорт
	
	Если (Константы.РаспределятьПлановыеРасчетыФоновымЗаданием.Получить() ИЛИ РаспределитьФактическиеРасчеты)
		И НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая()
		И НЕ МенеджерОтложенногоРаспределенияВзаиморасчетовАктивен() Тогда
		
		ПараметрыЭкспортнойПроцедуры = Новый Структура("РаспределитьФактическиеРасчеты", РаспределитьФактическиеРасчеты);
		
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Неопределено);
		ПараметрыВыполнения.ОжидатьЗавершение = 0;
		Если РаспределитьФактическиеРасчеты Тогда
			ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Выполняется фоновое распределение фактических расчетов'");
		Иначе
			ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Выполняется фоновое распределение планов по расчетам'");
		КонецЕсли;
		ПараметрыВыполнения.КлючФоновогоЗадания = ИмяМетодаОтложенногоРаспределенияВзаиморасчетов();
		
		ДлительныеОперации.ВыполнитьВФоне(ИмяМетодаОтложенногоРаспределенияВзаиморасчетов(), ПараметрыЭкспортнойПроцедуры, ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Запускает распределение фактических расчетов по текущим заданиям к распределению в регистре ЗаданияКРаспределениюРасчетов
// в фоновом задании.
//
// Метод предназначен для вызова из регламентного задания.
//
Процедура ЗапуститьОтложенноеРаспределениеФактическихВзаиморасчетов() Экспорт
	
	ЗапуститьОтложенноеРаспределениеВзаиморасчетов(Истина);
	
КонецПроцедуры

// Запускает отложенное распределение взаиморасчетов по срокам
Процедура ПослеОбновленияРегистровВзаиморасчетов() Экспорт
	
	Если ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Неопределено, Метаданные.РегистрыНакопления.РасчетыСКлиентами)
			И ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Неопределено, Метаданные.РегистрыНакопления.РасчетыСКлиентамиПланОплат)
			И ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Неопределено, Метаданные.РегистрыНакопления.РасчетыСКлиентамиПланОтгрузок)
			И ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Неопределено, Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоСрокам)
			И ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Неопределено, Метаданные.РегистрыНакопления.РасчетыСПоставщиками)
			И ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Неопределено, Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПланОплат)
			И ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Неопределено, Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПланПоставок)
			И ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Неопределено, Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоСрокам)
			И ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Неопределено, Метаданные.РегистрыСведений.ВспомогательнаяИнформацияВзаиморасчетов)
			И НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая()
		Тогда
		ЗапуститьОтложенноеРаспределениеВзаиморасчетов(Истина);
		ИспользоватьРегламентноеЗаданиеФактическоеРаспределение(Истина);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет активность фонового задания по распределению расчетов.
//
// Возвращаемое значение:
//   Булево - Истина, если есть активные задания.
//
Функция МенеджерОтложенногоРаспределенияВзаиморасчетовАктивен() Экспорт
	
	ИмяМетодаЗадания = ИмяМетодаОтложенногоРаспределенияВзаиморасчетов();
	
	ОтборЗаданий = Новый Структура;
	ОтборЗаданий.Вставить("Ключ", ИмяМетодаЗадания);
	ОтборЗаданий.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(ОтборЗаданий);
	
	Возврат АктивныеЗадания.Количество() > 0;
	
КонецФункции  

// Пустые ссылки на заказы.
// 
// Возвращаемое значение:
//  Массив из Тип - Пустые ссылки на заказы
Функция ПустыеСсылкиНаЗаказы() Экспорт
	
	ПустыеСсылкиНаЗаказы = Новый Массив;
	ПустыеСсылкиНаЗаказы.Добавить(Неопределено);
	ПустыеСсылкиНаЗаказы.Добавить(Документы.ЗаказКлиента.ПустаяСсылка());
	ПустыеСсылкиНаЗаказы.Добавить(Документы.ЗаявкаНаВозвратТоваровОтКлиента.ПустаяСсылка());
	ПустыеСсылкиНаЗаказы.Добавить(Документы.ЗаказПоставщику.ПустаяСсылка());
	
	
	
	Возврат ПустыеСсылкиНаЗаказы;
КонецФункции

Функция СписокТиповУточняющихПланы()
	СписокТиповРегистраторовПланов = Новый СписокЗначений;

	СписокТиповРегистраторовПланов.Добавить(Тип("ДокументСсылка.АктВыполненныхРабот"));
	СписокТиповРегистраторовПланов.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
	СписокТиповРегистраторовПланов.Добавить(Тип("ДокументСсылка.ОтчетКомитентуОЗакупках"));
	
	СписокТиповРегистраторовПланов.Добавить(Тип("ДокументСсылка.ПриобретениеТоваровУслуг"));
	
	//Уточняют график договора
	СписокТиповРегистраторовПланов.Добавить(Тип("ДокументСсылка.ВыкупВозвратнойТарыКлиентом"));
	СписокТиповРегистраторовПланов.Добавить(Тип("ДокументСсылка.ВыкупТоваровХранителем"));
	СписокТиповРегистраторовПланов.Добавить(Тип("ДокументСсылка.РеализацияУслугПрочихАктивов"));
	
	СписокТиповРегистраторовПланов.Добавить(Тип("ДокументСсылка.Бронирование"));
	СписокТиповРегистраторовПланов.Добавить(Тип("ДокументСсылка.ВыкупВозвратнойТарыУПоставщика"));
	СписокТиповРегистраторовПланов.Добавить(Тип("ДокументСсылка.ВыкупПринятыхНаХранениеТоваров"));
	СписокТиповРегистраторовПланов.Добавить(Тип("ДокументСсылка.ПриобретениеУслугПрочихАктивов"));
	СписокТиповРегистраторовПланов.Добавить(Тип("ДокументСсылка.ОтчетОСписанииТоваровСХранения"));
	СписокТиповРегистраторовПланов.Добавить(Тип("ДокументСсылка.ТаможеннаяДекларацияИмпорт"));
	
	Возврат СписокТиповРегистраторовПланов;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПолучениеДанных

//Формирует временные таблицы остатков и записей для распределения
Процедура СформироватьВТДанныхРегистров(Запрос, ГлобальныеПеременные)
	
	ТекстЗапросаОсновныеПараметрыРасчета = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОсновныеПараметрыРасчета.ОбъектРасчетов КАК ПараметрОбъектРасчетов,
	|	ОсновныеПараметрыРасчета.АналитикаУчетаПоПартнерам КАК ПараметрАналитикаУчетаПоПартнерам,
	|	ОсновныеПараметрыРасчета.ВалютаРасчетов КАК ПараметрВалютаРасчетов,
	|	ОсновныеПараметрыРасчета.РассчитыватьПлан КАК ПараметрРассчитыватьПлан,
	|	ОсновныеПараметрыРасчета.Порядок КАК ПараметрПорядок,
	|	ОсновныеПараметрыРасчета.ЭтоРасчетыСКлиентами КАК ПараметрЭтоРасчетыСКлиентами,
	|	ОсновныеПараметрыРасчета.НачальноеЗаполнение КАК ПараметрНачальноеЗаполнение,
	|	ОсновныеПараметрыРасчета.ГрафикВДоговоре КАК ПараметрГрафикВДоговоре,
	|	ОсновныеПараметрыРасчета.ГрафикИсполненияДоговора КАК ПараметрГрафикИсполненияДоговора,
	|	ОсновныеПараметрыРасчета.ДатаПереоценки КАК ПараметрДатаПереоценки,
	|	ОсновныеПараметрыРасчета.ВалютаРегламентированногоУчета КАК ПараметрВалютаРегламентированногоУчета,
	|	ОсновныеПараметрыРасчета.НачалоДняПорядка КАК ПараметрНачалоДняПорядка,
	|	ОсновныеПараметрыРасчета.НачалоДняПорядкаФакт КАК ПараметрНачалоДняПорядкаФакт,
	|	ОсновныеПараметрыРасчета.ТипРасчетов КАК ПараметрТипРасчетов,
	|	ОсновныеПараметрыРасчета.Регистратор КАК ПараметрРегистратор
	|ПОМЕСТИТЬ ВтОсновныеПараметрыРасчета
	|ИЗ
	|	&ОсновныеПараметрыРасчета КАК ОсновныеПараметрыРасчета
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПараметрАналитикаУчетаПоПартнерам,
	|	ПараметрОбъектРасчетов,
	|	ПараметрВалютаРасчетов";
	
	МассивТекстов = Новый Массив;
	МассивТекстов.Добавить("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.Период КАК Период,
	|	Расчеты.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТРасчетыСКлиентамиПоСрокамРегистраторы
	|ИЗ РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК Расчеты
	|ГДЕ
	|	Расчеты.АналитикаУчетаПоПартнерамПриемник В (&СписокАналитикУчетаПоПартнерам)
	|");

	МассивТекстов.Добавить("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.Период КАК Период,
	|	Расчеты.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТРасчетыСПоставщикамиПоСрокамРегистраторы
	|ИЗ РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК Расчеты
	|ГДЕ
	|	Расчеты.АналитикаУчетаПоПартнерамПриемник В (&СписокАналитикУчетаПоПартнерам)
	|");
	
	ТекстЗапросаВтТипыПриемников = "";
	
	Если ГлобальныеПеременные.ЕстьЗаписиРасчетовСКлиентами Тогда
		ТекстЗапросаВтТипыПриемников = "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	РасчетыДвижения.Регистратор КАК Регистратор,
			|	РасчетыДвижения.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
			|	РасчетыДвижения.ОбъектРасчетов КАК ОбъектРасчетов,
			|	РасчетыДвижения.Валюта КАК Валюта,
			|	ВЫБОР
			|		КОГДА РасчетыДвижения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И РасчетыДвижения.Сумма > 0 
			|			ИЛИ РасчетыДвижения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И РасчетыДвижения.Сумма < 0 
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЭтоОтгрузка
			|ПОМЕСТИТЬ ВтТипыПриемников
			|ИЗ
			|	РасчетыСКлиентамиДвижения КАК РасчетыДвижения
			|ГДЕ
			|	РасчетыДвижения.ПоДаннымОбъектаРасчетовИсточника
			|";
	КонецЕсли;
	
	Если ГлобальныеПеременные.ЕстьЗаписиРасчетовСПоставщиками Тогда
		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	РасчетыДвижения.Регистратор КАК Регистратор,
			|	РасчетыДвижения.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
			|	РасчетыДвижения.ОбъектРасчетов КАК ОбъектРасчетов,
			|	РасчетыДвижения.Валюта КАК Валюта,
			|	ВЫБОР
			|		КОГДА РасчетыДвижения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И РасчетыДвижения.Сумма < 0 
			|			ИЛИ РасчетыДвижения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И РасчетыДвижения.Сумма > 0 
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЭтоОтгрузка
			|ПОМЕСТИТЬ ВтТипыПриемников
			|ИЗ
			|	РасчетыСПоставщикамиДвижения КАК РасчетыДвижения
			|ГДЕ
			|	РасчетыДвижения.ПоДаннымОбъектаРасчетовИсточника
			|";
		Если ГлобальныеПеременные.ЕстьЗаписиРасчетовСКлиентами Тогда
			ТекстЗапросаВтТипыПриемников = ТекстЗапросаВтТипыПриемников + ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении();
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ВтТипыПриемников", "");
		КонецЕсли;
		ТекстЗапросаВтТипыПриемников = ТекстЗапросаВтТипыПриемников + ТекстЗапроса;
	КонецЕсли;
	МассивТекстов.Добавить(ТекстЗапросаВтТипыПриемников);
	
	ТекстЗапросаРегистраторы = СтрСоединить(МассивТекстов,";");
	
	//Данные расчетов до начала пересчета.
	Если ГлобальныеПеременные.ЕстьЗаписиРасчетовСКлиентами Тогда
		ТекстЗапросаРасчетыСКлиентамиПоСрокамОстатки = ТекстЗапросаРасчетыПоСрокамОстатки(ГлобальныеПеременные, Истина,
			"ВТРасчетыПоСрокамОстаткиКлиенты");
	КонецЕсли;

	Если ГлобальныеПеременные.ЕстьЗаписиРасчетовСПоставщиками Тогда
		ТекстЗапросаРасчетыСПоставщикамиПоСрокамОстатки = ТекстЗапросаРасчетыПоСрокамОстатки(ГлобальныеПеременные,
			Ложь, "ВТРасчетыПоСрокамОстаткиПоставщики");
	КонецЕсли;
	
	//Движения по расчетам
	Если ГлобальныеПеременные.ЕстьЗаписиРасчетовСКлиентами Тогда
		ТекстЗапросаРасчетыСКлиентамиДвижения = ТекстЗапросаРасчетыДвижения(Истина, "РасчетыСКлиентамиДвижения");
	КонецЕсли;
	
	Если ГлобальныеПеременные.ЕстьЗаписиРасчетовСПоставщиками Тогда
		ТекстЗапросаРасчетыСПоставщикамиДвижения = ТекстЗапросаРасчетыДвижения(Ложь, "РасчетыСПоставщикамиДвижения")
	КонецЕсли;
	
	Если ГлобальныеПеременные.ТребуетсяРассчитыватьПлан Тогда
		
		//Планы оплат.
		Если ГлобальныеПеременные.ЕстьЗаписиРасчетовСКлиентами Тогда
			ТекстЗапросаРасчетыСКлиентомПланОплатОстатки = ТекстЗапросаРасчетыПланОплатОстатки(ГлобальныеПеременные,
				Истина, "ВТРасчетыПланОплатОстаткиКлиенты");
		КонецЕсли;

		Если ГлобальныеПеременные.ЕстьЗаписиРасчетовСПоставщиками Тогда
			ТекстЗапросаРасчетыСПоставщикомПланОплатОстатки = ТекстЗапросаРасчетыПланОплатОстатки(ГлобальныеПеременные,
				Ложь, "ВТРасчетыПланОплатОстаткиПоставщики");
		КонецЕсли;
		
		//Планы отгрузок.
		Если ГлобальныеПеременные.ЕстьЗаписиРасчетовСКлиентами Тогда
			ТекстЗапросаРасчетыСКлиентомПланОтгрузокПоставокОстатки = ТекстЗапросаРасчетыПланОтгрузокПоставокОстатки(
				ГлобальныеПеременные, Истина, "ВТРасчетыПланОтгрузокПоставокОстаткиКлиенты");
		КонецЕсли;

		Если ГлобальныеПеременные.ЕстьЗаписиРасчетовСПоставщиками Тогда
			ТекстЗапросаРасчетыСПоставщикомПланОтгрузокПоставокОстатки = ТекстЗапросаРасчетыПланОтгрузокПоставокОстатки(
				ГлобальныеПеременные, Ложь, "ВТРасчетыПланОтгрузокПоставокОстаткиПоставщики");
		КонецЕсли;
		
	КонецЕсли;
	
	Тексты = Новый Массив;
	Тексты.Добавить(ТекстЗапросаОсновныеПараметрыРасчета);
	
	Если ГлобальныеПеременные.ЕстьЗаписиРасчетовСКлиентами Тогда 
		Тексты.Добавить(ТекстЗапросаРасчетыСКлиентамиПоСрокамОстатки);
		Тексты.Добавить(ТекстЗапросаРасчетыСКлиентамиДвижения);
	КонецЕсли;
	
	Если ГлобальныеПеременные.ЕстьЗаписиРасчетовСПоставщиками Тогда
		Тексты.Добавить(ТекстЗапросаРасчетыСПоставщикамиПоСрокамОстатки);
		Тексты.Добавить(ТекстЗапросаРасчетыСПоставщикамиДвижения);
	КонецЕсли;
	
	Тексты.Добавить(ТекстЗапросаРегистраторы);
	
	Если ГлобальныеПеременные.ТребуетсяРассчитыватьПлан И ГлобальныеПеременные.ЕстьЗаписиРасчетовСКлиентами Тогда
		Тексты.Добавить(ТекстЗапросаРасчетыСКлиентомПланОплатОстатки);
		Тексты.Добавить(ТекстЗапросаРасчетыСКлиентомПланОтгрузокПоставокОстатки);
	КонецЕсли;
	
	Если ГлобальныеПеременные.ТребуетсяРассчитыватьПлан И ГлобальныеПеременные.ЕстьЗаписиРасчетовСПоставщиками Тогда
		Тексты.Добавить(ТекстЗапросаРасчетыСПоставщикомПланОплатОстатки);
		Тексты.Добавить(ТекстЗапросаРасчетыСПоставщикомПланОтгрузокПоставокОстатки);
	КонецЕсли;
	
	ТекстЗапроса = СтрСоединить(Тексты, ОбщегоНазначения.РазделительПакетаЗапросов());
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ТекстЗапросаРасчетыПоСрокамОстатки(ГлобальныеПеременные, РасчетыСКлиентами = Истина, ИмяТаблицы = "")

	//Данные расчетов до начала пересчета.
	
	МассивТекстовПодзапроса = Новый Массив;
	
	ТекстПодзапросаОстатки = "
	|ВЫБРАТЬ
	|	РасчетыПоСрокамОстатки.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	РасчетыПоСрокамОстатки.ОбъектРасчетов КАК ОбъектРасчетов,
	|	РасчетыПоСрокамОстатки.Валюта КАК Валюта,
	|	РасчетыПоСрокамОстатки.РасчетныйДокумент КАК РасчетныйДокумент,
	|	РасчетыПоСрокамОстатки.ДатаПлановогоПогашения КАК ДатаПлановогоПогашения,
	|	РасчетыПоСрокамОстатки.ДатаВозникновения КАК ДатаВозникновения,
	|	РасчетыПоСрокамОстатки.ПредоплатаОстаток КАК ПредоплатаОстаток,
	|	РасчетыПоСрокамОстатки.ПредоплатаРеглОстаток КАК ПредоплатаРеглОстаток,
	|	РасчетыПоСрокамОстатки.ПредоплатаУпрОстаток КАК ПредоплатаУпрОстаток,
	|	РасчетыПоСрокамОстатки.ДолгОстаток КАК ДолгОстаток,
	|	РасчетыПоСрокамОстатки.ДолгРеглОстаток КАК ДолгРеглОстаток,
	|	РасчетыПоСрокамОстатки.ДолгУпрОстаток КАК ДолгУпрОстаток,
	|	0 КАК ПредоплатаОборот,
	|	0 КАК ПредоплатаРеглОборот,
	|	0 КАК ПредоплатаУпрОборот,
	|	0 КАК ДолгОборот,
	|	0 КАК ДолгРеглОборот,
	|	0 КАК ДолгУпрОборот
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоСрокам.Остатки(&НачалоДняПорядкаМинимальный, (АналитикаУчетаПоПартнерам,
	|		ОбъектРасчетов, Валюта) В
	|		(ВЫБРАТЬ
	|			ВтПараметры.ПараметрАналитикаУчетаПоПартнерам,
	|			ВтПараметры.ПараметрОбъектРасчетов,
	|			ВтПараметры.ПараметрВалютаРасчетов
	|		ИЗ
	|			ВтОсновныеПараметрыРасчета КАК ВтПараметры
	|		ГДЕ
	|			ВтПараметры.ПараметрЭтоРасчетыСКлиентами = &РасчетыСКлиентами)) КАК РасчетыПоСрокамОстатки";
	
	МассивТекстовПодзапроса.Добавить(ТекстПодзапросаОстатки);
	
	Если ГлобальныеПеременные.НачалоДняПорядкаЕстьРазличные Тогда
		
		ТекстПодзапросаДвижения = "
		|ВЫБРАТЬ
		|	РасчетыПоСрокам.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|	РасчетыПоСрокам.ОбъектРасчетов КАК ОбъектРасчетов,
		|	РасчетыПоСрокам.Валюта КАК Валюта,
		|	РасчетыПоСрокам.РасчетныйДокумент КАК РасчетныйДокумент,
		|	РасчетыПоСрокам.ДатаПлановогоПогашения КАК ДатаПлановогоПогашения,
		|	РасчетыПоСрокам.ДатаВозникновения КАК ДатаВозникновения,
		|	СУММА(0) КАК ПредоплатаОстаток,
		|	СУММА(0) КАК ПредоплатаРеглОстаток,
		|	СУММА(0) КАК ПредоплатаУпрОстаток,
		|	СУММА(0) КАК ДолгОстаток,
		|	СУММА(0) КАК ДолгРеглОстаток,
		|	СУММА(0) КАК ДолгУпрОстаток,
		|	СУММА(ВЫБОР
		|		КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|			ТОГДА РасчетыПоСрокам.Предоплата
		|		ИНАЧЕ -РасчетыПоСрокам.Предоплата
		|	КОНЕЦ) КАК ПредоплатаОборот,
		|	СУММА(ВЫБОР
		|		КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|			ТОГДА РасчетыПоСрокам.ПредоплатаРегл
		|		ИНАЧЕ -РасчетыПоСрокам.ПредоплатаРегл
		|	КОНЕЦ) КАК ПредоплатаРеглОборот,
		|	СУММА(ВЫБОР
		|		КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|			ТОГДА РасчетыПоСрокам.ПредоплатаУпр
		|		ИНАЧЕ -РасчетыПоСрокам.ПредоплатаУпр
		|	КОНЕЦ) КАК ПредоплатаУпрОборот,
		|	СУММА(ВЫБОР
		|		КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|			ТОГДА РасчетыПоСрокам.Долг
		|		ИНАЧЕ -РасчетыПоСрокам.Долг
		|	КОНЕЦ) КАК ДолгОборот,
		|	СУММА(ВЫБОР
		|		КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|			ТОГДА РасчетыПоСрокам.ДолгРегл
		|		ИНАЧЕ -РасчетыПоСрокам.ДолгРегл
		|	КОНЕЦ) КАК ДолгРеглОборот,
		|	СУММА(ВЫБОР
		|		КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|			ТОГДА РасчетыПоСрокам.ДолгУпр
		|		ИНАЧЕ -РасчетыПоСрокам.ДолгУпр
		|	КОНЕЦ) КАК ДолгУпрОборот
		|ИЗ
		|	ВтОсновныеПараметрыРасчета КАК ВтПараметры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыПоСрокам
		|		ПО ВтПараметры.ПараметрОбъектРасчетов = РасчетыПоСрокам.ОбъектРасчетов
		|		И ВтПараметры.ПараметрАналитикаУчетаПоПартнерам = РасчетыПоСрокам.АналитикаУчетаПоПартнерам
		|		И ВтПараметры.ПараметрВалютаРасчетов = РасчетыПоСрокам.Валюта
		|		И РасчетыПоСрокам.Активность
		|		И РасчетыПоСрокам.Период >= &НачалоДняПорядкаМинимальный
		|		И РасчетыПоСрокам.Период < ВтПараметры.ПараметрНачалоДняПорядка
		|		И ВтПараметры.ПараметрЭтоРасчетыСКлиентами = &РасчетыСКлиентами
		|СГРУППИРОВАТЬ ПО
		|	РасчетыПоСрокам.АналитикаУчетаПоПартнерам,
		|	РасчетыПоСрокам.ОбъектРасчетов,
		|	РасчетыПоСрокам.Валюта,
		|	РасчетыПоСрокам.РасчетныйДокумент,
		|	РасчетыПоСрокам.ДатаПлановогоПогашения,
		|	РасчетыПоСрокам.ДатаВозникновения";
		
		МассивТекстовПодзапроса.Добавить(ТекстПодзапросаДвижения);
		
	КонецЕсли;
	
	ТекстПодзапроса = СтрСоединить(МассивТекстовПодзапроса, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ТекстЗапросаРасчетыПоСрокамОстатки = "
	|ВЫБРАТЬ
	|	ОстаткиИОбороты.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ОстаткиИОбороты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ОстаткиИОбороты.Валюта КАК Валюта,
	|	ОстаткиИОбороты.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ОстаткиИОбороты.ДатаПлановогоПогашения КАК ДатаПлановогоПогашения,
	|	ОстаткиИОбороты.ДатаВозникновения КАК ДатаВозникновения,
	|	СУММА(ОстаткиИОбороты.ПредоплатаОстаток + ОстаткиИОбороты.ПредоплатаОборот) КАК ПредоплатаОстаток,
	|	СУММА(ОстаткиИОбороты.ПредоплатаРеглОстаток + ОстаткиИОбороты.ПредоплатаРеглОборот) КАК ПредоплатаРеглОстаток,
	|	СУММА(ОстаткиИОбороты.ПредоплатаУпрОстаток + ОстаткиИОбороты.ПредоплатаУпрОборот) КАК ПредоплатаУпрОстаток,
	|	СУММА(ОстаткиИОбороты.ДолгОстаток + ОстаткиИОбороты.ДолгОборот) КАК ДолгОстаток,
	|	СУММА(ОстаткиИОбороты.ДолгРеглОстаток + ОстаткиИОбороты.ДолгРеглОборот) КАК ДолгРеглОстаток,
	|	СУММА(ОстаткиИОбороты.ДолгУпрОстаток + ОстаткиИОбороты.ДолгУпрОборот) КАК ДолгУпрОстаток
	|ПОМЕСТИТЬ ВТ_Остатки
	|ИЗ
	|	&ТекстПодзапроса КАК ОстаткиИОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиИОбороты.ОбъектРасчетов,
	|	ОстаткиИОбороты.АналитикаУчетаПоПартнерам,
	|	ОстаткиИОбороты.Валюта,
	|	ОстаткиИОбороты.РасчетныйДокумент,
	|	ОстаткиИОбороты.ДатаПлановогоПогашения,
	|	ОстаткиИОбороты.ДатаВозникновения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРасчетов,
	|	АналитикаУчетаПоПартнерам,
	|	Валюта,
	|	РасчетныйДокумент
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыПоСрокамОстатки.ОбъектРасчетов КАК ОбъектРасчетов,
	|	РасчетыПоСрокамОстатки.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	РасчетыПоСрокамОстатки.Валюта КАК ВалютаРасчетов,
	|	РасчетыПоСрокамОстатки.РасчетныйДокумент КАК РасчетныйДокумент,
	|	РасчетыПоСрокамОстатки.ДатаВозникновения КАК Период,
	|	РасчетыПоСрокамОстатки.ДатаПлановогоПогашения КАК ДатаПлановогоПогашения,
	|	РасчетыПоСрокамОстатки.ДатаВозникновения КАК ДатаВозникновения,
	|	МИНИМУМ(ВспомогательнаяИнформация.ПорядокЗачета) КАК ПорядокЗачета,
	|	МИНИМУМ(ВспомогательнаяИнформация.ПорядокОперации) КАК ПорядокОперации,
	|	МАКСИМУМ(ВспомогательнаяИнформация.СвязанныйДокумент) КАК СвязанныйДокумент,
	|	МАКСИМУМ(ВспомогательнаяИнформация.ВалютаДокумента) КАК ВалютаДокумента,
	|	МАКСИМУМ(ВспомогательнаяИнформация.СтатьяДвиженияДенежныхСредств) КАК СтатьяДвиженияДенежныхСредств,
	|	МАКСИМУМ(ВспомогательнаяИнформация.ХозяйственнаяОперация) КАК ХозяйственнаяОперация,
	|	МАКСИМУМ(ВспомогательнаяИнформация.ДокументРегистратор) КАК ДокументРегистратор,
	|	РасчетыПоСрокамОстатки.ПредоплатаОстаток КАК Предоплата,
	|	РасчетыПоСрокамОстатки.ПредоплатаРеглОстаток КАК ПредоплатаРегл,
	|	РасчетыПоСрокамОстатки.ПредоплатаУпрОстаток КАК ПредоплатаУпр,
	|	РасчетыПоСрокамОстатки.ДолгОстаток КАК Долг,
	|	РасчетыПоСрокамОстатки.ДолгРеглОстаток КАК ДолгРегл,
	|	РасчетыПоСрокамОстатки.ДолгУпрОстаток КАК ДолгУпр,
	|	РасчетыПоСрокамОстатки.ПредоплатаОстаток <> 0 КАК ЕстьПредоплата,
	|	РасчетыПоСрокамОстатки.ДолгОстаток <> 0 КАК ЕстьДолг
	|ПОМЕСТИТЬ ВТРасчетыПоСрокамОстатки
	|ИЗ
	|	ВТ_Остатки КАК РасчетыПоСрокамОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК ВспомогательнаяИнформация
	|			ПО РасчетыПоСрокамОстатки.АналитикаУчетаПоПартнерам     = ВспомогательнаяИнформация.АналитикаУчетаПоПартнерам
	|				И РасчетыПоСрокамОстатки.ОбъектРасчетов             = ВспомогательнаяИнформация.ОбъектРасчетов
	|				И РасчетыПоСрокамОстатки.Валюта                     = ВспомогательнаяИнформация.Валюта
	|				И РасчетыПоСрокамОстатки.РасчетныйДокумент          = ВспомогательнаяИнформация.РасчетныйДокумент
	|				И РасчетыПоСрокамОстатки.ДатаПлановогоПогашения     = ВспомогательнаяИнформация.ДатаПлановогоПогашения
	|				И РасчетыПоСрокамОстатки.ДатаВозникновения          = ВспомогательнаяИнформация.ДатаВозникновения
	|				И ВспомогательнаяИнформация.Активность
	|				И ВспомогательнаяИнформация.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				И НЕ ВспомогательнаяИнформация.ДокументРегистратор ССЫЛКА Документ.РасчетКурсовыхРазниц
	|СГРУППИРОВАТЬ ПО
	|	РасчетыПоСрокамОстатки.ОбъектРасчетов,
	|	РасчетыПоСрокамОстатки.АналитикаУчетаПоПартнерам,
	|	РасчетыПоСрокамОстатки.Валюта,
	|	РасчетыПоСрокамОстатки.РасчетныйДокумент,
	|	РасчетыПоСрокамОстатки.ДатаВозникновения,
	|	РасчетыПоСрокамОстатки.ДатаПлановогоПогашения,
	|	РасчетыПоСрокамОстатки.ПредоплатаОстаток,
	|	РасчетыПоСрокамОстатки.ПредоплатаРеглОстаток,
	|	РасчетыПоСрокамОстатки.ПредоплатаУпрОстаток,
	|	РасчетыПоСрокамОстатки.ДолгОстаток,
	|	РасчетыПоСрокамОстатки.ДолгРеглОстаток,
	|	РасчетыПоСрокамОстатки.ДолгУпрОстаток,
	|	РасчетыПоСрокамОстатки.ПредоплатаОстаток <> 0,
	|	РасчетыПоСрокамОстатки.ДолгОстаток <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРасчетов,
	|	АналитикаУчетаПоПартнерам,
	|	ВалютаРасчетов,
	|	ЕстьПредоплата,
	|	ЕстьДолг
	|;
	|УНИЧТОЖИТЬ ВТ_Остатки";
	
	ТекстЗапросаРасчетыПоСрокамОстатки = СтрЗаменить(ТекстЗапросаРасчетыПоСрокамОстатки, 
			"&ТекстПодзапроса", 
			"(" + ТекстПодзапроса + ")");
		
	Если Не ГлобальныеПеременные.НачалоДняПорядкаЕстьРазличные Тогда
		
		ТекстЗапросаРасчетыПоСрокамОстатки = СтрЗаменить(ТекстЗапросаРасчетыПоСрокамОстатки,
			"СУММА(ОстаткиИОбороты.ПредоплатаОстаток + ОстаткиИОбороты.ПредоплатаОборот)", 
			"ОстаткиИОбороты.ПредоплатаОстаток + ОстаткиИОбороты.ПредоплатаОборот");
		
		ТекстЗапросаРасчетыПоСрокамОстатки = СтрЗаменить(ТекстЗапросаРасчетыПоСрокамОстатки, 
			"СУММА(ОстаткиИОбороты.ПредоплатаРеглОстаток + ОстаткиИОбороты.ПредоплатаРеглОборот)",
			"ОстаткиИОбороты.ПредоплатаРеглОстаток + ОстаткиИОбороты.ПредоплатаРеглОборот");
		
		ТекстЗапросаРасчетыПоСрокамОстатки = СтрЗаменить(ТекстЗапросаРасчетыПоСрокамОстатки, 
			"СУММА(ОстаткиИОбороты.ПредоплатаУпрОстаток + ОстаткиИОбороты.ПредоплатаУпрОборот)",
			"ОстаткиИОбороты.ПредоплатаУпрОстаток + ОстаткиИОбороты.ПредоплатаУпрОборот");
		
		ТекстЗапросаРасчетыПоСрокамОстатки = СтрЗаменить(ТекстЗапросаРасчетыПоСрокамОстатки,
			"СУММА(ОстаткиИОбороты.ДолгОстаток + ОстаткиИОбороты.ДолгОборот)",
			"ОстаткиИОбороты.ДолгОстаток + ОстаткиИОбороты.ДолгОборот");
		
		ТекстЗапросаРасчетыПоСрокамОстатки = СтрЗаменить(ТекстЗапросаРасчетыПоСрокамОстатки,
			"СУММА(ОстаткиИОбороты.ДолгРеглОстаток + ОстаткиИОбороты.ДолгРеглОборот)",
			"ОстаткиИОбороты.ДолгРеглОстаток + ОстаткиИОбороты.ДолгРеглОборот");
		
		ТекстЗапросаРасчетыПоСрокамОстатки = СтрЗаменить(ТекстЗапросаРасчетыПоСрокамОстатки,
			"СУММА(ОстаткиИОбороты.ДолгУпрОстаток + ОстаткиИОбороты.ДолгУпрОборот)",
			"ОстаткиИОбороты.ДолгУпрОстаток + ОстаткиИОбороты.ДолгУпрОборот");
		
		ГруппировкаПодзапроса ="
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиИОбороты.ОбъектРасчетов,
		|	ОстаткиИОбороты.АналитикаУчетаПоПартнерам,
		|	ОстаткиИОбороты.Валюта,
		|	ОстаткиИОбороты.РасчетныйДокумент,
		|	ОстаткиИОбороты.ДатаПлановогоПогашения,
		|	ОстаткиИОбороты.ДатаВозникновения";
		
		ТекстЗапросаРасчетыПоСрокамОстатки = СтрЗаменить(ТекстЗапросаРасчетыПоСрокамОстатки, ГруппировкаПодзапроса, "");
		
	КонецЕсли;
	
	Если НЕ РасчетыСКлиентами Тогда
		ТекстЗапросаРасчетыПоСрокамОстатки = СтрЗаменить(ТекстЗапросаРасчетыПоСрокамОстатки,
			"РегистрНакопления.РасчетыСКлиентамиПоСрокам",
			"РегистрНакопления.РасчетыСПоставщикамиПоСрокам");
		
		ТекстЗапросаРасчетыПоСрокамОстатки = СтрЗаменить(ТекстЗапросаРасчетыПоСрокамОстатки,
			"&РасчетыСКлиентами",
			"ЛОЖЬ");
	Иначе
		ТекстЗапросаРасчетыПоСрокамОстатки = СтрЗаменить(ТекстЗапросаРасчетыПоСрокамОстатки,
			"&РасчетыСКлиентами",
			"ИСТИНА");
	КонецЕсли;
	
	Если НЕ ИмяТаблицы= "" Тогда
		ТекстЗапросаРасчетыПоСрокамОстатки = СтрЗаменить(ТекстЗапросаРасчетыПоСрокамОстатки,
			"ПОМЕСТИТЬ ВТРасчетыПоСрокамОстатки",
			"ПОМЕСТИТЬ " + ИмяТаблицы);
	КонецЕсли;
	
	Возврат ТекстЗапросаРасчетыПоСрокамОстатки;
	
КонецФункции

Функция ТекстЗапросаРасчетыДвижения(РасчетыСКлиентами = Истина, ИмяТаблицы = "")

	ТекстЗапросаРасчетыДвижения = "
	|ВЫБРАТЬ Расчеты.*
	|ПОМЕСТИТЬ РасчетыДвижения
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК Расчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтОсновныеПараметрыРасчета КАК ПараметрыРасчета
	|			ПО Расчеты.ОбъектРасчетов = ПараметрыРасчета.ПараметрОбъектРасчетов
	|				И Расчеты.АналитикаУчетаПоПартнерам = ПараметрыРасчета.ПараметрАналитикаУчетаПоПартнерам
	|				И Расчеты.Валюта = ПараметрыРасчета.ПараметрВалютаРасчетов
	|				И Расчеты.ПорядокОперации >= ПараметрыРасчета.ПараметрПорядок
	|
	|ГДЕ
	|	Расчеты.Активность
	|	И НЕ Расчеты.Регистратор ССЫЛКА Документ.КорректировкаРегистров
	|	И ПараметрыРасчета.ПараметрЭтоРасчетыСКлиентами = &РасчетыСКлиентами
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРасчетов,
	|	АналитикаУчетаПоПартнерам,
	|	Валюта,
	|	ВидДвижения";
	
	Если НЕ РасчетыСКлиентами Тогда
		ТекстЗапросаРасчетыДвижения = СтрЗаменить(ТекстЗапросаРасчетыДвижения,
			"РегистрНакопления.РасчетыСКлиентами",
			"РегистрНакопления.РасчетыСПоставщиками");
		
		ТекстЗапросаРасчетыДвижения = СтрЗаменить(ТекстЗапросаРасчетыДвижения,
			"&РасчетыСКлиентами",
			"ЛОЖЬ");
	Иначе
		ТекстЗапросаРасчетыДвижения = СтрЗаменить(ТекстЗапросаРасчетыДвижения,
			"&РасчетыСКлиентами",
			"ИСТИНА");
	КонецЕсли;
	
	Если НЕ ИмяТаблицы= "" Тогда
		ТекстЗапросаРасчетыДвижения = СтрЗаменить(ТекстЗапросаРасчетыДвижения,
			"ПОМЕСТИТЬ РасчетыДвижения",
			"ПОМЕСТИТЬ " + ИмяТаблицы);
	КонецЕсли;
	
	Возврат ТекстЗапросаРасчетыДвижения;
	
КонецФункции

Функция ТекстЗапросаРасчетыПланОплатОстатки(ГлобальныеПеременные, РасчетыСКлиентами = Истина, ИмяТаблицы = "")
	
	МассивТекстовПодзапроса = Новый Массив;
	
	ТекстПодзапросаОстатки = "
	|ВЫБРАТЬ
	|	РасчетыПланОплат.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	РасчетыПланОплат.ОбъектРасчетов КАК ОбъектРасчетов,
	|	РасчетыПланОплат.Валюта КАК Валюта,
	|	РасчетыПланОплат.ДокументПлан КАК ДокументПлан,
	|	РасчетыПланОплат.ДатаПлановогоПогашения КАК ДатаПлановогоПогашения,
	|	РасчетыПланОплат.ДатаВозникновения КАК ДатаВозникновения,
	|	РасчетыПланОплат.ВариантОплаты КАК ВариантОплаты,
	|	РасчетыПланОплат.НераспределенныйАванс КАК НераспределенныйАванс,
	|	РасчетыПланОплат.КОплатеОстаток КАК КОплатеОстаток,
	|	0 КАК КОплатеООборот
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПланОплат.Остатки(&НачалоДняПорядкаМинимальный, (АналитикаУчетаПоПартнерам,
	|		ОбъектРасчетов, Валюта) В
	|		(ВЫБРАТЬ
	|			ВтПараметры.ПараметрАналитикаУчетаПоПартнерам,
	|			ВтПараметры.ПараметрОбъектРасчетов,
	|			ВтПараметры.ПараметрВалютаРасчетов
	|		ИЗ
	|			ВтОсновныеПараметрыРасчета КАК ВтПараметры
	|		ГДЕ
	|			ВтПараметры.ПараметрРассчитыватьПлан
	|			И ВтПараметры.ПараметрЭтоРасчетыСКлиентами = &РасчетыСКлиентами)) КАК РасчетыПланОплат";
	
	МассивТекстовПодзапроса.Добавить(ТекстПодзапросаОстатки);
	
	Если ГлобальныеПеременные.НачалоДняПорядкаЕстьРазличные Тогда
		
		ТекстПодзапросаДвижения = "
		|ВЫБРАТЬ
		|	РасчетыПланОплат.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|	РасчетыПланОплат.ОбъектРасчетов КАК ОбъектРасчетов,
		|	РасчетыПланОплат.Валюта КАК Валюта,
		|	РасчетыПланОплат.ДокументПлан КАК ДокументПлан,
		|	РасчетыПланОплат.ДатаПлановогоПогашения КАК ДатаПлановогоПогашения,
		|	РасчетыПланОплат.ДатаВозникновения КАК ДатаВозникновения,
		|	РасчетыПланОплат.ВариантОплаты КАК ВариантОплаты,
		|	РасчетыПланОплат.НераспределенныйАванс КАК НераспределенныйАванс,
		|	СУММА(0) КАК КОплатеОстаток,
		|	СУММА(ВЫБОР
		|		КОГДА РасчетыПланОплат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|			ТОГДА РасчетыПланОплат.КОплате
		|		ИНАЧЕ -РасчетыПланОплат.КОплате
		|	КОНЕЦ) КАК КОплатеООборот
		|ИЗ
		|	ВтОсновныеПараметрыРасчета КАК ВтПараметры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентамиПланОплат КАК РасчетыПланОплат
		|		ПО ВтПараметры.ПараметрОбъектРасчетов = РасчетыПланОплат.ОбъектРасчетов
		|		И ВтПараметры.ПараметрАналитикаУчетаПоПартнерам = РасчетыПланОплат.АналитикаУчетаПоПартнерам
		|		И ВтПараметры.ПараметрВалютаРасчетов = РасчетыПланОплат.Валюта
		|		И РасчетыПланОплат.Активность
		|		И РасчетыПланОплат.Период >= &НачалоДняПорядкаМинимальный
		|		И РасчетыПланОплат.Период < ВтПараметры.ПараметрНачалоДняПорядка
		|		И ВтПараметры.ПараметрЭтоРасчетыСКлиентами = &РасчетыСКлиентами
		|		И ВтПараметры.ПараметрРассчитыватьПлан
		|СГРУППИРОВАТЬ ПО
		|	РасчетыПланОплат.АналитикаУчетаПоПартнерам,
		|	РасчетыПланОплат.ОбъектРасчетов,
		|	РасчетыПланОплат.Валюта,
		|	РасчетыПланОплат.ДокументПлан,
		|	РасчетыПланОплат.ДатаПлановогоПогашения,
		|	РасчетыПланОплат.ДатаВозникновения,
		|	РасчетыПланОплат.ВариантОплаты,
		|	РасчетыПланОплат.НераспределенныйАванс";
		
		МассивТекстовПодзапроса.Добавить(ТекстПодзапросаДвижения);
		
	КонецЕсли;
	
	ТекстПодзапроса = СтрСоединить(МассивТекстовПодзапроса, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ТекстЗапросаРасчетыПланОплатОстатки = "
	|ВЫБРАТЬ
	|	ОстаткиИОбороты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ОстаткиИОбороты.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ОстаткиИОбороты.Валюта КАК ВалютаРасчетов,
	|	ОстаткиИОбороты.ДокументПлан КАК ДокументПлан,
	|	ОстаткиИОбороты.ДатаПлановогоПогашения КАК ДатаПлановогоПогашения,
	|	ОстаткиИОбороты.ДатаВозникновения КАК ДатаВозникновения,
	|	ОстаткиИОбороты.ВариантОплаты КАК ВариантОплаты,
	|	ОстаткиИОбороты.НераспределенныйАванс КАК НераспределенныйАванс,
	|	СУММА(ОстаткиИОбороты.КОплатеОстаток + ОстаткиИОбороты.КОплатеООборот) КАК КОплате
	|ПОМЕСТИТЬ ВТРасчетыПланОплатОстатки
	|ИЗ
	|	&ТекстПодзапроса КАК ОстаткиИОбороты
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиИОбороты.АналитикаУчетаПоПартнерам,
	|	ОстаткиИОбороты.ОбъектРасчетов,
	|	ОстаткиИОбороты.Валюта,
	|	ОстаткиИОбороты.ДокументПлан,
	|	ОстаткиИОбороты.ДатаПлановогоПогашения,
	|	ОстаткиИОбороты.ДатаВозникновения,
	|	ОстаткиИОбороты.ВариантОплаты,
	|	ОстаткиИОбороты.НераспределенныйАванс
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРасчетов,
	|	АналитикаУчетаПоПартнерам,
	|	ВалютаРасчетов,
	|	ДокументПлан,
	|	ДатаПлановогоПогашения";
		
	ТекстЗапросаРасчетыПланОплатОстатки = СтрЗаменить(ТекстЗапросаРасчетыПланОплатОстатки,
		"&ТекстПодзапроса",
		"(" + ТекстПодзапроса + ")");
		
	Если Не ГлобальныеПеременные.НачалоДняПорядкаЕстьРазличные Тогда
		
		ТекстЗапросаРасчетыПланОплатОстатки = СтрЗаменить(ТекстЗапросаРасчетыПланОплатОстатки,
			"СУММА(ОстаткиИОбороты.КОплатеОстаток + ОстаткиИОбороты.КОплатеООборот)", 
			"ОстаткиИОбороты.КОплатеОстаток + ОстаткиИОбороты.КОплатеООборот");
			
		ГруппировкаПодзапроса ="
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиИОбороты.АналитикаУчетаПоПартнерам,
		|	ОстаткиИОбороты.ОбъектРасчетов,
		|	ОстаткиИОбороты.Валюта,
		|	ОстаткиИОбороты.ДокументПлан,
		|	ОстаткиИОбороты.ДатаПлановогоПогашения,
		|	ОстаткиИОбороты.ДатаВозникновения,
		|	ОстаткиИОбороты.ВариантОплаты,
		|	ОстаткиИОбороты.НераспределенныйАванс";
		
		ТекстЗапросаРасчетыПланОплатОстатки = СтрЗаменить(ТекстЗапросаРасчетыПланОплатОстатки, ГруппировкаПодзапроса, "");
		
	КонецЕсли;
	
	Если НЕ РасчетыСКлиентами Тогда
		ТекстЗапросаРасчетыПланОплатОстатки = СтрЗаменить(ТекстЗапросаРасчетыПланОплатОстатки,
			"РегистрНакопления.РасчетыСКлиентамиПланОплат",
			"РегистрНакопления.РасчетыСПоставщикамиПланОплат");
		
		ТекстЗапросаРасчетыПланОплатОстатки = СтрЗаменить(ТекстЗапросаРасчетыПланОплатОстатки,
			"&РасчетыСКлиентами",
			"ЛОЖЬ");
	Иначе
		ТекстЗапросаРасчетыПланОплатОстатки = СтрЗаменить(ТекстЗапросаРасчетыПланОплатОстатки,
			"&РасчетыСКлиентами",
			"ИСТИНА");
	КонецЕсли; 
	
	Если НЕ ИмяТаблицы= "" Тогда
		ТекстЗапросаРасчетыПланОплатОстатки = СтрЗаменить(ТекстЗапросаРасчетыПланОплатОстатки,
			"ПОМЕСТИТЬ ВТРасчетыПланОплатОстатки",
			"ПОМЕСТИТЬ " + ИмяТаблицы);
	КонецЕсли;
	
	Возврат ТекстЗапросаРасчетыПланОплатОстатки;
	
КонецФункции

Функция ТекстЗапросаРасчетыПланОтгрузокПоставокОстатки(ГлобальныеПеременные, РасчетыСКлиентами = Истина, ИмяТаблицы = "")
	
	МассивТекстовПодзапроса = Новый Массив;
	
	ТекстПодзапросаОстатки = "
	|ВЫБРАТЬ
	|	РасчетыПланОплат.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	РасчетыПланОплат.ОбъектРасчетов КАК ОбъектРасчетов,
	|	РасчетыПланОплат.Валюта КАК Валюта,
	|	РасчетыПланОплат.ДокументПлан КАК ДокументПлан,
	|	РасчетыПланОплат.ДатаПлановогоПогашения КАК ДатаПлановогоПогашения,
	|	РасчетыПланОплат.ДатаВозникновения КАК ДатаВозникновения,
	|	РасчетыПланОплат.НераспределенныйАванс КАК НераспределенныйАванс,
	|	РасчетыПланОплат.СуммаОстаток КАК СуммаОстаток,
	|	0 КАК СуммаООборот
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПланОтгрузок.Остатки(&НачалоДняПорядкаМинимальный, (АналитикаУчетаПоПартнерам,
	|		ОбъектРасчетов, Валюта) В
	|		(ВЫБРАТЬ
	|			ВтПараметры.ПараметрАналитикаУчетаПоПартнерам,
	|			ВтПараметры.ПараметрОбъектРасчетов,
	|			ВтПараметры.ПараметрВалютаРасчетов
	|		ИЗ
	|			ВтОсновныеПараметрыРасчета КАК ВтПараметры
	|		ГДЕ
	|			ВтПараметры.ПараметрРассчитыватьПлан
	|			И ВтПараметры.ПараметрЭтоРасчетыСКлиентами = &РасчетыСКлиентами)) КАК РасчетыПланОплат";
	
	МассивТекстовПодзапроса.Добавить(ТекстПодзапросаОстатки);
	
	Если ГлобальныеПеременные.НачалоДняПорядкаЕстьРазличные Тогда
		
		ТекстПодзапросаДвижения = "
		|ВЫБРАТЬ
		|	РасчетыПланОплат.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|	РасчетыПланОплат.ОбъектРасчетов КАК ОбъектРасчетов,
		|	РасчетыПланОплат.Валюта КАК Валюта,
		|	РасчетыПланОплат.ДокументПлан КАК ДокументПлан,
		|	РасчетыПланОплат.ДатаПлановогоПогашения КАК ДатаПлановогоПогашения,
		|	РасчетыПланОплат.ДатаВозникновения КАК ДатаВозникновения,
		|	РасчетыПланОплат.НераспределенныйАванс КАК НераспределенныйАванс,
		|	СУММА(0) КАК СуммаОстаток,
		|	СУММА(ВЫБОР
		|		КОГДА РасчетыПланОплат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|			ТОГДА РасчетыПланОплат.Сумма
		|		ИНАЧЕ -РасчетыПланОплат.Сумма
		|	КОНЕЦ) КАК СуммаООборот
		|ИЗ
		|	ВтОсновныеПараметрыРасчета КАК ВтПараметры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентамиПланОтгрузок КАК РасчетыПланОплат
		|		ПО ВтПараметры.ПараметрОбъектРасчетов = РасчетыПланОплат.ОбъектРасчетов
		|		И ВтПараметры.ПараметрАналитикаУчетаПоПартнерам = РасчетыПланОплат.АналитикаУчетаПоПартнерам
		|		И ВтПараметры.ПараметрВалютаРасчетов = РасчетыПланОплат.Валюта
		|		И РасчетыПланОплат.Активность
		|		И РасчетыПланОплат.Период >= &НачалоДняПорядкаМинимальный
		|		И РасчетыПланОплат.Период < ВтПараметры.ПараметрНачалоДняПорядка
		|		И ВтПараметры.ПараметрЭтоРасчетыСКлиентами = &РасчетыСКлиентами
		|		И ВтПараметры.ПараметрРассчитыватьПлан
		|СГРУППИРОВАТЬ ПО
		|	РасчетыПланОплат.АналитикаУчетаПоПартнерам,
		|	РасчетыПланОплат.ОбъектРасчетов,
		|	РасчетыПланОплат.Валюта,
		|	РасчетыПланОплат.ДокументПлан,
		|	РасчетыПланОплат.ДатаПлановогоПогашения,
		|	РасчетыПланОплат.ДатаВозникновения,
		|	РасчетыПланОплат.НераспределенныйАванс";
		
		МассивТекстовПодзапроса.Добавить(ТекстПодзапросаДвижения);
		
	КонецЕсли;
	
	ТекстПодзапроса = СтрСоединить(МассивТекстовПодзапроса, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ТекстЗапросаРасчетыПланОтгрузокПоставокОстатки = "
	|ВЫБРАТЬ
	|	ОстаткиИОбороты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ОстаткиИОбороты.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ОстаткиИОбороты.Валюта КАК ВалютаРасчетов,
	|	ОстаткиИОбороты.ДокументПлан КАК ДокументПлан,
	|	ОстаткиИОбороты.ДатаПлановогоПогашения КАК ДатаПлановогоПогашения,
	|	ОстаткиИОбороты.ДатаВозникновения КАК ДатаВозникновения,
	|	ОстаткиИОбороты.НераспределенныйАванс КАК НераспределенныйАванс,
	|	СУММА(ОстаткиИОбороты.СуммаОстаток + ОстаткиИОбороты.СуммаООборот) КАК Сумма
	|ПОМЕСТИТЬ ВТРасчетыПланОтгрузокПоставокОстатки
	|ИЗ
	|	&ТекстПодзапроса КАК ОстаткиИОбороты
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиИОбороты.АналитикаУчетаПоПартнерам,
	|	ОстаткиИОбороты.ОбъектРасчетов,
	|	ОстаткиИОбороты.Валюта,
	|	ОстаткиИОбороты.ДокументПлан,
	|	ОстаткиИОбороты.ДатаПлановогоПогашения,
	|	ОстаткиИОбороты.ДатаВозникновения,
	|	ОстаткиИОбороты.НераспределенныйАванс
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРасчетов,
	|	АналитикаУчетаПоПартнерам,
	|	ВалютаРасчетов";
	
	ТекстЗапросаРасчетыПланОтгрузокПоставокОстатки = СтрЗаменить(ТекстЗапросаРасчетыПланОтгрузокПоставокОстатки, 
			"&ТекстПодзапроса", 
			"(" + ТекстПодзапроса + ")");
			
	Если Не ГлобальныеПеременные.НачалоДняПорядкаЕстьРазличные Тогда
		
		ТекстЗапросаРасчетыПланОтгрузокПоставокОстатки = СтрЗаменить(ТекстЗапросаРасчетыПланОтгрузокПоставокОстатки,
			"СУММА(ОстаткиИОбороты.СуммаОстаток + ОстаткиИОбороты.СуммаООборот)", 
			"ОстаткиИОбороты.СуммаОстаток + ОстаткиИОбороты.СуммаООборот");
			
		ГруппировкаПодзапроса ="
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиИОбороты.АналитикаУчетаПоПартнерам,
		|	ОстаткиИОбороты.ОбъектРасчетов,
		|	ОстаткиИОбороты.Валюта,
		|	ОстаткиИОбороты.ДокументПлан,
		|	ОстаткиИОбороты.ДатаПлановогоПогашения,
		|	ОстаткиИОбороты.ДатаВозникновения,
		|	ОстаткиИОбороты.НераспределенныйАванс";
		
		ТекстЗапросаРасчетыПланОтгрузокПоставокОстатки = СтрЗаменить(ТекстЗапросаРасчетыПланОтгрузокПоставокОстатки,
			ГруппировкаПодзапроса, "");
		
	КонецЕсли;
			
	Если НЕ РасчетыСКлиентами Тогда
		ТекстЗапросаРасчетыПланОтгрузокПоставокОстатки = СтрЗаменить(ТекстЗапросаРасчетыПланОтгрузокПоставокОстатки,
			"РегистрНакопления.РасчетыСКлиентамиПланОтгрузок",
			"РегистрНакопления.РасчетыСПоставщикамиПланПоставок");
		
		ТекстЗапросаРасчетыПланОтгрузокПоставокОстатки = СтрЗаменить(ТекстЗапросаРасчетыПланОтгрузокПоставокОстатки,
			"&РасчетыСКлиентами",
			"ЛОЖЬ");
	Иначе
		ТекстЗапросаРасчетыПланОтгрузокПоставокОстатки = СтрЗаменить(ТекстЗапросаРасчетыПланОтгрузокПоставокОстатки,
			"&РасчетыСКлиентами",
			"ИСТИНА");
	КонецЕсли; 
	
	Если НЕ ИмяТаблицы= "" Тогда
		ТекстЗапросаРасчетыПланОтгрузокПоставокОстатки = СтрЗаменить(ТекстЗапросаРасчетыПланОтгрузокПоставокОстатки,
			"ПОМЕСТИТЬ ВТРасчетыПланОтгрузокПоставокОстатки",
			"ПОМЕСТИТЬ " + ИмяТаблицы);
	КонецЕсли;
	
	Возврат ТекстЗапросаРасчетыПланОтгрузокПоставокОстатки;
	
КонецФункции

//Возвращает записи до начала расчета (порядка), количество которых в служебном документе регистраторе меньше размера порции записи
Функция ЗаписиДоНачалаРасчета(Запрос, ГлобальныеПеременные, ИмяТаблицы, ЭтоРасчетыСКлиентами = Ложь)
	
	Запрос.УстановитьПараметр("ИмяРегистра", ИмяТаблицы);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Таблица.Документ КАК Регистратор
	|ПОМЕСТИТЬ ВтПолныеРегистраторы
	|ИЗ
	|РегистрСведений.КоличествоЗаписейРегистраторовРасчетов КАК Таблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтОсновныеПараметрыРасчета КАК ВтПараметры
	|			ПО Таблица.АналитикаУчетаПоПартнерам = ВтПараметры.ПараметрАналитикаУчетаПоПартнерам
	|				И Таблица.ОбъектРасчетов = ВтПараметры.ПараметрОбъектРасчетов
	|				И Таблица.Валюта = ВтПараметры.ПараметрВалютаРасчетов
	|ГДЕ
	|	Таблица.ИмяТаблицы = &ИмяРегистра
	|	И Таблица.ПериодЗаписи < ВтПараметры.ПараметрНачалоДняПорядка
	|	И ВтПараметры.ПараметрЭтоРасчетыСКлиентами = &ЭтоРасчетыСКлиентами
	|	И НЕ ВтПараметры.ПараметрНачальноеЗаполнение
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Документ
	|
	|ИМЕЮЩИЕ
	|	СУММА(Таблица.КоличествоЗаписей) = &РазмерПорцииЗаписи
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;";
	
	Запрос.Текст = Запрос.Текст + "
	|ВЫБРАТЬ
	|	Регистраторы.Регистратор КАК Регистратор
	|ИЗ
	|	ВтПолныеРегистраторы КАК Регистраторы
	|;
	|ВЫБРАТЬ
	|	*
	|ИЗ
	|	&ИмяТаблицы КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтПолныеРегистраторы КАК ВтПолныеРегистраторы
	|			ПО ВтПолныеРегистраторы.Регистратор = Таблица.Регистратор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтОсновныеПараметрыРасчета КАК ВтПараметры
	|			ПО Таблица.АналитикаУчетаПоПартнерам = ВтПараметры.ПараметрАналитикаУчетаПоПартнерам
	|				И Таблица.ОбъектРасчетов = ВтПараметры.ПараметрОбъектРасчетов
	|				И Таблица.Валюта = ВтПараметры.ПараметрВалютаРасчетов
	|				И Таблица.Период < ВтПараметры.ПараметрНачалоДняПорядка
	|ГДЕ
	|	ВтПолныеРегистраторы.Регистратор ЕСТЬ NULL //Если количество записей <> порции то они будут перераспределены.
	|	И ВтПараметры.ПараметрЭтоРасчетыСКлиентами = &ЭтоРасчетыСКлиентами
	|	И Таблица.Активность
	|	И Таблица.Регистратор ССЫЛКА Документ.РегистраторРасчетов
	|;
	|УНИЧТОЖИТЬ ВтПолныеРегистраторы";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяТаблицы", "РегистрНакопления." + ИмяТаблицы);
	
	Если ИмяТаблицы = "РасчетыСКлиентамиПоСрокам" ИЛИ ИмяТаблицы = "РасчетыСПоставщикамиПоСрокам" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВтПараметры.ПараметрНачалоДняПорядка", "ВтПараметры.ПараметрНачалоДняПорядкаФакт");
	КонецЕсли;
	
	Если ЭтоРасчетыСКлиентами Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ЭтоРасчетыСКлиентами", "ИСТИНА");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ЭтоРасчетыСКлиентами", "ЛОЖЬ");
	КонецЕсли;
	
	Результаты = Запрос.ВыполнитьПакет();
	
	ПолныеРегистраторы = Результаты[1].Выгрузить().ВыгрузитьКолонку("Регистратор");
	ГлобальныеПеременные.Вставить(ИмяТаблицы + "Регистраторы", ПолныеРегистраторы);
	
	ЗаписиДоНачалаРасчета = Результаты[2].Выгрузить();
	ЗаписиДоНачалаРасчета.Колонки.Добавить("ЗаписьДоНачалаРасчета", Новый ОписаниеТипов("Булево"));
	ЗаписиДоНачалаРасчета.ЗаполнитьЗначения(Истина,"ЗаписьДоНачалаРасчета");
	
	Возврат ЗаписиДоНачалаРасчета;
	
КонецФункции

//Возвращает таблицу оплат для распределения.
Функция ПолучитьОплаты(Запрос, ГлобальныеПеременные, ЭтоРасчетыСКлиентами = Ложь)

	#Область ЗапросПослеОбновления
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Период                                      КАК Период,
		|	ВложенныйЗапрос.ОбъектРасчетов                              КАК ОбъектРасчетов,
		|	ВложенныйЗапрос.АналитикаУчетаПоПартнерам                   КАК АналитикаУчетаПоПартнерам,
		|	ВложенныйЗапрос.ВалютаРасчетов                              КАК ВалютаРасчетов,
		|	ВложенныйЗапрос.ДатаВозникновения                           КАК ДатаВозникновения,
		|	ВложенныйЗапрос.ДатаПлановогоПогашения                      КАК ДатаПлановогоПогашения,
		|	ВложенныйЗапрос.ПорядокОперации                             КАК ПорядокОперации,
		|	ВложенныйЗапрос.ПорядокЗачетаПоДатеПлатежа                  КАК ПорядокЗачетаПоДатеПлатежа,
		|
		|	ВЫБОР
		|		КОГДА НАЧАЛОПЕРИОДА(ВложенныйЗапрос.Период, ДЕНЬ) >= ВложенныйЗапрос.ПараметрНачалоДняПорядка
		|			ТОГДА ВложенныйЗапрос.Период
		|		ИНАЧЕ ВложенныйЗапрос.ПараметрНачалоДняПорядка
		|	КОНЕЦ                                                       КАК ПериодЗачета,
		|
		|	ВЫБОР
		|		КОГДА НАЧАЛОПЕРИОДА(ВложенныйЗапрос.Период, ДЕНЬ) >= ВложенныйЗапрос.ПараметрНачалоДняПорядка
		|			ТОГДА ВложенныйЗапрос.ПорядокОперации
		|		ИНАЧЕ ВложенныйЗапрос.Порядок
		|	КОНЕЦ                                                       КАК ПорядокЗачета,
		|
		|	ВложенныйЗапрос.Регистратор                                 КАК Регистратор,
		|	ВложенныйЗапрос.РасчетныйДокумент                           КАК РасчетныйДокумент,
		|	ВложенныйЗапрос.КорОбъектРасчетов                           КАК КорОбъектРасчетов,
		|	ВложенныйЗапрос.КорАналитикаУчетаПоПартнерам                КАК КорАналитикаУчетаПоПартнерам,		
		|	ВложенныйЗапрос.АналитикаУчетаПоПартнерамПриемник           КАК АналитикаУчетаПоПартнерамПриемник,
		|	ВложенныйЗапрос.ОбъектРасчетовПриемник                      КАК ОбъектРасчетовПриемник,
		|	ВложенныйЗапрос.ВалютаПриемник                              КАК ВалютаПриемник,
		|	ВложенныйЗапрос.ПоДаннымОбъектаРасчетовИсточника            КАК ПоДаннымОбъектаРасчетовИсточника,
		|	СУММА(ВложенныйЗапрос.СуммаПриемник)                        КАК СуммаПриемник,
		|	ВложенныйЗапрос.Сторно                                      КАК Сторно,
		|	ВложенныйЗапрос.СвязанныйДокумент                           КАК СвязанныйДокумент,
		|	ВложенныйЗапрос.ЭтоКорректировка                            КАК ЭтоКорректировка,
		|	ВложенныйЗапрос.ХозяйственнаяОперация                       КАК ХозяйственнаяОперация,
		|	ВложенныйЗапрос.РучнойКурсРегл                              КАК РучнойКурсРегл,
		|	ВложенныйЗапрос.РучнойКурсУпр                               КАК РучнойКурсУпр,
		|	ВложенныйЗапрос.ВалютаДокумента                             КАК ВалютаДокумента,
		|	ВложенныйЗапрос.СтатьяДвиженияДенежныхСредств               КАК СтатьяДвиженияДенежныхСредств,
		|	ВложенныйЗапрос.НастройкаХозяйственнойОперации              КАК НастройкаХозяйственнойОперации,
		|	ВложенныйЗапрос.ИдентификаторФинЗаписи                      КАК ИдентификаторФинЗаписи,
		|	ВложенныйЗапрос.ПриходДобавлен                              КАК ПриходДобавлен,
		|	ВложенныйЗапрос.ГрафикСписан                                КАК ГрафикСписан,
		|	СУММА(ВЫБОР КОГДА ВложенныйЗапрос.Сумма < 0 
		|		ТОГДА 0
		|		ИНАЧЕ ВложенныйЗапрос.Сумма
		|	КОНЕЦ)                                                       КАК Сумма,
		|	СУММА(ВЫБОР КОГДА ВложенныйЗапрос.Сумма < 0 
		|		ТОГДА 0
		|		ИНАЧЕ ВложенныйЗапрос.Сумма
		|	КОНЕЦ)                                                       КАК СуммаДляРаспределения,
		|	СУММА(ВЫБОР КОГДА ВложенныйЗапрос.СуммаРегл < 0 
		|		ТОГДА 0
		|		ИНАЧЕ ВложенныйЗапрос.СуммаРегл
		|	КОНЕЦ)                                                       КАК СуммаРегл,
		|	СУММА(ВЫБОР КОГДА ВложенныйЗапрос.СуммаУпр < 0 
		|		ТОГДА 0
		|		ИНАЧЕ ВложенныйЗапрос.СуммаУпр
		|	КОНЕЦ)                                                       КАК СуммаУпр,
		|	ВложенныйЗапрос.ЭтоОстаток                                   КАК ЭтоОстаток
		|ПОМЕСТИТЬ ВТТаблицаОплат
		|ИЗ (
		|	ВЫБРАТЬ
		|		Расчеты.Период                                                   КАК Период,
		|		Расчеты.ОбъектРасчетов                                           КАК ОбъектРасчетов,
		|		Расчеты.АналитикаУчетаПоПартнерам                                КАК АналитикаУчетаПоПартнерам,
		|		Расчеты.Валюта                                                   КАК ВалютаРасчетов,
		|		НАЧАЛОПЕРИОДА(Расчеты.ДатаРегистратора, ДЕНЬ)                    КАК ДатаВозникновения,
		|		НАЧАЛОПЕРИОДА(Расчеты.ДатаПлатежа, ДЕНЬ)                         КАК ДатаПлановогоПогашения,
		|		Расчеты.ПорядокОперации                                          КАК ПорядокОперации,
		|		Расчеты.ПорядокЗачетаПоДатеПлатежа                               КАК ПорядокЗачетаПоДатеПлатежа,
		|		Расчеты.ВалютаДокумента                                          КАК ВалютаДокумента,
		|		Расчеты.СтатьяДвиженияДенежныхСредств                            КАК СтатьяДвиженияДенежныхСредств,
		|		Расчеты.НастройкаХозяйственнойОперации                           КАК НастройкаХозяйственнойОперации,
		|		Расчеты.ИдентификаторФинЗаписи                                   КАК ИдентификаторФинЗаписи,
		|		Расчеты.Регистратор                                              КАК Регистратор,
		|		Расчеты.СвязанныйДокумент                                        КАК СвязанныйДокумент,
		|		ВЫБОР 
		|			КОГДА Расчеты.РасчетныйДокумент = Неопределено 
		|					ИЛИ Расчеты.РасчетныйДокумент = ЗНАЧЕНИЕ(Документ.ПервичныйДокумент.ПустаяСсылка)
		|				ТОГДА Расчеты.Регистратор 
		|			ИНАЧЕ Расчеты.РасчетныйДокумент
		|		КОНЕЦ                                                            КАК РасчетныйДокумент,
		|		ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)                КАК КорОбъектРасчетов,
		|		ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка) КАК КорАналитикаУчетаПоПартнерам,
		|		Расчеты.АналитикаУчетаПоПартнерамПриемник                        КАК АналитикаУчетаПоПартнерамПриемник,
		|		Расчеты.ОбъектРасчетовПриемник                                   КАК ОбъектРасчетовПриемник,
		|		Расчеты.ВалютаПриемник                                           КАК ВалютаПриемник,
		|		Расчеты.СуммаПриемник                                            КАК СуммаПриемник,
		|		ЛОЖЬ                                                             КАК ПоДаннымОбъектаРасчетовИсточника,
		|		Расчеты.Сторно                                                   КАК Сторно,
		|		
		|		Расчеты.ХозяйственнаяОперация                                    КАК ХозяйственнаяОперация,
		|		ТИПЗНАЧЕНИЯ(Расчеты.Регистратор) В
		|			(ТИП(Документ.КорректировкаРеализации),ТИП(Документ.КорректировкаПриобретения)) КАК ЭтоКорректировка,
		|		ЛОЖЬ                                                             КАК ПриходДобавлен,
		|		ЛОЖЬ                                                             КАК ГрафикСписан,
		|		ВЫБОР
		|			КОГДА Расчеты.Сумма < 0 
		|				ТОГДА -Расчеты.Сумма
		|			ИНАЧЕ Расчеты.Сумма
		|		КОНЕЦ                                                           КАК Сумма,
		|		ВЫБОР
		|			КОГДА Расчеты.СуммаРегл < 0 
		|				ТОГДА -Расчеты.СуммаРегл
		|			ИНАЧЕ Расчеты.СуммаРегл
		|		КОНЕЦ                                                           КАК СуммаРегл,
		|		ВЫБОР
		|			КОГДА Расчеты.СуммаУпр < 0 
		|				ТОГДА -Расчеты.СуммаУпр
		|			ИНАЧЕ Расчеты.СуммаУпр
		|		КОНЕЦ                                                           КАК СуммаУпр,
		|		Расчеты.ВалютаДокумента = ВтПараметрыРасчета.ПараметрВалютаРегламентированногоУчета
		|			ИЛИ ВтПараметрыРасчета.ПараметрВалютаРасчетов = ВтПараметрыРасчета.ПараметрВалютаРегламентированногоУчета КАК РучнойКурсРегл,
		|		Расчеты.ВалютаДокумента = &ВалютаУпр 
		|			ИЛИ ВтПараметрыРасчета.ПараметрВалютаРасчетов = &ВалютаУпр                            КАК РучнойКурсУпр,
		|		ЛОЖЬ                                                            КАК ЭтоОстаток,
		|		ВтПараметрыРасчета.ПараметрНачалоДняПорядка                     КАК ПараметрНачалоДняПорядка,
		|		ВтПараметрыРасчета.ПараметрПорядок                              КАК Порядок
		|	ИЗ
		|		РасчетыДвижения КАК Расчеты
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтОсновныеПараметрыРасчета КАК ВтПараметрыРасчета
		|				ПО Расчеты.ОбъектРасчетов = ВтПараметрыРасчета.ПараметрОбъектРасчетов
		|					И Расчеты.АналитикаУчетаПоПартнерам = ВтПараметрыРасчета.ПараметрАналитикаУчетаПоПартнерам
		|					И Расчеты.Валюта = ВтПараметрыРасчета.ПараметрВалютаРасчетов
		|	ГДЕ
		|		НЕ Расчеты.ПоДаннымОбъектаРасчетовИсточника
		|		И (Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И НЕ ВтПараметрыРасчета.ПараметрЭтоРасчетыСКлиентами И Расчеты.Сумма + Расчеты.КОплате < 0
		|				ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И ВтПараметрыРасчета.ПараметрЭтоРасчетыСКлиентами И Расчеты.Сумма + Расчеты.КОплате < 0
		|				ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И НЕ ВтПараметрыРасчета.ПараметрЭтоРасчетыСКлиентами И Расчеты.Сумма + Расчеты.КОплате > 0
		|				ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ВтПараметрыРасчета.ПараметрЭтоРасчетыСКлиентами И Расчеты.Сумма + Расчеты.КОплате > 0)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Расчеты.Период                                           КАК Период,
		|		ВтПараметрыРасчета.ПараметрОбъектРасчетов                КАК ОбъектРасчетов,
		|		ВтПараметрыРасчета.ПараметрАналитикаУчетаПоПартнерам     КАК АналитикаУчетаПоПартнерам,
		|		ВтПараметрыРасчета.ПараметрВалютаРасчетов                КАК ВалютаРасчетов,
		|		Расчеты.ДатаВозникновения                                КАК ДатаВозникновения,
		|		Расчеты.ДатаПлановогоПогашения                           КАК ДатаПлановогоПогашения,
		|		Расчеты.ПорядокОперации                                  КАК ПорядокОперации,
		|		Расчеты.ПорядокЗачета                                    КАК ПорядокЗачетаПоДатеПлатежа,
		|		Расчеты.ВалютаДокумента                                  КАК ВалютаДокумента,
		|		Расчеты.СтатьяДвиженияДенежныхСредств                    КАК СтатьяДвиженияДенежныхСредств,
		|		Расчеты.НастройкаХозяйственнойОперации                   КАК НастройкаХозяйственнойОперации,
		|		Расчеты.ИдентификаторФинЗаписи                           КАК ИдентификаторФинЗаписи,
		|		Расчеты.ДокументРегистратор                              КАК Регистратор,
		|		Неопределено                                             КАК СвязанныйДокумент,
		|		Расчеты.РасчетныйДокумент                                КАК РасчетныйДокумент,
		|		Расчеты.ОбъектРасчетов                                   КАК КорОбъектРасчетов,
		|		Расчеты.АналитикаУчетаПоПартнерам                        КАК КорАналитикаУчетаПоПартнерам,
		|		ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка) КАК АналитикаУчетаПоПартнерамПриемник,
		|		ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)                КАК ОбъектРасчетовПриемник,
		|		ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)                         КАК ВалютаПриемник,
		|		0                                                                КАК СуммаПриемник,
		|		ИСТИНА                                                           КАК ПоДаннымОбъектаРасчетовИсточника,
		|		Расчеты.Сторно                                                   КАК Сторно,
		|		
		|		Расчеты.ХозяйственнаяОперация                                    КАК ХозяйственнаяОперация,
		|		Расчеты.ДокументРегистратор ССЫЛКА Документ.КорректировкаРеализации КАК ЭтоКорректировка,
		|		ЛОЖЬ                                                             КАК ПриходДобавлен,
		|		ЛОЖЬ                                                             КАК ГрафикСписан,
		|		Расчеты.СуммаПриемник                                            КАК Сумма,
		|		Расчеты.ПредоплатаРегл + Расчеты.ДолгРегл                        КАК СуммаРегл,
		|		Расчеты.ПредоплатаУпр + Расчеты.ДолгУпр                          КАК СуммаУпр,
		|		ИСТИНА                                                           КАК РучнойКурсРегл,
		|		ИСТИНА                                                           КАК РучнойКурсУпр,
		|		ЛОЖЬ                                                             КАК ЭтоОстаток,
		|		ВтПараметрыРасчета.ПараметрНачалоДняПорядка                      КАК ПараметрНачалоДняПорядка,
		|		ВтПараметрыРасчета.ПараметрПорядок                              КАК Порядок
		|	ИЗ
		|		ВТРасчетыСКлиентамиПоСрокамРегистраторы КАК ВТРасчетыСКлиентамиПоСрокам
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК Расчеты 
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтОсновныеПараметрыРасчета КАК ВтПараметрыРасчета
		|					ПО Расчеты.ОбъектРасчетовПриемник = ВтПараметрыРасчета.ПараметрОбъектРасчетов
		|						И Расчеты.АналитикаУчетаПоПартнерамПриемник = ВтПараметрыРасчета.ПараметрАналитикаУчетаПоПартнерам
		|						И Расчеты.ВалютаПриемник = ВтПараметрыРасчета.ПараметрВалютаРасчетов
		|						И Расчеты.ПорядокОперации >= ВтПараметрыРасчета.ПараметрПорядок
		|				ПО ВТРасчетыСКлиентамиПоСрокам.Период = Расчеты.Период
		|					И ВТРасчетыСКлиентамиПоСрокам.Регистратор = Расчеты.Регистратор
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТипыПриемников КАК ВтТипыПриемников
		|				ПО Расчеты.ДокументРегистратор = ВтТипыПриемников.Регистратор
		|					И Расчеты.ОбъектРасчетовПриемник = ВтТипыПриемников.ОбъектРасчетов
		|					И Расчеты.АналитикаУчетаПоПартнерамПриемник = ВтТипыПриемников.АналитикаУчетаПоПартнерам
		|					И Расчеты.ВалютаПриемник = ВтТипыПриемников.Валюта
		|					И НЕ ВтТипыПриемников.ЭтоОтгрузка
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Расчеты.Период                                           КАК Период,
		|		ВтПараметрыРасчета.ПараметрОбъектРасчетов                КАК ОбъектРасчетов,
		|		ВтПараметрыРасчета.ПараметрАналитикаУчетаПоПартнерам     КАК АналитикаУчетаПоПартнерам,
		|		ВтПараметрыРасчета.ПараметрВалютаРасчетов                КАК ВалютаРасчетов,
		|		Расчеты.ДатаВозникновения                                КАК ДатаВозникновения,
		|		Расчеты.ДатаПлановогоПогашения                           КАК ДатаПлановогоПогашения,
		|		Расчеты.ПорядокОперации                                  КАК ПорядокОперации,
		|		Расчеты.ПорядокЗачета                                    КАК ПорядокЗачетаПоДатеПлатежа,
		|		Расчеты.ВалютаДокумента                                  КАК ВалютаДокумента,
		|		Расчеты.СтатьяДвиженияДенежныхСредств                    КАК СтатьяДвиженияДенежныхСредств,
		|		Расчеты.НастройкаХозяйственнойОперации                   КАК НастройкаХозяйственнойОперации,
		|		Расчеты.ИдентификаторФинЗаписи                           КАК ИдентификаторФинЗаписи,
		|		Расчеты.ДокументРегистратор                              КАК Регистратор,
		|		Неопределено                                             КАК СвязанныйДокумент,
		|		Расчеты.РасчетныйДокумент                                КАК РасчетныйДокумент,
		|		Расчеты.ОбъектРасчетов                                   КАК КорОбъектРасчетов,
		|		Расчеты.АналитикаУчетаПоПартнерам                        КАК КорАналитикаУчетаПоПартнерам,
		|		ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка) КАК АналитикаУчетаПоПартнерамПриемник,
		|		ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)                КАК ОбъектРасчетовПриемник,
		|		ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)                         КАК ВалютаПриемник,
		|		0                                                                КАК СуммаПриемник,
		|		ИСТИНА                                                           КАК ПоДаннымОбъектаРасчетовИсточника,
		|		Расчеты.Сторно                                                   КАК Сторно,
		|		
		|		Расчеты.ХозяйственнаяОперация                                    КАК ХозяйственнаяОперация,
		|		ТИПЗНАЧЕНИЯ(Расчеты.ДокументРегистратор) В
		|			(ТИП(Документ.КорректировкаРеализации),ТИП(Документ.КорректировкаПриобретения)) КАК ЭтоКорректировка,
		|		ЛОЖЬ                                                             КАК ПриходДобавлен,
		|		ЛОЖЬ                                                             КАК ГрафикСписан,
		|		Расчеты.СуммаПриемник                                            КАК Сумма,
		|		Расчеты.ПредоплатаРегл + Расчеты.ДолгРегл                        КАК СуммаРегл,
		|		Расчеты.ПредоплатаУпр + Расчеты.ДолгУпр                          КАК СуммаУпр,
		|		ИСТИНА                                                           КАК РучнойКурсРегл,
		|		ИСТИНА                                                           КАК РучнойКурсУпр,
		|		ЛОЖЬ                                                             КАК ЭтоОстаток,
		|		ВтПараметрыРасчета.ПараметрНачалоДняПорядка                      КАК ПараметрНачалоДняПорядка,
		|		ВтПараметрыРасчета.ПараметрПорядок                               КАК Порядок
		|	ИЗ 
		|		ВТРасчетыСПоставщикамиПоСрокамРегистраторы КАК ВТРасчетыСПоставщикамиПоСрокам
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК Расчеты 
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтОсновныеПараметрыРасчета КАК ВтПараметрыРасчета
		|					ПО Расчеты.ОбъектРасчетовПриемник = ВтПараметрыРасчета.ПараметрОбъектРасчетов
		|						И Расчеты.АналитикаУчетаПоПартнерамПриемник = ВтПараметрыРасчета.ПараметрАналитикаУчетаПоПартнерам
		|						И Расчеты.ВалютаПриемник = ВтПараметрыРасчета.ПараметрВалютаРасчетов
		|						И Расчеты.ПорядокОперации >= ВтПараметрыРасчета.ПараметрПорядок
		|				ПО ВТРасчетыСПоставщикамиПоСрокам.Период = Расчеты.Период
		|					И ВТРасчетыСПоставщикамиПоСрокам.Регистратор = Расчеты.Регистратор
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТипыПриемников КАК ВтТипыПриемников
		|				ПО Расчеты.ДокументРегистратор = ВтТипыПриемников.Регистратор
		|					И Расчеты.ОбъектРасчетовПриемник = ВтТипыПриемников.ОбъектРасчетов
		|					И Расчеты.АналитикаУчетаПоПартнерамПриемник = ВтТипыПриемников.АналитикаУчетаПоПартнерам
		|					И Расчеты.ВалютаПриемник = ВтТипыПриемников.Валюта
		|					И НЕ ВтТипыПриемников.ЭтоОтгрузка
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ОстаткиОплат.Период                                                                    КАК Период,
		|		ОстаткиОплат.ОбъектРасчетов                                                            КАК ОбъектРасчетов,
		|		ОстаткиОплат.АналитикаУчетаПоПартнерам                                                 КАК АналитикаУчетаПоПартнерам,
		|		ОстаткиОплат.ВалютаРасчетов                                                            КАК ВалютаРасчетов,
		|		ОстаткиОплат.ДатаВозникновения                                                         КАК ДатаВозникновения,
		|		ОстаткиОплат.ДатаПлановогоПогашения                                                    КАК ДатаПлановогоПогашения,
		|		ОстаткиОплат.ПорядокОперации                                                           КАК ПорядокОперации,
		|		ОстаткиОплат.ПорядокЗачета                                                             КАК ПорядокЗачетаПоДатеПлатежа,
		|		ОстаткиОплат.ВалютаДокумента                                                           КАК ВалютаДокумента,
		|		ОстаткиОплат.СтатьяДвиженияДенежныхСредств                                             КАК СтатьяДвиженияДенежныхСредств,
		|		ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)                       КАК НастройкаХозяйственнойОперации,
		|		&ИдентификаторНеиспользуемойФинЗаписи                                                  КАК ИдентификаторФинЗаписи,
		|		ОстаткиОплат.ДокументРегистратор                                                       КАК Регистратор,
		|		ОстаткиОплат.СвязанныйДокумент                                                         КАК СвязанныйДокумент,
		|		ОстаткиОплат.РасчетныйДокумент                                                         КАК РасчетныйДокумент,
		|		ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)                                      КАК КорОбъектРасчетов,
		|		ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка)                       КАК КорАналитикаУчетаПоПартнерам,
		|		ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка)                       КАК АналитикаУчетаПоПартнерамПриемник,
		|		ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)                                      КАК ОбъектРасчетовПриемник,
		|		ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)                                               КАК ВалютаПриемник,
		|		0                                                                                      КАК СуммаПриемник,
		|		ЛОЖЬ                                                                                   КАК ПоДаннымОбъектаРасчетовИсточника,
		|		ЛОЖЬ                                                                                   КАК Сторно,
		|		ОстаткиОплат.ХозяйственнаяОперация                                                     КАК ХозяйственнаяОперация,
		|	
		|		ТИПЗНАЧЕНИЯ(ОстаткиОплат.РасчетныйДокумент) В (ТИП(Документ.КорректировкаРеализации),
		|		                                              ТИП(Документ.КорректировкаПриобретения)) КАК ЭтоКорректировка,
		|		ИСТИНА                                                                                 КАК ПриходДобавлен,
		|		ИСТИНА                                                                                 КАК ГрафикСписан,
		|
		|		ОстаткиОплат.Предоплата                                                                КАК Сумма,
		|		ОстаткиОплат.ПредоплатаРегл                                                            КАК СуммаРегл,
		|		ОстаткиОплат.ПредоплатаУпр                                                             КАК СуммаУпр,
		|		ОстаткиОплат.ВалютаДокумента = ВтПараметрыРасчета.ПараметрВалютаРегламентированногоУчета
		|			ИЛИ ВтПараметрыРасчета.ПараметрВалютаРасчетов = ВтПараметрыРасчета.ПараметрВалютаРегламентированногоУчета    КАК РучнойКурсРегл,
		|		ОстаткиОплат.ВалютаДокумента = &ВалютаУпр 
		|			ИЛИ ВтПараметрыРасчета.ПараметрВалютаРасчетов = &ВалютаУпр                                                   КАК РучнойКурсУпр,
		|		ИСТИНА                                                                                 КАК ЭтоОстаток,
		|		ВтПараметрыРасчета.ПараметрНачалоДняПорядка                                            КАК ПараметрНачалоДняПорядка,
		|		ВтПараметрыРасчета.ПараметрПорядок                                                     КАК Порядок
		|	ИЗ
		|		ВТРасчетыПоСрокамОстатки КАК ОстаткиОплат
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтОсновныеПараметрыРасчета КАК ВтПараметрыРасчета
		|				ПО ОстаткиОплат.ОбъектРасчетов = ВтПараметрыРасчета.ПараметрОбъектРасчетов
		|					И ОстаткиОплат.АналитикаУчетаПоПартнерам = ВтПараметрыРасчета.ПараметрАналитикаУчетаПоПартнерам
		|					И ОстаткиОплат.ВалютаРасчетов = ВтПараметрыРасчета.ПараметрВалютаРасчетов
		|	ГДЕ
		|		ОстаткиОплат.ЕстьПредоплата) КАК ВложенныйЗапрос
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Период,
		|	ВложенныйЗапрос.ОбъектРасчетов,
		|	ВложенныйЗапрос.АналитикаУчетаПоПартнерам,
		|	ВложенныйЗапрос.ВалютаРасчетов,
		|	ВложенныйЗапрос.ДатаВозникновения,
		|	ВложенныйЗапрос.ДатаПлановогоПогашения,
		|	ВложенныйЗапрос.ПорядокОперации,
		|	ВложенныйЗапрос.ПорядокЗачетаПоДатеПлатежа,
		|	ВложенныйЗапрос.Регистратор,
		|	ВложенныйЗапрос.РасчетныйДокумент,
		|	ВложенныйЗапрос.КорОбъектРасчетов,
		|	ВложенныйЗапрос.КорАналитикаУчетаПоПартнерам,
		|	ВложенныйЗапрос.АналитикаУчетаПоПартнерамПриемник,
		|	ВложенныйЗапрос.ОбъектРасчетовПриемник,
		|	ВложенныйЗапрос.ВалютаПриемник,
		|	ВложенныйЗапрос.ПоДаннымОбъектаРасчетовИсточника,
		|	ВложенныйЗапрос.Сторно,
		|	ВложенныйЗапрос.СвязанныйДокумент,
		|	ВложенныйЗапрос.ЭтоКорректировка,
		|	ВложенныйЗапрос.ХозяйственнаяОперация,
		|	ВложенныйЗапрос.РучнойКурсРегл,
		|	ВложенныйЗапрос.РучнойКурсУпр,
		|	ВложенныйЗапрос.ВалютаДокумента,
		|	ВложенныйЗапрос.СтатьяДвиженияДенежныхСредств,
		|	ВложенныйЗапрос.ПриходДобавлен,
		|	ВложенныйЗапрос.ГрафикСписан,
		|	ВложенныйЗапрос.ЭтоОстаток,
		|	ВложенныйЗапрос.НастройкаХозяйственнойОперации,
		|	ВложенныйЗапрос.ИдентификаторФинЗаписи,
		|	ВложенныйЗапрос.ПараметрНачалоДняПорядка,
		|	ВложенныйЗапрос.Порядок
		|ИМЕЮЩИЕ
		|	СУММА(ВЫБОР КОГДА ВложенныйЗапрос.Сумма < 0 
		|		ТОГДА 0
		|		ИНАЧЕ ВложенныйЗапрос.Сумма
		|	КОНЕЦ) > 0
		|;
		|ВЫБРАТЬ
		|	ТаблицаОплат.Период                                      КАК Период,
		|	ТаблицаОплат.ОбъектРасчетов                              КАК ОбъектРасчетов,
		|	ТаблицаОплат.АналитикаУчетаПоПартнерам                   КАК АналитикаУчетаПоПартнерам,
		|	ТаблицаОплат.ВалютаРасчетов                              КАК ВалютаРасчетов,
		|	ТаблицаОплат.ДатаВозникновения                           КАК ДатаВозникновения,
		|	ТаблицаОплат.ДатаПлановогоПогашения                      КАК ДатаПлановогоПогашения,
		|	ТаблицаОплат.ПорядокОперации                             КАК ПорядокОперации,
		|	ТаблицаОплат.ПорядокЗачетаПоДатеПлатежа                  КАК ПорядокЗачетаПоДатеПлатежа,
		|	ТаблицаОплат.ПериодЗачета                                КАК ПериодЗачета,
		|	ТаблицаОплат.ПорядокЗачета                               КАК ПорядокЗачета,
		|	ТаблицаОплат.Регистратор                                 КАК Регистратор,
		|	ТаблицаОплат.РасчетныйДокумент                           КАК РасчетныйДокумент,
		|	ТаблицаОплат.КорОбъектРасчетов                           КАК КорОбъектРасчетов,
		|	ТаблицаОплат.КорАналитикаУчетаПоПартнерам                КАК КорАналитикаУчетаПоПартнерам,
		|	ТаблицаОплат.АналитикаУчетаПоПартнерамПриемник           КАК АналитикаУчетаПоПартнерамПриемник,
		|	ТаблицаОплат.ОбъектРасчетовПриемник                      КАК ОбъектРасчетовПриемник,
		|	ТаблицаОплат.ВалютаПриемник                              КАК ВалютаПриемник,
		|	ТаблицаОплат.СуммаПриемник                               КАК СуммаПриемник,
		|	ТаблицаОплат.ПоДаннымОбъектаРасчетовИсточника            КАК ПоДаннымОбъектаРасчетовИсточника,
		|	ТаблицаОплат.Сторно                                      КАК Сторно,
		|	ТаблицаОплат.СвязанныйДокумент                           КАК СвязанныйДокумент,
		|	ТаблицаОплат.ЭтоКорректировка                            КАК ЭтоКорректировка,
		|	ТаблицаОплат.ХозяйственнаяОперация                       КАК ХозяйственнаяОперация,
		|	ТаблицаОплат.РучнойКурсРегл                              КАК РучнойКурсРегл,
		|	ТаблицаОплат.РучнойКурсУпр                               КАК РучнойКурсУпр,
		|	ТаблицаОплат.ВалютаДокумента                             КАК ВалютаДокумента,
		|	ТаблицаОплат.СтатьяДвиженияДенежныхСредств               КАК СтатьяДвиженияДенежныхСредств,
		|	ТаблицаОплат.НастройкаХозяйственнойОперации              КАК НастройкаХозяйственнойОперации,
		|	ТаблицаОплат.ИдентификаторФинЗаписи                      КАК ИдентификаторФинЗаписи,
		|	ТаблицаОплат.ПриходДобавлен                              КАК ПриходДобавлен,
		|	ТаблицаОплат.ГрафикСписан                                КАК ГрафикСписан,
		|	ТаблицаОплат.Сумма                                       КАК Сумма,
		|	ТаблицаОплат.Сумма <> 0                                  КАК ЕстьОстаток,
		|	ТаблицаОплат.СуммаДляРаспределения                       КАК СуммаДляРаспределения,
		|	ТаблицаОплат.СуммаРегл                                   КАК СуммаРегл,
		|	ТаблицаОплат.СуммаУпр                                    КАК СуммаУпр,
		|	ТаблицаОплат.ЭтоОстаток                                  КАК ЭтоОстаток
		|ИЗ 
		|	ВТТаблицаОплат КАК ТаблицаОплат
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаОплат.ПорядокОперации,
		|	ВЫБОР КОГДА ТаблицаОплат.ДатаПлановогоПогашения = ДАТАВРЕМЯ(1,1,1)
		|		ТОГДА 2
		|		ИНАЧЕ 1
		|	КОНЕЦ,
		|	ТаблицаОплат.ДатаПлановогоПогашения,
		|	ДатаВозникновения ВОЗР,
		|	ТаблицаОплат.Сумма
		|";
		#КонецОбласти
	
	Если НЕ ЭтоРасчетыСКлиентами Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"РегистрНакопления.РасчетыСКлиентами ","РегистрНакопления.РасчетыСПоставщиками ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"РасчетыДвижения","РасчетыСПоставщикамиДвижения");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ОтборыКорДвиженийОплат","ОтборыКорДвиженийОплатПоставщики");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ВТРасчетыПоСрокамОстатки","ВТРасчетыПоСрокамОстаткиПоставщики");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ВТТаблицаОплат","ВТТаблицаОплатПоставщики");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"РасчетыДвижения","РасчетыСКлиентамиДвижения");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ОтборыКорДвиженийОплат","ОтборыКорДвиженийОплатКлиенты");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ВТРасчетыПоСрокамОстатки","ВТРасчетыПоСрокамОстаткиКлиенты");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ВТТаблицаОплат","ВТТаблицаОплатКлиенты");
	КонецЕсли;
	
	Результат     = Запрос.Выполнить();
	РасчетыОплаты = Результат.Выгрузить();
	
	Возврат РасчетыОплаты;
	
КонецФункции

// Возвращает таблицу отгрузок/поставок для распределения.
// 
// Параметры:
//  Запрос - Запрос - Запрос
//  ГлобальныеПеременные -  Структура - Параметры пересчета, см. СтруктураПараметровЗаполненияВзаиморасчетов
//  ЭтоРасчетыСКлиентами - Булево - Параметр расчета
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица отгрузок/поставок:
//   * Период - Дата
//   * ДатаПлановогоПогашения - Дата
//   * ДатаВозникновения - Дата
//   * ПорядокОперации - Строка
//   * ПорядокЗачетаПоДатеПлатежа - Строка
//   * Регистратор - ДокументСсылка
//   * Заказ - ДокументСсылка
//   * РасчетныйДокумент - ОпределяемыйТип.РасчетныйДокумент
//   * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации
//   * КорОбъектРасчетов - СправочникСсылка.ОбъектыРасчетов
//   * КорАналитикаУчетаПоПартнерам - СправочникСсылка.КлючиАналитикиУчетаПоПартнерам
//   * Сторно - Булево
//   * Сумма - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака
//   * СуммаДляРаспределения - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака
//   * СуммаРегл - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака
//   * СуммаУпр - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака
//   * СуммаРеглДляПереоценки - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака
//   * СуммаУпрДляПереоценки - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака
//   * КОтгрузкеПоставке - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака 
//   * ПриходДобавлен - Булево
//   * ПланОтгрузокПоставокСписан - Булево
//   * ЕстьОстаток - Булево
//   * ЭтоОстаток - Булево
//   * КурсРегл - Число
//   * КурсУпр - Число
//   * ВалютаДокумента - СправочникСсылка.Валюты
//   * СтатьяДвиженияДенежныхСредств - СправочникСсылка.СтатьиДвиженияДенежныхСредств
//   * ИдентификаторФинЗаписи - Строка
//   * НастройкаХозяйственнойОперации - СправочникСсылка.НастройкиХозяйственныхОпераций
//   * ДатаПереоценки - Дата
//   * СвязанныйДокумент - ДокументСсылка
//   * ВариантОплаты - ПеречислениеСсылка.ВариантыКонтроляОплатыКлиентом, ПеречислениеСсылка.ВариантыКонтроляОплатыПоставщику - вариант оплаты
//   * ПериодЗачета - Дата
//   * ПорядокЗачета - Строка
//   * РучнойКурсРегл - Булево
//   * РучнойКурсУпр - Булево
//   * ЭтоВозвратАванса - Булево
//   * ЭтоКорректировка - Булево
Функция ПолучитьОтгрузкиПоставки(Запрос, ГлобальныеПеременные, ЭтоРасчетыСКлиентами = Ложь)
	#Область ЗапросПослеОбновления
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	МИНИМУМ(ВЫБОР КОГДА (Расчеты.Регистратор ССЫЛКА Документ.ВводОстатков
	|						ИЛИ Расчеты.Регистратор ССЫЛКА Документ.ВводОстатковВзаиморасчетов)
	|					И Расчеты.Период > Расчеты.ДатаРегистратора
	|			ТОГДА Расчеты.Период
	|		ИНАЧЕ Расчеты.ДатаРегистратора
	|	КОНЕЦ)                                              КАК Период,
	|	Расчеты.ОбъектРасчетов                              КАК ОбъектРасчетов,
	|	Расчеты.АналитикаУчетаПоПартнерам                   КАК АналитикаУчетаПоПартнерам,
	|	Расчеты.Валюта                                      КАК ВалютаРасчетов,
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|		КОГДА Расчеты.ДатаПлатежа = ДАТАВРЕМЯ(1,1,1)
	|			ТОГДА Расчеты.Период
	|		ИНАЧЕ Расчеты.ДатаПлатежа
	|	КОНЕЦ , ДЕНЬ)                                       КАК ДатаПлановогоПогашения,
	|	НАЧАЛОПЕРИОДА(Расчеты.ДатаРегистратора, ДЕНЬ)       КАК ДатаВозникновения,
	|	Расчеты.ХозяйственнаяОперация                       КАК ХозяйственнаяОперация,
	|	Расчеты.ВалютаДокумента                             КАК ВалютаДокумента,
	|	Расчеты.СтатьяДвиженияДенежныхСредств               КАК СтатьяДвиженияДенежныхСредств,
	|	Расчеты.ИдентификаторФинЗаписи                      КАК ИдентификаторФинЗаписи,
	|	Расчеты.НастройкаХозяйственнойОперации              КАК НастройкаХозяйственнойОперации,
	|	Расчеты.ПорядокОперации                             КАК ПорядокОперации,
	|	Расчеты.ПорядокЗачетаПоДатеПлатежа                  КАК ПорядокЗачетаПоДатеПлатежа,
	|	Расчеты.Регистратор                                 КАК Регистратор,
	|	Расчеты.СвязанныйДокумент                           КАК СвязанныйДокумент,
	|	Расчеты.КорОбъектРасчетов                           КАК КорОбъектРасчетов,
	|	Расчеты.КорАналитикаУчетаПоПартнерам                КАК КорАналитикаУчетаПоПартнерам,
	|	Расчеты.АналитикаУчетаПоПартнерамПриемник           КАК АналитикаУчетаПоПартнерамПриемник,
	|	Расчеты.ОбъектРасчетовПриемник                      КАК ОбъектРасчетовПриемник,
	|	Расчеты.ВалютаПриемник                              КАК ВалютаПриемник,
	|	СУММА(Расчеты.СуммаПриемник)                        КАК СуммаПриемник,
	|	Расчеты.ПоДаннымОбъектаРасчетовИсточника            КАК ПоДаннымОбъектаРасчетовИсточника,
	|	Расчеты.Сторно                                      КАК Сторно,
	|
	|	ВЫБОР 
	|		КОГДА Расчеты.РасчетныйДокумент = Неопределено ИЛИ Расчеты.РасчетныйДокумент = ЗНАЧЕНИЕ(Документ.ПервичныйДокумент.ПустаяСсылка)
	|			ТОГДА Расчеты.Регистратор 
	|		ИНАЧЕ Расчеты.РасчетныйДокумент
	|	КОНЕЦ                                               КАК РасчетныйДокумент,
	|	
	|	ВЫБОР КОГДА СУММА(ВЫБОР
	|						КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ВтПараметрыРасчета.ПараметрЭтоРасчетыСКлиентами
	|						ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И НЕ ВтПараметрыРасчета.ПараметрЭтоРасчетыСКлиентами
	|							ТОГДА -Расчеты.Сумма
	|						ИНАЧЕ Расчеты.Сумма
	|					КОНЕЦ) < 0 ТОГДА 0
	|		ИНАЧЕ СУММА(ВЫБОР
	|						КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ВтПараметрыРасчета.ПараметрЭтоРасчетыСКлиентами
	|						ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И НЕ ВтПараметрыРасчета.ПараметрЭтоРасчетыСКлиентами
	|							ТОГДА -Расчеты.Сумма
	|						ИНАЧЕ Расчеты.Сумма
	|					КОНЕЦ)
	|	КОНЕЦ КАК Сумма,
	|	
	|	ВЫБОР КОГДА СУММА(ВЫБОР
	|						КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ВтПараметрыРасчета.ПараметрЭтоРасчетыСКлиентами
	|						ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И НЕ ВтПараметрыРасчета.ПараметрЭтоРасчетыСКлиентами
	|							ТОГДА -Расчеты.СуммаРегл
	|						ИНАЧЕ Расчеты.СуммаРегл
	|					КОНЕЦ) < 0 ТОГДА 0 
	|		ИНАЧЕ СУММА(ВЫБОР
	|						КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ВтПараметрыРасчета.ПараметрЭтоРасчетыСКлиентами
	|						ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И НЕ ВтПараметрыРасчета.ПараметрЭтоРасчетыСКлиентами
	|							ТОГДА -Расчеты.СуммаРегл
	|						ИНАЧЕ Расчеты.СуммаРегл
	|					КОНЕЦ)
	|	КОНЕЦ КАК СуммаРегл,
	|
	|	ВЫБОР КОГДА СУММА(ВЫБОР
	|						КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ВтПараметрыРасчета.ПараметрЭтоРасчетыСКлиентами
	|						ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И НЕ ВтПараметрыРасчета.ПараметрЭтоРасчетыСКлиентами
	|							ТОГДА -Расчеты.СуммаУпр
	|						ИНАЧЕ Расчеты.СуммаУпр
	|					КОНЕЦ) < 0 ТОГДА 0 
	|		ИНАЧЕ СУММА(ВЫБОР
	|						КОГДА  Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ВтПараметрыРасчета.ПараметрЭтоРасчетыСКлиентами
	|						ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И НЕ ВтПараметрыРасчета.ПараметрЭтоРасчетыСКлиентами
	|							ТОГДА -Расчеты.СуммаУпр
	|						ИНАЧЕ Расчеты.СуммаУпр
	|					КОНЕЦ)
	|	КОНЕЦ КАК СуммаУпр,
	|
	|	СУММА(ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И ВтПараметрыРасчета.ПараметрЭтоРасчетыСКлиентами
	|				ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И НЕ ВтПараметрыРасчета.ПараметрЭтоРасчетыСКлиентами
	|				ТОГДА -Расчеты.КОтгрузке 
	|			ИНАЧЕ Расчеты.КОтгрузке 
	|		КОНЕЦ) КАК КОтгрузкеПоставке
	|	
	|ПОМЕСТИТЬ ВТРасчетыОтгрузкиПоставкиДвижения
	|ИЗ
	|	РасчетыДвижения КАК Расчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтОсновныеПараметрыРасчета КАК ВтПараметрыРасчета
	|			ПО Расчеты.ОбъектРасчетов = ВтПараметрыРасчета.ПараметрОбъектРасчетов
	|				И Расчеты.АналитикаУчетаПоПартнерам = ВтПараметрыРасчета.ПараметрАналитикаУчетаПоПартнерам
	|				И Расчеты.Валюта = ВтПараметрыРасчета.ПараметрВалютаРасчетов
	|ГДЕ
	|	ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ВтПараметрыРасчета.ПараметрЭтоРасчетыСКлиентами
	|				ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И НЕ ВтПараметрыРасчета.ПараметрЭтоРасчетыСКлиентами
	|				ТОГДА -Расчеты.Сумма
	|			ИНАЧЕ Расчеты.Сумма
	|		КОНЕЦ > 0 
	|	
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(Расчеты.ДатаРегистратора, ДЕНЬ),
	|	Расчеты.ОбъектРасчетов,
	|	Расчеты.АналитикаУчетаПоПартнерам,
	|	Расчеты.Валюта,
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|		КОГДА Расчеты.ДатаПлатежа = ДАТАВРЕМЯ(1,1,1)
	|			ТОГДА Расчеты.Период
	|		ИНАЧЕ Расчеты.ДатаПлатежа
	|	КОНЕЦ , ДЕНЬ),
	|	Расчеты.ХозяйственнаяОперация,
	|	Расчеты.ВалютаДокумента,
	|	Расчеты.СтатьяДвиженияДенежныхСредств,
	|	Расчеты.ИдентификаторФинЗаписи,
	|	Расчеты.НастройкаХозяйственнойОперации,
	|	Расчеты.ПорядокОперации,
	|	Расчеты.ПорядокЗачетаПоДатеПлатежа,
	|	Расчеты.Регистратор,
	|	Расчеты.СвязанныйДокумент,
	|	Расчеты.КорОбъектРасчетов,
	|	Расчеты.КорАналитикаУчетаПоПартнерам,
	|	Расчеты.АналитикаУчетаПоПартнерамПриемник,
	|	Расчеты.ОбъектРасчетовПриемник,
	|	Расчеты.ВалютаПриемник,
	|	Расчеты.ПоДаннымОбъектаРасчетовИсточника,
	|	Расчеты.Сторно,
	|	ВЫБОР 
	|		КОГДА Расчеты.РасчетныйДокумент = Неопределено ИЛИ Расчеты.РасчетныйДокумент = ЗНАЧЕНИЕ(Документ.ПервичныйДокумент.ПустаяСсылка)
	|		ТОГДА Расчеты.Регистратор 
	|	ИНАЧЕ Расчеты.РасчетныйДокумент
	|	КОНЕЦ
	|;
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Период                            КАК Период,
	|	ВложенныйЗапрос.ОбъектРасчетов                    КАК ОбъектРасчетов,
	|	ВложенныйЗапрос.АналитикаУчетаПоПартнерам         КАК АналитикаУчетаПоПартнерам,
	|	ВложенныйЗапрос.ВалютаРасчетов                    КАК ВалютаРасчетов,
	|	ВложенныйЗапрос.ДатаПлановогоПогашения            КАК ДатаПлановогоПогашения,
	|	ВложенныйЗапрос.ДатаВозникновения                 КАК ДатаВозникновения,
	|	ВложенныйЗапрос.ПорядокОперации                   КАК ПорядокОперации,
	|	ВложенныйЗапрос.ПорядокЗачетаПоДатеПлатежа        КАК ПорядокЗачетаПоДатеПлатежа,
	|	ВложенныйЗапрос.Регистратор                       КАК Регистратор,
	|	ВложенныйЗапрос.РасчетныйДокумент                 КАК РасчетныйДокумент,
	|	ВложенныйЗапрос.ХозяйственнаяОперация             КАК ХозяйственнаяОперация,
	|	ВложенныйЗапрос.КорОбъектРасчетов                 КАК КорОбъектРасчетов,
	|	ВложенныйЗапрос.КорАналитикаУчетаПоПартнерам      КАК КорАналитикаУчетаПоПартнерам,
	|	ВложенныйЗапрос.АналитикаУчетаПоПартнерамПриемник КАК АналитикаУчетаПоПартнерамПриемник,
	|	ВложенныйЗапрос.ОбъектРасчетовПриемник            КАК ОбъектРасчетовПриемник,
	|	ВложенныйЗапрос.ВалютаПриемник                    КАК ВалютаПриемник,
	|	ВложенныйЗапрос.СуммаПриемник                     КАК СуммаПриемник,
	|	ВложенныйЗапрос.ПоДаннымОбъектаРасчетовИсточника  КАК ПоДаннымОбъектаРасчетовИсточника,
	|	ВложенныйЗапрос.Сторно                            КАК Сторно,
	|
	|	ВложенныйЗапрос.Сумма                             КАК Сумма,
	|	ВложенныйЗапрос.СуммаРегл                         КАК СуммаРегл,
	|	ВложенныйЗапрос.СуммаУпр                          КАК СуммаУпр,
	|
	|	ВложенныйЗапрос.ВалютаДокумента                   КАК ВалютаДокумента,
	|	ВложенныйЗапрос.СтатьяДвиженияДенежныхСредств     КАК СтатьяДвиженияДенежныхСредств,
	|	ВложенныйЗапрос.ИдентификаторФинЗаписи            КАК ИдентификаторФинЗаписи,
	|	ВложенныйЗапрос.НастройкаХозяйственнойОперации    КАК НастройкаХозяйственнойОперации,
	|	ВложенныйЗапрос.ДатаПереоценки                    КАК ДатаПереоценки,
	|	ВложенныйЗапрос.СвязанныйДокумент                 КАК СвязанныйДокумент,
	|	ВложенныйЗапрос.ЭтоОстаток                        КАК ЭтоОстаток
	|ПОМЕСТИТЬ ВТРасчетыОтгрузкиПоставки
	|ИЗ
	|	(ВЫБРАТЬ
	|	РасчетыОтгрузкиПоставки.Период                         КАК Период,
	|	РасчетыОтгрузкиПоставки.ОбъектРасчетов                 КАК ОбъектРасчетов,
	|	РасчетыОтгрузкиПоставки.АналитикаУчетаПоПартнерам      КАК АналитикаУчетаПоПартнерам,
	|	РасчетыОтгрузкиПоставки.ВалютаРасчетов                 КАК ВалютаРасчетов,
	|	РасчетыОтгрузкиПоставки.ДатаПлановогоПогашения         КАК ДатаПлановогоПогашения,
	|	РасчетыОтгрузкиПоставки.ДатаВозникновения              КАК ДатаВозникновения,
	|	РасчетыОтгрузкиПоставки.ПорядокОперации                КАК ПорядокОперации,
	|	РасчетыОтгрузкиПоставки.ПорядокЗачетаПоДатеПлатежа     КАК ПорядокЗачетаПоДатеПлатежа,
	|	РасчетыОтгрузкиПоставки.Регистратор                    КАК Регистратор,
	|	РасчетыОтгрузкиПоставки.РасчетныйДокумент              КАК РасчетныйДокумент,
	|	РасчетыОтгрузкиПоставки.ХозяйственнаяОперация          КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)                КАК КорОбъектРасчетов,
	|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка) КАК КорАналитикаУчетаПоПартнерам,
	|	РасчетыОтгрузкиПоставки.АналитикаУчетаПоПартнерамПриемник        КАК АналитикаУчетаПоПартнерамПриемник,
	|	РасчетыОтгрузкиПоставки.ОбъектРасчетовПриемник                   КАК ОбъектРасчетовПриемник,
	|	РасчетыОтгрузкиПоставки.ВалютаПриемник                   КАК ВалютаПриемник,
	|	РасчетыОтгрузкиПоставки.СуммаПриемник                  КАК СуммаПриемник,
	|	ЛОЖЬ                                                   КАК ПоДаннымОбъектаРасчетовИсточника,
	|	РасчетыОтгрузкиПоставки.Сторно                         КАК Сторно,
	|	
	|	РасчетыОтгрузкиПоставки.Сумма                          КАК Сумма,
	|	РасчетыОтгрузкиПоставки.СуммаРегл                      КАК СуммаРегл,
	|	РасчетыОтгрузкиПоставки.СуммаУпр                       КАК СуммаУпр,
	|	
	|	РасчетыОтгрузкиПоставки.ВалютаДокумента                КАК ВалютаДокумента,
	|	РасчетыОтгрузкиПоставки.СтатьяДвиженияДенежныхСредств  КАК СтатьяДвиженияДенежныхСредств,
	|	РасчетыОтгрузкиПоставки.ИдентификаторФинЗаписи         КАК ИдентификаторФинЗаписи,
	|	РасчетыОтгрузкиПоставки.НастройкаХозяйственнойОперации КАК НастройкаХозяйственнойОперации,
	|	РасчетыОтгрузкиПоставки.Период                         КАК ДатаПереоценки,
	|	РасчетыОтгрузкиПоставки.СвязанныйДокумент              КАК СвязанныйДокумент,
	|	ЛОЖЬ                                                   КАК ЭтоОстаток
	|	
	|ИЗ ВТРасчетыОтгрузкиПоставкиДвижения КАК РасчетыОтгрузкиПоставки
	|ГДЕ
	|	РасчетыОтгрузкиПоставки.Сумма <> 0
	|	И НЕ РасчетыОтгрузкиПоставки.ПоДаннымОбъектаРасчетовИсточника
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Расчеты.Период                                           КАК Период,
	|	ВтПараметрыРасчета.ПараметрОбъектРасчетов                КАК ОбъектРасчетов,
	|	ВтПараметрыРасчета.ПараметрАналитикаУчетаПоПартнерам     КАК АналитикаУчетаПоПартнерам,
	|	ВтПараметрыРасчета.ПараметрВалютаРасчетов                КАК ВалютаРасчетов,
	|	ВЫБОР КОГДА Расчеты.ДатаПлановогоПогашения = ДАТАВРЕМЯ(1,1,1)
	|		ТОГДА Расчеты.ДатаВозникновения
	|		ИНАЧЕ Расчеты.ДатаПлановогоПогашения
	|	КОНЕЦ                                                    КАК ДатаПлановогоПогашения,
	|	ЕСТЬNULL(Расчеты.ДатаВозникновения, НЕОПРЕДЕЛЕНО)        КАК ДатаВозникновения,
	|	ЕСТЬNULL(Расчеты.ПорядокОперации, НЕОПРЕДЕЛЕНО)          КАК ПорядокОперации,
	|	ЕСТЬNULL(Расчеты.ПорядокЗачета, НЕОПРЕДЕЛЕНО)            КАК ПорядокЗачетаПоДатеПлатежа,
	|	Расчеты.ДокументРегистратор                              КАК Регистратор,
	|	Расчеты.РасчетныйДокумент                                КАК РасчетныйДокумент,
	|	Расчеты.ХозяйственнаяОперация                            КАК ХозяйственнаяОперация,
	|	Расчеты.ОбъектРасчетов                                   КАК КорОбъектРасчетов,
	|	Расчеты.АналитикаУчетаПоПартнерам                        КАК КорАналитикаУчетаПоПартнерам,
	|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка) КАК АналитикаУчетаПоПартнерамПриемник,
	|	ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)        КАК ОбъектРасчетовПриемник,
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)                 КАК ВалютаПриемник,
	|	0                                                        КАК СуммаПриемник,
	|	ИСТИНА                                                   КАК ПоДаннымОбъектаРасчетовИсточника,
	|	Расчеты.Сторно                                           КАК Сторно,
	|	
	|	Расчеты.СуммаПриемник                                    КАК Сумма,
	|	Расчеты.ДолгРегл + Расчеты.ПредоплатаРегл                КАК СуммаРегл,
	|	Расчеты.ДолгУпр + Расчеты.ПредоплатаУпр                  КАК СуммаУпр,
	|	
	|	Расчеты.ВалютаДокумента                                  КАК ВалютаДокумента,
	|	Расчеты.СтатьяДвиженияДенежныхСредств                    КАК СтатьяДвиженияДенежныхСредств,
	|	Расчеты.ИдентификаторФинЗаписи                           КАК ИдентификаторФинЗаписи,
	|	Расчеты.НастройкаХозяйственнойОперации                   КАК НастройкаХозяйственнойОперации,
	|	Расчеты.Период                                           КАК ДатаПереоценки,
	|	НЕОПРЕДЕЛЕНО                                             КАК СвязанныйДокумент,
	|	ЛОЖЬ                                                     КАК ЭтоОстаток
	|ИЗ 
	|	ВТРасчетыСКлиентамиПоСрокамРегистраторы КАК ВТРасчетыСКлиентамиПоСрокам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК Расчеты
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтОсновныеПараметрыРасчета КАК ВтПараметрыРасчета
	|					ПО Расчеты.ОбъектРасчетовПриемник = ВтПараметрыРасчета.ПараметрОбъектРасчетов
	|						И Расчеты.АналитикаУчетаПоПартнерамПриемник = ВтПараметрыРасчета.ПараметрАналитикаУчетаПоПартнерам
	|						И Расчеты.ВалютаПриемник = ВтПараметрыРасчета.ПараметрВалютаРасчетов
	|						И Расчеты.ПорядокОперации >= ВтПараметрыРасчета.ПараметрПорядок
	|			ПО ВТРасчетыСКлиентамиПоСрокам.Период = Расчеты.Период
	|				И ВТРасчетыСКлиентамиПоСрокам.Регистратор = Расчеты.Регистратор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТипыПриемников КАК ВтТипыПриемников
	|			ПО Расчеты.ДокументРегистратор = ВтТипыПриемников.Регистратор
	|				И Расчеты.ОбъектРасчетовПриемник = ВтТипыПриемников.ОбъектРасчетов
	|				И Расчеты.АналитикаУчетаПоПартнерамПриемник = ВтТипыПриемников.АналитикаУчетаПоПартнерам
	|				И Расчеты.ВалютаПриемник = ВтТипыПриемников.Валюта
	|				И ВтТипыПриемников.ЭтоОтгрузка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Расчеты.Период                                           КАК Период,
	|	ВтПараметрыРасчета.ПараметрОбъектРасчетов                КАК ОбъектРасчетов,
	|	ВтПараметрыРасчета.ПараметрАналитикаУчетаПоПартнерам     КАК АналитикаУчетаПоПартнерам,
	|	ВтПараметрыРасчета.ПараметрВалютаРасчетов                КАК ВалютаРасчетов,
	|	ВЫБОР КОГДА Расчеты.ДатаПлановогоПогашения = ДАТАВРЕМЯ(1,1,1)
	|		ТОГДА Расчеты.ДатаВозникновения
	|		ИНАЧЕ Расчеты.ДатаПлановогоПогашения
	|	КОНЕЦ                                                    КАК ДатаПлановогоПогашения,
	|	ЕСТЬNULL(Расчеты.ДатаВозникновения, НЕОПРЕДЕЛЕНО)        КАК ДатаВозникновения,
	|	ЕСТЬNULL(Расчеты.ПорядокОперации, НЕОПРЕДЕЛЕНО)          КАК ПорядокОперации,
	|	ЕСТЬNULL(Расчеты.ПорядокЗачета, НЕОПРЕДЕЛЕНО)            КАК ПорядокЗачетаПоДатеПлатежа,
	|	Расчеты.ДокументРегистратор                              КАК Регистратор,
	|	Расчеты.РасчетныйДокумент                                КАК РасчетныйДокумент,
	|	Расчеты.ХозяйственнаяОперация                            КАК ХозяйственнаяОперация,
	|	Расчеты.ОбъектРасчетов                                   КАК КорОбъектРасчетов,
	|	Расчеты.АналитикаУчетаПоПартнерам                        КАК КорАналитикаУчетаПоПартнерам,
	|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка) КАК АналитикаУчетаПоПартнерамПриемник,
	|	ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)        КАК ОбъектРасчетовПриемник,
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)                 КАК ВалютаПриемник,
	|	0                                                        КАК СуммаПриемник,
	|	ИСТИНА                                                   КАК ПоДаннымОбъектаРасчетовИсточника,
	|	Расчеты.Сторно                                           КАК Сторно,
	|	
	|	Расчеты.СуммаПриемник                                    КАК Сумма,
	|	Расчеты.ДолгРегл + Расчеты.ПредоплатаРегл                КАК СуммаРегл,
	|	Расчеты.ДолгУпр + Расчеты.ПредоплатаУпр                  КАК СуммаУпр,
	|	
	|	Расчеты.ВалютаДокумента                                  КАК ВалютаДокумента,
	|	Расчеты.СтатьяДвиженияДенежныхСредств                    КАК СтатьяДвиженияДенежныхСредств,
	|	Расчеты.ИдентификаторФинЗаписи                           КАК ИдентификаторФинЗаписи,
	|	Расчеты.НастройкаХозяйственнойОперации                   КАК НастройкаХозяйственнойОперации,
	|	Расчеты.Период                                           КАК ДатаПереоценки,
	|	НЕОПРЕДЕЛЕНО                                                     КАК СвязанныйДокумент,
	|	ЛОЖЬ                                                             КАК ЭтоОстаток
	|ИЗ 
	|	ВТРасчетыСПоставщикамиПоСрокамРегистраторы КАК ВТРасчетыСПоставщикамиПоСрокам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК Расчеты 
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтОсновныеПараметрыРасчета КАК ВтПараметрыРасчета
	|					ПО Расчеты.ОбъектРасчетовПриемник = ВтПараметрыРасчета.ПараметрОбъектРасчетов
	|						И Расчеты.АналитикаУчетаПоПартнерамПриемник = ВтПараметрыРасчета.ПараметрАналитикаУчетаПоПартнерам
	|						И Расчеты.ВалютаПриемник = ВтПараметрыРасчета.ПараметрВалютаРасчетов
	|						И Расчеты.ПорядокОперации >= ВтПараметрыРасчета.ПараметрПорядок
	|			ПО ВТРасчетыСПоставщикамиПоСрокам.Период = Расчеты.Период
	|				И ВТРасчетыСПоставщикамиПоСрокам.Регистратор = Расчеты.Регистратор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТипыПриемников КАК ВтТипыПриемников
	|			ПО Расчеты.ДокументРегистратор = ВтТипыПриемников.Регистратор
	|				И Расчеты.ОбъектРасчетовПриемник = ВтТипыПриемников.ОбъектРасчетов
	|				И Расчеты.АналитикаУчетаПоПартнерамПриемник = ВтТипыПриемников.АналитикаУчетаПоПартнерам
	|				И Расчеты.ВалютаПриемник = ВтТипыПриемников.Валюта
	|				И ВтТипыПриемников.ЭтоОтгрузка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыПоСрокамОстатки.Период                                    КАК Период,
	|	РасчетыПоСрокамОстатки.ОбъектРасчетов                            КАК ОбъектРасчетов,
	|	РасчетыПоСрокамОстатки.АналитикаУчетаПоПартнерам                 КАК АналитикаУчетаПоПартнерам,
	|	РасчетыПоСрокамОстатки.ВалютаРасчетов                            КАК ВалютаРасчетов,
	|	РасчетыПоСрокамОстатки.ДатаПлановогоПогашения                    КАК ДатаПлановогоПогашения,
	|	РасчетыПоСрокамОстатки.ДатаВозникновения                         КАК ДатаВозникновения,
	|	РасчетыПоСрокамОстатки.ПорядокОперации                           КАК ПорядокОперации,
	|	РасчетыПоСрокамОстатки.ПорядокЗачета                             КАК ПорядокЗачетаПоДатеПлатежа,
	|	РасчетыПоСрокамОстатки.ДокументРегистратор                       КАК Регистратор,
	|	РасчетыПоСрокамОстатки.РасчетныйДокумент                         КАК РасчетныйДокумент,
	|	РасчетыПоСрокамОстатки.ХозяйственнаяОперация                     КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)                КАК КорОбъектРасчетов,
	|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка) КАК КорАналитикаУчетаПоПартнерам,
	|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка) КАК АналитикаУчетаПоПартнерамПриемник,
	|	ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)                КАК ОбъектРасчетовПриемник,
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)                         КАК ВалютаПриемник,
	|	0                                                                КАК СуммаПриемник,
	|	ЛОЖЬ                                                             КАК ПоДаннымОбъектаРасчетовИсточника,
	|	ЛОЖЬ                                                             КАК Сторно,
	|
	|	РасчетыПоСрокамОстатки.Долг                                      КАК Сумма,
	|	РасчетыПоСрокамОстатки.ДолгРегл                                  КАК СуммаРегл,
	|	РасчетыПоСрокамОстатки.ДолгУпр                                   КАК СуммаУпр,
	|
	|	РасчетыПоСрокамОстатки.ВалютаДокумента                           КАК ВалютаДокумента,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)  КАК СтатьяДвиженияДенежныхСредств,
	|	&ИдентификаторНеиспользуемойФинЗаписи                            КАК ИдентификаторФинЗаписи,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка) КАК НастройкаХозяйственнойОперации,
	|	ВЫБОР 
	|		КОГДА ВтПараметрыРасчета.ПараметрПорядок <> """" ТОГДА ВтПараметрыРасчета.ПараметрДатаПереоценки
	|		ИНАЧЕ РасчетыПоСрокамОстатки.Период
	|	КОНЕЦ                                                            КАК ДатаПереоценки,
	|	РасчетыПоСрокамОстатки.СвязанныйДокумент                         КАК СвязанныйДокумент,
	|	ИСТИНА                                                           КАК ЭтоОстаток
	|ИЗ
	|	ВТРасчетыПоСрокамОстатки КАК РасчетыПоСрокамОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтОсновныеПараметрыРасчета КАК ВтПараметрыРасчета
	|			ПО РасчетыПоСрокамОстатки.ОбъектРасчетов = ВтПараметрыРасчета.ПараметрОбъектРасчетов
	|				И РасчетыПоСрокамОстатки.АналитикаУчетаПоПартнерам = ВтПараметрыРасчета.ПараметрАналитикаУчетаПоПартнерам
	|				И РасчетыПоСрокамОстатки.ВалютаРасчетов = ВтПараметрыРасчета.ПараметрВалютаРасчетов
	|ГДЕ
	|	РасчетыПоСрокамОстатки.ЕстьДолг) КАК ВложенныйЗапрос
	|;
	|ВЫБРАТЬ
	|	РасчетыПоСрокам.Период                            КАК Период,
	|	РасчетыПоСрокам.ОбъектРасчетов                    КАК ОбъектРасчетов,
	|	РасчетыПоСрокам.АналитикаУчетаПоПартнерам         КАК АналитикаУчетаПоПартнерам,
	|	РасчетыПоСрокам.ВалютаРасчетов                    КАК ВалютаРасчетов,
	|	РасчетыПоСрокам.ДатаПлановогоПогашения            КАК ДатаПлановогоПогашения,
	|	РасчетыПоСрокам.ДатаВозникновения                 КАК ДатаВозникновения,
	|	РасчетыПоСрокам.ПорядокОперации                   КАК ПорядокОперации,
	|	РасчетыПоСрокам.ПорядокЗачетаПоДатеПлатежа        КАК ПорядокЗачетаПоДатеПлатежа,
	|	РасчетыПоСрокам.Регистратор                       КАК Регистратор,
	|	РасчетыПоСрокам.РасчетныйДокумент                 КАК РасчетныйДокумент,
	|	РасчетыПоСрокам.ХозяйственнаяОперация             КАК ХозяйственнаяОперация,
	|	РасчетыПоСрокам.КорОбъектРасчетов                 КАК КорОбъектРасчетов,
	|	РасчетыПоСрокам.КорАналитикаУчетаПоПартнерам      КАК КорАналитикаУчетаПоПартнерам,	
	|	РасчетыПоСрокам.АналитикаУчетаПоПартнерамПриемник КАК АналитикаУчетаПоПартнерамПриемник,
	|	РасчетыПоСрокам.ОбъектРасчетовПриемник            КАК ОбъектРасчетовПриемник,
	|	РасчетыПоСрокам.ВалютаПриемник                    КАК ВалютаПриемник,
	|	СУММА(РасчетыПоСрокам.СуммаПриемник)              КАК СуммаПриемник,
	|	РасчетыПоСрокам.ПоДаннымОбъектаРасчетовИсточника  КАК ПоДаннымОбъектаРасчетовИсточника,
	|	РасчетыПоСрокам.Сторно                            КАК Сторно,
	|
	|	СУММА(РасчетыПоСрокам.Сумма)                      КАК Сумма,
	|	СУММА(РасчетыПоСрокам.Сумма)                      КАК СуммаДляРаспределения,
	|	СУММА(РасчетыПоСрокам.Сумма)                      КАК ИсходнаяСумма,
	|	СУММА(РасчетыПоСрокам.СуммаРегл)                  КАК СуммаРегл,
	|	СУММА(РасчетыПоСрокам.СуммаРегл)                  КАК СуммаРеглДляПереоценки,
	|	СУММА(РасчетыПоСрокам.СуммаРегл)                  КАК ИсходнаяСуммаРегл,
	|	СУММА(РасчетыПоСрокам.СуммаУпр)                   КАК СуммаУпр,
	|	СУММА(РасчетыПоСрокам.СуммаУпр)                   КАК СуммаУпрДляПереоценки,
	|	СУММА(РасчетыПоСрокам.СуммаУпр)                   КАК ИсходнаяСуммаУпр,
	|
	|	РасчетыПоСрокам.ЭтоОстаток                        КАК ПриходДобавлен,
	|	РасчетыПоСрокам.ЭтоОстаток                        КАК ПланОтгрузокПоставокСписан,
	|	РасчетыПоСрокам.Сумма <> 0                        КАК ЕстьОстаток,
	|	РасчетыПоСрокам.ЭтоОстаток                        КАК ЭтоОстаток,
	|
	|	РасчетыПоСрокам.ВалютаДокумента                   КАК ВалютаДокумента,
	|	РасчетыПоСрокам.СтатьяДвиженияДенежныхСредств     КАК СтатьяДвиженияДенежныхСредств,
	|	РасчетыПоСрокам.ИдентификаторФинЗаписи            КАК ИдентификаторФинЗаписи,
	|	РасчетыПоСрокам.НастройкаХозяйственнойОперации    КАК НастройкаХозяйственнойОперации,
	|	РасчетыПоСрокам.ДатаПереоценки                    КАК ДатаПереоценки,
	|	РасчетыПоСрокам.СвязанныйДокумент                 КАК СвязанныйДокумент,
	|
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(РасчетыПоСрокам.Период, ДЕНЬ) >= ВтПараметрыРасчета.ПараметрНачалоДняПорядка
	|			ТОГДА РасчетыПоСрокам.Период
	|		ИНАЧЕ ВтПараметрыРасчета.ПараметрНачалоДняПорядка
	|	КОНЕЦ                                                                               КАК ПериодЗачета,
	|
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(РасчетыПоСрокам.Период, ДЕНЬ) >= ВтПараметрыРасчета.ПараметрНачалоДняПорядка
	|			ТОГДА РасчетыПоСрокам.ПорядокОперации
	|		ИНАЧЕ ВтПараметрыРасчета.ПараметрПорядок
	|	КОНЕЦ                                                                               КАК ПорядокЗачета,
	|
	|	РасчетыПоСрокам.ВалютаДокумента = ВтПараметрыРасчета.ПараметрВалютаРегламентированногоУчета 
	|		ИЛИ ВтПараметрыРасчета.ПараметрВалютаРасчетов = ВтПараметрыРасчета.ПараметрВалютаРегламентированногоУчета
	|		ИЛИ РасчетыПоСрокам.ХозяйственнаяОперация В (&ОперацииСРучнымКурсом)              КАК РучнойКурсРегл,
	|	РасчетыПоСрокам.ВалютаДокумента = &ВалютаУпр 
	|		ИЛИ ВтПараметрыРасчета.ПараметрВалютаРасчетов =&ВалютаУпр
	|		ИЛИ РасчетыПоСрокам.ХозяйственнаяОперация В (&ОперацииСРучнымКурсом)              КАК РучнойКурсУпр,
	|	ВЫБОР
	|		КОГДА ВтПараметрыРасчета.ПараметрЭтоРасчетыСКлиентами
	|			 	И (РасчетыПоСрокам.Регистратор ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств
	|					ИЛИ РасчетыПоСрокам.Регистратор ССЫЛКА Документ.РасходныйКассовыйОрдер)
	|			ИЛИ НЕ ВтПараметрыРасчета.ПараметрЭтоРасчетыСКлиентами
	|				И (РасчетыПоСрокам.Регистратор ССЫЛКА Документ.ПоступлениеБезналичныхДенежныхСредств
	|					ИЛИ РасчетыПоСрокам.Регистратор ССЫЛКА Документ.ПриходныйКассовыйОрдер)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                                                               КАК ЭтоВозвратАванса,
	|	ТИПЗНАЧЕНИЯ(РасчетыПоСрокам.Регистратор) В (
	|		ТИП(Документ.КорректировкаРеализации), ТИП(Документ.КорректировкаПриобретения)) КАК ЭтоКорректировка
	|
	|ИЗ
	|	ВТРасчетыОтгрузкиПоставки КАК РасчетыПоСрокам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтОсновныеПараметрыРасчета КАК ВтПараметрыРасчета
	|			ПО РасчетыПоСрокам.ОбъектРасчетов = ВтПараметрыРасчета.ПараметрОбъектРасчетов
	|				И РасчетыПоСрокам.АналитикаУчетаПоПартнерам = ВтПараметрыРасчета.ПараметрАналитикаУчетаПоПартнерам
	|				И РасчетыПоСрокам.ВалютаРасчетов = ВтПараметрыРасчета.ПараметрВалютаРасчетов
	|СГРУППИРОВАТЬ ПО
	|	РасчетыПоСрокам.ОбъектРасчетов,
	|	РасчетыПоСрокам.АналитикаУчетаПоПартнерам,
	|	РасчетыПоСрокам.ВалютаРасчетов,
	|	ВтПараметрыРасчета.ПараметрПорядок,
	|	ВтПараметрыРасчета.ПараметрВалютаРегламентированногоУчета,
	|	ВтПараметрыРасчета.ПараметрВалютаРасчетов,
	|	ВтПараметрыРасчета.ПараметрЭтоРасчетыСКлиентами,
	|	ВтПараметрыРасчета.ПараметрНачалоДняПорядка,
	|	РасчетыПоСрокам.Период,
	|	РасчетыПоСрокам.ДатаПлановогоПогашения,
	|	РасчетыПоСрокам.ДатаВозникновения,
	|	РасчетыПоСрокам.ПорядокОперации,
	|	РасчетыПоСрокам.ПорядокЗачетаПоДатеПлатежа,
	|	РасчетыПоСрокам.Регистратор,
	|	РасчетыПоСрокам.РасчетныйДокумент,
	|	РасчетыПоСрокам.ХозяйственнаяОперация,
	|	РасчетыПоСрокам.КорОбъектРасчетов,
	|	РасчетыПоСрокам.КорАналитикаУчетаПоПартнерам,
	|	РасчетыПоСрокам.АналитикаУчетаПоПартнерамПриемник,
	|	РасчетыПоСрокам.ОбъектРасчетовПриемник,
	|	РасчетыПоСрокам.ВалютаПриемник,
	|	РасчетыПоСрокам.ПоДаннымОбъектаРасчетовИсточника,
	|	РасчетыПоСрокам.Сторно,
	|	РасчетыПоСрокам.ЭтоОстаток,
	|	РасчетыПоСрокам.Сумма <> 0,
	|	РасчетыПоСрокам.ВалютаДокумента,
	|	РасчетыПоСрокам.СтатьяДвиженияДенежныхСредств,
	|	РасчетыПоСрокам.ИдентификаторФинЗаписи,
	|	РасчетыПоСрокам.НастройкаХозяйственнойОперации,
	|	РасчетыПоСрокам.ДатаПереоценки,
	|	РасчетыПоСрокам.СвязанныйДокумент
	|УПОРЯДОЧИТЬ ПО
	|	РасчетыПоСрокам.ПорядокОперации ВОЗР,
	|	РасчетыПоСрокам.ПорядокЗачетаПоДатеПлатежа ВОЗР
	|";
	#КонецОбласти
	
	Если НЕ ЭтоРасчетыСКлиентами Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"РасчетыДвижения","РасчетыСПоставщикамиДвижения");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ВТРасчетыОтгрузкиПоставкиДвижения","ВТПоставщикиРасчетыОтгрузкиПоставкиДвижения");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ВТРасчетыОтгрузкиПоставки","ВТПоставщикиРасчетыОтгрузкиПоставки");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ВТРасчетыПоСрокамОстатки","ВТРасчетыПоСрокамОстаткиПоставщики");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"КОтгрузке ","КПоступлению ");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"РасчетыДвижения","РасчетыСКлиентамиДвижения");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ВТРасчетыОтгрузкиПоставкиДвижения","ВТКлиентыРасчетыОтгрузкиПоставкиДвижения");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ВТРасчетыОтгрузкиПоставки","ВТКлиентыРасчетыОтгрузкиПоставки");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ВТРасчетыПоСрокамОстатки","ВТРасчетыПоСрокамОстаткиКлиенты");
	КонецЕсли;
	
	Результат       = Запрос.Выполнить();
	РасчетыОтгрузки = Результат.Выгрузить();
	РасчетыОтгрузки.Индексы.Добавить("ЕстьОстаток, Регистратор");
	Возврат РасчетыОтгрузки;
	
КонецФункции

//Возвращает таблицу курсов валют на промежуток между первой записью расчетов и текущей датой.
Функция ПолучитьКурсыВалют(Запрос, ДатаНачала, ГлобальныеПеременные)
	
	Запрос.УстановитьПараметр("ДатаНачала",                 ДатаНачала);
	Запрос.УстановитьПараметр("ВалютаРасчетов",             ГлобальныеПеременные.ВалютаРасчетов);
	Запрос.УстановитьПараметр("ВалютаУпр",                  ГлобальныеПеременные.ВалютаУправленческогоУчета);
	Запрос.УстановитьПараметр("ВалютаРегл",                 ГлобальныеПеременные.ВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("Договор",                    ГлобальныеПеременные.Договор);
	Запрос.УстановитьПараметр("КурсУстановленныйВДоговоре", ГлобальныеПеременные.ВариантКурсаДоговора = Перечисления.ВариантыКурсаДоговора.УстановленныйВДоговоре);
	
	Если ГлобальныеПеременные.ВариантКурсаДоговора = Перечисления.ВариантыКурсаДоговора.УстановленныйВДоговоре Тогда
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Курсы.Дата КАК Дата,
		|	СУММА(Курсы.КурсРегл) КАК КурсРегл,
		|	СУММА(Курсы.КурсУпр) КАК КурсУпр
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТаблицаДат.Дата КАК Дата,
		|		ВЫБОР КОГДА &ВалютаРасчетов <> &ВалютаРегл
		|				ТОГДА ЕСТЬNULL(КурсыВалютыРасчетов.КурсЧислитель / КурсыВалютыРасчетов.КурсЗнаменатель,0)
		|			ИНАЧЕ 1
		|		КОНЕЦ КАК КурсРегл,
		|		ВЫБОР КОГДА &ВалютаРасчетов = &ВалютаУпр
		|				ТОГДА ЕСТЬNULL(КурсыВалютыРасчетов.КурсЧислитель / КурсыВалютыРасчетов.КурсЗнаменатель,0)
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК КурсУпр
		|	ИЗ
		|		ТаблицаДат КАК ТаблицаДат
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютРасчетовПоДоговорам КАК КурсыВалютыРасчетов
		|				ПО ТаблицаДат.Дата = КурсыВалютыРасчетов.Период
		|					И КурсыВалютыРасчетов.Договор = &Договор
		|	
		|	ОБЪЕДИНИТЬ ВСЕ 
		|	
		|	ВЫБРАТЬ
		|		ТаблицаДат.Дата КАК Дата,
		|		0 КАК КурсРегл, 
		|		ВЫБОР КОГДА &ВалютаРасчетов = &ВалютаУпр
		|			ТОГДА 0
		|		ИНАЧЕ
		|			ВЫБОР КОГДА &ВалютаРегл <> &ВалютаУпр
		|					ТОГДА ЕСТЬNULL(КурсыВалютыУпр.КурсЧислитель / КурсыВалютыУпр.КурсЗнаменатель,0)
		|				ИНАЧЕ 1
		|			КОНЕЦ 
		|		КОНЕЦ КАК КурсУпр
		|	ИЗ
		|		ТаблицаДат КАК ТаблицаДат
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют КАК КурсыВалютыУпр
		|				ПО ТаблицаДат.Дата = КурсыВалютыУпр.Период
		|					И КурсыВалютыУпр.Валюта = &ВалютаУпр
		|					И КурсыВалютыУпр.БазоваяВалюта = &ВалютаРегл) КАК Курсы
		|
		|СГРУППИРОВАТЬ ПО
		|	Дата
		|УПОРЯДОЧИТЬ ПО
		|	Дата ВОЗР
		|";
	Иначе
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Курсы.Дата КАК Дата,
		|	СУММА(Курсы.КурсРегл) КАК КурсРегл,
		|	СУММА(Курсы.КурсУпр) КАК КурсУпр
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТаблицаДат.Дата КАК Дата,
		|		ЕСТЬNULL(ВЫБОР КОГДА КурсыВалютыРасчетов.Валюта = &ВалютаРасчетов И &ВалютаРасчетов <> &ВалютаРегл
		|					ТОГДА КурсыВалютыРасчетов.КурсЧислитель / КурсыВалютыРасчетов.КурсЗнаменатель
		|					ИНАЧЕ 0
		|				КОНЕЦ,
		|				ВЫБОР КОГДА &ВалютаРегл = &ВалютаРасчетов
		|					ТОГДА 1
		|					ИНАЧЕ 0
		|				КОНЕЦ) КАК КурсРегл,
		|		ЕСТЬNULL(ВЫБОР КОГДА КурсыВалютыРасчетов.Валюта = &ВалютаУпр И &ВалютаРегл <> &ВалютаУпр
		|					ТОГДА КурсыВалютыРасчетов.КурсЧислитель / КурсыВалютыРасчетов.КурсЗнаменатель
		|					ИНАЧЕ 0
		|				КОНЕЦ,
		|				ВЫБОР КОГДА &ВалютаРегл = &ВалютаУпр
		|						ТОГДА 1
		|					ИНАЧЕ 0
		|				КОНЕЦ) КАК КурсУпр
		|	ИЗ
		|		ТаблицаДат КАК ТаблицаДат
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют КАК КурсыВалютыРасчетов
		|				ПО ТаблицаДат.Дата = КурсыВалютыРасчетов.Период
		|					И КурсыВалютыРасчетов.БазоваяВалюта = &ВалютаРегл
		|					И КурсыВалютыРасчетов.Валюта В (&ВалютаРасчетов,&ВалютаУпр)) КАК Курсы
		|
		|СГРУППИРОВАТЬ ПО
		|	Дата
		|УПОРЯДОЧИТЬ ПО
		|	Дата ВОЗР
		|";
	КонецЕсли;
	
	КурсыВалюты =  Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СУММА(Курсы.КурсРегл) КАК КурсРегл,
	|	СУММА(Курсы.КурсУпр) КАК КурсУпр
	|ИЗ
	|	(ВЫБРАТЬ
	|		КурсыВалютыРасчетов.Период КАК Дата,
	|		ВЫБОР КОГДА НЕ &КурсУстановленныйВДоговоре И КурсыВалютыРасчетов.Валюта = &ВалютаРасчетов 
	|			ТОГДА КурсыВалютыРасчетов.КурсЧислитель / КурсыВалютыРасчетов.КурсЗнаменатель
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК КурсРегл,
	|		ВЫБОР КОГДА НЕ (&КурсУстановленныйВДоговоре И &ВалютаУпр = &ВалютаРасчетов) И КурсыВалютыРасчетов.Валюта = &ВалютаУпр 
	|			ТОГДА КурсыВалютыРасчетов.КурсЧислитель / КурсыВалютыРасчетов.КурсЗнаменатель
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК КурсУпр
	|	ИЗ
	|		РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&ДатаНачала, БазоваяВалюта = &ВалютаРегл И Валюта В (&ВалютаРасчетов,&ВалютаУпр)) КАК КурсыВалютыРасчетов
	|	
	|	ОБЪЕДИНИТЬ ВСЕ 
	|	
	|	ВЫБРАТЬ
	|		КурсыВалютыРасчетов.Период КАК Дата,
	|		КурсыВалютыРасчетов.КурсЧислитель / КурсыВалютыРасчетов.КурсЗнаменатель  КАК КурсРегл,
	|		ВЫБОР КОГДА &КурсУстановленныйВДоговоре И &ВалютаУпр = &ВалютаРасчетов
	|			ТОГДА КурсыВалютыРасчетов.КурсЧислитель / КурсыВалютыРасчетов.КурсЗнаменатель
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК КурсУпр
	|	ИЗ
	|		РегистрСведений.КурсыВалютРасчетовПоДоговорам.СрезПоследних(&ДатаНачала, Договор = &Договор) КАК КурсыВалютыРасчетов
	|	ГДЕ &КурсУстановленныйВДоговоре) КАК Курсы
	|;";
	
	КурсыВалютСрезПоследних = Запрос.Выполнить().Выгрузить();
	
	ТекущийКурсРегл = ?(КурсыВалютСрезПоследних.Количество() > 0, КурсыВалютСрезПоследних[0].КурсРегл, 1);
	ТекущийКурсУпр = ?(КурсыВалютСрезПоследних.Количество() > 0, КурсыВалютСрезПоследних[0].КурсУпр, 1);
	
	ТекущийКурсРегл = ?(ЗначениеЗаполнено(ТекущийКурсРегл), ТекущийКурсРегл, 1);
	ТекущийКурсУпр =  ?(ЗначениеЗаполнено(ТекущийКурсУпр), ТекущийКурсУпр, 1);
	
	СтрокиСПустымКурсомРегл = КурсыВалюты.НайтиСтроки(Новый Структура("КурсРегл", 0));
	Для Каждого СтрокаПустогоКурса ИЗ СтрокиСПустымКурсомРегл Цикл
		Если КурсыВалюты.Индекс(СтрокаПустогоКурса) = 0 Тогда 
			СтрокаПустогоКурса.КурсРегл = ТекущийКурсРегл;
			Если НЕ ЗначениеЗаполнено(СтрокаПустогоКурса.КурсУпр) Тогда
				СтрокаПустогоКурса.КурсУпр = ТекущийКурсУпр;
			КонецЕсли;
		Иначе
			СтрокаПустогоКурса.КурсРегл = КурсыВалюты[КурсыВалюты.Индекс(СтрокаПустогоКурса)-1].КурсРегл;
			Если НЕ ЗначениеЗаполнено(СтрокаПустогоКурса.КурсУпр) Тогда
				СтрокаПустогоКурса.КурсУпр = КурсыВалюты[КурсыВалюты.Индекс(СтрокаПустогоКурса)-1].КурсУпр;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СтрокиСПустымКурсомУпр = КурсыВалюты.НайтиСтроки(Новый Структура("КурсУпр", 0));
	Для Каждого СтрокаПустогоКурса ИЗ СтрокиСПустымКурсомУпр Цикл
		Если КурсыВалюты.Индекс(СтрокаПустогоКурса) = 0 Тогда 
			СтрокаПустогоКурса.КурсУпр = ТекущийКурсУпр;
		Иначе
			СтрокаПустогоКурса.КурсУпр = КурсыВалюты[КурсыВалюты.Индекс(СтрокаПустогоКурса)-1].КурсУпр;
		КонецЕсли;
	КонецЦикла;
	
	КурсыВалюты.Индексы.Добавить("Дата");
	
	Возврат КурсыВалюты;
	
КонецФункции

//Возвращает таблицу накладных и зачтенных на них, на момент пересчета, авансов.
Функция ПолучитьДанныеНакладных(Запрос, ЭтоРасчетыСКлиентами = Ложь)
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Таблица.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Таблица.ВалютаРасчетов КАК ВалютаРасчетов,
	|	Таблица.СвязанныйДокумент КАК СвязанныйДокумент
	|ПОМЕСТИТЬ ТаблицаСвязанныеДокументы
	|ИЗ
	|	(ВЫБРАТЬ
	|		Таблица.ОбъектРасчетов КАК ОбъектРасчетов,
	|		Таблица.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		Таблица.ВалютаРасчетов КАК ВалютаРасчетов,
	|		Таблица.СвязанныйДокумент КАК СвязанныйДокумент
	|	Из
	|		РасчетыОтгрузкиПоставки КАК Таблица
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Таблица.ОбъектРасчетов КАК ОбъектРасчетов,
	|		Таблица.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		Таблица.ВалютаРасчетов КАК ВалютаРасчетов,
	|		Таблица.СвязанныйДокумент КАК СвязанныйДокумент
	|	Из
	|		ТаблицаОплат КАК Таблица) КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОсновныеПараметрыРасчета.ПараметрТипРасчетов КАК ТипРасчетов,
	|	ОсновныеПараметрыРасчета.ПараметрАналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ОсновныеПараметрыРасчета.ПараметрОбъектРасчетов КАК ОбъектРасчетов,
	|	ОсновныеПараметрыРасчета.ПараметрВалютаРасчетов КАК ВалютаРасчетов,
	|	ОсновныеПараметрыРасчета.ПараметрПорядок КАК Порядок,
	|	ОсновныеПараметрыРасчета.ПараметрРегистратор КАК Регистратор,
	|	ТаблицаСвязанныеДокументы.СвязанныйДокумент КАК СвязанныйДокумент
	|ПОМЕСТИТЬ ВТСвязанныеДокументы
	|ИЗ
	|	ВтОсновныеПараметрыРасчета КАК ОсновныеПараметрыРасчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаСвязанныеДокументы КАК ТаблицаСвязанныеДокументы
	|		ПО ОсновныеПараметрыРасчета.ПараметрАналитикаУчетаПоПартнерам = ТаблицаСвязанныеДокументы.АналитикаУчетаПоПартнерам
	|		И ОсновныеПараметрыРасчета.ПараметрОбъектРасчетов = ТаблицаСвязанныеДокументы.ОбъектРасчетов
	|		И ОсновныеПараметрыРасчета.ПараметрВалютаРасчетов = ТаблицаСвязанныеДокументы.ВалютаРасчетов
	|ГДЕ
	|	ОсновныеПараметрыРасчета.ПараметрЭтоРасчетыСКлиентами = &ПараметрЭтоРасчетыСКлиентами
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРасчетов,
	|	АналитикаУчетаПоПартнерам,
	|	ВалютаРасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТРасчетыПоСрокамДо.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ВТРасчетыПоСрокамДо.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ВТРасчетыПоСрокамДо.Валюта КАК ВалютаРасчетов,
	|	ВТРасчетыПоСрокамДо.ДокументРегистратор КАК Накладная,
	|	СУММА(ЕСТЬNULL(ВЫБОР
	|		КОГДА ВТРасчетыПоСрокамДо.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА ВТРасчетыПоСрокамДо.Предоплата - ВТРасчетыПоСрокамДо.Долг
	|		ИНАЧЕ ВТРасчетыПоСрокамДо.Долг
	|	КОНЕЦ, 0)) КАК Сумма,
	|	СУММА(ЕСТЬNULL(ВЫБОР
	|		КОГДА ВТРасчетыПоСрокамДо.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА ВТРасчетыПоСрокамДо.ПредоплатаРегл - ВТРасчетыПоСрокамДо.ДолгРегл
	|		ИНАЧЕ ВТРасчетыПоСрокамДо.ДолгРегл
	|	КОНЕЦ, 0)) КАК СуммаРегл,
	|	СУММА(ЕСТЬNULL(ВЫБОР
	|		КОГДА ВТРасчетыПоСрокамДо.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА ВТРасчетыПоСрокамДо.ПредоплатаУпр - ВТРасчетыПоСрокамДо.ДолгУпр
	|		ИНАЧЕ ВТРасчетыПоСрокамДо.ДолгУпр
	|	КОНЕЦ, 0)) КАК СуммаУпр
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК ВТРасчетыПоСрокамДо
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСвязанныеДокументы КАК ТаблицаСвязанныхДокументов
	|		ПО ВТРасчетыПоСрокамДо.ДокументРегистратор = ТаблицаСвязанныхДокументов.СвязанныйДокумент
	|		И ВТРасчетыПоСрокамДо.АналитикаУчетаПоПартнерам = ТаблицаСвязанныхДокументов.АналитикаУчетаПоПартнерам
	|		И ВТРасчетыПоСрокамДо.ОбъектРасчетов = ТаблицаСвязанныхДокументов.ОбъектРасчетов
	|		И ВТРасчетыПоСрокамДо.Валюта = ТаблицаСвязанныхДокументов.ВалютаРасчетов
	|		И ВТРасчетыПоСрокамДо.ПорядокОперации < ТаблицаСвязанныхДокументов.Порядок
	|		И НЕ ВТРасчетыПоСрокамДо.ДокументРегистратор = ТаблицаСвязанныхДокументов.Регистратор
	|ГДЕ
	|	ВТРасчетыПоСрокамДо.Активность
	|СГРУППИРОВАТЬ ПО
	|	ВТРасчетыПоСрокамДо.АналитикаУчетаПоПартнерам,
	|	ВТРасчетыПоСрокамДо.ОбъектРасчетов,
	|	ВТРасчетыПоСрокамДо.Валюта,
	|	ВТРасчетыПоСрокамДо.ДокументРегистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаСвязанныхДокументов.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ТаблицаСвязанныхДокументов.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ТаблицаСвязанныхДокументов.ВалютаРасчетов КАК ВалютаРасчетов,
	|	СвязанныеДокументы.Ссылка КАК Накладная,
	|	СвязанныеДокументы.СуммаВзаиморасчетов КАК Сумма,
	|	СвязанныеДокументы.СуммаРегл КАК СуммаРегл,
	|	СвязанныеДокументы.СуммаУпр КАК СуммаУпр
	|ИЗ
	|	Документ.ПервичныйДокумент КАК СвязанныеДокументы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСвязанныеДокументы КАК ТаблицаСвязанныхДокументов
	|		ПО СвязанныеДокументы.Ссылка = ТаблицаСвязанныхДокументов.СвязанныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСвязанныеДокументы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТь ТаблицаСвязанныеДокументы";
	
	Если НЕ ЭтоРасчетыСКлиентами Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"РегистрНакопления.РасчетыСКлиентамиПоСрокам", "РегистрНакопления.РасчетыСПоставщикамиПоСрокам");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ВТСвязанныеДокументы", "ВТСвязанныеДокументыПоставщик");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РасчетыОтгрузкиПоставки", "ВТПоставщикиРасчетыОтгрузкиПоставки");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаОплат", "ВТТаблицаОплатПоставщики");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПараметрЭтоРасчетыСКлиентами", "ЛОЖЬ");
		
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ВТСвязанныеДокументы", "ВТСвязанныеДокументыКлиент");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РасчетыОтгрузкиПоставки", "ВТКлиентыРасчетыОтгрузкиПоставки");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаОплат", "ВТТаблицаОплатКлиенты");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПараметрЭтоРасчетыСКлиентами", "ИСТИНА");
	КонецЕсли;
	
	ТаблицаСвязанныхДокументов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаСвязанныхДокументов;
	
КонецФункции

// Остатки предоплаты на начало пересчета.
// 
// Параметры:
//  Запрос - Запрос - Запрос
// 
// Возвращаемое значение:
//  ТаблицаЗначений
Функция ОстаткиНераспределенныхАвансовПлановойОплатыНаНачалоПересчета(Запрос, ЭтоРасчетыСКлиентами = Ложь)
	
	Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Остатки.ОбъектРасчетов                    КАК ОбъектРасчетов,
		|	Остатки.АналитикаУчетаПоПартнерам         КАК АналитикаУчетаПоПартнерам,
		|	Остатки.ВалютаРасчетов                    КАК ВалютаРасчетов,
		|	Остатки.РасчетныйДокумент                 КАК РасчетныйДокумент,
		|	МАКСИМУМ(Остатки.ДатаВозникновения)       КАК ДатаВозникновения,
		|	МАКСИМУМ(Остатки.ДатаПлановогоПогашения)  КАК ДатаПлановогоПогашения,
		|	МАКСИМУМ(Остатки.ПорядокОперации)         КАК ПорядокОперации
		|ПОМЕСТИТЬ ВтДокументыПредоплаты
		|ИЗ
		|	ВТРасчетыПоСрокамОстатки КАК Остатки
		|ГДЕ
		|	Остатки.Предоплата >0
		|СГРУППИРОВАТЬ ПО
		|	Остатки.ОбъектРасчетов,
		|	Остатки.АналитикаУчетаПоПартнерам,
		|	Остатки.ВалютаРасчетов,
		|	Остатки.РасчетныйДокумент
		|;
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.ОбъектРасчетов КАК ОбъектРасчетов,
		|	ВложенныйЗапрос.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|	ВложенныйЗапрос.ВалютаРасчетов КАК ВалютаРасчетов,
		|	ВложенныйЗапрос.ДатаВозникновения КАК ДатаДвижения,
		|	ВложенныйЗапрос.ДокументПлан      КАК ДокументПлан,
		|	ВложенныйЗапрос.ДатаВозникновения КАК ДатаВозникновения,
		|	ВложенныйЗапрос.ДатаПлановогоПогашения   КАК ДатаПлановогоПогашения,
		|
		|	ВложенныйЗапрос.ДокументПлан      КАК Регистратор,
		|	ВложенныйЗапрос.ПорядокОперации   КАК ПорядокОперации,
		|	ВложенныйЗапрос.Зачтено           КАК Зачтено,
		|	ИСТИНА                            КАК Просуммировано,
		|	СУММА(ВложенныйЗапрос.Сумма)      КАК Сумма,
		|	СУММА(ВложенныйЗапрос.Сумма) > 0  КАК ОстатокПоложительный
		|ИЗ
		|	(
		|	ВЫБРАТЬ
		|		Расчеты.ОбъектРасчетов КАК ОбъектРасчетов,
		|		Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|		Расчеты.ВалютаРасчетов КАК ВалютаРасчетов,
		|		Расчеты.ДокументРегистратор КАК ДокументПлан,
		|		Расчеты.ДатаВозникновения   КАК ДатаВозникновения,
		|		Расчеты.ДатаПлановогоПогашения КАК ДатаПлановогоПогашения,
		|		Расчеты.ПорядокОперации     КАК ПорядокОперации,
		|		ЛОЖЬ                        КАК Зачтено,
		|		Расчеты.Предоплата          КАК Сумма
		|	ИЗ
		|		ВТРасчетыПоСрокамОстатки КАК Расчеты
		|	ГДЕ
		|		Расчеты.Предоплата > 0
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ДокументыПредоплаты.ОбъектРасчетов                   КАК ОбъектРасчетов,
		|		ДокументыПредоплаты.АналитикаУчетаПоПартнерам        КАК АналитикаУчетаПоПартнерам,
		|		ДокументыПредоплаты.ВалютаРасчетов                   КАК ВалютаРасчетов,
		|		ДокументыПредоплаты.РасчетныйДокумент                КАК ДокументПлан,
		|		ДокументыПредоплаты.ДатаВозникновения                КАК ДатаВозникновения,
		|		ДокументыПредоплаты.ДатаПлановогоПогашения           КАК ДатаПлановогоПогашения,
		|		ДокументыПредоплаты.ПорядокОперации                  КАК ПорядокОперации,
		|		ИСТИНА                                               КАК Зачтено,
		|		-ПланыОплат.КОплате                                  КАК Сумма
		|	ИЗ
		|		РегистрНакопления.РасчетыСКлиентамиПланОплат КАК ПланыОплат
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументыПредоплаты КАК ДокументыПредоплаты
		|				ПО ДокументыПредоплаты.РасчетныйДокумент = ПланыОплат.ДокументОплаты
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтОсновныеПараметрыРасчета КАК ВтПараметрыРасчета
		|			ПО ПланыОплат.ОбъектРасчетов = ВтПараметрыРасчета.ПараметрОбъектРасчетов
		|				И ПланыОплат.АналитикаУчетаПоПартнерам = ВтПараметрыРасчета.ПараметрАналитикаУчетаПоПартнерам
		|				И ПланыОплат.Валюта = ВтПараметрыРасчета.ПараметрВалютаРасчетов
		|	ГДЕ
		|		ПланыОплат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|		И ПланыОплат.НераспределенныйАванс
		|		И ПланыОплат.Период < ВтПараметрыРасчета.ПараметрНачалоДняПорядка
		|) КАК ВложенныйЗапрос
		|ГДЕ 
		|	ТИПЗНАЧЕНИЯ(ВложенныйЗапрос.ДокументПлан) НЕ В (ТИП(Документ.КорректировкаПриобретения), ТИП(Документ.КорректировкаРеализации))
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.ОбъектРасчетов,
		|	ВложенныйЗапрос.АналитикаУчетаПоПартнерам,
		|	ВложенныйЗапрос.ВалютаРасчетов,
		|	ВложенныйЗапрос.ДокументПлан,
		|	ВложенныйЗапрос.ДатаВозникновения,
		|	ВложенныйЗапрос.ДатаПлановогоПогашения,
		|	ВложенныйЗапрос.Зачтено,
		|	ВложенныйЗапрос.ПорядокОперации
		|УПОРЯДОЧИТЬ ПО
		|	ОбъектРасчетов,
		|	АналитикаУчетаПоПартнерам,
		|	ВалютаРасчетов,
		|	ДатаВозникновения
		|";
	
	Если НЕ ЭтоРасчетыСКлиентами Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"РегистрНакопления.РасчетыСКлиентамиПланОплат ","РегистрНакопления.РасчетыСПоставщикамиПланОплат ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ВТРасчетыПоСрокамОстатки","ВТРасчетыПоСрокамОстаткиПоставщики");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ВтДокументыПредоплаты","ВтДокументыПредоплатыПоставщики");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ВТРасчетыПоСрокамОстатки","ВТРасчетыПоСрокамОстаткиКлиенты");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ВтДокументыПредоплаты","ВтДокументыПредоплатыКлиенты");
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьПриходныеДвиженияПоПлановымОплатам(Запрос, ГлобальныеПеременные, ЭтоРасчетыСКлиентами = Ложь)
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Расчеты.ОбъектРасчетов                              КАК ОбъектРасчетов,
	|	Расчеты.АналитикаУчетаПоПартнерам                   КАК АналитикаУчетаПоПартнерам,
	|	Расчеты.Валюта                                      КАК ВалютаРасчетов,
	|	Расчеты.ДатаРегистратора                            КАК ДатаВозникновения,
	|	НАЧАЛОПЕРИОДА(Расчеты.ДатаРегистратора,ДЕНЬ)        КАК Дата,
	|	Расчеты.Регистратор                                 КАК Регистратор,
	|	Расчеты.ДатаПлатежа                                 КАК ДатаПлановогоПогашения,
	|	Расчеты.ВариантОплаты                               КАК ВариантОплаты,
	|	СУММА(Расчеты.КОплате)                              КАК Сумма
	|ИЗ
	|	РасчетыДвижения КАК Расчеты
	|ГДЕ
	|	(ТИПЗНАЧЕНИЯ(Расчеты.Регистратор) В (&ТипыРегистраторов)
	|		ИЛИ &РеализацияВПути)
	|	И Расчеты.ВидДвижения = &Приход И Расчеты.КОплате > 0
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.ОбъектРасчетов,
	|	Расчеты.АналитикаУчетаПоПартнерам,
	|	Расчеты.Валюта,
	|	Расчеты.ДатаРегистратора,
	|	НАЧАЛОПЕРИОДА(Расчеты.ДатаРегистратора,ДЕНЬ),
	|	Расчеты.Регистратор,
	|	Расчеты.ДатаПлатежа,
	|	Расчеты.ВариантОплаты
	|УПОРЯДОЧИТЬ ПО
	|	Расчеты.ОбъектРасчетов,
	|	Расчеты.АналитикаУчетаПоПартнерам,
	|	Расчеты.Валюта,
	|	Расчеты.ДатаРегистратора
	|";
	
	Если НЕ ЭтоРасчетыСКлиентами Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"РасчетыДвижения","РасчетыСПоставщикамиДвижения");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&Приход","ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&РеализацияВПути","ЛОЖЬ");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"РасчетыДвижения","РасчетыСКлиентамиДвижения");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&Приход","ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&РеализацияВПути","(ВЫРАЗИТЬ(Расчеты.Регистратор КАК Документ.РеализацияТоваровУслуг).Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыРеализацийТоваровУслуг.Отгружено)
																	|	И ВЫРАЗИТЬ(Расчеты.Регистратор КАК Документ.РеализацияТоваровУслуг).ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту),
																	|												ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиентуРеглУчет),
																	|												ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности),
																	|												ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияЧерезКомиссионера),
																	|												ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияЧерезКомиссионераБезПереходаПраваСобственности))
																	| ИЛИ ВЫРАЗИТЬ(Расчеты.Регистратор КАК Документ.РеализацияУслугПрочихАктивов).Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыРеализацийТоваровУслуг.Отгружено)
																	|	И ВЫРАЗИТЬ(Расчеты.Регистратор КАК Документ.РеализацияУслугПрочихАктивов).ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности),
																	|									ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияОСсОтложеннымПереходомПрав)))");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТипыРегистраторов", СписокТиповРегистраторовПланов());
	
	Результат  = Запрос.Выполнить();
	ПриходныеДвиженияГрафика = Результат.Выгрузить();
	
	Возврат ПриходныеДвиженияГрафика;
	
КонецФункции

//Возвращает таблицу закрывающих планы движений накладных
Функция ПолучитьУточненияГрафиковОплат(Запрос, ГлобальныеПеременные, ЭтоРасчетыСКлиентами = Ложь)
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Расчеты.ОбъектРасчетов                              КАК ОбъектРасчетов,
	|	Расчеты.АналитикаУчетаПоПартнерам                   КАК АналитикаУчетаПоПартнерам,
	|	Расчеты.Валюта                                      КАК ВалютаРасчетов,
	|	НАЧАЛОПЕРИОДА(Расчеты.ДатаРегистратора,ДЕНЬ)        КАК ДатаДвижения,
	|	Расчеты.ДатаРегистратора                            КАК ДатаВозникновения,
	|	ВЫБОР КОГДА Расчеты.ДатаПлатежа = ДАТАВРЕМЯ(1,1,1)
	|		ТОГДА НАЧАЛОПЕРИОДА(Расчеты.ДатаРегистратора, ДЕНЬ)
	|		ИНАЧЕ Расчеты.ДатаПлатежа
	|	КОНЕЦ                                               КАК ДатаПлановогоПогашения,
	|	Расчеты.ПорядокОперации                             КАК ПорядокОперации,
	|	Расчеты.ПорядокЗачетаПоДатеПлатежа                  КАК ПорядокЗачетаПоДатеПлатежа,
	|	Расчеты.Регистратор                                 КАК Регистратор,
	|	ВЫБОР КОГДА ВтПараметрыРасчета.ПараметрГрафикВДоговоре
	|			ТОГДА ВтПараметрыРасчета.ПараметрГрафикИсполненияДоговора
	|			ИНАЧЕ Расчеты.ПродажаПоЗаказу
	|	КОНЕЦ КАК Заказ,
	|	ВЫБОР КОГДА Расчеты.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляОплатыКлиентом.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляОплатыКлиентом.КредитПослеОтгрузки)
	|		КОГДА Расчеты.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляОплатыПоставщику.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляОплатыПоставщику.КредитПослеПоступления)
	|		ИНАЧЕ Расчеты.ВариантОплаты 
	|	КОНЕЦ                                               КАК ВариантОплаты,
	|	Расчеты.КОплате                                     КАК Сумма
	|ИЗ
	|	РасчетыДвижения КАК Расчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтОсновныеПараметрыРасчета КАК ВтПараметрыРасчета
	|			ПО Расчеты.ОбъектРасчетов = ВтПараметрыРасчета.ПараметрОбъектРасчетов
	|				И Расчеты.АналитикаУчетаПоПартнерам = ВтПараметрыРасчета.ПараметрАналитикаУчетаПоПартнерам
	|				И Расчеты.Валюта = ВтПараметрыРасчета.ПараметрВалютаРасчетов
	|ГДЕ
	|	 Расчеты.ВидДвижения = &Расход И Расчеты.КОплате > 0
	|	И (Расчеты.ПродажаПоЗаказу НЕ В (&ПустыеСсылкиНаЗаказы) ИЛИ ВтПараметрыРасчета.ПараметрГрафикВДоговоре)
	|	И ТИПЗНАЧЕНИЯ(Расчеты.Регистратор) В (&СписокТиповУточняющихПланы)
	|УПОРЯДОЧИТЬ ПО
	|	Расчеты.ОбъектРасчетов,
	|	Расчеты.АналитикаУчетаПоПартнерам,
	|	Расчеты.Валюта,
	|	Расчеты.ДатаРегистратора,
	|	Расчеты.Период
	|";
	Запрос.УстановитьПараметр("СписокТиповУточняющихПланы", СписокТиповУточняющихПланы());
	
	Если НЕ ЭтоРасчетыСКлиентами Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"РегистрНакопления.РасчетыСКлиентами ","РегистрНакопления.РасчетыСПоставщиками ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&Расход","ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ПродажаПоЗаказу","ЗакупкаПоЗаказу");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"РасчетыДвижения","РасчетыСПоставщикамиДвижения");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&Расход","ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"РасчетыДвижения","РасчетыСКлиентамиДвижения");
	КонецЕсли;
	
	Результат  = Запрос.Выполнить();
	УточненияГрафиковОплат = Результат.Выгрузить();
	УточненияГрафиковОплат.Индексы.Добавить("Заказ");
	
	Возврат УточненияГрафиковОплат;
	
КонецФункции

Функция ПолучитьПриходныеДвиженияПоПлановымОтгрузкам(Запрос, ГлобальныеПеременные, ЭтоРасчетыСКлиентами = Ложь)
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Расчеты.ОбъектРасчетов                              КАК ОбъектРасчетов,
	|	Расчеты.АналитикаУчетаПоПартнерам                   КАК АналитикаУчетаПоПартнерам,
	|	Расчеты.Валюта                                      КАК ВалютаРасчетов,
	|	Расчеты.ДатаРегистратора                            КАК ДатаВозникновения,
	|	НАЧАЛОПЕРИОДА(Расчеты.ДатаРегистратора,ДЕНЬ)        КАК Дата,
	|	Расчеты.Регистратор                                 КАК Регистратор,
	|	НАЧАЛОПЕРИОДА(Расчеты.Период,ДЕНЬ)                  КАК ДатаПлановогоПогашения,
	|	Расчеты.КОтгрузке                                   КАК Сумма
	|ИЗ
	|	РасчетыДвижения КАК Расчеты
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(Расчеты.Регистратор) В (&ТипыРегистраторов)
	|	И Расчеты.ВидДвижения = &Расход И Расчеты.КОтгрузке > 0
	|УПОРЯДОЧИТЬ ПО 
	|	Расчеты.ОбъектРасчетов,
	|	Расчеты.АналитикаУчетаПоПартнерам,
	|	Расчеты.Валюта,
	|	Расчеты.ДатаРегистратора,
	|	Расчеты.Период
	|";
	
	Если НЕ ЭтоРасчетыСКлиентами Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"КОтгрузке","КПоступлению");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&Расход","ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"РасчетыДвижения","РасчетыСПоставщикамиДвижения");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&Расход","ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"РасчетыДвижения","РасчетыСКлиентамиДвижения");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТипыРегистраторов", СписокТиповРегистраторовПланов());
	
	Результат  = Запрос.Выполнить();
	ПриходныеДвиженияГрафикаОтгрузки = Результат.Выгрузить();
	
	Возврат ПриходныеДвиженияГрафикаОтгрузки;
	
КонецФункции

//Возвращает таблицу закрывающих планы движений накладных
Функция ПолучитьУточненияГрафиковОтгрузок(Запрос, ГлобальныеПеременные, ЭтоРасчетыСКлиентами = Ложь)
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(Расчеты.ДатаРегистратора,ДЕНЬ)        КАК ДатаДвижения,
	|	Расчеты.ДатаРегистратора                            КАК ДатаВозникновения,
	|	Расчеты.ОбъектРасчетов                              КАК ОбъектРасчетов,
	|	Расчеты.АналитикаУчетаПоПартнерам                   КАК АналитикаУчетаПоПартнерам,
	|	Расчеты.Валюта                                      КАК ВалютаРасчетов,
	|	ВЫБОР КОГДА Расчеты.ДатаПлатежа = ДАТАВРЕМЯ(1,1,1)
	|		ТОГДА НАЧАЛОПЕРИОДА(Расчеты.ДатаРегистратора, ДЕНЬ)
	|		ИНАЧЕ Расчеты.ДатаПлатежа
	|	КОНЕЦ                                               КАК ДатаПлановогоПогашения,
	|	Расчеты.ПорядокОперации                             КАК ПорядокОперации,
	|	Расчеты.Регистратор                                 КАК Регистратор,
	|	ВЫБОР КОГДА ВтПараметрыРасчета.ПараметрГрафикВДоговоре
	|			ТОГДА ВтПараметрыРасчета.ПараметрГрафикИсполненияДоговора
	|			ИНАЧЕ Расчеты.ПродажаПоЗаказу
	|	КОНЕЦ                                               КАК Заказ,
	|	СУММА(ВЫБОР КОГДА Расчеты.ВидДвижения = &Приход
	|		ТОГДА Расчеты.КОтгрузке
	|		ИНАЧЕ -Расчеты.КОтгрузке
	|	КОНЕЦ) КАК Сумма
	|ИЗ
	|	РасчетыДвижения КАК Расчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтОсновныеПараметрыРасчета КАК ВтПараметрыРасчета
	|			ПО Расчеты.ОбъектРасчетов = ВтПараметрыРасчета.ПараметрОбъектРасчетов
	|				И Расчеты.АналитикаУчетаПоПартнерам = ВтПараметрыРасчета.ПараметрАналитикаУчетаПоПартнерам
	|				И Расчеты.Валюта = ВтПараметрыРасчета.ПараметрВалютаРасчетов
	|ГДЕ
	|	Расчеты.КОтгрузке > 0
	|	И (Расчеты.ПродажаПоЗаказу НЕ В (&ПустыеСсылкиНаЗаказы) ИЛИ ВтПараметрыРасчета.ПараметрГрафикВДоговоре)
	|	И ТИПЗНАЧЕНИЯ(Расчеты.Регистратор) В (&СписокТиповУточняющихПланы)
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(Расчеты.ДатаРегистратора,ДЕНЬ),
	|	Расчеты.ДатаРегистратора,
	|	Расчеты.ОбъектРасчетов,
	|	Расчеты.АналитикаУчетаПоПартнерам,
	|	Расчеты.Валюта,
	|	ВЫБОР КОГДА Расчеты.ДатаПлатежа = ДАТАВРЕМЯ(1,1,1)
	|		ТОГДА НАЧАЛОПЕРИОДА(Расчеты.ДатаРегистратора, ДЕНЬ)
	|		ИНАЧЕ Расчеты.ДатаПлатежа
	|	КОНЕЦ,
	|	Расчеты.ПорядокОперации,
	|	Расчеты.Регистратор,
	|	ВЫБОР КОГДА ВтПараметрыРасчета.ПараметрГрафикВДоговоре
	|			ТОГДА ВтПараметрыРасчета.ПараметрГрафикИсполненияДоговора
	|			ИНАЧЕ Расчеты.ПродажаПоЗаказу
	|	КОНЕЦ
	|УПОРЯДОЧИТЬ ПО
	|	Расчеты.ДатаРегистратора
	|";
	Запрос.УстановитьПараметр("СписокТиповУточняющихПланы", СписокТиповУточняющихПланы());
	
	Если НЕ ЭтоРасчетыСКлиентами Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"РегистрНакопления.РасчетыСКлиентами ","РегистрНакопления.РасчетыСПоставщиками ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&Приход","ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ПродажаПоЗаказу","ЗакупкаПоЗаказу");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"КОтгрузке","КПоступлению");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"РасчетыДвижения","РасчетыСПоставщикамиДвижения");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&Приход","ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"РасчетыДвижения","РасчетыСКлиентамиДвижения");
	КонецЕсли;
	
	Результат  = Запрос.Выполнить();
	УточненияГрафиковОтгрузок = Результат.Выгрузить();
	УточненияГрафиковОтгрузок.Индексы.Добавить("Заказ");
	
	Возврат УточненияГрафиковОтгрузок;
	
КонецФункции

Процедура ДополнитьТаблицуИзмененийПриемниками(ТаблицаИзменений, Параметры, РассчитываемыеИзмерения = Неопределено)
	
	Если РассчитываемыеИзмерения = Неопределено Тогда
		РассчитываемыеИзмерения = ТаблицаИзменений.Скопировать(, "ОбъектРасчетов,АналитикаУчетаПоПартнерам,ВалютаРасчетов,ОбъектРасчетовПриемник,АналитикаУчетаПоПартнерамПриемник,ВалютаПриемник");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаИзменений", ТаблицаИзменений);
	Запрос.УстановитьПараметр("РассчитываемыеИзмерения", РассчитываемыеИзмерения);
	
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	РассчитываемыеИзмерения.ОбъектРасчетов КАК ОбъектРасчетов,
		|	РассчитываемыеИзмерения.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|	РассчитываемыеИзмерения.ВалютаРасчетов КАК ВалютаРасчетов,
		|	РассчитываемыеИзмерения.ОбъектРасчетовПриемник КАК ОбъектРасчетовПриемник,
		|	РассчитываемыеИзмерения.АналитикаУчетаПоПартнерамПриемник КАК АналитикаУчетаПоПартнерамПриемник,
		|	РассчитываемыеИзмерения.ВалютаПриемник КАК ВалютаПриемник
		|ПОМЕСТИТЬ ВтРассчитываемыеИзмерения
		|ИЗ
		|	&РассчитываемыеИзмерения КАК РассчитываемыеИзмерения
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	АналитикаУчетаПоПартнерам,
		|	ОбъектРасчетов,
		|	ВалютаРасчетов,
		|	АналитикаУчетаПоПартнерамПриемник,
		|	ОбъектРасчетовПриемник,
		|	ВалютаПриемник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаИзменений.ТипРасчетов КАК ТипРасчетов,
		|	ТаблицаИзменений.ПорядокФакт КАК ПорядокФакт,
		|	ТаблицаИзменений.ПорядокФакт КАК ПорядокЗачетаПоДатеПлатежа,
		|	ТаблицаИзменений.ПорядокОперации КАК ПорядокОперации,
		|	ТаблицаИзменений.ОбъектРасчетов КАК ОбъектРасчетов,
		|	ТаблицаИзменений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|	ТаблицаИзменений.ОбъектРасчетовПриемник КАК ОбъектРасчетовПриемник,
		|	ТаблицаИзменений.ВалютаПриемник КАК ВалютаПриемник,
		|	ТаблицаИзменений.АналитикаУчетаПоПартнерамПриемник КАК АналитикаУчетаПоПартнерамПриемник,
		|	ТаблицаИзменений.ВалютаРасчетов КАК ВалютаРасчетов,
		|	ТаблицаИзменений.Документ КАК Документ
		|ПОМЕСТИТЬ ТаблицаИзмененийСПриемниками
		|ИЗ
		|	&ТаблицаИзменений КАК ТаблицаИзменений
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ТипРасчетов,
		|	АналитикаУчетаПоПартнерам,
		|	ОбъектРасчетов,
		|	ВалютаРасчетов,
		|	ПорядокФакт
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	ТаблицаИзменений.ТипРасчетов КАК ТипРасчетов,
		|	ТаблицаИзменений.ПорядокФакт КАК ПорядокФакт,
		|	ТаблицаИзменений.ПорядокФакт КАК ПорядокЗачетаПоДатеПлатежа,
		|	ТаблицаИзменений.ПорядокОперации КАК ПорядокОперации,
		|	ТаблицаИзменений.ОбъектРасчетов КАК ОбъектРасчетов,
		|	ТаблицаИзменений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|	ТаблицаИзменений.ОбъектРасчетовПриемник КАК ОбъектРасчетовПриемник,
		|	ТаблицаИзменений.ВалютаПриемник КАК ВалютаПриемник,
		|	ТаблицаИзменений.АналитикаУчетаПоПартнерамПриемник КАК АналитикаУчетаПоПартнерамПриемник,
		|	ТаблицаИзменений.ВалютаРасчетов КАК ВалютаРасчетов,
		|	ТаблицаИзменений.Документ КАК Документ
		|ПОМЕСТИТЬ ДокументыТаблицыИзмененийСПриемниками
		|ИЗ
		|	ТаблицаИзмененийСПриемниками КАК ТаблицаИзменений
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Документ,
		|	ТипРасчетов,
		|	АналитикаУчетаПоПартнерам,
		|	ОбъектРасчетов,
		|	ВалютаРасчетов,
		|	ПорядокФакт
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	ТаблицаИзменений.ТипРасчетов КАК ТипРасчетов,
		|	ТаблицаИзменений.ПорядокФакт КАК ПорядокФакт,
		|	ТаблицаИзменений.ПорядокФакт КАК ПорядокЗачетаПоДатеПлатежа,
		|	ТаблицаИзменений.ПорядокОперации КАК ПорядокОперации,
		|	ТаблицаИзменений.ОбъектРасчетов КАК ОбъектРасчетов,
		|	ТаблицаИзменений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|	ТаблицаИзменений.ОбъектРасчетовПриемник КАК ОбъектРасчетовПриемник,
		|	ТаблицаИзменений.ВалютаПриемник КАК ВалютаПриемник,
		|	ТаблицаИзменений.АналитикаУчетаПоПартнерамПриемник КАК АналитикаУчетаПоПартнерамПриемник,
		|	ТаблицаИзменений.ВалютаРасчетов КАК ВалютаРасчетов,
		|	ТаблицаИзменений.Документ КАК Документ
		|ПОМЕСТИТЬ НепроведеныеДокументыТаблицыИзмененийСПриемниками
		|ИЗ
		|	ДокументыТаблицыИзмененийСПриемниками КАК ТаблицаИзменений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрДокументов
		|		ПО (РеестрДокументов.Ссылка = ТаблицаИзменений.Документ)
		|			И (НЕ РеестрДокументов.Проведен)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ТипРасчетов,
		|	АналитикаУчетаПоПартнерам,
		|	ОбъектРасчетов,
		|	ВалютаРасчетов,
		|	ПорядокФакт
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|
		// Поместим все данные по приемникам расчетов во временную таблицу
		|ВЫБРАТЬ
		|	Изменения.ТипРасчетов                               КАК ТипРасчетов,
		|	Изменения.ПорядокФакт                               КАК ПорядокФакт,
		|	Изменения.ПорядокЗачетаПоДатеПлатежа                КАК ПорядокЗачетаПоДатеПлатежа,
		|	РасчетыСКлиентами.ПорядокОперации                   КАК ПорядокОперации,
		|	
		|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам         КАК АналитикаУчетаПоПартнерам,
		|	РасчетыСКлиентами.ОбъектРасчетов                    КАК ОбъектРасчетов,
		|	РасчетыСКлиентами.Валюта                            КАК ВалютаРасчетов,
		|	
		|	РасчетыСКлиентами.Регистратор                       КАК Документ,
		|	
		|	РасчетыСКлиентами.АналитикаУчетаПоПартнерамПриемник КАК АналитикаУчетаПоПартнерамПриемник,
		|	РасчетыСКлиентами.ОбъектРасчетовПриемник            КАК ОбъектРасчетовПриемник,
		|	РасчетыСКлиентами.ВалютаПриемник                    КАК ВалютаПриемник,
		|	
		|	РасчетыСКлиентами.ПоДаннымОбъектаРасчетовИсточника  КАК ПоДаннымОбъектаРасчетовИсточника
		|ПОМЕСТИТЬ ДанныеРасчетов
		|ИЗ
		|	ТаблицаИзмененийСПриемниками КАК Изменения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
		|		ПО Изменения.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
		|			И РасчетыСКлиентами.АналитикаУчетаПоПартнерам = Изменения.АналитикаУчетаПоПартнерам
		|			И РасчетыСКлиентами.ОбъектРасчетов = Изменения.ОбъектРасчетов
		|			И РасчетыСКлиентами.Валюта = Изменения.ВалютаРасчетов
		|			И РасчетыСКлиентами.ПорядокОперации >= Изменения.ПорядокФакт
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтРассчитываемыеИзмерения КАК РассчитываемыеИзмерения 
		|		ПО РасчетыСКлиентами.ОбъектРасчетов = РассчитываемыеИзмерения.ОбъектРасчетов
		|			И РасчетыСКлиентами.АналитикаУчетаПоПартнерам = РассчитываемыеИзмерения.АналитикаУчетаПоПартнерам
		|			И РасчетыСКлиентами.Валюта = РассчитываемыеИзмерения.ВалютаРасчетов 
		|			И РасчетыСКлиентами.ОбъектРасчетовПриемник = РассчитываемыеИзмерения.ОбъектРасчетовПриемник
		|			И РасчетыСКлиентами.АналитикаУчетаПоПартнерамПриемник = РассчитываемыеИзмерения.АналитикаУчетаПоПартнерамПриемник
		|			И РасчетыСКлиентами.ВалютаПриемник = РассчитываемыеИзмерения.ВалютаПриемник
		|ГДЕ
		|	РассчитываемыеИзмерения.АналитикаУчетаПоПартнерам ЕСТЬ NULL
		|	И РасчетыСКлиентами.ОбъектРасчетовПриемник <> ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
		|	И РасчетыСКлиентами.ОбъектРасчетовПриемник.ТипОбъектаРасчетов <> ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовРасчетов.ПлатежВозврат)
		|	И РасчетыСКлиентами.Активность
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Изменения.ТипРасчетов                               КАК ТипРасчетов,
		|	Изменения.ПорядокФакт                               КАК ПорядокФакт,
		|	Изменения.ПорядокЗачетаПоДатеПлатежа                КАК ПорядокЗачетаПоДатеПлатежа,
		|	РасчетыСКлиентами.ПорядокОперации                   КАК ПорядокОперации,
		|	
		|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам         КАК АналитикаУчетаПоПартнерам,
		|	РасчетыСКлиентами.ОбъектРасчетов                    КАК ОбъектРасчетов,
		|	РасчетыСКлиентами.Валюта                            КАК ВалютаРасчетов,
		|	
		|	РасчетыСКлиентами.Регистратор                       КАК Документ,
		|	
		|	РасчетыСКлиентами.АналитикаУчетаПоПартнерамПриемник КАК АналитикаУчетаПоПартнерамПриемник,
		|	РасчетыСКлиентами.ОбъектРасчетовПриемник            КАК ОбъектРасчетовПриемник,
		|	РасчетыСКлиентами.ВалютаПриемник                    КАК ВалютаПриемник,
		|	
		|	ЛОЖЬ                                                КАК ПоДаннымОбъектаРасчетовИсточника
		|ИЗ
		|	НепроведеныеДокументыТаблицыИзмененийСПриемниками КАК Изменения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыСКлиентами
		|		ПО Изменения.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
		|			И РасчетыСКлиентами.АналитикаУчетаПоПартнерам = Изменения.АналитикаУчетаПоПартнерам
		|			И РасчетыСКлиентами.ОбъектРасчетов = Изменения.ОбъектРасчетов
		|			И РасчетыСКлиентами.Валюта = Изменения.ВалютаРасчетов
		|			И РасчетыСКлиентами.ПорядокОперации >= Изменения.ПорядокФакт
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтРассчитываемыеИзмерения КАК РассчитываемыеИзмерения
		|		ПО РасчетыСКлиентами.ОбъектРасчетов = РассчитываемыеИзмерения.ОбъектРасчетов
		|			И РасчетыСКлиентами.АналитикаУчетаПоПартнерам = РассчитываемыеИзмерения.АналитикаУчетаПоПартнерам
		|			И РасчетыСКлиентами.Валюта = РассчитываемыеИзмерения.ВалютаРасчетов 
		|			И РасчетыСКлиентами.ОбъектРасчетовПриемник = РассчитываемыеИзмерения.ОбъектРасчетовПриемник
		|			И РасчетыСКлиентами.АналитикаУчетаПоПартнерамПриемник = РассчитываемыеИзмерения.АналитикаУчетаПоПартнерамПриемник
		|			И РасчетыСКлиентами.ВалютаПриемник = РассчитываемыеИзмерения.ВалютаПриемник
		|ГДЕ
		|	РассчитываемыеИзмерения.АналитикаУчетаПоПартнерам ЕСТЬ NULL
		|	И РасчетыСКлиентами.ОбъектРасчетовПриемник <> ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
		|	И РасчетыСКлиентами.ОбъектРасчетовПриемник.ТипОбъектаРасчетов <> ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовРасчетов.ПлатежВозврат)
		|	И РасчетыСКлиентами.Активность
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		// Добавим к пересчету возможные некорректные объекты расчетов в движениях пересчитываемого документа регистратора
		|	ВЫБРАТЬ
		|		ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом) КАК ТипРасчетов,
		|		МИНИМУМ(РасчетыСКлиентамиПоСрокам.ПорядокОперации)              КАК ПорядокФакт,
		|		МИНИМУМ(Изменения.ПорядокФакт)                                  КАК ПорядокПлан,
		|		МИНИМУМ(РасчетыСКлиентамиПоСрокам.ПорядокЗачета)                КАК ПорядокЗачетаПоДатеПлатежа,
		|		РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам             КАК АналитикаУчетаПоПартнерам,
		|		РасчетыСКлиентамиПоСрокам.ОбъектРасчетов                        КАК ОбъектРасчетов,
		|		РасчетыСКлиентамиПоСрокам.Валюта                                КАК ВалютаРасчетов,
		|		РасчетыСКлиентамиПоСрокам.ДокументРегистратор                   КАК Документ,
		|		РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерамПриемник     КАК АналитикаУчетаПоПартнерамПриемник,
		|		РасчетыСКлиентамиПоСрокам.ОбъектРасчетовПриемник                КАК ОбъектРасчетовПриемник,
		|		РасчетыСКлиентамиПоСрокам.ВалютаПриемник                        КАК ВалютаПриемник,
		|		ЛОЖЬ                                                            КАК ПоДаннымОбъектаРасчетовИсточника
		|	ИЗ
		|		РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыСКлиентамиПоСрокам
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыТаблицыИзмененийСПриемниками КАК Изменения
		|				ПО Изменения.Документ = РасчетыСКлиентамиПоСрокам.ДокументРегистратор
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
		|				ПО РасчетыСКлиентами.Регистратор = РасчетыСКлиентамиПоСрокам.ДокументРегистратор 
		|					И РасчетыСКлиентами.АналитикаУчетаПоПартнерам = РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам
		|					И РасчетыСКлиентами.ОбъектРасчетов = РасчетыСКлиентамиПоСрокам.ОбъектРасчетов
		|					И РасчетыСКлиентами.Валюта = РасчетыСКлиентамиПоСрокам.Валюта
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВтРассчитываемыеИзмерения КАК РассчитываемыеИзмерения
		|			ПО РасчетыСКлиентамиПоСрокам.ОбъектРасчетов = РассчитываемыеИзмерения.ОбъектРасчетов
		|				И РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам = РассчитываемыеИзмерения.АналитикаУчетаПоПартнерам
		|				И РасчетыСКлиентамиПоСрокам.Валюта = РассчитываемыеИзмерения.ВалютаРасчетов			
		|				
		|	ГДЕ
		|		РасчетыСКлиентами.ОбъектРасчетов ЕСТЬ NULL
		|		И РассчитываемыеИзмерения.АналитикаУчетаПоПартнерам ЕСТЬ NULL
		|
		|	СГРУППИРОВАТЬ ПО
		|		РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам,
		|		РасчетыСКлиентамиПоСрокам.ОбъектРасчетов,
		|		РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерамПриемник,
		|		РасчетыСКлиентамиПоСрокам.ОбъектРасчетовПриемник,
		|		РасчетыСКлиентамиПоСрокам.ВалютаПриемник,
		|		РасчетыСКлиентамиПоСрокам.Валюта,
		|		РасчетыСКлиентамиПоСрокам.ДокументРегистратор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Изменения.ТипРасчетов                                  КАК ТипРасчетов,
		|	Изменения.ПорядокФакт                                  КАК ПорядокФакт,
		|	Изменения.ПорядокЗачетаПоДатеПлатежа                   КАК ПорядокЗачетаПоДатеПлатежа,
		|	РасчетыСПоставщиками.ПорядокОперации                   КАК ПорядокОперации,
		|	
		|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам         КАК АналитикаУчетаПоПартнерам,
		|	РасчетыСПоставщиками.ОбъектРасчетов                    КАК ОбъектРасчетов,
		|	РасчетыСПоставщиками.Валюта                            КАК ВалютаРасчетов,
		|	
		|	РасчетыСПоставщиками.Регистратор                       КАК Документ,
		|	
		|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерамПриемник КАК АналитикаУчетаПоПартнерамПриемник,
		|	РасчетыСПоставщиками.ОбъектРасчетовПриемник            КАК ОбъектРасчетовПриемник,
		|	РасчетыСПоставщиками.ВалютаПриемник                    КАК ВалютаПриемник,
		|	
		|	РасчетыСПоставщиками.ПоДаннымОбъектаРасчетовИсточника  КАК ПоДаннымОбъектаРасчетовИсточника
		|ИЗ
		|	ТаблицаИзмененийСПриемниками КАК Изменения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
		|		ПО Изменения.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
		|			И РасчетыСПоставщиками.АналитикаУчетаПоПартнерам = Изменения.АналитикаУчетаПоПартнерам
		|			И РасчетыСПоставщиками.ОбъектРасчетов = Изменения.ОбъектРасчетов
		|			И РасчетыСПоставщиками.Валюта = Изменения.ВалютаРасчетов
		|			И РасчетыСПоставщиками.ПорядокОперации >= Изменения.ПорядокФакт
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтРассчитываемыеИзмерения КАК РассчитываемыеИзмерения
		|		ПО РасчетыСПоставщиками.ОбъектРасчетов = РассчитываемыеИзмерения.ОбъектРасчетов
		|			И РасчетыСПоставщиками.АналитикаУчетаПоПартнерам = РассчитываемыеИзмерения.АналитикаУчетаПоПартнерам
		|			И РасчетыСПоставщиками.Валюта = РассчитываемыеИзмерения.ВалютаРасчетов 
		|			И РасчетыСПоставщиками.ОбъектРасчетовПриемник = РассчитываемыеИзмерения.ОбъектРасчетовПриемник
		|			И РасчетыСПоставщиками.АналитикаУчетаПоПартнерамПриемник = РассчитываемыеИзмерения.АналитикаУчетаПоПартнерамПриемник
		|			И РасчетыСПоставщиками.ВалютаПриемник = РассчитываемыеИзмерения.ВалютаПриемник
		|ГДЕ
		|	РассчитываемыеИзмерения.АналитикаУчетаПоПартнерам ЕСТЬ NULL
		|	И РасчетыСПоставщиками.ОбъектРасчетовПриемник <> ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
		|	И РасчетыСПоставщиками.ОбъектРасчетовПриемник.ТипОбъектаРасчетов <> ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовРасчетов.ПлатежВозврат)
		|	И РасчетыСПоставщиками.Активность
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Изменения.ТипРасчетов                                  КАК ТипРасчетов,
		|	Изменения.ПорядокФакт                                  КАК ПорядокФакт,
		|	Изменения.ПорядокЗачетаПоДатеПлатежа                   КАК ПорядокЗачетаПоДатеПлатежа,
		|	РасчетыСПоставщиками.ПорядокОперации                   КАК ПорядокОперации,
		|	
		|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам         КАК АналитикаУчетаПоПартнерам,
		|	РасчетыСПоставщиками.ОбъектРасчетов                    КАК ОбъектРасчетов,
		|	РасчетыСПоставщиками.Валюта                            КАК ВалютаРасчетов,
		|	
		|	РасчетыСПоставщиками.Регистратор                       КАК Документ,
		|	
		|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерамПриемник КАК АналитикаУчетаПоПартнерамПриемник,
		|	РасчетыСПоставщиками.ОбъектРасчетовПриемник            КАК ОбъектРасчетовПриемник,
		|	РасчетыСПоставщиками.ВалютаПриемник                    КАК ВалютаПриемник,
		|	
		|	ЛОЖЬ                                                КАК ПоДаннымОбъектаРасчетовИсточника
		|ИЗ
		|	НепроведеныеДокументыТаблицыИзмененийСПриемниками КАК Изменения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК РасчетыСПоставщиками
		|		ПО Изменения.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
		|			И РасчетыСПоставщиками.АналитикаУчетаПоПартнерам = Изменения.АналитикаУчетаПоПартнерам
		|			И РасчетыСПоставщиками.ОбъектРасчетов = Изменения.ОбъектРасчетов
		|			И РасчетыСПоставщиками.Валюта = Изменения.ВалютаРасчетов
		|			И РасчетыСПоставщиками.ПорядокОперации >= Изменения.ПорядокФакт
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтРассчитываемыеИзмерения КАК РассчитываемыеИзмерения
		|		ПО РасчетыСПоставщиками.ОбъектРасчетов = РассчитываемыеИзмерения.ОбъектРасчетов
		|			И РасчетыСПоставщиками.АналитикаУчетаПоПартнерам = РассчитываемыеИзмерения.АналитикаУчетаПоПартнерам
		|			И РасчетыСПоставщиками.Валюта = РассчитываемыеИзмерения.ВалютаРасчетов 
		|			И РасчетыСПоставщиками.ОбъектРасчетовПриемник = РассчитываемыеИзмерения.ОбъектРасчетовПриемник
		|			И РасчетыСПоставщиками.АналитикаУчетаПоПартнерамПриемник = РассчитываемыеИзмерения.АналитикаУчетаПоПартнерамПриемник
		|			И РасчетыСПоставщиками.ВалютаПриемник = РассчитываемыеИзмерения.ВалютаПриемник
		|ГДЕ
		|	РассчитываемыеИзмерения.АналитикаУчетаПоПартнерам ЕСТЬ NULL
		|	И РасчетыСПоставщиками.ОбъектРасчетовПриемник <> ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
		|	И РасчетыСПоставщиками.ОбъектРасчетовПриемник.ТипОбъектаРасчетов <> ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовРасчетов.ПлатежВозврат)
		|	И РасчетыСПоставщиками.Активность
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		// Добавим к пересчету возможные некорректные объекты расчетов в движениях пересчитываемого документа регистратора
		|	ВЫБРАТЬ
		|		ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком) КАК ТипРасчетов,
		|		МИНИМУМ(РасчетыСПоставщикамиПоСрокам.ПорядокОперации)              КАК ПорядокФакт,
		|		МИНИМУМ(Изменения.ПорядокФакт)                                     КАК ПорядокПлан,
		|		МИНИМУМ(РасчетыСПоставщикамиПоСрокам.ПорядокЗачета)                КАК ПорядокЗачетаПоДатеПлатежа,
		|		РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам             КАК АналитикаУчетаПоПартнерам,
		|		РасчетыСПоставщикамиПоСрокам.ОбъектРасчетов                        КАК ОбъектРасчетов,
		|		РасчетыСПоставщикамиПоСрокам.Валюта                                КАК ВалютаРасчетов,
		|		РасчетыСПоставщикамиПоСрокам.ДокументРегистратор                   КАК Документ,
		|		РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерамПриемник     КАК АналитикаУчетаПоПартнерамПриемник,
		|		РасчетыСПоставщикамиПоСрокам.ОбъектРасчетовПриемник                КАК ОбъектРасчетовПриемник,
		|		РасчетыСПоставщикамиПоСрокам.ВалютаПриемник                        КАК ВалютаПриемник,
		|		ЛОЖЬ                                                               КАК ПоДаннымОбъектаРасчетовИсточника
		|	ИЗ
		|		РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК РасчетыСПоставщикамиПоСрокам
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыТаблицыИзмененийСПриемниками КАК Изменения
		|				ПО Изменения.Документ = РасчетыСПоставщикамиПоСрокам.ДокументРегистратор
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
		|				ПО РасчетыСПоставщиками.Регистратор = РасчетыСПоставщикамиПоСрокам.ДокументРегистратор 
		|					И РасчетыСПоставщиками.АналитикаУчетаПоПартнерам = РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам
		|					И РасчетыСПоставщиками.ОбъектРасчетов = РасчетыСПоставщикамиПоСрокам.ОбъектРасчетов
		|					И РасчетыСПоставщиками.Валюта = РасчетыСПоставщикамиПоСрокам.Валюта
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВтРассчитываемыеИзмерения КАК РассчитываемыеИзмерения
		|				ПО РасчетыСПоставщикамиПоСрокам.ОбъектРасчетов = РассчитываемыеИзмерения.ОбъектРасчетов
		|				И РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам = РассчитываемыеИзмерения.АналитикаУчетаПоПартнерам
		|				И РасчетыСПоставщикамиПоСрокам.Валюта = РассчитываемыеИзмерения.ВалютаРасчетов
		|				
		|	ГДЕ
		|		РасчетыСПоставщиками.ОбъектРасчетов ЕСТЬ NULL
		|		И РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам ЕСТЬ NULL
		|
		|	СГРУППИРОВАТЬ ПО
		|		РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам,
		|		РасчетыСПоставщикамиПоСрокам.ОбъектРасчетов,
		|		РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерамПриемник,
		|		РасчетыСПоставщикамиПоСрокам.ОбъектРасчетовПриемник,
		|		РасчетыСПоставщикамиПоСрокам.ВалютаПриемник,
		|		РасчетыСПоставщикамиПоСрокам.Валюта,
		|		РасчетыСПоставщикамиПоСрокам.ДокументРегистратор
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ТипРасчетов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		// Объекты расчетов приемники изменений, которые не добавлены к распределению
		|ВЫБРАТЬ
		|	МИНИМУМ(РасчетыСКлиентами.ПорядокФакт)                           КАК ПорядокФакт,
		|	МИНИМУМ(РасчетыСКлиентами.ПорядокЗачетаПоДатеПлатежа)            КАК ПорядокЗачетаПоДатеПлатежа,
		|	МИНИМУМ(РасчетыСКлиентами.ПорядокОперации)                       КАК ПорядокОперации,
		|	
		|	РасчетыСКлиентами.АналитикаУчетаПоПартнерамПриемник              КАК АналитикаУчетаПоПартнерам,
		|	РасчетыСКлиентами.ОбъектРасчетовПриемник                         КАК ОбъектРасчетов,
		|	РасчетыСКлиентами.ВалютаПриемник                                 КАК ВалютаРасчетов,
		|	
		|	РасчетыСКлиентами.Документ                                       КАК Документ,
		|	
		|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка) КАК АналитикаУчетаПоПартнерамПриемник,
		|	ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)                КАК ОбъектРасчетовПриемник,
		|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)                         КАК ВалютаПриемник,
		|	
		|	ИСТИНА                                                           КАК ПоДаннымОбъектаРасчетовИсточника,
		|	НЕОПРЕДЕЛЕНО                                                     КАК Заказ,
		|	1                                                                КАК КОплате,
		|	1                                                                КАК КОтгрузке,
		|	1                                                                КАК Сумма,
		|	1                                                                КАК СуммаРегл,
		|	1                                                                КАК СуммаУпр,
		|	1                                                                КАК Оплачивается
		|ПОМЕСТИТЬ РасчетыСКлиентамиИзменения
		|ИЗ
		|	ДанныеРасчетов КАК РасчетыСКлиентами
		|ГДЕ
		|	РасчетыСКлиентами.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
		|	И РасчетыСКлиентами.ОбъектРасчетовПриемник <> ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетыСКлиентами.АналитикаУчетаПоПартнерамПриемник,
		|	РасчетыСКлиентами.ОбъектРасчетовПриемник,
		|	РасчетыСКлиентами.ВалютаПриемник,
		|	РасчетыСКлиентами.Документ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		// Строки для связи источника и приемника
		|ВЫБРАТЬ
		|	МИНИМУМ(РасчетыСКлиентами.ПорядокФакт)                       КАК ПорядокФакт,
		|	МИНИМУМ(РасчетыСКлиентами.ПорядокЗачетаПоДатеПлатежа)        КАК ПорядокЗачетаПоДатеПлатежа,
		|	МИНИМУМ(РасчетыСКлиентами.ПорядокОперации)                   КАК ПорядокОперации,
		|	
		|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам                  КАК АналитикаУчетаПоПартнерам,
		|	РасчетыСКлиентами.ОбъектРасчетов                             КАК ОбъектРасчетов,
		|	РасчетыСКлиентами.ВалютаРасчетов                             КАК ВалютаРасчетов,
		|	
		|	РасчетыСКлиентами.Документ                                   КАК Документ,
		|	
		|	РасчетыСКлиентами.АналитикаУчетаПоПартнерамПриемник          КАК АналитикаУчетаПоПартнерамПриемник,
		|	РасчетыСКлиентами.ОбъектРасчетовПриемник                     КАК ОбъектРасчетовПриемник,
		|	РасчетыСКлиентами.ВалютаПриемник                             КАК ВалютаПриемник,
		|	
		|	МАКСИМУМ(РасчетыСКлиентами.ПоДаннымОбъектаРасчетовИсточника) КАК ПоДаннымОбъектаРасчетовИсточника,
		|	НЕОПРЕДЕЛЕНО                                                 КАК Заказ,
		|	1                                                            КАК КОплате,
		|	1                                                            КАК КОтгрузке,
		|	1                                                            КАК Сумма,
		|	1                                                            КАК СуммаРегл,
		|	1                                                            КАК СуммаУпр,
		|	1                                                            КАК Оплачивается
		|ИЗ
		|	ДанныеРасчетов КАК РасчетыСКлиентами
		|ГДЕ
		|	РасчетыСКлиентами.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам,
		|	РасчетыСКлиентами.ОбъектРасчетов,
		|	РасчетыСКлиентами.ВалютаРасчетов,
		|	РасчетыСКлиентами.Документ,
		|	РасчетыСКлиентами.АналитикаУчетаПоПартнерамПриемник,
		|	РасчетыСКлиентами.ОбъектРасчетовПриемник,
		|	РасчетыСКлиентами.ВалютаПриемник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		// Объекты расчетов приемники изменений, которые не добавлены к распределению
		|ВЫБРАТЬ
		|	МИНИМУМ(РасчетыСПоставщиками.ПорядокФакт)                        КАК ПорядокФакт,
		|	МИНИМУМ(РасчетыСПоставщиками.ПорядокЗачетаПоДатеПлатежа)         КАК ПорядокЗачетаПоДатеПлатежа,
		|	МИНИМУМ(РасчетыСПоставщиками.ПорядокОперации)                    КАК ПорядокОперации,
		|	
		|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерамПриемник           КАК АналитикаУчетаПоПартнерам,
		|	РасчетыСПоставщиками.ОбъектРасчетовПриемник                      КАК ОбъектРасчетов,
		|	РасчетыСПоставщиками.ВалютаПриемник                              КАК ВалютаРасчетов,
		|	
		|	РасчетыСПоставщиками.Документ                                    КАК Документ,
		|	
		|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка) КАК АналитикаУчетаПоПартнерамПриемник,
		|	ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)                КАК ОбъектРасчетовПриемник,
		|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)                         КАК ВалютаПриемник,
		|	
		|	ИСТИНА                                                           КАК ПоДаннымОбъектаРасчетовИсточника,
		|	НЕОПРЕДЕЛЕНО                                                     КАК Заказ,
		|	1                                                                КАК КОплате,
		|	1                                                                КАК КПоступлению,
		|	1                                                                КАК Сумма,
		|	1                                                                КАК СуммаРегл,
		|	1                                                                КАК СуммаУпр,
		|	1                                                                КАК Оплачивается
		|ПОМЕСТИТЬ РасчетыСПоставщикамиИзменения
		|ИЗ
		|	ДанныеРасчетов КАК РасчетыСПоставщиками
		|ГДЕ
		|	РасчетыСПоставщиками.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
		|	И РасчетыСПоставщиками.ОбъектРасчетовПриемник <> ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерамПриемник,
		|	РасчетыСПоставщиками.ОбъектРасчетовПриемник,
		|	РасчетыСПоставщиками.ВалютаПриемник,
		|	РасчетыСПоставщиками.Документ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		// Строки для связи источника и приемника
		|ВЫБРАТЬ
		|	МИНИМУМ(РасчетыСПоставщиками.ПорядокФакт)                       КАК ПорядокФакт,
		|	МИНИМУМ(РасчетыСПоставщиками.ПорядокЗачетаПоДатеПлатежа)        КАК ПорядокЗачетаПоДатеПлатежа,
		|	МИНИМУМ(РасчетыСПоставщиками.ПорядокОперации)                   КАК ПорядокОперации,
		|	
		|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам                  КАК АналитикаУчетаПоПартнерам,
		|	РасчетыСПоставщиками.ОбъектРасчетов                             КАК ОбъектРасчетов,
		|	РасчетыСПоставщиками.ВалютаРасчетов                             КАК ВалютаРасчетов,
		|	
		|	РасчетыСПоставщиками.Документ                                   КАК Документ,
		|	
		|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерамПриемник          КАК АналитикаУчетаПоПартнерамПриемник,
		|	РасчетыСПоставщиками.ОбъектРасчетовПриемник                     КАК ОбъектРасчетовПриемник,
		|	РасчетыСПоставщиками.ВалютаПриемник                             КАК ВалютаПриемник,
		|	
		|	МАКСИМУМ(РасчетыСПоставщиками.ПоДаннымОбъектаРасчетовИсточника) КАК ПоДаннымОбъектаРасчетовИсточника,
		|	НЕОПРЕДЕЛЕНО                                                    КАК Заказ,
		|	1                                                               КАК КОплате,
		|	1                                                               КАК КПоступлению,
		|	1                                                               КАК Сумма,
		|	1                                                               КАК СуммаРегл,
		|	1                                                               КАК СуммаУпр,
		|	1                                                               КАК Оплачивается
		|ИЗ
		|	ДанныеРасчетов КАК РасчетыСПоставщиками
		|ГДЕ
		|	РасчетыСПоставщиками.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам,
		|	РасчетыСПоставщиками.ОбъектРасчетов,
		|	РасчетыСПоставщиками.ВалютаРасчетов,
		|	РасчетыСПоставщиками.Документ,
		|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерамПриемник,
		|	РасчетыСПоставщиками.ОбъектРасчетовПриемник,
		|	РасчетыСПоставщиками.ВалютаПриемник;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ДокументыТаблицыИзмененийСПриемниками;
		|УНИЧТОЖИТЬ НепроведеныеДокументыТаблицыИзмененийСПриемниками";
	
	Запрос.Выполнить();
	
	ТаблицаИзмененийПриемников = ТаблицаИзмененийДляПересчета(Запрос.МенеджерВременныхТаблиц, Параметры.Регистратор);
	
	Если ТаблицаИзмененийПриемников.Количество() > 0 Тогда
		Для Каждого СтрокаПриемника Из ТаблицаИзмененийПриемников Цикл
			ЗаполнитьЗначенияСвойств(РассчитываемыеИзмерения.Добавить(), СтрокаПриемника);
		КонецЦикла;
		ДополнитьТаблицуИзмененийПриемниками(ТаблицаИзмененийПриемников, Параметры, РассчитываемыеИзмерения);
	КонецЕсли;
	
	Для Каждого СтрокаПриемника Из ТаблицаИзмененийПриемников Цикл
		НоваяСтрока = ТаблицаИзменений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПриемника);
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбщиеМетодыДобавленияСтрок

//Переоценивает долг до момента оплаты.
Процедура ПереоценитьДолг(ГлобальныеПеременные, ТаблицаРасчетовПоДокументам, РасчетыОтгрузкиПоставки, Регистратор, ЗНАЧ ПериодЗачета = Неопределено, ПереоценкаНаДатуОплаты = ИСТИНА)
	
	Если ГлобальныеПеременные.ВариантКурсаДоговора = Перечисления.ВариантыКурсаДоговора.ФиксированныйНаДатуОтгрузки Тогда
		Возврат;
	КонецЕсли;
	СтрокиОтгрузки = РасчетыОтгрузкиПоставки.НайтиСтроки(Новый Структура("Регистратор",Регистратор));
	Если ПериодЗачета <> Неопределено Тогда
		ПериодЗачета = НачалоДня(ПериодЗачета);
	КонецЕсли;
	
	Для Каждого СтрокаОтгрузки Из СтрокиОтгрузки Цикл
		
		Если СтрокаОтгрузки.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ГлобальныеПеременные.ВариантКурсаДоговора = Перечисления.ВариантыКурсаДоговора.ФиксированныйНаДатуОтгрузки Тогда
			// Переоценка до фиксированного курса возможна после частичной оплаты по другому ручному курсу или оплате в валюте, отличной от  валюты регл. учета
			Если ПериодЗачета <> Неопределено Тогда
				СуммаПереоценкиРегл = Окр(СтрокаОтгрузки.Сумма * (СтрокаОтгрузки.ИсходнаяСуммаРегл/СтрокаОтгрузки.ИсходнаяСумма), 2) - СтрокаОтгрузки.СуммаРеглДляПереоценки;
				СуммаПереоценкиУпр = Окр(СтрокаОтгрузки.Сумма * (СтрокаОтгрузки.ИсходнаяСуммаРегл/СтрокаОтгрузки.ИсходнаяСумма), 2) - СтрокаОтгрузки.СуммаУпрДляПереоценки;
				ДобавитьЗаписьПереоценки(ГлобальныеПеременные, ТаблицаРасчетовПоДокументам, НачалоДня(ПериодЗачета), СтрокаОтгрузки, "Долг", СуммаПереоценкиРегл, СуммаПереоценкиУпр);
				
				СтрокаОтгрузки.СуммаРеглДляПереоценки      = СтрокаОтгрузки.СуммаРеглДляПереоценки + СуммаПереоценкиРегл;
				СтрокаОтгрузки.СуммаУпрДляПереоценки       = СтрокаОтгрузки.СуммаУпрДляПереоценки + СуммаПереоценкиУпр;
				
				СтрокаОтгрузки.ДатаПереоценки = НачалоДня(ПериодЗачета);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если ГлобальныеПеременные.ЕжедневнаяПереоценка Тогда
			ДатаКэш = НачалоДня(СтрокаОтгрузки.ДатаПереоценки);
		Иначе
			ДатаКэш = НачалоДня(КонецМесяца(СтрокаОтгрузки.ДатаПереоценки));
		КонецЕсли;
		
		ОкончательнаяДатаПереоценки = ?(ПериодЗачета <> Неопределено, ПериодЗачета, ТекущаяДатаСеанса());
		
		Пока ДатаКэш < ОкончательнаяДатаПереоценки Цикл
			
			//Отгрузку могли уже переоценить до даты предыдущей оплаты.
			Если ДатаКэш > СтрокаОтгрузки.ДатаПереоценки Тогда
				СтрокаКурса = ГлобальныеПеременные.ТаблицаКурсовВалют.Найти(ДатаКэш, "Дата");
				
				Если СтрокаКурса <> Неопределено Тогда
					СуммаПереоценкиРегл = Окр(СтрокаОтгрузки.Сумма * СтрокаКурса.КурсРегл, 2) - СтрокаОтгрузки.СуммаРеглДляПереоценки;
					СуммаПереоценкиУпр = Окр(СтрокаОтгрузки.Сумма * СтрокаКурса.КурсРегл / СтрокаКурса.КурсУпр, 2) - СтрокаОтгрузки.СуммаУпрДляПереоценки;
					ДобавитьЗаписьПереоценки(ГлобальныеПеременные, ТаблицаРасчетовПоДокументам, КонецДня(ДатаКэш), СтрокаОтгрузки, "Долг", СуммаПереоценкиРегл, СуммаПереоценкиУпр);
					
					СтрокаОтгрузки.СуммаРеглДляПереоценки      = СтрокаОтгрузки.СуммаРеглДляПереоценки + СуммаПереоценкиРегл;
					СтрокаОтгрузки.СуммаУпрДляПереоценки       = СтрокаОтгрузки.СуммаУпрДляПереоценки + СуммаПереоценкиУпр;
					
					СтрокаОтгрузки.ДатаПереоценки = ДатаКэш;
				КонецЕсли;
			КонецЕсли;
			
			Если ГлобальныеПеременные.ЕжедневнаяПереоценка Тогда
				ДатаКэш = ДатаКэш + 86400;
			Иначе
				ДатаКэш = НачалоДня(КонецМесяца(КонецМесяца(ДатаКэш)+1));
			КонецЕсли;
			
		КонецЦикла;
		
		//Требуется переоценка на дату оплаты.
		Если ПериодЗачета <> Неопределено И ПериодЗачета > СтрокаОтгрузки.ДатаПереоценки И ПереоценкаНаДатуОплаты Тогда
			
			СтрокаКурса = ГлобальныеПеременные.ТаблицаКурсовВалют.Найти(ПериодЗачета, "Дата");
			Если СтрокаКурса <> Неопределено Тогда 
				//Долг всегда переоценивается на дату оплаты.
				СуммаПереоценкиРегл = Окр(СтрокаОтгрузки.Сумма * СтрокаКурса.КурсРегл, 2) - СтрокаОтгрузки.СуммаРеглДляПереоценки;
				СуммаПереоценкиУпр = Окр(СтрокаОтгрузки.Сумма  * СтрокаКурса.КурсРегл / СтрокаКурса.КурсУпр, 2) - СтрокаОтгрузки.СуммаУпрДляПереоценки;
				ДобавитьЗаписьПереоценки(ГлобальныеПеременные, ТаблицаРасчетовПоДокументам, НачалоДня(ПериодЗачета), СтрокаОтгрузки, "Долг", СуммаПереоценкиРегл, СуммаПереоценкиУпр);
				
				СтрокаОтгрузки.СуммаРеглДляПереоценки      = СтрокаОтгрузки.СуммаРеглДляПереоценки + СуммаПереоценкиРегл;
				СтрокаОтгрузки.СуммаУпрДляПереоценки       = СтрокаОтгрузки.СуммаУпрДляПереоценки + СуммаПереоценкиУпр;
				
				СтрокаОтгрузки.ДатаПереоценки = ПериодЗачета;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//Добавляет записи прихода по ресурсам долг и предоплата.
Процедура ДобавитьПриход(ГлобальныеПеременные, ТаблицаДвиженийРасчетов, СтрокаРасчетов, ТипИсточника, ТаблицаЗачетовОплат, Индекс)
	
	Если ТипИсточника = "Оплата" Тогда
		СтрокиЗачетов = ТаблицаЗачетовОплат.НайтиСтроки(Новый Структура("ИндексСтрокиОплат,ПриходДобавлен", Индекс, ЛОЖЬ));
	Иначе
		СтрокиЗачетов = ТаблицаЗачетовОплат.НайтиСтроки(Новый Структура("ИндексСтрокиОтгрузокПоставок,ПриходДобавлен", Индекс, ЛОЖЬ));
	КонецЕсли;
	
	Если СтрокиЗачетов.Количество() > 0 Тогда
		ПересчитатьСуммыЕслиЭтоКорректировка(ГлобальныеПеременные, СтрокаРасчетов, ТипИсточника);
	КонецЕсли;
	
	Сумма = СтрокаРасчетов.Сумма;
	СуммаРегл = СтрокаРасчетов.СуммаРегл;
	СуммаУпр = СтрокаРасчетов.СуммаУпр;
	
	Для Каждого СтрокаЗачета Из СтрокиЗачетов Цикл
		
		Если СтрокаЗачета.Сумма = 0
			ИЛИ ТипИсточника = "Оплата" И НЕ СтрокаЗачета.ЗачетАванса И СтрокаЗачета.ИндексСтрокиОтгрузокПоставок <> -1
			ИЛИ ТипИсточника <> "Оплата" И СтрокаЗачета.ЗачетАванса И СтрокаЗачета.ИндексСтрокиОплат <> -1 Тогда
			Продолжить;
		КонецЕсли;
		
		СуммаСписанияРегл = СуммаСписания(0,СуммаРегл,Сумма, СтрокаЗачета.Сумма);
		СуммаСписанияУпр  = СуммаСписания(0,СуммаУпр,Сумма, СтрокаЗачета.Сумма);
		Если СтрокаРасчетов.ПорядокОперации >= ГлобальныеПеременные.ПорядокФакт Тогда
			
			НовСтр = ТаблицаДвиженийРасчетов.Добавить();
			НовСтр.ВидДвижения                   = ВидДвиженияНакопления.Приход;
			НовСтр.ДокументРегистратор           = СтрокаРасчетов.Регистратор;
			НовСтр.РасчетныйДокумент             = СтрокаРасчетов.РасчетныйДокумент;
			Если НЕ ЗначениеЗаполнено(НовСтр.РасчетныйДокумент) Тогда
				НовСтр.РасчетныйДокумент = СтрокаРасчетов.Регистратор;
			КонецЕсли;
			НовСтр.ХозяйственнаяОперация         = СтрокаРасчетов.ХозяйственнаяОперация;
			НовСтр.ВалютаДокумента               = СтрокаРасчетов.ВалютаДокумента;
			НовСтр.ДатаВозникновения             = СтрокаРасчетов.ДатаВозникновения;
			НовСтр.Период                        = СтрокаРасчетов.Период;
			НовСтр.ПорядокОперации               = СтрокаРасчетов.ПорядокОперации;
			НовСтр.СтатьяДвиженияДенежныхСредств = СтрокаРасчетов.СтатьяДвиженияДенежныхСредств;
			НовСтр.НастройкаХозяйственнойОперации = СтрокаРасчетов.НастройкаХозяйственнойОперации;
			НовСтр.ИдентификаторФинЗаписи        = СтрокаРасчетов.ИдентификаторФинЗаписи;
			НовСтр.КорОбъектРасчетов             = СтрокаРасчетов.КорОбъектРасчетов;
			НовСтр.КорАналитикаУчетаПоПартнерам  = СтрокаРасчетов.КорАналитикаУчетаПоПартнерам;
			НовСтр.АналитикаУчетаПоПартнерамПриемник = СтрокаРасчетов.АналитикаУчетаПоПартнерамПриемник;
			НовСтр.ОбъектРасчетовПриемник            = СтрокаРасчетов.ОбъектРасчетовПриемник;
			НовСтр.ВалютаПриемник                    = СтрокаРасчетов.ВалютаПриемник;
			НовСтр.СуммаПриемник                     = СтрокаРасчетов.СуммаПриемник;
			НовСтр.ПоДаннымОбъектаРасчетовИсточника  = СтрокаРасчетов.ПоДаннымОбъектаРасчетовИсточника;
			СтрокаРасчетов.СуммаПриемник             = 0;
			
			НовСтр.Сторно                        = СтрокаРасчетов.Сторно;
			
			Если ТипИсточника = "Оплата" Тогда
			
				НовСтр.СвязанныйДокумент     = СтрокаРасчетов.СвязанныйДокумент;
			
				НовСтр.Долг           = 0;
				НовСтр.ДолгРегл       = 0;
				НовСтр.ДолгУпр        = 0;
			
				НовСтр.Предоплата     = СтрокаЗачета.Сумма;
				НовСтр.ПредоплатаРегл = СуммаСписанияРегл;
				НовСтр.ПредоплатаУпр  = СуммаСписанияУпр;
				НовСтр.ДатаПлановогоПогашения = ?(СтрокаЗачета.ДатаПлановогоПогашенияОплаты = Дата(1,1,1),
													СтрокаРасчетов.ДатаПлановогоПогашения,
													СтрокаЗачета.ДатаПлановогоПогашенияОплаты);
				НовСтр.ПорядокЗачета = ?(СтрокаЗачета.ДатаПлановогоПогашенияОплаты = Дата(1,1,1),
													СтрокаРасчетов.ПорядокЗачетаПоДатеПлатежа,
													Формат(СтрокаЗачета.ДатаПлановогоПогашенияОплаты, "ДФ=yyyyMMdd") + Прав(СтрокаРасчетов.ПорядокЗачетаПоДатеПлатежа,20));
			ИначеЕсли ТипИсточника = "ОтгрузкаПоставка" Тогда
			
				НовСтр.Долг           = СтрокаЗачета.Сумма;
				НовСтр.ДолгРегл       = СуммаСписанияРегл;
				НовСтр.ДолгУпр        = СуммаСписанияУпр;
				
				НовСтр.Предоплата     = 0;
				НовСтр.ПредоплатаРегл = 0;
				НовСтр.ПредоплатаУпр  = 0;
				НовСтр.ДатаПлановогоПогашения = СтрокаРасчетов.ДатаПлановогоПогашения;
				НовСтр.ПорядокЗачета = СтрокаРасчетов.ПорядокЗачетаПоДатеПлатежа;
				
			КонецЕсли;
			
			Сумма = Сумма - НовСтр.Предоплата - НовСтр.Долг;
			СуммаРегл = СуммаРегл - НовСтр.ПредоплатаРегл - НовСтр.ДолгРегл;
			СуммаУпр = СуммаУпр - НовСтр.ПредоплатаУпр - НовСтр.ДолгУпр;
			
		КонецЕсли;
		
		Если ТипИсточника = "ОтгрузкаПоставка" Тогда
			//Записи в ДанныеНакладных может не быть.
			Если ГлобальныеПеременные.ДанныеНакладных[СтрокаРасчетов.Регистратор] = Неопределено Тогда
				ГлобальныеПеременные.ДанныеНакладных.Вставить(СтрокаРасчетов.Регистратор, СтруктураСумм());
			КонецЕсли;
			
			//Если добавляем приход, значит авансы уже зачтены, и осталась часть долга по курсу накладной.
			ДанныеНакладной = ГлобальныеПеременные.ДанныеНакладных[СтрокаРасчетов.Регистратор];
			ДанныеНакладной.СуммаДокумента     = ДанныеНакладной.СуммаДокумента + СтрокаЗачета.Сумма;
			ДанныеНакладной.СуммаДокументаРегл = ДанныеНакладной.СуммаДокументаРегл + СуммаСписанияРегл;
			ДанныеНакладной.СуммаДокументаУпр  = ДанныеНакладной.СуммаДокументаУпр  + СуммаСписанияУпр;
		КонецЕсли;
		
		СтрокаЗачета.ПриходДобавлен = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

//Добавляет записи переоценки долга.
Процедура ДобавитьЗаписьПереоценки(ГлобальныеПеременные, ТаблицаРасчетовПоДокументам, Период, СтрокаРасчетов, Тип, СуммаРегл, СуммаУпр)
	
	Если НЕ ГлобальныеПеременные.Свойство("ТаблицаКурсовВалют")
		ИЛИ СуммаРегл = 0 И СуммаУпр = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПорядокПереоценки = ГлобальныеПеременные.ПорядокПереоценки.Получить(Период);
	Если ПорядокПереоценки = Неопределено Тогда
		ПорядокПереоценки = Порядок(Период,"", Тип("ДокументСсылка.РасчетКурсовыхРазниц"),"9","99");
		ГлобальныеПеременные.ПорядокПереоценки.Вставить(Период, ПорядокПереоценки);
	КонецЕсли;
	
	Если ПорядокПереоценки < ГлобальныеПеременные.ПорядокФакт Тогда
		Возврат;
	КонецЕсли;
	
	Если СуммаРегл < 0 ИЛИ СуммаУпр < 0 Тогда
		СтрокаПереоценки = ТаблицаРасчетовПоДокументам.Добавить();
		СтрокаПереоценки.ВидДвижения              = ВидДвиженияНакопления.Расход;
		СтрокаПереоценки.ДокументРегистратор      = ГлобальныеПеременные.ДокументыРасчетаКурсовыхРазниц[НачалоМесяца(Период)];
		СтрокаПереоценки.ХозяйственнаяОперация    = ГлобальныеПеременные.ХозяйственныеОперации["ПереоценкаОтрицательная"];
		СтрокаПереоценки.РасчетныйДокумент        = СтрокаРасчетов.РасчетныйДокумент;
		СтрокаПереоценки.ВалютаДокумента          = СтрокаРасчетов.ВалютаДокумента;
		СтрокаПереоценки.ДатаВозникновения        = СтрокаРасчетов.ДатаВозникновения;
		СтрокаПереоценки.НастройкаХозяйственнойОперации = ГлобальныеПеременные.НастройкиХО["ПереоценкаОтрицательная"];
		СтрокаПереоценки.ИдентификаторФинЗаписи   = Новый УникальныйИдентификатор;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаРасчетов,"ПорядокЗачетаПоДатеПлатежа") Тогда
			СтрокаПереоценки.ПорядокЗачета            = СтрокаРасчетов.ПорядокЗачетаПоДатеПлатежа;
		Иначе
			СтрокаПереоценки.ПорядокЗачета            = СтрокаРасчетов.ПорядокЗачета;
		КонецЕсли;
		СтрокаПереоценки.Период                   = КонецДня(Период);
		СтрокаПереоценки.ПорядокОперации          = ПорядокПереоценки;
		СтрокаПереоценки.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
		
		Если Тип = "Долг" Тогда
			СтрокаПереоценки.ДолгРегл             = ?(СуммаРегл < 0, -СуммаРегл, 0);
			СтрокаПереоценки.ДолгУпр              = ?(СуммаУпр < 0, -СуммаУпр, 0);
			СтрокаПереоценки.ДатаПлановогоПогашения   = СтрокаРасчетов.ДатаПлановогоПогашения;
		Иначе
			СтрокаПереоценки.ПредоплатаРегл       = ?(СуммаРегл < 0, -СуммаРегл, 0);
			СтрокаПереоценки.ПредоплатаУпр        = ?(СуммаУпр < 0, -СуммаУпр, 0);
			СтрокаПереоценки.ДатаПлановогоПогашения   = Дата(1,1,1);
		КонецЕсли;
		
		СтрокаПереоценки.КорОбъектРасчетов            = Справочники.ОбъектыРасчетов.ПустаяСсылка();
		СтрокаПереоценки.КорАналитикаУчетаПоПартнерам = Справочники.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка();
		СтрокаПереоценки.АналитикаУчетаПоПартнерамПриемник = Справочники.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка();
		СтрокаПереоценки.ОбъектРасчетовПриемник            = Справочники.ОбъектыРасчетов.ПустаяСсылка();
		СтрокаПереоценки.ВалютаПриемник            = Справочники.Валюты.ПустаяСсылка();
		СтрокаПереоценки.СуммаПриемник = 0;
		СтрокаПереоценки.ПоДаннымОбъектаРасчетовИсточника = ЛОЖЬ;
		
	КонецЕсли;
	
	Если СуммаРегл > 0 ИЛИ СуммаУпр > 0 Тогда
		СтрокаПереоценки = ТаблицаРасчетовПоДокументам.Добавить();
		СтрокаПереоценки.ВидДвижения              = ВидДвиженияНакопления.Приход;
		СтрокаПереоценки.ДокументРегистратор      = ГлобальныеПеременные.ДокументыРасчетаКурсовыхРазниц[НачалоМесяца(Период)];
		СтрокаПереоценки.ХозяйственнаяОперация    = ГлобальныеПеременные.ХозяйственныеОперации["ПереоценкаПоложительная"];
		СтрокаПереоценки.РасчетныйДокумент        = СтрокаРасчетов.РасчетныйДокумент;
		СтрокаПереоценки.ВалютаДокумента          = СтрокаРасчетов.ВалютаДокумента;
		СтрокаПереоценки.ДатаВозникновения        = СтрокаРасчетов.ДатаВозникновения;
		СтрокаПереоценки.НастройкаХозяйственнойОперации = ГлобальныеПеременные.НастройкиХО["ПереоценкаПоложительная"];
		СтрокаПереоценки.ИдентификаторФинЗаписи   = Новый УникальныйИдентификатор;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаРасчетов,"ПорядокЗачетаПоДатеПлатежа") Тогда
			СтрокаПереоценки.ПорядокЗачета            = СтрокаРасчетов.ПорядокЗачетаПоДатеПлатежа;
		Иначе
			СтрокаПереоценки.ПорядокЗачета            = СтрокаРасчетов.ПорядокЗачета;
		КонецЕсли;
		СтрокаПереоценки.Период                   = КонецДня(Период);
		СтрокаПереоценки.ПорядокОперации          = ПорядокПереоценки;
		СтрокаПереоценки.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
		
		Если Тип = "Долг" Тогда
			СтрокаПереоценки.ДолгРегл               = ?(СуммаРегл > 0, СуммаРегл, 0);
			СтрокаПереоценки.ДолгУпр                = ?(СуммаУпр > 0, СуммаУпр, 0);
			СтрокаПереоценки.ДатаПлановогоПогашения = СтрокаРасчетов.ДатаПлановогоПогашения;
		Иначе
			СтрокаПереоценки.ПредоплатаРегл         = ?(СуммаРегл > 0, СуммаРегл, 0);
			СтрокаПереоценки.ПредоплатаУпр          = ?(СуммаУпр > 0, СуммаУпр, 0);
			СтрокаПереоценки.ДатаПлановогоПогашения   = Дата(1,1,1);
		КонецЕсли;
		
		СтрокаПереоценки.КорОбъектРасчетов            = Справочники.ОбъектыРасчетов.ПустаяСсылка();
		СтрокаПереоценки.КорАналитикаУчетаПоПартнерам = Справочники.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка();
		СтрокаПереоценки.АналитикаУчетаПоПартнерамПриемник = Справочники.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка();
		СтрокаПереоценки.ОбъектРасчетовПриемник            = Справочники.ОбъектыРасчетов.ПустаяСсылка();
		СтрокаПереоценки.ВалютаПриемник            = Справочники.Валюты.ПустаяСсылка();
		СтрокаПереоценки.СуммаПриемник = 0;
		СтрокаПереоценки.ПоДаннымОбъектаРасчетовИсточника = ЛОЖЬ;
		
	КонецЕсли;
	
КонецПроцедуры

//Пересчитывает сумму регл. и упр. учета строки расчетов по курсу связанного документа, если он проведен.
Процедура ПересчитатьСуммыЕслиЭтоКорректировка(ГлобальныеПеременные, СтрокаРасчетов, ТипИсточника = "")
	
	Если (СтрокаРасчетов.ЭтоКорректировка ИЛИ ТипИсточника <> "ОтгрузкаПоставка")
		И ГлобальныеПеременные.ДанныеНакладных[СтрокаРасчетов.СвязанныйДокумент] <> Неопределено
			И ГлобальныеПеременные.ДанныеНакладных[СтрокаРасчетов.СвязанныйДокумент].СуммаДокумента <> 0 Тогда
		
		Если ГлобальныеПеременные.ВалютаРегламентированногоУчета <> СтрокаРасчетов.ВалютаДокумента
				И ГлобальныеПеременные.ВалютаРегламентированногоУчета <> ГлобальныеПеременные.ВалютаРасчетов Тогда
			СтрокаРасчетов.СуммаРегл = Окр(СтрокаРасчетов.Сумма *
				(ГлобальныеПеременные.ДанныеНакладных[СтрокаРасчетов.СвязанныйДокумент].СуммаДокументаРегл
					/ ГлобальныеПеременные.ДанныеНакладных[СтрокаРасчетов.СвязанныйДокумент].СуммаДокумента),2);
		КонецЕсли;
		Если ГлобальныеПеременные.ВалютаУправленческогоУчета <> СтрокаРасчетов.ВалютаДокумента
				И ГлобальныеПеременные.ВалютаУправленческогоУчета <> ГлобальныеПеременные.ВалютаРасчетов Тогда
			СтрокаРасчетов.СуммаУпр = Окр(СтрокаРасчетов.Сумма *
				(ГлобальныеПеременные.ДанныеНакладных[СтрокаРасчетов.СвязанныйДокумент].СуммаДокументаУпр
					/ ГлобальныеПеременные.ДанныеНакладных[СтрокаРасчетов.СвязанныйДокумент].СуммаДокумента),2);
		КонецЕсли;
		
		Если ТипИсточника = "ОтгрузкаПоставка" Тогда
			СтрокаРасчетов.СуммаРеглДляПереоценки = СтрокаРасчетов.СуммаРегл;
			СтрокаРасчетов.СуммаУпрДляПереоценки = СтрокаРасчетов.СуммаУпр;
			
			СтрокаРасчетов.ИсходнаяСуммаРегл = Окр(СтрокаРасчетов.ИсходнаяСумма
				* (ГлобальныеПеременные.ДанныеНакладных[СтрокаРасчетов.СвязанныйДокумент].СуммаДокументаРегл
					/ ГлобальныеПеременные.ДанныеНакладных[СтрокаРасчетов.СвязанныйДокумент].СуммаДокумента),2);
			СтрокаРасчетов.ИсходнаяСуммаУпр = Окр(СтрокаРасчетов.ИсходнаяСумма
				* (ГлобальныеПеременные.ДанныеНакладных[СтрокаРасчетов.СвязанныйДокумент].СуммаДокументаУпр
					/ ГлобальныеПеременные.ДанныеНакладных[СтрокаРасчетов.СвязанныйДокумент].СуммаДокумента),2);
		КонецЕсли;
	КонецЕсли;
	
	СтрокаРасчетов.ЭтоКорректировка = Ложь;
	
КонецПроцедуры

// Параметры:
//  ТаблицаДвиженийПлановыхОплат - ТаблицаЗначений
//  ОстаткиПлановыхОплат - ТаблицаЗначений
//  СтрокаОстатка - СтрокаТаблицыЗначений
//  СтрокаУточнения - СтрокаТаблицыЗначений
//  СуммаСписания - Число
//  ДатаНераспределенногоАванса - Дата - Передается, если план оплаты заказа уменьшается нераспределенным авансом
Процедура УменьшитьПланОплатыПоЗаказу(ТаблицаДвиженийПлановыхОплат, ОстаткиПлановыхОплат, СтрокаОстатка, СтрокаУточнения, СуммаСписания, ДатаНераспределенногоАванса = Неопределено)
	
	СтрокаУточнения.Сумма = СтрокаУточнения.Сумма - СуммаСписания;
	
	НовСтр = ТаблицаДвиженийПлановыхОплат.Добавить();
	НовСтр.ВидДвижения               = ВидДвиженияНакопления.Расход;
	НовСтр.ДокументРегистратор       = ?(СтрокаУточнения.ДатаВозникновения < СтрокаОстатка.ДатаВозникновения , СтрокаОстатка.ДокументПлан, СтрокаУточнения.Регистратор);
	НовСтр.ДокументПлан              = СтрокаОстатка.ДокументПлан;
	НовСтр.ВариантОплаты             = СтрокаОстатка.ВариантОплаты;
	НовСтр.Период                    = ?(ДатаНераспределенногоАванса = Неопределено, СтрокаУточнения.ДатаВозникновения, ДатаНераспределенногоАванса);
	НовСтр.ПорядокОперации           = СтрокаУточнения.ПорядокОперации;
	НовСтр.ДатаВозникновения         = СтрокаОстатка.ДатаВозникновения;
	НовСтр.ДатаПлановогоПогашения    = СтрокаОстатка.ДатаПлановогоПогашения;
	НовСтр.НераспределенныйАванс     = ?(ДатаНераспределенногоАванса = Неопределено, ЛОЖЬ, ИСТИНА);
	НовСтр.ДокументОплаты            = СтрокаУточнения.Регистратор;
	НовСтр.КОплате                   = СуммаСписания;
	
	// Т.к. ОстаткиПлановыхОплат не всегда владелец строки остатка
	Если ДатаНераспределенногоАванса <> Неопределено Тогда
		НовСтр = ОстаткиПлановыхОплат.Добавить();
		НовСтр.ДокументПлан              = СтрокаОстатка.ДокументПлан;
		НовСтр.ВариантОплаты             = СтрокаОстатка.ВариантОплаты;
		НовСтр.ДатаВозникновения         = СтрокаОстатка.ДатаВозникновения;
		НовСтр.ДатаПлановогоПогашения    = СтрокаОстатка.ДатаПлановогоПогашения;
		НовСтр.НераспределенныйАванс     = ИСТИНА;
		НовСтр.КОплате                   = -СуммаСписания;
	КонецЕсли;
	
	СтрокаОстатка.КОплате = СтрокаОстатка.КОплате - СуммаСписания;
	
КонецПроцедуры

// Параметры:
//  ТаблицаДвиженийПлановыхОплат - ТаблицаЗначений
//  ОстаткиПлановыхОплат - ТаблицаЗначений
//  СтрокаОстатка - СтрокаТаблицыЗначений
//  СтрокаУточнения - СтрокаТаблицыЗначений
//  СуммаСписания - Число
//  ДатаНераспределенногоАванса - Дата - Передается если сторнируется запись нераспределенного аванса другим нераспределенным авансом.
Процедура СторнироватьНераспределенныйАванс(ТаблицаДвиженийПлановыхОплат, ОстаткиПлановыхОплат, СтрокаОстатка, СтрокаУточнения, СуммаСписания, ДатаНераспределенногоАванса = Неопределено)
	
	НовСтр = ТаблицаДвиженийПлановыхОплат.Добавить();
	НовСтр.ВидДвижения               = ВидДвиженияНакопления.Расход;
	НовСтр.ДокументРегистратор       = ?(СтрокаУточнения.ДатаВозникновения < СтрокаОстатка.ДатаВозникновения , СтрокаОстатка.ДокументПлан, СтрокаУточнения.Регистратор);
	НовСтр.ДокументПлан              = СтрокаОстатка.ДокументПлан;
	НовСтр.ВариантОплаты             = СтрокаОстатка.ВариантОплаты;
	НовСтр.Период                    = ?(ДатаНераспределенногоАванса = Неопределено, СтрокаУточнения.ДатаДвижения, ДатаНераспределенногоАванса);
	НовСтр.ПорядокОперации           = СтрокаУточнения.ПорядокОперации;
	НовСтр.ДатаВозникновения         = СтрокаОстатка.ДатаВозникновения;
	НовСтр.ДатаПлановогоПогашения    = СтрокаОстатка.ДатаПлановогоПогашения;
	НовСтр.НераспределенныйАванс     = ИСТИНА;
	НовСтр.ДокументОплаты            = СтрокаУточнения.Регистратор;
	НовСтр.КОплате                   = СуммаСписания;
	
	// Т.к. ОстаткиПлановыхОплат не всегда владелец строки остатка
	Если ОстаткиПлановыхОплат.Индекс(СтрокаОстатка) = -1 Тогда
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ДокументПлан",           СтрокаОстатка.ДокументПлан);
		СтруктураПоиска.Вставить("ВариантОплаты",          СтрокаОстатка.ВариантОплаты);
		СтруктураПоиска.Вставить("ДатаВозникновения",      СтрокаОстатка.ДатаВозникновения);
		СтруктураПоиска.Вставить("ДатаПлановогоПогашения", СтрокаОстатка.ДатаПлановогоПогашения);
		СтруктураПоиска.Вставить("НераспределенныйАванс",  ИСТИНА);
		СтрокиПлановыхОплат = ОстаткиПлановыхОплат.НайтиСтроки(СтруктураПоиска);
		СуммаСписанияИзПланов = -СуммаСписания;
		Для Каждого Стр Из СтрокиПлановыхОплат Цикл
			Если СуммаСписанияИзПланов = 0 Тогда
				Прервать;
			КонецЕсли;
			ТекущаяСуммаСписания = Мин(СуммаСписанияИзПланов,-Стр.КОплате);
			Стр.КОплате = Стр.КОплате + ТекущаяСуммаСписания;
			СуммаСписанияИзПланов = СуммаСписанияИзПланов - ТекущаяСуммаСписания;
		КонецЦикла;
		
	КонецЕсли;
	
	СтрокаОстатка.КОплате = СтрокаОстатка.КОплате - СуммаСписания;
	
КонецПроцедуры

// Параметры:
//  ТаблицаДвиженийПлановыхОплат - ТаблицаЗначений
//  ОстаткиПлановыхОплат - ТаблицаЗначений
//  СтрокаОстатка - СтрокаТаблицыЗначений
//  СтрокаУточнения - СтрокаТаблицыЗначений
//  СуммаСписания - Число
//  ДатаНераспределенногоАванса - Дата
Процедура УменьшитьПланОтгрузкиПоЗаказу(ТаблицаДвиженийПлановыхОтгрузок, ОстаткиПлановыхОтгрузок, СтрокаОстатка, СтрокаУточнения, СуммаСписания, ДатаНераспределенногоАванса = Неопределено)
	
	СтрокаУточнения.Сумма = СтрокаУточнения.Сумма - СуммаСписания;
	
	НовСтр = ТаблицаДвиженийПлановыхОтгрузок.Добавить();
	НовСтр.ВидДвижения               = ВидДвиженияНакопления.Расход;
	НовСтр.ДокументРегистратор       = ?(СтрокаУточнения.ДатаВозникновения < СтрокаОстатка.ДатаВозникновения , СтрокаОстатка.ДокументПлан, СтрокаУточнения.Регистратор);
	НовСтр.ДокументПлан              = СтрокаОстатка.ДокументПлан;
	НовСтр.Период                    = ?(ДатаНераспределенногоАванса = Неопределено, СтрокаУточнения.ДатаДвижения, ДатаНераспределенногоАванса);
	НовСтр.ПорядокОперации           = СтрокаУточнения.ПорядокОперации;
	НовСтр.ДатаВозникновения         = СтрокаОстатка.ДатаВозникновения;
	НовСтр.ДатаПлановогоПогашения    = СтрокаОстатка.ДатаПлановогоПогашения;
	НовСтр.НераспределенныйАванс     = ?(ДатаНераспределенногоАванса = Неопределено, ЛОЖЬ, ИСТИНА);
	НовСтр.ДокументОплаты            = СтрокаУточнения.Регистратор;
	НовСтр.Сумма                     = СуммаСписания;
	
	//Т.к. ОстаткиПлановыхОплат не всегда владелец строки остатка
	Если ОстаткиПлановыхОтгрузок.Индекс(СтрокаОстатка) = -1 Тогда
		НовСтр = ОстаткиПлановыхОтгрузок.Добавить();
		НовСтр.ДокументПлан              = СтрокаОстатка.ДокументПлан;
		НовСтр.ДатаВозникновения         = СтрокаОстатка.ДатаВозникновения;
		НовСтр.ДатаПлановогоПогашения    = СтрокаОстатка.ДатаПлановогоПогашения;
		НовСтр.НераспределенныйАванс     = ?(ДатаНераспределенногоАванса = Неопределено, ЛОЖЬ, ИСТИНА);
		НовСтр.Сумма                   = -СуммаСписания;
	КонецЕсли;
	
	СтрокаОстатка.Сумма = СтрокаОстатка.Сумма - СуммаСписания;
	
КонецПроцедуры

// Параметры:
//  ТаблицаДвиженийПлановыхОплат - ТаблицаЗначений
//  ОстаткиПлановыхОплат - ТаблицаЗначений
//  СтрокаОстатка - СтрокаТаблицыЗначений
//  СтрокаУточнения - СтрокаТаблицыЗначений
//  СуммаСписания - Число
//  ДатаНераспределенногоАванса - Дата
Процедура СторнироватьНераспределенныйАвансПланаОтгрузок(ТаблицаДвиженийПлановыхОтгрузок, ОстаткиПлановыхОтгрузок, СтрокаОстатка, СтрокаУточнения, СуммаСписания, ДатаНераспределенногоАванса = Неопределено)
	
	НовСтр = ТаблицаДвиженийПлановыхОтгрузок.Добавить();
	НовСтр.ВидДвижения               = ВидДвиженияНакопления.Расход;
	НовСтр.ДокументРегистратор       = ?(СтрокаУточнения.ДатаВозникновения < СтрокаОстатка.ДатаВозникновения , СтрокаОстатка.ДокументПлан, СтрокаУточнения.Регистратор);
	НовСтр.ДокументПлан              = СтрокаОстатка.ДокументПлан;
	НовСтр.Период                    = ?(ДатаНераспределенногоАванса = Неопределено, СтрокаУточнения.ДатаДвижения, ДатаНераспределенногоАванса);
	НовСтр.ПорядокОперации           = СтрокаУточнения.ПорядокОперации;
	НовСтр.ДатаВозникновения         = СтрокаОстатка.ДатаВозникновения;
	НовСтр.ДатаПлановогоПогашения    = СтрокаОстатка.ДатаПлановогоПогашения;
	НовСтр.НераспределенныйАванс     = ИСТИНА;
	НовСтр.ДокументОплаты            = СтрокаУточнения.Регистратор;
	НовСтр.Сумма                   = СуммаСписания;
	
	//Т.к. ОстаткиПлановыхОтгрузок не всегда владелец строки остатка
	Если ОстаткиПлановыхОтгрузок.Индекс(СтрокаОстатка) = -1 Тогда
		НовСтр = ОстаткиПлановыхОтгрузок.Добавить();
		НовСтр.ДокументПлан              = СтрокаОстатка.ДокументПлан;
		НовСтр.ДатаВозникновения         = СтрокаОстатка.ДатаВозникновения;
		НовСтр.ДатаПлановогоПогашения    = СтрокаОстатка.ДатаПлановогоПогашения;
		НовСтр.НераспределенныйАванс     = ИСТИНА;
		НовСтр.Сумма                   = -СуммаСписания;
	КонецЕсли;
	
	СтрокаОстатка.Сумма = СтрокаОстатка.Сумма - СуммаСписания;
	
КонецПроцедуры

Процедура УточнитьГрафикПогашенияАванса(ТаблицаЗачетовОплат, ДвижениеПредоплаты, ЗНАЧ СуммаСписания, ДатаПлановогоПогашения)
	
	СтрокиДокументаОплаты = ТаблицаЗачетовОплат.НайтиСтроки(Новый Структура("ДокументОплаты,ДатаПогашенияАвансаУточнена", ДвижениеПредоплаты.Регистратор, Ложь));
	
	Для Каждого СтрокаТаблицыЗачетов Из СтрокиДокументаОплаты Цикл
		Если СуммаСписания <= 0 Тогда
			Прервать;
		КонецЕсли;
		
		Если СтрокаТаблицыЗачетов.ЗачетАванса //авансы
			ИЛИ СтрокаТаблицыЗачетов.ИндексСтрокиОтгрузокПоставок = -1 //остатки оплат 
			Тогда
			
			СуммаСписанияСтроки = Мин(СуммаСписания,СтрокаТаблицыЗачетов.Сумма);
			Если СуммаСписанияСтроки < СтрокаТаблицыЗачетов.Сумма Тогда
				НовСтр = ТаблицаЗачетовОплат.Вставить(ТаблицаЗачетовОплат.Индекс(СтрокаТаблицыЗачетов));
				ЗаполнитьЗначенияСвойств(НовСтр,СтрокаТаблицыЗачетов);
				НовСтр.Сумма = СуммаСписанияСтроки;
				СтрокаТаблицыЗачетов.Сумма = СтрокаТаблицыЗачетов.Сумма - СуммаСписанияСтроки;
				СуммаСписания = 0;
			Иначе
				НовСтр = СтрокаТаблицыЗачетов;
				СуммаСписания = СуммаСписания - СтрокаТаблицыЗачетов.Сумма;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицыЗачетов.ДатаПлановогоПогашенияОплаты) Тогда
				НовСтр.ДатаПлановогоПогашенияОплаты = ДатаПлановогоПогашения;
			КонецЕсли;
			НовСтр.ДатаПогашенияАвансаУточнена = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПереходНаОнлайнВзаиморасчеты

Процедура ЗаполнитьРегистрПереходаНаОнлайн()
	
	#Область ТекстЗапроса
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(РасчетыСКлиентами.ДатаДвижения) КАК ДатаДвижения,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом) КАК ТипРасчетов,
	|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСКлиентами.ОбъектРасчетов КАК ОбъектРасчетов,
	|	РасчетыСКлиентами.Валюта КАК Валюта,
	|	КОЛИЧЕСТВО(*) КАК КоличествоДокументов,
	|	МАКСИМУМ(РасчетыСКлиентами.Приоритет) КАК Приоритет
	|ИЗ 
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		РасчетыСПартнерами.Период КАК ДатаДвижения,
	|		РасчетыСПартнерами.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		РасчетыСПартнерами.ЗаказКлиента КАК ОбъектРасчетов,
	|		РасчетыСПартнерами.Валюта КАК Валюта,
	|		ВЫБОР КОГДА ЕСТЬNULL(Расчеты.ПоДаннымОбъектаРасчетовИсточника,ЛОЖЬ)
	|			ТОГДА 2
	|			ИНАЧЕ 1
	|		КОНЕЦ КАК Приоритет
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК РасчетыСПартнерами
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами КАК Расчеты
	|				ПО Расчеты.Регистратор = РасчетыСПартнерами.Регистратор
	|					И Расчеты.АналитикаУчетаПоПартнерам = РасчетыСПартнерами.АналитикаУчетаПоПартнерам
	|					И Расчеты.ОбъектРасчетов = РасчетыСПартнерами.ЗаказКлиента
	|		
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		РасчетыСПартнерами.Период КАК ДатаДвижения,
	|		РасчетыСПартнерами.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		РасчетыСПартнерами.ОбъектРасчетов КАК ОбъектРасчетов,
	|		РасчетыСПартнерами.Валюта КАК Валюта,
	|		ВЫБОР КОГДА РасчетыСПартнерами.ПоДаннымОбъектаРасчетовИсточника
	|			ТОГДА 2
	|			ИНАЧЕ 1
	|		КОНЕЦ КАК Приоритет
	|	ИЗ 
	|		РегистрНакопления.РасчетыСКлиентами КАК РасчетыСПартнерами
	|	ГДЕ
	|		НЕ ИСТИНА В (
	|			ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК РасчетыПоДокументам
	|			ГДЕ
	|				РасчетыСПартнерами.АналитикаУчетаПоПартнерам = РасчетыПоДокументам.АналитикаУчетаПоПартнерам
	|				И РасчетыСПартнерами.ОбъектРасчетов = РасчетыПоДокументам.ЗаказКлиента
	|				И РасчетыСПартнерами.Валюта = РасчетыПоДокументам.Валюта
	|		)
	|
	|	) КАК РасчетыСКлиентами
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам,
	|	РасчетыСКлиентами.ОбъектРасчетов,
	|	РасчетыСКлиентами.Валюта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МАКСИМУМ(РасчетыСПоставщиками.ДатаДвижения) КАК ДатаДвижения,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком) КАК ТипРасчетов,
	|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСПоставщиками.ОбъектРасчетов КАК ОбъектРасчетов,
	|	РасчетыСПоставщиками.Валюта КАК Валюта,
	|	КОЛИЧЕСТВО(*) КАК КоличествоДокументов,
	|	МАКСИМУМ(РасчетыСПоставщиками.Приоритет) КАК Приоритет
	|ИЗ 
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		РасчетыСПартнерами.Период КАК ДатаДвижения,
	|		РасчетыСПартнерами.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		РасчетыСПартнерами.ЗаказПоставщику КАК ОбъектРасчетов,
	|		РасчетыСПартнерами.Валюта КАК Валюта,
	|		ВЫБОР КОГДА ЕСТЬNULL(Расчеты.ПоДаннымОбъектаРасчетовИсточника,ЛОЖЬ)
	|			ТОГДА 2
	|			ИНАЧЕ 1
	|		КОНЕЦ КАК Приоритет
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК РасчетыСПартнерами
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
	|				ПО Расчеты.Регистратор = РасчетыСПартнерами.Регистратор
	|					И Расчеты.АналитикаУчетаПоПартнерам = РасчетыСПартнерами.АналитикаУчетаПоПартнерам
	|					И Расчеты.ОбъектРасчетов = РасчетыСПартнерами.ЗаказПоставщику
	|		
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		РасчетыСПартнерами.Период КАК ДатаДвижения,
	|		РасчетыСПартнерами.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		РасчетыСПартнерами.ОбъектРасчетов КАК ОбъектРасчетов,
	|		РасчетыСПартнерами.Валюта КАК Валюта,
	|		ВЫБОР КОГДА РасчетыСПартнерами.ПоДаннымОбъектаРасчетовИсточника
	|			ТОГДА 2
	|			ИНАЧЕ 1
	|		КОНЕЦ КАК Приоритет
	|	ИЗ 
	|		РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПартнерами
	|	ГДЕ
	|		НЕ ИСТИНА В (
	|			ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК РасчетыПоДокументам
	|			ГДЕ
	|				РасчетыСПартнерами.АналитикаУчетаПоПартнерам = РасчетыПоДокументам.АналитикаУчетаПоПартнерам
	|				И РасчетыСПартнерами.ОбъектРасчетов = РасчетыПоДокументам.ЗаказПоставщику
	|				И РасчетыСПартнерами.Валюта = РасчетыПоДокументам.Валюта
	|		)
	|
	|	) КАК РасчетыСПоставщиками
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам,
	|	РасчетыСПоставщиками.ОбъектРасчетов,
	|	РасчетыСПоставщиками.Валюта
	|
	|УПОРЯДОЧИТЬ ПО
	|	КоличествоДокументов УБЫВ,
	|	АналитикаУчетаПоПартнерам,
	|	ОбъектРасчетов";
	#КонецОбласти
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	Набор = РегистрыСведений.ЗаданияКРаспределениюРасчетов.СоздатьНаборЗаписей();
	Набор.Записать();
	НомерСтроки = 0;
	Пока Выборка.Следующий() Цикл
		
		НомерСтроки = НомерСтроки + 1;
		ЗаполнитьЗначенияСвойств(Набор.Добавить(), Выборка);
		Если НомерСтроки = 1000 Тогда
			Набор.Записать(Ложь);
			Набор.Очистить();
			НомерСтроки = 0;
		КонецЕсли;
		
	КонецЦикла;
	Набор.Записать(Ложь);
	ВсегоКПереносу = Выборка.Количество();
	
	ХранилищеОбщихНастроек.Сохранить("ПереходНаНовуюАрхитектуруВзаиморасчетов", "ВсегоКПереносу", ВсегоКПереносу);
	
	Текст = НСтр("ru = 'Включение онлайн взаиморасчетов с партнерами.'", ОбщегоНазначения.КодОсновногоЯзыка());
	ВсегоЗаписей = НСтр("ru = 'Всего кортежей к переносу'")+": %1";
	ЗаписьЖурналаРегистрации(Текст,
		УровеньЖурналаРегистрации.Информация,,,СтрШаблон(ВсегоЗаписей, ВсегоКПереносу));
	
КонецПроцедуры

// Выполняет заполнение оперативных взаиморасчетов при включении опции Онлайн взаиморасчетов
// 
// Параметры:
//   Параметры - Структура - Необязательный.
//   АдресРезультата - Строка - Необязательный
//
// Возвращаемое значение:
//   Число - Количество обработанных записей
//
Функция ВыполнитьПереносОфлайнВзаиморасчетов(Параметры = Неопределено, АдресРезультата = Неопределено) Экспорт
	
	Если Параметры <> Неопределено И Параметры.Свойство("ДанныеКОбработке") Тогда
		ДанныеКОбработке = Параметры.ДанныеКОбработке;
	Иначе
		ПараметрыДанных = ПараметрыДанныхМногопоточнойОбработки();
		ДанныеКОбработке = ДанныеДляОбработки(ПараметрыДанных).Данные;
	КонецЕсли;
	
	ПорядокОбработки = СформироватьПорцииОбработкиДанныхРегистровВзаиморасчетов(ДанныеКОбработке, 1000);
	
	КоличествоОбработанныхЗаписей = 0;
	ПорядокОперации = Новый Соответствие;
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ХозяйственныеОперацииНеОтгрузка", ХозяйственныеОперацииНеОтгрузка());

	СписокТиповИсходящихПлатежей = Новый Массив;
	СписокТиповИсходящихПлатежей.Добавить(Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств"));
	СписокТиповИсходящихПлатежей.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	Запрос.УстановитьПараметр("СписокТиповИсходящихПлатежей", СписокТиповИсходящихПлатежей);
	
	КвалификаторСтроки = Новый КвалификаторыСтроки(40);
	ДанныеКОбработке.Колонки.Добавить("ПорядокФакт", Новый ОписаниеТипов("Строка", , , , КвалификаторСтроки));
	ДанныеКОбработке.Колонки.Добавить("ПорядокПлан", Новый ОписаниеТипов("Строка", , , , КвалификаторСтроки));
	ДанныеКОбработке.Колонки.Добавить("ПорядокОперации", Новый ОписаниеТипов("Строка", , , , КвалификаторСтроки));

	Для ТекущийПорядокОбработки = 1 По ПорядокОбработки Цикл

		ПорцияДанныхКОбработке = ДанныеКОбработке.Скопировать(Новый Структура("ПорядокОбработки", ТекущийПорядокОбработки));
		
		КоличествоЗаписейКОбработке = ПорцияДанныхКОбработке.Количество();
		Если КоличествоЗаписейКОбработке = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоЗаписейКОбработкеКлиенты = ПорцияДанныхКОбработке.НайтиСтроки(Новый Структура("ТипРасчетов",
			Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом)).Количество();
			
		ЕстьЗаписиРасчетыСКлиентами = (КоличествоЗаписейКОбработкеКлиенты > 0);
		ЕстьЗаписиРасчетыСПоставщиками = (КоличествоЗаписейКОбработке - КоличествоЗаписейКОбработкеКлиенты > 0);

		НачатьТранзакцию();

		Попытка
			
			// 1. Перенесем РасчетыПоДокументам.
			Запрос.УстановитьПараметр("ДанныеКОбработке", ПорцияДанныхКОбработке);
			
			Если ЕстьЗаписиРасчетыСКлиентами Тогда
				Запрос.Текст = ТекстЗапросаРасчетыСКлиентамиПоДокументам();
				ТаблицаДетальныхЗаписейКлиенты = Запрос.Выполнить().Выгрузить();
				ТаблицаДетальныхЗаписейКлиенты.Индексы.Добавить("АналитикаУчетаПоПартнерам, ОбъектРасчетов, Валюта");
			КонецЕсли;

			Если ЕстьЗаписиРасчетыСПоставщиками Тогда
				Запрос.Текст = ТекстЗапросаРасчетыСПоставщикамиПоДокументам();
				ТаблицаДетальныхЗаписейПоставщики = Запрос.Выполнить().Выгрузить();
				ТаблицаДетальныхЗаписейПоставщики.Индексы.Добавить("АналитикаУчетаПоПартнерам, ОбъектРасчетов, Валюта");
			КонецЕсли;
			
			Для Каждого СтрокаКОбработке Из ПорцияДанныхКОбработке Цикл
				
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("АналитикаУчетаПоПартнерам", СтрокаКОбработке.АналитикаУчетаПоПартнерам);
				СтруктураОтбора.Вставить("ОбъектРасчетов", СтрокаКОбработке.ОбъектРасчетов);
				СтруктураОтбора.Вставить("Валюта", СтрокаКОбработке.ВалютаРасчетов);
				
				Если СтрокаКОбработке.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом Тогда
					ТаблицаДетальныхЗаписей = ТаблицаДетальныхЗаписейКлиенты.Скопировать(СтруктураОтбора);
				Иначе
					ТаблицаДетальныхЗаписей = ТаблицаДетальныхЗаписейПоставщики.Скопировать(СтруктураОтбора);
				КонецЕсли;

				ЭтоРасчетыСКлиентами = (СтрокаКОбработке.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом);
				Если ТаблицаДетальныхЗаписей.Количество() > 0 Тогда
					ЗаписатьНовыеЗаписиРасчетовПоСрокам(ЭтоРасчетыСКлиентами, ТаблицаДетальныхЗаписей, ПорядокОперации);
					КоличествоОбработанныхЗаписей = КоличествоОбработанныхЗаписей + ТаблицаДетальныхЗаписей.Количество();
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаКОбработке.ДатаПересчета) Тогда
					СтрокаКОбработке.ПорядокФакт = Формат(СтрокаКОбработке.ДатаПересчета, "ДФ=yyyyMMdd000000");
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаКОбработке.ДатаПересчета) Тогда
					СтрокаКОбработке.ПорядокПлан = Формат(СтрокаКОбработке.ДатаПересчетаПлан, "ДФ=yyyyMMdd000000");
				КонецЕсли;
				
			КонецЦикла;

			ПараметрыРаспределения = ПараметрыРаспределенияРасчетов();
			ПараметрыРаспределения.РаспределениеСУчетомПриемников = Ложь;
			ПараметрыРаспределения.ТаблицаИзменений = ПорцияДанныхКОбработке;
			
			ЗаполнитьОперативныеВзаиморасчетыПоТаблице(ПараметрыРаспределения);
			
			Для Каждого Запись Из ПорцияДанныхКОбработке Цикл

				ДопИзмеренияОтбора = "";
				Если Запись.ДатаПересчета = Дата('00010101') Тогда
					ДопИзмеренияОтбора = "ДатаПересчета";
				КонецЕсли;
				ОтметитьВыполнениеЗадания(Запись, ДопИзмеренияОтбора);

			КонецЦикла;

			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Включение онлайн взаиморасчетов с партнерами. Работа потока.'",
				ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		КонецПопытки;
		
	КонецЦикла;
	
	Если АдресРезультата <> Неопределено Тогда
		Результат = Новый Структура("КоличествоОбработанныхЗаписей", КоличествоОбработанныхЗаписей);
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	КонецЕсли;
	
	Возврат КоличествоОбработанныхЗаписей;
	
КонецФункции

Процедура ЗаписатьНовыеЗаписиРасчетовПоСрокам(ЭтоРасчетыСКлиентами, ТаблицаДетальныхЗаписей, ПорядокОперации)
	
	Если ЭтоРасчетыСКлиентами Тогда
		НаборЗаписей = РегистрыНакопления.РасчетыСКлиентамиПоСрокам.СоздатьНаборЗаписей();
	Иначе
		НаборЗаписей = РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.СоздатьНаборЗаписей();
	КонецЕсли;
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	
	Для Каждого СтрокаДвижений Из ТаблицаДетальныхЗаписей Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаДвижений.ПорядокОперации) Тогда
			Если ПорядокОперации.Получить(СтрокаДвижений.Период) = Неопределено Тогда
				ПорядокОперации.Вставить(СтрокаДвижений.Период, Порядок(СтрокаДвижений.Период, "", Тип("ДокументСсылка.РасчетКурсовыхРазниц"),"9","99"));
			КонецЕсли;
			СтрокаДвижений.ПорядокОперации = ПорядокОперации[СтрокаДвижений.Период];
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаДетальныхЗаписей.Колонки.Добавить("Регистратор", Новый ОписаниеТипов("ДокументСсылка.РегистраторРасчетов"));
	ТаблицаДетальныхЗаписей.Индексы.Добавить("Регистратор");
	
	ТаблицаАналитик = ТаблицаДетальныхЗаписей.Скопировать();
	ТаблицаАналитик.Свернуть("АналитикаУчетаПоПартнерам, ОбъектРасчетов, Валюта, Организация");
	Отбор = ТаблицаАналитик[0];
	
	СтруктураПараметровРегистраторов = Новый Структура;
	СтруктураПараметровРегистраторов.Вставить("ОбъектРасчетов",            Отбор.ОбъектРасчетов);
	СтруктураПараметровРегистраторов.Вставить("АналитикаУчетаПоПартнерам", Отбор.АналитикаУчетаПоПартнерам);
	СтруктураПараметровРегистраторов.Вставить("ВалютаРасчетов",            Отбор.Валюта);
	СтруктураПараметровРегистраторов.Вставить("Организация",               Отбор.Организация);
	СтруктураПараметровРегистраторов.Вставить("ЭтоРасчетыСКлиентами",      ЭтоРасчетыСКлиентами);
	СтруктураПараметровРегистраторов.Вставить("РассчитыватьПлан",          Ложь);
	
	ТаблицаРегистраторов = ТаблицаСвободныхРегистраторовРасчета(СтруктураПараметровРегистраторов);
	ПодготовитьДанныеДляЗаписи(СтруктураПараметровРегистраторов, ТаблицаДетальныхЗаписей, НаборЗаписей, ТаблицаРегистраторов);
	ЗаписатьПорционно(СтруктураПараметровРегистраторов, ТаблицаДетальныхЗаписей, НаборЗаписей);

КонецПроцедуры

Функция ТекстЗапросаРасчетыСКлиентамиПоДокументам()
	
	Возврат "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОсновныеПараметрыРасчета.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ОсновныеПараметрыРасчета.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ОсновныеПараметрыРасчета.ВалютаРасчетов КАК ВалютаРасчетов
	|ПОМЕСТИТЬ ВтОсновныеПараметрыРасчета
	|ИЗ
	|	&ДанныеКОбработке КАК ОсновныеПараметрыРасчета
	|ГДЕ
	|	ОсновныеПараметрыРасчета.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаПоПартнерам,
	|	ОбъектРасчетов,
	|	ВалютаРасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВтРегистраторы
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК Расчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтОсновныеПараметрыРасчета КАК ОсновныеПараметрыРасчета
	|			ПО Расчеты.АналитикаУчетаПоПартнерам = ОсновныеПараметрыРасчета.АналитикаУчетаПоПартнерам
	|				И Расчеты.ЗаказКлиента = ОсновныеПараметрыРасчета.ОбъектРасчетов
	|				И Расчеты.Валюта = ОсновныеПараметрыРасчета.ВалютаРасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫБОР КОГДА РасчетыСКлиентами.РасчетныйДокумент <> Неопределено 
	|		ТОГДА РасчетыСКлиентами.РасчетныйДокумент
	|		ИНАЧЕ РасчетыСКлиентами.Регистратор 
	|	КОНЕЦ                                      КАК Регистратор,
	|	МИНИМУМ(РасчетыСКлиентами.ПорядокОперации) КАК ПорядокОперации,
	|	МИНИМУМ(РасчетыСКлиентами.ПорядокЗачетаПоДатеПлатежа) КАК ПорядокЗачетаПоДатеПлатежа,
	|	МИНИМУМ(ВЫБОР КОГДА РасчетыСКлиентами.Регистратор ССЫЛКА Документ.ВводОстатков
	|					ИЛИ РасчетыСКлиентами.Регистратор ССЫЛКА Документ.ВводОстатковВзаиморасчетов
	|						ТОГДА РасчетыСКлиентами.ДатаРегистратора
	|				ИНАЧЕ РасчетыСКлиентами.Период
	|			КОНЕЦ)                             КАК ДатаВозникновения,
	|	МИНИМУМ(РасчетыСКлиентами.ВалютаДокумента) КАК ВалютаДокумента,
	|	МАКСИМУМ(РасчетыСКлиентами.ДатаПлатежа)    КАК ДатаПлатежа
	|ПОМЕСТИТЬ ПорядокДокументов
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтРегистраторы КАК Регистраторы
	|			ПО Регистраторы.Регистратор = РасчетыСКлиентами.Регистратор
	|ГДЕ
	|	РасчетыСКлиентами.Активность
	|	И НЕ РасчетыСКлиентами.ПорядокОперации = """"
	|	И РасчетыСКлиентами.Сумма <> 0
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР КОГДА РасчетыСКлиентами.РасчетныйДокумент <> Неопределено 
	|		ТОГДА РасчетыСКлиентами.РасчетныйДокумент
	|		ИНАЧЕ РасчетыСКлиентами.Регистратор 
	|	КОНЕЦ
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыСКлиентамиПоДокументам.АналитикаУчетаПоПартнерам             КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСКлиентамиПоДокументам.ЗаказКлиента                          КАК ОбъектРасчетов,
	|	РасчетыСКлиентамиПоДокументам.ЗаказКлиента.ТипОбъектаРасчетов       КАК ТипОбъектаРасчетов,
	|	РасчетыСКлиентамиПоДокументам.Валюта                                КАК Валюта,
	|	РасчетыСКлиентамиПоДокументам.Регистратор                           КАК ДокументРегистратор,
	|	РасчетыСКлиентамиПоДокументам.Период                                КАК Период,
	|	РасчетыСКлиентамиПоДокументам.РасчетныйДокумент                     КАК РасчетныйДокумент,
	|	РасчетыСКлиентамиПоДокументам.ХозяйственнаяОперация                 КАК ХозяйственнаяОперация,
	|	РасчетыСКлиентамиПоДокументам.СтатьяДвиженияДенежныхСредств         КАК СтатьяДвиженияДенежныхСредств,
	|	ВЫБОР КОГДА ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И (РасчетыСКлиентамиПоДокументам.Долг > 0
	|			ИЛИ РасчетыСКлиентамиПоДокументам.ДолгРегл > 0 ИЛИ РасчетыСКлиентамиПоДокументам.ДолгУпр > 0
	|			ИЛИ РасчетыСКлиентамиПоДокументам.Предоплата < 0 ИЛИ РасчетыСКлиентамиПоДокументам.ПредоплатаРегл < 0
	|			ИЛИ РасчетыСКлиентамиПоДокументам.ПредоплатаУпр < 0)
	|		ИЛИ ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И (РасчетыСКлиентамиПоДокументам.Предоплата > 0
	|			ИЛИ РасчетыСКлиентамиПоДокументам.ПредоплатаРегл > 0 ИЛИ РасчетыСКлиентамиПоДокументам.ПредоплатаУпр > 0
	|			ИЛИ РасчетыСКлиентамиПоДокументам.Долг < 0 ИЛИ РасчетыСКлиентамиПоДокументам.ДолгРегл < 0 
	|			ИЛИ РасчетыСКлиентамиПоДокументам.ДолгУпр < 0) ТОГДА
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	КОНЕЦ                                                               КАК ВидДвижения,
	|	ВЫРАЗИТЬ(РасчетыСКлиентамиПоДокументам.РасчетныйДокумент КАК Документ.КорректировкаРеализации).ДокументОснование КАК СвязанныйДокумент,
	|
	|	ВЫБОР КОГДА РасчетыСКлиентамиПоДокументам.Предоплата < 0 ТОГДА
	|		-РасчетыСКлиентамиПоДокументам.Предоплата 
	|	ИНАЧЕ
	|		РасчетыСКлиентамиПоДокументам.Предоплата
	|	КОНЕЦ                                                               КАК Предоплата,
	|	ВЫБОР КОГДА РасчетыСКлиентамиПоДокументам.ПредоплатаУпр < 0 ТОГДА
	|		-РасчетыСКлиентамиПоДокументам.ПредоплатаУпр 
	|	ИНАЧЕ
	|		РасчетыСКлиентамиПоДокументам.ПредоплатаУпр
	|	КОНЕЦ                                                               КАК ПредоплатаУпр,
	|	ВЫБОР КОГДА РасчетыСКлиентамиПоДокументам.ПредоплатаРегл < 0 ТОГДА
	|		-РасчетыСКлиентамиПоДокументам.ПредоплатаРегл 
	|	ИНАЧЕ
	|		РасчетыСКлиентамиПоДокументам.ПредоплатаРегл
	|	КОНЕЦ                                                               КАК ПредоплатаРегл,
	|	ВЫБОР КОГДА РасчетыСКлиентамиПоДокументам.Долг < 0 ТОГДА
	|		-РасчетыСКлиентамиПоДокументам.Долг 
	|	ИНАЧЕ
	|		РасчетыСКлиентамиПоДокументам.Долг
	|	КОНЕЦ                                                               КАК Долг,
	|	ВЫБОР КОГДА РасчетыСКлиентамиПоДокументам.ДолгУпр < 0 ТОГДА
	|		-РасчетыСКлиентамиПоДокументам.ДолгУпр 
	|	ИНАЧЕ
	|		РасчетыСКлиентамиПоДокументам.ДолгУпр
	|	КОНЕЦ                                                               КАК ДолгУпр,
	|	ВЫБОР КОГДА РасчетыСКлиентамиПоДокументам.ДолгРегл < 0 ТОГДА
	|		-РасчетыСКлиентамиПоДокументам.ДолгРегл 
	|	ИНАЧЕ
	|		РасчетыСКлиентамиПоДокументам.ДолгРегл
	|	КОНЕЦ                                                               КАК ДолгРегл,
	|
	|	ВЫБОР КОГДА РасчетыСКлиентамиПоДокументам.Предоплата <> 0 ТОГДА ДАТАВРЕМЯ(1,1,1)
	|		КОГДА (ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И (РасчетыСКлиентамиПоДокументам.Долг > 0
	|				ИЛИ РасчетыСКлиентамиПоДокументам.ДолгРегл > 0 ИЛИ РасчетыСКлиентамиПоДокументам.ДолгУпр > 0
	|				ИЛИ РасчетыСКлиентамиПоДокументам.Предоплата < 0 ИЛИ РасчетыСКлиентамиПоДокументам.ПредоплатаРегл < 0
	|				ИЛИ РасчетыСКлиентамиПоДокументам.ПредоплатаУпр < 0)
	|			ИЛИ ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И (РасчетыСКлиентамиПоДокументам.Предоплата > 0
	|				ИЛИ РасчетыСКлиентамиПоДокументам.ПредоплатаРегл > 0 ИЛИ РасчетыСКлиентамиПоДокументам.ПредоплатаУпр > 0
	|				ИЛИ РасчетыСКлиентамиПоДокументам.Долг < 0 ИЛИ РасчетыСКлиентамиПоДокументам.ДолгРегл < 0 
	|				ИЛИ РасчетыСКлиентамиПоДокументам.ДолгУпр < 0))
	|			И НЕ ((РасчетыСКлиентамиПоДокументам.Регистратор ССЫЛКА Документ.ВводОстатков ИЛИ
	|					РасчетыСКлиентамиПоДокументам.Регистратор ССЫЛКА Документ.ВводОстатковВзаиморасчетов) И 
	|					РасчетыСКлиентамиПоДокументам.РасчетныйДокумент <> Неопределено)
	|			И НЕ РасчетыСКлиентамиПоДокументам.Регистратор ССЫЛКА Документ.РасчетКурсовыхРазниц ТОГДА
	|			ЕСТЬNULL(ДатыВозникновения.ДатаПлатежа, ДАТАВРЕМЯ(1,1,1))
	|	ИНАЧЕ
	|		ЕСТЬNULL(ДатыВозникновения.ДатаПлатежа, ДАТАВРЕМЯ(1,1,1))
	|	КОНЕЦ                                                               КАК ДатаПлановогоПогашения,
	|	ЕСТЬNULL(ДатыВозникновения.ДатаВозникновения,ДАТАВРЕМЯ(1,1,1))      КАК ДатаВозникновения,
	|	ЕСТЬNULL(ПорядокДокументов.ПорядокОперации,"""")                    КАК ПорядокОперации,
	|	ЕСТЬNULL(ДатыВозникновения.ПорядокЗачетаПоДатеПлатежа,"""")         КАК ПорядокЗачетаРегистратора,
	|	ЕСТЬNULL(ДатыВозникновения.ПорядокЗачетаПоДатеПлатежа,"""")         КАК ПорядокЗачета,
	|	ЕСТЬNULL(ДатыВозникновения.ВалютаДокумента,
	|		ЕСТЬNULL(ДатыВозникновения.ВалютаДокумента,
	|			ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)))                  КАК ВалютаДокумента
	|ПОМЕСТИТЬ ВтРасчеты
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК РасчетыСКлиентамиПоДокументам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтОсновныеПараметрыРасчета КАК ОсновныеПараметрыРасчета
	|			ПО РасчетыСКлиентамиПоДокументам.АналитикаУчетаПоПартнерам = ОсновныеПараметрыРасчета.АналитикаУчетаПоПартнерам
	|				И РасчетыСКлиентамиПоДокументам.ЗаказКлиента = ОсновныеПараметрыРасчета.ОбъектРасчетов
	|				И РасчетыСКлиентамиПоДокументам.Валюта = ОсновныеПараметрыРасчета.ВалютаРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокДокументов КАК ПорядокДокументов
	|			ПО РасчетыСКлиентамиПоДокументам.Регистратор = ПорядокДокументов.Регистратор
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокДокументов КАК ДатыВозникновения
	|			ПО РасчетыСКлиентамиПоДокументам.РасчетныйДокумент = ДатыВозникновения.Регистратор
	|ГДЕ
	|	(РасчетыСКлиентамиПоДокументам.Регистратор ССЫЛКА Документ.ВводОстатков
	|		ИЛИ РасчетыСКлиентамиПоДокументам.Регистратор ССЫЛКА Документ.ВводОстатковВзаиморасчетов)
	|	И РасчетыСКлиентамиПоДокументам.Регистратор <> РасчетыСКлиентамиПоДокументам.РасчетныйДокумент
	|	И (РасчетыСКлиентамиПоДокументам.Предоплата <> 0
	|		ИЛИ РасчетыСКлиентамиПоДокументам.ПредоплатаРегл <> 0
	|		ИЛИ РасчетыСКлиентамиПоДокументам.ПредоплатаУпр <> 0
	|		ИЛИ РасчетыСКлиентамиПоДокументам.Долг <> 0
	|		ИЛИ РасчетыСКлиентамиПоДокументам.ДолгРегл <> 0
	|		ИЛИ РасчетыСКлиентамиПоДокументам.ДолгУпр <> 0)
	|	И РасчетыСКлиентамиПоДокументам.Активность
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыСКлиентамиПоДокументам.АналитикаУчетаПоПартнерам             КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСКлиентамиПоДокументам.ЗаказКлиента                          КАК ОбъектРасчетов,
	|	РасчетыСКлиентамиПоДокументам.ЗаказКлиента.ТипОбъектаРасчетов       КАК ТипОбъектаРасчетов,
	|	РасчетыСКлиентамиПоДокументам.Валюта                                КАК Валюта,
	|	РасчетыСКлиентамиПоДокументам.Регистратор                           КАК ДокументРегистратор,
	|	РасчетыСКлиентамиПоДокументам.Период                                КАК Период,
	|	РасчетыСКлиентамиПоДокументам.РасчетныйДокумент                     КАК РасчетныйДокумент,
	|	РасчетыСКлиентамиПоДокументам.ХозяйственнаяОперация                 КАК ХозяйственнаяОперация,
	|	РасчетыСКлиентамиПоДокументам.СтатьяДвиженияДенежныхСредств         КАК СтатьяДвиженияДенежныхСредств,
	|ВЫБОР КОГДА ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) 
	|			И (РасчетыСКлиентамиПоДокументам.Долг > 0
	|				ИЛИ РасчетыСКлиентамиПоДокументам.ДолгРегл > 0 ИЛИ РасчетыСКлиентамиПоДокументам.ДолгУпр > 0
	|				ИЛИ РасчетыСКлиентамиПоДокументам.Предоплата < 0 ИЛИ РасчетыСКлиентамиПоДокументам.ПредоплатаРегл < 0
	|				ИЛИ РасчетыСКлиентамиПоДокументам.ПредоплатаУпр < 0
	|				ИЛИ (ТИПЗНАЧЕНИЯ(РасчетыСКлиентамиПоДокументам.Регистратор) В (&СписокТиповИсходящихПлатежей) 
	|					ИЛИ ЕСТЬNULL(ВЫРАЗИТЬ(РасчетыСКлиентамиПоДокументам.Регистратор КАК Документ.ОперацияПоПлатежнойКарте).ХозяйственнаяОперация,Неопределено) = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	//++ Локализация
	|					ИЛИ ЕСТЬNULL(ВЫРАЗИТЬ(РасчетыСКлиентамиПоДокументам.Регистратор КАК Документ.ОперацияПоЯндексКассе).ХозяйственнаяОперация,Неопределено) = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	//-- Локализация
	|					)
	|						И РасчетыСКлиентамиПоДокументам.Предоплата > 0)
	|		ИЛИ ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И НЕ ((ТИПЗНАЧЕНИЯ(РасчетыСКлиентамиПоДокументам.Регистратор) В (&СписокТиповИсходящихПлатежей)
	|					ИЛИ ЕСТЬNULL(ВЫРАЗИТЬ(РасчетыСКлиентамиПоДокументам.Регистратор КАК Документ.ОперацияПоПлатежнойКарте).ХозяйственнаяОперация,Неопределено) = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	//++ Локализация
	|					ИЛИ ЕСТЬNULL(ВЫРАЗИТЬ(РасчетыСКлиентамиПоДокументам.Регистратор КАК Документ.ОперацияПоЯндексКассе).ХозяйственнаяОперация,Неопределено) = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	//-- Локализация
	|			)
	|				И РасчетыСКлиентамиПоДокументам.Предоплата > 0)
	|			И (РасчетыСКлиентамиПоДокументам.Предоплата > 0
	|				ИЛИ РасчетыСКлиентамиПоДокументам.ПредоплатаРегл > 0 ИЛИ РасчетыСКлиентамиПоДокументам.ПредоплатаУпр > 0
	|				ИЛИ РасчетыСКлиентамиПоДокументам.Долг < 0 ИЛИ РасчетыСКлиентамиПоДокументам.ДолгРегл < 0 
	|				ИЛИ РасчетыСКлиентамиПоДокументам.ДолгУпр < 0) ТОГДА
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	КОНЕЦ                                                               КАК ВидДвижения,
	|	ВЫБОР КОГДА РасчетыСКлиентамиПоДокументам.Регистратор ССЫЛКА Документ.КорректировкаРеализации 
	|		ТОГДА ВЫРАЗИТЬ(РасчетыСКлиентамиПоДокументам.Регистратор КАК Документ.КорректировкаРеализации).ДокументОснование
	|		ИНАЧЕ ВЫРАЗИТЬ(РасчетыСКлиентамиПоДокументам.РасчетныйДокумент КАК Документ.КорректировкаРеализации).ДокументОснование
	|	КОНЕЦ КАК СвязанныйДокумент,
	|
	|	ВЫБОР КОГДА (ТИПЗНАЧЕНИЯ(РасчетыСКлиентамиПоДокументам.Регистратор) В (&СписокТиповИсходящихПлатежей)
	|					ИЛИ ЕСТЬNULL(ВЫРАЗИТЬ(РасчетыСКлиентамиПоДокументам.Регистратор КАК Документ.ОперацияПоПлатежнойКарте).ХозяйственнаяОперация,Неопределено) = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	//++ Локализация
	|					ИЛИ ЕСТЬNULL(ВЫРАЗИТЬ(РасчетыСКлиентамиПоДокументам.Регистратор КАК Документ.ОперацияПоЯндексКассе).ХозяйственнаяОперация,Неопределено) = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	//-- Локализация
	|				)
	|		И РасчетыСКлиентамиПоДокументам.Предоплата > 0 
	|			ТОГДА 0
	|		КОГДА РасчетыСКлиентамиПоДокументам.Предоплата < 0 ТОГДА
	|			-РасчетыСКлиентамиПоДокументам.Предоплата 
	|	ИНАЧЕ
	|		РасчетыСКлиентамиПоДокументам.Предоплата
	|	КОНЕЦ                                                               КАК Предоплата,
	|	ВЫБОР КОГДА (ТИПЗНАЧЕНИЯ(РасчетыСКлиентамиПоДокументам.Регистратор) В (&СписокТиповИсходящихПлатежей)
	|					ИЛИ ЕСТЬNULL(ВЫРАЗИТЬ(РасчетыСКлиентамиПоДокументам.Регистратор КАК Документ.ОперацияПоПлатежнойКарте).ХозяйственнаяОперация,Неопределено) = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	//++ Локализация
	|					ИЛИ ЕСТЬNULL(ВЫРАЗИТЬ(РасчетыСКлиентамиПоДокументам.Регистратор КАК Документ.ОперацияПоЯндексКассе).ХозяйственнаяОперация,Неопределено) = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	//-- Локализация
	|				)
	|		И РасчетыСКлиентамиПоДокументам.Предоплата > 0 
	|			ТОГДА 0
	|		КОГДА РасчетыСКлиентамиПоДокументам.ПредоплатаУпр < 0 ТОГДА
	|			-РасчетыСКлиентамиПоДокументам.ПредоплатаУпр 
	|	ИНАЧЕ
	|		РасчетыСКлиентамиПоДокументам.ПредоплатаУпр
	|	КОНЕЦ                                                               КАК ПредоплатаУпр,
	|	ВЫБОР КОГДА (ТИПЗНАЧЕНИЯ(РасчетыСКлиентамиПоДокументам.Регистратор) В (&СписокТиповИсходящихПлатежей)
	|					ИЛИ ЕСТЬNULL(ВЫРАЗИТЬ(РасчетыСКлиентамиПоДокументам.Регистратор КАК Документ.ОперацияПоПлатежнойКарте).ХозяйственнаяОперация,Неопределено) = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	//++ Локализация
	|					ИЛИ ЕСТЬNULL(ВЫРАЗИТЬ(РасчетыСКлиентамиПоДокументам.Регистратор КАК Документ.ОперацияПоЯндексКассе).ХозяйственнаяОперация,Неопределено) = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	//-- Локализация
	|				)
	|		И РасчетыСКлиентамиПоДокументам.Предоплата > 0 
	|			ТОГДА 0
	|		КОГДА РасчетыСКлиентамиПоДокументам.ПредоплатаРегл < 0 ТОГДА
	|			-РасчетыСКлиентамиПоДокументам.ПредоплатаРегл
	|	ИНАЧЕ
	|		РасчетыСКлиентамиПоДокументам.ПредоплатаРегл
	|	КОНЕЦ                                                               КАК ПредоплатаРегл,
	|	ВЫБОР КОГДА РасчетыСКлиентамиПоДокументам.Долг < 0 ТОГДА
	|		-РасчетыСКлиентамиПоДокументам.Долг 
	|	ИНАЧЕ
	|		РасчетыСКлиентамиПоДокументам.Долг
	|		+ ВЫБОР КОГДА (ТИПЗНАЧЕНИЯ(РасчетыСКлиентамиПоДокументам.Регистратор) В (&СписокТиповИсходящихПлатежей)
	|					ИЛИ ЕСТЬNULL(ВЫРАЗИТЬ(РасчетыСКлиентамиПоДокументам.Регистратор КАК Документ.ОперацияПоПлатежнойКарте).ХозяйственнаяОперация,Неопределено) = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	//++ Локализация
	|					ИЛИ ЕСТЬNULL(ВЫРАЗИТЬ(РасчетыСКлиентамиПоДокументам.Регистратор КАК Документ.ОперацияПоЯндексКассе).ХозяйственнаяОперация,Неопределено) = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	//-- Локализация
	|					)
	|			И РасчетыСКлиентамиПоДокументам.Предоплата > 0
	|				ТОГДА РасчетыСКлиентамиПоДокументам.Предоплата
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	КОНЕЦ                                                               КАК Долг,
	|	ВЫБОР КОГДА РасчетыСКлиентамиПоДокументам.ДолгУпр < 0 ТОГДА
	|		-РасчетыСКлиентамиПоДокументам.ДолгУпр 
	|	ИНАЧЕ
	|		РасчетыСКлиентамиПоДокументам.ДолгУпр
	|		+ ВЫБОР КОГДА (ТИПЗНАЧЕНИЯ(РасчетыСКлиентамиПоДокументам.Регистратор) В (&СписокТиповИсходящихПлатежей)
	|					ИЛИ ЕСТЬNULL(ВЫРАЗИТЬ(РасчетыСКлиентамиПоДокументам.Регистратор КАК Документ.ОперацияПоПлатежнойКарте).ХозяйственнаяОперация,Неопределено) = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	//++ Локализация
	|					ИЛИ ЕСТЬNULL(ВЫРАЗИТЬ(РасчетыСКлиентамиПоДокументам.Регистратор КАК Документ.ОперацияПоЯндексКассе).ХозяйственнаяОперация,Неопределено) = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	//-- Локализация
	|						)
	|			И РасчетыСКлиентамиПоДокументам.ПредоплатаУпр > 0
	|				ТОГДА РасчетыСКлиентамиПоДокументам.ПредоплатаУпр
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	КОНЕЦ                                                               КАК ДолгУпр,
	|	ВЫБОР КОГДА РасчетыСКлиентамиПоДокументам.ДолгРегл < 0 ТОГДА
	|		-РасчетыСКлиентамиПоДокументам.ДолгРегл 
	|	ИНАЧЕ
	|		РасчетыСКлиентамиПоДокументам.ДолгРегл
	|		+ ВЫБОР КОГДА (ТИПЗНАЧЕНИЯ(РасчетыСКлиентамиПоДокументам.Регистратор) В (&СписокТиповИсходящихПлатежей)
	|					ИЛИ ЕСТЬNULL(ВЫРАЗИТЬ(РасчетыСКлиентамиПоДокументам.Регистратор КАК Документ.ОперацияПоПлатежнойКарте).ХозяйственнаяОперация,Неопределено) = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	//++ Локализация
	|					ИЛИ ЕСТЬNULL(ВЫРАЗИТЬ(РасчетыСКлиентамиПоДокументам.Регистратор КАК Документ.ОперацияПоЯндексКассе).ХозяйственнаяОперация,Неопределено) = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	//-- Локализация
	|						)
	|			И РасчетыСКлиентамиПоДокументам.ПредоплатаРегл > 0
	|				ТОГДА РасчетыСКлиентамиПоДокументам.ПредоплатаРегл
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	КОНЕЦ                                                               КАК ДолгРегл,
	|
	|	ВЫБОР КОГДА РасчетыСКлиентамиПоДокументам.Предоплата <> 0 ТОГДА ДАТАВРЕМЯ(1,1,1)
	|		КОГДА (ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И (РасчетыСКлиентамиПоДокументам.Долг > 0
	|				ИЛИ РасчетыСКлиентамиПоДокументам.ДолгРегл > 0 ИЛИ РасчетыСКлиентамиПоДокументам.ДолгУпр > 0)
	|			ИЛИ ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И (РасчетыСКлиентамиПоДокументам.Предоплата > 0
	|				ИЛИ РасчетыСКлиентамиПоДокументам.ПредоплатаРегл > 0 ИЛИ РасчетыСКлиентамиПоДокументам.ПредоплатаУпр > 0))
	|			И НЕ ((РасчетыСКлиентамиПоДокументам.Регистратор ССЫЛКА Документ.ВводОстатков ИЛИ
	|					РасчетыСКлиентамиПоДокументам.Регистратор ССЫЛКА Документ.ВводОстатковВзаиморасчетов) И
	|					РасчетыСКлиентамиПоДокументам.РасчетныйДокумент <> Неопределено)
	|			И НЕ РасчетыСКлиентамиПоДокументам.Регистратор ССЫЛКА Документ.РасчетКурсовыхРазниц ТОГДА
	|			ВЫБОР
	|				КОГДА ЕСТЬNULL(ДатыВозникновения.ДатаПлатежа, ДАТАВРЕМЯ(1,1,1)) = ДАТАВРЕМЯ(1,1,1)
	|					ТОГДА ЕСТЬNULL(ПорядокДокументов.ДатаПлатежа, ДАТАВРЕМЯ(1,1,1))
	|				ИНАЧЕ ЕСТЬNULL(ДатыВозникновения.ДатаПлатежа, ДАТАВРЕМЯ(1,1,1))
	|			КОНЕЦ
	|	ИНАЧЕ
	|		ЕСТЬNULL(ДатыВозникновения.ДатаПлатежа, ДАТАВРЕМЯ(1,1,1))
	|	КОНЕЦ                                                               КАК ДатаПлановогоПогашения,
	|	ЕСТЬNULL(ДатыВозникновения.ДатаВозникновения,ДАТАВРЕМЯ(1,1,1))      КАК ДатаВозникновения,
	|	ЕСТЬNULL(ПорядокДокументов.ПорядокОперации,"""")                    КАК ПорядокОперации,
	|	ЕСТЬNULL(ПорядокДокументов.ПорядокЗачетаПоДатеПлатежа,"""")         КАК ПорядокЗачетаРегистратора,
	|	ЕСТЬNULL(ДатыВозникновения.ПорядокЗачетаПоДатеПлатежа,"""")         КАК ПорядокЗачета,
	|	ЕСТЬNULL(ДатыВозникновения.ВалютаДокумента,
	|		ЕСТЬNULL(ПорядокДокументов.ВалютаДокумента,
	|			ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)))                  КАК ВалютаДокумента
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК РасчетыСКлиентамиПоДокументам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтОсновныеПараметрыРасчета КАК ОсновныеПараметрыРасчета
	|			ПО РасчетыСКлиентамиПоДокументам.АналитикаУчетаПоПартнерам = ОсновныеПараметрыРасчета.АналитикаУчетаПоПартнерам
	|				И РасчетыСКлиентамиПоДокументам.ЗаказКлиента = ОсновныеПараметрыРасчета.ОбъектРасчетов
	|				И РасчетыСКлиентамиПоДокументам.Валюта = ОсновныеПараметрыРасчета.ВалютаРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокДокументов КАК ПорядокДокументов
	|			ПО РасчетыСКлиентамиПоДокументам.Регистратор = ПорядокДокументов.Регистратор
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокДокументов КАК ДатыВозникновения
	|			ПО РасчетыСКлиентамиПоДокументам.РасчетныйДокумент = ДатыВозникновения.Регистратор
	|ГДЕ
	|	(НЕ (РасчетыСКлиентамиПоДокументам.Регистратор ССЫЛКА Документ.ВводОстатков
	|		ИЛИ РасчетыСКлиентамиПоДокументам.Регистратор ССЫЛКА Документ.ВводОстатковВзаиморасчетов)
	|	ИЛИ РасчетыСКлиентамиПоДокументам.Регистратор = РасчетыСКлиентамиПоДокументам.РасчетныйДокумент)
	|	И (РасчетыСКлиентамиПоДокументам.Предоплата <> 0
	|		ИЛИ РасчетыСКлиентамиПоДокументам.ПредоплатаРегл <> 0
	|		ИЛИ РасчетыСКлиентамиПоДокументам.ПредоплатаУпр <> 0
	|		ИЛИ РасчетыСКлиентамиПоДокументам.Долг <> 0
	|		ИЛИ РасчетыСКлиентамиПоДокументам.ДолгРегл <> 0
	|		ИЛИ РасчетыСКлиентамиПоДокументам.ДолгУпр <> 0)
	|	И РасчетыСКлиентамиПоДокументам.Активность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Расчеты.АналитикаУчетаПоПартнерам     КАК АналитикаУчетаПоПартнерам,
	|	Расчеты.ОбъектРасчетов                КАК ОбъектРасчетов,
	|	Расчеты.Валюта                        КАК Валюта,
	|	Расчеты.ДокументРегистратор           КАК ДокументРегистратор,
	|	Расчеты.РасчетныйДокумент             КАК РасчетныйДокумент,
	|	Расчеты.ХозяйственнаяОперация         КАК ХозяйственнаяОперация,
	|	Расчеты.Период                        КАК Период,
	|	Расчеты.ДатаПлановогоПогашения        КАК ДатаПлановогоПогашения,
	|	Расчеты.ДатаВозникновения             КАК ДатаВозникновения,
	|	Расчеты.ВидДвижения                   КАК ВидДвижения,
	|	СУММА(Расчеты.Предоплата)             КАК Предоплата,
	|	СУММА(Расчеты.ПредоплатаУпр)          КАК ПредоплатаУпр,
	|	СУММА(Расчеты.ПредоплатаРегл)         КАК ПредоплатаРегл,
	|	СУММА(Расчеты.Долг)                   КАК Долг,
	|	СУММА(Расчеты.ДолгУпр)                КАК ДолгУпр,
	|	СУММА(Расчеты.ДолгРегл)               КАК ДолгРегл,
	|	Расчеты.СвязанныйДокумент             КАК СвязанныйДокумент,
	|	Расчеты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	Расчеты.ПорядокОперации               КАК ПорядокОперации,
	|	Расчеты.ПорядокЗачета                 КАК ПорядокЗачета,
	|	Расчеты.ВалютаДокумента               КАК ВалютаДокумента,
	|	Расчеты.Организация                   КАК Организация
	|ИЗ (
	|	ВЫБРАТЬ
	|		ЗачетыОплат.АналитикаУчетаПоПартнерам                            КАК АналитикаУчетаПоПартнерам,
	|		ЗачетыОплат.ОбъектРасчетов                                       КАК ОбъектРасчетов,
	|		ЗачетыОплат.Валюта                                               КАК Валюта,
	|		ЗачетыОплат.ДокументРегистратор                                  КАК ДокументРегистратор,
	|		ЗачетыОплат.ДокументРегистратор                                  КАК РасчетныйДокумент,
	|		ЗачетыОплат.ХозяйственнаяОперация                                КАК ХозяйственнаяОперация,
	|		ЗачетыОплат.Период                                               КАК Период,
	|		ДатыВозникновения.ДатаПлатежа                                    КАК ДатаПлановогоПогашения,
	|		ЗачетыОплат.Период                                               КАК ДатаВозникновения,
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                           КАК ВидДвижения,
	|		0                                                                КАК Предоплата,
	|		0                                                                КАК ПредоплатаУпр,
	|		0                                                                КАК ПредоплатаРегл,
	|		ЗачетыОплат.Предоплата                                           КАК Долг,
	|		ЗачетыОплат.ПредоплатаУпр                                        КАК ДолгУпр,
	|		ЗачетыОплат.ПредоплатаРегл                                       КАК ДолгРегл,
	|		Неопределено                                                     КАК СвязанныйДокумент,
	|		ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)  КАК СтатьяДвиженияДенежныхСредств,
	|		ЗачетыОплат.ПорядокОперации                                      КАК ПорядокОперации,
	|		ЗачетыОплат.ПорядокЗачетаРегистратора                            КАК ПорядокЗачета,
	|		ЗачетыОплат.ВалютаДокумента                                      КАК ВалютаДокумента,
	|		ЗачетыОплат.АналитикаУчетаПоПартнерам.Организация                КАК Организация
	|	ИЗ ВтРасчеты КАК ЗачетыОплат
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокДокументов КАК ДатыВозникновения
	|			ПО ЗачетыОплат.ДокументРегистратор = ДатыВозникновения.Регистратор
	|	ГДЕ	ЗачетыОплат.Предоплата > 0 
	|		И ЗачетыОплат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И ЗачетыОплат.ХозяйственнаяОперация НЕ В (&ХозяйственныеОперацииНеОтгрузка)
	|		И ЗачетыОплат.ТипОбъектаРасчетов <> ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовРасчетов.ПлатежВозврат)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗачетыОплат.АналитикаУчетаПоПартнерам                            КАК АналитикаУчетаПоПартнерам,
	|		ЗачетыОплат.ОбъектРасчетов                                       КАК ОбъектРасчетов,
	|		ЗачетыОплат.Валюта                                               КАК Валюта,
	|		ЗачетыОплат.ДокументРегистратор                                  КАК ДокументРегистратор,
	|		ЗачетыОплат.ДокументРегистратор                                  КАК РасчетныйДокумент,
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаКлиента)  КАК ХозяйственнаяОперация,
	|		ЗачетыОплат.Период                                               КАК Период,
	|		ДатыВозникновения.ДатаПлатежа                                    КАК ДатаПлановогоПогашения,
	|		ЗачетыОплат.Период                                               КАК ДатаВозникновения,
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)                           КАК ВидДвижения,
	|		0                                                                КАК Предоплата,
	|		0                                                                КАК ПредоплатаУпр,
	|		0                                                                КАК ПредоплатаРегл,
	|		ЗачетыОплат.Предоплата                                           КАК Долг,
	|		ЗачетыОплат.ПредоплатаУпр                                        КАК ДолгУпр,
	|		ЗачетыОплат.ПредоплатаРегл                                       КАК ДолгРегл,
	|		Неопределено                                                     КАК СвязанныйДокумент,
	|		ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)  КАК СтатьяДвиженияДенежныхСредств,
	|		ЗачетыОплат.ПорядокОперации                                      КАК ПорядокОперации,
	|		ЗачетыОплат.ПорядокЗачетаРегистратора                            КАК ПорядокЗачета,
	|		ЗачетыОплат.ВалютаДокумента                                      КАК ВалютаДокумента,
	|		ЗачетыОплат.АналитикаУчетаПоПартнерам.Организация                КАК Организация
	|	ИЗ ВтРасчеты КАК ЗачетыОплат
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокДокументов КАК ДатыВозникновения
	|			ПО ЗачетыОплат.ДокументРегистратор = ДатыВозникновения.Регистратор
	|	ГДЕ
	|		ЗачетыОплат.Предоплата > 0 
	|		И ЗачетыОплат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И ЗачетыОплат.ХозяйственнаяОперация НЕ В (&ХозяйственныеОперацииНеОтгрузка)
	|		И ЗачетыОплат.ТипОбъектаРасчетов <> ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовРасчетов.ПлатежВозврат)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РасчетыПоДокументам.АналитикаУчетаПоПартнерам     КАК АналитикаУчетаПоПартнерам,
	|		РасчетыПоДокументам.ОбъектРасчетов                КАК ОбъектРасчетов,
	|		РасчетыПоДокументам.Валюта                        КАК Валюта,
	|		РасчетыПоДокументам.ДокументРегистратор           КАК ДокументРегистратор,
	|		РасчетыПоДокументам.РасчетныйДокумент             КАК РасчетныйДокумент,
	|		ВЫБОР КОГДА РасчетыПоДокументам.Предоплата <> 0 И РасчетыПоДокументам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				И РасчетыПоДокументам.ХозяйственнаяОперация НЕ В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности),
	|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности),
	|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса))
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаКлиента)
	|			КОГДА РасчетыПоДокументам.Долг <> 0 И РасчетыПоДокументам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				И РасчетыПоДокументам.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности)
	|				И РасчетыПоДокументам.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса)
	|				И РасчетыПоДокументам.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности)
	|				И РасчетыПоДокументам.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.УдержаниеВознагражденияКомиссионера)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПогашениеЗадолженностиКлиента)
	|			ИНАЧЕ РасчетыПоДокументам.ХозяйственнаяОперация 
	|		КОНЕЦ КАК ХозяйственнаяОперация,
	|		РасчетыПоДокументам.Период                        КАК Период,
	|		РасчетыПоДокументам.ДатаПлановогоПогашения        КАК ДатаПлановогоПогашения,
	|		РасчетыПоДокументам.ДатаВозникновения             КАК ДатаВозникновения,
	|		РасчетыПоДокументам.ВидДвижения                   КАК ВидДвижения,
	|		РасчетыПоДокументам.Предоплата                    КАК Предоплата,
	|		РасчетыПоДокументам.ПредоплатаУпр                 КАК ПредоплатаУпр,
	|		РасчетыПоДокументам.ПредоплатаРегл                КАК ПредоплатаРегл,
	|		РасчетыПоДокументам.Долг                          КАК Долг,
	|		РасчетыПоДокументам.ДолгУпр                       КАК ДолгУпр,
	|		РасчетыПоДокументам.ДолгРегл                      КАК ДолгРегл,
	|		ВЫБОР КОГДА (РасчетыПоДокументам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И РасчетыПоДокументам.Предоплата > 0)
	|			ИЛИ (РасчетыПоДокументам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И РасчетыПоДокументам.Долг > 0)
	|			ТОГДА РасчетыПоДокументам.СвязанныйДокумент
	|			ИНАЧЕ Неопределено
	|		КОНЕЦ                                             КАК СвязанныйДокумент,
	|		РасчетыПоДокументам.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|		РасчетыПоДокументам.ПорядокОперации               КАК ПорядокОперации,
	|		РасчетыПоДокументам.ПорядокЗачета                 КАК ПорядокЗачета,
	|		РасчетыПоДокументам.ВалютаДокумента               КАК ВалютаДокумента,
	|		РасчетыПоДокументам.АналитикаУчетаПоПартнерам.Организация КАК Организация
	|	ИЗ ВтРасчеты КАК РасчетыПоДокументам) КАК Расчеты
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.АналитикаУчетаПоПартнерам,
	|	Расчеты.ОбъектРасчетов,
	|	Расчеты.Валюта,
	|	Расчеты.ДокументРегистратор,
	|	Расчеты.РасчетныйДокумент,
	|	Расчеты.ХозяйственнаяОперация,
	|	Расчеты.Период,
	|	Расчеты.ДатаПлановогоПогашения,
	|	Расчеты.ДатаВозникновения,
	|	Расчеты.ВидДвижения,
	|	Расчеты.СвязанныйДокумент,
	|	Расчеты.СтатьяДвиженияДенежныхСредств,
	|	Расчеты.ПорядокОперации,
	|	Расчеты.ПорядокЗачета,
	|	Расчеты.ВалютаДокумента,
	|	Расчеты.Организация
	|;
	|УНИЧТОЖИТЬ ВтОсновныеПараметрыРасчета;
	|УНИЧТОЖИТЬ ВтРегистраторы;
	|УНИЧТОЖИТЬ ПорядокДокументов;
	|УНИЧТОЖИТЬ ВтРасчеты
	|";
	
КонецФункции

Функция ТекстЗапросаРасчетыСПоставщикамиПоДокументам()
	
	Возврат "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОсновныеПараметрыРасчета.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ОсновныеПараметрыРасчета.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ОсновныеПараметрыРасчета.ВалютаРасчетов КАК ВалютаРасчетов
	|ПОМЕСТИТЬ ВтОсновныеПараметрыРасчета
	|ИЗ
	|	&ДанныеКОбработке КАК ОсновныеПараметрыРасчета
	|ГДЕ
	|	ОсновныеПараметрыРасчета.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаПоПартнерам,
	|	ОбъектРасчетов,
	|	ВалютаРасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВтРегистраторы
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК Расчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтОсновныеПараметрыРасчета КАК ОсновныеПараметрыРасчета
	|			ПО Расчеты.АналитикаУчетаПоПартнерам = ОсновныеПараметрыРасчета.АналитикаУчетаПоПартнерам
	|				И Расчеты.ЗаказПоставщику = ОсновныеПараметрыРасчета.ОбъектРасчетов
	|				И Расчеты.Валюта = ОсновныеПараметрыРасчета.ВалютаРасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫБОР КОГДА РасчетыСПоставщиками.РасчетныйДокумент <> Неопределено 
	|		ТОГДА РасчетыСПоставщиками.РасчетныйДокумент
	|		ИНАЧЕ РасчетыСПоставщиками.Регистратор 
	|	КОНЕЦ                                         КАК Регистратор,
	|	МИНИМУМ(РасчетыСПоставщиками.ПорядокОперации) КАК ПорядокОперации,
	|	МИНИМУМ(РасчетыСПоставщиками.ПорядокЗачетаПоДатеПлатежа) КАК ПорядокЗачетаПоДатеПлатежа,
	|	МИНИМУМ(ВЫБОР КОГДА РасчетыСПоставщиками.Регистратор ССЫЛКА Документ.ВводОстатков ИЛИ
	|					РасчетыСПоставщиками.Регистратор ССЫЛКА Документ.ВводОстатковВзаиморасчетов
	|						ТОГДА РасчетыСПоставщиками.ДатаРегистратора
	|				ИНАЧЕ РасчетыСПоставщиками.Период
	|			КОНЕЦ)                                КАК ДатаВозникновения,
	|	МИНИМУМ(РасчетыСПоставщиками.ВалютаДокумента) КАК ВалютаДокумента,
	|	МАКСИМУМ(РасчетыСПоставщиками.ДатаПлатежа)    КАК ДатаПлатежа
	|ПОМЕСТИТЬ ПорядокДокументов
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтРегистраторы КАК Регистраторы
	|			ПО Регистраторы.Регистратор = РасчетыСПоставщиками.Регистратор
	|ГДЕ
	|	РасчетыСПоставщиками.Активность
	|	И НЕ РасчетыСПоставщиками.ПорядокОперации = """"
	|	И (РасчетыСПоставщиками.Сумма <> 0 ИЛИ РасчетыСПоставщиками.КОплате <> 0)
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР КОГДА РасчетыСПоставщиками.РасчетныйДокумент <> Неопределено 
	|		ТОГДА РасчетыСПоставщиками.РасчетныйДокумент
	|		ИНАЧЕ РасчетыСПоставщиками.Регистратор 
	|	КОНЕЦ
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыСПоставщикамиПоДокументам.АналитикаУчетаПоПартнерам      КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСПоставщикамиПоДокументам.ЗаказПоставщику                КАК ОбъектРасчетов,
	|	РасчетыСПоставщикамиПоДокументам.ЗаказПоставщику.ТипОбъектаРасчетов КАК ТипОбъектаРасчетов,
	|	РасчетыСПоставщикамиПоДокументам.Валюта                         КАК Валюта,
	|	РасчетыСПоставщикамиПоДокументам.Регистратор                    КАК ДокументРегистратор,
	|	РасчетыСПоставщикамиПоДокументам.РасчетныйДокумент              КАК РасчетныйДокумент,
	|	РасчетыСПоставщикамиПоДокументам.ХозяйственнаяОперация          КАК ХозяйственнаяОперация,
	|	РасчетыСПоставщикамиПоДокументам.СтатьяДвиженияДенежныхСредств  КАК СтатьяДвиженияДенежныхСредств,
	|	РасчетыСПоставщикамиПоДокументам.Период                         КАК Период,
	|	ВЫБОР КОГДА ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И (РасчетыСПоставщикамиПоДокументам.Долг < 0
	|				ИЛИ РасчетыСПоставщикамиПоДокументам.ДолгРегл < 0 ИЛИ РасчетыСПоставщикамиПоДокументам.ДолгУпр < 0
	|				ИЛИ РасчетыСПоставщикамиПоДокументам.Предоплата > 0 ИЛИ РасчетыСПоставщикамиПоДокументам.ПредоплатаРегл > 0
	|				ИЛИ РасчетыСПоставщикамиПоДокументам.ПредоплатаУпр > 0)
	|		ИЛИ ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И (РасчетыСПоставщикамиПоДокументам.Предоплата < 0
	|				ИЛИ РасчетыСПоставщикамиПоДокументам.ПредоплатаРегл < 0 ИЛИ РасчетыСПоставщикамиПоДокументам.ПредоплатаУпр < 0
	|				ИЛИ РасчетыСПоставщикамиПоДокументам.Долг > 0 ИЛИ РасчетыСПоставщикамиПоДокументам.ДолгРегл > 0 
	|				ИЛИ РасчетыСПоставщикамиПоДокументам.ДолгУпр > 0) ТОГДА
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	КОНЕЦ                                                           КАК ВидДвижения,
	|	ВЫРАЗИТЬ(РасчетыСПоставщикамиПоДокументам.РасчетныйДокумент КАК Документ.КорректировкаПриобретения).ДокументОснование КАК СвязанныйДокумент,
	|
	|	ВЫБОР КОГДА РасчетыСПоставщикамиПоДокументам.Предоплата < 0  ТОГДА
	|		-РасчетыСПоставщикамиПоДокументам.Предоплата 
	|	ИНАЧЕ
	|		РасчетыСПоставщикамиПоДокументам.Предоплата
	|	КОНЕЦ                                                           КАК Предоплата,
	|	ВЫБОР КОГДА РасчетыСПоставщикамиПоДокументам.ПредоплатаУпр < 0  ТОГДА
	|		-РасчетыСПоставщикамиПоДокументам.ПредоплатаУпр 
	|	ИНАЧЕ
	|		РасчетыСПоставщикамиПоДокументам.ПредоплатаУпр
	|	КОНЕЦ                                                           КАК ПредоплатаУпр,
	|	ВЫБОР КОГДА РасчетыСПоставщикамиПоДокументам.ПредоплатаРегл < 0  ТОГДА
	|		-РасчетыСПоставщикамиПоДокументам.ПредоплатаРегл 
	|	ИНАЧЕ
	|		РасчетыСПоставщикамиПоДокументам.ПредоплатаРегл
	|	КОНЕЦ                                                           КАК ПредоплатаРегл,
	|	ВЫБОР КОГДА РасчетыСПоставщикамиПоДокументам.Долг < 0  ТОГДА
	|		-РасчетыСПоставщикамиПоДокументам.Долг 
	|	ИНАЧЕ
	|		РасчетыСПоставщикамиПоДокументам.Долг
	|	КОНЕЦ                                                           КАК Долг,
	|	ВЫБОР КОГДА РасчетыСПоставщикамиПоДокументам.ДолгУпр < 0  ТОГДА
	|		-РасчетыСПоставщикамиПоДокументам.ДолгУпр 
	|	ИНАЧЕ
	|		РасчетыСПоставщикамиПоДокументам.ДолгУпр
	|	КОНЕЦ                                                           КАК ДолгУпр,
	|	ВЫБОР КОГДА РасчетыСПоставщикамиПоДокументам.ДолгРегл < 0  ТОГДА
	|		-РасчетыСПоставщикамиПоДокументам.ДолгРегл 
	|	ИНАЧЕ
	|		РасчетыСПоставщикамиПоДокументам.ДолгРегл
	|	КОНЕЦ                                                           КАК ДолгРегл,
	|
	|	ВЫБОР КОГДА РасчетыСПоставщикамиПоДокументам.Предоплата <> 0 ТОГДА ДАТАВРЕМЯ(1,1,1)
	|		КОГДА (ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И (РасчетыСПоставщикамиПоДокументам.Долг < 0
	|				ИЛИ РасчетыСПоставщикамиПоДокументам.ДолгРегл < 0 ИЛИ РасчетыСПоставщикамиПоДокументам.ДолгУпр < 0
	|				ИЛИ РасчетыСПоставщикамиПоДокументам.Предоплата > 0 ИЛИ РасчетыСПоставщикамиПоДокументам.ПредоплатаРегл > 0
	|				ИЛИ РасчетыСПоставщикамиПоДокументам.ПредоплатаУпр > 0)
	|		ИЛИ ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И (РасчетыСПоставщикамиПоДокументам.Предоплата < 0
	|				ИЛИ РасчетыСПоставщикамиПоДокументам.ПредоплатаРегл < 0 ИЛИ РасчетыСПоставщикамиПоДокументам.ПредоплатаУпр < 0
	|				ИЛИ РасчетыСПоставщикамиПоДокументам.Долг > 0 ИЛИ РасчетыСПоставщикамиПоДокументам.ДолгРегл > 0 
	|				ИЛИ РасчетыСПоставщикамиПоДокументам.ДолгУпр > 0)) 
	|			И НЕ ((РасчетыСПоставщикамиПоДокументам.Регистратор ССЫЛКА Документ.ВводОстатков ИЛИ
	|					РасчетыСПоставщикамиПоДокументам.Регистратор ССЫЛКА Документ.ВводОстатковВзаиморасчетов) И 
	|					РасчетыСПоставщикамиПоДокументам.РасчетныйДокумент <> Неопределено)
	|			И НЕ РасчетыСПоставщикамиПоДокументам.Регистратор ССЫЛКА Документ.РасчетКурсовыхРазниц ТОГДА
	|			ЕСТЬNULL(ДатыВозникновения.ДатаПлатежа, ДАТАВРЕМЯ(1,1,1))
	|	ИНАЧЕ
	|		ЕСТЬNULL(ДатыВозникновения.ДатаПлатежа, ДАТАВРЕМЯ(1,1,1))
	|	КОНЕЦ                                                           КАК ДатаПлановогоПогашения,
	|	ЕСТЬNULL(ДатыВозникновения.ДатаВозникновения, ДАТАВРЕМЯ(1,1,1)) КАК ДатаВозникновения,
	|	ЕСТЬNULL(ПорядокДокументов.ПорядокОперации,"""")                КАК ПорядокОперации,
	|	ЕСТЬNULL(ДатыВозникновения.ПорядокЗачетаПоДатеПлатежа,"""")     КАК ПорядокЗачетаРегистратора,
	|	ЕСТЬNULL(ДатыВозникновения.ПорядокЗачетаПоДатеПлатежа,"""")     КАК ПорядокЗачета,
	|	ЕСТЬNULL(ДатыВозникновения.ВалютаДокумента,
	|		ЕСТЬNULL(ДатыВозникновения.ВалютаДокумента,
	|			ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)))              КАК ВалютаДокумента
	|ПОМЕСТИТЬ ВтРасчеты
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК РасчетыСПоставщикамиПоДокументам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтОсновныеПараметрыРасчета КАК ОсновныеПараметрыРасчета
	|			ПО РасчетыСПоставщикамиПоДокументам.АналитикаУчетаПоПартнерам = ОсновныеПараметрыРасчета.АналитикаУчетаПоПартнерам
	|				И РасчетыСПоставщикамиПоДокументам.ЗаказПоставщику = ОсновныеПараметрыРасчета.ОбъектРасчетов
	|				И РасчетыСПоставщикамиПоДокументам.Валюта = ОсновныеПараметрыРасчета.ВалютаРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокДокументов КАК ПорядокДокументов
	|			ПО РасчетыСПоставщикамиПоДокументам.Регистратор = ПорядокДокументов.Регистратор
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокДокументов КАК ДатыВозникновения
	|			ПО РасчетыСПоставщикамиПоДокументам.РасчетныйДокумент = ДатыВозникновения.Регистратор
	|ГДЕ
	|	(РасчетыСПоставщикамиПоДокументам.Регистратор ССЫЛКА Документ.ВводОстатков
	|		ИЛИ РасчетыСПоставщикамиПоДокументам.Регистратор ССЫЛКА Документ.ВводОстатковВзаиморасчетов)
	|	И РасчетыСПоставщикамиПоДокументам.Регистратор <> РасчетыСПоставщикамиПоДокументам.РасчетныйДокумент
	|	И (РасчетыСПоставщикамиПоДокументам.Предоплата <> 0
	|		ИЛИ РасчетыСПоставщикамиПоДокументам.ПредоплатаРегл <> 0
	|		ИЛИ РасчетыСПоставщикамиПоДокументам.ПредоплатаУпр <> 0
	|		ИЛИ РасчетыСПоставщикамиПоДокументам.Долг <> 0
	|		ИЛИ РасчетыСПоставщикамиПоДокументам.ДолгРегл <> 0
	|		ИЛИ РасчетыСПоставщикамиПоДокументам.ДолгУпр <> 0)
	|	И РасчетыСПоставщикамиПоДокументам.Активность
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыСПоставщикамиПоДокументам.АналитикаУчетаПоПартнерам      КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСПоставщикамиПоДокументам.ЗаказПоставщику                КАК ОбъектРасчетов,
	|	РасчетыСПоставщикамиПоДокументам.ЗаказПоставщику.ТипОбъектаРасчетов КАК ТипОбъектаРасчетов,
	|	РасчетыСПоставщикамиПоДокументам.Валюта                         КАК Валюта,
	|	РасчетыСПоставщикамиПоДокументам.Регистратор                    КАК ДокументРегистратор,
	|	РасчетыСПоставщикамиПоДокументам.РасчетныйДокумент              КАК РасчетныйДокумент,
	|	РасчетыСПоставщикамиПоДокументам.ХозяйственнаяОперация          КАК ХозяйственнаяОперация,
	|	РасчетыСПоставщикамиПоДокументам.СтатьяДвиженияДенежныхСредств  КАК СтатьяДвиженияДенежныхСредств,
	|	РасчетыСПоставщикамиПоДокументам.Период                         КАК Период,
	|	ВЫБОР КОГДА ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				И НЕ (ТИПЗНАЧЕНИЯ(РасчетыСПоставщикамиПоДокументам.Регистратор) В (ТИП(Документ.ПоступлениеБезналичныхДенежныхСредств),ТИП(Документ.ПриходныйКассовыйОрдер))
	|						И РасчетыСПоставщикамиПоДокументам.Предоплата > 0)
	|				И (РасчетыСПоставщикамиПоДокументам.Долг < 0
	|					ИЛИ РасчетыСПоставщикамиПоДокументам.ДолгРегл < 0 ИЛИ РасчетыСПоставщикамиПоДокументам.ДолгУпр < 0
	|					ИЛИ РасчетыСПоставщикамиПоДокументам.Предоплата > 0 ИЛИ РасчетыСПоставщикамиПоДокументам.ПредоплатаРегл > 0
	|					ИЛИ РасчетыСПоставщикамиПоДокументам.ПредоплатаУпр > 0 )
	|		ИЛИ ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
	|				И (РасчетыСПоставщикамиПоДокументам.Предоплата < 0
	|					ИЛИ РасчетыСПоставщикамиПоДокументам.ПредоплатаРегл < 0 ИЛИ РасчетыСПоставщикамиПоДокументам.ПредоплатаУпр < 0
	|					ИЛИ РасчетыСПоставщикамиПоДокументам.Долг > 0 ИЛИ РасчетыСПоставщикамиПоДокументам.ДолгРегл > 0 
	|					ИЛИ РасчетыСПоставщикамиПоДокументам.ДолгУпр > 0
	|					ИЛИ ТИПЗНАЧЕНИЯ(РасчетыСПоставщикамиПоДокументам.Регистратор) В (ТИП(Документ.ПоступлениеБезналичныхДенежныхСредств),ТИП(Документ.ПриходныйКассовыйОрдер))
	|						И РасчетыСПоставщикамиПоДокументам.Предоплата > 0) ТОГДА
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	КОНЕЦ                                                           КАК ВидДвижения,
	|	ВЫБОР КОГДА РасчетыСПоставщикамиПоДокументам.Регистратор ССЫЛКА Документ.КорректировкаПриобретения 
	|		ТОГДА ВЫРАЗИТЬ(РасчетыСПоставщикамиПоДокументам.Регистратор КАК Документ.КорректировкаПриобретения).ДокументОснование
	|		ИНАЧЕ ВЫРАЗИТЬ(РасчетыСПоставщикамиПоДокументам.РасчетныйДокумент КАК Документ.КорректировкаПриобретения).ДокументОснование
	|	КОНЕЦ КАК СвязанныйДокумент,
	|
	//Некорректно отражались расчеты по документам
	|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(РасчетыСПоставщикамиПоДокументам.Регистратор) В (ТИП(Документ.ПоступлениеБезналичныхДенежныхСредств),ТИП(Документ.ПриходныйКассовыйОрдер))
	|		И РасчетыСПоставщикамиПоДокументам.Предоплата > 0 
	|			ТОГДА 0
	|		КОГДА РасчетыСПоставщикамиПоДокументам.Предоплата < 0  ТОГДА
	|			-РасчетыСПоставщикамиПоДокументам.Предоплата 
	|	ИНАЧЕ
	|		РасчетыСПоставщикамиПоДокументам.Предоплата
	|	КОНЕЦ                                                           КАК Предоплата,
	|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(РасчетыСПоставщикамиПоДокументам.Регистратор) В (ТИП(Документ.ПоступлениеБезналичныхДенежныхСредств),ТИП(Документ.ПриходныйКассовыйОрдер))
	|		И РасчетыСПоставщикамиПоДокументам.ПредоплатаУпр > 0 
	|			ТОГДА 0
	|		КОГДА РасчетыСПоставщикамиПоДокументам.ПредоплатаУпр < 0  ТОГДА
	|			-РасчетыСПоставщикамиПоДокументам.ПредоплатаУпр 
	|	ИНАЧЕ
	|		РасчетыСПоставщикамиПоДокументам.ПредоплатаУпр
	|	КОНЕЦ                                                           КАК ПредоплатаУпр,
	|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(РасчетыСПоставщикамиПоДокументам.Регистратор) В (ТИП(Документ.ПоступлениеБезналичныхДенежныхСредств),ТИП(Документ.ПриходныйКассовыйОрдер))
	|		И РасчетыСПоставщикамиПоДокументам.ПредоплатаРегл > 0 
	|			ТОГДА 0
	|		КОГДА РасчетыСПоставщикамиПоДокументам.ПредоплатаРегл < 0  ТОГДА
	|			-РасчетыСПоставщикамиПоДокументам.ПредоплатаРегл 
	|	ИНАЧЕ
	|		РасчетыСПоставщикамиПоДокументам.ПредоплатаРегл
	|	КОНЕЦ                                                           КАК ПредоплатаРегл,
	|	ВЫБОР КОГДА РасчетыСПоставщикамиПоДокументам.Долг < 0  ТОГДА
	|		-РасчетыСПоставщикамиПоДокументам.Долг 
	|	ИНАЧЕ
	|		РасчетыСПоставщикамиПоДокументам.Долг
	|		+ ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(РасчетыСПоставщикамиПоДокументам.Регистратор) В (ТИП(Документ.ПоступлениеБезналичныхДенежныхСредств),ТИП(Документ.ПриходныйКассовыйОрдер))
	|			И РасчетыСПоставщикамиПоДокументам.Предоплата > 0
	|				ТОГДА РасчетыСПоставщикамиПоДокументам.Предоплата
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	КОНЕЦ                                                           КАК Долг,
	|	ВЫБОР КОГДА РасчетыСПоставщикамиПоДокументам.ДолгУпр < 0  ТОГДА
	|		-РасчетыСПоставщикамиПоДокументам.ДолгУпр 
	|	ИНАЧЕ
	|		РасчетыСПоставщикамиПоДокументам.ДолгУпр
	|		+ ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(РасчетыСПоставщикамиПоДокументам.Регистратор) В (ТИП(Документ.ПоступлениеБезналичныхДенежныхСредств),ТИП(Документ.ПриходныйКассовыйОрдер))
	|			И РасчетыСПоставщикамиПоДокументам.ПредоплатаУпр > 0
	|				ТОГДА РасчетыСПоставщикамиПоДокументам.ПредоплатаУпр
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	КОНЕЦ                                                           КАК ДолгУпр,
	|	ВЫБОР КОГДА РасчетыСПоставщикамиПоДокументам.ДолгРегл < 0  ТОГДА
	|		-РасчетыСПоставщикамиПоДокументам.ДолгРегл 
	|	ИНАЧЕ
	|		РасчетыСПоставщикамиПоДокументам.ДолгРегл
	|		+ ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(РасчетыСПоставщикамиПоДокументам.Регистратор) В (ТИП(Документ.ПоступлениеБезналичныхДенежныхСредств),ТИП(Документ.ПриходныйКассовыйОрдер))
	|			И РасчетыСПоставщикамиПоДокументам.ПредоплатаРегл > 0
	|				ТОГДА РасчетыСПоставщикамиПоДокументам.ПредоплатаРегл
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	КОНЕЦ                                                           КАК ДолгРегл,
	|
	|	ВЫБОР КОГДА РасчетыСПоставщикамиПоДокументам.Предоплата <> 0 ТОГДА ДАТАВРЕМЯ(1,1,1)
	|		КОГДА (ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И 
	|				(РасчетыСПоставщикамиПоДокументам.Предоплата > 0 ИЛИ РасчетыСПоставщикамиПоДокументам.ПредоплатаРегл > 0
	|				ИЛИ РасчетыСПоставщикамиПоДокументам.ПредоплатаУпр > 0)
	|		ИЛИ ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И 
	|				(РасчетыСПоставщикамиПоДокументам.Долг > 0 ИЛИ РасчетыСПоставщикамиПоДокументам.ДолгРегл > 0 
	|				ИЛИ РасчетыСПоставщикамиПоДокументам.ДолгУпр > 0)) 
	|			И НЕ ((РасчетыСПоставщикамиПоДокументам.Регистратор ССЫЛКА Документ.ВводОстатков ИЛИ
	|					РасчетыСПоставщикамиПоДокументам.Регистратор ССЫЛКА Документ.ВводОстатковВзаиморасчетов) И 
	|					РасчетыСПоставщикамиПоДокументам.РасчетныйДокумент <> Неопределено)
	|			И НЕ РасчетыСПоставщикамиПоДокументам.Регистратор ССЫЛКА Документ.РасчетКурсовыхРазниц ТОГДА
	|			ВЫБОР
	|				КОГДА ЕСТЬNULL(ДатыВозникновения.ДатаПлатежа, ДАТАВРЕМЯ(1,1,1)) = ДАТАВРЕМЯ(1,1,1)
	|					ТОГДА ЕСТЬNULL(ПорядокДокументов.ДатаПлатежа, ДАТАВРЕМЯ(1,1,1))
	|				ИНАЧЕ ЕСТЬNULL(ДатыВозникновения.ДатаПлатежа, ДАТАВРЕМЯ(1,1,1))
	|			КОНЕЦ
	|	ИНАЧЕ
	|		ЕСТЬNULL(ДатыВозникновения.ДатаПлатежа, ДАТАВРЕМЯ(1,1,1))
	|	КОНЕЦ                                                           КАК ДатаПлановогоПогашения,
	|	ЕСТЬNULL(ДатыВозникновения.ДатаВозникновения, ДАТАВРЕМЯ(1,1,1)) КАК ДатаВозникновения,
	|	ЕСТЬNULL(ПорядокДокументов.ПорядокОперации,"""")                КАК ПорядокОперации,
	|	ЕСТЬNULL(ПорядокДокументов.ПорядокЗачетаПоДатеПлатежа,"""")     КАК ПорядокЗачетаРегистратора,
	|	ЕСТЬNULL(ДатыВозникновения.ПорядокЗачетаПоДатеПлатежа,"""")     КАК ПорядокЗачета,
	|	ЕСТЬNULL(ДатыВозникновения.ВалютаДокумента,
	|		ЕСТЬNULL(ПорядокДокументов.ВалютаДокумента,
	|			ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)))              КАК ВалютаДокумента
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК РасчетыСПоставщикамиПоДокументам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтОсновныеПараметрыРасчета КАК ОсновныеПараметрыРасчета
	|			ПО РасчетыСПоставщикамиПоДокументам.АналитикаУчетаПоПартнерам = ОсновныеПараметрыРасчета.АналитикаУчетаПоПартнерам
	|				И РасчетыСПоставщикамиПоДокументам.ЗаказПоставщику = ОсновныеПараметрыРасчета.ОбъектРасчетов
	|				И РасчетыСПоставщикамиПоДокументам.Валюта = ОсновныеПараметрыРасчета.ВалютаРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокДокументов КАК ПорядокДокументов
	|			ПО РасчетыСПоставщикамиПоДокументам.Регистратор = ПорядокДокументов.Регистратор
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокДокументов КАК ДатыВозникновения
	|			ПО РасчетыСПоставщикамиПоДокументам.РасчетныйДокумент = ДатыВозникновения.Регистратор
	|ГДЕ
	|	(НЕ (РасчетыСПоставщикамиПоДокументам.Регистратор ССЫЛКА Документ.ВводОстатков 
	|			ИЛИ РасчетыСПоставщикамиПоДокументам.Регистратор ССЫЛКА Документ.ВводОстатковВзаиморасчетов)
	|		ИЛИ РасчетыСПоставщикамиПоДокументам.Регистратор = РасчетыСПоставщикамиПоДокументам.РасчетныйДокумент)
	|	И (РасчетыСПоставщикамиПоДокументам.Предоплата <> 0
	|		ИЛИ РасчетыСПоставщикамиПоДокументам.ПредоплатаРегл <> 0
	|		ИЛИ РасчетыСПоставщикамиПоДокументам.ПредоплатаУпр <> 0
	|		ИЛИ РасчетыСПоставщикамиПоДокументам.Долг <> 0
	|		ИЛИ РасчетыСПоставщикамиПоДокументам.ДолгРегл <> 0
	|		ИЛИ РасчетыСПоставщикамиПоДокументам.ДолгУпр <> 0)
	|	И РасчетыСПоставщикамиПоДокументам.Активность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Расчеты.АналитикаУчетаПоПартнерам     КАК АналитикаУчетаПоПартнерам,
	|	Расчеты.ОбъектРасчетов                КАК ОбъектРасчетов,
	|	Расчеты.Валюта                        КАК Валюта,
	|	Расчеты.ДокументРегистратор           КАК ДокументРегистратор,
	|	Расчеты.РасчетныйДокумент             КАК РасчетныйДокумент,
	|	Расчеты.ХозяйственнаяОперация         КАК ХозяйственнаяОперация,
	|	Расчеты.Период                        КАК Период,
	|	Расчеты.ДатаПлановогоПогашения        КАК ДатаПлановогоПогашения,
	|	Расчеты.ДатаВозникновения             КАК ДатаВозникновения,
	|	Расчеты.ВидДвижения                   КАК ВидДвижения,
	|	СУММА(Расчеты.Предоплата)             КАК Предоплата,
	|	СУММА(Расчеты.ПредоплатаУпр)          КАК ПредоплатаУпр,
	|	СУММА(Расчеты.ПредоплатаРегл)         КАК ПредоплатаРегл,
	|	СУММА(Расчеты.Долг)                   КАК Долг,
	|	СУММА(Расчеты.ДолгУпр)                КАК ДолгУпр,
	|	СУММА(Расчеты.ДолгРегл)               КАК ДолгРегл,
	|	Расчеты.СвязанныйДокумент             КАК СвязанныйДокумент,
	|	Расчеты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	Расчеты.ПорядокОперации               КАК ПорядокОперации,
	|	Расчеты.ПорядокЗачета                 КАК ПорядокЗачета,
	|	Расчеты.ВалютаДокумента               КАК ВалютаДокумента,
	|	Расчеты.Организация                   КАК Организация
	|ИЗ (
	|	ВЫБРАТЬ
	|		ЗачетыОплат.АналитикаУчетаПоПартнерам                            КАК АналитикаУчетаПоПартнерам,
	|		ЗачетыОплат.ОбъектРасчетов                                       КАК ОбъектРасчетов,
	|		ЗачетыОплат.Валюта                                               КАК Валюта,
	|		ЗачетыОплат.ДокументРегистратор                                  КАК ДокументРегистратор,
	|		ЗачетыОплат.ДокументРегистратор                                  КАК РасчетныйДокумент,
	|		ЗачетыОплат.ХозяйственнаяОперация                                КАК ХозяйственнаяОперация,
	|		ЗачетыОплат.Период                                               КАК Период,
	|		ДатыВозникновения.ДатаПлатежа                                    КАК ДатаПлановогоПогашения,
	|		ЗачетыОплат.Период                                               КАК ДатаВозникновения,
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                           КАК ВидДвижения,
	|		0                                                                КАК Предоплата,
	|		0                                                                КАК ПредоплатаУпр,
	|		0                                                                КАК ПредоплатаРегл,
	|		ЗачетыОплат.Предоплата                                           КАК Долг,
	|		ЗачетыОплат.ПредоплатаУпр                                        КАК ДолгУпр,
	|		ЗачетыОплат.ПредоплатаРегл                                       КАК ДолгРегл,
	|		Неопределено                                                     КАК СвязанныйДокумент,
	|		ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)  КАК СтатьяДвиженияДенежныхСредств,
	|		ЗачетыОплат.ПорядокОперации                                      КАК ПорядокОперации,
	|		ЗачетыОплат.ПорядокЗачетаРегистратора                            КАК ПорядокЗачета,
	|		ЗачетыОплат.ВалютаДокумента                                      КАК ВалютаДокумента,
	|		ЗачетыОплат.АналитикаУчетаПоПартнерам.Организация                КАК Организация
	|	ИЗ ВтРасчеты КАК ЗачетыОплат
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокДокументов КАК ДатыВозникновения
	|			ПО ЗачетыОплат.ДокументРегистратор = ДатыВозникновения.Регистратор
	|	ГДЕ
	|		ЗачетыОплат.Предоплата > 0 
	|		И ЗачетыОплат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И ЗачетыОплат.ХозяйственнаяОперация НЕ В (&ХозяйственныеОперацииНеОтгрузка)
	|		И ЗачетыОплат.ТипОбъектаРасчетов <> ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовРасчетов.ПлатежВозврат)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗачетыОплат.АналитикаУчетаПоПартнерам                              КАК АналитикаУчетаПоПартнерам,
	|		ЗачетыОплат.ОбъектРасчетов                                         КАК ОбъектРасчетов,
	|		ЗачетыОплат.Валюта                                                 КАК Валюта,
	|		ЗачетыОплат.ДокументРегистратор                                    КАК ДокументРегистратор,
	|		ЗачетыОплат.ДокументРегистратор                                    КАК РасчетныйДокумент,
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаПоставщику) КАК ХозяйственнаяОперация,
	|		ЗачетыОплат.Период                                                 КАК Период,
	|		ДатыВозникновения.ДатаПлатежа                                      КАК ДатаПлановогоПогашения,
	|		ЗачетыОплат.Период                                                 КАК ДатаВозникновения,
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)                             КАК ВидДвижения,
	|		0                                                                  КАК Предоплата,
	|		0                                                                  КАК ПредоплатаУпр,
	|		0                                                                  КАК ПредоплатаРегл,
	|		ЗачетыОплат.Предоплата                                             КАК Долг,
	|		ЗачетыОплат.ПредоплатаУпр                                          КАК ДолгУпр,
	|		ЗачетыОплат.ПредоплатаРегл                                         КАК ДолгРегл,
	|		Неопределено                                                       КАК СвязанныйДокумент,
	|		ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)    КАК СтатьяДвиженияДенежныхСредств,
	|		ЗачетыОплат.ПорядокОперации                                        КАК ПорядокОперации,
	|		ЗачетыОплат.ПорядокЗачетаРегистратора                            КАК ПорядокЗачета,
	|		ЗачетыОплат.ВалютаДокумента                                        КАК ВалютаДокумента,
	|		ЗачетыОплат.АналитикаУчетаПоПартнерам.Организация                  КАК Организация
	|	ИЗ ВтРасчеты КАК ЗачетыОплат
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокДокументов КАК ДатыВозникновения
	|			ПО ЗачетыОплат.ДокументРегистратор = ДатыВозникновения.Регистратор
	|	ГДЕ
	|		ЗачетыОплат.Предоплата > 0 
	|		И ЗачетыОплат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И ЗачетыОплат.ХозяйственнаяОперация НЕ В (&ХозяйственныеОперацииНеОтгрузка)
	|		И ЗачетыОплат.ТипОбъектаРасчетов <> ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовРасчетов.ПлатежВозврат)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РасчетыПоДокументам.АналитикаУчетаПоПартнерам     КАК АналитикаУчетаПоПартнерам,
	|		РасчетыПоДокументам.ОбъектРасчетов                КАК ОбъектРасчетов,
	|		РасчетыПоДокументам.Валюта                        КАК Валюта,
	|		РасчетыПоДокументам.ДокументРегистратор           КАК ДокументРегистратор,
	|		РасчетыПоДокументам.РасчетныйДокумент             КАК РасчетныйДокумент,
	|		ВЫБОР КОГДА РасчетыПоДокументам.Предоплата <> 0 И РасчетыПоДокументам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				И РасчетыПоДокументам.ХозяйственнаяОперация НЕ В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности),
	|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности),
	|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса))
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаПоставщику)
	|			КОГДА РасчетыПоДокументам.Долг <> 0 И РасчетыПоДокументам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				И РасчетыПоДокументам.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности)
	|				И РасчетыПоДокументам.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса)
	|				И РасчетыПоДокументам.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПогашениеЗадолженностиПоставщику)
	|			ИНАЧЕ РасчетыПоДокументам.ХозяйственнаяОперация 
	|		КОНЕЦ КАК ХозяйственнаяОперация,
	|		РасчетыПоДокументам.Период                        КАК Период,
	|		РасчетыПоДокументам.ДатаПлановогоПогашения        КАК ДатаПлановогоПогашения,
	|		РасчетыПоДокументам.ДатаВозникновения             КАК ДатаВозникновения,
	|		РасчетыПоДокументам.ВидДвижения                   КАК ВидДвижения,
	|		РасчетыПоДокументам.Предоплата                    КАК Предоплата,
	|		РасчетыПоДокументам.ПредоплатаУпр                 КАК ПредоплатаУпр,
	|		РасчетыПоДокументам.ПредоплатаРегл                КАК ПредоплатаРегл,
	|		РасчетыПоДокументам.Долг                          КАК Долг,
	|		РасчетыПоДокументам.ДолгУпр                       КАК ДолгУпр,
	|		РасчетыПоДокументам.ДолгРегл                      КАК ДолгРегл,
	|		ВЫБОР КОГДА (РасчетыПоДокументам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И РасчетыПоДокументам.Предоплата > 0)
	|			ИЛИ (РасчетыПоДокументам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И РасчетыПоДокументам.Долг > 0)
	|			ТОГДА РасчетыПоДокументам.СвязанныйДокумент
	|			ИНАЧЕ Неопределено
	|		КОНЕЦ                                             КАК СвязанныйДокумент,
	|		РасчетыПоДокументам.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|		РасчетыПоДокументам.ПорядокОперации               КАК ПорядокОперации,
	|		РасчетыПоДокументам.ПорядокЗачета                 КАК ПорядокЗачета,
	|		РасчетыПоДокументам.ВалютаДокумента               КАК ВалютаДокумента,
	|		РасчетыПоДокументам.АналитикаУчетаПоПартнерам.Организация КАК Организация
	|	ИЗ ВтРасчеты КАК РасчетыПоДокументам) КАК Расчеты
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.АналитикаУчетаПоПартнерам,
	|	Расчеты.ОбъектРасчетов,
	|	Расчеты.Валюта,
	|	Расчеты.ДокументРегистратор,
	|	Расчеты.РасчетныйДокумент,
	|	Расчеты.ХозяйственнаяОперация,
	|	Расчеты.Период,
	|	Расчеты.ДатаПлановогоПогашения,
	|	Расчеты.ДатаВозникновения,
	|	Расчеты.ВидДвижения,
	|	Расчеты.СвязанныйДокумент,
	|	Расчеты.СтатьяДвиженияДенежныхСредств,
	|	Расчеты.ПорядокОперации,
	|	Расчеты.ПорядокЗачета,
	|	Расчеты.ВалютаДокумента,
	|	Расчеты.Организация
	|;
	|УНИЧТОЖИТЬ ВтОсновныеПараметрыРасчета;
	|УНИЧТОЖИТЬ ВтРегистраторы;
	|УНИЧТОЖИТЬ ПорядокДокументов;
	|УНИЧТОЖИТЬ ВтРасчеты
	|";
	
КонецФункции

#КонецОбласти

#Область ОчисткаРегистровВзаиморасчетов

//Очищает все новые регистры расчетов.
Процедура ОчиститьРегистрыВзаиморасчетов() Экспорт
	
	ОписаниеЗамераОчистки = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("Взаиморасчеты.ОчисткаРегистров.Многопоточный");
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		ОписаниеЗамераОчистки = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("Взаиморасчеты.ОчисткаРегистров.ФайловаяБаза");
	КонецЕсли;
	
	ОписаниеЗамераОтключениеИтогов = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("Взаиморасчеты.ОчисткаРегистров.ОтключениеИтогов");
	ОтключитьИтогиРегистровРасчетов();
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамераОтключениеИтогов, 1);
	
	ОписаниеЗамераУдалениеДвижений = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("Взаиморасчеты.ОчисткаРегистров.УдалениеДвижений");
	ВсегоОбработано = 0;
	ОчиститьРегистр("РасчетыСКлиентамиПоСрокам", ВсегоОбработано);
	ОчиститьРегистр("РасчетыСКлиентамиПланОплат", ВсегоОбработано);
	ОчиститьРегистр("РасчетыСКлиентамиПланОтгрузок", ВсегоОбработано);
	ОчиститьРегистр("РасчетыСПоставщикамиПоСрокам", ВсегоОбработано);
	ОчиститьРегистр("РасчетыСПоставщикамиПланОплат", ВсегоОбработано);
	ОчиститьРегистр("РасчетыСПоставщикамиПланПоставок", ВсегоОбработано);
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамераУдалениеДвижений, ВсегоОбработано / 100);
	
	ОписаниеЗамераВключитьИтоги = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("Взаиморасчеты.ОчисткаРегистров.ВключениеИтогов");
	ВключитьИтогиРегистровРасчетов();
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамераВключитьИтоги, 1);
	
	УдалитьСлужебныеРегистраторыМногопоточно();
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамераОчистки, ВсегоОбработано / 100);
	
КонецПроцедуры

//Очищает переданный регистр расчетов.
Процедура ОчиститьРегистр(ИмяРегистра, ВсегоОбработано = 0) Экспорт
	
	Если НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		КоличествоЗаписей = ВыполнитьОчисткуРегистраМногопоточно(ИмяРегистра);
		ВсегоОбработано = ВсегоОбработано + КоличествоЗаписей;
		
	Иначе
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Расчеты.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК Расчеты
		|ГДЕ
		|	Расчеты.Регистратор ССЫЛКА Документ.РегистраторРасчетов";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрНакопления.РасчетыСКлиентамиПоСрокам", "РегистрНакопления." + ИмяРегистра);
		Запрос = Новый Запрос(ТекстЗапроса);
		Выборка = Запрос.Выполнить().Выбрать();
		ВсегоОбработано = ВсегоОбработано + Выборка.Количество();
		Пока Выборка.Следующий() Цикл
			НаборЗаписей = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей(); // РегистрНакопленияНаборЗаписей
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

//Очищает переданный регистр расчетов в несколько потоков.
// 
// Параметры:
// 	ИмяРегистра - Строка - Имя очищаемого регистра накопления
// Возвращаемое значение:
// 	Число - Количество обработанных регистраторов
//
Функция ВыполнитьОчисткуРегистраМногопоточно(ИмяРегистра) Экспорт
	
	Потоки = Новый Массив;
	КоличествоСвободныхПотоков = 1; // КоличествоПотоковРаспределенияВзаиморасчетов(); до исправления 10231410
	КоличествоОбъектовДляОчистки = РазмерПорцииОбработкиВОдномПотоке() * КоличествоСвободныхПотоков;
	// для избежания взаимоблокировок при записи даты минимальных итогов в таблицу AccumRegOpt
	Первый = ДанныеДляОчистки(ИмяРегистра, Неопределено, 1);
	Если Первый.Следующий() Тогда
		НаборЗаписей = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей(); // РегистрНакопленияНаборЗаписей
		НаборЗаписей.Отбор.Регистратор.Установить(Первый.Регистратор);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	КонецЕсли;
	МоментВремени = Неопределено;
	КонтрольныйЗапуск = 3;
	КоличествоОбработанныхЗаписей = 0;
	Пока КоличествоОбъектовДляОчистки > 0 И КонтрольныйЗапуск > 0 Цикл
		
		Если КоличествоСвободныхПотоков > 0 Тогда
			
			РазмерВыборки = РазмерПорцииОбработкиВОдномПотоке() * КоличествоСвободныхПотоков;
			ВыборкаДляОчистки = ДанныеДляОчистки(ИмяРегистра, МоментВремени, РазмерВыборки);
			КоличествоОбработанныхЗаписей = КоличествоОбработанныхЗаписей + ВыборкаДляОчистки.Количество();
			КоличествоОбъектовДляОчистки = ВыборкаДляОчистки.Количество();
			Если КоличествоОбъектовДляОчистки > 0 Тогда
				
				ДанныеПотока = Новый Массив;
				Пока ВыборкаДляОчистки.Следующий() Цикл
					
					МоментВремени = ВыборкаДляОчистки.МоментВремени;
					ДанныеПотока.Добавить(ВыборкаДляОчистки.Регистратор);
					Если ДанныеПотока.Количество() = РазмерПорцииОбработкиВОдномПотоке() Тогда
						Поток = НовоеОписаниеПотока("ОперативныеВзаиморасчетыСервер.УдалитьЗаписиДокументов");
						Поток.НаименованиеЗадания = НСтр("ru = 'Очистка регистра'") + " " + ИмяРегистра;
						Поток.ПараметрыПроцедуры.Вставить("ДанныеКОбработке", ДанныеПотока);
						Поток.ПараметрыПроцедуры.Вставить("ИмяРегистра", ИмяРегистра);
						ЗапуститьОбработкуВФоне(Поток);
						Потоки.Добавить(Поток);
						ДанныеПотока = Новый Массив;
					КонецЕсли;
					
				КонецЦикла;
				
				Если ДанныеПотока.Количество() > 0 Тогда
					Поток = НовоеОписаниеПотока("ОперативныеВзаиморасчетыСервер.УдалитьЗаписиДокументов");
					Поток.НаименованиеЗадания = НСтр("ru = 'Очистка регистра'") + " " + ИмяРегистра;
					Поток.ПараметрыПроцедуры.Вставить("ДанныеКОбработке", ДанныеПотока);
					Поток.ПараметрыПроцедуры.Вставить("ИмяРегистра", ИмяРегистра);
					ЗапуститьОбработкуВФоне(Поток);
					Потоки.Добавить(Поток);
				КонецЕсли;
				
			ИначеЕсли КонтрольныйЗапуск > 0 Тогда
				МоментВремени = Неопределено;
				КонтрольныйЗапуск = КонтрольныйЗапуск - 1;
			КонецЕсли;
			
		КонецЕсли;
		
		ОжидатьЗавершениеПотока(Поток);
		
		ЗавершитьПотокиВыполнившиеФЗ(Потоки);
		
		КоличествоДоступныхПотоков = 1; // КоличествоПотоковРаспределенияВзаиморасчетов(); до исправления 10231410
		КоличествоСвободныхПотоков = Макс(КоличествоДоступныхПотоков - Потоки.Количество(), 0);
		
	КонецЦикла;
	
	ОжидатьЗавершениеВсехПотоков(Потоки);
	
	Возврат КоличествоОбработанныхЗаписей;
	
КонецФункции

//Очищает переданный регистр расчетов по регистратору
Процедура ОчиститьРегистрВзаиморасчетовПоДокументу(Регистратор, ИмяРегистра) Экспорт
	
	НаборЗаписей = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей(); // РегистрНакопленияНаборЗаписей
	НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.Записать();

КонецПроцедуры

//Удаляет служебные регистраторы.
//
Процедура УдалитьСлужебныеРегистраторыМногопоточно() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РегистраторРасчетов.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РегистраторРасчетов КАК РегистраторРасчетов";
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоОбработанныхЗаписей = Выборка.Количество();
	РазмерПорцииОдномПотоке = Цел(Выборка.Количество()/КоличествоПотоковРаспределенияВзаиморасчетов()) + 1;
	Потоки = Новый Массив;
	ДанныеПотока = Новый Массив;
	Пока Выборка.Следующий() Цикл
		ДанныеПотока.Добавить(Выборка.Ссылка);
		Если ДанныеПотока.Количество() = РазмерПорцииОдномПотоке Тогда
			Поток = НовоеОписаниеПотока("ОперативныеВзаиморасчетыСервер.УдалитьСлужебныеРегистраторы");
			Поток.НаименованиеЗадания = НСтр("ru = 'Удаление служебных регистраторов'");
			Поток.ПараметрыПроцедуры.Вставить("ДанныеКОбработке", ДанныеПотока);
			ЗапуститьОбработкуВФоне(Поток);
			Потоки.Добавить(Поток);
			ДанныеПотока = Новый Массив;
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеПотока.Количество() > 0 Тогда
		Поток = НовоеОписаниеПотока("ОперативныеВзаиморасчетыСервер.УдалитьСлужебныеРегистраторы");
		Поток.НаименованиеЗадания = НСтр("ru = 'Удаление служебных регистраторов'");
		Поток.ПараметрыПроцедуры.Вставить("ДанныеКОбработке", ДанныеПотока);
		ЗапуститьОбработкуВФоне(Поток);
		Потоки.Добавить(Поток);
		ДанныеПотока = Новый Массив;
	КонецЕсли;
	
	ОжидатьЗавершениеВсехПотоков(Потоки,,КоличествоОбработанныхЗаписей);
	
КонецПроцедуры

Функция ДанныеДляОчистки(ИмяРегистра, МоментВремени, РазмерПорции = 0)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	Расчеты.МоментВремени КАК МоментВремени,
	|	Расчеты.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК Расчеты
	|ГДЕ
	|	Расчеты.Регистратор ССЫЛКА Документ.РегистраторРасчетов
	|	И (&БезОтбора ИЛИ Расчеты.МоментВремени > &МоментВремени)
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.МоментВремени,
	|	Расчеты.Регистратор
	|УПОРЯДОЧИТЬ ПО
	|	Расчеты.МоментВремени"; // сортировать только по возрастанию периода для избежания взаимоблокировок при записи даты минимальных итогов в таблицу AccumRegOpt 
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрНакопления.РасчетыСКлиентамиПоСрокам", "РегистрНакопления."+ИмяРегистра);
	Если РазмерПорции > 0 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "1000", Формат(РазмерПорции, "ЧН=0; ЧГ=0"));
	КонецЕсли;
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МоментВремени", МоментВремени);
	Если МоментВремени = Неопределено Тогда
		Запрос.УстановитьПараметр("МоментВремени", Новый МоментВремени('00010101'));
	КонецЕсли;
	Запрос.УстановитьПараметр("БезОтбора", МоментВремени = Неопределено);
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат Выборка;
	
КонецФункции

Процедура УдалитьЗаписиДокументов(Параметры, АдресРезультата = Неопределено) Экспорт
	
	ДанныеКОбработке = Параметры.ДанныеКОбработке;
	ИмяРегистра = Параметры.ИмяРегистра;
	КоличествоРегистраторов = ДанныеКОбработке.Количество();
	Для Каждого Регистратор Из ДанныеКОбработке Цикл
		НаборЗаписей = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей(); // РегистрНакопленияНаборЗаписей
		НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	КонецЦикла;
	
	Если АдресРезультата <> Неопределено Тогда
		Результат = Новый Структура("КоличествоОбработанныхЗаписей", КоличествоРегистраторов);
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьСлужебныеРегистраторы(Параметры, АдресРезультата = Неопределено) Экспорт
	
	ДанныеКОбработке = Параметры.ДанныеКОбработке;
	КоличествоРегистраторов = ДанныеКОбработке.Количество();
	Для Каждого Регистратор Из ДанныеКОбработке Цикл
		
		ДокументОбъект = Регистратор.ПолучитьОбъект();
		ДокументОбъект.Удалить();
		
	КонецЦикла;
	
	Если АдресРезультата <> Неопределено Тогда
		Результат = Новый Структура("КоличествоОбработанныхЗаписей", КоличествоРегистраторов);
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ФоновоеРаспределениеПлановыхОплат

Процедура ВыполнитьФоновоеРаспределениеРасчетов(Параметры = Неопределено, АдресРезультата = Неопределено) Экспорт
	
	РаспределитьФактическиеРасчеты = Ложь;
	Если ТипЗнч(Параметры) = Тип("Структура") И Параметры.Свойство("РаспределитьФактическиеРасчеты") Тогда
		РаспределитьФактическиеРасчеты = Параметры.РаспределитьФактическиеРасчеты;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	НачатьТранзакцию();
	Попытка
		
		ПричинаИсключения = "Блокировка";
		
		// для предотвращения повторного запуска мененеджера распределения заблокируем константу
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Константа.БлокировкаФоновогоРаспределенияРасчетов");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		Блокировка.Заблокировать();
		
		ПричинаИсключения = "РаботаУправляющегоПотока";
		КоличествоПопыток = 0;
		Пока КоличествоПопыток < 10 Цикл
			
			ОбщегоНазначенияУТ.Пауза(1);
			
			ПараметрыМП = ПараметрыМногопоточнойОбработкиРасчетов();
			ПараметрыМП.Процедура.Имя = "ОперативныеВзаиморасчетыСервер.ВыполнитьОтложенноеРаспределение";
			ПараметрыМП.Процедура.ПредставлениеЗадания = НСтр("ru = 'Распределение плановых расчетов'");
			ПараметрыМП.Данные.УсловиеЗапроса = "Задания.ДатаПересчета = ДАТАВРЕМЯ(3000,1,1)";
			Если РаспределитьФактическиеРасчеты Тогда
				ПараметрыМП.Данные.УсловиеЗапроса = "";
				ПараметрыМП.Процедура.ПредставлениеЗадания = НСтр("ru = 'Распределение фактических расчетов'");
			КонецЕсли;
			
			ВсегоОбработано = МногопоточнаяОбработкаЗаданийКРаспределениюРасчетов(ПараметрыМП);
			
			КоличествоПопыток = КоличествоПопыток + 1;
			Если ВсегоОбработано > 0 Тогда
				КоличествоПопыток = 0;
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Если ПричинаИсключения <> "Блокировка" Тогда
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Событие = НСтр("ru = 'Фоновое распределение плановых расчетов'", ОбщегоНазначения.КодОсновногоЯзыка());
			Если РаспределитьФактическиеРасчеты Тогда
				Событие = НСтр("ru = 'Фоновое распределение фактических расчетов'", ОбщегоНазначения.КодОсновногоЯзыка());
			КонецЕсли;
			ЗаписьЖурналаРегистрации(Событие, УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		КонецЕсли;
		
		Возврат;
		
	КонецПопытки;
	
	Константы.БлокировкаФоновогоРаспределенияРасчетов.Установить(Ложь);
	Если РаспределитьФактическиеРасчеты Тогда
		Константы.РаспределятьФактическиеРасчетыФоновымЗаданием.Установить(Ложь);
		ИспользоватьРегламентноеЗаданиеФактическоеРаспределение(Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеФункции

#Область МенеджерМногопоточнойОбработкиРасчетов

Функция МногопоточнаяОбработкаЗаданийКРаспределениюРасчетов(Параметры)
	
	ПроцедураОбработки = Параметры.Процедура;
	ПараметрыДанных = Параметры.Данные;
	РазмерПорцииОбработкиВОдномПотоке = Параметры.РазмерПорцииОбработкиВОдномПотоке;

	Потоки = Новый Массив;
	КоличествоСвободныхПотоков = КоличествоПотоковРаспределенияВзаиморасчетов();
	КоличествоОбъектовДляОбработки = РазмерПорцииОбработкиВОдномПотоке * КоличествоСвободныхПотоков;
	ПараметрыДанных.ПоследняяЗапись = НовыйКурсор();
	КоличествоОбработанныхЗаписей = 0;
	КоличествоОбработанныхЗаданий = 0;
	Пока КоличествоОбъектовДляОбработки > 0 Цикл

		Если КоличествоСвободныхПотоков > 0 Тогда

			ПараметрыДанных.РазмерПорции = РазмерПорцииОбработкиВОдномПотоке * КоличествоСвободныхПотоков;
			ДанныеДляОбработки = ДанныеДляОбработки(ПараметрыДанных);
			Кортежи = ДанныеДляОбработки.Кортежи;
			ПараметрыДанных.ПоследняяЗапись = НовыйКурсор();
			Если Кортежи.Количество() = ПараметрыДанных.РазмерПорции Тогда
				ЗаполнитьЗначенияСвойств(ПараметрыДанных.ПоследняяЗапись, Кортежи[Кортежи.Количество() - 1]);
			КонецЕсли;

			ПараметрыДанных.РазмерПорции = 1;
			Если Кортежи.Количество()/КоличествоСвободныхПотоков > 1 Тогда
				РазмерПорции = Кортежи.Количество()/КоличествоСвободныхПотоков;
				Если Цел(РазмерПорции) <> РазмерПорции Тогда
					ПараметрыДанных.РазмерПорции = Цел(РазмерПорции) + 1;
				Иначе
					ПараметрыДанных.РазмерПорции = РазмерПорции;
				КонецЕсли;
			КонецЕсли;
			КоличествоОбъектовДляОбработки = 0;
			КортежиВОбработке = ПараметрыДанных.КортежиВОбработке.СкопироватьКолонки();
			Пока Кортежи.Количество() > 0 Цикл

				ДанныеПотока = ВыбратьДанныеДляПотока(ДанныеДляОбработки, ПараметрыДанных.РазмерПорции);
				Поток = НовоеОписаниеПотока(ПроцедураОбработки.Имя);
				Поток.НаименованиеЗадания = ПроцедураОбработки.ПредставлениеЗадания;
				Поток.ПараметрыПроцедуры.Вставить("ДанныеКОбработке", ДанныеПотока.Задания);
				Для Каждого Параметр Из ПроцедураОбработки.Параметры Цикл
					Поток.ПараметрыПроцедуры.Вставить(Параметр.Ключ, Параметр.Значение);
				КонецЦикла;
				ЗапуститьОбработкуВФоне(Поток);
				ДобавитьКортежиПотока(Поток, КортежиВОбработке, ДанныеПотока.Кортежи);
				КоличествоОбъектовДляОбработки = КоличествоОбъектовДляОбработки + ДанныеПотока.Задания.Количество();
				КоличествоОбработанныхЗаданий = КоличествоОбработанныхЗаданий + ДанныеПотока.Задания.Количество();
				Потоки.Добавить(Поток);

			КонецЦикла;

		КонецЕсли;

		ОжидатьЗавершениеПотока(Поток);

		ЗавершитьПотокиВыполнившиеФЗ(Потоки, КортежиВОбработке, КоличествоОбработанныхЗаписей);
		ЭтоПоследняяПорция = ПараметрыДанных.ПоследняяЗапись.ОбъектРасчетов = Неопределено;
		Если ЭтоПоследняяПорция Тогда
			ОжидатьЗавершениеВсехПотоков(Потоки, КортежиВОбработке, КоличествоОбработанныхЗаписей);
		КонецЕсли;
		ПараметрыДанных.КортежиВОбработке = КортежиВОбработке;

		КоличествоДоступныхПотоков = КоличествоПотоковРаспределенияВзаиморасчетов();
		КоличествоСвободныхПотоков = Макс(КоличествоДоступныхПотоков - Потоки.Количество(), 0);

	КонецЦикла;

	ОжидатьЗавершениеВсехПотоков(Потоки,,КоличествоОбработанныхЗаписей);

	Если КоличествоОбработанныхЗаписей = 0 Тогда
		Возврат КоличествоОбработанныхЗаданий;
	КонецЕсли;

	Возврат КоличествоОбработанныхЗаписей;
	
КонецФункции

Функция ПараметрыМногопоточнойОбработкиРасчетов(РазмерПорцииВОдномПотоке = Неопределено)
	
	Результат = Новый Структура;
	
	ПроцедураОбработки = Новый Структура;
	ПроцедураОбработки.Вставить("Имя", "");
	ПроцедураОбработки.Вставить("ПредставлениеЗадания", "");
	ПроцедураОбработки.Вставить("Параметры", Новый Структура);
	
	ДанныеОбработки = ПараметрыДанныхМногопоточнойОбработки();
	
	Результат.Вставить("РазмерПорцииОбработкиВОдномПотоке", РазмерПорцииОбработкиВОдномПотоке());
	Если РазмерПорцииВОдномПотоке <> Неопределено Тогда
		Результат.РазмерПорцииОбработкиВОдномПотоке = РазмерПорцииВОдномПотоке;
	КонецЕсли;
	Результат.Вставить("Процедура", ПроцедураОбработки);
	Результат.Вставить("Данные", ДанныеОбработки);
	
	Возврат Результат;
	
КонецФункции

Функция ПараметрыДанныхМногопоточнойОбработки()
	
	ДанныеОбработки = Новый Структура;
	ДанныеОбработки.Вставить("ПоследняяЗапись", Неопределено);
	ДанныеОбработки.Вставить("РазмерПорции", Неопределено);
	ДанныеОбработки.Вставить("УсловиеЗапроса", "");
	ДанныеОбработки.Вставить("ПараметрыЗапроса", Новый Структура);
	
	КортежиВОбработке = Новый ТаблицаЗначений();
	КортежиВОбработке.Колонки.Добавить("ИдПотока", Новый ОписаниеТипов("УникальныйИдентификатор"));
	КортежиВОбработке.Колонки.Добавить("ТипРасчетов", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыРасчетовСПартнерами"));
	КортежиВОбработке.Колонки.Добавить("АналитикаУчетаПоПартнерам", Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиУчетаПоПартнерам"));
	КортежиВОбработке.Колонки.Добавить("ОбъектРасчетов", Новый ОписаниеТипов("СправочникСсылка.ОбъектыРасчетов"));
	КортежиВОбработке.Колонки.Добавить("ВалютаРасчетов", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	
	ДанныеОбработки.Вставить("КортежиВОбработке", КортежиВОбработке);
	
	Возврат ДанныеОбработки;
	
КонецФункции

Функция НовыйКурсор()
	
	ПоследняяЗапись = Новый Структура("КоличествоДокументов,АналитикаУчетаПоПартнерам,ОбъектРасчетов");
	ПоследняяЗапись.КоличествоДокументов = 0;
	
	Возврат ПоследняяЗапись;
	
КонецФункции

Функция ДанныеДляОбработки(Параметры)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Кортежи.ТипРасчетов КАК ТипРасчетов,
	|	Кортежи.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Кортежи.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Кортежи.ВалютаРасчетов КАК ВалютаРасчетов
	|ПОМЕСТИТЬ втКортежиВРаботе
	|ИЗ
	|	&КортежиВОбработке КАК Кортежи
	|ИНДЕКСИРОВАТЬ ПО
	|	ТипРасчетов,
	|	АналитикаУчетаПоПартнерам,
	|	ОбъектРасчетов,
	|	ВалютаРасчетов
	|	
	|;
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1000
	|	Задания.КоличествоДокументов КАК КоличествоДокументов,
	|	Задания.ТипРасчетов КАК ТипРасчетов,
	|	Задания.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Задания.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Задания.Валюта КАК ВалютаРасчетов
	|ПОМЕСТИТЬ втКортежиКОбработке
	|ИЗ
	|	РегистрСведений.ЗаданияКРаспределениюРасчетов КАК Задания
	|	ЛЕВОЕ СОЕДИНЕНИЕ втКортежиВРаботе КАК КортежиВРаботе
	|	ПО Задания.ТипРасчетов = КортежиВРаботе.ТипРасчетов
	|		И Задания.ТипРасчетов = КортежиВРаботе.ТипРасчетов
	|		И Задания.АналитикаУчетаПоПартнерам = КортежиВРаботе.АналитикаУчетаПоПартнерам
	|		И Задания.ОбъектРасчетов = КортежиВРаботе.ОбъектРасчетов
	|		И Задания.Валюта = КортежиВРаботе.ВалютаРасчетов
	|ГДЕ 
	|	КортежиВРаботе.ОбъектРасчетов ЕСТЬ NULL
	|	И (Задания.АналитикаУчетаПоПартнерам = &АналитикаУчетаПоПартнерам
	|			И Задания.ОбъектРасчетов > &ОбъектРасчетов
	|		ИЛИ Задания.АналитикаУчетаПоПартнерам > &АналитикаУчетаПоПартнерам
	|		ИЛИ &БезАналитики)
	|
	|СГРУППИРОВАТЬ ПО
	|	Задания.КоличествоДокументов,
	|	Задания.ТипРасчетов,
	|	Задания.АналитикаУчетаПоПартнерам,
	|	Задания.ОбъектРасчетов,
	|	Задания.Валюта
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТипРасчетов,
	|	АналитикаУчетаПоПартнерам,
	|	ОбъектРасчетов,
	|	ВалютаРасчетов
	|;
	|
	|ВЫБРАТЬ
	|	КортежиКОбработке.КоличествоДокументов КАК КоличествоДокументов,
	|	КортежиКОбработке.ТипРасчетов КАК ТипРасчетов,
	|	КортежиКОбработке.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	КортежиКОбработке.ОбъектРасчетов КАК ОбъектРасчетов,
	|	КортежиКОбработке.ВалютаРасчетов КАК ВалютаРасчетов
	|ИЗ
	|	втКортежиКОбработке КАК КортежиКОбработке
	|
	|УПОРЯДОЧИТЬ ПО
	|	КоличествоДокументов УБЫВ,
	|	АналитикаУчетаПоПартнерам,
	|	ОбъектРасчетов
	|;
	|
	|ВЫБРАТЬ
	|	Задания.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом) КАК ЭтоРасчетыСКлиентами,
	|	Задания.ТипРасчетов КАК ТипРасчетов,
	|	Задания.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Задания.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Задания.ОбъектРасчетов.Объект КАК Объект,
	|	Задания.Валюта КАК ВалютаРасчетов,
	|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка) КАК АналитикаУчетаПоПартнерамПриемник,
	|	ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка) КАК ОбъектРасчетовПриемник,
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаПриемник,
	|	Задания.Документ КАК Документ,
	|	МАКСИМУМ(Задания.Приоритет) КАК Приоритет,
	|	ВЫБОР КОГДА МАКСИМУМ(Задания.Приоритет) = 2
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПоДаннымОбъектаРасчетовИсточника,
	|	МИНИМУМ(Задания.ДатаПересчета) КАК ДатаПересчета,
	|	МИНИМУМ(Задания.ДатаПересчетаПлан) КАК ДатаПересчетаПлан,
	|	КортежиКОбработке.КоличествоДокументов КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.ЗаданияКРаспределениюРасчетов КАК Задания
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ втКортежиКОбработке КАК КортежиКОбработке
	|	ПО Задания.ТипРасчетов = КортежиКОбработке.ТипРасчетов
	|		И Задания.АналитикаУчетаПоПартнерам = КортежиКОбработке.АналитикаУчетаПоПартнерам
	|		И Задания.ОбъектРасчетов = КортежиКОбработке.ОбъектРасчетов
	|		И Задания.Валюта = КортежиКОбработке.ВалютаРасчетов
	|ГДЕ
	|	&Условие
	|
	|СГРУППИРОВАТЬ ПО
	|	Задания.ТипРасчетов,
	|	Задания.АналитикаУчетаПоПартнерам,
	|	Задания.ОбъектРасчетов,
	|	Задания.Валюта,
	|	Задания.Документ,
	|	КортежиКОбработке.КоличествоДокументов
	|
	|УПОРЯДОЧИТЬ ПО
	|	МАКСИМУМ(Задания.Приоритет) ВОЗР,
	|	КоличествоДокументов УБЫВ,
	|	АналитикаУчетаПоПартнерам,
	|	ОбъектРасчетов";
	
	Если Параметры.РазмерПорции = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, " ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "1000", Формат(Параметры.РазмерПорции, "ЧН=0; ЧГ=0"));
	УсловиеЗапроса = Параметры.УсловиеЗапроса;
	Если НЕ ЗначениеЗаполнено(УсловиеЗапроса) Тогда
		УсловиеЗапроса = "ИСТИНА";
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Условие", УсловиеЗапроса);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("КоличествоДокументов", 0);
	Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам", Неопределено);
	Запрос.УстановитьПараметр("ОбъектРасчетов", Неопределено);
	Запрос.УстановитьПараметр("БезАналитики", Истина);
	Запрос.УстановитьПараметр("КортежиВОбработке", Параметры.КортежиВОбработке);
	
	ПоследняяЗапись = Параметры.ПоследняяЗапись;
	Если ПоследняяЗапись <> Неопределено Тогда
		Запрос.УстановитьПараметр("КоличествоДокументов", ПоследняяЗапись.КоличествоДокументов);
		Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам", ПоследняяЗапись.АналитикаУчетаПоПартнерам);
		Запрос.УстановитьПараметр("ОбъектРасчетов", ПоследняяЗапись.ОбъектРасчетов);
		Запрос.УстановитьПараметр("БезАналитики", НЕ ЗначениеЗаполнено(ПоследняяЗапись.АналитикаУчетаПоПартнерам));
	КонецЕсли;

	Для Каждого Параметр Из Параметры.ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;

	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Данные = РезультатЗапроса[РезультатЗапроса.ВГраница()].Выгрузить();
	Данные.Индексы.Добавить("ТипРасчетов,АналитикаУчетаПоПартнерам,ОбъектРасчетов,ВалютаРасчетов");
	Кортежи = РезультатЗапроса[РезультатЗапроса.ВГраница()-1].Выгрузить();
	
	Результат = Новый Структура;
	Результат.Вставить("Кортежи", Кортежи);
	Результат.Вставить("Данные", Данные);
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьКортежиПотока(Поток,КортежиВОбработке,Кортежи)
	
	Если КортежиВОбработке = Неопределено Тогда
		КортежиВОбработке = Кортежи.Скопировать();
		КортежиВОбработке.ЗаполнитьЗначения(Поток.ИдентификаторЗадания,"ИдПотока");
		Возврат;
	КонецЕсли;
	
	Для Каждого Кортеж Из Кортежи Цикл
		НоваяСтрока = КортежиВОбработке.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Кортеж);
		НоваяСтрока.ИдПотока = Поток.ИдентификаторЗадания;
	КонецЦикла;
	
КонецПроцедуры

// Кортежи с наибольшим количеством документов первыми отправляются на обработку.
// Для более равномерной загрузки потоков и максимального распараллеливания обработки
// такие кортежи распределяются равномерно по всем свободными потоками,
// а не назначаются все "тяжелые" в один поток обработки.
//
Функция ВыбратьДанныеДляПотока(ДанныеКОбработке, РазмерПорции)
	
	ПоляКортежа = "ТипРасчетов,АналитикаУчетаПоПартнерам,ОбъектРасчетов,ВалютаРасчетов";
	Кортежи = ДанныеКОбработке.Кортежи;
	Задания = ДанныеКОбработке.Данные;
	ЗаданияПотока = Задания.СкопироватьКолонки();
	КортежиПотока = Задания.СкопироватьКолонки(ПоляКортежа);
	ЭтоПоследняяПорция = Кортежи.Количество()/РазмерПорции <= 1;
	Индекс = 0;
	Пока (КортежиПотока.Количество() < РазмерПорции ИЛИ ЭтоПоследняяПорция)
		И Кортежи.Количество() > 0 Цикл
		
		Кортеж = Кортежи[Индекс];
		Отбор = Новый Структура(ПоляКортежа);
		ЗаполнитьЗначенияСвойств(Отбор,Кортеж);
		ЗаписиКОбработке = Задания.НайтиСтроки(Отбор);
		Для Каждого Запись Из ЗаписиКОбработке Цикл
			ЗаполнитьЗначенияСвойств(ЗаданияПотока.Добавить(), Запись);
		КонецЦикла;
		ЗаполнитьЗначенияСвойств(КортежиПотока.Добавить(), Кортеж);
		
		Кортежи.Удалить(Кортеж);
		Индекс = Индекс + РазмерПорции;
		Если Индекс >= Кортежи.Количество() Тогда
			Индекс = 0;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеПотока = Новый Структура;
	ДанныеПотока.Вставить("Задания", ЗаданияПотока);
	ДанныеПотока.Вставить("Кортежи", КортежиПотока);
	
	Возврат ДанныеПотока;
	
КонецФункции

Процедура ОтметитьВыполнениеЗадания(ОтборПоИзмерениям, ДополнительныеИзмеренияОтбора = "")
	
	ИзмеренияОтбораСтрокой =  
	"ТипРасчетов,
	|АналитикаУчетаПоПартнерам,
	|ОбъектРасчетов,
	|Валюта,
	|ВалютаРасчетов";
	Если НЕ ПустаяСтрока(ДополнительныеИзмеренияОтбора)  Тогда
		ИзмеренияОтбораСтрокой = ИзмеренияОтбораСтрокой + "," + ДополнительныеИзмеренияОтбора;
	КонецЕсли;
	
	ИзмеренияОтбора = Новый Структура(ИзмеренияОтбораСтрокой);
	ЗаполнитьЗначенияСвойств(ИзмеренияОтбора, ОтборПоИзмерениям);
	
	Набор = РегистрыСведений.ЗаданияКРаспределениюРасчетов.СоздатьНаборЗаписей();
	Для Каждого Измерение Из ИзмеренияОтбора Цикл
		Если Измерение.Значение <> Неопределено Тогда
			ИмяИзмерения = ?(Измерение.Ключ = "ВалютаРасчетов", "Валюта", Измерение.Ключ);
			Набор.Отбор[ИмяИзмерения].Установить(Измерение.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Набор.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСПотоками

Функция РазмерПорцииОбработкиВОдномПотоке()
	
	Возврат 1000;
	
КонецФункции

Функция КоличествоПотоковРаспределенияВзаиморасчетов()
	
	Количество = Константы.КоличествоПотоковРаспределенияВзаиморасчетов.Получить();
	Если Количество = 0 Тогда
		Количество = 8;
	КонецЕсли;
	Возврат Количество;
	
КонецФункции

// Новое описание потока.
// 
// Параметры:
//  ИмяМетода - Строка - Имя метода
// 
// Возвращаемое значение:
//  
Функция НовоеОписаниеПотока(ИмяМетода = "")
	
	Описание = Новый Структура;
	Описание.Вставить("ИдентификаторЗадания", Неопределено);
	Описание.Вставить("Процедура", ИмяМетода);
	Описание.Вставить("АдресРезультата", "");
	Описание.Вставить("НаименованиеЗадания", "");
	Описание.Вставить("ПараметрыПроцедуры", Новый Структура);
	Возврат Описание;
	
КонецФункции

Процедура ЗапуститьОбработкуВФоне(Поток)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Неопределено);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = Поток.НаименованиеЗадания;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.АдресРезультата = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
	
	РезультатЗапуска = ДлительныеОперации.ВыполнитьВФоне(Поток.Процедура, Поток.ПараметрыПроцедуры, ПараметрыВыполнения);
	
	Поток.АдресРезультата = РезультатЗапуска.АдресРезультата;
	Статус = РезультатЗапуска.Статус;
	
	Если Статус = "Выполняется" Тогда
		Поток.ИдентификаторЗадания = РезультатЗапуска.ИдентификаторЗадания;
	ИначеЕсли Статус <> "Выполняется" И Статус <> "Выполнено" Тогда
		ВызватьИсключение РезультатЗапуска.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОжидатьЗавершениеВсехПотоков(Потоки, КортежиВОбработке = Неопределено, КоличествоОбработанныхЗаписей = 0)
	Пока Потоки.Количество() > 0 Цикл
		Если НЕ ЗавершитьПотокиВыполнившиеФЗ(Потоки, КортежиВОбработке, КоличествоОбработанныхЗаписей) Тогда
			ОжидатьЗавершениеПотока(Потоки[0]);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЗавершитьПотокиВыполнившиеФЗ(Потоки, КортежиВОбработке = Неопределено, КоличествоОбработанныхЗаписей = 0)
	
	ЕстьЗавершенныеПотоки = Ложь;
	
	Индекс = Потоки.Количество() - 1;
	Пока Индекс >= 0 Цикл
		Поток = Потоки[Индекс];
		ИдентификаторЗадания = Поток.ИдентификаторЗадания;
		
		Если ИдентификаторЗадания <> Неопределено Тогда
			ЗаданиеВыполнено = ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
		КонецЕсли;
		
		Если ИдентификаторЗадания = Неопределено ИЛИ ЗаданиеВыполнено Тогда
			Если ЗначениеЗаполнено(Поток.АдресРезультата) Тогда
				Результат = ПолучитьИзВременногоХранилища(Поток.АдресРезультата);
				Если Результат <> Неопределено И Результат.Свойство("КоличествоОбработанныхЗаписей") Тогда
					КоличествоОбработанныхЗаписей = КоличествоОбработанныхЗаписей + Результат.КоличествоОбработанныхЗаписей;
				КонецЕсли;
				УдалитьИзВременногоХранилища(Поток.АдресРезультата);
			КонецЕсли;
			Отбор = Новый Структура("ИдПотока",ИдентификаторЗадания);
			Если КортежиВОбработке <> Неопределено Тогда
				КортежиКУдалению = КортежиВОбработке.НайтиСтроки(Отбор);
				Для Каждого Кортеж Из КортежиКУдалению Цикл
					КортежиВОбработке.Удалить(Кортеж);
				КонецЦикла;
			КонецЕсли;
			Потоки.Удалить(Индекс);
			ЕстьЗавершенныеПотоки = Истина;
		КонецЕсли;
		
		Индекс = Индекс - 1;
	КонецЦикла;
	
	Возврат ЕстьЗавершенныеПотоки;
	
КонецФункции

Функция ОжидатьЗавершениеПотока(Поток, Длительность = 1)
	
	Если Поток <> Неопределено И Поток.ИдентификаторЗадания <> Неопределено Тогда
		Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(Поток.ИдентификаторЗадания);
		
		Если Задание <> Неопределено Тогда
			Попытка
				Задание.ОжидатьЗавершенияВыполнения(Длительность);
				Возврат Истина;
			Исключение
				// Специальная обработка не требуется, возможно исключение вызвано истечением времени ожидания.
				Возврат Ложь;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

//Возвращает таблицу объектов расчетов по которым есть движения по ресурсам "Сумма", "КОплате", "КОтгрузке"
//
// Параметры:
//	Период - Дата - Необязательный, дата, после которой искать движения по регистрам.
//	ДетализироватьДоДокумента - Булево - По умолчанию Ложь.
//	
//	Возвращаемое значение:
//		ТаблицаЗначений - таблица объектов расчетов:
//			* АналитикаУчетаПоПартнерам - СправочникСсылка.КлючиАналитикиУчетаПоПартнерам.
//			* ОбъектРасчетов - СправочникСсылка.ОбъектыРасчетов.
//			* ВалютаРасчетов - СправочникСсылка.Валюты.
//			* ЭтоРасчетыСКлиентами - Булево.
//			* АналитикаУчетаПоПартнерамПриемник - СправочникСсылка.КлючиАналитикиУчетаПоПартнерам.
//			* ОбъектРасчетовПриемник - СправочникСсылка.ОбъектыРасчетов.
//			* ВалютаПриемник - СправочникСсылка.Валюты
//			* ПоДаннымОбъектаРасчетовИсточника - Булево
//
Функция ПолучитьВсеОбъекты(Период = Неопределено, ДетализироватьДоДокумента = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом) КАК ТипРасчетов,
	|	Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Расчеты.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Расчеты.Валюта КАК ВалютаРасчетов,
	|	ИСТИНА КАК ЭтоРасчетыСКлиентами,
	|	Расчеты.АналитикаУчетаПоПартнерамПриемник КАК АналитикаУчетаПоПартнерамПриемник,
	|	Расчеты.ОбъектРасчетовПриемник КАК ОбъектРасчетовПриемник,
	|	Расчеты.ВалютаПриемник КАК ВалютаПриемник,
	|	ВЫБОР КОГДА НЕ СвязанныеРасчетыСКлиентами.Регистратор ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоРасчетыСКлиентамиПриемник,
	|	&ПоДаннымОбъектаРасчетовИсточника
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК Расчеты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами КАК СвязанныеРасчетыСКлиентами
	|			ПО СвязанныеРасчетыСКлиентами.АналитикаУчетаПоПартнерам = Расчеты.АналитикаУчетаПоПартнерамПриемник
	|			И СвязанныеРасчетыСКлиентами.ОбъектРасчетов = Расчеты.ОбъектРасчетовПриемник
	|			И СвязанныеРасчетыСКлиентами.Валюта = Расчеты.ВалютаПриемник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками КАК СвязанныеРасчетыСПоставщиками
	|			ПО СвязанныеРасчетыСПоставщиками.АналитикаУчетаПоПартнерам = Расчеты.АналитикаУчетаПоПартнерамПриемник
	|			И СвязанныеРасчетыСПоставщиками.ОбъектРасчетов = Расчеты.ОбъектРасчетовПриемник
	|			И СвязанныеРасчетыСПоставщиками.Валюта = Расчеты.ВалютаПриемник
	|ГДЕ
	|	(Расчеты.Сумма <> 0 ИЛИ Расчеты.КОплате <> 0 ИЛИ Расчеты.КОтгрузке <> 0)
	|	И Расчеты.Период >= &Период
	|	И Расчеты.Активность
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком) КАК ТипРасчетов,
	|	Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Расчеты.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Расчеты.Валюта КАК ВалютаРасчетов,
	|	ЛОЖЬ КАК ЭтоРасчетыСКлиентами,
	|	Расчеты.АналитикаУчетаПоПартнерамПриемник КАК АналитикаУчетаПоПартнерамПриемник,
	|	Расчеты.ОбъектРасчетовПриемник КАК ОбъектРасчетовПриемник,
	|	Расчеты.ВалютаПриемник КАК ВалютаПриемник,
	|	ВЫБОР КОГДА НЕ СвязанныеРасчетыСКлиентами.Регистратор ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоРасчетыСКлиентамиПриемник,
	|	&ПоДаннымОбъектаРасчетовИсточника
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами КАК СвязанныеРасчетыСКлиентами
	|			ПО СвязанныеРасчетыСКлиентами.АналитикаУчетаПоПартнерам = Расчеты.АналитикаУчетаПоПартнерамПриемник
	|			И СвязанныеРасчетыСКлиентами.ОбъектРасчетов = Расчеты.ОбъектРасчетовПриемник
	|			И СвязанныеРасчетыСКлиентами.Валюта = Расчеты.ВалютаПриемник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками КАК СвязанныеРасчетыСПоставщиками
	|			ПО СвязанныеРасчетыСПоставщиками.АналитикаУчетаПоПартнерам = Расчеты.АналитикаУчетаПоПартнерамПриемник
	|			И СвязанныеРасчетыСПоставщиками.ОбъектРасчетов = Расчеты.ОбъектРасчетовПриемник
	|			И СвязанныеРасчетыСПоставщиками.Валюта = Расчеты.ВалютаПриемник
	|ГДЕ
	|	(Расчеты.Сумма <> 0 ИЛИ Расчеты.КОплате <> 0 ИЛИ Расчеты.КПоступлению <> 0)
	|	И Расчеты.Период >= &Период
	|	И Расчеты.Активность
	|";
	Запрос.УстановитьПараметр("Период", ?(Период = Неопределено,Дата(1,1,1),Период));
	Если ДетализироватьДоДокумента Тогда
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"&ПоДаннымОбъектаРасчетовИсточника",
			"Расчеты.ПоДаннымОбъектаРасчетовИсточника КАК ПоДаннымОбъектаРасчетовИсточника,
			|Расчеты.ПорядокОперации КАК ПорядокФакт,
			|Расчеты.ПорядокОперации КАК ПорядокПлан,
			|Расчеты.ПорядокОперации КАК ПорядокОперации,
			|Расчеты.Регистратор КАК Документ");
	Иначе
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"&ПоДаннымОбъектаРасчетовИсточника",
			"Расчеты.ПоДаннымОбъектаРасчетовИсточника КАК ПоДаннымОбъектаРасчетовИсточника");
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

//Для целей сортировки документов в пределах 1 секунды.
// 
// Параметры:
// 	ТипДокумента - Тип - Тип документ, для которого подбирается номер.
// Возвращаемое значение:
// 	Строка - Номер для порядка.
Функция НомерТипа(ТипДокумента) Экспорт
	
	//	При добавлении документа - добавить в конец с новым номером, не меняя типы других документов.
	
	Если ТипДокумента = Тип("ДокументСсылка.РасчетКурсовыхРазниц") ИЛИ ТипДокумента = Тип("ДокументСсылка.РегистраторРасчетов")Тогда
		Тип="99";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		Тип="01";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		Тип="14";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		Тип="16";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Тип="39";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
		Тип="35";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
		Тип="02";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств") Тогда
		Тип="41";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОперацияПоПлатежнойКарте") Тогда
		Тип="22";
	//++ Локализация
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОперацияПоЯндексКассе") Тогда
		Тип="23";
	//-- Локализация
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств") Тогда
		Тип="33";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВводОстатков")
		Или ТипДокумента = Тип("ДокументСсылка.ВводОстатковВзаиморасчетов") Тогда
		Тип="03";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВзаимозачетЗадолженности") Тогда
		Тип="04";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями") Тогда
		Тип="07";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
		Тип="06";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		Тип="07";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВыкупВозвратнойТарыКлиентом") Тогда
		Тип="09";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВыкупВозвратнойТарыУПоставщика") Тогда
		Тип="10";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ГрафикИсполненияДоговора") Тогда
		Тип="12";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
		Тип="17";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
		Тип="18";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.КорректировкаПриобретения") Тогда
		Тип="19";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		Тип="20";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.КорректировкаРегистров") Тогда
		Тип="21";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОтчетКомиссионера") Тогда
		Тип="25";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОтчетКомиссионераОСписании") Тогда
		Тип="26";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОтчетКомитенту") Тогда
		Тип="27";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОтчетКомитентуОСписании") Тогда
		Тип="28";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями") Тогда
		Тип="30";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациямиОСписании") Тогда
		Тип="31";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями") Тогда
		Тип="32";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПриобретениеУслугПрочихАктивов") Тогда
		Тип="36";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		Тип="37";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		Тип="38";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.РеализацияУслугПрочихАктивов") Тогда
		Тип="40";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.КорректировкаЗадолженности") Тогда
		Тип="42";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ТаможеннаяДекларацияИмпорт") Тогда
		Тип="43";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВыкупПринятыхНаХранениеТоваров") Тогда
		Тип="11";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВыкупТоваровХранителем") Тогда
		Тип="45";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОтчетОСписанииТоваровСХранения") Тогда
		Тип="46";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОтчетКомитентуОЗакупках") Тогда
		 Тип="47";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.Бронирование") Тогда
		Тип="49";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.Сторно") Тогда
		Тип="50";
	КонецЕсли;
	
	Если Тип = "" Тогда
		
		ПодробноеПредставлениеОшибки = СтрЗаменить(
			НСтр("ru = 'Не определен порядок распределения типа документа в пределах дня %1.'"),
			"%1",
			ТипДокумента);
			
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Оперативные взаиморасчеты с контрагентами'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки);
			
		ВызватьИсключение ПодробноеПредставлениеОшибки;
		
	Иначе
		Возврат Тип;
	КонецЕсли;
	
КонецФункции

//Возвращает структуру данных реализации для передачи между служебными процедурами.
//
// Возвращаемое значение:
//	Структура - структура данных реализации.
//		* СуммаОстаток для корректировок - при первом упоминании формируется запись с первоначальной суммой, далее из нее вычитаются оплаты и корректировки.
//		* Остальные суммы для расчета среднего курса и, наверное, формирования движений по Суммам документов в валюте регл.
Функция СтруктураСумм(СуммаДокумента = 0, СуммаДокументаРегл = 0, СуммаДокументаУпр = 0)
	СтруктураСумм = Новый Структура;
	СтруктураСумм.Вставить("СуммаДокумента", СуммаДокумента);
	СтруктураСумм.Вставить("СуммаДокументаРегл", СуммаДокументаРегл);
	СтруктураСумм.Вставить("СуммаДокументаУпр", СуммаДокументаУпр);
	Возврат СтруктураСумм;
КонецФункции

//Типы регистраторов, которые двигают план оплат, отгрузок и поставок в приход.
//
// Возвращаемое значение:
// 	СписокЗначений из Тип - Список типов документов, которые двигают только плановые регистры расчетов. Используется для распредедления плановых расчетов.
Функция СписокТиповРегистраторовПланов()
	СписокТиповРегистраторовПланов = Новый СписокЗначений;

	СписокТиповРегистраторовПланов.Добавить(Тип("ДокументСсылка.ЗаказКлиента"));
	СписокТиповРегистраторовПланов.Добавить(Тип("ДокументСсылка.ЗаказПоставщику"));
	СписокТиповРегистраторовПланов.Добавить(Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента"));
	СписокТиповРегистраторовПланов.Добавить(Тип("ДокументСсылка.ГрафикИсполненияДоговора"));
	Возврат СписокТиповРегистраторовПланов;
КонецФункции

//Для данных хоз операций не будет сформирована двойная запись в регистрах расчетов по срокам.
// 
// Возвращаемое значение:
// 	Массив из ПеречислениеСсылка.ХозяйственныеОперации - Массив операций, для которых не нужно делать запись по переносу аванса.
//
Функция ХозяйственныеОперацииНеОтгрузка() Экспорт
	Массив = Новый Массив;
	Массив.Добавить(Перечисления.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.СписаниеДебиторскойЗадолженности);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.НачислениеКредиторскойЗадолженности);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.НачислениеДебиторскойЗадолженности);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.СписаниеБезнадежнойЗадолженностиЗаСчетРезервовПоСомнительнымДолгам);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВозвратТоваровПоставщику);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВозвратТоваровМеждуОрганизациями);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.РезервированиеАвансаКлиента);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиентуНаПлатежнуюКарту);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОплатыНаПлатежнуюКарту);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ОтражениеВозвратаОплатыЧерезКомиссионера);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВозвратБронирования);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ИспользованиеБронированияПодотчетнымЛицом);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВозвратБронированияПодотчетногоЛица);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Массив, ХозяйственныеОперацииПереносаРасчетов());
	
	Возврат Массив;
КонецФункции

//Для данных хоз операций не будет сформирована двойная запись в регистрах расчетов по срокам, а так же будет сохранена исходная хозяйственная операция.
// 
// Возвращаемое значение:
// 	Массив из ПеречислениеСсылка.ХозяйственныеОперации - Массив операций, для которых не нужно делать запись по переносу аванса.
//
Функция ХозяйственныеОперацииПереносаРасчетов()
	Массив = Новый Массив;
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВзаимозачетЗадолженности);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ПереносАванса);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ПереносДолга);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ПереносПлатежаМеждуФилиалами);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ПереносЗадолженностиМеждуФилиалами);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.УдержаниеВознагражденияКомиссионера);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.УдержаниеВознагражденияКомитентом);
	Возврат Массив;
КонецФункции

//По данным хоз. операциям суммы в валюте регламентированного и управленческого учета не будут пересчитаны с учетом авансов.
// 
// Возвращаемое значение:
// 	Массив из ПеречислениеСсылка.ХозяйственныеОперации - Массив непересчитываемых операций.
Функция ХозяйственныеОперацииСРучнымКурсом() Экспорт
	Массив = Новый Массив;
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВзаимозачетЗадолженности);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхДокументовОтПоставщика);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ИспользованиеБронированияПодотчетнымЛицом);
	Возврат Массив;
КонецФункции

//Возвращает движения документов Реализация товаров и услуг с хоз. операцией Товары в пути к движениям,
//пригодным для офлайн взаиморасчетов.
//
Процедура ВернутьДвиженияПоРасчетамСКлиентами()
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	РасчетыСКлиентами.Регистратор                  КАК Регистратор,
	|	МАКСИМУМ(РасчетыСКлиентами.Период)             КАК МаксимальныйПериод
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|ГДЕ
	|	РасчетыСКлиентами.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РезервированиеАвансаКлиента),
	|												ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияОСсОтложеннымПереходомПрав),
	|												ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности))
	|	И ТИПЗНАЧЕНИЯ(РасчетыСКлиентами.Регистратор) В (ТИП(Документ.РеализацияТоваровУслуг),
	|													ТИП(Документ.РеализацияУслугПрочихАктивов))
	|	И РасчетыСКлиентами.Сумма <> 0
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСКлиентами.Регистратор
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РасчетыСКлиентами.Период) > 1");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыНакопления.РасчетыСКлиентами.СоздатьНаборЗаписей();
		НаборЗаписей.ОбменДанными.Загрузка = ИСТИНА;
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.Прочитать();
		Для Каждого Запись Из НаборЗаписей Цикл
			Если Запись.Сумма <> 0 Тогда
				Запись.Период = Выборка.МаксимальныйПериод;
			КонецЕсли;
		КонецЦикла;
		НаборЗаписей.Записать();
	КонецЦикла;
КонецПроцедуры

//Количество одновременно записываемых записей регистров под одним служебным документом регистратором.
Функция РазмерПорцииЗаписи()
	Возврат 1000;
КонецФункции

Процедура ЗаписатьПорционно(ГлобальныеПеременные, ТаблицаЗаписей, НаборЗаписей) 
	
	ИмяРегистра = НаборЗаписей.Метаданные().Имя;
	
	Для Каждого РегистраторРасчетов Из ГлобальныеПеременные["МассивЗадействованныхРегистраторов"+ИмяРегистра] Цикл
		
		НаборЗаписей.Отбор.Регистратор.Установить(РегистраторРасчетов);
		НаборЗаписей.Загрузить(ТаблицаЗаписей.Скопировать(Новый Структура("Регистратор", РегистраторРасчетов)));
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
	Для Каждого СтрокаСвободныхРегистраторов Из ГлобальныеПеременные["МассивСвободныхРегистраторов"+ИмяРегистра] Цикл
		
		Если СтрокаСвободныхРегистраторов.ТребуетсяОчистка Тогда
			ТекущийРегистратор = СтрокаСвободныхРегистраторов.Ссылка; //ДокументСсылка.РегистраторРасчетов
			НаборЗаписей.Отбор.Регистратор.Установить(ТекущийРегистратор);
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодготовитьДанныеДляЗаписи(ГлобальныеПеременные, ТаблицаЗаписей, НаборЗаписей, ТаблицаСвободныхРегистраторов)
	РазмерПорцииЗаписи = РазмерПорцииЗаписи();
	ИмяРегистра = НаборЗаписей.Метаданные().Имя;
	
	МассивСвободныхРегистраторов = СвободныеРегистраторыРасчетов(ГлобальныеПеременные, ИмяРегистра, ТаблицаЗаписей.Количество(), ТаблицаСвободныхРегистраторов);
	МассивЗадействованныхРегистраторов = Новый Массив;
	
	Если МассивСвободныхРегистраторов.Количество() > 0 Тогда
		
		счСтрок = 1;
		счРегистраторов = 0;
		
		МассивСвободныхРегистраторов[счРегистраторов].ТребуетсяОчистка = Ложь;
		МассивЗадействованныхРегистраторов.Добавить(МассивСвободныхРегистраторов[счРегистраторов].Ссылка);
		
		Для Каждого Строка Из ТаблицаЗаписей Цикл
			Если ТипЗнч(Строка.ДокументРегистратор) = Тип("ДокументСсылка.КорректировкаРегистров") Тогда
				Продолжить;
			КонецЕсли;
			Если счСтрок > РазмерПорцииЗаписи Тогда
				счСтрок = 1;
				счРегистраторов = счРегистраторов + 1;
				МассивСвободныхРегистраторов[счРегистраторов].ТребуетсяОчистка = Ложь;
				МассивЗадействованныхРегистраторов.Добавить(МассивСвободныхРегистраторов[счРегистраторов].Ссылка);
			КонецЕсли;
			Строка.Регистратор = МассивСвободныхРегистраторов[счРегистраторов].Ссылка;
			
			счСтрок = счСтрок + 1;
		КонецЦикла;
		
	КонецЕсли;
	
	ГлобальныеПеременные.Вставить("МассивСвободныхРегистраторов" + ИмяРегистра, МассивСвободныхРегистраторов);
	ГлобальныеПеременные.Вставить("МассивЗадействованныхРегистраторов" + ИмяРегистра, МассивЗадействованныхРегистраторов);
КонецПроцедуры

// Находит неиспользуемые регистраторы расчетов и удаляет их
//
// Параметры:
//   Запрос - Запрос - Запрос с установленными параметрами.
//   ИмяРегистраРасчетов - Строка.
//   ИмяРегистраПланаОплат - Строка.
//   ИмяРегистраПланаОтгрузкиПоставки - Строка.
//
Процедура УдалитьНеиспользуемыеРегистраторыРасчетов(Запрос, ИмяРегистраРасчетов, ИмяРегистраПланаОплат, ИмяРегистраПланаОтгрузкиПоставки)
	
	Запрос.Текст = "
	|
	|ВЫБРАТЬ
	|	РегистраторРасчетов.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РегистраторРасчетов КАК РегистраторРасчетов
	|ГДЕ            
	|	РегистраторРасчетов.ОбъектРасчетов              = &ОбъектРасчетов
	|	И РегистраторРасчетов.АналитикаУчетаПоПартнерам = &АналитикаУчетаПоПартнерам
	|	И РегистраторРасчетов.Валюта                    = &ВалютаРасчетов
	|	И РегистраторРасчетов.ТипРасчетов               = &ТипРасчетов
	|	И НЕ ИСТИНА В (
	|		ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			&ТаблицаПланаОплат КАК РасчетыПланОплат
	|		ГДЕ
	|			РасчетыПланОплат.Регистратор = РегистраторРасчетов.Ссылка
	|	)
	|	И НЕ ИСТИНА В (
	|		ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			&ТаблицаПланаОтгрузкиПоставки КАК РасчетыПланОтгрузокПоставок
	|		ГДЕ
	|			РасчетыПланОтгрузокПоставок.Регистратор = РегистраторРасчетов.Ссылка
	|	)
	|	И НЕ ИСТИНА В (
	|		ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			&ТаблицаРасчетов КАК РасчетыПоСрокам
	|		ГДЕ
	|			РасчетыПоСрокам.Регистратор = РегистраторРасчетов.Ссылка
	|	)
	|	
	|";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ТаблицаРасчетов", "РегистрНакопления." + ИмяРегистраРасчетов);
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ТаблицаПланаОтгрузкиПоставки", "РегистрНакопления." + ИмяРегистраПланаОтгрузкиПоставки);
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ТаблицаПланаОплат", "РегистрНакопления." + ИмяРегистраПланаОплат);
	
	ВыборкаДокументов = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДокументов.Следующий() Цикл
		ДокументОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект(); // ДокументОбъект.РегистраторРасчетов
		ДокументОбъект.Удалить();
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьВсе(ПараметрыВыполнения, АдресХранилища) Экспорт
	
	РаспределениеВзаиморасчетовВызовСервера.РаспределитьВсеРасчетыСКлиентами(ПараметрыВыполнения.ОкончаниеПериодаРасчета, Неопределено);
	РаспределениеВзаиморасчетовВызовСервера.РаспределитьВсеРасчетыСПоставщиками(ПараметрыВыполнения.ОкончаниеПериодаРасчета, Неопределено);
	
КонецПроцедуры

// Находит по указанным параметрам корректировки регистров, очищает их и возвращает новую корректировку.
//
// Параметры:
//   ПериодКорректировки - Дата - Все корректировки позже этой даты будут очищены, а с равной датой еще и удалены.
//   Организация - СправочникСсылка.Организации.
//   Операция - ПеречислениеСсылка.ОперацииКорректировкиРегистров.
//
// Возвращаемое значение:
//   ДокументОбъект.КорректировкаРегистров - Пустой документ корректировки, с заполненными реквизитами.
//
Функция КорректировкаРегистров(ПериодКорректировки, Организация, Операция) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	КорректировкаРегистров.Ссылка КАК Ссылка,
	|	КорректировкаРегистров.Дата КАК Дата
	|ИЗ
	|	Документ.КорректировкаРегистров КАК КорректировкаРегистров
	|ГДЕ
	|	КорректировкаРегистров.Дата >= &Дата
	|	И КорректировкаРегистров.Операция = &Операция
	|	И КорректировкаРегистров.Организация = &Организация
	|УПОРЯДОЧИТЬ ПО
	|	КорректировкаРегистров.Дата ВОЗР";
	Запрос.УстановитьПараметр("Дата", КонецМесяца(ПериодКорректировки));
	Запрос.УстановитьПараметр("Операция", Операция);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	КорректировкаОбъект = Неопределено;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект(); // ДокументОбъект.КорректировкаРегистров
		Для Каждого Регистр Из ДокументОбъект.ТаблицаРегистров Цикл
			Движения = ДокументОбъект.Движения[Регистр.Имя]; // РегистрНакопленияНаборЗаписей
			Движения.Записать();
		КонецЦикла;
		
		Если Выборка.Дата = КонецМесяца(ПериодКорректировки) Тогда
			КорректировкаОбъект = ДокументОбъект;
			КорректировкаОбъект.УстановитьПометкуУдаления(Ложь);
		Иначе
			ДокументОбъект.Удалить();
		КонецЕсли;
		
	КонецЦикла;
	
	Если КорректировкаОбъект = Неопределено Тогда
		КорректировкаОбъект = Документы.КорректировкаРегистров.СоздатьДокумент();
		КорректировкаОбъект.Дата        = ПериодКорректировки;
		КорректировкаОбъект.Операция    = Операция;
		КорректировкаОбъект.Организация = Организация;
		КорректировкаОбъект.УстановитьСсылкуНового(Документы.КорректировкаРегистров.ПолучитьСсылку());
		
		НовСтр = КорректировкаОбъект.ТаблицаРегистров.Добавить();
		НовСтр.Имя = "РасчетыСКлиентамиПоСрокам";
		НовСтр = КорректировкаОбъект.ТаблицаРегистров.Добавить();
		НовСтр.Имя = "РасчетыСПоставщикамиПоСрокам";
		
		КорректировкаОбъект.Записать();
	КонецЕсли;
	
	Возврат КорректировкаОбъект;
	
КонецФункции

Процедура УдалитьСистемныеКорректировкиРегистров(ДатаПересчета, Организация = Неопределено, Операция = Неопределено, Контрагент = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	КорректировкаРегистров.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.КорректировкаРегистров КАК КорректировкаРегистров
	|ГДЕ
	|	КорректировкаРегистров.Дата >= &Дата
	|	И (КорректировкаРегистров.Организация = &Организация ИЛИ &ПоВсемОрганизациям)
	|	И КорректировкаРегистров.Операция В (&Операции)
	|	И &ПоВсемКонтрагентам
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК Расчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК КлючАналитики
	|			ПО КлючАналитики.Ссылка = Расчеты.АналитикаУчетаПоПартнерам
	|ГДЕ
	|	Расчеты.Период >= &Дата
	|	И КлючАналитики.Контрагент = &Контрагент
	|	И (КлючАналитики.Организация = &Организация ИЛИ &ПоВсемОрганизациям)
	|	И НЕ &ПоВсемКонтрагентам
	|	И Расчеты.Регистратор ССЫЛКА Документ.КорректировкаРегистров
	|	И ВЫРАЗИТЬ(Расчеты.Регистратор КАК Документ.КорректировкаРегистров).Операция В (&Операции)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК Расчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК КлючАналитики
	|			ПО КлючАналитики.Ссылка = Расчеты.АналитикаУчетаПоПартнерам
	|ГДЕ
	|	Расчеты.Период >= &Дата
	|	И КлючАналитики.Контрагент = &Контрагент
	|	И (КлючАналитики.Организация = &Организация ИЛИ &ПоВсемОрганизациям)
	|	И НЕ &ПоВсемКонтрагентам
	|	И Расчеты.Регистратор ССЫЛКА Документ.КорректировкаРегистров
	|	И ВЫРАЗИТЬ(Расчеты.Регистратор КАК Документ.КорректировкаРегистров).Операция В (&Операции)
	|
	|;
	|
	|ВЫБРАТЬ
	|	КлючиАналитикиУчетаПоПартнерам.Ссылка КАК АналитикаУчетаПоПартнерам
	|ИЗ
	|	Справочник.КлючиАналитикиУчетаПоПартнерам КАК КлючиАналитикиУчетаПоПартнерам
	|ГДЕ
	|	(КлючиАналитикиУчетаПоПартнерам.Организация = &Организация ИЛИ &ПоВсемОрганизациям)
	|	И КлючиАналитикиУчетаПоПартнерам.Контрагент = &Контрагент
	|	И НЕ &ПоВсемКонтрагентам";
	Запрос.УстановитьПараметр("Дата", НачалоДня(ДатаПересчета));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", Организация = Неопределено);
	Запрос.УстановитьПараметр("ПоВсемКонтрагентам", Контрагент = Неопределено);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Операции = Новый Массив;
	Если ЗначениеЗаполнено(Операция) Тогда
		Операции.Добавить(Операция);
	Иначе
		Операции.Добавить(Перечисления.ОперацииКорректировкиРегистров.ИсправлениеРазрывовОстатковВзаиморасчетов);
		Операции.Добавить(Перечисления.ОперацииКорректировкиРегистров.ИсправлениеРазвернутогоСальдоВзаиморасчетов);
	КонецЕсли;
	Запрос.УстановитьПараметр("Операции", Операции);
	
	Результат = Запрос.ВыполнитьПакет();
	Выборка = Результат[0].Выбрать();
	ТаблицаАналитик = Результат[1].Выгрузить();
	ТаблицаАналитик.Индексы.Добавить("АналитикаУчетаПоПартнерам");
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект(); // ДокументОбъект.КорректировкаРегистров
		
		Для Каждого Регистр Из ДокументОбъект.ТаблицаРегистров Цикл
			Движения = ДокументОбъект.Движения[Регистр.Имя]; // РегистрНакопленияНаборЗаписей
			Если ЗначениеЗаполнено(Контрагент) 
				И (Регистр.Имя = Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоСрокам.Имя 
					Или Регистр.Имя = Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.Имя) Тогда
					Движения.Прочитать();
					Счетчик = Движения.Количество();
					Пока Счетчик > 0 Цикл
						Счетчик = Счетчик - 1;
						Если ТаблицаАналитик.Найти(Движения[Счетчик].АналитикаУчетаПоПартнерам) <> Неопределено Тогда
							Движения.Удалить(Счетчик);
						КонецЕсли;
					КонецЦикла;
					
			КонецЕсли;
			Движения.Записать();
		КонецЦикла;
		
		Если ДокументОбъект.Движения.РасчетыСКлиентамиПоСрокам.Количество() = 0 
			И ДокументОбъект.Движения.РасчетыСПоставщикамиПоСрокам.Количество() = 0 Тогда
			ДокументОбъект.Удалить();
		Иначе
			ДополнитьКорректировкуДвижениямиПоПрочимДоходамРасходам(ДокументОбъект);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТаблицаИзмененийДляПересчета(МенеджерВременныхТаблиц, Регистратор) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТипРегистратора", ТипЗнч(Регистратор));
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.ТипРасчетов                      КАК ТипРасчетов,
	|	ВложенныйЗапрос.АналитикаУчетаПоПартнерам        КАК АналитикаУчетаПоПартнерам,
	|	ВложенныйЗапрос.ОбъектРасчетов                   КАК ОбъектРасчетов,
	|	ВложенныйЗапрос.ВалютаРасчетов                   КАК ВалютаРасчетов,
	|	ВложенныйЗапрос.АналитикаУчетаПоПартнерамПриемник КАК АналитикаУчетаПоПартнерамПриемник,
	|	ВложенныйЗапрос.ОбъектРасчетовПриемник           КАК ОбъектРасчетовПриемник,
	|	ВложенныйЗапрос.ВалютаПриемник                   КАК ВалютаПриемник,
	|	ВложенныйЗапрос.Документ                         КАК Документ,
	|	ВложенныйЗапрос.ПоДаннымОбъектаРасчетовИсточника КАК ПоДаннымОбъектаРасчетовИсточника,
	|	МИНИМУМ(ВложенныйЗапрос.ПорядокФакт)             КАК ПорядокФакт,
	|	МИНИМУМ(ВложенныйЗапрос.ПорядокПлан)             КАК ПорядокПлан,
	|	МИНИМУМ(ВложенныйЗапрос.ПорядокОперации)         КАК ПорядокОперации
	|ИЗ 
	|	&ТаблицаИзменений КАК ВложенныйЗапрос
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.ТипРасчетов,
	|	ВложенныйЗапрос.АналитикаУчетаПоПартнерам,
	|	ВложенныйЗапрос.ОбъектРасчетов,
	|	ВложенныйЗапрос.АналитикаУчетаПоПартнерамПриемник,
	|	ВложенныйЗапрос.ОбъектРасчетовПриемник,
	|	ВложенныйЗапрос.ВалютаПриемник,
	|	ВложенныйЗапрос.ВалютаРасчетов,
	|	ВложенныйЗапрос.Документ,
	|	ВложенныйЗапрос.ПоДаннымОбъектаРасчетовИсточника
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.ПоДаннымОбъектаРасчетовИсточника ВОЗР
	|";
	
	ТекстыВложенногоЗапроса = Новый Массив;
	Если МенеджерВременныхТаблиц.Таблицы.Найти("РасчетыСКлиентамиИзменения") <> Неопределено Тогда
		
		ТекстыВложенногоЗапроса.Добавить("
		|	ВЫБРАТЬ
		|		ВЫБОР 
		|			КОГДА &ТипРегистратора = ТИП(Документ.ВводОстатков)
		|				ИЛИ &ТипРегистратора = ТИП(Документ.ВводОстатковВзаиморасчетов)
		|				ТОГДА """"
		|			КОГДА (Изменения.Сумма <> 0 ИЛИ Изменения.СуммаРегл <> 0 ИЛИ Изменения.СуммаУпр<> 0 ИЛИ Изменения.КОтгрузке<> 0)
		|				ТОГДА Изменения.ПорядокФакт
		|			ИНАЧЕ ""30000101""
		|		КОНЕЦ                                                                           КАК ПорядокФакт,
		|		ВЫБОР 
		|			КОГДА &ТипРегистратора = ТИП(Документ.ВводОстатков)
		|				ИЛИ &ТипРегистратора = ТИП(Документ.ВводОстатковВзаиморасчетов)
		|				ТОГДА """"
		|			КОГДА (Изменения.Сумма <> 0 ИЛИ Изменения.СуммаРегл <> 0 ИЛИ Изменения.СуммаУпр<> 0 ИЛИ Изменения.КОтгрузке<> 0)
		|				ТОГДА Изменения.ПорядокОперации
		|			ИНАЧЕ ""30000101""
		|		КОНЕЦ                                                                           КАК ПорядокОперации,
		|		Изменения.ПорядокФакт                                                           КАК ПорядокПлан,
		|		Изменения.АналитикаУчетаПоПартнерам                                             КАК АналитикаУчетаПоПартнерам,
		|		Изменения.ОбъектРасчетов                                                        КАК ОбъектРасчетов,
		|		Изменения.АналитикаУчетаПоПартнерамПриемник                                     КАК АналитикаУчетаПоПартнерамПриемник,
		|		Изменения.ОбъектРасчетовПриемник                                                КАК ОбъектРасчетовПриемник,
		|		Изменения.ВалютаПриемник                                                        КАК ВалютаПриемник,
		|		Изменения.Документ                                                              КАК Документ,
		|		ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)                 КАК ТипРасчетов,
		|		Изменения.ПоДаннымОбъектаРасчетовИсточника                                      КАК ПоДаннымОбъектаРасчетовИсточника,
		|		Изменения.ВалютаРасчетов                                                        КАК ВалютаРасчетов
		|	ИЗ
		|		РасчетыСКлиентамиИзменения КАК Изменения
		|	ГДЕ
		|		Изменения.Сумма <> 0 ИЛИ Изменения.СуммаРегл <> 0 ИЛИ Изменения.СуммаУпр<> 0 ИЛИ Изменения.КОплате <> 0 ИЛИ Изменения.КОтгрузке <> 0
		|
		|");
		
	КонецЕсли;
	
	Если МенеджерВременныхТаблиц.Таблицы.Найти("РасчетыСКлиентамиИзменения") <> Неопределено
		И МенеджерВременныхТаблиц.Таблицы.Найти("РасчетыСПоставщикамиИзменения") <> Неопределено Тогда
		ТекстыВложенногоЗапроса.Добавить("
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|");
	КонецЕсли;
	
	Если МенеджерВременныхТаблиц.Таблицы.Найти("РасчетыСПоставщикамиИзменения") <> Неопределено Тогда
		
		ТекстыВложенногоЗапроса.Добавить("
		|	ВЫБРАТЬ
		|		ВЫБОР 
		|			КОГДА &ТипРегистратора = ТИП(Документ.ВводОстатков)
		|				ИЛИ &ТипРегистратора = ТИП(Документ.ВводОстатковВзаиморасчетов)
		|				ТОГДА """"
		|			КОГДА (Изменения.Сумма <> 0 ИЛИ Изменения.СуммаРегл <> 0 ИЛИ Изменения.СуммаУпр<> 0 ИЛИ Изменения.КПоступлению<> 0)
		|				ТОГДА Изменения.ПорядокФакт
		|			ИНАЧЕ ""30000101""
		|		КОНЕЦ                                                                           КАК ПорядокФакт,
		|		ВЫБОР 
		|			КОГДА &ТипРегистратора = ТИП(Документ.ВводОстатков)
		|				ИЛИ &ТипРегистратора = ТИП(Документ.ВводОстатковВзаиморасчетов)
		|				ТОГДА """"
		|			КОГДА (Изменения.Сумма <> 0 ИЛИ Изменения.СуммаРегл <> 0 ИЛИ Изменения.СуммаУпр<> 0 ИЛИ Изменения.КПоступлению<> 0)
		|				ТОГДА Изменения.ПорядокОперации
		|			ИНАЧЕ ""30000101""
		|		КОНЕЦ                                                                           КАК ПорядокОперации,
		|		Изменения.ПорядокФакт                                                           КАК ПорядокПлан,
		|		Изменения.АналитикаУчетаПоПартнерам                                             КАК АналитикаУчетаПоПартнерам,
		|		Изменения.ОбъектРасчетов                                                        КАК ОбъектРасчетов,
		|		Изменения.АналитикаУчетаПоПартнерамПриемник                                     КАК АналитикаУчетаПоПартнерамПриемник,
		|		Изменения.ОбъектРасчетовПриемник                                                КАК ОбъектРасчетовПриемник,
		|		Изменения.ВалютаПриемник                                                        КАК ВалютаПриемник,
		|		Изменения.Документ                                                              КАК Документ,
		|		ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)              КАК ТипРасчетов,
		|		Изменения.ПоДаннымОбъектаРасчетовИсточника                                      КАК ПоДаннымОбъектаРасчетовИсточника,
		|		Изменения.ВалютаРасчетов                                                        КАК ВалютаРасчетов
		|	ИЗ
		|		РасчетыСПоставщикамиИзменения КАК Изменения
		|	ГДЕ
		|		Изменения.Сумма <> 0 ИЛИ Изменения.СуммаРегл <> 0 ИЛИ Изменения.СуммаУпр<> 0 ИЛИ Изменения.КОплате <> 0 ИЛИ Изменения.КПоступлению <> 0
		|
		|");
		
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТаблицаИзменений", СтрШаблон("(%1)", СтрСоединить(ТекстыВложенногоЗапроса)));
	
	ТаблицаИзменений = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаИзменений;
	
КонецФункции

Процедура ОтключитьИтогиРегистровРасчетов()
	
	РегистрыНакопления.РасчетыСКлиентамиПланОплат.УстановитьИспользованиеИтогов(Ложь);
	РегистрыНакопления.РасчетыСКлиентамиПланОтгрузок.УстановитьИспользованиеИтогов(Ложь);
	РегистрыНакопления.РасчетыСКлиентамиПоСрокам.УстановитьИспользованиеИтогов(Ложь);
	РегистрыНакопления.РасчетыСПоставщикамиПланОплат.УстановитьИспользованиеИтогов(Ложь);
	РегистрыНакопления.РасчетыСПоставщикамиПланПоставок.УстановитьИспользованиеИтогов(Ложь);
	РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.УстановитьИспользованиеИтогов(Ложь);
	
КонецПроцедуры

Процедура ВключитьИтогиРегистровРасчетов()
	
	РегистрыНакопления.РасчетыСКлиентамиПланОплат.УстановитьИспользованиеИтогов(Истина);
	РегистрыНакопления.РасчетыСКлиентамиПланОтгрузок.УстановитьИспользованиеИтогов(Истина);
	РегистрыНакопления.РасчетыСКлиентамиПоСрокам.УстановитьИспользованиеИтогов(Истина);
	РегистрыНакопления.РасчетыСПоставщикамиПланОплат.УстановитьИспользованиеИтогов(Истина);
	РегистрыНакопления.РасчетыСПоставщикамиПланПоставок.УстановитьИспользованиеИтогов(Истина);
	РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.УстановитьИспользованиеИтогов(Истина);
	
	РегистрыНакопления.РасчетыСКлиентамиПланОплат.ПересчитатьИтоги();
	РегистрыНакопления.РасчетыСКлиентамиПланОтгрузок.ПересчитатьИтоги();
	РегистрыНакопления.РасчетыСКлиентамиПоСрокам.ПересчитатьИтоги();
	РегистрыНакопления.РасчетыСПоставщикамиПланОплат.ПересчитатьИтоги();
	РегистрыНакопления.РасчетыСПоставщикамиПланПоставок.ПересчитатьИтоги();
	РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.ПересчитатьИтоги();
	
КонецПроцедуры

#Область РасчетКурсовыхРазниц

// Возвращает структуру параметров необходимых для регистрации документа к отложенному распределению расчетов.
// 
// Возвращаемое значение:
// 	Структура - Описание:
//  *ЭтоРасчетыСКлиентами - Булево - Истина если это расчеты с клиентами.
//  *ПереоценкаПоДням - Булево - Истина если необходимо переоценивать каждый день, иначе только по дням оплаты.
//  *ПерезаполнениеРегистровНУ - Булево - Истина если выполняется расчет курсовых по НУ.
//
Функция ПараметрыПереоценки(ЭтоРасчетыСКлиентами = Неопределено, ПереоценкаПоДням = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ЭтоРасчетыСКлиентами", ЭтоРасчетыСКлиентами);
	Результат.Вставить("ПереоценкаПоДням", ПереоценкаПоДням);
	Если ПереоценкаПоДням = Неопределено Тогда
		Результат.Вставить("ПереоценкаПоДням", Константы.ПереоцениватьВалютныеСредстваПоДням.Получить());
	КонецЕсли;
	Результат.Вставить("ПерезаполнениеРегистровНУ", Ложь);

	Возврат Результат;
	
КонецФункции

Функция УдалитьКурсовыеРазницыЗаДень(Период, НаборЗаписей)
	
	Индекс = 0;
	БылоУдаление = Ложь;
	Пока Индекс < НаборЗаписей.Количество() Цикл
		Запись = НаборЗаписей[Индекс];
		Если НачалоДня(Запись.Период) = НачалоДня(Период)
			И ТипЗнч(Запись.ДокументРегистратор) = Тип("ДокументСсылка.РасчетКурсовыхРазниц") Тогда
			НаборЗаписей.Удалить(Запись);
			БылоУдаление = Истина;
			Продолжить;
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Возврат БылоУдаление;
	
КонецФункции

Функция ДниПереоценки(МассивОрганизаций, НачалоПериода, КонецПериода, Параметры)
	
	#Область ТекстЗапроса
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.Валюта КАК Валюта,
	|	НАЧАЛОПЕРИОДА(Расчеты.Период, ДЕНЬ) КАК Период
	|ПОМЕСТИТЬ втОборотыВалюты
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК Расчеты
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК КлючиАналитикиУчетаПоПартнерам
	|		ПО Расчеты.АналитикаУчетаПоПартнерам = КлючиАналитикиУчетаПоПартнерам.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО КлючиАналитикиУчетаПоПартнерам.Организация = Организации.Ссылка
	|ГДЕ
	|	Расчеты.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Организации.Ссылка В (&Организации)
	|	И (Расчеты.Валюта <> &ВалютаУправленческогоУчета ИЛИ Расчеты.Валюта <> Организации.ВалютаРегламентированногоУчета)
	|	И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И Расчеты.Долг <> 0
	|;";
	Если НЕ Параметры.ЭтоРасчетыСКлиентами Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
				Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоСрокам.ПолноеИмя(),
				Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.ПолноеИмя());
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втОборотыВалюты.Период КАК Дата
	|ИЗ
	|	втОборотыВалюты КАК втОборотыВалюты
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КурсыВалют.Период
	|ИЗ
	|	РегистрСведений.ОтносительныеКурсыВалют КАК КурсыВалют
	|ГДЕ
	|	КурсыВалют.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И &ПереоценкаПоДням
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(&КонецПериода, ДЕНЬ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	#КонецОбласти
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода",  КонецДня(КонецПериода));
	Запрос.УстановитьПараметр("Организации",   МассивОрганизаций);
	Запрос.УстановитьПараметр("ВалютаУправленческогоУчета",  Константы.ВалютаУправленческогоУчета.Получить());
	Запрос.УстановитьПараметр("ПереоценкаПоДням",  Параметры.ПереоценкаПоДням);
	
	Выборка = Запрос.Выполнить().Выгрузить();
	
	Возврат Выборка;
	
КонецФункции

Функция РегистраторыКурсовыхРазниц(Параметры, РегистраторыРасчетов, КоличествоЗаписей)
	
	Если КоличествоЗаписей = 0 Тогда
		КоличествоРегистраторов = 0;
	Иначе
		КоличествоРегистраторов = Цел(КоличествоЗаписей/РазмерПорцииЗаписи()) + 1;
	КонецЕсли;
	
	Отбор = Новый Структура("ОбъектРасчетов,АналитикаУчетаПоПартнерам,ВалютаРасчетов,ЭтоРасчетыСКлиентами");
	ЗаполнитьЗначенияСвойств(Отбор, Параметры);
	
	ТипРасчетов = ?(Параметры.ЭтоРасчетыСКлиентами, Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом, Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком);
	ТаблицаДокументов = РегистраторыРасчетов.Скопировать(Отбор); // см.СвободныеРегистраторыРасчетов
	
	Пока ТаблицаДокументов.Количество() < КоличествоРегистраторов Цикл
		ДокументОбъект = Документы.РегистраторРасчетов.СоздатьДокумент();
		ДокументОбъект.Валюта = Параметры.ВалютаРасчетов;
		ДокументОбъект.АналитикаУчетаПоПартнерам = Параметры.АналитикаУчетаПоПартнерам;
		ДокументОбъект.Организация = ?(Параметры.Организация = Неопределено,
										ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.АналитикаУчетаПоПартнерам, "Организация"),
										Параметры.Организация);
		ДокументОбъект.ОбъектРасчетов = Параметры.ОбъектРасчетов;
		ДокументОбъект.ТипРасчетов = ТипРасчетов;
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		НовСтр = ТаблицаДокументов.Добавить();
		НовСтр.Ссылка = ДокументОбъект.Ссылка;
	КонецЦикла;
	
	Возврат ТаблицаДокументов;
	
КонецФункции

#КонецОбласти

Функция СуммаСписания(Курс, СуммаВВалюте, СуммаВзаиморасчетов, СуммаКСписанию) Экспорт
	
	Если СуммаКСписанию = СуммаВзаиморасчетов Тогда
		Возврат СуммаВВалюте;
	ИначеЕсли СуммаВВалюте = 0 Или СуммаВзаиморасчетов = 0 Тогда
		Возврат 0;
	Иначе
		Если Курс = 0 Тогда
			Если СуммаВВалюте > СуммаВзаиморасчетов Тогда
				Возврат Окр(СуммаВВалюте / СуммаВзаиморасчетов * СуммаКСписанию, 2);
			Иначе
				Возврат Окр(СуммаКСписанию / (СуммаВзаиморасчетов/СуммаВВалюте), 2);
			КонецЕсли;
		Иначе
			Возврат Окр(Курс * СуммаКСписанию,2);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Процедура ИспользоватьРегламентноеЗаданиеФактическоеРаспределение(Включить)
	
	Отбор = Новый Структура();
	Отбор.Вставить("Метаданные", "РаспределениеФактическихВзаиморасчетов");
	Задания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	Если Задания.Количество() = 1 Тогда
		Параметры = Новый Структура();
		Параметры.Вставить("Использование", Включить);
		РегламентныеЗаданияСервер.ИзменитьЗадание(Задания[0].УникальныйИдентификатор, Параметры);
	КонецЕсли;
	
КонецПроцедуры

Функция ИмяМетодаОтложенногоРаспределенияВзаиморасчетов()
	Возврат "ОперативныеВзаиморасчетыСервер.ВыполнитьФоновоеРаспределениеРасчетов";
КонецФункции

Процедура СоздатьТаблицуДатЗаПериод(МенеджерВременныхТаблиц, ИмяВременнойТаблицы, ДатаНачала, ДатаОкончания)
	
	Если НЕ ЗначениеЗаполнено(ДатаНачала) ИЛИ ДатаНачала<Дата(1980,1,1) Тогда
		ВызватьИсключение(НСтр("ru = 'Не заполнена дата начала границы курсов.'"));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ 0 КАК Шаг
	|ПОМЕСТИТЬ ТаблицаИсходныхЦифр
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ 1
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ 2
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ 3
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ 4
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ 5
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ 6
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ 7
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ 8
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ 9
	|ИНДЕКСИРОВАТЬ ПО
	|	Шаг
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаИсходныхЦифр1.Шаг * 1000 + ТаблицаИсходныхЦифр2.Шаг * 100 + ТаблицаИсходныхЦифр3.Шаг * 10 + ТаблицаИсходныхЦифр4.Шаг КАК Счетчик
	|ПОМЕСТИТЬ ТаблицаСчетчик
	|ИЗ
	|	ТаблицаИсходныхЦифр КАК ТаблицаИсходныхЦифр1,
	|	ТаблицаИсходныхЦифр КАК ТаблицаИсходныхЦифр2,
	|	ТаблицаИсходныхЦифр КАК ТаблицаИсходныхЦифр3,
	|	ТаблицаИсходныхЦифр КАК ТаблицаИсходныхЦифр4
	|ГДЕ
	|	(ТаблицаИсходныхЦифр1.Шаг * 1000 + ТаблицаИсходныхЦифр2.Шаг * 100 + ТаблицаИсходныхЦифр3.Шаг * 10 + ТаблицаИсходныхЦифр4.Шаг) <= РАЗНОСТЬДАТ(&ДатаНачала,&ДатаОкончания,ДЕНЬ)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДОБАВИТЬКДАТЕ(&ДатаНачала, ДЕНЬ, ТаблицаСчетчик.Счетчик) КАК Дата
	|ПОМЕСТИТЬ ИмяВТ
	|ИЗ
	|	ТаблицаСчетчик КАК ТаблицаСчетчик
	|ИНДЕКСИРОВАТЬ ПО
	|	Дата
	|";
	
	Запрос.УстановитьПараметр("ДатаНачала",НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания",НачалоДня(ДатаОкончания));
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"ИмяВТ",ИмяВременнойТаблицы);
	Запрос.Выполнить();
	
КонецПроцедуры

// Таблица основных параметров расчета.
// 
// Параметры:
//  ПараметрыРасчета - Неопределено, Структура, ТаблицаЗначений - Параметры расчета:
// * ОбъектРасчетов - СправочникСсылка.ОбъектыРасчетов 
// * АналитикаУчетаПоПартнерам - СправочникСсылка.КлючиАналитикиУчетаПоПартнерам 
// * ВалютаРасчетов - СправочникСсылка.Валюты 
// * ЭтоРасчетыСКлиентами - Булево 
// * ПорядокФакт - Строка
// * ПорядокПлан - Строка
// * НачальноеЗаполнение - Булево
// * Регистратор - ДокументСсылка
// * ДополнительныеСвойстваПроведения - Структура
// * ЗаписыватьИзменения - Булево
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица основных параметров расчета:
// * ТипРасчетов - ПеречислениеСсылка.ТипыРасчетовСПартнерами 
// * АналитикаУчетаПоПартнерам - СправочникСсылка.КлючиАналитикиУчетаПоПартнерам
// * ОбъектРасчетов - СправочникСсылка.ОбъектыРасчетов
// * ВалютаРасчетов - СправочникСсылка.Валюты
// * ПорядокФакт - Строка
// * ПорядокПлан - Строка
// * ЭтоРасчетыСКлиентами - Булево
// * НачальноеЗаполнение - Булево
// * Регистратор - ДокументСсылка
// * ЗаписыватьИзменения - Булево
// * ФиксированныйКурсНакладной - Булево
// * ФиксированныйКурсРегл - Булево
// * ФиксированныйКурсУпр - Булево
// * ГрафикВДоговоре - Булево
// * РассчитыватьПлан - Булево
// * РассчитыватьФакт - Булево
// * Порядок - Строка
// * НачалоДняПорядка - Дата
// * НачалоДняПорядкаФакт - Дата
// * ДатаПереоценки - Дата
//
Функция ТаблицаОсновныхПараметровРасчета(ПараметрыРасчета = Неопределено)
	
	Если Не ПараметрыРасчета = Неопределено И ТипЗнч(ПараметрыРасчета) = Тип("ТаблицаЗначений") Тогда
		Возврат ПараметрыРасчета;
	КонецЕсли;
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ТипРасчетов", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыРасчетовСПартнерами"));
	Таблица.Колонки.Добавить("АналитикаУчетаПоПартнерам", Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиУчетаПоПартнерам"));
	Таблица.Колонки.Добавить("ОбъектРасчетов", Новый ОписаниеТипов("СправочникСсылка.ОбъектыРасчетов"));
	Таблица.Колонки.Добавить("ВалютаРасчетов", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	Таблица.Колонки.Добавить("ПорядокФакт", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	Таблица.Колонки.Добавить("ПорядокПлан", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	Таблица.Колонки.Добавить("ЭтоРасчетыСКлиентами", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("НачальноеЗаполнение", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("Регистратор", Документы.ТипВсеСсылки());
	Таблица.Колонки.Добавить("ЗаписыватьИзменения", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("ФиксированныйКурсНакладной", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("ФиксированныйКурсРегл", ОбщегоНазначения.ОписаниеТипаЧисло(10,4,ДопустимыйЗнак.Неотрицательный));
	Таблица.Колонки.Добавить("ФиксированныйКурсУпр", ОбщегоНазначения.ОписаниеТипаЧисло(10,4,ДопустимыйЗнак.Неотрицательный));
	Таблица.Колонки.Добавить("ГрафикВДоговоре", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("РассчитыватьПлан", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("РассчитыватьФакт", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("Порядок", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	Таблица.Колонки.Добавить("НачалоДняПорядка", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	Таблица.Колонки.Добавить("НачалоДняПорядкаФакт", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	Таблица.Колонки.Добавить("ДатаПереоценки", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	
	Если НЕ ПараметрыРасчета = Неопределено И ТипЗнч(ПараметрыРасчета) = Тип("Структура") Тогда
		СтрокаТаблицыПараметров = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыПараметров, ПараметрыРасчета); 
	КонецЕсли;
	
	Возврат Таблица;
	
КонецФункции

Функция ОпределитьДатуНачалаКурсовВалют(Запрос, ЕстьРасчетыСКлиентами = Ложь, ЕстьРасчетыСПоставщиками = Ложь)
	
	ДатаНачалаКурсов = НачалоДня(ТекущаяДатаСеанса());
	
	МассивТекстовЗапроса = Новый Массив;
	
	ТекстЗапросаРасчетыСКлиентами = "
	|ВЫБРАТЬ
	|	Таблица.Период
	|Из
	|	ВТКлиентыРасчетыОтгрузкиПоставки КАК Таблица
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.Период
	|Из
	|	ВТТаблицаОплатКлиенты КАК Таблица";
	
	ТекстЗапросаРасчетыСПоставщиками = "
	|ВЫБРАТЬ
	|	Таблица.Период
	|Из
	|	ВТПоставщикиРасчетыОтгрузкиПоставки КАК Таблица
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.Период
	|Из
	|	ВТТаблицаОплатПоставщики КАК Таблица";
	
	Если ЕстьРасчетыСКлиентами Тогда
		
		МассивТекстовЗапроса.Добавить(ТекстЗапросаРасчетыСКлиентами);
		
	КонецЕсли;
	
	Если ЕстьРасчетыСПоставщиками Тогда
		
		МассивТекстовЗапроса.Добавить(ТекстЗапросаРасчетыСПоставщиками);
		
	КонецЕсли;
	
	Если МассивТекстовЗапроса.Количество() > 0 Тогда
		
		ТекстПодзапроса = СтрСоединить(МассивТекстовЗапроса, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());

		Запрос.Текст = "
		|ВЫБРАТЬ
		|	МИНИМУМ(Таблица.Период) КАК МинимальныйПериод
		|ИЗ
		|	&ТекстПодзапроса КАК Таблица";

		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстПодзапроса", "(" + ТекстПодзапроса + ")");

		Выборка = Запрос.Выполнить().Выбрать();

		Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.МинимальныйПериод) Тогда

			ДатаНачалаКурсов = Выборка.МинимальныйПериод;

		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДатаНачалаКурсов;
	
КонецФункции

// Текст запроса получения количества записей в оперативных регистрах взаиморасчетов.
// 
// Параметры:
//  ИмяТаблицыДляОбработки - Строка - Имя временной таблицы:
// * АналитикаУчетаПоПартнерам - СправочникСсылка.КлючиАналитикиУчетаПоПартнерам
// * ОбъектРасчетов - СправочникСсылка.ОбъектыРасчетов
// * Валюта - СправочникСсылка.Валюты
// * ТипРасчетов - ПеречислениеСсылка.ТипыРасчетовСПартнерами 
// 
// Возвращаемое значение:
//  Строка -  Текст запроса
//
Функция ТекстЗапросаКоличествоЗаписейВОперативныхРегистрахВзаиморасчетов(ИмяТаблицыДляОбработки) Экспорт

		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ВТДляОбработки.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|	ВТДляОбработки.ОбъектРасчетов КАК ОбъектРасчетов,
		|	ВТДляОбработки.Валюта КАК Валюта,
		|	СУММА(РегистрКоличествоЗаписей.КоличествоЗаписей) КАК КоличествоЗаписей
		|ИЗ
		|	ВтДанныеДляОбработки КАК ВТДляОбработки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КоличествоЗаписейРегистраторовРасчетов КАК РегистрКоличествоЗаписей
		|		ПО ВТДляОбработки.АналитикаУчетаПоПартнерам = РегистрКоличествоЗаписей.АналитикаУчетаПоПартнерам
		|		И ВТДляОбработки.ОбъектРасчетов = РегистрКоличествоЗаписей.ОбъектРасчетов
		|		И ВТДляОбработки.Валюта = РегистрКоличествоЗаписей.Валюта
		|СГРУППИРОВАТЬ ПО
		|	ВТДляОбработки.АналитикаУчетаПоПартнерам,
		|	ВТДляОбработки.ОбъектРасчетов,
		|	ВТДляОбработки.Валюта";

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВтДанныеДляОбработки КАК ВТДляОбработки", ИмяТаблицыДляОбработки + " КАК ВТДляОбработки");
	
	Возврат ТекстЗапроса;

КонецФункции

// Сформировать порции обработки данных регистров расчета.
// 
// Параметры:
//  ДанныеКОбработке - ТаблицаЗначений - :
// * АналитикаУчетаПоПартнерам - СправочникСсылка.КлючиАналитикиУчетаПоПартнерам - 
// * ОбъектРасчетов - СправочникСсылка.ОбъектыРасчетов - 
// * Валюта - СправочникСсылка.Валюты - 
//  РазмерПорцииОбработкиЗаписей - Число - Число записей в порции для обработки
// 
// Возвращаемое значение:
//  Число - Количество порций
//
Функция СформироватьПорцииОбработкиДанныхРегистровВзаиморасчетов(ДанныеКОбработке, РазмерПорцииОбработкиЗаписей = 1000) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Данные.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Данные.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Данные.ВалютаРасчетов КАК Валюта
	|ПОМЕСТИТЬ ВтДанныеДляОбработки
	|ИЗ
	|	&ДанныеКОбработке КАК Данные
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтДанныеДляОбработки.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ВтДанныеДляОбработки.Валюта КАК Валюта,
	|	ВтДанныеДляОбработки.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ВЫБОР
	|		КОГДА ОбъектыРасчетов.ТипОбъектаРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовРасчетов.Договор)
	|			ТОГДА 100
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ВесовойКоэффициентОбработки
	|ИЗ
	|	ВтДанныеДляОбработки КАК ВтДанныеДляОбработки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|		ПО ВтДанныеДляОбработки.ОбъектРасчетов = ОбъектыРасчетов.Ссылка";
	Запрос.УстановитьПараметр("ДанныеКОбработке", ДанныеКОбработке);
	ВесовыеКоэффициентыОбработкиЗаписей = Запрос.Выполнить().Выгрузить();
	ВесовыеКоэффициентыОбработкиЗаписей.Индексы.Добавить("АналитикаУчетаПоПартнерам, ОбъектРасчетов, Валюта");
	
	Если ДанныеКОбработке.Колонки.Найти("ПорядокОбработки") = Неопределено Тогда
		ДанныеКОбработке.Колонки.Добавить("ПорядокОбработки", ОбщегоНазначения.ОписаниеТипаЧисло(15, 0));
		ДанныеКОбработке.Индексы.Добавить("ПорядокОбработки");
	КонецЕсли;
	
	РазмерТекущейПорции = 0;
	ПорядокОбработки = 1;
	
	Для Каждого ЗаписьКОбработке Из ДанныеКОбработке Цикл

		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("АналитикаУчетаПоПартнерам", ЗаписьКОбработке.АналитикаУчетаПоПартнерам);
		СтруктураОтбора.Вставить("ОбъектРасчетов", ЗаписьКОбработке.ОбъектРасчетов);
		СтруктураОтбора.Вставить("Валюта", ЗаписьКОбработке.ВалютаРасчетов);

		ЗаписиПоОбъектуРасчетов = ВесовыеКоэффициентыОбработкиЗаписей.НайтиСтроки(СтруктураОтбора);
		ВесовойКоэффициентОбработки = ?(ЗаписиПоОбъектуРасчетов.Количество() > 0,
			ЗаписиПоОбъектуРасчетов[0].ВесовойКоэффициентОбработки, 0);

		Если Не РазмерТекущейПорции = 0 И (РазмерТекущейПорции + ВесовойКоэффициентОбработки) > РазмерПорцииОбработкиЗаписей Тогда

			ПорядокОбработки = ПорядокОбработки + 1;
			РазмерТекущейПорции = 0;

		КонецЕсли;

		ЗаписьКОбработке.ПорядокОбработки = ПорядокОбработки;
		РазмерТекущейПорции = РазмерТекущейПорции + ВесовойКоэффициентОбработки;

	КонецЦикла;
	
	Возврат ПорядокОбработки;

КонецФункции

// Обработать порции данных заполнения оперативных взаиморасчетов.
// 
// Параметры:
//  КоличествоПорций - Число - Количество порций
//  ДанныеКОбработке - ТаблицаЗначений
//  ТаблицаОсновныхПараметровРасчета - ТаблицаЗначений - см. функция ТаблицаОсновныхПараметровРасчета
//  НачальноеЗаполнение - Булево - Признак начального заполнения
//
Процедура ОбработатьПорцииДанныхЗаполненияОперативныхВзаиморасчетов(КоличествоПорций, ДанныеКОбработке, ТаблицаОсновныхПараметровРасчета, НачальноеЗаполнение = Неопределено) Экспорт
	
	ПараметрыЗаполненияПоУмолчанию = СтруктураПараметровЗаполненияВзаиморасчетов();
	
	Для ТекущийПорядокОбработки = 1 По КоличествоПорций Цикл

		ТаблицаОсновныхПараметровРасчета.Очистить();

		СтрокиКОбработке = ДанныеКОбработке.НайтиСтроки(Новый Структура("ПорядокОбработки", ТекущийПорядокОбработки));
		
		Если СтрокиКОбработке.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаКОбработке Из СтрокиКОбработке Цикл

			ПараметрРасчета = ТаблицаОсновныхПараметровРасчета.Добавить();
			ЗаполнитьЗначенияСвойств(ПараметрРасчета, ПараметрыЗаполненияПоУмолчанию);
			ЗаполнитьЗначенияСвойств(ПараметрРасчета, СтрокаКОбработке);
			Если НЕ НачальноеЗаполнение = Неопределено Тогда
				ПараметрРасчета.НачальноеЗаполнение = НачальноеЗаполнение;
			КонецЕсли;
			
		КонецЦикла;
		
		ЗаполнитьОперативныеВзаиморасчеты(ТаблицаОсновныхПараметровРасчета);
		
	КонецЦикла;
	
КонецПроцедуры


Процедура ОтразитьСостоянияЗаказов(ОбработанныеДанные)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОбработанныеДанные", ОбработанныеДанные);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Таблица.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Таблица.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	|ПОМЕСТИТЬ ВтОбработанныеДанные
	|ИЗ
	|	&ОбработанныеДанные КАК Таблица
	|
	|;
	|
	|ВЫБРАТЬ
	|	ОбъектыРасчетов.Объект КАК ОбработанныйДокумент
	|ИЗ
	|	ВтОбработанныеДанные КАК Таблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|		ПО ОбъектыРасчетов.Ссылка = Таблица.ОбъектРасчетов
	|ГДЕ
	|	ОбъектыРасчетов.ТипОбъектаРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовРасчетов.Заказ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	РасчетыСКлиентами.ПродажаПоЗаказу КАК ОбработанныйДокумент
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|		ПО ОбъектыРасчетов.Объект = РасчетыСКлиентами.ПродажаПоЗаказу
	|		И НЕ ОбъектыРасчетов.ПометкаУдаления
	|ГДЕ
	|	(РасчетыСКлиентами.АналитикаУчетаПоПартнерам, РасчетыСКлиентами.ОбъектРасчетов)
	|	В (ВЫБРАТЬ Т.АналитикаУчетаПоПартнерам, Т.ОбъектРасчетов ИЗ ВтОбработанныеДанные КАК Т)
	|	И РасчетыСКлиентами.ПродажаПоЗаказу <> НЕОПРЕДЕЛЕНО
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	РасчетыСПоставщиками.ЗакупкаПоЗаказу КАК ОбработанныйДокумент
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|		ПО ОбъектыРасчетов.Объект = РасчетыСПоставщиками.ЗакупкаПоЗаказу
	|		И НЕ ОбъектыРасчетов.ПометкаУдаления
	|ГДЕ
	|	(РасчетыСПоставщиками.АналитикаУчетаПоПартнерам, РасчетыСПоставщиками.ОбъектРасчетов)
	|	В (ВЫБРАТЬ Т.АналитикаУчетаПоПартнерам, Т.ОбъектРасчетов ИЗ ВтОбработанныеДанные КАК Т)
	|	И РасчетыСПоставщиками.ЗакупкаПоЗаказу <> НЕОПРЕДЕЛЕНО
	|";
	
	МассивДокументов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОбработанныйДокумент");
	
	РегистрыКОтражению = СостоянияДокументов.РегистрыКОтражениюСостоянияЗаказов();
	РегистрыКОтражению.СостоянияЗаказовКлиентов    = Истина;
	РегистрыКОтражению.СостоянияЗаказовПоставщикам = Истина;
	
	СостоянияДокументов.ДобавитьЗаданияКОтражениюСостоянияЗаказов(Неопределено, МассивДокументов,, РегистрыКОтражению);
	
КонецПроцедуры

// Очищает оперативные регистры взаиморасчетов и удаляет служебные регистраторы.
// 
// Параметры:
//  ОбъектРасчетов - СправочникСсылка.ОбъектыРасчетов - Объект расчетов
//  АналитикаУчетаПоПартнерам - СправочникСсылка.КлючиАналитикиУчетаПоПартнерам - Аналитика учета по партнерам
Процедура ОчиститьРегистрыВзаиморасчетовИУдалитьСлужебныеРегистраторы(ОбъектРасчетов = Неопределено, АналитикаУчетаПоПартнерам = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОбъектРасчетов", ОбъектРасчетов);
	Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам", АналитикаУчетаПоПартнерам);
	Запрос.Текст = "ВЫБРАТЬ
	|	РегистраторРасчетов.Ссылка КАК Ссылка,
	|	РегистраторРасчетов.ТипРасчетов КАК ТипРасчетов
	|ИЗ
	|	Документ.РегистраторРасчетов КАК РегистраторРасчетов
	|ГДЕ
	|	РегистраторРасчетов.ОбъектРасчетов = &ОбъектРасчетов
	|	И РегистраторРасчетов.АналитикаУчетаПоПартнерам = &АналитикаУчетаПоПартнерам";
	
	Если ОбъектРасчетов = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистраторРасчетов.ОбъектРасчетов = &ОбъектРасчетов", "Истина");
	КонецЕсли;

	Если АналитикаУчетаПоПартнерам = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"РегистраторРасчетов.АналитикаУчетаПоПартнерам = &АналитикаУчетаПоПартнерам", "Истина");
	КонецЕсли;
	
	ТаблицаРегистраторРасчетов = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ТекущийДокумент Из ТаблицаРегистраторРасчетов Цикл

		Если ТекущийДокумент.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом Тогда
			ОчиститьРегистрВзаиморасчетовПоДокументу(ТекущийДокумент.Ссылка, "РасчетыСКлиентамиПоСрокам");
			ОчиститьРегистрВзаиморасчетовПоДокументу(ТекущийДокумент.Ссылка, "РасчетыСКлиентамиПланОплат");
			ОчиститьРегистрВзаиморасчетовПоДокументу(ТекущийДокумент.Ссылка, "РасчетыСКлиентамиПланОтгрузок");
		Иначе
			ОчиститьРегистрВзаиморасчетовПоДокументу(ТекущийДокумент.Ссылка, "РасчетыСПоставщикамиПоСрокам");
			ОчиститьРегистрВзаиморасчетовПоДокументу(ТекущийДокумент.Ссылка, "РасчетыСПоставщикамиПланОплат");
			ОчиститьРегистрВзаиморасчетовПоДокументу(ТекущийДокумент.Ссылка, "РасчетыСПоставщикамиПланПоставок");
		КонецЕсли;

	КонецЦикла;
	
	СписокДокументовКОбработке = ОбщегоНазначенияКлиентСервер.СвернутьМассив(
		ТаблицаРегистраторРасчетов.ВыгрузитьКолонку("Ссылка"));
		
	Если СписокДокументовКОбработке.Количество() > 0 Тогда

		Параметры = Новый Структура;
		Параметры.Вставить("ДанныеКОбработке", СписокДокументовКОбработке);

		УдалитьСлужебныеРегистраторы(Параметры);

	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#КонецОбласти
