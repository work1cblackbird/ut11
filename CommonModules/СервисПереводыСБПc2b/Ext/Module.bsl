///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.ПереводыСБПc2b".
// ОбщийМодуль.СервисПереводыСБПc2b.
//
// Серверные процедуры переводов Системы быстрых платежей:
//  - выполнение оплаты, возвратов и получение статус операций;
//  - обработка отложенных статусов операций;
//  - загрузка данных отчетов.
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область СверкаВзаиморасчетовСБПc2b

// Получает данные отчета по сверке взаиморасчетов из сервиса.
//
// Параметры:
//  НачалоПериода - Дата - дата начало выборки данных отчета;
//  КонецПериода - Дата - дата окончания выборки данных отчета;
//  ПараметрыНастройкиПодключения - Структура - параметры выполнения операции
//    см. СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения;
//  ДатаЗапросаСтатуса - Дата - для определения периодичности получения статуса
//    формирования отчета.
//
// Возвращаемое значение:
//  Структура - данные сверки взаиморасчетов:
//    *Идентификатор - Строка - идентификатор отчета;
//    *СуммаВозвратов - Число - общая сумма возвратов за период по торговой точке;
//    *СуммаОплат - Число - общая сумма оплат за период по торговой точке;
//    *СуммаКомиссии - Число - рассчитанная сумма возвратов за период по торговой точке;
//    *СтатусОперации - Строка - текущее состояние операции оплаты:
//       - "Выполняется" - подтверждение формирования не получено;
//       - "Отменена" - оплата по оплата по ранее сформированному QR-коду невозможна;
//       - "Выполнена" - участник СБП подтвердил оплату;
//       - "ТребуетсяПодтверждение" - необходимо подтвердить действие;
//       - "Ошибка" - не удалось выполнить проверку оплаты из-за ошибки.
//    *КодОшибки - Строка - строковый код возникшей ошибки, который
//     может быть обработан вызывающим методом;
//    *СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция ЗапросОтчетаПоСверкеОборотов(
		ПараметрыНастройкиПодключения,
		НачалоПериода,
		КонецПериода,
		ДатаЗапросаСтатуса) Экспорт
	
	РезультатОперации = СистемаБыстрыхПлатежейСлужебный.НовыйРезультатДлительнойОперации();
	РезультатОперации.Вставить("Идентификатор",  "");
	РезультатОперации.Вставить("СуммаВозвратов", 0);
	РезультатОперации.Вставить("СуммаОплат" ,    0);
	РезультатОперации.Вставить("СуммаКомиссии",  0);
	
	РезультатЗапроса = ОперацияЗапросОтчетаПоОборотам(
		НачалоПериода,
		КонецПериода,
		ПараметрыНастройкиПодключения);
	
	Если ЗначениеЗаполнено(РезультатЗапроса.КодОшибки) Тогда
		ЗаполнитьЗначенияСвойств(
			РезультатОперации,
			РезультатЗапроса,
			"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
		РезультатОперации.СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииОшибка();
		Возврат РезультатОперации;
	КонецЕсли;
	
	ОбработатьСтатусОтчета(
		РезультатОперации,
		РезультатЗапроса.Статус,
		РезультатЗапроса.ТипОшибки);
	
	ЗаполнитьЗначенияСвойств(
		РезультатОперации,
		РезультатЗапроса,
		"Идентификатор, СуммаВозвратов, СуммаОплат, СуммаКомиссии");
	
	URLФайла = РезультатЗапроса.URLФайла;
	Если РезультатОперации.СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииВыполняется() Тогда
		
		РезультатЗапроса = СостояниеОтчетаПоСверкеОборотов(
			ПараметрыНастройкиПодключения,
			РезультатОперации.Идентификатор,
			ДатаЗапросаСтатуса);
		
		ЗаполнитьЗначенияСвойств(
			РезультатОперации,
			РезультатЗапроса,
			"СуммаВозвратов,
			|СуммаОплат,
			|СуммаКомиссии,
			|СтатусОперации,
			|КодОшибки,
			|СообщениеОбОшибке,
			|ИнформацияОбОшибке");
		
	ИначеЕсли РезультатОперации.СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииВыполнена()
			И ЗначениеЗаполнено(URLФайла) Тогда
		
		ДанныеОтчета = ОперацияЗагрузитьФайлОтчетаПоСверкеОборотов(
			URLФайла,
			РезультатОперации.Идентификатор,
			ПараметрыНастройкиПодключения);
		
		Если ЗначениеЗаполнено(ДанныеОтчета.КодОшибки) Тогда
			ЗаполнитьЗначенияСвойств(
				РезультатОперации,
				ДанныеОтчета,
				"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
			РезультатОперации.СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииОшибка();
		Иначе
			ЗаполнитьЗначенияСвойств(
				РезультатОперации,
				ДанныеОтчета,
				"СуммаВозвратов, СуммаОплат, СуммаКомиссии");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатОперации;
	
КонецФункции

// Получает статус и загружает данные отчета по сверке взаиморасчетов из сервиса.
//
// Параметры:
//  ПараметрыНастройкиПодключения - Структура - параметры выполнения операции
//    см. СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения;
//  Идентификатор - Строка - идентификатор отчета в Системе быстрых платежей;
//  ДатаЗапросаСтатуса - Дата - для определения периодичности получения статуса
//    формирования отчета.
//
// Возвращаемое значение:
//  Структура - данные сверки взаиморасчетов:
//    *СуммаВозвратов - Число - общая сумма возвратов за период по торговой точке;
//    *СуммаОплат - Число - общая сумма оплат за период по торговой точке;
//    *СуммаКомиссии - Число - рассчитанная сумма возвратов за период по торговой точке;
//    *СтатусОперации - Строка - текущее состояние операции оплаты:
//       - "Выполняется" - подтверждение формирования не получено;
//       - "Отменена" - оплата по оплата по ранее сформированному QR-коду невозможна;
//       - "Выполнена" - участник СБП подтвердил оплату;
//       - "ТребуетсяПодтверждение" - необходимо подтвердить действие;
//       - "Ошибка" - не удалось выполнить проверку оплаты из-за ошибки.
//    *КодОшибки - Строка - строковый код возникшей ошибки, который
//     может быть обработан вызывающим методом;
//    *СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция СостояниеОтчетаПоСверкеОборотов(
		ПараметрыНастройкиПодключения,
		Идентификатор,
		ДатаЗапросаСтатуса) Экспорт
	
	РезультатОперации = СистемаБыстрыхПлатежейСлужебный.НовыйРезультатДлительнойОперации();
	РезультатОперации.Вставить("СуммаВозвратов", 0);
	РезультатОперации.Вставить("СуммаОплат", 0);
	РезультатОперации.Вставить("СуммаКомиссии", 0);
	
	РезультатЗапроса = ОперацияЗапросСтатусаОтчетаПоОборотам(
		Идентификатор,
		ПараметрыНастройкиПодключения,
		ДатаЗапросаСтатуса);
	
	Если ЗначениеЗаполнено(РезультатЗапроса.КодОшибки) Тогда
		ЗаполнитьЗначенияСвойств(
			РезультатОперации,
			РезультатЗапроса,
			"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
		РезультатОперации.СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииОшибка();
		Возврат РезультатОперации;
	КонецЕсли;
	
	ОбработатьСтатусОтчета(
		РезультатОперации,
		РезультатЗапроса.Статус,
		РезультатЗапроса.ТипОшибки);
	
	ЗаполнитьЗначенияСвойств(
		РезультатОперации,
		РезультатЗапроса,
		"СуммаВозвратов, СуммаОплат, СуммаКомиссии");
	
	URLФайла = РезультатЗапроса.URLФайла;
	Если РезультатОперации.СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииВыполнена()
		И ЗначениеЗаполнено(URLФайла) Тогда
		
		ДанныеОтчета = ОперацияЗагрузитьФайлОтчетаПоСверкеОборотов(
			URLФайла,
			Идентификатор,
			ПараметрыНастройкиПодключения);
		
		Если ЗначениеЗаполнено(ДанныеОтчета.КодОшибки) Тогда
			ЗаполнитьЗначенияСвойств(
				РезультатОперации,
				ДанныеОтчета,
				"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
			РезультатОперации.СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииОшибка();
		Иначе
			ЗаполнитьЗначенияСвойств(
				РезультатОперации,
				ДанныеОтчета,
				"СуммаВозвратов, СуммаОплат, СуммаКомиссии");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатОперации;
	
КонецФункции

// Получает данные операций проведенных в Системе быстрых платежей за период.
//
// Параметры:
//  НачалоПериода - Дата - дата начало выборки данных отчета;
//  КонецПериода - Дата - дата окончания выборки данных отчета;
//  ПараметрыНастройкиПодключения - Структура - параметры выполнения операции
//    см. СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения;
//  ДатаЗапросаСтатуса - Дата - для определения периодичности получения статуса
//    формирования отчета.
//
// Возвращаемое значение:
//  Структура - данные сверки взаиморасчетов:
//    *Идентификатор - Строка - идентификатор отчета;
//    *ДанныеОпераций - ТаблицаЗначений - см. НовыйДанныеОтчетаПоСверкеОпераций;
//    *СтатусОперации - Строка - текущее состояние операции оплаты:
//       - "Выполняется" - подтверждение формирования не получено;
//       - "Отменена" - оплата по оплата по ранее сформированному QR-коду невозможна;
//       - "Выполнена" - участник СБП подтвердил оплату;
//       - "Ошибка" - не удалось выполнить проверку оплаты из-за ошибки.
//    *КодОшибки - Строка - строковый код возникшей ошибки, который
//                 может быть обработан вызывающим методом;
//    *СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция ЗапросОтчетаПоСверкеОпераций(
		ПараметрыНастройкиПодключения,
		НачалоПериода,
		КонецПериода,
		ДатаЗапросаСтатуса) Экспорт
	
	РезультатОперации = СистемаБыстрыхПлатежейСлужебный.НовыйРезультатДлительнойОперации();
	РезультатОперации.Вставить("Идентификатор", "");
	РезультатОперации.Вставить("ДанныеОпераций", НовыйДанныеОтчетаПоСверкеОпераций());
	
	РезультатЗапроса = ОперацияЗапросОтчетаПоСверкеОпераций(
		НачалоПериода,
		КонецПериода,
		ПараметрыНастройкиПодключения);
	
	Если ЗначениеЗаполнено(РезультатЗапроса.КодОшибки) Тогда
		ЗаполнитьЗначенияСвойств(
			РезультатОперации,
			РезультатЗапроса,
			"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
		РезультатОперации.СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииОшибка();
		Возврат РезультатОперации;
	КонецЕсли;
	
	ОбработатьСтатусОтчета(
		РезультатОперации,
		РезультатЗапроса.Статус,
		РезультатЗапроса.ТипОшибки);
	
	ЗаполнитьЗначенияСвойств(
		РезультатОперации,
		РезультатЗапроса,
		"Идентификатор");
	
	Если РезультатОперации.СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииВыполняется() Тогда
		
		РезультатЗапросаСтатуса = СостояниеОтчетаПоСверкеОпераций(
			ПараметрыНастройкиПодключения,
			РезультатОперации.Идентификатор,
			ДатаЗапросаСтатуса);
		ЗаполнитьЗначенияСвойств(
			РезультатОперации,
			РезультатЗапросаСтатуса,
			"СтатусОперации, КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
		РезультатОперации.ДанныеОпераций = РезультатЗапросаСтатуса.ДанныеОпераций;
		
	ИначеЕсли РезультатОперации.СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииВыполнена()
			И ЗначениеЗаполнено(РезультатЗапроса.URLФайла) Тогда
		
		ДанныеОтчета = ОперацияЗагрузитьФайлОтчетаПоСверкеОпераций(
			РезультатЗапроса.URLФайла,
			РезультатОперации.Идентификатор,
			ПараметрыНастройкиПодключения);
		
		Если ЗначениеЗаполнено(ДанныеОтчета.КодОшибки) Тогда
			ЗаполнитьЗначенияСвойств(
				РезультатОперации,
				ДанныеОтчета,
				"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
			РезультатОперации.СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииОшибка();
		Иначе
			ЗаполнитьЗначенияСвойств(
				РезультатОперации,
				ДанныеОтчета,
				"ДанныеОпераций");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатОперации;
	
КонецФункции

// Получает статус и загружает данные отчета по сверке операций из сервиса.
//
// Параметры:
//  ПараметрыНастройкиПодключения - Структура - параметры выполнения операции
//    см. СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения;
//  Идентификатор - Строка - идентификатор отчета;
//  ДатаЗапросаСтатуса - Дата - для определения периодичности получения статуса
//    формирования отчета.
//
// Возвращаемое значение:
//  Структура - данные сверки взаиморасчетов:
//    *ДанныеОпераций - ТаблицаЗначений - см. НовыйДанныеОтчетаПоСверкеОпераций;
//    *СтатусОперации - Строка - текущее состояние операции оплаты:
//       - "Выполняется" - подтверждение оплаты формирования не получено;
//       - "Отменена" - оплата по оплата по ранее сформированному QR-коду невозможна;
//       - "Выполнена" - участник СБП подтвердил оплату;
//       - "Ошибка" - не удалось выполнить проверку оплаты из-за ошибки.
//    *КодОшибки - Строка - строковый код возникшей ошибки, который
//       может быть обработан вызывающим методом;
//    *СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция СостояниеОтчетаПоСверкеОпераций(
		ПараметрыНастройкиПодключения,
		Идентификатор,
		ДатаЗапросаСтатуса) Экспорт
	
	РезультатОперации = СистемаБыстрыхПлатежейСлужебный.НовыйРезультатДлительнойОперации();
	РезультатОперации.Вставить("ДанныеОпераций", НовыйДанныеОтчетаПоСверкеОпераций());
	
	РезультатЗапроса = ОперацияЗапросСтатусаОтчетаПоОперациям(
		Идентификатор,
		ПараметрыНастройкиПодключения,
		ДатаЗапросаСтатуса);
	
	Если ЗначениеЗаполнено(РезультатЗапроса.КодОшибки) Тогда
		ЗаполнитьЗначенияСвойств(
			РезультатОперации,
			РезультатЗапроса,
			"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
		РезультатОперации.СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииОшибка();
		Возврат РезультатОперации;
	КонецЕсли;
	
	ОбработатьСтатусОтчета(
		РезультатОперации,
		РезультатЗапроса.Статус,
		РезультатЗапроса.ТипОшибки);
	
	Если РезультатОперации.СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииВыполнена() Тогда
		
		ДанныеОтчета = ОперацияЗагрузитьФайлОтчетаПоСверкеОпераций(
			РезультатЗапроса.URLФайла,
			Идентификатор,
			ПараметрыНастройкиПодключения);
		
		Если ЗначениеЗаполнено(ДанныеОтчета.КодОшибки) Тогда
			ЗаполнитьЗначенияСвойств(
				РезультатОперации,
				ДанныеОтчета,
				"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
			РезультатОперации.СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииОшибка();
		Иначе
			ЗаполнитьЗначенияСвойств(
				РезультатОперации,
				ДанныеОтчета,
				"ДанныеОпераций");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатОперации;
	
КонецФункции

// Возвращает идентификатор типа операции "Оплата".
//
// Возвращаемое значение:
//  Строка - код состояния.
//
Функция ИдентификаторТипаОперацииОплата() Экспорт
	
	Возврат НСтр("ru = 'Оплата'");
	
КонецФункции

// Возвращает идентификатор типа операции "Возврат".
//
// Возвращаемое значение:
//  Строка - код состояния.
//
Функция ИдентификаторТипаОперацииВозврат() Экспорт
	
	Возврат НСтр("ru = 'Возврат'");
	
КонецФункции

#КонецОбласти

#Область СлужебныеОперацииМакетовСБП

// Возвращаемое значение:
//  Структура - данные сверке взаиморасчетов:
//    *ОбновленныеМакеты - Структура - Описание обновленных макетов СБП:
//      **Ключ    - Строка - Идентификатор макета СБП.
//      **Значение - ТабличныйДокумент - обновленный макет.
//    *КодОшибки - Строка - строковый код возникшей ошибки, который
//     может быть обработан вызывающим методом;
//    *СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция ОбновитьКэшМакетов() Экспорт
	
	РезультатОперации = СистемаБыстрыхПлатежейСлужебный.НовыйРезультатОперации();
	РезультатОперации.Вставить("ОбновленныеМакеты", Новый Структура);
	
	РезультатВызова = ОперацияОписаниеМакетов();
	
	Если ЗначениеЗаполнено(РезультатВызова.КодОшибки) Тогда
		ЗаполнитьЗначенияСвойств(РезультатОперации, РезультатВызова);
		Возврат РезультатОперации;
	КонецЕсли;
	
	ОписаниеОбновляемыхМакетов = ОпределитьМакетыДляОбновления(РезультатВызова.Описание);
	
	Если ОписаниеОбновляемыхМакетов.Количество() = 0 Тогда
		Возврат РезультатОперации;
	КонецЕсли;
	
	РезультатОбновления = ОперацияОбновлениеМакетов(ОписаниеОбновляемыхМакетов);
	ЗаполнитьЗначенияСвойств(РезультатОперации, РезультатОбновления);
	
	Возврат РезультатОперации;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПрикладныеОперации

// См. ПереводыСБПc2b.ДинамическаяСсылка.
//
Функция ДинамическаяСсылка(
		ДокументОплаты,
		ПараметрыНастройкиПодключения,
		ДополнительныеПараметры,
		ДанныеЧастичнойОплаты = Неопределено) Экспорт
	
	РезультатОперации = ПереводыСБПc2bСлужебный.НовыйРезультатПлатежнаяСсылка();
	
	ДанныеЗаказа = ДанныеЗаказаНаОплату(
		РезультатОперации,
		ДокументОплаты,
		"",
		ПараметрыНастройкиПодключения,
		ДополнительныеПараметры,
		ДанныеЧастичнойОплаты);
	
	Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
		Возврат РезультатОперации;
	КонецЕсли;
	
	РезультатОперации.СуммаОплаты     = ДанныеЗаказа.ЗаказНаОплату.СуммаОплаты;
	РезультатОперации.ПлатежнаяСсылка = РегистрыСведений.ИдентификаторыОперацийСБПc2b.ПлатежнаяСсылкаОперации(
		ДокументОплаты);
	
	Если Не ЗначениеЗаполнено(РезультатОперации.ПлатежнаяСсылка) Тогда
		
		// Создание нового QR-кода Системы быстрых платежей.
		ДанныеСсылки = ОперацияДинамическаяСсылка(
			ДанныеЗаказа.ЗаказНаОплату,
			ДанныеЗаказа.Идентификатор,
			ПараметрыНастройкиПодключения);
		
		Если ЗначениеЗаполнено(ДанныеСсылки.КодОшибки) Тогда
			ЗаполнитьЗначенияСвойств(
				РезультатОперации,
				ДанныеСсылки,
				"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
			Возврат РезультатОперации;
		КонецЕсли;
		
		// Сохранить информацию об идентификаторе СБП.
		РегистрыСведений.ИдентификаторыОперацийСБПc2b.ЗаписатьДанныеОплатыСБП(
			ДокументОплаты,
			ДанныеСсылки.ИдентификаторОплаты,
			ДанныеСсылки.ПериодИспользования,
			ДанныеСсылки.ПлатежнаяСсылка,
			СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаВПроцессе());
		
		РезультатОперации.ПлатежнаяСсылка = ДанныеСсылки.ПлатежнаяСсылка;
		
	КонецЕсли;
	
	Возврат РезультатОперации;
	
КонецФункции

// См. ПереводыСБПc2b.КассоваяСсылка.
//
Функция КассоваяСсылка(
		ПараметрыНастройкиПодключения,
		ИдентификаторОплаты) Экспорт
	
	Возврат ОперацияРегистрацияКассовойСсылки(
		ПараметрыНастройкиПодключения,
		ИдентификаторОплаты);
	
КонецФункции

// См. ПереводыСБПc2b.АктивироватьКассовуюСсылку.
//
Функция АктивироватьКассовуюСсылку(
		ДокументОплаты,
		ДанныеСсылки,
		ПараметрыНастройкиПодключения,
		ДополнительныеПараметры) Экспорт
	
	РезультатОперации = СистемаБыстрыхПлатежейСлужебный.НовыйРезультатОперации();
	
	ДанныеЗаказа = ДанныеЗаказаНаОплату(
		РезультатОперации,
		ДокументОплаты,
		ДанныеСсылки.ИдентификаторОплаты,
		ПараметрыНастройкиПодключения,
		ДополнительныеПараметры,
		Неопределено);
	
	Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
		Возврат РезультатОперации;
	КонецЕсли;
	
	// Активация кассовой ссылки.
	РезультатАктивации = ОперацияАктивацияКассовойСсылки(
		ДанныеЗаказа.ЗаказНаОплату,
		ДанныеЗаказа.Идентификатор,
		ДанныеСсылки.ИдентификаторОплаты,
		ПараметрыНастройкиПодключения);
	
	Если ЗначениеЗаполнено(РезультатАктивации.КодОшибки) Тогда
		ЗаполнитьЗначенияСвойств(
			РезультатОперации,
			РезультатАктивации,
			"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
		Возврат РезультатОперации;
	КонецЕсли;
	
	// Сохранить информацию об идентификаторе СБП.
	РегистрыСведений.ИдентификаторыОперацийСБПc2b.ЗаписатьДанныеОплатыСБП(
		ДокументОплаты,
		РезультатАктивации.ИдентификаторОплаты,
		РезультатАктивации.ПериодИспользования,
		ДанныеСсылки.КассоваяСсылка,
		СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаВПроцессе(),
		РезультатАктивации.ПараметрыАктивации);
	
	Возврат РезультатАктивации;
	
КонецФункции

// См. ПереводыСБПc2b.ДеактивироватьКассовуюСсылку.
//
Функция ДеактивироватьКассовуюСсылку(
		ПараметрыНастройкиПодключения,
		ДанныеСсылки) Экспорт
	
	Возврат ОперацияДеактивироватьКассовуюСсылку(
		ПараметрыНастройкиПодключения,
		ДанныеСсылки.ИдентификаторОплаты);
	
КонецФункции 

// См. ПереводыСБПc2b.СтатусОплаты.
//
Функция СтатусОплаты(ДокументОплаты, ПараметрыНастройкиПодключения, ДлительныйВызов) Экспорт
	
	РезультатОперации = СистемаБыстрыхПлатежейСлужебный.НовыйРезультатДлительнойОперации();
	ПараметрыСтатуса = РегистрыСведений.ИдентификаторыОперацийСБПc2b.ПараметрыОпределенияСтатусаОперации(
		ДокументОплаты);
	
	Если ПараметрыСтатуса = Неопределено Тогда
		РезультатОперации.СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииОшибка();
		РезультатОперации.СообщениеОбОшибке = НСтр("ru = 'Идентификатор оплаты по документу не обнаружен.'");
		РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Идентификатор оплаты по документу не обнаружен.'");
		Возврат РезультатОперации;
	КонецЕсли;
	
	Оплачен = Ложь;
	Отменен = Ложь;
	
	Если ПараметрыСтатуса.СтатусОперации = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаВыполнена() Тогда
		Оплачен = Истина;
		ЗаполнитьЗначенияСвойств(РезультатОперации.ПараметрыОперации, ПараметрыСтатуса);
		РезультатОперации.ПараметрыОперации.ИдентификаторОперации = ПараметрыСтатуса.ИдентификаторОперации;
		РезультатОперации.ПараметрыОперации.ИдентификаторОплаты   = ПараметрыСтатуса.ИдентификаторОплаты;
	ИначеЕсли ПараметрыСтатуса.СтатусОперации = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаОтклонена() Тогда
		Отменен = Истина;
		ЗаполнитьЗначенияСвойств(РезультатОперации.ПараметрыОперации, ПараметрыСтатуса);
		РезультатОперации.ПараметрыОперации.ИдентификаторОперации = ПараметрыСтатуса.ИдентификаторОперации;
		РезультатОперации.ПараметрыОперации.ИдентификаторОплаты   = ПараметрыСтатуса.ИдентификаторОплаты;
	ИначеЕсли (ПараметрыСтатуса.ПериодИспользования + 600) < ТекущаяДатаСеанса() Тогда
		
		// При окончании срока действия QR-кода, выполняется проверка статуса оплаты
		// и регистрация отмены QR-кода в ИБ, если оплата так и не была совершена.
		РезультатПроверки = ОпределитьСтатусОплаты(
			ПараметрыСтатуса,
			ПараметрыНастройкиПодключения,
			ИдентификаторОперацииПроверкиОплаты());
		
		Если ЗначениеЗаполнено(РезультатПроверки.КодОшибки) Тогда
			ЗаполнитьЗначенияСвойств(
				РезультатОперации,
				РезультатПроверки,
				"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
			РезультатОперации.СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииОшибка();
			Возврат РезультатОперации;
		КонецЕсли;
		
		Отменен = (РезультатПроверки.СтатусОплаты = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаВПроцессе()
			Или РезультатПроверки.СтатусОплаты = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаОтклонена());
		Оплачен = (РезультатПроверки.СтатусОплаты = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаВыполнена());
		
		Если РезультатПроверки.СтатусОплаты = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаВПроцессе() Тогда
			РезультатПроверки.СтатусОплаты = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаОтклонена();
		КонецЕсли;
		
		РегистрыСведений.ИдентификаторыОперацийСБПc2b.ЗаписатьСтатусОперации(
			ДокументОплаты,
			РезультатПроверки.ИдентификаторОперации,
			РезультатПроверки.ДатаОперации,
			РезультатПроверки.СтатусОплаты,
			РезультатПроверки.СуммаОперации,
			,
			ПараметрыСтатуса.ДатаЗапросаСтатуса);
			
		ЗаполнитьЗначенияСвойств(РезультатОперации.ПараметрыОперации, РезультатПроверки);
		РезультатОперации.ПараметрыОперации.ИдентификаторОперации = РезультатПроверки.ИдентификаторОперации;
		РезультатОперации.ПараметрыОперации.ИдентификаторОплаты   = РезультатПроверки.ИдентификаторОплаты;
		
	Иначе
		Если ДлительныйВызов Тогда
			
			НастройкиВызова = СистемаБыстрыхПлатежейСлужебный.НовыйИтеративныйВызовОперации();
			Пока СистемаБыстрыхПлатежейСлужебный.ВозможенВызовОперации(НастройкиВызова) Цикл
				
				РезультатПроверки = ОпределитьСтатусОплаты(
					ПараметрыСтатуса,
					ПараметрыНастройкиПодключения,
					ИдентификаторОперацииПроверкиОплаты());
				
				Если ЗначениеЗаполнено(РезультатПроверки.КодОшибки) Тогда
					ЗаполнитьЗначенияСвойств(
						РезультатОперации,
						РезультатПроверки,
						"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
					РезультатОперации.СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииОшибка();
					Возврат РезультатОперации;
				КонецЕсли;
				
				Если РезультатПроверки.ОбновитьДатуЗапросаСтатуса Тогда
					ПараметрыСтатуса.ДатаЗапросаСтатуса = ТекущаяДатаСеанса();
				КонецЕсли;
				
				Оплачен = (РезультатПроверки.СтатусОплаты = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаВыполнена());
				Отменен = (РезультатПроверки.СтатусОплаты = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаОтклонена());
				Если Оплачен Или Отменен Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			
			РезультатПроверки = ОпределитьСтатусОплаты(
				ПараметрыСтатуса,
				ПараметрыНастройкиПодключения,
				ИдентификаторОперацииПроверкиОплаты());
			
			Если ЗначениеЗаполнено(РезультатПроверки.КодОшибки) Тогда
				ЗаполнитьЗначенияСвойств(
					РезультатОперации,
					РезультатПроверки,
					"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
				РезультатОперации.СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииОшибка();
				Возврат РезультатОперации;
			КонецЕсли;
			
			Оплачен = (РезультатПроверки.СтатусОплаты = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаВыполнена());
			Отменен = (РезультатПроверки.СтатусОплаты = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаОтклонена());
			
		КонецЕсли;
		
		РегистрыСведений.ИдентификаторыОперацийСБПc2b.ЗаписатьСтатусОперации(
			ДокументОплаты,
			РезультатПроверки.ИдентификаторОперации,
			РезультатПроверки.ДатаОперации,
			РезультатПроверки.СтатусОплаты,
			РезультатПроверки.СуммаОперации,
			,
			ПараметрыСтатуса.ДатаЗапросаСтатуса);
			
		ЗаполнитьЗначенияСвойств(РезультатОперации.ПараметрыОперации, РезультатПроверки);
		РезультатОперации.ПараметрыОперации.ИдентификаторОперации = РезультатПроверки.ИдентификаторОперации;
		РезультатОперации.ПараметрыОперации.ИдентификаторОплаты   = РезультатПроверки.ИдентификаторОплаты;
		
	КонецЕсли;
	
	Если Оплачен Тогда
		РезультатОперации.СтатусОперации
			= СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииВыполнена();
	ИначеЕсли Отменен Тогда
		РезультатОперации.СтатусОперации
			= СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииОтменена();
	Иначе
		РезультатОперации.СтатусОперации
			= СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииВыполняется();
	КонецЕсли;
	
	Возврат РезультатОперации;
	
КонецФункции

// См. ПереводыСБПc2b.ВозвратОплаты.
//
Функция ВозвратОплаты(
		ДокументВозврата,
		ОбъектОплаты,
		УчастникСБП,
		ПараметрыНастройкиПодключения,
		ДополнительныеПараметры) Экспорт
	
	РезультатОперации = СистемаБыстрыхПлатежейСлужебный.НовыйРезультатДлительнойОперации();
	РезультатОперации.Вставить("Подтверждение", Неопределено);
	
	ЗаказНаВозврат = ОписаниеЗаказаНаВозврат();
	ИнтеграцияПодсистемБИП.ПриФормированииЗаказаНаВозвратСБП(
		ДокументВозврата,
		ЗаказНаВозврат,
		ПараметрыНастройкиПодключения.НастройкаПодключения,
		ДополнительныеПараметры);
	ПереводыСБПc2bПереопределяемый.ПриФормированииЗаказаНаВозвратСБП(
		ДокументВозврата,
		ЗаказНаВозврат,
		ПараметрыНастройкиПодключения.НастройкаПодключения,
		ДополнительныеПараметры);
	
	// Валидация данных заказа на оплату и настроек.
	ПроверитьЗаказНаВозврат(
		ЗаказНаВозврат,
		РезультатОперации);
	
	Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
		Возврат РезультатОперации;
	КонецЕсли;
	
	ИдентификаторыОперации = Неопределено;
	Если Метаданные.ОпределяемыеТипы.ДокументОперацииСБП.Тип.СодержитТип(ТипЗнч(ОбъектОплаты)) Тогда
		
		ИдентификаторыОперации = РегистрыСведений.ИдентификаторыОперацийСБПc2b.ИдентификаторыОперацииСБП(
			ОбъектОплаты);
			
		ПараметрыНастройкиПодключенияОплаты = ПереводыСБПc2bСлужебный.ПараметрыНастройкиПодключенияПоДокументу(
			ОбъектОплаты);
		
		Если ПараметрыНастройкиПодключения.ИдентификаторУчастника <>
			ПараметрыНастройкиПодключенияОплаты.ИдентификаторУчастника Тогда
			
			ПараметрыНастройкиПодключения = ПараметрыНастройкиПодключенияОплаты;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ОбъектОплаты) = Тип("Строка") Тогда
		
		// Переданный идентификатор должен соответствовать формату:
		// {Идентификатор системы}:{Идентификатор СПБ}:{Идентификатор операции}
		ДанныеСтроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
			ОбъектОплаты,
			":");
		
		Сч = 0;
		Пока Сч < ДанныеСтроки.Количество() Цикл
			ДанныеСтроки[Сч] = СокрЛП(ДанныеСтроки[Сч]);
			Сч = Сч + 1;
		КонецЦикла;
		
		ПроверитьИдентификаторОбъектаОплаты(ДанныеСтроки, РезультатОперации);
		
		Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
			Возврат РезультатОперации;
		КонецЕсли;
		
		ИдентификаторыОперации = РегистрыСведений.ИдентификаторыОперацийСБПc2b.НовыйИдентификаторыОперацииСБП(
			ДанныеСтроки[1],
			ДанныеСтроки[2]);
		
	Иначе
		ВызватьИсключение НСтр("ru = 'Возврат для продажи не поддерживается.'");
	КонецЕсли;
	
	Если ИдентификаторыОперации = Неопределено
		Или Не ЗначениеЗаполнено(ИдентификаторыОперации.ИдентификаторОперации)
		Или Не ЗначениеЗаполнено(ИдентификаторыОперации.ИдентификаторОплаты) Тогда
		
		РезультатОперации.СтатусОперации  = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииОшибка();
		РезультатОперации.КодОшибки          = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйФорматЗапроса();
		РезультатОперации.СообщениеОбОшибке  = НСтр("ru = 'Не обнаружен идентификатор документа оплаты в Системе быстрых платежей.'");
		РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Не обнаружен идентификатор документа оплаты в Системе быстрых платежей.'");
		
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	// Формирование идентификаторов возврата.
	Идентификатор = ОпределитьИдентификаторЗаказаНаВозврат(
		РезультатОперации,
		ДокументВозврата,
		ЗаказНаВозврат,
		ИдентификаторыОперации.ИдентификаторОплаты,
		ПараметрыНастройкиПодключения);
	
	// Прекратить вызов операции, в случае ошибок.
	Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
		Возврат РезультатОперации;
	КонецЕсли;
	
	// Сохранить данные заказа для проверки
	// идемпотентности.
	РегистрыСведений.ДанныеОперацийСБПc2b.СохранитьДанныеВозврата(
		Идентификатор,
		ЗаказНаВозврат,
		ДокументВозврата,
		ПараметрыНастройкиПодключения.ИдентификаторМерчанта);
	
	ПараметрыВозврата = Новый Структура;
	ПараметрыВозврата.Вставить("СуммаВозврата", ЗаказНаВозврат.СуммаВозврата);
	ПараметрыВозврата.Вставить("ДатаВозврата", ЗаказНаВозврат.ДатаВозврата);
	ПараметрыВозврата.Вставить("ИдентификаторСПБ", ИдентификаторыОперации.ИдентификаторОплаты);
	ПараметрыВозврата.Вставить("ИдентификаторОперации", ИдентификаторыОперации.ИдентификаторОперации);
	ПараметрыВозврата.Вставить("УчастникСБП", УчастникСБП);
	ПараметрыВозврата.Вставить("ИдентификаторыОперации", Идентификатор);
	
	РезультатВозврата = ОперацияВозвратОплаты(
		ПараметрыВозврата,
		ПараметрыНастройкиПодключения);
	
	Если ЗначениеЗаполнено(РезультатВозврата.КодОшибки) Тогда
		ЗаполнитьЗначенияСвойств(
				РезультатОперации,
				РезультатВозврата,
				"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
		РезультатОперации.СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииОшибка();
		Возврат РезультатОперации;
	КонецЕсли;
	
	РегистрыСведений.ИдентификаторыОперацийСБПc2b.ЗаписатьСтатусОперации(
		ДокументВозврата,
		РезультатВозврата.ИдентификаторВозврата,
		РезультатВозврата.ДатаОперации,
		РезультатВозврата.СтатусВозврата,
		РезультатВозврата.СуммаОперации,
		РезультатВозврата.ИдентификаторСессии);
	
	ОбработатьСтатусВозврата(
		РезультатОперации,
		РезультатВозврата.СтатусВозврата);
	
	РезультатОперации.Подтверждение = РезультатВозврата.Подтверждение;
	ЗаполнитьЗначенияСвойств(РезультатОперации.ПараметрыОперации, РезультатВозврата);
	РезультатОперации.ПараметрыОперации.ИдентификаторОперации = РезультатВозврата.ИдентификаторВозврата;
	РезультатОперации.ПараметрыОперации.ИдентификаторОплаты   = РезультатВозврата.ИдентификаторОплаты;
	
	Возврат РезультатОперации;
	
КонецФункции

// См. ПереводыСБПc2b.ПодтвердитьВозврат.
//
Функция ПодтвердитьВозврат(ДокументВозврата, ПараметрыНастройкиПодключения) Экспорт
	
	РезультатОперации = СистемаБыстрыхПлатежейСлужебный.НовыйРезультатДлительнойОперации();
	
	ИдентификаторыОперации = РегистрыСведений.ИдентификаторыОперацийСБПc2b.ИдентификаторыОперацииСБП(
		ДокументВозврата);
	ИдентификаторСессии = РегистрыСведений.ИдентификаторыОперацийСБПc2b.ИдентификаторСессии(
		ДокументВозврата);
	
	РезультатПодтверждения = ОперацияПодтверждениеВозврата(
		ИдентификаторыОперации,
		ИдентификаторСессии,
		ПараметрыНастройкиПодключения);
	
	Если ЗначениеЗаполнено(РезультатПодтверждения.КодОшибки) Тогда
		ЗаполнитьЗначенияСвойств(
			РезультатОперации,
			РезультатПодтверждения,
			"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
		РезультатОперации.СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииОшибка();
		Возврат РезультатОперации;
	КонецЕсли;
	
	ОбработатьСтатусВозврата(
		РезультатОперации,
		РезультатПодтверждения.СтатусВозврата);
	
	РегистрыСведений.ИдентификаторыОперацийСБПc2b.ЗаписатьСтатусОперации(
		ДокументВозврата,
		РезультатПодтверждения.ИдентификаторВозврата,
		РезультатПодтверждения.ДатаОперации,
		РезультатПодтверждения.СтатусВозврата,
		РезультатПодтверждения.СуммаОперации);
		
	ЗаполнитьЗначенияСвойств(РезультатОперации.ПараметрыОперации, РезультатПодтверждения);
	РезультатОперации.ПараметрыОперации.ИдентификаторОперации = РезультатПодтверждения.ИдентификаторВозврата;
	РезультатОперации.ПараметрыОперации.ИдентификаторОплаты   = РезультатПодтверждения.ИдентификаторОплаты;
	
	Возврат РезультатОперации;
	
КонецФункции

// См. ПереводыСБПc2b.СтатусВозврата.
//
Функция СтатусВозврата(ДокументВозврата, ПараметрыНастройкиПодключения, ДлительныйВызов) Экспорт
	
	РезультатОперации = СистемаБыстрыхПлатежейСлужебный.НовыйРезультатДлительнойОперации();
	
	ПараметрыСтатуса = РегистрыСведений.ИдентификаторыОперацийСБПc2b.ПараметрыОпределенияСтатусаОперации(
		ДокументВозврата);
	
	ОбработатьСтатусВозврата(
		РезультатОперации,
		ПараметрыСтатуса.СтатусОперации);
	
	Если РезультатОперации.СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииВыполняется() Тогда
		
		Если ДлительныйВызов Тогда
			
			НастройкиВызова = СистемаБыстрыхПлатежейСлужебный.НовыйИтеративныйВызовОперации();
			Пока СистемаБыстрыхПлатежейСлужебный.ВозможенВызовОперации(НастройкиВызова) Цикл
				
				РезультатПроверки = ОперацияСтатусВозврата(
					ПараметрыСтатуса.ИдентификаторОперации,
					ПараметрыСтатуса.ДатаЗапросаСтатуса,
					ПараметрыНастройкиПодключения,
					ИдентификаторОперацииПроверкиВозврата());
				
				Если ЗначениеЗаполнено(РезультатПроверки.КодОшибки) Тогда
					ЗаполнитьЗначенияСвойств(
						РезультатОперации,
						РезультатПроверки,
						"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
					РезультатОперации.СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииОшибка();
					Возврат РезультатОперации;
				КонецЕсли;
				
				Если РезультатПроверки.ОбновитьДатуЗапросаСтатуса Тогда
					ПараметрыСтатуса.ДатаЗапросаСтатуса = ТекущаяДатаСеанса();
				КонецЕсли;
				
				ОбработатьСтатусВозврата(
					РезультатОперации,
					РезультатПроверки.СтатусВозврата);
				
				Если РезультатОперации.СтатусОперации <> СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииВыполняется() Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			РезультатПроверки = ОперацияСтатусВозврата(
				ПараметрыСтатуса.ИдентификаторОперации,
				ПараметрыСтатуса.ДатаЗапросаСтатуса,
				ПараметрыНастройкиПодключения,
				ИдентификаторОперацииПроверкиВозврата());
			
			Если ЗначениеЗаполнено(РезультатПроверки.КодОшибки) Тогда
				ЗаполнитьЗначенияСвойств(
					РезультатОперации,
					РезультатПроверки,
					"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
				РезультатОперации.СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииОшибка();
				Возврат РезультатОперации;
			КонецЕсли;
			
			ОбработатьСтатусВозврата(
				РезультатОперации,
				РезультатПроверки.СтатусВозврата);
			
		КонецЕсли;
		
		РегистрыСведений.ИдентификаторыОперацийСБПc2b.ЗаписатьСтатусОперации(
			ДокументВозврата,
			ПараметрыСтатуса.ИдентификаторОперации,
			РезультатПроверки.ДатаОперации,
			РезультатПроверки.СтатусВозврата,
			РезультатПроверки.СуммаОперации,
			,
			ПараметрыСтатуса.ДатаЗапросаСтатуса);
		
		ЗаполнитьЗначенияСвойств(РезультатОперации.ПараметрыОперации, РезультатПроверки);
		РезультатОперации.ПараметрыОперации.ИдентификаторОперации = ПараметрыСтатуса.ИдентификаторОперации;
		РезультатОперации.ПараметрыОперации.ИдентификаторОплаты   = ПараметрыСтатуса.ИдентификаторОплаты;
		
	ИначеЕсли РезультатОперации.СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииТребуетсяПодтверждение() Тогда
		ВызватьИсключение НСтр("ru = 'Не правильный порядок вызова операций.'");
	КонецЕсли;
	
	Возврат РезультатОперации;
	
КонецФункции

// См. ПереводыСБПc2b.СтатусыОпераций.
//
Функция СтатусыОпераций() Экспорт
	
	ОбработанныеОперации = Новый Массив;
	ДанныеОпераций = ДанныеОперацийСТерминальнымСтатусом(ОбработанныеОперации);
	
	ОбработатьСтатусыСтатусыОплат(ДанныеОпераций, ОбработанныеОперации);
	ОбработатьСтатусыСтатусыВозвратов(ДанныеОпераций, ОбработанныеОперации);
	
	Возврат ОбработанныеОперации;
	
КонецФункции

#КонецОбласти

#Область СлужебныеОперацииОплат

// Формирует и заполняет новое описание заказа на оплату, определяет внешний идентификатор заказа
// и сохраняет параметры заказа для проверки идемпотентности.
//
// Параметры:
//  РезультатОперации - Структура - результат подготовки см.
//    ПереводыСБПc2bСлужебный.НовыйРезультатПлатежнаяСсылка
//  ДокументОплаты - ОпределяемыйТип.ДокументОперацииСБП - документ, который отражает
//    оплату в информационной базе;
//  КассоваяСсылка - Строка - идентификатор кассовой ссылки;
//  ПараметрыНастройкиПодключения - Структура - параметры выполнения операции
//    см. СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения;
//  ДополнительныеПараметры - Структура, Неопределено - дополнительные настройки формирования
//    заказа на оплату.
//
// Возвращаемое значение:
//  Структура - содержит результат подготовки заказа на оплату:
//    * ЗаказНаОплату - Структура - см. ОписаниеЗаказаНаОплату;
//    * Идентификатор - Строка - внешний идентификатор заказа на оплату.
//
Функция ДанныеЗаказаНаОплату(
		РезультатОперации,
		ДокументОплаты,
		КассоваяСсылка,
		ПараметрыНастройкиПодключения,
		ДополнительныеПараметры,
		ДанныеЧастичнойОплаты)
	
	ДанныеЗаказа = Новый Структура;
	ДанныеЗаказа.Вставить("ЗаказНаОплату", Неопределено);
	ДанныеЗаказа.Вставить("Идентификатор", Неопределено);
	
	ЗаказНаОплату = СформироватьДанныеЗаказаНаОплатуПоДокументуОперации(
		ДокументОплаты,
		ПараметрыНастройкиПодключения.НастройкаПодключения,
		ДополнительныеПараметры,
		РезультатОперации,
		ДанныеЧастичнойОплаты);
	
	Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
		Возврат ДанныеЗаказа;
	КонецЕсли;
	
	// Формирование идентификаторов оплаты.
	Идентификатор = ОпределитьИдентификаторЗаказаНаОплату(
		РезультатОперации,
		ДокументОплаты,
		ЗаказНаОплату,
		КассоваяСсылка,
		ПараметрыНастройкиПодключения);
	
	// Прекратить вызов операции, в случае ошибок.
	Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
		Возврат ДанныеЗаказа;
	КонецЕсли;
	
	// Сохранить данные заказа для проверки
	// идемпотентности.
	РегистрыСведений.ДанныеОперацийСБПc2b.СохранитьДанныеОплаты(
		Идентификатор,
		ЗаказНаОплату,
		КассоваяСсылка,
		ДокументОплаты,
		ПараметрыНастройкиПодключения.ИдентификаторМерчанта);
	
	ДанныеЗаказа.ЗаказНаОплату = ЗаказНаОплату;
	ДанныеЗаказа.Идентификатор = Идентификатор;
	
	Возврат ДанныеЗаказа;
	
КонецФункции

// Формирует и заполняет новое описание заказа на оплату в Системе быстрых платежей. При проведении оплаты
// проверяется заполнение всех свойств заказа.
//
// Возвращаемое значение:
//  Структура - содержит описание заказа на оплату в Системе быстрых платежей:
//    * СуммаОплаты - Число - сумма оплаты в Системе быстрых платежей. Сумма, которую необходимо
//      списать со счета или карты покупателя;
//    * ДатаОплаты - Дата - дата операции продажи;
//    * СрокЖизниQRКода - Число - содержит значение срока действия QR-кода в целых минутах.
//      Минимальное значение - 5 минут, максимальное значение - 129 600 минут
//      (90 дней в минутах). В случае передачи значения не входящего в выше
//      описанный диапазон возвращать ошибку "НеверныйФорматЗапроса".
//      Если значение не предано используется стандартный срок использования СБП.
//    * НазначениеПлатежа - Строка - информация о платеже, которая будет отображена пользователю
//      в момент сканирования QR-кода в мобильном приложении. Рекомендуется
//      делать строку не длинной и включать информацию об организации, которая
//      является получателем денежных средств, например:
//      Оплата СБП 524,00 RUB ООО Ромашка
//      Если строка не заполнена, будет передано стандартное представление
//      назначения: Оплата СБП 524,00 RUB;
//    * ОтложенноеПолучениеСтатуса - Булево - признак загрузки статуса оплаты регламентным заданием.
//
Функция СформироватьДанныеЗаказаНаОплатуПоДокументуОперации(
		ДокументОплаты,
		НастройкаПодключения,
		ДополнительныеПараметры,
		РезультатОперации,
		ДанныеЧастичнойОплаты) Экспорт
	
	ЗаказНаОплату = ОписаниеЗаказаНаОплату();
	
	Если Не ЗначениеЗаполнено(ДанныеЧастичнойОплаты) Тогда
		
		ЗаказНаОплату.ШаблоныНазначений = РегистрыСведений.ШаблоныНазначенийПлатежейСБП.ШаблоныНазначенийДокументаОперации(
			НастройкаПодключения,
			ДокументОплаты,
			СистемаБыстрыхПлатежейСлужебный.ИдентификаторСценарияСБПc2b());
			
		ИнтеграцияПодсистемБИП.ПриФормированииЗаказаНаОплатуСБП(
			ДокументОплаты,
			ЗаказНаОплату,
			НастройкаПодключения,
			ДополнительныеПараметры);
		ПереводыСБПc2bПереопределяемый.ПриФормированииЗаказаНаОплатуСБП(
			ДокументОплаты,
			ЗаказНаОплату,
			НастройкаПодключения,
			ДополнительныеПараметры);
			
	Иначе
		
		ЗаказНаОплату.ШаблоныНазначений = РегистрыСведений.ШаблоныНазначенийПлатежейСБП.ШаблоныНазначенийДокументаОперации(
			НастройкаПодключения,
			ДанныеЧастичнойОплаты.ОснованиеПлатежа,
			СистемаБыстрыхПлатежейСлужебный.ИдентификаторСценарияСБПc2b());
		
		ИнтеграцияПодсистемБИП.ПриФормированииЗаказаНаЧастичнуюОплатуСБП(
			ДанныеЧастичнойОплаты.ОснованиеПлатежа,
			ЗаказНаОплату,
			НастройкаПодключения,
			ДополнительныеПараметры);
		ПереводыСБПc2bПереопределяемый.ПриФормированииЗаказаНаЧастичнуюОплатуСБП(
			ДанныеЧастичнойОплаты.ОснованиеПлатежа,
			ЗаказНаОплату,
			НастройкаПодключения,
			ДополнительныеПараметры);
			
		ЗаказНаОплату.СуммаОплаты                = ДанныеЧастичнойОплаты.СуммаОплаты;
		ЗаказНаОплату.ДатаОплаты                 = ДанныеЧастичнойОплаты.ДатаОплаты;
		ЗаказНаОплату.ОтложенноеПолучениеСтатуса = Истина;
		
	КонецЕсли;
	
	// Валидация данных заказа на оплату и настроек.
	ПроверитьЗаказНаОплату(
		ЗаказНаОплату,
		РезультатОперации);
		
	Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
		Возврат ЗаказНаОплату;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗаказНаОплату.НазначениеПлатежа) Тогда
		ЗаказНаОплату.НазначениеПлатежа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Оплата СБП %1'")
			+ " "
			+ СистемаБыстрыхПлатежейСлужебный.ИдентификаторВалютыРоссийскийРубль(),
			СистемаБыстрыхПлатежейСлужебный.ПреобразоватьЧислоВФорматJSON(
				ЗаказНаОплату.СуммаОплаты));
	ИначеЕсли СтрДлина(ЗаказНаОплату.НазначениеПлатежа) > 140 Тогда
		ЗаказНаОплату.НазначениеПлатежа = Лев(ЗаказНаОплату.НазначениеПлатежа, 140);
	КонецЕсли;
	
	Возврат ЗаказНаОплату;
	
КонецФункции

// Формирует новое описание заказа на оплату в Системе быстрых платежей. При проведении оплаты
// проверяется заполнение всех свойств заказа.
//
// Возвращаемое значение:
//  Структура - содержит описание заказа на оплату в Системе быстрых платежей:
//    * СуммаОплаты - Число - сумма оплаты в Системе быстрых платежей. Сумма, которую необходимо
//      списать со счета или карты покупателя;
//    * ДатаОплаты - Дата - дата операции продажи;
//    * СрокЖизниQRКода - Число - содержит значение срока действия QR-кода в целых минутах.
//      Минимальное значение - 5 минут, максимальное значение - 129 600 минут
//      (90 дней в минутах). В случае передачи значения не входящего в выше
//      описанный диапазон возвращать ошибку "НеверныйФорматЗапроса".
//      Если значение не предано используется стандартный срок использования СБП.
//    * НазначениеПлатежа - Строка - информация о платеже, которая будет отображена пользователю
//      в момент сканирования QR-кода в мобильном приложении. Рекомендуется
//      делать строку не длинной и включать информацию об организации, которая
//      является получателем денежных средств, например:
//      Оплата СБП 524,00 RUB ООО Ромашка
//      Если строка не заполнена, будет передано стандартное представление
//      назначения: Оплата СБП 524,00 RUB;
//    * ОтложенноеПолучениеСтатуса - Булево - признак загрузки статуса оплаты регламентным заданием.
//    * ШаблоныНазначений - Соответствие - шаблоны назначений платежей доступные для настройки.
//
Функция ОписаниеЗаказаНаОплату()
	
	ЗаказаНаОплату = Новый Структура;
	ЗаказаНаОплату.Вставить("ДатаОплаты", Дата(1, 1, 1));
	ЗаказаНаОплату.Вставить("СуммаОплаты", 0);
	ЗаказаНаОплату.Вставить("СрокЖизниQRКода", Неопределено);
	ЗаказаНаОплату.Вставить("НазначениеПлатежа", "");
	ЗаказаНаОплату.Вставить("ОтложенноеПолучениеСтатуса", Ложь);
	ЗаказаНаОплату.Вставить("ШаблоныНазначений", Неопределено);
	
	Возврат ЗаказаНаОплату;
	
КонецФункции

// Формирует новый идентификатор заказа на оплату или получает существующий.
//
// Параметры:
//  РезультатОперации - Структура  - см. ПереводыСБПc2bСлужебный.НовыйРезультатПлатежнаяСсылка;
//  ДокументОплаты - ДокументСсылка - документ, который отражает
//   оплату в информационной базе;
//  ЗаказНаОплату - Структура - описание заказа на оплату см. функцию ОписаниеЗаказаНаОплату;
//  КассоваяСсылка - Строка - идентификатор кассовой ссылки;
//  ПараметрыНастройкиПодключения - Структура - параметры выполнения операции
//   см. ПараметрыНастройкиПодключения.
//
// Возвращаемое значение:
//  Строка - внешний идентификатор документа оплаты;
//
Функция ОпределитьИдентификаторЗаказаНаОплату(
		РезультатОперации,
		ДокументОплаты,
		ЗаказНаОплату,
		КассоваяСсылка,
		ПараметрыНастройкиПодключения)
	
	Идентификатор = РегистрыСведений.ИдентификаторыОперацийСБПc2b.ИдентификаторОперации(
		ДокументОплаты);
	
	// Первая итерация, дополнительных проверок не требуется.
	Если Не ЗначениеЗаполнено(Идентификатор) Тогда
		Возврат РегистрыСведений.ИдентификаторыОперацийСБПc2b.НовыйИдентификаторОперации(
			ДокументОплаты,
			ПараметрыНастройкиПодключения,
			,
			Истина,
			ЗаказНаОплату.ОтложенноеПолучениеСтатуса);
	КонецЕсли;
	
	ПараметрыСтатуса = РегистрыСведений.ИдентификаторыОперацийСБПc2b.ПараметрыОпределенияСтатусаОперации(
		ДокументОплаты);
	
	// Предыдущая операция генерации завершилась ошибкой,
	// необходимо запросить новый QR-код.
	Если Не ЗначениеЗаполнено(ПараметрыСтатуса.ИдентификаторОплаты) Тогда
		Возврат РегистрыСведений.ИдентификаторыОперацийСБПc2b.НовыйИдентификаторОперации(
			ДокументОплаты,
			ПараметрыНастройкиПодключения,
			,
			Ложь,
			ЗаказНаОплату.ОтложенноеПолучениеСтатуса);
	КонецЕсли;
	
	АнализИсторическихДанных = АнализИсторическихДанныхОплаты(
		ДокументОплаты,
		ЗаказНаОплату,
		КассоваяСсылка,
		Идентификатор,
		ПараметрыНастройкиПодключения);
	
	// Если по документу ранее был сформирован возврат, делать по нему оплату запрещено.
	// Необходимо получить статус возврата, а для оплаты сформировать новый документ.
	Если Не АнализИсторическихДанных.Оплата И ЗначениеЗаполнено(ПараметрыСтатуса.ИдентификаторОперации) Тогда
		РезультатОперации.КодОшибки          = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйФорматЗапроса();
		РезультатОперации.СообщениеОбОшибке  = НСтр("ru = 'Для документа ранее был сформирован возврат оплаты, создание новой оплаты запрещено.'");
		РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Для документа ранее был сформирован возврат оплаты, создание новой оплаты запрещено.'");
		Возврат Неопределено;
	КонецЕсли;
	
	// Если параметры заказа на оплату не изменились
	// можно выполнить повторный запрос, т.к. операция
	// создания заказа на оплату поддерживает идемпотентность.
	Если АнализИсторическихДанных.ДанныеИдентичны Тогда
		
		Возврат Идентификатор;
		
	Иначе
		
		ИсторическиеПараметрыНастройкиПодключения = ПереводыСБПc2bСлужебный.ПараметрыНастройкиПодключенияПоДокументу(
			ДокументОплаты);
		
		// Т.к. у СБП на текущий момент отсутствует операция
		// аннулирования QR-кода перед генерацией нового
		// следует проверить оплату предыдущего.
		ПараметрыСтатуса.ДатаЗапросаСтатуса = Дата(1, 1, 1);
		РезультатПроверки = ОпределитьСтатусОплаты(
			ПараметрыСтатуса,
			ИсторическиеПараметрыНастройкиПодключения,
			ИдентификаторОперацииПроверкиОплаты());
		
		Если РезультатПроверки.СтатусОплаты = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаВыполнена() Тогда
			РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиУжеОплачен();
			РезультатОперации.СообщениеОбОшибке = НСтр("ru = 'Оплата по ранее сформированному QR-коду уже выполнена, создание нового запрещено.'");
			РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Оплата по ранее сформированному QR-коду уже выполнена, создание нового запрещено.'");
			Возврат Неопределено;
		КонецЕсли;
	
		Возврат РегистрыСведений.ИдентификаторыОперацийСБПc2b.НовыйИдентификаторОперации(
			ДокументОплаты,
			ПараметрыНастройкиПодключения,
			,
			Ложь,
			ЗаказНаОплату.ОтложенноеПолучениеСтатуса);
		
	КонецЕсли;
	
КонецФункции

// Формирует новый идентификатор заказа на возврат или получает существующий.
//
// Параметры:
//  РезультатОперации - Структура  - см. ПереводыСБПc2bСлужебный.НовыйРезультатПлатежнаяСсылка;
//  ДокументОплаты - ДокументСсылка - документ, который отражает
//    оплату в информационной базе;
//  ЗаказНаВозврат - Структура - описание заказа на оплату см. функцию ОписаниеЗаказаНаВозврат;
//  ИдентификаторОплаты - Строка - идентификатор оплаты по которой производится возврат;
//  ПараметрыНастройкиПодключения - Структура - параметры выполнения операции
//    см. ПараметрыНастройкиПодключения.
//
// Возвращаемое значение:
//  Строка - внешний идентификатор документа возврата;
//
Функция ОпределитьИдентификаторЗаказаНаВозврат(
		РезультатОперации,
		ДокументВозврата,
		ЗаказНаВозврат,
		ИдентификаторОплаты,
		ПараметрыНастройкиПодключения)
	
	Идентификатор = РегистрыСведений.ИдентификаторыОперацийСБПc2b.ИдентификаторОперации(
		ДокументВозврата);
	
	// Первая итерация, дополнительных проверок не требуется.
	Если Не ЗначениеЗаполнено(Идентификатор) Тогда
		Возврат РегистрыСведений.ИдентификаторыОперацийСБПc2b.НовыйИдентификаторОперации(
			ДокументВозврата,
			ПараметрыНастройкиПодключения,
			ИдентификаторОплаты);
	КонецЕсли;
	
	ПараметрыСтатуса = РегистрыСведений.ИдентификаторыОперацийСБПc2b.ПараметрыОпределенияСтатусаОперации(
		ДокументВозврата);
	
	// Если по возврату уже получен отрицательный терминальный статус
	// можно сгенерировать новый идентификатор операции.
	Если ПараметрыСтатуса.СтатусОперации = ИдентификаторСтатусаНеОплачен()
		Или ПараметрыСтатуса.СтатусОперации = ИдентификаторСтатусаНетИнформации()
		Или ПараметрыСтатуса.СтатусОперации = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаОтклонена()
		Или ПараметрыСтатуса.СтатусОперации = ИдентификаторСтатусаПревышение() Тогда
		Возврат РегистрыСведений.ИдентификаторыОперацийСБПc2b.НовыйИдентификаторОперации(
			ДокументВозврата,
			ПараметрыНастройкиПодключения,
			ИдентификаторОплаты);
	КонецЕсли;
	
	ИсторическиеДанные = РегистрыСведений.ДанныеОперацийСБПc2b.ДанныеОперацииСБППоИдентификатору(
		Идентификатор);
	
	// Если по документу ранее был сформирован идентификатор оплаты, делать по нему возврат запрещено.
	// Необходимо получить статус оплаты, а для возврата сформировать новый документ.
	Если ИсторическиеДанные.Оплата И ЗначениеЗаполнено(ПараметрыСтатуса.ИдентификаторОплаты) Тогда
		РезультатОперации.КодОшибки          = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйФорматЗапроса();
		РезультатОперации.СообщениеОбОшибке  = НСтр("ru = 'Для документа ранее был сформирован идентификатор оплаты, создание возврата запрещено.'");
		РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Для документа ранее был сформирован идентификатор оплаты, создание возврата запрещено.'");
		Возврат Неопределено;
	КонецЕсли;
	
	// Если параметры заказа на возврат не изменились
	// можно выполнить повторный запрос, т.к. операция
	// создания заказа на возврат поддерживает идемпотентность.
	Если ИсторическиеДанные <> Неопределено
		И ИсторическиеДанные.ДатаОперации = ЗаказНаВозврат.ДатаВозврата
		И ИсторическиеДанные.СуммаОперации = ЗаказНаВозврат.СуммаВозврата
		И ИсторическиеДанные.ИдентификаторМерчанта = ПараметрыНастройкиПодключения.ИдентификаторМерчанта
		И ИсторическиеДанные.ДокументОперации = ДокументВозврата Тогда
		
		Возврат Идентификатор;
		
	Иначе
		
		РезультатОперации.КодОшибки          = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйФорматЗапроса();
		РезультатОперации.СообщениеОбОшибке  = НСтр("ru = 'Для документа уже сформирован возврат со значениями суммы и даты, отличающимися от текущего документа. Создание возврата запрещено.'");
		РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Для документа уже сформирован возврат со значениями суммы и даты, отличающимися от текущего документа. Создание возврата запрещено.'");
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

// Определяет изменение заказа на оплату перед формированием платежной ссылки.
//
// Параметры:
//  ДокументОплаты - ОпределяемыйТип.ДокументОперацииСБП - документ, который отражает
//    оплату в информационной базе;
//  ЗаказНаОплату - Структура - см. ОписаниеЗаказаНаОплату;
//  КассоваяСсылка - Строка - идентификатор кассовой ссылки;
//  Идентификатор - Строка - внешний идентификатор заказа на оплату;
//  ПараметрыНастройкиПодключения - Структура - параметры выполнения операции
//    см. СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения;
//
// Возвращаемое значение:
//  Структура - содержит результат подготовки заказа на оплату:
//    * Оплата - Булево - признак оплаты;
//    * НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей - сохраненная настройка;
//    * ДанныеИдентичны - Булево - признак идентичности заказов;
//
Функция АнализИсторическихДанныхОплаты(
		ДокументОплаты,
		ЗаказНаОплату,
		КассоваяСсылка,
		Идентификатор,
		ПараметрыНастройкиПодключения) Экспорт
	
	ИсторическиеДанные = РегистрыСведений.ДанныеОперацийСБПc2b.ДанныеОперацииСБППоИдентификатору(
		Идентификатор);
	
	ДанныеАнализаИсторическихДанныхОплаты = Новый Структура;
	ДанныеАнализаИсторическихДанныхОплаты.Вставить("Оплата",              ИсторическиеДанные.Оплата);
	ДанныеАнализаИсторическихДанныхОплаты.Вставить("НастройкаПодключения", ИсторическиеДанные.НастройкаПодключения);
	
	Если ИсторическиеДанные <> Неопределено
		И ИсторическиеДанные.ДатаОперации = ЗаказНаОплату.ДатаОплаты
		И ИсторическиеДанные.СуммаОперации = ЗаказНаОплату.СуммаОплаты
		И ИсторическиеДанные.НазначениеПлатежа = ЗаказНаОплату.НазначениеПлатежа
		И ИсторическиеДанные.ИдентификаторМерчанта = ПараметрыНастройкиПодключения.ИдентификаторМерчанта
		И ИсторическиеДанные.ИдентификаторУчастника = ПараметрыНастройкиПодключения.ИдентификаторУчастника
		И ИсторическиеДанные.ДокументОперации = ДокументОплаты
		И ИсторическиеДанные.КассоваяСсылка = КассоваяСсылка Тогда
		
		ДанныеАнализаИсторическихДанныхОплаты.Вставить("ДанныеИдентичны", Истина);
		
	Иначе
		
		ДанныеАнализаИсторическихДанныхОплаты.Вставить("ДанныеИдентичны", Ложь);
		
	КонецЕсли;
	
	Возврат ДанныеАнализаИсторическихДанныхОплаты;
	
КонецФункции

// Производит валидацию параметров заказа на оплату в Системе быстрых платежей.
//
// Параметры:
//  ЗаказНаОплату - Структура - данные для оплаты в Системе быстрых платежей.
//  РезультатОперации  - Структура - результат проверки заказа на оплату в Системе быстрых платежей:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом:
//    *СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора;
//
Процедура ПроверитьЗаказНаОплату(
		ЗаказНаОплату,
		РезультатОперации)
	
	Если Не ЗначениеЗаполнено(ЗаказНаОплату.СуммаОплаты)
		Или Не ЗначениеЗаполнено(ЗаказНаОплату.ДатаОплаты) Тогда
		
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйФорматЗапроса();
		РезультатОперации.СообщениеОбОшибке  = НСтр("ru = 'Некорректно сформирован заказ на оплату. Обратитесь к администратору.'");
		РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'При проверке заказа на оплату в Системе быстрых платежей возникли ошибки.'");
		
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
	КонецЕсли;
	
	ЗапрещенныеСимволы = СистемаБыстрыхПлатежейКлиентСервер.ЗапрещенныеСимволыНазначенияПлатежа(
		ЗаказНаОплату.НазначениеПлатежа);
	Если ЗапрещенныеСимволы.Количество() <> 0 Тогда
		
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйФорматЗапроса();
		РезультатОперации.СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В назначение присутствуют запрещенные символы: %1. Обратитесь к администратору.'"),
			СтрСоединить(ЗапрещенныеСимволы, ","));
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В назначение присутствуют запрещенные символы: %1. Необходимо обновить назначения платежей в настройках подключения.'"),
			СтрСоединить(ЗапрещенныеСимволы, ","));
		
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Производит проверку идентификатора оплаты.
//
// Параметры:
//  ДанныеСтроки - Строка - идентификатор оплаты;
//  РезультатОперации - Структура - см. СистемаБыстрыхПлатежейСлужебный.НовыйРезультатДлительнойОперации.
//
Процедура ПроверитьИдентификаторОбъектаОплаты(ДанныеСтроки, РезультатОперации) Экспорт
	
	Если ДанныеСтроки.Количество() <> 3 Тогда
		
		РезультатОперации.СтатусОперации  = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииОшибка();
		РезультатОперации.КодОшибки          = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйФорматЗапроса();
		РезультатОперации.СообщениеОбОшибке  = НСтр("ru = 'Идентификатор оплаты в Системе быстрых платежей не соответствует формату.'");
		РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Идентификатор оплаты в Системе быстрых платежей не соответствует формату.'");
		
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
	ИначеЕсли НРег(ДанныеСтроки[0]) <> НРег(СистемаБыстрыхПлатежейСлужебный.ИдентификаторСБП()) Тогда
		
		РезультатОперации.СтатусОперации  = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииОшибка();
		РезультатОперации.КодОшибки          = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйФорматЗапроса();
		РезультатОперации.СообщениеОбОшибке  = НСтр("ru = 'Идентификатор системы отличается от СБП.'");
		РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Идентификатор системы отличается от СБП.'");
		
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
	ИначеЕсли Не ЗначениеЗаполнено(ДанныеСтроки[1]) Тогда
		
		РезультатОперации.СтатусОперации  = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииОшибка();
		РезультатОперации.КодОшибки          = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйФорматЗапроса();
		РезультатОперации.СообщениеОбОшибке  = НСтр("ru = 'Идентификатор QR-кода не заполнен.'");
		РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Идентификатор QR-кода не заполнен.'");
		
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
	ИначеЕсли Не ЗначениеЗаполнено(ДанныеСтроки[2]) Тогда
		
		РезультатОперации.СтатусОперации  = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииОшибка();
		РезультатОперации.КодОшибки          = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйФорматЗапроса();
		РезультатОперации.СообщениеОбОшибке  = НСтр("ru = 'Идентификатор оплаты не заполнен.'");
		РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Идентификатор оплаты не заполнен.'");
		
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет статус заказа на оплату Системе быстрых платежей.
//
// Параметры:
//  ПараметрыСтатуса - Структура - см. РегистрыСведений.ИдентификаторыОперацийСБПc2b.ПараметрыОпределенияСтатусаОперации
//  ПараметрыНастройкиПодключения - Структура - параметры выполнения операции
//    см. СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения;
//  ИдентификаторОперацииПроверки - Строка - идентификатор операции проверки наличия статуса;
//  СвойствоИдентификаторОплаты - Строка - свойство в ПараметрыСтатуса, в котором хранится идентификатор.
//
// Возвращаемое значение:
//  Структура - результат проверки статуса заказа на оплату в Системе быстрых платежей:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом;
//    * СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора;
//    * СтатусОплаты - Строка - состояние оплаты в Системе быстрых платежей;
//    * ИдентификаторОперации - Строка - идентификатор оплаты;
//    * ДатаОперации - Дата - дата регистрации операции в Системе быстрых платежей;
//    * СуммаОперации - Число - фактическая суммы оплаты по документу.
//
Функция ОпределитьСтатусОплаты(
		ПараметрыСтатуса,
		ПараметрыНастройкиПодключения,
		ИдентификаторОперацииПроверки,
		ЗапросНаличияСтатуса = Истина,
		СвойствоИдентификаторОплаты = "ИдентификаторОплаты")
	
	// Параметры активации могут быть только у кассовых ссылок,
	// поэтому, если они не заполнены выполняется проверка статуса
	// динамической ссылки.
	Если Не ЗначениеЗаполнено(ПараметрыСтатуса.ПараметрыАктивации) Тогда
		Возврат ОперацияСтатусОплатыДинамическойСсылки(
			ПараметрыСтатуса[СвойствоИдентификаторОплаты],
			ПараметрыСтатуса.ДатаЗапросаСтатуса,
			ПараметрыНастройкиПодключения,
			ИдентификаторОперацииПроверки,
			ЗапросНаличияСтатуса);
	Иначе
		Возврат ОперацияСтатусОплатыКассовойСсылки(
			ПараметрыСтатуса[СвойствоИдентификаторОплаты],
			ПараметрыСтатуса.ПараметрыАктивации,
			ПараметрыСтатуса.ДатаЗапросаСтатуса,
			ПараметрыНастройкиПодключения,
			ИдентификаторОперацииПроверки,
			ЗапросНаличияСтатуса);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеОперацииВозвратов

// Формирует новое описание заказа на возврат в Системе быстрых платежей. При проведении возврата
// проверяется заполнение всех свойств.
//
// Возвращаемое значение:
//  Структура - содержит описание заказа на оплату в Системе быстрых платежей:
//    *СуммаВозврата - Число - сумма возврата в Системе быстрых платежей. Сумма, которую необходимо
//      списать со счета или карты покупателя;
//    *ДатаВозврата - Дата - дата операции возврата.
//
Функция ОписаниеЗаказаНаВозврат()
	
	ЗаказаНаОплату = Новый Структура;
	ЗаказаНаОплату.Вставить("ДатаВозврата",  Дата(1, 1, 1));
	ЗаказаНаОплату.Вставить("СуммаВозврата", 0);
	
	Возврат ЗаказаНаОплату;
	
КонецФункции

// Производит валидацию параметров заказа на возврат в Системе быстрых платежей.
//
// Параметры:
//  ЗаказНаВозврат - Структура - данные для оплаты в Системе быстрых платежей.
//  РезультатОперации  - Структура - результат создания возврата оплаты в Системе быстрых платежей:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом:
//    *СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора;
//
Процедура ПроверитьЗаказНаВозврат(ЗаказНаВозврат, РезультатОперации)
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(ЗаказНаВозврат.СуммаВозврата)
		Или Не ЗначениеЗаполнено(ЗаказНаВозврат.ДатаВозврата) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		РезультатОперации.КодОшибки          = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйФорматЗапроса();
		РезультатОперации.СообщениеОбОшибке  = НСтр("ru = 'Некорректно сформирован заказ на возврат. Обратитесь к администратору.'");
		РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'При проверке заказа на возврат в Системе быстрых платежей возникли ошибки.'");
		
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет результат операции на основании статуса операции возврата.
//
// Параметры:
//  СтатусВозврата - Строка - статус возврата СБП;
//  РезультатОперации - Структура - см. СистемаБыстрыхПлатежейСлужебный.НовыйРезультатДлительнойОперации.
//
Процедура ОбработатьСтатусВозврата(РезультатОперации, СтатусВозврата)
	
	Если СтатусВозврата = ИдентификаторСтатусаПревышение() Тогда
		РезультатОперации.СтатусОперации     = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииОшибка();
		РезультатОперации.КодОшибки          = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйФорматЗапроса();
		РезультатОперации.СообщениеОбОшибке  = НСтр("ru = 'Превышена допустимая сумма возврата по заказу на оплату.'");
		РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Превышена допустимая сумма возврата по заказу на оплату.'");
	ИначеЕсли СтатусВозврата = ИдентификаторСтатусаНеОплачен() Тогда
		РезультатОперации.СтатусОперации     = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииОшибка();
		РезультатОперации.КодОшибки          = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйФорматЗапроса();
		РезультатОперации.СообщениеОбОшибке  = НСтр("ru = 'Оплата в Системе быстрых платежей не выполнена, возврат невозможен.'");
		РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Оплата в Системе быстрых платежей не выполнена, возврат невозможен.'");
	ИначеЕсли СтатусВозврата = ИдентификаторСтатусаНетИнформации() Тогда
		РезультатОперации.СтатусОперации     = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииОшибка();
		РезультатОперации.КодОшибки          = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйФорматЗапроса();
		РезультатОперации.СообщениеОбОшибке  = НСтр("ru = 'Оплата в Системе быстрых платежей не обнаружена, возврат невозможен.'");
		РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Оплата в Системе быстрых платежей не обнаружена, возврат невозможен.'");
	ИначеЕсли СтатусВозврата = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаОтменена() Тогда
		РезультатОперации.СтатусОперации     = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииОтменена();
		РезультатОперации.КодОшибки          = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеизвестнаяОшибка();
		РезультатОперации.СообщениеОбОшибке  = НСтр("ru = 'Операция отменена по неизвестной причине, повторите операцию или обратитесь к администратору.'");
		РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Операция отменена по неизвестной причине, дополнительная информация об отмене записана в журнал регистрации.'");
	ИначеЕсли СтатусВозврата = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаВыполнена() Тогда
		РезультатОперации.СтатусОперации  = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииВыполнена();
	ИначеЕсли СтатусВозврата = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаВПроцессе() Тогда
		РезультатОперации.СтатусОперации  = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииВыполняется();
	ИначеЕсли СтатусВозврата = ИдентификаторСтатусаТребуетсяПодтверждение() Тогда
		РезультатОперации.СтатусОперации  = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииТребуетсяПодтверждение();
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не известный статус возврата %1'"),
			СтатусВозврата);
	КонецЕсли;
	
	Если РезультатОперации.СтатусОперации  = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииОшибка() Тогда
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеОперацииСверкиВзаиморасчетов

// Заполняет результат операции на основании статуса отчета.
//
// Параметры:
//  РезультатОперации - Структура - см. СистемаБыстрыхПлатежейСлужебный.НовыйРезультатДлительнойОперации;
//  СтатусОтчета - Строка - статус формирования отчета;
//  ТипОшибки - Строка - вид ошибки формирования отчета.
//
Процедура ОбработатьСтатусОтчета(РезультатОперации, СтатусОтчета, ТипОшибки)
	
	Если СтатусОтчета = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаВыполнена() Тогда
		РезультатОперации.СтатусОперации  = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииВыполнена();
	ИначеЕсли СтатусОтчета = ИдентификаторСтатусаОжидание() Тогда
		РезультатОперации.СтатусОперации  = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииВыполняется();
	ИначеЕсли СтатусОтчета = ИдентификаторСтатусаОшибка() Тогда
		РезультатОперации.СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииОшибка();
		Если ТипОшибки = ИдентификаторСтатусаПревышенПериод() Тогда
			РезультатОперации.КодОшибки          = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйФорматЗапроса();
			РезультатОперации.СообщениеОбОшибке  = НСтр("ru = 'Превышен максимально допустимый период отчета. Измените даты отчета и повторите запрос.'");
			РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Превышен максимально допустимый период отчета. Измените даты отчета и повторите запрос.'");
		Иначе
			РезультатОперации.КодОшибки          = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеизвестнаяОшибка();
			РезультатОперации.СообщениеОбОшибке  = НСтр("ru = 'Отчет по сверке оборотов не сформирован.'");
			РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Отчет по сверке оборотов не сформирован.'");
		КонецЕсли;
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не известный статус возврата %1'"),
			СтатусОтчета);
	КонецЕсли;
	
	Если РезультатОперации.СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииОшибка() Тогда
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
	КонецЕсли;
	
КонецПроцедуры

// Создает описание результатов получения отчета по операциям.
//
// Возвращаемое значение:
//  ТаблицаЗначений - описание результат получения отчета:
//   *ТипОперации - Строка - тип операции, оплата или возврат;
//   *ДатаОперации - Дата - дата первичного документа в 1С, который зарегистрировал операцию;
//   *Сумма - Число - сумма операции в Системе быстрых платежей;
//   *СуммаКомиссии - Число - рассчитанная сумма комиссии;
//   *ИдентификаторОперации - Строка - идентификатор операции в Системе быстрых платежей;
//   *ИдентификаторОплаты - Строка - идентификатор оплаты в Системе быстрых платежей.
//
Функция НовыйДанныеОтчетаПоСверкеОпераций()
	
	ДанныеОпераций = Новый ТаблицаЗначений;
	ДанныеОпераций.Колонки.Добавить("ТипОперации", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ДанныеОпераций.Колонки.Добавить("ДатаОперации", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ДанныеОпераций.Колонки.Добавить("Сумма", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ДанныеОпераций.Колонки.Добавить("СуммаКомиссии", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ДанныеОпераций.Колонки.Добавить("ИдентификаторОперации", ОбщегоНазначения.ОписаниеТипаСтрока(36));
	ДанныеОпераций.Колонки.Добавить("ИдентификаторОплаты", ОбщегоНазначения.ОписаниеТипаСтрока(36));
	
	Возврат ДанныеОпераций;
	
КонецФункции

#КонецОбласти

#Область СлужебныеОперацииОтложенногоПолученияСтатусов

// Определяет операции по котором необходимо выполнить
// получение статуса в сервисе участника СБП.
//
// Параметры:
//  ОбработанныеОперации - Массив из ОпределяемыйТип.ДокументОперацииСБП - данные обработанных документов.
//
// Возвращаемое значение:
//  Массив - данные операция, по которым необходимо загрузить статус.
//
Функция ДанныеОперацийСТерминальнымСтатусом(ОбработанныеОперации)
	
	ОтложенныеОперации = РегистрыСведений.ИдентификаторыОперацийСБПc2b.ОтложенныеОперации();
	
	ДанныеОпераций = Новый Массив;
	
	ИдентификаторыДинамическихСсылок = НовыйИдентификаторыПроверкиНаличияСтатуса();
	ИдентификаторыКассовыхСсылок = НовыйИдентификаторыПроверкиНаличияСтатусаКассовыхСсылок();
	ИдентификаторыВозвратов = НовыйИдентификаторыПроверкиНаличияСтатуса();
	
	Для Каждого КлючЗначение Из ОтложенныеОперации Цикл
		
		ОперацииДляОбработки = Новый Массив;
		ДатаЗапросаСтатуса = ТекущаяДатаСеанса();
		
		Для Каждого Операция Из КлючЗначение.Значение Цикл
			
			// Если операция уже в терминальном статусе, выполнять запрос
			// не имеет смысла, необходимо выполнить обработку в прикладной
			// логике и перейти к следующей.
			Если Операция.СтатусОперации <> СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаВПроцессе() Тогда
				ПриЗагрузкеСтатусаОперации(
					Операция.ДокументОперации,
					Операция.НастройкаПодключения,
					Операция.ПараметрыОперации,
					Операция.СтатусОперации,
					"",
					ОбработанныеОперации);
				Продолжить;
			КонецЕсли;
			
			Если Операция.Оплата Тогда
				
				// Если заполнены параметры активации, это кассовая ссылка,
				// она обрабатывается особым способом.
				Если ЗначениеЗаполнено(Операция.ПараметрыАктивации) Тогда
					ДанныеОплаты = ИдентификаторыКассовыхСсылок.Добавить();
					ДанныеОплаты.ПараметрыАктивации = Операция.ПараметрыАктивации;
				Иначе
					ДанныеОплаты = ИдентификаторыДинамическихСсылок.Добавить();
				КонецЕсли;
				
				ДанныеОплаты.Идентификатор = Операция.ИдентификаторОплаты;
				
				ДанныеОплаты.ДатаЗапросаСтатуса = ?(Не ЗначениеЗаполнено(Операция.ДатаЗапросаСтатуса),
					ДатаЗапросаСтатуса,
					Операция.ДатаЗапросаСтатуса);
				
				Если ИдентификаторыДинамическихСсылок.Количество() > 19 Тогда
					
					РезультатПроверки = ОперацияПроверкаНаличияСтатусаОперацийОплат(
						ИдентификаторыДинамическихСсылок,
						КлючЗначение.Ключ,
						ИдентификаторОперацииПроверкиДлительнойОплаты());
					
					Если Не ЗначениеЗаполнено(РезультатПроверки.КодОшибки) Тогда
						ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
							ОперацииДляОбработки,
							РезультатПроверки.Идентификаторы);
					КонецЕсли;
					
					ИдентификаторыДинамическихСсылок.Очистить();
					
				КонецЕсли;
				
				Если ИдентификаторыКассовыхСсылок.Количество() > 19 Тогда
					
					РезультатПроверки = ОперацияПроверкаНаличияСтатусаКассовыхСсылок(
						ИдентификаторыКассовыхСсылок,
						КлючЗначение.Ключ,
						ИдентификаторОперацииПроверкиДлительнойОплаты());
					
					Если Не ЗначениеЗаполнено(РезультатПроверки.КодОшибки) Тогда
						ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
							ОперацииДляОбработки,
							РезультатПроверки.Идентификаторы);
					КонецЕсли;
					
					ИдентификаторыКассовыхСсылок.Очистить();
					
				КонецЕсли;
				
			Иначе
				
				ДанныеВозврата = ИдентификаторыВозвратов.Добавить();
				ДанныеВозврата.Идентификатор = Операция.ИдентификаторОперации;
				
				ДанныеВозврата.ДатаЗапросаСтатуса = ?(Не ЗначениеЗаполнено(Операция.ДатаЗапросаСтатуса),
					ДатаЗапросаСтатуса,
					Операция.ДатаЗапросаСтатуса);
				
				Если ИдентификаторыВозвратов.Количество() > 19 Тогда
					
					РезультатПроверки = ОперацияПроверкаНаличияСтатусаОперацийВозвратов(
						ИдентификаторыВозвратов,
						КлючЗначение.Ключ,
						ИдентификаторОперацииПроверкиДлительногоВозврата());
					
					Если Не ЗначениеЗаполнено(РезультатПроверки.КодОшибки) Тогда
						ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
							ОперацииДляОбработки,
							РезультатПроверки.Идентификаторы);
					КонецЕсли;
					
					ИдентификаторыВозвратов.Очистить();
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ИдентификаторыДинамическихСсылок.Количество() <> 0 Тогда
			
			РезультатПроверки = ОперацияПроверкаНаличияСтатусаОперацийОплат(
				ИдентификаторыДинамическихСсылок,
				КлючЗначение.Ключ,
				ИдентификаторОперацииПроверкиДлительнойОплаты());
			
			Если Не ЗначениеЗаполнено(РезультатПроверки.КодОшибки) Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
					ОперацииДляОбработки,
					РезультатПроверки.Идентификаторы);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИдентификаторыКассовыхСсылок.Количество() <> 0 Тогда
			
			РезультатПроверки = ОперацияПроверкаНаличияСтатусаКассовыхСсылок(
				ИдентификаторыКассовыхСсылок,
				КлючЗначение.Ключ,
				ИдентификаторОперацииПроверкиДлительнойОплаты());
			
			Если Не ЗначениеЗаполнено(РезультатПроверки.КодОшибки) Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
					ОперацииДляОбработки,
					РезультатПроверки.Идентификаторы);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИдентификаторыВозвратов.Количество() <> 0 Тогда
			
			РезультатПроверки = ОперацияПроверкаНаличияСтатусаОперацийВозвратов(
				ИдентификаторыВозвратов,
				КлючЗначение.Ключ,
				ИдентификаторОперацииПроверкиДлительногоВозврата());
			
			Если Не ЗначениеЗаполнено(РезультатПроверки.КодОшибки) Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
					ОперацииДляОбработки,
					РезультатПроверки.Идентификаторы);
			КонецЕсли;
			
		КонецЕсли;
		
		Для Каждого Операция Из КлючЗначение.Значение Цикл
			
			// Если операция уже в терминальном статусе, выполнять запрос
			// не имеет смысла.
			Если Операция.СтатусОперации <> СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаВПроцессе() Тогда
				Продолжить;
			КонецЕсли;
			
			Если Операция.Оплата Тогда
				
				// Если заполнены параметры активации, это кассовая ссылка,
				// она обрабатывается особым способом.
				Если ЗначениеЗаполнено(Операция.ПараметрыАктивации) Тогда
					ЗапроситьСтатус = (ОперацииДляОбработки.Найти(Операция.ПараметрыАктивации) <> Неопределено);
				Иначе
					ЗапроситьСтатус = (ОперацииДляОбработки.Найти(Операция.ИдентификаторОплаты) <> Неопределено);
				КонецЕсли;
				
				ИдентификаторОперации = Операция.ИдентификаторОплаты;
				
			Иначе
				ЗапроситьСтатус = (ОперацииДляОбработки.Найти(Операция.ИдентификаторОперации)  <> Неопределено);
				ИдентификаторОперации = Операция.ИдентификаторОперации;
			КонецЕсли;
			
			Если ЗапроситьСтатус Тогда
				
				// Формирование данных для запроса статуса статуса.
				Операция.ДатаЗапросаСтатуса = ДатаЗапросаСтатуса;
				
				ОтложеннаяОперация = Новый Структура;
				ОтложеннаяОперация.Вставить("ДокументОперации", Операция.ДокументОперации);
				ОтложеннаяОперация.Вставить("НастройкаПодключения", Операция.НастройкаПодключения);
				ОтложеннаяОперация.Вставить("Идентификатор", ИдентификаторОперации);
				ОтложеннаяОперация.Вставить("ПериодИспользования", Операция.ПериодИспользования);
				ОтложеннаяОперация.Вставить("Оплата", Операция.Оплата);
				ОтложеннаяОперация.Вставить("ЗапроситьСтатус", ЗапроситьСтатус);
				ОтложеннаяОперация.Вставить("ДатаЗапросаСтатуса", ДатаЗапросаСтатуса);
				ОтложеннаяОперация.Вставить("КоличествоПопыток", Операция.КоличествоПопыток);
				ОтложеннаяОперация.Вставить("ПараметрыАктивации", Операция.ПараметрыАктивации);
				
				ДанныеОпераций.Добавить(ОтложеннаяОперация);
				
			ИначеЕсли Не ЗначениеЗаполнено(Операция.ДатаЗапросаСтатуса) Тогда
				
				// Для операций, по которым не требуется запрашивать статус,
				// обновляем дату запроса статуса.
				РегистрыСведений.ИдентификаторыОперацийСБПc2b.ЗаписатьСтатусОперации(
					Операция.ДокументОперации,
					Операция.ИдентификаторОперации,
					Дата(1, 1, 1),
					Операция.СтатусОперации,
					,
					,
					ДатаЗапросаСтатуса);
				
			ИначеЕсли Операция.Оплата И Операция.ПериодИспользования < (ТекущаяДатаСеанса() + 600) Тогда
				
				ПриЗагрузкеСтатусаОперации(
					Операция.ДокументОперации,
					Операция.НастройкаПодключения,
					Операция.ПараметрыОперации,
					СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаОтклонена(),
					"",
					ОбработанныеОперации);
				Продолжить;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ДанныеОпераций;
	
КонецФункции

// Загружает статусы оплат операций.
//
// Параметры:
//  ОтложенныеОперации  - Соответствие - см. СервисПереводыСБПc2b.ДанныеОперацийСТерминальнымСтатусом;
//  ОбработанныеОперации - Массив из ОпределяемыйТип.ДокументОперацииСБП - данные обработанных документов.
//
Процедура ОбработатьСтатусыСтатусыОплат(ДанныеОпераций, ОбработанныеОперации)
	
	ДокументыОплаты = Новый Массив;
	Для Каждого ОтложеннаяОперация Из ДанныеОпераций Цикл
		
		Если Не ОтложеннаяОперация.Оплата Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументыОплаты.Добавить(ОтложеннаяОперация.ДокументОперации);
		
	КонецЦикла;
	
	ПараметрыНастроекПодключения = ПереводыСБПc2bСлужебный.ПараметрыНастроекПодключенияПоДокументам(
		ДокументыОплаты);
	
	Для Каждого ОтложеннаяОперация Из ДанныеОпераций Цикл
		
		Если Не ОтложеннаяОперация.Оплата Тогда
			Продолжить;
		КонецЕсли;
		
		РезультатПроверки = ОпределитьСтатусОплаты(
			ОтложеннаяОперация,
			ПараметрыНастроекПодключения.Получить(ОтложеннаяОперация.ДокументОперации),
			ИдентификаторОперацииПроверкиДлительнойОплаты(),
			Ложь,
			"Идентификатор");
		
		Если ЗначениеЗаполнено(РезультатПроверки.КодОшибки) Тогда
			РегистрыСведений.ИдентификаторыОперацийСБПc2b.УвеличитьКоличествоПопытокЗапросаСтатуса(
				ОтложеннаяОперация.ДокументОперации);
			Если ОтложеннаяОперация.КоличествоПопыток >= РегистрыСведений.ИдентификаторыОперацийСБПc2b.МаксимальноеКоличествоПопытокЗапросаСтатуса(Истина) Тогда
				ПриЗагрузкеСтатусаОперации(
					ОтложеннаяОперация.ДокументОперации,
					ОтложеннаяОперация.НастройкаПодключения,
					СистемаБыстрыхПлатежейСлужебный.НовыйОписаниеПараметровОперации(),
					ИдентификаторСтатусаОшибка(),
					РезультатПроверки.СообщениеОбОшибке,
					ОбработанныеОперации);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если РезультатПроверки.СтатусОплаты = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаВПроцессе()
			И (ОтложеннаяОперация.ПериодИспользования + 600) < ТекущаяДатаСеанса() Тогда
			РезультатПроверки.СтатусОплаты = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаОтклонена();
		КонецЕсли;
		
		РегистрыСведений.ИдентификаторыОперацийСБПc2b.ЗаписатьСтатусОперации(
			ОтложеннаяОперация.ДокументОперации,
			РезультатПроверки.ИдентификаторОперации,
			РезультатПроверки.ДатаОперации,
			РезультатПроверки.СтатусОплаты,
			РезультатПроверки.СуммаОперации,
			,
			ОтложеннаяОперация.ДатаЗапросаСтатуса);
		
		Если РезультатПроверки.СтатусОплаты = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаВыполнена()
			Или РезультатПроверки.СтатусОплаты = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаОтклонена() Тогда
			
			ПараметрыОперации = СистемаБыстрыхПлатежейСлужебный.НовыйОписаниеПараметровОперации();
			ЗаполнитьЗначенияСвойств(ПараметрыОперации, РезультатПроверки);
			ПараметрыОперации.ИдентификаторОперации = РезультатПроверки.ИдентификаторОперации;
			
			ПриЗагрузкеСтатусаОперации(
				ОтложеннаяОперация.ДокументОперации,
				ОтложеннаяОперация.НастройкаПодключения,
				ПараметрыОперации,
				РезультатПроверки.СтатусОплаты,
				РезультатПроверки.СообщениеОбОшибке,
				ОбработанныеОперации);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Загружает статусы возвратов операций.
//
// Параметры:
//  ОтложенныеОперации  - Соответствие - см. СервисПереводыСБПc2b.ДанныеОперацийСТерминальнымСтатусом;
//  ОбработанныеОперации - Массив из ОпределяемыйТип.ДокументОперацииСБП - данные обработанных документов.
//
Процедура ОбработатьСтатусыСтатусыВозвратов(ДанныеОпераций, ОбработанныеОперации)
	
	ДокументыОплаты = Новый Массив;
	Для Каждого ОтложеннаяОперация Из ДанныеОпераций Цикл
		
		Если ОтложеннаяОперация.Оплата Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументыОплаты.Добавить(ОтложеннаяОперация.ДокументОперации);
		
	КонецЦикла;
	
	ПараметрыНастроекПодключения = ПереводыСБПc2bСлужебный.ПараметрыНастроекПодключенияПоДокументам(
		ДокументыОплаты);
	
	Для Каждого ОтложеннаяОперация Из ДанныеОпераций Цикл
		
		Если ОтложеннаяОперация.Оплата Тогда
			Продолжить;
		КонецЕсли;
		
		РезультатПроверки = ОперацияСтатусВозврата(
			ОтложеннаяОперация.Идентификатор,
			ОтложеннаяОперация.ДатаЗапросаСтатуса,
			ПараметрыНастроекПодключения.Получить(ОтложеннаяОперация.ДокументОперации),
			ИдентификаторОперацииПроверкиДлительногоВозврата(),
			Ложь);
		
		Если ЗначениеЗаполнено(РезультатПроверки.КодОшибки) Тогда
			РегистрыСведений.ИдентификаторыОперацийСБПc2b.УвеличитьКоличествоПопытокЗапросаСтатуса(
				ОтложеннаяОперация.ДокументОперации);
			Если ОтложеннаяОперация.КоличествоПопыток >= РегистрыСведений.ИдентификаторыОперацийСБПc2b.МаксимальноеКоличествоПопытокЗапросаСтатуса(Ложь) Тогда
					ПриЗагрузкеСтатусаОперации(
						ОтложеннаяОперация.ДокументОперации,
						ОтложеннаяОперация.НастройкаПодключения,
						СистемаБыстрыхПлатежейСлужебный.НовыйОписаниеПараметровОперации(),
						ИдентификаторСтатусаОшибка(),
						РезультатПроверки.СообщениеОбОшибке,
						ОбработанныеОперации);
				КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		РегистрыСведений.ИдентификаторыОперацийСБПc2b.ЗаписатьСтатусОперации(
			ОтложеннаяОперация.ДокументОперации,
			ОтложеннаяОперация.Идентификатор,
			РезультатПроверки.ДатаОперации,
			РезультатПроверки.СтатусВозврата,
			РезультатПроверки.СуммаОперации,
			,
			ОтложеннаяОперация.ДатаЗапросаСтатуса);
		
		Если РезультатПроверки.СтатусВозврата = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаВыполнена()
			Или РезультатПроверки.СтатусВозврата = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаОтменена()
			Или РезультатПроверки.СтатусВозврата = ИдентификаторСтатусаНетИнформации()
			Или РезультатПроверки.СтатусВозврата = ИдентификаторСтатусаПревышение() Тогда
			
			ПараметрыОперации = СистемаБыстрыхПлатежейСлужебный.НовыйОписаниеПараметровОперации();
			ЗаполнитьЗначенияСвойств(ПараметрыОперации, РезультатПроверки);
			
			ПриЗагрузкеСтатусаОперации(
				ОтложеннаяОперация.ДокументОперации,
				ОтложеннаяОперация.НастройкаПодключения,
				ПараметрыОперации,
				РезультатПроверки.СтатусВозврата,
				РезультатПроверки.СообщениеОбОшибке,
				ОбработанныеОперации);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Определяет алгоритм обработки операций, статус которых был получен регламентным заданием.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииСБП - документ, который отражает
//    операцию в информационной базе;
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//    настройка выполнения операций;
//  ПараметрыОперации - Структура - дополнительные данные по оплате:
//    * ДатаОперации - Дата - фактическая дата оплаты в UTC;
//    * СуммаОперации - Число - фактическая суммы оплаты по документу;
//    * ИдентификаторОперации - Строка - ключ контроля загрузки;
//    * ИдентификаторОплаты- Строка - идентификатор оплаты;
//    * ДокументОснование - ОпределяемыйТип.ДокументОперацииСБП - документ основание платежа;
//  СтатусОперацииСервис - Строка - текущее состояние операции операции. Для проверки статуса
//      операции, необходимо функции программного интерфейса общего модуля
//      СистемаБыстрыхПлатежейКлиентСервер. Возможные значения:
//        - "Отменена" - по ранее сформированная операция отменена НСПК;
//        - "Выполнена" - участник СБП подтвердил выполнение операции;
//        - "Ошибка" - не удалось выполнить проверку статуса операции из-за ошибки
//           или участник СБП вернул ошибку;
//  СообщениеОбОшибке - Строка - сообщение пользователю. Заполняется в случае ошибки;
//  ОбработанныеОперации - Массив из ОпределяемыйТип.ДокументОперацииСБП - данные обработанных документов.
//
Процедура ПриЗагрузкеСтатусаОперации(
		ДокументОперации,
		НастройкаПодключения,
		ПараметрыОперации,
		СтатусОперацииСервис,
		СообщениеОбОшибке,
		ОбработанныеОперации) Экспорт
	
	СтатусОперации = "";
	
	Если СтатусОперацииСервис = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаВыполнена() Тогда
		СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииВыполнена();
	ИначеЕсли СтатусОперацииСервис = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаОтклонена()
		Или СтатусОперацииСервис = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаОтменена() Тогда
		СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииОтменена();
	ИначеЕсли СтатусОперацииСервис = ИдентификаторСтатусаПревышение()
		Или СтатусОперацииСервис = ИдентификаторСтатусаНеОплачен()
		Или СтатусОперацииСервис = ИдентификаторСтатусаНетИнформации()
		Или СтатусОперацииСервис = ИдентификаторСтатусаОшибка() Тогда
		СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииОшибка();
	Иначе
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Передан не валидный статус операции %1 в отложенную обработку.'"),
				СтатусОперацииСервис),
			Истина);
		РегистрыСведений.ИдентификаторыОперацийСБПc2b.УстановитьОтложенноеПолучениеСтатуса(
			ДокументОперации,
			Ложь);
	КонецЕсли;
	
	Попытка
		
		Если ТипЗнч(ДокументОперации) = Тип("ДокументСсылка.ПлатежнаяСсылкаСБПc2b") Тогда
			ДокументОснование       = ПараметрыОперации.ДокументОснование;
			ДокументЧастичнойОплаты = ДокументОперации;
		Иначе
			ДокументОснование       = ДокументОперации;
			ДокументЧастичнойОплаты = Документы.ПлатежнаяСсылкаСБПc2b.ПустаяСсылка();
		КонецЕсли;
		
		ПараметрыОперации.Вставить("ДокументЧастичнойОплаты", ДокументЧастичнойОплаты);
		
		РезультатОбработки = Новый Структура;
		РезультатОбработки.Вставить("СтатусОперации", СтатусОперации);
		РезультатОбработки.Вставить("СообщениеОбОшибке", СообщениеОбОшибке);
		РезультатОбработки.Вставить("ПараметрыОперации", ПараметрыОперации);
		
		Обработан = Ложь;
		
		ИнтеграцияПодсистемБИП.ПриЗагрузкеСтатусаОперации(
			ДокументОснование,
			НастройкаПодключения,
			РезультатОбработки,
			Обработан);
		ПереводыСБПc2bПереопределяемый.ПриЗагрузкеСтатусаОперации(
			ДокументОснование,
			НастройкаПодключения,
			РезультатОбработки,
			Обработан);
		
		Если Обработан = Истина Тогда
			РегистрыСведений.ИдентификаторыОперацийСБПc2b.УстановитьОтложенноеПолучениеСтатуса(
				ДокументОперации,
				Ложь);
			ОбработанныеОперации.Добавить(ДокументОперации);
		КонецЕсли;
		
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			
			ОтменаТранзакции = Ложь;
			Пока ТранзакцияАктивна() Цикл
				ОтменитьТранзакцию(); // АПК:325 Отмена незакрытых транзакций.
				ОтменаТранзакции = Истина;
			КонецЦикла;
			
			Если ОтменаТранзакции Тогда
				СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
					НСтр("ru = 'По завершении выполнения обработчика ПриЗагрузкеСтатусаОперации не была закрыта транзакция.'"),
					Истина);
			КонецЕсли;
			
		КонецЕсли;
		
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			Истина);
		
	КонецПопытки;
	
КонецПроцедуры

// Формирует новую таблицу идентификаторов, которую необходимо использовать
// для проверки статусов.
//
// Возвращаемое значение:
//  ТаблицаЗначений - данные для проверки статуса:
//    * Идентификатор - Строка - идентификатор QR-кода СБП;
//    * ДатаЗапросаСтатуса - Дата - дата последнего запроса статуса;
//
Функция НовыйИдентификаторыПроверкиНаличияСтатуса()
	
	Идентификаторы = Новый ТаблицаЗначений;
	Идентификаторы.Колонки.Добавить(
		"Идентификатор",
		ОбщегоНазначения.ОписаниеТипаСтрока(36));
	Идентификаторы.Колонки.Добавить(
		"ДатаЗапросаСтатуса",
		ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	
	Возврат Идентификаторы;
	
КонецФункции

// Формирует новую таблицу идентификаторов, которую необходимо использовать
// для проверки статусов.
//
// Возвращаемое значение:
//  ТаблицаЗначений - данные для проверки статуса:
//    * Идентификатор - Строка - идентификатор QR-кода СБП;
//    * ДатаЗапросаСтатуса - Дата - дата последнего запроса статуса;
//    * ПараметрыАктивации - Строка - параметры активации ссылки;
//
Функция НовыйИдентификаторыПроверкиНаличияСтатусаКассовыхСсылок()
	
	Идентификаторы = НовыйИдентификаторыПроверкиНаличияСтатуса();
	Идентификаторы.Колонки.Добавить("ПараметрыАктивации");
	
	Возврат Идентификаторы;
	
КонецФункции

#КонецОбласти

#Область СлужебныеОперацииМакетовСБП

Функция ОпределитьМакетыДляОбновления(ОписаниеМакетовВСервисе)
	
	ОновляемыеМакеты = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОписаниеМакетовВСервисе.Идентификатор КАК Идентификатор,
	|	ОписаниеМакетовВСервисе.КонтрольнаяСумма КАК КонтрольнаяСумма,
	|	ОписаниеМакетовВСервисе.URLЗагрузки КАК URLЗагрузки
	|ПОМЕСТИТЬ ВТ_ОписаниеМакетовВСервисе
	|ИЗ
	|	&ОписаниеМакетовВСервисе КАК ОписаниеМакетовВСервисе
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОписаниеМакетовВСервисе.Идентификатор КАК Идентификатор,
	|	ВТ_ОписаниеМакетовВСервисе.КонтрольнаяСумма КАК КонтрольнаяСумма,
	|	ВТ_ОписаниеМакетовВСервисе.URLЗагрузки КАК URLЗагрузки,
	|	ВЫБОР
	|		КОГДА ВТ_ОписаниеМакетовВСервисе.КонтрольнаяСумма <> ЕСТЬNULL(КэшМакетовСБП.КонтрольнаяСумма, """")
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеобходимаЗагрузка
	|ИЗ
	|	ВТ_ОписаниеМакетовВСервисе КАК ВТ_ОписаниеМакетовВСервисе
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КэшМакетовСБП КАК КэшМакетовСБП
	|		ПО ВТ_ОписаниеМакетовВСервисе.Идентификатор = КэшМакетовСБП.Идентификатор";
	
	Запрос.УстановитьПараметр("ОписаниеМакетовВСервисе", ОписаниеМакетовВСервисе);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.НеобходимаЗагрузка Тогда
			
			ОбновляемыйМакет = Новый Структура;
		
			ОбновляемыйМакет.Вставить("Идентификатор",    Выборка.Идентификатор);
			ОбновляемыйМакет.Вставить("КонтрольнаяСумма", Выборка.КонтрольнаяСумма);
			ОбновляемыйМакет.Вставить("URLЗагрузки",      Выборка.URLЗагрузки);
			
			ОновляемыеМакеты.Добавить(ОбновляемыйМакет);
			
		Иначе
			
			Запись = РегистрыСведений.КэшМакетовСБП.СоздатьМенеджерЗаписи();
			Запись.Идентификатор = Выборка.Идентификатор;
			Запись.Прочитать();
			Запись.ДатаОбновления = ТекущаяДатаСеанса();
			Запись.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОновляемыеМакеты;
	
КонецФункции

#КонецОбласти

#Область Аутентификация

// Возвращает логин и пароль Интернет-поддержки или тикет аутентификации.
//
// Параметры:
//  URLОперации -Строка - URL операции, для которой получаются данные аутентификации.
//
// Возвращаемое значение:
//  Структура - структура, содержащая результаты определения параметров
//    аутентификации пользователя Интернет-поддержки:
//    *ДанныеАутентификации - Структура - параметры аутентификации пользователя Интернет-поддержки;
//    *ИнформацияОбОшибке   - Строка    - информация об ошибке для пользователя.
//    *Ошибка - Строка    - признак наличия ошибки.
//
Функция ДанныеАутентификации(URLОперации)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура;
	Результат.Вставить("ДанныеАутентификации", Новый Структура);
	Результат.Вставить("ИнформацияОбОшибке",   "");
	Результат.Вставить("Ошибка",               Ложь);
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		МодульИнтернетПоддержкаПользователейВМоделиСервиса =
			ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователейВМоделиСервиса");
		РезультатПолученияТикета =
			МодульИнтернетПоддержкаПользователейВМоделиСервиса.ТикетАутентификацииНаПорталеПоддержки(
				URLОперации);
		
		Если ПустаяСтрока(РезультатПолученияТикета.КодОшибки) Тогда
			Результат.ДанныеАутентификации.Вставить("Тикет", РезультатПолученияТикета.Тикет);
		Иначе
			Результат.Ошибка = Истина;
			Результат.ИнформацияОбОшибке =
				НСтр("ru = 'Ошибка аутентификации в сервисе.
					|Подробнее см. в журнале регистрации.'");
			ПодробнаяИнформацияОбОшибке =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось вызвать операцию %1.
						|Не удалось выполнить аутентификацию.
						|%2'"),
					URLОперации,
					РезультатПолученияТикета.ИнформацияОбОшибке);
			СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
				ПодробнаяИнформацияОбОшибке,
				Истина);
		КонецЕсли;
	Иначе
		Результат.ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
		Если Результат.ДанныеАутентификации = Неопределено Тогда
			Результат.Ошибка             = Истина;
			Результат.ИнформацияОбОшибке =
				НСтр("ru = 'Для работы с сервисом необходимо подключить Интернет-поддержку пользователей.'");
			СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
				Результат.ИнформацияОбОшибке);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает данные аутентификации участника СБП.
//
// Параметры:
//  ПараметрыНастройкиПодключения - Структура - см. СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения.
//  ДанныеДляПодписи - Массив из Строка  - данные шифрования;
//  ТребуетсяОбновление - Булево - признак необходимости обновления устаревших данных.
//
// Возвращаемое значение:
//  Структура - структура, содержащая результаты определения параметров
//    аутентификации мерчанта в Системе быстрых платежей:
//    *Аутентификация - Структура, Неопределено - параметры аутентификации;
//       Если Неопределено, значение настроек не обнаружено;
//    *ИнформацияОбОшибке   - Строка    - информация об ошибке для пользователя.
//    *Ошибка - Строка    - признак наличия ошибки.
//
Функция ДанныеАутентификацииУчастникаСБП(
		ПараметрыНастройкиПодключения,
		ДанныеДляПодписи,
		ТребуетсяОбновление = Ложь)
	
	Результат = Новый Структура;
	Результат.Вставить("Аутентификация",     Неопределено);
	Результат.Вставить("ИнформацияОбОшибке", "");
	Результат.Вставить("Ошибка",             Ложь);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеХранилища = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
		ПараметрыНастройкиПодключения.НастройкаПодключения);
	
	// Проверим необходимость обновления сохраненных данных аутентификации
	Если ТипЗнч(ДанныеХранилища) = Тип("Структура") Тогда
		СистемаБыстрыхПлатежейСлужебный.ОбновитьВерсиюДанныхАутентификации(
			ПараметрыНастройкиПодключения.НастройкаПодключения,
			ПараметрыНастройкиПодключения.ИдентификаторУчастника);
		
		ДанныеХранилища = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
			ПараметрыНастройкиПодключения.НастройкаПодключения);
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ДанныеАутентификации = ДанныеХранилища.Получить(ПараметрыНастройкиПодключения.ИдентификаторУчастника);
	
	Если ДанныеАутентификации = Неопределено Тогда
		Результат.Ошибка = Истина;
		Результат.ИнформацияОбОшибке =
			НСтр("ru = 'Для работы с сервисом необходимо ввести данные аутентификации.'");
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Результат.ИнформацияОбОшибке);
		Возврат Результат;
	КонецЕсли;
	
	Возврат СистемаБыстрыхПлатежейСлужебный.ЗаголовокАвторизацииУчастникаСБП(
		ПараметрыНастройкиПодключения,
		ДанныеАутентификации,
		ДанныеДляПодписи,
		ТребуетсяОбновление);
	
КонецФункции

#КонецОбласти

#Область ВызовОперацийПроверкиСостояний

////////////////////////////////////////////////////////////////////////////////
// Вызов операции POST /**/test-check-needed

// Определяет наличие терминального статус операции.
//
// Параметры:
//  ИдентификаторОплаты - Строка - идентификатор оплаты в системе быстрых платежей;
//  ДатаЗапросаСтатуса - Дата - дата последнего запроса статуса.
//
// Возвращаемое значение:
//  Структура - результат проверки статуса:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом;
//    * СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора;
//    * ЗапроситьСтатус - Булево - признак наличия терминального статуса оплаты.
//
Функция ОперацияПроверкаНаличияСтатусаОперации(URLОперации, ДатаЗапросаСтатуса)
	
	РезультатОперации = СистемаБыстрыхПлатежейСлужебный.НовыйРезультатОперации();
	РезультатОперации.Вставить("ЗапроситьСтатус", Ложь);
	
	ПараметрыПодключения = СистемаБыстрыхПлатежейСлужебный.ИнициализироватьПараметрыПодключения();
	
	ПараметрыЗапросаJSON = test_check_needed(ДатаЗапросаСтатуса);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("X-Correlation-ID", Строка(Новый УникальныйИдентификатор));
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.ПереопределитьКодОшибкиСервиса(
			РезультатОтправки.КодСостояния);
		РезультатОперации.СообщениеОбОшибке = СистемаБыстрыхПлатежейСлужебный.ПереопределитьСообщениеПользователю(
			РезультатОперации.КодОшибки,
			РезультатОтправки.Содержимое);
		
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить информацию о статусе операции.
				|
				|%1
				|
				|Техническая информация об ошибке:
				|При проверке статуса операции сервис вернул ошибку.
				|URL: %2
				|Код ошибки: %3
				|X-Correlation-ID: %4
				|Подробная информация:
				|%5'"),
			РезультатОперации.СообщениеОбОшибке,
			URLОперации,
			РезультатОтправки.КодОшибки,
			Заголовки.Получить("X-Correlation-ID"),
			РезультатОтправки.ИнформацияОбОшибке);
		
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	РезультатОперации.ЗапроситьСтатус = ПрочитатьДанные_test_check_needed(
		РезультатОтправки.Содержимое);
	
	Возврат РезультатОперации;
	
КонецФункции

// Формирует параметры запроса для проверки наличия статуса операции.
//
Функция test_check_needed(ДатаЗапросаСтатуса)
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("lastStatusCheckDate");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(
		ЗаписатьДатуJSON(
			ДатаЗапросаСтатуса,
			ФорматДатыJSON.ISO,
			ВариантЗаписиДатыJSON.ЛокальнаяДатаСоСмещением));
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

// Чтение ответа проверки наличия статуса операции.
//
Функция ПрочитатьДанные_test_check_needed(ТелоJSON)
	
	// Ответ сервиса:
	//  notificationReceived - статус операции получен;
	//  responseDate - дата получения;
	// 
	//  {
	//  "checkNeeded": "string",
	//  "qrId": "string"
	// }
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получен ответ СБП:
			|%1'"),
		ТелоJSON);
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	Результат = ПрочитатьJSON(ЧтениеОтвета);
	
	Возврат Результат.checkNeeded = Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вызов операции POST /sbp/v1/members/{memberId}/status-manager/payments/statuses/test-check-needed

// Определяет статус заказа на оплату в Системе быстрых платежей.
//
// Параметры:
//  ИдентификаторыОплат - ТаблицаЗначений - данные для проверки статуса:
//    * Идентификатор - Строка - идентификатор QR-кода СБП;
//    * ДатаЗапросаСтатуса - Дата - дата последнего запроса статуса;
//  ИдентификаторУчастника - Строка - идентификатор участника СБП;
//  ИдентификаторОперации - Строка - идентификатор операции проверки наличия статуса;
//
// Возвращаемое значение:
//  Структура - результат проверки статуса заказа на оплату в Системе быстрых платежей:
//    *КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом;
//    *СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора;
//    *Идентификаторы - Массив Из Строка - идентификаторы оплат, по которым получен терминальный статус.
//
Функция ОперацияПроверкаНаличияСтатусаОперацийОплат(
		ИдентификаторыОплат,
		ИдентификаторУчастника,
		ИдентификаторОперации)
	
	РезультатОперации = СистемаБыстрыхПлатежейСлужебный.НовыйРезультатОперации();
	РезультатОперации.Вставить("Идентификаторы", Новый Массив);
	
	URLОперации = СистемаБыстрыхПлатежейСлужебный.URLОперацииСервиса(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"/members/%1/status-manager/payments/statuses/test-check-needed",
			ИдентификаторУчастника));
	
	ПараметрыПодключения = СистемаБыстрыхПлатежейСлужебный.ИнициализироватьПараметрыПодключения();
	
	ПараметрыЗапросаJSON = payments_test_check_needed(
		ИдентификаторыОплат,
		ИдентификаторОперации);
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , СистемаБыстрыхПлатежейСлужебный.НовыйЗаголовкиВызоваОперации());
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.ПереопределитьКодОшибкиСервиса(
			РезультатОтправки.КодСостояния);
		РезультатОперации.СообщениеОбОшибке = СистемаБыстрыхПлатежейСлужебный.ПереопределитьСообщениеПользователю(
			РезультатОперации.КодОшибки,
			РезультатОтправки.Содержимое);
		
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить информацию о статусах операций.
				|
				|%1
				|
				|Техническая информация об ошибке:
				|При проверке статусов операции сервис вернул ошибку.
				|URL: %2
				|Код ошибки: %3
				|X-Correlation-ID: %4
				|Подробная информация:
				|%5'"),
			РезультатОперации.СообщениеОбОшибке,
			URLОперации,
			РезультатОтправки.КодОшибки,
			ПараметрыОтправки.Заголовки.Получить("X-Correlation-ID"),
			РезультатОтправки.ИнформацияОбОшибке);
		
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	РезультатОперации.Идентификаторы = ПрочитатьДанные_payments_test_check_needed(
		РезультатОтправки.Содержимое);
	
	Возврат РезультатОперации;
	
КонецФункции

// Формирует параметры запроса для проверки наличия статуса операций оплаты.
//
Функция payments_test_check_needed(
		ИдентификаторОплат,
		ИдентификаторОперации)
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("operation");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ИдентификаторОперации);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("qrs");
	
	ЗаписьДанныхСообщения.ЗаписатьНачалоМассива();
	
	Для Каждого ДанныеОплаты Из ИдентификаторОплат Цикл
		
		ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
		
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("qrId");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеОплаты.Идентификатор);
		
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("lastStatusCheckDate");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(
			ЗаписатьДатуJSON(
				ДанныеОплаты.ДатаЗапросаСтатуса,
				ФорматДатыJSON.ISO,
				ВариантЗаписиДатыJSON.ЛокальнаяДатаСоСмещением));
		
		ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
		
	КонецЦикла;
	
	ЗаписьДанныхСообщения.ЗаписатьКонецМассива();
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

// Чтение ответа проверки наличия статуса операции.
//
Функция ПрочитатьДанные_payments_test_check_needed(ТелоJSON)
	
	// Ответ сервиса:
	//
	// {
	//  "checkByObjectIds": [
	//    "string"
	//  ],
	//  "responseDate": "2021-11-17T13:41:39.511Z"
	// }
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получен ответ СБП:
			|%1'"),
		ТелоJSON);
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	Результат = ПрочитатьJSON(ЧтениеОтвета);
	
	Возврат Результат.checkByObjectIds;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вызов операции POST /sbp/v1/members/{memberId}/status-manager/cash-register-payments/statuses/test-check-needed

// Определяет статус заказа на оплату Системе быстрых платежей.
//
// Параметры:
//  ИдентификаторыОплат - ТаблицаЗначений - данные для проверки статуса:
//    * Идентификатор - Строка - идентификатор QR-кода СБП;
//    * ДатаЗапросаСтатуса - Дата - дата последнего запроса статуса;
//  ИдентификаторУчастника - Строка - идентификатор участника СБП;
//  ИдентификаторОперации - Строка - идентификатор операции проверки наличия статуса;
//
// Возвращаемое значение:
//  Структура - результат проверки статуса заказа на оплату в Системе быстрых платежей:
//    *КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом;
//    *СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора;
//    *Идентификаторы - Массив Из Строка - идентификаторы оплат, по которым получен терминальный статус.
//
Функция ОперацияПроверкаНаличияСтатусаКассовыхСсылок(
		ИдентификаторыОплат,
		ИдентификаторУчастника,
		ИдентификаторОперации)
	
	РезультатОперации = СистемаБыстрыхПлатежейСлужебный.НовыйРезультатОперации();
	РезультатОперации.Вставить("Идентификаторы", Новый Массив);
	
	URLОперации = СистемаБыстрыхПлатежейСлужебный.URLОперацииСервиса(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"/members/%1/status-manager/cash-register-payments/statuses/test-check-needed",
			ИдентификаторУчастника));
	
	ПараметрыПодключения = СистемаБыстрыхПлатежейСлужебный.ИнициализироватьПараметрыПодключения();
	
	ПараметрыЗапросаJSON = cash_payments_test_check_needed(
		ИдентификаторыОплат,
		ИдентификаторОперации);
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , СистемаБыстрыхПлатежейСлужебный.НовыйЗаголовкиВызоваОперации());
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.ПереопределитьКодОшибкиСервиса(
			РезультатОтправки.КодСостояния);
		РезультатОперации.СообщениеОбОшибке = СистемаБыстрыхПлатежейСлужебный.ПереопределитьСообщениеПользователю(
			РезультатОперации.КодОшибки,
			РезультатОтправки.Содержимое);
		
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить информацию о статусах операций.
				|
				|%1
				|
				|Техническая информация об ошибке:
				|При проверке статусов операции сервис вернул ошибку.
				|URL: %2
				|Код ошибки: %3
				|X-Correlation-ID: %4
				|Подробная информация:
				|%5'"),
			РезультатОперации.СообщениеОбОшибке,
			URLОперации,
			РезультатОтправки.КодОшибки,
			ПараметрыОтправки.Заголовки.Получить("X-Correlation-ID"),
			РезультатОтправки.ИнформацияОбОшибке);
		
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	РезультатОперации.Идентификаторы = ПрочитатьДанные_cash_payments_test_check_needed(
		РезультатОтправки.Содержимое);
	
	Возврат РезультатОперации;
	
КонецФункции

// Формирует параметры запроса для проверки наличия статуса операций оплаты.
//
Функция cash_payments_test_check_needed(ИдентификаторыОплат, ИдентификаторОперации)
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("operation");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ИдентификаторОперации);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("qrs");
	
	ЗаписьДанныхСообщения.ЗаписатьНачалоМассива();
	
	Для Каждого ДанныеОплаты Из ИдентификаторыОплат Цикл
		
		ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
		
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("qrId");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеОплаты.Идентификатор);
		
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("paramsId");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеОплаты.ПараметрыАктивации);
		
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("lastStatusCheckDate");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(
			ЗаписатьДатуJSON(
				ДанныеОплаты.ДатаЗапросаСтатуса,
				ФорматДатыJSON.ISO,
				ВариантЗаписиДатыJSON.ЛокальнаяДатаСоСмещением));
		
		ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
		
	КонецЦикла;
	
	ЗаписьДанныхСообщения.ЗаписатьКонецМассива();
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

// Чтение ответа проверки наличия статуса операции.
//
Функция ПрочитатьДанные_cash_payments_test_check_needed(ТелоJSON)
	
	// Ответ сервиса:
	//
	// {
	//  "operation": "string",
	//  "qrs": [
	//    {
	//      "qrId": "string",
	//      "paramsId": "string",
	//      "lastStatusCheckDate": "2022-07-27T09:14:29.908Z"
	//    }
	//  ]
	// }
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получен ответ СБП:
			|%1'"),
		ТелоJSON);
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	РезультатЧтения = ПрочитатьJSON(ЧтениеОтвета);
	
	Результат = Новый Массив;
	Для Каждого Идентификаторы Из РезультатЧтения.checkByObjectIds Цикл
		Результат.Добавить(Идентификаторы.paramsId);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вызов операции POST /sbp/v1/members/{memberId}/status-manager/refunds/statuses/test-check-needed

// Определяет статус возвратов в Системе быстрых платежей.
//
// Параметры:
//  ИдентификаторыВозвратов - ТаблицаЗначений - данные для проверки статуса:
//    * Идентификатор - Строка - идентификатор операции участника СБП;
//    * ДатаЗапросаСтатуса - Дата - дата последнего запроса статуса;
//  ИдентификаторУчастника - Строка - идентификатор участника СБП;
//  ИдентификаторОперации - Строка - идентификатор операции проверки наличия статуса;
//
// Возвращаемое значение:
//  Структура - результат проверки статуса заказа на возврат в Системе быстрых платежей:
//    *КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом;
//    *СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора;
//    *Идентификаторы - Массив Из Строка - идентификаторы возврата, по которым получен терминальный статус.
//
Функция ОперацияПроверкаНаличияСтатусаОперацийВозвратов(
		ИдентификаторыВозвратов,
		ИдентификаторУчастника,
		ИдентификаторОперации)
	
	РезультатОперации = СистемаБыстрыхПлатежейСлужебный.НовыйРезультатОперации();
	РезультатОперации.Вставить("Идентификаторы", Новый Массив);
	
	URLОперации = СистемаБыстрыхПлатежейСлужебный.URLОперацииСервиса(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"/members/%1/status-manager/refunds/statuses/test-check-needed",
			ИдентификаторУчастника));
	
	ПараметрыПодключения = СистемаБыстрыхПлатежейСлужебный.ИнициализироватьПараметрыПодключения();
	
	ПараметрыЗапросаJSON = refunds_test_check_needed(
		ИдентификаторыВозвратов,
		ИдентификаторОперации);
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , СистемаБыстрыхПлатежейСлужебный.НовыйЗаголовкиВызоваОперации());
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.ПереопределитьКодОшибкиСервиса(
			РезультатОтправки.КодСостояния);
		РезультатОперации.СообщениеОбОшибке = СистемаБыстрыхПлатежейСлужебный.ПереопределитьСообщениеПользователю(
			РезультатОперации.КодОшибки,
			РезультатОтправки.Содержимое);
		
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить информацию о статусах операций.
				|
				|%1
				|
				|Техническая информация об ошибке:
				|При проверке статуса операции сервис вернул ошибку.
				|URL: %2
				|Код ошибки: %3
				|X-Correlation-ID: %4
				|Подробная информация:
				|%5'"),
			РезультатОперации.СообщениеОбОшибке,
			URLОперации,
			РезультатОтправки.КодОшибки,
			ПараметрыОтправки.Заголовки.Получить("X-Correlation-ID"),
			РезультатОтправки.ИнформацияОбОшибке);
		
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	РезультатОперации.Идентификаторы = ПрочитатьДанные_refunds_test_check_needed(
		РезультатОтправки.Содержимое);
	
	Возврат РезультатОперации;
	
КонецФункции

// Формирует параметры запроса для проверки наличия статуса операций оплаты.
//
Функция refunds_test_check_needed(ИдентификаторыВозвратов, ИдентификаторОперации)
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("operation");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ИдентификаторОперации);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("refundRequests");
	
	ЗаписьДанныхСообщения.ЗаписатьНачалоМассива();
	
	Для Каждого ДанныеВозврата Из ИдентификаторыВозвратов Цикл
		
		ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
		
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("refundId");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеВозврата.Идентификатор);
		
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("lastStatusCheckDate");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(
			ЗаписатьДатуJSON(
				ДанныеВозврата.ДатаЗапросаСтатуса,
				ФорматДатыJSON.ISO,
				ВариантЗаписиДатыJSON.ЛокальнаяДатаСоСмещением));
		
		ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
		
	КонецЦикла;
	
	ЗаписьДанныхСообщения.ЗаписатьКонецМассива();
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

// Чтение ответа проверки наличия статуса операции.
//
Функция ПрочитатьДанные_refunds_test_check_needed(ТелоJSON)
	
	// Ответ сервиса:
	//
	// {
	//  "checkByObjectIds": [
	//    "string"
	//  ],
	//  "responseDate": "2021-11-17T13:41:39.511Z"
	// }
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получен ответ СБП:
			|%1'"),
		ТелоJSON);
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	Результат = ПрочитатьJSON(ЧтениеОтвета);
	
	Возврат Результат.checkByObjectIds;
	
КонецФункции

#КонецОбласти

#Область ВызовОперацийОплат

////////////////////////////////////////////////////////////////////////////////
// Вызов операции POST /sbp/v1/members/{memberId}/qrs/register-qr.

// Создает новый заказ на оплату.
//
// Параметры:
//  ЗаказНаОплату - Структура - описание заказа на оплату см. функцию ОписаниеЗаказаНаОплату;
//  Идентификатор - Строка - внешний идентификатор документа оплаты;
//  ПараметрыНастройкиПодключения - Структура - параметры выполнения операции
//    см. СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения.
//
// Возвращаемое значение:
//  Структура - результат создания заказа на оплату в Системе быстрых платежей:
//    * ПлатежнаяСсылка - Строка - идентификатор, по которому выполняется оплата;
//    * ИдентификаторОплаты - Строка - идентификатор оплаты в СБП;
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//       может быть обработан вызывающим методом;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция ОперацияДинамическаяСсылка(ЗаказОплату, Идентификатор, ПараметрыНастройкиПодключения)
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Создание динамической ссылки СБП.'"),
		Ложь);
	
	РезультатОперации = ПереводыСБПc2bСлужебный.НовыйРезультатПлатежнаяСсылка();
	РезультатОперации.Вставить("ИдентификаторОплаты", "");
	РезультатОперации.Вставить("ПериодИспользования", Неопределено);
	
	URLОперации = СистемаБыстрыхПлатежейСлужебный.URLОперацииСервиса(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"/members/%1/qrs/register-qr",
			ПараметрыНастройкиПодключения.ИдентификаторУчастника));
	
	РезультатИПП = ДанныеАутентификации(URLОперации);
	
	Если РезультатИПП.Ошибка Тогда
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	ДанныеДляПодписи = Новый Массив;
	Если СистемаБыстрыхПлатежейСлужебный.УчастникСБПИспользуетHMAC(ПараметрыНастройкиПодключения.ТипАутентификации) Тогда
		ДанныеДляПодписи.Добавить(ПараметрыНастройкиПодключения.ИдентификаторМерчанта);
		ДанныеДляПодписи.Добавить(ЗаказОплату.СуммаОплаты);
		ДанныеДляПодписи.Добавить(СистемаБыстрыхПлатежейСлужебный.ИдентификаторВалютыРоссийскийРубль());
		ДанныеДляПодписи.Добавить(Идентификатор);
		ДанныеДляПодписи.Добавить(ЗаказОплату.НазначениеПлатежа);
	КонецЕсли;
	
	РезультатСБП = ДанныеАутентификацииУчастникаСБП(
		ПараметрыНастройкиПодключения,
		ДанныеДляПодписи);
	
	Если РезультатСБП.Ошибка Тогда
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатСБП.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатСБП.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	Заголовки = СистемаБыстрыхПлатежейСлужебный.НовыйЗаголовкиВызоваОперации();
	РезультатОтправки = ВызовОперацииЗаказНаОплату(
		ЗаказОплату,
		Идентификатор,
		ПараметрыНастройкиПодключения,
		РезультатИПП.ДанныеАутентификации,
		РезультатСБП.Аутентификация,
		URLОперации,
		Заголовки);
	
	// Обработка случаев устаревания токена аутентификации для способа
	// Resource Owner Password Credentials Grant.
	Если РезультатОтправки.КодСостояния = 401
		И СистемаБыстрыхПлатежейСлужебный.УчастникСБПИспользуетPasswordCredentialsGrant(ПараметрыНастройкиПодключения.ТипАутентификации) Тогда
		
		РезультатСБП = ДанныеАутентификацииУчастникаСБП(
			ПараметрыНастройкиПодключения,
			ДанныеДляПодписи,
			Истина);
		
		Если РезультатСБП.Ошибка Тогда
			РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
			РезультатОперации.СообщениеОбОшибке = РезультатСБП.ИнформацияОбОшибке;
			РезультатОперации.ИнформацияОбОшибке = РезультатСБП.ИнформацияОбОшибке;
			Возврат РезультатОперации;
		КонецЕсли;
		
		Заголовки = СистемаБыстрыхПлатежейСлужебный.НовыйЗаголовкиВызоваОперации();
		РезультатОтправки = ВызовОперацииЗаказНаОплату(
			ЗаказОплату,
			Идентификатор,
			ПараметрыНастройкиПодключения,
			РезультатИПП.ДанныеАутентификации,
			РезультатСБП.Аутентификация,
			URLОперации,
			Заголовки);
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.ПереопределитьКодОшибкиСервиса(
			РезультатОтправки.КодСостояния);
		РезультатОперации.СообщениеОбОшибке = СистемаБыстрыхПлатежейСлужебный.ПереопределитьСообщениеПользователю(
			РезультатОперации.КодОшибки,
			РезультатОтправки.Содержимое);
		
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось создать заказ на оплату в Системе быстрых платежей.
				|
				|%1
				|
				|Техническая информация об ошибке:
				|При создании заказа на оплату сервис вернул ошибку.
				|URL: %2
				|Код ошибки: %3
				|X-Correlation-ID: %4
				|Подробная информация:
				|%5'"),
			РезультатОперации.СообщениеОбОшибке,
			URLОперации,
			РезультатОтправки.КодОшибки,
			Заголовки.Получить("X-Correlation-ID"),
			РезультатОтправки.ИнформацияОбОшибке);
		
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	ДанныеОплаты = ПрочитатьДанные_register_qr(РезультатОтправки.Содержимое);
	
	РезультатОперации.ИдентификаторОплаты = ДанныеОплаты.sbpMemberResponse.qrId;
	РезультатОперации.ПлатежнаяСсылка = ДанныеОплаты.sbpMemberResponse.payload;
	Если ЗначениеЗаполнено(ЗаказОплату.СрокЖизниQRКода) Тогда
		РезультатОперации.ПериодИспользования = ТекущаяДатаСеанса() + ЗаказОплату.СрокЖизниQRКода * 60;
	Иначе
		РезультатОперации.ПериодИспользования = ТекущаяДатаСеанса() + ДанныеОплаты.qrSettings.defaultQrTtl * 60;
	КонецЕсли;
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Завершено создание заказа на оплату в Системе быстрых платежей.'"),
		Ложь);
	
	Возврат РезультатОперации;
	
КонецФункции

// Выполняет вызов операции создания нового заказа на оплату.
//
// Параметры:
//  ЗаказНаОплату - Структура - описание заказа на оплату см. функцию ОписаниеЗаказаНаОплату;
//  Идентификатор - Строка - внешний идентификатор документа оплаты;
//  ПараметрыНастройкиПодключения - Структура - параметры выполнения операции
//    см. СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения;
//  ДанныеАутентификации - Структура - данные аутентификации на Портале 1С:ИТС;
//  ЗаголовокАутентификации - Строка - данные аутентификации в участнике СБП;
//  URLОперации - Строка - url для вызова операции;
//  Заголовки - Соотсветствие - заголовки операции.
//
// Возвращаемое значение:
//  Структура - результат создания заказа на оплату в Системе быстрых платежей:
//   *КодСостояния - Число - http код результата операции;
//   *КодОшибки - Строка - идентификатор ошибки вызова операции;
//   *Содержимое - Строка - ответа сервиса;
//
Функция ВызовОперацииЗаказНаОплату(
		ЗаказОплату,
		Идентификатор,
		ПараметрыНастройкиПодключения,
		ДанныеАутентификации,
		ЗаголовокАутентификации,
		URLОперации,
		Заголовки)
	
	ПараметрыПодключения = СистемаБыстрыхПлатежейСлужебный.ИнициализироватьПараметрыПодключения();
	
	ПараметрыЗапросаJSON = register_qr(
		ЗаказОплату,
		Идентификатор,
		ПараметрыНастройкиПодключения,
		ДанныеАутентификации,
		ЗаголовокАутентификации);
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	Возврат ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
КонецФункции

// Формирует параметры запроса для операции
// /sbp/v1/members/{memberId}/qrs/register-qr.
//
Функция register_qr(
		ЗаказОплату,
		Идентификатор,
		ПараметрыНастройкиПодключения,
		ДанныеАутентификации,
		ЗаголовокАутентификации)
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	// Данные аутентификации.
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьДанныеАутентификации(
		ЗаписьДанныхСообщения,
		ДанныеАутентификации);
	
	// Данные аутентификации участника СБП.
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьДанныеАутентификацииУчастникаСБП(
		ЗаписьДанныхСообщения,
		ЗаголовокАутентификации,
		ПараметрыНастройкиПодключения.ИдентификаторМерчанта);
	
	// Параметры клиента.
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьПараметрыКлиента(
		ЗаписьДанныхСообщения);
	
	// Параметры оплаты.
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("sbpMemberRequest");
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("amount");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ЗаказОплату.СуммаОплаты);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("currency");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(СистемаБыстрыхПлатежейСлужебный.ИдентификаторВалютыРоссийскийРубль());
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("createDate");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(
		ЗаписатьДатуJSON(
			ЗаказОплату.ДатаОплаты,
			ФорматДатыJSON.ISO,
			ВариантЗаписиДатыJSON.ЛокальнаяДатаСоСмещением));
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("merchantId");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ПараметрыНастройкиПодключения.ИдентификаторМерчанта);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("orderId");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Строка(Идентификатор));
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("qrTtl");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(
		?(Не ЗначениеЗаполнено(ЗаказОплату.СрокЖизниQRКода),
			Неопределено,
			ЗаказОплату.СрокЖизниQRКода));
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("paymentPurpose");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ЗаказОплату.НазначениеПлатежа);
	
	Если Не ПустаяСтрока(ПараметрыНастройкиПодключения.СсылкаПеренаправления) Тогда
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("redirectUrl");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(ПараметрыНастройкиПодключения.СсылкаПеренаправления);
	КонецЕсли;
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

// Чтение ответа операции /sbp/v1/members/{memberId}/qrs/register-qr.
//
Функция ПрочитатьДанные_register_qr(ТелоJSON)
	
	// Ответ сервиса:
	//  payload - идентификатор оплаты для покупателя;
	//  qrId - идентификатор оплаты в СБП;
	// 
	//  {
	//  "payload": "string",
	//  "qrId": "string"
	// }
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получен ответ СБП:
			|%1'"),
		ТелоJSON);
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	Результат = ПрочитатьJSON(ЧтениеОтвета);
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вызов операции POST /sbp/v1/members/{memberId}/payments/qrs/{qrId}/search-payment

// Определяет статус заказа на оплату Системе быстрых платежей.
//
// Параметры:
//  ИдентификаторОплаты - Строка - идентификатор оплаты в системе быстрых платежей;
//  ДатаЗапросаСтатуса - Дата - дата последнего запроса статуса оплаты;
//  ПараметрыНастройкиПодключения - Структура - параметры выполнения операции
//    см. СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения;
//  ИдентификаторОперации - Строка - идентификатор операции проверки наличия статуса;
//  ЗапросНаличияСтатуса - Булево - если Истина, будет выполнен запрос наличия статуса.
//
// Возвращаемое значение:
//  Структура - результат проверки статуса заказа на оплату в Системе быстрых платежей:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом;
//    * СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора;
//    * СтатусОплаты - Строка - состояние оплаты в Системе быстрых платежей;
//    * ИдентификаторОперации - Строка - идентификатор оплаты;
//    * ДатаОперации - Дата - дата регистрации операции в Системе быстрых платежей;
//    * СуммаОперации - Число - фактическая суммы оплаты по документу.
//
Функция ОперацияСтатусОплатыДинамическойСсылки(
		ИдентификаторОплаты,
		ДатаЗапросаСтатуса,
		ПараметрыНастройкиПодключения,
		ИдентификаторОперацииПроверки,
		ЗапросНаличияСтатуса = Истина)
	
	РезультатОперации = СистемаБыстрыхПлатежейСлужебный.НовыйРезультатОперации();
	РезультатОперации.Вставить("СтатусОплаты",               "");
	РезультатОперации.Вставить("ИдентификаторОперации",      "");
	РезультатОперации.Вставить("ИдентификаторОплаты",        "");
	РезультатОперации.Вставить("ДатаОперации",               Неопределено);
	РезультатОперации.Вставить("СуммаОперации",              Неопределено);
	РезультатОперации.Вставить("ОбновитьДатуЗапросаСтатуса", Ложь);
	
	Если ЗапросНаличияСтатуса Тогда
		
		Если Не ЗначениеЗаполнено(ИдентификаторОплаты) Тогда
			РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйФорматЗапроса();
			РезультатОперации.СообщениеОбОшибке = НСтр("ru = 'Не заполнен идентификатор операции.'");
			РезультатОперации.ИнформацияОбОшибке = РезультатОперации.СообщениеОбОшибке;
			
			СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
				Строка(РезультатОперации.ИнформацияОбОшибке),
				Истина);
			
			Возврат РезультатОперации;
		КонецЕсли;
		
		ИдентификаторыОплат = НовыйИдентификаторыПроверкиНаличияСтатуса();
		
		ДанныеОплаты = ИдентификаторыОплат.Добавить();
		ДанныеОплаты.Идентификатор = ИдентификаторОплаты;
		ДанныеОплаты.ДатаЗапросаСтатуса = ДатаЗапросаСтатуса;
		
		РезультатПроверки = ОперацияПроверкаНаличияСтатусаОперацийОплат(
			ИдентификаторыОплат,
			ПараметрыНастройкиПодключения.ИдентификаторУчастника,
			ИдентификаторОперацииПроверки);
		
		Если ЗначениеЗаполнено(РезультатПроверки.КодОшибки) Тогда
			ЗаполнитьЗначенияСвойств(
				РезультатОперации,
				РезультатПроверки,
				"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
			Возврат РезультатОперации;
		КонецЕсли;
		
		Если РезультатПроверки.Идентификаторы.Найти(ИдентификаторОплаты) = Неопределено Тогда
			РезультатОперации.СтатусОплаты = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаВПроцессе();
			Возврат РезультатОперации;
		КонецЕсли;
		
	КонецЕсли;
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Проверка статуса заказа на оплату в Системе быстрых платежей.'"),
		Ложь);
	
	// Необходимо обновить дату запроса с статуса в базе данных.
	РезультатОперации.ОбновитьДатуЗапросаСтатуса = Истина;
	
	URLОперации = СистемаБыстрыхПлатежейСлужебный.URLОперацииСервиса(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"/members/%1/payments/qrs/%2/search-payment",
			ПараметрыНастройкиПодключения.ИдентификаторУчастника,
			ИдентификаторОплаты));
	
	РезультатИПП = ДанныеАутентификации(URLОперации);
	
	Если РезультатИПП.Ошибка Тогда
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	ДанныеДляПодписи = Новый Массив;
	Если СистемаБыстрыхПлатежейСлужебный.УчастникСБПИспользуетHMAC(ПараметрыНастройкиПодключения.ТипАутентификации) Тогда
		ДанныеДляПодписи.Добавить(ИдентификаторОплаты);
	КонецЕсли;
	
	РезультатСБП = ДанныеАутентификацииУчастникаСБП(
		ПараметрыНастройкиПодключения,
		ДанныеДляПодписи);
	
	Если РезультатСБП.Ошибка Тогда
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатСБП.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатСБП.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	Заголовки = СистемаБыстрыхПлатежейСлужебный.НовыйЗаголовкиВызоваОперации();
	РезультатОтправки = ВызовСтатусОплатыДинамическойСсылки(
		ПараметрыНастройкиПодключения,
		РезультатИПП.ДанныеАутентификации,
		РезультатСБП.Аутентификация,
		URLОперации,
		Заголовки);
	
	// Обработка случаев устаревания токена аутентификации для способа
	// Resource Owner Password Credentials Grant.
	Если РезультатОтправки.КодСостояния = 401
		И СистемаБыстрыхПлатежейСлужебный.УчастникСБПИспользуетPasswordCredentialsGrant(ПараметрыНастройкиПодключения.ТипАутентификации) Тогда
		
		РезультатСБП = ДанныеАутентификацииУчастникаСБП(
			ПараметрыНастройкиПодключения,
			ДанныеДляПодписи,
			Истина);
		
		Если РезультатСБП.Ошибка Тогда
			РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
			РезультатОперации.СообщениеОбОшибке = РезультатСБП.ИнформацияОбОшибке;
			РезультатОперации.ИнформацияОбОшибке = РезультатСБП.ИнформацияОбОшибке;
			Возврат РезультатОперации;
		КонецЕсли;
		
		Заголовки = СистемаБыстрыхПлатежейСлужебный.НовыйЗаголовкиВызоваОперации();
		РезультатОтправки = ВызовСтатусОплатыДинамическойСсылки(
			ПараметрыНастройкиПодключения,
			РезультатИПП.ДанныеАутентификации,
			РезультатСБП.Аутентификация,
			URLОперации,
			Заголовки);
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.ПереопределитьКодОшибкиСервиса(
			РезультатОтправки.КодСостояния);
		РезультатОперации.СообщениеОбОшибке = СистемаБыстрыхПлатежейСлужебный.ПереопределитьСообщениеПользователю(
			РезультатОперации.КодОшибки,
			РезультатОтправки.Содержимое);
		
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить статус оплаты в Системе быстрых платежей.
				|
				|%1
				|
				|Техническая информация об ошибке:
				|При получении статуса оплаты сервис вернул ошибку.
				|URL: %2
				|Код ошибки: %3
				|X-Correlation-ID: %4
				|Подробная информация:
				|%5'"),
			РезультатОперации.СообщениеОбОшибке,
			URLОперации,
			РезультатОтправки.КодОшибки,
			Заголовки.Получить("X-Correlation-ID"),
			РезультатОтправки.ИнформацияОбОшибке);
		
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	ДанныеСтатуса = ПрочитатьДанные_search_payment(РезультатОтправки.Содержимое);
	
	РезультатОперации.СтатусОплаты = ДанныеСтатуса.sbpMemberResponse.paymentStatus;
	РезультатОперации.ИдентификаторОперации = СистемаБыстрыхПлатежейСлужебный.ИдентификаторОперацииБезСлужебныхСимволов(
		ДанныеСтатуса.sbpMemberResponse.paymentId);
	РезультатОперации.ИдентификаторОплаты = ИдентификаторОплаты;
	РезультатОперации.ДатаОперации = ДанныеСтатуса.sbpMemberResponse.operationDate;
	РезультатОперации.СуммаОперации = ДанныеСтатуса.sbpMemberResponse.amount;
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Проверка статуса заказа на оплату в Системе быстрых платежей завершена.'"),
		Ложь);
	
	Возврат РезультатОперации;
	
КонецФункции

// Выполняет вызов операции проверки статуса заказа на оплату.
//
// Параметры:
//  ПараметрыНастройкиПодключения - Структура - параметры выполнения операции
//    см. СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения;
//  ДанныеАутентификации - Структура - данные аутентификации на Портале 1С:ИТС;
//  ЗаголовокАутентификации - Строка - данные аутентификации в сервисе участника СБП;
//  URLОперации - Строка - url для вызова операции;
//  Заголовки - Соотсветствие - заголовки операции.
//
// Возвращаемое значение:
//  Структура - результат получения статуса заказа на оплату в Системе быстрых платежей:
//   *КодСостояния - Число - http код результата операции;
//   *КодОшибки - Строка - идентификатор ошибки вызова операции;
//   *Содержимое - Строка - ответа сервиса;
//
Функция ВызовСтатусОплатыДинамическойСсылки(
		ПараметрыНастройкиПодключения,
		ДанныеАутентификации,
		ЗаголовокАутентификации,
		URLОперации,
		Заголовки)
	
	ПараметрыПодключения = СистемаБыстрыхПлатежейСлужебный.ИнициализироватьПараметрыПодключения();
	
	ПараметрыЗапросаJSON = search_payment(
		ДанныеАутентификации,
		ЗаголовокАутентификации,
		ПараметрыНастройкиПодключения.ИдентификаторМерчанта);
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	Возврат ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
КонецФункции

// Формирует параметры запроса для операции
// /sbp/v1/members/{memberId}/payments/qrs/{qrId}/search-payment.
//
Функция search_payment(
		ДанныеАутентификации,
		ЗаголовокАутентификации,
		ИдентификаторМерчанта)
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	// Данные аутентификации.
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьДанныеАутентификации(
		ЗаписьДанныхСообщения,
		ДанныеАутентификации);
	
	// Данные аутентификации участника СБП.
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьДанныеАутентификацииУчастникаСБП(
		ЗаписьДанныхСообщения,
		ЗаголовокАутентификации,
		ИдентификаторМерчанта);
	
	// Параметры клиента.
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьПараметрыКлиента(
		ЗаписьДанныхСообщения);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

// Чтение ответа операции:
// /sbp/v1/members/{memberId}/payments/qrs/{qrId}/search-payment
//
Функция ПрочитатьДанные_search_payment(ТелоJSON)
	
	// Ответ сервиса:
	//  operationDate - дата операции в Системе быстрых платежей;
	//  paymentId - идентификатор операции в Системе быстрых платежей;
	//  paymentStatus - статус оплаты;
	//  qrId - идентификатор операции в СБП;
	// 
	//{
	//  "operationDate": "string",
	//  "paymentId": "string",
	//  "paymentStatus": "SUCCESS",
	//  "qrId": "string"
	// }
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получен ответ СБП:
			|%1'"),
		ТелоJSON);
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	ИменаСвойствСоЗначениямиДата = Новый Массив;
	ИменаСвойствСоЗначениямиДата.Добавить("operationDate");
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	Результат = ПрочитатьJSON(
		ЧтениеОтвета,
		,
		ИменаСвойствСоЗначениямиДата,
		,
		"ВосстановитьДатуJSON",
		СистемаБыстрыхПлатежейСлужебный,
		,
		ИменаСвойствСоЗначениямиДата);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ВызовОперацийКассовыхСсылок

////////////////////////////////////////////////////////////////////////////////
// Вызов операции POST /sbp/v1/members/{memberId}/cash-register-qrs/register-qr.

// Регистрирует новую кассовую ссылку.
//
// Параметры:
//  ПараметрыНастройкиПодключения - Структура - параметры выполнения операции
//   см. СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения.
//  ИдентификаторОплаты - Строка - идентификатор оплаты в СБП.
//
// Возвращаемое значение:
//  Структура - результат создания заказа на оплату в Системе быстрых платежей:
//    *КассоваяСсылка - Строка - идентификатор, по которому выполняется оплата;
//    *ИдентификаторОплаты - Строка - идентификатор оплаты в СБП;
//    *КодОшибки - Строка - строковый код возникшей ошибки, который
//       может быть обработан вызывающим методом;
//    *СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция ОперацияРегистрацияКассовойСсылки(
		ПараметрыНастройкиПодключения,
		ИдентификаторОплаты)
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Регистрация новой кассовой ссылки в Системе быстрых платежей.'"),
		Ложь);
	
	РезультатОперации = СистемаБыстрыхПлатежейСлужебный.НовыйРезультатОперации();
	РезультатОперации.Вставить("ИдентификаторОплаты", "");
	РезультатОперации.Вставить("КассоваяСсылка", "");
	
	URLОперации = СистемаБыстрыхПлатежейСлужебный.URLОперацииСервиса(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"/members/%1/cash-register-qrs/register-qr",
			ПараметрыНастройкиПодключения.ИдентификаторУчастника));
	
	РезультатИПП = ДанныеАутентификации(URLОперации);
	
	Если РезультатИПП.Ошибка Тогда
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	ДанныеДляПодписи = Новый Массив;
	Если СистемаБыстрыхПлатежейСлужебный.УчастникСБПИспользуетHMAC(ПараметрыНастройкиПодключения.ТипАутентификации) Тогда
		ДанныеДляПодписи.Добавить(ПараметрыНастройкиПодключения.ИдентификаторМерчанта);
	КонецЕсли;
	
	РезультатСБП = ДанныеАутентификацииУчастникаСБП(
		ПараметрыНастройкиПодключения,
		ДанныеДляПодписи);
	
	Если РезультатСБП.Ошибка Тогда
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатСБП.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатСБП.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	Заголовки = СистемаБыстрыхПлатежейСлужебный.НовыйЗаголовкиВызоваОперации();
	РезультатОтправки = ВызовОперацииРегистрацияКассовойСсылки(
		ПараметрыНастройкиПодключения,
		РезультатИПП.ДанныеАутентификации,
		РезультатСБП.Аутентификация,
		URLОперации,
		ИдентификаторОплаты,
		Заголовки);
	
	// Обработка случаев устаревания токена аутентификации для способа
	// Resource Owner Password Credentials Grant.
	Если РезультатОтправки.КодСостояния = 401
		И СистемаБыстрыхПлатежейСлужебный.УчастникСБПИспользуетPasswordCredentialsGrant(ПараметрыНастройкиПодключения.ТипАутентификации) Тогда
		
		РезультатСБП = ДанныеАутентификацииУчастникаСБП(
			ПараметрыНастройкиПодключения,
			ДанныеДляПодписи,
			Истина);
		
		Если РезультатСБП.Ошибка Тогда
			РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
			РезультатОперации.СообщениеОбОшибке = РезультатСБП.ИнформацияОбОшибке;
			РезультатОперации.ИнформацияОбОшибке = РезультатСБП.ИнформацияОбОшибке;
			Возврат РезультатОперации;
		КонецЕсли;
		
		Заголовки = СистемаБыстрыхПлатежейСлужебный.НовыйЗаголовкиВызоваОперации();
		РезультатОтправки = ВызовОперацииРегистрацияКассовойСсылки(
			ПараметрыНастройкиПодключения,
			РезультатИПП.ДанныеАутентификации,
			РезультатСБП.Аутентификация,
			URLОперации,
			ИдентификаторОплаты,
			Заголовки);
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.ПереопределитьКодОшибкиСервиса(
			РезультатОтправки.КодСостояния);
		РезультатОперации.СообщениеОбОшибке = СистемаБыстрыхПлатежейСлужебный.ПереопределитьСообщениеПользователю(
			РезультатОперации.КодОшибки,
			РезультатОтправки.Содержимое);
		
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось создать зарегистрировать кассовую ссылку.
				|
				|%1
				|
				|Техническая информация об ошибке:
				|При регистрации ссылки сервис вернул ошибку.
				|URL: %2
				|Код ошибки: %3
				|X-Correlation-ID: %4
				|Подробная информация:
				|%5'"),
			РезультатОперации.СообщениеОбОшибке,
			URLОперации,
			РезультатОтправки.КодОшибки,
			Заголовки.Получить("X-Correlation-ID"),
			РезультатОтправки.ИнформацияОбОшибке);
		
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	ДанныеОплаты = ПрочитатьДанные_cash_register_qrs_register_qr(
		РезультатОтправки.Содержимое);
	
	РезультатОперации.ИдентификаторОплаты = ДанныеОплаты.sbpMemberResponse.qrId;
	РезультатОперации.КассоваяСсылка = ДанныеОплаты.sbpMemberResponse.payload;
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Завершена регистрация кассовой ссылки в Системе быстрых платежей.'"),
		Ложь);
	
	Возврат РезультатОперации;
	
КонецФункции

// Выполняет вызов операции создания новой кассовой ссылки.
//
// Параметры:
//  ПараметрыНастройкиПодключения - Структура - параметры выполнения операции
//   см. СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения;
//  ДанныеАутентификации - Структура - данные аутентификации на Портале 1С:ИТС;
//  ЗаголовокАутентификации - Строка - данные аутентификации в сервисе участника СБП;
//  URLОперации - Строка - url для вызова операции;
//  ИдентификаторОплаты - Строка - идентификатор ссылки;
//  Заголовки - Соотсветствие - заголовки операции.
//
// Возвращаемое значение:
//  Структура - результат создания заказа на оплату в Системе быстрых платежей:
//   *КодСостояния - Число - http код результата операции;
//   *КодОшибки - Строка - идентификатор ошибки вызова операции;
//   *Содержимое - Строка - ответа сервиса;
//
Функция ВызовОперацииРегистрацияКассовойСсылки(
		ПараметрыНастройкиПодключения,
		ДанныеАутентификации,
		ЗаголовокАутентификации,
		URLОперации,
		ИдентификаторОплаты,
		Заголовки)
	
	ПараметрыПодключения = СистемаБыстрыхПлатежейСлужебный.ИнициализироватьПараметрыПодключения();
	
	ПараметрыЗапросаJSON = cash_register_qrs_register_qr(
		ПараметрыНастройкиПодключения,
		ДанныеАутентификации,
		ЗаголовокАутентификации,
		ИдентификаторОплаты);
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	Возврат ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
КонецФункции

// Формирует параметры запроса для операции
// /sbp/v1/members/{memberId}/cash-register-qrs/register-qr.
//
Функция cash_register_qrs_register_qr(
		ПараметрыНастройкиПодключения,
		ДанныеАутентификации,
		ЗаголовокАутентификации,
		ИдентификаторОплаты)
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	// Данные аутентификации.
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьДанныеАутентификации(
		ЗаписьДанныхСообщения,
		ДанныеАутентификации);
	
	// Данные аутентификации участника СБП.
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьДанныеАутентификацииУчастникаСБП(
		ЗаписьДанныхСообщения,
		ЗаголовокАутентификации,
		ПараметрыНастройкиПодключения.ИдентификаторМерчанта);
	
	// Параметры клиента.
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьПараметрыКлиента(
		ЗаписьДанныхСообщения);
	
	// Параметры кассовой ссылки.
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("sbpMemberRequest");
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("merchantId");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ПараметрыНастройкиПодключения.ИдентификаторМерчанта);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("qrId");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ИдентификаторОплаты); 
	
	Если Не ПустаяСтрока(ПараметрыНастройкиПодключения.СсылкаПеренаправления) Тогда
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("redirectUrl");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(ПараметрыНастройкиПодключения.СсылкаПеренаправления);
	КонецЕсли;
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

// Чтение ответа операции /sbp/v1/members/{memberId}/cash-register-qrs/register-qr.
//
Функция ПрочитатьДанные_cash_register_qrs_register_qr(ТелоJSON)
	
	// Ответ сервиса:
	//  payload - идентификатор оплаты для покупателя;
	//  qrId - идентификатор оплаты в СБП;
	// 
	//  {
	//  "payload": "string",
	//  "qrId": "string"
	// }
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получен ответ СБП:
			|%1'"),
		ТелоJSON);
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	Результат = ПрочитатьJSON(ЧтениеОтвета);
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вызов операции POST /sbp/v1/members/{memberId}/cash-register-qrs/{qrId}/activate.

// Активирует ранее зарегистрированную кассовую ссылку.
//
// Параметры:
//  ЗаказНаОплату - Структура - описание заказа на оплату см. функцию ОписаниеЗаказаНаОплату;
//  Идентификатор - Строка - внешний идентификатор документа оплаты;
//  ИдентификаторОплаты - Строка - идентификатор кассовой ссылки;
//  ПараметрыНастройкиПодключения - Структура - параметры выполнения операции
//   см. СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения.
//
// Возвращаемое значение:
//  Структура - результат создания заказа на оплату в Системе быстрых платежей:
//    *ИдентификаторОплаты - Строка - идентификатор оплаты в СБП;
//    *КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом;
//    *СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция ОперацияАктивацияКассовойСсылки(
		ЗаказОплату,
		Идентификатор,
		ИдентификаторОплаты,
		ПараметрыНастройкиПодключения)
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Активация кассовой ссылки.'"),
		Ложь);
	
	РезультатОперации = СистемаБыстрыхПлатежейСлужебный.НовыйРезультатОперации();
	РезультатОперации.Вставить("ИдентификаторОплаты", "");
	РезультатОперации.Вставить("ПериодИспользования", Неопределено);
	РезультатОперации.Вставить("ПараметрыАктивации", "");
	
	URLОперации = СистемаБыстрыхПлатежейСлужебный.URLОперацииСервиса(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"/members/%1/cash-register-qrs/%2/activate",
			ПараметрыНастройкиПодключения.ИдентификаторУчастника,
			ИдентификаторОплаты));
	
	РезультатИПП = ДанныеАутентификации(URLОперации);
	
	Если РезультатИПП.Ошибка Тогда
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	ДанныеДляПодписи = Новый Массив;
	Если СистемаБыстрыхПлатежейСлужебный.УчастникСБПИспользуетHMAC(ПараметрыНастройкиПодключения.ТипАутентификации) Тогда
		ДанныеДляПодписи.Добавить(ИдентификаторОплаты);
		ДанныеДляПодписи.Добавить(ЗаказОплату.СуммаОплаты);
		ДанныеДляПодписи.Добавить(СистемаБыстрыхПлатежейСлужебный.ИдентификаторВалютыРоссийскийРубль());
		ДанныеДляПодписи.Добавить(Идентификатор);
		ДанныеДляПодписи.Добавить(ЗаказОплату.НазначениеПлатежа);
	КонецЕсли;
	
	РезультатСБП = ДанныеАутентификацииУчастникаСБП(
		ПараметрыНастройкиПодключения,
		ДанныеДляПодписи);
	
	Если РезультатСБП.Ошибка Тогда
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатСБП.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатСБП.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	Заголовки = СистемаБыстрыхПлатежейСлужебный.НовыйЗаголовкиВызоваОперации();
	РезультатОтправки = ВызовОперацииАктивацияКассовойСсылки(
		ЗаказОплату,
		Идентификатор,
		ПараметрыНастройкиПодключения,
		РезультатИПП.ДанныеАутентификации,
		РезультатСБП.Аутентификация,
		URLОперации,
		Заголовки);
	
	// Обработка случаев устаревания токена аутентификации для способа
	// Resource Owner Password Credentials Grant.
	Если РезультатОтправки.КодСостояния = 401
		И СистемаБыстрыхПлатежейСлужебный.УчастникСБПИспользуетPasswordCredentialsGrant(ПараметрыНастройкиПодключения.ТипАутентификации) Тогда
		
		РезультатСБП = ДанныеАутентификацииУчастникаСБП(
			ПараметрыНастройкиПодключения,
			ДанныеДляПодписи,
			Истина);
		
		Если РезультатСБП.Ошибка Тогда
			РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
			РезультатОперации.СообщениеОбОшибке = РезультатСБП.ИнформацияОбОшибке;
			РезультатОперации.ИнформацияОбОшибке = РезультатСБП.ИнформацияОбОшибке;
			Возврат РезультатОперации;
		КонецЕсли;
		
		Заголовки = СистемаБыстрыхПлатежейСлужебный.НовыйЗаголовкиВызоваОперации();
		РезультатОтправки = ВызовОперацииАктивацияКассовойСсылки(
			ЗаказОплату,
			Идентификатор,
			ПараметрыНастройкиПодключения,
			РезультатИПП.ДанныеАутентификации,
			РезультатСБП.Аутентификация,
			URLОперации,
			Заголовки);
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.ПереопределитьКодОшибкиСервиса(
			РезультатОтправки.КодСостояния);
		РезультатОперации.СообщениеОбОшибке = СистемаБыстрыхПлатежейСлужебный.ПереопределитьСообщениеПользователю(
			РезультатОперации.КодОшибки,
			РезультатОтправки.Содержимое);
		
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось активировать кассовую ссылку.
				|
				|%1
				|
				|Техническая информация об ошибке:
				|При активации кассовой ссылки сервис вернул ошибку.
				|URL: %2
				|Код ошибки: %3
				|X-Correlation-ID: %4
				|Подробная информация:
				|%5'"),
			РезультатОперации.СообщениеОбОшибке,
			URLОперации,
			РезультатОтправки.КодОшибки,
			Заголовки.Получить("X-Correlation-ID"),
			РезультатОтправки.ИнформацияОбОшибке);
		
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	ДанныеОплаты = ПрочитатьДанные_params(РезультатОтправки.Содержимое);
	
	РезультатОперации.ИдентификаторОплаты = ДанныеОплаты.sbpMemberResponse.qrId;
	РезультатОперации.ПараметрыАктивации = ДанныеОплаты.sbpMemberResponse.paramsId;
	Если ЗначениеЗаполнено(ЗаказОплату.СрокЖизниQRКода) Тогда
		РезультатОперации.ПериодИспользования = ТекущаяДатаСеанса() + ЗаказОплату.СрокЖизниQRКода * 60;
	Иначе
		РезультатОперации.ПериодИспользования = ТекущаяДатаСеанса() + ДанныеОплаты.qrSettings.defaultQrTtl * 60;
	КонецЕсли;
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Завершена активация кассовой ссылки.'"),
		Ложь);
	
	Возврат РезультатОперации;
	
КонецФункции

// Выполняет вызов операции создания активации кассовой ссылки.
//
// Параметры:
//  ЗаказНаОплату - Структура - описание заказа на оплату см. функцию ОписаниеЗаказаНаОплату;
//  Идентификатор - Строка - внешний идентификатор документа оплаты;
//  ПараметрыНастройкиПодключения - Структура - параметры выполнения операции
//    см. СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения;
//  ДанныеАутентификации - Структура - данные аутентификации на Портале 1С:ИТС;
//  ЗаголовокАутентификации - Строка - данные аутентификации в сервисе участника СБП;
//  URLОперации - Строка - url для вызова операции;
//  Заголовки - Соотсветствие - заголовки операции.
//
// Возвращаемое значение:
//  Структура - результат создания заказа на оплату в Системе быстрых платежей:
//   *КодСостояния - Число - http код результата операции;
//   *КодОшибки - Строка - идентификатор ошибки вызова операции;
//   *Содержимое - Строка - ответа сервиса;
//
Функция ВызовОперацииАктивацияКассовойСсылки(
		ЗаказОплату,
		Идентификатор,
		ПараметрыНастройкиПодключения,
		ДанныеАутентификации,
		ЗаголовокАутентификации,
		URLОперации,
		Заголовки)
	
	ПараметрыПодключения = СистемаБыстрыхПлатежейСлужебный.ИнициализироватьПараметрыПодключения();
	
	ПараметрыЗапросаJSON = activate(
		ЗаказОплату,
		Идентификатор,
		ПараметрыНастройкиПодключения,
		ДанныеАутентификации,
		ЗаголовокАутентификации);
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	Возврат ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
КонецФункции

// Формирует параметры запроса для операции
// /sbp/v1/members/{memberId}/cash-register-qrs/{qrId}/activate.
//
Функция activate(
		ЗаказОплату,
		Идентификатор,
		ПараметрыНастройкиПодключения,
		ДанныеАутентификации,
		ЗаголовокАутентификации)
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	// Данные аутентификации.
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьДанныеАутентификации(
		ЗаписьДанныхСообщения,
		ДанныеАутентификации);
	
	// Данные аутентификации участник СБП.
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьДанныеАутентификацииУчастникаСБП(
		ЗаписьДанныхСообщения,
		ЗаголовокАутентификации,
		ПараметрыНастройкиПодключения.ИдентификаторМерчанта);
	
	// Параметры клиента.
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьПараметрыКлиента(
		ЗаписьДанныхСообщения);
	
	// Параметры оплаты.
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("sbpMemberRequest");
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("amount");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ЗаказОплату.СуммаОплаты);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("currency");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(СистемаБыстрыхПлатежейСлужебный.ИдентификаторВалютыРоссийскийРубль());
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("createDate");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(
		ЗаписатьДатуJSON(
			ЗаказОплату.ДатаОплаты,
			ФорматДатыJSON.ISO,
			ВариантЗаписиДатыJSON.ЛокальнаяДатаСоСмещением));
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("orderId");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Строка(Идентификатор));
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("qrTtl");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(
		?(Не ЗначениеЗаполнено(ЗаказОплату.СрокЖизниQRКода),
			Неопределено,
			ЗаказОплату.СрокЖизниQRКода));
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("paymentPurpose");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ЗаказОплату.НазначениеПлатежа);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

// Чтение ответа операции /sbp/v1/members/{memberId}/cash-register-qrs/{qrId}/activate.
//
Функция ПрочитатьДанные_params(ТелоJSON)
	
	// Ответ сервиса:
	//  payload - идентификатор оплаты для покупателя;
	//  qrId - идентификатор оплаты в СБП;
	// 
	//  {
	//  "payload": "string",
	//  "qrId": "string"
	// }
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получен ответ СБП:
			|%1'"),
		ТелоJSON);
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	Результат = ПрочитатьJSON(ЧтениеОтвета);
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вызов операции POST /sbp/v1/members/{memberId}/cash-register-payments/qrs/{qrId}/params/{paramsId}/search-payment

// Определяет статус заказа на оплату в Системе быстрых платежей.
//
// Параметры:
//  ИдентификаторОплаты - Строка - идентификатор оплаты в системе быстрых платежей;
//  ДатаЗапросаСтатуса - Дата - дата последнего запроса статуса оплаты;
//  ПараметрыНастройкиПодключения - Структура - параметры выполнения операции
//    см. СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения;
//  ИдентификаторОперации - Строка - идентификатор операции проверки наличия статуса;
//  ЗапросНаличияСтатуса - Булево - если Истина, будет выполнен запрос наличия статуса.
//
// Возвращаемое значение:
//  Структура - результат проверки статуса заказа на оплату в Системе быстрых платежей:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом;
//    * СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора;
//    * СтатусОплаты - Строка - состояние оплаты в Системе быстрых платежей;
//    * ИдентификаторОперации - Строка - идентификатор оплаты;
//    * ДатаОперации - Дата - дата регистрации операции в Системе быстрых платежей;
//    * СуммаОперации - Число - фактическая суммы оплаты по документу.
//
Функция ОперацияСтатусОплатыКассовойСсылки(
		ИдентификаторОплаты,
		ПараметрыАктивации,
		ДатаЗапросаСтатуса,
		ПараметрыНастройкиПодключения,
		ИдентификаторОперацииПроверки,
		ЗапросНаличияСтатуса = Истина)
	
	РезультатОперации = СистемаБыстрыхПлатежейСлужебный.НовыйРезультатОперации();
	РезультатОперации.Вставить("СтатусОплаты",               "");
	РезультатОперации.Вставить("ИдентификаторОперации",      "");
	РезультатОперации.Вставить("ИдентификаторОплаты",        "");
	РезультатОперации.Вставить("ДатаОперации",               Неопределено);
	РезультатОперации.Вставить("СуммаОперации",              Неопределено);
	РезультатОперации.Вставить("ОбновитьДатуЗапросаСтатуса", Ложь);
	
	Если ЗапросНаличияСтатуса Тогда
		
		Если Не ЗначениеЗаполнено(ПараметрыАктивации) Тогда
			РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйФорматЗапроса();
			РезультатОперации.СообщениеОбОшибке = НСтр("ru = 'Не заполнены параметры активации операции.'");
			РезультатОперации.ИнформацияОбОшибке = РезультатОперации.СообщениеОбОшибке;
			
			СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
				Строка(РезультатОперации.ИнформацияОбОшибке),
				Истина);
			
			Возврат РезультатОперации;
		КонецЕсли;
		
		ИдентификаторыОплат = НовыйИдентификаторыПроверкиНаличияСтатусаКассовыхСсылок();
		
		ДанныеОплаты = ИдентификаторыОплат.Добавить();
		ДанныеОплаты.Идентификатор = ИдентификаторОплаты;
		ДанныеОплаты.ДатаЗапросаСтатуса = ДатаЗапросаСтатуса;
		ДанныеОплаты.ПараметрыАктивации = ПараметрыАктивации;
		
		РезультатПроверки = ОперацияПроверкаНаличияСтатусаКассовыхСсылок(
			ИдентификаторыОплат,
			ПараметрыНастройкиПодключения.ИдентификаторУчастника,
			ИдентификаторОперацииПроверки);
		
		Если ЗначениеЗаполнено(РезультатПроверки.КодОшибки) Тогда
			ЗаполнитьЗначенияСвойств(
				РезультатОперации,
				РезультатПроверки,
				"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
			Возврат РезультатОперации;
		КонецЕсли;
		
		Если РезультатПроверки.Идентификаторы.Найти(ПараметрыАктивации) = Неопределено Тогда
			РезультатОперации.СтатусОплаты = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаВПроцессе();
			Возврат РезультатОперации;
		КонецЕсли;
		
	КонецЕсли;
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Проверка статуса заказа на оплату кассовой ссылки в Системе быстрых платежей.'"),
		Ложь);
	
	// Необходимо обновить дату запроса с статуса в базе данных.
	РезультатОперации.ОбновитьДатуЗапросаСтатуса = Истина;
	
	URLОперации = СистемаБыстрыхПлатежейСлужебный.URLОперацииСервиса(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"/members/%1/cash-register-payments/qrs/%2/params/%3/search-payment",
			ПараметрыНастройкиПодключения.ИдентификаторУчастника,
			ИдентификаторОплаты,
			ПараметрыАктивации));
	
	РезультатИПП = ДанныеАутентификации(URLОперации);
	
	Если РезультатИПП.Ошибка Тогда
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	ДанныеДляПодписи = Новый Массив;
	Если СистемаБыстрыхПлатежейСлужебный.УчастникСБПИспользуетHMAC(ПараметрыНастройкиПодключения.ТипАутентификации) Тогда
		ДанныеДляПодписи.Добавить(ИдентификаторОплаты);
		ДанныеДляПодписи.Добавить(ПараметрыАктивации);
	КонецЕсли;
	
	РезультатСБП = ДанныеАутентификацииУчастникаСБП(
		ПараметрыНастройкиПодключения,
		ДанныеДляПодписи);
	
	Если РезультатСБП.Ошибка Тогда
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатСБП.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатСБП.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	Заголовки = СистемаБыстрыхПлатежейСлужебный.НовыйЗаголовкиВызоваОперации();
	РезультатОтправки = ВызовСтатусОплатыКассовойСсылки(
		ПараметрыНастройкиПодключения,
		РезультатИПП.ДанныеАутентификации,
		РезультатСБП.Аутентификация,
		URLОперации,
		Заголовки);
	
	// Обработка случаев устаревания токена аутентификации для способа
	// Resource Owner Password Credentials Grant.
	Если РезультатОтправки.КодСостояния = 401
		И СистемаБыстрыхПлатежейСлужебный.УчастникСБПИспользуетPasswordCredentialsGrant(ПараметрыНастройкиПодключения.ТипАутентификации) Тогда
		
		РезультатСБП = ДанныеАутентификацииУчастникаСБП(
			ПараметрыНастройкиПодключения,
			ДанныеДляПодписи,
			Истина);
		
		Если РезультатСБП.Ошибка Тогда
			РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
			РезультатОперации.СообщениеОбОшибке = РезультатСБП.ИнформацияОбОшибке;
			РезультатОперации.ИнформацияОбОшибке = РезультатСБП.ИнформацияОбОшибке;
			Возврат РезультатОперации;
		КонецЕсли;
		
		Заголовки = СистемаБыстрыхПлатежейСлужебный.НовыйЗаголовкиВызоваОперации();
		РезультатОтправки = ВызовСтатусОплатыКассовойСсылки(
			ПараметрыНастройкиПодключения,
			РезультатИПП.ДанныеАутентификации,
			РезультатСБП.Аутентификация,
			URLОперации,
			Заголовки);
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.ПереопределитьКодОшибкиСервиса(
			РезультатОтправки.КодСостояния);
		РезультатОперации.СообщениеОбОшибке = СистемаБыстрыхПлатежейСлужебный.ПереопределитьСообщениеПользователю(
			РезультатОперации.КодОшибки,
			РезультатОтправки.Содержимое);
		
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить статус оплаты кассовой ссылки в Системе быстрых платежей.
				|
				|%1
				|
				|Техническая информация об ошибке:
				|При получении статуса оплаты сервис вернул ошибку.
				|URL: %2
				|Код ошибки: %3
				|X-Correlation-ID: %4
				|Подробная информация:
				|%5'"),
			РезультатОперации.СообщениеОбОшибке,
			URLОперации,
			РезультатОтправки.КодОшибки,
			Заголовки.Получить("X-Correlation-ID"),
			РезультатОтправки.ИнформацияОбОшибке);
		
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	ДанныеСтатуса = ПрочитатьДанные_cash_search_payment(РезультатОтправки.Содержимое);
	
	РезультатОперации.СтатусОплаты = ДанныеСтатуса.sbpMemberResponse.paymentStatus;
	РезультатОперации.ИдентификаторОперации = СистемаБыстрыхПлатежейСлужебный.ИдентификаторОперацииБезСлужебныхСимволов(
		ДанныеСтатуса.sbpMemberResponse.paymentId);
	РезультатОперации.ИдентификаторОплаты = ИдентификаторОплаты;
	РезультатОперации.ДатаОперации = ДанныеСтатуса.sbpMemberResponse.operationDate;
	РезультатОперации.СуммаОперации = ДанныеСтатуса.sbpMemberResponse.amount;
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Проверка статуса заказа на оплату кассовой ссылки в Системе быстрых платежей завершена.'"),
		Ложь);
	
	Возврат РезультатОперации;
	
КонецФункции

// Выполняет вызов операции проверки статуса заказа на оплату.
//
// Параметры:
//  ПараметрыНастройкиПодключения - Структура - параметры выполнения операции
//   см. СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения;
//  ДанныеАутентификации - Структура - данные аутентификации на Портале 1С:ИТС;
//  ЗаголовокАутентификации - Строка - данные аутентификации в сервисе участника СБП;
//  URLОперации - Строка - url для вызова операции;
//  Заголовки - Соотсветствие - заголовки операции.
//
// Возвращаемое значение:
//  Структура - результат получения статуса заказа на оплату в Системе быстрых платежей:
//   *КодСостояния - Число - http код результата операции;
//   *КодОшибки - Строка - идентификатор ошибки вызова операции;
//   *Содержимое - Строка - ответа сервиса;
//
Функция ВызовСтатусОплатыКассовойСсылки(
		ПараметрыНастройкиПодключения,
		ДанныеАутентификации,
		ЗаголовокАутентификации,
		URLОперации,
		Заголовки)
	
	ПараметрыПодключения = СистемаБыстрыхПлатежейСлужебный.ИнициализироватьПараметрыПодключения();
	
	ПараметрыЗапросаJSON = cash_search_payment(
		ДанныеАутентификации,
		ЗаголовокАутентификации,
		ПараметрыНастройкиПодключения.ИдентификаторМерчанта);
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	Возврат ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
КонецФункции

// Формирует параметры запроса для операции
// /sbp/v1/members/{memberId}/cash-register-payments/qrs/{qrId}/params/{paramsId}/search-payment.
//
Функция cash_search_payment(
		ДанныеАутентификации,
		ЗаголовокАутентификации,
		ИдентификаторМерчанта)
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	// Данные аутентификации.
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьДанныеАутентификации(
		ЗаписьДанныхСообщения,
		ДанныеАутентификации);
	
	// Данные аутентификации участника СБП.
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьДанныеАутентификацииУчастникаСБП(
		ЗаписьДанныхСообщения,
		ЗаголовокАутентификации,
		ИдентификаторМерчанта);
	
	// Параметры клиента.
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьПараметрыКлиента(
		ЗаписьДанныхСообщения);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

// Чтение ответа операции:
// /sbp/v1/members/{memberId}/cash-register-payments/qrs/{qrId}/params/{paramsId}/search-payment
//
Функция ПрочитатьДанные_cash_search_payment(ТелоJSON)
	
	// Ответ сервиса:
	//  operationDate - дата операции в Системе быстрых платежей;
	//  paymentId - идентификатор операции в Системе быстрых платежей;
	//  paymentStatus - статус оплаты;
	//  qrId - идентификатор операции в СБП;
	// 
	//{
	//  "operationDate": "string",
	//  "paymentId": "string",
	//  "paymentStatus": "SUCCESS",
	//  "qrId": "string"
	// }
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получен ответ СБП:
			|%1'"),
		ТелоJSON);
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	ИменаСвойствСоЗначениямиДата = Новый Массив;
	ИменаСвойствСоЗначениямиДата.Добавить("operationDate");
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	Результат = ПрочитатьJSON(
		ЧтениеОтвета,
		,
		ИменаСвойствСоЗначениямиДата,
		,
		"ВосстановитьДатуJSON",
		СистемаБыстрыхПлатежейСлужебный,
		,
		ИменаСвойствСоЗначениямиДата);
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вызов операции POST /program1c/sbp/v1/members/{memberId}/cash-register-qrs/{qrId}/deactivate.

// Деактивирует кассовую ссылку.
//
// Параметры:
//  ПараметрыНастройкиПодключения - Структура - параметры выполнения операции
//   см. СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения.
//  *ИдентификаторОплаты - Строка - идентификатор оплаты в СБП;
//
// Возвращаемое значение:
//  Структура - результат создания заказа на оплату в Системе быстрых платежей:
//    *КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом;
//    *СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция ОперацияДеактивироватьКассовуюСсылку(
		ПараметрыНастройкиПодключения,
		ИдентификаторОплаты)
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Деактивация кассовой ссылки в Системе быстрых платежей.'"),
		Ложь);
	
	РезультатОперации = СистемаБыстрыхПлатежейСлужебный.НовыйРезультатОперации();
	
	URLОперации = СистемаБыстрыхПлатежейСлужебный.URLОперацииСервиса(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"/members/%1/cash-register-qrs/%2/deactivate",
			ПараметрыНастройкиПодключения.ИдентификаторУчастника,
			ИдентификаторОплаты));
	
	РезультатИПП = ДанныеАутентификации(URLОперации);
	
	Если РезультатИПП.Ошибка Тогда
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	ДанныеДляПодписи = Новый Массив;
	Если СистемаБыстрыхПлатежейСлужебный.УчастникСБПИспользуетHMAC(ПараметрыНастройкиПодключения.ТипАутентификации) Тогда
		ДанныеДляПодписи.Добавить(ИдентификаторОплаты);
	КонецЕсли;
	
	РезультатСБП = ДанныеАутентификацииУчастникаСБП(
		ПараметрыНастройкиПодключения,
		ДанныеДляПодписи);
	
	Если РезультатСБП.Ошибка Тогда
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатСБП.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатСБП.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	РезультатОтправки = ВызовОперацииОперацияДеактивироватьКассовуюСсылку(
		ПараметрыНастройкиПодключения,
		РезультатИПП.ДанныеАутентификации,
		РезультатСБП.Аутентификация,
		URLОперации);
	
	// Обработка случаев устаревания токена аутентификации для способа
	// Resource Owner Password Credentials Grant.
	Если РезультатОтправки.КодСостояния = 401
		И СистемаБыстрыхПлатежейСлужебный.УчастникСБПИспользуетPasswordCredentialsGrant(ПараметрыНастройкиПодключения.ТипАутентификации) Тогда
		
		РезультатСБП = ДанныеАутентификацииУчастникаСБП(
			ПараметрыНастройкиПодключения,
			ДанныеДляПодписи,
			Истина);
		
		Если РезультатСБП.Ошибка Тогда
			РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
			РезультатОперации.СообщениеОбОшибке = РезультатСБП.ИнформацияОбОшибке;
			РезультатОперации.ИнформацияОбОшибке = РезультатСБП.ИнформацияОбОшибке;
			Возврат РезультатОперации;
		КонецЕсли;
		
		РезультатОтправки = ВызовОперацииОперацияДеактивироватьКассовуюСсылку(
			ПараметрыНастройкиПодключения,
			РезультатИПП.ДанныеАутентификации,
			РезультатСБП.Аутентификация,
			URLОперации);
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.ПереопределитьКодОшибкиСервиса(
			РезультатОтправки.КодСостояния);
		РезультатОперации.СообщениеОбОшибке = СистемаБыстрыхПлатежейСлужебный.ПереопределитьСообщениеПользователю(
			РезультатОперации.КодОшибки,
			РезультатОтправки.Содержимое);
		
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось создать зарегистрировать кассовую ссылку.
				|
				|%1
				|
				|Техническая информация об ошибке:
				|При регистрации ссылки сервис вернул ошибку.
				|URL: %2
				|Код ошибки: %3
				|Подробная информация:
				|%4'"),
			РезультатОперации.СообщениеОбОшибке,
			URLОперации,
			РезультатОтправки.КодОшибки,
			РезультатОтправки.ИнформацияОбОшибке);
		
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Завершена деактивация кассовой ссылки в Системе быстрых платежей.'"),
		Ложь);
	
	Возврат РезультатОперации;
	
КонецФункции

// Выполняет вызов операции деактивации кассовой ссылки.
//
// Параметры:
//  ПараметрыНастройкиПодключения - Структура - параметры выполнения операции
//   см. СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения;
//  ДанныеАутентификации - Структура - данные аутентификации на Портале 1С:ИТС;
//  ЗаголовокАутентификации - Строка - данные аутентификации в сервисе участника СБП;
//  URLОперации - Строка - url для вызова операции;
//
// Возвращаемое значение:
//  Структура - результат деактивации заказа на оплату в Системе быстрых платежей:
//   *КодСостояния - Число - http код результата операции;
//   *КодОшибки - Строка - идентификатор ошибки вызова операции;
//   *Содержимое - Строка - ответа сервиса;
//
Функция ВызовОперацииОперацияДеактивироватьКассовуюСсылку(
		ПараметрыНастройкиПодключения,
		ДанныеАутентификации,
		ЗаголовокАутентификации,
		URLОперации)
	
	ПараметрыПодключения = СистемаБыстрыхПлатежейСлужебный.ИнициализироватьПараметрыПодключения();
	
	ПараметрыЗапросаJSON = cash_qrs_deactivate(
		ПараметрыНастройкиПодключения,
		ДанныеАутентификации,
		ЗаголовокАутентификации);
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , СистемаБыстрыхПлатежейСлужебный.НовыйЗаголовкиВызоваОперации());
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	Возврат ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
КонецФункции

// Формирует параметры запроса для операции
// /sbp/v1/members/{memberId}/cash-register-qrs/register-qr.
//
Функция cash_qrs_deactivate(
		ПараметрыНастройкиПодключения,
		ДанныеАутентификации,
		ЗаголовокАутентификации)
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	// Данные аутентификации.
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьДанныеАутентификации(
		ЗаписьДанныхСообщения,
		ДанныеАутентификации);
	
	// Данные аутентификации участник СБП.
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьДанныеАутентификацииУчастникаСБП(
		ЗаписьДанныхСообщения,
		ЗаголовокАутентификации,
		ПараметрыНастройкиПодключения.ИдентификаторМерчанта);
	
	// Параметры клиента.
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьПараметрыКлиента(
		ЗаписьДанныхСообщения);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

#КонецОбласти

#Область ВызовОперацийВозвратов

////////////////////////////////////////////////////////////////////////////////
// Вызов операции POST /sbp/v1/members/{memberId}/refunds/create-refund

// Создает возврат оплаты в Системе быстрых платежей.
//
// Параметры:
//  ПараметрыВозврата - Структура - данные для формирования возврата;
//  ПараметрыНастройкиПодключения - Структура - параметры выполнения операции
//    см. СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения.
//
// Возвращаемое значение:
//  Структура - результат проверки статуса заказа на оплату в Системе быстрых платежей:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//        может быть обработан вызывающим методом;
//    * СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора;
//    * СтатусВозврата - Строка - состояние возврата в Системе быстрых платежей.
//    * ИдентификаторВозврата - Строка - идентификатор возврата;
//    * ДатаОперации - Дата - дата регистрации операции в Системе быстрых платежей;
//    * СуммаОперации - Число - фактическая сумма возврата по документу.
//    * Подтверждение - Структура, Неопределено - данные для подтверждения возврата в Системе быстрых платежей:
//        **ФИО - Строка - маскированное ФИО физического лица на расчетный счет, которого
//            переводятся денежные средства;
//        ** НомерСчета - Строка - маскированный номер счета, на который будут переведены денежные средства;
//        ** НомерТелефона - Строка - маскированный номер телефона, к которому привязан расчетный счет в платежной
//            системе получателе платежа;
//        ** ИдентификаторСессии - Строка - идентификатор сессии возврата. Используется при подтверждении возврата
//            см. ПереводыСБПc2b.ПодтвердитьВозврат;
//
Функция ОперацияВозвратОплаты(ПараметрыВозврата, ПараметрыНастройкиПодключения)
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Создание заказа на возврат в Системе быстрых платежей.'"),
		Ложь);
	
	Подтверждение = Новый Структура;
	Подтверждение.Вставить("ФИО", "");
	Подтверждение.Вставить("НомерСчета", "");
	Подтверждение.Вставить("НомерТелефона", "");
	
	РезультатОперации = СистемаБыстрыхПлатежейСлужебный.НовыйРезультатДлительнойОперации();
	РезультатОперации.Вставить("ИдентификаторОплаты",   "");
	РезультатОперации.Вставить("СтатусВозврата",        "");
	РезультатОперации.Вставить("ИдентификаторВозврата", "");
	РезультатОперации.Вставить("ДатаОперации", Неопределено);
	РезультатОперации.Вставить("СуммаОперации", Неопределено);
	РезультатОперации.Вставить("ИдентификаторСессии", "");
	РезультатОперации.Вставить("Подтверждение", Подтверждение);
	
	URLОперации = СистемаБыстрыхПлатежейСлужебный.URLОперацииСервиса(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"/members/%1/refunds/create-refund",
			ПараметрыНастройкиПодключения.ИдентификаторУчастника));
	
	РезультатИПП = ДанныеАутентификации(URLОперации);
	
	Если РезультатИПП.Ошибка Тогда
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	ДанныеДляПодписи = Новый Массив;
	Если СистемаБыстрыхПлатежейСлужебный.УчастникСБПИспользуетHMAC(ПараметрыНастройкиПодключения.ТипАутентификации) Тогда
		ДанныеДляПодписи.Добавить(ПараметрыВозврата.ИдентификаторСПБ);
		ДанныеДляПодписи.Добавить(ПараметрыВозврата.ИдентификаторОперации);
		ДанныеДляПодписи.Добавить(ПараметрыВозврата.СуммаВозврата);
		ДанныеДляПодписи.Добавить(СистемаБыстрыхПлатежейСлужебный.ИдентификаторВалютыРоссийскийРубль());
		ДанныеДляПодписи.Добавить(ПараметрыВозврата.ИдентификаторыОперации);
	КонецЕсли;
	
	РезультатСБП = ДанныеАутентификацииУчастникаСБП(
		ПараметрыНастройкиПодключения,
		ДанныеДляПодписи);
	
	Если РезультатСБП.Ошибка Тогда
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатСБП.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатСБП.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	Заголовки = СистемаБыстрыхПлатежейСлужебный.НовыйЗаголовкиВызоваОперации();
	РезультатОтправки = ВызовОперацииВозвратОплаты(
		ПараметрыНастройкиПодключения,
		ПараметрыВозврата,
		РезультатИПП.ДанныеАутентификации,
		РезультатСБП.Аутентификация,
		URLОперации,
		Заголовки);
	
	// Обработка случаев устаревания токена аутентификации для способа
	// Resource Owner Password Credentials Grant.
	Если РезультатОтправки.КодСостояния = 401
		И СистемаБыстрыхПлатежейСлужебный.УчастникСБПИспользуетPasswordCredentialsGrant(ПараметрыНастройкиПодключения.ТипАутентификации) Тогда
		
		РезультатСБП = ДанныеАутентификацииУчастникаСБП(
			ПараметрыНастройкиПодключения,
			ДанныеДляПодписи,
			Истина);
		
		Если РезультатСБП.Ошибка Тогда
			РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
			РезультатОперации.СообщениеОбОшибке = РезультатСБП.ИнформацияОбОшибке;
			РезультатОперации.ИнформацияОбОшибке = РезультатСБП.ИнформацияОбОшибке;
			Возврат РезультатОперации;
		КонецЕсли;
		
		Заголовки = СистемаБыстрыхПлатежейСлужебный.НовыйЗаголовкиВызоваОперации();
		РезультатОтправки = ВызовОперацииВозвратОплаты(
			ПараметрыНастройкиПодключения,
			ПараметрыВозврата,
			РезультатИПП.ДанныеАутентификации,
			РезультатСБП.Аутентификация,
			URLОперации,
			Заголовки);
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.ПереопределитьКодОшибкиСервиса(
			РезультатОтправки.КодСостояния);
		
		// Для возвратов ошибка 400 обрабатывается по отдельному сценарию, т.к.
		// возможны ситуации, при которых счет получателя в банке будет не найден или заблокирован.
		// НСПК не возвращает код ошибки, по которому можно идентифицировать подобную ошибку
		// поэтому пользователю отображается общее сообщение.
		Если РезультатОтправки.КодСостояния = 400 Тогда
			РезультатОперации.СообщениеОбОшибке = НСтр("ru = 'Не удалось создать заказ на возврат. Возможные причины ошибки:
				| - у покупателя отсутствует счет в выбранном банке;
				| - неверно сформирован запрос на возврат;
				|Обратитесь к администратору.'");
		Иначе
			РезультатОперации.СообщениеОбОшибке = СистемаБыстрыхПлатежейСлужебный.ПереопределитьСообщениеПользователю(
				РезультатОперации.КодОшибки,
				РезультатОтправки.Содержимое);
		КонецЕсли;
		
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось создать заказ на возврат в Системе быстрых платежей.
				|
				|%1
				|
				|Техническая информация об ошибке:
				|При создании заказа на возврат сервис вернул ошибку.
				|URL: %2
				|Код ошибки: %3
				|X-Correlation-ID: %4
				|Подробная информация:
				|%5'"),
			РезультатОперации.СообщениеОбОшибке,
			URLОперации,
			РезультатОтправки.КодОшибки,
			Заголовки.Получить("X-Correlation-ID"),
			РезультатОтправки.ИнформацияОбОшибке);
		
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	ДанныеВозврата = ПрочитатьДанные_refunds_create_refund(
		РезультатОтправки.Содержимое);
	
	РезультатОперации.СтатусВозврата = ДанныеВозврата.sbpMemberResponse.refundStatus;
	РезультатОперации.ИдентификаторВозврата = СистемаБыстрыхПлатежейСлужебный.ИдентификаторОперацииБезСлужебныхСимволов(
		ДанныеВозврата.sbpMemberResponse.refundId);
	РезультатОперации.ИдентификаторОплаты = ДанныеВозврата.sbpMemberResponse.qrId;
	РезультатОперации.ДатаОперации  = ДанныеВозврата.sbpMemberResponse.operationDate;
	РезультатОперации.СуммаОперации = ДанныеВозврата.sbpMemberResponse.amount;
	Если ДанныеВозврата.sbpMemberResponse.confirmation <> Неопределено Тогда
		РезультатОперации.Подтверждение.НомерСчета    = ДанныеВозврата.sbpMemberResponse.confirmation.accountNumber;
		РезультатОперации.Подтверждение.ФИО           = ДанныеВозврата.sbpMemberResponse.confirmation.fullName;
		РезультатОперации.Подтверждение.НомерТелефона = ДанныеВозврата.sbpMemberResponse.confirmation.phone;
		РезультатОперации.ИдентификаторСессии         = ДанныеВозврата.sbpMemberResponse.confirmation.state;
	КонецЕсли;
	
	Если ДанныеВозврата.sbpMemberResponse.refundStatus = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаОтменена() Тогда
		
		Если ДанныеВозврата.sbpMemberResponse.Свойство("refundStatusDescription") Тогда // АПК:1416 Не обязательное свойство ответа сервиса.
			ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось создать заказ на возврат в Системе быстрых платежей.
					|
					|%1
					|
					|Техническая информация об ошибке:
					|Операция была отменена.'"),
				ДанныеВозврата.sbpMemberResponse.refundStatusDescription);
		Иначе
			ИнформацияОбОшибке = НСтр("ru = 'Не удалось создать заказ на возврат в Системе быстрых платежей.
				|
				|Причина отмены операции не указана.
				|
				|Техническая информация об ошибке:
				|Операция была отменена.'");
		КонецЕсли;
		
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			ИнформацияОбОшибке,
			Истина);
		
	Иначе
		
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			НСтр("ru = 'Завершено создание заказа на возврат в Системе быстрых платежей.'"),
			Ложь);
		
	КонецЕсли;
	
	Возврат РезультатОперации;
	
КонецФункции

// Выполняет вызов операции возврата оплаты.
//
// Параметры:
//  ПараметрыНастройкиПодключения - Структура - параметры выполнения операции
//    см. СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения;
//  ПараметрыВозврата - Структура - данные для формирования возврата;
//  ДанныеАутентификации - Структура - данные аутентификации на Портале 1С:ИТС;
//  ЗаголовокАутентификации - Строка - данные аутентификации в сервисе участника СБП;
//  URLОперации - Строка - url для вызова операции;
//  Заголовки - Соотсветствие - заголовки операции.
//
// Возвращаемое значение:
//  Структура - результат создания возврата оплаты в Системе быстрых платежей:
//   *КодСостояния - Число - http код результата операции;
//   *КодОшибки - Строка - идентификатор ошибки вызова операции;
//   *Содержимое - Строка - ответа сервиса;
//
Функция ВызовОперацииВозвратОплаты(
		ПараметрыНастройкиПодключения,
		ПараметрыВозврата,
		ДанныеАутентификации,
		ЗаголовокАутентификации,
		URLОперации,
		Заголовки)
	
	ПараметрыПодключения = СистемаБыстрыхПлатежейСлужебный.ИнициализироватьПараметрыПодключения();
	
	ПараметрыЗапросаJSON = refunds_create_refund(
		ПараметрыВозврата,
		ДанныеАутентификации,
		ЗаголовокАутентификации,
		ПараметрыНастройкиПодключения.ИдентификаторМерчанта);
	
	// Вызов операции выполняется в 6 итераций. Повторные вызовы операции требуются
	// для случаев, когда результат выполнения возврата не определен. Обычно операция возврата
	// не занимает много времени, но в ряде случаев время обработки может быть увеличено.
	// Между вызовами добавляется пауза, чтобы не нагружать сервис банка.
	//
	// Паузы между вызовами:
	// - между 2-м и 3-м вызовом делается пауза 3 секунды;
	// - между 3-м и 4-м вызовом делается пауза 10 секунд;
	// - между 4-м и 5-м вызовом делается пауза 15 секунд;
	// - между 5-м и 6-м вызовом делается пауза 15 секунд; 
	
	КоличествоОпераций = 0;
	Пока КоличествоОпераций <= 5 Цикл
		
		ПараметрыОтправки = Новый Структура;
		ПараметрыОтправки.Вставить("Метод"                   , "POST");
		ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
		ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
		ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
		ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
		ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
		ПараметрыОтправки.Вставить("Таймаут"                 , 30);
		
		РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
			URLОперации,
			,
			,
			ПараметрыОтправки);
		
		Если РезультатОтправки.КодСостояния < 500
			И РезультатОтправки.КодСостояния <> 0 Тогда
			Прервать;
		КонецЕсли;
		
		// Перед выполнением повторного вызова при работе в модели
		// сервиса необходимо получить новый тикет.
		Если ОбщегоНазначения.РазделениеВключено() Тогда
			
			РезультатИПП = ДанныеАутентификации(URLОперации);
			Если РезультатИПП.Ошибка Тогда
				Прервать;
			КонецЕсли;
			
			ПараметрыЗапросаJSON = refunds_create_refund(
				ПараметрыВозврата,
				РезультатИПП.ДанныеАутентификации,
				ЗаголовокАутентификации,
				ПараметрыНастройкиПодключения.ИдентификаторМерчанта);
			
		КонецЕсли;
		
		КоличествоОпераций = КоличествоОпераций + 1;
		
		Если КоличествоОпераций = 2 Тогда
			ИнтернетПоддержкаПользователей.Пауза(3);
		ИначеЕсли КоличествоОпераций = 3 Тогда
			ИнтернетПоддержкаПользователей.Пауза(5);
		ИначеЕсли КоличествоОпераций = 4 Тогда
			ИнтернетПоддержкаПользователей.Пауза(10);
		ИначеЕсли КоличествоОпераций = 5 Тогда
			ИнтернетПоддержкаПользователей.Пауза(15);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатОтправки;
	
КонецФункции

// Формирует параметры запроса для операции
// sbp/members/{memberId}/refunds/create-refund.
//
Функция refunds_create_refund(
		ПараметрыВозврата,
		ДанныеАутентификации,
		ЗаголовокАутентификации,
		ИдентификаторМерчанта)
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	// Данные аутентификации.
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьДанныеАутентификации(
		ЗаписьДанныхСообщения,
		ДанныеАутентификации);
	
	// Данные аутентификации участника СБП.
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьДанныеАутентификацииУчастникаСБП(
		ЗаписьДанныхСообщения,
		ЗаголовокАутентификации,
		ИдентификаторМерчанта);
	
	// Параметры клиента.
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьПараметрыКлиента(
		ЗаписьДанныхСообщения);
	
	// Параметры возврата.
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("sbpMemberRequest");
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("amount");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ПараметрыВозврата.СуммаВозврата);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("currency");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(СистемаБыстрыхПлатежейСлужебный.ИдентификаторВалютыРоссийскийРубль());
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("createDate");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(
		ЗаписатьДатуJSON(
			ПараметрыВозврата.ДатаВозврата,
			ФорматДатыJSON.ISO,
			ВариантЗаписиДатыJSON.ЛокальнаяДатаСоСмещением));
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("memberId");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(
		?(ЗначениеЗаполнено(ПараметрыВозврата.УчастникСБП), 
			СтрЗаменить("" + ПараметрыВозврата.УчастникСБП, Символы.НПП, ""),
			Неопределено));
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("qrId");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ПараметрыВозврата.ИдентификаторСПБ);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("refundOperationId");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Строка(ПараметрыВозврата.ИдентификаторыОперации));
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("paymentId");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ПараметрыВозврата.ИдентификаторОперации);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

// Чтение ответа операции:
// sbp/members/{memberId}/refunds/create-refund.
//
Функция ПрочитатьДанные_refunds_create_refund(ТелоJSON)
	
	// Ответ сервиса:
	//  operationDate - дата операции в Системе быстрых платежей;
	//  refundId - идентификатор операции в Системе быстрых платежей;
	//  refundStatus - статус возврата;
	//  confirmation - данные для подтверждения возврата;
	// 
	//{
	//  "confirmation": {
	//    "accountNumber": "string",
	//    "fullName": "string",
	//    "phone": "string",
	//    "state": "string"
	//  },
	//  "operationDate": "2020-09-08T09:47:19.258Z",
	//  "refundId": "string",
	//  "refundStatus": "SUCCESS",
	//  "refundStatusDescription": "string"
	// }
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получен ответ СБП:
			|%1'"),
		ТелоJSON);
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	ИменаСвойствСоЗначениямиДата = Новый Массив;
	ИменаСвойствСоЗначениямиДата.Добавить("operationDate");
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	Результат = ПрочитатьJSON(
		ЧтениеОтвета,
		,
		ИменаСвойствСоЗначениямиДата,
		,
		"ВосстановитьДатуJSON",
		СистемаБыстрыхПлатежейСлужебный,
		,
		ИменаСвойствСоЗначениямиДата);
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вызов операции POST /sbp/v1/members/{memberId}/refunds/{refundId}/confirm-refund

// Отправляет подтверждение возврата и получает статус возврат оплаты в Системе быстрых платежей.
//
// Параметры:
//  ИдентификаторОперации - Строка - идентификатор возврата в Системе быстрых платежей;
//  ИдентификаторСессии - Строка - сессия возврата в Системе быстрых платежей;
//  ПараметрыНастройкиПодключения - Структура - параметры выполнения операции
//    см. СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения.
//
// Возвращаемое значение:
//  Структура - результат проверки статуса заказа на оплату в Системе быстрых платежей:
//    *КодОшибки - Строка - строковый код возникшей ошибки, который
//                  может быть обработан вызывающим методом;
//    * СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора;
//    * СтатусВозврата - Строка - состояние возврата в Системе быстрых платежей;
//    * ДатаОперации - Дата - дата регистрации операции в Системе быстрых платежей;
//    * СуммаОперации - Число - фактическая сумма возврата по документу.
//
Функция ОперацияПодтверждениеВозврата(
		ИдентификаторыОперации,
		ИдентификаторСессии,
		ПараметрыНастройкиПодключения)
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Подтверждение заказа на возврат в Системе быстрых платежей.'"),
		Ложь);
	
	РезультатОперации = СистемаБыстрыхПлатежейСлужебный.НовыйРезультатОперации();
	РезультатОперации.Вставить("СтатусВозврата", "");
	РезультатОперации.Вставить("ДатаОперации", Дата(1, 1, 1));
	РезультатОперации.Вставить("СуммаОперации", Неопределено);
	РезультатОперации.Вставить("ИдентификаторВозврата", "");
	РезультатОперации.Вставить("ИдентификаторОплаты", "");
	
	URLОперации = СистемаБыстрыхПлатежейСлужебный.URLОперацииСервиса(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"/members/%1/refunds/confirm-refund",
			ПараметрыНастройкиПодключения.ИдентификаторУчастника,
			ИдентификаторыОперации.ИдентификаторОперации));
	
	РезультатИПП = ДанныеАутентификации(URLОперации);
	
	Если РезультатИПП.Ошибка Тогда
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	ДанныеДляПодписи = Новый Массив;
	Если СистемаБыстрыхПлатежейСлужебный.УчастникСБПИспользуетHMAC(ПараметрыНастройкиПодключения.ТипАутентификации) Тогда
		ДанныеДляПодписи.Добавить(ИдентификаторСессии);
	КонецЕсли;
	
	РезультатСБП = ДанныеАутентификацииУчастникаСБП(
		ПараметрыНастройкиПодключения,
		ДанныеДляПодписи);
	
	Если РезультатСБП.Ошибка Тогда
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатСБП.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатСБП.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	Заголовки = СистемаБыстрыхПлатежейСлужебный.НовыйЗаголовкиВызоваОперации();
	РезультатОтправки = ВызовОперацииПодтверждениеВозврата(
		ПараметрыНастройкиПодключения,
		ИдентификаторСессии,
		РезультатИПП.ДанныеАутентификации,
		РезультатСБП.Аутентификация,
		URLОперации,
		Заголовки);
	
	// Обработка случаев устаревания токена аутентификации для способа
	// Resource Owner Password Credentials Grant.
	Если РезультатОтправки.КодСостояния = 401
		И СистемаБыстрыхПлатежейСлужебный.УчастникСБПИспользуетPasswordCredentialsGrant(ПараметрыНастройкиПодключения.ТипАутентификации) Тогда
		
		РезультатСБП = ДанныеАутентификацииУчастникаСБП(
			ПараметрыНастройкиПодключения,
			ДанныеДляПодписи,
			Истина);
		
		Если РезультатСБП.Ошибка Тогда
			РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
			РезультатОперации.СообщениеОбОшибке = РезультатСБП.ИнформацияОбОшибке;
			РезультатОперации.ИнформацияОбОшибке = РезультатСБП.ИнформацияОбОшибке;
			Возврат РезультатОперации;
		КонецЕсли;
		
		Заголовки = СистемаБыстрыхПлатежейСлужебный.НовыйЗаголовкиВызоваОперации();
		РезультатОтправки = ВызовОперацииПодтверждениеВозврата(
			ПараметрыНастройкиПодключения,
			ИдентификаторСессии,
			РезультатИПП.ДанныеАутентификации,
			РезультатСБП.Аутентификация,
			URLОперации,
			Заголовки);
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.ПереопределитьКодОшибкиСервиса(
			РезультатОтправки.КодСостояния);
		РезультатОперации.СообщениеОбОшибке = СистемаБыстрыхПлатежейСлужебный.ПереопределитьСообщениеПользователю(
			РезультатОперации.КодОшибки,
			РезультатОтправки.Содержимое);
		
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось подтвердить заказ на возврат в Системе быстрых платежей.
				|
				|%1
				|
				|Техническая информация об ошибке:
				|При подтверждении заказа на возврат сервис вернул ошибку.
				|URL: %2
				|Код ошибки: %3
				|X-Correlation-ID: %4
				|Подробная информация:
				|%5'"),
			РезультатОперации.СообщениеОбОшибке,
			URLОперации,
			РезультатОтправки.КодОшибки,
			Заголовки.Получить("X-Correlation-ID"),
			РезультатОтправки.ИнформацияОбОшибке);
		
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	ДанныеВозврата = ПрочитатьДанные_refunds_confirm_refund(
		РезультатОтправки.Содержимое);
	
	РезультатОперации.СтатусВозврата        = ДанныеВозврата.sbpMemberResponse.refundStatus;
	РезультатОперации.ДатаОперации          = ДанныеВозврата.sbpMemberResponse.operationDate;
	РезультатОперации.СуммаОперации         = ДанныеВозврата.sbpMemberResponse.amount;
	РезультатОперации.ИдентификаторВозврата = СистемаБыстрыхПлатежейСлужебный.ИдентификаторОперацииБезСлужебныхСимволов(
		ДанныеВозврата.sbpMemberResponse.refundId);
	РезультатОперации.ИдентификаторОплаты   = ДанныеВозврата.sbpMemberResponse.qrId;
	
	Если РезультатОперации.СтатусВозврата = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаОтменена() Тогда
		
		ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось подтвердить заказ на возврат в Системе быстрых платежей.
				|
				|%1
				|
				|Техническая информация об ошибке:
				|Операция была отменена.'"),
			ДанныеВозврата.sbpMemberResponse.refundStatusDescription);
		
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			ИнформацияОбОшибке,
			Истина);
		
	Иначе
		
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			НСтр("ru = 'Завершено подтверждение заказа на возврат в Системе быстрых платежей.'"),
			Ложь);
		
	КонецЕсли;
	
	Возврат РезультатОперации;
	
КонецФункции

// Выполняет вызов операции подтверждения возврата оплаты.
//
// Параметры:
//  ПараметрыНастройкиПодключения - Структура - параметры выполнения операции
//    см. СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения;
//  ИдентификаторСессии - Строка - данные сессии возврата;
//  ДанныеАутентификации - Структура - данные аутентификации на Портале 1С:ИТС;
//  ЗаголовокАутентификации - Строка - данные аутентификации в сервисе участника СБП;
//  URLОперации - Строка - url для вызова операции;
//  Заголовки - Соотсветствие - заголовки операции.
//
// Возвращаемое значение:
//  Структура - результат подтверждения возврата в Системе быстрых платежей:
//   *КодСостояния - Число - http код результата операции;
//   *КодОшибки - Строка - идентификатор ошибки вызова операции;
//   *Содержимое - Строка - ответа сервиса;
//
Функция ВызовОперацииПодтверждениеВозврата(
		ПараметрыНастройкиПодключения,
		ИдентификаторСессии,
		ДанныеАутентификации,
		ЗаголовокАутентификации,
		URLОперации,
		Заголовки)
	
	ПараметрыПодключения = СистемаБыстрыхПлатежейСлужебный.ИнициализироватьПараметрыПодключения();
	
	ПараметрыЗапросаJSON = refunds_confirm_refund(
		ИдентификаторСессии,
		ДанныеАутентификации,
		ЗаголовокАутентификации,
		ПараметрыНастройкиПодключения.ИдентификаторМерчанта);
	
	// Вызов операции выполняется в 6 итераций. Повторные вызовы операции требуются
	// для случаев, когда результат выполнения возврата не определен. Обычно операция возврата
	// не занимает много времени, но в ряде случаев время обработки может быть увеличено.
	// Между вызовами добавляется пауза, чтобы не нагружать сервис банка.
	//
	// Паузы между вызовами:
	// - между 2-м и 3-м вызовом делается пауза 3 секунды;
	// - между 3-м и 4-м вызовом делается пауза 10 секунд;
	// - между 4-м и 5-м вызовом делается пауза 15 секунд;
	// - между 5-м и 6-м вызовом делается пауза 15 секунд; 
	
	КоличествоОпераций = 0;
	Пока КоличествоОпераций <= 5 Цикл
		
		ПараметрыОтправки = Новый Структура;
		ПараметрыОтправки.Вставить("Метод"                   , "POST");
		ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
		ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
		ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
		ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
		ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
		ПараметрыОтправки.Вставить("Таймаут"                 , 30);
		
		РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
			URLОперации,
			,
			,
			ПараметрыОтправки);
		
		Если РезультатОтправки.КодСостояния < 500
			И РезультатОтправки.КодСостояния <> 0 Тогда
			Прервать;
		КонецЕсли;
		
		// Перед выполнением повторного вызова при работе в модели
		// сервиса необходимо получить новый тикет.
		Если ОбщегоНазначения.РазделениеВключено() Тогда
			
			РезультатИПП = ДанныеАутентификации(URLОперации);
			Если РезультатИПП.Ошибка Тогда
				Прервать;
			КонецЕсли;
			
			ПараметрыЗапросаJSON = refunds_confirm_refund(
				ИдентификаторСессии,
				ДанныеАутентификации,
				ЗаголовокАутентификации,
				ПараметрыНастройкиПодключения.ИдентификаторМерчанта);
			
		КонецЕсли;
		
		КоличествоОпераций = КоличествоОпераций + 1;
		
		Если КоличествоОпераций = 2 Тогда
			ИнтернетПоддержкаПользователей.Пауза(3);
		ИначеЕсли КоличествоОпераций = 3 Тогда
			ИнтернетПоддержкаПользователей.Пауза(5);
		ИначеЕсли КоличествоОпераций = 4 Тогда
			ИнтернетПоддержкаПользователей.Пауза(10);
		ИначеЕсли КоличествоОпераций = 5 Тогда
			ИнтернетПоддержкаПользователей.Пауза(15);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатОтправки;
	
КонецФункции

// Формирует параметры запроса для операции
// sbp/members/{memberId}/refunds/{refundId}/confirm-refund.
//
Функция refunds_confirm_refund(
		ИдентификаторСессии,
		ДанныеАутентификации,
		ЗаголовокАутентификации,
		ИдентификаторМерчанта)
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	// Данные аутентификации.
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьДанныеАутентификации(
		ЗаписьДанныхСообщения,
		ДанныеАутентификации);
	
	// Данные аутентификации участника СБП.
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьДанныеАутентификацииУчастникаСБП(
		ЗаписьДанныхСообщения,
		ЗаголовокАутентификации,
		ИдентификаторМерчанта);
	
	// Параметры клиента.
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьПараметрыКлиента(
		ЗаписьДанныхСообщения);
	
	// Параметры возврата.
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("sbpMemberRequest");
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("state");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ИдентификаторСессии);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

// Чтение ответа операции:
// sbp/members/{memberId}/refunds/create-refund.
//
Функция ПрочитатьДанные_refunds_confirm_refund(ТелоJSON)
	
	// Ответ сервиса:
	//  operationDate - дата операции в Системе быстрых платежей;
	//  refundStatus - статус возврата;
	//
	// {
	//  "operationDate": "2020-09-08T13:09:20.093Z",
	//  "refundStatus": "SUCCESS",
	//  "refundStatusDescription": "string"
	// }
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получен ответ СБП:
			|%1'"),
		ТелоJSON);
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	ИменаСвойствСоЗначениямиДата = Новый Массив;
	ИменаСвойствСоЗначениямиДата.Добавить("operationDate");
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	Результат = ПрочитатьJSON(
		ЧтениеОтвета,
		,
		ИменаСвойствСоЗначениямиДата,
		,
		"ВосстановитьДатуJSON",
		СистемаБыстрыхПлатежейСлужебный,
		,
		ИменаСвойствСоЗначениямиДата);
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вызов операции POST /sbp/v1/members/{memberId}/refund/{refundId}/get-refund

// Получает статус возврат оплаты в Системе быстрых платежей.
//
// Параметры:
//  ИдентификаторОперации - Строка - идентификатор возврата в Системе быстрых платежей;
//  ДатаЗапросаСтатуса - Дата - дата последнего запроса статуса оплаты;
//  ПараметрыНастройкиПодключения - Структура - параметры выполнения операции
//    см. СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения;
//  ЗапросНаличияСтатуса - Булево - если Истина, будет выполнен запрос наличия статуса;
//  ИдентификаторОперации - Строка - идентификатор операции проверки наличия статуса;
//
// Возвращаемое значение:
//  Структура - результат проверки статуса заказа на возврат в Системе быстрых платежей:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом;
//    * СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора;
//    * СтатусВозврата - Строка - состояние возврата в Системе быстрых платежей.
//    * ИдентификаторОперации - Строка - идентификатор операции возврата;
//    * ДатаОперации - Дата - дата регистрации операции в Системе быстрых платежей;
//    * СуммаОперации - Дата - фактическая сумма возврата по документу.
//
Функция ОперацияСтатусВозврата(
		ИдентификаторОперации,
		ДатаЗапросаСтатуса,
		ПараметрыНастройкиПодключения,
		ИдентификаторОперацииПроверки,
		ЗапросНаличияСтатуса = Истина)
	
	РезультатОперации = СистемаБыстрыхПлатежейСлужебный.НовыйРезультатОперации();
	РезультатОперации.Вставить("СтатусВозврата", "");
	РезультатОперации.Вставить("ДатаОперации", Дата(1, 1, 1));
	РезультатОперации.Вставить("СуммаОперации", Неопределено);
	РезультатОперации.Вставить("ИдентификаторОперации", "");
	РезультатОперации.Вставить("ОбновитьДатуЗапросаСтатуса", Ложь);
	
	Если ЗапросНаличияСтатуса Тогда
		
		Если Не ЗначениеЗаполнено(ИдентификаторОперации) Тогда
			РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйФорматЗапроса();
			РезультатОперации.СообщениеОбОшибке = НСтр("ru = 'Не заполнен идентификатор оплаты.'");
			РезультатОперации.ИнформацияОбОшибке = РезультатОперации.СообщениеОбОшибке;
			
			СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
				Строка(РезультатОперации.ИнформацияОбОшибке),
				Истина);
			
			Возврат РезультатОперации;
		КонецЕсли;
		
		ИдентификаторыВозвратов = НовыйИдентификаторыПроверкиНаличияСтатуса();
		
		ДанныеВозврата = ИдентификаторыВозвратов.Добавить();
		ДанныеВозврата.Идентификатор = ИдентификаторОперации;
		ДанныеВозврата.ДатаЗапросаСтатуса = ДатаЗапросаСтатуса;
		
		РезультатПроверки = ОперацияПроверкаНаличияСтатусаОперацийВозвратов(
			ИдентификаторыВозвратов,
			ПараметрыНастройкиПодключения.ИдентификаторУчастника,
			ИдентификаторОперацииПроверки);
		
		Если ЗначениеЗаполнено(РезультатПроверки.КодОшибки) Тогда
			ЗаполнитьЗначенияСвойств(
				РезультатОперации,
				РезультатПроверки,
				"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
			Возврат РезультатОперации;
		КонецЕсли;
		
		Если РезультатПроверки.Идентификаторы.Найти(ИдентификаторОперации) = Неопределено Тогда
			РезультатОперации.СтатусВозврата = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаВПроцессе();
			Возврат РезультатОперации;
		КонецЕсли;
		
	КонецЕсли;
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Проверка статуса заказа на оплату в Системе быстрых платежей.'"),
		Ложь);
	
	РезультатОперации.ОбновитьДатуЗапросаСтатуса = Истина;
	
	URLОперации = СистемаБыстрыхПлатежейСлужебный.URLОперацииСервиса(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"/members/%1/refunds/%2/get-refund",
			ПараметрыНастройкиПодключения.ИдентификаторУчастника,
			ИдентификаторОперации));
	
	РезультатИПП = ДанныеАутентификации(URLОперации);
	
	Если РезультатИПП.Ошибка Тогда
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	ДанныеДляПодписи = Новый Массив;
	Если СистемаБыстрыхПлатежейСлужебный.УчастникСБПИспользуетHMAC(ПараметрыНастройкиПодключения.ТипАутентификации) Тогда
		ДанныеДляПодписи.Добавить(ИдентификаторОперации);
	КонецЕсли;
	
	РезультатСБП = ДанныеАутентификацииУчастникаСБП(
		ПараметрыНастройкиПодключения,
		ДанныеДляПодписи);
	
	Если РезультатСБП.Ошибка Тогда
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатСБП.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатСБП.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	Заголовки = СистемаБыстрыхПлатежейСлужебный.НовыйЗаголовкиВызоваОперации();
	РезультатОтправки = ВызовОперацииСтатусВозврата(
		ПараметрыНастройкиПодключения,
		РезультатИПП.ДанныеАутентификации,
		РезультатСБП.Аутентификация,
		URLОперации,
		Заголовки);
	
	// Обработка случаев устаревания токена аутентификации для способа
	// Resource Owner Password Credentials Grant.
	Если РезультатОтправки.КодСостояния = 401
		И СистемаБыстрыхПлатежейСлужебный.УчастникСБПИспользуетPasswordCredentialsGrant(ПараметрыНастройкиПодключения.ТипАутентификации) Тогда
		
		РезультатСБП = ДанныеАутентификацииУчастникаСБП(
			ПараметрыНастройкиПодключения,
			ДанныеДляПодписи,
			Истина);
		
		Если РезультатСБП.Ошибка Тогда
			РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
			РезультатОперации.СообщениеОбОшибке = РезультатСБП.ИнформацияОбОшибке;
			РезультатОперации.ИнформацияОбОшибке = РезультатСБП.ИнформацияОбОшибке;
			Возврат РезультатОперации;
		КонецЕсли;
		
		Заголовки = СистемаБыстрыхПлатежейСлужебный.НовыйЗаголовкиВызоваОперации();
		РезультатОтправки = ВызовОперацииСтатусВозврата(
			ПараметрыНастройкиПодключения,
			РезультатИПП.ДанныеАутентификации,
			РезультатСБП.Аутентификация,
			URLОперации,
			Заголовки);
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.ПереопределитьКодОшибкиСервиса(
			РезультатОтправки.КодСостояния);
		РезультатОперации.СообщениеОбОшибке = СистемаБыстрыхПлатежейСлужебный.ПереопределитьСообщениеПользователю(
			РезультатОперации.КодОшибки,
			РезультатОтправки.Содержимое);
		
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить статус оплаты в Системе быстрых платежей.
				|
				|%1
				|
				|Техническая информация об ошибке:
				|При получении статуса оплаты сервис вернул ошибку.
				|URL: %2
				|Код ошибки: %3
				|X-Correlation-ID: %4
				|Подробная информация:
				|%5'"),
			РезультатОперации.СообщениеОбОшибке,
			URLОперации,
			РезультатОтправки.КодОшибки,
			Заголовки.Получить("X-Correlation-ID"),
			РезультатОтправки.ИнформацияОбОшибке);
		
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	ДанныеСтатуса = ПрочитатьДанные_get_refund(РезультатОтправки.Содержимое);
	
	РезультатОперации.СтатусВозврата = ДанныеСтатуса.sbpMemberResponse.refundStatus;
	РезультатОперации.ДатаОперации   = ДанныеСтатуса.sbpMemberResponse.operationDate;
	РезультатОперации.СуммаОперации  = ДанныеСтатуса.sbpMemberResponse.amount;
	РезультатОперации.ИдентификаторОперации = ДанныеСтатуса.sbpMemberResponse.paymentId;
	
	Если ДанныеСтатуса.sbpMemberResponse.refundStatus = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаОтменена() Тогда
		
		Если ДанныеСтатуса.sbpMemberResponse.Свойство("refundStatusDescription") Тогда // АПК:1416 Не обязательное свойство ответа сервиса.
			ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось получить статус возврата в Системе быстрых платежей.
					|
					|%1
					|
					|Техническая информация об ошибке:
					|Операция была отменена.'"),
				ДанныеСтатуса.sbpMemberResponse.refundStatusDescription);
		Иначе
			ИнформацияОбОшибке = НСтр("ru = 'Не удалось получить статус возврата в Системе быстрых платежей.
				|
				|Причина отмены операции не указана.
				|
				|Техническая информация об ошибке:
				|Операция была отменена.'");
		КонецЕсли;
		
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			ИнформацияОбОшибке,
			Истина);

	Иначе
		
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			НСтр("ru = 'Проверка статуса заказа на оплату в Системе быстрых платежей завершена.'"),
			Ложь);
		
	КонецЕсли;
	
	Возврат РезультатОперации;
	
КонецФункции

// Выполняет вызов операции определения статуса возврата оплаты.
//
// Параметры:
//  ПараметрыНастройкиПодключения - Структура - параметры выполнения операции
//    см. СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения;
//  ДанныеАутентификации - Структура - данные аутентификации на Портале 1С:ИТС;
//  ЗаголовокАутентификации - Строка - данные аутентификации в сервисе участника СБП;
//  URLОперации - Строка - url для вызова операции;
//  Заголовки - Соотсветствие - заголовки операции.
//
// Возвращаемое значение:
//  Структура - результат статуса возврата в Системе быстрых платежей:
//   *КодСостояния - Число - http код результата операции;
//   *КодОшибки - Строка - идентификатор ошибки вызова операции;
//   *Содержимое - Строка - ответа сервиса;
//
Функция ВызовОперацииСтатусВозврата(
		ПараметрыНастройкиПодключения,
		ДанныеАутентификации,
		ЗаголовокАутентификации,
		URLОперации,
		Заголовки)
	
	ПараметрыПодключения = СистемаБыстрыхПлатежейСлужебный.ИнициализироватьПараметрыПодключения();
	
	ПараметрыЗапросаJSON = get_refund(
		ДанныеАутентификации,
		ЗаголовокАутентификации,
		ПараметрыНастройкиПодключения.ИдентификаторМерчанта);
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	Возврат ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
КонецФункции

// Формирует параметры запроса для операции
// /sbp/v1/members/{memberId}/refund/{refundId}/get-refund.
//
Функция get_refund(
		ДанныеАутентификации,
		ЗаголовокАутентификации,
		ИдентификаторМерчанта)
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	// Данные аутентификации.
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьДанныеАутентификации(
		ЗаписьДанныхСообщения,
		ДанныеАутентификации);
	
	// Данные аутентификации участника СБП.
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьДанныеАутентификацииУчастникаСБП(
		ЗаписьДанныхСообщения,
		ЗаголовокАутентификации,
		ИдентификаторМерчанта);
	
	// Параметры клиента.
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьПараметрыКлиента(
		ЗаписьДанныхСообщения);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

// Чтение ответа операции:
// /sbp/v1/members/{memberId}/refund/{refundId}/get-refund.
//
Функция ПрочитатьДанные_get_refund(ТелоJSON)
	
	// Ответ сервиса:
	//  operationDate - дата операции в Системе быстрых платежей;
	//  refundStatus - статус возврата;
	// 
	// {
	//  "operationDate": "string",
	//  "refundStatus": "SUCCESS",
	//  "refundStatusDescription": "string"
	// }
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получен ответ СБП:
			|%1'"),
		ТелоJSON);
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	ИменаСвойствСоЗначениямиДата = Новый Массив;
	ИменаСвойствСоЗначениямиДата.Добавить("operationDate");
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	Результат = ПрочитатьJSON(
		ЧтениеОтвета,
		,
		ИменаСвойствСоЗначениямиДата,
		,
		"ВосстановитьДатуJSON",
		СистемаБыстрыхПлатежейСлужебный,
		,
		ИменаСвойствСоЗначениямиДата);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ВызовОперацийСверкиВзаиморасчетов

////////////////////////////////////////////////////////////////////////////////
// Вызов операции POST /sbp/v1/members/{memberId}/reports/reconciliation-of-settlements/turnovers/request-report

// Получает данные отчета по сверке взаиморасчетов из сервиса.
//
// Параметры:
//  НачалоПериода - Дата - дата начало выборки данных отчета;
//  КонецПериода - Дата - дата окончания выборки данных отчета;
//  ПараметрыНастройкиПодключения - Структура - параметры выполнения операции
//    см. СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения.
//
// Возвращаемое значение:
//  Структура - данные сверки взаиморасчетов:
//    *Идентификатор - Строка - идентификатор отчета;
//    *URLФайла - Строка - url файла для загрузки данных;
//    *СуммаВозвратов - Число - общая сумма возвратов за период по торговой точке;
//    *СуммаОплат - Число - общая сумма оплат за период по торговой точке;
//    *СуммаКомиссии - Число - рассчитанная сумма возвратов за период по торговой точке;
//    *Статус - Строка - текущее состояние формирования отчета;
//    *ТипОшибки - Строка - вид ошибки формирования отчета;
//    *КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом;
//    *СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция ОперацияЗапросОтчетаПоОборотам(
		НачалоПериода,
		КонецПериода,
		ПараметрыНастройкиПодключения)
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Запрос отчета сверки взаиморасчетов по операциям.'"),
		Ложь);
	
	РезультатОперации = СистемаБыстрыхПлатежейСлужебный.НовыйРезультатОперации();
	РезультатОперации.Вставить("Идентификатор", "");
	РезультатОперации.Вставить("URLФайла", "");
	РезультатОперации.Вставить("СуммаВозвратов", 0);
	РезультатОперации.Вставить("СуммаОплат", 0);
	РезультатОперации.Вставить("СуммаКомиссии", 0);
	РезультатОперации.Вставить("Статус", "");
	РезультатОперации.Вставить("ТипОшибки", "");
	
	URLОперации = СистемаБыстрыхПлатежейСлужебный.URLОперацииСервиса(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"/members/%1/reports/reconciliation-of-settlements/turnovers/request-report",
			ПараметрыНастройкиПодключения.ИдентификаторУчастника));
	
	РезультатИПП = ДанныеАутентификации(URLОперации);
	
	Если РезультатИПП.Ошибка Тогда
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	ДанныеДляПодписи = Новый Массив;
	Если СистемаБыстрыхПлатежейСлужебный.УчастникСБПИспользуетHMAC(ПараметрыНастройкиПодключения.ТипАутентификации) Тогда
		ДанныеДляПодписи.Добавить(ПараметрыНастройкиПодключения.ИдентификаторМерчанта);
	КонецЕсли;
	
	РезультатСБП = ДанныеАутентификацииУчастникаСБП(
		ПараметрыНастройкиПодключения,
		ДанныеДляПодписи);
	
	Если РезультатСБП.Ошибка Тогда
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатСБП.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатСБП.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	Заголовки = СистемаБыстрыхПлатежейСлужебный.НовыйЗаголовкиВызоваОперации();
	РезультатОтправки = ВызовОперацииЗапросОтчетаПоОборотам(
		ПараметрыНастройкиПодключения,
		НачалоПериода,
		КонецПериода,
		РезультатИПП.ДанныеАутентификации,
		РезультатСБП.Аутентификация,
		URLОперации,
		Заголовки);
	
	// Обработка случаев устаревания токена аутентификации для способа
	// Resource Owner Password Credentials Grant.
	Если РезультатОтправки.КодСостояния = 401
		И СистемаБыстрыхПлатежейСлужебный.УчастникСБПИспользуетPasswordCredentialsGrant(ПараметрыНастройкиПодключения.ТипАутентификации) Тогда
		
		РезультатСБП = ДанныеАутентификацииУчастникаСБП(
			ПараметрыНастройкиПодключения,
			ДанныеДляПодписи,
			Истина);
		
		Если РезультатСБП.Ошибка Тогда
			РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
			РезультатОперации.СообщениеОбОшибке = РезультатСБП.ИнформацияОбОшибке;
			РезультатОперации.ИнформацияОбОшибке = РезультатСБП.ИнформацияОбОшибке;
			Возврат РезультатОперации;
		КонецЕсли;
		
		Заголовки = СистемаБыстрыхПлатежейСлужебный.НовыйЗаголовкиВызоваОперации();
		РезультатОтправки = ВызовОперацииЗапросОтчетаПоОборотам(
			ПараметрыНастройкиПодключения,
			НачалоПериода,
			КонецПериода,
			РезультатИПП.ДанныеАутентификации,
			РезультатСБП.Аутентификация,
			URLОперации,
			Заголовки);
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.ПереопределитьКодОшибкиСервиса(
			РезультатОтправки.КодСостояния);
		РезультатОперации.СообщениеОбОшибке = СистемаБыстрыхПлатежейСлужебный.ПереопределитьСообщениеПользователю(
			РезультатОперации.КодОшибки,
			РезультатОтправки.Содержимое);
		
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось выполнить запрос отчета по сверке взаиморасчетов.
				|
				|%1
				|
				|Техническая информация об ошибке:
				|При запросе отчета по сверке взаиморасчетов сервис вернул ошибку.
				|URL: %2
				|Код ошибки: %3
				|X-Correlation-ID: %4
				|Подробная информация:
				|%5'"),
			РезультатОперации.СообщениеОбОшибке,
			URLОперации,
			РезультатОтправки.КодОшибки,
			Заголовки.Получить("X-Correlation-ID"),
			РезультатОтправки.ИнформацияОбОшибке);
		
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	ДанныеОтвета = ПрочитатьДанные_turnovers_request_report(
		РезультатОтправки.Содержимое);
	
	РезультатОперации.Идентификатор = ДанныеОтвета.sbpMemberResponse.reportId;
	РезультатОперации.URLФайла = ДанныеОтвета.sbpMemberResponse.resultURL;
	РезультатОперации.Статус = ДанныеОтвета.sbpMemberResponse.reportState.status;
	
	Если ДанныеОтвета.sbpMemberResponse.reportState.Свойство("errorType") Тогда // АПК:1416 Не обязательное свойство ответа сервиса.
		РезультатОперации.ТипОшибки = ДанныеОтвета.sbpMemberResponse.reportState.errorType;
	КонецЕсли;
	
	Если ДанныеОтвета.sbpMemberResponse.result <> Неопределено Тогда
		РезультатОперации.СуммаВозвратов = ДанныеОтвета.sbpMemberResponse.result.refundAmountSum;
		РезультатОперации.СуммаОплат = ДанныеОтвета.sbpMemberResponse.result.paymentAmountSum;
		РезультатОперации.СуммаКомиссии = ДанныеОтвета.sbpMemberResponse.result.feeSum;
	КонецЕсли;
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Запрос отчета по оборотам завершен.'"),
		Ложь);
	
	Возврат РезультатОперации;
	
КонецФункции

// Выполняет вызов операции запроса отчета по оборотам.
//
// Параметры:
//  ПараметрыНастройкиПодключения - Структура - параметры выполнения операции
//    см. СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения;
//  НачалоПериода - Дата - дата начало выборки данных отчета;
//  КонецПериода - Дата - дата окончания выборки данных отчета;
//  ДанныеАутентификации - Структура - данные аутентификации на Портале 1С:ИТС;
//  ЗаголовокАутентификации - Строка - данные аутентификации в сервисе участника СБП;
//  URLОперации - Строка - url для вызова операции;
//  Заголовки - Соотсветствие - заголовки операции.
//
// Возвращаемое значение:
//  Структура - результат запроса отчета по оборотам:
//   *КодСостояния - Число - http код результата операции;
//   *КодОшибки - Строка - идентификатор ошибки вызова операции;
//   *Содержимое - Строка - ответа сервиса;
//
Функция ВызовОперацииЗапросОтчетаПоОборотам(
		ПараметрыНастройкиПодключения,
		НачалоПериода,
		КонецПериода,
		ДанныеАутентификации,
		ЗаголовокАутентификации,
		URLОперации,
		Заголовки)
	
	ПараметрыПодключения = СистемаБыстрыхПлатежейСлужебный.ИнициализироватьПараметрыПодключения();
	
	ПараметрыЗапросаJSON = turnovers_request_report(
		НачалоПериода,
		КонецПериода,
		ПараметрыНастройкиПодключения.ИдентификаторМерчанта,
		ДанныеАутентификации,
		ЗаголовокАутентификации);
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	Возврат ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
КонецФункции

// Формирует параметры запроса для операции
// /sbp/v1/members/{memberId}/reports/reconciliation-of-settlements/turnovers/request-report.
//
Функция turnovers_request_report(
		НачалоПериода,
		КонецПериода,
		ИдентификаторМерчанта,
		ДанныеАутентификации,
		ЗаголовокАутентификации)
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	// Данные аутентификации.
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьДанныеАутентификации(
		ЗаписьДанныхСообщения,
		ДанныеАутентификации);
	
	// Данные аутентификации участника СБП.
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьДанныеАутентификацииУчастникаСБП(
		ЗаписьДанныхСообщения,
		ЗаголовокАутентификации,
		ИдентификаторМерчанта);
	
	// Параметры клиента.
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьПараметрыКлиента(
		ЗаписьДанныхСообщения);
	
	// Параметры отчета.
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("sbpMemberRequest");
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("endDate");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(
		ЗаписатьДатуJSON(
			КонецПериода,
			ФорматДатыJSON.ISO,
			ВариантЗаписиДатыJSON.ЛокальнаяДатаСоСмещением));
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("beginDate");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(
		ЗаписатьДатуJSON(
			НачалоПериода,
			ФорматДатыJSON.ISO,
			ВариантЗаписиДатыJSON.ЛокальнаяДатаСоСмещением));
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("merchantId");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ИдентификаторМерчанта);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

// Чтение ответа операции:
// /sbp/v1/members/{memberId}/reports/reconciliation-of-settlements/turnovers/request-report.
//
Функция ПрочитатьДанные_turnovers_request_report(ТелоJSON)
	
	// Ответ сервиса:
	//  reportId - идентификатор отчета;
	//  status - статус формирования отчета;
	//  statusDate - дата отчета;
	//  feeSum - сумма комиссии;
	//  paymentAmountSum - сумма оплат;
	//  refundAmountSum - сумма возвратов.
	// 
	// {
	//  "reportId": "string",
	//  "reportState": {
	//    "errorType": "INTERNAL_ERROR",
	//    "status": "PENDING",
	//    "statusDate": "2020-09-11T07:02:18.409Z"
	//  },
	//  "result": {
	//    "feeSum": 0,
	//    "paymentAmountSum": 0,
	//    "refundAmountSum": 0
	//  },
	//  "resultURL": "string"
	// }
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получен ответ СБП:
			|%1'"),
		ТелоJSON);
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	Результат = ПрочитатьJSON(ЧтениеОтвета);
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вызов операции POST /sbp/v1/members/{memberId}/reports/reconciliation-of-settlements/turnovers/{reportId}/get-report

// Получает статус отчета по сверке взаиморасчетов из сервиса.
//
// Параметры:
//  Идентификатор - Строка - идентификатор отчета;
//  ПараметрыНастройкиПодключения - Структура - параметры выполнения операции
//    см. СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения;
//  ДатаЗапросаСтатуса - Дата - для определения периодичности получения статуса
//    формирования отчета.
//
// Возвращаемое значение:
//  Структура - данные сверке взаиморасчетов:
//    *Идентификатор - Строка - идентификатор отчета;
//    *URLФайла - Строка - url файла для загрузки данных;
//    *СуммаВозвратов - Число - общая сумма возвратов за период по торговой точке;
//    *СуммаОплат - Число - общая сумма оплат за период по торговой точке;
//    *СуммаКомиссии - Число - рассчитанная сумма возвратов за период по торговой точке;
//    *Статус - Строка - текущее состояние формирования отчета;
//    *ТипОшибки - Строка - вид ошибки формирования отчета;
//    *КодОшибки - Строка - строковый код возникшей ошибки, который
//     может быть обработан вызывающим методом;
//    *СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция ОперацияЗапросСтатусаОтчетаПоОборотам(
		Идентификатор,
		ПараметрыНастройкиПодключения,
		ДатаЗапросаСтатуса)
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Запрос статуса отчета по сверке оборотов.'"),
		Ложь);
	
	РезультатОперации = СистемаБыстрыхПлатежейСлужебный.НовыйРезультатОперации();
	РезультатОперации.Вставить("URLФайла", "");
	РезультатОперации.Вставить("СуммаВозвратов", 0);
	РезультатОперации.Вставить("СуммаОплат", 0);
	РезультатОперации.Вставить("СуммаКомиссии", 0);
	РезультатОперации.Вставить("Статус", "");
	РезультатОперации.Вставить("ТипОшибки", "");
	
	URLОперации = СистемаБыстрыхПлатежейСлужебный.URLОперацииСервиса(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"/members/%1/status-manager/reports/reconciliation-of-settlements/turnovers/%2/states/test-check-needed",
			ПараметрыНастройкиПодключения.ИдентификаторУчастника,
			Новый УникальныйИдентификатор));
	
	РезультатПроверки = ОперацияПроверкаНаличияСтатусаОперации(
		URLОперации,
		ДатаЗапросаСтатуса);
	
	Если Не РезультатПроверки.ЗапроситьСтатус Тогда
		ЗаполнитьЗначенияСвойств(
			РезультатОперации,
			РезультатПроверки,
			"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
		Если Не ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
			РезультатОперации.Статус = ИдентификаторСтатусаОжидание();
		КонецЕсли;
		Возврат РезультатОперации;
	КонецЕсли;
	
	URLОперации = СистемаБыстрыхПлатежейСлужебный.URLОперацииСервиса(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"/members/%1/reports/reconciliation-of-settlements/turnovers/%2/get-report",
			ПараметрыНастройкиПодключения.ИдентификаторУчастника,
			Идентификатор));
	
	РезультатИПП = ДанныеАутентификации(URLОперации);
	
	Если РезультатИПП.Ошибка Тогда
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	ДанныеДляПодписи = Новый Массив;
	Если СистемаБыстрыхПлатежейСлужебный.УчастникСБПИспользуетHMAC(ПараметрыНастройкиПодключения.ТипАутентификации) Тогда
		ДанныеДляПодписи.Добавить(Идентификатор);
	КонецЕсли;
	
	РезультатСБП = ДанныеАутентификацииУчастникаСБП(
		ПараметрыНастройкиПодключения,
		ДанныеДляПодписи);
	
	Если РезультатСБП.Ошибка Тогда
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатСБП.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатСБП.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	Заголовки = СистемаБыстрыхПлатежейСлужебный.НовыйЗаголовкиВызоваОперации();
	РезультатОтправки = ВызовОперацииЗапросСтатусаОтчетаПоОборотам(
		ПараметрыНастройкиПодключения,
		РезультатИПП.ДанныеАутентификации,
		РезультатСБП.Аутентификация,
		URLОперации,
		Заголовки);
	
	// Обработка случаев устаревания токена аутентификации для способа
	// Resource Owner Password Credentials Grant.
	Если РезультатОтправки.КодСостояния = 401
		И СистемаБыстрыхПлатежейСлужебный.УчастникСБПИспользуетPasswordCredentialsGrant(ПараметрыНастройкиПодключения.ТипАутентификации) Тогда
		
		РезультатСБП = ДанныеАутентификацииУчастникаСБП(
			ПараметрыНастройкиПодключения,
			ДанныеДляПодписи,
			Истина);
		
		Если РезультатСБП.Ошибка Тогда
			РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
			РезультатОперации.СообщениеОбОшибке = РезультатСБП.ИнформацияОбОшибке;
			РезультатОперации.ИнформацияОбОшибке = РезультатСБП.ИнформацияОбОшибке;
			Возврат РезультатОперации;
		КонецЕсли;
		
		Заголовки = СистемаБыстрыхПлатежейСлужебный.НовыйЗаголовкиВызоваОперации();
		РезультатОтправки = ВызовОперацииЗапросСтатусаОтчетаПоОборотам(
			ПараметрыНастройкиПодключения,
			РезультатИПП.ДанныеАутентификации,
			РезультатСБП.Аутентификация,
			URLОперации,
			Заголовки);
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.ПереопределитьКодОшибкиСервиса(
			РезультатОтправки.КодСостояния);
		РезультатОперации.СообщениеОбОшибке = СистемаБыстрыхПлатежейСлужебный.ПереопределитьСообщениеПользователю(
			РезультатОперации.КодОшибки,
			РезультатОтправки.Содержимое);
		
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить статус отчета по сверке взаиморасчетов.
				|
				|%1
				|
				|Техническая информация об ошибке:
				|При запросе отчета по сверке взаиморасчетов сервис вернул ошибку.
				|URL: %2
				|Код ошибки: %3
				|X-Correlation-ID: %4
				|Подробная информация:
				|%5'"),
			РезультатОперации.СообщениеОбОшибке,
			URLОперации,
			РезультатОтправки.КодОшибки,
			Заголовки.Получить("X-Correlation-ID"),
			РезультатОтправки.ИнформацияОбОшибке);
		
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	ДанныеОтвета = ПрочитатьДанные_turnovers_get_report(
		РезультатОтправки.Содержимое);
	
	РезультатОперации.URLФайла = ДанныеОтвета.sbpMemberResponse.resultURL;
	РезультатОперации.Статус = ДанныеОтвета.sbpMemberResponse.reportState.status;
	
	Если ДанныеОтвета.sbpMemberResponse.reportState.Свойство("errorType") Тогда // АПК:1416 Не обязательное свойство ответа сервиса.
		РезультатОперации.ТипОшибки = ДанныеОтвета.sbpMemberResponse.reportState.errorType;
	КонецЕсли;
	
	Если ДанныеОтвета.sbpMemberResponse.result <> Неопределено Тогда
		РезультатОперации.СуммаВозвратов = ДанныеОтвета.sbpMemberResponse.result.refundAmountSum;
		РезультатОперации.СуммаОплат = ДанныеОтвета.sbpMemberResponse.result.paymentAmountSum;
		РезультатОперации.СуммаКомиссии = ДанныеОтвета.sbpMemberResponse.result.feeSum;
	КонецЕсли;
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Запрос статуса отчета по оборотам завершен.'"),
		Ложь);
	
	Возврат РезультатОперации;
	
КонецФункции

// Выполняет вызов операции получения статуса отчета по оборотам.
//
// Параметры:
//  ПараметрыНастройкиПодключения - Структура - параметры выполнения операции
//                        см. СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения;
//  ДанныеАутентификации - Структура - данные аутентификации на Портале 1С:ИТС;
//  ЗаголовокАутентификации - Строка - данные аутентификации в сервисе участника СБП;
//  URLОперации - Строка - url для вызова операции;
//  Заголовки - Соотсветствие - заголовки операции.
//
// Возвращаемое значение:
//  Структура - результат статуса отчета по оборотам:
//   *КодСостояния - Число - http код результата операции;
//   *КодОшибки - Строка - идентификатор ошибки вызова операции;
//   *Содержимое - Строка - ответа сервиса;
//
Функция ВызовОперацииЗапросСтатусаОтчетаПоОборотам(
		ПараметрыНастройкиПодключения,
		ДанныеАутентификации,
		ЗаголовокАутентификации,
		URLОперации,
		Заголовки)
	
	ПараметрыПодключения = СистемаБыстрыхПлатежейСлужебный.ИнициализироватьПараметрыПодключения();
	
	ПараметрыЗапросаJSON = turnovers_get_report(
		ДанныеАутентификации,
		ЗаголовокАутентификации,
		ПараметрыНастройкиПодключения.ИдентификаторМерчанта);
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	Возврат ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
КонецФункции

// Формирует параметры запроса для операции
// /sbp/v1/members/{memberId}/reports/reconciliation-of-settlements/turnovers/{reportId}/get-report
//
Функция turnovers_get_report(
		ДанныеАутентификации,
		ЗаголовокАутентификации,
		ИдентификаторМерчанта)
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	// Данные аутентификации.
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьДанныеАутентификации(
		ЗаписьДанныхСообщения,
		ДанныеАутентификации);
	
	// Данные аутентификации участника СБП.
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьДанныеАутентификацииУчастникаСБП(
		ЗаписьДанныхСообщения,
		ЗаголовокАутентификации,
		ИдентификаторМерчанта);
	
	// Параметры клиента.
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьПараметрыКлиента(
		ЗаписьДанныхСообщения);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

// Чтение ответа операции:
// /sbp/v1/members/{memberId}/reports/reconciliation-of-settlements/turnovers/{reportId}/get-report.
//
Функция ПрочитатьДанные_turnovers_get_report(ТелоJSON)
	
	// Ответ сервиса:
	//  reportId - идентификатор отчета;
	//  status - статус формирования отчета;
	//  statusDate - дата отчета;
	//  feeSum - сумма комиссии;
	//  paymentAmountSum - сумма оплат;
	//  refundAmountSum - сумма возвратов.
	// 
	// {
	//  "reportId": "string",
	//  "reportState": {
	//    "errorType": "INTERNAL_ERROR",
	//    "status": "PENDING",
	//    "statusDate": "2020-09-11T07:02:18.409Z"
	//  },
	//  "result": {
	//    "feeSum": 0,
	//    "paymentAmountSum": 0,
	//    "refundAmountSum": 0
	//  },
	//  "resultURL": "string"
	// }
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получен ответ СБП:
			|%1'"),
		ТелоJSON);
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	Результат = ПрочитатьJSON(ЧтениеОтвета);
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вызов операции загрузки файла отчетов сверки оборотов.

// Выполняет загрузку файла отчета по переданному url.
//
// Параметры:
//  URLОперации - Строка - url файла отчета;
//  Идентификатор - Строка - идентификатор отчета;
//  ПараметрыНастройкиПодключения - Структура - параметры выполнения операции
//    см. СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения;
//
// Возвращаемое значение:
//  Структура - данные сверке взаиморасчетов:
//    *СуммаВозвратов - Число - общая сумма возвратов за период по торговой точке;
//    *СуммаОплат - Число - общая сумма оплат за период по торговой точке;
//    *СуммаКомиссии - Число - рассчитанная сумма возвратов за период по торговой точке;
//    *СтатусОперации - Строка - текущее состояние операции оплаты:
//       - "Выполняется" - подтверждение формирования не получено;
//            - "Отменена" - оплата по оплата по ранее сформированному QR-коду невозможна;
//            - "Выполнена" - участник СБП подтвердил оплату;
//            - "ТребуетсяПодтверждение" - необходимо подтвердить действие;
//            - "Ошибка" - не удалось выполнить проверку оплаты из-за ошибки.
//    *КодОшибки - Строка - строковый код возникшей ошибки, который
//       может быть обработан вызывающим методом;
//    *СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция ОперацияЗагрузитьФайлОтчетаПоСверкеОборотов(URLОперации, Идентификатор, ПараметрыНастройкиПодключения)
	
	РезультатОперации = СистемаБыстрыхПлатежейСлужебный.НовыйРезультатОперации();
	РезультатОперации.Вставить("СуммаВозвратов", 0);
	РезультатОперации.Вставить("СуммаОплат", 0);
	РезультатОперации.Вставить("СуммаКомиссии", 0);
	
	ДанныеДляПодписи = Новый Массив;
	Если СистемаБыстрыхПлатежейСлужебный.УчастникСБПИспользуетHMAC(ПараметрыНастройкиПодключения.ТипАутентификации) Тогда
		ДанныеДляПодписи.Добавить(Идентификатор);
	КонецЕсли;
	
	РезультатСБП = ДанныеАутентификацииУчастникаСБП(
		ПараметрыНастройкиПодключения,
		ДанныеДляПодписи);
	
	РезультатОтправки = ВызовЗагрузитьФайлОтчетаПоСверкеОборотов(
		ПараметрыНастройкиПодключения,
		РезультатСБП.Аутентификация,
		URLОперации);
	
	// Обработка случаев устаревания токена аутентификации для способа
	// Resource Owner Password Credentials Grant.
	Если РезультатОтправки.КодСостояния = 401
		И СистемаБыстрыхПлатежейСлужебный.УчастникСБПИспользуетPasswordCredentialsGrant(ПараметрыНастройкиПодключения.ТипАутентификации) Тогда
		
		РезультатСБП = ДанныеАутентификацииУчастникаСБП(
			ПараметрыНастройкиПодключения,
			ДанныеДляПодписи);
		
		Если РезультатСБП.Ошибка Тогда
			РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
			РезультатОперации.СообщениеОбОшибке = РезультатСБП.ИнформацияОбОшибке;
			РезультатОперации.ИнформацияОбОшибке = РезультатСБП.ИнформацияОбОшибке;
			Возврат РезультатОперации;
		КонецЕсли;
		
		РезультатОтправки = ВызовЗагрузитьФайлОтчетаПоСверкеОборотов(
			ПараметрыНастройкиПодключения,
			РезультатСБП.Аутентификация,
			URLОперации);
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.ПереопределитьКодОшибкиСервиса(
			РезультатОтправки.КодСостояния);
		РезультатОперации.СообщениеОбОшибке = СистемаБыстрыхПлатежейСлужебный.ПереопределитьСообщениеПользователю(
			РезультатОперации.КодОшибки,
			РезультатОтправки.Содержимое);
		
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось выполнить загрузку отчета по сверке взаиморасчетов.
				|
				|%1
				|
				|Техническая информация об ошибке:
				|При загрузке файла отчета по сверке взаиморасчетов сервис вернул ошибку.
				|URL: %2
				|Код ошибки: %3
				|Подробная информация:
				|%4'"),
			РезультатОперации.СообщениеОбОшибке,
			URLОперации,
			РезультатОтправки.КодОшибки,
			РезультатОтправки.ИнформацияОбОшибке);
		
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	ДанныеОтвета = ПрочитатьДанныеДанныеОтчетаПоСверкеОборотов(
		РезультатОтправки.Содержимое);
	Если ДанныеОтвета.result <> Неопределено Тогда
		РезультатОперации.СуммаВозвратов = ДанныеОтвета.result.refundAmountSum;
		РезультатОперации.СуммаОплат = ДанныеОтвета.result.paymentAmountSum;
		РезультатОперации.СуммаКомиссии = ДанныеОтвета.result.feeSum;
	КонецЕсли;
	
	Возврат РезультатОперации;
	
КонецФункции

// Выполняет загрузку файла отчета по переданному url.
//
// Параметры:
//  ПараметрыНастройкиПодключения - Структура - параметры выполнения операции
//    см. СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения;
//  ДанныеАутентификации - Структура - данные аутентификации на Портале 1С:ИТС;
//  ЗаголовокАутентификации - Строка - данные аутентификации в сервисе участника СБП;
//  URLОперации - Строка - url для вызова операции;
//
// Возвращаемое значение:
//  Структура - результат статуса отчета по оборотам:
//   *КодСостояния - Число - http код результата операции;
//   *КодОшибки - Строка - идентификатор ошибки вызова операции;
//   *Содержимое - Строка - ответа сервиса;
//
Функция ВызовЗагрузитьФайлОтчетаПоСверкеОборотов(
		ПараметрыНастройкиПодключения,
		ЗаголовокАутентификации,
		URLОперации)
	
	ПараметрыПодключения = СистемаБыстрыхПлатежейСлужебный.ИнициализироватьПараметрыПодключения();
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("X-Correlation-ID", Строка(Новый УникальныйИдентификатор));
	
	// Особенность работы сервиса отчетов PayMaster.
	Если ПараметрыНастройкиПодключения.ИдентификаторУчастника <> "PayMaster" Тогда
		Заголовки.Вставить("Authorization", ЗаголовокАутентификации);
	КонецЕсли;
	
	// Особенность работы сервиса отчетов KubanKredit.
	Если ПараметрыНастройкиПодключения.ИдентификаторУчастника = "KubanKredit" Тогда
		Заголовки.Вставить("X-Merchant-Id", ПараметрыНастройкиПодключения.ИдентификаторМерчанта);
	КонецЕсли;
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "GET");
	ПараметрыОтправки.Вставить("Заголовки"            ,     Заголовки);
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 2);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	Возврат ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
КонецФункции

// Чтение файла сверке взаиморасчетов по оборотам.
//
Функция ПрочитатьДанныеДанныеОтчетаПоСверкеОборотов(ДанныеФайла)
	
	// Ответ сервиса:
	//  endDate - дата окончания формирования отчета;
	//  beginDate - дата начало формирования отчета;
	//  merchantId - идентификатор торговой точки;
	//  feeSum - сумма комиссии;
	//  paymentAmountSum - сумма оплат;
	//  refundAmountSum - сумма возвратов;
	//  reportDate - дата отчета;
	// 
	// {
	//   "request": {
	//      "endDate": "2020-06-24T09:14:38.107Z",
	//      "beginDate": "2020-06-25T09:14:38.107Z",
	//      "merchantId": "cb4c52a6-3032-40c2-a113-66c31f26cffb"
	//    }
	//  "result": {
	//      "refundAmountSum": 9103.01,
	//      "feeSum": 364.12,
	//      "paymentAmountSum": 9103.01,
	//    },
	// "reportDate": "2020-06-24T09:14:38.107Z"
	// } 
	
	ТекстЖурналРегистрации = НСтр("ru = 'Загружен файл отчета по сверке оборотов'");
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
		Каталог = ФайловаяСистема.СоздатьВременныйКаталог();
	ПутьКАрхиву = Каталог + "report.zip";
	ДанныеФайла.Записать(ПутьКАрхиву);
	
	Если ОбщегоНазначения.ЭтоLinuxСервер() Тогда
		Попытка
			УстановитьАтрибутыАрхива(ПутьКАрхиву);
		Исключение
			СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
				Истина);
		КонецПопытки;
	КонецЕсли;
	
	Попытка
		ЧтениеZip = Новый ЧтениеZipФайла(ПутьКАрхиву);
		Элемент = ЧтениеZip.Элементы.Найти("report.json");
		Если Элемент = Неопределено Тогда
			ВызватьИсключение НСтр("ru = 'Архив отчета по оборотам не содержит файл report.json.'");
		КонецЕсли;
		ЧтениеZip.Извлечь(Элемент, Каталог);
		ЧтениеZip.Закрыть();
	Исключение
		ФайловаяСистема.УдалитьВременныйКаталог(Каталог);
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			Истина);
		ВызватьИсключение НСтр("ru = 'Не удалось обработать архив отчета по сверке оборотов. Подробности в журнале регистрации.'");
	КонецПопытки;
	
	Попытка
		ФайлОтчета = Новый Файл(Каталог + "report.json");
		Если ФайлОтчета.ПолучитьТолькоЧтение() Тогда
			ФайлОтчета.УстановитьТолькоЧтение(Ложь);
		КонецЕсли;
	Исключение
		ФайловаяСистема.УдалитьВременныйКаталог(Каталог);
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			Истина);
		ВызватьИсключение НСтр("ru = 'Не удалось обработать файл отчета по сверке оборотов. Подробности в журнале регистрации.'");
	КонецПопытки;
	
	Попытка
		ЧтениеОтвета = Новый ЧтениеJSON;
		ЧтениеОтвета.ОткрытьФайл(Каталог + "report.json");
		Результат = ПрочитатьJSON(ЧтениеОтвета);
		ЧтениеОтвета.Закрыть();
	Исключение
		ФайловаяСистема.УдалитьВременныйКаталог(Каталог);
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			Истина);
		ВызватьИсключение НСтр("ru = 'Не удалось обработать файл отчета по сверке оборотов. Подробности в журнале регистрации.'");
	КонецПопытки;
	
	ФайловаяСистема.УдалитьВременныйКаталог(Каталог);
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вызов операции POST /sbp/v1/members/{memberId}/reports/reconciliation-of-settlements/operations/request-report

// Получает данные отчета по сверке взаиморасчетов по операциям из сервиса.
//
// Параметры:
//  НачалоПериода - Дата - дата начало выборки данных отчета;
//  КонецПериода - Дата - дата окончания выборки данных отчета;
//  ПараметрыНастройкиПодключения - Структура - параметры выполнения операции
//   см. СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения.
//
// Возвращаемое значение:
//  Структура - данные сверке взаиморасчетов:
//    *Идентификатор - Строка - идентификатор отчета;
//    *URLФайла - Строка - url файла для загрузки данных;
//    *Статус - Строка - текущее состояние формирования отчета;
//    *ТипОшибки - Строка - вид ошибки формирования отчета;
//    *КодОшибки - Строка - строковый код возникшей ошибки, который
//                 может быть обработан вызывающим методом;
//    *СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция ОперацияЗапросОтчетаПоСверкеОпераций(
		НачалоПериода,
		КонецПериода,
		ПараметрыНастройкиПодключения)
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Запрос отчета по сверке операций.'"),
		Ложь);
	
	РезультатОперации = СистемаБыстрыхПлатежейСлужебный.НовыйРезультатОперации();
	РезультатОперации.Вставить("Идентификатор", "");
	РезультатОперации.Вставить("URLФайла",      "");
	РезультатОперации.Вставить("Статус",        "");
	РезультатОперации.Вставить("ТипОшибки",     "");
	
	URLОперации = СистемаБыстрыхПлатежейСлужебный.URLОперацииСервиса(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"/members/%1/reports/reconciliation-of-settlements/operations/request-report",
			ПараметрыНастройкиПодключения.ИдентификаторУчастника));
	
	РезультатИПП = ДанныеАутентификации(URLОперации);
	
	Если РезультатИПП.Ошибка Тогда
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	ДанныеДляПодписи = Новый Массив;
	Если СистемаБыстрыхПлатежейСлужебный.УчастникСБПИспользуетHMAC(ПараметрыНастройкиПодключения.ТипАутентификации) Тогда
		ДанныеДляПодписи.Добавить(ПараметрыНастройкиПодключения.ИдентификаторМерчанта);
	КонецЕсли;
	
	РезультатСБП = ДанныеАутентификацииУчастникаСБП(
		ПараметрыНастройкиПодключения,
		ДанныеДляПодписи);
	
	Если РезультатСБП.Ошибка Тогда
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатСБП.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатСБП.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	Заголовки = СистемаБыстрыхПлатежейСлужебный.НовыйЗаголовкиВызоваОперации();
	РезультатОтправки = ВызовОперацииЗапросОтчетаПоСверкеОпераций(
		ПараметрыНастройкиПодключения,
		НачалоПериода,
		КонецПериода,
		РезультатИПП.ДанныеАутентификации,
		РезультатСБП.Аутентификация,
		URLОперации,
		Заголовки);
	
	// Обработка случаев устаревания токена аутентификации для способа
	// Resource Owner Password Credentials Grant.
	Если РезультатОтправки.КодСостояния = 401
		И СистемаБыстрыхПлатежейСлужебный.УчастникСБПИспользуетPasswordCredentialsGrant(ПараметрыНастройкиПодключения.ТипАутентификации) Тогда
		
		РезультатСБП = ДанныеАутентификацииУчастникаСБП(
			ПараметрыНастройкиПодключения,
			ДанныеДляПодписи,
			Истина);
		
		Если РезультатСБП.Ошибка Тогда
			РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
			РезультатОперации.СообщениеОбОшибке = РезультатСБП.ИнформацияОбОшибке;
			РезультатОперации.ИнформацияОбОшибке = РезультатСБП.ИнформацияОбОшибке;
			Возврат РезультатОперации;
		КонецЕсли;
		
		Заголовки = СистемаБыстрыхПлатежейСлужебный.НовыйЗаголовкиВызоваОперации();
		РезультатОтправки = ВызовОперацииЗапросОтчетаПоСверкеОпераций(
			ПараметрыНастройкиПодключения,
			НачалоПериода,
			КонецПериода,
			РезультатИПП.ДанныеАутентификации,
			РезультатСБП.Аутентификация,
			URLОперации,
			Заголовки);
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.ПереопределитьКодОшибкиСервиса(
			РезультатОтправки.КодСостояния);
		РезультатОперации.СообщениеОбОшибке = СистемаБыстрыхПлатежейСлужебный.ПереопределитьСообщениеПользователю(
			РезультатОперации.КодОшибки,
			РезультатОтправки.Содержимое);
		
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось выполнить запрос отчета сверке взаиморасчетов по операциям.
				|
				|%1
				|
				|Техническая информация об ошибке:
				|При запросе отчета сверке взаиморасчетов по операциям сервис вернул ошибку.
				|URL: %2
				|Код ошибки: %3
				|X-Correlation-ID: %4
				|Подробная информация:
				|%5'"),
			РезультатОперации.СообщениеОбОшибке,
			URLОперации,
			РезультатОтправки.КодОшибки,
			Заголовки.Получить("X-Correlation-ID"),
			РезультатОтправки.ИнформацияОбОшибке);
		
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	ДанныеОтвета = ПрочитатьДанные_operations_request_report(
		РезультатОтправки.Содержимое);
	
	РезультатОперации.Идентификатор = ДанныеОтвета.sbpMemberResponse.reportId;
	РезультатОперации.URLФайла = ДанныеОтвета.sbpMemberResponse.resultURL;
	РезультатОперации.Статус = ДанныеОтвета.sbpMemberResponse.reportState.status;
	
	Если ДанныеОтвета.sbpMemberResponse.reportState.Свойство("errorType") Тогда // АПК:1416 Не обязательное свойство ответа сервиса.
		РезультатОперации.ТипОшибки = ДанныеОтвета.sbpMemberResponse.reportState.errorType;
	КонецЕсли;
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Запрос отчета по оборотам завершен.'"),
		Ложь);
	
	Возврат РезультатОперации;
	
КонецФункции

// Выполняет вызов операции запроса отчета по операциям.
//
// Параметры:
//  ПараметрыНастройкиПодключения - Структура - параметры выполнения операции
//   см. СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения;
//  НачалоПериода - Дата - дата начало выборки данных отчета;
//  КонецПериода - Дата - дата окончания выборки данных отчета;
//  ДанныеАутентификации - Структура - данные аутентификации на Портале 1С:ИТС;
//  ЗаголовокАутентификации - Строка - данные аутентификации в сервисе участника СБП;
//  URLОперации - Строка - url для вызова операции;
//  Заголовки - Соотсветствие - заголовки операции.
//
// Возвращаемое значение:
//  Структура - результат запроса отчета по операциям:
//   *КодСостояния - Число - http код результата операции;
//   *КодОшибки - Строка - идентификатор ошибки вызова операции;
//   *Содержимое - Строка - ответа сервиса;
//
Функция ВызовОперацииЗапросОтчетаПоСверкеОпераций(
		ПараметрыНастройкиПодключения,
		НачалоПериода,
		КонецПериода,
		ДанныеАутентификации,
		ЗаголовокАутентификации,
		URLОперации,
		Заголовки)
	
	ПараметрыПодключения = СистемаБыстрыхПлатежейСлужебный.ИнициализироватьПараметрыПодключения();
	
	ПараметрыЗапросаJSON = operations_request_report(
		НачалоПериода,
		КонецПериода,
		ПараметрыНастройкиПодключения.ИдентификаторМерчанта,
		ДанныеАутентификации,
		ЗаголовокАутентификации);
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	Возврат ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
КонецФункции

// Формирует параметры запроса для операции
// /sbp/v1/members/{memberId}/reports/reconciliation-of-settlements/operations/request-report.
//
Функция operations_request_report(
		НачалоПериода,
		КонецПериода,
		ИдентификаторМерчанта,
		ДанныеАутентификации,
		ЗаголовокАутентификации)
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	// Данные аутентификации.
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьДанныеАутентификации(
		ЗаписьДанныхСообщения,
		ДанныеАутентификации);
	
	// Данные аутентификации участника СБП.
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьДанныеАутентификацииУчастникаСБП(
		ЗаписьДанныхСообщения,
		ЗаголовокАутентификации,
		ИдентификаторМерчанта);
	
	// Параметры клиента.
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьПараметрыКлиента(
		ЗаписьДанныхСообщения);
	
	// Параметры отчета.
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("sbpMemberRequest");
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("endDate");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(
		ЗаписатьДатуJSON(
			КонецПериода,
			ФорматДатыJSON.ISO,
			ВариантЗаписиДатыJSON.ЛокальнаяДатаСоСмещением));
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("beginDate");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(
		ЗаписатьДатуJSON(
			НачалоПериода,
			ФорматДатыJSON.ISO,
			ВариантЗаписиДатыJSON.ЛокальнаяДатаСоСмещением));
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("merchantId");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ИдентификаторМерчанта);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

// Чтение ответа операции:
// /sbp/v1/members/{memberId}/reports/reconciliation-of-settlements/operations/request-report.
//
Функция ПрочитатьДанные_operations_request_report(ТелоJSON)
	
	// Ответ сервиса:
	//  reportId - идентификатор отчета;
	//  status - статус формирования отчета;
	//  statusDate - дата отчета;
	//  resultURL - url размещения отчета для загрузки;
	// 
	// {
	//  "reportId": "string",
	//  "reportState": {
	//    "errorType": "INTERNAL_ERROR",
	//    "status": "PENDING",
	//    "statusDate": "2020-09-11T07:02:18.409Z"
	//  },
	//  "resultURL": "string"
	// }
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получен ответ СБП:
			|%1'"),
		ТелоJSON);
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	Результат = ПрочитатьJSON(ЧтениеОтвета);
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вызов операции POST /sbp/v1/members/{memberId}/reports/reconciliation-of-settlements/operations/{reportId}/get-report

// Получает статус отчета по сверке операций из сервиса.
//
// Параметры:
//  Идентификатор - Строка - идентификатор отчета;
//  ПараметрыНастройкиПодключения - Структура - параметры выполнения операции
//    см. СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения;
//  ДатаЗапросаСтатуса - Дата - для определения периодичности получения статуса
//    формирования отчета.
//
// Возвращаемое значение:
//  Структура - данные сверке взаиморасчетов:
//    *URLФайла - Строка - url файла для загрузки данных;
//    *Статус - Строка - текущее состояние формирования отчета;
//    *ТипОшибки - Строка - вид ошибки формирования отчета;
//    *КодОшибки - Строка - строковый код возникшей ошибки, который
//     может быть обработан вызывающим методом;
//    *СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция ОперацияЗапросСтатусаОтчетаПоОперациям(
		Идентификатор,
		ПараметрыНастройкиПодключения,
		ДатаЗапросаСтатуса)
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Запрос статуса отчета по сверке операций.'"),
		Ложь);
	
	РезультатОперации = СистемаБыстрыхПлатежейСлужебный.НовыйРезультатОперации();
	РезультатОперации.Вставить("Статус",    "");
	РезультатОперации.Вставить("URLФайла",  "");
	РезультатОперации.Вставить("ТипОшибки", "");
	
	URLОперации = СистемаБыстрыхПлатежейСлужебный.URLОперацииСервиса(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"/members/%1/status-manager/reports/reconciliation-of-settlements/operations/%2/states/test-check-needed",
			ПараметрыНастройкиПодключения.ИдентификаторУчастника,
			Идентификатор));
	
	РезультатПроверки = ОперацияПроверкаНаличияСтатусаОперации(
		URLОперации,
		ДатаЗапросаСтатуса);
	
	Если Не РезультатПроверки.ЗапроситьСтатус Тогда
		ЗаполнитьЗначенияСвойств(
			РезультатОперации,
			РезультатПроверки,
			"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
		Если Не ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
			РезультатОперации.Статус = ИдентификаторСтатусаОжидание();
		КонецЕсли;
		Возврат РезультатОперации;
	КонецЕсли;
	
	URLОперации = СистемаБыстрыхПлатежейСлужебный.URLОперацииСервиса(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"/members/%1/reports/reconciliation-of-settlements/operations/%2/get-report",
			ПараметрыНастройкиПодключения.ИдентификаторУчастника,
			Идентификатор));
	
	РезультатИПП = ДанныеАутентификации(URLОперации);
	
	Если РезультатИПП.Ошибка Тогда
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	ДанныеДляПодписи = Новый Массив;
	Если СистемаБыстрыхПлатежейСлужебный.УчастникСБПИспользуетHMAC(ПараметрыНастройкиПодключения.ТипАутентификации) Тогда
		ДанныеДляПодписи.Добавить(Идентификатор);
	КонецЕсли;
	
	РезультатСБП = ДанныеАутентификацииУчастникаСБП(
		ПараметрыНастройкиПодключения,
		ДанныеДляПодписи);
	
	Если РезультатСБП.Ошибка Тогда
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатСБП.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатСБП.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	Заголовки = СистемаБыстрыхПлатежейСлужебный.НовыйЗаголовкиВызоваОперации();
	РезультатОтправки = ВызовОперацииЗапросСтатусаОтчетаПоСверкеОпераций(
		ПараметрыНастройкиПодключения,
		РезультатИПП.ДанныеАутентификации,
		РезультатСБП.Аутентификация,
		URLОперации,
		Заголовки);
	
	// Обработка случаев устаревания токена аутентификации для способа
	// Resource Owner Password Credentials Grant.
	Если РезультатОтправки.КодСостояния = 401
		И СистемаБыстрыхПлатежейСлужебный.УчастникСБПИспользуетPasswordCredentialsGrant(ПараметрыНастройкиПодключения.ТипАутентификации) Тогда
		
		РезультатСБП = ДанныеАутентификацииУчастникаСБП(
			ПараметрыНастройкиПодключения,
			ДанныеДляПодписи,
			Истина);
		
		Если РезультатСБП.Ошибка Тогда
			РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
			РезультатОперации.СообщениеОбОшибке = РезультатСБП.ИнформацияОбОшибке;
			РезультатОперации.ИнформацияОбОшибке = РезультатСБП.ИнформацияОбОшибке;
			Возврат РезультатОперации;
		КонецЕсли;
		
		Заголовки = СистемаБыстрыхПлатежейСлужебный.НовыйЗаголовкиВызоваОперации();
		РезультатОтправки = ВызовОперацииЗапросСтатусаОтчетаПоСверкеОпераций(
			ПараметрыНастройкиПодключения,
			РезультатИПП.ДанныеАутентификации,
			РезультатСБП.Аутентификация,
			URLОперации,
			Заголовки);
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.ПереопределитьКодОшибкиСервиса(
			РезультатОтправки.КодСостояния);
		РезультатОперации.СообщениеОбОшибке = СистемаБыстрыхПлатежейСлужебный.ПереопределитьСообщениеПользователю(
			РезультатОперации.КодОшибки,
			РезультатОтправки.Содержимое);
		
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить статус отчета по сверке операций.
				|
				|%1
				|
				|Техническая информация об ошибке:
				|При запросе отчета по сверке операций сервис вернул ошибку.
				|URL: %2
				|Код ошибки: %3
				|X-Correlation-ID: %4
				|Подробная информация:
				|%5'"),
			РезультатОперации.СообщениеОбОшибке,
			URLОперации,
			РезультатОтправки.КодОшибки,
			Заголовки.Получить("X-Correlation-ID"),
			РезультатОтправки.ИнформацияОбОшибке);
		
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	ДанныеОтвета = ПрочитатьДанные_operations_get_report(
		РезультатОтправки.Содержимое);
	
	РезультатОперации.URLФайла = ДанныеОтвета.sbpMemberResponse.resultURL;
	РезультатОперации.Статус = ДанныеОтвета.sbpMemberResponse.reportState.status;
	
	Если ДанныеОтвета.sbpMemberResponse.reportState.Свойство("errorType") Тогда // АПК:1416 Не обязательное свойство ответа сервиса.
		РезультатОперации.ТипОшибки = ДанныеОтвета.sbpMemberResponse.reportState.errorType;
	КонецЕсли;
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Запрос статуса отчета по операциям завершен.'"),
		Ложь);
	
	Возврат РезультатОперации;
	
КонецФункции

// Выполняет вызов операции получения статуса отчета по операциям.
//
// Параметры:
//  ПараметрыНастройкиПодключения - Структура - параметры выполнения операции
//    см. СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения;
//  ДанныеАутентификации - Структура - данные аутентификации на Портале 1С:ИТС;
//  ЗаголовокАутентификации - Строка - данные аутентификации в сервисе участника СБП;
//  URLОперации - Строка - url для вызова операции;
//  Заголовки - Соотсветствие - заголовки операции.
//
// Возвращаемое значение:
//  Структура - результат статуса отчета по операциям:
//   *КодСостояния - Число - http код результата операции;
//   *КодОшибки - Строка - идентификатор ошибки вызова операции;
//   *Содержимое - Строка - ответа сервиса;
//
Функция ВызовОперацииЗапросСтатусаОтчетаПоСверкеОпераций(
		ПараметрыНастройкиПодключения,
		ДанныеАутентификации,
		ЗаголовокАутентификации,
		URLОперации,
		Заголовки)
	
	ПараметрыПодключения = СистемаБыстрыхПлатежейСлужебный.ИнициализироватьПараметрыПодключения();
	
	ПараметрыЗапросаJSON = operations_get_report(
		ДанныеАутентификации,
		ЗаголовокАутентификации,
		ПараметрыНастройкиПодключения.ИдентификаторМерчанта);
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	Возврат ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
КонецФункции

// Формирует параметры запроса для операции
// /sbp/v1/members/{memberId}/reports/reconciliation-of-settlements/operations/{reportId}/get-report
//
Функция operations_get_report(
		ДанныеАутентификации,
		ЗаголовокАутентификации,
		ИдентификаторМерчанта)
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	// Данные аутентификации.
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьДанныеАутентификации(
		ЗаписьДанныхСообщения,
		ДанныеАутентификации);
	
	// Данные аутентификации участника СБП.
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьДанныеАутентификацииУчастникаСБП(
		ЗаписьДанныхСообщения,
		ЗаголовокАутентификации,
		ИдентификаторМерчанта);
	
	// Параметры клиента.
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьПараметрыКлиента(
		ЗаписьДанныхСообщения);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

// Чтение ответа операции:
// /sbp/v1/members/{memberId}/reports/reconciliation-of-settlements/operations/{reportId}/get-report.
//
Функция ПрочитатьДанные_operations_get_report(ТелоJSON)
	
	// Ответ сервиса:
	//  reportId - идентификатор отчета;
	//  status - статус формирования отчета;
	//  refundAmountSum - сумма возвратов.
	// 
	// {
	//  "reportId": "string",
	//  "reportState": {
	//    "errorType": "INTERNAL_ERROR",
	//    "status": "PENDING",
	//    "statusDate": "2020-09-11T07:02:18.409Z"
	//  },
	//  "resultURL": "string"
	// }
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получен ответ СБП:
			|%1'"),
		ТелоJSON);
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	Результат = ПрочитатьJSON(ЧтениеОтвета);
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вызов операции загрузки файла отчетов сверки операций.

// Выполняет загрузку файла отчета по переданному url.
//
// Параметры:
//  URLОперации - Строка - url файла отчета;
//  Идентификатор - Строка - идентификатор отчета;
//  ПараметрыНастройкиПодключения - Структура - параметры выполнения операции
//    см. СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения;
//
// Возвращаемое значение:
//  Структура - данные сверке взаиморасчетов:
//    *ДанныеОпераций - ТаблицаЗначений - см. НовыйДанныеОтчетаПоСверкеОпераций;
//    *КодОшибки - Строка - строковый код возникшей ошибки, который
//     может быть обработан вызывающим методом;
//    *СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция ОперацияЗагрузитьФайлОтчетаПоСверкеОпераций(
			URLОперации,
			Идентификатор,
			ПараметрыНастройкиПодключения)
	
	РезультатОперации = СистемаБыстрыхПлатежейСлужебный.НовыйРезультатОперации();
	РезультатОперации.Вставить("ДанныеОпераций", НовыйДанныеОтчетаПоСверкеОпераций());
	
	ВременныйКаталог = ФайловаяСистема.СоздатьВременныйКаталог("zip");
	АдресФайла = ВременныйКаталог + "report.zip";
	
	ДанныеДляПодписи = Новый Массив;
	Если СистемаБыстрыхПлатежейСлужебный.УчастникСБПИспользуетHMAC(ПараметрыНастройкиПодключения.ТипАутентификации) Тогда
		ДанныеДляПодписи.Добавить(Идентификатор);
	КонецЕсли;
	
	РезультатСБП = ДанныеАутентификацииУчастникаСБП(
		ПараметрыНастройкиПодключения,
		ДанныеДляПодписи);
	
	РезультатОтправки = ВызовЗагрузитьФайлОтчетаПоСверкеОпераций(
		ПараметрыНастройкиПодключения,
		РезультатСБП.Аутентификация,
		URLОперации,
		АдресФайла);
	
	// Обработка случаев устаревания токена аутентификации для способа
	// Resource Owner Password Credentials Grant.
	Если РезультатОтправки.КодСостояния = 401
		И СистемаБыстрыхПлатежейСлужебный.УчастникСБПИспользуетPasswordCredentialsGrant(ПараметрыНастройкиПодключения.ТипАутентификации) Тогда
		
		// Могла загрузиться только часть файла перед повторной
		// попыткой необходимо заново сгенерировать файл для
		// загрузки отчета.
		ФайловаяСистема.УдалитьВременныйКаталог(ВременныйКаталог);
		ВременныйКаталог = ФайловаяСистема.СоздатьВременныйКаталог("zip");
		АдресФайла = ВременныйКаталог + "report.zip";
		
		РезультатСБП = ДанныеАутентификацииУчастникаСБП(
			ПараметрыНастройкиПодключения,
			ДанныеДляПодписи);
		
		Если РезультатСБП.Ошибка Тогда
			РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
			РезультатОперации.СообщениеОбОшибке = РезультатСБП.ИнформацияОбОшибке;
			РезультатОперации.ИнформацияОбОшибке = РезультатСБП.ИнформацияОбОшибке;
			Возврат РезультатОперации;
		КонецЕсли;
		
		РезультатОтправки = ВызовЗагрузитьФайлОтчетаПоСверкеОпераций(
			ПараметрыНастройкиПодключения,
			РезультатСБП.Аутентификация,
			URLОперации,
			АдресФайла);
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.ПереопределитьКодОшибкиСервиса(
			РезультатОтправки.КодСостояния);
		РезультатОперации.СообщениеОбОшибке = СистемаБыстрыхПлатежейСлужебный.ПереопределитьСообщениеПользователю(
			РезультатОперации.КодОшибки,
			РезультатОтправки.Содержимое);
		
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось выполнить загрузку отчета по сверке взаиморасчетов операций.
				|
				|%1
				|
				|Техническая информация об ошибке:
				|При загрузке файла отчета по сверке взаиморасчетов операций сервис вернул ошибку.
				|URL: %2
				|Код ошибки: %3
				|Подробная информация:
				|%4'"),
			РезультатОперации.СообщениеОбОшибке,
			URLОперации,
			РезультатОтправки.КодОшибки,
			РезультатОтправки.ИнформацияОбОшибке);
		
		ФайловаяСистема.УдалитьВременныйКаталог(ВременныйКаталог);
		
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	ОперацииСервис = ПрочитатьДанныеДанныеОтчетаПоСверкеОпераций(АдресФайла);
	Для Каждого СтрокаСервис Из ОперацииСервис.operations Цикл
		СтрокаДанные = РезультатОперации.ДанныеОпераций.Добавить();
		СтрокаДанные.ТипОперации = ?(СтрокаСервис.type = "PAYMENT",
			ИдентификаторТипаОперацииОплата(),
			ИдентификаторТипаОперацииВозврат());
		СтрокаДанные.ДатаОперации = СтрокаСервис.operationDate;
		СтрокаДанные.Сумма = СтрокаСервис.amount;
		СтрокаДанные.СуммаКомиссии = СтрокаСервис.fee;
		СтрокаДанные.ИдентификаторОплаты = СтрокаСервис.qrId;
		СтрокаДанные.ИдентификаторОперации = СтрокаСервис.id;
	КонецЦикла;
	
	ФайловаяСистема.УдалитьВременныйКаталог(ВременныйКаталог);
	
	Возврат РезультатОперации;
	
КонецФункции

// Выполняет загрузку файла отчета по переданному url.
//
// Параметры:
//  ПараметрыНастройкиПодключения - Структура - параметры выполнения операции
//    см. СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения;
//  ДанныеАутентификации - Структура - данные аутентификации на Портале 1С:ИТС;
//  ЗаголовокАутентификации - Строка - данные аутентификации в сервисе участника СБП;
//  URLОперации - Строка - url для вызова операции;
//  АдресФайла - Строка - адрес файла результата.
//
// Возвращаемое значение:
//  Структура - результат статуса отчета по оборотам:
//   *КодСостояния - Число - http код результата операции;
//   *КодОшибки - Строка - идентификатор ошибки вызова операции;
//   *Содержимое - Строка - ответа сервиса;
//
Функция ВызовЗагрузитьФайлОтчетаПоСверкеОпераций(
		ПараметрыНастройкиПодключения,
		ЗаголовокАутентификации,
		URLОперации,
		АдресФайла)
	
	ПараметрыПодключения = СистемаБыстрыхПлатежейСлужебный.ИнициализироватьПараметрыПодключения();
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("X-Correlation-ID", Строка(Новый УникальныйИдентификатор));
	Заголовки.Вставить("X-Merchant-Id", ПараметрыНастройкиПодключения.ИдентификаторМерчанта);
	
	// Особенность работы сервиса отчетов PayMaster.
	Если ПараметрыНастройкиПодключения.ИдентификаторУчастника <> "PayMaster" Тогда
		Заголовки.Вставить("Authorization", ЗаголовокАутентификации);
	КонецЕсли;
	
	// 1. Вызов операции получения размера отчета
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "HEAD");
	ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("ИмяФайлаОтвета",           АдресФайла);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 15);
	
	РезультатОперации = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
	Если Не ПустаяСтрока(РезультатОперации.КодОшибки) Тогда
		Возврат РезультатОперации;
	КонецЕсли;
	
	// 2. Обработка заголовков без учета регистра.
	ЕдиницаИзмерения = Неопределено;
	РазмерФайла = Неопределено;
	Для Каждого Заголовок Из РезультатОперации.Заголовки Цикл
		
		Если НРег(Заголовок.Ключ) = "accept-ranges" Тогда
			ЕдиницаИзмерения = Заголовок.Значение;
		КонецЕсли;
		
		Если НРег(Заголовок.Ключ) = "content-length" Тогда
			РазмерФайла = Число(Заголовок.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
	// 3. Проверка заголовка Accept-Ranges. Клиент поддерживает обработку
	// только единицы измерения bytes. В случае передачи другого значения
	// будет вызвано исключение.
	// https://tools.ietf.org/html/rfc7233#section-2.3
	Если НРег(ЕдиницаИзмерения) = "none" Или НРег(ЕдиницаИзмерения) <> "bytes" Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неверная единица измерения (Accept-Ranges: %1) порции файла.'"),
			ЕдиницаИзмерения);
	КонецЕсли;
	
	// 4. Проверка заголовка Content-Length.
	Если РазмерФайла = Неопределено Или РазмерФайла = 0 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неверный размер файла (Content-Length: %1).'"),
			РазмерФайла);
	КонецЕсли;
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "GET");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 2);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// 5. Загрузка данных файла порциями по 4 МБ.
	// https://tools.ietf.org/html/rfc7233#section-3.1
	НачальнаяПозиция = 0;
	ТекущаяПозиция   = 0;
	РазмерПорции     = 4096; // 4 МБ
	
	ЗаписьДанных = Новый ЗаписьДанных(АдресФайла);
	
	Пока Истина Цикл
		
		Если НачальнаяПозиция >= РазмерФайла Тогда
			Прервать;
		ИначеЕсли (НачальнаяПозиция + РазмерПорции) > РазмерФайла Тогда
			ТекущаяПозиция = РазмерФайла - 1;
		Иначе
			ТекущаяПозиция = ТекущаяПозиция + РазмерПорции;
		КонецЕсли;
		
		Порция = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"bytes=%1-%2",
			СистемаБыстрыхПлатежейСлужебный.ПреобразоватьЧислоВФорматJSON(НачальнаяПозиция),
			СистемаБыстрыхПлатежейСлужебный.ПреобразоватьЧислоВФорматJSON(ТекущаяПозиция));
		
		Заголовки.Вставить("X-Correlation-ID", Строка(Новый УникальныйИдентификатор));
		Заголовки.Вставить("Range", Порция);
		
		ПараметрыОтправки.Вставить("Заголовки" , Заголовки);
		
		РезультатОперации = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
			URLОперации,
			,
			,
			ПараметрыОтправки);
		
		Если ПустаяСтрока(РезультатОперации.КодОшибки) Тогда
			ЗаписьДанных.Записать(РезультатОперации.Содержимое);
		Иначе
			Прервать;
		КонецЕсли;
		
		НачальнаяПозиция = ТекущаяПозиция + 1;
		
	КонецЦикла;
	
	ЗаписьДанных.Закрыть();
	
	Возврат РезультатОперации;
	
КонецФункции

// Чтение файла сверке взаиморасчетов по оборотам.
//
Функция ПрочитатьДанныеДанныеОтчетаПоСверкеОпераций(АдресФайла)
	
	// Ответ сервиса:
	//  endDate - дата окончания формирования отчета;
	//  beginDate - дата начало формирования отчета;
	//  merchantId - идентификатор торговой точки;
	//  reportDate - дата отчета;
	//  type - тип операции;
	//  qrId - сумма оплат;
	//  id - идентификатор операции в платежной систем;
	//  amount - сумма операции;
	//  fee - сумма комиссии операции;
	//  currency - валюта операции;
	//  operationDate - дата операции в Системе быстрых платежей;
	// 
	// {
	//  "request": {
	//      "endDate": "2020-06-24T09:14:38.107Z",
	//      "beginDate": "2020-06-25T09:14:38.107Z",
	//      "merchantId": "cb4c52a6-3032-40c2-a113-66c31f26cffb"
	//    }
	//  "operations": [
	//    {
	//      "type": "PAYMENT",
	//      "qrId": "AS10002LMSG5QQGE8K2B6588FFVJP1DP",
	//      "id": "dc6f3bb2-ef3e-4bfa-8653-e20a6e77a7e7",
	//      "amount": 9103.01,
	//      "fee": 364.12,
	//      "currency": "RUB",
	//      "operationDate": "2020-06-24T09:14:38.107Z"
	//    },
	//    {
	//      "type": "PAYMENT",
	//      "qrId": "AS10002LMSG5QQGE8K2B6588FFVJP1DP",
	//      "id": "dc6f3bb2-ef3e-4bfa-8653-e20a6e77a7e7",
	//      "amount": 9103.01,
	//      "fee": 364.12,
	//      "currency": "RUB",
	//      "operationDate": "2020-06-24T09:14:38.107Z"
	//    }
	//  ],
	// "reportDate": "2020-06-24T09:14:38.107Z"
	// } 
	
	ТекстЖурналРегистрации = НСтр("ru = 'Загружен файл отчета по сверке операций.'");
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	Каталог = ФайловаяСистема.СоздатьВременныйКаталог("json");
	
	Если ОбщегоНазначения.ЭтоLinuxСервер() Тогда
		Попытка
			УстановитьАтрибутыАрхива(АдресФайла);
		Исключение
			СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
				Истина);
		КонецПопытки;
	КонецЕсли;
	
	Попытка
		ЧтениеZip = Новый ЧтениеZipФайла(АдресФайла);
		Элемент = ЧтениеZip.Элементы.Найти("report.json");
		Если Элемент = Неопределено Тогда
			ВызватьИсключение НСтр("ru = 'Архив отчета по оборотам не содержит файл report.json.'");
		КонецЕсли;
		ЧтениеZip.Извлечь(Элемент, Каталог);
		ЧтениеZip.Закрыть();
	Исключение
		ФайловаяСистема.УдалитьВременныйКаталог(Каталог);
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			Истина);
		ВызватьИсключение НСтр("ru = 'Не удалось обработать архив отчета по сверке операций. Подробности в журнале регистрации.'");
	КонецПопытки;
	
	Попытка
		ФайлОтчета = Новый Файл(Каталог + "report.json");
		Если ФайлОтчета.ПолучитьТолькоЧтение() Тогда
			ФайлОтчета.УстановитьТолькоЧтение(Ложь);
		КонецЕсли;
	Исключение
		ФайловаяСистема.УдалитьВременныйКаталог(Каталог);
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			Истина);
		ВызватьИсключение НСтр("ru = 'Не удалось обработать файл отчета по сверке операций. Подробности в журнале регистрации.'");
	КонецПопытки;
	
	Попытка
		
		ИменаСвойствСоЗначениямиДата = Новый Массив;
		ИменаСвойствСоЗначениямиДата.Добавить("operationDate");
		
		ЧтениеОтвета = Новый ЧтениеJSON;
		ЧтениеОтвета.ОткрытьФайл(Каталог + "report.json");
		
		Результат = ПрочитатьJSON(
			ЧтениеОтвета,
			,
			ИменаСвойствСоЗначениямиДата,
			,
			"ВосстановитьДатуJSON",
			СистемаБыстрыхПлатежейСлужебный,
			,
			ИменаСвойствСоЗначениямиДата);
		
		ЧтениеОтвета.Закрыть();
		
	Исключение
		ФайловаяСистема.УдалитьВременныйКаталог(Каталог);
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			Истина);
		ВызватьИсключение НСтр("ru = 'Не удалось обработать файл отчета по сверке операций. Подробности в журнале регистрации.'");
	КонецПопытки;
	
	ФайловаяСистема.УдалитьВременныйКаталог(Каталог);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ВызовОперацийЗагрузкиМакетов

// Выполняет получение и разбор файла содержащего описание макетов СБП.
//
// Возвращаемое значение:
//  Структура - данные сверке взаиморасчетов:
//    *Описание - ТаблицаЗначений - Описание макетов СБП по данным сервиса:
//      **Идентификатор    - Строка - Идентификатор макета СБП.
//      **КонтрольнаяСумма - Строка - Хеш сумма файла макета (SHA256).
//      **URLЗагрузки      - Строка - URL для загрузки файла макета.
//    *КодОшибки - Строка - строковый код возникшей ошибки, который
//     может быть обработан вызывающим методом;
//    *СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция ОперацияОписаниеМакетов()
	
	РезультатОперации = СистемаБыстрыхПлатежейСлужебный.НовыйРезультатОперации();
	РезультатОперации.Вставить("Описание", Неопределено);
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Получение описания макетов СБП.'"),
		Ложь);
	
	ПараметрыПодключения = СистемаБыстрыхПлатежейСлужебный.ИнициализироватьПараметрыПодключения();
	
	URLОперации = URLДанныхМакетов("/templates.json");
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "GET");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
		
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить описание макетов СБП.
				|
				|Техническая информация об ошибке:
				|При получении описания макетов СБП возникли ошибки.
				|URL: %1
				|Код ошибки: %2
				|Подробная информация:
				|%3'"),
			URLОперации,
			РезультатОтправки.КодОшибки,
			РезультатОтправки.ИнформацияОбОшибке);
		
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(ИнформацияОбОшибке),
			Истина);
		
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.ПереопределитьКодОшибкиСервиса(
			РезультатОтправки.КодСостояния);
		РезультатОперации.СообщениеОбОшибке = СистемаБыстрыхПлатежейСлужебный.ПереопределитьСообщениеПользователю(
			РезультатОперации.КодОшибки,
			РезультатОтправки.Содержимое);

		РезультатОперации.ИнформацияОбОшибке = ИнформацияОбОшибке;
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	РезультатОперации.Описание = ПрочитатьДанные_templates(РезультатОтправки.Содержимое);
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Завершено получение описания макетов СБП.'"),
		Ложь);
	
	Возврат РезультатОперации;
	
КонецФункции

// Чтение ответа с описанием макетов СБП:
// /templates.json.
//
Функция ПрочитатьДанные_templates(ТелоJSON)
	
	// Ответ сервиса:
	// [
	//  {
	//    "id": "CashLinkNarrowHorizontal",
	//    "downloadURL": "https://payment-gateway.1c.ru/resources/templates/cash-link-narrow-horizontal.mxl",
	//    "sha256": "ec210724f22f51c32a91f205178e669d3b31ca876edc77afe0dc6b8cb5df5255"
	//  }
	// ]
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	РезультатЧтения = ПрочитатьJSON(ЧтениеОтвета);
	
	ОписаниеМакетов = Новый ТаблицаЗначений;
	ОписаниеМакетов.Колонки.Добавить(
		"Идентификатор",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50, ДопустимаяДлина.Переменная)));
	ОписаниеМакетов.Колонки.Добавить(
		"КонтрольнаяСумма",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(64, ДопустимаяДлина.Фиксированная)));
	ОписаниеМакетов.Колонки.Добавить("URLЗагрузки", Новый ОписаниеТипов("Строка"));
	
	Для Каждого ДанныеМакета Из РезультатЧтения Цикл
		ОписаниеМакета = ОписаниеМакетов.Добавить();
		ОписаниеМакета.Идентификатор    = ДанныеМакета.id;
		ОписаниеМакета.КонтрольнаяСумма = ДанныеМакета.sha256;
		ОписаниеМакета.URLЗагрузки      = ДанныеМакета.downloadURL;
	КонецЦикла;
	
	Возврат ОписаниеМакетов;
	
КонецФункции

// Выполняет обновление макетов СБП в кэше.
//
// Параметры:
//  ОписаниеОбновляемыхМакетов - Структура - описание мактеа для обновления
//    *Идентификатор - Строка - Идентификатор макета.
//    *URLЗагрузки - Строка - URL загрузки обновляемого макета
//
// Возвращаемое значение:
//  Структура - данные сверке взаиморасчетов:
//    *ОбновленныеМакеты - Структура - Описание обновленных макетов СБП:
//      **Ключ    - Строка - Идентификатор макета СБП.
//      **Значение - ТабличныйДокумент - обновленный макет.
//    *КодОшибки - Строка - строковый код возникшей ошибки, который
//     может быть обработан вызывающим методом;
//    *СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция ОперацияОбновлениеМакетов(ОписаниеОбновляемыхМакетов)
	
	РезультатОперации = СистемаБыстрыхПлатежейСлужебный.НовыйРезультатОперации();
	РезультатОперации.Вставить("ОбновленныеМакеты", Новый Структура);
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат РезультатОперации;
	КонецЕсли;
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Загрузка макетов СБП из сервиса.'"),
		Ложь);
	
	ПараметрыПодключения = СистемаБыстрыхПлатежейСлужебный.ИнициализироватьПараметрыПодключения();
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод",                    "GET");
	ПараметрыОтправки.Вставить("ФорматОтвета",             2);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	Для Каждого ОбновляемыйМакет Из ОписаниеОбновляемыхМакетов Цикл
		
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Получение макета : %1'"),
				ОбновляемыйМакет.Идентификатор),
			Ложь);
			
		ИнтернетПоддержкаПользователей.ПроверитьURL(ОбновляемыйМакет.URLЗагрузки);
		
		РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
			ОбновляемыйМакет.URLЗагрузки,
			,
			,
			ПараметрыОтправки);
			
		Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
			
			РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.ПереопределитьКодОшибкиСервиса(
				РезультатОтправки.КодСостояния);
			РезультатОперации.СообщениеОбОшибке = СистемаБыстрыхПлатежейСлужебный.ПереопределитьСообщениеПользователю(
				РезультатОперации.КодОшибки,
				РезультатОтправки.Содержимое);
				
			РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось получить файл макета %1.
					|%2
					|
					|Техническая информация об ошибке:
					|При загрузке файла сервис вернул ошибку.
					|Код ошибки: %3.
					|URL Файла: %4
					|Подробная информация:
					|%5'"),
				ОбновляемыйМакет.Идентификатор,
				РезультатОперации.СообщениеОбОшибке,
				РезультатОперации.КодОшибки,
				ОбновляемыйМакет.URLЗагрузки,
				РезультатОтправки.ИнформацияОбОшибке);
			
			СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
				РезультатОперации.ИнформацияОбОшибке,
				Истина);
			
			Возврат РезультатОперации;
			
		КонецЕсли;
		
		ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.SHA256);
		ХешированиеДанных.Добавить(РезультатОтправки.Содержимое);
		КонтрольнаяСуммаМакета = Нрег(СтрЗаменить(ХешированиеДанных.ХешСумма, " ", ""));
		
		Если ОбновляемыйМакет.КонтрольнаяСумма <> КонтрольнаяСуммаМакета Тогда
			
			РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиФайлНеЗагружен();
			РезультатОперации.СообщениеОбОшибке  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при получении файла макета %1: 
					|%2'"),
				ОбновляемыйМакет.Идентификатор,
				НСтр("ru = 'Получен некорректный файл.'"));
			
			РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось получить файл макета %1.
					|Контрольная сумма полученного файла отличается от ожидаемой.'"),
				ОбновляемыйМакет.Идентификатор);
				
			СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(РезультатОперации.ИнформацияОбОшибке);
			
			Возврат РезультатОперации;
			
		КонецЕсли;
		
		Макет = Новый ТабличныйДокумент;
		Поток = РезультатОтправки.Содержимое.ОткрытьПотокДляЧтения();
		Макет.Прочитать(Поток);
		Поток.Закрыть();
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запись = РегистрыСведений.КэшМакетовСБП.СоздатьМенеджерЗаписи();
		Запись.Идентификатор    = ОбновляемыйМакет.Идентификатор;
		Запись.КонтрольнаяСумма = КонтрольнаяСуммаМакета;
		Запись.Макет            = Новый ХранилищеЗначения(Макет);
		Запись.ДатаОбновления   = ТекущаяДатаСеанса();
		Запись.Записать();
		
		УстановитьПривилегированныйРежим(Ложь);
		
		РезультатОперации.ОбновленныеМакеты.Вставить(ОбновляемыйМакет.Идентификатор, Макет);
		
	КонецЦикла;
	
	Возврат РезультатОперации;
	
КонецФункции

#КонецОбласти

#Область ОбработкаАрхивов

// Установка внешних атрибутов архивов.
//
// Параметры:
//  ПутьКАрхиву - Строка - путь к файлу архива.
//
Процедура УстановитьАтрибутыАрхива(ПутьКАрхиву)
	
	// Открываем поток на чтение и запись.
	Поток = Новый ФайловыйПоток(
		ПутьКАрхиву,
		РежимОткрытияФайла.Открыть,
		ДоступКФайлу.ЧтениеИЗапись);
	
	// Читаем 4 байта заголовка файла, чтобы проверить, что это точно архив.
	БуферМагическогоЧисла = ПотокПрочитатьБуфер(Поток, 4);
	
	Если БуферМагическогоЧисла[0] <> 80
		Или БуферМагическогоЧисла[1] <> 75
		Или БуферМагическогоЧисла[2] <> 3
		Или БуферМагическогоЧисла[3] <> 4 Тогда
		Поток.Закрыть();
		ВызватьИсключение НСтр("ru = 'Указанный файл имеет неверные 4 байта заголовка и не может быть Zip-Архивом.'");
	КонецЕсли;
	
	// Переходим на конец и читаем структуру EOCD.
	ПозицияОкончания = Поток.Размер() - 22;
	Поток.Перейти(ПозицияОкончания, ПозицияВПотоке.Начало);
	БуферОкончания = ПотокПрочитатьБуфер(Поток, 22);
	
	// Проверяем, что у нас именно запись EOCD.
	Если БуферОкончания[0] <> 80
		ИЛИ БуферОкончания[1] <> 75
		ИЛИ БуферОкончания[2] <> 5
		ИЛИ БуферОкончания[3] <> 6 Тогда
		Поток.Закрыть();
		ВызватьИсключение НСтр("ru = 'По смещению от конца файла не найдена структура EOCD, так как неверные 4 байт в ее начала.'");
	КонецЕсли;
	
	КоличествоФайлов = БуферОкончания.ПрочитатьЦелое16(
		10,
		ПорядокБайтов.LittleEndian);
	
	Если БуферОкончания.ПрочитатьЦелое16(20, ПорядокБайтов.LittleEndian) <> 0 Тогда
		Поток.Закрыть();
		ВызватьИсключение НСтр("ru = 'В данных EOCD указан комментарий, обработка не поддерживается.'");
	КонецЕсли;
	
	РазмерБлокаДиректорий = БуферОкончания.ПрочитатьЦелое32(
		12,
		ПорядокБайтов.LittleEndian);
	СмещениеНачалаБлокаДиректорий = БуферОкончания.ПрочитатьЦелое32(
		16,
		ПорядокБайтов.LittleEndian);
	
	// Проверка на корректность данных.
	Если (СмещениеНачалаБлокаДиректорий + РазмерБлокаДиректорий) <> ПозицияОкончания Тогда
		Поток.Закрыть();
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неверная структура файла:
				|Начало блока директорий: %1
				|Размер блока директорий: %2
				|Позиция окончания: %3'"),
			Строка(СмещениеНачалаБлокаДиректорий),
			Строка(РазмерБлокаДиректорий),
			Строка(ПозицияОкончания));
	КонецЕсли;
	
	Поток.Перейти(
		СмещениеНачалаБлокаДиректорий,
		ПозицияВПотоке.Начало);
	
	Для НомерФайла = 1 По КоличествоФайлов Цикл
		
		// Заголовок файла:
		// 1. Версия для создания: 2 байта
		// 2. Минимальная версия: 2 байта
		// 3. Регистр флагов: 2 байта
		// 4. Метод сжатия: 2 байта
		// 5. Время модификации файла: 2 байта
		// 6. Дата модификации файла: 2 байта
		// 7. Контрольная сумма: 4 байта
		// 8. Сжатый размер: 4 байта
		// 9. Несжатый размер: 4 байта
		// 10. Длина имени файла: 2 байта
		// 11. Длина дополнительных данных: 2 байта
		// 12. Длина комментария: 2 байта
		// 13. Номер диска: 2 байта
		// 14. Внутренние атрибуты файла: 2 байта
		// 15. Внешние атрибуты файла: 4 байта
		// 16. Смещение до начала записи файла: 4 байта
		
		// Запоминаем позицию для записи.
		Позиция = Поток.ТекущаяПозиция();
		
		Если Позиция + 46 > ПозицияОкончания Тогда
			Поток.Закрыть();
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При чтении блока директории для файла: %1 с позиции: %2 вышли за пределы позиции окончания: %3.'"),
				Строка(НомерФайла),
				Строка(Позиция),
				Строка(ПозицияОкончания));
		КонецЕсли;
		
		БуферДиректории = ПотокПрочитатьБуфер(Поток, 46);
		
		// Проверяем сигнатуру архива.
		Если БуферДиректории[0] <> 80
			ИЛИ БуферДиректории[1] <> 75
			ИЛИ БуферДиректории[2] <> 1
			ИЛИ БуферДиректории[3] <> 2 Тогда
			Поток.Закрыть();
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Неверная сигнатура записи файла: %1.'"),
				Строка(НомерФайла));
		КонецЕсли;
		
		// Определяем версию файла. Если файл создан для UNIX систем
		// для него потребуется установка внешних атрибутов.
		ВерсияФайлаDec = БуферДиректории.ПрочитатьЦелое16(
			4,
			ПорядокБайтов.LittleEndian);
		ВерсияФайлаHex = СистемаБыстрыхПлатежейСлужебный.ПреобразоватьЧислоВHEX(
			ВерсияФайлаDec);
		
		ДлинаИмени = БуферДиректории.ПрочитатьЦелое16(
			28,
			ПорядокБайтов.LittleEndian);
		ДлинаДопДанных = БуферДиректории.ПрочитатьЦелое16(
			30,
			ПорядокБайтов.LittleEndian);
		ДлинаКомментария = БуферДиректории.ПрочитатьЦелое16(
			32,
			ПорядокБайтов.LittleEndian);
		ВнешниеАтрибуты = БуферДиректории.ПрочитатьЦелое32(
			38,
			ПорядокБайтов.LittleEndian);
		
		// Если файл создан для UNIX систем и внешние атрибуты не заданы,
		// то их нужно задать и записать.
		Если Лев(ВерсияФайлаHex, 1) = "3" И ВнешниеАтрибуты = 0 Тогда
			
			// Устанавливаем атрибуты "Чтение" и "Запись" (100600) только для самого владельца.
			// Порядок преобразования при записи:
			// 1. 2172649472 переводится в HEX = 81800000;
			// 2. Убираются два младших байта = 8180
			// 3. Преобразуем HEX в OCT = 100600.
			БуферДиректории.ЗаписатьЦелое32(
				38,
				2172649472,
				ПорядокБайтов.LittleEndian);
			Поток.Перейти(
				Позиция,
				ПозицияВПотоке.Начало);
			Поток.Записать(БуферДиректории, 0, 46);
			
		КонецЕсли;
		
		ПозицияСледующего = Позиция
			+ 46
			+ ДлинаИмени
			+ ДлинаДопДанных
			+ ДлинаКомментария;
		
		// Проверка окончания файла.
		Если ПозицияСледующего > ПозицияОкончания Тогда
			Поток.Закрыть();
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'После чтения записи файла: %1 вышли на позицию: %2 за пределы позиции окончания: %3.'"),
				Строка(НомерФайла),
				Строка(ПозицияСледующего),
				Строка(ПозицияОкончания));
		КонецЕсли;
		
		// Записи имен и прочего перескакиваем.
		Поток.Перейти(
			ПозицияСледующего,
			ПозицияВПотоке.Начало);
		
	КонецЦикла;
	
	Если ПозицияСледующего <> ПозицияОкончания Тогда
		Поток.Закрыть();
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'После чтения блока файлов был выполнен переход на позицию: %1 отличную от позиции окончания: %2.'"),
				Строка(ПозицияСледующего),
				Строка(ПозицияОкончания));
	КонецЕсли;
	
КонецПроцедуры

// Выполняет чтение из потока буфера двоичных данных указанного размера
// Параметры:
//  Поток - Поток,ПотокВПамяти,ФайловыйПоток - поток, из которого выполняется чтение
//  КоличествоБайт - Число - количество читаемых байт
//
// Возвращаемое значение:
//  БуферДвоичныхДанных - созданный и прочитанный из файла буфер
//
Функция ПотокПрочитатьБуфер(Поток, КоличествоБайт)
	
	Позиция = Поток.ТекущаяПозиция();
	Размер = Поток.Размер();
	
	Буфер = Новый БуферДвоичныхДанных(КоличествоБайт, ПорядокБайтов.LittleEndian);
	Прочитано = Поток.Прочитать(Буфер, 0, КоличествоБайт);
	
	Возврат Буфер;
	
КонецФункции

#КонецОбласти

#Область ИдентификаторыСтатусовИОпераций

// Формирует идентификатор операции наличия терминального статуса при длительной оплате.
//
// Возвращаемое значение:
//  Строка - идентификатор операции.
//
Функция ИдентификаторОперацииПроверкиДлительнойОплаты()
	
	Возврат "LONG_PAY";
	
КонецФункции

// Формирует идентификатор операции наличия терминального статуса при оплате.
//
// Возвращаемое значение:
//  Строка - идентификатор операции.
//
Функция ИдентификаторОперацииПроверкиОплаты()
	
	Возврат "PAY";
	
КонецФункции

// Формирует идентификатор операции наличия терминального статуса при длительном возврате.
//
// Возвращаемое значение:
//  Строка - идентификатор операции.
//
Функция ИдентификаторОперацииПроверкиДлительногоВозврата()
	
	Возврат "LONG_REFUND";
	
КонецФункции

// Формирует идентификатор операции наличия терминального статуса при возврате.
//
// Возвращаемое значение:
//  Строка - идентификатор операции.
//
Функция ИдентификаторОперацииПроверкиВозврата()
	
	Возврат "REFUND";
	
КонецФункции

// Формирует идентификатор статуса превышения суммы.
//
// Возвращаемое значение:
//  Строка - идентификатор статуса.
//
Функция ИдентификаторСтатусаПревышение() Экспорт
	
	Возврат "EXCEEDED";
	
КонецФункции

// Формирует идентификатор статуса нет информации.
//
// Возвращаемое значение:
//  Строка - идентификатор статуса.
//
Функция ИдентификаторСтатусаНетИнформации() Экспорт
	
	Возврат "NO_INFO";
	
КонецФункции

// Формирует идентификатор статуса не оплачен.
//
// Возвращаемое значение:
//  Строка - идентификатор статуса.
//
Функция ИдентификаторСтатусаНеОплачен() Экспорт
	
	Возврат "NOT_PAID";
	
КонецФункции

// Формирует идентификатор статуса требуется подтверждение.
//
// Возвращаемое значение:
//  Строка - идентификатор статуса.
//
Функция ИдентификаторСтатусаТребуетсяПодтверждение()
	
	Возврат "CONFIRMATION_REQUIRED";
	
КонецФункции

// Формирует идентификатор статуса ошибка.
//
// Возвращаемое значение:
//  Строка - идентификатор статуса.
//
Функция ИдентификаторСтатусаОшибка()
	
	Возврат "ERROR";
	
КонецФункции

// Формирует идентификатор статуса ожидание.
//
// Возвращаемое значение:
//  Строка - идентификатор статуса.
//
Функция ИдентификаторСтатусаОжидание()
	
	Возврат "PENDING";
	
КонецФункции

// Формирует идентификатор статуса превышен период.
//
// Возвращаемое значение:
//  Строка - идентификатор статуса.
//
Функция ИдентификаторСтатусаПревышенПериод()
	
	Возврат "REPORT_PERIOD_EXCEED";
	
КонецФункции

#КонецОбласти

#Область ПрочиеСлужебныеПроцедурыФункции

// Определяет URL для вызова сервиса с данными макетов Системы быстрых платежей.
//
// Параметры:
//  Операция - Строка - путь к ресурсу;
//
// Возвращаемое значение:
//  Строка - URL операции.
//
Функция URLДанныхМакетов(Операция)
	
	Возврат "https://payment-gateway.1c.ru/resources/templates" + Операция;
	
КонецФункции

#КонецОбласти

#КонецОбласти
