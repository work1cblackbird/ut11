////////////////////////////////////////////////////////////////////////////////
// Модуль "ЗакупкиСервер", содержит процедуры и функции для 
// получения значений реквизитов для подстановки в документы закупки.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ПроцедурыИнициализацииПравилЗакупок

// Возвращает структуру условий закупок по торговому соглашению.
//
// Параметры:
// 	Соглашение - СправочникСсылка.СоглашенияСКлиентами - соглашение,по которому необходимо получить стандартные условия закупок
// 	УчитыватьГруппыСкладов - Булево -
// 	ИсключитьГруппыСкладовДоступныеВЗаказах - Булево -
//
// Возвращаемое значение:
// 	Структура - структура, включающая условия продаж.
//
Функция ПолучитьУсловияЗакупок(Знач Соглашение,
	                           Знач УчитыватьГруппыСкладов=Ложь,
	                           Знач ИсключитьГруппыСкладовДоступныеВЗаказах=Ложь) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоглашениеСПоставщиком.Ссылка             КАК Соглашение,
	|	СоглашениеСПоставщиком.Партнер            КАК Партнер,
	|	СоглашениеСПоставщиком.Контрагент         КАК Контрагент,
	|	СоглашениеСПоставщиком.Организация        КАК Организация,
	|	СоглашениеСПоставщиком.ВидЦеныПоставщика  КАК ВидЦеныПоставщика,
	|	СоглашениеСПоставщиком.Валюта             КАК Валюта,
	|	ВЫБОР
	|		КОГДА СоглашениеСПоставщиком.ИспользуютсяДоговорыКонтрагентов
	|			ТОГДА СоглашениеСПоставщиком.Валюта
	|		ИНАЧЕ СоглашениеСПоставщиком.ВалютаВзаиморасчетов
	|	КОНЕЦ                                     КАК ВалютаВзаиморасчетов,
	|	СоглашениеСПоставщиком.ЦенаВключаетНДС    КАК ЦенаВключаетНДС,
	|	ВЫБОР
	|		КОГДА
	|			НЕ СоглашениеСПоставщиком.Склад.ЭтоГруппа
	|		ТОГДА
	|			СоглашениеСПоставщиком.Склад
	|		КОГДА
	|			СоглашениеСПоставщиком.Склад.ЭтоГруппа
	|			И &УчитыватьГруппыСкладов
	|			И СоглашениеСПоставщиком.Склад.ВыборГруппы В (&ВыборГруппыСкладов)
	|		ТОГДА
	|			СоглашениеСПоставщиком.Склад
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|	КОНЕЦ                                               КАК Склад,
	|	СоглашениеСПоставщиком.ФормаОплаты                  КАК ФормаОплаты,
	|	СоглашениеСПоставщиком.ОплатаВВалюте                КАК ОплатаВВалюте,
	|	СоглашениеСПоставщиком.ГруппаФинансовогоУчета       КАК ГруппаФинансовогоУчета,
	|	СоглашениеСПоставщиком.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	СоглашениеСПоставщиком.СрокПоставки                 КАК СрокПоставки,
	|	СоглашениеСПоставщиком.ХозяйственнаяОперация        КАК ХозяйственнаяОперация,
	|	СоглашениеСПоставщиком.РегистрироватьЦеныПоставщика КАК РегистрироватьЦеныПоставщика,
	|	СоглашениеСПоставщиком.СпособРасчетаВознаграждения  КАК СпособРасчетаВознаграждения,
	|	СоглашениеСПоставщиком.ПроцентВознаграждения        КАК ПроцентВознаграждения,
	|	СоглашениеСПоставщиком.УдержатьВознаграждение       КАК УдержатьВознаграждение,
	|	
	|	СоглашениеСПоставщиком.ИспользуютсяДоговорыКонтрагентов            КАК ИспользуютсяДоговорыКонтрагентов,
	|	СоглашениеСПоставщиком.ПорядокРасчетов                             КАК ПорядокРасчетов,
	|	СоглашениеСПоставщиком.ВозвращатьМногооборотнуюТару                КАК ВозвращатьМногооборотнуюТару,
	|	СоглашениеСПоставщиком.СрокВозвратаМногооборотнойТары              КАК СрокВозвратаМногооборотнойТары,
	|	СоглашениеСПоставщиком.РассчитыватьДатуВозвратаТарыПоКалендарю     КАК РассчитыватьДатуВозвратаТарыПоКалендарю,
	|	СоглашениеСПоставщиком.КалендарьВозвратаТары                       КАК КалендарьВозвратаТары,
	|	СоглашениеСПоставщиком.ТребуетсяЗалогЗаТару                        КАК ТребуетсяЗалогЗаТару,
	|	СоглашениеСПоставщиком.НаправлениеДеятельности                     КАК НаправлениеДеятельности,
	|	СоглашениеСПоставщиком.СрокДоставки                                КАК ДлительностьДоставки
	|
	|ИЗ
	|	Справочник.СоглашенияСПоставщиками КАК СоглашениеСПоставщиком
	|ГДЕ
	|	СоглашениеСПоставщиком.Ссылка = &Соглашение";
	
	Запрос.УстановитьПараметр("Соглашение",             Соглашение);
	Запрос.УстановитьПараметр("ВыборГруппыСкладов",     Справочники.Склады.ВариантыВыбораГруппыСкладов(ИсключитьГруппыСкладовДоступныеВЗаказах));
	Запрос.УстановитьПараметр("УчитыватьГруппыСкладов", УчитыватьГруппыСкладов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	СтруктураРеквизитов = ШаблонУсловияЗакупок();
	ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, Выборка);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСПоставщиками") Тогда
		СтруктураРеквизитов.Вставить("ИспользуютсяДоговорыКонтрагентов", Ложь);
	КонецЕсли;
		
	Возврат СтруктураРеквизитов;
	
КонецФункции

// Возвращает дату последнего этапа по графику.
//
// Параметры:
// 	ДатаДокумента          - Дата - дата, от которой необходимо получить последнюю дату по графику
// 	СоглашениеСПоставщиком - СправочникСсылка.СоглашенияСПоставщиками - 
//
// Возвращаемое значение:
// 	Число - Последняя дата по графику с учетом календаря.
//
Функция ПолучитьПоследнююДатуПоГрафику(Знач ДатаДокумента, Знач СоглашениеСПоставщиком) Экспорт
	
	Если Не ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	МАКСИМУМ(ЭтапыГрафикаОплаты.Сдвиг) КАК Сдвиг,
	|	ЭтапыГрафикаОплаты.Ссылка.Календарь КАК Календарь,
	|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ДатаДокумента, ДЕНЬ, ЕСТЬNULL(МАКСИМУМ(ЭтапыГрафикаОплаты.Сдвиг), 0)), ДЕНЬ) КАК ДатаПлатежа
	|ИЗ
	|	Справочник.СоглашенияСПоставщиками.ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
	|ГДЕ
	|	ЭтапыГрафикаОплаты.Ссылка = &СоглашениеСПоставщиком
	|	И (ЭтапыГрафикаОплаты.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляОплатыПоставщику.КредитСдвиг)
	|		ИЛИ ЭтапыГрафикаОплаты.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляОплатыПоставщику.КредитПослеПоступления))
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭтапыГрафикаОплаты.Ссылка,
	|	ЭтапыГрафикаОплаты.Ссылка.Календарь");
	
	Запрос.УстановитьПараметр("СоглашениеСПоставщиком",  СоглашениеСПоставщиком);
	Запрос.УстановитьПараметр("ДатаДокумента", ДатаДокумента);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Календарь = Выборка.Календарь;
	Если ЗначениеЗаполнено(Календарь) Тогда
		ДатаПлатежа = КалендарныеГрафики.ДатаПоКалендарю(Календарь, ДатаДокумента, Выборка.Сдвиг);
	Иначе
		ДатаПлатежа = Выборка.ДатаПлатежа;
	КонецЕсли;
		
	Возврат ДатаПлатежа;
	
КонецФункции

// Возвращает структуру условий закупок по партнеру.
//
// Параметры:
//  Партнер           - СправочникСсылка.Партнеры - партнер, для которого необходимо получить условия закупок,
//  ПараметрыОтбора   - Структура - содержит параметры отбора соглашения.
//
// Возвращаемое значение:
//  Структура - структура, включающая условия закупок.
//
Функция ПолучитьУсловияЗакупокПоУмолчанию(Знач Партнер, Знач ПараметрыОтбора = Неопределено) Экспорт
	
	ВсеПараметрыОтбора = Новый Структура();
	ВсеПараметрыОтбора.Вставить("ТолькоДействующее",                       Истина);
	ВсеПараметрыОтбора.Вставить("УчитыватьГруппыСкладов",                  Ложь);
	ВсеПараметрыОтбора.Вставить("ИсключитьГруппыСкладовДоступныеВЗаказах", Ложь);
	ВсеПараметрыОтбора.Вставить("ХозяйственныеОперации",                   Неопределено);
	ВсеПараметрыОтбора.Вставить("ВыбранноеСоглашение",   Справочники.СоглашенияСПоставщиками.ПустаяСсылка());
	ВсеПараметрыОтбора.Вставить("ИспользуютсяДоговорыКонтрагентов",        Неопределено);
	
	Если ПараметрыОтбора <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ВсеПараметрыОтбора, ПараметрыОтбора);
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	СоглашениеСПоставщиком.Ссылка                       КАК Соглашение,
	|	СоглашениеСПоставщиком.Партнер                      КАК Партнер,
	|	СоглашениеСПоставщиком.Контрагент                   КАК Контрагент,
	|	СоглашениеСПоставщиком.Организация                  КАК Организация,
	|	СоглашениеСПоставщиком.ВидЦеныПоставщика            КАК ВидЦеныПоставщика,
	|	СоглашениеСПоставщиком.Валюта                       КАК Валюта,
	|	ВЫБОР 
	|		КОГДА СоглашениеСПоставщиком.ИспользуютсяДоговорыКонтрагентов
	|			ТОГДА СоглашениеСПоставщиком.Валюта
	|		ИНАЧЕ СоглашениеСПоставщиком.ВалютаВзаиморасчетов
	|	КОНЕЦ                                               КАК ВалютаВзаиморасчетов,
	|	СоглашениеСПоставщиком.ЦенаВключаетНДС              КАК ЦенаВключаетНДС,
	|	СоглашениеСПоставщиком.ХозяйственнаяОперация        КАК ХозяйственнаяОперация,
	|	СоглашениеСПоставщиком.РегистрироватьЦеныПоставщика КАК РегистрироватьЦеныПоставщика,
	|	ВЫБОР
	|		КОГДА
	|			НЕ СоглашениеСПоставщиком.Склад.ЭтоГруппа
	|		ТОГДА
	|			СоглашениеСПоставщиком.Склад
	|		КОГДА
	|			СоглашениеСПоставщиком.Склад.ЭтоГруппа
	|			И &УчитыватьГруппыСкладов
	|			И СоглашениеСПоставщиком.Склад.ВыборГруппы В (&ВыборГруппыСкладов)
	|		ТОГДА
	|			СоглашениеСПоставщиком.Склад
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|	КОНЕЦ                                               КАК Склад,
	|	СоглашениеСПоставщиком.ФормаОплаты                  КАК ФормаОплаты,
	|	СоглашениеСПоставщиком.ОплатаВВалюте                КАК ОплатаВВалюте,
	|	СоглашениеСПоставщиком.СрокПоставки                 КАК СрокПоставки,
	|	СоглашениеСПоставщиком.ГруппаФинансовогоУчета       КАК ГруппаФинансовогоУчета,
	|	СоглашениеСПоставщиком.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	СоглашениеСПоставщиком.СпособРасчетаВознаграждения  КАК СпособРасчетаВознаграждения,
	|	СоглашениеСПоставщиком.ПроцентВознаграждения        КАК ПроцентВознаграждения,
	|	СоглашениеСПоставщиком.УдержатьВознаграждение       КАК УдержатьВознаграждение,
	|	
	|	СоглашениеСПоставщиком.ИспользуютсяДоговорыКонтрагентов КАК ИспользуютсяДоговорыКонтрагентов,
	|	СоглашениеСПоставщиком.ПорядокРасчетов                  КАК ПорядокРасчетов,
	|	СоглашениеСПоставщиком.ВозвращатьМногооборотнуюТару                КАК ВозвращатьМногооборотнуюТару,
	|	СоглашениеСПоставщиком.СрокВозвратаМногооборотнойТары              КАК СрокВозвратаМногооборотнойТары,
	|	СоглашениеСПоставщиком.РассчитыватьДатуВозвратаТарыПоКалендарю     КАК РассчитыватьДатуВозвратаТарыПоКалендарю,
	|	СоглашениеСПоставщиком.КалендарьВозвратаТары                       КАК КалендарьВозвратаТары,
	|	СоглашениеСПоставщиком.ТребуетсяЗалогЗаТару                        КАК ТребуетсяЗалогЗаТару,
	|	СоглашениеСПоставщиком.НаправлениеДеятельности                     КАК НаправлениеДеятельности,
	|	СоглашениеСПоставщиком.МинимальнаяСуммаЗаказа                      КАК МинимальнаяСуммаЗаказа
	|ИЗ
	|	Справочник.СоглашенияСПоставщиками КАК СоглашениеСПоставщиком
	|ГДЕ
	|	НЕ СоглашениеСПоставщиком.ПометкаУдаления
	|	И &ИспользоватьСоглашенияСПоставщиками
	|	И ((НЕ &ОтборХозяйственныеОперации
	|		И СоглашениеСПоставщиком.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОказаниеАгентскихУслуг)
	|		И СоглашениеСПоставщиком.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаХранениеСПравомПродажи))
	|			ИЛИ СоглашениеСПоставщиком.ХозяйственнаяОперация В (&ХозяйственныеОперации)) И
	|		&УсловиеИспользуютсяДоговорыКонтрагентов И
	|		&УсловиеСоглашениеСПоставщикомСтатус И
	|	СоглашениеСПоставщиком.Партнер = &Партнер;
	|
	|////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	СоглашениеСПоставщиком.Ссылка                       КАК Соглашение,
	|	СоглашениеСПоставщиком.Партнер                      КАК Партнер,
	|	СоглашениеСПоставщиком.Контрагент                   КАК Контрагент,
	|	СоглашениеСПоставщиком.Организация                  КАК Организация,
	|	СоглашениеСПоставщиком.Валюта                       КАК Валюта,
	|	ВЫБОР 
	|		КОГДА СоглашениеСПоставщиком.ИспользуютсяДоговорыКонтрагентов
	|			ТОГДА СоглашениеСПоставщиком.Валюта
	|		ИНАЧЕ СоглашениеСПоставщиком.ВалютаВзаиморасчетов
	|	КОНЕЦ                                               КАК ВалютаВзаиморасчетов,
	|	СоглашениеСПоставщиком.ЦенаВключаетНДС              КАК ЦенаВключаетНДС,
	|	СоглашениеСПоставщиком.ХозяйственнаяОперация        КАК ХозяйственнаяОперация,
	|	СоглашениеСПоставщиком.ВидЦеныПоставщика            КАК ВидЦеныПоставщика,
	|	СоглашениеСПоставщиком.РегистрироватьЦеныПоставщика КАК РегистрироватьЦеныПоставщика,
	|	ВЫБОР
	|		КОГДА
	|			НЕ СоглашениеСПоставщиком.Склад.ЭтоГруппа
	|		ТОГДА
	|			СоглашениеСПоставщиком.Склад
	|		КОГДА
	|			СоглашениеСПоставщиком.Склад.ЭтоГруппа
	|			И &УчитыватьГруппыСкладов
	|			И СоглашениеСПоставщиком.Склад.ВыборГруппы В (&ВыборГруппыСкладов)
	|		ТОГДА
	|			СоглашениеСПоставщиком.Склад
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|	КОНЕЦ                                               КАК Склад,
	|	СоглашениеСПоставщиком.ФормаОплаты                  КАК ФормаОплаты,
	|	СоглашениеСПоставщиком.ОплатаВВалюте                КАК ОплатаВВалюте,
	|	СоглашениеСПоставщиком.СрокПоставки                 КАК СрокПоставки,
	|	СоглашениеСПоставщиком.ГруппаФинансовогоУчета       КАК ГруппаФинансовогоУчета,
	|	СоглашениеСПоставщиком.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	СоглашениеСПоставщиком.СпособРасчетаВознаграждения  КАК СпособРасчетаВознаграждения,
	|	СоглашениеСПоставщиком.ПроцентВознаграждения        КАК ПроцентВознаграждения,
	|	СоглашениеСПоставщиком.УдержатьВознаграждение       КАК УдержатьВознаграждение,
	|	
	|	СоглашениеСПоставщиком.ИспользуютсяДоговорыКонтрагентов КАК ИспользуютсяДоговорыКонтрагентов,
	|	СоглашениеСПоставщиком.ПорядокРасчетов                  КАК ПорядокРасчетов,
	|	СоглашениеСПоставщиком.ВозвращатьМногооборотнуюТару                КАК ВозвращатьМногооборотнуюТару,
	|	СоглашениеСПоставщиком.СрокВозвратаМногооборотнойТары              КАК СрокВозвратаМногооборотнойТары,
	|	СоглашениеСПоставщиком.РассчитыватьДатуВозвратаТарыПоКалендарю     КАК РассчитыватьДатуВозвратаТарыПоКалендарю,
	|	СоглашениеСПоставщиком.КалендарьВозвратаТары                       КАК КалендарьВозвратаТары,
	|	СоглашениеСПоставщиком.ТребуетсяЗалогЗаТару                        КАК ТребуетсяЗалогЗаТару,
	|	СоглашениеСПоставщиком.НаправлениеДеятельности                     КАК НаправлениеДеятельности,
	|	СоглашениеСПоставщиком.МинимальнаяСуммаЗаказа                      КАК МинимальнаяСуммаЗаказа
	|ИЗ
	|	Справочник.СоглашенияСПоставщиками КАК СоглашениеСПоставщиком
	|ГДЕ
	|	НЕ СоглашениеСПоставщиком.ПометкаУдаления
	|	И &ИспользоватьСоглашенияСПоставщиками
	|	И ((НЕ &ОтборХозяйственныеОперации И СоглашениеСПоставщиком.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОказаниеАгентскихУслуг))
	|		ИЛИ СоглашениеСПоставщиком.ХозяйственнаяОперация В (&ХозяйственныеОперации))
	|	И СоглашениеСПоставщиком.Ссылка = &ВыбранноеСоглашение И
	|	&УсловиеИспользуютсяДоговорыКонтрагентов И
	|	&УсловиеСоглашениеСПоставщикомСтатус И
	|	СоглашениеСПоставщиком.Партнер = &Партнер
	|";

	Если ВсеПараметрыОтбора.ТолькоДействующее Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеСоглашениеСПоставщикомСтатус", "СоглашениеСПоставщиком.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСПоставщиками.Действует)");
	Иначе	
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеСоглашениеСПоставщикомСтатус", "ИСТИНА");
	КонецЕсли;	

	Если ВсеПараметрыОтбора.ИспользуютсяДоговорыКонтрагентов = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеИспользуютсяДоговорыКонтрагентов", "ИСТИНА");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеИспользуютсяДоговорыКонтрагентов", "СоглашениеСПоставщиком.ИспользуютсяДоговорыКонтрагентов = &ИспользуютсяДоговорыКонтрагентов");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Партнер",                             Партнер);
	Запрос.УстановитьПараметр("ВыборГруппыСкладов",                  Справочники.Склады.ВариантыВыбораГруппыСкладов(ВсеПараметрыОтбора.ИсключитьГруппыСкладовДоступныеВЗаказах));
	Запрос.УстановитьПараметр("УчитыватьГруппыСкладов",              ВсеПараметрыОтбора.УчитыватьГруппыСкладов);
	Запрос.УстановитьПараметр("ОтборХозяйственныеОперации",          ВсеПараметрыОтбора.ХозяйственныеОперации <> Неопределено);
	Запрос.УстановитьПараметр("ХозяйственныеОперации",               ВсеПараметрыОтбора.ХозяйственныеОперации);
	Запрос.УстановитьПараметр("ВыбранноеСоглашение",                 ВсеПараметрыОтбора.ВыбранноеСоглашение);
	Запрос.УстановитьПараметр("ИспользоватьСоглашенияСПоставщиками", ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСПоставщиками"));
	Запрос.УстановитьПараметр("ИспользуютсяДоговорыКонтрагентов",    ВсеПараметрыОтбора.ИспользуютсяДоговорыКонтрагентов);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Если РезультатЗапроса[0].Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса[0].Выбрать();
	
	// Если в выборке одно соглашение - возвращаем его
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
	ИначеЕсли Выборка.Количество() > 1 Тогда
		Если НЕ РезультатЗапроса[1].Пустой() Тогда
			Выборка = РезультатЗапроса[1].Выбрать();
			Выборка.Следующий();
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураРеквизитов = ШаблонУсловияЗакупок();
	ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, Выборка);
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

Функция ХозяйственныеОперацииПоОсновной(ОсновнаяХозяйственнаяОперация) Экспорт
	
	ИспользоватьТоварыВПутиОтПоставщиков  = ПолучитьФункциональнуюОпцию("ИспользоватьТоварыВПутиОтПоставщиков");
	ИспользоватьНеотфактурованныеПоставки = ПолучитьФункциональнуюОпцию("ИспользоватьНеотфактурованныеПоставки");
	ИспользоватьВвозТоваровИзТаможенногоСоюза = ПолучитьФункциональнуюОпцию("ИспользоватьВвозТоваровИзТаможенногоСоюза");
	
	ХозОперации = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОсновнаяХозяйственнаяОперация);
	Если ОсновнаяХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика Тогда
		Если ИспользоватьТоварыВПутиОтПоставщиков Тогда
			ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаТоварыВПути);
			ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаПоступлениеИзТоваровВПути);
		КонецЕсли;
		Если ИспользоватьНеотфактурованныеПоставки Тогда
			ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаФактуровкаПоставки);
			ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаНеотфактурованнаяПоставка);
		КонецЕсли;
	ИначеЕсли ОсновнаяХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС Тогда
		Если ИспользоватьТоварыВПутиОтПоставщиков Тогда
			ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСТоварыВПути);
			ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСПоступлениеИзТоваровВПути);
		КонецЕсли;
		Если ИспользоватьНеотфактурованныеПоставки Тогда
			ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСФактуровкаПоставки);
			ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСНеотфактурованнаяПоставка);
		КонецЕсли;
	ИначеЕсли ОсновнаяХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту Тогда
		Если ИспользоватьТоварыВПутиОтПоставщиков Тогда
			ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпортуТоварыВПути);
			ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпортуПоступлениеИзТоваровВПути);
		КонецЕсли;
	ИначеЕсли ОсновнаяХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПроизводствоУПереработчика2_5 Тогда
		Если ИспользоватьВвозТоваровИзТаможенногоСоюза Тогда
			ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ПроизводствоУПереработчикаВСтранахЕАЭС2_5);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ХозОперации;
	
КонецФункции

// Возвращает хозяйственные операции, которые могут использоваться в документе. Если передать пустую ссылку на
// договор или соглашение, то будет возвращено несколько хозяйственных операций, которые могут быть использованы.
//
// Параметры:
//	ПолноеИмяДокумента	 - Строка 									 - имя документа, для которого нужно получить список хозяйственных операций.
//	Соглашение			 - СправочникСсылка.СоглашенияСПоставщиками	 - соглашение, которое используется в документе.
//	Договор				 - СправочникСсылка.ДоговорыКонтрагентов     - договор, который используется в документе.
//
// Возвращаемое значение:
//	Массив - массив элементов с типом ПеречислениеСсылка.ХозяйственныеОперации.
//
Функция ХозяйственныеОперацииРаздельнойЗакупки(ПолноеИмяДокумента, Соглашение = Неопределено, Договор = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СоглашенияСПоставщиками.ХозяйственнаяОперация КАК ХозяйственнаяОперация
	|ПОМЕСТИТЬ СоглашенияСПоставщиками
	|ИЗ
	|	Справочник.СоглашенияСПоставщиками КАК СоглашенияСПоставщиками
	|ГДЕ
	|	СоглашенияСПоставщиками.Ссылка = &Соглашение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВложенныйЗапрос.ВариантОформленияЗакупок) КАК ВариантОформленияЗакупок,
	|	МАКСИМУМ(ВложенныйЗапрос.ХозяйственнаяОперация)    КАК ХозяйственнаяОперация
	|ПОМЕСТИТЬ ДанныеПараметров
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДоговорыКонтрагентов.ВариантОформленияЗакупок КАК ВариантОформленияЗакупок,
	|		ЕСТЬNULL(ДоговорыКонтрагентов.ХозяйственнаяОперация, СоглашенияСПоставщиками.ХозяйственнаяОперация) КАК ХозяйственнаяОперация
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ДоговорыКонтрагентов.ВариантОформленияЗакупок КАК ВариантОформленияЗакупок,
	|			ДоговорыКонтрагентов.ХозяйственнаяОперация    КАК ХозяйственнаяОперация
	|		ИЗ
	|			Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ГДЕ
	|			ДоговорыКонтрагентов.Ссылка = &Договор) КАК ДоговорыКонтрагентов
	|			ПОЛНОЕ СОЕДИНЕНИЕ СоглашенияСПоставщиками КАК СоглашенияСПоставщиками
	|			ПО (ИСТИНА)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		NULL,
	|		NULL) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозяйственныеОперации.Ссылка КАК ХозОперация
	|ПОМЕСТИТЬ ХозОперацииПоСоглашению
	|ИЗ
	|	ДанныеПараметров КАК ДанныеПараметров,
	|	Перечисление.ХозяйственныеОперации КАК ХозяйственныеОперации
	|ГДЕ
	|	ХозяйственныеОперации.Ссылка В(&ХозОперацииЗакупкаУПоставщика)
	|	И (ДанныеПараметров.ХозяйственнаяОперация В (&ХозОперацииЗакупкаУПоставщика)
	|			ИЛИ ДанныеПараметров.ХозяйственнаяОперация ЕСТЬ NULL)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозяйственныеОперации.Ссылка
	|ИЗ
	|	Перечисление.ХозяйственныеОперации КАК ХозяйственныеОперации,
	|	ДанныеПараметров КАК ДанныеПараметров
	|ГДЕ
	|	ХозяйственныеОперации.Ссылка В(&ХозОперацииЗакупкаПоИмпорту)
	|	И (ДанныеПараметров.ХозяйственнаяОперация В (&ХозОперацииЗакупкаПоИмпорту)
	|			ИЛИ ДанныеПараметров.ХозяйственнаяОперация ЕСТЬ NULL)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозяйственныеОперации.Ссылка
	|ИЗ
	|	Перечисление.ХозяйственныеОперации КАК ХозяйственныеОперации,
	|	ДанныеПараметров КАК ДанныеПараметров
	|ГДЕ
	|	ХозяйственныеОперации.Ссылка В(&ХозОперацииЗакупкаВСтранахЕАЭС)
	|	И (ДанныеПараметров.ХозяйственнаяОперация В (&ХозОперацииЗакупкаВСтранахЕАЭС)
	|			ИЛИ ДанныеПараметров.ХозяйственнаяОперация ЕСТЬ NULL)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозяйственныеОперации.Ссылка
	|ИЗ
	|	Перечисление.ХозяйственныеОперации КАК ХозяйственныеОперации,
	|	ДанныеПараметров КАК ДанныеПараметров
	|ГДЕ
	|	ХозяйственныеОперации.Ссылка В(&ХозОперацииПриемНаКомиссию)
	|	И (ДанныеПараметров.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию)
	|			ИЛИ ДанныеПараметров.ХозяйственнаяОперация ЕСТЬ NULL)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозяйственныеОперации.Ссылка
	|ИЗ
	|	Перечисление.ХозяйственныеОперации КАК ХозяйственныеОперации,
	|	ДанныеПараметров КАК ДанныеПараметров
	|ГДЕ
	|	ХозяйственныеОперации.Ссылка В(&ХозОперацииПриемНаОтветственноеХранение)
	|	И (ДанныеПараметров.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаХранениеСПравомПродажи)
	|			ИЛИ ДанныеПараметров.ХозяйственнаяОперация ЕСТЬ NULL)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозяйственныеОперации.Ссылка КАК ХозОперация
	|ПОМЕСТИТЬ ХозОперацииПоДоговору
	|ИЗ
	|	ДанныеПараметров КАК ДанныеПараметров,
	|	Перечисление.ХозяйственныеОперации КАК ХозяйственныеОперации
	|ГДЕ
	|	ХозяйственныеОперации.Ссылка В(&ХозОперацииНеотфактурованныеПоставки)
	|	И (ДанныеПараметров.ВариантОформленияЗакупок В (
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияЗакупок.НеотфактурованныеПоставкиТоваров),
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияЗакупок.НеотфактурованныеПоставкиТоваровИУслуг))
	|		ИЛИ ДанныеПараметров.ВариантОформленияЗакупок ЕСТЬ NULL)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозяйственныеОперации.Ссылка
	|ИЗ
	|	ДанныеПараметров КАК ДанныеПараметров,
	|	Перечисление.ХозяйственныеОперации КАК ХозяйственныеОперации
	|ГДЕ
	|	ХозяйственныеОперации.Ссылка В(&ХозОперацииТоварыВПути)
	|	И (ДанныеПараметров.ВариантОформленияЗакупок = ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияЗакупок.ТоварыВПути)
	|			ИЛИ ДанныеПараметров.ВариантОформленияЗакупок ЕСТЬ NULL)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозяйственныеОперации.Ссылка
	|ИЗ
	|	ДанныеПараметров КАК ДанныеПараметров,
	|	Перечисление.ХозяйственныеОперации КАК ХозяйственныеОперации
	|ГДЕ
	|	ХозяйственныеОперации.Ссылка В(&ХозОперацииНеРазделятьОформлениеЗакупок)
	|	И (ДанныеПараметров.ВариантОформленияЗакупок = ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияЗакупок.НеРазделять)
	|			ИЛИ ДанныеПараметров.ВариантОформленияЗакупок ЕСТЬ NULL)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозОперацииПоДоговору.ХозОперация         КАК ХозОперация,
	|	ХозОперацииПоДоговору.ХозОперация.Порядок КАК Порядок,
	|	ВЫБОР
	|		КОГДА ХозОперацииПоДоговору.ХозОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика)
	|			ТОГДА 0
	|		КОГДА ХозОперацииПоДоговору.ХозОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо)
	|				ИЛИ ХозОперацииПоДоговору.ХозОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет)
	|			ТОГДА 2
	|		КОГДА ХозОперацииПоДоговору.ХозОперация В(&ХозОперацииЗакупкаУПоставщика)
	|			ТОГДА 1
	|		КОГДА ХозОперацииПоДоговору.ХозОперация В(&ХозОперацииЗакупкаПоИмпорту)
	|			ТОГДА 3
	|		КОГДА ХозОперацииПоДоговору.ХозОперация В(&ХозОперацииЗакупкаВСтранахЕАЭС)
	|			ТОГДА 4
	|		КОГДА ХозОперацииПоДоговору.ХозОперация В(&ХозОперацииПриемНаКомиссию)
	|			ТОГДА 5
	|		ИНАЧЕ 6
	|	КОНЕЦ                                     КАК Номер
	|ИЗ
	|	ХозОперацииПоДоговору КАК ХозОперацииПоДоговору
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ХозОперацииПоСоглашению.ХозОперация         КАК ХозОперация,
	|	ХозОперацииПоСоглашению.ХозОперация.Порядок КАК Порядок,
	|	ВЫБОР
	|		КОГДА ХозОперацииПоСоглашению.ХозОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика)
	|			ТОГДА 0
	|		КОГДА ХозОперацииПоСоглашению.ХозОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо)
	|				ИЛИ ХозОперацииПоСоглашению.ХозОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет)
	|			ТОГДА 2
	|		КОГДА ХозОперацииПоСоглашению.ХозОперация В(&ХозОперацииЗакупкаУПоставщика)
	|			ТОГДА 1
	|		КОГДА ХозОперацииПоСоглашению.ХозОперация В(&ХозОперацииЗакупкаПоИмпорту)
	|			ТОГДА 3
	|		КОГДА ХозОперацииПоСоглашению.ХозОперация В(&ХозОперацииЗакупкаВСтранахЕАЭС)
	|			ТОГДА 4
	|		КОГДА ХозОперацииПоСоглашению.ХозОперация В(&ХозОперацииПриемНаКомиссию)
	|			ТОГДА 5
	|		ИНАЧЕ 6
	|	КОНЕЦ                                       КАК Номер
	|ИЗ
	|	ХозОперацииПоСоглашению КАК ХозОперацииПоСоглашению
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номер,
	|	Порядок";
	
	ПараметрПоУмолчанию = Новый Массив;
	
	Запрос.УстановитьПараметр("Договор",    Договор);
	Запрос.УстановитьПараметр("Соглашение", Соглашение);
	
	Запрос.УстановитьПараметр("ХозОперацииЗакупкаУПоставщика",           ПараметрПоУмолчанию);
	Запрос.УстановитьПараметр("ХозОперацииЗакупкаПоИмпорту",             ПараметрПоУмолчанию);
	Запрос.УстановитьПараметр("ХозОперацииПриемНаКомиссию",              ПараметрПоУмолчанию);
	Запрос.УстановитьПараметр("ХозОперацииПриемНаОтветственноеХранение", ПараметрПоУмолчанию);
	Запрос.УстановитьПараметр("ХозОперацииЗакупкаВСтранахЕАЭС",          ПараметрПоУмолчанию);
	Запрос.УстановитьПараметр("ХозОперацииТоварыВПути",                  ПараметрПоУмолчанию);
	Запрос.УстановитьПараметр("ХозОперацииНеотфактурованныеПоставки",    ПараметрПоУмолчанию);
	Запрос.УстановитьПараметр("ХозОперацииНеРазделятьОформлениеЗакупок", ПараметрПоУмолчанию);
	
	МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяДокумента);
	МенеджерДокумента.ЗаполнитьПараметрыХозяйственныхОпераций(Запрос.Параметры);
	
	УстановитьПривилегированныйРежим(Истина);
	ХозяйственныеОперацииРаздельнойЗакупки = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ХозОперация");
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ХозяйственныеОперацииРаздельнойЗакупки;
	
КонецФункции

// Заполняет параметры запроса, выполняющего упорядочивание хозяйственных операциях.
//
// Параметры:
//	ПараметрыЗапроса - Структура - параметры запроса, которые нужно инициализировать:
//		* ХозОперацииЗакупкаУПоставщика				 - Массив, Неопределено - массив элементов с типом
//														ПеречислениеСсылка.ХозяйственныеОперации.
//		* ХозОперацииЗакупкаПоИмпорту				 - Массив, Неопределено - массив элементов с типом
//														ПеречислениеСсылка.ХозяйственныеОперации.
//		* ХозОперацииЗакупкаВСтранахЕАЭС			 - Массив, Неопределено - массив элементов с типом
//														ПеречислениеСсылка.ХозяйственныеОперации.
//		* ХозОперацииПриемНаКомиссию				 - Массив, Неопределено - массив элементов с типом
//														ПеречислениеСсылка.ХозяйственныеОперации.
//		* ХозОперацииТоварыВПути					 - Массив, Неопределено - массив элементов с типом
//														ПеречислениеСсылка.ХозяйственныеОперации.
//		* ХозОперацииНеотфактурованныеПоставки		 - Массив, Неопределено - массив элементов с типом
//														ПеречислениеСсылка.ХозяйственныеОперации.
//		* ХозОперацииНеРазделятьОформлениеЗакупок	 - Массив, Неопределено - массив элементов с типом
//														ПеречислениеСсылка.ХозяйственныеОперации.
//
Процедура ЗаполнитьПараметрыЗапросаУпорядочиванияХозяйсвенныхОпераций(ПараметрыЗапроса) Экспорт
	
	ИспользоватьИмпортныеЗакупки = ПолучитьФункциональнуюОпцию("ИспользоватьИмпортныеЗакупки");
	ИспользоватьВвозТоваровИзТаможенногоСоюза = ПолучитьФункциональнуюОпцию("ИспользоватьВвозТоваровИзТаможенногоСоюза");
	ИспользоватьКомиссиюПриЗакупках = ПолучитьФункциональнуюОпцию("ИспользоватьКомиссиюПриЗакупках");
	ИспользоватьТоварыВПутиОтПоставщиков = ПолучитьФункциональнуюОпцию("ИспользоватьТоварыВПутиОтПоставщиков");
	ИспользоватьНеотфактурованныеПоставки = ПолучитьФункциональнуюОпцию("ИспользоватьНеотфактурованныеПоставки");
	ИспользоватьУправленческуюОрганизацию = ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюОрганизацию");
	
	ХозОперацииЗакупкаУПоставщика = Новый Массив;
	ХозОперацииЗакупкаУПоставщика.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
	ХозОперацииЗакупкаУПоставщика.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо);
	
	Если ИспользоватьУправленческуюОрганизацию Тогда
		ХозОперацииЗакупкаУПоставщика.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет);
	КонецЕсли;
	
	Если ИспользоватьТоварыВПутиОтПоставщиков Тогда
		ХозОперацииЗакупкаУПоставщика.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаТоварыВПути);
	КонецЕсли;
	
	Если ИспользоватьНеотфактурованныеПоставки Тогда
		ХозОперацииЗакупкаУПоставщика.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаФактуровкаПоставки);
	КонецЕсли;
	
	ХозОперацииЗакупкаПоИмпорту = Новый Массив;
	Если ИспользоватьИмпортныеЗакупки Тогда
		ХозОперацииЗакупкаПоИмпорту.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту);
		
		Если ИспользоватьТоварыВПутиОтПоставщиков Тогда
			ХозОперацииЗакупкаПоИмпорту.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпортуТоварыВПути);
		КонецЕсли;
	КонецЕсли;
	
	ХозОперацииЗакупкаВСтранахЕАЭС = Новый Массив;
	Если ИспользоватьВвозТоваровИзТаможенногоСоюза Тогда
		ХозОперацииЗакупкаВСтранахЕАЭС.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС);
		
		Если ИспользоватьТоварыВПутиОтПоставщиков Тогда
			ХозОперацииЗакупкаВСтранахЕАЭС.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСТоварыВПути);
		КонецЕсли;
		
		Если ИспользоватьНеотфактурованныеПоставки Тогда
			ХозОперацииЗакупкаВСтранахЕАЭС.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСФактуровкаПоставки);
		КонецЕсли;
	КонецЕсли;
	
	ХозОперацииПриемНаКомиссию = Новый Массив;
	Если ИспользоватьКомиссиюПриЗакупках Тогда
		ХозОперацииПриемНаКомиссию.Добавить(Перечисления.ХозяйственныеОперации.ПриемНаКомиссию);
	КонецЕсли;
	
	ХозОперацииТоварыВПути = Новый Массив;
	Если ИспользоватьТоварыВПутиОтПоставщиков Тогда
		ХозОперацииТоварыВПути.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаТоварыВПути);
		
		Если ИспользоватьИмпортныеЗакупки Тогда
			ХозОперацииТоварыВПути.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпортуТоварыВПути);
		КонецЕсли;
		Если ИспользоватьВвозТоваровИзТаможенногоСоюза Тогда
			ХозОперацииТоварыВПути.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСТоварыВПути);
		КонецЕсли;
	КонецЕсли;
	
	ХозОперацииНеотфактурованныеПоставки = Новый Массив;
	Если ИспользоватьНеотфактурованныеПоставки Тогда
		ХозОперацииНеотфактурованныеПоставки.Добавить(
			Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаФактуровкаПоставки);
		
		Если ИспользоватьВвозТоваровИзТаможенногоСоюза Тогда
			ХозОперацииНеотфактурованныеПоставки.Добавить(
				Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСФактуровкаПоставки);
		КонецЕсли;
	КонецЕсли;
	
	ХозОперацииНеРазделятьОформлениеЗакупок = Новый Массив;
	ХозОперацииНеРазделятьОформлениеЗакупок.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
	ХозОперацииНеРазделятьОформлениеЗакупок.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо);
	
	Если ИспользоватьУправленческуюОрганизацию Тогда
		ХозОперацииНеРазделятьОформлениеЗакупок.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет);
	КонецЕсли;
	
	Если ИспользоватьКомиссиюПриЗакупках Тогда
		ХозОперацииНеРазделятьОформлениеЗакупок.Добавить(Перечисления.ХозяйственныеОперации.ПриемНаКомиссию);
	КонецЕсли;
	
	Если ИспользоватьИмпортныеЗакупки Тогда
		ХозОперацииНеРазделятьОформлениеЗакупок.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту);
	КонецЕсли;
	Если ИспользоватьВвозТоваровИзТаможенногоСоюза Тогда
		ХозОперацииНеРазделятьОформлениеЗакупок.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС);
	КонецЕсли;
	
	ПараметрыЗапроса.ХозОперацииЗакупкаУПоставщика           = ХозОперацииЗакупкаУПоставщика;
	ПараметрыЗапроса.ХозОперацииЗакупкаПоИмпорту             = ХозОперацииЗакупкаПоИмпорту;
	ПараметрыЗапроса.ХозОперацииПриемНаКомиссию              = ХозОперацииПриемНаКомиссию;
	ПараметрыЗапроса.ХозОперацииЗакупкаВСтранахЕАЭС          = ХозОперацииЗакупкаВСтранахЕАЭС;
	ПараметрыЗапроса.ХозОперацииТоварыВПути                  = ХозОперацииТоварыВПути;
	ПараметрыЗапроса.ХозОперацииНеотфактурованныеПоставки    = ХозОперацииНеотфактурованныеПоставки;
	ПараметрыЗапроса.ХозОперацииНеРазделятьОформлениеЗакупок = ХозОперацииНеРазделятьОформлениеЗакупок;

КонецПроцедуры

// Возвращает полный список хозяйственных операций разделенной закупки
// 
// Возвращаемое значение:
//	Массив - массив элементов с типом ПеречислениеСсылка.ХозяйственныеОперации.
//
Функция ХозяйственныеОперацииРаздельнойЗакупкиБезОтборов() Экспорт
	
	Массив = Новый Массив;
	
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаТоварыВПути);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаФактуровкаПоставки);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаПоступлениеИзТоваровВПути);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаНеотфактурованнаяПоставка);
	
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСТоварыВПути);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСФактуровкаПоставки);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСПоступлениеИзТоваровВПути);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСНеотфактурованнаяПоставка);
	
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпортуТоварыВПути);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпортуПоступлениеИзТоваровВПути);
	
	Возврат Массив;
	
КонецФункции

// Возвращает полный список хозяйственных операций для таможенной декларации по импорту.
// 
// Возвращаемое значение:
//	Массив - массив элементов с типом ПеречислениеСсылка.ХозяйственныеОперации.
//
Функция ХозяйственныеОперацииТаможеннойДекларацииИмпорт() Экспорт
	
	Массив = Новый Массив;
	
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ОформлениеГТДБрокером);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ОформлениеГТДСамостоятельно);
	
	Возврат Массив;
	
КонецФункции

// Возвращает полный список поддерживаемых хозяйственных операций для агентской закупки под принципала
// 
// Возвращаемое значение:
//  Массив - Массив из ПеречислениеСсылка.ХозяйственныеОперации.
//
Функция ХозяйственныеОперацииДляАгентскойЗакупкиПодПринципала() Экспорт
	Массив = Новый Массив;
	
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС);
	
	Возврат Массив;
КонецФункции

// Возвращает хозяйственную операцию, используемую при неразделенном варианте оформления закупок.
//
// Параметры:
//	ХозяйственнаяОперацияРаздельнойЗакупки - ПеречислениеСсылка.ХозяйственныеОперации - хозяйственная операция документа.
//
// Возвращаемое значение:
//	ПеречислениеСсылка.ХозяйственныеОперации - хозяйственная операция, используемая при неразделенном варианте 
//		оформления закупок.
//
Функция ОсновнаяХозяйственнаяОперацияРаздельнойЗакупки(ХозяйственнаяОперацияРаздельнойЗакупки) Экспорт
	
	ИспользоватьИмпортныеЗакупки              = ПолучитьФункциональнуюОпцию("ИспользоватьИмпортныеЗакупки");
	ИспользоватьВвозТоваровИзТаможенногоСоюза = ПолучитьФункциональнуюОпцию("ИспользоватьВвозТоваровИзТаможенногоСоюза");
	ИспользоватьТоварыВПутиОтПоставщиков      = ПолучитьФункциональнуюОпцию("ИспользоватьТоварыВПутиОтПоставщиков");
	ИспользоватьНеотфактурованныеПоставки     = ПолучитьФункциональнуюОпцию("ИспользоватьНеотфактурованныеПоставки");
	
	Если ИспользоватьТоварыВПутиОтПоставщиков
		Или ИспользоватьНеотфактурованныеПоставки Тогда
		
		ХозяйственныеОперацииЗакупки = Новый Массив;
		ХозяйственныеОперацииЗакупки.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
		
		ХозяйственныеОперацииИмпорта = Новый Массив;
		ХозяйственныеОперацииИмпорта.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту);
		
		ХозяйственныеОперацииВвозИзЕАЭС = Новый Массив;
		ХозяйственныеОперацииВвозИзЕАЭС.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС);
		
		ХозяйственныеОперацииЗакупки.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаПоступлениеИзТоваровВПути);
		ХозяйственныеОперацииЗакупки.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаТоварыВПути);
		ХозяйственныеОперацииИмпорта.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпортуПоступлениеИзТоваровВПути);
		ХозяйственныеОперацииИмпорта.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпортуТоварыВПути);
		ХозяйственныеОперацииВвозИзЕАЭС.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСПоступлениеИзТоваровВПути);
		ХозяйственныеОперацииВвозИзЕАЭС.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСТоварыВПути);
	
		ХозяйственныеОперацииЗакупки.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаНеотфактурованнаяПоставка);
		ХозяйственныеОперацииЗакупки.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаФактуровкаПоставки);
		ХозяйственныеОперацииВвозИзЕАЭС.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСНеотфактурованнаяПоставка);
		ХозяйственныеОперацииВвозИзЕАЭС.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСФактуровкаПоставки);
		
		Если ХозяйственныеОперацииЗакупки.Найти(ХозяйственнаяОперацияРаздельнойЗакупки) <> Неопределено Тогда
			Возврат Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
		КонецЕсли;
		
		Если ИспользоватьИмпортныеЗакупки Тогда
			Если ХозяйственныеОперацииИмпорта.Найти(ХозяйственнаяОперацияРаздельнойЗакупки) <> Неопределено Тогда
				Возврат Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту;
			КонецЕсли;
		КонецЕсли;
		
		Если ИспользоватьВвозТоваровИзТаможенногоСоюза Тогда
			Если ХозяйственныеОперацииВвозИзЕАЭС.Найти(ХозяйственнаяОперацияРаздельнойЗакупки) <> Неопределено Тогда
				Возврат Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС;
			КонецЕсли;
		КонецЕсли;
		
		
		Возврат ХозяйственнаяОперацияРаздельнойЗакупки;
		
	Иначе
		Возврат ХозяйственнаяОперацияРаздельнойЗакупки;
	КонецЕсли;
	
КонецФункции

// Возвращает признак хозяйственной операции раздельной закупки
//
// Параметры:
//  ХозяйственнаяОперация	 - ПеречислениеСсылка.ХозяйственныеОперации	 - хозяйственная операция, для которой нужно определить признак.
// 
// Возвращаемое значение:
//  Булево - Истина, если используется раздельная закупка.
//
Функция ЭтоХозяйственнаяОперацияРаздельнойЗакупки(ХозяйственнаяОперация) Экспорт
	
	ХозяйственныеОперацииРаздельнойЗакупки = ХозяйственныеОперацииРаздельнойЗакупкиБезОтборов();
	Возврат ХозяйственныеОперацииРаздельнойЗакупки.Найти(ХозяйственнаяОперация) <> Неопределено;
	
КонецФункции

// Возвращает соответствие, которое определяет пары операций раздельной закупки.
//
// Параметры:
//  КлючомЯвляютсяОперацииПоступления	 - Булево - инвертирует ключи и значения возвращаемого соответствия.
// 
// Возвращаемое значение:
//  Соответствие - ключом и значением являются логически одинаковые операции раздельной закупки,
//              например "ЗакупкаУПоставщикаТоварыВПути" и "ЗакупкаУПоставщикаПоступлениеИзТоваровВПути".
//
Функция ПарыОперацийРаздельнойЗакупки(КлючомЯвляютсяОперацииПоступления = Ложь) Экспорт
	
	ОперацииПереходаПраваСобственности = Новый Массив(5);
	ОперацииПоступления = Новый Массив(5);
	
	ОперацииПереходаПраваСобственности.Вставить(0, Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаТоварыВПути);
	ОперацииПоступления.Вставить(0, Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаПоступлениеИзТоваровВПути);
	
	ОперацииПереходаПраваСобственности.Вставить(1, Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаФактуровкаПоставки);
	ОперацииПоступления.Вставить(1, Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаНеотфактурованнаяПоставка);
	
	ОперацииПереходаПраваСобственности.Вставить(2, Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСТоварыВПути);
	ОперацииПоступления.Вставить(2, Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСПоступлениеИзТоваровВПути);
	
	ОперацииПереходаПраваСобственности.Вставить(3, Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСФактуровкаПоставки);
	ОперацииПоступления.Вставить(3, Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСНеотфактурованнаяПоставка);
	
	ОперацииПереходаПраваСобственности.Вставить(4, Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпортуТоварыВПути);
	ОперацииПоступления.Вставить(4, Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпортуПоступлениеИзТоваровВПути);
	
	ВозвращаемоеЗначение = Новый Соответствие();
	
	Для Счетчик = 0 По 5 Цикл
		Если КлючомЯвляютсяОперацииПоступления Тогда
			ВозвращаемоеЗначение.Вставить(ОперацииПереходаПраваСобственности[Счетчик], ОперацииПоступления[Счетчик]);
		Иначе
			ВозвращаемоеЗначение.Вставить(ОперацииПоступления[Счетчик], ОперацииПереходаПраваСобственности[Счетчик]);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Инициализирует и возвращает структуру дополнительных параметров отбора договоров.
// 
// Возвращаемое значение:
//  Структура - структура со свойствами:
// 	* ВалютаВзаиморасчетов - СправочникСсылка.Валюты - валюта взаиморасчетов по договору
// 	* Налогообложение - ПеречислениеСсылка.ТипыНалогообложенияНДС - тип налогообложения НДС
// 	* НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - направление деятельности по договору.
// 	* КомиссионныеПродажи25 - Булево - Признак отнесения договора к комиссионным продажам версии 2.5.
// 	* ПорядокОформленияСписанияНедостачТоваровПринятыхНаХранение - ПеречислениеСсылка.ПорядокОформленияСписанияТоваровПринятыхНаХранение, Неопределено -
// 	* ПорядокРасчетов - ПеречислениеСсылка.ПорядокРасчетов, Неопределено -
// 	* ДоговорССамозанятым - Булево - признак договора с плательщиком НПД (самозанятым).
//
Функция ДополнительныеПараметрыОтбораДоговоров() Экспорт
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ВалютаВзаиморасчетов");
	ПараметрыОтбора.Вставить("Налогообложение");
	ПараметрыОтбора.Вставить("НаправлениеДеятельности");
	ПараметрыОтбора.Вставить("КомиссионныеПродажи25");
	ПараметрыОтбора.Вставить("ПорядокОформленияСписанияНедостачТоваровПринятыхНаХранение");
	ПараметрыОтбора.Вставить("ПорядокРасчетов");
	ПараметрыОтбора.Вставить("ДоговорССамозанятым", Ложь);
	
	Возврат ПараметрыОтбора;
	
КонецФункции

// Получает вариант оформления закупок из договора.
//
// Параметры:
//  Договор	 - СправочникСсылка.ДоговорыКонтрагентов - договор с контрагентом.
// 
// Возвращаемое значение:
//	ПеречислениеСсылка.ВариантыОформленияЗакупок - вариант оформления закупок по указанному договору.
//
Функция ПолучитьВариантОформленияДоговораЗакупок(Договор) Экспорт
	
	ВариантОформленияЗакупок = Перечисления.ВариантыОформленияЗакупок.ПустаяСсылка();
	Если ЗначениеЗаполнено(Договор) Тогда
		УстановитьПривилегированныйРежим(Истина);
		ВариантОформленияЗакупок = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ВариантОформленияЗакупок");
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат ВариантОформленияЗакупок;
	
КонецФункции

// По хозяйственной операции документа и договора определяет является ли данный документ неотфактурованной поставкой.
//
// Параметры:
//  ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - хозяйственная операция документа.
//  ВариантОформленияДоговораЗакупок - ПеречислениеСсылка.ВариантыОформленияЗакупок - вариант оформления закупок по указанному договору.
// 
// Возвращаемое значение:
//	Булево - Это неотфактурованная поставка.
//
Функция ЭтоНеотфактурованнаяПоставкаУслугРабот(ХозяйственнаяОперация, ВариантОформленияДоговораЗакупок) Экспорт
	
	ОперацииФактуровка = Новый Массив;
	ОперацииФактуровка.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСФактуровкаПоставки"));
	ОперацииФактуровка.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаФактуровкаПоставки"));
	
	НеотфактурованныеПоставкиУслугРабот = ОперацииФактуровка.Найти(ХозяйственнаяОперация) <> Неопределено
			И ВариантОформленияДоговораЗакупок = ПредопределенноеЗначение("Перечисление.ВариантыОформленияЗакупок.НеотфактурованныеПоставкиТоваровИУслуг");
	
	Возврат НеотфактурованныеПоставкиУслугРабот;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыПроверкиКорректностиЗаполненияДокументов

// Проверяет корректность заполнения документа закупки в соответствии с массивом проверок
// Вызывается из процедуры документа "ОбработкаПроведения".
//
// Параметры:
// ДокументЗакупки  - ДокументОбъект - Документ, для которого необходимо осуществить проверки
// Отказ            - Булево - Флаг отказа от проведения документа.
//
Процедура ПроверитьКорректностьЗаполненияДокументаЗакупки(ДокументЗакупки, Отказ) Экспорт
	
	// Если документ уже заполнен некорректно - не будем выполнять запросы	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим доступность ролей
	ОтклонениеОтУсловийЗакупок = ПраваПользователяПовтИсп.ОтклонениеОтУсловийЗакупок();
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Проверим нужно ли проверять диапазон допустимых цен
	ВидМаксимальноДопустимыхЦенЗакупки  = Константы.ВидМаксимальноДопустимыхЦенЗакупки.Получить();
	ПроверятьДиапазонЦен                = ЗначениеЗаполнено(ВидМаксимальноДопустимыхЦенЗакупки);
	ЕстьОшибкиСоглашениеНеУказано       = Ложь;
	ИспользоватьРучныеСкидки            = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВЗакупках");
	ИспользоватьНоменклатуруПартнеров   = ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруПартнеров");
	ИспользоватьСоглашенияСПоставщиками = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСПоставщиками");
	ИспользуетсяЦенообразование25       = ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25(ДокументЗакупки.Дата);
	
	
	ИспользоватьАгентскуюЗакупку			= ПолучитьФункциональнуюОпцию("ИспользоватьОказаниеАгентскихУслугПриЗакупке");
	
	ВсеСтрокиОтменены = Ложь;
	ВозвратМногооборотнойТары = Ложь;
	ПредставлениеПоляСклад = Неопределено;
	
	// Заполним массив необходимых проверок в зависимости от типа документа
	
	МассивПроверок = Новый Массив();
	ИмяТаблицы     = ДокументЗакупки.Метаданные().ПолноеИмя();
	
	Если ИмяТаблицы = "Документ.ЗаказПоставщику" Тогда
		
		ВсеСтрокиОтменены = ОбщегоНазначенияУТ.ВсеСтрокиОтменены(ДокументЗакупки, "Товары", "Отменено");
		
		НужноСогласовать = ?(ВсеСтрокиОтменены, Ложь, Не ДокументЗакупки.Согласован И Не ОтклонениеОтУсловийЗакупок);
	ИначеЕсли ИмяТаблицы = "Документ.ДоверенностьВыданная"
		ИЛИ ИмяТаблицы = "Документ.ВыкупВозвратнойТарыУПоставщика"
		ИЛИ ИмяТаблицы = "Документ.ВозвратТоваровПоставщику"
		ИЛИ ИмяТаблицы = "Документ.ПоступлениеТоваровНаСклад"
		ИЛИ ИмяТаблицы = "Документ.ВыкупПринятыхНаХранениеТоваров"
		ИЛИ ИмяТаблицы = "Документ.ОтгрузкаТоваровСХранения"
		ИЛИ ИмяТаблицы = "Документ.ОтчетОСписанииТоваровСХранения"
		ИЛИ ИмяТаблицы = "Документ.АктОРасхожденияхПослеОтгрузки"
		ИЛИ ИмяТаблицы = "Документ.ПередачаТоваровМеждуОрганизациями"
		Или ИмяТаблицы = "Документ.АктОРасхожденияхПослеПриемки" Тогда
		НужноСогласовать = Ложь;
	Иначе
		НужноСогласовать = Не ДокументЗакупки.Согласован И Не ОтклонениеОтУсловийЗакупок;
	КонецЕсли;
	
	// СОГЛАШЕНИЕ С ПОСТАВЩИКОМ
	
	Если ИмяТаблицы = "Справочник.СоглашенияСПоставщиками" Тогда
		
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		ВозвратМногооборотнойТары = ДокументЗакупки.ВозвращатьМногооборотнуюТару;
		
		Если ПроверятьДиапазонЦен И НужноСогласовать И
			ДокументЗакупки.Статус <> Перечисления.СтатусыСоглашенийСПоставщиками.НеСогласовано Тогда
			
			МассивПроверок.Добавить("ВременнаяТаблицаДокументЗакупки");
			МассивПроверок.Добавить("ВременнаяТаблицаКурсыВалют");
			Если ИспользуетсяЦенообразование25 Тогда
				МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазонПредварительнаяОбработка");
			КонецЕсли;
			МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазон");
			
		КонецЕсли;
		
		Если ДокументЗакупки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию
			Или ДокументЗакупки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаХранениеСПравомПродажи Тогда
			
			МассивПроверок.Добавить("НаличиеУслугИРабот");
		КонецЕсли;
		
	// ЗАКАЗ ПОСТАВЩИКУ
		
	ИначеЕсли ИмяТаблицы = "Документ.ЗаказПоставщику" Тогда
		
		СоглашениеУказано = ЗначениеЗаполнено(ДокументЗакупки.Соглашение);
		
		МассивПроверок.Добавить("ВременнаяТаблицаДокументЗакупки");
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		МассивПроверок.Добавить("КорректностьЗаполненияСклада");
		МассивПроверок.Добавить("КорректностьЗаполненияСкладаВТабличнойЧастиТовары");
		МассивПроверок.Добавить("ВозможностьСписанияТоваровНаРасходы");
		МассивПроверок.Добавить("КонтрольЗаполненияЦенСУчетомОтмененных");
		ВозвратМногооборотнойТары = ДокументЗакупки.ВернутьМногооборотнуюТару;
		ТребуетсяЗалогЗаТару = ДокументЗакупки.ТребуетсяЗалогЗаТару;
		
		Если ИспользоватьНоменклатуруПартнеров Тогда
			МассивПроверок.Добавить("КорректностьЗаполненияНоменклатурыПартнера");
		КонецЕсли;

		Если НЕ ДокументЗакупки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаХранениеСПравомПродажи Тогда
			МассивПроверок.Добавить("КорректностьСуммыИСуммыНДС");
		КонецЕсли;
		
		Если НужноСогласовать И
			ДокументЗакупки.Статус <> Перечисления.СтатусыЗаказовПоставщикам.НеСогласован Тогда
			
			МассивПроверок.Добавить("ВременнаяТаблицаКурсыВалют");
			
			Если СоглашениеУказано Тогда
				
				Если НЕ ДокументЗакупки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаХранениеСПравомПродажи Тогда
					МассивПроверок.Добавить("КорректностьУказанияСтавкиНДС");
				КонецЕсли;
				МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
				МассивПроверок.Добавить("СоответствиеШапкиУсловиямЗакупок");
				МассивПроверок.Добавить("СоответствиеТоваровУсловиямЗакупок");
				
			Иначе
				
				ЕстьОшибкиСоглашениеНеУказано = ИспользоватьСоглашенияСПоставщиками;
				
			КонецЕсли;
			
			Если ИспользоватьРучныеСкидки
				И ДокументЗакупки.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПриемНаКомиссию
				И ДокументЗакупки.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПриемНаХранениеСПравомПродажи Тогда
				МассивПроверок.Добавить("ДопустимостьРучныхСкидокНаценок");
			КонецЕсли;
			
			Если ПроверятьДиапазонЦен Тогда
				Если ИспользуетсяЦенообразование25 Тогда
					МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазонПредварительнаяОбработка");
				КонецЕсли;
				МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазон");
			КонецЕсли;
			
			Если ДокументЗакупки.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПриемНаКомиссию
				И ДокументЗакупки.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПриемНаХранениеСПравомПродажи
				И ДокументЗакупки.СуммаДокумента <> 0
				И ДокументЗакупки.ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным Тогда
				
				МассивПроверок.Добавить("ВременнаяТаблицаЭтапыГрафикаОплаты");
				МассивПроверок.Добавить("КорректностьЭтаповГрафикаОплаты");
				
			КонецЕсли;
			
		КонецЕсли;
		
		СписокХозяйственныхОперацийИсключающихУслугиИРаботы = НоменклатураСервер.СписокХозяйственныхОперацийИсключающихУслугиИРаботы();
		СписокХозяйственныхОперацийИсключающихРаботы = НоменклатураСервер.СписокХозяйственныхОперацийИсключающихРаботы();
		СписокХозяйственныхОперацийИсключающихПрослеживаемыеРаботы = НоменклатураСервер.СписокХозяйственныхОперацийИсключающихПрослеживаемыеРаботы();
		
		Если СписокХозяйственныхОперацийИсключающихУслугиИРаботы.НайтиПоЗначению(ДокументЗакупки.ХозяйственнаяОперация) <> Неопределено Тогда
			МассивПроверок.Добавить("НаличиеУслугИРабот");
		ИначеЕсли СписокХозяйственныхОперацийИсключающихРаботы.НайтиПоЗначению(ДокументЗакупки.ХозяйственнаяОперация) <> Неопределено Тогда
			МассивПроверок.Добавить("НаличиеРабот");
		ИначеЕсли СписокХозяйственныхОперацийИсключающихПрослеживаемыеРаботы.НайтиПоЗначению(ДокументЗакупки.ХозяйственнаяОперация) <> Неопределено Тогда
			МассивПроверок.Добавить("НаличиеПрослеживаемыхРабот");
		КонецЕсли;
		
		ПредставлениеПоляСклад = НСтр("ru = 'Получатель'")
		
	//АКТ ПОСЛЕ ПРИЕМКИ
	ИначеЕсли ИмяТаблицы = "Документ.АктОРасхожденияхПослеПриемки" Тогда

		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		МассивПроверок.Добавить("КорректностьЗаполненияСкладаВТабличнойЧастиТоварыБезСкладаВШапке");
		
	// ПРИОБРЕТЕНИЕ ТОВАРОВ И УСЛУГ
		
	ИначеЕсли ИмяТаблицы = "Документ.ПриобретениеТоваровУслуг" Тогда
		
		СоглашениеУказано     = ЗначениеЗаполнено(ДокументЗакупки.Соглашение);
		ЕстьОшибкиСоглашениеНеУказано = ИспользоватьСоглашенияСПоставщиками
		                                И Не СоглашениеУказано
		                                И Не ДокументЗакупки.ПоступлениеПоЗаказам
										И Не ДокументЗакупки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо
		                                И НужноСогласовать;

		МассивПроверок.Добавить("ВременнаяТаблицаДокументЗакупки");
		
		Если Не ДокументЗакупки.ПоступлениеПоЗаказам И СоглашениеУказано И НужноСогласовать Тогда
			МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
			МассивПроверок.Добавить("СоответствиеШапкиУсловиямЗакупок");
		КонецЕсли;
		
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		МассивПроверок.Добавить("КорректностьЗаполненияСклада");
		МассивПроверок.Добавить("КорректностьЗаполненияСкладаВТабличнойЧастиТовары");
		Если ИспользоватьНоменклатуруПартнеров Тогда
			МассивПроверок.Добавить("КорректностьЗаполненияНоменклатурыПартнера");
		КонецЕсли;
		
		МассивПроверок.Добавить("КонтрольЗаполненияЦен");
		МассивПроверок.Добавить("КорректностьСуммыИСуммыНДС");
		МассивПроверок.Добавить("ВозможностьСписанияТоваровНаРасходы");
		
		ВозвратМногооборотнойТары = ДокументЗакупки.ВернутьМногооборотнуюТару;
		ТребуетсяЗалогЗаТару = ДокументЗакупки.ТребуетсяЗалогЗаТару;
		
		СписокХозяйственныхОперацийИсключающихУслугиИРаботы = НоменклатураСервер.СписокХозяйственныхОперацийИсключающихУслугиИРаботы();
		СписокХозяйственныхОперацийИсключающихРаботы = НоменклатураСервер.СписокХозяйственныхОперацийИсключающихРаботы();
		СписокХозяйственныхОперацийИсключающихПрослеживаемыеРаботы = НоменклатураСервер.СписокХозяйственныхОперацийИсключающихПрослеживаемыеРаботы();
		
		Если СписокХозяйственныхОперацийИсключающихУслугиИРаботы.НайтиПоЗначению(ДокументЗакупки.ХозяйственнаяОперация) <> Неопределено Тогда
			МассивПроверок.Добавить("НаличиеУслугИРабот");
		ИначеЕсли СписокХозяйственныхОперацийИсключающихРаботы.НайтиПоЗначению(ДокументЗакупки.ХозяйственнаяОперация) <> Неопределено Тогда
			МассивПроверок.Добавить("НаличиеРабот");
		ИначеЕсли СписокХозяйственныхОперацийИсключающихПрослеживаемыеРаботы.НайтиПоЗначению(ДокументЗакупки.ХозяйственнаяОперация) <> Неопределено Тогда
			МассивПроверок.Добавить("НаличиеПрослеживаемыхРабот");
		КонецЕсли;
			
		Если НужноСогласовать Тогда
			
			МассивПроверок.Добавить("ВременнаяТаблицаКурсыВалют");
			
			Если СоглашениеУказано Тогда
				МассивПроверок.Добавить("СоответствиеТоваровУсловиямЗакупок");
				МассивПроверок.Добавить("КорректностьУказанияСтавкиНДС");
			КонецЕсли;
			
			Если СоглашениеУказано
				И ИспользоватьРучныеСкидки
				И ДокументЗакупки.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПриемНаКомиссию Тогда
				МассивПроверок.Добавить("ДопустимостьРучныхСкидокНаценок");
			КонецЕсли;
				
			Если ПроверятьДиапазонЦен Тогда
				Если ИспользуетсяЦенообразование25 Тогда
					МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазонПредварительнаяОбработка");
				КонецЕсли;
				МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазон");
			КонецЕсли;
			
		КонецЕсли;
		
		ПредставлениеПоляСклад = НСтр("ru = 'Получатель'")
		
	ИначеЕсли ИмяТаблицы = "Документ.ПередачаТоваровМеждуОрганизациями" Тогда
		
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		МассивПроверок.Добавить("ВременнаяТаблицаДокументЗакупки");
		МассивПроверок.Добавить("КорректностьЗаполненияСклада");

	ИначеЕсли ИмяТаблицы = "Документ.ВыкупВозвратнойТарыУПоставщика" Тогда
		
		Если ИспользоватьНоменклатуруПартнеров Тогда
			МассивПроверок.Добавить("ВременнаяТаблицаТовары");
			МассивПроверок.Добавить("КорректностьЗаполненияНоменклатурыПартнера");
		КонецЕсли;
		
	ИначеЕсли ИмяТаблицы = "Документ.ДоверенностьВыданная" Тогда
		
		Если ИспользоватьНоменклатуруПартнеров Тогда
			МассивПроверок.Добавить("ВременнаяТаблицаТовары");
			МассивПроверок.Добавить("КорректностьЗаполненияНоменклатурыПартнера");
		КонецЕсли;
		
		
	// КОРРЕКТИРОВКА ПОСТУПЛЕНИЯ
		
	ИначеЕсли ИмяТаблицы = "Документ.КорректировкаПриобретения" Тогда
		
		ЕстьОшибкиСоглашениеНеУказано = Ложь;
		
		МассивПроверок.Добавить("ВременнаяТаблицаДокументЗакупки");
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		МассивПроверок.Добавить("КорректностьЗаполненияСклада");
		МассивПроверок.Добавить("КорректностьЗаполненияСкладаВТабличнойЧастиТовары");
		МассивПроверок.Добавить("КорректностьСуммыИСуммыНДС");
		
		Если ИспользоватьНоменклатуруПартнеров Тогда
			МассивПроверок.Добавить("КорректностьЗаполненияНоменклатурыПартнера");
		КонецЕсли;
		
	// ВОЗВРАТ ТОВАРОВ ПОСТАВЩИКУ
		
	ИначеЕсли ИмяТаблицы = "Документ.ВозвратТоваровПоставщику" Тогда
		
		Если ДокументЗакупки.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратТоваровКомитенту Тогда
			МассивПроверок.Добавить("ВременнаяТаблицаДокументЗакупки");
			МассивПроверок.Добавить("ВременнаяТаблицаТовары");
			МассивПроверок.Добавить("КонтрольЗаполненияЦен");
			МассивПроверок.Добавить("КорректностьСуммыИСуммыНДС");
			
			Если ИспользоватьАгентскуюЗакупку Тогда
				МассивПроверок.Добавить("СоответствиеВалютыПоАгентскойЗакупке");
			КонецЕсли;
			
			ВозвратМногооборотнойТары = ДокументЗакупки.ВозвратПринятойМногооборотнойТары;
			ТребуетсяЗалогЗаТару = ДокументЗакупки.ПредусмотренЗалогЗаТару;
		КонецЕсли;
		
	// ОТГРУЗКА ТОВАРОВ С ХРАНЕНИЯ
		
	ИначеЕсли ИмяТаблицы = "Документ.ОтгрузкаТоваровСХранения" Тогда
		
		МассивПроверок.Добавить("ВременнаяТаблицаДокументЗакупки");
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		МассивПроверок.Добавить("КорректностьЗаполненияСкладаВТабличнойЧастиТовары");
		
			МассивПроверок.Добавить("КонтрольЗаполненияЦен");
		
		Если ИспользоватьНоменклатуруПартнеров Тогда
			МассивПроверок.Добавить("КорректностьЗаполненияНоменклатурыПартнера");
		КонецЕсли;
		
		Если ДокументЗакупки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоставкаПодПринципала Тогда
			МассивПроверок.Добавить("КонтрольЗаполненияНазначения");
			Если ДокументЗакупки.ПоЗаказу Тогда
				МассивПроверок.Добавить("КонтрольЗаполненияЗаказаКлиента");
			КонецЕсли;
		КонецЕсли;
		
		ВозвратМногооборотнойТары = Ложь;
		ТребуетсяЗалогЗаТару      = Ложь;
		
	// ПРИЕМКА ТОВАРОВ НА ХРАНЕНИЕ
		
	ИначеЕсли ИмяТаблицы = "Документ.ПриемкаТоваровНаХранение" Тогда
		
		СоглашениеУказано     = ЗначениеЗаполнено(ДокументЗакупки.Соглашение);
		ЕстьОшибкиСоглашениеНеУказано = ИспользоватьСоглашенияСПоставщиками
		                                И Не СоглашениеУказано
		                                И Не ДокументЗакупки.ПоступлениеПоЗаказам
		                                И НужноСогласовать;

		МассивПроверок.Добавить("ВременнаяТаблицаДокументЗакупки");
		
		Если Не ДокументЗакупки.ПоступлениеПоЗаказам И СоглашениеУказано И НужноСогласовать Тогда
			МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
			МассивПроверок.Добавить("СоответствиеШапкиУсловиямЗакупок");
		КонецЕсли;
		
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		МассивПроверок.Добавить("КорректностьЗаполненияСкладаВТабличнойЧастиТовары");
		Если ИспользоватьНоменклатуруПартнеров Тогда
			МассивПроверок.Добавить("КорректностьЗаполненияНоменклатурыПартнера");
		КонецЕсли;
		
			МассивПроверок.Добавить("КонтрольЗаполненияЦен");
		
		ВозвратМногооборотнойТары = Ложь;
		ТребуетсяЗалогЗаТару = Ложь;
		
		Если НужноСогласовать Тогда
			
			МассивПроверок.Добавить("ВременнаяТаблицаКурсыВалют");
			
			Если СоглашениеУказано Тогда
				МассивПроверок.Добавить("СоответствиеТоваровУсловиямЗакупок");
			КонецЕсли;
			
			Если ПроверятьДиапазонЦен
				И Истина Тогда
				Если ИспользуетсяЦенообразование25 Тогда
					МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазонПредварительнаяОбработка");
				КонецЕсли;
				МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазон");
			КонецЕсли;
			
		КонецЕсли;
		
	//ВЫКУП ПРИНЯТЫХ НА ХРАНЕНИЕ ТОВАРОВ
		
	ИначеЕсли ИмяТаблицы = "Документ.ВыкупПринятыхНаХранениеТоваров" Тогда
		
		МассивПроверок.Добавить("ВременнаяТаблицаДокументЗакупки");
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		МассивПроверок.Добавить("КорректностьЗаполненияМестХранения");
		МассивПроверок.Добавить("КонтрольЗаполненияЦен");
		МассивПроверок.Добавить("КорректностьСуммыИСуммыНДС");
		
		Если ИспользоватьНоменклатуруПартнеров Тогда
			МассивПроверок.Добавить("КорректностьЗаполненияНоменклатурыПартнера");
		КонецЕсли;
		
		ВозвратМногооборотнойТары = Ложь;
		ТребуетсяЗалогЗаТару      = Ложь;
		
	//ОТЧЕТ О СПИСАНИИ ТОВАРОВ С ХРАНЕНИЯ
		
	ИначеЕсли ИмяТаблицы = "Документ.ОтчетОСписанииТоваровСХранения" Тогда
		
		МассивПроверок.Добавить("ВременнаяТаблицаДокументЗакупки");
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		МассивПроверок.Добавить("КорректностьЗаполненияМестХранения");
		
		Если ДокументЗакупки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеПринятыхТоваровНаРасходы
			Или Ложь Тогда
			МассивПроверок.Добавить("КонтрольЗаполненияЦен");
		КонецЕсли;
		
		Если ИспользоватьНоменклатуруПартнеров Тогда
			МассивПроверок.Добавить("КорректностьЗаполненияНоменклатурыПартнера");
		КонецЕсли;
		
		ВозвратМногооборотнойТары = Ложь;
		ТребуетсяЗалогЗаТару      = Ложь;
		
	КонецЕсли;
	
	// Сформируем текст запроса необходимых проверок в соответствие с массивом проверок
	
	ТекстЗапроса     = "";
	ПараметрыЗапроса = Новый Структура();

	ПараметрыЗапроса.Вставить("Дата",                      ДокументЗакупки.Дата);
	ПараметрыЗапроса.Вставить("Ссылка",                    ДокументЗакупки.Ссылка);
	ПараметрыЗапроса.Вставить("ВозвратМногооборотнойТары", ВозвратМногооборотнойТары);
	ПараметрыЗапроса.Вставить("ТребуетсяЗалогЗаТару",      ТребуетсяЗалогЗаТару);
	ПараметрыЗапроса.Вставить("БазоваяВалюта", ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(ДокументЗакупки.Организация));
	ПараметрыЗапроса.Вставить("СтранаРегистрации", ЗначениеНастроекКлиентСерверПовтИсп.СтранаРегистрацииОрганизации(ДокументЗакупки.Организация));
	ПараметрыЗапроса.Вставить("ИспользоватьУчетПрослеживаемыхИмпортныхТоваров",
		УчетПрослеживаемыхТоваровЛокализация.ИспользоватьУчетПрослеживаемыхИмпортныхТоваров(Дата(1,1,1)));
	ПараметрыЗапроса.Вставить("ДатаНачалаУчетаПрослеживаемыхИмпортныхТоваров",
		УчетПрослеживаемыхТоваровЛокализация.ДатаНачалаУчетаПрослеживаемыхИмпортныхТоваров());
	
	Для Каждого ТекЭлемент Из МассивПроверок Цикл
		
		Если ТекЭлемент = "ВременнаяТаблицаДокументЗакупки" Тогда
			
			СформироватьЗапросВременнаяТаблицаШапкаДокументаЗакупки(ТекстЗапроса, ПараметрыЗапроса, ДокументЗакупки);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаТовары" Тогда
			
			СформироватьЗапросВременнаяТаблицаТоварыДокументаЗакупки(ТекстЗапроса, ПараметрыЗапроса, ДокументЗакупки, ИмяТаблицы);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаСкладыКорректныеПоСоглашению" Тогда
			
			СформироватьЗапросВременнаяТаблицаСкладыКорректныеПоСоглашению(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "СоответствиеШапкиУсловиямЗакупок" Тогда
			
			СформироватьЗапросШапкаДокументаЗакупки(ТекстЗапроса, ИмяТаблицы);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаЭтапыГрафикаОплаты" Тогда
			
			СформироватьЗапросВременнаяТаблицаЭтапыОплаты(ТекстЗапроса, ПараметрыЗапроса, ДокументЗакупки);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаКурсыВалют" Тогда
			
			СформироватьЗапросВременнаяТаблицаКурсыВалют(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "КорректностьЗаполненияНоменклатурыПартнера" Тогда
			
			НоменклатураПартнеровСервер.СформироватьЗапросКорректностьЗаполненияНоменклатурыПартнера(ТекстЗапроса, ПараметрыЗапроса);
			
		ИначеЕсли ТекЭлемент = "СоответствиеТоваровУсловиямЗакупок" Тогда
			
			СформироватьЗапросТоварыДокументаЗакупки(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "ВхождениеЦенВДопустимыйДиапазон" Тогда
			
			Если ИспользуетсяЦенообразование25 Тогда
				СформироватьЗапросВхождениеЦенВДопустимыйДиапазон2_5(ТекстЗапроса);
			Иначе
				СформироватьЗапросВхождениеЦенВДопустимыйДиапазон(ТекстЗапроса);
			КонецЕсли;
			
		ИначеЕсли ТекЭлемент = "КорректностьЗаполненияАналитикиУслуг" Тогда
			
			СформироватьЗапросКорректностьЗаполненияАналитикиУслуг(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "НаличиеУслугИРабот" Тогда
			
			СформироватьЗапросНаличиеУслугИРаботВДокументеЗакупки(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "НаличиеРабот" Тогда
			
			СформироватьЗапросНаличиеРаботВДокументеЗакупки(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "НаличиеПрослеживаемыхРабот" Тогда
			
			СформироватьЗапросНаличиеПрослеживаемыхРаботВДокументеЗакупки(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "ДопустимостьРучныхСкидокНаценок" Тогда
			
			СформироватьЗапросДопустимостьРучныхСкидокНаценок(ТекстЗапроса);
			
		ИначеЕсли  ТекЭлемент = "КорректностьЗаполненияСклада" Тогда
			
			СформироватьЗапросКорректностьЗаполненияСклада(ТекстЗапроса);
			
		ИначеЕсли  ТекЭлемент = "КорректностьЗаполненияСкладаВТабличнойЧастиТовары" Тогда
			
			СформироватьЗапросКорректностьЗаполненияСкладовВТабличнойЧастиТовары(ТекстЗапроса);
			
		ИначеЕсли  ТекЭлемент = "КорректностьЗаполненияСкладаВТабличнойЧастиТоварыБезСкладаВШапке" Тогда
		
			СформироватьЗапросКорректностьЗаполненияСкладовВТабличнойЧастиТоварыБезСкладаВШапке(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "КорректностьЭтаповГрафикаОплаты" Тогда
			
			СформироватьЗапросКорректностьЭтаповГрафикаОплаты(ТекстЗапроса);
			
		
		ИначеЕсли ТекЭлемент = "КонтрольЗаполненияЦенСУчетомОтмененных" Тогда
			
			СформироватьЗапросКонтрольЗаполненияЦенСУчетомОтмененных(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "КонтрольЗаполненияЦен" Тогда
			
			СформироватьЗапросКонтрольЗаполненияЦен(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "СоответствиеОрганизацииРаспоряжений" Тогда
			
			СформироватьЗапросСоответствиеОрганизацииРаспоряжений(ТекстЗапроса);
		
		ИначеЕсли  ТекЭлемент = "КорректностьУказанияСтавкиНДС" Тогда
			
			СформироватьЗапросКорректностьУказанияСтавкиНДСЗакупки(ТекстЗапроса);
		
		ИначеЕсли  ТекЭлемент = "КорректностьСуммыИСуммыНДС" Тогда
			
			СформироватьЗапросКорректностьСуммыИСуммыНДСЗакупки(ТекстЗапроса);
			
		ИначеЕсли  ТекЭлемент = "СоответствиеВалютыПоАгентскойЗакупке" Тогда
			
			СформироватьЗапросСоответствиеВалютыПоАгентскойЗакупке(ТекстЗапроса);
			
		ИначеЕсли  ТекЭлемент = "КонтрольЗаполненияЗаказаКлиента" Тогда
			
			СформироватьЗапросКонтрольЗаполненияЗаказаКлиента(ТекстЗапроса);
			
		ИначеЕсли  ТекЭлемент = "КонтрольЗаполненияНазначения" Тогда
			
			СформироватьЗапросКонтрольНазначения(ТекстЗапроса);
			
		ИначеЕсли  ТекЭлемент = "ВозможностьСписанияТоваровНаРасходы" Тогда
			
			СформироватьЗапросВозможностьСписанияТоваровНаРасходы(ТекстЗапроса);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
		УстановитьПривилегированныйРежим(Ложь);
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос(ТекстЗапроса);
	
	Для Каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ,ПараметрЗапроса.Значение);
	КонецЦикла;
	
	МассивРезультатов = Запрос.ВыполнитьПакет(); 
	
	// Сообщим пользователю о результатах проверки для каждого результата запроса
	НевозможноПровестиБезСогласования = Ложь;
	Для ТекИндекс = 0 По МассивРезультатов.Количество()-1 Цикл
		
		Выборка = МассивРезультатов[ТекИндекс].Выбрать();
		
		Если МассивПроверок[ТекИндекс] = "СоответствиеШапкиУсловиямЗакупок" Тогда
			
			СообщитьОбОшибкахШапкаДокументаЗакупки(Выборка, ДокументЗакупки, НевозможноПровестиБезСогласования);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьЗаполненияНоменклатурыПартнера" Тогда
			
			НоменклатураПартнеровСервер.СообщитьОбОшибкахКорректностьЗаполненияНоменклатурыПартнера(Выборка, ДокументЗакупки, Отказ);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "СоответствиеТоваровУсловиямЗакупок" Тогда
			
			СообщитьОбОшибкахТоварыДокументаЗакупки(Выборка,ДокументЗакупки, НевозможноПровестиБезСогласования);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "ВхождениеЦенВДопустимыйДиапазон" Тогда
			
			СообщитьОбОшибкахВхождениеЦенВДопустимыйДиапазон(Выборка, ДокументЗакупки, Отказ, ИспользоватьРучныеСкидки);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьЗаполненияАналитикиУслуг" Тогда
			
			СообщитьОбОшибкахКорректностьЗаполненияАналитикиУслуг(Выборка, ДокументЗакупки, Отказ);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "НаличиеУслугИРабот"
			Или МассивПроверок[ТекИндекс] = "НаличиеРабот" Тогда
			
			СообщитьОбОшибкахНаличиеУслугРаботВДокументеЗакупки(Выборка, ДокументЗакупки, Отказ);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "НаличиеПрослеживаемыхРабот" Тогда
			
			СообщитьОбОшибкахНаличиеПрослеживаемыхРаботВДокументеЗакупки(Выборка, ДокументЗакупки, Отказ);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "ДопустимостьРучныхСкидокНаценок" Тогда
			
			СообщитьОбОшибкахДопустимостьРучныхСкидокНаценок(Выборка, ДокументЗакупки, Отказ);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьЗаполненияСклада" Тогда
			
			СообщитьОбОшибкахКорректностьЗаполненияСклада(Выборка, ДокументЗакупки, Отказ);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьЗаполненияСкладаВТабличнойЧастиТовары"
			Или МассивПроверок[ТекИндекс] = "КорректностьЗаполненияСкладаВТабличнойЧастиТоварыБезСкладаВШапке" Тогда
			
			СообщитьОбОшибкахКорректностьЗаполненияСкладаВТабличнойЧастиТовары(Выборка, ДокументЗакупки, Отказ, ПредставлениеПоляСклад);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьЭтаповГрафикаОплаты" Тогда
			
			СообщитьОбОшибкахКорректностьЭтаповГрафикаОплаты(Выборка, ДокументЗакупки, НевозможноПровестиБезСогласования);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "КонтрольЗаполненияЦен"
			ИЛИ МассивПроверок[ТекИндекс] = "КонтрольЗаполненияЦенСУчетомОтмененных" Тогда
			
			СообщитьОбОшибкахКонтрольЗаполненияЦен(Выборка, ДокументЗакупки, Отказ);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "СоответствиеОрганизацииРаспоряжений" Тогда
			
			СообщитьОбОшибкахСоответствиеОрганизацииРаспоряжений(Выборка, ДокументЗакупки, Отказ);
		
		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьУказанияСтавкиНДС" Тогда
			
			СообщитьОбОшибкахКорректностьУказанияСтавкиНДСЗакупки(Выборка, ДокументЗакупки, Отказ);
		
		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьСуммыИСуммыНДС" Тогда
			
			СообщитьОбОшибкахКорректностьСуммыИСуммыНДСЗакупки(Выборка, ДокументЗакупки, Отказ);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "СоответствиеВалютыПоАгентскойЗакупке" Тогда
			
			СообщитьОбОшибкахСоответствияВалютыПоАгентскойЗакупке(Выборка, ДокументЗакупки, Отказ);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "КонтрольЗаполненияЗаказаКлиента" Тогда
			
			СообщитьОбОшибкахКонтрольЗаказаКлиента(Выборка, ДокументЗакупки, Отказ);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "КонтрольЗаполненияНазначения" Тогда
			
			СообщитьОбОшибкахКонтрольНазначения(Выборка, ДокументЗакупки, Отказ);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "ВозможностьСписанияТоваровНаРасходы" Тогда
			
			СообщитьОбОшибкахВозможностьСписанияТоваровНаРасходы(Выборка, ДокументЗакупки, Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СообщитьОбОшибкахСоглашениеНеУказано(ЕстьОшибкиСоглашениеНеУказано, ДокументЗакупки, Отказ);
	
	Если НевозможноПровестиБезСогласования Тогда
		ТекстОшибки = НСтр("ru = 'Недостаточно прав на отклонение от условий закупок.'");
		
		ИспользоватьСтатусы = ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовПоставщикам");
		
		Если ИмяТаблицы = "Документ.ЗаказПоставщику" И ИспользоватьСтатусы Тогда 
			ТекстОшибки = ТекстОшибки + Символы.ПС + НСтр("ru = 'Документ необходимо провести в статусе ""На согласовании"".'");
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			,
			,
			,
			Отказ);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Проверяет корректность заполнения документа закупки в соответствии с массивом проверок
// путем выполнения пакета запросов.
//
// Параметры:
//		ДокументЗакупки - ДокументСсылка - ссылка на объект, для которого необходимо осуществить проверки
//		ЕстьОтклоненияОтЦеновыхУсловий - Булево - Устанавливается в процедуре при необходимости последующего согласования ценовых условий
//		ЕстьОтклоненияОтФинансовыхУсловий - Булево - Устанавливается в процедуре при необходимости последующего согласования финансовых условий
//		ЕстьОтклоненияОтЛогистическихУсловий - Булево - Устанавливается в процедуре при необходимости последующего согласования логистических условий.
//
Процедура ПроверитьНеобходимостьСогласованияУсловийЗакупки(Знач ДокументЗакупки,
	                                                       ЕстьОтклоненияОтЦеновыхУсловий,
	                                                       ЕстьОтклоненияОтФинансовыхУсловий,
	                                                       ЕстьОтклоненияОтЛогистическихУсловий) Экспорт
	
	СоглашениеДокументаЗакупки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументЗакупки, "Соглашение");
	Если НЕ ЗначениеЗаполнено(СоглашениеДокументаЗакупки) Тогда
		
		ЕстьОтклоненияОтЦеновыхУсловий = Истина;
		ЕстьОтклоненияОтФинансовыхУсловий = Истина;
		ЕстьОтклоненияОтЛогистическихУсловий= Истина;
		
		Возврат;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяТаблицы     = ДокументЗакупки.Метаданные().ПолноеИмя();
	
	// Проверим нужно ли проверять диапазон допустимых цен
	ВидМаксимальноДопустимыхЦенЗакупки = Константы.ВидМаксимальноДопустимыхЦенЗакупки.Получить();
	ПроверятьДиапазонЦен = ЗначениеЗаполнено(ВидМаксимальноДопустимыхЦенЗакупки);
	
	// Проверим нужно ли проверять скидки и наценки
	ИспользоватьРучныеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВЗакупках");
	
	ИменаРеквизитовЗакупки = "ХозяйственнаяОперация, Дата, Соглашение, СуммаДокумента, ВернутьМногооборотнуюТару, Организация";
	
	ЗаполнятьЗалогЗаТаруПоДокументу = Ложь;
	Если ДокументЗакупки.Метаданные().Реквизиты.Найти("ТребуетсяЗалогЗаТару") <> Неопределено Тогда
		ИменаРеквизитовЗакупки = ИменаРеквизитовЗакупки +", ТребуетсяЗалогЗаТару";
		ЗаполнятьЗалогЗаТаруПоДокументу = Истина;
	КонецЕсли;
	
	РеквизитыДокументаЗакупки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументЗакупки, ИменаРеквизитовЗакупки);
	
	// Проверим является ли документ приемом на комиссию
	ДокументПриемаНаКомиссию = РеквизитыДокументаЗакупки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию;
	
	ИспользуетсяЦенообразование25 = ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25(РеквизитыДокументаЗакупки.Дата);
	
	// Заполним массив необходимых проверок в зависимости от типа документа
	
	МассивПроверок  = Новый Массив();
	
	Если НЕ ЗначениеЗаполнено(РеквизитыДокументаЗакупки.Соглашение) Тогда
		
		ЕстьОтклоненияОтЦеновыхУсловий = Истина;
		ЕстьОтклоненияОтФинансовыхУсловий = Истина;
		ЕстьОтклоненияОтЛогистическихУсловий= Истина;
		
		УстановитьПривилегированныйРежим(Ложь);
		Возврат;
		
	КонецЕсли;
	
	МассивПроверок.Добавить("ВременнаяТаблицаДокументЗакупки");
	МассивПроверок.Добавить("ВременнаяТаблицаТовары");
	МассивПроверок.Добавить("ВременнаяТаблицаКурсыВалют");
	МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
	
	МассивПроверок.Добавить("СоответствиеШапкиУсловиямЗакупок");
	МассивПроверок.Добавить("СоответствиеТоваровУсловиямЗакупок");
	
	Если ИспользоватьРучныеСкидки И НЕ ДокументПриемаНаКомиссию Тогда
		МассивПроверок.Добавить("ДопустимостьРучныхСкидокНаценок");
	КонецЕсли;
	
	Если ПроверятьДиапазонЦен Тогда
		Если ИспользуетсяЦенообразование25 Тогда
			МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазонПредварительнаяОбработка");
		КонецЕсли;
		МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазон");
	КонецЕсли;
	
	Если НЕ ДокументПриемаНаКомиссию И РеквизитыДокументаЗакупки.СуммаДокумента <> 0 Тогда
		
		МассивПроверок.Добавить("ВременнаяТаблицаЭтапыГрафикаОплаты");
		МассивПроверок.Добавить("КорректностьЭтаповГрафикаОплаты");
		
	КонецЕсли;
	
	Если ИмяТаблицы = "Документ.ЗаказПоставщику" 
		ИЛИ ИмяТаблицы = "Документ.ПриобретениеТоваровУслуг" Тогда 
			СоглашениеУказано = ЗначениеЗаполнено(РеквизитыДокументаЗакупки.Соглашение);
			Если СоглашениеУказано Тогда
				МассивПроверок.Добавить("КорректностьУказанияСтавкиНДС");
			КонецЕсли;
	КонецЕсли;		
			
	
	ТребуетсяЗалогЗаТару = ?(ЗаполнятьЗалогЗаТаруПоДокументу, РеквизитыДокументаЗакупки.ТребуетсяЗалогЗаТару, Ложь);
	
	// Сформируем запрос проверки
	
	ТекстЗапроса = "";
	ПараметрыЗапроса = Новый Структура();
	
	ПараметрыЗапроса.Вставить("Дата", РеквизитыДокументаЗакупки.Дата);
	ПараметрыЗапроса.Вставить("ВозвратМногооборотнойТары",РеквизитыДокументаЗакупки.ВернутьМногооборотнуюТару);
	ПараметрыЗапроса.Вставить("ТребуетсяЗалогЗаТару", ТребуетсяЗалогЗаТару);
	ПараметрыЗапроса.Вставить("БазоваяВалюта", ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(РеквизитыДокументаЗакупки.Организация));
	ПараметрыЗапроса.Вставить("СтранаРегистрации", ЗначениеНастроекКлиентСерверПовтИсп.СтранаРегистрацииОрганизации(РеквизитыДокументаЗакупки.Организация));
	
	Для Каждого ТекЭлемент Из МассивПроверок Цикл
		
		Если ТекЭлемент = "ВременнаяТаблицаДокументЗакупки" Тогда
			
			СформироватьЗапросВременнаяТаблицаШапкаДокументаЗакупки(ТекстЗапроса, ПараметрыЗапроса, ДокументЗакупки);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаТовары" Тогда
			
			СформироватьЗапросВременнаяТаблицаТоварыДокументаЗакупки(ТекстЗапроса, ПараметрыЗапроса, ДокументЗакупки, ИмяТаблицы);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаКурсыВалют" Тогда
			
			СформироватьЗапросВременнаяТаблицаКурсыВалют(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаСкладыКорректныеПоСоглашению" Тогда
			
			СформироватьЗапросВременнаяТаблицаСкладыКорректныеПоСоглашению(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "СоответствиеШапкиУсловиямЗакупок" Тогда
			
			СформироватьЗапросШапкаДокументаЗакупки(ТекстЗапроса, ИмяТаблицы);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаЭтапыГрафикаОплаты" Тогда
			
			СформироватьЗапросВременнаяТаблицаЭтапыОплаты(ТекстЗапроса, ПараметрыЗапроса, ДокументЗакупки);
			
		ИначеЕсли ТекЭлемент = "СоответствиеТоваровУсловиямЗакупок" Тогда
			
			СформироватьЗапросТоварыДокументаЗакупки(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "ВхождениеЦенВДопустимыйДиапазон" Тогда
			
			Если ИспользуетсяЦенообразование25 Тогда
				СформироватьЗапросВхождениеЦенВДопустимыйДиапазон2_5(ТекстЗапроса);
			Иначе
				СформироватьЗапросВхождениеЦенВДопустимыйДиапазон(ТекстЗапроса);
			КонецЕсли;
			
		ИначеЕсли ТекЭлемент = "ДопустимостьРучныхСкидокНаценок" Тогда
			
			СформироватьЗапросДопустимостьРучныхСкидокНаценок(ТекстЗапроса);
			
		ИначеЕсли  ТекЭлемент = "КорректностьЗаполненияСклада" Тогда
			
			СформироватьЗапросКорректностьЗаполненияСклада(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "КорректностьЭтаповГрафикаОплаты" Тогда
			
			СформироватьЗапросКорректностьЭтаповГрафикаОплаты(ТекстЗапроса);
		
		ИначеЕсли ТекЭлемент = "КорректностьУказанияСтавкиНДС" Тогда
			
			СформироватьЗапросКорректностьУказанияСтавкиНДСЗакупки(ТекстЗапроса);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
		
		ЕстьОтклоненияОтЦеновыхУсловий = Истина;
		ЕстьОтклоненияОтФинансовыхУсловий = Истина;
		ЕстьОтклоненияОтЛогистическихУсловий= Истина;
		
		УстановитьПривилегированныйРежим(Ложь);
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Для Каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ,ПараметрЗапроса.Значение);
	КонецЦикла;
	
	МассивРезультатов = Запрос.ВыполнитьПакет(); 
	
	// Определим результаты проверки для каждого результата запроса
	
	Для ТекИндекс = 0 По МассивРезультатов.Количество()-1 Цикл
		
		// Если имеются отклонения от всех проверяемых условий, дальнейшая проверка не требуется.
		Если ЕстьОтклоненияОтЦеновыхУсловий И 
			ЕстьОтклоненияОтФинансовыхУсловий И 
			ЕстьОтклоненияОтЛогистическихУсловий Тогда
			Прервать;
		КонецЕсли;
		
		ТекЭлемент = МассивПроверок[ТекИндекс];
		Выборка = МассивРезультатов[ТекИндекс].Выбрать();
		
		Если ТекЭлемент = "СоответствиеШапкиУсловиямЗакупок" Тогда
			
			Пока Выборка.Следующий() Цикл
				Если ЕстьОтклоненияОтЦеновыхУсловий И ЕстьОтклоненияОтЛогистическихУсловий И ЕстьОтклоненияОтФинансовыхУсловий Тогда
					Прервать;
				КонецЕсли;
				Если Выборка.ЕстьОшибкиЗаполненияВалюта // Валюта не должна отличаться от значения в соглашении
					ИЛИ Выборка.ЕстьОшибкиЗаполненияЦенаВключаетНДС Тогда // Признак ""Цена включает НДС"" не должен отличаться от значения в соглашении
					ЕстьОтклоненияОтЦеновыхУсловий = Истина;
				КонецЕсли;
				Если Выборка.ЕстьОшибкиЗаполненияСклад Тогда // Склад не должен отличаться от значения в соглашении
					ЕстьОтклоненияОтЛогистическихУсловий = Истина;
				КонецЕсли;
				Если Выборка.ЕстьОшибкиЗаполненияФормаОплаты Тогда // ФормаОплаты не должна отличаться от значения в соглашении
					ЕстьОтклоненияОтФинансовыхУсловий = Истина;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ТекЭлемент = "СоответствиеТоваровУсловиямЗакупок" Тогда
			
			Пока Выборка.Следующий() Цикл
				Если ЕстьОтклоненияОтЦеновыхУсловий Тогда
					Прервать;
				КонецЕсли;
				Если Выборка.ЕстьОшибкиМаксимальноДопустимаяЦена Тогда // Цена не должна превышать максимально допустимую
					
					ЕстьОтклоненияОтЦеновыхУсловий = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ТекЭлемент = "ВхождениеЦенВДопустимыйДиапазон" Тогда
			
			Пока Выборка.Следующий() Цикл
				Если ЕстьОтклоненияОтЦеновыхУсловий Тогда
					Прервать;
				КонецЕсли;
				Если Выборка.ЕстьОшибкиМаксимальноДопустимаяЦена Тогда
					ЕстьОтклоненияОтЦеновыхУсловий = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ТекЭлемент = "ДопустимостьРучныхСкидокНаценок" Тогда
			
			Пока Выборка.Следующий() Цикл
				Если ЕстьОтклоненияОтЦеновыхУсловий Тогда
					Прервать;
				КонецЕсли;
				Если Выборка.ЕстьОшибкиЗаполненияРучнойНаценки Тогда
					ЕстьОтклоненияОтЦеновыхУсловий = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ТекЭлемент = "КорректностьЭтаповГрафикаОплаты" Тогда
			
			ГрафикПоУмолчанию = Новый ТаблицаЗначений();
			ГрафикПоУмолчанию.Колонки.Добавить("ВариантОплаты");
			ГрафикПоУмолчанию.Колонки.Добавить("ВариантОтсчета");
			ГрафикПоУмолчанию.Колонки.Добавить("ДатаПлатежа");
			ГрафикПоУмолчанию.Колонки.Добавить("ПроцентПлатежа");
			ГрафикПоУмолчанию.Колонки.Добавить("СуммаПлатежа");
			ГрафикПоУмолчанию.Колонки.Добавить("ПроцентЗалогаЗаТару");
			ГрафикПоУмолчанию.Колонки.Добавить("СуммаЗалогаЗаТару");
			ГрафикПоУмолчанию.Колонки.Добавить("Сдвиг");
			
			Если Выборка.Следующий() 
				И НЕ Выборка.НакладнаяПоЗаказам Тогда
				ПараметрыЗаполнения = ЭтапыОплатыСервер.ПараметрыЗаполненияЭтаповОплаты();
				ПараметрыЗаполнения.ЭтоРасчетыСКлиентами = Ложь;
				ПараметрыЗаполнения.НакладнаяПоЗаказам   = Ложь;
				ПараметрыЗаполнения.ПорядокРасчетов      = Выборка.ПорядокРасчетов;
				ПараметрыЗаполнения.ЭтоЗаказ             = Выборка.ЭтоЗаказ;
				ПараметрыЗаполнения.ДатаЗаказа           = ?(Выборка.ЭтоЗаказ,Выборка.Дата,Дата(1,1,1));
				ПараметрыЗаполнения.ДатаСогласования     = Выборка.ДатаСогласования;
				ПараметрыЗаполнения.ЕстьДатаПереходаПраваСобственности = Ложь;
				Если Выборка.НеОтгружатьЧастями Тогда
					ПараметрыЗаполнения.ДатаОтгрузки = Выборка.ДатаОтгрузки;
					ЕстьЗалог = Ложь;
				Иначе
					Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ДокументЗакупки)) Тогда
						ТаблицаТовары = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДокументЗакупки).СуммыПоЗаказам(ДокументЗакупки);
					Иначе
						СсылкаНаДокументЗакупки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументЗакупки, "Ссылка");
						ТаблицаТовары = ОбщегоНазначения.МенеджерОбъектаПоСсылке(СсылкаНаДокументЗакупки).СуммыПоЗаказам(ДокументЗакупки);
					КонецЕсли;
					ПараметрыЗаполнения.ДатаОтгрузки = ТаблицаТовары;
					ЕстьЗалог = ТаблицаТовары.Итог("СуммаЗалогаЗаТару") <> 0;
				КонецЕсли;
				ПараметрыЗаполнения.Соглашение        = Выборка.Соглашение;
				ПараметрыЗаполнения.СуммаЗалогаЗаТару = ?(ЕстьЗалог,100,0);
				ПараметрыЗаполнения.СуммаОплаты       = 100;
				ЭтапыОплатыСервер.ЗаполнитьЭтапыОплаты(ГрафикПоУмолчанию, ПараметрыЗаполнения);
			КонецЕсли;
			
			СуммаПроцентовПлатежа = 0;
			СуммаПроцентовПлатежаШаблона = 0;
			
			Выборка.Сбросить();
			сч = 0;
			
			Пока Выборка.Следующий() Цикл
				
				Если ЕстьОтклоненияОтФинансовыхУсловий Тогда
					Прервать;
				КонецЕсли;
				
				Если Не Выборка.ЕстьОшибкиЗаполненияЭтапыГрафикаОплаты Тогда// В документе не заполнено соглашение или сумма документа равна 0
					Прервать;
				КонецЕсли;
				
				СтрокаГрафикаПоУмолчанию = ГрафикПоУмолчанию[сч];
				
				Если СтрокаГрафикаПоУмолчанию.ДатаПлатежа > Выборка.ДатаПлатежа Тогда // Дата платежа должна быть не меньше, чем в графике оплаты
					ЕстьОтклоненияОтФинансовыхУсловий = Истина;
					Прервать;
				КонецЕсли;
				
				СуммаПроцентовПлатежаШаблона = СуммаПроцентовПлатежаШаблона + СтрокаГрафикаПоУмолчанию.ПроцентПлатежа;
				СуммаПроцентовПлатежа = СуммаПроцентовПлатежа + Выборка.ПроцентПлатежа;
				
				Если СуммаПроцентовПлатежа > СуммаПроцентовПлатежаШаблона Тогда // Проценты до следующего платежа по графику не должны превышать проценты по графику соглашения
					
					ЕстьОтклоненияОтФинансовыхУсловий = Истина;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьУказанияСтавкиНДС" Тогда
			
			Пока Выборка.Следующий() Цикл
				ЕстьОтклоненияОтЦеновыхУсловий = Истина;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Проверяет корректность заполнения товаров документа возврата в соответствии 
// с реализованными товарами с учетом корректировок.
// Вызывается из процедуры документа "ОбработкаПроверкиЗаполнения".
//
// Параметры:
// ДокументЗакупки  - ДокументОбъект - объект, для которого необходимо осуществить проверки
// Отказ            - Булево - Флаг отказа от проведения документа
// ТаблицаПроверяемыеТовары - ТаблицаЗначений - Проверяются товары в таблице, если она передана.
//
Процедура ПроверитьКорректностьВозвращаемыхТоваров(Знач ДокументЗакупки, Отказ, ТаблицаПроверяемыеТовары = Неопределено) Экспорт
	
	Если ТаблицаПроверяемыеТовары = Неопределено Тогда
		ТаблицаПроверяемыеТовары = ДокументЗакупки.Товары.Выгрузить();
	КонецЕсли;
	
	Если ТаблицаПроверяемыеТовары.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Если ТипЗнч(ДокументЗакупки) = Тип("ДокументОбъект.АктОРасхожденияхПослеОтгрузки") Тогда
			ЗапросТекст = "
				|ВЫБРАТЬ
				|	ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
				|	ТаблицаТовары.Характеристика                                     КАК Характеристика,
				|	ВЫРАЗИТЬ(ТаблицаТовары.Назначение КАК Справочник.Назначения)     КАК Назначение,
				|	ТаблицаТовары.Серия                                              КАК Серия,
				|	ТаблицаТовары.КоличествоУпаковок - 
				|		ТаблицаТовары.КоличествоУпаковокПоДокументу                  КАК КоличествоУпаковок,
				|	ТаблицаТовары.Количество - ТаблицаТовары.КоличествоПоДокументу   КАК Количество,
				|	ТаблицаТовары.ДокументПоступления                                КАК ДокументПоступления
				|
				|ПОМЕСТИТЬ ВТТаблицаТовары
				|ИЗ
				|	&ТаблицаПроверяемыеТовары КАК ТаблицаТовары
				|ГДЕ
				|	НЕ ТаблицаТовары.ДокументПоступления = ЗНАЧЕНИЕ(Документ.ПриобретениеТоваровУслуг.ПустаяСсылка)
				|	И НЕ ТаблицаТовары.ДокументПоступления = НЕОПРЕДЕЛЕНО
				|	И (ТаблицаТовары.Количество-ТаблицаТовары.КоличествоПоДокументу) > 0
				|	И ТаблицаТовары.Действие В (ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ВозвратПерепоставленного),
				|		ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПокупкаПерепоставленного))
				|;";
		ИначеЕсли ТипЗнч(ДокументЗакупки) = Тип("ДокументСсылка.АктОРасхожденияхПослеОтгрузки") Тогда
			ЗапросТекст = "
				|ВЫБРАТЬ
				|	ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура КАК Справочник.Номенклатура)                 КАК Номенклатура,
				|	ТаблицаТовары.Характеристика                                                     КАК Характеристика,
				|	ВЫРАЗИТЬ(ТаблицаТовары.Назначение КАК Справочник.Назначения)                     КАК Назначение,
				|	ТаблицаТовары.Серия                                                              КАК Серия,
				|	ТаблицаТовары.КоличествоУпаковокПоАкту -
				|		ТаблицаТовары.КоличествоУпаковокОснование                                    КАК КоличествоУпаковок,
				|	(ТаблицаТовары.КоличествоУпаковокПоАкту -
				|	ТаблицаТовары.КоличествоУпаковокОснование) * ТаблицаТовары.КоэффициентУпаковки   КАК Количество,
				|	ТаблицаТовары.ДокументПоступления                                                КАК ДокументПоступления
				|
				|ПОМЕСТИТЬ ВТТаблицаТовары
				|ИЗ
				|	&ТаблицаПроверяемыеТовары КАК ТаблицаТовары
				|ГДЕ
				|	НЕ ТаблицаТовары.ДокументПоступления = ЗНАЧЕНИЕ(Документ.ПриобретениеТоваровУслуг.ПустаяСсылка)
				|	И НЕ ТаблицаТовары.ДокументПоступления = НЕОПРЕДЕЛЕНО
				|	И ТаблицаТовары.КоличествоУпаковокПоАкту-ТаблицаТовары.КоличествоУпаковокОснование > 0
				|;";
		ИначеЕсли ТипЗнч(ДокументЗакупки) = Тип("ДокументОбъект.ВозвратТоваровПоставщику") Тогда
			ЗапросТекст = "
				|ВЫБРАТЬ 
				|	ТаблицаТовары.Номенклатура                                   КАК Номенклатура,
				|	ТаблицаТовары.Характеристика                                 КАК Характеристика,
				|	ТаблицаТовары.Назначение                                     КАК Назначение,
				|	ТаблицаТовары.Серия                                          КАК Серия,
				|	ТаблицаТовары.СтатусУказанияСерий                            КАК СтатусУказанияСерий,
				|	ТаблицаТовары.КоличествоУпаковок                             КАК КоличествоУпаковок,
				|	ТаблицаТовары.Количество                                     КАК Количество,
				|	ТаблицаТовары.ДокументПоступления                            КАК ДокументПоступления
				|ПОМЕСТИТЬ ВТТаблицаТоварыИсходная
				|ИЗ &ТаблицаПроверяемыеТовары КАК ТаблицаТовары
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ТаблицаТовары.Номенклатура                                   КАК Номенклатура,
				|	ТаблицаТовары.Характеристика                                 КАК Характеристика,
				|	ВЫРАЗИТЬ(ТаблицаТовары.Назначение КАК Справочник.Назначения) КАК Назначение,
				|	ВЫБОР
				|		КОГДА ВЫРАЗИТЬ(ТаблицаТовары.ДокументПоступления КАК Документ.ПриобретениеТоваровУслуг).ХозяйственнаяОперация В (&ОперацииТоварыВПутиИНеотфактуровка)
				|			ТОГДА ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
				|		ИНАЧЕ 
				|			ВЫБОР КОГДА ТаблицаТовары.СтатусУказанияСерий = 14 
				|				ТОГДА ТаблицаТовары.Серия
				|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
				|		КОНЕЦ
				|	КОНЕЦ                                                        КАК Серия,
				|	ТаблицаТовары.КоличествоУпаковок                             КАК КоличествоУпаковок,
				|	ТаблицаТовары.Количество                                     КАК Количество,
				|	ТаблицаТовары.ДокументПоступления                            КАК ДокументПоступления
				|
				|ПОМЕСТИТЬ ВТТаблицаТовары
				|ИЗ
				|	ВТТаблицаТоварыИсходная КАК ТаблицаТовары
				|ГДЕ
				|	НЕ ТаблицаТовары.ДокументПоступления = ЗНАЧЕНИЕ(Документ.ПриобретениеТоваровУслуг.ПустаяСсылка)
				|	И НЕ ТаблицаТовары.ДокументПоступления = НЕОПРЕДЕЛЕНО
				|ИНДЕКСИРОВАТЬ ПО
				|	Номенклатура,
				|	Характеристика,
				|	Серия
				|;";
		ИначеЕсли ТипЗнч(ДокументЗакупки) = Тип("ДокументОбъект.ОтгрузкаТоваровСХранения") Тогда
			ЗапросТекст = "
				|ВЫБРАТЬ 
				|	ТаблицаТовары.Номенклатура                                   КАК Номенклатура,
				|	ТаблицаТовары.Характеристика                                 КАК Характеристика,
				|	ТаблицаТовары.Назначение                                     КАК Назначение,
				|	ТаблицаТовары.Серия                                          КАК Серия,
				|	ТаблицаТовары.СтатусУказанияСерий                            КАК СтатусУказанияСерий,
				|	ТаблицаТовары.КоличествоУпаковок                             КАК КоличествоУпаковок,
				|	ТаблицаТовары.Количество                                     КАК Количество,
				|	ТаблицаТовары.ДокументПоступления                            КАК ДокументПоступления
				|ПОМЕСТИТЬ ВТТаблицаТоварыИсходная
				|ИЗ &ТаблицаПроверяемыеТовары КАК ТаблицаТовары
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ТаблицаТовары.Номенклатура                                   КАК Номенклатура,
				|	ТаблицаТовары.Характеристика                                 КАК Характеристика,
				|	ВЫРАЗИТЬ(ТаблицаТовары.Назначение КАК Справочник.Назначения) КАК Назначение,
				|	ВЫБОР
				|		КОГДА ТаблицаТовары.СтатусУказанияСерий = 14
				|			ТОГДА ТаблицаТовары.Серия
				|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
				|	КОНЕЦ                                                        КАК Серия,
				|	ТаблицаТовары.КоличествоУпаковок                             КАК КоличествоУпаковок,
				|	ТаблицаТовары.Количество                                     КАК Количество,
				|	ТаблицаТовары.ДокументПоступления                            КАК ДокументПоступления
				|
				|ПОМЕСТИТЬ ВТТаблицаТовары
				|ИЗ
				|	ВТТаблицаТоварыИсходная КАК ТаблицаТовары
				|ГДЕ
				|	НЕ ТаблицаТовары.ДокументПоступления = ЗНАЧЕНИЕ(Документ.ПриемкаТоваровНаХранение.ПустаяСсылка)
				|ИНДЕКСИРОВАТЬ ПО
				|	Номенклатура,
				|	Характеристика,
				|	Серия
				|;";
		Иначе
			ЗапросТекст = "
				|ВЫБРАТЬ
				|	ТаблицаТовары.Номенклатура                                   КАК Номенклатура,
				|	ТаблицаТовары.Характеристика                                 КАК Характеристика,
				|	ВЫРАЗИТЬ(ТаблицаТовары.Назначение КАК Справочник.Назначения) КАК Назначение,
				|	ВЫБОР
				|		КОГДА ТаблицаТовары.СтатусУказанияСерий = 14
				|			ТОГДА ТаблицаТовары.Серия
				|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
				|	КОНЕЦ                                                        КАК Серия,
				|	ТаблицаТовары.КоличествоУпаковок                             КАК КоличествоУпаковок,
				|	ТаблицаТовары.Количество                                     КАК Количество,
				|	ТаблицаТовары.ДокументПоступления                            КАК ДокументПоступления
				|
				|ПОМЕСТИТЬ ВТТаблицаТовары
				|ИЗ
				|	&ТаблицаПроверяемыеТовары КАК ТаблицаТовары
				|ГДЕ
				|	НЕ ТаблицаТовары.ДокументПоступления = ЗНАЧЕНИЕ(Документ.ПриобретениеТоваровУслуг.ПустаяСсылка)
				|	И НЕ ТаблицаТовары.ДокументПоступления = НЕОПРЕДЕЛЕНО
				|ИНДЕКСИРОВАТЬ ПО
				|	Номенклатура,
				|	Характеристика,
				|	Серия
				|;";
		КонецЕсли;
		Запрос.Текст = ЗапросТекст + "
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура КАК Справочник.Номенклатура)	КАК Номенклатура,
		|	ТаблицаТовары.Характеристика			КАК Характеристика,
		|	ТаблицаТовары.Назначение                КАК Назначение,
		|	ТаблицаТовары.Серия						КАК Серия,
		|	ТаблицаТовары.ДокументПоступления		КАК ДокументПоступления,
		|	ЕСТЬNULL(ПриобретенияТоваровУслуг.ВернутьМногооборотнуюТару, ЛОЖЬ) КАК ВернутьМногооборотнуюТару,
		|	СУММА(ТаблицаТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
		|	СУММА(ТаблицаТовары.Количество) 		КАК Количество
		|ПОМЕСТИТЬ ПроверяемыеТовары
		|ИЗ
		|	ВТТаблицаТовары КАК ТаблицаТовары
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг КАК ПриобретенияТоваровУслуг
		|	ПО ПриобретенияТоваровУслуг.Ссылка = ТаблицаТовары.ДокументПоступления
		|
		|СГРУППИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	ТаблицаТовары.Назначение,
		|	Серия,
		|	ТаблицаТовары.ДокументПоступления,
		|	ЕСТЬNULL(ПриобретенияТоваровУслуг.ВернутьМногооборотнуюТару, ЛОЖЬ)
		|	
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Серия;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(КорректировкаПриобретения.Дата) КАК Дата,
		|	ПроверяемыеТовары.ДокументПоступления КАК СсылкаПоступления
		|ПОМЕСТИТЬ ДанныеКорректировки
		|ИЗ
		|	ПроверяемыеТовары КАК ПроверяемыеТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаПриобретения КАК КорректировкаПриобретения
		|		ПО (КорректировкаПриобретения.ДокументОснование = ПроверяемыеТовары.ДокументПоступления)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрДокументовСторно
		|		ПО КорректировкаПриобретения.Ссылка = РеестрДокументовСторно.СторнируемыйДокумент
		|			И РеестрДокументовСторно.Проведен
		|			И НЕ РеестрДокументовСторно.ДополнительнаяЗапись
		|ГДЕ
		|	КорректировкаПриобретения.Проведен
		|	И РеестрДокументовСторно.Ссылка ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	ПроверяемыеТовары.ДокументПоступления
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СсылкаПоступления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(КорректировкаПриобретения.Ссылка) КАК Ссылка,
		|	МАКСИМУМ(КорректировкаПриобретения.Ссылка.Дата) КАК Дата,
		|	КорректировкаПриобретения.Ссылка.ДокументОснование КАК СсылкаПоступления
		|ПОМЕСТИТЬ ДанныеПоследнейКорректировки
		|ИЗ
		|	Документ.КорректировкаПриобретения КАК КорректировкаПриобретения
		|ГДЕ
		|	(КорректировкаПриобретения.Ссылка.ДокументОснование, КорректировкаПриобретения.Ссылка.Дата) В
		|			(ВЫБРАТЬ
		|				ДанныеКорректировки.СсылкаПоступления КАК СсылкаПоступления,
		|				ДанныеКорректировки.Дата КАК Дата
		|			ИЗ
		|				ДанныеКорректировки)
		|	И КорректировкаПриобретения.Ссылка.Проведен
		|
		|СГРУППИРОВАТЬ ПО
		|	КорректировкаПриобретения.Ссылка.ДокументОснование
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка,
		|	СсылкаПоступления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА ДанныеПоследнейКорректировки.Ссылка ЕСТЬ NULL 
		|			ТОГДА ПроверяемыеТовары.ДокументПоступления
		|		ИНАЧЕ ДанныеПоследнейКорректировки.Ссылка
		|	КОНЕЦ КАК Ссылка
		|ПОМЕСТИТЬ СсылкиНаПоступления
		|ИЗ
		|	ПроверяемыеТовары КАК ПроверяемыеТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеПоследнейКорректировки КАК ДанныеПоследнейКорректировки
		|		ПО ПроверяемыеТовары.ДокументПоступления = ДанныеПоследнейКорректировки.СсылкаПоступления
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КорректировкаПриобретенияТовары.Номенклатура КАК Номенклатура,
		|	КорректировкаПриобретенияТовары.Характеристика КАК Характеристика,
		|	КорректировкаПриобретенияТовары.Серия КАК Серия,
		|	КорректировкаПриобретенияТовары.Назначение КАК Назначение,
		|	СУММА(КорректировкаПриобретенияТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
		|	СУММА(КорректировкаПриобретенияТовары.Количество) КАК Количество,
		|	СРЕДНЕЕ(КорректировкаПриобретенияТовары.Цена) КАК Цена,
		|	КорректировкаПриобретенияТовары.Ссылка.ДокументОснование КАК ДокументПоступления
		|ПОМЕСТИТЬ ДанныеПоступления
		|ИЗ
		|	Документ.КорректировкаПриобретения.Товары КАК КорректировкаПриобретенияТовары
		|
		|ГДЕ
		|	КорректировкаПриобретенияТовары.Ссылка.Проведен
		|	И (Номенклатура,Характеристика,Назначение,Серия) В 
		|	(ВЫБРАТЬ 
		|		ПроверяемыеТовары.Номенклатура КАК Номенклатура,
		|		ПроверяемыеТовары.Характеристика КАК Характеристика,
		|		ПроверяемыеТовары.Назначение КАК Назначение,
		|		ПроверяемыеТовары.Серия КАК Серия
		|	ИЗ
		|		ПроверяемыеТовары КАК ПроверяемыеТовары	
		|	) И  (Ссылка) В 
		|	(ВЫБРАТЬ 
		|		СсылкиНаПоступления.Ссылка КАК Ссылка
		|	ИЗ
		|		СсылкиНаПоступления КАК СсылкиНаПоступления
		|	) 
		|
		|СГРУППИРОВАТЬ ПО
		|	КорректировкаПриобретенияТовары.Номенклатура,
		|	КорректировкаПриобретенияТовары.Характеристика,
		|	КорректировкаПриобретенияТовары.Серия,
		|	КорректировкаПриобретенияТовары.Назначение,		
		|	КорректировкаПриобретенияТовары.Ссылка.ДокументОснование
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ПриобретениеТоваровУслугТовары.Номенклатура,
		|	ПриобретениеТоваровУслугТовары.Характеристика,
		|	ПриобретениеТоваровУслугТовары.Серия,
		|	ПриобретениеТоваровУслугТовары.Назначение,
		|	СУММА(ПриобретениеТоваровУслугТовары.КоличествоУпаковок),
		|	СУММА(ПриобретениеТоваровУслугТовары.Количество),
		|	СРЕДНЕЕ(ПриобретениеТоваровУслугТовары.Цена),
		|	ПриобретениеТоваровУслугТовары.Ссылка
		|ИЗ
		|	Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслугТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрДокументовСторно
		|		ПО ПриобретениеТоваровУслугТовары.Ссылка = РеестрДокументовСторно.СторнируемыйДокумент
		|			И РеестрДокументовСторно.Проведен
		|			И НЕ РеестрДокументовСторно.ДополнительнаяЗапись
		|
		|ГДЕ
		|	ПриобретениеТоваровУслугТовары.Ссылка.Проведен
		|	И (Номенклатура,Характеристика,Назначение) В 
		|	(ВЫБРАТЬ 
		|		ПроверяемыеТовары.Номенклатура КАК Номенклатура,
		|		ПроверяемыеТовары.Характеристика КАК Характеристика,
		|		ПроверяемыеТовары.Назначение КАК Назначение
		|	ИЗ
		|		ПроверяемыеТовары КАК ПроверяемыеТовары
		|	) И  (ПриобретениеТоваровУслугТовары.Ссылка) В 
		|	(ВЫБРАТЬ 
		|		СсылкиНаПоступления.Ссылка КАК Ссылка
		|	ИЗ
		|		СсылкиНаПоступления КАК СсылкиНаПоступления
		|	) 
		|	И РеестрДокументовСторно.Ссылка ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	ПриобретениеТоваровУслугТовары.Номенклатура,
		|	ПриобретениеТоваровУслугТовары.Характеристика,
		|	ПриобретениеТоваровУслугТовары.Серия,
		|	ПриобретениеТоваровУслугТовары.Назначение,
		|	ПриобретениеТоваровУслугТовары.Ссылка
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ПриемкаТоваровНаХранение.Номенклатура,
		|	ПриемкаТоваровНаХранение.Характеристика,
		|	ПриемкаТоваровНаХранение.Серия,
		|	ПриемкаТоваровНаХранение.Назначение,
		|	СУММА(ПриемкаТоваровНаХранение.КоличествоУпаковок),
		|	СУММА(ПриемкаТоваровНаХранение.Количество),
		|	СРЕДНЕЕ(ПриемкаТоваровНаХранение.Цена),
		|	ПриемкаТоваровНаХранение.Ссылка
		|ИЗ
		|	Документ.ПриемкаТоваровНаХранение.Товары КАК ПриемкаТоваровНаХранение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрДокументовСторно
		|		ПО ПриемкаТоваровНаХранение.Ссылка = РеестрДокументовСторно.СторнируемыйДокумент
		|			И РеестрДокументовСторно.Проведен
		|			И НЕ РеестрДокументовСторно.ДополнительнаяЗапись
		|
		|ГДЕ
		|	ПриемкаТоваровНаХранение.Ссылка.Проведен
		|	И (Номенклатура,Характеристика,Назначение,Серия) В 
		|	(ВЫБРАТЬ 
		|		ПроверяемыеТовары.Номенклатура КАК Номенклатура,
		|		ПроверяемыеТовары.Характеристика КАК Характеристика,
		|		ПроверяемыеТовары.Назначение КАК Назначение,
		|		ПроверяемыеТовары.Серия КАК Серия
		|	ИЗ
		|		ПроверяемыеТовары КАК ПроверяемыеТовары
		|	) И  (ПриемкаТоваровНаХранение.Ссылка) В 
		|	(ВЫБРАТЬ 
		|		СсылкиНаПоступления.Ссылка КАК Ссылка
		|	ИЗ
		|		СсылкиНаПоступления КАК СсылкиНаПоступления
		|	) 
		|	И РеестрДокументовСторно.Ссылка ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	ПриемкаТоваровНаХранение.Номенклатура,
		|	ПриемкаТоваровНаХранение.Характеристика,
		|	ПриемкаТоваровНаХранение.Серия,
		|	ПриемкаТоваровНаХранение.Назначение,
		|	ПриемкаТоваровНаХранение.Ссылка
		|
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	ДокументПоступления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПроверяемыеТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаПроверяемыеТовары.Характеристика КАК Характеристика,
		|	ТаблицаПроверяемыеТовары.Серия КАК Серия,
		|	ТаблицаПроверяемыеТовары.Назначение КАК Назначение,
		|	СУММА(ТаблицаПроверяемыеТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
		|	СУММА(ТаблицаПроверяемыеТовары.Количество) КАК Количество,
		|	ТаблицаПроверяемыеТовары.ДокументПоступления КАК ДокументПоступления
		|
		|ПОМЕСТИТЬ ДанныеДокументовВозврата
		|ИЗ
		|	ПроверяемыеТовары КАК ПроверяемыеТовары
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		Документ.ВозвратТоваровПоставщику.Товары КАК ТаблицаПроверяемыеТовары
		|	ПО
		|		(ТаблицаПроверяемыеТовары.ДокументПоступления = ПроверяемыеТовары.ДокументПоступления)
		|		И ПроверяемыеТовары.Номенклатура = ТаблицаПроверяемыеТовары.Номенклатура
		|		И ПроверяемыеТовары.Характеристика = ТаблицаПроверяемыеТовары.Характеристика
		|		И ПроверяемыеТовары.Серия = ТаблицаПроверяемыеТовары.Серия
		|		И ПроверяемыеТовары.Назначение = ТаблицаПроверяемыеТовары.Назначение
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.РеестрДокументов КАК РеестрДокументовСторно
		|	ПО
		|		ТаблицаПроверяемыеТовары.Ссылка = РеестрДокументовСторно.СторнируемыйДокумент
		|			И РеестрДокументовСторно.Проведен
		|			И НЕ РеестрДокументовСторно.ДополнительнаяЗапись
		|ГДЕ
		|	ТаблицаПроверяемыеТовары.Ссылка.Проведен
		|	И РеестрДокументовСторно.Ссылка ЕСТЬ NULL
		|	И ТаблицаПроверяемыеТовары.Ссылка <> &ЭтотВозвратСсылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаПроверяемыеТовары.Номенклатура,
		|	ТаблицаПроверяемыеТовары.Характеристика,
		|	ТаблицаПроверяемыеТовары.Серия,
		|	ТаблицаПроверяемыеТовары.Назначение,
		|	ТаблицаПроверяемыеТовары.ДокументПоступления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаПроверяемыеТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаПроверяемыеТовары.Характеристика КАК Характеристика,
		|	ТаблицаПроверяемыеТовары.Серия КАК Серия,
		|	ТаблицаПроверяемыеТовары.Назначение КАК Назначение,
		|	СУММА(ТаблицаПроверяемыеТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
		|	СУММА(ТаблицаПроверяемыеТовары.Количество) КАК Количество,
		|	ТаблицаПроверяемыеТовары.ДокументПоступления КАК ДокументПоступления
		|
		|ИЗ
		|	ПроверяемыеТовары КАК ПроверяемыеТовары
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		Документ.ОтгрузкаТоваровСХранения.Товары КАК ТаблицаПроверяемыеТовары
		|	ПО
		|		(ТаблицаПроверяемыеТовары.ДокументПоступления = ПроверяемыеТовары.ДокументПоступления)
		|		И ПроверяемыеТовары.Номенклатура = ТаблицаПроверяемыеТовары.Номенклатура
		|		И ПроверяемыеТовары.Характеристика = ТаблицаПроверяемыеТовары.Характеристика
		|		И ПроверяемыеТовары.Серия = ТаблицаПроверяемыеТовары.Серия
		|		И ПроверяемыеТовары.Назначение = ТаблицаПроверяемыеТовары.Назначение
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.РеестрДокументов КАК РеестрДокументовСторно
		|	ПО
		|		ТаблицаПроверяемыеТовары.Ссылка = РеестрДокументовСторно.СторнируемыйДокумент
		|			И РеестрДокументовСторно.Проведен
		|			И НЕ РеестрДокументовСторно.ДополнительнаяЗапись
		|ГДЕ
		|	ТаблицаПроверяемыеТовары.Ссылка.Проведен
		|	И РеестрДокументовСторно.Ссылка ЕСТЬ NULL
		|	И ТаблицаПроверяемыеТовары.Ссылка <> &ЭтотВозвратСсылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаПроверяемыеТовары.Номенклатура,
		|	ТаблицаПроверяемыеТовары.Характеристика,
		|	ТаблицаПроверяемыеТовары.Серия,
		|	ТаблицаПроверяемыеТовары.Назначение,
		|	ТаблицаПроверяемыеТовары.ДокументПоступления
		|
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Серия,
		|	ДокументПоступления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПроверяемыеТовары.Номенклатура КАК Номенклатура,
		|	ЕСТЬNULL(ДанныеПоступления.Количество, 0) - ЕСТЬNULL(ДанныеДокументовВозврата.Количество, 0) - ЕСТЬNULL(ПроверяемыеТовары.Количество, 0) КАК Количество,
		|	ПроверяемыеТовары.Характеристика КАК Характеристика,
		|	ПроверяемыеТовары.Серия КАК Серия,
		|	ПроверяемыеТовары.Назначение КАК Назначение,
		|	ПроверяемыеТовары.ДокументПоступления КАК ДокументПоступления,
		|	ПроверяемыеТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ПроверяемыеТовары.ДокументПоступления.Номер КАК НомерПоступления
		|ИЗ
		|	ДанныеПоступления КАК ДанныеПоступления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеДокументовВозврата КАК ДанныеДокументовВозврата
		|		ПО ДанныеПоступления.ДокументПоступления = ДанныеДокументовВозврата.ДокументПоступления
		|			И ДанныеПоступления.Номенклатура = ДанныеДокументовВозврата.Номенклатура
		|			И ДанныеПоступления.Характеристика = ДанныеДокументовВозврата.Характеристика
		|			И ДанныеПоступления.Серия = ДанныеДокументовВозврата.Серия
		|			И ДанныеПоступления.Назначение = ДанныеДокументовВозврата.Назначение
		|		ПОЛНОЕ СОЕДИНЕНИЕ ПроверяемыеТовары КАК ПроверяемыеТовары
		|		ПО ДанныеПоступления.ДокументПоступления = ПроверяемыеТовары.ДокументПоступления
		|			И ДанныеПоступления.Номенклатура = ПроверяемыеТовары.Номенклатура
		|			И ДанныеПоступления.Характеристика = ПроверяемыеТовары.Характеристика
		|			И (ДанныеПоступления.Серия = ПроверяемыеТовары.Серия
		|				ИЛИ ДанныеПоступления.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|					И ПроверяемыеТовары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка))
		|			И ДанныеПоступления.Назначение = ПроверяемыеТовары.Назначение
		|		
		|ГДЕ
		|	ЕСТЬNULL(ДанныеПоступления.Количество, 0) - ЕСТЬNULL(ДанныеДокументовВозврата.Количество, 0) - ЕСТЬNULL(ПроверяемыеТовары.Количество, 0) < 0
		|	И (ПроверяемыеТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
		|	ИЛИ (ПроверяемыеТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара) 
		|		И НЕ ПроверяемыеТовары.ВернутьМногооборотнуюТару))
		|";
		
		ОперацииТоварыВПутиИНеотфактуровка = Новый Массив();
		ОперацииТоварыВПутиИНеотфактуровка.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаТоварыВПути);
		ОперацииТоварыВПутиИНеотфактуровка.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпортуТоварыВПути);
		ОперацииТоварыВПутиИНеотфактуровка.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСТоварыВПути);
		ОперацииТоварыВПутиИНеотфактуровка.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаНеотфактурованнаяПоставка);
		ОперацииТоварыВПутиИНеотфактуровка.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСНеотфактурованнаяПоставка);
		ОперацииТоварыВПутиИНеотфактуровка.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаФактуровкаПоставки);
		
		Запрос.УстановитьПараметр("ТаблицаПроверяемыеТовары", ТаблицаПроверяемыеТовары);
		Запрос.УстановитьПараметр("ЭтотВозвратСсылка", ДокументЗакупки.Ссылка);
		Запрос.УстановитьПараметр("ОперацииТоварыВПутиИНеотфактуровка", ОперацииТоварыВПутиИНеотфактуровка);
		
		УстановитьПривилегированныйРежим(Истина);
		Результат = Запрос.Выполнить().Выгрузить();
		Если Результат.Количество() > 0 Тогда
			Отказ = Истина;
			СообщитьОбОшибкахКорректностиВозвращаемыхТоваров(Результат);
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры

// Формирует отчет "Отклонения от условий закупок" путем выполнения пакета запросов. 
// 
// Параметры:
// 	ДокументЗакупки  - ДокументОбъект -Документ, для которого необходимо осуществить проверки
// 	ТаблицаОтчета  - ТабличныйДокумент - Табличный документ отчета.
//
Процедура СформироватьОтчетОтклоненияОтУсловийЗакупок(Знач ДокументЗакупки, ТаблицаОтчета) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Проверим нужно ли проверять диапазон допустимых цен
	ВидМаксимальноДопустимыхЦенЗакупки  = Константы.ВидМаксимальноДопустимыхЦенЗакупки.Получить();
	ПроверятьДиапазонЦен                = ЗначениеЗаполнено(ВидМаксимальноДопустимыхЦенЗакупки);
	ЕстьОшибкиСоглашениеНеУказано       = Ложь;
	ИспользоватьРучныеСкидки            = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВЗакупках");
	ИспользоватьНоменклатуруПартнеров = ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруПартнеров");
	ИспользоватьСоглашенияСПоставщиками = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСПоставщиками");
	ИспользуетсяЦенообразование25       = ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25(ДокументЗакупки.Дата);
	
	ВозвратМногооборотнойТары          = Ложь;
	
	// Заполним массив необходимых проверок в зависимости от типа документа
	
	МассивПроверок = Новый Массив();
	ИмяТаблицы     = ДокументЗакупки.Метаданные().ПолноеИмя();
	
	// ЗАКАЗ ПОСТАВЩИКУ
	Если ИмяТаблицы = "Документ.ЗаказПоставщику" Тогда
		
		СоглашениеУказано = ЗначениеЗаполнено(ДокументЗакупки.Соглашение);
		
		МассивПроверок.Добавить("ВременнаяТаблицаДокументЗакупки");
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		
		ВозвратМногооборотнойТары = ДокументЗакупки.ВернутьМногооборотнуюТару;
		ТребуетсяЗалогЗаТару = ДокументЗакупки.ТребуетсяЗалогЗаТару;
		
		МассивПроверок.Добавить("ВременнаяТаблицаКурсыВалют");
			
		Если СоглашениеУказано Тогда
			
			МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
			МассивПроверок.Добавить("СоответствиеШапкиУсловиямЗакупок");
			МассивПроверок.Добавить("СоответствиеТоваровУсловиямЗакупок");
			
		Иначе
			
			ЕстьОшибкиСоглашениеНеУказано = ИспользоватьСоглашенияСПоставщиками;
			
		КонецЕсли;
			
		Если ИспользоватьРучныеСкидки И ДокументЗакупки.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПриемНаКомиссию Тогда
			МассивПроверок.Добавить("ДопустимостьРучныхСкидокНаценок");
		КонецЕсли;
		
		Если ПроверятьДиапазонЦен Тогда
			Если ИспользуетсяЦенообразование25 Тогда
				МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазонПредварительнаяОбработка");
			КонецЕсли;
			МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазон");
		КонецЕсли;
		
		Если ДокументЗакупки.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПриемНаКомиссию
			И ДокументЗакупки.СуммаДокумента <> 0
			И ДокументЗакупки.ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным Тогда
			
			МассивПроверок.Добавить("ВременнаяТаблицаЭтапыГрафикаОплаты");
			МассивПроверок.Добавить("КорректностьЭтаповГрафикаОплаты");
			
		КонецЕсли;
		
	// ПРИОБРЕТЕНИЕ ТОВАРОВ И УСЛУГ
		
	ИначеЕсли ИмяТаблицы = "Документ.ПриобретениеТоваровУслуг" Тогда
		
		СоглашениеУказано     = ЗначениеЗаполнено(ДокументЗакупки.Соглашение);
		ЕстьОшибкиСоглашениеНеУказано = ИспользоватьСоглашенияСПоставщиками
		                                И Не СоглашениеУказано
		                                И Не ДокументЗакупки.ПоступлениеПоЗаказам;
		
		МассивПроверок.Добавить("ВременнаяТаблицаДокументЗакупки");
		
		Если Не ДокументЗакупки.ПоступлениеПоЗаказам И СоглашениеУказано Тогда
			МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
			МассивПроверок.Добавить("СоответствиеШапкиУсловиямЗакупок");
		КонецЕсли;
		
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		
		ВозвратМногооборотнойТары = ДокументЗакупки.ВернутьМногооборотнуюТару;
		ТребуетсяЗалогЗаТару = ДокументЗакупки.ТребуетсяЗалогЗаТару;
		
		МассивПроверок.Добавить("ВременнаяТаблицаКурсыВалют");
		
		Если СоглашениеУказано Тогда
			МассивПроверок.Добавить("СоответствиеТоваровУсловиямЗакупок");
		КонецЕсли;
		
		Если СоглашениеУказано И ИспользоватьРучныеСкидки И ДокументЗакупки.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПриемНаКомиссию Тогда
			МассивПроверок.Добавить("ДопустимостьРучныхСкидокНаценок");
		КонецЕсли;
			
		Если ПроверятьДиапазонЦен Тогда
			Если ИспользуетсяЦенообразование25 Тогда
				МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазонПредварительнаяОбработка");
			КонецЕсли;
			МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазон");
		КонецЕсли;
		
	// ПРИЕМКА ТОВАРОВ НА ХРАНЕНИЕ
		
	ИначеЕсли ИмяТаблицы = "Документ.ПриемкаТоваровНаХранение" Тогда
		
		СоглашениеУказано     = ЗначениеЗаполнено(ДокументЗакупки.Соглашение);
		ЕстьОшибкиСоглашениеНеУказано = ИспользоватьСоглашенияСПоставщиками
		                                И Не СоглашениеУказано
		                                И Не ДокументЗакупки.ПоступлениеПоЗаказам;
		
		МассивПроверок.Добавить("ВременнаяТаблицаДокументЗакупки");
		
		Если Не ДокументЗакупки.ПоступлениеПоЗаказам И СоглашениеУказано Тогда
			МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
			МассивПроверок.Добавить("СоответствиеШапкиУсловиямЗакупок");
		КонецЕсли;
		
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		
		ВозвратМногооборотнойТары = ДокументЗакупки.ВернутьМногооборотнуюТару;
		ТребуетсяЗалогЗаТару = Ложь;
		
		Если СоглашениеУказано Тогда
			МассивПроверок.Добавить("СоответствиеТоваровУсловиямЗакупок");
		КонецЕсли;
		
		Если ПроверятьДиапазонЦен Тогда
			Если ИспользуетсяЦенообразование25 Тогда
				МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазонПредварительнаяОбработка");
			КонецЕсли;
			МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазон");
		КонецЕсли;
		
	КонецЕсли;
	
	// Сформируем текст запроса необходимых проверок в соответствие с массивом проверок
	
	ТекстЗапроса     = "";
	ПараметрыЗапроса = Новый Структура();

	ПараметрыЗапроса.Вставить("Дата",                      ДокументЗакупки.Дата);
	ПараметрыЗапроса.Вставить("Ссылка",                    ДокументЗакупки.Ссылка);
	ПараметрыЗапроса.Вставить("ВозвратМногооборотнойТары", ВозвратМногооборотнойТары);
	ПараметрыЗапроса.Вставить("ТребуетсяЗалогЗаТару",      ТребуетсяЗалогЗаТару);
	ПараметрыЗапроса.Вставить("БазоваяВалюта", ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(ДокументЗакупки.Организация));
	ПараметрыЗапроса.Вставить("СтранаРегистрации", ЗначениеНастроекКлиентСерверПовтИсп.СтранаРегистрацииОрганизации(ДокументЗакупки.Организация));
		
	Для Каждого ТекЭлемент Из МассивПроверок Цикл
		
		Если ТекЭлемент = "ВременнаяТаблицаДокументЗакупки" Тогда
			
			СформироватьЗапросВременнаяТаблицаШапкаДокументаЗакупки(ТекстЗапроса, ПараметрыЗапроса, ДокументЗакупки);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаТовары" Тогда
			
			СформироватьЗапросВременнаяТаблицаТоварыДокументаЗакупки(ТекстЗапроса, ПараметрыЗапроса, ДокументЗакупки, ИмяТаблицы);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаСкладыКорректныеПоСоглашению" Тогда
			
			СформироватьЗапросВременнаяТаблицаСкладыКорректныеПоСоглашению(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "СоответствиеШапкиУсловиямЗакупок" Тогда
			
			СформироватьЗапросШапкаДокументаЗакупки(ТекстЗапроса, ИмяТаблицы);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаЭтапыГрафикаОплаты" Тогда
			
			СформироватьЗапросВременнаяТаблицаЭтапыОплаты(ТекстЗапроса, ПараметрыЗапроса, ДокументЗакупки);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаКурсыВалют" Тогда
			
			СформироватьЗапросВременнаяТаблицаКурсыВалют(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "СоответствиеТоваровУсловиямЗакупок" Тогда
			
			СформироватьЗапросТоварыДокументаЗакупки(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "ВхождениеЦенВДопустимыйДиапазон" Тогда
			
			Если ИспользуетсяЦенообразование25 Тогда
				СформироватьЗапросВхождениеЦенВДопустимыйДиапазон2_5(ТекстЗапроса);
			Иначе
				СформироватьЗапросВхождениеЦенВДопустимыйДиапазон(ТекстЗапроса);
			КонецЕсли;
			
		ИначеЕсли ТекЭлемент = "ДопустимостьРучныхСкидокНаценок" Тогда
			
			СформироватьЗапросДопустимостьРучныхСкидокНаценок(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "КорректностьЭтаповГрафикаОплаты" Тогда
			
			СформироватьЗапросКорректностьЭтаповГрафикаОплаты(ТекстЗапроса);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
		УстановитьПривилегированныйРежим(Ложь);
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос(ТекстЗапроса);
	
	Для Каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ,ПараметрЗапроса.Значение);
	КонецЦикла;
	
	МассивРезультатов = Запрос.ВыполнитьПакет(); 
	
	МассивОтклоненийШапки         = Новый Массив;
	ДеревоОтклоненийТовары        = Отчеты.ОтклоненияОтУсловийЗакупок.ИнициализироватьДеревоОтклонений();
	ДеревоОтклоненийЭтапыОплаты   = Отчеты.ОтклоненияОтУсловийЗакупок.ИнициализироватьДеревоОтклонений();
	
	Для ТекИндекс = 0 По МассивРезультатов.Количество()-1 Цикл
		
		Выборка = МассивРезультатов[ТекИндекс].Выбрать();
		
		Если МассивПроверок[ТекИндекс] = "СоответствиеШапкиУсловиямЗакупок" Тогда
			
			СообщитьОбОшибкахШапкаДокументаЗакупки(Выборка, ДокументЗакупки, Ложь, МассивОтклоненийШапки);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "СоответствиеТоваровУсловиямЗакупок" Тогда
			
			СообщитьОбОшибкахТоварыДокументаЗакупки(Выборка, ДокументЗакупки, Ложь, ДеревоОтклоненийТовары);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "ВхождениеЦенВДопустимыйДиапазон" Тогда
			
			СообщитьОбОшибкахВхождениеЦенВДопустимыйДиапазон(Выборка, ДокументЗакупки, Ложь, ИспользоватьРучныеСкидки, ДеревоОтклоненийТовары);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "ДопустимостьРучныхСкидокНаценок" Тогда
			
			СообщитьОбОшибкахДопустимостьРучныхСкидокНаценок(Выборка, ДокументЗакупки, Ложь, ДеревоОтклоненийТовары);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьЭтаповГрафикаОплаты" Тогда
			
			СообщитьОбОшибкахКорректностьЭтаповГрафикаОплаты(Выборка, ДокументЗакупки, Ложь, ДеревоОтклоненийЭтапыОплаты, МассивОтклоненийШапки);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЕстьОтклонения = МассивОтклоненийШапки.Количество() > 0 
		ИЛИ ДеревоОтклоненийТовары.Строки.Количество() > 0 
		ИЛИ ДеревоОтклоненийЭтапыОплаты.Строки.Количество() > 0;
	
	Отчеты.ОтклоненияОтУсловийЗакупок.ВывестиЗаголовокОтчета(ТаблицаОтчета, ЕстьОтклонения, ЕстьОшибкиСоглашениеНеУказано);
	
	Если МассивОтклоненийШапки.Количество() > 0 Тогда
		Отчеты.ОтклоненияОтУсловийЗакупок.ВывестиОтклоненияВОбластьШапки(МассивОтклоненийШапки, ТаблицаОтчета);
	КонецЕсли;
	
	Если ДеревоОтклоненийТовары.Строки.Количество() > 0 Тогда
		Отчеты.ОтклоненияОтУсловийЗакупок.ВывестиОтклоненияТоварыДокументаЗакупки(ДокументЗакупки, ДеревоОтклоненийТовары, ТаблицаОтчета);
	КонецЕсли;
	
	Если ДеревоОтклоненийЭтапыОплаты.Строки.Количество() > 0 Тогда
		Отчеты.ОтклоненияОтУсловийЗакупок.ВывестиОтклоненияЭтапыОплатыДокументаЗакупки(ДокументЗакупки, ДеревоОтклоненийЭтапыОплаты, ТаблицаОтчета);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Выводит сообщения о том, что есть корректировки на основании документа.
//
// Параметры:
// ДокументЗакупки - ДокументОбъект - объект, для которого необходимо вывести сообщения об ошибках
// Отказ           - Булево - Флаг отказа от проведения документа.
//
Процедура СообщитьОбОшибкахОтменаПроведенияЕстьКорректировки(Знач ДокументЗакупки, Отказ) Экспорт

	ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'На основании документа %1 введена корректировка приобретения. Отмена проведения невозможна.'"),
		ДокументЗакупки);
	
	ОбщегоНазначения.СообщитьПользователю(
			ТекстОшибки,
			ДокументЗакупки,
			,
			,
			Отказ);
	
КонецПроцедуры

// Выводит сообщения о том, что основание документа не проведено.
//
// Параметры:
// 	ДокументЗакупки - ДокументСсылка - Документ-основание корректировки.
// 	Отказ           - Булево - Флаг отказа от проведения документа.
//
Процедура СообщитьОбОшибкахПроведенияПоНепроведенномуОснованию(Знач ДокументЗакупки, Отказ) Экспорт

	ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Документ-основание %1 не проведен. Проведение корректировки невозможно.'"),
		ДокументЗакупки);
	
	ОбщегоНазначения.СообщитьПользователю(
		ТекстОшибки,
		ДокументЗакупки,
		,
		,
		Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСоСкидкамиВДокументахЗакупки

 // Осуществляет заполнение условий цен и цен в тч Товары по виду цен по выделенным строкам.
//
// Параметры:
// 		Объект - ДокументОбъект - объект, для которого необходимо отменить ручные скидки
// 		ИмяТабличнойЧасти  - Строка - имя табличной части объекта, в которой необходимо отменить ручные скидки
// 		ОчищатьСуммыВзаиморасчетов - Булево - Истина, если в табличной части присутствует сумма взаиморасчетов.
//
Процедура ОтменитьРучныеСкидки(Объект, ИмяТабличнойЧасти, ОчищатьСуммыВзаиморасчетов = Ложь) Экспорт
	
	СкидкиИзменены = Ложь;
	
	Для Каждого СтрокаТЧ Из Объект[ИмяТабличнойЧасти] Цикл
		
		Если СтрокаТЧ.СуммаРучнойСкидки <> 0 Или СтрокаТЧ.ПроцентРучнойСкидки <> 0 Тогда
			
			СтрокаТЧ.СуммаРучнойСкидки = 0;
			СтрокаТЧ.ПроцентРучнойСкидки = 0;
			Ценообразование.ПересчитатьСуммыВСтроке(СтрокаТЧ, Ложь, Ложь, Истина, Объект.ЦенаВключаетНДС);
			СкидкиИзменены = Истина;
			Если ОчищатьСуммыВзаиморасчетов Тогда
				СтрокаТЧ.СуммаВзаиморасчетов = 0;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СкидкиИзменены Тогда
		Объект.СуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(Объект[ИмяТабличнойЧасти], Объект.ЦенаВключаетНДС);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСНоменклатуройПоставщикаВДокументахЗакупки

// Помещает таблицу товаров во временное хранилище
// 
// Параметры:
//  Товары - ДанныеФормыКоллекция - таблица товаров, которую необходимо поместить во временное хранилище.
//
// Возвращаемое значение:
//  Строка - Адрес таблицы товаров во временном хранилище.
//
Функция ПоместитьТоварыВоВременноеХранилище(Товары) Экспорт
	
	МассивСтрок = Новый Массив();
	
	Для Каждого ТекСтрока Из Товары Цикл
		Если ЗначениеЗаполнено(ТекСтрока.НоменклатураПартнера) И Не ЗначениеЗаполнено(ТекСтрока.Номенклатура) Тогда
			МассивСтрок.Добавить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСтрок.Количество() = 0 Тогда
		АдресТоваровВоВременномХранилище = Неопределено;
	Иначе
		НоменклатураПартнера = Товары.Выгрузить(МассивСтрок, "НомерСтроки,НоменклатураПартнера");
		АдресТоваровВоВременномХранилище = ПоместитьВоВременноеХранилище(НоменклатураПартнера);
	КонецЕсли;
	
	Возврат АдресТоваровВоВременномХранилище;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииПолученияЗначенийРеквизитовПоУмолчанию

// Возвращает структуру по ответственному лицу указанного склада
// В случае если склад является группой, возвращает значения,
// 		использовавшиеся в последнем документе указанного менеджера с указанным складом.
//
// Параметры:
// 		Склад - СправочникСсылка.Склады - Склад.
// 		Менеджер - СправочникСсылка.Пользователи - Менеджер.
//
// Возвращаемое значение:
// 		Структура - Структура с полями:
// 		* Ответственный - СправочникСсылка.ФизическиеЛица - 
// 		* ОтветственныйДолжность - Строка - 
// 		Неопределено - если данные заполнения не найдены 
//
Функция ПолучитьОтветственногоПоСкладу(Склад, Менеджер) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Склад) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ Справочники.Склады.ЭтоГруппа(Склад) Тогда
		СтруктураОтветственного = ЗначениеНастроекПовтИсп.ПолучитьОтветственногоПоСкладу(Склад);
		Если СтруктураОтветственного <> Неопределено Тогда
			Возврат СтруктураОтветственного;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"Выбрать
	|	ПоследнийОтветственный.Ответственный КАК Ответственный,
	|	ПоследнийОтветственный.ОтветственныйДолжность КАК ОтветственныйДолжность,
	|	ПоследнийОтветственный.МоментВремени КАК МоментВремени
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ПриобретениеТоваровУслуг.Принял КАК Ответственный,
	|		ПриобретениеТоваровУслуг.ПринялДолжность КАК ОтветственныйДолжность,
	|		ПриобретениеТоваровУслуг.МоментВремени КАК МоментВремени
	|	ИЗ
	|		Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
	|	ГДЕ
	|		ПриобретениеТоваровУслуг.Склад = &Склад
	|		И ПриобретениеТоваровУслуг.Менеджер = &Менеджер
	|		И ПриобретениеТоваровУслуг.Проведен = ИСТИНА
	|	УПОРЯДОЧИТЬ ПО
	|		МоментВремени УБЫВ) как ПоследнийОтветственный
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|Выбрать
	|	ПоследнийОтветственный.Ответственный КАК Ответственный,
	|	ПоследнийОтветственный.ОтветственныйДолжность КАК ОтветственныйДолжность,
	|	ПоследнийОтветственный.МоментВремени КАК МоментВремени
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ПриемкаТоваровНаХранение.Принял КАК Ответственный,
	|		ПриемкаТоваровНаХранение.ПринялДолжность КАК ОтветственныйДолжность,
	|		ПриемкаТоваровНаХранение.МоментВремени
	|	ИЗ
	|		Документ.ПриемкаТоваровНаХранение КАК ПриемкаТоваровНаХранение
	|	ГДЕ
	|		ПриемкаТоваровНаХранение.Склад = &Склад
	|		И ПриемкаТоваровНаХранение.Менеджер = &Менеджер
	|		И ПриемкаТоваровНаХранение.Проведен = ИСТИНА
	|	УПОРЯДОЧИТЬ ПО
	|		МоментВремени УБЫВ) как ПоследнийОтветственный
	|
	|УПОРЯДОЧИТЬ ПО
	|	МоментВремени УБЫВ");
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Менеджер", Менеджер);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Ответственный) ИЛИ ЗначениеЗаполнено(Выборка.ОтветственныйДолжность) Тогда
			Возврат Новый Структура("Ответственный, ОтветственныйДолжность", Выборка.Ответственный, Выборка.ОтветственныйДолжность);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Выполняет поиск действующего договора с контрагентом по заданным реквизитам.
// Если найден один действующий договор, возвращает ссылку на него, в противном случае - пустую ссылку.
//
// Параметры:
//  Объект - ДокументСсылка, ДокументОбъект, Структура - документ или произвольная структура, для которой нужно получить
//  договор.
//		В объекте должны быть определены свойства:
// 		* Партнер 		- СправочникСсылка.Партнеры 				- партнер, с которым заключен договор.
//		* Договор 		- СправочникСсылка.ДоговорыКонтрагентов 	- договор, который сейчас установлен для объекта. Может быть пустым.
//  	* Контрагент 	- СправочникСсылка.Контрагенты 				- контрагент, с которым заключен договор.
//  	* Организация 	- СправочникСсылка.Организации 				- организация предприятия, от имени которой заключен договор.
//  ХозяйственныеОперации - ПеречислениеСсылка.ХозяйственныеОперации, Массив - одна или несколько хозяйственных операций
//  (тип договора). 
//  ДополнительныеПараметрыОтбораДоговоров - Структура - дополнительные параметры для отбора договоров
//  (см. ДополнительныеПараметрыОтбораДоговоров).
//
// Возвращаемое значение:
//  СправочникСсылка.ДоговорыКонтрагентов - договор по умолчанию.
//
Функция ПолучитьДоговорПоУмолчанию(
	Объект,
	ХозяйственныеОперации,
	ДополнительныеПараметрыОтбораДоговоров = Неопределено) Экспорт
	
	Если ДополнительныеПараметрыОтбораДоговоров = Неопределено Тогда
		ДополнительныеПараметрыОтбораДоговоров = ДополнительныеПараметрыОтбораДоговоров();
	КонецЕсли;
	
	СписокПартнеров = Новый СписокЗначений;
	ПартнерыИКонтрагенты.ЗаполнитьСписокПартнераСРодителями(Объект.Партнер, СписокПартнеров);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
	|
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|
	|ГДЕ
	|	(НЕ ДоговорыКонтрагентов.ПометкаУдаления)
	|	И ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|	И ДоговорыКонтрагентов.Партнер В (&СписокПартнеров)
	|	И ДоговорыКонтрагентов.Контрагент = &Контрагент
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И ((НЕ &ОтборХозяйственныеОперации)
	|			ИЛИ ДоговорыКонтрагентов.ХозяйственнаяОперация В (&ХозяйственныеОперации))
	|	И ((НЕ &ОтборВалютаВзаиморасчетов)
	|			ИЛИ ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов)
	|	И (ДоговорыКонтрагентов.УчетАгентскогоНДС = &УчетАгентскогоНДС)
	|	И ДоговорыКонтрагентов.Ссылка = &ТекущийДоговор
	|	И ((НЕ &ОтборНаправлениеДеятельности)
	|			ИЛИ ДоговорыКонтрагентов.НаправлениеДеятельности = &НаправлениеДеятельности)
	|	И ДоговорыКонтрагентов.ДоговорССамозанятым = &ДоговорССамозанятым
	|	И ((НЕ &ОтборПорядокРасчетов)
	|			ИЛИ ДоговорыКонтрагентов.ПорядокРасчетов = &ПорядокРасчетов)
	|;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
	|
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|
	|ГДЕ
	|	(НЕ ДоговорыКонтрагентов.ПометкаУдаления)
	|	И ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|	И ДоговорыКонтрагентов.Партнер В (&СписокПартнеров)
	|	И ДоговорыКонтрагентов.Контрагент = &Контрагент
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И ((НЕ &ОтборХозяйственныеОперации)
	|			ИЛИ ДоговорыКонтрагентов.ХозяйственнаяОперация В (&ХозяйственныеОперации))
	|	И ((НЕ &ОтборВалютаВзаиморасчетов)
	|			ИЛИ ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов)
	|	И (ДоговорыКонтрагентов.УчетАгентскогоНДС = &УчетАгентскогоНДС)
	|	И ((НЕ &ОтборНаправлениеДеятельности)
	|			ИЛИ ДоговорыКонтрагентов.НаправлениеДеятельности = &НаправлениеДеятельности)
	|	И (НЕ &ОтборПорядокОформленияСписанияНедостачТоваровПринятыхНаХранение
	|			ИЛИ ДоговорыКонтрагентов.ПорядокОформленияСписанияНедостачТоваровПринятыхНаХранение =
	|											&ПорядокОформленияСписанияНедостачТоваровПринятыхНаХранение)
	|	И ДоговорыКонтрагентов.ДоговорССамозанятым = &ДоговорССамозанятым
	|	И ((НЕ &ОтборПорядокРасчетов)
	|			ИЛИ ДоговорыКонтрагентов.ПорядокРасчетов = &ПорядокРасчетов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 2
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
	|
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|
	|ГДЕ
	|	(НЕ ДоговорыКонтрагентов.ПометкаУдаления)
	|	И ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|	И ДоговорыКонтрагентов.Партнер В (&СписокПартнеров)
	|	И ДоговорыКонтрагентов.Контрагент = &Контрагент
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И ДоговорыКонтрагентов.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
	|	И ДоговорыКонтрагентов.КомиссионныеПродажи25 = &КомиссионныеПродажи25
	|	И ((НЕ &ОтборВалютаВзаиморасчетов)
	|			ИЛИ ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов)
	|	И (ДоговорыКонтрагентов.УчетАгентскогоНДС = &УчетАгентскогоНДС)
	|	И ((НЕ &ОтборНаправлениеДеятельности)
	|			ИЛИ ДоговорыКонтрагентов.НаправлениеДеятельности = &НаправлениеДеятельности)
	|	И ДоговорыКонтрагентов.ДоговорССамозанятым = &ДоговорССамозанятым
	|	И ((НЕ &ОтборПорядокРасчетов)
	|			ИЛИ ДоговорыКонтрагентов.ПорядокРасчетов = &ПорядокРасчетов)
	|");
	Запрос.УстановитьПараметр("ТекущийДоговор",					Объект.Договор);
	Запрос.УстановитьПараметр("СписокПартнеров",				СписокПартнеров);
	Запрос.УстановитьПараметр("Контрагент",						Объект.Контрагент);
	Запрос.УстановитьПараметр("Организация",					Объект.Организация);
	Запрос.УстановитьПараметр("ОтборХозяйственныеОперации",		ЗначениеЗаполнено(ХозяйственныеОперации));
	Запрос.УстановитьПараметр("ХозяйственныеОперации",			ХозяйственныеОперации);
	Запрос.УстановитьПараметр("ОтборВалютаВзаиморасчетов",		ЗначениеЗаполнено(ДополнительныеПараметрыОтбораДоговоров.ВалютаВзаиморасчетов));
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов",			ДополнительныеПараметрыОтбораДоговоров.ВалютаВзаиморасчетов);
	Запрос.УстановитьПараметр("УчетАгентскогоНДС",				ДополнительныеПараметрыОтбораДоговоров.Налогообложение = Перечисления.ТипыНалогообложенияНДС.НалоговыйАгентПоНДС);
	Запрос.УстановитьПараметр("ОтборНаправлениеДеятельности", 	ДополнительныеПараметрыОтбораДоговоров.НаправлениеДеятельности <> Неопределено
		И ПолучитьФункциональнуюОпцию("ИспользоватьУчетЗатратПоНаправлениямДеятельности"));
	Запрос.УстановитьПараметр("НаправлениеДеятельности",		ДополнительныеПараметрыОтбораДоговоров.НаправлениеДеятельности);
	Запрос.УстановитьПараметр("КомиссионныеПродажи25",			ДополнительныеПараметрыОтбораДоговоров.КомиссионныеПродажи25);
	Запрос.УстановитьПараметр(
		"ПорядокОформленияСписанияНедостачТоваровПринятыхНаХранение",
		ДополнительныеПараметрыОтбораДоговоров.ПорядокОформленияСписанияНедостачТоваровПринятыхНаХранение);
	Запрос.УстановитьПараметр(
		"ОтборПорядокОформленияСписанияНедостачТоваровПринятыхНаХранение",
		ДополнительныеПараметрыОтбораДоговоров.ПорядокОформленияСписанияНедостачТоваровПринятыхНаХранение <> Неопределено);
	Запрос.УстановитьПараметр("ДоговорССамозанятым",			ДополнительныеПараметрыОтбораДоговоров.ДоговорССамозанятым);
	Запрос.УстановитьПараметр("ОтборПорядокРасчетов",			ЗначениеЗаполнено(ДополнительныеПараметрыОтбораДоговоров.ПорядокРасчетов));
	Запрос.УстановитьПараметр("ПорядокРасчетов",				ДополнительныеПараметрыОтбораДоговоров.ПорядокРасчетов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Если Не МассивРезультатов[0].Пустой() Тогда
		
		Выборка = МассивРезультатов[0].Выбрать();
		Выборка.Следующий();
		
		ДоговорПоУмолчанию = Выборка.Ссылка;
		
	Иначе
		Выборка = МассивРезультатов[1].Выбрать();
	
		Если Не Выборка.Следующий() Тогда
			ДоговорПоУмолчанию = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		ИначеЕсли Выборка.Количество() = 1 Тогда
			ДоговорПоУмолчанию = Выборка.Ссылка;
		Иначе
			ДоговорПоУмолчанию = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

// Устанавливает видимость реквизита договора в зависимости от данных по соглашению
//
// Параметры:
// 		Объект - Структура, ДокументСсылка - 
// 		ДоступностьЭлемента - Булево - 
// 		ВидимостьЭлемента - Булево - 
// 		Договор - СправочникСсылка.ДоговорыКонтрагентов - 
//
Процедура УстановитьДоступностьДоговора(Объект, ДоступностьЭлемента, ВидимостьЭлемента, Договор = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользоватьПартнеровКакКонтрагентов = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов");
	ИспользуютсяДоговорыКонтрагентов     = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСПоставщиками");
	
	ЗаполненыВлияющиеПоля = 
		ЗначениеЗаполнено(Объект.Партнер)
		И (ЗначениеЗаполнено(Объект.Контрагент) Или ИспользоватьПартнеровКакКонтрагентов)
		И ЗначениеЗаполнено(Объект.Организация);
		
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Объект, "Соглашение")
		И ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСПоставщиками") Тогда
		
		Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
			УстановитьПривилегированныйРежим(Истина);
			ИспользуютсяДоговорыКонтрагентов =
				ИспользуютсяДоговорыКонтрагентов
				И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Соглашение, "ИспользуютсяДоговорыКонтрагентов");
			УстановитьПривилегированныйРежим(Ложь);	
		КонецЕсли;
		
	КонецЕсли;
	
	ДоступностьЭлемента = ЗаполненыВлияющиеПоля И ИспользуютсяДоговорыКонтрагентов;
	
	ВидимостьЭлемента = ИспользуютсяДоговорыКонтрагентов;
	
	Если НЕ ДоступностьЭлемента И ЗначениеЗаполнено(Объект.Договор) Тогда
		Объект.Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

// Возвращает данные счета-фактуры в виде структуры
//
// Параметры:
//  ДокументОснование - ДокументСсылка - Документ, на основании которого вводится счет-фактура.
//  Организация - СправочникСсылка.Организации - Организация, на имя которой оформляется счет-фактура.
//  Контрагент - СправочникСсылка.Контрагенты - 
//  Номер - Строка - Номер счета-фактуры.
//  ДатаСоставления - Дата - Дата счета-фактуры.
//  Валюта - СправочникСсылка.Валюты - Валюта счета-фактуры.
//  ДатаПолучения - Дата - Дата получения счета-фактуры.
//
// Возвращаемое значение:
//  Структура - поля счета-фактуры.
//
Функция ДанныеСчетаФактурыСтруктурой(ДокументОснование, Организация, Контрагент, Номер, ДатаСоставления, Валюта, ДатаПолучения) Экспорт
	
	ДанныеСчетаФактуры = Новый Структура;
	
	ДанныеСчетаФактуры.Вставить("ДокументОснование", ДокументОснование);
	ДанныеСчетаФактуры.Вставить("Организация",       Организация);
	ДанныеСчетаФактуры.Вставить("Контрагент",        Контрагент);
	ДанныеСчетаФактуры.Вставить("Номер",             Номер);
	ДанныеСчетаФактуры.Вставить("ДатаСоставления",   ДатаСоставления);
	ДанныеСчетаФактуры.Вставить("Валюта",            Валюта);
	ДанныеСчетаФактуры.Вставить("Дата",              ДатаПолучения);
	
	Возврат ДанныеСчетаФактуры;
	
КонецФункции

// Устанавливает режим выбора групп и элементов у склада на форме
//
// Параметры:
//  Склад - ПолеФормы - изменяет режим выбора для складов данной группы.
//
Процедура УстановитьРежимВыбораГруппЭлементовСклада(Склад) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСкладыВТабличнойЧастиДокументовЗакупки") Тогда
		Склад.ВыборГруппИЭлементов = ГруппыИЭлементы.ГруппыИЭлементы;
	Иначе
		Склад.ВыборГруппИЭлементов = ГруппыИЭлементы.Элементы;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет наличие корректировок и счетов-фактур, введенных на основании изменяемого документа.
//
// Параметры:
// Ссылка - ДокументСсылка - Изменяемый документ
// Основание - ДокументСсылка - Основание для корректировок
// ЕстьКорректировки - Булево - ВозвращаемыйПараметр. Признак наличия корректировок изменяемого документа.
// ЕстьСчетаФактуры - Булево - ВозвращаемыйПараметр. Признак наличия счетов-фактур изменяемого документа.
//
Процедура ПроверитьНаличиеКорректировокИСчетовФактур(Ссылка, Основание, ЕстьКорректировки, ЕстьСчетаФактуры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеДокумента.Ссылка КАК Корректировка,
	|	ДанныеДокумента.МоментВремени КАК МоментВремени
	|ИЗ
	|	Документ.КорректировкаПриобретения КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.ДокументОснование = &Основание
	|	И (ДанныеДокумента.Проведен
	|	ИЛИ ДанныеДокумента.Ссылка = &Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеДокумента.Ссылка КАК Корректировка,
	|	ДанныеДокумента.Ссылка.МоментВремени КАК МоментВремени
	|ИЗ
	|	Документ.КорректировкаПриобретения.КорректировкаЗадолженности КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.ДокументПриобретения = &Основание
	|	И ДанныеДокумента.Ссылка.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	МоментВремени УБЫВ
	|");
	Запрос.УстановитьПараметр("Основание", Основание);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.КорректировкаПриобретения") Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЕстьКорректировки = ЗначениеЗаполнено(Выборка.Корректировка) И Выборка.Корректировка <> Ссылка;
	Иначе
		ЕстьКорректировки = НЕ РезультатЗапроса.Пустой();
	КонецЕсли;	
	
	Если НЕ ЕстьКорректировки Тогда
		СчетаФактуры = УчетНДСУП.СчетаФактурыПолученныеПоДокументамОснованиям(Ссылка, Истина);
		ЕстьСчетаФактуры = СчетаФактуры.Количество() > 0;
	Иначе
		ЕстьСчетаФактуры = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает тип последней корректировки по документу.
//
// Параметры:
// Ссылка - ДокументСсылка - Изменяемый документ
// Основание - ДокументСсылка - Основание для корректировок
//
// Возвращаемое значение:
//		ПеречислениеСсылка.ТипыКорректировки - тип корректировки, если она есть.
//
Функция ПолучитьТипПоследнейКорректировки(Ссылка, Основание) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеДокумента.Ссылка КАК Корректировка,
	|	ДанныеДокумента.МоментВремени КАК МоментВремени,
	|	ДанныеДокумента.Ссылка.ТипКорректировки КАК ТипКорректировки
	|ИЗ
	|	Документ.КорректировкаПриобретения КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.ДокументОснование = &Основание
	|	И (ДанныеДокумента.Проведен
	|	ИЛИ ДанныеДокумента.Ссылка = &Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеДокумента.Ссылка КАК Корректировка,
	|	ДанныеДокумента.Ссылка.МоментВремени КАК МоментВремени,
	|	ДанныеДокумента.Ссылка.ТипКорректировки КАК ТипКорректировки
	|ИЗ
	|	Документ.КорректировкаПриобретения.КорректировкаЗадолженности КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.ДокументПриобретения = &Основание
	|	И ДанныеДокумента.Ссылка.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	МоментВремени УБЫВ
	|");
	Запрос.УстановитьПараметр("Основание", Основание);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.КорректировкаПриобретения") Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЕстьКорректировки = ЗначениеЗаполнено(Выборка.Корректировка) И Выборка.Корректировка <> Ссылка;
		ТипКорректировки = ?(ЕстьКорректировки, Выборка.ТипКорректировки, Перечисления.ТипыКорректировки.ПустаяСсылка());
	Иначе
		ЕстьКорректировки = НЕ РезультатЗапроса.Пустой();
		Выборка = РезультатЗапроса.Выбрать();
		ТипКорректировки =  ?(Выборка.Следующий(), Выборка.ТипКорректировки, Перечисления.ТипыКорректировки.ПустаяСсылка());
	КонецЕсли;
	
	Возврат ТипКорректировки;
	
КонецФункции

// Обновляет информацию о количестве документов поступлений в табличной части документа возврата.
//
// Параметры:
//		СписокПоступлений - СписокЗначений - список документов поступлений
//		ПоступлениеВШапке - ДокументСсылка -  Ссылка на документ поступления в шапке документа
//		НадписьЗаголовок - Строка - Надпись, содержащая информацию о количестве документов поступлений
//		ЭлементыФормы - ЭлементыФормы - Элементы формы документа возврата
//		КолонкаВТабличнойЧасти - КолонкаТабличногоПоля - содержащая документы поступления
//		ТабличнаяЧасть - ТабличнаяЧасть - документа возврата
//		ИмяПоступленияВТабличнойЧасти - Строка - Название колонки с документами поступлений в табличной части.
//		
Процедура ОбновитьИнформациюПоПоступлениямВФорме(СписокПоступлений,
	                                             ПоступлениеВШапке,
	                                             НадписьЗаголовок,
	                                             ЭлементыФормы,
	                                             КолонкаВТабличнойЧасти,
	                                             Знач ТабличнаяЧасть,
	                                             Знач ИмяПоступленияВТабличнойЧасти) Экспорт
	
	СписокПоступлений.Очистить();
	Для Каждого ТекСтрока Из ТабличнаяЧасть Цикл
		Если ЗначениеЗаполнено(ТекСтрока[ИмяПоступленияВТабличнойЧасти]) И СписокПоступлений.НайтиПоЗначению(ТекСтрока[ИмяПоступленияВТабличнойЧасти]) = Неопределено Тогда
			СписокПоступлений.Добавить(ТекСтрока[ИмяПоступленияВТабличнойЧасти]);
		КонецЕсли;
	КонецЦикла;
	
	Если СписокПоступлений.Количество() = 1 Тогда
		ПоступлениеВШапке = СписокПоступлений[0].Значение;
	Иначе
		ПоступлениеВШапке = Неопределено;
	КонецЕсли;
	
	Если СписокПоступлений.Количество() > 1 Тогда
		НадписьЗаголовок = СтрЗаменить(
			НСтр("ru = 'Всего документов: %КоличествоПоступлений%'"), "%КоличествоПоступлений%",
			СписокПоступлений.Количество());
	КонецЕсли;
	
	Если СписокПоступлений.Количество() < 1 Тогда
		ПоступлениеВШапке = Неопределено;
	КонецЕсли;
	
	Если СписокПоступлений.Количество() <= 1 Тогда
		ЭлементыФормы.СтраницыПоступления.ТекущаяСтраница = ЭлементыФормы.СтраницаПоступление;
	Иначе
		ЭлементыФормы.СтраницыПоступления.ТекущаяСтраница = ЭлементыФормы.СтраницаПоступления;
	КонецЕсли;
	
КонецПроцедуры

// Определяет хозяйственную операцию возврата по хозяйственной операции поступления
//
// Параметры:
//	ХозяйственнаяОперацияПоступление - ПеречислениеСсылка.ХозяйственныеОперации - исходная хозяйственная операция.
//
// Возвращаемое значение:
//	ПеречислениеСсылка.ХозяйственныеОперации - хозяйственная операция возврата.
//
Функция ПолучитьХозяйственнуюОперациюВозвратаПоПоступлению(Знач ХозяйственнаяОперацияПоступление) Экспорт
	
	Если ХозяйственнаяОперацияПоступление = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика
		Или ХозяйственнаяОперацияПоступление = Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту
		Или ХозяйственнаяОперацияПоступление = Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС
		Или Не ЗначениеЗаполнено(ХозяйственнаяОперацияПоступление) Тогда
		Возврат Перечисления.ХозяйственныеОперации.ВозвратТоваровПоставщику;
	ИначеЕсли ХозяйственнаяОперацияПоступление = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию Тогда
		Возврат Перечисления.ХозяйственныеОперации.ВозвратТоваровКомитенту;
	ИначеЕсли ХозяйственнаяОперацияПоступление = Перечисления.ХозяйственныеОперации.ПриемНаХранениеСПравомПродажи Тогда
		Возврат Перечисления.ХозяйственныеОперации.ОтгрузкаПринятыхСПравомПродажиТоваровСХранения;
	ИначеЕсли ХозяйственнаяОперацияПоступление = Перечисления.ХозяйственныеОперации.ПоставкаПодПринципала Тогда
		Возврат ХозяйственнаяОперацияПоступление = Перечисления.ХозяйственныеОперации.ПоставкаПодПринципала;
	КонецЕсли;
	
КонецФункции

// Возвращает структуру параметров для передачи в функцию ЗаполнитьТоварыПоФактическойПриемке().
//
// Возвращаемое значение:
//   Структура - структура с полями, необходимыми для заполнения по фактической приемке:
//   * ДокументПоступления - ДокументСсылка - Ссылка на документ поступления
//   * ДатаПоступления - Дата - Дата поступления товаров
//   * СтруктураДействийСИзмененнымиСтроками - Структура - Действия, которые нужно произвести над измененными строками
//   * СтруктураДействийСДобавленнымиСтроками - Структура - Действия, которые нужно произвести над добавленными строками
//   * Соглашение - СправочникСсылка.СоглашенияСПоставщиками - соглашение поступления
//   * Договор - СправочникСсылка.ДоговорыКонтрагентов - Договоры контрагентов
//   * Склад - СправочникСсылка.Склады, Массив из СправочникСсылка.Склады - Склады поступления
//   * ТекущийДокумент - ДокументСсылка - Ссылка на текущий документ
//   * МассивРаспоряжений - Массив - Распоряжения на поступление
//   * ЗаполнениеВАктеОРасхождениях - Булево - Признак того, что выполняется заполнение в "Акт о расхождениях после приемки"
//   * ЗаполнитьПоПоступлениям - Булево - 
//   * ВариантПриемкиТоваров - ПеречислениеСсылка.ВариантыПриемкиТоваров - 
//
Функция ПараметрыЗаполненияПоФактическойПриемке() Экспорт
	
	ПараметрыЗаполнения = Новый Структура("ДокументПоступления,
	                                      |ДатаПоступления,
	                                      |СтруктураДействийСИзмененнымиСтроками,
                                          |СтруктураДействийСДобавленнымиСтроками");
	ПараметрыЗаполнения.Вставить("Соглашение", Справочники.СоглашенияСПоставщиками.ПустаяСсылка());
	ПараметрыЗаполнения.Вставить("Договор",    Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	ПараметрыЗаполнения.Вставить("Склад",                        Неопределено);
	ПараметрыЗаполнения.Вставить("ТекущийДокумент",              Неопределено);
	ПараметрыЗаполнения.Вставить("МассивРаспоряжений",           Неопределено);
	ПараметрыЗаполнения.Вставить("ЗаполнениеВАктеОРасхождениях", Ложь);
	ПараметрыЗаполнения.Вставить("ЗаполнитьПоПоступлениям",      Ложь);
	ПараметрыЗаполнения.Вставить("ВариантПриемкиТоваров",        Перечисления.ВариантыПриемкиТоваров.ПустаяСсылка());
	Возврат ПараметрыЗаполнения;
	
КонецФункции

// Заполняет количество в ТЧ Товары по фактически принятым товарам.
//
// Параметры:
//	Товары                                 - ТаблицаЗначений - таблица товаров документа,
//	ПараметрыЗаполнения                    - см. ПараметрыЗаполненияПоФактическойПриемке
//	ЕстьПринятыеТовары                     - Булево - флаг, по которому можно определить что товары отгружены,
//  ДополнительныеПараметрыПоиска          - Структура - возможность задать дополнительные поля поиска.
//
// Возвращаемое значение:
//	Булево - Флаг, по которому можно определить что в результате перезаполнения ТЧ документа изменилась.
//
Функция ЗаполнитьТоварыПоФактическойПриемке(Товары, ПараметрыЗаполнения, ЕстьПринятыеТовары, ДополнительныеПараметрыПоиска = Неопределено) Экспорт
	
	ТекущийДокумент                        = ПараметрыЗаполнения.ТекущийДокумент;
	ДокументПоступления                    = ПараметрыЗаполнения.ДокументПоступления;
	ДатаПоступления                        = ПараметрыЗаполнения.ДатаПоступления;
	СтруктураДействийСИзмененнымиСтроками  = ПараметрыЗаполнения.СтруктураДействийСИзмененнымиСтроками;
	СтруктураДействийСДобавленнымиСтроками = ПараметрыЗаполнения.СтруктураДействийСДобавленнымиСтроками;
	Склад                                  = ПараметрыЗаполнения.Склад;
	Соглашение                             = ПараметрыЗаполнения.Соглашение;
	Договор                                = ПараметрыЗаполнения.Договор;
	МассивРаспоряжений                     = ПараметрыЗаполнения.МассивРаспоряжений;
	ЗаполнениеВАктеОРасхождениях           = ПараметрыЗаполнения.ЗаполнениеВАктеОРасхождениях;
	ЗаполнитьПоПоступлениям                = ПараметрыЗаполнения.ЗаполнитьПоПоступлениям;
	
	ВариантПриемкиТоваров = Неопределено;
	
	Если ПараметрыЗаполнения.Свойство("ВариантПриемкиТоваров")
		И ЗначениеЗаполнено(ПараметрыЗаполнения.ВариантПриемкиТоваров) Тогда
		
		ВариантПриемкиТоваров = ПараметрыЗаполнения.ВариантПриемкиТоваров;
		
	Иначе
		ВариантПриемкиТоваров = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументПоступления, "ВариантПриемкиТоваров");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЕстьИзменения = Ложь;
	ЕстьПринятыеТовары = Ложь;
	
	ТипПоступления = ТипЗнч(ДокументПоступления);
	ВозможнаПорча = ПолучитьФункциональнуюОпцию("ИспользоватьКачествоТоваров")
					И ТипПоступления = Тип("ДокументСсылка.ВозвратТоваровОтКлиента");
	
	Если МассивРаспоряжений <> Неопределено Тогда
		
		ИндексВыборки = ?(ТипПоступления = Тип("ДокументСсылка.ПоступлениеТоваровНаСклад"), 5, 3);
		
		Запрос = Новый Запрос(ТекстЗапросаПроверкаПринимающихсяТоваровПоРаспоряжениям(ТипПоступления));
		Запрос.УстановитьПараметр("МассивРаспоряжений",  МассивРаспоряжений);
		Запрос.УстановитьПараметр("ДокументПоступления", ДокументПоступления);
		Запрос.УстановитьПараметр("Соглашение",          Соглашение);
		Запрос.УстановитьПараметр("Договор",             Договор);
		Запрос.УстановитьПараметр("Склад",               Склад);
		Запрос.УстановитьПараметр("ВариантПриемкиТоваров", ВариантПриемкиТоваров);
		Запрос.УстановитьПараметр("ЗаполнитьПоПоступлениям", ЗаполнитьПоПоступлениям);
		УстановитьПараметрОтбораРаспоряженийВРегистреТоварыКПоступлению(Запрос);
		Результат = Запрос.ВыполнитьПакет(); 
		Выборка = Результат[ИндексВыборки].Выбрать();
	Иначе
		Запрос = Новый Запрос(ТекстЗапросаПроверкаПринимающихсяТоваровПоНакладной());
		Запрос.УстановитьПараметр("ДокументПоступления",   ДокументПоступления);
		Запрос.УстановитьПараметр("Соглашение",            Соглашение);
		Запрос.УстановитьПараметр("Договор",               Договор);
		Запрос.УстановитьПараметр("Склад",                 Склад);
		Запрос.УстановитьПараметр("ВариантПриемкиТоваров", ВариантПриемкиТоваров);
		УстановитьПараметрОтбораРаспоряженийВРегистреТоварыКПоступлению(Запрос);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
	КонецЕсли;
	
	Если Выборка.Следующий() Тогда
		ЕстьПринятыеТовары = (Выборка.Количество > 0);
	КонецЕсли;
	
	УдаляемыеСтроки = Новый Соответствие;
	
	ВыгружаемыеКолонки = "Номенклатура, Характеристика, Серия, Упаковка, Количество, Назначение";
	
	Если Склад = Неопределено
		Или ТипЗнч(Склад) = Тип("Массив") Тогда
		ДобавлятьКолонкуСклад = Ложь;
		ВыгружаемыеКолонки = ВыгружаемыеКолонки + ", Склад";
	Иначе
		ДобавлятьКолонкуСклад = Истина;
	КонецЕсли;
	
	ДобавлятьКолонкуЗаказПоставщику = Истина;
	
	Если МассивРаспоряжений <> Неопределено
		И (ТипПоступления = Тип("ДокументСсылка.ПриобретениеТоваровУслуг")
			Или ТипПоступления = Тип("ДокументСсылка.ПриемкаТоваровНаХранение"))
		И ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным Тогда
		
		ДобавлятьКолонкуЗаказПоставщику = Ложь;
		ВыгружаемыеКолонки = ВыгружаемыеКолонки + ", ЗаказПоставщику";
		
	КонецЕсли;
	
	ТаблицаТоваров = Товары.Выгрузить(, ВыгружаемыеКолонки); // ТаблицаЗначений
	
	Если ДобавлятьКолонкуСклад Тогда
		ТаблицаТоваров.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
		Для Каждого ТекСтрока Из ТаблицаТоваров Цикл
			ТекСтрока.Склад = Склад;
		КонецЦикла;
	КонецЕсли;
	
	Если ДобавлятьКолонкуЗаказПоставщику Тогда
		
		ТипыЗаказов = Новый Массив;
		ТипыЗаказов.Добавить(Тип("ДокументСсылка.ЗаказПоставщику"));
		
		ТаблицаТоваров.Колонки.Добавить("ЗаказПоставщику", Новый ОписаниеТипов(ТипыЗаказов));
		
	КонецЕсли;
	
	Если МассивРаспоряжений <> Неопределено Тогда
		Запрос = Новый Запрос(ТекстЗапросаПоРаспоряжениям(ТипПоступления));
		Запрос.УстановитьПараметр("МассивРаспоряжений", МассивРаспоряжений);
	Иначе
		Запрос = Новый Запрос(ТекстЗапросаПоНакладнойИлиСоглашению());
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Дата",       ?(ЗначениеЗаполнено(ДатаПоступления), ДатаПоступления, ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("Ссылка",     ?(ЗначениеЗаполнено(ТекущийДокумент), ТекущийДокумент, ДокументПоступления));
	Запрос.УстановитьПараметр("ДокументПоступления", ДокументПоступления);
	Запрос.УстановитьПараметр("Товары",     ТаблицаТоваров);
	Запрос.УстановитьПараметр("Соглашение", Соглашение);
	Запрос.УстановитьПараметр("Договор",    Договор);
	Запрос.УстановитьПараметр("Склад",      Склад);
	Запрос.УстановитьПараметр("ВариантПриемкиТоваров", ВариантПриемкиТоваров);
	Запрос.УстановитьПараметр("ЗаполнитьПоПоступлениям", ЗаполнитьПоПоступлениям);
	УстановитьПараметрОтбораРаспоряженийВРегистреТоварыКПоступлению(Запрос);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет(); 
	
	Если РезультатЗапроса[0].Пустой() Или Не ЕстьПринятыеТовары Тогда
		Возврат ЕстьИзменения;
	КонецЕсли;
	
	Если МассивРаспоряжений <> Неопределено
		И ТипПоступления = Тип("ДокументСсылка.ПоступлениеТоваровНаСклад") Тогда
		ТаблицаОстатков = РезультатЗапроса[4].Выгрузить();
		ТаблицаОстатков.Индексы.Добавить("Номенклатура, Характеристика");
		
		ВыборкаУслуг             = РезультатЗапроса[6].Выбрать();
		ВыборкаУпаковок          = РезультатЗапроса[7].Выбрать();
		ВыборкаНеордерныхСкладов = РезультатЗапроса[8].Выбрать();
		
	ИначеЕсли МассивРаспоряжений <> Неопределено Тогда
		ТаблицаОстатков = РезультатЗапроса[2].Выгрузить();
		ТаблицаОстатков.Индексы.Добавить("Номенклатура, Характеристика");
		
		ВыборкаУслуг             = РезультатЗапроса[4].Выбрать();
		ВыборкаУпаковок          = РезультатЗапроса[5].Выбрать();
		ВыборкаНеордерныхСкладов = РезультатЗапроса[6].Выбрать();
		
	Иначе
		ТаблицаОстатков = РезультатЗапроса[1].Выгрузить();
		ТаблицаОстатков.Индексы.Добавить("Номенклатура, Характеристика");
		
		ВыборкаУслуг             = РезультатЗапроса[3].Выбрать();
		ВыборкаУпаковок          = РезультатЗапроса[4].Выбрать();
		ВыборкаНеордерныхСкладов = РезультатЗапроса[5].Выбрать();
		
	КонецЕсли;
	
	РаспределяемыеПоСериямСтроки = Новый Массив; // Массив из см. НоваяСтруктураДляРаспределения
	
	ИсходныеСтрокиКДозаполнениюСОстатками = Новый Массив; // Массив из см. НоваяСтруктураКДозаполнению
	
	Для Каждого ТекСтрока Из Товары Цикл
		
		Если ДополнительныеПараметрыПоиска <> Неопределено Тогда
			ЕстьНесоответствие = Ложь;
			Для Каждого ДополнительныйПараметрПоиска Из ДополнительныеПараметрыПоиска Цикл
				Если ТекСтрока[ДополнительныйПараметрПоиска.Ключ] <> ДополнительныйПараметрПоиска.Значение Тогда
					ЕстьНесоответствие = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ЕстьНесоответствие Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВозможнаПорча И (Не ЗаполнениеВАктеОРасхождениях) И ТекСтрока.Порча Тогда
			ТекНоменклатура   = ТекСтрока.НоменклатураОприходование;
			ТекХарактеристика = ТекСтрока.ХарактеристикаОприходование;
		Иначе
			ТекНоменклатура   = ТекСтрока.Номенклатура;
			ТекХарактеристика = ТекСтрока.Характеристика;
		КонецЕсли;
		
		ВыборкаУслуг.Сбросить();
		Если ВыборкаУслуг.НайтиСледующий(ТекНоменклатура, "Номенклатура") Тогда
			Продолжить;
		КонецЕсли;
		
		Если Склад = Неопределено Или ТипЗнч(Склад) = Тип("Массив") Тогда
			СкладПоиска = ТекСтрока.Склад;
		ИначеЕсли ТекСтрока.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга
			ИЛИ ТекСтрока.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
			
			СкладПоиска = Справочники.Склады.ПустаяСсылка();
			
		Иначе
			СкладПоиска = Склад;
		КонецЕсли;
		
		ВыборкаНеордерныхСкладов.Сбросить();
		Если ВыборкаНеордерныхСкладов.НайтиСледующий(СкладПоиска, "Склад")
			И Не ЗаполнитьПоПоступлениям Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", ТекНоменклатура);
		СтруктураПоиска.Вставить("Характеристика", ТекХарактеристика);
		СтруктураПоиска.Вставить("Серия", ТекСтрока.Серия);
		СтруктураПоиска.Вставить("Склад", СкладПоиска);
		СтруктураПоиска.Вставить("Назначение", ТекСтрока.Назначение);
			
		Если МассивРаспоряжений <> Неопределено
			И (ТипПоступления = Тип("ДокументСсылка.ПриобретениеТоваровУслуг")
				Или ТипПоступления = Тип("ДокументСсылка.ПриемкаТоваровНаХранение"))
			И ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным Тогда
			
			СтруктураПоиска.Вставить("Распоряжение", ТекСтрока.ЗаказПоставщику);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекСтрока.Упаковка) Тогда
			Если ВыборкаУпаковок.НайтиСледующий(ТекСтрока.Упаковка, "Упаковка") Тогда
				КоэффициентУпаковки = ВыборкаУпаковок.Коэффициент;
			Иначе
				КоэффициентУпаковки = 1;
			КонецЕсли;
			ВыборкаУпаковок.Сбросить();
		Иначе
			КоэффициентУпаковки = 1;
		КонецЕсли;
		
		ИсходноеКоличество = ТекСтрока.Количество;
		ТекущееКоличество = ТекСтрока.Количество;
		
		ИсходнаяСтрокаОбработана = Ложь;
		
		СтрокиТаблицыОстатков = ТаблицаОстатков.НайтиСтроки(СтруктураПоиска);
		
		Если СтрокиТаблицыОстатков.Количество() > 0
			И СтрокиТаблицыОстатков[0].Количество > 0 Тогда
			
			СтрокаОстатков = СтрокиТаблицыОстатков[0];
			ЕстьПринятыеТовары = Истина;
			
			Если ТекущееКоличество > 0 Тогда
				
				ДобавляемоеКоличество = Мин(ТекущееКоличество, СтрокаОстатков.Количество);
				
				ТекущееКоличество = ТекущееКоличество - ДобавляемоеКоличество;
				СтрокаОстатков.Количество = СтрокаОстатков.Количество - ДобавляемоеКоличество;
				СтрокаОстатков.НоменклатураДобавлена = (СтрокаОстатков.Количество = 0);
				
				ДобавляемоеКоличествоУпаковок = ДобавляемоеКоличество / КоэффициентУпаковки;
				
				ТекСтрока.Серия = СтрокаОстатков.Серия;
				ТекСтрока.Количество = ДобавляемоеКоличество;
				ТекСтрока.КоличествоУпаковок = ДобавляемоеКоличествоУпаковок;
				ИсходнаяСтрокаОбработана = Истина;
				
				Если СтрокаОстатков.Количество = 0 Тогда
					ТаблицаОстатков.Удалить(СтрокаОстатков)
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТекущееКоличество > 0
			И ТекСтрока.СтатусУказанияСерий > 0 Тогда
				
			СтрокаКДозаполнению = НоваяСтруктураКДозаполнению();
			ЗаполнитьЗначенияСвойств(СтрокаКДозаполнению, СтруктураПоиска);
			СтрокаКДозаполнению.Строка = ТекСтрока;
			СтрокаКДозаполнению.Количество = ТекущееКоличество;
			СтрокаКДозаполнению.КоэффициентУпаковки = КоэффициентУпаковки;
			СтрокаКДозаполнению.СтрокаОбработана = ИсходнаяСтрокаОбработана;
			ИсходныеСтрокиКДозаполнениюСОстатками.Добавить(СтрокаКДозаполнению);
			
		ИначеЕсли ТекСтрока.Количество = 0
			Или Не ИсходнаяСтрокаОбработана Тогда
			
			УдаляемыеСтроки.Вставить(ТекСтрока);
			
		КонецЕсли;
		
		Если ТекСтрока.Количество <> ИсходноеКоличество Тогда
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекСтрока, СтруктураДействийСИзмененнымиСтроками, Неопределено);
			
		КонецЕсли;
		
		ЕстьИзменения = ЕстьИзменения 
			Или ТекСтрока.Количество <> ИсходноеКоличество;
			
	КонецЦикла;
	
	// Поиск в остатках к оформлению поступлений без учета серий
	СтруктураПоиска = Новый Структура("НоменклатураДобавлена, Номенклатура, Характеристика, Склад");
	СтруктураПоиска.НоменклатураДобавлена = Ложь;
	Для Каждого СтрокаКДозаполнению Из ИсходныеСтрокиКДозаполнениюСОстатками Цикл
		
		ТекСтрока                = СтрокаКДозаполнению.Строка;
		ТекущееКоличество        = СтрокаКДозаполнению.Количество;
		ИсходнаяСтрокаОбработана = СтрокаКДозаполнению.СтрокаОбработана;
		ИсходноеКоличество       = ТекСтрока.Количество;
		ИсходнаяСерия            = ТекСтрока.Серия;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска,СтрокаКДозаполнению);
		
		СтруктураПоиска.Вставить("Назначение", ТекСтрока.Назначение);
			
		Если МассивРаспоряжений <> Неопределено
			И (ТипПоступления = Тип("ДокументСсылка.ПриобретениеТоваровУслуг")
				Или ТипПоступления = Тип("ДокументСсылка.ПриемкаТоваровНаХранение"))
			И ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным Тогда
			
			СтруктураПоиска.Вставить("Распоряжение", ТекСтрока.ЗаказПоставщику);
			
		КонецЕсли;
		
		СтрокиТаблицыОстатков = ТаблицаОстатков.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрокаОстатков Из СтрокиТаблицыОстатков Цикл
			
			Если СтрокаОстатков.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ЕстьПринятыеТовары = Истина;
			
			Если ТекущееКоличество = 0 Тогда
				Прервать;
			КонецЕсли;
			
			ДобавляемоеКоличество = Мин(ТекущееКоличество, СтрокаОстатков.Количество);
			
			ТекущееКоличество = ТекущееКоличество - ДобавляемоеКоличество;
			СтрокаОстатков.Количество = СтрокаОстатков.Количество - ДобавляемоеКоличество;
			СтрокаОстатков.НоменклатураДобавлена = (СтрокаОстатков.Количество = 0);
			
			ДобавляемоеКоличествоУпаковок = ДобавляемоеКоличество / КоэффициентУпаковки;
			
			Если Не ИсходнаяСтрокаОбработана Тогда
				
				ТекСтрока.Серия = СтрокаОстатков.Серия;
				ТекСтрока.Количество = ДобавляемоеКоличество;
				ТекСтрока.КоличествоУпаковок = ДобавляемоеКоличествоУпаковок;
				ИсходнаяСтрокаОбработана = Истина;
				
			Иначе
				
				ДобавляемыеРаспределяемыеПоСериямСтроки = НоваяСтруктураДляРаспределения();
				ДобавляемыеРаспределяемыеПоСериямСтроки.Строка = ТекСтрока;
				ДобавляемыеРаспределяемыеПоСериямСтроки.Серия = СтрокаОстатков.Серия;
				ДобавляемыеРаспределяемыеПоСериямСтроки.Количество = ДобавляемоеКоличество;
				ДобавляемыеРаспределяемыеПоСериямСтроки.КоличествоУпаковок = ДобавляемоеКоличествоУпаковок;
				
				РаспределяемыеПоСериямСтроки.Добавить(ДобавляемыеРаспределяемыеПоСериямСтроки);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТекСтрока.Количество = 0
			Или Не ИсходнаяСтрокаОбработана Тогда
			УдаляемыеСтроки.Вставить(ТекСтрока);
		ИначеЕсли ТекСтрока.Количество <> ИсходноеКоличество Тогда
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекСтрока, СтруктураДействийСИзмененнымиСтроками, Неопределено);
		КонецЕсли;
		
		ЕстьИзменения = ЕстьИзменения 
			Или ТекСтрока.Количество <> ИсходноеКоличество
			Или ИсходнаяСерия <> ТекСтрока.Серия;
		
	КонецЦикла;
	
	Для Каждого СтрокаССерией Из РаспределяемыеПоСериямСтроки Цикл
		НоваяСтрока = Товары.Вставить(Товары.Индекс(СтрокаССерией.Строка)+1);
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаССерией.Строка);
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаССерией); // Серия, Количество, КоличествоУпаковок
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействийСИзмененнымиСтроками, Неопределено);
	КонецЦикла;
	
	НераспределенныеСтроки = ТаблицаОстатков.НайтиСтроки(Новый Структура("НоменклатураДобавлена", Ложь));
	ЕстьИзменения = ЕстьИзменения
		Или РаспределяемыеПоСериямСтроки.Количество() > 0
		Или УдаляемыеСтроки.Количество() > 0
		Или НераспределенныеСтроки.Количество() > 0;
	
	Для Каждого ТекЭлемент Из УдаляемыеСтроки Цикл
		Товары.Удалить(ТекЭлемент.Ключ);
	КонецЦикла;
	
	ИсключаемыеСвойства = Новый Структура("КодСтроки, ДокументРеализации, ЦенаЗаказа", 0, Неопределено, 0);
	СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, Серия, Назначение");
	Если Склад = Неопределено Или ТипЗнч(Склад) = Тип("Массив") Тогда
		СтруктураПоиска.Вставить("Склад");
	КонецЕсли;
	Если МассивРаспоряжений <> Неопределено
		И (ТипПоступления = Тип("ДокументСсылка.ПриобретениеТоваровУслуг")
			Или ТипПоступления = Тип("ДокументСсылка.ПриемкаТоваровНаХранение"))
		И ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным Тогда
		
		СтруктураПоиска.Вставить("ЗаказПоставщику");
		
	КонецЕсли;
	
	Если НераспределенныеСтроки.Количество() > 0 Тогда
		РаспоряжениеЗаказ		= ЗначениеЗаполнено(МассивРаспоряжений)
									И МассивРаспоряжений.Количество() > 0
									И (ТипЗнч(МассивРаспоряжений[0]) = Тип("ДокументСсылка.ЗаказПоставщику")
										Или ТипЗнч(МассивРаспоряжений[0]) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента"));
		ДопустимыеОтклонения	= ДопустимыеОтклоненияМерныхТоваров(МассивРаспоряжений, РаспоряжениеЗаказ);
	КонецЕсли;
	
	Для Каждого СтрокаКДобавлению Из НераспределенныеСтроки Цикл
		
		Если Не СтруктураПоиска.Свойство("Склад")
			И Склад <> СтрокаКДобавлению.Склад Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаКДобавлению);
		Если СтруктураПоиска.Свойство("ЗаказПоставщику") Тогда
			СтруктураПоиска.ЗаказПоставщику = СтрокаКДобавлению.Распоряжение;
		КонецЕсли;
		
		СтрокиТоваров = Товары.НайтиСтроки(СтруктураПоиска);
		
		Если СтрокиТоваров.Количество() = 0 Тогда
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКДобавлению);
			
			Если СтруктураПоиска.Свойство("ЗаказПоставщику") 
				И ЗначениеЗаполнено(СтрокаКДобавлению.Распоряжение)
				И ТипЗнч(СтрокаКДобавлению.Распоряжение) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
				НоваяСтрока.ЗаказПоставщику = СтрокаКДобавлению.Распоряжение;
				
			
			КонецЕсли;	
				
			
			НоваяСтрока.КоличествоУпаковок = СтрокаКДобавлению.Количество;
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействийСДобавленнымиСтроками, Неопределено);
		Иначе
			СтрокаТоваров = СтрокиТоваров[0];
			
			Если ЗначениеЗаполнено(СтрокаТоваров.Упаковка) Тогда
				Если ВыборкаУпаковок.НайтиСледующий(СтрокаТоваров.Упаковка, "Упаковка") Тогда
					КоэффициентУпаковки = ВыборкаУпаковок.Коэффициент;
				Иначе
					КоэффициентУпаковки = 1;
				КонецЕсли;
				ВыборкаУпаковок.Сбросить();
			Иначе
				КоэффициентУпаковки = 1;
			КонецЕсли;
			
			СтруктураПоискаОтклонений = Новый Структура("Номенклатура, Характеристика",
											СтрокаКДобавлению.Номенклатура,
											СтрокаКДобавлению.Характеристика);
			
			Если МассивРаспоряжений <> Неопределено
				И (ТипПоступления = Тип("ДокументСсылка.ПриобретениеТоваровУслуг")
					Или ТипПоступления = Тип("ДокументСсылка.ПриемкаТоваровНаХранение"))
				И ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным Тогда
				
				СтруктураПоискаОтклонений.Вставить("Заказ",СтрокаКДобавлению.Распоряжение);
				
			КонецЕсли;
			
			СтрокиДопустимыхОтклонений = ДопустимыеОтклонения.НайтиСтроки(СтруктураПоискаОтклонений);
			
			ЕстьКодСтроки = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТоваров, "КодСтроки");
			
			Если МассивРаспоряжений <> Неопределено
				И ЕстьКодСтроки
				И ЗначениеЗаполнено(СтрокаТоваров.КодСтроки) Тогда
				
				Если СтрокиДопустимыхОтклонений.Количество() > 0
					И СтрокиДопустимыхОтклонений[0].ДопустимоеОтклонение >= СтрокаКДобавлению.Количество Тогда
					СтрокаТоваров.Количество = СтрокаТоваров.Количество + СтрокаКДобавлению.Количество;
					СтрокаТоваров.КоличествоУпаковок = СтрокаТоваров.Количество / КоэффициентУпаковки;
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТоваров, СтруктураДействийСИзмененнымиСтроками, Неопределено);
				Иначе
					НоваяСтрока = Товары.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТоваров);
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсключаемыеСвойства);
					НоваяСтрока.Количество = СтрокаКДобавлению.Количество;
					НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество / КоэффициентУпаковки;
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействийСДобавленнымиСтроками, Неопределено);
				КонецЕсли;
				
			Иначе
				СтрокаТоваров.Количество = СтрокаТоваров.Количество + СтрокаКДобавлению.Количество;
				СтрокаТоваров.КоличествоУпаковок = СтрокаТоваров.КоличествоУпаковок + СтрокаКДобавлению.Количество / КоэффициентУпаковки;
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТоваров, СтруктураДействийСИзмененнымиСтроками, Неопределено);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	
	Возврат ЕстьИзменения;
	
КонецФункции

// Возвращаемое значение:
// 	Структура:
// * СтрокаОбработана - Булево
// * КоэффициентУпаковки - Число
// * Количество - Число
// * Склад - СправочникСсылка.Склады
// * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры
// * Номенклатура - СправочникСсылка.Номенклатура
// * Строка - СтрокаТаблицыЗначений
//
Функция НоваяСтруктураКДозаполнению()

	Результат = Новый Структура;
	
	Результат.Вставить("Строка");
	Результат.Вставить("Номенклатура");
	Результат.Вставить("Характеристика");
	Результат.Вставить("Склад");
	Результат.Вставить("Количество");
	Результат.Вставить("КоэффициентУпаковки");
	Результат.Вставить("СтрокаОбработана");

	Возврат Результат;
	
КонецФункции

// Возвращаемое значение:
// 	Структура:
// * КоличествоУпаковок - Число
// * Количество - Число
// * Серия - СправочникСсылка.СерииНоменклатуры
// * Строка - СтрокаТаблицыЗначений
//
Функция НоваяСтруктураДляРаспределения()

	Результат = Новый Структура;
	
	Результат.Вставить("Строка");
	Результат.Вставить("Серия");
	Результат.Вставить("Количество");
	Результат.Вставить("КоличествоУпаковок");

	Возврат Результат;
	
КонецФункции

// Возвращается таблицу допустимых отклонений мерных товаров
//
// Параметры:
//  МассивРаспоряжений - Массив - массив распоряжений.
//  РаспоряжениеЗаказ  - Булево - .
// 
// Возвращаемое значение:
//  ТаблицаЗначений
//
Функция ДопустимыеОтклоненияМерныхТоваров(МассивРаспоряжений, РаспоряжениеЗаказ = Истина) Экспорт
	
	ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров = 
		Константы.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров.Получить();
	
	Если НЕ ЗначениеЗаполнено(МассивРаспоряжений)
		ИЛИ НЕ РаспоряжениеЗаказ
		ИЛИ ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров = 0 
		ИЛИ МассивРаспоряжений.Количество() = 0 Тогда
		Таблица = Новый ТаблицаЗначений;
		Таблица.Колонки.Добавить("Заказ");
		Таблица.Колонки.Добавить("ЗаказПоставщику");
		Таблица.Колонки.Добавить("Номенклатура");
		Таблица.Колонки.Добавить("Характеристика");
		Таблица.Колонки.Добавить("Склад");
		Возврат Таблица;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("МассивРаспоряжений", МассивРаспоряжений);
	Запрос.УстановитьПараметр("МерныеТипыЕдиницИзмерений",
	                           Справочники.УпаковкиЕдиницыИзмерения.МерныеТипыЕдиницИзмерений());
	Запрос.УстановитьПараметр("ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров",
	                           ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров);
	
	Если ТипЗнч(МассивРаспоряжений[0]) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТоварыКПоступлению.ЗаявкаНаВозвратТоваровОтКлиента КАК Заказ,
		|	ТоварыКПоступлению.Номенклатура                    КАК Номенклатура,
		|	ТоварыКПоступлению.Характеристика                  КАК Характеристика,
		|	СУММА(ТоварыКПоступлению.КОформлениюПриход * 
		|		(&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100)) КАК ДопустимоеОтклонение
		|ИЗ
		|	РегистрНакопления.ЗаявкиНаВозвратТоваровОтКлиентов.Обороты(&НачПериод,&КонПериод,, 
		|		ЗаявкаНаВозвратТоваровОтКлиента В (&МассивРаспоряжений)
		|	) КАК ТоварыКПоступлению
		|ГДЕ
		|	ТоварыКПоступлению.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (&МерныеТипыЕдиницИзмерений)
		|СГРУППИРОВАТЬ ПО
		|	ТоварыКПоступлению.ЗаявкаНаВозвратТоваровОтКлиента,
		|	ТоварыКПоступлению.Номенклатура,
		|	ТоварыКПоступлению.Характеристика";
		
		ГраницыОборотов = ОбщегоНазначенияУТ.ГраницыОборотовРегистра("ЗаявкиНаВозвратТоваровОтКлиентов",
																"ЗаявкаНаВозвратТоваровОтКлиента В (&МассивРаспоряжений)",
																Запрос.Параметры);
		
		Запрос.УстановитьПараметр("НачПериод", ГраницыОборотов.МинимальнаяДата);
		Запрос.УстановитьПараметр("КонПериод", ГраницыОборотов.МаксимальнаяДата);
		
	ИначеЕсли ТипЗнч(МассивРаспоряжений[0]) = Тип("ДокументСсылка.ЗаказПоставщику")

		Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТоварыКПоступлению.ЗаказПоставщику КАК ЗаказПоставщику,
		|	ТоварыКПоступлению.ЗаказПоставщику КАК Заказ,
		|	ТоварыКПоступлению.Номенклатура    КАК Номенклатура,
		|	ТоварыКПоступлению.Характеристика  КАК Характеристика,
		|	ТоварыКПоступлению.Склад           КАК Склад,
		|	СУММА(ТоварыКПоступлению.КОформлениюПриход * 
		|		(&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100)) КАК ДопустимоеОтклонение
		|ИЗ
		|	РегистрНакопления.ЗаказыПоставщикам.Обороты(&НачПериод,&КонПериод,, 
		|		ЗаказПоставщику В (&МассивРаспоряжений)) КАК ТоварыКПоступлению
		|ГДЕ
		|	ТоварыКПоступлению.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (&МерныеТипыЕдиницИзмерений)
		|СГРУППИРОВАТЬ ПО
		|	ТоварыКПоступлению.ЗаказПоставщику,
		|	ТоварыКПоступлению.Номенклатура,
		|	ТоварыКПоступлению.Характеристика,
		|	ТоварыКПоступлению.Склад";
		
		ГраницыОборотов = ОбщегоНазначенияУТ.ГраницыОборотовРегистра("ЗаказыПоставщикам",
																"ЗаказПоставщику В (&МассивРаспоряжений)",
																Запрос.Параметры);
		
		Запрос.УстановитьПараметр("НачПериод", ГраницыОборотов.МинимальнаяДата);
		Запрос.УстановитьПараметр("КонПериод", ГраницыОборотов.МаксимальнаяДата);
		
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСВариантамиПриемки

// Заполняет список выбора вариантов приемки
//
// Параметры:
//  ОформлениеОрдера - ПолеФормы - поле формы с настройкой оформления ордера.
//
Процедура ЗаполнитьСписокВыбораВариантовПриемки(ОформлениеОрдера) Экспорт
	
	ЗначениеОформленияОрдера = "";
	ЗначениеКонстанты = Константы.ВариантПриемкиТоваров.Получить();
	ЗаполнитьНастройкиВариантовПриемки(ЗначениеКонстанты, ЗначениеОформленияОрдера);
	
	СписокВыбораРаспоряжение = ОформлениеОрдера.СписокВыбора;
	
	СписокВыбораРаспоряжение.Очистить();
	
	ЗаказыИспользуются = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПоставщикам")
		Или ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыНаПеремещение")
		Или ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыНаСборку");
	
	Если ЗаказыИспользуются Тогда
		СписокВыбораРаспоряжение.Добавить("ПослеЗаказа", НСтр("ru = 'После оформления заказа'"));
		СписокВыбораРаспоряжение.Добавить("ПослеНакладной", НСтр("ru = 'После оформления накладной'"));
	Иначе
		СписокВыбораЗначение = ?(ЗначениеОформленияОрдера = "ПослеНакладной", ЗначениеОформленияОрдера, "ПослеЗаказа");
		СписокВыбораРаспоряжение.Добавить(СписокВыбораЗначение, НСтр("ru = 'После оформления накладной'"));
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список выбора вариантов приемки по соглашениям
//
// Параметры:
//  ОформлениеОрдера - ПолеФормы - поле формы с настройкой оформления ордера
//  ПриемкаТоваров	 - ПолеФормы - поле формы с настройкой приемки товаров.
//
Процедура ЗаполнитьСписокВыбораВариантовПриемкиПоСоглашениям(ОформлениеОрдера, ПриемкаТоваров) Экспорт
	
	ЗначениеОформленияОрдера = "";
	ЗначениеКонстанты = Константы.ВариантПриемкиТоваров.Получить();
	ЗаполнитьНастройкиВариантовПриемки(ЗначениеКонстанты, ЗначениеОформленияОрдера);
	
	ИспользоватьСоглашенияСПоставщиками = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСПоставщиками");
	СписокВыбораРаспоряжение = ОформлениеОрдера.СписокВыбора;
	
	СписокВыбораРаспоряжение.Очистить();
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПоставщикам") Тогда
		СписокВыбораРаспоряжение.Добавить("ПослеЗаказа", НСтр("ru = 'После оформления заказа'"));
		СписокВыбораРаспоряжение.Добавить("ПослеНакладной", НСтр("ru = 'После оформления накладной'"));
	Иначе
		СписокВыбораЗначение = ?(ЗначениеОформленияОрдера = "ПослеНакладной", ЗначениеОформленияОрдера, "ПослеЗаказа");
		СписокВыбораРаспоряжение.Добавить(СписокВыбораЗначение, НСтр("ru = 'После оформления накладной'"));
	КонецЕсли;
	
	Если ИспользоватьСоглашенияСПоставщиками Тогда
		СписокВыбораРаспоряжение.Добавить("ПоСоглашению", НСтр("ru = 'По текущему соглашению (в т.ч. без документов)'"));
	КонецЕсли;
	ОформлениеОрдера.Доступность = СписокВыбораРаспоряжение.Количество()>1;
	
	Если ПриемкаТоваров <> Неопределено Тогда
		СписокВыбораПриемка = ПриемкаТоваров.СписокВыбора;
		СписокВыбораПриемка.Очистить();
		СписокВыбораПриемка.Добавить("Разделена", НСтр("ru = 'Разделена по документам'"));
		Если ИспользоватьСоглашенияСПоставщиками Тогда
			СписокВыбораПриемка.Добавить("НеРазделена", НСтр("ru = 'Сгруппирована по соглашениям'"));
		КонецЕсли;
		ПриемкаТоваров.Доступность = СписокВыбораПриемка.Количество()>1;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет настройки вариантов приемки по значению перечисления
//
// Параметры:
//  ВариантПриемкиТоваров	 - ПеречислениеСсылка.ВариантыПриемкиТоваров - Вариант приемки
//  ОформлениеОрдера		 - Строка - настройка оформления ордера
//  ПриемкаТоваров			 - Строка - настройка деления приемки.
// 
Процедура ЗаполнитьНастройкиВариантовПриемки(ВариантПриемкиТоваров, ОформлениеОрдера, ПриемкаТоваров = Неопределено) Экспорт
	
	Если ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.ПоДоговорамБезЗаказовИНакладных Тогда
		ОформлениеОрдера = "ПоДоговору";
		ПриемкаТоваров = "НеРазделена";
	ИначеЕсли ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.ПоДоговорамПослеЗаказовИлиНакладных Тогда
		ОформлениеОрдера = "ПослеЗаказа";
		ПриемкаТоваров = "НеРазделена";
	ИначеЕсли ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.ПоДоговорамПослеНакладных Тогда
		ОформлениеОрдера = "ПослеНакладной";
		ПриемкаТоваров = "НеРазделена";
	ИначеЕсли ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным Тогда
		ОформлениеОрдера = "ПослеЗаказа";
		ПриемкаТоваров = "Разделена";
	ИначеЕсли ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным Тогда
		ОформлениеОрдера = "ПослеНакладной";
		ПриемкаТоваров = "Разделена";
	КонецЕсли;
	
КонецПроцедуры

// Заполняет настройки вариантов приемки по значению перечисления
//
// Параметры:
//  ОформлениеОрдера - Строка - настройка оформления ордера
//  ПриемкаТоваров   - Строка - настройка деления приемки.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ВариантыПриемкиТоваров - Вариант приемки.
//
Функция ПолучитьВариантовПриемкиПоНастройкам(ОформлениеОрдера, ПриемкаТоваров) Экспорт
	
	Если ОформлениеОрдера = "ПоДоговору" Тогда
		ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.ПоДоговорамБезЗаказовИНакладных
	ИначеЕсли ОформлениеОрдера = "ПослеЗаказа" И ПриемкаТоваров = "НеРазделена" Тогда
		ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.ПоДоговорамПослеЗаказовИлиНакладных
	ИначеЕсли ОформлениеОрдера = "ПослеНакладной" И ПриемкаТоваров = "НеРазделена" Тогда
		ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.ПоДоговорамПослеНакладных
	ИначеЕсли ОформлениеОрдера = "ПослеЗаказа" И ПриемкаТоваров = "Разделена" Тогда
		ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным;
	ИначеЕсли ОформлениеОрдера = "ПослеНакладной" И ПриемкаТоваров = "Разделена" Тогда
		ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным;
	КонецЕсли;
	
	Возврат ВариантПриемкиТоваров;
	
КонецФункции

// Возвращает признак использования накладной как распоряжения на приемку
//
// Параметры:
//	ВариантПриемкиТоваров - ПеречислениеСсылка.ВариантыПриемкиТоваров - ссылка на вариант приемки.
//
// Возвращаемое значение:
//	Булево - Истина, если используется соглашение при приемке.
//
Функция РаспоряжениеНаПриемкуТовараНакладная(Знач ВариантПриемкиТоваров) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ВариантПриемкиТоваров) Тогда
		ВариантПриемкиТоваров = Константы.ВариантПриемкиТоваров.Получить();
	КонецЕсли;
	
	Результат = Ложь;
	
	Если ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным Тогда 
		
		Результат = Истина;
		
	КонецЕсли;
	
	Возврат Результат
	
КонецФункции

// Возвращает признак использования заказа/накладной без заказа как распоряжения на приемку.
//
// Параметры:
//	ВариантПриемкиТоваров - ПеречислениеСсылка.ВариантыПриемкиТоваров - ссылка на вариант приемки.
//
// Возвращаемое значение:
//	Булево - Истина, если используется соглашение при приемке.
//
Функция РаспоряжениеНаПриемкуТовараЗаказ(Знач ВариантПриемкиТоваров) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ВариантПриемкиТоваров) Тогда
		ВариантПриемкиТоваров = Константы.ВариантПриемкиТоваров.Получить();
	КонецЕсли;
	
	Результат = Ложь;
	
	Если ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным Тогда 
		
		Результат = Истина;
		
	КонецЕсли;
	
	Возврат Результат
	
КонецФункции

// Заполняет список выбора вариантов приемки по соглашениям
//
// Параметры:
//	ОформлениеОрдера - ПолеФормы - поле формы с настройкой оформления ордера
//	ПриемкаТоваров - ПолеФормы - поле формы с настройкой приемки товаров.
//	ВариантОформленияЗакупок - ПеречислениеСсылка.ВариантыОформленияЗакупок - вариант оформления раздельной закупки.
//
Процедура ЗаполнитьСписокВыбораВариантовПриемкиПоДоговорам(ОформлениеОрдера, ПриемкаТоваров, ВариантОформленияЗакупок = Неопределено) Экспорт
	
	ЗначениеОформленияОрдера = "";
	ЗначениеКонстанты = Константы.ВариантПриемкиТоваров.Получить();
	ЗаполнитьНастройкиВариантовПриемки(ЗначениеКонстанты, ЗначениеОформленияОрдера);
	
	ИспользоватьДоговорыСПоставщиками = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСПоставщиками");
	СписокВыбораРаспоряжение = ОформлениеОрдера.СписокВыбора;
	
	ВыбранаНеотфактурованнаяПоставка = (ВариантОформленияЗакупок = Перечисления.ВариантыОформленияЗакупок.НеотфактурованныеПоставкиТоваров
										ИЛИ ВариантОформленияЗакупок = Перечисления.ВариантыОформленияЗакупок.НеотфактурованныеПоставкиТоваровИУслуг);
	ВыбраныТоварыВПути = (ВариантОформленияЗакупок = Перечисления.ВариантыОформленияЗакупок.ТоварыВПути);
	
	СписокВыбораРаспоряжение.Очистить();
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПоставщикам") 
		И ВыбранаНеотфактурованнаяПоставка Тогда
		СписокВыбораРаспоряжение.Добавить("ПослеЗаказа", НСтр("ru = 'После оформления заказа'"));
	ИначеЕсли ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПоставщикам") 
		И Не ВыбранаНеотфактурованнаяПоставка Тогда
		СписокВыбораРаспоряжение.Добавить("ПослеЗаказа", НСтр("ru = 'После оформления заказа'"));
		СписокВыбораРаспоряжение.Добавить("ПослеНакладной", НСтр("ru = 'После оформления накладной'"));
	ИначеЕсли ВыбраныТоварыВПути Тогда
		СписокВыбораРаспоряжение.Добавить("ПослеНакладной", НСтр("ru = 'После оформления накладной'"));
	ИначеЕсли Не ВыбранаНеотфактурованнаяПоставка Тогда
		СписокВыбораЗначение = ?(ЗначениеОформленияОрдера = "ПослеНакладной", ЗначениеОформленияОрдера, "ПослеЗаказа");
		СписокВыбораРаспоряжение.Добавить(СписокВыбораЗначение, НСтр("ru = 'После оформления накладной'"));
	КонецЕсли;
	
	Если ИспользоватьДоговорыСПоставщиками Тогда
		СписокВыбораРаспоряжение.Добавить("ПоДоговору", НСтр("ru = 'По текущему договору (в т.ч. без документов)'"));
	КонецЕсли;
	
	ОформлениеОрдера.Доступность = СписокВыбораРаспоряжение.Количество() > 1;
	
	Если ПриемкаТоваров <> Неопределено Тогда
		СписокВыбораПриемка = ПриемкаТоваров.СписокВыбора;
		СписокВыбораПриемка.Очистить();
		СписокВыбораПриемка.Добавить("Разделена", НСтр("ru = 'Разделена по документам'"));
		Если ИспользоватьДоговорыСПоставщиками Тогда
			СписокВыбораПриемка.Добавить("НеРазделена", НСтр("ru = 'Сгруппирована по договорам'"));
		КонецЕсли;
		ПриемкаТоваров.Доступность = СписокВыбораПриемка.Количество() > 1;
	КонецЕсли;
	
КонецПроцедуры

// Получает вариант приемки товаров по распоряжению, по соглашению, либо по одноименной константе.
//
// Параметры:
//  Распоряжение - ДокументСсылка - документ содержащий реквизит "ВариантПриемкиТоваров"
//  Договор		 - СправочникСсылка.ДоговорыКонтрагентов - договор переопределяющий вариант приемки товаров.
// 
// Возвращаемое значение:
//   - ПеречислениеСсылка.ВариантыПриемкиТоваров - найденный вариант приемки.
//
Функция ПолучитьВариантПриемкиТоваров(Распоряжение = Неопределено, Договор = Неопределено) Экспорт
	
	ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(Распоряжение)
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Распоряжение, "ВариантПриемкиТоваров") Тогда
		ВариантПриемкиТоваров = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Распоряжение, "ВариантПриемкиТоваров");
	КонецЕсли;
	Если ЗначениеЗаполнено(Договор) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		ВариантПриемкиТоваров = ?(ЗначениеЗаполнено(ВариантПриемкиТоваров),
								 ВариантПриемкиТоваров,
								 ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ВариантПриемкиТоваров"));
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	ВариантПриемкиТоваров = ?(ЗначениеЗаполнено(ВариантПриемкиТоваров),
							 ВариантПриемкиТоваров,
							 Константы.ВариантПриемкиТоваров.Получить());
	
	Возврат ВариантПриемкиТоваров;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииОбновленияЗависимыхРеквизитовВЗаказахИНакладных

// Обновляет реквизиты списания на расходы в табличной части документа, в зависимости от назначения.
// 
// Параметры:
//   СтрокиКоллекции - Массив - массив строк коллекции, в которой нужно обновить реквизиты.
//
Процедура ОчиститьРеквизитыСписанияНаРасходыПриУстановкеНазначенияВТабличнойЧасти(СтрокиКоллекции) Экспорт
	
	Для Каждого СтрокаТаблицы Из СтрокиКоллекции Цикл
	
		Если ЗначениеЗаполнено(СтрокаТаблицы.Назначение) Тогда
			
			СтрокаТаблицы.СписатьНаРасходы = Ложь;
			СтрокаТаблицы.СтатьяРасходов = ПредопределенноеЗначение("ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка");
			СтрокаТаблицы.АналитикаРасходов = Неопределено;
			
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСНомерамиГТД

#Область ЗаполнениеТабличнойЧастиТовары

// Конструктор коллекции параметров создания элемента справчоника 'НомераГТД' по умолчанию.
//
// Возвращаемое значение:
//	Структура - коллекция, которая содержит следующие свойства:
//		* Код - Строка - номер ГТД.
//		* ДанныеТовара - Структура - информация о товаре, содержащая следующие данные:
//			** Номенклатура - СправочникСсылка.Номенклатура - информация о номенклатуре.
//			** Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - информация о характеристике номенклатуры.
//			** Упаковка - СправочникСсылка.УпаковкиЕдиницыИзмерения - информация об упаковке товара.
//			** КоличествоКомплектов - Число - количество товара.
//			** СуммаПоРНПТ - Число - стоимость товара.
//		* СтранаПроисхождения - СправочникСсылка.СтраныМира - информация о стране происхождения товара.
//		* Дата - Дата- дата документа.
//		* ВалютаДокумента - СправочникСсылка.Валюты - валюта документа.
//		* СозданиеЭлементаЛюбогоТипа - Булево - признак того, что создаваемый элемент справочника не зависит от настроек
//												использования учета прослеживаемости и признака прослеживаемости номенклатуры.
//		* ПоказатьСтоимостьПоДокументу - Булево - признак использования в документе суммовых показателей.
//		* ИспользоватьУчетПрослеживаемыхИмпортныхТоваров - Булево - признак использования учета прослеживаемых импортных
//																	товаров.
//
Функция ПараметрыСозданияНомераГТДПоУмолчанию() Экспорт
	
	ДанныеТовара = Новый Структура;
	ДанныеТовара.Вставить("Номенклатура",			ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
	ДанныеТовара.Вставить("Характеристика",			ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
	ДанныеТовара.Вставить("Упаковка",				ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка"));
	ДанныеТовара.Вставить("КоличествоКомплектов",	0);
	ДанныеТовара.Вставить("СуммаПоРНПТ",			0);
	
	ПараметрыСоздания = Новый Структура;
	ПараметрыСоздания.Вставить("Код",					"");
	ПараметрыСоздания.Вставить("ДанныеТовара",			ДанныеТовара);
	ПараметрыСоздания.Вставить("СтранаПроисхождения",	ПредопределенноеЗначение("Справочник.СтраныМира.ПустаяСсылка"));
	ПараметрыСоздания.Вставить("Дата",					Дата(1, 1, 1));
	ПараметрыСоздания.Вставить("ВалютаДокумента",		ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка"));
	ПараметрыСоздания.Вставить("СозданиеЭлементаЛюбогоТипа",	Ложь);
	ПараметрыСоздания.Вставить("ПоказатьСтоимостьПоДокументу",	Ложь);
	ПараметрыСоздания.Вставить("ИспользоватьУчетПрослеживаемыхИмпортныхТоваров", Ложь);
	
	Возврат ПараметрыСоздания;
	
КонецФункции

// Возвращает параметры, используемые при заполнении табличной части объекта номерами ГТД.
//
// Возвращаемое значение:
//	Структура - параметры, используемые при заполнении табличной части объекта номерами ГТД, со следующими свойствами:
//		* ИмяПоляНоменклатура - Строка - имя колонки табличной части, содержащее информацию о номенклатуре, для которой
//											заполняется номер ГТД.
//		* ИмяПоляКоличествоУпаковок - Строка - имя колонки табличной части, содержащее информацию о количестве упаковок
//												номенклатуры, для которой заполняется номер ГТД.
//		* ПересчитатьКоличествоПоРНПТ - Булево - признак необходимости пересчета количества по РНПТ в строках табличной
//													части, заполняемых номерами ГТД.
//
Функция ПараметрыЗаполненияНомераГТДВТабличнойЧасти() Экспорт
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ИмяПоляНоменклатура",			"Номенклатура");
	ПараметрыЗаполнения.Вставить("ИмяПоляКоличествоУпаковок",	"КоличествоУпаковок");
	ПараметрыЗаполнения.Вставить("ПересчитатьКоличествоПоРНПТ",	Истина);
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

// Заполняет номера ГТД в строках табличной части объекта.
//
// Параметры:
//	Товары - ДанныеФормыКоллекция - табличная часть объекта, в которой осуществляется заполнение информации о
//									номерах ГТД.
//	НомерГТД - СправочникСсылка.НомераГТД - значение номера ГТД, которым заполняется табличная часть.
//	ИдентификаторыСтрок - Массив Из Число - коллекция идентификаторов строк табличной части объекта, которые необходимо
//											заполнить.
//	ЗаполненыНомераГТД - Булево - признак того, что выполнено заполнение табличной части.
//	ПараметрыЗаполнения - см. ПараметрыЗаполненияНомераГТДВТабличнойЧасти
//
Процедура ЗаполнитьНомераГТДВТабличнойЧасти(Товары,
											НомерГТД,
											ИдентификаторыСтрок,
											ЗаполненыНомераГТД,
											ПараметрыЗаполнения = Неопределено) Экспорт
	
	Если ПараметрыЗаполнения = Неопределено Тогда
		ПараметрыЗаполнения = ПараметрыЗаполненияНомераГТДВТабличнойЧасти();
	КонецЕсли;
	
	ИмяПоляНоменклатура = ПараметрыЗаполнения.ИмяПоляНоменклатура;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеНоменклатуры.Ссылка			КАК Ссылка,
	|	ДанныеНоменклатуры.ТипНоменклатуры	КАК ТипНоменклатуры
	|ИЗ
	|	Справочник.Номенклатура КАК ДанныеНоменклатуры
	|ГДЕ
	|	ДанныеНоменклатуры.Ссылка В(&СписокНоменклатуры)
	|	И ДанныеНоменклатуры.ВестиУчетПоГТД
	|	И ДанныеНоменклатуры.ТипНоменклатуры В(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|											ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа),
	|											ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НомераГТД.Ссылка				КАК НомерГТД,
	|	НомераГТД.ТипНомераГТД			КАК ТипНомераГТД,
	|	НомераГТД.СтранаПроисхождения	КАК СтранаПроисхождения
	|ИЗ
	|	Справочник.НомераГТД КАК НомераГТД
	|ГДЕ
	|	НомераГТД.Ссылка = &НомерГТД";
	
	Запрос.УстановитьПараметр("НомерГТД", НомерГТД);
	Запрос.УстановитьПараметр("СписокНоменклатуры",
								Товары.Выгрузить(, ИмяПоляНоменклатура).ВыгрузитьКолонку(ИмяПоляНоменклатура));
	
	РезультатЗапроса		= Запрос.ВыполнитьПакет();
	РезультатПоНоменклатуре	= РезультатЗапроса[0];
	РезультатПоГТД			= РезультатЗапроса[1];
	
	Если РезультатПоГТД.Пустой()
		Или РезультатПоНоменклатуре.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ИмпортныеТовары = РезультатПоНоменклатуре.Выгрузить();
	
	ДанныеГТД = РезультатПоГТД.Выбрать();
	ДанныеГТД.Следующий();
	
	ЗаполненыНомераГТД	= Ложь;
	СписокТиповГТД		= УчетПрослеживаемыхТоваровКлиентСерверЛокализация.ТипыНомеровГТД(Истина);//!!
	
	Для Каждого ИдентификаторСтроки Из ИдентификаторыСтрок Цикл
		СтрокаТаблицы = Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		ДанныеНоменклатуры = ИмпортныеТовары.Найти(СтрокаТаблицы[ИмяПоляНоменклатура], "Ссылка");
		
		Если ДанныеНоменклатуры <> Неопределено Тогда
			Если СписокТиповГТД.Найти(ДанныеГТД.ТипНомераГТД) = Неопределено
				И ДанныеНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ЗаполненыНомераГТД = Истина;
			
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеГТД);
			
			Если ПараметрыЗаполнения.ПересчитатьКоличествоПоРНПТ Тогда
				Если СтрокаТаблицы.ТипНомераГТД = Перечисления.ТипыНомеровГТД.НомерРНПТКомплекта Тогда
					СтрокаТаблицы.КоличествоПоРНПТ = СтрокаТаблицы[ПараметрыЗаполнения.ИмяПоляКоличествоУпаковок];
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет номера ГТД в строках табличной части объекта по данным последних поступлений.
//
// Параметры:
//	Товары - ДанныеФормыКоллекция - табличная часть объекта, в которой осуществляется заполнение информации о
//									номерах ГТД.
//	ЗаполненыНомераГТД - Булево - признак того, что выполнено заполнение табличной части.
//	ПараметрыЗаполнения - см. ПараметрыЗаполненияНомераГТДВТабличнойЧасти
//
Процедура ЗаполнитьНомераГТДПоПоследнимПоступлениям(Товары,
													ЗаполненыНомераГТД,
													ПараметрыЗаполнения = Неопределено) Экспорт
	
	Если ПараметрыЗаполнения = Неопределено Тогда
		ПараметрыЗаполнения = ПараметрыЗаполненияНомераГТДВТабличнойЧасти();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсходнаяТаблица.НомерСтроки		КАК НомерСтроки,
	|	ИсходнаяТаблица.Номенклатура	КАК Номенклатура
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	&ИсходнаяТаблица КАК ИсходнаяТаблица
	|ГДЕ
	|	ИсходнаяТаблица.ВедетсяУчетПоГТД
	|	И ИсходнаяТаблица.НомерГТД = ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	|	И ИсходнаяТаблица.ТипНоменклатуры В(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|										ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеРегистра.Номенклатура					КАК Номенклатура,
	|	МАКСИМУМ(ДанныеРегистра.ДатаПоступления)	КАК ДатаПоступления
	|ПОМЕСТИТЬ ДатыПоступленияТоваровОрганизаций
	|ИЗ
	|	РегистрСведений.ДатыПоступленияТоваровОрганизаций КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.НомерГТД <> ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеРегистра.Номенклатура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки			КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура			КАК Номенклатура,
	|	МАКСИМУМ(ДанныеРегистра.НомерГТД)	КАК НомерГТД
	|ПОМЕСТИТЬ НомераГТДТоваров
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДатыПоступленияТоваровОрганизаций КАК ДатыПоступленияТоваровОрганизаций
	|		ПО ТаблицаТовары.Номенклатура = ДатыПоступленияТоваровОрганизаций.Номенклатура
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДатыПоступленияТоваровОрганизаций КАК ДанныеРегистра
	|		ПО ТаблицаТовары.Номенклатура = ДанныеРегистра.Номенклатура
	|			И ДанныеРегистра.НомерГТД <> ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	|			И ДатыПоступленияТоваровОрганизаций.ДатаПоступления = ДанныеРегистра.ДатаПоступления
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.НомерСтроки,
	|	ТаблицаТовары.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки		КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура		КАК Номенклатура,
	|	ТаблицаТовары.НомерГТД			КАК НомерГТД,
	|	НомераГТД.ТипНомераГТД			КАК ТипНомераГТД,
	|	НомераГТД.СтранаПроисхождения	КАК СтранаПроисхождения
	|
	|ИЗ
	|	НомераГТДТоваров КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НомераГТД КАК НомераГТД
	|		ПО ТаблицаТовары.НомерГТД = НомераГТД.Ссылка";
	
	ВыгружаемыеКолонки = "НомерСтроки, Номенклатура, НомерГТД, ТипНоменклатуры, ВедетсяУчетПоГТД";
	
	Запрос.УстановитьПараметр("ИсходнаяТаблица", Товары.Выгрузить(, ВыгружаемыеКолонки));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЗаполненыНомераГТД = Выборка.Количество() > 0;
	
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = Товары.Получить(Выборка.НомерСтроки - 1);
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка, ,"НомерСтроки");
		
		Если ПараметрыЗаполнения.ПересчитатьКоличествоПоРНПТ Тогда
			Если СтрокаТаблицы.ТипНомераГТД = Перечисления.ТипыНомеровГТД.НомерРНПТКомплекта Тогда
				СтрокаТаблицы.КоличествоПоРНПТ = СтрокаТаблицы[ПараметрыЗаполнения.ИмяПоляКоличествоУпаковок];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает параметры, используемые при заполнении табличной части объекта номерами ГТД по учетным данным.
//
// Возвращаемое значение:
//	Структура - содержит следующие свойства:
//	* ПараметрыЗапроса - Структура - коллекция параметров запроса остатков номеров ГТД, содержащая следующие поля:
//		** Ссылка - ДокументСсылка - ссылка на документ, в котором заполняются номера ГТД (обязательно к заполнению
//										при варианте получения данных 'ПоРаспоряжениям').
//		** Период - Дата, Граница - период, за который получаются сведения об остатках номеров ГТД (обязательно
//									к заполнению при варианте получения данных 'ПоОстаткамПереданныхНаКомиссию'
//									и 'ПоОстаткамУХранителя').
//		** Организация - СправочникСсылка.Организации, Неопределено - организация, для которой получаются сведения
//																		об остатках номеров ГТД (обязательно
//																		к заполнению при варианте получения данных
//																		'ПоОстаткамУХранителя').
//		** Партнер - СправочникСсылка.Партнеры, Неопределено - партнер, для которого получаются сведения об остатках
//																номеров ГТД (обязательно к заполнению при варианте
//																получения данных 'ПоОстаткамПереданныхНаКомиссию').
//		** Договор - СправочникСсылка.ДоговорыКонтрагентов, Неопределено - договор, по которому получаются сведения об
//																			остатках номеров ГТД (обязательно
//																			к заполнению при варианте получения данных
//																			'ПоОстаткамУХранителя').
//	* ИмяПоляРаспоряжение - Строка - имя поля распоряжения, по которому получаются сведения о номерах ГТД.
//	* ДействияСоСтрокой - Структура, Неопределено - действия по обработке строк табличной части.
//
Функция ПараметрыЗаполненияНомеровГТДПоУчетнымДанным() Экспорт
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Ссылка");
	ПараметрыЗапроса.Вставить("Период", Дата(1, 1, 1));
	ПараметрыЗапроса.Вставить("Организация");
	ПараметрыЗапроса.Вставить("Партнер");
	ПараметрыЗапроса.Вставить("Договор");
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
	ПараметрыЗаполнения.Вставить("ИмяПоляРаспоряжение", "");
	ПараметрыЗаполнения.Вставить("ДействияСоСтрокой", Неопределено);
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

// Заполняет номера ГТД в табличной части объекта.
//
// Параметры:
//	ТаблицаТоваров - ДанныеФормыКоллекция, ТабличнаяЧасть - таблица в которой заполняются номера ГТД, содержащая
//															следующие колонки:
//		* ИмяПоляРаспоряжение - ДокументСсылка - колонка с произвольным именем содержащая ссылку на распоряжение
//													(наличие обязательно при варианте получения данных 'ПоРаспоряжениям').
//		* Номенклатура - СправочникСсылка.Номенклатура - сведения о номенклатуре.
//		* Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - сведения о характеристике номенклатуры.
//		* Назначение - СправочникСсылка.Назначения - сведения о назначении товара.
//		* Серия - СправочникСсылка.СерииНоменклатуры - сведения о серии номенклатуры.
//		* НомерГТД - СправочникСсылка.НомераГТД - сведения о номере ГТД.
//		* Количество - Число - количество товара.
//	ВариантПолученияДанных - Строка - вариант получения данных о номерах ГТД.
//	ДополнительныеПараметры - см. ПараметрыЗаполненияНомеровГТДПоУчетнымДанным
//
Процедура ЗаполнитьНомераГТДПоУчетнымДанным(ТаблицаТоваров, ВариантПолученияДанных, ДополнительныеПараметры) Экспорт
	
	ИмяПоляРаспоряжение	= ДополнительныеПараметры.ИмяПоляРаспоряжение;
	ДействияСоСтрокой	= ДополнительныеПараметры.ДействияСоСтрокой;
	
	ТекстЗапроса = ТекстЗапросаФормированияТаблицыНомеровГТД(ВариантПолученияДанных);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяПоляРаспоряжение", ИмяПоляРаспоряжение);
	
	НомерГТДПоУмолчанию = Справочники.НомераГТД.ПустаяСсылка();
	
	ТоварыКЗаполнению = ТаблицаТоваров.Выгрузить();
	ТоварыКЗаполнению.ЗаполнитьЗначения(НомерГТДПоУмолчанию, "НомерГТД");
	ТоварыСуммаКЗаполнению = ТаблицаТоваров.Выгрузить();
	
	ЗаполнятьКоличествоУпаковок		= ТоварыКЗаполнению.Колонки.Найти("КоличествоУпаковок") <> Неопределено;
	ЗаполнитьТипНомераГТД			= ТоварыКЗаполнению.Колонки.Найти("ТипНомераГТД") <> Неопределено;
	ЗаполнятьСтрануПроисхождения	= ТоварыКЗаполнению.Колонки.Найти("СтранаПроисхождения") <> Неопределено;
	
	Если ЗаполнитьТипНомераГТД Тогда
		ТипНомераГТДПоУмолчанию = Перечисления.ТипыНомеровГТД.ПустаяСсылка();
		ТоварыКЗаполнению.ЗаполнитьЗначения(ТипНомераГТДПоУмолчанию, "ТипНомераГТД");
	КонецЕсли;
	
	Если ЗаполнятьСтрануПроисхождения Тогда
		СтранаПроисхожденияПоУмолчанию = Справочники.СтраныМира.ПустаяСсылка();
		ТоварыКЗаполнению.ЗаполнитьЗначения(СтранаПроисхожденияПоУмолчанию, "СтранаПроисхождения");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	ПараметрыЗапроса = Запрос.НайтиПараметры();
	
	Для Каждого ПараметрЗапроса Из ДополнительныеПараметры.ПараметрыЗапроса Цикл
		Если ПараметрыЗапроса.Найти(ПараметрЗапроса.Ключ) <> Неопределено Тогда
			Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ТаблицаТовары", ТоварыКЗаполнению);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	НомераГТДКЗаполнению = РезультатЗапроса.Выгрузить();
	
	ПоляПоиска = "Номенклатура, Характеристика, Серия, Назначение, НомерГТД";
	
	Если ЗначениеЗаполнено(ИмяПоляРаспоряжение) Тогда
		ПоляПоиска = ПоляПоиска + ", " + ИмяПоляРаспоряжение;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура(ПоляПоиска);
	
	ПересчетСуммы = Ложь;
	ПересчетСуммыНДС = Ложь;
	ПересчетСуммыСНДС = Ложь;
	
	Если ДействияСоСтрокой <> Неопределено Тогда
		Если ДействияСоСтрокой.Свойство("ПересчитатьСумму") Тогда
			ПересчетСуммы = Истина;
			ДействияСоСтрокой.Удалить("ПересчитатьСумму");
		КонецЕсли;
		Если ДействияСоСтрокой.Свойство("ПересчитатьСуммуНДС") Тогда
			ПересчетСуммыНДС = Истина;
			ДействияСоСтрокой.Удалить("ПересчитатьСуммуНДС");
		КонецЕсли;
		Если ДействияСоСтрокой.Свойство("ПересчитатьСуммуСНДС") Тогда
			ПересчетСуммыСНДС = Истина;
			ДействияСоСтрокой.Удалить("ПересчитатьСуммуСНДС");
		КонецЕсли;
	КонецЕсли; 
	
	Для Каждого СтрокаНомераГТДКЗаполнению Из НомераГТДКЗаполнению Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаНомераГТДКЗаполнению.НомерГТД) Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоРаспределить = СтрокаНомераГТДКЗаполнению.Количество;
		
		Если КоличествоРаспределить < 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаНомераГТДКЗаполнению);
		СтруктураПоиска.НомерГТД = Справочники.НомераГТД.ПустаяСсылка();
		
		СтрокиТоваров = ТоварыКЗаполнению.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрокаТоваров Из СтрокиТоваров Цикл
			
			Если КоличествоРаспределить >= СтрокаТоваров.Количество Тогда
				КоличествоРаспределить = КоличествоРаспределить - СтрокаТоваров.Количество;
			Иначе
				
				НоваяСтрТовары = ТоварыКЗаполнению.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрТовары, СтрокаТоваров);
				
				НовоеКоличество = СтрокаТоваров.Количество - КоличествоРаспределить;
				
				НоваяСтрТовары.Количество = НовоеКоличество;
				
				Если ЗаполнятьКоличествоУпаковок Тогда
					НовоеКоличествоУпаковок = Окр(СтрокаТоваров.КоличествоУпаковок * НовоеКоличество / СтрокаТоваров.Количество,
													3,
													РежимОкругления.Окр15как20);
					
					НоваяСтрТовары.КоличествоУпаковок = НовоеКоличествоУпаковок;
					
					СтрокаТоваров.КоличествоУпаковок = СтрокаТоваров.КоличествоУпаковок - НовоеКоличествоУпаковок;
				КонецЕсли;
				
				СтрокаТоваров.Количество = КоличествоРаспределить;
				
				Если ДействияСоСтрокой <> Неопределено Тогда
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрТовары, ДействияСоСтрокой, Неопределено);
				КонецЕсли;
				
				КоличествоРаспределить = 0;
				
			КонецЕсли;
			
			СтрокаТоваров.НомерГТД = СтрокаНомераГТДКЗаполнению.НомерГТД;
			
			Если ЗаполнитьТипНомераГТД Тогда
				СтрокаТоваров.ТипНомераГТД = СтрокаНомераГТДКЗаполнению.ТипНомераГТД;
			КонецЕсли;
			
			Если ЗаполнятьСтрануПроисхождения Тогда
				СтрокаТоваров.СтранаПроисхождения = СтрокаНомераГТДКЗаполнению.СтранаПроисхождения;
			КонецЕсли;
			
			Если ДействияСоСтрокой <> Неопределено Тогда
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТоваров, ДействияСоСтрокой, Неопределено);
			КонецЕсли;
			
			Если Не КоличествоРаспределить Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	//Распределение сумм документа по аналогии с количеством из-за неверного округления при распределении номеров ГТД
	СтруктураПоискаДо = Новый Структура(ПоляПоиска); 
	СтруктураПоискаДо.Удалить("НомерГТД");
	
	ПоляСуммирования = "Количество";
	ПоляСуммирования = ?(ПересчетСуммы, ПоляСуммирования + ", Сумма", ПоляСуммирования + "");
	ПоляСуммирования = ?(ПересчетСуммыНДС, ПоляСуммирования + ", СуммаНДС", ПоляСуммирования + "");
	ПоляСуммирования = ?(ПересчетСуммыСНДС, ПоляСуммирования + ", СуммаСНДС", ПоляСуммирования + "");
	
	ТоварыСуммаКЗаполнению.Свернуть(ПоляПоиска, ПоляСуммирования); 
	
	Для Каждого СтрокаТоваровДо Из ТоварыСуммаКЗаполнению Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоискаДо, СтрокаТоваровДо);
		СтрокиТоваров = ТоварыКЗаполнению.НайтиСтроки(СтруктураПоискаДо);
		
		СуммаНДСРаспределить = ?(ПересчетСуммыНДС, СтрокаТоваровДо.СуммаНДС, 0);
		СуммаСНДСРаспределить = ?(ПересчетСуммыСНДС, СтрокаТоваровДо.СуммаСНДС, 0);
				
		Для Каждого СтрокаТоваров Из СтрокиТоваров Цикл
			
			Коэффициент = ?(СтрокаТоваровДо.Количество = 0, 0, СтрокаТоваров.Количество/СтрокаТоваровДо.Количество);
				
			Если ПересчетСуммыНДС Тогда
				СуммаНДС = Окр(СтрокаТоваровДо.СуммаНДС * Коэффициент, 2);
				Если СуммаНДСРаспределить >= СуммаНДС Тогда
					СуммаНДСРаспределить = СуммаНДСРаспределить - СуммаНДС;
					СтрокаТоваров.СуммаНДС = СуммаНДС;
				Иначе
					СтрокаТоваров.СуммаНДС = СуммаНДСРаспределить;
				КонецЕсли;
			КонецЕсли;
				
			Если ПересчетСуммыСНДС Тогда
				СуммаСНДС = Окр(СтрокаТоваровДо.СуммаСНДС * Коэффициент, 2);
				Если СуммаСНДСРаспределить >= СуммаСНДС Тогда
					СуммаСНДСРаспределить = СуммаСНДСРаспределить - СуммаСНДС;
					СтрокаТоваров.СуммаСНДС = СуммаСНДС;
				Иначе
					СтрокаТоваров.СуммаСНДС = СуммаСНДСРаспределить;
				КонецЕсли;
			КонецЕсли;
				
			Если ПересчетСуммы Тогда
				СтрокаТоваров.Сумма = Окр(СтрокаТоваровДо.Сумма * Коэффициент, 2);
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаТоваров.Загрузить(ТоварыКЗаполнению);
	
КонецПроцедуры

// Возвращает параметры, используемые при подборе номера ГТД в табличную часть объекта.
//
// Возвращаемое значение:
//	Структура - параметры, используемые при подборе номера ГТД в табличную часть объекта, со следующими свойствами:
//		* ИсточникТЧ - Строка - путь к табличной части. Если значение не указано, тогда табличная часть является
//								реквизитом формы клиентского приложения. Значение по умолчанию 'Объект'.
//		* ИмяТЧ - Строка - имя табличной части, в которую осуществляется подбор номера ГТД.
//		* ИмяТаблицыФормы - Строка - имя таблицы формы.
//		* ИмяПоляНоменклатура - Строка - имя колонки табличной части, содержащее информацию о номенклатуре, для которой
//											заполняется номер ГТД.
//		* ИмяПоляТипНоменклатуры - Строка - имя колонки табличной части, содержащее информацию о типе номенклатуры,
//											для которой заполняется номер ГТД.
//		* ИмяПоляКоличествоУпаковок - Строка - имя колонки табличной части, содержащее информацию о количестве упаковок
//												номенклатуры, для которой заполняется номер ГТД.
//		* ПересчитатьКоличествоПоРНПТ - Булево - признак необходимости пересчета количества по РНПТ в строках табличной
//													части, заполняемых номерами ГТД.
//
Функция ПараметрыПодбораНомераГТД() Экспорт
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("ИсточникТЧ",						"Объект");
	ПараметрыПодбора.Вставить("ИмяТЧ",							"Товары");
	ПараметрыПодбора.Вставить("ИмяТаблицыФормы",				"Товары");
	ПараметрыПодбора.Вставить("ИмяПоляНоменклатура",			"Номенклатура");
	ПараметрыПодбора.Вставить("ИмяПоляТипНоменклатуры",			"ТипНоменклатуры");
	ПараметрыПодбора.Вставить("ИмяПоляКоличествоУпаковок",		"КоличествоУпаковок");
	ПараметрыПодбора.Вставить("ПересчитатьКоличествоПоРНПТ",	Истина);
	
	Возврат ПараметрыПодбора;
	
КонецФункции

// Выполняет заполнение результатом подбора номеров ГТД в табличной части объекта.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма, в которой осуществляется подбор.
//	ИдентификаторСтроки -  Число - идентификатор строки, для которой осуществляется подбор значений.
//	ДанныеПодбора - Структура - коллекция, содержащая следующую информацию:
//					* ТипНомераГТД - ПеречислениеСсылка.ТипыНомеровГТД - тип основного номера ГТД, полученного при подборе.
//					* ОсновнойНомерГТД - СправочникСсылка.НомераГТД - основной номер ГТД, полученный при подборе.
//					* ОстаточныйНомерГТД - СправочникСсылка.НомераГТД - основной номер РНПТ комплекта, полученный при
//																		подборе.
//	ЗаполненыНомераГТД - Булево - признак того, что выполнено заполнение табличной части.
//	ПараметрыПодбора - см. ПараметрыПодбораНомераГТД
//	ДействияОбработкиСтроки - Структура, Неопределено - коллекция, содержащая параметры обработки строк табличной части.
//
Процедура ОбработатьУказаниеНомераГТД(Форма,
										ИдентификаторСтроки,
										ДанныеПодбора,
										ЗаполненыНомераГТД,
										ПараметрыПодбора = Неопределено,
										ДействияОбработкиСтроки = Неопределено) Экспорт
	
	Если ПараметрыПодбора = Неопределено Тогда
		ПараметрыПодбора = ПараметрыПодбораНомераГТД();
	КонецЕсли;
	
	Если Не ПустаяСтрока(ПараметрыПодбора.ИсточникТЧ) Тогда
		Товары = Форма[ПараметрыПодбора.ИсточникТЧ][ПараметрыПодбора.ИмяТЧ];
	Иначе
		Товары = Форма[ПараметрыПодбора.ИмяТЧ];
	КонецЕсли;
	
	ТекущаяСтрока = Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполненыНомераГТД = Истина;
	
	ТекущаяСтрока.НомерГТД = ДанныеПодбора.ОсновнойНомерГТД;
	
	ИменаРеквизитов = "ТипНомераГТД, СтранаПроисхождения";
	РеквизитыГТД	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущаяСтрока.НомерГТД, ИменаРеквизитов);
	
	ЗаполнитьЗначенияСвойств(ТекущаяСтрока, РеквизитыГТД);
	
	ТребуетсяОбработкаСтрок = ДействияОбработкиСтроки <> Неопределено
								И ДействияОбработкиСтроки.Количество() > 0;
	
	Если ДанныеПодбора.ОстаточныйНомерГТД <> Неопределено Тогда
		НоваяСтрока = Товары.Вставить(Товары.Индекс(ТекущаяСтрока) + 1);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		
		НоваяСтрока.НомерГТД = ДанныеПодбора.ОстаточныйНомерГТД;
		
		ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоУпаковокПриПодбореНомераГТД(
			ТекущаяСтрока,
			НоваяСтрока,
			ПараметрыПодбора.ИмяПоляКоличествоУпаковок);
		
		Если ТребуетсяОбработкаСтрок Тогда
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, ДействияОбработкиСтроки, Неопределено);
		КонецЕсли;
		
		ТаблицаФормы = Форма.Элементы[ПараметрыПодбора.ИмяТаблицыФормы]; // ТаблицаФормы -
		ТаблицаФормы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
	Если ТребуетсяОбработкаСтрок Тогда
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, ДействияОбработкиСтроки, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает параметры, используемые при заполнении служебных реквизитов номера ГТД в табличной части объекта.
//
// Возвращаемое значение:
//	Структура - параметры, используемые при подборе номера ГТД в табличную часть объекта, со следующими свойствами:
//		* ИмяПоляНоменклатура - Строка - имя колонки табличной части, содержащее информацию о номенклатуре, для которой
//											заполняется номер ГТД.
//		* ЗаполнитьСтрануПроисхождения - Булево - признак наличия в табличной части колонки страны происхождения,
//													которую необходимо заполнить.
//
Функция ПараметрыЗаполненияСлужебныхРеквизитовНомераГТД() Экспорт
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("ИмяПоляНоменклатура", "Номенклатура");
	ПараметрыПодбора.Вставить("ЗаполнитьСтрануПроисхождения", Истина);
	
	Возврат ПараметрыПодбора;
	
КонецФункции

// Процедура заполняет служебные реквизиты номеров ГТД в табличной части.
//
// Параметры:
//	Товары - ДанныеФормыКоллекция - табличная часть, в которой осуществляется заполнение служебных реквизитов.
//	ПараметрыЗаполнения - см. ПараметрыЗаполненияСлужебныхРеквизитовНомераГТД
//
Процедура ЗаполнитьСлужебныеРеквизитыНомераГТД(Товары, ПараметрыЗаполнения = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьИмпортныеТовары") Тогда
		Возврат;
	КонецЕсли;
	
	Если Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыЗаполнения = Неопределено Тогда
		ПараметрыЗаполнения = ПараметрыЗаполненияСлужебныхРеквизитовНомераГТД()
	КонецЕсли;
	
	ИмяПоляНоменклатура = ПараметрыЗаполнения.ИмяПоляНоменклатура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Товары.НомерСтроки КАК ЧИСЛО) КАК НомерСтроки,
	|	ВЫРАЗИТЬ(&ИмяПоляНоменклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(Товары.НомерГТД КАК Справочник.НомераГТД) КАК НомерГТД,
	|	&СтранаПроисхождения КАК СтранаПроисхождения
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА НЕ Товары.СтранаПроисхождения В(НЕОПРЕДЕЛЕНО,
	|												ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка))
	|			ТОГДА Товары.СтранаПроисхождения
	|		КОГДА НЕ Товары.НомерГТД В(НЕОПРЕДЕЛЕНО,
	|									ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка))
	|			ТОГДА Товары.НомерГТД.СтранаПроисхождения
	|		КОГДА НЕ Товары.Номенклатура В(НЕОПРЕДЕЛЕНО,
	|										ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	|			ТОГДА Товары.Номенклатура.СтранаПроисхождения
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
	|	КОНЕЦ КАК СтранаПроисхождения,
	|	ЕСТЬNULL(НомераГТД.ТипНомераГТД, ЗНАЧЕНИЕ(Перечисление.ТипыНомеровГТД.ПустаяСсылка)) КАК ТипНомераГТД
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ДанныеНоменклатуры
	|		ПО Товары.Номенклатура = ДанныеНоменклатуры.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НомераГТД КАК НомераГТД
	|		ПО Товары.НомерГТД = НомераГТД.Ссылка
	|ГДЕ
	|	ЕСТЬNULL(ДанныеНоменклатуры.ВестиУчетПоГТД, ЛОЖЬ)
	|	И (НЕ &ОтборПоСтранеПроисхождения
	|			ИЛИ (Товары.СтранаПроисхождения В(НЕОПРЕДЕЛЕНО,
	|												ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка))
	|				И (НЕ Товары.НомерГТД В(НЕОПРЕДЕЛЕНО,
	|										ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка))
	|					ИЛИ НЕ Товары.Номенклатура В(НЕОПРЕДЕЛЕНО,
	|													ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)))))
	|		ИЛИ НЕ Товары.НомерГТД В(НЕОПРЕДЕЛЕНО,
	|									ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
								"&ИмяПоляНоменклатура",
								"Товары." + ИмяПоляНоменклатура);
	
	ИменаКолонок = Новый Массив;
	ИменаКолонок.Добавить("НомерСтроки");
	ИменаКолонок.Добавить(ИмяПоляНоменклатура);
	ИменаКолонок.Добавить("НомерГТД");
	
	Если ПараметрыЗаполнения.ЗаполнитьСтрануПроисхождения Тогда
		ИменаКолонок.Добавить("СтранаПроисхождения");
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
									"&СтранаПроисхождения",
									"ВЫРАЗИТЬ(Товары.СтранаПроисхождения КАК Справочник.СтраныМира)");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
									"&СтранаПроисхождения",
									"ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)");
	КонецЕсли;
	
	ВыгружаемыеКолонки = СтрСоединить(ИменаКолонок, ",");
	
	Запрос.УстановитьПараметр("Товары", Товары.Выгрузить(, ВыгружаемыеКолонки));
	Запрос.УстановитьПараметр("ОтборПоСтранеПроисхождения", ПараметрыЗаполнения.ЗаполнитьСтрануПроисхождения);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Товары[Выборка.НомерСтроки - 1], Выборка, , "НомерСтроки");
	КонецЦикла;
	
КонецПроцедуры

// Добавляет запрос в пакет запросов для получения данных, необходимых для заполнения страны происхождения по номера ГТД
// при обработке строк табличной части.
//
// Параметры:
//  СтруктураДействий - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧВЦикле.Действия
//  ОписаниеЗапроса - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОписаниеЗапроса
//  КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения
//
Процедура ДополнитьТекстЗапросаСтранаПроисхожденияПоНомеруГТД(СтруктураДействий, ОписаниеЗапроса, КэшированныеЗначения) Экспорт
	
	Перем Параметры;
	
	Если ПакетнаяОбработкаТабличнойЧастиСервер.ТребуетсяВыполнитьДействие(
		"ЗаполнитьСтрануПроисхожденияДляНомераГТД",
		СтруктураДействий,
		КэшированныеЗначения,
		Параметры) Тогда
	
		ТекстЗарпоса = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ИсточникДанных.ИдентификаторСтрокиВТ КАК ИдентификаторСтрокиВТ,
			|	ЕСТЬNULL(НомераГТД.СтранаПроисхождения, ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)) КАК СтранаПроисхождения
			|ИЗ
			|	ВтИсточникДанных КАК ИсточникДанных
			|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НомераГТД КАК НомераГТД
			|		ПО НомераГТД.Ссылка = &НомерГТДЗаполнениеСтраны";
		
		ОписаниеЗапроса.ТекстыЗапросов.Добавить(ТекстЗарпоса, "СтранаПроисхожденияПоНомеруГТД");
		ОписаниеЗапроса.ПараметрыЗапроса.Вставить("НомерГТДЗаполнениеСтраны", Параметры.НомерГТД);
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет запрос в пакет запросов для получения данных, необходимых для заполнения типа номера ГТД при 
// обработке строк табличной части.
//
// Параметры:
//  СтруктураДействий - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧВЦикле.Действия
//  ОписаниеЗапроса - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОписаниеЗапроса
//  КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения
//
Процедура ДополнитьТекстЗапросаТипНомераГТД(СтруктураДействий, ОписаниеЗапроса, КэшированныеЗначения) Экспорт
	
	Перем Параметры;
	
	Если ПакетнаяОбработкаТабличнойЧастиСервер.ТребуетсяВыполнитьДействие(
		"ЗаполнитьТипНомераГТД",
		СтруктураДействий,
		КэшированныеЗначения,
		Параметры) Тогда
	
		ТекстЗарпоса = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ИсточникДанных.ИдентификаторСтрокиВТ КАК ИдентификаторСтрокиВТ,
			|	НомераГТД.ТипНомераГТД КАК ТипНомераГТД
			|ИЗ
			|	ВтИсточникДанных КАК ИсточникДанных
			|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НомераГТД КАК НомераГТД
			|		ПО НомераГТД.Ссылка = &НомерГТДОпределениеТипа";
		
		ОписаниеЗапроса.ТекстыЗапросов.Добавить(ТекстЗарпоса, "ТипНомераГТД");
		ОписаниеЗапроса.ПараметрыЗапроса.Вставить("НомерГТДОпределениеТипа", Параметры.НомерГТД);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СборкаРазборкаСоставныхГТД

// Проверяет, содержится ли в переданной таблице прослеживаемый номер ГТД (РНПТ).
// 
// Параметры:
//  Товары - ТаблицаЗначений - :
//   * НомерГТД - СправочникСсылка.НомераГТД -
// 
// Возвращаемое значение:
//  Структура:
//   * КоличествоПростыхНомеровГТД - Число -
//   * КоличествоПрослеживаемыхНомеровГТД - Число -
//   * КоличествоСоставныхНомеровГТД - Число -
//   * ЕстьПростойНомерГТД - Булево -
//   * ЕстьПрослеживаемыйНомерГТД - Булево -
//   * ЕстьСоставнойНомерГТД - Булево -
Функция ТипыНомеровГТДВТаблице(Товары) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("КоличествоПростыхНомеровГТД", 0);
	ВозвращаемоеЗначение.Вставить("КоличествоПрослеживаемыхНомеровГТД", 0);
	ВозвращаемоеЗначение.Вставить("КоличествоСоставныхНомеровГТД", 0);
	ВозвращаемоеЗначение.Вставить("ЕстьПростойНомерГТД", Ложь);
	ВозвращаемоеЗначение.Вставить("ЕстьПрослеживаемыйНомерГТД", Ложь);
	ВозвращаемоеЗначение.Вставить("ЕстьСоставнойНомерГТД", Ложь);
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(Товары.НомерГТД КАК Справочник.НомераГТД) КАК НомерГТД
	|ПОМЕСТИТЬ ВтТовары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|		КОГДА Товары.НомерГТД.ТипНомераГТД = ЗНАЧЕНИЕ(Перечисление.ТипыНомеровГТД.НомерГТД)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК КоличествоПростыхНомеровГТД,
	|	СУММА(ВЫБОР
	|		КОГДА Товары.НомерГТД.ТипНомераГТД = ЗНАЧЕНИЕ(Перечисление.ТипыНомеровГТД.НомерРНПТ)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК КоличествоПрослеживаемыхНомеровГТД,
	|	СУММА(ВЫБОР
	|		КОГДА Товары.НомерГТД.ТипНомераГТД = ЗНАЧЕНИЕ(Перечисление.ТипыНомеровГТД.НомерРНПТКомплекта)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК КоличествоСоставныхНомеровГТД
	|ПОМЕСТИТЬ ВтПодсчетТиповГТД
	|ИЗ
	|	ВтТовары КАК Товары
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.КоличествоПростыхНомеровГТД КАК КоличествоПростыхНомеровГТД,
	|	Товары.КоличествоПрослеживаемыхНомеровГТД КАК КоличествоПрослеживаемыхНомеровГТД,
	|	Товары.КоличествоСоставныхНомеровГТД КАК КоличествоСоставныхНомеровГТД,
	|	Товары.КоличествоПростыхНомеровГТД > 0 КАК ЕстьПростойНомерГТД,
	|	Товары.КоличествоПрослеживаемыхНомеровГТД > 0 КАК ЕстьПрослеживаемыйНомерГТД,
	|	Товары.КоличествоСоставныхНомеровГТД > 0 КАК ЕстьСоставнойНомерГТД
	|ИЗ
	|	ВтПодсчетТиповГТД КАК Товары";
	
	Запрос.УстановитьПараметр("Товары", Товары);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ВозвращаемоеЗначение, Выборка);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Извлечь поле из таблицы.
// 
// Параметры:
//  Таблица - ТаблицаЗначений - должна содержать колонку, имя которой передается в параметре КолонкаДляИзвлечения.
//  КолонкаДляИзвлечения - Строка - Колонка, в которой хранится объект, из которого можно извлечь некоторое поле.
//  ИзвлекаемоеПоле - Строка - Имя поля, которое нужно извлечь из колонки КолонкаДляИзвлечения.
//  ИмяНовойКолонки - Строка - Имя колонки, которая будет добавлена к входящей таблице. В нее будут загружены извлеченные значения.
//  ОписаниеТиповНовойКолонки - ОписаниеТипов - Тип новой колонки.
//
Процедура ИзвлечьПолеИзКолонкиТаблицы(Таблица,
	КолонкаДляИзвлечения,
	ИзвлекаемоеПоле,
	ИмяНовойКолонки = "",
	ОписаниеТиповНовойКолонки = Неопределено) Экспорт
	
	Если ПустаяСтрока(ИмяНовойКолонки) Тогда
		ИмяНовойКолонки = ИзвлекаемоеПоле;
	КонецЕсли;
	Если ОписаниеТиповНовойКолонки <> Неопределено Тогда
		Таблица.Колонки.Добавить(ИмяНовойКолонки, ОписаниеТиповНовойКолонки);
	Иначе
		Таблица.Колонки.Добавить(ИмяНовойКолонки);
	КонецЕсли;
	
	АналитикиНоменклатуры = Таблица.ВыгрузитьКолонку(КолонкаДляИзвлечения);
	НоменклатурныеПозиции = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(АналитикиНоменклатуры, ИзвлекаемоеПоле);
	
	Для Каждого КлючЗначение Из НоменклатурныеПозиции Цикл
		Отбор = Новый Структура(КолонкаДляИзвлечения, КлючЗначение.Ключ);
		НайденныеСтроки = Таблица.НайтиСтроки(Отбор);
		Для Каждого Строка Из НайденныеСтроки Цикл
			Строка[ИмяНовойКолонки] = КлючЗначение.Значение;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает параметры по умолчанию, используемые при поиске или создании элементов справочника 'НомераГТД'
// типа номер РНПТ комплекта.
//
// Возвращаемое значение:
//	Структура - коллекция, которая содержит следующие свойства:
//		* ИзвлечьНоменклатуруИзОбъектаВКолонке - Строка - имя колонки, в которой содердится информация о номенклатуре,
//															если не задано явно.
//		* ИзвлечьХарактеристикуИзОбъектаВКолонке - Строка - имя колонки, в которой содердится информация о характеристике номенклатуры,
//															если не задано явно.
//		* ИзвлечьСериюИзОбъектаВКолонке - Строка - имя колонки, в которой содердится информация о серии номенклатуры,
//															если не задано явно.
//		* НоменклатураШапки - СправочникСсылка.Номенклатура, Неопределено - номенклатура комплекта.
//		* ХарактеристикаШапки - СправочникСсылка.ХарактеристикиНоменклатуры, Неопределено - характеристика комплекта.
//		* СерияШапки - СправочникСсылка.СерииНоменклатуры, Неопределено - серия комплекта.
//		* СуммаПоРНПТ - Число - стоимость составного комплекта, если цена по нему не известна. Используется в ЭДО.
//		* ВсегдаИспользоватьСуммаПоРНПТДляСтоимостиКомплекта - Булево - игнорировать подбор цен, брать переданные цены.
//			Используется при вводе номера РНПТ вручную, и при обмене данными.
//		* НормироватьСуммуПоРНПТПриСозданииСоставногоКомплекта - Булево - разделить суммовые значения на количество комплектов.
//			Используется при обмене данными.
//		* РасширитьКлючПоискаНомеровГТДСуммойПоРНПТ - Булево - добавляет стоимость по РНПТ в ключ поиска справочника Номера ГТД
//			при загрузке УПД из ЭДО.
//
Функция ПараметрыПоискаИлиСозданияСоставныхПрослеживаемыхКомплектов() Экспорт
	
	ПараметрыСоздания = Новый Структура;
	ПараметрыСоздания.Вставить("ИзвлечьНоменклатуруИзОбъектаВКолонке", "");
	ПараметрыСоздания.Вставить("ИзвлечьХарактеристикуИзОбъектаВКолонке", "");
	ПараметрыСоздания.Вставить("ИзвлечьСериюИзОбъектаВКолонке", "");
	ПараметрыСоздания.Вставить("НоменклатураШапки", Неопределено);
	ПараметрыСоздания.Вставить("ХарактеристикаШапки", Неопределено);
	ПараметрыСоздания.Вставить("СерияШапки", Неопределено);
	ПараметрыСоздания.Вставить("СуммаПоРНПТ", 0);
	ПараметрыСоздания.Вставить("ВсегдаИспользоватьСуммаПоРНПТДляСтоимостиКомплекта", Ложь);
	ПараметрыСоздания.Вставить("НормироватьСуммуПоРНПТПриСозданииСоставногоКомплекта", Ложь);
	ПараметрыСоздания.Вставить("РасширитьКлючПоискаНомеровГТДСуммойПоРНПТ", Ложь);
	
	Возврат ПараметрыСоздания;
	
КонецФункции

// Найти или создать составные прослеживаемые номера ГТД из 2 и более прослеживаемых товаров.
// Существует 2 основных способа использования метода - с передачей номенклатуры, и без.
// При этом номенклатура может быть передана как явно, так и быть извлечена из некоторого объекта (например, из Аналитики
// учета номенклатуры).
// При полном отказе от передачи номенклатуры, следует явно передать единицу измерения ТН ВЭД.
// 
// Параметры:
//  Товары - ТаблицаЗначений - Прослеживаемые номера ГТД, из которых нужно создать составной номер ГТД:
//   * Номенклатура - СправочникСсылка.Номенклатура, Неопределено - Передается для контроля прослеживаемости товара.
//     Имеется возможность оставить поле не заполненным, тогда будет считаться что строка прослеживается.
//     Имеется возможность не передавать эту колонку, а передать колонку через тип которой можно
//     будет извлечь номенклатуру (см. ИзвлечьНоменклатуруИзОбъектаВКолонке).
//   * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры, Неопределено - передается для контроля прослеживаемости товара.
//   * Серия - СправочникСсылка.СерииНоменклатуры, Неопределено - Передается для контроля прослеживаемости товара.
//   * ЕдиницаИзмерения - СправочникСсылка.УпаковкиЕдиницыИзмерения, Неопределено - Единица измерения ТН ВЭД.
//     Если не задана явно, извлекается через Номенклатуру.
//   * КоличествоПоРНПТ - Число - 
//   * НомерГТД - СправочникСсылка.НомераГТД -  
//  КоличествоКомплектов - Число - Количество комплекта
//  ДатаКонтроляПрослеживаемости - Дата - Дата контроля прослеживаемости
//  Отказ - Булево - Истина, признак того, что не удалось найти или создать элемент справочника 'НомераГТД'
//  				типа номер РНПТ комплекта.
//  ПараметрыСоздания - см. ПараметрыПоискаИлиСозданияСоставныхПрослеживаемыхКомплектов.
// 
// Возвращаемое значение:
//  Структура:
//   * ЕстьСоставныеПрослеживаемыеНомераГТД - Булево - признак того, что удалось найти или создать составные номера ГТД.
//   * ОсновнойСоставнойНомерГТД - СправочникСсылка.НомераГТД, Неопределено -
//   * ОстаточныйСоставнойНомерГТД - СправочникСсылка.НомераГТД, Неопределено -
//
Функция НайтиИлиСоздатьСоставныеПрослеживаемыеНомераГТД(Товары,
	КоличествоКомплектов,
	ДатаКонтроляПрослеживаемости,
	Отказ = Ложь,
	ПараметрыСоздания = Неопределено) Экспорт
	
	Если ПараметрыСоздания = Неопределено Тогда
		ПараметрыСоздания = ПараметрыПоискаИлиСозданияСоставныхПрослеживаемыхКомплектов();
	КонецЕсли;
	
	Если Не ПустаяСтрока(ПараметрыСоздания.ИзвлечьНоменклатуруИзОбъектаВКолонке) Тогда
		ИзвлечьПолеИзКолонкиТаблицы(Товары,
									ПараметрыСоздания.ИзвлечьНоменклатуруИзОбъектаВКолонке,
									"Номенклатура",
									"Номенклатура",
									Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	КонецЕсли;
	
	Если Не ПустаяСтрока(ПараметрыСоздания.ИзвлечьХарактеристикуИзОбъектаВКолонке) Тогда
		ИзвлечьПолеИзКолонкиТаблицы(Товары,
									ПараметрыСоздания.ИзвлечьХарактеристикуИзОбъектаВКолонке,
									"Характеристика",
									"Характеристика",
									Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	КонецЕсли;
	Если Товары.Колонки.Найти("Характеристика") = Неопределено Тогда
		Товары.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	КонецЕсли;
	
	Если Не ПустаяСтрока(ПараметрыСоздания.ИзвлечьСериюИзОбъектаВКолонке) Тогда
		ИзвлечьПолеИзКолонкиТаблицы(Товары,
									ПараметрыСоздания.ИзвлечьСериюИзОбъектаВКолонке,
									"Серия",
									"Серия",
									Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	КонецЕсли;
	Если Товары.Колонки.Найти("Серия") = Неопределено Тогда
		Товары.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	КонецЕсли;
	
	Если Товары.Колонки.Найти("ЕдиницаИзмерения") = Неопределено Тогда
		Товары.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	КонецЕсли;
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("ЕстьСоставныеПрослеживаемыеНомераГТД", Ложь);
	ВозвращаемоеЗначение.Вставить("ОсновнойСоставнойНомерГТД", Неопределено);
	ВозвращаемоеЗначение.Вставить("ОстаточныйСоставнойНомерГТД", Неопределено);
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	// 0.
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(Товары.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
	|	ВЫРАЗИТЬ(Товары.Серия КАК Справочник.СерииНоменклатуры) КАК Серия,
	|	ВЫРАЗИТЬ(Товары.ЕдиницаИзмерения КАК Справочник.УпаковкиЕдиницыИзмерения) КАК ЕдиницаИзмерения,
	|	Товары.КоличествоПоРНПТ,
	|	&ТоварыСуммаПоРНПТ КАК СуммаПоРНПТ,
	|	ВЫРАЗИТЬ(Товары.НомерГТД КАК Справочник.НомераГТД) КАК НомерГТД
	|ПОМЕСТИТЬ ВтТовары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 1.
	|ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(Товары.НомерГТД.ТипНомераГТД = ЗНАЧЕНИЕ(Перечисление.ТипыНомеровГТД.НомерРНПТ)),ЛОЖЬ) КАК ТребуетсяГенерацияСоставногоГТД,
	|	ЕСТЬNULL(МАКСИМУМ(Товары.НомерГТД.ТипНомераГТД = ЗНАЧЕНИЕ(Перечисление.ТипыНомеровГТД.НомерРНПТКомплекта)),ЛОЖЬ) КАК ЕстьОшибка
	|ИЗ
	|	ВтТовары КАК Товары
	|ГДЕ
	|	&ИспользоватьУчетПрослеживаемыхИмпортныхТоваров
	|	И НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ) >= &ДатаНачалаУчетаПрослеживаемыхИмпортныхТоваров
	|	И (Товары.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|		ИЛИ Товары.Номенклатура.ПрослеживаемыйТовар)
	|	И Товары.НомерГТД.ТипНомераГТД В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНомеровГТД.НомерРНПТ),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНомеровГТД.НомерРНПТКомплекта)
	|		)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 2.
	// Выборка строк, которые содержат ошибки.
	|ВЫБРАТЬ
	|	Товары.НомерГТД,
	|	Товары.Номенклатура,
	|	ИСТИНА КАК ЭтоСоставнойГТД
	|ИЗ
	|	ВтТовары КАК Товары
	|ГДЕ
	|	&ИспользоватьУчетПрослеживаемыхИмпортныхТоваров
	|	И НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ) >= &ДатаНачалаУчетаПрослеживаемыхИмпортныхТоваров
	|	И (Товары.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|		ИЛИ Товары.Номенклатура.ПрослеживаемыйТовар)
	// РНПТ некорректного типа.
	|	И Товары.НомерГТД.ТипНомераГТД = ЗНАЧЕНИЕ(Перечисление.ТипыНомеровГТД.НомерРНПТКомплекта)
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.НомерГТД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 3.
	|ВЫБРАТЬ
	|	СУММА(Товары.КоличествоПоРНПТ),
	|	СУММА(Товары.СуммаПоРНПТ),
	|	Товары.НомерГТД,
	|	ВЫБОР
	|		КОГДА Товары.НомерГТД.ЕдиницаИзмерения <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА Товары.НомерГТД.ЕдиницаИзмерения
	|		КОГДА Товары.Номенклатура.ЕдиницаИзмеренияТНВЭД <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА Товары.Номенклатура.ЕдиницаИзмеренияТНВЭД
	|		КОГДА Товары.Номенклатура.КодТНВЭД.ЕдиницаИзмерения <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА Товары.Номенклатура.КодТНВЭД.ЕдиницаИзмерения
	|		КОГДА Товары.ЕдиницаИзмерения <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА Товары.ЕдиницаИзмерения
	|		ИНАЧЕ Товары.Номенклатура.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмеренияТНВЭД,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия КАК Серия
	|ПОМЕСТИТЬ ВТПрослеживаемыеТовары
	|ИЗ
	|	ВтТовары КАК Товары
	|ГДЕ
	|	&ИспользоватьУчетПрослеживаемыхИмпортныхТоваров
	|	И НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ) >= &ДатаНачалаУчетаПрослеживаемыхИмпортныхТоваров
	|	И (Товары.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|		ИЛИ Товары.Номенклатура.ПрослеживаемыйТовар)
	|	И Товары.НомерГТД.ТипНомераГТД = ЗНАЧЕНИЕ(Перечисление.ТипыНомеровГТД.НомерРНПТ)
	|СГРУППИРОВАТЬ ПО
	|	Товары.НомерГТД,
	|	ВЫБОР
	|		КОГДА Товары.НомерГТД.ЕдиницаИзмерения <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА Товары.НомерГТД.ЕдиницаИзмерения
	|		КОГДА Товары.Номенклатура.ЕдиницаИзмеренияТНВЭД <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА Товары.Номенклатура.ЕдиницаИзмеренияТНВЭД
	|		КОГДА Товары.Номенклатура.КодТНВЭД.ЕдиницаИзмерения <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА Товары.Номенклатура.КодТНВЭД.ЕдиницаИзмерения
	|		КОГДА Товары.ЕдиницаИзмерения <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА Товары.ЕдиницаИзмерения
	|		ИНАЧЕ Товары.Номенклатура.ЕдиницаИзмерения
	|	КОНЕЦ,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 4.
	// Основной набор комплектующих для составного номера ГТД (комплекта).
	|ВЫБРАТЬ
	|	ИСТИНА КАК ЭтоОсновнойКомплект,
	|	СоставнойНомер.НомерГТД КАК НомерРНПТ,
	|	ВЫРАЗИТЬ(
	|		ВЫРАЗИТЬ(СоставнойНомер.КоличествоПоРНПТ КАК ЧИСЛО(23, 11)) / ВЫРАЗИТЬ(&КоличествоКомплектов КАК ЧИСЛО(23, 11))
	|	КАК ЧИСЛО(23, 11)) КАК КоличествоПоРНПТ,
	|	СоставнойНомер.ЕдиницаИзмеренияТНВЭД КАК ЕдиницаИзмеренияТНВЭД,
	|	СоставнойНомер.Номенклатура КАК Номенклатура,
	|	СоставнойНомер.Характеристика КАК Характеристика,
	|	СоставнойНомер.Серия КАК Серия,
	|	ВЫРАЗИТЬ(СоставнойНомер.СуммаПоРНПТ / &КоличествоКомплектовДляНормированияСуммы КАК ЧИСЛО(31, 2)) КАК СуммаПоРНПТ
	|ПОМЕСТИТЬ ВТСоставнойНомерИсходная
	|ИЗ
	|	ВТПрослеживаемыеТовары КАК СоставнойНомер
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Остаточный набор комплектующих для составного номера ГТД (комплекта).
	|ВЫБРАТЬ
	|	ЛОЖЬ КАК ЭтоОсновнойКомплект,
	|	СоставнойНомер.НомерГТД КАК НомерРНПТ,
	// Нормированное количество + Остаток (Где Остаток = Исходное количество - Восстановленное количество)
	|	ВЫРАЗИТЬ(
	|		ВЫРАЗИТЬ(СоставнойНомер.КоличествоПоРНПТ КАК ЧИСЛО(23, 11)) / ВЫРАЗИТЬ(&КоличествоКомплектов КАК ЧИСЛО(23, 11))
	|	КАК ЧИСЛО(23, 11))
	|	
	|		+ ВЫРАЗИТЬ(
	|				ВЫРАЗИТЬ(СоставнойНомер.КоличествоПоРНПТ КАК ЧИСЛО(23, 11))
	// Получение нормированного количества.
	|				- (
	|					ВЫРАЗИТЬ(
	|						ВЫРАЗИТЬ(СоставнойНомер.КоличествоПоРНПТ КАК ЧИСЛО(23, 11)) / ВЫРАЗИТЬ(&КоличествоКомплектов КАК ЧИСЛО(23, 11))
	|					КАК ЧИСЛО(23, 11))
	// Восстановление количества из нормированного и количества комплектов (с возможной ошибкой округления).
	|						* ВЫРАЗИТЬ(&КоличествоКомплектов КАК ЧИСЛО(23, 11))
	|				)
	|		КАК ЧИСЛО(23, 11)
	|	) КАК КоличествоПоРНПТ,
	|	СоставнойНомер.ЕдиницаИзмеренияТНВЭД КАК ЕдиницаИзмеренияТНВЭД,
	|	СоставнойНомер.Номенклатура КАК Номенклатура,
	|	СоставнойНомер.Характеристика КАК Характеристика,
	|	СоставнойНомер.Серия КАК Серия,
	|	ВЫРАЗИТЬ(СоставнойНомер.СуммаПоРНПТ / &КоличествоКомплектовДляНормированияСуммы КАК ЧИСЛО(31, 2)) КАК СуммаПоРНПТ
	|ИЗ
	|	ВТПрослеживаемыеТовары КАК СоставнойНомер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 5.
	// Данные для создания составных номеров ГТД, если не будут найдены подходящие.
	|ВЫБРАТЬ
	|	СоставнойНомер.ЭтоОсновнойКомплект КАК ЭтоОсновнойКомплект,
	|	СоставнойНомер.НомерРНПТ КАК НомерРНПТ,
	|	СУММА(СоставнойНомер.КоличествоПоРНПТ) КАК КоличествоПоРНПТ,
	|	СоставнойНомер.ЕдиницаИзмеренияТНВЭД КАК ЕдиницаИзмеренияТНВЭД,
	// Номенклатура, характеристика и серия является справочной информацией, и не являются ключом при поиске/создании прослеживаемых комплектов.
	// Используются для расчета цен.
	|	СоставнойНомер.Номенклатура КАК Номенклатура,
	|	СоставнойНомер.Характеристика КАК Характеристика,
	|	СоставнойНомер.Серия КАК Серия,
	|	СУММА(СоставнойНомер.СуммаПоРНПТ) КАК СуммаПоРНПТ
	|ИЗ
	|	ВТСоставнойНомерИсходная КАК СоставнойНомер
	|СГРУППИРОВАТЬ ПО
	|	СоставнойНомер.ЭтоОсновнойКомплект,
	|	СоставнойНомер.НомерРНПТ,
	|	СоставнойНомер.ЕдиницаИзмеренияТНВЭД,
	|	СоставнойНомер.Номенклатура,
	|	СоставнойНомер.Характеристика,
	|	СоставнойНомер.Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 6.
	// Вычисление признака, требуется ли создание второго составного номера ГТД (остаточного).
	|ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(Группировка.ТребуетсяЗадействоватьВторойСоставнойГТД), ЛОЖЬ) КАК ТребуетсяЗадействоватьВторойСоставнойГТД
	|ИЗ
	|	(
	|		ВЫБРАТЬ
	|			СУММА(Набор.КоличествоПоРНПТ) <> 0 КАК ТребуетсяЗадействоватьВторойСоставнойГТД
	|		ИЗ
	|			(
	|				ВЫБРАТЬ
	|					СоставнойНомер.НомерРНПТ КАК НомерРНПТ,
	|					СоставнойНомер.ЕдиницаИзмеренияТНВЭД КАК ЕдиницаИзмеренияТНВЭД,
	|					СоставнойНомер.КоличествоПоРНПТ КАК КоличествоПоРНПТ
	|				ИЗ
	|					ВТСоставнойНомерИсходная КАК СоставнойНомер
	|				ГДЕ
	|					СоставнойНомер.ЭтоОсновнойКомплект
	|	
	|				ОБЪЕДИНИТЬ ВСЕ
	|	
	|				ВЫБРАТЬ
	|					СоставнойНомер.НомерРНПТ КАК НомерРНПТ,
	|					СоставнойНомер.ЕдиницаИзмеренияТНВЭД КАК ЕдиницаИзмеренияТНВЭД,
	|					-СоставнойНомер.КоличествоПоРНПТ КАК КоличествоПоРНПТ
	|				ИЗ
	|					ВТСоставнойНомерИсходная КАК СоставнойНомер
	|				ГДЕ
	|					НЕ СоставнойНомер.ЭтоОсновнойКомплект
	|			) КАК Набор
	|		СГРУППИРОВАТЬ ПО
	|			Набор.НомерРНПТ,
	|			Набор.ЕдиницаИзмеренияТНВЭД
	|) КАК Группировка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 7.
	|ВЫБРАТЬ
	|	СоставнойНомер.ЭтоОсновнойКомплект КАК ЭтоОсновнойКомплект,
	|	СУММА(1) КАК КоличествоСтрок,
	|	ВЫРАЗИТЬ(СУММА(СоставнойНомер.КоличествоПоРНПТ) КАК ЧИСЛО(23, 11)) КАК КоличествоПоВсемСтрокам,
	|	ВЫРАЗИТЬ(СУММА(СоставнойНомер.СуммаПоРНПТ) КАК ЧИСЛО(31, 2)) КАК СуммаПоВсемСтрокам
	|ПОМЕСТИТЬ ВТСоставнойНомерКоличество
	|ИЗ
	|	ВТСоставнойНомерИсходная КАК СоставнойНомер
	|СГРУППИРОВАТЬ ПО
	|	СоставнойНомер.ЭтоОсновнойКомплект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 8.
	|ВЫБРАТЬ
	|	СоставнойНомер.ЭтоОсновнойКомплект КАК ЭтоОсновнойКомплект,
	|	СоставнойНомер.НомерРНПТ КАК НомерРНПТ,
	|	СоставнойНомер.КоличествоПоРНПТ КАК КоличествоПоРНПТ,
	|	СоставнойНомер.СуммаПоРНПТ КАК СуммаПоРНПТ,
	|	СоставнойНомер.ЕдиницаИзмеренияТНВЭД КАК ЕдиницаИзмеренияТНВЭД,
	|	ТаблицаКоличество.КоличествоСтрок КАК КоличествоСтрок,
	|	ТаблицаКоличество.КоличествоПоВсемСтрокам КАК КоличествоПоВсемСтрокам,
	|	ТаблицаКоличество.СуммаПоВсемСтрокам КАК СуммаПоВсемСтрокам	
	|ПОМЕСТИТЬ ВТСоставнойНомер
	|ИЗ
	|	ВТСоставнойНомерИсходная КАК СоставнойНомер
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСоставнойНомерКоличество КАК ТаблицаКоличество
	|		ПО СоставнойНомер.ЭтоОсновнойКомплект = ТаблицаКоличество.ЭтоОсновнойКомплект
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СоставнойНомер.НомерРНПТ,
	|	СоставнойНомер.КоличествоПоРНПТ,
	|	СоставнойНомер.СуммаПоРНПТ,
	|	СоставнойНомер.ЕдиницаИзмеренияТНВЭД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 9.
	|ВЫБРАТЬ
	|	СоставнойНомер.ЭтоОсновнойКомплект КАК ЭтоОсновнойКомплект,
	|	НомераГТД.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НомераГТД.ПрослеживаемыеКомплектующие КАК НомераГТД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСоставнойНомер КАК СоставнойНомер
	|		ПО (СоставнойНомер.НомерРНПТ = НомераГТД.НомерРНПТ)
	|			И (СоставнойНомер.КоличествоПоРНПТ = НомераГТД.КоличествоПоРНПТ)
	|			И &УсловиеПоСуммеПоРНПТ
	|			И (СоставнойНомер.ЕдиницаИзмеренияТНВЭД = НомераГТД.ЕдиницаИзмеренияТНВЭД)
	|ГДЕ
	|	НомераГТД.Ссылка.ТипНомераГТД = ЗНАЧЕНИЕ(Перечисление.ТипыНомеровГТД.НомерРНПТКомплекта)
	|	И НЕ НомераГТД.Ссылка.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	СоставнойНомер.ЭтоОсновнойКомплект,
	|	НомераГТД.Ссылка
	|
	|ИМЕЮЩИЕ
	|	НомераГТД.Ссылка.КоличествоКомплектующих = МАКСИМУМ(СоставнойНомер.КоличествоСтрок) 
	|	И СУММА(НомераГТД.КоличествоПоРНПТ) = МАКСИМУМ(СоставнойНомер.КоличествоПоВсемСтрокам)
	|	И &ОтборПоСуммеПоРНПТ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 10.
	// Проверка количества списываемых прослеживаемых материалов.
	|ВЫБРАТЬ
	|	СоставнойНомер.ЭтоОсновнойКомплект КАК ЭтоОсновнойКомплект,
	|	СоставнойНомер.НомерРНПТ КАК НомерРНПТ,
	|	СУММА(СоставнойНомер.КоличествоПоРНПТ) КАК КоличествоПоРНПТ,
	|	СоставнойНомер.ЕдиницаИзмеренияТНВЭД КАК ЕдиницаИзмеренияТНВЭД
	|ИЗ
	|	ВТСоставнойНомерИсходная КАК СоставнойНомер
	|СГРУППИРОВАТЬ ПО
	|	СоставнойНомер.ЭтоОсновнойКомплект,
	|	СоставнойНомер.НомерРНПТ,
	|	СоставнойНомер.ЕдиницаИзмеренияТНВЭД";
	
	Если КоличествоКомплектов = 0 Тогда
		КоличествоКомплектов = 1;
	КонецЕсли;
	
	КоличествоКомплектовДляНормированияСуммы = 1;
	Если ПараметрыСоздания.НормироватьСуммуПоРНПТПриСозданииСоставногоКомплекта Тогда
		КоличествоКомплектовДляНормированияСуммы = КоличествоКомплектов;
	КонецЕсли;
	
	УчетПрослеживаемыхТоваровЛокализация.УстановитьПараметрыИспользованияУчетаПрослеживаемыхТоваров(Запрос);
	Запрос.УстановитьПараметр("Дата", ДатаКонтроляПрослеживаемости);
	Запрос.УстановитьПараметр("Товары", Товары);
	Запрос.УстановитьПараметр("КоличествоКомплектов", КоличествоКомплектов);
	Запрос.УстановитьПараметр("КоличествоКомплектовДляНормированияСуммы", КоличествоКомплектовДляНормированияСуммы);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Если Товары.Колонки.Найти("СуммаПоРНПТ") = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТоварыСуммаПоРНПТ", "0");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТоварыСуммаПоРНПТ", "Товары.СуммаПоРНПТ");
	КонецЕсли;

	Если ПараметрыСоздания.РасширитьКлючПоискаНомеровГТДСуммойПоРНПТ Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоСуммеПоРНПТ", "(СоставнойНомер.СуммаПоРНПТ = НомераГТД.СуммаПоРНПТ)");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоСуммеПоРНПТ", "СУММА(НомераГТД.СуммаПоРНПТ) = МАКСИМУМ(СоставнойНомер.СуммаПоВсемСтрокам)");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоСуммеПоРНПТ", "Истина");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоСуммеПоРНПТ", "Истина");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	СтатусыСозданияСоставныхНомеровГТД = РезультатЗапроса[1].Выбрать();
	СтрокиСОшибками = РезультатЗапроса[2].Выбрать();
	КомплектующиеДляСозданияСоставногоНомераГТД = РезультатЗапроса[5].Выгрузить();
	ПроверкаКоличестваСписываемыхПрослеживаемыхМатериалов = РезультатЗапроса[10].Выгрузить();
	ТребуетсяЗадействоватьВторойСоставнойГТДВыборка = РезультатЗапроса[6].Выбрать();
	СписываемыеГТД = РезультатЗапроса[9].Выбрать();
	
	Если СтатусыСозданияСоставныхНомеровГТД.Следующий() Тогда
		Если СтатусыСозданияСоставныхНомеровГТД.ЕстьОшибка Тогда
			Пока СтрокиСОшибками.Следующий() Цикл
				Если СтрокиСОшибками.ЭтоСоставнойГТД Тогда
					ТекстОшибки = ?(ЗначениеЗаполнено(СтрокиСОшибками.Номенклатура), 
						НСтр("ru = 'Номер ГТД (РНПТ) %1, подобранный для номенклатурной позиции %2 является составным комплектом. Сборка комплектов из комплектов запрещена.'"),
						НСтр("ru = 'Номер ГТД (РНПТ) %1 является составным комплектом. Сборка комплектов из комплектов запрещена.'"));
					ТекстОшибки = СтрШаблон(ТекстОшибки, СтрокиСОшибками.НомерГТД, СтрокиСОшибками.Номенклатура);
					ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,,,Отказ);
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли Не СтатусыСозданияСоставныхНомеровГТД.ТребуетсяГенерацияСоставногоГТД Тогда
			// Нет списываемых номеров ГТД (РНПТ). Не требуется создание составных номеров ГТД.
			Возврат ВозвращаемоеЗначение;
		КонецЕсли;
	Иначе
		// Нет списываемых номеров ГТД (РНПТ). Не требуется создание составных номеров ГТД.
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	СоставнойНомерГТД = Неопределено;
	СоставнойНомерГТДОстаточный = Неопределено;
	Пока СписываемыеГТД.Следующий() Цикл
		Если СписываемыеГТД.ЭтоОсновнойКомплект Тогда
			СоставнойНомерГТД = СписываемыеГТД.Ссылка;
		ИначеЕсли Не СписываемыеГТД.ЭтоОсновнойКомплект Тогда
			СоставнойНомерГТДОстаточный = СписываемыеГТД.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	ТребуетсяЗадействоватьВторойСоставнойГТД = Ложь;
	Если ТребуетсяЗадействоватьВторойСоставнойГТДВыборка.Следующий() Тогда
		ТребуетсяЗадействоватьВторойСоставнойГТД = ТребуетсяЗадействоватьВторойСоставнойГТДВыборка.ТребуетсяЗадействоватьВторойСоставнойГТД;
	КонецЕсли;
	
	ТекстОшибки = НСтр("ru = 'Для создания составного номера ГТД (РНПТ) требуется подобрать хотя бы один номер ГТД (РНПТ).
	|Проверьте количество списываемых прослеживаемых материалов, а так же остаток номеров ГТД (РНПТ) по ним.'");
	ОтборСтрок = Новый Структура("ЭтоОсновнойКомплект", Ложь);
	НайденныеСтроки = ПроверкаКоличестваСписываемыхПрослеживаемыхМатериалов.НайтиСтроки(ОтборСтрок);
	Если НайденныеСтроки.Количество() = 0
		И (СоставнойНомерГТД = Неопределено
			Или СоставнойНомерГТДОстаточный = Неопределено
			И ТребуетсяЗадействоватьВторойСоставнойГТД) Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,,,Отказ);
	КонецЕсли;
	
	Если СоставнойНомерГТД = Неопределено
		И Не Отказ Тогда
		СоставнойНомерГТД = СоздатьСоставнойПрослеживаемыйНомерГТД(КомплектующиеДляСозданияСоставногоНомераГТД,
			Истина,
			ПараметрыСоздания.НоменклатураШапки,
			ПараметрыСоздания.ХарактеристикаШапки,
			ПараметрыСоздания.СерияШапки,
			ПараметрыСоздания.СуммаПоРНПТ / КоличествоКомплектовДляНормированияСуммы,
			ПараметрыСоздания.ВсегдаИспользоватьСуммаПоРНПТДляСтоимостиКомплекта);
	КонецЕсли;
	
	Если Не ТребуетсяЗадействоватьВторойСоставнойГТД Тогда
		СоставнойНомерГТДОстаточный = Неопределено;
	ИначеЕсли СоставнойНомерГТДОстаточный = Неопределено
		И ТребуетсяЗадействоватьВторойСоставнойГТД
		И Не Отказ Тогда
		
		СоставнойНомерГТДОстаточный = СоздатьСоставнойПрослеживаемыйНомерГТД(
										КомплектующиеДляСозданияСоставногоНомераГТД,
										Ложь,
										ПараметрыСоздания.НоменклатураШапки,
										ПараметрыСоздания.ХарактеристикаШапки,
										ПараметрыСоздания.СерияШапки,
										ПараметрыСоздания.СуммаПоРНПТ / КоличествоКомплектовДляНормированияСуммы,
										ПараметрыСоздания.ВсегдаИспользоватьСуммаПоРНПТДляСтоимостиКомплекта);
		
	КонецЕсли;
	
	ВозвращаемоеЗначение.ЕстьСоставныеПрослеживаемыеНомераГТД = СоставнойНомерГТД <> Неопределено;
	ВозвращаемоеЗначение.ОсновнойСоставнойНомерГТД = СоставнойНомерГТД;
	ВозвращаемоеЗначение.ОстаточныйСоставнойНомерГТД = СоставнойНомерГТДОстаточный;
	
	Возврат ВозвращаемоеЗначение;

КонецФункции

// Разборка прослеживаемые номера ГТД.
// Существует 2 основных способа использования метода - с передачей номенклатуры, и без.
// При этом номенклатура может быть передана как явно, так и быть извлечена из некоторого объекта (например, из Аналитики
// учета номенклатуры).
// При полном отказе от передачи номенклатуры, следует явно передать единицу измерения ТН ВЭД.
// 
// Параметры:
//  ТоварыКСписанию - ТаблицаЗначений - Таблица содержащая составные прослеживаемые номера ГТД:
//  * НомерГТД - СправочникСсылка.НомераГТД - 
//  * Количество - Число - 
//  ТоварыКОприходованию - ТаблицаЗначений - Таблица на которую необходимо распределить номера ГТД таблицы ТоварыКСписанию:
//  * АналитикаУчетаНоменклатуры - СправочникСсылка.КлючиАналитикиУчетаНоменклатуры - 
//  * Количество - Число - 
//  * ВидЗапасов - СправочникСсылка.ВидыЗапасов - 
//  ПоляОбъектые - Массив из Строка, Неопределено - Имена колонок (не числовых) в таблице ТоварыКОприходованию, которые нужно сохранить
//  вплоть до возврата результата функции. Если не указать, в возвращаемой таблице будут только обязательные колонки. Эти поля
//  будут учитываться как группировочные, либо браться от них максимум, в зависимости от участка запроса.
//  ПоляЧисловые - Массив из Строка, Неопределено - Имена колонок (числовых) в таблице ТоварыКОприходованию, которые нужно сохранить
//  вплоть до возврата результата функции. Если не указать, в возвращаемой таблице будут только обязательные колонки. Эти поля
//  будут суммироваться и участвовать в распределении наравне с количественными полями.
//  Отказ - Булево - 
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//  * АналитикаУчетаНоменклатуры - СправочникСсылка.КлючиАналитикиУчетаНоменклатуры - 
//  * ВидЗапасов - СправочникСсылка.ВидыЗапасов - 
//  * НомерГТД - СправочникСсылка.НомераГТД - 
//  * КоличествоПоРНПТ - Число -
//  * Количество - Число -  
Функция РазобратьСоставныеПрослеживаемыеНомераГТД(ТоварыКСписанию, ТоварыКОприходованию, ПоляОбъектные = Неопределено, ПоляЧисловые = Неопределено, Отказ = Ложь) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Товары.НомерГТД КАК Справочник.НомераГТД) КАК НомерГТД,
	|	ВЫРАЗИТЬ(Товары.Количество КАК ЧИСЛО(15, 3)) КАК Количество
	|ПОМЕСТИТЬ ВтКомплектующие
	|ИЗ
	|	&Комплектующие КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Товары.АналитикаУчетаНоменклатуры КАК Справочник.КлючиАналитикиУчетаНоменклатуры) КАК
	|		АналитикаУчетаНоменклатуры,
	|	&ТоварыПоляОбъектные,
	|	&ТоварыПоляЧисловые,
	|	ВЫРАЗИТЬ(Товары.Количество КАК ЧИСЛО(15, 3)) КАК Количество,
	|	Товары.ВидЗапасов КАК ВидЗапасов
	|ПОМЕСТИТЬ ВтТовары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Комплектующие.Ссылка КАК Ссылка,
	|	Комплектующие.НомерРНПТ КАК НомерГТД,
	// Номенклатура разбираемого комплекта.
	|	ЕСТЬNULL(ВтКомплектующие.НомерГТД.Номенклатура, ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)) КАК Номенклатура,
	|	ВЫРАЗИТЬ(Комплектующие.КоличествоПоРНПТ КАК ЧИСЛО(23, 11)) КАК КоличествоИсходное,
	|	ВЫРАЗИТЬ(Комплектующие.КоличествоПоРНПТ * ВтКомплектующие.Количество КАК ЧИСЛО(23, 11)) КАК Количество,
	|	Комплектующие.ЕдиницаИзмеренияТНВЭД КАК ЕдиницаИзмеренияТНВЭД
	|ПОМЕСТИТЬ ВтСписокКомплектующих
	|ИЗ
	|	ВтКомплектующие КАК ВтКомплектующие
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НомераГТД.ПрослеживаемыеКомплектующие КАК Комплектующие
	|		ПО ВтКомплектующие.НомерГТД = Комплектующие.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Товары.ВидЗапасов КАК ВидЗапасов,
	|	&МаксимумПоляОбъектные,
	|	&СуммаПоляЧисловые,
	|	ВЫБОР
	|		КОГДА Товары.АналитикаУчетаНоменклатуры.Номенклатура.ЕдиницаИзмеренияТНВЭД <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА Товары.АналитикаУчетаНоменклатуры.Номенклатура.ЕдиницаИзмеренияТНВЭД
	|		КОГДА Товары.АналитикаУчетаНоменклатуры.Номенклатура.КодТНВЭД.ЕдиницаИзмерения <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА Товары.АналитикаУчетаНоменклатуры.Номенклатура.КодТНВЭД.ЕдиницаИзмерения
	|		ИНАЧЕ Товары.АналитикаУчетаНоменклатуры.Номенклатура.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмеренияТНВЭД,
	|	СУММА(Товары.Количество) КАК Количество
	|ПОМЕСТИТЬ ВтСписокТоваров
	|ИЗ
	|	ВтТовары КАК Товары
	|ГДЕ
	|	Товары.АналитикаУчетаНоменклатуры.Номенклатура.ПрослеживаемыйТовар
	|СГРУППИРОВАТЬ ПО
	|	Товары.АналитикаУчетаНоменклатуры,
	|	Товары.ВидЗапасов,
	|	ВЫБОР
	|		КОГДА Товары.АналитикаУчетаНоменклатуры.Номенклатура.ЕдиницаИзмеренияТНВЭД <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА Товары.АналитикаУчетаНоменклатуры.Номенклатура.ЕдиницаИзмеренияТНВЭД
	|		КОГДА Товары.АналитикаУчетаНоменклатуры.Номенклатура.КодТНВЭД.ЕдиницаИзмерения <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА Товары.АналитикаУчетаНоменклатуры.Номенклатура.КодТНВЭД.ЕдиницаИзмерения
	|		ИНАЧЕ Товары.АналитикаУчетаНоменклатуры.Номенклатура.ЕдиницаИзмерения
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтТовары.ЕдиницаИзмеренияТНВЭД КАК ЕдиницаИзмеренияТНВЭД,
	|	СУММА(ВтТовары.Количество) КАК ВсегоКоличество
	|ПОМЕСТИТЬ ВтСписокКомплектующихСумма
	|ИЗ
	|	ВтСписокКомплектующих КАК ВтТовары
	|СГРУППИРОВАТЬ ПО
	|	ВтТовары.ЕдиницаИзмеренияТНВЭД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.ЕдиницаИзмеренияТНВЭД КАК ЕдиницаИзмеренияТНВЭД,
	|	&СуммаПоляЧисловые,
	|	СУММА(Товары.Количество) КАК ВсегоКоличество
	|ПОМЕСТИТЬ ВтСписокТоваровСумма
	|ИЗ
	|	ВтСписокТоваров КАК Товары
	|СГРУППИРОВАТЬ ПО
	|	Товары.ЕдиницаИзмеренияТНВЭД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Товары.ВидЗапасов КАК ВидЗапасов,
	|	ВтСписокКомплектующих.НомерГТД КАК НомерГТД,
	|	ВтСписокКомплектующих.ЕдиницаИзмеренияТНВЭД,
	|	&ТоварыПоляОбъектные,
	|	&ДелениеПоляЧисловые,
	|	ВЫРАЗИТЬ(ВтСписокКомплектующих.Количество / ВтСписокТоваровСумма.ВсегоКоличество * Товары.Количество КАК ЧИСЛО(23, 11)) КАК
	|		КоличествоПоРНПТ,
	|	ВЫРАЗИТЬ(ВтСписокКомплектующих.Количество / ВтСписокКомплектующихСумма.ВсегоКоличество * Товары.Количество КАК ЧИСЛО(15, 3)) КАК
	|		Количество
	|	
	|ПОМЕСТИТЬ ВтРезультатРаспределения
	|ИЗ
	|	ВтСписокКомплектующих КАК ВтСписокКомплектующих
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтСписокТоваров КАК Товары
	|		ПО Товары.ЕдиницаИзмеренияТНВЭД = ВтСписокКомплектующих.ЕдиницаИзмеренияТНВЭД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтСписокТоваровСумма КАК ВтСписокТоваровСумма
	|		ПО ВтСписокТоваровСумма.ЕдиницаИзмеренияТНВЭД = ВтСписокКомплектующих.ЕдиницаИзмеренияТНВЭД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтСписокКомплектующихСумма КАК ВтСписокКомплектующихСумма
	|		ПО ВтСписокКомплектующихСумма.ЕдиницаИзмеренияТНВЭД = ВтСписокКомплектующих.ЕдиницаИзмеренияТНВЭД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Товары.ВидЗапасов КАК ВидЗапасов,
	|	СУММА(Товары.Количество) КАК Количество
	|ПОМЕСТИТЬ ВтРезультатРаспределенияТоваровСумма
	|ИЗ
	|	ВтРезультатРаспределения КАК Товары
	|СГРУППИРОВАТЬ ПО
	|	Товары.АналитикаУчетаНоменклатуры,
	|	Товары.ВидЗапасов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерГТД КАК НомерГТД,
	|	Товары.ЕдиницаИзмеренияТНВЭД КАК ЕдиницаИзмеренияТНВЭД,
	|	СУММА(Товары.КоличествоПоРНПТ) КАК КоличествоПоРНПТ
	|ПОМЕСТИТЬ ВтРезультатРаспределенияРНПТСумма
	|ИЗ
	|	ВтРезультатРаспределения КАК Товары
	|СГРУППИРОВАТЬ ПО
	|	Товары.НомерГТД,
	|	Товары.ЕдиницаИзмеренияТНВЭД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Товары.ВидЗапасов КАК ВидЗапасов,
	|	ВЫРАЗИТЬ(Товары.Количество - ВтСписокТоваров.Количество КАК ЧИСЛО(15, 3)) КАК ДельтаКоличествоПоТоварам
	|ПОМЕСТИТЬ ВтДельтаКоличествоТоваров
	|ИЗ
	|	ВтРезультатРаспределенияТоваровСумма КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтСписокТоваров КАК ВтСписокТоваров
	|		ПО Товары.АналитикаУчетаНоменклатуры = ВтСписокТоваров.АналитикаУчетаНоменклатуры
	|		И Товары.ВидЗапасов = ВтСписокТоваров.ВидЗапасов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерГТД КАК НомерГТД,
	|	Товары.ЕдиницаИзмеренияТНВЭД КАК ЕдиницаИзмеренияТНВЭД,
	|	ВЫРАЗИТЬ(Товары.КоличествоПоРНПТ - ВтСписокТоваров.Количество КАК ЧИСЛО(23, 11)) КАК ДельтаКоличествоПоРНПТ
	|ПОМЕСТИТЬ ВтДельтаКоличествоПоРНПТ
	|ИЗ
	|	ВтРезультатРаспределенияРНПТСумма КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтСписокКомплектующих КАК ВтСписокТоваров
	|		ПО Товары.НомерГТД = ВтСписокТоваров.НомерГТД
	|		И Товары.ЕдиницаИзмеренияТНВЭД = ВтСписокТоваров.ЕдиницаИзмеренияТНВЭД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НаборДанных.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	НаборДанных.ВидЗапасов КАК ВидЗапасов,
	|	НаборДанных.НомерГТД КАК НомерГТД,
	|	НаборДанных.ЕдиницаИзмеренияТНВЭД КАК ЕдиницаИзмеренияТНВЭД,
	|	&НаборДанныхПоляОбъектные,
	|	&НаборДанныхПоляЧисловыеСумма,
	|	СУММА(НаборДанных.КоличествоПоРНПТ) КАК КоличествоПоРНПТ,
	|	СУММА(НаборДанных.Количество) КАК Количество
	|ИЗ
	|	(ВЫБРАТЬ
	|		Товары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		Товары.ВидЗапасов КАК ВидЗапасов,
	|		Товары.НомерГТД КАК НомерГТД,
	|		Товары.ЕдиницаИзмеренияТНВЭД КАК ЕдиницаИзмеренияТНВЭД,
	|		&ТоварыПоляОбъектные,
	|		&ТоварыПоляЧисловые,
	|		Товары.КоличествоПоРНПТ КАК КоличествоПоРНПТ,
	|		Товары.Количество КАК Количество
	|	ИЗ
	|		ВтРезультатРаспределения КАК Товары
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Товары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		Товары.ВидЗапасов КАК ВидЗапасов,
	|		МАКСИМУМ(Товары.НомерГТД) КАК НомерГТД,
	|		МАКСИМУМ(Товары.ЕдиницаИзмеренияТНВЭД) КАК ЕдиницаИзмеренияТНВЭД,
	|		&МаксимумПоляОбъектные,
	|		&СуммаПоляЧисловые,
	|		0 КАК КоличествоПоРНПТ,
	|		-ВтДельта.ДельтаКоличествоПоТоварам КАК Количество
	|	ИЗ
	|		ВтРезультатРаспределения КАК Товары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДельтаКоличествоТоваров КАК ВтДельта
	|			ПО Товары.АналитикаУчетаНоменклатуры = ВтДельта.АналитикаУчетаНоменклатуры
	|			И Товары.ВидЗапасов = ВтДельта.ВидЗапасов
	|	СГРУППИРОВАТЬ ПО
	|		Товары.АналитикаУчетаНоменклатуры,
	|		Товары.ВидЗапасов,
	|		ВтДельта.ДельтаКоличествоПоТоварам
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		МАКСИМУМ(Товары.АналитикаУчетаНоменклатуры) КАК АналитикаУчетаНоменклатуры,
	|		МАКСИМУМ(Товары.ВидЗапасов) КАК ВидЗапасов,
	|		Товары.НомерГТД КАК НомерГТД,
	|		Товары.ЕдиницаИзмеренияТНВЭД КАК ЕдиницаИзмеренияТНВЭД,
	|		&МаксимумПоляОбъектные,
	|		&СуммаПоляЧисловые,
	|		-ВтДельта.ДельтаКоличествоПоРНПТ КАК КоличествоПоРНПТ,
	|		0 КАК Количество
	|	ИЗ
	|		ВтРезультатРаспределения КАК Товары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДельтаКоличествоПоРНПТ КАК ВтДельта
	|			ПО Товары.НомерГТД = ВтДельта.НомерГТД
	|			И Товары.ЕдиницаИзмеренияТНВЭД = ВтДельта.ЕдиницаИзмеренияТНВЭД
	|	СГРУППИРОВАТЬ ПО
	|		Товары.НомерГТД,
	|		Товары.ЕдиницаИзмеренияТНВЭД,
	|		ВтДельта.ДельтаКоличествоПоРНПТ) КАК НаборДанных
	|СГРУППИРОВАТЬ ПО
	|	НаборДанных.АналитикаУчетаНоменклатуры,
	|	НаборДанных.ВидЗапасов,
	|	НаборДанных.НомерГТД,
	|	&НаборДанныхБезРазыменованияПоляОбъектные,
	|	НаборДанных.ЕдиницаИзмеренияТНВЭД
	|ИМЕЮЩИЕ
	|	СУММА(НаборДанных.КоличествоПоРНПТ) > 0
	|	ИЛИ СУММА(НаборДанных.Количество) > 0
	|;
	|
	|ВЫБРАТЬ
	|	СписокКомплектующих.Ссылка КАК ПрослеживаемыйКомплект,
	|	СписокКомплектующих.НомерГТД КАК НомерГТД,
	|	СписокКомплектующих.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(СписокКомплектующих.НомерГТД.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) 
	|		= ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК ТребуетсяЗаполнитьНоменклатуруВГТД,
	|	СписокКомплектующих.КоличествоИсходное КАК КоличествоРНПТИсходное,
	|	СписокКомплектующих.Количество КАК КоличествоРНПТОбщее,
	|	СписокКомплектующих.ЕдиницаИзмеренияТНВЭД КАК ЕдиницаИзмеренияТНВЭД
	|ИЗ
	|	ВтСписокКомплектующих КАК СписокКомплектующих
	|";
	
	Запрос.УстановитьПараметр("Комплектующие", ТоварыКСписанию);
	Запрос.УстановитьПараметр("Товары", ТоварыКОприходованию);
	
	// Шаблоны частей запроса для подмены.
	// Объектные и числовые.
	ШаблонТовары = "Товары.%1 КАК %1,"; // @query-part
	ШаблонНаборДанных = "НаборДанных.%1 КАК %1,"; // @query-part
	ШаблонНаборДанныхБезРазыменования = "НаборДанных.%1,"; // @query-part
	ШаблонМаксимумТовары = "МАКСИМУМ(Товары.%1) КАК %1,"; // @query-part
	// Числовые.
	ШаблонСуммаНаборДанных = "СУММА(НаборДанных.%1) КАК %1,"; // @query-part
	ШаблонСуммаТовары = "СУММА(Товары.%1) КАК %1,"; // @query-part
	ШаблонДеление = "ВтСписокТоваровСумма.%1 * (Товары.Количество / ВтСписокКомплектующих.Количество) КАК %1,"; // @query-part
	
	// Параметры запроса для подмены.
	// Объектные.
	ПараметрыТовары = "&ТоварыПоляОбъектные,"; // @query-part
	ПараметрыМаксимум = "&МаксимумПоляОбъектные,"; // @query-part
	ПараметрыНабор = "&НаборДанныхПоляОбъектные,"; // @query-part
	ПараметрыНаборБезРазыменования = "&НаборДанныхБезРазыменованияПоляОбъектные,"; // @query-part
	// Числовые.
	ПараметрыТоварыЧисловые = "&ТоварыПоляЧисловые,"; // @query-part
	ПараметрыСумма = "&СуммаПоляЧисловые,"; // @query-part
	ПараметрыДеление = "&ДелениеПоляЧисловые,"; // @query-part
	ПараметрыНаборЧисловые = "&НаборДанныхПоляЧисловыеСумма,"; // @query-part
	
	// Соответствие шаблонов параметрам запроса.
	ШаблоныПараметры = Новый Соответствие();
	// Объектные.
	Если ПоляОбъектные <> Неопределено Тогда
		ШаблоныПараметры.Вставить(ШаблонТовары, ПараметрыТовары);
		ШаблоныПараметры.Вставить(ШаблонМаксимумТовары, ПараметрыМаксимум);
		ШаблоныПараметры.Вставить(ШаблонНаборДанных, ПараметрыНабор);
		ШаблоныПараметры.Вставить(ШаблонНаборДанныхБезРазыменования, ПараметрыНаборБезРазыменования);
		
		Запрос.Текст = ПодменитьПараметрыТекстаЗапросаРазборкиСоставныхПрослеживаемыхНомеровГТД(Запрос.Текст,
			ШаблоныПараметры,
			ПоляОбъектные);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ПараметрыТовары, "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ПараметрыМаксимум, "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ПараметрыНабор, "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ПараметрыНаборБезРазыменования, "");
	КонецЕсли;
	
	// Соответствие шаблонов параметрам запроса.
	ШаблоныПараметры = Новый Соответствие();
	// Числовые.
	Если ПоляЧисловые <> Неопределено Тогда
		ШаблоныПараметры.Вставить(ШаблонТовары, ПараметрыТоварыЧисловые);
		ШаблоныПараметры.Вставить(ШаблонСуммаТовары, ПараметрыСумма);
		ШаблоныПараметры.Вставить(ШаблонДеление, ПараметрыДеление);
		ШаблоныПараметры.Вставить(ШаблонСуммаНаборДанных, ПараметрыНаборЧисловые);
		
		Запрос.Текст = ПодменитьПараметрыТекстаЗапросаРазборкиСоставныхПрослеживаемыхНомеровГТД(Запрос.Текст,
			ШаблоныПараметры,
			ПоляЧисловые);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ПараметрыТоварыЧисловые, "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ПараметрыСумма, "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ПараметрыДеление, "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ПараметрыНаборЧисловые, "");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	КомплектующиеРНПТ = РезультатЗапроса[РезультатЗапроса.ВГраница()].Выбрать();
	Результат = РезультатЗапроса[РезультатЗапроса.ВГраница() - 1].Выгрузить();

	ПараметрыПоиска = Новый Структура("НомерГТД, ЕдиницаИзмеренияТНВЭД");
	Пока КомплектующиеРНПТ.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ПараметрыПоиска, КомплектующиеРНПТ);
		НайденныеСтроки = Результат.НайтиСтроки(ПараметрыПоиска);
		ИсходноеКоличество = КомплектующиеРНПТ.КоличествоРНПТОбщее;
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ИсходноеКоличество = ИсходноеКоличество - НайденнаяСтрока.КоличествоПоРНПТ;
		КонецЦикла;
		Если ИсходноеКоличество <> 0 Тогда
			ШаблонСообщения = НСтр("ru = 'При разборке составного прослеживаемого комплекта ""%1"" зафиксирована ошибка: невозможно отнести номер РНПТ ""%2"" на прослеживаемое изделие (комплектующее), поскольку нет изделия (комплектующего) с подходящей единицей измерения ТНВЭД (""%3"").
			|Для предотвращения потери информации об остатках номера РНПТ, укажите дополнительное изделие (комплектующее), с необходимой единицей измерения ТНВЭД.'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СокрЛП(КомплектующиеРНПТ.ПрослеживаемыйКомплект), СокрЛП(КомплектующиеРНПТ.НомерГТД), СокрЛП(КомплектующиеРНПТ.ЕдиницаИзмеренияТНВЭД));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Неопределено, "", "", Отказ);
		КонецЕсли;
		
		Если КомплектующиеРНПТ.ТребуетсяЗаполнитьНоменклатуруВГТД
			И ЗначениеЗаполнено(КомплектующиеРНПТ.Номенклатура) Тогда
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.НомераГТД"); 
			ЭлементБлокировки.УстановитьЗначение("Ссылка", КомплектующиеРНПТ.НомерГТД);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			НачатьТранзакцию();
			Попытка
				Блокировка.Заблокировать();
				
				ОбъектГТД = КомплектующиеРНПТ.НомерГТД.ПолучитьОбъект();
				ОбъектГТД.Номенклатура = КомплектующиеРНПТ.Номенклатура;
				ОбъектГТД.НаименованиеТовара = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КомплектующиеРНПТ.Номенклатура, "НаименованиеПолное");
				ОбъектГТД.Записать();
				
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				
				// Отказ заполнения номенклатуры в шапке ГТД не является блокирующей проблемой.	Флаг не взводим.
				ТекстОшибки = НСтр("ru = 'Не удалось записать связанную номенклатуру в номер ГТД (РНПТ).'")
					+ Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Разборка составного номера ГТД (РНПТ)'", ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Предупреждение, , , ТекстОшибки);
				
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
	// Без явной типизации таблицы значений, при дальнейшей ее загрузке во временную таблицу запроса
	// произойдет обрезание точности числовых полей до 9 знаков.
	Квалификатор = Новый КвалификаторыЧисла(23, 11);
	Результат.Колонки.КоличествоПоРНПТ.Имя = "КоличествоПоРНПТБезТипизации";
	Результат.Колонки.Добавить("КоличествоПоРНПТ", Новый ОписаниеТипов("Число", Квалификатор));
	Результат.ЗагрузитьКолонку(Результат.ВыгрузитьКолонку("КоличествоПоРНПТБезТипизации"), "КоличествоПоРНПТ");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

// Заполняет список выбора наименований входящих документов по 5 последним документам контрагента.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма документа.
// 	Контрагент - СправочникСсылка.Контрагенты - ссылка на контрагента, по которому будет поиск.
//
Процедура ЗаполнитьСписокВыбораНаименованиеВходящегоДокумента(Форма, Контрагент) Экспорт
	Элемент = Форма.Элементы.НаименованиеВходящегоДокумента;
	Документ = Форма.Объект; // ДокументОбъектИмяДокумента - 
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложеннаяТаблица.Наименование КАК Наименование
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 5
	|		Таблица.НаименованиеПервичногоДокумента КАК Наименование
	|	ИЗ
	|		РегистрСведений.РеестрДокументов КАК Таблица
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиРеестраДокументов КАК КлючиРеестраДокументов
	|			ПО (Таблица.Контрагент = КлючиРеестраДокументов.Ссылка)
	|	ГДЕ
	|		Таблица.ТипСсылки = &ТипСсылки
	|		И КлючиРеестраДокументов.Ключ = &Контрагент
	|		И Таблица.НаименованиеПервичногоДокумента <> &ПустаяСтрока
	|	УПОРЯДОЧИТЬ ПО
	|		Таблица.ДатаДокументаИБ УБЫВ) КАК ВложеннаяТаблица";
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("ТипСсылки", ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Документ.Ссылка)));
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	УстановитьПривилегированныйРежим(Истина);
	МассивНаименований =  Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Наименование");
	УстановитьПривилегированныйРежим(Ложь);
	МодульМенеджера = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Документ.Ссылка.Метаданные().ПолноеИмя());
	МассивПредопределенныхНаименований = МодульМенеджера.НаименованияВходящихДокументов();
	
	Для каждого ЭлементМассива Из МассивПредопределенныхНаименований Цикл
		Если МассивНаименований.Найти(ЭлементМассива) = Неопределено Тогда
			МассивНаименований.Добавить(ЭлементМассива);
		КонецЕсли;
	КонецЦикла;
	Элемент.СписокВыбора.ЗагрузитьЗначения(МассивНаименований);
	
КонецПроцедуры

// Заполняет документы поступления и цены в табличной части документов возврата
//
// Параметры:
//		ДокументВозврата - ДокументОбъект.ВозвратТоваровПоставщику - Документ возврата 
//		ИмяТаблицы - Строка - Имя таблицы Товары
Процедура ЗаполнитьПоступленияИЦены(ДокументВозврата, ИмяТаблицы) Экспорт
	
	ТаблицаПроверяемыхТоваров = ДокументВозврата[ИмяТаблицы].Выгрузить();
	ТабличнаяЧастьВозврата = ДокументВозврата[ИмяТаблицы];
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВозвратТоваровПоставщикуТовары.Номенклатура,
	|	ВозвратТоваровПоставщикуТовары.Характеристика,
	|	ВозвратТоваровПоставщикуТовары.Серия,
	|	ВозвратТоваровПоставщикуТовары.КоличествоУпаковок,
	|	ВозвратТоваровПоставщикуТовары.Упаковка,
	|	ВозвратТоваровПоставщикуТовары.Количество
	|ПОМЕСТИТЬ ЗаполняемыеТовары
	|ИЗ
	|	&ТаблицаТовары КАК ВозвратТоваровПоставщикуТовары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВозвратТоваровПоставщикуТовары.Номенклатура,
	|	ВозвратТоваровПоставщикуТовары.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПриобретениеТоваровУслугТовары.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ДокументыПоступления
	|ИЗ
	|	ЗаполняемыеТовары КАК ЗаполняемыеТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслугТовары
	|		ПО ЗаполняемыеТовары.Номенклатура = ПриобретениеТоваровУслугТовары.Номенклатура
	|			И ЗаполняемыеТовары.Характеристика = ПриобретениеТоваровУслугТовары.Характеристика
	|ГДЕ
	|	ПриобретениеТоваровУслугТовары.Ссылка.Проведен
	|	И ПриобретениеТоваровУслугТовары.Ссылка.Контрагент = &Контрагент
	|	И ПриобретениеТоваровУслугТовары.Ссылка.Организация = &Организация
	|	И ПриобретениеТоваровУслугТовары.Ссылка.Соглашение = &Соглашение
	|	И ПриобретениеТоваровУслугТовары.Ссылка.НалогообложениеНДС = &НалогообложениеНДС
	|	И ПриобретениеТоваровУслугТовары.Ссылка.Партнер = &Партнер
	|	И ПриобретениеТоваровУслугТовары.Ссылка.НаправлениеДеятельности = &НаправлениеДеятельности
	|	И ПриобретениеТоваровУслугТовары.Ссылка.Дата <= &ДатаВозврата
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(КорректировкаПриобретения.Дата) КАК Дата,
	|	ДокументыПоступления.Ссылка КАК СсылкаПоступления
	|ПОМЕСТИТЬ ДанныеКорректировки
	|ИЗ
	|	ДокументыПоступления КАК ДокументыПоступления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаПриобретения КАК КорректировкаПриобретения
	|		ПО (КорректировкаПриобретения.ДокументОснование = ДокументыПоступления.Ссылка)
	|ГДЕ
	|	КорректировкаПриобретения.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументыПоступления.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СсылкаПоступления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(КорректировкаПриобретения.Ссылка) КАК Ссылка,
	|	МАКСИМУМ(КорректировкаПриобретения.Ссылка.Дата) КАК Дата,
	|	КорректировкаПриобретения.Ссылка.ДокументОснование КАК СсылкаПоступления
	|ПОМЕСТИТЬ ДанныеПоследнейКорректировки
	|ИЗ
	|	Документ.КорректировкаПриобретения КАК КорректировкаПриобретения
	|ГДЕ
	|	(КорректировкаПриобретения.Ссылка.ДокументОснование, КорректировкаПриобретения.Ссылка.Дата) В
	|			(ВЫБРАТЬ
	|				ДанныеКорректировки.СсылкаПоступления КАК СсылкаПоступления,
	|				ДанныеКорректировки.Дата КАК Дата
	|			ИЗ
	|				ДанныеКорректировки)
	|
	|СГРУППИРОВАТЬ ПО
	|	КорректировкаПриобретения.Ссылка.ДокументОснование
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	СсылкаПоступления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА ДанныеПоследнейКорректировки.Ссылка ЕСТЬ NULL 
	|			ТОГДА ДокументыПоступления.Ссылка
	|		ИНАЧЕ ДанныеПоследнейКорректировки.Ссылка
	|	КОНЕЦ КАК Ссылка
	|ПОМЕСТИТЬ СсылкиНаПоступления
	|ИЗ
	|	ДокументыПоступления КАК ДокументыПоступления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеПоследнейКорректировки КАК ДанныеПоследнейКорректировки
	|		ПО ДокументыПоступления.Ссылка = ДанныеПоследнейКорректировки.СсылкаПоступления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КорректировкаПриобретенияТовары.Номенклатура КАК Номенклатура,
	|	КорректировкаПриобретенияТовары.Характеристика КАК Характеристика,
	|	КорректировкаПриобретенияТовары.Серия КАК Серия,
	|	КорректировкаПриобретенияТовары.КоличествоУпаковок,
	|	КорректировкаПриобретенияТовары.Количество,
	|	КорректировкаПриобретенияТовары.Цена,
	|	КорректировкаПриобретенияТовары.Сумма,
	|	КорректировкаПриобретенияТовары.Упаковка,
	|	0 КАК СуммаРучнойСкидки,
	|	КорректировкаПриобретенияТовары.Ссылка.ДокументОснование КАК ДокументПоступления
	|ПОМЕСТИТЬ ДанныеПоступления
	|ИЗ
	|	СсылкиНаПоступления КАК СсылкиНаПоступления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаПриобретения.Товары КАК КорректировкаПриобретенияТовары
	|		ПО (КорректировкаПриобретенияТовары.Ссылка = СсылкиНаПоступления.Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПриобретениеТоваровУслугТовары.Номенклатура,
	|	ПриобретениеТоваровУслугТовары.Характеристика,
	|	ПриобретениеТоваровУслугТовары.Серия,
	|	ПриобретениеТоваровУслугТовары.КоличествоУпаковок,
	|	ПриобретениеТоваровУслугТовары.Количество,
	|	ВЫБОР
	|		КОГДА ПриобретениеТоваровУслугТовары.СуммаРучнойСкидки = 0
	|				ИЛИ ПриобретениеТоваровУслугТовары.КоличествоУпаковок = 0
	|			ТОГДА ПриобретениеТоваровУслугТовары.Цена
	|		ИНАЧЕ ПриобретениеТоваровУслугТовары.Сумма / ПриобретениеТоваровУслугТовары.КоличествоУпаковок
	|	КОНЕЦ,
	|	ПриобретениеТоваровУслугТовары.Сумма,
	|	ПриобретениеТоваровУслугТовары.Упаковка,
	|	ПриобретениеТоваровУслугТовары.СуммаРучнойСкидки,
	|	ПриобретениеТоваровУслугТовары.Ссылка
	|ИЗ
	|	СсылкиНаПоступления КАК СсылкиНаПоступления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслугТовары
	|		ПО (ПриобретениеТоваровУслугТовары.Ссылка = СсылкиНаПоступления.Ссылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Серия,
	|	ДокументПоступления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаПроверяемыеТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаПроверяемыеТовары.Характеристика КАК Характеристика,
	|	ТаблицаПроверяемыеТовары.Серия КАК Серия,
	|	СУММА(ТаблицаПроверяемыеТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	СУММА(ТаблицаПроверяемыеТовары.Количество) КАК Количество,
	|	ТаблицаПроверяемыеТовары.ДокументПоступления КАК ДокументПоступления
	|ПОМЕСТИТЬ ДанныеДокументовВозврата
	|ИЗ
	|	ДокументыПоступления КАК ДокументыПоступления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику.Товары КАК ТаблицаПроверяемыеТовары
	|		ПО (ТаблицаПроверяемыеТовары.ДокументПоступления = ДокументыПоступления.Ссылка)
	|ГДЕ
	|	ТаблицаПроверяемыеТовары.Ссылка.Проведен
	|	И ТаблицаПроверяемыеТовары.Ссылка <> &ДокументВозврата
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПроверяемыеТовары.Номенклатура,
	|	ТаблицаПроверяемыеТовары.Характеристика,
	|	ТаблицаПроверяемыеТовары.Серия,
	|	ТаблицаПроверяемыеТовары.ДокументПоступления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Серия,
	|	ДокументПоступления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ДанныеПоступления.Номенклатура,
	|	ДанныеПоступления.Количество - ЕСТЬNULL(ДанныеДокументовВозврата.Количество, 0) КАК Количество,
	|	ДанныеПоступления.Характеристика,
	|	ДанныеПоступления.Серия,
	|	ВЫБОР
	|		КОГДА ДанныеПоступления.Упаковка = ЗаполняемыеТовары.Упаковка
	|			ТОГДА ВЫБОР
	|					КОГДА ДанныеПоступления.Упаковка ЕСТЬ NULL 
	|							ИЛИ ДанныеПоступления.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|						ТОГДА ДанныеПоступления.Количество - ЕСТЬNULL(ДанныеДокументовВозврата.Количество, 0)
	|					ИНАЧЕ (ДанныеПоступления.Количество - ЕСТЬNULL(ДанныеДокументовВозврата.Количество, 0)) / &ТекстЗапросаКоэффициентУпаковки1
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЗаполняемыеТовары.Упаковка ЕСТЬ NULL 
	|						ИЛИ ЗаполняемыеТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|					ТОГДА ДанныеПоступления.Количество - ЕСТЬNULL(ДанныеДокументовВозврата.Количество, 0)
	|				ИНАЧЕ (ДанныеПоступления.Количество - ЕСТЬNULL(ДанныеДокументовВозврата.Количество, 0)) / &ТекстЗапросаКоэффициентУпаковки2
	|			КОНЕЦ
	|	КОНЕЦ КАК КоличествоУпаковок,
	|	ВЫБОР
	|		КОГДА ДанныеПоступления.Количество - ЕСТЬNULL(ДанныеДокументовВозврата.Количество, 0) = 0
	|			ТОГДА ДанныеПоступления.Цена
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ДанныеПоступления.Упаковка = ЗаполняемыеТовары.Упаковка
	|					ТОГДА ВЫБОР
	|							КОГДА ДанныеПоступления.Упаковка ЕСТЬ NULL 
	|									ИЛИ ДанныеПоступления.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|								ТОГДА ДанныеПоступления.Сумма / ДанныеПоступления.Количество
	|							ИНАЧЕ ДанныеПоступления.Сумма / (ДанныеПоступления.Количество / &ТекстЗапросаКоэффициентУпаковки1)
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ЗаполняемыеТовары.Упаковка ЕСТЬ NULL 
	|								ИЛИ ЗаполняемыеТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|							ТОГДА ДанныеПоступления.Сумма / ДанныеПоступления.Количество
	|						ИНАЧЕ ДанныеПоступления.Сумма / (ДанныеПоступления.Количество / &ТекстЗапросаКоэффициентУпаковки2)
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК Цена,
	|	ДанныеПоступления.ДокументПоступления
	|ИЗ
	|	ЗаполняемыеТовары КАК ЗаполняемыеТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеПоступления КАК ДанныеПоступления
	|			ЛЕВОЕ СОЕДИНЕНИЕ ДанныеДокументовВозврата КАК ДанныеДокументовВозврата
	|			ПО ДанныеПоступления.ДокументПоступления = ДанныеДокументовВозврата.ДокументПоступления
	|				И ДанныеПоступления.Номенклатура = ДанныеДокументовВозврата.Номенклатура
	|				И ДанныеПоступления.Характеристика = ДанныеДокументовВозврата.Характеристика
	|				И ДанныеПоступления.Серия = ДанныеДокументовВозврата.Серия
	|		ПО ЗаполняемыеТовары.Номенклатура = ДанныеПоступления.Номенклатура
	|			И ДанныеПоступления.Характеристика = ЗаполняемыеТовары.Характеристика
	|			И ДанныеПоступления.Серия = ЗаполняемыеТовары.Серия
	|ГДЕ
	|	ДанныеПоступления.Количество - ЕСТЬNULL(ДанныеДокументовВозврата.Количество, 0) > 0
	|	И ДанныеПоступления.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеПоступления.ДокументПоступления.Дата УБЫВ";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ДанныеПоступления.Упаковка",
		"ДанныеПоступления.Номенклатура"));
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЗаполняемыеТовары.Упаковка",
		"ЗаполняемыеТовары.Номенклатура"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Партнер", ДокументВозврата.Партнер);
	Запрос.УстановитьПараметр("Контрагент", ДокументВозврата.Контрагент);
	Запрос.УстановитьПараметр("Организация", ДокументВозврата.Организация);
	Запрос.УстановитьПараметр("Соглашение", ДокументВозврата.Соглашение);
	Запрос.УстановитьПараметр("НалогообложениеНДС", ДокументВозврата.НалогообложениеНДС);
	Запрос.УстановитьПараметр("ТаблицаТовары", ТаблицаПроверяемыхТоваров);
	Запрос.УстановитьПараметр("ДокументВозврата", ДокументВозврата.Ссылка);
	Запрос.УстановитьПараметр("НаправлениеДеятельности", ДокументВозврата.НаправлениеДеятельности);
	Запрос.УстановитьПараметр("ДатаВозврата", ?(ЗначениеЗаполнено(ДокументВозврата.Дата),ДокументВозврата.Дата,ТекущаяДатаСеанса()));
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаТовары Из ТабличнаяЧастьВозврата Цикл
		НайденныеСтроки = РезультатЗапроса.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, Серия",
														СтрокаТовары.Номенклатура, СтрокаТовары.Характеристика, СтрокаТовары.Серия));
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если СтрокаТовары.Количество <= НайденнаяСтрока.Количество Тогда
				СтрокаТовары.ДокументПоступления = НайденнаяСтрока.ДокументПоступления;
				СтрокаТовары.Цена = НайденнаяСтрока.Цена;
				НайденнаяСтрока.КоличествоУпаковок = НайденнаяСтрока.КоличествоУпаковок - СтрокаТовары.КоличествоУпаковок;
				НайденнаяСтрока.Количество = НайденнаяСтрока.Количество - СтрокаТовары.Количество;
				Если НайденнаяСтрока.Количество = 0 Тогда
					РезультатЗапроса.Удалить(НайденнаяСтрока);
				КонецЕсли;
			Иначе
				СтрокаТовары.ДокументПоступления = НайденнаяСтрока.ДокументПоступления;
				СтрокаТовары.Цена = НайденнаяСтрока.Цена;
				ДобавленнаяСтрока = ТабличнаяЧастьВозврата.Добавить();
				ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока, СтрокаТовары);
				ДобавленнаяСтрока.КоличествоУпаковок = СтрокаТовары.КоличествоУпаковок -  НайденнаяСтрока.КоличествоУпаковок;
				ДобавленнаяСтрока.Количество = СтрокаТовары.Количество - НайденнаяСтрока.Количество;
				СтрокаТовары.КоличествоУпаковок = НайденнаяСтрока.КоличествоУпаковок;
				СтрокаТовары.Количество = НайденнаяСтрока.Количество;
				РезультатЗапроса.Удалить(НайденнаяСтрока);
			КонецЕсли;
			Прервать;
		КонецЦикла;
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаТовары.ДокументПоступления = Документы.ПриобретениеТоваровУслуг.ПустаяСсылка();
			СтрокаТовары.Цена = 0;
		КонецЕсли;
	КонецЦикла;
		
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ДокументВозврата);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(ТабличнаяЧастьВозврата, СтруктураДействий, Неопределено);
	
КонецПроцедуры

#Область УстаревшиеПроцедурыИФункции

// Устарела. Следует использовать см. НоменклатураПартнеровСервер.ЗаполнитьНоменклатуруПартнераПоНоменклатуреВТаблице
// Заполняет номенклатуру поставщика при изменении поставщика в документе
//
// Параметры:
//  Таблица - ДанныеФормыКоллекция, ТаблицаЗначений - таблица, в которой необходимо заполнить номенклатуру поставщика.
//  Партнер - СправочникСсылка.Партнеры - поставщик, которому принадлежит номенклатура.
//
Процедура ЗаполнитьНоменклатуруПоставщикаВТаблице(Таблица, Партнер) Экспорт
	
	НоменклатураПартнеровСервер.ЗаполнитьНоменклатуруПартнераПоНоменклатуреВТаблице(Таблица, Партнер);

КонецПроцедуры

// Устарела. Следует использовать см. НоменклатураПартнеровСервер.ЗаполнитьПустоеСопоставлениеВНоменклатуреПартнераПоНоменклатуреИБ.
// Заполняет номенклатуру, характеристику, упаковку в номенклатуре поставщика с пустой номенклатурой.
//
// Параметры:
//  Товары - ТаблицаЗначений - таблица, содержащая данные для связывания номенклатуры с номенклатурой поставщика.
//  Отказ - Булево - Истина, если не удалось связать номенклатуру с номенклатурой поставщика.
//
Процедура СвязатьНоменклатуруСНоменклатуройПоставщика(Товары, Отказ) Экспорт

	НоменклатураПартнеровСервер.ЗаполнитьПустоеСопоставлениеВНоменклатуреПартнераПоНоменклатуреИБ(Товары, Отказ);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ШаблонУсловияЗакупок()
	
	Возврат Новый Структура("
		|Соглашение,
		|Партнер,
		|Контрагент,
		|Организация,
		|Валюта,
		|ВалютаВзаиморасчетов,
		|ЦенаВключаетНДС,
		|Склад,
		|ФормаОплаты,
		|ОплатаВВалюте,
		|ГруппаФинансовогоУчета,
		|СтатьяДвиженияДенежныхСредств,
		|СрокПоставки,
		|ХозяйственнаяОперация,
		|ВидЦеныПоставщика,
		|РегистрироватьЦеныПоставщика,
		|ГруппаФинансовогоУчета,
		|СпособРасчетаВознаграждения,
		|ПроцентВознаграждения,
		|УдержатьВознаграждение,
		|ИспользуютсяДоговорыКонтрагентов,
		|ПорядокРасчетов,
		|ВозвращатьМногооборотнуюТару,
		|СрокВозвратаМногооборотнойТары,
		|РассчитыватьДатуВозвратаТарыПоКалендарю,
		|КалендарьВозвратаТары,
		|ТребуетсяЗалогЗаТару,
		|НаправлениеДеятельности,
		|МинимальнаяСуммаЗаказа,
		|ДлительностьДоставки
		|");
		
КонецФункции

Функция ТекстЗапросаПроверкаПринимающихсяТоваровПоРаспоряжениям(ТипПоступления)
	
	ТекстЗапросаПоРаспоряжениям = "";
	
	Если ТипПоступления = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
		
		ТекстЗапросаПоРаспоряжениям = 
		"ВЫБРАТЬ
		|	ТоварыПоступления.Номенклатура КАК Номенклатура,
		|	ТоварыПоступления.Характеристика КАК Характеристика,
		|	ТоварыПоступления.Серия КАК Серия,
		|	ТоварыПоступления.Склад КАК Склад,
		|	СУММА(ТоварыПоступления.Количество) КАК КоличествоПоступления
		|ПОМЕСТИТЬ втТоварыПоступления
		|ИЗ
		|	Документ.ПриобретениеТоваровУслуг.Товары КАК ТоварыПоступления
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ВариантПриемкиТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным)
		|				ТОГДА ТоварыПоступления.ЗаказПоставщику В (&МассивРаспоряжений)
		|			КОГДА &ВариантПриемкиТоваров В (ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.НеРазделенаПоЗаказамИНакладным), ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.МожетПроисходитьБезЗаказовИНакладных), ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.НеРазделенаПоНакладным))
		|				ТОГДА ТоварыПоступления.Ссылка.Соглашение = &Соглашение
		|			КОГДА &ВариантПриемкиТоваров В (ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.ПоДоговорамБезЗаказовИНакладных), ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.ПоДоговорамПослеЗаказовИлиНакладных), ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.ПоДоговорамПослеНакладных))
		|				ТОГДА ТоварыПоступления.Ссылка.Договор = &Договор
		|		КОНЕЦ
		|	И ТоварыПоступления.Ссылка <> &ДокументПоступления
		|	И ТоварыПоступления.Ссылка.Проведен
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыПоступления.Номенклатура,
		|	ТоварыПоступления.Характеристика,
		|	ТоварыПоступления.Серия,
		|	ТоварыПоступления.Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
	ИначеЕсли ТипПоступления = Тип("ДокументСсылка.ПоступлениеТоваровНаСклад") Тогда
		
		ТекстЗапросаПоРаспоряжениям = 
		"ВЫБРАТЬ
		|	ТоварыПоступления.Номенклатура КАК Номенклатура,
		|	ТоварыПоступления.Характеристика КАК Характеристика,
		|	ТоварыПоступления.Серия КАК Серия,
		|	ТоварыПоступления.Ссылка.Склад КАК Склад,
		|	СУММА(ТоварыПоступления.Количество) КАК КоличествоПоступления,
		|	ТоварыПоступления.Ссылка.ИсправляемыйДокумент,
		|	ТоварыПоступления.Ссылка.СторнируемыйДокумент
		|ПОМЕСТИТЬ втТоварыПоступленияДоВычетаСторно
		|ИЗ
		|	Документ.ПоступлениеТоваровНаСклад.Товары КАК ТоварыПоступления
		|ГДЕ
		|	ТоварыПоступления.Ссылка <> &ДокументПоступления
		|	И ТоварыПоступления.Ссылка.Проведен
		|	И ВЫБОР
		|		КОГДА &ВариантПриемкиТоваров В (ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным),
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным))
		|			ТОГДА ТоварыПоступления.Ссылка.Распоряжение В (&МассивРаспоряжений)
		|		КОГДА &ВариантПриемкиТоваров В (ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.ПоДоговорамПослеНакладных),
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.ПоДоговорамБезЗаказовИНакладных),
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.ПоДоговорамПослеЗаказовИлиНакладных))
		|			ТОГДА ТоварыПоступления.Ссылка.Распоряжение = &Договор
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|СГРУППИРОВАТЬ ПО
		|	ТоварыПоступления.Номенклатура,
		|	ТоварыПоступления.Характеристика,
		|	ТоварыПоступления.Серия,
		|	ТоварыПоступления.Ссылка.Склад,
		|	ТоварыПоступления.Ссылка.ИсправляемыйДокумент,
		|	ТоварыПоступления.Ссылка.СторнируемыйДокумент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыПоступления.Номенклатура КАК Номенклатура,
		|	ТоварыПоступления.Характеристика КАК Характеристика,
		|	ТоварыПоступления.Серия КАК Серия,
		|	ТоварыПоступления.Ссылка.Склад КАК Склад,
		|	-ТоварыПоступления.Количество КАК КоличествоПоступления
		|ПОМЕСТИТЬ втСторнированныеДокументы
		|ИЗ
		|	Документ.ПоступлениеТоваровНаСклад.Товары КАК ТоварыПоступления
		|ГДЕ
		|	ТоварыПоступления.Ссылка В
		|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			Таблица.ИсправляемыйДокумент
		|		ИЗ
		|			втТоварыПоступленияДоВычетаСторно КАК Таблица
		|
		|		ОБЪЕДИНИТЬ ВСЕ
		|
		|		ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			Таблица.СторнируемыйДокумент
		|		ИЗ
		|			втТоварыПоступленияДоВычетаСторно КАК Таблица)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НаборДанных.Номенклатура КАК Номенклатура,
		|	НаборДанных.Характеристика КАК Характеристика,
		|	НаборДанных.Серия КАК Серия,
		|	НаборДанных.Склад КАК Склад,
		|	СУММА(НаборДанных.КоличествоПоступления) КАК КоличествоПоступления
		|ПОМЕСТИТЬ втТоварыПоступления
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТоварыПоступления.Номенклатура КАК Номенклатура,
		|		ТоварыПоступления.Характеристика КАК Характеристика,
		|		ТоварыПоступления.Серия КАК Серия,
		|		ТоварыПоступления.Склад КАК Склад,
		|		ТоварыПоступления.КоличествоПоступления КАК КоличествоПоступления
		|	ИЗ
		|		втТоварыПоступленияДоВычетаСторно КАК ТоварыПоступления
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		ТоварыПоступления.Номенклатура КАК Номенклатура,
		|		ТоварыПоступления.Характеристика КАК Характеристика,
		|		ТоварыПоступления.Серия КАК Серия,
		|		ТоварыПоступления.Склад КАК Склад,
		|		ТоварыПоступления.КоличествоПоступления КАК КоличествоПоступления
		|	ИЗ
		|		втСторнированныеДокументы КАК ТоварыПоступления) КАК НаборДанных
		|СГРУППИРОВАТЬ ПО
		|	НаборДанных.Номенклатура,
		|	НаборДанных.Характеристика,
		|	НаборДанных.Серия,
		|	НаборДанных.Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
	ИначеЕсли ТипПоступления = Тип("ДокументСсылка.ПриемкаТоваровНаХранение") Тогда
		
		ТекстЗапросаПоРаспоряжениям = 
		"ВЫБРАТЬ
		|	ТоварыПоступления.Номенклатура КАК Номенклатура,
		|	ТоварыПоступления.Характеристика КАК Характеристика,
		|	ТоварыПоступления.Серия КАК Серия,
		|	ТоварыПоступления.Склад КАК Склад,
		|	СУММА(ТоварыПоступления.Количество) КАК КоличествоПоступления
		|ПОМЕСТИТЬ втТоварыПоступления
		|ИЗ
		|	Документ.ПриемкаТоваровНаХранение.Товары КАК ТоварыПоступления
		|ГДЕ
		|	ТоварыПоступления.Ссылка.Проведен
		|	И ТоварыПоступления.Ссылка <> &ДокументПоступления
		|	И ВЫБОР
		|			КОГДА &ВариантПриемкиТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным)
		|				ТОГДА ТоварыПоступления.ЗаказПоставщику В (&МассивРаспоряжений)
		|			КОГДА &ВариантПриемкиТоваров В (ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.НеРазделенаПоЗаказамИНакладным), ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.МожетПроисходитьБезЗаказовИНакладных), ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.НеРазделенаПоНакладным))
		|				ТОГДА ТоварыПоступления.Ссылка.Соглашение = &Соглашение
		|			КОГДА &ВариантПриемкиТоваров В (ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.ПоДоговорамБезЗаказовИНакладных), ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.ПоДоговорамПослеЗаказовИлиНакладных), ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.ПоДоговорамПослеНакладных))
		|				ТОГДА ТоварыПоступления.Ссылка.Договор = &Договор
		|		КОНЕЦ
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыПоступления.Номенклатура,
		|	ТоварыПоступления.Характеристика,
		|	ТоварыПоступления.Серия,
		|	ТоварыПоступления.Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
		
	ИначеЕсли ТипПоступления = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
		
		ТекстЗапросаПоРаспоряжениям = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА Поступление.Порча
		|			ТОГДА Поступление.НоменклатураОприходование
		|		ИНАЧЕ Поступление.Номенклатура
		|	КОНЕЦ КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА Поступление.Порча
		|			ТОГДА Поступление.ХарактеристикаОприходование
		|		ИНАЧЕ Поступление.Характеристика
		|	КОНЕЦ КАК Характеристика,
		|	Поступление.Серия КАК Серия,
		|	Поступление.Ссылка.Склад КАК Склад,
		|	СУММА(Поступление.Количество) КАК КоличествоПоступления
		|ПОМЕСТИТЬ втТоварыПоступления
		|ИЗ
		|	Документ.ВозвратТоваровОтКлиента.Товары КАК Поступление
		|ГДЕ
		|	&ВариантПриемкиТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным)
		|	И Поступление.Ссылка.ЗаявкаНаВозвратТоваровОтКлиента В(&МассивРаспоряжений)
		|	И Поступление.Ссылка <> &ДокументПоступления
		|	И Поступление.Ссылка.Проведен
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА Поступление.Порча
		|			ТОГДА Поступление.НоменклатураОприходование
		|		ИНАЧЕ Поступление.Номенклатура
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА Поступление.Порча
		|			ТОГДА Поступление.ХарактеристикаОприходование
		|		ИНАЧЕ Поступление.Характеристика
		|	КОНЕЦ,
		|	Поступление.Серия,
		|	Поступление.Ссылка.Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
	КонецЕсли;
	
	ТекстЗапросаПоРаспоряжениям = ТекстЗапросаПоРаспоряжениям + 
	"ВЫБРАТЬ
	|	ТоварыКПоступлению.Номенклатура КАК Номенклатура,
	|	ТоварыКПоступлению.Характеристика КАК Характеристика,
	|	ТоварыКПоступлению.Серия КАК Серия,
	|	ТоварыКПоступлению.Склад КАК Склад,
	|	СУММА(ТоварыКПоступлению.КОформлениюПоступленийПоОрдерам) КАК Количество
	|ПОМЕСТИТЬ втТоварыКОформлению
	|ИЗ
	|	РегистрНакопления.ТоварыКПоступлению КАК ТоварыКПоступлению
	|ГДЕ
	|	НЕ &ЗаполнитьПоПоступлениям
	|	И ТоварыКПоступлению.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ТоварыКПоступлению.ДокументПоступления В(&МассивРаспоряженийОтборДляРегистра)
	|	И ТоварыКПоступлению.Склад В(&Склад)
	|	И ТоварыКПоступлению.КОформлениюПоступленийПоОрдерам > 0
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Серия,
	|	Склад
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыКПоступлению.Номенклатура КАК Номенклатура,
	|	ТоварыКПоступлению.Характеристика КАК Характеристика,
	|	ТоварыКПоступлению.Серия КАК Серия,
	|	ТоварыКПоступлению.Склад КАК Склад,
	|	СУММА(ТоварыКПоступлению.КОформлениюПоступленийПоНакладным) КАК Количество
	|ИЗ
	|	РегистрНакопления.ТоварыКПоступлению КАК ТоварыКПоступлению
	|ГДЕ
	|	&ЗаполнитьПоПоступлениям
	|	И ТоварыКПоступлению.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И ТоварыКПоступлению.ДокументПоступления В(&МассивРаспоряженийОтборДляРегистра)
	|	И ТоварыКПоступлению.Склад В(&Склад)
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКПоступлению.Номенклатура,
	|	ТоварыКПоступлению.Характеристика,
	|	ТоварыКПоступлению.Серия,
	|	ТоварыКПоступлению.Склад
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыКПоступлению.КОформлениюПоступленийПоНакладным) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТоварыКОформлению.Номенклатура КАК Номенклатура,
	|	втТоварыКОформлению.Характеристика КАК Характеристика,
	|	втТоварыКОформлению.Серия КАК Серия,
	|	втТоварыКОформлению.Склад КАК Склад,
	|	ВЫБОР
	|		КОГДА втТоварыКОформлению.Количество > ЕСТЬNULL(втТоварыПоступления.КоличествоПоступления, 0)
	|			ТОГДА втТоварыКОформлению.Количество - ЕСТЬNULL(втТоварыПоступления.КоличествоПоступления, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Количество
	|ПОМЕСТИТЬ втНеоформленныеТовары
	|ИЗ
	|	втТоварыКОформлению КАК втТоварыКОформлению
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТоварыПоступления КАК втТоварыПоступления
	|		ПО втТоварыКОформлению.Номенклатура = втТоварыПоступления.Номенклатура
	|			И втТоварыКОформлению.Характеристика = втТоварыПоступления.Характеристика
	|			И втТоварыКОформлению.Серия = втТоварыПоступления.Серия
	|			И втТоварыКОформлению.Склад = втТоварыПоступления.Склад
	|ГДЕ
	|	втТоварыКОформлению.Количество - ЕСТЬNULL(втТоварыПоступления.КоличествоПоступления, 0) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(НеоформленныеТовары.Количество), 0) КАК Количество
	|ИЗ
	|	втНеоформленныеТовары КАК НеоформленныеТовары";
	
	Возврат ТекстЗапросаПоРаспоряжениям;
	
КонецФункции

Процедура УстановитьПараметрОтбораРаспоряженийВРегистреТоварыКПоступлению(Запрос)
	
	МассивРаспоряжений = Новый Массив;
	
	Если Запрос.Параметры.ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным Тогда
		
		Если Запрос.Параметры.Свойство("МассивРаспоряжений") Тогда
			МассивРаспоряжений = Запрос.Параметры.МассивРаспоряжений;
		Иначе
			МассивРаспоряжений.Добавить(Запрос.Параметры.ДокументПоступления);
		КонецЕсли;
		
	ИначеЕсли Запрос.Параметры.ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным Тогда
		
		МассивРаспоряжений.Добавить(Запрос.Параметры.ДокументПоступления);
		
	ИначеЕсли Запрос.Параметры.ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.НеРазделенаПоНакладным 
		Или Запрос.Параметры.ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.НеРазделенаПоЗаказамИНакладным
		Или Запрос.Параметры.ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.МожетПроисходитьБезЗаказовИНакладных Тогда
		
		МассивРаспоряжений.Добавить(Запрос.Параметры.Соглашение);
		
	ИначеЕсли Запрос.Параметры.ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.ПоДоговорамПослеНакладных
		Или Запрос.Параметры.ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.ПоДоговорамБезЗаказовИНакладных
		Или Запрос.Параметры.ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.ПоДоговорамПослеЗаказовИлиНакладных Тогда
		
		МассивРаспоряжений.Добавить(Запрос.Параметры.Договор);
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивРаспоряженийОтборДляРегистра", МассивРаспоряжений);
	
КонецПроцедуры

Функция ТекстЗапросаПроверкаПринимающихсяТоваровПоНакладной()
	
	ТекстЗапросаПоНакладной = 
	"ВЫБРАТЬ
	|	СУММА(ТоварыКПоступлению.КОформлениюПоступленийПоОрдерам) КАК Количество
	|ИЗ
	|	РегистрНакопления.ТоварыКПоступлению КАК ТоварыКПоступлению
	|ГДЕ
	|	ТоварыКПоступлению.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ТоварыКПоступлению.ДокументПоступления В (&МассивРаспоряженийОтборДляРегистра)
	|	И ТоварыКПоступлению.Склад В (&Склад)
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыКПоступлению.КОформлениюПоступленийПоОрдерам) > 0";
	
	Возврат ТекстЗапросаПоНакладной;
	
КонецФункции

Функция ТекстЗапросаПоРаспоряжениям(ТипПоступления)
	
	ТекстЗапросаПоРаспоряжениям = "";
	
	Если ТипПоступления = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
		
		ТекстЗапросаПоРаспоряжениям = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА &ВариантПриемкиТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным)
		|			ТОГДА ТоварыПоступления.ЗаказПоставщику
		|		КОГДА &ВариантПриемкиТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным)
		|			ТОГДА ТоварыПоступления.Ссылка
		|		КОГДА &ВариантПриемкиТоваров В (ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.НеРазделенаПоНакладным), ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.НеРазделенаПоЗаказамИНакладным), ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.МожетПроисходитьБезЗаказовИНакладных))
		|			ТОГДА ТоварыПоступления.Ссылка.Соглашение
		|		КОГДА &ВариантПриемкиТоваров В (ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.ПоДоговорамБезЗаказовИНакладных), ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.ПоДоговорамПослеЗаказовИлиНакладных), ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.ПоДоговорамПослеНакладных))
		|			ТОГДА ТоварыПоступления.Ссылка.Договор
		|		КОНЕЦ КАК Распоряжение,
		|	ТоварыПоступления.Номенклатура КАК Номенклатура,
		|	ТоварыПоступления.Характеристика КАК Характеристика,
		|	ТоварыПоступления.Серия КАК Серия,
		|	ТоварыПоступления.Склад КАК Склад,
		|	ТоварыПоступления.Назначение КАК Назначение,
		|	СУММА(ТоварыПоступления.Количество) КАК КоличествоПоступления
		|ПОМЕСТИТЬ втТоварыПоступления
		|ИЗ
		|	Документ.ПриобретениеТоваровУслуг.Товары КАК ТоварыПоступления
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ВариантПриемкиТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным)
		|				ТОГДА ТоварыПоступления.ЗаказПоставщику В (&МассивРаспоряжений)
		|			КОГДА &ВариантПриемкиТоваров В (ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.НеРазделенаПоНакладным), ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.НеРазделенаПоЗаказамИНакладным), ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.МожетПроисходитьБезЗаказовИНакладных))
		|				ТОГДА ТоварыПоступления.Ссылка.Соглашение = &Соглашение
		|			КОГДА &ВариантПриемкиТоваров В (ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.ПоДоговорамБезЗаказовИНакладных), ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.ПоДоговорамПослеЗаказовИлиНакладных), ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.ПоДоговорамПослеНакладных))
		|				ТОГДА ТоварыПоступления.Ссылка.Договор = &Договор
		|		КОНЕЦ
		|	И ТоварыПоступления.Ссылка <> &Ссылка
		|	И ТоварыПоступления.Ссылка.Проведен
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА &ВариантПриемкиТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным)
		|			ТОГДА ТоварыПоступления.ЗаказПоставщику
		|		КОГДА &ВариантПриемкиТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным)
		|			ТОГДА ТоварыПоступления.Ссылка
		|		КОГДА &ВариантПриемкиТоваров В (ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.НеРазделенаПоНакладным), ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.НеРазделенаПоЗаказамИНакладным), ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.МожетПроисходитьБезЗаказовИНакладных))
		|			ТОГДА ТоварыПоступления.Ссылка.Соглашение
		|		КОГДА &ВариантПриемкиТоваров В (ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.ПоДоговорамБезЗаказовИНакладных), ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.ПоДоговорамПослеЗаказовИлиНакладных), ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.ПоДоговорамПослеНакладных))
		|			ТОГДА ТоварыПоступления.Ссылка.Договор
		|		КОНЕЦ,
		|	ТоварыПоступления.Номенклатура,
		|	ТоварыПоступления.Характеристика,
		|	ТоварыПоступления.Серия,
		|	ТоварыПоступления.Склад,
		|	ТоварыПоступления.Назначение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
	ИначеЕсли ТипПоступления = Тип("ДокументСсылка.ПоступлениеТоваровНаСклад") Тогда
		
		ТекстЗапросаПоРаспоряжениям = 
		"ВЫБРАТЬ
		|	ТоварыПоступления.Ссылка.Распоряжение КАК Распоряжение,
		|	ТоварыПоступления.Номенклатура КАК Номенклатура,
		|	ТоварыПоступления.Характеристика КАК Характеристика,
		|	ТоварыПоступления.Серия КАК Серия,
		|	ТоварыПоступления.Ссылка.Склад КАК Склад,
		|	ТоварыПоступления.Назначение КАК Назначение,
		|	СУММА(ТоварыПоступления.Количество) КАК КоличествоПоступления,
		|	ТоварыПоступления.Ссылка.ИсправляемыйДокумент,
		|	ТоварыПоступления.Ссылка.СторнируемыйДокумент
		|ПОМЕСТИТЬ втТоварыПоступленияДоВычетаСторно
		|ИЗ
		|	Документ.ПоступлениеТоваровНаСклад.Товары КАК ТоварыПоступления
		|ГДЕ
		|	ТоварыПоступления.Ссылка <> &Ссылка
		|	И ТоварыПоступления.Ссылка.Проведен
		|	И ВЫБОР
		|		КОГДА &ВариантПриемкиТоваров В(ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным),
		|										ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным))
		|			ТОГДА ТоварыПоступления.Ссылка.Распоряжение В(&МассивРаспоряжений)
		|		КОГДА &ВариантПриемкиТоваров В (ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.ПоДоговорамПослеНакладных),
		|										ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.ПоДоговорамБезЗаказовИНакладных),
		|										ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.ПоДоговорамПослеЗаказовИлиНакладных))
		|			ТОГДА ТоварыПоступления.Ссылка.Распоряжение = &Договор
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|СГРУППИРОВАТЬ ПО
		|	ТоварыПоступления.Ссылка.Распоряжение,
		|	ТоварыПоступления.Номенклатура,
		|	ТоварыПоступления.Характеристика,
		|	ТоварыПоступления.Серия,
		|	ТоварыПоступления.Ссылка.Склад,
		|	ТоварыПоступления.Назначение,
		|	ТоварыПоступления.Ссылка.ИсправляемыйДокумент,
		|	ТоварыПоступления.Ссылка.СторнируемыйДокумент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыПоступления.Ссылка.Распоряжение КАК Распоряжение,
		|	ТоварыПоступления.Номенклатура КАК Номенклатура,
		|	ТоварыПоступления.Характеристика КАК Характеристика,
		|	ТоварыПоступления.Серия КАК Серия,
		|	ТоварыПоступления.Ссылка.Склад КАК Склад,
		|	ТоварыПоступления.Назначение КАК Назначение,
		|	-ТоварыПоступления.Количество КАК КоличествоПоступления
		|ПОМЕСТИТЬ втСторнированныеДокументы
		|ИЗ
		|	Документ.ПоступлениеТоваровНаСклад.Товары КАК ТоварыПоступления
		|ГДЕ
		|	ТоварыПоступления.Ссылка В
		|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			Таблица.ИсправляемыйДокумент
		|		ИЗ
		|			втТоварыПоступленияДоВычетаСторно КАК Таблица
		|
		|		ОБЪЕДИНИТЬ ВСЕ
		|
		|		ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			Таблица.СторнируемыйДокумент
		|		ИЗ
		|			втТоварыПоступленияДоВычетаСторно КАК Таблица)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НаборДанных.Распоряжение КАК Распоряжение,
		|	НаборДанных.Номенклатура КАК Номенклатура,
		|	НаборДанных.Характеристика КАК Характеристика,
		|	НаборДанных.Серия КАК Серия,
		|	НаборДанных.Склад КАК Склад,
		|	НаборДанных.Назначение КАК Назначение,
		|	СУММА(НаборДанных.КоличествоПоступления) КАК КоличествоПоступления
		|ПОМЕСТИТЬ втТоварыПоступления
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТоварыПоступления.Распоряжение КАК Распоряжение,
		|		ТоварыПоступления.Номенклатура КАК Номенклатура,
		|		ТоварыПоступления.Характеристика КАК Характеристика,
		|		ТоварыПоступления.Серия КАК Серия,
		|		ТоварыПоступления.Склад КАК Склад,
		|		ТоварыПоступления.Назначение КАК Назначение,
		|		ТоварыПоступления.КоличествоПоступления КАК КоличествоПоступления
		|	ИЗ
		|		втТоварыПоступленияДоВычетаСторно КАК ТоварыПоступления
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		ТоварыПоступления.Распоряжение КАК Распоряжение,
		|		ТоварыПоступления.Номенклатура КАК Номенклатура,
		|		ТоварыПоступления.Характеристика КАК Характеристика,
		|		ТоварыПоступления.Серия КАК Серия,
		|		ТоварыПоступления.Склад КАК Склад,
		|		ТоварыПоступления.Назначение КАК Назначение,
		|		ТоварыПоступления.КоличествоПоступления КАК КоличествоПоступления
		|	ИЗ
		|		втСторнированныеДокументы КАК ТоварыПоступления) КАК НаборДанных
		|СГРУППИРОВАТЬ ПО
		|	НаборДанных.Распоряжение,
		|	НаборДанных.Номенклатура,
		|	НаборДанных.Характеристика,
		|	НаборДанных.Серия,
		|	НаборДанных.Склад,
		|	НаборДанных.Назначение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
	ИначеЕсли ТипПоступления = Тип("ДокументСсылка.ПриемкаТоваровНаХранение") Тогда
		
		ТекстЗапросаПоРаспоряжениям = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА &ВариантПриемкиТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным)
		|			ТОГДА ТоварыПоступления.ЗаказПоставщику
		|		КОГДА &ВариантПриемкиТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным)
		|			ТОГДА ТоварыПоступления.Ссылка
		|		КОГДА &ВариантПриемкиТоваров В (ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.НеРазделенаПоНакладным), ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.НеРазделенаПоЗаказамИНакладным), ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.МожетПроисходитьБезЗаказовИНакладных))
		|			ТОГДА ТоварыПоступления.Ссылка.Соглашение
		|		КОГДА &ВариантПриемкиТоваров В (ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.ПоДоговорамБезЗаказовИНакладных), ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.ПоДоговорамПослеЗаказовИлиНакладных), ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.ПоДоговорамПослеНакладных))
		|			ТОГДА ТоварыПоступления.Ссылка.Договор
		|		КОНЕЦ КАК Распоряжение,
		|	ТоварыПоступления.Номенклатура КАК Номенклатура,
		|	ТоварыПоступления.Характеристика КАК Характеристика,
		|	ТоварыПоступления.Серия КАК Серия,
		|	ТоварыПоступления.Склад КАК Склад,
		|	ТоварыПоступления.Назначение,
		|	СУММА(ТоварыПоступления.Количество) КАК КоличествоПоступления
		|ПОМЕСТИТЬ втТоварыПоступления
		|ИЗ
		|	Документ.ПриемкаТоваровНаХранение.Товары КАК ТоварыПоступления
		|ГДЕ
		|	ТоварыПоступления.Ссылка.Проведен
		|	И ТоварыПоступления.Ссылка <> &Ссылка
		|	И ВЫБОР
		|		КОГДА &ВариантПриемкиТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным)
		|			ТОГДА ТоварыПоступления.ЗаказПоставщику В (&МассивРаспоряжений)
		|		КОГДА &ВариантПриемкиТоваров В (
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.НеРазделенаПоНакладным),
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.НеРазделенаПоЗаказамИНакладным),
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.МожетПроисходитьБезЗаказовИНакладных))
		|			ТОГДА ТоварыПоступления.Ссылка.Соглашение = &Соглашение
		|	КОНЕЦ
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА &ВариантПриемкиТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным)
		|			ТОГДА ТоварыПоступления.ЗаказПоставщику
		|		КОГДА &ВариантПриемкиТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным)
		|			ТОГДА ТоварыПоступления.Ссылка
		|		КОГДА &ВариантПриемкиТоваров В (ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.НеРазделенаПоНакладным), ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.НеРазделенаПоЗаказамИНакладным), ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.МожетПроисходитьБезЗаказовИНакладных))
		|			ТОГДА ТоварыПоступления.Ссылка.Соглашение
		|		КОГДА &ВариантПриемкиТоваров В (ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.ПоДоговорамБезЗаказовИНакладных), ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.ПоДоговорамПослеЗаказовИлиНакладных), ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.ПоДоговорамПослеНакладных))
		|			ТОГДА ТоварыПоступления.Ссылка.Договор
		|		КОНЕЦ,
		|	ТоварыПоступления.Номенклатура,
		|	ТоварыПоступления.Характеристика,
		|	ТоварыПоступления.Серия,
		|	ТоварыПоступления.Склад,
		|	ТоварыПоступления.Назначение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
	ИначеЕсли ТипПоступления = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
		
		ТекстЗапросаПоРаспоряжениям = 
		"ВЫБРАТЬ
		|	Поступление.Ссылка КАК Распоряжение,
		|	ВЫБОР
		|		КОГДА Поступление.Порча
		|			ТОГДА Поступление.НоменклатураОприходование
		|		ИНАЧЕ Поступление.Номенклатура
		|	КОНЕЦ КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА Поступление.Порча
		|			ТОГДА Поступление.ХарактеристикаОприходование
		|		ИНАЧЕ Поступление.Характеристика
		|	КОНЕЦ КАК Характеристика,
		|	Поступление.Серия КАК Серия,
		|	Поступление.Ссылка.Склад КАК Склад,
		|	Поступление.Назначение,
		|	СУММА(Поступление.Количество) КАК КоличествоПоступления
		|ПОМЕСТИТЬ втТоварыПоступления
		|ИЗ
		|	Документ.ВозвратТоваровОтКлиента.Товары КАК Поступление
		|ГДЕ
		|	Поступление.Ссылка.ЗаявкаНаВозвратТоваровОтКлиента В(&МассивРаспоряжений)
		|	И Поступление.Ссылка <> &Ссылка
		|	И Поступление.Ссылка.Проведен
		|
		|СГРУППИРОВАТЬ ПО
		|	Поступление.Ссылка,
		|	ВЫБОР
		|		КОГДА Поступление.Порча
		|			ТОГДА Поступление.НоменклатураОприходование
		|		ИНАЧЕ Поступление.Номенклатура
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА Поступление.Порча
		|			ТОГДА Поступление.ХарактеристикаОприходование
		|		ИНАЧЕ Поступление.Характеристика
		|	КОНЕЦ,
		|	Поступление.Серия,
		|	Поступление.Ссылка.Склад,
		|	Поступление.Назначение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
	КонецЕсли;
	
	
	
	ТекстЗапросаПоРаспоряжениям = ТекстЗапросаПоРаспоряжениям +
	"ВЫБРАТЬ
	|	ТоварыКПоступлению.ДокументПоступления КАК ДокументПоступления,
	|	ТоварыКПоступлению.Номенклатура КАК Номенклатура,
	|	ИСТИНА КАК ЭтоТовар,
	|	ТоварыКПоступлению.Характеристика КАК Характеристика,
	|	ТоварыКПоступлению.Серия КАК Серия,
	|	ТоварыКПоступлению.Склад КАК Склад,
	|	СУММА(ТоварыКПоступлению.КОформлениюПоступленийПоОрдерам) КАК Количество,
	|   ТоварыКПоступлению.Назначение КАК Назначение
	|ПОМЕСТИТЬ втТоварыКОформлениюПоступления
	|ИЗ
	|	РегистрНакопления.ТоварыКПоступлению КАК ТоварыКПоступлению
	|ГДЕ
	|	НЕ &ЗаполнитьПоПоступлениям
	|	И ТоварыКПоступлению.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ТоварыКПоступлению.ДокументПоступления В(&МассивРаспоряженийОтборДляРегистра)
	|	И ТоварыКПоступлению.Склад В(&Склад)
	|	И ТоварыКПоступлению.КОформлениюПоступленийПоОрдерам > 0
	|	И НЕ ТоварыКПоступлению.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКПоступлению.ДокументПоступления,
	|	ТоварыКПоступлению.Номенклатура,
	|	ТоварыКПоступлению.Характеристика,
	|	ТоварыКПоступлению.Серия,
	|	ТоварыКПоступлению.Склад,
	|	ТоварыКПоступлению.Назначение
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыКПоступлению.КОформлениюПоступленийПоОрдерам) > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыКПоступлению.ДокументПоступления КАК ДокументПоступления,
	|	ТоварыКПоступлению.Номенклатура КАК Номенклатура,
	|	ИСТИНА КАК ЭтоТовар,
	|	ТоварыКПоступлению.Характеристика КАК Характеристика,
	|	ТоварыКПоступлению.Серия КАК Серия,
	|	ТоварыКПоступлению.Склад КАК Склад,
	|	СУММА(ТоварыКПоступлению.КОформлениюПоступленийПоНакладным) КАК Количество,
	|	ТоварыКПоступлению.Назначение КАК Назначение
	|ИЗ
	|	РегистрНакопления.ТоварыКПоступлению КАК ТоварыКПоступлению
	|ГДЕ
	|	&ЗаполнитьПоПоступлениям
	|	И ТоварыКПоступлению.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И ТоварыКПоступлению.ДокументПоступления В(&МассивРаспоряженийОтборДляРегистра)
	|	И ТоварыКПоступлению.Склад В(&Склад)
	|	И НЕ ТоварыКПоступлению.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКПоступлению.ДокументПоступления,
	|	ТоварыКПоступлению.Номенклатура,
	|	ТоварыКПоступлению.Характеристика,
	|	ТоварыКПоступлению.Серия,
	|	ТоварыКПоступлению.Склад,
	|	ТоварыКПоступлению.Назначение
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыКПоступлению.КОформлениюПоступленийПоНакладным) > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыКПоступлению.ДокументПоступления КАК ДокументПоступления,
	|	ТоварыКПоступлению.Номенклатура КАК Номенклатура,
	|	ЛОЖЬ КАК ЭтоТовар,
	|	ТоварыКПоступлению.Характеристика КАК Характеристика,
	|	ТоварыКПоступлению.Серия КАК Серия,
	|	ТоварыКПоступлению.Склад КАК Склад,
	|	СУММА(ТоварыКПоступлению.КОформлениюПоступленийПоОрдерам) КАК Количество,
	|	ТоварыКПоступлению.Назначение КАК Назначение
	|ИЗ
	|	РегистрНакопления.ТоварыКПоступлению КАК ТоварыКПоступлению
	|ГДЕ
	|	НЕ &ЗаполнитьПоПоступлениям
	|	И ТоварыКПоступлению.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ТоварыКПоступлению.ДокументПоступления В(&МассивРаспоряженийОтборДляРегистра)
	|	И ТоварыКПоступлению.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|	И ТоварыКПоступлению.КОформлениюПоступленийПоОрдерам > 0
	|	И ТоварыКПоступлению.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКПоступлению.ДокументПоступления,
	|	ТоварыКПоступлению.Номенклатура,
	|	ТоварыКПоступлению.Характеристика,
	|	ТоварыКПоступлению.Серия,
	|	ТоварыКПоступлению.Склад,
	|	ТоварыКПоступлению.Назначение
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыКПоступлению.КОформлениюПоступленийПоОрдерам) > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыКПоступлению.ДокументПоступления КАК ДокументПоступления,
	|	ТоварыКПоступлению.Номенклатура КАК Номенклатура,
	|	ЛОЖЬ КАК ЭтоТовар,
	|	ТоварыКПоступлению.Характеристика КАК Характеристика,
	|	ТоварыКПоступлению.Серия КАК Серия,
	|	ТоварыКПоступлению.Склад КАК Склад,
	|	СУММА(ТоварыКПоступлению.КОформлениюПоступленийПоНакладным) КАК Количество,
	|	ТоварыКПоступлению.Назначение КАК Назначение
	|ИЗ
	|	РегистрНакопления.ТоварыКПоступлению КАК ТоварыКПоступлению
	|ГДЕ
	|	&ЗаполнитьПоПоступлениям
	|	И ТоварыКПоступлению.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И ТоварыКПоступлению.ДокументПоступления В(&МассивРаспоряженийОтборДляРегистра)
	|	И ТоварыКПоступлению.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|	И ТоварыКПоступлению.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКПоступлению.ДокументПоступления,
	|	ТоварыКПоступлению.Номенклатура,
	|	ТоварыКПоступлению.Характеристика,
	|	ТоварыКПоступлению.Серия,
	|	ТоварыКПоступлению.Склад,
	|	ТоварыКПоступлению.Назначение
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыКПоступлению.КОформлениюПоступленийПоНакладным) > 0
	|;
	|
	|ВЫБРАТЬ
	|	втТоварыКОформлениюПоступления.ДокументПоступления КАК Распоряжение,
	|	втТоварыКОформлениюПоступления.Номенклатура КАК Номенклатура,
	|	втТоварыКОформлениюПоступления.Характеристика КАК Характеристика,
	|	втТоварыКОформлениюПоступления.Серия КАК Серия,
	|	втТоварыКОформлениюПоступления.Склад КАК Склад,
	|	втТоварыКОформлениюПоступления.Назначение КАК Назначение,	
	|	ВЫБОР
	|		КОГДА втТоварыКОформлениюПоступления.Количество > ЕСТЬNULL(втТоварыПоступления.КоличествоПоступления, 0)
	|			ТОГДА втТоварыКОформлениюПоступления.Количество - ЕСТЬNULL(втТоварыПоступления.КоличествоПоступления, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Количество,
	|	ЛОЖЬ КАК НоменклатураДобавлена
	|ИЗ
	|	втТоварыКОформлениюПоступления КАК втТоварыКОформлениюПоступления
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТоварыПоступления КАК втТоварыПоступления
	|			ПО втТоварыКОформлениюПоступления.ДокументПоступления = втТоварыПоступления.Распоряжение
	|			И втТоварыКОформлениюПоступления.Номенклатура = втТоварыПоступления.Номенклатура
	|			И втТоварыКОформлениюПоступления.Характеристика = втТоварыПоступления.Характеристика
	|			И втТоварыКОформлениюПоступления.Серия = втТоварыПоступления.Серия
	|			И втТоварыКОформлениюПоступления.Склад = втТоварыПоступления.Склад
	|			И втТоварыКОформлениюПоступления.Назначение = втТоварыПоступления.Назначение
	|ГДЕ
	|	втТоварыКОформлениюПоступления.Количество - ЕСТЬNULL(втТоварыПоступления.КоличествоПоступления, 0) > 0
	|	И ((втТоварыКОформлениюПоступления.ЭтоТовар И втТоварыКОформлениюПоступления.Склад В(&Склад))
	|		ИЛИ (НЕ втТоварыКОформлениюПоступления.ЭтоТовар И втТоварыКОформлениюПоступления.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|ВЫБРАТЬ
	|	Товары.ЗаказПоставщику КАК ЗаказПоставщику,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия КАК Серия,
	|	Товары.Склад КАК Склад,
	|	Товары.Упаковка КАК Упаковка,
	|	Товары.Назначение КАК Назначение,	
	|	Товары.Количество КАК Количество
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.Номенклатура КАК Номенклатура
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТоварыКОформлениюПоступления КАК втТоварыКОформлениюПоступления
	|		ПО Товары.Номенклатура = втТоварыКОформлениюПоступления.Номенклатура
	|ГДЕ
	|	НЕ ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|		И втТоварыКОформлениюПоступления.Номенклатура ЕСТЬ NULL
	|
	|;
	|
	|ВЫБРАТЬ
	|	Товары.Упаковка КАК Упаковка,
	|	&ТекстЗапросаКоэффициентУпаковки КАК Коэффициент
	|ИЗ
	|	Товары КАК Товары
	|ГДЕ
	|	Товары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.Склад КАК Склад
	|ИЗ
	|	Товары КАК Товары
	|ГДЕ
	|	НЕ ВЫРАЗИТЬ(Склад КАК Справочник.Склады).ИспользоватьОрдернуюСхемуПриПоступлении
	|	ИЛИ &Дата < ВЫРАЗИТЬ(Склад КАК Справочник.Склады).ДатаНачалаОрдернойСхемыПриПоступлении";
	
	ТекстЗапросаПоРаспоряжениям = СтрЗаменить(ТекстЗапросаПоРаспоряжениям, 
		"&ТекстЗапросаКоэффициентУпаковки", 
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки("Товары.Упаковка", "Товары.Номенклатура"));
	
	Возврат ТекстЗапросаПоРаспоряжениям;
	
КонецФункции

Функция ТекстЗапросаПоНакладнойИлиСоглашению()
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|		ТоварыКОформлениюПоступленияОстатки.Номенклатура КАК Номенклатура,
		|		ТоварыКОформлениюПоступленияОстатки.Характеристика КАК Характеристика,
		|		ТоварыКОформлениюПоступленияОстатки.Серия КАК Серия,
		|		ТоварыКОформлениюПоступленияОстатки.Назначение КАК Назначение,
		|		ТоварыКОформлениюПоступленияОстатки.Склад КАК Склад,
		|		ВЫБОР
		|			КОГДА &ЗаполнитьПоПоступлениям = ИСТИНА ТОГДА
		|				-ТоварыКОформлениюПоступленияОстатки.КОформлениюПоступленийПоНакладнымОстаток
		|			ИНАЧЕ
		|				ТоварыКОформлениюПоступленияОстатки.КОформлениюПоступленийПоОрдерамОстаток
		|		КОНЕЦ КАК Количество
		|ПОМЕСТИТЬ втТоварыКОформлениюПоступления
		|	ИЗ
		|		РегистрНакопления.ТоварыКПоступлению.Остатки(
		|				,
		|				ДокументПоступления В (&МассивРаспоряженийОтборДляРегистра)) КАК ТоварыКОформлениюПоступленияОстатки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТоварыКОформлениюПоступления.Номенклатура,
		|		ТоварыКОформлениюПоступления.Характеристика,
		|		ТоварыКОформлениюПоступления.Серия,
		|		ТоварыКОформлениюПоступления.Назначение,
		|		ТоварыКОформлениюПоступления.Склад,
		|		ВЫБОР
		|			КОГДА &ЗаполнитьПоПоступлениям = ИСТИНА ТОГДА
		|				ТоварыКОформлениюПоступления.КОформлениюПоступленийПоНакладным
		|			ИНАЧЕ
		|				ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерам
		|		КОНЕЦ КАК Количество
		|	ИЗ
		|		РегистрНакопления.ТоварыКПоступлению КАК ТоварыКОформлениюПоступления
		|	ГДЕ
		|		ТоварыКОформлениюПоступления.Регистратор = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОстатков.Номенклатура,
		|	ТаблицаОстатков.Характеристика,
		|	ТаблицаОстатков.Серия,
		|	ТаблицаОстатков.Назначение,
		|	ТаблицаОстатков.Склад,
		|	СУММА(ТаблицаОстатков.Количество) КАК Количество,
		|	ЛОЖЬ КАК НоменклатураДобавлена
		|ИЗ
		|	втТоварыКОформлениюПоступления КАК ТаблицаОстатков
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаОстатков.Номенклатура,
		|	ТаблицаОстатков.Характеристика,
		|	ТаблицаОстатков.Серия,
		|	ТаблицаОстатков.Назначение,
		|	ТаблицаОстатков.Склад
		|
		|ИМЕЮЩИЕ
		|	СУММА(ТаблицаОстатков.Количество) > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.Серия КАК Серия,
		|	Товары.Назначение КАК Назначение,
		|	Товары.Склад КАК Склад,
		|	Товары.Упаковка КАК Упаковка,
		|	Товары.Количество КАК Количество
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	&Товары КАК Товары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Товары.Номенклатура КАК Номенклатура
		|ИЗ
		|	Товары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ втТоварыКОформлениюПоступления КАК втТоварыКОформлениюПоступления
		|	ПО Товары.Номенклатура = втТоварыКОформлениюПоступления.Номенклатура
		|ГДЕ
		|	НЕ ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|		И втТоварыКОформлениюПоступления.Номенклатура ЕСТЬ NULL
		|	
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.Упаковка КАК Упаковка,
		|	ВЫРАЗИТЬ(Товары.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).Числитель /
		|	ВЫРАЗИТЬ(Товары.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).Знаменатель КАК Коэффициент
		|ИЗ
		|	Товары КАК Товары
		|ГДЕ
		|	Товары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Товары.Склад КАК Склад
		|ИЗ
		|	Товары КАК Товары
		|ГДЕ
		|	(НЕ ВЫРАЗИТЬ(Товары.Склад КАК Справочник.Склады).ИспользоватьОрдернуюСхемуПриПоступлении
		|			ИЛИ &Дата < ВЫРАЗИТЬ(Товары.Склад КАК Справочник.Склады).ДатаНачалаОрдернойСхемыПриПоступлении)";
		
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура СкорректироватьСписокВыбораХозяйственнойОперацииПоступления(Форма) Экспорт
	
	Если Не Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьКомиссиюПриЗакупках") Тогда
		
		ЭлементСписка = Форма.Элементы.ХозяйственнаяОперация.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ПриемНаКомиссию);
		Если ЭлементСписка <> Неопределено Тогда
			Форма.Элементы.ХозяйственнаяОперация.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьУправленческуюОрганизацию") Тогда
		
		ЭлементСписка = Форма.Элементы.ХозяйственнаяОперация.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет);
		Если ЭлементСписка <> Неопределено Тогда
			Форма.Элементы.ХозяйственнаяОперация.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьИмпортныеЗакупки") Тогда
		
		ЭлементСписка = Форма.Элементы.ХозяйственнаяОперация.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту);
		Если ЭлементСписка <> Неопределено Тогда
			Форма.Элементы.ХозяйственнаяОперация.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьВвозТоваровИзТаможенногоСоюза") Тогда
		
		ЭлементСписка = Форма.Элементы.ХозяйственнаяОперация.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС);
		Если ЭлементСписка <> Неопределено Тогда
			Форма.Элементы.ХозяйственнаяОперация.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#Область ПроцедурыФормированияВременныхТаблиц

// Формирует запрос к шапке документа и помещает во временную таблицу
//
// Параметры:
// ТекстЗапроса     - Строка - текстовая строка, к которой необходимо добавить текст запроса
// ПараметрыЗапроса - Структура - структура, содержащая параметры запроса
// ДокументЗакупки  - ДокументОбъект - объект, который необходимо проверить.
//
Процедура СформироватьЗапросВременнаяТаблицаШапкаДокументаЗакупки(ТекстЗапроса,
	                                                              ПараметрыЗапроса,
	                                                              Знач ДокументЗакупки)

	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ДокументЗакупки.Партнер                                 КАК Партнер,
		|	ДокументЗакупки.Контрагент                              КАК Контрагент,
		|	ДокументЗакупки.Валюта                                  КАК Валюта,
		|	ДокументЗакупки.ВалютаВзаиморасчетов                    КАК ВалютаВзаиморасчетов,
		|	ДокументЗакупки.ЦенаВключаетНДС                         КАК ЦенаВключаетНДС,
		|	ДокументЗакупки.НалогообложениеНДС                      КАК НалогообложениеНДС,
		|	ДокументЗакупки.ХозяйственнаяОперация                   КАК ХозяйственнаяОперация,
		|	ДокументЗакупки.Соглашение                              КАК Соглашение,
		|	ДокументЗакупки.Дата                                    КАК Дата,
		|	ДокументЗакупки.НеОтгружатьЧастями                      КАК НеОтгружатьЧастями,
		|	ДокументЗакупки.ДатаСогласования                        КАК ДатаСогласования,
		|	ДокументЗакупки.ДатаОтгрузки                            КАК ДатаОтгрузки,
		|	ДокументЗакупки.ЭтоЗаказ                                КАК ЭтоЗаказ,
		|	ДокументЗакупки.ПорядокРасчетов                         КАК ПорядокРасчетов,
		|	ДокументЗакупки.НакладнаяПоЗаказам                      КАК НакладнаяПоЗаказам,
		|	ДокументЗакупки.ПоступлениеПоЗаказам                    КАК ПоступлениеПоЗаказам,
		|	ДокументЗакупки.ПоЗаказам                               КАК ПоЗаказам,
		|	ДокументЗакупки.Организация                             КАК Организация,
		|	ДокументЗакупки.Склад                                   КАК Склад,
		|	ДокументЗакупки.ФормаОплаты                             КАК ФормаОплаты,
		|	ДокументЗакупки.СуммаДокумента                          КАК СуммаДокумента,
		|	ДокументЗакупки.РассчитыватьДатуВозвратаТарыПоКалендарю КАК РассчитыватьДатуВозвратаТарыПоКалендарю,
		|	ДокументЗакупки.КалендарьВозвратаТары                   КАК КалендарьВозвратаТары,
		|	ДокументЗакупки.СрокВозвратаМногооборотнойТары          КАК СрокВозвратаМногооборотнойТары,
		|	ДокументЗакупки.Договор                                 КАК Договор
		|ПОМЕСТИТЬ
		|	ВременнаяТаблицаДокументЗакупки
		|ИЗ
		|	&ДокументЗакупки КАК ДокументЗакупки
		|;
		|";
	
	// Сформируем необходимые колонки таблицы шапки документа закупки
	
	ТипВалюта   = Новый ОписаниеТипов("СправочникСсылка.Валюты");
	ТипДата     = Новый ОписаниеТипов("Дата");
	ТипБулево   = Новый ОписаниеТипов("Булево");
	ТипЧисло    = Новый ОписаниеТипов("Число");
	ТипБулевоНеопределено = Новый ОписаниеТипов("Булево, Неопределено");
	
	ТаблицаДокумента = Новый ТаблицаЗначений();
	
	ТаблицаДокумента.Колонки.Добавить("Партнер",                              Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	ТаблицаДокумента.Колонки.Добавить("Контрагент",                           Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаДокумента.Колонки.Добавить("Валюта",                               ТипВалюта);
	ТаблицаДокумента.Колонки.Добавить("ВалютаВзаиморасчетов",                 ТипВалюта);
	ТаблицаДокумента.Колонки.Добавить("ЦенаВключаетНДС",                      ТипБулевоНеопределено);
	ТаблицаДокумента.Колонки.Добавить("НалогообложениеНДС",                   Новый ОписаниеТипов("ПеречислениеСсылка.ТипыНалогообложенияНДС"));
	ТаблицаДокумента.Колонки.Добавить("Дата",                                 ТипДата);
	ТаблицаДокумента.Колонки.Добавить("ДатаОтгрузки",                         ТипДата);
	ТаблицаДокумента.Колонки.Добавить("ДатаСогласования",                     ТипДата);
	ТаблицаДокумента.Колонки.Добавить("НеОтгружатьЧастями",                   ТипБулево);
	ТаблицаДокумента.Колонки.Добавить("ЭтоЗаказ",                             ТипБулево);
	ТаблицаДокумента.Колонки.Добавить("НакладнаяПоЗаказам",                   ТипБулево);
	ТаблицаДокумента.Колонки.Добавить("ПоступлениеПоЗаказам",                 ТипБулево);
	ТаблицаДокумента.Колонки.Добавить("ПоЗаказам",                            ТипБулево);
	ТаблицаДокумента.Колонки.Добавить("ПорядокРасчетов",                      Новый ОписаниеТипов("ПеречислениеСсылка.ПорядокРасчетов"));
	ТаблицаДокумента.Колонки.Добавить("Организация",                          Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаДокумента.Колонки.Добавить("Склад",                                Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаДокумента.Колонки.Добавить("ФормаОплаты",                          Новый ОписаниеТипов("ПеречислениеСсылка.ФормыОплаты"));
	ТаблицаДокумента.Колонки.Добавить("СуммаДокумента",                       Новый ОписаниеТипов("Число"));
	ТаблицаДокумента.Колонки.Добавить("Соглашение",                           Новый ОписаниеТипов("СправочникСсылка.СоглашенияСПоставщиками"));
	ТаблицаДокумента.Колонки.Добавить("ХозяйственнаяОперация",                Новый ОписаниеТипов("ПеречислениеСсылка.ХозяйственныеОперации"));
	ТаблицаДокумента.Колонки.Добавить("РассчитыватьДатуВозвратаТарыПоКалендарю", ТипБулево);
	ТаблицаДокумента.Колонки.Добавить("КалендарьВозвратаТары",                Новый ОписаниеТипов("СправочникСсылка.ПроизводственныеКалендари"));
	ТаблицаДокумента.Колонки.Добавить("СрокВозвратаМногооборотнойТары",       ТипЧисло);
	ТаблицаДокумента.Колонки.Добавить("Договор",                              Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	
	// Добавим строку и заполним значениями из шапки документа
	
	НоваяСтрока = ТаблицаДокумента.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДокументЗакупки);
	
	НоваяСтрока.НакладнаяПоЗаказам = НоваяСтрока.ПоступлениеПоЗаказам 
			ИЛИ НоваяСтрока.ПоЗаказам;
	
	
	НоваяСтрока.ЭтоЗаказ = ТипЗнч(ДокументЗакупки.Ссылка) = Тип("ДокументСсылка.ЗаказПоставщику")
	;
	
	ПараметрыЗапроса.Вставить("ДокументЗакупки", ТаблицаДокумента);

КонецПроцедуры

// Формирует запрос к тч Товары документа и помещает во временную таблицу
//
// Параметры:
// ТекстЗапроса           -Строка - текстовая строка, к которой необходимо добавить текст запроса
// ПараметрыЗапроса       - Структура - структура, содержащая параметры запроса
// ДокументЗакупки        - ДокументОбъект - объект, который необходимо проверить
// ИмяТаблицы             - Строка - имя таблицы, к которой будет сформирован запрос.
//
Процедура СформироватьЗапросВременнаяТаблицаТоварыДокументаЗакупки(ТекстЗапроса,
	                                                               ПараметрыЗапроса,
	                                                               ДокументЗакупки,
	                                                               ИмяТаблицы)
	
	ПредставлениеТабличнойЧасти = НСтр("ru = 'Товары'");
	ИмяТабличнойЧасти = "Товары";
	
	Если ИмяТаблицы = "Документ.ЗаказПоставщику" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	&ПредставлениеТабличнойЧасти  КАК ПредставлениеТабличнойЧасти,
			|	&ИмяТабличнойЧасти            КАК ИмяТабличнойЧасти,
			|	Товары.НомерСтроки            КАК НомерСтроки,
			|	Товары.НоменклатураПартнера   КАК НоменклатураКонтрагента,
			|	Товары.Номенклатура           КАК Номенклатура,
			|	Товары.Характеристика         КАК Характеристика,
			|	Товары.Цена                   КАК Цена,
			|	Товары.Сумма                  КАК Сумма,
			|	Товары.СуммаНДС               КАК СуммаНДС,
			|	Товары.ВидЦеныПоставщика      КАК ВидЦеныПоставщика,
			|	Товары.Упаковка               КАК Упаковка,
			|	Товары.СтатьяРасходов         КАК СтатьяРасходов,
			|	Товары.СписатьНаРасходы       КАК СписатьНаРасходы,
			|	Товары.СтавкаНДС              КАК СтавкаНДС,
			|	Товары.ПроцентРучнойСкидки    КАК ПроцентРучнойСкидки,
			|	Товары.Склад                  КАК Склад,
			|	Товары.Отменено               КАК Отменено,
			|	Товары.ДатаПоступления        КАК ДатаПоступления,
			|	Товары.Цена - Товары.Цена * Товары.ПроцентРучнойСкидки / 100 КАК ЦенаСоСкидкой
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаТовары
			|ИЗ
			|	&Товары КАК Товары
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	Характеристика
			|;
			|";
			
		ИменаКолонок = "НомерСтроки,
			|Номенклатура,
			|Характеристика,
			|НоменклатураПартнера,
			|Цена,
			|Сумма,
			|СуммаНДС,
			|ВидЦеныПоставщика,
			|Упаковка,
			|СтатьяРасходов,
			|СписатьНаРасходы,
			|СтавкаНДС,
			|ПроцентРучнойСкидки,
			|Склад,
			|Отменено,
			|ДатаПоступления";
		
	ИначеЕсли ИмяТаблицы = "Документ.ПриобретениеТоваровУслуг" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	&ПредставлениеТабличнойЧасти  КАК ПредставлениеТабличнойЧасти,
			|	&ИмяТабличнойЧасти            КАК ИмяТабличнойЧасти,
			|	Товары.НомерСтроки            КАК НомерСтроки,
			|	Товары.НоменклатураПартнера   КАК НоменклатураКонтрагента,
			|	Товары.Номенклатура           КАК Номенклатура,
			|	Товары.Характеристика         КАК Характеристика,
			|	Товары.Цена                   КАК Цена,
			|	Товары.Сумма                  КАК Сумма,
			|	Товары.СуммаНДС               КАК СуммаНДС,
			|	Товары.ВидЦеныПоставщика      КАК ВидЦеныПоставщика,
			|	Товары.Упаковка               КАК Упаковка,
			|	Товары.СтатьяРасходов         КАК СтатьяРасходов,
			|	Товары.СписатьНаРасходы       КАК СписатьНаРасходы,
			|	Товары.СтавкаНДС              КАК СтавкаНДС,
			|	Товары.ПроцентРучнойСкидки    КАК ПроцентРучнойСкидки,
			|	Товары.Склад                  КАК Склад,
			|	Товары.Цена - Товары.Цена * Товары.ПроцентРучнойСкидки / 100 КАК ЦенаСоСкидкой
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаТовары
			|ИЗ
			|	&Товары КАК Товары
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	Характеристика
			|;
			|";
			
		ИменаКолонок = "НомерСтроки,
			|Номенклатура,
			|Характеристика,
			|НоменклатураПартнера,
			|Цена,
			|Сумма,
			|СуммаНДС,
			|ВидЦеныПоставщика,
			|Упаковка,
			|СтатьяРасходов,
			|СписатьНаРасходы,
			|СтавкаНДС,
			|ПроцентРучнойСкидки,
			|Склад";
			
	ИначеЕсли ИмяТаблицы = "Документ.ПередачаТоваровМеждуОрганизациями" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	&ПредставлениеТабличнойЧасти  КАК ПредставлениеТабличнойЧасти,
			|	&ИмяТабличнойЧасти            КАК ИмяТабличнойЧасти,
			|	Товары.НомерСтроки            КАК НомерСтроки,
			|	Товары.СписатьНаРасходы       КАК СписатьНаРасходы,
			|	Товары.Номенклатура           КАК Номенклатура
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаТовары
			|ИЗ
			|	&Товары КАК Товары
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура
			|;
			|";
			
		ИменаКолонок = "НомерСтроки,
		|СписатьНаРасходы,
		|Номенклатура";
		
	ИначеЕсли ИмяТаблицы = "Документ.АктОРасхожденияхПослеПриемки" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	&ПредставлениеТабличнойЧасти  КАК ПредставлениеТабличнойЧасти,
			|	&ИмяТабличнойЧасти            КАК ИмяТабличнойЧасти,
			|	Товары.НомерСтроки            КАК НомерСтроки,
			|	Товары.НоменклатураПартнера   КАК НоменклатураКонтрагента,
			|	Товары.Номенклатура           КАК Номенклатура,
			|	Товары.Характеристика         КАК Характеристика,
			|	Товары.Склад                  КАК Склад,
			|	Товары.СписатьНаРасходы       КАК СписатьНаРасходы,
			|	Товары.Упаковка               КАК Упаковка
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаТовары
			|ИЗ
			|	&Товары КАК Товары
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	Характеристика
			|;
			|";
			
		ИменаКолонок = "НомерСтроки,
			|Номенклатура,
			|Характеристика,
			|НоменклатураПартнера,
			|Склад,
			|СписатьНаРасходы,
			|Упаковка";
			
		
	ИначеЕсли ИмяТаблицы = "Документ.ДоверенностьВыданная" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	&ПредставлениеТабличнойЧасти  КАК ПредставлениеТабличнойЧасти,
			|	&ИмяТабличнойЧасти            КАК ИмяТабличнойЧасти,
			|	Товары.НомерСтроки            КАК НомерСтроки,
			|	Товары.НоменклатураПартнера   КАК НоменклатураКонтрагента,
			|	Товары.Номенклатура           КАК Номенклатура,
			|	Товары.Характеристика         КАК Характеристика,
			|	Товары.Упаковка               КАК Упаковка
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаТовары
			|ИЗ
			|	&Товары КАК Товары
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	Характеристика
			|;
			|";
			
		ИменаКолонок = "НомерСтроки,
			|Номенклатура,
			|Характеристика,
			|НоменклатураПартнера,
			|Упаковка";
			
	ИначеЕсли ИмяТаблицы = "Документ.ВыкупВозвратнойТарыУПоставщика" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	&ПредставлениеТабличнойЧасти  КАК ПредставлениеТабличнойЧасти,
			|	&ИмяТабличнойЧасти            КАК ИмяТабличнойЧасти,
			|	Товары.НомерСтроки            КАК НомерСтроки,
			|	Товары.НоменклатураПартнера   КАК НоменклатураКонтрагента,
			|	Товары.Номенклатура           КАК Номенклатура,
			|	Товары.Характеристика         КАК Характеристика,
			|	Товары.Упаковка               КАК Упаковка
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаТовары
			|ИЗ
			|	&Товары КАК Товары
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	Характеристика
			|;
			|";
			
		ИменаКолонок = "НомерСтроки,
			|Номенклатура,
			|Характеристика,
			|НоменклатураПартнера,
			|Упаковка";
		
	ИначеЕсли ИмяТаблицы = "Документ.КорректировкаПриобретения" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	&ПредставлениеТабличнойЧасти  КАК ПредставлениеТабличнойЧасти,
			|	&ИмяТабличнойЧасти            КАК ИмяТабличнойЧасти,
			|	Товары.НомерСтроки            КАК НомерСтроки,
			|	Товары.НоменклатураПартнера   КАК НоменклатураКонтрагента,
			|	Товары.Номенклатура           КАК Номенклатура,
			|	Товары.Характеристика         КАК Характеристика,
			|	Товары.Цена                   КАК Цена,
			|	Товары.Сумма                  КАК Сумма,
			|	Товары.СуммаНДС               КАК СуммаНДС,
			|	Товары.Упаковка               КАК Упаковка,
			|	Товары.СтатьяРасходов         КАК СтатьяРасходов,
			|	Товары.СписатьНаРасходы       КАК СписатьНаРасходы,
			|	Товары.СтавкаНДС              КАК СтавкаНДС,
			|	Товары.Склад                  КАК Склад
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаТовары
			|ИЗ
			|	&Товары КАК Товары
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	Характеристика
			|;
			|";
			
		ИменаКолонок = "НомерСтроки,
			|Номенклатура,
			|Характеристика,
			|НоменклатураПартнера,
			|Цена,
			|Сумма,
			|СуммаНДС,
			|Упаковка,
			|СтатьяРасходов,
			|СписатьНаРасходы,
			|СтавкаНДС,
			|Склад";
		
	ИначеЕсли ИмяТаблицы = "Документ.ВозвратТоваровПоставщику" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	&ПредставлениеТабличнойЧасти  КАК ПредставлениеТабличнойЧасти,
			|	&ИмяТабличнойЧасти            КАК ИмяТабличнойЧасти,
			|	Товары.НомерСтроки            КАК НомерСтроки,
			|	Товары.Номенклатура           КАК Номенклатура,
			|	Товары.Назначение             КАК Назначение,
			|	Товары.Характеристика         КАК Характеристика,
			|	Товары.Цена                   КАК Цена,
			|	Товары.СуммаНДС               КАК СуммаНДС,
			|	Товары.СтавкаНДС              КАК СтавкаНДС,
			|	Товары.Сумма                  КАК Сумма,
			|	Товары.Упаковка               КАК Упаковка
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаТовары
			|ИЗ
			|	&Товары КАК Товары
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	Характеристика
			|;
			|";
			
		ИменаКолонок = "НомерСтроки,
			|Номенклатура,
			|Назначение,
			|Характеристика,
			|Цена,
			|СуммаНДС,
			|СтавкаНДС,
			|Сумма,
			|Упаковка";
		
	ИначеЕсли ИмяТаблицы = "Документ.ОтгрузкаТоваровСХранения" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	&ПредставлениеТабличнойЧасти  КАК ПредставлениеТабличнойЧасти,
			|	&ИмяТабличнойЧасти            КАК ИмяТабличнойЧасти,
			|	Товары.НомерСтроки            КАК НомерСтроки,
			|	Товары.Номенклатура           КАК Номенклатура,
			|	Товары.НоменклатураПартнера   КАК НоменклатураКонтрагента,
			|	Товары.Характеристика         КАК Характеристика,
			|	Товары.Назначение             КАК Назначение,
			|	Товары.ЗаказКлиента           КАК ЗаказКлиента,
			|	ЛОЖЬ					      КАК СписатьНаРасходы,
			|	Товары.Цена                   КАК Цена,
			|	Товары.Сумма                  КАК Сумма,
			|	0                             КАК СуммаНДС,
			|	ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка) КАК СтавкаНДС,
			|	Товары.Склад                  КАК Склад,
			|	Товары.Упаковка               КАК Упаковка
			|
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаТовары
			|ИЗ
			|	&Товары КАК Товары
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	Характеристика
			|;
			|";
			
		ИменаКолонок = "НомерСтроки,
			|Номенклатура,
			|НоменклатураПартнера,
			|Характеристика,
			|Назначение,
			|ЗаказКлиента,
			|Цена,
			|Сумма,
			|Склад,
			|Упаковка";
		
	ИначеЕсли ИмяТаблицы = "Документ.ПриемкаТоваровНаХранение" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	&ПредставлениеТабличнойЧасти  КАК ПредставлениеТабличнойЧасти,
			|	&ИмяТабличнойЧасти            КАК ИмяТабличнойЧасти,
			|	Товары.НомерСтроки            КАК НомерСтроки,
			|	Товары.НоменклатураПартнера   КАК НоменклатураКонтрагента,
			|	Товары.Номенклатура           КАК Номенклатура,
			|	Товары.Характеристика         КАК Характеристика,
			|	ЕСТЬNULL(&ВидЦеныПоставщика, ЗНАЧЕНИЕ(Справочник.ВидыЦенПоставщиков.ПустаяСсылка)) КАК ВидЦеныПоставщика,
			|	ЛОЖЬ					      КАК СписатьНаРасходы,
			|	Товары.Цена                   КАК Цена,
			|	Товары.Цена                   КАК ЦенаСоСкидкой,
			|	Товары.Сумма                  КАК Сумма,
			|	Товары.Упаковка               КАК Упаковка,
			|	Товары.Склад                  КАК Склад
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаТовары
			|ИЗ
			|	&Товары КАК Товары
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	Характеристика
			|;
			|";
			
		ИменаКолонок = "НомерСтроки,
			|Номенклатура,
			|Характеристика,
			|НоменклатураПартнера,
			|Цена,
			|Сумма,
			|Упаковка,
			|Склад";
		
		ПараметрыЗапроса.Вставить("ВидЦеныПоставщика", ДокументЗакупки.ВидЦеныПоставщика);

	ИначеЕсли ИмяТаблицы = "Документ.ВыкупПринятыхНаХранениеТоваров" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	&ПредставлениеТабличнойЧасти  КАК ПредставлениеТабличнойЧасти,
			|	&ИмяТабличнойЧасти            КАК ИмяТабличнойЧасти,
			|	Товары.НомерСтроки            КАК НомерСтроки,
			|	Товары.Номенклатура           КАК Номенклатура,
			|	Товары.НоменклатураПартнера   КАК НоменклатураКонтрагента,
			|	Товары.Характеристика         КАК Характеристика,
			|	Товары.Упаковка               КАК Упаковка,
			|	Товары.Цена                   КАК Цена,
			|	Товары.СтавкаНДС              КАК СтавкаНДС,
			|	Товары.Сумма                  КАК Сумма,
			|	Товары.СуммаНДС               КАК СуммаНДС,
			|	Товары.Склад                  КАК Склад,
			|	Товары.Подразделение          КАК Подразделение,
			|	Товары.Договор                КАК Договор
			|
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаТовары
			|ИЗ
			|	&Товары КАК Товары
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	Характеристика
			|;
			|";
			
		ИменаКолонок = "НомерСтроки,
			|Номенклатура,
			|НоменклатураПартнера,
			|Характеристика,
			|Упаковка,
			|Цена,
			|СтавкаНДС,
			|СуммаНДС,
			|Сумма,
			|Склад,
			|Подразделение,
			|Договор";
			
	
	ИначеЕсли ИмяТаблицы = "Документ.ОтчетОСписанииТоваровСХранения" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	&ПредставлениеТабличнойЧасти  КАК ПредставлениеТабличнойЧасти,
			|	&ИмяТабличнойЧасти            КАК ИмяТабличнойЧасти,
			|	Товары.НомерСтроки            КАК НомерСтроки,
			|	Товары.Номенклатура           КАК Номенклатура,
			|	Товары.НоменклатураПартнера   КАК НоменклатураКонтрагента,
			|	Товары.Характеристика         КАК Характеристика,
			|	Товары.Упаковка               КАК Упаковка,
			|	Товары.Цена                   КАК Цена,
			|	Товары.Сумма                  КАК Сумма,
			|	Товары.Склад                  КАК Склад,
			|	Товары.Подразделение          КАК Подразделение,
			|	Товары.Договор                КАК Договор
			|
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаТовары
			|ИЗ
			|	&Товары КАК Товары
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	Характеристика
			|;
			|";
			
		ИменаКолонок = "НомерСтроки,
			|Номенклатура,
			|НоменклатураПартнера,
			|Характеристика,
			|Упаковка,
			|Цена,
			|Сумма,
			|Склад,
			|Подразделение,
			|Договор";
			
	
	КонецЕсли;
	
	ПараметрыЗапроса.Вставить("Товары", ДокументЗакупки[ИмяТабличнойЧасти].Выгрузить(,ИменаКолонок));
	ПараметрыЗапроса.Вставить("ИмяТабличнойЧасти", ИмяТабличнойЧасти);
	ПараметрыЗапроса.Вставить("ПредставлениеТабличнойЧасти", ПредставлениеТабличнойЧасти);
	
КонецПроцедуры

// Формирует запрос к курсам валют на дату документа и помещает во временную таблицу.
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса.
//
Процедура СформироватьЗапросВременнаяТаблицаКурсыВалют(ТекстЗапроса)

	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ
	|	ОтносительныеКурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	ОтносительныеКурсыВалютСрезПоследних.КурсЧислитель КАК КурсЧислитель,
	|	ОтносительныеКурсыВалютСрезПоследних.КурсЗнаменатель КАК КурсЗнаменатель
	|ПОМЕСТИТЬ ВременнаяТаблицаКурсыВалют
	|ИЗ
	|	РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата, БазоваяВалюта = &БазоваяВалюта) КАК
	|		ОтносительныеКурсыВалютСрезПоследних
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта
	|;
	|";

КонецПроцедуры

// Формирует запрос к тч ЭтапыОплаты документа и помещает во временную таблицу
//
// Параметры:
//		ТекстЗапроса     - Строка - текстовая строка, к которой необходимо добавить текст запроса
//		ПараметрыЗапроса - Структура - структура, содержащая параметры запроса
//		ДокументЗакупки  - ДокументОбъект, ДокументСсылка - документ, к которому необходимо сформировать запрос
//		ПоСсылке         - Булево - флаг, если Истина проверка осуществляется по ссылке на объект
//		ИмяТаблицы       - Строка - имя таблицы документа, к которой необходимо сформировать запрос.
//
Процедура СформироватьЗапросВременнаяТаблицаЭтапыОплаты(ТекстЗапроса, ПараметрыЗапроса, ДокументЗакупки, ПоСсылке = Ложь, ИмяТаблицы = "")

	Если ПоСсылке Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	ЭтапыГрафикаОплаты.НомерСтроки     КАК НомерСтроки,
			|	ЭтапыГрафикаОплаты.ВариантОплаты   КАК ВариантОплаты,
			|	ЭтапыГрафикаОплаты.ВариантОтсчета  КАК ВариантОтсчета,   
			|	ЭтапыГрафикаОплаты.Сдвиг           КАК Сдвиг,
			|	ЭтапыГрафикаОплаты.ДатаПлатежа     КАК ДатаПлатежа,
			|	ЭтапыГрафикаОплаты.ПроцентПлатежа  КАК ПроцентПлатежа,
			|	ЭтапыГрафикаОплаты.ПроцентПлатежа  КАК ПроцентЗалогаЗаТару
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаЭтапыГрафикаОплаты
			|ИЗ
			|	&ИмяТаблицыЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
			|ГДЕ
			|	ЭтапыГрафикаОплаты.Ссылка = &ДокументЗакупки
			|ИНДЕКСИРОВАТЬ ПО
			|	НомерСтроки
			|;
			|";
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяТаблицыЭтапыГрафикаОплаты", ИмяТаблицы + ".ЭтапыГрафикаОплаты");
			ПараметрыЗапроса.Вставить("ДокументЗакупки", ДокументЗакупки);
		
	Иначе
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	ЭтапыГрафикаОплаты.НомерСтроки     КАК НомерСтроки,
			|	ЭтапыГрафикаОплаты.ВариантОплаты   КАК ВариантОплаты,
			|	ЭтапыГрафикаОплаты.ВариантОтсчета  КАК ВариантОтсчета,
			|	ЭтапыГрафикаОплаты.Сдвиг           КАК Сдвиг,
			|	ЭтапыГрафикаОплаты.ДатаПлатежа     КАК ДатаПлатежа,
			|	ЭтапыГрафикаОплаты.ПроцентПлатежа  КАК ПроцентПлатежа,
			|	ЭтапыГрафикаОплаты.ПроцентПлатежа  КАК ПроцентЗалогаЗаТару
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаЭтапыГрафикаОплаты
			|ИЗ
			|	&ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
			|;
			|";
	
		ПараметрыЗапроса.Вставить("ЭтапыГрафикаОплаты", ДокументЗакупки.ЭтапыГрафикаОплаты.Выгрузить(, "НомерСтроки,ДатаПлатежа,ВариантОплаты,ВариантОтсчета,Сдвиг,ПроцентПлатежа"));
		
	КонецЕсли;
		
КонецПроцедуры

// Формирует запрос по элементам справочника "Склады" и помещает во временную таблицу
// К корректным складам относятся:
// 		- Склад, равный складу соглашения из временной таблицы по документу
// 		- Склады, входящие в иерархию склада соглашения из временной таблицы по документу.
//
Процедура СформироватьЗапросВременнаяТаблицаСкладыКорректныеПоСоглашению(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ
	|	Склады.Ссылка КАК Склад
	|ПОМЕСТИТЬ СкладыКорректныеПоСоглашению
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	ВременнаяТаблицаДокументЗакупки КАК ВременнаяТаблицаДокумента
	|ПО
	|	ИСТИНА
	|ГДЕ
	|	ВременнаяТаблицаДокумента.Соглашение.Склад ЕСТЬ НЕ NULL
	|	И ВременнаяТаблицаДокумента.Соглашение.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|	И Склады.Ссылка В ИЕРАРХИИ
	|			(ВЫБРАТЬ
	|				ВременнаяТаблицаДокумента.Соглашение.Склад
	|			ИЗ
	|				ВременнаяТаблицаДокументЗакупки КАК ВременнаяТаблицаДокумента)
	|;
	|";
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыФормированияЗапросовПроверкиКорректностиЗаполненияДокументов

// Формирует текст запроса для проверки наличия услуг и работ в документе закупки
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса.
//
Процедура СформироватьЗапросНаличиеУслугИРаботВДокументеЗакупки(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ДокументТовары.НомерСтроки                  КАК НомерСтроки,
		|	ДокументТовары.Номенклатура                 КАК Номенклатура,
		|	ДокументТовары.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ДокументТовары
		|ГДЕ
		|	ДокументТовары.Номенклатура.ТипНоменклатуры НЕ В
		|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки ВОЗР
		|;
		|";
	
КонецПроцедуры

// Формирует текст запроса для проверки наличия работ в документе закупки
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса.
//
Процедура СформироватьЗапросНаличиеРаботВДокументеЗакупки(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ДокументТовары.НомерСтроки                  КАК НомерСтроки,
		|	ДокументТовары.Номенклатура                 КАК Номенклатура,
		|	ДокументТовары.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ДокументТовары
		|ГДЕ
		|	ДокументТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки ВОЗР
		|;
		|";
	
КонецПроцедуры

// Формирует текст запроса для проверки наличия прослеживаемых работ в документе закупки
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса.
//
Процедура СформироватьЗапросНаличиеПрослеживаемыхРаботВДокументеЗакупки(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ДокументТовары.НомерСтроки                  КАК НомерСтроки,
		|	ДокументТовары.Номенклатура                 КАК Номенклатура,
		|	ДокументТовары.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ДокументТовары
		|ГДЕ
		|	ДокументТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|	И ДокументТовары.Номенклатура.ПрослеживаемыйТовар
		|	И &ИспользоватьУчетПрослеживаемыхИмпортныхТоваров
		|	И НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ) >= &ДатаНачалаУчетаПрослеживаемыхИмпортныхТоваров
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки ВОЗР
		|;
		|";
	
КонецПроцедуры

// Формирует текст запроса для проверки заполненности аналитик услуг для услуг в документе закупки.
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса.
//
Процедура СформироватьЗапросКорректностьЗаполненияАналитикиУслуг(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ДокументТовары.НомерСтроки  КАК НомерСтроки,
		|	ДокументТовары.Номенклатура КАК Номенклатура
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ДокументТовары
		|ГДЕ
		|	ДокументТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
		|	И ДокументТовары.СтатьяРасходов = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка)
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки ВОЗР
		|;
		|";
	
КонецПроцедуры

// Формирует текст запроса для проверки заполненности склада
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса.
//
Процедура СформироватьЗапросКорректностьЗаполненияСклада(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЕстьОшибкиЗаполненияСклад
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВременнаяТаблицаДокументЗакупки КАК ВременнаяТаблицаДокументЗакупки
		|ПО
		|	ИСТИНА
		|ГДЕ
		|	ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|	И НЕ ВременнаяТаблицаТовары.СписатьНаРасходы
		|	И ВременнаяТаблицаДокументЗакупки.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|;
		|";
	
КонецПроцедуры

// Формирует текст запроса для проверки заполненности реквизита "Склад" в строках табличной части товаров
// Проверка должна выполняться только если:
// 		- в строке табличной части выбрана номенклатура типа товар;
//
Процедура СформироватьЗапросКорректностьЗаполненияСкладовВТабличнойЧастиТоварыБезСкладаВШапке(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.ПредставлениеТабличнойЧасти КАК ПредставлениеТабличнойЧасти,
		|	ВременнаяТаблицаТовары.ИмяТабличнойЧасти КАК ИмяТабличнойЧасти,
		|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|ГДЕ
		|	ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры В
		|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|	И НЕ ВременнаяТаблицаТовары.СписатьНаРасходы
		|	И ВременнаяТаблицаТовары.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|;
		|";
	
КонецПроцедуры

// Формирует текст запроса для проверки заполненности реквизита "Склад" в строках табличной части товаров
// Проверка должна выполняться только если:
// 		- в строке табличной части выбрана номенклатура типа товар;
// 		- в шапке документа заполнен реквизит "Склад".
//
Процедура СформироватьЗапросКорректностьЗаполненияСкладовВТабличнойЧастиТовары(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.ПредставлениеТабличнойЧасти КАК ПредставлениеТабличнойЧасти,
		|	ВременнаяТаблицаТовары.ИмяТабличнойЧасти КАК ИмяТабличнойЧасти,
		|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВременнаяТаблицаДокументЗакупки КАК ВременнаяТаблицаДокументЗакупки
		|ПО
		|	ИСТИНА
		|ГДЕ
		|	ВременнаяТаблицаДокументЗакупки.Склад.ЭтоГруппа
		|	И ВременнаяТаблицаДокументЗакупки.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	И ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры В
		|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|	И НЕ ВременнаяТаблицаТовары.СписатьНаРасходы
		|	И ВременнаяТаблицаТовары.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|;
		|";
	
КонецПроцедуры

// Формирует проверки для контроля завершения поступления по заказу
// и для контроля завершения расчетов по заказу.
//
// Параметры:
// КонтролируемыйЗаказ - ДокументСсылка.ЗаказПоставщику - контролируемый документ.
// Отказ - Булево - параметр Отказ.
//
Процедура ВыполнитьКонтрольЗаказаПослеПроведения(КонтролируемыйЗаказ, Отказ) Экспорт
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ЗаказыПоставщикамОстатки.ЗаказПоставщику КАК ЗаказПоставщику
		|ИЗ
		|	РегистрНакопления.ЗаказыПоставщикам.Остатки(, 
		|			ЗаказПоставщику = &Ссылка
		|			И ЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт)
		|			И ЗаказПоставщику.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию)
		|			И ЗаказПоставщику.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаХранениеСПравомПродажи)
		|	) КАК ЗаказыПоставщикамОстатки
		|ГДЕ
		|	&КонтролироватьПоступление
		|	И &ИспользоватьСтатусы
		|	И (ЗаказыПоставщикамОстатки.ЗаказаноОстаток <> 0 
		|		ИЛИ ЗаказыПоставщикамОстатки.КОформлениюОстаток <> 0)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТоварыКПоступлениюОстатки.ДокументПоступления КАК ЗаказПоставщику
		|ИЗ
		|	РегистрНакопления.ТоварыКПоступлению.Остатки(, 
		|			ДокументПоступления = &Ссылка
		|			И ВЫРАЗИТЬ(ДокументПоступления КАК Документ.ЗаказПоставщику).Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт)
		|			И ВЫРАЗИТЬ(ДокументПоступления КАК Документ.ЗаказПоставщику).ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию)
		|			И ВЫРАЗИТЬ(ДокументПоступления КАК Документ.ЗаказПоставщику).ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаХранениеСПравомПродажи)
		|	) КАК ТоварыКПоступлениюОстатки
		|ГДЕ
		|	&КонтролироватьПоступление
		|	И &ИспользоватьСтатусы
		|	И ((ТоварыКПоступлениюОстатки.КОформлениюОрдеровОстаток + ТоварыКПоступлениюОстатки.ПринимаетсяОстаток) <> 0
		|		ИЛИ ТоварыКПоступлениюОстатки.КОформлениюПоступленийПоНакладнымОстаток <> 0)
		|;
		|
		|ВЫБРАТЬ
		|	РасчетыСПоставщикамиОстатки.Валюта КАК Валюта,
		|	-1*(РасчетыСПоставщикамиОстатки.КОплатеОстаток) КАК КОплатеОстаток
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками.Остатки(, 
		|			ОбъектРасчетов.Объект = &Ссылка
		|	) КАК РасчетыСПоставщикамиОстатки
		|ГДЕ
		|	&КонтролироватьРасчеты
		|	И &ИспользоватьСтатусы
		|	И РасчетыСПоставщикамиОстатки.КОплатеОстаток < 0
		|	И ВЫРАЗИТЬ(ОбъектРасчетов.Объект КАК Документ.ЗаказПоставщику).Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт)
		|	И ВЫРАЗИТЬ(ОбъектРасчетов.Объект КАК Документ.ЗаказПоставщику).ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию)
		|	И ВЫРАЗИТЬ(ОбъектРасчетов.Объект КАК Документ.ЗаказПоставщику).ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаХранениеСПравомПродажи)
		|");
		
	КонтролироватьПоступление = ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыПоставщикамБезПолногоПоступления");
	КонтролироватьРасчеты     = ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыПоставщикамБезПолнойОплаты");
	ИспользоватьСтатусы       = ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовПоставщикам");
	
	Запрос.УстановитьПараметр("Ссылка",                    КонтролируемыйЗаказ);
	Запрос.УстановитьПараметр("КонтролироватьПоступление", КонтролироватьПоступление);
	Запрос.УстановитьПараметр("КонтролироватьРасчеты",     КонтролироватьРасчеты);
	Запрос.УстановитьПараметр("ИспользоватьСтатусы",       ИспользоватьСтатусы);
	
	Результат = Запрос.ВыполнитьПакет(); 
	
	ВыборкаПоступление = Результат[0].Выбрать();
	ВыборкаРасчеты  = Результат[1].Выбрать();
	
	Если ВыборкаПоступление.Следующий() Тогда 
		Если ТипЗнч(КонтролируемыйЗаказ) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			ТекстОшибки = НСтр("ru = 'Документ ""%Заказ%"" поступил не полностью.
			|Закрытие заказа возможно только с полностью поступившими/отмененными строками'");
		КонецЕсли;
		
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Заказ%", КонтролируемыйЗаказ);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			КонтролируемыйЗаказ,
			,
			,
			Отказ);
	КонецЕсли;
	
	Если ВыборкаРасчеты.Следующий() Тогда 
		Если ТипЗнч(КонтролируемыйЗаказ) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			ТекстОшибки = НСтр("ru = 'Расчеты по документу ""%Заказ%"" не завершены.
			|Для закрытия заказа требуется оплата %СуммаКОплате% %Валюта%.
			|Закрытие заказа возможно только с полностью оплаченными/отмененными строками'");
		КонецЕсли;
		
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Заказ%",        КонтролируемыйЗаказ);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СуммаКОплате%", Строка(ВыборкаРасчеты.КОплатеОстаток));
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Валюта%",       Строка(ВыборкаРасчеты.Валюта));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			КонтролируемыйЗаказ,
			,
			,
			Отказ);
	КонецЕсли;
	
КонецПроцедуры

// Формирует текст запроса для контроля завершения поступления по заказу
// и для контроля завершения расчетов по заказу.
//
//	Возвращаемое значение:
//		Строка - Текст запроса
//
Функция ТекстЗапросаКонтрольЗаказаПослеПроведения() Экспорт
	
	Возврат "
		|ВЫБРАТЬ
		|	ОбъектыРасчетов.Ссылка КАК ОбъектРасчетов,
		|	ОбъектыРасчетов.Объект КАК Объект
		|ПОМЕСТИТЬ ОбъектыРасчетовКонтрольЗаказаПослеПроведения
		|ИЗ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|ГДЕ
		|	ОбъектыРасчетов.Объект В (&МассивДокументов)
		|	И НЕ ОбъектыРасчетов.ПометкаУдаления
		|;
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КонтрольЗакрытия.ЗаказПоставщику КАК ЗаказПоставщику
		|ПОМЕСТИТЬ
		|	ВтОстаткиПоЗаказам
		|ИЗ (ВЫБРАТЬ
		|	ЗаказыПоставщикамОстатки.ЗаказПоставщику КАК ЗаказПоставщику
		|ИЗ
		|	РегистрНакопления.ЗаказыПоставщикам.Остатки(, 
		|			ЗаказПоставщику В (&МассивДокументов)
		|			И &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт)
		|			И ЗаказПоставщику.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию)
		|			И ЗаказПоставщику.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаХранениеСПравомПродажи)
		|	) КАК ЗаказыПоставщикамОстатки
		|ГДЕ
		|	&КонтролироватьПоступление
		|	И &ИспользоватьСтатусы
		|	И (ЗаказыПоставщикамОстатки.ЗаказаноОстаток > 0 
		|		ИЛИ ЗаказыПоставщикамОстатки.КОформлениюОстаток > 0)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТоварыКПоступлениюОстатки.ДокументПоступления КАК ЗаказПоставщику
		|ИЗ
		|	РегистрНакопления.ТоварыКПоступлению.Остатки(, 
		|			ДокументПоступления В (&МассивДокументов)
		|			И ВЫРАЗИТЬ(ДокументПоступления КАК Документ.ЗаказПоставщику).Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт)
		|			И ВЫРАЗИТЬ(ДокументПоступления КАК Документ.ЗаказПоставщику).ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию)
		|			И ВЫРАЗИТЬ(ДокументПоступления КАК Документ.ЗаказПоставщику).ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаХранениеСПравомПродажи)
		|	) КАК ТоварыКПоступлениюОстатки
		|ГДЕ
		|	&КонтролироватьПоступление
		|	И &ИспользоватьСтатусы
		|	И (ТоварыКПоступлениюОстатки.КОформлениюОрдеровОстаток + ТоварыКПоступлениюОстатки.ПринимаетсяОстаток) > 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОбъектыРасчетов.Объект КАК ЗаказПоставщику
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками.Остатки(, 
		|			ОбъектРасчетов В (ВЫБРАТЬ ОбъектРасчетов ИЗ ОбъектыРасчетовКонтрольЗаказаПослеПроведения)
		|			И &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт)
		|	) КАК РасчетыСПоставщикамиОстатки
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыРасчетовКонтрольЗаказаПослеПроведения КАК ОбъектыРасчетов
		|		ПО ОбъектыРасчетов.ОбъектРасчетов = РасчетыСПоставщикамиОстатки.ОбъектРасчетов
		|ГДЕ
		|	&КонтролироватьРасчеты
		|	И &ИспользоватьСтатусы
		|	И РасчетыСПоставщикамиОстатки.КОплатеОстаток < 0
		|	И ОбъектыРасчетов.Объект.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию)
		|	И ОбъектыРасчетов.Объект.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаХранениеСПравомПродажи)
		|	И ОбъектыРасчетов.Объект.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|	И ОбъектыРасчетов.Объект.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамНакладным)) КАК КонтрольЗакрытия
		|;"
	
КонецФункции


#КонецОбласти

#Область ПроцедурыФормированияЗапросовПроверкиСоответствияДокументовУсловиямЗакупки

// Формирует текст запроса для проверки шапки документа закупки
//
// Параметры:
// 	ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса.
//
Процедура СформироватьЗапросШапкаДокументаЗакупки(ТекстЗапроса, ИмяТаблицы)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА СоглашениеСПоставщиком.Партнер ЕСТЬ НЕ NULL И
		|			ДокументЗакупки.Партнер <> СоглашениеСПоставщиком.Партнер
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияПартнер,
		|	ВЫБОР
		|		КОГДА СоглашениеСПоставщиком.Статус ЕСТЬ НЕ NULL И
		|			СоглашениеСПоставщиком.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСПоставщиками.НеСогласовано)
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиСтатусСоглашения,
		|	ВЫБОР
		|		КОГДА СоглашениеСПоставщиком.Контрагент ЕСТЬ НЕ NULL И
		|			СоглашениеСПоставщиком.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) И
		|			ДокументЗакупки.Контрагент <> СоглашениеСПоставщиком.Контрагент
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияКонтрагент,
		|	ВЫБОР
		|		КОГДА СоглашениеСПоставщиком.Организация ЕСТЬ НЕ NULL И
		|			СоглашениеСПоставщиком.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) И
		|			ДокументЗакупки.Организация <> СоглашениеСПоставщиком.Организация
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияОрганизация,
		|	ВЫБОР
		|		КОГДА СоглашениеСПоставщиком.ФормаОплаты ЕСТЬ НЕ NULL И
		|			СоглашениеСПоставщиком.ФормаОплаты <> ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.ПустаяСсылка) И
		|			ДокументЗакупки.ФормаОплаты <> СоглашениеСПоставщиком.ФормаОплаты
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияФормаОплаты,
		|	ВЫБОР
		|		КОГДА СоглашениеСПоставщиком.Валюта ЕСТЬ НЕ NULL И
		|			ДокументЗакупки.Валюта <> СоглашениеСПоставщиком.Валюта
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияВалюта,
		|	ВЫБОР
		|		КОГДА СоглашениеСПоставщиком.ВозвращатьМногооборотнуюТару <> &ВозвратМногооборотнойТары
		|		ТОГДА 
		|			ИСТИНА
		|		ИНАЧЕ 
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияВозвращатьМногооборотнуюТару,
		|	ВЫБОР
		|		КОГДА СоглашениеСПоставщиком.ТребуетсяЗалогЗаТару <> &ТребуетсяЗалогЗаТару
		|		ТОГДА 
		|			ИСТИНА
		|		ИНАЧЕ 
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияТребуетсяЗалогЗаТару,
		|&ТекстЗаменыПоДокументуПриобретениеТоваровУслуг,
		|	ВЫБОР
		|		КОГДА СоглашениеСПоставщиком.ЦенаВключаетНДС ЕСТЬ НЕ NULL
		|			И ДокументЗакупки.ЦенаВключаетНДС <> НЕОПРЕДЕЛЕНО
		|			И ДокументЗакупки.ЦенаВключаетНДС <> СоглашениеСПоставщиком.ЦенаВключаетНДС
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияЦенаВключаетНДС,
		|	ВЫБОР
		|		КОГДА НЕ СоглашениеСПоставщиком.ХозяйственнаяОперация ЕСТЬ NULL
		|			И НЕ ДокументЗакупки.ХозяйственнаяОперация ЕСТЬ NULL
		|			И ДокументЗакупки.ХозяйственнаяОперация <> СоглашениеСПоставщиком.ХозяйственнаяОперация
		|			И ДокументЗакупки.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет)
		|			И НЕ ДокументЗакупки.ХозяйственнаяОперация В (
		|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаТоварыВПути),
		|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаФактуровкаПоставки),
		|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаПоступлениеИзТоваровВПути),
		|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаНеотфактурованнаяПоставка),
		|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСТоварыВПути),
		|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСФактуровкаПоставки),
		|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСПоступлениеИзТоваровВПути),
		|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСНеотфактурованнаяПоставка),
		|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпортуТоварыВПути),
		|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпортуПоступлениеИзТоваровВПути))
		|		ТОГДА
		|			ИСТИНА
		|		КОГДА
		|			ДокументЗакупки.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет)
		|			И СоглашениеСПоставщиком.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика)
		|			И НЕ СоглашениеСПоставщиком.ХозяйственнаяОперация ЕСТЬ NULL
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияХозяйственнаяОперация,
		|	ЕСТЬNULL(СоглашениеСПоставщиком.Склад.ЭтоГруппа, ЛОЖЬ) КАК СкладСоглашениеЕстьГруппа,
		|	ВЫБОР
		|		КОГДА СоглашениеСПоставщиком.Склад ЕСТЬ НЕ NULL
		|			И СоглашениеСПоставщиком.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|			И СкладыКорректныеПоСоглашению.Склад ЕСТЬ NULL
		|		ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияСклад,
		|	ВЫБОР
		|		КОГДА ДокументЗакупки.ПорядокРасчетов <> ВЫБОР
		|													КОГДА СоглашениеСПоставщиком.ИспользуютсяДоговорыКонтрагентов
		|														ТОГДА ДокументЗакупки.Договор.ПорядокРасчетов
		|													ИНАЧЕ СоглашениеСПоставщиком.ПорядокРасчетов
		|												КОНЕЦ
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияПорядокРасчетов,
		|	ВЫБОР
		|		КОГДА СоглашениеСПоставщиком.ИспользуютсяДоговорыКонтрагентов
		|			ТОГДА ДокументЗакупки.Договор.ПорядокРасчетов
		|		ИНАЧЕ СоглашениеСПоставщиком.ПорядокРасчетов
		|	КОНЕЦ                                           КАК ПорядокРасчетовСоглашение,
		|	СоглашениеСПоставщиком.ИспользуютсяДоговорыКонтрагентов КАК ИспользуютсяДоговорыКонтрагентов,
		|	ЛОЖЬ                                            КАК ЭтоСоглашение,
		|	&ВозвратМногооборотнойТары                      КАК ВозвратМногооборотнойТары,
		|	&ТребуетсяЗалогЗаТару							КАК ТребуетсяЗалогЗаТару,
		|	ДокументЗакупки.Партнер                         КАК Партнер,
		|	ДокументЗакупки.Контрагент                      КАК Контрагент,
		|	ДокументЗакупки.Организация                     КАК Организация,
		|	ДокументЗакупки.ФормаОплаты                     КАК ФормаОплаты,
		|	ДокументЗакупки.Соглашение                      КАК Соглашение,
		|	ДокументЗакупки.Валюта                          КАК Валюта,
		|	ДокументЗакупки.Склад                           КАК Склад,
		|	ДокументЗакупки.ЦенаВключаетНДС                 КАК ЦенаВключаетНДС,
		|	ДокументЗакупки.НалогообложениеНДС              КАК НалогообложениеНДС,
		|	СоглашениеСПоставщиком.Партнер                  КАК ПартнерСоглашение,
		|	СоглашениеСПоставщиком.Контрагент               КАК КонтрагентСоглашение,
		|	СоглашениеСПоставщиком.Организация              КАК ОрганизацияСоглашение,
		|	СоглашениеСПоставщиком.ФормаОплаты              КАК ФормаОплатыСоглашение,
		|	СоглашениеСПоставщиком.Валюта                   КАК ВалютаСоглашение,
		|	СоглашениеСПоставщиком.ДатаНачалаДействия       КАК ДатаНачалаДействияСоглашение,
		|	СоглашениеСПоставщиком.ДатаОкончанияДействия    КАК ДатаОкончанияДействияСоглашение,
		|	СоглашениеСПоставщиком.Склад                    КАК СкладСоглашение,
		|	СоглашениеСПоставщиком.ЦенаВключаетНДС          КАК ЦенаВключаетНДССоглашение,
		|	СоглашениеСПоставщиком.ХозяйственнаяОперация    КАК ХозяйственнаяОперацияСоглашение,
		|	СоглашениеСПоставщиком.СрокВозвратаМногооборотнойТары          КАК СрокВозвратаМногооборотнойТары,
		|	СоглашениеСПоставщиком.РассчитыватьДатуВозвратаТарыПоКалендарю КАК РассчитыватьДатуВозвратаТарыПоКалендарю,
		|	СоглашениеСПоставщиком.КалендарьВозвратаТары    КАК КалендарьВозвратаТары
		|ИЗ
		|	ВременнаяТаблицаДокументЗакупки                 КАК ДокументЗакупки
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Справочник.СоглашенияСПоставщиками КАК СоглашениеСПоставщиком
		|ПО 
		|	ДокументЗакупки.Соглашение = СоглашениеСПоставщиком.Ссылка
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	СкладыКорректныеПоСоглашению КАК СкладыКорректныеПоСоглашению
		|ПО 
		|	ДокументЗакупки.Склад = СкладыКорректныеПоСоглашению.Склад
		|;
		|";
	
	Если ИмяТаблицы = "Справочник.СоглашенияСПоставщиками" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЛОЖЬ КАК ЭтоСоглашение", "ИСТИНА КАК ЭтоСоглашение");
	КонецЕсли;

	Если ИмяТаблицы = "Документ.ПриобретениеТоваровУслуг" Тогда
		ТекстЗаменыПоДокументуПриобретениеТоваровУслуг = "
		|	ВЫБОР
		|		КОГДА СоглашениеСПоставщиком.Валюта ЕСТЬ НЕ NULL И
		|			ДокументЗакупки.ВалютаВзаиморасчетов <> СоглашениеСПоставщиком.Валюта
		|			И ДокументЗакупки.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию)
		|			И ДокументЗакупки.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаХранениеСПравомПродажи)
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияВалютаВзаиморасчетов,
		|	ИСТИНА КАК ЕстьОшибкиДатаВозвратаМногооборотнойТары,
		|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияСрокВозвратаМногооборотнойТары,
		|";
	Иначе
		ТекстЗаменыПоДокументуПриобретениеТоваровУслуг = "
		|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияВалютаВзаиморасчетов,
		|	ЛОЖЬ КАК ЕстьОшибкиДатаВозвратаМногооборотнойТары,
		|	ВЫБОР
		|		КОГДА ДокументЗакупки.СрокВозвратаМногооборотнойТары <> СоглашениеСПоставщиком.СрокВозвратаМногооборотнойТары
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияСрокВозвратаМногооборотнойТары,
		|";
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗаменыПоДокументуПриобретениеТоваровУслуг,", ТекстЗаменыПоДокументуПриобретениеТоваровУслуг);
	
КонецПроцедуры

// Формирует текст запроса для проверки тч Товары документа закупки
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса.
//
Процедура СформироватьЗапросТоварыДокументаЗакупки(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.НомерСтроки                    КАК НомерСтроки,
		|	ВложенныйЗапрос.Номенклатура                   КАК Номенклатура,
		|	ВложенныйЗапрос.Характеристика                 КАК Характеристика,
		|	ВложенныйЗапрос.ВалютаЦены                     КАК ВалютаЦены,
		|	ВложенныйЗапрос.СтавкаНДССоглашение            КАК СтавкаНДССоглашение,
		|	ВложенныйЗапрос.МаксимальноДопустимаяЦена      КАК МаксимальноДопустимаяЦена,
		|	ВложенныйЗапрос.ЕстьОшибкиВидЦеныПоставщика    КАК ЕстьОшибкиВидЦеныПоставщика,
		|	ВложенныйЗапрос.ВидЦеныПоставщика              КАК ВидЦеныПоставщика,
		|	ВЫБОР
		|		КОГДА
		|			ВложенныйЗапрос.КонтролироватьЦеныЗакупки
		|			И ВложенныйЗапрос.Цена > ВложенныйЗапрос.МаксимальноДопустимаяЦена
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиМаксимальноДопустимаяЦена
		|ИЗ (
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.НомерСтроки            КАК НомерСтроки,
		|	ВременнаяТаблицаДокументЗакупки.Валюта        КАК ВалютаЦены,
		|	ВременнаяТаблицаТовары.Номенклатура           КАК Номенклатура,
		|	ВременнаяТаблицаТовары.Характеристика         КАК Характеристика,
		|	ВременнаяТаблицаТовары.Цена                   КАК Цена,
		|	СоглашениеШапка.ВидЦеныПоставщика             КАК ВидЦеныПоставщика,
		|	ВЫБОР
		|		КОГДА
		|			ВременнаяТаблицаДокументЗакупки.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС)
		|		ТОГДА
		|			ЗНАЧЕНИЕ(Справочник.СтавкиНДС.БезНДС)
		|		КОГДА
		|			ВременнаяТаблицаДокументЗакупки.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
		|		ТОГДА
		|			ЕСТЬNULL(СтавкиНДСНоменклатуры.СтавкаНДС, ЕСТЬNULL(ОсновныеСтавкиНДС.СтавкаНДС,
		|				ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)))
		|	КОНЕЦ КАК СтавкаНДССоглашение,
		|	ВЫБОР
		|		КОГДА
		|			ЦеныНоменклатурыПоставщиковСрезПоследних.Цена ЕСТЬ НЕ NULL
		|			И СоглашениеШапка.КонтролироватьЦеныЗакупки
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК КонтролироватьЦеныЗакупки,
		|	ВЫБОР
		|		КОГДА
		|			СоглашениеШапка.ВидЦеныПоставщика <> ЗНАЧЕНИЕ(Справочник.ВидыЦенПоставщиков.ПустаяСсылка)
		|			И СоглашениеШапка.ВидЦеныПоставщика <> ВременнаяТаблицаТовары.ВидЦеныПоставщика
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиВидЦеныПоставщика,
		|	ВЫБОР
		|		КОГДА
		|			ЦеныНоменклатурыПоставщиковСрезПоследних.Цена ЕСТЬ NULL
		|		ТОГДА
		|			0
		|		ИНАЧЕ
		|			ВЫРАЗИТЬ(
		|			ВЫБОР
		|				КОГДА
		|					ВременнаяТаблицаТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|				ТОГДА
		|					&ТекстЗапросаКоэффициентУпаковки1
		|				ИНАЧЕ
		|					1
		|			КОНЕЦ
		|			* ЦеныНоменклатурыПоставщиковСрезПоследних.Цена/ЕстьNULL(&ТекстЗапросаКоэффициентУпаковки2,1)
		|			* ВЫБОР
		|				КОГДА ВременнаяТаблицаДокументЗакупки.Валюта <> ЦеныНоменклатурыПоставщиковСрезПоследних.Валюта
		|					ТОГДА ВЫБОР
		|							КОГДА ЕСТЬNULL(КурсыВалютыЦены.КурсЗнаменатель, 0) > 0
		|								И ЕСТЬNULL(КурсыВалютыЦены.КурсЧислитель, 0) > 0
		|								И ЕСТЬNULL(КурсыВалюты.КурсЗнаменатель, 0) > 0
		|								И ЕСТЬNULL(КурсыВалюты.КурсЧислитель, 0) > 0
		|							ТОГДА
		|								(КурсыВалютыЦены.КурсЧислитель * КурсыВалюты.КурсЗнаменатель)
		|								/ (КурсыВалюты.КурсЧислитель * КурсыВалютыЦены.КурсЗнаменатель)
		|							ИНАЧЕ 0
		|						КОНЕЦ
		|				ИНАЧЕ
		|					1
		|			КОНЕЦ КАК ЧИСЛО(31,2))
		|	КОНЕЦ КАК МаксимальноДопустимаяЦена
		|ИЗ
		| ВременнаяТаблицаТовары
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.СтавкиНДСНоменклатуры.СрезПоследних(&Дата,
		|		Страна = &СтранаРегистрации ИЛИ Страна = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)) КАК СтавкиНДСНоменклатуры
		|ПО
		|	ВременнаяТаблицаТовары.Номенклатура = СтавкиНДСНоменклатуры.Номенклатура
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ОсновныеСтавкиНДС.СрезПоследних(&Дата, Страна = &СтранаРегистрации) КАК ОсновныеСтавкиНДС
		|ПО
		|	ИСТИНА
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВременнаяТаблицаДокументЗакупки КАК ВременнаяТаблицаДокументЗакупки
		|ПО
		|	ИСТИНА
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Справочник.СоглашенияСПоставщиками КАК СоглашениеШапка
		|ПО
		|	ВременнаяТаблицаДокументЗакупки.Соглашение = СоглашениеШапка.Ссылка
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(КОНЕЦПЕРИОДА(&Дата, ДЕНЬ),
		|				ВидЦеныПоставщика В
		|				(ВЫБРАТЬ
		|					ВременнаяТаблицаДокументЗакупки.Соглашение.ВидЦеныПоставщика
		|				ИЗ
		|					ВременнаяТаблицаДокументЗакупки КАК ВременнаяТаблицаДокументЗакупки) И
		|				(Номенклатура, Характеристика) В
		|				(ВЫБРАТЬ
		|					ВременнаяТаблицаТовары.Номенклатура,
		|					ВременнаяТаблицаТовары.Характеристика
		|				ИЗ
		|					ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары)
		|) КАК ЦеныНоменклатурыПоставщиковСрезПоследних
		|ПО
		|	ВременнаяТаблицаТовары.Номенклатура = ЦеныНоменклатурыПоставщиковСрезПоследних.Номенклатура
		|	И ВременнаяТаблицаТовары.Характеристика = ЦеныНоменклатурыПоставщиковСрезПоследних.Характеристика
		|	И ВременнаяТаблицаТовары.ВидЦеныПоставщика = ЦеныНоменклатурыПоставщиковСрезПоследних.ВидЦеныПоставщика
		|	И СоглашениеШапка.КонтролироватьЦеныЗакупки
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата, БазоваяВалюта = &БазоваяВалюта) КАК КурсыВалютыЦены
		|ПО 
		|	ЦеныНоменклатурыПоставщиковСрезПоследних.Валюта = КурсыВалютыЦены.Валюта
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата,
		|				Валюта В
		|				(ВЫБРАТЬ
		|					ВременнаяТаблицаДокументЗакупки.Валюта
		|				ИЗ
		|					ВременнаяТаблицаДокументЗакупки КАК ВременнаяТаблицаДокументЗакупки)
		|					И БазоваяВалюта = &БазоваяВалюта
		|) КАК КурсыВалюты
		|	ПО ИСТИНА
		|) КАК ВложенныйЗапрос
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки ВОЗР
		|;
		|";
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ВременнаяТаблицаТовары.Упаковка",
		"ВременнаяТаблицаТовары.Номенклатура"));
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЦеныНоменклатурыПоставщиковСрезПоследних.Упаковка",
		"ЦеныНоменклатурыПоставщиковСрезПоследних.Номенклатура"));
		
КонецПроцедуры

// Формирует текст запроса для проверки вхождения цен документа закупки в допустимый диапазон.
//
// Параметры:
// ТекстЗапроса     - Строка - текстовая строка, к которой необходимо добавить текст запроса
// ПараметрыЗапроса - Структура - структура, содержащая параметры запроса
// ДокументЗакупки  - ДокументОбъект, который необходимо проверить.
//
Процедура СформироватьЗапросВхождениеЦенВДопустимыйДиапазон(ТекстЗапроса)
		
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.НомерСтроки                 КАК НомерСтроки,
		|	ВложенныйЗапрос.Номенклатура                КАК Номенклатура,
		|	ВложенныйЗапрос.Характеристика              КАК Характеристика,
		|	ВложенныйЗапрос.ВалютаЦены                  КАК ВалютаЦены,
		|	ВложенныйЗапрос.Цена                        КАК Цена,
		|	ВложенныйЗапрос.МаксимальноДопустимаяЦена   КАК МаксимальноДопустимаяЦена,
		|	ВЫБОР
		|		КОГДА
		|			НЕ МаксимальнаяЦенаОтсутствует
		|			И ВложенныйЗапрос.Цена > ВложенныйЗапрос.МаксимальноДопустимаяЦена
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ                                       КАК ЕстьОшибкиМаксимальноДопустимаяЦена
		|ИЗ (
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.НомерСтроки          КАК НомерСтроки,
		|	ВременнаяТаблицаТовары.Номенклатура         КАК Номенклатура,
		|	ВременнаяТаблицаТовары.Характеристика       КАК Характеристика,
		|	ВременнаяТаблицаДокументЗакупки.Валюта      КАК ВалютаЦены,
		|	ВременнаяТаблицаТовары.ЦенаСоСкидкой        КАК Цена,
		|	ВЫБОР
		|		КОГДА
		|			МаксимальныеЦеныНоменклатурыСрезПоследних.Цена ЕСТЬ NULL
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК МаксимальнаяЦенаОтсутствует,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(МаксимальныеЦеныНоменклатурыСрезПоследних.Цена,0)
		|		/ ЕстьNULL(&ТекстЗапросаКоэффициентУпаковки1,1)
		|			* ВЫБОР
		|				КОГДА
		|					ВременнаяТаблицаТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|				ТОГДА
		|					&ТекстЗапросаКоэффициентУпаковки2
		|				ИНАЧЕ 
		|					1
		|			КОНЕЦ
		|			* ВЫБОР
		|				КОГДА
		|					МаксимальныеЦеныНоменклатурыСрезПоследних.Валюта <> ВременнаяТаблицаДокументЗакупки.Валюта
		|				ТОГДА
		|					ВЫБОР
		|						КОГДА ЕСТЬNULL(КурсыВалютыЦены.КурсЗнаменатель, 0) > 0
		|							И ЕСТЬNULL(КурсыВалютыЦены.КурсЧислитель, 0) > 0
		|							И ЕСТЬNULL(КурсыВалютыМаксимальнойЦены.КурсЗнаменатель, 0) > 0
		|							И ЕСТЬNULL(КурсыВалютыМаксимальнойЦены.КурсЧислитель, 0) > 0
		|						ТОГДА
		|							(КурсыВалютыМаксимальнойЦены.КурсЧислитель * КурсыВалютыЦены.КурсЗнаменатель)
		|							/ (КурсыВалютыЦены.КурсЧислитель * КурсыВалютыМаксимальнойЦены.КурсЗнаменатель)
		|						ИНАЧЕ
		|							0
		|					КОНЕЦ
		|				ИНАЧЕ 
		|					1
		|			КОНЕЦ КАК ЧИСЛО(31,2))
		|	КАК МаксимальноДопустимаяЦена
		|
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			ВременнаяТаблицаДокументЗакупки КАК ВременнаяТаблицаДокументЗакупки
		|		ПО
		|			ИСТИНА
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			ВременнаяТаблицаКурсыВалют КАК КурсыВалютыЦены
		|		ПО
		|			ВременнаяТаблицаДокументЗакупки.Валюта = КурсыВалютыЦены.Валюта
		|
		|/////////////////////////////////////////////////////////////////////////////
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|				КОНЕЦПЕРИОДА(&Дата, ДЕНЬ),
		|				ВидЦены В (
		|					ВЫБРАТЬ
		|						Константы.ВидМаксимальноДопустимыхЦенЗакупки КАК ВидЦены
		|					ИЗ
		|						Константы КАК Константы
		|					)
		|				И (Номенклатура,Характеристика) В (
		|					ВЫБРАТЬ
		|						Товары.Номенклатура,
		|						Товары.Характеристика
		|					ИЗ
		|						ВременнаяТаблицаТовары КАК Товары
		|					)
		|			) КАК МаксимальныеЦеныНоменклатурыСрезПоследних
		|		ПО
		|			ВременнаяТаблицаТовары.Номенклатура = МаксимальныеЦеныНоменклатурыСрезПоследних.Номенклатура
		|			И ВременнаяТаблицаТовары.Характеристика = МаксимальныеЦеныНоменклатурыСрезПоследних.Характеристика
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			ВременнаяТаблицаКурсыВалют КАК КурсыВалютыМаксимальнойЦены
		|		ПО
		|			МаксимальныеЦеныНоменклатурыСрезПоследних.Валюта = КурсыВалютыМаксимальнойЦены.Валюта
		|
		|ГДЕ
		|	ВременнаяТаблицаТовары.Цена > 0
		|) КАК ВложенныйЗапрос
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки ВОЗР
		|;
		|";
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"МаксимальныеЦеныНоменклатурыСрезПоследних.Упаковка",
		"МаксимальныеЦеныНоменклатурыСрезПоследних.Номенклатура"));
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ВременнаяТаблицаТовары.Упаковка",
		"ВременнаяТаблицаТовары.Номенклатура"));
		
КонецПроцедуры

// Формирует текст запроса для проверки вхождения цен документа закупки в допустимый диапазон.
//
// Параметры:
// ТекстЗапроса     - Строка - текстовая строка, к которой необходимо добавить текст запроса
// ПараметрыЗапроса - Структура - структура, содержащая параметры запроса
// ДокументЗакупки  - ДокументОбъект, который необходимо проверить.
//
Процедура СформироватьЗапросВхождениеЦенВДопустимыйДиапазон2_5(ТекстЗапроса)
		
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ВременнаяТаблицаТовары.Характеристика КАК Характеристика,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА ВидыНоменклатуры.НастройкиКлючаЦенПоХарактеристике = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)
		|				ТОГДА ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатурыДляЦенообразования.ПустаяСсылка)
		|			ИНАЧЕ ВременнаяТаблицаТовары.Характеристика.ХарактеристикаНоменклатурыДляЦенообразования
		|		КОНЕЦ, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатурыДляЦенообразования.ПустаяСсылка)) КАК ХарактеристикаЦО,
		|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатурыДляЦенообразования.ПустаяСсылка) КАК СерияЦО,
		|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК УпаковкаЦО,
		|	ВременнаяТаблицаТовары.Цена КАК Цена,
		|	ВременнаяТаблицаТовары.ЦенаСоСкидкой КАК ЦенаСоСкидкой,
		|	ВременнаяТаблицаТовары.Упаковка КАК Упаковка
		|ПОМЕСТИТЬ ВременнаяТаблицаТоварыДополненная
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|		ПО (ВидыНоменклатуры.Ссылка = ВременнаяТаблицаТовары.Номенклатура.ВидНоменклатуры)
		|;
		|
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.НомерСтроки                 КАК НомерСтроки,
		|	ВложенныйЗапрос.Номенклатура                КАК Номенклатура,
		|	ВложенныйЗапрос.Характеристика              КАК Характеристика,
		|	ВложенныйЗапрос.ВалютаЦены                  КАК ВалютаЦены,
		|	ВложенныйЗапрос.Цена                        КАК Цена,
		|	ВложенныйЗапрос.МаксимальноДопустимаяЦена   КАК МаксимальноДопустимаяЦена,
		|	ВЫБОР
		|		КОГДА
		|			НЕ МаксимальнаяЦенаОтсутствует
		|			И ВложенныйЗапрос.Цена > ВложенныйЗапрос.МаксимальноДопустимаяЦена
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ                                       КАК ЕстьОшибкиМаксимальноДопустимаяЦена
		|ИЗ (
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.НомерСтроки          КАК НомерСтроки,
		|	ВременнаяТаблицаТовары.Номенклатура         КАК Номенклатура,
		|	ВременнаяТаблицаТовары.Характеристика       КАК Характеристика,
		|	ВременнаяТаблицаДокументЗакупки.Валюта      КАК ВалютаЦены,
		|	ВременнаяТаблицаТовары.ЦенаСоСкидкой        КАК Цена,
		|	ВЫБОР
		|		КОГДА
		|			МаксимальныеЦеныНоменклатурыСрезПоследних.Цена ЕСТЬ NULL
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК МаксимальнаяЦенаОтсутствует,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(МаксимальныеЦеныНоменклатурыСрезПоследних.Цена,0)
		|		/ ЕстьNULL(&ТекстЗапросаКоэффициентУпаковки1,1)
		|			* ВЫБОР
		|				КОГДА
		|					ВременнаяТаблицаТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|				ТОГДА
		|					&ТекстЗапросаКоэффициентУпаковки2
		|				ИНАЧЕ 
		|					1
		|			КОНЕЦ
		|			* ВЫБОР
		|				КОГДА
		|					МаксимальныеЦеныНоменклатурыСрезПоследних.Валюта <> ВременнаяТаблицаДокументЗакупки.Валюта
		|				ТОГДА
		|					ВЫБОР
		|						КОГДА ЕСТЬNULL(КурсыВалютыЦены.КурсЗнаменатель, 0) > 0
		|							И ЕСТЬNULL(КурсыВалютыЦены.КурсЧислитель, 0) > 0
		|							И ЕСТЬNULL(КурсыВалютыМаксимальнойЦены.КурсЗнаменатель, 0) > 0
		|							И ЕСТЬNULL(КурсыВалютыМаксимальнойЦены.КурсЧислитель, 0) > 0
		|						ТОГДА
		|							(КурсыВалютыМаксимальнойЦены.КурсЧислитель * КурсыВалютыЦены.КурсЗнаменатель)
		|							/ (КурсыВалютыЦены.КурсЧислитель * КурсыВалютыМаксимальнойЦены.КурсЗнаменатель)
		|						ИНАЧЕ
		|							0
		|					КОНЕЦ
		|				ИНАЧЕ 
		|					1
		|			КОНЕЦ КАК ЧИСЛО(31,2))
		|	КАК МаксимальноДопустимаяЦена
		|
		|ИЗ
		|	ВременнаяТаблицаТоварыДополненная КАК ВременнаяТаблицаТовары
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			ВременнаяТаблицаДокументЗакупки КАК ВременнаяТаблицаДокументЗакупки
		|		ПО
		|			ИСТИНА
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			ВременнаяТаблицаКурсыВалют КАК КурсыВалютыЦены
		|		ПО
		|			ВременнаяТаблицаДокументЗакупки.Валюта = КурсыВалютыЦены.Валюта
		|
		|/////////////////////////////////////////////////////////////////////////////
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(
		|				КОНЕЦПЕРИОДА(&Дата, ДЕНЬ),
		|				ВидЦены В (
		|					ВЫБРАТЬ
		|						Константы.ВидМаксимальноДопустимыхЦенЗакупки КАК ВидЦены
		|					ИЗ
		|						Константы КАК Константы
		|					)
		|				И (Номенклатура, ХарактеристикаЦО, СерияЦО, УпаковкаЦО) В (
		|					ВЫБРАТЬ
		|						Товары.Номенклатура,
		|						Товары.ХарактеристикаЦО,
		|						Товары.СерияЦО,
		|						Товары.УпаковкаЦО
		|					ИЗ
		|						ВременнаяТаблицаТоварыДополненная КАК Товары
		|					)
		|			) КАК МаксимальныеЦеныНоменклатурыСрезПоследних
		|		ПО
		|			ВременнаяТаблицаТовары.Номенклатура = МаксимальныеЦеныНоменклатурыСрезПоследних.Номенклатура
		|			И ВременнаяТаблицаТовары.ХарактеристикаЦО = МаксимальныеЦеныНоменклатурыСрезПоследних.ХарактеристикаЦО
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			ВременнаяТаблицаКурсыВалют КАК КурсыВалютыМаксимальнойЦены
		|		ПО
		|			МаксимальныеЦеныНоменклатурыСрезПоследних.Валюта = КурсыВалютыМаксимальнойЦены.Валюта
		|
		|ГДЕ
		|	ВременнаяТаблицаТовары.Цена > 0
		|) КАК ВложенныйЗапрос
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки ВОЗР
		|;
		|";
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"МаксимальныеЦеныНоменклатурыСрезПоследних.Упаковка",
		"МаксимальныеЦеныНоменклатурыСрезПоследних.Номенклатура"));
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ВременнаяТаблицаТовары.Упаковка",
		"ВременнаяТаблицаТовары.Номенклатура"));
		
КонецПроцедуры

// Формирует текст запроса для проверки допустимости ручных скидок и наценок
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса.
//
Процедура СформироватьЗапросДопустимостьРучныхСкидокНаценок(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.НомерСтроки               КАК НомерСтроки,
		|	ВЫБОР
		|		КОГДА
		|			ВременнаяТаблицаТовары.ПроцентРучнойСкидки < 0
		|			И -ВременнаяТаблицаТовары.ПроцентРучнойСкидки > СоглашениеСПоставщиком.ПроцентРучнойНаценки
		|			И СоглашениеСПоставщиком.Ссылка.КонтролироватьЦеныЗакупки
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ                                            КАК ЕстьОшибкиЗаполненияРучнойНаценки,
		|	СоглашениеСПоставщиком.ПроцентРучнойСкидки       КАК МаксимальнаяСуммаРучнойСкидки,
		|	СоглашениеСПоставщиком.ПроцентРучнойНаценки      КАК МаксимальнаяСуммаРучнойНаценки
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВременнаяТаблицаДокументЗакупки
		|ПО
		|	ИСТИНА
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Справочник.СоглашенияСПоставщиками КАК СоглашениеСПоставщиком
		|ПО
		|	ВременнаяТаблицаДокументЗакупки.Соглашение = СоглашениеСПоставщиком.Ссылка
		|ГДЕ
		|	ВременнаяТаблицаТовары.ПроцентРучнойСкидки <> 0
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки ВОЗР
		|;
		|";
	
КонецПроцедуры

// Формирует запрос для проверки корректности заполнения этапов графика оплаты
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса.
//
Процедура СформироватьЗапросКорректностьЭтаповГрафикаОплаты(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаДокументЗакупки.СуммаДокумента = 0
		|			ИЛИ ВременнаяТаблицаДокументЗакупки.Соглашение = ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияЭтапыГрафикаОплаты,
		|	
		|	ВременнаяТаблицаДокументЗакупки.Соглашение КАК Соглашение,
		|	ВременнаяТаблицаДокументЗакупки.Дата КАК Дата,
		|	ВременнаяТаблицаДокументЗакупки.ДатаОтгрузки КАК ДатаОтгрузки,
		|	ВременнаяТаблицаДокументЗакупки.ДатаСогласования КАК ДатаСогласования,
		|	ВременнаяТаблицаДокументЗакупки.НакладнаяПоЗаказам КАК НакладнаяПоЗаказам,
		|	ВременнаяТаблицаДокументЗакупки.ПорядокРасчетов КАК ПорядокРасчетов,
		|
		|	ВЫБОР КОГДА ВременнаяТаблицаДокументЗакупки.Соглашение <> ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка)
		|		ТОГДА ВременнаяТаблицаДокументЗакупки.Соглашение.Календарь
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ КАК Календарь,
		|	
		|	ЭтапыДокумента.НомерСтроки       КАК НомерСтроки,
		|	ЭтапыДокумента.ВариантОплаты     КАК ВариантОплаты,
		|	ЭтапыДокумента.ВариантОтсчета    КАК ВариантОтсчета,
		|	ЭтапыДокумента.Сдвиг             КАК Сдвиг,
		|	ВременнаяТаблицаДокументЗакупки.ЭтоЗаказ КАК ЭтоЗаказ,
		|	ВременнаяТаблицаДокументЗакупки.НеОтгружатьЧастями КАК НеОтгружатьЧастями,
		|	ЭтапыДокумента.ДатаПлатежа       КАК ДатаПлатежа,
		|	ЭтапыДокумента.ПроцентПлатежа    КАК ПроцентПлатежа,
		|	
		|	ВЫБОР КОГДА &ТребуетсяЗалогЗаТару ТОГДА
		|		ЭтапыДокумента.ПроцентЗалогаЗаТару
		|	ИНАЧЕ
		|		0
		|	КОНЕЦ                            КАК ПроцентЗалогаЗаТару
		|ИЗ
		|	ВременнаяТаблицаЭтапыГрафикаОплаты КАК ЭтапыДокумента
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВременнаяТаблицаДокументЗакупки КАК ВременнаяТаблицаДокументЗакупки
		|ПО
		|	ИСТИНА
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки ВОЗР
		|;
		|";

КонецПроцедуры


// Формирует текст запроса для проверки заполнения цен в документе, позволяя нулевые цены в отмененных строках.
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса.
//
Процедура СформироватьЗапросКонтрольЗаполненияЦенСУчетомОтмененных(ТекстЗапроса)
	
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	ВЫБОР
		|		КОГДА
		|			ВременнаяТаблицаТовары.Сумма = 0
		|		ТОГДА
		|			ВЫБОР
		|				КОГДА (&ВозвратМногооборотнойТары И НЕ &ТребуетсяЗалогЗаТару
		|					И ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|					ИЛИ ВременнаяТаблицаТовары.Отменено ТОГДА
		|					ЛОЖЬ
		|				ИНАЧЕ
		|					ИСТИНА
		|			КОНЕЦ
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияСумм,
		|	ВЫБОР
		|		КОГДА
		|			ВременнаяТаблицаТовары.Цена = 0
		|		ТОГДА
		|			ВЫБОР
		|				КОГДА (&ВозвратМногооборотнойТары И НЕ &ТребуетсяЗалогЗаТару
		|					И ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|					ИЛИ ВременнаяТаблицаТовары.Отменено ТОГДА
		|					ЛОЖЬ
		|				ИНАЧЕ
		|					ИСТИНА
		|			КОНЕЦ
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияЦен
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки ВОЗР
		|;
		|";
		
КонецПроцедуры

// Формирует текст запроса для проверки заполнения цен в документе
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса.
//
Процедура СформироватьЗапросКонтрольЗаполненияЦен(ТекстЗапроса)
	
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	ВЫБОР
		|		КОГДА
		|			ВременнаяТаблицаТовары.Сумма = 0
		|		ТОГДА
		|			ВЫБОР
		|				КОГДА (&ВозвратМногооборотнойТары И НЕ &ТребуетсяЗалогЗаТару
		|					И ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)) ТОГДА
		|					ЛОЖЬ
		|				ИНАЧЕ
		|					ИСТИНА
		|			КОНЕЦ
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияСумм,
		|	ВЫБОР
		|		КОГДА
		|			ВременнаяТаблицаТовары.Цена = 0
		|		ТОГДА
		|			ВЫБОР
		|				КОГДА (&ВозвратМногооборотнойТары И НЕ &ТребуетсяЗалогЗаТару
		|					И ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)) ТОГДА
		|					ЛОЖЬ
		|				ИНАЧЕ
		|					ИСТИНА
		|			КОНЕЦ
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияЦен
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки ВОЗР
		|;
		|";
		
КонецПроцедуры

// Формирует текст запроса для проверки организации распоряжений
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса.
//
Процедура СформироватьЗапросСоответствиеОрганизацииРаспоряжений(ТекстЗапроса)

	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.ПредставлениеТабличнойЧасти КАК ПредставлениеТабличнойЧасти,
		|	ВременнаяТаблицаТовары.ИмяТабличнойЧасти КАК ИмяТабличнойЧасти,
		|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВременнаяТаблицаДокументЗакупки КАК ВременнаяТаблицаДокументЗакупки
		|ПО
		|	ИСТИНА
		|ГДЕ
		|	ВременнаяТаблицаДокументЗакупки.Организация <> ВременнаяТаблицаТовары.Распоряжение.Организация
		|;
		|";
	
КонецПроцедуры

// Формирует запрос для проверки указания ставки НДС в зависимости от налогообложения.
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса.
//
Процедура СформироватьЗапросКорректностьУказанияСтавкиНДСЗакупки(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса 
		+ "ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.ИмяТабличнойЧасти КАК ИмяТабличнойЧасти,
		|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	ВременнаяТаблицаДокументЗакупки.НалогообложениеНДС КАК НалогообложениеНДС,
		|	ВременнаяТаблицаТовары.СтавкаНДС КАК ВыбраннаяСтавкаНДС,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
		|			И &ВозвратМногооборотнойТары
		|			И ВременнаяТаблицаТовары.СтавкаНДС <> ЗНАЧЕНИЕ(Справочник.СтавкиНДС.БезНДС)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтавкиНДС.БезНДС)
		|		КОГДА ВременнаяТаблицаДокументЗакупки.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
		|			И ВременнаяТаблицаТовары.СтавкаНДС <> ЕСТЬNULL(СтавкиНДСНоменклатуры.СтавкаНДС, ЕСТЬNULL(ОсновныеСтавкиНДС.СтавкаНДС,
		|				ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)))
		|			ТОГДА ЕСТЬNULL(СтавкиНДСНоменклатуры.СтавкаНДС, ЕСТЬNULL(ОсновныеСтавкиНДС.СтавкаНДС,
		|					ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)))
		|		ИНАЧЕ
		|			НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК КорректнаяСтавкаНДС
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаДокументЗакупки КАК ВременнаяТаблицаДокументЗакупки
		|	ПО
		|		(ИСТИНА)
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		Справочник.СтавкиНДС.ТипыНалогообложенияНДС КАК СтавкиНДС
		|	ПО
		|		СтавкиНДС.ТипНалогообложенияНДС = ВременнаяТаблицаДокументЗакупки.НалогообложениеНДС
		|		И СтавкиНДС.Ссылка = ВременнаяТаблицаТовары.СтавкаНДС
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.СтавкиНДСНоменклатуры.СрезПоследних(&Дата,
		|			Страна = &СтранаРегистрации ИЛИ Страна = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)) КАК СтавкиНДСНоменклатуры
		|	ПО
		|		ВременнаяТаблицаТовары.Номенклатура = СтавкиНДСНоменклатуры.Номенклатура
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.ОсновныеСтавкиНДС.СрезПоследних(&Дата, Страна = &СтранаРегистрации) КАК ОсновныеСтавкиНДС
		|	ПО
		|		ИСТИНА
		|
		|ГДЕ
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
		|				И &ВозвратМногооборотнойТары
		|				И ВременнаяТаблицаТовары.СтавкаНДС <> ЗНАЧЕНИЕ(Справочник.СтавкиНДС.БезНДС)
		|			ТОГДА ИСТИНА
		|		КОГДА ВременнаяТаблицаДокументЗакупки.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
		|				И ВременнаяТаблицаТовары.СтавкаНДС <> ЕСТЬNULL(СтавкиНДСНоменклатуры.СтавкаНДС, ЕСТЬNULL(ОсновныеСтавкиНДС.СтавкаНДС,
		|					ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)))
		|			ТОГДА ИСТИНА
		|		КОГДА СтавкиНДС.Ссылка ЕСТЬ NULL
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|;
		|";
	
КонецПроцедуры

// Формирует запрос для проверки указания суммы НДС в зависимости от суммы строки.
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса.
//
Процедура СформироватьЗапросКорректностьСуммыИСуммыНДСЗакупки(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.ИмяТабличнойЧасти КАК ИмяТабличнойЧасти,
	|	ВременнаяТаблицаТовары.ПредставлениеТабличнойЧасти КАК ПредставлениеТабличнойЧасти,
	|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ВременнаяТаблицаТовары.Сумма КАК Сумма,
	|	ВременнаяТаблицаТовары.СуммаНДС КАК СуммаНДС,
	|	ВременнаяТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|	ВременнаяТаблицаДокументЗакупки.Валюта КАК Валюта,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаТовары.Сумма < 0 И ВременнаяТаблицаТовары.Сумма - ВременнаяТаблицаТовары.СуммаНДС <= 0
	|			ТОГДА ЛОЖЬ
	|		КОГДА ВременнаяТаблицаТовары.Сумма >= 0 И ВременнаяТаблицаТовары.Сумма - ВременнаяТаблицаТовары.СуммаНДС >= 0
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьОшибкиСуммаНДС
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаДокументЗакупки КАК ВременнаяТаблицаДокументЗакупки
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаТовары.Сумма < 0 И ВременнаяТаблицаТовары.Сумма - ВременнаяТаблицаТовары.СуммаНДС <= 0
	|			ТОГДА ЛОЖЬ
	|		КОГДА ВременнаяТаблицаТовары.Сумма >= 0 И ВременнаяТаблицаТовары.Сумма - ВременнаяТаблицаТовары.СуммаНДС >= 0
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|;
	|";
	
КонецПроцедуры

// Формирует запрос для проверки соответствия валюты документа и валюты, указанной в договоре с принципалом, по каждой строке товара, закупаемого по агентской закупке.
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса.
//
Процедура СформироватьЗапросСоответствиеВалютыПоАгентскойЗакупке(ТекстЗапроса)
		ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.ИмяТабличнойЧасти КАК ИмяТабличнойЧасти,
	|	ВременнаяТаблицаТовары.ПредставлениеТабличнойЧасти КАК ПредставлениеТабличнойЧасти,
	|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаТовары.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА ЛОЖЬ
	|		КОГДА ВременнаяТаблицаТовары.Назначение.ТипНазначения = ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ПоставкаПодПринципала)
	|			И ВременнаяТаблицаДокументЗакупки.Валюта <> ВременнаяТаблицаТовары.Назначение.Договор.ВалютаВзаиморасчетов
	|				ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкиВалютыПоАгентскойЗакупке
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаДокументЗакупки КАК ВременнаяТаблицаДокументЗакупки
	|		ПО (ИСТИНА)
	|
	|ГДЕ
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаТовары.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА ЛОЖЬ
	|		КОГДА ВременнаяТаблицаТовары.Назначение.ТипНазначения = ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ПоставкаПодПринципала)
	|			И ВременнаяТаблицаДокументЗакупки.Валюта <> ВременнаяТаблицаТовары.Назначение.Договор.ВалютаВзаиморасчетов
	|				ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|;
	|";
КонецПроцедуры

// Формирует запрос для проверки заполнения заказа клиента в табличной части документа
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса.
//
Процедура СформироватьЗапросКонтрольЗаполненияЗаказаКлиента(ТекстЗапроса)
		ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.ИмяТабличнойЧасти КАК ИмяТабличнойЧасти,
	|	ВременнаяТаблицаТовары.ПредставлениеТабличнойЧасти КАК ПредставлениеТабличнойЧасти,
	|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ВременнаяТаблицаТовары.ЗаказКлиента В (
	|								НЕОПРЕДЕЛЕНО,
	|								ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)) КАК ЕстьОшибкиЗаполненияЗаказаКлиента
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаДокументЗакупки КАК ВременнаяТаблицаДокументЗакупки
	|		ПО (ИСТИНА)
	|
	|ГДЕ
	|	ВременнаяТаблицаТовары.ЗаказКлиента В (
	|								НЕОПРЕДЕЛЕНО,
	|								ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка))
	|;
	|";
КонецПроцедуры

// Формирует запрос для проверки заполнения назначения в табличной части документа
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса.
//
Процедура СформироватьЗапросКонтрольНазначения(ТекстЗапроса)
		ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.ИмяТабличнойЧасти КАК ИмяТабличнойЧасти,
	|	ВременнаяТаблицаТовары.ПредставлениеТабличнойЧасти КАК ПредставлениеТабличнойЧасти,
	|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаТовары.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкиЗаполненияНазначения
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаДокументЗакупки КАК ВременнаяТаблицаДокументЗакупки
	|		ПО (ИСТИНА)
	|
	|ГДЕ
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаТовары.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|;
	|";
КонецПроцедуры

// Формирует запрос для проверки возможности списания товаров на расходы
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса.
//
Процедура СформироватьЗапросВозможностьСписанияТоваровНаРасходы(ТекстЗапроса)
		ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.ИмяТабличнойЧасти КАК ИмяТабличнойЧасти,
	|	ВременнаяТаблицаТовары.ПредставлениеТабличнойЧасти КАК ПредставлениеТабличнойЧасти,
	|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ВременнаяТаблицаДокументЗакупки.ХозяйственнаяОперация КАК ХозяйственнаяОперация
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаДокументЗакупки КАК ВременнаяТаблицаДокументЗакупки
	|		ПО (ИСТИНА)
	|
	|ГДЕ
	|	ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И ВременнаяТаблицаТовары.СписатьНаРасходы
	|	И ВременнаяТаблицаДокументЗакупки.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпортуПоступлениеИзТоваровВПути),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпортуТоварыВПути),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСНеотфактурованнаяПоставка),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСПоступлениеИзТоваровВПути),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСТоварыВПути),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСФактуровкаПоставки))
	|;
	|";
КонецПроцедуры
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункцииПроверкиКорректностиДокументов

// Выводит сообщения об ошибках в шапке документа закупки
//
// Параметры:
// 	Выборка          - ВыборкаИзРезультатаЗапроса
// 	ДокументЗакупки  - ДокументОбъект - объект, для которого необходимо вывести сообщения об ошибках
// 	Отказ            - Булево - Флаг отказа от проведения документа
// 	МассивОтклонений - Массив - Массив отклонений условий продаж по шапке документа.
//
Процедура СообщитьОбОшибкахШапкаДокументаЗакупки(Выборка,
	                                             ДокументЗакупки,
	                                             Отказ,
	                                             МассивОтклонений = Неопределено)
	
	ВыводитьВОтчет = (МассивОтклонений <> Неопределено);
	
	Если Выборка.Следующий() Тогда
		
		Если Выборка.ЕстьОшибкиЗаполненияПартнер Тогда
			
			Если НЕ ВыводитьВОтчет Тогда
				ТекстОшибки = НСтр("ru = 'Партнер не должен отличаться от значения в соглашении ""%ПартнерСоглашение%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПартнерСоглашение%", Выборка.ПартнерСоглашение);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ДокументЗакупки,
					"Партнер",
					,
					Отказ);
			Иначе
				
				ТекстОшибки = НСтр("ru = '""%ПартнерДокумент%"" отличается от партнера в соглашении ""%ПартнерСоглашение%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПартнерДокумент%", ДокументЗакупки.Партнер);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПартнерСоглашение%", Выборка.ПартнерСоглашение);
				
				Отчеты.ОтклоненияОтУсловийЗакупок.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Партнер'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиСтатусСоглашения Тогда
			Если НЕ ВыводитьВОтчет Тогда
				ТекстОшибки = НСтр("ru = 'Соглашение находится в статус ""Не согласовано"". Проведение документа запрещено.'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ДокументЗакупки,
					"Соглашение",
					,
					Отказ);
			Иначе
				ТекстОшибки = НСтр("ru = 'Соглашение находится в статус ""Не согласовано"".'");
				
				Отчеты.ОтклоненияОтУсловийЗакупок.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Соглашение'"), ТекстОшибки, МассивОтклонений);
				
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияКонтрагент Тогда
			
			Если НЕ ВыводитьВОтчет Тогда
				ТекстОшибки = НСтр("ru = 'Контрагент не должен отличаться от значения в соглашении ""%КонтрагентСоглашение%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%КонтрагентСоглашение%", Выборка.КонтрагентСоглашение);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ДокументЗакупки,
					"Контрагент",
					,
					Отказ);
			Иначе 
				ТекстОшибки = НСтр("ru = '""%Контрагент%"" отличается от контрагента в соглашении ""%КонтрагентСоглашение%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%КонтрагентСоглашение%", Выборка.КонтрагентСоглашение);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Контрагент%", ДокументЗакупки.Контрагент);
				Отчеты.ОтклоненияОтУсловийЗакупок.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Контрагент'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияОрганизация Тогда
			
			Если НЕ ВыводитьВОтчет Тогда
				ТекстОшибки = НСтр("ru = 'Организация не должна отличаться от значения в соглашении ""%ОрганизацияСоглашение%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОрганизацияСоглашение%", Выборка.ОрганизацияСоглашение);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ДокументЗакупки,
					"Организация",
					,
					Отказ);
			Иначе
				ТекстОшибки = НСтр("ru = '""%Организация%"" отличается от организации в соглашении ""%ОрганизацияСоглашение%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Организация%", ДокументЗакупки.Организация);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОрганизацияСоглашение%", Выборка.ОрганизацияСоглашение);
				Отчеты.ОтклоненияОтУсловийЗакупок.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Организация'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияФормаОплаты Тогда
			Если НЕ ВыводитьВОтчет Тогда 
				ТекстОшибки = НСтр("ru = 'Форма оплаты не должна отличаться от значения в соглашении ""%ФормаОплатыСоглашение%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ФормаОплатыСоглашение%", Выборка.ФормаОплатыСоглашение);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ДокументЗакупки,
					"ФормаОплаты",
					,
					Отказ);
			Иначе
				ТекстОшибки = НСтр("ru = '""%ФормаОплаты%"" отличается от формы оплаты в соглашении ""%ФормаОплатыГрафик%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ФормаОплатыГрафик%", Выборка.ФормаОплатыСоглашение);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ФормаОплаты%", ?(ЗначениеЗаполнено(ДокументЗакупки.ФормаОплаты),ДокументЗакупки.ФормаОплаты, НСтр("ru = 'Любая'")));
				Отчеты.ОтклоненияОтУсловийЗакупок.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Форма оплаты'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияВалюта Тогда
			Если НЕ ВыводитьВОтчет Тогда
				ТекстОшибки = НСтр("ru = 'Валюта не должна отличаться от значения в соглашении ""%ВалютаСоглашение%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВалютаСоглашение%", Выборка.ВалютаСоглашение);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ДокументЗакупки,
					"Валюта",
					,
					Отказ);
			Иначе 
				ТекстОшибки = НСтр("ru = '""%Валюта%"" отличается от валюты в соглашении ""%ВалютаСоглашение%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Валюта%", ДокументЗакупки.Валюта);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВалютаСоглашение%", Выборка.ВалютаСоглашение);
				Отчеты.ОтклоненияОтУсловийЗакупок.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Валюта'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияВалютаВзаиморасчетов Тогда
			Если НЕ ВыводитьВОтчет Тогда
				ТекстОшибки = НСтр("ru = 'Валюта взаиморасчетов не должна отличаться от значения в соглашении ""%ВалютаСоглашение%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВалютаСоглашение%", Выборка.ВалютаСоглашение);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ДокументЗакупки,
					"ВалютаВзаиморасчетов",
					,
					Отказ);
			Иначе
				ТекстОшибки = НСтр("ru = '""%Валюта%"" отличается от валюты взаиморасчетов в соглашении ""%ВалютаСоглашение%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВалютаСоглашение%", Выборка.ВалютаСоглашение);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Валюта%", ДокументЗакупки.ВалютаВзаиморасчетов);
				Отчеты.ОтклоненияОтУсловийЗакупок.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Валюта взаиморасчетов'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияХозяйственнаяОперация Тогда
			Если НЕ ВыводитьВОтчет Тогда
				ТекстОшибки = НСтр("ru = 'Операция не должна отличаться от значения в соглашении ""%Операция%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Операция%", Выборка.ХозяйственнаяОперацияСоглашение); 
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ДокументЗакупки,
					"ХозяйственнаяОперация",
					,
					Отказ);
			Иначе 
				ТекстОшибки = НСтр("ru = '""%Операция%"" отличается от операции в соглашении ""%ОперацияСоглашения%""'");
				
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Операция%", ДокументЗакупки.ХозяйственнаяОперация); 
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОперацияСоглашения%", Выборка.ХозяйственнаяОперацияСоглашение); 
				Отчеты.ОтклоненияОтУсловийЗакупок.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Хозяйственная операция'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли; 
		КонецЕсли;

		Если Выборка.ЕстьОшибкиЗаполненияЦенаВключаетНДС Тогда
			
			ТекстОшибки = НСтр("ru = 'Признак ""Цена включает НДС"" не должен отличаться от значения в соглашении ""%ЦенаВключаетНДС%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ЦенаВключаетНДС%", ?(Выборка.ЦенаВключаетНДССоглашение, НСтр("ru = 'Цена включает НДС'"), НСтр("ru = 'Цена не включает НДС'"))); 
			
			Если НЕ ВыводитьВОтчет Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ДокументЗакупки,
					"ЦенаВключаетНДС",
					,
					Отказ);
			Иначе 
				Отчеты.ОтклоненияОтУсловийЗакупок.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Цена включает НДС'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;

		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияСклад Тогда
			Если НЕ ВыводитьВОтчет Тогда
				Если Выборка.СкладСоглашениеЕстьГруппа Тогда
					ТекстОшибки = НСтр("ru = 'Склад должен входить в группу складов ""%СкладСоглашение%""'");
				Иначе
					ТекстОшибки = НСтр("ru = 'Склад не должен отличаться от значения в соглашении ""%СкладСоглашение%""'");
				КонецЕсли;
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СкладСоглашение%", Выборка.СкладСоглашение);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ДокументЗакупки,
					"Склад",
					,
					Отказ);
			Иначе 
				Если Выборка.СкладСоглашениеЕстьГруппа Тогда
					ТекстОшибки = НСтр("ru = '""%Склад%"" должен входить в группу складов соглашения ""%СкладСоглашение%""'");
				Иначе
					ТекстОшибки = НСтр("ru = '""%Склад%"" отличается от склада в соглашении ""%СкладСоглашение%""'");
				КонецЕсли;
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СкладСоглашение%", Выборка.СкладСоглашение);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Склад%", ДокументЗакупки.Склад);
				Отчеты.ОтклоненияОтУсловийЗакупок.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Склад'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияВозвращатьМногооборотнуюТару Тогда
			
			Если Выборка.ЭтоСоглашение Тогда
				ТекстОшибки = НСтр("ru = 'Признак возврата многооборотной тары не должен отличаться от значения в типовом соглашении'");
			Иначе
				ТекстОшибки = НСтр("ru = 'Признак возврата многооборотной тары не должен отличаться от значения в соглашении'");
			КонецЕсли;
			
			Если НЕ ВыводитьВОтчет Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ДокументЗакупки,
					?(Выборка.ЭтоСоглашение,"ВозвращатьМногооборотнуюТару","ВернутьМногооборотнуюТару"),
					,
					Отказ);
			Иначе 
				Отчеты.ОтклоненияОтУсловийЗакупок.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Возврат тары'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияСрокВозвратаМногооборотнойТары И Выборка.ВозвратМногооборотнойТары Тогда
			
			Если НЕ ВыводитьВОтчет Тогда
				ТекстОшибки = НСтр("ru = 'Срок возврата многооборотной тары не должен отличаться от значения в соглашении (%СрокВозврата%)'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СрокВозврата%", Выборка.СрокВозвратаМногооборотнойТары);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ДокументЗакупки,
					"СрокВозвратаМногооборотнойТары",
					,
					Отказ);
			Иначе 
					
				ТекстОшибки = НСтр("ru = '(%СрокВозвратаТиповое%) отличается от срока в соглашении (%СрокВозврата%)'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СрокВозврата%", Выборка.СрокВозвратаМногооборотнойТары);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СрокВозвратаТиповое%", ДокументЗакупки.СрокВозвратаМногооборотнойТары);
				Отчеты.ОтклоненияОтУсловийЗакупок.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Срок возврата тары'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;

		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияТребуетсяЗалогЗаТару Тогда
			
			Если Выборка.ЭтоСоглашение Тогда
				ТекстОшибки = НСтр("ru = 'Признак требования залога за тару не должен отличаться от значения в типовом соглашении'");
			Иначе
				ТекстОшибки = НСтр("ru = 'Признак требования залога за тару не должен отличаться от значения в соглашении'");
			КонецЕсли;
			
			Если НЕ ВыводитьВОтчет Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ДокументЗакупки,
					"ТребуетсяЗалогЗаТару",
					,
					Отказ);
			Иначе 
				Отчеты.ОтклоненияОтУсловийЗакупок.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Требование залога за тару'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиДатаВозвратаМногооборотнойТары И Выборка.ВозвратМногооборотнойТары Тогда
			
			ДатаВозвратаМногооборотнойТары = МногооборотнаяТараСервер.РассчитатьДатуВозвратаМногооборотнойТары(
				ДокументЗакупки,
				Выборка.СрокВозвратаМногооборотнойТары,
				Выборка.РассчитыватьДатуВозвратаТарыПоКалендарю,
				Выборка.КалендарьВозвратаТары);
			
			Если ДатаВозвратаМногооборотнойТары <> ДокументЗакупки.ДатаВозвратаМногооборотнойТары Тогда
				ТекстОшибки = НСтр("ru = 'Дата возврата многооборотной тары не должна отличаться от срока возврата в соглашении'");
				
				Если НЕ ВыводитьВОтчет Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							ТекстОшибки,
							ДокументЗакупки,
							"ДатаВозвратаМногооборотнойТары",
							,
							Отказ);
				Иначе 
					Отчеты.ОтклоненияОтУсловийЗакупок.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Дата возврата тары'"), ТекстОшибки, МассивОтклонений);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияПорядокРасчетов Тогда
			Если Выборка.ИспользуютсяДоговорыКонтрагентов Тогда
				ТекстОшибки = НСтр("ru = 'Порядок расчетов не должен отличаться от значения в договоре ""%ПорядокРасчетов%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПорядокРасчетов%", Выборка.ПорядокРасчетовСоглашение);
				Если НЕ ВыводитьВОтчет Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						ДокументЗакупки,
						"ПорядокРасчетов",
						,
						Отказ);
				Иначе 
					Отчеты.ОтклоненияОтУсловийЗакупок.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Порядок расчетов'"), ТекстОшибки, МассивОтклонений);
				КонецЕсли;
			Иначе
				Если Выборка.ЭтоСоглашение Тогда
					ТекстОшибки = НСтр("ru = 'Порядок расчетов не должен отличаться от значения в типовом соглашении ""%ПорядокРасчетов%""'");
				Иначе
					ТекстОшибки = НСтр("ru = 'Порядок расчетов не должен отличаться от значения в соглашении ""%ПорядокРасчетов%""'");
				КонецЕсли;
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПорядокРасчетов%", Выборка.ПорядокРасчетовСоглашение);
				
				Если НЕ ВыводитьВОтчет Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						ДокументЗакупки,
						"ПорядокРасчетов",
						,
						Отказ);
				Иначе 
					Отчеты.ОтклоненияОтУсловийЗакупок.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Порядок расчетов'"), ТекстОшибки, МассивОтклонений);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Выводит сообщения об ошибках в тч Товары документа закупки
//
// Параметры:
// Выборка         - ВыборкаИзРезультатаЗапроса
// ДокументЗакупки - ДокументОбъект - объект, для которого необходимо вывести сообщения об ошибках
// Отказ           - Булево- Флаг отказа от проведения документа
// ДеревоОтклонений  - ДеревоЗначений - Дерево с отклонениями табличной части от условий закупок.
//
Процедура СообщитьОбОшибкахТоварыДокументаЗакупки(Выборка,
	                                              ДокументЗакупки,
	                                              Отказ,
	                                              ДеревоОтклонений = Неопределено)
	
	ВыводитьВОтчет = (ДеревоОтклонений <> Неопределено);
	
	Пока Выборка.Следующий() Цикл
		НомерСтроки = Выборка.НомерСтроки;
		АдресОшибки = " " + НСтр("ru = 'в строке %НомерСтроки% списка ""Товары""'");
		АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%", НомерСтроки);
		
		Если Выборка.ЕстьОшибкиМаксимальноДопустимаяЦена Тогда
			
			Если ЗначениеЗаполнено(Выборка.Характеристика) Тогда
				
				ТекстОшибки = НСтр("ru = 'Цена на номенклатуру ""%Номенклатура%"" с характеристикой ""%Характеристика%"" не должна быть выше цены по соглашению ""%МаксимальноДопустимаяЦена% %ВалютаЦены%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки,"%Номенклатура%",              Выборка.Номенклатура);
				ТекстОшибки = СтрЗаменить(ТекстОшибки,"%Характеристика%",            Выборка.Характеристика);
				ТекстОшибки = СтрЗаменить(ТекстОшибки,"%МаксимальноДопустимаяЦена%", Выборка.МаксимальноДопустимаяЦена);
				ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ВалютаЦены%",                Выборка.ВалютаЦены);
				
			Иначе
				
				ТекстОшибки = НСтр("ru = 'Цена на номенклатуру ""%Номенклатура%"" не должна быть выше цены по соглашению ""%МаксимальноДопустимаяЦена% %ВалютаЦены%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%",              Выборка.Номенклатура);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%МаксимальноДопустимаяЦена%", Выборка.МаксимальноДопустимаяЦена);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВалютаЦены%",                Выборка.ВалютаЦены);
				
			КонецЕсли;
			
			Если ВыводитьВОтчет Тогда
				Отчеты.ОтклоненияОтУсловийЗакупок.ДобавитьОтклонениеСтрокиВДеревоОтклонений(НомерСтроки, "Цена", ТекстОшибки, ДеревоОтклонений);
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ДокументЗакупки,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", НомерСтроки, "Цена"),
					,
					Отказ);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиВидЦеныПоставщика Тогда
			
			ТекстОшибки = НСтр("ru = 'Вид цен поставщика не должен отличаться от вида цен поставщика в соглашении ""%ВидЦеныПоставщика%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ВидЦеныПоставщика%", Выборка.ВидЦеныПоставщика);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки + АдресОшибки,
				ДокументЗакупки,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", НомерСтроки, "ВидЦеныПоставщика"),
				,
				Отказ);
				
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Выводит сообщения об ошибках вхождения цен документа закупки в допустимый диапазон.
//
// Параметры:
// Выборка         - ВыборкаИзРезультатаЗапроса
// ДокументЗакупки - ДокументОбъект - объект, для которого необходимо вывести сообщения об ошибках
// Отказ           - Булево - Флаг отказа от проведения документа
// ДеревоОтклонений  - ДеревоЗначений - Дерево с отклонениями табличной части от условий закупок.
//
Процедура СообщитьОбОшибкахВхождениеЦенВДопустимыйДиапазон(Выборка,
	                                                       ДокументЗакупки,
	                                                       Отказ,
	                                                       ИспользоватьСкидкиНаценки,
	                                                       ДеревоОтклонений = Неопределено)
	
	ВыводитьВОтчет = (ДеревоОтклонений <> Неопределено);
	
	Пока Выборка.Следующий() Цикл
		НомерСтроки = Выборка.НомерСтроки;
		
		Если Выборка.ЕстьОшибкиМаксимальноДопустимаяЦена Тогда
			
			Если ЗначениеЗаполнено(Выборка.Характеристика) Тогда
				
				Если ИспользоватьСкидкиНаценки Тогда
					ТекстОшибки = НСтр("ru = 'Цена с учетом скидки (наценки) на номенклатуру ""%Номенклатура%"" с характеристикой ""%Характеристика%"" не должна быть выше максимально допустимой цены ""%МаксимальноДопустимаяЦена% %ВалютаЦены%""'");
				Иначе
					ТекстОшибки = НСтр("ru = 'Цена на номенклатуру ""%Номенклатура%"" с характеристикой ""%Характеристика%"" не должна быть выше максимально допустимой цены ""%МаксимальноДопустимаяЦена% %ВалютаЦены%""'");
				КонецЕсли;
					
				ТекстОшибки = СтрЗаменить(ТекстОшибки,"%Номенклатура%",              Выборка.Номенклатура);
				ТекстОшибки = СтрЗаменить(ТекстОшибки,"%Характеристика%",            Выборка.Характеристика);
				ТекстОшибки = СтрЗаменить(ТекстОшибки,"%МаксимальноДопустимаяЦена%", Выборка.МаксимальноДопустимаяЦена);
				ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ВалютаЦены%",                Выборка.ВалютаЦены);
				
			Иначе
				
				Если ИспользоватьСкидкиНаценки Тогда
					ТекстОшибки = НСтр("ru = 'Цена с учетом скидки (наценки) на номенклатуру ""%Номенклатура%"" не должна быть выше максимально допустимой цены ""%МаксимальноДопустимаяЦена% %ВалютаЦены%""'");
				Иначе
					ТекстОшибки = НСтр("ru = 'Цена на номенклатуру ""%Номенклатура%"" не должна быть выше максимально допустимой цены ""%МаксимальноДопустимаяЦена% %ВалютаЦены%""'");
				КонецЕсли;
					
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%",              Выборка.Номенклатура);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%МаксимальноДопустимаяЦена%", Выборка.МаксимальноДопустимаяЦена);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВалютаЦены%",                Выборка.ВалютаЦены);
				
			КонецЕсли;
			
			Если ВыводитьВОтчет Тогда
				Отчеты.ОтклоненияОтУсловийЗакупок.ДобавитьОтклонениеСтрокиВДеревоОтклонений(НомерСтроки, "Цена", ТекстОшибки, ДеревоОтклонений);
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ДокументЗакупки,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", НомерСтроки, "Цена"),
					,
					Отказ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Выводит сообщения об ошибках заполненности аналитик услуг для услуг в документе закупки.
//
// Параметры:
// Выборка         - ВыборкаИзРезультатаЗапроса
// ДокументЗакупки - ДокументОбъект - объект, для которого необходимо вывести сообщения об ошибках
// Отказ           - Булево - Флаг отказа от проведения документа.
//
Процедура СообщитьОбОшибкахКорректностьЗаполненияАналитикиУслуг(Выборка, ДокументЗакупки, Отказ)
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов") Тогда
	
		Пока Выборка.Следующий() Цикл
			
			ТекстОшибки = НСтр("ru = 'Необходимо заполнить статью расходов для услуги ""%Номенклатура%"" в строке %НомерСтроки% списка ""Товары""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%", Выборка.Номенклатура);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%",  Выборка.НомерСтроки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ДокументЗакупки,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки,"СтатьяРасходов"),
				,
				Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Выводит сообщения об ошибках наличия услуг в документе закупки
//
// Параметры:
// Выборка         - ВыборкаИзРезультатаЗапроса
// ДокументЗакупки - ДокументОбъект - объект, для которого необходимо вывести сообщения об ошибках
// Отказ           - Булево - Флаг отказа от проведения документа.
//
Процедура СообщитьОбОшибкахНаличиеУслугРаботВДокументеЗакупки(Выборка, ДокументЗакупки, Отказ)
	
	Пока Выборка.Следующий() Цикл
		
		ТекстОшибки = НСтр("ru = 'Нельзя указывать номенклатуру ""%Номенклатура%"" с типом ""%ТипНоменклатуры%"" (строка %НомерСтроки% списка ""Товары""), для документа с типом хоз. операции ""%ХозяйственнаяОперация%""'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%",          Выборка.Номенклатура);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ТипНоменклатуры%",       Выборка.ТипНоменклатуры);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%",           Выборка.НомерСтроки);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ХозяйственнаяОперация%", ДокументЗакупки.ХозяйственнаяОперация);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ДокументЗакупки,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки,"Номенклатура"),
			,
			Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

// Выводит сообщения об ошибках наличия прослеживаемых работ в документе закупки
//
// Параметры:
// Выборка         - ВыборкаИзРезультатаЗапроса
// ДокументЗакупки - ДокументОбъект - объект, для которого необходимо вывести сообщения об ошибках
// Отказ           - Булево - Флаг отказа от проведения документа.
//
Процедура СообщитьОбОшибкахНаличиеПрослеживаемыхРаботВДокументеЗакупки(Выборка, ДокументЗакупки, Отказ)
	
	Пока Выборка.Следующий() Цикл
		
		ТекстОшибки = НСтр("ru = 'Нельзя указывать прослеживаемую работу ""%Номенклатура%"" (строка %НомерСтроки% списка ""Товары""), для документа с типом хоз. операции ""%ХозяйственнаяОперация%""'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%",          Выборка.Номенклатура);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%",           Выборка.НомерСтроки);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ХозяйственнаяОперация%", ДокументЗакупки.ХозяйственнаяОперация);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ДокументЗакупки,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки,"Номенклатура"),
			,
			Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

// Выводит сообщения об ошибках отсутствия соглашения в документе закупки
//
// Параметры:
// ЕстьОшибкиСоглашениеНеУказано - Булево - признак наличия ошибки незаполненности соглашения 
// ДокументЗакупки               - ДокументОбъект - объект, для которого необходимо вывести сообщения об ошибках
// Отказ                         - Булево - Флаг отказа от проведения документа.
//
Процедура СообщитьОбОшибкахСоглашениеНеУказано(ЕстьОшибкиСоглашениеНеУказано, ДокументЗакупки, Отказ)
	
	Если ЕстьОшибкиСоглашениеНеУказано Тогда
	
		ТекстОшибки = НСтр("ru = 'Соглашение не указано. Документ не может быть проведен без согласования'");
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ДокументЗакупки,
			"Соглашение",
			,
			Отказ);
			
	КонецЕсли;
		
КонецПроцедуры

// Выводит сообщения об ошибках наличия услуг в документе закупки
//
// Параметры:
// Выборка         - ВыборкаИзРезультатаЗапроса
// ДокументЗакупки - ДокументОбъект - объект, для которого необходимо вывести сообщения об ошибках
// Отказ           - Булево - Флаг отказа от проведения документа
// ДеревоОтклонений  - ДеревоЗначений - Дерево с отклонениями табличной части от условий закупок.
//
Процедура СообщитьОбОшибкахДопустимостьРучныхСкидокНаценок(Знач Выборка,
	                                                       Знач ДокументЗакупки,
	                                                       Отказ,
	                                                       ДеревоОтклонений = Неопределено)
	
	ВыводитьВОтчет = (ДеревоОтклонений <> Неопределено);
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ЕстьОшибкиЗаполненияРучнойНаценки Тогда
			НомерСтроки = Выборка.НомерСтроки;
			ТекстОшибки = НСтр("ru = 'Ручная наценка превышает максимально допустимую наценку ""%МаксимальнаяСуммаРучнойНаценки% %"" в строке %НомерСтроки% списка ""Товары""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%МаксимальнаяСуммаРучнойНаценки%", Выборка.МаксимальнаяСуммаРучнойНаценки);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%",                    НомерСтроки);
			
			Если ВыводитьВОтчет Тогда
				Отчеты.ОтклоненияОтУсловийЗакупок.ДобавитьОтклонениеСтрокиВДеревоОтклонений(НомерСтроки, "ПроцентРучнойСкидки", ТекстОшибки, ДеревоОтклонений);
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ДокументЗакупки,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки,"ПроцентРучнойСкидки"),
					,
					Отказ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Выводит сообщения об ошибках заполнения склада в документе закупки
//
// Параметры:
// Выборка         - ВыборкаИзРезультатаЗапроса
// ДокументЗакупки - ДокументОбъект - Объект, для которого необходимо вывести сообщения об ошибках
// Отказ           - Булево - Флаг отказа от проведения документа.
//
Процедура СообщитьОбОшибкахКорректностьЗаполненияСклада(Знач Выборка,
	                                                    Знач ДокументЗакупки,
	                                                    Отказ)
	
	Если Выборка.Следующий() Тогда
		
		ТекстОшибки = НСтр("ru = 'Поле ""Склад"" не заполнено'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ДокументЗакупки,
			"Склад",
			,
			Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

// Выводит сообщения об ошибках заполнения склада в табличной части "Товары" документа закупки.
//
Процедура СообщитьОбОшибкахКорректностьЗаполненияСкладаВТабличнойЧастиТовары(Знач Выборка,
	                                                    Знач ДокументЗакупки,
	                                                    Отказ,
	                                                    ПредставлениеПоляСклад = Неопределено)
	
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(ПредставлениеПоляСклад) Тогда
			ПредставлениеПоляСклад = НСтр("ru = 'Склад'");
		КонецЕсли;
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не заполнена колонка ""%1"" в строке %2 списка ""%3""'"),
			ПредставлениеПоляСклад,
			Выборка.НомерСтроки,
			Выборка.ПредставлениеТабличнойЧасти);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ДокументЗакупки,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(Выборка.ИмяТабличнойЧасти, Выборка.НомерСтроки,"Склад"),
			,
			Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

// Выводит сообщения об ошибках корректности заполнения этапов графика оплаты
//
// Параметры:
// Выборка           - ВыборкаИзРезультатаЗапроса
// ДокументЗакупки   - ДокументОбъект - Объект, для которого необходимо вывести сообщения об ошибках
// Отказ             - Булево - Флаг отказа от проведения документа
// ДеревоОтклонений  - ДеревоЗначений - Дерево с отклонениями табличной части от условий закупок.
//
Процедура СообщитьОбОшибкахКорректностьЭтаповГрафикаОплаты(Знач Выборка, Знач ДокументЗакупки, Отказ, ДеревоОтклонений = Неопределено, МассивОтклонений = Неопределено)
	
	ГрафикПоУмолчанию = Новый ТаблицаЗначений();
	ГрафикПоУмолчанию.Колонки.Добавить("ВариантОплаты");
	ГрафикПоУмолчанию.Колонки.Добавить("ВариантОтсчета");
	ГрафикПоУмолчанию.Колонки.Добавить("ДатаПлатежа", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ГрафикПоУмолчанию.Колонки.Добавить("ПроцентПлатежа");
	ГрафикПоУмолчанию.Колонки.Добавить("СуммаПлатежа");
	ГрафикПоУмолчанию.Колонки.Добавить("ПроцентЗалогаЗаТару");
	ГрафикПоУмолчанию.Колонки.Добавить("СуммаЗалогаЗаТару");
	ГрафикПоУмолчанию.Колонки.Добавить("Сдвиг");
	
	Если Выборка.Следующий() И НЕ Выборка.НакладнаяПоЗаказам Тогда
		ПараметрыЗаполнения = ЭтапыОплатыСервер.ПараметрыЗаполненияЭтаповОплаты();
		ПараметрыЗаполнения.ЭтоРасчетыСКлиентами = Ложь;
		ПараметрыЗаполнения.НакладнаяПоЗаказам   = Ложь;
		ПараметрыЗаполнения.ПорядокРасчетов      = Выборка.ПорядокРасчетов;
		ПараметрыЗаполнения.ЭтоЗаказ             = Выборка.ЭтоЗаказ;
		ПараметрыЗаполнения.ДатаЗаказа           = ?(Выборка.ЭтоЗаказ,Выборка.Дата,Дата(1,1,1));
		ПараметрыЗаполнения.ДатаСогласования     = Выборка.ДатаСогласования;
		Если Выборка.НеОтгружатьЧастями Тогда
			ПараметрыЗаполнения.ДатаОтгрузки = Выборка.ДатаОтгрузки;
			ПараметрыЗаполнения.СуммаОплаты       = 100;
			ПараметрыЗаполнения.СуммаЗалогаЗаТару = 0;
		Иначе
			Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ДокументЗакупки)) Тогда
				ТаблицаТовары = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДокументЗакупки).СуммыПоЗаказам(ДокументЗакупки);
			Иначе
				ТаблицаТовары = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДокументЗакупки.Ссылка).СуммыПоЗаказам(ДокументЗакупки);
			КонецЕсли;
			ПараметрыЗаполнения.ДатаОтгрузки = ТаблицаТовары;
			ПараметрыЗаполнения.СуммаЗалогаЗаТару = ТаблицаТовары.Итог("СуммаЗалогаЗаТару");
			ПараметрыЗаполнения.СуммаОплаты       = ТаблицаТовары.Итог("СуммаПлатежа");
		КонецЕсли;
		ПараметрыЗаполнения.Соглашение               = Выборка.Соглашение;
		ПараметрыЗаполнения.ГрафикСоглашенияЗаполнен = ЭтапыОплатыВызовСервера.ГрафикСоглашенияЗаполнен(Выборка.Соглашение);
		ПараметрыЗаполнения.Календарь                = Выборка.Календарь;
		
		ЭтапыОплатыСервер.ЗаполнитьЭтапыОплаты(ГрафикПоУмолчанию, ПараметрыЗаполнения);
	КонецЕсли;
	
	СуммаПроцентовПлатежа = 0;
	СуммаПроцентовПлатежаШаблона = 0;
	ВыводитьВОтчет = (ДеревоОтклонений <> Неопределено);
	
	Выборка.Сбросить();
	
	Если Выборка.Количество() <> ГрафикПоУмолчанию.Количество() Тогда
			
		ТекстОшибки = НСтр("ru = 'Количество этапов оплаты в документе (%КоличествоЭтаповДокумента%) должно совпадать с количеством этапов в графике (%КоличествоЭтаповГрафика%)'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%КоличествоЭтаповДокумента%", Выборка.Количество());
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%КоличествоЭтаповГрафика%",   ГрафикПоУмолчанию.Количество());
		
		Если ВыводитьВОтчет Тогда
			Отчеты.ОтклоненияОтУсловийЗакупок.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Этапы оплаты'"), ТекстОшибки, МассивОтклонений);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ДокументЗакупки,
				"НадписьЭтапыОплаты",
				Отказ);
		КонецЕсли;
	КонецЕсли;
	
	сч = 0;
	Пока Выборка.Следующий() Цикл
		
		Если Не Выборка.ЕстьОшибкиЗаполненияЭтапыГрафикаОплаты Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаГрафикаПоУмолчанию = ГрафикПоУмолчанию[сч];
		
		НомерСтроки = Выборка.НомерСтроки;
		АдресОшибки = " " + НСтр("ru = 'в строке %НомерСтроки% списка ""Этапы оплаты""'");
		АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%", НомерСтроки);
		
		Если СтрокаГрафикаПоУмолчанию.ВариантОплаты <> Выборка.ВариантОплаты Тогда
			
			ТекстОшибки = НСтр("ru = 'Вариант контроля отличается от значения в графике оплаты ""%ВариантОплатыШаблона%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВариантОплатыШаблона%", СтрокаГрафикаПоУмолчанию.ВариантОплаты); 
			
			Если ВыводитьВОтчет Тогда
				Отчеты.ОтклоненияОтУсловийЗакупок.ДобавитьОтклонениеСтрокиВДеревоОтклонений(НомерСтроки, "ВариантОплаты", ТекстОшибки, ДеревоОтклонений);
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки + АдресОшибки,
					,
					"НадписьЭтапыОплаты",
					,
					Отказ);
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаГрафикаПоУмолчанию.ДатаПлатежа > Выборка.ДатаПлатежа Тогда
			
			ТекстОшибки = НСтр("ru = 'Дата платежа должна быть не меньше, чем в графике оплаты ""%ДатаПлатежаШаблона%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДатаПлатежаШаблона%", Формат(СтрокаГрафикаПоУмолчанию.ДатаПлатежа, "ДЛФ=DD")); 
			
			Если ВыводитьВОтчет Тогда
				Отчеты.ОтклоненияОтУсловийЗакупок.ДобавитьОтклонениеСтрокиВДеревоОтклонений(НомерСтроки, "ДатаПлатежа", ТекстОшибки, ДеревоОтклонений);
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки + АдресОшибки,
					,
					"НадписьЭтапыОплаты",
					,
					Отказ);
			КонецЕсли;
		КонецЕсли;
		
		СуммаПроцентовПлатежаШаблона = СуммаПроцентовПлатежаШаблона + СтрокаГрафикаПоУмолчанию.ПроцентПлатежа;
		СуммаПроцентовПлатежа = СуммаПроцентовПлатежа + Выборка.ПроцентПлатежа;
		
		Если СуммаПроцентовПлатежа > СуммаПроцентовПлатежаШаблона Тогда
			
			ТекстОшибки = НСтр("ru = 'Проценты до следующего платежа по графику (""%ПроцентПлатежа%%"") не должны превышать проценты по графику соглашения (""%ПроцентПлатежаШаблона%%"")'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПроцентПлатежа%", СуммаПроцентовПлатежа); 
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПроцентПлатежаШаблона%", СуммаПроцентовПлатежаШаблона); 
			
			Если ВыводитьВОтчет Тогда
				Отчеты.ОтклоненияОтУсловийЗакупок.ДобавитьОтклонениеСтрокиВДеревоОтклонений(НомерСтроки, "ПроцентПлатежа", ТекстОшибки, ДеревоОтклонений);
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки + АдресОшибки,
					,
					"НадписьЭтапыОплаты",
					,
					Отказ);
			КонецЕсли;
		КонецЕсли;
		
		сч = сч + 1 ;
		
	КонецЦикла;

КонецПроцедуры

// Выводит сообщения об ошибках корректности заполнения возвращаемых товаров
//
// Параметры:
// 	ТаблицаОшибок - ТаблицаЗначений - Выгрузка результата запроса.
Процедура СообщитьОбОшибкахКорректностиВозвращаемыхТоваров(Знач ТаблицаОшибок)
	
	Для каждого СтрокаОшибки Из ТаблицаОшибок Цикл
		СообщениеОбОшибке = НСтр("ru = 'Возврат по номенклатуре %Номенклатура% \ %Характеристика% превышает количество полученных товаров по документу поступления %НомерРеализации% на %Количество% %ЕдиницаИзмерения%'");
		Если СтрокаОшибки.Количество < 0 Тогда
			СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Номенклатура%",         СтрокаОшибки.Номенклатура);
			СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Характеристика%",       СтрокаОшибки.Характеристика);
			СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Количество%",          -СтрокаОшибки.Количество);
			СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%ЕдиницаИзмерения%",     СтрокаОшибки.ЕдиницаИзмерения);
			СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%НомерРеализации%",      СтрокаОшибки.НомерПоступления);
			Если НЕ ЗначениеЗаполнено(СтрокаОшибки.Характеристика) Тогда
				СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, " \ ",      "");
			КонецЕсли;
			ОбщегоНазначения.СообщитьПользователю(СообщениеОбОшибке);
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры


// Выводит сообщения об ошибках заполнения цен в табличной части "Товары" документа закупки.
//
// Параметры:
// 	Выборка          - ВыборкаИзРезультатаЗапроса
// 	ДокументЗакупки  - ДокументОбъект - Объект, для которого необходимо вывести сообщения об ошибках
// 	Отказ            - Булево - Флаг отказа от проведения документа.
// 
Процедура СообщитьОбОшибкахКонтрольЗаполненияЦен(Знач Выборка,
	                                             Знач ДокументЗакупки,
	                                             Отказ)
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.ЕстьОшибкиЗаполненияЦен Тогда
			
			ТекстОшибки = НСтр("ru = 'Не заполнена колонка ""Цена"" в строке %НомерСтроки% списка ""Товары""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%",  Выборка.НомерСтроки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ДокументЗакупки,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки,"Цена"),
				,
				Отказ);
			
		КонецЕсли;
			
		Если Выборка.ЕстьОшибкиЗаполненияСумм Тогда
			
			ТекстОшибки = НСтр("ru = 'Не заполнена колонка ""Сумма"" в строке %НомерСтроки% списка ""Товары""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%",  Выборка.НомерСтроки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ДокументЗакупки,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки,"Сумма"),
				,
				Отказ);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Выводит сообщение, если организация распоряжения отличается от организации документа.
//
// Параметры:
// 	Выборка          - ВыборкаИзРезультатаЗапроса
// 	ДокументЗакупки  - ДокументОбъект - Объект, для которого необходимо вывести сообщения об ошибках
// 	Отказ            - Булево - Флаг отказа от проведения документа.
// 
Процедура СообщитьОбОшибкахСоответствиеОрганизацииРаспоряжений(Знач Выборка, Знач ДокументЗакупки, Отказ)
	
	Пока Выборка.Следующий() Цикл
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Организация распоряжения указанного в строке %1 списка ""%2"" должна совпадать с организацией документа'"),
			Выборка.НомерСтроки,
			Выборка.ПредставлениеТабличнойЧасти);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ДокументЗакупки,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(Выборка.ИмяТабличнойЧасти, Выборка.НомерСтроки, "Распоряжение"),
			,
			Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

// Выводит сообщения об ошибках указания ставки НДС в табличной части документа закупки.
//
// Параметры:
// 	Выборка          - ВыборкаИзРезультатаЗапроса
// 	ДокументЗакупки  - ДокументОбъект - Объект, для которого необходимо вывести сообщения об ошибках
// 	Отказ            - Булево - Флаг отказа от проведения документа.
// 
Процедура СообщитьОбОшибкахКорректностьУказанияСтавкиНДСЗакупки(Знач Выборка, Знач ДокументЗакупки, Отказ)

	Пока Выборка.Следующий() Цикл
		
		ТекстОшибки = "";
		
		Если ЗначениеЗаполнено(Выборка.КорректнаяСтавкаНДС) Тогда
			ТекстОшибки = НСтр("ru = 'В строке %НомерСтроки% списка ""Товары"" необходимо выбрать ставку НДС ""%СтавкаНДС%"".'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%",        Выборка.НомерСтроки);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СтавкаНДС%",          Выборка.КорректнаяСтавкаНДС);
			
		Иначе
			ТекстОшибки = НСтр("ru = 'В строке %НомерСтроки% списка ""Товары"" выбрана несоответствующая налогообложению ""%НалогообложениеНДС%"" ставка НДС ""%СтавкаНДС%"".'");
			
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%",        Выборка.НомерСтроки);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НалогообложениеНДС%", Выборка.НалогообложениеНДС);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СтавкаНДС%",          Выборка.ВыбраннаяСтавкаНДС);
			
		КонецЕсли;

			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ДокументЗакупки,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(Выборка.ИмяТабличнойЧасти, Выборка.НомерСтроки, "СтавкаНДС"),
			Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

// Выводит сообщения об ошибках указания суммы НДС в табличной части документа закупки.
//
// Параметры:
// 	Выборка          - ВыборкаИзРезультатаЗапроса
// 	ДокументЗакупки  - ДокументОбъект - Объект, для которого необходимо вывести сообщения об ошибках
// 	Отказ            - Булево - Флаг отказа от проведения документа.
// 
Процедура СообщитьОбОшибкахКорректностьСуммыИСуммыНДСЗакупки(Знач Выборка, Знач ДокументЗакупки, Отказ)
	
	Пока Выборка.Следующий() Цикл
		
		ТекстОшибки = НСтр("ru = 'Сумма НДС %СуммаНДС% %Валюта% при ставке ""%СтавкаНДС%"" больше общей суммы по строке %Сумма% %Валюта%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СуммаНДС%",          Выборка.СуммаНДС);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Сумма%",             Выборка.Сумма);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СтавкаНДС%",         Выборка.СтавкаНДС);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Валюта%",            Выборка.Валюта);
		
		АдресОшибки = " " + НСтр("ru = 'в строке %НомерСтроки% списка ""%ПредставлениеТЧ%""'");
		АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%",     Выборка.НомерСтроки);
		АдресОшибки = СтрЗаменить(АдресОшибки, "%ПредставлениеТЧ%", Выборка.ПредставлениеТабличнойЧасти);
		
		ПродажиСервер.СообщитьПользователюОбОшибке(
			ТекстОшибки + АдресОшибки,
			ДокументЗакупки,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(Выборка.ИмяТабличнойЧасти, Выборка.НомерСтроки, "СуммаНДС"),
			Отказ);
				
	КонецЦикла;
	
КонецПроцедуры

// Выводит сообщения об ошибках соответствия влюты, указанной в договоре агентской закупки, и валюты документа.
//
// Параметры:
// 	Выборка          - ВыборкаИзРезультатаЗапроса
// 	ДокументПродажи  - ДокументОбъект.ВозвратТоваровПоставщику - документ, для которого необходимо вывести сообщения об ошибках.
// 	Отказ            - Булево - Флаг отказа от проведения документа.
//
Процедура СообщитьОбОшибкахСоответствияВалютыПоАгентскойЗакупке(Выборка, ДокументЗакупки, Отказ)
	
	Пока Выборка.Следующий() Цикл
		
		ТекстОшибки = НСтр("ru = 'Для номенклатуры %Номеклатура%, закупаемой по агентской схеме, валюта, указанная в договоре назначения, должна совпадать с валютой документа'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номеклатура%",          Выборка.Номенклатура);
		
		АдресОшибки = " " + НСтр("ru='в строке %НомерСтроки% списка ""%ПредставлениеТЧ%""'");
		АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%",     Выборка.НомерСтроки);
		АдресОшибки = СтрЗаменить(АдресОшибки, "%ПредставлениеТЧ%", Выборка.ПредставлениеТабличнойЧасти);
		
		ПродажиСервер.СообщитьПользователюОбОшибке(
			ТекстОшибки + АдресОшибки,
			ДокументЗакупки,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(Выборка.ИмяТабличнойЧасти, Выборка.НомерСтроки, "Назначение"),
			Отказ);
				
	КонецЦикла;
	
КонецПроцедуры

// Выводит сообщения об ошибках заполнения заказа клиента, если используется отгрузка по агентской схеме закупки с обособлением по заказам.
//
// Параметры:
// 	Выборка          - ВыборкаИзРезультатаЗапроса
// 	ДокументПродажи  - ДокументОбъект.ОтгрузкаТоваровСХранения - документ, для которого необходимо вывести сообщения об ошибках.
// 	Отказ            - Булево - Флаг отказа от проведения документа.
//
Процедура СообщитьОбОшибкахКонтрольЗаказаКлиента(Выборка, ДокументЗакупки, Отказ)
	
	Пока Выборка.Следующий() Цикл
		
		ТекстОшибки = НСтр("ru = 'Не заполнен Заказ клиента'");
		
		АдресОшибки = " " + НСтр("ru='в строке %НомерСтроки% списка ""%ПредставлениеТЧ%""'");
		АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%",     Выборка.НомерСтроки);
		АдресОшибки = СтрЗаменить(АдресОшибки, "%ПредставлениеТЧ%", Выборка.ПредставлениеТабличнойЧасти);
		
		ПродажиСервер.СообщитьПользователюОбОшибке(
			ТекстОшибки + АдресОшибки,
			ДокументЗакупки,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(Выборка.ИмяТабличнойЧасти, Выборка.НомерСтроки, "ЗаказКлиента"),
			Отказ);
				
	КонецЦикла;
	
КонецПроцедуры

// Выводит сообщения об ошибках заполнения назначения.
//
// Параметры:
// 	Выборка          - ВыборкаИзРезультатаЗапроса
// 	ДокументПродажи  - ДокументОбъект.ОтгрузкаТоваровСХранения - документ, для которого необходимо вывести сообщения об ошибках.
// 	Отказ            - Булево - Флаг отказа от проведения документа.
//
Процедура СообщитьОбОшибкахКонтрольНазначения(Выборка, ДокументЗакупки, Отказ);
	
	Пока Выборка.Следующий() Цикл
		
		ТекстОшибки = НСтр("ru = 'Не заполнено Назначение'");
		
		АдресОшибки = " " + НСтр("ru='в строке %НомерСтроки% списка ""%ПредставлениеТЧ%""'");
		АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%",     Выборка.НомерСтроки);
		АдресОшибки = СтрЗаменить(АдресОшибки, "%ПредставлениеТЧ%", Выборка.ПредставлениеТабличнойЧасти);
		
		ПродажиСервер.СообщитьПользователюОбОшибке(
			ТекстОшибки + АдресОшибки,
			ДокументЗакупки,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(Выборка.ИмяТабличнойЧасти, Выборка.НомерСтроки, "Назначение"),
			Отказ);
				
	КонецЦикла;
	
КонецПроцедуры

// Выводит сообщения об ошибках использования списания товаров на расходы при запрещенных для этого хоз. операциях.
//
// Параметры:
// 	Выборка          - ВыборкаИзРезультатаЗапроса
// 	ДокументПродажи  - ДокументОбъект.ПриобретениеТоваровУслуг - документ, для которого необходимо вывести сообщения об ошибках.
// 	Отказ            - Булево - Флаг отказа от проведения документа.
//
Процедура СообщитьОбОшибкахВозможностьСписанияТоваровНаРасходы(Выборка, ДокументЗакупки, Отказ)
	
	Пока Выборка.Следующий() Цикл
		
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Для хозяйственной операции %1 запрещено списание товаров на расходы'"),
			Выборка.ХозяйственнаяОперация);
		
		АдресОшибки = " " + НСтр("ru='в строке %НомерСтроки% списка ""%ПредставлениеТЧ%""'");
		АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%",     Выборка.НомерСтроки);
		АдресОшибки = СтрЗаменить(АдресОшибки, "%ПредставлениеТЧ%", Выборка.ПредставлениеТабличнойЧасти);
		
		ПродажиСервер.СообщитьПользователюОбОшибке(
			ТекстОшибки + АдресОшибки,
			ДокументЗакупки,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(Выборка.ИмяТабличнойЧасти, Выборка.НомерСтроки, "СписатьНаРасходы"),
			Отказ);
				
	КонецЦикла;
	
КонецПроцедуры

// Для использования с методами программного интерфейса УчетНДСУП
// Дополняет переданное Представление в параметре ПараметрыДляФормированияПредставления форматированным текстом представления фискальной операции в документе.
//
// Параметры:
//	Основание - ДокументСсылка - Документ, на основании которого вводится счет-фактура/чек;
//	ПараметрыДляФормированияПредставления - см. УчетНДСУП.СчетаФактурыПолученныеНаОсновании
//
// Возвращаемое значение:
//	Строка, ФорматированнаяСтрока - Представление в параметре ПараметрыДляФормированияПредставления дополненное форматированным текстом представления фискальной операции в документе.
Функция ДополнитьПредставлениеПредставлениемФискальнойОперацииВДокументеЗакупки(Основание, ПараметрыДляФормированияПредставления) Экспорт
	
	МассивПредставлений = Новый Массив;
	МассивПредставлений.Добавить(ПараметрыДляФормированияПредставления.Представление);
	
	ВозможноПробитиеЧека = Ложь;
	ФискальнаяОперацияДанныеЖурнала = Неопределено;
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
		ВозможноПробитиеЧека = Истина;
		ФискальнаяОперацияДанныеЖурнала = ОборудованиеЧекопечатающиеУстройстваВызовСервера.ДанныеФискальнойОперации(Основание);
	КонецЕсли;
	
	Если ( ВозможноПробитиеЧека
		  И ПараметрыДляФормированияПредставления.СчетаФактуры.Количество()=0 
		  И ПараметрыДляФормированияПредставления.ДокументПоОснованиюТребуется) Тогда
		
		Если ФискальнаяОперацияДанныеЖурнала = Неопределено Тогда
			  
			Если Не ПараметрыДляФормированияПредставления.ЕстьПравоИнтерактивногоДобавленияДокументаПоОснованию Тогда
				
				Если ЗначениеЗаполнено(ПараметрыДляФормированияПредставления.Представление) Тогда
					МассивПредставлений.Добавить(".");
					МассивПредставлений.Добавить(" ");
				КонецЕсли;
				
				МассивПредставлений.Добавить(
					Новый ФорматированнаяСтрока(
						НСтр("ru = 'Пробить чек'"),,
						ЦветаСтиля.ГиперссылкаЦвет,,
						"ПробитьЧек"));
						
			Иначе
				
				МассивПредставлений.Добавить(" ");
				МассивПредставлений.Добавить(НСтр("ru = 'или'"));
				МассивПредставлений.Добавить(" ");
				МассивПредставлений.Добавить(
					Новый ФорматированнаяСтрока(
						НСтр("ru = 'пробить чек'"),,
						ЦветаСтиля.ГиперссылкаЦвет,,
						"ПробитьЧек"));
				
			КонецЕсли;
					
		Иначе	
			
			Если ЗначениеЗаполнено(ПараметрыДляФормированияПредставления.Представление) Тогда
				//Факт пробития чека заменяет всё предыдущее представление
				МассивПредставлений.Очистить();
			КонецЕсли;
			
			МассивПредставлений.Добавить(
				Новый ФорматированнаяСтрока(
					СтрШаблон(
						НСтр("ru = 'Пробит чек №%1'"),
						ФискальнаяОперацияДанныеЖурнала.НомерЧекаККМ),,
					ЦветаСтиля.ГиперссылкаЦвет,,
					"ОткрытьЗаписьФискальнойОперации"));
			
		КонецЕсли;
				
	КонецЕсли;
	
	Результат = Новый ФорматированнаяСтрока(МассивПредставлений);
	
	Возврат Результат;
	
КонецФункции

// Вызывает исключение, если партнер не является поставщиком
//
// Параметры:
//	Партнер       - СправочникСсылка.Партнеры - Проверяемый партнер.
//
Процедура ПроверитьВозможностьВводаНаОснованииПартнераПоставщикаКонкурента(Партнер) Экспорт
	
	Если Не ЗначениеЗаполнено(Партнер) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыПартнера = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Партнер, "Поставщик,Конкурент");
	
	Если Не РеквизитыПартнера.Поставщик И Не РеквизитыПартнера.Конкурент Тогда
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьКонкурентнуюРазведку") Тогда
			ТекстОшибки = НСтр("ru = 'Партнер не является поставщиком или конкурентом. Ввод на основании доступен только для поставщика или конкурента.'");
		Иначе
			ТекстОшибки = НСтр("ru = 'Партнер не является поставщиком. Ввод на основании доступен только для поставщика.'");
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
			ТекстОшибки = СтрЗаменить(ТекстОшибки, НСтр("ru = 'Партнер'"), НСтр("ru = 'Контрагент'"));
		КонецЕсли;
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область УсловноеОформление

// Устанавливает условное для реквизитов связанных с отнесением расходов в табличной части "Товары".
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма, для которой настраивается условное оформление.
//
Процедура УстановитьУсловноеОформлениеПоРасходам(Форма) Экспорт
	
	// оформление статей и аналитики расходов

	// Отключение видимости полей, необходимых для услуг и работ, для определенных операций.

	Элемент = Форма.УсловноеОформление.Элементы.Добавить();
	
	ЭлементТоварыСписатьНаРасходы  = Форма.Элементы.ТоварыСписатьНаРасходы;  // ПолеФормы
	ЭлементТоварыСтатьяРасходов    = Форма.Элементы.ТоварыСтатьяРасходов;    // ПолеФормы
	ЭлементТоварыАналитикаРасходов = Форма.Элементы.ТоварыАналитикаРасходов; // ПолеФормы

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементТоварыСписатьНаРасходы.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементТоварыСтатьяРасходов.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементТоварыАналитикаРасходов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = НоменклатураСервер.СписокХозяйственныхОперацийИсключающихУслугиИРаботы();

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	// только просмотр, если товар

	Элемент = Форма.УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементТоварыСписатьНаРасходы.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементТоварыСтатьяРасходов.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементТоварыАналитикаРасходов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Товар);
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	// только просмотр, если работа под назначение

	Элемент = Форма.УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементТоварыСписатьНаРасходы.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементТоварыСтатьяРасходов.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементТоварыАналитикаРасходов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.Работа;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Назначение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	// только просмотр, если услуга

	Элемент = Форма.УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементТоварыСписатьНаРасходы.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.Услуга;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	// поясняющая надпись, если товар

	Элемент = Форма.УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементТоварыСтатьяРасходов.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементТоварыАналитикаРасходов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Товар);
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<для работ/услуг без назначения>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	// поясняющая надпись, если работа под назначение

	Элемент = Форма.УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементТоварыСтатьяРасходов.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементТоварыАналитикаРасходов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.Работа;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Назначение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<для работ/услуг без назначения>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	// поясняющая надпись, если работа и на расходы не списываем

	Элемент = Форма.УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементТоварыАналитикаРасходов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.Работа;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.СписатьНаРасходы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Назначение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<при списании на расходы>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	// отметка незаполненного статьи расходов, если списываем на расходы

	Элемент = Форма.УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементТоварыСтатьяРасходов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.СписатьНаРасходы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.СтатьяРасходов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// текст аналитики расходов, если статья не выбрана
	
	Элемент = Форма.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементТоварыАналитикаРасходов.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.СтатьяРасходов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.АналитикаРасходов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.СписатьНаРасходы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<выберите статью расходов>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Аналитика расходов "Только просмотр", если не заполнена статья расходов
	
	Элемент = Форма.УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементТоварыАналитикаРасходов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.СтатьяРасходов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииРаботыСНомерамиГТД

Функция ТекстЗапросаФормированияТаблицыНомеровГТД(ВариантПолученияДанных)
	
	Если ВариантПолученияДанных = "ПоРаспоряжениям" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаОтбора.ИмяПоляРаспоряжение КАК ДокументРеализации,
		|	ТаблицаОтбора.Номенклатура        КАК Номенклатура,
		|	ТаблицаОтбора.Характеристика      КАК Характеристика,
		|	ТаблицаОтбора.Назначение          КАК Назначение,
		|	ТаблицаОтбора.Серия               КАК Серия,
		|	ТаблицаОтбора.Количество          КАК Количество
		|ПОМЕСТИТЬ ВТВнешняяТаблица
		|ИЗ
		|	&ТаблицаТовары КАК ТаблицаОтбора
		|;
		|
		|//////////////////////////////////////////////////////////////////////////////// 1
		|ВЫБРАТЬ
		|	ТаблицаОтбора.ДокументРеализации КАК ДокументРеализации,
		|	ТаблицаОтбора.Номенклатура       КАК Номенклатура,
		|	ТаблицаОтбора.Характеристика     КАК Характеристика,
		|	ТаблицаОтбора.Назначение         КАК Назначение,
		|	ТаблицаОтбора.Серия              КАК Серия,
		|	СУММА(ТаблицаОтбора.Количество)  КАК Количество
		|ПОМЕСТИТЬ ВТТаблицаОтбора
		|ИЗ
		|	ВТВнешняяТаблица КАК ТаблицаОтбора
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаОтбора.ДокументРеализации,
		|	ТаблицаОтбора.Номенклатура,
		|	ТаблицаОтбора.Характеристика,
		|	ТаблицаОтбора.Назначение,
		|	ТаблицаОтбора.Серия
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДокументРеализации,
		|	Номенклатура,
		|	Характеристика,
		|	Назначение,
		|	Серия
		|;
		|
		|//////////////////////////////////////////////////////////////////////////////// 2
		|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		|	КорректировкаРеализации.Ссылка            КАК Ссылка,
		|	КорректировкаРеализации.ДокументОснование КАК ДокументОснование
		|ПОМЕСТИТЬ ВТКорректировки
		|ИЗ
		|	ВТТаблицаОтбора КАК ТаблицаОтбора
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации
		|		ПО ТаблицаОтбора.ДокументРеализации = КорректировкаРеализации.ДокументОснование
		|ГДЕ
		|	КорректировкаРеализации.Проведен
		|	И НЕ КорректировкаРеализации.ВидКорректировки В(ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияПерепоставленногоТовара),
		|													ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратНедопоставленногоТовара))
		|;
		|
		|//////////////////////////////////////////////////////////////////////////////// 3
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НаборДанных.ДокументРеализации КАК ДокументРеализации,
		|	НаборДанных.Номенклатура       КАК Номенклатура,
		|	НаборДанных.Характеристика     КАК Характеристика,
		|	НаборДанных.Назначение         КАК Назначение,
		|	НаборДанных.Серия              КАК Серия,
		|	НаборДанных.НомерГТД           КАК НомерГТД,
		|	СУММА(НаборДанных.Количество)  КАК Количество
		|ПОМЕСТИТЬ ВТРеализовано
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТаблицаОтбора.ДокументРеализации КАК ДокументРеализации,
		|		ТаблицаОтбора.Номенклатура       КАК Номенклатура,
		|		ТаблицаОтбора.Характеристика     КАК Характеристика,
		|		ТаблицаОтбора.Назначение         КАК Назначение,
		|		ТаблицаОтбора.Серия              КАК Серия,
		|		ТоварыРеализации.НомерГТД        КАК НомерГТД,
		|		ТоварыРеализации.Количество      КАК Количество
		|	ИЗ
		|		ВТТаблицаОтбора КАК ТаблицаОтбора
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.ВидыЗапасов КАК ТоварыРеализации
		|			ПО ТаблицаОтбора.ДокументРеализации = ТоварыРеализации.Ссылка
		|				И ТаблицаОтбора.Номенклатура = ТоварыРеализации.АналитикаУчетаНоменклатуры.Номенклатура
		|				И ТаблицаОтбора.Характеристика = ТоварыРеализации.АналитикаУчетаНоменклатуры.Характеристика
		|				И ТаблицаОтбора.Назначение = ТоварыРеализации.АналитикаУчетаНоменклатуры.Назначение
		|				И ТаблицаОтбора.Серия = ТоварыРеализации.АналитикаУчетаНоменклатуры.Серия
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТаблицаОтбора.ДокументРеализации КАК ДокументРеализации,
		|		ТаблицаОтбора.Номенклатура       КАК Номенклатура,
		|		ТаблицаОтбора.Характеристика     КАК Характеристика,
		|		ТаблицаОтбора.Назначение         КАК Назначение,
		|		ТаблицаОтбора.Серия              КАК Серия,
		|		ТоварыРеализации.НомерГТД        КАК НомерГТД,
		|		-ТоварыРеализации.Количество      КАК Количество
		|	ИЗ
		|		ВТТаблицаОтбора КАК ТаблицаОтбора
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКорректировки КАК Корректировки
		|			ПО ТаблицаОтбора.ДокументРеализации = Корректировки.ДокументОснование
		|			
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации.ВидыЗапасовОприходование КАК ТоварыРеализации
		|			ПО Корректировки.Ссылка = ТоварыРеализации.Ссылка
		|				И ТаблицаОтбора.Номенклатура = ТоварыРеализации.АналитикаУчетаНоменклатуры.Номенклатура
		|				И ТаблицаОтбора.Характеристика = ТоварыРеализации.АналитикаУчетаНоменклатуры.Характеристика
		|				И ТаблицаОтбора.Назначение = ТоварыРеализации.АналитикаУчетаНоменклатуры.Назначение
		|				И ТаблицаОтбора.Серия = ТоварыРеализации.АналитикаУчетаНоменклатуры.Серия
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТаблицаОтбора.ДокументРеализации КАК ДокументРеализации,
		|		ТаблицаОтбора.Номенклатура       КАК Номенклатура,
		|		ТаблицаОтбора.Характеристика     КАК Характеристика,
		|		ТаблицаОтбора.Назначение         КАК Назначение,
		|		ТаблицаОтбора.Серия              КАК Серия,
		|		ТоварыРеализации.НомерГТД        КАК НомерГТД,
		|		ТоварыРеализации.Количество      КАК Количество
		|	ИЗ
		|		ВТТаблицаОтбора КАК ТаблицаОтбора
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКорректировки КАК Корректировки
		|			ПО ТаблицаОтбора.ДокументРеализации = Корректировки.ДокументОснование
		|			
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации.ВидыЗапасовСписание КАК ТоварыРеализации
		|			ПО Корректировки.Ссылка = ТоварыРеализации.Ссылка
		|				И ТаблицаОтбора.Номенклатура = ТоварыРеализации.АналитикаУчетаНоменклатуры.Номенклатура
		|				И ТаблицаОтбора.Характеристика = ТоварыРеализации.АналитикаУчетаНоменклатуры.Характеристика
		|				И ТаблицаОтбора.Назначение = ТоварыРеализации.АналитикаУчетаНоменклатуры.Назначение
		|				И ТаблицаОтбора.Серия = ТоварыРеализации.АналитикаУчетаНоменклатуры.Серия
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТаблицаОтбора.ДокументРеализации КАК ДокументРеализации,
		|		ТаблицаОтбора.Номенклатура       КАК Номенклатура,
		|		ТаблицаОтбора.Характеристика     КАК Характеристика,
		|		ТаблицаОтбора.Назначение         КАК Назначение,
		|		ТаблицаОтбора.Серия              КАК Серия,
		|		ТоварыРеализации.НомерГТД        КАК НомерГТД,
		|		ТоварыРеализации.Количество      КАК Количество
		|	ИЗ
		|		ВТТаблицаОтбора КАК ТаблицаОтбора
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах.ВидыЗапасов КАК ТоварыРеализации
		|			ПО ТаблицаОтбора.ДокументРеализации = ТоварыРеализации.Ссылка
		|				И ТаблицаОтбора.Номенклатура = ТоварыРеализации.АналитикаУчетаНоменклатуры.Номенклатура
		|				И ТаблицаОтбора.Характеристика = ТоварыРеализации.АналитикаУчетаНоменклатуры.Характеристика
		|				И ТаблицаОтбора.Назначение = ТоварыРеализации.АналитикаУчетаНоменклатуры.Назначение
		|				И ТаблицаОтбора.Серия = ТоварыРеализации.АналитикаУчетаНоменклатуры.Серия
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТаблицаОтбора.ДокументРеализации КАК ДокументРеализации,
		|		ТаблицаОтбора.Номенклатура       КАК Номенклатура,
		|		ТаблицаОтбора.Характеристика     КАК Характеристика,
		|		ТаблицаОтбора.Назначение         КАК Назначение,
		|		ТаблицаОтбора.Серия              КАК Серия,
		|		ТоварыРеализации.НомерГТД        КАК НомерГТД,
		|		ТоварыРеализации.Количество      КАК Количество
		|	ИЗ
		|		ВТТаблицаОтбора КАК ТаблицаОтбора
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПередачаТоваровМеждуОрганизациями.ВидыЗапасов КАК ТоварыРеализации
		|			ПО ТаблицаОтбора.ДокументРеализации = ТоварыРеализации.Ссылка
		|				И ТаблицаОтбора.Номенклатура = ТоварыРеализации.АналитикаУчетаНоменклатуры.Номенклатура
		|				И ТаблицаОтбора.Характеристика = ТоварыРеализации.АналитикаУчетаНоменклатуры.Характеристика
		|				И ТаблицаОтбора.Назначение = ТоварыРеализации.АналитикаУчетаНоменклатуры.Назначение
		|				И ТаблицаОтбора.Серия = ТоварыРеализации.АналитикаУчетаНоменклатуры.Серия
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТаблицаОтбора.ДокументРеализации	КАК ДокументРеализации,
		|		ТаблицаОтбора.Номенклатура			КАК Номенклатура,
		|		ТаблицаОтбора.Характеристика		КАК Характеристика,
		|		ТаблицаОтбора.Назначение			КАК Назначение,
		|		ТаблицаОтбора.Серия					КАК Серия,
		|		ТоварыРеализации.НомерГТД			КАК НомерГТД,
		|		-ТоварыРеализации.Количество		КАК Количество
		|	ИЗ
		|		ВТТаблицаОтбора КАК ТаблицаОтбора
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВыкупВозвратнойТарыКлиентом.ВидыЗапасов КАК ТоварыРеализации
		|			ПО ТаблицаОтбора.ДокументРеализации = ТоварыРеализации.ДокументРеализации
		|				И ТаблицаОтбора.Номенклатура = ТоварыРеализации.АналитикаУчетаНоменклатуры.Номенклатура
		|				И ТаблицаОтбора.Характеристика = ТоварыРеализации.АналитикаУчетаНоменклатуры.Характеристика
		|				И ТаблицаОтбора.Назначение = ТоварыРеализации.АналитикаУчетаНоменклатуры.Назначение
		|				И ТаблицаОтбора.Серия = ТоварыРеализации.АналитикаУчетаНоменклатуры.Серия
		|	
		|	) КАК НаборДанных
		|
		|СГРУППИРОВАТЬ ПО
		|	НаборДанных.ДокументРеализации,
		|	НаборДанных.Номенклатура,
		|	НаборДанных.Характеристика,
		|	НаборДанных.Назначение,
		|	НаборДанных.Серия,
		|	НаборДанных.НомерГТД
		|;
		|
		|//////////////////////////////////////////////////////////////////////////////// 4
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаТовары.ДокументРеализации КАК ДокументРеализации,
		|	ТаблицаТовары.Номенклатура       КАК Номенклатура,
		|	ТаблицаТовары.Характеристика     КАК Характеристика,
		|	ТаблицаТовары.Назначение         КАК Назначение,
		|	ТаблицаТовары.Серия              КАК Серия,
		|	ТаблицаТовары.НомерГТД           КАК НомерГТД,
		|	СУММА(ТаблицаТовары.Количество)  КАК Количество
		|ПОМЕСТИТЬ ВТВозвращенныеТовары
		|ИЗ
		|	ВТТаблицаОтбора КАК ТаблицаОтбора
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтКлиента.Товары КАК ТаблицаТовары
		|		ПО ТаблицаОтбора.ДокументРеализации = ТаблицаТовары.ДокументРеализации
		|			И ТаблицаОтбора.Номенклатура = ТаблицаТовары.Номенклатура
		|			И ТаблицаОтбора.Характеристика = ТаблицаТовары.Характеристика
		|			И ТаблицаОтбора.Назначение = ТаблицаТовары.Назначение
		|			И ТаблицаОтбора.Серия = ТаблицаТовары.Серия
		|			И ТаблицаТовары.Ссылка.Проведен
		|			И НЕ ТаблицаТовары.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТовары.ДокументРеализации,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Характеристика,
		|	ТаблицаТовары.Назначение,
		|	ТаблицаТовары.Серия,
		|	ТаблицаТовары.НомерГТД
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаТовары.ДокументПередачи  КАК ДокументРеализации,
		|	ТаблицаТовары.Номенклатура      КАК Номенклатура,
		|	ТаблицаТовары.Характеристика    КАК Характеристика,
		|	ТаблицаТовары.Назначение        КАК Назначение,
		|	ТаблицаТовары.Серия             КАК Серия,
		|	ТаблицаТовары.НомерГТД          КАК НомерГТД,
		|	СУММА(ТаблицаТовары.Количество) КАК Количество
		|ИЗ
		|	ВТТаблицаОтбора КАК ТаблицаОтбора
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровМеждуОрганизациями.Товары КАК ТаблицаТовары
		|		ПО ТаблицаОтбора.ДокументРеализации = ТаблицаТовары.ДокументПередачи
		|			И ТаблицаОтбора.Номенклатура = ТаблицаТовары.Номенклатура
		|			И ТаблицаОтбора.Характеристика = ТаблицаТовары.Характеристика
		|			И ТаблицаОтбора.Назначение = ТаблицаТовары.Назначение
		|			И ТаблицаОтбора.Серия = ТаблицаТовары.Серия
		|		
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровМеждуОрганизациями КАК ДанныеДокумента
		|		ПО ТаблицаТовары.Ссылка = ДанныеДокумента.Ссылка
		|
		|ГДЕ
		|	ДанныеДокумента.Проведен
		|	И НЕ ДанныеДокумента.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТовары.ДокументПередачи,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Характеристика,
		|	ТаблицаТовары.Назначение,
		|	ТаблицаТовары.Серия,
		|	ТаблицаТовары.НомерГТД
		|;
		|
		|//////////////////////////////////////////////////////////////////////////////// 5
		|ВЫБРАТЬ
		|	РеализованныеТовары.ДокументРеализации КАК ИмяПоляРаспоряжение,
		|	РеализованныеТовары.Номенклатура       КАК Номенклатура,
		|	РеализованныеТовары.Характеристика     КАК Характеристика,
		|	РеализованныеТовары.Назначение         КАК Назначение,
		|	РеализованныеТовары.Серия              КАК Серия,
		|	РеализованныеТовары.НомерГТД           КАК НомерГТД,
		|	ЕСТЬNULL(НомераГТД.ТипНомераГТД, ЗНАЧЕНИЕ(Перечисление.ТипыНомеровГТД.ПустаяСсылка)) КАК ТипНомераГТД,
		|	ЕСТЬNULL(НомераГТД.СтранаПроисхождения, ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)) КАК СтранаПроисхождения,
		|	СУММА(РеализованныеТовары.Количество - ЕСТЬNULL(ВозвращенныеТовары.Количество, 0)) КАК Количество
		|ИЗ
		|	ВТРеализовано КАК РеализованныеТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВозвращенныеТовары КАК ВозвращенныеТовары
		|		ПО РеализованныеТовары.ДокументРеализации = ВозвращенныеТовары.ДокументРеализации
		|			И РеализованныеТовары.Номенклатура = ВозвращенныеТовары.Номенклатура
		|			И РеализованныеТовары.Характеристика = ВозвращенныеТовары.Характеристика
		|			И РеализованныеТовары.Назначение = ВозвращенныеТовары.Назначение
		|			И РеализованныеТовары.Серия = ВозвращенныеТовары.Серия
		|			И РеализованныеТовары.НомерГТД = ВозвращенныеТовары.НомерГТД
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НомераГТД КАК НомераГТД
		|		ПО РеализованныеТовары.НомерГТД = НомераГТД.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	РеализованныеТовары.ДокументРеализации,
		|	РеализованныеТовары.Номенклатура,
		|	РеализованныеТовары.Характеристика,
		|	РеализованныеТовары.Назначение,
		|	РеализованныеТовары.Серия,
		|	РеализованныеТовары.НомерГТД,
		|	ЕСТЬNULL(НомераГТД.ТипНомераГТД, ЗНАЧЕНИЕ(Перечисление.ТипыНомеровГТД.ПустаяСсылка)),
		|	ЕСТЬNULL(НомераГТД.СтранаПроисхождения, ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка))
		|
		|ИМЕЮЩИЕ
		|	СУММА(РеализованныеТовары.Количество - ЕСТЬNULL(ВозвращенныеТовары.Количество, 0)) > 0";
		
	ИначеЕсли ВариантПолученияДанных = "ПоОстаткамПереданныхНаКомиссию" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаОтбора.ДокументРеализации КАК ДокументРеализации,
		|	ТаблицаОтбора.Номенклатура       КАК Номенклатура,
		|	ТаблицаОтбора.Характеристика     КАК Характеристика
		|ПОМЕСТИТЬ ВТВнешняяТаблица
		|ИЗ
		|	&ТаблицаТовары КАК ТаблицаОтбора
		|;
		|
		|//////////////////////////////////////////////////////////////////////////////// 1
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	АналитикаУчетаНоменклатуры.КлючАналитики КАК АналитикаУчетаНоменклатуры
		|ПОМЕСТИТЬ ВТТаблицаОтбораПереданныхНаКомиссию
		|ИЗ
		|	ВТВнешняяТаблица КАК ТаблицаОтбора
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры
		|		ПО ТаблицаОтбора.Номенклатура = АналитикаУчетаНоменклатуры.Номенклатура
		|			И ТаблицаОтбора.Характеристика = АналитикаУчетаНоменклатуры.Характеристика
		|			И АналитикаУчетаНоменклатуры.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|			И АналитикаУчетаНоменклатуры.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|ГДЕ
		|	АналитикаУчетаНоменклатуры.МестоХранения = &Партнер
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	АналитикаУчетаНоменклатуры.КлючАналитики
		|;
		|
		|//////////////////////////////////////////////////////////////////////////////// 2
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	&Партнер                         КАК Партнер,
		|	ТаблицаОтбора.Номенклатура       КАК Номенклатура,
		|	ТаблицаОтбора.Характеристика     КАК Характеристика,
		|	ТаблицаОтбора.ДокументРеализации КАК ДокументРеализации
		|ПОМЕСТИТЬ ВТТаблицаОтбораПереданнойТары
		|ИЗ
		|	ВТВнешняяТаблица КАК ТаблицаОтбора
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	&Партнер,
		|	Номенклатура,
		|	Характеристика,
		|	ДокументРеализации
		|;
		|
		|//////////////////////////////////////////////////////////////////////////////// 3
		|ВЫБРАТЬ
		|	НаборДанных.ДокументРеализации  КАК ДокументРеализации,
		|	НаборДанных.Номенклатура        КАК Номенклатура,
		|	НаборДанных.Характеристика      КАК Характеристика,
		|	НаборДанных.Назначение          КАК Назначение,
		|	НаборДанных.Серия               КАК Серия,
		|	НаборДанных.НомерГТД            КАК НомерГТД,
		|	НаборДанных.ТипНомераГТД        КАК ТипНомераГТД,
		|	НаборДанных.СтранаПроисхождения КАК СтранаПроисхождения,
		|	СУММА(НаборДанных.Количество)   КАК Количество
		|ИЗ
		|	(ВЫБРАТЬ
		|		НЕОПРЕДЕЛЕНО КАК ДокументРеализации,
		|		ТоварыПереданныеНаКомиссию.АналитикаУчетаНоменклатуры.Номенклатура   КАК Номенклатура,
		|		ТоварыПереданныеНаКомиссию.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
		|		ТоварыПереданныеНаКомиссию.АналитикаУчетаНоменклатуры.Назначение     КАК Назначение,
		|		ТоварыПереданныеНаКомиссию.АналитикаУчетаНоменклатуры.Серия          КАК Серия,
		|		ТоварыПереданныеНаКомиссию.НомерГТД                                  КАК НомерГТД,
		|		ТоварыПереданныеНаКомиссию.НомерГТД.ТипНомераГТД                     КАК ТипНомераГТД,
		|		ТоварыПереданныеНаКомиссию.НомерГТД.СтранаПроисхождения              КАК СтранаПроисхождения,
		|		ТоварыПереданныеНаКомиссию.КоличествоОстаток                         КАК Количество
		|	ИЗ
		|		РегистрНакопления.ТоварыПереданныеНаКомиссию.Остатки(
		|				&Период,
		|				АналитикаУчетаНоменклатуры В
		|					(ВЫБРАТЬ
		|						ВТТаблицаОтбораПереданныхНаКомиссию.АналитикаУчетаНоменклатуры
		|					ИЗ
		|						ВТТаблицаОтбораПереданныхНаКомиссию КАК ВТТаблицаОтбораПереданныхНаКомиссию)
		|				И Организация = &Организация
		|		) КАК ТоварыПереданныеНаКомиссию
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		НЕОПРЕДЕЛЕНО КАК ДокументРеализации,
		|		ТоварыПереданныеНаКомиссию.АналитикаУчетаНоменклатуры.Номенклатура   КАК Номенклатура,
		|		ТоварыПереданныеНаКомиссию.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
		|		ТоварыПереданныеНаКомиссию.АналитикаУчетаНоменклатуры.Назначение     КАК Назначение,
		|		ТоварыПереданныеНаКомиссию.АналитикаУчетаНоменклатуры.Серия          КАК Серия,
		|		ТоварыПереданныеНаКомиссию.НомерГТД                                  КАК НомерГТД,
		|		ТоварыПереданныеНаКомиссию.НомерГТД.ТипНомераГТД                     КАК ТипНомераГТД,
		|		ТоварыПереданныеНаКомиссию.НомерГТД.СтранаПроисхождения              КАК СтранаПроисхождения,
		|		ВЫБОР
		|			КОГДА ТоварыПереданныеНаКомиссию.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА
		|				ТоварыПереданныеНаКомиссию.Количество
		|			ИНАЧЕ
		|				-ТоварыПереданныеНаКомиссию.Количество
		|		КОНЕЦ                                                                КАК Количество
		|	ИЗ
		|		РегистрНакопления.ТоварыПереданныеНаКомиссию КАК ТоварыПереданныеНаКомиссию
		|	ГДЕ
		|		ТоварыПереданныеНаКомиссию.АналитикаУчетаНоменклатуры В
		|			(ВЫБРАТЬ
		|				ВТТаблицаОтбораПереданныхНаКомиссию.АналитикаУчетаНоменклатуры
		|			ИЗ
		|				ВТТаблицаОтбораПереданныхНаКомиссию КАК ВТТаблицаОтбораПереданныхНаКомиссию)
		|		И ТоварыПереданныеНаКомиссию.Организация = &Организация
		|		И ТоварыПереданныеНаКомиссию.Регистратор = &Ссылка
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ПереданнаяТара.ДокументПередачи              КАК ДокументРеализации,
		|		ПереданнаяТара.Номенклатура                  КАК Номенклатура,
		|		ПереданнаяТара.Характеристика                КАК Характеристика,
		|		ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
		|		ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
		|		ПереданнаяТара.НомерГТД                      КАК НомерГТД,
		|		ПереданнаяТара.НомерГТД.ТипНомераГТД         КАК ТипНомераГТД,
		|		ПереданнаяТара.НомерГТД.СтранаПроисхождения  КАК СтранаПроисхождения,
		|		ПереданнаяТара.КоличествоОстаток             КАК Количество
		|	ИЗ
		|		РегистрНакопления.ПереданнаяВозвратнаяТара.Остатки(
		|				&Период,
		|				(Партнер, Номенклатура, Характеристика, ДокументПередачи) В
		|					(ВЫБРАТЬ
		|						ВТТаблицаОтбораПереданнойТары.Партнер,
		|						ВТТаблицаОтбораПереданнойТары.Номенклатура,
		|						ВТТаблицаОтбораПереданнойТары.Характеристика,
		|						ВТТаблицаОтбораПереданнойТары.ДокументРеализации
		|					ИЗ
		|						ВТТаблицаОтбораПереданнойТары КАК ВТТаблицаОтбораПереданнойТары)
		|		
		|		) КАК ПереданнаяТара
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ПереданнаяТара.ДокументПередачи              КАК ДокументРеализации,
		|		ПереданнаяТара.Номенклатура                  КАК Номенклатура,
		|		ПереданнаяТара.Характеристика                КАК Характеристика,
		|		ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
		|		ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
		|		ПереданнаяТара.НомерГТД                      КАК НомерГТД,
		|		ПереданнаяТара.НомерГТД.ТипНомераГТД         КАК ТипНомераГТД,
		|		ПереданнаяТара.НомерГТД.СтранаПроисхождения  КАК СтранаПроисхождения,
		|		ВЫБОР
		|			КОГДА ПереданнаяТара.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА
		|				ПереданнаяТара.Количество
		|			ИНАЧЕ
		|				-ПереданнаяТара.Количество
		|		КОНЕЦ                                        КАК Количество
		|	ИЗ
		|		РегистрНакопления.ПереданнаяВозвратнаяТара КАК ПереданнаяТара
		|	ГДЕ
		|		(Партнер, Номенклатура, Характеристика, ДокументПередачи) В
		|			(ВЫБРАТЬ
		|				ВТТаблицаОтбораПереданнойТары.Партнер,
		|				ВТТаблицаОтбораПереданнойТары.Номенклатура,
		|				ВТТаблицаОтбораПереданнойТары.Характеристика,
		|				ВТТаблицаОтбораПереданнойТары.ДокументРеализации
		|			ИЗ
		|				ВТТаблицаОтбораПереданнойТары КАК ВТТаблицаОтбораПереданнойТары)
		|		И ПереданнаяТара.Регистратор = &Ссылка
		|	
		|	) КАК НаборДанных
		|
		|ГДЕ
		|	НаборДанных.НомерГТД <> ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	НаборДанных.ДокументРеализации,
		|	НаборДанных.Номенклатура,
		|	НаборДанных.Характеристика,
		|	НаборДанных.Назначение,
		|	НаборДанных.Серия,
		|	НаборДанных.НомерГТД,
		|	НаборДанных.ТипНомераГТД,
		|	НаборДанных.СтранаПроисхождения
		|
		|ИМЕЮЩИЕ
		|	СУММА(НаборДанных.Количество) <> 0
		|";
		
	ИначеЕсли ВариантПолученияДанных = "ПоОстаткамУХранителя" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаОтбора.Номенклатура   КАК Номенклатура,
		|	ТаблицаОтбора.Характеристика КАК Характеристика,
		|	ТаблицаОтбора.Назначение     КАК Назначение,
		|	ТаблицаОтбора.Серия          КАК Серия
		|ПОМЕСТИТЬ ВТВнешняяТаблица
		|ИЗ
		|	&ТаблицаТовары КАК ТаблицаОтбора
		|;
		|
		|//////////////////////////////////////////////////////////////////////////////// 1
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	АналитикаУчетаНоменклатуры.КлючАналитики КАК КлючАналитики
		|ПОМЕСТИТЬ ВТТаблицаОтбора
		|ИЗ
		|	РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВнешняяТаблица КАК ТаблицаОтбора
		|		ПО АналитикаУчетаНоменклатуры.Номенклатура = ТаблицаОтбора.Номенклатура
		|			И АналитикаУчетаНоменклатуры.Характеристика = ТаблицаОтбора.Характеристика
		|			И АналитикаУчетаНоменклатуры.Серия = ТаблицаОтбора.Серия
		|			И АналитикаУчетаНоменклатуры.Назначение = ТаблицаОтбора.Назначение
		|ГДЕ
		|	АналитикаУчетаНоменклатуры.МестоХранения = &Договор
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	КлючАналитики
		|;
		|
		|//////////////////////////////////////////////////////////////////////////////// 2
		|ВЫБРАТЬ
		|	ТоварыОрганизацийОстатки.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
		|	ТоварыОрганизацийОстатки.НомерГТД                   КАК НомерГТД,
		|	ТоварыОрганизацийОстатки.КоличествоОстаток          КАК КоличествоОстаток
		|ПОМЕСТИТЬ ВТТаблицаПереданные
		|ИЗ
		|	РегистрНакопления.ТоварыОрганизаций.Остатки(&Период,
		|			АналитикаУчетаНоменклатуры В
		|					(ВЫБРАТЬ
		|						ВТТаблицаОтбора.КлючАналитики КАК КлючАналитики
		|					ИЗ
		|						ВТТаблицаОтбора КАК ВТТаблицаОтбора)
		|			И Организация = &Организация
		|	
		|	) КАК ТоварыОрганизацийОстатки
		|
		|ГДЕ
		|	ТоварыОрганизацийОстатки.КоличествоОстаток > 0
		|;
		|
		|//////////////////////////////////////////////////////////////////////////////// 3
		|ВЫБРАТЬ
		|	ВТТаблицаПереданные.АналитикаУчетаНоменклатуры.Номенклатура   КАК Номенклатура,
		|	ВТТаблицаПереданные.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
		|	ВТТаблицаПереданные.АналитикаУчетаНоменклатуры.Серия          КАК Серия,
		|	ВТТаблицаПереданные.АналитикаУчетаНоменклатуры.Назначение     КАК Назначение,
		|	ВТТаблицаПереданные.НомерГТД                                  КАК НомерГТД,
		|	ВТТаблицаПереданные.НомерГТД.ТипНомераГТД                     КАК ТипНомераГТД,
		|	ВТТаблицаПереданные.НомерГТД.СтранаПроисхождения              КАК СтранаПроисхождения,
		|	ВТТаблицаПереданные.КоличествоОстаток                         КАК Количество
		|ИЗ
		|	ВТТаблицаПереданные КАК ВТТаблицаПереданные";

	Иначе
		ВызватьИсключение НСтр("ru = 'Неподдерживаемый вариант получения данных по номерам ГТД.'");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция СоздатьСоставнойПрослеживаемыйНомерГТД(КомплектующиеДляСозданияСоставногоНомераГТД,
	ЭтоОсновнойКомплект,
	НоменклатураШапки = Неопределено,
	ХарактеристикаШапки = Неопределено,
	СерияШапки = Неопределено,
	СуммаПоРНПТ = 0,
	ВсегдаИспользоватьСуммаПоРНПТДляСтоимостиКомплекта = Ложь)
	
	РеквизитыГТД = "Код, СтранаПроисхождения";
	
	Отбор = Новый Структура("ЭтоОсновнойКомплект", ЭтоОсновнойКомплект);
	НайденныеСтроки = КомплектующиеДляСозданияСоставногоНомераГТД.НайтиСтроки(Отбор);
	
	СоставнойНомерГТДОбъект = Справочники.НомераГТД.СоздатьЭлемент();
	Инициализирован = Ложь;
	
	СуммаПоТЧ = 0;
	Для Каждого Строка Из НайденныеСтроки Цикл
		Если Не Инициализирован Тогда
			ЗначенияРеквизитовГТД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка.НомерРНПТ, РеквизитыГТД);
			
			СоставнойНомерГТДОбъект.Код = ЗначенияРеквизитовГТД.Код;
			СоставнойНомерГТДОбъект.СтранаПроисхождения = ЗначенияРеквизитовГТД.СтранаПроисхождения;
			СоставнойНомерГТДОбъект.ТипНомераГТД = Перечисления.ТипыНомеровГТД.НомерРНПТКомплекта;
			СоставнойНомерГТДОбъект.Номенклатура = НоменклатураШапки;
			Если НоменклатураШапки <> Неопределено Тогда
				СоставнойНомерГТДОбъект.НаименованиеТовара = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоменклатураШапки, "НаименованиеПолное");
				СоставнойНомерГТДОбъект.СуммаПоРНПТ = СуммаПоРНПТ;
				Если СоставнойНомерГТДОбъект.СуммаПоРНПТ = 0 Тогда
					СоставнойНомерГТДОбъект.СуммаПоРНПТ = СуммаПоВыбранномуПрослеживаемомуТовару(НоменклатураШапки, ХарактеристикаШапки, СерияШапки);
				КонецЕсли;
			КонецЕсли;
			
			Если ВсегдаИспользоватьСуммаПоРНПТДляСтоимостиКомплекта Тогда
				СоставнойНомерГТДОбъект.СуммаПоРНПТ = СуммаПоРНПТ;
			КонецЕсли;
			
			Инициализирован = Истина;
		КонецЕсли;
		НоваяСтрока = СоставнойНомерГТДОбъект.ПрослеживаемыеКомплектующие.Добавить();
		НоваяСтрока.НомерРНПТ = Строка.НомерРНПТ;
		НоваяСтрока.КоличествоПоРНПТ = Строка.КоличествоПоРНПТ;
		НоваяСтрока.ЕдиницаИзмеренияТНВЭД = Строка.ЕдиницаИзмеренияТНВЭД;
		
		НоваяСтрока.СуммаПоРНПТ = СуммаПоВыбранномуПрослеживаемомуТовару(Строка.Номенклатура, Строка.Характеристика, Строка.Серия, Строка.НомерРНПТ, Строка.КоличествоПоРНПТ);
		Если ВсегдаИспользоватьСуммаПоРНПТДляСтоимостиКомплекта Или НоваяСтрока.СуммаПоРНПТ = 0 Тогда
			НоваяСтрока.СуммаПоРНПТ = Строка.СуммаПоРНПТ;
		КонецЕсли;
		
		СуммаПоТЧ = СуммаПоТЧ + НоваяСтрока.СуммаПоРНПТ;
		
	КонецЦикла;
	СоставнойНомерГТДОбъект.ПрослеживаемыеКомплектующие.Свернуть("НомерРНПТ,ЕдиницаИзмеренияТНВЭД", "КоличествоПоРНПТ,СуммаПоРНПТ");
	
	СоставнойНомерГТДОбъект.КоличествоКомплектующих = СоставнойНомерГТДОбъект.ПрослеживаемыеКомплектующие.Количество();
	Если СоставнойНомерГТДОбъект.СуммаПоРНПТ < СуммаПоТЧ Тогда
		СоставнойНомерГТДОбъект.СуммаПоРНПТ = СуммаПоТЧ;
	КонецЕсли;
	
	СоставнойНомерГТДОбъект.Записать();
	
	Возврат СоставнойНомерГТДОбъект.Ссылка;
	
КонецФункции

Функция СуммаПоВыбранномуПрослеживаемомуТовару(Номенклатура, Характеристика, Серия, НомерРНПТ = Неопределено, КоличествоПоРНПТ = 1)
	
	СтруктураПараметровОтбора = ЦеныПредприятияЗаполнениеСервер.НовыйПараметрыОтбораПолучитьЦенуПоОтбору();
	
	СтруктураПараметровОтбора.Дата = ТекущаяДатаСеанса();
	СтруктураПараметровОтбора.Номенклатура = Номенклатура;
	СтруктураПараметровОтбора.Характеристика = Характеристика;
	СтруктураПараметровОтбора.Серия = Серия;
	СтруктураПараметровОтбора.ВидЦены = УчетПрослеживаемыхТоваровЛокализация.ВидЦеныСтоимостиПрослеживаемыхТоваров();
	СтруктураПараметровОтбора.Валюта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураПараметровОтбора.ВидЦены, "ВалютаЦены");
	
	Цена = ЦеныПредприятияЗаполнениеСервер.ПолучитьЦенуПоОтбору(СтруктураПараметровОтбора);
	
	Если Цена = 0 И ЗначениеЗаполнено(Серия) Тогда
		СтруктураПараметровОтбора.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
		Цена = ЦеныПредприятияЗаполнениеСервер.ПолучитьЦенуПоОтбору(СтруктураПараметровОтбора);
	КонецЕсли;
	
	Сумма = Цена * КоличествоПоРНПТ;
	
	Если Сумма = 0 И НомерРНПТ <> Неопределено Тогда
		Сумма = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НомерРНПТ, "СуммаПоРНПТ");
		Сумма = Сумма * КоличествоПоРНПТ;
	КонецЕсли;
	
	Возврат Сумма;
	
КонецФункции

Функция ПодменитьПараметрыТекстаЗапросаРазборкиСоставныхПрослеживаемыхНомеровГТД(ТекстЗапроса, ШаблоныПараметры, Поля)
	Для Каждого КлючЗначение Из ШаблоныПараметры Цикл
		Шаблон = КлючЗначение.Ключ;
		ПараметрДляПодмены = КлючЗначение.Значение;
		
		НаборПолей = Новый Массив();
		Для Каждого ИмяПоля Из Поля Цикл
			НаборПолей.Добавить(СтрШаблон(Шаблон, ИмяПоля));
		КонецЦикла;
		СобраннаяПодстрока = СтрСоединить(НаборПолей, Символы.ПС);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ПараметрДляПодмены, СобраннаяПодстрока);
	КонецЦикла;
	Возврат ТекстЗапроса;
КонецФункции

#КонецОбласти

// Возвращает скорректированный при вводе период номера таможенной декларации.
//
// Возвращаемое значение:
//	Структура - коллекция, содержащая информацию о корректном периоде номера таможенной декларации:
//		* НачалоКорректногоПериода - Дата - дата начала корректного периода.
//		* КонецКорректногоПериода - Дата - дата окончания корректного периода.
//
Функция КорректныйПериодВводаДокументовНомераТаможеннойДекларации() Экспорт
	
	// Контролируем ошибку на один разряд. Например, 0017 вместо 2017; 2071 вместо 2017.
	// Допустимым считаем ввод документов на 9 лет в будущем. Например, в 2020 году разрешаем
	// вводить даты в интервале с января 2000 по декабрь 2029.
	
	КонецКорректногоПериода = ДобавитьМесяц(КонецГода(ТекущаяДатаСеанса()), 9 * 12);
	
	КорректныйПериод = Новый Структура;
	КорректныйПериод.Вставить("НачалоКорректногоПериода", Дата(2000, 01, 01));
	КорректныйПериод.Вставить("КонецКорректногоПериода",  КонецКорректногоПериода);
	
	Возврат КорректныйПериод;
	
КонецФункции

#КонецОбласти
