#Область ПрограммныйИнтерфейс

#Область ОбщиеСтруктуры

Функция ПараметрыПроверкиИПодбораАлкогольнойПродукции(ОрганизацияЕГАИС = Неопределено, ПроверяемыйДокумент = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("АдресДанныхПроверяемойАлкогольнойПродукции",             "");
	Результат.Вставить("АдресПредварительноСохраненныхРезультатовПроверки",      "");
	Результат.Вставить("КонтролироватьСканируемуюПродукциюПоДокументуОснованию", Ложь);
	Результат.Вставить("НачальныйСтатусПроверки",                                ПредопределенноеЗначение("Перечисление.СтатусыПроверкиИПодбораИС.НеВыполнялось"));
	Результат.Вставить("ОрганизацияЕГАИС",                                       ОрганизацияЕГАИС);
	Результат.Вставить("ПостфиксСохранения",                                     "");
	Результат.Вставить("ПриЗавершенииСохранятьРезультатыПроверки",               Ложь);
	Результат.Вставить("ПроверкаНеПоДокументу",                                  ПроверяемыйДокумент = Неопределено);
	Результат.Вставить("ПроверяемыйДокумент",                                    ПроверяемыйДокумент);
	Результат.Вставить("ПроверятьНеобходимостьПеремаркировки",                   Истина);
	Результат.Вставить("РедактированиеФормыНедоступно",                          Ложь);
	Результат.Вставить("РежимПодбораСуществующихУпаковок",                       Истина); //Входящий документ если Ложь
	Результат.Вставить("РежимПросмотра",                                         Ложь);
	Результат.Вставить("ОписаниеОповещенияПриЗакрытии",                          Неопределено);
	Результат.Вставить("СообщениеПротоколаОбмена",                               Неопределено);
	Результат.Вставить("ЧастичноеВыбытиеДоступно",                               Ложь);
	Результат.Вставить("БезУчетаОрганизацииЕГАИС",                               Ложь);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РаботаВСпискахДокументов

// Обработчик команд по выполнению требуемого дальнейшего действия в динамических списках
//
// Параметры:
//  ДинамическийСписок - ТаблицаФормы - список в котором выполняется команда
//  ПараметрыПередачи - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - действие, которое будет выполнено.
//                    - См. ИнтеграцияИСКлиентСервер.ИнициализироватьПараметрыПередачиДанных
Процедура ПодготовитьСообщенияКПередаче(ДинамическийСписок, ПараметрыПередачи) Экспорт
	
	ОчищатьСообщения = Истина;
	Если ТипЗнч(ПараметрыПередачи) = Тип("Структура") Тогда
		ОчищатьСообщения = ПараметрыПередачи.ОчищатьСообщения;
	КонецЕсли;
	Если ОчищатьСообщения Тогда
		ОчиститьСообщения();
	КонецЕсли;
	
	ДополнительныеПараметры = Неопределено;
	Если ТипЗнч(ПараметрыПередачи) = Тип("Структура") Тогда
		ДополнительныеПараметры = ПараметрыПередачи;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыПередачи) = Тип("Структура") Тогда
		ДальнейшееДействие = ПараметрыПередачи.ДальнейшееДействие;
	Иначе
		ДальнейшееДействие = ПараметрыПередачи;
	КонецЕсли;
	
	Контекст = ИнтеграцияИСКлиент.СтруктураПодготовкиСообщенийКПередаче(
		ДинамическийСписок, ДальнейшееДействие,
		Новый ОписаниеОповещения("ПодготовитьСообщенияКПередачеЗавершение", ЭтотОбъект, ДополнительныеПараметры));
	Если ТипЗнч(ПараметрыПередачи) = Тип("Структура") Тогда
		Контекст.ПараметрыПередачи = ПараметрыПередачи;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыПередачи) = Тип("Структура")
		И ПараметрыПередачи.ИменаКолонокДальнейшиеДействия <> Неопределено Тогда
		ИменаКолонокДальнейшиеДействия = ПараметрыПередачи.ИменаКолонокДальнейшиеДействия;
	Иначе
		ИменаКолонокДальнейшиеДействия = Новый Массив;
		ИменаКолонокДальнейшиеДействия.Добавить("ДальнейшееДействиеЕГАИС1");
		ИменаКолонокДальнейшиеДействия.Добавить("ДальнейшееДействиеЕГАИС2");
		ИменаКолонокДальнейшиеДействия.Добавить("ДальнейшееДействиеЕГАИС3");
	КонецЕсли;
	
	ИнтеграцияИСКлиент.ОпределитьДоступностьДействий(Контекст, ИменаКолонокДальнейшиеДействия);
	
	Контекст.ДействиеНедоступно = Контекст.МассивДокументов.Количество() > 0
		И ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПодтвердитеПолучение")
		И Не ВозможнаОтправкаПодтверждения(Контекст.МассивДокументов);
	
	ИнтеграцияИСКлиент.ПодготовитьСообщенияКПередаче(Контекст);
	
КонецПроцедуры

// Обработчик завершения процедуры ПодготовитьСообщенияКПередаче.
//
// Параметры:
//  Контекст - Структура - контекст выполнения обработчика:
//   * МассивДокументов - массив - список ссылок на обрабатываемые документы,
//   * НепроведенныеДокументы - массив - документы, исключенные из обработки,
//   * ДинамическийСписок - ЭлементФормы - список в котором выполняется команда,
//   * ДальнейшееДействие - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - действие, которое будет выполнено.
//
Процедура ПодготовитьСообщенияКПередачеЗавершение(Контекст, ДополнительныеПараметры = Неопределено) Экспорт
	
	РезультатыПроверки = ИнтеграцияЕГАИСВызовСервера.ПроверитьМинимальныеЦеныВДокументах(Контекст.МассивДокументов, Контекст.ДальнейшееДействие);
	
	Если РезультатыПроверки.ЕстьНарушения Тогда
		СтруктураДопПараметров = Новый Структура;
		СтруктураДопПараметров.Вставить("Контекст", Контекст);
		СтруктураДопПараметров.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("ПроверкаМинимальныхЦенЗавершение", ЭтотОбъект, СтруктураДопПараметров);
		
		ТекстВопроса = НСтр("ru = 'Указанные цены меньше цен установленных в Приказе Министерства финансов Российской Федерации №235н от 07 октября 2020 г.'");
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Передать данные'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, Кнопки);
		
	Иначе
		ПодготовитьСообщенияКПередачеПослеПроверкиМинимальныхЦенЗавершение(Контекст, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает ответ пользователя в случае нарушения минимальных цен
//
// Параметры:
//  РезультатВопроса - КодВозвратаДиалога - выбранный пользователем ответ,
//  ДополнительныеПараметры - Структура
//
Процедура ПроверкаМинимальныхЦенЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПодготовитьСообщенияКПередачеПослеПроверкиМинимальныхЦенЗавершение(ДополнительныеПараметры.Контекст, ДополнительныеПараметры.ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

// Завершение подготовки сообщений к передаче.
//
// Параметры:
//  Контекст - Структура - контекст выполнения обработчика:
//   * МассивДокументов - массив - список ссылок на обрабатываемые документы,
//   * НепроведенныеДокументы - массив - документы, исключенные из обработки,
//   * ДинамическийСписок - ЭлементФормы - список в котором выполняется команда,
//   * ДальнейшееДействие - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - действие, которое будет выполнено.
//
Процедура ПодготовитьСообщенияКПередачеПослеПроверкиМинимальныхЦенЗавершение(Контекст, ДополнительныеПараметры = Неопределено) Экспорт
	
	Форма                   = Неопределено;
	УникальныйИдентификатор = Неопределено;
	
	Если ТипЗнч(Контекст) = Тип("Структура")
		И Контекст.Свойство("ДинамическийСписок")
		И ТипЗнч(Контекст.ДинамическийСписок) = Тип("ТаблицаФормы") Тогда
		Форма = ИнтеграцияИСКлиент.ПолучитьФормуПоЭлементуФормы(Контекст.ДинамическийСписок);
		Если Форма <> Неопределено Тогда
			УникальныйИдентификатор = Форма.УникальныйИдентификатор;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеДляВыполненияОбменаНаКлиенте = ОбменДаннымиЕГАИСВызовСервера.ПодготовитьКПередаче(
		Контекст.МассивДокументов,
		Контекст.ДальнейшееДействие,,,
		УникальныйИдентификатор);
	
	ОповещениеПриЗавершении = Неопределено;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ОповещениеПриЗавершении") Тогда
		ОповещениеПриЗавершении = ДополнительныеПараметры.ОповещениеПриЗавершении;
	КонецЕсли;
	
	ОбменДаннымиЕГАИССлужебныйКлиент.ОбработатьОчередьПередачиДанных(
		ОбменДаннымиЕГАИСКлиент.ОповещениеПослеЗавершенииОбмена(Контекст.ДинамическийСписок, Контекст.ДальнейшееДействие, ОповещениеПриЗавершении, УникальныйИдентификатор),
		ДанныеДляВыполненияОбменаНаКлиенте);
	
КонецПроцедуры

// Выполняет архивирование документов.
// 
// Параметры:
// 	Результат - КодВозвратаДиалога - Ответ на вопрос архивирования.
// 	ДополнительныеПараметры - Структура - Структура дополнительных параметров.
//
Процедура АрхивироватьДокументы(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	Изменения = ИнтеграцияЕГАИСВызовСервера.АрхивироватьДокументы(
		ДополнительныеПараметры.ДокументыКАрхивированию);
	
	Если Изменения <> Неопределено Тогда
		
		ОбменДаннымиЕГАИССлужебныйКлиент.ПослеЗавершенияОбмена(
			Изменения, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет архивирование распоряжений к оформлению.
// 
// Параметры:
// 	Результат - КодВозвратаДиалога - Ответ на вопрос архивирования.
// 	ДополнительныеПараметры - Структура - Структура дополнительных параметров.
//
Процедура АрхивироватьРаспоряжения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	Изменения = ИнтеграцияЕГАИСВызовСервера.АрхивироватьРаспоряженияКОформлению(
		ДополнительныеПараметры.Распоряжения,
		ДополнительныеПараметры.ПустаяСсылка);
	
	Если Изменения <> Неопределено Тогда
		
		ОбменДаннымиЕГАИССлужебныйКлиент.ПослеЗавершенияОбмена(
			Изменения, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Запросы

// Выполняет проверку наличия входящих документов в УТМ.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - Оповещение при завершении операции.
//     В результат передается массив структур, см. функцию ОбменДаннымиЕГАИССлужебныйКлиент.НоваяСтруктураСписокВходящихДокументов().
//  ОрганизацииЕГАИС - Неопределено, Массив, СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организации ЕГАИС, по которым необходимо выполнить обмен.
//  ИдентификаторВладельца - УникальныйИдентификатор - Уникальный идентификатор формы для сообщений обмена
//
Процедура ПроверитьВходящиеДокументы(ОповещениеПриЗавершении, ОрганизацииЕГАИС, ИдентификаторВладельца = Неопределено) Экспорт
	
	ОчиститьСообщения();
	
	ДанныеДляВыполненияОбменаНаКлиенте = ОбменДаннымиЕГАИСВызовСервера.ПроверитьВходящиеДокументы(ОрганизацииЕГАИС, ИдентификаторВладельца);
	
	АдресаURLВходящихДокументов = ДанныеДляВыполненияОбменаНаКлиенте.АдресаURLВходящихДокументов;
	НастройкиОбменаЕГАИС = ДанныеДляВыполненияОбменаНаКлиенте.НастройкиОбменаЕГАИС;
	
	ПараметрыОбработкиСпискаВходящихДокументов = Новый Структура;
	ПараметрыОбработкиСпискаВходящихДокументов.Вставить("АдресаURLВходящихДокументов", АдресаURLВходящихДокументов);
	ПараметрыОбработкиСпискаВходящихДокументов.Вставить("ОповещениеПриЗавершении",     ОповещениеПриЗавершении);
	
	ОбработчикСпискаВходящихДокументов = Новый ОписаниеОповещения(
		"ПроверитьВходящиеДокументы_ОбработатьСписокВходящихДокументов",
		ОбменДаннымиЕГАИССлужебныйКлиент,
		ПараметрыОбработкиСпискаВходящихДокументов);
	
	ДополнительныеПараметры = ОбменДаннымиЕГАИСКлиент.ОбщиеПараметрыОбменаНаКлиенте();
	ДополнительныеПараметры.НастройкиОбменаЕГАИС    = НастройкиОбменаЕГАИС;
	ДополнительныеПараметры.ОповещениеПриЗавершении = ОбработчикСпискаВходящихДокументов;
	ДополнительныеПараметры.ВОсновнойФорме          = Истина;
	ДополнительныеПараметры.ИдентификаторВладельца  = ИдентификаторВладельца;
	ДополнительныеПараметры.Вставить("Результат",   Новый Соответствие);
	ДополнительныеПараметры.Вставить("ТекстОшибки", ДанныеДляВыполненияОбменаНаКлиенте.ТекстОшибки);
	
	ОбменДаннымиЕГАИССлужебныйКлиент.ПолучитьСпискиВходящихСообщений(
		ОбменДаннымиЕГАИСКлиентСервер.ОрганизацииЕГАИС(НастройкиОбменаЕГАИС),
		ДополнительныеПараметры);
	
КонецПроцедуры

// Выполняет подготовку запроса данных классификаторов ЕГАИС к передаче и
// передает запрос в ЕГАИС, если есть действующее подключение к УТМ.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - Оповещение при завершении операции.
//     В результат передается массив структур Изменения, см. функцию ИнтеграцияЕГАИСКлиентСервер.СтруктураИзменения().
//  ОрганизацииЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС для которой выполняется запрос.
//  АкцизныеМарки - Массив Из Строка - Акцизные марки для проверки.
//  ИдентификаторВладельца - УникальныйИдентификатор - Уникальный идентификатор формы для сообщений обмена
//
Процедура ПодготовитьЗапросПроверкиАкцизныхМарокНаОстаткахОрганизацииКПередаче(ОповещениеПриЗавершении, ОрганизацияЕГАИС, АкцизныеМарки, ИдентификаторВладельца = Неопределено) Экспорт
	
	ОчиститьСообщения();
	
	ДанныеДляВыполненияОбменаНаКлиенте = ИнтеграцияЕГАИСВызовСервера.ПодготовитьЗапросПроверкиАкцизныхМарокНаОстаткахОрганизацииКПередаче(ОрганизацияЕГАИС, АкцизныеМарки, ИдентификаторВладельца);
	ДанныеДляВыполненияОбменаНаКлиенте.Вставить("ВОсновнойФорме");
	ОбменДаннымиЕГАИССлужебныйКлиент.ОбработатьОчередьПередачиДанных(ОповещениеПриЗавершении, ДанныеДляВыполненияОбменаНаКлиенте);
	
КонецПроцедуры

// Выполняет подготовку запроса ТТН к передаче и
// передает запрос в ЕГАИС, если есть действующее подключение к УТМ.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - Оповещение при завершении операции.
//     В результат передается массив структур Изменения, см. функцию ИнтеграцияЕГАИСКлиентСервер.СтруктураИзменения().
//  ОрганизацииЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС для которой выполняется запрос.
//  ИдентификаторТТН - Строка - Идентификатор запрашиваемой ТТН.
//  ИдентификаторВладельца - УникальныйИдентификатор - Уникальный идентификатор формы для сообщений обмена
//
Процедура ПодготовитьЗапросДанныхТТНКПередаче(ОповещениеПриЗавершении, ОрганизацияЕГАИС, ИдентификаторТТН, ИдентификаторВладельца = Неопределено) Экспорт
	
	ОчиститьСообщения();
	
	ДанныеДляВыполненияОбменаНаКлиенте = ИнтеграцияЕГАИСВызовСервера.ПодготовитьЗапросДанныхТТНКПередаче(ОрганизацияЕГАИС, ИдентификаторТТН, ИдентификаторВладельца);
	ДанныеДляВыполненияОбменаНаКлиенте.Вставить("ВОсновнойФорме");
	ОбменДаннымиЕГАИССлужебныйКлиент.ОбработатьОчередьПередачиДанных(ОповещениеПриЗавершении, ДанныеДляВыполненияОбменаНаКлиенте);
	
КонецПроцедуры

// Выполняет подготовку запроса данных справки по ее регистрационному номеру к передаче и
// передает запрос в ЕГАИС, если есть действующее подключение к УТМ.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - Оповещение при завершении операции.
//     В результат передается массив структур Изменения, см. функцию ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения().
//  ОрганизацииЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС для которой выполняется запрос.
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Запрашиваемые данные.
//   Возможные значения:
//     Перечисление.ВидыДокументовЕГАИС.ЗапросСправки1.
//     Перечисление.ВидыДокументовЕГАИС.ЗапросСправки2.
//  РегистрационныйНомер - Строка - Регистрационный номер запрашиваемой справки.
//  ИдентификаторВладельца - УникальныйИдентификатор - Уникальный идентификатор формы для сообщений обмена
//
Процедура ПодготовитьЗапросДанныхСправкиКПередаче(ОповещениеПриЗавершении, ОрганизацияЕГАИС, Операция, РегистрационныйНомер, ИдентификаторВладельца = Неопределено) Экспорт
	
	ОчиститьСообщения();
	
	ДанныеДляВыполненияОбменаНаКлиенте = ИнтеграцияЕГАИСВызовСервера.ПодготовитьЗапросДанныхСправкиКПередаче(ОрганизацияЕГАИС, Операция, РегистрационныйНомер, ИдентификаторВладельца);
	ДанныеДляВыполненияОбменаНаКлиенте.Вставить("ВОсновнойФорме");
	ОбменДаннымиЕГАИССлужебныйКлиент.ОбработатьОчередьПередачиДанных(ОповещениеПриЗавершении, ДанныеДляВыполненияОбменаНаКлиенте);
	
КонецПроцедуры

// Выполняет проверку подключения к УТМ.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - Оповещение при завершении операции.
//     В результат передается массив структур Изменения, см. функцию ИнтеграцияЕГАИСКлиентСервер.СтруктураИзменения().
//  АдресУТМ - Строка - IP адрес УТМ.
//  ПортУТМ - Число - Порт
//  Таймаут - Число - Количество секунд таймаута.
//  ОбменНаСервере - Булево - Признак проверки подключения на сервере.
//  ИдентификаторВладельца - УникальныйИдентификатор - Уникальный идентификатор формы для сообщений обмена
//
Процедура ПроверитьПодключениеКУТМНемедленно(ОповещениеПриЗавершении, АдресУТМ, ПортУТМ, Таймаут, ОбменНаСервере, ИдентификаторВладельца = Неопределено) Экспорт
	
	ОчиститьСообщения();
	
	ДанныеДляВыполненияОбменаНаКлиенте = ИнтеграцияЕГАИСВызовСервера.ПодготовитьЗапросПроверкиПодключенияКУТМ(
		АдресУТМ, ПортУТМ, Таймаут, ОбменНаСервере, ИдентификаторВладельца);
	ДанныеДляВыполненияОбменаНаКлиенте.Вставить("ВОсновнойФорме");
	ОбменДаннымиЕГАИССлужебныйКлиент.ОбработатьОчередьПередачиДанных(ОповещениеПриЗавершении, ДанныеДляВыполненияОбменаНаКлиенте);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСПрикладнымиДокументами

// Открывает форму сопоставления алкогольной продукции с номенклатурой предприятия.
//
// Параметры:
//  АлкогольнаяПродукция - СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС - Сопоставляемая алкогольная продукция.
//  Владелец - ФормаКлиентскогоПриложения, Неопределено - Форма-владелец.
//  НоменклатураДляВыбора - Массив - массив номенклатуры для быстрого выбора.
//
Процедура ОткрытьФормуСопоставленияАлкогольнойПродукции(АлкогольнаяПродукция, Владелец, НоменклатураДляВыбора = Неопределено) Экспорт
	
	ИмяФормыСопоставления = "Обработка.СопоставлениеНоменклатурыЕГАИС.Форма";
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АлкогольнаяПродукция" , АлкогольнаяПродукция);
	ПараметрыФормы.Вставить("НоменклатураДляВыбора", НоменклатураДляВыбора);
	
	ОписаниеОповещенияОЗакрытии = Неопределено;
	
	ИнтеграцияЕГАИСКлиентПереопределяемый.ПриОпределенииФормыСопоставления(ИмяФормыСопоставления, ПараметрыФормы, Владелец, ОписаниеОповещенияОЗакрытии);
	
	ОткрытьФорму(ИмяФормыСопоставления, ПараметрыФормы, Владелец,,,, ОписаниеОповещенияОЗакрытии);
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Вызывает обработчик печати переданной команды.
// 
// Параметры:
//  ОписаниеКоманды - Структура - Описание команды
// 
// Возвращаемое значение:
//  Неопределено - Выполнить команду печати
Функция ВыполнитьКомандуПечати(ОписаниеКоманды) Экспорт
	
	Если ОписаниеКоманды.Свойство("ЗаголовокФормы") И ЗначениеЗаполнено(ОписаниеКоманды.ЗаголовокФормы) Тогда
		ПараметрыПечати = Новый Структура("ЗаголовокФормы", ОписаниеКоманды.ЗаголовокФормы);
	Иначе
		
		Если ТипЗнч(ОписаниеКоманды.ОбъектыПечати) = Тип("Массив") И ОписаниеКоманды.ОбъектыПечати.Количество() = 1 Тогда 
			ПараметрыПечати = Новый Структура("ЗаголовокФормы", ОписаниеКоманды.ОбъектыПечати[0]);
		Иначе
			ПараметрыПечати = Новый Структура;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОписаниеКоманды.Свойство("ДополнительныеПараметры") Тогда
		ПараметрыПечати.Вставить("ДополнительныеПараметры", ОписаниеКоманды.ДополнительныеПараметры);
	КонецЕсли;
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(ОписаниеКоманды.МенеджерПечати, ОписаниеКоманды.Идентификатор, ОписаниеКоманды.ОбъектыПечати,
		ОписаниеКоманды.Форма, ПараметрыПечати);
	
	Возврат Неопределено;
	
КонецФункции

// Выводит печатную форму документа Остатки ЕГАИС.
// 
// Параметры:
//  ОписаниеКоманды - Структура - структура с описанием команды.
// 
// Возвращаемое значение:
//  Неопределено - Печать остатки ЕГАИС
Функция ПечатьОстаткиЕГАИС(ОписаниеКоманды) Экспорт
	
	Отбор = Новый Структура;
	Отбор.Вставить("ОтчетЕГАИС", ОписаниеКоманды.ОбъектыПечати);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор"                      , Отбор);
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", "Основной");
	ПараметрыФормы.Вставить("КлючВарианта"               , "Основной");
	ПараметрыФормы.Вставить("СформироватьПриОткрытии"    , Истина);
	
	Уникальность = Ложь;
	Если ОписаниеКоманды.ОбъектыПечати.Количество() <> 0 Тогда
		Уникальность = ?(ОписаниеКоманды.ОбъектыПечати.Количество() > 1, Истина, ОписаниеКоманды.ОбъектыПечати[0]);
	КонецЕсли;
	
	ОткрытьФорму(
		"Отчет.ОстаткиАлкогольнойПродукцииЕГАИС.Форма",
		ПараметрыФормы,,
		Уникальность);
	
	Возврат Неопределено;
	
КонецФункции

// Выводит печатную форму отчета История справок 2.
// 
// Параметры:
//  ОписаниеКоманды - Структура - структура с описанием команды.
// 
// Возвращаемое значение:
//  Неопределено - Печать история справок2
Функция ПечатьИсторияСправок2(ОписаниеКоманды) Экспорт
	
	Отбор = Новый Структура;
	Отбор.Вставить("ОтчетЕГАИС", ОписаниеКоманды.ОбъектыПечати);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор"                      , Отбор);
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", "Основной");
	ПараметрыФормы.Вставить("КлючВарианта"               , "Основной");
	ПараметрыФормы.Вставить("СформироватьПриОткрытии"    , Истина);
	
	Уникальность = Ложь;
	Если ОписаниеКоманды.ОбъектыПечати.Количество() <> 0 Тогда
		Уникальность = ?(ОписаниеКоманды.ОбъектыПечати.Количество() > 1, Истина, ОписаниеКоманды.ОбъектыПечати[0]);
	КонецЕсли;
	
	ОткрытьФорму(
		"Отчет.ИсторияСправок2ЕГАИС.Форма",
		ПараметрыФормы,,
		Уникальность);
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

// Показывает оповещение о результате заполнения справок 2 табличной части документа.
//
// Параметры:
//  СправкиЗаполнены - Булево - признак успешного заполнения справок,
//  Регистр2 - Булево - признак заполнения возврата алкогольной продукции из регистра №2.
//
Процедура СообщитьОЗавершенииЗаполненияСправок(СправкиЗаполнены, Регистр2 = Ложь) Экспорт
	
	Если СправкиЗаполнены Тогда
		ТекстСообщения = НСтр("ru = 'Заполнение справок 2 в табличной части ""Товары"" выполнено успешно.'");
	Иначе
		Если Не Регистр2 Тогда
			ТекстСообщения = НСтр("ru = 'Выполнить заполнение справок 2 в табличной части ""Товары"" не удалось: Нет остатков в регистре №1.'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Выполнить заполнение справок 2 в табличной части ""Товары"" не удалось: Нет документов передачи в регистр №2.'");
		КонецЕсли;
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Обработка завершена'"),,
		ТекстСообщения, БиблиотекаКартинок.Информация32ГосИС);
	
КонецПроцедуры

//Показывает оповещение пользователя об окончании заполнения серий
//
// Параметры:
//	СерииЗаполнены - Булево - Признак успешного заполнения серий
//	СписокОшибок - Неопределено, Структура - Список ошибок
//
Процедура ОповеститьОбОкончанииЗаполненияСерийВДокументе(СерииЗаполнены, СписокОшибок) Экспорт
	
	ОчиститьСообщения();
	
	Если СерииЗаполнены Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Серии заполнены'"),
			,
			НСтр("ru='Серии заполнены'"),
			БиблиотекаКартинок.Информация32ГосИС);
	Иначе
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Серии не заполнены'"),
			,
			НСтр("ru='Ни в одной строке серии не заполнены'"),
			БиблиотекаКартинок.Информация32ГосИС);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(СписокОшибок);
	
КонецПроцедуры

// Открыть форму списка вскрытых потребительских упаковок.
// 
// Параметры:
//  ПараметрыОткрытия - см. ИнтеграцияИСКлиент.ПараметрыОткрытияФормыСпискаПотребительскихУпаковок
Процедура ОткрытьФормуСпискаВскрытыхПотребительскихУпаковок(ПараметрыОткрытия) Экспорт
	
	Если ПараметрыОткрытия.ПараметрыФормы = Неопределено Тогда
		ПараметрыОткрытия.ПараметрыФормы = Новый Структура;
	КонецЕсли;
	
	ПараметрыОткрытия.ПараметрыФормы.Вставить("ИмяПодсистемы", "ЕГАИС");
	
	ОткрытьФорму(
		"ОбщаяФорма.ВскрытыеПотребительскиеУпаковкиИС",
		ПараметрыОткрытия.ПараметрыФормы,
		ПараметрыОткрытия.ВладелецФормы,,,,
		ПараметрыОткрытия.ОповещениеОЗакрытии,
		ПараметрыОткрытия.РежимОткрытияОкна);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОтборПоОрганизацииЕГАИС

Процедура ОткрытьФормуВыбораОрганизацийЕГАИС(Форма, Префикс, Префиксы = Неопределено, ОповещениеПриЗавершении = Неопределено) Экспорт
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("ОрганизацииЕГАИС", Форма.ОрганизацииЕГАИС.ВыгрузитьЗначения());
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма",                   Форма);
	ДополнительныеПараметры.Вставить("Префикс",                 Префикс);
	ДополнительныеПараметры.Вставить("Префиксы",                Префиксы);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	
	ОткрытьФорму(
		"Справочник.КлассификаторОрганизацийЕГАИС.Форма.ФормаВыбораСпискаОрганизаций",
		ПараметрыОткрытияФормы,
		Форма,,,,
		Новый ОписаниеОповещения("ПослеЗавершенияВыбораОрганизацийЕГАИС", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры

Процедура ПослеЗавершенияВыбораОрганизацийЕГАИС(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьВыборОрганизацийЕГАИС(
		ДополнительныеПараметры.Форма,
		Результат,
		ДополнительныеПараметры.ОповещениеПриЗавершении = Неопределено,
		ДополнительныеПараметры.Префикс,
		ДополнительныеПараметры.Префиксы);
	
	Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьВыборОрганизацийЕГАИС(Форма, Результат, ПрименятьОтбор, Префикс, Префиксы = Неопределено) Экспорт
	
	ИнтеграцияЕГАИСКлиентСервер.НастроитьОтборПоОрганизацииЕГАИС(Форма, Результат, Префикс, Префиксы);
	
	Если ПрименятьОтбор Тогда
		ОрганизацияЕГАИСОтборПриИзменении(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОрганизацияЕГАИСОтборПриИзменении(Форма)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Список") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.Список,
		                                                                        "ОрганизацияЕГАИС",
		                                                                        Форма.ОрганизацииЕГАИС,
		                                                                        ВидСравненияКомпоновкиДанных.ВСписке,
		                                                                        ,
		                                                                        Форма.ОрганизацииЕГАИС.Количество() > 0);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "СписокКОформлению") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.СписокКОформлению,
		                                                                        "ОрганизацияЕГАИС",
		                                                                        Форма.ОрганизацииЕГАИС,
		                                                                        ВидСравненияКомпоновкиДанных.ВСписке,
		                                                                        ,
		                                                                        Форма.ОрганизацииЕГАИС.Количество() > 0);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "СписокВРегистр3") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.СписокВРегистр3,
		                                                                        "ОрганизацияЕГАИС",
		                                                                        Форма.ОрганизацииЕГАИС,
		                                                                        ВидСравненияКомпоновкиДанных.ВСписке,
		                                                                        ,
		                                                                        Форма.ОрганизацииЕГАИС.Количество() > 0);
	КонецЕсли;
	
КонецПроцедуры

Функция ОтборОрганизацияЕГАИСПрефиксы() Экспорт
	
	Префиксы = Новый Массив;
	Префиксы.Добавить("Отбор");
	
	Возврат Префиксы;
	
КонецФункции

Функция ОрганизацииЕГАИСДляОбмена(Форма) Экспорт
	
	ОрганизацииЕГАИС = Форма.ОрганизацииЕГАИС.ВыгрузитьЗначения();
	Если ОрганизацииЕГАИС.Количество() = 0 Тогда
		Возврат Неопределено;
	ИначеЕсли ОрганизацииЕГАИС.Количество() = 1 Тогда
		Возврат ОрганизацииЕГАИС[0];
	Иначе
		Возврат ОрганизацииЕГАИС;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

// Возвращает реквизиты номенклатуры для выбора алкогольной продукции.
//
// Параметры:
//  Номенклатура - ОпределяемыйТип.Номенклатура - Номенклатура.
// 
// Возвращаемое значение:
//  Структура - Структура с обязательными свойствами:
//   * ВидАлкогольнойПродукции - СправочникСсылка.ВидыАлкогольнойПродукции - Вид алкогольной продукции.
//
Функция РеквизитыНоменклатурыДляВыбораАлкогольнойПродукции(Номенклатура) Экспорт
	
	Реквизиты = Новый Структура("ВидАлкогольнойПродукции");
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		ИнтеграцияЕГАИСКлиентПереопределяемый.ПриОпределенииРеквизитовНоменклатурыДляВыбораАлкогольнойПродукции(Реквизиты, Номенклатура);
	КонецЕсли;
	Возврат Реквизиты;
	
КонецФункции

Функция ПараметрыСозданияКонтрагента() Экспорт
	
	ПараметрыСоздания = Новый Структура;
	ИнтеграцияЕГАИСКлиентПереопределяемый.ПриОпределенииПараметровСозданияКонтрагента(ПараметрыСоздания);
	Возврат ПараметрыСоздания;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Только для внутреннего использования.
// Вызывается из: ПодготовитьСообщенияКПередаче
Функция ВозможнаОтправкаПодтверждения(СсылкиДокументов)
	
	Отказ = Ложь;
	
	СтатусыПроверкиИПодбора = ОбщегоНазначенияИСВызовСервера.ЗначениеРеквизитаОбъектов(СсылкиДокументов, "СтатусПроверкиИПодбора");
	
	КоличествоПроверенныхДокументов = 0;
	
	Для Каждого КлючЗначение Из СтатусыПроверкиИПодбора Цикл
		Если ЗавершенаПроверкаИПодбор(КлючЗначение.Значение) Тогда
			КоличествоПроверенныхДокументов = КоличествоПроверенныхДокументов + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоПроверенныхДокументов <> СсылкиДокументов.Количество() Тогда
		Если КоличествоПроверенныхДокументов = 0 Тогда
			Если СсылкиДокументов.Количество() = 1 Тогда
				СообщениеПользователю = НСтр("ru = 'В указанном документе не выполнена проверка поступившей алкогольной продукции.'");
			Иначе
				СообщениеПользователю = НСтр("ru = 'В указанных документах не выполнена проверка поступившей алкогольной продукции.'");
			КонецЕсли;
		Иначе
			СообщениеПользователю = НСтр("ru = 'Не во всех указанных документах выполнена проверка поступившей алкогольной продукции.'");
		КонецЕсли;
		СообщениеПользователю = СообщениеПользователю + " " + НСтр("ru = 'Отправка подтверждения возможна только после завершения проверки.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеПользователю,,,, Отказ);
	КонецЕсли;
	
	Возврат НЕ Отказ;
	
КонецФункции

// Только для внутреннего использования.
// 
// Параметры:
//  СтатусПроверкиИПодбора - Структура, Произвольный - Статус проверки и подбора:
// * Ключ - Строка - 
// * Значение - Произвольный - 
// 
// Возвращаемое значение:
//  Булево - Завершена проверка и подбор
Функция ЗавершенаПроверкаИПодбор(СтатусПроверкиИПодбора) Экспорт
	
	Возврат СтатусПроверкиИПодбора = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиИПодбораИС.Завершено");
	
КонецФункции

// Находит первую строку в заданной колонке, с заданным значением в коллекции ДанныеФормыДерево.
// 
// Параметры:
//  ГдеИскать - ДанныеФормыДерево
//  Значение - Произвольный
//  Колонка - Строка - Колонка
//  ИскатьВПодчиненных - Булево - Искать в подчиненных
// 
// Возвращаемое значение:
//  Число - Найти строку в данных формы дерево
Функция НайтиСтрокуВДанныхФормыДерево(ГдеИскать, Значение, Колонка, ИскатьВПодчиненных) Экспорт
	
	ЭлементыДерева = ГдеИскать.ПолучитьЭлементы();
	
	Для каждого ЭлементДерева Из ЭлементыДерева Цикл
		Если ЭлементДерева[Колонка] = Значение Тогда
			Возврат ЭлементДерева.ПолучитьИдентификатор();
		ИначеЕсли  ИскатьВПодчиненных Тогда
			НайденныйИдентификаторСтроки =  НайтиСтрокуВДанныхФормыДерево(ЭлементДерева,Значение,Колонка,ИскатьВПодчиненных);
			Если НайденныйИдентификаторСтроки >=0 Тогда
				Возврат НайденныйИдентификаторСтроки;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат -1;
	
КонецФункции

Процедура ОповеститьОНачалеОбработкиДанныхТСД() Экспорт
	
	ПоказатьОповещениеПользователя(ЗаголовокОповещенияТСД(), ,
		                           НСтр("ru = 'Начата обработка полученных из ТСД данных.'"),
		                           БиблиотекаКартинок.Информация32ГосИС);
	
КонецПроцедуры

Процедура ОповеститьОбОкончанииОбработкиДанныхТСД() Экспорт
	
	ПоказатьОповещениеПользователя(ЗаголовокОповещенияТСД(), ,
	                               НСтр("ru = 'Закончена обработка полученных из ТСД данных.'"),
	                               БиблиотекаКартинок.Информация32ГосИС);
	
КонецПроцедуры

Функция ЗаголовокФормыЗагрузкиКодовМаркировки(Владелец, ДоступнаИерархия = Ложь) Экспорт
	
	ВозвращаемоеЗначение = НСтр("ru = 'Загрузка акцизных марок и упаковок алкогольной продукции'");
	
	Если Не ДоступнаИерархия И ЗначениеЗаполнено(Владелец.Объект.Ссылка) Тогда
		ВозвращаемоеЗначение = СтрШаблон(НСтр("ru = 'Загрузка акцизных марок и упаковок алкогольной продукции в %1'"), Владелец.Объект.Ссылка);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ЗаголовокОповещенияТСД()

	Возврат НСтр("ru = 'Загрузка из ТСД'");

КонецФункции

// Обрабатывает проверку сопоставления классификаторов
//
// Параметры:
//   * ДокументОснование - ДокументСсылка - ссылка на документ, в котором произошло нажатие на гиперссылку,
//   * Форма             - ФормаКлиентскогоПриложения - форма документа, в которой произошло нажатие на гиперссылку,
//   * ОповещениеПриЗавершении - ОписаниеОповещения - действие после сопоставления классификаторов.
//
Процедура ПроверитьСопоставлениеКлассификаторов(ДокументОснование, Форма, ОповещениеПриЗавершении) Экспорт
	
	СтандартнаяОбработка = Истина;
	ИнтеграцияЕГАИСКлиентПереопределяемый.ПриПроверкеСопоставленияКлассификаторов(ДокументОснование, Форма, ОповещениеПриЗавершении, СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ТТНИсходящаяЕГАИС")
		Или ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
		
		РезультатПроверки = ИнтеграцияЕГАИСВызовСервера.ПроверитьСопоставлениеКлассификаторов(
			ДокументОснование,
			Форма.УникальныйИдентификатор);
		
		ИмяФормы = "Обработка.СопоставлениеКлассификаторовЕГАИС.Форма.СопоставлениеКлассификаторовЕГАИС";
		Если РезультатПроверки.ЕстьНеСопоставленныеТовары Тогда
			
			ПараметрыОткрытияФормы = Новый Структура;
			ПараметрыОткрытияФормы.Вставить("Документ", ДокументОснование);
			ПараметрыОткрытияФормы.Вставить("Товары",   РезультатПроверки.НеСопоставленныеТовары);
			
			ОткрытьФорму(
				ИмяФормы,
				ПараметрыОткрытияФормы,
				Форма,,,,
				ОповещениеПриЗавершении);
			
		Иначе
			
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Истина);
			
		КонецЕсли;
	Иначе
		
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Истина);
		
	КонецЕсли;
	
	
КонецПроцедуры

#КонецОбласти