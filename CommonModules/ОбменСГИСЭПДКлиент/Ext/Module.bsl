#Область ПрограммныйИнтерфейс

Процедура БаннерПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	СсылкаДляПерехода = Неопределено;
	Если ДанныеСобытия.Свойство("Href", СсылкаДляПерехода) И СсылкаДляПерехода <> Неопределено Тогда
		Если СтрНачинаетсяС(СсылкаДляПерехода, "http") Тогда
			ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(СсылкаДляПерехода);		
		Иначе
			МассивПодстрок = СтрРазделить(СсылкаДляПерехода, "/", Ложь);
			ЛокальнаяСсылка = МассивПодстрок[МассивПодстрок.ВГраница()];
			Если ЛокальнаяСсылка = "#closeBannerEPD" Тогда
				БаннерКомандаЗакрыть(Элемент);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура БаннерКомандаЗакрыть(Элемент) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ОписаниеОповещения = Новый ОписаниеОповещения("БаннерПриНажатииПослеВопроса", ЭтотОбъект, ДополнительныеПараметры);	
	ПоказатьВопрос(ОписаниеОповещения, НСтр("ru='Скрыть этот баннер навсегда?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

Процедура БаннерПриНажатииПослеВопроса(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Элемент = Неопределено;
	ДополнительныеПараметры.Свойство("Элемент", Элемент);
	
	Если РезультатВопроса <> Неопределено И Элемент <> Неопределено Тогда
		Элемент.Видимость = Ложь;
		Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
			ОбменСГИСЭПДВызовСервера.СохранитьПризнакЗакрытияБаннера(Элемент.Имя);
		КонецЕсли;			
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказатьХранимыеДанныеЭПД(ГруппаДанных, Отбор, ФормаВладелец, ОписаниеОповещения, Отказ, ИдентификаторСтрокиРодителя = Неопределено) Экспорт
	
	ИмяОбъекта = ИмяОбъектаФормы(ФормаВладелец.ИмяФормы);
	
	ОписаниеГруппыДанных = ОбменСГИСЭПДКлиентСервер.ОписаниеГруппыДанных(ГруппаДанных, ИмяОбъекта);

	Если ОписаниеГруппыДанных.ЕстьХранимыеДанные = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	НастройкиКомпоновкиФормы = Новый НастройкиКомпоновкиДанных;
 
	ЭлементОтбора = НастройкиКомпоновкиФормы.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Тип");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = ОписаниеГруппыДанных.Тип;
	ЭлементОтбора.Использование = Истина; 
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	Организация = Неопределено;
	Если Отбор.Свойство("Организация", Организация) Тогда
		ЭлементОтбора = НастройкиКомпоновкиФормы.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Организация;
		ЭлементОтбора.Использование = Истина; 
		ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	КонецЕсли;
	
	Контрагент = Неопределено;
	Если Отбор.Свойство("Контрагент", Контрагент) И ЗначениеЗаполнено(Контрагент) Тогда
		ЭлементОтбора = НастройкиКомпоновкиФормы.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Контрагент");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Контрагент;
		ЭлементОтбора.Использование = Истина; 
		ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	КонецЕсли;
	
	ДополнительныйОтбор = Неопределено;
	Если Отбор.Свойство("ДополнительныйОтбор", ДополнительныйОтбор) Тогда
		ЭлементОтбора = НастройкиКомпоновкиФормы.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДополнительныйОтбор");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = ДополнительныйОтбор;
		ЭлементОтбора.Использование = Истина; 
		ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	КонецЕсли;
	
	НастройкиКомпоновкиФормы.ДополнительныеСвойства.Вставить("Тест", 123);
		                                                                
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФиксированныеНастройки", НастройкиКомпоновкиФормы);
	ПараметрыФормы.Вставить("ГруппаДанных", ГруппаДанных);
	ПараметрыФормы.Вставить("Тип", ОписаниеГруппыДанных.Тип);
	ПараметрыФормы.Вставить("ИмяОбъекта", ИмяОбъекта);
	ПараметрыФормы.Вставить("ИдентификаторСтрокиРодителя", ИдентификаторСтрокиРодителя);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	 
	ОткрытьФорму("Справочник.ХранимыеДанныеЭПД.ФормаВыбора", ПараметрыФормы, ФормаВладелец, , , , ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

Процедура ИсходящиеДокументыФормироватьПриИзменении(ТекущиеДанные) Экспорт
	
	РеквизитыВида = ОбменСГИСЭПДВызовСервера.ЗначенияРеквизитовОбъекта(ТекущиеДанные.ВидДокумента, "ТипДокумента");
	Если РеквизитыВида.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовЭДО.ЭТрН")
		Или РеквизитыВида.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовЭДО.ЭЗН")
		Или РеквизитыВида.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовЭДО.ЭСВ")
		Или РеквизитыВида.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовЭДО.ЭЗЗ")
		Или РеквизитыВида.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовЭДО.ЭПЛ")
		Или РеквизитыВида.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовЭДО.ЭДФ") Тогда
		Если ТекущиеДанные.Формировать = Истина
			И ТекущиеДанные.СпособОбменаЭД <> ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО") Тогда
			ВопросЗавершение = Новый ОписаниеОповещения("ВопросОФормированииЭПД_Завершение", ЭтотОбъект, ТекущиеДанные);
			ПоказатьВопрос(ВопросЗавершение, 
				ТекстВопросаОПоддержкеОператоромЭПД(РеквизитыВида.ТипДокумента), 
				РежимДиалогаВопрос.ОКОтмена);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


// Обработчик команды "Скопировать"
//
// Параметры:
//  Список - ТаблицаФормы - Таблица формы:
//  	* ТекущиеДанные - ДанныеФормыСтруктура - С полями:
//  		** Ссылка - ДокументСсылка - 
Процедура СкопироватьЭлемент(Список) Экспорт
	
	ТекущиеДанные = Список.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Элемент = ТекущиеДанные.Ссылка;
				
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗначениеКопирования", Элемент);
		
		ИмяФормыОбъекта = ОбменСГИСЭПДВызовСервера.ПолноеИмяФормыОбъекта(Элемент);
		
		ОткрытьФорму(ИмяФормыОбъекта, ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик команды "Установить пометку удаления"
//
//	Параметры:
//		Список - ТаблицаФормы - 
//		ТипСписка - Строка - тип документов списка.
//		ОповещениеОЗавершении - ОписаниеОповещения - оповещение, которое должно быть вызвано после завершения попытки пометки на удаление.
//
Процедура УстановитьПометкуУдаления(Список) Экспорт
	
	Если ТипЗнч(Список.ВыделенныеСтроки) = Тип("Массив") Тогда
		Для каждого ВыделеннаяСтрока Из Список.ВыделенныеСтроки Цикл
			ДанныеСтроки = Список.ДанныеСтроки(ВыделеннаяСтрока);
			ОбменСГИСЭПДВызовСервера.УстановитьПометкуУдаления(ДанныеСтроки.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
	Список.Обновить();
	
КонецПроцедуры


// Процедура позволяет установить период через стандартный диалог выбора периода
//
// Параметры:
//  Объект                - Произвольный - Объект в котором устанавливается значения периода
//  ПараметрыПериода      - Структура - структура со свойствами "ДатаНачала", "ДатаОкончания" и в значениях имена полей
//                              объекта, для свойства "Вариант" - значение варианта стандартного периода.
//  ОповещениеПослеВыбора - ОписаниеОповещения - Описание оповещение которое выполняется после установки периода. 
//                              Может быть установлена пост-обработка в месте вызова после выбора периода.
// 
Процедура РедактироватьПериод(Объект, ПараметрыПериода = Неопределено, ОповещениеПослеВыбора = Неопределено) Экспорт
	
	Если ПараметрыПериода = Неопределено Тогда
		ПараметрыПериода = Новый Структура("ДатаНачала, ДатаОкончания", "ДатаНачала", "ДатаОкончания");
	КонецЕсли;
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Если ПараметрыПериода.Свойство("ДатаНачала") Тогда
		Диалог.Период.ДатаНачала = Объект[ПараметрыПериода.ДатаНачала];
	КонецЕсли; 
	Если ПараметрыПериода.Свойство("ДатаОкончания") Тогда
		Диалог.Период.ДатаОкончания = Объект[ПараметрыПериода.ДатаОкончания];
	КонецЕсли; 
	Если ПараметрыПериода.Свойство("Вариант") Тогда
		Диалог.Период.Вариант = ПараметрыПериода.Вариант;
	КонецЕсли; 
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект",           Объект);
	ДополнительныеПараметры.Вставить("ПараметрыПериода", ПараметрыПериода);
	Если ОповещениеПослеВыбора <> Неопределено Тогда
		ДополнительныеПараметры.Вставить("ОповещениеПослеВыбора", ОповещениеПослеВыбора);
	КонецЕсли; 
	
	Оповещение = Новый ОписаниеОповещения(
		"РедактироватьПериодЗавершение", 
		ЭтотОбъект, 
		ДополнительныеПараметры);
	
	Диалог.Показать(Оповещение);

КонецПроцедуры


// Обработчик команды "Изменить"
//
// Параметры:
//  Список - ТаблицаФормы - Таблица формы:
//  	* ТекущиеДанные - ДанныеФормыСтруктура - С полями:
//  		** Ссылка - ДокументСсылка - 
Процедура ИзменитьЭлемент(Список) Экспорт
	
	ТекущиеДанные = Список.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
		ПоказатьЗначение(Неопределено, ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры


// Процедура завершения для РедактироватьПериод()
//
// Параметры:
//  Период - СтандартныйПериод - период полученный из диалога
//	ДополнительныеПараметры - Произвольный - дополнительные параметры описания оповещения
Процедура РедактироватьПериодЗавершение(Период, ДополнительныеПараметры) Экспорт 

	ПараметрыПериода = ДополнительныеПараметры.ПараметрыПериода;
	Объект           = ДополнительныеПараметры.Объект;
	Если Период <> Неопределено Тогда
		Если ПараметрыПериода.Свойство("ДатаНачала") Тогда
			Объект[ПараметрыПериода.ДатаНачала]= Период.ДатаНачала;
		КонецЕсли; 
		Если ПараметрыПериода.Свойство("ДатаОкончания") Тогда
			Объект[ПараметрыПериода.ДатаОкончания]= Период.ДатаОкончания;
		КонецЕсли; 
		Если ПараметрыПериода.Свойство("Вариант") Тогда
			Объект[ПараметрыПериода.Вариант]= Период.Вариант;
		КонецЕсли;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ОповещениеПослеВыбора") Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеВыбора, Период);
	КонецЕсли;
	
КонецПроцедуры


Процедура НадписьМПОткрытьНажатие(Форма, ИдентификаторОтправителя) Экспорт
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД.СервисВзаимодействияМПЭПД") Тогда	
		МодульСервисВзаимодействияМПЭПДКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("СервисВзаимодействияМПЭПДКлиент");
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("УчетнаяЗаписьЭДО", ИдентификаторОтправителя);
		ПараметрыФормы.Вставить("Организация", Форма.Объект.Организация);
		ПараметрыФормы.Вставить("Идентификатор", Форма.МПИдентификаторЗаписи);
		
		МодульСервисВзаимодействияМПЭПДКлиент.ОткрытьФормуПользователяМобильногоУстройства(ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

Процедура НадписьМППозвонитьНажатие(Форма) Экспорт
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД.СервисВзаимодействияМПЭПД") Тогда
		ПерейтиПоНавигационнойСсылке("tel:" + Форма.МПТелефон);
	КонецЕсли;

КонецПроцедуры

Процедура КомандаВыбратьМПНажатие(Форма) Экспорт
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД.СервисВзаимодействияМПЭПД") Тогда	
		МодульСервисВзаимодействияМПЭПДКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("СервисВзаимодействияМПЭПДКлиент");
		МодульСервисВзаимодействияМПЭПДКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("СервисВзаимодействияМПЭПДКлиентСервер");
		
		ТипДокумента = ОбменСГИСЭПДКлиентСервер.ТипДокументаПоИмениФормы(Форма.ИмяФормы);
		
		ПрефиксТитула = ОбменСГИСЭПДКлиентСервер.ПолучитьПрефиксТитулаПоСтраницеОсновнойФормы(
			Форма.Элементы.Страницы.ТекущаяСтраница.Имя, 
			ТипДокумента);	
		ТитулМП = ОбменСГИСЭПДКлиентСервер.ТитулПоПрефиксу("Документ." + ТипДокумента, ПрефиксТитула);
		
		ПараметрыДействийМП = МодульСервисВзаимодействияМПЭПДКлиент.ПараметрыДействийДляМобильногоПриложения(
					Форма.Объект.Ссылка,
					Форма.МПИдентификатор,
					Форма.МПИдентификаторЗаписи,
					ТитулМП);
				
		Если ПараметрыДействийМП = Неопределено Тогда
			ПоказатьПредупреждение(, НСтр("ru='Документ не поддерживает обмен с мобильным приложением'"));
		Иначе	
			ОткрытьФорму(МодульСервисВзаимодействияМПЭПДКлиентСервер.ИмяФормыВыборДействияПоДокументу(), 
					ПараметрыДействийМП, 
					ЭтотОбъект, 
					,,,,
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Проверить подпись МП.
// 
// Параметры:
//  НавигационнаяСсылкаФорматированнойСтроки - Строка - навигационная ссылка
//  Форма - ФормаКлиентскогоПриложения - Форма документа (владельца)
Процедура НадписьСтатусаМобильноеПриложениеОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, Форма) Экспорт
	
	ТипДокументаСтрока = ОбменСГИСЭПДКлиентСервер.ТипДокументаПоИмениФормы(Форма.ИмяФормы);
	МассивЧастейНавигационнойСсылки = СтрРазделить(НавигационнаяСсылкаФорматированнойСтроки, "_");
	ПрефиксТитула = МассивЧастейНавигационнойСсылки[1];
	УИДМинтранс = Форма.Объект.УИДМинтранс;
	Титул = ОбменСГИСЭПДКлиентСервер.ТитулПоПрефиксу("Документ." + ТипДокументаСтрока, ПрефиксТитула);
	СтруктураПривязкиМП = Форма.МППривязки.Получить(Титул);

	ДвоичныеДанныеДокумента = Неопределено;
	ДвоичныеДанныеПодписи = Неопределено;
	Если СтруктураПривязкиМП.Свойство("ДвоичныеДанныеДокумента", ДвоичныеДанныеДокумента)
		И СтруктураПривязкиМП.Свойство("ДвоичныеДанныеПодписи", ДвоичныеДанныеПодписи) Тогда
		Если ТипЗнч(ДвоичныеДанныеДокумента) = Тип("Строка") Тогда
			ДвоичныеДанныеДокумента = ПолучитьДвоичныеДанныеИзBase64Строки(ДвоичныеДанныеДокумента);
		КонецЕсли;
		Если ТипЗнч(ДвоичныеДанныеПодписи) = Тип("Строка") Тогда
			ДвоичныеДанныеПодписи = ПолучитьДвоичныеДанныеИзBase64Строки(ДвоичныеДанныеПодписи);
		КонецЕсли;
		КонтекстПроверки = Новый Структура;
		КонтекстПроверки.Вставить("Форма", Форма);
		КонтекстПроверки.Вставить("ТипДокументаСтрока", ТипДокументаСтрока);
		КонтекстПроверки.Вставить("ПрефиксТитула", ПрефиксТитула);
		КонтекстПроверки.Вставить("УИДМинтранс", УИДМинтранс);
		КонтекстПроверки.Вставить("ДвоичныеДанныеДокумента", ДвоичныеДанныеДокумента);
		ПроверитьПодписьМП_ПослеПроверкиПодписи = Новый ОписаниеОповещения("ПроверитьПодписьМП_ПослеПроверкиПодписи", ЭтотОбъект, КонтекстПроверки);
		ПараметрыПроверки = ЭлектроннаяПодписьКлиент.ПараметрыПроверкиПодписи();
		ПараметрыПроверки.РезультатВВидеСтруктуры = Истина;
		ЭлектроннаяПодписьКлиент.ПроверитьПодпись(ПроверитьПодписьМП_ПослеПроверкиПодписи, 
			ДвоичныеДанныеДокумента,
			ДвоичныеДанныеПодписи, , ,
			ПараметрыПроверки);
	КонецЕсли;
		
КонецПроцедуры

Процедура ПроверитьПодписьМП_ПослеПроверкиПодписи(Результат, КонтекстПроверки) Экспорт
	
	СертификатКриптографии = Новый СертификатКриптографии(Результат.Сертификат);
	СвойстваСертификата = ЭлектроннаяПодписьКлиент.СвойстваСертификата(СертификатКриптографии);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипДокументаСтрока", КонтекстПроверки.ТипДокументаСтрока);
	ПараметрыФормы.Вставить("ПрефиксТитула", КонтекстПроверки.ПрефиксТитула);
	ПараметрыФормы.Вставить("УИДМинтранс", КонтекстПроверки.УИДМинтранс);
	ПараметрыФормы.Вставить("ДвоичныеДанныеДокумента", КонтекстПроверки.ДвоичныеДанныеДокумента);
	ПараметрыФормы.Вставить("РезультатПроверки", Результат);
	ПараметрыФормы.Вставить("СвойстваСертификата", СвойстваСертификата);
	
	ОткрытьФорму("ОбщаяФорма.ПодписанныеДанныеМПЭПД", 
		ПараметрыФормы, 
		КонтекстПроверки.Форма, 
		КонтекстПроверки.Форма.УникальныйИдентификатор, , , 
		, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ОтображениеМобильногоПриложения(Форма, ТитулШага) Экспорт
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД.СервисВзаимодействияМПЭПД") Тогда	
		МодульСервисВзаимодействияМПЭПДКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("СервисВзаимодействияМПЭПДКлиентСервер");
	
		Элементы = Форма.Элементы;
		
		ИнформацияПоТитулуМП = МодульСервисВзаимодействияМПЭПДКлиентСервер.ИнформацияПоТитулуМП(Форма.Объект.Ссылка, Форма.Объект.РольУчастника, ТитулШага);
		Элементы.ГруппаМобильноеПриложение.Видимость = ИнформацияПоТитулуМП.ТитулДоступенВМП;	
		Если ТипЗнч(Форма.МППривязки) = Тип("ФиксированноеСоответствие") Тогда
			СтруктураПривязкиМП = Форма.МППривязки.Получить(ТитулШага);
			Если СтруктураПривязкиМП <> Неопределено Тогда
				СтруктураПривязкиМП.Свойство("МПНаименование", Форма.МПНаименование);
				СтруктураПривязкиМП.Свойство("МПТелефон", Форма.МПТелефон);
				СтруктураПривязкиМП.Свойство("МПФото", Форма.МПФото);
				СтруктураПривязкиМП.Свойство("МПИдентификатор", Форма.МПИдентификатор);
				СтруктураПривязкиМП.Свойство("МПИдентификаторЗаписи", Форма.МПИдентификаторЗаписи);	
			Иначе
				Форма.МПНаименование = Неопределено;
				Форма.МПТелефон = Неопределено;
				Форма.МПФото = Неопределено;
				Форма.МПИдентификатор = Неопределено;
				Форма.МПИдентификаторЗаписи = Неопределено;
			КонецЕсли;
		КонецЕсли; 
		Элементы.МПФото.Видимость = ЗначениеЗаполнено(Форма.МПИдентификаторЗаписи);	
		Элементы.ГруппаМПНаименование.Видимость = ЗначениеЗаполнено(Форма.МПИдентификаторЗаписи);
		Элементы.ГруппаМПТелефон.Видимость = ЗначениеЗаполнено(Форма.МПИдентификаторЗаписи);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаОповещенияМП(Форма, ИмяСобытия, Параметр, Источник) Экспорт
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД.СервисВзаимодействияМПЭПД") Тогда	
		Элементы = Форма.Элементы;
		
		Если ИмяСобытия = "МПОтвязаноОтДокумента" И Источник = Форма.Объект.Ссылка Тогда
			Форма.МПИдентификатор = Неопределено;	
			Форма.МПИдентификаторЗаписи = Неопределено;
			Форма.МПНаименование = Неопределено;
			Форма.МПТелефон = Неопределено;
			Форма.МПФото = Неопределено;
			
			Элементы.МПФото.Видимость = Ложь;	
			Элементы.ГруппаМПНаименование.Видимость = Ложь;
			Элементы.ГруппаМПТелефон.Видимость = Ложь;	
			Элементы.КомандаВыбратьМП.Заголовок = "Выбрать";
		ИначеЕсли ИмяСобытия = "МППривязаноКДокументу" И Источник = Форма.Объект.Ссылка Тогда
			Параметр.Свойство("МПИдентификатор", Форма.МПИдентификатор);	
			Параметр.Свойство("МПИдентификаторЗаписи", Форма.МПИдентификаторЗаписи);
			Параметр.Свойство("МПНаименование", Форма.МПНаименование);
			Параметр.Свойство("МПТелефон", Форма.МПТелефон);
			Параметр.Свойство("МПФото", Форма.МПФото);
			
			Элементы.МПФото.Видимость = Истина;	
			Элементы.ГруппаМПНаименование.Видимость = Истина;
			Элементы.ГруппаМПТелефон.Видимость = Истина;	
			Элементы.КомандаВыбратьМП.Заголовок = "Изменить";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

#КонецОбласти

Процедура ПриИзмененииДанныхНаФорме(Форма, ИмяЭлемента) Экспорт
	
	СтруктураРеквизитовФормы = Новый Структура(Форма.ОписаниеРеквизитовФормы.ПараметрыФормы);
	
	Если СтруктураРеквизитовФормы.Свойство(ИмяЭлемента) Тогда
		ЗначениеРеквизита = Форма[ИмяЭлемента];
	КонецЕсли;
	
	Если Форма.ОписаниеРеквизитовФормы.Свойство("РеквизитыОбъекта") Тогда
		СтруктураРеквизитовОбъекта = Новый Структура(Форма.ОписаниеРеквизитовФормы.РеквизитыОбъекта);
		Если СтруктураРеквизитовОбъекта.Свойство(ИмяЭлемента) Тогда
			ЗначениеРеквизита = Форма.Объект[ИмяЭлемента];
		КонецЕсли;
	КонецЕсли;
		
	Если ОбменСГИСЭПДКлиентСервер.ЭтоОсновнаяФорма(Форма) Тогда
		ОбменСГИСЭПДКлиентСервер.УстановитьЗначениеРеквизитаВСтруктуреФормы(Форма, ИмяЭлемента, ЗначениеРеквизита);
	КонецЕсли;
	
КонецПроцедуры

#Область РаботаСХранимымиДаннымиНаФорме

Процедура ХранимыеДанныеНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка, ТекущиеДанные = Неопределено) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ВывестиФормуВводаДанных(Форма, Элемент.Имя, ТекущиеДанные);
	
КонецПроцедуры

Процедура ХранимыеДанныеПриИзменении(Форма, ЗначениеРеквизита, Элемент, ТекущиеДанные = Неопределено) Экспорт
	
	ПриИзмененииДанныхНаФорме(Форма, Элемент.Имя);
	
	ГруппаДанных = СтрЗаменить(Элемент.Имя, "ХранимыеДанные", "");
	Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
		ВходящийКонтекст = Новый Структура;
		ВходящийКонтекст.Вставить("ЗапретитьИзменение", Ложь);
		ВходящийКонтекст.Вставить("Форма", Форма);
		ВходящийКонтекст.Вставить("ГруппаДанных", ГруппаДанных);
		Если ТекущиеДанные <> Неопределено Тогда
			ВходящийКонтекст.Вставить("ТекущиеДанные", ТекущиеДанные);	
		КонецЕсли;
		ОткрытиеФормыПоГиперссылке_Завершение(ЗначениеРеквизита, ВходящийКонтекст);	
	Иначе
		ОбменСГИСЭПДКлиентСервер.УдалитьРеквизитыПоГруппеДанных(Форма, ГруппаДанных);
		ОбменСГИСЭПДКлиентСервер.ИзменитьОформлениеЭлементовФормы(Форма, СтрЗаменить(Элемент.Имя, "ХранимыеДанные", ""));	
	КонецЕсли;
	
КонецПроцедуры

Процедура ХранимыеДанныеАвтоПодбор(Форма, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка) Экспорт
	
	ГруппаДанных = СтрЗаменить(Элемент.Имя, "ХранимыеДанные", "");
	ПараметрыПолученияДанных.Отбор = ПолучитьОтборХранимыхДанных(Форма, Форма, ГруппаДанных);
	ПараметрыПолученияДанных.СпособПоискаСтроки = ПредопределенноеЗначение("СпособПоискаСтрокиПриВводеПоСтроке.ЛюбаяЧасть");
	
КонецПроцедуры

Процедура ХранимыеДанныеОткрытие(Форма, ЗначениеРеквизита, Элемент, СтандартнаяОбработка) Экспорт
	
	Если ТипЗнч(ЗначениеРеквизита) <> Тип("СправочникСсылка.ХранимыеДанныеЭПД") Тогда
		СтандартнаяОбработка = Ложь;
		ВывестиФормуВводаДанных(Форма, Элемент.Имя, , Ложь);
	Иначе
		СтандартнаяОбработка = Ложь;
		ГруппаДанных = СтрЗаменить(Элемент.Имя, "ХранимыеДанные", "");
		ПараметрыОткрытияХД = Новый Структура;
		ПараметрыОткрытияХД.Вставить("Ключ", ЗначениеРеквизита);
		ПараметрыОткрытияХД.Вставить("ГруппаДанных", ГруппаДанных);
		ПараметрыОткрытияХД.Вставить("ИмяОбъекта", ИмяОбъектаФормы(Форма.ИмяФормы));
		ОткрытьФорму("Справочник.ХранимыеДанныеЭПД.ФормаОбъекта", 
			ПараметрыОткрытияХД, 
			Форма, 
			Форма.УникальныйИдентификатор, 
			, , ,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


Функция ТекстВопросаОПоддержкеОператоромЭПД(ТипДокумента, ПриСозданииДокумента = Ложь) Экспорт
	
	МассивФорматированныхСтрок = Новый Массив;
	МассивФорматированныхСтрок.Добавить(НСтр("ru='Уважаемый пользователь!'"));
	МассивФорматированныхСтрок.Добавить(Символы.ПС);
	МассивФорматированныхСтрок.Добавить(Символы.ПС);
	МассивФорматированныхСтрок.Добавить(
		НСтр("ru='В программе поддержана возможность обмена электронными перевозочными документами'"));
	МассивФорматированныхСтрок.Добавить(" ");
	МассивФорматированныхСтрок.Добавить(
		НСтр("ru='в соответствии с'"));
	МассивФорматированныхСтрок.Добавить(" ");
	МассивФорматированныхСтрок.Добавить(
			Новый ФорматированнаяСтрока("Постановлением", , , , 
									"https://its.1c.ru/db/garant#content:404641819:1:1"));
	МассивФорматированныхСтрок.Добавить(" ");
	МассивФорматированныхСтрок.Добавить(НСтр("ru='Правительства РФ от 21 мая 2022 г. № 931.'"));
	МассивФорматированныхСтрок.Добавить(Символы.ПС);
	МассивФорматированныхСтрок.Добавить(Символы.ПС);
	Если ПриСозданииДокумента = Истина Тогда
		МассивФорматированныхСтрок.Добавить(НСтр("ru='Перед отправкой'"));
		МассивФорматированныхСтрок.Добавить(" ");
		Если ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовЭДО.ЭТрН") Тогда
			МассивФорматированныхСтрок.Добавить(НСтр("ru='электронной транспортной накладной'"));	
		ИначеЕсли ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовЭДО.ЭЗН") Тогда
			МассивФорматированныхСтрок.Добавить(НСтр("ru='электронного заказа-наряда'"));	
		ИначеЕсли ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовЭДО.ЭСВ") Тогда
			МассивФорматированныхСтрок.Добавить(НСтр("ru='электронной сопроводительной ведомости'"));
		ИначеЕсли ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовЭДО.ЭЗЗ") Тогда
			МассивФорматированныхСтрок.Добавить(НСтр("ru='электронного заказа (заявки)'"));
		ИначеЕсли ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовЭДО.ЭПЛ") Тогда
			МассивФорматированныхСтрок.Добавить(НСтр("ru='электронного путевого листа'"));
		ИначеЕсли ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовЭДО.ЭДФ") Тогда
			МассивФорматированныхСтрок.Добавить(НСтр("ru='электронного договора фрахтования'"));
		КонецЕсли;
		МассивФорматированныхСтрок.Добавить(" ");
		МассивФорматированныхСтрок.Добавить(
			НСтр("ru='убедитесь, пожалуйста, что у вашего оператора есть возможность обмена этим видом документа.'"));	
	Иначе
		МассивФорматированныхСтрок.Добавить(
			НСтр("ru='Перед включением опции убедитесь, пожалуйста, что у вашего оператора есть возможность обмена'"));
		МассивФорматированныхСтрок.Добавить(" ");
		Если ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовЭДО.ЭТрН") Тогда
			МассивФорматированныхСтрок.Добавить(НСтр("ru='электронными транспортными накладными'"));	
		ИначеЕсли ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовЭДО.ЭЗН") Тогда
			МассивФорматированныхСтрок.Добавить(НСтр("ru='электронными заказ-нарядами'"));	
		ИначеЕсли ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовЭДО.ЭСВ") Тогда
			МассивФорматированныхСтрок.Добавить(НСтр("ru='электронными сопроводительными ведомостями'"));
		ИначеЕсли ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовЭДО.ЭЗЗ") Тогда
			МассивФорматированныхСтрок.Добавить(НСтр("ru='электронными заказами (заявками)'"));
		ИначеЕсли ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовЭДО.ЭПЛ") Тогда
			МассивФорматированныхСтрок.Добавить(НСтр("ru='электронными путевыми листами'"));
		ИначеЕсли ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовЭДО.ЭДФ") Тогда
			МассивФорматированныхСтрок.Добавить(НСтр("ru='электронными договорами фрахтования'"));
		КонецЕсли;
		МассивФорматированныхСтрок.Добавить(" ");
		МассивФорматированныхСтрок.Добавить(НСтр("ru='через него.'"));
	КонецЕсли;

	
	Возврат Новый ФорматированнаяСтрока(МассивФорматированныхСтрок);
	
КонецФункции


Процедура ВопросОФормированииЭПД_Завершение(Результат, ТекущиеДанные) Экспорт
	
	Если Результат <> КодВозвратаДиалога.ОК Тогда
		ТекущиеДанные.Формировать = Ложь;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьНастройкиОтправкиЭДО(Организация, Контрагент, ВидДокумента, ОбработкаЗавершения) Экспорт
	
	КлючНастроекОтправки = НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтправки();
	КлючНастроекОтправки.ВидДокумента = ВидДокумента;
	КлючНастроекОтправки.Отправитель = Организация;
	КлючНастроекОтправки.Получатель = Контрагент; 
	
	НастройкиОтправки = ОбменСГИСЭПДВызовСервера.НастройкиОтправки(КлючНастроекОтправки);
	
	Если НастройкиОтправки = Неопределено Тогда	
		ПараметрыНастройкиОбменаСКонтрагентом = НастройкиЭДОКлиент.НовыеПараметрыНастройкиОбменаСКонтрагентом();
		ПараметрыНастройкиОбменаСКонтрагентом.НастройкаОдногоДокумента = Истина;
		НастройкиЭДОКлиент.НастроитьОбменСКонтрагентом(КлючНастроекОтправки, ОбработкаЗавершения, ПараметрыНастройкиОбменаСКонтрагентом);
	Иначе
		ВыполнитьОбработкуОповещения(ОбработкаЗавершения, НастройкиОтправки); 
	КонецЕсли;
	
КонецПроцедуры


Процедура СохранитьПараметрыПодчиненнойФормы(Форма) Экспорт
	
	ДанныеКорректны = СведенияУказаныКорректно(Форма);
	
	Если ДанныеКорректны Тогда
		РезультатЗакрытияФормы = Новый Структура;
		РезультатЗакрытияФормы.Вставить("Ключ", Форма.Ключ);
		РезультатЗакрытияФормы.Вставить("ОписаниеРеквизитовФормы", Форма.ОписаниеРеквизитовФормы);
		
		ДанныеЗаполненияРеквизитовФормы = Новый Структура(Форма.ОписаниеРеквизитовФормы.ПараметрыФормы);
		ЗаполнитьЗначенияСвойств(ДанныеЗаполненияРеквизитовФормы, Форма, Форма.ОписаниеРеквизитовФормы.ПараметрыФормы);
		
		РезультатЗакрытияФормы.Вставить("ДанныеЗаполненияРеквизитовФормы", ДанныеЗаполненияРеквизитовФормы);
		
		МассивИменТаблиц = СтрРазделить(Форма.ОписаниеРеквизитовФормы.ИменаТаблиц, ",", Ложь);
		МассивИменОбработано = Новый Массив;
		ТаблицыФормы = Новый Структура;		
		Для Каждого ИмяТаблицы Из МассивИменТаблиц Цикл
			Если МассивИменОбработано.Найти(ИмяТаблицы) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			МассивСтрокТаблицы = Новый Массив;
			Для Каждого СтрокаТаблицыФормы Из Форма[ИмяТаблицы] Цикл
				СтруктураСтроки = Новый Структура(Форма.ОписаниеРеквизитовФормы.ОписаниеТаблицФормы[ИмяТаблицы]);
				ЕстьЗаполненное = Ложь;
				Для Каждого КиЗ Из СтруктураСтроки Цикл
					Если СтрЗаканчиваетсяНа(ИмяТаблицы, "ИнформационныеПоля") Тогда
						ЕстьЗаполненное = Истина;
						Прервать;
					ИначеЕсли СтрЗаканчиваетсяНа(ИмяТаблицы, "ДополнительнаяИнформация")
						И КиЗ.Ключ = "Значение" Тогда
						Если ЗначениеЗаполнено(СтрокаТаблицыФормы[КиЗ.Ключ]) Тогда
							ЕстьЗаполненное = Истина;
							Прервать;
						ИначеЕсли СтрокаТаблицыФормы.Свойство("Обязательный")
							И СтрокаТаблицыФормы.Обязательный = Истина Тогда
							ЕстьЗаполненное = Истина;
							Прервать;
						КонецЕсли;
					ИначеЕсли КиЗ.Ключ <> "ИдентификаторСтроки"
						И КиЗ.Ключ <> "ИдентификаторСтрокиРодителя" 
						И ЗначениеЗаполнено(СтрокаТаблицыФормы[КиЗ.Ключ]) Тогда
						ЕстьЗаполненное = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ЕстьЗаполненное = Истина Тогда
					ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтрокаТаблицыФормы);
					Если СтруктураСтроки.Свойство("ИдентификаторСтрокиРодителя")
						И ЗначениеЗаполнено(СтруктураСтроки.ИдентификаторСтрокиРодителя) = Ложь
						И ЗначениеЗаполнено(Форма.ИдентификаторСтрокиРодителя) = Истина Тогда
						СтруктураСтроки.ИдентификаторСтрокиРодителя = Форма.ИдентификаторСтрокиРодителя;	
					КонецЕсли;
					МассивСтрокТаблицы.Добавить(СтруктураСтроки);
				КонецЕсли;
			КонецЦикла;
			ТаблицыФормы.Вставить(ИмяТаблицы, МассивСтрокТаблицы); 
			
			// Дополнительные поля
			ОписаниеГруппыДопРеквизитов = Неопределено;
			Если Форма.ОписаниеРеквизитовФормы.ОписаниеДопРеквизитов.Свойство(ИмяТаблицы, ОписаниеГруппыДопРеквизитов) Тогда
				МассивСтрокТаблицыДоп = Новый Массив;
				МассивСтрокТаблицыИнф = Новый Массив;
				ЕстьЗаполненное = Ложь;
				Для Каждого СтрокаТаблицыФормы Из Форма[ИмяТаблицы] Цикл			
					СтруктураСтрокиДоп = Новый Структура;
					СтруктураСтрокиДоп.Вставить("ИдентификаторСтрокиРодителя", СтрокаТаблицыФормы.ИдентификаторСтроки);
					СтруктураСтрокиДоп.Вставить("ИдентификаторСтроки", Строка(Новый УникальныйИдентификатор()));
						
					Для Каждого СтруктураДопРеквизита Из ОписаниеГруппыДопРеквизитов Цикл
						ЗначениеДопРеквизита = СтрокаТаблицыФормы["ДополнительнаяИнформация_" + СтруктураДопРеквизита.ИдентификаторИнформации];
						Если ЗначениеЗаполнено(ЗначениеДопРеквизита) 
							Или СтруктураДопРеквизита.Обязательный Тогда
							ЕстьЗаполненное = Истина;
							СтруктураСтрокиИнф = Новый Структура;
							СтруктураСтрокиИнф.Вставить("ИдентификаторСтрокиРодителя", СтруктураСтрокиДоп.ИдентификаторСтроки);
							СтруктураСтрокиИнф.Вставить("ИдентификаторИнформации", СтруктураДопРеквизита.ИдентификаторИнформации);
							СтруктураСтрокиИнф.Вставить("Заголовок", СтруктураДопРеквизита.Заголовок);
							СтруктураСтрокиИнф.Вставить("ТипДанных", СтруктураДопРеквизита.ТипДанных);
							СтруктураСтрокиИнф.Вставить("Квалификаторы", СтруктураДопРеквизита.Квалификаторы);
							СтруктураСтрокиИнф.Вставить("Перечисления", СтруктураДопРеквизита.Перечисления);
							СтруктураСтрокиИнф.Вставить("Обязательный", СтруктураДопРеквизита.Обязательный);
							СтруктураСтрокиИнф.Вставить("Значение", ЗначениеДопРеквизита);
							
							МассивСтрокТаблицыИнф.Добавить(СтруктураСтрокиИнф);
						КонецЕсли;	
					КонецЦикла;	
					
					Если ЕстьЗаполненное = Истина Тогда
						МассивСтрокТаблицыДоп.Добавить(СтруктураСтрокиДоп);	
					КонецЕсли;
				КонецЦикла;
				
				Если ЕстьЗаполненное Тогда
					ТаблицыФормы.Вставить(ИмяТаблицы + "ИнформационныеПоля", МассивСтрокТаблицыДоп);
					ТаблицыФормы.Вставить(ИмяТаблицы + "ДополнительнаяИнформация", МассивСтрокТаблицыИнф);
				КонецЕсли;
				
				МассивИменОбработано.Добавить(ИмяТаблицы + "ИнформационныеПоля");
				МассивИменОбработано.Добавить(ИмяТаблицы + "ДополнительнаяИнформация");
			КонецЕсли;
		КонецЦикла;	
		РезультатЗакрытияФормы.Вставить("ДанныеЗаполненияТаблицФормы", ТаблицыФормы);
		
		РезультатЗакрытияФормы.Вставить("Модифицированность", Истина);
		РезультатЗакрытияФормы.Вставить("ИмяФормы", Форма.ИмяФормы);
		
		
		ХранимыеДанныеСсылка = ОбменСГИСЭПДВызовСервера.ЗаписатьХранимыеДанныеЭПД(Форма.ГруппаДанных, Форма.Организация, Форма.Контрагент, 
																					Форма.ДополнительныйОтбор, РезультатЗакрытияФормы);
		
		Если ЗначениеЗаполнено(ХранимыеДанныеСсылка) Тогда																			
			ОповеститьОбИзменении(ХранимыеДанныеСсылка);
			ОбщегоНазначенияКлиент.ОповеститьОбИзмененииОбъекта(ХранимыеДанныеСсылка);
		КонецЕсли;
		
		Форма.Модифицированность = Ложь;
		
		Форма.Закрыть(РезультатЗакрытияФормы);
	КонецЕсли;
	
КонецПроцедуры


Функция АдресДоставкиКорректен(АдресЗначение)
	
	ДополнительныеПараметры = Новый Структура("БезПредставлений, ПроверитьАдрес, КодыАдреса", Ложь, Истина, Истина);
	СтруктураАдреса = ОбменСГИСЭПДВызовСервера.СведенияОбАдресе(АдресЗначение, ДополнительныеПараметры);
	
	Возврат ЗначениеЗаполнено(СтруктураАдреса.Индекс);
	
КонецФункции


Процедура СохранитьАдресДляПодбора(ЗначениеОтбора, Результат) Экспорт
	
	Если АдресДоставкиКорректен(Результат.Значение) = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗначениеОтбора) Тогда
		Возврат;
	КонецЕсли;
	
	СохраненныеАдреса = ОбменСГИСЭПДКлиентСервер.ПолучитьАдресаДоставки(ЗначениеОтбора);
	
	Если СохраненныеАдреса.Получить(Результат.Представление) = Неопределено Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("УчастникЭДО", ЗначениеОтбора);
		ПараметрыФормы.Вставить("СтруктураАдреса", Результат);
		
		СохранитьАдресДляПодбора_Завершение = Новый ОписаниеОповещения("СохранитьАдресДляПодбора_Завершение", ЭтотОбъект, ПараметрыФормы);
		ПоказатьВопрос(СохранитьАдресДляПодбора_Завершение, НСтр("ru='Сохранить адрес?'"), РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);	
	КонецЕсли;
	
КонецПроцедуры


Процедура СохранитьАдресДляПодбора_Завершение(Результат, ПараметрыФормы) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОткрытьФорму("РегистрСведений.АдресаДоставкиЭПД.Форма.ФормаЗаписи", ПараметрыФормы, ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	КонецЕсли;
	
КонецПроцедуры


Процедура НавигацияПоОшибкамЗаполнения(Форма, ОшибкиЗаполненияТаблица, ТекущаяСтрока, Назад = Ложь) Экспорт

	НачальнаяСтрока = ТекущаяСтрока;
	Если НачальнаяСтрока = Неопределено Тогда
		НачальнаяСтрока = 0;
	КонецЕсли;
	
	ПерваяОшибкаСтрока = Неопределено;
	ПоследняяОшибкаСтрока = Неопределено;
	СледующаяОшибкаСтрока = Неопределено;
	ПредыдущаяОшибкаСтрока = Неопределено;
	Для Каждого СтрокаОшибки Из ОшибкиЗаполненияТаблица Цикл
		Если СтрокаОшибки.Отметка = 1 Тогда
			СчетчикСтрок = СтрокаОшибки.ПолучитьИдентификатор();
			Если СледующаяОшибкаСтрока = Неопределено
				И СчетчикСтрок > НачальнаяСтрока Тогда
				СледующаяОшибкаСтрока = СтрокаОшибки;
			ИначеЕсли СчетчикСтрок < НачальнаяСтрока Тогда
				ПредыдущаяОшибкаСтрока = СтрокаОшибки;
			КонецЕсли;
			Если ПерваяОшибкаСтрока = Неопределено Тогда
				ПерваяОшибкаСтрока = СтрокаОшибки;
			КонецЕсли;
			ПоследняяОшибкаСтрока = СтрокаОшибки;
		КонецЕсли;
	КонецЦикла;
	
	ОшибкаДляПереходаСтрока = Неопределено;
	
	Если Назад = Истина Тогда
		Если ПредыдущаяОшибкаСтрока <> Неопределено Тогда
			ОшибкаДляПереходаСтрока = ПредыдущаяОшибкаСтрока;
		ИначеЕсли ПоследняяОшибкаСтрока <> Неопределено Тогда
			ОшибкаДляПереходаСтрока = ПоследняяОшибкаСтрока;	
		КонецЕсли;	
	Иначе
		Если СледующаяОшибкаСтрока <> Неопределено Тогда
			ОшибкаДляПереходаСтрока = СледующаяОшибкаСтрока;
		ИначеЕсли ПерваяОшибкаСтрока <> Неопределено Тогда
			ОшибкаДляПереходаСтрока = ПерваяОшибкаСтрока;	
		КонецЕсли;
	КонецЕсли;
	
	Если ОшибкаДляПереходаСтрока = Неопределено Тогда
		ТекущиеДанные = ОшибкиЗаполненияТаблица.НайтиПоИдентификатору(ТекущаяСтрока);
		Если ТекущиеДанные.Отметка = 1 Тогда
			ОшибкаДляПереходаСтрока = ТекущиеДанные;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТекущаяСтрока = ОшибкаДляПереходаСтрока.ПолучитьИдентификатор();
	
	Форма.ПереходыПоОшибкам = ОшибкаДляПереходаСтрока.Описание.Переходы;
	ПоказатьОшибкуЗаполнения(Форма);
	
КонецПроцедуры

Процедура ПодробнееОбОшибкеЗаполнения(Форма, ТекущиеДанные, ИдентификаторОтправителя)
	
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru='Сначала выберите строку ошибки'"));	
		Возврат;	
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(НСтр("ru='Путь в файле XML'"));
	МассивСтрок.Добавить(": ");
	МассивСтрок.Добавить(ТекущиеДанные.Узел);
	МассивСтрок.Добавить(Символы.ПС);
	
	Если СтрНайти(НРег(ТекущиеДанные.Узел), "подписант") > 0 Тогда
		МассивСтрок.Добавить(Символы.ПС);
		Если ЗначениеЗаполнено(ИдентификаторОтправителя) = Ложь Тогда
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Учетная запись ЭДО не определена, проверьте подключение организации к 1С-ЭДО'")));
		Иначе
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Проверьте валидность и срок действия сертификата'")));
			МассивСтрок.Добавить(" ");
			
			ЗначенияКлюча = Новый Структура;
			ЗначенияКлюча.Вставить("ИдентификаторЭДО", ИдентификаторОтправителя);
			
			КлючЗаписи = ОбщегоНазначенияБЭДКлиент.КлючЗаписиРегистраСведений(Тип("РегистрСведенийКлючЗаписи.УчетныеЗаписиЭДО"), ЗначенияКлюча);
			
			СсылкаНаЗапись = ПолучитьНавигационнуюСсылку(КлючЗаписи);
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='учетной записи ЭДО'"), , , , СсылкаНаЗапись));
			
			Если СтрНайти(НРег(ТекущиеДанные.Узел), "должн") > 0 Тогда
				МассивСтрок.Добавить(Символы.ПС);	
				МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Обратите внимание, что поле ""Должность"" в сертификате обязательно для заполнения'")));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ТекстПодробно = Новый ФорматированнаяСтрока(МассивСтрок);
	
	ПоказатьПредупреждение(, ТекстПодробно, , НСтр("ru='Информация по незаполненному полю'"));	
	
КонецПроцедуры


Процедура ПоказатьОшибкуЗаполнения(Форма, ТекущиеДанные = Неопределено, ИдентификаторОтправителя = Неопределено) Экспорт
	
	//@skip-check unknown-method-property
	Если ТипЗнч(Форма.ПереходыПоОшибкам) = Тип("ФиксированныйМассив") Тогда
		Если Форма.ПереходыПоОшибкам.Количество() > 0
		И Форма.ТекущийУровеньФормы <= Форма.ПереходыПоОшибкам.ВГраница() Тогда
			ТекущийПереход = Форма.ПереходыПоОшибкам[Форма.ТекущийУровеньФормы];
			Если Форма.ТекущийУровеньФормы = Форма.ПереходыПоОшибкам.ВГраница() Тогда
				НезаполненноеПоле  = Форма.Элементы.Найти(ТекущийПереход);
				Если НезаполненноеПоле <> Неопределено Тогда
					Форма.ТекущийЭлемент = НезаполненноеПоле;
				Иначе
					ПодробнееОбОшибкеЗаполнения(Форма, ТекущиеДанные, ИдентификаторОтправителя);
				КонецЕсли;
			Иначе
				Если СтрНачинаетсяС(ТекущийПереход, "Заполнить") Тогда
					КомандаПерехода = Форма.Команды.Найти(ТекущийПереход);
					Если КомандаПерехода <> Неопределено Тогда 
						ВывестиФормуВводаДанных(Форма, ТекущийПереход);
					Иначе
						ПодробнееОбОшибкеЗаполнения(Форма, ТекущиеДанные, ИдентификаторОтправителя);
					КонецЕсли;
				ИначеЕсли СтрНачинаетсяС(ТекущийПереход, "ХранимыеДанные") Тогда
					ПараметрыФормы = Новый Структура;
					ПараметрыФормы.Вставить("Ключ", Форма[ТекущийПереход]);	
					ПараметрыФормы.Вставить("ПереходыПоОшибкам", Форма.ПереходыПоОшибкам);	
					ПараметрыФормы.Вставить("ТекущийУровеньФормы", Форма.ТекущийУровеньФормы + 1);	
					ИмяГруппыДанных = Сред(ТекущийПереход, СтрДлина("ХранимыеДанные") + 1);
					ОписаниеГруппыДанных = ОбменСГИСЭПДКлиентСервер.ОписаниеГруппыДанных(ИмяГруппыДанных, Форма.ИмяФормы);
					Если ЗначениеЗаполнено(ОписаниеГруппыДанных.ИмяФормы) Тогда		
						ОткрытьФорму(ОписаниеГруппыДанных.ИмяФормы, ПараметрыФормы, Форма);	
					КонецЕсли;	
				ИначеЕсли СтрНачинаетсяС(ТекущийПереход, "Представление") Тогда
					ВводАдреса(ТекущийПереход, Форма);
				ИначеЕсли СтрНачинаетсяС(ТекущийПереход, "Ссылка") Тогда
					НезаполненноеПоле  = Форма.Элементы.Найти(ТекущийПереход);
					Если НезаполненноеПоле <> Неопределено Тогда
						Форма.ТекущийЭлемент = НезаполненноеПоле;
					Иначе
						ПодробнееОбОшибкеЗаполнения(Форма, ТекущиеДанные, ИдентификаторОтправителя);
					КонецЕсли;
				Иначе
					ЭтоСтрокаТаблицы = Ложь;
					НайденныйЭлемент = Неопределено;
					НайденныйЭлементТаблица = Неопределено;
					НачальныйИндексПерехода = Форма.ТекущийУровеньФормы;
					Для ИндексПерехода = НачальныйИндексПерехода По Форма.ПереходыПоОшибкам.ВГраница() Цикл
						ТекущийПереход = Форма.ПереходыПоОшибкам[ИндексПерехода];
						Если ТипЗнч(ТекущийПереход) = Тип("Число") 
							И НайденныйЭлемент <> Неопределено Тогда
							СтрокаТаблицы = Форма[НайденныйЭлемент.Имя][ТекущийПереход];
							НайденныйЭлемент.ТекущаяСтрока = СтрокаТаблицы.ПолучитьИдентификатор();
							ЭтоСтрокаТаблицы = Истина;
						Иначе	
							Если ЭтоСтрокаТаблицы = Истина И НайденныйЭлемент <> Неопределено Тогда
								НайденныйЭлементТаблица = НайденныйЭлемент;							
								НайденныйЭлемент = Форма.Элементы.Найти(НайденныйЭлементТаблица.Имя + ТекущийПереход);
								Если НайденныйЭлемент = Неопределено Тогда
									НайденныйЭлемент = Форма.Элементы.Найти(ТекущийПереход);
								КонецЕсли;			
								Если НайденныйЭлемент <> Неопределено Тогда
									НайденныйЭлементТаблица.ТекущийЭлемент = НайденныйЭлемент;
								КонецЕсли;
								ЭтоСтрокаТаблицы = Ложь;
							Иначе
								Если НайденныйЭлемент <> Неопределено Тогда
									НайденныйЭлементОднострочныйВвод = Форма.Элементы.Найти(НайденныйЭлемент.Имя + "__" + ТекущийПереход + "__0");
								КонецЕсли;
								Если НайденныйЭлементОднострочныйВвод <> Неопределено Тогда
									НайденныйЭлемент = НайденныйЭлементОднострочныйВвод;
								Иначе
									НайденныйЭлемент = Форма.Элементы.Найти(ТекущийПереход);
								КонецЕсли;
								Если НайденныйЭлемент <> Неопределено Тогда
									Форма.ТекущийЭлемент = НайденныйЭлемент;
								КонецЕсли;
							КонецЕсли;	
							Если СтрНачинаетсяС(ТекущийПереход, "Заполнить")
								И Форма.ТекущийУровеньФормы < Форма.ПереходыПоОшибкам.ВГраница() Тогда
								Если НайденныйЭлементТаблица <> Неопределено Тогда
									ВывестиФормуВводаДанных(Форма, НайденныйЭлемент.Имя, НайденныйЭлементТаблица.ТекущиеДанные);
								Иначе
									ВывестиФормуВводаДанных(Форма, НайденныйЭлемент.Имя);	
								КонецЕсли;
								Прервать;
							ИначеЕсли СтрНачинаетсяС(ТекущийПереход, "ХранимыеДанные")
								И Форма.ТекущийУровеньФормы < Форма.ПереходыПоОшибкам.ВГраница() Тогда
								СсылкаХранимыеДанные = Неопределено;
								Если НайденныйЭлементТаблица.ТекущиеДанные.Свойство(ТекущийПереход, СсылкаХранимыеДанные) Тогда
									ПараметрыФормы = Новый Структура("Ключ", СсылкаХранимыеДанные);
									ПараметрыФормы.Вставить("ПереходыПоОшибкам", Форма.ПереходыПоОшибкам);	
									ПараметрыФормы.Вставить("ТекущийУровеньФормы", Форма.ТекущийУровеньФормы + 1);	
									МассивЧастей = СтрРазделить(Форма.ИмяФормы, ".");
									МассивЧастей.Удалить(МассивЧастей.ВГраница());		
									ИмяФормыХранимыхДанных = СтрСоединить(МассивЧастей, ".") + "." + Сред(ТекущийПереход, СтрДлина("ХранимыеДанные") + 1);	
									ОткрытьФорму(ИмяФормыХранимыхДанных, ПараметрыФормы, Форма);
								КонецЕсли;
								Прервать;
							ИначеЕсли СтрНачинаетсяС(ТекущийПереход, "Представление") Тогда
								ВводАдреса(ТекущийПереход, Форма);
								Прервать;
							ИначеЕсли СтрНачинаетсяС(ТекущийПереход, "Ссылка") Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;
						Форма.ТекущийУровеньФормы = Форма.ТекущийУровеньФормы + 1;
					КонецЦикла;
				КонецЕсли;	
			КонецЕсли;
		ИначеЕсли Форма.ПереходыПоОшибкам.Количество() = 0 Тогда
			ПодробнееОбОшибкеЗаполнения(Форма, ТекущиеДанные, ИдентификаторОтправителя);	
		КонецЕсли;
	КонецЕсли;
	Форма.ПереходыПоОшибкам = Неопределено;
	
КонецПроцедуры


Функция ЗаполнитьТаблицуОшибокЭПД(СсылкаИлиФорма, ОшибкиЗаполненияТаблица, ОчищатьТаблицу = Истина) Экспорт
	
	Если ОчищатьТаблицу = Истина Тогда
		ОшибкиЗаполненияТаблица.Очистить();
	Иначе
		Для Каждого СтрокаОшибки Из ОшибкиЗаполненияТаблица Цикл
			СтрокаОшибки.Отметка = 0;	
		КонецЦикла;
	КонецЕсли;
	
	Если ТипЗнч(СсылкаИлиФорма) = Тип("ФормаКлиентскогоПриложения") Тогда
		СтруктураРеквизитов = ОбменСГИСЭПДКлиентСервер.ПолучитьСтруктуруПоТитулуИВерсии(СсылкаИлиФорма);
		ОписанияОшибок = ОбменСГИСЭПДВызовСервера.ПроверитьЗаполнениеДокументаЭПД(СтруктураРеквизитов, 
																					СсылкаИлиФорма.Объект.ТекущийТитул, 
																					СсылкаИлиФорма.Объект.ВидДокумента);
	Иначе
		РеквизитыДокумента = ОбменСГИСЭПДВызовСервера.ЗначенияРеквизитовОбъекта(СсылкаИлиФорма, 
																				"ТекущийТитул, ВидДокумента");
		ОписанияОшибок = ОбменСГИСЭПДВызовСервера.ПроверитьЗаполнениеДокументаЭПД(СсылкаИлиФорма, 
																					РеквизитыДокумента.ТекущийТитул, 
																					РеквизитыДокумента.ВидДокумента);
	КонецЕсли;
	
	КоличествоОшибок = ОписанияОшибок.Количество();
	Для НомерОшибки = 1 По КоличествоОшибок Цикл
		ОписаниеОшибки = ОписанияОшибок[НомерОшибки - 1];
		ТекстОшибки = СтрСоединить(ОписаниеОшибки.Текст, " ");
		Если ОчищатьТаблицу = Истина Тогда
			НоваяСтрока = ОшибкиЗаполненияТаблица.Добавить();
		Иначе
			СтрокиНайдено = ОшибкиЗаполненияТаблица.НайтиСтроки(Новый Структура("Узел", ОписаниеОшибки.Узел));	
			Если СтрокиНайдено.Количество() = 0 Тогда
				НоваяСтрока = ОшибкиЗаполненияТаблица.Добавить();
			Иначе
				НоваяСтрока = СтрокиНайдено[0];
			КонецЕсли;
		КонецЕсли;
		НоваяСтрока.Узел = ОписаниеОшибки.Узел;
		НоваяСтрока.Текст = СтрСоединить(ОписаниеОшибки.Текст, " ");
		НоваяСтрока.Описание = ОписаниеОшибки;
		НоваяСтрока.Отметка = 1;
	КонецЦикла;
	
	Возврат КоличествоОшибок > 0;
	
КонецФункции


Процедура ПриОткрытииПодчиненнойФормы(Форма) Экспорт
	
	ОбменСГИСЭПДКлиентСервер.ИзменитьОформлениеФормы(Форма);
	
	ПоказатьОшибкуЗаполнения(Форма);
		
КонецПроцедуры

Функция СведенияУказаныКорректно(Форма)
	
	Возврат Форма.ПроверитьЗаполнение();
	
КонецФункции


Функция ПолучитьОтборХранимыхДанных(КонтейнерРеквизитов, Форма, ГруппаДанных) Экспорт
	
	Результат = Новый Структура;
	ОписаниеГруппыДанных = ОбменСГИСЭПДКлиентСервер.ОписаниеГруппыДанных(ГруппаДанных, Форма.ИмяФормы);
	
	Контрагент = Неопределено;
	Если ТипЗнч(КонтейнерРеквизитов) = Тип("ФормаКлиентскогоПриложения") Тогда
		Организация = КонтейнерРеквизитов.Организация;
	ИначеЕсли ТипЗнч(КонтейнерРеквизитов.Ссылка) = Тип("ДокументСсылка.ЭлектроннаяТранспортнаяНакладная") Тогда
		Если КонтейнерРеквизитов.ЭтоВходящий = Ложь
			И КонтейнерРеквизитов.ТекущийТитул = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул1") Тогда
				Если ЗначениеЗаполнено(КонтейнерРеквизитов.СсылкаТитулГрузоотправителяСоставитель) Тогда
					Организация = КонтейнерРеквизитов.СсылкаТитулГрузоотправителяСоставитель;
				Иначе
					Организация = КонтейнерРеквизитов.СсылкаТитулГрузоотправителяГрузоотправитель;
				КонецЕсли;
		Иначе
			Организация = КонтейнерРеквизитов.Организация;
		КонецЕсли;
		Если КонтейнерРеквизитов.РольУчастника = 3 И ОписаниеГруппыДанных.Тип = "ТранспортноеСредство" Тогда
			Контрагент = КонтейнерРеквизитов.СсылкаТитулГрузоотправителяПеревозчик;
		ИначеЕсли ГруппаДанных = "ТитулПеревозчикаФХЖПеревозчик" Тогда
			Контрагент = КонтейнерРеквизитов.СсылкаТитулГрузоотправителяГрузоотправитель;	 
		ИначеЕсли ГруппаДанных = "ТитулГрузоотправителяФХЖБанковскиеРеквизиты" Тогда
			Контрагент = КонтейнерРеквизитов.СсылкаТитулГрузоотправителяПеревозчик;	
		КонецЕсли;
	Иначе
		Организация = КонтейнерРеквизитов.Организация;
	КонецЕсли;
	
	Результат.Вставить("Тип", ОписаниеГруппыДанных.Тип);	
	Если ОписаниеГруппыДанных.Тип = "ТранспортноеСредство"
		Или ОписаниеГруппыДанных.Тип = "Водитель" Тогда
		Если ЗначениеЗаполнено(Контрагент) Тогда
			Результат.Вставить("Контрагент", Контрагент);
		КонецЕсли;
	ИначеЕсли ГруппаДанных = "ТитулПеревозчикаФХЖПеревозчик" 
		Или ГруппаДанных = "ТитулГрузоотправителяФХЖБанковскиеРеквизиты" Тогда 
		Результат.Вставить("Организация", Организация);
		Результат.Вставить("Контрагент", Контрагент);
	ИначеЕсли ГруппаДанных = "СтороннийМедработникЭПЛ"
		Или ГруппаДанных = "ТитулМедосмотрСтороннийМедработник"
		Или ГруппаДанных = "ТитулМедосмотрПослеСтороннийМедработник" Тогда
		Результат.Вставить("Организация", Организация);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьИмяОбъектаФормы(Форма)
	
	МассивЧастей = СтрРазделить(Форма.ИмяФормы, ".");
	МассивЧастей.Удалить(МассивЧастей.ВГраница());
	Если МассивЧастей[МассивЧастей.ВГраница()] = "Форма" Тогда
		МассивЧастей.Удалить(МассивЧастей.ВГраница());	
	КонецЕсли;
	
	Возврат СтрСоединить(МассивЧастей, ".");
	
КонецФункции

Функция ЗапретитьИзменения(Форма)
	
	Страницы = Форма.Элементы.Найти("Страницы");
	Если Страницы <> Неопределено Тогда
		Возврат Страницы.ТекущаяСтраница.ТолькоПросмотр;
	Иначе
		Возврат Форма.ЗапретитьИзменение;
	КонецЕсли;
	
КонецФункции

Процедура ВывестиФормуВводаДанных(Форма, Знач ИмяКоманды, ТекущиеДанные = Неопределено, ЭтоВыбор = Истина, ЕстьХранимыеДанные = Ложь, ОповещениеОЗавершении = Неопределено) Экспорт
	
	ГруппаДанных = ИмяКоманды;
	ГруппаДанных = СтрЗаменить(ГруппаДанных, "Заполнить", "");
	ГруппаДанных = СтрЗаменить(ГруппаДанных, "ХранимыеДанные", "");
	Если СтрЗаканчиваетсяНа(ГруппаДанных, "Строка1") Тогда
		ГруппаДанных = Лев(ГруппаДанных, СтрДлина(ГруппаДанных) - СтрДлина("Строка1"));	
	КонецЕсли;
	ЭтоДопТитул = Ложь;
	Если СтрНачинаетсяС(ГруппаДанных, "ДопТитул") Тогда
		ГруппаДанных = Сред(ГруппаДанных, 4);
		ЭтоДопТитул = Истина;	
	КонецЕсли;
	  	
	ИмяОбъекта = ПолучитьИмяОбъектаФормы(Форма);
	
	ОписаниеГруппыДанных = ОбменСГИСЭПДКлиентСервер.ОписаниеГруппыДанных(ГруппаДанных, ИмяОбъекта);
	Если ОписаниеГруппыДанных.ЕстьХранимыеДанные = Истина Тогда
		ИмяФормыДанных = ОписаниеГруппыДанных.ИмяФормы;	
	Иначе
		ИмяФормыДанных = ИмяОбъекта + ".Форма." + ГруппаДанных;
	КонецЕсли;
	
	ЗапретитьИзменение = ЗапретитьИзменения(Форма);
	
	ИдентификаторСтрокиРодителя = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.ИдентификаторСтроки);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ЗапретитьИзменение", ЗапретитьИзменение);
	ПараметрыОповещения.Вставить("ГруппаДанных", ГруппаДанных);
	ПараметрыОповещения.Вставить("Форма", Форма);
	ПараметрыОповещения.Вставить("ЭтоДопТитул", ЭтоДопТитул);
	ПараметрыОповещения.Вставить("ТекущиеДанные", ТекущиеДанные);
	ПараметрыОповещения.Вставить("ИдентификаторСтрокиРодителя", ИдентификаторСтрокиРодителя);
	ПараметрыОповещения.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОткрытиеФормыПоГиперссылке_Завершение", 
		ЭтотОбъект,
		ПараметрыОповещения);
	
	ОписаниеРеквизитовФормыРодителя = Форма.ОписаниеРеквизитовФормы;
	
	Отказ = Ложь;
	Если ЭтоВыбор = Истина Тогда
		ОтборХранимыхДанныхЭПД = ПолучитьОтборХранимыхДанных(?(ОписаниеРеквизитовФормыРодителя.ЕстьОбъект, Форма.Объект, Форма), Форма, ГруппаДанных);
		ПоказатьХранимыеДанныеЭПД(ГруппаДанных, ОтборХранимыхДанныхЭПД, Форма, ОписаниеОповещения, Отказ, ИдентификаторСтрокиРодителя);
	КонецЕсли;
	
	Если Отказ = Ложь Тогда
		ОписаниеРеквизитовФормы = ОбменСГИСЭПДКлиентПовтИсп.РеквизитыПодчиненнойФормы(ИмяФормыДанных);
		
		СтруктураПараметровФормыРодителя = Новый Структура(ОписаниеРеквизитовФормыРодителя.ПараметрыФормы);
		Если ОписаниеРеквизитовФормыРодителя.ЕстьОбъект = Истина Тогда
			СтруктураПараметровОбъектаРодителя = Новый Структура(ОписаниеРеквизитовФормыРодителя.РеквизитыОбъекта);	
		Иначе
			СтруктураПараметровОбъектаРодителя = Новый Структура();
		КонецЕсли;
		
		СтруктураРеквизитовТитула = Неопределено;
		ГруппаДанныхВКонтейнере = "";
		Если ОписаниеРеквизитовФормыРодителя.ЕстьОбъект Тогда
			ГруппаДанныхВКонтейнере = ГруппаДанных;
			Если ЭтоДопТитул = Истина Тогда
				ГруппаДанныхВКонтейнере = СтрЗаменить(ГруппаДанныхВКонтейнере, "Титул", "ДопТитул")	
			КонецЕсли;
			КонтейнерОтображаемойВерсии = ОбменСГИСЭПДКлиентСервер.КонтейнерОтображаемойВерсииРеквизита(Форма, ГруппаДанныхВКонтейнере);
			СтруктураРеквизитовТитула = КонтейнерОтображаемойВерсии.СтруктураРеквизитовЗаполнение[КонтейнерОтображаемойВерсии.ПрефиксТитула][КонтейнерОтображаемойВерсии.НомерВерсии];
		КонецЕсли;
		
		ДанныеЗаполненияРеквизитовФормы = Новый Структура(ОписаниеРеквизитовФормы.ПараметрыФормы);
		ПараметрыИзФормы = "";
		ПараметрыИзОбъекта = "";
		ПараметрыИзМетаданных = "";
		// Удалим из структуры реквизитов формы реквизиты, которых нет на форме родителя
		Для Каждого КиЗ Из ДанныеЗаполненияРеквизитовФормы Цикл
			// Можно не дополнять имена реквизитов префиксом "Доп" для доп. титулов,
			// т.к. они строго соответствуют основному титулу
			Если КиЗ.Ключ = "ОписаниеРеквизитовФормы" Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяВКонтейнере = КиЗ.Ключ;
			Если ЭтоДопТитул = Истина И СтрНачинаетсяС(ИмяВКонтейнере, "Титул") Тогда
				ИмяВКонтейнере = "ДопТитул" + Сред(ИмяВКонтейнере, СтрДлина("Титул") + 1);	
			КонецЕсли;
			
			Если ТекущиеДанные <> Неопределено Тогда
				Если ТекущиеДанные.Свойство(ИмяВКонтейнере) = Истина Тогда
					ПараметрыИзОбъекта = ПараметрыИзОбъекта + "," + ИмяВКонтейнере;
				КонецЕсли;
			ИначеЕсли СтруктураПараметровОбъектаРодителя.Свойство(ИмяВКонтейнере) Тогда 
				ПараметрыИзМетаданных = ПараметрыИзМетаданных + "," + ИмяВКонтейнере;
			ИначеЕсли СтруктураПараметровФормыРодителя.Свойство(ИмяВКонтейнере) = Истина Тогда
				ПараметрыИзФормы = ПараметрыИзФормы + "," + ИмяВКонтейнере;
			ИначеЕсли СтруктураРеквизитовТитула <> Неопределено Или СтруктураПараметровОбъектаРодителя.Свойство(ИмяВКонтейнере) = Истина Тогда
				ПараметрыИзОбъекта = ПараметрыИзОбъекта + "," + ИмяВКонтейнере;
			КонецЕсли;
		КонецЦикла;
		ПараметрыИзФормы = Сред(ПараметрыИзФормы, 2);
		ПараметрыИзОбъекта = Сред(ПараметрыИзОбъекта, 2);
		ПараметрыИзМетаданных = Сред(ПараметрыИзМетаданных, 2);
		
		Если ЗначениеЗаполнено(ПараметрыИзФормы) Тогда 
			РеквизитыФормыИзФормы = Новый Структура(ПараметрыИзФормы);
			Для Каждого КиЗ Из РеквизитыФормыИзФормы Цикл
				ИмяНаФорме = КиЗ.Ключ;
				Если СтруктураПараметровФормыРодителя.Свойство(ИмяНаФорме) = Ложь И ЭтоДопТитул = Истина Тогда
					ИмяНаФорме = СтрЗаменить(ИмяНаФорме, "Титул", "ДопТитул");	
				КонецЕсли;
				ДанныеЗаполненияРеквизитовФормы.Вставить(КиЗ.Ключ, Форма[ИмяНаФорме]);
			КонецЦикла;
		КонецЕсли;
				
		Если ЗначениеЗаполнено(ПараметрыИзМетаданных) Тогда 
			РеквизитыФормыИзМетаданных = Новый Структура(ПараметрыИзМетаданных);
			Для Каждого КиЗ Из РеквизитыФормыИзМетаданных Цикл
				ИмяВОбъекте = КиЗ.Ключ;
				Если СтруктураПараметровОбъектаРодителя.Свойство(ИмяВОбъекте) = Ложь И ЭтоДопТитул = Истина Тогда
					ИмяВОбъекте = СтрЗаменить(ИмяВОбъекте, "Титул", "ДопТитул");	
				КонецЕсли;
				ДанныеЗаполненияРеквизитовФормы.Вставить(КиЗ.Ключ, Форма.Объект[ИмяВОбъекте]);
			КонецЦикла;
		КонецЕсли;
		
		КонтейнерРеквизитов = Неопределено;
		Если ТекущиеДанные <> Неопределено Тогда
			КонтейнерРеквизитов = ТекущиеДанные;
		ИначеЕсли СтруктураРеквизитовТитула <> Неопределено Тогда
			КонтейнерРеквизитов = СтруктураРеквизитовТитула;
		КонецЕсли;
		
		Если КонтейнерРеквизитов <> Неопределено Тогда
			РеквизитыФормы = Новый Структура(ПараметрыИзОбъекта);
			Для Каждого КиЗ Из РеквизитыФормы Цикл
				Если КиЗ.Ключ = "ОписаниеРеквизитовФормы" Тогда
					Продолжить;
				КонецЕсли;
				
				ИмяВКонтейнере = КиЗ.Ключ;                                       				
				
				Если ЭтоДопТитул = Истина И СтрНачинаетсяС(ИмяВКонтейнере, "Титул") Тогда
					ИмяВКонтейнере = "ДопТитул" + Сред(ИмяВКонтейнере, СтрДлина("Титул") + 1);	
				КонецЕсли;
				
				Если СтрНачинаетсяС(ИмяВКонтейнере, "Титул") = Ложь
					И СтрНачинаетсяС(ИмяВКонтейнере, "ХранимыеДанныеТитул") = Ложь
					И СтрНачинаетсяС(ИмяВКонтейнере, "СсылкаТитул") = Ложь Тогда
					ИмяВКонтейнере = ГруппаДанныхВКонтейнере + ИмяВКонтейнере;
				КонецЕсли;
				
				ИмяДляФормы = КиЗ.Ключ;
				Если ЭтоДопТитул = Истина И ДанныеЗаполненияРеквизитовФормы.Свойство(ИмяДляФормы) = Ложь Тогда
					ИмяДляФормы = СтрЗаменить(ИмяДляФормы, "ДопТитул", "Титул");	
				КонецЕсли;
				Если ТипЗнч(КонтейнерРеквизитов) = Тип("Структура") Тогда
					ЗначениеРеквизита = Неопределено;
					Если КонтейнерРеквизитов.Свойство(ИмяВКонтейнере, ЗначениеРеквизита) Тогда
						ДанныеЗаполненияРеквизитовФормы.Вставить(ИмяДляФормы, ЗначениеРеквизита);
					КонецЕсли;	
				Иначе
					ДанныеЗаполненияРеквизитовФормы.Вставить(ИмяДляФормы, КонтейнерРеквизитов[ИмяВКонтейнере]);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;	
			
		ТаблицыФормы = Новый Структура;
		
		МассивИменТаблиц = СтрРазделить(ОписаниеРеквизитовФормы.ИменаТаблиц, ",", Ложь);
		// Для форм, содержащих объект все таблицы должны быть в объекте
		Если ОписаниеРеквизитовФормыРодителя.ЕстьОбъект Тогда
			КонтейнерТаблиц = СтруктураРеквизитовТитула;	
		Иначе
			КонтейнерТаблиц = Форма;
		КонецЕсли;
				
		Для Каждого ИмяТаблицы Из МассивИменТаблиц Цикл
			ИмяТаблицыКонтейнера = ИмяТаблицы;
			Если ЗначениеЗаполнено(ОписаниеРеквизитовФормыРодителя.ПрефиксТитула) 
				И СтрНачинаетсяС(ИмяТаблицыКонтейнера, ОписаниеРеквизитовФормыРодителя.ПрефиксТитула) = Ложь Тогда
				ИмяТаблицыКонтейнера = ОписаниеРеквизитовФормыРодителя.ПрефиксТитула + ИмяТаблицыКонтейнера;	
			КонецЕсли;
			Если ЭтоДопТитул = Истина Тогда
				ИмяТаблицыКонтейнера = СтрЗаменить(ИмяТаблицыКонтейнера, "Титул", "ДопТитул");		
			КонецЕсли;
			Если ТипЗнч(КонтейнерТаблиц) = Тип("Структура") Тогда
				ТаблицаКонтейнера = Новый Массив;
				ТаблицаКонтейнераИнформационныеПоля = Новый Массив;
				ТаблицаКонтейнераИнформационныеПоля = Новый Массив;
				ТаблицаКонтейнераДополнительнаяИнформация = Новый Массив;
				Для Каждого КиЗ Из КонтейнерТаблиц Цикл
					МассивЧастей = ОбменСГИСЭПДКлиентСервер.РазделитьСтрокуСоСложнымРазделителем(КиЗ.Ключ, "__");
					Если МассивЧастей.Количество() = 3 И МассивЧастей[0] = ИмяТаблицыКонтейнера Тогда
						НомерСтроки = Число(МассивЧастей[1]);
						Если ТаблицаКонтейнера.Количество() >= НомерСтроки Тогда
							СтруктураСтроки = ТаблицаКонтейнера[НомерСтроки - 1];
						Иначе
							СтруктураСтроки = Новый Структура;
							ТаблицаКонтейнера.Вставить(НомерСтроки - 1, СтруктураСтроки);
						КонецЕсли;
						Если СтруктураСтроки = Неопределено Тогда
							СтруктураСтроки = Новый Структура;
							ТаблицаКонтейнера[НомерСтроки - 1] = СтруктураСтроки;
						КонецЕсли;
						СтруктураСтроки.Вставить(МассивЧастей[2], КиЗ.Значение);
					// Если доп. реквизитов нет в настройках - они могут быть в данных
					ИначеЕсли МассивЧастей.Количество() = 3 И МассивЧастей[0] = ИмяТаблицыКонтейнера + "ИнформационныеПоля"
						И МассивИменТаблиц.Найти(ИмяТаблицыКонтейнера + "ИнформационныеПоля") = Неопределено Тогда
						НомерСтроки = Число(МассивЧастей[1]);
						Если ТаблицаКонтейнераИнформационныеПоля.Количество() >= НомерСтроки Тогда
							СтруктураСтроки = ТаблицаКонтейнераИнформационныеПоля[НомерСтроки - 1];
						Иначе
							СтруктураСтроки = Новый Структура;
							ТаблицаКонтейнераИнформационныеПоля.Вставить(НомерСтроки - 1, СтруктураСтроки);
						КонецЕсли;
						Если СтруктураСтроки = Неопределено Тогда
							СтруктураСтроки = Новый Структура;
							ТаблицаКонтейнераИнформационныеПоля[НомерСтроки - 1] = СтруктураСтроки;
						КонецЕсли;
						СтруктураСтроки.Вставить(МассивЧастей[2], КиЗ.Значение);
					ИначеЕсли МассивЧастей.Количество() = 3 И МассивЧастей[0] = ИмяТаблицыКонтейнера + "ДополнительнаяИнформация"
						И МассивИменТаблиц.Найти(ИмяТаблицыКонтейнера + "ДополнительнаяИнформация") = Неопределено Тогда
						НомерСтроки = Число(МассивЧастей[1]);
						Если ТаблицаКонтейнераДополнительнаяИнформация.Количество() >= НомерСтроки Тогда
							СтруктураСтроки = ТаблицаКонтейнераДополнительнаяИнформация[НомерСтроки - 1];
						Иначе
							СтруктураСтроки = Новый Структура;
							ТаблицаКонтейнераДополнительнаяИнформация.Вставить(НомерСтроки - 1, СтруктураСтроки);
						КонецЕсли;
						Если СтруктураСтроки = Неопределено Тогда
							СтруктураСтроки = Новый Структура;
							ТаблицаКонтейнераДополнительнаяИнформация[НомерСтроки - 1] = СтруктураСтроки;
						КонецЕсли;
						СтруктураСтроки.Вставить(МассивЧастей[2], КиЗ.Значение);	
					КонецЕсли;	
				КонецЦикла;	
				ТаблицыФормы.Вставить(ИмяТаблицы, ТаблицаКонтейнера);
				Если ТаблицаКонтейнераИнформационныеПоля.Количество() > 0 Тогда
					ТаблицыФормы.Вставить(ИмяТаблицы + "ИнформационныеПоля", ТаблицаКонтейнераИнформационныеПоля);	
				КонецЕсли;
				Если ТаблицаКонтейнераДополнительнаяИнформация.Количество() > 0 Тогда
					ТаблицыФормы.Вставить(ИмяТаблицы + "ДополнительнаяИнформация", ТаблицаКонтейнераДополнительнаяИнформация);	
				КонецЕсли;
			Иначе
				ТаблицыФормы.Вставить(ИмяТаблицы, КонтейнерТаблиц[ИмяТаблицыКонтейнера]);
			КонецЕсли;
		КонецЦикла;
		
		ПараметрыОткрытияФормы = Новый Структура;
		
		ПараметрыОткрытияФормы.Вставить("ИдентификаторСтрокиРодителя", ИдентификаторСтрокиРодителя);
		ПараметрыОткрытияФормы.Вставить("ЗапретитьИзменение", ЗапретитьИзменение);	
		ПараметрыОткрытияФормы.Вставить("ДанныеЗаполненияРеквизитовФормы", ДанныеЗаполненияРеквизитовФормы);
		ПараметрыОткрытияФормы.Вставить("ДанныеЗаполненияТаблицФормы", ТаблицыФормы);
		
		ОписаниеРеквизитовФормыСтруктура = ОбменСГИСЭПДКлиентСервер.СкопироватьИзФиксированногоЗначенияРекурсивно(ОписаниеРеквизитовФормы);
		ОписаниеРеквизитовФормыСтруктура.Вставить("ПараметрыИзОбъекта", ПараметрыИзОбъекта);
		ОписаниеРеквизитовФормыСтруктура.Вставить("ПараметрыФормыИзФормы", ПараметрыИзФормы);	
		ОписаниеРеквизитовФормыСтруктура.Вставить("ФормаРодительСОбъектом", ОписаниеРеквизитовФормыРодителя.ЕстьОбъект);
		
		ПараметрыОткрытияФормы.Вставить("ОписаниеРеквизитовФормы", ОбменСГИСЭПДКлиентСервер.СкопироватьВФиксированноеЗначенияРекурсивно(ОписаниеРеквизитовФормыСтруктура));
		
		ПараметрыОткрытияФормы.Вставить("ГруппаДанных", ГруппаДанных);
		ПараметрыОткрытияФормы.Вставить("ЕстьХранимыеДанные", ЕстьХранимыеДанные);
		ПараметрыОткрытияФормы.Вставить("ОтборХранимыхДанныхЭПД", ОтборХранимыхДанныхЭПД);
		ПараметрыОткрытияФормы.Вставить("ПереходыПоОшибкам", Форма.ПереходыПоОшибкам);
		ПараметрыОткрытияФормы.Вставить("ТекущийУровеньФормы", Форма.ТекущийУровеньФормы + 1);	
		Если ОписаниеРеквизитовФормыРодителя.Свойство("КонтрагентыДокумента") Тогда
			ПараметрыОткрытияФормы.Вставить("КонтрагентыДокумента", ОписаниеРеквизитовФормыРодителя.КонтрагентыДокумента);
		КонецЕсли;
			
		Если ИмяКоманды = "ЗаполнитьТитулПеревозчикаЗаменыЗаменыВодителей" Тогда
			Если ТипЗнч(КонтейнерРеквизитов) = Тип("Структура") Тогда
				ТитулПеревозчикаЗаменыСодержаниеОперации = Неопределено;
				СтруктураРеквизитовТитула.Свойство("ТитулПеревозчикаЗаменыСодержаниеОперации", ТитулПеревозчикаЗаменыСодержаниеОперации);
			Иначе
				ТитулПеревозчикаЗаменыСодержаниеОперации = КонтейнерРеквизитов["ТитулПеревозчикаЗаменыСодержаниеОперации"];
			КонецЕсли;
			Если (ТитулПеревозчикаЗаменыСодержаниеОперации = "Замена водителя"
				Или ТитулПеревозчикаЗаменыСодержаниеОперации = "Замена водителя и транспортного средства"
				Или ТитулПеревозчикаЗаменыСодержаниеОперации = "Замена водителя и транспортных средств") Тогда
				ПараметрыОткрытияФормы.Вставить("ОднострочныйВвод", Истина);
			КонецЕсли;
		КонецЕсли;
		
		Если ИмяКоманды = "ЗаполнитьТитулПеревозчикаЗаменыТранспортныеСредства" Тогда
			Если ТипЗнч(КонтейнерРеквизитов) = Тип("Структура") Тогда
				ТитулПеревозчикаЗаменыСодержаниеОперации = Неопределено;
				СтруктураРеквизитовТитула.Свойство("ТитулПеревозчикаЗаменыСодержаниеОперации", ТитулПеревозчикаЗаменыСодержаниеОперации);
			Иначе
				ТитулПеревозчикаЗаменыСодержаниеОперации = КонтейнерРеквизитов["ТитулПеревозчикаЗаменыСодержаниеОперации"];
			КонецЕсли; 
			Если (ТитулПеревозчикаЗаменыСодержаниеОперации = "Замена транспортного средства"
				Или ТитулПеревозчикаЗаменыСодержаниеОперации = "Замена водителя и транспортного средства"
				Или ТитулПеревозчикаЗаменыСодержаниеОперации = "Замена водителей и транспортного средства") Тогда
				ПараметрыОткрытияФормы.Вставить("ОднострочныйВвод", Истина);
			КонецЕсли;
		КонецЕсли;
					
		ОткрытьФорму(ИмяФормыДанных, ПараметрыОткрытияФормы, Форма,,,,ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры


//@skip-check module-structure-method-in-regions
Процедура ОткрытиеФормыПоГиперссылке_Завершение(РезультатВыбора, ВходящийКонтекст) Экспорт
	
	Если РезультатВыбора = Неопределено ИЛИ ВходящийКонтекст.ЗапретитьИзменение Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ВходящийКонтекст.Форма;
	
	ЗаполнитьСсылку = Ложь;
	ОписаниеРеквизитовФормыРодителя = Неопределено;
	Если ТипЗнч(РезультатВыбора) <> Тип("Структура") Тогда
		ИдентификаторСтроки = Неопределено;
		Если ВходящийКонтекст.Свойство("ТекущиеДанные") И ВходящийКонтекст.ТекущиеДанные <> Неопределено Тогда
			ВходящийКонтекст.ТекущиеДанные.Свойство("ИдентификаторСтроки", ИдентификаторСтроки); 	
		КонецЕсли;
		Результат = ОбменСГИСЭПДВызовСервера.ПолучитьОписаниеХранимыхДанныхЭПДПоСсылке(РезультатВыбора, ВходящийКонтекст.ГруппаДанных, ИдентификаторСтроки);
		ПараметрыФормы = Результат.ПараметрыФормы;	
		ПараметрыФормыИзФормы = "";
		Модифицированность = Истина;
		ОписаниеРеквизитовФормыРодителя = Форма.ОписаниеРеквизитовФормы; // ОбменСГИСЭПДКлиентПовтИсп.РеквизитыПодчиненнойФормы(Форма.ИмяФормы);
		ЕстьОбъект = ОписаниеРеквизитовФормыРодителя.ЕстьОбъект;
		ЗаполнитьСсылку = Истина;
	Иначе
		Результат = РезультатВыбора;
		ПараметрыФормы = Неопределено;
		Результат.ОписаниеРеквизитовФормы.Свойство("ПараметрыИзОбъекта", ПараметрыФормы);
		ПараметрыФормыИзФормы = Неопределено;
		Результат.ОписаниеРеквизитовФормы.Свойство("ПараметрыФормыИзФормы", ПараметрыФормыИзФормы);
		Если ПараметрыФормыИзФормы = Неопределено Тогда
			Результат.ОписаниеРеквизитовФормы.Свойство("ПараметрыФормы", ПараметрыФормыИзФормы);	
		КонецЕсли;
		ЕстьОбъект = Ложь;
		Результат.ОписаниеРеквизитовФормы.Свойство("ФормаРодительСОбъектом", ЕстьОбъект);
		Модифицированность = Результат.Модифицированность;
	КонецЕсли;
	
	ИдентификаторСтрокиРодителя = Неопределено;
	ВходящийКонтекст.Свойство("ИдентификаторСтрокиРодителя", ИдентификаторСтрокиРодителя);
	
	ЭтоДопТитул = Неопределено;
	ВходящийКонтекст.Свойство("ЭтоДопТитул", ЭтоДопТитул);
	
	Если Модифицированность = Истина Тогда
		
		Форма.Модифицированность = Истина;  
		
		ГруппаДанныхВКонтейнере = ВходящийКонтекст.ГруппаДанных; 
		Если ЭтоДопТитул = Истина Тогда
			ГруппаДанныхВКонтейнере = СтрЗаменить(ГруппаДанныхВКонтейнере, "Титул", "ДопТитул")	
		КонецЕсли;
		
		Если ЕстьОбъект Тогда
			КонтейнерОтображаемойВерсии = ОбменСГИСЭПДКлиентСервер.КонтейнерОтображаемойВерсииРеквизита(Форма, ГруппаДанныхВКонтейнере);
			КонтейнерТекущейФормы = КонтейнерОтображаемойВерсии.СтруктураРеквизитовЗаполнение[КонтейнерОтображаемойВерсии.ПрефиксТитула][КонтейнерОтображаемойВерсии.НомерВерсии];
		Иначе 
			КонтейнерТекущейФормы = Форма;
		КонецЕсли;
		
		КонтейнерТекущихДанных = Неопределено;
		ВходящийКонтекст.Свойство("ТекущиеДанные", КонтейнерТекущихДанных);
		ЭтоСтрокаТаблицы = Истина;
		Если КонтейнерТекущихДанных = Неопределено Тогда
			КонтейнерТекущихДанных = КонтейнерТекущейФормы;
			ЭтоСтрокаТаблицы = Ложь;	
		КонецЕсли;

		ПараметрыФормыРодителя = Новый Структура(Форма.ОписаниеРеквизитовФормы.ПараметрыФормы);
		
		Если ЗначениеЗаполнено(ПараметрыФормы) Тогда
			РеквизитыФормы = Новый Структура(ПараметрыФормы);
			Для Каждого КиЗ Из РеквизитыФормы Цикл
				Если КиЗ.Ключ = "ОписаниеРеквизитовФормы"
					Или КиЗ.Ключ = "ЭтоОднострочныйВвод" Тогда
					Продолжить;
				КонецЕсли;
				ИмяВКонтейнере = КиЗ.Ключ;
				Если ЭтоДопТитул = Истина И СтрНайти(ИмяВКонтейнере, "ДопТитул") = 0 Тогда
					ИмяВКонтейнере = СтрЗаменить(ИмяВКонтейнере, "Титул", "ДопТитул")	
				КонецЕсли;
				Если //КонтейнерОтображаемойВерсии <> Неопределено
					ЭтоСтрокаТаблицы = Ложь 
					И СтрНачинаетсяС(ИмяВКонтейнере, "Титул") = Ложь
					И СтрНачинаетсяС(ИмяВКонтейнере, "ХранимыеДанныеТитул") = Ложь
					И СтрНачинаетсяС(ИмяВКонтейнере, "СсылкаТитул") = Ложь Тогда
					ИмяВКонтейнере = ГруппаДанныхВКонтейнере + ИмяВКонтейнере;	
				КонецЕсли;
				ИмяДанныхЗаполнения = КиЗ.Ключ;
				Если ЭтоДопТитул = Истина И Результат.ДанныеЗаполненияРеквизитовФормы.Свойство(ИмяДанныхЗаполнения) = Ложь Тогда
					ИмяДанныхЗаполнения = СтрЗаменить(ИмяДанныхЗаполнения, "ДопТитул", "Титул");
				КонецЕсли;
				Если ТипЗнч(КонтейнерТекущихДанных) = Тип("Структура") Тогда
					КонтейнерТекущихДанных.Вставить(ИмяВКонтейнере, Результат.ДанныеЗаполненияРеквизитовФормы[ИмяДанныхЗаполнения]);	
				Иначе
					Если ТипЗнч(КонтейнерТекущихДанных) = Тип("ДанныеФормыЭлементКоллекции") Тогда
						ЕстьРеквизитРодителя = КонтейнерТекущихДанных.Свойство(ИмяВКонтейнере);
					Иначе
						ЕстьРеквизитРодителя = ПараметрыФормыРодителя.Свойство(ИмяВКонтейнере);
					КонецЕсли;
					Если ЕстьРеквизитРодителя = Истина Тогда
						КонтейнерТекущихДанных[ИмяВКонтейнере] = Результат.ДанныеЗаполненияРеквизитовФормы[ИмяДанныхЗаполнения];
					КонецЕсли;	
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		// Для новой схемы хранения на форме нужно сохранять все реквизиты с подчиненной формы
		Если ТипЗнч(РезультатВыбора) = Тип("Структура") И ТипЗнч(КонтейнерТекущихДанных) = Тип("Структура") Тогда
			РеквизитыФормы = Новый Структура(Результат.ОписаниеРеквизитовФормы.ПараметрыФормы);
			Для Каждого КиЗ Из РеквизитыФормы Цикл
				Если КиЗ.Ключ = "ОписаниеРеквизитовФормы"
					Или КиЗ.Ключ = "ЭтоОднострочныйВвод" Тогда
					Продолжить;
				КонецЕсли;
				ИмяВКонтейнере = КиЗ.Ключ;
				Если ЭтоДопТитул = Истина Тогда
					ИмяВКонтейнере = СтрЗаменить(ИмяВКонтейнере, "Титул", "ДопТитул")	
				КонецЕсли;
				КонтейнерТекущихДанных.Вставить(ИмяВКонтейнере, Результат.ДанныеЗаполненияРеквизитовФормы[КиЗ.Ключ]);	
			КонецЦикла;	
		КонецЕсли;
		Если ЗначениеЗаполнено(ПараметрыФормыИзФормы) Тогда
			РеквизитыФормыИзФормы = Новый Структура(ПараметрыФормыИзФормы);
			Для Каждого КиЗ Из РеквизитыФормыИзФормы Цикл
				ИмяНаФорме = КиЗ.Ключ;
				Если ЭтоДопТитул = Истина И ПараметрыФормыРодителя.Свойство(ИмяНаФорме) = Ложь Тогда
					ИмяНаФорме = СтрЗаменить(ИмяНаФорме, "Титул", "ДопТитул")	
				КонецЕсли;
				ИмяДанныхЗаполнения = КиЗ.Ключ;
				Если ЭтоДопТитул = Истина И Результат.ДанныеЗаполненияРеквизитовФормы.Свойство(ИмяДанныхЗаполнения) = Ложь Тогда
					ИмяДанныхЗаполнения = СтрЗаменить(ИмяДанныхЗаполнения, "ДопТитул", "Титул");
				КонецЕсли;
				Форма[ИмяНаФорме] = Результат.ДанныеЗаполненияРеквизитовФормы[ИмяДанныхЗаполнения];	
			КонецЦикла;
		КонецЕсли;
		
		ПрефиксТаблиц = "";
		Если КонтейнерОтображаемойВерсии <> Неопределено Тогда
			ПрефиксТаблиц = КонтейнерОтображаемойВерсии.ПрефиксТитула;	
		КонецЕсли;
		
		ЗаполнитьТаблицы(КонтейнерТекущейФормы, 
							Форма, 
							Результат.ДанныеЗаполненияТаблицФормы, 
							ИдентификаторСтрокиРодителя, 
							ПрефиксТаблиц, 
							ЭтоДопТитул,
							ГруппаДанныхВКонтейнере);
		
		Если ЗаполнитьСсылку = Истина Тогда
			ТекущиеДанныеФормы = Неопределено;
			ИмяРеквизита = "ХранимыеДанные" + ВходящийКонтекст.ГруппаДанных;
			Если ЭтоДопТитул = Истина Тогда
				ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "Титул", "ДопТитул");	
			КонецЕсли;
			Если ВходящийКонтекст.Свойство("ТекущиеДанные", ТекущиеДанныеФормы) И ТекущиеДанныеФормы <> Неопределено Тогда
				Если ТипЗнч(ТекущиеДанныеФормы) = Тип("Структура") Тогда
					ТекущиеДанныеФормы.Вставить(ИмяРеквизита, РезультатВыбора);
				Иначе
					ТекущиеДанныеФормы[ИмяРеквизита] = РезультатВыбора;
				КонецЕсли;
			Иначе
				Если ТипЗнч(КонтейнерТекущейФормы) = Тип("Структура") Тогда
					КонтейнерТекущейФормы.Вставить(ИмяРеквизита, РезультатВыбора);
					Если ЗначениеЗаполнено(ОписаниеРеквизитовФормыРодителя) Тогда
						РеквизитыФормы = Новый Структура(ОписаниеРеквизитовФормыРодителя.ПараметрыФормы); 
						Если РеквизитыФормы.Свойство(ИмяРеквизита) Тогда
							Форма[ИмяРеквизита] = РезультатВыбора;	
						КонецЕсли;
					КонецЕсли;
				Иначе
					КонтейнерТекущейФормы[ИмяРеквизита] = РезультатВыбора;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЕстьОбъект Тогда
			Форма.СтруктураРеквизитов = ОбменСГИСЭПДКлиентСервер.СкопироватьВФиксированноеЗначенияРекурсивно(КонтейнерОтображаемойВерсии.СтруктураРеквизитовЗаполнение);
		КонецЕсли;
		
		ОбменСГИСЭПДКлиентСервер.ИзменитьОформлениеЭлементовФормы(Форма, ВходящийКонтекст.ГруппаДанных);
		
		// Для работы объектов обязательных для заполнения 
		ГруппаДанных = Неопределено;
		Если ВходящийКонтекст.Свойство("ГруппаДанных", ГруппаДанных) Тогда
			Если ЭтоДопТитул = Истина Тогда	
				ИмяПодчиненнойФормы = СтрЗаменить(Строка(ГруппаДанных), "Титул", "ДопТитул");
			Иначе
				ИмяПодчиненнойФормы = ГруппаДанных;
			КонецЕсли;
		Иначе
			ИмяПодчиненнойФормы = Неопределено;	 
		КонецЕсли;
		ОповеститьОНеобходимостиОбновитьОформлениеКнопок(Форма,
			ИдентификаторСтрокиРодителя, ИмяПодчиненнойФормы, ЗаполнитьСсылку);
			
		Если ВходящийКонтекст.Свойство("ОповещениеОЗавершении") 
		И ВходящийКонтекст.ОповещениеОЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


Процедура ОчиститьПодчиненныеТаблицы(Форма, ИмяТаблицы, ИдентификаторСтрокиРодителя, Отказ) Экспорт
	
	ОписаниеРеквизитовФормы = Форма.ОписаниеРеквизитовФормы;
	
	МассивПодчиненныхТаблиц = Неопределено;
	ОписаниеРеквизитовФормы.ПодчиненныеТаблицы.Свойство(ИмяТаблицы, МассивПодчиненныхТаблиц);
	
	Если МассивПодчиненныхТаблиц = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеТаблиц = ?(ОписаниеРеквизитовФормы.ЕстьОбъект = Истина, 
							ОписаниеРеквизитовФормы.ОписаниеТаблицОбъекта,
							ОписаниеРеквизитовФормы.ОписаниеТаблицФормы);
							
	КонтейнерРеквизитов = ?(ОписаниеРеквизитовФормы.ЕстьОбъект = Истина, 
								Форма.Объект,
								Форма);
	
	Для Каждого ИмяПодчиненной Из МассивПодчиненныхТаблиц Цикл
		ТаблицаКонтейнера = КонтейнерРеквизитов[ИмяПодчиненной];
		Если ЗначениеЗаполнено(ИдентификаторСтрокиРодителя) Тогда
			СтрокиТЗ = ТаблицаКонтейнера.НайтиСтроки(Новый Структура("ИдентификаторСтрокиРодителя", ИдентификаторСтрокиРодителя));
			Поля = ОписаниеТаблиц[ИмяПодчиненной];
			СтруктураПолей = Новый Структура(Поля);
			// У списка нет колонки ИдентификаторСтроки
			ЭтоТаблицы = СтруктураПолей.Свойство("ИдентификаторСтроки");			
			Для Каждого Стр Из СтрокиТЗ Цикл
				Если ЭтоТаблицы = Истина Тогда
					ОчиститьПодчиненныеТаблицы(Форма, ИмяПодчиненной, Стр.ИдентификаторСтроки, Отказ);	
				КонецЕсли;
				ТаблицаКонтейнера.Удалить(Стр);
			КонецЦикла;
		Иначе
			ТаблицаКонтейнера.Очистить();	
		КонецЕсли;
	КонецЦикла;
	
	СтраницаТаблица = Форма.Элементы.Найти("Страница" + ИмяТаблицы);
	Если СтраницаТаблица <> Неопределено Тогда
		ОбменСГИСЭПДКлиентСервер.ПосчитатьКоличествСтрокТаблицы(КонтейнерРеквизитов, СтраницаТаблица, -1);
	КонецЕсли;
	
КонецПроцедуры


Процедура АвтоПодборХранимыхДанныхЭПД(Элемент, Текст, ДанныеВыбора, Отбор, СтандартнаяОбработка) Экспорт
	
	Если СтрДлина(Текст) > 2 Тогда
		СтрокаПоиска = Текст;
	ИначеЕсли СтрДлина(Элемент.ТекстРедактирования) > 2 Тогда
		СтрокаПоиска = Элемент.ТекстРедактирования;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если СтрДлина(СтрокаПоиска) > 2 Тогда
		ОбменСГИСЭПДВызовСервера.АвтоПодборХранимыхДанныхЭПД(СтрокаПоиска, ДанныеВыбора, Отбор);
		Если ТипЗнч(ДанныеВыбора) = Тип("СписокЗначений") Тогда
			СтандартнаяОбработка = (ДанныеВыбора.Количество() = 0);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


Процедура СобратьОписаниеПодчиненныхСтрок(КонтейнерРеквизитов, МассивИдентификаторов, ПодчиненныеСтроки)
	
	Если МассивИдентификаторов.Количество() > 0 Тогда
		Для Каждого КиЗ Из КонтейнерРеквизитов Цикл
			МассивЧастей = ОбменСГИСЭПДКлиентСервер.РазделитьСтрокуСоСложнымРазделителем(КиЗ.Ключ, "__");
			// Нам нужны только реквизиты таблиц
			Если МассивЧастей.Количество() = 3
				И МассивЧастей[2] = "ИдентификаторСтрокиРодителя"
				И (МассивИдентификаторов.Найти(КиЗ.Значение) <> Неопределено Или ЗначениеЗаполнено(КиЗ.Значение) = Ложь) Тогда
					ПодчиненнаяСтрокаПрефикс = МассивЧастей[0] + "__" + МассивЧастей[1] + "__";
					Если ПодчиненныеСтроки.Найти(ПодчиненнаяСтрокаПрефикс) <> Неопределено Тогда
						Продолжить;
					КонецЕсли;
					ПодчиненныеСтроки.Добавить(ПодчиненнаяСтрокаПрефикс);
					ИмяИдентификатораСтроки = МассивЧастей[0] + "__" + МассивЧастей[1] + "__ИдентификаторСтроки"; 
					Если КонтейнерРеквизитов.Свойство(ИмяИдентификатораСтроки) Тогда
						МассивИдентификаторовПодчиненных = Новый Массив;
						МассивИдентификаторовПодчиненных.Добавить(КонтейнерРеквизитов[ИмяИдентификатораСтроки]);	
						СобратьОписаниеПодчиненныхСтрок(КонтейнерРеквизитов, МассивИдентификаторовПодчиненных, ПодчиненныеСтроки)
					КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры


Процедура ЗаполнитьТаблицы(КонтейнерРеквизитов, Форма, Знач ТаблицыФормы, Знач ИдентификаторСтрокиРодителя = Неопределено, Знач ПрефиксТитула = "", Знач ЭтоДопТитул = Ложь, ГруппаДанных = "")
	
	ОписаниеРеквизитовФормы = Форма.ОписаниеРеквизитовФормы;
	Если ЗначениеЗаполнено(ПрефиксТитула) = Ложь Тогда
		ПрефиксТитула = ОписаниеРеквизитовФормы.ПрефиксТитула;
	КонецЕсли;
	
	// Очистим старые значения
	Для Каждого ТаблицаКиЗ Из ТаблицыФормы Цикл  
		
		ИмяТаблицы = ТаблицаКиЗ.Ключ;
 		Если ЗначениеЗаполнено(ПрефиксТитула) И СтрНачинаетсяС(ИмяТаблицы, ПрефиксТитула) = Ложь Тогда
			ИмяТаблицы = ПрефиксТитула + ИмяТаблицы;
 		КонецЕсли;
		
		Если ЭтоДопТитул = Истина Тогда
			ИмяТаблицы = СтрЗаменить(ИмяТаблицы, "Титул", "ДопТитул");	
		КонецЕсли;
		
		Если ТипЗнч(КонтейнерРеквизитов) = Тип("Структура") Тогда
			СтрокиКУдалению = Новый Массив;
			МассивИдентификаторов = Новый Массив;
			Для Каждого КиЗ Из КонтейнерРеквизитов Цикл
				МассивЧастей = ОбменСГИСЭПДКлиентСервер.РазделитьСтрокуСоСложнымРазделителем(КиЗ.Ключ, "__");
				Если МассивЧастей.Количество() = 3 И МассивЧастей[0] = ИмяТаблицы Тогда
					Если СтрЗаканчиваетсяНа(КиЗ.Ключ, "ИдентификаторСтроки") Тогда
						ИмяИдентификатораСтрокиРодителя = МассивЧастей[0] + "__" + МассивЧастей[1] + "__ИдентификаторСтрокиРодителя";
						Если ЗначениеЗаполнено(ИдентификаторСтрокиРодителя) = Ложь
							Или (КонтейнерРеквизитов.Свойство(ИмяИдентификатораСтрокиРодителя) 
								И КонтейнерРеквизитов[ИмяИдентификатораСтрокиРодителя] = ИдентификаторСтрокиРодителя)
							Или КонтейнерРеквизитов.Свойство(ИмяИдентификатораСтрокиРодителя) = Ложь Тогда
								СтрокиКУдалению.Добавить(МассивЧастей[0] + "__" + МассивЧастей[1] + "__");
								МассивИдентификаторов.Добавить(КиЗ.Значение);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			СобратьОписаниеПодчиненныхСтрок(КонтейнерРеквизитов, МассивИдентификаторов, СтрокиКУдалению);
			ВсеСтрокиКУдалению = Новый Массив;
			Для Каждого КиЗ Из КонтейнерРеквизитов Цикл
				МассивЧастей = ОбменСГИСЭПДКлиентСервер.РазделитьСтрокуСоСложнымРазделителем(КиЗ.Ключ, "__");
				Если МассивЧастей.Количество() = 3 
					И СтрокиКУдалению.Найти(МассивЧастей[0] + "__" + МассивЧастей[1] + "__") <> Неопределено Тогда
					ВсеСтрокиКУдалению.Добавить(КиЗ.Ключ);	
				КонецЕсли;	
			КонецЦикла;
			Для Каждого КлючУдаления Из ВсеСтрокиКУдалению Цикл
				КонтейнерРеквизитов.Удалить(КлючУдаления);		
			КонецЦикла;
		Иначе
			Если ОписаниеРеквизитовФормы.ОписаниеТаблицФормы.Свойство(ИмяТаблицы) = Ложь Тогда
				Продолжить;	
			КонецЕсли;
			ТаблицаКонтейнера = КонтейнерРеквизитов[ИмяТаблицы];
		
			ВсегоСтрок = ТаблицаКонтейнера.Количество();
			Для ИндексСтроки = 1 По ВсегоСтрок Цикл
				ТекущаяСтрока = ТаблицаКонтейнера[ВсегоСтрок - ИндексСтроки];	
				Если ЗначениеЗаполнено(ИдентификаторСтрокиРодителя) = Ложь 
					Или (ТекущаяСтрока.Свойство("ИдентификаторСтрокиРодителя") 
						И (ТекущаяСтрока["ИдентификаторСтрокиРодителя"] = ИдентификаторСтрокиРодителя 
							Или ТекущаяСтрока["ИдентификаторСтрокиРодителя"] = "")) Тогда
					// У списка нет колонки ИдентификаторСтроки
					ЭтоТаблицы = ТекущаяСтрока.Свойство("ИдентификаторСтроки");
					Если ЭтоТаблицы = Истина Тогда
						ОчиститьПодчиненныеТаблицы(Форма, ИмяТаблицы, ТекущаяСтрока.ИдентификаторСтроки, Ложь);
					КонецЕсли;
					ТаблицаКонтейнера.Удалить(ТекущаяСтрока);	
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;	
				
	// Добавим новые
	МассивЗаполненныхТаблиц = Новый Массив;
 	Для Каждого ТаблицаКиЗ Из ТаблицыФормы Цикл  
 		
 		Если МассивЗаполненныхТаблиц.Найти(ТаблицаКиЗ.Ключ) <> Неопределено Тогда
			Продолжить;
 		КонецЕсли;
 		
 		ИмяТаблицы = ТаблицаКиЗ.Ключ;
		
		Если ЭтоДопТитул = Истина И СтрНачинаетсяС(ИмяТаблицы, "Титул") Тогда
			ИмяТаблицы = "ДопТитул" + Сред(ИмяТаблицы, 6);
		Иначе
			Если ЗначениеЗаполнено(ПрефиксТитула) И СтрНачинаетсяС(ИмяТаблицы, ПрефиксТитула) = Ложь Тогда
				ИмяТаблицы = ПрефиксТитула + ИмяТаблицы;	
	 		КонецЕсли;	
		КонецЕсли;
		
		Если ТипЗнч(КонтейнерРеквизитов) = Тип("Структура") Тогда
			НомерСтроки = 0;
			Для Каждого СтрокаСтруктура Из ТаблицаКиЗ.Значение Цикл
				НомерСтроки = НомерСтроки + 1;
				Для Каждого КиЗ Из СтрокаСтруктура Цикл
					КонтейнерРеквизитов.Вставить(ИмяТаблицы + "__" + НомерСтроки  + "__" + КиЗ.Ключ, КиЗ.Значение);	
				КонецЦикла;	
			КонецЦикла;	
		Иначе
			Если ОписаниеРеквизитовФормы.ОписаниеТаблицФормы.Свойство(ИмяТаблицы) = Ложь Тогда
				Продолжить;	
			КонецЕсли;
			ТаблицаКонтейнера = КонтейнерРеквизитов[ИмяТаблицы];
			
			Для Каждого СтрокаСтруктура Из ТаблицаКиЗ.Значение Цикл	
				Если ЗначениеЗаполнено(ИдентификаторСтрокиРодителя) = Ложь 
					Или (СтрокаСтруктура.Свойство("ИдентификаторСтрокиРодителя") 
						И (СтрокаСтруктура["ИдентификаторСтрокиРодителя"] = ИдентификаторСтрокиРодителя 
							Или СтрокаСтруктура["ИдентификаторСтрокиРодителя"] = "")) Тогда
					НоваяСтрокаФормы = ТаблицаКонтейнера.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаФормы, СтрокаСтруктура);	
					
					// Заполнить подчиненные таблицы
					ЗаполнитьПодчиненныеТаблицы(ОписаниеРеквизитовФормы.ПодчиненныеТаблицы, 
													ИмяТаблицы, ТаблицыФормы, КонтейнерРеквизитов, НоваяСтрокаФормы, 
													ПрефиксТитула, ЭтоДопТитул, МассивЗаполненныхТаблиц);	
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПодчиненныеТаблицы(ПодчиненныеТаблицы, ИмяТаблицы, ТаблицыФормы, КонтейнерРеквизитов, СтрокаРодитель, ПрефиксТитула, ЭтоДопТитул, МассивЗаполненныхТаблиц)
	
	Если СтрокаРодитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаРодитель.Свойство("ИдентификаторСтроки") Тогда
		ИдентификаторСтрокиРодителя = СтрокаРодитель.ИдентификаторСтроки;
	Иначе
		Возврат;
	КонецЕсли;
	
	МассивПодчиненныхТаблиц = Неопределено;
	ПодчиненныеТаблицы.Свойство(ИмяТаблицы, МассивПодчиненныхТаблиц);
	
	Если МассивПодчиненныхТаблиц <> Неопределено Тогда
		Для Каждого ИмяПодчиненной Из МассивПодчиненныхТаблиц Цикл	
			ИмяТаблицыВКонтейнере = ?(ЗначениеЗаполнено(ПрефиксТитула) = Ложь 
						Или СтрНачинаетсяС(ИмяПодчиненной, ПрефиксТитула), "", ПрефиксТитула) + ИмяПодчиненной;
			Если ЭтоДопТитул = Истина Тогда
				ИмяТаблицыВКонтейнере = СтрЗаменить(ИмяТаблицыВКонтейнере, "Титул", "ДопТитул");	
			КонецЕсли;	
			МассивСтрокПодчиненнойТаблицы = Неопределено;
			Если ТаблицыФормы.Свойство(ИмяПодчиненной, МассивСтрокПодчиненнойТаблицы) = Ложь 
				И ЗначениеЗаполнено(ПрефиксТитула) Тогда
					// На общих формах ввода у реквизитов нет префиксов титулов
					ИмяПодчиненной = СтрЗаменить(ИмяПодчиненной, ПрефиксТитула, "");
				ТаблицыФормы.Свойство(ИмяПодчиненной, МассивСтрокПодчиненнойТаблицы);
			КонецЕсли;	
			Если МассивСтрокПодчиненнойТаблицы <> Неопределено Тогда
				ПодчиненнаяТаблицаКонтейнера = КонтейнерРеквизитов[ИмяТаблицыВКонтейнере];
				Для Каждого ПодчиненнаяСтрокаСтруктура Из МассивСтрокПодчиненнойТаблицы Цикл
					Если ПодчиненнаяСтрокаСтруктура.Свойство("ИдентификаторСтрокиРодителя") = Ложь Тогда
						Продолжить;
					КонецЕсли;
					Если ПодчиненнаяСтрокаСтруктура.ИдентификаторСтрокиРодителя = ИдентификаторСтрокиРодителя Тогда
						НоваяПодчиненнаяСтрокаФормы = ПодчиненнаяТаблицаКонтейнера.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяПодчиненнаяСтрокаФормы, ПодчиненнаяСтрокаСтруктура);
						ЗаполнитьПодчиненныеТаблицы(ПодчиненныеТаблицы, 
													ИмяПодчиненной, ТаблицыФормы, КонтейнерРеквизитов, НоваяПодчиненнаяСтрокаФормы, 
													ПрефиксТитула, ЭтоДопТитул, МассивЗаполненныхТаблиц);
					КонецЕсли;	
				КонецЦикла;
				МассивЗаполненныхТаблиц.Добавить(ИмяПодчиненной);
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ТаблицаПриНачалеРедактирования(Элемент, Форма, НоваяСтрока, Копирование) Экспорт
		
	ТекущиеДанные = Элемент.ТекущиеДанные; 
	Если ТекущиеДанные.Свойство("ИдентификаторСтроки") 
		И (ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторСтроки) = Ложь Или Копирование = Истина) Тогда
		ТекущиеДанные.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
//		Если Форма.ОписаниеРеквизитовФормы.ОписаниеДопРеквизитов.Свойство(Элемент.Имя) Тогда
//			ИмяИнфПоля = Элемент.Имя + "ИнформационныеПоля";
//			ТаблицаИнфПоля = Форма[ИмяИнфПоля];
//			СтрокаДопПолей = ТаблицаИнфПоля.Добавить();
//			СтрокаДопПолей.ИдентификаторСтрокиРодителя = ТекущиеДанные.ИдентификаторСтроки;	
//		КонецЕсли;
	КонецЕсли;

	Если ТекущиеДанные.Свойство("ИдентификаторСтрокиРодителя") И ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторСтрокиРодителя) = Ложь Тогда
		ТекущиеДанные.ИдентификаторСтрокиРодителя = Форма.ИдентификаторСтрокиРодителя;
	КонецЕсли;
	
	Если НоваяСтрока = Истина Тогда
		Если Форма.ОписаниеРеквизитовФормы.ЕстьОбъект = Истина Тогда
			СтруктураОписаниеТаблицы = Новый Структура(Форма.ОписаниеРеквизитовФормы.ОписаниеТаблицОбъекта[Элемент.Имя]);
		Иначе
			СтруктураОписаниеТаблицы = Новый Структура(Форма.ОписаниеРеквизитовФормы.ОписаниеТаблицФормы[Элемент.Имя]);
		КонецЕсли;
		НужноИзменитьОформлениеКнопок = Ложь;
		Для Каждого КиЗ Из СтруктураОписаниеТаблицы Цикл
			Если СтрНачинаетсяС(КиЗ.Ключ, "Заполнить") Тогда
				НужноИзменитьОформлениеКнопок = Истина;
				Прервать;		
			КонецЕсли;
		КонецЦикла;
		ОбменСГИСЭПДКлиентСервер.ИзменитьОформлениеФормы(Форма);
		Если НужноИзменитьОформлениеКнопок Тогда
			ОповеститьОНеобходимостиОбновитьОформлениеКнопок(Форма, ТекущиеДанные.ИдентификаторСтроки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


Процедура ВводАдреса(ИмяЭлемента, Форма, ВладелецАдреса = Неопределено, ТекущиеДанные = Неопределено) Экспорт
	
	СтруктураРеквизитовАдреса = ОбменСГИСЭПДКлиентСервер.ПолучитьСтруктуруАдресаУчастника(ИмяЭлемента, Форма, ТекущиеДанные);
	
	КонтактнаяИнформацияАдреса = ОбменСГИСЭПДВызовСервера.КонтактнаяИнформацияВXML(СтруктураРеквизитовАдреса, 
																?(ТекущиеДанные = Неопределено, Форма[ИмяЭлемента], ТекущиеДанные[ИмяЭлемента]),
																ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес"));
	                                          
	ПараметрыФормыВводаАдреса = УправлениеКонтактнойИнформациейКлиент.ПараметрыФормыКонтактнойИнформации(
										ОбменСГИСЭПДВызовСервера.ВидФактическийАдресКонтрагента(), 
										КонтактнаяИнформацияАдреса);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлемента", ИмяЭлемента);
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
	ДополнительныеПараметры.Вставить("ВладелецАдреса", ВладелецАдреса);
	Оповещение = Новый ОписаниеОповещения("ВводАдреса_Завершение", ЭтотОбъект, ДополнительныеПараметры);
	
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыФормыВводаАдреса, Форма, Оповещение);
	
КонецПроцедуры


Процедура ВводАдреса_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТекущиеДанные = Неопределено;
	ДополнительныеПараметры.Свойство("ТекущиеДанные", ТекущиеДанные);
	Если Результат <> Неопределено Тогда	
		ОбменСГИСЭПДКлиентСервер.ЗаполнитьРеквизитыАдреса(ДополнительныеПараметры.Форма, Результат, ДополнительныеПараметры.ИмяЭлемента, ТекущиеДанные);
		ДополнительныеПараметры.Форма.Модифицированность = Истина;
		ВладелецАдреса = Неопределено;
		Если ДополнительныеПараметры.Свойство("ВладелецАдреса", ВладелецАдреса) Тогда
			СохранитьАдресДляПодбора(ВладелецАдреса, Результат);	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


Процедура ЗаполнениеРеквизитовИзОбщегоПоляВвода(Элемент, Форма) Экспорт
	
	ГруппаПолей = СтрЗаменить(Элемент.Имя, "ОбщееПолеВвода", "");
	ЗначениеОбщегоПоляВвода = Форма["ОбщееПолеВвода" + ГруппаПолей];
	
	КонтейнерРеквизитов = Форма;
	Если ГруппаПолей = "ИНН" Тогда
		Если СтрДлина(ЗначениеОбщегоПоляВвода) = 12 Тогда
			КонтейнерРеквизитов["ФЛ_" + ГруппаПолей] = ЗначениеОбщегоПоляВвода;
			КонтейнерРеквизитов["ЮЛ_" + ГруппаПолей] = "";
		ИначеЕсли СтрДлина(ЗначениеОбщегоПоляВвода) <= 10 Тогда
			КонтейнерРеквизитов["ФЛ_" + ГруппаПолей] = "";
			КонтейнерРеквизитов["ЮЛ_" + ГруппаПолей] = ЗначениеОбщегоПоляВвода;	
		КонецЕсли;
	КонецЕсли;
	
	ОбменСГИСЭПДКлиентСервер.ИзменитьОформлениеФормы(Форма, Элемент.Имя);
	
КонецПроцедуры


Процедура ПолучитьУИДМинтранса(ОписаниеОповещения, ИдентификаторАбонента, ЭтоВторойТитул = Ложь, ДокументСсылка = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ИдентификаторАбонента) = Ложь Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Неопределено);	
	КонецЕсли;
	
	УчетныеЗаписи = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторАбонента);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	ДополнительныеПараметры.Вставить("ИдентификаторАбонента", ИдентификаторАбонента);
	ДополнительныеПараметры.Вставить("ЭтоВторойТитул", ЭтоВторойТитул);
	ДополнительныеПараметры.Вставить("ДокументСсылка", ДокументСсылка);
	ОбработкаОповещения = Новый ОписаниеОповещения("ПолучитьУИДМинтранса_ПослеАвторизации", ЭтотОбъект, ДополнительныеПараметры);
	КонтекстДиагностики = ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики();
	СинхронизацияЭДОКлиент.АвторизоватьсяВСервисеЭлектронногоДокументооборота(
		ОбработкаОповещения, КонтекстДиагностики, УчетныеЗаписи);
		
КонецПроцедуры

Процедура ПолучитьУИДМинтранса_ПослеАвторизации(РезультатАвторизации, ДополнительныеПараметры) Экспорт
	
	Если РезультатАвторизации = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки(РезультатАвторизации.КонтекстДиагностики);
	
	КлючСинхронизации = РезультатАвторизации.КлючиСинхронизации.Получить(ДополнительныеПараметры.ИдентификаторАбонента);
	Результат = ОбменСГИСЭПДВызовСервера.ПолучитьУИДМинтранса(КлючСинхронизации,
																ДополнительныеПараметры.ЭтоВторойТитул,
																ДополнительныеПараметры.ДокументСсылка);
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, Результат);

КонецПроцедуры

Функция ТребуетсяИдентификацияФайлаТитула(ДокументСсылка, ТекущийТитул, ВерсииТитулов) Экспорт
	
	Если ЗначениеЗаполнено(ТекущийТитул) = Ложь Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ОбменСГИСЭПДВызовСервера.ЭтоУОУ(ТекущийТитул) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗавершенныеОтправки = ОбменСГИСЭПДВызовСервера.ПолучитьТитулыПоДокументу(ДокументСсылка, Истина);
	ЗавершенныеПоТитулу = ЗавершенныеОтправки.Получить(ТекущийТитул);
	
	ПоследняяВерсия = 0;
	ВерсияЗафиксирована = Ложь;
	Для Каждого СтрокаВерсии Из ВерсииТитулов Цикл
		Если СтрокаВерсии.Титул = ТекущийТитул И ПоследняяВерсия <= СтрокаВерсии.НомерВерсии Тогда
			ВерсияЗафиксирована = Ложь;
			Если ЗавершенныеПоТитулу <> Неопределено Тогда
				Для Каждого ИнформацияОбОтправке Из ЗавершенныеПоТитулу Цикл
					Если ИнформацияОбОтправке.ИдентификаторФайла = СтрокаВерсии.ИдентификаторФайла Тогда
						ВерсияЗафиксирована = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ПоследняяВерсия = СтрокаВерсии.НомерВерсии;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВерсияЗафиксирована = Ложь;
	
КонецФункции


Функция ИмяОбъектаФормы(ИмяФормы)
	
	МассивЧастейИмениФормы = СтрРазделить(ИмяФормы, ".");
	ИмяОбъекта = МассивЧастейИмениФормы[0] + "." + МассивЧастейИмениФормы[1];
	
	Возврат ИмяОбъекта;
	
КонецФункции


#Область ОбъектыОбязательныеДляЗаполнения

// Оповещает о завершении формирования дерева соответствий.
// 
// Параметры:
//  Результат - Структура - Структура с результатом работы фонового задания
//  ДополнительныеПараметры -Структура - Дополнительные параметры
Процедура ФормированияДереваСоответствийЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Оповестить("ОтметитьОбязательныеНеЗаполненныеЭлементыФормы", ДополнительныеПараметры.УникальныйИдентификатор);
	
КонецПроцедуры

// Оповещает о необходимости обновить оформление кнопок.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  ИдентификаторСтрокиРодителя - Строка, Неопределено - Идентификатор строки родителя
//  ИмяОткрытойПодчиненнойФормы - Строка, Неопределено - Имя открытой подчиненной формы
Процедура ОповеститьОНеобходимостиОбновитьОформлениеКнопок(Форма, 
	ИдентификаторСтрокиРодителя = Неопределено, ИмяОткрытойПодчиненнойФормы = Неопределено, ЗаполнитьСсылку = Ложь)
	
	Если ИмяОткрытойПодчиненнойФормы = Неопределено Тогда 
		ИмяКнопки = Неопределено;
	ИначеЕсли ЗаполнитьСсылку Тогда
		ИмяКнопки = Неопределено; 
	Иначе
		ИмяКнопки = "Заполнить" + ИмяОткрытойПодчиненнойФормы;
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("УникальныйИдентификаторОбновляемойФормы", Форма.УникальныйИдентификатор);
	Параметры.Вставить("ИмяКнопки", ИмяКнопки);
	Параметры.Вставить("ИдентификаторСтроки", ИдентификаторСтрокиРодителя);
	
	ФиксированнаяСтруктураПараметров = Новый ФиксированнаяСтруктура(Параметры);
	
	Оповестить("ИзменитьОформлениеКнопокФормы", ФиксированнаяСтруктураПараметров);
	
КонецПроцедуры

#КонецОбласти

Процедура ОткрытьОписаниеОшибки(ОбъектСсылка, ФормаВладелец) Экспорт
	
	ОписаниеОшибки = ОбменСГИСЭПДВызовСервера.ПолучитьОписаниеОшибки(ОбъектСсылка);
	
	ОткрытьФорму("ОбщаяФорма.ОшибкиОбменаСГИСЭПД", ОписаниеОшибки, ФормаВладелец, 
					ФормаВладелец.УникальныйИдентификатор,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры
