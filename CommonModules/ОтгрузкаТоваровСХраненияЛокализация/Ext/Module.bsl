
#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	//++ Локализация


	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый документ.
//  Отказ - Булево - Признак проведения документа.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то проведение документа выполнено не будет.
//  РежимПроведения - РежимПроведенияДокумента - В данный параметр передается текущий режим проведения.
//
Процедура ОбработкаПроведения(Объект, Отказ, РежимПроведения) Экспорт
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то будет выполнен отказ от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Объект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект.
//  ДанныеЗаполнения - Произвольный - Значение, которое используется как основание для заполнения.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаЗаполнения(Объект, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	//++ Локализация


	//-- Локализация
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то запись выполнена не будет и будет вызвано исключение.
//
Процедура ОбработкаУдаленияПроведения(Объект, Отказ) Экспорт
	
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то запись выполнена не будет и будет вызвано исключение.
//  РежимЗаписи - РежимЗаписиДокумента - В параметр передается текущий режим записи документа. Позволяет определить в теле процедуры режим записи.
//  РежимПроведения - РежимПроведенияДокумента - В данный параметр передается текущий режим проведения.
//
Процедура ПередЗаписью(Объект, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	//++ Локализация
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		УчетПрослеживаемыхТоваровЛокализация.ПроверитьДанныеПрослеживаемостиНомеровГТД(Объект, Объект.ВидыЗапасов, Объект.Дата, "ВидыЗапасов");
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина, то запись выполнена не будет и будет вызвано исключение.
//
Процедура ПриЗаписи(Объект, Отказ) Экспорт
	
	//++ Локализация
	Документы.ТранспортнаяНакладная.ОбновитьРеквизитыТранспортныхНакладныхПриЗаписиДокументаОснования(Объект, Отказ);
	//-- Локализация
	
	Возврат;
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  ОбъектКопирования - ДокументОбъект - Исходный документ, который является источником копирования.
//
Процедура ПриКопировании(Объект, ОбъектКопирования) Экспорт
	
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	//++ Локализация
	ОбменСГИСЭПДПереопределяемый.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	//-- Локализация
	
КонецПроцедуры

// Добавляет команду создания документа "Авансовый отчет".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Процедура ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт


КонецПроцедуры

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	
КонецПроцедуры

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	//++ Локализация
	
	// МХ-3
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати                 = "Обработка.ПечатьОбщихФорм";
	КомандаПечати.Идентификатор                  = "МХ3";
	КомандаПечати.Представление                  = НСтр("ru = 'Акт о возврате ТМЦ, сданных на хранение (МХ-3)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
	Документы.ТранспортнаяНакладная.ДобавитьКомандыПечати(КомандыПечати);
	//-- Локализация

КонецПроцедуры

#КонецОбласти

#Область Печать

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	
КонецПроцедуры

Процедура КомплектПечатныхФорм(КомплектПечатныхФорм) Экспорт

	//++ Локализация
	
	РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм,
																			"МХ3",
																			НСтр("ru = 'Акт о возврате ТМЦ, сданных на хранение (МХ-3)'"),
																			1);
	//-- Локализация
	
КонецПроцедуры

Процедура СформироватьКомплектПечатныхФорм(МассивОбъектов,
										ПараметрыПечати,
										КоллекцияПечатныхФорм,
										ОбъектыПечати,
										КомплектПечатныхФорм) Экспорт
	
	//++ Локализация
	
	КомплектыПечатиПоОбъектам = РегистрыСведений.НастройкиПечатиОбъектов.КомплектыПечатиПоОбъектам(КоллекцияПечатныхФорм,
																									КомплектПечатныхФорм,
																									МассивОбъектов,
																									"МХ3");
	
	Для Каждого КомплектПечати Из КомплектыПечатиПоОбъектам Цикл
		СтруктураТипов = Новый Соответствие;
		СтруктураТипов.Вставить("Документ.ОтгрузкаТоваровСХранения", КомплектПечати.Объекты);
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			КомплектПечати.Имя,
			КомплектПечати.Представление,
			Обработки.ПечатьОбщихФорм.СформироватьПечатнуюФормуМХ3(СтруктураТипов, ОбъектыПечати, ПараметрыПечати));
	КонецЦикла;
		
	//-- Локализация
	
КонецПроцедуры

//++ Локализация

// Возвращает данные для формирования печатной формы МХ - 3.
//
// Параметры:
//	ПараметрыПечати	- Структура -дополнительные настройки печати.
//	МассивОбъектов	- Массив из ДокументСсылка.ОтгрузкаТоваровСХранения - коллекция значений ссылок на документы,
//																			по которым необходимо получить данные.
//
// Возвращаемое значение:
//	Структура - коллекция данных, используемых для печати, содержащая следующие следующие свойства:
//		* РезультатПоШапке			- РезультатЗапроса - данные шапки документа.
//		* РезультатПоСкладам		- РезультатЗапроса - данные о складе ответственного хранения.
//		* РезультатПоТабличнойЧасти	- РезультатЗапроса - данные табличной части документа.
//		* РезультатПоОшибкам		- Неорпеделено - данные об ошибках, возникающих при печати документа.
//
Функция ПолучитьДанныеДляПечатнойФормыМХ3(ПараметрыПечати, МассивОбъектов) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДанныеДокументов.Ссылка               КАК Ссылка
	|
	|ПОМЕСТИТЬ ТаблицаДанныхДокументов
	|ИЗ
	|	Документ.ОтгрузкаТоваровСХранения КАК ДанныеДокументов
	|
	|ГДЕ
	|	ДанныеДокументов.Ссылка В (&МассивОбъектов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;";
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Выполнить();
	
	ПараметрыЗаполнения = ПродажиСервер.ПараметрыЗаполненияВременнойТаблицыТоваров();
	ПараметрыЗаполнения.ВыводитьСклад = Истина;
	
	ПоместитьВременнуюТаблицуТоваров(МенеджерВременныхТаблиц, ПараметрыЗаполнения);
	
	КолонкаКодов = ФормированиеПечатныхФорм.ДополнительнаяКолонкаПечатныхФормДокументов().ИмяКолонки;
	
	Если Не ЗначениеЗаполнено(КолонкаКодов) Тогда
		КолонкаКодов = "Код";
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПериодыКурсовВалютПоДокументам.Ссылка,
	|	КурсыВалют.Валюта,
	|	КурсыВалют.КурсЧислитель,
	|	КурсыВалют.КурсЗнаменатель
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	(ВЫБРАТЬ
	|		Документы.Ссылка КАК Ссылка,
	|		МАКСИМУМ(КурсыВалют.Период) КАК Период,
	|		КурсыВалют.Валюта КАК Валюта,
	|		КурсыВалют.БазоваяВалюта КАК БазоваяВалюта
	|	ИЗ
	|		Документ.ОтгрузкаТоваровСХранения КАК Документы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют КАК КурсыВалют
	|			ПО Документы.Валюта = КурсыВалют.Валюта
	|				И Документы.Ссылка.Организация.ВалютаРегламентированногоУчета = КурсыВалют.БазоваяВалюта
	|				И Документы.Дата >= КурсыВалют.Период
	|	ГДЕ
	|		Документы.Ссылка В(&МассивДокументов)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Документы.Ссылка,
	|		КурсыВалют.Валюта,
	|		КурсыВалют.БазоваяВалюта) КАК ПериодыКурсовВалютПоДокументам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют КАК КурсыВалют
	|		ПО ПериодыКурсовВалютПоДокументам.Период = КурсыВалют.Период
	|			И ПериодыКурсовВалютПоДокументам.Валюта = КурсыВалют.Валюта
	|			И ПериодыКурсовВалютПоДокументам.БазоваяВалюта = КурсыВалют.БазоваяВалюта
	|
	|;
	|
	|ВЫБРАТЬ
	|	ДокументОтгрузки.Ссылка            КАК Ссылка,
	|	ЕСТЬNULL(ДокументОтгрузки.ИсправляемыйДокумент.Номер, ДокументОтгрузки.Номер) КАК Номер,
	|	ЕСТЬNULL(ДокументОтгрузки.ИсправляемыйДокумент.Дата, ДокументОтгрузки.Дата) КАК Дата,
	|	ЕСТЬNULL(ДокументОтгрузки.ИсправляемыйДокумент.Дата, ДокументОтгрузки.Дата) КАК ДатаДокумента,
	|	ДокументОтгрузки.Дата              КАК ДатаПолученияСебестоимости,
	|	ДокументОтгрузки.Организация       КАК Организация,
	|	ДокументОтгрузки.Контрагент        КАК Контрагент,
	|	ДокументОтгрузки.Отпустил          КАК Сдал,
	|	ДокументОтгрузки.ОтпустилДолжность КАК СдалДолжность,
	|	ДокументОтгрузки.Договор.Дата      КАК ДоговорДата,
	|	ДокументОтгрузки.Договор.Номер     КАК ДоговорНомер,
	|	ДокументОтгрузки.Валюта            КАК Валюта
	|ПОМЕСТИТЬ ВтШапка
	|ИЗ
	|	Документ.ОтгрузкаТоваровСХранения КАК ДокументОтгрузки
	|ГДЕ
	|	ДокументОтгрузки.Ссылка В(&МассивДокументов)
	|	И ДокументОтгрузки.Проведен
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// 1
	|ВЫБРАТЬ
	|	ВтШапка.Ссылка          КАК Ссылка,
	|	ВтШапка.Номер           КАК Номер,
	|	ВтШапка.Дата            КАК Дата,
	|	ВтШапка.Дата            КАК ДатаДокумента,
	|	ВтШапка.Контрагент     	КАК Организация,
	|	ВтШапка.Контрагент      КАК Поклажедатель,
	|	ВтШапка.Сдал            КАК Сдал,
	|	ВтШапка.СдалДолжность   КАК СдалДолжность,
	|	ВтШапка.ДоговорДата     КАК ДоговорДата,
	|	ВтШапка.ДоговорНомер    КАК ДоговорНомер
	|ИЗ
	|	ВтШапка КАК ВтШапка
	|;
	|//////////////////////////////////////////////////////////////////////////////// 2
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТоварыОтгрузки.Ссылка                КАК Ссылка,
	|	ТоварыОтгрузки.Склад                 КАК Склад,
	|	ЛОЖЬ                                 КАК ПредварительныйРасчет,
	|	НЕОПРЕДЕЛЕНО                         КАК ИсточникИнформацииОЦенахДляПечати,
	|	ПРЕДСТАВЛЕНИЕ(ТоварыОтгрузки.Склад)  КАК ПредставлениеСклада,
	|	ПРЕДСТАВЛЕНИЕ(Склады.Подразделение)  КАК ПредставлениеПодразделения,
	|	ВтШапка.Организация                  КАК Поклажедержатель,
	|	""""                                 КАК ОсобыеОтметки,
	|	""""                                 КАК УсловияХранения,
	|	ВтШапка.Сдал                         КАК МОЛ,
	|	ВтШапка.СдалДолжность                КАК ДолжностьМОЛ
	|ИЗ
	|	Документ.ОтгрузкаТоваровСХранения.Товары КАК ТоварыОтгрузки
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтШапка КАК ВтШапка
	|		ПО ВтШапка.Ссылка = ТоварыОтгрузки.Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|		ПО ТоварыОтгрузки.Склад = Склады.Ссылка
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// 3
	|ВЫБРАТЬ
	|	ТоварыОтгрузки.Ссылка                            КАК Ссылка,
	|	ТоварыОтгрузки.Склад                             КАК Склад,
	|	ВЫБОР
	|		КОГДА &КолонкаКодов = ""Артикул""
	|			ТОГДА ТоварыОтгрузки.Номенклатура.Артикул
	|		ИНАЧЕ ТоварыОтгрузки.Номенклатура.Код
	|	КОНЕЦ                                            КАК НоменклатураКод,
	|	ТоварыОтгрузки.Номенклатура                      КАК Номенклатура,
	|	ТоварыОтгрузки.Номенклатура.НаименованиеПолное   КАК ПредставлениеНоменклатуры,
	|	ТоварыОтгрузки.Характеристика.НаименованиеПолное КАК ПредставлениеХарактеристики,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения        КАК ЕдиницаИзмеренияНаименование,
	|	&ТекстЗапросаКодЕдиницыИзмерения                 КАК ЕдиницаИзмеренияКод,
	|	ТоварыОтгрузки.КоличествоУпаковок                КАК Количество,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения        КАК ВидУпаковки,
	|	ВЫБОР
	|		КОГДА ТоварыОтгрузки.СуммаБезНДС > 0
	|			ТОГДА ВЫРАЗИТЬ(ТоварыОтгрузки.СуммаБезНДС / ТоварыОтгрузки.КоличествоУпаковок КАК ЧИСЛО(31,2))
	|		ИНАЧЕ ВЫРАЗИТЬ(ТоварыОтгрузки.Цена * ЕСТЬNULL(КурсыВалют.КурсЧислитель, 1) / ЕСТЬNULL(КурсыВалют.КурсЗнаменатель, 1) КАК ЧИСЛО(31,2))
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР
	|		КОГДА ТоварыОтгрузки.СуммаБезНДС > 0
	|			ТОГДА ТоварыОтгрузки.СуммаБезНДС
	|		ИНАЧЕ ВЫРАЗИТЬ(ТоварыОтгрузки.СуммаБезНДСДокумента * ЕСТЬNULL(КурсыВалют.КурсЧислитель, 1) / ЕСТЬNULL(КурсыВалют.КурсЗнаменатель, 1) КАК ЧИСЛО(31,2))
	|	КОНЕЦ КАК Сумма
	|ИЗ
	|	ОтгрузкаТоваровСХраненияТаблицаТоваров КАК ТоварыОтгрузки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтШапка КАК ОтгрузкаТоваровСХранения
	|		ПО ОтгрузкаТоваровСХранения.Ссылка = ТоварыОтгрузки.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО Организации.Ссылка = ОтгрузкаТоваровСХранения.Организация
	|	ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
	|		ПО ТоварыОтгрузки.Ссылка = КурсыВалют.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|
	|ИТОГИ ПО
	|	Ссылка,
	|	Склад
	|";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаНаименованиеЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование", "ТоварыОтгрузки.Упаковка", "ТоварыОтгрузки.Номенклатура"));
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКодЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Код", "ТоварыОтгрузки.Упаковка", "ТоварыОтгрузки.Номенклатура"));
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
	Запрос.УстановитьПараметр("КолонкаКодов",     КолонкаКодов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	РезультатПоШапке          = МассивРезультатов[2];
	РезультатПоСкладам        = МассивРезультатов[3];
	РезультатПоТабличнойЧасти = МассивРезультатов[4];
	
	СтруктураДанныхДляПечати = Новый Структура;
	СтруктураДанныхДляПечати.Вставить("РезультатПоШапке",          РезультатПоШапке);
	СтруктураДанныхДляПечати.Вставить("РезультатПоСкладам",        РезультатПоСкладам);
	СтруктураДанныхДляПечати.Вставить("РезультатПоТабличнойЧасти", РезультатПоТабличнойЧасти);
	СтруктураДанныхДляПечати.Вставить("РезультатПоОшибкам",        Неопределено);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

// Формирует временную таблицу, содержащую табличную часть по таблице данных документов.
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц, содержащий таблицу
//		ТаблицаДанныхДокументов с полями:
//			* Ссылка - ДокументСсылка.ОтгрузкаТоваровСхранения - ссылка на документ отгрузки товров с хранения.
//	ПараметрыЗаполнения     - Структура               - структура, возвращаемая функцией
//		ПродажиСервер.ПараметрыЗаполненияВременнойТаблицыТоваров.
//
Процедура ПоместитьВременнуюТаблицуТоваров(МенеджерВременныхТаблиц, ПараметрыЗаполнения = Неопределено) Экспорт
	
	Если ПараметрыЗаполнения = Неопределено Тогда
		ПараметрыЗаполнения = ПродажиСервер.ПараметрыЗаполненияВременнойТаблицыТоваров();
	КонецЕсли;
	
	Запрос                         = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Ссылка                КАК Ссылка,
	|	МАКСИМУМ(ТаблицаТоваров.НомерСтроки) КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура          КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика        КАК Характеристика,
	|	ТаблицаТоваров.Упаковка              КАК Упаковка,
	|	ТаблицаТоваров.Серия                 КАК Серия,
	|	ТаблицаТоваров.Цена                  КАК Цена
	|
	|ПОМЕСТИТЬ СтрокиТоваров
	|ИЗ
	|	Документ.ОтгрузкаТоваровСХранения.Товары КАК ТаблицаТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДанныхДокументов КАК ДанныеДокументов
	|		ПО ТаблицаТоваров.Ссылка = ДанныеДокументов.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.Ссылка,
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.Упаковка,
	|	ТаблицаТоваров.Серия,
	|	ТаблицаТоваров.Цена
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТаблицаТоваров.Ссылка,
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.Серия,
	|	ТаблицаТоваров.Упаковка,
	|	ТаблицаТоваров.Цена
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка                                     КАК Ссылка,
	|	СтрокиТоваров.НомерСтроки                                   КАК НомерСтроки,
	|	АналитиаТоваров.Номенклатура                                КАК Номенклатура,
	|	АналитиаТоваров.Характеристика                              КАК Характеристика,
	|	ВЫБОР
	|		КОГДА &ВыводитьСклад
	|			ТОГДА АналитиаТоваров.МестоХранения
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                                       КАК Склад,
	|	ТаблицаДокумента.Упаковка                                   КАК Упаковка,
	|	АналитиаТоваров.Серия                                       КАК Серия,
	|	СУММА(ТаблицаДокумента.КоличествоУпаковок)                  КАК КоличествоУпаковок,
	|	СУММА(ТаблицаДокумента.Количество)                          КАК Количество,
	|	СУММА(ТаблицаДокумента.КоличествоПоРНПТ)                    КАК КоличествоПоРНПТ,
	|	ВЫБОР
	|		КОГДА &ВключаяНомераГТД
	|			ТОГДА ТаблицаДокумента.НомерГТД
	|		ИНАЧЕ
	|			&ПустаяГТД
	|	КОНЕЦ                                                        КАК НомерГТД,
	|	ТаблицаДокумента.Цена                                        КАК Цена,
	|	ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)                  КАК СтавкаНДС,
	|	СУММА(ЕСТЬNULL(СуммыДокументовВВалютахУчета.СуммаНДСРегл, 0))КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА &ПересчитыватьВВалютуРегл
	|			ТОГДА СУММА(ЕСТЬNULL(СуммыДокументовВВалютахУчета.СуммаБезНДСРегл, 0))
	|		ИНАЧЕ СУММА(ТаблицаДокумента.Сумма)
	|	КОНЕЦ                                                            КАК СуммаБезНДС,
	|	СУММА(ТаблицаДокумента.Сумма)                                    КАК СуммаБезНДСДокумента,
	|	ИСТИНА                                                       КАК ЭтоТовар
	|
	|ПОМЕСТИТЬ ОтгрузкаТоваровСХраненияТаблицаТоваров
	|ИЗ
	|	Документ.ОтгрузкаТоваровСХранения.ВидыЗапасов КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДанныхДокументов КАК ДанныеДокументов
	|		ПО ТаблицаДокумента.Ссылка = ДанныеДокументов.Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СуммыДокументовВВалютахУчета КАК СуммыДокументовВВалютахУчета
	|		ПО ТаблицаДокумента.Ссылка = СуммыДокументовВВалютахУчета.Регистратор
	|			И ТаблицаДокумента.ИдентификаторСтроки = СуммыДокументовВВалютахУчета.ИдентификаторСтроки
	|			И СуммыДокументовВВалютахУчета.Активность
	|			И &ПересчитыватьВВалютуРегл
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтрокиТоваров КАК СтрокиТоваров
	|		ПО ТаблицаДокумента.Ссылка       = СтрокиТоваров.Ссылка
	|			И ТаблицаДокумента.АналитикаУчетаНоменклатуры.Номенклатура   = СтрокиТоваров.Номенклатура
	|			И ТаблицаДокумента.АналитикаУчетаНоменклатуры.Характеристика = СтрокиТоваров.Характеристика
	|			И ТаблицаДокумента.Упаковка  = СтрокиТоваров.Упаковка
	|			И ТаблицаДокумента.АналитикаУчетаНоменклатуры.Серия          = СтрокиТоваров.Серия
	|			И ТаблицаДокумента.Цена      = СтрокиТоваров.Цена
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК АналитиаТоваров
	|		ПО АналитиаТоваров.Ссылка = ТаблицаДокумента.АналитикаУчетаНоменклатуры
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Ссылка,
	|	СтрокиТоваров.НомерСтроки,
	|	АналитиаТоваров.Номенклатура,
	|	АналитиаТоваров.Характеристика,
	|	ТаблицаДокумента.Упаковка,
	|	АналитиаТоваров.Серия,
	|	ВЫБОР
	|		КОГДА &ВыводитьСклад
	|			ТОГДА АналитиаТоваров.МестоХранения
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &ВключаяНомераГТД
	|			ТОГДА ТаблицаДокумента.НомерГТД
	|		ИНАЧЕ
	|			&ПустаяГТД
	|	КОНЕЦ,
	|	ТаблицаДокумента.Цена
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СтрокиТоваров";
	
	Запрос.УстановитьПараметр("ПересчитыватьВВалютуРегл", ПараметрыЗаполнения.ПересчитыватьВВалютуРегл);
	Запрос.УстановитьПараметр("ВключаяНомераГТД",         ПараметрыЗаполнения.ВключаяНомераГТД);
	Запрос.УстановитьПараметр("ПустаяГТД",                Справочники.НомераГТД.ПустаяСсылка());
	Запрос.УстановитьПараметр("ВыводитьСклад",            ПараметрыЗаполнения.ВыводитьСклад);
	
	Запрос.Выполнить();
	
КонецПроцедуры


//-- Локализация

#КонецОбласти


//++ Локализация

// Правила получения значений реквизитов ТТН
// 
// Возвращаемое значение:
//  см. Документы.ТранспортнаяНакладная.ПараметрыФормированияТранспортныхНакладных
//
Функция ПараметрыФормированияТранспортныхНакладных() Экспорт
	
	ПараметрыФормированияТранспортныхНакладных =
		Документы.ТранспортнаяНакладная.ПараметрыФормированияТранспортныхНакладных();
		
	ПараметрыФормированияТранспортныхНакладных.Реквизиты.Грузоотправитель = 
	"	ВЫБОР
	|		КОГДА ОснованиеТранспортнойНакладной.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ОснованиеТранспортнойНакладной.Организация
	|		ИНАЧЕ ОснованиеТранспортнойНакладной.Грузоотправитель
	|	КОНЕЦ";
	
	ПараметрыФормированияТранспортныхНакладных.Реквизиты.Грузополучатель = 
	"		ВЫБОР
	|			КОГДА ОснованиеТранспортнойНакладной.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				ТОГДА ОснованиеТранспортнойНакладной.Контрагент
	|			ИНАЧЕ ОснованиеТранспортнойНакладной.Грузополучатель
	|		КОНЕЦ";
	
	ПараметрыФормированияТранспортныхНакладных.Реквизиты.ЗаказчикПеревозки                 = "ОснованиеТранспортнойНакладной.Организация";
	ПараметрыФормированияТранспортныхНакладных.Реквизиты.БанковскийСчетЗаказчикаПеревозки  = "ОснованиеТранспортнойНакладной.БанковскийСчетОрганизации";
	ПараметрыФормированияТранспортныхНакладных.Реквизиты.Плательщик                        = "ОснованиеТранспортнойНакладной.Организация";
	ПараметрыФормированияТранспортныхНакладных.Реквизиты.БанковскийСчетПлательщика         = "ОснованиеТранспортнойНакладной.БанковскийСчетОрганизации";
	
	Возврат	ПараметрыФормированияТранспортныхНакладных;
	
КонецФункции

// Правила получения значений реквизитов ЭТН
// 
// Возвращаемое значение:
//  см. ОбменСГИСЭПДПереопределяемый.ПараметрыФормированияЭлектронныхТранспортныхНакладных
//
Функция ПараметрыФормированияЭлектронныхТранспортныхНакладных() Экспорт
	
	ПараметрыФормирования =
		ОбменСГИСЭПДПереопределяемый.ПараметрыФормированияЭлектронныхТранспортныхНакладных();

	ПараметрыФормирования.Реквизиты.СсылкаТитулГрузоотправителяГрузополучатель = 
	"		ВЫБОР
	|			КОГДА ОснованиеТранспортнойНакладной.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				ТОГДА ОснованиеТранспортнойНакладной.Контрагент
	|			ИНАЧЕ ОснованиеТранспортнойНакладной.Грузополучатель
	|		КОНЕЦ";
	
	ПараметрыФормирования.ИмяПоляСуммы = "Сумма";
	
	Возврат	ПараметрыФормирования;
	
КонецФункции

// Правила получения значений реквизитов ЭЗН
// 
// Возвращаемое значение:
//  см. ОбменСГИСЭПДПереопределяемый.ПараметрыФормированияЭлектронныхЗаказНарядов
//
Функция ПараметрыФормированияЭлектронныхЗаказНарядов() Экспорт
	
	ПараметрыФормирования =
		ОбменСГИСЭПДПереопределяемый.ПараметрыФормированияЭлектронныхЗаказНарядов();
		
	Возврат	ПараметрыФормирования;
	
КонецФункции

//-- Локализация

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

// Процедура дополняет тексты запросов проведения документа.
//
// Параметры:
//  Запрос - Запрос - Общий запрос проведения документа.
//  ТекстыЗапроса - СписокЗначений - Список текстов запроса провведения.
//  Регистры - Строка, Структура - Список регистров продения документа через запятую или в ключах структуры.
//
Процедура ДополнитьТекстыЗапросовПроведения(Запрос, ТекстыЗапроса, Регистры) Экспорт
	
	//++ Локализация


	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

//++ Локализация


//-- Локализация

#КонецОбласти
