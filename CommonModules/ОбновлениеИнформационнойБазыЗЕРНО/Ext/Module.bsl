////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы библиотеки интеграции с МОТП.
// 
/////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Получение сведений о библиотеке (или конфигурации).

// См. процедуру ОбновлениеИнформационнойБазыБСП.ПриДобавленииПодсистемы
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя    = "БиблиотекаИнтеграцииЗЕРНО";
	Описание.Версия = ОбщегоНазначенияИС.ВерсияПодсистемы("10");
	Описание.РежимВыполненияОтложенныхОбработчиков = "Параллельно";
	
	Описание.ТребуемыеПодсистемы.Добавить("СтандартныеПодсистемы");
	
КонецПроцедуры

// См. процедуру ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления.
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

#Область Монопольно
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "10.1.23.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗЕРНО.НачальноеЗаполнениеЗЕРНО";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение настроек интеграции с ФГИС ""Зерно"".'");

#КонецОбласти

#Область Отложенно
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "10.1.28.4";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Константы.НастройкиОбменаЗЕРНО.ОбработатьДанныеДляПереходаНаНовуюВерсиюAPI_1_0_7";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("5f96d91c-7c14-4085-8b1f-5ff6988ed2c2");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Константы.НастройкиОбменаЗЕРНО.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсиюAPI_1_0_7";
	Обработчик.ОчередьОтложеннойОбработки          = 1;
	Обработчик.ПроцедураПроверки                   = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты                     = "Константа.НастройкиОбменаЗЕРНО";
	Обработчик.ИзменяемыеОбъекты                   = "Константа.НастройкиОбменаЗЕРНО";
	Обработчик.БлокируемыеОбъекты                  = "Константа.НастройкиОбменаЗЕРНО";
	Обработчик.Комментарий                         = НСтр("ru = 'Изменяет версию API ФГИС ""Зерно"" на 1.0.7'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "10.1.34.1";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Константы.НастройкиОбменаЗЕРНО.ОбработатьДанныеДляПереходаНаНовуюВерсиюAPI_1_0_9";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("f4acd0d9-ce38-44bf-a20c-2c6cf6732c0b");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Константы.НастройкиОбменаЗЕРНО.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсиюAPI_1_0_9";
	Обработчик.ОчередьОтложеннойОбработки          = 1;
	Обработчик.ПроцедураПроверки                   = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты                     = "Константа.НастройкиОбменаЗЕРНО";
	Обработчик.ИзменяемыеОбъекты                   = "Константа.НастройкиОбменаЗЕРНО";
	Обработчик.БлокируемыеОбъекты                  = "Константа.НастройкиОбменаЗЕРНО";
	Обработчик.Комментарий                         = НСтр("ru = 'Изменяет версию API ФГИС ""Зерно"" на 1.0.9'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
#КонецОбласти
	
КонецПроцедуры

// См. процедуру ОбновлениеИнформационнойБазыБСП.ПередОбновлениемИнформационнойБазы
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
	ВерсияКонфигурации = ОбновлениеИнформационнойБазы.ВерсияИБ(Метаданные.Имя);
	Если ВерсияКонфигурации <> "0.0.0.0" Тогда
		
		ИдентификаторБиблиотекаИнтеграцииЗЕРНО = "БиблиотекаИнтеграцииЗЕРНО";
		ВерсияБиблиотекаИнтеграцииЗЕРНО = ОбновлениеИнформационнойБазы.ВерсияИБ(ИдентификаторБиблиотекаИнтеграцииЗЕРНО);
		Если ВерсияБиблиотекаИнтеграцииЗЕРНО = "0.0.0.0" Тогда
			
			ОбновлениеИнформационнойБазы.УстановитьВерсиюИБ("БиблиотекаИнтеграцииЗЕРНО", "1.0.0.0", Ложь);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// См. процедуру ОбновлениеИнформационнойБазыБСП.ПослеОбновленияИнформационнойБазы
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
КонецПроцедуры

// См. процедуру ОбновлениеИнформационнойБазыБСП.ПриПодготовкеМакетаОписанияОбновлений.
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	

КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
 
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//                                           или "*", если нужно выполнять при переходе с любой конфигурации.
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы ПредыдущееИмяКонфигурации. 
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
 
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует
//        указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
 
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиОбновления

Процедура НачальноеЗаполнениеЗЕРНО() Экспорт
	
	Если Не ЗначениеЗаполнено(ИнтеграцияИСВызовСервера.ЕдиницаИзмеренияКилограмм()) Тогда
		ЕдиницаИзмеренияКилограмм = Неопределено;
		ИнтеграцияИСПереопределяемый.ЕдиницаИзмеренияКилограмм(ЕдиницаИзмеренияКилограмм);
		Если ЕдиницаИзмеренияКилограмм <> Неопределено Тогда
			Константы.ЕдиницаИзмеренияКилограммИС.Установить(ЕдиницаИзмеренияКилограмм);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
