
#Область Прочее

// Возвращает структуру данных кода маркировки.
// Параметры:
// 	ЭлементДанных - Соответствие, Неопределено - Данные ГИС МТ
// Возвращаемое значение:
// 	Структура - Параметры статуса кода маркировки:
// * Статус       - ПеречислениеСсылка.СтатусыКодовМаркировкиМОТП - Статус кода маркировки.
// * ИННВладельца - Строка                                        - ИНН владельца кода маркировки.
Функция ПараметрыКодаМаркировкиЕАЭС(ЭлементДанных = Неопределено, ВидПродукции = Неопределено) Экспорт
	
	ПараметрыКодаМаркировки = ИнтерфейсИСМПОбщегоНазначения.ИнициализироватьПараметрыКодаМаркировкиМОТП();
	
	Если ЭлементДанных = Неопределено Тогда
		Возврат ПараметрыКодаМаркировки;
	КонецЕсли;
	
	ТипЭлементаДанных = ТипЗнч(ЭлементДанных);
	Если ТипЭлементаДанных = Тип("Соответствие") Тогда
		ИсточникДанных = ЭлементДанных;
	ИначеЕсли ТипЭлементаДанных = Тип("КлючИЗначение") Тогда	
		ИсточникДанных = ЭлементДанных.Значение;
	КонецЕсли;
	
	// Признак подлинности КМ на территории государства-члена ЕАЭС.
	Значение = ИсточникДанных["authenticity"];
	Если Значение = Неопределено Или Значение = Ложь Тогда
		
		ПараметрыКодаМаркировки.Статус =  Перечисления.СтатусыКодовМаркировкиИСМП.Неопределен;
		Возврат ПараметрыКодаМаркировки;
		
	КонецЕсли;
	
	Значение = ИсточникДанных["registered"];
	Если Значение = Неопределено Или Значение = Ложь Тогда
		
		// Идентификатор статуса КМ на территории государства-члена ЕАЭС.
		Значение = ИсточникДанных["cisStatusId"];
		Если Значение = "00" Тогда // не определён.
			ПараметрыКодаМаркировки.Статус =  Перечисления.СтатусыКодовМаркировкиИСМП.Неопределен;
		ИначеЕсли Значение = "1" Тогда // в обороте на территории государства-члена ЕАЭС.
			ПараметрыКодаМаркировки.Статус =  Перечисления.СтатусыКодовМаркировкиИСМП.ВведенВОборот;
		ИначеЕсли Значение = "2" Тогда // не в обороте на территории государства-члена ЕАЭС.
			ПараметрыКодаМаркировки.Статус =  Перечисления.СтатусыКодовМаркировкиИСМП.Нанесен;
		КонецЕсли;
		
		Если ИсточникДанных["expireDate"] <> Неопределено Тогда 
			ГоденДо = СтрЗаменить(ИсточникДанных["expireDate"], "-", ""); // Формат: yyyy-MM-dd
			ПараметрыКодаМаркировки.ГоденДо = Дата(ГоденДо);
		КонецЕсли;
		
		Возврат ПараметрыКодаМаркировки;
		
	Иначе
		
		Если ИсточникДанных["productGroup"] <> Неопределено И ЗначениеЗаполнено( ИсточникДанных["productGroup"]) Тогда
			ПараметрыКодаМаркировки.ВидПродукции = ИнтерфейсИСМПОбщегоНазначения.ТоварнаяГруппа(ИсточникДанных["productGroup"], ВидПродукции);
		КонецЕсли;
		
		Если ИсточникДанных["expireDate"] <> Неопределено Тогда
			ГоденДо = СтрЗаменить(ИсточникДанных["expireDate"], "-", ""); // Формат: yyyy-MM-dd
			ПараметрыКодаМаркировки.ГоденДо = Дата(ГоденДо);
		КонецЕсли;
		
		ПараметрыКодаМаркировки.Статус = ИнтерфейсИСМПОбщегоНазначения.СтатусКодаМаркировкиИСМП(ИсточникДанных["cisStatus"]);
		Если ЗначениеЗаполнено(ИсточникДанных["statusEx"]) Тогда
			ПараметрыКодаМаркировки.ОсобоеСостояние = ИнтерфейсИСМПОбщегоНазначения.СтатусКодаМаркировкиИСМП(ИсточникДанных["statusEx"]);
		КонецЕсли;
			
		Если ИсточникДанных["emissionType"] <> Неопределено Тогда
			ПараметрыКодаМаркировки.СпособВводаВОборот = ИнтерфейсИСМПСлужебный.СпособВыпускаВОборот(ИсточникДанных["emissionType"]);
		КонецЕсли;
		
		ПараметрыКодаМаркировки.GTIN                      = ИсточникДанных["gtin"];
		ПараметрыКодаМаркировки.ПредставлениеНоменклатуры = ИсточникДанных["productName"];
		
		ПараметрыКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская;
		
	КонецЕсли;
	
	Возврат ПараметрыКодаМаркировки;
	
КонецФункции

// Преобразовывает текстовое представление статуса участника МОТП в значение перечисления.
//
// Параметры:
//  ЗначениеПоиска - Строка - значение для перекодировки
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыУчастниковМОТП - статус участника.
//
Функция СтатусУчастника(Знач ЗначениеПоиска) Экспорт
	
	ЗначениеПоиска = ВРег(ЗначениеПоиска);
	
	Если ЗначениеПоиска = "ЗАРЕГИСТРИРОВАН" Или ЗначениеПоиска = "REGISTERED" Тогда
		Возврат Перечисления.СтатусыУчастниковМОТП.Зарегистрирован;
	КонецЕсли;
	
	ВызватьИсключение
		СтрШаблон(
			НСтр("ru = 'Неизвестный статус участника: %1'"),
			ЗначениеПоиска);
	
КонецФункции

// Преобразовывает текстовое представление типа операции движения кода маркировки МОТП в значение перечисления.
//
// Параметры:
//  ЗначениеПоиска - Строка - значение для перекодировки
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ТипыОперацийДвиженияКодовМаркировкиМОТП - тип операции движения кода маркировки.
//
Функция ТипОперацииДвиженияКодаМаркировки(Знач ЗначениеПоиска) Экспорт
	
	ЗначениеПоиска = ВРег(ЗначениеПоиска);
	
	Если ЗначениеПоиска = "EMISSION" Тогда
		Возврат Перечисления.ТипыОперацийДвиженияКодовМаркировкиМОТП.Эмиссия;
	ИначеЕсли ЗначениеПоиска = "APPLICATION" Тогда
		Возврат Перечисления.ТипыОперацийДвиженияКодовМаркировкиМОТП.Нанесение;
	ИначеЕсли ЗначениеПоиска = "AGGREGATION" Тогда
		Возврат Перечисления.ТипыОперацийДвиженияКодовМаркировкиМОТП.Агрегация;
	ИначеЕсли ЗначениеПоиска = "OWNER_CHANGE" Тогда
		Возврат Перечисления.ТипыОперацийДвиженияКодовМаркировкиМОТП.СменаВладельца;
	КонецЕсли;
	
	ВызватьИсключение
		СтрШаблон(
			НСтр("ru = 'Неизвестный тип операции движения кода маркировки: %1'"),
			ЗначениеПоиска);
	
КонецФункции

// Преобразовывает текстовое представление типа документа ИС МОТП в значение перечисления.
//
// Параметры:
//  ЗначениеПоиска - Строка - значение для перекодировки
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ТипыДокументовМОТП - тип документа.
//
Функция ТипДокумента(Знач ЗначениеПоиска) Экспорт
	
	ЗначениеПоиска = ВРег(ЗначениеПоиска);
	
	Если ЗначениеПоиска = "UNIVERSAL_TRANSFER_DOCUMENT" Тогда
		Возврат Перечисления.ТипыДокументовМОТП.УПД;
	ИначеЕсли ЗначениеПоиска = "AGGREGATION_DOCUMENT" Тогда
		Возврат Перечисления.ТипыДокументовМОТП.УведомлениеОбАгрегации;
	КонецЕсли;
	
	ВызватьИсключение
		СтрШаблон(
			НСтр("ru = 'Неизвестный тип документа: %1'"),
			ЗначениеПоиска);
	
КонецФункции

// Преобразовывает текстовое представление статуса документа ИС МОТП в значение перечисления.
//
// Параметры:
//  ЗначениеПоиска - Строка - значение для перекодировки
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыДокументовМОТП - статус документа МОТП.
//
Функция СтатусДокумента(Знач ЗначениеПоиска) Экспорт
	
	ЗначениеПоиска = ВРег(ЗначениеПоиска);
	
	Если ЗначениеПоиска = "CHECKED_OK" Тогда
		Возврат Перечисления.СтатусыДокументовМОТП.Проверен;
	КонецЕсли;
	
	ВызватьИсключение
		СтрШаблон(
			НСтр("ru = 'Неизвестный статус документа: %1'"),
			ЗначениеПоиска);
	
КонецФункции

#Область JWT

Функция РасшифроватьТокенJWT(Токен) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("РезультатРасшифровки", Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",          "");
	ВозвращаемоеЗначение.Вставить("Данные",               Неопределено);
	
	ЭлементыТокена = СтрРазделить(Токен, ".");
	Если ЭлементыТокена.Count() <> 3 Тогда
		ВозвращаемоеЗначение.ТекстОшибки = НСтр("ru = 'Токен не соответствует формату JWT'");
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ЭлементТокенаДанные = ЭлементыТокена[1];
	
	ВозвращаемоеЗначение.Данные = ОбщегоНазначенияИСМП.ТекстJSONВОбъект(
		ПолучитьСтрокуИзДвоичныхДанных(
			ДвоичныеДанныеЭлементаТокенаJWT(ЭлементТокенаДанные)));
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ДвоичныеДанныеЭлементаТокенаJWT(Знач Значение)
	
	Значение = СтрЗаменить(Значение, "-", "+");
	Значение = СтрЗаменить(Значение, "_", "/");
	
	Остаток = СтрДлина(Значение) % 4;

	Если Остаток = 1 Тогда
		Возврат Неопределено;
	ИначеЕсли Остаток = 2 Тогда
		Значение = Значение + "==";
	ИначеЕсли Остаток = 3 Тогда
		Значение = Значение + "=";
	КонецЕсли;
	
	Возврат Base64Значение(Значение);
	
КонецФункции

#КонецОбласти

#Область XDTO

Функция ВерсияПрограммы() Экспорт
	Возврат СтрШаблон("%1 (%2)", Метаданные.Синоним, Метаданные.Версия);
КонецФункции

Функция ИмяФайлаXDTO(ДанныеДокумента, МетаданныеXDTO) Экспорт
	Возврат СтрШаблон(
		"MTTPS-%1_%2_%3_%4",
		ОписаниеНомераТипаДанных(МетаданныеXDTO),
		Формат(ДанныеДокумента.Дата, "ДФ=yyyy-MM-dd;"),
		ДанныеДокумента.ИНН,
		Строка(Новый УникальныйИдентификатор));
КонецФункции

Функция ОписаниеНомераТипаДанных(МетаданныеXDTO)
	
	Если МетаданныеXDTO = Метаданные.ПакетыXDTO.АгрегацияМОТП Тогда
		Возврат "60";
	ИначеЕсли МетаданныеXDTO = Метаданные.ПакетыXDTO.ВыбытиеМОТП Тогда
		Возврат "90";
	Иначе
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Внутренняя ошибка. Не описан номер типа данных для %1'"), МетаданныеXDTO);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти
