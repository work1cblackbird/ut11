#Область ПрограммныйИнтерфейс


// При определении печатных форм запрещенных для формирования документа.
// 
// Параметры:
//  ЗапрещенныеКоманды - Массив из Строка - Запрещенные команды
//   * Строка
Процедура ПриОпределенииПечатныхФормЗапрещенныхДляФормированияДокумента(ЗапрещенныеКоманды) Экспорт

	ЗапрещенныеКоманды.Добавить("ЭТрН");
	ЗапрещенныеКоманды.Добавить("ЭПЛ");

КонецПроцедуры


// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа
// 
// Параметры:
//  Списки - Соответствие из КлючИЗначение - Списки:
// * Ключ - ОбъектМетаданных -
// * Значение - Булево -
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.Документы.ЭлектроннаяТранспортнаяНакладная, Истина);
	Списки.Вставить(Метаданные.Документы.ЭлектронныйЗаказНаряд, Истина);
	Списки.Вставить(Метаданные.Документы.ЭлектроннаяСопроводительнаяВедомость, Истина);
	Списки.Вставить(Метаданные.Документы.ЭлектронныйЗаказЗаявка, Истина);
	Списки.Вставить(Метаданные.Документы.ЭлектронныйДоговорФрахтования, Истина);
	Списки.Вставить(Метаданные.Документы.ЭлектронныйПутевойЛист, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.РеестрЭПД, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ВерсииТитуловЭПД, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ЗначенияРеквизитовДокументовЭПД, Истина);
	
КонецПроцедуры

// См. ЭлектронноеВзаимодействие.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных
// 
// Параметры:
//  Описание - Строка - Описание
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт

	Описание = Описание + "
	|Документ.ЭлектроннаяСопроводительнаяВедомость.Чтение.Организации
	|Документ.ЭлектроннаяСопроводительнаяВедомость.Изменение.Организации
	|Документ.ЭлектроннаяТранспортнаяНакладная.Чтение.Организации
	|Документ.ЭлектроннаяТранспортнаяНакладная.Изменение.Организации
	|Документ.ЭлектронныйЗаказНаряд.Чтение.Организации
	|Документ.ЭлектронныйЗаказНаряд.Изменение.Организации
	|Документ.ЭлектронныйЗаказЗаявка.Чтение.Организации
	|Документ.ЭлектронныйЗаказЗаявка.Изменение.Организации
	|Документ.ЭлектронныйДоговорФрахтования.Чтение.Организации
	|Документ.ЭлектронныйДоговорФрахтования.Изменение.Организации
	|Документ.ЭлектронныйПутевойЛист.Чтение.Организации
	|Документ.ЭлектронныйПутевойЛист.Изменение.Организации
	|РегистрСведений.РеестрЭПД.Чтение.Организации
	|РегистрСведений.РеестрЭПД.Изменение.Организации
	|РегистрСведений.ВерсииТитуловЭПД.Чтение.Организации
	|РегистрСведений.ВерсииТитуловЭПД.Изменение.Организации
	|РегистрСведений.ЗначенияРеквизитовДокументовЭПД.Чтение.Организации
	|РегистрСведений.ЗначенияРеквизитовДокументовЭПД.Изменение.Организации
	|";
	
КонецПроцедуры

// При заполнении параметров контейнера.
// 
// Параметры:
//  ПараметрыКонтейнера - Структура - Параметры контейнера
//  ДанныеОбъекта - Структура - Данные объекта
Процедура ПриЗаполненииПараметровКонтейнера(ПараметрыКонтейнера, ДанныеОбъекта) Экспорт
	
	ТипыРегламентовЭПД = ТипыРегламентовЭПД();
	Если ТипыРегламентовЭПД.Найти(ДанныеОбъекта.ТипРегламента) <> Неопределено Тогда
		ПараметрыКонтейнера.ВидСервисаЭДО = Перечисления.ВидыСервисовЭДО.ЭПД;
	КонецЕсли;	
	
КонецПроцедуры

// При получении списка шаблонов.
// 
// Параметры:
//  Шаблоны - Массив из Строка - Шаблоны
Процедура ПриПолученииСпискаШаблонов(Шаблоны) Экспорт
	
	Шаблоны.Добавить(Метаданные.РегламентныеЗадания.ОтправкаQRКодовЭПД.Имя);
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД.СервисВзаимодействияМПЭПД") Тогда
		МодульСервисВзаимодействияМПЭПД = ОбщегоНазначения.ОбщийМодуль("СервисВзаимодействияМПЭПД");
		ПолучениеСобытийМПЭПД = МодульСервисВзаимодействияМПЭПД.РегламентноеЗаданиеПолученияСобытийМПЭПД();
		Шаблоны.Добавить(ПолучениеСобытийМПЭПД.Имя);
	КонецЕсли;
	
КонецПроцедуры

// При определении псевдонимов обработчиков.
// 
// Параметры:
//  СоответствиеИменПсевдонимам - Соответствие из КлючИЗначение - Соответствие имен псевдонимам
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ОтправкаQRКодовЭПД.ИмяМетода);
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД.СервисВзаимодействияМПЭПД") Тогда
		МодульСервисВзаимодействияМПЭПД = ОбщегоНазначения.ОбщийМодуль("СервисВзаимодействияМПЭПД");
		ПолучениеСобытийМПЭПД = МодульСервисВзаимодействияМПЭПД.РегламентноеЗаданиеПолученияСобытийМПЭПД();
		СоответствиеИменПсевдонимам.Вставить(ПолучениеСобытийМПЭПД.ИмяМетода);
	КонецЕсли;
	
КонецПроцедуры

// При определении стандартных типов документов.
// 
// Параметры:
//  ТипыДокументов - Структура - Типы документов
Процедура ПриОпределенииСтандартныхТиповДокументов(ТипыДокументов) Экспорт
	
	ТипыДокументов.Вставить("ЭТрН", Перечисления.ТипыДокументовЭДО.ЭТрН);
	ТипыДокументов.Вставить("ЭЗН", Перечисления.ТипыДокументовЭДО.ЭЗН);
	ТипыДокументов.Вставить("ЭСВ", Перечисления.ТипыДокументовЭДО.ЭСВ);
	ТипыДокументов.Вставить("ЭЗЗ", Перечисления.ТипыДокументовЭДО.ЭЗЗ);
	ТипыДокументов.Вставить("ЭПЛ", Перечисления.ТипыДокументовЭДО.ЭПЛ);
	ТипыДокументов.Вставить("ЭДФ", Перечисления.ТипыДокументовЭДО.ЭДФ);
	
КонецПроцедуры


// Это прерывающее УОУ.
// 
// Параметры:
//  ТипЭлементаРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО - Тип элемента регламента
// 
// Возвращаемое значение:
//  Булево - Это прерывающее УОУ
Функция ЭтоПрерывающееУОУ(ТипЭлементаРегламента) Экспорт
	
	Возврат ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ОткП
			ИЛИ ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭЗН_ОткФщ
			ИЛИ ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭДФ_ОткФщ
			ИЛИ ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭПЛ_ОткМ;
	
КонецФункции

// Это не прерывающее УОУ.
// 
// Параметры:
//  ТипЭлементаРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО - Тип элемента регламента
// 
// Возвращаемое значение:
//  Булево - Это не прерывающее УОУ
Функция ЭтоНеПрерывающееУОУ(ТипЭлементаРегламента) Экспорт
	
	Возврат ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ОткТ3
			ИЛИ ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ОткГО;
	
КонецФункции

// Отклонение доступно.
// 
// Параметры:
//  ЭлементыРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО - Элементы регламента
//  ЭтоВходящийЭДО - Булево - Это входящий ЭДО
//  ТипЭлементаРегламентаУОУ - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО - Тип элемента регламента УОУ
// 
// Возвращаемое значение:
//  Булево - Отклонение доступно
Функция ОтклонениеДоступно(ЭлементыРегламента, ЭтоВходящийЭДО, ТипЭлементаРегламентаУОУ) Экспорт
	
	Возврат ЭтоВходящийЭДО = Истина 
		Или ТипЭлементаРегламентаУОУ = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ОткГО
		Или ТипЭлементаРегламентаУОУ = Перечисления.ТипыЭлементовРегламентаЭДО.ЭПЛ_ОткМ;
	
КонецФункции

// Это тип регламента ЭПД.
// 
// Параметры:
//  ТипРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО - Тип регламента
// 
// Возвращаемое значение:
//  Булево - Это тип регламента ЭПД
Функция ЭтоТипРегламентаЭПД(ТипРегламента) Экспорт
	
	Возврат ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭТрН
			Или ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭЗН
			Или ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭСВ
			Или ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭЗЗ
			Или ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭПЛ
			Или ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭДФ;
	
КонецФункции

// Дополнить запрос выборки документов для формирования ответа.
// 
// Параметры:
//  ТекстыЗапросов - Массив из Строка - Тексты запросов
//  Параметры - Структура - Параметры запроса
//  ДляЭД - Булево - Для ЭД
Процедура ДополнитьЗапросВыборкиДокументовДляФормированияОтвета(ТекстыЗапросов, Параметры, ДляЭД = Ложь) Экспорт
	
	// В БЭД несмотря на настройки по-умолчанию для типа документа, 
	// когда открывается форма настроек с контрагентом - эта галка по-умолчанию не проставляется
	// т.е. если пользователь сам ее не установит, то отправить ответные титулы не сможет,
	// сделаем исключение для ЭПД
	Для ИтераторЦикла = 0 По ТекстыЗапросов.ВГраница() Цикл
		ТекстыЗапросов[ИтераторЦикла] = СтрЗаменить(ТекстыЗапросов[ИтераторЦикла], "ЭлектронныйДокументВходящийЭДО.ТребуетсяПодтверждение", 
			"(ЭлектронныйДокументВходящийЭДО.ТребуетсяПодтверждение
			|	ИЛИ ЭлектронныйДокументВходящийЭДО.ТипРегламента В (&ТипыРегламентов))");		
	КонецЦикла; 
	
	Если ДляЭД = Ложь Тогда
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ЭлектронныеДокументыОбъектовУчета.ЭлектронныйДокумент КАК ЭлектронныйДокумент
			|ИЗ
			|	ЭлектронныеДокументыОбъектовУчета КАК ЭлектронныеДокументыОбъектовУчета
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
			|		ПО ЭлектронныеДокументыОбъектовУчета.ЭлектронныйДокумент = ЭлектронныйДокументИсходящийЭДО.Ссылка
			|		И ЭлектронныйДокументИсходящийЭДО.ТипРегламента В (&ТипыРегламентов)";	
	Иначе
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ЭлектронныйДокументИсходящийЭДО.Ссылка КАК ЭлектронныйДокумент
			|ИЗ
			|	Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
			|ГДЕ
			|	ЭлектронныйДокументИсходящийЭДО.Ссылка В (&ОтборЭлектронныеДокументы)
			|	И ЭлектронныйДокументИсходящийЭДО.ТипРегламента В (&ТипыРегламентов)";	
	КонецЕсли;
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	Параметры.Вставить("ТипыРегламентов", ТипыРегламентовЭПД());
	
КонецПроцедуры

// При определении типа регламента УОУ.
// 
// Параметры:
//  ТипЭлементаРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО - Тип элемента регламента
//  ТипЭлементаРегламентаУОУ - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО - Тип элемента регламента УОУ
Процедура ПриОпределенииТипаРегламентаУОУ(Знач ТипЭлементаРегламента, ТипЭлементаРегламентаУОУ) Экспорт
	
	Если ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул1 Тогда
		ТипЭлементаРегламентаУОУ = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ОткП;
	ИначеЕсли ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул3 Тогда
		ТипЭлементаРегламентаУОУ = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ОткТ3;	
	ИначеЕсли ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул5 Тогда
		ТипЭлементаРегламентаУОУ = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ОткГО;
	ИначеЕсли ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭЗН_Титул1 Тогда
		ТипЭлементаРегламентаУОУ = Перечисления.ТипыЭлементовРегламентаЭДО.ЭЗН_ОткФщ;
	ИначеЕсли ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭДФ_Титул1 Тогда
		ТипЭлементаРегламентаУОУ = Перечисления.ТипыЭлементовРегламентаЭДО.ЭДФ_ОткФщ;
	ИначеЕсли ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул1 Тогда
		ТипЭлементаРегламентаУОУ = Перечисления.ТипыЭлементовРегламентаЭДО.ЭПЛ_ОткМ;
	КонецЕсли;
	
КонецПроцедуры

// При получении направления настроек отправки.
// 
// Параметры:
//  ОписанияОбъектовУчета - Массив из Структура - Описания объектов учета
//  НаправленияНастроекОтправки - Массив из ПеречислениеСсылка.НаправленияЭДО - Направления настроек отправки
Процедура ПриПолученииНаправленияНастроекОтправки(Знач ОписанияОбъектовУчета, НаправленияНастроекОтправки) Экспорт
	
	ВсеДокументыЭПД = Ложь;
	Для Каждого ОписаниеОбъектаУчета Из ОписанияОбъектовУчета Цикл
		Если ЭтоДокументЭПД(ОписаниеОбъектаУчета.ТипДокумента) Тогда
			ВсеДокументыЭПД = Истина;
		Иначе
			ВсеДокументыЭПД = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ВсеДокументыЭПД = Истина Тогда
		НаправленияНастроекОтправки.Добавить(Перечисления.НаправленияЭДО.Входящий);
	КонецЕсли;
	
КонецПроцедуры

// Получает параметры настроек ЭДО
// Параметры:
// 	ВыбираемыеПоля - Строка - выбираемые поля через запятую
// 				   - Массив из Строка - массив выбираемых полей
// 	Отбор - см. НовыйОтборНастроекОтправки
// Возвращаемое значение:
// 	Структура
Функция НастройкиУчетнойЗаписиСОтбором(ВыбираемыеПоля, Отбор) Экспорт
	
	Если ТипЗнч(ВыбираемыеПоля) = Тип("Строка") Тогда
		Результат = Новый Структура(ВыбираемыеПоля);
	Иначе
		Результат = Новый Структура(СтрСоединить(ВыбираемыеПоля, ","));	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	&ВыбираемыеПоля
		|ИЗ
		|	РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам КАК НастройкиОтправкиЭлектронныхДокументовПоВидам
		|ГДЕ
		|	НЕ НастройкиОтправкиЭлектронныхДокументовПоВидам.ОбменБезПодписи
		|	И &ПоляУсловия";
		
	ПоляУсловия = Новый Массив;
	Для Каждого КиЗ Из Отбор Цикл
		ПоляУсловия.Добавить(КиЗ.Ключ + "=&" + КиЗ.Ключ);
		Запрос.УстановитьПараметр(КиЗ.Ключ, КиЗ.Значение);
	КонецЦикла;
	Запрос.Текст = ОбщегоНазначенияБЭД.ТекстЗапросаИзШаблона(Запрос.Текст, "", 
							ВыбираемыеПоля, ПоляУсловия, "НастройкиОтправкиЭлектронныхДокументовПоВидам");
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Регламент ЭПД.
// 
// Параметры:
//  ТипРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО - Тип регламента
// 
// Возвращаемое значение:
//  CommonModule.РегламентыЭПД_ЭТрН, CommonModule.РегламентыЭПД_ЭЗН, CommonModule.РегламентыЭПД_ЭСВ, CommonModule.РегламентыЭПД_ЭЗЗ, CommonModule.РегламентыЭПД_ЭПЛ, CommonModule.РегламентыЭПД_ЭДФ, Неопределено - Регламент ЭПД
Функция РегламентЭПД(ТипРегламента) Экспорт
	
	Если ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭТрН Тогда
		Возврат ОбщегоНазначения.ОбщийМодуль("РегламентыЭПД_ЭТрН");
	ИначеЕсли ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭЗН Тогда
		Возврат ОбщегоНазначения.ОбщийМодуль("РегламентыЭПД_ЭЗН");
	ИначеЕсли ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭСВ Тогда
		Возврат ОбщегоНазначения.ОбщийМодуль("РегламентыЭПД_ЭСВ");
	ИначеЕсли ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭЗЗ Тогда
		Возврат ОбщегоНазначения.ОбщийМодуль("РегламентыЭПД_ЭЗЗ");
	ИначеЕсли ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭПЛ Тогда
		Возврат ОбщегоНазначения.ОбщийМодуль("РегламентыЭПД_ЭПЛ");
	ИначеЕсли ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭДФ Тогда
		Возврат ОбщегоНазначения.ОбщийМодуль("РегламентыЭПД_ЭДФ");
	Иначе
		Возврат Неопределено;
	КонецЕсли;
		
КонецФункции

// Возвращает настройки отправки.
// 
// Параметры:
// 	КлючНастроекОтправки - см. НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтправки
// Возвращаемое значение:
// 	- Неопределено - настройки не существуют
// 	- См. НастройкиЭДОКлиентСервер.НоваяНастройкаОтправки.
Функция НастройкиОтправкиПоКлючу(КлючНастроекОтправки) Экспорт
	
	НастройкаОтправки = НастройкиЭДОКлиентСервер.НоваяНастройкаОтправки();
		
	ТипДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		КлючНастроекОтправки.ВидДокумента, "ТипДокумента");
	
	Если ИспользоватьЭПД()
		И ТипДокументаОтправляетсяВГИСЭПД(ТипДокумента) Тогда
	Иначе
		НастройкаОтправки = Неопределено;
	КонецЕсли;
	
	Возврат НастройкаОтправки;
	
КонецФункции

// Описание сообщения отправителя.
// 
// Параметры:
//  ОбъектУчетаИлиЭД - ДокументСсылка - Объект учета или ЭД
//  НастройкиОтправки - Структура - Настройки отправки
// 
// Возвращаемое значение:
//  Структура -- ЭлектронныеДокументыЭДО.НовоеОписаниеСообщения() - Описание сообщения отправителя:
Функция ОписаниеСообщенияОтправителя(ОбъектУчетаИлиЭД, НастройкиОтправки = Неопределено) Экспорт
	
	ОписаниеСообщения = ЭлектронныеДокументыЭДО.НовоеОписаниеСообщения();
	
	ОбъектУчета = Неопределено;
	Если ТипЗнч(ОбъектУчетаИлиЭД) = Тип("ДокументСсылка.ЭлектронныйДокументВходящийЭДО")
		Или ТипЗнч(ОбъектУчетаИлиЭД) = Тип("ДокументСсылка.ЭлектронныйДокументИсходящийЭДО") Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ЭлектронныйДокумент", ОбъектУчетаИлиЭД);
		Запрос.Текст = "ВЫБРАТЬ
		               |	ОбъектыУчетаДокументовЭДО.ОбъектУчета КАК ОбъектУчета
		               |ИЗ
		               |	РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
		               |ГДЕ
		               |	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент
		               |	И ОбъектыУчетаДокументовЭДО.Актуальный = ИСТИНА";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда 
			ОбъектУчета = Выборка.ОбъектУчета;			
		КонецЕсли;
		СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектУчетаИлиЭД, 
			"ИдентификаторОрганизации, ИдентификаторКонтрагента, ВидДокумента");
		ИдентификаторОтправителя = СтруктураРеквизитов.ИдентификаторОрганизации;
		ИдентификаторПолучателя = СтруктураРеквизитов.ИдентификаторКонтрагента;
		ВидДокумента = СтруктураРеквизитов.ВидДокумента;
		Направление = Перечисления.НаправленияЭДО.Исходящий;
	Иначе
		Если ТипЗнч(ОбъектУчетаИлиЭД) = Тип("Массив") Тогда
			ОбъектУчета = ОбъектУчетаИлиЭД[0];
		Иначе
			ОбъектУчета = ОбъектУчетаИлиЭД;	
		КонецЕсли;
		ИдентификаторОтправителя = НастройкиОтправки.ИдентификаторОтправителя;
		ИдентификаторПолучателя = НастройкиОтправки.ИдентификаторПолучателя;
		ВидДокумента = НастройкиОтправки.ВидДокумента;
		Направление = ?(ОбъектУчета.ЭтоВходящий, Перечисления.НаправленияЭДО.Входящий, Перечисления.НаправленияЭДО.Исходящий);
	КонецЕсли;

	Если ОбъектУчета <> Неопределено Тогда
		Данные = ФорматыЭДО.НовыеДанныеДляФормированияПрикладногоДокумента();	
		
		Данные.УникальныйИдентификатор = Строка(Новый УникальныйИдентификатор);
		Данные.ИдентификаторОтправителя = ИдентификаторОтправителя;
		Данные.ИдентификаторПолучателя = ИдентификаторПолучателя;
		
		ДанныеСообщения = СформироватьДанныеПрикладногоДокумента(ОбъектУчета, Данные);
		
		ОписаниеСообщения.ТипЭлементаРегламента = ОбъектУчета.ТекущийТитул; 
		ОписаниеСообщения.ВидСообщения = ВидДокумента;
		ОписаниеСообщения.Направление = Направление;   
		ОписаниеСообщения.Данные = ДанныеСообщения;
	КонецЕсли;
	
	//@skip-check constructor-function-return-section
	Возврат ОписаниеСообщения;
	
КонецФункции

// Соответствие титулов и шагов.
// 
// Параметры:
//  ДокументОбъект - ДокументОбъект - Документ объект
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение - Соответствие титулов и шагов
Функция СоответствиеТитуловИШагов(ДокументОбъект = Неопределено) Экспорт
	
	СоответствиеТитулов = Новый Соответствие;
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЭлектроннаяТранспортнаяНакладная")
		Или ДокументОбъект = Неопределено Тогда
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул1, НСтр("ru='Оформление'"));
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул2, НСтр("ru='Погрузка'"));
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул3, НСтр("ru='Приемка'"));
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул4, НСтр("ru='Разгрузка'"));
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул5, НСтр("ru='Согласование оплаты'"));
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул6, НСтр("ru='Подтверждение оплаты'"));
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул7, НСтр("ru='Переадресовка'"));
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул8, НСтр("ru='Замена водителя/ТС'"));
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул9, НСтр("ru='Указание о переадресовке'"));
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ДопТитул7, НСтр("ru='Переадресовка'"));
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ДопТитул8, НСтр("ru='Замена водителя/ТС'"));
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ДопТитул3, НСтр("ru='Приемка'"));
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ДопТитул4, НСтр("ru='Разгрузка'"));
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ДопТитул9, НСтр("ru='Указание о переадресовке'"));
	КонецЕсли;
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЭлектронныйЗаказНаряд")
		Или ДокументОбъект = Неопределено Тогда
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭЗН_Титул1, НСтр("ru='Оформление'"));
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭЗН_Титул2, НСтр("ru='Подтверждение'"));
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭЗН_Титул3, НСтр("ru='Подача'"));
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭЗН_Титул4, НСтр("ru='Возврат'"));
	КонецЕсли;
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЭлектроннаяСопроводительнаяВедомость")
		Или ДокументОбъект = Неопределено Тогда
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул1_1, НСтр("ru='Оформление'"));
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул1_2, НСтр("ru='Оформление'"));
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул1_3, НСтр("ru='Передача груженого контейнера'"));
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул1_4, НСтр("ru='Получение порожнего контейнера'"));
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул1_5, НСтр("ru='Оформление'"));
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул2_1, НСтр("ru='Получение порожнего контейнера'"));
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул2_2, НСтр("ru='Передача груженого контейнера'"));		
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул3_1, НСтр("ru='Приемка контейнера'"));
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул3_2, НСтр("ru='Передача пустого контейнера'"));	
	КонецЕсли;
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЭлектронныйЗаказЗаявка")
		Или ДокументОбъект = Неопределено Тогда
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭЗЗ_Титул1, НСтр("ru='Оформление'"));
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭЗЗ_Титул2, НСтр("ru='Подтверждение'"));
	КонецЕсли;
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЭлектронныйПутевойЛист")
		Или ДокументОбъект = Неопределено Тогда
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул1, НСтр("ru='Оформление'"));
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул2, НСтр("ru='Медосмотр'"));
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул3, НСтр("ru='Контроль транспорта'"));
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул4, НСтр("ru='Показания (выезд)'"));
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул5, НСтр("ru='Показания (заезд)'"));
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул6, НСтр("ru='Медосмотр (после рейса)'"));
	КонецЕсли;
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЭлектронныйДоговорФрахтования")
		Или ДокументОбъект = Неопределено Тогда
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭДФ_Титул1, НСтр("ru='Оформление'"));
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭДФ_Титул2, НСтр("ru='Подтверждение'"));
	КонецЕсли;
	
	Возврат СоответствиеТитулов;
	
КонецФункции

// Установить текущий шаг (для отражения в форме списка).
// 
// Параметры:
//  ДокументОбъект - ДокументОбъект - Документ объект
Процедура УстановитьТекущийШаг(ДокументОбъект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СоответствиеТитулов = Новый Соответствие;
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЭлектроннаяТранспортнаяНакладная") Тогда
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул1, НСтр("ru='Оформление'"));
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул2, НСтр("ru='Погрузка'"));
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул3, НСтр("ru='Приемка'"));
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул4, НСтр("ru='Разгрузка'"));
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул5, НСтр("ru='Согласование оплаты'"));
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул6, НСтр("ru='Подтверждение оплаты'"));
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул7, НСтр("ru='Переадресовка'"));
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул8, НСтр("ru='Замена водителя/ТС'"));
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул9, НСтр("ru='Указание о переадресовке'"));
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ДопТитул7, НСтр("ru='Переадресовка'"));
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ДопТитул8, НСтр("ru='Замена водителя/ТС'"));
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ДопТитул3, НСтр("ru='Приемка'"));
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ДопТитул4, НСтр("ru='Разгрузка'"));
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ДопТитул9, НСтр("ru='Указание о переадресовке'"));
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЭлектронныйЗаказНаряд") Тогда
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭЗН_Титул1, НСтр("ru='Оформление'"));
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭЗН_Титул2, НСтр("ru='Подтверждение'"));
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭЗН_Титул3, НСтр("ru='Подача'"));
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭЗН_Титул4, НСтр("ru='Возврат'"));
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЭлектроннаяСопроводительнаяВедомость") Тогда
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул1_1, НСтр("ru='Оформление'"));
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул1_2, НСтр("ru='Оформление'"));
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул1_3, НСтр("ru='Передача груженого контейнера'"));
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул1_4, НСтр("ru='Получение порожнего контейнера'"));
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул1_5, НСтр("ru='Оформление'"));
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул2_1, НСтр("ru='Получение порожнего контейнера'"));
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул2_2, НСтр("ru='Передача груженого контейнера'"));		
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул3_1, НСтр("ru='Приемка контейнера'"));
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул3_2, НСтр("ru='Передача пустого контейнера'"));	
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЭлектронныйЗаказЗаявка") Тогда
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭЗЗ_Титул1, НСтр("ru='Оформление'"));
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭЗЗ_Титул2, НСтр("ru='Подтверждение'"));
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЭлектронныйПутевойЛист") Тогда
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул1, НСтр("ru='Оформление'"));
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул2, НСтр("ru='Медосмотр'"));
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул3, НСтр("ru='Контроль транспорта'"));
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул4, НСтр("ru='Показания (выезд)'"));
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул5, НСтр("ru='Показания (заезд)'"));
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул6, НСтр("ru='Медосмотр (после рейса)'"));
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЭлектронныйДоговорФрахтования") Тогда
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭДФ_Титул1, НСтр("ru='Оформление'"));
		СоответствиеТитулов.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭДФ_Титул2, НСтр("ru='Подтверждение'"));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОбъектУчета", ДокументОбъект.Ссылка);
	МассивТитулов = Новый Массив;
	Для Каждого КиЗ Из СоответствиеТитулов Цикл
		МассивТитулов.Добавить(КиЗ.Ключ);
	КонецЦикла;
	Запрос.УстановитьПараметр("МассивТитулов", МассивТитулов);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	СообщениеЭДО.ТипЭлементаРегламента КАК ТипЭлементаРегламента,
	|	СообщениеЭДО.Статус
	|ИЗ
	|	РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
	|		ПО ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент = СообщениеЭДО.ЭлектронныйДокумент
	|ГДЕ
	|	ОбъектыУчетаДокументовЭДО.ОбъектУчета = &ОбъектУчета
	|	И ОбъектыУчетаДокументовЭДО.Актуальный = ИСТИНА
	|	И СообщениеЭДО.ТипЭлементаРегламента В (&МассивТитулов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СообщениеЭДО.МоментВремени УБЫВ";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПоследнийТитул = Неопределено;
	
	Если Выборка.Следующий() Тогда
		ПоследнийТитул = Выборка.ТипЭлементаРегламента;
		ПоследнийТитулВыполнен = Выборка.Статус = Перечисления.СтатусыСообщенийЭДО.Получен
									Или Выборка.Статус = Перечисления.СтатусыСообщенийЭДО.Отправлен;
	КонецЕсли;
	 
	Если ЗначениеЗаполнено(ДокументОбъект.ТекущийТитул) Тогда
		Если ДокументОбъект.ТекущийТитул <> ПоследнийТитул Тогда
			ПоследнийТитул = ДокументОбъект.ТекущийТитул;
			ПоследнийТитулВыполнен = Ложь;
		КонецЕсли;
	ИначеЕсли ПоследнийТитул = Неопределено 
		И ЗначениеЗаполнено(ДокументОбъект.ТекущийПолученныйТитул) Тогда
		ПоследнийТитул = ДокументОбъект.ТекущийПолученныйТитул;
		ПоследнийТитулВыполнен = Истина;	
	КонецЕсли;
	
	Если ПоследнийТитул <> Неопределено Тогда
		ДокументОбъект.ТекущийШаг = СоответствиеТитулов.Получить(ПоследнийТитул);
		ДокументОбъект.ТекущийШагВыполнен = ПоследнийТитулВыполнен;
	КонецЕсли;
	
КонецПроцедуры

// Данные реквизитов ЭПД.
// 
// Параметры:
//  Документ - ДокументСсылка - Документ
//  Титул - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО - Титул
//  ВсеВерсии - Булево - Все версии
// 
// Возвращаемое значение:
//  Структура
Функция ДанныеРеквизитовЭПД(Документ, Титул = Неопределено, ВсеВерсии = Ложь) Экспорт
	
	Если ВсеВерсии = Истина Тогда
		Результат = Новый Массив;	
	Иначе
		Результат = Новый Структура;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("Организация", Документ.Организация);
	Запрос.УстановитьПараметр("Титул", Титул);
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗначенияРеквизитовДокументовЭПД.НомерВерсии КАК НомерВерсии,
	|	ЗначенияРеквизитовДокументовЭПД.ИмяТабличнойЧасти КАК ИмяТабличнойЧасти,
	|	ЗначенияРеквизитовДокументовЭПД.НомерСтрокиРеквизита КАК НомерСтрокиРеквизита,
	|	ЗначенияРеквизитовДокументовЭПД.ИмяРеквизита КАК ИмяРеквизита,
	|	ЗначенияРеквизитовДокументовЭПД.ЗначениеРеквизита,
	|	ЗначенияРеквизитовДокументовЭПД.ЗначениеРеквизитаСсылка,
	|	ЗначенияРеквизитовДокументовЭПД.ЗначениеРеквизитаСтрока,
	|	ЗначенияРеквизитовДокументовЭПД.ТипРеквизита
	|ИЗ
	|	РегистрСведений.ЗначенияРеквизитовДокументовЭПД КАК ЗначенияРеквизитовДокументовЭПД
	|ГДЕ
	|	ЗначенияРеквизитовДокументовЭПД.Документ = &Документ
	|	И ЗначенияРеквизитовДокументовЭПД.Организация = &Организация"
	+ ?(Титул = Неопределено, "", "
	|	И ЗначенияРеквизитовДокументовЭПД.Титул = &Титул") + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерВерсии УБЫВ,
	|	ИмяТабличнойЧасти,
	|	НомерСтрокиРеквизита
	|ИТОГИ
	|ПО
	|	НомерВерсии,
	|	ИмяТабличнойЧасти,
	|	НомерСтрокиРеквизита";
	
	ВыборкаНомерВерсии = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаНомерВерсии.Следующий() Цикл
		СтруктураРеквизитов = Новый Структура;
		ВыборкаИмяТЧ = ВыборкаНомерВерсии.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаИмяТЧ.Следующий() Цикл
			Если ВыборкаИмяТЧ.ИмяТабличнойЧасти = "" Тогда
				ВыборкаНомерСтроки = ВыборкаИмяТЧ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				ВыборкаНомерСтроки.Следующий();
				Выборка = ВыборкаНомерСтроки.Выбрать();
				Пока Выборка.Следующий() Цикл
					Если Выборка.ТипРеквизита = Перечисления.ТипыРеквизитовЭПД.СсылочныйТип Тогда
						СтруктураРеквизитов.Вставить(Выборка.ИмяРеквизита, Выборка.ЗначениеРеквизитаСсылка);
					ИначеЕсли Выборка.ТипРеквизита = Перечисления.ТипыРеквизитовЭПД.НеограниченнаяСтрока Тогда
						СтруктураРеквизитов.Вставить(Выборка.ИмяРеквизита, Выборка.ЗначениеРеквизитаСтрока);	
					Иначе
						СтруктураРеквизитов.Вставить(Выборка.ИмяРеквизита, Выборка.ЗначениеРеквизита);	
					КонецЕсли;
				КонецЦикла;
			Иначе
				ВыборкаНомерСтроки = ВыборкаИмяТЧ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				МассивСтрок = Новый Массив;
				Пока ВыборкаНомерСтроки.Следующий() Цикл
					Выборка = ВыборкаНомерСтроки.Выбрать();
					СтруктураСтроки = Новый Структура;
					Пока Выборка.Следующий() Цикл
						Если Выборка.ТипРеквизита = Перечисления.ТипыРеквизитовЭПД.СсылочныйТип Тогда
							СтруктураСтроки.Вставить(Выборка.ИмяРеквизита, Выборка.ЗначениеРеквизитаСсылка);
						ИначеЕсли Выборка.ТипРеквизита = Перечисления.ТипыРеквизитовЭПД.НеограниченнаяСтрока Тогда
							СтруктураСтроки.Вставить(Выборка.ИмяРеквизита, Выборка.ЗначениеРеквизитаСтрока);	
						Иначе
							СтруктураСтроки.Вставить(Выборка.ИмяРеквизита, Выборка.ЗначениеРеквизита);	
						КонецЕсли;	
					КонецЦикла;
					МассивСтрок.Добавить(СтруктураСтроки);
				КонецЦикла;	
				СтруктураРеквизитов.Вставить(ВыборкаИмяТЧ.ИмяТабличнойЧасти, МассивСтрок);
			КонецЕсли;
		КонецЦикла;	
		Если ВсеВерсии = Истина Тогда
			Результат.Добавить(СтруктураРеквизитов);	
		Иначе
			Результат = СтруктураРеквизитов;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	//@skip-check constructor-function-return-section
	Возврат Результат;

КонецФункции


// Двоичные данные документа ЭПД.
// 
// Параметры:
//  Объект - Неопределено, Произвольный, ДокументСсылка - Объект
//  Данные - Неопределено, Структура - Данные:
// * УникальныйИдентификатор - УникальныйИдентификатор
// * ИдентификаторОтправителя - Строка -
// * ИдентификаторПолучателя - Строка -
// * ПрикладнойТипДокумента - Произвольный -
//  АдресВоВременномХранилище - Строка - Адрес во временном хранилище
// 
// Возвращаемое значение:
//  Структура - Двоичные данные документа ЭПД:
// * ДвоичныеДанные - ДвоичныеДанные
// * ИмяФайла - Строка
// * Ошибка - Булево
Функция ДвоичныеДанныеДокументаЭПД(Объект, Данные = Неопределено, АдресВоВременномХранилище = Неопределено) Экспорт
	
	Результат = Новый Структура("ДвоичныеДанные, ИмяФайла, Ошибка");
	
	Если ЗначениеЗаполнено(Объект.ТекущийТитул) = Ложь Тогда
		Возврат Результат;	
	КонецЕсли;
	
	ДанныеФормирования = ДанныеРеквизитовЭПД(Объект, Объект.ТекущийТитул);
	
	ИнформацияПоПрефиксамТитула = ОбменСГИСЭПДКлиентСервер.ПрефиксТитулаПоЭлементуРегламентаЭДО(Объект.ТекущийТитул);
	ПрефиксТитула = ИнформацияПоПрефиксамТитула.ВПрограмме;
	
	МассивВозможныхПустыхЗначений = Новый Массив;
	ТипДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидДокумента, "ТипДокумента");
	Если ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭТрН Тогда
		МенеджерОбъекта = Документы.ЭлектроннаяТранспортнаяНакладная;
		
		МассивВозможныхПустыхЗначений.Добавить("//Файл/Документ/СодИнфГО/СвГруз/ОпГруз/Габар/ВысЗнач");
		МассивВозможныхПустыхЗначений.Добавить("//Файл/Документ/СодИнфГО/СвГруз/ОпГруз/Габар/ДлЗнач");
		МассивВозможныхПустыхЗначений.Добавить("//Файл/Документ/СодИнфГО/СвГруз/ОпГруз/Габар/ШирЗнач");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭЗН Тогда
		МенеджерОбъекта = Документы.ЭлектронныйЗаказНаряд;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭСВ Тогда
		МенеджерОбъекта = Документы.ЭлектроннаяСопроводительнаяВедомость;
		
		МассивВозможныхПустыхЗначений.Добавить("//Файл/Документ/СодСВИнфПрв/СвКонтейн/ПрТаблПломб");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭЗЗ Тогда
		МенеджерОбъекта = Документы.ЭлектронныйЗаказЗаявка;
		
		МассивВозможныхПустыхЗначений.Добавить("//Файл/Документ/СодИнфГО/ОпГруз/РазмерГрМест/ВысЗнач");
		МассивВозможныхПустыхЗначений.Добавить("//Файл/Документ/СодИнфГО/ОпГруз/РазмерГрМест/ДлЗнач");
		МассивВозможныхПустыхЗначений.Добавить("//Файл/Документ/СодИнфГО/ОпГруз/РазмерГрМест/ШирЗнач");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭПЛ Тогда
		МенеджерОбъекта = Документы.ЭлектронныйПутевойЛист;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭДФ Тогда
		МенеджерОбъекта = Документы.ЭлектронныйДоговорФрахтования;
	КонецЕсли;
	
	ИмяСхемы = ПрефиксТитула;
	Если СтрНачинаетсяС(ИмяСхемы, "Доп") Тогда
		ИмяСхемы = Сред(ИмяСхемы, 4);
	КонецЕсли;
	МакетСхема = МенеджерОбъекта.ПолучитьМакет("Схема" + ИмяСхемы);
	МакетСоответствиеИменОбщий = МенеджерОбъекта.ПолучитьМакет("СоответствиеИменРеквизитов");
	МакетСоответствиеИмен = МакетСоответствиеИменОбщий.ПолучитьОбласть(ПрефиксТитула);
	
	СтруктураСФабрикой = СоздатьФабрикуПоСхемеXSD(МакетСхема.ПолучитьТекст());
	
	Если СтруктураСФабрикой.targetNamespace <> Неопределено Тогда
		Пакет = СтруктураСФабрикой.Фабрика.Пакеты.Получить(СтруктураСФабрикой.targetNamespace);
	ИначеЕсли СтруктураСФабрикой.xmlns <> Неопределено Тогда
		Пакет = СтруктураСФабрикой.Фабрика.Пакеты.Получить(СтруктураСФабрикой.xmlns);
	Иначе
		Пакет = СтруктураСФабрикой.Фабрика.Пакеты[0];
	КонецЕсли;
	
	КорневоеСвойство = Пакет.КорневыеСвойства[0];
	ТипXDTOФайла = КорневоеСвойство.Тип;
	ОбъектXDTO = СтруктураСФабрикой.Фабрика.Создать(ТипXDTOФайла);
	
	ОбластьПерваяКолонка = МакетСоответствиеИмен.Область(,1,МакетСоответствиеИмен.ВысотаТаблицы,1);
	КоличествоСтрокМакета = МакетСоответствиеИмен.ВысотаТаблицы;
	ПоследовательностьТаблиц = Новый Массив;
	Для НомерСтроки = 1 По КоличествоСтрокМакета Цикл
		ИмяРеквизита = МакетСоответствиеИмен.Область(НомерСтроки, 1).Текст;
		ЗначениеРеквизита = Неопределено;
		Если СтрНайти(ИмяРеквизита, ".") Тогда
			Продолжить;
		КонецЕсли;
		Если ДанныеФормирования.Свойство(ИмяРеквизита, ЗначениеРеквизита) = Ложь Тогда   
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(ЗначениеРеквизита) = Тип("Массив") Тогда
			ПоследовательностьТаблиц.Добавить(ИмяРеквизита);
			Продолжить;
		КонецЕсли;
		
		Узел = МакетСоответствиеИмен.Область(НомерСтроки, 2).Текст;
		Если ЗначениеЗаполнено(ЗначениеРеквизита) Или МассивВозможныхПустыхЗначений.Найти(Узел) <> Неопределено Тогда	
			Если СтрЗаканчиваетсяНа(ИмяРеквизита, "ИспользуетсяUTC") Тогда
				СвязанныйРеквизит = Неопределено;
				ДанныеФормирования.Свойство(СтрЗаменить(ИмяРеквизита, "ИспользуетсяUTC", ""), СвязанныйРеквизит);
				Если ЗначениеЗаполнено(СвязанныйРеквизит) = Ложь Тогда
					Продолжить;	
				КонецЕсли; 	
			КонецЕсли;		
			МассивИменУзлов = СтрРазделить(Узел, "/", Ложь);
			ИнициализироватьУзелРекурсивно(МассивИменУзлов, 1, ЗначениеРеквизита, КорневоеСвойство, ОбъектXDTO, СтруктураСФабрикой.Фабрика);
		КонецЕсли;
	КонецЦикла;
		
	КартаТаблиц = КартаТаблиц(ДанныеФормирования, ПрефиксТитула, МакетСоответствиеИмен, ПоследовательностьТаблиц);
		
	СоответствиеИндексСтроки = Новый Соответствие;
	УровеньТаблицы = -1;
	Для Каждого СтруктураТаблиц Из КартаТаблиц Цикл
	    УровеньТаблицы = УровеньТаблицы + 1;
		Для Каждого КиЗ Из СтруктураТаблиц Цикл
			ОписаниеТаблицы = КиЗ.Значение;
			МассивРодителей = ОписаниеТаблицы.МассивРодителей;
			УзелТЧ = ОписаниеТаблицы.УзелТЧ;
				
			НомерСтроки = 0;
			Для Каждого СтрТЧ Из ДанныеФормирования[КиЗ.Ключ] Цикл
				Если УровеньТаблицы = 0 Тогда
					НомерСтроки = НомерСтроки + 1;
					ИндексСтроки = НомерСтроки - 1;
				ИначеЕсли СтрТЧ.Свойство("ИдентификаторСтрокиРодителя") Тогда
					НомерСтроки = НомерСтроки + 1;
					ИндексСтроки = СоответствиеИндексСтроки.Получить("Счетчик" + КиЗ.Ключ + СтрТЧ.ИдентификаторСтрокиРодителя);
					Если ИндексСтроки = Неопределено Тогда
						ИндексСтроки = 0;
						СоответствиеИндексСтроки.Вставить("Счетчик" + КиЗ.Ключ + СтрТЧ.ИдентификаторСтрокиРодителя, ИндексСтроки);
					Иначе
						ИндексСтроки = ИндексСтроки + 1;
						СоответствиеИндексСтроки.Вставить("Счетчик" + КиЗ.Ключ + СтрТЧ.ИдентификаторСтрокиРодителя, ИндексСтроки);
					КонецЕсли;
				Иначе
					Продолжить;
				КонецЕсли;
				Если ОписаниеТаблицы.ЕстьИдентификаторСтроки = Истина Тогда
					СоответствиеИндексСтроки.Вставить(КиЗ.Ключ + СтрТЧ.ИдентификаторСтроки, ИндексСтроки);
				КонецЕсли;
				
				ОтказИнициализацииСтроки = Ложь;
			    Для Каждого Колонка Из СтрТЧ Цикл
					ОбластьКолонкаНайдено = МакетСоответствиеИмен.НайтиТекст(КиЗ.Ключ + "." + СтрЗаменить(Колонка.Ключ, КиЗ.Ключ + "_", ""), , 
												ОбластьПерваяКолонка, Ложь, Истина, Истина, Ложь);	
					Если ОбластьКолонкаНайдено <> Неопределено Тогда
						УзелКолонка = МакетСоответствиеИмен.Область(ОбластьКолонкаНайдено.Верх, 2).Текст;
						Если ЗначениеЗаполнено(Колонка.Значение) Или МассивВозможныхПустыхЗначений.Найти(УзелКолонка) <> Неопределено Тогда
							Узел = СтрЗаменить(УзелКолонка, УзелТЧ, УзелТЧ + "[" + Строка(ИндексСтроки) + "]");					
							Если МассивРодителей.Количество() > 0 Тогда
								ТекущаяСтрокаИерархии = СтрТЧ;
								Для ИтераторЦикла = 0 По МассивРодителей.ВГраница() Цикл
									СтруктураРодителя = МассивРодителей[ИтераторЦикла];	
									ТекущийИндексРодителя = СоответствиеИндексСтроки.Получить(СтруктураРодителя.ИмяТЧ + ТекущаяСтрокаИерархии.ИдентификаторСтрокиРодителя);
									Если ТекущийИндексРодителя <> Неопределено Тогда
										Узел = СтрЗаменить(Узел, СтруктураРодителя.Узел, СтруктураРодителя.Узел + "[" + Строка(ТекущийИндексРодителя) + "]");									
										ТаблицаРодитель = ДанныеФормирования[СтруктураРодителя.ИмяТЧ];
										Для Каждого СтрокаРодитель Из ТаблицаРодитель Цикл
											Если СтрокаРодитель.ИдентификаторСтроки = ТекущаяСтрокаИерархии.ИдентификаторСтрокиРодителя Тогда
												ТекущаяСтрокаИерархии = СтрокаРодитель;
												Прервать;
											КонецЕсли;	
										КонецЦикла;
									Иначе
										// Есть строки в подчиненных таблицах по удаленным родительским строкам
										ОтказИнициализацииСтроки = Истина;
										Прервать;
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;	
							Если ОтказИнициализацииСтроки = Ложь Тогда
								Если СтрЗаканчиваетсяНа(Колонка.Ключ, "ИспользуетсяUTC") Тогда
									СвязанныйРеквизит = Неопределено;
									СтрТЧ.Свойство(СтрЗаменить(Колонка.Ключ, "ИспользуетсяUTC", ""), СвязанныйРеквизит);
									Если ЗначениеЗаполнено(СвязанныйРеквизит) = Ложь Тогда
										Продолжить;	
									КонецЕсли; 	
								КонецЕсли;
								МассивИменУзлов = СтрРазделить(Узел, "/", Ложь);
								ИнициализироватьУзелРекурсивно(МассивИменУзлов, 1, Колонка.Значение, КорневоеСвойство, ОбъектXDTO, СтруктураСФабрикой.Фабрика);
							Иначе
								Прервать;	
							КонецЕсли;
						КонецЕсли;	
					КонецЕсли;
				КонецЦикла;	
			КонецЦикла;
		КонецЦикла;	
	КонецЦикла;
	
	Попытка
		ОбъектXDTO.Проверить();	
	Исключение
		ИмяРеквизитаПоТекстуОшибки = "";
		ОбщийТекстОшибки = НСтр("ru='Не все обязательные реквизиты документа заполнены'");
		#Если ВнешнееСоединение Тогда
			ПодробныйТекстОшибки = ОбщийТекстОшибки;	
		#Иначе
			ПодробныйТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ИмяРеквизитаПоТекстуОшибки = ПолучитьИмяРеквизитаПоТекстуОшибкиXDTO(ПодробныйТекстОшибки, МакетСоответствиеИмен);
		#КонецЕсли	
		Если ЗначениеЗаполнено(ИмяРеквизитаПоТекстуОшибки) Тогда
			Результат.Ошибка = "Не заполнен обязательный реквизит """ + ИмяРеквизитаПоТекстуОшибки + """";	
		Иначе
			Результат.Ошибка = НСтр("ru='Не все обязательные реквизиты документа заполнены'");
		КонецЕсли;
		
		ПараметрыЗаписиВЖурналРегистрации = ОбщегоНазначенияБЭД.НовыеПараметрыЗаписиВЖурналРегистрации();
		ПараметрыЗаписиВЖурналРегистрации.Данные = Объект;
		ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ПодробныйТекстОшибки, 
												"ОбменСГИСЭПД", 
												УровеньЖурналаРегистрации.Ошибка, 
												ПараметрыЗаписиВЖурналРегистрации);
		Возврат Результат;
	КонецПопытки;
	
	ЗаписьОбъекта = Новый ЗаписьXML;
	ЗаписьОбъекта.УстановитьСтроку(СтруктураСФабрикой.Кодировка);
	ЗаписьОбъекта.ЗаписатьОбъявлениеXML();
	
	СтруктураСФабрикой.Фабрика.ЗаписатьXML(ЗаписьОбъекта, ОбъектXDTO, КорневоеСвойство.Имя);
	
	ТекстОбъекта = ЗаписьОбъекта.Закрыть();
	
	ТекстОбъекта = СтрЗаменить(ТекстОбъекта, "xmlns=""TEMPXMLNS"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" ", "");
	
	ДвоичныеДанные = ПолучитьДвоичныеДанныеИзСтроки(ТекстОбъекта, СтруктураСФабрикой.Кодировка);
	Если АдресВоВременномХранилище <> Неопределено Тогда
		Результат.ДвоичныеДанные = ПоместитьВоВременноеХранилище(ДвоичныеДанные, АдресВоВременномХранилище);	
	Иначе
   		Результат.ДвоичныеДанные = ДвоичныеДанные;
	КонецЕсли;
	
	ПостфиксИдентификаторФайла = "ИдентификаторФайла";
	
	Результат.ИмяФайла = Объект[ПрефиксТитула + ПостфиксИдентификаторФайла] + ".xml";

	
	//@skip-check constructor-function-return-section
	Возврат Результат;
	
КонецФункции

// Уточнить параметры загрузки сообщения.
// 
// Параметры:
//  ПараметрыЗагрузкиСообщения - Структура - Параметры загрузки сообщения
//  ДанныеОбъекта - Структура - Данные объекта
Процедура УточнитьПараметрыЗагрузкиСообщения(ПараметрыЗагрузкиСообщения, ДанныеОбъекта) Экспорт
	
	Карточка = ДанныеОбъекта.Карточка;
	
	Грузоотправитель = Неопределено;
	Карточка.ДополнительныеПараметры.Свойство("Грузоотправитель", Грузоотправитель);
	Грузоперевозчик = Неопределено;
	Карточка.ДополнительныеПараметры.Свойство("Грузоперевозчик", Грузоперевозчик);
	Грузополучатель = Неопределено;
	Карточка.ДополнительныеПараметры.Свойство("Грузополучатель", Грузополучатель);
	
	ТипДокументаСтрока = Неопределено;
	Карточка.ДополнительныеПараметры.Свойство("DocumentType", ТипДокументаСтрока);
	
	// ИОП на Т1 отправляет только перевозчик
	Если ТипДокументаСтрока = "ShipperInformation" 
		И ДанныеОбъекта.ИдентификаторПолучателя <> Грузоперевозчик Тогда
		ПараметрыЗагрузкиСообщения.ТипИзвещения = Перечисления.ТипыЭлементовРегламентаЭДО.ПустаяСсылка();
	// ИОП на Т3 отправляет только перевозчик
	ИначеЕсли ТипДокументаСтрока = "ConsigneeInformation" 
		И ДанныеОбъекта.ИдентификаторПолучателя <> Грузоперевозчик Тогда
		ПараметрыЗагрузкиСообщения.ТипИзвещения = Перечисления.ТипыЭлементовРегламентаЭДО.ПустаяСсылка();
	// ИОП на Т5 отправляет только грузоотправитель
	ИначеЕсли ТипДокументаСтрока = "ChangesFinancialCondition" 
		И ДанныеОбъекта.ИдентификаторПолучателя <> Грузоотправитель Тогда
		ПараметрыЗагрузкиСообщения.ТипИзвещения = Перечисления.ТипыЭлементовРегламентаЭДО.ПустаяСсылка();
	КонецЕсли;	
	
КонецПроцедуры

// Перед выполнением операции получить документ.
// 
// Параметры:
//  АдресРесурса - Строка - Адрес ресурса
//  Документ - СтрокаТаблицыЗначений из см. НоваяТаблицаКонтейнеров
Процедура ПередВыполнениемОперацииПолучитьДокумент(АдресРесурса, Документ) Экспорт
	
	Если Документ.ВидСервисаЭДО = Перечисления.ВидыСервисовЭДО.ЭПД Тогда
		АдресРесурса = СтрЗаменить(АдресРесурса, "GetMessage", АдресРесурсаПолученияСообщения());
	КонецЕсли;	
	
КонецПроцедуры

// Перед выполнением операции отправить контейнер.
// 
// Параметры:
//  ПараметрыВыполненияОперации - Структура - Параметры выполнения операции
//  ОписаниеКонтейнера - Структура - Описание контейнера
Процедура ПередВыполнениемОперацииОтправитьКонтейнер(ПараметрыВыполненияОперации, ОписаниеКонтейнера) Экспорт
	
	Если ОписаниеКонтейнера.ВидСервисаЭДО = Перечисления.ВидыСервисовЭДО.ЭПД Тогда
		ПараметрыВыполненияОперации.АдресРесурса = СтрЗаменить(ПараметрыВыполненияОперации.АдресРесурса, 
																"SendMessage", АдресРесурсаОтправкиСообщения());	
	КонецЕсли;
	
КонецПроцедуры

// Получает токен авторизации от оператора.
// 
// Параметры:
//  КлючиСинхронизации - Массив из Структура - см. СинхронизацияЭДОКлиентСервер.НовыйКлючСинхронизации
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Процедура ПолучитьТокеныЭПД(КлючиСинхронизации, КонтекстДиагностики) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
		
	Для Каждого КиЗ Из КлючиСинхронизации Цикл
		КлючСинхронизации = КиЗ.Значение;
		Если КлючСинхронизации.СпособОбмена <> Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО
			Или Не ЗначениеЗаполнено(КлючСинхронизации.МаркерРасшифрованный) Тогда
			Продолжить;
		КонецЕсли;
		
		Запись = РегистрыСведений.ТокеныАвторизацииЭПД.СоздатьМенеджерЗаписи();
		Запись.Отправитель = КлючСинхронизации.ИдентификаторУчетнойЗаписи;
		Запись.Прочитать();
		Если Запись.Выбран() И Запись.ДатаОкончания > ТекущаяДатаСеанса() Тогда
			Продолжить;
		КонецЕсли;
		
		КонтекстДиагностикиВнеКонтекста = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
				
		ПараметрыВыполненияОперации = СервисЭДО.НовыеПараметрыВыполненияОперацииСервиса(КлючСинхронизации);
		ПараметрыВыполненияОперации.ПредставлениеОперации = НСтр("ru = 'Получение токена ЭПД'");
		ПараметрыВыполненияОперации.АдресРесурса = "/epd/v1/auth/special/";
		ПараметрыВыполненияОперации.Метод = ИнтернетСоединениеБЭД.HTTPМетоды().GET;
		ПараметрыВыполненияОперации.Таймаут = 10;
		ПараметрыВыполненияОперации.РазрешенныеКодыОшибок.Добавить(404);
		
		РезультатВыполненияОперации = СервисЭДО.ВыполнитьОперацию(ПараметрыВыполненияОперации, КонтекстДиагностикиВнеКонтекста, КлючСинхронизации);
		
		Если РезультатВыполненияОперации.Успех = Истина Тогда
			ДанныеОтвета = ПолучитьДанныеJSON(РезультатВыполненияОперации.Ответ.ПолучитьТелоКакСтроку());
			Если ДанныеОтвета <> Неопределено И ДанныеОтвета.Свойство("value") Тогда
				Запись.Отправитель = КлючСинхронизации.ИдентификаторУчетнойЗаписи;
				Запись.Токен = ДанныеОтвета.value;
				Если ДанныеОтвета.Свойство("expiry") Тогда
					Запись.ДатаОкончания = XMLЗначение(Тип("Дата"), ДанныеОтвета.expiry);
				КонецЕсли;
				Запись.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// См. СинхронизацияЭДОСобытия.ПослеОтправкиОбъекта
// 
// Параметры:
//  Объект - Произвольный - Объект
//  ТранспортныйКонтейнер - ДокументСсылка.ТранспортныйКонтейнерЭДО - Транспортный контейнер
//  ОшибкаПередачи - Произвольный - см. СинхронизацияЭДО.НоваяОшибкаПередачи
//  КонтекстДиагностики - Структура - Контекст диагностики:
// * ЗаголовокОперации - Строка -
// * Диагностика - Структура -:
// ** Ошибки - Массив из Структура -:
// *** ВидОперации - Строка -
// *** ВидОшибки - Структура -:
// **** Идентификатор - Строка -
// *** ПодробноеПредставлениеОшибки - Строка -
// *** КраткоеПредставлениеОшибки - Строка -
// *** Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования -
// *** Подсистема - Строка -
// *** СсылкаНаОбъект - ЛюбаяСсылка -
// *** ДополнительныеДанные - Произвольный -
// * ДополнительныеСвойства - Структура -
//  Отказ - Булево - Отказ
//  ДополнительныеПараметры - Произвольный - Дополнительные параметры
Процедура ПослеОтправкиОбъекта(Объект, ТранспортныйКонтейнер, ОшибкаПередачи, КонтекстДиагностики, Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОшибкаПередачи) Тогда
		Возврат;
	КонецЕсли;
	
	//@skip-check wrong-string-literal-content
	ТипЭлементаРегламента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "ТипЭлементаРегламента");
	Если ТипЗнч(Объект) = Тип("ДокументСсылка.СообщениеЭДО") Тогда
		Если ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул2
			Или ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул7
			Или ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул8
			Или ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ДопТитул7
			Или ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ДопТитул8 Тогда
			ЭлектронныйДокумент = ЭлектронныеДокументыЭДО.ЭлектронныйДокументСообщенияЭДО(Объект);
			ИдентификаторОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент, "ИдентификаторОрганизации");
			Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
				Запись = РегистрыСведений.ОтправкиQRКодовЭПД.СоздатьМенеджерЗаписи(); 
				Запись.Отправитель = ИдентификаторОрганизации;
				Запись.ЭлектронныйДокумент = ЭлектронныйДокумент;	
				Запись.ДатаНачалаПолучения = ТекущаяДатаСеанса();
				Запись.ДатаОтправки = Неопределено;
				Запись.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// См. ЭлектронныеДокументыЭДОСобытия.ПриЗагрузкеСообщения
// 
// Параметры:
//  Объект - ДокументСсылка - Объект
//  ДанныеОбъекта - Структура - Данные объекта
//  КонтекстДиагностики - Структура - Контекст диагностики:
// * ЗаголовокОперации - Строка -
// * Диагностика - Структура -:
// ** Ошибки - Массив из Структура -:
// *** ВидОперации - Строка -
// *** ВидОшибки - Структура -:
// **** Идентификатор - Строка -
// *** ПодробноеПредставлениеОшибки - Строка -
// *** КраткоеПредставлениеОшибки - Строка -
// *** Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования -
// *** Подсистема - Строка -
// *** СсылкаНаОбъект - ЛюбаяСсылка -
// *** ДополнительныеДанные - Произвольный -
// * ДополнительныеСвойства - Структура -
Процедура ПриЗагрузкеСообщения(Объект, ДанныеОбъекта, КонтекстДиагностики) Экспорт
	
	Если ТипЗнч(Объект) = Тип("ДокументСсылка.СообщениеЭДО") Тогда
		// Отметим готовность получения QR
		Если ДанныеОбъекта.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул2
			Или ДанныеОбъекта.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул7
			Или ДанныеОбъекта.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул8
			Или ДанныеОбъекта.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ДопТитул7
			Или ДанныеОбъекта.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ДопТитул8 Тогда
			ЭлектронныйДокумент = ЭлектронныеДокументыЭДО.ЭлектронныйДокументСообщенияЭДО(Объект);
			ИдентификаторОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент, "ИдентификаторОрганизации");
			Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
				НаборЗаписей = РегистрыСведений.ОтправкиQRКодовЭПД.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Отправитель.Установить(ИдентификаторОрганизации);
				НаборЗаписей.Отбор.ЭлектронныйДокумент.Установить(ЭлектронныйДокумент);
				НаборЗаписей.Прочитать();
				Если НаборЗаписей.Количество() > 0 Тогда
					Для Каждого Запись Из НаборЗаписей Цикл
						Запись.ДатаНачалаПолучения = ТекущаяДатаСеанса();
						Запись.ДатаОтправки = Неопределено;	
					КонецЦикла;	
					НаборЗаписей.Записать();
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ДанныеОбъекта.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул3
			Или ДанныеОбъекта.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ДопТитул3 Тогда
				// Удалим записи по завершенным перевозкам
				ЭлектронныйДокумент = ЭлектронныеДокументыЭДО.ЭлектронныйДокументСообщенияЭДО(Объект);
				ИдентификаторОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент, "ИдентификаторОрганизации");
				Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
					НаборЗаписей = РегистрыСведений.ОтправкиQRКодовЭПД.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Отправитель.Установить(ИдентификаторОрганизации);
					НаборЗаписей.Отбор.ЭлектронныйДокумент.Установить(ЭлектронныйДокумент);
					НаборЗаписей.Записать();
				КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Представление файла прикладного электронного документа.
// 
// Параметры:
//  ДанныеФайла - ДвоичныеДанные - Данные файла
// 
// Возвращаемое значение:
//  Структура - Представление файла прикладного электронного документа:
// * ПредставлениеДокумента - Неопределено, ТабличныйДокумент -
// * Успех - Булево -
Функция ПредставлениеФайлаПрикладногоЭлектронногоДокумента(ДанныеФайла) Экспорт
	
	Поток = ДанныеФайла.ОткрытьПотокДляЧтения();
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьПоток(Поток);
	
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	КлючеваяИнформацияПоТитулу = КлючеваяИнформацияПоТитулу(ОбъектXDTO);
	
	Если КлючеваяИнформацияПоТитулу.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭТрН Тогда
		МенеджерОбъекта = Документы.ЭлектроннаяТранспортнаяНакладная;	
	ИначеЕсли КлючеваяИнформацияПоТитулу.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭЗН Тогда
		МенеджерОбъекта = Документы.ЭлектронныйЗаказНаряд;
	ИначеЕсли КлючеваяИнформацияПоТитулу.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭСВ Тогда
		МенеджерОбъекта = Документы.ЭлектроннаяСопроводительнаяВедомость;
	ИначеЕсли КлючеваяИнформацияПоТитулу.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭЗЗ Тогда
		МенеджерОбъекта = Документы.ЭлектронныйЗаказЗаявка;
	ИначеЕсли КлючеваяИнформацияПоТитулу.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭПЛ Тогда
		МенеджерОбъекта = Документы.ЭлектронныйПутевойЛист;
	ИначеЕсли КлючеваяИнформацияПоТитулу.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭДФ Тогда
		МенеджерОбъекта = Документы.ЭлектронныйДоговорФрахтования;
	КонецЕсли;
	
	ОриентацияСтраницыТД = ОриентацияСтраницы.Портрет;
	
	ПредставлениеДокумента = Новый ТабличныйДокумент;
	ПредставлениеДокумента.ОриентацияСтраницы = ОриентацияСтраницыТД;
	
	Для НомерКолонки = 1 По КоличествоКолонокПечатнойФормы() Цикл
		ПредставлениеДокумента.Область(, НомерКолонки, , НомерКолонки).ШиринаКолонки = ШиринаКолонкиПечатнойФормы(ОриентацияСтраницыТД);	
	КонецЦикла;
	
	ПредставлениеДокумента.Область(2, 1, 2, КоличествоКолонокПечатнойФормы()).Объединить();
	ОформитьЗаголовокТД(ПредставлениеДокумента, 0, 2, 1, Строка(КлючеваяИнформацияПоТитулу.Титул));
	
	МассивНеВыводить = Новый Массив;
	// Подпись выводим штампом, кроме этого это ЭП предыдущих титулов
	МассивНеВыводить.Добавить("//Файл/Документ/СодИнфГО/ИдЗак/ЭП");
	МассивНеВыводить.Добавить("//Файл/Документ/ИдИнфПрвПрием/ЭП");
	МассивНеВыводить.Добавить("//Файл/Документ/ИдИнфГО/ЭП");
	МассивНеВыводить.Добавить("//Файл/Документ/ИдИнфГП/ЭП");
	МассивНеВыводить.Добавить("//Файл/Документ/ИдИнфПрвПрием/ЭП");
	МассивНеВыводить.Добавить("//Файл/Документ/ИдПУДИнфПрв/ЭП");
	МассивНеВыводить.Добавить("//Файл/Документ/ИдИнфПрвВыд/ЭП");
	МассивНеВыводить.Добавить("//Файл/Документ/ИдИнфПрвПрием/ЭП");
	
	МассивНеВыводить.Добавить("//Файл/Документ/ИдИнфФт/ЭП");
	МассивНеВыводить.Добавить("//Файл/Документ/ИдИнфФщ/ЭП");
	
	МассивНеВыводить.Добавить("//Файл/Документ/ИдИнфПрв/ЭП");
	МассивНеВыводить.Добавить("//Файл/Документ/ИдИнфПрв/ЭП");
	
	МассивНеВыводить.Добавить("//Файл/Документ/ИдИнфПрв/ЭП");
	МассивНеВыводить.Добавить("//Файл/Документ/ИдИнфПрв/ЭП");
	
	МассивНеВыводить.Добавить("//Файл/Документ/ИдИнфСоб/ЭП");
	МассивНеВыводить.Добавить("//Файл/Документ/ИдИнфТехСост/ЭП");
	МассивНеВыводить.Добавить("//Файл/Документ/ИдИнфВыезд/ЭП");
	МассивНеВыводить.Добавить("//Файл/Документ/ИдИнфЗаезд/ЭП");
	
	МакетАннотаций = МенеджерОбъекта.ПолучитьМакет("ЭД_ru" + ПостфиксМакетаПоНомеруВерсии(КлючеваяИнформацияПоТитулу.ВерсияФормата));
	ИмяОбласти = КлючеваяИнформацияПоТитулу.ПрефиксТитула;
	Если СтрНачинаетсяС(ИмяОбласти, "Доп") Тогда
		ИмяОбласти = Сред(ИмяОбласти, 4);
	КонецЕсли;
	ОбластьМакетаИмен = МакетАннотаций.Области.Найти(ИмяОбласти);
	Если НЕ ЗначениеЗаполнено(ОбластьМакетаИмен) Тогда
		ИмяОбластиОбщие = "Общие";
		ОбластьМакетаИмен = МакетАннотаций.Области.Найти(ИмяОбластиОбщие);
	Иначе
		ОбластьМакетаИмен = МакетАннотаций.ПолучитьОбласть(ИмяОбласти);
	КонецЕсли;
	
	ПредставлениеДокумента = СформироватьТабличныйДокументПоXDTO(ОбъектXDTO, ОбластьМакетаИмен, "//Файл", ПредставлениеДокумента, 4, 1, МассивНеВыводить);
	
	РезультатФормирования = Новый Структура;
	РезультатФормирования.Вставить("ПредставлениеДокумента", ПредставлениеДокумента);
	РезультатФормирования.Вставить("Успех", Истина);
	
	Возврат РезультатФормирования;
	
КонецФункции

// Найти электронный документ объекта учета.
// 
// Параметры:
//  ОбъектУчета - ДокументСсылка - Объект учета
// 
// Возвращаемое значение:
//  Неопределено - Найти электронный документ объекта учета
Функция НайтиЭлектронныйДокументОбъектаУчета(ОбъектУчета) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОбъектУчета", ОбъектУчета);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент
	               |ИЗ
	               |	РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
	               |ГДЕ
	               |	ОбъектыУчетаДокументовЭДО.ОбъектУчета = &ОбъектУчета
	               |	И ОбъектыУчетаДокументовЭДО.Актуальный";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ЭлектронныйДокумент;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Переопределяет способ обработки электронного документа.
//   
// Параметры:
// 	КлючНастройки - см. НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтраженияВУчете
// 	Настройки - Структура:
// 	 * СпособОбработки - Строка
// 	 * ПредлагатьСохранятьНастройки - Булево
Процедура НастройкиОтраженияВУчете(КлючНастройки, Настройки) Экспорт
	
	Если ЭтоДокументЭПД(КлючНастройки.ВидДокумента.ТипДокумента) Тогда
		Настройки.СпособОбработки = "Автоматически";
	КонецЕсли;
	
КонецПроцедуры

// При заполнении настройки по видам электронных документов.
// 
// Параметры:
//  Настройки - Структура - Настройки
Процедура ПриЗаполненииНастройкиПоВидамЭлектронныхДокументов(Настройки) Экспорт

	Для Каждого СтрНастройка Из Настройки Цикл
		Если ЗначениеЗаполнено(СтрНастройка.СпособОбменаЭД) 
			И СтрНастройка.СпособОбменаЭД <> Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО
			И ЭтоДокументЭПД(СтрНастройка.ВидДокумента.ТипДокумента) Тогда
			СтрНастройка.Формировать = Ложь;	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Это документ ЭПД.
// 
// Параметры:
//  ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО - Тип документа
// 
// Возвращаемое значение:
//  Булево - Это документ ЭПД
Функция ЭтоДокументЭПД(ТипДокумента) Экспорт
	
	Возврат ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭТрН 
				Или ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭЗН
				Или ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭСВ
				Или ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭЗЗ
				Или ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭПЛ
				Или ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭДФ;
	
КонецФункции

// Заполняет параметры электронного документа для отправки документа ЭПД.
//
// Параметры:
//  ИсточникДанныхСсылка - СправочникСсылка.ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений - Основание
//              (технический владелец) электронного документа.
//  ПараметрыИсточника - Структура - 
//
Процедура ЗаполнитьПараметрыЭлектронногоДокумента(ИсточникДанныхСсылка, ПараметрыИсточника) Экспорт
	
	Если ТипЗнч(ИсточникДанныхСсылка) = Тип("ДокументСсылка.ЭлектроннаяТранспортнаяНакладная")
		Или ТипЗнч(ИсточникДанныхСсылка) = Тип("ДокументОбъект.ЭлектроннаяТранспортнаяНакладная") Тогда
		ПараметрыИсточника.Тип = Перечисления.ТипыДокументовЭДО.ЭТрН;
		ПараметрыИсточника.Направление = ?(ИсточникДанныхСсылка.ЭтоВходящий, Перечисления.НаправленияЭДО.Входящий, Перечисления.НаправленияЭДО.Исходящий);
		
		Если ЗначениеЗаполнено(ИсточникДанныхСсылка.СсылкаТитулГрузоотправителяСоставитель) Тогда
			СоставительПервогоТитула = ИсточникДанныхСсылка.СсылкаТитулГрузоотправителяСоставитель;
		Иначе
			СоставительПервогоТитула = ИсточникДанныхСсылка.СсылкаТитулГрузоотправителяГрузоотправитель;	
		КонецЕсли;
		
		Если ИсточникДанныхСсылка.ЭтоВходящий = Истина Тогда
			Если ИсточникДанныхСсылка.РольУчастника = 1 Тогда
				ПараметрыИсточника.Организация = ИсточникДанныхСсылка.СсылкаТитулГрузоотправителяПеревозчик; 
				ПараметрыИсточника.Контрагент = СоставительПервогоТитула; 	
			Иначе
				ПараметрыИсточника.Организация = ИсточникДанныхСсылка.СсылкаТитулГрузоотправителяГрузополучатель; 
				ПараметрыИсточника.Контрагент = СоставительПервогоТитула;
			КонецЕсли;
		Иначе
			ПараметрыИсточника.Организация = СоставительПервогоТитула; 
			ПараметрыИсточника.Контрагент = ИсточникДанныхСсылка.СсылкаТитулГрузоотправителяПеревозчик; 
		КонецЕсли;
	ИначеЕсли ТипЗнч(ИсточникДанныхСсылка) = Тип("ДокументСсылка.ЭлектроннаяСопроводительнаяВедомость")
		Или ТипЗнч(ИсточникДанныхСсылка) = Тип("ДокументОбъект.ЭлектроннаяСопроводительнаяВедомость") Тогда
		ПараметрыИсточника.Тип = Перечисления.ТипыДокументовЭДО.ЭСВ;
		ПараметрыИсточника.Направление = ?(ИсточникДанныхСсылка.ЭтоВходящий, Перечисления.НаправленияЭДО.Входящий, Перечисления.НаправленияЭДО.Исходящий);
		Если ИсточникДанныхСсылка.ЭтоВходящий = Истина Тогда
			Если ИсточникДанныхСсылка.РольУчастника = 2 Тогда
				ПараметрыИсточника.Организация = ИсточникДанныхСсылка.СсылкаТитулПеревозчикаГрузоотправитель; 
				ПараметрыИсточника.Контрагент = ИсточникДанныхСсылка.СсылкаТитулПеревозчикаПеревозчик; 	
			Иначе
				ПараметрыИсточника.Организация = ИсточникДанныхСсылка.СсылкаТитулПеревозчикаГрузополучатель; 
				ПараметрыИсточника.Контрагент = ИсточникДанныхСсылка.СсылкаТитулПеревозчикаПеревозчик;
			КонецЕсли;
		Иначе
			ПараметрыИсточника.Организация = ИсточникДанныхСсылка.СсылкаТитулПеревозчикаПеревозчик; 
			ПараметрыИсточника.Контрагент = ИсточникДанныхСсылка.СсылкаТитулПеревозчикаГрузоотправитель; 
		КонецЕсли;
	ИначеЕсли ТипЗнч(ИсточникДанныхСсылка) = Тип("ДокументСсылка.ЭлектронныйЗаказНаряд")
		Или ТипЗнч(ИсточникДанныхСсылка) = Тип("ДокументОбъект.ЭлектронныйЗаказНаряд") Тогда
		ПараметрыИсточника.Тип = Перечисления.ТипыДокументовЭДО.ЭЗН;
		ПараметрыИсточника.Направление = ?(ИсточникДанныхСсылка.ЭтоВходящий, Перечисления.НаправленияЭДО.Входящий, Перечисления.НаправленияЭДО.Исходящий);
		Если ИсточникДанныхСсылка.ЭтоВходящий = Истина Тогда
			ПараметрыИсточника.Организация = ИсточникДанныхСсылка.СсылкаТитулФрахтователяФрахтовщик; 
			ПараметрыИсточника.Контрагент = ИсточникДанныхСсылка.СсылкаТитулФрахтователяФрахтователь;
		Иначе
			ПараметрыИсточника.Организация = ИсточникДанныхСсылка.СсылкаТитулФрахтователяФрахтователь; 
			ПараметрыИсточника.Контрагент = ИсточникДанныхСсылка.СсылкаТитулФрахтователяФрахтовщик; 
		КонецЕсли;
	ИначеЕсли ТипЗнч(ИсточникДанныхСсылка) = Тип("ДокументСсылка.ЭлектронныйЗаказЗаявка")
		Или ТипЗнч(ИсточникДанныхСсылка) = Тип("ДокументОбъект.ЭлектронныйЗаказЗаявка") Тогда
		ПараметрыИсточника.Тип = Перечисления.ТипыДокументовЭДО.ЭЗЗ;
		ПараметрыИсточника.Направление = ?(ИсточникДанныхСсылка.ЭтоВходящий, Перечисления.НаправленияЭДО.Входящий, Перечисления.НаправленияЭДО.Исходящий);
		
		Если ЗначениеЗаполнено(ИсточникДанныхСсылка.СсылкаТитулГрузоотправителяСоставитель) Тогда
			СоставительПервогоТитула = ИсточникДанныхСсылка.СсылкаТитулГрузоотправителяСоставитель;
		Иначе
			СоставительПервогоТитула = ИсточникДанныхСсылка.СсылкаТитулГрузоотправителяГрузоотправитель;	
		КонецЕсли;
		
		Если ИсточникДанныхСсылка.ЭтоВходящий = Истина Тогда
			ПараметрыИсточника.Организация = ИсточникДанныхСсылка.СсылкаТитулГрузоотправителяПеревозчик; 
			ПараметрыИсточника.Контрагент = СоставительПервогоТитула;
		Иначе
			ПараметрыИсточника.Организация = СоставительПервогоТитула; 
			ПараметрыИсточника.Контрагент = ИсточникДанныхСсылка.СсылкаТитулГрузоотправителяПеревозчик; 
		КонецЕсли;
	ИначеЕсли ТипЗнч(ИсточникДанныхСсылка) = Тип("ДокументСсылка.ЭлектронныйПутевойЛист")
		Или ТипЗнч(ИсточникДанныхСсылка) = Тип("ДокументОбъект.ЭлектронныйПутевойЛист") Тогда
		ПараметрыИсточника.Тип = Перечисления.ТипыДокументовЭДО.ЭПЛ;
		ПараметрыИсточника.Направление = ?(ИсточникДанныхСсылка.ЭтоВходящий, Перечисления.НаправленияЭДО.Входящий, Перечисления.НаправленияЭДО.Исходящий);
		
		Если ИсточникДанныхСсылка.ЭтоВходящий = Истина Тогда
			Если ИсточникДанныхСсылка.РольУчастника = 2 Тогда
				ПараметрыИсточника.Организация = ИсточникДанныхСсылка.СсылкаТитулОформлениеМедорганизация; 
			ИначеЕсли ИсточникДанныхСсылка.РольУчастника = 3 Тогда
				ПараметрыИсточника.Организация = ИсточникДанныхСсылка.СсылкаТитулОформлениеТехконтроль;
			ИначеЕсли ИсточникДанныхСсылка.РольУчастника = 4 Тогда
				ПараметрыИсточника.Организация = ИсточникДанныхСсылка.СсылкаТитулОформлениеПоказанияОдометра;
			КонецЕсли;
			ПараметрыИсточника.Контрагент = ИсточникДанныхСсылка.СсылкаТитулОформлениеОформитель;
		Иначе
			ПараметрыИсточника.Организация = ИсточникДанныхСсылка.СсылкаТитулОформлениеОформитель; 
			Если ЗначениеЗаполнено(ИсточникДанныхСсылка.СсылкаТитулОформлениеМедорганизация) Тогда
				ПараметрыИсточника.Контрагент = ИсточникДанныхСсылка.СсылкаТитулОформлениеМедорганизация; 
			Иначе
				ПараметрыИсточника.Контрагент = ИсточникДанныхСсылка.СсылкаТитулОформлениеОформитель;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ИсточникДанныхСсылка) = Тип("ДокументСсылка.ЭлектронныйДоговорФрахтования")
		Или ТипЗнч(ИсточникДанныхСсылка) = Тип("ДокументОбъект.ЭлектронныйДоговорФрахтования") Тогда
		ПараметрыИсточника.Тип = Перечисления.ТипыДокументовЭДО.ЭДФ;
		ПараметрыИсточника.Направление = ?(ИсточникДанныхСсылка.ЭтоВходящий, Перечисления.НаправленияЭДО.Входящий, Перечисления.НаправленияЭДО.Исходящий);
		
		СоставительПервогоТитула = ИсточникДанныхСсылка.СсылкаТитулФрахтователяФрахтователь;
		
		Если ЗначениеЗаполнено(ИсточникДанныхСсылка.СсылкаТитулФрахтователяСоставитель) Тогда
			СоставительПервогоТитула = ИсточникДанныхСсылка.СсылкаТитулФрахтователяСоставитель;
		Иначе
			СоставительПервогоТитула = ИсточникДанныхСсылка.СсылкаТитулФрахтователяФрахтователь;	
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(ИсточникДанныхСсылка.СсылкаТитулФрахтовщикаСоставитель) Тогда
			СоставительВторогоТитула = ИсточникДанныхСсылка.СсылкаТитулФрахтовщикаСоставитель;
		Иначе
			СоставительВторогоТитула = ИсточникДанныхСсылка.СсылкаТитулФрахтователяФрахтовщик;	
		КонецЕсли;
		
		Если ИсточникДанныхСсылка.ЭтоВходящий = Истина Тогда
			ПараметрыИсточника.Организация = СоставительВторогоТитула; 
			ПараметрыИсточника.Контрагент = СоставительПервогоТитула;
		Иначе
			ПараметрыИсточника.Организация = СоставительПервогоТитула; 
			ПараметрыИсточника.Контрагент = СоставительВторогоТитула; 
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

Функция АдресРесурсаПолученияСпискаСообщений() Экспорт
	
	Возврат "epd/v1/GetMessageList";
	
КонецФункции

Функция АдресРесурсаПолученияСообщения() Экспорт
	
	Возврат "epd/v1/GetMessage";
	
КонецФункции

Функция АдресРесурсаОтправкиСообщения() Экспорт
	
	Возврат "epd/v1/SendMessage";
	
КонецФункции

// Это титул ЭПД.
// 
// Параметры:
//  ИдФайл - Строка - Ид файл
// 
// Возвращаемое значение:
//  Булево - Это титул ЭПД
Функция ЭтоТитулЭПД(ИдФайл) Экспорт
	
	Возврат СтрНачинаетсяС(ИдФайл, "ON_TRNACLGROT")
			Или СтрНачинаетсяС(ИдФайл, "ON_TRNACLPPRIN")
			Или СтрНачинаетсяС(ИдФайл, "ON_TRNPEREADR")
			Или СтрНачинаетсяС(ИдФайл, "ON_TRNZAMEN")
			Или СтрНачинаетсяС(ИдФайл, "ON_TRNACLGRPO")
			Или СтрНачинаетсяС(ИдФайл, "ON_TRNACLPVYN")
			Или СтрНачинаетсяС(ИдФайл, "ON_TRNPUDPER")
			Или СтрНачинаетсяС(ИдФайл, "ON_TRNPUDGO")
			// ЭЗН
			Или СтрНачинаетсяС(ИдФайл, "ON_ZAKAZNAR")
			Или СтрНачинаетсяС(ИдФайл, "ON_ZAKAZNARSOG")
			Или СтрНачинаетсяС(ИдФайл, "ON_ZAKAZNARPOD")
			Или СтрНачинаетсяС(ИдФайл, "ON_ZAKAZNARVOZ")
			// ЭСВ
			Или СтрНачинаетсяС(ИдФайл, "ON_SOPVEDPER")
			Или СтрНачинаетсяС(ИдФайл, "ON_SOPVEDGO")
			Или СтрНачинаетсяС(ИдФайл, "ON_SOPVEDGP")
			// ЭЗЗ
			Или СтрНачинаетсяС(ИдФайл, "ON_ZAKZVPER")
			Или СтрНачинаетсяС(ИдФайл, "ON_ZAKZVGO")
			// ЭПЛ
			Или СтрНачинаетсяС(ИдФайл, "ON_PTLSSOBTS")
			Или СтрНачинаетсяС(ИдФайл, "ON_PTLSPRMO")
			Или СтрНачинаетсяС(ИдФайл, "ON_PTLSVIPTS")
			Или СтрНачинаетсяС(ИдФайл, "ON_PTLSODVZD")
			Или СтрНачинаетсяС(ИдФайл, "ON_PTLSODPARK")
			Или СтрНачинаетсяС(ИдФайл, "ON_PTLSPOSMO")
			// ЭДФ
			Или СтрНачинаетсяС(ИдФайл, "ON_DOGFRAKHTEL")
			Или СтрНачинаетсяС(ИдФайл, "ON_DOGFRASHCH")
		;
			
КонецФункции

// Прочитать содержание документа.
// 
// Параметры:
//  ОписаниеФайла - Структура - Описание файла
// 
// Возвращаемое значение:
//  Структура - Прочитать содержание документа:
// * ИдентификаторДокумента - Строка -
// * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО -
// * ПрикладнойТипДокумента - Неопределено -
// * ТипРегламента - ПеречислениеСсылка.ТипыРегламентовЭДО -
// * НомерДокумента - Строка -
// * ДатаДокумента - Дата -
// * СуммаДокумента - Число -
// * ЕстьМаркировка - Булево -
// * Отправитель - Структура -:
// ** Наименование - Строка -
// ** ИНН - Строка -
// ** КПП - Строка -
// * Получатель - Структура -:
// ** Наименование - Строка -
// ** ИНН - Строка -
// ** КПП - Строка -
// * Формат - Строка -
// * ОтражениеВУчете - Неопределено -
// * СвойстваДокументовПоФорматам - Структура -:
// ** АктОРасхождениях - Структура -:
// *** ФормируютсяИтогиПриемки - Булево -
// *** ВариантФормированияИтоговПриемки - Строка -
Функция ПрочитатьСодержаниеДокумента(ОписаниеФайла) Экспорт
	
	Содержание = ФорматыЭДО.НовоеОписаниеФайлаДокумента();
	
	Если СтрНачинаетсяС(ОписаниеФайла.ИмяФайла, "ON_TRN") Тогда
		Содержание.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭТрН;
		Содержание.ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭТрН;
		Содержание.Формат = "ETRN";
		
		// Дата и номер есть только в первом титуле
		Если СтрНачинаетсяС(ОписаниеФайла.ИмяФайла, "ON_TRNACLGROT") Тогда
			Поток = ОписаниеФайла.ДвоичныеДанные.ОткрытьПотокДляЧтения();
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.ОткрытьПоток(Поток);		
			ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			ЧтениеXML.Закрыть();		
			КлючеваяИнформацияПоТитулу = КлючеваяИнформацияПоТитулу(ОбъектXDTO);
			
			Содержание.ДатаДокумента = КлючеваяИнформацияПоТитулу.Дата;
			Содержание.НомерДокумента = КлючеваяИнформацияПоТитулу.Номер;
		КонецЕсли;
	ИначеЕсли СтрНачинаетсяС(ОписаниеФайла.ИмяФайла, "ON_ZAKAZNAR") Тогда
		Содержание.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭЗН;
		Содержание.ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭЗН;
		Содержание.Формат = "EZN";
		// Дата и номер есть только в первом титуле
		Если СтрНачинаетсяС(ОписаниеФайла.ИмяФайла, "ON_ZAKAZNAR_") Тогда
			Поток = ОписаниеФайла.ДвоичныеДанные.ОткрытьПотокДляЧтения();
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.ОткрытьПоток(Поток);		
			ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			ЧтениеXML.Закрыть();		
			КлючеваяИнформацияПоТитулу = КлючеваяИнформацияПоТитулу(ОбъектXDTO);
			
			Содержание.ДатаДокумента = КлючеваяИнформацияПоТитулу.Дата;
			Содержание.НомерДокумента = КлючеваяИнформацияПоТитулу.Номер;
		КонецЕсли;
	ИначеЕсли СтрНачинаетсяС(ОписаниеФайла.ИмяФайла, "ON_SOPVED") Тогда
		Содержание.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭСВ;
		Содержание.ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭСВ;
		Содержание.Формат = "ESV";
		// Дата и номер есть только в первом титуле
		Если СтрНачинаетсяС(ОписаниеФайла.ИмяФайла, "ON_SOPVEDPER1")
			Или СтрНачинаетсяС(ОписаниеФайла.ИмяФайла, "ON_SOPVEDPER2")
			Или СтрНачинаетсяС(ОписаниеФайла.ИмяФайла, "ON_SOPVEDPER4") Тогда
			Поток = ОписаниеФайла.ДвоичныеДанные.ОткрытьПотокДляЧтения();
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.ОткрытьПоток(Поток);		
			ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			ЧтениеXML.Закрыть();		
			КлючеваяИнформацияПоТитулу = КлючеваяИнформацияПоТитулу(ОбъектXDTO);
			
			Содержание.ДатаДокумента = КлючеваяИнформацияПоТитулу.Дата;
			Содержание.НомерДокумента = КлючеваяИнформацияПоТитулу.Номер;
		КонецЕсли;
	ИначеЕсли СтрНачинаетсяС(ОписаниеФайла.ИмяФайла, "ON_ZAKZV") Тогда
		Содержание.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭЗЗ;
		Содержание.ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭЗЗ;
		Содержание.Формат = "EZZ";
		// Дата и номер есть только в первом титуле
		Если СтрНачинаетсяС(ОписаниеФайла.ИмяФайла, "ON_ZAKZVGO_") Тогда
			Поток = ОписаниеФайла.ДвоичныеДанные.ОткрытьПотокДляЧтения();
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.ОткрытьПоток(Поток);		
			ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			ЧтениеXML.Закрыть();		
			КлючеваяИнформацияПоТитулу = КлючеваяИнформацияПоТитулу(ОбъектXDTO);
			
			Содержание.ДатаДокумента = КлючеваяИнформацияПоТитулу.Дата;
			Содержание.НомерДокумента = КлючеваяИнформацияПоТитулу.Номер;
		КонецЕсли;
	ИначеЕсли СтрНачинаетсяС(ОписаниеФайла.ИмяФайла, "ON_PTLS") Тогда
		Содержание.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭПЛ;
		Содержание.ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭПЛ;
		Содержание.Формат = "EPL";
		// Дата и номер есть только в первом титуле
		Если СтрНачинаетсяС(ОписаниеФайла.ИмяФайла, "ON_PTLSSOBTS_") Тогда
			Поток = ОписаниеФайла.ДвоичныеДанные.ОткрытьПотокДляЧтения();
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.ОткрытьПоток(Поток);		
			ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			ЧтениеXML.Закрыть();		
			КлючеваяИнформацияПоТитулу = КлючеваяИнформацияПоТитулу(ОбъектXDTO);
			
			Содержание.ДатаДокумента = КлючеваяИнформацияПоТитулу.Дата;
			Содержание.НомерДокумента = КлючеваяИнформацияПоТитулу.Номер;
		КонецЕсли;
	ИначеЕсли СтрНачинаетсяС(ОписаниеФайла.ИмяФайла, "ON_DOGFRA") Тогда
		Содержание.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭДФ;
		Содержание.ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭДФ;
		Содержание.Формат = "EDF";
		// Дата и номер есть только в первом титуле
		Если СтрНачинаетсяС(ОписаниеФайла.ИмяФайла, "ON_DOGFRAKHTEL_") Тогда
			Поток = ОписаниеФайла.ДвоичныеДанные.ОткрытьПотокДляЧтения();
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.ОткрытьПоток(Поток);		
			ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			ЧтениеXML.Закрыть();		
			КлючеваяИнформацияПоТитулу = КлючеваяИнформацияПоТитулу(ОбъектXDTO);
			
			Содержание.ДатаДокумента = КлючеваяИнформацияПоТитулу.Дата;
			Содержание.НомерДокумента = КлючеваяИнформацияПоТитулу.Номер;
		КонецЕсли;
	КонецЕсли;
	
	//@skip-check constructor-function-return-section
	Возврат Содержание;
	
КонецФункции

// Проверить документ.
// 
// Параметры:
//  ОписаниеФайла - Структура - Описание файла
// 
// Возвращаемое значение:
//  Структура - Проверить документ:
// * Ошибки - Булево -
// * ТекстОшибки - Строка -
Функция ПроверитьДокумент(ОписаниеФайла) Экспорт
	
	РезультатПроверки = ФорматыЭДО.НовыйРезультатПроверки();
	
	Возврат РезультатПроверки;
	
КонецФункции

// Это УОУ.
// 
// Параметры:
//  ТипЭлементаРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО - Тип элемента регламента
// 
// Возвращаемое значение:
//  Булево - Это УОУ
Функция ЭтоУОУ(ТипЭлементаРегламента) Экспорт
	
	Возврат ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ОткП
		Или ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ОткТ3
		Или ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ОткГО
		Или ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭЗН_ОткФщ
		Или ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭДФ_ОткФщ
		Или ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭПЛ_ОткМ;
		
КонецФункции

// Это ИОП.
// 
// Параметры:
//  ТипЭлементаРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО - Тип элемента регламента
// 
// Возвращаемое значение:
//  Булево - Это ИОП
Функция ЭтоИОП(ТипЭлементаРегламента) Экспорт
	
	Возврат ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул1_ИОП
		Или ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул3_ИОП
		Или ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул5_ИОП
		Или ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭЗН_Титул1_ИОП
		Или ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭДФ_Титул1_ИОП;
		
КонецФункции

// Это титул отправителя.
// 
// Параметры:
//  ТипЭлементаРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО - Тип элемента регламента
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоТитулОтправителя(ТипЭлементаРегламента) Экспорт
	
	Возврат ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул1
		Или ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭЗН_Титул1
		Или ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул1_1
		Или ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул1_2
		Или ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул1_5
		Или ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭЗЗ_Титул1
		Или ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул1
		Или ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭДФ_Титул1;
		
КонецФункции

// Это титул получателя.
// 
// Параметры:
//  ТипЭлементаРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО - Тип элемента регламента
// 
// Возвращаемое значение:
//  Булево - Это титул получателя
Функция ЭтоТитулПолучателя(ТипЭлементаРегламента) Экспорт
	
	Возврат ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул2
		Или ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭЗН_Титул2
		Или ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул2_1
		Или ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул2_2
		Или ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул3_2
		Или ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭЗЗ_Титул2
		Или ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул2
		Или ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭДФ_Титул2;
		
КонецФункции

// Первый титул документа.
// 
// Параметры:
//  ТипДокумента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО - Тип документа
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО - Первый титул документа
Функция ПервыйТитулДокумента(ТипДокумента) Экспорт
	
	Если ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭТрН Тогда
		Возврат Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул1;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭЗН Тогда
		Возврат Перечисления.ТипыЭлементовРегламентаЭДО.ЭЗН_Титул1;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭСВ Тогда
		Возврат Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул1_1;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭЗЗ Тогда
		Возврат Перечисления.ТипыЭлементовРегламентаЭДО.ЭЗЗ_Титул1;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭПЛ Тогда
		Возврат Перечисления.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул1;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭДФ Тогда
		Возврат Перечисления.ТипыЭлементовРегламентаЭДО.ЭДФ_Титул1;
	КонецЕсли;
	
КонецФункции

// Код транзакции УОУ.
// 
// Параметры:
//  ТипЭлементаРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО - Тип элемента регламента
// 
// Возвращаемое значение:
//  Строка - Код транзакции УОУ
Функция КодТранзакцииУОУ(ТипЭлементаРегламента) Экспорт
	
	КодТранзакции = "";
	
	Если ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ОткП Тогда
		КодТранзакции = "ConsigneeCancellationOfferReject";
	ИначеЕсли ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ОткТ3 Тогда
		КодТранзакции = "CarrierCancellationOfferReject";
	ИначеЕсли ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ОткГО Тогда
		КодТранзакции = "ShipperCancellationOfferReject";
	ИначеЕсли ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭЗН_ОткФщ Тогда
		КодТранзакции = "FreighterCancellationOfferReject";
	ИначеЕсли ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭДФ_ОткФщ Тогда
		КодТранзакции = "UOUTransactionEDF_T1";
	ИначеЕсли ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭПЛ_ОткМ Тогда
		КодТранзакции = "UOUMedicalCheck";
	КонецЕсли;
	
	Возврат КодТранзакции;
	
КонецФункции

// Добавить типы документов ЭПД.
// 
// Параметры:
//  Таблица - ТаблицаЗначений - Таблица
Процедура ДобавитьТипыДокументовЭПД(Таблица) Экспорт
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ТипДокументаСтрокой = "Other";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭТрН;
	НоваяСтрока.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул1;
	НоваяСтрока.ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭТрН;
	НоваяСтрока.ТипДокументаДляДополнительныхДанныхСтрокой = "ShipperInformation";
	НоваяСтрока.ЭтоОтветнаяПодпись = Неопределено;
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ТипДокументаСтрокой = "Other";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭТрН;
	НоваяСтрока.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул2;
	НоваяСтрока.ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭТрН;
	НоваяСтрока.ТипДокументаДляДополнительныхДанныхСтрокой = "CarrierInformationAcceptanceCargo";
	НоваяСтрока.ЭтоОтветнаяПодпись = Неопределено;
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ТипДокументаСтрокой = "Other";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭТрН;
	НоваяСтрока.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул3;
	НоваяСтрока.ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭТрН;
	НоваяСтрока.ТипДокументаДляДополнительныхДанныхСтрокой = "ConsigneeInformation";
	НоваяСтрока.ЭтоОтветнаяПодпись = Неопределено;
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ТипДокументаСтрокой = "Other";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭТрН;
	НоваяСтрока.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ДопТитул3;
	НоваяСтрока.ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭТрН;
	НоваяСтрока.ТипДокументаДляДополнительныхДанныхСтрокой = "ConsigneeInformation";
	НоваяСтрока.ЭтоОтветнаяПодпись = Неопределено;
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ТипДокументаСтрокой = "Other";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭТрН;
	НоваяСтрока.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул4;
	НоваяСтрока.ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭТрН;
	НоваяСтрока.ТипДокументаДляДополнительныхДанныхСтрокой = "CarrierInformationDeliveryCargo";
	НоваяСтрока.ЭтоОтветнаяПодпись = Неопределено;
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ТипДокументаСтрокой = "Other";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭТрН;
	НоваяСтрока.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ДопТитул4;
	НоваяСтрока.ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭТрН;
	НоваяСтрока.ТипДокументаДляДополнительныхДанныхСтрокой = "CarrierInformationDeliveryCargo";
	НоваяСтрока.ЭтоОтветнаяПодпись = Неопределено;
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ТипДокументаСтрокой = "Other";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭТрН;
	НоваяСтрока.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул9;
	НоваяСтрока.ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭТрН;
	НоваяСтрока.ТипДокументаДляДополнительныхДанныхСтрокой = "RequireReaddressingInfo";
	НоваяСтрока.ЭтоОтветнаяПодпись = Неопределено;
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ТипДокументаСтрокой = "Other";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭТрН;
	НоваяСтрока.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ДопТитул9;
	НоваяСтрока.ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭТрН;
	НоваяСтрока.ТипДокументаДляДополнительныхДанныхСтрокой = "RequireReaddressingInfo";
	НоваяСтрока.ЭтоОтветнаяПодпись = Неопределено;
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ТипДокументаСтрокой = "Other";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭТрН;
	НоваяСтрока.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул7;
	НоваяСтрока.ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭТрН;
	НоваяСтрока.ТипДокументаДляДополнительныхДанныхСтрокой = "ReaddressingInformation";
	НоваяСтрока.ЭтоОтветнаяПодпись = Неопределено;
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ТипДокументаСтрокой = "Other";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭТрН;
	НоваяСтрока.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ДопТитул7;
	НоваяСтрока.ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭТрН;
	НоваяСтрока.ТипДокументаДляДополнительныхДанныхСтрокой = "ReaddressingInformation";
	НоваяСтрока.ЭтоОтветнаяПодпись = Неопределено;
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ТипДокументаСтрокой = "Other";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭТрН;
	НоваяСтрока.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул8;
	НоваяСтрока.ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭТрН;
	НоваяСтрока.ТипДокументаДляДополнительныхДанныхСтрокой = "ReplacementInformation";
	НоваяСтрока.ЭтоОтветнаяПодпись = Неопределено;
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ТипДокументаСтрокой = "Other";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭТрН;
	НоваяСтрока.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ДопТитул8;
	НоваяСтрока.ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭТрН;
	НоваяСтрока.ТипДокументаДляДополнительныхДанныхСтрокой = "ReplacementInformation";
	НоваяСтрока.ЭтоОтветнаяПодпись = Неопределено;
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ТипДокументаСтрокой = "Other";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭТрН;
	НоваяСтрока.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул5;
	НоваяСтрока.ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭТрН;
	НоваяСтрока.ТипДокументаДляДополнительныхДанныхСтрокой = "ChangesFinancialCondition";
	НоваяСтрока.ЭтоОтветнаяПодпись = Неопределено;
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ТипДокументаСтрокой = "Other";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭТрН;
	НоваяСтрока.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул6;
	НоваяСтрока.ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭТрН;
	НоваяСтрока.ТипДокументаДляДополнительныхДанныхСтрокой = "ChangesFinancialCondition";
	НоваяСтрока.ЭтоОтветнаяПодпись = Неопределено;
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ТипДокументаСтрокой = "Other";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.ИзвещениеОПолучении;
	НоваяСтрока.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул1_ИОП;
	НоваяСтрока.ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭТрН;
	НоваяСтрока.ТипДокументаДляДополнительныхДанныхСтрокой = "SpecificationNotice";
	НоваяСтрока.ЭтоОтветнаяПодпись = Неопределено;
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ТипДокументаСтрокой = "Other";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.УведомлениеОбУточнении;
	НоваяСтрока.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ОткП;
	НоваяСтрока.ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭТрН;
	НоваяСтрока.ТипДокументаДляДополнительныхДанныхСтрокой = "SpecificationNotice";
	НоваяСтрока.ЭтоОтветнаяПодпись = Неопределено;
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ТипДокументаСтрокой = "Other";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.ИзвещениеОПолучении;
	НоваяСтрока.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул3_ИОП;
	НоваяСтрока.ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭТрН;
	НоваяСтрока.ТипДокументаДляДополнительныхДанныхСтрокой = "SpecificationNotice";
	НоваяСтрока.ЭтоОтветнаяПодпись = Неопределено;
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ТипДокументаСтрокой = "Other";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.УведомлениеОбУточнении;
	НоваяСтрока.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ОткТ3;
	НоваяСтрока.ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭТрН;
	НоваяСтрока.ТипДокументаДляДополнительныхДанныхСтрокой = "SpecificationNotice";
	НоваяСтрока.ЭтоОтветнаяПодпись = Неопределено;
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ТипДокументаСтрокой = "Other";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.ИзвещениеОПолучении;
	НоваяСтрока.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул5_ИОП;
	НоваяСтрока.ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭТрН;
	НоваяСтрока.ТипДокументаДляДополнительныхДанныхСтрокой = "SpecificationNotice";
	НоваяСтрока.ЭтоОтветнаяПодпись = Неопределено;
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ТипДокументаСтрокой = "Other";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.УведомлениеОбУточнении;
	НоваяСтрока.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ОткГО;
	НоваяСтрока.ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭТрН;
	НоваяСтрока.ТипДокументаДляДополнительныхДанныхСтрокой = "SpecificationNotice";
	НоваяСтрока.ЭтоОтветнаяПодпись = Неопределено;
	
	// Заказ-наряд
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ТипДокументаСтрокой = "Other";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭЗН;
	НоваяСтрока.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭЗН_Титул1;
	НоваяСтрока.ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭЗН;
	НоваяСтрока.ТипДокументаДляДополнительныхДанныхСтрокой = "ChartererInformation";
	НоваяСтрока.ЭтоОтветнаяПодпись = Неопределено;
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ТипДокументаСтрокой = "Other";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭЗН;
	НоваяСтрока.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭЗН_Титул2;
	НоваяСтрока.ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭЗН;
	НоваяСтрока.ТипДокументаДляДополнительныхДанныхСтрокой = "FreighterInformation";
	НоваяСтрока.ЭтоОтветнаяПодпись = Неопределено;
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ТипДокументаСтрокой = "Other";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭЗН;
	НоваяСтрока.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭЗН_Титул3;
	НоваяСтрока.ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭЗН;
	НоваяСтрока.ТипДокументаДляДополнительныхДанныхСтрокой = "ChartererInformation";
	НоваяСтрока.ЭтоОтветнаяПодпись = Неопределено;
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ТипДокументаСтрокой = "Other";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭЗН;
	НоваяСтрока.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭЗН_Титул4;
	НоваяСтрока.ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭЗН;
	НоваяСтрока.ТипДокументаДляДополнительныхДанныхСтрокой = "FreighterInformation";
	НоваяСтрока.ЭтоОтветнаяПодпись = Неопределено;
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ТипДокументаСтрокой = "Other";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.ИзвещениеОПолучении;
	НоваяСтрока.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭЗН_Титул1_ИОП;
	НоваяСтрока.ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭЗН;
	НоваяСтрока.ТипДокументаДляДополнительныхДанныхСтрокой = "SpecificationNotice";
	НоваяСтрока.ЭтоОтветнаяПодпись = Неопределено;
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ТипДокументаСтрокой = "Other";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.УведомлениеОбУточнении;
	НоваяСтрока.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭЗН_ОткФщ;
	НоваяСтрока.ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭЗН;
	НоваяСтрока.ТипДокументаДляДополнительныхДанныхСтрокой = "SpecificationNotice";
	НоваяСтрока.ЭтоОтветнаяПодпись = Неопределено;
	
	// Сопроводительная ведомость
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ТипДокументаСтрокой = "Other";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭСВ;
	НоваяСтрока.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул1_1;
	НоваяСтрока.ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭСВ;
	НоваяСтрока.ТипДокументаДляДополнительныхДанныхСтрокой = "CarrierInformation";
	НоваяСтрока.ЭтоОтветнаяПодпись = Неопределено;
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ТипДокументаСтрокой = "Other";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭСВ;
	НоваяСтрока.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул1_2;
	НоваяСтрока.ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭСВ;
	НоваяСтрока.ТипДокументаДляДополнительныхДанныхСтрокой = "CarrierInformation";
	НоваяСтрока.ЭтоОтветнаяПодпись = Неопределено;
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ТипДокументаСтрокой = "Other";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭСВ;
	НоваяСтрока.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул1_3;
	НоваяСтрока.ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭСВ;
	НоваяСтрока.ТипДокументаДляДополнительныхДанныхСтрокой = "CarrierInformation";
	НоваяСтрока.ЭтоОтветнаяПодпись = Неопределено;
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ТипДокументаСтрокой = "Other";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭСВ;
	НоваяСтрока.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул1_4;
	НоваяСтрока.ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭСВ;
	НоваяСтрока.ТипДокументаДляДополнительныхДанныхСтрокой = "CarrierInformation";
	НоваяСтрока.ЭтоОтветнаяПодпись = Неопределено;
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ТипДокументаСтрокой = "Other";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭСВ;
	НоваяСтрока.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул1_5;
	НоваяСтрока.ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭСВ;
	НоваяСтрока.ТипДокументаДляДополнительныхДанныхСтрокой = "CarrierInformation";
	НоваяСтрока.ЭтоОтветнаяПодпись = Неопределено;
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ТипДокументаСтрокой = "Other";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭСВ;
	НоваяСтрока.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул2_1;
	НоваяСтрока.ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭСВ;
	НоваяСтрока.ТипДокументаДляДополнительныхДанныхСтрокой = "ShipperInformation";
	НоваяСтрока.ЭтоОтветнаяПодпись = Неопределено;
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ТипДокументаСтрокой = "Other";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭСВ;
	НоваяСтрока.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул2_2;
	НоваяСтрока.ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭСВ;
	НоваяСтрока.ТипДокументаДляДополнительныхДанныхСтрокой = "ShipperInformation";
	НоваяСтрока.ЭтоОтветнаяПодпись = Неопределено;
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ТипДокументаСтрокой = "Other";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭСВ;
	НоваяСтрока.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул3_1;
	НоваяСтрока.ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭСВ;
	НоваяСтрока.ТипДокументаДляДополнительныхДанныхСтрокой = "ConsigneeInformation";
	НоваяСтрока.ЭтоОтветнаяПодпись = Неопределено;
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ТипДокументаСтрокой = "Other";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭСВ;
	НоваяСтрока.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул3_2;
	НоваяСтрока.ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭСВ;
	НоваяСтрока.ТипДокументаДляДополнительныхДанныхСтрокой = "ConsigneeInformation";
	НоваяСтрока.ЭтоОтветнаяПодпись = Неопределено;
	
	// Заказ (заявка)
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ТипДокументаСтрокой = "Other";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭЗЗ;
	НоваяСтрока.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭЗЗ_Титул1;
	НоваяСтрока.ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭЗЗ;
	НоваяСтрока.ТипДокументаДляДополнительныхДанныхСтрокой = "OrderInfo";
	НоваяСтрока.ЭтоОтветнаяПодпись = Неопределено;
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ТипДокументаСтрокой = "Other";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭЗЗ;
	НоваяСтрока.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭЗЗ_Титул2;
	НоваяСтрока.ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭЗЗ;
	НоваяСтрока.ТипДокументаДляДополнительныхДанныхСтрокой = "AcceptOrderInfo";
	НоваяСтрока.ЭтоОтветнаяПодпись = Неопределено;
	
	// Путевой лист
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ТипДокументаСтрокой = "Other";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭПЛ;
	НоваяСтрока.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул1;
	НоваяСтрока.ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭПЛ;
	НоваяСтрока.ТипДокументаДляДополнительныхДанныхСтрокой = "OwnerVehicleInfo";
	НоваяСтрока.ЭтоОтветнаяПодпись = Неопределено;
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ТипДокументаСтрокой = "Other";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭПЛ;
	НоваяСтрока.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул2;
	НоваяСтрока.ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭПЛ;
	НоваяСтрока.ТипДокументаДляДополнительныхДанныхСтрокой = "BeforeMedicalInfo";
	НоваяСтрока.ЭтоОтветнаяПодпись = Неопределено;
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ТипДокументаСтрокой = "Other";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.УведомлениеОбУточнении;
	НоваяСтрока.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭПЛ_ОткМ;
	НоваяСтрока.ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭПЛ;
	НоваяСтрока.ТипДокументаДляДополнительныхДанныхСтрокой = "SpecificationNotice";
	НоваяСтрока.ЭтоОтветнаяПодпись = Неопределено;
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ТипДокументаСтрокой = "Other";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭПЛ;
	НоваяСтрока.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул3;
	НоваяСтрока.ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭПЛ;
	НоваяСтрока.ТипДокументаДляДополнительныхДанныхСтрокой = "BeforeTechnicalInfo";
	НоваяСтрока.ЭтоОтветнаяПодпись = Неопределено;
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ТипДокументаСтрокой = "Other";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭПЛ;
	НоваяСтрока.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул4;
	НоваяСтрока.ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭПЛ;
	НоваяСтрока.ТипДокументаДляДополнительныхДанныхСтрокой = "BeforeOdometerInfo";
	НоваяСтрока.ЭтоОтветнаяПодпись = Неопределено;
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ТипДокументаСтрокой = "Other";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭПЛ;
	НоваяСтрока.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул5;
	НоваяСтрока.ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭПЛ;
	НоваяСтрока.ТипДокументаДляДополнительныхДанныхСтрокой = "AfterOdometerInfo";
	НоваяСтрока.ЭтоОтветнаяПодпись = Неопределено;
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ТипДокументаСтрокой = "Other";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭПЛ;
	НоваяСтрока.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул6;
	НоваяСтрока.ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭПЛ;
	НоваяСтрока.ТипДокументаДляДополнительныхДанныхСтрокой = "AfterMedicalInfo";
	НоваяСтрока.ЭтоОтветнаяПодпись = Неопределено;
	
	// Договор фрахтования
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ТипДокументаСтрокой = "Other";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭДФ;
	НоваяСтрока.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭДФ_Титул1;
	НоваяСтрока.ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭДФ;
	НоваяСтрока.ТипДокументаДляДополнительныхДанныхСтрокой = "EDF_T1";
	НоваяСтрока.ЭтоОтветнаяПодпись = Неопределено;
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ТипДокументаСтрокой = "Other";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.ИзвещениеОПолучении;
	НоваяСтрока.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭДФ_Титул1_ИОП;
	НоваяСтрока.ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭДФ;
	НоваяСтрока.ТипДокументаДляДополнительныхДанныхСтрокой = "SpecificationNotice";
	НоваяСтрока.ЭтоОтветнаяПодпись = Неопределено;
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ТипДокументаСтрокой = "Other";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭДФ;
	НоваяСтрока.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭДФ_Титул2;
	НоваяСтрока.ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭДФ;
	НоваяСтрока.ТипДокументаДляДополнительныхДанныхСтрокой = "EDF_T2";
	НоваяСтрока.ЭтоОтветнаяПодпись = Неопределено;
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ТипДокументаСтрокой = "Other";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭДФ;
	НоваяСтрока.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ЭДФ_ОткФщ;
	НоваяСтрока.ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭДФ;
	НоваяСтрока.ТипДокументаДляДополнительныхДанныхСтрокой = "SpecificationNotice";
	НоваяСтрока.ЭтоОтветнаяПодпись = Неопределено;
	
КонецПроцедуры

// При распознании документа.
// 
// Параметры:
//  ВидСообщения - СправочникСсылка.ВидыДокументовЭДО - Вид сообщения
//  ЭлементСхемы - СтрокаДереваЗначений - Элемент схемы
Процедура ПриРаспознанииДокумента(ВидСообщения, ЭлементСхемы) Экспорт
	
	ТипДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидСообщения, "ТипДокумента");
	Если ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭТрН
		Или ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭЗН
		Или ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭСВ
		Или ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭЗЗ
		Или ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭПЛ
		Или ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭДФ Тогда
		ЭлементСхемы.ФормированиеПоОбъектуУчета = Истина;
		ЭлементСхемы.РаспознаниеВыполнено = Истина;
		ЭлементСхемы.Распознан = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Представление информации отправителя.
// 
// Параметры:
//  ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО - Тип документа
//  НомерДокумента - Строка - Номер документа
//  ДатаДокумента - Дата - Дата документа
// 
// Возвращаемое значение:
//  Строка - Представление информации отправителя
Функция ПредставлениеИнформацииОтправителя(ТипДокумента, НомерДокумента, ДатаДокумента) Экспорт
	
	Если ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭТрН Тогда
		ТитулГрузоотправителяСтрока = НСтр("ru='Информация грузоотправителя (Титул 1)'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭЗН Тогда
		ТитулГрузоотправителяСтрока = НСтр("ru='Информация фрахтователя (Титул 1)'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭСВ Тогда
		ТитулГрузоотправителяСтрока = НСтр("ru='Информации перевозчика (Титул 1)'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭЗЗ Тогда
		ТитулГрузоотправителяСтрока = НСтр("ru='Информация грузоотправителя (Титул 1)'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭПЛ Тогда
		ТитулГрузоотправителяСтрока = НСтр("ru='Информация оформителя (Титул 1)'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭДФ Тогда
		ТитулГрузоотправителяСтрока = НСтр("ru='Информация фрахтователя (Титул 1)'");
	КонецЕсли;
	
	Представление = ТитулГрузоотправителяСтрока;
	Если ЗначениеЗаполнено(НомерДокумента) Тогда
		Представление = Представление + " " + НомерДокумента;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаДокумента) Тогда
		Представление = Представление + " от " + Формат(ДатаДокумента, "ДЛФ=D;");
	КонецЕсли;	

	Возврат Представление;
	
КонецФункции

// Заполнить дополнительных данные карточки ЭПД.
// 
// Параметры:
//  СообщениеЭДО - ДокументСсылка.СообщениеЭДО - Сообщение ЭДО
//  ДополнительныеДанные - Структура - Дополнительные данные
//  ТипДокументаСтрокой - Строка - Тип документа строкой
Процедура ЗаполнитьДополнительныхДанныеКарточкиЭПД(СообщениеЭДО, ДополнительныеДанные, ТипДокументаСтрокой) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(СообщениеЭДО) <> Тип("ДокументСсылка.СообщениеЭДО") Тогда
		Возврат;
	КонецЕсли;
	
	ЭлектронныйДокумент = ЭлектронныеДокументыЭДО.ЭлектронныйДокументСообщенияЭДО(СообщениеЭДО);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	Запрос.Текст = "ВЫБРАТЬ
	|	ЭлектроннаяТранспортнаяНакладная.ВидДокумента,
	|	ЭлектроннаяТранспортнаяНакладная.ИдентификаторГрузоотправителя КАК Грузоотправитель,
	|	ЭлектроннаяТранспортнаяНакладная.ИдентификаторПеревозчика КАК Грузоперевозчик,
	|	ЭлектроннаяТранспортнаяНакладная.ИдентификаторГрузополучателя КАК Грузополучатель,
	|	НЕОПРЕДЕЛЕНО КАК Оформитель,
	|	НЕОПРЕДЕЛЕНО КАК Медосмотр,
	|	НЕОПРЕДЕЛЕНО КАК Техконтроль,
	|	НЕОПРЕДЕЛЕНО КАК Одометр,
	|	ЭлектроннаяТранспортнаяНакладная.ЭтоВходящий КАК ЭтоВходящий,
	|	ЭлектроннаяТранспортнаяНакладная.ТекущийТитул КАК ТекущийТитул,
	|	ЭлектроннаяТранспортнаяНакладная.УИДМинтранс КАК МинтрансИД,
	|	ЭлектроннаяТранспортнаяНакладная.ИныеПолучателиСтрока КАК ИныеПолучателиСтрока
	|ИЗ
	|	РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектроннаяТранспортнаяНакладная КАК ЭлектроннаяТранспортнаяНакладная
	|		ПО ОбъектыУчетаДокументовЭДО.ОбъектУчета = ЭлектроннаяТранспортнаяНакладная.Ссылка
	|ГДЕ
	|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектроннаяСопроводительнаяВедомость.ВидДокумента,
	|	ЭлектроннаяСопроводительнаяВедомость.ИдентификаторГрузоотправителя КАК Грузоотправитель,
	|	ЭлектроннаяСопроводительнаяВедомость.ИдентификаторПеревозчика КАК Грузоперевозчик,
	|	ЭлектроннаяСопроводительнаяВедомость.ИдентификаторГрузополучателя КАК Грузополучатель,
	|	НЕОПРЕДЕЛЕНО КАК Оформитель,
	|	НЕОПРЕДЕЛЕНО КАК Медосмотр,
	|	НЕОПРЕДЕЛЕНО КАК Техконтроль,
	|	НЕОПРЕДЕЛЕНО КАК Одометр,
	|	ЭлектроннаяСопроводительнаяВедомость.ЭтоВходящий КАК ЭтоВходящий,
	|	ЭлектроннаяСопроводительнаяВедомость.ТекущийТитул КАК ТекущийТитул,
	|	ЭлектроннаяСопроводительнаяВедомость.УИДМинтранс КАК МинтрансИД,
	|	""""
	|ИЗ
	|	РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектроннаяСопроводительнаяВедомость КАК ЭлектроннаяСопроводительнаяВедомость
	|		ПО ОбъектыУчетаДокументовЭДО.ОбъектУчета = ЭлектроннаяСопроводительнаяВедомость.Ссылка
	|ГДЕ
	|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронныйЗаказНаряд.ВидДокумента,
	|	ЭлектронныйЗаказНаряд.ИдентификаторФрахтователя КАК Грузоотправитель,
	|	ЭлектронныйЗаказНаряд.ИдентификаторФрахтовщика КАК Грузоперевозчик,
	|	НЕОПРЕДЕЛЕНО КАК Грузополучатель,
	|	НЕОПРЕДЕЛЕНО КАК Оформитель,
	|	НЕОПРЕДЕЛЕНО КАК Медосмотр,
	|	НЕОПРЕДЕЛЕНО КАК Техконтроль,
	|	НЕОПРЕДЕЛЕНО КАК Одометр,
	|	ЭлектронныйЗаказНаряд.ЭтоВходящий КАК ЭтоВходящий,
	|	ЭлектронныйЗаказНаряд.ТекущийТитул КАК ТекущийТитул,
	|	ЭлектронныйЗаказНаряд.УИДМинтранс КАК МинтрансИД,
	|	""""
	|ИЗ
	|	РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйЗаказНаряд КАК ЭлектронныйЗаказНаряд
	|		ПО ОбъектыУчетаДокументовЭДО.ОбъектУчета = ЭлектронныйЗаказНаряд.Ссылка
	|ГДЕ
	|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронныйЗаказЗаявка.ВидДокумента,
	|	ЭлектронныйЗаказЗаявка.ИдентификаторГрузоотправителя КАК Грузоотправитель,
	|	ЭлектронныйЗаказЗаявка.ИдентификаторПеревозчика КАК Грузоперевозчик,
	|	НЕОПРЕДЕЛЕНО КАК Грузополучатель,
	|	НЕОПРЕДЕЛЕНО КАК Оформитель,
	|	НЕОПРЕДЕЛЕНО КАК Медосмотр,
	|	НЕОПРЕДЕЛЕНО КАК Техконтроль,
	|	НЕОПРЕДЕЛЕНО КАК Одометр,
	|	ЭлектронныйЗаказЗаявка.ЭтоВходящий КАК ЭтоВходящий,
	|	ЭлектронныйЗаказЗаявка.ТекущийТитул КАК ТекущийТитул,
	|	ЭлектронныйЗаказЗаявка.УИДМинтранс КАК МинтрансИД,
	|	""""
	|ИЗ
	|	РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйЗаказЗаявка КАК ЭлектронныйЗаказЗаявка
	|		ПО ОбъектыУчетаДокументовЭДО.ОбъектУчета = ЭлектронныйЗаказЗаявка.Ссылка
	|ГДЕ
	|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронныйПутевойЛист.ВидДокумента,
	|	НЕОПРЕДЕЛЕНО КАК Грузоотправитель,
	|	НЕОПРЕДЕЛЕНО КАК Грузоперевозчик,
	|	НЕОПРЕДЕЛЕНО КАК Грузополучатель,
	|	ЭлектронныйПутевойЛист.ИдентификаторОформителя КАК Оформитель,
	|	ЭлектронныйПутевойЛист.ИдентификаторМедорганизации КАК Медосмотр,
	|	ЭлектронныйПутевойЛист.ИдентификаторТехконтроль КАК Техконтроль,
	|	ЭлектронныйПутевойЛист.ИдентификаторПоказанияОдометра КАК Одометр,
	|	ЭлектронныйПутевойЛист.ЭтоВходящий КАК ЭтоВходящий,
	|	ЭлектронныйПутевойЛист.ТекущийТитул КАК ТекущийТитул,
	|	ЭлектронныйПутевойЛист.УИДМинтранс КАК МинтрансИД,
	|	ЭлектронныйПутевойЛист.ИныеПолучателиСтрока
	|ИЗ
	|	РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйПутевойЛист КАК ЭлектронныйПутевойЛист
	|		ПО ОбъектыУчетаДокументовЭДО.ОбъектУчета = ЭлектронныйПутевойЛист.Ссылка
	|ГДЕ
	|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронныйДоговорФрахтования.ВидДокумента,
	|	ЭлектронныйДоговорФрахтования.ИдентификаторФрахтователя КАК Грузоотправитель,
	|	ЭлектронныйДоговорФрахтования.ИдентификаторФрахтовщика КАК Грузоперевозчик,
	|	НЕОПРЕДЕЛЕНО КАК Грузополучатель,
	|	НЕОПРЕДЕЛЕНО КАК Оформитель,
	|	НЕОПРЕДЕЛЕНО КАК Медосмотр,
	|	НЕОПРЕДЕЛЕНО КАК Техконтроль,
	|	НЕОПРЕДЕЛЕНО КАК Одометр,
	|	ЭлектронныйДоговорФрахтования.ЭтоВходящий КАК ЭтоВходящий,
	|	ЭлектронныйДоговорФрахтования.ТекущийТитул КАК ТекущийТитул,
	|	ЭлектронныйДоговорФрахтования.УИДМинтранс КАК МинтрансИД,
	|	""""
	|ИЗ
	|	РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДоговорФрахтования КАК ЭлектронныйДоговорФрахтования
	|		ПО ОбъектыУчетаДокументовЭДО.ОбъектУчета = ЭлектронныйДоговорФрахтования.Ссылка
	|ГДЕ
	|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтрокиТипаНайдено = ДополнительныеДанные.НайтиСтроки(Новый Структура("Имя", "DocumentType"));
		Если СтрокиТипаНайдено.Количество() = 0 Тогда
			НоваяСтрока = ДополнительныеДанные.Добавить();
			НоваяСтрока.Имя = "DocumentType";
			НоваяСтрока.Значение = ТипДокументаСтрокой;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.Грузоотправитель) Тогда
			НоваяСтрока = ДополнительныеДанные.Добавить();
			НоваяСтрока.Имя = "Грузоотправитель";
			НоваяСтрока.Значение = Выборка.Грузоотправитель;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.Грузоперевозчик) Тогда
			НоваяСтрока = ДополнительныеДанные.Добавить();
			НоваяСтрока.Имя = "Грузоперевозчик";
			НоваяСтрока.Значение = Выборка.Грузоперевозчик;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.Оформитель) Тогда
			НоваяСтрока = ДополнительныеДанные.Добавить();
			НоваяСтрока.Имя = "Оформитель";
			НоваяСтрока.Значение = Выборка.Оформитель;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.Медосмотр) Тогда
			НоваяСтрока = ДополнительныеДанные.Добавить();
			НоваяСтрока.Имя = "Медосмотр";
			НоваяСтрока.Значение = Выборка.Медосмотр;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.Техконтроль) Тогда
			НоваяСтрока = ДополнительныеДанные.Добавить();
			НоваяСтрока.Имя = "Техконтроль";
			НоваяСтрока.Значение = Выборка.Техконтроль;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.Одометр) Тогда
			НоваяСтрока = ДополнительныеДанные.Добавить();
			НоваяСтрока.Имя = "Одометр";
			НоваяСтрока.Значение = Выборка.Одометр;
		КонецЕсли;
		
		СостояниеДокументаПодробное = ОбменСГИСЭПДВызовСервера.СостояниеДокументаПодробное(ЭлектронныйДокумент);
		
		ДляФормированияИзвещения = 
			СостояниеДокументаПодробное.Значение = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеИзвещения;
		
		Если ЗначениеЗаполнено(Выборка.Грузополучатель)
			И ДляФормированияИзвещения = Ложь
			И Выборка.ТекущийТитул <> Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул5
			И Выборка.ТекущийТитул <> Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул6
			И Выборка.ТекущийТитул <> Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ОткП
			И Выборка.ТекущийТитул <> Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ОткГО
			И Выборка.ТекущийТитул <> Перечисления.ТипыЭлементовРегламентаЭДО.ЭЗН_ОткФщ Тогда
				Если Выборка.Грузоотправитель <> Выборка.Грузополучатель Тогда
					НоваяСтрока = ДополнительныеДанные.Добавить();
					НоваяСтрока.Имя = "Грузополучатель";
					НоваяСтрока.Значение = Выборка.Грузополучатель;
				КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ИныеПолучателиСтрока) 
			И ДляФормированияИзвещения = Ложь Тогда
			НоваяСтрока = ДополнительныеДанные.Добавить();
			НоваяСтрока.Имя = "OtherReceivers";
			НоваяСтрока.Значение = Выборка.ИныеПолучателиСтрока;	
		КонецЕсли;
		
		НоваяСтрока = ДополнительныеДанные.Добавить();
		НоваяСтрока.Имя = "GisID";
		НоваяСтрока.Значение = Выборка.МинтрансИД;
		
		// Заполним доп. реквизиты, которых нет в формате (а также заголовки и типы данных по тем, которые есть)
		Если ОбменСГИСЭПДКлиентСервер.ИспользуютсяДополнительныеРеквизитыЭПД() = 2 Тогда
			ДеревоГруппДанных = ДеревоГруппДанныхДляДополнительныхПолей(Выборка.ВидДокумента.ТипДокумента);
			ТаблицаГруппДанных = ДеревоВТаблицу(ДеревоГруппДанных);
			
			ЗапросДопРеквизиты = Новый Запрос;
			ЗапросДопРеквизиты.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
			ЗапросДопРеквизиты.УстановитьПараметр("ТекущийТитул", Выборка.ТекущийТитул);
			ЗапросДопРеквизиты.УстановитьПараметр("Таблица", ТаблицаГруппДанных);
			
			МассивМетаданных = Новый Массив;
			МассивМетаданных.Добавить("Заголовок");
			МассивМетаданных.Добавить("ТипДанных");
			МассивМетаданных.Добавить("Квалификаторы");
			МассивМетаданных.Добавить("Перечисления");
			МассивМетаданных.Добавить("Обязательный");
			
			ЗапросДопРеквизиты.УстановитьПараметр("МассивМетаданных", МассивМетаданных);
			
			ЗапросДопРеквизиты.Текст = "ВЫБРАТЬ
			|	Таблица.Путь,
			|	Таблица.ЕстьВФормате
			|ПОМЕСТИТЬ ВТ_ТАБЛИЦА
			|ИЗ
			|	&Таблица КАК Таблица
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЗначенияРеквизитовДокументовЭПД.НомерВерсии,
			|	ЗначенияРеквизитовДокументовЭПД.ИмяТабличнойЧасти,
			|	ЗначенияРеквизитовДокументовЭПД.НомерСтрокиРеквизита,
			|	ЗначенияРеквизитовДокументовЭПД.ИмяРеквизита,
			|	ЗначенияРеквизитовДокументовЭПД.ЗначениеРеквизита,
			|	ЗначенияРеквизитовДокументовЭПД.ЗначениеРеквизитаСсылка,
			|	ЗначенияРеквизитовДокументовЭПД.ЗначениеРеквизитаСтрока,
			|	ЗначенияРеквизитовДокументовЭПД.ТипРеквизита
			|ПОМЕСТИТЬ ВТ_РЕКВИЗИТЫ
			|ИЗ
			|	РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияРеквизитовДокументовЭПД КАК ЗначенияРеквизитовДокументовЭПД
			|		ПО ОбъектыУчетаДокументовЭДО.ОбъектУчета = ЗначенияРеквизитовДокументовЭПД.Документ
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТАБЛИЦА
			|		ПО ЗначенияРеквизитовДокументовЭПД.Титул = &ТекущийТитул
			|		И (ЗначенияРеквизитовДокументовЭПД.ИмяТабличнойЧасти = ВТ_ТАБЛИЦА.Путь + ""ИнформационныеПоля""
			|		ИЛИ ЗначенияРеквизитовДокументовЭПД.ИмяТабличнойЧасти = ВТ_ТАБЛИЦА.Путь + ""ДополнительнаяИнформация"")
			|		И (ВТ_ТАБЛИЦА.ЕстьВФормате = ЛОЖЬ
			|		ИЛИ ЗначенияРеквизитовДокументовЭПД.ИмяРеквизита В (&МассивМетаданных))
			|ГДЕ
			|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МАКСИМУМ(ВТ_РЕКВИЗИТЫ.НомерВерсии) КАК НомерВерсии
			|ПОМЕСТИТЬ ВТ_ВЕРСИЯ
			|ИЗ
			|	ВТ_РЕКВИЗИТЫ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_РЕКВИЗИТЫ.НомерВерсии,
			|	ВТ_РЕКВИЗИТЫ.ИмяТабличнойЧасти,
			|	ВТ_РЕКВИЗИТЫ.НомерСтрокиРеквизита,
			|	ВТ_РЕКВИЗИТЫ.ИмяРеквизита,
			|	ВТ_РЕКВИЗИТЫ.ЗначениеРеквизита,
			|	ВТ_РЕКВИЗИТЫ.ЗначениеРеквизитаСсылка,
			|	ВТ_РЕКВИЗИТЫ.ЗначениеРеквизитаСтрока,
			|	ВТ_РЕКВИЗИТЫ.ТипРеквизита
			|ИЗ
			|	ВТ_РЕКВИЗИТЫ КАК ВТ_РЕКВИЗИТЫ
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ВЕРСИЯ
			|		ПО ВТ_РЕКВИЗИТЫ.НомерВерсии = ВТ_ВЕРСИЯ.НомерВерсии";
			
			ВыборкаДопРеквизиты = ЗапросДопРеквизиты.Выполнить().Выбрать();
			Пока ВыборкаДопРеквизиты.Следующий() Цикл
				НоваяСтрока = ДополнительныеДанные.Добавить();
				НоваяСтрока.Имя = ВыборкаДопРеквизиты.ИмяТабличнойЧасти 
					+ "__" + ВыборкаДопРеквизиты.НомерСтрокиРеквизита
					+ "__" + ВыборкаДопРеквизиты.ИмяРеквизита;
				Если ВыборкаДопРеквизиты.ТипРеквизита = Перечисления.ТипыРеквизитовЭПД.СсылочныйТип Тогда
					ЗначениеРеквизита = XMLСтрока(ВыборкаДопРеквизиты.ЗначениеРеквизитаСсылка);
				ИначеЕсли ВыборкаДопРеквизиты.ТипРеквизита = Перечисления.ТипыРеквизитовЭПД.НеограниченнаяСтрока Тогда
					ЗначениеРеквизита = ВыборкаДопРеквизиты.ЗначениеРеквизитаСтрока;
				Иначе
					ЗначениеРеквизита = XMLСтрока(ВыборкаДопРеквизиты.ЗначениеРеквизита);
				КонецЕсли;
				НоваяСтрока.Значение = ЗначениеРеквизита;	
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// При формировании таблицы типов элементов регламента.
// 
// Параметры:
//  Таблица - ТаблицаЗначений - Таблица
Процедура ПриФормированииТаблицыТиповЭлементовРегламента(Таблица) Экспорт
	
	// ЭТрН
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
	"ShipperInformation", Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул1);
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
	"CarrierInformationAcceptanceCargo", Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул2);
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
	"ConsigneeInformation", Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул3);
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
	"CarrierInformationDeliveryCargo", Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул4);
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
	"RequireChangeDeliveryPoint", Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул9);
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
	"ReaddressingInformation", Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул7);
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
	"ReplacementInformation", Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул8);
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
	"CarrierInformation", Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул5);
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
	"ShipperInformationFinancial", Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул6);
	
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
	"RequireChangeDeliveryPointReturn", Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ДопТитул9);
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
	"ReaddressingInformationReturn", Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ДопТитул7);
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
	"ReplacementInformationReturn", Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ДопТитул8);
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
	"ConsigneeInformationReturn", Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ДопТитул3);
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
	"CarrierInformationDeliveryCargoReturn", Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ДопТитул4);
	
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
	"ConsigneeCancellationOfferResign", Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул1_ИОП);
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
	"ConsigneeCancellationOfferReject", Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ОткП);
	
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
	"CarrierCancellationOfferResign", Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул3_ИОП);
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
	"CarrierCancellationOfferReject", Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ОткТ3);
	
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
	"ShipperCancellationOfferResign", Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул5_ИОП);
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
	"ShipperCancellationOfferReject", Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ОткГО);
	
	// Заказ-наряд
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
	"ChartererInformation", Перечисления.ТипыЭлементовРегламентаЭДО.ЭЗН_Титул1);
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
	"FreighterInformation", Перечисления.ТипыЭлементовРегламентаЭДО.ЭЗН_Титул2);
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
	"ChartererInformationDeliveryTransport", Перечисления.ТипыЭлементовРегламентаЭДО.ЭЗН_Титул3);
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
	"FreighterInformationReturnTransport", Перечисления.ТипыЭлементовРегламентаЭДО.ЭЗН_Титул4);
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
	"FreighterCancellationOfferReject", Перечисления.ТипыЭлементовРегламентаЭДО.ЭЗН_ОткФщ);
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
	"FreighterCancellationOfferResign", Перечисления.ТипыЭлементовРегламентаЭДО.ЭЗН_Титул1_ИОП);
	
	// Сопроводительная ведомость
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
	"CarrierInformation_1", Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул1_1);//CarrierInformationStatements
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
	"CarrierInformation_2", Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул1_2);
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
	"CarrierInformation_3", Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул1_3);//CarrierInformationLoadedContainer
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
	"CarrierInformation_4", Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул1_4);//CarrierInformationEmptyContainer
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
	"CarrierInformation_5", Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул1_5);
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
	"ShipperInformation_1", Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул2_1);//ShipperInformationStatements
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
	"ShipperInformation_2", Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул2_2);
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
	"ConsigneeInformation_1", Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул3_1);//ConsigneeInformationStatements
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
	"ConsigneeInformation_2", Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул3_2);
	
	// Заказ (заявка)
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
	"SendOrder", Перечисления.ТипыЭлементовРегламентаЭДО.ЭЗЗ_Титул1);
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
	"AcceptOrder", Перечисления.ТипыЭлементовРегламентаЭДО.ЭЗЗ_Титул2);
	
	// Путевой лист
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
	"OwnerVehicleInfo", Перечисления.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул1);
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
	"BeforeMedicalCheck", Перечисления.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул2);
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
	"UOUMedicalCheck", Перечисления.ТипыЭлементовРегламентаЭДО.ЭПЛ_ОткМ);
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
	"BeforeTechnicalCheck", Перечисления.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул3);
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
	"BeforeOdometerCheck", Перечисления.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул4);
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
	"AfterOdometerCheck", Перечисления.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул5);
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
	"AfterMedicalCheck", Перечисления.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул6);
	
	// Договор фрахтования
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
	"TransactionEDF_T1", Перечисления.ТипыЭлементовРегламентаЭДО.ЭДФ_Титул1);
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
	"TransactionEDF_T2", Перечисления.ТипыЭлементовРегламентаЭДО.ЭДФ_Титул2);
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
	"IOPTransactionEDF_T1", Перечисления.ТипыЭлементовРегламентаЭДО.ЭДФ_Титул1_ИОП);
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
	"UOUTransactionEDF_T1", Перечисления.ТипыЭлементовРегламентаЭДО.ЭДФ_ОткФщ);
	
КонецПроцедуры

// При формировании таблицы типов регламентов.
// 
// Параметры:
//  Таблица - ТаблицаЗначений - Таблица
Процедура ПриФормированииТаблицыТиповРегламентов(Таблица) Экспорт
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.КодРегламента = "ConsignmentNote";
	НоваяСтрока.ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭТрН;
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.КодРегламента = "PurchaseOrder";
	НоваяСтрока.ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭЗН;
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.КодРегламента = "AccompanyingStatements";
	НоваяСтрока.ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭСВ;
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.КодРегламента = "Order";
	НоваяСтрока.ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭЗЗ;
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.КодРегламента = "Waybill";
	НоваяСтрока.ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭПЛ;
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.КодРегламента = "CharteringContract";
	НоваяСтрока.ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭДФ;
	
КонецПроцедуры

// При определении информации отправителя.
// 
// Параметры:
//  ТипРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО - Тип регламента
//  ДанныеЭлементовСхемы - ДеревоЗначений - Данные элементов схемы
//  ИнформацияОтправителя - СтрокаДереваЗначений - Информация отправителя
Процедура ПриОпределенииИнформацииОтправителя(Знач ТипРегламента, Знач ДанныеЭлементовСхемы, ИнформацияОтправителя) Экспорт
	
	Если ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭТрН Тогда
		ИнформацияОтправителя = ДанныеЭлементовСхемы.Найти(
			Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул1, "ТипЭлементаРегламента");
	ИначеЕсли ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭЗН Тогда
		ИнформацияОтправителя = ДанныеЭлементовСхемы.Найти(
			Перечисления.ТипыЭлементовРегламентаЭДО.ЭЗН_Титул1, "ТипЭлементаРегламента");
	ИначеЕсли ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭСВ Тогда
		ИнформацияОтправителя = ДанныеЭлементовСхемы.Найти(
			Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул1_1, "ТипЭлементаРегламента");	
		Если ИнформацияОтправителя = Неопределено Тогда
			ИнформацияОтправителя = ДанныеЭлементовСхемы.Найти(
				Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул1_2, "ТипЭлементаРегламента");	
		КонецЕсли;
		Если ИнформацияОтправителя = Неопределено Тогда
			ИнформацияОтправителя = ДанныеЭлементовСхемы.Найти(
				Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул1_5, "ТипЭлементаРегламента");	
		КонецЕсли;
	ИначеЕсли ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭЗЗ Тогда
		ИнформацияОтправителя = ДанныеЭлементовСхемы.Найти(
			Перечисления.ТипыЭлементовРегламентаЭДО.ЭЗЗ_Титул1, "ТипЭлементаРегламента");
	ИначеЕсли ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭПЛ Тогда
		ИнформацияОтправителя = ДанныеЭлементовСхемы.Найти(
			Перечисления.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул1, "ТипЭлементаРегламента");
	ИначеЕсли ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭДФ Тогда
		ИнформацияОтправителя = ДанныеЭлементовСхемы.Найти(
			Перечисления.ТипыЭлементовРегламентаЭДО.ЭДФ_Титул1, "ТипЭлементаРегламента");
	КонецЕсли;
	
КонецПроцедуры

// Очистить актуальность электронного документа.
// 
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка - Электронный документ
//  Очистить - Булево - Очистить
Процедура ОчиститьАктуальностьЭлектронногоДокумента(ЭлектронныйДокумент, Очистить = Ложь) Экспорт
	
	Если Очистить = Истина Тогда
		НаборЗаписей = РегистрыСведений.ОбъектыУчетаДокументовЭДО.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ЭлектронныйДокумент.Установить(ЭлектронныйДокумент);
		
		ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировкуПоНаборуЗаписей(НаборЗаписей);
		
		НаборЗаписей.Прочитать();
		
		ОбъектыУчета = Новый Массив;
		
		Для каждого Запись Из НаборЗаписей Цикл
			Если Запись.Актуальный Тогда
				Запись.Актуальный = Ложь;
				ОбъектыУчета.Добавить(Запись.ОбъектУчета);
			КонецЕсли;
		КонецЦикла;
		
		Если НаборЗаписей.Модифицированность() Тогда
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// При определении используемых типов электронных документов.
// 
// Параметры:
//  АктуальныеТипы - Массив из ПеречислениеСсылка.ТипыДокументовЭДО - Актуальные типы
Процедура ПриОпределенииИспользуемыхТиповЭлектронныхДокументов(АктуальныеТипы) Экспорт
	
	Если ИспользоватьЭПД() Тогда
		ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(
			АктуальныеТипы, Перечисления.ТипыДокументовЭДО.ЭТрН, Истина, Истина);
		ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(
			АктуальныеТипы, Перечисления.ТипыДокументовЭДО.ЭЗН, Истина, Истина);
		ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(
			АктуальныеТипы, Перечисления.ТипыДокументовЭДО.ЭСВ, Истина, Истина);
		ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(
			АктуальныеТипы, Перечисления.ТипыДокументовЭДО.ЭЗЗ, Истина, Истина);
		ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(
			АктуальныеТипы, Перечисления.ТипыДокументовЭДО.ЭПЛ, Истина, Истина);
		ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(
			АктуальныеТипы, Перечисления.ТипыДокументовЭДО.ЭДФ, Истина, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Представление исходящих видов электронных документов.
// 
// Параметры:
//  ПредставленияЭПД - Соответствие из КлючИЗначение - Представления ЭПД
Процедура ПредставлениеИсходящихВидовЭлектронныхДокументов(ПредставленияЭПД) Экспорт
	
	ПредставленияЭПД.Вставить(Перечисления.ТипыДокументовЭДО.ЭТрН, НСтр("ru = 'Электронные транспортные накладные'"));
	ПредставленияЭПД.Вставить(Перечисления.ТипыДокументовЭДО.ЭЗН, НСтр("ru = 'Электронные заказ-наряды'"));
	ПредставленияЭПД.Вставить(Перечисления.ТипыДокументовЭДО.ЭСВ, НСтр("ru = 'Электронные сопроводительные ведомости'"));
	ПредставленияЭПД.Вставить(Перечисления.ТипыДокументовЭДО.ЭЗЗ, НСтр("ru = 'Электронные заказы (заявки)'"));
	ПредставленияЭПД.Вставить(Перечисления.ТипыДокументовЭДО.ЭПЛ, НСтр("ru = 'Электронные путевые листы'"));
	ПредставленияЭПД.Вставить(Перечисления.ТипыДокументовЭДО.ЭДФ, НСтр("ru = 'Электронные договоры фрахтования'"));
	
КонецПроцедуры

// Способы отражения в учете типа электронного документа.
// 
// Параметры:
//  ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО - Тип документа
//  СпособыОтраженияВУчете - Соответствие из КлючИЗначение - Способы отражения в учете
Процедура СпособыОтраженияВУчетеТипаЭлектронногоДокумента(ТипДокумента, СпособыОтраженияВУчете) Экспорт

	Если ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭТрН Тогда	
		СпособыОтраженияВУчете.Добавить("ЭлектроннаяТранспортнаяНакладная", НСтр("ru = 'Электронная транспортная накладная'"), Истина);
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭЗН Тогда	
		СпособыОтраженияВУчете.Добавить("ЭлектронныйЗаказНаряд", НСтр("ru = 'Электронный заказ-наряд'"), Истина);
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭСВ Тогда	
		СпособыОтраженияВУчете.Добавить("ЭлектроннаяСопроводительнаяВедомость", НСтр("ru = 'Электронная сопроводительная ведомость'"), Истина);
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭЗЗ Тогда	
		СпособыОтраженияВУчете.Добавить("ЭлектронныйЗаказЗаявка", НСтр("ru = 'Электронный заказ (заявка)'"), Истина);
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭПЛ Тогда	
		СпособыОтраженияВУчете.Добавить("ЭлектронныйПутевойЛист", НСтр("ru = 'Электронный путевой лист'"), Истина);
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭДФ Тогда	
		СпособыОтраженияВУчете.Добавить("ЭлектронныйДоговорФрахтования", НСтр("ru = 'Электронный договор фрахтования'"), Истина);
	КонецЕсли;
	
КонецПроцедуры

// Сохранить данные объекта ВБД.
// 
// Параметры:
//  СтрокаДляЗагрузки - СтрокаДереваЗначений - Строка для загрузки
//  ДеревоРазбора - ДеревоЗначений - Дерево разбора
//  ПараметрыОбработки - Структура - Параметры обработки
//  НайденныйОбъект - ДокументСсылка - Найденный объект
Процедура СохранитьДанныеОбъектаВБД(СтрокаДляЗагрузки, ДеревоРазбора, ПараметрыОбработки, НайденныйОбъект) Экспорт
	
	Если СтрокаДляЗагрузки.ВидЭД = Перечисления.ТипыДокументовЭДО.ЭТрН
		Или СтрокаДляЗагрузки.ВидЭД = Перечисления.ТипыДокументовЭДО.ЭЗН
		Или СтрокаДляЗагрузки.ВидЭД = Перечисления.ТипыДокументовЭДО.ЭСВ
		Или СтрокаДляЗагрузки.ВидЭД = Перечисления.ТипыДокументовЭДО.ЭЗЗ
		Или СтрокаДляЗагрузки.ВидЭД = Перечисления.ТипыДокументовЭДО.ЭПЛ
		Или СтрокаДляЗагрузки.ВидЭД = Перечисления.ТипыДокументовЭДО.ЭДФ Тогда	
		НайденныйОбъект = НайтиСоздатьЭПД(СтрокаДляЗагрузки.ЗначениеРеквизита, ДеревоРазбора, ПараметрыОбработки, НайденныйОбъект);			
	КонецЕсли;
	
КонецПроцедуры

// Имя документа по типу.
// 
// Параметры:
//  ТипДокумента - Произвольный, ПеречислениеСсылка.ТипыДокументовЭДО - Тип документа
// 
// Возвращаемое значение:
//  Строка, Неопределено - Имя документа по типу
Функция ИмяДокументаПоТипу(ТипДокумента) Экспорт
	
	ИмяДокумента = Неопределено;
	
	Если ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭТрН Тогда
		ИмяДокумента = "ЭлектроннаяТранспортнаяНакладная";
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭЗН Тогда
		ИмяДокумента = "ЭлектронныйЗаказНаряд";
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭСВ Тогда
		ИмяДокумента = "ЭлектроннаяСопроводительнаяВедомость";
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭЗЗ Тогда
		ИмяДокумента = "ЭлектронныйЗаказЗаявка";
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭПЛ Тогда
		ИмяДокумента = "ЭлектронныйПутевойЛист";
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭДФ Тогда
		ИмяДокумента = "ЭлектронныйДоговорФрахтования";
	КонецЕсли;

	Возврат ИмяДокумента;
	
КонецФункции

// Отметить исправление документа.
// 
// Параметры:
//  ОбъектУчета - ДокументСсылка.ЭлектроннаяТранспортнаяНакладная, ДокументСсылка.ЭлектроннаяСопроводительнаяВедомость, ДокументСсылка.ЭлектронныйЗаказНаряд - Объект учета
//  Отметка - Булево - Отметка
Процедура ОтметитьИсправлениеДокумента(ОбъектУчета, Отметка = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(ОбъектУчета) = Тип("ДокументСсылка.ЭлектронныйДокументВходящийЭДО")
		Или ТипЗнч(ОбъектУчета) = Тип("ДокументСсылка.ЭлектронныйДокументИсходящийЭДО") Тогда
		ЭлектронныйДокумент = ОбъектУчета;	
	Иначе
		ЭлектронныйДокумент = ИнтеграцияЭДО.ОсновнойЭлектронныйДокументОбъектаУчета(ОбъектУчета);
	КонецЕсли;
	
	Если ЭлектронныйДокумент.Исправлен = Отметка Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();	
	Попытка				
		ТекстыЗапроса = Новый Массив;
		ТекстыЗапроса.Добавить(ЭлектронныеДокументыЭДО.ТекстЗапросаСостоянияДокумента());
		ТекстыЗапроса.Добавить(ТекстЗапросаСостоянияСообщений());

		Запрос = Новый Запрос;
		Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
		Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		Если РезультатыЗапроса[0].Пустой()
			ИЛИ РезультатыЗапроса[1].Пустой() Тогда
				ВызватьИсключение НСтр("ru='Не удалось установить отметку об исправлении, т.к. сообщение не найдено'");
		КонецЕсли;
		
		ВыборкаСостояния = РезультатыЗапроса[0].Выбрать();
		ВыборкаСостояния.Следующий();
		
		СостоянияСообщений = РезультатыЗапроса[1].Выгрузить();
				
		ДокументОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
		ДокументОбъект.Исправлен = Отметка;
		ДокументОбъект.Записать();
		
		ДатаИзменения = ТекущаяДатаСеанса();
		
		ЭтоВходящийЭДО = ТипЗнч(ЭлектронныйДокумент) = Тип("ДокументСсылка.ЭлектронныйДокументВходящийЭДО");
		
		ПараметрыДокументаДляОпределенияСостояния = РегламентыЭДО.НовыеПараметрыДокументаДляОпределенияСостояния(); 
		ЗаполнитьЗначенияСвойств(ПараметрыДокументаДляОпределенияСостояния, ДокументОбъект);
	
		СостояниеДокумента = РегламентыЭДО.СостояниеДокумента(ПараметрыДокументаДляОпределенияСостояния,
			СостоянияСообщений, ЭтоВходящийЭДО);
		
		ЗаписатьСостояниеДокумента(ДокументОбъект.Ссылка, СостояниеДокумента, "",
			ДатаИзменения);
			
		КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
		ЭлектронныеДокументыЭДОСобытия.ПриИзмененииСостоянияЭлектронногоДокумента(ДокументОбъект.Ссылка, СостояниеДокумента,
			КонтекстДиагностики);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

Процедура ДобавитьБаннер(Форма) Экспорт
	
	ИмяБаннера = "НовостьОМобильномПриложенииЭПД";
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД.СервисВзаимодействияМПЭПД") Тогда	
		Если ОбменСГИСЭПДВызовСервера.ПолучитьПризнакЗакрытияБаннера(ИмяБаннера) = Истина Тогда
			Возврат;
		КонецЕсли;
		
		МассивРеквизитовДобавления = Новый Массив;
		МассивРеквизитовДобавления.Добавить(Новый РеквизитФормы("Баннер", Новый ОписаниеТипов("Строка")) );
		Форма.ИзменитьРеквизиты(МассивРеквизитовДобавления);
		
		ТекстБаннера = "<h1>Мобильное приложение 1С-ЭПД для водителей</h1>
			|<p>Доступно в <b>Google Play</b> и <b>App Store</b></p>
			|<p>Приложение бесплатное</p>";
		ЛеваяКартинка = БиблиотекаКартинок["ДекорацияТелефоныМПЭПДБЭД"];
		ПраваяКартинка = БиблиотекаКартинок["QRКодПодключенияМПЭПДБЭД"];
		
		Форма.Баннер = ТекстБаннераHTML(ТекстБаннера, ЛеваяКартинка, ПраваяКартинка, "https://mobile.1c.ru/1c-epd/");
		
		ГруппаБаннер = Форма.Элементы.Вставить("ГруппаБаннер", Тип("ГруппаФормы"), Форма, Форма.ПодчиненныеЭлементы[0]);
		ГруппаБаннер.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаБаннер.РастягиватьПоГоризонтали = Истина;
		ГруппаБаннер.ОтображатьЗаголовок = Ложь;
		
		ПолеБаннер = Форма.Элементы.Добавить(ИмяБаннера, Тип("ПолеФормы"), ГруппаБаннер);
		ПолеБаннер.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ПолеБаннер.ПутьКДанным = "Баннер";
		ПолеБаннер.Вид = ВидПоляФормы.ПолеHTMLДокумента;
		ПолеБаннер.Высота = 4;
		ПолеБаннер.АвтоМаксимальнаяВысота = Ложь;
		ПолеБаннер.МаксимальнаяВысота = 4;
		ПолеБаннер.РастягиватьПоВертикали = Ложь;
		ПолеБаннер.ПропускатьПриВводе = Истина;
		ПолеБаннер.Вывод = ИспользованиеВывода.Запретить;
		ПолеБаннер.ЦветРамки = ЦветаСтиля.ЦветФонаФормы;
		
		Команда = Форма.Команды.Добавить(ИмяБаннера + "Закрыть");
		Команда.Заголовок = "Закрыть";
	    Команда.Действие = "Подключаемый_КомандаБаннерЗакрыть";
	    НовЭлемент = Форма.Элементы.Добавить(ИмяБаннера + "Закрыть", Тип("КнопкаФормы"), Форма.Элементы[ИмяБаннера + "КонтекстноеМеню"]);
	    НовЭлемент.ИмяКоманды = ИмяБаннера + "Закрыть";
		
		ПолеБаннер.УстановитьДействие("ПриНажатии", "Подключаемый_БаннерПриНажатии");
	КонецЕсли;
	
КонецПроцедуры

// Текст Баннера HTML.
// 
// Параметры:
//  ТекстБаннера - Строка - Текст Баннера
//  ЛеваяКартинка - Картинка - Левая картинка
//  ПраваяКартинка - Картинка - Правая картинка
// 
// Возвращаемое значение:
//  Строка - Текст Баннера HTML
Функция ТекстБаннераHTML(ТекстБаннера, ЛеваяКартинка, ПраваяКартинка, СсылкаПравойКартинки = Неопределено) Экспорт
	
	Поток = Новый ПотокВПамяти();
	ЛеваяКартинка.Записать(Поток);
	ЛеваяКартинкаBase64 = ПолучитьBase64СтрокуИзДвоичныхДанных(Поток.ЗакрытьИПолучитьДвоичныеДанные());
	ЛеваяКартинкаBase64 = СтрЗаменить(ЛеваяКартинкаBase64, Символы.ВК, "");
	ЛеваяКартинкаBase64 = СтрЗаменить(ЛеваяКартинкаBase64, Символы.ПС, "");
	
	Поток = Новый ПотокВПамяти();
	ПраваяКартинка.Записать(Поток);
	ПраваяКартинкаBase64 = ПолучитьBase64СтрокуИзДвоичныхДанных(Поток.ЗакрытьИПолучитьДвоичныеДанные());
	ПраваяКартинкаBase64 = СтрЗаменить(ПраваяКартинкаBase64, Символы.ВК, "");
	ПраваяКартинкаBase64 = СтрЗаменить(ПраваяКартинкаBase64, Символы.ПС, "");
	
	ФонSVG = "<svg width=""1920"" height=""115"" viewBox=""0 0 1920 115"" fill=""none"" xmlns=""http://www.w3.org/2000/svg"">
		|<rect width=""1920"" height=""115"" fill=""#FEE001""/>
		|<path fill-rule=""evenodd"" clip-rule=""evenodd"" d=""M308.831 115C194.413 75.5928 97.0439 28.8059 50.7607 0H1405C1264.99 51.2132 1082.79 84.9679 916.366 115H308.831Z"" fill=""#EEF0F5""/>
		|</svg>";
		
	ФонBase64 = ПолучитьBase64СтрокуИзДвоичныхДанных(ПолучитьДвоичныеДанныеИзСтроки(ФонSVG));
	ФонBase64 = СтрЗаменить(ФонBase64, Символы.ВК, "");
	ФонBase64 = СтрЗаменить(ФонBase64, Символы.ПС, "");
	
	КрестикSVG = "<svg fill=""none"" height=""26"" viewBox=""0 0 26 26"" width=""26"" xmlns=""http://www.w3.org/2000/svg"">
		|<path d=""M13 25C19.6274 25 25 19.6274 25 13C25 6.37258 19.6274 1 13 1C6.37258 1 1 6.37258 1 13C1 19.6274 6.37258 25 13 25Z"" stroke=""#4F4F4F"" stroke-linecap=""round"" stroke-miterlimit=""10"" stroke-width=""2""/>
		|<path d=""M9 9.5L16.7 17.3"" stroke=""#4F4F4F"" stroke-linecap=""round"" stroke-miterlimit=""10"" stroke-width=""2""/>
		|<path d=""M16.7 9.5L9 17.3"" stroke=""#4F4F4F"" stroke-linecap=""round"" stroke-miterlimit=""10"" stroke-width=""2""/>
		|</svg>";
		
	КрестикBase64 = ПолучитьBase64СтрокуИзДвоичныхДанных(ПолучитьДвоичныеДанныеИзСтроки(КрестикSVG));
	КрестикBase64 = СтрЗаменить(КрестикBase64, Символы.ВК, "");
	КрестикBase64 = СтрЗаменить(КрестикBase64, Символы.ПС, "");
	
	Результат = "<html>
	|<head>
	|  <meta charset=""utf-8"">
	|  <title>background</title>
	|  <style>
	|   html {
	|		height: 100px;
    |   	background: url(""data:image/svg+xml;base64," + ФонBase64 + """);
	|		background-repeat: no-repeat;
	|		background-size: auto 100%;
	|		overflow: hidden;
	|   }
	|   body {
	|		margin: 0;
	|		overflow: hidden;
	|   }
	|   .column {
	|		float: left;
	|		margin-right: 5px;
	|		width: 30%;
	|		position: relative;
	|		height: 100%;
	|   }
	|	.text {
	|		font-family:Calibri;
	|		font-size:16px;
	|		margin-block: 0.7vw;
	|		width: 35%;
	|	}
	|	.text h1 {
	|		font-family:Calibri;
	|		font-weight:bold;
	|		font-size:18px;
	|		margin-top: 7px;
	|		margin-bottom: 7px;
	|	}
	|	.text p {
	|		margin: 0;
	|		overflow: hidden;
	|	}
	|   img {
	|		height: 100%;
	|		position: absolute;
	|		margin: auto;
	|		left: 0;
	|		top: 0;
	|		bottom: 0;
	|		right: 0;
	|   }
	|	.close {
	|		width: 2%;
	|		max-width: 20px;
	|	    float: right;
	|	   }
	|	.close img {
	|		height: 20px;
	|		padding-top: 5px;
	|		padding-right: 3px;
	|	   }
	|	.close img {
	|		margin-top: 0;
	|	}
	|  </style>
	|</head>
	|<body>
	|	<div class=""column"">
	|		<img src=""data:image/gif;base64," + ЛеваяКартинкаBase64 + """>
	|	</div>
	|	<div class=""column text"">
	|		<div>
	|			" + ТекстБаннера + "
	|		</div>
	|	</div>
	|	<div class=""column"">" + ?(СсылкаПравойКартинки = Неопределено, "", "
	|	<a href=""" + СсылкаПравойКартинки + """>") + "
	|		<img style=""height: 85%;"" src=""data:image/gif;base64," + ПраваяКартинкаBase64 + """>
	|	</div>" + ?(СсылкаПравойКартинки = Неопределено, "", "
	|	</a>") + ?(ОбщегоНазначения.ЭтоВебКлиент() = Ложь, "
	|	<div class=""column close"">
	|		<a href=""#closeBannerEPD"">
	|			<img src=""data:image/svg+xml;base64," + КрестикBase64 + """>
	|		</a>
	|	</div>", "") + "
	|</body>
	|</html>";

	Возврат Результат;
		
КонецФункции

// Разделить строку пробелами.
// 
// Параметры:
//  Строка - Строка, ФорматированнаяСтрока - Строка
//  ТолькоПоследнее - Булево - Только последнее представление (для пути данных колонки таблицы)
//  ПрефиксУдалить - Неопределено, Строка, Массив - Префикс(ы) строки, который нужно удалить
// 
// Возвращаемое значение:
//  Строка - Строка разделенная пробелами
Функция РазделитьСтрокуПробелами(Строка, ТолькоПоследнее = Истина, ПрефиксУдалить = Неопределено) Экспорт
	
	Если ТолькоПоследнее = Истина Тогда
		МассивЧастей = СтрРазделить(Строка, ".");
		Представление = МассивЧастей[МассивЧастей.ВГраница()];
	Иначе
		Представление = Строка;
	КонецЕсли;
	
	Если ПрефиксУдалить <> Неопределено Тогда
		Если ТипЗнч(ПрефиксУдалить) = Тип("Строка") И СтрНачинаетсяС(Представление, ПрефиксУдалить) Тогда
			Представление = Прав(Представление, СтрДлина(Представление) - СтрДлина(ПрефиксУдалить));
		ИначеЕсли ТипЗнч(ПрефиксУдалить) = Тип("Массив") Тогда
			Для Каждого ПрефиксМассива Из ПрефиксУдалить Цикл
				Если СтрНачинаетсяС(Представление, ПрефиксМассива) Тогда
					Представление = Прав(Представление, СтрДлина(Представление) - СтрДлина(ПрефиксМассива));
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;
	КонецЕсли;
	
	Результат = "";
	ДлинаСтроки = СтрДлина(Представление);
	Для НомерСимвола = 1 По ДлинаСтроки - 2 Цикл
		
		ТекущийСимвол = Сред(Представление, НомерСимвола, 1);
		
		Если ТекущийСимвол = "_" Или ТекущийСимвол = " " Тогда
			Результат = Результат + " ";
			Продолжить;
		КонецЕсли;
	
		СледующийСимвол = Сред(Представление, НомерСимвола + 1, 1);
		СимволЧерезОдин = Сред(Представление, НомерСимвола + 2, 1);
		
		ДальшеЗаглавныеПодряд = (ВРег(СледующийСимвол) = СледующийСимвол) И (ВРег(СимволЧерезОдин) = СимволЧерезОдин);
	
		Если Прав(Результат, 1) = " " 
			И ДальшеЗаглавныеПодряд = Ложь Тогда
			Результат = Результат + НРег(ТекущийСимвол);
		Иначе
			Результат = Результат + ТекущийСимвол;
		КонецЕсли;
		
		// После строчной буквы идет заглавная 
		Если НРег(ТекущийСимвол) = ТекущийСимвол 
			И ВРег(СледующийСимвол) = СледующийСимвол Тогда
		 	Результат = Результат + " ";
		// После несколькиз заглавных букв подряд идет строчная буква
		ИначеЕсли ВРег(ТекущийСимвол) = ТекущийСимвол 
			И ВРег(СледующийСимвол) = СледующийСимвол
			И НРег(СимволЧерезОдин) = СимволЧерезОдин
			И СимволЧерезОдин <> "_" И СимволЧерезОдин <> " " Тогда
		 	Результат = Результат + " ";
		КонецЕсли;
	КонецЦикла;
	Результат = Результат + Прав(Представление, 2);
	Возврат Результат;
	
КонецФункции

Функция ЕстьСвойство(Данные, Имя) Экспорт
	
	Возврат Данные.Свойства().Получить(Имя) <> Неопределено;
	
КонецФункции

Функция ЗначениеНеобязательногоСвойства(Данные,
		ИмяСвойства,
		ПривестиКТипу = "",
		ЗначениеПоУмолчанию = Неопределено) Экспорт
	
	Если ЕстьСвойство(Данные, ИмяСвойства) Тогда
		Если НЕ ПустаяСтрока(ПривестиКТипу) Тогда
			Возврат XMLЗначение(Тип(ПривестиКТипу), Данные[ИмяСвойства]);
		Иначе
			Возврат Данные[ИмяСвойства];
		КонецЕсли;
	Иначе
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
КонецФункции

Процедура ПрочитатьТитулЭПД(ОбъектXDTO, ДвоичныеДанные, НовыйЭД = Неопределено) Экспорт
	
	КлючеваяИнформацияПоТитулу = КлючеваяИнформацияПоТитулу(ОбъектXDTO);
	
	Если КлючеваяИнформацияПоТитулу.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭТрН Тогда
		МенеджерОбъекта = Документы.ЭлектроннаяТранспортнаяНакладная;
	ИначеЕсли КлючеваяИнформацияПоТитулу.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭЗН Тогда
		МенеджерОбъекта = Документы.ЭлектронныйЗаказНаряд;
	ИначеЕсли КлючеваяИнформацияПоТитулу.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭСВ Тогда
		МенеджерОбъекта = Документы.ЭлектроннаяСопроводительнаяВедомость;
	ИначеЕсли КлючеваяИнформацияПоТитулу.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭЗЗ Тогда
		МенеджерОбъекта = Документы.ЭлектронныйЗаказЗаявка;
	ИначеЕсли КлючеваяИнформацияПоТитулу.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭПЛ Тогда
		МенеджерОбъекта = Документы.ЭлектронныйПутевойЛист;
	ИначеЕсли КлючеваяИнформацияПоТитулу.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭДФ Тогда
		МенеджерОбъекта = Документы.ЭлектронныйДоговорФрахтования;
	КонецЕсли;
	ИмяСхемы = КлючеваяИнформацияПоТитулу.ПрефиксТитула + ПостфиксМакетаПоНомеруВерсии(КлючеваяИнформацияПоТитулу.ВерсияФормата);
	Если СтрНачинаетсяС(ИмяСхемы, "Доп") Тогда
		ИмяСхемы = Сред(ИмяСхемы, 4);
	КонецЕсли;
	МакетСхемы = МенеджерОбъекта.ПолучитьМакет("Схема" + ИмяСхемы);

	ТекстСхемы = МакетСхемы.ПолучитьТекст();
	
	СтруктураСФабрикой = СоздатьФабрикуПоСхемеXSD(ТекстСхемы);
	Если СтруктураСФабрикой.targetNamespace <> Неопределено Тогда
		Пакет = СтруктураСФабрикой.Фабрика.Пакеты.Получить(СтруктураСФабрикой.targetNamespace);
	ИначеЕсли СтруктураСФабрикой.xmlns <> Неопределено Тогда
		Пакет = СтруктураСФабрикой.Фабрика.Пакеты.Получить(СтруктураСФабрикой.xmlns);
	Иначе
		Пакет = СтруктураСФабрикой.Фабрика.Пакеты[0];
	КонецЕсли;
	КорневоеСвойство = Пакет.КорневыеСвойства[0];
	ТипXDTOФайла = КорневоеСвойство.Тип;
	
	ЧтениеXML = Новый ЧтениеXML;
	
	// Замена пространства имен
	ПотокДанныхФайла = ДвоичныеДанные.ОткрытьПотокДляЧтения();
	ПотокДанныхФайла.Перейти(0, ПозицияВПотоке.Начало);
	ЧтениеXML.ОткрытьПоток(ПотокДанныхФайла);

	ПостроительDOM = Новый ПостроительDOM();
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	ЧтениеXML.Закрыть();

	ДокументDOM.ЭлементДокумента.УстановитьСоответствиеПространстваИмен("", СтруктураСФабрикой.xmlns);

	ПотокЗаписи = Новый ПотокВПамяти;

	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьПоток(ПотокЗаписи);

	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьDOM.Записать(ДокументDOM, ЗаписьXML);
	ЗаписьXML.Закрыть();

	ДвоичныеДанныеФайла = ПотокЗаписи.ЗакрытьИПолучитьДвоичныеДанные();
	
	ЧтениеXML.ОткрытьПоток(ДвоичныеДанныеФайла.ОткрытьПотокДляЧтения());
	ДанныеФайлаЭД = СтруктураСФабрикой.Фабрика.ПрочитатьXML(ЧтениеXML, ТипXDTOФайла);
	
	Если НовыйЭД = Неопределено Тогда
		ОбъектXDTO = ДанныеФайлаЭД;
	Иначе
		// Данные ЭД для интеграции с БЭД
		НовыйЭД.ВидЭД = КлючеваяИнформацияПоТитулу.ТипДокумента;	
		НовыйЭД.ИД = КлючеваяИнформацияПоТитулу.МинтрансИД;
		НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Входящий;
		
		ДеревоДляСовместимостиСБЭД = Новый ДеревоЗначений;
		ДеревоДляСовместимостиСБЭД.Колонки.Добавить("ПолныйПуть", Новый ОписаниеТипов("Строка"));
		ДеревоДляСовместимостиСБЭД.Колонки.Добавить("Значение", Новый ОписаниеТипов());
		
		// Передаем объект для дальнейшей обработки (см. НайтиСоздатьЭПД)
		СтрокаЭДОбъектXDTO = ДеревоДляСовместимостиСБЭД.Строки.Добавить();
		СтрокаЭДОбъектXDTO.ПолныйПуть = "ОбъектXDTO";
		СтрокаЭДОбъектXDTO.Значение = ДанныеФайлаЭД;
		
		СтрокаЭДДата = ДеревоДляСовместимостиСБЭД.Строки.Добавить();
		СтрокаЭДДата.ПолныйПуть = "Дата";
		СтрокаЭДДата.Значение = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВДату(КлючеваяИнформацияПоТитулу.Дата);
		
		СтрокаЭДНомер = ДеревоДляСовместимостиСБЭД.Строки.Добавить();
		СтрокаЭДНомер.ПолныйПуть = "Номер";
		СтрокаЭДНомер.Значение = КлючеваяИнформацияПоТитулу.Номер;
		
		НовыйЭД.ЗначениеРеквизита = ДеревоДляСовместимостиСБЭД;
	КонецЕсли;

КонецПроцедуры

Функция ДеревоВТаблицу(Дерево) Экспорт
	
	Результат = Новый ТаблицаЗначений;
	
	Для Каждого СтрокаДерева Из Дерево.Колонки Цикл
		Результат.Колонки.Добавить(СтрокаДерева.Имя, СтрокаДерева.ТипЗначения);	
	КонецЦикла;
	
	ДеревоВТаблицуРекурсия(Дерево, Результат);
	
	Возврат Результат;
	
КонецФункции

Функция НазваниеИВерсияПрограммы() Экспорт 
	
	Возврат ОбменСГИСЭПДСерверПовтИсп.НазваниеИВерсияПрограммы();
	
КонецФункции

Функция ПолучитьИдентификаторЧерезСервисОператораЭДО(ИдентификаторАбонента, ЭтоВторойТитул = Ложь, ДокументСсылка = Неопределено) Экспорт
	
	РезультатПоУмолчанию = "";
	
	Если ЗначениеЗаполнено(ИдентификаторАбонента) = Ложь Тогда
		Возврат РезультатПоУмолчанию;
	КонецЕсли;
	
	СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО;
	
	ОписаниеСоединения = СервисЭДО.СоединениеССервисом(СпособОбмена);
	
	Если ОписаниеСоединения.HTTPСоединение = Неопределено Тогда
		Возврат РезультатПоУмолчанию;
	КонецЕсли;
	
	АдресРесурса = "/epd/v1/GetUID/" + ИдентификаторАбонента;
	Если ЭтоВторойТитул = Истина И ДокументСсылка <> Неопределено Тогда
		ЭД = ИнтеграцияЭДО.ОсновнойЭлектронныйДокументОбъектаУчета(ДокументСсылка);
		Если ЗначениеЗаполнено(ЭД) Тогда
			ПерваяТранзакция = Неопределено;
			Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЭлектроннаяТранспортнаяНакладная") Тогда
				ПерваяТранзакция = "ShipperInformation";	
			ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЭлектронныйЗаказНаряд") Тогда
				ПерваяТранзакция = "ChartererInformation";
			ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЭлектронныйЗаказЗаявка") Тогда
				ПерваяТранзакция = "SendOrder";	
			ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЭлектронныйПутевойЛист") Тогда
				ПерваяТранзакция = "OwnerVehicleInfo";
			ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЭлектронныйДоговорФрахтования") Тогда
				ПерваяТранзакция = "SendOrder";	
			КонецЕсли;
			АдресРесурса = АдресРесурса + "?docflow_id=" + ЭД.ИдентификаторДокументооборота;
			Если ПерваяТранзакция <> Неопределено Тогда	
				АдресРесурса = АдресРесурса + "&transaction=" + ПерваяТранзакция;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	ЗапросHTTP = Новый HTTPЗапрос(АдресРесурса);
	
	ОтветHTTP = ОписаниеСоединения.HTTPСоединение.Получить(ЗапросHTTP);
	Если ОтветHTTP.КодСостояния = 200 Тогда
		Возврат ОтветHTTP.ПолучитьТелоКакСтроку();
	КонецЕсли;
	
	Возврат РезультатПоУмолчанию;
	
КонецФункции

Процедура ЗаписатьОшибкуВЖурнал(ИмяСобытия, ИнформацияОбОшибке) Экспорт
	
	ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Обмен с ГИС ЭПД.Установление соединения с сервером интернета'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
КонецПроцедуры

Функция ПолучитьОписаниеОшибки(ОбъектСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура("КодОшибки, ОписаниеОшибки");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОбъектСсылка", ОбъектСсылка);
	Запрос.Текст = "ВЫБРАТЬ
	|	ОшибкиПередачиЭДО.КодОшибки КАК КодОшибки,
	|	ОшибкиПередачиЭДО.ОписаниеОшибки КАК ОписаниеОшибки
	|ИЗ
	|	РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
	|		ПО ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент = ЭлектронныйДокументИсходящийЭДО.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОшибкиПередачиЭДО КАК ОшибкиПередачиЭДО
	|		ПО (ЭлектронныйДокументИсходящийЭДО.ИдентификаторДокументооборота = ОшибкиПередачиЭДО.ИдентификаторДокументооборота)
	|ГДЕ
	|	ОбъектыУчетаДокументовЭДО.ОбъектУчета = &ОбъектСсылка
	|	И ОбъектыУчетаДокументовЭДО.Актуальный = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОшибкиПередачиЭДО.КодОшибки,
	|	ОшибкиПередачиЭДО.ОписаниеОшибки
	|ИЗ
	|	РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
	|		ПО ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент = ЭлектронныйДокументВходящийЭДО.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОшибкиПередачиЭДО КАК ОшибкиПередачиЭДО
	|		ПО (ЭлектронныйДокументВходящийЭДО.ИдентификаторДокументооборота = ОшибкиПередачиЭДО.ИдентификаторДокументооборота)
	|ГДЕ
	|	ОбъектыУчетаДокументовЭДО.ОбъектУчета = &ОбъектСсылка
	|	И ОбъектыУчетаДокументовЭДО.Актуальный = ИСТИНА";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Подготавливает форму для работы с отметкой обязательных полей.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
Процедура ПодготовитьФормуДляОтметкиОбязательныхПолей(Форма) Экспорт
	
	МассивЧастейИмениФормы = СтрРазделить(Форма.ИмяФормы, ".");
	ТипДокумента = МассивЧастейИмениФормы[1];
	
	ТаблицаСоСсылкамиНаФормы = ПолучитьТаблицуКнопокОткрытияФорм(Форма, ТипДокумента);
	СоздатьРеквизитыФормыДляПроверкиОбязательныхПолей(ТаблицаСоСсылкамиНаФормы, Форма);
	ДобавитьОформлениеОбязательностиДляКнопокВТабЧастях(ТаблицаСоСсылкамиНаФормы, Форма);
	
	Форма.ЦветТекстаКнопки = ЦветаСтиля.ГиперссылкаЦвет;
	
	СоответствиеНаличияПолей = ПолучитьСоответствиеНаличияПолейФормы(Форма);
	
	Если ЗначениеЗаполнено(Форма.АдресДереваСоответствийИТаблицыКнопок) Тогда
		УдалитьИзВременногоХранилища(Форма.АдресДереваСоответствийИТаблицыКнопок);
	КонецЕсли;
	
	Форма.АдресДереваСоответствийИТаблицыКнопок = ПоместитьВоВременноеХранилище(Неопределено,
		Форма.УникальныйИдентификатор);
		
	ЭтоОсновнаяФорма = ЭтоОсновнаяФорма(Форма);	
		
	Если ЭтоОсновнаяФорма Тогда
		ТекущаяСтраница = Форма.Элементы.Страницы.ТекущаяСтраница.Имя;	
	Иначе
		ТекущаяСтраница = "";	
	КонецЕсли;
	
	ОбъектСДанными = ПолучитьСериализуемыйОбъектСДаннымиДокумента(Форма);
	
	СтруктураРеквизитов = ОбменСГИСЭПДКлиентСервер.ПолучитьСтруктуруПоТитулуИВерсии(Форма);
	СоздатьДеревоСоответствийИОформитьКнопки(Форма.ИмяФормы,
		Форма.АдресДереваСоответствийИТаблицыКнопок,
		ТекущаяСтраница,
		ТаблицаСоСсылкамиНаФормы,
		СоответствиеНаличияПолей,
		ОбъектСДанными,
		СтруктураРеквизитов);
	ОтметитьОбязательныеНеЗаполненныеЭлементыФормы(Форма, СтруктураРеквизитов);
	
КонецПроцедуры

// Создает оформления в виде автоотметок незаполненого для элементов формы
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  СтруктураРеквизитов - Неопределено, Структура - Неопределено для подчиненной формы, Структура для основной 
Процедура ОтметитьОбязательныеНеЗаполненныеЭлементыФормы(Форма, Знач СтруктураРеквизитов) Экспорт
	
	Форма.НачальноеОформлениеВыполнено = Истина;
														   
	ИзменитьОформлениеОбязательныхПолей(Форма);
	СтруктураДанных = ПолучитьИзВременногоХранилища(Форма.АдресДереваСоответствийИТаблицыКнопок);
	Если СтруктураДанных = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	МассивОформленияКнопок = СтруктураДанных.МассивОформления; 
	ОбменСГИСЭПДКлиентСервер.ОформлениеКнопокНаФорме(Форма, СтруктураРеквизитов, МассивОформленияКнопок);
	
	Если Форма.ТребуетсяДополнительноеОформлениеКнопок Тогда
		СтруктураДополнительногоОформленияКнопок = Форма.СтруктураДополнительногоОформленияКнопок;
		Попытка
			НовыйАдресВХранилище = ЗапуститьИзменениеОформленияКнопок(Форма,
				СтруктураРеквизитов,
				СтруктураДополнительногоОформленияКнопок.ИмяКнопки,
				СтруктураДополнительногоОформленияКнопок.ИдентификаторСтроки,
				Неопределено);
		Исключение
			НовыйАдресВХранилище = ПоместитьВоВременноеХранилище(СтруктураДанных);
			Форма.АдресДереваСоответствийИТаблицыКнопок = НовыйАдресВХранилище;
			Форма.ТребуетсяДополнительноеОформлениеКнопок = Ложь;
			Форма.СтруктураДополнительногоОформленияКнопок = Неопределено;
			Возврат;	
		КонецПопытки;
		Форма.АдресДереваСоответствийИТаблицыКнопок = НовыйАдресВХранилище;
		Форма.ТребуетсяДополнительноеОформлениеКнопок = Ложь;
		Форма.СтруктураДополнительногоОформленияКнопок = Неопределено;
		СтруктураДанных = ПолучитьИзВременногоХранилища(Форма.АдресДереваСоответствийИТаблицыКнопок);
		МассивОформления = СтруктураДанных.МассивОформления;
		СтруктураСТекущимиДанными = ОбменСГИСЭПДКлиентСервер.ПолучитьСтруктуруПоТитулуИВерсии(Форма);
		ОбменСГИСЭПДКлиентСервер.ОформлениеКнопокНаФорме(Форма, СтруктураСТекущимиДанными, МассивОформления);	
	КонецЕсли;
	
КонецПроцедуры

// Возвращает результат изменения оформления кнопок.
// 
// Параметры:
//  АдресРезультата - Строка - Адрес результата оформления кнопок
// 
// Возвращаемое значение:
//  Структура - Результат изменения оформления кнопок:
// * Успешно - Булево - Успешность обработки результата
// * НовыйАдресВХранилище - Строка, Неопределено - Адрес результата оформления кнопок 
// * МассивОформления - Массив из Структура, Неопределено - массив структур оформления
Функция ОбработатьРезультатИзмененияОформленияКнопок(АдресРезультата) Экспорт
	
	Результат = Новый Структура("Успешно, НовыйАдресВХранилище, МассивОформления", Ложь, Неопределено, Неопределено);
	
	Если АдресРезультата = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
		
	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресРезультата);
	Если СтруктураДанных = Неопределено Тогда
		Возврат Результат;	
	Иначе
		Результат.Успешно = Истина;
		Результат.НовыйАдресВХранилище = АдресРезультата;
		Результат.МассивОформления = СтруктураДанных.МассивОформления;
	КонецЕсли;
	
	//@skip-check constructor-function-return-section
	Возврат Результат;
	
КонецФункции

// Запускает изменение оформления кнопок, возвращает адрес в хранилище с результатом
// 
// Параметры:
//  ОбъектСДаннымиФормыДляОформленияКнопок - Структура, ФормаКлиентскогоПриложения - Объект с данными формы
//  СтруктураРеквизитов - Неопределено, Структура - Неопределено для подчиненной формы, Структура для основной
//  ИмяКнопки - Неопределено, Строка - Имя кнопки, если оформляются все кнопки передается Неопределено
//  ИдентификаторСтроки - Неопределено, Строка - Идентификатор строки, если оформляются все строки - Неопределено
//  СтруктураДанныхОбъекта - Неопределено - Структура данных объекта
// 
// Возвращаемое значение:
//  Неопределено, Строка - Запустить изменение оформления кнопок
Функция ЗапуститьИзменениеОформленияКнопок(ОбъектСДаннымиФормыДляОформленияКнопок,
	Знач СтруктураРеквизитов,
	ИмяКнопки = Неопределено,
	ИдентификаторСтроки = Неопределено,
	СтруктураДанныхОбъекта = Неопределено) Экспорт
	
 	ТипДокумента = ОбменСГИСЭПДКлиентСервер.ТипДокументаПоИмениФормы(ОбъектСДаннымиФормыДляОформленияКнопок.ИмяФормы);
	
	Если СтруктураДанныхОбъекта <> Неопределено Тогда 
		Для Каждого КлючЗначение Из СтруктураДанныхОбъекта.СтруктураТаблицФормы Цикл
			Таблица = ДанныеФормыВЗначение(КлючЗначение.Значение, Тип("ТаблицаЗначений"));
			СтруктураДанныхОбъекта.Вставить(КлючЗначение.Ключ, Таблица);	
		КонецЦикла;
		ОбъектСДанными = СтруктураДанныхОбъекта;
	Иначе
		Если ТипЗнч(ОбъектСДаннымиФормыДляОформленияКнопок) = Тип("Структура") Тогда
			ОбъектСДанными = Неопределено;	
		Иначе
			// В качестве ОбъектСДаннымиФормыДляОформленияКнопок можно передавать форму и тогда ОбъектСДанными
			// будет рассчитан на стороне сервера
			ОбъектСДанными = ПолучитьСериализуемыйОбъектСДаннымиДокумента(ОбъектСДаннымиФормыДляОформленияКнопок);
		КонецЕсли;
	КонецЕсли;
	
	СтруктураДереваИТаблицыКнопок = ПолучитьИзВременногоХранилища(
		ОбъектСДаннымиФормыДляОформленияКнопок.АдресДереваСоответствийИТаблицыКнопок);
	Если СтруктураДереваИТаблицыКнопок = Неопределено Тогда
		Возврат Неопределено;	
	КонецЕсли;
	УдалитьИзВременногоХранилища(ОбъектСДаннымиФормыДляОформленияКнопок.АдресДереваСоответствийИТаблицыКнопок);
	НовыйАдресВХранилище = 
		ПоместитьВоВременноеХранилище(Неопределено, ОбъектСДаннымиФормыДляОформленияКнопок.УникальныйИдентификатор);
	
	ИзменитьОформлениеКнопок(ОбъектСДанными,
		СтруктураДереваИТаблицыКнопок,
		НовыйАдресВХранилище,
		ТипДокумента,
		СтруктураРеквизитов,
		ИмяКнопки,
		ИдентификаторСтроки);
		
	Возврат НовыйАдресВХранилище;	
		
КонецФункции

Функция МакетСоответствийИменРеквизитов(ТипДокумента) Экспорт
	
	Если ТипДокумента = ТипДокументаТранспортнаяНакладная() Тогда
		Макет = Документы.ЭлектроннаяТранспортнаяНакладная.ПолучитьМакет("СоответствиеИменРеквизитов");
	ИначеЕсли ТипДокумента = ТипДокументаЗаказНаряд() Тогда
		Макет = Документы.ЭлектронныйЗаказНаряд.ПолучитьМакет("СоответствиеИменРеквизитов");
	ИначеЕсли ТипДокумента = ТипДокументаСопроводительнаяВедомость() Тогда
		Макет = Документы.ЭлектроннаяСопроводительнаяВедомость.ПолучитьМакет("СоответствиеИменРеквизитов");	
	ИначеЕсли ТипДокумента = ТипДокументаЗаказЗаявка() Тогда
		Макет = Документы.ЭлектронныйЗаказЗаявка.ПолучитьМакет("СоответствиеИменРеквизитов");
	ИначеЕсли ТипДокумента = ТипДокументаПутевойЛист() Тогда
		Макет = Документы.ЭлектронныйПутевойЛист.ПолучитьМакет("СоответствиеИменРеквизитов");
	ИначеЕсли ТипДокумента = ТипДокументаДоговорФрахтования() Тогда
		Макет = Документы.ЭлектронныйДоговорФрахтования.ПолучитьМакет("СоответствиеИменРеквизитов");
	КонецЕсли;
	
	Возврат Макет;
	
КонецФункции

Функция ДанныеСертификатаУчетнойЗаписиЭДО(ИдентификаторУчетнойЗаписи, ОтборПодписанта = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура;
	Результат.Вставить("Фамилия");
	Результат.Вставить("Имя");
	Результат.Вставить("Отчество");
	Результат.Вставить("Должность");
	Результат.Вставить("НомерДоверенности");
	Результат.Вставить("ДатаДоверенности");
	Результат.Вставить("ПорядковыйНомерДоверенности");
	Результат.Вставить("СведенияОбИнформационнойСистеме");
	Результат.Вставить("СоответствуетОтбору");
	
	ПользователиДоступныхСертификатов = Новый Массив;
	ПользователиДоступныхСертификатов.Добавить(Пользователи.АвторизованныйПользователь());
	ПользователиДоступныхСертификатов.Добавить(Справочники.Пользователи.ПустаяСсылка());
	ПользователиДоступныхСертификатов.Добавить(Пользователи.СсылкаНеуказанногоПользователя());
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторУчетнойЗаписи", ИдентификаторУчетнойЗаписи);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ПользователиДоступныхСертификатов", ПользователиДоступныхСертификатов);
	Запрос.Текст = "ВЫБРАТЬ
	|	Доверенности.Ссылка КАК Ссылка,
	|	Доверенности.НомерДоверенности КАК НомерДоверенности,
	|	Доверенности.ДатаВыдачи КАК ДатаДоверенности,
	|	Доверенности.СтатусВРеестреФНС КАК СтатусВРеестреФНС,
	|	""https://m4d.nalog.gov.ru/EMCHD/check-status?guid="" + Доверенности.НомерДоверенности КАК
	|		СведенияОбИнформационнойСистеме
	|ПОМЕСТИТЬ ВТ_ДОВЕРЕННОСТИ
	|ИЗ
	|	Справочник.МЧД003 КАК Доверенности
	|ГДЕ
	|	Доверенности.СрокДействия > &ТекущаяДата
	|	И Доверенности.Подписана = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Доверенности.Ссылка,
	|	Доверенности.НомерДоверенности,
	|	Доверенности.ДатаВыдачи,
	|	Доверенности.СтатусВРеестреФНС,
	|	Доверенности.СведенияОбИнформационнойСистеме
	|ИЗ
	|	Справочник.МашиночитаемыеДоверенностиОрганизаций КАК Доверенности
	|ГДЕ
	|	Доверенности.СрокДействия > &ТекущаяДата
	|	И Доверенности.Отозвана = ЛОЖЬ
	|	И Доверенности.Подписана = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СертификатыУчетныхЗаписейЭДО.ИдентификаторЭДО КАК ИдентификаторЭДО,
	|	СертификатыУчетныхЗаписейЭДО.Сертификат КАК Сертификат,
	|	СертификатыУчетныхЗаписейЭДО.Доверенность КАК Доверенность,
	|	СертификатыКлючейЭлектроннойПодписиИШифрования.Пользователь КАК Пользователь,
	|	ВТ_ДОВЕРЕННОСТИ.НомерДоверенности КАК НомерДоверенности,
	|	ВТ_ДОВЕРЕННОСТИ.ДатаДоверенности КАК ДатаДоверенности,
	|	ВТ_ДОВЕРЕННОСТИ.СтатусВРеестреФНС КАК СтатусВРеестреФНС,
	|	ВТ_ДОВЕРЕННОСТИ.СведенияОбИнформационнойСистеме КАК СведенияОбИнформационнойСистеме
	|ИЗ
	|	РегистрСведений.СертификатыУчетныхЗаписейЭДО КАК СертификатыУчетныхЗаписейЭДО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК
	|			СертификатыКлючейЭлектроннойПодписиИШифрования
	|		ПО СертификатыУчетныхЗаписейЭДО.Сертификат = СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка
	|		И (СертификатыКлючейЭлектроннойПодписиИШифрования.Пользователь В (&ПользователиДоступныхСертификатов))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДОВЕРЕННОСТИ КАК ВТ_ДОВЕРЕННОСТИ
	|		ПО СертификатыУчетныхЗаписейЭДО.Доверенность = ВТ_ДОВЕРЕННОСТИ.Ссылка
	|ГДЕ
	|	СертификатыУчетныхЗаписейЭДО.ИдентификаторЭДО = &ИдентификаторУчетнойЗаписи
	|	И РАЗНОСТЬДАТ(&ТекущаяДата, СертификатыУчетныхЗаписейЭДО.ДействителенДо, МИНУТА) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_ДОВЕРЕННОСТИ.Ссылка ЕСТЬ NULL,
	|	СертификатыУчетныхЗаписейЭДО.ДействителенДо";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Результат, Выборка.Сертификат);            	
		СоответствуетОтбору = Истина;
		Если ОтборПодписанта <> Неопределено Тогда
			Для Каждого КиЗ Из ОтборПодписанта Цикл
				ЗначениеОтбора = Неопределено;
				Если Результат.Свойство(КиЗ.Ключ, ЗначениеОтбора)
					И ЗначениеОтбора <> КиЗ.Значение Тогда
						СоответствуетОтбору = Ложь;
						Прервать;
				КонецЕсли;	
			КонецЦикла;
			Если СоответствуетОтбору = Истина Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;           
	
	Если ЗначениеЗаполнено(Выборка.Доверенность) Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка, "НомерДоверенности, ДатаДоверенности, СведенияОбИнформационнойСистеме");
		Если ЗначениеЗаполнено(Выборка.СтатусВРеестреФНС) = Ложь Тогда
			Результат.СведенияОбИнформационнойСистеме = "";	
			Результат.НомерДоверенности = "ON_EMCHD_" + Формат(ТекущаяДатаСеанса(), "ДФ=yyyyMMdd;") + "_" + Результат.НомерДоверенности + ".xml";
		КонецЕсли;
		Результат.ПорядковыйНомерДоверенности = "";
	КонецЕсли;
	
	Результат.Вставить("СоответствуетОтбору", СоответствуетОтбору);
	
	Возврат Результат;
	
КонецФункции

Функция ПроверитьЗаполнениеДокументаЭПД(ДанныеДляПроверки, ТекущийТитул, ВидДокумента) Экспорт
	
	ОписанияОшибок = Новый Массив;
	
	Если ТипЗнч(ДанныеДляПроверки) = Тип("ФиксированнаяСтруктура")
		Или ТипЗнч(ДанныеДляПроверки) = Тип("Структура") Тогда
		ДанныеФормирования = ДанныеРеквизитовЭПДПоСтруктуре(ДанныеДляПроверки);	
	Иначе
		ДанныеФормирования = ДанныеРеквизитовЭПД(ДанныеДляПроверки, ТекущийТитул);
	КонецЕсли;
	
	ИнформацияПоПрефиксамТитула = ОбменСГИСЭПДКлиентСервер.ПрефиксТитулаПоЭлементуРегламентаЭДО(ТекущийТитул);
	
	Если ИнформацияПоПрефиксамТитула.ВПрограмме = Неопределено Тогда
		Возврат ОписанияОшибок;
	КонецЕсли;
	
	ПрефиксТитула = ИнформацияПоПрефиксамТитула.ВПрограмме;
	
	МассивВозможныхПустыхЗначений = Новый Массив;
	Если ВидДокумента.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭТрН Тогда
		МенеджерОбъекта = Документы.ЭлектроннаяТранспортнаяНакладная;
		
		МассивВозможныхПустыхЗначений.Добавить("//Файл/Документ/СодИнфГО/СвГруз/ОпГруз/Габар/ВысЗнач");
		МассивВозможныхПустыхЗначений.Добавить("//Файл/Документ/СодИнфГО/СвГруз/ОпГруз/Габар/ДлЗнач");
		МассивВозможныхПустыхЗначений.Добавить("//Файл/Документ/СодИнфГО/СвГруз/ОпГруз/Габар/ШирЗнач");
	ИначеЕсли ВидДокумента.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭЗН Тогда
		МенеджерОбъекта = Документы.ЭлектронныйЗаказНаряд;
	ИначеЕсли ВидДокумента.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭСВ Тогда
		МенеджерОбъекта = Документы.ЭлектроннаяСопроводительнаяВедомость;
		
		МассивВозможныхПустыхЗначений.Добавить("//Файл/Документ/СодСВИнфПрв/СвКонтейн/ПрТаблПломб");
	ИначеЕсли ВидДокумента.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭЗЗ Тогда
		МенеджерОбъекта = Документы.ЭлектронныйЗаказЗаявка;
		
		МассивВозможныхПустыхЗначений.Добавить("//Файл/Документ/СодИнфГО/ОпГруз/РазмерГрМест/ВысЗнач");
		МассивВозможныхПустыхЗначений.Добавить("//Файл/Документ/СодИнфГО/ОпГруз/РазмерГрМест/ДлЗнач");
		МассивВозможныхПустыхЗначений.Добавить("//Файл/Документ/СодИнфГО/ОпГруз/РазмерГрМест/ШирЗнач");
	ИначеЕсли ВидДокумента.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭПЛ Тогда
		МенеджерОбъекта = Документы.ЭлектронныйПутевойЛист;
	ИначеЕсли ВидДокумента.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭДФ Тогда
		МенеджерОбъекта = Документы.ЭлектронныйДоговорФрахтования;
	КонецЕсли;
	
	МакетСоответствиеИменОбщий = МенеджерОбъекта.ПолучитьМакет("СоответствиеИменРеквизитов");
	МакетСоответствиеИмен = МакетСоответствиеИменОбщий.ПолучитьОбласть(ПрефиксТитула);
	Если СтрНачинаетсяС(ПрефиксТитула, "ДопТитул") Тогда
		ИмяОбластиОбязательныхСтруктур = Сред(ПрефиксТитула, 4) + ПризнакОбластиСтруктур();
		ЭтоДопТитул = Истина;
	Иначе
		ИмяОбластиОбязательныхСтруктур = ПрефиксТитула + ПризнакОбластиСтруктур();
		ЭтоДопТитул = Ложь;	
	КонецЕсли;
	МакетСоответствиеОбязательныеСтруктуры = МакетСоответствиеИменОбщий.ПолучитьОбласть(ИмяОбластиОбязательныхСтруктур);
	
	МакетПредставленийОбщий = МенеджерОбъекта.ПолучитьМакет("ЭД_ru");
	МакетПредставлений = МакетПредставленийОбщий.ПолучитьОбласть(?(ЭтоДопТитул = Истина, Сред(ПрефиксТитула, 4), ПрефиксТитула));
	ОбластьПерваяКолонкаПредставлений = МакетПредставлений.Область(,1,МакетПредставлений.ВысотаТаблицы,1);
	
	СоответствиеПредставлений = Новый Соответствие;
	
	КоличествоСтрокМакета = МакетСоответствиеИмен.ВысотаТаблицы;
	Для НомерСтроки = 1 По КоличествоСтрокМакета Цикл
		Узел = МакетСоответствиеИмен.Область(НомерСтроки, 2).Текст;
		ПредставлениеРеквизита = МакетСоответствиеИмен.Область(НомерСтроки, 8).Текст;		
		Если Не ЗначениеЗаполнено(ПредставлениеРеквизита) Тогда
			ОбластьНайдено = МакетПредставлений.НайтиТекст(Узел, , 
												ОбластьПерваяКолонкаПредставлений, Ложь, Истина, Истина, Ложь);
			Если ОбластьНайдено <> Неопределено Тогда
				ПредставлениеРеквизита = МакетПредставлений.Область(ОбластьНайдено.Верх, 2).Текст;
				СоответствиеПредставлений.Вставить(Узел, ПредставлениеРеквизита);	
			КонецЕсли;
		КонецЕсли;	
		Если ЗначениеЗаполнено(ПредставлениеРеквизита) Тогда
			СоответствиеПредставлений.Вставить(Узел, ПредставлениеРеквизита);
		КонецЕсли;
	КонецЦикла;
	
	КоличествоСтрокМакетаОбязательныеСтруктуры = МакетСоответствиеОбязательныеСтруктуры.ВысотаТаблицы;
	Для НомерСтроки = 1 По КоличествоСтрокМакетаОбязательныеСтруктуры Цикл
		Узел = МакетСоответствиеОбязательныеСтруктуры.Область(НомерСтроки, 2).Текст;
		Если ЭтоДопТитул = Истина И СтрНачинаетсяС(Узел, "Титул") Тогда
			Узел = "Доп" + Узел;	
		КонецЕсли;
		ПредставлениеРеквизита = МакетСоответствиеОбязательныеСтруктуры.Область(НомерСтроки, 8).Текст;		
		Если ЗначениеЗаполнено(ПредставлениеРеквизита) Тогда
			СоответствиеПредставлений.Вставить(Узел, ПредставлениеРеквизита);
		КонецЕсли;
	КонецЦикла;
	
	ДеревоУзлов = Новый ДеревоЗначений();
	ДеревоУзлов.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(250)));
	ДеревоУзлов.Колонки.Добавить("Узел", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(250)));
	ДеревоУзлов.Колонки.Добавить("УзелЧистый", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(250)));
	ДеревоУзлов.Колонки.Добавить("ТребуетсяЗаполнить", Новый ОписаниеТипов("Булево"));
	ДеревоУзлов.Колонки.Добавить("Обязательный", Новый ОписаниеТипов("Булево"));
	ДеревоУзлов.Колонки.Добавить("Заполнено", Новый ОписаниеТипов("Булево"));
	ДеревоУзлов.Колонки.Добавить("ЭтоТаблица", Новый ОписаниеТипов("Булево"));
	ДеревоУзлов.Колонки.Добавить("Описание", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(800)));
	
	ОбластьПерваяКолонка = МакетСоответствиеИмен.Область(,1,МакетСоответствиеИмен.ВысотаТаблицы,1);
	ОбластьВтораяКолонка = МакетСоответствиеИмен.Область(,2,МакетСоответствиеИмен.ВысотаТаблицы,2);
	
	ОбязательныеСтруктуры = Новый Соответствие;
	КоличествоСтрокМакета = МакетСоответствиеОбязательныеСтруктуры.ВысотаТаблицы;
	Для НомерСтроки = 1 По КоличествоСтрокМакета Цикл
		ИмяРеквизита = МакетСоответствиеОбязательныеСтруктуры.Область(НомерСтроки, 1).Текст;
		Если ЭтоДопТитул = Истина И СтрНачинаетсяС(ИмяРеквизита, "Титул") Тогда
			ИмяРеквизита = "Доп" + ИмяРеквизита;	
		КонецЕсли;
		УзелСтруктуры = МакетСоответствиеОбязательныеСтруктуры.Область(НомерСтроки, 2).Текст;
		ПолеУсловия = МакетСоответствиеОбязательныеСтруктуры.Область(НомерСтроки, 5).Текст;
		Если ЭтоДопТитул = Истина Тогда
			МассивПолей = СтрРазделить(ПолеУсловия, ",");
			МассивПолейДоп = Новый Массив;
			Для Каждого ИмяПоля Из МассивПолей Цикл
				МассивПолейДоп.Добавить("Доп" + ИмяПоля);
			КонецЦикла;	
			ПолеУсловия = СтрСоединить(МассивПолейДоп, ",");
		КонецЕсли;
		УсловиеТекст = МакетСоответствиеОбязательныеСтруктуры.Область(НомерСтроки, 6).Текст;
		Переходы = МакетСоответствиеОбязательныеСтруктуры.Область(НомерСтроки, 9).Текст;
		Если ЭтоДопТитул = Истина Тогда
			МассивПереходов = СтрРазделить(Переходы, "|");
			МассивПереходовДоп = Новый Массив;
			Для Каждого ИмяПерехода Из МассивПереходов Цикл
				Если СтрНачинаетсяС(ИмяПерехода, "Титул") Тогда
					МассивПереходовДоп.Добавить("Доп" + ИмяПерехода);
				Иначе
					МассивПереходовДоп.Добавить(ИмяПерехода);		
				КонецЕсли;
			КонецЦикла;	
			Переходы = СтрСоединить(МассивПереходовДоп, ",");
		КонецЕсли;
		СтруктураУзла = Новый Структура;
		СтруктураУзла.Вставить("Имя", ИмяРеквизита);
		СтруктураУзла.Вставить("Обязательный", МакетСоответствиеОбязательныеСтруктуры.Область(НомерСтроки, 3).Текст = "Да");
		СтруктураУзла.Вставить("ПоляУсловий", ПолеУсловия);
		СтруктураУзла.Вставить("Условие", УсловиеТекст);
		СтруктураУзла.Вставить("Переходы", Переходы);
		ОбязательныеСтруктуры.Вставить(УзелСтруктуры, СтруктураУзла);	
	КонецЦикла;
	
	КоличествоСтрокМакета = МакетСоответствиеИмен.ВысотаТаблицы;
	ПоследовательностьТаблиц = Новый Массив;
	Для НомерСтроки = 1 По КоличествоСтрокМакета Цикл
		ИмяРеквизита = МакетСоответствиеИмен.Область(НомерСтроки, 1).Текст;
		// Таблицы и колонки таблиц пропускаем, будут обработаны после
		ЧастиИмени = СтрРазделить(ИмяРеквизита, ".", Ложь);
		Если ЧастиИмени.Количество() = 2 И ПоследовательностьТаблиц.Найти(ЧастиИмени[0]) = Неопределено Тогда
			ПоследовательностьТаблиц.Добавить(ЧастиИмени[0]);	
		КонецЕсли;
		ИмяСледующегоРеквизита = МакетСоответствиеИмен.Область(НомерСтроки + 1, 1).Текст;
		ЧастиИмениСледующего = СтрРазделить(ИмяСледующегоРеквизита, ".", Ложь);
		Если ЧастиИмени.Количество() > 1 
			Или ЧастиИмениСледующего.Количество() > 1 Тогда
			Продолжить;
		КонецЕсли;
		Узел = МакетСоответствиеИмен.Область(НомерСтроки, 2).Текст;
		УзелОбязателен = Ложь;
		Если МакетСоответствиеИмен.Область(НомерСтроки, 3).Текст = "Да" Тогда   
			УзелОбязателен = Истина;
		Иначе
			ПолеУсловия = МакетСоответствиеИмен.Область(НомерСтроки, 5).Текст;
			УсловиеТекст = МакетСоответствиеИмен.Область(НомерСтроки, 6).Текст;
			УзелОбязателен = ПроверитьУсловие(ПолеУсловия, УсловиеТекст, ДанныеФормирования);	
		КонецЕсли;
		
		ЗначениеРеквизита = Неопределено;
		ДанныеФормирования.Свойство(ИмяРеквизита, ЗначениеРеквизита);
		
		Если ТипЗнч(ЗначениеРеквизита) = Тип("Массив") Тогда
			ПоследовательностьТаблиц.Добавить(ИмяРеквизита);
			Продолжить;
		КонецЕсли;
		
		ЗначениеУзлаЗаполнено = Ложь;
		Если ЗначениеЗаполнено(ЗначениеРеквизита) Или МассивВозможныхПустыхЗначений.Найти(Узел) <> Неопределено Тогда	
			ЗначениеУзлаЗаполнено = Истина;
			Если СтрЗаканчиваетсяНа(ИмяРеквизита, "ИспользуетсяUTC") Тогда
				СвязанныйРеквизит = Неопределено;
				ДанныеФормирования.Свойство(СтрЗаменить(ИмяРеквизита, "ИспользуетсяUTC", ""), СвязанныйРеквизит);
				Если ЗначениеЗаполнено(СвязанныйРеквизит) = Ложь Тогда
					ЗначениеУзлаЗаполнено = Ложь;	
				КонецЕсли; 	
			КонецЕсли;	
		КонецЕсли;
		
		МассивИменУзлов = СтрРазделить(Узел, "/", Ложь);
		ИнициализироватьУзелДереваРекурсивно(МассивИменУзлов, ИмяРеквизита, 
												1, ЗначениеУзлаЗаполнено, 
												ДеревоУзлов, 
												СоответствиеПредставлений, 
												ОбязательныеСтруктуры,
												ДанныеФормирования,
												УзелОбязателен);
	КонецЦикла;
	
	КартаТаблиц = КартаТаблиц(ДанныеФормирования, ПрефиксТитула, 
											МакетСоответствиеИмен, ПоследовательностьТаблиц, Ложь, Истина);
											
	СоответствиеИндексСтроки = Новый Соответствие;
	УровеньТаблицы = -1;
	Для Каждого СтруктураТаблиц Из КартаТаблиц Цикл
	    УровеньТаблицы = УровеньТаблицы + 1;
		Для Каждого КиЗ Из СтруктураТаблиц Цикл
			ОписаниеТаблицы = КиЗ.Значение;
			МассивРодителей = ОписаниеТаблицы.МассивРодителей;
			УзелТЧ = ОписаниеТаблицы.УзелТЧ;
			
			// Обязательность таблицы
			ОбластьТЧНайдено = МакетСоответствиеИмен.НайтиТекст(УзелТЧ, , 
												ОбластьВтораяКолонка, Ложь, Истина, Истина, Ложь);
			УзелТЧОбязателен = Ложь;
			Если МакетСоответствиеИмен.Область(ОбластьТЧНайдено.Верх, 3).Текст = "Да" Тогда   
				УзелТЧОбязателен = Истина;
			Иначе
				ПолеУсловия = МакетСоответствиеИмен.Область(ОбластьТЧНайдено.Верх, 5).Текст;
				УсловиеТекст = МакетСоответствиеИмен.Область(ОбластьТЧНайдено.Верх, 6).Текст;     
				Если ПолеУсловия = "" Или УсловиеТекст = "" Тогда
					СтруктураУзла = ОбязательныеСтруктуры.Получить(УзелТЧ);
					Если СтруктураУзла <> Неопределено Тогда    
						Если СтруктураУзла.Обязательный Тогда
							УзелТЧОбязателен = Истина;
						Иначе
							ПолеУсловия = СтруктураУзла.ПоляУсловий;
							УсловиеТекст = СтруктураУзла.Условие; 
							УзелТЧОбязателен = ПроверитьУсловие(ПолеУсловия, УсловиеТекст, ДанныеФормирования);
						КонецЕсли;
					КонецЕсли;      
				Иначе
					УзелТЧОбязателен = ПроверитьУсловие(ПолеУсловия, УсловиеТекст, ДанныеФормирования);
				КонецЕсли;	
			КонецЕсли;
			
			// Добавить пустые таблицы рекурсивно
			Если МассивРодителей.Количество() = 0 Тогда
				МассивИменУзлов = СтрРазделить(УзелТЧ, "/", Ложь);
				ИнициализироватьУзелДереваРекурсивно(МассивИменУзлов, КиЗ.Ключ,
																1, Ложь, 
																ДеревоУзлов, 										
																СоответствиеПредставлений,
																ОбязательныеСтруктуры,
																ДанныеФормирования,
																УзелТЧОбязателен);	
			Иначе
				СтруктураУзла = Новый Структура;
				СтруктураУзла.Вставить("Имя", КиЗ.Ключ);
				СтруктураУзла.Вставить("УзелЧистый", УзелТЧ);
				СтруктураУзла.Вставить("ЭтоТаблица", Истина);
				СтруктураУзла.Вставить("Обязательный", УзелТЧОбязателен);
				СтруктураУзла.Вставить("Описание", СоответствиеПредставлений.Получить(УзелТЧ));
				ДобавитьУзлыВСтрокиТаблицРекурсивно(ДеревоУзлов, МассивРодителей, СтруктураУзла);
			КонецЕсли;
				
			// Заполним по заполненным строкам
			ДанныеТаблицы = Неопределено;
			Если ДанныеФормирования.Свойство(КиЗ.Ключ, ДанныеТаблицы) = Ложь Тогда
				ДанныеТаблицы = Новый Массив;	
			КонецЕсли;
			НомерСтроки = 0;
			Для Каждого СтрТЧ Из ДанныеТаблицы Цикл
				Если УровеньТаблицы = 0 Тогда
					НомерСтроки = НомерСтроки + 1;
					ИндексСтроки = НомерСтроки - 1;
				ИначеЕсли СтрТЧ.Свойство("ИдентификаторСтрокиРодителя") Тогда	
					НомерСтроки = НомерСтроки + 1;
					ИндексСтроки = СоответствиеИндексСтроки.Получить("Счетчик" + КиЗ.Ключ + СтрТЧ.ИдентификаторСтрокиРодителя);
					Если ИндексСтроки = Неопределено Тогда
						ИндексСтроки = 0;
						СоответствиеИндексСтроки.Вставить("Счетчик" + КиЗ.Ключ + СтрТЧ.ИдентификаторСтрокиРодителя, ИндексСтроки);
					Иначе
						ИндексСтроки = ИндексСтроки + 1;
						СоответствиеИндексСтроки.Вставить("Счетчик" + КиЗ.Ключ + СтрТЧ.ИдентификаторСтрокиРодителя, ИндексСтроки);
					КонецЕсли;
				Иначе
					Продолжить;
				КонецЕсли;
				Если ОписаниеТаблицы.ЕстьИдентификаторСтроки = Истина Тогда
					СоответствиеИндексСтроки.Вставить(КиЗ.Ключ + СтрТЧ.ИдентификаторСтроки, ИндексСтроки);
				КонецЕсли;
				
				ОтказИнициализацииСтроки = Ложь;
			    Для Каждого Колонка Из СтрТЧ Цикл
					ОбластьКолонкаНайдено = МакетСоответствиеИмен.НайтиТекст(КиЗ.Ключ + "." + СтрЗаменить(Колонка.Ключ, КиЗ.Ключ + "_", ""), , 
												ОбластьПерваяКолонка, Ложь, Истина, Истина, Ложь);	
					Если ОбластьКолонкаНайдено <> Неопределено Тогда
						УзелКолонка = МакетСоответствиеИмен.Область(ОбластьКолонкаНайдено.Верх, 2).Текст;
						Узел = СтрЗаменить(УзелКолонка, УзелТЧ, УзелТЧ + "[" + Строка(ИндексСтроки) + "]");
						Если МассивРодителей.Количество() > 0 Тогда
							ТекущаяСтрокаИерархии = СтрТЧ;
							Для ИтераторЦикла = 0 По МассивРодителей.ВГраница() Цикл
								СтруктураРодителя = МассивРодителей[ИтераторЦикла];	
								ТекущийИндексРодителя = СоответствиеИндексСтроки.Получить(СтруктураРодителя.ИмяТЧ + ТекущаяСтрокаИерархии.ИдентификаторСтрокиРодителя);
								Если ТекущийИндексРодителя <> Неопределено Тогда
									Узел = СтрЗаменить(Узел, СтруктураРодителя.Узел, СтруктураРодителя.Узел + "[" + Строка(ТекущийИндексРодителя) + "]");									
									ТаблицаРодитель = ДанныеФормирования[СтруктураРодителя.ИмяТЧ];
									Для Каждого СтрокаРодитель Из ТаблицаРодитель Цикл
										Если СтрокаРодитель.ИдентификаторСтроки = ТекущаяСтрокаИерархии.ИдентификаторСтрокиРодителя Тогда
											ТекущаяСтрокаИерархии = СтрокаРодитель;
											Прервать;
										КонецЕсли;	
									КонецЦикла;
								Иначе
									// Есть строки в подчиненных таблицах по удаленным родительским строкам
									ОтказИнициализацииСтроки = Истина;
									Прервать;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
						ЗначениеУзлаЗаполнено = Ложь;
						Если ОтказИнициализацииСтроки = Истина Тогда
							Прервать;	
						КонецЕсли;
						Если ЗначениеЗаполнено(Колонка.Значение) Или МассивВозможныхПустыхЗначений.Найти(УзелКолонка) <> Неопределено Тогда
							ЗначениеУзлаЗаполнено = Истина;						
							Если СтрЗаканчиваетсяНа(Колонка.Ключ, "ИспользуетсяUTC") Тогда
								СвязанныйРеквизит = Неопределено;
								СтрТЧ.Свойство(СтрЗаменить(Колонка.Ключ, "ИспользуетсяUTC", ""), СвязанныйРеквизит);
								Если ЗначениеЗаполнено(СвязанныйРеквизит) = Ложь Тогда
									ЗначениеУзлаЗаполнено = Ложь;	
								КонецЕсли; 	
							КонецЕсли;				
						КонецЕсли;	
						
						УзелОбязателен = Ложь;
						Если МакетСоответствиеИмен.Область(ОбластьКолонкаНайдено.Верх, 3).Текст = "Да" Тогда   
							УзелОбязателен = Истина;
						Иначе
							ПолеУсловия = МакетСоответствиеИмен.Область(ОбластьКолонкаНайдено.Верх, 5).Текст;
							УсловиеТекст = МакетСоответствиеИмен.Область(ОбластьКолонкаНайдено.Верх, 6).Текст;
							УзелОбязателен = ПроверитьУсловие(ПолеУсловия, УсловиеТекст, ДанныеФормирования);	
						КонецЕсли;
						МассивИменУзлов = СтрРазделить(Узел, "/", Ложь);
						ИнициализироватьУзелДереваРекурсивно(МассивИменУзлов, Колонка.Ключ,
																1, ЗначениеУзлаЗаполнено, 
																ДеревоУзлов, 
																СоответствиеПредставлений,
																ОбязательныеСтруктуры,
																ДанныеФормирования,
																УзелОбязателен);
					КонецЕсли;
			    КонецЦикла;	
			КонецЦикла;
			// Добавить пустые колонки
		    Для Каждого ОписаниеКолонки Из ОписаниеТаблицы.Колонки Цикл
		    	СтруктураУзла = Новый Структура;
		    	СтруктураУзла.Вставить("Имя", ОписаниеКолонки.Имя);
				СтруктураУзла.Вставить("УзелЧистый", ОписаниеКолонки.Узел);
				СтруктураУзла.Вставить("ЭтоТаблица", Ложь);
				Если ОписаниеКолонки.Обязательный = Истина Тогда
					СтруктураУзла.Вставить("Обязательный", Истина);
				Иначе
					СтруктураУзла.Вставить("Обязательный", ПроверитьУсловие(ОписаниеКолонки.ПоляУсловий, 
																			ОписаниеКолонки.Условие,
																			ДанныеФормирования));		
				КонецЕсли;
				СтруктураУзла.Вставить("Описание", СоответствиеПредставлений.Получить(ОписаниеКолонки.Узел));
				СтруктураТекущейТЧ = Новый Структура;
				СтруктураТекущейТЧ.Вставить("Узел", УзелТЧ);
		    	МассивРодителей.Добавить(СтруктураТекущейТЧ);
		    	ДобавитьУзлыВСтрокиТаблицРекурсивно(ДеревоУзлов, МассивРодителей, СтруктураУзла);	
		    КонецЦикла;
		КонецЦикла;	
	КонецЦикла;
		
	ДополнительныйОбходДереваРекурсивно(ДеревоУзлов);
	
	СтрокиДляЗаполнения = Новый Массив;
	СобратьТребующиеЗаполнения(ДеревоУзлов, СтрокиДляЗаполнения);
	
	ОписанияОшибок = Новый Массив;
	Для Каждого СтрокаДерева Из СтрокиДляЗаполнения Цикл
		ОписаниеОшибкиПроверки = НовыйОписаниеОшибкиПроверкиЭПД();
		ОписаниеОшибкиПроверки.Узел = СтрокаДерева.Узел;
		СобратьОписаниеОшибки(СтрокаДерева, ОписаниеОшибкиПроверки);
		ПереходыМассив = Новый Массив;	
		Переходы = НайтиПереходыРекурсивно(СтрокаДерева, МакетСоответствиеИмен, МакетСоответствиеОбязательныеСтруктуры);
		Если ЗначениеЗаполнено(Переходы) Тогда
			ПереходыМассив = СтрРазделить(Переходы, "|");
			Для Каждого НомерКиЗ Из ОписаниеОшибкиПроверки.НомераСтрокТаблиц Цикл
				Индекс = ПереходыМассив.Найти(НомерКиЗ.Ключ);
				Если Индекс <> Неопределено Тогда
					ПереходыМассив.Вставить(Индекс + 1, НомерКиЗ.Значение);	
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ОписаниеОшибкиПроверки.Переходы = Новый ФиксированныйМассив(ПереходыМассив);
		ОписанияОшибок.Добавить(ОписаниеОшибкиПроверки);
	КонецЦикла;
	
	Возврат ОписанияОшибок;
	
КонецФункции

Процедура ИзменитьИспользованиеЗаданияОтправкиQR(Использование) Экспорт
	
	Если ПривилегированныйРежим() = Ложь Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Использование", Использование);
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.ОчередьЗаданий") Тогда
			МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
			МодульОчередьЗаданий = ОбщегоНазначения.ОбщийМодуль("ОчередьЗаданий");
			ПараметрыПоиска = Новый Структура;
			Если ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
				ОбластьДанных = МодульРаботаВМоделиСервиса.ЗначениеРазделителяСеанса();
				ПараметрыПоиска.Вставить("ОбластьДанных", ОбластьДанных);
			КонецЕсли;
			Шаблон = МодульОчередьЗаданий.ШаблонПоИмени("ОтправкаQRКодовЭПД");
			Если ЗначениеЗаполнено(Шаблон) Тогда
				ПараметрыПоиска.Вставить("Шаблон", Шаблон);
				СписокЗаданий = МодульОчередьЗаданий.ПолучитьЗадания(ПараметрыПоиска);
				Для Каждого Задание Из СписокЗаданий Цикл
					МодульОчередьЗаданий.ИзменитьЗадание(Задание.Идентификатор, ПараметрыЗадания);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	Иначе
		РегламентныеЗаданияСервер.ИзменитьЗадание(Метаданные.РегламентныеЗадания.ОтправкаQRКодовЭПД, ПараметрыЗадания);
	КонецЕсли;
	
КонецПроцедуры

// Метод регламентного задания отправки QR-кодов по перевозкам.
Процедура ОтправитьQRРегламентноеЗадание() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОтправкаQRКодовЭПД);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НужноВыполнятьРегламентноеЗаданиеОтправкиQR() = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьПросроченныеОтправкиQRКодов();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОтправкиQRКодовЭПД.Отправитель КАК Отправитель,
	               |	ОтправкиQRКодовЭПД.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
	               |	ТокеныАвторизацииЭПД.Токен КАК Токен,
	               |	ОтправкиQRКодовЭПД.ДатаНачалаПолучения КАК ДатаНачалаПолучения,
	               |	ОбъектыУчетаДокументовЭДО.ОбъектУчета КАК ОбъектУчета
	               |ПОМЕСТИТЬ ВТ_ОТПРАВКИ
	               |ИЗ
	               |	РегистрСведений.ОтправкиQRКодовЭПД КАК ОтправкиQRКодовЭПД
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТокеныАвторизацииЭПД КАК ТокеныАвторизацииЭПД
	               |		ПО ОтправкиQRКодовЭПД.Отправитель = ТокеныАвторизацииЭПД.Отправитель
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
	               |		ПО ОтправкиQRКодовЭПД.ЭлектронныйДокумент = ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент
	               |			И (ОбъектыУчетаДокументовЭДО.Актуальный = ИСТИНА)
	               |ГДЕ
	               |	ОтправкиQRКодовЭПД.ДатаОтправки = ДАТАВРЕМЯ(1, 1, 1)
	               |	И ОтправкиQRКодовЭПД.ДатаНачалаПолучения < &ТекущаяДата
	               |	И ОтправкиQRКодовЭПД.ДатаНачалаПолучения > ДАТАВРЕМЯ(1, 1, 1)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ОТПРАВКИ.Отправитель КАК Отправитель,
	               |	ВТ_ОТПРАВКИ.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
	               |	ВТ_ОТПРАВКИ.Токен КАК Токен,
	               |	ВТ_ОТПРАВКИ.ДатаНачалаПолучения КАК ДатаНачалаПолучения,
	               |	ЭлектроннаяТранспортнаяНакладная.УИДМинтранс КАК УИДМинтранс,
	               |	ЭлектроннаяТранспортнаяНакладная.ТитулГрузоотправителяТранспортнаяНакладнаяНомер КАК НомерДокумента,
	               |	ЭлектроннаяТранспортнаяНакладная.ТитулГрузоотправителяТранспортнаяНакладнаяДата КАК ДатаДокумента,
	               |	ЗНАЧЕНИЕ(Перечисление.ТипыДокументовЭДО.ЭТрН) КАК ТипДокумента,
	               |	ВЫРАЗИТЬ(ХранимыеДанныеЭПДДанныеПочта.Значение КАК СТРОКА(150)) КАК Почта
	               |ИЗ
	               |	ВТ_ОТПРАВКИ КАК ВТ_ОТПРАВКИ
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектроннаяТранспортнаяНакладная КАК ЭлектроннаяТранспортнаяНакладная
	               |		ПО ВТ_ОТПРАВКИ.ОбъектУчета = ЭлектроннаяТранспортнаяНакладная.Ссылка
	               |			И (ЭлектроннаяТранспортнаяНакладная.ЭтоВходящий = ЛОЖЬ)
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияРеквизитовДокументовЭПД КАК ЗначенияРеквизитовДокументовЭПДВодитель
	               |		ПО (ЭлектроннаяТранспортнаяНакладная.Ссылка = ЗначенияРеквизитовДокументовЭПДВодитель.Документ)
	               |			И (ЗначенияРеквизитовДокументовЭПДВодитель.ИмяТабличнойЧасти = ""ТитулГрузоотправителяВодители"")
	               |			И (ЗначенияРеквизитовДокументовЭПДВодитель.ИмяРеквизита = ""ХранимыеДанныеВодитель"")
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХранимыеДанныеЭПД КАК ХранимыеДанныеЭПД
	               |		ПО (ЗначенияРеквизитовДокументовЭПДВодитель.ЗначениеРеквизитаСсылка = ХранимыеДанныеЭПД.Ссылка)
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХранимыеДанныеЭПД.Данные КАК ХранимыеДанныеЭПДДанныеПочта
	               |		ПО (ХранимыеДанныеЭПД.Ссылка = ХранимыеДанныеЭПДДанныеПочта.Ссылка)
	               |			И (ХранимыеДанныеЭПДДанныеПочта.Имя = ""Почта"")
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияРеквизитовДокументовЭПД КАК ЗначенияРеквизитовДокументовЭПДОтправлять
	               |		ПО (ЭлектроннаяТранспортнаяНакладная.Ссылка = ЗначенияРеквизитовДокументовЭПДОтправлять.Документ)
	               |			И (ЗначенияРеквизитовДокументовЭПДОтправлять.ИмяРеквизита = ""ТитулГрузоотправителяОтправлятьQR"")
	               |			И (ЗначенияРеквизитовДокументовЭПДОтправлять.ЗначениеРеквизита = ИСТИНА)
	               |ИТОГИ
	               |	МАКСИМУМ(Отправитель),
	               |	МАКСИМУМ(ЭлектронныйДокумент),
	               |	МАКСИМУМ(Токен),
	               |	МАКСИМУМ(ДатаНачалаПолучения),
	               |	МАКСИМУМ(НомерДокумента),
	               |	МАКСИМУМ(ДатаДокумента),
	               |	МАКСИМУМ(ТипДокумента)
	               |ПО
	               |	УИДМинтранс";
		
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() = Ложь Тогда	
		СоединениеHTTP = Неопределено;	
		МассивДляОтправки = Новый Массив;
		
		ВыборкаУИДМинтранс = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		МассивЗаписей = Новый Массив;
		Пока ВыборкаУИДМинтранс.Следующий() Цикл	
			ДвоичныеДанныеQR = ПолучитьQRКодОтОператора(
									ВыборкаУИДМинтранс.Отправитель,
									ВыборкаУИДМинтранс.УИДМинтранс, 
									ВыборкаУИДМинтранс.Токен, 
									СоединениеHTTP);
			
			Если ДвоичныеДанныеQR = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Выборка = ВыборкаУИДМинтранс.Выбрать();
			Получатели = Новый Массив;
			Пока Выборка.Следующий() Цикл
				Почта = СокрЛП(Выборка.Почта);
				Если Получатели.Найти(Получатели) = Неопределено Тогда
					Получатели.Добавить(Почта);
				КонецЕсли;	
			КонецЦикла;
			
			СтруктураОтправки = Новый Структура;
			СтруктураОтправки.Вставить("ДвоичныеДанныеQR", ДвоичныеДанныеQR);
			СтруктураОтправки.Вставить("Получатели", Получатели);
			СтруктураОтправки.Вставить("НомерДокумента", ВыборкаУИДМинтранс.НомерДокумента);
			СтруктураОтправки.Вставить("ДатаДокумента", ВыборкаУИДМинтранс.ДатаДокумента);
			СтруктураОтправки.Вставить("ТипДокумента", ВыборкаУИДМинтранс.ТипДокумента);
			СтруктураОтправки.Вставить("УИД", ВыборкаУИДМинтранс.УИДМинтранс);
			СтруктураОтправки.Вставить("ЭлектронныйДокумент", ВыборкаУИДМинтранс.ЭлектронныйДокумент);
			
			МассивДляОтправки.Добавить(СтруктураОтправки);	
			
			Запись = РегистрыСведений.ОтправкиQRКодовЭПД.СоздатьМенеджерЗаписи();

			Запись.Отправитель = ВыборкаУИДМинтранс.Отправитель;
			Запись.ЭлектронныйДокумент = ВыборкаУИДМинтранс.ЭлектронныйДокумент;
			Запись.ДатаНачалаПолучения = ВыборкаУИДМинтранс.ДатаНачалаПолучения;		
			
			МассивЗаписей.Добавить(Запись);
		КонецЦикла;
		
		ОтправленныеЭД = ОтправитьПисьмаСQRКодами(МассивДляОтправки);
		
		Для Каждого Запись Из МассивЗаписей Цикл
			Если ОтправленныеЭД.Найти(Запись.ЭлектронныйДокумент) <> Неопределено Тогда
				Запись.ДатаОтправки = ТекущаяДатаСеанса();	
			КонецЕсли;
			Запись.Записать();
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьQRВФоне(Параметры, АдресРезультата) Экспорт
	
	Отправитель = Неопределено;
	УИДМинтранс = Неопределено;
	
	Параметры.Свойство("Отправитель", Отправитель);
	Параметры.Свойство("УИДМинтранс", УИДМинтранс);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Отправитель", Отправитель);
	Запрос.Текст = "ВЫБРАТЬ
	|	ТокеныАвторизацииЭПД.Токен КАК Токен
	|ИЗ
	|	РегистрСведений.ТокеныАвторизацииЭПД КАК ТокеныАвторизацииЭПД
	|ГДЕ
	|	ТокеныАвторизацииЭПД.Отправитель = &Отправитель";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда		
		ДвоичныеДанныеQR = ПолучитьQRКодОтОператора(Отправитель, УИДМинтранс, Выборка.Токен);
		ПоместитьВоВременноеХранилище(ДвоичныеДанныеQR, АдресРезультата);
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстПисьмаQR() Экспорт
	
	Возврат "<!DOCTYPE html PUBLIC ""-//W3C//DTD HTML 4.0 Transitional//EN"">
			|<html>
			|<head content=""text/html"" http-equiv=""Content-Type"" charset="""">
			|<meta name=""format-detection""></meta>
			|<style type=""text/css"">
			|body{margin:0;padding:8px;}
			|p{line-height:1.15;margin:0;white-space:pre-wrap;}
			|p.gray{color:gray}
			|ol,ul{margin-top:0;margin-bottom:0;}
			|img{border:none;}
			|li>p{display:inline;}
			|</style></head><body>
			|<p><img  width=""450"" height=""450"" src=""cid:QR""></img></p>
			|<br>
			|<p>Минтранс УИД: %1</p>
			|<br>
			|<p class=""gray"">Письмо сформировано автоматически, отвечать на него не нужно.</p>
			|</body></html>";
	
КонецФункции

Функция ТекстЗаголовкаПисьмаQR(ТипДокумента) Экспорт
	
	Если ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭТрН Тогда
		Результат = "QR-код транспортной накладной №%1 от %2";
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭПЛ Тогда
		Результат = "QR-код путевого листа №%1 от %2";
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭДФ Тогда
		Результат = "QR-код договора фрахтования №%1 от %2";	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьПочтуВодителей(МассивВодители, ИмяРеквизита = "Почта") Экспорт
	
	Результат = Новый Массив;
	
	Если МассивВодители.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивВодители", МассивВодители);
	Запрос.УстановитьПараметр("ИмяРеквизита", ИмяРеквизита);
	Запрос.Текст = "ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ХранимыеДанныеЭПДДанные.Значение КАК СТРОКА(150)) КАК Почта
	|ИЗ
	|	Справочник.ХранимыеДанныеЭПД КАК ХранимыеДанныеЭПД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХранимыеДанныеЭПД.Данные КАК ХранимыеДанныеЭПДДанные
	|		ПО ХранимыеДанныеЭПД.Ссылка = ХранимыеДанныеЭПДДанные.Ссылка
	|		И ХранимыеДанныеЭПДДанные.Имя = &ИмяРеквизита
	|ГДЕ
	|	ХранимыеДанныеЭПД.Ссылка В (&МассивВодители)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() = Ложь Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.Почта) Тогда
				Результат.Добавить(Выборка.Почта);
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Данные - 
// См. ОбменСГИСЭПДКлиентСервер.НоваяСтруктураДляРеестраЭПД
// 
// Параметры:
//  Данные - Структура - Данные
Процедура ЗаписатьВРеестрЭПД(Данные, ЗаписьИзФормы = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.РеестрЭПД.СоздатьМенеджерЗаписи();	
	МенеджерЗаписи.Ссылка = Данные.Ссылка;
	
	МенеджерЗаписи.Прочитать();
	МобильноеПриложение = Неопределено;
	Если МенеджерЗаписи.Выбран() Тогда
		МобильноеПриложение = МенеджерЗаписи.МобильноеПриложение;
		ИдентификаторЗаписиМП = МенеджерЗаписи.ИдентификаторЗаписиМП;
		НаименованиеМП = МенеджерЗаписи.НаименованиеМП;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Данные);
	
	Если ЗначениеЗаполнено(МобильноеПриложение) Тогда
		МенеджерЗаписи.МобильноеПриложение = МобильноеПриложение;
		МенеджерЗаписи.ИдентификаторЗаписиМП = ИдентификаторЗаписиМП;
		МенеджерЗаписи.НаименованиеМП = НаименованиеМП;
		МенеджерЗаписи.ОжидаемПросмотрМП = Данные.ТекущийШагВыполнен = Истина
											И ШагиТребующиеПросмотрМП().Найти(Данные.ТекущийШаг) <> Неопределено;
	КонецЕсли;
	
	// Запись документа означает прочтение сообщения от МП
	Если ЗаписьИзФормы = Истина Тогда
		МенеджерЗаписи.ТекущийШагМП = Неопределено;
	КонецЕсли;
	
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

Функция ТипыЭлементовРегламентаЭПД() Экспорт
	
	Результат = Новый Массив;
	
	Результат.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул1);
	Результат.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул2);
	Результат.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул3);
	Результат.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул4);
	Результат.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул5);
	Результат.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул6);
	Результат.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул7);
	Результат.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул8);
	Результат.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул9);
	Результат.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ОткП);
	Результат.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ОткТ3);
	Результат.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ОткГО);
	Результат.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул1_ИОП);
	Результат.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул3_ИОП);
	Результат.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул5_ИОП);
	Результат.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ДопТитул3);
	Результат.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ДопТитул4);
	Результат.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ДопТитул7);
	Результат.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ДопТитул8);
	Результат.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ДопТитул9);
	Результат.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭЗН_Титул1);
	Результат.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭЗН_Титул2);
	Результат.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭЗН_Титул3);
	Результат.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭЗН_Титул4);
	Результат.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭЗН_Титул1_ИОП);
	Результат.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭЗН_ОткФщ);	
	Результат.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул1_1);
	Результат.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул1_2);
	Результат.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул1_3);
	Результат.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул1_4);
	Результат.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул1_5);
	Результат.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул2_1);
	Результат.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул2_2);
	Результат.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул3_1);
	Результат.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул3_2);
	Результат.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭЗЗ_Титул1);
	Результат.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭЗЗ_Титул2);
	Результат.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул1);
	Результат.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул2);
	Результат.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭПЛ_ОткМ);
	Результат.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул3);
	Результат.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул4);
	Результат.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул5);
	Результат.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул6);
	Результат.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭДФ_Титул1);
	Результат.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭДФ_Титул2);
	Результат.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭДФ_Титул1_ИОП);
	Результат.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭДФ_ОткФщ);
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьТитулыОтправителя(МассивТитулов) Экспорт
	
	МассивТитулов.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул1);
	МассивТитулов.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭЗН_Титул1);
	МассивТитулов.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул1_1);
	МассивТитулов.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул1_2);
	МассивТитулов.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул1_5);
	МассивТитулов.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭЗЗ_Титул1);
	МассивТитулов.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул1);
	МассивТитулов.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭДФ_Титул1);
	
КонецПроцедуры

Процедура ЗаполнитьВерсиюТитулаМобильногоПриложения(Форма, Знач ТекущийТитул) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД.СервисВзаимодействияМПЭПД") Тогда
		МодульСервисВзаимодействияМПЭПДКлиентСервер = ОбщегоНазначения.ОбщийМодуль("СервисВзаимодействияМПЭПДКлиентСервер");
	Иначе
		Возврат;
	КонецЕсли;

	ИнформацияПоТитулуМП = МодульСервисВзаимодействияМПЭПДКлиентСервер.ИнформацияПоТитулуМП(Форма.Объект.Ссылка, Форма.Объект.РольУчастника, ТекущийТитул);
	Если ИнформацияПоТитулуМП.ТитулДоступенВМП = Ложь Тогда
		Форма.Элементы.ГруппаМобильноеПриложение.Видимость = Ложь;	
		Если ИнформацияПоТитулуМП.ДоступноВМП = Ложь Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документ", Форма.Объект.Ссылка);
	Запрос.Текст = МодульСервисВзаимодействияМПЭПДКлиентСервер.ТекстЗапросаДанныхДокументаПоВерсииМП();
	
	// Сначала скроем сообщения по всем титулам, если они есть на форме
	СоответствиеТитуловТипамМП = МодульСервисВзаимодействияМПЭПДКлиентСервер.СоответствиеТитуловТипамМП();
	СоответствиеТитуловРоляМП = МодульСервисВзаимодействияМПЭПДКлиентСервер.СоответствиеТитуловРоляМП();
	АтомарныеРолиМП = МодульСервисВзаимодействияМПЭПДКлиентСервер.АтомарныеРолиМП();
	
	Для Каждого КиЗ Из СоответствиеТитуловТипамМП Цикл
		ГруппаМобильноеПриложениеСтатус = Форма.Элементы.Найти("ГруппаМобильноеПриложениеСтатус_" + КиЗ.Ключ);
		Если ГруппаМобильноеПриложениеСтатус <> Неопределено Тогда
			ГруппаМобильноеПриложениеСтатус.Видимость = Ложь;
		КонецЕсли;	
	КонецЦикла;
	
	ШрифтСостояния = ШрифтыСтиля.ШрифтСостоянияНаФормеЭПД;
	ЦветСостоянияСерый = ЦветаСтиля.ЦветСостоянияСерыйЭПД;
	ШрифтКурсив = Новый Шрифт(,,,Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивПолученныхТипов = Новый Массив;
	ПривязкиМП = Новый Соответствие;
	ПодписиСообщений = Новый Соответствие;
	
	ПустаяФотографияДвоичныеДанные = МодульСервисВзаимодействияМПЭПДКлиентСервер.КартинкаПустаяФотография().ПолучитьДвоичныеДанные();
	
	Пока Выборка.Следующий() Цикл
		Если ((ЗначениеЗаполнено(Выборка.МобильноеПриложение)
			Или ИнформацияПоТитулуМП.СобытияПривязки.Найти(Выборка.ВидСообщения) <> Неопределено)) Тогда
				
			ДоступныеТитулы = Новый Массив;
			Для Каждого СтруктураСоотвествия Из СоответствиеТитуловРоляМП Цикл
				Если ОбменСГИСЭПДКлиентСервер.ВхождениеРоли(Выборка.Роль, СтруктураСоотвествия.Роль, АтомарныеРолиМП.Количество())
					И ПривязкиМП.Получить(СтруктураСоотвествия.Титул) = Неопределено Тогда
					ДоступныеТитулы.Добавить(СтруктураСоотвествия.Титул);	
				КонецЕсли;	
			КонецЦикла;
				
			Для Каждого ДоступныйТитул Из ДоступныеТитулы Цикл
				СтруктураПривязки = Новый Структура;
					
				СтруктураПривязки.Вставить("МПНаименование", Выборка.МобильноеПриложение);
				Если ЗначениеЗаполнено(Выборка.Телефоны) Тогда
					СтруктураПривязки.Вставить("МПТелефон", ОбменСГИСЭПДКлиентСервер.ПолучитьПредставлениеТелефона(Выборка.Телефоны));
				КонецЕсли;
				Если ТипЗнч(Выборка.Фото) = Тип("ХранилищеЗначения") Тогда
					ФотоЗначениеХранилища = Выборка.Фото.Получить();
					Если ФотоЗначениеХранилища <> Неопределено Тогда
						СтруктураПривязки.Вставить("МПФото", ПоместитьВоВременноеХранилище(ФотоЗначениеХранилища, Форма.УникальныйИдентификатор));
					Иначе
						СтруктураПривязки.Вставить("МПФото", ПоместитьВоВременноеХранилище(ПустаяФотографияДвоичныеДанные, Форма.УникальныйИдентификатор));
					КонецЕсли;
				Иначе
					СтруктураПривязки.Вставить("МПФото", ПоместитьВоВременноеХранилище(ПустаяФотографияДвоичныеДанные, Форма.УникальныйИдентификатор));	
				КонецЕсли;
				СтруктураПривязки.Вставить("МПИдентификатор", Выборка.ИдентификаторМП);
				СтруктураПривязки.Вставить("МПИдентификаторЗаписи", Выборка.Идентификатор);
				СтруктураПривязки.Вставить("Роль", Выборка.Роль);
				СтруктураПривязки.Вставить("ВидыДокументов", Выборка.ВидыДокументов);
						
				ПривязкиМП.Вставить(ДоступныйТитул, СтруктураПривязки);
			КонецЦикла;
		КонецЕсли;
		
		// В документе показываем только сообщения (титулы)
		Если Выборка.ВидСообщения <> МодульСервисВзаимодействияМПЭПДКлиентСервер.ВидВзаимодействияСМП("Сообщение") Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеСообщения = ПолучитьДанныеJSON(Выборка.ДанныеСообщения);
		Если Не ЗначениеЗаполнено(Выборка.ДанныеСообщения) Тогда
			Продолжить;
		КонецЕсли;
		
		// Отображаем только последние сообщения по каждому типу
		Если МассивПолученныхТипов.Найти(ДанныеСообщения.Type) <> Неопределено Тогда
			Продолжить;
		Иначе
			МассивПолученныхТипов.Добавить(ДанныеСообщения.Type);
		КонецЕсли;
		
		ТитулСообщения = СоответствиеТитуловТипамМП.Получить(ДанныеСообщения.Type);
		
		// Неизвестные титулы пропускаем
		Если ТитулСообщения = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.МобильноеПриложение) Тогда
			МобильноеПриложениеНаименование = Выборка.МобильноеПриложение;
		Иначе
			МобильноеПриложениеНаименование = "<не определено>";
		КонецЕсли;
		
		СтруктураРеквизитовЗаполнения = ОбменСГИСЭПДКлиентСервер.СкопироватьИзФиксированногоЗначенияРекурсивно(Форма.СтруктураРеквизитов);
					
		ИнформацияПоПрефиксамТитула = ОбменСГИСЭПДКлиентСервер.ПрефиксТитулаПоЭлементуРегламентаЭДО(ТитулСообщения);
		
		ИдентификаторФайлаВерсии = Форма.Объект[ИнформацияПоПрефиксамТитула.ВПрограмме + "ИдентификаторФайла"];
		
		// Титулы нельзя исправлять, поэтому заполняем версией МП только если еще не отправляли
		СоздатьВерсиюПользователяМП = Ложь;
		МассивВерсий = Неопределено;
		Если СтруктураРеквизитовЗаполнения.Свойство(ИнформацияПоПрефиксамТитула.ВПрограмме, МассивВерсий) = Ложь Тогда
			МассивВерсий = Новый Массив;	
		КонецЕсли;
		Если ЗначениеЗаполнено(ИдентификаторФайлаВерсии) = Ложь Тогда		
			СоздатьВерсиюПользователяМП = Истина;
		КонецЕсли;

		Если СоздатьВерсиюПользователяМП Тогда	
			Принято = Неопределено;
			ДанныеСообщения.Свойство("Принято", Принято);
			
			Если Принято <> Ложь Тогда
				// Можно создать только первую версию титула на основании данных МП
				НайденныеСтроки = Форма.ВерсииТитулов.НайтиСтроки(Новый Структура("Титул, ИдентификаторФайла", ТитулСообщения, ""));
				Если НайденныеСтроки.Количество() > 0 Тогда
					СтрокаВерсии = НайденныеСтроки[НайденныеСтроки.Количество() - 1];
				Иначе		
					СтрокаВерсии = Форма.ВерсииТитулов.Добавить();
					СтрокаВерсии.Титул = ТитулСообщения;
					СтрокаВерсии.НомерВерсии = 0;			
				КонецЕсли;
				
				Если СтрокаВерсии.НомерВерсии > МассивВерсий.ВГраница() Тогда
					СтруктураВерсии = Новый Структура;
					МассивВерсий.Добавить();
				Иначе
					СтруктураВерсии = МассивВерсий[СтрокаВерсии.НомерВерсии];
				КонецЕсли;
				
				СтруктураРеквизитовФормы = Новый Структура(Форма.ОписаниеРеквизитовФормы.ПараметрыФормы);
				Для Каждого КиЗ Из ДанныеСообщения Цикл
					Если СтрНачинаетсяС(КиЗ.Ключ, ИнформацияПоПрефиксамТитула.ВПрограмме) Тогда
						ЗначениеРеквизита = КиЗ.Значение;
						Если СтруктураРеквизитовФормы.Свойство(КиЗ.Ключ) Тогда
							// Показываем только значения, которые есть на форме
							ЭлементФормы = Форма.Элементы.Найти(КиЗ.Ключ);
							Если ЭлементФормы <> Неопределено Тогда
								ТипЗначенияНаФорме = ТипЗнч(Форма[КиЗ.Ключ]);
								Если ТипЗначенияНаФорме = Тип("Булево") Тогда
									ЗначениеРеквизита = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВБулево(ЗначениеРеквизита);
								ИначеЕсли ТипЗначенияНаФорме = Тип("Число") Тогда
									ЗначениеРеквизита = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВЧисло(ЗначениеРеквизита);
								ИначеЕсли ТипЗначенияНаФорме = Тип("Дата") Тогда
									ЗначениеРеквизита = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВДату(ЗначениеРеквизита);
									Если ЗначениеЗаполнено(ЗначениеРеквизита)
										И ДанныеСообщения.Свойство(КиЗ.Ключ + "ИспользуетсяUTC") = Ложь Тогда
										СтруктураВерсии.Вставить(КиЗ.Ключ + "ИспользуетсяUTC", Истина);
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
							СтруктураВерсии.Вставить(КиЗ.Ключ, ЗначениеРеквизита);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				МассивВерсий[СтрокаВерсии.НомерВерсии] = СтруктураВерсии;
				СтруктураРеквизитовЗаполнения.Вставить(ИнформацияПоПрефиксамТитула.ВПрограмме, МассивВерсий);
				
				Форма.СтруктураРеквизитов = ОбменСГИСЭПДКлиентСервер.СкопироватьВФиксированноеЗначенияРекурсивно(СтруктураРеквизитовЗаполнения);
			КонецЕсли;
			
			ИмяГруппыСтатусМП = "ГруппаМобильноеПриложениеСтатус_" + ДанныеСообщения.Type;
			ГруппаМобильноеПриложениеСтатус = Форма.Элементы.Найти(ИмяГруппыСтатусМП);
			Если ГруппаМобильноеПриложениеСтатус = Неопределено Тогда
				ГруппаМобильноеПриложениеСтатус = Форма.Элементы.Вставить(ИмяГруппыСтатусМП, 
													Тип("ГруппаФормы"), 
													Форма.Элементы.ГруппаОсновное,
													Форма.Элементы.ГруппаКонтейнер);
				ГруппаМобильноеПриложениеСтатус.Вид = ВидГруппыФормы.ОбычнаяГруппа;
				ГруппаМобильноеПриложениеСтатус.РастягиватьПоГоризонтали = Истина;
				ГруппаМобильноеПриложениеСтатус.ОтображатьЗаголовок = Ложь;
				ГруппаМобильноеПриложениеСтатус.ЦветФона = ?(Принято = Ложь, 
																ЦветаСтиля.ЦветФонаПоясненияОшибкиБИП,
																ЦветаСтиля.ЦветФонаВнимание);
			КонецЕсли;
			ГруппаМобильноеПриложениеСтатус.Видимость = Истина;
			
			ИмяНадписиСтатусаМП = "НадписьСтатусаМобильноеПриложение_" + ДанныеСообщения.Type;
			НадписьСтатусаМобильноеПриложение = Форма.Элементы.Найти(ИмяНадписиСтатусаМП);
			Если НадписьСтатусаМобильноеПриложение = Неопределено Тогда
				НадписьСтатусаМобильноеПриложение = Форма.Элементы.Вставить(ИмяНадписиСтатусаМП, 
													Тип("ДекорацияФормы"),
													ГруппаМобильноеПриложениеСтатус);
				НадписьСтатусаМобильноеПриложение.Вид = ВидДекорацииФормы.Надпись;
				НадписьСтатусаМобильноеПриложение.РастягиватьПоГоризонтали = Ложь;
				НадписьСтатусаМобильноеПриложение.АвтоМаксимальнаяШирина = Ложь;
			КонецЕсли;
			
			ПредыдущийПарныйТитул = ПредыдущийПарныйТитул(ТитулСообщения);
			
			МассивСтрок = Новый Массив;
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(МобильноеПриложениеНаименование + " " + Выборка.Дата + ": ", 
																ШрифтСостояния));
			Если Принято = Ложь Тогда
				ЭлементНадписьСтатусаОшибка = Форма.Элементы.Найти("НадписьСтатусаОшибка");
				Если ЭлементНадписьСтатусаОшибка <> Неопределено
					И ЭлементНадписьСтатусаОшибка.Родитель.Видимость = Истина Тогда
					МассивСтрок.Вставить(0, Символы.ПС);
					МассивСтрок.Вставить(0, ЭлементНадписьСтатусаОшибка.Заголовок);
					ЭлементНадписьСтатусаОшибка.Видимость = Ложь;	
				КонецЕсли;
				Если ПредыдущийПарныйТитул <> Неопределено Тогда
					//@skip-check bsl-nstr-string-literal-format
					МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Титул """ 
												+ СоответствиеТитуловИШагов().Получить(ПредыдущийПарныйТитул) 
												+ """ отклонен в мобильном приложении.'"), , ЦветСостоянияСерый));
				Иначе
					МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Документ отклонен в мобильном приложении.'"), , ЦветСостоянияСерый));	
				КонецЕсли;
				ЗамечанияКомментарий = Неопределено;
				ДанныеСообщения.Свойство("ЗамечанияКомментарий", ЗамечанияКомментарий);	
				МассивСтрок.Добавить(Символы.ПС);
				//@skip-check bsl-nstr-string-literal-format
				МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Комментарий: '"), , ЦветСостоянияСерый));
				Если ЗначениеЗаполнено(ЗамечанияКомментарий) Тогда
					ТекстКомментарияУОУ = ЗамечанияКомментарий;	
				Иначе
					ТекстКомментарияУОУ = МодульСервисВзаимодействияМПЭПДКлиентСервер.ПредставлениеПустогоЗначенияДанныхМП();
				КонецЕсли;
				МассивСтрок.Добавить(Новый ФорматированнаяСтрока(ТекстКомментарияУОУ, ШрифтКурсив, ЦветСостоянияСерый));
				
				КнопкаФормаОтправитьУОУ = Форма.Элементы.Найти("ФормаОтправитьУОУ");
				Если КнопкаФормаОтправитьУОУ <> Неопределено
				И КнопкаФормаОтправитьУОУ.Видимость = Истина Тогда
					МассивСтрок.Добавить(Символы.ПС);
					//@skip-check bsl-nstr-string-literal-format
					МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Для отказа нажмите кнопку """ 
						+ КнопкаФормаОтправитьУОУ.Заголовок + """"".'"), , ЦветСостоянияСерый));
				КонецЕсли;	
			Иначе			
				//@skip-check bsl-nstr-string-literal-format
				МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Данные по титулу """ 
											+ СоответствиеТитуловИШагов().Получить(ТитулСообщения) 
											+ """ получены из мобильного приложения.'"), , ЦветСостоянияСерый));
				КомментарийМП = Неопределено;
				ДанныеСообщения.Свойство("ЗамечанияКомментарий", КомментарийМП);
				Если ЗначениеЗаполнено(КомментарийМП) Тогда
					МассивСтрок.Добавить(Символы.ПС);
					//@skip-check bsl-nstr-string-literal-format
					МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Комментарий: '"), , ЦветСостоянияСерый));
					МассивСтрок.Добавить(Новый ФорматированнаяСтрока(КомментарийМП, ШрифтКурсив, ЦветСостоянияСерый));
				КонецЕсли;
				МассивСтрок.Добавить(Символы.ПС);
			КонецЕсли;
										
			ПарныйТитулПолучен = Истина;
			Если ПредыдущийПарныйТитул <> Неопределено Тогда
				ИмяКомандыПолучитьДокументыЭДО = "ПолучитьДокументыЭДО";
				ИмяКнопкиПолучитьДокументыЭДО = ИмяКомандыПолучитьДокументыЭДО + "_" + ДанныеСообщения.Type;
				КнопкаПолучитьДокументыЭДО = Форма.Элементы.Найти(ИмяКнопкиПолучитьДокументыЭДО);
				ИнформацияПоПрефиксамПарногоТитула = ОбменСГИСЭПДКлиентСервер.ПрефиксТитулаПоЭлементуРегламентаЭДО(ПредыдущийПарныйТитул);	
				Если ЗначениеЗаполнено(Форма.Объект[ИнформацияПоПрефиксамПарногоТитула.ВПрограмме + "ИдентификаторФайла"]) = Ложь Тогда
					МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Для формирования титула сначала требуется выполнить обмен'")));
					Если КнопкаПолучитьДокументыЭДО = Неопределено Тогда
						КомандаПолучитьДокументыЭДО = Форма.Команды.Найти(ИмяКомандыПолучитьДокументыЭДО);
						Если КомандаПолучитьДокументыЭДО <> Неопределено Тогда
							КнопкаПолучитьДокументыЭДО = Форма.Элементы.Вставить(ИмяКнопкиПолучитьДокументыЭДО, 
																Тип("КнопкаФормы"),
																ГруппаМобильноеПриложениеСтатус);
							КнопкаПолучитьДокументыЭДО.ИмяКоманды = КомандаПолучитьДокументыЭДО.Имя;
						КонецЕсли;
					КонецЕсли;
					КнопкаПолучитьДокументыЭДО.Видимость = Истина;
					ПарныйТитулПолучен = Ложь;
				ИначеЕсли КнопкаПолучитьДокументыЭДО <> Неопределено Тогда
					КнопкаПолучитьДокументыЭДО.Видимость = Ложь;
				КонецЕсли;
			КонецЕсли;	
			
			Если Принято <> Ложь И ПарныйТитулПолучен = Истина Тогда
				МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Проверьте данные, в случае необходимости дополните и отправьте титул.'"), , ЦветСостоянияСерый));
			КонецЕсли;
			
			ДвоичныеДанныеДокумента = Неопределено;
			ДвоичныеДанныеПодписи = Неопределено;
			Если ДанныеСообщения.Свойство("ДвоичныеДанныеДокумента", ДвоичныеДанныеДокумента)
				И ДанныеСообщения.Свойство("ДвоичныеДанныеПодписи", ДвоичныеДанныеПодписи) Тогда
				МассивСтрок.Добавить(" ");
				МассивСтрок.Добавить(Новый ФорматированнаяСтрока("Данные подписаны", , , , "ПроверитьПодписьМП_" + ИнформацияПоПрефиксамТитула.ВПрограмме));
				СтруктураПодписи = Новый Структура;
				СтруктураПодписи.Вставить("ДвоичныеДанныеДокумента", ДвоичныеДанныеДокумента);
				СтруктураПодписи.Вставить("ДвоичныеДанныеПодписи", ДвоичныеДанныеПодписи);
				ПодписиСообщений.Вставить(ТитулСообщения, СтруктураПодписи);
				
				НадписьСтатусаМобильноеПриложение.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_НадписьСтатусаМобильноеПриложениеОбработкаНавигационнойСсылки");
			КонецЕсли;
										
			НадписьСтатусаМобильноеПриложение.Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
		КонецЕсли;
		
		// Покажем значения, которые отличаются по версии пользователя МП
		Если Принято <> Ложь Тогда
			КонтейнерОтображаемойВерсии = Неопределено;
			Для Каждого КиЗ Из ДанныеСообщения Цикл
				Если СтрНачинаетсяС(КиЗ.Ключ, ИнформацияПоПрефиксамТитула.ВПрограмме) Тогда
					ЭлементВвода = Форма.Элементы.Найти(КиЗ.Ключ);	
					Если ЭлементВвода <> Неопределено Тогда	
						ЗначениеНаФорме = Неопределено;
						ТипЗначенияНаФорме = Неопределено;
						Если СоздатьВерсиюПользователяМП = Ложь Тогда
							ЗначениеНаФорме = ОбменСГИСЭПДКлиентСервер.ПолучитьЗначениеРеквизитаИзСтруктурыФормы(Форма, КиЗ.Ключ, , КонтейнерОтображаемойВерсии);
							Если ЗначениеЗаполнено(ЗначениеНаФорме) Тогда		
								ТипЗначенияНаФорме = ТипЗнч(ЗначениеНаФорме);
							КонецЕсли;
						КонецЕсли;
						Если ТипЗначенияНаФорме = Неопределено Тогда
							НайденныйЭлемент = Форма.Элементы.Найти(КиЗ.Ключ);
							Если НайденныйЭлемент <> Неопределено Тогда
								Если СтрНачинаетсяС(НайденныйЭлемент.ПутьКДанным, "Объект.") Тогда
									ТипЗначенияНаФорме = ТипЗнч(Форма.Объект[КиЗ.Ключ]);	
								Иначе
									ТипЗначенияНаФорме = ТипЗнч(Форма[КиЗ.Ключ]);	
								КонецЕсли;
							КонецЕсли;	
						КонецЕсли;
						ЗначениеРеквизита = КиЗ.Значение;
						Если ТипЗначенияНаФорме = Тип("Булево") Тогда
							ЗначениеРеквизита = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВБулево(ЗначениеРеквизита);
						ИначеЕсли ТипЗначенияНаФорме = Тип("Число") Тогда
							ЗначениеРеквизита = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВЧисло(ЗначениеРеквизита);
						ИначеЕсли ТипЗначенияНаФорме = Тип("Дата") Тогда
							ЗначениеРеквизита = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВДату(ЗначениеРеквизита);
							Если ЗначениеНаФорме = Неопределено Тогда
								ЗначениеНаФорме = Дата(1, 1, 1);
							КонецЕсли;
						ИначеЕсли ТипЗначенияНаФорме = Тип("Строка") Тогда
							Если ЗначениеНаФорме = Неопределено Тогда
								ЗначениеНаФорме = "";
							КонецЕсли;
							ЗначениеРеквизита = СокрЛП(ЗначениеРеквизита);	
							ЗначениеНаФорме = СокрЛП(ЗначениеНаФорме);
						КонецЕсли;		
						Если СоздатьВерсиюПользователяМП = Ложь 
							И ЗначениеНаФорме <> ЗначениеРеквизита Тогда
							Форма.МПЕстьРазличия = Истина;
						КонецЕсли;	
						ИмяГруппыДанныхМП = "ГруппаНадписьДанныеМП_" + КиЗ.Ключ;
						ГруппаНадписьДанныеМП = Форма.Элементы.Найти(ИмяГруппыДанныхМП);
						Если ГруппаНадписьДанныеМП = Неопределено Тогда
							ГруппаНадписьДанныеМП = Форма.Элементы.Вставить(ИмяГруппыДанныхМП, 
												Тип("ГруппаФормы"), 
												ЭлементВвода.Родитель);
							ГруппаНадписьДанныеМП.Вид = ВидГруппыФормы.ОбычнаяГруппа;
							ГруппаНадписьДанныеМП.РастягиватьПоГоризонтали = Истина;
							ГруппаНадписьДанныеМП.ОтображатьЗаголовок = Ложь;
							ГруппаНадписьДанныеМП.Объединенная = Ложь;
							
							НадписьДанныеМП = Форма.Элементы.Вставить("МП_" + КиЗ.Ключ,
										Тип("ДекорацияФормы"),
										ГруппаНадписьДанныеМП);
							НадписьДанныеМП.Вид = ВидДекорацииФормы.Надпись;
							НадписьДанныеМП.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
							НадписьДанныеМП.Шрифт = ШрифтКурсив;
							РазделениеЗаголовкаИДанных = ":";
							ЗначениеРеквизитаПредставление = ЗначениеРеквизита;
							Если ТипЗначенияНаФорме = Тип("Строка") Тогда
								Если ЭлементВвода.Вид = ВидПоляФормы.ПолеВвода Тогда
									Если ЭлементВвода.МногострочныйРежим = Истина Тогда
										РазделениеЗаголовкаИДанных = РазделениеЗаголовкаИДанных + Символы.ПС;
									Иначе
										РазделениеЗаголовкаИДанных = РазделениеЗаголовкаИДанных + " ";
									КонецЕсли;
								ИначеЕсли ЭлементВвода.Вид = ВидПоляФормы.ПолеПереключателя Тогда
									ЭлементСпискаНайдено = ЭлементВвода.СписокВыбора.НайтиПоЗначению(ЗначениеРеквизита);
									Если ЭлементСпискаНайдено <> Неопределено Тогда
										ЗначениеРеквизитаПредставление = ЭлементСпискаНайдено.Представление;	
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
							НадписьДанныеМП.Заголовок = ИнформацияПоТитулуМП.ЗаголовокПолей + РазделениеЗаголовкаИДанных 
																				+ ?(ЗначениеЗаполнено(ЗначениеРеквизитаПредставление), 
																						ЗначениеРеквизитаПредставление,
																						МодульСервисВзаимодействияМПЭПДКлиентСервер.ПредставлениеПустогоЗначенияДанныхМП());		
							НадписьДанныеМП.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
						Иначе
							НадписьДанныеМП = Форма.Элементы.Найти("МП_" + КиЗ.Ключ);
						КонецЕсли;
						ГруппаНадписьДанныеМП.Видимость = СоздатьВерсиюПользователяМП = Ложь 
															И ЗначениеНаФорме <> ЗначениеРеквизита;
							
						НадписьДанныеМП.Подсказка = "Автор: " + МобильноеПриложениеНаименование + "
													|Время: " + Выборка.Дата;		
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураПривязки = ПривязкиМП.Получить(ТекущийТитул);
	Если СтруктураПривязки <> Неопределено Тогда
		Форма.МПНаименование = СтруктураПривязки.МПНаименование;
		Форма.МПТелефон = СтруктураПривязки.МПТелефон;
		Форма.МПФото = СтруктураПривязки.МПФото;
		Форма.МПИдентификатор = СтруктураПривязки.МПИдентификатор;
		Форма.МПИдентификаторЗаписи = СтруктураПривязки.МПИдентификаторЗаписи;
	КонецЕсли;
	
	Для Каждого КиЗ Из ПодписиСообщений Цикл
		СтруктураПривязки = ПривязкиМП.Получить(КиЗ.Ключ);
		Если СтруктураПривязки <> Неопределено Тогда
			СтруктураПривязки.Вставить("ДвоичныеДанныеДокумента", КиЗ.Значение.ДвоичныеДанныеДокумента);
			СтруктураПривязки.Вставить("ДвоичныеДанныеПодписи", КиЗ.Значение.ДвоичныеДанныеПодписи);	
		КонецЕсли;		
	КонецЦикла;
	
	Форма.МППривязки = Новый ФиксированноеСоответствие(ПривязкиМП);
	
	Форма.Элементы.МПФото.Видимость = ЗначениеЗаполнено(Форма.МПИдентификаторЗаписи);	
	Форма.Элементы.ГруппаМПНаименование.Видимость = ЗначениеЗаполнено(Форма.МПИдентификаторЗаписи);
	Форма.Элементы.ГруппаМПТелефон.Видимость = ЗначениеЗаполнено(Форма.МПИдентификаторЗаписи);
	
	Форма.Элементы.КомандаВыбратьМП.Заголовок = ?(ЗначениеЗаполнено(Форма.МПИдентификаторЗаписи), "Изменить", "Выбрать");

КонецПроцедуры

Функция ПоискДокументовПоСтроке(Поиск, ОтборТипыДокументов = Неопределено, ПоляПоиска = Неопределено, Период = Неопределено) Экспорт
	
	Результат = Новый СписокЗначений();
	
	Если ЗначениеЗаполнено(Поиск) = Ложь Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	РазделительЗапросов = "
	|
	|/////////////////////////////////////////////////////////////
	|
	|";
	
	ТекстОтборПоТипамДокументов = "";
	Если ОтборТипыДокументов <> Неопределено 
		И ОтборТипыДокументов.Количество() > 0
		И ОтборТипыДокументов.Количество() < 6 Тогда
		ТекстОтборПоТипамДокументов = "
		|	И ТИПЗНАЧЕНИЯ(РеестрЭПД.Ссылка) В (&ОтборТипыДокументов)";	
		Запрос.УстановитьПараметр("ОтборТипыДокументов", ОтборТипыДокументов);
	КонецЕсли;
	
	Если Период <> Неопределено Тогда
		Запрос.УстановитьПараметр("НачалоПериода", Период.ДатаНачала);
		Запрос.УстановитьПараметр("КонецПериода", Период.ДатаОкончания);
	Иначе
		Запрос.УстановитьПараметр("НачалоПериода", Дата(1, 1, 1));
		Запрос.УстановитьПараметр("КонецПериода", Дата(1, 1, 1));
	КонецЕсли;
	
	ПоискПоДопРеквизитам = Новый Массив;
	МассивНестроковыхТипов = Новый Массив; 
	
	МассивРеквизитов = Новый Массив;
	МассивТаблиц = Новый Массив;
	Если ПоляПоиска <> Неопределено 
		И ПоляПоиска.Количество() > 0 Тогда		
		Для Каждого ЭлементСписка Из ПоляПоиска Цикл
			Если ЭлементСписка.Пометка = Ложь Тогда
				Продолжить;
			КонецЕсли;
			МассивПолей = СтрРазделить(ЭлементСписка.Значение, ",");	
			Для Каждого ПолеСтрокой Из МассивПолей Цикл	
				МассивСтруктурыПоля = СтрРазделить(ПолеСтрокой, "|", Ложь);
				ПолноеИмяПоля = МассивСтруктурыПоля[0];
				Если МассивСтруктурыПоля.Количество() > 1 Тогда	
					ТипДанных = МассивСтруктурыПоля[1];
					Если НРег(ТипДанных) <> "строка" 
						И НРег(ТипДанных) <> "перечисление"
						И МассивНестроковыхТипов.Найти(ТипДанных) = Неопределено Тогда
						МассивНестроковыхТипов.Добавить(ТипДанных);
					КонецЕсли;	
				КонецЕсли;	
				// В доп. реквизитах есть также идентификатор данных
				Если МассивСтруктурыПоля.Количество() > 2 Тогда
					ИдентификаторДанных = МассивСтруктурыПоля[2];
					СтруктураПоискаДоп = Новый Структура;
					СтруктураПоискаДоп.Вставить("Поле", ПолноеИмяПоля);
					СтруктураПоискаДоп.Вставить("ИдентификаторДанных", ИдентификаторДанных);
					СтруктураПоискаДоп.Вставить("ТипДанных", ТипДанных);	
					ПоискПоДопРеквизитам.Добавить(СтруктураПоискаДоп);
					Продолжить;
				КонецЕсли;
				
				ЧастиИмениПоля = СтрРазделить(ПолноеИмяПоля, ".", Ложь);
				ИмяРеквизита = ЧастиИмениПоля[ЧастиИмениПоля.ВГраница()];	
							
				Если ЧастиИмениПоля.Количество() > 1 Тогда
					ИмяТаблицы = ЧастиИмениПоля[0];
					Если СтрНачинаетсяС(ИмяТаблицы, "Титул") = Ложь Тогда
						ОписаниеГруппыДанных = ОбменСГИСЭПДКлиентСервер.ОписаниеГруппыДанных(ИмяТаблицы, Неопределено);
						Если ОписаниеГруппыДанных.Таблицы.Количество() > 0 Тогда
							Если МассивРеквизитов.Найти(ИмяРеквизита) = Неопределено Тогда
								МассивРеквизитов.Добавить(ИмяРеквизита);
							КонецЕсли;
							Для Каждого ИмяТаблицыГруппы Из ОписаниеГруппыДанных.Таблицы Цикл
								Если МассивТаблиц.Найти(ИмяТаблицыГруппы) = Неопределено Тогда
									МассивТаблиц.Добавить(ИмяТаблицыГруппы);
								КонецЕсли;
							КонецЦикла;	
						КонецЕсли;
						Для Каждого ИмяРеквизитаГруппы Из ОписаниеГруппыДанных.ВсеГруппы Цикл
							Если МассивРеквизитов.Найти(ИмяРеквизитаГруппы + ИмяРеквизита) = Неопределено Тогда
								МассивРеквизитов.Добавить(ИмяРеквизитаГруппы + ИмяРеквизита);
							КонецЕсли;	
						КонецЦикла;	
					Иначе
						Если МассивТаблиц.Найти(ИмяТаблицы) = Неопределено Тогда
							МассивТаблиц.Добавить(ИмяТаблицы);
						КонецЕсли;
						Если МассивРеквизитов.Найти(ИмяРеквизита) = Неопределено Тогда
							МассивРеквизитов.Добавить(ИмяРеквизита);
						КонецЕсли;
					КонецЕсли;	
				Иначе
					Если МассивТаблиц.Найти("") = Неопределено Тогда
						МассивТаблиц.Добавить("");	
					КонецЕсли;
					Если СтрНачинаетсяС(ИмяРеквизита, "Титул") = Ложь Тогда
						ОписаниеГруппыДанных = ОбменСГИСЭПДКлиентСервер.ОписаниеГруппыДанных(ИмяРеквизита, Неопределено);
						Для Каждого ИмяРеквизитаГруппы Из ОписаниеГруппыДанных.ВсеГруппы Цикл
							Если МассивРеквизитов.Найти(ИмяРеквизитаГруппы) = Неопределено Тогда
								МассивРеквизитов.Добавить(ИмяРеквизитаГруппы);	
							КонецЕсли;
						КонецЦикла;	
					ИначеЕсли МассивРеквизитов.Найти(ИмяРеквизита) = Неопределено Тогда
						МассивРеквизитов.Добавить(ИмяРеквизита);
					КонецЕсли;
				КонецЕсли;			
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	МассивПоиск = СтрРазделить(Поиск, " ", Ложь);
	МассивПоискНестроковое = Новый Массив;
	
	// Попробуем привести к типам
	Для Каждого ТипДанных Из МассивНестроковыхТипов Цикл
		Если НРег(ТипДанных) = "булево" Тогда
			МаксИндекс = МассивПоиск.ВГраница();
			Для ИндексЭлемента = 0 По МаксИндекс Цикл
				Слово = МассивПоиск[МаксИндекс - ИндексЭлемента];
				Если НРег(Слово) = "да" Или НРег(Слово) = "истина" Тогда
					МассивПоискНестроковое.Добавить(Истина);
				ИначеЕсли НРег(Слово) = "нет" Или НРег(Слово) = "ложь" Тогда
					МассивПоискНестроковое.Добавить(Ложь);
				Иначе
					Продолжить;
				КонецЕсли;
			КонецЦикла;	
		ИначеЕсли НРег(ТипДанных) = "число" Тогда
			МаксИндекс = МассивПоиск.ВГраница();
			Для ИндексЭлемента = 0 По МаксИндекс Цикл
				Слово = МассивПоиск[МаксИндекс - ИндексЭлемента];
				ТолькоЦифры = Истина;
				КоличествоТочек = 0;
				Для НомерСимвола = 1 По СтрДлина(Слово) Цикл
					ТекущийСимвол = Сред(Слово, НомерСимвола, 1);
					Если ТекущийСимвол = "." Тогда
						КоличествоТочек = КоличествоТочек + 1;
					КонецЕсли;	
					Если СтрНайти("0123456789.", ТекущийСимвол) = 0 Тогда
						ТолькоЦифры = Ложь;
						Прервать;	
					КонецЕсли;	
				КонецЦикла;
				Если ТолькоЦифры = Истина И КоличествоТочек <= 1 Тогда
					МассивПоискНестроковое.Добавить(Число(Слово));	
				Иначе
					Продолжить;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли НРег(ТипДанных) = "дата" Тогда
			МаксИндекс = МассивПоиск.ВГраница();
			Для ИндексЭлемента = 0 По МаксИндекс Цикл
				Слово = МассивПоиск[МаксИндекс - ИндексЭлемента];
				Если СтрДлина(Слово) = 10 
					И Сред(Слово, 3, 1) = "."
					И Сред(Слово, 6, 1) = "." Тогда
					МассивЧастей = СтрРазделить(Слово, ".");
					Попытка
						ЗначениеСлова = Дата(МассивЧастей[2], МассивЧастей[1], МассивЧастей[0]);	
						МассивПоискНестроковое.Добавить(ЗначениеСлова);
						МассивПоиск.Удалить(МаксИндекс - ИндексЭлемента);
					Исключение
						Продолжить;		
					КонецПопытки;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли НРег(ТипДанных) = "время" Тогда
			МаксИндекс = МассивПоиск.ВГраница();
			Для ИндексЭлемента = 0 По МаксИндекс Цикл
				Слово = МассивПоиск[МаксИндекс - ИндексЭлемента];
				Если СтрДлина(Слово) = 5 
					И Сред(Слово, 3, 1) = ":" Тогда
					МассивЧастей = СтрРазделить(Слово, ":");
					Попытка
						ЗначениеСлова = Дата(1, 1, 1, МассивЧастей[0], МассивЧастей[1], 0);	
						МассивПоискНестроковое.Добавить(ЗначениеСлова);
					Исключение
						Продолжить;		
					КонецПопытки;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли НРег(ТипДанных) = "датавремя" Тогда
			МаксИндекс = МассивПоиск.ВГраница();
			Для ИндексЭлемента = 0 По МаксИндекс Цикл
				Слово = МассивПоиск[МаксИндекс - ИндексЭлемента];
				Если МаксИндекс - ИндексЭлемента + 1 <= МаксИндекс Тогда
					СледующиеСлово = МассивПоиск[МаксИндекс - ИндексЭлемента + 1];	
				Иначе
					Продолжить;
				КонецЕсли;
				Если СтрДлина(Слово) = 10 
					И Сред(Слово, 3, 1) = "."
					И Сред(Слово, 6, 1) = "."
					И СтрДлина(СледующиеСлово) = 5 
					И Сред(СледующиеСлово, 3, 1) = ":" Тогда
					МассивЧастей = СтрРазделить(Слово, ".");
					МассивЧастейСледующего = СтрРазделить(СледующиеСлово, ":");
					Попытка
						ЗначениеСлова = Дата(МассивЧастей[2], МассивЧастей[1], МассивЧастей[0], МассивЧастейСледующего[0], МассивЧастейСледующего[1], 0);	
						МассивПоискНестроковое.Добавить(ЗначениеСлова);
					Исключение
						Продолжить;		
					КонецПопытки;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;	
	КонецЦикла;	
		
	// Строковые значения
	ТаблицаКомбинации = Новый ТаблицаЗначений;
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	Если МассивПоискНестроковое.Количество() > 0 Тогда
		МассивТипов.Добавить(Тип("Булево"));
		МассивТипов.Добавить(Тип("Дата"));
		МассивТипов.Добавить(Тип("Число"));
	КонецЕсли;
	ТаблицаКомбинации.Колонки.Добавить("Комбинация", Новый ОписаниеТипов(МассивТипов, 
		Новый КвалификаторыЧисла(15, 3), 
		Новый КвалификаторыСтроки(СтрДлина(Поиск)),
		Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаКомбинации.Колонки.Добавить("КоличествоСлов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2, 0, ДопустимыйЗнак.Неотрицательный)));
	
	НомерСлова = 0;
	МаксДлинаСлова = 0;
	Для Каждого Слово Из МассивПоиск Цикл
		НомерСлова = НомерСлова + 1;
		СтрокаКомбинацияПредыдущая = ТаблицаКомбинации.Добавить();
		СтрокаКомбинацияПредыдущая.Комбинация = Слово;
		СтрокаКомбинацияПредыдущая.КоличествоСлов = 1;	
		Для ИтераторНазад = 2 По НомерСлова Цикл
			СтрокаКомбинация = ТаблицаКомбинации.Добавить();
			СтрокаКомбинация.Комбинация = МассивПоиск[НомерСлова - ИтераторНазад] + " " + СтрокаКомбинацияПредыдущая.Комбинация;
			СтрокаКомбинация.КоличествоСлов = СтрокаКомбинацияПредыдущая.КоличествоСлов + 1;
			
			СтрокаКомбинацияПредыдущая = СтрокаКомбинация;
		КонецЦикла;  
		Если СтрДлина(Слово) > МаксДлинаСлова Тогда
			МаксДлинаСлова = СтрДлина(Слово);	
		КонецЕсли;
	КонецЦикла;       
	
	Для Каждого Значение Из МассивПоискНестроковое Цикл
		СтрокаКомбинация = ТаблицаКомбинации.Добавить();
		СтрокаКомбинация.Комбинация = Значение;
		СтрокаКомбинация.КоличествоСлов = 1;	
	КонецЦикла;
	
	Запрос.УстановитьПараметр("Комбинации", ТаблицаКомбинации);
	
	МассивПодзапросы = Новый Массив;
	
	МассивОтборЗначение = Новый Массив;
	Если МассивПоиск.Количество() > 0 Тогда
		МассивОтборЗначение.Добавить("ВЫРАЗИТЬ(ЗначенияРеквизитовДокументовЭПД.ЗначениеРеквизитаСтрока КАК СТРОКА(" + СтрДлина(Поиск) + ")) = ВТ_КОМБИНАЦИИ.Комбинация");	
	КонецЕсли;	
	
	Если МассивПоискНестроковое.Количество() > 0 Тогда
		МассивОтборЗначение.Добавить("ЗначенияРеквизитовДокументовЭПД.ЗначениеРеквизита = ВТ_КОМБИНАЦИИ.Комбинация");		
	КонецЕсли;
	
	ТекстОтборЗначение = "";
	Если МассивОтборЗначение.Количество() > 0 Тогда
		ТекстОтборЗначение = "
			|	(" + СтрСоединить(МассивОтборЗначение, "
			|		ИЛИ ") + ")";
	КонецЕсли;
	
	НомерПоиска = 1;
	
	НомерГруппы = 0;
	МассивОбъединениеПоТаблицам = Новый Массив;
	
	Если ТекстОтборЗначение <> "" Тогда
		Если МассивРеквизитов.Количество() = 0 Тогда
			// Поиск по всем полям
			НомерГруппы = НомерГруппы + 1;
			МассивОбъединениеПоТаблицам.Добавить("ВЫБРАТЬ
					|	ЗначенияРеквизитовДокументовЭПД.Документ, 
					|	ЗначенияРеквизитовДокументовЭПД.Титул,               
					|	ЗначенияРеквизитовДокументовЭПД.НомерВерсии,
					|	ЗначенияРеквизитовДокументовЭПД.ИмяТабличнойЧасти,
					|	СУММА(ВТ_КОМБИНАЦИИ.КоличествоСлов) КАК КоличествоСлов" + ?(НомерГруппы = 1, "
					|ПОМЕСТИТЬ ВТ" + Строка(НомерПоиска), "") + "
					|ИЗ
					|	РегистрСведений.ЗначенияРеквизитовДокументовЭПД КАК ЗначенияРеквизитовДокументовЭПД
					|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_РЕЕСТР КАК ВТ_РЕЕСТР
					|		ПО ЗначенияРеквизитовДокументовЭПД.Документ = ВТ_РЕЕСТР.Ссылка
					|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КОМБИНАЦИИ КАК ВТ_КОМБИНАЦИИ
					|		ПО " + ТекстОтборЗначение + "
					|СГРУППИРОВАТЬ ПО Документ, Титул, НомерВерсии, ИмяТабличнойЧасти");
		Иначе
			НомерГруппы = НомерГруппы + 1;		
			МассивОбъединениеПоТаблицам.Добавить("ВЫБРАТЬ
				|	ЗначенияРеквизитовДокументовЭПД.Документ, 
				|	ЗначенияРеквизитовДокументовЭПД.Титул,               
				|	ЗначенияРеквизитовДокументовЭПД.НомерВерсии,
				|	ЗначенияРеквизитовДокументовЭПД.ИмяТабличнойЧасти,
				|	СУММА(ВТ_КОМБИНАЦИИ.КоличествоСлов) КАК КоличествоСлов" + ?(НомерГруппы = 1, "
				|ПОМЕСТИТЬ ВТ" + Строка(НомерПоиска), "") + "
				|ИЗ
				|	РегистрСведений.ЗначенияРеквизитовДокументовЭПД КАК ЗначенияРеквизитовДокументовЭПД
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_РЕЕСТР КАК ВТ_РЕЕСТР
				|		ПО ЗначенияРеквизитовДокументовЭПД.Документ = ВТ_РЕЕСТР.Ссылка
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КОМБИНАЦИИ КАК ВТ_КОМБИНАЦИИ
				|		ПО " + ТекстОтборЗначение + "
				|ГДЕ
				|	ЗначенияРеквизитовДокументовЭПД.ИмяТабличнойЧасти В (&ИменаТаблиц)
				|	И ЗначенияРеквизитовДокументовЭПД.ИмяРеквизита В (&ИменаРеквизитов)
				|СГРУППИРОВАТЬ ПО Документ, Титул, НомерВерсии, ИмяТабличнойЧасти");	
	
			Запрос.УстановитьПараметр("ИменаРеквизитов", МассивРеквизитов);
			Запрос.УстановитьПараметр("ИменаТаблиц", МассивТаблиц);
		КонецЕсли;
	КонецЕсли;
	
	Если МассивОбъединениеПоТаблицам.Количество() > 0 Тогда
		МассивПодзапросы.Добавить(СтрСоединить(МассивОбъединениеПоТаблицам, "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|") + ";");
	КонецЕсли;
	
	// Дополнительные реквизиты
	НомерПоискаДоп = 0;
	Для Каждого СтруктураПоиска Из ПоискПоДопРеквизитам Цикл
		МассивЧастей = СтрРазделить(СтруктураПоиска.Поле, ".");
		Если МассивЧастей.Количество() <> 2 Тогда
			Продолжить;
		КонецЕсли;
		Если НРег(СтруктураПоиска.ТипДанных) = "строка" 
			Или НРег(СтруктураПоиска.ТипДанных) = "перечисление" Тогда
			ЛевоеЗначениеУсловия = "ВЫРАЗИТЬ(ЗначенияРеквизитовДокументовЭПД.ЗначениеРеквизитаСтрока КАК СТРОКА(" + СтрДлина(Поиск) + "))";
		Иначе
			ЛевоеЗначениеУсловия = "ЗначенияРеквизитовДокументовЭПД.ЗначениеРеквизита";
		КонецЕсли;		
		НомерПоискаДоп = НомерПоискаДоп + 1;
		МассивПодзапросы.Добавить("ВЫБРАТЬ
		|	ЗначенияРеквизитовДокументовЭПД.Документ,
		|	ВТ_КОМБИНАЦИИ.КоличествоСлов КАК КоличествоСлов
		|ПОМЕСТИТЬ ВТ_ДОП" + Строка(НомерПоискаДоп) + "
		|ИЗ
		|	РегистрСведений.ЗначенияРеквизитовДокументовЭПД КАК ЗначенияРеквизитовДокументовЭПД
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_РЕЕСТР КАК ВТ_РЕЕСТР
		|		ПО ЗначенияРеквизитовДокументовЭПД.Документ = ВТ_РЕЕСТР.Ссылка
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияРеквизитовДокументовЭПД КАК ЗначенияРеквизитовДокументовЭПДИдентификатор
		|	ПО ЗначенияРеквизитовДокументовЭПД.Документ = ЗначенияРеквизитовДокументовЭПДИдентификатор.Документ
		|		И ЗначенияРеквизитовДокументовЭПД.Титул = ЗначенияРеквизитовДокументовЭПДИдентификатор.Титул
		|		И ЗначенияРеквизитовДокументовЭПД.НомерВерсии = ЗначенияРеквизитовДокументовЭПДИдентификатор.НомерВерсии
		|		И ЗначенияРеквизитовДокументовЭПД.ИмяТабличнойЧасти = ЗначенияРеквизитовДокументовЭПДИдентификатор.ИмяТабличнойЧасти
		|		И ЗначенияРеквизитовДокументовЭПД.НомерСтрокиРеквизита = ЗначенияРеквизитовДокументовЭПДИдентификатор.НомерСтрокиРеквизита
		|		И ЗначенияРеквизитовДокументовЭПД.ИмяТабличнойЧасти = """ + МассивЧастей[0] + """
		|		И ЗначенияРеквизитовДокументовЭПД.ИмяРеквизита = ""Значение""
		|		И ЗначенияРеквизитовДокументовЭПДИдентификатор.ИмяРеквизита = ""ИдентификаторИнформации""
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КОМБИНАЦИИ КАК ВТ_КОМБИНАЦИИ
		|		ПО " + ЛевоеЗначениеУсловия + " = ВТ_КОМБИНАЦИИ.Комбинация
		|ГДЕ
		|	ВЫРАЗИТЬ(ЗначенияРеквизитовДокументовЭПДИдентификатор.ЗначениеРеквизитаСтрока КАК СТРОКА(" + СтрДлина(СтруктураПоиска.ИдентификаторДанных) + ")) = &ИдентификаторДанных" + Строка(НомерПоискаДоп) 
		+ ";");
		Запрос.УстановитьПараметр("ИдентификаторДанных" + Строка(НомерПоискаДоп), СтруктураПоиска.ИдентификаторДанных);	
	КонецЦикла;
	
	ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РеестрЭПД.Ссылка КАК Ссылка,
		|	РеестрЭПД.Организация КАК Организация
		|ПОМЕСТИТЬ ВТ_РЕЕСТР
		|ИЗ
		|	РегистрСведений.РеестрЭПД КАК РеестрЭПД
		|ГДЕ
		|	РеестрЭПД.ДатаЭПД >= &НачалоПериода
		|	И (&КонецПериода = ДАТАВРЕМЯ(1, 1, 1)
		|			ИЛИ РеестрЭПД.ДатаЭПД <= &КонецПериода)"
		+ ТекстОтборПоТипамДокументов + "
		|
		|СГРУППИРОВАТЬ ПО
		|	РеестрЭПД.Ссылка,
		|	РеестрЭПД.Организация;"
			+ РазделительЗапросов
		+ "ВЫБРАТЬ 
		|	Комбинации.Комбинация КАК Комбинация,
		|	Комбинации.КоличествоСлов КАК КоличествоСлов
		|ПОМЕСТИТЬ ВТ_КОМБИНАЦИИ
		|ИЗ
		|	&Комбинации КАК Комбинации;"
			+ РазделительЗапросов 
		+ СтрСоединить(МассивПодзапросы, РазделительЗапросов) 
			+ РазделительЗапросов;
			
	МассивОбъединений = Новый Массив;
	МассивОбъединений.Добавить("ВЫБРАТЬ
		|	ВТ1.Документ,
		|	МАКСИМУМ(ВТ1.КоличествоСлов) КАК КоличествоСлов
		|ПОМЕСТИТЬ ВТ_ОБЩАЯ
		|ИЗ ВТ1
		|СГРУППИРОВАТЬ ПО Документ");	
	Для НомерОбъединения = 2 По НомерПоиска Цикл
		МассивОбъединений.Добавить("ВЫБРАТЬ
		|	ВТ" + Строка(НомерОбъединения) + ".Документ,
		|	МАКСИМУМ(ВТ" + Строка(НомерОбъединения) + ".КоличествоСлов)
		|ИЗ ВТ" + Строка(НомерОбъединения) + "
		|СГРУППИРОВАТЬ ПО Документ");	
	КонецЦикла;
	
	Для НомерОбъединения = 1 По НомерПоискаДоп Цикл
		МассивОбъединений.Добавить("ВЫБРАТЬ
		|	ВТ_ДОП" + Строка(НомерОбъединения) + ".Документ,
		|	МАКСИМУМ(ВТ_ДОП" + Строка(НомерОбъединения) + ".КоличествоСлов)
		|ИЗ ВТ_ДОП" + Строка(НомерОбъединения) + "
		|СГРУППИРОВАТЬ ПО Документ");	
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + СтрСоединить(МассивОбъединений, "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|");
	
	ТекстЗапроса = ТекстЗапроса + ";"
	+ РазделительЗапросов
	+ "ВЫБРАТЬ 
	|	ВТ_ОБЩАЯ.Документ КАК Документ, 
	|	СУММА(ВТ_ОБЩАЯ.КоличествоСлов) КАК КоличествоСлов 
	|ИЗ ВТ_ОБЩАЯ КАК ВТ_ОБЩАЯ
	|СГРУППИРОВАТЬ ПО 
	|	ВТ_ОБЩАЯ.Документ
	|ИМЕЮЩИЕ СУММА(ВТ_ОБЩАЯ.КоличествоСлов) >= " + Строка(МассивПоиск.Количество());
	
	Запрос.Текст = ТекстЗапроса;
		
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() = Ложь Тогда
		Выборка = РезультатЗапроса.Выбрать();	
		Пока Выборка.Следующий() Цикл
			Результат.Добавить(Выборка.Документ);	
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область ЗаполнениеРеквизитов

// Получить сообщение титула или ЭД.
// 
// Параметры:
//  Документ - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - Документ
//  ТипЭлементаРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО - Титул
//  ВернутьЭД - Булево - Вернуть ЭД
//  ПерваяВерсия - Булево - Первая версия
// 
// Возвращаемое значение:
//  ДокументСсылка.СообщениеЭДО -- Сообщение титула
Функция ПолучитьСообщениеТитула(Документ, ТипЭлементаРегламента, ВернутьЭД = Ложь, ПерваяВерсия = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(ТипЭлементаРегламента) = Тип("Массив") Тогда
		МассивТиповЭлементовРегламента = ТипЭлементаРегламента;
	Иначе
		МассивТиповЭлементовРегламента = Новый Массив;
		МассивТиповЭлементовРегламента.Добавить(ТипЭлементаРегламента);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивТиповЭлементовРегламента", МассивТиповЭлементовРегламента);
	Запрос.УстановитьПараметр("ОбъектУчета", Документ);
	Запрос.Текст = "ВЫБРАТЬ
	|	СообщениеЭДО.Ссылка КАК Сообщение,
	|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент
	|ИЗ
	|	Документ.СообщениеЭДО КАК СообщениеЭДО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
	|		ПО СообщениеЭДО.ЭлектронныйДокумент = ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент
	|		И (ОбъектыУчетаДокументовЭДО.Актуальный)
	|ГДЕ
	|	СообщениеЭДО.ТипЭлементаРегламента В(&МассивТиповЭлементовРегламента)
	|	И ОбъектыУчетаДокументовЭДО.ОбъектУчета = &ОбъектУчета
	|
	|УПОРЯДОЧИТЬ ПО
	|	СообщениеЭДО.Дата" + ?(ПерваяВерсия = Истина, "", " УБЫВ");
	               
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат ?(ВернутьЭД = Истина, Выборка.ЭлектронныйДокумент, Выборка.Сообщение);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Получить сообщения документа.
// 
// Параметры:
//  Документ - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - Документ
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение - титул и массив сообщений
Функция ПолучитьСообщенияДокумента(Документ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Соответствие;
	
	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить(Перечисления.СтатусыСообщенийЭДО.Получен);
	МассивСтатусов.Добавить(Перечисления.СтатусыСообщенийЭДО.Отправлен);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОбъектУчета", Документ);
	Запрос.УстановитьПараметр("МассивСтатусов", МассивСтатусов);
	Запрос.Текст = "ВЫБРАТЬ
	|	СообщениеЭДО.Ссылка КАК Сообщение,
	|	СообщениеЭДО.ТипЭлементаРегламента КАК ТипЭлементаРегламента
	|ИЗ
	|	Документ.СообщениеЭДО КАК СообщениеЭДО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
	|		ПО СообщениеЭДО.ЭлектронныйДокумент = ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент
	|		И (ОбъектыУчетаДокументовЭДО.Актуальный)
	|ГДЕ
	|	ОбъектыУчетаДокументовЭДО.ОбъектУчета = &ОбъектУчета
	|	И СообщениеЭДО.Статус В (&МассивСтатусов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТипЭлементаРегламента.Порядок,
	|	СообщениеЭДО.Дата УБЫВ
	|ИТОГИ
	|ПО
	|	ТипЭлементаРегламента";
	               
	ВыборкаТитулы = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаТитулы.Следующий() Цикл
		Выборка = ВыборкаТитулы.Выбрать();
		Если Выборка.Следующий() Тогда
			Результат.Вставить(ВыборкаТитулы.ТипЭлементаРегламента, Выборка.Сообщение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Заполнить строковое представление хранимых данных (для входящих документов).
// 
// Параметры:
//  СтруктураРеквизитов - Структура - Структура реквизитов
// МетаданныеОбъекта - ОбъектМетаданныхДокумент - Метаданные объекта
//  ИмяМетаданных - Строка - Имя метаданных
//  МакетСоответствиеИмен - ТекстовыйДокумент, ТабличныйДокумент - Макет соответствие имен
Процедура ЗаполнитьПредставлениеХранимыхДанныхОбъекта(СтруктураРеквизитов, ИмяМетаданных, МакетСоответствиеИмен) Экспорт
	
	ПрефиксХранимыхДанных = "ХранимыеДанные";
	ГруппыДанных = ОбменСГИСЭПДКлиентСервер.ГруппыХранимыхДанных(ИмяМетаданных);
	ОбластьКолонкаРеквизитов = МакетСоответствиеИмен.Область(,1,МакетСоответствиеИмен.ВысотаТаблицы,1);
	КэшПредставлений = Новый Соответствие;
	
	Для Каждого КиЗ Из ГруппыДанных Цикл
		ОписаниеГруппыДанных = КиЗ.Значение;
		МассивРеквизитов = Новый Массив;
		Для Каждого ИмяТЧ Из ОписаниеГруппыДанных.Таблицы Цикл
			Если ИмяТЧ = "" Тогда
				Для Каждого ИмяГруппы Из ОписаниеГруппыДанных.ВсеГруппы Цикл
					ЕстьХранимыеДанные = Ложь;
					Для Каждого	ИмяРеквизита Из ОписаниеГруппыДанных.Реквизиты Цикл
						ЗначениеРеквизита = Неопределено;
						Если СтрНачинаетсяС(ИмяРеквизита, ИмяГруппы) = Ложь Тогда
							ИмяРеквизитаСтруктуры = ИмяГруппы + ИмяРеквизита;
						Иначе
							ИмяРеквизитаСтруктуры = ИмяРеквизита;	
						КонецЕсли;
						Если СтруктураРеквизитов.Свойство(ИмяРеквизитаСтруктуры, ЗначениеРеквизита) Тогда
							Если ЗначениеРеквизита = Неопределено Тогда
								ЗначениеРеквизита = "";
							КонецЕсли;
							ПредставлениеРеквизита = КэшПредставлений.Получить(ИмяРеквизитаСтруктуры);
							Если ПредставлениеРеквизита = Неопределено Тогда				
								ОбластьНайдено = МакетСоответствиеИмен.НайтиТекст(ИмяРеквизитаСтруктуры, , ОбластьКолонкаРеквизитов, Ложь, Истина, Истина, Ложь);				
								Если ОбластьНайдено <> Неопределено Тогда
									ПредставлениеРеквизита = МакетСоответствиеИмен.Область(ОбластьНайдено.Верх, 8).Текст;
									КэшПредставлений.Вставить(ИмяРеквизитаСтруктуры, ПредставлениеРеквизита);
								КонецЕсли;
							КонецЕсли;
							СтруктураРеквизита = Новый Структура;
							СтруктураРеквизита.Вставить("Имя", ИмяРеквизита);
							СтруктураРеквизита.Вставить("Значение", ЗначениеРеквизита);
							СтруктураРеквизита.Вставить("Представление", ПредставлениеРеквизита);	
							МассивРеквизитов.Добавить(СтруктураРеквизита);
							ЕстьХранимыеДанные = Истина;
						КонецЕсли;
					КонецЦикла;
					Если ЕстьХранимыеДанные = Истина Тогда
						ПредставлениеХранимыхДанных = ПредставлениеХранимыхДанныхЭПД(МассивРеквизитов, 
																	ИмяМетаданных, 
																	ИмяГруппы);
						СтруктураРеквизитов.Вставить(
							ПрефиксХранимыхДанных + ИмяГруппы,
							ПредставлениеХранимыхДанных);
					КонецЕсли;
				КонецЦикла;
			Иначе
				ИтераторЦикла = 1;
				ЕстьХранимыеДанные = Истина;
				Пока ЕстьХранимыеДанные = Истина Цикл 
					ЕстьХранимыеДанные = Ложь;
					Для Каждого	ИмяРеквизита Из ОписаниеГруппыДанных.Реквизиты Цикл
						КлючСтруктуры = ИмяТЧ + "__" + ИтераторЦикла + "__" + ИмяРеквизита;
						ИмяВМакете = ИмяТЧ + "." + ИмяРеквизита;
						ЗначениеРеквизита = Неопределено;
						Если СтруктураРеквизитов.Свойство(КлючСтруктуры, ЗначениеРеквизита) Тогда
							Если ЗначениеРеквизита = Неопределено Тогда
								ЗначениеРеквизита = "";
							КонецЕсли;
							ПредставлениеРеквизита = КэшПредставлений.Получить(ИмяВМакете);
							Если ПредставлениеРеквизита = Неопределено Тогда
								ОбластьНайдено = МакетСоответствиеИмен.НайтиТекст(ИмяВМакете, , ОбластьКолонкаРеквизитов, Ложь, Истина, Истина, Ложь);				
								Если ОбластьНайдено <> Неопределено Тогда
									ПредставлениеРеквизита = МакетСоответствиеИмен.Область(ОбластьНайдено.Верх, 8).Текст;
									КэшПредставлений.Вставить(ИмяВМакете, ПредставлениеРеквизита);
								КонецЕсли;
							КонецЕсли;
							СтруктураРеквизита = Новый Структура;
							СтруктураРеквизита.Вставить("Имя", ИмяРеквизита);
							СтруктураРеквизита.Вставить("Значение", ЗначениеРеквизита);
							СтруктураРеквизита.Вставить("Представление", ПредставлениеРеквизита);	
							МассивРеквизитов.Добавить(СтруктураРеквизита);
							ЕстьХранимыеДанные = Истина;
						КонецЕсли;
					КонецЦикла;	
					Если ЕстьХранимыеДанные = Ложь Тогда
						Прервать;	
					КонецЕсли;
					ПредставлениеХранимыхДанных = ПредставлениеХранимыхДанныхЭПД(МассивРеквизитов, 
																ИмяМетаданных, 
																КиЗ.Ключ);
					СтруктураРеквизитов.Вставить(
						ИмяТЧ + "__" + ИтераторЦикла + "__" + ПрефиксХранимыхДанных + КиЗ.Ключ,
						ПредставлениеХранимыхДанных);
					ИтераторЦикла = ИтераторЦикла + 1;
				КонецЦикла;
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры


// Контактная информация ВXML.
// 
// Параметры:
//  ЗначенияПолей - - Строка
//                  - Структура
//                  - Соответствие из КлючИЗначение
//                  - СписокЗначений из Строка - описание полей контактной информации.
//  Представление - Строка - Представление
//  ОжидаемыйВид - Неопределено - Ожидаемый вид
// 
// Возвращаемое значение:
//  Строка - Контактная информация ВXML
Функция КонтактнаяИнформацияВXML(ЗначенияПолей, Представление = "", ОжидаемыйВид = Неопределено) Экспорт
	
	Возврат УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(ЗначенияПолей, 
																Представление,
																ОжидаемыйВид);
	
КонецФункции

// Представление контактной информации.
// 
// Параметры:
//  КонтактнаяИнформация - Строка - Контактная информация в XML
// 
// Возвращаемое значение:
//  Строка - Представление контактной информации
Функция ПредставлениеКонтактнойИнформации(КонтактнаяИнформация) Экспорт
	
	Возврат УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(КонтактнаяИнформация);
	
КонецФункции

// Получить реквизиты участников документооборота.
// 
// Параметры:
//  Участник - СправочникСсылка.Организации, СправочникСсылка.Контрагенты - Участник
//  ДобавитьПлатежныеРеквизиты - Булево - добавление сведений о банковском счете
// 
// Возвращаемое значение:
//  Структура - см. СтруктураУчастникаЭПД
Функция ПолучитьРеквизитыУчастника(Участник, ДобавитьПлатежныеРеквизиты = Ложь) Экспорт
	
	Результат = СтруктураУчастникаЭПД(ДобавитьПлатежныеРеквизиты);
	
	Если ЗначениеЗаполнено(Участник) Тогда
		СведенияОбУчастнике  = ЭлектронноеВзаимодействие.СтруктураДанныхЮрФизЛица();
		ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(Участник, СведенияОбУчастнике);
		
		СтранаРегистрации = Неопределено;
		СведенияОбУчастнике.Свойство("СтранаРегистрации", СтранаРегистрации);
		
		ЮрФизЛицо = Неопределено;
		СведенияОбУчастнике.Свойство("ЮридическоеФизическоеЛицо", ЮрФизЛицо);		
		Если ЮрФизЛицо = Неопределено Тогда
			СведенияОбУчастнике.Свойство("ЮрФизЛицо", ЮрФизЛицо);	
		КонецЕсли;			
		
		Если ЗначениеЗаполнено(СтранаРегистрации) 
			И СтранаРегистрации <> ПредопределенноеЗначение("Справочник.СтраныМира.Россия") Тогда
			Результат.Вставить("ИнострЛицоБезУчетаСтрана", СтранаРегистрации);
			Результат.Вставить("ИнострЛицоБезУчетаИдентификатор", СведенияОбУчастнике.ОГРН);
		Иначе
			Если Строка(ЮрФизЛицо) = "Физическое лицо"
			 Или Строка(ЮрФизЛицо) = "Индивидуальный предприниматель" Тогда
				Если СведенияОбУчастнике.Свойство("ФИОФизлица") 
					И ЗначениеЗаполнено(СведенияОбУчастнике.ФИОФизлица) Тогда
					ЧастиФИО = СтрРазделить(СведенияОбУчастнике.ФИОФизлица, " ");
					Фамилия = ЧастиФИО[0];
					Имя = ?(ЧастиФИО.Количество() > 1, ЧастиФИО[1], "");
					Отчество = ?(ЧастиФИО.Количество() > 2, ЧастиФИО[2], "");
				ИначеЕсли СведенияОбУчастнике.Свойство("Фамилия") Тогда
					Фамилия = СведенияОбУчастнике.Фамилия;
					Имя = СведенияОбУчастнике.Имя;
					Отчество = СведенияОбУчастнике.Отчество;	
				КонецЕсли;
				Результат.Вставить("ИПФамилия", Фамилия);
				Результат.Вставить("ИПИмя", Имя);
				Результат.Вставить("ИПОтчество", Отчество);	
				Результат.Вставить("ИП_ИНН", СведенияОбУчастнике.ИНН);
				Результат.Вставить("ОГРНИП", СведенияОбУчастнике.ОГРН);
			Иначе
				Результат.Вставить("ЮЛНаименование", СведенияОбУчастнике.ПолноеНаименование);
				Результат.Вставить("ЮЛ_ИНН", СведенияОбУчастнике.ИНН);
				Результат.Вставить("ЮЛ_КПП", СведенияОбУчастнике.КПП);
				Результат.Вставить("ЮЛ_ОГРН", СведенияОбУчастнике.ОГРН);
			КонецЕсли;
		КонецЕсли;
		
		МассивТлф = СтрРазделить(СведенияОбУчастнике.Телефоны, ",", Ложь);
		Результат.Вставить("НомераТелефонов", МассивТлф);
		
		Email = Неопределено;
		СведенияОбУчастнике.Свойство("Email", Email);		
		Если Email = Неопределено Тогда
			СведенияОбУчастнике.Свойство("ЭлектроннаяПочта", Email);	
		КонецЕсли;
		
		МассивEmail = Новый Массив;
		Если ЗначениеЗаполнено(Email) Тогда	
			МассивEmail.Добавить(Email);
		КонецЕсли;
		Результат.Вставить("АдресаЭлектроннойПочты", МассивEmail);
			
		ДополнительныеПараметры = Новый Структура("БезПредставлений, ПроверитьАдрес, КодыАдреса", Ложь, Истина, Истина);
		
		АдресВоВнутреннемФормате = Неопределено;
		СведенияОбУчастнике.Свойство("ЗначениеJSONЮридическийАдрес", АдресВоВнутреннемФормате);
		Если АдресВоВнутреннемФормате = Неопределено Тогда
			СведенияОбУчастнике.Свойство("ЮридическийАдресXML", АдресВоВнутреннемФормате);	
		КонецЕсли;
		АдресОтправителяСтруктура = РаботаСАдресами.СведенияОбАдресе(АдресВоВнутреннемФормате, ДополнительныеПараметры);
		
		Результат.Вставить("АдресИндекс", АдресОтправителяСтруктура.Индекс);
		Результат.Вставить("АдресКодРегиона", АдресОтправителяСтруктура.КодРегиона);
		Если АдресОтправителяСтруктура.КодРегиона = "77" Или АдресОтправителяСтруктура.КодРегиона = "78" Или АдресОтправителяСтруктура.КодРегиона = "92" Тогда
			Результат.Вставить("АдресГород", АдресОтправителяСтруктура.Регион + ?(АдресОтправителяСтруктура.РегионТипКраткий = "", "", " ") + АдресОтправителяСтруктура.РегионТипКраткий);	
		Иначе
			Результат.Вставить("АдресГород", АдресОтправителяСтруктура.Город + ?(АдресОтправителяСтруктура.ГородТипКраткий = "", "", " ") + АдресОтправителяСтруктура.ГородТипКраткий);
		КонецЕсли;	
		Результат.Вставить("АдресРайон", АдресОтправителяСтруктура.Район + ?(АдресОтправителяСтруктура.РайонТипКраткий = "", "", " ") + АдресОтправителяСтруктура.РайонТипКраткий);
		Результат.Вставить("АдресНаселенныйПункт", АдресОтправителяСтруктура.НаселенныйПункт + ?(АдресОтправителяСтруктура.НаселенныйПунктТипКраткий = "", "", " ") + АдресОтправителяСтруктура.НаселенныйПунктТипКраткий);
		Результат.Вставить("АдресУлица", АдресОтправителяСтруктура.Улица + ?(АдресОтправителяСтруктура.УлицаТипКраткий = "", "", " ") + АдресОтправителяСтруктура.УлицаТипКраткий);
		Результат.Вставить("АдресДом", АдресОтправителяСтруктура.Здание.Номер);
		Если АдресОтправителяСтруктура.Корпуса.Количество() > 0 Тогда
			Результат.Вставить("АдресКорпус", АдресОтправителяСтруктура.Корпуса[0].Номер);
		КонецЕсли;
		
		Если ДобавитьПлатежныеРеквизиты = Истина Тогда
			Результат.Вставить("БИК", СведенияОбУчастнике.БИК);
			Результат.Вставить("НаименованиеБанка", СведенияОбУчастнике.Банк);
			Результат.Вставить("РасчетныйСчет", СведенияОбУчастнике.НомерСчета);
			Результат.Вставить("КоррСчет", СведенияОбУчастнике.КоррСчет);
		КонецЕсли;
	КонецЕсли;
	
	//@skip-check constructor-function-return-section
	Возврат Результат;
	
КонецФункции

// Получить реквизиты физ лица.
// 
// Параметры:
//  ФизЛицо - СправочникСсылка.ФизическиеЛица - Физ. лицо
//  Организация - Неопределено - Организация
// 
// Возвращаемое значение:
//  Структура - Получить реквизиты физ лица:
// * Фамилия - Строка -
// * Имя - Строка -
// * Отчество - Строка -
// * НомераТелефонов - Массив из Строка -
// * АдресаЭлектроннойПочты - Массив из Строка -
// * АдресИндекс - Строка -
// * АдресКодРегиона - Строка -
// * АдресГород - Строка -
// * АдресРайон - Строка -
// * АдресНаселенныйПункт - Строка -
// * АдресУлица - Строка -
// * АдресДом - Строка -
// * АдресКорпус - Строка
Функция ПолучитьРеквизитыФизЛица(ФизЛицо, Организация = Неопределено) Экспорт
	
	Результат = Новый Структура;
	
	Если ЗначениеЗаполнено(ФизЛицо) Тогда
		СведенияОбУчастнике  = ЭлектронноеВзаимодействие.СтруктураДанныхФизЛица();
		ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеФизЛица(ФизЛицо, СведенияОбУчастнике, Организация);
		
		Результат.Вставить("Фамилия", СведенияОбУчастнике.Фамилия);
		Результат.Вставить("Имя", СведенияОбУчастнике.Имя);
		Результат.Вставить("Отчество", СведенияОбУчастнике.Отчество);
		
		МассивТлф = СтрРазделить(СведенияОбУчастнике.Телефоны, ",", Ложь);
		Результат.Вставить("НомераТелефонов", МассивТлф);
		
		Email = Неопределено;
		СведенияОбУчастнике.Свойство("Email", Email);		
		Если Email = Неопределено Тогда
			СведенияОбУчастнике.Свойство("ЭлектроннаяПочта", Email);	
		КонецЕсли;
		
		МассивEmail = Новый Массив;
		Если ЗначениеЗаполнено(Email) Тогда	
			МассивEmail.Добавить(Email);
		КонецЕсли;
		Результат.Вставить("АдресаЭлектроннойПочты", МассивEmail);
			
		ДополнительныеПараметры = Новый Структура("БезПредставлений, ПроверитьАдрес, КодыАдреса", Ложь, Истина, Истина);
		
		АдресВоВнутреннемФормате = Неопределено;
		СведенияОбУчастнике.Свойство("АдресПоПропискеXML", АдресВоВнутреннемФормате);
		Если АдресВоВнутреннемФормате = Неопределено Тогда
			СведенияОбУчастнике.Свойство("АдресМестаПроживанияXML", АдресВоВнутреннемФормате);	
		КонецЕсли;
		АдресОтправителяСтруктура = РаботаСАдресами.СведенияОбАдресе(АдресВоВнутреннемФормате, ДополнительныеПараметры);
		
		Результат.Вставить("АдресИндекс", АдресОтправителяСтруктура.Индекс);
		Результат.Вставить("АдресКодРегиона", АдресОтправителяСтруктура.КодРегиона);
		Если АдресОтправителяСтруктура.КодРегиона = "77" Или АдресОтправителяСтруктура.КодРегиона = "78" Или АдресОтправителяСтруктура.КодРегиона = "92" Тогда
			Результат.Вставить("АдресГород", АдресОтправителяСтруктура.Регион + ?(АдресОтправителяСтруктура.РегионТипКраткий = "", "", " ") + АдресОтправителяСтруктура.РегионТипКраткий);	
		Иначе
			Результат.Вставить("АдресГород", АдресОтправителяСтруктура.Город + ?(АдресОтправителяСтруктура.ГородТипКраткий = "", "", " ") + АдресОтправителяСтруктура.ГородТипКраткий);
		КонецЕсли;	
		Результат.Вставить("АдресРайон", АдресОтправителяСтруктура.Район + ?(АдресОтправителяСтруктура.РайонТипКраткий = "", "", " ") + АдресОтправителяСтруктура.РайонТипКраткий);
		Результат.Вставить("АдресНаселенныйПункт", АдресОтправителяСтруктура.НаселенныйПункт + ?(АдресОтправителяСтруктура.НаселенныйПунктТипКраткий = "", "", " ") + АдресОтправителяСтруктура.НаселенныйПунктТипКраткий);
		Результат.Вставить("АдресУлица", АдресОтправителяСтруктура.Улица + ?(АдресОтправителяСтруктура.УлицаТипКраткий = "", "", " ") + АдресОтправителяСтруктура.УлицаТипКраткий);
		Результат.Вставить("АдресДом", АдресОтправителяСтруктура.Здание.Номер);
		Если АдресОтправителяСтруктура.Корпуса.Количество() > 0 Тогда
			Результат.Вставить("АдресКорпус", АдресОтправителяСтруктура.Корпуса[0].Номер);
		КонецЕсли;
	КонецЕсли;
	
	//@skip-check constructor-function-return-section
	Возврат Результат;
	
КонецФункции

// Создать элементы ввода значений списка.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма
//  ИмяТаблицы - Строка - Имя таблицы
//  ИменаПолей - Строка - Имена полей
//  ДобавитьСтроку - Булево - Добавить строку
//  ДобавлениеСверху - Булево - Добавление сверху
//  ЭлементРодитель - Неопределено - Элемент родитель
//  ИдентификаторСтрокиРодителя - Неопределено - Идентификатор строки родителя
//  ПоказыватьПустые - Булево - Показывать пустые
//@skip-check method-too-many-params
Процедура СоздатьЭлементыВводаЗначенийСписка(Форма, ИмяТаблицы, ИменаПолей, ДобавитьСтроку = Ложь, ДобавлениеСверху = Ложь, Знач ЭлементРодитель = Неопределено, ИдентификаторСтрокиРодителя = Неопределено, ПоказыватьПустые = Истина) Экспорт
	
	Если Форма.Параметры.Свойство("ФормаБезОбработки") Тогда
		Возврат;
	КонецЕсли;
	
	МассивИменПолей = СтрРазделить(ИменаПолей, "_");
	
	ГруппаПоТаблице = Форма.Элементы.Найти("ГруппаПолейВвода" + ИмяТаблицы);
	Если ГруппаПоТаблице = Неопределено Тогда
		Если ЭлементРодитель = Неопределено Тогда
			ЭлементРодитель = Форма.Элементы.Найти("ГруппаРеквизиты");
			Если ЭлементРодитель = Неопределено Тогда
				ЭлементРодитель = Форма;
			КонецЕсли;
		КонецЕсли;
		Если ДобавлениеСверху = Истина И ЭлементРодитель.ПодчиненныеЭлементы.Количество() > 0 Тогда
			ЭлементПосле = ЭлементРодитель.ПодчиненныеЭлементы[0];
			ГруппаПоТаблице = Форма.Элементы.Вставить("ГруппаПолейВвода" + ИмяТаблицы, Тип("ГруппаФормы"), ЭлементРодитель, ЭлементПосле);
		Иначе
			ГруппаПоТаблице = Форма.Элементы.Добавить("ГруппаПолейВвода" + ИмяТаблицы, Тип("ГруппаФормы"), ЭлементРодитель);
		КонецЕсли; 
		ГруппаПоТаблице.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаПоТаблице.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		ГруппаПоТаблице.Отображение = ОтображениеОбычнойГруппы.Нет;
		ГруппаПоТаблице.ОтображатьЗаголовок = Ложь;
		ГруппаПоТаблице.Объединенная = Ложь;
	КонецЕсли;
	
	КолонкиТаблицы = Форма.ПолучитьРеквизиты(ИмяТаблицы);
	
	НайденныеРеквизиты = Новый Массив;
	ЗаголовокХранитсяВТаблице = Ложь;
	ТипДанныхХранитсяВТаблице = Ложь;
	ЕстьИдентификаторИнформации = Ложь;
	ЕстьКвалификаторы = Ложь;
	ЕстьПеречисления = Ложь;
	ЕстьОбязательность = Ложь;
	Для Каждого РеквизитКолонки Из КолонкиТаблицы Цикл
		Если МассивИменПолей.Найти(РеквизитКолонки.Имя) <> Неопределено Тогда
			НайденныеРеквизиты.Добавить(РеквизитКолонки);
		ИначеЕсли РеквизитКолонки.Имя = "Заголовок" Тогда
			ЗаголовокХранитсяВТаблице = Истина;
		ИначеЕсли РеквизитКолонки.Имя = "ТипДанных" Тогда
			ТипДанныхХранитсяВТаблице = Истина;	
		ИначеЕсли РеквизитКолонки.Имя = "ИдентификаторИнформации" Тогда
			ЕстьИдентификаторИнформации = Истина;
		ИначеЕсли РеквизитКолонки.Имя = "Квалификаторы" Тогда
			ЕстьКвалификаторы = Истина;
		ИначеЕсли РеквизитКолонки.Имя = "Перечисления" Тогда
			ЕстьПеречисления = Истина;
		ИначеЕсли РеквизитКолонки.Имя = "Обязательный" Тогда
			ЕстьОбязательность = Истина;	
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьИдентификаторИнформации = Ложь
		И (Форма[ИмяТаблицы].Количество() = 0 Или ДобавитьСтроку) Тогда
		ТекущиеДанные = Форма[ИмяТаблицы].Добавить();
		Если ТекущиеДанные.Свойство("ИдентификаторСтрокиРодителя") Тогда
			Если ОбменСГИСЭПДКлиентСервер.ЭтоОсновнаяФорма(Форма) Тогда
				ТекущиеДанные.ИдентификаторСтрокиРодителя = ИдентификаторСтрокиРодителя;
			Иначе
				ТекущиеДанные.ИдентификаторСтрокиРодителя = Форма.ИдентификаторСтрокиРодителя;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ДобавитьСтроку = Истина Тогда
		ИндексОт = Форма[ИмяТаблицы].Количество() - 1;
		ИндексДо = ИндексОт;
	Иначе
		ИндексОт = 0;
		ИндексДо = Форма[ИмяТаблицы].Количество() - 1;
	КонецЕсли;
	
	КоличествоДобавлено = 0;
	НоваяГруппа = Неопределено;
	Если НайденныеРеквизиты.Количество() > 0 Тогда
		Для ИтераторЦикла = ИндексОт По ИндексДо Цикл
			НомерПоля = Строка(ИтераторЦикла); 
			ИтераторСтрокой = СтрЗаменить(Строка(ИтераторЦикла), Символы.НПП, "");
			
			ИмяГруппыСтроки = "Группа" + ИмяТаблицы + "_" + НомерПоля;
				
			ГруппаСтроки = Форма.Элементы.Найти(ИмяГруппыСтроки);
			Если ГруппаСтроки = Неопределено Тогда
				ГруппаСтроки = Форма.Элементы.Добавить(ИмяГруппыСтроки, Тип("ГруппаФормы"), ГруппаПоТаблице);
				ГруппаСтроки.Вид = ВидГруппыФормы.ОбычнаяГруппа;
				ГруппаСтроки.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
				ГруппаСтроки.ОтображатьЗаголовок = Ложь;
				ГруппаСтроки.Отображение = ОтображениеОбычнойГруппы.Нет;
				ГруппаСтроки.Объединенная = Ложь;
			Иначе
				ГруппаСтроки.Видимость = Истина;
			КонецЕсли;
			
			Для Каждого НайденныйРеквизит Из НайденныеРеквизиты Цикл
				ИмяПоля = НайденныйРеквизит.Имя;
				ЗаголовокПоля = НайденныйРеквизит.Заголовок;
				
				Если ПоказыватьПустые = Ложь
					И ЗначениеЗаполнено(Форма[ИмяТаблицы][ИтераторЦикла][ИмяПоля]) = Ложь Тогда
					ГруппаСтроки.Видимость = Ложь;
					Продолжить;
				КонецЕсли;
				
				ИмяГруппы = "Группа" + ИмяТаблицы + ИмяПоля + "_" + НомерПоля;
				НоваяГруппа = Форма.Элементы.Найти(ИмяГруппы);
				Если НоваяГруппа = Неопределено Тогда
					НоваяГруппа = Форма.Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), ГруппаСтроки); 
					НоваяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
					НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
					НоваяГруппа.ОтображатьЗаголовок = Ложь;               
					НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
					НоваяГруппа.Объединенная = Ложь;
				КонецЕсли;
				
				ИмяДекорацииЗаголовка = "Заголовок" + ИмяТаблицы + ИмяПоля + "_" + НомерПоля;
				НовыйЗаголовок = Форма.Элементы.Найти(ИмяДекорацииЗаголовка);
				Если НовыйЗаголовок = Неопределено Тогда
					НовыйЗаголовок = Форма.Элементы.Добавить(ИмяДекорацииЗаголовка, Тип("ДекорацияФормы"), НоваяГруппа);
					НовыйЗаголовок.Вид = ВидДекорацииФормы.Надпись;
				КонецЕсли;
				Если ЗаголовокХранитсяВТаблице Тогда
					Если ЗначениеЗаполнено(Форма[ИмяТаблицы][ИтераторЦикла].Заголовок) Тогда
						НовыйЗаголовок.Заголовок = Форма[ИмяТаблицы][ИтераторЦикла].Заголовок + ":";
					ИначеЕсли ЕстьИдентификаторИнформации Тогда
						НовыйЗаголовок.Заголовок = Форма[ИмяТаблицы][ИтераторЦикла].ИдентификаторИнформации + ":";	
					КонецЕсли;
				Иначе
					НовыйЗаголовок.Заголовок = ЗаголовокПоля + ?(ИтераторЦикла > 0, " " + Строка(ИтераторЦикла + 1), "") + ":";
				КонецЕсли;
				
				ИмяГруппыЗначениеИКнопка = "ГруппаЗначение" + ИмяТаблицы + ИмяПоля + "_" + НомерПоля;
				НоваяГруппаЗначениеИКнопка = Форма.Элементы.Найти(ИмяГруппыЗначениеИКнопка);
				Если НоваяГруппаЗначениеИКнопка = Неопределено Тогда
					НоваяГруппаЗначениеИКнопка = Форма.Элементы.Добавить(ИмяГруппыЗначениеИКнопка, Тип("ГруппаФормы"), НоваяГруппа); 
					НоваяГруппаЗначениеИКнопка.Вид = ВидГруппыФормы.ОбычнаяГруппа;
					НоваяГруппаЗначениеИКнопка.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
					НоваяГруппаЗначениеИКнопка.ОтображатьЗаголовок = Ложь;               
					НоваяГруппаЗначениеИКнопка.Отображение = ОтображениеОбычнойГруппы.Нет;
					НоваяГруппаЗначениеИКнопка.Объединенная = Истина;
				КонецЕсли;
				
				ИмяПоляРеквизита = ИмяТаблицы + "__" + ИмяПоля + "__" + НомерПоля;
				НовыйРеквизит = Форма.Элементы.Найти(ИмяПоляРеквизита);
				Если НовыйРеквизит = Неопределено Тогда
					НовыйРеквизит = Форма.Элементы.Добавить(ИмяПоляРеквизита, Тип("ПолеФормы"), НоваяГруппаЗначениеИКнопка);
					НовыйРеквизит.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
					НовыйРеквизит.ПутьКДанным = ИмяТаблицы + "[" + ИтераторСтрокой + "]." + ИмяПоля;
				КонецЕсли;
				
				ВидПоляВвода = ВидПоляФормы.ПолеВвода;
				
				РазрешитьМногострочныйРежим = Истина;
				Если ТипДанныхХранитсяВТаблице Тогда
					РазрешитьМногострочныйРежим = Ложь;
					ТипСтрокой = Форма[ИмяТаблицы][ИтераторЦикла].ТипДанных;
					Если ЕстьКвалификаторы Тогда
						КвалификаторыСтрокой = Форма[ИмяТаблицы][ИтераторЦикла].Квалификаторы;
					Иначе
						КвалификаторыСтрокой = Неопределено;
					КонецЕсли;
					Если ЕстьПеречисления Тогда
						ПеречисленияСтрокой = Форма[ИмяТаблицы][ИтераторЦикла].Перечисления;
					Иначе
						ПеречисленияСтрокой = Неопределено;
					КонецЕсли;
					Если ТипСтрокой = "Число" Тогда
						ОграничениеТипа = ОписаниеТипаДопРеквизита(ТипСтрокой, КвалификаторыСтрокой);
						НовыйРеквизит.Ширина = 8;	
						НовыйРеквизит.РастягиватьПоГоризонтали = Ложь;
					ИначеЕсли ТипСтрокой = "Булево" Тогда
						ОграничениеТипа = Новый ОписаниеТипов("Булево");
						ВидПоляВвода = ВидПоляФормы.ПолеФлажка;
					ИначеЕсли ТипСтрокой = "Дата" Или ТипСтрокой = "ДатаВремя" Или ТипСтрокой = "Время" Тогда
						ОграничениеТипа = ОписаниеТипаДопРеквизита(ТипСтрокой, КвалификаторыСтрокой);
						Если ТипСтрокой = "ДатаВремя" Тогда
							НовыйРеквизит.Ширина = 10;	
						Иначе
							НовыйРеквизит.Ширина = 8;	
						КонецЕсли;
						НовыйРеквизит.РастягиватьПоГоризонтали = Ложь;
					ИначеЕсли ТипСтрокой = "Строка" Тогда
						ОграничениеТипа = ОписаниеТипаДопРеквизита(ТипСтрокой, КвалификаторыСтрокой);
						РазрешитьМногострочныйРежим = Истина;
					ИначеЕсли ТипСтрокой = "Перечисление" Тогда
						ОграничениеТипа = ОписаниеТипаДопРеквизита(ТипСтрокой);
					Иначе
						ОграничениеТипа = Неопределено;	
					КонецЕсли;
					
					Если ОграничениеТипа <> Неопределено Тогда
						НовыйРеквизит.ОграничениеТипа = ОграничениеТипа;
					КонецЕсли;	
				КонецЕсли;
				
				НовыйРеквизит.Вид = ВидПоляВвода;
				
				Если ПеречисленияСтрокой <> Неопределено И ЗначениеЗаполнено(ПеречисленияСтрокой) Тогда
					НовыйРеквизит.РежимВыбораИзСписка = Истина;
					НовыйРеквизит.КнопкаВыбора = Ложь;
					МассивЗначений = СтрРазделить(ПеречисленияСтрокой, "|");
					НовыйРеквизит.СписокВыбора.Очистить();
					Для Каждого ЗначениеПеречисления Из МассивЗначений Цикл
						НовыйРеквизит.СписокВыбора.Добавить(ЗначениеПеречисления);	
					КонецЦикла;	
				КонецЕсли;
				
				Если ЕстьОбязательность = Истина И НовыйРеквизит.Вид = ВидПоляФормы.ПолеВвода Тогда
					НовыйРеквизит.АвтоОтметкаНезаполненного = Форма[ИмяТаблицы][ИтераторЦикла].Обязательный;	
				КонецЕсли;
				
				Если ДобавитьСтроку = Истина Тогда
					Форма.ТекущийЭлемент = НовыйРеквизит;
				КонецЕсли;
				
				Если НайденныйРеквизит.ТипЗначения.СодержитТип(Тип("Строка")) 
					И РазрешитьМногострочныйРежим
					И НайденныйРеквизит.ТипЗначения.КвалификаторыСтроки.Длина > 200 Тогда
					НовыйРеквизит.МногострочныйРежим = Истина;		
				КонецЕсли;
				
				// Список выбора
				НайденныйЭлемент = Форма.Элементы.Найти(ИмяТаблицы + ИмяПоля);
				Если НайденныйЭлемент <> Неопределено Тогда
					МаксДлина = 0;
					Для Каждого ЭлементСписка Из НайденныйЭлемент.СписокВыбора Цикл
						НовыйРеквизит.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
						МаксДлина = Макс(МаксДлина, СтрДлина(ЭлементСписка.Представление));
					КонецЦикла;
					Если МаксДлина > 0 Тогда
						НовыйРеквизит.Ширина = МаксДлина;
						НовыйРеквизит.РежимВыбораИзСписка = Истина;	
					КонецЕсли;
				КонецЕсли;
				
				Если ИмяПоля = "Телефон"
					Или ИмяПоля = "СведенияГИСУчетнаяЕдиница" Тогда
					Если ИтераторЦикла = 0 Тогда
						НовыйРеквизит.АвтоОтметкаНезаполненного = Истина;
					КонецЕсли;
				КонецЕсли;
				Если ИмяПоля = "Телефон" Тогда
					НовыйРеквизит.УстановитьДействие("ИзменениеТекстаРедактирования", "Подключаемый_ПолеЗначенияСпискаИзменениеТекстаРедактирования");
				КонецЕсли;
			КонецЦикла;	
			КоличествоДобавлено = КоличествоДобавлено + 1;
		КонецЦикла;
	
		// Если заголовок храниться в таблице, значит набор элементов предопределен, добавлять нельзя 
		Если НоваяГруппаЗначениеИКнопка <> Неопределено И ЗаголовокХранитсяВТаблице = Ложь Тогда
			ИмяКоманды = "ДобавлениеПоляВвода" + ИмяТаблицы + "__" + ИменаПолей;
			Если ИдентификаторСтрокиРодителя <> Неопределено Тогда
				ИмяКоманды = ИмяКоманды + "__" + СтрЗаменить(ИдентификаторСтрокиРодителя, "-", "");
			КонецЕсли;
			ИмяКнопки = "КнопкаДобавить" + ИмяТаблицы;
			КомандаДобавления = Форма.Команды.Найти(ИмяКоманды); 
			Если КомандаДобавления = Неопределено Тогда
				КомандаДобавления = Форма.Команды.Добавить(ИмяКоманды);
				КомандаДобавления.Заголовок = "Добавить";
				КомандаДобавления.Действие = "Подключаемый_ДобавлениеПоляВвода";
				КомандаДобавления.Картинка = БиблиотекаКартинок.СоздатьЭлементСписка;
				КомандаДобавления.Отображение = ОтображениеКнопки.КартинкаИТекст;
				
				НоваяКнопка = Форма.Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), НоваяГруппаЗначениеИКнопка);
				НоваяКнопка.ИмяКоманды = КомандаДобавления.Имя;
			Иначе
				СтараяКнопка = Форма.Элементы.Найти(ИмяКнопки);
				Если СтараяКнопка <> Неопределено Тогда
					Форма.Элементы.Переместить(СтараяКнопка, НоваяГруппаЗначениеИКнопка);
				КонецЕсли;	
			КонецЕсли;			
		КонецЕсли;
		
		Если КоличествоДобавлено > 0 Тогда
			ЭлементТаблицы = Форма.Элементы.Найти(ИмяТаблицы);
			Если ЭлементТаблицы <> Неопределено Тогда
				ЭлементТаблицы.Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьФорматированноеЗначениеПоляВвода(Форма, ТекущиеДанные, ИмяПоля, Текст) Экспорт
	
	Если Форма.Параметры.Свойство("ФормаБезОбработки") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные[ИмяПоля] = Текст;

	Если ИмяПоля = "Телефон" Тогда
		ПредставлениеТелефона = ОбменСГИСЭПДКлиентСервер.ПолучитьПредставлениеТелефона(Текст);
		Если ЗначениеЗаполнено(ПредставлениеТелефона) Тогда
			ТекущиеДанные[ИмяПоля] = ПредставлениеТелефона;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ГруппыДанныхДополнительныхПолей(Знач ИмяДокумента, МакетСоответствиеИмен = Неопределено) Экспорт
	
	Результат = Новый Структура;
	
	Если ТипЗнч(ИмяДокумента) = Тип("ПеречислениеСсылка.ТипыДокументовЭДО") Тогда
		ИмяДокумента = ИмяДокументаПоТипу(ИмяДокумента);
	КонецЕсли;
	
	Если МакетСоответствиеИмен = Неопределено Тогда
		МакетСоответствиеИмен = МакетСоответствийИменРеквизитов(ИмяДокумента);
	КонецЕсли;
	
	Если МакетСоответствиеИмен = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	ОбластьКолонкаУзлов = МакетСоответствиеИмен.Область(,2,МакетСоответствиеИмен.ВысотаТаблицы,2);
	
	ИмяУзлаДополнительныхПолей = "ИнфПол";
	
	ОбластьНайдено = МакетСоответствиеИмен.НайтиТекст("/" + ИмяУзлаДополнительныхПолей, , ОбластьКолонкаУзлов, Ложь, Ложь, Истина, Ложь);
	Пока ОбластьНайдено <> Неопределено Цикл
		Если СтрЗаканчиваетсяНа(ОбластьНайдено.Текст, "/" + ИмяУзлаДополнительныхПолей) Тогда
			ТекущаяИмяГруппы = СтрЗаменить(МакетСоответствиеИмен.Область(ОбластьНайдено.Верх, 1).Текст, "ИнформационныеПоля", "");
			
			СтруктураГруппы = Новый Структура;
			СтруктураГруппы.Вставить("Узел", МакетСоответствиеИмен.Область(ОбластьНайдено.Верх, 2).Текст);
			
			Результат.Вставить(ТекущаяИмяГруппы, СтруктураГруппы);
		КонецЕсли;												
		ОбластьНайдено = МакетСоответствиеИмен.НайтиТекст("/" + ИмяУзлаДополнительныхПолей, ОбластьНайдено, ОбластьКолонкаУзлов, Ложь, Ложь, Истина, Ложь);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ДеревоГруппДанныхДляДополнительныхПолей(ТипДокумента, ДобавлятьОтсутствующиеВФормате = Истина) Экспорт
	
	Результат = Новый ДеревоЗначений;
	Результат.Колонки.Добавить("Путь", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(80)));
	Результат.Колонки.Добавить("Узел", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(250)));
	Результат.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(150)));
	Результат.Колонки.Добавить("ЕстьВФормате", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ЭтоТитул", Новый ОписаниеТипов("Булево"));
	
	ИмяДокумента = ИмяДокументаПоТипу(ТипДокумента);
	
	МакетСоответствиеИмен = МакетСоответствийИменРеквизитов(ИмяДокумента);
	
	Если МакетСоответствиеИмен = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	ГруппыПоФормату = ГруппыДанныхДополнительныхПолей(ИмяДокумента, МакетСоответствиеИмен);
	
	СоответствиеТитуловИШагов = СоответствиеТитуловИШагов();
	ПостфиксСтруктур = ПризнакОбластиСтруктур();
	
	Для Каждого ОбластьТитула Из МакетСоответствиеИмен.Области Цикл
		Если СтрЗаканчиваетсяНа(ОбластьТитула.Имя, ПостфиксСтруктур) Тогда
			ИмяТитула = Лев(ОбластьТитула.Имя, СтрДлина(ОбластьТитула.Имя) - СтрДлина(ПостфиксСтруктур));
		Иначе
			ИмяТитула = ОбластьТитула.Имя;
		КонецЕсли; 
		
		Если ДобавлятьОтсутствующиеВФормате = Ложь
			И ГруппыПоФормату.Свойство(ИмяТитула) = Ложь Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрНачинаетсяС(ИмяТитула, "ДопТитул") Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТитула = Результат.Строки.Найти(ИмяТитула, "Путь", Ложь);
		Если СтрокаТитула = Неопределено Тогда
			СтрокаТитула = Результат.Строки.Добавить();
			СтрокаТитула.Путь = ИмяТитула;
			СтрокаТитула.ЭтоТитул = Истина;
			Титул = ОбменСГИСЭПДКлиентСервер.ТитулПоПрефиксу("Документ." + ИмяДокумента, ИмяТитула);
			СтрокаТитула.Представление = "Титул " + """" + СоответствиеТитуловИШагов.Получить(Титул) + """";
			
			СтруктураГруппы = Неопределено;
			Если ГруппыПоФормату.Свойство(ИмяТитула, СтруктураГруппы) Тогда
				СтрокаТитула.ЕстьВФормате = Истина;
				СтрокаТитула.Узел = СтруктураГруппы.Узел;
			Иначе
				СтрокаТитула.Узел = "//Card/Description/AdditionalData/AdditionalParameter[@Name=" + СтрокаТитула.Путь + "*]/@Value";
			КонецЕсли;
		КонецЕсли;
		
		Для СчетчикСтрок = 0 По ОбластьТитула.Низ - ОбластьТитула.Верх Цикл
			СтрокаТекущая = СтрокаТитула;
			ТекстПути = МакетСоответствиеИмен.Область(ОбластьТитула.Верх + СчетчикСтрок, 9).Текст;
			МассивЧастейПути = СтрРазделить(ТекстПути, "|");
			Для Каждого ЧастьПути Из МассивЧастейПути Цикл
				ЭтоХранимыеДанные = Ложь;
				Если СтрНачинаетсяС(ЧастьПути, "Заполнить") Тогда
					ИмяГруппы = Прав(ЧастьПути, СтрДлина(ЧастьПути) - СтрДлина("Заполнить"));
				Иначе
					Продолжить;
				КонецЕсли;	
				
				Если ДобавлятьОтсутствующиеВФормате = Ложь
					И ГруппыПоФормату.Свойство(ИмяГруппы) = Ложь Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаНайдено = СтрокаТекущая.Строки.Найти(ИмяГруппы, "Путь", Ложь);
				Если СтрокаНайдено = Неопределено Тогда
					Если ЭтоХранимыеДанные = Истина Тогда
						СтрокаТекущая = СтрокаТекущая.Строки.Вставить(0);	
					Иначе
						СтрокаТекущая = СтрокаТекущая.Строки.Добавить();
					КонецЕсли;	
					СтрокаТекущая.Путь = ИмяГруппы;
					СтрокаТекущая.Представление = РазделитьСтрокуПробелами(ИмяГруппы, Ложь, ИмяТитула);;
					
					СтруктураГруппы = Неопределено;
					Если ГруппыПоФормату.Свойство(ИмяГруппы, СтруктураГруппы) Тогда
						СтрокаТекущая.ЕстьВФормате = Истина;
						СтрокаТекущая.Узел = СтруктураГруппы.Узел; 
					Иначе
						СтрокаТекущая.Узел = "//Card/Description/AdditionalData/AdditionalParameter[@Name=" + СтрокаТекущая.Путь + "*]/@Value";
					КонецЕсли;
				Иначе
					СтрокаТекущая = СтрокаНайдено;	
				КонецЕсли;	
			КонецЦикла; 
		КонецЦикла;	
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции


Функция ДеревоПолейДляПоиска() Экспорт
	
	Результат = Новый ДеревоЗначений;
	Результат.Колонки.Добавить("ТипДокумента", Новый ОписаниеТипов("Тип"));
	Результат.Колонки.Добавить("Титул", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО"));
	Результат.Колонки.Добавить("Реквизит", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(250)));
	Результат.Колонки.Добавить("Узел", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(250)));
	Результат.Колонки.Добавить("ЭтоТаблица", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ВидГруппы", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2, 0, ДопустимыйЗнак.Неотрицательный)));
	Результат.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(150)));
	Результат.Колонки.Добавить("Тип", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50)));
	
	ТипыДокументовЭПД = Новый Структура;
	
	ПриОпределенииСтандартныхТиповДокументов(ТипыДокументовЭПД);
	
	СоответствиеТитуловИШагов = СоответствиеТитуловИШагов();
	ПостфиксСтруктур = ПризнакОбластиСтруктур();
	
	ГруппыХД = Новый Массив;
	ГруппыХД.Добавить("ТранспортноеСредство");
	ГруппыХД.Добавить("Водитель");
	ГруппыХД.Добавить("Груз");
	Для Каждого ИмяХД Из ГруппыХД Цикл
		ОписаниеГруппыДанных = ОбменСГИСЭПДКлиентСервер.ОписаниеГруппыДанных(ИмяХД, Неопределено);
		СтрокаТекущая = Результат.Строки.Добавить();
		СтрокаТекущая.Реквизит = ОписаниеГруппыДанных.Тип;
		СтрокаТекущая.Представление = ОписаниеГруппыДанных.Заголовок;
		СтрокаТекущая.ВидГруппы = 1;
		Для Каждого ИмяРеквизита Из ОписаниеГруппыДанных.Реквизиты Цикл
			СтрокаРеквизита = СтрокаТекущая.Строки.Добавить();
			СтрокаРеквизита.Реквизит = ОписаниеГруппыДанных.Тип + "." + ИмяРеквизита;
			СтрокаРеквизита.Тип = "Строка";
			СтрокаРеквизита.Представление = РазделитьСтрокуПробелами(ИмяРеквизита);	
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого КиЗ Из ТипыДокументовЭПД Цикл
		ИмяДокумента = ИмяДокументаПоТипу(КиЗ.Значение);	
		ТипДокумента = Тип("ДокументСсылка." + ИмяДокумента);
		МакетСоответствиеИмен = МакетСоответствийИменРеквизитов(ИмяДокумента);
		
		Если МакетСоответствиеИмен = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТипаДокумента = Результат.Строки.Добавить();
		СтрокаТипаДокумента.ТипДокумента = ТипДокумента;
		СтрокаТипаДокумента.Представление = Строка(ТипДокумента);
		СтрокаТипаДокумента.ВидГруппы = 2;
		
		СоответствиеГруппСтруктур = Новый Соответствие;
		Для СчетчикПроходов = 1 По 2 Цикл
			Для Каждого ОбластьТитула Из МакетСоответствиеИмен.Области Цикл
				Если СтрЗаканчиваетсяНа(ОбластьТитула.Имя, ПостфиксСтруктур) Тогда
					ИмяТитула = Лев(ОбластьТитула.Имя, СтрДлина(ОбластьТитула.Имя) - СтрДлина(ПостфиксСтруктур));
					Если СчетчикПроходов = 2 Тогда
						Продолжить;
					КонецЕсли;
				Иначе
					ИмяТитула = ОбластьТитула.Имя;
					Если СчетчикПроходов = 1 Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли; 
				
				Если СтрНачинаетсяС(ИмяТитула, "ДопТитул") Тогда
					Продолжить;
				КонецЕсли;
				
				Титул = ОбменСГИСЭПДКлиентСервер.ТитулПоПрефиксу("Документ." + ИмяДокумента, ИмяТитула);
				
				СтрокаТитула = СтрокаТипаДокумента.Строки.Найти(Титул, "Титул", Ложь);
				Если СтрокаТитула = Неопределено Тогда
					СтрокаТитула = СтрокаТипаДокумента.Строки.Добавить();
					СтрокаТитула.ТипДокумента = ТипДокумента;
					СтрокаТитула.Титул = Титул;
					СтрокаТитула.Представление = "Титул " + """" + СоответствиеТитуловИШагов.Получить(Титул) + """";
					СтрокаТитула.ВидГруппы = 3;
				КонецЕсли;
				
				ЭтоХранимыеДанные = Ложь;
				Для СчетчикСтрок = 0 По ОбластьТитула.Низ - ОбластьТитула.Верх Цикл
					СтрокаТекущая = СтрокаТитула;
					ТекстРеквизита = МакетСоответствиеИмен.Область(ОбластьТитула.Верх + СчетчикСтрок, 1).Текст;
					ТекстПредставление = МакетСоответствиеИмен.Область(ОбластьТитула.Верх + СчетчикСтрок, 8).Текст;
					ТекстПути = МакетСоответствиеИмен.Область(ОбластьТитула.Верх + СчетчикСтрок, 9).Текст;
					ТекстУзел = МакетСоответствиеИмен.Область(ОбластьТитула.Верх + СчетчикСтрок, 2).Текст;
					ТекстТип = МакетСоответствиеИмен.Область(ОбластьТитула.Верх + СчетчикСтрок, 7).Текст; 
					
					СтрокаХранимыхДанных = Неопределено;
					
					// Не показываем группы данных, которых нет в интерфейсе
					Если СчетчикПроходов = 1 И ЗначениеЗаполнено(ТекстПути) = Ложь Тогда	
						Продолжить;
					КонецЕсли;
					
					МассивЧастейПути = СтрРазделить(ТекстПути, "|");
					СчетчикЧастейПути = 0;
					Для Каждого ЧастьПути Из МассивЧастейПути Цикл
						СчетчикЧастейПути = СчетчикЧастейПути + 1;
						ЭтоХранимыеДанные = Ложь;
						ЭтоГруппа = Ложь;
						ИмяГруппы = ЧастьПути;
						
						Если СтрНачинаетсяС(ИмяГруппы, "Заполнить") Тогда
							ИмяГруппы = Прав(ИмяГруппы, СтрДлина(ИмяГруппы) - СтрДлина("Заполнить"));
							ЭтоГруппа = Истина;
						ИначеЕсли СтрНачинаетсяС(ИмяГруппы, "Ссылка") Тогда
							ИмяГруппы = Прав(ИмяГруппы, СтрДлина(ИмяГруппы) - СтрДлина("Ссылка"));
							ЭтоГруппа = Истина;
						ИначеЕсли СтрНачинаетсяС(ИмяГруппы, "ХранимыеДанные") Тогда
							ЭтоХранимыеДанные = Истина;
							ИмяГруппы = СтрЗаменить(ИмяГруппы, "ХранимыеДанные", "");
						КонецЕсли;	
						
						ИмяГруппыОчищенное = ИмяГруппы;
						
						// Возможно реквизит из группы структур
						ДлинаСовпадения = 0;
						Если ЭтоГруппа = Ложь Тогда
							Для Каждого КиЗ Из СоответствиеГруппСтруктур Цикл
								Если СтрНачинаетсяС(ТекстУзел, КиЗ.Ключ) 
								И ТекстУзел <> КиЗ.Ключ
								И СтрДлина(КиЗ.Ключ) > ДлинаСовпадения Тогда
									СтрокаТекущая = КиЗ.Значение;
									ДлинаСовпадения = СтрДлина(КиЗ.Ключ);
								КонецЕсли;	
							КонецЦикла;		
						КонецЕсли;    
						
						// Для заполнения типов реквизитов
						Если СчетчикПроходов = 2 И ЭтоХранимыеДанные = Истина Тогда                     
							ОписаниеГруппыДанных = ОбменСГИСЭПДКлиентСервер.ОписаниеГруппыДанных(ИмяГруппы, Неопределено); 
							Если ОписаниеГруппыДанных.ЕстьХранимыеДанные = Истина Тогда
								СтрокаХранимыхДанных = Результат.Строки.Найти(ОписаниеГруппыДанных.Тип, "Реквизит", Ложь);
							Иначе
								СтрокаХранимыхДанных = Неопределено;
							КонецЕсли;   
						КонецЕсли;
						
						// Группы данных
						Если (ЭтоГруппа = Истина Или ЭтоХранимыеДанные = Истина)
						И СтрокаТекущая.Реквизит <> ИмяГруппыОчищенное Тогда
							Если СтрокаТекущая.Родитель.Реквизит = ИмяГруппыОчищенное Тогда
								// Возможно два уровня вложенности таблиц
								СтрокаТекущая = СтрокаТекущая.Родитель;
							Иначе	
								СтрокаНайдено = СтрокаТекущая.Строки.Найти(ИмяГруппыОчищенное, "Реквизит", Истина);
								Если СтрокаНайдено = Неопределено Тогда
									// Ищем вложенность структуры
									Если СчетчикПроходов = 1 Тогда
										ДлинаСовпадения = 0;
										Для Каждого КиЗ Из СоответствиеГруппСтруктур Цикл
											Если СтрНачинаетсяС(ТекстУзел, КиЗ.Ключ) 
											И ТекстУзел <> КиЗ.Ключ
											И СтрДлина(КиЗ.Ключ) > ДлинаСовпадения Тогда
												СтрокаТекущая = КиЗ.Значение;
												ДлинаСовпадения = СтрДлина(КиЗ.Ключ);
											КонецЕсли;	
										КонецЦикла;	
									КонецЕсли;
									СтрокаТекущая = СтрокаТекущая.Строки.Добавить();	
									СтрокаТекущая.ТипДокумента = ТипДокумента;
									СтрокаТекущая.Титул = Титул;
									СтрокаТекущая.Реквизит = ИмяГруппыОчищенное;
									СтрокаТекущая.Представление = РазделитьСтрокуПробелами(ИмяГруппыОчищенное, Ложь, ИмяТитула) + " (группа данных)";
									СтрокаТекущая.ВидГруппы = 4;
									Если СчетчикПроходов = 1 И СчетчикЧастейПути = МассивЧастейПути.Количество() Тогда
										СтрокаТекущая.Узел = ТекстУзел;
										СоответствиеГруппСтруктур.Вставить(ТекстУзел, СтрокаТекущая);
									КонецЕсли;
									Если СтрокаТекущая.Родитель <> СтрокаТитула Тогда
										СтрокаВыше = СтрокаТитула.Строки.Найти(СтрокаТекущая.Реквизит, "Реквизит", Ложь);
										Если СтрокаВыше <> Неопределено Тогда
											СтрокаТитула.Строки.Удалить(СтрокаВыше);
										КонецЕсли;	
									КонецЕсли;
								Иначе
									СтрокаТекущая = СтрокаНайдено;
								КонецЕсли;
							КонецЕсли;
							Продолжить;
						КонецЕсли;
						
						Если СчетчикПроходов = 1 Тогда
							Продолжить;
						КонецЕсли;
						
						Если СчетчикЧастейПути < МассивЧастейПути.Количество() Тогда
							Продолжить;
						КонецЕсли;
						
						ТекстРеквизитаОчищенный = ТекстРеквизита;
						
						Если ТекстРеквизитаОчищенный = "" Тогда
							Прервать;
						КонецЕсли;
						
						// Группа таблицы
						МассивЧастейРеквизита = СтрРазделить(ТекстРеквизитаОчищенный, ".");
						Если МассивЧастейРеквизита.Количество() = 2 Тогда
							ИмяТаблицыОчищенная = МассивЧастейРеквизита[0];
							Если ИмяТаблицыОчищенная = "" Тогда
								Прервать;
							КонецЕсли;
							НаходимсяВГруппеТаблицы = СтрокаТекущая.ВидГруппы = 4 И СтрокаТекущая.Родитель.Реквизит = ИмяТаблицыОчищенная;
							НаходимсяВТаблице = СтрокаТекущая.Реквизит = ИмяТаблицыОчищенная;
							Если НаходимсяВТаблице = Ложь И НаходимсяВГруппеТаблицы = Ложь Тогда						
								СтрокаНайдено = СтрокаТекущая.Родитель.Строки.Найти(ИмяТаблицыОчищенная, "Реквизит", Истина);
								Если СтрокаНайдено = Неопределено Тогда
									СтрокаТекущая = СтрокаТекущая.Строки.Добавить();
									СтрокаТекущая.ТипДокумента = ТипДокумента;
									СтрокаТекущая.Титул = Титул;
									СтрокаТекущая.Реквизит = ИмяТаблицыОчищенная;	
									СтрокаТекущая.Узел = МакетСоответствиеИмен.Область(ОбластьТитула.Верх + СчетчикСтрок - 1, 2).Текст;		
									Если СтрокаТекущая.Родитель <> СтрокаТитула Тогда
										СтрокаВыше = СтрокаТитула.Строки.Найти(СтрокаТекущая.Реквизит, "Реквизит", Ложь);
										Если СтрокаВыше <> Неопределено Тогда
											СтрокаТитула.Строки.Удалить(СтрокаВыше);
										КонецЕсли;	
									КонецЕсли;			
								Иначе
									СтрокаТекущая = СтрокаНайдено;
								КонецЕсли;
							КонецЕсли;
							Если НаходимсяВГруппеТаблицы = Ложь И СтрокаТекущая.ЭтоТаблица = Ложь Тогда
								СтрокаТекущая.ЭтоТаблица = Истина;	
								СтрокаТекущая.Представление = РазделитьСтрокуПробелами(ИмяТаблицыОчищенная, Истина, ИмяТитула) + " (таблица)";
								СтрокаТекущая.ВидГруппы = 5;
							КонецЕсли;
						КонецЕсли;
						
						// Реквизит
						СтрокаНайдено = СтрокаТекущая.Строки.Найти(ТекстРеквизитаОчищенный, "Реквизит", Истина);
						Если СтрокаНайдено = Неопределено Тогда
							ЭтоТаблица = Ложь;
							Если МассивЧастейРеквизита.Количество() = 1 Тогда
								ТекстРеквизитаСледующий = МакетСоответствиеИмен.Область(ОбластьТитула.Верх + СчетчикСтрок + 1, 1).Текст;
								Если СтрНайти(ТекстРеквизитаСледующий, ".") Тогда
									ЭтоТаблица = Истина;									
									ТекстУзелРодитель = МакетСоответствиеИмен.Область(ОбластьТитула.Верх + СчетчикСтрок, 4).Текст;
									Если ЗначениеЗаполнено(ТекстУзелРодитель) Тогда
										СтрокаРодителяНайдено = СтрокаТитула.Строки.Найти(ТекстУзелРодитель, "Узел", Истина);	
										Если СтрокаРодителяНайдено <> Неопределено Тогда	
											СтрокаТекущая = СтрокаРодителяНайдено;		
										КонецЕсли;
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
							
							СтрокаРеквизита = СтрокаТекущая.Строки.Добавить();
							СтрокаРеквизита.ЭтоТаблица = ЭтоТаблица;
							СтрокаРеквизита.ВидГруппы = ?(СтрокаРеквизита.ЭтоТаблица, 5, 0);
							СтрокаРеквизита.ТипДокумента = ТипДокумента;
							СтрокаРеквизита.Титул = Титул;
							СтрокаРеквизита.Узел = ТекстУзел;
							СтрокаРеквизита.Реквизит = ТекстРеквизитаОчищенный;
							Если СтрокаТекущая <> СтрокаТитула Тогда
								СтрокаВыше = СтрокаТитула.Строки.Найти(СтрокаРеквизита.Реквизит, "Реквизит", Ложь);
								Если СтрокаВыше <> Неопределено Тогда
									СтрокаТитула.Строки.Удалить(СтрокаВыше);
								КонецЕсли;	
							КонецЕсли;
							
							Если СтрокаРеквизита.ЭтоТаблица = Ложь Тогда
								Если ЗначениеЗаполнено(ТекстТип) Тогда
									СтрокаРеквизита.Тип = ТекстТип;  
									Если СтрокаХранимыхДанных <> Неопределено Тогда   
										ИмяРеквизитаХранимыхДанных = МассивЧастейРеквизита[МассивЧастейРеквизита.ВГраница()];  
										Если СтрНачинаетсяС(ИмяРеквизитаХранимыхДанных, ИмяТитула) Тогда
											ИмяРеквизитаХранимыхДанных = Сред(ИмяРеквизитаХранимыхДанных, СтрДлина(ИмяТитула) + 1);	
										КонецЕсли;
										Если СтрНачинаетсяС(ИмяРеквизитаХранимыхДанных, СтрокаХранимыхДанных.Реквизит) Тогда
											ИмяРеквизитаХранимыхДанных = Сред(ИмяРеквизитаХранимыхДанных, СтрДлина(СтрокаХранимыхДанных.Реквизит) + 1);	
										КонецЕсли;
										ИмяРеквизитаХранимыхДанных = СтрокаХранимыхДанных.Реквизит + "." + ИмяРеквизитаХранимыхДанных;
										СтрокаРеквизитаХранимыхДанных = СтрокаХранимыхДанных.Строки.Найти(ИмяРеквизитаХранимыхДанных, "Реквизит", Ложь);
										Если СтрокаРеквизитаХранимыхДанных <> Неопределено Тогда
											СтрокаРеквизитаХранимыхДанных.Тип = ТекстТип; 
										КонецЕсли;
									КонецЕсли;
								Иначе
									СтрокаРеквизита.Тип = "Строка";
								КонецЕсли;
							КонецЕсли;
							
							Если ЗначениеЗаполнено(ТекстПредставление) Тогда
								СтрокаРеквизита.Представление = ТекстПредставление;
							Иначе		
								СтрокаРеквизита.Представление = РазделитьСтрокуПробелами(ТекстРеквизитаОчищенный, Истина, ИмяТитула);
							КонецЕсли;	
							СтрокаРеквизита.Представление = СтрокаРеквизита.Представление + ?(СтрокаРеквизита.ЭтоТаблица, " (таблица)", "");
						КонецЕсли;	
					КонецЦикла; 
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции


#КонецОбласти

#Область ЗаполнениеПечатныхФормЭПД

Процедура УстановитьШтампыПодписейПоДокументуЭПД(СсылкаНаОбъект, ТабличныйДокумент, ИдентификаторДокумента) Экспорт
	
	ДанныеДляФормированияШтампа = КриптографияБЭД.НовыеДанныеДляФормированияШтампа();
		
	ДанныеДляФормированияШтампа.ИдентификаторДокумента = ИдентификаторДокумента;
	ДанныеДляФормированияШтампа.ЭтоИнформацияОтправителя = СсылкаНаОбъект.ЭтоВходящий = Ложь;
	ДанныеДляФормированияШтампа.Организация = СсылкаНаОбъект.Организация;
	ДанныеДляФормированияШтампа.ЭтоИсходящийДокумент = СсылкаНаОбъект.ЭтоВходящий = Ложь;
	ДанныеДляФормированияШтампа.ОсновноеСостояние = КриптографияБЭД.ОсновныеСостоянияДокументов().Подписан;
	
	СообщенияДокумента = ПолучитьСообщенияДокумента(СсылкаНаОбъект);
	
	ЭлектронныеПодписиОтправителя = Новый Массив;
	ЭлектронныеПодписиПолучателя = Новый Массив;
	Для Каждого КиЗ Из СообщенияДокумента Цикл
		ПодписиТитула = ЭлектронныеДокументыЭДО.УстановленныеПодписиСУчетомДоверенностей(КиЗ.Значение);
		Для Каждого Подпись Из ПодписиТитула Цикл
			Подпись.Вставить("ПредставлениеПодписи", Строка(КиЗ.Ключ));
			Если (КиЗ.Значение.Направление = Перечисления.НаправленияЭДО.Входящий
					И ДанныеДляФормированияШтампа.ЭтоИсходящийДокумент = Истина) 
				Или (КиЗ.Значение.Направление = Перечисления.НаправленияЭДО.Исходящий
					И ДанныеДляФормированияШтампа.ЭтоИсходящийДокумент = Ложь) Тогда
				ЭлектронныеПодписиПолучателя.Добавить(Подпись);
			ИначеЕсли (КиЗ.Значение.Направление = Перечисления.НаправленияЭДО.Входящий
					И ДанныеДляФормированияШтампа.ЭтоИсходящийДокумент = Ложь) 
				Или (КиЗ.Значение.Направление = Перечисления.НаправленияЭДО.Исходящий
					И ДанныеДляФормированияШтампа.ЭтоИсходящийДокумент = Истина) Тогда
				ЭлектронныеПодписиОтправителя.Добавить(Подпись);			
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ДанныеДляФормированияШтампа.ПодписиОтправителя = ЭлектронныеПодписиОтправителя;
	ДанныеДляФормированияШтампа.ПодписиПолучателя = ЭлектронныеПодписиПолучателя;
	
	ДанныеДляФормированияШтампа.ЕстьОтветнаяПодпись = ЭлектронныеПодписиОтправителя.Количество() > 0
														И ЭлектронныеПодписиПолучателя.Количество() > 0;
	
	Штамп = КриптографияБЭД.ШтампЭлектроннойПодписи(ДанныеДляФормированияШтампа);
	Если Штамп.ВысотаТаблицы > 0 Тогда
		ОбщегоНазначенияБЭД.ПрисоединитьОбластьКТабличномуДокументу(ТабличныйДокумент, Штамп, "Штамп");
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьЗначениеСтруктуры(Структура, ИмяКлюча, ЗначениеПоУмолчанию = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Структура.Свойство(ИмяКлюча, Результат);
	
	Если ЗначениеПоУмолчанию <> Неопределено Тогда
		Если Результат = Неопределено Тогда
			Результат = ЗначениеПоУмолчанию;
		ИначеЕсли ТипЗнч(Результат) <> ТипЗнч(ЗначениеПоУмолчанию) Тогда
			Если ТипЗнч(ЗначениеПоУмолчанию) = Тип("Строка") Тогда
				Результат = Строка(Результат);
			ИначеЕсли ТипЗнч(ЗначениеПоУмолчанию) = Тип("Дата") Тогда 
				Результат = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВДату(Строка(Результат));
			ИначеЕсли ТипЗнч(ЗначениеПоУмолчанию) = Тип("Число") Тогда 
				Результат = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВЧисло(Строка(Результат));
			ИначеЕсли ТипЗнч(ЗначениеПоУмолчанию) = Тип("Булево") Тогда 
				Результат = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВБулево(Строка(Результат));
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НайтиСтрокиВМассивеСтруктур(Массив, ИмяКлюча, Значение) Экспорт
	
	Результат = Новый Массив;
	
	Если ТипЗнч(Массив) <> Тип("Массив") Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого СтруктураСтроки Из Массив Цикл
		Если ТипЗнч(СтруктураСтроки) <> Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;
		ЗначениеВСтроке = Неопределено;
		Если СтруктураСтроки.Свойство(ИмяКлюча, ЗначениеВСтроке) И ЗначениеВСтроке = Значение Тогда
			Результат.Добавить(СтруктураСтроки);	
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПредставлениеПодписи(ДанныеЗаполнения, ПрефиксРеквизитов) Экспорт
	
	МассивРезультат = Новый Массив;
	МассивРезультат.Добавить(ПолучитьЗначениеСтруктуры(ДанныеЗаполнения, ПрефиксРеквизитов + "Должность"));
	МассивРезультат.Добавить("(Электронная подпись)");
	МассивРезультат.Добавить(ПолучитьЗначениеСтруктуры(ДанныеЗаполнения, ПрефиксРеквизитов + "Фамилия"));
	МассивРезультат.Добавить(ПолучитьЗначениеСтруктуры(ДанныеЗаполнения, ПрефиксРеквизитов + "Имя"));
	МассивРезультат.Добавить(ПолучитьЗначениеСтруктуры(ДанныеЗаполнения, ПрефиксРеквизитов + "Отчество"));	
	
	Возврат СтрСоединить(МассивРезультат, " ");
	
КонецФункции            

Функция ПредставлениеСтороныПодписавшейДокумент(ДанныеЗаполнения) Экспорт
	
	Результат = "";
	
	Если ЗначениеЗаполнено(ПолучитьЗначениеСтруктуры(ДанныеЗаполнения, "ЮЛ_ИНН")) Тогда
		Результат = "ИНН: " + ПолучитьЗначениеСтруктуры(ДанныеЗаполнения, "ЮЛ_ИНН");
	ИначеЕсли ЗначениеЗаполнено(ПолучитьЗначениеСтруктуры(ДанныеЗаполнения, "ФЛ_ИНН")) Тогда 
		Результат = "ИНН: " + ПолучитьЗначениеСтруктуры(ДанныеЗаполнения, "ФЛ_ИНН");
	ИначеЕсли ЗначениеЗаполнено(ПолучитьЗначениеСтруктуры(ДанныеЗаполнения, "ОрганВластиВыдавшийДокумент")) Тогда 
		Результат = ПолучитьЗначениеСтруктуры(ДанныеЗаполнения, "ОрганВластиВыдавшийДокумент");
	ИначеЕсли ЗначениеЗаполнено(ПолучитьЗначениеСтруктуры(ДанныеЗаполнения, "ИнострЛицоБезУчетаСтатусФЛ_ЮЛ")) Тогда 
		Результат = ?(ПолучитьЗначениеСтруктуры(ДанныеЗаполнения, "ИнострЛицоБезУчетаСтатусФЛ_ЮЛ") = "ЮЛ", "иностранное юр. лицо", "иностранное физ. лицо")
					+ ?(ЗначениеЗаполнено(ПолучитьЗначениеСтруктуры(ДанныеЗаполнения, "ИнострЛицоБезУчетаНаименование")),
						" " + ПолучитьЗначениеСтруктуры(ДанныеЗаполнения, "ИнострЛицоБезУчетаНаименование"), "")
					+ ?(ЗначениеЗаполнено(ПолучитьЗначениеСтруктуры(ДанныеЗаполнения, "ИнострЛицоБезУчетаСтрана")),
						" (" + ПолучитьЗначениеСтруктуры(ДанныеЗаполнения, "ИнострЛицоБезУчетаСтрана") + ")", "");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции             

Функция ПредставлениеУчастника(ДанныеЗаполнения, ПрефиксРеквизитов) Экспорт
	
	РезультатМассив = Новый Массив;
	
	// ЮЛ
	Если ЗначениеЗаполнено(ПолучитьЗначениеСтруктуры(ДанныеЗаполнения, ПрефиксРеквизитов + "ЮЛ_ИНН")) Тогда
		РезультатМассив.Добавить(ПолучитьЗначениеСтруктуры(ДанныеЗаполнения, ПрефиксРеквизитов + "ЮЛНаименование"));	
		РезультатМассив.Добавить("ИНН " + ПолучитьЗначениеСтруктуры(ДанныеЗаполнения, ПрефиксРеквизитов + "ЮЛ_ИНН"));
	// ИП
	ИначеЕсли ЗначениеЗаполнено(ПолучитьЗначениеСтруктуры(ДанныеЗаполнения, ПрефиксРеквизитов + "ИП_ИНН")) Тогда
		РезультатМассив.Добавить(ПолучитьЗначениеСтруктуры(ДанныеЗаполнения, ПрефиксРеквизитов + "ИПФамилия")
									+ " " + ПолучитьЗначениеСтруктуры(ДанныеЗаполнения, ПрефиксРеквизитов + "ИПИмя")
									+ " " + ПолучитьЗначениеСтруктуры(ДанныеЗаполнения, ПрефиксРеквизитов + "ИПОтчество"));
		РезультатМассив.Добавить("ИНН " + ПолучитьЗначениеСтруктуры(ДанныеЗаполнения, ПрефиксРеквизитов + "ИП_ИНН"));	
	// ФЛ
	ИначеЕсли ЗначениеЗаполнено(ПолучитьЗначениеСтруктуры(ДанныеЗаполнения, ПрефиксРеквизитов + "ФЛФамилия")) Тогда
		РезультатМассив.Добавить(ПолучитьЗначениеСтруктуры(ДанныеЗаполнения, ПрефиксРеквизитов + "ФЛФамилия")
									+ " " + ПолучитьЗначениеСтруктуры(ДанныеЗаполнения, ПрефиксРеквизитов + "ФЛИмя")
									+ " " + ПолучитьЗначениеСтруктуры(ДанныеЗаполнения, ПрефиксРеквизитов + "ФЛОтчество"));
	// Иностр. лицо
	ИначеЕсли ЗначениеЗаполнено(ПолучитьЗначениеСтруктуры(ДанныеЗаполнения, ПрефиксРеквизитов + "ИнострЛицоБезУчетаСтатусФЛ_ЮЛ")) Тогда
		РезультатМассив.Добавить(ПолучитьЗначениеСтруктуры(ДанныеЗаполнения, ПрефиксРеквизитов + "ИнострЛицоБезУчетаНаименование"));
		РезультатМассив.Добавить(ПолучитьЗначениеСтруктуры(ДанныеЗаполнения, ПрефиксРеквизитов + "ИнострЛицоБезУчетаСтрана"));	
	КонецЕсли;      
	
	Если ЗначениеЗаполнено(ПолучитьЗначениеСтруктуры(ДанныеЗаполнения, ПрефиксРеквизитов + "ОГРН")) Тогда    
		РезультатМассив.Добавить(ПолучитьЗначениеСтруктуры(ДанныеЗаполнения, ПрефиксРеквизитов + "ОГРН"));	
	КонецЕсли;                        
	
	Если ЗначениеЗаполнено(ПолучитьЗначениеСтруктуры(ДанныеЗаполнения, ПрефиксРеквизитов + "ЮЛ_ОГРН")) Тогда
		РезультатМассив.Добавить("ОГРН " + ПолучитьЗначениеСтруктуры(ДанныеЗаполнения, ПрефиксРеквизитов + "ЮЛ_ОГРН"));
	ИначеЕсли ЗначениеЗаполнено(ПолучитьЗначениеСтруктуры(ДанныеЗаполнения, ПрефиксРеквизитов + "ОГРНИП")) Тогда
		РезультатМассив.Добавить("ОГРНИП " + ПолучитьЗначениеСтруктуры(ДанныеЗаполнения, ПрефиксРеквизитов + "ОГРНИП"));	
	КонецЕсли;
	
	РезультатМассив.Добавить(ПредставлениеАдреса(ДанныеЗаполнения, ПрефиксРеквизитов + "Адрес"));
	
	Телефоны = Новый Массив;
	Для Каждого СтрТел Из ПолучитьЗначениеСтруктуры(ДанныеЗаполнения, ПрефиксРеквизитов + "НомераТелефонов", Новый Массив) Цикл
		Телефоны.Добавить(СтрТел.Телефон);	
	КонецЦикла;
	Если Телефоны.Количество() > 0 Тогда
		РезультатМассив.Добавить("тел.: " + СтрСоединить(Телефоны, ", "));
	КонецЕсли;	
	
	Возврат СтрСоединить(РезультатМассив, ", ");
	
КонецФункции        

Функция ПредставлениеАдреса(ДанныеЗаполнения, ПрефиксРеквизитов) Экспорт
	
	РезультатМассив = Новый Массив;
	
	МассивРеквизитов = Новый Массив;
	МассивРеквизитов.Добавить("Индекс");
	МассивРеквизитов.Добавить("Город");
	МассивРеквизитов.Добавить("НаселенныйПункт");
	МассивРеквизитов.Добавить("Улица");
	МассивРеквизитов.Добавить("Дом");
	МассивРеквизитов.Добавить("Корпус");
	
	Для Каждого ИмяРеквизита Из МассивРеквизитов Цикл
		ПолноеИмяРеквизита = ПрефиксРеквизитов + ИмяРеквизита;
		Если ЗначениеЗаполнено(ПолучитьЗначениеСтруктуры(ДанныеЗаполнения, ПолноеИмяРеквизита)) Тогда
			РезультатМассив.Добавить(ПолучитьЗначениеСтруктуры(ДанныеЗаполнения, ПолноеИмяРеквизита));	
		ИначеЕсли ИмяРеквизита = "Город" Тогда
			Если ПолучитьЗначениеСтруктуры(ДанныеЗаполнения, ПрефиксРеквизитов + "КодРегиона") = "77" Тогда
				РезультатМассив.Добавить("Москва г");
			ИначеЕсли ПолучитьЗначениеСтруктуры(ДанныеЗаполнения, ПрефиксРеквизитов + "КодРегиона") = "78" Тогда
				РезультатМассив.Добавить("Санкт-Петербург г");
			ИначеЕсли ПолучитьЗначениеСтруктуры(ДанныеЗаполнения, ПрефиксРеквизитов + "КодРегиона") = "92" Тогда
				РезультатМассив.Добавить("Севастополь г");	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если РезультатМассив.Количество() = 0 
		И ЗначениеЗаполнено(ПолучитьЗначениеСтруктуры(ДанныеЗаполнения, ПрефиксРеквизитов + "Представление")) Тогда
			КодСтраны = ПолучитьЗначениеСтруктуры(ДанныеЗаполнения, ПрефиксРеквизитов + "КодСтраны");
			Если КодСтраны <> "643" Тогда
				РезультатМассив.Добавить("Код страны: " + ПолучитьЗначениеСтруктуры(ДанныеЗаполнения, ПрефиксРеквизитов + "КодСтраны"));	
			КонецЕсли;
			РезультатМассив.Добавить(ПолучитьЗначениеСтруктуры(ДанныеЗаполнения, ПрефиксРеквизитов + "Представление"));
	КонецЕсли;
	
	Возврат СтрСоединить(РезультатМассив, ", ");
	
КонецФункции      

Процедура УстановитьМинимальныеПоляПечати(ТабличныйДокумент) Экспорт

	// Проверка на веб-клиент
	СисИнфо = Новый СистемнаяИнформация;
	ЗначениеБоковогоПоля = ?(ПустаяСтрока(СисИнфо.ИнформацияПрограммыПросмотра), 5, 10); 
	
	Если ТабличныйДокумент.ПолеСлева < ЗначениеБоковогоПоля Тогда
		ТабличныйДокумент.ПолеСлева = ЗначениеБоковогоПоля;
	КонецЕсли; 
	
	Если ТабличныйДокумент.ПолеСправа < ЗначениеБоковогоПоля Тогда
		ТабличныйДокумент.ПолеСправа = ЗначениеБоковогоПоля;
	КонецЕсли;
	
	Если ТабличныйДокумент.ПолеСверху < 5 Тогда
		ТабличныйДокумент.ПолеСверху = 5;
	КонецЕсли; 

	Если ТабличныйДокумент.ПолеСнизу < 5 Тогда
		ТабличныйДокумент.ПолеСнизу = 5;
	КонецЕсли;

КонецПроцедуры


#КонецОбласти

#Область ХранимыеДанные

Функция ЗаписатьХранимыеДанныеЭПД(ГруппаДанных, Организация, Контрагент, ДополнительныйОтбор, ОписаниеДанных) Экспорт
	
	МассивЧастейИмениФормы = СтрРазделить(ОписаниеДанных.ИмяФормы, ".");	
	ИмяОбъекта = МассивЧастейИмениФормы[0] + "." + МассивЧастейИмениФормы[1];
	
	ОписаниеГруппыДанных = ОбменСГИСЭПДКлиентСервер.ОписаниеГруппыДанных(ГруппаДанных, ИмяОбъекта);

	Если ОписаниеГруппыДанных.ЕстьХранимыеДанные = Ложь Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Ключ = Неопределено;
	ОписаниеДанных.Свойство("Ключ", Ключ);
	КэшДанные = Новый Соответствие;
	Если ЗначениеЗаполнено(Ключ) Тогда
		НовыйЭлемент = Ключ.ПолучитьОбъект();
		Для Каждого СтрокаТЧ Из НовыйЭлемент.Данные Цикл
			Если ЗначениеЗаполнено(СтрокаТЧ.ИмяТабличнойЧасти) Тогда
				КэшТабЧасти = КэшДанные.Получить(СтрокаТЧ.ИмяТабличнойЧасти);
				Если КэшТабЧасти = Неопределено Тогда
					КэшТабЧасти = Новый Соответствие;
					КэшДанные.Вставить(СтрокаТЧ.ИмяТабличнойЧасти, КэшТабЧасти);
				КонецЕсли;
				КэшРеквизита = КэшТабЧасти.Получить(СтрокаТЧ.НомерСтрокиТЧ);
				Если КэшРеквизита = Неопределено Тогда
					КэшРеквизита = Новый Соответствие;
					КэшТабЧасти.Вставить(СтрокаТЧ.НомерСтрокиТЧ, КэшРеквизита);
				КонецЕсли;
			Иначе
				КэшРеквизита = КэшДанные;
			КонецЕсли;
			СтруктураДанные = Новый Структура;
			СтруктураДанные.Вставить("Значение", СтрокаТЧ.Значение);
			СтруктураДанные.Вставить("Представление", СтрокаТЧ.Представление);
			КэшРеквизита.Вставить(СтрокаТЧ.Имя, СтруктураДанные);	
		КонецЦикла;
		НовыйЭлемент.Данные.Очистить();
	Иначе
		НовыйЭлемент = Справочники.ХранимыеДанныеЭПД.СоздатьЭлемент();
	КонецЕсли;
	
	НовыйЭлемент.ИмяОбъекта = ИмяОбъекта;
	НовыйЭлемент.ГруппаДанных = ГруппаДанных;
	НовыйЭлемент.Тип = ОписаниеГруппыДанных.Тип;
	НовыйЭлемент.Организация = Организация;
	НовыйЭлемент.Контрагент = Контрагент;
	НовыйЭлемент.ДополнительныйОтбор = ДополнительныйОтбор;
	
	Для Каждого РеквизитКиЗ Из ОписаниеДанных.ДанныеЗаполненияРеквизитовФормы Цикл
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Значение", РеквизитКиЗ.Значение);
		СтруктураДанные.Вставить("Представление", ОписаниеДанных.ОписаниеРеквизитовФормы.Представления[РеквизитКиЗ.Ключ]);
		КэшДанные.Вставить(РеквизитКиЗ.Ключ, СтруктураДанные);
	КонецЦикла;
	
	Для Каждого ТаблицаКиЗ Из ОписаниеДанных.ДанныеЗаполненияТаблицФормы Цикл
		Если ТаблицаКиЗ.Значение.Количество() = 0 Тогда
			КэшДанные.Вставить(ТаблицаКиЗ.Ключ, Новый Соответствие);	
		Иначе
			КэшТабЧасти = КэшДанные.Получить(ТаблицаКиЗ.Ключ);
			Если КэшТабЧасти = Неопределено Тогда
				КэшТабЧасти = Новый Соответствие;
				КэшДанные.Вставить(ТаблицаКиЗ.Ключ, КэшТабЧасти);
			КонецЕсли;	
			НомерСтроки = 0;	
			Для Каждого СтрокаСтруктура Из ТаблицаКиЗ.Значение Цикл
				НомерСтроки = НомерСтроки + 1;
				КэшРеквизита = КэшТабЧасти.Получить(НомерСтроки);
				Если КэшРеквизита = Неопределено Тогда
					КэшРеквизита = Новый Соответствие;
					КэшТабЧасти.Вставить(НомерСтроки, КэшРеквизита);
				КонецЕсли;
				Для Каждого КолонкаКиЗ Из СтрокаСтруктура Цикл
					СтруктураДанные = Новый Структура;
					СтруктураДанные.Вставить("Значение", КолонкаКиЗ.Значение);
					СтруктураДанные.Вставить("Представление", "");
					КэшРеквизита.Вставить(КолонкаКиЗ.Ключ, СтруктураДанные);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого КиЗ Из КэшДанные Цикл
		Если ТипЗнч(КиЗ.Значение) = Тип("Соответствие") Тогда
			Если КиЗ.Значение.Количество() = 0 Тогда
				НоваяСтрока = НовыйЭлемент.Данные.Добавить();
				НоваяСтрока.ИмяТабличнойЧасти = КиЗ.Ключ;
			Иначе
				Для Каждого СтрокаКиЗ Из КиЗ.Значение Цикл
					Для Каждого РеквизитКиЗ Из СтрокаКиЗ.Значение Цикл
						НоваяСтрока = НовыйЭлемент.Данные.Добавить();
						НоваяСтрока.ИмяТабличнойЧасти = КиЗ.Ключ; 
						НоваяСтрока.НомерСтрокиТЧ = СтрокаКиЗ.Ключ;
						НоваяСтрока.Имя = РеквизитКиЗ.Ключ;
						НоваяСтрока.Значение = РеквизитКиЗ.Значение.Значение;
					КонецЦикла;	
				КонецЦикла;	
			КонецЕсли;
		Иначе
			НоваяСтрока = НовыйЭлемент.Данные.Добавить();
			НоваяСтрока.Имя = КиЗ.Ключ;
			НоваяСтрока.Значение = КиЗ.Значение.Значение;
			НоваяСтрока.Представление = КиЗ.Значение.Представление;	
		КонецЕсли;
	КонецЦикла;
	
	НовыйЭлемент.Записать();
	
	Возврат НовыйЭлемент.Ссылка;
	
КонецФункции

Функция ПолучитьОписаниеХранимыхДанныхЭПДПоСсылке(ХранимыеДанныеЭПДСсылка, ГруппаДанных, ИдентификаторСтроки = Неопределено) Экспорт 
	
	Результат = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ХранимыеДанныеЭПДСсылка", ХранимыеДанныеЭПДСсылка);
	Запрос.Текст = "ВЫБРАТЬ
				|	ХранимыеДанныеЭПДДанные.Имя КАК Имя,
				|	ХранимыеДанныеЭПДДанные.Значение КАК Значение,
				|	ХранимыеДанныеЭПДДанные.Ссылка.Тип КАК Тип
				|ИЗ
				|	Справочник.ХранимыеДанныеЭПД.Данные КАК ХранимыеДанныеЭПДДанные
				|ГДЕ
				|	ХранимыеДанныеЭПДДанные.Ссылка = &ХранимыеДанныеЭПДСсылка
				|	И ХранимыеДанныеЭПДДанные.ИмяТабличнойЧасти = """"
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ХранимыеДанныеЭПДДанные.ИмяТабличнойЧасти КАК ИмяТабличнойЧасти,
				|	ХранимыеДанныеЭПДДанные.НомерСтрокиТЧ КАК НомерСтрокиТЧ,
				|	ХранимыеДанныеЭПДДанные.Имя КАК Имя,
				|	ХранимыеДанныеЭПДДанные.Значение КАК Значение,
				|	ХранимыеДанныеЭПДДанные.Ссылка.Тип КАК Тип
				|ИЗ
				|	Справочник.ХранимыеДанныеЭПД.Данные КАК ХранимыеДанныеЭПДДанные
				|ГДЕ
				|	ХранимыеДанныеЭПДДанные.ИмяТабличнойЧасти <> """"
				|	И ХранимыеДанныеЭПДДанные.Ссылка = &ХранимыеДанныеЭПДСсылка
				|
				|УПОРЯДОЧИТЬ ПО
				|	ИмяТабличнойЧасти,
				|	НомерСтрокиТЧ
				|ИТОГИ
				|	МАКСИМУМ(Тип)
				|ПО
				|	ИмяТабличнойЧасти,
				|	НомерСтрокиТЧ";
				
	РезультатПакета = Запрос.ВыполнитьПакет();
	Выборка = РезультатПакета[0].Выбрать();
	
	ГруппыДанныхСПрефиксами = Новый Массив;
	ГруппыДанныхСПрефиксами.Добавить("НовыйВодитель");
	ГруппыДанныхСПрефиксами.Добавить("ТитулГрузоотправителяИнойГрузоотправитель");
	
	ГруппыДанныхСПрефиксами.Добавить("ТитулОформлениеТранспортноеСредство");
	ГруппыДанныхСПрефиксами.Добавить("ТитулВыпускТранспортноеСредство");
	ГруппыДанныхСПрефиксами.Добавить("ТитулМедосмотрСтороннийМедработник");
	ГруппыДанныхСПрефиксами.Добавить("ТитулМедосмотрШтатныйМедработник");
	ГруппыДанныхСПрефиксами.Добавить("ТитулМедосмотрВодитель");
	ГруппыДанныхСПрефиксами.Добавить("ТитулВыездУполномоченныйНаПроставлениеДанных");
	ГруппыДанныхСПрефиксами.Добавить("ТитулЗаездУполномоченныйНаПроставлениеДанных");
	ГруппыДанныхСПрефиксами.Добавить("ТитулМедосмотрПослеСтороннийМедработник");
	ГруппыДанныхСПрефиксами.Добавить("ТитулМедосмотрПослеШтатныйМедработник");
	ГруппыДанныхСПрефиксами.Добавить("ТитулМедосмотрПослеВодитель");
	
	ДанныеЗаполненияРеквизитовФормы = Новый Структура;
	ПараметрыФормы = "";
	Пока Выборка.Следующий() Цикл
		Если Выборка.Имя = "ОписаниеРеквизитовФормы" Тогда
			Продолжить;
		КонецЕсли;
		// Исключения (интерфейсные контролы)
		Если Выборка.Имя = "РФИлиНет"
			Или Выборка.Имя = "НадписьПоясненияНекорректногоИНН" Тогда
			Продолжить;
		КонецЕсли;
		ИмяПоля = Выборка.Имя;
		Если ГруппыДанныхСПрефиксами.Найти(ГруппаДанных) <> Неопределено Тогда
			ИмяПоля = ГруппаДанных + СтрЗаменить(ИмяПоля, Выборка.Тип, "");
		КонецЕсли;
		ДанныеЗаполненияРеквизитовФормы.Вставить(ИмяПоля, Выборка.Значение);	
		ПараметрыФормы = ПараметрыФормы + ?(ПараметрыФормы = "", "", ",") + ИмяПоля;
	КонецЦикла;
	Результат.Вставить("ДанныеЗаполненияРеквизитовФормы", ДанныеЗаполненияРеквизитовФормы);
	Результат.Вставить("ПараметрыФормы", ПараметрыФормы);
	Результат.Вставить("Модифицированность", Истина);
	
	ДанныеЗаполненияТаблицФормы = Новый Структура;

	// Заменим идентификаторы строки на уникальные
	СоответствиеЗаменыИдентификаторов = Новый Соответствие;
	ВыборкаЗаменаИд = РезультатПакета[1].Выбрать();
	Пока ВыборкаЗаменаИд.Следующий() Цикл
		Если ВыборкаЗаменаИд.Имя = "ИдентификаторСтроки" Тогда
			НовыйИдентификатор = Строка(Новый УникальныйИдентификатор);
			СоответствиеЗаменыИдентификаторов.Вставить(ВыборкаЗаменаИд.Значение, НовыйИдентификатор);
		КонецЕсли;
	КонецЦикла;
	
	ВыборкаТЧ = РезультатПакета[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаТЧ.Следующий() Цикл
		МассивСтрок = Новый Массив;
		ВыборкаСтрока = ВыборкаТЧ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСтрока.Следующий() Цикл
			СтруктураСтроки = Новый Структура;
			ВыборкаКолонки = ВыборкаСтрока.Выбрать();
			// Сформируем структуру строки
			Пока ВыборкаКолонки.Следующий() Цикл	
				Если ВыборкаКолонки.Имя = "ИдентификаторСтрокиРодителя" Тогда
					Если ЗначениеЗаполнено(ВыборкаКолонки.Значение) = Ложь Тогда
						// Если не заполнено, значит это идентификатор строки таблицы верхнего уровня - заменим входящим
						Если ИдентификаторСтроки <> Неопределено Тогда
							СтруктураСтроки.Вставить(ВыборкаКолонки.Имя, ИдентификаторСтроки);
						КонецЕсли;
					Иначе
						// Найдем среди новых уникальных идентификаторов
						НовыйИдентификаторРодителя = СоответствиеЗаменыИдентификаторов.Получить(ВыборкаКолонки.Значение);
						Если НовыйИдентификаторРодителя <> Неопределено Тогда
							СтруктураСтроки.Вставить("ИдентификаторСтрокиРодителя", НовыйИдентификаторРодителя);	
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ВыборкаКолонки.Имя = "ИдентификаторСтроки" Тогда
					НовыйИдентификатор = СоответствиеЗаменыИдентификаторов.Получить(ВыборкаКолонки.Значение);
					СтруктураСтроки.Вставить("ИдентификаторСтроки", НовыйИдентификатор);	
				ИначеЕсли ЗначениеЗаполнено(ВыборкаКолонки.Имя) Тогда
					// Исключения (интерфейсные контролы)
					Если ВыборкаКолонки.Имя = "РФИлиНет" Тогда
						Продолжить;
					КонецЕсли;
					ИмяПоля = ВыборкаКолонки.Имя;
					Если ГруппыДанныхСПрефиксами.Найти(ГруппаДанных) <> Неопределено Тогда
						ИмяПоля = ГруппаДанных + СтрЗаменить(ИмяПоля, ВыборкаКолонки.Тип, "");
					КонецЕсли;
					СтруктураСтроки.Вставить(ИмяПоля, ВыборкаКолонки.Значение);	
				КонецЕсли;
			КонецЦикла;
			Если СтруктураСтроки.Количество() > 0 Тогда
				МассивСтрок.Добавить(СтруктураСтроки);
			КонецЕсли;
		КонецЦикла;
		ИмяТЧ = ВыборкаТЧ.ИмяТабличнойЧасти;
		Если ГруппыДанныхСПрефиксами.Найти(ГруппаДанных) <> Неопределено Тогда
			ИмяТЧ = ГруппаДанных + СтрЗаменить(ИмяТЧ, ВыборкаТЧ.Тип, "");
		КонецЕсли;
		ДанныеЗаполненияТаблицФормы.Вставить(ИмяТЧ, МассивСтрок);
	КонецЦикла;	
	Результат.Вставить("ДанныеЗаполненияТаблицФормы", ДанныеЗаполненияТаблицФормы);
	
	Возврат Результат;
	
КонецФункции


Процедура АвтоПодборХранимыхДанныхЭПД(СтрокаПоиска, ДанныеВыбора, Отбор) Экспорт
	
	ГруппаДанных = Отбор.ГруппаДанных;
	
	Организация = Неопределено;
	Отбор.Свойство("Организация", Организация);
	
	Контрагент = Неопределено;
	Отбор.Свойство("Контрагент", Контрагент);
	
	ДополнительныйОтбор = Неопределено;
	Отбор.Свойство("ДополнительныйОтбор", ДополнительныйОтбор);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтрокаПоиска", "%" + СтрокаПоиска + "%");
	Запрос.УстановитьПараметр("ГруппаДанных", ГруппаДанных);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("ДополнительныйОтбор", ДополнительныйОтбор);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ХранимыеДанныеЭПД.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ХранимыеДанныеЭПД КАК ХранимыеДанныеЭПД
	               |ГДЕ
				   |	ХранимыеДанныеЭПД.Наименование ПОДОБНО &СтрокаПоиска
	               |	И ХранимыеДанныеЭПД.ГруппаДанных = &ГруппаДанных" + ?(Организация <> Неопределено, "
	               |	И ХранимыеДанныеЭПД.Организация = &Организация", "") + ?(Контрагент <> Неопределено, "
	               |	И ХранимыеДанныеЭПД.Контрагент = &Контрагент", "") + ?(ДополнительныйОтбор <> Неопределено, "
	               |	И ХранимыеДанныеЭПД.ДополнительныйОтбор = &ДополнительныйОтбор", "");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеВыбора = Новый СписокЗначений;
	Пока Выборка.Следующий() Цикл
		ДанныеВыбора.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСФормами

// Получить титулы по документу.
// 
// Параметры:
//  Документ - ДанныеФормыСтруктура - Документ
//  ТолькоЗавершенныеОтправки - Булево - Только завершенные отправки
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение - ключ ТипЭлементаРегламентаЭДО, значение массив структур с данными о титуле
Функция ПолучитьТитулыПоДокументу(Документ, ТолькоЗавершенныеОтправки = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОбъектУчета", Документ.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	|	СообщениеЭДО.Ссылка,
	|	СообщениеЭДО.Состояние,
	|	СообщениеЭДО.Статус,
	|	СообщениеЭДО.ТипЭлементаРегламента КАК ТипЭлементаРегламента,
	|	СообщениеЭДОПрисоединенныеФайлы.ПолноеИмяФайла КАК ПолноеИмяФайла,
	|	СообщениеЭДО.Дата
	|ИЗ
	|	РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
	|		ПО ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент = СообщениеЭДО.ЭлектронныйДокумент
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СообщениеЭДОПрисоединенныеФайлы КАК СообщениеЭДОПрисоединенныеФайлы
	|		ПО СообщениеЭДО.ОсновнойФайл = СообщениеЭДОПрисоединенныеФайлы.Ссылка
	|ГДЕ
	|	ОбъектыУчетаДокументовЭДО.ОбъектУчета = &ОбъектУчета
	|	И ОбъектыУчетаДокументовЭДО.Актуальный = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	СообщениеЭДО.МоментВремени
	|ИТОГИ
	|ПО
	|	ТипЭлементаРегламента"; 
	
	ВыборкаТитул = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	МассивДобавленныхИмен = Новый Массив;
	Пока ВыборкаТитул.Следующий() Цикл
		Выборка = ВыборкаТитул.Выбрать();
		МассивСообщений = Новый Массив;
		Пока Выборка.Следующий() Цикл
			Если МассивДобавленныхИмен.Найти(Выборка.ПолноеИмяФайла) = Неопределено Тогда
				Если ТолькоЗавершенныеОтправки = Ложь 
					Или (Выборка.Статус = Перечисления.СтатусыСообщенийЭДО.Получен)
					Или (Выборка.Статус = Перечисления.СтатусыСообщенийЭДО.Отправлен) Тогда
					СтруктураДанных = Новый Структура;
					СтруктураДанных.Вставить("Сообщение", Выборка.Ссылка);
					СтруктураДанных.Вставить("Статус", Выборка.Статус);
					СтруктураДанных.Вставить("Дата", Выборка.Дата);
					СтруктураДанных.Вставить("ИдентификаторФайла", СтрЗаменить(Выборка.ПолноеИмяФайла, ".xml", ""));	
					МассивСообщений.Добавить(СтруктураДанных);
				КонецЕсли;
				МассивДобавленныхИмен.Добавить(Выборка.ПолноеИмяФайла);
			КонецЕсли;
		КонецЦикла;
		Если МассивСообщений.Количество() > 0 Тогда
			Результат.Вставить(ВыборкаТитул.ТипЭлементаРегламента, МассивСообщений);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьТаблицуВерсийТитулов(Документ, Организация, ВерсииТитулов, ТолькоНовые = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВерсииТитуловЭПД.Титул,
	|	ВерсииТитуловЭПД.НомерВерсии,
	|	ВерсииТитуловЭПД.ИдентификаторФайла,
	|	ВерсииТитуловЭПД.ДатаВерсии КАК ДатаВерсии
	|ИЗ
	|	РегистрСведений.ВерсииТитуловЭПД КАК ВерсииТитуловЭПД
	|ГДЕ
	|	ВерсииТитуловЭПД.Документ = &Документ
	|	И ВерсииТитуловЭПД.Организация = &Организация";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл    
		ВерсияЗаполнена = Ложь;
		Если ТолькоНовые = Истина Тогда
			Для Каждого СтрокаВерсии Из ВерсииТитулов Цикл
				Если СтрокаВерсии.Титул = Выборка.Титул
					И СтрокаВерсии.ИдентификаторФайла = Выборка.ИдентификаторФайла Тогда  
					ВерсияЗаполнена = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;      
			Если ВерсияЗаполнена = Ложь Тогда
				ЗаполнитьЗначенияСвойств(ВерсииТитулов.Добавить(), Выборка);
			КонецЕсли;
		Иначе
			ЗаполнитьЗначенияСвойств(ВерсииТитулов.Добавить(), Выборка);
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуЗначенийРеквизитовПоПараметрамФормы(Параметры, СтруктураРеквизитов) Экспорт
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		МассивИсключений = Новый Массив;
		
		Если ТипЗнч(Параметры.ЗначениеКопирования) = Тип("ДокументСсылка.ЭлектроннаяТранспортнаяНакладная") Тогда
			МассивИсключений.Добавить("ТитулГрузоотправителяТранспортнаяНакладнаяНомер");
			МассивИсключений.Добавить("ТитулГрузоотправителяТранспортнаяНакладнаяДата");
			МассивИсключений.Добавить("ТитулГрузоотправителяИдентификаторФайла");
			МассивИсключений.Добавить("ТитулГрузоотправителяДатаФормированияФайла");
			МассивИсключений.Добавить("ТитулГрузоотправителяВремяФормированияФайла");
			МассивИсключений.Добавить("ТитулГрузоотправителяДатаИсправления");
			МассивИсключений.Добавить("ТитулГрузоотправителяНомерИсправления");
			МассивИсключений.Добавить("ТитулГрузоотправителяУИДМинтранс");
			
			ПервыйТитул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул1;
		ИначеЕсли ТипЗнч(Параметры.ЗначениеКопирования) = Тип("ДокументСсылка.ЭлектронныйЗаказНаряд") Тогда
			МассивИсключений.Добавить("ТитулФрахтователяПорядковыйНомерЗаказНаряда");
			МассивИсключений.Добавить("ТитулФрахтователяДатаСоставленияЗаказНаряда");
			МассивИсключений.Добавить("ТитулФрахтователяИдентификаторФайла");
			МассивИсключений.Добавить("ТитулФрахтователяДатаФормированияФайла");
			МассивИсключений.Добавить("ТитулФрахтователяВремяФормированияФайла");
			МассивИсключений.Добавить("ТитулФрахтователяУИДМинтранс");
			
			ПервыйТитул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭЗН_Титул1;
		ИначеЕсли ТипЗнч(Параметры.ЗначениеКопирования) = Тип("ДокументСсылка.ЭлектроннаяСопроводительнаяВедомость") Тогда
			МассивИсключений.Добавить("ТитулПеревозчикаПорядковыйНомерСопроводительнойВедомости");
			МассивИсключений.Добавить("ТитулПеревозчикаДатаСоставленияСопроводительнойВедомости");
			МассивИсключений.Добавить("ТитулПеревозчикаИдентификаторФайла");
			МассивИсключений.Добавить("ТитулПеревозчикаДатаФормированияФайла");
			МассивИсключений.Добавить("ТитулПеревозчикаВремяФормированияФайла");
			МассивИсключений.Добавить("ТитулПеревозчикаУИДМинтранс");
			
			Если Параметры.ЗначениеКопирования.ВидОперации = 0 Тогда
				ПервыйТитул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул1_1;
			ИначеЕсли Параметры.ЗначениеКопирования.ВидОперации = 1 Тогда
				ПервыйТитул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул1_2;
			ИначеЕсли Параметры.ЗначениеКопирования.ВидОперации = 2 Тогда
				ПервыйТитул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул1_5;
			КонецЕсли;
		ИначеЕсли ТипЗнч(Параметры.ЗначениеКопирования) = Тип("ДокументСсылка.ЭлектронныйЗаказЗаявка") Тогда
			МассивИсключений.Добавить("ТитулГрузоотправителяЗаказНомер");
			МассивИсключений.Добавить("ТитулГрузоотправителяЗаказДата");
			МассивИсключений.Добавить("ТитулГрузоотправителяИдентификаторФайла");
			МассивИсключений.Добавить("ТитулГрузоотправителяДатаФормированияФайла");
			МассивИсключений.Добавить("ТитулГрузоотправителяВремяФормированияФайла");
			МассивИсключений.Добавить("ТитулГрузоотправителяУИДМинтранс");
			
			ПервыйТитул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭЗЗ_Титул1;
		ИначеЕсли ТипЗнч(Параметры.ЗначениеКопирования) = Тип("ДокументСсылка.ЭлектронныйПутевойЛист") Тогда
			МассивИсключений.Добавить("ТитулОформлениеНомерПутевогоЛиста");
			МассивИсключений.Добавить("ТитулОформлениеДатаПутевогоЛиста");
			МассивИсключений.Добавить("ТитулОформлениеИдентификаторФайла");
			МассивИсключений.Добавить("ТитулОформлениеДатаФормированияФайла");
			МассивИсключений.Добавить("ТитулОформлениеВремяФормированияФайла");
			МассивИсключений.Добавить("ТитулОформлениеУИДМинтранс");
			МассивИсключений.Добавить("ТитулОформлениеУИДМинтрансПредыдущегоЭПЛ");
			
			ПервыйТитул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул1;
		ИначеЕсли ТипЗнч(Параметры.ЗначениеКопирования) = Тип("ДокументСсылка.ЭлектронныйДоговорФрахтования") Тогда
			МассивИсключений.Добавить("ТитулФрахтователяИдентификаторФайла");
			МассивИсключений.Добавить("ТитулФрахтователяДатаФормированияФайла");
			МассивИсключений.Добавить("ТитулФрахтователяВремяФормированияФайла");
			МассивИсключений.Добавить("ТитулФрахтователяУИДМинтранс");
			
			ПервыйТитул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭДФ_Титул1;
		КонецЕсли;
		
		ЗаполнитьТаблицуЗначенийРеквизитов(Параметры.ЗначениеКопирования, 
				Параметры.ЗначениеКопирования.Организация, 
				СтруктураРеквизитов, 
				ПервыйТитул,
				МассивИсключений);	
	ИначеЕсли ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения) Тогда
		СтруктураРеквизитовЗаполнение = Новый Структура;
		МассивВерсийЗаполнение = Новый Массив;
		СтруктураРеквизитовТитулаЗаполнение = Новый Структура;
		Для Каждого КиЗ Из Параметры.ЗначенияЗаполнения Цикл
			Если ТипЗнч(КиЗ.Значение) = Тип("Массив") Тогда
				ИтераторЦикла = 1;
				Для Каждого СтруктураСтрока Из КиЗ.Значение Цикл
					Для Каждого КолонкаКиЗ Из СтруктураСтрока Цикл
						СтруктураРеквизитовТитулаЗаполнение.Вставить(КиЗ.Ключ + "__" + ИтераторЦикла + "__" + КолонкаКиЗ.Ключ, КолонкаКиЗ.Значение);	
					КонецЦикла;
					ИтераторЦикла = ИтераторЦикла + 1;
				КонецЦикла;	
			Иначе
				СтруктураРеквизитовТитулаЗаполнение.Вставить(КиЗ.Ключ, КиЗ.Значение);		
			КонецЕсли;
		КонецЦикла;	
		
		Если ТипЗнч(Параметры.ЗначениеКопирования) = Тип("ДокументСсылка.ЭлектроннаяТранспортнаяНакладная") Тогда
			ПервыйТитулПрефикс = "ТитулГрузоотправителя";
		ИначеЕсли ТипЗнч(Параметры.ЗначениеКопирования) = Тип("ДокументСсылка.ЭлектронныйЗаказНаряд") Тогда
			ПервыйТитулПрефикс = "ТитулФрахтователя";
		ИначеЕсли ТипЗнч(Параметры.ЗначениеКопирования) = Тип("ДокументСсылка.ЭлектроннаяСопроводительнаяВедомость") Тогда
			ПервыйТитулПрефикс = "ТитулПеревозчика";
		ИначеЕсли ТипЗнч(Параметры.ЗначениеКопирования) = Тип("ДокументСсылка.ЭлектронныйЗаказЗаявка") Тогда
			ПервыйТитулПрефикс = "ТитулГрузоотправителя";
		ИначеЕсли ТипЗнч(Параметры.ЗначениеКопирования) = Тип("ДокументСсылка.ЭлектронныйПутевойЛист") Тогда
			ПервыйТитулПрефикс = "ТитулОформление";
		ИначеЕсли ТипЗнч(Параметры.ЗначениеКопирования) = Тип("ДокументСсылка.ЭлектронныйДоговорФрахтования") Тогда
			ПервыйТитулПрефикс = "ТитулФрахтователя";
		КонецЕсли;
		
		МассивВерсийЗаполнение.Добавить(Новый ФиксированнаяСтруктура(СтруктураРеквизитовТитулаЗаполнение));
		СтруктураРеквизитовЗаполнение.Вставить(ПервыйТитулПрефикс, Новый ФиксированныйМассив(МассивВерсийЗаполнение));
		СтруктураРеквизитов = Новый ФиксированнаяСтруктура(СтруктураРеквизитовЗаполнение);
	ИначеЕсли ЗначениеЗаполнено(Параметры.Основание) Тогда
		Если ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.ЭлектронныйЗаказЗаявка")
		И ТипЗнч(Параметры.Ключ) = Тип("ДокументСсылка.ЭлектроннаяТранспортнаяНакладная") Тогда
			Если Параметры.Основание.ЭтоВходящий = Истина Тогда
				СтруктураРеквизитов = Новый ФиксированнаяСтруктура(Новый Структура);
				Возврат;
			КонецЕсли;			
			
			СтруктураРеквизитовОснования = Неопределено;
			ЗаполнитьТаблицуЗначенийРеквизитов(Параметры.Основание, 
				Параметры.Основание.Организация, 
				СтруктураРеквизитовОснования);	
				
			МенеджерОбъекта = Документы.ЭлектроннаяТранспортнаяНакладная;
			МакетСоответствиеИмен = МенеджерОбъекта.ПолучитьМакет("СоответствиеИменРеквизитов");
			ОбластьПоискаИмен = МакетСоответствиеИмен.ПолучитьОбласть("ТитулГрузоотправителя");
			ОбластьКолонкаРеквизитов = МакетСоответствиеИмен.Область(,1,МакетСоответствиеИмен.ВысотаТаблицы,1);
				
			СтруктураРеквизитовЗаполнение = Новый Структура;
			МассивВерсийЗаполнение = Новый Массив;
			СтруктураРеквизитовТитулаЗаполнение = Новый Структура;
			
			Для Каждого ТитулКиЗ Из СтруктураРеквизитовОснования Цикл
				ПоследняяВерсия = ТитулКиЗ.Значение[ТитулКиЗ.Значение.ВГраница()];
				Для Каждого РеквизитКиЗ Из ПоследняяВерсия Цикл
					Если СтрЗаканчиваетсяНа(РеквизитКиЗ.Ключ, "СсылкаСведенияОбОпасномГрузе")
						И ЗначениеЗаполнено(РеквизитКиЗ.Значение) Тогда
						ПрефиксСтрокиОткуда = СтрЗаменить(РеквизитКиЗ.Ключ, "СсылкаСведенияОбОпасномГрузе", "");
						ПрефиксСтрокиКуда = СтрЗаменить(ПрефиксСтрокиОткуда, "ТитулГрузоотправителяГрузы", "ТитулГрузоотправителяСведенияОбОпасныхГрузах");
						СтруктураРеквизитовТитулаЗаполнение.Вставить(ПрефиксСтрокиКуда + "СсылкаДОПОГ", РеквизитКиЗ.Значение);
						ИдентификаторСтрокиГруза = Неопределено;
						ПоследняяВерсия.Свойство(ПрефиксСтрокиОткуда + "ИдентификаторСтроки", ИдентификаторСтрокиГруза);
						Если ИдентификаторСтрокиГруза <> Неопределено Тогда
							СтруктураРеквизитовТитулаЗаполнение.Вставить(ПрефиксСтрокиКуда + "ИдентификаторСтрокиРодителя", ИдентификаторСтрокиГруза);
						КонецЕсли;
						Если ТипЗнч(РеквизитКиЗ.Значение) = Тип("СправочникСсылка.ХранимыеДанныеЭПД") Тогда
							СтруктураДОПОГ = Новый Структура;
							ОбменСГИСЭПДКлиентСервер.ЗаполнитьРеквизитыКлассификатораДОПОГ(РеквизитКиЗ.Значение, "", СтруктураДОПОГ);
							Для Каждого ДопогКиЗ Из СтруктураДОПОГ Цикл
								СтруктураРеквизитовТитулаЗаполнение.Вставить(ПрефиксСтрокиКуда + ДопогКиЗ.Ключ, ДопогКиЗ.Значение);	
							КонецЦикла;
						КонецЕсли;	
					ИначеЕсли СтрНачинаетсяС(РеквизитКиЗ.Ключ, "ТитулПеревозчикаТранспортноеСредство")
						Или СтрНачинаетсяС(РеквизитКиЗ.Ключ, "ТитулПеревозчикаОснованияВладенияТС")
						Или СтрНачинаетсяС(РеквизитКиЗ.Ключ, "ТитулПеревозчикаОснованиеВладенияТСРеквизитыСторон")
						Или СтрНачинаетсяС(РеквизитКиЗ.Ключ, "ТитулПеревозчикаПрицепы")
						Или СтрНачинаетсяС(РеквизитКиЗ.Ключ, "ТитулПеревозчикаОснованияВладенияПрицепом")
						Или СтрНачинаетсяС(РеквизитКиЗ.Ключ, "ТитулПеревозчикаОснованиеВладенияПрицепомРеквизитыСторон")
						Или СтрНачинаетсяС(РеквизитКиЗ.Ключ, "ТитулПеревозчикаСпециальныеУсловияДвижения")
						Или СтрНачинаетсяС(РеквизитКиЗ.Ключ, "ТитулПеревозчикаВодители")
						Или СтрНачинаетсяС(РеквизитКиЗ.Ключ, "ТитулПеревозчикаВодительНомераТелефонов") Тогда 
						КлючКуда = СтрЗаменить(РеквизитКиЗ.Ключ, "ТитулПеревозчика", "ТитулГрузоотправителя");
						СтруктураРеквизитовТитулаЗаполнение.Вставить(КлючКуда, РеквизитКиЗ.Значение);
					ИначеЕсли РеквизитКиЗ.Ключ = "СсылкаТитулГрузоотправителяГрузоотправитель"
						Или РеквизитКиЗ.Ключ = "СсылкаТитулГрузоотправителяПеревозчик" Тогда 	
						СтруктураРеквизитовТитулаЗаполнение.Вставить(РеквизитКиЗ.Ключ, РеквизитКиЗ.Значение);
					ИначеЕсли РеквизитКиЗ.Ключ = "ТитулГрузоотправителяРекомендацииОПредельныхСрокахПеревозки" Тогда
						СтруктураРеквизитовТитулаЗаполнение.Вставить("ТитулГрузоотправителяСрокДоставкиГруза", РеквизитКиЗ.Значение);	
					ИначеЕсли РеквизитКиЗ.Ключ = "ТитулГрузоотправителяУказанияВОтношенииВыполненияНормПеревозки"
						И РеквизитКиЗ.Значение <> "Отсутствуют" Тогда
						Указания = Неопределено;
						Если СтруктураРеквизитовТитулаЗаполнение.Свойство("ТитулГрузоотправителяУказанияВОтношенииВыполненияНормПеревозки", Указания)
						И Указания <> "Отсутствуют" Тогда
							СтруктураРеквизитовТитулаЗаполнение.Вставить("ТитулГрузоотправителяУказанияВОтношенииВыполненияНормПеревозки", 
								Указания + "; " + РеквизитКиЗ.Значение);
						Иначе
							СтруктураРеквизитовТитулаЗаполнение.Вставить("ТитулГрузоотправителяУказанияВОтношенииВыполненияНормПеревозки", РеквизитКиЗ.Значение);			
						КонецЕсли;
					ИначеЕсли СтрНачинаетсяС(РеквизитКиЗ.Ключ, "ТитулГрузоотправителяГрузоотправитель")
						Или СтрНачинаетсяС(РеквизитКиЗ.Ключ, "ТитулГрузоотправителяПеревозчик")
						Или СтрНачинаетсяС(РеквизитКиЗ.Ключ, "ТитулГрузоотправителяАдресПогрузки")
						Или СтрНачинаетсяС(РеквизитКиЗ.Ключ, "ТитулГрузоотправителяТранспортноеСредство")
						Или СтрНачинаетсяС(РеквизитКиЗ.Ключ, "ТитулГрузоотправителяГрузы")
						Или СтрНачинаетсяС(РеквизитКиЗ.Ключ, "ТитулГрузоотправителяЗаказчик")
						Или РеквизитКиЗ.Ключ = "ТитулГрузоотправителяЗаявленныеДатаВремяПодачи"
						Или РеквизитКиЗ.Ключ = "ТитулГрузоотправителяЗаказНомер"
						Или РеквизитКиЗ.Ключ = "ТитулГрузоотправителяЗаказДата"
						Или РеквизитКиЗ.Ключ = "ТитулГрузоотправителяВерхнийПределТемпературыПриПеревозке"
						Или РеквизитКиЗ.Ключ = "ТитулГрузоотправителяНижнийПределТемпературыПриПеревозке"
						Или РеквизитКиЗ.Ключ = "ТитулГрузоотправителяВерхнийПределВлажностиПриПеревозке"
						Или РеквизитКиЗ.Ключ = "ТитулГрузоотправителяНижнийПределВлажностиПриПеревозке" Тогда
						МассивЧастейИмени = ОбменСГИСЭПДКлиентСервер.РазделитьСтрокуСоСложнымРазделителем(РеквизитКиЗ.Ключ, "__");
						Если МассивЧастейИмени.Количество() = 1 Тогда
							ИмяРеквизита = РеквизитКиЗ.Ключ;
						ИначеЕсли МассивЧастейИмени.Количество() = 3 Тогда
							ИмяРеквизита = МассивЧастейИмени[0] + "." + МассивЧастейИмени[2];
						КонецЕсли;
						ОбластьНайдено = МакетСоответствиеИмен.НайтиТекст(ИмяРеквизита, , ОбластьКолонкаРеквизитов, Ложь, Истина, Истина, Ложь);				
						Если ОбластьНайдено <> Неопределено Тогда
							СтруктураРеквизитовТитулаЗаполнение.Вставить(РеквизитКиЗ.Ключ, РеквизитКиЗ.Значение);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;	
				Если ТитулКиЗ.Ключ = "ТитулГрузоотправителя" Тогда
					// Адреса погрузки и выгрузки
					МассивСтрокАдресов = ОбменСГИСЭПДКлиентСервер.МассивСтрокТаблицыИзСтруктурыРеквизитов(ПоследняяВерсия, 
																		"ТитулГрузоотправителяАдресаПунктовПогрузкиИВыгрузки");
					НомерПогрузки = 999;
					НомерВыгрузки = 999;	
					СтрокаПервойПогрузки = Новый Структура;
					СтрокаПервойВыгрузки = Новый Структура;
					Для Каждого СтруктураСтроки Из МассивСтрокАдресов Цикл
						Если СтруктураСтроки.Операция = "Погрузка" И СтруктураСтроки.НомерПп < НомерПогрузки Тогда
							НомерПогрузки = СтруктураСтроки.НомерПп;	
							СтрокаПервойПогрузки = СтруктураСтроки;
						КонецЕсли;
						Если СтруктураСтроки.Операция = "Выгрузка" И СтруктураСтроки.НомерПп < НомерВыгрузки Тогда
							НомерВыгрузки = СтруктураСтроки.НомерПп;	
							СтрокаПервойВыгрузки = СтруктураСтроки;
						КонецЕсли;
					КонецЦикла;
					Для Каждого РеквизитКиЗ Из СтрокаПервойПогрузки Цикл
						КлючРеквизита = СтрЗаменить(РеквизитКиЗ.Ключ, "АдресПунктаПогрузки", "ТитулГрузоотправителяАдресПогрузки");
						СтруктураРеквизитовТитулаЗаполнение.Вставить(КлючРеквизита, РеквизитКиЗ.Значение);	
					КонецЦикла;
					Для Каждого РеквизитКиЗ Из СтрокаПервойВыгрузки Цикл
						КлючРеквизита = СтрЗаменить(РеквизитКиЗ.Ключ, "АдресПунктаПогрузки", "ТитулГрузоотправителяГрузополучательАдресДоставки");
						СтруктураРеквизитовТитулаЗаполнение.Вставить(КлючРеквизита, РеквизитКиЗ.Значение);	
					КонецЦикла;
					// Суммарные величины
					СуммаБрутто = ОбменСГИСЭПДКлиентСервер.СуммаПоСтрокамТаблицыИзСтруктурыРеквизитов(ПоследняяВерсия, 
																							"ТитулГрузоотправителяГрузы", 
																							"МассаБрутто");
					СтруктураРеквизитовТитулаЗаполнение.Вставить("ТитулГрузоотправителяМассаБруттоГруза", СуммаБрутто);
					
					СуммаМест = ОбменСГИСЭПДКлиентСервер.СуммаПоСтрокамТаблицыИзСтруктурыРеквизитов(ПоследняяВерсия, 
																							"ТитулГрузоотправителяГрузы", 
																							"КоличествоГрузовыхМест");
					СтруктураРеквизитовТитулаЗаполнение.Вставить("ТитулГрузоотправителяКоличествоГрузовыхМест", СуммаМест);
				КонецЕсли;
			КонецЦикла;
			
			СсылкаВидТары = Неопределено;
			ИтераторЦикла = 1;
			Пока ПоследняяВерсия.Свойство("ТитулГрузоотправителяГрузы__" + ИтераторЦикла + "__СсылкаВидТары", СсылкаВидТары) Цикл
				СтруктураРеквизитовТитулаЗаполнение.Вставить("ТитулГрузоотправителяГрузы__" + ИтераторЦикла + "__СпособУпаковки", СсылкаВидТары.Наименование);
				Если СтруктураРеквизитовТитулаЗаполнение.Свойство("ТитулГрузоотправителяГрузы__" + ИтераторЦикла + "__ИдентификаторСтроки") = Ложь Тогда
					СтруктураРеквизитовТитулаЗаполнение.Вставить("ТитулГрузоотправителяГрузы__" + ИтераторЦикла + "__ИдентификаторСтроки", 
						Строка(Новый УникальныйИдентификатор()));	
				КонецЕсли;
				ИтераторЦикла = ИтераторЦикла + 1;
			КонецЦикла;
			
			ИдентификаторСтроки = Неопределено;
			ИтераторЦикла = 1;
			Пока СтруктураРеквизитовТитулаЗаполнение.Свойство(
				"ТитулГрузоотправителяГрузы__" + ИтераторЦикла + "__ИдентификаторСтроки", ИдентификаторСтроки) Цикл
				СтруктураРеквизитовТитулаЗаполнение.Вставить("ТитулГрузоотправителяПереченьМаркировокГруза__" 
					+ ИтераторЦикла + "__ИдентификаторСтрокиРодителя", ИдентификаторСтроки);
				СтруктураРеквизитовТитулаЗаполнение.Вставить("ТитулГрузоотправителяПереченьМаркировокГруза__" 
					+ ИтераторЦикла + "__МаркировкаГруза", "Отсутствует");				
				ИтераторЦикла = ИтераторЦикла + 1;
			КонецЦикла;
			
			СтруктураРеквизитовТитулаЗаполнение.Вставить("ТитулГрузоотправителяЛицоИмеющееПолномочияПереадресовки", "Грузоотправитель");
			СтруктураРеквизитовТитулаЗаполнение.Вставить("ТитулГрузоотправителяСпособПередачиУказанияНаПереадресовку", "Электронное уведомление перевозчика о переадресовке");
			Телефон = Неопределено;
			СтруктураРеквизитовТитулаЗаполнение.Свойство("ТитулГрузоотправителяГрузоотправительНомераТелефонов__0__Телефон", Телефон);
			Если Телефон <> Неопределено Тогда
				СтруктураРеквизитовТитулаЗаполнение.Вставить("ТитулГрузоотправителяОтветственныйЗаПереадресовкуНомераТелефонов__1__Телефон", Телефон);
			КонецЕсли;
			
			ЗаполнитьПредставлениеХранимыхДанныхОбъекта(СтруктураРеквизитовТитулаЗаполнение,
												 "Документ.ЭлектроннаяТранспортнаяНакладная", 
												 ОбластьПоискаИмен);
			
			МассивВерсийЗаполнение.Добавить(Новый ФиксированнаяСтруктура(СтруктураРеквизитовТитулаЗаполнение));
			ПервыйТитулПрефикс = "ТитулГрузоотправителя";
			СтруктураРеквизитовЗаполнение.Вставить(ПервыйТитулПрефикс, Новый ФиксированныйМассив(МассивВерсийЗаполнение));
			СтруктураРеквизитов = Новый ФиксированнаяСтруктура(СтруктураРеквизитовЗаполнение);
		КонецЕсли;
	ИначеЕсли СтруктураРеквизитов = Неопределено Тогда
		СтруктураРеквизитов = Новый ФиксированнаяСтруктура(Новый Структура);	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуЗначенийРеквизитов(Документ, Организация, СтруктураРеквизитов, Титул = Неопределено, МассивИсключений = Неопределено, ТолькоНовые = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗначенияРеквизитовДокументовЭПД.НомерВерсии КАК НомерВерсии,
	|	ЗначенияРеквизитовДокументовЭПД.ИмяТабличнойЧасти,
	|	ЗначенияРеквизитовДокументовЭПД.НомерСтрокиРеквизита,
	|	ЗначенияРеквизитовДокументовЭПД.ИмяРеквизита,
	|	ЗначенияРеквизитовДокументовЭПД.ЗначениеРеквизита,
	|	ЗначенияРеквизитовДокументовЭПД.ЗначениеРеквизитаСсылка,
	|	ЗначенияРеквизитовДокументовЭПД.ЗначениеРеквизитаСтрока,
	|	ЗначенияРеквизитовДокументовЭПД.ТипРеквизита,
	|	ЗначенияРеквизитовДокументовЭПД.Титул КАК Титул
	|ИЗ
	|	РегистрСведений.ЗначенияРеквизитовДокументовЭПД КАК ЗначенияРеквизитовДокументовЭПД
	|ГДЕ
	|	ЗначенияРеквизитовДокументовЭПД.Документ = &Документ
	|	И ЗначенияРеквизитовДокументовЭПД.Организация = &Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Титул,
	|	НомерВерсии
	|ИТОГИ
	|ПО
	|	Титул,
	|	НомерВерсии";
	
	ВыборкаТитул = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если ТолькоНовые = Истина Тогда
		СтруктураРеквизитовЗаполнение = ОбменСГИСЭПДКлиентСервер.СкопироватьИзФиксированногоЗначенияРекурсивно(СтруктураРеквизитов);	
	Иначе
		СтруктураРеквизитовЗаполнение = Новый Структура;
	КонецЕсли;
	
	Пока ВыборкаТитул.Следующий() Цикл
		Если Титул <> Неопределено И Титул <> ВыборкаТитул.Титул Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(ВыборкаТитул.Титул) = Ложь Тогда
			Продолжить;
		КонецЕсли;
		ИнформацияПоПрефиксамТитула = ОбменСГИСЭПДКлиентСервер.ПрефиксТитулаПоЭлементуРегламентаЭДО(ВыборкаТитул.Титул);
		ВыборкаВерсия = ВыборкаТитул.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
		
		МассивВерсийЗаполнение = Неопределено;
		СтруктураРеквизитовЗаполнение.Свойство(ИнформацияПоПрефиксамТитула.ВПрограмме, МассивВерсийЗаполнение);
		Если МассивВерсийЗаполнение = Неопределено Тогда
			МассивВерсийЗаполнение = Новый Массив; 
		КонецЕсли;     
		
		СчетчикВерсий = 0;
		Пока ВыборкаВерсия.Следующий() Цикл
			Выборка = ВыборкаВерсия.Выбрать();	
			СтруктураРеквизитовТитулаЗаполнение = Новый Структура;
			Пока Выборка.Следующий() Цикл
				КлючСтруктуры = "";
				Если Выборка.ИмяТабличнойЧасти <> "" Тогда
					КлючСтруктуры = КлючСтруктуры + Выборка.ИмяТабличнойЧасти + "__" + Выборка.НомерСтрокиРеквизита + "__";	
					ИмяПроверкиИсключения = Выборка.ИмяТабличнойЧасти;
				Иначе
					ИмяПроверкиИсключения = Выборка.ИмяРеквизита;
				КонецЕсли;
				Если МассивИсключений <> Неопределено
					И МассивИсключений.Найти(ИмяПроверкиИсключения) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				КлючСтруктуры = КлючСтруктуры + Выборка.ИмяРеквизита;
				Если Выборка.ТипРеквизита = Перечисления.ТипыРеквизитовЭПД.СсылочныйТип Тогда
					ЗначениеРеквизита = Выборка.ЗначениеРеквизитаСсылка;
				ИначеЕсли Выборка.ТипРеквизита = Перечисления.ТипыРеквизитовЭПД.НеограниченнаяСтрока Тогда
					ЗначениеРеквизита = Выборка.ЗначениеРеквизитаСтрока;
				Иначе
					ЗначениеРеквизита = Выборка.ЗначениеРеквизита;
				КонецЕсли;
				СтруктураРеквизитовТитулаЗаполнение.Вставить(КлючСтруктуры, ЗначениеРеквизита);
			КонецЦикла;	
			МассивВерсийЗаполнение.Вставить(СчетчикВерсий, Новый ФиксированнаяСтруктура(СтруктураРеквизитовТитулаЗаполнение));
			СчетчикВерсий = СчетчикВерсий + 1;
		КонецЦикла;
		СтруктураРеквизитовЗаполнение.Вставить(ИнформацияПоПрефиксамТитула.ВПрограмме, Новый ФиксированныйМассив(МассивВерсийЗаполнение));
	КонецЦикла;
	
	СтруктураРеквизитов = Новый ФиксированнаяСтруктура(СтруктураРеквизитовЗаполнение);
	
КонецПроцедуры

// Получить версии титулов документа.
// 
// Параметры:
//  ОбъектИлиДанныеФормы - ДанныеФормыСтруктура, ДокументОбъект - Документ
//  Организация - СправочникСсылка.Организации - Организация
//  Группировка - Строка - Группировка
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение -- ключ ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО, значение массив полей группировки
Функция ПолучитьВерсииТитуловДокумента(ОбъектИлиДанныеФормы, Организация, Группировка = "ДатаВерсии") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Соответствие;
	
	Результат.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул1, Новый Массив);
	Результат.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул2, Новый Массив);
	Результат.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул3, Новый Массив);
	Результат.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул4, Новый Массив);
	Результат.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул5, Новый Массив);
	Результат.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул6, Новый Массив);
	Результат.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул7, Новый Массив);
	Результат.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул8, Новый Массив);
	Результат.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул9, Новый Массив);
	
	Результат.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ДопТитул3, Новый Массив);
	Результат.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ДопТитул4, Новый Массив);
	Результат.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ДопТитул7, Новый Массив);
	Результат.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ДопТитул8, Новый Массив);
	Результат.Вставить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ДопТитул9, Новый Массив);
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документ", ОбъектИлиДанныеФормы.Ссылка);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВерсииТитуловЭПД." + Группировка + " КАК Группировка,
	|	ВерсииТитуловЭПД.Титул КАК Титул
	|ИЗ
	|	РегистрСведений.ВерсииТитуловЭПД КАК ВерсииТитуловЭПД
	|ГДЕ
	|	ВерсииТитуловЭПД.Документ = &Документ
	|	И ВерсииТитуловЭПД.Организация = &Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Титул,
	|	" + Группировка + "
	|ИТОГИ
	|ПО
	|	Титул";
	
	ВыборкаТитул = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаТитул.Следующий() Цикл
		Выборка = ВыборкаТитул.Выбрать();
		МассивВерсий = Новый Массив;
		Пока Выборка.Следующий() Цикл
			МассивВерсий.Добавить(Выборка.Группировка);		
		КонецЦикла;		
		Если Результат.Получить(ВыборкаТитул.Титул) <> Неопределено Тогда
			Результат.Вставить(ВыборкаТитул.Титул, МассивВерсий);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Заполнить реквизиты объекта по версии титула.
// 
// Параметры: Документ - ФормаКлиентскогоПриложения - Документ
//  Форма - ФормаКлиентскогоПриложения - Форма
//  Титул - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО - Титул
//  НомерВерсии - Число - Номер версии
//  РеквизитыВерсии - Структура - Реквизиты версии
Процедура ЗаполнитьРеквизитыПоВерсии(Форма, Титул, НомерВерсии, РеквизитыВерсии) Экспорт
	
	ИнформацияПоПрефиксамТитула = ОбменСГИСЭПДКлиентСервер.ПрефиксТитулаПоЭлементуРегламентаЭДО(Титул);
	
	МассивУдалитьПрефиксы = Новый Массив;
	МассивУдалитьПрефиксы.Добавить("Ссылка");
	МассивУдалитьПрефиксы.Добавить("ХранимыеДанные");
	МассивУдалитьПрефиксы.Добавить("Представление");
	
	СтруктураРеквизитовФормы = Новый Структура(Форма.ОписаниеРеквизитовФормы.ПараметрыФормы);
	Для Каждого КиЗ Из СтруктураРеквизитовФормы Цикл
		ИмяРеквизитаБезСлужебныхПрефиксов = КиЗ.Ключ;		
		Для Каждого УдалитьПрефикс Из МассивУдалитьПрефиксы Цикл
			Если СтрНачинаетсяС(ИмяРеквизитаБезСлужебныхПрефиксов, УдалитьПрефикс) Тогда
				ИмяРеквизитаБезСлужебныхПрефиксов = Сред(ИмяРеквизитаБезСлужебныхПрефиксов, СтрДлина(УдалитьПрефикс) + 1);
			КонецЕсли;
		КонецЦикла;
		Если СтрНачинаетсяС(ИмяРеквизитаБезСлужебныхПрефиксов, ИнформацияПоПрефиксамТитула.ВПрограмме) Тогда
			ЗначениеРеквизита = Неопределено;
			РеквизитыВерсии.Свойство(КиЗ.Ключ, ЗначениеРеквизита);
			Форма[КиЗ.Ключ] = ЗначениеРеквизита;
		КонецЕсли;
	КонецЦикла;   
	
	Для Каждого ОписаниеТаблицКиЗ Из Форма.ОписаниеРеквизитовФормы.ОписаниеТаблицФормы Цикл    
		Если СтрНачинаетсяС(ОписаниеТаблицКиЗ.Ключ, ИнформацияПоПрефиксамТитула.ВПрограмме) Тогда
			Форма[ОписаниеТаблицКиЗ.Ключ].Очистить();    
			МассивСтрок = ОбменСГИСЭПДКлиентСервер.МассивСтрокТаблицыИзСтруктурыРеквизитов(РеквизитыВерсии, ОписаниеТаблицКиЗ.Ключ);
			Для Каждого СтруктураСтроки Из МассивСтрок Цикл
				НоваяСтрока = Форма[ОписаниеТаблицКиЗ.Ключ].Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураСтроки);
			КонецЦикла;
		КонецЕсли;	
	КонецЦикла;
	
	ПоказатьДополнительныеРеквизитыОсновнойФормы(Форма, ИнформацияПоПрефиксамТитула.ВПрограмме, РеквизитыВерсии);
	
	СтруктураРеквизитовОбъекта = Новый Структура(Форма.ОписаниеРеквизитовФормы.РеквизитыОбъекта);
	Для Каждого КиЗ Из СтруктураРеквизитовОбъекта Цикл
		ИмяРеквизитаБезСлужебныхПрефиксов = КиЗ.Ключ;		
		Для Каждого УдалитьПрефикс Из МассивУдалитьПрефиксы Цикл
			Если СтрНачинаетсяС(ИмяРеквизитаБезСлужебныхПрефиксов, УдалитьПрефикс) Тогда
				ИмяРеквизитаБезСлужебныхПрефиксов = Сред(ИмяРеквизитаБезСлужебныхПрефиксов, СтрДлина(УдалитьПрефикс) + 1);
			КонецЕсли;
		КонецЦикла;
		Если СтрНачинаетсяС(ИмяРеквизитаБезСлужебныхПрефиксов, ИнформацияПоПрефиксамТитула.ВПрограмме) Тогда
			ЗначениеРеквизита = Неопределено;
			РеквизитыВерсии.Свойство(КиЗ.Ключ, ЗначениеРеквизита);
			Форма.Объект[КиЗ.Ключ] = ЗначениеРеквизита;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПоказатьДополнительныеРеквизитыОсновнойФормы(Форма, ПрефиксТитула = Неопределено, РеквизитыВерсии = Неопределено) Экспорт
	
	Если РеквизитыВерсии = Неопределено Тогда
		Если ПрефиксТитула = Неопределено Тогда
			ТипДокумента = ОбменСГИСЭПДКлиентСервер.ТипДокументаПоИмениФормы(Форма.ИмяФормы);
			ГруппаСтраницы = Форма.Элементы.Найти("Страницы");
			ПрефиксТитула = ОбменСГИСЭПДКлиентСервер.ПолучитьПрефиксТитулаПоСтраницеОсновнойФормы(ГруппаСтраницы.ТекущаяСтраница.Имя, ТипДокумента);		
		КонецЕсли;
		ВыбранныйТитул = ОбменСГИСЭПДКлиентСервер.ТитулПоПрефиксу("Документ." + ТипДокумента, ПрефиксТитула); 
		НомерВерсии = Неопределено;
		Если Форма.ОтображаемыеВерсииТитулов.Свойство(ПрефиксТитула, НомерВерсии) = Ложь Тогда
			НомерВерсии = 0;
		КонецЕсли;
		РеквизитыВерсии = ПолучитьВерсиюТитулаДокумента(Форма.СтруктураРеквизитов, ВыбранныйТитул, НомерВерсии);
	КонецЕсли;
	
	// Очистим значения и скроем с формы неактуальные
	Если Форма.ОписаниеРеквизитовФормы.Свойство("ДопРеквизитыУдалить") Тогда
		Если Форма.ОписаниеРеквизитовФормы.ДопРеквизитыУдалить.Количество() > 0 Тогда
			Для Каждого ГруппаДопРеквизитовУдалить Из Форма.ОписаниеРеквизитовФормы.ДопРеквизитыУдалить Цикл
				ИмяДопИнфо = ГруппаДопРеквизитовУдалить.Ключ + "ДополнительнаяИнформация";
				ТаблицаДопИнфо = Форма[ИмяДопИнфо];	
				КоличествоСтрок = ТаблицаДопИнфо.Количество();
				Для ИтераторСтроки = 1 По КоличествоСтрок Цикл
					СтрокаДопИнфо = ТаблицаДопИнфо[КоличествоСтрок - ИтераторСтроки];
					Если ГруппаДопРеквизитовУдалить.Значение.Свойство(СтрокаДопИнфо.ИдентификаторИнформации) Тогда
						СтрокаДопИнфо.Значение = Неопределено;	
					КонецЕсли; 	
				КонецЦикла;	
			КонецЦикла;
			ИмяИнфПоля = ГруппаДопРеквизитовУдалить.Ключ + "ИнформационныеПоля";
			ТаблицаИнфПоля = Форма[ИмяИнфПоля];	
			СтрокаДопПолей = ТаблицаИнфПоля[0];
	
			ГруппаИИмяСтраницы = ГруппаРеквизитовИИмяСтраницыФормыПоПрефиксу(Форма, ГруппаДопРеквизитовУдалить.Ключ);
	
			СоздатьЭлементыВводаЗначенийСписка(Форма, ИмяДопИнфо, "Значение", Ложь, , ГруппаИИмяСтраницы.ГруппаРеквизитов, СтрокаДопПолей.ИдентификаторСтроки, Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ОписаниеГруппыДопРеквизитов Из Форма.ОписаниеРеквизитовФормы.ОписаниеДопРеквизитов Цикл
		Если ПрефиксТитула = Неопределено Или СтрНачинаетсяС(ОписаниеГруппыДопРеквизитов.Ключ, ПрефиксТитула) Тогда
			ИмяИнфПоля = ОписаниеГруппыДопРеквизитов.Ключ + "ИнформационныеПоля";
			ТаблицаИнфПоля = Форма[ИмяИнфПоля];
			Если ТаблицаИнфПоля.Количество() = 0 Тогда
				СтрокаДопПолей = ТаблицаИнфПоля.Добавить();
				СтрокаДопПолей.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор());	
			Иначе
				СтрокаДопПолей = ТаблицаИнфПоля[0];
			КонецЕсли;	
			ИмяДопИнфо = ОписаниеГруппыДопРеквизитов.Ключ + "ДополнительнаяИнформация";
			ТаблицаДопИнфо = Форма[ИмяДопИнфо];	
			
			Для Каждого СтруктураДопРеквизита Из ОписаниеГруппыДопРеквизитов.Значение Цикл
				Отбор = Новый Структура("ИдентификаторИнформации,ИдентификаторСтрокиРодителя", 
					СтруктураДопРеквизита.ИдентификаторИнформации, СтрокаДопПолей.ИдентификаторСтроки);
				Если ТаблицаДопИнфо.НайтиСтроки(Отбор).Количество() = 0 Тогда
					СтрокаДопИнфо = ТаблицаДопИнфо.Добавить();
					СтрокаДопИнфо.ИдентификаторСтрокиРодителя = СтрокаДопПолей.ИдентификаторСтроки;
					СтрокаДопИнфо.ИдентификаторИнформации = СтруктураДопРеквизита.ИдентификаторИнформации;
					СтрокаДопИнфо.ТипДанных = СтруктураДопРеквизита.ТипДанных;
					СтрокаДопИнфо.Заголовок = СтруктураДопРеквизита.Заголовок;
					СтрокаДопИнфо.Перечисления = СтруктураДопРеквизита.Перечисления;
					СтрокаДопИнфо.Квалификаторы = СтруктураДопРеквизита.Квалификаторы;
					СтрокаДопИнфо.Обязательный = СтруктураДопРеквизита.Обязательный;
				КонецЕсли;	
			КонецЦикла;
			
			ГруппаИИмяСтраницы = ГруппаРеквизитовИИмяСтраницыФормыПоПрефиксу(Форма, ОписаниеГруппыДопРеквизитов.Ключ);
			
			ПоказыватьПустые = Форма.Элементы[ГруппаИИмяСтраницы.ИмяСтраницы].ТолькоПросмотр = Ложь;
				
			СоздатьЭлементыВводаЗначенийСписка(Форма, ИмяДопИнфо, "Значение", Ложь, , ГруппаИИмяСтраницы.ГруппаРеквизитов, СтрокаДопПолей.ИдентификаторСтроки, ПоказыватьПустые);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Получить версию титула документа.
// 
// Параметры: Документ - ДанныеФормыСтруктура - Документ
//  СтруктураРеквизитов - Структура - Структура реквизитов
//  Титул - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО - Титул
// Версия - Число, Неопределено - Версия
//  НомерВерсии - Число, Неопределено - Номер версии
// 
// Возвращаемое значение:
//  ФиксированнаяСтруктура -- имя и значение реквизита
Функция ПолучитьВерсиюТитулаДокумента(СтруктураРеквизитов, Титул, НомерВерсии) Экспорт
	
	ИнформацияПоПрефиксамТитула = ОбменСГИСЭПДКлиентСервер.ПрефиксТитулаПоЭлементуРегламентаЭДО(Титул);

	МассивВерсийТитула = Неопределено;
	СтруктураРеквизитов.Свойство(ИнформацияПоПрефиксамТитула.ВПрограмме, МассивВерсийТитула);
	Если МассивВерсийТитула = Неопределено Тогда
		Возврат Новый Структура;
	КонецЕсли;
	
	Если НомерВерсии > МассивВерсийТитула.ВГраница() Тогда
		Возврат Новый ФиксированнаяСтруктура(Новый Структура);	
	Иначе
		Возврат МассивВерсийТитула[НомерВерсии];	
	КонецЕсли;	
	
КонецФункции

// Скопировать реквизиты из титула в титул.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма
//  ПрефиксТитулаОткуда - Строка - Префикс титула откуда
//  ПрефиксТитулаКуда - Строка - Префикс титула куда
//  Перезаписывать - Булево - Перезаписывать
//  МассивИсключений - Массив из Строка, Неопределено - Массив исключений имен реквизитов
Процедура СкопироватьРеквизитыИзТитулаВТитул(Форма, ПрефиксТитулаОткуда, ПрефиксТитулаКуда, Перезаписывать = Ложь, МассивИсключений = Неопределено) Экспорт
	
	СтруктураЗаполнения = ОбменСГИСЭПДКлиентСервер.СкопироватьИзФиксированногоЗначенияРекурсивно(Форма.СтруктураРеквизитов);
	
	ВерсииОткуда = Неопределено;
	СтруктураЗаполнения.Свойство(ПрефиксТитулаОткуда, ВерсииОткуда);
	Если ВерсииОткуда <> Неопределено Тогда
		КонтейнерТитулаОткуда = ВерсииОткуда[ВерсииОткуда.ВГраница()];
		
		ВерсииКуда = Неопределено;
		СтруктураЗаполнения.Свойство(ПрефиксТитулаКуда, ВерсииКуда);
		Если ВерсииКуда = Неопределено Тогда
			КонтейнерТитулаКуда = Новый Структура;	
			ВерсииКуда = Новый Массив;
			ВерсииКуда.Добавить(КонтейнерТитулаКуда);
			НомерВерсии = 0;
		Иначе
			НомерВерсии = ВерсииКуда.ВГраница();
			КонтейнерТитулаКуда = ВерсииКуда[НомерВерсии];	
		КонецЕсли;
		
		Для Каждого КиЗ Из КонтейнерТитулаОткуда Цикл
			ИмяРеквизитаБезСлужебныхПрефиксов = КиЗ.Ключ;
			МассивУдалитьПрефиксы = Новый Массив;
			МассивУдалитьПрефиксы.Добавить("Ссылка");
			МассивУдалитьПрефиксы.Добавить("ХранимыеДанные");
			МассивУдалитьПрефиксы.Добавить("Представление");
			Для Каждого УдалитьПрефикс Из МассивУдалитьПрефиксы Цикл
				Если СтрНачинаетсяС(ИмяРеквизитаБезСлужебныхПрефиксов, УдалитьПрефикс) Тогда
					ИмяРеквизитаБезСлужебныхПрефиксов = Сред(ИмяРеквизитаБезСлужебныхПрефиксов, СтрДлина(УдалитьПрефикс) + 1);
				КонецЕсли;
			КонецЦикла;
			Если МассивИсключений <> Неопределено И МассивИсключений.Найти(КиЗ.Ключ) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если СтрНачинаетсяС(ИмяРеквизитаБезСлужебныхПрефиксов, ПрефиксТитулаОткуда) Тогда
				ИмяРеквизитаКуда = СтрЗаменить(КиЗ.Ключ, ПрефиксТитулаОткуда, ПрефиксТитулаКуда);
				Если Перезаписывать = Истина Или КонтейнерТитулаКуда.Свойство(ИмяРеквизитаКуда) = Ложь Тогда
					КонтейнерТитулаКуда.Вставить(ИмяРеквизитаКуда, КиЗ.Значение);	
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
		ВерсииКуда[НомерВерсии] = КонтейнерТитулаКуда;
		//@skip-check wrong-type-expression
		СтруктураЗаполнения.Вставить(ПрефиксТитулаКуда, ВерсииКуда);
		Форма.СтруктураРеквизитов = ОбменСГИСЭПДКлиентСервер.СкопироватьВФиксированноеЗначенияРекурсивно(СтруктураЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

// См. процедуру УправлениеПечатьюПереопределяемый.ПриОпределенииОбъектовСКомандамиПечати.
// 
// Параметры:
//  СписокОбъектов - Массив из ОбъектМетаданных - Список объектов
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	СписокОбъектов.Добавить(Документы.ЭлектроннаяТранспортнаяНакладная);
	СписокОбъектов.Добавить(Документы.ЭлектронныйПутевойЛист);
	
КонецПроцедуры

// При определении объектов с командами создания на основании.
// 
// Параметры:
//  СписокОбъектов - Массив из ОбъектМетаданных - Список объектов
Процедура ПриОпределенииОбъектовСКомандамиСозданияНаОсновании(СписокОбъектов) Экспорт
	
	СписокОбъектов.Добавить(Метаданные.Документы.ЭлектронныйЗаказЗаявка);
	
КонецПроцедуры

// См. ЭлектронноеВзаимодействие.ПриДобавленииОбработчиковОбновления.
// 
// Параметры:
//  Обработчики - ТаблицаЗначений - Обработчики:
// * НачальноеЗаполнение - Булево -
// * Версия - Строка -
// * Процедура - Строка -
// * РежимВыполнения - Строка -
// * ОбщиеДанные - Булево -
// * УправлениеОбработчиками - Булево -
// * Комментарий - Строка -
// * Идентификатор - УникальныйИдентификатор -
// * БлокируемыеОбъекты - Строка -
// * НовыеОбъекты - Строка -
// * ПроцедураПроверки - Строка -
// * ПроцедураЗаполненияДанныхОбновления - Строка -
// * ЗапускатьТолькоВГлавномУзле - Булево -
// * ЗапускатьИВПодчиненномУзлеРИБСФильтрами - Булево -
// * ЧитаемыеОбъекты - Строка -
// * ИзменяемыеОбъекты - Строка -
// * ПриоритетыВыполнения - ТаблицаЗначений -
// * Многопоточный - Булево -
// * Порядок - ПеречислениеСсылка.ПорядокОбработчиковОбновления -
// * НеВыполнятьПриПереходеСДругойПрограммы - Булево -
// * ВыполнятьВГруппеОбязательных - Булево -
// * Приоритет - Число -
// * МонопольныйРежим - Неопределено, Булево -
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.9.10.3";
	Обработчик.Процедура = "Справочники.ХранимыеДанныеЭПД.СлияниеЭлементовВРазрезеТиповДокументовЭПД";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("bf6e32f9-688b-4c8d-8346-a37e07795d8a");
	Обработчик.Комментарий = НСтр("ru = 'Обмен с ГИС ЭПД. Слияние элементов в разрезе типов документов ЭПД.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Справочники.ХранимыеДанныеЭПД.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.ХранимыеДанныеЭПД.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Справочники.ХранимыеДанныеЭПД.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
КонецПроцедуры

// Получить адреса доставки.
// 
// Параметры:
//  ЗначениеОтбора - ОпределяемыйТип.УчастникЭДО_ЭПД - Значение отбора
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение - представление и структура данных адреса
Функция ПолучитьАдресаДоставки(ЗначениеОтбора) Экспорт
	
	СохраненныеАдреса = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УчастникЭДО", ЗначениеОтбора);
	Запрос.Текст = "ВЫБРАТЬ
	|	АдресаДоставкиЭПД.Представление,
	|	АдресаДоставкиЭПД.Адрес,
	|	АдресаДоставкиЭПД.ПредставлениеАдреса,
	|	АдресаДоставкиЭПД.Основной КАК Основной
	|ИЗ
	|	РегистрСведений.АдресаДоставкиЭПД КАК АдресаДоставкиЭПД
	|ГДЕ
	|	АдресаДоставкиЭПД.УчастникЭДО = &УчастникЭДО
	|
	|УПОРЯДОЧИТЬ ПО
	|	Основной";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("Представление", Выборка.Представление);
		СтруктураДанных.Вставить("Адрес", Выборка.Адрес);
		СтруктураДанных.Вставить("ПредставлениеАдреса", Выборка.ПредставлениеАдреса);
		СтруктураДанных.Вставить("Основной", Выборка.Основной);
		СохраненныеАдреса.Вставить(СтруктураДанных.ПредставлениеАдреса, СтруктураДанных);	
	КонецЦикла;
	
	Если ТипЗнч(ЗначениеОтбора) = Тип("СправочникСсылка.Организации") Тогда
		ВидАдреса = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;	
		ПредставленияВыбора = НСтр("ru='<Фактический адрес организации>'");
	Иначе
		ВидАдреса = ОбменСГИСЭПДПереопределяемый.ВидФактическийАдресКонтрагента();	
		ПредставленияВыбора = НСтр("ru='<Фактический адрес контрагента>'");
	КонецЕсли;
	
	ТаблицаКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ЗначениеОтбора, 
													ВидАдреса, ТекущаяДатаСеанса(), Ложь);
	Если ТаблицаКИ.Количество() > 0 Тогда
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("Представление", ПредставленияВыбора);
		СтруктураДанных.Вставить("Адрес", ТаблицаКИ[0].Значение);
		СтруктураДанных.Вставить("ПредставлениеАдреса", ТаблицаКИ[0].Представление);
		СтруктураДанных.Вставить("Основной", ?(СохраненныеАдреса.Количество() = 0, Истина, Ложь));
		СохраненныеАдреса.Вставить(СтруктураДанных.ПредставлениеАдреса, СтруктураДанных);
	КонецЕсли;
	 
	Возврат СохраненныеАдреса;
	
КонецФункции

Функция ОписаниеТипаДопРеквизита(Знач ТипСтрокой = Неопределено, Знач Квалификаторы = Неопределено) Экспорт
	
	КвалификаторыЧислаДопРеквизитов = Новый КвалификаторыЧисла(15, 3);
	КвалификаторыСтрокиДопРеквизитов = Новый КвалификаторыСтроки(2000);
	КвалификаторыДатыДопРеквизитов = Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя);
	
	Если ТипСтрокой = Неопределено Или ТипСтрокой = "" Тогда
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("Строка"));
		МассивТипов.Добавить(Тип("Число"));
		МассивТипов.Добавить(Тип("Булево"));
		МассивТипов.Добавить(Тип("Дата")); 
		
		Результат = Новый ОписаниеТипов(МассивТипов, 
			КвалификаторыЧислаДопРеквизитов,
			КвалификаторыСтрокиДопРеквизитов,
			КвалификаторыДатыДопРеквизитов);
	Иначе
		Квалификатор1 = Неопределено;
		Квалификатор2 = Неопределено;
		Если ТипЗнч(Квалификаторы) = Тип("Строка") Тогда
			Квалификаторы = СтрРазделить(Квалификаторы, ",", Ложь);	
		КонецЕсли;
		Если ТипЗнч(Квалификаторы) = Тип("Массив") Тогда
			Если Квалификаторы.Количество() > 0 И ЗначениеЗаполнено(Квалификаторы[0]) Тогда
				Квалификатор1 = Число(Квалификаторы[0]);
			КонецЕсли;
			Если Квалификаторы.Количество() > 1 И ЗначениеЗаполнено(Квалификаторы[1]) Тогда
				Квалификатор2 = Число(Квалификаторы[1]);
			КонецЕсли;
		КонецЕсли;
		Если ТипСтрокой = "Строка" Или СтрНачинаетсяС(ТипСтрокой, "Перечислен") Тогда
			Результат = Новый ОписаниеТипов("Строка", 
				,
				Новый КвалификаторыСтроки(?(Квалификатор1 = Неопределено, 
					КвалификаторыСтрокиДопРеквизитов.Длина, 
					Квалификатор1)));
		ИначеЕсли ТипСтрокой = "Число" Тогда	
			Результат = Новый ОписаниеТипов("Число", 
				Новый КвалификаторыЧисла(?(Квалификатор1 = Неопределено, 
							КвалификаторыЧислаДопРеквизитов.Разрядность, 
							Квалификатор1), 
						?(Квалификатор2 = Неопределено, 
							КвалификаторыЧислаДопРеквизитов.РазрядностьДробнойЧасти, 
							Квалификатор2)));	
		ИначеЕсли ТипСтрокой = "Булево" Тогда
			Результат = Новый ОписаниеТипов("Булево");
		ИначеЕсли ТипСтрокой = "ДатаВремя" Тогда
			Результат = Новый ОписаниеТипов("Дата", 
				,
				,
				Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
		ИначеЕсли ТипСтрокой = "Дата" Тогда
			Результат = Новый ОписаниеТипов("Дата", 
				,
				,
				Новый КвалификаторыДаты(ЧастиДаты.Дата));
		ИначеЕсли ТипСтрокой = "Время" Тогда
			Результат = Новый ОписаниеТипов("Дата", 
				,
				,
				Новый КвалификаторыДаты(ЧастиДаты.Время));
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ПриСозданииНаСервереПодчиненнойФормы(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	ГруппаДанных = Неопределено;
	Форма.Параметры.Свойство("ГруппаДанных", ГруппаДанных); 
	
	ОписаниеРеквизитовФормы = ОписаниеРеквизитовФормы(Форма, ГруппаДанных);
	
	МассивРеквизитовДобавления = Новый Массив;
	МассивРеквизитовДобавления.Добавить(Новый РеквизитФормы("ОписаниеРеквизитовФормы", Новый ОписаниеТипов()));
	
	НужноДобавитьРеквизитыМП = Ложь;
	Если Форма.Параметры.Свойство("ФормаБезОбработки") = Ложь Тогда
		ОрганизацияОписаниеТипов = Метаданные.ОпределяемыеТипы.Организация.Тип;
		КонтрагентОписаниеТипов = Метаданные.ОпределяемыеТипы.КонтрагентБЭД.Тип;
			
		МассивРеквизитовДобавления.Добавить(Новый РеквизитФормы("ПрефиксТитула", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(50)) ));
		МассивРеквизитовДобавления.Добавить(Новый РеквизитФормы("ИдентификаторСтрокиРодителя", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(40)) ));
		МассивРеквизитовДобавления.Добавить(Новый РеквизитФормы("ЗапретитьИзменение", Новый ОписаниеТипов("Булево")));
		
		МассивРеквизитовДобавления.Добавить(Новый РеквизитФормы("ГруппаДанных", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(250)) ));
		МассивРеквизитовДобавления.Добавить(Новый РеквизитФормы("Организация", ОрганизацияОписаниеТипов ));
		МассивРеквизитовДобавления.Добавить(Новый РеквизитФормы("Контрагент", КонтрагентОписаниеТипов ));
		МассивРеквизитовДобавления.Добавить(Новый РеквизитФормы("ДополнительныйОтбор", Новый ОписаниеТипов("Строка") ));
		МассивРеквизитовДобавления.Добавить(Новый РеквизитФормы("Ключ", Новый ОписаниеТипов("СправочникСсылка.ХранимыеДанныеЭПД") ));
		МассивРеквизитовДобавления.Добавить(Новый РеквизитФормы("ПереходыПоОшибкам", Новый ОписаниеТипов() ));
		МассивРеквизитовДобавления.Добавить(Новый РеквизитФормы("ТекущийУровеньФормы", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(2, 0, ДопустимыйЗнак.Неотрицательный)) ));
		
		Если ЭтоОсновнаяФорма(Форма) И ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД.СервисВзаимодействияМПЭПД") Тогда
			ТипДокументаСтрока = ОбменСГИСЭПДКлиентСервер.ТипДокументаПоИмениФормы(Форма.ИмяФормы);
			МодульСервисВзаимодействияМПЭПДКлиентСервер = ОбщегоНазначения.ОбщийМодуль("СервисВзаимодействияМПЭПДКлиентСервер");
			ТипДокументаМП = МодульСервисВзаимодействияМПЭПДКлиентСервер.ТипДокументаМП(ТипДокументаСтрока);
			Если ЗначениеЗаполнено(ТипДокументаМП) Тогда
				МассивРеквизитовДобавления.Добавить(Новый РеквизитФормы("МПЕстьРазличия", Новый ОписаниеТипов("Булево")));
				МассивРеквизитовДобавления.Добавить(Новый РеквизитФормы("МПИдентификатор", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(40)) ));	
				МассивРеквизитовДобавления.Добавить(Новый РеквизитФормы("МПИдентификаторЗаписи", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(40)) ));
				МассивРеквизитовДобавления.Добавить(Новый РеквизитФормы("МПНаименование", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(100)) ));
				МассивРеквизитовДобавления.Добавить(Новый РеквизитФормы("МППривязки", Новый ОписаниеТипов()) );
				МассивРеквизитовДобавления.Добавить(Новый РеквизитФормы("МПТелефон", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(20)) ));
				МассивРеквизитовДобавления.Добавить(Новый РеквизитФормы("МПФото", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки()) ));
				
				НужноДобавитьРеквизитыМП = Истина;
			КонецЕсли;
		КонецЕсли;
		
	
		ОписаниеТипаДопРеквизитов = ОписаниеТипаДопРеквизита();
	
		Для Каждого ОписаниеГруппы Из ОписаниеРеквизитовФормы.ОписаниеДопРеквизитов Цикл
			ИмяИнформационныеПоля = ОписаниеГруппы.Ключ + "ИнформационныеПоля";
			ИмяДополнительнаяИнформация = ОписаниеГруппы.Ключ + "ДополнительнаяИнформация";
			
			МассивРеквизитовДобавления.Добавить(Новый РеквизитФормы(ИмяИнформационныеПоля,
				Новый ОписаниеТипов("ТаблицаЗначений")) );
				
			МассивРеквизитовДобавления.Добавить(Новый РеквизитФормы("ИдентификаторФайла",
				Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(36)),
				ИмяИнформационныеПоля) );
			МассивРеквизитовДобавления.Добавить(Новый РеквизитФормы("ИдентификаторСтроки", 
				Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(36)), 
				ИмяИнформационныеПоля) );
				
			ИменаКолонокРодителя = "";
			Если ОписаниеРеквизитовФормы.ОписаниеТаблицФормы.Свойство(ОписаниеГруппы.Ключ, ИменаКолонокРодителя) Тогда
				// Если это список, у него нет ИдентификаторСтроки. Но он нужен, если мы создаем подчиненные таблицы доп. реквизитов.
				Если ОписаниеРеквизитовФормы.ТаблицыСписки.Найти(ОписаниеГруппы.Ключ) <> Неопределено Тогда
					МассивРеквизитовДобавления.Добавить(Новый РеквизитФормы("ИдентификаторСтроки", 
						Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(36)), 
						ОписаниеГруппы.Ключ) );	
				КонецЕсли;

				МассивРеквизитовДобавления.Добавить(Новый РеквизитФормы("ИдентификаторСтрокиРодителя", 
					Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(36)), 
					ИмяИнформационныеПоля) );	
					
				Для Каждого СтруктураДопРеквизита Из ОписаниеГруппы.Значение Цикл
					ОписаниеТипаКолонки = ОписаниеТипаДопРеквизита(СтруктураДопРеквизита.ТипДанных, СтруктураДопРеквизита.Квалификаторы);				
					МассивРеквизитовДобавления.Добавить(Новый РеквизитФормы("ДополнительнаяИнформация" + "_" + СтруктураДопРеквизита.ИдентификаторИнформации, 
						ОписаниеТипаКолонки, 
						ОписаниеГруппы.Ключ) );
				КонецЦикла;
			КонецЕсли;
			
			МассивРеквизитовДобавления.Добавить(Новый РеквизитФормы(ИмяДополнительнаяИнформация,
				Новый ОписаниеТипов("ТаблицаЗначений")) );	
				
			МассивРеквизитовДобавления.Добавить(Новый РеквизитФормы("ИдентификаторСтрокиРодителя", 
					Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(36)), 
					ИмяДополнительнаяИнформация) );
			МассивРеквизитовДобавления.Добавить(Новый РеквизитФормы("ИдентификаторИнформации", 
					Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(50)), 
					ИмяДополнительнаяИнформация) );
			МассивРеквизитовДобавления.Добавить(Новый РеквизитФормы("ТипДанных", 
					Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(20)), 
					ИмяДополнительнаяИнформация) );
			МассивРеквизитовДобавления.Добавить(Новый РеквизитФормы("Заголовок", 
					Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(150)), 
					ИмяДополнительнаяИнформация) );
			МассивРеквизитовДобавления.Добавить(Новый РеквизитФормы("Квалификаторы", 
					Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(10)), 
					ИмяДополнительнаяИнформация) );
			МассивРеквизитовДобавления.Добавить(Новый РеквизитФормы("Перечисления", 
					Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(250)), 
					ИмяДополнительнаяИнформация) );
			МассивРеквизитовДобавления.Добавить(Новый РеквизитФормы("Обязательный", 
					Новый ОписаниеТипов("Булево"), 
					ИмяДополнительнаяИнформация) );
			МассивРеквизитовДобавления.Добавить(Новый РеквизитФормы("Значение", 
					ОписаниеТипаДопРеквизитов, 
					ИмяДополнительнаяИнформация) );		
		КонецЦикла;
	КонецЕсли;
	
	Форма.ИзменитьРеквизиты(МассивРеквизитовДобавления);
	
	Форма.ОписаниеРеквизитовФормы = ОписаниеРеквизитовФормы;
	
	Если Форма.Параметры.Свойство("ПереходыПоОшибкам") Тогда
		Форма.ПереходыПоОшибкам = Форма.Параметры.ПереходыПоОшибкам;
	КонецЕсли;
	
	Если Форма.Параметры.Свойство("ТекущийУровеньФормы") Тогда
		Форма.ТекущийУровеньФормы = Форма.Параметры.ТекущийУровеньФормы;
	КонецЕсли;
	
	Если НужноДобавитьРеквизитыМП = Истина Тогда
		ДобавитьРеквизитыМобильногоПриложения(Форма);	
	КонецЕсли;
	
	Если Форма.Параметры.Свойство("ФормаБезОбработки") = Ложь Тогда
		ОбработатьПараметры(Форма);
		
		Если Не ЭтоОсновнаяФорма(Форма) Тогда
			ПодготовитьФормуДляОтметкиОбязательныхПолей(Форма);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Представление хранимых данных ЭПД (наименование для элемента справочника).
// 
// Параметры:
//  МассивРеквизитов - Массив из Строка - Массив реквизитов
//  ИмяОбъекта - Строка - Имя объекта
//  ГруппаДанных - Строка - Группа данных
// 
// Возвращаемое значение:
//  Строка - Представление хранимых данных ЭПД
Функция ПредставлениеХранимыхДанныхЭПД(МассивРеквизитов, ИмяОбъекта, ГруппаДанных) Экспорт
	
	МассивПодстрокНаименования = Новый Массив;
	
	ОписаниеГруппыДанных = ОбменСГИСЭПДКлиентСервер.ОписаниеГруппыДанных(ГруппаДанных, ИмяОбъекта);
	
	Для Каждого СтруктураРеквизита Из МассивРеквизитов Цикл			
		Если ЗначениеЗаполнено(СтруктураРеквизита.Значение) Тогда
			ЗначениеСтрокой = ПреобразованиеЗначенияРеквизитаВСтроку(СтруктураРеквизита);
			ПорядокРеквизита = ПорядокРеквизитаВПредставлении(ОписаниеГруппыДанных.Тип, СтруктураРеквизита.Имя);	
			Если ЗначениеЗаполнено(ПорядокРеквизита) Тогда
				ОформлениеРеквизита = ОформлениеРеквизитаВНаименованииХранимыхДанныхЭПД(СтруктураРеквизита);
				Если ПорядокРеквизита <= МассивПодстрокНаименования.Количество() Тогда
					МассивПодстрокНаименования[ПорядокРеквизита - 1] = ОформлениеРеквизита.До + ЗначениеСтрокой + ОформлениеРеквизита.После;
				Иначе	 
					МассивПодстрокНаименования.Вставить(ПорядокРеквизита - 1, ОформлениеРеквизита.До + ЗначениеСтрокой + ОформлениеРеквизита.После);
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	КоличествоЭлементовМассива = МассивПодстрокНаименования.Количество();
	Для ИтераторЦикла = 1 По КоличествоЭлементовМассива Цикл
		Если ЗначениеЗаполнено(МассивПодстрокНаименования[КоличествоЭлементовМассива - ИтераторЦикла]) = Ложь Тогда
			МассивПодстрокНаименования.Удалить(КоличествоЭлементовМассива - ИтераторЦикла);	
		КонецЕсли;
	КонецЦикла;
	НаименованиеСтрока = СтрСоединить(МассивПодстрокНаименования, " ");
	
	Возврат ?(ЗначениеЗаполнено(НаименованиеСтрока), НаименованиеСтрока, "<>");
	
КонецФункции

// Описание реквизитов формы для работы с механизмом подчиненных форм ввода.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма
//  ГруппаДанных - Строка - название группы данных формы (по макету соответствий имен реквизитов)
// 
// Возвращаемое значение:
//  ФиксированнаяСтруктура - Описание реквизитов формы:
// * ПараметрыФормы - Строка - имена реквизитов формы
// * ИменаТаблиц - Строка - имена таблиц формы
// * Представления - Структура - имена реквизитов и заголовки
// * ЕстьОбъект - Булево - имеется реквизит формы Объект
// * ПрефиксТитула - Строка - Префикс титула
// * ОписаниеТаблицФормы - Структура - имена таблиц и массив колонок
// * ХранимыеДанныеФормы - Массив из Строка - имена реквизитов хранимых данных
// * ПодчиненныеТаблицы - Структура - имя родительской таблицы и массив подчиненных
Функция ОписаниеРеквизитовФормы(Форма, ГруппаДанных = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ПараметрыФормы", "");
	Результат.Вставить("ИменаТаблиц", "");
	Результат.Вставить("ТаблицыСписки", Новый Массив);
	Результат.Вставить("Представления", Новый Структура);
	Результат.Вставить("ЕстьОбъект", Ложь);
	Результат.Вставить("ПрефиксТитула", ПрефиксТитулаФормы(Форма));
	Результат.Вставить("НеСтроковыеТипы", Новый Структура);
	Результат.Вставить("ОписаниеТаблицФормы", Новый Структура);
	Результат.Вставить("ХранимыеДанныеФормы", Новый Массив);
	Результат.Вставить("ПодчиненныеТаблицы", Новый Структура);
	Результат.Вставить("НеСтроковыеТипы", Новый Структура);
	
	МенеджерОбъекта = МенеджерОбъектаФормы(Форма);
	ПрефиксТитула = ПрефиксТитулаФормы(Форма);
	Если ЗначениеЗаполнено(ПрефиксТитула) = Ложь
	И ГруппаДанных <> Неопределено Тогда
		МассивЧастейИмениФормы = СтрРазделить(Форма.ИмяФормы, ".");
		ИмяОбъекта = МассивЧастейИмениФормы[0] + "." + МассивЧастейИмениФормы[1];
		ПрефиксТитула = ОбменСГИСЭПДКлиентСервер.ПрефиксТитулаРеквизита(ГруппаДанных, ИмяОбъекта);	
	КонецЕсли;
	
	МакетСоответствиеИмен = МенеджерОбъекта.ПолучитьМакет("СоответствиеИменРеквизитов");
	ОбластьКолонкаИмен = МакетСоответствиеИмен.Область(,1,МакетСоответствиеИмен.ВысотаТаблицы,1);
	ОбластьКолонкаУзлов = МакетСоответствиеИмен.Область(,2,МакетСоответствиеИмен.ВысотаТаблицы,2);
	
	Для Каждого РеквизитФормы Из Форма.ПолучитьРеквизиты() Цикл 
		Если РеквизитФормы.ТипЗначения.СодержитТип(Тип("ТаблицаЗначений")) Тогда
			Результат.ИменаТаблиц = Результат.ИменаТаблиц + ?(Результат.ИменаТаблиц = "", "", ",") + РеквизитФормы.Имя;	
			КолонкиТаблицы = Форма.ПолучитьРеквизиты(РеквизитФормы.Имя);
			КолонкиСтрокой = "";
			ЕстьИдентификаторСтроки = Ложь;
			Для Каждого Колонка Из КолонкиТаблицы Цикл
				КолонкиСтрокой = КолонкиСтрокой + ?(КолонкиСтрокой = "", "", ",") + Колонка.Имя;
				Если Колонка.Имя = "ИдентификаторСтроки" Тогда
					ЕстьИдентификаторСтроки = Истина;
				КонецЕсли;	
			КонецЦикла;

			Результат.ОписаниеТаблицФормы.Вставить(РеквизитФормы.Имя, КолонкиСтрокой);
			
			Если ЕстьИдентификаторСтроки = Ложь Тогда
				Результат.ТаблицыСписки.Добавить(РеквизитФормы.Имя);
			КонецЕсли;
		Иначе
			Если РеквизитФормы.Имя = "Объект" Тогда
				Результат.ЕстьОбъект = Истина;
				ОписаниеТаблицОбъекта = Новый Структура;
				РеквизитыОбъекта = "";
				ОбъектФормы = Форма.РеквизитФормыВЗначение("Объект");
				Для Каждого Реквизит Из ОбъектФормы.Метаданные().Реквизиты Цикл
					РеквизитыОбъекта = РеквизитыОбъекта + ?(РеквизитыОбъекта = "", "", ",") + Реквизит.Имя;	
					Если СтрНачинаетсяС(Реквизит.Имя, "ХранимыеДанные") Тогда
						СтруктураПоляХД = Новый Структура;
						СтруктураПоляХД.Вставить("Реквизит", Реквизит.Имя);
						СтруктураПоляХД.Вставить("ЭтоРеквизитОбъекта", Истина);
						Результат.ХранимыеДанныеФормы.Добавить(СтруктураПоляХД);
					КонецЕсли;
					Результат.Представления.Вставить(Реквизит.Имя, Реквизит.Синоним);
				КонецЦикла;
				Результат.Вставить("РеквизитыОбъекта", РеквизитыОбъекта);
				ИменаТаблицОбъекта = "";
				Для Каждого ТЧ Из ОбъектФормы.Метаданные().ТабличныеЧасти Цикл
					ИменаТаблицОбъекта = ИменаТаблицОбъекта + ?(ИменаТаблицОбъекта = "", "", ",") + ТЧ.Имя;
					КолонкиСтрокой = "";
					Для Каждого Колонка Из ТЧ.Реквизиты Цикл
						КолонкиСтрокой = КолонкиСтрокой + ?(КолонкиСтрокой = "", "", ",") + Колонка.Имя;
						Если СтрНачинаетсяС(Колонка.Имя, "ХранимыеДанные") Тогда
							СтруктураПоляХД = Новый Структура;
							СтруктураПоляХД.Вставить("Реквизит", Колонка.Имя);
							СтруктураПоляХД.Вставить("ЭтоРеквизитОбъекта", Истина);
							СтруктураПоляХД.Вставить("ТабличнаяЧасть", ТЧ.Имя);
							Результат.ХранимыеДанныеФормы.Добавить(СтруктураПоляХД);
						КонецЕсли;
						Результат.Представления.Вставить(ТЧ.Имя + Колонка.Имя, Колонка.Синоним);
					КонецЦикла;
					ОписаниеТаблицОбъекта.Вставить(ТЧ.Имя, КолонкиСтрокой);
				КонецЦикла;
				Результат.Вставить("ИменаТаблицОбъекта", ИменаТаблицОбъекта);
				Результат.Вставить("ОписаниеТаблицОбъекта", ОписаниеТаблицОбъекта);
			ИначеЕсли НЕ СтрНачинаетсяС(РеквизитФормы.Имя, "ОбщееПолеВвода") Тогда
				Результат.ПараметрыФормы = Результат.ПараметрыФормы + ?(Результат.ПараметрыФормы = "", "", ",") + РеквизитФормы.Имя;
				Результат.Представления.Вставить(РеквизитФормы.Имя, РеквизитФормы.Заголовок);
				Если СтрНачинаетсяС(РеквизитФормы.Имя, "ХранимыеДанные") Тогда
					СтруктураПоляХД = Новый Структура;
					СтруктураПоляХД.Вставить("Реквизит", РеквизитФормы.Имя);
					СтруктураПоляХД.Вставить("ЭтоРеквизитОбъекта", Ложь);
					Результат.ХранимыеДанныеФормы.Добавить(СтруктураПоляХД);
				КонецЕсли;
				НеСтроковыйТип = "";
				Если РеквизитФормы.ТипЗначения.СодержитТип(Тип("Дата")) Тогда
					НеСтроковыйТип = "Дата";
				ИначеЕсли РеквизитФормы.ТипЗначения.СодержитТип(Тип("Булево")) Тогда
					НеСтроковыйТип = "Булево";
				ИначеЕсли РеквизитФормы.ТипЗначения.СодержитТип(Тип("Число")) Тогда
					НеСтроковыйТип = "Число";
				КонецЕсли;
				Если НеСтроковыйТип <> "" Тогда
					Результат.НеСтроковыеТипы.Вставить(РеквизитФормы.Имя, НеСтроковыйТип);	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого КиЗ Из Результат.ОписаниеТаблицФормы Цикл
		ИмяТаблицыВКонтейнере = КиЗ.Ключ;
		РеквизитФормыБезПрефикса = Ложь;
		Если ЗначениеЗаполнено(ПрефиксТитула) И СтрНачинаетсяС(ИмяТаблицыВКонтейнере, ПрефиксТитула) = Ложь Тогда
			ИмяТаблицыВКонтейнере = ПрефиксТитула + ИмяТаблицыВКонтейнере;
			РеквизитФормыБезПрефикса = Истина;	
		КонецЕсли;	
		
		Если СтрНачинаетсяС(Форма.ИмяФормы, "Документ") Тогда
			ОбластьНайдено = МакетСоответствиеИмен.НайтиТекст(ИмяТаблицыВКонтейнере, , ОбластьКолонкаИмен, Ложь, Истина, Истина, Ложь);
			Если ОбластьНайдено <> Неопределено Тогда
				УзелТаблицыРодителя = МакетСоответствиеИмен.Область(ОбластьНайдено.Верх, 4).Текст;
				Если ЗначениеЗаполнено(УзелТаблицыРодителя) Тогда
					ОбластьРодителяНайдено = МакетСоответствиеИмен.НайтиТекст(УзелТаблицыРодителя, , ОбластьКолонкаУзлов, Ложь, Истина, Истина, Ложь);	
					Если ОбластьРодителяНайдено <> Неопределено Тогда
						ИмяТаблицыРодителя = МакетСоответствиеИмен.Область(ОбластьРодителяНайдено.Верх, 1).Текст;
						Если РеквизитФормыБезПрефикса Тогда
							ИмяТаблицыРодителя = СтрЗаменить(ИмяТаблицыРодителя, ПрефиксТитула, "");	
						КонецЕсли;
						Если Результат.ОписаниеТаблицФормы.Свойство(ИмяТаблицыРодителя) Тогда	
							МассивПодчиненных = Неопределено;
							Если Результат.ПодчиненныеТаблицы.Свойство(ИмяТаблицыРодителя, МассивПодчиненных) = Ложь Тогда
								МассивПодчиненных = Новый Массив;
								Результат.ПодчиненныеТаблицы.Вставить(ИмяТаблицыРодителя, МассивПодчиненных);
							КонецЕсли;
							МассивПодчиненных.Добавить(КиЗ.Ключ);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	 
	ДобавитьОписаниеДополнительныхРеквизитов(Форма, Результат, ГруппаДанных);
	
	//@skip-check constructor-function-return-section
	Возврат ОбменСГИСЭПДКлиентСервер.СкопироватьВФиксированноеЗначенияРекурсивно(Результат);
	
КонецФункции

Процедура ДобавитьОписаниеДополнительныхРеквизитов(Форма, ОписаниеРеквизитовФормы = Неопределено, ГруппаДанных = Неопределено) Экспорт

	НужноПоместитьВФиксированную = Ложь;
	Если ТипЗнч(ОписаниеРеквизитовФормы) = Тип("ФиксированнаяСтруктура") Тогда
		НужноПоместитьВФиксированную = Истина;
		ОписаниеРеквизитовФормыСтруктура = ОбменСГИСЭПДКлиентСервер.СкопироватьИзФиксированногоЗначенияРекурсивно(ОписаниеРеквизитовФормы);
	ИначеЕсли ТипЗнч(ОписаниеРеквизитовФормы) = Тип("Структура") Тогда
		ОписаниеРеквизитовФормыСтруктура = ОписаниеРеквизитовФормы;
	Иначе
		НужноПоместитьВФиксированную = Истина;
		ОписаниеРеквизитовФормыСтруктура = ОбменСГИСЭПДКлиентСервер.СкопироватьИзФиксированногоЗначенияРекурсивно(Форма.ОписаниеРеквизитовФормы);		
	КонецЕсли;	
	
	// Дополнительные реквизиты ЭПД
	ОписаниеДопРеквизитов = Новый Структура;
	
	МассивЧастейИмениФормы = СтрРазделить(Форма.ИмяФормы, ".");
	Если ЗначениеЗаполнено(ГруппаДанных) = Ложь Тогда	
		ГруппаДанных = МассивЧастейИмениФормы[МассивЧастейИмениФормы.ВГраница()];
	КонецЕсли;
	
	ГруппыДанных = Новый Массив;
	Если ГруппаДанных = "ОсновнаяФорма" Тогда
		ИмяОбъектаДляФормы = МассивЧастейИмениФормы[0] + "." + МассивЧастейИмениФормы[1];
		ГруппыДанных = ОбменСГИСЭПДКлиентСервер.ПрефиксыТитуловДокумента(ИмяОбъектаДляФормы);
	Иначе
		ГруппыДанных.Добавить(ГруппаДанных);
		Для Каждого КиЗ Из ОписаниеРеквизитовФормы.ПодчиненныеТаблицы Цикл
			Для Каждого ИмяПодчиненнойТаблицы Из КиЗ.Значение Цикл
				ГруппыДанных.Добавить(ИмяПодчиненнойТаблицы);	
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	ИмяДокумента = МассивЧастейИмениФормы[1];
	Если ИмяДокумента = ТипДокументаТранспортнаяНакладная() Тогда
		ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭТрН;
	ИначеЕсли ИмяДокумента = ТипДокументаЗаказНаряд() Тогда
		ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭЗН;
	ИначеЕсли ИмяДокумента = ТипДокументаСопроводительнаяВедомость() Тогда
		ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭСВ;	
	ИначеЕсли ИмяДокумента = ТипДокументаЗаказЗаявка() Тогда
		ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭЗЗ;
	ИначеЕсли ИмяДокумента = ТипДокументаПутевойЛист() Тогда
		ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭПЛ;
	ИначеЕсли ИмяДокумента = ТипДокументаДоговорФрахтования() Тогда
		ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭДФ;
	КонецЕсли;
	
	ЗапросНастроек = Новый Запрос;
	ЗапросНастроек.УстановитьПараметр("ТипДокумента", ТипДокумента);
	ЗапросНастроек.УстановитьПараметр("ГруппыДанных", ГруппыДанных);
	ЗапросНастроек.Текст = "ВЫБРАТЬ
	|	ТаблицаДанных.ГруппаДанных,
	|	ТаблицаДанных.ИдентификаторИнформации,
	|	ТаблицаДанных.Заголовок,
	|	ТаблицаДанных.ТипДанных,
	|	ТаблицаДанных.Квалификаторы,
	|	ТаблицаДанных.Перечисления,
	|	ТаблицаДанных.Обязательный,
	|	ТаблицаДанных.Значение
	|ПОМЕСТИТЬ ВТ_ТАБЛИЦА
	|ИЗ
	|	&ТаблицаДанных КАК ТаблицаДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ВТ_ТАБЛИЦА.ГруппаДанных, НастройкиДополнительныхРеквизитовЭПД.ГруппаДанных) КАК ГруппаДанных,
	|	ЕСТЬNULL(ВТ_ТАБЛИЦА.ИдентификаторИнформации, НастройкиДополнительныхРеквизитовЭПД.ИдентификаторИнформации) КАК
	|		ИдентификаторИнформации,
	|	ЕСТЬNULL(ВТ_ТАБЛИЦА.Заголовок, НастройкиДополнительныхРеквизитовЭПД.Заголовок) КАК Заголовок,
	|	ЕСТЬNULL(ВТ_ТАБЛИЦА.ТипДанных, НастройкиДополнительныхРеквизитовЭПД.ТипДанных) КАК ТипДанных,
	|	ЕСТЬNULL(ВТ_ТАБЛИЦА.Квалификаторы, НастройкиДополнительныхРеквизитовЭПД.Квалификаторы) КАК Квалификаторы,
	|	ЕСТЬNULL(ВТ_ТАБЛИЦА.Перечисления, НастройкиДополнительныхРеквизитовЭПД.Перечисления) КАК Перечисления,
	|	ЕСТЬNULL(ВТ_ТАБЛИЦА.Обязательный, НастройкиДополнительныхРеквизитовЭПД.Обязательный) КАК Обязательный,
	|	ВТ_ТАБЛИЦА.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.НастройкиДополнительныхРеквизитовЭПД КАК НастройкиДополнительныхРеквизитовЭПД
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ТАБЛИЦА КАК ВТ_ТАБЛИЦА
	|		ПО НастройкиДополнительныхРеквизитовЭПД.ГруппаДанных = ВТ_ТАБЛИЦА.ГруппаДанных
	|		И НастройкиДополнительныхРеквизитовЭПД.ИдентификаторИнформации = ВТ_ТАБЛИЦА.ИдентификаторИнформации
	|ГДЕ
	|	НастройкиДополнительныхРеквизитовЭПД.ТипДокумента = &ТипДокумента
	|	И НастройкиДополнительныхРеквизитовЭПД.ГруппаДанных В (&ГруппыДанных)
	|	И НастройкиДополнительныхРеквизитовЭПД.Контрагент В (&Контрагенты)
	|ИТОГИ
	|ПО
	|	ГруппаДанных,	
	|	ИдентификаторИнформации";

	ПереданныеДопРеквизиты = Новый ТаблицаЗначений;
	ПереданныеДопРеквизиты.Колонки.Добавить("ГруппаДанных", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(80)));
	ПереданныеДопРеквизиты.Колонки.Добавить("ИдентификаторИнформации", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50)));
	ПереданныеДопРеквизиты.Колонки.Добавить("Заголовок", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(150)));
	ПереданныеДопРеквизиты.Колонки.Добавить("ТипДанных", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10)));
	ПереданныеДопРеквизиты.Колонки.Добавить("Квалификаторы", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10)));
	ПереданныеДопРеквизиты.Колонки.Добавить("Перечисления", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(250)));
	ПереданныеДопРеквизиты.Колонки.Добавить("Обязательный", Новый ОписаниеТипов("Булево"));
	ПереданныеДопРеквизиты.Колонки.Добавить("Значение", ОписаниеТипаДопРеквизита());
	Если Форма.Параметры.Свойство("ДанныеЗаполненияТаблицФормы") Тогда
		Для Каждого КиЗ Из Форма.Параметры.ДанныеЗаполненияТаблицФормы Цикл
			Если СтрЗаканчиваетсяНа(КиЗ.Ключ, "ДополнительнаяИнформация") Тогда
				Для Каждого СтруктураСтроки Из КиЗ.Значение Цикл
					НоваяСтрока = ПереданныеДопРеквизиты.Добавить();	
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураСтроки);
					НоваяСтрока.ГруппаДанных = СтрЗаменить(КиЗ.Ключ, "ДополнительнаяИнформация", "");
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СписокКонтрагентов = Неопределено;
	Форма.Параметры.Свойство("КонтрагентыДокумента", СписокКонтрагентов);
	Если СписокКонтрагентов = Неопределено Тогда
		СписокКонтрагентов = Новый СписокЗначений;
		Если ОписаниеРеквизитовФормыСтруктура.ЕстьОбъект Тогда
			КонтейнерРеквизитов = Форма.Объект;
		Иначе
			КонтейнерРеквизитов = Форма;	
		КонецЕсли;
		СписокКонтрагентов = ОбменСГИСЭПДКлиентСервер.ПолучитьКонтрагентовДляФормы(КонтейнерРеквизитов, Форма);
		Если СписокКонтрагентов <> Неопределено Тогда
			//@skip-check wrong-type-expression
			ОписаниеРеквизитовФормыСтруктура.Вставить("КонтрагентыДокумента", СписокКонтрагентов);
		Иначе
			СписокКонтрагентов = Новый СписокЗначений;
		КонецЕсли;
	КонецЕсли;
	СписокКонтрагентов.Добавить(Метаданные.ОпределяемыеТипы.КонтрагентБЭД.Тип.ПривестиЗначение());
	
	ЗапросНастроек.УстановитьПараметр("Контрагенты", СписокКонтрагентов);
	ЗапросНастроек.УстановитьПараметр("ТаблицаДанных", ПереданныеДопРеквизиты);
	РезультатЗапроса = ЗапросНастроек.Выполнить();
	
	Если ОписаниеРеквизитовФормыСтруктура.Свойство("ОписаниеДопРеквизитов") Тогда
		//@skip-check wrong-type-expression
		ОписаниеРеквизитовФормыСтруктура.Вставить("ДопРеквизитыУдалить", Новый Структура);	
		Для Каждого КиЗ Из ОписаниеРеквизитовФормыСтруктура.ОписаниеДопРеквизитов Цикл
			Если ГруппаДанных = "ОсновнаяФорма"
				И ГруппыДанных.Найти(КиЗ.Ключ) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СтруктураКУдалению = Новый Структура;
			Для Каждого СтруктураРеквизита Из КиЗ.Значение Цикл
				СтруктураКУдалению.Вставить(СтруктураРеквизита.ИдентификаторИнформации);	
			КонецЦикла;
			ОписаниеРеквизитовФормыСтруктура.ДопРеквизитыУдалить.Вставить(КиЗ.Ключ, СтруктураКУдалению);	
		КонецЦикла;	
	КонецЕсли;
	
	Если РезультатЗапроса.Пустой() = Ложь Тогда
		ВыборкаГруппаДанных = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаГруппаДанных.Следующий() Цикл
			Если ЗначениеЗаполнено(ВыборкаГруппаДанных.ГруппаДанных) = Ложь Тогда
				Продолжить;
			КонецЕсли;
			
			КолонкиТаблицыРодителя = Неопределено;
			Если ОписаниеРеквизитовФормыСтруктура.ОписаниеТаблицФормы.Свойство(ВыборкаГруппаДанных.ГруппаДанных, КолонкиТаблицыРодителя) Тогда
				Если ОписаниеРеквизитовФормыСтруктура.ТаблицыСписки.Найти(ВыборкаГруппаДанных.ГруппаДанных) <> Неопределено Тогда	
					КолонкиТаблицыРодителя = КолонкиТаблицыРодителя + ",ИдентификаторСтроки";
				КонецЕсли;
			КонецЕсли;
			
			СтруктураКУдалению = Неопределено;
			Если ОписаниеРеквизитовФормыСтруктура.Свойство("ДопРеквизитыУдалить") Тогда
				ОписаниеРеквизитовФормыСтруктура.ДопРеквизитыУдалить.Свойство(ВыборкаГруппаДанных.ГруппаДанных, СтруктураКУдалению);
			КонецЕсли;
			
			ИмяИнфПоля = ВыборкаГруппаДанных.ГруппаДанных + "ИнформационныеПоля";
			ОписаниеРеквизитовФормыСтруктура.ИменаТаблиц = ОписаниеРеквизитовФормыСтруктура.ИменаТаблиц + "," + ИмяИнфПоля;
			ОписаниеРеквизитовФормыСтруктура.ОписаниеТаблицФормы.Вставить(ИмяИнфПоля, "ИдентификаторСтроки,ИдентификаторСтрокиРодителя,ИдентификаторФайла");
			
			ИмяДопИнфо = ВыборкаГруппаДанных.ГруппаДанных + "ДополнительнаяИнформация";
			ОписаниеРеквизитовФормыСтруктура.ИменаТаблиц = ОписаниеРеквизитовФормыСтруктура.ИменаТаблиц + "," + ИмяДопИнфо;
			ОписаниеРеквизитовФормыСтруктура.ОписаниеТаблицФормы.Вставить(ИмяДопИнфо, "ИдентификаторСтрокиРодителя,ИдентификаторИнформации,ТипДанных,Квалификаторы,Перечисления,Обязательный,Заголовок,Значение");
			
			ПодчинениеДопИнфо = Неопределено;
			Если ОписаниеРеквизитовФормыСтруктура.ПодчиненныеТаблицы.Свойство(ИмяИнфПоля, ПодчинениеДопИнфо) = Ложь Тогда
				ПодчинениеДопИнфо = Новый Массив;
			КонецЕсли;
			Если ПодчинениеДопИнфо.Найти(ИмяДопИнфо) = Неопределено Тогда
				ПодчинениеДопИнфо.Добавить(ИмяДопИнфо);
			КонецЕсли;
			ОписаниеРеквизитовФормыСтруктура.ПодчиненныеТаблицы.Вставить(ИмяИнфПоля, ПодчинениеДопИнфо);
			Если ОписаниеРеквизитовФормыСтруктура.ОписаниеТаблицФормы.Свойство(ВыборкаГруппаДанных.ГруппаДанных) Тогда		
				ПодчинениеИнфПоля = Неопределено;
				Если ОписаниеРеквизитовФормыСтруктура.ПодчиненныеТаблицы.Свойство(ВыборкаГруппаДанных.ГруппаДанных, ПодчинениеИнфПоля) = Ложь Тогда
					ПодчинениеИнфПоля = Новый Массив;
				КонецЕсли;
				Если ПодчинениеИнфПоля.Найти(ИмяИнфПоля) = Неопределено Тогда
					ПодчинениеИнфПоля.Добавить(ИмяИнфПоля);
				КонецЕсли;
				ОписаниеРеквизитовФормыСтруктура.ПодчиненныеТаблицы.Вставить(ВыборкаГруппаДанных.ГруппаДанных, ПодчинениеИнфПоля);
			КонецЕсли;
			
			МассивДопРеквизитов = Новый Массив;	
			ВыборкаИдентификаторИнформации = ВыборкаГруппаДанных.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаИдентификаторИнформации.Следующий() Цикл
				Если ЗначениеЗаполнено(ВыборкаИдентификаторИнформации.ИдентификаторИнформации) = Ложь Тогда
					Продолжить;
				КонецЕсли;
				Выборка = ВыборкаИдентификаторИнформации.Выбрать();
				Пока Выборка.Следующий() Цикл			
					Если КолонкиТаблицыРодителя <> Неопределено Тогда
						КолонкиТаблицыРодителя = КолонкиТаблицыРодителя + "," + "ДополнительнаяИнформация_" + Выборка.ИдентификаторИнформации;
					КонецЕсли;
							
					Заголовок = ?(ЗначениеЗаполнено(Выборка.Заголовок), Выборка.Заголовок, РазделитьСтрокуПробелами(Выборка.ИдентификаторИнформации));
						
					СтруктураРеквизита = Новый Структура;
					СтруктураРеквизита.Вставить("ИдентификаторИнформации", Выборка.ИдентификаторИнформации);
					СтруктураРеквизита.Вставить("Заголовок", Заголовок);
					СтруктураРеквизита.Вставить("ТипДанных", Выборка.ТипДанных);
					СтруктураРеквизита.Вставить("Квалификаторы", Выборка.Квалификаторы);
					СтруктураРеквизита.Вставить("Перечисления", Выборка.Перечисления);
					СтруктураРеквизита.Вставить("Обязательный", Выборка.Обязательный);
					СтруктураРеквизита.Вставить("Значение", Выборка.Значение);
					
					МассивДопРеквизитов.Добавить(СтруктураРеквизита);
					
					Если СтруктураКУдалению <> Неопределено
						И СтруктураКУдалению.Свойство(Выборка.ИдентификаторИнформации) Тогда
						СтруктураКУдалению.Удалить(Выборка.ИдентификаторИнформации);	
					КонецЕсли;
					// Требуется только одно описание данных
					Прервать;
				КонецЦикла;	
			КонецЦикла;

			ОписаниеДопРеквизитов.Вставить(ВыборкаГруппаДанных.ГруппаДанных, МассивДопРеквизитов);
			Если СтруктураКУдалению <> Неопределено И СтруктураКУдалению.Количество() = 0 Тогда
				ОписаниеРеквизитовФормыСтруктура.ДопРеквизитыУдалить.Удалить(ВыборкаГруппаДанных.ГруппаДанных);	
			КонецЕсли;
			
			Если КолонкиТаблицыРодителя <> Неопределено Тогда
				ОписаниеРеквизитовФормыСтруктура.ОписаниеТаблицФормы.Вставить(ВыборкаГруппаДанных.ГруппаДанных, КолонкиТаблицыРодителя);
			КонецЕсли;		
		КонецЦикла;
	КонецЕсли;
	
	// Описание реквизитов по основной форме документа формируется до загрузки данных в реквизиты формы, 
	// поэтому для отображения входящих доп. реквизитов нужно иметь на форме таблицы для всех титулов на случай, 
	// если доп. реквизиты есть во входящих титулах
	Если ГруппаДанных = "ОсновнаяФорма" Тогда
		Для Каждого ИмяГруппы Из ГруппыДанных Цикл
			Если ОписаниеДопРеквизитов.Свойство(ИмяГруппы) = Ложь Тогда
				ОписаниеДопРеквизитов.Вставить(ИмяГруппы, Новый Массив);	
				ИмяИнфПоля = ИмяГруппы + "ИнформационныеПоля";
				ОписаниеРеквизитовФормыСтруктура.ИменаТаблиц = ОписаниеРеквизитовФормыСтруктура.ИменаТаблиц + "," + ИмяИнфПоля;
				ОписаниеРеквизитовФормыСтруктура.ОписаниеТаблицФормы.Вставить(ИмяИнфПоля, "ИдентификаторСтроки,ИдентификаторСтрокиРодителя,ИдентификаторФайла");
				
				ИмяДопИнфо = ИмяГруппы + "ДополнительнаяИнформация";
				ОписаниеРеквизитовФормыСтруктура.ИменаТаблиц = ОписаниеРеквизитовФормыСтруктура.ИменаТаблиц + "," + ИмяДопИнфо;
				ОписаниеРеквизитовФормыСтруктура.ОписаниеТаблицФормы.Вставить(ИмяДопИнфо, "ИдентификаторСтрокиРодителя,ИдентификаторИнформации,ТипДанных,Квалификаторы,Перечисления,Обязательный,Заголовок,Значение");
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	//@skip-check wrong-type-expression
	ОписаниеРеквизитовФормыСтруктура.Вставить("ОписаниеДопРеквизитов", ОписаниеДопРеквизитов);
	Если НужноПоместитьВФиксированную Тогда
		Если ОписаниеРеквизитовФормы = Неопределено Тогда
			Форма.ОписаниеРеквизитовФормы = ОбменСГИСЭПДКлиентСервер.СкопироватьВФиксированноеЗначенияРекурсивно(ОписаниеРеквизитовФормыСтруктура);
		Иначе
			ОписаниеРеквизитовФормы = ОбменСГИСЭПДКлиентСервер.СкопироватьВФиксированноеЗначенияРекурсивно(ОписаниеРеквизитовФормыСтруктура);		
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Переносит их реквизитов формы дополнительные поля в структуру контейнера реквизитов
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма
//  ПрефиксТитула - Строка - Префикс титула
//  КонтейнерОтображаемойВерсии - Структура, Неопределено - Контейнер отображаемой версии
Процедура ЗаполнитьДополнительныеРеквизитыФормы(Форма, ПрефиксТитула, КонтейнерОтображаемойВерсии = Неопределено) Экспорт
	
	Для Каждого ОписаниеГруппыДопРеквизитов Из Форма.ОписаниеРеквизитовФормы.ОписаниеДопРеквизитов Цикл
		Если СтрНачинаетсяС(ОписаниеГруппыДопРеквизитов.Ключ, ПрефиксТитула) Тогда
			Если ОбменСГИСЭПДКлиентСервер.ЗагрузитьТаблицуВСтруктуруФормы(Форма, ОписаниеГруппыДопРеквизитов.Ключ + "ДополнительнаяИнформация", Истина, КонтейнерОтображаемойВерсии) Тогда
				ОбменСГИСЭПДКлиентСервер.ЗагрузитьТаблицуВСтруктуруФормы(Форма, ОписаниеГруппыДопРеквизитов.Ключ + "ИнформационныеПоля", Истина, КонтейнерОтображаемойВерсии)	
			Иначе
				ОбменСГИСЭПДКлиентСервер.УдалитьСтрокиТаблицыИзСтруктурыФормы(Форма, ОписаниеГруппыДопРеквизитов.Ключ + "ИнформационныеПоля", , КонтейнерОтображаемойВерсии);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область МетодыУниверсальнойПечатнойФормы

Функция КоличествоКолонокПечатнойФормы()
	
	Возврат 200;
	
КонецФункции

Функция СтруктураАтрибутовОбъектаРекурсивно(ОбъектXDTO, УзелРодителя, МассивНеВыводить = Неопределено, СтруктураРезультат = Неопределено)
	
	Если СтруктураРезультат = Неопределено Тогда
		СтруктураРезультат = Новый Соответствие;
	КонецЕсли;
	
	МассивОбъектов = Новый Массив;
	Если ТипЗнч(ОбъектXDTO) = Тип("СписокXDTO") Тогда
		Для Каждого ОбъектСписка Из ОбъектXDTO Цикл
			МассивОбъектов.Добавить(ОбъектСписка);	
		КонецЦикла;
	Иначе
		МассивОбъектов.Добавить(ОбъектXDTO);	
	КонецЕсли;
	
	Для Каждого ОбъектСписка Из МассивОбъектов Цикл
		Для Каждого СвойствоОбъектаСписка Из ОбъектСписка.Свойства() Цикл
			УзелСвойства = УзелРодителя + "/" + СвойствоОбъектаСписка.Имя;
			Если МассивНеВыводить <> Неопределено И МассивНеВыводить.Найти(УзелСвойства) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если ТипЗнч(ОбъектСписка[СвойствоОбъектаСписка.Имя]) = Тип("ОбъектXDTO") Тогда
				СтруктураАтрибутовОбъектаРекурсивно(ОбъектСписка[СвойствоОбъектаСписка.Имя], УзелСвойства, МассивНеВыводить, СтруктураРезультат);
			Иначе
				Если СтруктураРезультат.Получить(УзелСвойства) = Неопределено Тогда
					СтруктураРезультат.Вставить(УзелСвойства, 1);
				КонецЕсли; 	
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат СтруктураРезультат;
	
КонецФункции


// Сформировать табличный документ по XDTO.
// 
// Параметры:
//  ОбъектXDTO - Произвольный - Объект XDTO
//  ОбластьМакетаИмен - Неопределено, ОбластьЯчеекТабличногоДокумента, РисунокТабличногоДокумента, ТекстовыйДокумент, ТабличныйДокумент - Область макета имен
//  УзелРодителя - Строка - Узел родителя
//  ТабличныйДокумент - Неопределено, ТабличныйДокумент - Табличный документ
//  НомерСтрокиТД - Число - Номер строки ТД
//  НомерКолонкиТД - Произвольный, Число - Номер колонки ТД
//  МассивНеВыводить - Массив из Строка, Неопределено - Массив не выводить
//  НомерСтрокиСписка - Число - Номер строки списка
//  КолонкиИнфо - Соответствие из КлючИЗначение, Неопределено - Колонки инфо
//  Склеить - Булево - Склеить
// 
// Возвращаемое значение:
//  Неопределено, ТабличныйДокумент - Сформировать табличный документ по XDTO
//@skip-check method-too-many-params
Функция СформироватьТабличныйДокументПоXDTO(ОбъектXDTO, ОбластьМакетаИмен, УзелРодителя, 
				ТабличныйДокумент = Неопределено, НомерСтрокиТД = 1, НомерКолонкиТД = 1, 
				МассивНеВыводить = Неопределено, НомерСтрокиСписка = 0, КолонкиИнфо = Неопределено, Склеить = Ложь)
	
	Если ТабличныйДокумент = Неопределено Тогда
		ТабличныйДокумент = Новый ТабличныйДокумент;
	КонецЕсли;
	
	КоличествоКолонокПечатнойФормы = КоличествоКолонокПечатнойФормы();
	
	МассивОбъектовXDTO = Новый Массив;
	Если ТипЗнч(ОбъектXDTO) = Тип("Строка") Тогда
		МассивОбъектовXDTO.Добавить(Новый Структура("Имя, Объект", "", ОбъектXDTO));
	Иначе
		Для Каждого ТекущееСвойство Из ОбъектXDTO.Свойства() Цикл
			ТекущийУзел = УзелРодителя + "/" + ТекущееСвойство.Имя;
			Если МассивНеВыводить <> Неопределено И МассивНеВыводить.Найти(ТекущийУзел) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ТекущийОбъектXDTO = ОбъектXDTO[ТекущееСвойство.Имя];
			МассивОбъектовXDTO.Добавить(Новый Структура("Имя, Объект", ТекущееСвойство.Имя, ТекущийОбъектXDTO));
		КонецЦикла;
	КонецЕсли;
	
	НомерТекущегоСвойства = 0;
	Для Каждого ТекущийОбъектXDTO Из МассивОбъектовXDTO Цикл
		НомерТекущегоСвойства = НомерТекущегоСвойства + 1;
		ТекущийУзел = УзелРодителя + "/" + ТекущийОбъектXDTO.Имя;
		// Список
		Если ТипЗнч(ТекущийОбъектXDTO.Объект) = Тип("СписокXDTO") Тогда
			// Название таблицы
			НомерСтрокиТД = НомерСтрокиТД + 1;
			НомерКолонкиТД = 1;
			ТекстЗаголовка = ТекстЗаголовкаПоИмениЗначения(УзелРодителя, ОбластьМакетаИмен);
			ОформитьЗаголовокТД(ТабличныйДокумент, 3, НомерСтрокиТД, НомерКолонкиТД, ТекстЗаголовка);
			// Сформируем шапку таблицы
			НомерСтрокиТД = НомерСтрокиТД + 1;		
			КолКолонок = 1;
			НомерКолонки = 1;
			ШиринаКолонки = КоличествоКолонокПечатнойФормы;
			Если ТипЗнч(ТекущийОбъектXDTO.Объект[0]) = Тип("ОбъектXDTO") Тогда
				КолонкиИнфоТекущ = СтруктураАтрибутовОбъектаРекурсивно(ТекущийОбъектXDTO.Объект, ТекущийУзел, МассивНеВыводить);
				
				КолКолонок = КолонкиИнфоТекущ.Количество();
				ШиринаКолонки = Цел(КоличествоКолонокПечатнойФормы / КолКолонок);
				
				НомерКолонки = 0;
				Для Каждого КиЗ Из КолонкиИнфоТекущ Цикл
					НомерКолонки = НомерКолонки + 1;
					ПерваяЯчейкаКолонки = (НомерКолонки - 1) * ШиринаКолонки + 1;
					КолонкиИнфоТекущ.Вставить(КиЗ.Ключ, ПерваяЯчейкаКолонки);
					ОбластьКолонкаШапки = ТабличныйДокумент.Область(НомерСтрокиТД, ПерваяЯчейкаКолонки, НомерСтрокиТД, НомерКолонки * ШиринаКолонки);
					ОбластьКолонкаШапки.Объединить();
					ОбластьКолонкаШапки.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
					Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
					ОбластьКолонкаШапки.Обвести(Линия, Линия, Линия, Линия);
					ОбластьКолонкаШапки.Текст = ТекстЗаголовкаПоИмениЗначения(КиЗ.Ключ, ОбластьМакетаИмен);
					Если СтрДлина(ОбластьКолонкаШапки.Текст) > 40 Тогда
						Примечание = ОбластьКолонкаШапки.Текст;
						ПозТочка = СтрНайти(ОбластьКолонкаШапки.Текст, ".");
						Если ПозТочка = 0 Тогда
							ОбластьКолонкаШапки.Текст = Лев(ОбластьКолонкаШапки.Текст, 37) + "...";
						Иначе
							ОбластьКолонкаШапки.Текст = Лев(ОбластьКолонкаШапки.Текст, ПозТочка - 1);
						КонецЕсли;
						ОбластьКолонкаШапки.Примечание.Текст = Примечание;
					КонецЕсли;
				КонецЦикла;
				НомерКолонкиТД = 1;
			КонецЕсли;
			// Пустые строки таблицы
			Для С = 1 По ТекущийОбъектXDTO.Объект.Количество() Цикл
				Для ИтераторЦикла = 1 По НомерКолонки Цикл
					НомерКолонкиТД = (НомерТекущегоСвойства - 1) * ШиринаКолонки + 1;
					ОбластьЗначенияКолонки = ТабличныйДокумент.Область(НомерСтрокиТД + С, (ИтераторЦикла - 1) * ШиринаКолонки + 1, НомерСтрокиТД + С, ИтераторЦикла * ШиринаКолонки);
					ОбластьЗначенияКолонки.Объединить();
					ОбластьЗначенияКолонки.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
					Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
					ОбластьЗначенияКолонки.Обвести(Линия, Линия, Линия, Линия);	
				КонецЦикла;
			КонецЦикла;
			// Строки таблицы
			НомерСтроки = 0;
			НомерКолонкиТД = 1;
			Для Каждого ЭлементСпискаXDTO Из ТекущийОбъектXDTO.Объект Цикл
				НомерСтроки = НомерСтроки + 1;
				НомерСтрокиТД = НомерСтрокиТД + 1;	
				СформироватьТабличныйДокументПоXDTO(ЭлементСпискаXDTO, ОбластьМакетаИмен, ТекущийУзел, ТабличныйДокумент, НомерСтрокиТД, НомерКолонкиТД, МассивНеВыводить, НомерСтроки, КолонкиИнфоТекущ, ?(НомерСтрокиСписка > 0, Истина, Склеить));
			КонецЦикла;
			// Объект
		ИначеЕсли ТипЗнч(ТекущийОбъектXDTO.Объект) = Тип("ОбъектXDTO") Тогда  		
			Если НомерСтрокиСписка = 0 Тогда
				НомерКолонкиТД = 1;
				НомерСтрокиТД = НомерСтрокиТД + 1;
				ТекстЗаголовка = ТекстЗаголовкаПоИмениЗначения(ТекущийУзел, ОбластьМакетаИмен);
				ОформитьЗаголовокТД(ТабличныйДокумент, 2, НомерСтрокиТД, НомерКолонкиТД, ТекстЗаголовка);
				НомерСтрокиТД = НомерСтрокиТД + 1;
			Иначе
				Если КолонкиИнфо.Получить(ТекущийУзел) <> Неопределено Тогда
					НомерКолонкиТД = КолонкиИнфо.Получить(ТекущийУзел); 
				КонецЕсли;
			КонецЕсли;
			СформироватьТабличныйДокументПоXDTO(ТекущийОбъектXDTO.Объект, ОбластьМакетаИмен, ТекущийУзел, ТабличныйДокумент, НомерСтрокиТД, НомерКолонкиТД, МассивНеВыводить, НомерСтрокиСписка, КолонкиИнфо, ?(НомерСтрокиСписка > 0, Ложь, Склеить));			
			// Значение
		Иначе                                        
			// Склеенный с предыдущим текст ячейки
			Если Склеить И НомерТекущегоСвойства > 1 Тогда
				ТабличныйДокумент.Область(НомерСтрокиТД, НомерКолонкиТД).Текст = ТабличныйДокумент.Область(НомерСтрокиТД, НомерКолонкиТД).Текст 
				+ ","
				+ ТекущийОбъектXDTO.Имя + ":"
				+ ТекущийОбъектXDTO.Объект;
				// Колонка строки
			ИначеЕсли НомерСтрокиСписка > 0 Тогда	
				Если Склеить = Ложь Тогда
					Если КолонкиИнфо = Неопределено Тогда
						НомерКолонкиТД = 1;	
					ИначеЕсли КолонкиИнфо.Получить(ТекущийУзел) = Неопределено Тогда
						Продолжить;
					Иначе
						НомерКолонкиТД = КолонкиИнфо.Получить(ТекущийУзел);
					КонецЕсли;
				КонецЕсли;
				ОбластьЗначенияКолонки = ТабличныйДокумент.Область(НомерСтрокиТД, НомерКолонкиТД); 
				ОбластьЗначенияКолонки.Текст = ?(Склеить, ТекущийОбъектXDTO.Имя + ":", "") + ТекущийОбъектXDTO.Объект;
				// Отдельное значение ячейки
			Иначе
				НомерКолонкиТД = 1;
				НомерСтрокиТД = НомерСтрокиТД + 1;
				ОбластьЗначения = ТабличныйДокумент.Область(НомерСтрокиТД, НомерКолонкиТД, НомерСтрокиТД, НомерКолонкиТД + КоличествоКолонокПечатнойФормы - 1);
				ОбластьЗначения.Объединить();
				ОбластьЗначения.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				ОбластьЗначения.Текст = ТекущийОбъектXDTO.Объект;
				ОбластьЗначения.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
				ОбластьЗначения.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
				ОбластьЗначения.Шрифт = ШрифтыСтиля.ШрифтЗначенияТабличногоПоляЭПД;
				// Подпись значения
				НомерСтрокиТД = НомерСтрокиТД + 1;
				ОбластьПодписиЗначения = ТабличныйДокумент.Область(НомерСтрокиТД, НомерКолонкиТД, НомерСтрокиТД, НомерКолонкиТД + КоличествоКолонокПечатнойФормы - 1);
				ОбластьПодписиЗначения.Объединить();
				ОбластьПодписиЗначения.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				ОбластьПодписиЗначения.Текст = ТекстЗаголовкаПоИмениЗначения(ТекущийУзел, ОбластьМакетаИмен);
				ОбластьПодписиЗначения.Шрифт = ШрифтыСтиля.ШрифтПодписиТабличногоПоляЭПД;
				ОбластьПодписиЗначения.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ТекстЗаголовкаПоИмениЗначения(ИмяЗначения, ОбластьМакета)
	
	Если ОбластьМакета = Неопределено Тогда
		Возврат ИмяЗначения;
	КонецЕсли;
	
	ОбластьНайдено = ОбластьМакета.НайтиТекст(ИмяЗначения, , ОбластьМакета.Область(1, 1, ОбластьМакета.ВысотаТаблицы, 1), Истина, Истина, Истина, Истина);
	
	Если ОбластьНайдено = Неопределено Тогда
		Возврат ИмяЗначения;
	Иначе
		Возврат ОбластьМакета.Область(ОбластьНайдено.Верх, 2).Текст;
	КонецЕсли;
	
КонецФункции

Процедура ОформитьЗаголовокТД(ТабличныйДокумент, УровеньЗаголовка, НомерСтрокиТД, НомерКолонкиТД, Текст)
	
	ОбластьЗаголовок = ТабличныйДокумент.Область(НомерСтрокиТД, НомерКолонкиТД, НомерСтрокиТД, НомерКолонкиТД + КоличествоКолонокПечатнойФормы() - 1);
	ОбластьЗаголовок.Объединить();
	ОбластьЗаголовок.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	ОбластьЗаголовок.Текст = Текст;
	Если УровеньЗаголовка = 0 Тогда
		ОбластьЗаголовок.Шрифт = ШрифтыСтиля.ШрифтЗаголовка0ТабличногоПоляЭПД;
		ОбластьЗаголовок.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
	ИначеЕсли УровеньЗаголовка = 1 Тогда
		ОбластьЗаголовок.Шрифт = ШрифтыСтиля.ШрифтЗаголовка1ТабличногоПоляЭПД;
	ИначеЕсли УровеньЗаголовка = 2 Тогда
		ОбластьЗаголовок.Шрифт = ШрифтыСтиля.ШрифтЗаголовка2ТабличногоПоляЭПД;
	ИначеЕсли УровеньЗаголовка = 3 Тогда
		ОбластьЗаголовок.Шрифт = ШрифтыСтиля.ШрифтЗаголовка3ТабличногоПоляЭПД;
		ОбластьЗаголовок.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
	КонецЕсли;
	
КонецПроцедуры

Функция ШиринаКолонкиПечатнойФормы(ОриентацияСтраницыТД)
	
	// 54.25 ед.ширины = 100 мм
	// 993 ед.высоты = 350 мм
	
	ШиринаА4ММ = ?(ОриентацияСтраницыТД = ОриентацияСтраницы.Портрет, 210, 297) - 1;
	
	СтандартноеПолеММ = 10;
	
	ШиринаКолонкиММ = (ШиринаА4ММ - 2 * СтандартноеПолеММ) / КоличествоКолонокПечатнойФормы();
	
	// Переведем в среднюю ширину символа и отбросим разряды (округление в меньшую сторону)
	Возврат Окр(ШиринаКолонкиММ / 100 * 54.25 - 0.005, 2);
	
КонецФункции

#КонецОбласти

#Область РаботаСФормами

Функция ГруппаРеквизитовИИмяСтраницыФормыПоПрефиксу(Форма, ПрефиксТитула)

	ТипДокумента = ОбменСГИСЭПДКлиентСервер.ТипДокументаПоИмениФормы(Форма.ИмяФормы);
	ГруппаСтраницы = Форма.Элементы.Найти("Страницы");
	
	Если ПрефиксТитула = Неопределено Тогда
		ПрефиксТитула = ОбменСГИСЭПДКлиентСервер.ПолучитьПрефиксТитулаПоСтраницеОсновнойФормы(ГруппаСтраницы.ТекущаяСтраница.Имя, ТипДокумента);		
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ИмяСтраницы", Неопределено);
	Результат.Вставить("ГруппаРеквизитов", Неопределено);
	
	СтраницыТитуловОсновнойФормы = Новый Структура;
	Если ГруппаСтраницы <> Неопределено Тогда
		Для Каждого ЭлементСтраница Из ГруппаСтраницы.ПодчиненныеЭлементы Цикл
			ПрефиксТитулаСтраницы = ОбменСГИСЭПДКлиентСервер.ПолучитьПрефиксТитулаПоСтраницеОсновнойФормы(ЭлементСтраница.Имя, ТипДокумента);
			СтраницыТитуловОсновнойФормы.Вставить(ПрефиксТитулаСтраницы, ЭлементСтраница.Имя);
		КонецЦикла;	
	КонецЕсли;

	Если СтраницыТитуловОсновнойФормы.Свойство(ПрефиксТитула, Результат.ИмяСтраницы) Тогда
		ИмяГруппыРеквизиты = "ГруппаРеквизиты" + СтрЗаменить(Результат.ИмяСтраницы, "Страница", "");
		Результат.ГруппаРеквизитов = Форма.Элементы.Найти(ИмяГруппыРеквизиты);	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьРеквизитыМобильногоПриложения(Форма)
	
	#Если НЕ ВнешнееСоединение Тогда
		
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД.СервисВзаимодействияМПЭПД") Тогда
		МодульСервисВзаимодействияМПЭПДКлиентСервер = ОбщегоНазначения.ОбщийМодуль("СервисВзаимодействияМПЭПДКлиентСервер");
		
		Элементы = Форма.Элементы;
		
		ЭлементРодитель = Элементы.Найти("ГруппаПраво");
		
		Если ЭлементРодитель = Неопределено Тогда
			Возврат;	
		КонецЕсли;
		
		Если ЭлементРодитель.ПодчиненныеЭлементы.Количество() > 0 Тогда
			ГруппаВыравнивание = Элементы.Вставить("ГруппаВыравниваниеВправо", Тип("ГруппаФормы"), ЭлементРодитель, ЭлементРодитель.ПодчиненныеЭлементы[0]);
		Иначе
			ГруппаВыравнивание = Элементы.Добавить("ГруппаВыравниваниеВправо", Тип("ГруппаФормы"), ЭлементРодитель);
		КонецЕсли;
		ГруппаВыравнивание.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаВыравнивание.Отображение = ОтображениеОбычнойГруппы.Нет;
		ГруппаВыравнивание.ОтображатьЗаголовок = Ложь;
		ГруппаВыравнивание.РастягиватьПоГоризонтали = Истина;
		ГруппаВыравнивание.ГоризонтальноеПоложениеПодчиненных = ГоризонтальноеПоложениеЭлемента.Право;
		
		ГруппаМП = Элементы.Добавить("ГруппаМобильноеПриложение", Тип("ГруппаФормы"), ГруппаВыравнивание);
		ГруппаМП.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаМП.Отображение = ОтображениеОбычнойГруппы.Нет;
		ГруппаМП.ОтображатьЗаголовок = Ложь;
		ГруппаМП.РастягиватьПоГоризонтали = Ложь;
		ГруппаМП.РастягиватьПоВертикали = Ложь;
		ГруппаМП.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		
		ГруппаМПИнфо = Элементы.Добавить("ГруппаМПИнфо", Тип("ГруппаФормы"), ГруппаМП);
		ГруппаМПИнфо.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаМПИнфо.Отображение = ОтображениеОбычнойГруппы.Нет;
		ГруппаМПИнфо.ОтображатьЗаголовок = Ложь;
		ГруппаМПИнфо.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ГруппаМПИнфо.ЦветФона = ЦветаСтиля.ЦветРазделителяГруппЭлементовЭПД;
		
		МПФото = Элементы.Добавить("МПФото", Тип("ПолеФормы"), ГруппаМПИнфо);
		МПФото.Вид = ВидПоляФормы.ПолеКартинки;
		МПФото.РазмерКартинки = РазмерКартинки.Пропорционально;
		МПФото.ПутьКДанным = "МПФото";
		МПФото.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		МПФото.ТекстНевыбраннойКартинки = НСтр("ru='Фото
			|отсутствует'");
		МПФото.ЦветТекста = ЦветаСтиля.ЦветТекстаНеВыполненныйШагЭПД;
		МПФото.Рамка = РамкиСтиля.РамкаОдинарнаяЭПД;
		МПФото.Шрифт = ШрифтыСтиля.ШрифтУменьшенныйЭПД;
		МПФото.Ширина = 8;
		МПФото.Высота = 4;
		
		ГруппаМПТекстовое = Элементы.Добавить("ГруппаМПТекстовое", Тип("ГруппаФормы"),  ГруппаМПИнфо);
		ГруппаМПТекстовое.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаМПТекстовое.Отображение = ОтображениеОбычнойГруппы.Нет;
		ГруппаМПТекстовое.ОтображатьЗаголовок = Ложь;
		ГруппаМПТекстовое.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		
		МПЗаголовок = Элементы.Добавить("МПЗаголовок", Тип("ДекорацияФормы"), ГруппаМПТекстовое);
		МПЗаголовок.Вид = ВидДекорацииФормы.Надпись;
		МПЗаголовок.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Лево;
		МПЗаголовок.Шрифт = ШрифтыСтиля.ШрифтМикроЗаголовкаЭПД;
		МПЗаголовок.Заголовок = НСтр("ru='Мобильное приложение'");
		
		ГруппаМПНаименование = Элементы.Добавить("ГруппаМПНаименование", Тип("ГруппаФормы"),  ГруппаМПТекстовое);
		ГруппаМПНаименование.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаМПНаименование.Отображение = ОтображениеОбычнойГруппы.Нет;
		ГруппаМПНаименование.ОтображатьЗаголовок = Ложь;
		ГруппаМПНаименование.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		
		МПНаименование = Элементы.Добавить("МПНаименование", Тип("ПолеФормы"), ГруппаМПНаименование);
		МПНаименование.Вид = ВидПоляФормы.ПолеНадписи;
		МПНаименование.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		МПНаименование.АвтоМаксимальнаяШирина = Ложь;
		МПНаименование.МаксимальнаяШирина = 30;
		МПНаименование.АвтоМаксимальнаяВысота = Ложь;
		МПНаименование.МаксимальнаяВысота = 2;
		МПНаименование.ПутьКДанным = "МПНаименование";
		
		НадписьМПОткрыть = Элементы.Добавить("НадписьМПОткрыть", Тип("ДекорацияФормы"), ГруппаМПНаименование);
		НадписьМПОткрыть.Вид = ВидДекорацииФормы.Картинка;
		НадписьМПОткрыть.Картинка = МодульСервисВзаимодействияМПЭПДКлиентСервер.КартинкаОткрытьВОкнеЭПД();
		НадписьМПОткрыть.РазмерКартинки = РазмерКартинки.РеальныйРазмер;
		НадписьМПОткрыть.Рамка = РамкиСтиля.РамкаОдинарнаяЭПД;
		НадписьМПОткрыть.Ширина = 2;
		НадписьМПОткрыть.Высота = 1;
		НадписьМПОткрыть.Гиперссылка = Истина;
		НадписьМПОткрыть.УстановитьДействие("Нажатие", "Подключаемый_НадписьМПОткрытьНажатие");
		
		ГруппаМПТелефон = Элементы.Добавить("ГруппаМПТелефон", Тип("ГруппаФормы"),  ГруппаМПТекстовое);
		ГруппаМПТелефон.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаМПТелефон.Отображение = ОтображениеОбычнойГруппы.Нет;
		ГруппаМПТелефон.ОтображатьЗаголовок = Ложь;
		ГруппаМПТелефон.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		
		МПТелефон = Элементы.Добавить("МПТелефон", Тип("ПолеФормы"), ГруппаМПТелефон);
		МПТелефон.Вид = ВидПоляФормы.ПолеНадписи;
		МПТелефон.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		МПТелефон.АвтоМаксимальнаяШирина = Ложь;
		МПТелефон.МаксимальнаяШирина = 30;
		МПТелефон.АвтоМаксимальнаяВысота = Ложь;
		МПТелефон.МаксимальнаяВысота = 1;
		МПТелефон.ПутьКДанным = "МПТелефон";
		
		НадписьМППозвонить = Элементы.Добавить("НадписьМППозвонить", Тип("ДекорацияФормы"), ГруппаМПТелефон);
		НадписьМППозвонить.Вид = ВидДекорацииФормы.Картинка;
		НадписьМППозвонить.Картинка = МодульСервисВзаимодействияМПЭПДКлиентСервер.КартинкаТелефоннаяТрубкаЭПД();
		НадписьМППозвонить.РазмерКартинки = РазмерКартинки.РеальныйРазмер;
		НадписьМППозвонить.Рамка = РамкиСтиля.РамкаОдинарнаяЭПД;
		НадписьМППозвонить.Ширина = 2;
		НадписьМППозвонить.Высота = 1;
		НадписьМППозвонить.Гиперссылка = Истина;
		НадписьМППозвонить.УстановитьДействие("Нажатие", "Подключаемый_НадписьМППозвонитьНажатие");
		
		ГруппаМПДействия = Элементы.Добавить("ГруппаМПДействия", Тип("ГруппаФормы"),  ГруппаМПТекстовое);
		ГруппаМПДействия.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаМПДействия.Отображение = ОтображениеОбычнойГруппы.Нет;
		ГруппаМПДействия.ОтображатьЗаголовок = Ложь;
		ГруппаМПДействия.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ГруппаМПДействия.ГоризонтальноеПоложениеПодчиненных = ГоризонтальноеПоложениеЭлемента.Право;
		ГруппаМПДействия.РастягиватьПоГоризонтали = Истина;
		
		КомандаВыбратьМП = Элементы.Добавить("КомандаВыбратьМП", Тип("ДекорацияФормы"), ГруппаМПДействия);
		КомандаВыбратьМП.Вид = ВидДекорацииФормы.Надпись;
		КомандаВыбратьМП.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
		КомандаВыбратьМП.Гиперссылка = Истина;
		КомандаВыбратьМП.УстановитьДействие("Нажатие", "Подключаемый_КомандаВыбратьМПНажатие");
		
	КонецЕсли;
	
	#КонецЕсли
	
КонецПроцедуры

Функция ПреобразованиеЗначенияРеквизитаВСтроку(СтруктураРеквизита)
	
	Результат = СтруктураРеквизита.Значение;
	
	Если ТипЗнч(СтруктураРеквизита.Значение) = Тип("Дата") 
		И НачалоДня(СтруктураРеквизита.Значение) = СтруктураРеквизита.Значение Тогда
			Результат = Формат(СтруктураРеквизита.Значение, "ДЛФ=D;");
	ИначеЕсли ТипЗнч(СтруктураРеквизита.Значение) = Тип("Число")
		Или ТипЗнч(СтруктураРеквизита.Значение) = Тип("Булево") Тогда
		Результат = Строка(СтруктураРеквизита.Значение);
	КонецЕсли;
			
	Возврат Результат;
	
КонецФункции

Функция ПорядокРеквизитаВПредставлении(ТипДанных, ИмяРеквизита)
	
	Результат = Неопределено;
	Если ТипДанных = "Груз" Тогда
		Если ИмяРеквизита = "ОтгрузочноеНаименованиеГруза" Тогда
			Результат = 1;
		ИначеЕсли ИмяРеквизита = "КодТоварнойНоменклатуры" Тогда
			Результат = 2;
		КонецЕсли;	
	ИначеЕсли ТипДанных = "ТитулГрузоотправителяТранспортноеСредство"
		Или ТипДанных = "ТитулПеревозчикаЗаменыТранспортноеСредство"
		Или ТипДанных = "ТитулПеревозчикаТранспортноеСредство"
		Или ТипДанных = "ТитулФрахтовщикаТранспортноеСредство"
		Или ТипДанных = "ТитулОформлениеТранспортноеСредство"
		Или ТипДанных = "ТранспортноеСредствоЭПЛ"
		Или ТипДанных = "ТранспортноеСредствоЭДФ"
		Или ТипДанных = "ТранспортноеСредство"
		Или ТипДанных = "ПараметрыТранспортногоСредства" Тогда
		Если СтрЗаканчиваетсяНа(ИмяРеквизита, "РегистрационныйНомер") Тогда
			Результат = 1;
		ИначеЕсли СтрЗаканчиваетсяНа(ИмяРеквизита, "Марка") Тогда 
			Результат = 2;
		ИначеЕсли СтрЗаканчиваетсяНа(ИмяРеквизита, "Вместимость") Тогда 
			Результат = 3;
		ИначеЕсли СтрЗаканчиваетсяНа(ИмяРеквизита, "Грузоподъемность") Тогда 
			Результат = 4;
		ИначеЕсли СтрЗаканчиваетсяНа(ИмяРеквизита, "Тип") Тогда 
			Результат = 5;
		КонецЕсли;	
	ИначеЕсли ТипДанных = "Водитель"
		Или ТипДанных = "ВодительЭПЛ" Тогда
		Если СтрЗаканчиваетсяНа(ИмяРеквизита, "Фамилия") Тогда
			Результат = 1;
		ИначеЕсли СтрЗаканчиваетсяНа(ИмяРеквизита, "Имя") Тогда 
			Результат = 2;
		ИначеЕсли СтрЗаканчиваетсяНа(ИмяРеквизита, "Отчество") Тогда 
			Результат = 3;
		КонецЕсли;
	ИначеЕсли ТипДанных = "Прицеп" Тогда
		Если СтрЗаканчиваетсяНа(ИмяРеквизита, "РегистрационныйНомер") Тогда
			Результат = 1;
		ИначеЕсли СтрЗаканчиваетсяНа(ИмяРеквизита, "Марка") Тогда 
			Результат = 2;
		ИначеЕсли СтрЗаканчиваетсяНа(ИмяРеквизита, "Вместимость") Тогда 
			Результат = 3;
		ИначеЕсли СтрЗаканчиваетсяНа(ИмяРеквизита, "Грузоподъемность") Тогда 
			Результат = 4;
		КонецЕсли;
	ИначеЕсли ТипДанных = "ТитулПеревозчикаПрицеп" Тогда
		Если СтрЗаканчиваетсяНа(ИмяРеквизита, "РегистрационныйНомер") Тогда
			Результат = 1;
		ИначеЕсли СтрЗаканчиваетсяНа(ИмяРеквизита, "Марка") Тогда 
			Результат = 2;
		ИначеЕсли СтрЗаканчиваетсяНа(ИмяРеквизита, "Вместимость") Тогда 
			Результат = 3;
		ИначеЕсли СтрЗаканчиваетсяНа(ИмяРеквизита, "Грузоподъемность") Тогда 
			Результат = 4;
		КонецЕсли;
	ИначеЕсли ТипДанных = "СторонаПодписавшаяДокумент" Тогда
		Если ИмяРеквизита = "ИНН_ФЛ" Тогда
			Результат = 1;
		ИначеЕсли СтрЗаканчиваетсяНа(ИмяРеквизита, "_ИНН") Тогда
			Результат = 1;
		ИначеЕсли СтрЗаканчиваетсяНа(ИмяРеквизита, "СтатусФЛ_ЮЛ") Тогда
			Результат = 1;
		ИначеЕсли СтрЗаканчиваетсяНа(ИмяРеквизита, "ОрганВластиВыдавшийДокумент") Тогда
			Результат = 1;
		ИначеЕсли СтрЗаканчиваетсяНа(ИмяРеквизита, "Идентификатор") Тогда
			Результат = 2;	
		КонецЕсли;
	ИначеЕсли ТипДанных = "ТитулФрахтователяПараметрыНеобходимогоТС" Тогда
		Если СтрЗаканчиваетсяНа(ИмяРеквизита, "Тип") Тогда
			Результат = 1;
		ИначеЕсли СтрЗаканчиваетсяНа(ИмяРеквизита, "Марка") Тогда 
			Результат = 2;
		ИначеЕсли СтрЗаканчиваетсяНа(ИмяРеквизита, "Вместимость") Тогда 
			Результат = 3;
		ИначеЕсли СтрЗаканчиваетсяНа(ИмяРеквизита, "Грузоподъемность") Тогда 
			Результат = 4;
		КонецЕсли;
	ИначеЕсли ТипДанных = "Контейнер" Тогда
		Если СтрЗаканчиваетсяНа(ИмяРеквизита, "КодРазмеровИТипаКонтейнера") Тогда
			Результат = 1;
		ИначеЕсли СтрЗаканчиваетсяНа(ИмяРеквизита, "КодСтраны") Тогда 
			Результат = 2;
		ИначеЕсли СтрЗаканчиваетсяНа(ИмяРеквизита, "Грузоподъемность") Тогда 
			Результат = 3;
		КонецЕсли;
	ИначеЕсли ТипДанных = "ШтатныйМедработникЭПЛ" Тогда
		Если СтрЗаканчиваетсяНа(ИмяРеквизита, "Фамилия") Тогда
			Результат = 1;
		ИначеЕсли СтрЗаканчиваетсяНа(ИмяРеквизита, "Имя") Тогда 
			Результат = 2;
		ИначеЕсли СтрЗаканчиваетсяНа(ИмяРеквизита, "Отчество") Тогда 
			Результат = 3;
		КонецЕсли;
	ИначеЕсли ТипДанных = "СтороннийМедработникЭПЛ" Тогда
		Если СтрЗаканчиваетсяНа(ИмяРеквизита, "Фамилия") Тогда
			Результат = 1;
		ИначеЕсли СтрЗаканчиваетсяНа(ИмяРеквизита, "Имя") Тогда 
			Результат = 2;
		ИначеЕсли СтрЗаканчиваетсяНа(ИмяРеквизита, "Отчество") Тогда 
			Результат = 3;
		КонецЕсли;
	ИначеЕсли ТипДанных = "УполномоченныйНаПроставлениеДанныхЭПЛ" Тогда
		Если СтрЗаканчиваетсяНа(ИмяРеквизита, "Фамилия") Тогда
			Результат = 1;
		ИначеЕсли СтрЗаканчиваетсяНа(ИмяРеквизита, "Имя") Тогда 
			Результат = 2;
		ИначеЕсли СтрЗаканчиваетсяНа(ИмяРеквизита, "Отчество") Тогда 
			Результат = 3;
		КонецЕсли;
	ИначеЕсли ТипДанных = "ОтветственныйЗаСостояниеТСЭПЛ" Тогда
		Если СтрЗаканчиваетсяНа(ИмяРеквизита, "Фамилия") Тогда
			Результат = 1;
		ИначеЕсли СтрЗаканчиваетсяНа(ИмяРеквизита, "Имя") Тогда 
			Результат = 2;
		ИначеЕсли СтрЗаканчиваетсяНа(ИмяРеквизита, "Отчество") Тогда 
			Результат = 3;
		КонецЕсли;
	ИначеЕсли ТипДанных = "СведенияОПутевомЛистеЭДФ" Тогда
		Если СтрЗаканчиваетсяНа(ИмяРеквизита, "НаименованиеПутевогоЛиста") Тогда
			Результат = 1;
		ИначеЕсли СтрЗаканчиваетсяНа(ИмяРеквизита, "НомерПутевогоЛиста") Тогда 
			Результат = 2;
		ИначеЕсли СтрЗаканчиваетсяНа(ИмяРеквизита, "ДатаВыпискиПутевогоЛиста") Тогда 
			Результат = 3;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОформлениеРеквизитаВНаименованииХранимыхДанныхЭПД(СтруктураРеквизита)
	
	Результат = Новый Структура("До, После, НеВыводить", "", "", Ложь);
	
	Если СтруктураРеквизита.Представление = "Способ упаковки" Тогда
		Результат.До = "(";
		Результат.После = ")";
	ИначеЕсли СтруктураРеквизита.Представление = "Регистрационный номер" Тогда
		Результат.После = ",";
	ИначеЕсли СтрЗаканчиваетсяНа(СтруктураРеквизита.Имя, "Марка") Тогда
		Результат.После = " ";
	ИначеЕсли СтрЗаканчиваетсяНа(СтруктураРеквизита.Имя, "Вместимость") Тогда
		Результат.После = "м3,";
	ИначеЕсли СтрЗаканчиваетсяНа(СтруктураРеквизита.Имя, "Грузоподъемность") Тогда
		Результат.После = "т";
	ИначеЕсли СтрЗаканчиваетсяНа(СтруктураРеквизита.Имя, "Тип") Тогда
		Результат.До = "(";
		Результат.После = ")";
	ИначеЕсли СтруктураРеквизита.Представление = "Тип владения" Тогда
		Результат.НеВыводить = Истина;
	ИначеЕсли СтруктураРеквизита.Представление = "Код товарной номенклатуры" Тогда
		Результат.До = ", Код ТН: ";
	ИначеЕсли СтруктураРеквизита.Имя = "РФИлиНет" Тогда
		Результат.НеВыводить = Истина;
	ИначеЕсли СтрЗаканчиваетсяНа(СтруктураРеквизита.Имя, "ФЛ_ИНН") Тогда
		Результат.До = "ИНН: ";	
		Результат.После = " (Физ. лицо)";
	ИначеЕсли СтрЗаканчиваетсяНа(СтруктураРеквизита.Имя, "ЮЛ_ИНН") Тогда
		Результат.До = "ИНН: ";	
		Результат.После = " (Юр. лицо)"; 
	ИначеЕсли СтрЗаканчиваетсяНа(СтруктураРеквизита.Имя, "СтатусФЛ_ЮЛ") Тогда
		Результат.После = " (Иностранное лицо)";
	ИначеЕсли СтрЗаканчиваетсяНа(СтруктураРеквизита.Имя, "КодСтраны") Тогда
		Результат.После = " (";	
	ИначеЕсли СтруктураРеквизита.Имя = "ДатаВыпискиПутевогоЛиста" Тогда
		Результат.До = "от ";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ОбработатьПараметры(Форма)
	
	Параметры = Форма.Параметры;
	
	Параметры.Свойство("ИдентификаторСтрокиРодителя", Форма.ИдентификаторСтрокиРодителя);
	
	ЗначениеЗаполнения = Неопределено;
	Если Параметры.Свойство("Ключ", ЗначениеЗаполнения) Тогда
		Форма.Ключ = ЗначениеЗаполнения;
	Иначе
		Параметры.Свойство("ЗначениеКопирования", ЗначениеЗаполнения); 
		Если ЗначениеЗаполнено(ЗначениеЗаполнения) Тогда 
			Форма.Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(ЗначениеЗаполнения)
		И ТипЗнч(ЗначениеЗаполнения) = Тип("СправочникСсылка.ХранимыеДанныеЭПД") Тогда
		РеквизитыХранимыхДанных = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗначениеЗаполнения, 
			"ГруппаДанных, Организация, Контрагент, ДополнительныйОтбор");
		Форма.ГруппаДанных = РеквизитыХранимыхДанных.ГруппаДанных;
		Форма.Организация = РеквизитыХранимыхДанных.Организация;
		Форма.Контрагент = РеквизитыХранимыхДанных.Контрагент;
		Форма.ДополнительныйОтбор = РеквизитыХранимыхДанных.ДополнительныйОтбор;
		ОписаниеХранимыхДанныхЭПД = ПолучитьОписаниеХранимыхДанныхЭПДПоСсылке(ЗначениеЗаполнения, Форма.ГруппаДанных);
		ЗаполнитьЗначенияСвойств(Форма, ОписаниеХранимыхДанныхЭПД.ДанныеЗаполненияРеквизитовФормы);
		Если ОписаниеХранимыхДанныхЭПД.Свойство("ДанныеЗаполненияТаблицФормы") Тогда
			Для Каждого ТаблицКиЗ Из ОписаниеХранимыхДанныхЭПД.ДанныеЗаполненияТаблицФормы Цикл
				Если Форма.ОписаниеРеквизитовФормы.ОписаниеТаблицФормы.Свойство(ТаблицКиЗ.Ключ) Тогда
					ТаблицыФормы = Форма[ТаблицКиЗ.Ключ];
					Для Каждого СтруктураСтроки Из ТаблицКиЗ.Значение Цикл 
						ЗаполнитьЗначенияСвойств(ТаблицыФормы.Добавить(), СтруктураСтроки);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Иначе
		Если Параметры.Свойство("ОписаниеРеквизитовФормы") Тогда
			ОписаниеРеквизитовФормыСтруктура = ОбменСГИСЭПДКлиентСервер.СкопироватьИзФиксированногоЗначенияРекурсивно(Форма.ОписаниеРеквизитовФормы);
			Для Каждого КиЗ Из Параметры.ОписаниеРеквизитовФормы Цикл
				Если ОписаниеРеквизитовФормыСтруктура.Свойство(КиЗ.Ключ) = Ложь Тогда
					ОписаниеРеквизитовФормыСтруктура.Вставить(КиЗ.Ключ, КиЗ.Значение);	
				КонецЕсли;	
			КонецЦикла;
			Форма.ОписаниеРеквизитовФормы = ОбменСГИСЭПДКлиентСервер.СкопироватьВФиксированноеЗначенияРекурсивно(ОписаниеРеквизитовФормыСтруктура);
		КонецЕсли;
		Параметры.Свойство("ЗапретитьИзменение", Форма.ЗапретитьИзменение);
		
		Параметры.Свойство("ГруппаДанных", Форма.ГруппаДанных);
		Если ЗначениеЗаполнено(Форма.ГруппаДанных) = Ложь Тогда
			Параметры.Свойство("Тип", Форма.ГруппаДанных);	
		КонецЕсли;
		Если Параметры.Свойство("ОтборХранимыхДанныхЭПД") И Параметры.ОтборХранимыхДанныхЭПД <> Неопределено Тогда
			Параметры.ОтборХранимыхДанныхЭПД.Свойство("Организация", Форма.Организация);
			Параметры.ОтборХранимыхДанныхЭПД.Свойство("Контрагент", Форма.Контрагент);
			Параметры.ОтборХранимыхДанныхЭПД.Свойство("ДополнительныйОтбор", Форма.ДополнительныйОтбор);
		КонецЕсли;
		
		Если Параметры.Свойство("ПараметрыВыбора") Тогда
			Параметры.ПараметрыВыбора.Свойство("Организация", Форма.Организация);
			Параметры.ПараметрыВыбора.Свойство("Контрагент", Форма.Контрагент);
			Параметры.ПараметрыВыбора.Свойство("ДополнительныйОтбор", Форма.ДополнительныйОтбор);
		КонецЕсли;
		
		Если Параметры.Свойство("ДанныеЗаполненияРеквизитовФормы") Тогда
			ЗаполнитьЗначенияСвойств(Форма, Параметры.ДанныеЗаполненияРеквизитовФормы, , "ОписаниеРеквизитовФормы");
		КонецЕсли;
		
		Если Параметры.Свойство("ДанныеЗаполненияТаблицФормы") Тогда
			Для Каждого ТаблицКиЗ Из Параметры.ДанныеЗаполненияТаблицФормы Цикл
				ТаблицыФормы = Форма[ТаблицКиЗ.Ключ];
				Если ТипЗнч(ТаблицКиЗ.Значение) = Тип("Массив") Тогда
					Для Каждого СтруктураСтроки Из ТаблицКиЗ.Значение Цикл 
						Если СтруктураСтроки <> Неопределено Тогда
							ЗаполнитьЗначенияСвойств(ТаблицыФормы.Добавить(), СтруктураСтроки);
						КонецЕсли;
					КонецЦикла;
				Иначе
					ТаблицыФормы.Загрузить(ТаблицКиЗ.Значение.Выгрузить());	
				КонецЕсли;
				Если ЗначениеЗаполнено(Форма.ИдентификаторСтрокиРодителя) Тогда
					ЭлементТаблицыФормы = Форма.Элементы.Найти(ТаблицКиЗ.Ключ);
					// В таблицах хранимых данных идентификатор строки родителя не заполнен 
					// (заполняется при получении описания хранимых данных)
					Если Параметры.ЕстьХранимыеДанные = Ложь И ЭлементТаблицыФормы <> Неопределено Тогда
						ЭлементТаблицыФормы.ОтборСтрок = Новый ФиксированнаяСтруктура("ИдентификаторСтрокиРодителя", 
																		Форма.ИдентификаторСтрокиРодителя);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	// Дополнительные поля ЭПД
	Если ОбменСГИСЭПДКлиентСервер.ЭтоОсновнаяФорма(Форма) = Ложь Тогда
		Для Каждого ОписаниеГруппы Из Форма.ОписаниеРеквизитовФормы.ОписаниеДопРеквизитов Цикл
			// Если это доп. реквизиты строки таблицы
			МассивИдентификаторовСтрок = Новый Массив;
			РеквизитыВКолонках = Ложь;
			Если Форма.ОписаниеРеквизитовФормы.ОписаниеТаблицФормы.Свойство(ОписаниеГруппы.Ключ) Тогда
				РеквизитыВКолонках = Истина;
				Для Каждого СтрокаФормы Из Форма[ОписаниеГруппы.Ключ] Цикл
					Если ЗначениеЗаполнено(СтрокаФормы.ИдентификаторСтроки) = Ложь Тогда
						СтрокаФормы.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор());
					КонецЕсли;
					МассивИдентификаторовСтрок.Добавить(СтрокаФормы.ИдентификаторСтроки);	
				КонецЦикла;	
			Иначе
				МассивИдентификаторовСтрок.Добавить();	
			КонецЕсли;
			
			Для Каждого ИдентификаторСтрокиРодителя Из МассивИдентификаторовСтрок Цикл
				ИмяИнфПоля = ОписаниеГруппы.Ключ + "ИнформационныеПоля";
				ТаблицаИнфПоля = Форма[ИмяИнфПоля];
				Если ИдентификаторСтрокиРодителя = Неопределено Тогда 
					Если ТаблицаИнфПоля.Количество() = 0 Тогда
						СтрокаДопПолей = ТаблицаИнфПоля.Добавить();
						СтрокаДопПолей.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор());	
					Иначе
						СтрокаДопПолей = ТаблицаИнфПоля[0];
					КонецЕсли;
				Иначе
					Отбор = Новый Структура("ИдентификаторСтрокиРодителя", ИдентификаторСтрокиРодителя);
					НайденныеСтроки = ТаблицаИнфПоля.НайтиСтроки(Отбор);
					Если НайденныеСтроки.Количество() = 0 Тогда
						СтрокаДопПолей = ТаблицаИнфПоля.Добавить();
						СтрокаДопПолей.ИдентификаторСтрокиРодителя = ИдентификаторСтрокиРодителя;
						СтрокаДопПолей.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор());	
					Иначе
						СтрокаДопПолей = НайденныеСтроки[0];	
					КонецЕсли;
				КонецЕсли;
				ИмяДопИнфо = ОписаниеГруппы.Ключ + "ДополнительнаяИнформация";
				ТаблицаДопИнфо = Форма[ИмяДопИнфо];
				
				Заполненность = Новый Структура;
				Для Каждого СтруктураДопРеквизита Из ОписаниеГруппы.Значение Цикл
					Отбор = Новый Структура("ИдентификаторСтрокиРодителя,ИдентификаторИнформации", СтрокаДопПолей.ИдентификаторСтроки, СтруктураДопРеквизита.ИдентификаторИнформации);
					СтрокиДопИнфо = ТаблицаДопИнфо.НайтиСтроки(Отбор);
					Если СтрокиДопИнфо.Количество() = 0 Тогда
						СтрокаДопИнфо = ТаблицаДопИнфо.Добавить();
						СтрокаДопИнфо.ИдентификаторСтрокиРодителя = СтрокаДопПолей.ИдентификаторСтроки;
						СтрокаДопИнфо.ИдентификаторИнформации = СтруктураДопРеквизита.ИдентификаторИнформации;
						СтрокаДопИнфо.ТипДанных = СтруктураДопРеквизита.ТипДанных;
						СтрокаДопИнфо.Заголовок = СтруктураДопРеквизита.Заголовок;
						СтрокаДопИнфо.Квалификаторы = СтруктураДопРеквизита.Квалификаторы;
						СтрокаДопИнфо.Перечисления = СтруктураДопРеквизита.Перечисления;
						СтрокаДопИнфо.Обязательный = СтруктураДопРеквизита.Обязательный;
						СтрокаДопИнфо.Значение = СтруктураДопРеквизита.Значение;
					Иначе
						СтрокаДопИнфо = СтрокиДопИнфо[0];	
					КонецЕсли;
					Если РеквизитыВКолонках = Истина Тогда
						Для Каждого СтрокаТаблицыРодителя Из Форма[ОписаниеГруппы.Ключ] Цикл
							Если СтрокаТаблицыРодителя.ИдентификаторСтроки = ИдентификаторСтрокиРодителя Тогда
								СтрокаТаблицыРодителя["ДополнительнаяИнформация" + "_" + СтруктураДопРеквизита.ИдентификаторИнформации] = СтрокаДопИнфо.Значение;
								Если ЗначениеЗаполнено(СтрокаДопИнфо.Значение)	Тогда
									Заполненность.Вставить(СтруктураДопРеквизита.ИдентификаторИнформации);
								КонецЕсли;
							КонецЕсли;	
						КонецЦикла;	
					КонецЕсли;	
				КонецЦикла;	
									
				Если РеквизитыВКолонках = Ложь Тогда
					СоздатьЭлементыВводаЗначенийСписка(Форма, ИмяДопИнфо, "Значение", Ложь, , , СтрокаДопПолей.ИдентификаторСтроки, Форма.ЗапретитьИзменение = Ложь);
				КонецЕсли;					
			КонецЦикла;
			
			// Промежуточные колонки в таблице-родителе для ввода данных
			Если РеквизитыВКолонках = Истина Тогда
				Для Каждого СтруктураДопРеквизита Из ОписаниеГруппы.Значение Цикл
					Если Форма.ЗапретитьИзменение = Истина
						И Заполненность.Свойство(СтруктураДопРеквизита.ИдентификаторИнформации) = Ложь Тогда
						Продолжить;
					КонецЕсли; 
					
					ГруппаПоТаблице = Форма.Элементы.Найти(ОписаниеГруппы.Ключ);	
					Если ГруппаПоТаблице <> Неопределено Тогда
						НовыйРеквизит = Форма.Элементы.Добавить(ОписаниеГруппы.Ключ + "ДополнительнаяИнформация" + "_" + СтруктураДопРеквизита.ИдентификаторИнформации,
							 Тип("ПолеФормы"), ГруппаПоТаблице);
						НовыйРеквизит.ПутьКДанным = ОписаниеГруппы.Ключ + "." + "ДополнительнаяИнформация" + "_" + СтруктураДопРеквизита.ИдентификаторИнформации;
						
						НовыйРеквизит.Вид = ВидПоляФормы.ПолеВвода;	
						НовыйРеквизит.Заголовок = СтруктураДопРеквизита.Заголовок;
						Если СтруктураДопРеквизита.ТипДанных = "Перечисление" Тогда	
							НовыйРеквизит.РежимВыбораИзСписка = Истина;
							НовыйРеквизит.КнопкаВыбора = Ложь;
							МассивЗначений = СтрРазделить(СтруктураДопРеквизита.Перечисления, "|");
							Для Каждого ЗначениеПеречисления Из МассивЗначений Цикл
								НовыйРеквизит.СписокВыбора.Добавить(ЗначениеПеречисления);	
							КонецЦикла;
						КонецЕсли;
						
						Если СтруктураДопРеквизита.Обязательный = Истина Тогда
							НовыйРеквизит.АвтоОтметкаНезаполненного = Истина;	
						КонецЕсли;
						
						Форма.Элементы[ОписаниеГруппы.Ключ].Шапка = Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры


// Менеджер объекта формы.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма
// 
// Возвращаемое значение:
//  ДокументМенеджер
Функция МенеджерОбъектаФормы(Форма)
	
	МассивЧастей = СтрРазделить(Форма.ИмяФормы, ".");
	
	Возврат Новый (МассивЧастей[0] + "Менеджер." + МассивЧастей[1]);	
	
КонецФункции

Функция ПрефиксТитулаФормы(Форма)

	Результат = "";
	
	МассивЧастейИмениФормы = СтрРазделить(Форма.ИмяФормы, ".");	
	ИмяОбъектаДляФормы = МассивЧастейИмениФормы[0] + "." + МассивЧастейИмениФормы[1];
	
	КраткоеИмяФормы = МассивЧастейИмениФормы[МассивЧастейИмениФормы.ВГраница()];

	МассивПрефиксов = ОбменСГИСЭПДКлиентСервер.ПрефиксыТитуловДокумента(ИмяОбъектаДляФормы);
	
	Для Каждого Префикс Из МассивПрефиксов Цикл
		Если СтрНачинаетсяС(КраткоеИмяФормы, Префикс) Тогда
			Результат = Префикс;
			Прервать;
		КонецЕсли;		
	КонецЦикла; 
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

Функция СтруктураУчастникаЭПД(ДобавитьПлатежныеРеквизиты = Ложь)
	
	Результат = Новый Структура;
	
	Результат.Вставить("ИнострЛицоБезУчетаСтрана");
	Результат.Вставить("ИнострЛицоБезУчетаИдентификатор");
	
	Результат.Вставить("ИПФамилия");
	Результат.Вставить("ИПИмя");
	Результат.Вставить("ИПОтчество");	
	Результат.Вставить("ИП_ИНН");
	Результат.Вставить("ОГРНИП");
	Результат.Вставить("ЮЛНаименование");
	Результат.Вставить("ЮЛ_ИНН");
	Результат.Вставить("ЮЛ_КПП");
	Результат.Вставить("ОГРН");
	
	Результат.Вставить("АдресИндекс");
	Результат.Вставить("АдресКодРегиона");
	Результат.Вставить("АдресГород");	
	Результат.Вставить("АдресРайон");
	Результат.Вставить("АдресНаселенныйПункт");
	Результат.Вставить("АдресУлица");
	Результат.Вставить("АдресДом");
	Результат.Вставить("АдресКорпус");
	
	Если ДобавитьПлатежныеРеквизиты = Истина Тогда
		Результат.Вставить("БИК");
		Результат.Вставить("НаименованиеБанка");
		Результат.Вставить("РасчетныйСчет");
		Результат.Вставить("КоррСчет");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НужноВыполнятьРегламентноеЗаданиеОтправкиQR()
	
	Запрос = Новый Запрос;
	// Титул перевозчика должен быть получен в течение 3 дней, иначе перевозка считается не состоявшейся
	Запрос.УстановитьПараметр("ДатаАктуальностиДокумента", НачалоДня(ТекущаяДатаСеанса() - 3 * 24 * 60 * 60));
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭлектроннаяТранспортнаяНакладная.Ссылка
	|ИЗ
	|	Документ.ЭлектроннаяТранспортнаяНакладная КАК ЭлектроннаяТранспортнаяНакладная
	|ГДЕ
	|	ЭлектроннаяТранспортнаяНакладная.РольУчастника = 3
	|	И ЭлектроннаяТранспортнаяНакладная.ТитулГрузоотправителяДатаФормированияФайла >= &ДатаАктуальностиДокумента";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ИзменитьИспользованиеЗаданияОтправкиQR(Ложь);
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьQRКодОтОператора(Знач Отправитель, Знач УИДМинтранс, Знач Токен, СоединениеHTTP = Неопределено)
	
	Если СоединениеHTTP = Неопределено Тогда
		Если Лев(Отправитель, 3) = "2AE" Тогда
			СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО;
		ИначеЕсли Лев(Отправитель, 3) = "2AL" Тогда
			СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском;		
		КонецЕсли;
		ОписаниеСоединения = СервисЭДО.СоединениеССервисом(СпособОбмена);
		СоединениеHTTP = ОписаниеСоединения.HTTPСоединение;
	КонецЕсли;
	
	Если СоединениеHTTP = Неопределено Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru='ЭПД.Соединение с сервером'", ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка, , , 
					НСтр("ru='Не удалось установить соединение'", ОбщегоНазначения.КодОсновногоЯзыка()));
		Возврат Неопределено;
	КонецЕсли;
	
	АдресРесурса = "/epd/v1/GetQR/?gis_uid=" + СтрЗаменить(УИДМинтранс, "-", "") + "&format=gif";
	ЗапросHTTP = Новый HTTPЗапрос(АдресРесурса);
	ЗапросHTTP.Заголовки.Вставить("Special-key", Токен);
			
	ОтветHTTP = СоединениеHTTP.Получить(ЗапросHTTP);
	Если ОтветHTTP.КодСостояния <> 200 Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru='ЭПД.Получение QR'", ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка, , , ОтветHTTP.ПолучитьТелоКакСтроку());
		Возврат Неопределено;
	КонецЕсли;
	
	ДвоичныеДанныеОтвета = ОтветHTTP.ПолучитьТелоКакДвоичныеДанные();
	
	// Распаковка
	Поток = ДвоичныеДанныеОтвета.ОткрытьПотокДляЧтения(); 
	ЧтениеZip = Новый ЧтениеZipФайла(Поток);
	
	ТекстОшибки = "";
	ВременныйКаталог = "";	
	ЭлементZipФайлаQR = Неопределено;
	Для Каждого ЭлементАрхива Из ЧтениеZip.Элементы Цикл
		Если ЭлементАрхива.Расширение = "gif" Тогда
			ЭлементZipФайлаQR = ЭлементАрхива;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭлементZipФайлаQR = Неопределено Тогда
		ТекстОшибки = НСтр("ru='Оператор вернул неверный формат QR-кода'", ОбщегоНазначения.КодОсновногоЯзыка());	
	Иначе	
		Попытка
			ВременныйКаталог = ФайловаяСистема.СоздатьВременныйКаталог();
			ЧтениеZip.Извлечь(ЭлементZipФайлаQR, ВременныйКаталог);
		Исключение
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось извлечь файл %1 из архива по причине:'"),
				ЭлементZipФайлаQR.Имя);
			ТекстОшибки = ТекстОшибки + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
	КонецЕсли;
		
	ЧтениеZip.Закрыть();
	Поток.Закрыть();
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		
		Если ЗначениеЗаполнено(ВременныйКаталог) Тогда
			ФайловаяСистема.УдалитьВременныйКаталог(ВременныйКаталог);
		КонецЕсли;
		
		ЗаписьЖурналаРегистрации(НСтр("ru='ЭПД.Получение QR'", ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		Возврат Неопределено;
	КонецЕсли; 
	
	ДвоичныеДанныеQR = Новый ДвоичныеДанные(ВременныйКаталог + ЭлементZipФайлаQR.Имя);
	
	Если ЗначениеЗаполнено(ВременныйКаталог) Тогда
		ФайловаяСистема.УдалитьВременныйКаталог(ВременныйКаталог);
	КонецЕсли;
	
	Возврат ДвоичныеДанныеQR;
	
КонецФункции

Функция ОтправитьПисьмаСQRКодами(МассивДляОтправки)
	
	Результат = Новый Массив;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
		МодульРаботаСПочтовымиСообщениями = ОбщегоНазначения.ОбщийМодуль("РаботаСПочтовымиСообщениями");
	Иначе
		Возврат Результат;	
	КонецЕсли;
	
	ДоступныеУчетныеЗаписи = МодульРаботаСПочтовымиСообщениями.ДоступныеУчетныеЗаписи(Истина,,Истина);
	
	Если ДоступныеУчетныеЗаписи.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
		
	УчетнаяЗапись = ДоступныеУчетныеЗаписи[0].Ссылка;
		
	Письма = Новый Массив;
	СоответствиеПисем = Новый Соответствие;
	Для Каждого СтруктураОтправки Из МассивДляОтправки Цикл
		Письмо = Новый ИнтернетПочтовоеСообщение();
		
		Вложение = Письмо.Вложения.Добавить(СтруктураОтправки.ДвоичныеДанныеQR, "QR");
		Вложение.Идентификатор = "QR";
		Вложение.СпособКодирования = СпособКодированияИнтернетПочтовогоВложения.MIME;
		Вложение.ТипСодержимого = "image/gif";
		
		Письмо.Тема = СтрШаблон(ТекстЗаголовкаПисьмаQR(СтруктураОтправки.ТипДокумента), СтруктураОтправки.НомерДокумента, Формат(СтруктураОтправки.ДатаДокумента, "ДЛФ=D;"));
		Письмо.Тексты.Добавить(СтрШаблон(ТекстПисьмаQR(), СтруктураОтправки.УИД), ТипТекстаПочтовогоСообщения.HTML);		
			
		Для Каждого Получатель Из СтруктураОтправки.Получатели Цикл
			Письмо.Получатели.Добавить(Получатель);
		КонецЦикла;
		Письма.Добавить(Письмо);
		
		СоответствиеПисем.Вставить(Письмо, СтруктураОтправки.ЭлектронныйДокумент);
	КонецЦикла;
	
	РезультатОтправки = МодульРаботаСПочтовымиСообщениями.ОтправитьПисьма(УчетнаяЗапись, Письма);
	
	Для Каждого КиЗ Из РезультатОтправки Цикл
		Если КиЗ.Значение.ОшибочныеПолучатели.Количество() < КиЗ.Ключ.Получатели.Количество() Тогда
			Результат.Добавить(СоответствиеПисем.Получить(КиЗ.Ключ));	
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура УдалитьПросроченныеОтправкиQRКодов()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.Текст = "ВЫБРАТЬ
	|	ОтправкиQRКодовЭПД.Отправитель,
	|	ОтправкиQRКодовЭПД.ЭлектронныйДокумент
	|ИЗ
	|	РегистрСведений.ОтправкиQRКодовЭПД КАК ОтправкиQRКодовЭПД
	|ГДЕ
	|	ОтправкиQRКодовЭПД.ДатаНачалаПолучения > ДАТАВРЕМЯ(1, 1, 1)
	|	И РАЗНОСТЬДАТ(ОтправкиQRКодовЭПД.ДатаНачалаПолучения, &ТекущаяДата, ДЕНЬ) > 30";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Набор = РегистрыСведений.ОтправкиQRКодовЭПД.СоздатьНаборЗаписей();
		Набор.Отбор.Отправитель.Установить(Выборка.Отправитель);
		Набор.Отбор.ЭлектронныйДокумент.Установить(Выборка.ЭлектронныйДокумент);
		Набор.Записать();	
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьДанныеJSON(СтрокаJSON)
	
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	Попытка
		Данные = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru='ЭПД.Получение токена авторизации'", ОбщегоНазначения.КодОсновногоЯзыка()),
						УровеньЖурналаРегистрации.Ошибка, , , 
						НСтр("ru='Получены неверные данные от оператора'", ОбщегоНазначения.КодОсновногоЯзыка()));
		Возврат Неопределено;
	КонецПопытки;

	Возврат Данные;
		
КонецФункции

Функция ШагиТребующиеПросмотрМП()
	
	СоответствиеТитуловИШагов = СоответствиеТитуловИШагов();
	
	Результат = Новый Массив;
	Результат.Добавить(СоответствиеТитуловИШагов.Получить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул7));
	Результат.Добавить(СоответствиеТитуловИШагов.Получить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ДопТитул7));
	Результат.Добавить(СоответствиеТитуловИШагов.Получить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул8));
	Результат.Добавить(СоответствиеТитуловИШагов.Получить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ДопТитул8));
	
	Возврат Результат;
	
КонецФункции

Функция ТипыРегламентовЭПД()
	
	Результат = Новый Массив;
	
	Результат.Добавить(Перечисления.ТипыРегламентовЭДО.ЭТрН);
	Результат.Добавить(Перечисления.ТипыРегламентовЭДО.ЭЗН);
	Результат.Добавить(Перечисления.ТипыРегламентовЭДО.ЭСВ);
	Результат.Добавить(Перечисления.ТипыРегламентовЭДО.ЭЗЗ);
	Результат.Добавить(Перечисления.ТипыРегламентовЭДО.ЭПЛ);
	Результат.Добавить(Перечисления.ТипыРегламентовЭДО.ЭДФ);
	
	Возврат Результат;
	
КонецФункции

Функция ПредыдущийПарныйТитул(ТитулСообщения)
	
	Результат = Неопределено;
	
	Если ТитулСообщения = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул2 Тогда
		Результат = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул1;
	ИначеЕсли ТитулСообщения = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул4 Тогда
		Результат = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул3;
	ИначеЕсли ТитулСообщения = Перечисления.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул5 Тогда
		Результат = Перечисления.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул4;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаСостоянияСообщений()
	Возврат
		"ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка КАК Ссылка,
		|	СообщениеЭДО.ТипЭлементаРегламента КАК ТипЭлементаРегламента,
		|	СообщениеЭДО.Состояние КАК Состояние,
		|	СообщениеЭДО.Статус КАК Статус,
		|	СообщениеЭДО.Направление КАК Направление
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|ГДЕ
		|	СообщениеЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент";
КонецФункции

Процедура ЗаписатьСостояниеДокумента(ЭлектронныйДокумент, Состояние, СостояниеДополнение, ДатаИзменения, Комментарий = "")
	МенеджерЗаписи = РегистрыСведений.СостоянияДокументовЭДО.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ЭлектронныйДокумент = ЭлектронныйДокумент;
	МенеджерЗаписи.Состояние = Состояние;
	МенеджерЗаписи.СостояниеДополнение = СостояниеДополнение;
	МенеджерЗаписи.ДатаИзменения = ДатаИзменения;
	МенеджерЗаписи.Комментарий = Комментарий;
	МенеджерЗаписи.Записать();
КонецПроцедуры

Функция НайтиСоздатьЭПД(ДеревоДляСовместимостиСБЭД, ДеревоРазбора, ПараметрыОбработки, НайденныйОбъект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЭПД = НайденныйОбъект;
	
	СтрокаОбъектXDTO = ДеревоДляСовместимостиСБЭД.Строки.Найти("ОбъектXDTO", "ПолныйПуть");
	ОбъектXDTO = СтрокаОбъектXDTO.Значение;
	
	КлючеваяИнформацияПоТитулу = КлючеваяИнформацияПоТитулу(ОбъектXDTO);
	
	Если КлючеваяИнформацияПоТитулу.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭТрН Тогда
		МенеджерОбъекта = Документы.ЭлектроннаяТранспортнаяНакладная;
	ИначеЕсли КлючеваяИнформацияПоТитулу.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭЗН Тогда
		МенеджерОбъекта = Документы.ЭлектронныйЗаказНаряд;
	ИначеЕсли КлючеваяИнформацияПоТитулу.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭСВ Тогда
		МенеджерОбъекта = Документы.ЭлектроннаяСопроводительнаяВедомость;
	ИначеЕсли КлючеваяИнформацияПоТитулу.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭЗЗ Тогда
		МенеджерОбъекта = Документы.ЭлектронныйЗаказЗаявка;
	ИначеЕсли КлючеваяИнформацияПоТитулу.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭПЛ Тогда
		МенеджерОбъекта = Документы.ЭлектронныйПутевойЛист;
	ИначеЕсли КлючеваяИнформацияПоТитулу.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭДФ Тогда
		МенеджерОбъекта = Документы.ЭлектронныйДоговорФрахтования;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭПД) Тогда 
		ДокументОбъект = ЭПД.ПолучитьОбъект();
	Иначе
		Запрос = Новый Запрос;
		ДопОтбор = "";
		ИмяДокумента = ИмяДокументаПоТипу(КлючеваяИнформацияПоТитулу.ТипДокумента);
		
		Если КлючеваяИнформацияПоТитулу.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭТрН
			Или КлючеваяИнформацияПоТитулу.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭСВ Тогда
			ИдентификаторГрузоотправителя = КлючеваяИнформацияПоТитулу.Грузоотправитель;
			ИдентификаторГрузоперевозчика = КлючеваяИнформацияПоТитулу.Грузоперевозчик;
			ИдентификаторГрузополучателя = КлючеваяИнформацияПоТитулу.Грузополучатель;
			Если ИдентификаторГрузоперевозчика = ПараметрыОбработки.ИдентификаторПолучателя Тогда
				РольУчастника = 1;
			ИначеЕсли ИдентификаторГрузоотправителя = ПараметрыОбработки.ИдентификаторПолучателя Тогда
				РольУчастника = 3;
			ИначеЕсли ИдентификаторГрузополучателя = ПараметрыОбработки.ИдентификаторПолучателя Тогда
				РольУчастника = 2;
			Иначе
				// Иной получатель
				РольУчастника = 9;
			КонецЕсли;
			Запрос.УстановитьПараметр("РольУчастника", РольУчастника);
			ДопОтбор = ДопОтбор + "
								|	И Док.РольУчастника = &РольУчастника";						
		ИначеЕсли КлючеваяИнформацияПоТитулу.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭЗН
			Или КлючеваяИнформацияПоТитулу.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭДФ Тогда
			ИдентификаторФрахтователя = КлючеваяИнформацияПоТитулу.Грузоотправитель;
			ИдентификаторФрахтовщика = КлючеваяИнформацияПоТитулу.Грузоперевозчик;
			Если ИдентификаторФрахтовщика = ПараметрыОбработки.ИдентификаторПолучателя Тогда
				РольУчастника = 1;
			ИначеЕсли ИдентификаторФрахтователя = ПараметрыОбработки.ИдентификаторПолучателя Тогда
				РольУчастника = 3;
			КонецЕсли;
			Запрос.УстановитьПараметр("РольУчастника", РольУчастника);
			ДопОтбор = ДопОтбор + "
								|	И Док.РольУчастника = &РольУчастника";
		ИначеЕсли КлючеваяИнформацияПоТитулу.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭЗЗ Тогда
			ИдентификаторГрузоотправителя = КлючеваяИнформацияПоТитулу.Грузоотправитель;
			ИдентификаторГрузоперевозчика = КлючеваяИнформацияПоТитулу.Грузоперевозчик;
			Если ИдентификаторГрузоперевозчика = ПараметрыОбработки.ИдентификаторПолучателя Тогда
				РольУчастника = 1;
			ИначеЕсли ИдентификаторГрузоотправителя = ПараметрыОбработки.ИдентификаторПолучателя Тогда
				РольУчастника = 3;
			Иначе
				// Иной получатель
				РольУчастника = 9;
			КонецЕсли;
			Запрос.УстановитьПараметр("РольУчастника", РольУчастника);
			ДопОтбор = ДопОтбор + "
								|	И Док.РольУчастника = &РольУчастника";
		ИначеЕсли КлючеваяИнформацияПоТитулу.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭПЛ Тогда
			РольУчастника = 0;
			Если ПараметрыОбработки.ИдентификаторПолучателя = КлючеваяИнформацияПоТитулу.Оформитель Тогда
				РольУчастника = РольУчастника + 1;
			КонецЕсли;
			Если ПараметрыОбработки.ИдентификаторПолучателя = КлючеваяИнформацияПоТитулу.Медосмотр Тогда
				РольУчастника = РольУчастника + 2;
			КонецЕсли;
			Если ПараметрыОбработки.ИдентификаторПолучателя = КлючеваяИнформацияПоТитулу.Техконтроль Тогда
				РольУчастника = РольУчастника + 4;
			КонецЕсли;
			Если ПараметрыОбработки.ИдентификаторПолучателя = КлючеваяИнформацияПоТитулу.Одометр Тогда
				РольУчастника = РольУчастника + 8;
			КонецЕсли;
		КонецЕсли;
		Запрос.Текст = "ВЫБРАТЬ Док.Ссылка ИЗ Документ." + ИмяДокумента + " КАК Док 
								|ГДЕ 
								|	Док.Организация = &Организация
								|	И ВЫРАЗИТЬ(Док." + КлючеваяИнформацияПоТитулу.ПолеПоиска + " КАК СТРОКА(300))  = &ЗначениеПоиска" + ДопОтбор;
		Запрос.УстановитьПараметр("ЗначениеПоиска", КлючеваяИнформацияПоТитулу.ЗначениеИДПоиска);
		Запрос.УстановитьПараметр("Организация", ПараметрыОбработки.Получатель);
		Выборка = Запрос.Выполнить().Выбрать();
		СсылкаПоИдФайла = Неопределено;
		Если Выборка.Следующий() Тогда
			СсылкаПоИдФайла = Выборка.Ссылка;
		КонецЕсли;
		Если ЗначениеЗаполнено(СсылкаПоИдФайла) Тогда
			ДокументОбъект = СсылкаПоИдФайла.ПолучитьОбъект();
			Если КлючеваяИнформацияПоТитулу.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭТрН Тогда
				// Может быть переадресовка
				ДокументОбъект.ИдентификаторГрузополучателя = ИдентификаторГрузополучателя;			
				// Определим титулы после частичной разгрузки
				Если КлючеваяИнформацияПоТитулу.Титул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул9
					И ОбъектXDTO.ИдФайл <> ДокументОбъект.ТитулУказаниеПереадресИдентификаторФайла
					И ЗначениеЗаполнено(ДокументОбъект.ТитулГрузополучателяИдентификаторФайла) Тогда
					КлючеваяИнформацияПоТитулу.Титул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ДопТитул9;
					КлючеваяИнформацияПоТитулу.ПрефиксТитула = "ДопТитулУказаниеПереадрес";
				ИначеЕсли КлючеваяИнформацияПоТитулу.Титул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул7
					И ОбъектXDTO.ИдФайл <> ДокументОбъект.ТитулПереадресовкаИдентификаторФайла
					И ЗначениеЗаполнено(ДокументОбъект.ТитулГрузополучателяИдентификаторФайла) Тогда
					КлючеваяИнформацияПоТитулу.Титул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ДопТитул7;
					КлючеваяИнформацияПоТитулу.ПрефиксТитула = "ДопТитулПереадресовка";
				ИначеЕсли КлючеваяИнформацияПоТитулу.Титул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул8
					И ОбъектXDTO.ИдФайл <> ДокументОбъект.ТитулПеревозчикаЗаменыИдентификаторФайла
					И ЗначениеЗаполнено(ДокументОбъект.ТитулГрузополучателяИдентификаторФайла) Тогда
					КлючеваяИнформацияПоТитулу.Титул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ДопТитул8;
					КлючеваяИнформацияПоТитулу.ПрефиксТитула = "ДопТитулПеревозчикаЗамены";
				ИначеЕсли КлючеваяИнформацияПоТитулу.Титул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул3
					И ЗначениеЗаполнено(ДокументОбъект.ТитулГрузополучателяИдентификаторФайла)
					И ОбъектXDTO.ИдФайл <> ДокументОбъект.ТитулГрузополучателяИдентификаторФайла
					И КлючеваяИнформацияПоТитулу.ЭтоИсправление = Ложь Тогда
					КлючеваяИнформацияПоТитулу.Титул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ДопТитул3;
					КлючеваяИнформацияПоТитулу.ПрефиксТитула = "ДопТитулГрузополучателя";
				ИначеЕсли КлючеваяИнформацияПоТитулу.Титул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул4
					И ЗначениеЗаполнено(ДокументОбъект.ТитулПеревозчикаВыдачаИдентификаторФайла)
					И ОбъектXDTO.ИдФайл <> ДокументОбъект.ТитулПеревозчикаВыдачаИдентификаторФайла
					И КлючеваяИнформацияПоТитулу.ЭтоИсправление = Ложь Тогда
					КлючеваяИнформацияПоТитулу.Титул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ДопТитул4;	
					КлючеваяИнформацияПоТитулу.ПрефиксТитула = "ДопТитулПеревозчикаВыдача";		
				КонецЕсли;
			КонецЕсли;
		Иначе
			ДокументОбъект = МенеджерОбъекта.СоздатьДокумент();
			ДокументОбъект.ВидДокумента = ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(КлючеваяИнформацияПоТитулу.ТипДокумента);
			ДокументОбъект.ЭтоВходящий = Истина; 
		КонецЕсли;
	КонецЕсли;
	ДокументОбъект.ДополнительныеСвойства.Вставить("СтруктураРеквизитов", Новый Структура);
	
	Если КлючеваяИнформацияПоТитулу.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭЗН
		Или КлючеваяИнформацияПоТитулу.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭДФ Тогда
		ДокументОбъект.ИдентификаторФрахтователя = ИдентификаторФрахтователя;
		ДокументОбъект.ИдентификаторФрахтовщика = ИдентификаторФрахтовщика;
		ДокументОбъект.РольУчастника = РольУчастника;
	ИначеЕсли КлючеваяИнформацияПоТитулу.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭЗЗ Тогда
		ДокументОбъект.ИдентификаторГрузоотправителя = ИдентификаторГрузоотправителя;
		ДокументОбъект.ИдентификаторПеревозчика = ИдентификаторГрузоперевозчика;
		ДокументОбъект.РольУчастника = РольУчастника;
	ИначеЕсли КлючеваяИнформацияПоТитулу.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭПЛ Тогда
		ДокументОбъект.ИдентификаторОформителя = КлючеваяИнформацияПоТитулу.Оформитель;
		Если ЗначениеЗаполнено(ДокументОбъект.ИдентификаторМедорганизации) = Ложь Тогда
			ДокументОбъект.ИдентификаторМедорганизации = КлючеваяИнформацияПоТитулу.Медосмотр;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДокументОбъект.ИдентификаторТехконтроль) = Ложь Тогда
			ДокументОбъект.ИдентификаторТехконтроль = КлючеваяИнформацияПоТитулу.Техконтроль;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДокументОбъект.ИдентификаторПоказанияОдометра) = Ложь Тогда
			ДокументОбъект.ИдентификаторПоказанияОдометра = КлючеваяИнформацияПоТитулу.Одометр;
		КонецЕсли;
		Если РольУчастника > ДокументОбъект.РольУчастника Тогда
			ДокументОбъект.РольУчастника = РольУчастника;
		КонецЕсли;
	Иначе
		ДокументОбъект.ИдентификаторГрузоотправителя = ИдентификаторГрузоотправителя;
		ДокументОбъект.ИдентификаторПеревозчика = ИдентификаторГрузоперевозчика;
		ДокументОбъект.ИдентификаторГрузополучателя = ИдентификаторГрузополучателя;
		Если КлючеваяИнформацияПоТитулу.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭТрН
			Или КлючеваяИнформацияПоТитулу.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭСВ Тогда
			ДокументОбъект.РольУчастника = РольУчастника;
		КонецЕсли;
	КонецЕсли;
		
	МакетСоответствиеИмен = МенеджерОбъекта.ПолучитьМакет("СоответствиеИменРеквизитов"
											+ ПостфиксМакетаПоНомеруВерсии(КлючеваяИнформацияПоТитулу.ВерсияФормата));
	ОбластьПоискаИмен = МакетСоответствиеИмен.ПолучитьОбласть(КлючеваяИнформацияПоТитулу.ПрефиксТитула);
	
	ЗаполнитьЭПДПоОбъектуXDTOРекурсивно(ОбъектXDTO, ДокументОбъект, ОбластьПоискаИмен, Новый Соответствие, "//Файл");
	
	Если КлючеваяИнформацияПоТитулу.Титул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул1 Тогда
		ДокументОбъект.ТитулГрузоотправителяТранспортнаяНакладнаяНомер = КлючеваяИнформацияПоТитулу.Номер;
		ДокументОбъект.ТитулГрузоотправителяТранспортнаяНакладнаяДата = КлючеваяИнформацияПоТитулу.Дата;
		Если КлючеваяИнформацияПоТитулу.ПоДоверенности = Истина Тогда
			ДокументОбъект.СсылкаТитулГрузоотправителяСоставитель = ПараметрыОбработки.Отправитель;	
			ДокументОбъект.ДополнительныеСвойства.СтруктураРеквизитов.Вставить(
				"СсылкаТитулГрузоотправителяСоставитель", 
				ДокументОбъект.СсылкаТитулГрузоотправителяСоставитель);
		Иначе
			ДокументОбъект.СсылкаТитулГрузоотправителяГрузоотправитель = ПараметрыОбработки.Отправитель;
			ДокументОбъект.ДополнительныеСвойства.СтруктураРеквизитов.Вставить(
				"СсылкаТитулГрузоотправителяГрузоотправитель", 
				ДокументОбъект.СсылкаТитулГрузоотправителяГрузоотправитель);
		КонецЕсли;
		ОрганизацияПолучателяПоНастройкам = Неопределено;
		Если ДокументОбъект.РольУчастника = 1 Тогда
			ДокументОбъект.СсылкаТитулГрузоотправителяПеревозчик = ПараметрыОбработки.Получатель;
			ДокументОбъект.ДополнительныеСвойства.СтруктураРеквизитов.Вставить(
				"СсылкаТитулГрузоотправителяПеревозчик", 
				ДокументОбъект.СсылкаТитулГрузоотправителяПеревозчик);
			Если ИдентификаторГрузоотправителя = ИдентификаторГрузополучателя Тогда
				Если КлючеваяИнформацияПоТитулу.ПоДоверенности = Истина Тогда
					ДокументОбъект.СсылкаТитулГрузоотправителяГрузополучатель = ДокументОбъект.СсылкаТитулГрузоотправителяСоставитель;	
				Иначе
					ДокументОбъект.СсылкаТитулГрузоотправителяГрузополучатель = ДокументОбъект.СсылкаТитулГрузоотправителяГрузоотправитель;	
				КонецЕсли;
			Иначе
				КонтрагентТретьегоУчастника = Неопределено;
				НастройкиОбменаСТретьимУчастником = НастройкиЭДО.ПолучитьНастройкиПолученияПоИдентификаторам(
																										ИдентификаторГрузополучателя,
																										ПараметрыОбработки.ИдентификаторПолучателя, 
																										ОрганизацияПолучателяПоНастройкам, 
																										КонтрагентТретьегоУчастника, Истина);
				Если НастройкиОбменаСТретьимУчастником <> Неопределено Тогда
					ДокументОбъект.СсылкаТитулГрузоотправителяГрузополучатель = НастройкиОбменаСТретьимУчастником.Контрагент;
				КонецЕсли;
			КонецЕсли;
			ДокументОбъект.ДополнительныеСвойства.СтруктураРеквизитов.Вставить(
				"СсылкаТитулГрузоотправителяГрузополучатель", 
				ДокументОбъект.СсылкаТитулГрузоотправителяГрузополучатель);
		ИначеЕсли ДокументОбъект.РольУчастника = 2 Тогда
			ДокументОбъект.СсылкаТитулГрузоотправителяГрузополучатель = ПараметрыОбработки.Получатель;
			ДокументОбъект.ДополнительныеСвойства.СтруктураРеквизитов.Вставить(
				"СсылкаТитулГрузоотправителяГрузополучатель", 
				ДокументОбъект.СсылкаТитулГрузоотправителяГрузополучатель);
			КонтрагентТретьегоУчастника = Неопределено;
			НастройкиОбменаСТретьимУчастником = НастройкиЭДО.ПолучитьНастройкиПолученияПоИдентификаторам(																								
																									ИдентификаторГрузоперевозчика, 
																									ПараметрыОбработки.ИдентификаторПолучателя,
																									ОрганизацияПолучателяПоНастройкам, 
																									КонтрагентТретьегоУчастника, Истина);
			Если НастройкиОбменаСТретьимУчастником <> Неопределено Тогда
				ДокументОбъект.СсылкаТитулГрузоотправителяПеревозчик = НастройкиОбменаСТретьимУчастником.Контрагент;
				ДокументОбъект.ДополнительныеСвойства.СтруктураРеквизитов.Вставить(
					"СсылкаТитулГрузоотправителяПеревозчик", 
					ДокументОбъект.СсылкаТитулГрузоотправителяПеревозчик);
			КонецЕсли;
		ИначеЕсли ДокументОбъект.РольУчастника = 9 Тогда
			ДокументОбъект.Организация = ПараметрыОбработки.Получатель;
			// Попробуем определить ссылки на участников перевозки, если мы являемся иным получателем
			// Грузоотправитель
			КонтрагентТретьегоУчастника = Неопределено;
			НастройкиОбменаСТретьимУчастником = НастройкиЭДО.ПолучитьНастройкиПолученияПоИдентификаторам(																								
																									ИдентификаторГрузоотправителя, 
																									ПараметрыОбработки.ИдентификаторПолучателя,
																									ОрганизацияПолучателяПоНастройкам, 
																									КонтрагентТретьегоУчастника, Истина);
			Если НастройкиОбменаСТретьимУчастником <> Неопределено Тогда
				Если КлючеваяИнформацияПоТитулу.ПоДоверенности = Истина Тогда
					ДокументОбъект.СсылкаТитулГрузоотправителяСоставитель = НастройкиОбменаСТретьимУчастником.Контрагент;
					ДокументОбъект.ДополнительныеСвойства.СтруктураРеквизитов.Вставить(
						"СсылкаТитулГрузоотправителяСоставитель", 
						ДокументОбъект.СсылкаТитулГрузоотправителяСоставитель);	
				Иначе
					ДокументОбъект.СсылкаТитулГрузоотправителяГрузоотправитель = НастройкиОбменаСТретьимУчастником.Контрагент;
					ДокументОбъект.ДополнительныеСвойства.СтруктураРеквизитов.Вставить(
						"СсылкаТитулГрузоотправителяГрузоотправитель", 
						ДокументОбъект.СсылкаТитулГрузоотправителяГрузоотправитель);
				КонецЕсли;
			КонецЕсли;
			// Перевозчик
			КонтрагентТретьегоУчастника = Неопределено;
			НастройкиОбменаСТретьимУчастником = НастройкиЭДО.ПолучитьНастройкиПолученияПоИдентификаторам(																								
																									ИдентификаторГрузоперевозчика, 
																									ПараметрыОбработки.ИдентификаторПолучателя,
																									ОрганизацияПолучателяПоНастройкам, 
																									КонтрагентТретьегоУчастника, Истина);
			Если НастройкиОбменаСТретьимУчастником <> Неопределено Тогда
				ДокументОбъект.СсылкаТитулГрузоотправителяПеревозчик = НастройкиОбменаСТретьимУчастником.Контрагент;
				ДокументОбъект.ДополнительныеСвойства.СтруктураРеквизитов.Вставить(
					"СсылкаТитулГрузоотправителяПеревозчик", 
					ДокументОбъект.СсылкаТитулГрузоотправителяПеревозчик);
			КонецЕсли;
			// Грузополучатель
			КонтрагентТретьегоУчастника = Неопределено;
			НастройкиОбменаСТретьимУчастником = НастройкиЭДО.ПолучитьНастройкиПолученияПоИдентификаторам(																								
																									ИдентификаторГрузополучателя, 
																									ПараметрыОбработки.ИдентификаторПолучателя,
																									ОрганизацияПолучателяПоНастройкам, 
																									КонтрагентТретьегоУчастника, Истина);
			Если НастройкиОбменаСТретьимУчастником <> Неопределено Тогда
				ДокументОбъект.СсылкаТитулГрузоотправителяГрузополучатель = НастройкиОбменаСТретьимУчастником.Контрагент;
				ДокументОбъект.ДополнительныеСвойства.СтруктураРеквизитов.Вставить(
					"СсылкаТитулГрузоотправителяГрузополучатель", 
					ДокументОбъект.СсылкаТитулГрузоотправителяГрузополучатель);
			КонецЕсли;
		КонецЕсли;		
	ИначеЕсли КлючеваяИнформацияПоТитулу.Титул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул1_1
		Или КлючеваяИнформацияПоТитулу.Титул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул1_2
		Или КлючеваяИнформацияПоТитулу.Титул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул1_5 Тогда
		ДокументОбъект.ТитулПеревозчикаПорядковыйНомерСопроводительнойВедомости = КлючеваяИнформацияПоТитулу.Номер;
		ДокументОбъект.ТитулПеревозчикаДатаСоставленияСопроводительнойВедомости = КлючеваяИнформацияПоТитулу.Дата;
		ДокументОбъект.СсылкаТитулПеревозчикаПеревозчик = ПараметрыОбработки.Отправитель;
		ДокументОбъект.ДополнительныеСвойства.СтруктураРеквизитов.Вставить(
			"СсылкаТитулПеревозчикаПеревозчик", 
			ДокументОбъект.СсылкаТитулПеревозчикаПеревозчик);
		ОрганизацияПолучателяПоНастройкам = Неопределено;
		КонтрагентТретьегоУчастника = Неопределено;
		Если ДокументОбъект.РольУчастника = 2 Тогда
			ДокументОбъект.СсылкаТитулПеревозчикаГрузополучатель = ПараметрыОбработки.Получатель;
			ДокументОбъект.ДополнительныеСвойства.СтруктураРеквизитов.Вставить(
				"СсылкаТитулПеревозчикаГрузополучатель", 
				ДокументОбъект.СсылкаТитулПеревозчикаГрузополучатель);
			КонтрагентТретьегоУчастника = Неопределено;
			НастройкиОбменаСТретьимУчастником = НастройкиЭДО.ПолучитьНастройкиПолученияПоИдентификаторам(
																									ИдентификаторГрузоотправителя,
																									ПараметрыОбработки.ИдентификаторПолучателя, 
																									ОрганизацияПолучателяПоНастройкам, 
																									КонтрагентТретьегоУчастника, Истина);
			Если НастройкиОбменаСТретьимУчастником <> Неопределено Тогда
				ДокументОбъект.СсылкаТитулПеревозчикаГрузоотправитель = НастройкиОбменаСТретьимУчастником.Контрагент;
				ДокументОбъект.ДополнительныеСвойства.СтруктураРеквизитов.Вставить(
					"СсылкаТитулПеревозчикаГрузоотправитель", 
					ДокументОбъект.СсылкаТитулПеревозчикаГрузоотправитель);
			КонецЕсли;
		ИначеЕсли ДокументОбъект.РольУчастника = 3 Тогда
			ДокументОбъект.СсылкаТитулПеревозчикаГрузоотправитель = ПараметрыОбработки.Получатель;
			ДокументОбъект.ДополнительныеСвойства.СтруктураРеквизитов.Вставить(
				"СсылкаТитулПеревозчикаГрузоотправитель", 
				ДокументОбъект.СсылкаТитулПеревозчикаГрузоотправитель);
			КонтрагентТретьегоУчастника = Неопределено;
			НастройкиОбменаСТретьимУчастником = НастройкиЭДО.ПолучитьНастройкиПолученияПоИдентификаторам(																								
																									ИдентификаторГрузополучателя, 
																									ПараметрыОбработки.ИдентификаторПолучателя,
																									ОрганизацияПолучателяПоНастройкам, 
																									КонтрагентТретьегоУчастника, Истина);
			Если НастройкиОбменаСТретьимУчастником <> Неопределено Тогда
				ДокументОбъект.СсылкаТитулПеревозчикаГрузополучатель = НастройкиОбменаСТретьимУчастником.Контрагент;
				ДокументОбъект.ДополнительныеСвойства.СтруктураРеквизитов.Вставить(
					"СсылкаТитулПеревозчикаГрузополучатель", 
					ДокументОбъект.СсылкаТитулПеревозчикаГрузополучатель);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли КлючеваяИнформацияПоТитулу.Титул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭЗН_Титул1 Тогда
		ДокументОбъект.ТитулФрахтователяПорядковыйНомерЗаказНаряда = КлючеваяИнформацияПоТитулу.Номер;
		ДокументОбъект.ТитулФрахтователяДатаСоставленияЗаказНаряда = КлючеваяИнформацияПоТитулу.Дата;
		ДокументОбъект.СсылкаТитулФрахтователяФрахтователь = ПараметрыОбработки.Отправитель;
		ДокументОбъект.СсылкаТитулФрахтователяФрахтовщик = ПараметрыОбработки.Получатель;
		ДокументОбъект.ДополнительныеСвойства.СтруктураРеквизитов.Вставить(
			"СсылкаТитулФрахтователяФрахтователь", 
			ДокументОбъект.СсылкаТитулФрахтователяФрахтователь);
		ДокументОбъект.ДополнительныеСвойства.СтруктураРеквизитов.Вставить(
			"СсылкаТитулФрахтователяФрахтовщик", 
			ДокументОбъект.СсылкаТитулФрахтователяФрахтовщик);
	ИначеЕсли КлючеваяИнформацияПоТитулу.Титул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭЗЗ_Титул1 Тогда
		ДокументОбъект.ТитулГрузоотправителяЗаказНомер = КлючеваяИнформацияПоТитулу.Номер;
		ДокументОбъект.ТитулГрузоотправителяЗаказДата = КлючеваяИнформацияПоТитулу.Дата;
		
		Если ДокументОбъект.РольУчастника = 9 Тогда
			ДокументОбъект.Организация = ПараметрыОбработки.Получатель;
			// Попробуем определить ссылки на участников перевозки, если мы являемся иным получателем
			// Грузоотправитель
			КонтрагентТретьегоУчастника = Неопределено;
			НастройкиОбменаСТретьимУчастником = ОтражениеВУчетеЭДО.ПолучитьНастройкиПолученияПоИдентификаторам(																								
																									ИдентификаторГрузоотправителя, 
																									ПараметрыОбработки.ИдентификаторПолучателя,
																									ОрганизацияПолучателяПоНастройкам, 
																									КонтрагентТретьегоУчастника, Истина);
			Если НастройкиОбменаСТретьимУчастником <> Неопределено Тогда
				Если КлючеваяИнформацияПоТитулу.ПоДоверенности = Истина Тогда
					ДокументОбъект.СсылкаТитулГрузоотправителяСоставитель = НастройкиОбменаСТретьимУчастником.Контрагент;	
				Иначе
					ДокументОбъект.СсылкаТитулГрузоотправителяГрузоотправитель = НастройкиОбменаСТретьимУчастником.Контрагент;
				КонецЕсли;
			КонецЕсли;
			// Перевозчик
			КонтрагентТретьегоУчастника = Неопределено;
			НастройкиОбменаСТретьимУчастником = ОтражениеВУчетеЭДО.ПолучитьНастройкиПолученияПоИдентификаторам(																								
																									ИдентификаторГрузоперевозчика, 
																									ПараметрыОбработки.ИдентификаторПолучателя,
																									ОрганизацияПолучателяПоНастройкам, 
																									КонтрагентТретьегоУчастника, Истина);
			Если НастройкиОбменаСТретьимУчастником <> Неопределено Тогда
				ДокументОбъект.СсылкаТитулГрузоотправителяПеревозчик = НастройкиОбменаСТретьимУчастником.Контрагент;
			КонецЕсли;
		Иначе
			ДокументОбъект.СсылкаТитулГрузоотправителяГрузоотправитель = ПараметрыОбработки.Отправитель;
			ДокументОбъект.СсылкаТитулГрузоотправителяПеревозчик = ПараметрыОбработки.Получатель;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(ДокументОбъект.СсылкаТитулГрузоотправителяСоставитель) Тогда
			ДокументОбъект.ДополнительныеСвойства.СтруктураРеквизитов.Вставить(
						"СсылкаТитулГрузоотправителяСоставитель", 
						ДокументОбъект.СсылкаТитулГрузоотправителяСоставитель);	
		КонецЕсли;
		
		ДокументОбъект.ДополнительныеСвойства.СтруктураРеквизитов.Вставить(
			"СсылкаТитулГрузоотправителяГрузоотправитель", 
			ДокументОбъект.СсылкаТитулГрузоотправителяГрузоотправитель);
		ДокументОбъект.ДополнительныеСвойства.СтруктураРеквизитов.Вставить(
			"СсылкаТитулГрузоотправителяПеревозчик", 
			ДокументОбъект.СсылкаТитулГрузоотправителяПеревозчик);
		ДокументОбъект.ДополнительныеСвойства.СтруктураРеквизитов.Свойство(
				"ТитулГрузоотправителяФункция", 
				ДокументОбъект.ТитулГрузоотправителяФункция);
	
	ИначеЕсли КлючеваяИнформацияПоТитулу.Титул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул1 Тогда
		ДокументОбъект.ТитулОформлениеНомерПутевогоЛиста = КлючеваяИнформацияПоТитулу.Номер;
		ДокументОбъект.ТитулОформлениеДатаПутевогоЛиста = КлючеваяИнформацияПоТитулу.Дата;
		
		ДокументОбъект.ДополнительныеСвойства.СтруктураРеквизитов.Свойство(
				"ТитулОформлениеПризнакНачалаРейса", 
				ДокументОбъект.ТитулОформлениеПризнакНачалаРейса);
		ДокументОбъект.ДополнительныеСвойства.СтруктураРеквизитов.Свойство(
				"ТитулОформлениеОбязательностьМедОсмотраПосле", 
				ДокументОбъект.ТитулОформлениеОбязательностьМедОсмотраПосле);
		
		ДокументОбъект.Организация = ПараметрыОбработки.Получатель;
		Если ДокументОбъект.СсылкаТитулОформлениеОформитель <> ДокументОбъект.Организация Тогда
			ДокументОбъект.СсылкаТитулОформлениеОформитель = ПараметрыОбработки.Отправитель;
		КонецЕсли;
		
		// Попробуем определить ссылки на участников перевозки
		// Медорганизация
		Если ОбменСГИСЭПДКлиентСервер.ВхождениеРоли(РольУчастника, 2) = Истина Тогда
			ДокументОбъект.СсылкаТитулОформлениеМедорганизация = ПараметрыОбработки.Получатель;
		Иначе	
			КонтрагентТретьегоУчастника = Неопределено;
			НастройкиОбменаСТретьимУчастником = ОтражениеВУчетеЭДО.ПолучитьНастройкиПолученияПоИдентификаторам(																								
																									КлючеваяИнформацияПоТитулу.Медосмотр, 
																									ПараметрыОбработки.ИдентификаторПолучателя,
																									ОрганизацияПолучателяПоНастройкам, 
																									КонтрагентТретьегоУчастника, Истина);
			Если НастройкиОбменаСТретьимУчастником <> Неопределено Тогда
				ДокументОбъект.СсылкаТитулОформлениеМедорганизация = НастройкиОбменаСТретьимУчастником.Контрагент;
			КонецЕсли;
		КонецЕсли;
		
		// Техконтроль
		Если ОбменСГИСЭПДКлиентСервер.ВхождениеРоли(РольУчастника, 4) = Истина Тогда
			ДокументОбъект.СсылкаТитулОформлениеТехконтроль = ПараметрыОбработки.Получатель;
		Иначе	
			КонтрагентТретьегоУчастника = Неопределено;
			НастройкиОбменаСТретьимУчастником = ОтражениеВУчетеЭДО.ПолучитьНастройкиПолученияПоИдентификаторам(																								
																									КлючеваяИнформацияПоТитулу.Техконтроль, 
																									ПараметрыОбработки.ИдентификаторПолучателя,
																									ОрганизацияПолучателяПоНастройкам, 
																									КонтрагентТретьегоУчастника, Истина);
			Если НастройкиОбменаСТретьимУчастником <> Неопределено Тогда
				ДокументОбъект.СсылкаТитулОформлениеТехконтроль = НастройкиОбменаСТретьимУчастником.Контрагент;
			КонецЕсли;
		КонецЕсли;
		
		// Одометр
		Если ОбменСГИСЭПДКлиентСервер.ВхождениеРоли(РольУчастника, 8) = Истина Тогда
			ДокументОбъект.СсылкаТитулОформлениеПоказанияОдометра = ПараметрыОбработки.Получатель;
		Иначе	
			КонтрагентТретьегоУчастника = Неопределено;
			НастройкиОбменаСТретьимУчастником = ОтражениеВУчетеЭДО.ПолучитьНастройкиПолученияПоИдентификаторам(																								
																									КлючеваяИнформацияПоТитулу.Одометр, 
																									ПараметрыОбработки.ИдентификаторПолучателя,
																									ОрганизацияПолучателяПоНастройкам, 
																									КонтрагентТретьегоУчастника, Истина);
			Если НастройкиОбменаСТретьимУчастником <> Неопределено Тогда
				ДокументОбъект.СсылкаТитулОформлениеПоказанияОдометра = НастройкиОбменаСТретьимУчастником.Контрагент;
			КонецЕсли;
		КонецЕсли;
		
		ДокументОбъект.ДополнительныеСвойства.СтруктураРеквизитов.Вставить(
			"СсылкаТитулОформлениеОформитель", 
			ДокументОбъект.СсылкаТитулОформлениеОформитель);
		ДокументОбъект.ДополнительныеСвойства.СтруктураРеквизитов.Вставить(
			"СсылкаТитулОформлениеМедорганизация", 
			ДокументОбъект.СсылкаТитулОформлениеМедорганизация);
		ДокументОбъект.ДополнительныеСвойства.СтруктураРеквизитов.Вставить(
			"СсылкаТитулОформлениеТехконтроль", 
			ДокументОбъект.СсылкаТитулОформлениеТехконтроль);
		ДокументОбъект.ДополнительныеСвойства.СтруктураРеквизитов.Вставить(
			"СсылкаТитулОформлениеПоказанияОдометра", 
			ДокументОбъект.СсылкаТитулОформлениеПоказанияОдометра);
	ИначеЕсли КлючеваяИнформацияПоТитулу.Титул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭДФ_Титул1 Тогда
		ДокументОбъект.СсылкаТитулФрахтователяФрахтователь = ПараметрыОбработки.Отправитель;
		ДокументОбъект.СсылкаТитулФрахтователяФрахтовщик = ПараметрыОбработки.Получатель;
		ДокументОбъект.ДополнительныеСвойства.СтруктураРеквизитов.Вставить(
			"СсылкаТитулФрахтователяФрахтователь", 
			ДокументОбъект.СсылкаТитулФрахтователяФрахтователь);
		ДокументОбъект.ДополнительныеСвойства.СтруктураРеквизитов.Вставить(
			"СсылкаТитулФрахтователяФрахтовщик", 
			ДокументОбъект.СсылкаТитулФрахтователяФрахтовщик);
	КонецЕсли;		
	ДокументОбъект.Дата = ТекущаяДатаСеанса();
	Если СтрНачинаетсяС(ОбъектXDTO.ИдФайл, "ON_SOPVEDPER2") Тогда
		ДокументОбъект.ВидОперации = 1;
	ИначеЕсли СтрНачинаетсяС(ОбъектXDTO.ИдФайл, "ON_SOPVEDPER5") Тогда
		ДокументОбъект.ВидОперации = 2;
	КонецЕсли;
	
	Если КлючеваяИнформацияПоТитулу.Титул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул1_3
		Или КлючеваяИнформацияПоТитулу.Титул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул1_4 Тогда
			ДокументОбъект.ДополнительныеСвойства.СтруктураРеквизитов.Вставить(
				"СсылкаДопТитулПеревозчикаПеревозчик", 
				ДокументОбъект.СсылкаТитулПеревозчикаПеревозчик);
			ДокументОбъект.ДополнительныеСвойства.СтруктураРеквизитов.Вставить(
				"СсылкаДопТитулПеревозчикаГрузополучатель", 
				ДокументОбъект.СсылкаТитулПеревозчикаГрузополучатель);
			ДокументОбъект.ДополнительныеСвойства.СтруктураРеквизитов.Вставить(
				"СсылкаДопТитулПеревозчикаГрузоотправитель", 
				ДокументОбъект.СсылкаТитулПеревозчикаГрузоотправитель);
	КонецЕсли;
	
	// При переадресовке (Т7 ЭТрН) может измениться идентификатор грузополучателя
	Если КлючеваяИнформацияПоТитулу.Титул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул7
		Или КлючеваяИнформацияПоТитулу.Титул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ДопТитул7 Тогда
			НовыйГрузополучательСсылка = Неопределено;
			Если КлючеваяИнформацияПоТитулу.ЕстьИные = Истина
				И ОбъектXDTO.ИдПолИной.Количество() > 0 Тогда
				ИдентификаторИногоГрузополучателя = ОбъектXDTO.ИдПолИной[0];
			КонецЕсли;
			Если ДокументОбъект.РольУчастника = 2 Тогда
				Если КлючеваяИнформацияПоТитулу.Титул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул7
					И КлючеваяИнформацияПоТитулу.ЕстьИные = Истина Тогда
					ДокументОбъект.РольУчастника = 9;
				КонецЕсли;
			ИначеЕсли ДокументОбъект.РольУчастника = 9 Тогда
				// Иной получатель в Т7 - это новый ГП
				НовыйГрузополучательСсылка = ПараметрыОбработки.Получатель; 
				ДокументОбъект.РольУчастника = 2;
				ДокументОбъект.ИдентификаторГрузополучателя = ПараметрыОбработки.ИдентификаторПолучателя;
			ИначеЕсли ДокументОбъект.РольУчастника = 3 Тогда
				Если КлючеваяИнформацияПоТитулу.Титул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул7
					И ИдентификаторГрузоотправителя = ИдентификаторИногоГрузополучателя Тогда
					НовыйГрузополучательСсылка = ПараметрыОбработки.Получатель;	
				ИначеЕсли КлючеваяИнформацияПоТитулу.Титул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ДопТитул7
					И ИдентификаторГрузоотправителя = ИдентификаторГрузополучателя Тогда
					НовыйГрузополучательСсылка = ПараметрыОбработки.Получатель;	
				Иначе
					ОрганизацияПолучателяПоНастройкам = Неопределено;
					КонтрагентТретьегоУчастника = Неопределено;
					НастройкиОбменаСГрузополучателем = НастройкиЭДО.ПолучитьНастройкиПолученияПоИдентификаторам(
																											ИдентификаторГрузополучателя,
																											ПараметрыОбработки.ИдентификаторПолучателя, 
																											ОрганизацияПолучателяПоНастройкам, 
																											КонтрагентТретьегоУчастника, Истина);	
					Если НастройкиОбменаСГрузополучателем <> Неопределено Тогда
						НовыйГрузополучательСсылка = НастройкиОбменаСГрузополучателем.Контрагент;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если КлючеваяИнформацияПоТитулу.Титул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул7 Тогда
				ДокументОбъект.СсылкаТитулПереадресовкаНовыйГрузополучатель = НовыйГрузополучательСсылка;
				ДокументОбъект.ДополнительныеСвойства.СтруктураРеквизитов.Вставить(
					"СсылкаТитулПереадресовкаНовыйГрузополучатель", 
					ДокументОбъект.СсылкаТитулПереадресовкаНовыйГрузополучатель);
			ИначеЕсли КлючеваяИнформацияПоТитулу.Титул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ДопТитул7 Тогда
				ДокументОбъект.СсылкаДопТитулПереадресовкаНовыйГрузополучатель = НовыйГрузополучательСсылка;
				ДокументОбъект.ДополнительныеСвойства.СтруктураРеквизитов.Вставить(
					"СсылкаДопТитулПереадресовкаНовыйГрузополучатель", 
					ДокументОбъект.СсылкаДопТитулПереадресовкаНовыйГрузополучатель);
			КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыОбработки.Свойство("ДополнительныеПараметрыКарточки")
		И ПараметрыОбработки.ДополнительныеПараметрыКарточки <> Неопределено Тогда
		Для Каждого КиЗ Из ПараметрыОбработки.ДополнительныеПараметрыКарточки Цикл
			Если СтрНачинаетсяС(КиЗ.Ключ, "Титул") Тогда
				ДокументОбъект.ДополнительныеСвойства.СтруктураРеквизитов.Вставить(
					КиЗ.Ключ, 
					КиЗ.Значение);	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЗаполнитьПредставленияСсылочныхТипов(ДокументОбъект);
	ЗаполнитьПредставлениеХранимыхДанныхОбъекта(ДокументОбъект.ДополнительныеСвойства.СтруктураРеквизитов,
												 ДокументОбъект.Метаданные().ПолноеИмя(), 
												 ОбластьПоискаИмен);
	
	ДатаИВремяФормирования = КлючеваяИнформацияПоТитулу.ДатаВерсии;
	ДатаФормирования = НачалоДня(ДатаИВремяФормирования);
	ВремяФормирования = Дата('00010101') + (ДатаИВремяФормирования - ДатаФормирования);
	
	ДокументОбъект.Организация = ПараметрыОбработки.Получатель;
	ДокументОбъект.УИДМинтранс = КлючеваяИнформацияПоТитулу.МинтрансИД;
	ДокументОбъект[КлючеваяИнформацияПоТитулу.ПрефиксТитула + "ИдентификаторФайла"] = ОбъектXDTO.ИдФайл;
	ДокументОбъект[КлючеваяИнформацияПоТитулу.ПрефиксТитула + "ДатаФормированияФайла"] = ДатаФормирования;
	ДокументОбъект[КлючеваяИнформацияПоТитулу.ПрефиксТитула + "ВремяФормированияФайла"] = ВремяФормирования;
	
	НомерВерсии = 0;
	НужноОтметитьПолученныйТитул = Истина;
	Если ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда
		ЗапросВерсии = Новый Запрос;
		ЗапросВерсии.Текст = "ВЫБРАТЬ
		                     |	МАКСИМУМ(ВерсииТитуловЭПД.НомерВерсии) КАК НомерПоследнейВерсии,
		                     |	МАКСИМУМ(ВЫБОР
		                     |			КОГДА ВерсииТитуловЭПД.ИдентификаторФайла = &ИдентификаторФайла
		                     |					И ВерсииТитуловЭПД.ДатаВерсии = &ДатаВерсии
		                     |				ТОГДА ВерсииТитуловЭПД.НомерВерсии
		                     |			ИНАЧЕ -1
		                     |		КОНЕЦ) КАК НомерЭтойВерсии
		                     |ИЗ
		                     |	РегистрСведений.ВерсииТитуловЭПД КАК ВерсииТитуловЭПД
		                     |ГДЕ
		                     |	ВерсииТитуловЭПД.Документ = &Документ
		                     |	И ВерсииТитуловЭПД.Организация = &Организация
		                     |	И ВерсииТитуловЭПД.Титул = &Титул";
		
		ЗапросВерсии.Параметры.Вставить("Документ", ДокументОбъект.Ссылка);
		ЗапросВерсии.Параметры.Вставить("Организация", ДокументОбъект.Организация);
		ЗапросВерсии.Параметры.Вставить("Титул", КлючеваяИнформацияПоТитулу.Титул);
		ЗапросВерсии.Параметры.Вставить("ИдентификаторФайла", ОбъектXDTO.ИдФайл);
		ЗапросВерсии.Параметры.Вставить("ДатаВерсии", КлючеваяИнформацияПоТитулу.ДатаВерсии);
		Выборка = ЗапросВерсии.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда 
			Если ТипЗнч(Выборка.НомерЭтойВерсии) = Тип("Число") И Выборка.НомерЭтойВерсии > -1 Тогда
				НомерВерсии = Выборка.НомерЭтойВерсии;
				НужноОтметитьПолученныйТитул = Ложь;
			ИначеЕсли ТипЗнч(Выборка.НомерПоследнейВерсии) = Тип("Число") Тогда 
				НомерВерсии = Выборка.НомерПоследнейВерсии + 1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НужноОтметитьПолученныйТитул = Истина Тогда
		ДокументОбъект.ТекущийПолученныйТитул = КлючеваяИнформацияПоТитулу.Титул;
	КонецЕсли;
	
	ТитулыПоДокументу = ОбменСГИСЭПДВызовСервера.ПолучитьТитулыПоДокументу(ДокументОбъект, Истина);	
	МассивВерсийТитула = ТитулыПоДокументу.Получить(ДокументОбъект.ТекущийПолученныйТитул);
	Если НужноОтметитьПолученныйТитул = Истина И МассивВерсийТитула = Неопределено Тогда
		МассивВерсийТитула = Новый Массив;
		СтруктураВерсии = Новый Структура;
		СтруктураВерсии.Вставить(ПредопределенноеЗначение("Перечисление.СтатусыСообщенийЭДО.Получен"));
		МассивВерсийТитула.Добавить(СтруктураВерсии);
		ТитулыПоДокументу.Вставить(ДокументОбъект.ТекущийПолученныйТитул, МассивВерсийТитула);
	КонецЕсли;
	
	Если КлючеваяИнформацияПоТитулу.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭТрН Тогда
		ОбменСГИСЭПДКлиентСервер.УстановитьТекущийДоступныйТитулЭТрН(ДокументОбъект, ТитулыПоДокументу);
	ИначеЕсли КлючеваяИнформацияПоТитулу.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭЗН Тогда
		ОбменСГИСЭПДКлиентСервер.УстановитьТекущийДоступныйТитулЭЗН(ДокументОбъект, ТитулыПоДокументу);
	ИначеЕсли КлючеваяИнформацияПоТитулу.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭСВ Тогда
		ОбменСГИСЭПДКлиентСервер.УстановитьТекущийДоступныйТитулЭСВ(ДокументОбъект, ТитулыПоДокументу);
	ИначеЕсли КлючеваяИнформацияПоТитулу.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭЗЗ Тогда
		ОбменСГИСЭПДКлиентСервер.УстановитьТекущийДоступныйТитулЭЗЗ(ДокументОбъект, ТитулыПоДокументу);
	ИначеЕсли КлючеваяИнформацияПоТитулу.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭПЛ Тогда
		ОбменСГИСЭПДКлиентСервер.УстановитьТекущийДоступныйТитулЭПЛ(ДокументОбъект, Неопределено, ТитулыПоДокументу);
	ИначеЕсли КлючеваяИнформацияПоТитулу.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭДФ Тогда
		ОбменСГИСЭПДКлиентСервер.УстановитьТекущийДоступныйТитулЭДФ(ДокументОбъект, ТитулыПоДокументу);
	КонецЕсли;
	
	ДокументОбъект.ДополнительныеСвойства.Вставить("НомерВерсии", НомерВерсии);

	ВерсияТитула = Новый Структура;
	ВерсияТитула.Вставить("НомерВерсии", НомерВерсии);
	ВерсияТитула.Вставить("ИдентификаторФайла", ОбъектXDTO.ИдФайл);
	ВерсияТитула.Вставить("Титул", КлючеваяИнформацияПоТитулу.Титул);
	ВерсияТитула.Вставить("ДатаВерсии", КлючеваяИнформацияПоТитулу.ДатаВерсии);

	ДокументОбъект.ДополнительныеСвойства.Вставить("ВерсияТитула", ВерсияТитула);
	
	ДокументОбъект.Записать();
	
	Если КлючеваяИнформацияПоТитулу.ЭтоИсправление = Истина Тогда
		ОтметитьИсправлениеДокумента(ПараметрыОбработки.ЭлектронныйДокумент);
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(ЭПД) Тогда
		ЭПД = ДокументОбъект.Ссылка;
	КонецЕсли;
	
	ОбменСГИСЭПДПереопределяемый.СобытиеПолучениеТитулаЭПД(ЭПД, КлючеваяИнформацияПоТитулу.Титул, КлючеваяИнформацияПоТитулу.ЭтоИсправление);
	
	Возврат ЭПД;
	
КонецФункции

Функция НайтиСоздатьСтроковойЗначениеЭПД(Значение)
	
	Результат = Справочники.СтроковыеЗначенияЭПД.НайтиПоНаименованию(Значение, Истина);
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		НовыйЭлемент = Справочники.СтроковыеЗначенияЭПД.СоздатьЭлемент();
		НовыйЭлемент.Наименование = Значение;
		НовыйЭлемент.Записать();
		Результат = НовыйЭлемент.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗаполнитьПредставлениеСсылкиУчастника(СтруктураРеквизитов, ПрефиксРеквизитов, Перезаписывать = Ложь)
	
	ЮЛ_ИНН = Неопределено;
	СтруктураРеквизитов.Свойство(ПрефиксРеквизитов + "ЮЛ_ИНН", ЮЛ_ИНН);
	ИП_ИНН = Неопределено;
	СтруктураРеквизитов.Свойство(ПрефиксРеквизитов + "ИП_ИНН", ИП_ИНН);
	ФЛ_ИНН = Неопределено;
	СтруктураРеквизитов.Свойство(ПрефиксРеквизитов + "ФЛ_ИНН", ФЛ_ИНН);
	ИнострЛицоБезУчетаСтатусФЛ_ЮЛ = Неопределено;
	СтруктураРеквизитов.Свойство(ПрефиксРеквизитов + "ИнострЛицоБезУчетаСтатусФЛ_ЮЛ", ИнострЛицоБезУчетаСтатусФЛ_ЮЛ);
	Фамилия = Неопределено;
	СтруктураРеквизитов.Свойство(ПрефиксРеквизитов + "Фамилия", Фамилия);
	
	МассивЧастей = Новый Массив;
	Если ЗначениеЗаполнено(ЮЛ_ИНН) Тогда
		ЮЛНаименование = Неопределено;
		СтруктураРеквизитов.Свойство(ПрефиксРеквизитов + "ЮЛНаименование", ЮЛНаименование);
		ЮЛ_КПП = Неопределено;
		СтруктураРеквизитов.Свойство(ПрефиксРеквизитов + "ЮЛ_КПП", ЮЛ_КПП);
	
		МассивЧастей.Добавить(ЮЛНаименование);
		МассивЧастей.Добавить(ЮЛ_ИНН 
								+ "/" + ЮЛ_КПП);
	ИначеЕсли ЗначениеЗаполнено(ИП_ИНН) Тогда
		ИПФамилия = Неопределено;
		СтруктураРеквизитов.Свойство(ПрефиксРеквизитов + "ИПФамилия", ИПФамилия);
		ИПИмя = Неопределено;
		СтруктураРеквизитов.Свойство(ПрефиксРеквизитов + "ИПИмя", ИПИмя);
		
		МассивЧастей.Добавить(ИПФамилия 
								+ " " + ИПИмя);
		МассивЧастей.Добавить(ИП_ИНН);
	ИначеЕсли ЗначениеЗаполнено(ФЛ_ИНН) Тогда
		ФЛФамилия = Неопределено;
		СтруктураРеквизитов.Свойство(ПрефиксРеквизитов + "ФЛФамилия", ФЛФамилия);
		ФЛИмя = Неопределено;
		СтруктураРеквизитов.Свойство(ПрефиксРеквизитов + "ФЛИмя", ФЛИмя);
		
		МассивЧастей.Добавить(ФЛФамилия 
								+ " " + ФЛИмя);
		МассивЧастей.Добавить(ФЛ_ИНН);
	ИначеЕсли ЗначениеЗаполнено(ИнострЛицоБезУчетаСтатусФЛ_ЮЛ) Тогда
		ИнострЛицоБезУчетаНаименование = Неопределено;
		СтруктураРеквизитов.Свойство(ПрефиксРеквизитов + "ИнострЛицоБезУчетаНаименование", ИнострЛицоБезУчетаНаименование);
		ИнострЛицоБезУчетаИдентификатор = Неопределено;
		СтруктураРеквизитов.Свойство(ПрефиксРеквизитов + "ИнострЛицоБезУчетаИдентификатор", ИнострЛицоБезУчетаИдентификатор);
		ИнострЛицоБезУчетаСтрана = Неопределено;
		СтруктураРеквизитов.Свойство(ПрефиксРеквизитов + "ИнострЛицоБезУчетаСтрана", ИнострЛицоБезУчетаСтрана);
		
		МассивЧастей.Добавить(ИнострЛицоБезУчетаНаименование);
		МассивЧастей.Добавить(ИнострЛицоБезУчетаИдентификатор);
		МассивЧастей.Добавить(ИнострЛицоБезУчетаСтрана);	
	ИначеЕсли ЗначениеЗаполнено(Фамилия) Тогда
		Имя = Неопределено;
		СтруктураРеквизитов.Свойство(ПрефиксРеквизитов + "Имя", Имя);	
		МассивЧастей.Добавить(Фамилия 
								+ " " + Имя);
	КонецЕсли;
	Если МассивЧастей.Количество() > 0 Тогда
		МассивЧастейПрефикса = ОбменСГИСЭПДКлиентСервер.РазделитьСтрокуСоСложнымРазделителем(ПрефиксРеквизитов, "__");
		Если МассивЧастейПрефикса.Количество() = 3 Тогда
			ИмяРеквизитаСсылки = МассивЧастейПрефикса[0] + "__" + МассивЧастейПрефикса[1] + "__" +	"Ссылка" + МассивЧастейПрефикса[2];
		Иначе
			ИмяРеквизитаСсылки = "Ссылка" + ПрефиксРеквизитов;
		КонецЕсли;
		
		СтароеЗначение = Неопределено;
		СтруктураРеквизитов.Свойство(ИмяРеквизитаСсылки, СтароеЗначение);
		
		Если Перезаписывать = Истина Или ЗначениеЗаполнено(СтароеЗначение) = Ложь Тогда
			СтруктураРеквизитов.Вставить(ИмяРеквизитаСсылки, НайтиСоздатьСтроковойЗначениеЭПД(СтрСоединить(МассивЧастей, ", ")));	
		КонецЕсли;
																			
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Заполнить строковое представления ссылочных типов (когда ссылка не определена).
// 
// Параметры:
//  ДокументОбъект - ДокументОбъект.ЭлектроннаяСопроводительнаяВедомость, ДокументОбъект.ЭлектроннаяТранспортнаяНакладная, ДокументОбъект.ЭлектронныйЗаказНаряд - Документ объект
Процедура ЗаполнитьПредставленияСсылочныхТипов(ДокументОбъект)
	
	СтруктураРеквизитов = Неопределено;
	Если ДокументОбъект.ДополнительныеСвойства.Свойство("СтруктураРеквизитов", СтруктураРеквизитов) = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЭлектроннаяТранспортнаяНакладная") Тогда
		
		Если ДокументОбъект.ТекущийПолученныйТитул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул1 Тогда
			
			ТитулГрузоотправителяКодВалюты = Неопределено;
			СтруктураРеквизитов.Свойство("ТитулГрузоотправителяКодВалюты", ТитулГрузоотправителяКодВалюты);			
			Если ЗначениеЗаполнено(ТитулГрузоотправителяКодВалюты) Тогда
				ВалютаНайдено = Справочники.Валюты.НайтиПоКоду(ТитулГрузоотправителяКодВалюты);
				Если ЗначениеЗаполнено(ВалютаНайдено) Тогда		
					СтруктураРеквизитов.Вставить("СсылкаТитулГрузоотправителяВалюта", ВалютаНайдено);
				Иначе
					ТитулГрузоотправителяНаименованиеВалюты = Неопределено;
					СтруктураРеквизитов.Свойство("ТитулГрузоотправителяНаименованиеВалюты", 
																			ТитулГрузоотправителяНаименованиеВалюты);
					Если ЗначениеЗаполнено(ТитулГрузоотправителяНаименованиеВалюты) Тогда
						СтруктураРеквизитов.Вставить("СсылкаТитулГрузоотправителяВалюта", НайтиСоздатьСтроковойЗначениеЭПД(
																			ТитулГрузоотправителяНаименованиеВалюты));
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДокументОбъект.СсылкаТитулГрузоотправителяГрузоотправитель) = Ложь Тогда
				ЗаполнитьПредставлениеСсылкиУчастника(СтруктураРеквизитов, "ТитулГрузоотправителяГрузоотправитель");
			КонецЕсли;
			Если ЗначениеЗаполнено(ДокументОбъект.СсылкаТитулГрузоотправителяПеревозчик) = Ложь Тогда
				ЗаполнитьПредставлениеСсылкиУчастника(СтруктураРеквизитов, "ТитулГрузоотправителяПеревозчик");
			КонецЕсли;
			Если ЗначениеЗаполнено(ДокументОбъект.СсылкаТитулГрузоотправителяГрузополучатель) = Ложь Тогда
				ЗаполнитьПредставлениеСсылкиУчастника(СтруктураРеквизитов, "ТитулГрузоотправителяГрузополучатель"); 
			КонецЕсли;
			ЗаполнитьПредставлениеСсылкиУчастника(СтруктураРеквизитов, "ТитулГрузоотправителяЗаказчик");
			ЗаполнитьПредставлениеСсылкиУчастника(СтруктураРеквизитов, "ТитулГрузоотправителяВладелецПунктаПогрузки");
			ЗаполнитьПредставлениеСсылкиУчастника(СтруктураРеквизитов, "ТитулГрузоотправителяРеквизитыГрузоотправителя");
			ЗаполнитьПредставлениеСсылкиУчастника(СтруктураРеквизитов, "ТитулГрузоотправителяЛицоОсуществляющееПогрузку"); 
				
			// По таблице "Сведения о грузе"
			ИтераторЦикла = 1;
			КлючСтруктуры = "ТитулГрузоотправителяГрузы__" + ИтераторЦикла + "__КодВалютыСтоимости";
			КодВалютыСтоимости = Неопределено;
			Пока СтруктураРеквизитов.Свойство(КлючСтруктуры, КодВалютыСтоимости) Цикл
				Если ЗначениеЗаполнено(КодВалютыСтоимости) Тогда
					ВалютаНайдено = Справочники.Валюты.НайтиПоКоду(КодВалютыСтоимости);
					КлючЗначенияСсылки = "ТитулГрузоотправителяГрузы__" + ИтераторЦикла + "__СсылкаВалютаСтоимости";
					Если ЗначениеЗаполнено(ВалютаНайдено) Тогда		
						СтруктураРеквизитов.Вставить(КлючЗначенияСсылки, ВалютаНайдено);
					Иначе
						НаименованиеВалютыСтоимости = Неопределено;
						СтруктураРеквизитов.Свойство("ТитулГрузоотправителяГрузы__" + ИтераторЦикла + "__НаименованиеВалютыСтоимости", НаименованиеВалютыСтоимости);
						Если ЗначениеЗаполнено(НаименованиеВалютыСтоимости) Тогда
							СтруктураРеквизитов.Вставить(КлючЗначенияСсылки, НайтиСоздатьСтроковойЗначениеЭПД(НаименованиеВалютыСтоимости));
						КонецЕсли;	
					КонецЕсли;	
				КонецЕсли;
				ИтераторЦикла = ИтераторЦикла + 1;
				КлючСтруктуры = "ТитулГрузоотправителяГрузы__" + ИтераторЦикла + "__КодВалютыСтоимости";
			КонецЦикла;
			
			ИтераторЦикла = 1;
			КлючСтруктуры = "ТитулГрузоотправителяГрузы__" + ИтераторЦикла + "__Заказчик";
			Пока ЗаполнитьПредставлениеСсылкиУчастника(СтруктураРеквизитов, КлючСтруктуры) Цикл
				ИтераторЦикла = ИтераторЦикла + 1;
				КлючСтруктуры = "ТитулГрузоотправителяГрузы__" + ИтераторЦикла + "__Заказчик";
			КонецЦикла;
			
			// По таблице "Сведения об опасном грузе"
			ИтераторЦикла = 1;
			КлючСтруктуры = "ТитулГрузоотправителяСведенияОбОпасныхГрузах__" + ИтераторЦикла + "__НадлежащееОтгрузочноеНаименование";
			НадлежащееОтгрузочноеНаименование = Неопределено;
			Пока СтруктураРеквизитов.Свойство(КлючСтруктуры, НадлежащееОтгрузочноеНаименование) Цикл
				Если ЗначениеЗаполнено(НадлежащееОтгрузочноеНаименование) Тогда
					Если СтрДлина(НадлежащееОтгрузочноеНаименование) <= 150 Тогда
						КраткоеНаименованиеДОПОГ = НадлежащееОтгрузочноеНаименование;
					Иначе
						КраткоеНаименованиеДОПОГ = Лев(НадлежащееОтгрузочноеНаименование, 147) + "...";
					КонецЕсли;	
					КлассификаторДОПОГНайдено = Справочники.КлассификаторДОПОГЭПД.НайтиПоНаименованию(КраткоеНаименованиеДОПОГ);
					КлючЗначенияСсылки = "ТитулГрузоотправителяСведенияОбОпасныхГрузах__" + ИтераторЦикла + "__СсылкаДОПОГ";
					Если ЗначениеЗаполнено(КлассификаторДОПОГНайдено) Тогда		
						СтруктураРеквизитов.Вставить(КлючЗначенияСсылки, КлассификаторДОПОГНайдено);
					Иначе
						СтруктураРеквизитов.Вставить(КлючЗначенияСсылки, НайтиСоздатьСтроковойЗначениеЭПД(КраткоеНаименованиеДОПОГ));	
					КонецЕсли;
				КонецЕсли;
				ИтераторЦикла = ИтераторЦикла + 1;
				КлючСтруктуры = "ТитулГрузоотправителяСведенияОбОпасныхГрузах__" + ИтераторЦикла + "__НадлежащееОтгрузочноеНаименование";
			КонецЦикла;
	
			// По таблице "Отметки ГО, размер штрафа"
			ИтераторЦикла = 1;
			КлючСтруктуры = "ТитулГрузоотправителяРасчетыШтрафов__" + ИтераторЦикла + "__КодВалютыШтрафа";
			КодВалютыШтрафа = Неопределено;
			Пока СтруктураРеквизитов.Свойство(КлючСтруктуры, КодВалютыШтрафа) Цикл
				Если ЗначениеЗаполнено(КодВалютыШтрафа) Тогда
					ВалютаНайдено = Справочники.Валюты.НайтиПоКоду(КодВалютыШтрафа);
					КлючЗначенияСсылки = "ТитулГрузоотправителяРасчетыШтрафов__" + ИтераторЦикла + "__СсылкаВалютаШтрафа";
					Если ЗначениеЗаполнено(ВалютаНайдено) Тогда		
						СтруктураРеквизитов.Вставить(КлючЗначенияСсылки, ВалютаНайдено);
					Иначе
						НаименованиеВалютыШтрафа = Неопределено;
						СтруктураРеквизитов.Свойство("ТитулГрузоотправителяРасчетыШтрафов__" + ИтераторЦикла + "__НаименованиеВалютыШтрафа", НаименованиеВалютыШтрафа);
						Если ЗначениеЗаполнено(НаименованиеВалютыШтрафа) Тогда
							СтруктураРеквизитов.Вставить(КлючЗначенияСсылки, НайтиСоздатьСтроковойЗначениеЭПД(НаименованиеВалютыШтрафа));
						КонецЕсли;	
					КонецЕсли;
				КонецЕсли;
				ИтераторЦикла = ИтераторЦикла + 1;
				КлючСтруктуры = "ТитулГрузоотправителяРасчетыШтрафов__" + ИтераторЦикла + "__КодВалютыШтрафа";
			КонецЦикла;
			
		ИначеЕсли ДокументОбъект.ТекущийПолученныйТитул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул2 Тогда
		
			ТитулПеревозчикаФХЖКодВалютыСтоимости = Неопределено;
			СтруктураРеквизитов.Свойство("ТитулПеревозчикаФХЖКодВалютыСтоимости", ТитулПеревозчикаФХЖКодВалютыСтоимости);			
			Если ЗначениеЗаполнено(ТитулПеревозчикаФХЖКодВалютыСтоимости) Тогда
				ВалютаНайдено = Справочники.Валюты.НайтиПоКоду(ТитулПеревозчикаФХЖКодВалютыСтоимости);
				Если ЗначениеЗаполнено(ВалютаНайдено) Тогда		
					СтруктураРеквизитов.Вставить("СсылкаТитулПеревозчикаФХЖВалютаСтоимости", ВалютаНайдено);
				Иначе
					ТитулПеревозчикаФХЖНаименованиеВалютыСтоимости = Неопределено;
					СтруктураРеквизитов.Свойство("ТитулПеревозчикаФХЖНаименованиеВалютыСтоимости", 
																			ТитулПеревозчикаФХЖНаименованиеВалютыСтоимости);
					Если ЗначениеЗаполнено(ТитулПеревозчикаФХЖНаименованиеВалютыСтоимости) Тогда
						СтруктураРеквизитов.Вставить("СсылкаТитулПеревозчикаФХЖВалютаСтоимости", НайтиСоздатьСтроковойЗначениеЭПД(
																			ТитулПеревозчикаФХЖНаименованиеВалютыСтоимости));
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;
			
			// По таблице "Отметки перевозчика, размер штрафа"
			ИтераторЦикла = 1;
			КлючСтруктуры = "ТитулПеревозчикаПриемкаРасчетыШтрафов__" + ИтераторЦикла + "__КодВалютыШтрафа";
			КодВалютыШтрафа = Неопределено;
			Пока СтруктураРеквизитов.Свойство(КлючСтруктуры, КодВалютыШтрафа) Цикл
				Если ЗначениеЗаполнено(КодВалютыШтрафа) Тогда
					ВалютаНайдено = Справочники.Валюты.НайтиПоКоду(КодВалютыШтрафа);
					КлючЗначенияСсылки = "ТитулПеревозчикаПриемкаРасчетыШтрафов__" + ИтераторЦикла + "__СсылкаВалютаШтрафа";
					Если ЗначениеЗаполнено(ВалютаНайдено) Тогда		
						СтруктураРеквизитов.Вставить(КлючЗначенияСсылки, ВалютаНайдено);
					Иначе
						НаименованиеВалютыШтрафа = Неопределено;
						СтруктураРеквизитов.Свойство("ТитулПеревозчикаПриемкаРасчетыШтрафов__" + ИтераторЦикла + "__НаименованиеВалютыШтрафа", НаименованиеВалютыШтрафа);
						Если ЗначениеЗаполнено(НаименованиеВалютыШтрафа) Тогда
							СтруктураРеквизитов.Вставить(КлючЗначенияСсылки, НайтиСоздатьСтроковойЗначениеЭПД(НаименованиеВалютыШтрафа));
						КонецЕсли;	
					КонецЕсли;
				КонецЕсли;
				ИтераторЦикла = ИтераторЦикла + 1;
				КлючСтруктуры = "ТитулПеревозчикаПриемкаРасчетыШтрафов__" + ИтераторЦикла + "__КодВалютыШтрафа";
			КонецЦикла;
	
		ИначеЕсли ДокументОбъект.ТекущийПолученныйТитул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул3 Тогда		
		
			// По таблице "Отметки грузополучателя, размер штрафа"
			ИтераторЦикла = 1;
			КлючСтруктуры = "ТитулГрузополучателяРасчетыШтрафов__" + ИтераторЦикла + "__КодВалютыШтрафа";
			КодВалютыШтрафа = Неопределено;
			Пока СтруктураРеквизитов.Свойство(КлючСтруктуры, КодВалютыШтрафа) Цикл
				Если ЗначениеЗаполнено(КодВалютыШтрафа) Тогда
					ВалютаНайдено = Справочники.Валюты.НайтиПоКоду(КодВалютыШтрафа);
					КлючЗначенияСсылки = "ТитулГрузополучателяРасчетыШтрафов__" + ИтераторЦикла + "__СсылкаВалютаШтрафа";
					Если ЗначениеЗаполнено(ВалютаНайдено) Тогда		
						СтруктураРеквизитов.Вставить(КлючЗначенияСсылки, ВалютаНайдено);
					Иначе
						НаименованиеВалютыШтрафа = Неопределено;
						СтруктураРеквизитов.Свойство("ТитулГрузополучателяРасчетыШтрафов__" + ИтераторЦикла + "__НаименованиеВалютыШтрафа", НаименованиеВалютыШтрафа);
						Если ЗначениеЗаполнено(НаименованиеВалютыШтрафа) Тогда
							СтруктураРеквизитов.Вставить(КлючЗначенияСсылки, НайтиСоздатьСтроковойЗначениеЭПД(НаименованиеВалютыШтрафа));
						КонецЕсли;	
					КонецЕсли;
				КонецЕсли;
				ИтераторЦикла = ИтераторЦикла + 1;
				КлючСтруктуры = "ТитулГрузополучателяРасчетыШтрафов__" + ИтераторЦикла + "__КодВалютыШтрафа";
			КонецЦикла;
			
		ИначеЕсли ДокументОбъект.ТекущийПолученныйТитул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул4 Тогда
			
			// По таблице "Отметки перевозчика при разгрузке, размер штрафа"
			ИтераторЦикла = 1;
			КлючСтруктуры = "ТитулПеревозчикаВыдачаРасчетыШтрафов__" + ИтераторЦикла + "__КодВалютыШтрафа";
			КодВалютыШтрафа = Неопределено;
			Пока СтруктураРеквизитов.Свойство(КлючСтруктуры, КодВалютыШтрафа) Цикл
				Если ЗначениеЗаполнено(КодВалютыШтрафа) Тогда
					ВалютаНайдено = Справочники.Валюты.НайтиПоКоду(КодВалютыШтрафа);
					КлючЗначенияСсылки = "ТитулПеревозчикаВыдачаРасчетыШтрафов__" + ИтераторЦикла + "__СсылкаВалютаШтрафа";
					Если ЗначениеЗаполнено(ВалютаНайдено) Тогда		
						СтруктураРеквизитов.Вставить(КлючЗначенияСсылки, ВалютаНайдено);
					Иначе
						НаименованиеВалютыШтрафа = Неопределено;
						СтруктураРеквизитов.Свойство("ТитулПеревозчикаВыдачаРасчетыШтрафов__" + ИтераторЦикла + "__НаименованиеВалютыШтрафа", НаименованиеВалютыШтрафа);
						Если ЗначениеЗаполнено(НаименованиеВалютыШтрафа) Тогда
							СтруктураРеквизитов.Вставить(КлючЗначенияСсылки, НайтиСоздатьСтроковойЗначениеЭПД(НаименованиеВалютыШтрафа));
						КонецЕсли;	
					КонецЕсли;
				КонецЕсли;
				ИтераторЦикла = ИтераторЦикла + 1;
				КлючСтруктуры = "ТитулПеревозчикаВыдачаРасчетыШтрафов__" + ИтераторЦикла + "__КодВалютыШтрафа";
			КонецЦикла;
			
		ИначеЕсли ДокументОбъект.ТекущийПолученныйТитул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул5 Тогда	
		
			ТитулПеревозчикаФХЖБанковскиеРеквизитыНомерБанковскогоСчета = Неопределено;
			СтруктураРеквизитов.Свойство("ТитулПеревозчикаФХЖБанковскиеРеквизитыНомерБанковскогоСчета", ТитулПеревозчикаФХЖБанковскиеРеквизитыНомерБанковскогоСчета);
			ТитулПеревозчикаФХЖБанковскиеРеквизитыНаименованиеБанка = Неопределено;
			СтруктураРеквизитов.Свойство("ТитулПеревозчикаФХЖБанковскиеРеквизитыНаименованиеБанка", ТитулПеревозчикаФХЖБанковскиеРеквизитыНаименованиеБанка);
			ТитулПеревозчикаФХЖБанковскиеРеквизитыБИК = Неопределено;
			СтруктураРеквизитов.Свойство("ТитулПеревозчикаФХЖБанковскиеРеквизитыБИК", ТитулПеревозчикаФХЖБанковскиеРеквизитыБИК);			
			Если ЗначениеЗаполнено(ТитулПеревозчикаФХЖБанковскиеРеквизитыНомерБанковскогоСчета) Тогда
				ПредставлениеБанковскогоСчета = ТитулПеревозчикаФХЖБанковскиеРеквизитыНомерБанковскогоСчета 
											+ ", " + ТитулПеревозчикаФХЖБанковскиеРеквизитыНаименованиеБанка
											+ " (" + ТитулПеревозчикаФХЖБанковскиеРеквизитыБИК + ")";
				СтруктураРеквизитов.Вставить("СсылкаТитулПеревозчикаФХЖБанковскиеРеквизиты", НайтиСоздатьСтроковойЗначениеЭПД(
																	ПредставлениеБанковскогоСчета));
			КонецЕсли;
			
		ИначеЕсли ДокументОбъект.ТекущийПолученныйТитул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул6 Тогда
			
			ТитулГрузоотправителяФХЖБанковскиеРеквизитыНомерБанковскогоСчета = Неопределено;
			СтруктураРеквизитов.Свойство("ТитулГрузоотправителяФХЖБанковскиеРеквизитыНомерБанковскогоСчета", ТитулГрузоотправителяФХЖБанковскиеРеквизитыНомерБанковскогоСчета);
			ТитулГрузоотправителяФХЖБанковскиеРеквизитыНаименованиеБанка = Неопределено;
			СтруктураРеквизитов.Свойство("ТитулГрузоотправителяФХЖБанковскиеРеквизитыНаименованиеБанка", ТитулГрузоотправителяФХЖБанковскиеРеквизитыНаименованиеБанка);
			ТитулГрузоотправителяФХЖБанковскиеРеквизитыБИК = Неопределено;
			СтруктураРеквизитов.Свойство("ТитулГрузоотправителяФХЖБанковскиеРеквизитыБИК", ТитулГрузоотправителяФХЖБанковскиеРеквизитыБИК);			
			Если ЗначениеЗаполнено(ТитулПеревозчикаФХЖБанковскиеРеквизитыНомерБанковскогоСчета) Тогда
				ПредставлениеБанковскогоСчета = ТитулГрузоотправителяФХЖБанковскиеРеквизитыНомерБанковскогоСчета 
											+ ", " + ТитулГрузоотправителяФХЖБанковскиеРеквизитыНаименованиеБанка
											+ " (" + ТитулГрузоотправителяФХЖБанковскиеРеквизитыБИК + ")";
				СтруктураРеквизитов.Вставить("СсылкаТитулГрузоотправителяФХЖБанковскиеРеквизиты", НайтиСоздатьСтроковойЗначениеЭПД(
																	ПредставлениеБанковскогоСчета));
			КонецЕсли;
			
		ИначеЕсли ДокументОбъект.ТекущийПолученныйТитул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул9 Тогда
			
			Если ЗначениеЗаполнено(ДокументОбъект.СсылкаТитулУказаниеПереадресНовыйГрузополучатель) = Ложь Тогда
				ЗаполнитьПредставлениеСсылкиУчастника(СтруктураРеквизитов, "ТитулУказаниеПереадресНовыйГрузополучатель");
			КонецЕсли;
			
		ИначеЕсли ДокументОбъект.ТекущийПолученныйТитул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ДопТитул9 Тогда
			
			Если ЗначениеЗаполнено(ДокументОбъект.СсылкаДопТитулУказаниеПереадресНовыйГрузополучатель) = Ложь Тогда
				ЗаполнитьПредставлениеСсылкиУчастника(СтруктураРеквизитов, "ДопТитулУказаниеПереадресНовыйГрузополучатель");
			КонецЕсли;
			
		ИначеЕсли ДокументОбъект.ТекущийПолученныйТитул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул7 Тогда
			
			Если ЗначениеЗаполнено(ДокументОбъект.СсылкаТитулПереадресовкаНовыйГрузополучатель) = Ложь Тогда
				ЗаполнитьПредставлениеСсылкиУчастника(СтруктураРеквизитов, "ТитулПереадресовкаНовыйГрузополучатель");
			КонецЕсли;
			
		ИначеЕсли ДокументОбъект.ТекущийПолученныйТитул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ДопТитул7 Тогда
			
			Если ЗначениеЗаполнено(ДокументОбъект.СсылкаДопТитулПереадресовкаНовыйГрузополучатель) = Ложь Тогда
				ЗаполнитьПредставлениеСсылкиУчастника(СтруктураРеквизитов, "ДопТитулПереадресовкаНовыйГрузополучатель");
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЭлектронныйЗаказНаряд") Тогда
		
		// По таблице "Сведения об опасном грузе"
		ИтераторЦикла = 1;
		КлючСтруктуры = "ТитулФрахтователяСведенияОбОпасномГрузе__" + ИтераторЦикла + "__НадлежащееОтгрузочноеНаименование";
		НадлежащееОтгрузочноеНаименование = Неопределено;
		Пока СтруктураРеквизитов.Свойство(КлючСтруктуры, НадлежащееОтгрузочноеНаименование) Цикл
			Если ЗначениеЗаполнено(НадлежащееОтгрузочноеНаименование) Тогда
				Если СтрДлина(НадлежащееОтгрузочноеНаименование) <= 150 Тогда
					КраткоеНаименованиеДОПОГ = НадлежащееОтгрузочноеНаименование;
				Иначе
					КраткоеНаименованиеДОПОГ = Лев(НадлежащееОтгрузочноеНаименование, 147) + "...";
				КонецЕсли;
				КлассификаторДОПОГНайдено = Справочники.КлассификаторДОПОГЭПД.НайтиПоНаименованию(КраткоеНаименованиеДОПОГ);
				КлючЗначенияСсылки = "ТитулФрахтователяСведенияОбОпасномГрузе__" + ИтераторЦикла + "__СсылкаДОПОГ";
				Если ЗначениеЗаполнено(КлассификаторДОПОГНайдено) Тогда		
					СтруктураРеквизитов.Вставить(КлючЗначенияСсылки, КлассификаторДОПОГНайдено);
				Иначе
					СтруктураРеквизитов.Вставить(КлючЗначенияСсылки, НайтиСоздатьСтроковойЗначениеЭПД(КраткоеНаименованиеДОПОГ));	
				КонецЕсли;
			КонецЕсли;
			ИтераторЦикла = ИтераторЦикла + 1;
			КлючСтруктуры = "ТитулФрахтователяСведенияОбОпасномГрузе__" + ИтераторЦикла + "__НадлежащееОтгрузочноеНаименование";
		КонецЦикла;
		
		ЗаполнитьПредставлениеСсылкиУчастника(СтруктураРеквизитов, "ТитулФрахтовщикаФрахтовщик");
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЭлектроннаяСопроводительнаяВедомость") Тогда
		
		// Лица
		ЗаполнитьПредставлениеСсылкиУчастника(СтруктураРеквизитов, "ТитулПеревозчикаЛицоОсуществляющееПогрузку");
		ЗаполнитьПредставлениеСсылкиУчастника(СтруктураРеквизитов, "ДопТитулПеревозчикаЛицоОсуществляющееПогрузку");
		ЗаполнитьПредставлениеСсылкиУчастника(СтруктураРеквизитов, "ТитулПеревозчикаЛицоОсуществляющееПриемку");
		ЗаполнитьПредставлениеСсылкиУчастника(СтруктураРеквизитов, "ДопТитулПеревозчикаЛицоОсуществляющееПриемку");
		ЗаполнитьПредставлениеСсылкиУчастника(СтруктураРеквизитов, "ТитулПеревозчикаЛицоОтветственноеЗаПеревозку");
		ЗаполнитьПредставлениеСсылкиУчастника(СтруктураРеквизитов, "ДопТитулПеревозчикаЛицоОтветственноеЗаПеревозку");
		
		// Валюта
		ТитулПеревозчикаКодВалютыСтоимости = Неопределено;
		СтруктураРеквизитов.Свойство("ТитулПеревозчикаКодВалютыСтоимости", ТитулПеревозчикаКодВалютыСтоимости);			
		Если ЗначениеЗаполнено(ТитулПеревозчикаКодВалютыСтоимости) Тогда
			ВалютаНайдено = Справочники.Валюты.НайтиПоКоду(ТитулПеревозчикаКодВалютыСтоимости);
			Если ЗначениеЗаполнено(ВалютаНайдено) Тогда		
				СтруктураРеквизитов.Вставить("СсылкаТитулПеревозчикаВалютаСтоимости", ВалютаНайдено);
			Иначе
				ТитулПеревозчикаНаименованиеВалютыСтоимости = Неопределено;
				СтруктураРеквизитов.Свойство("ТитулПеревозчикаНаименованиеВалютыСтоимости", 
																		ТитулПеревозчикаНаименованиеВалютыСтоимости);
				Если ЗначениеЗаполнено(ТитулПеревозчикаНаименованиеВалютыСтоимости) Тогда
					СтруктураРеквизитов.Вставить("СсылкаТитулПеревозчикаВалютаСтоимости", НайтиСоздатьСтроковойЗначениеЭПД(
																		ТитулПеревозчикаНаименованиеВалютыСтоимости));
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
		
		ДопТитулПеревозчикаКодВалютыСтоимости = Неопределено;
		СтруктураРеквизитов.Свойство("ДопТитулПеревозчикаКодВалютыСтоимости", ДопТитулПеревозчикаКодВалютыСтоимости);			
		Если ЗначениеЗаполнено(ДопТитулПеревозчикаКодВалютыСтоимости) Тогда
			ВалютаНайдено = Справочники.Валюты.НайтиПоКоду(ДопТитулПеревозчикаКодВалютыСтоимости);
			Если ЗначениеЗаполнено(ВалютаНайдено) Тогда		
				СтруктураРеквизитов.Вставить("СсылкаДопТитулПеревозчикаВалютаСтоимости", ВалютаНайдено);
			Иначе
				ДопТитулПеревозчикаНаименованиеВалютыСтоимости = Неопределено;
				СтруктураРеквизитов.Свойство("ДопТитулПеревозчикаНаименованиеВалютыСтоимости", 
																		ДопТитулПеревозчикаНаименованиеВалютыСтоимости);
				Если ЗначениеЗаполнено(ДопТитулПеревозчикаНаименованиеВалютыСтоимости) Тогда
					СтруктураРеквизитов.Вставить("СсылкаДопТитулПеревозчикаВалютаСтоимости", НайтиСоздатьСтроковойЗначениеЭПД(
																		ДопТитулПеревозчикаНаименованиеВалютыСтоимости));
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЭлектронныйЗаказЗаявка") Тогда
		
		Если ЗначениеЗаполнено(ДокументОбъект.СсылкаТитулГрузоотправителяГрузоотправитель) = Ложь Тогда
			ЗаполнитьПредставлениеСсылкиУчастника(СтруктураРеквизитов, "ТитулГрузоотправителяГрузоотправитель");
		КонецЕсли;
		Если ЗначениеЗаполнено(ДокументОбъект.СсылкаТитулГрузоотправителяПеревозчик) = Ложь Тогда
			ЗаполнитьПредставлениеСсылкиУчастника(СтруктураРеквизитов, "ТитулГрузоотправителяПеревозчик");
		КонецЕсли;
		Если ЗначениеЗаполнено(ДокументОбъект.СсылкаТитулГрузоотправителяСоставитель) = Ложь Тогда
			ЗаполнитьПредставлениеСсылкиУчастника(СтруктураРеквизитов, "ТитулГрузоотправителяСоставитель"); 
		КонецЕсли;
		ЗаполнитьПредставлениеСсылкиУчастника(СтруктураРеквизитов, "ТитулПеревозчикаЛицоОтветственноеЗаПеревозку");
		ЗаполнитьПредставлениеСсылкиУчастника(СтруктураРеквизитов, "ТитулПеревозчикаСоставитель");
		
		ИтераторЦикла = 1;
		КлючПолномочия = "ТитулГрузоотправителяУполномоченныеЛица__" + ИтераторЦикла + "__Полномочия";
		Полномочия = Неопределено;
		Пока СтруктураРеквизитов.Свойство(КлючПолномочия, Полномочия) Цикл
			ЗаполнитьПредставлениеСсылкиУчастника(СтруктураРеквизитов, "ТитулГрузоотправителяУполномоченныеЛица__" + ИтераторЦикла + "ТитулГрузоотправителяУполномоченноеЛицо");
			ИтераторЦикла = ИтераторЦикла + 1;
			КлючПолномочия = "ТитулГрузоотправителяУполномоченныеЛица__" + ИтераторЦикла + "__Полномочия";
		КонецЦикла;
		
		// ДОПОГ
		ИтераторЦикла = 1;
		КлючСтруктуры = "ТитулГрузоотправителяГрузы__" + ИтераторЦикла + "__НадлежащееОтгрузочноеНаименование";
		НадлежащееОтгрузочноеНаименование = Неопределено;
		Пока СтруктураРеквизитов.Свойство(КлючСтруктуры, НадлежащееОтгрузочноеНаименование) Цикл
			Если ЗначениеЗаполнено(НадлежащееОтгрузочноеНаименование) Тогда
				Если СтрДлина(НадлежащееОтгрузочноеНаименование) <= 150 Тогда
					КраткоеНаименованиеДОПОГ = НадлежащееОтгрузочноеНаименование;
				Иначе
					КраткоеНаименованиеДОПОГ = Лев(НадлежащееОтгрузочноеНаименование, 147) + "...";
				КонецЕсли;
				КлассификаторДОПОГНайдено = Справочники.КлассификаторДОПОГЭПД.НайтиПоНаименованию(КраткоеНаименованиеДОПОГ);
				КлючЗначенияСсылки = "ТитулГрузоотправителяГрузы__" + ИтераторЦикла + "__СсылкаСведенияОбОпасномГрузе";
				Если ЗначениеЗаполнено(КлассификаторДОПОГНайдено) Тогда		
					СтруктураРеквизитов.Вставить(КлючЗначенияСсылки, КлассификаторДОПОГНайдено);
				Иначе
					СтруктураРеквизитов.Вставить(КлючЗначенияСсылки, НайтиСоздатьСтроковойЗначениеЭПД(КраткоеНаименованиеДОПОГ));	
				КонецЕсли;
			КонецЕсли;
			ИтераторЦикла = ИтераторЦикла + 1;
			КлючСтруктуры = "ТитулГрузоотправителяГрузы__" + ИтераторЦикла + "__НадлежащееОтгрузочноеНаименование";
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЭлектронныйПутевойЛист") Тогда
	
		ЗаполнитьПредставлениеСсылкиУчастника(СтруктураРеквизитов, "ТитулОформлениеОформитель");
		
		ИтераторЦикла = 1;
		КлючСтруктуры = "ТитулОформлениеГрузоотправители__" + ИтераторЦикла + "__Грузоотправитель";
		Пока ЗаполнитьПредставлениеСсылкиУчастника(СтруктураРеквизитов, КлючСтруктуры) Цикл
			ИтераторЦикла = ИтераторЦикла + 1;
			КлючСтруктуры = "ТитулОформлениеГрузоотправители__" + ИтераторЦикла + "__Грузоотправитель";
		КонецЦикла;
				
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЭлектронныйДоговорФрахтования") Тогда 
		
		// По таблице "Сведения об опасном грузе"
		ИтераторЦикла = 1;
		КлючСтруктуры = "ТитулФрахтователяОписаниеГруза__" + ИтераторЦикла + "__НадлежащееОтгрузочноеНаименование";
		НадлежащееОтгрузочноеНаименование = Неопределено;
		Пока СтруктураРеквизитов.Свойство(КлючСтруктуры, НадлежащееОтгрузочноеНаименование) Цикл
			Если ЗначениеЗаполнено(НадлежащееОтгрузочноеНаименование) Тогда
				Если СтрДлина(НадлежащееОтгрузочноеНаименование) <= 150 Тогда
					КраткоеНаименованиеДОПОГ = НадлежащееОтгрузочноеНаименование;
				Иначе
					КраткоеНаименованиеДОПОГ = Лев(НадлежащееОтгрузочноеНаименование, 147) + "...";
				КонецЕсли;
				КлассификаторДОПОГНайдено = Справочники.КлассификаторДОПОГЭПД.НайтиПоНаименованию(КраткоеНаименованиеДОПОГ);
				КлючЗначенияСсылки = "ТитулФрахтователяОписаниеГруза__" + ИтераторЦикла + "__СсылкаДОПОГ";
				Если ЗначениеЗаполнено(КлассификаторДОПОГНайдено) Тогда		
					СтруктураРеквизитов.Вставить(КлючЗначенияСсылки, КлассификаторДОПОГНайдено);
				Иначе
					СтруктураРеквизитов.Вставить(КлючЗначенияСсылки, НайтиСоздатьСтроковойЗначениеЭПД(КраткоеНаименованиеДОПОГ));	
				КонецЕсли;
			КонецЕсли;
			ИтераторЦикла = ИтераторЦикла + 1;
			КлючСтруктуры = "ТитулФрахтователяОписаниеГруза__" + ИтераторЦикла + "__НадлежащееОтгрузочноеНаименование";
		КонецЦикла;
				
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗаполнитьЭПДПоОбъектуXDTOРекурсивно(ОбъектXDTO, ДокументОбъект, МакетСоответствиеИмен, СчетчикСтрок, Знач УзелРодителя, Знач УровниИерархий = Неопределено)
	
	Если ДокументОбъект.ДополнительныеСвойства.Свойство("СтруктураРеквизитов") = Ложь Тогда
		ДокументОбъект.ДополнительныеСвойства.Вставить("СтруктураРеквизитов", Новый Структура);
	КонецЕсли;	
	
	МассивОбъектовXDTO = Новый Массив;
	Если ТипЗнч(ОбъектXDTO) = Тип("Строка") Тогда
		МассивОбъектовXDTO.Добавить(Новый Структура("Имя, Объект", "", ОбъектXDTO));
	Иначе
		Для Каждого ТекущееСвойство Из ОбъектXDTO.Свойства() Цикл
			ТекущийОбъектXDTO = ОбъектXDTO[ТекущееСвойство.Имя];
			МассивОбъектовXDTO.Добавить(Новый Структура("Имя, Объект", ТекущееСвойство.Имя, ТекущийОбъектXDTO));
		КонецЦикла;
	КонецЕсли;
	
	НомерТекущегоСвойства = 0;
	Для Каждого ТекущийОбъектXDTO Из МассивОбъектовXDTO Цикл
		НомерТекущегоСвойства = НомерТекущегоСвойства + 1;
		ТекущийУзел = УзелРодителя + "/" + ТекущийОбъектXDTO.Имя;
		// Список
		Если ТипЗнч(ТекущийОбъектXDTO.Объект) = Тип("СписокXDTO") Тогда
			ОбластьКолонкаУзлов = МакетСоответствиеИмен.Область(,2,МакетСоответствиеИмен.ВысотаТаблицы,2);
			ОбластьНайдено = МакетСоответствиеИмен.НайтиТекст(ТекущийУзел, , ОбластьКолонкаУзлов, Ложь, Истина, Истина, Ложь);
			
			Если ОбластьНайдено <> Неопределено Тогда
				ИмяРеквизита = МакетСоответствиеИмен.Область(ОбластьНайдено.Верх, 1).Текст;
				НомерСтроки = СчетчикСтрок.Получить(ИмяРеквизита);
				Если НомерСтроки = Неопределено Тогда
					НомерСтроки = 0;
				КонецЕсли;
				УровниИерархийТекущий = Новый Массив;
				Если УровниИерархий <> Неопределено Тогда
					Для Индекс = 0 По УровниИерархий.ВГраница() Цикл
						УровниИерархийТекущий.Добавить(УровниИерархий[Индекс]);
					КонецЦикла;	
				КонецЕсли;
				УровниИерархийТекущий.Добавить(0);
				Для Каждого ЭлементСпискаXDTO Из ТекущийОбъектXDTO.Объект Цикл
					НомерСтроки = НомерСтроки + 1;
					СчетчикСтрок.Вставить(ИмяРеквизита, НомерСтроки); 
					УровниИерархийТекущий[УровниИерархийТекущий.ВГраница()] = Строка(Новый УникальныйИдентификатор);
					ЗаполнитьЭПДПоОбъектуXDTOРекурсивно(ЭлементСпискаXDTO, ДокументОбъект, МакетСоответствиеИмен, СчетчикСтрок, ТекущийУзел, УровниИерархийТекущий);
				КонецЦикла;
			КонецЕсли;
			// Объект
		ИначеЕсли ТипЗнч(ТекущийОбъектXDTO.Объект) = Тип("ОбъектXDTO") Тогда  		
			ЗаполнитьЭПДПоОбъектуXDTOРекурсивно(ТекущийОбъектXDTO.Объект, ДокументОбъект, МакетСоответствиеИмен, СчетчикСтрок, ТекущийУзел, УровниИерархий);			
			// Значение
		Иначе        	
			ОбластьКолонкаУзлов = МакетСоответствиеИмен.Область(,2,МакетСоответствиеИмен.ВысотаТаблицы,2);
			ОбластьНайдено = МакетСоответствиеИмен.НайтиТекст(ТекущийУзел, , ОбластьКолонкаУзлов, Ложь, Истина, Истина, Ложь);	
		
			Если ОбластьНайдено <> Неопределено Тогда
				ИмяРеквизита = МакетСоответствиеИмен.Область(ОбластьНайдено.Верх, 1).Текст;
				ТипРеквизита = МакетСоответствиеИмен.Область(ОбластьНайдено.Верх, 7).Текст;
				Если СтрНайти(ИмяРеквизита, ".") Тогда
					ИмяТЧИКолонки = СтрРазделить(ИмяРеквизита, ".");
					НомерСтрокиТЧ = СчетчикСтрок.Получить(ИмяТЧИКолонки[0]);
					Если ТипРеквизита = "Дата" Тогда
						ЗначениеРеквизита = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВДату(ТекущийОбъектXDTO.Объект);
					ИначеЕсли ТипРеквизита = "Число" Тогда
						ЗначениеРеквизита = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВЧисло(ТекущийОбъектXDTO.Объект);
					ИначеЕсли ТипРеквизита = "Булево" Тогда
						ЗначениеРеквизита = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВБулево(ТекущийОбъектXDTO.Объект);	
					Иначе
						ЗначениеРеквизита = ТекущийОбъектXDTO.Объект;
					КонецЕсли;
					ДокументОбъект.ДополнительныеСвойства.СтруктураРеквизитов.Вставить(
						ИмяТЧИКолонки[0] + "__" + НомерСтрокиТЧ + "__" + ИмяТЧИКолонки[1], ЗначениеРеквизита);
					Если УровниИерархий.Количество() > 0 Тогда
						ДокументОбъект.ДополнительныеСвойства.СтруктураРеквизитов.Вставить(
							ИмяТЧИКолонки[0] + "__" + НомерСтрокиТЧ + "__ИдентификаторСтроки", УровниИерархий[УровниИерархий.ВГраница()]);
					КонецЕсли;
					Если УровниИерархий.Количество() > 1 Тогда
						ДокументОбъект.ДополнительныеСвойства.СтруктураРеквизитов.Вставить(
							ИмяТЧИКолонки[0] + "__" + НомерСтрокиТЧ + "__ИдентификаторСтрокиРодителя", УровниИерархий[УровниИерархий.ВГраница() - 1]);
					КонецЕсли;
				Иначе      
					Если ТипРеквизита = "Дата" Тогда
						ЗначениеРеквизита = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВДату(ТекущийОбъектXDTO.Объект);
					ИначеЕсли ТипРеквизита = "Число" Тогда
						ЗначениеРеквизита = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВЧисло(ТекущийОбъектXDTO.Объект);
					ИначеЕсли ТипРеквизита = "Булево" Тогда
						ЗначениеРеквизита = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВБулево(ТекущийОбъектXDTO.Объект);
					Иначе
						ЗначениеРеквизита = ТекущийОбъектXDTO.Объект;
					КонецЕсли;
					ДокументОбъект.ДополнительныеСвойства.СтруктураРеквизитов.Вставить(ИмяРеквизита, ЗначениеРеквизита);
				КонецЕсли;
            КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьВТаблицуТипЭлементаРегламента(Таблица, КодТранзакции, ТипЭлементаРегламента)
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.КодТранзакции = КодТранзакции;
	НоваяСтрока.ТипЭлементаРегламента = ТипЭлементаРегламента;
	
КонецПроцедуры

Функция ПостфиксМакетаПоНомеруВерсии(НомерВерсии)
	
	Результат = "";
	
	Если НомерВерсии = "5.01" Тогда
		Результат = "";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция КлючеваяИнформацияПоТитулу(ОбъектXDTO)
	
	//@skip-check structure-consructor-too-many-keys
	Результат = Новый Структура("ПолеПоиска, 
								|ЗначениеИДПоиска, 
								|ТипДокумента,
								|ПрефиксТитула,
								|ВерсияФормата, 
								|Титул, 
								|МинтрансИД, 
								|Номер, 
								|Дата,
								|НомерВерсии,
								|ДатаВерсии,
								|ЭтоИсправление,
								|ПоДоверенности");
	
	Адресаты = ОбменСГИСЭПДКлиентСервер.АдресатыПоИдФайл(ОбъектXDTO.ИдФайл);
	
	Для Каждого КиЗ Из Адресаты Цикл
		Результат.Вставить(КиЗ.Ключ, КиЗ.Значение);	
	КонецЦикла;

	Результат.НомерВерсии = 0;
	
	Попытка
		Результат.ВерсияФормата = ОбъектXDTO.ВерсФорм;
		// Электронная транспортная накладная
		Если СтрНачинаетсяС(ОбъектXDTO.ИдФайл, "ON_TRNACLGROT") Или СтрНачинаетсяС(ОбъектXDTO.ИдФайл, "ON_TRNGO") Тогда
			Результат.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭТрН;
			Результат.ПрефиксТитула = "ТитулГрузоотправителя";
			Результат.Титул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул1;
			Результат.МинтрансИД = ЗначениеНеобязательногоСвойства(ОбъектXDTO.Документ.СодИнфГО, "УИД_ТрН", , "");
			Результат.Номер = ОбъектXDTO.Документ.СодИнфГО.НомерТрН;
			Результат.Дата = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВДату(ОбъектXDTO.Документ.СодИнфГО.ДатаТрН);
			Результат.ЭтоИсправление = ЗначениеНеобязательногоСвойства(ОбъектXDTO.Документ.СодИнфГО, "ИспрТрН") <> Неопределено;
			Если Результат.ЭтоИсправление = Истина Тогда
				Результат.ПолеПоиска = "УИДМинтранс";
				Результат.ЗначениеИДПоиска = Результат.МинтрансИД;	
				Результат.НомерВерсии = ЗначениеНеобязательногоСвойства(ОбъектXDTO.Документ.СодИнфГО.ИспрТрН, "НомИспр"); 
			Иначе
				Результат.ПолеПоиска = "ТитулГрузоотправителяИдентификаторФайла";
				Результат.ЗначениеИДПоиска = ОбъектXDTO.ИдФайл;	
			КонецЕсли;
			Результат.Грузоперевозчик = Адресаты.Грузоперевозчик;
			Результат.Грузополучатель = Адресаты.Грузополучатель;	
			Результат.Грузоотправитель = Адресаты.Грузоотправитель;
			Результат.ПоДоверенности = ЗначениеНеобязательногоСвойства(ОбъектXDTO.Документ, "НаимЭкСубСост") <> Неопределено;
			ВремяВерсии = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВДату(ОбъектXDTO.Документ.ВрИнфГО);
			Результат.ДатаВерсии = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВДату(ОбъектXDTO.Документ.ДатИнфГО) 
									+ 60*60*Час(ВремяВерсии) + 60*Минута(ВремяВерсии) + Секунда(ВремяВерсии);
		ИначеЕсли СтрНачинаетсяС(ОбъектXDTO.ИдФайл, "ON_TRNACLPPRIN") Или СтрНачинаетсяС(ОбъектXDTO.ИдФайл, "ON_TRNPERPRIN") Тогда
			Результат.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭТрН;
			Результат.ПрефиксТитула = "ТитулПеревозчикаПриемка";
			Результат.ПолеПоиска = "ТитулГрузоотправителяИдентификаторФайла";
			Результат.Титул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул2;
			Результат.ЗначениеИДПоиска = ОбъектXDTO.Документ.ИдИнфГО.ИдФайлИнфГО;
			Результат.МинтрансИД = ОбъектXDTO.Документ.СодИнфПрвПрием.УИД_ТрН;
			Результат.Номер = "";
			Результат.Дата = '00010101'; 
			Результат.ЭтоИсправление = Ложь;
			Результат.Грузополучатель = Адресаты.Грузополучатель;
			Результат.Грузоотправитель = Адресаты.Грузоотправитель;
			Результат.Грузоперевозчик = Адресаты.Грузоперевозчик;
			ВремяВерсии = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВДату(ОбъектXDTO.Документ.ВрИнфПрвПрием);
			Результат.ДатаВерсии = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВДату(ОбъектXDTO.Документ.ДатИнфПрвПрием) 
									+ 60*60*Час(ВремяВерсии) + 60*Минута(ВремяВерсии) + Секунда(ВремяВерсии);
		ИначеЕсли СтрНачинаетсяС(ОбъектXDTO.ИдФайл, "ON_TRNINFGO") Тогда
			Результат.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭТрН;
			Результат.ПрефиксТитула = "ТитулУказаниеПереадрес";
			Результат.Титул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул9;
			Результат.ПолеПоиска = "УИДМинтранс";
			Результат.ЗначениеИДПоиска = ОбъектXDTO.Документ.СодУказПА.УИД_ТрН; //ОбъектXDTO.Документ.ИдИнфПрвПрием.ИдФайлПрвПрием;
			Результат.МинтрансИД = ОбъектXDTO.Документ.СодУказПА.УИД_ТрН;
			Результат.Номер = "";
			Результат.Дата = '00010101'; 
			Результат.ЭтоИсправление = Ложь;
			Результат.Грузоотправитель = Адресаты.Грузоотправитель;
			Результат.Грузополучатель = Адресаты.Грузополучатель;
			Результат.Грузоперевозчик = Адресаты.Грузоперевозчик;
			ВремяВерсии = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВДату(ОбъектXDTO.Документ.ВрУказПА);
			Результат.ДатаВерсии = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВДату(ОбъектXDTO.Документ.ДатаУказПА) 
									+ 60*60*Час(ВремяВерсии) + 60*Минута(ВремяВерсии) + Секунда(ВремяВерсии);
		ИначеЕсли СтрНачинаетсяС(ОбъектXDTO.ИдФайл, "ON_TRNPEREADR") Тогда
			Результат.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭТрН;
			Результат.ПрефиксТитула = "ТитулПереадресовка";
			Результат.Титул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул7;
			Результат.ПолеПоиска = "УИДМинтранс";
			Результат.ЗначениеИДПоиска = ОбъектXDTO.Документ.СодИнфПА.УИД_ТрН; //ОбъектXDTO.Документ.ИдИнфПрвПрием.ИдФайлПрвПрием;
			Результат.МинтрансИД = ОбъектXDTO.Документ.СодИнфПА.УИД_ТрН;
			Результат.Номер = "";
			Результат.Дата = '00010101'; 
			Результат.ЭтоИсправление = ЗначениеНеобязательногоСвойства(ОбъектXDTO.Документ.СодИнфПА, "ИспрТрН") <> Неопределено;
			Если Результат.ЭтоИсправление = Истина Тогда
				Результат.НомерВерсии = ЗначениеНеобязательногоСвойства(ОбъектXDTO.Документ.СодИнфПА.ИспрТрН, "НомерИспр");
			КонецЕсли;
			Результат.Грузоотправитель = Адресаты.Грузоотправитель;
			Результат.Грузополучатель = Адресаты.Грузополучатель;
			Результат.Грузоперевозчик = Адресаты.Грузоперевозчик;
			ВремяВерсии = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВДату(ОбъектXDTO.Документ.ВрИнфПА);
			Результат.ДатаВерсии = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВДату(ОбъектXDTO.Документ.ДатаИнфПА) 
									+ 60*60*Час(ВремяВерсии) + 60*Минута(ВремяВерсии) + Секунда(ВремяВерсии);
		ИначеЕсли СтрНачинаетсяС(ОбъектXDTO.ИдФайл, "ON_TRNZAMEN") Тогда
			Результат.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭТрН;
			Результат.ПрефиксТитула = "ТитулПеревозчикаЗамены";
			Результат.Титул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул8;
			Результат.ПолеПоиска = "УИДМинтранс";
			Результат.ЗначениеИДПоиска = ОбъектXDTO.Документ.СодИнфЗамен.УИД_ТрН; //ОбъектXDTO.Документ.ИдИнфПрвПрием.ИдФайлПрвПрием;
			Результат.МинтрансИД = ОбъектXDTO.Документ.СодИнфЗамен.УИД_ТрН;
			Результат.Номер = "";
			Результат.Дата = '00010101'; 
			Результат.ЭтоИсправление = ЗначениеНеобязательногоСвойства(ОбъектXDTO.Документ.СодИнфЗамен, "ИспрТрН") <> Неопределено;
			Если Результат.ЭтоИсправление = Истина Тогда
				Результат.НомерВерсии = ЗначениеНеобязательногоСвойства(ОбъектXDTO.Документ.СодИнфЗамен.ИспрТрН, "НомерИспр");
			КонецЕсли;
			Результат.Грузоотправитель = Адресаты.Грузоотправитель;
			Результат.Грузополучатель = Адресаты.Грузополучатель;
			Результат.Грузоперевозчик = Адресаты.Грузоперевозчик;
			ВремяВерсии = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВДату(ОбъектXDTO.Документ.ВрИнфЗамен);
			Результат.ДатаВерсии = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВДату(ОбъектXDTO.Документ.ДатИнфЗамен) 
									+ 60*60*Час(ВремяВерсии) + 60*Минута(ВремяВерсии) + Секунда(ВремяВерсии);
		ИначеЕсли СтрНачинаетсяС(ОбъектXDTO.ИдФайл, "ON_TRNACLGRPO") Или СтрНачинаетсяС(ОбъектXDTO.ИдФайл, "ON_TRNGP") Тогда
			Результат.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭТрН;
			Результат.ПрефиксТитула = "ТитулГрузополучателя";
			Результат.Титул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул3;
			Результат.ПолеПоиска = "УИДМинтранс";
			Результат.ЗначениеИДПоиска = ОбъектXDTO.Документ.СодИнфГП.УИД_ТрН; //ОбъектXDTO.Документ.ИдИнфПрвПрием.ИдФайлИнфПрвПрием;
			Результат.МинтрансИД = ОбъектXDTO.Документ.СодИнфГП.УИД_ТрН;
			Результат.Номер = "";
			Результат.Дата = '00010101'; 
			Результат.ЭтоИсправление = ЗначениеНеобязательногоСвойства(ОбъектXDTO.Документ.СодИнфГП, "ИспрТрН") <> Неопределено;
			Если Результат.ЭтоИсправление = Истина Тогда
				Результат.НомерВерсии = ЗначениеНеобязательногоСвойства(ОбъектXDTO.Документ.СодИнфГП.ИспрТрН, "НомИспр");
			КонецЕсли;
			Результат.Грузоперевозчик = Адресаты.Грузоперевозчик;
			Результат.Грузоотправитель = Адресаты.Грузоотправитель;
			Результат.Грузополучатель = Адресаты.Грузополучатель;
			ВремяВерсии = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВДату(ОбъектXDTO.Документ.ВрИнфГП);
			Результат.ДатаВерсии = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВДату(ОбъектXDTO.Документ.ДатИнфГП) 
									+ 60*60*Час(ВремяВерсии) + 60*Минута(ВремяВерсии) + Секунда(ВремяВерсии);
		ИначеЕсли СтрНачинаетсяС(ОбъектXDTO.ИдФайл, "ON_TRNACLPVYN") Или СтрНачинаетсяС(ОбъектXDTO.ИдФайл, "ON_TRNPERVYD") Тогда
			Результат.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭТрН;
			Результат.ПрефиксТитула = "ТитулПеревозчикаВыдача";	
			Результат.Титул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул4;
			Результат.ПолеПоиска = "УИДМинтранс";
			Результат.ЗначениеИДПоиска = ОбъектXDTO.Документ.СодПрвВыд.УИД_ТрН; //ОбъектXDTO.Документ.ИдИнфГП.ИдФайлИнфГП;
			Результат.МинтрансИД = ОбъектXDTO.Документ.СодПрвВыд.УИД_ТрН;
			Результат.Номер = "";
			Результат.Дата = '00010101'; 
			Результат.ЭтоИсправление = Ложь;
			Результат.Грузополучатель = Адресаты.Грузополучатель;
			Результат.Грузоотправитель = Адресаты.Грузоотправитель;
			Результат.Грузоперевозчик = Адресаты.Грузоперевозчик;
			ВремяВерсии = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВДату(ОбъектXDTO.Документ.ВрИнфПрвВыд);
			Результат.ДатаВерсии = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВДату(ОбъектXDTO.Документ.ДатИнфПрвВыд) 
									+ 60*60*Час(ВремяВерсии) + 60*Минута(ВремяВерсии) + Секунда(ВремяВерсии);
		ИначеЕсли СтрНачинаетсяС(ОбъектXDTO.ИдФайл, "ON_TRNPUDPER") Тогда
			Результат.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭТрН;
			Результат.ПрефиксТитула = "ТитулПеревозчикаФХЖ";
			Результат.Титул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул5;
			Результат.ПолеПоиска = "УИДМинтранс";
			Результат.ЗначениеИДПоиска = ОбъектXDTO.Документ.СодФХЖ1.УИД_ТрН; //ОбъектXDTO.Документ.ИдИнфПрвВыд.ИдФайлПрвВыд;
			Результат.МинтрансИД = ОбъектXDTO.Документ.СодФХЖ1.УИД_ТрН;
			Результат.Номер = "";
			Результат.Дата = '00010101'; 
			Результат.ЭтоИсправление = ЗначениеНеобязательногоСвойства(ОбъектXDTO.Документ.СодФХЖ1, "ИспрПУД") <> Неопределено;
			Если Результат.ЭтоИсправление = Истина Тогда
				Результат.НомерВерсии = ЗначениеНеобязательногоСвойства(ОбъектXDTO.Документ.СодФХЖ1.ИспрПУД, "НомерИспр");
			КонецЕсли;
			Результат.Грузоотправитель = Адресаты.Грузоотправитель;
			Результат.Грузоперевозчик = Адресаты.Грузоперевозчик;
			ВремяВерсии = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВДату(ОбъектXDTO.Документ.ВрПУДИнфПрв);
			Результат.ДатаВерсии = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВДату(ОбъектXDTO.Документ.ДатПУДИнфПрв) 
									+ 60*60*Час(ВремяВерсии) + 60*Минута(ВремяВерсии) + Секунда(ВремяВерсии);
		ИначеЕсли СтрНачинаетсяС(ОбъектXDTO.ИдФайл, "ON_TRNPUDGO") Тогда
			Результат.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭТрН;
			Результат.ПрефиксТитула = "ТитулГрузоотправителяФХЖ";
			Результат.Титул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул6;
			Результат.ПолеПоиска = "УИДМинтранс";
			Результат.ЗначениеИДПоиска = ОбъектXDTO.Документ.СодФХЖ2.УИД_ТрН; //ОбъектXDTO.Документ.ИдПУДИнфПрв.ИдФайлПУДИнфПрв;
			Результат.МинтрансИД = ОбъектXDTO.Документ.СодФХЖ2.УИД_ТрН;
			Результат.Номер = "";
			Результат.Дата = '00010101'; 
			Результат.ЭтоИсправление = Ложь;
			Результат.Грузоперевозчик = Адресаты.Грузоперевозчик;
			Результат.Грузоотправитель = Адресаты.Грузоотправитель;
			ВремяВерсии = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВДату(ОбъектXDTO.Документ.ВрПУДИнфГО);
			Результат.ДатаВерсии = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВДату(ОбъектXDTO.Документ.ДатПУДИнфГО) 
									+ 60*60*Час(ВремяВерсии) + 60*Минута(ВремяВерсии) + Секунда(ВремяВерсии);
			
		// Электронный заказ-наряд
		ИначеЕсли СтрНачинаетсяС(ОбъектXDTO.ИдФайл, "ON_ZAKAZNARSOG") Тогда
			Результат.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭЗН;
			Результат.ПрефиксТитула = "ТитулФрахтовщика";
			Результат.Титул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭЗН_Титул2;
			Результат.ПолеПоиска = "ТитулФрахтователяИдентификаторФайла";
			Результат.ЗначениеИДПоиска = ОбъектXDTO.Документ.ИдИнфФт.ИдФайлИнфФт;
			Результат.МинтрансИД = ОбъектXDTO.Документ.СодЗНИнфФщ.УИД_ЗН;
			Результат.Номер = "";
			Результат.Дата = '00010101';
			Результат.Грузоотправитель = Адресаты.Грузоотправитель;
			Результат.Грузоперевозчик = Адресаты.Грузоперевозчик;
			ВремяВерсии = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВДату(ОбъектXDTO.Документ.ВрИнфФщ);
			Результат.ДатаВерсии = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВДату(ОбъектXDTO.Документ.ДатИнфФщ) 
									+ 60*60*Час(ВремяВерсии) + 60*Минута(ВремяВерсии) + Секунда(ВремяВерсии);
		ИначеЕсли СтрНачинаетсяС(ОбъектXDTO.ИдФайл, "ON_ZAKAZNARPOD") Тогда
			Результат.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭЗН;
			Результат.ПрефиксТитула = "ТитулФрахтователяПодача";
			Результат.Титул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭЗН_Титул3;
			Результат.ПолеПоиска = "ТитулФрахтовщикаИдентификаторФайла";
			Результат.ЗначениеИДПоиска = ОбъектXDTO.Документ.ИдИнфФщ.ИдФайлИнфФщ;
			Результат.МинтрансИД = ОбъектXDTO.Документ.СодЗНИнфФт.УИД_ЗН;
			Результат.Номер = "";
			Результат.Дата = '00010101';
			Результат.Грузоотправитель = Адресаты.Грузоотправитель;
			Результат.Грузоперевозчик = Адресаты.Грузоперевозчик;
			ВремяВерсии = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВДату(ОбъектXDTO.Документ.ВрИнфФт);
			Результат.ДатаВерсии = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВДату(ОбъектXDTO.Документ.ДатИнфФт) 
									+ 60*60*Час(ВремяВерсии) + 60*Минута(ВремяВерсии) + Секунда(ВремяВерсии);
		ИначеЕсли СтрНачинаетсяС(ОбъектXDTO.ИдФайл, "ON_ZAKAZNARVOZ") Тогда
			Результат.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭЗН;
			Результат.ПрефиксТитула = "ТитулФрахтовщикаВозврат";
			Результат.Титул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭЗН_Титул4;
			Результат.ПолеПоиска = "ТитулФрахтовщикаИдентификаторФайла";
			Результат.ЗначениеИДПоиска = ОбъектXDTO.Документ.ИдИнфФт.ИдФайлИнфФт;
			Результат.МинтрансИД = ОбъектXDTO.Документ.СодЗНИнфФщ.УИД_ЗН;
			Результат.Номер = "";
			Результат.Дата = '00010101';
			Результат.Грузоотправитель = Адресаты.Грузоотправитель;
			Результат.Грузоперевозчик = Адресаты.Грузоперевозчик;
			ВремяВерсии = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВДату(ОбъектXDTO.Документ.ВрИнфФщ);
			Результат.ДатаВерсии = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВДату(ОбъектXDTO.Документ.ДатИнфФщ) 
									+ 60*60*Час(ВремяВерсии) + 60*Минута(ВремяВерсии) + Секунда(ВремяВерсии);
		ИначеЕсли СтрНачинаетсяС(ОбъектXDTO.ИдФайл, "ON_ZAKAZNAR") Тогда
			Результат.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭЗН;
			Результат.ПрефиксТитула = "ТитулФрахтователя";
			Результат.Титул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭЗН_Титул1;
			Результат.ПолеПоиска = "ТитулФрахтователяИдентификаторФайла";
			Результат.ЗначениеИДПоиска = ОбъектXDTO.ИдФайл;
			Результат.МинтрансИД = ОбъектXDTO.Документ.СодЗНИнфФт.УИД_ЗН;
			Результат.Номер = ОбъектXDTO.Документ.СодЗНИнфФт.НомерЗН;
			Результат.Дата = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВДату(ОбъектXDTO.Документ.СодЗНИнфФт.ДатаЗН);
			Результат.Грузоотправитель = Адресаты.Грузоотправитель;
			Результат.Грузоперевозчик = Адресаты.Грузоперевозчик;
			ВремяВерсии = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВДату(ОбъектXDTO.Документ.ВрИнфФт);
			Результат.ДатаВерсии = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВДату(ОбъектXDTO.Документ.ДатИнфФт) 
									+ 60*60*Час(ВремяВерсии) + 60*Минута(ВремяВерсии) + Секунда(ВремяВерсии);
									
		// Электронная сопроводительная ведомость
		ИначеЕсли СтрНачинаетсяС(ОбъектXDTO.ИдФайл, "ON_SOPVEDPER") Тогда
			Результат.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭСВ;
			Результат.МинтрансИД = ЗначениеНеобязательногоСвойства(ОбъектXDTO.Документ.СодСВИнфПрв, "УИД_СВ", , "");
			Если СтрНачинаетсяС(ОбъектXDTO.ИдФайл, "ON_SOPVEDPER3")
				Или СтрНачинаетсяС(ОбъектXDTO.ИдФайл, "ON_SOPVEDPER4") Тогда
					Результат.ПрефиксТитула = "ДопТитулПеревозчика";
					Результат.ПолеПоиска = "УИДМинтранс";
					Результат.ЗначениеИДПоиска = Результат.МинтрансИД;
			Иначе
				Результат.ПрефиксТитула = "ТитулПеревозчика";
				Результат.ПолеПоиска = "ТитулПеревозчикаИдентификаторФайла";
				Результат.ЗначениеИДПоиска = ОбъектXDTO.ИдФайл;
			КонецЕсли;
			Если СтрНачинаетсяС(ОбъектXDTO.ИдФайл, "ON_SOPVEDPER1") Тогда
				Результат.Титул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул1_1;
			ИначеЕсли СтрНачинаетсяС(ОбъектXDTO.ИдФайл, "ON_SOPVEDPER2") Тогда
				Результат.Титул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул1_2;
			ИначеЕсли СтрНачинаетсяС(ОбъектXDTO.ИдФайл, "ON_SOPVEDPER3") Тогда
				Результат.Титул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул1_3;
			ИначеЕсли СтрНачинаетсяС(ОбъектXDTO.ИдФайл, "ON_SOPVEDPER4") Тогда
				Результат.Титул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул1_4;
			ИначеЕсли СтрНачинаетсяС(ОбъектXDTO.ИдФайл, "ON_SOPVEDPER5") Тогда
				Результат.Титул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул1_5;
			КонецЕсли;
			Результат.Номер = ОбъектXDTO.Документ.СодСВИнфПрв.НомерСВ;
			Результат.Дата = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВДату(ОбъектXDTO.Документ.СодСВИнфПрв.ДатаСВ);
			Результат.Грузоперевозчик = Адресаты.Грузоперевозчик;
			Результат.Грузополучатель = Адресаты.Грузополучатель;
			Результат.Грузоотправитель = Адресаты.Грузоотправитель;
			ВремяВерсии = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВДату(ОбъектXDTO.Документ.ВрИнфПрв);
			Результат.ДатаВерсии = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВДату(ОбъектXDTO.Документ.ДатИнфПрв) 
									+ 60*60*Час(ВремяВерсии) + 60*Минута(ВремяВерсии) + Секунда(ВремяВерсии);
		ИначеЕсли СтрНачинаетсяС(ОбъектXDTO.ИдФайл, "ON_SOPVEDGO") Тогда
			Результат.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭСВ;
			Результат.ПрефиксТитула = "ТитулГрузоотправителя";
			Результат.ПолеПоиска = "ТитулПеревозчикаИдентификаторФайла";
			Если СтрНачинаетсяС(ОбъектXDTO.ИдФайл, "ON_SOPVEDGO1") Тогда
				Результат.Титул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул2_1;
			ИначеЕсли СтрНачинаетсяС(ОбъектXDTO.ИдФайл, "ON_SOPVEDGO2") Тогда
				Результат.Титул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул2_2;
			КонецЕсли;
			Результат.ЗначениеИДПоиска = ОбъектXDTO.Документ.ИдИнфПрв.ИдФайлИнфПрв;
			Результат.МинтрансИД = ЗначениеНеобязательногоСвойства(ОбъектXDTO.Документ.СодСВИнфГО, "УИД_СВ", , "");
			Результат.Номер = "";
			Результат.Дата = '00010101';
			Результат.Грузоперевозчик = Адресаты.Грузоперевозчик;
			Результат.Грузополучатель = Адресаты.Грузополучатель;
			Результат.Грузоотправитель = Адресаты.Грузоотправитель; 
			ВремяВерсии = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВДату(ОбъектXDTO.Документ.ВрИнфГО);
			Результат.ДатаВерсии = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВДату(ОбъектXDTO.Документ.ДатИнфГО) 
									+ 60*60*Час(ВремяВерсии) + 60*Минута(ВремяВерсии) + Секунда(ВремяВерсии);
		ИначеЕсли СтрНачинаетсяС(ОбъектXDTO.ИдФайл, "ON_SOPVEDGP") Тогда
			Результат.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭСВ;
			Результат.ПрефиксТитула = "ТитулГрузополучателя";
			Если СтрНачинаетсяС(ОбъектXDTO.ИдФайл, "ON_SOPVEDGP1") Тогда
				Результат.Титул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул3_1;
				Результат.ПолеПоиска = "ДопТитулПеревозчикаИдентификаторФайла";
			ИначеЕсли СтрНачинаетсяС(ОбъектXDTO.ИдФайл, "ON_SOPVEDGP2") Тогда
				Результат.Титул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭСВ_Титул3_2;
				Результат.ПолеПоиска = "ТитулПеревозчикаИдентификаторФайла";
			КонецЕсли;
			Результат.ЗначениеИДПоиска = ОбъектXDTO.Документ.ИдИнфПрв.ИдФайлИнфПрв;
			Результат.МинтрансИД = ЗначениеНеобязательногоСвойства(ОбъектXDTO.Документ.СодСВИнфГП, "УИД_СВ", , "");
			Результат.Номер = "";
			Результат.Дата = '00010101';
			Результат.Грузоперевозчик = Адресаты.Грузоперевозчик;
			Результат.Грузополучатель = Адресаты.Грузополучатель;
			Результат.Грузоотправитель = Адресаты.Грузоотправитель;
			ВремяВерсии = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВДату(ОбъектXDTO.Документ.ВрИнфГП);
			Результат.ДатаВерсии = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВДату(ОбъектXDTO.Документ.ДатИнфГП) 
									+ 60*60*Час(ВремяВерсии) + 60*Минута(ВремяВерсии) + Секунда(ВремяВерсии);
									
		// Электронный заказ (заявка)
		ИначеЕсли СтрНачинаетсяС(ОбъектXDTO.ИдФайл, "ON_ZAKZVPER") Тогда
			Результат.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭЗЗ;
			Результат.ПрефиксТитула = "ТитулПеревозчика";
			Результат.Титул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭЗЗ_Титул2;
			Результат.ПолеПоиска = "ТитулГрузоотправителяИдентификаторФайла";
			Результат.ЗначениеИДПоиска = ОбъектXDTO.Документ.ИдИнфГО.ИдФайлИнфГО;
			Результат.МинтрансИД = ОбъектXDTO.Документ.СодИнфПрв.УИД_Зак;
			Результат.Номер = "";
			Результат.Дата = '00010101';
			Результат.Грузоотправитель = Адресаты.Грузоотправитель;
			Результат.Грузоперевозчик = Адресаты.Грузоперевозчик;
			ВремяВерсии = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВДату(ОбъектXDTO.Документ.ВрИнфПрв);
			Результат.ДатаВерсии = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВДату(ОбъектXDTO.Документ.ДатИнфПрв) 
									+ 60*60*Час(ВремяВерсии) + 60*Минута(ВремяВерсии) + Секунда(ВремяВерсии);
		ИначеЕсли СтрНачинаетсяС(ОбъектXDTO.ИдФайл, "ON_ZAKZVGO") Тогда
			Результат.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭЗЗ;
			Результат.ПрефиксТитула = "ТитулГрузоотправителя";
			Результат.Титул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭЗЗ_Титул1;
			Результат.ПолеПоиска = "ТитулГрузоотправителяИдентификаторФайла";
			Результат.ЗначениеИДПоиска = ОбъектXDTO.ИдФайл;
			Результат.МинтрансИД = ЗначениеНеобязательногоСвойства(ОбъектXDTO.Документ.СодИнфГО, "УИД_Зак", , "");
			Результат.Номер = ОбъектXDTO.Документ.СодИнфГО.НомЗак;
			Результат.Дата = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВДату(ОбъектXDTO.Документ.СодИнфГО.ДатаЗак);
			Результат.Грузоотправитель = Адресаты.Грузоотправитель;
			Результат.Грузоперевозчик = Адресаты.Грузоперевозчик;
			ВремяВерсии = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВДату(ОбъектXDTO.Документ.ВрИнфГО);
			Результат.ДатаВерсии = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВДату(ОбъектXDTO.Документ.ДатИнфГО) 
									+ 60*60*Час(ВремяВерсии) + 60*Минута(ВремяВерсии) + Секунда(ВремяВерсии);
									
		// Электронный путевой лист
		ИначеЕсли СтрНачинаетсяС(ОбъектXDTO.ИдФайл, "ON_PTLSSOBTS") Тогда
			Результат.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭПЛ;
			Результат.ПрефиксТитула = "ТитулОформление";
			Результат.Титул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул1;
			Результат.ПолеПоиска = "ТитулОформлениеИдентификаторФайла";
			Результат.ЗначениеИДПоиска = ОбъектXDTO.ИдФайл;
			Результат.МинтрансИД = ЗначениеНеобязательногоСвойства(ОбъектXDTO.Документ.СодИнфСоб, "УИД_ПЛ", , "");
			Результат.Номер = ОбъектXDTO.Документ.НомерПЛ;
			Результат.Дата = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВДату(ОбъектXDTO.Документ.ДатаПЛ);
			Результат.Грузоотправитель = Адресаты.Грузоотправитель;
			Результат.Грузоперевозчик = Адресаты.Грузоперевозчик;
			ВремяВерсии = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВДату(ОбъектXDTO.Документ.ВрИнфСоб);
			Результат.ДатаВерсии = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВДату(ОбъектXDTO.Документ.ДатИнфСоб) 
									+ 60*60*Час(ВремяВерсии) + 60*Минута(ВремяВерсии) + Секунда(ВремяВерсии);
		ИначеЕсли СтрНачинаетсяС(ОбъектXDTO.ИдФайл, "ON_PTLSPRMO") Тогда
			Результат.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭПЛ;
			Результат.ПрефиксТитула = "ТитулМедосмотр";
			Результат.Титул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул2;
			Результат.ПолеПоиска = "ТитулОформлениеИдентификаторФайла";
			Результат.ЗначениеИДПоиска = ОбъектXDTO.Документ.ИдИнфСоб.ИдФайлИнфСоб; 
			Результат.МинтрансИД = ОбъектXDTO.Документ.СодИнфМО.УИД_ПЛ;
			Результат.Номер = "";
			Результат.Дата = '00010101';
			Результат.Грузоотправитель = Адресаты.Грузоотправитель;
			Результат.Грузоперевозчик = Адресаты.Грузоперевозчик;
			ВремяВерсии = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВДату(ОбъектXDTO.Документ.ВрИнфМО);
			Результат.ДатаВерсии = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВДату(ОбъектXDTO.Документ.ДатИнфМО) 
									+ 60*60*Час(ВремяВерсии) + 60*Минута(ВремяВерсии) + Секунда(ВремяВерсии);
		ИначеЕсли СтрНачинаетсяС(ОбъектXDTO.ИдФайл, "ON_PTLSVIPTS") Тогда
			Результат.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭПЛ;
			Результат.ПрефиксТитула = "ТитулВыпуск";
			Результат.Титул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул3;
			Результат.ПолеПоиска = "ТитулОформлениеИдентификаторФайла";
			Результат.ЗначениеИДПоиска = ОбъектXDTO.Документ.ИдИнфСоб.ИдФайлИнфСоб;
			Результат.МинтрансИД = ОбъектXDTO.Документ.СодИнфТехСост.УИД_ПЛ;
			Результат.Номер = "";
			Результат.Дата = '00010101';
			Результат.Грузоотправитель = Адресаты.Грузоотправитель;
			Результат.Грузоперевозчик = Адресаты.Грузоперевозчик;
			ВремяВерсии = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВДату(ОбъектXDTO.Документ.ВрИнфТехСост);
			Результат.ДатаВерсии = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВДату(ОбъектXDTO.Документ.ДатИнфТехСост) 
									+ 60*60*Час(ВремяВерсии) + 60*Минута(ВремяВерсии) + Секунда(ВремяВерсии);
		ИначеЕсли СтрНачинаетсяС(ОбъектXDTO.ИдФайл, "ON_PTLSODVZD") Тогда
			Результат.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭПЛ;
			Результат.ПрефиксТитула = "ТитулВыезд";
			Результат.Титул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул4;
			Если ОбъектXDTO.Документ.Свойства().Получить("ИдИнфСоб") <> Неопределено
				И ОбъектXDTO.Документ.ИдИнфСоб <> Неопределено Тогда
				Результат.ПолеПоиска = "ТитулОформлениеИдентификаторФайла";
				Результат.ЗначениеИДПоиска = ОбъектXDTO.Документ.ИдИнфСоб.ИдФайлИнфСоб;	
			ИначеЕсли ОбъектXDTO.Документ.Свойства().Получить("ИдИнфТехСост") <> Неопределено
				И ОбъектXDTO.Документ.ИдИнфТехСост <> Неопределено Тогда
				Результат.ПолеПоиска = "ТитулВыпускИдентификаторФайла";
				Результат.ЗначениеИДПоиска = ОбъектXDTO.Документ.ИдИнфТехСост.ИдФайлИнфТехСост;
			КонецЕсли;
			Результат.МинтрансИД = ОбъектXDTO.Документ.СодИнфВыезд.УИД_ПЛ;
			Результат.Номер = "";
			Результат.Дата = '00010101';
			Результат.Грузоотправитель = Адресаты.Грузоотправитель;
			Результат.Грузоперевозчик = Адресаты.Грузоперевозчик;
			ВремяВерсии = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВДату(ОбъектXDTO.Документ.ВрИнфВыезд);
			Результат.ДатаВерсии = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВДату(ОбъектXDTO.Документ.ДатИнфВыезд) 
									+ 60*60*Час(ВремяВерсии) + 60*Минута(ВремяВерсии) + Секунда(ВремяВерсии);
		ИначеЕсли СтрНачинаетсяС(ОбъектXDTO.ИдФайл, "ON_PTLSODPARK") Тогда
			Результат.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭПЛ;
			Результат.ПрефиксТитула = "ТитулЗаезд";
			Результат.Титул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул5;
			Результат.МинтрансИД = ОбъектXDTO.Документ.СодИнфЗаезд.УИД_ПЛ;
			Результат.ПолеПоиска = "УИДМинтранс";
			Результат.ЗначениеИДПоиска = Результат.МинтрансИД;		
			Результат.Номер = "";
			Результат.Дата = '00010101';
			Результат.Грузоотправитель = Адресаты.Грузоотправитель;
			Результат.Грузоперевозчик = Адресаты.Грузоперевозчик;
			ВремяВерсии = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВДату(ОбъектXDTO.Документ.ВрИнфЗаезд);
			Результат.ДатаВерсии = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВДату(ОбъектXDTO.Документ.ДатИнфЗаезд) 
									+ 60*60*Час(ВремяВерсии) + 60*Минута(ВремяВерсии) + Секунда(ВремяВерсии);
		ИначеЕсли СтрНачинаетсяС(ОбъектXDTO.ИдФайл, "ON_PTLSPOSMO") Тогда
			Результат.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭПЛ;
			Результат.ПрефиксТитула = "ТитулМедосмотрПосле";
			Результат.Титул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул6;
			Результат.ПолеПоиска = "ТитулЗаездИдентификаторФайла";
			Результат.ЗначениеИДПоиска = ОбъектXDTO.Документ.ИдИнфЗаезд.ИдФайлИнфЗаезд;
			Результат.МинтрансИД = ОбъектXDTO.Документ.СодИнфМО.УИД_ПЛ;
			Результат.Номер = "";
			Результат.Дата = '00010101';
			Результат.Грузоотправитель = Адресаты.Грузоотправитель;
			Результат.Грузоперевозчик = Адресаты.Грузоперевозчик;
			ВремяВерсии = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВДату(ОбъектXDTO.Документ.ВрИнфМО);
			Результат.ДатаВерсии = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВДату(ОбъектXDTO.Документ.ДатИнфМО) 
									+ 60*60*Час(ВремяВерсии) + 60*Минута(ВремяВерсии) + Секунда(ВремяВерсии);
									
		// Электронный договор фрахтования
		ИначеЕсли СтрНачинаетсяС(ОбъектXDTO.ИдФайл, "ON_DOGFRASHCH") Тогда
			Результат.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭДФ;
			Результат.ПрефиксТитула = "ТитулФрахтовщика";
			Результат.Титул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭДФ_Титул2;
			Результат.ПолеПоиска = "ТитулФрахтователяИдентификаторФайла";
			Результат.ЗначениеИДПоиска = ОбъектXDTO.Документ.ИдИнфФт.ИдФайлИнфФт;
			Результат.МинтрансИД = ОбъектXDTO.Документ.СодДФИнфФщ.УИД_ДФ;
			Результат.Номер = "";
			Результат.Дата = '00010101';
			Результат.Грузоотправитель = Адресаты.Грузоотправитель;
			Результат.Грузоперевозчик = Адресаты.Грузоперевозчик;
			ВремяВерсии = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВДату(ОбъектXDTO.Документ.ВрИнфФщ);
			Результат.ДатаВерсии = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВДату(ОбъектXDTO.Документ.ДатИнфФщ) 
									+ 60*60*Час(ВремяВерсии) + 60*Минута(ВремяВерсии) + Секунда(ВремяВерсии);
		ИначеЕсли СтрНачинаетсяС(ОбъектXDTO.ИдФайл, "ON_DOGFRAKHTEL") Тогда
			Результат.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭДФ;
			Результат.ПрефиксТитула = "ТитулФрахтователя";
			Результат.Титул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭДФ_Титул1;
			Результат.ПолеПоиска = "ТитулФрахтователяИдентификаторФайла";
			Результат.ЗначениеИДПоиска = ОбъектXDTO.ИдФайл;
			Результат.МинтрансИД = ЗначениеНеобязательногоСвойства(ОбъектXDTO.Документ.СодДФИнфФт, "УИД_ДФ", , "");
			Результат.Номер = "";
			Результат.Дата = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВДату(ОбъектXDTO.Документ.ДатИнфФт);
			Результат.Грузоотправитель = Адресаты.Грузоотправитель;
			Результат.Грузоперевозчик = Адресаты.Грузоперевозчик;
			ВремяВерсии = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВДату(ОбъектXDTO.Документ.ВрИнфФт);
			Результат.ДатаВерсии = ОбменСГИСЭПДКлиентСервер.ПреобразоватьВДату(ОбъектXDTO.Документ.ДатИнфФт) 
									+ 60*60*Час(ВремяВерсии) + 60*Минута(ВремяВерсии) + Секунда(ВремяВерсии);
		КонецЕсли;
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru='ЭПД.Чтение XDTO'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Неопределено;	
	КонецПопытки;
	
	Если ЗначениеЗаполнено(Результат.ПрефиксТитула) И ЗначениеЗаполнено(Результат.ЗначениеИДПоиска) Тогда
		Возврат Результат;		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ИспользоватьЭПД() 
	
	Возврат Истина;
	
КонецФункции

Функция ТипДокументаОтправляетсяВГИСЭПД(ТипДокумента)
	
	Если ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭТрН
		Или ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭЗН
		Или ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭСВ
		Или ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭЗЗ
		Или ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭПЛ
		Или ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭДФ Тогда
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция СформироватьДанныеПрикладногоДокумента(ОбъектУчета, Данные)
	
	ДанныеСообщения = ФорматыЭДО.НовыйРезультатФормированияДокументаПоУчету();
	
	ДвоичныеДанныеДокументаЭПД = ДвоичныеДанныеДокументаЭПД(ОбъектУчета, Данные);
	
	ЗаполнитьЗначенияСвойств(ДанныеСообщения.Документ, ДвоичныеДанныеДокументаЭПД); 
	
	Если ДвоичныеДанныеДокументаЭПД.ДвоичныеДанные = Неопределено Тогда
		ДанныеСообщения.ЕстьОшибки = Истина;
		СтруктураОшибки = ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки();
		Если ЗначениеЗаполнено(ДвоичныеДанныеДокументаЭПД.Ошибка) Тогда
			СтруктураОшибки.ТекстОшибки = ДвоичныеДанныеДокументаЭПД.Ошибка;	
		Иначе
			СтруктураОшибки.ТекстОшибки = "Нет доступного титула для отправки";
		КонецЕсли;
		ДанныеСообщения.Ошибки.ЗаполнениеДанных.Добавить(СтруктураОшибки);
	КонецЕсли;
	
	ДанныеСообщения.Содержание = ФорматыЭДО.НовоеОписаниеФайлаДокумента();
	Если ТипЗнч(ОбъектУчета) = Тип("ДокументСсылка.ЭлектроннаяТранспортнаяНакладная") Тогда
		ДанныеСообщения.Содержание.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭТрН;
		ДанныеСообщения.Содержание.ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭТрН; 
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектУчета, 
			"ТитулГрузоотправителяТранспортнаяНакладнаяНомер, Номер,
			|ТитулГрузоотправителяТранспортнаяНакладнаяДата, Дата");
		ДанныеСообщения.Содержание.НомерДокумента = ?(ЗначениеЗаполнено(РеквизитыДокумента.ТитулГрузоотправителяТранспортнаяНакладнаяНомер),
														РеквизитыДокумента.ТитулГрузоотправителяТранспортнаяНакладнаяНомер,
														РеквизитыДокумента.Номер);
		ДанныеСообщения.Содержание.ДатаДокумента = ?(ЗначениеЗаполнено(РеквизитыДокумента.ТитулГрузоотправителяТранспортнаяНакладнаяДата),
														РеквизитыДокумента.ТитулГрузоотправителяТранспортнаяНакладнаяДата,
														РеквизитыДокумента.Дата);
	ИначеЕсли ТипЗнч(ОбъектУчета) = Тип("ДокументСсылка.ЭлектронныйЗаказНаряд") Тогда
		ДанныеСообщения.Содержание.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭЗН;
		ДанныеСообщения.Содержание.ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭЗН; 
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектУчета, 
			"ТитулФрахтователяПорядковыйНомерЗаказНаряда, Номер,
			|ТитулФрахтователяДатаСоставленияЗаказНаряда, Дата");
		ДанныеСообщения.Содержание.НомерДокумента = ?(ЗначениеЗаполнено(РеквизитыДокумента.ТитулФрахтователяПорядковыйНомерЗаказНаряда),
														РеквизитыДокумента.ТитулФрахтователяПорядковыйНомерЗаказНаряда,
														РеквизитыДокумента.Номер);
		ДанныеСообщения.Содержание.ДатаДокумента = ?(ЗначениеЗаполнено(РеквизитыДокумента.ТитулФрахтователяДатаСоставленияЗаказНаряда),
														РеквизитыДокумента.ТитулФрахтователяДатаСоставленияЗаказНаряда,
														РеквизитыДокумента.Дата);
	ИначеЕсли ТипЗнч(ОбъектУчета) = Тип("ДокументСсылка.ЭлектроннаяСопроводительнаяВедомость") Тогда
		ДанныеСообщения.Содержание.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭСВ;
		ДанныеСообщения.Содержание.ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭСВ; 
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектУчета, 
			"ТитулПеревозчикаПорядковыйНомерСопроводительнойВедомости, Номер,
			|ТитулПеревозчикаДатаСоставленияСопроводительнойВедомости, Дата");
		ДанныеСообщения.Содержание.НомерДокумента = ?(ЗначениеЗаполнено(РеквизитыДокумента.ТитулПеревозчикаПорядковыйНомерСопроводительнойВедомости),
														РеквизитыДокумента.ТитулПеревозчикаПорядковыйНомерСопроводительнойВедомости,
														РеквизитыДокумента.Номер);
		ДанныеСообщения.Содержание.ДатаДокумента = ?(ЗначениеЗаполнено(РеквизитыДокумента.ТитулПеревозчикаДатаСоставленияСопроводительнойВедомости),
														РеквизитыДокумента.ТитулПеревозчикаДатаСоставленияСопроводительнойВедомости,
														РеквизитыДокумента.Дата);
	ИначеЕсли ТипЗнч(ОбъектУчета) = Тип("ДокументСсылка.ЭлектронныйЗаказЗаявка") Тогда
		ДанныеСообщения.Содержание.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭЗЗ;
		ДанныеСообщения.Содержание.ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭЗЗ; 
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектУчета, 
			"ТитулГрузоотправителяЗаказНомер, Номер,
			|ТитулГрузоотправителяЗаказДата, Дата");
		ДанныеСообщения.Содержание.НомерДокумента = ?(ЗначениеЗаполнено(РеквизитыДокумента.ТитулГрузоотправителяЗаказНомер),
														РеквизитыДокумента.ТитулГрузоотправителяЗаказНомер,
														РеквизитыДокумента.Номер);
		ДанныеСообщения.Содержание.ДатаДокумента = ?(ЗначениеЗаполнено(РеквизитыДокумента.ТитулГрузоотправителяЗаказДата),
														РеквизитыДокумента.ТитулГрузоотправителяЗаказДата,
														РеквизитыДокумента.Дата);													
	ИначеЕсли ТипЗнч(ОбъектУчета) = Тип("ДокументСсылка.ЭлектронныйПутевойЛист") Тогда
		ДанныеСообщения.Содержание.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭПЛ;
		ДанныеСообщения.Содержание.ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭПЛ; 
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектУчета, 
			"ТитулОформлениеНомерПутевогоЛиста, Номер,
			|ТитулОформлениеДатаПутевогоЛиста, Дата");
		ДанныеСообщения.Содержание.НомерДокумента = ?(ЗначениеЗаполнено(РеквизитыДокумента.ТитулОформлениеНомерПутевогоЛиста),
														РеквизитыДокумента.ТитулОформлениеНомерПутевогоЛиста,
														РеквизитыДокумента.Номер);
		ДанныеСообщения.Содержание.ДатаДокумента = ?(ЗначениеЗаполнено(РеквизитыДокумента.ТитулОформлениеДатаПутевогоЛиста),
														РеквизитыДокумента.ТитулОформлениеДатаПутевогоЛиста,
														РеквизитыДокумента.Дата);
	ИначеЕсли ТипЗнч(ОбъектУчета) = Тип("ДокументСсылка.ЭлектронныйДоговорФрахтования") Тогда
		ДанныеСообщения.Содержание.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЭДФ;
		ДанныеСообщения.Содержание.ТипРегламента = Перечисления.ТипыРегламентовЭДО.ЭДФ; 
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектУчета, 
			"Номер,
			|Дата");
		ДанныеСообщения.Содержание.НомерДокумента = РеквизитыДокумента.Номер;
		ДанныеСообщения.Содержание.ДатаДокумента = РеквизитыДокумента.Дата;
	КонецЕсли;
	
	Возврат ДанныеСообщения;
	
КонецФункции

// Карта таблиц - родительские таблицы с подчиненными.
// 
// Параметры:
//  ДанныеФормирования - Структура - Данные
// МетаданныеОбъекта - ОбъектМетаданныхДокумент - Метаданные объекта
//  ПрефиксТитула - Строка - Префикс титула
//  МакетСоответствиеИмен - ТабличныйДокумент - Макет соответствие имен
//  ПоследовательностьТаблиц - Массив из Строка - Последовательность таблиц
//  ТолькоЗаполненные - Булево - Только заполненные
//  ПолучитьСписокКолонок - Булево - Получить список колонок
// 
// Возвращаемое значение:
//  Массив из Структура - Карта таблиц
Функция КартаТаблиц(ДанныеФормирования, ПрефиксТитула, 
			МакетСоответствиеИмен, ПоследовательностьТаблиц, 
			ТолькоЗаполненные = Истина, ПолучитьСписокКолонок = Ложь)
	
	Результат = Новый Массив;
	
	ОбластьПерваяКолонка = МакетСоответствиеИмен.Область(,1,МакетСоответствиеИмен.ВысотаТаблицы,1);
	ОбластьВтораяКолонка = МакетСоответствиеИмен.Область(,2,МакетСоответствиеИмен.ВысотаТаблицы,2);
	ОбластьЧетвертаяКолонка = МакетСоответствиеИмен.Область(,4,МакетСоответствиеИмен.ВысотаТаблицы,4);
	
	Для Каждого ИмяТаблицы Из ПоследовательностьТаблиц Цикл	
		ДанныеТаблицы = Неопределено;
		ДанныеФормирования.Свойство(ИмяТаблицы, ДанныеТаблицы);
		ЕстьДанныеТаблицы = ДанныеТаблицы <> Неопределено И ДанныеФормирования[ИмяТаблицы].Количество() > 0;
		Если ТолькоЗаполненные = Истина 
			И ЕстьДанныеТаблицы = Ложь Тогда
			Продолжить;
		КонецЕсли;
		
		ОбластьТЧ = МакетСоответствиеИмен.НайтиТекст(ИмяТаблицы, , ОбластьПерваяКолонка, Ложь, Истина, Истина, Ложь);
		
		Если ОбластьТЧ <> Неопределено Тогда
			УзелТЧ = МакетСоответствиеИмен.Область(ОбластьТЧ.Верх, 2).Текст;
			
			МассивРодителей = Новый Массив;
			УзелТЧРодителяТекущий = МакетСоответствиеИмен.Область(ОбластьТЧ.Верх, 4).Текст;
			Если ЗначениеЗаполнено(УзелТЧРодителяТекущий) Тогда	
				ПродолжитьПоискРодителя = Истина;
				Пока ПродолжитьПоискРодителя = Истина Цикл
					ОбластьТЧРодителя = МакетСоответствиеИмен.НайтиТекст(УзелТЧРодителяТекущий, , ОбластьВтораяКолонка, Ложь, Истина, Истина, Ложь);
					СтруктураРодителя = Новый Структура;
					СтруктураРодителя.Вставить("ИмяТЧ", МакетСоответствиеИмен.Область(ОбластьТЧРодителя.Верх, 1).Текст);
					СтруктураРодителя.Вставить("Узел", УзелТЧРодителяТекущий);
					МассивРодителей.Добавить(СтруктураРодителя);
					УзелТЧРодителяТекущий = МакетСоответствиеИмен.Область(ОбластьТЧРодителя.Верх, 4).Текст;
					Если НЕ ЗначениеЗаполнено(УзелТЧРодителяТекущий) Тогда
						ПродолжитьПоискРодителя = Ложь;	
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;		
			УровеньТаблицы = МассивРодителей.Количество();
			Если Результат.ВГраница() < УровеньТаблицы Тогда
				СтруктураУровня = Новый Структура;
				Результат.Вставить(УровеньТаблицы, СтруктураУровня);
			Иначе
				СтруктураУровня = Результат[УровеньТаблицы];
				Если СтруктураУровня = Неопределено Тогда
					СтруктураУровня = Новый Структура;
					Результат[УровеньТаблицы] = СтруктураУровня;
				КонецЕсли;	
			КонецЕсли;
			ОписаниеТаблицы = Новый Структура;
			ОписаниеТаблицы.Вставить("МассивРодителей", МассивРодителей);
			ОписаниеТаблицы.Вставить("УзелТЧ", УзелТЧ);
			Если ЕстьДанныеТаблицы = Истина Тогда
				ЕстьИдентификаторСтроки = ДанныеФормирования[ИмяТаблицы][0].Свойство("ИдентификаторСтроки");
			Иначе
				ОбластьПодчиненнойТЧ = МакетСоответствиеИмен.НайтиТекст(УзелТЧ, , ОбластьЧетвертаяКолонка, Ложь, Истина, Истина, Ложь);
				ЕстьИдентификаторСтроки = ОбластьПодчиненнойТЧ <> Неопределено;	
			КонецЕсли;
			ОписаниеТаблицы.Вставить("ЕстьИдентификаторСтроки", ЕстьИдентификаторСтроки);
			
			Если ПолучитьСписокКолонок = Истина Тогда
				МассивКолонок = Новый Массив;
				ЭтоКолонка = Истина;
				НомерСтрокиМакета = ОбластьТЧ.Верх;
				Пока ЭтоКолонка = Истина Цикл
					НомерСтрокиМакета = НомерСтрокиМакета + 1;
					ИмяКолонка = МакетСоответствиеИмен.Область(НомерСтрокиМакета, 1).Текст;	
					МассивЧастейИмени = СтрРазделить(ИмяКолонка, ".");	
					Если МассивЧастейИмени.Количество() <> 2
						Или МассивЧастейИмени[0] <> ИмяТаблицы Тогда
						ЭтоКолонка = Ложь;
						Прервать;
					КонецЕсли;
					УзелКолонки = МакетСоответствиеИмен.Область(НомерСтрокиМакета, 2).Текст;
					Если УзелКолонки = УзелТЧ + "/" Тогда
						// Для списков (таблиц с одной колонкой) не нужно
						Прервать;
					КонецЕсли;
					СтруктураКолонки = Новый Структура;
					СтруктураКолонки.Вставить("Узел", УзелКолонки);
					СтруктураКолонки.Вставить("Имя", ИмяКолонка);
					СтруктураКолонки.Вставить("Обязательный", МакетСоответствиеИмен.Область(НомерСтрокиМакета, 3).Текст = "Да");
					СтруктураКолонки.Вставить("ПоляУсловий", МакетСоответствиеИмен.Область(НомерСтрокиМакета, 5).Текст);
					СтруктураКолонки.Вставить("Условие", МакетСоответствиеИмен.Область(НомерСтрокиМакета, 6).Текст);
					СтруктураКолонки.Вставить("Описание", МакетСоответствиеИмен.Область(НомерСтрокиМакета, 8).Текст);
					МассивКолонок.Добавить(СтруктураКолонки);
				КонецЦикла;	
				ОписаниеТаблицы.Вставить("Колонки", МассивКолонок);
			КонецЕсли;
			
			СтруктураУровня.Вставить(ИмяТаблицы, ОписаниеТаблицы);	
		КонецЕсли;	
	КонецЦикла;
	
	Возврат Результат;
		
КонецФункции

Функция ДанныеРеквизитовЭПДПоСтруктуре(СтруктураРеквизитовТитула)
	
	Результат = Новый Структура;
	
	ТаблицаРеквизитов = Новый ТаблицаЗначений;
	ТаблицаРеквизитов.Колонки.Добавить("ИмяРеквизита", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(80)));
	ТаблицаРеквизитов.Колонки.Добавить("ИмяТабличнойЧасти", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(80)));
	ТаблицаРеквизитов.Колонки.Добавить("НомерСтрокиРеквизита", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(5, 0, ДопустимыйЗнак.Неотрицательный)));
	
	МассивПростыхТипов = Новый Массив;
	МассивПростыхТипов.Добавить(Тип("Число"));
	МассивПростыхТипов.Добавить(Тип("Строка"));
	МассивПростыхТипов.Добавить(Тип("Дата"));
	МассивПростыхТипов.Добавить(Тип("Булево"));
	ОписаниеТиповРеквизитов = Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.ЗначенияРеквизитовЭПД.Тип,
													МассивПростыхТипов, ,
													Новый КвалификаторыЧисла(10, 3),
													,
													Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	ТаблицаРеквизитов.Колонки.Добавить("ЗначениеРеквизита", ОписаниеТиповРеквизитов);
		
	Для Каждого КиЗ Из СтруктураРеквизитовТитула Цикл
		МассивЧастей = ОбменСГИСЭПДКлиентСервер.РазделитьСтрокуСоСложнымРазделителем(КиЗ.Ключ, "__");
		Если МассивЧастей.Количество() = 3 Тогда
			ИмяТабличнойЧасти = МассивЧастей[0];
			НомерСтрокиРеквизита = Число(МассивЧастей[1]);
			ИмяРеквизита = МассивЧастей[2];
		Иначе
			ИмяТабличнойЧасти = "";
			НомерСтрокиРеквизита = 0;
			ИмяРеквизита = КиЗ.Ключ;
		КонецЕсли;
		НоваяСтрока = ТаблицаРеквизитов.Добавить();
		НоваяСтрока.ИмяРеквизита = ИмяРеквизита;
		НоваяСтрока.ИмяТабличнойЧасти = ИмяТабличнойЧасти;
		НоваяСтрока.НомерСтрокиРеквизита = НомерСтрокиРеквизита;
		НоваяСтрока.ЗначениеРеквизита = КиЗ.Значение;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТЗ", ТаблицаРеквизитов);

	Запрос.Текст = "ВЫБРАТЬ
	|	ТЗ.ИмяТабличнойЧасти КАК ИмяТабличнойЧасти,
	|	ТЗ.НомерСтрокиРеквизита КАК НомерСтрокиРеквизита,
	|	ТЗ.ИмяРеквизита КАК ИмяРеквизита,
	|	ТЗ.ЗначениеРеквизита
	|ПОМЕСТИТЬ ВТ_ТЗ
	|ИЗ
	|	&ТЗ КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТЗ.ИмяТабличнойЧасти,
	|	ВТ_ТЗ.НомерСтрокиРеквизита,
	|	ВТ_ТЗ.ИмяРеквизита,
	|	ВТ_ТЗ.ЗначениеРеквизита
	|ИЗ
	|	ВТ_ТЗ КАК ВТ_ТЗ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИмяТабличнойЧасти,
	|	НомерСтрокиРеквизита
	|ИТОГИ
	|ПО
	|	ИмяТабличнойЧасти,
	|	НомерСтрокиРеквизита";
	
	ВыборкаИмяТЧ = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаИмяТЧ.Следующий() Цикл
		Если ВыборкаИмяТЧ.ИмяТабличнойЧасти = "" Тогда
			ВыборкаНомерСтроки = ВыборкаИмяТЧ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			ВыборкаНомерСтроки.Следующий();
			Выборка = ВыборкаНомерСтроки.Выбрать();
			Пока Выборка.Следующий() Цикл
				Результат.Вставить(Выборка.ИмяРеквизита, Выборка.ЗначениеРеквизита);	
			КонецЦикла;
		Иначе
			ВыборкаНомерСтроки = ВыборкаИмяТЧ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			МассивСтрок = Новый Массив;
			Пока ВыборкаНомерСтроки.Следующий() Цикл
				Выборка = ВыборкаНомерСтроки.Выбрать();
				СтруктураСтроки = Новый Структура;
				Пока Выборка.Следующий() Цикл
					СтруктураСтроки.Вставить(Выборка.ИмяРеквизита, Выборка.ЗначениеРеквизита);		
				КонецЦикла;
				МассивСтрок.Добавить(СтруктураСтроки);
			КонецЦикла;	
			Результат.Вставить(ВыборкаИмяТЧ.ИмяТабличнойЧасти, МассивСтрок);
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Результат;

КонецФункции

Функция ПолучитьИмяРеквизитаПоТекстуОшибкиXDTO(ТекстОшибки, МакетСоответствиеИмен)
	
	Результат = "";
	
	ГруппаВСхеме = НайтиСтрокуМежду(ТекстОшибки, "Структура объекта '", "'");
	РеквизитВСхеме = НайтиСтрокуМежду(ТекстОшибки, "Проверка свойства '", "'");
	
	Если ГруппаВСхеме = "" Или РеквизитВСхеме = "" Тогда
		Возврат "";
	КонецЕсли;
	
	УзелСтрока = ГруппаВСхеме + "/" + РеквизитВСхеме;
	
	// Удаляем индексы списков
	УзелБезИндексовСписка = "";
	ТекущийСимволЧастьИндекса = Ложь;
	Для НомерСимвола = 1 По СтрДлина(УзелСтрока) Цикл
		ТекущийСимвол = Сред(УзелСтрока, НомерСимвола, 1);
		Если ТекущийСимвол = "[" Тогда
			ТекущийСимволЧастьИндекса = Истина;
		ИначеЕсли ТекущийСимвол = "]" Тогда 
			ТекущийСимволЧастьИндекса = Ложь;
		ИначеЕсли ТекущийСимволЧастьИндекса = Ложь Тогда
			УзелБезИндексовСписка = УзелБезИндексовСписка + ТекущийСимвол;
		КонецЕсли;
	КонецЦикла;
	
	ОбластьВтораяКолонка = МакетСоответствиеИмен.Область(,2,МакетСоответствиеИмен.ВысотаТаблицы,1);
	ИмяУзла = "//Файл" + УзелБезИндексовСписка;
	ОбластьНайдено = МакетСоответствиеИмен.НайтиТекст(ИмяУзла, , ОбластьВтораяКолонка, Ложь, Истина, Истина, Ложь);
	Если ОбластьНайдено <> Неопределено Тогда
		Результат = МакетСоответствиеИмен.Область(ОбластьНайдено.Верх, 1).Текст;
	Иначе
		Результат = ИмяУзла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НайтиСтрокуМежду(Текст, ТекстНачало, ТекстКонец)
	
	Результат = "";
	
	ПозНач = СтрНайти(Текст, ТекстНачало) + СтрДлина(ТекстНачало);
	ПозКон = СтрНайти(Текст, ТекстКонец, , ПозНач);
	
	Если ПозНач > 0 И ПозКон > ПозНач Тогда
		Результат = Сред(Текст, ПозНач, ПозКон - ПозНач);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ДеревоВТаблицуРекурсия(Дерево, Таблица)
	
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл
		ЗаполнитьЗначенияСвойств(Таблица.Добавить(), СтрокаДерева);	
		ДеревоВТаблицуРекурсия(СтрокаДерева, Таблица);
	КонецЦикла;
	
КонецПроцедуры

Функция СоздатьФабрикуПоСхемеXSD(Знач СхемаXSDСтрокой, ИмпортСхем = Неопределено, ТекущийКаталогСхемы = Неопределено)
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СхемаXSDСтрокой);
	
	Если СтрНайти(СхемаXSDСтрокой, "windows-1251") > 0 Тогда
		КодировкаИсточника = "windows-1251";
	Иначе
		КодировкаИсточника = "utf-8";
	КонецЕсли;

	Построитель = Новый ПостроительDOM;
	Дом = Построитель.Прочитать(ЧтениеXML);
	
	ЧтениеXML.Закрыть();
	
	КорневойЭлемент = Дом.ПервыйДочерний;
	Пока КорневойЭлемент.ТипУзла <> ТипУзлаDOM.Элемент Цикл
		КорневойЭлемент = КорневойЭлемент.СледующийСоседний;	
	КонецЦикла;
	
	xmlns = КорневойЭлемент.ПолучитьАтрибут("http://www.w3.org/2000/xmlns/", "xmlns");
	targetNamespace = КорневойЭлемент.ПолучитьАтрибут("targetNamespace");
	Если xmlns = Неопределено Или xmlns = "" Тогда
		КорневойЭлемент.УдалитьАтрибут("http://www.w3.org/2000/xmlns/", "xmlns");
		xmlns = "TEMPXMLNS";
		КорневойЭлемент.УстановитьАтрибут("http://www.w3.org/2000/xmlns/", "xmlns", xmlns);
	КонецЕсли;
	Если targetNamespace = Неопределено Или targetNamespace = "" Тогда
		КорневойЭлемент.УстановитьАтрибут("targetNamespace", xmlns);
	КонецЕсли;
			
	Построитель = Новый ПостроительСхемXML;  
	Схема = Построитель.СоздатьСхемуXML(Дом);
	
	НаборСхем = Новый НаборСхемXML;
	НаборСхем.Добавить(Схема);	
	Фабрика = Новый ФабрикаXDTO(НаборСхем); 
		
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Фабрика", Фабрика);
	СтруктураРезультат.Вставить("targetNamespace", targetNamespace);
	СтруктураРезультат.Вставить("xmlns", xmlns);
	СтруктураРезультат.Вставить("Кодировка", КодировкаИсточника);
	
	Возврат СтруктураРезультат;
	
КонецФункции

Процедура ИнициализироватьУзелРекурсивно(Знач МассивИменУзлов, Знач НомерРекурсии, Знач Значение, Знач СвойствоРодитель, Знач ОбъектXDTOРодитель, Знач Фабрика)
	
	ИмяУзла = МассивИменУзлов[НомерРекурсии];
	
	НомерВСпискеТекущий = 0;
	
	РазделенноеИмя = СтрРазделить(ИмяУзла, "[", Ложь);
	Если РазделенноеИмя.ВГраница() > 0 Тогда
		ИмяУзлаЕслиСписок = РазделенноеИмя[0];
		ИтераторУзла = СтрЗаменить(РазделенноеИмя[1], "]", "");
		НомерВСпискеТекущий = Число(ИтераторУзла);
	Иначе
		РазделенноеИмя = СтрРазделить(ИмяУзла, ".", Ложь);
		ИмяУзлаЕслиСписок = РазделенноеИмя[0]; 
		Если РазделенноеИмя.ВГраница() > 0 Тогда
			ИтераторУзла = РазделенноеИмя[1];
			НомерВСпискеТекущий = Число(ИтераторУзла);
		КонецЕсли;
	КонецЕсли;
		
	Свойство = СвойствоРодитель.Тип.Свойства.Получить(ИмяУзлаЕслиСписок);
	
	Если Свойство = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийУзел = ОбъектXDTOРодитель[ИмяУзлаЕслиСписок];
		                                                            
	Если ТипЗнч(ТекущийУзел) = Тип("СписокXDTO") Тогда
		Пока ТекущийУзел.Количество() - 1 < НомерВСпискеТекущий Цикл
			Если ТипЗнч(Свойство.Тип) = Тип("ТипЗначенияXDTO") Тогда
				Если Значение = "[УвеличитьСчетчик]" Тогда
					НовыйЭлементXDTO = Фабрика.Создать(Свойство.Тип, 1);
				Иначе
					НовыйЭлементXDTO = Фабрика.Создать(Свойство.Тип, ПреобразоватьЗначениеДляXML(Значение, Свойство.Тип));
				КонецЕсли;
			Иначе
				НовыйЭлементXDTO = Фабрика.Создать(Свойство.Тип);
			КонецЕсли;
			ТекущийУзел.Добавить(НовыйЭлементXDTO);
		КонецЦикла;
		НовыйXDTOРодитель = ТекущийУзел.ПолучитьXDTO(НомерВСпискеТекущий);
		
		Если НомерРекурсии = МассивИменУзлов.Количество() - 1 Тогда
			Если Значение = "[УвеличитьСчетчик]" Тогда
				ПредыдущееЗначение = ТекущийУзел.Получить(НомерВСпискеТекущий);
				ТекущийУзел.Установить(НомерВСпискеТекущий, ПредыдущееЗначение + 1);
			Иначе	
				ТекущийУзел.Установить(НомерВСпискеТекущий, Значение);
			КонецЕсли;
		Иначе
			ИнициализироватьУзелРекурсивно(МассивИменУзлов, НомерРекурсии + 1, Значение, Свойство, НовыйXDTOРодитель, Фабрика);
		КонецЕсли;		
	Иначе
		Если НомерРекурсии = МассивИменУзлов.Количество() - 1 Тогда
			Если Значение = "[УвеличитьСчетчик]" Тогда
				Если ОбъектXDTOРодитель[ИмяУзлаЕслиСписок] = Неопределено Тогда
					НовыйЭлементXDTO = Фабрика.Создать(Свойство.Тип, 1);
					ОбъектXDTOРодитель[ИмяУзлаЕслиСписок] = НовыйЭлементXDTO;
				Иначе
					ОбъектXDTOРодитель[ИмяУзлаЕслиСписок] = ОбъектXDTOРодитель[ИмяУзлаЕслиСписок] + 1;
				КонецЕсли;
			Иначе
				НовыйЭлементXDTO = Фабрика.Создать(Свойство.Тип, ПреобразоватьЗначениеДляXML(Значение, Свойство.Тип));
				ОбъектXDTOРодитель[ИмяУзлаЕслиСписок] = НовыйЭлементXDTO;
			КонецЕсли;
		Иначе
			Если ТекущийУзел = Неопределено Тогда
				НовыйЭлементXDTO = Фабрика.Создать(Свойство.Тип);
				ОбъектXDTOРодитель[ИмяУзлаЕслиСписок] = НовыйЭлементXDTO;
				НовыйXDTOРодитель = ОбъектXDTOРодитель[ИмяУзлаЕслиСписок];
			Иначе
				НовыйXDTOРодитель = ТекущийУзел;
			КонецЕсли;			
			ИнициализироватьУзелРекурсивно(МассивИменУзлов, НомерРекурсии + 1, Значение, Свойство, НовыйXDTOРодитель, Фабрика);		
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

Функция ПреобразоватьЗначениеДляXML(Значение, СвойствоТип)
	
	Результат = Значение;
	
	Если ТипЗнч(Значение) = Тип("Дата") Тогда
		Если СвойствоТип.Имя = "string" Или СвойствоТип.БазовыйТип.Имя = "string" Тогда
			Длина = 19;
			РазделительВремени = ":";
			Для Каждого Фасет Из СвойствоТип.Фасеты Цикл
				Если Фасет.Вид = ВидФасетаXDTO.Длина Тогда
					Длина = Число(Фасет.Значение);
				ИначеЕсли Фасет.Вид = ВидФасетаXDTO.Образец
				 И СтрНайти(Фасет.Значение, "\.") Тогда
				 	РазделительВремени = ".";
				КонецЕсли;
			КонецЦикла;
			Если Длина = 19 Тогда
				Результат = Формат(Значение, "ДФ=дд.ММ.ггггTЧЧ:мм:сс");	
			ИначеЕсли Длина = 25 Тогда
				СмещениеОбщее = СмещениеСтандартногоВремени(ЧасовойПоясСеанса()) / 3600;
				СмещениеЧасы = Цел(СмещениеОбщее);
				СмещениеМинуты = Цел((СмещениеОбщее - СмещениеЧасы) * 60);
				Результат = Формат(Значение, "ДФ=дд.ММ.ггггTЧЧ:мм:сс")
								+ ?(СмещениеЧасы > 0, "+", "-")
								+ Формат(СмещениеЧасы, "ЧЦ=2; ЧН=; ЧВН=") + ":" + Формат(СмещениеМинуты, "ЧЦ=2; ЧН=; ЧВН=");
			ИначеЕсли Длина = 10 Тогда
				Результат = Формат(Значение, "ДФ=дд.ММ.гггг");	
			ИначеЕсли Длина = 8 Тогда
				Результат = Формат(Значение, "ДФ=ЧЧ" + РазделительВремени + "мм" + РазделительВремени + "сс");
			ИначеЕсли Длина = 14 Тогда
				СмещениеОбщее = СмещениеСтандартногоВремени(ЧасовойПоясСеанса()) / 3600;
				СмещениеЧасы = Цел(СмещениеОбщее);
				СмещениеМинуты = Цел((СмещениеОбщее - СмещениеЧасы) * 60);
				Результат = Формат(Значение, "ДФ=ЧЧ:мм:сс")
								+ ?(СмещениеЧасы >= 0, "+", "")
								+ Формат(СмещениеЧасы, "ЧЦ=2; ЧН=; ЧВН=") + ":" + Формат(СмещениеМинуты, "ЧЦ=2; ЧН=; ЧВН=");
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Значение) = Тип("Булево") Тогда
		Если СвойствоТип.Имя = "string" Или СвойствоТип.БазовыйТип.Имя = "string" Тогда
			СписокЗначений = Новый СписокЗначений;
			Для Каждого Фасет Из СвойствоТип.Фасеты Цикл
				Если Фасет.Вид = ВидФасетаXDTO.Перечисление Тогда
					СписокЗначений.Добавить(Фасет.Значение);
				КонецЕсли;
			КонецЦикла;
			Если СписокЗначений.Количество() = 1 Тогда
				Результат = СписокЗначений[0].Значение;
			Иначе
				СписокЗначений.СортироватьПоЗначению();
				Результат = ?(Значение = Ложь, СписокЗначений[0].Значение, СписокЗначений[1].Значение);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Значение) = Тип("Строка") Тогда
		Если СвойствоТип.Имя = "string" Или СвойствоТип.БазовыйТип.Имя = "string" Тогда
			Длина = 0;
			Для Каждого Фасет Из СвойствоТип.Фасеты Цикл
				Если Фасет.Вид = ВидФасетаXDTO.Длина
					Или Фасет.Вид = ВидФасетаXDTO.МаксДлина Тогда
					Длина = Число(Фасет.Значение);			
					Прервать;
				КонецЕсли;
			КонецЦикла;	
			Если Длина > 0 Тогда
				Результат = Лев(Значение, Длина);	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область ПроверкаЗаполненияЭПД

Функция НайтиПереходыРекурсивно(СтрокаДерева, МакетСоответствиеИмен, МакетСоответствиеОбязательныеСтруктуры)
	
	Если СтрокаДерева = Неопределено 
		Или ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОбластьВтораяКолонка = МакетСоответствиеИмен.Область(,2,МакетСоответствиеИмен.ВысотаТаблицы,2);
	
	МакетПоискаПереходов = МакетСоответствиеИмен;
	ОбластьКолонкаНайдено = МакетСоответствиеИмен.НайтиТекст(СтрокаДерева.УзелЧистый, , 
											ОбластьВтораяКолонка, Ложь, Истина, Истина, Ложь);
	Если ОбластьКолонкаНайдено = Неопределено Тогда
		ОбластьВтораяКолонкаОбязательныхСтруктур = МакетСоответствиеОбязательныеСтруктуры.Область(,2,МакетСоответствиеОбязательныеСтруктуры.ВысотаТаблицы,2);
		ОбластьКолонкаНайдено = МакетСоответствиеОбязательныеСтруктуры.НайтиТекст(СтрокаДерева.УзелЧистый, , 
											ОбластьВтораяКолонкаОбязательныхСтруктур, Ложь, Истина, Истина, Ложь);
		МакетПоискаПереходов = МакетСоответствиеОбязательныеСтруктуры;
	КонецЕсли;
	
	Переходы = Неопределено;
	Если ОбластьКолонкаНайдено <> Неопределено Тогда
		Переходы = МакетПоискаПереходов.Область(ОбластьКолонкаНайдено.Верх, 9).Текст;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Переходы) Тогда
		Переходы = НайтиПереходыРекурсивно(СтрокаДерева.Родитель, МакетСоответствиеИмен, МакетСоответствиеОбязательныеСтруктуры);
	КонецЕсли;
	
	Возврат Переходы;
	
КонецФункции


Функция НовыйОписаниеОшибкиПроверкиЭПД()
	
	Результат = Новый Структура;
	
	Результат.Вставить("Текст", Новый Массив);
	Результат.Вставить("Узел", "");
	Результат.Вставить("Переходы", Новый ФиксированныйМассив(Новый Массив));
	Результат.Вставить("НомераСтрокТаблиц", Новый Структура);
	
	Возврат Результат;
	
КонецФункции


Процедура СобратьОписаниеОшибки(ДочернийУзел, ОписаниеОшибкиПроверки, СтопУзел = "//Файл/Документ")
	
	Если ЗначениеЗаполнено(ДочернийУзел.Имя) Тогда
		ПредыдущееОписание = "";
		Если ОписаниеОшибкиПроверки.Текст.ВГраница() >= 0 Тогда
			ПредыдущееОписание = ОписаниеОшибкиПроверки.Текст[ОписаниеОшибкиПроверки.Текст.ВГраница()];
		КонецЕсли;
		ЧастьТекстаСИменем = """" + ДочернийУзел.Описание + """";
		Если ЗначениеЗаполнено(ДочернийУзел.Описание) И ЧастьТекстаСИменем <> ПредыдущееОписание Тогда
			Если ОписаниеОшибкиПроверки.Текст.ВГраница() >= 0 Тогда
				Если СтрНачинаетсяС(ОписаниеОшибкиПроверки.Текст[ОписаниеОшибкиПроверки.Текст.ВГраница()], "в строке") Тогда
					Связка = "таблицы";
				Иначе
					Связка = "в";	
				КонецЕсли;
			Иначе
				Связка = "Не заполнено поле";	
			КонецЕсли;
			ОписаниеОшибкиПроверки.Текст.Добавить(Связка);
			ОписаниеОшибкиПроверки.Текст.Добавить(ЧастьТекстаСИменем);
		КонецЕсли;
	КонецЕсли;
	
	ТекущийРодитель = ДочернийУзел.Родитель;
	
	Если ТекущийРодитель = Неопределено Или ТекущийРодитель.УзелЧистый = СтопУзел Тогда
		Возврат;
	КонецЕсли;
			
	УзелРодителя = ТекущийРодитель.Узел;
	СледующийРодитель = ТекущийРодитель;
	Если СтрЗаканчиваетсяНа(УзелРодителя, "]") Тогда
		ПозНач = СтрНайти(УзелРодителя, "[", НаправлениеПоиска.СКонца);
		ИндексВСпискеСтрока = Сред(УзелРодителя, ПозНач + 1, СтрДлина(УзелРодителя) - ПозНач - 1);
		ИндексВСписке = Число(ИндексВСпискеСтрока);
		
		Если ОписаниеОшибкиПроверки.Текст.ВГраница() = 1 Тогда
			ОписаниеОшибкиПроверки.Текст[0] = "Не заполнена колонка";
		КонецЕсли;
		ОписаниеОшибкиПроверки.Текст.Добавить("в строке №" + Строка(ИндексВСписке + 1));	
		ОписаниеОшибкиПроверки.НомераСтрокТаблиц.Вставить(ТекущийРодитель.Родитель.Имя, ИндексВСписке);
		
		СледующийРодитель = ТекущийРодитель.Родитель;	 
	КонецЕсли;
	
	СобратьОписаниеОшибки(СледующийРодитель, ОписаниеОшибкиПроверки, СтопУзел);
	
КонецПроцедуры


Функция СобратьТребующиеЗаполнения(ДеревоУзлов, Результат)
	
	ЕстьНезаполненные = Ложь;
	
	Для Каждого Строка Из ДеревоУзлов.Строки Цикл
		Если Строка.ТребуетсяЗаполнить = Истина Тогда
			Если Строка.Строки.Количество() > 0
				И (Строка.Заполнено = Истина Или Строка.Описание = "") Тогда
				ЕстьНезаполненные = СобратьТребующиеЗаполнения(Строка, Результат);
				Если ЕстьНезаполненные = Ложь Тогда
					Результат.Добавить(Строка);	
					ЕстьНезаполненные = Истина;	
				КонецЕсли;
			Иначе
				Результат.Добавить(Строка);	
				ЕстьНезаполненные = Истина;	
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
	Возврат ЕстьНезаполненные;
	
КонецФункции


Функция ДополнительныйОбходДереваРекурсивно(Родитель)
	
	Если ТипЗнч(Родитель) = Тип("ДеревоЗначений") Тогда
		МаксЗаполнено = Истина;	 
	Иначе
		МаксЗаполнено = Родитель.Заполнено;
	КонецЕсли;
	
	МаксТребуетсяЗаполнить = Ложь;
	Если Родитель.Строки.Количество() > 0 Тогда
		Для Каждого Строка Из Родитель.Строки Цикл
			РезультатПодчиненные = ДополнительныйОбходДереваРекурсивно(Строка);
			Если РезультатПодчиненные.Заполнено = Истина Тогда
				Строка.Заполнено = Истина;	
			КонецЕсли;
			Если Строка.Обязательный = Ложь 
				И Строка.Заполнено = Ложь Тогда
					Строка.ТребуетсяЗаполнить = Ложь;
			ИначеЕсли Строка.Заполнено = Истина
				И РезультатПодчиненные.ТребуетсяЗаполнить = Истина Тогда
					Строка.ТребуетсяЗаполнить = Истина;
			ИначеЕсли Строка.Обязательный = Истина
				И РезультатПодчиненные.Заполнено = Ложь Тогда
					Строка.ТребуетсяЗаполнить = Истина;
			Иначе
				Строка.ТребуетсяЗаполнить = РезультатПодчиненные.ТребуетсяЗаполнить;	
			КонецЕсли;
			МаксЗаполнено = Макс(МаксЗаполнено, Строка.Заполнено);
			МаксТребуетсяЗаполнить = Макс(МаксТребуетсяЗаполнить, Строка.ТребуетсяЗаполнить);
		КонецЦикла;
	ИначеЕсли Родитель.ЭтоТаблица = Истина Тогда
		МаксТребуетсяЗаполнить = Родитель.Обязательный;	
	Иначе
		МаксТребуетсяЗаполнить = Родитель.Обязательный И Не МаксЗаполнено;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Заполнено", МаксЗаполнено);
	Результат.Вставить("ТребуетсяЗаполнить", МаксТребуетсяЗаполнить);
	
	Возврат Результат;
	
КонецФункции


Процедура ДобавитьУзлыВСтрокиТаблицРекурсивно(Родитель, МассивРодителей, СтруктураУзла, ИндексРодителя = 0)
	
	ЭтоКонецРекурсии = ИндексРодителя = МассивРодителей.ВГраница();
	СтруктураРодителя = МассивРодителей[МассивРодителей.ВГраница() - ИндексРодителя];
	Отбор = Новый Структура("УзелЧистый", СтруктураРодителя.Узел);
	СтрокиТекущегоРодителя = Родитель.Строки.НайтиСтроки(Отбор, Истина);
	
	Для Каждого СтрокаТекущегоРодителя Из СтрокиТекущегоРодителя Цикл
		Если СтрЗаканчиваетсяНа(СтрокаТекущегоРодителя.Узел, "]") = Ложь Тогда
			// Заполняем только по инициализированным строкам
			Продолжить;
		КонецЕсли;
		Если ЭтоКонецРекурсии Тогда
			Отбор = Новый Структура("УзелЧистый", СтруктураУзла.УзелЧистый);
			НайденныеСтроки = СтрокаТекущегоРодителя.Строки.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() = 0 Тогда
				ОстатокСтрокиУзла = СтрЗаменить(СтруктураУзла.УзелЧистый, СтрокаТекущегоРодителя.УзелЧистый, "");
				МассивИменУзлов = СтрРазделить(ОстатокСтрокиУзла, "/", Ложь);	
				СтрокаТекущегоРодителяДляДобавления = СтрокаТекущегоРодителя;
				СчетчикЧастей = 0;
				Для Каждого ЧастьУзла Из МассивИменУзлов Цикл
					Отбор = Новый Структура("УзелЧистый", СтрокаТекущегоРодителяДляДобавления.УзелЧистый + "/" + ЧастьУзла);
					НайденныеСтроки = СтрокаТекущегоРодителяДляДобавления.Строки.НайтиСтроки(Отбор);
					Если НайденныеСтроки.Количество() = 0 Тогда
						ТаблицаУзлаСтроки = СтрокаТекущегоРодителяДляДобавления.Строки.Добавить();
						ТаблицаУзлаСтроки.Узел = СтрокаТекущегоРодителяДляДобавления.Узел + "/" + ЧастьУзла;
						ТаблицаУзлаСтроки.УзелЧистый = СтрокаТекущегоРодителяДляДобавления.УзелЧистый + "/" + ЧастьУзла;	
						СтрокаТекущегоРодителяДляДобавления = ТаблицаУзлаСтроки;
						Если СчетчикЧастей = МассивИменУзлов.ВГраница() Тогда
							ЗаполнитьЗначенияСвойств(ТаблицаУзлаСтроки, СтруктураУзла);	 
						КонецЕсли;
					Иначе
						СтрокаТекущегоРодителяДляДобавления = НайденныеСтроки[0];	
					КонецЕсли;
					СчетчикЧастей = СчетчикЧастей + 1;
				КонецЦикла;
			КонецЕсли;
		Иначе
			ДобавитьУзлыВСтрокиТаблицРекурсивно(СтрокаТекущегоРодителя, МассивРодителей, 
												СтруктураУзла, ИндексРодителя + 1);
			Если ТипЗнч(Родитель) <> Тип("ДеревоЗначений") Тогда
 				Родитель.ТребуетсяЗаполнить = Родитель.ТребуетсяЗаполнить Или СтрокаТекущегоРодителя.ТребуетсяЗаполнить;
 			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры


Функция ПроверитьУсловие(ПоляУсловий, УсловияТекст, ДанныеФормирования)
	
	УсловиеВыполнено = Истина;
	
	Если ПоляУсловий <> "" И УсловияТекст <> "" Тогда
		МассивПолей = СтрРазделить(ПоляУсловий, ",", Ложь);
		МассивУсловий = СтрРазделить(УсловияТекст, ",", Ложь);
		Для ИндексУсловия = 0 По МассивПолей.ВГраница() Цикл
			ИмяПоля = МассивПолей[ИндексУсловия];
			Условие = МассивУсловий[ИндексУсловия];
			ЗначениеРеквизитаУсловия = Неопределено;
			ЧастиПоля = СтрРазделить(ИмяПоля, ".", Ложь);
			Если ЧастиПоля.Количество() = 1 Тогда
				ДанныеФормирования.Свойство(СокрЛП(ИмяПоля), ЗначениеРеквизитаУсловия);
			ИначеЕсли ЧастиПоля.Количество() = 2 Тогда
				ТабЧасть = Неопределено;	
				ДанныеФормирования.Свойство(СокрЛП(ЧастиПоля[0]), ТабЧасть);
				Если ТабЧасть = Неопределено Или ТабЧасть.Количество() = 0 Тогда
					УсловиеВыполнено = Ложь;
					Прервать;	
				Иначе
					ТабЧасть[0].Свойство(СокрЛП(ЧастиПоля[1]), ЗначениеРеквизитаУсловия);	
				КонецЕсли;
			Иначе
				// Ошибочное условие в макете
				УсловиеВыполнено = Ложь;
				Прервать;
			КонецЕсли;
			Если Условие = "@Незаполнен" Тогда
				УсловиеВыполнено = Не ЗначениеЗаполнено(ЗначениеРеквизитаУсловия);
			ИначеЕсли Условие = "@Заполнен" Тогда
				УсловиеВыполнено = ЗначениеЗаполнено(ЗначениеРеквизитаУсловия);
			Иначе
				УсловиеВыполнено = Ложь;
				МассивЗначенийУсловия = СтрРазделить(Условие, "|");
				Для Каждого ЗначениеУсловия Из МассивЗначенийУсловия Цикл
					Если ТипЗнч(ЗначениеРеквизитаУсловия) = Тип("Булево") Тогда
						УсловиеВыполнено = ЗначениеРеквизитаУсловия	
							= (ВРег(ЗначениеУсловия) = "ИСТИНА" Или ЗначениеУсловия = "1");
					Иначе
						УсловиеВыполнено = ВРег(Строка(ЗначениеРеквизитаУсловия)) = ВРег(ЗначениеУсловия);
					КонецЕсли;
					Если УсловиеВыполнено = Истина Тогда
						Прервать;	
					КонецЕсли;	
				КонецЦикла;
				Если УсловиеВыполнено = Ложь Тогда
					Прервать;
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;
	Иначе
		УсловиеВыполнено = Ложь;
	КонецЕсли;
	
	Возврат УсловиеВыполнено;
	
КонецФункции


Функция УдалитьИндексыСписков(УзелСтрока)
	
	УзелБезИндексовСписка = "";
	ТекущийСимволЧастьИндекса = Ложь;
	Для НомерСимвола = 1 По СтрДлина(УзелСтрока) Цикл
		ТекущийСимвол = Сред(УзелСтрока, НомерСимвола, 1);
		Если ТекущийСимвол = "[" Тогда
			ТекущийСимволЧастьИндекса = Истина;
		ИначеЕсли ТекущийСимвол = "]" Тогда 
			ТекущийСимволЧастьИндекса = Ложь;
		ИначеЕсли ТекущийСимволЧастьИндекса = Ложь Тогда
			УзелБезИндексовСписка = УзелБезИндексовСписка + ТекущийСимвол;
		КонецЕсли;
	КонецЦикла;
	
	Возврат УзелБезИндексовСписка;
	
КонецФункции

//@skip-check method-too-many-params
Функция ИнициализироватьУзелДереваРекурсивно(Знач МассивИменУзлов, Знач ИмяРеквизита, Знач НомерРекурсии, Знач Заполнено, 
												Родитель, 
												Знач СоответствиеПредставлений,
												Знач ОбязательныеСтруктуры,
												Знач ДанныеФормирования,
												Знач Обязательный = Ложь)											
	
	МассивУзлаТекущейРекурсии = Новый Массив;
	Для ИтераторЦикла = 1 По НомерРекурсии Цикл
		МассивУзлаТекущейРекурсии.Добавить(МассивИменУзлов[ИтераторЦикла - 1]);
	КонецЦикла;
	ИмяУзла = "//" + СтрСоединить(МассивУзлаТекущейРекурсии, "/");
	
	ЭтоСтрокаТаблицы = Ложь;
	Если СтрЗаканчиваетсяНа(ИмяУзла, "]") Тогда
		ПозКон = СтрНайти(ИмяУзла, "[", НаправлениеПоиска.СКонца);
		ИмяУзлаСтроки = Лев(ИмяУзла, ПозКон - 1);
		ТаблицаУзлаСтроки = Родитель.Строки.Найти(ИмяУзлаСтроки, "Узел", Ложь);
		Если ТаблицаУзлаСтроки = Неопределено Тогда
			ТаблицаУзлаСтроки = Родитель.Строки.Добавить();
			ТаблицаУзлаСтроки.Узел = ИмяУзлаСтроки;
			ТаблицаУзлаСтроки.УзелЧистый = УдалитьИндексыСписков(ИмяУзлаСтроки);
			ТаблицаУзлаСтроки.Описание = СоответствиеПредставлений.Получить(ТаблицаУзлаСтроки.УзелЧистый);
		КонецЕсли;
		ТекущийРодительУзла = ТаблицаУзлаСтроки;
		ЭтоСтрокаТаблицы = Истина;
	Иначе
		ТекущийРодительУзла = Родитель;
	КонецЕсли;
		                                                            
	СтрокаУзла = ТекущийРодительУзла.Строки.Найти(ИмяУзла, "Узел", Ложь);
	ОбязательностьУстановлена = Ложь;
	Если СтрокаУзла = Неопределено Тогда
		СтрокаУзла = ТекущийРодительУзла.Строки.Добавить();
		СтрокаУзла.Узел = ИмяУзла;
		СтрокаУзла.УзелЧистый = УдалитьИндексыСписков(ИмяУзла);
		СтрокаУзла.Описание = СоответствиеПредставлений.Получить(СтрокаУзла.УзелЧистый);
		
		СтруктураУзла = ОбязательныеСтруктуры.Получить(СтрокаУзла.УзелЧистый);
		Если СтруктураУзла <> Неопределено Тогда
			Если ЗначениеЗаполнено(СтрокаУзла.Описание) Тогда
				СтрокаУзла.Имя = СтруктураУзла.Имя;
			КонецЕсли;
			Если СтруктураУзла.Обязательный = Истина Тогда
				СтрокаУзла.Обязательный = СтруктураУзла.Обязательный;
			Иначе
				СтрокаУзла.Обязательный = ПроверитьУсловие(СтруктураУзла.ПоляУсловий, 
											СтруктураУзла.Условие,
											ДанныеФормирования);	
			КонецЕсли;
			ОбязательностьУстановлена = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ПодчиненныйУзелЗаполнен = Ложь;
	Если НомерРекурсии = МассивИменУзлов.Количество() Тогда
		СтрокаУзла.Имя = ИмяРеквизита;
		СтрокаУзла.Заполнено = Заполнено;
		Если ОбязательностьУстановлена = Ложь Тогда
			СтрокаУзла.Обязательный = Обязательный;
		КонецЕсли;
		Если ТипЗнч(ТекущийРодительУзла) <> Тип("ДеревоЗначений") Тогда
			ТекущийРодительУзла.ЭтоТаблица = ЭтоСтрокаТаблицы;
		КонецЕсли;
		Если СтрокаУзла.Заполнено = Ложь И СтрокаУзла.Обязательный = Истина Тогда
			СтрокаУзла.ТребуетсяЗаполнить = Истина;	
		Иначе
			СтрокаУзла.ТребуетсяЗаполнить = Ложь;
		КонецЕсли;
	Иначе
		ПодчиненныйУзел = ИнициализироватьУзелДереваРекурсивно(МассивИменУзлов, ИмяРеквизита,
																НомерРекурсии + 1, Заполнено, 
																СтрокаУзла,															
																СоответствиеПредставлений,
																ОбязательныеСтруктуры,
																ДанныеФормирования,
																Обязательный);
		ПодчиненныйУзелЗаполнен = ПодчиненныйУзел.Заполнено;
		СтрокаУзла.Заполнено = СтрокаУзла.Заполнено Или ПодчиненныйУзелЗаполнен;
		СтрокаУзла.ТребуетсяЗаполнить = СтрокаУзла.ТребуетсяЗаполнить Или ПодчиненныйУзел.ТребуетсяЗаполнить;	
		Если ЭтоСтрокаТаблицы = Истина Тогда
			ТекущийРодительУзла.Заполнено = ТекущийРодительУзла.Заполнено Или ПодчиненныйУзелЗаполнен;
			ТекущийРодительУзла.ТребуетсяЗаполнить = ТекущийРодительУзла.ТребуетсяЗаполнить Или ПодчиненныйУзел.ТребуетсяЗаполнить;	
		КонецЕсли;
		Если ТипЗнч(Родитель) <> Тип("ДеревоЗначений") Тогда
			Родитель.Заполнено = Родитель.Заполнено Или ПодчиненныйУзелЗаполнен;
			Родитель.ТребуетсяЗаполнить = Родитель.ТребуетсяЗаполнить Или ПодчиненныйУзел.ТребуетсяЗаполнить;
		КонецЕсли;
	КонецЕсли;

	Возврат СтрокаУзла;
		
КонецФункции

#КонецОбласти

#Область ОбъектыОбязательныеДляЗаполнения

#Область МетодыРаботыСРеквизитами

Функция НоваяСтруктураРеквизитаИТабЧасти()
	
	Структура = Новый Структура;
	Структура.Вставить("Реквизит");
	Структура.Вставить("ТабличнаяЧасть");
	Структура.Вставить("ЕстьТабличнаяЧасть");
	
	Возврат Структура;
	
КонецФункции

Функция СтруктураРеквизитаИТабЧасти(СтрокаДляРазбора)
	
	Перем Реквизит, ТабличнаяЧасть, ЕстьТабличнаяЧасть;
	
	Структура = НоваяСтруктураРеквизитаИТабЧасти();
	ЗаполнитьПеременныеХраненияРеквизита(СтрокаДляРазбора, Реквизит, ТабличнаяЧасть, ЕстьТабличнаяЧасть);
	
	Структура.Реквизит = Реквизит; 
	Структура.ТабличнаяЧасть = ТабличнаяЧасть;           
	Структура.ЕстьТабличнаяЧасть = ЕстьТабличнаяЧасть;
	
	Возврат Структура;
	
КонецФункции

Процедура ЗаполнитьПеременныеХраненияРеквизита(СтрокаДляРазбора, Реквизит, ТабличнаяЧасть, ЕстьТабличнаяЧасть)
	
	ПоложениеТочки = СтрНайти(СтрокаДляРазбора, ".", НаправлениеПоиска.СКонца);
	Если ПоложениеТочки > 0 Тогда
		Реквизит = СокрЛП(Сред(СтрокаДляРазбора, ПоложениеТочки + 1)); 
		ТабличнаяЧасть = СокрЛП(Лев(СтрокаДляРазбора, ПоложениеТочки - 1));           
		ЕстьТабличнаяЧасть = Истина;
	Иначе 
		Реквизит = СокрЛП(СтрокаДляРазбора);
		ЕстьТабличнаяЧасть = Ложь; 
	КонецЕсли;
	
КонецПроцедуры

Функция НоваяСтруктураОбработкиРеквизита()
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Реквизит", "");
	СтруктураДанных.Вставить("ТабличнаяЧастьРеквизита", "");
	СтруктураДанных.Вставить("ЭтоРеквизитТабЧасти", Ложь);
	СтруктураДанных.Вставить("ЭтоТабЧасть", Ложь);
	СтруктураДанных.Вставить("УсловиеПроверки", "");
	
	Возврат СтруктураДанных;
	
КонецФункции

Функция ДанныеОбработкиРеквизитов(Реквизит, ТипДокумента, УсловиеПроверки = "", ДобавитьПрефиксДоп = Ложь)
	
	МассивРеквизитов = СтрРазделить(Реквизит, ",", Ложь);
	МассивУсловий = СтрРазделить(УсловиеПроверки, ",");
	
	Если МассивРеквизитов.Количество() > 1 Тогда
		
		МассивСтруктур = Новый Массив;
		Для й = 0 По МассивРеквизитов.ВГраница() Цикл 
			Реквизит = СокрЛП(МассивРеквизитов[й]);
			УсловиеПроверки = СокрЛП(МассивУсловий[й]);
			Структура = СтруктураОбработкиРеквизита(Реквизит, ТипДокумента, УсловиеПроверки, ДобавитьПрефиксДоп);	
			МассивСтруктур.Добавить(Структура);
		КонецЦикла;
		
		Возврат МассивСтруктур;
		
	Иначе
		
		Возврат СтруктураОбработкиРеквизита(Реквизит, ТипДокумента, УсловиеПроверки, Ложь);
		
	КонецЕсли;
	
КонецФункции

Функция СтруктураОбработкиРеквизита(Знач СтрокаДляРазбора,
	ТипДокумента,
	УсловиеПроверки = "",
	ДобавитьПрефиксДоп = Ложь)
	
	Перем Реквизит, ТабличнаяЧасть, ЕстьТабличнаяЧасть;
	
	Структура = НоваяСтруктураОбработкиРеквизита();
	ЗаполнитьПеременныеХраненияРеквизита(СтрокаДляРазбора, Реквизит, ТабличнаяЧасть, ЕстьТабличнаяЧасть);
	
	Если ЕстьТабличнаяЧасть Тогда
		Структура.Реквизит = Реквизит; 
		Структура.ТабличнаяЧастьРеквизита = ТабличнаяЧасть;           
		
		Структура.ЭтоРеквизитТабЧасти = Истина;
		Структура.ЭтоТабЧасть = Ложь;
		
		Если ДобавитьПрефиксДоп Тогда
			Префикс = ПрефиксДополнительныхТитулов();
			Шаблон = "%1%2";
			Структура.Реквизит = СтрШаблон(Шаблон, Префикс, Структура.Реквизит);
			Если Не ПустаяСтрока(Структура.ТабличнаяЧастьРеквизита) Тогда
				Структура.ТабличнаяЧастьРеквизита = СтрШаблон(Шаблон, Префикс, Структура.ТабличнаяЧастьРеквизита);	
			КонецЕсли;
		КонецЕсли;
	Иначе 
		Структура.Реквизит = Реквизит; 
		Структура.ТабличнаяЧастьРеквизита = "";
		Структура.ЭтоРеквизитТабЧасти = Ложь;
		Структура.ЭтоТабЧасть = Ложь;
		
		Если ДобавитьПрефиксДоп Тогда
			Префикс = ПрефиксДополнительныхТитулов();
			Шаблон = "%1%2";
			Структура.Реквизит = СтрШаблон(Шаблон, Префикс, Структура.Реквизит);
		КонецЕсли;
	КонецЕсли;
	
	Структура.УсловиеПроверки = УсловиеПроверки;
	
	Возврат Структура;
	
КонецФункции

Функция ПолучитьПутьКДаннымПоСтруктуре(Структура, Форма)
	
	ОбъектСДанными = "";
	
	Если Структура.ЭтоРеквизитТабЧасти Тогда
		ШаблонПоля = "%1%2.%3";
		ИмяПоля = СтрШаблон(ШаблонПоля, ОбъектСДанными, Структура.ТабличнаяЧастьРеквизита, Структура.Реквизит);
		Возврат ИмяПоля; 
	Иначе  
		ШаблонПоля = "%1%2";
		ИмяПоля = СтрШаблон(ШаблонПоля, ОбъектСДанными, Структура.Реквизит);
		Возврат ИмяПоля;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьЗначениеРеквизитаПоСтруктуре(ОбъектСДанными, Структура, Индекс)

	Если Структура.ЭтоРеквизитТабЧасти Тогда 
		Если ОбъектСДанными[Структура.ТабличнаяЧастьРеквизита].Количество() = 0 Тогда 
			Возврат Неопределено;
		Иначе
			Возврат ОбъектСДанными[Структура.ТабличнаяЧастьРеквизита][Индекс][Структура.Реквизит];
		КонецЕсли;
	Иначе
		Возврат ОбъектСДанными[Структура.Реквизит];
	КонецЕсли;
	
КонецФункции

Функция ЗаполненностьРеквизитаПоСтруктуре(ОбъектСДанными, Структура, Индекс, СтруктураРеквизитов)

	Если СтруктураРеквизитов = Неопределено Тогда
		
		Если Структура.ЭтоТабЧасть Тогда
			Попытка
				Возврат ОбъектСДанными[Структура.Реквизит].Количество() > 0;
			Исключение
				Возврат Ложь;
			КонецПопытки;
		Иначе
			ЗначениеРеквизита = ПолучитьЗначениеРеквизитаПоСтруктуре(ОбъектСДанными, Структура, Индекс);
			Возврат ЗначениеЗаполнено(ЗначениеРеквизита);
		КонецЕсли;
		
	Иначе
		
		Если Структура.ЭтоТабЧасть Тогда
			Возврат КоличествоСтрокВТаблицеСтруктурыРеквизитов(СтруктураРеквизитов, Структура.Реквизит) > 0;
		Иначе
			НомерСтроки = Индекс + 1;
			ЗначениеРеквизита = ЗначениеРеквизитаСтруктурыРеквизитов(СтруктураРеквизитов, Структура.Реквизит,
				Структура.ТабличнаяЧастьРеквизита, НомерСтроки);
			Возврат ЗначениеЗаполнено(ЗначениеРеквизита);
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ВспомогательныеМетоды

Функция ЭтоОсновнаяФорма(ПараметрЗадающийФорму)
	
	Возврат ОбменСГИСЭПДКлиентСервер.ЭтоОсновнаяФорма(ПараметрЗадающийФорму);
	
КонецФункции

Функция ПолучитьПрефиксТитулаПоСтраницеОсновнойФормы(ИмяТекущейСтраницы, ТипДокумента)

	Возврат ОбменСГИСЭПДКлиентСервер.ПолучитьПрефиксТитулаПоСтраницеОсновнойФормы(ИмяТекущейСтраницы, ТипДокумента);

КонецФункции

Функция ЭтоСтрокаТабЧастиВВидеФормы(Знач ИмяФормы, ТипДокумента)

	ПоложениеТочки = СтрНайти(ИмяФормы, ".", НаправлениеПоиска.СКонца);
	Если ПоложениеТочки > 0 Тогда 
		ИмяФормы = Сред(ИмяФормы, ПоложениеТочки + 1);
	КонецЕсли;

	Если ТипДокумента = ТипДокументаТранспортнаяНакладная() Тогда
		Возврат ЭтоСтрокаТабЧастиВВидеФормыТранспортнойНакладной(ИмяФормы);	
	ИначеЕсли ТипДокумента = ТипДокументаЗаказНаряд() Тогда
		Возврат ЭтоСтрокаТабЧастиВВидеФормыЗаказНаряда(ИмяФормы);
	ИначеЕсли ТипДокумента = ТипДокументаСопроводительнаяВедомость() Тогда
		Возврат ЭтоСтрокаТабЧастиВВидеФормыСопроводительнойВедомости(ИмяФормы);
	ИначеЕсли ТипДокумента = ТипДокументаЗаказЗаявка() Тогда
		Возврат ЭтоСтрокаТабЧастиВВидеФормыЗаказЗаявки(ИмяФормы);
	КонецЕсли;

	Возврат Ложь;
	
КонецФункции

Функция ЭтоСтрокаТабЧастиВВидеФормыТранспортнойНакладной(ИмяФормы)

	Если ИмяФормы = "ТитулПеревозчикаЗаменыПрицеп" 
		Или ИмяФормы = "Прицеп" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ЭтоСтрокаТабЧастиВВидеФормыЗаказНаряда(ИмяФормы)

	Возврат Ложь;
	
КонецФункции

Функция ЭтоСтрокаТабЧастиВВидеФормыСопроводительнойВедомости(ИмяФормы)

	Если ИмяФормы = "Контейнер"
	Или ИмяФормы = "Водитель"
	Или	ИмяФормы = "ТитулПеревозчикаПрицеп" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
		
КонецФункции

Функция ЭтоСтрокаТабЧастиВВидеФормыЗаказЗаявки(ИмяФормы)
	
	Возврат Ложь;
	
КонецФункции

Функция НайтиОбщийУзелДляМассиваУзлов(МассивУзловСхемы)

	УзелСхемы = "";
	Для Каждого ТекущийУзел Из МассивУзловСхемы Цикл
		Если УзелСхемы = "" Тогда
			УзелСхемы = ТекущийУзел;
			Продолжить;
		КонецЕсли;

		МассивЧастейУзлаПроверки = СтрРазделить(УзелСхемы, "/");
		МассивЧастейТекущегоУзла = СтрРазделить(ТекущийУзел, "/");

		Индекс = 0;
		Пока Истина Цикл

			Если МассивЧастейУзлаПроверки[Индекс] <> МассивЧастейТекущегоУзла[Индекс] Тогда
				МассивЧастей = Новый Массив;
				Для й = 0 По Индекс - 1 Цикл
					МассивЧастей.Добавить(МассивЧастейУзлаПроверки[й]);				
				КонецЦикла;
				УзелСхемы = СтрСоединить(МассивЧастей, "/");
				Прервать;
			КонецЕсли;

			Индекс = Индекс + 1;

			Если МассивЧастейУзлаПроверки.ВГраница() < Индекс Тогда
				Прервать;
			ИначеЕсли МассивЧастейТекущегоУзла.ВГраница() < Индекс Тогда
				УзелСхемы = ТекущийУзел;
				Прервать;
			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

	Возврат УзелСхемы;

КонецФункции

Функция УзлыСхемыПоНаименованиюФормы(Знач ИмяФормы, ТипДокумента)
	
	ПоложениеТочки = СтрНайти(ИмяФормы, ".", НаправлениеПоиска.СКонца);
	Если ПоложениеТочки > 0 Тогда 
		ИмяФормы = Сред(ИмяФормы, ПоложениеТочки + 1);
	КонецЕсли;
	
	Если ТипДокумента = ТипДокументаТранспортнаяНакладная() Тогда
		Возврат УзлыСхемыФормыТранспортнойНакладной(ИмяФормы);	
	ИначеЕсли ТипДокумента = ТипДокументаЗаказНаряд() Тогда
		Возврат УзлыСхемыФормыЗаказНаряда(ИмяФормы);
	ИначеЕсли ТипДокумента = ТипДокументаСопроводительнаяВедомость() Тогда
		Возврат УзлыСхемыФормыСопроводительнойВедомости(ИмяФормы);
	ИначеЕсли ТипДокумента = ТипДокументаЗаказЗаявка() Тогда
		Возврат УзлыСхемыФормыЗаказЗаявки(ИмяФормы);
	ИначеЕсли ТипДокумента = ТипДокументаПутевойЛист() Тогда
		Возврат УзлыСхемыФормыПутевогоЛиста(ИмяФормы);
	ИначеЕсли ТипДокумента = ТипДокументаДоговорФрахтования() Тогда
		Возврат УзлыСхемыФормыДоговораФрахтования(ИмяФормы);
	КонецЕсли;
	
КонецФункции

Функция УзлыСхемыФормыТранспортнойНакладной(ИмяФормы)

	МассивУзлов = Новый Массив;
	
	Если ИмяФормы = "ОсновнаяФорма" Тогда
		МассивУзлов.Добавить("//Файл");
	ИначеЕсли ИмяФормы = "ТитулГрузоотправителяДоверенность" Тогда
		МассивУзлов.Добавить("//Файл/Документ/ОснДовОргСост");
	ИначеЕсли ИмяФормы = "ТитулГрузоотправителяОснованиеРасчетовИнымЛицом" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГО/СвГО/ОснРасчИным");
	ИначеЕсли ИмяФормы = "ТитулГрузоотправителяДоговорНаУсловияПеревозки" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГО/СвЗак/ДогУслПер");
	ИначеЕсли ИмяФормы = "ТитулГрузоотправителяСторонаДоговораНаПеревозкуГруза" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГО/СвЗак/ДогУслПер/ИдРекСост");
	ИначеЕсли ИмяФормы = "ТитулГрузоотправителяГрузы" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГО/СвГруз/ОпГруз");
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГО/СвГруз/ОбЦеннГр");
	ИначеЕсли ИмяФормы = "Груз" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГО/СвГруз/ОпГруз");
	ИначеЕсли ИмяФормы = "ТитулГрузоотправителяПереченьМаркировокГруза" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГО/СвГруз/ОпГруз/Марк");
	ИначеЕсли ИмяФормы = "ТитулГрузоотправителяСведенияОбОпасныхГрузах" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГО/СвГруз/ОпГруз/СвОпГруз");
	ИначеЕсли ИмяФормы = "ТитулГрузоотправителяСведенияОКонтейнерах" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГО/СвГруз/ОпГруз/СвКонтейн");
	ИначеЕсли ИмяФормы = "ТитулГрузоотправителяИдентификационныеНомераКонтейнеров" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГО/СвГруз/ОпГруз/СвКонтейн/ИдКонтейн");
	ИначеЕсли ИмяФормы = "ТитулГрузоотправителяСопроводительныеДокументы" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГО/СопрДок");
	ИначеЕсли ИмяФормы = "ТитулГрузоотправителяРеквизитыСторонСопроводительныхДокументов" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГО/СопрДок/ДокКТрН/ИдРекСост");
	ИначеЕсли ИмяФормы = "ТитулГрузоотправителяСторонаСопроводительныхДокументов" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГО/СопрДок/ДокКТрН/ИдРекСост");
	ИначеЕсли ИмяФормы = "ТитулГрузоотправителяРеквизитыСторонСертификатовУдостоверений" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГО/СопрДок/ДокКГр/ИдРекСост");
	ИначеЕсли ИмяФормы = "ТитулГрузоотправителяСторонаСертификатовУдостоверений" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГО/СопрДок/ДокКГр/ИдРекСост");
	ИначеЕсли ИмяФормы = "ТитулГрузоотправителяРеквизитыСторонДокументаПодтверждающегоОтгрузку" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГО/СопрДок/ДокПерЦенн/ИдРекСост");
	ИначеЕсли ИмяФормы = "ТитулГрузоотправителяСторонаДокументаПодтверждающегоОтгрузку" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГО/СопрДок/ДокПерЦенн/ИдРекСост");
	ИначеЕсли ИмяФормы = "ТитулГрузоотправителяВедомостьНаКонтейнерНаименование" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГО/СопрДок/РекСопрВед");
	ИначеЕсли ИмяФормы = "ТитулГрузоотправителяСторонаДокументаВедомостьНаКонтейнер" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГО/СопрДок/РекСопрВед/ИдРекСост");
	ИначеЕсли ИмяФормы = "ТитулГрузоотправителяУказанияГрузоотправителя" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГО/УказГО");
	ИначеЕсли ИмяФормы = "ТитулГрузоотправителяСведенияОПереадресовке" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГО/УказГО/СвПА");
	ИначеЕсли ИмяФормы = "ТитулГрузоотправителяПолномочияПереадресовки" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГО/УказГО/СвПА/ДокПерПолнПА");
	ИначеЕсли ИмяФормы = "ТитулГрузоотправителяСторонаДокументаПолномочийПереадресовки" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГО/УказГО/СвПА/ДокПерПолнПА/ИдРекСост");
	ИначеЕсли ИмяФормы = "ТитулГрузоотправителяКлиматическийРежим" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГО/УказГО/КлимРеж");
	ИначеЕсли ИмяФормы = "ТитулГрузоотправителяВодители" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГО/СвВодит");
	ИначеЕсли ИмяФормы = "Водитель" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГО/СвВодит");
	ИначеЕсли ИмяФормы = "ТитулГрузоотправителяСведенияОПутевыхЛистах" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГО/СвВодит/ПутевойЛист");
	ИначеЕсли ИмяФормы = "ТитулГрузоотправителяПутевойЛистРеквизитыСторон" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГО/СвВодит/ПутевойЛист/ИдРекСост");
	ИначеЕсли ИмяФормы = "ТитулГрузоотправителяСторонаДокументаПутевойЛист" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГО/СвВодит/ПутевойЛист/ИдРекСост");
	ИначеЕсли ИмяФормы = "ТитулГрузоотправителяТранспортноеСредство" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГО/СвТС/ТС");
	ИначеЕсли ИмяФормы = "ТитулГрузоотправителяОснованиеВладенияТСРеквизитыСторон" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГО/СвТС/ТС/ОснАрЛиз/ИдРекСост");
	ИначеЕсли ИмяФормы = "ТитулГрузоотправителяСторонаДокументаОснованийВладенияТС" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГО/СвТС/ТС/ОснАрЛиз/ИдРекСост");
	ИначеЕсли ИмяФормы = "ТитулГрузоотправителяПрицеп" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГО/СвТС/Прицеп");
	ИначеЕсли ИмяФормы = "ТитулГрузоотправителяОснованиеВладенияПрицепомРеквизитыСторон" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГО/СвТС/Прицеп/ОснАрЛиз/ИдРекСост");
	ИначеЕсли ИмяФормы = "ТитулГрузоотправителяСторонаДокументаОснованийВладенияПрицепом" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГО/СвТС/Прицеп/ОснАрЛиз/ИдРекСост");
	ИначеЕсли ИмяФормы = "ТитулГрузоотправителяПогрузка" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГО/СвПогруз");
	ИначеЕсли ИмяФормы = "ТитулГрузоотправителяОснованиеОсуществленияПогрузки" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГО/СвПогруз/СвЛицПогрГр/ОснПогрГр");
	ИначеЕсли ИмяФормы = "ТитулГрузоотправителяСторонаОснованияОсуществленияПогрузки" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГО/СвПогруз/СвЛицПогрГр/ОснПогрГр/ИдРекСост");
	ИначеЕсли ИмяФормы = "ТитулГрузоотправителяРаботникНаПогрузке" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГО/СвПогруз/СвЛицПогрГр/РабЛицПогрГр");
	ИначеЕсли ИмяФормы = "ТитулГрузоотправителяСторонаИныхОснованийПолномочийПогрузки" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГО/СвПогруз/СвЛицПогрГр/РабЛицПогрГр/ОПИное/ИдРекСост");
	ИначеЕсли ИмяФормы = "ТитулГрузоотправителяВладелецПунктаПогрузки" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГО/СвПогруз/ВладИнфр");
	ИначеЕсли ИмяФормы = "ТитулГрузоотправителяОснованиеДоступаКПунктуПогрузки" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГО/СвПогруз/ОснДостОбИнфрДок");
	ИначеЕсли ИмяФормы = "ТитулГрузоотправителяСторонаОснованияДоступаКПунктуПогрузки" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГО/СвПогруз/ОснДостОбИнфрДок/ИдРекСост");
	ИначеЕсли ИмяФормы = "ТитулГрузоотправителяОтметкиГрузоотправителя" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГО/ОтметГО");
	ИначеЕсли ИмяФормы = "ТитулГрузоотправителяАкты" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГО/ОтметГО/СвАкт");
	ИначеЕсли ИмяФормы = "ТитулГрузоотправителяАктРеквизитыСторон" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГО/ОтметГО/СвАкт/ИдРекСост");
	ИначеЕсли ИмяФормы = "ТитулГрузоотправителяСторонаАкта" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГО/ОтметГО/СвАкт/ИдРекСост");
	ИначеЕсли ИмяФормы = "ТитулГрузоотправителяРасчетыШтрафов" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГО/ОтметГО/РазмШтр");
	ИначеЕсли ИмяФормы = "ТитулГрузоотправителяАктыВзвешивания" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГО/ОтметГО/СвАктВзв");
	ИначеЕсли ИмяФормы = "ТитулГрузоотправителяАктВзвешиванияРеквизитыСторон" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГО/ОтметГО/СвАктВзв/ИдРекСост");
	ИначеЕсли ИмяФормы = "ТитулГрузоотправителяСторонаАктВзвешивания" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГО/ОтметГО/СвАктВзв/ИдРекСост");
	ИначеЕсли ИмяФормы = "ТитулПеревозчикаПриемкаОтметкиПеревозчикаПриПриемеГруза" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфПрвПрием/ОтметПрвПрием");
	ИначеЕсли ИмяФормы = "ТитулПеревозчикаПриемкаАкты" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфПрвПрием/ОтметПрвПрием/СвАкт");
	ИначеЕсли ИмяФормы = "ТитулПеревозчикаПриемкаАктРеквизитыСторон" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфПрвПрием/ОтметПрвПрием/СвАкт/ИдРекСост");
	ИначеЕсли ИмяФормы = "ТитулПеревозчикаПриемкаСторонаАкта" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфПрвПрием/ОтметПрвПрием/СвАкт/ИдРекСост");
	ИначеЕсли ИмяФормы = "ТитулПеревозчикаПриемкаРасчетыШтрафов" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфПрвПрием/ОтметПрвПрием/РазмШтр");
	ИначеЕсли ИмяФормы = "ТитулГрузополучателяСведенияОПринятыхГрузах" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГП/ПриемГрузГП/СвПринПоНаим");
	ИначеЕсли ИмяФормы = "ТитулГрузополучателяМаркировкиГруза" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГП/ПриемГрузГП/СвПринПоНаим/ПерМарк");
	ИначеЕсли ИмяФормы = "ТитулГрузоотправителяГрузыУчетВГИС" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГО/СвГруз/ОпГруз/СвГосСист/ИдНомУчетЕд");
	ИначеЕсли ИмяФормы = "ТитулГрузополучателяОтметкиГрузополучателя" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГП/ОтметГП");
	ИначеЕсли ИмяФормы = "ТитулГрузополучателяАкты" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГП/ОтметГП/СвАкт");
	ИначеЕсли ИмяФормы = "ТитулГрузополучателяАктРеквизитыСторон" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГП/ОтметГП/СвАкт/ИдРекСост");
	ИначеЕсли ИмяФормы = "ТитулГрузополучателяСторонаАкта" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГП/ОтметГП/СвАкт/ИдРекСост");
	ИначеЕсли ИмяФормы = "ТитулГрузополучателяРасчетыШтрафов" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГП/ОтметГП/РазмШтр");
	ИначеЕсли ИмяФормы = "ТитулГрузополучателяАктыВзвешивания" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГП/ОтметГП/СвАктВзв");
	ИначеЕсли ИмяФормы = "ТитулГрузополучателяАктВзвешиванияРеквизитыСторон" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГП/ОтметГП/СвАктВзв/ИдРекСост");
	ИначеЕсли ИмяФормы = "ТитулГрузополучателяСторонаАктаВзвешивания" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГП/ОтметГП/СвАктВзв/ИдРекСост");
	ИначеЕсли ИмяФормы = "ТитулПеревозчикаВыдачаОтметкиПриВыдачеГруза" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодПрвВыд/ОтметПрвВыд");
	ИначеЕсли ИмяФормы = "ТитулПеревозчикаВыдачаАкты" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодПрвВыд/ОтметПрвВыд/СвАкт");
	ИначеЕсли ИмяФормы = "ТитулПеревозчикаВыдачаАктРеквизитыСторон" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодПрвВыд/ОтметПрвВыд/СвАкт/ИдРекСост");
	ИначеЕсли ИмяФормы = "ТитулПеревозчикаВыдачаСторонаАкта" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодПрвВыд/ОтметПрвВыд/СвАкт/ИдРекСост");
	ИначеЕсли ИмяФормы = "ТитулПеревозчикаВыдачаРасчетыШтрафов" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодПрвВыд/ОтметПрвВыд/РазмШтр");
	ИначеЕсли ИмяФормы = "ТитулПереадресовкаОснованиеРеквизитыСторон" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфПА/ОснПА/ИдРекСост");
	ИначеЕсли ИмяФормы = "ТитулПереадресовкаСторонаДокументаОснования" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфПА/ОснПА/ИдРекСост");
	ИначеЕсли ИмяФормы = "ТитулПереадресовкаКонтактныеДанныеНовогоГрузополучателя" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфПА/НовГрузПол/Контакт/Тлф");
		МассивУзлов.Добавить("//Файл/Документ/СодИнфПА/НовГрузПол/Контакт/ЭлПочта");
		МассивУзлов.Добавить("//Файл/Документ/СодИнфПА/НовГрузПол/Контакт/ИнКонт");
	ИначеЕсли ИмяФормы = "ТитулПереадресовкаСведенияОбОтметках" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфПА/ОтметПА");
	ИначеЕсли ИмяФормы = "ТитулПеревозчикаЗаменыДокументРеквизитыСторон" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфЗамен/ПричЗамДок/ИдРекСост");
	ИначеЕсли ИмяФормы = "ТитулПеревозчикаЗаменыСторонаДокументаОтражающегоПричиныЗамены" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфЗамен/ПричЗамДок/ИдРекСост");
	ИначеЕсли ИмяФормы = "ТитулПеревозчикаЗаменыЗаменыВодителей" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфЗамен/ЗаменВодит");
	ИначеЕсли ИмяФормы = "ТитулПеревозчикаЗаменыВодительДокументПередачиГрузаРеквизитыСторон" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфЗамен/ЗаменВодит/ДокПерГрВод/ИдРекСост");
	ИначеЕсли ИмяФормы = "ТитулПеревозчикаЗаменыВодительСторонаДокументаПередачиГруза" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфЗамен/ЗаменВодит/ДокПерГрВод/ИдРекСост");
	ИначеЕсли ИмяФормы = "ТитулПеревозчикаЗаменыНовыйВодитель" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфЗамен/ЗаменВодит/НовВодит");
	ИначеЕсли ИмяФормы = "ТитулПеревозчикаЗаменыПутевыеЛисты" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфЗамен/ЗаменВодит/НовВодит/ПутевойЛист");
	ИначеЕсли ИмяФормы = "ТитулПеревозчикаЗаменыПутевойЛистРеквизитыСторон" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфЗамен/ЗаменВодит/НовВодит/ПутевойЛист/ИдРекСост");
	ИначеЕсли ИмяФормы = "ТитулПеревозчикаЗаменыСторонаДокументаПутевойЛист" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфЗамен/ЗаменВодит/НовВодит/ПутевойЛист/ИдРекСост");
	ИначеЕсли ИмяФормы = "ТитулПеревозчикаЗаменыТранспортныеСредства" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфЗамен/ЗаменТС");
	ИначеЕсли ИмяФормы = "ТитулПеревозчикаЗаменыТранспортноеСредство" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфЗамен/ЗаменТС");
	ИначеЕсли ИмяФормы = "ТитулПеревозчикаЗаменыОснованиеВладенияТСРеквизитыСторон" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфЗамен/ЗаменТС/ТС/ОснАрЛиз/ИдРекСост");
	ИначеЕсли ИмяФормы = "ТитулПеревозчикаЗаменыСторонаОснованияВладенияТС" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфЗамен/ЗаменТС/ТС/ОснАрЛиз/ИдРекСост");
	ИначеЕсли ИмяФормы = "ТитулПеревозчикаЗаменыПрицепы" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфЗамен/ЗаменТС/Прицеп");
	ИначеЕсли ИмяФормы = "ТитулПеревозчикаЗаменыПрицеп" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфЗамен/ЗаменТС/Прицеп");
	ИначеЕсли ИмяФормы = "ТитулПеревозчикаЗаменыОснованиеВладенияПрицепомРеквизитыСторон" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфЗамен/ЗаменТС/Прицеп/ОснАрЛиз/ИдРекСост");
	ИначеЕсли ИмяФормы = "ТитулПеревозчикаЗаменыСторонаОснованияВладенияПрицепом" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфЗамен/ЗаменТС/Прицеп/ОснАрЛиз/ИдРекСост");
	ИначеЕсли ИмяФормы = "ТитулПеревозчикаЗаменыТСДокументПередачиГрузаРеквизитыСторон" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфЗамен/ЗаменТС/ДокПерГр/ИдРекСост");
	ИначеЕсли ИмяФормы = "ТитулПеревозчикаЗаменыТССторонаДокументаПередачиГруза" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфЗамен/ЗаменТС/ДокПерГр/ИдРекСост");
	ИначеЕсли ИмяФормы = "ТитулПеревозчикаЗаменыСведенияОСпециальныхУсловияхДвижения" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфЗамен/ЗаменТС/СпецУслДвиж");
	ИначеЕсли ИмяФормы = "ТитулПеревозчикаЗаменыОтметкиОЗаменах" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфЗамен/ОтметЗам");
	ИначеЕсли ИмяФормы = "ТитулПеревозчикаЗаменыАкты" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфЗамен/ОтметЗам/СвАкт");
	ИначеЕсли ИмяФормы = "ТитулПеревозчикаЗаменыАктРеквизитыСторон" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфЗамен/ОтметЗам/СвАкт/ИдРекСост");
	ИначеЕсли ИмяФормы = "ТитулПеревозчикаЗаменыСторонаАкта" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфЗамен/ОтметЗам/СвАкт/ИдРекСост");
	ИначеЕсли ИмяФормы = "ТитулПеревозчикаФХЖПеревозчик" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодФХЖ1/ДопСвПрв");
	КонецЕсли;	
	
	Возврат МассивУзлов;

КонецФункции

Функция УзлыСхемыФормыЗаказНаряда(ИмяФормы)

	МассивУзлов = Новый Массив;

	Если ИмяФормы = "Водитель" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодЗНИнфФщ/СвТС/СвВодит");
	ИначеЕсли ИмяФормы = "ОсновнаяФорма" Тогда
		МассивУзлов.Добавить("//Файл");
	ИначеЕсли ИмяФормы = "ТитулФрахтователяИдентификационныеНомераКонтейнера" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодЗНИнфФт/СвГруз/ОпГруз/СвКонтейн/ИдКонтейн");
	ИначеЕсли ИмяФормы = "ТитулФрахтователяМаркировка" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодЗНИнфФт/СвГруз/ОпГруз/Марк");
	ИначеЕсли ИмяФормы = "ТитулФрахтователяПараметрыНеобходимогоТС" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодЗНИнфФт/СвУказФт/ПарТС");
	ИначеЕсли ИмяФормы = "ТитулФрахтователяПодачаАктыВзвешивания" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодЗНИнфФт/ОтметФт/СвАктВзв");
	ИначеЕсли ИмяФормы = "ТитулФрахтователяПодачаАктыВзвешиванияРеквизитыСторон" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодЗНИнфФт/ОтметФт/СвАктВзв/ИдРекСост");
	ИначеЕсли ИмяФормы = "ТитулФрахтователяПодачаКоммерческиеИИныеАкты" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодЗНИнфФт/ОтметФт/СвАкт");
	ИначеЕсли ИмяФормы = "ТитулФрахтователяПодачаКоммерческиеИИныеАктыРеквизитыСторон" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодЗНИнфФт/ОтметФт/СвАкт/ИдРекСост");
	ИначеЕсли ИмяФормы = "ТитулФрахтователяПодачаОтметкиФрахтователя" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодЗНИнфФт/ОтметФт");
	ИначеЕсли ИмяФормы = "ТитулФрахтователяПодачаРасчетИРазмерШтрафа" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодЗНИнфФт/ОтметФт/РазмШтр");
	ИначеЕсли ИмяФормы = "ТитулФрахтователяПрилагаемыеСертификатыПаспортаКачестваРеквизитыСторон" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодЗНИнфФт/СопрДок/ДокКГр/ИдРекСост");
	ИначеЕсли ИмяФормы = "ТитулФрахтователяСведенияОбОпасномГрузе" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодЗНИнфФт/СвГруз/ОпГруз/СвОпГруз");
	ИначеЕсли ИмяФормы = "ТитулФрахтователяСведенияОКонтейнерах" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодЗНИнфФт/СвГруз/ОпГруз/СвКонтейн");
	ИначеЕсли ИмяФормы = "ТитулФрахтователяСведенияОМаршрутеПеревозки" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодЗНИнфФт/СвМршПодТС/МршПрвз");
	ИначеЕсли ИмяФормы = "ТитулФрахтователяСведенияОНаименованииГруза" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодЗНИнфФт/СвГруз/ОбЦеннГр");
		МассивУзлов.Добавить("//Файл/Документ/СодЗНИнфФт/СвГруз/ОпГруз");
	ИначеЕсли ИмяФормы = "ТитулФрахтователяСопроводительнаяВедомость" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодЗНИнфФт/СопрДок/РекСопрВед");
	ИначеЕсли ИмяФормы = "ТитулФрахтователяСопроводительныеДокументыНаГруз" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодЗНИнфФт/СопрДок");
	ИначеЕсли ИмяФормы = "ТитулФрахтователяСопроводительныеДокументыНаГрузРеквизитыСторон" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодЗНИнфФт/СопрДок/ДокКЗН/ИдРекСост");
	ИначеЕсли ИмяФормы = "ТитулФрахтователяУсловияФрахтования" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодЗНИнфФт/СвУслФрах");
	ИначеЕсли ИмяФормы = "ТитулФрахтовщикаВозвратАктыВзвешивания" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодЗНИнфФщ/ОтметФщ/СвАктВзв");
	ИначеЕсли ИмяФормы = "ТитулФрахтовщикаВозвратАктыВзвешиванияРеквизитыСторон" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодЗНИнфФщ/ОтметФщ/СвАктВзв/ИдРекСост");
	ИначеЕсли ИмяФормы = "ТитулФрахтовщикаВозвратКоммерческиеИИныеАкты" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодЗНИнфФщ/ОтметФщ/СвАкт");
	ИначеЕсли ИмяФормы = "ТитулФрахтовщикаВозвратКоммерческиеИИныеАктыРеквизитыСторон" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодЗНИнфФщ/ОтметФщ/СвАкт/ИдРекСост");
	ИначеЕсли ИмяФормы = "ТитулФрахтовщикаВозвратОтметкиФрахтовщика" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодЗНИнфФщ/ОтметФщ");
	ИначеЕсли ИмяФормы = "ТитулФрахтовщикаВозвратРасчетИРазмерШтрафа" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодЗНИнфФщ/ОтметФщ/РазмШтр");
	ИначеЕсли ИмяФормы = "ТитулФрахтовщикаКоммерческиеИИныеАкты" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодЗНИнфФщ/СвПрочУсл/СвАкт");
	ИначеЕсли ИмяФормы = "ТитулФрахтовщикаКоммерческиеИИныеАктыРеквизитыСторон" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодЗНИнфФщ/СвПрочУсл/СвАкт/ИдРекСост");
	ИначеЕсли ИмяФормы = "ТитулФрахтовщикаКонтактыВодителяАдресаЭлектроннойПочты" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодЗНИнфФщ/СвТС/СвВодит/СредСвяз/ЭлПочта");
	ИначеЕсли ИмяФормы = "ТитулФрахтовщикаКонтактыВодителяНомераТелефонов" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодЗНИнфФщ/СвТС/СвВодит/СредСвяз/Тлф");
	ИначеЕсли ИмяФормы = "ТитулФрахтовщикаРазмерПлатыЗаПользованиеТС" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодЗНИнфФщ/СвРазПлатТС");
	ИначеЕсли ИмяФормы = "ТитулФрахтовщикаСведенияОВодителе" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодЗНИнфФщ/СвТС/СвВодит");
	ИначеЕсли ИмяФормы = "ТитулФрахтовщикаСведенияОПрочихУсловиях" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодЗНИнфФщ/СвПрочУсл");
	ИначеЕсли ИмяФормы = "ТитулФрахтовщикаСведенияОПутевыхЛистах" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодЗНИнфФщ/СвТС/СвВодит/ПутевойЛист");
	ИначеЕсли ИмяФормы = "ТитулФрахтовщикаСведенияОТранспортномСредстве" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодЗНИнфФщ/СвТС");
	ИначеЕсли ИмяФормы = "ТитулФрахтовщикаТранспортноеСредство" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодЗНИнфФщ/СвТС");
	КонецЕсли;
	
	Возврат МассивУзлов;
	
КонецФункции

Функция УзлыСхемыФормыСопроводительнойВедомости(ИмяФормы)

	МассивУзлов = Новый Массив;

	Если ИмяФормы = "ОсновнаяФорма" Тогда
		МассивУзлов.Добавить("//Файл");
	ИначеЕсли ИмяФормы = "ТитулПеревозчикаСведенияОГрузе" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодСВИнфПрв/СвГруз");
	ИначеЕсли ИмяФормы = "ТитулПеревозчикаМаркировка" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодСВИнфПрв/СвГруз/ОпГруз/Марк");
	ИначеЕсли ИмяФормы = "СведенияОбОпасномГрузе" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодСВИнфПрв/СвГруз/ОпГруз/СвОпГруз");
	ИначеЕсли ИмяФормы = "ТитулПеревозчикаСведенияОКонтейнерахСдача" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодСВИнфПрв/СвКонтейн");
	ИначеЕсли ИмяФормы = "ТитулПеревозчикаВыгрузкаКонтейнера" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодСВИнфПрв/СдачКонтПогрВыгр");
	ИначеЕсли ИмяФормы = "Контейнер" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодСВИнфПрв/СвКонтейн");
	ИначеЕсли ИмяФормы = "ТитулПеревозчикаПогрузкаКонтейнера" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодСВИнфПрв/СдачКонтПогрВыгр");
	ИначеЕсли ИмяФормы = "ТитулПеревозчикаВодители" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодСВИнфПрв/СвПрв/СвВодит");
	ИначеЕсли ИмяФормы = "Водитель" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодСВИнфПрв/СвПрв/СвВодит");
	ИначеЕсли ИмяФормы = "ТитулПеревозчикаСведенияОПутевомЛистеПутевыхЛистах" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодСВИнфПрв/СвПрв/ПутевойЛист");
	ИначеЕсли ИмяФормы = "ТитулПеревозчикаТранспортноеСредство" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодСВИнфПрв/СвТС/ТС");
	ИначеЕсли ИмяФормы = "ТитулПеревозчикаПрицеп" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодСВИнфПрв/СвТС/Прицеп");
	ИначеЕсли ИмяФормы = "ТитулГрузоотправителяСведенияОбУказанияхГрузоотправителя" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодСВИнфГО/УказГО");
	ИначеЕсли ИмяФормы = "ТитулГрузоотправителяСведенияОКонтейнерах" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодСВИнфГО/СвКонтейн");
	ИначеЕсли ИмяФормы = "ТитулГрузополучателяСведенияОКонтейнерах" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодСВИнфГП/СвКонтейн");
	КонецЕсли;
	
	Возврат МассивУзлов;
	
КонецФункции

Функция УзлыСхемыФормыЗаказЗаявки(ИмяФормы)
	
	МассивУзлов = Новый Массив;
	
	Если ИмяФормы = "ОсновнаяФорма" Тогда
		МассивУзлов.Добавить("//Файл");
	ИначеЕсли ИмяФормы = "ТитулГрузоотправителяДоговор" Тогда
		МассивУзлов.Добавить("//Файл/Документ/ДогОргПрвз");
	ИначеЕсли ИмяФормы = "ТитулГрузоотправителяУказанияГрузоотправителя" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГО/УкНормПрвз");
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГО/ПрвзПищПрод");
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГО/ТемпРеж/ТемпНеВыше");
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГО/ТемпРеж/ТемпНеНиже");
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГО/ВлажнРеж/ВлажнНеВыше");
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГО/ВлажнРеж/ВлажнНеНиже");
	ИначеЕсли ИмяФормы = "ТитулГрузоотправителяУполномоченныеЛица" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГО/СвЛицГО");
	ИначеЕсли ИмяФормы = "ТитулГрузоотправителяДокументПодтвержденияПолномочий" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГО/СвЛицГО/РеквДокПолн");
	ИначеЕсли ИмяФормы = "ТитулГрузоотправителяАдресаПунктовПогрузкиИВыгрузки" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГО/АдрПункт");
	ИначеЕсли ИмяФормы = "ТитулГрузоотправителяГрузы" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГО/ОпГруз");
	ИначеЕсли ИмяФормы = "ТитулГрузоотправителяДоговораНаВыполнениеУслуг" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГО/ОпГруз/ДогУслПрвз");
	ИначеЕсли ИмяФормы = "ТитулГрузоотправителяГрузыПунктыПогрузкиВыгрузки" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГО/ОпГруз/Пункт");
	ИначеЕсли ИмяФормы = "ТитулГрузоотправителяТранспортноеСредство" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфГО/ПарамТС");
	ИначеЕсли ИмяФормы = "ТитулПеревозчикаДоверенность" Тогда
		МассивУзлов.Добавить("//Файл/Документ/ОснДовОргСост");
	ИначеЕсли ИмяФормы = "ТитулПеревозчикаВодители" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфПрв/СвВодит");
	ИначеЕсли ИмяФормы = "Водитель" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфПрв/СвВодит");
	ИначеЕсли ИмяФормы = "ТитулПеревозчикаСоставительДоверенность" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфПрв/СвЛицПрв/РеквДовер");
	ИначеЕсли ИмяФормы = "ТитулПеревозчикаРазмерПлатыИПорядокРасчетов" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфПрв/РазмПлатРасчет");
	ИначеЕсли ИмяФормы = "ТитулПеревозчикаОснованиеВладенияТСРеквизитыСторон" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфПрв/СвТС/ТС/ОснАрЛиз/ИдРекСост");
	ИначеЕсли ИмяФормы = "ОснованиеВладенияПрицепомРеквизитыСторон" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфПрв/СвТС/Прицеп/ОснАрЛиз/ИдРекСост");
	ИначеЕсли ИмяФормы = "ТитулПеревозчикаТранспортноеСредство" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфПрв/СвТС");
	КонецЕсли;
	
	Возврат МассивУзлов;
	
КонецФункции

Функция УзлыСхемыФормыПутевогоЛиста(ИмяФормы)
	
	МассивУзлов = Новый Массив;
	
	Если ИмяФормы = "ОсновнаяФорма" Тогда
		МассивУзлов.Добавить("//Файл");
	ИначеЕсли ИмяФормы = "ТитулОформлениеАдресаПунктовПогрузкиИВыгрузки" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфСоб/АдрПункт");
	ИначеЕсли ИмяФормы = "ТитулОформлениеГрузоотправители" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфСоб/СвГО");
	ИначеЕсли ИмяФормы = "ТитулОформлениеВодители" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфСоб/СвВодит");
	ИначеЕсли ИмяФормы = "ТитулВыпускОтветственныйЗаСостояниеТС" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодИнфТехСост/СвОтвЛиц");
	КонецЕсли;
	
	Возврат МассивУзлов;
	
КонецФункции

Функция УзлыСхемыФормыДоговораФрахтования(ИмяФормы)
	
	МассивУзлов = Новый Массив;
	
	Если ИмяФормы = "ОсновнаяФорма" Тогда
		МассивУзлов.Добавить("//Файл");
	ИначеЕсли ИмяФормы = "ТитулФрахтователяОснованиеСоставленияФайла" Тогда
		МассивУзлов.Добавить("//Файл/Документ/ОснДовОргСост");
	ИначеЕсли ИмяФормы = "ТитулФрахтователяСведенияОМаршрутеПеревозки" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодДФИнфФт/МршПодТС/МршПрвз");
	ИначеЕсли ИмяФормы = "ТитулФрахтователяНаименованиеГруза" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодДФИнфФт/НаимГруз");
	ИначеЕсли ИмяФормы = "ТитулФрахтователяМаркировка" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодДФИнфФт/НаимГруз/ОпГруз/Марк");
	ИначеЕсли ИмяФормы = "СведенияОбОпасномГрузеВСлучаеПеревозкиОпасногоГруза" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодДФИнфФт/НаимГруз/ОпГруз/СвОпаснГруз");
	ИначеЕсли ИмяФормы = "ТитулФрахтователяРазмерПлатыЗаПользованиеТранспортнымСредством" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодДФИнфФт/РазПлатТС");
	ИначеЕсли ИмяФормы = "ТитулФрахтовщикаОснованиеСоставленияФайла" Тогда
		МассивУзлов.Добавить("//Файл/Документ/ОснДовОргСост");
	ИначеЕсли ИмяФормы = "ТитулФрахтовщикаСведенияОТранспортномСредстве" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодДФИнфФщ/СвТС");
	ИначеЕсли ИмяФормы = "ТитулФрахтовщикаСведенияОВодителе" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодДФИнфФщ/СвТС/СвВодит");
	ИначеЕсли ИмяФормы = "СведенияОПутевомЛисте" Тогда
		МассивУзлов.Добавить("//Файл/Документ/СодДФИнфФщ/СвТС/СвВодит/ПутевойЛист");
	КонецЕсли;
	
	Возврат МассивУзлов;
	
КонецФункции


Функция ПолучитьСериализуемыйОбъектСДаннымиДокумента(Форма)
	
	СтруктураДанныхОбъекта = Новый Структура;
	
	ТипСтрока = Тип("Строка");
	ТипЧисло = Тип("Число");
	ТипДата = Тип("Дата");
	ТипБулево = Тип("Булево");
	ТипТаблицаЗначений = Тип("ТаблицаЗначений");
	
	РеквизитыФормы = Форма.ПолучитьРеквизиты();
	Для Каждого РеквизитФормы Из РеквизитыФормы Цикл
	
		Если РеквизитФормы.ТипЗначения.СодержитТип(ТипСтрока)
			Или РеквизитФормы.ТипЗначения.СодержитТип(ТипЧисло)
			Или РеквизитФормы.ТипЗначения.СодержитТип(ТипДата)
			Или РеквизитФормы.ТипЗначения.СодержитТип(ТипБулево) Тогда
				
			СтруктураДанныхОбъекта.Вставить(РеквизитФормы.Имя, Форма[РеквизитФормы.Имя]);
				
		ИначеЕсли РеквизитФормы.ТипЗначения.СодержитТип(ТипТаблицаЗначений) Тогда
			
			Таблица = ДанныеФормыВЗначение(Форма[РеквизитФормы.Имя], Тип("ТаблицаЗначений"));
			СтруктураДанныхОбъекта.Вставить(РеквизитФормы.Имя, Таблица);
			
		КонецЕсли;
	 		
	КонецЦикла;
	
	Возврат СтруктураДанныхОбъекта;
	
КонецФункции

Функция ПризнакОбластиСтруктур()

	Возврат "_ОбязательныеСтруктуры"
	
КонецФункции

Функция ЭтоПризнакОбязательногоРеквизитаВМакете(Текст)

	Возврат ВРег(Текст) = "ДА";
	
КонецФункции

Функция ПризнакОтметкиНеЗаполненного()
	
	Возврат "ОтметНезаполн";
	
КонецФункции

Функция ПрефиксЭлементаСоСсылкойНаФорму()

	Возврат "Заполнить";
	
КонецФункции

Функция ПрефиксДополнительныхТитулов()
	
	Возврат "Доп";
	
КонецФункции

Функция ПутьПроверкиУсловногоОформления(ПутьКРеквизиту)
	
	Шаблон = "%1%2";
	ПризнакОтметкиНеЗаполненного = ПризнакОтметкиНеЗаполненного();
	Возврат СтрШаблон(Шаблон, ПутьКРеквизиту, ПризнакОтметкиНеЗаполненного);
	
КонецФункции

Функция НоваяТаблицаКнопокОткрытияФормы()

	Таблица = Новый ТаблицаЗначений;               
	Таблица.Колонки.Добавить("ЭлементыСхемы");
	Таблица.Колонки.Добавить("ПутьКЭлементуФормы");
	Таблица.Колонки.Добавить("ЭтоРеквизитТабЧасти");
	Таблица.Колонки.Добавить("Реквизит");           
	Таблица.Колонки.Добавить("ТабЧасть");
	Таблица.Колонки.Добавить("ПутьПроверкиУсловногоОформления");

	Возврат Таблица;
	
КонецФункции

Функция ЕстьПроверкаОбязательности(СтруктураПроверкиОбязательности)
	
	Если ТипЗнч(СтруктураПроверкиОбязательности) = Тип("Массив") Тогда
		Возврат Истина;	
	ИначеЕсли СтруктураПроверкиОбязательности = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Не ПустаяСтрока(СтруктураПроверкиОбязательности.Реквизит);
	КонецЕсли;
		
КонецФункции

Функция НовыйРезультатОбработкиЗаполнения()
	
	Структура = Новый Структура;
	Структура.Вставить("ЕстьЗаполненныеЭлементы", Ложь);
	Структура.Вставить("ОбязательныеЭлементыЗаполнены", Ложь);
	
	Возврат Структура;
	
КонецФункции

Функция ЗначениеОформленияНеобязательно()
	
	Возврат 0;
	
КонецФункции

Функция ЗначениеОформленияЗаполнено()
	
	Возврат 1;
	
КонецФункции

Функция ЗначениеОформленияЗаполнить()
	
	Возврат 2;
	
КонецФункции

Функция ТипДокументаТранспортнаяНакладная()
	
	Возврат ОбменСГИСЭПДКлиентСервер.ТипДокументаТранспортнаяНакладная();
	
КонецФункции

Функция ТипДокументаЗаказНаряд()
	
	Возврат ОбменСГИСЭПДКлиентСервер.ТипДокументаЗаказНаряд();
	
КонецФункции

Функция ТипДокументаЗаказЗаявка()
	
	Возврат ОбменСГИСЭПДКлиентСервер.ТипДокументаЗаказЗаявка();
	
КонецФункции

Функция ТипДокументаПутевойЛист()
	
	Возврат ОбменСГИСЭПДКлиентСервер.ТипДокументаПутевойЛист();
	
КонецФункции

Функция ТипДокументаДоговорФрахтования()
	
	Возврат ОбменСГИСЭПДКлиентСервер.ТипДокументаДоговорФрахтования();
	
КонецФункции

Функция ТипДокументаСопроводительнаяВедомость()
	
	Возврат ОбменСГИСЭПДКлиентСервер.ТипДокументаСопроводительнаяВедомость();
	
КонецФункции

Процедура УстановитьОформлениеКнопкиТабЧасти(ЭлементОформления, ЗначениеОформления)
	
	Если ЗначениеОформления = ЗначениеОформленияНеобязательно() Тогда
		
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ЦветТекста"),
			WebЦвета.Серый);
			
	ИначеЕсли ЗначениеОформления = ЗначениеОформленияЗаполнено() Тогда
		
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ЦветТекста"),
			ЦветаСтиля.ГиперссылкаЦвет);
			 
	ИначеЕсли ЗначениеОформления = ЗначениеОформленияЗаполнить() Тогда
		
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ЦветТекста"),
			WebЦвета.Красный);
			
	КонецЕсли;
		
КонецПроцедуры

Функция СтрокаДереваПоЭлементуСхемы(ДеревоСоответствий, ЭлементСхемы)
	
	Если ПустаяСтрока(ЭлементСхемы) Тогда
		Возврат Неопределено;
	Иначе
		Возврат ДеревоСоответствий.Строки.Найти(ЭлементСхемы, "ЭлементСхемы", Истина);
	КонецЕсли;
	
КонецФункции

Функция ЕстьРеквизитВТаблице(ОбъектСДанными, ИмяТаблицы, ИмяРеквизита)
	
	Если ОбъектСДанными.Свойство(ИмяТаблицы)= Ложь Тогда
		Возврат Ложь;
	ИначеЕсли ТипЗнч(ОбъектСДанными[ИмяТаблицы]) = Тип("ДанныеФормыКоллекция") Тогда
		Таблица = ДанныеФормыВЗначение(ОбъектСДанными[ИмяТаблицы], Тип("ТаблицаЗначений"));
		Возврат Таблица.Колонки.Найти(ИмяРеквизита) <> Неопределено;	
	Иначе
		Возврат ОбъектСДанными[ИмяТаблицы].Колонки.Найти(ИмяРеквизита) <> Неопределено;
	КонецЕсли;
	
КонецФункции

Функция НоваяСтруктураДанныхТабЧасти()
	
	Возврат Новый Структура("ИдентификаторСтроки, Индекс, ТекущаяТабличнаяЧасть");
	
КонецФункции

#КонецОбласти

#Область МетодыРаботыСоСтруктуройРеквизитов

Процедура ДополнитьСтруктуруРеквизитовИнформациейОТаблицах(СтруктураСРеквизитами)
	
	Если СтруктураСРеквизитами = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеТаблицИЧислаСтрок = Новый Структура;
	
	Для Каждого КлючЗначение Из СтруктураСРеквизитами Цикл
		
		МассивЧастей = ОбменСГИСЭПДКлиентСервер.РазделитьСтрокуСоСложнымРазделителем(КлючЗначение.Ключ, "__");
		Если МассивЧастей.Количество() = 1 Тогда
			Продолжить;	
		КонецЕсли;
		
		ИмяТаблицы = МассивЧастей[0];
		Если ПустаяСтрока(ИмяТаблицы) Тогда
			Продолжить;	
		КонецЕсли;	
		
		ЧислоСтрок = Число(МассивЧастей[1]);
		
		Если СоответствиеТаблицИЧислаСтрок.Свойство(ИмяТаблицы) Тогда
			Если ЧислоСтрок > СоответствиеТаблицИЧислаСтрок[ИмяТаблицы] Тогда
				СоответствиеТаблицИЧислаСтрок[ИмяТаблицы] = ЧислоСтрок;
			КонецЕсли;
		Иначе			
			СоответствиеТаблицИЧислаСтрок.Вставить(ИмяТаблицы, ЧислоСтрок);
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураСРеквизитами = Новый Структура(СтруктураСРеквизитами);
	СтруктураСРеквизитами.Вставить("СоответствиеТаблицИЧислаСтрок", СоответствиеТаблицИЧислаСтрок);
	
КонецПроцедуры

Функция КоличествоСтрокВТаблицеСтруктурыРеквизитов(СтруктураСРеквизитами, ИмяТаблицы)

	Если СтруктураСРеквизитами.СоответствиеТаблицИЧислаСтрок.Свойство(ИмяТаблицы) Тогда
		ЧислоСтрок = СтруктураСРеквизитами.СоответствиеТаблицИЧислаСтрок[ИмяТаблицы];
	Иначе
		ЧислоСтрок = 0;
	КонецЕсли;
	
	Возврат ЧислоСтрок;	

КонецФункции

Функция ЗначениеРеквизитаСтруктурыРеквизитов(СтруктураСРеквизитами, ИмяРеквизита, ИмяТаблицы = "", НомерСтроки = "")

	Если ПустаяСтрока(ИмяТаблицы) Тогда
		Ключ = ИмяРеквизита;
	Иначе
		Шаблон = "%1__%2__%3"; 
		Ключ = СтрШаблон(Шаблон, ИмяТаблицы, НомерСтроки, ИмяРеквизита);
	КонецЕсли;
	
	Если СтрНайти(Ключ, ".") > 0 Тогда
		Возврат Неопределено;	
	КонецЕсли;
	
	Если СтруктураСРеквизитами.Свойство(Ключ) Тогда
		Возврат СтруктураСРеквизитами[Ключ];
	Иначе
		Возврат Неопределено;	  
	КонецЕсли;

КонецФункции

Функция ЕстьИдентификаторСтрокиВТаблицеСтруктурыРеквизитов(СтруктураСРеквизитами, ИмяТаблицы)
	
	ИмяРеквизита = "ИдентификаторСтроки";
	НомерСтроки = 1;
	Значение = ЗначениеРеквизитаСтруктурыРеквизитов(СтруктураСРеквизитами, ИмяРеквизита, ИмяТаблицы, НомерСтроки);
	Возврат Значение <> Неопределено;	
	
КонецФункции

Функция ЕстьИдентификаторСтрокиРодителяВТаблицеСтруктурыРеквизитов(СтруктураСРеквизитами, ИмяТаблицы)
	
	ИмяРеквизита = "ИдентификаторСтрокиРодителя";
	НомерСтроки = 1;
	Значение = ЗначениеРеквизитаСтруктурыРеквизитов(СтруктураСРеквизитами, ИмяРеквизита, ИмяТаблицы, НомерСтроки);
	Возврат Значение <> Неопределено;	
	
КонецФункции
	
#КонецОбласти

#Область ЗапускПроцедурОформления





// Изменяет оформление кнопок
// 
// Параметры:
//  ОбъектСДанными - Неопределено, Структура - Объект с данными
//  СтруктураДереваИТаблицыКнопок - Произвольный, Структура - Структура дерева и таблицы кнопок:
// * ДеревоСоответствий - ДеревоЗначений - Дерево содержащее правила оформления кнопок
// * ТаблицаСоСсылкамиНаФормы - ТаблицаЗначений - Таблица содержащая информацию по кнопкам для текущей формы
//  АдресВХранилище - Строка - Адрес в хранилище
//  ТипДокумента - Строка - Тип документа
//  СтруктураРеквизитов - Неопределено, Структура - Неопределено для подчиненной формы, Структура для основной
//  ИмяКнопки - Неопределено, Строка - Имя кнопки, если оформляются все кнопки передается Неопределено
//  ИдентификаторСтроки - Неопределено, Строка - Идентификатор строки, если оформляются все строки - Неопределено
Процедура ИзменитьОформлениеКнопок(Знач ОбъектСДанными,
	СтруктураДереваИТаблицыКнопок,
	АдресВХранилище,
	ТипДокумента,
	Знач СтруктураРеквизитов,
	ИмяКнопки = Неопределено,
	ИдентификаторСтроки = Неопределено)
	
	ДеревоСоответствий = СтруктураДереваИТаблицыКнопок.ДеревоСоответствий;
	ТаблицаСоСсылкамиНаФормы = СтруктураДереваИТаблицыКнопок.ТаблицаСоСсылкамиНаФормы;
	
	Если ЗначениеЗаполнено(ИмяКнопки) Тогда
		Если ИмяКнопки = "ЗаполнитьТитулПеревозчикаПогрузкаКонтейнера"
			Или ИмяКнопки = "ЗаполнитьТитулПеревозчикаВыгрузкаКонтейнера" Тогда
			ИмяКнопкиДляПоиска = "ЗаполнитьТитулПеревозчикаСдачаКонтейнера";
			СтрокаТаблицы = ТаблицаСоСсылкамиНаФормы.Найти(ИмяКнопкиДляПоиска, "ПутьКЭлементуФормы");
			Если СтрокаТаблицы = Неопределено Тогда
				СтрокаТаблицы = ТаблицаСоСсылкамиНаФормы.Найти("ЗаполнитьДопТитулПеревозчикаСдачаКонтейнера", "ПутьКЭлементуФормы"); 
			КонецЕсли;
			СтрокаТаблицы.ЭлементыСхемы = УзлыСхемыФормыСопроводительнойВедомости("ТитулПеревозчикаПогрузкаКонтейнера");
			
		ИначеЕсли ИмяКнопки = "ЗаполнитьДопТитулПеревозчикаПогрузкаКонтейнера"
			Или ИмяКнопки = "ЗаполнитьДопТитулПеревозчикаВыгрузкаКонтейнера" Тогда
			ИмяКнопкиДляПоиска = "ЗаполнитьДопТитулПеревозчикаСдачаКонтейнера";
			СтрокаТаблицы = ТаблицаСоСсылкамиНаФормы.Найти(ИмяКнопкиДляПоиска, "ПутьКЭлементуФормы");
			СтрокаТаблицы.ЭлементыСхемы = УзлыСхемыФормыСопроводительнойВедомости("ТитулПеревозчикаПогрузкаКонтейнера");
		
		Иначе
			СтрокаТаблицы = ТаблицаСоСсылкамиНаФормы.Найти(ИмяКнопки, "ПутьКЭлементуФормы"); 
		КонецЕсли;
		
		МассивСоСсылкойНаФорму = Новый Массив;
		
		Если СтрокаТаблицы = Неопределено Тогда
			СтруктураДереваИТаблицыКнопок.Вставить("МассивОформления", Новый Массив);
			ПоместитьСтруктуруРезультатВХранилище(АдресВХранилище, СтруктураДереваИТаблицыКнопок);
			Возврат;
		КонецЕсли;
		МассивСоСсылкойНаФорму.Добавить(СтрокаТаблицы);
		СсылкиНаФормы = МассивСоСсылкойНаФорму;
	Иначе
		СсылкиНаФормы = ТаблицаСоСсылкамиНаФормы;	
	КонецЕсли; 
	
	МассивОформления = СоздатьОформлениеКнопок(ДеревоСоответствий, СсылкиНаФормы,
		ОбъектСДанными, ТипДокумента, СтруктураРеквизитов, ИдентификаторСтроки);
		
	СтруктураДереваИТаблицыКнопок.Вставить("МассивОформления", МассивОформления);
	ПоместитьСтруктуруРезультатВХранилище(АдресВХранилище, СтруктураДереваИТаблицыКнопок);	
		
КонецПроцедуры

Процедура ИзменитьОформлениеОбязательныхПолей(форма)
	
	ДеревоСоответствий = ПолучитьДеревоСоответствийИзХранилища(Форма.АдресДереваСоответствийИТаблицыКнопок);
	
	Если ДеревоСоответствий = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТипДокумента = ОбменСГИСЭПДКлиентСервер.ТипДокументаПоИмениФормы(Форма.ИмяФормы);
	
	ЭтоОсновнаяФорма = ЭтоОсновнаяФорма(Форма);
	
	Если ЭтоОсновнаяФорма Тогда
		ТекущаяСтраница = Форма.Элементы.Страницы.ТекущаяСтраница.Имя;
		Префикс = ПолучитьПрефиксТитулаПоСтраницеОсновнойФормы(ТекущаяСтраница, ТипДокумента);
	Иначе
		Префикс = ПрефиксТитулаФормы(Форма);
	КонецЕсли;
	
	Если ПустаяСтрока(Префикс) Тогда
		Возврат;
	КонецЕсли;
	
	МассивУзловСхемы = УзлыСхемыПоНаименованиюФормы(Форма.ИмяФормы, ТипДокумента);
	УзелСхемы = НайтиОбщийУзелДляМассиваУзлов(МассивУзловСхемы);
	
	СтрокаДерева = СтрокаДереваПоЭлементуСхемы(ДеревоСоответствий, УзелСхемы);
	Если СтрокаДерева <> Неопределено Тогда   
		СоздатьОформлениеОбязательныхЭлементов(Форма, СтрокаДерева, ДеревоСоответствий);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область АлгоритмыОформлениеОбязательныхРеквизитов

// Создает дерево для оформления полей и кнопок, запускает оформление кнопок
// 
// Параметры:
//  ИмяФормы - Строка - Имя формы
//  АдресДереваСоответствийИТаблицыКнопок - Строка - Адрес дерева соответствий и таблицы кнопок
//  ТекущаяСтраница - Строка - Текущая страница
//  ТаблицаСоСсылкамиНаФормы - ТаблицаЗначений - Таблица содержащая информацию по кнопкам для текущей формы
//  СоответствиеНаличияПолей - Соответствие из КлючИЗначение - поля на форме, которые необходимо оформить
//  ОбъектСДанными - Структура - Объект с данными формы
//  СтруктураРеквизитов - Неопределено, Структура - Неопределено для подчиненной формы, Структура для основной
Процедура СоздатьДеревоСоответствийИОформитьКнопки(ИмяФормы,
	АдресДереваСоответствийИТаблицыКнопок,
	ТекущаяСтраница,
	ТаблицаСоСсылкамиНаФормы,
	СоответствиеНаличияПолей,
	ОбъектСДанными,
	СтруктураРеквизитов)
	
	ТипДокумента = ОбменСГИСЭПДКлиентСервер.ТипДокументаПоИмениФормы(ИмяФормы);
	
	ЭтоОсновнаяФорма = ЭтоОсновнаяФорма(ИмяФормы);
	
	Если ЭтоОсновнаяФорма Тогда
		Префикс = ПолучитьПрефиксТитулаПоСтраницеОсновнойФормы(ТекущаяСтраница, ТипДокумента);
	Иначе
		СтруктураПолученияПрефикса = Новый Структура("ИмяФормы", ИмяФормы);
		Префикс = ПрефиксТитулаФормы(СтруктураПолученияПрефикса);
	КонецЕсли;
	ЭтоДопТитул = СтрНачинаетсяС(Префикс, ПрефиксДополнительныхТитулов());
	
	Если ПустаяСтрока(Префикс) Тогда
		Если ИмяФормы = "Документ.ЭлектронныйЗаказНаряд.Форма.Водитель"
			И ТипДокумента = ТипДокументаЗаказНаряд() Тогда
			Префикс = "ТитулФрахтовщика";
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	МассивУзловСхемы = УзлыСхемыПоНаименованиюФормы(ИмяФормы, ТипДокумента);
	УзелСхемы = НайтиОбщийУзелДляМассиваУзлов(МассивУзловСхемы);
	
	Шаблон = "%1%2";
	Если ЭтоДопТитул Тогда
		ПрефиксОбластиСтруктур = Сред(Префикс, 4);
	Иначе
		ПрефиксОбластиСтруктур = Префикс;
	КонецЕсли;
	ПризнакОбластиСтруктур = ПризнакОбластиСтруктур();
	ИмяОбластиСтруктур = СтрШаблон(Шаблон, ПрефиксОбластиСтруктур, ПризнакОбластиСтруктур); 
	
	МакетСоответствийИменРеквизитов = МакетСоответствийИменРеквизитов(ТипДокумента);
	
	ДеревоСоответствий = НовоеДеревоСоответствий();
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Область", ИмяОбластиСтруктур);
	СтруктураПараметров.Вставить("ОбрабатываемыйУзелСхемы", УзелСхемы);
	СтруктураПараметров.Вставить("ИмяФормы", ИмяФормы);
	СтруктураПараметров.Вставить("ДеревоСоответствий", ДеревоСоответствий);
	СтруктураПараметров.Вставить("ФормируютсяСтруктуры", Истина);
	СтруктураПараметров.Вставить("ТипДокумента", ТипДокумента);
	СтруктураПараметров.Вставить("ДобавитьПрефиксДопРеквизитамПроверки", ЭтоДопТитул);
	СтруктураПараметров.Вставить("СоответствиеНаличияПолей", СоответствиеНаличияПолей);
	СтруктураПараметров.Вставить("МакетСоответствийИменРеквизитов", МакетСоответствийИменРеквизитов);
		
	ДополнитьДеревоСоответствий(СтруктураПараметров);
	
	СтруктураПараметров.Область = Префикс;
	СтруктураПараметров.ФормируютсяСтруктуры = Ложь;
	СтруктураПараметров.ДобавитьПрефиксДопРеквизитамПроверки = Ложь;
		
	ДополнитьДеревоСоответствий(СтруктураПараметров);
	
	СтруктураДереваИТаблицыКнопок = Новый Структура;
	СтруктураДереваИТаблицыКнопок.Вставить("ДеревоСоответствий", ДеревоСоответствий);
	СтруктураДереваИТаблицыКнопок.Вставить("ТаблицаСоСсылкамиНаФормы", ТаблицаСоСсылкамиНаФормы);
	
	Попытка
		ИзменитьОформлениеКнопок(ОбъектСДанными,
			СтруктураДереваИТаблицыКнопок,
			АдресДереваСоответствийИТаблицыКнопок,
			ТипДокумента,
			СтруктураРеквизитов);
	Исключение
		СтруктураДереваИТаблицыКнопок.Вставить("МассивОформления", Неопределено);
		ПоместитьСтруктуруРезультатВХранилище(АдресДереваСоответствийИТаблицыКнопок, СтруктураДереваИТаблицыКнопок);
	КонецПопытки;
		
КонецПроцедуры

Функция ПолучитьДеревоСоответствийИзХранилища(АдресВХранилище)
	
	Структура = ПолучитьИзВременногоХранилища(АдресВХранилище);
	Если Структура = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат ПолучитьИзВременногоХранилища(АдресВХранилище).ДеревоСоответствий;
	КонецЕсли;
	
КонецФункции

Функция ПоместитьСтруктуруРезультатВХранилище(АдресДереваСоответствийИТаблицыКнопок, СтруктураРезультата)
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураРезультата, АдресДереваСоответствийИТаблицыКнопок); 
	
КонецФункции

Функция ПолучитьТаблицуКнопокОткрытияФорм(Форма, ТипДокумента)

	ПрефиксЭлементаСоСсылкойНаФорму = ПрефиксЭлементаСоСсылкойНаФорму();
	ТаблицаКнопокОткрытияФормы = НоваяТаблицаКнопокОткрытияФормы();	
	
	Если ЭтоОсновнаяФорма(Форма) Тогда
		ЭлементСодержащийКнопки = Форма.Элементы.Страницы.ТекущаяСтраница;
	Иначе
		ЭлементСодержащийКнопки = Неопределено;
	КонецЕсли;
	
	Для Каждого ЭлементФормы Из Форма.Элементы Цикл
		
		Если Не (СтрНачинаетсяС(ЭлементФормы.Имя, ПрефиксЭлементаСоСсылкойНаФорму)
			И (ТипЗнч(ЭлементФормы) = Тип("ПолеФормы") 
			Или ТипЗнч(ЭлементФормы) = Тип("КнопкаФормы"))) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ЭтоПолеФормы = ТипЗнч(ЭлементФормы) = Тип("ПолеФормы");
		ПутьКЭлементуФормы = ЭлементФормы.Имя;
		
		Если ПутьКЭлементуФормы = "ЗаполнитьТитулПеревозчикаСдачаКонтейнера"
			И ТипДокумента = ТипДокументаСопроводительнаяВедомость() 
			И ЭтоОсновнаяФорма(Форма) Тогда
				
			Если Форма.Объект.ВидОперации = 0
				Или (Форма.Объект.ВидОперации = 1 
				И Форма.Элементы.Страницы.ТекущаяСтраница = Форма.Элементы.СтраницаДопСодСВИнфПрв) Тогда
				ИмяОткрываемойФормы =  "ТитулПеревозчикаВыгрузкаКонтейнера";
			Иначе
				ИмяОткрываемойФормы =  "ТитулПеревозчикаПогрузкаКонтейнера";
			КонецЕсли;
			
		ИначеЕсли ПутьКЭлементуФормы = "ЗаполнитьДопТитулПеревозчикаСдачаКонтейнера"
			И ТипДокумента = ТипДокументаСопроводительнаяВедомость() 
			И ЭтоОсновнаяФорма(Форма) Тогда
				
			Если Форма.Объект.ВидОперации = 0
				Или (Форма.Объект.ВидОперации = 1 
				И Форма.Элементы.Страницы.ТекущаяСтраница = Форма.Элементы.СтраницаДопСодСВИнфПрв) Тогда
				ИмяОткрываемойФормы =  "ТитулПеревозчикаВыгрузкаКонтейнера";
			Иначе
				ИмяОткрываемойФормы =  "ТитулПеревозчикаПогрузкаКонтейнера";
			КонецЕсли;
			
		Иначе
			ИмяОткрываемойФормы = СтрЗаменить(ПутьКЭлементуФормы, ПрефиксЭлементаСоСсылкойНаФорму, "");
			ПрефиксДополнительныхТитулов = ПрефиксДополнительныхТитулов();
			Если СтрНачинаетсяС(ИмяОткрываемойФормы, ПрефиксДополнительныхТитулов) Тогда
				ИмяОткрываемойФормы = Сред(ИмяОткрываемойФормы, СтрДлина(ПрефиксДополнительныхТитулов) + 1);	
			КонецЕсли;
		КонецЕсли;
				
		МассивЭлементовСхемы = УзлыСхемыПоНаименованиюФормы(ИмяОткрываемойФормы, ТипДокумента);
		
		Если ЭлементСодержащийКнопки <> Неопределено Тогда
			КнопкаОтображаетсяПользователю = Ложь;
			РодительЭлемента = ЭлементФормы.Родитель;
			Пока РодительЭлемента <> Форма Цикл
				Если РодительЭлемента = ЭлементСодержащийКнопки Тогда
					КнопкаОтображаетсяПользователю = Истина;
					Прервать;	
				КонецЕсли;
				РодительЭлемента = РодительЭлемента.Родитель;	
			КонецЦикла;
			
			Если Не КнопкаОтображаетсяПользователю Тогда
				Продолжить;
			КонецЕсли;			
		КонецЕсли;
		
		Если ЭтоПолеФормы Тогда
			Если ЭтоОсновнаяФорма(Форма) Тогда
				ПутьКДанным = СтрЗаменить(ЭлементФормы.ПутьКДанным, "Объект.", "");
			Иначе
				ПутьКДанным = ЭлементФормы.ПутьКДанным;	
			КонецЕсли;
			СтруктураРеквизитаИТабЧасти = СтруктураРеквизитаИТабЧасти(ПутьКДанным);
			Реквизит = СтруктураРеквизитаИТабЧасти.Реквизит; 
			ТабЧасть = СтруктураРеквизитаИТабЧасти.ТабличнаяЧасть;
			ЭтоРеквизитТабЧасти = СтруктураРеквизитаИТабЧасти.ЕстьТабличнаяЧасть;
			Если ЭтоРеквизитТабЧасти Тогда
				ПутьПроверкиУсловногоОформления = ПутьПроверкиУсловногоОформления(ЭлементФормы.ПутьКДанным);
			Иначе
				ПутьПроверкиУсловногоОформления = "";
			КонецЕсли;
		Иначе 
			Реквизит = ""; 
			ТабЧасть = "";
			ЭтоРеквизитТабЧасти = Ложь;
			ПутьПроверкиУсловногоОформления = "";
		КонецЕсли;
		
		НоваяСтрока = ТаблицаКнопокОткрытияФормы.Добавить();
		НоваяСтрока.ЭлементыСхемы = МассивЭлементовСхемы;
		НоваяСтрока.ПутьКЭлементуФормы = ПутьКЭлементуФормы;
		НоваяСтрока.ЭтоРеквизитТабЧасти = ЭтоРеквизитТабЧасти;
		НоваяСтрока.Реквизит = Реквизит;
		НоваяСтрока.ТабЧасть = ТабЧасть;
		НоваяСтрока.ПутьПроверкиУсловногоОформления = ПутьПроверкиУсловногоОформления;

	КонецЦикла;
	
	Возврат ТаблицаКнопокОткрытияФормы;
	
КонецФункции

Функция ПолучитьСоответствиеНаличияПолейФормы(Форма, 
	СоответствиеНаличияПолей = Неопределено,
	КонтейнерЭлементов = Неопределено)
	
	Если СоответствиеНаличияПолей = Неопределено Тогда
		СоответствиеНаличияПолей = Новый Соответствие;
		
		Если ЭтоОсновнаяФорма(Форма) Тогда
			КонтейнерЭлементов = Форма.Элементы.Страницы.ТекущаяСтраница.ПодчиненныеЭлементы;
		Иначе
			КонтейнерЭлементов = Форма.Элементы;	
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ЭлементФормы Из КонтейнерЭлементов Цикл
		Если ТипЗнч(ЭлементФормы) = Тип("ГруппаФормы")
			Или ТипЗнч(ЭлементФормы) = Тип("ТаблицаФормы") Тогда
			ПолучитьСоответствиеНаличияПолейФормы(Форма, СоответствиеНаличияПолей, ЭлементФормы.ПодчиненныеЭлементы);
		КонецЕсли;
		
		Если (ТипЗнч(ЭлементФормы) = Тип("ПолеФормы")
			Или ТипЗнч(ЭлементФормы) = Тип("ТаблицаФормы"))
			И Не ПустаяСтрока(ЭлементФормы.ПутьКДанным) Тогда
			СоответствиеНаличияПолей.Вставить(ЭлементФормы.ПутьКДанным, ЭлементФормы.Имя);
		КонецЕсли;	
	КонецЦикла;

	Возврат СоответствиеНаличияПолей;

КонецФункции

Процедура СоздатьРеквизитыФормыДляПроверкиОбязательныхПолей(ТаблицаСоСсылкамиНаФормы, Форма)

	СтруктураПроверки = Новый Структура("НачальноеОформлениеВыполнено");
	ЗаполнитьЗначенияСвойств(СтруктураПроверки, Форма);
	Если СтруктураПроверки.НачальноеОформлениеВыполнено <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивРеквизитов = Новый Массив;
	
	КЧ = Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный);
	ОписаниеТиповЧислоОдинРазряд = Новый ОписаниеТипов("Число", , , КЧ);
	
	Для Каждого СтрокаТаблицы Из ТаблицаСоСсылкамиНаФормы Цикл
		
		Если Не СтрокаТаблицы.ЭтоРеквизитТабЧасти Тогда
			Продолжить;
		КонецЕсли;
		
		ПутьПроверки = СтрокаТаблицы.ПутьПроверкиУсловногоОформления;
		
		ПоложениеТочки = СтрНайти(ПутьПроверки, ".", НаправлениеПоиска.СКонца);
		Реквизит = Сред(ПутьПроверки, ПоложениеТочки + 1); 
		ПутьПроверки = Лев(ПутьПроверки, ПоложениеТочки - 1); 
		
		Реквизит = Новый РеквизитФормы(Реквизит, ОписаниеТиповЧислоОдинРазряд, ПутьПроверки);
		
		МассивРеквизитов.Добавить(Реквизит);
			
	КонецЦикла;
	
	МассивРеквизитов.Добавить(Новый РеквизитФормы("АдресДереваСоответствийИТаблицыКнопок",
		Новый ОписаниеТипов("Строка")));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ПараметрыЗаданияНачальногоОформления",
		Новый ОписаниеТипов("Неопределено")));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("НачальноеОформлениеВыполнено",
		Новый ОписаниеТипов("Булево")));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ТребуетсяДополнительноеОформлениеКнопок",
		Новый ОписаниеТипов("Булево")));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("СтруктураДополнительногоОформленияКнопок",
		Новый ОписаниеТипов("Неопределено")));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ЦветТекстаКнопки",
		Новый ОписаниеТипов("Цвет")));
	
	Форма.ИзменитьРеквизиты(МассивРеквизитов);
		
КонецПроцедуры

Процедура ДобавитьОформлениеОбязательностиДляКнопокВТабЧастях(ТаблицаСоСсылкамиНаФормы, Форма)
	
	Для Каждого СтрокаТаблицы Из ТаблицаСоСсылкамиНаФормы Цикл
	
		Если Не СтрокаТаблицы.ЭтоРеквизитТабЧасти Тогда
			Продолжить;
		КонецЕсли;
		
		ПутьКЭлементуФормы = СтрокаТаблицы.ПутьКЭлементуФормы;
		ПроверяемоеПоле = СтрокаТаблицы.ПутьПроверкиУсловногоОформления;
		
		Для ЗначениеОформления = 0 По 2 Цикл 
		
			ДобавитьЭлементУсловногоОформления(Форма, ПутьКЭлементуФормы, ПроверяемоеПоле, ЗначениеОформления);
			
		КонецЦикла;
		 
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьОформлениеОбязательныхЭлементов(Форма, СтрокаДерева, ДеревоСоответствий)

	МассивСтрокОбязательныхПолей = ДеревоСоответствий.Строки.НайтиСтроки(Новый Структура("НужноОтражатьОтметку", Истина), Истина);
	
	Для Каждого СтрокаДерева Из МассивСтрокОбязательныхПолей Цикл
		
		СоздатьОформлениеОбязательногоЭлементаФормы(Форма, СтрокаДерева);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьОформлениеОбязательногоЭлементаФормы(Форма, СтрокаДерева)
	
	ЕстьУсловноеОформлениеЭлемента = Ложь;
	ДобавитьГруппуИ = Истина;
	
	ОбщаяГруппаОтбораИ = Неопределено;
	
	// Добавление условия на реквизит
	Если Не СтрокаДерева.СтруктураХраненияРеквизита.ЭтоТабЧасть Тогда
		ДобавитьЭлементОтменыОтметки = Истина;
		НовыйЭлементОформления = НовыйЭлементОформления(Форма,
			СтрокаДерева.ПутьКЭлементуФормы, ДобавитьЭлементОтменыОтметки, СтрокаДерева.СтруктураХраненияРеквизита);
		ОбщаяГруппаОтбораИ = НоваяГруппаОтбораУсловногоОформления(НовыйЭлементОформления.Отбор, ДобавитьГруппуИ);
			
		ПутьКДанным = ПолучитьПутьКДаннымПоСтруктуре(СтрокаДерева.СтруктураХраненияРеквизита, Форма);
		ЭлементОтбора = ОбщаяГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));	
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным); 
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		
		ЕстьУсловноеОформлениеЭлемента = Истина;
	КонецЕсли;
	
	СтруктураПроверкиОбязательности = СтрокаДерева.СтруктураПроверкиОбязательности;
	ЕстьПроверкаОбязательности = ЕстьПроверкаОбязательности(СтруктураПроверкиОбязательности);
	Если ЕстьПроверкаОбязательности Тогда
		Если ЕстьУсловноеОформлениеЭлемента = Ложь Тогда
			НовыйЭлементОформления = НовыйЭлементОформления(Форма, СтрокаДерева.ПутьКЭлементуФормы);
			ОбщаяГруппаОтбораИ = НоваяГруппаОтбораУсловногоОформления(НовыйЭлементОформления.Отбор, ДобавитьГруппуИ);
			ЕстьУсловноеОформлениеЭлемента = Истина;
		КонецЕсли;
		ДобавитьЭлементыОтбораУсловийОбязательности(Форма, ОбщаяГруппаОтбораИ, СтруктураПроверкиОбязательности);
	КонецЕсли;
	
	// Определение необходимости формирования проверки на отдельные узлы
	ТекущийРодитель = СтрокаДерева.Родитель;
	НужноДелатьПроверкуНаОтдельныеУзлы = Ложь;
	Пока ТекущийРодитель <> Неопределено Цикл
		
		СтруктураПроверкиОбязательности = ТекущийРодитель.СтруктураПроверкиОбязательности;
		ЕстьПроверкаОбязательности = ЕстьПроверкаОбязательности(СтруктураПроверкиОбязательности);
		Обязательный = ТекущийРодитель.Обязательный;
		
		Если ЕстьПроверкаОбязательности
			Или Не Обязательный Тогда
			НужноДелатьПроверкуНаОтдельныеУзлы = Истина;
			Прервать;
		КонецЕсли;
		
		ТекущийРодитель = ТекущийРодитель.Родитель;
		
	КонецЦикла;		
	
	// В том случае, если все узлы связанные с формой обязательные, дальнейшие условия не формируются
	Если Не НужноДелатьПроверкуНаОтдельныеУзлы Тогда
		Если Не ЕстьУсловноеОформлениеЭлемента Тогда
			Форма.Элементы[СтрокаДерева.ПутьКЭлементуФормы].АвтоОтметкаНезаполненного = Истина;
		КонецЕсли;
		Возврат;
	Иначе
		// Для таб. части если нет условий оформления, выделяем ее саму 
		Если Не ЕстьУсловноеОформлениеЭлемента 
			И СтрокаДерева.СтруктураХраненияРеквизита.ЭтоТабЧасть Тогда
			Форма.Элементы[СтрокаДерева.ПутьКЭлементуФормы].АвтоОтметкаНезаполненного = Истина;	
		КонецЕсли; 
	КонецЕсли;
	
	Если Не СтрокаДерева.СтруктураХраненияРеквизита.ЭтоТабЧасть Тогда
		ГруппаОтбора = НоваяГруппаОтбораУсловногоОформления(ОбщаяГруппаОтбораИ, Не ДобавитьГруппуИ);
	Иначе
		Возврат;
	КонецЕсли;	
	
	// Устанавливается отбор условного оформления для всех реквизитов
	// от которых может зависеть оформление элемента формы
	ТекущийРодитель = СтрокаДерева.Родитель;
	СтрокаДереваДляИсключения = СтрокаДерева;
	МассивСтрокСУсловиями = Новый Массив;
	Пока ТекущийРодитель <> Неопределено Цикл
		
		СтруктураПроверкиОбязательности = ТекущийРодитель.СтруктураПроверкиОбязательности;
		ЕстьПроверкаОбязательности = ЕстьПроверкаОбязательности(СтруктураПроверкиОбязательности);
		Обязательный = ТекущийРодитель.Обязательный;
		
		ГруппаОтбораДляУзла = НоваяГруппаОтбораУсловногоОформления(ГруппаОтбора, ДобавитьГруппуИ);
		Если ТекущийРодитель.СтруктураХраненияРеквизита <> Неопределено
			И ТекущийРодитель.СтруктураХраненияРеквизита.ЭтоТабЧасть Тогда
			ИмяТаблицы = ТекущийРодитель.СтруктураХраненияРеквизита.Реквизит;
			ДобавитьЭлементыОтбораПроверкиЗаполненияТЧ(Форма, ИмяТаблицы, ГруппаОтбораДляУзла);
			Прервать;
		Иначе
			ДобавитьЭлементыОтбораДляУзла(Форма, ГруппаОтбораДляУзла, ТекущийРодитель, СтрокаДереваДляИсключения, Не ДобавитьГруппуИ);
		КонецЕсли;
		Для Каждого СтрМассив Из МассивСтрокСУсловиями Цикл
			ДобавитьЭлементыОтбораУсловийОбязательности(Форма, ГруппаОтбораДляУзла, СтрМассив.СтруктураПроверкиОбязательности);
		КонецЦикла;
		
		Если ЕстьПроверкаОбязательности Тогда
			МассивСтрокСУсловиями.Добавить(ТекущийРодитель);
		ИначеЕсли Не Обязательный Тогда
			Прервать;	
		КонецЕсли;
		
		СтрокаДереваДляИсключения = ТекущийРодитель;
		ТекущийРодитель = ТекущийРодитель.Родитель;
		
	КонецЦикла;
	
КонецПроцедуры

Функция НовыйЭлементОформления(Форма,
	ПутьКЭлементуФормы,
	ДобавитьЭлементОтменыОтметки = Ложь,
	СтруктураХраненияРеквизита = Неопределено)
	
	// Необходимо создать два элемента один с отметкой второй без, в ином случае после серверного вызова
	// отметка пропадать не будет
	Если ДобавитьЭлементОтменыОтметки Тогда
		НовыйЭлементОформленияБезОтметки = Форма.УсловноеОформление.Элементы.Добавить();	
		НовыйЭлементОформленияБезОтметки.Представление = ПутьКЭлементуФормы;
		НовыйЭлементОформленияБезОтметки.РежимОтображения = 
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		
		НовыйЭлементОформленияБезОтметки.Оформление.УстановитьЗначениеПараметра(
			Новый ПараметрКомпоновкиДанных("ОтметкаНезаполненного"), Ложь);
		
		ОформляемоеПолеБезОтметки = НовыйЭлементОформленияБезОтметки.Поля.Элементы.Добавить();
		ОформляемоеПолеБезОтметки.Поле = Новый ПолеКомпоновкиДанных(ПутьКЭлементуФормы);
		ОформляемоеПолеБезОтметки.Использование = Истина;
		
		ПутьКДанным = ПолучитьПутьКДаннымПоСтруктуре(СтруктураХраненияРеквизита, Форма);
		
		ЭлементОтбора = НовыйЭлементОформленияБезОтметки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным); 
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	КонецЕсли;
	
	НовыйЭлементОформления = Форма.УсловноеОформление.Элементы.Добавить();	
	НовыйЭлементОформления.Представление = ПутьКЭлементуФормы;
	НовыйЭлементОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра(
		Новый ПараметрКомпоновкиДанных("ОтметкаНезаполненного"), Истина);
	
	ОформляемоеПоле = НовыйЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ПутьКЭлементуФормы);
	ОформляемоеПоле.Использование = Истина;
	
	Возврат НовыйЭлементОформления;
	
КонецФункции

Функция НоваяГруппаОтбораУсловногоОформления(Отбор, ДобавитьГруппуИ)
	
	ГруппаОтбора = Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	Если ДобавитьГруппуИ Тогда 
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	Иначе
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;	
	КонецЕсли;
	
	Возврат ГруппаОтбора;
	
КонецФункции

Процедура ДобавитьЭлементыОтбораДляУзла(Форма, ГруппаОтбора, СтрокаДереваCУзлом, СтрокаДереваДляИсключения, ДобавитьГруппуИ)
	
	ЭтоОсновнаяФорма = ЭтоОсновнаяФорма(Форма);
	
	Если СтрокаДереваCУзлом = Неопределено
		Или СтрокаДереваCУзлом.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если (ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ И ДобавитьГруппуИ)
		Или (ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли И Не ДобавитьГруппуИ) Тогда
		
		Группа = ГруппаОтбора;
	Иначе
		Группа = НоваяГруппаОтбораУсловногоОформления(ГруппаОтбора, ДобавитьГруппуИ);
	КонецЕсли;

	Для Каждого ПодчиненнаяСтрокаДерева Из СтрокаДереваCУзлом.Строки Цикл
		
		Если ПодчиненнаяСтрокаДерева = СтрокаДереваДляИсключения Тогда
			
			Продолжить;
			
		ИначеЕсли ПодчиненнаяСтрокаДерева.ЭтоРеквизит Тогда
			
			ПутьКДанным = ПолучитьПутьКДаннымПоСтруктуре(ПодчиненнаяСтрокаДерева.СтруктураХраненияРеквизита, Форма);
			
			Если ПодчиненнаяСтрокаДерева.СтруктураХраненияРеквизита.ЭтоТабЧасть Тогда
				Если ЭтоОсновнаяФорма Тогда
					Продолжить;
				Иначе
					ДобавитьЭлементыОтбораПроверкиЗаполненияТЧ(Форма, ПутьКДанным, Группа);	
				КонецЕсли;
			Иначе
				РеквизитЕстьВДанныхФормы = РеквизитЕстьВДанныхФормы(Форма, ПутьКДанным);
				Если Не РеквизитЕстьВДанныхФормы Тогда
					Продолжить;
				КонецЕсли;
				ДобавитьЭлементОтбораПроверкиЗаполненностиПоля(Группа, ПутьКДанным);	
			КонецЕсли;
			
		ИначеЕсли ПодчиненнаяСтрокаДерева.Строки.Количество() > 0 Тогда
			
			ДобавитьЭлементыОтбораДляУзла(Форма, Группа, ПодчиненнаяСтрокаДерева, Неопределено, ДобавитьГруппуИ);
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ДобавитьЭлементыОтбораПроверкиЗаполненияТЧ(Форма, ИмяТаблицы, ГруппаОтбора)
	
	Если СтрНайти(ИмяТаблицы, ".") > 0 Тогда
		МассивЧастей = СтрРазделить(ИмяТаблицы, ".");
		Таблица = Форма[МассивЧастей[0]][МассивЧастей[1]].Выгрузить();
	Иначе
		Таблица = ДанныеФормыВЗначение(Форма[ИмяТаблицы], Тип("ТаблицаЗначений"));
	КонецЕсли;
	
	ПерваяКолонка = Таблица.Колонки[0].Имя;
	
	Шаблон = "%1.%2";
	ПутьКДанным = СтрШаблон(Шаблон, ИмяТаблицы, ПерваяКолонка);
	
	НоваяГруппаИли = НоваяГруппаОтбораУсловногоОформления(ГруппаОтбора, Ложь);
	
	ЭлементОтбора = НоваяГруппаИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));	
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным); 
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементОтбора = НоваяГруппаИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));	
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным); 
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Таблица.Колонки[0].ТипЗначения.ПривестиЗначение();
	
КонецПроцедуры

Процедура ДобавитьЭлементыОтбораУсловийОбязательности(Форма, ГруппаОтбора, СтруктураПроверки)
	
	Если ТипЗнч(СтруктураПроверки) = Тип("Массив") Тогда
		Для Каждого СтрокаМассива Из СтруктураПроверки Цикл
			ДобавитьЭлементОтбораУсловногоОформления(Форма, ГруппаОтбора.Элементы, СтрокаМассива);	
		КонецЦикла;
	Иначе
		ДобавитьЭлементОтбораУсловногоОформления(Форма, ГруппаОтбора.Элементы, СтруктураПроверки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьЭлементОтбораПроверкиЗаполненностиПоля(ГруппаОтбора, ПутьКДанным)
	
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));	
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным); 
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
КонецПроцедуры

Функция РеквизитЕстьВДанныхФормы(Форма, ПутьКДанным)
	
	Если Не ЭтоОсновнаяФорма(Форма) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтрНайти(ПутьКДанным, ".") > 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураПроверки = Новый Структура(ПутьКДанным);
	ЗаполнитьЗначенияСвойств(СтруктураПроверки, Форма);
	Если СтруктураПроверки[ПутьКДанным] = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция НоваяСтруктураОформленияКнопки()
	
	СтруктураОформления = Новый Структура;
	СтруктураОформления.Вставить("ПутьКЭлементуФормы");
	СтруктураОформления.Вставить("РезультатОбработкиЗаполнения");
	СтруктураОформления.Вставить("ЭтоРеквизитТабЧасти");
	СтруктураОформления.Вставить("ТабЧасть");
	СтруктураОформления.Вставить("ИндексСтрокиТабЧасти");
	СтруктураОформления.Вставить("РеквизитУстановкиПризнакаПроверкиТабЧасти");
	СтруктураОформления.Вставить("РеквизитТабчасти");
	СтруктураОформления.Вставить("ЗначениеОформленияТабчасти");
	СтруктураОформления.Вставить("ТекстКнопки");
	
	Возврат СтруктураОформления;
		
КонецФункции

Функция СоздатьОформлениеКнопок(ДеревоСоответствий,
	ТаблицаСоСсылкамиНаФормы,
	ОбъектСДаннымиДокумента,
	ТипДокумента,
	Знач СтруктураРеквизитов,
	ИдентификаторСтрокиДляОтбора)

	МассивОформления = Новый Массив;

	ДополнитьСтруктуруРеквизитовИнформациейОТаблицах(СтруктураРеквизитов);
		
	Для Каждого СтрокаТаблицы Из ТаблицаСоСсылкамиНаФормы Цикл

		Если СтрокаТаблицы.ЭтоРеквизитТабЧасти Тогда

			ТабЧасть = СтрокаТаблицы.ТабЧасть;
			
			Если СтрНайти(ТабЧасть, "[") Тогда
				ЧастиИмени = СтрРазделить(ТабЧасть, "[");
				ТабЧасть = ЧастиИмени[0];
			КонецЕсли;

			СтруктураРеквизитаИТабЧасти = СтруктураРеквизитаИТабЧасти(СтрокаТаблицы.ПутьПроверкиУсловногоОформления);
			РеквизитУстановкиПризнакаПроверки = СтруктураРеквизитаИТабЧасти.Реквизит;
			
			ЧислоСтрок = ОбъектСДаннымиДокумента[ТабЧасть].Количество();
			Если ЧислоСтрок = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ЕстьИдентификатор = ЕстьРеквизитВТаблице(ОбъектСДаннымиДокумента, ТабЧасть, "ИдентификаторСтроки");
			
			Для Каждого Строка Из ОбъектСДаннымиДокумента[ТабЧасть] Цикл
	
				Индекс = ОбъектСДаннымиДокумента[ТабЧасть].Индекс(Строка);
				
				Если ЕстьИдентификатор Тогда
					ИдентификаторСтроки = Строка["ИдентификаторСтроки"];
					Если ЗначениеЗаполнено(ИдентификаторСтрокиДляОтбора)
						И ИдентификаторСтрокиДляОтбора <> ИдентификаторСтроки Тогда
						Продолжить;
					КонецЕсли;
				Иначе
					ИдентификаторСтроки = "";
				КонецЕсли;
					
				Результат = НовыйРезультатОбработкиЗаполнения();
				Результат.ОбязательныеЭлементыЗаполнены = Истина;
				Для Каждого ЭлементСхемы Из СтрокаТаблицы.ЭлементыСхемы Цикл
					СтрокаДерева = ДеревоСоответствий.Строки.Найти(ЭлементСхемы, "ЭлементСхемы", Истина);
					Если СтрокаДерева = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					РезультатПоОдномуУзлу = ПроверитьПодчиненныеОбязательныеРеквизиты(ДеревоСоответствий, СтрокаДерева,
						ОбъектСДаннымиДокумента, ИдентификаторСтроки, Индекс, ТабЧасть, СтруктураРеквизитов);

					Результат.ЕстьЗаполненныеЭлементы = Результат.ЕстьЗаполненныеЭлементы
						Или РезультатПоОдномуУзлу.ЕстьЗаполненныеЭлементы;
					Результат.ОбязательныеЭлементыЗаполнены = Результат.ОбязательныеЭлементыЗаполнены
						И РезультатПоОдномуУзлу.ОбязательныеЭлементыЗаполнены;
				КонецЦикла;
				
				// Обработка результата проверки
				Если Не Результат.ОбязательныеЭлементыЗаполнены Тогда

					ЗначениеОформления = ЗначениеОформленияЗаполнить();
					ТекстКнопки = "Заполнить";

				ИначеЕсли Результат.ЕстьЗаполненныеЭлементы Тогда

					ЗначениеОформления = ЗначениеОформленияЗаполнено();
					
					Если СтруктураРеквизитов <> Неопределено Тогда
						ТекстКнопки = "Сведения заполнены";
					Иначе
						
						Если СтрокаТаблицы.ЭлементыСхемы.Количество() = 1
							И СтрокаДерева <> Неопределено
							И СтрокаДерева.СтруктураХраненияРеквизита <> Неопределено
							И СтрокаДерева.СтруктураХраненияРеквизита.ЭтоТабЧасть Тогда
		
							ПодчиненнаяТабЧасть = СтрокаДерева.СтруктураХраненияРеквизита.Реквизит;
	
							Если ЕстьИдентификатор Тогда
								СтруктураОтбора = Новый Структура("ИдентификаторСтрокиРодителя", ИдентификаторСтроки);
								НаборСтрок = ОбъектСДаннымиДокумента[ПодчиненнаяТабЧасть].НайтиСтроки(СтруктураОтбора);
							Иначе
								НаборСтрок = ОбъектСДаннымиДокумента[ПодчиненнаяТабЧасть];
							КонецЕсли;
	
							Если НаборСтрок.Количество() = 1 Тогда
								ЧислоРеквизитовТабЧасти = 1;
	
								Если ЕстьРеквизитВТаблице(ОбъектСДаннымиДокумента, ПодчиненнаяТабЧасть, "ИдентификаторСтроки") Тогда
									ЧислоРеквизитовТабЧасти = ЧислоРеквизитовТабЧасти + 1;
								КонецЕсли;
	
								Если ЕстьРеквизитВТаблице(ОбъектСДаннымиДокумента, ПодчиненнаяТабЧасть, "ИдентификаторСтрокиРодителя") Тогда
									ЧислоРеквизитовТабЧасти = ЧислоРеквизитовТабЧасти + 1;
								КонецЕсли;
								
								Если ТипЗнч(ОбъектСДаннымиДокумента[ПодчиненнаяТабЧасть]) = Тип("ДанныеФормыКоллекция") Тогда
									ТаблицаДанных = ДанныеФормыВЗначение(ОбъектСДаннымиДокумента[ПодчиненнаяТабЧасть], Тип("ТаблицаЗначений"));
								Иначе
									ТаблицаДанных = ОбъектСДаннымиДокумента[ПодчиненнаяТабЧасть];
								КонецЕсли;
								
								КоличествоКолонок = ТаблицаДанных.Колонки.Количество();
								ФормироватьПоПредставлению = КоличествоКолонок 	= ЧислоРеквизитовТабЧасти;
							Иначе
								ФормироватьПоПредставлению = Ложь;
							КонецЕсли;
	
							Если ФормироватьПоПредставлению Тогда
								Для Каждого Колонка Из ТаблицаДанных.Колонки Цикл
									Если Колонка.Имя <> "ИдентификаторСтроки" 
									И Колонка.Имя <> "ИдентификаторСтрокиРодителя" Тогда
										ТекстКнопки = Строка(НаборСтрок[0][Колонка.Имя]);
										Прервать;
									КонецЕсли;
								КонецЦикла;
							Иначе
								Шаблон = "Сведения заполнены (%1)";
								ТекстЗаписей = ПолучитьКоличествоОбъектовТабЧасти(ОбъектСДаннымиДокумента,
									ПодчиненнаяТабЧасть, "запись", ИдентификаторСтроки, Неопределено);
								ТекстКнопки = СтрШаблон(Шаблон, ТекстЗаписей);
							КонецЕсли;
						Иначе
							ТекстКнопки = "Сведения заполнены";	
						КонецЕсли;
							
					КонецЕсли;

				Иначе

					ЗначениеОформления = ЗначениеОформленияНеобязательно();
					ТекстКнопки = "<заполнение необязательно>";

				КонецЕсли; // Обработка результатов проверки

				СтруктураОформленияКнопок = НоваяСтруктураОформленияКнопки();
				СтруктураОформленияКнопок.РезультатОбработкиЗаполнения = Результат;
				СтруктураОформленияКнопок.ПутьКЭлементуФормы = СтрокаТаблицы.ПутьКЭлементуФормы;
				СтруктураОформленияКнопок.ЭтоРеквизитТабЧасти = Истина;
				СтруктураОформленияКнопок.ТабЧасть = ТабЧасть;
				СтруктураОформленияКнопок.ИндексСтрокиТабЧасти = Индекс;
				СтруктураОформленияКнопок.РеквизитУстановкиПризнакаПроверкиТабЧасти = РеквизитУстановкиПризнакаПроверки;
				СтруктураОформленияКнопок.РеквизитТабчасти = СтрокаТаблицы.Реквизит;
				СтруктураОформленияКнопок.ЗначениеОформленияТабчасти = ЗначениеОформления;
				СтруктураОформленияКнопок.ТекстКнопки = ТекстКнопки;
				
				МассивОформления.Добавить(СтруктураОформленияКнопок);

			КонецЦикла; // Цикл по табличной части

		Иначе
				
			Результат = НовыйРезультатОбработкиЗаполнения();
			Результат.ОбязательныеЭлементыЗаполнены = Истина;
			
			Для Каждого ЭлементСхемы Из СтрокаТаблицы.ЭлементыСхемы Цикл
				СтрокаДерева = ДеревоСоответствий.Строки.Найти(ЭлементСхемы, "ЭлементСхемы", Истина);
				Если СтрокаДерева = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				РезультатПоОдномуУзлу = ПроверитьПодчиненныеОбязательныеРеквизиты(ДеревоСоответствий, СтрокаДерева,
					ОбъектСДаннымиДокумента, "", 0, "", СтруктураРеквизитов);

				Результат.ЕстьЗаполненныеЭлементы = Результат.ЕстьЗаполненныеЭлементы
					Или РезультатПоОдномуУзлу.ЕстьЗаполненныеЭлементы;
				Результат.ОбязательныеЭлементыЗаполнены = Результат.ОбязательныеЭлементыЗаполнены
					И РезультатПоОдномуУзлу.ОбязательныеЭлементыЗаполнены;
			КонецЦикла;

			ПутьКЭлементуФормы = СтрокаТаблицы.ПутьКЭлементуФормы;

			СтруктураОформленияКнопок = НоваяСтруктураОформленияКнопки();
			СтруктураОформленияКнопок.РезультатОбработкиЗаполнения = Результат;
			СтруктураОформленияКнопок.ПутьКЭлементуФормы = ПутьКЭлементуФормы;
			СтруктураОформленияКнопок.ЭтоРеквизитТабЧасти = Ложь;
			ТекстКнопки = ОсобоеОформлениеДляЗаполненногоЭлемента(ПутьКЭлементуФормы,
				ОбъектСДаннымиДокумента, СтруктураРеквизитов, ТипДокумента);
			СтруктураОформленияКнопок.ТекстКнопки = ТекстКнопки;
						
			МассивОформления.Добавить(СтруктураОформленияКнопок);

		КонецЕсли;

	КонецЦикла;
	
	Возврат МассивОформления;
	
КонецФункции

Функция ПроверитьПодчиненныеОбязательныеРеквизиты(ДеревоСоответствий,
	СтрокаДерева,
	ОбъектСДаннымиДокумента,
	ИдентификаторСтроки,
	Индекс, 
	ТекущаяТабличнаяЧасть,
	СтруктураРеквизитов)
	
	// Если это обязательный узел, тогда его подчиненные элементы обязательны
	ПодчиненныеЭлементыОбязательны = ЭтоОбязательныйЭлемент(СтрокаДерева, ДеревоСоответствий, ОбъектСДаннымиДокумента,
		ТекущаяТабличнаяЧасть, Индекс, СтруктураРеквизитов);
	
	Если СтрокаДерева.ЭтоРеквизит 
		И СтрокаДерева.СтруктураХраненияРеквизита.ЭтоТабЧасть Тогда
		
		ТабличнаяЧасть = СтрокаДерева.СтруктураХраненияРеквизита.Реквизит;
		Результат = ОбязательныеЭлементыТабЧастиЗаполнены(ТабличнаяЧасть,
			ОбъектСДаннымиДокумента,
			СтрокаДерева,
			ДеревоСоответствий,
			ПодчиненныеЭлементыОбязательны,
			ИдентификаторСтроки, 
			СтруктураРеквизитов);
			
	ИначеЕсли СтрокаДерева.ЭтоРеквизит Тогда
		
		Результат = НовыйРезультатОбработкиЗаполнения();
		ЭлементЗаполнен = ЭлементЗаполнен(СтрокаДерева,
			ОбъектСДаннымиДокумента,
			ТекущаяТабличнаяЧасть,
			Индекс,
			СтруктураРеквизитов);
		
		Результат.ЕстьЗаполненныеЭлементы = ЭлементЗаполнен;
		Результат.ОбязательныеЭлементыЗаполнены = ЭлементЗаполнен Или Не ПодчиненныеЭлементыОбязательны;
		
	Иначе
		
		СтруктураДанныхТабЧасти = НоваяСтруктураДанныхТабЧасти();
		
		СтруктураДанныхТабЧасти.ИдентификаторСтроки = ИдентификаторСтроки;
		СтруктураДанныхТабЧасти.Индекс = Индекс;
		СтруктураДанныхТабЧасти.ТекущаяТабличнаяЧасть = ТекущаяТабличнаяЧасть;
		
		Результат = ОбязательныеЭлементыЗаполнены(ОбъектСДаннымиДокумента,
			СтрокаДерева,
			ДеревоСоответствий,
			ПодчиненныеЭлементыОбязательны,
			СтруктураДанныхТабЧасти,
			СтруктураРеквизитов);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОбязательныеЭлементыЗаполнены(ОбъектСДаннымиДокумента,
	ВеткаДерева,
	ДеревоСоответствий,
	Знач ОбязательныеЭлементыДолжныБытьЗаполнены,
	Знач СтруктураДанныхТабЧасти,
	СтруктураРеквизитов)
	
	ИдентификаторСтрокиРодителя = СтруктураДанныхТабЧасти.ИдентификаторСтроки;
	Индекс = СтруктураДанныхТабЧасти.Индекс;
	ТекущаяТабличнаяЧасть = СтруктураДанныхТабЧасти.ТекущаяТабличнаяЧасть;
	
	РезультатТекущейВетки = НовыйРезультатОбработкиЗаполнения();
	ЕстьОбязательныеНеЗаполненныеЭлементы = Ложь;
	
	Для Каждого СтрокаДерева Из ВеткаДерева.Строки Цикл
		
		Если СтрокаДерева.ЭтоОбязательнаяСтруктура Тогда
			
			Если ЕстьПроверкаОбязательности(СтрокаДерева.СтруктураПроверкиОбязательности) Тогда
				
				ПодчиненныеЭлементыОбязательны = ЭтоОбязательныйЭлемент(СтрокаДерева,
				    ДеревоСоответствий,
					ОбъектСДаннымиДокумента,
					ТекущаяТабличнаяЧасть,
					Индекс,
					СтруктураРеквизитов);
			Иначе
				ПодчиненныеЭлементыОбязательны = Истина;
			КонецЕсли;
			
		Иначе
			
			ПодчиненныеЭлементыОбязательны = Ложь;
			
		КонецЕсли;
		
		// Вход в дополнительную рекурсию
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			
			Если СтрокаДерева.ЭтоРеквизит 
				И СтрокаДерева.СтруктураХраненияРеквизита.ЭтоТабЧасть Тогда
				
				ТабличнаяЧасть = СтрокаДерева.СтруктураХраненияРеквизита.Реквизит;
				Результат = ОбязательныеЭлементыТабЧастиЗаполнены(ТабличнаяЧасть,
					ОбъектСДаннымиДокумента,
					СтрокаДерева,
					ДеревоСоответствий,
					ПодчиненныеЭлементыОбязательны,
					ИдентификаторСтрокиРодителя,
					СтруктураРеквизитов);
					
			Иначе
					
				Результат = ОбязательныеЭлементыЗаполнены(ОбъектСДаннымиДокумента,
					СтрокаДерева,
					ДеревоСоответствий,
					ПодчиненныеЭлементыОбязательны,
					СтруктураДанныхТабЧасти,
					СтруктураРеквизитов);
				
			КонецЕсли;
			
			Если ПодчиненныеЭлементыОбязательны
				И (Не Результат.ОбязательныеЭлементыЗаполнены
				Или Не Результат.ЕстьЗаполненныеЭлементы)Тогда
				
					ЕстьОбязательныеНеЗаполненныеЭлементы = Истина;
			ИначеЕсли Результат.ЕстьЗаполненныеЭлементы
				И Не Результат.ОбязательныеЭлементыЗаполнены Тогда
				
					ЕстьОбязательныеНеЗаполненныеЭлементы = Истина;	
			КонецЕсли;
				
			Если Результат.ЕстьЗаполненныеЭлементы Тогда
				РезультатТекущейВетки.ЕстьЗаполненныеЭлементы = Истина;	
			КонецЕсли;
			
		ИначеЕсли СтрокаДерева.ЭтоРеквизит Тогда 
			
			ТабличнаяЧасть = СтрокаДерева.СтруктураХраненияРеквизита.ТабличнаяЧастьРеквизита;
			ЭтоОбязательныйЭлемент = ЭтоОбязательныйЭлемент(СтрокаДерева,
				ДеревоСоответствий,
				ОбъектСДаннымиДокумента,
				ТабличнаяЧасть,
				Индекс,
				СтруктураРеквизитов); 
				
			ЭлементЗаполнен = ЭлементЗаполнен(СтрокаДерева,
				ОбъектСДаннымиДокумента,
				ТабличнаяЧасть,
				Индекс,
				СтруктураРеквизитов); 
				
			Если ОбязательныеЭлементыДолжныБытьЗаполнены
				И ЭтоОбязательныйЭлемент
				И Не ЭлементЗаполнен Тогда
				
				ЕстьОбязательныеНеЗаполненныеЭлементы = Истина;
				
			ИначеЕсли ЭтоОбязательныйЭлемент
				И Не ЭлементЗаполнен Тогда
					
				ЕстьОбязательныеНеЗаполненныеЭлементы = Истина;
			КонецЕсли;
		
			Если ЭлементЗаполнен Тогда 
				РезультатТекущейВетки.ЕстьЗаполненныеЭлементы = Истина;
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЦикла;
	
	Если Не РезультатТекущейВетки.ЕстьЗаполненныеЭлементы
		И Не ОбязательныеЭлементыДолжныБытьЗаполнены Тогда
		
		Если ВеткаДерева.ЭтоРеквизит
			И ВеткаДерева.СтруктураХраненияРеквизита.ЭтоТабЧасть Тогда
			РезультатТекущейВетки.ОбязательныеЭлементыЗаполнены = Ложь;	
		Иначе
			РезультатТекущейВетки.ОбязательныеЭлементыЗаполнены = Истина;
		КонецЕсли;
		
	ИначеЕсли РезультатТекущейВетки.ЕстьЗаполненныеЭлементы
		И Не ЕстьОбязательныеНеЗаполненныеЭлементы Тогда
		
		РезультатТекущейВетки.ОбязательныеЭлементыЗаполнены = Истина;
		
	КонецЕсли;
	
	Возврат РезультатТекущейВетки;
	
КонецФункции

Функция ОбязательныеЭлементыТабЧастиЗаполнены(Знач ТабличнаяЧасть,
	ОбъектСДаннымиДокумента,
	ВеткаДерева,
	ДеревоСоответствий,
	Знач ОбязательныеЭлементыДолжныБытьЗаполнены,
	Знач ИдентификаторСтрокиРодителя,
	СтруктураРеквизитов)

	РезультатОбходаТабличнойЧасти = НовыйРезультатОбработкиЗаполнения();

	Если СтруктураРеквизитов = Неопределено Тогда
		ЭтоПодчиненнаяТабЧасть = ЕстьРеквизитВТаблице(ОбъектСДаннымиДокумента, ТабличнаяЧасть, "ИдентификаторСтрокиРодителя");
		Если ЭтоПодчиненнаяТабЧасть
			И Не ПустаяСтрока(ИдентификаторСтрокиРодителя) Тогда                                     
			СтруктураОтбора = Новый Структура("ИдентификаторСтрокиРодителя", ИдентификаторСтрокиРодителя);
			НаборСтрок = ОбъектСДаннымиДокумента[ТабличнаяЧасть].НайтиСтроки(СтруктураОтбора);	
		Иначе
			НаборСтрок = ОбъектСДаннымиДокумента[ТабличнаяЧасть];	
		КонецЕсли;
		ЕстьИдентификаторСтроки = ЕстьРеквизитВТаблице(ОбъектСДаннымиДокумента, ТабличнаяЧасть, "ИдентификаторСтроки");
		ЧислоСтрок = НаборСтрок.Количество();	
	Иначе
		ЭтоПодчиненнаяТабЧасть = ЕстьИдентификаторСтрокиРодителяВТаблицеСтруктурыРеквизитов(СтруктураРеквизитов,
			ТабличнаяЧасть);
		ЕстьИдентификаторСтроки = ЕстьИдентификаторСтрокиВТаблицеСтруктурыРеквизитов(СтруктураРеквизитов,
			ТабличнаяЧасть);
		ЧислоСтрок = КоличествоСтрокВТаблицеСтруктурыРеквизитов(СтруктураРеквизитов, ТабличнаяЧасть);		
	КонецЕсли;
	
	Успешность = Истина;
	Если ЧислоСтрок = 0 Тогда
		Если ОбязательныеЭлементыДолжныБытьЗаполнены Тогда
			РезультатОбходаТабличнойЧасти.ОбязательныеЭлементыЗаполнены = Ложь;
		Иначе
			РезультатОбходаТабличнойЧасти.ОбязательныеЭлементыЗаполнены = Истина;
		КонецЕсли;
		
		Возврат РезультатОбходаТабличнойЧасти;
	КонецЕсли;
	
	Для й = 1 По ЧислоСтрок Цикл 
		
		Если СтруктураРеквизитов = Неопределено Тогда
			Строка = НаборСтрок[й-1];
			Индекс = ОбъектСДаннымиДокумента[ТабличнаяЧасть].Индекс(Строка);
			Если ЕстьИдентификаторСтроки Тогда
				ИдентификаторСтроки = Строка.ИдентификаторСтроки;
			Иначе
				ИдентификаторСтроки = "";
			КонецЕсли;				
		Иначе
			Индекс = й - 1;
			Если ЭтоПодчиненнаяТабЧасть Тогда
				ТекущийИдентификаторСтрокиРодителя = ЗначениеРеквизитаСтруктурыРеквизитов(СтруктураРеквизитов,
					"ИдентификаторСтрокиРодителя", ТабличнаяЧасть, й);
				Если ТекущийИдентификаторСтрокиРодителя <> ИдентификаторСтрокиРодителя Тогда
					Продолжить;	
				КонецЕсли;			
			КонецЕсли;
			Если ЕстьИдентификаторСтроки Тогда
				ИдентификаторСтроки = ЗначениеРеквизитаСтруктурыРеквизитов(СтруктураРеквизитов,
					"ИдентификаторСтроки", ТабличнаяЧасть, й);
			Иначе
				ИдентификаторСтроки = "";
			КонецЕсли;
		КонецЕсли;
		
		РезультатОбходаТабличнойЧасти.ЕстьЗаполненныеЭлементы = Истина;
		
		СтруктураДанныхТабЧасти = НоваяСтруктураДанныхТабЧасти();
		СтруктураДанныхТабЧасти.ИдентификаторСтроки = ИдентификаторСтроки;
		СтруктураДанныхТабЧасти.Индекс = Индекс;
		СтруктураДанныхТабЧасти.ТекущаяТабличнаяЧасть = ТабличнаяЧасть;
			
		РезультатПодчиненнойВетки = ОбязательныеЭлементыЗаполнены(ОбъектСДаннымиДокумента,
			ВеткаДерева,
			ДеревоСоответствий,
			Истина,
			СтруктураДанныхТабЧасти,
			СтруктураРеквизитов);
			
		Успешность = РезультатПодчиненнойВетки.ОбязательныеЭлементыЗаполнены И Успешность;
		Если Не Успешность Тогда
			Прервать;
		КонецЕсли;
			
	КонецЦикла; 
	
	// В случае когда обрабатывается СтруктураРеквизитов, заранее неизвестно есть ли заполненные таб. части 
	Если Не РезультатОбходаТабличнойЧасти.ЕстьЗаполненныеЭлементы Тогда
		Если ОбязательныеЭлементыДолжныБытьЗаполнены Тогда
			РезультатОбходаТабличнойЧасти.ОбязательныеЭлементыЗаполнены = Ложь;
		Иначе
			РезультатОбходаТабличнойЧасти.ОбязательныеЭлементыЗаполнены = Истина;
		КонецЕсли;
		
		Возврат РезультатОбходаТабличнойЧасти;
	КонецЕсли;
		
	РезультатОбходаТабличнойЧасти.ОбязательныеЭлементыЗаполнены = Успешность;
	
	Возврат РезультатОбходаТабличнойЧасти; 
	
КонецФункции

Функция ЭлементЗаполнен(СтрокаДерева,
	ОбъектСДаннымиДокумента,
	ТабличнаяЧасть = "",
	ИндексТабличнойЧасти = 0,
	СтруктураРеквизитов)
	
	Реквизит = СтрокаДерева.СтруктураХраненияРеквизита.Реквизит;
	
	Если СтруктураРеквизитов = Неопределено Тогда
	
		Если СтрокаДерева.СтруктураХраненияРеквизита.ЭтоРеквизитТабЧасти Тогда
			Если ОбъектСДаннымиДокумента[ТабличнаяЧасть].Количество() > 0 Тогда
				ТипЗнч = ТипЗнч(ОбъектСДаннымиДокумента[ТабличнаяЧасть][ИндексТабличнойЧасти][Реквизит]);
				Если ТипЗнч <> Тип("Булево") Тогда
					Возврат ЗначениеЗаполнено(ОбъектСДаннымиДокумента[ТабличнаяЧасть][ИндексТабличнойЧасти][Реквизит]);
				Иначе
					Возврат Истина;	
				КонецЕсли;
			Иначе
				Возврат Ложь;
			КонецЕсли;
		ИначеЕсли СтрокаДерева.СтруктураХраненияРеквизита.ЭтоТабЧасть Тогда
		 	Возврат ОбъектСДаннымиДокумента[Реквизит].Количество() > 0;
		Иначе
			ТипЗнч = ТипЗнч(ОбъектСДаннымиДокумента[Реквизит]);
			Если ТипЗнч <> Тип("Булево") Тогда
				Возврат ЗначениеЗаполнено(ОбъектСДаннымиДокумента[Реквизит]);			
			Иначе
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
	
		Если СтрокаДерева.СтруктураХраненияРеквизита.ЭтоТабЧасть Тогда
			Возврат КоличествоСтрокВТаблицеСтруктурыРеквизитов(СтруктураРеквизитов, Реквизит) > 0;
		Иначе
			НомерСтроки = ИндексТабличнойЧасти + 1;
			Значение = ЗначениеРеквизитаСтруктурыРеквизитов(СтруктураРеквизитов, Реквизит, ТабличнаяЧасть, НомерСтроки);
			Если ТипЗнч(Значение) <> Тип("Булево") Тогда
				Возврат ЗначениеЗаполнено(Значение);			
			Иначе
				Возврат Истина;
			КонецЕсли;	
		КонецЕсли;
			
	КонецЕсли;
	
КонецФункции

Функция ЭтоОбязательныйЭлемент(СтрокаДереваСоответствий,
	ДеревоСоответствий,
	ОбъектСДаннымиДокумента,
	ТекущаяТабличнаяЧасть = "",
	ИндексТабличнойЧасти = 0,
	СтруктураРеквизитов)
	
	СтруктураПроверкиОбязательности = СтрокаДереваСоответствий.СтруктураПроверкиОбязательности;
	Обязательный = СтрокаДереваСоответствий.Обязательный;                                      
	
	Если СтруктураПроверкиОбязательности = Неопределено Тогда
		Возврат Обязательный;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураПроверкиОбязательности) = Тип("Массив") Тогда 
		
		УсловияВыполняются = Истина;
		Для Каждого Строка Из СтруктураПроверкиОбязательности Цикл
			ПроверкаВыполнена = УсловиеВСтруктуреВыполняется(Строка, ОбъектСДаннымиДокумента, Обязательный,
				ТекущаяТабличнаяЧасть, ИндексТабличнойЧасти, ДеревоСоответствий, СтруктураРеквизитов);
			УсловияВыполняются = УсловияВыполняются И ПроверкаВыполнена;
		КонецЦикла;
		
	Иначе
		
		УсловияВыполняются = УсловиеВСтруктуреВыполняется(СтруктураПроверкиОбязательности, ОбъектСДаннымиДокумента,
			Обязательный, ТекущаяТабличнаяЧасть, ИндексТабличнойЧасти, ДеревоСоответствий, СтруктураРеквизитов);
		
	КонецЕсли;
	
	Возврат УсловияВыполняются;
	
КонецФункции

Функция УсловиеВСтруктуреВыполняется(СтруктураПроверкиОбязательности,
	ОбъектСДаннымиДокумента,
	Обязательный,
	ТекущаяТабличнаяЧасть,
	Индекс,
	ДеревоСоответствий,
	СтруктураРеквизитов)
	
	РеквизитДляПроверки = СтруктураПроверкиОбязательности.Реквизит;
	УсловиеПроверки = СтруктураПроверкиОбязательности.УсловиеПроверки;
	
	Если Не ЗначениеЗаполнено(РеквизитДляПроверки) Тогда 
		Возврат Обязательный;
	КонецЕсли;
	
	Если УсловиеПроверки = "@Заполнен" Тогда
		
		Возврат ЗаполненностьРеквизитаПоСтруктуре(ОбъектСДаннымиДокумента, 
			СтруктураПроверкиОбязательности, Индекс, СтруктураРеквизитов);
		
	ИначеЕсли УсловиеПроверки = "@Незаполнен" Тогда
		
		Возврат Не ЗаполненностьРеквизитаПоСтруктуре(ОбъектСДаннымиДокумента,
			СтруктураПроверкиОбязательности, Индекс, СтруктураРеквизитов);
		
	ИначеЕсли УсловиеПроверки = "@НезаполненаСтруктура" Тогда 
		
		Возврат Ложь;
		
	Иначе
		ЗначениеДляПроверки = ЗначениеПроверкиОбязательности(СтруктураПроверкиОбязательности,
			ОбъектСДаннымиДокумента,
			ТекущаяТабличнаяЧасть,
			Индекс,
			СтруктураРеквизитов);
			
		Если СтрНайти(УсловиеПроверки, "|") Тогда
				
			МассивУсловий = СтрРазделить(УсловиеПроверки, "|", Ложь);
			
			ВсеУсловияВыполняются = Ложь;
			Для Каждого СтрУсловия Из МассивУсловий Цикл
				УсловиеПроверки = СокрЛП(СтрУсловия);
				УсловиеПроверкиВыполняется = УсловиеПроверкиВыполняется(ЗначениеДляПроверки, УсловиеПроверки);	
				ВсеУсловияВыполняются = ВсеУсловияВыполняются Или УсловиеПроверкиВыполняется;
				Если ВсеУсловияВыполняются Тогда
					Прервать;	
				КонецЕсли;
			КонецЦикла;
			
			Возврат ВсеУсловияВыполняются;
			
		Иначе
			
			Возврат УсловиеПроверкиВыполняется(ЗначениеДляПроверки, УсловиеПроверки);
			
		КонецЕсли;
			
	КонецЕсли;
	
КонецФункции

Функция УсловиеПроверкиВыполняется(ЗначениеДляПроверки, УсловиеПроверки)
	
	Если ТипЗнч(ЗначениеДляПроверки) = Тип("Булево") Тогда
		Возврат ЗначениеДляПроверки	= (ВРег(УсловиеПроверки) = "ИСТИНА" Или УсловиеПроверки = "1");
	Иначе
		Возврат ВРег(Строка(ЗначениеДляПроверки)) = ВРег(УсловиеПроверки);
	КонецЕсли;
	
КонецФункции

Функция ЗначениеПроверкиОбязательности(СтруктураПроверкиОбязательности,
			ОбъектСДаннымиДокумента,
			ТекущаяТабличнаяЧасть,
			Индекс,
			СтруктураРеквизитовФормы) 
			
	Реквизит = СтруктураПроверкиОбязательности.Реквизит;
	
	Если СтруктураПроверкиОбязательности.ЭтоРеквизитТабЧасти Тогда

		ИмяТабличнойЧасти = СтруктураПроверкиОбязательности.ТабличнаяЧастьРеквизита;
		
		// Если имя текущей табличной части пустое, значит в проверяемой табличной части может быть одна строка
		Если ПустаяСтрока(ТекущаяТабличнаяЧасть) Тогда
			ТекущаяТабличнаяЧасть = ИмяТабличнойЧасти;
			Индекс = 0;
		КонецЕсли;
			
		// Если табличная часть не равна текущей, возвращается пустая строка
		Если ИмяТабличнойЧасти <> ТекущаяТабличнаяЧасть Тогда
			Возврат "";
		КонецЕсли;
		
		Если СтруктураРеквизитовФормы = Неопределено Тогда
			СтруктураПроверки = Новый Структура(ИмяТабличнойЧасти, Неопределено);
			ЗаполнитьЗначенияСвойств(СтруктураПроверки, ОбъектСДаннымиДокумента);
			ЕстьТабЧасть = СтруктураПроверки[ИмяТабличнойЧасти] <> Неопределено;
	
			Если ЕстьТабЧасть И ОбъектСДаннымиДокумента[ИмяТабличнойЧасти].Количество() > 0 Тогда
				Возврат ОбъектСДаннымиДокумента[ИмяТабличнойЧасти][Индекс][Реквизит];
			Иначе
				Возврат "";
			КонецЕсли;
		Иначе
			СтрокаТаблицы = Индекс + 1;
			Возврат ЗначениеРеквизитаСтруктурыРеквизитов(СтруктураРеквизитовФормы,
				Реквизит, ИмяТабличнойЧасти, СтрокаТаблицы);
		КонецЕсли;

	Иначе
		
		Если СтруктураРеквизитовФормы = Неопределено Тогда
			Возврат ОбъектСДаннымиДокумента[Реквизит];
		Иначе
			Возврат ЗначениеРеквизитаСтруктурыРеквизитов(СтруктураРеквизитовФормы, Реквизит);	
		КонецЕсли;

	КонецЕсли;
	
КонецФункции

Процедура ДобавитьЭлементОтбораУсловногоОформления(Форма, ЭлементыОтбора, СтруктураПроверки, СтрокаДереваСУзлом = Неопределено)
	
	ИмяПоляПроверки = ПолучитьПутьКДаннымПоСтруктуре(СтруктураПроверки, Форма);
	
	Если СтруктураПроверки.УсловиеПроверки <> "@НезаполненаСтруктура" Тогда
		ЭлементОтбора = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоляПроверки);
	КонецЕсли;
	
	Если СтрНайти(СтруктураПроверки.УсловиеПроверки, "|") > 0 Тогда
		ПравоеЗначение = Новый СписокЗначений;
		МассивЭлементовПроверки = СтрРазделить(СтруктураПроверки.УсловиеПроверки, "|");
		ПравоеЗначение.ЗагрузитьЗначения(МассивЭлементовПроверки);
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлементОтбора.ПравоеЗначение = ПравоеЗначение;
	ИначеЕсли СтруктураПроверки.УсловиеПроверки = "@Незаполнен" Тогда
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ИначеЕсли СтруктураПроверки.УсловиеПроверки = "@Заполнен" Тогда
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;	
	ИначеЕсли СтруктураПроверки.УсловиеПроверки = "@НезаполненаСтруктура" Тогда
		ДобавитьЭлементыОтбораДляУзла(Форма, ЭлементыОтбора, СтрокаДереваСУзлом, Неопределено, Истина);      	
	Иначе
		ПравоеЗначение = СтруктураПроверки.УсловиеПроверки;	
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = ПравоеЗначение;
	КонецЕсли;
	
КонецПроцедуры

Функция ДобавитьЭлементУсловногоОформления(Форма, ПутьКЭлементуФормы, ПроверяемоеПоле, ЗначениеОформления)

	НовыйЭлементОформления = Форма.УсловноеОформление.Элементы.Добавить();
	НовыйЭлементОформления.Представление = ПутьКЭлементуФормы;
	НовыйЭлементОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;

	УстановитьОформлениеКнопкиТабЧасти(НовыйЭлементОформления, ЗначениеОформления);
	
	ЭлементОтбора = НовыйЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПроверяемоеПоле);
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = ЗначениеОформления;

	ОформляемоеПоле = НовыйЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ПутьКЭлементуФормы);
	ОформляемоеПоле.Использование = Истина;
	
	НовыйЭлементОформления.Использование = Истина;

	Возврат НовыйЭлементОформления;

КонецФункции

#КонецОбласти

#Область ОформлениеКнопок

Функция ОсобоеОформлениеДляЗаполненногоЭлемента(ПутьКЭлементуФормы,
		ОбъектСДаннымиДокумента,
		СтруктураРеквизитов,
		ТипДокумента)
	
	Если ТипДокумента = ТипДокументаТранспортнаяНакладная() Тогда
		Заголовок = ОсобоеОформлениеДляЗаполненногоЭлементаЭТрН(ПутьКЭлементуФормы,
			ОбъектСДаннымиДокумента, СтруктураРеквизитов);
		Возврат Заголовок;
	ИначеЕсли ТипДокумента = ТипДокументаЗаказНаряд() Тогда
		Заголовок = ОсобоеОформлениеДляЗаполненногоЭлементаЗаказНаряда(ПутьКЭлементуФормы,
			ОбъектСДаннымиДокумента, СтруктураРеквизитов);
		Возврат Заголовок;	
	ИначеЕсли ТипДокумента = ТипДокументаСопроводительнаяВедомость() Тогда
		Заголовок = ОсобоеОформлениеДляЗаполненногоЭлементаВедомости(ПутьКЭлементуФормы,
			ОбъектСДаннымиДокумента, СтруктураРеквизитов);
		Возврат Заголовок;
	ИначеЕсли ТипДокумента = ТипДокументаЗаказЗаявка() Тогда
		Заголовок = ОсобоеОформлениеДляЗаказаЗаявки(ПутьКЭлементуФормы,
			ОбъектСДаннымиДокумента, СтруктураРеквизитов);
		Возврат Заголовок;
	ИначеЕсли ТипДокумента = ТипДокументаПутевойЛист() Тогда
		Заголовок = ОсобоеОформлениеДляПутевогоЛиста(ПутьКЭлементуФормы,
			ОбъектСДаннымиДокумента, СтруктураРеквизитов);
		Возврат Заголовок;
	ИначеЕсли ТипДокумента = ТипДокументаДоговорФрахтования() Тогда
		Заголовок = ОсобоеОформлениеДляДоговораФрахтования(ПутьКЭлементуФормы,
			ОбъектСДаннымиДокумента, СтруктураРеквизитов);
		Возврат Заголовок;
	КонецЕсли;

	Возврат Неопределено;
	
КонецФункции

Функция ОсобоеОформлениеДляЗаполненногоЭлементаЭТрН(ПутьКЭлементуФормы, ОбъектСДаннымиДокумента, СтруктураРеквизитов)
	
	Если ПутьКЭлементуФормы = "ЗаполнитьТитулГрузоотправителяГрузы" Тогда
		
		ПредставлениеГрузы = "";
		
		МассивСтрокГруза = ОбменСГИСЭПДКлиентСервер.МассивСтрокТаблицыИзСтруктурыРеквизитов(СтруктураРеквизитов, "ТитулГрузоотправителяГрузы");
		МассивПредставлений = Новый Массив;
		СчетчикДлиныСтроки = 0;
		РазделительПредставлений = ", ";
		Для Каждого СтрокаГруза Из МассивСтрокГруза Цикл
			СчетчикДлиныСтроки = СчетчикДлиныСтроки + СтрДлина(СтрокаГруза.ОтгрузочноеНаименованиеГруза) + СтрДлина(РазделительПредставлений);	
			Если СчетчикДлиныСтроки > 80 Тогда
				Прервать;	
			Иначе
				МассивПредставлений.Добавить(СтрокаГруза.ОтгрузочноеНаименованиеГруза);
			КонецЕсли;
		КонецЦикла;
		
		ПредставлениеГрузы = СтрСоединить(МассивПредставлений, РазделительПредставлений);
		
		КоличествоЕще = МассивСтрокГруза.Количество() - МассивПредставлений.Количество();
		Если КоличествоЕще > 0 Тогда
			ПредставлениеГрузы = ПредставлениеГрузы + " и еще " 
									+ ПолучитьСклоненияСтрокиПоЧислу("", КоличествоЕще, "груз", "ЧС=Количественное", "ПД=Именительный")[0];	
		КонецЕсли;
		
		Если СтруктураРеквизитов = Неопределено Тогда 
			Сумма = ОбъектСДаннымиДокумента["ТитулГрузоотправителяСтоимостьГруза"];
			Валюта = ОбъектСДаннымиДокумента["СсылкаТитулГрузоотправителяВалюта"];
		Иначе
			Сумма = ЗначениеРеквизитаСтруктурыРеквизитов(СтруктураРеквизитов, "ТитулГрузоотправителяСтоимостьГруза");
			Валюта = ЗначениеРеквизитаСтруктурыРеквизитов(СтруктураРеквизитов, "СсылкаТитулГрузоотправителяВалюта");
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Сумма) Тогда
			Сумма = "0";	
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Валюта) Тогда
			Валюта = "RUB";	
		КонецЕсли;
		Шаблон = "%1 на %2 %3";
		
		Заголовок = СтрШаблон(Шаблон, ПредставлениеГрузы, Сумма, Валюта);
		
		Возврат Заголовок;
		
	ИначеЕсли ПутьКЭлементуФормы = "ЗаполнитьТитулГрузоотправителяСопроводительныеДокументы" Тогда
		
		Если СтруктураРеквизитов = Неопределено Тогда
			КоличествоДокументов = ОбъектСДаннымиДокумента.ТитулГрузоотправителяСопроводительныеДокументы.Количество()
				+ ОбъектСДаннымиДокумента.ТитулГрузоотправителяСертификатыУдостоверения.Количество()
				+ ОбъектСДаннымиДокумента.ТитулГрузоотправителяДокументыПодтверждающиеОтгрузку.Количество();
		Иначе
			 КоличествоДокументов = КоличествоСтрокВТаблицеСтруктурыРеквизитов(СтруктураРеквизитов, 
			 "ТитулГрузоотправителяСопроводительныеДокументы") 
				+ КоличествоСтрокВТаблицеСтруктурыРеквизитов(СтруктураРеквизитов, 
				"ТитулГрузоотправителяСертификатыУдостоверения") 
				+ КоличествоСтрокВТаблицеСтруктурыРеквизитов(СтруктураРеквизитов,
					"ТитулГрузоотправителяДокументыПодтверждающиеОтгрузку");
		КонецЕсли;
			
		Если КоличествоДокументов > 0 Тогда
			ЧислоДокументов = ПолучитьСклоненияСтрокиПоЧислу("", КоличествоДокументов, "документ", "ЧС=Количественное", "ПД=Винительный")[0];
		Иначе
			ЧислоДокументов = "";		
		КонецЕсли;
		
		Если СтруктураРеквизитов = Неопределено Тогда
			ЕстьВедомость = ЗначениеЗаполнено(ОбъектСДаннымиДокумента["ТитулГрузоотправителяВедомостьНаКонтейнерНаименование"]);	
		Иначе
			ЕстьВедомость = ЗначениеЗаполнено(ЗначениеРеквизитаСтруктурыРеквизитов(СтруктураРеквизитов,
				"ТитулГрузоотправителяВедомостьНаКонтейнерНаименование"));
		КонецЕсли;
		
		Если ЕстьВедомость Тогда
			Шаблон = "%1%2";
			Если КоличествоДокументов > 0 Тогда
				Ведомость = ", сопроводительная ведомость";
			Иначе
				Ведомость = "Сопроводительная ведомость";
			КонецЕсли;
			Заголовок = СтрШаблон(Шаблон, ЧислоДокументов, Ведомость);
		Иначе
			Заголовок = ЧислоДокументов;	
		КонецЕсли;
		
		Возврат Заголовок;
	
	ИначеЕсли ПутьКЭлементуФормы = "ЗаполнитьТитулГрузоотправителяВодители" Тогда
		
		МассивИменРеквизитов = Новый Массив;
		МассивИменРеквизитов.Добавить("Имя");
		МассивИменРеквизитов.Добавить("Фамилия");
		
		Заголовок = ПредставлениеДанныхТабЧасти(ОбъектСДаннымиДокумента,
			"ТитулГрузоотправителяВодители",
			МассивИменРеквизитов,
			"%1 %2",
			"водитель",
			СтруктураРеквизитов);
			
		Возврат Заголовок;
	
	ИначеЕсли ПутьКЭлементуФормы = "ЗаполнитьТитулГрузоотправителяОтметкиГрузоотправителя" Тогда
	
		Заголовок = ПолучитьКоличествоОбъектовТабЧасти(ОбъектСДаннымиДокумента, "ТитулГрузоотправителяОтметкиГрузоотправителя", "отметка", "", СтруктураРеквизитов);
		Возврат Заголовок;		 
	
	ИначеЕсли ПутьКЭлементуФормы = "ЗаполнитьТитулПеревозчикаПриемкаОтметкиПеревозчикаПриПриемеГруза" Тогда
	
		Заголовок = ПолучитьКоличествоОбъектовТабЧасти(ОбъектСДаннымиДокумента, "ТитулПеревозчикаПриемкаОтметкиПеревозчикаПриПриемеГруза", "отметка", "", СтруктураРеквизитов);
		Возврат Заголовок;		 
		
	ИначеЕсли ПутьКЭлементуФормы = "ЗаполнитьТитулГрузополучателяСведенияОПринятыхГрузах" Тогда
		
		МассивИменРеквизитов = Новый Массив;
		МассивИменРеквизитов.Добавить("ОтгрузочноеНаименованиеГруза");
		
		Заголовок = ПредставлениеДанныхТабЧасти(ОбъектСДаннымиДокумента,
			"ТитулГрузополучателяСведенияОПринятыхГрузах",
			МассивИменРеквизитов,
			"%1",
			"груз",
			СтруктураРеквизитов);
		
		Возврат Заголовок;
		
	ИначеЕсли ПутьКЭлементуФормы = "ЗаполнитьДопТитулГрузополучателяСведенияОПринятыхГрузах" Тогда
		
		МассивИменРеквизитов = Новый Массив;
		МассивИменРеквизитов.Добавить("ОтгрузочноеНаименованиеГруза");
		
		Заголовок = ПредставлениеДанныхТабЧасти(ОбъектСДаннымиДокумента,
			"ДопТитулГрузополучателяСведенияОПринятыхГрузах",
			МассивИменРеквизитов,
			"%1",
			"груз",
			СтруктураРеквизитов);
		
		Возврат Заголовок;
		
	ИначеЕсли ПутьКЭлементуФормы = "ЗаполнитьТитулГрузополучателяОтметкиГрузополучателя" Тогда
	
		Заголовок = ПолучитьКоличествоОбъектовТабЧасти(ОбъектСДаннымиДокумента, "ТитулГрузополучателяОтметкиГрузополучателя", "отметка", "", СтруктураРеквизитов);
		Возврат Заголовок;		 

	ИначеЕсли ПутьКЭлементуФормы = "ЗаполнитьДопТитулГрузополучателяОтметкиГрузополучателя" Тогда
	
		Заголовок = ПолучитьКоличествоОбъектовТабЧасти(ОбъектСДаннымиДокумента, "ДопТитулГрузополучателяОтметкиГрузополучателя", "отметка", "", СтруктураРеквизитов);
		Возврат Заголовок;		 
	
	ИначеЕсли ПутьКЭлементуФормы = "ЗаполнитьТитулПеревозчикаВыдачаОтметкиПриВыдачеГруза" Тогда
	
		Заголовок = ПолучитьКоличествоОбъектовТабЧасти(ОбъектСДаннымиДокумента, "ТитулПеревозчикаВыдачаОтметкиПриВыдачеГруза", "отметка", "", СтруктураРеквизитов);
		Возврат Заголовок;		 

	ИначеЕсли ПутьКЭлементуФормы = "ЗаполнитьДопТитулПеревозчикаВыдачаОтметкиПриВыдачеГруза" Тогда
	
		Заголовок = ПолучитьКоличествоОбъектовТабЧасти(ОбъектСДаннымиДокумента, "ДопТитулПеревозчикаВыдачаОтметкиПриВыдачеГруза", "отметка", "", СтруктураРеквизитов);
		Возврат Заголовок;		 
				
	ИначеЕсли ПутьКЭлементуФормы = "ЗаполнитьТитулПереадресовкаОснованиеРеквизитыСторон" Тогда
	
		Заголовок = ПолучитьКоличествоОбъектовТабЧасти(ОбъектСДаннымиДокумента, "ТитулПереадресовкаОснованиеРеквизитыСторон", "сторона", "", СтруктураРеквизитов);
		Возврат Заголовок;		 

	ИначеЕсли ПутьКЭлементуФормы = "ЗаполнитьДопТитулПереадресовкаОснованиеРеквизитыСторон" Тогда
	
		Заголовок = ПолучитьКоличествоОбъектовТабЧасти(ОбъектСДаннымиДокумента, "ДопТитулПереадресовкаОснованиеРеквизитыСторон", "сторона", "", СтруктураРеквизитов);
		Возврат Заголовок;		 
	
	ИначеЕсли ПутьКЭлементуФормы = "ЗаполнитьТитулПереадресовкаСведенияОбОтметках" Тогда
	
		Заголовок = ПолучитьКоличествоОбъектовТабЧасти(ОбъектСДаннымиДокумента, "ТитулПереадресовкаСведенияОбОтметках", "отметка", "", СтруктураРеквизитов);
		Возврат Заголовок;		 

	ИначеЕсли ПутьКЭлементуФормы = "ЗаполнитьДопТитулПереадресовкаСведенияОбОтметках" Тогда
	
		Заголовок = ПолучитьКоличествоОбъектовТабЧасти(ОбъектСДаннымиДокумента, "ДопТитулПереадресовкаСведенияОбОтметках", "отметка", "", СтруктураРеквизитов);
		Возврат Заголовок;		 

	ИначеЕсли ПутьКЭлементуФормы = "ЗаполнитьТитулПереадресовкаКонтактныеДанныеНовогоГрузополучателя" Тогда
	
		МассивЧастей = Новый Массив;
		
		Если СтруктураРеквизитов = Неопределено Тогда		
			Если ОбъектСДаннымиДокумента["ТитулПереадресовкаНовыйГрузополучательНомераТелефонов"].Количество() > 0 Тогда
				Если Не  ПустаяСтрока(ОбъектСДаннымиДокумента["ТитулПереадресовкаНовыйГрузополучательНомераТелефонов"][0]) Тогда
					МассивЧастей.Добавить(ОбъектСДаннымиДокумента["ТитулПереадресовкаНовыйГрузополучательНомераТелефонов"][0].Телефон);
				КонецЕсли;
			КонецЕсли;
				 
			Если ОбъектСДаннымиДокумента["ТитулПереадресовкаНовыйГрузополучательАдресаЭлектроннойПочты"].Количество() > 0 Тогда
				Если Не ПустаяСтрока(ОбъектСДаннымиДокумента["ТитулПереадресовкаНовыйГрузополучательАдресаЭлектроннойПочты"][0]) Тогда
					МассивЧастей.Добавить(ОбъектСДаннымиДокумента["ТитулПереадресовкаНовыйГрузополучательАдресаЭлектроннойПочты"][0].АдресЭлектроннойПочты);
				КонецЕсли;	
			КонецЕсли;
		
			Если Не ПустаяСтрока(ОбъектСДаннымиДокумента["ТитулПереадресовкаНовыйГрузополучательИныеКонтактныеДанные"]) Тогда
				МассивЧастей.Добавить(ОбъектСДаннымиДокумента["ТитулПереадресовкаНовыйГрузополучательИныеКонтактныеДанные"]);	
			КонецЕсли;
		Иначе
			Если КоличествоСтрокВТаблицеСтруктурыРеквизитов(СтруктураРеквизитов, 
				"ТитулПереадресовкаНовыйГрузополучательНомераТелефонов") > 0 Тогда
				Телефон = ЗначениеРеквизитаСтруктурыРеквизитов(СтруктураРеквизитов, "Телефон",
					"ТитулПереадресовкаНовыйГрузополучательНомераТелефонов", 1);
				Если ЗначениеЗаполнено(Телефон)Тогда
					МассивЧастей.Добавить(Телефон);	
				КонецЕсли;
			КонецЕсли;
			
			Если КоличествоСтрокВТаблицеСтруктурыРеквизитов(СтруктураРеквизитов, 
				"ТитулПереадресовкаНовыйГрузополучательАдресаЭлектроннойПочты") > 0 Тогда
				АдресЭлектроннойПочты = ЗначениеРеквизитаСтруктурыРеквизитов(СтруктураРеквизитов, "АдресЭлектроннойПочты",
					"ТитулПереадресовкаНовыйГрузополучательАдресаЭлектроннойПочты", 1);
				Если ЗначениеЗаполнено(АдресЭлектроннойПочты)Тогда
					МассивЧастей.Добавить(АдресЭлектроннойПочты);	
				КонецЕсли;
			КонецЕсли;
						
			ТитулПереадресовкаНовыйГрузополучательИныеКонтактныеДанные = 
				ЗначениеРеквизитаСтруктурыРеквизитов(СтруктураРеквизитов, "ТитулПереадресовкаНовыйГрузополучательИныеКонтактныеДанные");
			Если ЗначениеЗаполнено(ТитулПереадресовкаНовыйГрузополучательИныеКонтактныеДанные) Тогда
				МассивЧастей.Добавить(ТитулПереадресовкаНовыйГрузополучательИныеКонтактныеДанные);	
			КонецЕсли;	
		КонецЕсли;
		
		Заголовок = СтрСоединить(МассивЧастей, ", ");
	
		Возврат Заголовок;
	
	ИначеЕсли ПутьКЭлементуФормы = "ЗаполнитьДопТитулПереадресовкаКонтактныеДанныеНовогоГрузополучателя" Тогда
	
		МассивЧастей = Новый Массив;
		Если СтруктураРеквизитов = Неопределено Тогда		
			Если ОбъектСДаннымиДокумента.ДопТитулПереадресовкаНовыйГрузополучательНомераТелефонов.Количество() > 0 Тогда
				Если Не ПустаяСтрока(ОбъектСДаннымиДокумента.ДопТитулПереадресовкаНовыйГрузополучательНомераТелефонов[0]) Тогда
					МассивЧастей.Добавить(ОбъектСДаннымиДокумента.ДопТитулПереадресовкаНовыйГрузополучательНомераТелефонов[0].Телефон);
				КонецЕсли;
			КонецЕсли;
				 
			Если ОбъектСДаннымиДокумента.ДопТитулПереадресовкаНовыйГрузополучательАдресаЭлектроннойПочты.Количество() > 0 Тогда
				Если Не ПустаяСтрока(ОбъектСДаннымиДокумента.ДопТитулПереадресовкаНовыйГрузополучательАдресаЭлектроннойПочты[0]) Тогда
					МассивЧастей.Добавить(ОбъектСДаннымиДокумента.ДопТитулПереадресовкаНовыйГрузополучательАдресаЭлектроннойПочты[0].АдресЭлектроннойПочты);
				КонецЕсли;	
			КонецЕсли;
		
			Если Не ПустаяСтрока(ОбъектСДаннымиДокумента.ДопТитулПереадресовкаНовыйГрузополучательИныеКонтактныеДанные) Тогда
				МассивЧастей.Добавить(ОбъектСДаннымиДокумента.ДопТитулПереадресовкаНовыйГрузополучательИныеКонтактныеДанные);	
			КонецЕсли;
		Иначе
			Если КоличествоСтрокВТаблицеСтруктурыРеквизитов(СтруктураРеквизитов, 
				"ДопТитулПереадресовкаНовыйГрузополучательНомераТелефонов") > 0 Тогда
				Телефон = ЗначениеРеквизитаСтруктурыРеквизитов(СтруктураРеквизитов, "Телефон",
					"ДопТитулПереадресовкаНовыйГрузополучательНомераТелефонов", 1);
				Если ЗначениеЗаполнено(Телефон)Тогда
					МассивЧастей.Добавить(Телефон);	
				КонецЕсли;
			КонецЕсли;
			
			Если КоличествоСтрокВТаблицеСтруктурыРеквизитов(СтруктураРеквизитов, 
				"ДопТитулПереадресовкаНовыйГрузополучательАдресаЭлектроннойПочты") > 0 Тогда
				АдресЭлектроннойПочты = ЗначениеРеквизитаСтруктурыРеквизитов(СтруктураРеквизитов, "АдресЭлектроннойПочты",
					"ДопТитулПереадресовкаНовыйГрузополучательАдресаЭлектроннойПочты", 1);
				Если ЗначениеЗаполнено(АдресЭлектроннойПочты)Тогда
					МассивЧастей.Добавить(АдресЭлектроннойПочты);	
				КонецЕсли;
			КонецЕсли;
						
			ДопТитулПереадресовкаНовыйГрузополучательИныеКонтактныеДанные = 
				ЗначениеРеквизитаСтруктурыРеквизитов(СтруктураРеквизитов, "ДопТитулПереадресовкаНовыйГрузополучательИныеКонтактныеДанные");
			Если ЗначениеЗаполнено(ДопТитулПереадресовкаНовыйГрузополучательИныеКонтактныеДанные) Тогда
				МассивЧастей.Добавить(ДопТитулПереадресовкаНовыйГрузополучательИныеКонтактныеДанные);	
			КонецЕсли;
		КонецЕсли;
		
		Заголовок = СтрСоединить(МассивЧастей, ", ");
	
		Возврат Заголовок;
		
	ИначеЕсли ПутьКЭлементуФормы = "ЗаполнитьТитулПеревозчикаЗаменыДокументРеквизитыСторон" Тогда
	
		Заголовок = ПолучитьКоличествоОбъектовТабЧасти(ОбъектСДаннымиДокумента,
			"ТитулПеревозчикаЗаменыДокументРеквизитыСторон",
			"сторона",
			"",
			СтруктураРеквизитов);
		Возврат Заголовок;		 

	ИначеЕсли ПутьКЭлементуФормы = "ЗаполнитьДопТитулПеревозчикаЗаменыДокументРеквизитыСторон" Тогда
	
		Заголовок = ПолучитьКоличествоОбъектовТабЧасти(ОбъектСДаннымиДокумента,
			"ДопТитулПеревозчикаЗаменыДокументРеквизитыСторон",
			"сторона",
			"",
			СтруктураРеквизитов);
		Возврат Заголовок;		 
		
	ИначеЕсли ПутьКЭлементуФормы = "ЗаполнитьТитулГрузоотправителяВодители" Тогда
		
		МассивИменРеквизитов = Новый Массив;
		МассивИменРеквизитов.Добавить("Фамилия");
		МассивИменРеквизитов.Добавить("Имя");
		
		Заголовок = ПредставлениеДанныхТабЧасти(ОбъектСДаннымиДокумента,
			"ТитулПеревозчикаЗаменыЗаменыВодителей",
			МассивИменРеквизитов,
			"%1 %2",
			"водитель",
			СтруктураРеквизитов);
		
		Возврат Заголовок;

	ИначеЕсли ПутьКЭлементуФормы = "ЗаполнитьТитулПеревозчикаЗаменыОтметкиОЗаменах" Тогда
	
		Заголовок = ПолучитьКоличествоОбъектовТабЧасти(ОбъектСДаннымиДокумента, "ТитулПеревозчикаЗаменыОтметкиОЗаменах", "отметка", "", СтруктураРеквизитов);
		Возврат Заголовок;		 

	ИначеЕсли ПутьКЭлементуФормы = "ЗаполнитьДопТитулПеревозчикаЗаменыОтметкиОЗаменах" Тогда
	
		Заголовок = ПолучитьКоличествоОбъектовТабЧасти(ОбъектСДаннымиДокумента, "ДопТитулПеревозчикаЗаменыОтметкиОЗаменах", "отметка", "", СтруктураРеквизитов);
		Возврат Заголовок;		 

	ИначеЕсли ПутьКЭлементуФормы = "ЗаполнитьТитулПеревозчикаЗаменыТранспортныеСредства" Тогда
	
		Если СтруктураРеквизитов = Неопределено Тогда
			КоличествоСтрок = ОбъектСДаннымиДокумента.ТитулПеревозчикаЗаменыТранспортныеСредства.Количество();
		Иначе
			КоличествоСтрок = КоличествоСтрокВТаблицеСтруктурыРеквизитов(СтруктураРеквизитов, "ТитулПеревозчикаЗаменыТранспортныеСредства");	
		КонецЕсли;
	
		Если КоличествоСтрок = 1 Тогда
			МассивИменРеквизитов = Новый Массив;
			Если СтруктураРеквизитов = Неопределено Тогда
				СтрокаТабличнойЧастиОбъекта = ОбъектСДаннымиДокумента.ТитулПеревозчикаЗаменыТранспортныеСредства[0];
				 
				Если ЗначениеЗаполнено(СтрокаТабличнойЧастиОбъекта.Марка) Тогда
					МассивИменРеквизитов.Добавить(СтрокаТабличнойЧастиОбъекта.Марка);
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаТабличнойЧастиОбъекта.РегистрационныйНомер) Тогда
					МассивИменРеквизитов.Добавить(СтрокаТабличнойЧастиОбъекта.РегистрационныйНомер);
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаТабличнойЧастиОбъекта.Грузоподъемность) Тогда
					МассивИменРеквизитов.Добавить(СтрокаТабличнойЧастиОбъекта.Грузоподъемность);
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаТабличнойЧастиОбъекта.Вместимость) Тогда
					МассивИменРеквизитов.Добавить(СтрокаТабличнойЧастиОбъекта.Вместимость);
				КонецЕсли;
				
				Заголовок = СтрСоединить(МассивИменРеквизитов, ", ");
			Иначе
				Марка = ЗначениеРеквизитаСтруктурыРеквизитов(СтруктураРеквизитов,
					"Марка", "ТитулПеревозчикаЗаменыТранспортныеСредства", 1);
				Если ЗначениеЗаполнено(Марка) Тогда
					МассивИменРеквизитов.Добавить(Марка);
				КонецЕсли;
				
				РегистрационныйНомер = ЗначениеРеквизитаСтруктурыРеквизитов(СтруктураРеквизитов,
					"РегистрационныйНомер", "ТитулПеревозчикаЗаменыТранспортныеСредства", 1);
				Если ЗначениеЗаполнено(РегистрационныйНомер) Тогда
					МассивИменРеквизитов.Добавить(РегистрационныйНомер);
				КонецЕсли;
								
				Грузоподъемность = ЗначениеРеквизитаСтруктурыРеквизитов(СтруктураРеквизитов,
					"Грузоподъемность", "ТитулПеревозчикаЗаменыТранспортныеСредства", 1);
				Если ЗначениеЗаполнено(Грузоподъемность) Тогда
					МассивИменРеквизитов.Добавить(Грузоподъемность);
				КонецЕсли;
				
				Вместимость = ЗначениеРеквизитаСтруктурыРеквизитов(СтруктураРеквизитов,
					"Вместимость", "ТитулПеревозчикаЗаменыТранспортныеСредства", 1);
				Если ЗначениеЗаполнено(Вместимость) Тогда
					МассивИменРеквизитов.Добавить(Вместимость);
				КонецЕсли;
			КонецЕсли;	
		Иначе
			Заголовок = ПолучитьКоличествоОбъектовТабЧасти(ОбъектСДаннымиДокумента,
				"ТитулПеревозчикаЗаменыТранспортныеСредства",
				"транспортное средство",
				"",
				СтруктураРеквизитов);
		КонецЕсли;	
		
		Если Не ЗначениеЗаполнено(Заголовок) Тогда
			Заголовок = "Сведения заполнены";	
		КонецЕсли;
			
		Возврат Заголовок;

	ИначеЕсли ПутьКЭлементуФормы = "ЗаполнитьДопТитулПеревозчикаЗаменыТранспортныеСредства" Тогда
	
		Если СтруктураРеквизитов = Неопределено Тогда
			КоличествоСтрок = ОбъектСДаннымиДокумента.ДопТитулПеревозчикаЗаменыТранспортныеСредства.Количество();
		Иначе
			КоличествоСтрок = КоличествоСтрокВТаблицеСтруктурыРеквизитов(СтруктураРеквизитов, "ДопТитулПеревозчикаЗаменыТранспортныеСредства");	
		КонецЕсли;
	
		Если КоличествоСтрок = 1 Тогда
			
			МассивИменРеквизитов = Новый Массив;
			
			Если СтруктураРеквизитов = Неопределено Тогда
				СтрокаТабличнойЧастиОбъекта = ОбъектСДаннымиДокумента.ДопТитулПеревозчикаЗаменыТранспортныеСредства[0];
				 
				Если ЗначениеЗаполнено(СтрокаТабличнойЧастиОбъекта.Марка) Тогда
					МассивИменРеквизитов.Добавить(СтрокаТабличнойЧастиОбъекта.Марка);
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаТабличнойЧастиОбъекта.РегистрационныйНомер) Тогда
					МассивИменРеквизитов.Добавить(СтрокаТабличнойЧастиОбъекта.РегистрационныйНомер);
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаТабличнойЧастиОбъекта.Грузоподъемность) Тогда
					МассивИменРеквизитов.Добавить(СтрокаТабличнойЧастиОбъекта.Грузоподъемность);
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаТабличнойЧастиОбъекта.Вместимость) Тогда
					МассивИменРеквизитов.Добавить(СтрокаТабличнойЧастиОбъекта.Вместимость);
				КонецЕсли;
			Иначе
				Марка = ЗначениеРеквизитаСтруктурыРеквизитов(СтруктураРеквизитов,
					"Марка", "ДопТитулПеревозчикаЗаменыТранспортныеСредства", 1);
				Если ЗначениеЗаполнено(Марка) Тогда
					МассивИменРеквизитов.Добавить(Марка);
				КонецЕсли;
				
				РегистрационныйНомер = ЗначениеРеквизитаСтруктурыРеквизитов(СтруктураРеквизитов,
					"РегистрационныйНомер", "ДопТитулПеревозчикаЗаменыТранспортныеСредства", 1);
				Если ЗначениеЗаполнено(РегистрационныйНомер) Тогда
					МассивИменРеквизитов.Добавить(РегистрационныйНомер);
				КонецЕсли;
								
				Грузоподъемность = ЗначениеРеквизитаСтруктурыРеквизитов(СтруктураРеквизитов,
					"Грузоподъемность", "ДопТитулПеревозчикаЗаменыТранспортныеСредства", 1);
				Если ЗначениеЗаполнено(Грузоподъемность) Тогда
					МассивИменРеквизитов.Добавить(Грузоподъемность);
				КонецЕсли;
				
				Вместимость = ЗначениеРеквизитаСтруктурыРеквизитов(СтруктураРеквизитов,
					"Вместимость", "ДопТитулПеревозчикаЗаменыТранспортныеСредства", 1);
				Если ЗначениеЗаполнено(Вместимость) Тогда
					МассивИменРеквизитов.Добавить(Вместимость);
				КонецЕсли;
			КонецЕсли;
			
			Заголовок = СтрСоединить(МассивИменРеквизитов, ", ");	
		Иначе
			Заголовок = ПолучитьКоличествоОбъектовТабЧасти(ОбъектСДаннымиДокумента,
				"ДопТитулПеревозчикаЗаменыТранспортныеСредства",
				"транспортное средство",
				"",
				СтруктураРеквизитов);
		КонецЕсли;	
		
		Если Не ЗначениеЗаполнено(Заголовок) Тогда
			Заголовок = "Сведения заполнены";	
		КонецЕсли;
			
		Возврат Заголовок;
		
	ИначеЕсли ПутьКЭлементуФормы = "ЗаполнитьТитулГрузоотправителяДоверенность" Тогда
		 
		Наименование = ЗначениеРеквизитаСтруктурыРеквизитов(СтруктураРеквизитов, "ТитулГрузоотправителяДоверенностьНаименование");
		Номер = ЗначениеРеквизитаСтруктурыРеквизитов(СтруктураРеквизитов, "ТитулГрузоотправителяДоверенностьНомер");
		Дата = ЗначениеРеквизитаСтруктурыРеквизитов(СтруктураРеквизитов, "ТитулГрузоотправителяДоверенностьДата");
		
		Заголовок = СтрШаблон("%1 %2 от %3", Наименование, Номер, Формат(Дата, "ДЛФ=D;"));
		
		Возврат Заголовок;
																				
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ОсобоеОформлениеДляЗаполненногоЭлементаЗаказНаряда(ПутьКЭлементуФормы, ОбъектСДаннымиДокумента, СтруктураРеквизитов)
	
	Если ПутьКЭлементуФормы = "ЗаполнитьТитулФрахтователяСведенияОНаименованииГруза" Тогда
		 
		Количество = ПолучитьКоличествоОбъектовТабЧасти(ОбъектСДаннымиДокумента, "ТитулФрахтователяОписаниеГруза", "груз", "", СтруктураРеквизитов);
		
		Если СтруктураРеквизитов = Неопределено Тогда
			Сумма = ОбъектСДаннымиДокумента["ТитулФрахтователяСтоимостьЦенностьГрузаСНалогомВсего"];
			Валюта = ОбъектСДаннымиДокумента["СсылкаТитулФрахтователяВалютаОбщейСтоимости"];
		Иначе
			Сумма = ЗначениеРеквизитаСтруктурыРеквизитов(СтруктураРеквизитов, "ТитулФрахтователяСтоимостьЦенностьГрузаСНалогомВсего");
			Валюта = ЗначениеРеквизитаСтруктурыРеквизитов(СтруктураРеквизитов, "СсылкаТитулФрахтователяВалютаОбщейСтоимости");
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Сумма) Тогда
			Сумма = "0";	
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Валюта) Тогда
			Валюта = "RUB";	
		КонецЕсли;
		Шаблон = "%1 на %2 %3";
		
		Заголовок = СтрШаблон(Шаблон, Количество, Сумма, Валюта);
		
		Возврат Заголовок;
		
	ИначеЕсли ПутьКЭлементуФормы = "ЗаполнитьТитулФрахтователяСопроводительныеДокументыНаГруз" Тогда 
		
		Если СтруктураРеквизитов = Неопределено Тогда	
			КоличествоДокументов = ОбъектСДаннымиДокумента.ТитулФрахтователяПрилагаемыеКЗаказуНарядуДокументы.Количество()
				+ ОбъектСДаннымиДокумента.ТитулФрахтователяПрилагаемыеСертификатыПаспортаКачестваИДр.Количество();
		Иначе
			КоличествоДокументов = 	КоличествоСтрокВТаблицеСтруктурыРеквизитов(СтруктураРеквизитов, "ТитулФрахтователяПрилагаемыеКЗаказуНарядуДокументы")
				+ КоличествоСтрокВТаблицеСтруктурыРеквизитов(СтруктураРеквизитов, "ТитулФрахтователяПрилагаемыеСертификатыПаспортаКачестваИДр"); 	
		КонецЕсли;
		
		Если КоличествоДокументов > 0 Тогда
			ЧислоДокументов = ПолучитьСклоненияСтрокиПоЧислу("", КоличествоДокументов, "документ", "ЧС=Количественное", "ПД=Винительный")[0];
		Иначе
			ЧислоДокументов = "";		
		КонецЕсли;
		
		Если СтруктураРеквизитов = Неопределено Тогда
			СопроводительнаяВедомость = ОбъектСДаннымиДокумента.ТитулФрахтователяСопроводительнаяВедомостьНаименованиеДокумента;
		Иначе
			СопроводительнаяВедомость = ЗначениеРеквизитаСтруктурыРеквизитов(СтруктураРеквизитов, 
				"ТитулФрахтователяСопроводительнаяВедомостьНаименованиеДокумента");	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СопроводительнаяВедомость) Тогда
			Шаблон = "%1%2";
			Если КоличествоДокументов > 0 Тогда
				Ведомость = ", сопроводительная ведомость";
			Иначе
				Ведомость = "Сопроводительная ведомость";
			КонецЕсли;
			Заголовок = СтрШаблон(Шаблон, ЧислоДокументов, Ведомость);
		Иначе
			Заголовок = ЧислоДокументов;	
		КонецЕсли;
		
		Возврат Заголовок;
			
	ИначеЕсли ПутьКЭлементуФормы = "ЗаполнитьТитулФрахтователяПодачаОтметкиФрахтователя" Тогда
		 
		Заголовок = ПолучитьКоличествоОбъектовТабЧасти(ОбъектСДаннымиДокумента, "ТитулФрахтователяПодачаОтметкиФрахтователя", "отметка", "", СтруктураРеквизитов);
		
		Возврат Заголовок;
		
	ИначеЕсли ПутьКЭлементуФормы = "ЗаполнитьТитулФрахтовщикаВозвратОтметкиФрахтовщика" Тогда
		 
		Заголовок = ПолучитьКоличествоОбъектовТабЧасти(ОбъектСДаннымиДокумента, "ТитулФрахтовщикаВозвратОтметкиФрахтовщика", "отметка", "", СтруктураРеквизитов);
		
		Возврат Заголовок;
			
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ОсобоеОформлениеДляЗаполненногоЭлементаВедомости(ПутьКЭлементуФормы, ОбъектСДаннымиДокумента, СтруктураРеквизитов)
	
	Если ПутьКЭлементуФормы = "ЗаполнитьТитулПеревозчикаСведенияОГрузе" Тогда
		
		Количество = ПолучитьКоличествоОбъектовТабЧасти(ОбъектСДаннымиДокумента, "ТитулПеревозчикаОписаниеГруза", "груз", "", СтруктураРеквизитов);
		Если СтруктураРеквизитов = Неопределено Тогда
			Сумма = ОбъектСДаннымиДокумента["ТитулПеревозчикаСтоимостьГруза"];
			Валюта = ОбъектСДаннымиДокумента["СсылкаТитулПеревозчикаВалютаСтоимости"];
		Иначе
			Сумма = ЗначениеРеквизитаСтруктурыРеквизитов(СтруктураРеквизитов, "ТитулПеревозчикаСтоимостьГруза");
			Валюта = ЗначениеРеквизитаСтруктурыРеквизитов(СтруктураРеквизитов, "СсылкаТитулПеревозчикаВалютаСтоимости");
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Сумма) Тогда
			Сумма = "0";	
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Валюта) Тогда
			Валюта = "RUB";	
		КонецЕсли;
		Шаблон = "%1 на %2 %3";
		
		Заголовок = СтрШаблон(Шаблон, Количество, Сумма, Валюта);
		
		Возврат Заголовок;
	
	ИначеЕсли ПутьКЭлементуФормы = "ЗаполнитьТитулПеревозчикаСведенияОКонтейнерахСдача" Тогда 
	
		Заголовок = ПолучитьКоличествоОбъектовТабЧасти(ОбъектСДаннымиДокумента, "ТитулПеревозчикаСведенияОКонтейнерах", "контейнер", "", СтруктураРеквизитов);
		
		Возврат Заголовок;
		
	ИначеЕсли ПутьКЭлементуФормы = "ЗаполнитьТитулПеревозчикаВодители" Тогда
		
		МассивИменРеквизитов = Новый Массив;
		МассивИменРеквизитов.Добавить("Имя");
		МассивИменРеквизитов.Добавить("Фамилия");
		
		Заголовок = ПредставлениеДанныхТабЧасти(ОбъектСДаннымиДокумента,
			"ТитулПеревозчикаВодители",
			МассивИменРеквизитов,
			"%1 %2",
			"водитель",
			СтруктураРеквизитов);
			
		Возврат Заголовок;
		
	ИначеЕсли ПутьКЭлементуФормы = "ЗаполнитьТитулПеревозчикаСведенияОПутевомЛистеПутевыхЛистах" Тогда
		
		Заголовок = ПолучитьКоличествоОбъектовТабЧасти(ОбъектСДаннымиДокумента,
			"ТитулПеревозчикаСведенияОПутевомЛистеПутевыхЛистах",
			"путевой лист",
			"",
			СтруктураРеквизитов);
		
		Возврат Заголовок;
																						
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ОсобоеОформлениеДляЗаказаЗаявки(ПутьКЭлементуФормы, ОбъектСДаннымиДокумента, СтруктураРеквизитов)
	
	Если ПутьКЭлементуФормы = "ЗаполнитьТитулГрузоотправителяГрузы" Тогда
		
		Заголовок = ПолучитьКоличествоОбъектовТабЧасти(ОбъектСДаннымиДокумента, "ТитулГрузоотправителяГрузы", "груз", "", СтруктураРеквизитов);
		
		Возврат Заголовок;
		
	ИначеЕсли ПутьКЭлементуФормы = "ЗаполнитьТитулГрузоотправителяАдресаПунктовПогрузкиИВыгрузки" Тогда
		
		Заголовок = ПолучитьКоличествоОбъектовТабЧасти(ОбъектСДаннымиДокумента, "ТитулГрузоотправителяАдресаПунктовПогрузкиИВыгрузки", "адрес", "", СтруктураРеквизитов);
		
		Возврат Заголовок;
		
	ИначеЕсли ПутьКЭлементуФормы = "ЗаполнитьТитулГрузоотправителяДоговор" Тогда
		
		Наименование = ЗначениеРеквизитаСтруктурыРеквизитов(СтруктураРеквизитов, "ТитулГрузоотправителяДоговорНаименование");
		Номер = ЗначениеРеквизитаСтруктурыРеквизитов(СтруктураРеквизитов, "ТитулГрузоотправителяДоговорНомер");
		Дата = ЗначениеРеквизитаСтруктурыРеквизитов(СтруктураРеквизитов, "ТитулГрузоотправителяДоговорДата");
		
		Заголовок = СтрШаблон("%1 %2 от %3", Наименование, Номер, Формат(Дата, "ДЛФ=D;"));
		
		Возврат Заголовок;
		
	ИначеЕсли ПутьКЭлементуФормы = "ЗаполнитьТитулГрузоотправителяУполномоченныеЛица" Тогда
		
		Заголовок = ПолучитьКоличествоОбъектовТабЧасти(ОбъектСДаннымиДокумента, "ТитулГрузоотправителяУполномоченныеЛица", "уполномоченное лицо", "", СтруктураРеквизитов);
			
		Возврат Заголовок;
		
	ИначеЕсли ПутьКЭлементуФормы = "ЗаполнитьТитулПеревозчикаСоставительДоверенность" Тогда
		
		Наименование = ЗначениеРеквизитаСтруктурыРеквизитов(СтруктураРеквизитов, "ТитулПеревозчикаСоставительДоверенностьНаименование");
		Номер = ЗначениеРеквизитаСтруктурыРеквизитов(СтруктураРеквизитов, "ТитулПеревозчикаСоставительДоверенностьНомер");
		Дата = ЗначениеРеквизитаСтруктурыРеквизитов(СтруктураРеквизитов, "ТитулПеревозчикаСоставительДоверенностьДата");
		
		Заголовок = СтрШаблон("%1 %2 от %3", Наименование, Номер, Формат(Дата, "ДЛФ=D;"));
		
		Возврат Заголовок;
		
	ИначеЕсли ПутьКЭлементуФормы = "ЗаполнитьТитулПеревозчикаДоверенность" Тогда
		
		Наименование = ЗначениеРеквизитаСтруктурыРеквизитов(СтруктураРеквизитов, "ТитулПеревозчикаДоверенностьНаименование");
		Номер = ЗначениеРеквизитаСтруктурыРеквизитов(СтруктураРеквизитов, "ТитулПеревозчикаДоверенностьНомер");
		Дата = ЗначениеРеквизитаСтруктурыРеквизитов(СтруктураРеквизитов, "ТитулПеревозчикаДоверенностьДата");
		
		Заголовок = СтрШаблон("%1 %2 от %3", Наименование, Номер, Формат(Дата, "ДЛФ=D;"));
		
		Возврат Заголовок;
		
	ИначеЕсли ПутьКЭлементуФормы = "ЗаполнитьТитулПеревозчикаВодители" Тогда
		
		МассивИменРеквизитов = Новый Массив;
		МассивИменРеквизитов.Добавить("Имя");
		МассивИменРеквизитов.Добавить("Фамилия");
		
		Заголовок = ПредставлениеДанныхТабЧасти(ОбъектСДаннымиДокумента,
			"ТитулПеревозчикаВодители",
			МассивИменРеквизитов,
			"%1 %2",
			"водитель",
			СтруктураРеквизитов);
			
		Возврат Заголовок;
		
	ИначеЕсли ПутьКЭлементуФормы = "ЗаполнитьТитулПеревозчикаРазмерПлатыИПорядокРасчетов" Тогда
		
		Если СтруктураРеквизитов = Неопределено Тогда 
			Сумма = ОбъектСДаннымиДокумента["ТитулПеревозчикаСтоимостьПеревозкиБезНалога"];
			Валюта = ОбъектСДаннымиДокумента["СсылкаТитулПеревозчикаВалютаСтоимости"];
		Иначе
			Сумма = ЗначениеРеквизитаСтруктурыРеквизитов(СтруктураРеквизитов, "ТитулПеревозчикаСтоимостьПеревозкиБезНалога");
			Валюта = ЗначениеРеквизитаСтруктурыРеквизитов(СтруктураРеквизитов, "СсылкаТитулПеревозчикаВалютаСтоимости");
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Сумма) Тогда
			Сумма = "0";	
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Валюта) Тогда
			Валюта = "RUB";	
		КонецЕсли;
		
		Заголовок = СтрШаблон("%1 %2 (без НДС)", Сумма, Валюта);
		
		Возврат Заголовок;	
	
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ОсобоеОформлениеДляДоговораФрахтования(ПутьКЭлементуФормы, ОбъектСДаннымиДокумента, СтруктураРеквизитов)
	
	Заголовок = Неопределено;
	
	Если ПутьКЭлементуФормы = "ЗаполнитьТитулФрахтователяРазмерПлатыЗаПользованиеТранспортнымСредством" Тогда
		
		Если СтруктураРеквизитов = Неопределено Тогда 
			Сумма = ОбъектСДаннымиДокумента["ТитулФрахтователяСтоимостьУслуги"];
		Иначе
			Сумма = ЗначениеРеквизитаСтруктурыРеквизитов(СтруктураРеквизитов, "ТитулФрахтователяСтоимостьУслуги");
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Сумма) Тогда
			Сумма = "0";	
		КонецЕсли;
		Валюта = "RUB";	
		
		Заголовок = СтрШаблон("%1 %2", Сумма, Валюта);
		
	ИначеЕсли ПутьКЭлементуФормы = "ЗаполнитьТитулФрахтователяНаименованиеГруза" Тогда
	
		Заголовок = ПолучитьКоличествоОбъектовТабЧасти(ОбъектСДаннымиДокумента, "ТитулФрахтователяОписаниеГруза", "груз", "", СтруктураРеквизитов);
		
	ИначеЕсли ПутьКЭлементуФормы = "ЗаполнитьТитулФрахтователяСведенияОМаршрутеПеревозки" Тогда
		
		Если СтруктураРеквизитов = Неопределено Тогда 
			МаршрутТекстовыйФормат = ОбъектСДаннымиДокумента["ТитулФрахтователяМаршрутТекстовыйФормат"];
			МаршрутМашиночитаемыйФормат = ОбъектСДаннымиДокумента["ТитулФрахтователяМаршрутМашиночитаемыйФормат"];
		Иначе
			МаршрутТекстовыйФормат = ЗначениеРеквизитаСтруктурыРеквизитов(СтруктураРеквизитов, "ТитулФрахтователяМаршрутТекстовыйФормат");
			МаршрутМашиночитаемыйФормат = ЗначениеРеквизитаСтруктурыРеквизитов(СтруктураРеквизитов, "ТитулФрахтователяМаршрутМашиночитаемыйФормат");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(МаршрутТекстовыйФормат) Тогда
			Если СтрДлина(МаршрутТекстовыйФормат) > 50 Тогда
				Заголовок = Лев(МаршрутТекстовыйФормат, 47) + "...";
			Иначе
				Заголовок = МаршрутТекстовыйФормат;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(МаршрутМашиночитаемыйФормат) Тогда
			Заголовок = "<Машиночитаемый формат>";
		КонецЕсли;
		
	ИначеЕсли ПутьКЭлементуФормы = "ЗаполнитьТитулФрахтователяОснованиеСоставленияФайла" Тогда
		
		Наименование = ЗначениеРеквизитаСтруктурыРеквизитов(СтруктураРеквизитов, "ТитулФрахтователяОснованиеСоставленияФайлаНаименование");
		Номер = ЗначениеРеквизитаСтруктурыРеквизитов(СтруктураРеквизитов, "ТитулФрахтователяОснованиеСоставленияФайлаНомер");
		Дата = ЗначениеРеквизитаСтруктурыРеквизитов(СтруктураРеквизитов, "ТитулФрахтователяОснованиеСоставленияФайлаДата");
		
		Заголовок = СтрШаблон("%1 %2 от %3", Наименование, Номер, Формат(Дата, "ДЛФ=D;"));
		
	ИначеЕсли ПутьКЭлементуФормы = "ЗаполнитьТитулФрахтовщикаОснованиеСоставленияФайла" Тогда
		
		Наименование = ЗначениеРеквизитаСтруктурыРеквизитов(СтруктураРеквизитов, "ТитулФрахтовщикаОснованиеСоставленияФайлаНаименование");
		Номер = ЗначениеРеквизитаСтруктурыРеквизитов(СтруктураРеквизитов, "ТитулФрахтовщикаОснованиеСоставленияФайлаНомерДокумента");
		Дата = ЗначениеРеквизитаСтруктурыРеквизитов(СтруктураРеквизитов, "ТитулФрахтовщикаОснованиеСоставленияФайлаДатаДокумента");
		
		Заголовок = СтрШаблон("%1 %2 от %3", Наименование, Номер, Формат(Дата, "ДЛФ=D;"));
		
	ИначеЕсли ПутьКЭлементуФормы = "ЗаполнитьТитулФрахтовщикаСведенияОТранспортномСредстве" Тогда
		
		РегистрационныйНомер = ЗначениеРеквизитаСтруктурыРеквизитов(СтруктураРеквизитов,
					"РегистрационныйНомер", "ТитулФрахтовщикаСведенияОТранспортномСредстве", 1);
					
		ВодительФамилия = ЗначениеРеквизитаСтруктурыРеквизитов(СтруктураРеквизитов,
					"Фамилия", "ТитулФрахтовщикаСведенияОВодителе", 1);
		ВодительИмя = ЗначениеРеквизитаСтруктурыРеквизитов(СтруктураРеквизитов,
					"Имя", "ТитулФрахтовщикаСведенияОВодителе", 1);
					
		Если ЗначениеЗаполнено(РегистрационныйНомер) Тогда
			Заголовок = Строка(РегистрационныйНомер) + ", ";
		КонецЕсли;
					
		Если ЗначениеЗаполнено(ВодительФамилия) Тогда
			Заголовок = Строка(Заголовок) + ВодительФамилия + " " + ВодительИмя;
		КонецЕсли;
					
	КонецЕсли;
	
	Возврат Заголовок;
	
КонецФункции

Функция ОсобоеОформлениеДляПутевогоЛиста(ПутьКЭлементуФормы, ОбъектСДаннымиДокумента, СтруктураРеквизитов)
	
	Если ПутьКЭлементуФормы = "ЗаполнитьТитулОформлениеАдресаПунктовПогрузкиИВыгрузки" Тогда
		
		Заголовок = ПолучитьКоличествоОбъектовТабЧасти(ОбъектСДаннымиДокумента, "ТитулОформлениеАдресаПунктовПогрузкиИВыгрузки", "адрес", "", СтруктураРеквизитов);
		
		Возврат Заголовок;
		
	ИначеЕсли ПутьКЭлементуФормы = "ЗаполнитьТитулОформлениеГрузоотправители" Тогда
		
		МассивИменРеквизитов = Новый Массив;
		МассивИменРеквизитов.Добавить("ГрузоотправительЮЛНаименование");
		МассивИменРеквизитов.Добавить("ГрузоотправительИПФамилия");
		МассивИменРеквизитов.Добавить("ГрузоотправительИПИмя");
		МассивИменРеквизитов.Добавить("ГрузоотправительИПОтчество");
		МассивИменРеквизитов.Добавить("ГрузоотправительФЛФамилия");
		МассивИменРеквизитов.Добавить("ГрузоотправительФЛИмя");
		МассивИменРеквизитов.Добавить("ГрузоотправительФЛОтчество");
		
		Заголовок = ПредставлениеДанныхТабЧасти(ОбъектСДаннымиДокумента,
			"ТитулОформлениеГрузоотправители",
			МассивИменРеквизитов,
			"%1 %2",
			"грузоотправитель",
			СтруктураРеквизитов);
		
		Возврат Заголовок;
		
	ИначеЕсли ПутьКЭлементуФормы = "ЗаполнитьТитулОформлениеВодители" Тогда
		
		МассивИменРеквизитов = Новый Массив;
		МассивИменРеквизитов.Добавить("Имя");
		МассивИменРеквизитов.Добавить("Фамилия");
		
		Заголовок = ПредставлениеДанныхТабЧасти(ОбъектСДаннымиДокумента,
			"ТитулОформлениеВодители",
			МассивИменРеквизитов,
			"%1 %2",
			"водитель",
			СтруктураРеквизитов);
			
		Возврат Заголовок;
	
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПредставлениеДанныхТабЧасти(ОбъектСДаннымиДокумента, 
	ТабличнаяЧасть,
	МассивИменРеквизитов,
	Знач Шаблон,
	НаименованиеОбъектаСчета = "",
	СтруктураРеквизитов = Неопределено)
	
	Если СтруктураРеквизитов = Неопределено Тогда
		КоличествоСтрок = ОбъектСДаннымиДокумента[ТабличнаяЧасть].Количество();
	Иначе
		КоличествоСтрок = КоличествоСтрокВТаблицеСтруктурыРеквизитов(СтруктураРеквизитов, ТабличнаяЧасть);
	КонецЕсли;		
	
	Если КоличествоСтрок = 0 Тогда
		Заголовок = "";
	ИначеЕсли КоличествоСтрок = 1 Тогда
		Заголовок = ПредставлениеДанныхТабЧастиПоОднойСтроке(ОбъектСДаннымиДокумента,
			ТабличнаяЧасть, МассивИменРеквизитов, Шаблон, СтруктураРеквизитов);	
	Иначе
		Заголовок = ПолучитьКоличествоОбъектовТабЧасти(ОбъектСДаннымиДокумента,
			ТабличнаяЧасть, НаименованиеОбъектаСчета, "", СтруктураРеквизитов);		
	КонецЕсли;
	
	Возврат Заголовок;
	
КонецФункции

Функция ПредставлениеДанныхТабЧастиПоОднойСтроке(ОбъектСДаннымиДокумента,
	ТабличнаяЧасть,
	МассивИменРеквизитов,
	Знач Шаблон,
	СтруктураРеквизитов)

	Индекс = 1;
	Для Каждого ИмяРеквизита Из МассивИменРеквизитов Цикл
		Если СтруктураРеквизитов = Неопределено Тогда
			Данные = ОбъектСДаннымиДокумента[ТабличнаяЧасть][0][ИмяРеквизита];
		Иначе
			Данные = ЗначениеРеквизитаСтруктурыРеквизитов(СтруктураРеквизитов, ИмяРеквизита, ТабличнаяЧасть, 1);
		КонецЕсли;
		
		Шаблон = СтрЗаменить(Шаблон, "%" + Формат(Индекс, "ЧГ="), Данные);
		Индекс = Индекс + 1;
	КонецЦикла;	
	
	Возврат СокрЛП(Шаблон);
	
КонецФункции

Функция ПолучитьКоличествоОбъектовТабЧасти(ОбъектСДаннымиДокумента,
	ТабличнаяЧасть,
	НаименованиеОбъектаСчета,
	ИдентификаторСтроки = "",
	СтруктураРеквизитов = Неопределено)
	
	Если СтруктураРеквизитов = Неопределено Тогда
		Если Не ПустаяСтрока(ИдентификаторСтроки) Тогда
			СтруктураОтбора = Новый Структура("ИдентификаторСтрокиРодителя", ИдентификаторСтроки);
			НаборСтрок = ОбъектСДаннымиДокумента[ТабличнаяЧасть].НайтиСтроки(СтруктураОтбора);
		Иначе
			НаборСтрок = ОбъектСДаннымиДокумента[ТабличнаяЧасть];
		КонецЕсли;
		Количество = НаборСтрок.Количество();
	Иначе
		Если Не ПустаяСтрока(ИдентификаторСтроки) Тогда
			Количество = 0;
			КоличествоСтрок = КоличествоСтрокВТаблицеСтруктурыРеквизитов(СтруктураРеквизитов, ТабличнаяЧасть);
			Для й = 1 По КоличествоСтрок Цикл
				Значение = ЗначениеРеквизитаСтруктурыРеквизитов(СтруктураРеквизитов, 
					"ИдентификаторСтрокиРодителя", ТабличнаяЧасть, й);
				Если Значение = Неопределено Тогда
					Прервать;
				КонецЕсли;
				Количество = Количество + 1;
			КонецЦикла;
		Иначе
			Количество = КоличествоСтрокВТаблицеСтруктурыРеквизитов(СтруктураРеквизитов, ТабличнаяЧасть);	
		КонецЕсли;	
	КонецЕсли;
	
	Результат = ПолучитьСклоненияСтрокиПоЧислу("", Количество, НаименованиеОбъектаСчета, "ЧС=Количественное", "ПД=Именительный");
	
	Возврат Результат[0];	
	
КонецФункции

#КонецОбласти

#Область ДеревоСоответствийИменРеквизитов


Функция НовоеДеревоСоответствий()
	
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка", , , , , , );
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	
	ДеревоЗначений = Новый ДеревоЗначений;
	
	ДеревоЗначений.Колонки.Добавить("Наименование", ОписаниеТиповСтрока);
	ДеревоЗначений.Колонки.Добавить("ЭлементСхемы", ОписаниеТиповСтрока);
	ДеревоЗначений.Колонки.Добавить("ЭтоРеквизит", ОписаниеТиповБулево);
	ДеревоЗначений.Колонки.Добавить("ЭтоОбязательнаяСтруктура", ОписаниеТиповБулево);
	ДеревоЗначений.Колонки.Добавить("СтруктураХраненияРеквизита");
	ДеревоЗначений.Колонки.Добавить("СтруктураПроверкиОбязательности");
	ДеревоЗначений.Колонки.Добавить("Обязательный", ОписаниеТиповБулево);
	ДеревоЗначений.Колонки.Добавить("РодительОбязателенУсловно", ОписаниеТиповБулево);
	ДеревоЗначений.Колонки.Добавить("ЕстьЭлементНаФорме", ОписаниеТиповБулево);
	ДеревоЗначений.Колонки.Добавить("НужноОтражатьОтметку", ОписаниеТиповБулево);
	ДеревоЗначений.Колонки.Добавить("ПутьКЭлементуФормы", ОписаниеТиповСтрока);
	
	Возврат ДеревоЗначений;
	
КонецФункции

Функция СоздатьПолучитьСтрокуДерева(СтрокаДляРазбора, ДеревоСоответствий, ОбрабатываемыйУзелСхемы)

	СтрокаДляРазбора = Сред(СтрокаДляРазбора, 3);

	МассивИменСтрокДерева = СтрРазделить(СтрокаДляРазбора, "/");
	МассивИменСтрокСоединения = Новый Массив;
	
	ТекущаяСтрокаДерева = ДеревоСоответствий;
	Для Каждого ИмяСтроки Из МассивИменСтрокДерева Цикл
		
		МассивИменСтрокСоединения.Добавить(ИмяСтроки);
		
		СтрокаДерева = ТекущаяСтрокаДерева.Строки.Найти(ИмяСтроки, "Наименование");
		Если СтрокаДерева = Неопределено Тогда 
			СтрокаДерева = ТекущаяСтрокаДерева.Строки.Добавить();
			СтрокаДерева.ЭтоРеквизит = Ложь;
			СтрокаДерева.ЭтоОбязательнаяСтруктура = Ложь;
			СтрокаДерева.Наименование = ИмяСтроки;
			СтрокаДерева.ЭлементСхемы = "//" + СтрСоединить(МассивИменСтрокСоединения, "/");
			// Все узлы схемы до обрабатываемого устанавливаются обязательными
			Если СтрНайти(СтрокаДерева.ЭлементСхемы, ОбрабатываемыйУзелСхемы) = 0
				Или СтрокаДерева.ЭлементСхемы = ОбрабатываемыйУзелСхемы Тогда
				СтрокаДерева.Обязательный = Истина;
			Иначе
				СтрокаДерева.Обязательный = Ложь;
			КонецЕсли;
			
			Если СтрокаДерева.Родитель <> Неопределено Тогда
				РодительОбязателенУсловно = ЕстьПроверкаОбязательности(СтрокаДерева.Родитель.СтруктураПроверкиОбязательности)
					Или СтрокаДерева.Родитель.РодительОбязателенУсловно;
				СтрокаДерева.РодительОбязателенУсловно = РодительОбязателенУсловно;
			Иначе
				СтрокаДерева.РодительОбязателенУсловно = Ложь;
			КонецЕсли; 
			
			СтрокаДерева.ЕстьЭлементНаФорме = Ложь;
		КонецЕсли;
		
		ТекущаяСтрокаДерева = СтрокаДерева;
		
	КонецЦикла;
	
	Возврат ТекущаяСтрокаДерева;
	
КонецФункции

Функция ДополнитьДеревоСоответствий(СтруктураПараметров)
	
	Область = СтруктураПараметров.Область;
	ОбрабатываемыйУзелСхемы = СтруктураПараметров.ОбрабатываемыйУзелСхемы;
	ИмяФормы = СтруктураПараметров.ИмяФормы;
	ДеревоСоответствий = СтруктураПараметров.ДеревоСоответствий;
	ФормируютсяСтруктуры = СтруктураПараметров.ФормируютсяСтруктуры;
	ТипДокумента = СтруктураПараметров.ТипДокумента;
	ДобавитьПрефиксДопРеквизитамПроверки = СтруктураПараметров.ДобавитьПрефиксДопРеквизитамПроверки;
	СоответствиеНаличияПолей = СтруктураПараметров.СоответствиеНаличияПолей;
	
	МакетСоответствийИменРеквизитов = СтруктураПараметров.МакетСоответствийИменРеквизитов;
	Если МакетСоответствийИменРеквизитов.Области.Найти(Область) = Неопределено Тогда
		Возврат ДеревоСоответствий;	
	КонецЕсли;
	
	ОбластьСоответствий = МакетСоответствийИменРеквизитов.ПолучитьОбласть(Область);
	
	ИндексСтроки = 0;
	Пока Истина Цикл
		
		ИндексСтроки = ИндексСтроки + 1;
		
		НаименованиеРеквизита = ОбластьСоответствий.Область(ИндексСтроки, 1).Текст;
		Если ПустаяСтрока(НаименованиеРеквизита) Тогда 
			Прервать;
		КонецЕсли;
				
		// Формирование строки дерева
		ТекстОбласти = СокрЛП(ОбластьСоответствий.Область(ИндексСтроки, 2).Текст);
		Если СтрНайти(ТекстОбласти, ОбрабатываемыйУзелСхемы) = 0
			Или ТекстОбласти = ОбрабатываемыйУзелСхемы Тогда
			Продолжить;
		КонецЕсли;
		ТекущаяСтрокаДерева = СоздатьПолучитьСтрокуДерева(ТекстОбласти, ДеревоСоответствий, ОбрабатываемыйУзелСхемы);
		
		// Получение структуры хранения реквизита
		СтруктураХраненияРеквизита = ДанныеОбработкиРеквизитов(НаименованиеРеквизита, ТипДокумента);
		ЭтоРеквизитТабЧасти = СтруктураХраненияРеквизита.ЭтоРеквизитТабЧасти;
		НаименованиеТаблицы = СтруктураХраненияРеквизита.ТабличнаяЧастьРеквизита;
		НаименованиеРеквизита = СтруктураХраненияРеквизита.Реквизит;
		
		// Проверка наличия реквизита документа в реквизитах формы
		ЭтоСтрокаТабЧастиВВидеФормы = ЭтоСтрокаТабЧастиВВидеФормы(ИмяФормы, ТипДокумента);
		Если ЭтоСтрокаТабЧастиВВидеФормы Тогда
			НаименованиеТаблицы = "";		
		КонецЕсли; 
		
		Если ЭтоРеквизитТабЧасти
			И Не ЭтоСтрокаТабЧастиВВидеФормы Тогда
			Шаблон = "%1.%2";
			ПутьКДаннымЭлементаФормы = СтрШаблон(Шаблон, НаименованиеТаблицы, НаименованиеРеквизита);
		Иначе
			Шаблон = "%1%2";
			ПутьКДаннымЭлементаФормы = НаименованиеРеквизита;
		КонецЕсли;

		ПутьКЭлементуФормы = СоответствиеНаличияПолей[ПутьКДаннымЭлементаФормы]; 
		ЕстьЭлементНаФорме = ПутьКЭлементуФормы <> Неопределено;
		
		Если Не ЕстьЭлементНаФорме Тогда
			ПутьКЭлементуФормы = "";
		КонецЕсли;
		
		// Получение признака обязательности
		ТекстОбласти = СокрЛП(ОбластьСоответствий.Область(ИндексСтроки, 3).Текст);
		Обязательный = ЭтоПризнакОбязательногоРеквизитаВМакете(ТекстОбласти);
		
		// Получение условия обязательности
		УсловиеПроверки = СокрЛП(ОбластьСоответствий.Область(ИндексСтроки, 6).Текст);
		
		// Получение реквизита для проверки условной обязательности
		РеквизитПроверкиОбязательности = СокрЛП(ОбластьСоответствий.Область(ИндексСтроки, 5).Текст);
		СтруктураПроверкиОбязательности = ДанныеОбработкиРеквизитов(РеквизитПроверкиОбязательности,
			ТипДокумента,
			УсловиеПроверки,
			ДобавитьПрефиксДопРеквизитамПроверки);
		
		Если ТекущаяСтрокаДерева.РодительОбязателенУсловно Тогда
			РодительОбязателенУсловно = Истина;
		Иначе                                                 
			Если ТекущаяСтрокаДерева.Родитель <> Неопределено Тогда
				РодительОбязателенУсловно = ЕстьПроверкаОбязательности(ТекущаяСтрокаДерева.Родитель.СтруктураПроверкиОбязательности)
					Или ТекущаяСтрокаДерева.Родитель.РодительОбязателенУсловно;
			Иначе
				РодительОбязателенУсловно = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// Когда строка таб. части открыта в отдельной форме, исключаем табличные части у реквизита и
		// у проверки. У проверки таб. часть исключается если она идентична таб. части реквизита
		Если ЭтоСтрокаТабЧастиВВидеФормы Тогда
			ТабличнаяЧасть = СтруктураХраненияРеквизита.ТабличнаяЧастьРеквизита;
			СтруктураХраненияРеквизита.ТабличнаяЧастьРеквизита = "";
			СтруктураХраненияРеквизита.ЭтоРеквизитТабЧасти = Ложь;
			
			Если ТипЗнч(СтруктураПроверкиОбязательности) = Тип("Массив") Тогда
				Для Каждого СтрокаМассива Из СтруктураПроверкиОбязательности Цикл
					Если СтрокаМассива.ТабличнаяЧастьРеквизита = ТабличнаяЧасть Тогда
						СтрокаМассива.ТабличнаяЧастьРеквизита = "";
						СтрокаМассива.ЭтоРеквизитТабЧасти = Ложь;
					КонецЕсли;					
				КонецЦикла; 	
			Иначе  
				Если СтруктураПроверкиОбязательности.ТабличнаяЧастьРеквизита = ТабличнаяЧасть Тогда
					СтруктураПроверкиОбязательности.ТабличнаяЧастьРеквизита = "";
					СтруктураПроверкиОбязательности.ЭтоРеквизитТабЧасти = Ложь;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
		
		ТекущаяСтрокаДерева.СтруктураХраненияРеквизита = СтруктураХраненияРеквизита;
		ТекущаяСтрокаДерева.ЕстьЭлементНаФорме = ЕстьЭлементНаФорме;
		ТекущаяСтрокаДерева.РодительОбязателенУсловно = РодительОбязателенУсловно;
		ТекущаяСтрокаДерева.ПутьКЭлементуФормы = ПутьКЭлементуФормы;
		ТекущаяСтрокаДерева.Обязательный = Обязательный;
		ТекущаяСтрокаДерева.СтруктураПроверкиОбязательности = СтруктураПроверкиОбязательности;
		
		Если ФормируютсяСтруктуры Тогда
			ТекущаяСтрокаДерева.ЭтоОбязательнаяСтруктура = Истина;
			Если ТекущаяСтрокаДерева.СтруктураХраненияРеквизита.ЭтоТабЧасть
				Или ЕстьЭлементНаФорме Тогда
				ТекущаяСтрокаДерева.ЭтоРеквизит	= Истина;
			КонецЕсли;
		Иначе
			ТекущаяСтрокаДерева.ЭтоРеквизит	= Истина;
		КонецЕсли;
		
		ЕстьПроверкаОбязательности = ЕстьПроверкаОбязательности(СтруктураПроверкиОбязательности);
		ТекущаяСтрокаДерева.НужноОтражатьОтметку = ЕстьЭлементНаФорме И ТекущаяСтрокаДерева.ЭтоРеквизит
			И (ЕстьПроверкаОбязательности Или Обязательный);
		
		Если СтруктураХраненияРеквизита.ЭтоРеквизитТабЧасти Тогда
			ТекущийРодитель = ТекущаяСтрокаДерева.Родитель;
			ТабЧастьПроверки = СтруктураХраненияРеквизита.ТабличнаяЧастьРеквизита;
			Пока ТекущийРодитель <> Неопределено Цикл
				
				Если ТекущийРодитель.СтруктураХраненияРеквизита <> Неопределено Тогда
					Если ТекущийРодитель.СтруктураХраненияРеквизита.Реквизит = ТабЧастьПроверки Тогда
						ТекущийРодитель.СтруктураХраненияРеквизита.ЭтоТабЧасть = Истина;
					КонецЕсли;
				КонецЕсли;
				
				ТекущийРодитель = ТекущийРодитель.Родитель;	
			КонецЦикла;

		КонецЕсли;
		
	КонецЦикла;

	Возврат ДеревоСоответствий;
	
КонецФункции

#КонецОбласти 

#КонецОбласти

#КонецОбласти






