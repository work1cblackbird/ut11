////////////////////////////////////////////////////////////////////////////////
// Модуль "ПодборТоваровКлиент", содержит процедуры и функции необходимые для
// работы форм подбора товаров. Работа с отборами, обработчики событий элементов 
// форм.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ГорячиеКлавиши

// Процедура устанавливает текущим элементом нужную панель отборов в зависимости
// от установленного варианта навигации.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора.
//
Процедура УстановитьТекущийЭлементНавигация(Форма) Экспорт
	
	ВариантНавигации = Форма.ВариантНавигации;
	
	Если ВариантНавигации = ПредопределенноеЗначение("Перечисление.ВариантыНавигацииВФормахНоменклатуры.ПоИерархии") Тогда
		
		Форма.ТекущийЭлемент = Форма.Элементы.ИерархияНоменклатуры;
		
	ИначеЕсли ВариантНавигации = ПредопределенноеЗначение("Перечисление.ВариантыНавигацииВФормахНоменклатуры.ПоСвойствам")
			Или ВариантНавигации = ПредопределенноеЗначение("Перечисление.ВариантыНавигацииВФормахНоменклатуры.ПоВидамИСвойствам")
			Или ВариантНавигации = ПредопределенноеЗначение("Перечисление.ВариантыНавигацииВФормахНоменклатуры.ПоВидам") Тогда
		
		Форма.ТекущийЭлемент = Форма.Элементы.ДеревоОтборов;
		
	ИначеЕсли ВариантНавигации = ПредопределенноеЗначение("Перечисление.ВариантыНавигацииВФормахНоменклатуры.ПоСовместноПродаваемымТоварам") Тогда
		
		Форма.ТекущийЭлемент = Форма.Элементы.ТаблицаНоменклатураПродаваемаяСовместноПредпосылка;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает текущим элементом - список номенклатуры.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора.
//
Процедура УстановитьТекущийЭлементСписокТоваров(Форма) Экспорт
	
	Если Форма.НавигацияПоХарактеристикам Тогда
		Форма.ТекущийЭлемент = Форма.Элементы[ПодборТоваровКлиентСервер.ИмяСпискаХарактеристикПоВариантуПоиска(Форма)];
	Иначе
		Форма.ТекущийЭлемент = Форма.Элементы[ПодборТоваровКлиентСервер.ИмяСпискаНоменклатурыПоВариантуПоиска(Форма)];
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает текущим элементом - список подобранных товаров - корзину.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора.
//
Процедура УстановитьТекущийЭлементКорзина(Форма) Экспорт
	
	Форма.ТекущийЭлемент = Форма.Элементы.Корзина;
	
КонецПроцедуры

// Процедура устанавливает текущим элементом - список номенклатуры поставщика.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора.
//
Процедура УстановитьТекущийЭлементНоменклатураПартнера(Форма) Экспорт
	
	Форма.ТекущийЭлемент = Форма.Элементы[ПодборТоваровКлиентСервер.ИмяСпискаНоменклатурыПартнераПоВариантуПоиска(Форма)];
	
КонецПроцедуры

// Возвращает имя текущего элемента - строки поиска на форме подбора.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора.
//
// Возвращаемое значение:
//	Строка - имя текущего элемента строки поиска формы подбора.
//
Функция ИмяТекущегоЭлементаСтрокиПоиска(Форма) Экспорт
	
	ЭтоФормаПодбораВДокументыЗакупки = ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыЗакупки(Форма);
	ЭтоФормаПодбора = ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма);
	
	ИмяТекущегоЭлемента = "СтрокаПоискаНоменклатура";
	
	Если ЭтоФормаПодбора Тогда
		Если ЭтоФормаПодбораВДокументыЗакупки Тогда
			Если Форма.НавигацияПоНоменклатуреПартнера Тогда
				ИмяТекущегоЭлемента = "СтрокаПоискаНоменклатураПартнера";
			ИначеЕсли Форма.НавигацияПоХарактеристикам Тогда
				ИмяТекущегоЭлемента = "СтрокаПоискаХарактеристики";
			КонецЕсли;
		Иначе
			Если Форма.НавигацияПоХарактеристикам Тогда
				ИмяТекущегоЭлемента = "СтрокаПоискаХарактеристики";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИмяТекущегоЭлемента;

КонецФункции

// Процедура устанавливает текущим элементом строку поиска на форме.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора.
//
Процедура УстановитьТекущийЭлементСтрокаПоиска(Форма) Экспорт
	
	ВариантПоиска = ПодборТоваровКлиентСервер.ДействующийВариантПоиска(Форма);
	Если Не ВариантПоиска = "Расширенный" Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТекущегоЭлемента = ИмяТекущегоЭлементаСтрокиПоиска(Форма);
	
	Форма.ТекущийЭлемент = Форма.Элементы[ИмяТекущегоЭлемента];
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСКорзиной

// Вызывается перед закрытием формы подбора товаров. Если не установлен
// признак переноса товаров в корзину, а в корзине есть подобранные товары,
// то выдается вопрос.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора товаров,
//	Объект - ОбработкаОбъектИмяОбработки - обработка подбора товаров,
//	Отказ - Булево - переменная в которую записывается флаг отказа.
//
Процедура ПередЗакрытиемФормыПодбораТоваров(Форма, Объект, Отказ) Экспорт
	
	Если Форма.ПеренестиВДокумент ИЛИ Форма.ВыполняетсяЗакрытие Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Корзина.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'Подобранные товары не перенесены в документ. Перенести?'");
	
	Отказ = Истина;
	ПоказатьВопрос(
		Новый ОписаниеОповещения("ПередЗакрытиемФормыПодбораТоваровЗавершение", ЭтотОбъект, 
			Новый Структура("Форма", Форма)), 
		ТекстВопроса, 
		РежимДиалогаВопрос.ДаНетОтмена);
		
КонецПроцедуры

// Служебная процедура.
//
// Параметры:
//  РезультатВопроса		 - КодВозвратаДиалога	 - код выбранного ответа на вопрос
//  ДополнительныеПараметры	 - Структура			 - дополнительные параметры описания оповещения.
//
Процедура ПередЗакрытиемФормыПодбораТоваровЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	
	Если РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Форма.ПеренестиВДокумент = Истина;
		Форма.ВыполняетсяЗакрытие = Истина;
		Форма.Закрыть(КодВозвратаДиалога.OK);
		Форма.ВыполняетсяЗакрытие = Ложь;
		Возврат;
	КонецЕсли;
	
	Форма.ВыполняетсяЗакрытие = Истина;
	Форма.Закрыть();
	Форма.ВыполняетсяЗакрытие = Ложь;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

// Процедура вызывается при активизации строки списка иерархии номенклатуры.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка, форма подборов.
//
Процедура ПриАктивизацииСтрокиИерархииНоменклатуры(Форма) Экспорт
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"ОбщийМодуль.ПодборТоваровКлиент.ПриАктивизацииСтрокиИерархииНоменклатуры");
	
	Если Не (Форма.ВариантНавигации = ПредопределенноеЗначение("Перечисление.ВариантыНавигацииВФормахНоменклатуры.ПоИерархии")) Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.ТекущаяИерархияНоменклатуры = Форма.Элементы.ИерархияНоменклатуры.ТекущаяСтрока Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ТекущаяИерархияНоменклатуры = Форма.Элементы.ИерархияНоменклатуры.ТекущаяСтрока;
	
	Если Не Форма.ИспользоватьФильтры Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ПодключитьОбработчикОжидания("ИерархияНоменклатурыПриАктивизацииСтрокиОбработчикОжидания", 0.1, Истина);
	
КонецПроцедуры

// Процедура вызывается при активизации строки списка иерархии номенклатуры.
//
// Параметры:
//	Форма - см. ПодборТоваровСервер.ПриСозданииФормыПодбораНаСервере.Форма
//
Процедура ОбработчикАктивизацииСтрокиИерархииНоменклатуры(Форма) Экспорт
	
	ПодборТоваровКлиентСервер.УстановитьОтборПоИерархииНоменклатуры(Форма);
	
	Если ЗначениеЗаполнено(Форма.СтрокаПоискаНоменклатура) Тогда
		ВыполнениеРасширенногоПоискаВозможно(Форма, Новый ОписаниеОповещения("ВыполнитьПоискНоменклатурыЗавершение", Форма));
	КонецЕсли;
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма) И Форма.НавигацияПоХарактеристикам Тогда
		ПерейтиКСпискуНоменклатуры(Форма);
	КонецЕсли;

КонецПроцедуры

// Процедура вызывается при активизации строки списка видов номенклатуры.
//
// Параметры:
//	Форма - см. ПодборТоваровСервер.ПриСозданииФормыПодбораНаСервере.Форма
//
Процедура ПриАктивизацииСтрокиСпискаВидыНоменклатуры(Форма) Экспорт
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"ОбщийМодуль.ПодборТоваровКлиент.ПриАктивизацииСтрокиСпискаВидыНоменклатуры");
	
	Если Не (Форма.ВариантНавигации = ПредопределенноеЗначение("Перечисление.ВариантыНавигацииВФормахНоменклатуры.ПоСвойствам")
		Или Форма.ВариантНавигации = ПредопределенноеЗначение("Перечисление.ВариантыНавигацииВФормахНоменклатуры.ПоВидамИСвойствам")
		Или Форма.ВариантНавигации = ПредопределенноеЗначение("Перечисление.ВариантыНавигацииВФормахНоменклатуры.ПоВидам")) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Форма.Элементы.ВидыНоменклатуры.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено
		Или Форма.ВидНоменклатуры = ТекущиеДанные.Ссылка Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ВидНоменклатуры = ТекущиеДанные.Ссылка;

	Если Не Форма.ИспользоватьФильтры Тогда
		Возврат;
	КонецЕсли;
		
	Форма.ПодключитьОбработчикОжидания("ВидыНоменклатурыПриАктивизацииСтрокиОбработчикОжидания", 0.1, Истина);
КонецПроцедуры

// Процедура вызывается при активизации строки списка иерархии номенклатуры поставщика.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка, форма подборов.
//
Процедура ПриАктивизацииСтрокиИерархииНоменклатурыПартнера(Форма) Экспорт
	
	Если Не Форма.ИспользоватьФильтрНоменклатураПартнера Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ПодключитьОбработчикОжидания("ИерархияНоменклатурыПартнераПриАктивизацииСтрокиОбработчикОжидания", 0.1, Истина);
	
КонецПроцедуры

// Процедура вызывается при активизации строки списка номенклатуры.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка.
//
Процедура ПриАктивизацииСтрокиСпискаНоменклатуры(Форма) Экспорт
	
	Форма.ПодключитьОбработчикОжидания("СписокПриАктивизацииСтрокиОбработчикОжидания", 0.1, Истина);
	
КонецПроцедуры

// Процедура вызывается при активизации строки таблицы номенклатуры на формах подборов.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора товаров,
//	Элемент - ТаблицаФормы - список номенклатуры.
//
Процедура ПриАктивизацииСтрокиТаблицыНоменклатуры(Форма, Элемент) Экспорт
	
	ИмяСпискаНоменклатуры = ПодборТоваровКлиентСервер.ИмяСпискаНоменклатурыПоВариантуПоиска(Форма);
	
	Если Элемент.Имя <> ИмяСпискаНоменклатуры Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.НавигацияПоХарактеристикам Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицыНоменклатуры = Элемент.ТекущиеДанные;
	
	Если СтрокаТаблицыНоменклатуры = Неопределено Тогда
		
		ПодборТоваровКлиентСервер.ОчиститьТаблицуОстатков(Форма);
		Форма.ТекущаяСтрокаНоменклатуры = ПодборТоваровКлиентСервер.СтруктураСтрокиНоменклатуры();
		
	Иначе
		
		Если Форма.ТекущаяСтрокаНоменклатуры <> Неопределено Тогда
			
			Если СтрокаТаблицыНоменклатуры.Свойство("ГруппировкаСтроки")
				Или (Форма.ТекущаяСтрокаНоменклатуры.Номенклатура = СтрокаТаблицыНоменклатуры.Номенклатура) Тогда
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Форма.ТекущаяСтрокаНоменклатуры = ПодборТоваровКлиентСервер.СтруктураСтрокиНоменклатуры();
		ЗаполнитьЗначенияСвойств(Форма.ТекущаяСтрокаНоменклатуры, СтрокаТаблицыНоменклатуры);
		
		УстановитьТекущуюСтрокуИерархииНоменклатуры(Форма);
		
		Если Форма.ОтображатьОстатки Тогда
			Форма.ПодключитьОбработчикОжидания("ПодборТаблицаПриАктивизацииСтрокиОбработчикОжидания", 0.1, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при активизации строки таблицы характеристик на формах подборов.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора товаров,
//	Элемент - ТаблицаФормы - список характеристик.
//
Процедура ПриАктивизацииСтрокиТаблицыХарактеристик(Форма, Элемент) Экспорт
	
	ИмяСпискаХарактеристик = ПодборТоваровКлиентСервер.ИмяСпискаХарактеристикПоВариантуПоиска(Форма);
	
	Если Элемент.Имя <> ИмяСпискаХарактеристик Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицыХарактеристик = Элемент.ТекущиеДанные;
	
	Если СтрокаТаблицыХарактеристик = Неопределено Тогда
		
		Если Форма.НавигацияПоХарактеристикам Тогда
			ПодборТоваровКлиентСервер.ОчиститьТаблицуОстатков(Форма);
		КонецЕсли;
		Форма.ТекущаяСтрокаХарактеристик = ПодборТоваровКлиентСервер.СтруктураСтрокиХарактеристик();
		
		Возврат;
		
	ИначеЕсли СтрокаТаблицыХарактеристик.Свойство("ГруппировкаСтроки") Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ТекущаяСтрокаХарактеристик = ПодборТоваровКлиентСервер.СтруктураСтрокиХарактеристик();
	ЗаполнитьЗначенияСвойств(Форма.ТекущаяСтрокаХарактеристик, СтрокаТаблицыХарактеристик);
	
	Если Не Форма.НавигацияПоХарактеристикам Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.НавигацияПоХарактеристикам Тогда
		Форма.ПодключитьОбработчикОжидания("ПодборТаблицаПриАктивизацииСтрокиОбработчикОжидания", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при активизации строки таблицы номенклатуры поставщика на формах подборов.
//
// Параметры:
//	Форма   - ФормаКлиентскогоПриложения - форма подбора товаров,
//	Элемент - ТаблицаФормы - список номенклатуры поставщика, содержит в том числе:
//				* ТекущиеДанные - ДанныеФормыСтруктура - содержит в том числе:
//					** Ссылка - СправочникСсылка
//
Процедура ПриАктивизацииСтрокиНоменклатурыПартнера(Форма, Элемент) Экспорт
	
	Если Не Форма.НавигацияПоНоменклатуреПартнера Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицыНоменклатурыПартнера = Элемент.ТекущиеДанные;
	Если СтрокаТаблицыНоменклатурыПартнера = Неопределено Тогда
		ОстаткиТоваров = Форма.ОстаткиТоваровПоставщика.ПолучитьЭлементы();
		ОстаткиТоваров.Очистить();
		
		Форма.ТекущаяСтрокаНоменклатурыПартнера = ПодборТоваровКлиентСервер.ПараметрыТовара();
		Возврат;
	КонецЕсли;
	
	ПараметрыТовара = ПодборТоваровКлиентСервер.ПараметрыТовара();
	ПараметрыТовара.Вставить("НоменклатураПартнера", СтрокаТаблицыНоменклатурыПартнера);
	
	ЗаполнитьЗначенияСвойств(ПараметрыТовара, СтрокаТаблицыНоменклатурыПартнера);
	
	Форма.ТекущаяСтрокаНоменклатурыПартнера = ПараметрыТовара;
	
	Форма.ПодключитьОбработчикОжидания("ПодборТаблицаПриАктивизацииСтрокиОбработчикОжидания", 0.1, Истина);
	
КонецПроцедуры

// Процедура вызывается при изменении флажка "Отображать остатки" на формах подборов.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора.
//
Процедура ПриИзмененииОтображенияОстатковПоСкладамДокумента(Форма) Экспорт
	
	Форма.ОтображатьОстатки = Не Форма.ОтображатьОстатки;
	Форма.Элементы.ОстаткиТоваров.Видимость = Форма.ОтображатьОстатки;
	
	Форма.ПодключитьОбработчикОжидания("ПодборТаблицаПриАктивизацииСтрокиОбработчикОжидания",0.1,Истина);
	ПодборТоваровКлиентСервер.УстановитьТекстНадписиОтображатьОстатки(Форма);
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыЗакупки(Форма) Тогда
		
		ПодборТоваровКлиентСервер.УстановитьТекстНадписиОтображатьОстаткиНоменклатурыПартнера(Форма);
		Форма.Элементы.ОстаткиТоваровПоставщика.Видимость = Форма.ОтображатьОстатки;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при выборе строки таблицы характеристик в формах
// подборов. В процедуре выполняется проверка на допустимость выбора строки.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора,
//	Элемент - ТаблицаФормы - текущий список характеристик,
//	ОповещениеУспешногоВыбора - ОписаниеОповещения - Описание оповещения успешного выбора.
//
Процедура ПриВыбореСтрокиТаблицыХарактеристик(Форма, Элемент, ОповещениеУспешногоВыбора) Экспорт
	
	СтрокаТаблицыХарактеристик = Элемент.ТекущиеДанные;
	Если СтрокаТаблицыХарактеристик = Неопределено
		Или СтрокаТаблицыХарактеристик.Свойство("ГруппировкаСтроки") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если СтрокаТаблицыХарактеристик.ПометкаУдаления Тогда
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ПриВыбореСтрокиТаблицыХарактеристикЗавершение", ЭтотОбъект, 
				Новый Структура("ОповещениеУспешногоВыбора", ОповещениеУспешногоВыбора)), 
			НСтр("ru = 'Выбранные данные помечены на удаление.
			|Выполнить выбор этих данных?'"), 
			РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОповещениеУспешногоВыбора);
	
КонецПроцедуры

// Служебная процедура.
//
// Параметры:
//  РезультатВопроса		 - КодВозвратаДиалога - код выбранного ответа на вопрос
//  ДополнительныеПараметры	 - Структура - дополнительные параметры описания оповещения.
//
Процедура ПриВыбореСтрокиТаблицыХарактеристикЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ОповещениеУспешногоВыбора = ДополнительныеПараметры.ОповещениеУспешногоВыбора;
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОповещениеУспешногоВыбора);

КонецПроцедуры

// Процедура вызывается при выборе строки таблицы номенклатуры в формах
// подборов. В процедуре выполняется проверка на допустимость выбора строки.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора,
//	ОповещениеУспешногоВыбора - ОписаниеОповещения - Описание оповещения успешного выбора.
//
Процедура ПриВыбореСтрокиТаблицыНоменклатуры(Форма, ОповещениеУспешногоВыбора) Экспорт
	
	СтрокаТаблицыНоменклатуры = Форма.Элементы[ПодборТоваровКлиентСервер.ИмяСпискаНоменклатурыПоВариантуПоиска(Форма)].ТекущиеДанные;
	Если СтрокаТаблицыНоменклатуры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если СтрокаТаблицыНоменклатуры.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаТаблицыНоменклатуры.ПометкаУдаления Тогда
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ПриВыбореСтрокиТаблицыНоменклатурыЗавершение", ЭтотОбъект, 
				Новый Структура("ОповещениеУспешногоВыбора", ОповещениеУспешногоВыбора)), 
			НСтр("ru = 'Выбранные данные помечены на удаление.
			|Выполнить выбор этих данных?'"), 
			РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОповещениеУспешногоВыбора);
	
КонецПроцедуры

// Служебная процедура.
//
// Параметры:
//  РезультатВопроса		 - КодВозвратаДиалога - код выбранного ответа на вопрос
//  ДополнительныеПараметры	 - Структура - дополнительные параметры описания оповещения.
//
Процедура ПриВыбореСтрокиТаблицыНоменклатурыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ОповещениеУспешногоВыбора = ДополнительныеПараметры.ОповещениеУспешногоВыбора;
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОповещениеУспешногоВыбора);

КонецПроцедуры

// Вызывается при переключении страницы номенклатуры в форме подбора товаров
// в документы закупки. Возникает при переключении на страницу с номенклатурой поставщика и обратно.
//
// Параметры:
//	Форма - см. ПодборТоваровСервер.ПриСозданииФормыПодбораНаСервере.Форма
//
Процедура СтраницыПриСменеСтраницыНоменклатуры(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	Форма.НавигацияПоНоменклатуреПартнера = (Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаНоменклатураПартнера);
	
	Элементы.КоманднаяПанельСоздатьНоменклатуру.Доступность   = (Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаНоменклатура);
	Элементы.КоманднаяПанельСоздатьХарактеристику.Доступность = (Форма.НавигацияПоХарактеристикам И Не Форма.НавигацияПоНоменклатуреПартнера);
		
	Если Форма.НавигацияПоНоменклатуреПартнера Тогда
		ПриАктивизацииСтрокиНоменклатурыПартнера(Форма, Элементы[ПодборТоваровКлиентСервер.ИмяСпискаНоменклатурыПартнераПоВариантуПоиска(Форма)]);
	ИначеЕсли Форма.НавигацияПоХарактеристикам Тогда
		ПриАктивизацииСтрокиТаблицыХарактеристик(Форма, Элементы[ПодборТоваровКлиентСервер.ИмяСпискаХарактеристикПоВариантуПоиска(Форма)]);
	Иначе
		ПриАктивизацииСтрокиТаблицыНоменклатуры(Форма, Элементы[ПодборТоваровКлиентСервер.ИмяСпискаНоменклатурыПоВариантуПоиска(Форма)]);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НавигацияПоИерархииНоменклатурыПартнера

// Вызывается из форм подборов при изменении флажка использования фильтров для номенклатуры поставщика.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка номенклатуры или форма подбора.
//
Процедура ПриИзмененииИспользованияФильтровНоменклатурыПартнера(Форма) Экспорт
	
	Если Форма.ИспользоватьФильтрНоменклатураПартнера Тогда
		УстановитьОтборПоРодителюТекущейСтрокиНоменклатурыПартнера(Форма);
		ПодборТоваровКлиентСервер.УстановитьОтборПоИерархииНоменклатурыПартнера(Форма);
	Иначе
		ПодборТоваровКлиентСервер.УдалитьОтборПоИерархииНоменклатурыПартнера(Форма);
	КонецЕсли;
	
	ПодборТоваровКлиентСервер.УстановитьДоступностьЭлементовФильтраНоменклатурыПартнера(Форма);
	
КонецПроцедуры

// Вызывается при активизации строки табличного поля иерархии номенклатуры.
//
// Параметры:
//	Форма - см. ПодборТоваровСервер.ПриСозданииФормыПодбораНаСервере.Форма
//
Процедура ОбработчикАктивизацииСтрокиИерархииНоменклатурыПартнера(Форма) Экспорт
	
	Если Форма.ТекущаяИерархияНоменклатурыПартнера = Форма.Элементы.ИерархияНоменклатурыПартнера.ТекущаяСтрока Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ТекущаяИерархияНоменклатурыПартнера = Форма.Элементы.ИерархияНоменклатурыПартнера.ТекущаяСтрока;
	
	ПодборТоваровКлиентСервер.УстановитьОтборПоИерархииНоменклатурыПартнера(Форма);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСДеревомСвойствВидаНоменклатуры

// Процедура вызывается при выборе "фиксированного" значения в дереве отборов.
//
// Параметры:
//  Форма					 - ФормаКлиентскогоПриложения	 - форма списка номенклатуры или форма подбора.
//  ОповещениеПослеОбработки - ОписаниеОповещения - описание оповещения после обработки.
//
Процедура ДеревоОтборовВыбор(Форма, ОповещениеПослеОбработки = Неопределено) Экспорт
	
	Если Не Форма.ИспользоватьФильтры Тогда
		Если ОповещениеПослеОбработки <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеПослеОбработки, Ложь);
		КонецЕсли;
	КонецЕсли;
	
	ВариантДействий = ВариантДействийПриВыбореЗначенияДереваОтборов(Форма);
	
	Если ВариантДействий = 1 Тогда // нажали на гиперссылку с "фиксированным" значением
		УстановитьФиксированныйОтбор(Форма, ОповещениеПослеОбработки);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается перед началом изменения значения свойства в дереве отбора по свойствам вида номенклатуры.
// 
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка номенклатуры, форма выбора, форма подбора,
//	Отказ - Булево - Истина - признак отказа выполнения изменений.
//
Процедура ДеревоОтборовПередНачаломИзменения(Форма, Отказ) Экспорт
	
	Если (Форма.ВариантНавигации = ПредопределенноеЗначение("Перечисление.ВариантыНавигацииВФормахНоменклатуры.ПоСвойствам")
		Или Форма.ВариантНавигации = ПредопределенноеЗначение("Перечисление.ВариантыНавигацииВФормахНоменклатуры.ПоВидамИСвойствам")
		Или Форма.ВариантНавигации = ПредопределенноеЗначение("Перечисление.ВариантыНавигацииВФормахНоменклатуры.ПоВидам"))
		И Форма.ИспользоватьФильтры
		И Форма.НавигацияПоХарактеристикам 
		И Не Форма.Элементы.ДеревоОтборов.ТекущиеДанные.ОтборХарактеристик Тогда
		
		Отказ = Истина;
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура вызывается при изменении значения в дереве отборов по свойствам вида
//  номенклатуры на формах списков и формах подборов.
//
// Параметры:
//  Форма					 - ФормаКлиентскогоПриложения	 - форма списка номенклатуры или форма подбора.
//  ОповещениеПослеОбработки - ОписаниеОповещения - описание оповещения после обработки.
//
Процедура ДеревоОтборовОтборПриИзменении(Форма, ОповещениеПослеОбработки = Неопределено) Экспорт
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"ОбщийМодуль.ПодборТоваровКлиент.ДеревоОтборовОтборПриИзменении");
	
	Если Не Форма.ИспользоватьФильтры Тогда
		Если ОповещениеПослеОбработки <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеПослеОбработки, Ложь);
		КонецЕсли;
	КонецЕсли;
	
	ВариантДействий = ВариантДействийПриИзмененииОтбораДереваОтборов(Форма);
	
	Если ВариантДействий = 3 Тогда // установили флажок на строке с незаполненным "фиксированным" значением
		УстановитьФиксированныйОтбор(Форма, ОповещениеПослеОбработки);
	Иначе
		ВыполнитьОбработкуОповещения(ОповещениеПослеОбработки, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается после изменении значения в дереве отборов по свойствам вида
//  номенклатуры на формах списков и формах подборов.
//
// Параметры:
//  Форма					 - ФормаКлиентскогоПриложения	 - форма списка номенклатуры или форма подбора.
//
Процедура ДеревоОтборовПриИзмененииЗавершение(Форма) Экспорт

	ТекущиеДанные = Форма.Элементы.ДеревоОтборов.ТекущиеДанные;
	ТаблицаПараметровОтбора = Форма.ТаблицаПараметровОтбора;
	
	Если ТекущиеДанные.ФиксированноеЗначение
		Или ТипЗнч(ТекущиеДанные.ЗначениеОтбора) = Тип("Булево") Тогда
		
		Если ТекущиеДанные.Отбор Тогда
			
			Отбор = Новый Структура();
			Отбор.Вставить("ИмяРеквизита",ТекущиеДанные.ИмяРеквизита);
			ОтобранныеСтроки = ТаблицаПараметровОтбора.НайтиСтроки(Отбор);
			Если ОтобранныеСтроки.Количество()>0 Тогда
				ЗаполнитьЗначенияСвойств(ОтобранныеСтроки[0],ТекущиеДанные);
				ОтобранныеСтроки[0].ИмяРеквизита = ТекущиеДанные.ИмяРеквизита;
			Иначе
				НоваяСтрока = ТаблицаПараметровОтбора.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекущиеДанные);
				НоваяСтрока.ИмяРеквизита = ТекущиеДанные.ИмяРеквизита; 
			КонецЕсли;
			
		Иначе
			
			Отбор = Новый Структура();
			Отбор.Вставить("ИмяРеквизита",ТекущиеДанные.ИмяРеквизита);
			ОтобранныеСтроки = ТаблицаПараметровОтбора.НайтиСтроки(Отбор);
			Для Каждого СтрокаДляУдаления Из ОтобранныеСтроки Цикл
				ТаблицаПараметровОтбора.Удалить(СтрокаДляУдаления);
			КонецЦикла;
		
		КонецЕсли;
		
	Иначе
		
		Родитель = ТекущиеДанные.ПолучитьРодителя();
		
		Если Родитель = Неопределено Тогда // выбрана строка-родитель
			
			ПодчиненныеЭлементыДерева = ТекущиеДанные.ПолучитьЭлементы();
			
			Если ТекущиеДанные.Отбор Тогда
				Для Каждого ЭлементДерева Из ПодчиненныеЭлементыДерева Цикл
					НоваяСтрока = ТаблицаПараметровОтбора.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,ЭлементДерева);
					НоваяСтрока.ИмяРеквизита = ТекущиеДанные.ИмяРеквизита;
				КонецЦикла;
			Иначе
				Отбор = Новый Структура();
				Отбор.Вставить("ИмяРеквизита",ТекущиеДанные.ИмяРеквизита);
				ОтобранныеСтроки = ТаблицаПараметровОтбора.НайтиСтроки(Отбор);
				Для Каждого СтрокаДляУдаления Из ОтобранныеСтроки Цикл
					ТаблицаПараметровОтбора.Удалить(СтрокаДляУдаления);
				КонецЦикла;
			КонецЕсли;
			
		Иначе
			
			Если ТекущиеДанные.Отбор Тогда
				НоваяСтрока = ТаблицаПараметровОтбора.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекущиеДанные);
			Иначе
				Отбор = Новый Структура();
				Отбор.Вставить("ИмяРеквизита",ТекущиеДанные.ИмяРеквизита);
				Отбор.Вставить("Представление",ТекущиеДанные.Представление);
				ОтобранныеСтроки = ТаблицаПараметровОтбора.НайтиСтроки(Отбор);
				Для Каждого СтрокаДляУдаления Из ОтобранныеСтроки Цикл
					ТаблицаПараметровОтбора.Удалить(СтрокаДляУдаления);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Платформа 10155915 Западает галка в дереве отборов в веб-клиенте. В 8.3.8 следует удалить.
	Форма.ОбновитьОтображениеДанных();
	
КонецПроцедуры

#КонецОбласти

#Область ПоискНаФормахПодбора

// Если используется полнотекстовый поиск, то функция проверяет актуальность индекса.
// Если индекс не актуален, то отображается диалог с предложением обновить индекс
// полнотекстового поиска. Если пользователь отказывается от обновления индекса,
// то все равно разрешается выполнить расширенный поиск, т.к. допускается что сведения
// касающие товаров часто не меняются.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма из которой выполняется вызов функции поиска,
//	ОповещениеПослеПроверки - ОписаниеОповещения - описание оповещения после выполнения проверки возможности
//		использования расширенного поиска.
//
Процедура ВыполнениеРасширенногоПоискаВозможно(Форма, ОповещениеПослеПроверки) Экспорт
	
	// При включении флажка "Поиск по точному соответствию", выполняется неполнотекстовый поиск, 
	// соответственно, не нужно проверять актуальность индекса полнотекстового поиска.
	Если Форма.НайтиНоменклатуруПоТочномуСоответствию Тогда
		ВыполнитьОбработкуОповещения(ОповещениеПослеПроверки);
		Возврат;
	КонецЕсли;
	
	// Проверка необходима только при использовании полнотекстового поиска.
	Если Не Форма.ИспользоватьПолнотекстовыйПоиск Тогда
		ВыполнитьОбработкуОповещения(ОповещениеПослеПроверки);
		Возврат;
	КонецЕсли;
	
	Если Форма.ИнформационнаяБазаФайловая И Не Форма.ИндексПолнотекстовогоПоискаАктуален Тогда
		Результат = Неопределено;

		ПоказатьВопрос(
			Новый ОписаниеОповещения("ВыполнениеРасширенногоПоискаВозможноЗавершение", 
				ЭтотОбъект, 
				Новый Структура("ОповещениеПослеПроверки, Форма", ОповещениеПослеПроверки, Форма)), 
			НСтр("ru = 'Индекс полнотекстового поиска неактуален. Обновить индекс?'"), 
			РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОповещениеПослеПроверки);
	
КонецПроцедуры

// Служебная процедура.
Процедура ВыполнениеРасширенногоПоискаВозможноЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ОповещениеПослеПроверки = ДополнительныеПараметры.ОповещениеПослеПроверки;
	Форма = ДополнительныеПараметры.Форма;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОбновитьИндексПолнотекстовогоПоиска();
		Форма.ИндексПолнотекстовогоПоискаАктуален = Истина;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОповещениеПослеПроверки);

КонецПроцедуры

// Обрабатывает флаг возврата функции выполнения поиска характеристик.
// Если поиск не был выполнен, то выводится предупреждение.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма из которой вызывалась функция поиска товаров по строке,
//	ОтображатьПредупреждение - Булево - флаг отображения предупреждения, при неудачном поиске.
//
Процедура ПослеВыполненияПоискаХарактеристик(Форма, ОтображатьПредупреждение = Истина) Экспорт
	
	ПоискВыполнен = Не Форма.ПоискХарактеристикНеУдачный;
	КодОшибки = Форма.КодОшибкиПоиска;
	
	СтрокаПоиска = Форма.СтрокаПоискаХарактеристики;
	
	Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
		Если Не ПоискВыполнен И ОтображатьПредупреждение Тогда
			ПоказатьПредупреждение(,ТекстПредупрежденияОшибкиРасширенногоПоиска(КодОшибки), 120, "Поиск");
		КонецЕсли;
		СпискиВыбораКлиентСервер.ОбновитьСписокВыбора(Форма.Элементы.СтрокаПоискаХарактеристики.СписокВыбора, СтрокаПоиска, 21);
	КонецЕсли;
	
	// Установить текущий элемент формы.
	ТекущийЭлемент = Форма.Элементы[ПодборТоваровКлиентСервер.ИмяСпискаХарактеристикПоВариантуПоиска(Форма)];
	Если Не ПоискВыполнен Тогда
		ТекущийЭлемент = Форма.Элементы.СтрокаПоискаХарактеристики;
	КонецЕсли;
	
	Форма.ТекущийЭлемент = ТекущийЭлемент;
	
КонецПроцедуры

// Обрабатывает флаг возврата функции выполнения поиска номенклатуры.
// Если поиск не был выполнен, то выводится предупреждение.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма из которой вызывалась функция поиска товаров по строке,
//	ОтображатьПредупреждение - Булево - флаг отображения предупреждения, при неудачном поиске.
//
Процедура ПослеВыполненияПоискаНоменклатуры(Форма, ОтображатьПредупреждение = Истина) Экспорт
	
	ПоискВыполнен = Не Форма.ПоискНоменклатурыНеУдачный;
	КодОшибки = Форма.КодОшибкиПоиска;
	
	СтрокаПоиска = Форма.СтрокаПоискаНоменклатура;
	
	Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
		Если Не ПоискВыполнен И ОтображатьПредупреждение И Не КодОшибки = "НичегоНеНайдено" Тогда
			ПоказатьОповещениеПользователя(ТекстПредупрежденияОшибкиРасширенногоПоиска(КодОшибки));
		КонецЕсли;
		СпискиВыбораКлиентСервер.ОбновитьСписокВыбора(Форма.Элементы.СтрокаПоискаНоменклатура.СписокВыбора, СтрокаПоиска, 21);
	КонецЕсли;
	
	// Установить текущий элемент формы.
	Если Не ПодборТоваровКлиентСервер.ЭтоФормаПодбораТоваровПоКатегориям(Форма) Тогда
		ТекущийЭлемент = Форма.Элементы[ПодборТоваровКлиентСервер.ИмяСпискаНоменклатурыПоВариантуПоиска(Форма)];
	Иначе
		ТекущийЭлемент = Форма.Элементы["СписокРасширенныйПоискНоменклатура"];
	КонецЕсли;
	
	Если Не ПоискВыполнен Тогда
		ТекущийЭлемент = Форма.Элементы.СтрокаПоискаНоменклатура;
	КонецЕсли;
	
	Форма.ТекущийЭлемент = ТекущийЭлемент;
	
КонецПроцедуры

// Обрабатывает флаг возврата функции выполнения поиска номенклатуры.
// Если поиск не был выполнен, то выводится предупреждение.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма из которой вызывалась функция поиска товаров по строке,
//	ОтображатьПредупреждение - Булево - флаг отображения предупреждения, при неудачном поиске.
//
Процедура ПослеВыполненияПоискаНоменклатурыПартнера(Форма, ОтображатьПредупреждение = Истина) Экспорт
	
	ПоискВыполнен = Не Форма.ПоискНоменклатурыПартнераНеУдачный;
	КодОшибки = Форма.КодОшибкиПоиска;
	
	// Обновить список выбора значений у строки поиска.
	СтрокаПоиска = Форма.СтрокаПоискаНоменклатураПартнера;
	
	Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
		Если Не ПоискВыполнен И ОтображатьПредупреждение Тогда
			ПоказатьПредупреждение(,ТекстПредупрежденияОшибкиРасширенногоПоиска(КодОшибки), 120, "Поиск");
		КонецЕсли;
		СпискиВыбораКлиентСервер.ОбновитьСписокВыбора(Форма.Элементы.СтрокаПоискаНоменклатураПартнера.СписокВыбора, СтрокаПоиска, 21);
	КонецЕсли;
	
	// Установить текущий элемент формы.
	ТекущийЭлемент = Форма.Элементы[ПодборТоваровКлиентСервер.ИмяСпискаНоменклатурыПартнераПоВариантуПоиска(Форма)];
	Если Не ПоискВыполнен Тогда
		ТекущийЭлемент = Форма.Элементы.СтрокаПоискаНоменклатураПартнера;
	КонецЕсли;
	
	Форма.ТекущийЭлемент = ТекущийЭлемент;
	
КонецПроцедуры

// Вызывает функцию обновления индекса полнотекстового поиска на сервере.
//
Процедура ОбновитьИндексПолнотекстовогоПоиска() Экспорт
	
	Состояние(НСтр("ru = 'Идет обновление индекса полнотекстового поиска ...'"));
	
	ПодборТоваровВызовСервера.ОбновитьИндексПолнотекстовогоПоиска();
	
	Состояние(НСтр("ru = 'Обновление индекса полнотекстового поиска завершено.'"));
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыНавигации

// Устанавливает текущую строку иерархии номенклатуры в формах списков номенклатуры и подборов.
// 
// Параметры:
//	Форма - см. ПодборТоваровСервер.ПриСозданииФормыПодбораНаСервере.Форма
//
Процедура УстановитьТекущуюСтрокуИерархииНоменклатуры(Форма) Экспорт
	
	Если Форма.ИспользоватьФильтры
		И Не (Форма.ВариантНавигации = ПредопределенноеЗначение("Перечисление.ВариантыНавигацииВФормахНоменклатуры.ПоСвойствам")
		Или Форма.ВариантНавигации = ПредопределенноеЗначение("Перечисление.ВариантыНавигацииВФормахНоменклатуры.ПоВидамИСвойствам")
		Или Форма.ВариантНавигации = ПредопределенноеЗначение("Перечисление.ВариантыНавигацииВФормахНоменклатуры.ПоВидам") 
		Или Форма.ВариантНавигации = ПредопределенноеЗначение("Перечисление.ВариантыНавигацииВФормахНоменклатуры.ПоИерархии")) Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоФормаПодбора = ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма);
	
	ИмяСпискаНоменклатуры = ПодборТоваровКлиентСервер.ИмяСпискаНоменклатурыПоВариантуПоиска(Форма);
	
	ТекущаяСтрока = Форма.Элементы[ИмяСпискаНоменклатуры].ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоФормаПодбора И Форма.НавигацияПоХарактеристикам Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Форма.Элементы[ИмяСпискаНоменклатуры].ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.ВариантНавигации = ПредопределенноеЗначение("Перечисление.ВариантыНавигацииВФормахНоменклатуры.ПоИерархии") Тогда
		
		Если Форма.Элементы.ИерархияНоменклатуры.ТекущаяСтрока = ТекущиеДанные.Родитель Тогда
			Возврат;
		КонецЕсли;
		
		Форма.Элементы.ИерархияНоменклатуры.ТекущаяСтрока = ТекущиеДанные.Родитель;
		Форма.ТекущаяИерархияНоменклатуры                 = ТекущиеДанные.Родитель;
	Иначе
		
		Если Форма.Элементы.ВидыНоменклатуры.ТекущаяСтрока = ТекущиеДанные.ВидНоменклатуры Тогда
			Возврат;
		КонецЕсли;
		
		Форма.Элементы.ВидыНоменклатуры.ТекущаяСтрока = ТекущиеДанные.ВидНоменклатуры;
		Форма.ВидНоменклатуры = ТекущиеДанные.ВидНоменклатуры; 
		  
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает текущей страницу со списком номенклатуры.
// Используется в формах подборов (в документ продажи, закупки).
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора.
//
Процедура ПерейтиКСпискуНоменклатуры(Форма) Экспорт
	
	ЭтоФормаПодбора = ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма);
	ЭтоФормаСпискаНоменклатуры = ПодборТоваровКлиентСервер.ЭтоФормаСпискаНоменклатуры(Форма);
	ЭтоФормаВыбораНоменклатуры = ПодборТоваровКлиентСервер.ЭтоФормаВыбораНоменклатуры(Форма);
	
	Если Не ЭтоФормаПодбора Тогда
		Если ЭтоФормаСпискаНоменклатуры
			Или ЭтоФормаВыбораНоменклатуры Тогда
			ПодборТоваровКлиентСервер.УстановитьДоступностьЭлементовФильтров(Форма);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Форма.НавигацияПоХарактеристикам = Ложь;
	Форма.Элементы.СтраницыСписков.ТекущаяСтраница = Форма.Элементы[ПодборТоваровКлиентСервер.ИмяТекущейСтраницыПоВариантуПоиска(Форма)];
	Форма.Элементы.СегментНоменклатуры.ТолькоПросмотр = Ложь;
	
	ПодборТоваровКлиентСервер.УстановитьДоступностьЭлементовФильтров(Форма);
	
	Если ЗначениеЗаполнено(Форма.СтрокаПоискаНоменклатура) Тогда
		Форма.ТекущийЭлемент = Форма.Элементы.СтрокаПоискаНоменклатура;
	Иначе
		Форма.ТекущийЭлемент = Форма.Элементы[ПодборТоваровКлиентСервер.ИмяСпискаНоменклатурыПоВариантуПоиска(Форма)];
	КонецЕсли;
	
	Форма.Элементы.СтраницыСоздать.ТекущаяСтраница = Форма.Элементы.СтраницаСоздатьНоменклатуру;
	
	Если Форма.ОтображатьОстатки Тогда
		Форма.ПодключитьОбработчикОжидания("ПодборТаблицаПриАктивизацииСтрокиОбработчикОжидания", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается после перехода к списку характеристик.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка, форма подборов.
//
Процедура ПослеПереходаКСпискуХарактеристик(Форма) Экспорт
	
	Если Форма.ОтображатьОстатки Тогда
		Форма.ПодключитьОбработчикОжидания("ПодборТаблицаПриАктивизацииСтрокиОбработчикОжидания", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при изменении варианта навигации для формирования и отображения меню.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка, форма подборов.
//
Процедура ИзменитьВариантНавигации(Форма) Экспорт
	
	СписокВыбораВариантовНавигации = Новый СписокЗначений;
	СписокВыбораВариантовНавигации.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыНавигацииВФормахНоменклатуры.ПоВидамИСвойствам"),
											НСтр("ru = 'Навигация по видам и свойствам'"));
	СписокВыбораВариантовНавигации.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыНавигацииВФормахНоменклатуры.ПоИерархии"),
											НСтр("ru = 'Навигация по иерархии'"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьВариантНавигацииЗавершение", Форма);
	
	Форма.ПоказатьВыборИзМеню(ОписаниеОповещения,
								СписокВыбораВариантовНавигации,
								Форма.Элементы.КоманднаяПанельВариантНавигации);
		
КонецПроцедуры

#КонецОбласти

#Область Прочие

// Процедура открывает форму просмотра цен товара. Используется в формах подборов.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора.
//
Процедура ЦеныНоменклатуры(Форма) Экспорт
	
	ПараметрыФормы = Новый Структура("Номенклатура, Характеристика, Дата");
	
	СтрокаТаблицыНоменклатуры = Форма.Элементы[ПодборТоваровКлиентСервер.ИмяСпискаНоменклатурыПоВариантуПоиска(Форма)].ТекущиеДанные;
		
	Если Форма.НавигацияПоХарактеристикам Тогда
		СтрокаТаблицыХарактеристик = Форма.Элементы[ПодборТоваровКлиентСервер.ИмяСпискаХарактеристикПоВариантуПоиска(Форма)].ТекущиеДанные;
		
		Если СтрокаТаблицыХарактеристик = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы.Характеристика = СтрокаТаблицыХарактеристик.Характеристика;
		ПараметрыФормы.Номенклатура = СтрокаТаблицыХарактеристик.Номенклатура;
		
	Иначе
		Если СтрокаТаблицыНоменклатуры = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы.Номенклатура = СтрокаТаблицыНоменклатуры.Номенклатура;
	КонецЕсли;
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыЗакупки(Форма) Тогда
		
		ПараметрыФормы.Дата = Форма.Дата;
		ИмяОбработки = "ПодборТоваровВДокументЗакупки";
		ИмяФормы     = "ЦеныНоменклатуры";
		
	ИначеЕсли ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыПродажи(Форма) Тогда
		
		ПараметрыФормы.Дата = Форма.Дата;
		ИмяОбработки = "ПодборТоваровВДокументПродажи";
		Если Форма.ИспользуетсяЦенообразование25 Тогда
			ИмяФормы     = "ЦеныНоменклатуры2_5";
			ПараметрыФормы.Вставить("ОбъектХраненияУсловийПродаж", Форма.ОбъектХраненияУсловийПродаж);
		Иначе
			ИмяФормы     = "ЦеныНоменклатуры";
		КонецЕсли;
		
	КонецЕсли;
	
	ИмяФормы = "Обработка." + ИмяОбработки + ".Форма." + ИмяФормы;
	
	ОткрытьФорму(ИмяФормы, ПараметрыФормы, Форма, ПараметрыФормы.Номенклатура);
	
КонецПроцедуры

// Процедура открывает форму карточки номенклатуры. Используется в формах подборов.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора.
//
Процедура ОткрытьКарточкуТовара(Форма) Экспорт
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"ОбщийМодуль.ПодборТоваровКлиент.ОткрытьКарточкуТовара");
	
	ТаблицаФормыПоиска = Форма.Элементы[ПодборТоваровКлиентСервер.ИмяСпискаНоменклатурыПоВариантуПоиска(Форма)]; // ТаблицаФормы
	
	ТекущаяСтрока = ТаблицаФормыПоиска.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Ключ", ТекущаяСтрока);
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаЭлемента", ПараметрыФормы);
	
КонецПроцедуры

// Процедура вызывается при нажатии на информационную надпись - строку с информацией 
// о количестве и сумме подобранных товаров на формах подборов.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора,
//	Объект - ДанныеФормыСтруктура - объект подбора.
//
Процедура ПриНажатииНаИнформационнуюНадпись(Форма, Объект) Экспорт
	
	Форма.ПоказыватьПодобранныеТовары = Не Форма.ПоказыватьПодобранныеТовары;
	ПодборТоваровКлиентСервер.УстановитьТекстИнформационнойНадписи(Форма);
	
КонецПроцедуры

// Получает информацию товаре - цене продажи и остатках товара.
// Используется в формах подборов.
//
// Параметры:
//	Форма - см. Обработка.ПодборТоваровВДокументПродажи.Форма.Форма
//
Процедура ПолучитьИнформациюОТовареПриПродаже(Форма) Экспорт
	
	Если Не Форма.ОтображатьОстатки Тогда
		Возврат;
	КонецЕсли;
	
	ОстаткиПоСкладам = Форма.ОстаткиТоваров.ПолучитьЭлементы();
	ОстаткиПоСкладам.Очистить();
	
	Если Форма.РежимПодбораБезСуммовыхПараметров И Не Форма.ОтображатьОстатки Тогда
		Возврат;
	КонецЕсли;
	
	ХарактеристикиИспользуются = Форма.ТекущаяСтрокаНоменклатуры.ХарактеристикиИспользуются;
	ЭтоТовар = Форма.ТекущаяСтрокаНоменклатуры.ЭтоТовар;
	
	Если Не ЭтоТовар 
			ИЛИ (Форма.НавигацияПоХарактеристикам И 
			Не ЗначениеЗаполнено(Форма.ТекущаяСтрокаХарактеристик.Характеристика))Тогда
		Возврат;
	КонецЕсли;
	
	Валюта = Форма.Валюта;
	Соглашение = Форма.Соглашение;
	
	Если Форма.НавигацияПоХарактеристикам Тогда
		
		Если Не ЗначениеЗаполнено(Форма.ТекущаяСтрокаХарактеристик.Характеристика) Тогда
			Возврат;
		КонецЕсли;
		
		ИнформацияОТоваре = ПодборТоваровВызовСервера.ЦенаПродажиИОстаткиТовара(Форма.ТекущаяСтрокаНоменклатуры.Номенклатура, 
			Форма.ТекущаяСтрокаХарактеристик.Характеристика, Соглашение, Валюта, Форма.Склады, Форма.ВидыЦен);
		
	Иначе
		
		ИнформацияОТоваре = ПодборТоваровВызовСервера.ЦенаПродажиИОстаткиТовара(Форма.ТекущаяСтрокаНоменклатуры.Номенклатура, 
			Неопределено, Соглашение, Валюта, Форма.Склады, Форма.ВидыЦен);
		
	КонецЕсли;
	
	ЦенаПродажиТовара = ИнформацияОТоваре.Цена;
	
	НаименованиеУпаковкиЕдиницыИзмерения = ?(ЗначениеЗаполнено(ЦенаПродажиТовара.Упаковка), 
		Строка(ЦенаПродажиТовара.Упаковка), 
		Строка(ЦенаПродажиТовара.ЕдиницаИзмерения));
	
	Для Каждого СтрокаТбл Из ИнформацияОТоваре.ТекущиеОстатки Цикл
		
		СтрокаОстаткиПоСкладам = ОстаткиПоСкладам.Добавить();
		
		СтрокаОстаткиПоСкладам.Период = Форма.ТекущаяДатаСеанса;
		СтрокаОстаткиПоСкладам.ПериодОписание = НСтр("ru = 'Сейчас'");
		СтрокаОстаткиПоСкладам.Доступно = СтрокаТбл.Свободно;
		СтрокаОстаткиПоСкладам.Запас = СтрокаТбл.Запас;
		
		СтрокаОстаткиПоСкладам.ЗапасОписание = ОписаниеКоличестваВСтрокеОстатка(
			СтрокаОстаткиПоСкладам.Запас,
			НаименованиеУпаковкиЕдиницыИзмерения,
			ХарактеристикиИспользуются,
			Форма.НавигацияПоХарактеристикам);
		
		СтрокаОстаткиПоСкладам.ДоступноОписание = ОписаниеКоличестваВСтрокеОстатка(
			СтрокаОстаткиПоСкладам.Доступно,
			НаименованиеУпаковкиЕдиницыИзмерения,
			ХарактеристикиИспользуются,
			Форма.НавигацияПоХарактеристикам);
		
		СтрокаОстаткиПоСкладам.Склад = СтрокаТбл.Склад;
		СтрокаОстаткиПоСкладам.СкладОписание = Строка(СтрокаТбл.Склад);
		СтрокаОстаткиПоСкладам.СкладДоступенДляВыбора = СкладДоступенДляВыбора(Форма, СтрокаОстаткиПоСкладам.Склад);
		
		ПланируемыеОстаткиПоДатам = СтрокаОстаткиПоСкладам.ПолучитьЭлементы();
			
		ЕстьПланируемыеОстатки = Ложь;
		Для Каждого СтрокаТбл Из ИнформацияОТоваре.ПланируемыеОстатки Цикл
			
			Если Не (СтрокаТбл.Склад = СтрокаОстаткиПоСкладам.Склад) Тогда
				Продолжить;
			КонецЕсли;
			
			ЕстьПланируемыеОстатки = Истина;
			
			СтрокаПланируемыеОстаткиПоДатам = ПланируемыеОстаткиПоДатам.Добавить();
			
			СтрокаПланируемыеОстаткиПоДатам.Период = СтрокаТбл.Период;
			СтрокаПланируемыеОстаткиПоДатам.ПериодОписание = Формат(СтрокаТбл.Период, "ДЛФ=D");
			СтрокаПланируемыеОстаткиПоДатам.Доступно = СтрокаТбл.Доступно;
			СтрокаПланируемыеОстаткиПоДатам.Запас = СтрокаТбл.Запас;
			
			СтрокаПланируемыеОстаткиПоДатам.ЗапасОписание = ОписаниеКоличестваВСтрокеОстатка(
				СтрокаПланируемыеОстаткиПоДатам.Запас,
				НаименованиеУпаковкиЕдиницыИзмерения,
				ХарактеристикиИспользуются,
				Форма.НавигацияПоХарактеристикам);
			
			СтрокаПланируемыеОстаткиПоДатам.ДоступноОписание = ОписаниеКоличестваВСтрокеОстатка(
				СтрокаПланируемыеОстаткиПоДатам.Доступно,
				НаименованиеУпаковкиЕдиницыИзмерения,
				ХарактеристикиИспользуются,
				Форма.НавигацияПоХарактеристикам);
			
			СтрокаПланируемыеОстаткиПоДатам.Склад = СтрокаТбл.Склад;
			СтрокаПланируемыеОстаткиПоДатам.СкладОписание = "";
			СтрокаПланируемыеОстаткиПоДатам.СкладДоступенДляВыбора = СкладДоступенДляВыбора(Форма, СтрокаПланируемыеОстаткиПоДатам.Склад);
			
		КонецЦикла;
		
		Если СтрокаОстаткиПоСкладам.Запас = 0 И Не ЕстьПланируемыеОстатки Тогда
			ОстаткиПоСкладам.Удалить(СтрокаОстаткиПоСкладам);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Получает информацию о товаре - цене закупки и остатках товара.
//
// Параметры:
//	Форма - см. ПодборТоваровСервер.ПриСозданииФормыПодбораНаСервере.Форма
//
Процедура ПолучитьИнформациюОТовареПриЗакупке(Форма) Экспорт
	
	Если Не Форма.ОтображатьОстатки Тогда
		Возврат;
	КонецЕсли;
	
	ОстаткиПоСкладам = Форма.ОстаткиТоваров.ПолучитьЭлементы();
	ОстаткиПоСкладам.Очистить();
	
	ОстаткиПоСкладамПоставщика = Форма.ОстаткиТоваровПоставщика.ПолучитьЭлементы();
	ОстаткиПоСкладамПоставщика.Очистить();
	
	Если Форма.РежимПодбораБезСуммовыхПараметров И Не Форма.ОтображатьОстатки Тогда
		Возврат;
	КонецЕсли;
	
	ХарактеристикиИспользуются = Форма.ТекущаяСтрокаНоменклатуры.ХарактеристикиИспользуются;
	ЭтоТовар = Форма.ТекущаяСтрокаНоменклатуры.ЭтоТовар;
	
	Если ЭтоТовар <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.НавигацияПоНоменклатуреПартнера Тогда
		
		СтрокаТаблицыНоменклатурыПартнера = Форма.Элементы[ПодборТоваровКлиентСервер.ИмяСпискаНоменклатурыПартнераПоВариантуПоиска(Форма)].ТекущиеДанные;
		Если СтрокаТаблицыНоменклатурыПартнера = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Номенклатура = СтрокаТаблицыНоменклатурыПартнера.Номенклатура;
		Если ХарактеристикиИспользуются Тогда
			Характеристика = СтрокаТаблицыНоменклатурыПартнера.Характеристика;
		КонецЕсли;
		
		УстановитьТекущуюСтрокуИерархииНоменклатурыПартнера(Форма);
	Иначе
		Номенклатура = Форма.ТекущаяСтрокаНоменклатуры.Номенклатура;
		Характеристика = Форма.ТекущаяСтрокаХарактеристик.Характеристика;
	КонецЕсли;
		
	Если Не Форма.НавигацияПоХарактеристикам Тогда
		Характеристика = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
	КонецЕсли;
	
	ИнформацияОТоваре = ПодборТоваровВызовСервера.ЦенаЗакупкиИОстаткиТовара(Номенклатура, Характеристика, 
		Форма.Соглашение, Форма.Валюта, Форма.Склады);
	
	СтруктураЦена = ИнформацияОТоваре.Цена;
	
	НаименованиеУпаковкиЕдиницыИзмерения = ?(ЗначениеЗаполнено(СтруктураЦена.Упаковка), 
		Строка(СтруктураЦена.Упаковка), 
		Строка(СтруктураЦена.ЕдиницаИзмерения));
	
	Для Каждого СтрокаТекущиеОстатки Из ИнформацияОТоваре.ТекущиеОстатки Цикл
		
		СтрокаОстаткиПоСкладам = ОстаткиПоСкладам.Добавить();
		
		СтрокаОстаткиПоСкладам.Период = Форма.ТекущаяДатаСеанса;
		СтрокаОстаткиПоСкладам.ПериодОписание = НСтр("ru = 'Сейчас'");
		
		СтрокаОстаткиПоСкладам.Доступно = СтрокаТекущиеОстатки.Свободно;
		СтрокаОстаткиПоСкладам.Запас = СтрокаТекущиеОстатки.Запас;
		
		СтрокаОстаткиПоСкладам.ЗапасОписание = ОписаниеКоличестваВСтрокеОстатка(
			СтрокаОстаткиПоСкладам.Запас,
			НаименованиеУпаковкиЕдиницыИзмерения,
			ХарактеристикиИспользуются,
			Форма.НавигацияПоХарактеристикам Или Форма.НавигацияПоНоменклатуреПартнера);
		
		СтрокаОстаткиПоСкладам.ДоступноОписание = ОписаниеКоличестваВСтрокеОстатка(
			СтрокаОстаткиПоСкладам.Доступно,
			НаименованиеУпаковкиЕдиницыИзмерения,
			ХарактеристикиИспользуются,
			Форма.НавигацияПоХарактеристикам Или Форма.НавигацияПоНоменклатуреПартнера);
		
		СтрокаОстаткиПоСкладам.Склад = СтрокаТекущиеОстатки.Склад;
		СтрокаОстаткиПоСкладам.СкладОписание = Строка(СтрокаТекущиеОстатки.Склад);
		СтрокаОстаткиПоСкладам.СкладДоступенДляВыбора = СкладДоступенДляВыбора(Форма, СтрокаОстаткиПоСкладам.Склад);
		
		СтрокаОстаткиПоСкладамПоставщика = ОстаткиПоСкладамПоставщика.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОстаткиПоСкладамПоставщика, СтрокаОстаткиПоСкладам);
		
		ПланируемыеОстаткиПоДатам = СтрокаОстаткиПоСкладам.ПолучитьЭлементы();
		ПланируемыеОстаткиПоДатамПоставщика = СтрокаОстаткиПоСкладамПоставщика.ПолучитьЭлементы();
		
		// Вывести планируемые остатки по графику движений товаров.
		ЕстьПланируемыеОстатки = Ложь;
		Для Каждого СтрокаПланируемыеОстатки Из ИнформацияОТоваре.ПланируемыеОстатки Цикл
			
			Если Не (СтрокаПланируемыеОстатки.Склад = СтрокаОстаткиПоСкладам.Склад) Тогда
				Продолжить;
			КонецЕсли;
			
			ЕстьПланируемыеОстатки = Истина;
			
			// ... в таблицу планируемых остатков по датам.
			СтрокаПланируемыеОстаткиПоДатам = ПланируемыеОстаткиПоДатам.Добавить();
			
			СтрокаПланируемыеОстаткиПоДатам.Период = СтрокаПланируемыеОстатки.Период;
			СтрокаПланируемыеОстаткиПоДатам.ПериодОписание = Формат(СтрокаПланируемыеОстатки.Период, "ДЛФ=D");
			
			СтрокаПланируемыеОстаткиПоДатам.Доступно = СтрокаПланируемыеОстатки.Доступно;
			СтрокаПланируемыеОстаткиПоДатам.Запас = СтрокаПланируемыеОстатки.Запас;
			
			СтрокаПланируемыеОстаткиПоДатам.ЗапасОписание = ОписаниеКоличестваВСтрокеОстатка(
				СтрокаПланируемыеОстаткиПоДатам.Запас,
				НаименованиеУпаковкиЕдиницыИзмерения,
				ХарактеристикиИспользуются,
				Форма.НавигацияПоХарактеристикам);
			
			СтрокаПланируемыеОстаткиПоДатам.ДоступноОписание = ОписаниеКоличестваВСтрокеОстатка(
				СтрокаПланируемыеОстаткиПоДатам.Доступно,
				НаименованиеУпаковкиЕдиницыИзмерения,
				ХарактеристикиИспользуются,
				Форма.НавигацияПоХарактеристикам);
			
			СтрокаПланируемыеОстаткиПоДатам.Склад = СтрокаПланируемыеОстатки.Склад;
			СтрокаПланируемыеОстаткиПоДатам.СкладОписание = "";
			СтрокаПланируемыеОстаткиПоДатам.СкладДоступенДляВыбора = СкладДоступенДляВыбора(Форма, СтрокаПланируемыеОстаткиПоДатам.Склад);
			
			// ... в таблицу планируемых остатков поставщика по датам.
			СтрокаПланируемыеОстаткиПоставщикаПоДатам = ПланируемыеОстаткиПоДатамПоставщика.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПланируемыеОстаткиПоставщикаПоДатам, СтрокаПланируемыеОстаткиПоДатам);
			
		КонецЦикла;
		
		Если СтрокаОстаткиПоСкладам.Запас = 0 И Не ЕстьПланируемыеОстатки Тогда
			ОстаткиПоСкладам.Удалить(СтрокаОстаткиПоСкладам);
			ОстаткиПоСкладамПоставщика.Удалить(СтрокаОстаткиПоСкладамПоставщика);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Открывает форму настройки поиска - расширенный или платформенный.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка, форма подбора.
//
Процедура НастроитьПоиск(Форма) Экспорт
	
	СтруктураПараметров = Неопределено;

	
	ОткрытьФорму("Справочник.Номенклатура.Форма.НастройкаВариантаПоиска", 
		Новый Структура("ВариантПоискаТоваров", Форма.ВариантПоискаТоваров),,,,, Новый ОписаниеОповещения("НастроитьПоискЗавершение", ЭтотОбъект, Новый Структура("Форма", Форма)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

// Служебная процедура
Процедура НастроитьПоискЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Форма = ДополнительныеПараметры.Форма;
    
    
    СтруктураПараметров = Результат;
    
    Если СтруктураПараметров <> Неопределено Тогда
        
        Если Форма.ВариантПоискаТоваров <> СтруктураПараметров.ВариантПоискаТоваров Тогда
            
            Форма.ВариантПоискаТоваров = СтруктураПараметров.ВариантПоискаТоваров;
            ПодборТоваровКлиентСервер.УстановитьТекущиеСтраницыПоВариантуПоиска(Форма);
            
        КонецЕсли;
        
    КонецЕсли;

КонецПроцедуры

// Определяет необходимость сохранения изменённых настроек отборов в хранилище настроек
//
// Параметры:
//	Форма - см. ПодборТоваровСервер.ПриСозданииФормыПодбораНаСервере.Форма
//
// Возвращаемое значение:
//	Булево - Признак необходимости сохранения настроек.
//
Функция ТребуетсяСохранениеНастроек(Форма) Экспорт
	
	Если Форма.НастройкиФормыПриОткрытии.ТребуетсяСохранение = Истина Тогда
		Возврат Истина;
	Иначе
		ТекущиеНастроки = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(Форма.НастройкиФормыПриОткрытии);
		ЗаполнитьЗначенияСвойств(ТекущиеНастроки, Форма);
		Для Каждого Настройка Из ТекущиеНастроки Цикл
			Если Настройка.Значение <> ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
												Форма.НастройкиФормыПриОткрытии, Настройка.Ключ) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область ПеретаскиваниеНаФормахПодбора

// Функция формирует параметры перетаскивания из списков номенклатуры, номенклатуры поставщика и характеристики номенклатуры.
//
// Параметры:
//  Форма					 - ФормаКлиентскогоПриложения	 - форма подбора,
//  Элемент					 - ЭлементыФормы				 - элемент формы, с которым осуществляется действие,
//  ПараметрыПеретаскивания	 - ПараметрыПеретаскивания		 - параметры перетаскивания элемента формы.
//
Процедура ПолучитьДанныеПеретаскивания(Форма, Элемент, ПараметрыПеретаскивания) Экспорт
	
	МассивПараметров = Новый Массив; 
	
	СтраницаХарактеристики = Ложь;
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыЗакупки(Форма) Тогда
		Если Форма.НавигацияПоХарактеристикам И Не Форма.НавигацияПоНоменклатуреПартнера Тогда
			СтраницаХарактеристики = Истина;
		КонецЕсли;
	Иначе
		Если Форма.НавигацияПоХарактеристикам Тогда
			СтраницаХарактеристики = Истина;
		КонецЕсли; 
	КонецЕсли;
		
	Для каждого КлючСтроки Из ПараметрыПеретаскивания.Значение Цикл
		
		ДанныеСтроки = Элемент.ДанныеСтроки(КлючСтроки);
		
		Если ДанныеСтроки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыТовара = ПодборТоваровКлиентСервер.ПараметрыТовара();
		Если ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыЗакупки(Форма) Тогда
			ПараметрыТовара.Вставить("ВидЦеныПоставщика", Форма.ВидЦеныПоставщика);
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ПараметрыТовара, ДанныеСтроки);
		
		Если СтраницаХарактеристики Тогда
			ЭтоТовар = Форма.ТекущаяСтрокаНоменклатуры.ЭтоТовар;
			Если ЭтоТовар Тогда
				ПараметрыТовара.Артикул = Форма.ТекущаяСтрокаНоменклатуры.Артикул;
			КонецЕсли;
		Иначе 
			ЭтоТовар = ДанныеСтроки.ЭтоТовар;
		КонецЕсли;
		
		Если ЭтоТовар И Форма.Склады.Количество() = 1 Тогда
			ПараметрыТовара.Склад = Форма.Склады.Получить(0).Значение;
		КонецЕсли;
		
		ПараметрыТовара.КоличествоУпаковок = 1;
		
		МассивПараметров.Добавить(ПараметрыТовара);
		
	КонецЦикла;
	
	ПараметрыПеретаскивания.Значение = МассивПараметров;
	
КонецПроцедуры

// Функция формирует параметры перетаскивания из табличной части остатков
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора,
//	Элемент - ЭлементыФормы - элемент формы, с которым осуществляется действие,
//	ПараметрыПеретаскивания - ПараметрыПеретаскивания - параметры перетаскивания элемента формы.
//
Процедура ПолучитьДанныеПеретаскиванияОстатков(Форма, Элемент, ПараметрыПеретаскивания) Экспорт
	
	МассивПараметров = Новый Массив; 
	
	ТекущаяСтрокаОснование = Форма.ТекущаяСтрокаНоменклатуры;
	
	Если Форма.НавигацияПоХарактеристикам Тогда
		ТекущаяСтрокаОснование = Форма.ТекущаяСтрокаХарактеристик;
	ИначеЕсли ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыЗакупки(Форма) Тогда
		Если Форма.НавигацияПоНоменклатуреПартнера Тогда
			ТекущаяСтрокаОснование = Форма.ТекущаяСтрокаНоменклатурыПартнера;
		КонецЕсли;
	КонецЕсли;
	
	Для каждого КлючСтроки Из ПараметрыПеретаскивания.Значение Цикл
		
		ДанныеСтроки = Элемент.ДанныеСтроки(КлючСтроки);
		
		ПараметрыТовара = ПодборТоваровКлиентСервер.ПараметрыТовара();
		ПараметрыТовара.Вставить("НоменклатураПартнера");
		
		ЗаполнитьЗначенияСвойств(ПараметрыТовара, ТекущаяСтрокаОснование);
		ЗаполнитьЗначенияСвойств(ПараметрыТовара, ДанныеСтроки);
		
		ПараметрыТовара.КоличествоУпаковок = 1;
		
		МассивПараметров.Добавить(ПараметрыТовара);
		
	КонецЦикла;
	
	ПараметрыПеретаскивания.Значение = МассивПараметров;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСДеревомСвойствВидаНоменклатуры

// Возвращает признак необходимости установки отбора  динамического списка номенклатуры
//  на формах отбора, по значениям дерева отборов. Вызывается при нажатии на поле выбора
//  фиксированного значения в строке дерева отборов.
//  Возвращает в оповещении: Истина - значение в дереве отборов изменено и нужно применить значение отбора
//  к списку номенклатуры, или Ложь - значение отбора не изменено.
//
// Параметры:
//  Форма					 - ФормаКлиентскогоПриложения	 - форма списка или форма подбора.
//  ОповещениеПослеОбработки - ОписаниеОповещения - описание оповещения после обработки.
//
Процедура УстановитьФиксированныйОтбор(Форма, ОповещениеПослеОбработки = Неопределено)
	
	ТекущиеДанные = Форма.Элементы.ДеревоОтборов.ТекущиеДанные;
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма)
		И Форма.НавигацияПоХарактеристикам
		И ТекущиеДанные.Свойство("ОтборХарактеристик")
		И Не ТекущиеДанные.ОтборХарактеристик Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Не ТекущиеДанные.ФиксированноеЗначение Тогда
		Если ОповещениеПослеОбработки <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеПослеОбработки, Ложь);
		КонецЕсли;
	КонецЕсли;
	
	ВидНоменклатуры		= Форма.ВидНоменклатуры;
	ТипЗначенияОтбора	= ТипЗнч(ТекущиеДанные.ЗначениеОтбора);
	ИмяРеквизита		= ?(ТекущиеДанные.ЭтоДопРеквизит,
							ТекущиеДанные.Представление,
							ТекущиеДанные.ИмяРеквизита);
	
	Если ТипЗначенияОтбора = Тип("СписокЗначений") Тогда
		
		// Тип значения - строка. В этом случае открывается форма установки значения и список выбора
		// поля выбора значения заполняется доступными значениями.
		ПоНоменклатуре = Истина;
		
		Если ТекущиеДанные.Свойство("ОтборХарактеристик") Тогда
			ПоНоменклатуре = Не ТекущиеДанные.ОтборХарактеристик;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ИмяРеквизита",			ИмяРеквизита);
		ПараметрыФормы.Вставить("ЗначениеОтбора",		ТекущиеДанные.ЗначениеОтбора);
		ПараметрыФормы.Вставить("ЭтоДопРеквизит",		ТекущиеДанные.ЭтоДопРеквизит);
		ПараметрыФормы.Вставить("ОтборПоНоменклатуре",	ПоНоменклатуре);
		ПараметрыФормы.Вставить("ВидНоменклатуры",		ВидНоменклатуры);
		
	ИначеЕсли ТипЗначенияОтбора = Тип("Строка") Тогда
		
		// Тип значения - строка. В этом случае открывается форма установки значения и список выбора
		// поля выбора значения заполняется доступными значениями.
		ПоНоменклатуре = Истина;
		
		Если ТекущиеДанные.Свойство("ОтборХарактеристик") Тогда
			ПоНоменклатуре = Не ТекущиеДанные.ОтборХарактеристик;
		КонецЕсли;
		
		СписокЗначенийРеквизита = ПодборТоваровВызовСервера.СписокЗначенийРеквизита(
									ВидНоменклатуры,
									ИмяРеквизита,
									ТекущиеДанные.ЭтоДопРеквизит,
									ПоНоменклатуре);
			
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ИмяРеквизита",			ИмяРеквизита);
		ПараметрыФормы.Вставить("СписокСтрокОтбора",	СписокЗначенийРеквизита);
		ПараметрыФормы.Вставить("ЗначениеОтбора",		ТекущиеДанные.ЗначениеОтбора);
		ПараметрыФормы.Вставить("ТипЗначения",			ТипЗначенияОтбора);
		
	Иначе
		
		// Тип значения - число или дата, в этом случае открывается форма установки интервала.
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ИмяРеквизита",	ИмяРеквизита);
		ПараметрыФормы.Вставить("ЗначениеОт",	ТекущиеДанные.ИнтервалОт);
		ПараметрыФормы.Вставить("ЗначениеДо",	ТекущиеДанные.ИнтервалДо);
		ПараметрыФормы.Вставить("ТипЗначения",	ТипЗнч(ТекущиеДанные.ЗначениеОтбора));
		
	КонецЕсли;
	
	ИмяФормы				= ?(ТипЗначенияОтбора = Тип("СписокЗначений"),
								"Справочник.Номенклатура.Форма.ФормаУстановкиЗначенийОтбора",
								"Справочник.Номенклатура.Форма.ФормаУстановкиИнтервала");
	ДополнительныеПараметры	= Новый Структура("ОповещениеПослеОбработки, ТекущиеДанные",
												ОповещениеПослеОбработки, ТекущиеДанные);
	ОписаниеОповещения		= Новый ОписаниеОповещения("УстановитьФиксированныйОтборЗавершение",
														ЭтотОбъект,
														ДополнительныеПараметры);
	
	ОткрытьФорму(ИмяФормы, ПараметрыФормы, Форма, , , , ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

// Служебная процедура.
Процедура УстановитьФиксированныйОтборЗавершение(ЗначениеВыбора, ДополнительныеПараметры) Экспорт
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"ОбщийМодуль.ПодборТоваровКлиент.УстановитьФиксированныйОтборЗавершение");
	
	ОповещениеПослеОбработки	= ДополнительныеПараметры.ОповещениеПослеОбработки;
	ТекущиеДанные				= ДополнительныеПараметры.ТекущиеДанные;
	ТипЗначенияОтбора			= ТипЗнч(ТекущиеДанные.ЗначениеОтбора);
	
	Если ЗначениеВыбора = Неопределено Тогда
		ТекущиеДанные.Отбор				= ?(ТипЗначенияОтбора = Тип("Строка")
												Или ТипЗначенияОтбора = Тип("СписокЗначений"),
											ЗначениеЗаполнено(ТекущиеДанные.ЗначениеОтбора),
											ЗначениеЗаполнено(ТекущиеДанные.ИнтервалОт)
												Или ЗначениеЗаполнено(ТекущиеДанные.ИнтервалДо));
		ТекущиеДанные.ОтборУстановлен	= ТекущиеДанные.Отбор;
		
		УстанавливатьОтборСписка = Ложь;
		
		ВыполнитьОбработкуОповещения(ОповещениеПослеОбработки, УстанавливатьОтборСписка);
		
		Возврат;
	КонецЕсли;
	
	УстанавливатьОтборСписка = Ложь;
	
	Если ТипЗначенияОтбора = Тип("Строка") Тогда
		
		Если ЗначениеВыбора <> Неопределено Тогда
			
			ЗначениеОтбора = ЗначениеВыбора.ЗначениеОтбора;
			
			ТекущиеДанные.Отбор               = ЗначениеЗаполнено(ЗначениеОтбора);
			ТекущиеДанные.ОтборУстановлен     = ТекущиеДанные.Отбор;
			ТекущиеДанные.ЗначениеОтбора      = ЗначениеОтбора;
			ТекущиеДанные.ПредставлениеОтбора = ?(ЗначениеЗаполнено(ЗначениеОтбора),
													ЗначениеОтбора,
													НСтр("ru = '<не задано>'"));
			
			УстанавливатьОтборСписка = Истина;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗначенияОтбора = Тип("СписокЗначений") Тогда
		
		Если ЗначениеВыбора <> Неопределено Тогда
			
			ЗначениеОтбора = ЗначениеВыбора.ЗначениеОтбора;
			
			ТекущиеДанные.Отбор               = ЗначениеЗаполнено(ЗначениеОтбора);
			ТекущиеДанные.ОтборУстановлен     = ТекущиеДанные.Отбор;
			ТекущиеДанные.ЗначениеОтбора      = ЗначениеОтбора;
			ТекущиеДанные.ПредставлениеОтбора = ?(ЗначениеЗаполнено(ЗначениеОтбора),
													ЗначениеОтбора,
													НСтр("ru = '<не задано>'"));
			
			УстанавливатьОтборСписка = Истина;
			
		КонецЕсли;
		
	Иначе
		
		Если ЗначениеВыбора <> Неопределено Тогда
			
			Если ЗначениеВыбора.ИнтервалОт <> ТекущиеДанные.ИнтервалОт 
				Или ЗначениеВыбора.ИнтервалДо <> ТекущиеДанные.ИнтервалДо Тогда
				
				ТекущиеДанные.ИнтервалОт = ЗначениеВыбора.ИнтервалОт;
				ТекущиеДанные.ИнтервалДо = ЗначениеВыбора.ИнтервалДо;
				ТекущиеДанные.ПредставлениеОтбора	= ПредставлениеИнтервалаОтбора(ЗначениеВыбора.ИнтервалОт,
																					ЗначениеВыбора.ИнтервалДо);
				
				УстанавливатьОтборСписка = Истина;
				
			КонецЕсли;
			
			ТекущиеДанные.Отбор = ЗначениеЗаполнено(ЗначениеВыбора.ИнтервалОт)
									Или ЗначениеЗаполнено(ЗначениеВыбора.ИнтервалДо);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОповещениеПослеОбработки <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеПослеОбработки, УстанавливатьОтборСписка);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает строковое представление интервала отбора.
//
// Параметры:
//	ИнтервалОт - Число, Строка, Дата - начальное значение интервала,
//	ИнтервалДо - Число, Строка, Дата - конечное значение интервала.
//
// Возвращаемое значение:
//	Строка - представление - интервала.
//
Функция ПредставлениеИнтервалаОтбора(ИнтервалОт, ИнтервалДо)
	
	Если Не ЗначениеЗаполнено(ИнтервалОт)
		И Не ЗначениеЗаполнено(ИнтервалДо) Тогда
		ПредставлениеОтбора =  НСтр("ru = '<не задано>'");
		Возврат ПредставлениеОтбора;
	ИначеЕсли ЗначениеЗаполнено(ИнтервалОт)
		И ЗначениеЗаполнено(ИнтервалДо) Тогда
		ПредставлениеОтбора =  НСтр("ru = 'от %ИнтервалОт% до %ИнтервалДо%'");
	ИначеЕсли ЗначениеЗаполнено(ИнтервалОт) Тогда 
		ПредставлениеОтбора =  НСтр("ru = 'от %ИнтервалОт%'");
	Иначе
		ПредставлениеОтбора =  НСтр("ru = 'до %ИнтервалДо%'");
	КонецЕсли;
	
	ПредставлениеОтбора = СтрЗаменить(ПредставлениеОтбора, "%ИнтервалОт%", ИнтервалОт);	
	ПредставлениеОтбора = СтрЗаменить(ПредставлениеОтбора, "%ИнтервалДо%", ИнтервалДо);	
	
	Возврат ПредставлениеОтбора;
	
КонецФункции

// Возвращает число - код варианта действия которое было выполнено с деревом отборов.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка справочника номенклатуры или форма подбора.
//
// Возвращаемое значение:
//	Число - .
//	0 - никакого изменения значений в дереве отборов не произошло;
//	1 - был установлен/снят флажок у строки (или родительской строки) значений, например:
//	    был установлен/снят флажок у строки с качеством "Новый" или у строки "Качество";
//	2 - был установлен/снят флажок на строке с "фиксированным значением", причем фиксированное
//	    значение уже было указано, например: в строке дерева отборов было указано конкретное значение диаметра
//	    кабеля и у него установили/сняли флажок;
//	3 - был УСТАНОВЛЕН флажок на строке с "фиксированным значением", причем фиксированное значение
//	    в строке еще не указано, например: в строке дерева отборов не было указано конкретное значение
//	    диаметра кабеля и у строки установили флажок. Такой вариант действия приводит к тому что открывается
//	    дополнительная форма установки значений (или интервала) фиксированного значения.
//
Функция ВариантДействийПриИзмененииОтбораДереваОтборов(Форма)
	
	ВариантДействий = 0;
	
	ТекущиеДанные = Форма.Элементы.ДеревоОтборов.ТекущиеДанные;
	
	Если ТекущиеДанные.ФиксированноеЗначение Тогда
		
		// Фиксированное значение - например, введен артикул, или указано,
		// какое-то конкретное числовое, строковое значение, или интервал дат.
		
		ВариантДействий = 2; // установили/сняли флажок на поле фиксированного значения
		
		Если ТекущиеДанные.Отбор Тогда
			
			ТипЗначенияОтбора = ТипЗнч(ТекущиеДанные.ЗначениеОтбора);
			
			Если Не (
				     (ТипЗначенияОтбора = Тип("Строка") И ЗначениеЗаполнено(ТекущиеДанные.ЗначениеОтбора)) 
				 Или ТипЗначенияОтбора <> Тип("Строка") И (ЗначениеЗаполнено(ТекущиеДанные.ИнтервалОт) Или ЗначениеЗаполнено(ТекущиеДанные.ИнтервалДо))
				    ) Тогда
				
				ВариантДействий = 3; // УСТАНОВИЛИ флажок на незаполненном значением поле фиксированного значения
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ВариантДействий = 1; // установили/сняли флажок на строке конкретного значения или группы значений
		
		Родитель = ТекущиеДанные.ПолучитьРодителя();
		
		Если Родитель = Неопределено Тогда // выбрана строка-родитель
			
			// Установить/снять значение флажка отбора для всех подчиненных строк.
			
			ПодчиненныеЭлементыДерева = ТекущиеДанные.ПолучитьЭлементы();
			
			Для Каждого ЭлементДерева Из ПодчиненныеЭлементыДерева Цикл
				ЭлементДерева.Отбор = ТекущиеДанные.Отбор;
			КонецЦикла;
			
		Иначе
			
			// Выбрана подчиненная строка.
			
			Родитель.Отбор = Ложь;
			
			ПодчиненныеЭлементыДерева = Родитель.ПолучитьЭлементы();
			
			// Пройти по всем подчиненным строкам родителя выбранной строки, и если
			// хотя бы для одной строки установлен флажок отбора, то включить флажок отбора
			// и родительской строки.
			
			Для Каждого ЭлементДерева Из ПодчиненныеЭлементыДерева Цикл
				
				Если ЭлементДерева.Отбор Тогда
					Родитель.Отбор = Истина;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВариантДействий;
	
КонецФункции

// Возвращает число - код варианта действий которое было выполнено с деревом отборов
// при событии выбора значения в дереве отборов.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка справочника номенклатуры или форма подбора.
//
// Возвращаемое значение:
//	Число - .
//	0 - никакого изменения значений в дереве отборов не произошло,
//	1 - было выбрано значение в строке с "фиксированным" значением,
//	в этом случае необходимо открыть форму установки "фиксированного" значения.
//
Функция ВариантДействийПриВыбореЗначенияДереваОтборов(Форма)
	
	ДеревоОтборов   = Форма.Элементы.ДеревоОтборов;
	ТекущийЭлемент  = Форма.Элементы.ДеревоОтборов.ТекущийЭлемент;
	ТекущаяСтрока   = Форма.Элементы.ДеревоОтборов.ТекущаяСтрока;
	ТекущиеДанные   = Форма.Элементы.ДеревоОтборов.ТекущиеДанные;
	
	ВариантДействий = 0;
	
	Если ТекущийЭлемент = Форма.Элементы.ДеревоОтборовПредставлениеОтбора Тогда
		
		Если ТекущиеДанные.ФиксированноеЗначение Тогда
			
			ВариантДействий = 1;
			
		КонецЕсли;
		
	ИначеЕсли ТекущийЭлемент = Форма.Элементы.ДеревоОтборовПредставление Тогда
		
		Если ТекущиеДанные.ФиксированноеЗначение Тогда
			
			ВариантДействий = 1;
			
		ИначеЕсли Не ТекущиеДанные.ОтборДоступен Тогда
			
			// Если был щелчок по родительской строке, то свернуть/развернуть узел.
			
			Если ДеревоОтборов.Развернут(ТекущаяСтрока) Тогда
				ДеревоОтборов.Свернуть(ТекущаяСтрока);
			Иначе
				ДеревоОтборов.Развернуть(ТекущаяСтрока);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВариантДействий;
	
КонецФункции

// Возвращает признак доступности склада для выбора.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора товаров.
//
// Возвращаемое значение:
//	Булево - 
//
Функция СкладДоступенДляВыбора(Форма, Склад)

	Возврат Не (Форма.Склады.НайтиПоЗначению(Склад) = Неопределено);

КонецФункции

// Возвращает строковое описание количества. Используется при выводе
// строк в таблицу остатков в формах подбора товаров в документ продажи, документ
// закупки.
//
// Параметры:
//  Количество - Число - количество товаров,
//	НаименованиеУпаковкиЕдиницыИзмерения - Строка - наименование упаковки, единицы измерения,
//	ХарактеристикиИспользуются - Булево - признак ведения учета по характеристикам у товара,
//	НавигацияПоХарактеристикам - Булево - признак навигации по характеристикам на форме подбора.
//
// Возвращаемое значение:
//	Строка - Описание количества товаров для текущей строки в форме подбора.
//
Функция ОписаниеКоличестваВСтрокеОстатка(Количество, НаименованиеУпаковкиЕдиницыИзмерения, 
	ХарактеристикиИспользуются, НавигацияПоХарактеристикам)
	
	КоличествоОписание = "";
	
	Если ЗначениеЗаполнено(Количество) Тогда
			КоличествоОписание = Формат(Количество,"ЧДЦ=3") + " " + НаименованиеУпаковкиЕдиницыИзмерения;
	КонецЕсли;
	
	Возврат КоличествоОписание;
	
КонецФункции

// Возвращает текст предупреждения по коду ошибки расширенного поиска.
//
// Параметры:
//	КодОшибки - Строка - код ошибки расширенного поиска.
//
// Возвращаемое значение:
//	Строка - текст предупреждения ошибки расширенного поиска.
//
Функция ТекстПредупрежденияОшибкиРасширенногоПоиска(КодОшибки)
	
	Если КодОшибки = "НичегоНеНайдено" Тогда
		ТекстПредупреждения = НСтр("ru = 'Ничего не найдено, уточните запрос.'");
	ИначеЕсли КодОшибки = "СлишкомМногоРезультатов" Тогда
		ТекстПредупреждения = НСтр("ru = 'Слишком много результатов поиска, уточните запрос.'");
	ИначеЕсли КодОшибки = "ОшибкаПоиска" Тогда
		ТекстПредупреждения = НСтр("ru = 'При выполнении поиска произошла ошибка, попробуйте изменить выражение поиска.'");
	Иначе
		ТекстПредупреждения = "";
	КонецЕсли;
	
	Возврат ТекстПредупреждения;
	
КонецФункции

// Устанавливает отбор по родителю текущей строки списка номенклатуры поставщика
// в формах подборов товаров.
//
// Параметры:
//	Форма - см. ПодборТоваровСервер.ПриСозданииФормыПодбораНаСервере.Форма
//
Процедура УстановитьОтборПоРодителюТекущейСтрокиНоменклатурыПартнера(Форма)
	
	ТаблицаФормыПоиска = Форма.Элементы[ПодборТоваровКлиентСервер.ИмяСпискаНоменклатурыПартнераПоВариантуПоиска(Форма)]; // ТаблицаФормы
	
	ТекущаяСтрока = ТаблицаФормыПоиска.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Родитель = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(ТекущаяСтрока, "Родитель");
	
	Форма.Элементы.ИерархияНоменклатурыПартнера.ТекущаяСтрока = Родитель;
	Форма.ТекущаяИерархияНоменклатурыПартнера = Родитель;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииНавигации

// Устанавливает текущую строку иерархии номенклатуры номенклатуры поставщика в форме подбора по закупкам.
// 
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка, форма подбора.
//
Процедура УстановитьТекущуюСтрокуИерархииНоменклатурыПартнера(Форма)
	
	Если Форма.ИспользоватьФильтрНоменклатураПартнера
		Или Не Форма.НавигацияПоНоменклатуреПартнера Тогда
		Возврат;
	КонецЕсли;
	
	ИмяСпискаНоменклатуры = ПодборТоваровКлиентСервер.ИмяСпискаНоменклатурыПартнераПоВариантуПоиска(Форма);
	
	ТекущаяСтрока = Форма.Элементы[ИмяСпискаНоменклатуры].ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Форма.Элементы[ИмяСпискаНоменклатуры].ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.Элементы.ИерархияНоменклатурыПартнера.ТекущаяСтрока = ТекущиеДанные.Родитель Тогда
		Возврат;
	КонецЕсли;
	
	Форма.Элементы.ИерархияНоменклатурыПартнера.ТекущаяСтрока = ТекущиеДанные.Родитель;
	Форма.ТекущаяИерархияНоменклатурыПартнера                 = ТекущиеДанные.Родитель;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
