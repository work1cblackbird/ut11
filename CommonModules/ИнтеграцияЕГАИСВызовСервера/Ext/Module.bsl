#Область ПрограммныйИнтерфейс

// Возвращает имена документов ЕГАИС, основанием для которых может являться указанный документ.
//
// Параметры:
//   ДокументОснование - ОпределяемыйТип.ОснованиеСтатусыОформленияДокументовЕГАИС - документ-основание для документа ЕГАИС
//
// Возвращаемое значение:
//   Массив из Строка - имена документов ЕГАИС
//
Функция ИменаДокументовДляДокументаОснования(ДокументОснование) Экспорт
	
	Возврат РасчетСтатусовОформленияЕГАИС.ИменаДокументовДляДокументаОснования(ДокументОснование);
	
КонецФункции

#Область РаботаСДокументами

// См. Справочники.ЕГАИСПрисоединенныеФайлы.ПоследнееСообщение
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ, по которому требуется получить сообщение.
//  ТипПоследнегоСообщения - Строка - тип требуемого сообщения обмена.
//
// Возвращаемое значение:
//  Справочникссылка.ЕГАИСПрисоединенныеФайлы - сообщение обмена.
//
Функция ПоследнееСообщение(ДокументСсылка, ТипПоследнегоСообщения = "СОшибкой") Экспорт
	
	ДанныеПоследнегоСообщения = Справочники.ЕГАИСПрисоединенныеФайлы.ПоследнееСообщение(ДокументСсылка, ТипПоследнегоСообщения);
	
	Если ДанныеПоследнегоСообщения = Неопределено Тогда
		Возврат Справочники.ЕГАИСПрисоединенныеФайлы.ПустаяСсылка();
	Иначе
		Возврат ДанныеПоследнегоСообщения.Сообщение;
	КонецЕсли;
	
КонецФункции

Функция АрхивироватьРаспоряженияКОформлению(Основания, Документ) Экспорт
	
	Возврат РегистрыСведений.СтатусыОформленияДокументовЕГАИС.АрхивироватьРаспоряженияКОформлению(Основания, Документ);
	
КонецФункции

Функция АрхивироватьДокументы(ДокументыКАрхивированию) Экспорт
	
	Возврат РегистрыСведений.СтатусыДокументовЕГАИС.Архивировать(ДокументыКАрхивированию);
	
КонецФункции

#КонецОбласти

#Область РаботаСЗапросами

// Формирует запрос для проверки подключения к УТМ.
//
// Возвращаемое значение:
//  Массив Из (См. ОбменДаннымиЕГАИС.СтруктураСообщенияXML) - Сообщения, к передаче в ЕГАИС.
//
Функция ЗапросПроверкиПодключенияКУТМКПередачеXML() Экспорт
	
	СообщенияXML = Новый Массив;
	
	ФорматОбмена = ОбменДаннымиЕГАИСКлиентСервер.ФорматОбмена();
	Операция = Перечисления.ВидыДокументовЕГАИС.ЗапросДанныхОрганизации;
	
	СообщениеXML = ОбменДаннымиЕГАИС.СтруктураСообщенияXML();
	СообщениеXML.Описание = ОбменДаннымиЕГАИС.ОписаниеОперацииПередачиДанных(
		Операция, Неопределено);
	
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(Операция, ФорматОбмена);
	ИмяТипа          = Перечисления.ВидыДокументовЕГАИС.ТипЕГАИС(Операция, ФорматОбмена);
	
	Если ПространствоИмен = Неопределено
		Или ИмяТипа = Неопределено Тогда
		ОбменДаннымиЕГАИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеXML,
			СтрШаблон(НСтр("ru = 'Операция не поддерживается в версии формата обмена: %1.'"), ФорматОбмена));
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
	КонецЕсли;
	
	#Область Запрос
	
	ЗапросXDTO = РаботаСXMLЕГАИС.ОбъектXDTO(ПространствоИмен, "QueryParameters");
	Parameters = РаботаСXMLИС.ОбъектXDTOПоИмениТипа(ЗапросXDTO, "Parameters");
	Parameter  = РаботаСXMLИС.ОбъектXDTOПоИмениТипа(Parameters, "Parameter");
	
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(Parameter, "Name",  "СИО",          СообщениеXML);
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(Parameter, "Value", "000000000000", СообщениеXML);
	
	Parameters.Parameter.Добавить(Parameter);
	ЗапросXDTO.Parameters.Добавить(Parameters);
	
	#КонецОбласти
	
	ТекстСообщенияXML = РаботаСXMLЕГАИС.ОбъектXDTOВXML(ЗапросXDTO, "000000000000", ПространствоИмен, ИмяТипа);
	
	СообщениеXML.ТекстСообщенияXML = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения      = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеXML.ОрганизацияЕГАИС  = "ПроверкаПодключенияКУТМ";
	СообщениеXML.Операция          = Операция;
	СообщениеXML.ФорматОбмена      = ФорматОбмена;
	СообщениеXML.Документ          = Неопределено;
	СообщениеXML.ДокументОснование = Неопределено;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

// Формирует массив сообщений в формате XML к передаче в УТМ.
//
// Параметры:
//  ОрганизацииЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС для которой выполняется запрос.
//  АкцизныеМарки - Массив Из Строка - Акцизные марки для проверки.
// 
// Возвращаемое значение:
//  Массив Из (См. ОбменДаннымиЕГАИС.СтруктураСообщенияXML) - Сообщения, к передаче в ЕГАИС.
//
Функция ЗапросПроверкиМарокНаОстаткахОрганизацииКПередачеXML(ОрганизацияЕГАИС, АкцизныеМарки) Экспорт
	
	СообщенияXML = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Шапка.Код          КАК ИдентификаторФСРАР,
	|	Шапка.ФорматОбмена КАК ФорматОбмена
	|ИЗ
	|	Справочник.КлассификаторОрганизацийЕГАИС КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", ОрганизацияЕГАИС);
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	ФорматОбмена = ОбменДаннымиЕГАИСКлиентСервер.ФорматОбмена(Шапка.ФорматОбмена);
	
	Операция = Перечисления.ВидыДокументовЕГАИС.ЗапросПроверкиАкцизныхМарокНаОстаткахОрганизации;
	
	СообщениеXML = ОбменДаннымиЕГАИС.СтруктураСообщенияXML();
	СообщениеXML.Описание = ОбменДаннымиЕГАИС.ОписаниеОперацииПередачиДанных(
		Операция, ОрганизацияЕГАИС);
		
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(Операция, ФорматОбмена);
	ИмяТипа          = Перечисления.ВидыДокументовЕГАИС.ТипЕГАИС(Операция, ФорматОбмена);
	
	Если ПространствоИмен = Неопределено
		Или ИмяТипа = Неопределено Тогда
		ОбменДаннымиЕГАИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеXML,
			СтрШаблон(НСтр("ru = 'Операция не поддерживается в версии формата обмена: %1.'"), ФорматОбмена));
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
	КонецЕсли;
	
	#Область Запрос
	
	ЗапросXDTO = РаботаСXMLЕГАИС.ОбъектXDTO(ПространствоИмен, "QueryFilter");
	Для Каждого АкцизнаяМарка Из АкцизныеМарки Цикл
		ЗапросXDTO.bc.Добавить(АкцизнаяМарка);
	КонецЦикла;
	
	#КонецОбласти
	
	ТекстСообщенияXML = РаботаСXMLЕГАИС.ОбъектXDTOВXML(ЗапросXDTO, Шапка.ИдентификаторФСРАР, ПространствоИмен, ИмяТипа);
	
	СообщениеXML.ТекстСообщенияXML = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения      = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеXML.ОрганизацияЕГАИС  = ОрганизацияЕГАИС;
	СообщениеXML.Операция          = Операция;
	СообщениеXML.ФорматОбмена      = ФорматОбмена;
	СообщениеXML.Документ          = Неопределено;
	СообщениеXML.ДокументОснование = Неопределено;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

// Формирует массив сообщений в формате XML к передаче в УТМ.
//
// Параметры:
//  ОрганизацииЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС для которой выполняется запрос.
//  ИдентификаторТТН - Строка - Идентификатор запрашиваемой ТТН.
// 
// Возвращаемое значение:
//  Массив Из (См. ОбменДаннымиЕГАИС.СтруктураСообщенияXML) - Сообщения, к передаче в ЕГАИС.
//
Функция ЗапросДанныхТТНКПередачеXML(ОрганизацияЕГАИС, ИдентификаторТТН) Экспорт
	
	СообщенияXML = Новый Массив;
	
	Операция = Перечисления.ВидыДокументовЕГАИС.ЗапросТТН;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Шапка.Код          КАК ИдентификаторФСРАР,
	|	Шапка.ФорматОбмена КАК ФорматОбмена
	|ИЗ
	|	Справочник.КлассификаторОрганизацийЕГАИС КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", ОрганизацияЕГАИС);
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	ФорматОбмена = ОбменДаннымиЕГАИСКлиентСервер.ФорматОбмена(Шапка.ФорматОбмена);
	
	СообщениеXML = ОбменДаннымиЕГАИС.СтруктураСообщенияXML();
	СообщениеXML.Описание = ОбменДаннымиЕГАИС.ОписаниеОперацииПередачиДанных(
		Операция, ОрганизацияЕГАИС);
	
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(Операция, ФорматОбмена);
	ИмяТипа          = Перечисления.ВидыДокументовЕГАИС.ТипЕГАИС(Операция, ФорматОбмена);
	
	Если ПространствоИмен = Неопределено
		Или ИмяТипа = Неопределено Тогда
		ОбменДаннымиЕГАИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеXML,
			СтрШаблон(НСтр("ru = 'Операция не поддерживается в версии формата обмена: %1.'"), ФорматОбмена));
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
	КонецЕсли;
	
	#Область Запрос
	
	ЗапросXDTO = РаботаСXMLЕГАИС.ОбъектXDTO(ПространствоИмен, "QueryParameters");
	Parameters = РаботаСXMLИС.ОбъектXDTOПоИмениТипа(ЗапросXDTO, "Parameters");
	Parameter  = РаботаСXMLИС.ОбъектXDTOПоИмениТипа(Parameters, "Parameter");
	
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(Parameter, "Name", "WBREGID",         СообщениеXML);
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(Parameter, "Value", ИдентификаторТТН, СообщениеXML);
	
	Parameters.Parameter.Добавить(Parameter);
	ЗапросXDTO.Parameters.Добавить(Parameters);
	
	#КонецОбласти
	
	ТекстСообщенияXML = РаботаСXMLЕГАИС.ОбъектXDTOВXML(ЗапросXDTO, Шапка.ИдентификаторФСРАР, ПространствоИмен, ИмяТипа);
	
	СообщениеXML.ТекстСообщенияXML = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения      = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеXML.ОрганизацияЕГАИС  = ОрганизацияЕГАИС;
	СообщениеXML.Операция          = Операция;
	СообщениеXML.ФорматОбмена      = ФорматОбмена;
	СообщениеXML.Документ          = Неопределено;
	СообщениеXML.ДокументОснование = Неопределено;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

// Формирует массив сообщений в формате XML к передаче в УТМ.
//
// Параметры:
//  ОрганизацииЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС для которой выполняется запрос.
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Запрашиваемые данные.
//   Возможные значения:
//     Перечисление.ВидыДокументовЕГАИС.ЗапросСправки1.
//     Перечисление.ВидыДокументовЕГАИС.ЗапросСправки2.
//  РегистрационныйНомер - Строка - Регистрационный номер запрашиваемой справки.
// 
// Возвращаемое значение:
//  Массив Из (См. ОбменДаннымиЕГАИС.СтруктураСообщенияXML) - Сообщения, к передаче в ЕГАИС.
//
Функция ЗапросДанныхСправкиКПередачеXML(ОрганизацияЕГАИС, Операция, РегистрационныйНомер) Экспорт
	
	СообщенияXML = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Шапка.Код          КАК ИдентификаторФСРАР,
	|	Шапка.ФорматОбмена КАК ФорматОбмена
	|ИЗ
	|	Справочник.КлассификаторОрганизацийЕГАИС КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", ОрганизацияЕГАИС);
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	ФорматОбмена = ОбменДаннымиЕГАИСКлиентСервер.ФорматОбмена(Шапка.ФорматОбмена);
	
	СообщениеXML = ОбменДаннымиЕГАИС.СтруктураСообщенияXML();
	СообщениеXML.Описание = ОбменДаннымиЕГАИС.ОписаниеОперацииПередачиДанных(
		Операция, ОрганизацияЕГАИС);
	
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(Операция, ФорматОбмена);
	ИмяТипа          = Перечисления.ВидыДокументовЕГАИС.ТипЕГАИС(Операция, ФорматОбмена);
	
	Если ПространствоИмен = Неопределено
		Или ИмяТипа = Неопределено Тогда
		ОбменДаннымиЕГАИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеXML,
			СтрШаблон(НСтр("ru = 'Операция не поддерживается в версии формата обмена: %1.'"), ФорматОбмена));
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
	КонецЕсли;
	
	#Область Запрос
	
	Если ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V1 Тогда
		
		ЗапросXDTO = РаботаСXMLЕГАИС.ОбъектXDTO(ПространствоИмен, "QueryFormAB");
		РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ЗапросXDTO, "FormRegId", РегистрационныйНомер, СообщениеXML);
		
	Иначе
		
		ЗапросXDTO = РаботаСXMLЕГАИС.ОбъектXDTO(ПространствоИмен, "QueryFormF1F2");
		РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ЗапросXDTO, "FormRegId", РегистрационныйНомер, СообщениеXML);
		
	КонецЕсли;
	
	#КонецОбласти
	
	ТекстСообщенияXML = РаботаСXMLЕГАИС.ОбъектXDTOВXML(ЗапросXDTO, Шапка.ИдентификаторФСРАР, ПространствоИмен, ИмяТипа);
	
	СообщениеXML.ТекстСообщенияXML = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения      = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеXML.ОрганизацияЕГАИС  = ОрганизацияЕГАИС;
	СообщениеXML.Операция          = Операция;
	СообщениеXML.ФорматОбмена      = ФорматОбмена;
	СообщениеXML.Документ          = Неопределено;
	СообщениеXML.ДокументОснование = Неопределено;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

// Подготавливает запрос проверки подключения к УТМ.
//
// Параметры:
//  АдресУТМ - Строка - IP адрес УТМ.
//  ПортУТМ - Число - Порт
//  Таймаут - Число - Количество секунд таймаута.
//  ОбменНаСервере - Булево - Признак проверки подключения на сервере.
// 
// Возвращаемое значение:
//  (См. ОбменДаннымиЕГАИСВызовСервера.ПодготовитьСообщенияКПередаче)
//
Функция ПодготовитьЗапросПроверкиПодключенияКУТМ(АдресУТМ, ПортУТМ, Таймаут, ОбменНаСервере, ИдентификаторВладельца = Неопределено) Экспорт
	
	НастройкиОбменаЕГАИС = Новый Структура;
	НастройкиОбменаЕГАИС.Вставить("ОбменНаСервере", Новый Соответствие);
	НастройкиОбменаЕГАИС.Вставить("ОбменНаКлиенте", Новый Соответствие);
	НастройкиОбменаЕГАИС.Вставить("БезНастроек",    Новый Массив);
	
	НастройкаОбменаЕГАИС = ОбменДаннымиЕГАИСКлиентСервер.НоваяНастройкаОбменаЕГАИС();
	НастройкаОбменаЕГАИС.АдресУТМ = АдресУТМ;
	НастройкаОбменаЕГАИС.ПортУТМ  = ПортУТМ;
	НастройкаОбменаЕГАИС.Таймаут  = Таймаут;
	
	Если ОбменНаСервере Тогда
		НастройкиОбменаЕГАИС.ОбменНаСервере.Вставить("ПроверкаПодключенияКУТМ", НастройкаОбменаЕГАИС);
	Иначе
		НастройкиОбменаЕГАИС.ОбменНаКлиенте.Вставить("ПроверкаПодключенияКУТМ", НастройкаОбменаЕГАИС);
	КонецЕсли;
	
	Сообщения = ЗапросПроверкиПодключенияКУТМКПередачеXML();
	
	ВозвращаемоеЗначение = ОбменДаннымиЕГАИСВызовСервера.ПодготовитьСообщенияКПередаче(Сообщения, Истина, НастройкиОбменаЕГАИС, ИдентификаторВладельца);
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Выполняет подготовку запроса проверки акцизных марок на остатках организации к передаче и
// передает запрос в ЕГАИС, если есть действующее подключение к УТМ.
//
// Параметры:
//  ОрганизацииЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС для которой выполняется запрос.
//  АкцизныеМарки - Массив Из Строка - Акцизные марки для проверки.
//  ИдентификаторВладельца - УникальныйИдентификатор - Уникальный идентификатор формы для сообщений обмена.
//
// Возвращаемое значение:
//  см. ОбменДаннымиЕГАИСВызовСервера.ПодготовитьСообщенияКПередаче
//
Функция ПодготовитьЗапросПроверкиАкцизныхМарокНаОстаткахОрганизацииКПередаче(ОрганизацияЕГАИС, АкцизныеМарки, ИдентификаторВладельца = Неопределено) Экспорт
	
	Сообщения = ЗапросПроверкиМарокНаОстаткахОрганизацииКПередачеXML(ОрганизацияЕГАИС, АкцизныеМарки);
	
	ВозвращаемоеЗначение = ОбменДаннымиЕГАИСВызовСервера.ПодготовитьСообщенияКПередаче(Сообщения,,,ИдентификаторВладельца);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Выполняет подготовку запроса ТТН к передаче и
// передает запрос в ЕГАИС, если есть действующее подключение к УТМ.
//
// Параметры:
//  ОрганизацииЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС для которой выполняется запрос.
//  ИдентификаторТТН - Строка - Идентификатор запрашиваемой ТТН.
//  ИдентификаторВладельца - УникальныйИдентификатор - Уникальный идентификатор формы для сообщений обмена
// 
// Возвращаемое значение:
//  см. ОбменДаннымиЕГАИСВызовСервера.ПодготовитьСообщенияКПередаче
//
Функция ПодготовитьЗапросДанныхТТНКПередаче(ОрганизацияЕГАИС, ИдентификаторТТН, ИдентификаторВладельца = Неопределено) Экспорт
	
	Сообщения = ЗапросДанныхТТНКПередачеXML(ОрганизацияЕГАИС, ИдентификаторТТН);
	
	ВозвращаемоеЗначение = ОбменДаннымиЕГАИСВызовСервера.ПодготовитьСообщенияКПередаче(Сообщения,,,ИдентификаторВладельца);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Выполняет подготовку запроса данных справки по ее регистрационному номеру к передаче и
// передает запрос в ЕГАИС, если есть действующее подключение к УТМ.
//
// Параметры:
//  ОрганизацииЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС для которой выполняется запрос.
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Запрашиваемые данные.
//   Возможные значения:
//     Перечисление.ВидыДокументовЕГАИС.ЗапросСправки1.
//     Перечисление.ВидыДокументовЕГАИС.ЗапросСправки2.
//  РегистрационныйНомер - Строка - Регистрационный номер запрашиваемой справки.
//  ИдентификаторВладельца - УникальныйИдентификатор - Уникальный идентификатор формы для сообщений обмена
// 
// Возвращаемое значение:
//  См. ОбменДаннымиЕГАИСВызовСервера.ПодготовитьСообщенияКПередаче
Функция ПодготовитьЗапросДанныхСправкиКПередаче(ОрганизацияЕГАИС, Операция, РегистрационныйНомер, ИдентификаторВладельца = Неопределено) Экспорт
	
	Сообщения = ЗапросДанныхСправкиКПередачеXML(ОрганизацияЕГАИС, Операция, РегистрационныйНомер);
	
	ВозвращаемоеЗначение = ОбменДаннымиЕГАИСВызовСервера.ПодготовитьСообщенияКПередаче(Сообщения);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область ОбработкаОшибок

// Выполняет запись ошибки сканирования и проверки в журнал регистрации, добавляя имя события ЕГАИС.
//    Оповещает пользователя об ошибке.
// Параметры:
//  Шаблон				 - Строка - многоязычный шаблон сообщения (с 2 параметрами)
//  Ссылка				 - ДокументСсылка - документ в котором произошла ошибка
//  ПредставлениеОшибки	 - Строка - представление ошибки.
//
Процедура ИнформироватьОбОшибкеВДокументе(Шаблон, Ссылка, ПредставлениеОшибки) Экспорт
	
	ТекстСообщения = СтрШаблон(Шаблон, Ссылка, ПредставлениеОшибки);
	
	ОбщегоНазначенияЕГАИСВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(ТекстСообщения);
	
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийПолученияФормОбъектов

// Обработчик события вызывается на сервере при получении стандартной управляемой формы.
// Если требуется переопределить выбор открываемой формы, необходимо установить в параметре <ВыбраннаяФорма>
// другое имя формы или объект метаданных формы, которую требуется открыть, и в параметре <СтандартнаяОбработка>
// установить значение Ложь.
//
// Параметры:
//  ИмяСправочника - Строка - имя справочника, для которого открывается форма,
//  ВидФормы - Строка - имя стандартной формы,
//  Параметры - Структура - параметры формы,
//  ВыбраннаяФорма - Строка, ФормаКлиентскогоПриложения - содержит имя открываемой формы или объект метаданных Форма,
//  ДополнительнаяИнформация - Структура - дополнительная информация открытия формы,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной обработки события.
//
Процедура ПриПолученииФормыСправочника(ИмяСправочника, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	СобытияФормИСПереопределяемый.ПриПолученииФормыСправочника(ИмяСправочника, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка);
	
КонецПроцедуры

// Обработчик события вызывается на сервере при получении стандартной управляемой формы.
// Если требуется переопределить выбор открываемой формы, необходимо установить в параметре <ВыбраннаяФорма>
// другое имя формы или объект метаданных формы, которую требуется открыть, и в параметре <СтандартнаяОбработка>
// установить значение Ложь.
//
// Параметры:
//  ИмяДокумента - Строка - имя документа, для которого открывается форма,
//  ВидФормы - Строка - имя стандартной формы,
//  Параметры - Структура - параметры формы,
//  ВыбраннаяФорма - Строка, ФормаКлиентскогоПриложения - содержит имя открываемой формы или объект метаданных Форма,
//  ДополнительнаяИнформация - Структура - дополнительная информация открытия формы,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной обработки события.
//
Процедура ПриПолученииФормыДокумента(ИмяДокумента, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	СобытияФормИСПереопределяемый.ПриПолученииФормыДокумента(ИмяДокумента, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка);
	
КонецПроцедуры

// Обработчик события вызывается на сервере при получении стандартной управляемой формы.
// Если требуется переопределить выбор открываемой формы, необходимо установить в параметре <ВыбраннаяФорма>
// другое имя формы или объект метаданных формы, которую требуется открыть, и в параметре <СтандартнаяОбработка>
// установить значение Ложь.
//
// Параметры:
//  ИмяРегистра - Строка - имя регистра сведений, для которого открывается форма,
//  ВидФормы - Строка - имя стандартной формы,
//  Параметры - Структура - параметры формы,
//  ВыбраннаяФорма - Строка, ФормаКлиентскогоПриложения - содержит имя открываемой формы или объект метаданных Форма,
//  ДополнительнаяИнформация - Структура - дополнительная информация открытия формы,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной обработки события.
//
Процедура ПриПолученииФормыРегистраСведений(ИмяРегистра, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	СобытияФормИСПереопределяемый.ПриПолученииФормыРегистраСведений(ИмяРегистра, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Возвращает реквизиты алкогольной продукции для создания номенклатуры.
//
// Параметры:
//  АлкогольнаяПродукция - СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС - Алкогольная продукция.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * ВидАлкогольнойПродукцииЕГАИС - СправочникСсылка.ВидыАлкогольнойПродукции - Вид алкогольной продукции.
//   * НаименованиеНоменклатурыЕГАИС - Строка - Наименование номенклатуры.
//   * ПолноеНаименованиеНоменклатурыЕГАИС - Строка - Полное наименование номенклатуры.
//   * КрепостьЕГАИС - Число - Крепость.
//   * ОбъемЕГАИС - Число - Объем.
//   * ИмпортерЕГАИС  - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Производитель.
//   * ПроизводительЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Производитель.
//
Функция РеквизитыАлкогольнойПродукцииДляСозданияНоменклатуры(АлкогольнаяПродукция) Экспорт
	
	Если НЕ ЗначениеЗаполнено(АлкогольнаяПродукция) Тогда
		Возврат Неопределено
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КлассификаторАлкогольнойПродукцииЕГАИС.ВидПродукции             КАК ВидПродукции,
	|	КлассификаторАлкогольнойПродукцииЕГАИС.Импортер                 КАК Импортер,
	|	КлассификаторАлкогольнойПродукцииЕГАИС.Крепость                 КАК Крепость,
	|	КлассификаторАлкогольнойПродукцииЕГАИС.Наименование             КАК Наименование,
	|	КлассификаторАлкогольнойПродукцииЕГАИС.НаименованиеПолное       КАК НаименованиеПолное,
	|	КлассификаторАлкогольнойПродукцииЕГАИС.Объем                    КАК Объем,
	|	КлассификаторАлкогольнойПродукцииЕГАИС.Производитель            КАК Производитель,
	|	КлассификаторАлкогольнойПродукцииЕГАИС.ВидПродукции.Маркируемый КАК Маркируемый
	|ИЗ
	|	Справочник.КлассификаторАлкогольнойПродукцииЕГАИС КАК КлассификаторАлкогольнойПродукцииЕГАИС
	|ГДЕ
	|	КлассификаторАлкогольнойПродукцииЕГАИС.Ссылка = &АлкогольнаяПродукция
	|");
	Запрос.УстановитьПараметр("АлкогольнаяПродукция", АлкогольнаяПродукция);
	
	ВыборкаРеквизиты = Запрос.Выполнить().Выбрать();
	ВыборкаРеквизиты.Следующий();
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("АлкогольнаяПродукцияЕГАИС",           АлкогольнаяПродукция);
	Реквизиты.Вставить("ВидАлкогольнойПродукцииЕГАИС",        ВыборкаРеквизиты.ВидПродукции);
	Реквизиты.Вставить("НаименованиеНоменклатурыЕГАИС",       ВыборкаРеквизиты.Наименование);
	Реквизиты.Вставить("ПолноеНаименованиеНоменклатурыЕГАИС", ВыборкаРеквизиты.НаименованиеПолное);
	Реквизиты.Вставить("КрепостьЕГАИС",                       ВыборкаРеквизиты.Крепость);
	Реквизиты.Вставить("ОбъемЕГАИС",                          ВыборкаРеквизиты.Объем);
	Реквизиты.Вставить("ИмпортерЕГАИС",                       ВыборкаРеквизиты.Импортер);
	Реквизиты.Вставить("ПроизводительЕГАИС",                  ВыборкаРеквизиты.Производитель);
	Реквизиты.Вставить("МаркируемаяПродукцияЕГАИС",           ВыборкаРеквизиты.Маркируемый);
	
	Возврат Реквизиты;
	
КонецФункции

// Возвращает возможные ТТН ЕГАИС для связи с прикладным документом поступления
//
// Параметры:
//   Организация - ОпределяемыйТип.ОрганизацияКонтрагентГосИС - организация-ключ поиска
//   Склад       - ОпределяемыйТип.ТорговыйОбъектЕГАИС        - торговый объект-ключ поиска
//   Контрагент  - ОпределяемыйТип.ОрганизацияКонтрагентГосИС - грузоотправитель/поставщик-ключ поиска
//
// Возвращаемое значение:
//   Массив Из ДокументСсылка.ТТНВходящаяЕГАИС - подходящие под указанные фильтры ТТН входящие ЕГАИС, еще не
//   связанные с прикладными документами.
//
Функция ВозможныеТТНЕГАИС(Организация, Склад, Контрагент) Экспорт
	
	МассивПустыхЗначений = Новый Массив;
	МассивПустыхЗначений.Добавить(Неопределено);
	Для Каждого ТипыДокументаПоступления Из Метаданные.ОпределяемыеТипы.ОснованиеТТНВходящаяЕГАИС.Тип.Типы() Цикл
		МассивПустыхЗначений.Добавить(Документы[Метаданные.НайтиПоТипу(ТипыДокументаПоступления).Имя].ПустаяСсылка());
	КонецЦикла;
	
	Контрагенты = Новый Массив;
	Контрагенты.Добавить(Неопределено);
	Контрагенты.Добавить(Контрагент);
	Для Каждого ТипыКонтрагентов Из Метаданные.ОпределяемыеТипы.ОрганизацияКонтрагентГосИС.Тип.Типы() Цикл
		Контрагенты.Добавить(Справочники[Метаданные.НайтиПоТипу(ТипыКонтрагентов).Имя].ПустаяСсылка());
	КонецЦикла;
	
	СтатусыОтказа = Новый СписокЗначений;
	СтатусыОтказа.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.Отменен);
	СтатусыОтказа.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ОтмененПоставщиком);
	СтатусыОтказа.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ЗапросНаОтменуПроведенияКПередаче);
	СтатусыОтказа.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ЗапросНаОтменуПроведенияПереданВУТМ);
	СтатусыОтказа.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ЗапросНаОтменуПроведенияОбрабатываетсяЕГАИС);
	СтатусыОтказа.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ЗапросНаОтменуПроведенияОшибка);
	СтатусыОтказа.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.АктОтказаКПередаче);
	СтатусыОтказа.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.АктОтказаПереданВУТМ);
	СтатусыОтказа.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.АктОтказаОбрабатываетсяЕГАИС);
	СтатусыОтказа.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.АктОтказаОшибка);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТТНВходящаяЕГАИС.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО СтатусыДокументовЕГАИС.Документ = ТТНВходящаяЕГАИС.Ссылка
	|ГДЕ
	|	ТТНВходящаяЕГАИС.Организация = &Организация
	|	И ТТНВходящаяЕГАИС.ТорговыйОбъект = &Склад
	|	И ТТНВходящаяЕГАИС.ДокументОснование В(&ПустойДокументОснование)
	|	И НЕ СтатусыДокументовЕГАИС.Статус В(&СтатусыОтказа)
	|	И (ТТНВходящаяЕГАИС.Поставщик.Контрагент В (&Контрагенты)
	|		ИЛИ ТТНВходящаяЕГАИС.Грузоотправитель.Контрагент В (&Контрагенты))";
	
	Запрос.УстановитьПараметр("Организация",             Организация);
	Запрос.УстановитьПараметр("Склад",                   Склад);
	Запрос.УстановитьПараметр("ПустойДокументОснование", МассивПустыхЗначений);
	Запрос.УстановитьПараметр("СтатусыОтказа",           СтатусыОтказа);
	Запрос.УстановитьПараметр("Контрагенты",             Контрагенты);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Возвращает данные ТТН ЕГАИС по введенным реквизитам приобретения (контрагенту, входящим номеру и дате)
//   В случае отсутствия или множественного результата возвращает пустую структуру.
//
// Параметры:
//   Контрагент - ОпределяемыйТип.ОрганизацияКонтрагентГосИС - контрагент документа приобретения
//   НомерТТН   - Строка                                     - номер входящего документа (ТТН)
//   ДатаТТН    - Дата                                       - дата входящего документа (ТТН)
//
// Возвращаемое значение:
//   Структура - реквизиты найденной ТТН ЕГАИС (если подходящая ТТН одна):
// * ТребуетсяСвязатьОрганизацию - Булево - признак сопоставленности организации из ТТН ЕГАИС
// * ОрганизацияЕГАИС            - СправочникСсылка.КлассификаторОрганизацийЕГАИС - организация из ТТН ЕГАИС
// * ДатаТТН                     - Дата   - дата найденной ТТН
// * НомерТТН                    - Строка - номер найденной ТТН
// * Ссылка                      - ДокументСсылка.ТТНВходящаяЕГАИС - найденная ТТН
//
Функция НайтиТТНЕГАИС(Контрагент, НомерТТН, ДатаТТН) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КлассификаторОрганизацийЕГАИС.Ссылка
	|ИЗ
	|	Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|ГДЕ
	|	КлассификаторОрганизацийЕГАИС.Контрагент = &Контрагент");
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	МассивНайденныхОрганизацийЕГАИС = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТТНВходящаяЕГАИС.Ссылка   КАК Ссылка,
	|	ТТНВходящаяЕГАИС.НомерТТН КАК НомерТТН,
	|	ТТНВходящаяЕГАИС.ДатаТТН  КАК ДатаТТН,
	|	ВЫБОР
	|		КОГДА ТТНВходящаяЕГАИС.Поставщик = ЗНАЧЕНИЕ(Справочник.КлассификаторОрганизацийЕГАИС.ПустаяСсылка)
	|			ТОГДА ТТНВходящаяЕГАИС.Грузоотправитель
	|		ИНАЧЕ ТТНВходящаяЕГАИС.Поставщик
	|	КОНЕЦ КАК ОрганизацияЕГАИС
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|ГДЕ
	|	(ТТНВходящаяЕГАИС.НомерТТН = &НомерТТН
	|			ИЛИ ТТНВходящаяЕГАИС.НомерТТН = &НомерТТНБезНулей)
	|	И ТТНВходящаяЕГАИС.ДатаТТН = &ДатаТТН
	|	И ВЫБОР
	|			КОГДА &НеИспользоватьОтборПоОрганизации
	|				ТОГДА ИСТИНА
	|			КОГДА ТТНВходящаяЕГАИС.Поставщик = ЗНАЧЕНИЕ(Справочник.КлассификаторОрганизацийЕГАИС.ПустаяСсылка)
	|				ТОГДА ТТНВходящаяЕГАИС.Грузоотправитель В (&СписокОрганизаций)
	|			ИНАЧЕ ТТНВходящаяЕГАИС.Поставщик В (&СписокОрганизаций)
	|		КОНЕЦ
	|");
	
	Запрос.УстановитьПараметр("НеИспользоватьОтборПоОрганизации", МассивНайденныхОрганизацийЕГАИС.Количество() = 0);
	Запрос.УстановитьПараметр("СписокОрганизаций",                МассивНайденныхОрганизацийЕГАИС);
	Запрос.УстановитьПараметр("НомерТТН",                         СокрЛП(НомерТТН));
	Запрос.УстановитьПараметр("НомерТТНБезНулей",                 ПрефиксацияОбъектовКлиентСервер.УдалитьЛидирующиеНулиИзНомераОбъекта(НомерТТН));
	Запрос.УстановитьПараметр("ДатаТТН",                          ДатаТТН);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Результат = Новый Структура;
	
	Результат.Вставить("Ссылка");
	Результат.Вставить("НомерТТН");
	Результат.Вставить("ДатаТТН");
	Результат.Вставить("ОрганизацияЕГАИС");
	Результат.Вставить("ТребуетсяСвязатьОрганизацию", Ложь);
	
	Если Выборка.Количество()=1 Тогда
		
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
		
		Если МассивНайденныхОрганизацийЕГАИС.Количество() = 0 И ЗначениеЗаполнено(Выборка.ОрганизацияЕГАИС) Тогда
			Результат.ТребуетсяСвязатьОрганизацию = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Заполняет форматированную строку (связи с документами ЕГАИС) для формы прикладного документа со статусом оформления ЕГАИС
//
// Параметры:
//   Ссылка - ДокументСсылка - ссылка на прикладной документ
//
// Возвращаемое значение:
//   ФорматированнаяСтрока, Строка - Описание доступных действий ЕГАИС
Функция ТекстДокументаЕГАИС(Ссылка) Экспорт
	
	ОформлениеДокументовПоПриоритетам = ИнтеграцияЕГАИС.ДанныеОформленияДокументовПоПриоритетам(Ссылка);
	
	ЕстьАлкогольнаяПродукция = ОформлениеДокументовПоПриоритетам.Количество() > 0;
	Если Не ЕстьАлкогольнаяПродукция Тогда
		Возврат "";
	КонецЕсли;
	
	ФорматированныеСтроки = Новый Массив;
	Для Каждого КлючИЗначение Из ОформлениеДокументовПоПриоритетам Цикл
		Данные = КлючИЗначение.Значение;
		
		ЕстьДокументыСЧастичнымОформлением = Ложь;
		Для Каждого ДанныеДокументаЕГАИС Из Данные Цикл
			Если ДанныеДокументаЕГАИС.СтатусОформления = Перечисления.СтатусыОформленияДокументовЕГАИС.ЕстьОшибкиОформления
				Или ДанныеДокументаЕГАИС.СтатусОформления = Перечисления.СтатусыОформленияДокументовЕГАИС.ОформленоЧастично Тогда
				ЕстьДокументыСЧастичнымОформлением = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ДанныеДокументаЕГАИС Из Данные Цикл
			
			Если ЕстьДокументыСЧастичнымОформлением Тогда
				Если ДанныеДокументаЕГАИС.МассивДокументов.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если ФорматированныеСтроки.Количество() <> 0 Тогда
				Если Данные.Количество() > 1 Тогда
					ФорматированныеСтроки.Добавить(" " + НСтр("ru = 'или'") + " ");
				Иначе
					ФорматированныеСтроки.Добавить("," + " ");
				КонецЕсли;
			КонецЕсли;
			
			ФорматированныеСтроки.Добавить(ДанныеДокументаЕГАИС.Представление);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Новый ФорматированнаяСтрока(ФорматированныеСтроки);
	
КонецФункции

// Учитываемые виды маркируемой продукции.
// 
// Возвращаемое значение:
//  ФиксированныйМассив - Учитываемые виды маркируемой продукции
Функция УчитываемыеВидыМаркируемойПродукции() Экспорт
	
	ВидыПродукции = Новый Массив;
	
	Если ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции") Тогда
		ВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.Алкогольная);
	КонецЕсли;
	
	Возврат Новый ФиксированныйМассив(ВидыПродукции);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получает торгового объект контрагента.
//
// Параметры:
//  ТорговыйОбъект - ОпределяемыйТип.ОрганизацияКонтрагентГосИС - Контрагент.
//
// Возвращаемое значение:
//   ОпределяемыйТип.ТорговыйОбъектЕГАИС - Торговый объект.
//
Функция ТорговыйОбъектКонтрагента(Контрагент) Экспорт
	
	ТорговыйОбъект = Неопределено;
	РаботаСКонтрагентамиЕГАИСПереопределяемый.ТорговыйОбъектКонтрагента(ТорговыйОбъект, Контрагент);
	Возврат ТорговыйОбъект;
	
КонецФункции

// Проверят использование механизма регистрации розничных продаж в ЕГАИС.
// 
// Параметры:
//  Контрагент - ОпределяемыйТип.КонтрагентГосИС
//  ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектЕГАИС
//  ДатаПродажи - Неопределено, Дата - Дата продажи
// 
// Возвращаемое значение:
//  Булево - Используется регистрация розничных продаж в ЕГАИС
Функция ИспользуетсяРегистрацияРозничныхПродажВЕГАИС(Контрагент, ТорговыйОбъект, Знач ДатаПродажи = Неопределено) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(ДатаПродажи) Тогда
		ДатаПродажи = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КлассификаторОрганизацийЕГАИС.Ссылка,
	|	КлассификаторОрганизацийЕГАИС.НаходитсяВСельскойМестности
	|ИЗ
	|	Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|ГДЕ
	|	КлассификаторОрганизацийЕГАИС.ТорговыйОбъект = &ТорговыйОбъект
	|	И КлассификаторОрганизацийЕГАИС.Контрагент = &Контрагент
	|	И КлассификаторОрганизацийЕГАИС.СоответствуетОрганизации");
	
	Запрос.УстановитьПараметр("Контрагент",     Контрагент);
	Запрос.УстановитьПараметр("ТорговыйОбъект", ТорговыйОбъект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И Выборка.НаходитсяВСельскойМестности Тогда
		ДатаНачалаРегистрации = Константы.ДатаНачалаРегистрацииРозничныхПродажВЕГАИСВСельскойМестности.Получить();
	Иначе
		ДатаНачалаРегистрации = Константы.ДатаНачалаРегистрацииРозничныхПродажВЕГАИС.Получить();
	КонецЕсли;
	
	Возврат ДатаПродажи >= ДатаНачалаРегистрации И ЗначениеЗаполнено(ДатаНачалаРегистрации);

КонецФункции

// Возвращает код организации ЕГАИС в ФСРАР для переданного документа обмена.
// 
// Параметры:
//  ДокументСсылка - ДокументСсылка - Документ ссылка
// 
// Возвращаемое значение:
//  Неопределено - Код ФСРАРОрганизации по документу
Функция КодФСРАРОрганизацииПоДокументу(ДокументСсылка) Экспорт
	
	ИмяДокумента = ДокументСсылка.Метаданные().Имя;
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
		ИмяРеквизита = "Грузополучатель";
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ТТНИсходящаяЕГАИС") Тогда
		ИмяРеквизита = "Грузоотправитель";
	Иначе
		ИмяРеквизита = "ОрганизацияЕГАИС";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КлассификаторОрганизацийЕГАИС.Код КАК Код
	|ИЗ
	|	Документ." + ИмяДокумента + " КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|		ПО ТаблицаДокумента." + ИмяРеквизита + " = КлассификаторОрганизацийЕГАИС.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить()[0].Код;
	
КонецФункции

// см. ПолучениеФайловИзИнтернета.ПолучитьПрокси
//
Функция НастройкиПроксиСервера(URLИлиПротокол) Экспорт
	
	Возврат ПолучениеФайловИзИнтернета.ПолучитьПрокси(URLИлиПротокол);
	
КонецФункции

// Возвращает формат обмена с УТМ организации ЕГАИС.
// 
// Параметры:
//  ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ФорматыОбменаЕГАИС, Неопределено - Формат обмена организации ЕГАИС
Функция ФорматОбменаОрганизацииЕГАИС(ОрганизацияЕГАИС) Экспорт
	
	Результат = ОбменДаннымиЕГАИСКлиентСервер.ФорматОбмена();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ОрганизацияЕГАИС);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КлассификаторОрганизацийЕГАИС.ФорматОбмена КАК ФорматОбмена
	|ИЗ
	|	Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|ГДЕ
	|	КлассификаторОрганизацийЕГАИС.Ссылка = &Ссылка
	|	И КлассификаторОрганизацийЕГАИС.ФорматОбмена <> ЗНАЧЕНИЕ(Перечисление.ФорматыОбменаЕГАИС.ПустаяСсылка)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Возврат РезультатЗапроса.Выгрузить()[0].ФорматОбмена;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получить документы по основанию.
//
// Параметры:
//  ДокументОснование - ДокументСсылка - Документ.
// 
// Возвращаемое значение:
//  Структура - структура со свойствами:
//   * ВозвратИзРегистра2ЕГАИС - Структура со свойствами:
//     ** Ссылка - ДокументСсылка - Документ.
//     ** Статус - ПеречислениеСсылка.СтатусыОбработкиВозвратаИзРегистра2ЕГАИС - Статус документа.
//   * ПередачаВРегистр2ЕГАИС - Структура со свойствами:
//     ** Ссылка - ДокументСсылка - Документ.
//     ** Статус - ПеречислениеСсылка.СтатусыОбработкиПередачиВРегистр2ЕГАИС - Статус документа.
//
Функция ДокументыПоОснованию(ДокументОснование) Экспорт
	
	ИменаДокументов = Новый Массив;
	ИменаДокументов.Добавить("АктСписанияЕГАИС");
	ИменаДокументов.Добавить("АктПостановкиНаБалансЕГАИС");
	ИменаДокументов.Добавить("ТТНВходящаяЕГАИС");
	ИменаДокументов.Добавить("ТТНИсходящаяЕГАИС");
	ИменаДокументов.Добавить("ЧекЕГАИС");
	ИменаДокументов.Добавить("ЧекЕГАИСВозврат");
	ИменаДокументов.Добавить("ПередачаВРегистр2ЕГАИС");
	ИменаДокументов.Добавить("ВозвратИзРегистра2ЕГАИС");
	ИменаДокументов.Добавить("УведомлениеОПланируемомИмпортеЕГАИС");
	ИменаДокументов.Добавить("ОтчетОбИмпортеЕГАИС");
	ИменаДокументов.Добавить("ОтчетОПроизводствеЕГАИС");
	
	ВозвращаемоеЗначение = Новый Структура;
	Для Каждого ИмяДокумента Из ИменаДокументов Цикл
		ВозвращаемоеЗначение.Вставить(ИмяДокумента, Новый Массив);
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Неопределено            КАК ПередачаВРегистр2ЕГАИС,
	|	Неопределено            КАК ВозвратИзРегистра2ЕГАИС,
	|	Таблица.Ссылка          КАК АктСписанияЕГАИС,
	|	Неопределено            КАК АктПостановкиНаБалансЕГАИС,
	|	Неопределено            КАК ТТНВходящаяЕГАИС,
	|	Неопределено            КАК ТТНИсходящаяЕГАИС,
	|	Неопределено            КАК ЧекЕГАИС,
	|	Неопределено            КАК ЧекЕГАИСВозврат,
	|	Неопределено            КАК УведомлениеОПланируемомИмпортеЕГАИС,
	|	Неопределено            КАК ОтчетОбИмпортеЕГАИС,
	|	Неопределено            КАК ОтчетОПроизводствеЕГАИС,
	|	Статусы.Статус          КАК Статус,
	|	Таблица.Дата            КАК Дата
	|ИЗ
	|	Документ.АктСписанияЕГАИС КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК Статусы
	|		ПО Статусы.Документ = Таблица.Ссылка
	|ГДЕ
	|	Таблица.ДокументОснование = &ДокументОснование
	|	И Не Таблица.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Неопределено            КАК ПередачаВРегистр2ЕГАИС,
	|	Неопределено            КАК ВозвратИзРегистра2ЕГАИС,
	|	Неопределено            КАК АктСписанияЕГАИС,
	|	Таблица.Ссылка          КАК АктПостановкиНаБалансЕГАИС,
	|	Неопределено            КАК ТТНВходящаяЕГАИС,
	|	Неопределено            КАК ТТНИсходящаяЕГАИС,
	|	Неопределено            КАК ЧекЕГАИС,
	|	Неопределено            КАК ЧекЕГАИСВозврат,
	|	Неопределено            КАК УведомлениеОПланируемомИмпортеЕГАИС,
	|	Неопределено            КАК ОтчетОбИмпортеЕГАИС,
	|	Неопределено            КАК ОтчетОПроизводствеЕГАИС,
	|	Статусы.Статус          КАК Статус,
	|	Таблица.Дата            КАК Дата
	|ИЗ
	|	Документ.АктПостановкиНаБалансЕГАИС КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК Статусы
	|		ПО Статусы.Документ = Таблица.Ссылка
	|ГДЕ
	|	Таблица.ДокументОснование = &ДокументОснование
	|	И Не Таблица.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Неопределено            КАК ПередачаВРегистр2ЕГАИС,
	|	Неопределено            КАК ВозвратИзРегистра2ЕГАИС,
	|	Неопределено            КАК АктСписанияЕГАИС,
	|	Неопределено            КАК АктПостановкиНаБалансЕГАИС,
	|	Таблица.Ссылка          КАК ТТНВходящаяЕГАИС,
	|	Неопределено            КАК ТТНИсходящаяЕГАИС,
	|	Неопределено            КАК ЧекЕГАИС,
	|	Неопределено            КАК ЧекЕГАИСВозврат,
	|	Неопределено            КАК УведомлениеОПланируемомИмпортеЕГАИС,
	|	Неопределено            КАК ОтчетОбИмпортеЕГАИС,
	|	Неопределено            КАК ОтчетОПроизводствеЕГАИС,
	|	Статусы.Статус          КАК Статус,
	|	Таблица.Дата            КАК Дата
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК Статусы
	|		ПО Статусы.Документ = Таблица.Ссылка
	|ГДЕ
	|	Таблица.ДокументОснование = &ДокументОснование
	|	И Не Таблица.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Неопределено            КАК ПередачаВРегистр2ЕГАИС,
	|	Неопределено            КАК ВозвратИзРегистра2ЕГАИС,
	|	Неопределено            КАК АктСписанияЕГАИС,
	|	Неопределено            КАК АктПостановкиНаБалансЕГАИС,
	|	Неопределено            КАК ТТНВходящаяЕГАИС,
	|	Таблица.Ссылка          КАК ТТНИсходящаяЕГАИС,
	|	Неопределено            КАК ЧекЕГАИС,
	|	Неопределено            КАК ЧекЕГАИСВозврат,
	|	Неопределено            КАК УведомлениеОПланируемомИмпортеЕГАИС,
	|	Неопределено            КАК ОтчетОбИмпортеЕГАИС,
	|	Неопределено            КАК ОтчетОПроизводствеЕГАИС,
	|	Статусы.Статус          КАК Статус,
	|	Таблица.Дата            КАК Дата
	|ИЗ
	|	Документ.ТТНИсходящаяЕГАИС КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК Статусы
	|		ПО Статусы.Документ = Таблица.Ссылка
	|ГДЕ
	|	Таблица.ДокументОснование = &ДокументОснование
	|	И Не Таблица.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Неопределено            КАК ПередачаВРегистр2ЕГАИС,
	|	Неопределено            КАК ВозвратИзРегистра2ЕГАИС,
	|	Неопределено            КАК АктСписанияЕГАИС,
	|	Неопределено            КАК АктПостановкиНаБалансЕГАИС,
	|	Неопределено            КАК ТТНВходящаяЕГАИС,
	|	Неопределено            КАК ТТНИсходящаяЕГАИС,
	|	Таблица.Ссылка          КАК ЧекЕГАИС,
	|	Неопределено            КАК ЧекЕГАИСВозврат,
	|	Неопределено            КАК УведомлениеОПланируемомИмпортеЕГАИС,
	|	Неопределено            КАК ОтчетОбИмпортеЕГАИС,
	|	Неопределено            КАК ОтчетОПроизводствеЕГАИС,
	|	Статусы.Статус          КАК Статус,
	|	Таблица.Дата            КАК Дата
	|ИЗ
	|	Документ.ЧекЕГАИС КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК Статусы
	|		ПО Статусы.Документ = Таблица.Ссылка
	|ГДЕ
	|	Таблица.ДокументОснование = &ДокументОснование
	|	И Не Таблица.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Неопределено            КАК ПередачаВРегистр2ЕГАИС,
	|	Неопределено            КАК ВозвратИзРегистра2ЕГАИС,
	|	Неопределено            КАК АктСписанияЕГАИС,
	|	Неопределено            КАК АктПостановкиНаБалансЕГАИС,
	|	Неопределено            КАК ТТНВходящаяЕГАИС,
	|	Неопределено            КАК ТТНИсходящаяЕГАИС,
	|	Неопределено            КАК ЧекЕГАИС,
	|	Таблица.Ссылка          КАК ЧекЕГАИСВозврат,
	|	Неопределено            КАК УведомлениеОПланируемомИмпортеЕГАИС,
	|	Неопределено            КАК ОтчетОбИмпортеЕГАИС,
	|	Неопределено            КАК ОтчетОПроизводствеЕГАИС,
	|	Статусы.Статус          КАК Статус,
	|	Таблица.Дата            КАК Дата
	|ИЗ
	|	Документ.ЧекЕГАИСВозврат КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК Статусы
	|		ПО Статусы.Документ = Таблица.Ссылка
	|ГДЕ
	|	Таблица.ДокументОснование = &ДокументОснование
	|	И Не Таблица.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.Ссылка          КАК ПередачаВРегистр2ЕГАИС,
	|	Неопределено            КАК ВозвратИзРегистра2ЕГАИС,
	|	Неопределено            КАК АктСписанияЕГАИС,
	|	Неопределено            КАК АктПостановкиНаБалансЕГАИС,
	|	Неопределено            КАК ТТНВходящаяЕГАИС,
	|	Неопределено            КАК ТТНИсходящаяЕГАИС,
	|	Неопределено            КАК ЧекЕГАИС,
	|	Неопределено            КАК ЧекЕГАИСВозврат,
	|	Неопределено            КАК УведомлениеОПланируемомИмпортеЕГАИС,
	|	Неопределено            КАК ОтчетОбИмпортеЕГАИС,
	|	Неопределено            КАК ОтчетОПроизводствеЕГАИС,
	|	Статусы.Статус          КАК Статус,
	|	Таблица.Дата            КАК Дата
	|ИЗ
	|	Документ.ПередачаВРегистр2ЕГАИС КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК Статусы
	|		ПО Статусы.Документ = Таблица.Ссылка
	|ГДЕ
	|	Таблица.ДокументОснование = &ДокументОснование
	|	И Не Таблица.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Неопределено            КАК ПередачаВРегистр2ЕГАИС,
	|	Таблица.Ссылка          КАК ВозвратИзРегистра2ЕГАИС,
	|	Неопределено            КАК АктСписанияЕГАИС,
	|	Неопределено            КАК АктПостановкиНаБалансЕГАИС,
	|	Неопределено            КАК ТТНВходящаяЕГАИС,
	|	Неопределено            КАК ТТНИсходящаяЕГАИС,
	|	Неопределено            КАК ЧекЕГАИС,
	|	Неопределено            КАК ЧекЕГАИСВозврат,
	|	Неопределено            КАК УведомлениеОПланируемомИмпортеЕГАИС,
	|	Неопределено            КАК ОтчетОбИмпортеЕГАИС,
	|	Неопределено            КАК ОтчетОПроизводствеЕГАИС,
	|	Статусы.Статус          КАК Статус,
	|	Таблица.Дата            КАК Дата
	|ИЗ
	|	Документ.ВозвратИзРегистра2ЕГАИС КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК Статусы
	|		ПО Статусы.Документ = Таблица.Ссылка
	|ГДЕ
	|	Таблица.ДокументОснование = &ДокументОснование
	|	И Не Таблица.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Неопределено            КАК ПередачаВРегистр2ЕГАИС,
	|	Неопределено            КАК ВозвратИзРегистра2ЕГАИС,
	|	Неопределено            КАК АктСписанияЕГАИС,
	|	Неопределено            КАК АктПостановкиНаБалансЕГАИС,
	|	Неопределено            КАК ТТНВходящаяЕГАИС,
	|	Неопределено            КАК ТТНИсходящаяЕГАИС,
	|	Неопределено            КАК ЧекЕГАИС,
	|	Неопределено            КАК ЧекЕГАИСВозврат,
	|	Таблица.Ссылка          КАК УведомлениеОПланируемомИмпортеЕГАИС,
	|	Неопределено            КАК ОтчетОбИмпортеЕГАИС,
	|	Неопределено            КАК ОтчетОПроизводствеЕГАИС,
	|	Статусы.Статус          КАК Статус,
	|	Таблица.Дата            КАК Дата
	|ИЗ
	|	Документ.УведомлениеОПланируемомИмпортеЕГАИС КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК Статусы
	|		ПО Статусы.Документ = Таблица.Ссылка
	|ГДЕ
	|	Таблица.ДокументОснование = &ДокументОснование
	|	И Не Таблица.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Неопределено            КАК ПередачаВРегистр2ЕГАИС,
	|	Неопределено            КАК ВозвратИзРегистра2ЕГАИС,
	|	Неопределено            КАК АктСписанияЕГАИС,
	|	Неопределено            КАК АктПостановкиНаБалансЕГАИС,
	|	Неопределено            КАК ТТНВходящаяЕГАИС,
	|	Неопределено            КАК ТТНИсходящаяЕГАИС,
	|	Неопределено            КАК ЧекЕГАИС,
	|	Неопределено            КАК ЧекЕГАИСВозврат,
	|	Неопределено            КАК УведомлениеОПланируемомИмпортеЕГАИС,
	|	Таблица.Ссылка          КАК ОтчетОбИмпортеЕГАИС,
	|	Неопределено            КАК ОтчетОПроизводствеЕГАИС,
	|	Статусы.Статус          КАК Статус,
	|	Таблица.Дата            КАК Дата
	|ИЗ
	|	Документ.ОтчетОбИмпортеЕГАИС КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК Статусы
	|		ПО Статусы.Документ = Таблица.Ссылка
	|ГДЕ
	|	Таблица.ДокументОснование = &ДокументОснование
	|	И Не Таблица.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Неопределено            КАК ПередачаВРегистр2ЕГАИС,
	|	Неопределено            КАК ВозвратИзРегистра2ЕГАИС,
	|	Неопределено            КАК АктСписанияЕГАИС,
	|	Неопределено            КАК АктПостановкиНаБалансЕГАИС,
	|	Неопределено            КАК ТТНВходящаяЕГАИС,
	|	Неопределено            КАК ТТНИсходящаяЕГАИС,
	|	Неопределено            КАК ЧекЕГАИС,
	|	Неопределено            КАК ЧекЕГАИСВозврат,
	|	Неопределено            КАК УведомлениеОПланируемомИмпортеЕГАИС,
	|	Неопределено            КАК ОтчетОбИмпортеЕГАИС,
	|	Таблица.Ссылка          КАК ОтчетОПроизводствеЕГАИС,
	|	Статусы.Статус          КАК Статус,
	|	Таблица.Дата            КАК Дата
	|ИЗ
	|	Документ.ОтчетОПроизводствеЕГАИС КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК Статусы
	|		ПО Статусы.Документ = Таблица.Ссылка
	|ГДЕ
	|	Таблица.ДокументОснование = &ДокументОснование
	|	И Не Таблица.ПометкаУдаления
	|");
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Для Каждого ИмяДокумента Из ИменаДокументов Цикл
			Если ЗначениеЗаполнено(Выборка[ИмяДокумента]) Тогда
				
				Значение = Новый Структура;
				Значение.Вставить("Ссылка", Выборка[ИмяДокумента]);
				Значение.Вставить("Статус", Выборка.Статус);
				Значение.Вставить("Дата",   Выборка.Дата);
				
				ВозвращаемоеЗначение[ИмяДокумента].Добавить(Значение);
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Проверить сопоставление классификаторов
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Документ, для которого необходимо проверить соответствие классификаторов.
//  УникальныйИдентификатор - УникальныйИдентификатор - Идентификатор формы открытого документа.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   *ЕстьНеСопоставленныеТовары - Булево - Признак наличия несопоставленных товаров.
//   *НеСопоставленныеТовары - Строка - Адрес по временном хранилище.
//
Функция ПроверитьСопоставлениеКлассификаторов(ДокументОснование, УникальныйИдентификатор = Неопределено) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ЕстьНеСопоставленныеТовары",      Ложь);
	ВозвращаемоеЗначение.Вставить("ЕстьНеСопоставленныеОрганизации", Ложь);
	ВозвращаемоеЗначение.Вставить("НеСопоставленныеТовары",          Неопределено);
	
	ИмяТаблицы = "Документ" + "." + ДокументОснование.Метаданные().Имя + "." + "Товары";
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.НомерСтроки           КАК НомерСтроки,
	|	ТабличнаяЧасть.АлкогольнаяПродукция  КАК АлкогольнаяПродукция,
	|	ТабличнаяЧасть.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	&ПустаяНоменклатура                  КАК Номенклатура,
	|	&ПустаяХарактеристика                КАК Характеристика,
	|	&ПустаяСерия                         КАК Серия
	|ИЗ
	|	ИмяТаблицы КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &ДокументОснование
	|	И ТабличнаяЧасть.Номенклатура = &ПустаяНоменклатура
	|");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяТаблицы", ИмяТаблицы);
	
	Запрос.УстановитьПараметр("ДокументОснование",    ДокументОснование);
	Запрос.УстановитьПараметр("ПустаяНоменклатура",   ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура"));
	Запрос.УстановитьПараметр("ПустаяХарактеристика", ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("ХарактеристикаНоменклатуры"));
	Запрос.УстановитьПараметр("ПустаяСерия",          ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("СерияНоменклатуры"));
	
	НеСопоставленныеТовары = Запрос.Выполнить().Выгрузить();
	ВозвращаемоеЗначение.ЕстьНеСопоставленныеТовары = НеСопоставленныеТовары.Количество() > 0;
	ВозвращаемоеЗначение.ЕстьНеСопоставленныеОрганизации = Ложь;
	
	Если ВозвращаемоеЗначение.ЕстьНеСопоставленныеТовары
		И УникальныйИдентификатор <> Неопределено Тогда
		ВозвращаемоеЗначение.НеСопоставленныеТовары = ПоместитьВоВременноеХранилище(НеСопоставленныеТовары, УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Проверить сопоставление классификаторов
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Документ, для которого необходимо проверить соответствие классификаторов.
//  УникальныйИдентификатор - УникальныйИдентификатор - Идентификатор формы открытого документа.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   *ЕстьНеСопоставленныеТовары - Булево - Признак наличия несопоставленных товаров.
//   *НеСопоставленныеТовары - Строка - Адрес по временном хранилище.
//
Функция ПроверитьСопоставлениеКлассификаторовПрикладногоДокумента(ДокументОснование, УникальныйИдентификатор) Экспорт
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("ЕстьНеСопоставленныеТовары", Ложь);
	РезультатПроверки.Вставить("НеСопоставленныеТовары", "");
	
	ИнтеграцияЕГАИСПереопределяемый.ПроверитьСопоставлениеКлассификаторовПрикладногоДокумента(
		РезультатПроверки,
		ДокументОснование,
		УникальныйИдентификатор);
		
	Возврат РезультатПроверки;
	
КонецФункции

// Записывает данные при отказе ЕГАИС
//
// Параметры:
//  ДокументСсылка       - ДокументСсылка.ТТНВходящаяЕГАИС - Ссылка на документ
//  ИдентификаторЗапроса - Строка - Идентификатор строки.
//
Процедура ОтменитьПроведениеПоступленияТоваровПриОтказеОтТТН(ДокументСсылка) Экспорт
	
	ИнтеграцияЕГАИСПереопределяемый.ОтменитьПроведениеПоступленияТоваровПриОтказеОтТТН(ДокументСсылка);
	
КонецПроцедуры

// Функция проверяет наличие расхождений между ТТН и товарами накладной.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ТТНВходящаяЕГАИС - проверяемая ТТН,
//  ПоступлениеТоваров - ДокументСсылка, ДокументОбъект - проверяемое поступление товаров.
//
// Возвращаемое значение:
//  Булево - Истина, если есть расхождения, иначе - Ложь.
//
Функция ЕстьРасхожденияМеждуДокументомПоступленияИТТНЕГАИС(Знач ДокументСсылка, Знач ДокументПоступления) Экспорт
	
	Результат = Ложь;
	ИнтеграцияЕГАИСПереопределяемый.ПриОпределенииРасхожденийСТТНВходящейЕГАИС(ДокументСсылка, ДокументПоступления, Результат);
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру отбора для выбора документа поступления.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ТТНВходящаяЕГАИС - Документ ТТН ЕГАИС (входящая).
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * Организация - ОпределяемыйТип.ОрганизацияКонтрагентГосИС - Организация.
//   * ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектЕГАИС     - Торговый объект.
//   * Контрагент - ОпределяемыйТип.ОрганизацияКонтрагентГосИС  - Контрагент.
//
Функция СтруктураОтбораДляВыбораДокументаПоступления(ДокументСсылка) Экспорт
	
	РеквизитыТТН = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ДокументСсылка,
		"Организация, ТорговыйОбъект, Грузоотправитель");
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Организация",    РеквизитыТТН.Организация);
	СтруктураОтбора.Вставить("ТорговыйОбъект", РеквизитыТТН.ТорговыйОбъект);
	СтруктураОтбора.Вставить("Контрагент",     Неопределено);
	
	Если ЗначениеЗаполнено(РеквизитыТТН.Грузоотправитель) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КлассификаторОрганизацийЕГАИС.Контрагент
		|ИЗ
		|	Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
		|ГДЕ
		|	КлассификаторОрганизацийЕГАИС.Ссылка = &Ссылка
		|	И КлассификаторОрганизацийЕГАИС.Сопоставлено
		|");
		Запрос.УстановитьПараметр("Ссылка", РеквизитыТТН.Грузоотправитель);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СтруктураОтбора.Контрагент = Выборка.Контрагент;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураОтбора;
	
КонецФункции

// Записать связь документа поступления и ТТН ЕГАИС (входящая).
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ТТНВходящаяЕГАИС - ТТН ЕГАИС (входящая).
//  ДокументПоступления - ОпределяемыйТип.ОснованиеТТНВходящаяЕГАИС - Документ поступления.
//
Процедура ЗаписатьСвязьДокументаПоступленияИТТНЕГАИС(ДокументСсылка, ДокументПоступления) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		
		// Если выполнить блокировку объекта не удалось, то будет выдано исключение.
		ДокументОбъект.Заблокировать();
		
		ДокументОбъект.ДокументОснование = ДокументПоступления;
		
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ОбщегоНазначенияЕГАИСВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

// Заполняет реквизиты "Контрагент" и "Торговый объект" элемента справочника "Организации ЕГАИС"
// 
// Параметры:
//   ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - сопоставляемый элемент классификатора
//   Контрагент       - ОпределяемыйТип.ОрганизацияКонтрагентГосИС     - сопоставляемый контрагент
//   ТорговыйОбъект   - ОпределяемыйТип.ТорговыйОбъектЕГАИС            - сопоставляемый торговый объект
Процедура ЗаписатьСвязьКонтрагентаПартнераИОрганизацииЕГАИС(ОрганизацияЕГАИС, Контрагент, ТорговыйОбъект) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		СправочникОбъект = ОрганизацияЕГАИС.ПолучитьОбъект();
		
		// Если выполнить блокировку объекта не удалось, то будет выдано исключение.
		СправочникОбъект.Заблокировать();
		
		СправочникОбъект.Контрагент     = Контрагент;
		СправочникОбъект.ТорговыйОбъект = ТорговыйОбъект;
		
		СправочникОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ОбщегоНазначенияЕГАИСВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

// Проверка константы "Разрешать продажу алкогольной продукции без сопоставления ЕГАИС"
// 
// Возвращаемое значение:
//  Булево - возвращает значение константы
//
Функция РазрешатьПродажуАлкогольнойПродукцииБезСопоставленияЕГАИС() Экспорт
	
	Разрешать = Ложь;
	ИнтеграцияЕГАИСПереопределяемый.РазрешатьПродажуАлкогольнойПродукцииБезСопоставленияЕГАИС(Разрешать);
	Возврат Разрешать;
	
КонецФункции

// Проверяет минимальные цены алкогольной продукции
// 
// Параметры:
//  * МассивДокументов - Массив - документы для проверки
//  * ДальнейшееДействие - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС
// 
// Возвращаемое значение: см. ИнтеграцияЕГАИС.РезультатыПроверкиМинимальныхЦенВСпискеДокументов
// 
Функция ПроверитьМинимальныеЦеныВДокументах(МассивДокументов, ДальнейшееДействие) Экспорт
	
	Возврат ИнтеграцияЕГАИС.РезультатыПроверкиМинимальныхЦенВСпискеДокументов(МассивДокументов, ДальнейшееДействие);
	
КонецФункции

#КонецОбласти
