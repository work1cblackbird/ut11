///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "ИнтернетПоддержкаПользователей.ОФД".
// ОбщийМодуль.СервисИнтеграцииСОФД.
//
// Серверные процедуры работы с сервисом ОФД:
//  - операции отключения и подключения кассы;
//  - получение и анализ данных от сервиса ОФД.
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

#Область РаботаССервисом

// См. ОФД.ОборотыКассовойСмены.
//
Функция ОборотыКассовойСмены(Касса, НомерСмены) Экспорт
	
	// Подготовка параметров настройки подключения.
	НастройкиКассы = ПараметрыНастройкиПодключенияКассы(Касса);
	
	// Получение параметров аутентификации в ОФД.
	НастройкиАутентификации = ПолучитьНастройкиАутентификации(НастройкиКассы.НастройкаПодключения);
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("НомерСмены", НомерСмены);
	
	Возврат ОперацияПолучениеОборотовПоСмене(
		НастройкиКассы,
		НастройкиАутентификации,
		ПараметрыЗапроса);
	
КонецФункции

// См. ОФД.ЧекиКассовойСмены.
//
Функция ЧекиКассовойСмены(Касса, НомерСмены) Экспорт
	
	// Подготовка параметров настройки подключения.
	НастройкиКассы = ПараметрыНастройкиПодключенияКассы(Касса);
	
	// Получение параметров аутентификации в ОФД.
	НастройкиАутентификации = ПолучитьНастройкиАутентификации(НастройкиКассы.НастройкаПодключения);
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("НомерСмены", НомерСмены);
	
	Возврат ОперацияПолучениеСпискаЧековЗаСмену(
		НастройкиКассы,
		НастройкиАутентификации,
		ПараметрыЗапроса);
	
КонецФункции

// См. ОФД.ПродажиЗаПериод.
//
Функция ПродажиЗаПериод(Касса, НачалоПериода, КонецПериода) Экспорт
	
	Если Не ЗначениеЗаполнено(НачалоПериода) Тогда
		ВызватьИсключение НСтр("ru = 'Для выполнения запроса к сервису необходимо указать дату начала загрузки.'");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КонецПериода) Тогда
		ВызватьИсключение НСтр("ru = 'Для выполнения запроса к сервису необходимо указать дату окончания загрузки.'");
	КонецЕсли;
	
	РезультатОперации = ОФДСлужебный.НовыйРезультатОперации();
	РезультатОперации.Вставить("ДанныеСмен", Новый Массив);
	
	// Подготовка параметров настройки подключения.
	НастройкиКассы = ПараметрыНастройкиПодключенияКассы(Касса);
	
	НастройкиАутентификации = ПолучитьНастройкиАутентификации(НастройкиКассы.НастройкаПодключения);
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("НачалоПериода", НачалоПериода);
	ПараметрыЗапроса.Вставить("КонецПериода",  КонецПериода);
	
	РезультатПолученияСпискаСмен = ОперацияПолучениеСпискаСмен(
		НастройкиКассы,
		НастройкиАутентификации,
		ПараметрыЗапроса);
		
	Если ЗначениеЗаполнено(РезультатПолученияСпискаСмен.КодОшибки) Тогда
		ЗаполнитьЗначенияСвойств(РезультатОперации, РезультатПолученияСпискаСмен);
		Возврат РезультатОперации;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РезультатПолученияСпискаСмен.СписокСмен) Тогда
		Возврат РезультатОперации;
	КонецЕсли;
	
	ДанныеСмен = Новый Массив;
	
	Для Каждого ДанныеСмены Из РезультатПолученияСпискаСмен.СписокСмен Цикл
		
		ПараметрыЗапросаДанныхСмены = Новый Структура;
		ПараметрыЗапросаДанныхСмены.Вставить("НомерСмены", ДанныеСмены.НомерСмены);
		
		РезультатПолученияДанныхЧеков = ОперацияПолучениеДанныхЧековСТоварнымНаполнениемЗаСмену(
			НастройкиКассы,
			НастройкиАутентификации,
			ПараметрыЗапросаДанныхСмены);
			
		Если ЗначениеЗаполнено(РезультатПолученияДанныхЧеков.КодОшибки) Тогда
			ЗаполнитьЗначенияСвойств(РезультатОперации, РезультатПолученияДанныхЧеков);
			Возврат РезультатОперации;
		КонецЕсли;
		
		ОписаниеСмены = Новый Структура;
		ОписаниеСмены.Вставить("НомерСмены",   ДанныеСмены.НомерСмены);
		ОписаниеСмены.Вставить("ДатаОткрытия", ДанныеСмены.ДатаОткрытия);
		ОписаниеСмены.Вставить("ДатаЗакрытия", ДанныеСмены.ДатаЗакрытия);
		ОписаниеСмены.Вставить("ДанныеЧеков",  РезультатПолученияДанныхЧеков.ДанныеЧеков);
		
		ДанныеСмен.Добавить(ОписаниеСмены);
		
	КонецЦикла;
	
	РезультатОперации.Вставить("ДанныеСмен", ДанныеСмен);
	
	Возврат РезультатОперации;
	
КонецФункции

// Возвращает данные чеков из сервиса ОФД по загруженному документу.
//
// Параметры:
//   Документ - ОпределяемыйТип.ДокументОФДБИП - документ созданный по данным сервиса ОФД;
// Возвращаемое значение:
//  Структура - результат выполнения:
//    * ДанныеЧеков - Массив из Структура - Содержит описание чеков по смене.
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//        может быть обработан вызывающим методом:
//        - <Пустая строка> - создание нового заказа выполнено успешно;
//        - "НеверныйФорматЗапроса" - передан некорректный запрос или настройка подключения;
//        - "НеверныйЛогинИлиПароль" - неверный логин или пароль или параметры
//          подключения к ОФД;
//        - "ОтсутствуетДоступКСервису" - у пользователя нет доступа к сервису;
//        - "ТребуетсяОплата" - у пользователя отсутствует оплата сервиса;
//        - "ПревышеноКоличествоПопыток" - превышено количество попыток
//          обращения к сервису с некорректным логином и паролем;
//        - "ОшибкаПодключения" - ошибка при подключении к сервису;
//        - "ОшибкаСервиса" - внутренняя ошибка сервиса;
//        - "НеизвестнаяОшибка" - при получении информации возникла
//          неизвестная (не обрабатываемая) ошибка;
//        - "СервисВременноНеДоступен" - на сервере ведутся регламентные работы;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция ДанныеЧеков(Документ) Экспорт
	
	РезультатОперации = ОФДСлужебный.НовыйРезультатОперации();
	РезультатОперации.Вставить("ДанныеЧеков", Неопределено);
	
	ДанныеЧеков = Новый Массив;
	
	// Подготовка параметров настройки подключения.
	ФискальныеДанныеПоКассам = РегистрыСведений.ДокументыОФД.ФискальныеДанныеПоДокументу(Документ);
	
	Для Каждого ФискальныеДанныеПоКассе Из ФискальныеДанныеПоКассам Цикл
		
		// Подготовка параметров настройки подключения.
		НастройкиКассы = ПараметрыНастройкиПодключенияКассы(ФискальныеДанныеПоКассе.Касса);
		НастройкиКассы.НомерФискальногоНакопителя = ФискальныеДанныеПоКассе.ЗаводскойНомерФН;
		
		// Получение параметров аутентификации в ОФД.
		НастройкиАутентификации = ПолучитьНастройкиАутентификации(НастройкиКассы.НастройкаПодключения);
		
		ПараметрыЗапроса = Новый Структура;
		ПараметрыЗапроса.Вставить("ФискальныеНомераЧеков", ФискальныеДанныеПоКассе.ФискальныеНомераЧеков);
		
		РезультатПолученияДанныхЧеков = ОперацияПолучениеДанныхЧеков(
			НастройкиКассы,
			НастройкиАутентификации,
			ПараметрыЗапроса);
			
		Если ЗначениеЗаполнено(РезультатПолученияДанныхЧеков.КодОшибки) Тогда
			ЗаполнитьЗначенияСвойств(
				РезультатОперации,
				РезультатПолученияДанныхЧеков);
			Возврат РезультатОперации;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			ДанныеЧеков,
			РезультатПолученияДанныхЧеков.ДанныеЧеков);
		
	КонецЦикла;
	
	РезультатОперации.Вставить("ДанныеЧеков", ДанныеЧеков);
	
	Возврат РезультатОперации;
	
КонецФункции

#КонецОбласти

#Область РаботаСПорталом

// Выполняет попытку подключения кассы на портале и сервисе ОФД.
//
// Параметры:
//  ПараметрыЗапроса -Структура - содержит параметры выполняемого запроса:
//    * НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКОФД - настройка подключения к ОФД
//      по которой выполняется попытка подключения;
//    * РегистрационныйНомерККТ - Строка - регистрационный номер ККТ по которой выполняется попытка отключения;
//    * Касса - Строка - Наименование кассы по которой выполняется подключение;
//    * ИдентификаторТарифа - Строка- Идентификатор тарифа на который выполняется попытка подключения кассы;
//
Функция ПодключитьКассу(ПараметрыОперации) Экспорт
	
	Возврат ОперацияПодключенияКассы(ПараметрыОперации);
	
КонецФункции

// Выполняет попытку отключения кассы на портале и сервисе ОФД.
//
// Параметры:
//  ПараметрыЗапроса -Структура - содержит параметры выполняемого запроса:
//    * НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКОФД - настройка подключения к ОФД
//      по которой выполняется попытка подключения;
//    * РегистрационныйНомерККТ - Строка - регистрационный номер ККТ по которой выполняется попытка отключения.
//
Функция ОтключитьКассу(ПараметрыОперации) Экспорт
	
	Возврат ОперацияОтключенияКассы(ПараметрыОперации);
	
КонецФункции

#КонецОбласти

#Область Аутентификация

// Возвращает логин и пароль Интернет-поддержки или тикет аутентификации.
//
// Параметры:
//  URLОперации -Строка - URL операции, для которой получаются данные аутентификации.
//
// Возвращаемое значение:
//  Структура - структура, содержащая результаты определения параметров
//    аутентификации пользователя Интернет-поддержки:
//    *ДанныеАутентификации - Структура - параметры аутентификации пользователя Интернет-поддержки;
//    *ИнформацияОбОшибке   - Строка    - информация об ошибке для пользователя.
//    *Ошибка - Строка    - признак наличия ошибки.
//
Функция ДанныеАутентификации(URLОперации)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура;
	Результат.Вставить("ДанныеАутентификации", Новый Структура);
	Результат.Вставить("ИнформацияОбОшибке",   "");
	Результат.Вставить("Ошибка",               Ложь);
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		МодульИнтернетПоддержкаПользователейВМоделиСервиса =
			ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователейВМоделиСервиса");
		РезультатПолученияТикета =
			МодульИнтернетПоддержкаПользователейВМоделиСервиса.ТикетАутентификацииНаПорталеПоддержки(
				URLОперации);
		
		Если ПустаяСтрока(РезультатПолученияТикета.КодОшибки) Тогда
			Результат.ДанныеАутентификации.Вставить("Тикет", РезультатПолученияТикета.Тикет);
		Иначе
			Результат.Ошибка = Истина;
			Результат.ИнформацияОбОшибке =
				НСтр("ru = 'Ошибка аутентификации в сервисе.
					|Подробнее см. в журнале регистрации.'");
			ПодробнаяИнформацияОбОшибке =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось вызвать операцию %1.
						|Не удалось выполнить аутентификацию.
						|%2'"),
					URLОперации,
					РезультатПолученияТикета.ИнформацияОбОшибке);
			ОФДСлужебный.ЗаписатьИнформациюВЖурналРегистрации(ПодробнаяИнформацияОбОшибке);
		КонецЕсли;
		
	Иначе
		
		Результат.ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
		
		Если Результат.ДанныеАутентификации = Неопределено Тогда
			Результат.Ошибка             = Истина;
			Результат.ИнформацияОбОшибке =
				НСтр("ru = 'Для работы с сервисом необходимо подключить Интернет-поддержку пользователей.'");
			ОФДСлужебный.ЗаписатьИнформациюВЖурналРегистрации(Результат.ИнформацияОбОшибке);
		Иначе
			Результат.ДанныеАутентификации.Вставить("Тикет", Неопределено);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Формирует строку аутентификации из данных аутентификации
//
// Параметры:
//  ДанныеАутентификации  - Структура, Неопределено - данные аутентификации ИПП.
//
// Возвращаемое значение:
//  Строка - результат преобразования.
//
Функция СтрокаАутентификации(ДанныеАутентификации)
	
	Если ДанныеАутентификации = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеАутентификации.Тикет) Тогда
		Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Bearer %1", ДанныеАутентификации.Тикет);
	Иначе
		СтрокаЛогинаПароля = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1:%2",
			ДанныеАутентификации.Логин,
			ДанныеАутентификации.Пароль);
			
		Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Basic %1", Base64ИзСтроки(СтрокаЛогинаПароля));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Формирует строку Base64 из обычной строки
//
// Параметры:
//  Значение  - Строка - преобразует строку в Base64.
//
// Возвращаемое значение:
//  Строка - результат преобразования.
//
Функция Base64ИзСтроки(Значение)
	
	Результат = Base64Строка(ПолучитьДвоичныеДанныеИзСтроки(Значение, КодировкаТекста.UTF8));
	Результат = СтрЗаменить(Результат, Символы.ПС, "");
	Результат = СтрЗаменить(Результат, Символы.ВК, "");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ВызовОперацииПодключенияКассы

// См. СервисИнтеграцииСОФД.ПодключитьКассу.
//
Функция ОперацияПодключенияКассы(ПараметрыОперации)
	
	РезультатОперации = ОФДСлужебный.НовыйРезультатОперации();
	
	ПараметрыНастройкиПодключения =
		ОФДСлужебный.ПараметрыНастройкиПодключения(ПараметрыОперации.НастройкаПодключения);
	
	URLОперации = ОФДСлужебный.URLОперацииСервиса("/cash-registers/activate", Ложь);
	
	РезультатИПП = ДанныеАутентификации(URLОперации);
	
	Если РезультатИПП.Ошибка Тогда
		РезультатОперации.КодОшибки = ОФДСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	ПараметрыПодключения = ОФДСлужебный.ИнициализироватьПараметрыПодключения();
	
	ПараметрыЗапросаJSON = activate_kkt(
		ПараметрыОперации,
		ПараметрыНастройкиПодключения.ИдентификаторУчастника,
		ИдентификаторТарифаДляСервиса(ПараметрыОперации.ИдентификаторТарифа));
	
	ПредставлениеЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Операция подключения кассы. Номер ККТ %1, тариф %2.'"),
		ПараметрыОперации.РегистрационныйНомерККТ,
		ИдентификаторТарифаДляСервиса(ПараметрыОперации.ИдентификаторТарифа));
	
	ОФДСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		ПредставлениеЗапроса,
		Ложь);
	
	Заголовки = НовыйЗаголовкиВызоваОперации();
	Заголовки.Вставить("Authorization", СтрокаАутентификации(РезультатИПП.ДанныеАутентификации));
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки = ОФДСлужебный.ПереопределитьКодОшибкиСервиса(
			РезультатОтправки.КодСостояния);
		РезультатОперации.СообщениеОбОшибке = ОФДСлужебный.ПереопределитьСообщениеПользователю(
			РезультатОперации.КодОшибки,
			РезультатОтправки.Содержимое);
			
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось выполнить подключение кассы.
				|
				|%1
				|
				|Техническая информация об ошибке:
				|При подключении кассы возникли ошибки.
				|URL: %2
				|Код ошибки: %3
				|Подробная информация:
				|%4'"),
			РезультатОперации.СообщениеОбОшибке,
			URLОперации,
			РезультатОтправки.КодОшибки,
			РезультатОтправки.ИнформацияОбОшибке);
		
		ОФДСлужебный.ЗаписатьИнформациюВЖурналРегистрации(Строка(РезультатОперации.ИнформацияОбОшибке));
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	ОФДСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1
				|Получен ответ сервиса:
				|%2'"),
			ПредставлениеЗапроса,
			РезультатОтправки.Содержимое),
		Ложь);
	
	РезультатОперации.Вставить(
		"ПодключенныйТариф",
		ПрочитатьДанные_activate(РезультатОтправки.Содержимое));
	
	Возврат РезультатОперации;
	
КонецФункции

// Формирует параметры запроса для операции
// /api/program-1c/private/providers/{providerId}/cash-registers/activate.
//
Функция activate_kkt(
		ДанныеКассы,
		ИдентификаторУчастника,
		ИдентификаторТарифа)
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("kktNumber");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеКассы.РегистрационныйНомерККТ);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("cashRegisterName");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеКассы.Касса);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("featureSet");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ИдентификаторТарифа);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("providerId");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ИдентификаторУчастника);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

// Чтение ответа операции:
// /api/program-1c/private/providers/{providerId}/cash-registers/activate.
//
Функция ПрочитатьДанные_activate(ТелоJSON)
	
	// Ответ сервиса:
	//
	//  actualTariffType - Идентификатор тарифа фактически подключенного кассе.
	//
	//  "actualTariffType": "BASIC"
		
	Попытка
	
		ЧтениеОтвета = Новый ЧтениеJSON;
		ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
		Результат = ПрочитатьJSON(ЧтениеОтвета);
		
		Возврат ИдентификаторТарифа(Результат.actualFeatureSet);
		
	Исключение
		
		ОФДСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			Истина);
		
		ВызватьИсключение НСтр("ru = 'Не удалось обработать ответ. Подробности в журнале регистрации.'");
		
	КонецПопытки;
	
КонецФункции

#КонецОбласти

#Область ВызовОперацииОтключенияКассы

// См. СервисИнтеграцииСОФД.ОтключитьКассу.
//
Функция ОперацияОтключенияКассы(ПараметрыОперации)
	
	РезультатОперации = ОФДСлужебный.НовыйРезультатОперации();
	
	ПараметрыНастройкиПодключения =
		ОФДСлужебный.ПараметрыНастройкиПодключения(ПараметрыОперации.НастройкаПодключения);
	
	URLОперации = ОФДСлужебный.URLОперацииСервиса("/cash-registers/deactivate", Ложь);
	
	РезультатИПП = ДанныеАутентификации(URLОперации);
	
	Если РезультатИПП.Ошибка Тогда
		РезультатОперации.КодОшибки = ОФДСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	ПараметрыПодключения = ОФДСлужебный.ИнициализироватьПараметрыПодключения();
	
	ПараметрыЗапросаJSON = deactivate_kkt(
		ПараметрыНастройкиПодключения.ИдентификаторУчастника,
		ПараметрыОперации.РегистрационныйНомерККТ);
		
	ПредставлениеЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Операция отключения кассы. Номер ККТ %1.'"),
		ПараметрыОперации.РегистрационныйНомерККТ);
	
	ОФДСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		ПредставлениеЗапроса,
		Ложь);
	
	Заголовки = НовыйЗаголовкиВызоваОперации();
	Заголовки.Вставить("Authorization", СтрокаАутентификации(РезультатИПП.ДанныеАутентификации));
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
		
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки = ОФДСлужебный.ПереопределитьКодОшибкиСервиса(
			РезультатОтправки.КодСостояния);
		РезультатОперации.СообщениеОбОшибке = ОФДСлужебный.ПереопределитьСообщениеПользователю(
			РезультатОперации.КодОшибки,
			РезультатОтправки.Содержимое);
			
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось выполнить подключение кассы.
				|
				|%1
				|
				|Техническая информация об ошибке:
				|При подключении кассы возникли ошибки.
				|URL: %2
				|Код ошибки: %3
				|Подробная информация:
				|%4'"),
			РезультатОперации.СообщениеОбОшибке,
			URLОперации,
			РезультатОтправки.КодОшибки,
			РезультатОтправки.ИнформацияОбОшибке);
		
		ОФДСлужебный.ЗаписатьИнформациюВЖурналРегистрации(Строка(РезультатОперации.ИнформацияОбОшибке));
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	ОФДСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1
				|Получен код состояния сервиса:
				|%2'"),
			ПредставлениеЗапроса,
			РезультатОтправки.КодСостояния),
		Ложь);
	
	Возврат РезультатОперации;
	
КонецФункции

// Формирует параметры запроса для операции
// /api/program-1c/private/providers/{providerId}/cash-registers/deactivate.
//
Функция deactivate_kkt(ИдентификаторУчастника, НомерККТ)
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("providerId");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ИдентификаторУчастника);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("kktNumber");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(НомерККТ);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

#КонецОбласти

#Область ВызовОперацииСервисаОФД

Функция ВыполнитьВызовОперацииСервисаОФД(ИдентификаторУчастника, ШаблонОшибки, ПараметрыЗапросаJSON)
	
	РезультатОперации = ОФДСлужебный.НовыйРезультатОперации();
	
	URLОперации = ОФДСлужебный.URLОперацииСервиса(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"/providers/%1/calls/execute-rest-operation-call",
			ИдентификаторУчастника),
		Ложь);
	
	РезультатИПП = ДанныеАутентификации(URLОперации);
	
	Если РезультатИПП.Ошибка Тогда
		РезультатОперации.КодОшибки = ОФДСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	Заголовки = НовыйЗаголовкиВызоваОперации();
	Заголовки.Вставить("Authorization", СтрокаАутентификации(РезультатИПП.ДанныеАутентификации));
	
	ПараметрыПодключения = ОФДСлужебный.ИнициализироватьПараметрыПодключения();
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
		
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки = ОФДСлужебный.ПереопределитьКодОшибкиСервиса(
			РезультатОтправки.КодСостояния);
		РезультатОперации.СообщениеОбОшибке = ОФДСлужебный.ПереопределитьСообщениеПользователю(
			РезультатОперации.КодОшибки,
			РезультатОтправки.Содержимое);
			
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонОшибки,
			РезультатОперации.СообщениеОбОшибке,
			URLОперации,
			РезультатОтправки.КодОшибки,
			РезультатОтправки.ИнформацияОбОшибке);
		
		ОФДСлужебный.ЗаписатьИнформациюВЖурналРегистрации(Строка(РезультатОперации.ИнформацияОбОшибке));
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	РезультатОперации.Вставить("ОтветСервиса", РезультатОтправки.Содержимое);
	
	Возврат РезультатОперации;
	
КонецФункции

Функция ПроанализироватьОтветСервисаОФД(
	ПредставлениеЗапроса,
	ОтветСервиса,
	ИменаСвойствСоЗначениямиДата = Неопределено)
	
	РезультатОперации = ОФДСлужебный.НовыйРезультатОперации();
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1
			|Получен ответ ОФД:
			|%2'"),
		ПредставлениеЗапроса,
		ОтветСервиса);
	
	ОФДСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	Попытка
		
		ЧтениеОтвета = Новый ЧтениеJSON;
		ЧтениеОтвета.УстановитьСтроку(ОтветСервиса);
		
		Если ИменаСвойствСоЗначениямиДата = Неопределено Тогда
			РезультатЧтения = ПрочитатьJSON(ЧтениеОтвета);
		Иначе
			РезультатЧтения = ПрочитатьJSON(
				ЧтениеОтвета,
				,
				ИменаСвойствСоЗначениямиДата,
				,
				"ВосстановитьДатуJSON",
				ОФДСлужебный,
				,
				ИменаСвойствСоЗначениямиДата);
		КонецЕсли;
	
		Если РезультатЧтения.responseStatus = 200 Тогда
			РезультатОперации.Вставить("ДанныеСервиса", РезультатЧтения.responseBodyJsonObject);
		Иначе
			РезультатОперации.КодОшибки = ОФДСлужебный.ПереопределитьКодОшибкиСервиса(
				РезультатЧтения.responseStatus);
			РезультатОперации.СообщениеОбОшибке = ОФДСлужебный.ПереопределитьСообщениеПользователю(
				ОФДСлужебный.ПереопределитьКодОшибкиСервиса(РезультатЧтения.responseStatus),
				РезультатЧтения.responseBodyJsonObject);
		КонецЕсли;
		
		Возврат РезультатОперации;
		
	Исключение
		
		ОФДСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			Истина);
		
		ВызватьИсключение НСтр("ru = 'Не удалось обработать ответ от ОФД. Подробности в журнале регистрации.'");
		
	КонецПопытки;
	
КонецФункции

#КонецОбласти

#Область ВызовОперацииПолучениеНастроекУчастников

////////////////////////////////////////////////////////////////////////////////
// Вызов операции GET /providers

// Получает идентификаторы участников ОФД из сервиса.
//
// Возвращаемое значение:
//  Структура - результат получения перечня ОФД с которыми возможно создание подключения:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//                  может быть обработан вызывающим методом;
//    * СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора;
//    * Настройки - Массив из Структура - загруженные настройки.
//
Функция ОперацияНастройкиУчастниковОФД() Экспорт
	
	ОФДСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Получение участников ОФД.'"),
		Ложь);
	
	РезультатОперации = ОФДСлужебный.НовыйРезультатОперации();
	РезультатОперации.Вставить("Настройки", Неопределено);
	URLОперации = ОФДСлужебный.URLОперацииСервиса(
		"/providers",
		Истина);
	
	ПараметрыПодключения = ОФДСлужебный.ИнициализироватьПараметрыПодключения();
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "GET");
	ПараметрыОтправки.Вставить("Заголовки",                НовыйЗаголовкиВызоваОперации());
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить данные об участниках ОФД.
				|
				|Техническая информация об ошибке:
				|При получении информации об участниках ОФД возникли ошибки.
				|URL: %1
				|Код ошибки: %2
				|Подробная информация:
				|%3'"),
			URLОперации,
			РезультатОтправки.КодОшибки,
			РезультатОтправки.ИнформацияОбОшибке);
		
		ОФДСлужебный.ЗаписатьИнформациюВЖурналРегистрации(Строка(ИнформацияОбОшибке));
		
		РезультатОперации.КодОшибки = ОФДСлужебный.КодОшибкиНеизвестнаяОшибка();
		РезультатОперации.СообщениеОбОшибке = НСтр("ru = 'Не удалось загрузить список участников ОФД.'");
		РезультатОперации.ИнформацияОбОшибке = ИнформацияОбОшибке;
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	РезультатОперации.Настройки = ПрочитатьДанные_ofd_members(РезультатОтправки.Содержимое);
	
	ОФДСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Завершена загрузка участников ОФД.'"),
		Ложь);
	
	Возврат РезультатОперации;
	
КонецФункции

// Чтение ответа операции:
// /members/infos
//
Функция ПрочитатьДанные_ofd_members(ТелоJSON)
	
	// Ответ сервиса:
	//  id - Идентификатор ОФД,
	//  name - Наименование ОФД,
	//  integrationEnabled - Интеграция доступна,
	//  authorizationType - Типа авторизации,
	//  personalAccountPageUrl - Персональная страница ЛК
	//
	// [
	//   {
	//     "id": "Taxcom",
	//     "name": "ТаксКом",
	//     "integrationEnabled": true,
	//     "authorizationType": "BASIC"
	//   }
	// ]
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	Результат = ПрочитатьJSON(ЧтениеОтвета);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ВызовОперацииПолученияСпискаКасс

////////////////////////////////////////////////////////////////////////////////
// Вызов операции GET /ofd/v1/members/{memberId}/kkts

// Производит вызов операции сервиса получения данных касс.
//
// Параметры:
//  ПараметрыНастройкиПодключения - Структура - см. ОФДСлужебный.ПараметрыНастройкиПодключения;
//  ПараметрыАутентификации - Структура - данные аутентификации.
//
// Возвращаемое значение:
//  Структура - результат проверки параметров авторизации:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом;
//    * СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//    * ДанныеКасс - Массив из Структура - Содержит описание доступных касс ККТ в разрезе магазинов
//      по настройке подключения. Добавляется только в случае когда ЭтоПроверкаПодключения = Ложь.
//
Функция СписокКассПоДаннымСервиса(
		ПараметрыНастройкиПодключения,
		ПараметрыАутентификации,
		ЭтоПроверкаПодключения = Ложь)
	
	РезультатОперации = ОФДСлужебный.НовыйРезультатОперации();
	
	Если Не ЭтоПроверкаПодключения Тогда
		
		РезультатОперации.Вставить("ДанныеКасс", Неопределено);
		
		ШаблонОшибки = НСтр("ru = 'Не удалось получить данные по кассам от ОФД.
			|
			|%1
			|
			|Техническая информация об ошибке:
			|При получении перечня касс от ОФД возникли ошибки.
			|URL: %2
			|Код ошибки: %3
			|Подробная информация:
			|%4'");
		
	Иначе
		
		ШаблонОшибки = НСтр("ru = 'Не удалось проверить данные аутентификации в ОФД.
			|
			|%1
			|
			|Техническая информация об ошибке:
			|При проверке данных аутентификации сервис вернул ошибку.
			|URL: %2
			|Код ошибки: %3
			|Подробная информация:
			|%4'");
		
	КонецЕсли;
	
	РезультатОФД = ОФДСлужебный.ЗаголовокАвторизацииОФД(
		ПараметрыНастройкиПодключения,
		ПараметрыАутентификации);
	
	Если РезультатОФД.Ошибка Тогда
		РезультатОперации.КодОшибки = ОФДСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатОФД.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатОФД.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	ПараметрыЗапросаJSON = get_kkts(РезультатОФД.Аутентификация);
	
	ПредставлениеЗапроса = НСтр("ru = 'Получение списка касс по данным ОФД.'");
	
	ОФДСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		ПредставлениеЗапроса,
		Ложь);
	
	РезультатЗапроса = ВыполнитьВызовОперацииСервисаОФД(
		ПараметрыНастройкиПодключения.ИдентификаторУчастника,
		ШаблонОшибки,
		ПараметрыЗапросаJSON);
		
	Если ЗначениеЗаполнено(РезультатЗапроса.КодОшибки) Тогда
			ЗаполнитьЗначенияСвойств(РезультатОперации, РезультатЗапроса);
			Возврат РезультатОперации;
	КонецЕсли;
	
	РезультатАнализа = ПроанализироватьОтветСервисаОФД(
		ПредставлениеЗапроса,
		РезультатЗапроса.ОтветСервиса);
	
	Если ЗначениеЗаполнено(РезультатАнализа.КодОшибки) Тогда
		ЗаполнитьЗначенияСвойств(РезультатОперации, РезультатАнализа);
		Возврат РезультатОперации;
	КонецЕсли;
	
	Если Не ЭтоПроверкаПодключения Тогда
		РезультатОперации.ДанныеКасс = ПрочитатьДанные_get_kkts(РезультатАнализа.ДанныеСервиса);
	КонецЕсли;
	
	Возврат РезультатОперации;
	
КонецФункции

// Производит проверку данных аутентификации в сервисе ОФД.
//
// Параметры:
//  ПараметрыНастройкиПодключения - Структура - см. ОФДСлужебный.ПараметрыНастройкиПодключения;
//  ПараметрыАутентификации - Структура - данные аутентификации.
//
// Возвращаемое значение:
//  Структура - результат проверки параметров авторизации:
//    *КодОшибки - Строка - строковый код возникшей ошибки, который
//     может быть обработан вызывающим методом;
//    *СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция ОперацияПроверитьПараметрыПодключения(
		ПараметрыНастройкиПодключения,
		ПараметрыАутентификации) Экспорт
	
	Возврат СписокКассПоДаннымСервиса(
		ПараметрыНастройкиПодключения,
		ПараметрыАутентификации,
		Истина);
	
КонецФункции

// Получает список касс ККТ в сервисе ОФД.
//
// Параметры:
//  ПараметрыНастройкиПодключения - Структура - см. ОФДСлужебный.ПараметрыНастройкиПодключения;
//  ПараметрыАутентификации - Структура - данные аутентификации.
//
// Возвращаемое значение:
//  Структура - результат проверки параметров авторизации:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом;
//    * СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//    * ДанныеКасс - Массив из Структура - Содержит описание доступных касс ККТ в разрезе магазинов
//      по настройке подключения.
//
Функция ОперацияСписокКасс(
		ПараметрыНастройкиПодключения,
		ПараметрыАутентификации) Экспорт
	
	Возврат СписокКассПоДаннымСервиса(
		ПараметрыНастройкиПодключения,
		ПараметрыАутентификации);
	
КонецФункции

// Формирует параметры запроса для операции
// /ofd/v1/members/{memberId}/kkts.
//
Функция get_kkts(ДанныеАутентификацииОФД)
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("method");
	ЗаписьДанныхСообщения.ЗаписатьЗначение("GET");
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("path");
	ЗаписьДанныхСообщения.ЗаписатьЗначение("/kkts");
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("requestHeaders");
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("Authorization");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеАутентификацииОФД);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("uriVaruables");
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("queryParams");
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

// Чтение ответа операции:
// /ofd/v1/members/{memberId}/kkts.
//
Функция ПрочитатьДанные_get_kkts(ДанныеСервиса)
	
	// Ответ сервиса:
	//
	//  storeName - Название магазина,
	//  kktName - Название кассы,
	//  kktRegNumber - Регистрационный номер ККТ,
	//  kktFnNumber - Номер фискального накопителя.
	//
	//   "storeName": "Магазин на Иванова",
	//   "kkts": [
	//     {
	//       "kktName": "Касса №1",
	//       "kktRegNumber": "1234567891234567",
	//       "kktFnNumber": "2234567891234567"
	//     }
	//   ]
	
	Попытка
		
		ПереченьМагазинов = Новый Массив;
		
		Для Каждого ДанныеМагазина Из ДанныеСервиса Цикл
			
			ПереченьКасс = Новый Массив;
			
			Для Каждого ДанныеКассы Из ДанныеМагазина.kkts Цикл
				
				ОписаниеКассы = Новый Структура;
				ОписаниеКассы.Вставить(
					"Наименование",
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						"%1 (%2)",
						ДанныеКассы.kktName,
						ДанныеКассы.kktRegNumber));
				ОписаниеКассы.Вставить("Идентификатор",              СформироватьИдентификатор(ДанныеКассы.kktName));
				ОписаниеКассы.Вставить("РегистрационныйНомер",       ДанныеКассы.kktRegNumber);
				ОписаниеКассы.Вставить("НомерФискальногоНакопителя", ДанныеКассы.kktFnNumber);
				
				
				ПереченьКасс.Добавить(ОписаниеКассы);
				
			КонецЦикла;
			
			ОписаниеМагазина = Новый Структура;
			ОписаниеМагазина.Вставить("Наименование",  ДанныеМагазина.storeName);
			ОписаниеМагазина.Вставить("Идентификатор", СформироватьИдентификатор(ДанныеМагазина.storeName));
			ОписаниеМагазина.Вставить("ПереченьКасс",  ПереченьКасс);
			
			ПереченьМагазинов.Добавить(ОписаниеМагазина);
			
		КонецЦикла;
		
	Исключение
		
		ОФДСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			Истина);
		
		ВызватьИсключение НСтр("ru = 'Не удалось обработать ответ от ОФД. Подробности в журнале регистрации.'");
		
	КонецПопытки;
	
	Возврат ПереченьМагазинов;
	
КонецФункции

#КонецОбласти

#Область ВызовОперацииПолученияОборотовПоСмене

////////////////////////////////////////////////////////////////////////////////
// Вызов операции GET /ofd/v1/members/{memberId}/kkts/fns/{kktFnNumber}/shifts/{shiftNumber}/get-shift-turnover

// Производит вызов операции сервиса получения оборотов по смене.
//
// Параметры:
//  ПараметрыНастройкиПодключения - Структура - см. ОФДСлужебный.ПараметрыНастройкиПодключения;
//  ПараметрыАутентификации - Структура - данные аутентификации.
//  ПараметрыЗапроса - Структура - Содержит параметры запроса.
//
// Возвращаемое значение:
//  Структура - результат проверки параметров авторизации:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом;
//    * СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//    * ДанныеСмены - Структура - Содержит описание основных показателей смены.
//
Функция ОперацияПолучениеОборотовПоСмене(
		ПараметрыНастройкиПодключения,
		ПараметрыАутентификации,
		ПараметрыЗапроса)
	
	РезультатОперации = ОФДСлужебный.НовыйРезультатОперации();
	РезультатОперации.Вставить("ДанныеСмены", Неопределено);
	
	ШаблонОшибки = НСтр("ru = 'Не удалось получить данные по смене от ОФД.
		|
		|%1
		|
		|Техническая информация об ошибке:
		|При получении данных смены от ОФД возникли ошибки.
		|URL: %2
		|Код ошибки: %3
		|Подробная информация:
		|%4'");
	
	РезультатОФД = ОФДСлужебный.ЗаголовокАвторизацииОФД(
		ПараметрыНастройкиПодключения,
		ПараметрыАутентификации);
	
	Если РезультатОФД.Ошибка Тогда
		РезультатОперации.КодОшибки = ОФДСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатОФД.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатОФД.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	ПараметрыЗапроса.Вставить("ДанныеАутентификацииОФД", РезультатОФД.Аутентификация);
	
	ПараметрыЗапросаJSON = get_shift_turnover(ПараметрыНастройкиПодключения, ПараметрыЗапроса);
	
	ПредставлениеЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получение оборотов по смене:
			|/kkts/fns/%1/shifts/%2/get-shift-turnover'"),
		ПараметрыНастройкиПодключения.НомерФискальногоНакопителя,
		ПараметрыЗапроса.НомерСмены);
	
	ОФДСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		ПредставлениеЗапроса,
		Ложь);
	
	РезультатЗапроса = ВыполнитьВызовОперацииСервисаОФД(
		ПараметрыНастройкиПодключения.ИдентификаторУчастника,
		ШаблонОшибки,
		ПараметрыЗапросаJSON);
		
	Если ЗначениеЗаполнено(РезультатЗапроса.КодОшибки) Тогда
			ЗаполнитьЗначенияСвойств(РезультатОперации, РезультатЗапроса);
			Возврат РезультатОперации;
		КонецЕсли; 
		
	ИменаСвойствСоЗначениямиДата = Новый Массив;
	ИменаСвойствСоЗначениямиДата.Добавить("openDate");
	ИменаСвойствСоЗначениямиДата.Добавить("closeDate");
	
	РезультатАнализа = ПроанализироватьОтветСервисаОФД(
		ПредставлениеЗапроса,
		РезультатЗапроса.ОтветСервиса,
		ИменаСвойствСоЗначениямиДата);
	
	Если ЗначениеЗаполнено(РезультатАнализа.КодОшибки) Тогда
		ЗаполнитьЗначенияСвойств(РезультатОперации, РезультатАнализа);
		Возврат РезультатОперации;
	КонецЕсли;
	
	РезультатОперации.Вставить("ДанныеСмены", ПрочитатьДанные_get_shift_turnover(РезультатАнализа.ДанныеСервиса));
	
	Возврат РезультатОперации;
	
КонецФункции

// Формирует параметры запроса для операции
// /ofd/v1/members/{memberId}/kkts/fns/{kktFnNumber}/shifts/{shiftNumber}/get-shift-turnover.
//
Функция get_shift_turnover(ПараметрыНастройкиПодключения, ПараметрыЗапроса)
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("method");
	ЗаписьДанныхСообщения.ЗаписатьЗначение("GET");
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("path");
	ЗаписьДанныхСообщения.ЗаписатьЗначение("/kkts/fns/{kktFnNumber}/shifts/{shiftNumber}/get-shift-turnover");
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("requestHeaders");
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("Authorization");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ПараметрыЗапроса.ДанныеАутентификацииОФД);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("X-Kkt-Number");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ПараметрыНастройкиПодключения.РегистрационныйНомерККТ);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("uriVariables");
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("kktFnNumber");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ПараметрыНастройкиПодключения.НомерФискальногоНакопителя);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("shiftNumber");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Строка(ПараметрыЗапроса.НомерСмены));
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("queryParams");
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

// Чтение ответа операции:
// /ofd/v1/members/{memberId}/kkts/fns/{kktFnNumber}/shifts/{shiftNumber}/get-shift-turnover.
//
Функция ПрочитатьДанные_get_shift_turnover(ДанныеСервиса)
	
	// Ответ сервиса:
	//
	//  openDate - Дата открытия смены,
	//  closeDate - Дата закрытия смены,
	//  income - Сумма прихода,
	//  refundIncome - Сумма возврата прихода,
	//  expense - Сумма расхода,
	//  refundExpense - Сумма возврата расхода,
	//  cash - Сумма наличными,
	//  electronic - Сумма электронными,
	//  prepaid - Сумма предоплатами,
	//  credit - Сумма постоплатами,
	//  receipt - Общее количество чеков
	//
	// {
	//   "openDate": "2022-12-10T09:07:18.409Z",
	//   "closeDate": "2022-12-11T07:02:18.409Z",
	//   "income": 10200.25,
	//   "refundIncome": 100,
	//   "expense": 0,
	//   "refundExpense": 0,
	//   "cash": 2000,
	//   "electronic": 8200.25,
	//   "prepaid": 0,
	//   "credit": 0,
	//   "receipt": 8
	// }

	
	Попытка
		
		ДанныеСмены = Новый Структура;
		
		ДанныеСмены.Вставить("ДатаОткрытия",         ДанныеСервиса.openDate);
		ДанныеСмены.Вставить("ДатаЗакрытия",         ДанныеСервиса.closeDate);
		ДанныеСмены.Вставить("СуммаПрихода",         ДанныеСервиса.income);
		ДанныеСмены.Вставить("СуммаВозвратаПрихода", ДанныеСервиса.refundIncome);
		ДанныеСмены.Вставить("СуммаРасхода",         ДанныеСервиса.expense);
		ДанныеСмены.Вставить("СуммаВозвратаРасхода", ДанныеСервиса.refundExpense);
		ДанныеСмены.Вставить("СуммаНаличными",       ДанныеСервиса.cash);
		ДанныеСмены.Вставить("СуммаЭлектронными",    ДанныеСервиса.electronic);
		ДанныеСмены.Вставить("СуммаПредоплатами",    ДанныеСервиса.prepaid);
		ДанныеСмены.Вставить("СуммаПостоплатами",    ДанныеСервиса.credit);
		ДанныеСмены.Вставить("КоличествоЧеков",      ДанныеСервиса.receiptCount);
		
	Исключение
		
		ОФДСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			Истина);
		
		ВызватьИсключение НСтр("ru = 'Не удалось обработать ответ от ОФД. Подробности в журнале регистрации.'");
		
	КонецПопытки;
	
	Возврат ДанныеСмены;
	
КонецФункции

#КонецОбласти

#Область ВызовОперацииПолученияСпискаЧековЗаСмену

////////////////////////////////////////////////////////////////////////////////
// Вызов операции GET /ofd/v1/members/{memberId}/kkts/fns/{kktFnNumber}/shifts/{shiftNumber}/receipts/get-receipts-short

// Производит вызов операции сервиса получения данных касс.
//
// Параметры:
//  ПараметрыНастройкиПодключения - Структура - см. ОФДСлужебный.ПараметрыНастройкиПодключения;
//  ПараметрыАутентификации - Структура - данные аутентификации.
//
// Возвращаемое значение:
//  Структура - результат проверки параметров авторизации:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом;
//    * СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//    * ДанныеЧеков - Массив из Структура - Содержит описание чеков по смене.
//
Функция ОперацияПолучениеСпискаЧековЗаСмену(
		ПараметрыНастройкиПодключения,
		ПараметрыАутентификации,
		ПараметрыЗапроса)
	
	РезультатОперации = ОФДСлужебный.НовыйРезультатОперации();
	РезультатОперации.Вставить("ДанныеЧеков", Неопределено);
	
	ПараметрыЗапроса.Вставить("ТекущаяСтраница", 1);
	ПараметрыЗапроса.Вставить("КоличествоСтраниц", 1);
	
	ДанныеЧеков = Новый Массив;
	
	Пока ПараметрыЗапроса.ТекущаяСтраница <= ПараметрыЗапроса.КоличествоСтраниц Цикл
		
		РезультатЗапроса = ПолучитьПорциюДанныхСпискаЧековЗаСмену(
			ПараметрыНастройкиПодключения,
			ПараметрыАутентификации,
			ПараметрыЗапроса);
			
		Если ЗначениеЗаполнено(РезультатЗапроса.КодОшибки) Тогда
			ЗаполнитьЗначенияСвойств(РезультатОперации, РезультатЗапроса);
			Возврат РезультатОперации;
		КонецЕсли;
		
		ПараметрыЗапроса.ТекущаяСтраница   = ПараметрыЗапроса.ТекущаяСтраница + 1;
		ПараметрыЗапроса.КоличествоСтраниц = РезультатЗапроса.ДанныеПорции.КоличествоСтраниц;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДанныеЧеков, РезультатЗапроса.ДанныеПорции.ДанныеЧеков);
		
	КонецЦикла;
	
	РезультатОперации.ДанныеЧеков = ДанныеЧеков;
	
	Возврат РезультатОперации;
	
КонецФункции

Функция ПолучитьПорциюДанныхСпискаЧековЗаСмену(
		ПараметрыНастройкиПодключения,
		ПараметрыАутентификации,
		ПараметрыЗапроса) 
	
	РезультатОперации = ОФДСлужебный.НовыйРезультатОперации();
	
	ШаблонОшибки = НСтр("ru = 'Не удалось получить данные по смене от ОФД.
		|
		|%1
		|
		|Техническая информация об ошибке:
		|При получении данных смены от ОФД возникли ошибки.
		|URL: %2
		|Код ошибки: %3
		|Подробная информация:
		|%4'");
	
	РезультатОФД = ОФДСлужебный.ЗаголовокАвторизацииОФД(
		ПараметрыНастройкиПодключения,
		ПараметрыАутентификации);
	
	Если РезультатОФД.Ошибка Тогда
		РезультатОперации.КодОшибки = ОФДСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатОФД.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатОФД.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	ПараметрыЗапроса.Вставить("ДанныеАутентификацииОФД", РезультатОФД.Аутентификация);
	
	ПараметрыЗапросаJSON = get_receipts_short(ПараметрыНастройкиПодключения, ПараметрыЗапроса);
	
	ПредставлениеЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получение списка чеков за смену:
			|/kkts/fns/%1/shifts/%2/receipts/get-receipts-short'"),
		ПараметрыНастройкиПодключения.НомерФискальногоНакопителя,
		ПараметрыЗапроса.НомерСмены);
	
	ОФДСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		ПредставлениеЗапроса,
		Ложь);

	РезультатЗапроса = ВыполнитьВызовОперацииСервисаОФД(
		ПараметрыНастройкиПодключения.ИдентификаторУчастника,
		ШаблонОшибки,
		ПараметрыЗапросаJSON);
		
	Если ЗначениеЗаполнено(РезультатЗапроса.КодОшибки) Тогда
			ЗаполнитьЗначенияСвойств(РезультатОперации, РезультатЗапроса);
			Возврат РезультатОперации;
	КонецЕсли;
		
	ИменаСвойствСоЗначениямиДата = Новый Массив;
	ИменаСвойствСоЗначениямиДата.Добавить("receiptDate");
	
	РезультатАнализа = ПроанализироватьОтветСервисаОФД(
		ПредставлениеЗапроса,
		РезультатЗапроса.ОтветСервиса,
		ИменаСвойствСоЗначениямиДата);
	
	Если ЗначениеЗаполнено(РезультатАнализа.КодОшибки) Тогда
		ЗаполнитьЗначенияСвойств(РезультатОперации, РезультатАнализа);
		Возврат РезультатОперации;
	КонецЕсли;
	
	РезультатОперации.Вставить("ДанныеПорции", ПрочитатьДанные_get_receipts_short(РезультатАнализа.ДанныеСервиса));
	
	Возврат РезультатОперации;
	
КонецФункции

// Формирует параметры запроса для операции
// /ofd/v1/members/{memberId}/kkts/fns/{kktFnNumber}/shifts/{shiftNumber}/receipts/get-receipts-short.
//
Функция get_receipts_short(ПараметрыНастройкиПодключения, ПараметрыЗапроса)
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("method");
	ЗаписьДанныхСообщения.ЗаписатьЗначение("GET");
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("path");
	ЗаписьДанныхСообщения.ЗаписатьЗначение("/kkts/fns/{kktFnNumber}/shifts/{shiftNumber}/receipts/get-receipts-short");
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("requestHeaders");
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("Authorization");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ПараметрыЗапроса.ДанныеАутентификацииОФД);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("X-Kkt-Number");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ПараметрыНастройкиПодключения.РегистрационныйНомерККТ);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("uriVariables");
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("kktFnNumber");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ПараметрыНастройкиПодключения.НомерФискальногоНакопителя);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("shiftNumber");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Строка(ПараметрыЗапроса.НомерСмены));
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("queryParams");
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("page");
	ЗаписьДанныхСообщения.ЗаписатьНачалоМассива();
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Строка(ПараметрыЗапроса.ТекущаяСтраница));
	ЗаписьДанныхСообщения.ЗаписатьКонецМассива();
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

// Чтение ответа операции:
// /ofd/v1/members/{memberId}/kkts/fns/{kktFnNumber}/shifts/{shiftNumber}/receipts/get-receipts-short.
//
Функция ПрочитатьДанные_get_receipts_short(ДанныеСервиса)
	
	// Ответ сервиса:
	//
	//  count - Общее количество страниц,
	//  cursor - Номер текущей страницы,
	//  receiptDate - Дата чека ККТ,
	//  fiscalNumber - Фискальный номер чека,
	//  numberInShift - Номер в смене,
	//  operationTypeId - Идентификатор признака расчета,
	//  cash - Сумма наличными,
	//  electronic - Сумма электронными,
	//  prepaid - Сумма предоплатами,
	//  credit - Сумма постоплатами
	//
	// {
	//   "count": 1,
	//   "cursor": 1,
	//   "receipts": [
	//     {
	//       "receiptDate": "2022-12-10T14:02:18.409Z",
	//       "numberInShift": 1,
	//       "operationTypeId": "INCOME",
	//       "cash": 2000,
	//       "electronic": 8200.25,
	//       "prepaid": 0,
	//       "credit": 0,
	//       "fnsStatus":
	//         {
	//           "codeResult":"600",
	//           "errors":[
	//             {
	//               "code":422,
	//               "tag":"1055",
	//               "message":" Значение вне разрешенного диапазона"
	//             }
	//           ]
	//         }
	//     }
	//   ]
	// }
	
	Попытка
		
		Результат = Новый Структура;
		Результат.Вставить("КоличествоСтраниц", ДанныеСервиса.count);
		Результат.Вставить("ТекущаяСтраница", ДанныеСервиса.cursor);
		
		ДанныеЧеков = Новый Массив;
		
		Для Каждого ДанныеЧекаИзСервиса Из ДанныеСервиса.receipts Цикл
			
			ДанныеЧека = Новый Структура;
		
			ДанныеЧека.Вставить("ДатаЧека",          ДанныеЧекаИзСервиса.receiptDate);
			ДанныеЧека.Вставить("ФискальныйНомерЧека", ДанныеЧекаИзСервиса.fiscalNumber);
			ДанныеЧека.Вставить("НомерЧекаЗаСмену",  ДанныеЧекаИзСервиса.numberInShift);
			ДанныеЧека.Вставить("ПризнакРасчета",    ИдентификаторПризнакаРасчета(ДанныеЧекаИзСервиса.operationTypeId));
			
			ДанныеПоРасчетам = Новый Структура;
			ДанныеПоРасчетам.Вставить("СуммаНаличными",    ДанныеЧекаИзСервиса.cash);
			ДанныеПоРасчетам.Вставить("СуммаЭлектронными", ДанныеЧекаИзСервиса.electronic);
			ДанныеПоРасчетам.Вставить("СуммаПредоплатами", ДанныеЧекаИзСервиса.prepaid);
			ДанныеПоРасчетам.Вставить("СуммаПостоплатами", ДанныеЧекаИзСервиса.credit);
			
			ОшибкиОтправкиФНС = Новый Массив;
			
			Если ДанныеЧекаИзСервиса.fnsStatus.Свойство("errors") Тогда // АПК:1416 Не обязательное свойство ответа сервиса.
				
				Для Каждого ОшибкаОтправкиИзСервиса Из ДанныеЧекаИзСервиса.fnsStatus.errors Цикл
					
					ОшибкаОтправки = Новый Структура;
					ОшибкаОтправки.Вставить("КодОшибки", Неопределено);
					ОшибкаОтправки.Вставить("Тег", Неопределено);
					ОшибкаОтправки.Вставить("ОписаниеОшибки", Неопределено);
					
					Если ОшибкаОтправкиИзСервиса.Свойство("code") Тогда // АПК:1416 Не обязательное свойство ответа сервиса.
						ОшибкаОтправки.КодОшибки = ОшибкаОтправкиИзСервиса.code;
					КонецЕсли;
					
					Если ОшибкаОтправкиИзСервиса.Свойство("tag") Тогда // АПК:1416 Не обязательное свойство ответа сервиса.
						ОшибкаОтправки.Тег = ОшибкаОтправкиИзСервиса.tag;
					КонецЕсли;
					
					Если ОшибкаОтправкиИзСервиса.Свойство("message") Тогда // АПК:1416 Не обязательное свойство ответа сервиса.
						ОшибкаОтправки.ОписаниеОшибки = СокрЛП(ОшибкаОтправкиИзСервиса.message);
					КонецЕсли;
					
					ОшибкиОтправкиФНС.Добавить(ОшибкаОтправки);
					
				КонецЦикла;
			
			КонецЕсли;
			
			СтатусОтправкиВФНС = Новый Структура;
			СтатусОтправкиВФНС.Вставить("КодРезультата", ДанныеЧекаИзСервиса.fnsStatus.codeResult);
			СтатусОтправкиВФНС.Вставить("ОшибкиОтправкиФНС", ОшибкиОтправкиФНС);
			
			ДанныеЧека.Вставить("СтатусОтправкиВФНС", СтатусОтправкиВФНС);
			
			ДанныеЧека.Вставить("ДанныеПоРасчетам", ДанныеПоРасчетам);
			
			ДанныеЧеков.Добавить(ДанныеЧека);
			
		КонецЦикла;
		
		Результат.Вставить("ДанныеЧеков", ДанныеЧеков);
		
	Исключение
		
		ОФДСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			Истина);
		
		ВызватьИсключение НСтр("ru = 'Не удалось обработать ответ от ОФД. Подробности в журнале регистрации.'");
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ВызовОперацииПолученияСпискаСмен

////////////////////////////////////////////////////////////////////////////////
// Вызов операции POST /ofd/v1/members/{memberId}/kkts/fns/{kktFnNumber}/shifts/get-shifts

// Производит вызов операции сервиса получения данных касс.
//
// Параметры:
//  ПараметрыНастройкиПодключения - Структура - см. ОФДСлужебный.ПараметрыНастройкиПодключения;
//  ПараметрыАутентификации - Структура - данные аутентификации.
//
// Возвращаемое значение:
//  Структура - результат проверки параметров авторизации:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом;
//    * СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//    * СписокСмен - Массив из Структура - Содержит описание смен полученных от ОФД.
//
Функция ОперацияПолучениеСпискаСмен(
		ПараметрыНастройкиПодключения,
		ПараметрыАутентификации,
		ПараметрыЗапроса)
	
	РезультатОперации = ОФДСлужебный.НовыйРезультатОперации();
	РезультатОперации.Вставить("СписокСмен", Неопределено);
	
	ШаблонОшибки = НСтр("ru = 'Не удалось получить список смен от ОФД.
		|
		|%1
		|
		|Техническая информация об ошибке:
		|При получении списка смен от ОФД возникли ошибки.
		|URL: %2
		|Код ошибки: %3
		|Подробная информация:
		|%4'");
	
	РезультатОФД = ОФДСлужебный.ЗаголовокАвторизацииОФД(
		ПараметрыНастройкиПодключения,
		ПараметрыАутентификации);
	
	Если РезультатОФД.Ошибка Тогда
		РезультатОперации.КодОшибки = ОФДСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатОФД.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатОФД.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	ПараметрыЗапроса.Вставить("ДанныеАутентификацииОФД", РезультатОФД.Аутентификация);
	
	ПараметрыЗапросаJSON = get_shifts(ПараметрыНастройкиПодключения, ПараметрыЗапроса);
	
	ПредставлениеЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получение списка смен:
			|/kkts/fns/%1/shifts/get-shifts'"),
		ПараметрыНастройкиПодключения.НомерФискальногоНакопителя);
	
	ОФДСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		ПредставлениеЗапроса,
		Ложь);
	
	РезультатЗапроса = ВыполнитьВызовОперацииСервисаОФД(
		ПараметрыНастройкиПодключения.ИдентификаторУчастника,
		ШаблонОшибки,
		ПараметрыЗапросаJSON);
		
	Если ЗначениеЗаполнено(РезультатЗапроса.КодОшибки) Тогда
		ЗаполнитьЗначенияСвойств(РезультатОперации, РезультатЗапроса);
		Возврат РезультатОперации;
	КонецЕсли;
		
	ИменаСвойствСоЗначениямиДата = Новый Массив;
	ИменаСвойствСоЗначениямиДата.Добавить("openDate");
	ИменаСвойствСоЗначениямиДата.Добавить("closeDate");
	
	РезультатАнализа = ПроанализироватьОтветСервисаОФД(
		ПредставлениеЗапроса,
		РезультатЗапроса.ОтветСервиса,
		ИменаСвойствСоЗначениямиДата);
	
	Если ЗначениеЗаполнено(РезультатАнализа.КодОшибки) Тогда
		ЗаполнитьЗначенияСвойств(РезультатОперации, РезультатАнализа);
		Возврат РезультатОперации;
	КонецЕсли;
	
	РезультатОперации.СписокСмен = ПрочитатьДанные_get_shifts(РезультатАнализа.ДанныеСервиса);
	
	Возврат РезультатОперации;
	
КонецФункции

// Формирует параметры запроса для операции
// /ofd/v1/members/{memberId}/kkts/fns/{kktFnNumber}/shifts/get-shifts.
//
Функция get_shifts(ПараметрыНастройкиПодключения, ПараметрыЗапроса)
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("method");
	ЗаписьДанныхСообщения.ЗаписатьЗначение("POST");
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("path");
	ЗаписьДанныхСообщения.ЗаписатьЗначение("/kkts/fns/{kktFnNumber}/shifts/get-shifts");
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("requestHeaders");
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("Authorization");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ПараметрыЗапроса.ДанныеАутентификацииОФД);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("X-Kkt-Number");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ПараметрыНастройкиПодключения.РегистрационныйНомерККТ);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("uriVariables");
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("kktFnNumber");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ПараметрыНастройкиПодключения.НомерФискальногоНакопителя);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("queryParams");
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("requestBodyJsonObject");
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("beginDate");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(
		ЗаписатьДатуJSON(
			ПараметрыЗапроса.НачалоПериода,
			ФорматДатыJSON.ISO,
			ВариантЗаписиДатыJSON.УниверсальнаяДата));

	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("endDate");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(
		ЗаписатьДатуJSON(
			ПараметрыЗапроса.КонецПериода,
			ФорматДатыJSON.ISO,
			ВариантЗаписиДатыJSON.УниверсальнаяДата));
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

// Чтение ответа операции:
// /ofd/v1/members/{memberId}/kkts/fns/{kktFnNumber}/shifts/get-shifts.
//
Функция ПрочитатьДанные_get_shifts(ДанныеСервиса)
	
	// Ответ сервиса:
	//
	//  openDate - Дата открытия смены,
	//  closeDate - Дата закрытия смены,
	//  shiftNumber - Номер смены.
	//
	// [
	//   {
	//     "openDate": "2022-12-10T14:02:18.409Z",
	//     "closeDate": "2022-12-11T14:02:18.409Z",
	//     "shiftNumber": 14
	//   }
	// ]
	
	Попытка
		
		Результат = Новый Массив;
			
		Для Каждого ДанныеСменыИзСервиса Из ДанныеСервиса Цикл
			
			ДанныеСмены = Новый Структура;
			ДанныеСмены.Вставить("ДатаОткрытия", ДанныеСменыИзСервиса.openDate);
			ДанныеСмены.Вставить("ДатаЗакрытия", ДанныеСменыИзСервиса.closeDate);
			ДанныеСмены.Вставить("НомерСмены",   ДанныеСменыИзСервиса.shiftNumber);
			
			Результат.Добавить(ДанныеСмены);
			
		КонецЦикла;
		
	Исключение
		
		ОФДСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			Истина);
		
		ВызватьИсключение НСтр("ru = 'Не удалось обработать ответ от ОФД. Подробности в журнале регистрации.'");
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ВызовОперацииПолученияСпискаЧековЗаСменуСТоварнымНаполнением

////////////////////////////////////////////////////////////////////////////////
// Вызов операции GET /ofd/v1/members/{memberId}/kkts/fns/{kktFnNumber}/shifts/{shiftNumber}/receipts/get-receipts-full

// Производит вызов операции сервиса получения данных касс.
//
// Параметры:
//  ПараметрыНастройкиПодключения - Структура - см. ОФДСлужебный.ПараметрыНастройкиПодключения;
//  ПараметрыАутентификации - Структура - данные аутентификации.
//
// Возвращаемое значение:
//  Структура - результат проверки параметров авторизации:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом;
//    * СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//    * ДанныеЧеков - Массив из Структура - Содержит описание чеков по смене.
//
Функция ОперацияПолучениеДанныхЧековСТоварнымНаполнениемЗаСмену(
		ПараметрыНастройкиПодключения,
		ПараметрыАутентификации,
		ПараметрыЗапроса)
	
	РезультатОперации = ОФДСлужебный.НовыйРезультатОперации();
	РезультатОперации.Вставить("ДанныеЧеков", Неопределено);
	
	ПараметрыЗапроса.Вставить("ТекущаяСтраница", 1);
	ПараметрыЗапроса.Вставить("КоличествоСтраниц", 1);
	
	ДанныеЧеков = Новый Массив;
	
	Пока ПараметрыЗапроса.ТекущаяСтраница <= ПараметрыЗапроса.КоличествоСтраниц Цикл
		
		РезультатЗапроса = ПолучитьПорциюДанныхСпискаЧековСТоварнымНаполнениемЗаСмену(
			ПараметрыНастройкиПодключения,
			ПараметрыАутентификации,
			ПараметрыЗапроса);
			
		Если ЗначениеЗаполнено(РезультатЗапроса.КодОшибки) Тогда
			ЗаполнитьЗначенияСвойств(РезультатОперации, РезультатЗапроса);
			Возврат РезультатОперации;
		КонецЕсли;
		
		ПараметрыЗапроса.ТекущаяСтраница   = ПараметрыЗапроса.ТекущаяСтраница + 1;
		ПараметрыЗапроса.КоличествоСтраниц = РезультатЗапроса.ДанныеПорции.КоличествоСтраниц;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			ДанныеЧеков,
			РезультатЗапроса.ДанныеПорции.ДанныеЧеков);
		
	КонецЦикла;
	
	РезультатОперации.ДанныеЧеков = ДанныеЧеков;
	
	Возврат РезультатОперации;
	
КонецФункции

Функция ПолучитьПорциюДанныхСпискаЧековСТоварнымНаполнениемЗаСмену(
		ПараметрыНастройкиПодключения,
		ПараметрыАутентификации,
		ПараметрыЗапроса)
	
	РезультатОперации = ОФДСлужебный.НовыйРезультатОперации();
	
	ШаблонОшибки = НСтр("ru = 'Не удалось получить данные по смене от ОФД.
		|
		|%1
		|
		|Техническая информация об ошибке:
		|При получении данных смены от ОФД возникли ошибки.
		|URL: %2
		|Код ошибки: %3
		|Подробная информация:
		|%4'");
	
	РезультатОФД = ОФДСлужебный.ЗаголовокАвторизацииОФД(
		ПараметрыНастройкиПодключения,
		ПараметрыАутентификации);
	
	Если РезультатОФД.Ошибка Тогда
		РезультатОперации.КодОшибки = ОФДСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатОФД.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатОФД.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	ПараметрыЗапроса.Вставить("ДанныеАутентификацииОФД", РезультатОФД.Аутентификация);
	
	ПараметрыЗапросаJSON = get_receipts_full(ПараметрыНастройкиПодключения, ПараметрыЗапроса);
	
	ПредставлениеЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получение данных чеков с товарным наполнением за смену:
			|/kkts/fns/%1/shifts/%2/receipts/get-receipts-full'"),
		ПараметрыНастройкиПодключения.НомерФискальногоНакопителя,
		ПараметрыЗапроса.НомерСмены);
	
	ОФДСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		ПредставлениеЗапроса,
		Ложь);
	
	РезультатЗапроса = ВыполнитьВызовОперацииСервисаОФД(
		ПараметрыНастройкиПодключения.ИдентификаторУчастника,
		ШаблонОшибки,
		ПараметрыЗапросаJSON);
		
	Если ЗначениеЗаполнено(РезультатЗапроса.КодОшибки) Тогда
			ЗаполнитьЗначенияСвойств(РезультатОперации, РезультатЗапроса);
			Возврат РезультатОперации;
	КонецЕсли;
	
	ИменаСвойствСоЗначениямиДата = Новый Массив;
	ИменаСвойствСоЗначениямиДата.Добавить("receiptDate");
	ИменаСвойствСоЗначениямиДата.Добавить("date");
	
	РезультатАнализа = ПроанализироватьОтветСервисаОФД(
		ПредставлениеЗапроса,
		РезультатЗапроса.ОтветСервиса,
		ИменаСвойствСоЗначениямиДата);
	
	Если ЗначениеЗаполнено(РезультатАнализа.КодОшибки) Тогда
		ЗаполнитьЗначенияСвойств(РезультатОперации, РезультатАнализа);
		Возврат РезультатОперации;
	КонецЕсли;
	
	РезультатОперации.Вставить("ДанныеПорции", ПрочитатьДанные_get_receipts_full(РезультатАнализа.ДанныеСервиса));
	
	Возврат РезультатОперации;
	
КонецФункции

// Формирует параметры запроса для операции
// /ofd/v1/members/{memberId}/kkts/fns/{kktFnNumber}/shifts/{shiftNumber}/receipts/get-receipts-full.
//
Функция get_receipts_full(ПараметрыНастройкиПодключения, ПараметрыЗапроса)
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("method");
	ЗаписьДанныхСообщения.ЗаписатьЗначение("GET");
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("path");
	ЗаписьДанныхСообщения.ЗаписатьЗначение("/kkts/fns/{kktFnNumber}/shifts/{shiftNumber}/receipts/get-receipts-full");
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("requestHeaders");
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("Authorization");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ПараметрыЗапроса.ДанныеАутентификацииОФД);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("X-Kkt-Number");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ПараметрыНастройкиПодключения.РегистрационныйНомерККТ);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("uriVariables");
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("kktFnNumber");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ПараметрыНастройкиПодключения.НомерФискальногоНакопителя);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("shiftNumber");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Строка(Формат(ПараметрыЗапроса.НомерСмены, "ЧГ=")));
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("queryParams");
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("page");
	ЗаписьДанныхСообщения.ЗаписатьНачалоМассива();
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Строка(ПараметрыЗапроса.ТекущаяСтраница));
	ЗаписьДанныхСообщения.ЗаписатьКонецМассива();
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

// Чтение ответа операции:
// /ofd/v1/members/{memberId}/kkts/fns/{kktFnNumber}/shifts/{shiftNumber}/receipts/get-receipts-full.
//
Функция ПрочитатьДанные_get_receipts_full(ДанныеСервиса)
	
	// Ответ сервиса:
	//
	//  count - Общее количество страниц,
	//  cursor - Номер текущей страницы,
	//  receiptDate - Дата чека ККТ,
	//  numberInShift - Номер в смене,
	//  fiscalNumber - Фискальный номер чека,
	//  isCorrection - Признак того, что чек является корректирующим,
	//  taxationTypeId - Система налогообложения,
	//  operationTypeId - Идентификатор признака расчета,
	//  cash - Сумма наличными,
	//  electronic - Сумма электронными,
	//  prepaid - Сумма предоплатами,
	//  credit - Сумма постоплатами,
	// {
	//   "count": 1,
	//   "cursor": 1,
	//   "receipts": [
	//     {
	//       "receiptDate": "2022-12-10T14:02:18.409Z",
	//       "numberInShift": 1,
	//       "fiscalNumber": 11245,
	//       "isCorrection": false,
	//       "taxationTypeId": "USN_INCOME",
	//       "operationTypeId": "INCOME",
	//       "cash": 2000,
	//       "electronic": 8200.25,
	//       "prepaid": 0,
	//       "credit": 0
	//       "items": [
	//         "name": Печенье овсяное,
	//         "price": 130,
	//         "quantity": 2,
	//         "summ": 260,
	//         "nds": 20,
	//         "productType": 1,
	//         "productCode":
	//           {
	//             "type":null,
	//             "data":null
	//           },
	//         "measureData":
	//           {
	//             "measureId":null,
	//             "measureValue":"штук"
	//           },
	//         "paymentType": "FULL_PAYMENT",
	//         "measure": 0
	//       ]
	//     }
	//   ]
	// }
	
	Попытка
		
		// АПК:1415-выкл
		// Исключение- данные из внешних источников данных.
		
		Результат = Новый Структура;
		Результат.Вставить("КоличествоСтраниц", ДанныеСервиса.count);
		Результат.Вставить("ТекущаяСтраница", ДанныеСервиса.cursor);
		
		ДанныеЧеков = Новый Массив; 
		
		Для Каждого ДанныеЧекаИзСервиса Из ДанныеСервиса.receipts Цикл
			
			ДанныеЧека = Новый Структура;
		
			ДанныеЧека.Вставить("ДатаЧека", ДанныеЧекаИзСервиса.receiptDate);
			ДанныеЧека.Вставить("НомерЧекаЗаСмену", ДанныеЧекаИзСервиса.numberInShift);
			ДанныеЧека.Вставить("ФискальныйНомерЧека", ДанныеЧекаИзСервиса.fiscalNumber);
			ДанныеЧека.Вставить("ЯвляетсяЧекомКоррекции", ДанныеЧекаИзСервиса.isCorrection);
			
			Если ДанныеЧека.ЯвляетсяЧекомКоррекции Тогда
				
				ДанныеКоррекции = Новый Структура;
				ДанныеКоррекции.Вставить(
					"ТипКоррекции",
					ИдентификаторТипаКоррекции(ДанныеЧекаИзСервиса.correction.type));
				ДанныеКоррекции.Вставить("ДатаКорректируемогоРасчета", ДанныеЧекаИзСервиса.correction.date);
				ДанныеКоррекции.Вставить("ФискальныйНомер",            ДанныеЧекаИзСервиса.correction.fiscalNumber);
				
				Если ДанныеКоррекции.ТипКоррекции = ИдентификаторПоПредписанию() Тогда
					
					ДанныеКоррекции.Вставить(
						"НомерПредписания",
						ДанныеЧекаИзСервиса.correction.prescriptionNumber);
					
				КонецЕсли;
				
				ДанныеЧека.Вставить("ДанныеКоррекции", ДанныеКоррекции);
				
			Иначе
				
				ДанныеЧека.Вставить("ДанныеКоррекции", Неопределено);
				
			КонецЕсли;
			
			ДанныеЧека.Вставить(
				"СистемаНалогообложения",
				ИдентификаторСистемыНалогообложения(ДанныеЧекаИзСервиса.taxationTypeId));
			ДанныеЧека.Вставить("ПризнакРасчета", ИдентификаторПризнакаРасчета(ДанныеЧекаИзСервиса.operationTypeId));
			
			ДанныеПоРасчетам = Новый Структура;
			ДанныеПоРасчетам.Вставить("СуммаНаличными", ДанныеЧекаИзСервиса.cash);
			ДанныеПоРасчетам.Вставить("СуммаЭлектронными", ДанныеЧекаИзСервиса.electronic);
			ДанныеПоРасчетам.Вставить("СуммаПредоплатами", ДанныеЧекаИзСервиса.prepaid);
			ДанныеПоРасчетам.Вставить("СуммаПостоплатами", ДанныеЧекаИзСервиса.credit); 
			
			ДанныеЧека.Вставить("ДанныеПоРасчетам", ДанныеПоРасчетам);
			
			Если ДанныеЧекаИзСервиса.items <> Неопределено Тогда
				ДанныеПоТоварам = ПрочитатьДанные_items(ДанныеЧекаИзСервиса.items);
			Иначе
				ДанныеПоТоварам = Новый Массив;
			КонецЕсли;
			
			ДанныеЧека.Вставить("Товары", ДанныеПоТоварам);
			
			ДанныеЧеков.Добавить(ДанныеЧека);
			
		КонецЦикла;
		
		Результат.Вставить("ДанныеЧеков", ДанныеЧеков);
		
		// АПК:1415-вкл
		
	Исключение
		
		ОФДСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			Истина);
		
		ВызватьИсключение НСтр("ru = 'Не удалось обработать ответ от ОФД. Подробности в журнале регистрации.'");
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ПрочитатьДанные_items(Знач ДанныеТоваровИзСервиса)
	
	ДанныеПоТоварам = Новый Массив;
	
	Для Каждого ДанныеПоТоваруИзСервиса Из ДанныеТоваровИзСервиса Цикл
		
		ДанныеТовара = Новый Структура;
		ДанныеТовара.Вставить("Наименование", ДанныеПоТоваруИзСервиса.name);
		ДанныеТовара.Вставить("Стоимость", ДанныеПоТоваруИзСервиса.price);
		ДанныеТовара.Вставить("Количество", ДанныеПоТоваруИзСервиса.quantity);
		ДанныеТовара.Вставить("Сумма", ДанныеПоТоваруИзСервиса.summ);
		ДанныеТовара.Вставить("СтавкаНДС", ДанныеПоТоваруИзСервиса.nds);
		ДанныеТовара.Вставить("ПризнакПредметаРасчета", ДанныеПоТоваруИзСервиса.productType);
		
		КодПредметаРасчета = Новый Структура;
		КодПредметаРасчета.Вставить("ТипКода",      Неопределено);
		КодПредметаРасчета.Вставить("ЗначениеКода", "");
		
		Если ДанныеПоТоваруИзСервиса.Свойство("productCode") // АПК:1416 Не обязательное свойство ответа сервиса.
			И ЗначениеЗаполнено(ДанныеПоТоваруИзСервиса.productCode) Тогда
			
			КодПредметаРасчета.Вставить("ТипКода",      ДанныеПоТоваруИзСервиса.productCode.type);
			КодПредметаРасчета.Вставить("ЗначениеКода", ДанныеПоТоваруИзСервиса.productCode.data);
			
		КонецЕсли;
		
		ДанныеТовара.Вставить("КодПредметаРасчета", КодПредметаРасчета);
		
		МераКоличестваПредметаРасчета = Новый Структура;
		МераКоличестваПредметаРасчета.Вставить("Идентификатор", Неопределено);
		МераКоличестваПредметаРасчета.Вставить("Значение", Неопределено);
		
		Если ДанныеПоТоваруИзСервиса.Свойство("measureData") // АПК:1416 Не обязательное свойство ответа сервиса.
			И ЗначениеЗаполнено(ДанныеПоТоваруИзСервиса.measureData) Тогда
			
			Если ДанныеПоТоваруИзСервиса.measureData.Свойство("measureId") Тогда // АПК:1416 Не обязательное свойство ответа сервиса.
				МераКоличестваПредметаРасчета.Вставить("Идентификатор", ДанныеПоТоваруИзСервиса.measureData.measureId);
			КонецЕсли;
			
			Если ДанныеПоТоваруИзСервиса.measureData.Свойство("measureValue") Тогда // АПК:1416 Не обязательное свойство ответа сервиса.
				МераКоличестваПредметаРасчета.Вставить("Значение", ДанныеПоТоваруИзСервиса.measureData.measureValue);
			КонецЕсли;
			
		КонецЕсли;
		
		ДанныеТовара.Вставить("МераКоличестваПредметаРасчета", МераКоличестваПредметаРасчета);
		
		ДанныеТовара.Вставить(
		"ПризнакСпособаРасчета",
		ИдентификаторПризнакаСпособаРасчета(ДанныеПоТоваруИзСервиса.paymentType));
		
		Если ДанныеПоТоваруИзСервиса.Свойство("agentData") // АПК:1416 Не обязательное свойство ответа сервиса.
			И ЗначениеЗаполнено(ДанныеПоТоваруИзСервиса.agentData) Тогда
			
			ДанныеАгента = Новый Структура;
			ДанныеАгента.Вставить("Наименование", ДанныеПоТоваруИзСервиса.agentData.operatorName);
			ДанныеАгента.Вставить("ИНН", ДанныеПоТоваруИзСервиса.agentData.operatorInn);
			
			ДанныеТовара.Вставить("ДанныеАгента", ДанныеАгента);
			
		Иначе
			
			ДанныеТовара.Вставить("ДанныеАгента", Неопределено);
			
		КонецЕсли;
		
		Если ДанныеПоТоваруИзСервиса.Свойство("supplierData") // АПК:1416 Не обязательное свойство ответа сервиса.
			И ЗначениеЗаполнено(ДанныеПоТоваруИзСервиса.supplierData) Тогда
			
			ДанныеПоставщика = Новый Структура;
			ДанныеПоставщика.Вставить("Наименование", ДанныеПоТоваруИзСервиса.supplierData.supplierName);
			ДанныеПоставщика.Вставить("ИНН", ДанныеПоТоваруИзСервиса.supplierData.supplierInn);
			
			ДанныеТовара.Вставить("ДанныеПоставщика", ДанныеПоставщика);
			
		Иначе
			
			ДанныеТовара.Вставить("ДанныеПоставщика", Неопределено);
			
		КонецЕсли;
		
		ДанныеПоТоварам.Добавить(ДанныеТовара);
		
	КонецЦикла;
	
	Возврат ДанныеПоТоварам;
	
КонецФункции

#КонецОбласти

#Область ВызовОперацииПолученияДанныхЧеков

////////////////////////////////////////////////////////////////////////////////
// Вызов операции GET /ofd/v1/members/{memberId}/kkts/fns/{kktFnNumber}/shifts/{shiftNumber}/receipts/get-receipts-full

// Производит вызов операции сервиса получения данных касс.
//
// Параметры:
//  ПараметрыНастройкиПодключения - Структура - см. ОФДСлужебный.ПараметрыНастройкиПодключения;
//  ПараметрыАутентификации - Структура - данные аутентификации.
//
// Возвращаемое значение:
//  Структура - результат проверки параметров авторизации:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом;
//    * СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//    * ДанныеЧеков - Массив из Структура - Содержит описание чеков по смене.
//
Функция ОперацияПолучениеДанныхЧеков(
		ПараметрыНастройкиПодключения,
		ПараметрыАутентификации,
		ПараметрыЗапроса)
	
	РезультатОперации = ОФДСлужебный.НовыйРезультатОперации();
	РезультатОперации.Вставить("ДанныеЧеков", Неопределено);
	
	ПараметрыЗапроса.Вставить("ТекущаяСтраница", 1);
	ПараметрыЗапроса.Вставить("КоличествоСтраниц", 1);
	
	ДанныеЧеков = Новый Массив;
	
	Пока ПараметрыЗапроса.ТекущаяСтраница <= ПараметрыЗапроса.КоличествоСтраниц Цикл
		
		РезультатЗапроса = ПолучитьПорциюДанныхЧеков(
			ПараметрыНастройкиПодключения,
			ПараметрыАутентификации,
			ПараметрыЗапроса);
			
		Если ЗначениеЗаполнено(РезультатЗапроса.КодОшибки) Тогда
			ЗаполнитьЗначенияСвойств(РезультатОперации, РезультатЗапроса);
			Возврат РезультатОперации;
		КонецЕсли;
		
		ПараметрыЗапроса.ТекущаяСтраница   = ПараметрыЗапроса.ТекущаяСтраница + 1;
		ПараметрыЗапроса.КоличествоСтраниц = РезультатЗапроса.ДанныеПорции.КоличествоСтраниц;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДанныеЧеков, РезультатЗапроса.ДанныеПорции.ДанныеЧеков);
		
	КонецЦикла;
	
	РезультатОперации.ДанныеЧеков = ДанныеЧеков;
	
	Возврат РезультатОперации;
	
КонецФункции

Функция ПолучитьПорциюДанныхЧеков(
		ПараметрыНастройкиПодключения,
		ПараметрыАутентификации,
		ПараметрыЗапроса)
	
	РезультатОперации = ОФДСлужебный.НовыйРезультатОперации();
	
	ШаблонОшибки = НСтр("ru = 'Не удалось получить данные по чекам от ОФД.
		|
		|%1
		|
		|Техническая информация об ошибке:
		|При получении данных чеков от ОФД возникли ошибки.
		|URL: %2
		|Код ошибки: %3
		|Подробная информация:
		|%4'");
	
	РезультатОФД = ОФДСлужебный.ЗаголовокАвторизацииОФД(
		ПараметрыНастройкиПодключения,
		ПараметрыАутентификации);
	
	Если РезультатОФД.Ошибка Тогда
		РезультатОперации.КодОшибки = ОФДСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатОФД.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатОФД.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	ПараметрыЗапроса.Вставить("ДанныеАутентификацииОФД", РезультатОФД.Аутентификация);
	
	ПараметрыЗапросаJSON = get_receipts_by_numbers(ПараметрыНастройкиПодключения, ПараметрыЗапроса);
	
	ПредставлениеЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получение данных чеков:
			|/kkts/fns/%1/get-receipts-by-numbers'"),
		ПараметрыНастройкиПодключения.НомерФискальногоНакопителя);
	
	ОФДСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		ПредставлениеЗапроса,
		Ложь);
	
	РезультатЗапроса = ВыполнитьВызовОперацииСервисаОФД(
		ПараметрыНастройкиПодключения.ИдентификаторУчастника,
		ШаблонОшибки,
		ПараметрыЗапросаJSON);
		
	Если ЗначениеЗаполнено(РезультатЗапроса.КодОшибки) Тогда
			ЗаполнитьЗначенияСвойств(РезультатОперации, РезультатЗапроса);
			Возврат РезультатОперации;
	КонецЕсли;
	
	ИменаСвойствСоЗначениямиДата = Новый Массив;
	ИменаСвойствСоЗначениямиДата.Добавить("receiptDate");
	ИменаСвойствСоЗначениямиДата.Добавить("date");
	
	РезультатАнализа = ПроанализироватьОтветСервисаОФД(
		ПредставлениеЗапроса,
		РезультатЗапроса.ОтветСервиса,
		ИменаСвойствСоЗначениямиДата);
	
	Если ЗначениеЗаполнено(РезультатАнализа.КодОшибки) Тогда
		ЗаполнитьЗначенияСвойств(РезультатОперации, РезультатАнализа);
		Возврат РезультатОперации;
	КонецЕсли;
	
	РезультатОперации.Вставить("ДанныеПорции", ПрочитатьДанные_get_receipts_by_numbers(РезультатАнализа.ДанныеСервиса));
	
	Возврат РезультатОперации;
	
КонецФункции

// Формирует параметры запроса для операции
// /ofd/v1/members/{memberId}/kkts/fns/{kktFnNumber}/shifts/{shiftNumber}/receipts/get-receipts-full.
//
Функция get_receipts_by_numbers(ПараметрыНастройкиПодключения, ПараметрыЗапроса)
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("method");
	ЗаписьДанныхСообщения.ЗаписатьЗначение("POST");
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("path");
	ЗаписьДанныхСообщения.ЗаписатьЗначение("/kkts/fns/{kktFnNumber}/get-receipts-by-numbers");
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("requestHeaders");
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("Authorization");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ПараметрыЗапроса.ДанныеАутентификацииОФД);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("X-Kkt-Number");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ПараметрыНастройкиПодключения.РегистрационныйНомерККТ);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("uriVariables");
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("kktFnNumber");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ПараметрыНастройкиПодключения.НомерФискальногоНакопителя);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("queryParams");
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("page");
	ЗаписьДанныхСообщения.ЗаписатьНачалоМассива();
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Строка(ПараметрыЗапроса.ТекущаяСтраница));
	ЗаписьДанныхСообщения.ЗаписатьКонецМассива();
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("requestBodyJsonObject");
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("fiscalNumbers");
	ЗаписьДанныхСообщения.ЗаписатьНачалоМассива();
	Для Каждого ФискальныйНомераЧека Из ПараметрыЗапроса.ФискальныеНомераЧеков Цикл
		ЗаписьДанныхСообщения.ЗаписатьЗначение(ФискальныйНомераЧека);
	КонецЦикла;
	ЗаписьДанныхСообщения.ЗаписатьКонецМассива();
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

// Чтение ответа операции:
// /ofd/v1/members/{memberId}/kkts/fns/{kktFnNumber}/shifts/{shiftNumber}/receipts/get-receipts-full.
//
Функция ПрочитатьДанные_get_receipts_by_numbers(ДанныеСервиса)
	
	// Ответ сервиса:
	//
	//  count - Общее количество страниц,
	//  cursor - Номер текущей страницы,
	//  fiscalNumber - Фискальный номер документа,
	//  cash - Сумма наличными,
	//  electronic - Сумма электронными,
	//  prepaid - Сумма предоплатами,
	//  credit - Сумма постоплатами,
	//  receiptUrl - URL для просмотра чека,
	//  receiptPdfUrl - URL для скачивания чека в формате PDF.
	
	//
	// {
	//   "count": 1,
	//   "cursor": 1,
	//   "receipts": [
	//     {
	//       "fiscalNumber": 44855,
	//       "cash": 260,
	//       "electronic": 0,
	//       "prepaid": 0,
	//       "credit": 0,
	//       "receiptUrl": "https:// baseofd.ru/k?QoS-p7-b7xlqCHu_osg",
	//       "receiptPdfUrl": "https://baseofd.ru/k?QoS-p7-b7xlqCHu",
	//     }
	//   ]
	// }
	
	Попытка
		
		Результат = Новый Структура;
		Результат.Вставить("КоличествоСтраниц", ДанныеСервиса.count);
		Результат.Вставить("ТекущаяСтраница", ДанныеСервиса.cursor);
		
		ДанныеЧеков = Новый Массив;
		
		Для Каждого ДанныеЧекаИзСервиса Из ДанныеСервиса.receipts Цикл
			
			ДанныеЧека = Новый Структура;
		
			ДанныеЧека.Вставить("ФискальныйНомерЧека", ДанныеЧекаИзСервиса.fiscalNumber);
			ДанныеЧека.Вставить("НомерЧекаВСмене",     ДанныеЧекаИзСервиса.numberInShift);
			ДанныеЧека.Вставить("ДатаЧека",            ДанныеЧекаИзСервиса.receiptDate);
			ДанныеЧека.Вставить("ПризнакРасчета",      ИдентификаторПризнакаРасчета(ДанныеЧекаИзСервиса.operationTypeId));
			ДанныеЧека.Вставить("СуммаНаличными",      ДанныеЧекаИзСервиса.cash);
			ДанныеЧека.Вставить("СуммаЭлектронными",   ДанныеЧекаИзСервиса.electronic);
			ДанныеЧека.Вставить("СуммаПредоплатами",   ДанныеЧекаИзСервиса.prepaid);
			ДанныеЧека.Вставить("СуммаПостоплатами",   ДанныеЧекаИзСервиса.credit);
			ДанныеЧека.Вставить("UrlПросмотраЧека",    ДанныеЧекаИзСервиса.receiptUrl);
			ДанныеЧека.Вставить("UrlPdfЧека",          ДанныеЧекаИзСервиса.receiptPdfUrl);
			
			ДанныеЧеков.Добавить(ДанныеЧека);
			
		КонецЦикла;
		
		Результат.Вставить("ДанныеЧеков", ДанныеЧеков);
		
	Исключение
		
		ОФДСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			Истина);
		
		ВызватьИсключение НСтр("ru = 'Не удалось обработать ответ от ОФД. Подробности в журнале регистрации.'");
		
	КонецПопытки;

	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Прочие

// Формирует стандартные заголовки для вызова операции.
//
// Возвращаемое значение:
//  Соответствие - заголовки операции.
//
Функция НовыйЗаголовкиВызоваОперации() Экспорт
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type",            "application/json");
	Заголовки.Вставить("X-Correlation-ID",        Строка(Новый УникальныйИдентификатор));
	Заголовки.Вставить("X-Program-Nick",          ИнтернетПоддержкаПользователей.ИмяПрограммы());
	Заголовки.Вставить(
		"X-Configuration-Name",
		КодироватьСтроку(
			ИнтернетПоддержкаПользователей.ИмяКонфигурации(),
			СпособКодированияСтроки.КодировкаURL));
	Заголовки.Вставить("X-Configuration-Version", ИнтернетПоддержкаПользователей.ВерсияКонфигурации());
	Заголовки.Вставить("X-IB-Id",                 СтандартныеПодсистемыСервер.ИдентификаторИнформационнойБазы());
	Заголовки.Вставить(
		"X-IB-User-Name",
		КодироватьСтроку(
			ИмяПользователя(),
			СпособКодированияСтроки.КодировкаURL));
	
	Возврат Заголовки;
	
КонецФункции

// Производит получение настроек аутентификации из безопасного хранилища.
//
// Параметры:
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКОФД - настройка подключения к ОФД.
//
// Возвращаемое значение:
//  Структура - настройки аутентификации.
//
Функция ПолучитьНастройкиАутентификации(НастройкаПодключения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(НастройкаПодключения);
	
КонецФункции

Функция ИдентификаторПризнакаРасчета(ИдентификаторПоДаннымСервиса)
	
	Если Врег(ИдентификаторПоДаннымСервиса) = "INCOME" Тогда
		Возврат "ПРИХОД";
	ИначеЕсли ВРег(ИдентификаторПоДаннымСервиса) = "INCOME_RETURN" Тогда
		Возврат "ВОЗВРАТПРИХОДА";
	ИначеЕсли ВРег(ИдентификаторПоДаннымСервиса) = "OUTCOME" Тогда
		Возврат "РАСХОД";
	ИначеЕсли ВРег(ИдентификаторПоДаннымСервиса) = "OUTCOME_RETURN" Тогда
		Возврат "ВОЗВРАТРАСХОДА";
	Иначе
		
		ОбработатьНеизвестныйИдентификатор(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Передан неизвестный статус признака расчета %1'"),
				ИдентификаторПоДаннымСервиса));
		
	КонецЕсли;
	
КонецФункции

Функция ИдентификаторТипаКоррекции(ИдентификаторПоДаннымСервиса)
	
	Если Врег(ИдентификаторПоДаннымСервиса) = "INDEPENDENTLY" Тогда
		Возврат "САМОСТОЯТЕЛЬНО";
	ИначеЕсли ВРег(ИдентификаторПоДаннымСервиса) = "BY_PRESCRIPTION" Тогда
		Возврат ИдентификаторПоПредписанию();
	Иначе
		
		ОбработатьНеизвестныйИдентификатор(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Передан неизвестный статус признак типа коррекции %1'"),
				ИдентификаторПоДаннымСервиса));
		
	КонецЕсли;
	
КонецФункции

Функция ИдентификаторПоПредписанию()
	
	Возврат "ПОПРЕДПИСАНИЮ";
	
КонецФункции 

Функция ИдентификаторСистемыНалогообложения(ИдентификаторПоДаннымСервиса)
	
	Если Врег(ИдентификаторПоДаннымСервиса) = "OSN" Тогда
		Возврат "ОСН";
	ИначеЕсли ВРег(ИдентификаторПоДаннымСервиса) = "USN_INCOME" Тогда
		Возврат "УПРОЩЕННАЯДОХОД";
	ИначеЕсли ВРег(ИдентификаторПоДаннымСервиса) = "USN_INCOME_OUTCOME" Тогда
		Возврат "УПРОЩЕННАЯДОХОДРАСХОД";
	ИначеЕсли ВРег(ИдентификаторПоДаннымСервиса) = "ENVD" Тогда
		Возврат "ЕНВД";
	ИначеЕсли ВРег(ИдентификаторПоДаннымСервиса) = "ESN" Тогда
		Возврат "ЕСН";
	ИначеЕсли ВРег(ИдентификаторПоДаннымСервиса) = "PATENT" Тогда
		Возврат "ПАТЕНТ";
	ИначеЕсли ВРег(ИдентификаторПоДаннымСервиса) = "NONE" Тогда
		Возврат "";
	Иначе
		
		ОбработатьНеизвестныйИдентификатор(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Передан неизвестный идентификатор системы налогообложения %1'"),
				ИдентификаторПоДаннымСервиса));
		
	КонецЕсли;
	
КонецФункции

Функция ИдентификаторПризнакаСпособаРасчета(ИдентификаторПоДаннымСервиса)
	
	Если ПустаяСтрока(ИдентификаторПоДаннымСервиса) Тогда
		Возврат "";
	ИначеЕсли Врег(ИдентификаторПоДаннымСервиса) = "FULL_PREPAYMENT" Тогда
		Возврат "ПРЕДОПЛАТА100%";
	ИначеЕсли ВРег(ИдентификаторПоДаннымСервиса) = "PREPAYMENT" Тогда
		Возврат "ПРЕДОПЛАТА";
	ИначеЕсли ВРег(ИдентификаторПоДаннымСервиса) = "ADVANCE"  Тогда
		Возврат "АВАНС";
	ИначеЕсли ВРег(ИдентификаторПоДаннымСервиса) = "FULL_PAYMENT" Тогда
		Возврат "ПОЛНЫЙРАСЧЕТ";
	ИначеЕсли ВРег(ИдентификаторПоДаннымСервиса) = "PARTIAL_PAYMENT" Тогда
		Возврат "ЧАСТИЧНЫЙРАСЧЕТКРЕДИТ";
	ИначеЕсли ВРег(ИдентификаторПоДаннымСервиса) = "CREDIT" Тогда
		Возврат "КРЕДИТ"; 
	ИначеЕсли ВРег(ИдентификаторПоДаннымСервиса) = "CREDIT_PAYMENT" Тогда
		Возврат "ОПЛАТАКРЕДИТА";
	Иначе
		
		ОбработатьНеизвестныйИдентификатор(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Передан неизвестный статус признак способа расчета %1'"),
				ИдентификаторПоДаннымСервиса));
		
	КонецЕсли;
	
КонецФункции

Процедура ОбработатьНеизвестныйИдентификатор(ПредставлениеОшибки)
	
	ОФДСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		ПредставлениеОшибки,
		Истина);
	
	ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Не удалось обработать ответ от ОФД. %1 Подробности в журнале регистрации.'"),
		ПредставлениеОшибки);
	
КонецПроцедуры

// Формирует настройки подключения для выполнения запросов.
//
// Параметры:
//  Касса - ОпределяемыйТИП.КассаОФДБИП - касса по которой выполняется запрос.
//
// Возвращаемое значение:
//  Структура - настройки выполнения запросов к сервису ОФД:
//   * НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКОФД - настройка подключения к ОФД.
//   * ИдентификаторУчастника - Строка - идентификатор участника ОФД.
//   * НомерФН - Строка - номер фискального накопителя.
//
Функция ПараметрыНастройкиПодключенияКассы(Касса)
	
	// Заполнение настроек проведения оплаты.
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НастройкиКассОФД.НастройкаПодключения КАК НастройкаПодключения,
		|	НастройкиКассОФД.НастройкаПодключения.ИдентификаторУчастника КАК ИдентификаторУчастника,
		|	НастройкиКассОФД.НастройкаПодключения.Наименование КАК НастройкаПодключенияНаименование,
		|	НастройкиКассОФД.РегистрационныйНомерККТ КАК РегистрационныйНомерККТ,
		|	НастройкиКассОФД.ЗаводскойНомерФН КАК ЗаводскойНомерФН
		|ИЗ
		|	РегистрСведений.НастройкиКассОФД КАК НастройкиКассОФД
		|ГДЕ
		|	НастройкиКассОФД.Касса = &Касса";
	
	Запрос.УстановитьПараметр("Касса", Касса);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	
	Если Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.НастройкаПодключения) Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не заданы параметры подключения для кассы %1.
				|Для продолжения работы необходимо перейти к кассе и выполнить настройку параметров подключения.'"),
			Строка(Касса));
	КонецЕсли;
	
	Если ПустаяСтрока(ВыборкаДетальныеЗаписи.ИдентификаторУчастника) Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не определен идентификатор участника ОФД для настройки %1.
				|Для продолжения работы необходимо перейти к настройкам подключения и выбрать ОФД из списка доступных.'"),
			ВыборкаДетальныеЗаписи.НастройкаПодключенияНаименование);
	КонецЕсли;
	
	ПараметрыНастройкиПодключенияКассы = Новый Структура;
	ПараметрыНастройкиПодключенияКассы.Вставить(
		"ИдентификаторУчастника",
		ВыборкаДетальныеЗаписи.ИдентификаторУчастника);
	ПараметрыНастройкиПодключенияКассы.Вставить(
		"НастройкаПодключения",
		ВыборкаДетальныеЗаписи.НастройкаПодключения);
	ПараметрыНастройкиПодключенияКассы.Вставить(
		"НомерФискальногоНакопителя",
		ВыборкаДетальныеЗаписи.ЗаводскойНомерФН);
	ПараметрыНастройкиПодключенияКассы.Вставить(
		"РегистрационныйНомерККТ",
		ВыборкаДетальныеЗаписи.РегистрационныйНомерККТ);
	
	Возврат ПараметрыНастройкиПодключенияКассы;
	
КонецФункции

Функция ИдентификаторТарифаДляСервиса(ИдентификаторТарифа)
	
	Если ИдентификаторТарифа = "ИспользоватьЗагрузкуИтоговСмены" Тогда
		Возврат "BASIC";
	ИначеЕсли ИдентификаторТарифа = "ИспользоватьЗагрузкуДокументов" Тогда
		Возврат "EXTENDED";
	Иначе
		ОбработатьНеизвестныйИдентификатор(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Передан неизвестный идентификатор тарифа %1'"),
				ИдентификаторТарифа));
	КонецЕсли;
	
КонецФункции

Функция ИдентификаторТарифа(ИдентификаторПоДаннымСервиса)
	
	Если ИдентификаторПоДаннымСервиса = "BASIC" Тогда
		Возврат "ИспользоватьЗагрузкуИтоговСмены";
	ИначеЕсли ИдентификаторПоДаннымСервиса = "EXTENDED" Тогда
		Возврат "ИспользоватьЗагрузкуДокументов";
	КонецЕсли;
	
КонецФункции

Функция СформироватьИдентификатор(ИсходнаяСтрока)
	
	УникальнаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"%1%2",
		ИсходнаяСтрока,
		Новый УникальныйИдентификатор);
	
	ДопустимыеСимволы = "АБВГДЕЁЖЗИКЛМНОПРСТУФХЦЧШЩЬЫЪЭЮЯABCDEFGHIJKLMNOPQRSTUVWXYZ";// АПК:163, данные внешнего источника
	
	ПодготовленнаяСтрока = "";
	
	Для инд = 1 По СтрДлина(УникальнаяСтрока) Цикл
		
		текСимвол = Сред(Врег(УникальнаяСтрока), инд, 1);
		
		Если Найти(ДопустимыеСимволы, текСимвол) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПодготовленнаяСтрока = ПодготовленнаяСтрока + текСимвол;
		
	КонецЦикла;
	
	Возврат ПодготовленнаяСтрока;
	
КонецФункции

#КонецОбласти

#КонецОбласти

