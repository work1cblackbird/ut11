
#Область ПрограммныйИнтерфейс

// См. ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьСоответствиеФункциональныхОпций
Процедура ПолучитьСоответствиеФункциональныхОпций(СоответствиеФО) Экспорт
	
	// Электронные документы
	СоответствиеФО.Вставить("ИспользоватьОбменЭДМеждуОрганизациями",  "ИспользоватьОбменЭДМеждуОрганизациями");
	СоответствиеФО.Вставить("ИспользоватьОбменЭД",                    "ИспользоватьОбменЭД");
	СоответствиеФО.Вставить("ИспользоватьЭлектронныеПодписи", 		  "ИспользоватьЭлектронныеПодписи");
	СоответствиеФО.Вставить("ИспользоватьОбменСБанками",              "ИспользоватьОбменСБанками");
	СоответствиеФО.Вставить("ИспользоватьОнлайнОплаты",    "ИспользоватьОнлайнОплаты");
	// Конец электронные документы
	
	СоответствиеФО.Вставить("ИспользоватьРучныеСкидкиВПродажах", 	 	"ИспользоватьРучныеСкидкиВПродажах");
	СоответствиеФО.Вставить("ИспользоватьАвтоматическиеСкидкиВПродажах", "ИспользоватьАвтоматическиеСкидкиВПродажах");
	СоответствиеФО.Вставить("ИспользоватьРучныеСкидкиВЗакупках", 		"ИспользоватьРучныеСкидкиВЗакупках");
	СоответствиеФО.Вставить("ИспользоватьПартнеровИКонтрагентов", 		"ИспользоватьПартнеровИКонтрагентов");
	
КонецПроцедуры

// См. ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьСоответствиеСправочников.
Процедура ПолучитьСоответствиеСправочников(СоответствиеСправочников) Экспорт
	
	СоответствиеСправочников.Вставить("Организации",                 "Организации");
	СоответствиеСправочников.Вставить("Контрагенты",                 "Контрагенты");
	СоответствиеСправочников.Вставить("Партнеры",                    "Партнеры");
	СоответствиеСправочников.Вставить("Номенклатура",                "Номенклатура");
	СоответствиеСправочников.Вставить("ХарактеристикиНоменклатуры",  "ХарактеристикиНоменклатуры");
	СоответствиеСправочников.Вставить("ЕдиницыИзмерения",            "УпаковкиЕдиницыИзмерения");
	СоответствиеСправочников.Вставить("Валюты",                      "Валюты");
	СоответствиеСправочников.Вставить("Банки",                       "КлассификаторБанков");
	СоответствиеСправочников.Вставить("УпаковкиНоменклатуры",        "УпаковкиЕдиницыИзмерения");
	СоответствиеСправочников.Вставить("БанковскиеСчетаОрганизаций",  "БанковскиеСчетаОрганизаций");
	СоответствиеСправочников.Вставить("БанковскиеСчетаКонтрагентов", "БанковскиеСчетаКонтрагентов");
	СоответствиеСправочников.Вставить("ДоговорыКонтрагентов",        "ДоговорыКонтрагентов");
	
	СоответствиеСправочников.Вставить("ФизическиеЛица",              "ФизическиеЛица"); //* Торговые предложения.
	СоответствиеСправочников.Вставить("ГосударственныеКонтрактыЕИС", "ГосударственныеКонтракты");
	
КонецПроцедуры

// См. ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьСоответствиеНаименованийОбъектовМДИРеквизитов
Процедура ПолучитьСоответствиеНаименованийОбъектовМДИРеквизитов(СоответствиеРеквизитовОбъекта) Экспорт
	
	// Обмен с банками начало
	СоответствиеРеквизитовОбъекта.Вставить("ПлатежноеПоручениеВМетаданных", 		"СписаниеБезналичныхДенежныхСредств");
	СоответствиеРеквизитовОбъекта.Вставить("ПлатежноеТребованиеВМетаданных", 		"ПоступлениеБезналичныхДенежныхСредств");
	СоответствиеРеквизитовОбъекта.Вставить("СокращенноеНаименованиеОрганизации",   	"Наименование");
    СоответствиеРеквизитовОбъекта.Вставить("БанковскийСчетОрганизации",				"БанковскийСчет");
	
	СоответствиеРеквизитовОбъекта.Вставить("ПлатежноеПоручение.СчетОрганизации", 	"БанковскийСчет");
	СоответствиеРеквизитовОбъекта.Вставить("ПлатежноеПоручение.Организация",     	"Организация");
    СоответствиеРеквизитовОбъекта.Вставить("БанковскийСчетОрганизации.НомерСчета",  "НомерСчета");
	СоответствиеРеквизитовОбъекта.Вставить("БанковскийСчетОрганизации.Банк",        "Банк");
	СоответствиеРеквизитовОбъекта.Вставить("БанковскийСчетОрганизации.Организация", "Владелец");
	СоответствиеРеквизитовОбъекта.Вставить("Банк.БИК",                              "Код");
	СоответствиеРеквизитовОбъекта.Вставить("Банк.Наименование",                     "Наименование");
	СоответствиеРеквизитовОбъекта.Вставить("Банк.Город",                            "Город");
	// Обмен с банками конец
	
	// Обмен с контрагентами начало
	СоответствиеРеквизитовОбъекта.Вставить("РеализацияТоваровУслугВМетаданных", 	"РеализацияТоваровУслуг");
	СоответствиеРеквизитовОбъекта.Вставить("ПриобретениеТоваровУслугВМетаданных", 	"ПриобретениеТоваровУслуг");
	СоответствиеРеквизитовОбъекта.Вставить("КоммерческоеПредложениеКлиенту",       	"КоммерческоеПредложениеКлиенту");
	СоответствиеРеквизитовОбъекта.Вставить("РегистрацияЦенНоменклатурыПоставщика", 	"РегистрацияЦенНоменклатурыПоставщика");
	СоответствиеРеквизитовОбъекта.Вставить("ДатаВыставленияВСчетеФактуреВыданном", 	"ДатаВыставления");
	СоответствиеРеквизитовОбъекта.Вставить("ДатаПолученияВСчетеФактуреПолученном", 	"Дата");
	СоответствиеРеквизитовОбъекта.Вставить("ИННКонтрагента",                       	"ИНН");
	СоответствиеРеквизитовОбъекта.Вставить("КППКонтрагента",                       	"КПП");
	СоответствиеРеквизитовОбъекта.Вставить("НаименованиеКонтрагента",              	"Наименование");
	СоответствиеРеквизитовОбъекта.Вставить("НаименованиеКонтрагентаДляСообщенияПользователю", "Наименование");
	СоответствиеРеквизитовОбъекта.Вставить("ВнешнийКодКонтрагента",                	"ИНН");
	СоответствиеРеквизитовОбъекта.Вставить("ПартнерКонтрагента",                   	"Партнер");
	СоответствиеРеквизитовОбъекта.Вставить("ИННОрганизации",                       	"ИНН");
	СоответствиеРеквизитовОбъекта.Вставить("КППОрганизации",                       	"КПП");
	СоответствиеРеквизитовОбъекта.Вставить("ОГРНОрганизации",                      	"ОГРН");
	СоответствиеРеквизитовОбъекта.Вставить("ПолноеНаименованиеОрганизации",         "НаименованиеПолное");
	СоответствиеРеквизитовОбъекта.Вставить("НаименованиеОрганизации",              	"Наименование");
	СоответствиеРеквизитовОбъекта.Вставить("ЮридическоеФизическоеЛицо",             "ЮрФизЛицо");
	
	СоответствиеРеквизитовОбъекта.Вставить("НомерДоговораКонтрагента",             	"Номер");
	СоответствиеРеквизитовОбъекта.Вставить("ДатаДоговораКонтрагента",              	"Дата");
	СоответствиеРеквизитовОбъекта.Вставить("ВладелецДоговораКонтрагента",           "Контрагент");
	// Обмен с контрагентами конец
	
КонецПроцедуры

// См. ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект
Процедура НайтиСсылкуНаОбъект(ТипОбъекта, Результат, ИдОбъекта = "", ДополнительныеРеквизиты = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Неопределено;

	//++ Локализация

	Если ТипОбъекта = "Валюты" ИЛИ ТипОбъекта = "ЕдиницыИзмерения" Тогда
		Если ТипОбъекта = "ЕдиницыИзмерения" Тогда
			ТипОбъекта = "УпаковкиЕдиницыИзмерения";
		КонецЕсли;
		Результат = ОбменСКонтрагентамиУТ.НайтиСсылкуНаОбъектПоРеквизиту(ТипОбъекта, "Код", ИдОбъекта);   
	ИначеЕсли ТипОбъекта = "Банки" Тогда
		Результат = ОбменСКонтрагентамиУТ.НайтиСсылкуНаОбъектПоРеквизиту("КлассификаторБанков", "Код", ИдОбъекта);   
		
	ИначеЕсли ТипОбъекта = "Партнеры" И ЗначениеЗаполнено(ДополнительныеРеквизиты) Тогда
		Контрагент = Неопределено;
		Если ДополнительныеРеквизиты.Свойство("Контрагент", Контрагент) И ЗначениеЗаполнено(Контрагент) Тогда
			Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "Партнер");
		КонецЕсли;
	ИначеЕсли (ТипОбъекта = "Контрагенты" ИЛИ ТипОбъекта = "Организации") И ЗначениеЗаполнено(ДополнительныеРеквизиты) Тогда
		ПараметрПоиска = "";
		ИНН = Неопределено;
		ДополнительныеРеквизиты.Свойство("ИНН", ИНН);
		Если ИНН = Неопределено Тогда
			ИНН = "";
		КонецЕсли;
		КПП = Неопределено;
		ДополнительныеРеквизиты.Свойство("КПП", КПП);
		Если КПП = Неопределено Тогда
			КПП = "";
		КонецЕсли;
		Если ЗначениеЗаполнено(ИНН + КПП) Тогда // по ИНН + КПП
			ОбменСКонтрагентамиПереопределяемый.СсылкаНаОбъектПоИННКПП(ТипОбъекта, ИНН, КПП, Результат); 
		КонецЕсли;
		
		ИмяМетаданных = ОбменСКонтрагентамиУТ.ИмяПрикладногоСправочника(ТипОбъекта);
		
		Если НЕ ЗначениеЗаполнено(Результат) И ДополнительныеРеквизиты.Свойство("Наименование", ПараметрПоиска) Тогда // по Наименованию
			Если ТипОбъекта = "Организации" Тогда
				Результат = ОбменСКонтрагентамиУТ.НайтиСсылкуНаОбъектПоРеквизиту(ИмяМетаданных, "НаименованиеСокращенное", ПараметрПоиска);
			Иначе
				Результат = ОбменСКонтрагентамиУТ.НайтиСсылкуНаОбъектПоРеквизиту(ИмяМетаданных, "Наименование", ПараметрПоиска);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипОбъекта = "НоменклатураПоставщиков" И ЗначениеЗаполнено(ДополнительныеРеквизиты) Тогда
		Владелец = "";
		ПараметрПоиска = "";
		Если Не ДополнительныеРеквизиты.Свойство("Владелец", Владелец) Тогда 
			Владелец = Неопределено;
		КонецЕсли;		
		Если ДополнительныеРеквизиты.Свойство("Идентификатор", ПараметрПоиска) Тогда // по Идентификатору и Владельцу
			Результат = ОбменСКонтрагентамиУТ.НайтиСсылкуНаОбъектПоРеквизиту(ТипОбъекта, "Идентификатор", ПараметрПоиска, Владелец);
		ИначеЕсли ДополнительныеРеквизиты.Свойство("Ид", ПараметрПоиска) Тогда
			Результат = ОбменСКонтрагентамиУТ.НайтиСсылкуНаОбъектПоРеквизиту(ТипОбъекта, "Идентификатор", ПараметрПоиска, Владелец);
		КонецЕсли;
	ИначеЕсли ТипОбъекта = "Номенклатура" И ЗначениеЗаполнено(ДополнительныеРеквизиты) Тогда
		ПараметрПоиска = "";
		Если ДополнительныеРеквизиты.Свойство("Идентификатор", ПараметрПоиска) Тогда // по Идентификатору
			Результат = ОбменСКонтрагентамиУТ.НайтиСсылкуНаНоменклатуруПоИдентификаторуНоменклатурыПоставщика(ПараметрПоиска);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Результат) И ДополнительныеРеквизиты.Свойство("НоменклатураПартнера", ПараметрПоиска) Тогда // по НоменклатуреПоставщика
			Результат = ОбменСКонтрагентамиУТ.НайтиСсылкуНаНоменклатуруПоНоменклатуреПоставщика(ПараметрПоиска);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Результат) И ДополнительныеРеквизиты.Свойство("Артикул", ПараметрПоиска) Тогда // по Коду номенклатуры своей компании
			Результат = ОбменСКонтрагентамиУТ.НайтиСсылкуНаОбъектПоРеквизиту(ТипОбъекта, "Код", ПараметрПоиска);
		КонецЕсли;
	ИначеЕсли (ТипОбъекта = "БанковскиеСчетаОрганизаций" ИЛИ ТипОбъекта = "БанковскиеСчетаКонтрагентов") И ЗначениеЗаполнено(ДополнительныеРеквизиты) Тогда
		ПараметрПоиска 	= "";
		Владелец 		= "";
		Если ДополнительныеРеквизиты.Свойство("НомерСчета", ПараметрПоиска) Тогда // по Номеру счета
			Если ДополнительныеРеквизиты.Свойство("Владелец", Владелец) И ТипЗнч(Владелец) <> Тип("Строка") Тогда
				Результат = ОбменСКонтрагентамиУТ.НайтиСсылкуНаОбъектПоРеквизиту(ТипОбъекта, "НомерСчета", ПараметрПоиска, Владелец);
			Иначе
				Результат = ОбменСКонтрагентамиУТ.НайтиСсылкуНаОбъектПоРеквизиту(ТипОбъекта, "НомерСчета", ПараметрПоиска); 
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВРег(ТипОбъекта) = ВРег("ДоговорыКонтрагентов") Тогда		
		Результат = ОбменСКонтрагентамиУТ.ДоговорКонтрагентаПоРеквизитам(ДополнительныеРеквизиты);		
	ИначеЕсли ТипОбъекта = "ВидыКонтактнойИнформации" Тогда
		Если ИдОбъекта = "ФаксКонтрагента" Тогда
			Результат = Неопределено;
		Иначе
			Результат = Справочники[ТипОбъекта][ИдОбъекта];
		КонецЕсли;
	ИначеЕсли ТипОбъекта = "СтраныМира" Тогда	
		Результат = ОбменСКонтрагентамиУТ.НайтиСсылкуНаОбъектПоРеквизиту("СтраныМира", "Код", ИдОбъекта);
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			Результат = УправлениеКонтактнойИнформацией.СтранаМираПоКодуИлиНаименованию(ИдОбъекта);
		КонецЕсли;
	КонецЕсли;

	//-- Локализация
	
КонецПроцедуры

// См. ЭлектронноеВзаимодействиеПереопределяемый.ПроверитьГотовностьИсточников
Процедура ПроверитьГотовностьИсточников(ДокументыМассив, БезЭлектроннойПодписи = Ложь) Экспорт

	//++ Локализация
	
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияТипаИзМассива(ДокументыМассив, Тип("СтрокаГруппировкиДинамическогоСписка"));
	
	// Удалим из массива документы, которые не могут быть выставлены в электронном виде.
	ДокументыБезУказанияКонтрагента = Новый Массив();
	Для каждого Документ Из ДокументыМассив Цикл
		
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту") Тогда
			Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Контрагент");
			Если Не ЗначениеЗаполнено(Контрагент) Тогда
				ДокументыБезУказанияКонтрагента.Добавить(Документ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Перед формированием ЭД документы ИБ должны быть проведены
	ДокументыПодлежащиеПроведению = Новый Массив;
	Для каждого Элемент Из ДокументыМассив Цикл
				
		ЭтоЗаказ = ТипЗнч(Элемент) = Тип("ДокументСсылка.ЗаказПоставщику") 
				Или ТипЗнч(Элемент) = Тип("ДокументСсылка.ЗаказКлиента");
			
		// Не проверяем проведение документов заказ поставщику при отправке через 1С:Бизнес-сеть
		Если БезЭлектроннойПодписи И ЭтоЗаказ Тогда
			Продолжить;
		КонецЕсли;
		
		МетаданныеДокумента = Элемент.Метаданные();
		Если ОбщегоНазначения.ЭтоДокумент(МетаданныеДокумента)
			 И МетаданныеДокумента.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить Тогда
			ДокументыПодлежащиеПроведению.Добавить(Элемент);
		КонецЕсли;		
	КонецЦикла;
	
	Если ДокументыПодлежащиеПроведению.Количество() = 0 Тогда
		// Проверку выполнять не требуется
		Возврат;
	КонецЕсли;
	
	МассивНепроведенныхДокументов = ОбщегоНазначения.ПроверитьПроведенностьДокументов(ДокументыПодлежащиеПроведению);
	КоличествоНепроведенныхДокументов = МассивНепроведенныхДокументов.Количество();
	
	Если КоличествоНепроведенныхДокументов <> 0 Тогда	
		Если КоличествоНепроведенныхДокументов = 1 Тогда
			Текст = НСтр("ru = 'Для того чтобы сформировать электронную версию документа, его необходимо предварительно провести.'");
		Иначе
			Текст = НСтр("ru = 'Для того чтобы сформировать электронные версии документов, их необходимо предварительно провести.'");
		КонецЕсли;
		
		ОбщегоНазначения.СообщитьПользователю(Текст);
		
		ОбменСКонтрагентамиУТ.УдалитьДокументыНеподходящиеДляФормированияЭД(
			ДокументыМассив,
			МассивНепроведенныхДокументов,
			НСтр("ru = 'Документ %1 не проведен.'"));
	КонецЕсли;
		
	Если ДокументыБезУказанияКонтрагента.Количество() Тогда
		ШаблонСообщения = Нстр("ru = 'Не заполнен Контрагент в Соглашении документа %1'");
		ОбменСКонтрагентамиУТ.УдалитьДокументыНеподходящиеДляФормированияЭД(
			ДокументыМассив,
			ДокументыБезУказанияКонтрагента,
			ШаблонСообщения);
	КонецЕсли;
	
	ИнтеграцияИСВызовСервераУТ.ДокументыСОшибкамиПроверкиЗаполненияКодовМаркировки(ДокументыМассив, Ложь);
	
	//-- Локализация
	
КонецПроцедуры

// Получает данные о физическом (юридическом) лице по ссылке.
//
// Параметры:
//  ЮрФизЛицо - СправочникСсылка.Организации, СправочникСсылка.Контрагенты - ссылка на элемент справочника, по которому надо получить данные.
//  БанковскийСчет - СправочникСсылка.БанковскиеСчетаОрганизаций, СправочникСсылка.БанковскиеСчетаКонтрагентов - ссылка на банковский счет.
//  ДатаСведений - Дата - дата на которую надо получить данные.
//
// Возвращаемое значение:
// 	Структура:
// 		* СтранаРегистрации - СправочникСсылка.СтраныМира
// 		* Ссылка - СправочникСсылка.РегистрацииВНалоговомОргане,СправочникСсылка.Организации,СправочникСсылка.Контрагенты
// 		* Наименование - Строка
// 		* Фамилия - Строка
// 		* Имя - Строка
// 		* Отчество - Строка
//
Функция ПолучитьДанныеЮрФизЛица(ЮрФизЛицо, Знач БанковскийСчет = Неопределено, ДатаСведений = Неопределено) Экспорт
	
	ДанныеЮрФизЛица = Новый Структура;
	//++ Локализация
	
	Сведения = Новый Структура("Ссылка, ОфициальноеНаименование, Наименование, Представление,
		| СокращенноеНаименование, ПолноеНаименование, Фамилия, Имя, Отчество,
		| ЮрФизЛицо, КодПоОКПО, ИНН, КПП, ОГРН, СвидетельствоСерияНомер, СвидетельствоДатаВыдачи,
		| Банк, БИК, КоррСчет, НомерСчета, ЮридическийАдрес, ЮридическийАдресXML, ФактическийАдрес, ФактическийАдресXML,
		| ФактическийАдресИдентификатор, ПочтовыйАдрес, ПочтовыйАдресXML, Телефоны, ТелефоныXML, ЭлектроннаяПочта");
	
	Если НЕ ЗначениеЗаполнено(ЮрФизЛицо) Тогда
		Возврат Сведения
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Если ДатаСведений = Неопределено Тогда
		ДатаСведений = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.РегистрацииВНалоговомОргане") Тогда
		ДанныеЮрФизЛица = Справочники.РегистрацииВНалоговомОргане.СведенияОПодразделении(ЮрФизЛицо, ДатаСведений);
		ДанныеЮрФизЛица.Вставить("ЮрФизЛицо", Перечисления.ЮрФизЛицо.ЮрЛицо);
		ДанныеЮрФизЛица.Вставить("Телефоны", "");
	Иначе
		ДанныеЮрФизЛица = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ЮрФизЛицо, ДатаСведений,, БанковскийСчет);
		Если Не ДанныеЮрФизЛица.Свойство("СтранаРегистрации") Тогда
			ДанныеЮрФизЛица.Вставить("СтранаРегистрации", Справочники.СтраныМира.Россия);
		КонецЕсли;
		Если ДанныеЮрФизЛица.Свойство("КПП") И Не ЗначениеЗаполнено(ДанныеЮрФизЛица.КПП) Тогда
			Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации") Тогда 
				ДанныеЮрФизЛица.КПП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЮрФизЛицо, "КПП")
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если Не ДанныеЮрФизЛица.Свойство("Наименование") Тогда
		ДанныеЮрФизЛица.Вставить("Наименование", ДанныеЮрФизЛица.ПолноеНаименование);
	КонецЕсли;
	ДанныеЮрФизЛица.Вставить("Ссылка", ЮрФизЛицо);
	
	Если ДанныеЮрФизЛица.ЮрФизЛицо <> Перечисления.ЮрФизЛицо.ЮрЛицо 
		И ДанныеЮрФизЛица.ЮрФизЛицо <> Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Тогда
		
		ПолноеНаименование = ДанныеЮрФизЛица.ОфициальноеНаименование;

		ВариантыОФ = Новый Массив;
		ВариантыОФ.Добавить(НСтр("ru='ИП ГКФХ'"));
		ВариантыОФ.Добавить(НСтр("ru='ИП Глава КФХ'"));
		ВариантыОФ.Добавить(НСтр("ru='ГКФХ'"));
		ВариантыОФ.Добавить(НСтр("ru='Глава КФХ'"));
		ВариантыОФ.Добавить(НСтр("ru='Индивидуальный предприниматель Глава крестьянского фермерского хозяйства'"));
		ВариантыОФ.Добавить(НСтр("ru='ИП Глава крестьянского фермерского хозяйства'"));
		ВариантыОФ.Добавить(НСтр("ru='Глава крестьянского фермерского хозяйства'"));
		ВариантыОФ.Добавить(НСтр("ru='ИП Глава крестьянского (фермерского) хозяйства'"));
		ВариантыОФ.Добавить(НСтр("ru='Индивидуальный предприниматель Глава крестьянского (фермерского) хозяйства'"));
		ВариантыОФ.Добавить(НСтр("ru='ИП'"));
		ВариантыОФ.Добавить(НСтр("ru='Индивидуальный предприниматель'"));
		
		Для Каждого Вариант Из ВариантыОФ Цикл
			РезультатПоиска = СтрНайти(ВРЕГ(ПолноеНаименование), ВРЕГ(Вариант));
			Если РезультатПоиска Тогда
				Если РезультатПоиска = 1 Тогда
					ПолноеНаименование = СокрЛП(Прав(ПолноеНаименование, СтрДлина(ПолноеНаименование)-СтрДлина(Вариант)));
				Иначе
					ПолноеНаименование = СокрЛП(Лев(ПолноеНаименование, СтрДлина(ПолноеНаименование)-СтрДлина(Вариант)));
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ПолноеНаименование);
		
		ДанныеЮрФизЛица.Вставить("Фамилия", ФИО.Фамилия);
		ДанныеЮрФизЛица.Вставить("Имя", ФИО.Имя);
		ДанныеЮрФизЛица.Вставить("Отчество", ФИО.Отчество);
		
	КонецЕсли;
	
	Если Не ДанныеЮрФизЛица.Свойство("ОГРН") Тогда
		ДанныеЮрФизЛица.Вставить("ОГРН", Неопределено);
	КонецЕсли;
	
	Если Не ДанныеЮрФизЛица.Свойство("ЮридическийАдресXML") 
		И ДанныеЮрФизЛица.Свойство("ЮридическийАдрес") Тогда
	
		Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации") Тогда
			ВидАдреса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
						Справочники.ВидыКонтактнойИнформации["ЮрАдресОрганизации"], "Ссылка");
		ИначеЕсли ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Контрагенты") Тогда 
			ВидАдреса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
						Справочники.ВидыКонтактнойИнформации["ЮрАдресКонтрагента"], "Ссылка");
		КонецЕсли;
		
		ЗначенияКонтактнойИнформации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ЮрФизЛицо, 
																									ВидАдреса,
																									ДатаСведений,
																									Ложь);
		
		ЮридическийАдресXML = Неопределено;
		Если ЗначенияКонтактнойИнформации.Количество() Тогда
			ЮридическийАдресXML = ЗначенияКонтактнойИнформации[0].ЗначенияПолей;
		КонецЕсли;
		
		ДанныеЮрФизЛица.Вставить("ЮридическийАдресXML", ЮридическийАдресXML);
		
	КонецЕсли;

	УстановитьПривилегированныйРежим(Ложь);

	//-- Локализация
	
	Возврат ДанныеЮрФизЛица;
	
КонецФункции

// См. ЭлектронноеВзаимодействиеПереопределяемый.ПередЗаписьюВладельцаЭлектронногоДокумента
Процедура ПередЗаписьюВладельцаЭлектронногоДокумента(Объект, ИзменилисьКлючевыеРеквизиты, Знач СостояниеЭлектронногоДокумента, 
	ПодлежитОбменуЭД, ТребуетсяКонтрольАктуальности, Отказ) Экспорт

	//++ Локализация
	
	
	Если ЭтоЭлектронныеПеревозочныеДокументы(Объект) Тогда
		Возврат;
	КонецЕсли;

	ЭлектронныйДокументСформирован = ЭлектронныйДокументСформирован(Объект, СостояниеЭлектронногоДокумента);	
	ПодлежитОбменуЭД = ОбменСКонтрагентамиУТ.ПодлежитОбменуЭД(Объект, ЭлектронныйДокументСформирован);

	// Если документ не подлежит обмену, то проверять изменение ключевых реквизитов не требуется.	
	Если ПодлежитОбменуЭД Тогда
		ИмяОбъекта = Объект.Метаданные().ПолноеИмя();	
		ТаблицаРеквизитовРегистрации = ОбменСКонтрагентамиУТ.КлючевыеРеквизитыОбъекта(ИмяОбъекта);
		Если Не ТаблицаРеквизитовРегистрации.Количество() Тогда
			ИзменилисьКлючевыеРеквизиты = Истина;
		КонецЕсли;
		
		Для каждого СтрокаТаблицыРеквизитовРегистрации Из ТаблицаРеквизитовРегистрации Цикл
			ЕстьИзмененияВерсийОбъектов =
				ОбменСКонтрагентамиУТ.ОпределитьИзмененияВерсийОбъекта(Объект, СтрокаТаблицыРеквизитовРегистрации);
			Если ЕстьИзмененияВерсийОбъектов Тогда
				ИзменилисьКлючевыеРеквизиты = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//-- Локализация
	
КонецПроцедуры

// См. ЭлектронноеВзаимодействиеПереопределяемый.ПередЗаписьюВладельцаЭлектронногоДокументаЭлементСправочника.
Процедура ПередЗаписьюВладельцаЭлектронногоДокументаЭлементСправочника(Объект, ИзменилисьКлючевыеРеквизиты,
	Знач СостояниеЭлектронногоДокумента, ПодлежитОбменуЭД, ТребуетсяКонтрольАктуальности, Отказ) Экспорт
	
	//++ Локализация
		
	Если Объект.ДополнительныеСвойства.Свойство("ИзменилисьКлючевыеРеквизиты")
		И Объект.ДополнительныеСвойства.ИзменилисьКлючевыеРеквизиты Тогда
		ИзменилисьКлючевыеРеквизиты = Истина;
		Возврат;
	КонецЕсли;
	
	ИмяОбъекта = Объект.Метаданные().ПолноеИмя();
	
	ТаблицаРеквизитовРегистрации = ОбменСКонтрагентамиУТ.КлючевыеРеквизитыОбъекта(ИмяОбъекта);
	Если Не ТаблицаРеквизитовРегистрации.Количество() Тогда
		ИзменилисьКлючевыеРеквизиты = Истина;
	КонецЕсли;
	
	 Для каждого СтрокаТаблицыРеквизитовРегистрации Из ТаблицаРеквизитовРегистрации Цикл
		ЕстьИзмененияВерсийОбъектов =
			ОбменСКонтрагентамиУТ.ОпределитьИзмененияВерсийОбъекта(Объект, СтрокаТаблицыРеквизитовРегистрации);
		Если ЕстьИзмененияВерсийОбъектов Тогда
			ИзменилисьКлючевыеРеквизиты = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ИзменилисьКлючевыеРеквизиты И ИмяОбъекта = "Справочник.ДоговорыКонтрагентов" Тогда
		СсылкаФайлЭД = ПолучитьДанныеОтправленногоФайлаДоговорногоДокумента(Объект); 
		Если ЗначениеЗаполнено(СсылкаФайлЭД) Тогда
			ОбменСКонтрагентамиУТ.ОбновитьСостояниеОтправленногоФайлаДоговорногоДокумента(СсылкаФайлЭД, Ложь);
		КонецЕсли;
	КонецЕсли;		
	
	Объект.ДополнительныеСвойства.Вставить("ИзменилисьКлючевыеРеквизиты", ИзменилисьКлючевыеРеквизиты);
	
	//-- Локализация
	
КонецПроцедуры

// Получает данные о файле Договорного документа отправленного по ЭДО.
//
// Параметры:
//  Объект - СправочникСсылка - ссылка на элемент справочника, по которому получаются данные.
// 
// Возвращаемое значение:
//  - СправочникСсылка.ДоговорыКонтрагентовПрисоединенныеФайлы
//  - Неопределено - если элемент не найден в ИБ.
//
Функция ПолучитьДанныеОтправленногоФайлаДоговорногоДокумента(Объект) Экспорт
	
	Файл = Неопределено;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДоговорыКонтрагентовПрисоединенныеФайлы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентовПрисоединенныеФайлы КАК ДоговорыКонтрагентовПрисоединенныеФайлы
	|ГДЕ
	|	ДоговорыКонтрагентовПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
	|	И ДоговорыКонтрагентовПрисоединенныеФайлы.ОтправленПолученЭД = ИСТИНА";

	Запрос.УстановитьПараметр("ВладелецФайла", Объект.Ссылка);

	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Файл = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Файл;
	
КонецФункции

// Получает данные о физическом лице по ссылке.
//
// Параметры:
//  ФизЛицо - СправочникСсылка - ссылка на элемент справочника, по которому получаются данные.
//  Сведения - см. ЭлектронноеВзаимодействие.СтруктураДанныхФизЛица
//  ПолучатьДанныеДокумента - Булево - Истина - получать данные по документу (при наличии)
Процедура ПолучитьДанныеФизЛица(ФизЛицо, Сведения, ПолучатьДанныеДокумента = Истина) Экспорт

	//++ Локализация
	
	Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
		Возврат
	КонецЕсли;

	ДанныеЮрФизЛица = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ФизЛицо, ТекущаяДатаСеанса());

	Если Не ДанныеЮрФизЛица.Свойство("СтранаРегистрации") Тогда
		ДанныеЮрФизЛица.Вставить("СтранаРегистрации", Справочники.СтраныМира.Россия);
	КонецЕсли;

	Реквизиты = "ДатаРождения, ИНН, Пол";

	
	СтруктураДанных = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ФизЛицо, Реквизиты);
	ДанныеФИО = ФизическиеЛицаУТ.ФамилияИмяОтчество(ФизЛицо, ТекущаяДатаСеанса());
	ДанныеФИО.Вставить("ФИО", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФизЛицо, "Наименование"));

	Сведения.ДатаРождения      = СтруктураДанных.ДатаРождения;
	Сведения.ИНН               = СтруктураДанных.ИНН;
	Сведения.Пол               = Строка(СтруктураДанных.Пол);
	
	Сведения.ФИО               = ДанныеФИО.ФИО;
	Сведения.Фамилия           = ДанныеФИО.Фамилия;
	Сведения.Имя               = ДанныеФИО.Имя;
	Сведения.Отчество          = ДанныеФИО.Отчество;
	
	
	Если Сведения.Свойство("Телефоны") Тогда
		
		ЗначенияКонтактнойИнформации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ФизЛицо, 
																									Перечисления.ТипыКонтактнойИнформации.Телефон,
																									ТекущаяДатаСеанса(),
																									Ложь);
		МассивТелефонов = Новый Массив();
		Для Каждого Элемент Из ЗначенияКонтактнойИнформации Цикл
			МассивТелефонов.Добавить(Элемент.Представление);
		КонецЦикла;
		
		Сведения.Телефоны = СтрСоединить(МассивТелефонов, ", ");
		
	КонецЕсли;
	
	Если Сведения.Свойство("ЭлектроннаяПочта") Тогда
		
		ЗначенияКонтактнойИнформации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ФизЛицо, 
																									Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,
																									ТекущаяДатаСеанса(),
																									Истина);
		
		Сведения.ЭлектроннаяПочта = ЗначенияКонтактнойИнформации;
		
	КонецЕсли;
	
	Сведения.Гражданство       = ДанныеЮрФизЛица.СтранаРегистрации;
	Если ПолучатьДанныеДокумента Тогда
		ДанныеДокументаФизЛица = ФизическиеЛицаУТ.ПолучитьДокументФизическогоЛицаПоУмолчанию(ФизЛицо);
		Если ЗначениеЗаполнено(ДанныеДокументаФизЛица.ВидДокумента) Тогда
			Сведения.КодФНС = ДанныеДокументаФизЛица.КодМВД;
			Сведения.Серия  = ДанныеДокументаФизЛица.Серия;
			Сведения.Номер  = ДанныеДокументаФизЛица.Номер;
			Сведения.ДатаВыдачи = ДанныеДокументаФизЛица.ДатаВыдачи;
			Сведения.КемВыдан = ДанныеДокументаФизЛица.КемВыдан;
			Сведения.КодПодразделения = ДанныеДокументаФизЛица.КодПодразделения;
		КонецЕсли;
	КонецЕсли;

	//-- Локализация
	
КонецПроцедуры

// Получает ссылку на физическое лицо по сведениям.
// 
// Параметры:
//  СведенияФизЛица - структура:
//  	* ИНН - строка
// 
// Возвращаемое значение:
//  - СправочникСсылка.ФизическиеЛица
//  - Неопределено - если не элемент не найден в ИБ.
//
Функция ПолучитьФизЛицоМЧД(СведенияФизЛица) Экспорт

	ФизическоеЛицо = Неопределено;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ФизическиеЛица.Ссылка
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.ИНН = &ИНН";

	Запрос.УстановитьПараметр("ИНН", СведенияФизЛица.ИНН);

	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ФизическоеЛицо = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат ФизическоеЛицо;

КонецФункции

// См. ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДокументыФизЛица
Процедура ПолучитьДокументыФизЛица(ФизЛицо, Сведения) Экспорт

	ДанныеФизЛица = ФизическиеЛицаУТ.ПолучитьДокументФизическогоЛицаПоУмолчанию(ФизЛицо,, ТекущаяДатаСеанса());
	
	Сведения = Новый Структура;
	Сведения.Вставить("ВидДокумента"    , ДанныеФизЛица.ВидДокумента);
	Сведения.Вставить("Серия"           , ДанныеФизЛица.Серия);
	Сведения.Вставить("Номер"           , ДанныеФизЛица.Номер);
	Сведения.Вставить("ДатаВыдачи"      , ДанныеФизЛица.ДатаВыдачи);
	Сведения.Вставить("КемВыдан"        , ДанныеФизЛица.КемВыдан);
	Сведения.Вставить("КодПодразделения", ДанныеФизЛица.КодПодразделения);

КонецПроцедуры

// См. ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьТипыОрганизацииПредставителяМЧД
Процедура ПолучитьТипыОрганизацииПредставителяМЧД(Типы) Экспорт

	Типы.Добавить(Тип("СправочникСсылка.Контрагенты"));
	Типы.Добавить(Тип("СправочникСсылка.Организации"));

КонецПроцедуры

// Получить ссылку на организацию-представителя МЧД.
// 
// Параметры:
//  СведенияЮрЛица - структура:
// 		* ИНН 	- строка
// 		* КПП 	- строка
// 		* ОГРН 	- строка
// 
// Возвращаемое значение:
// 	СправочникСсылка - ссылка на элемент справочника, Неопределено
//  
Функция ПолучитьОрганизациюМЧД(СведенияЮрЛица) Экспорт

	//++ Локализация

	ИскомаяОрганизация = Справочники.Организации.ПустаяСсылка();
	ОбменСКонтрагентамиУТ.СсылкаНаОбъектПоИННКПП("Организации", СведенияЮрЛица.ИНН, СведенияЮрЛица.КПП, ИскомаяОрганизация, ТекущаяДатаСеанса());
	Если ЗначениеЗаполнено(ИскомаяОрганизация) Тогда
		Возврат ИскомаяОрганизация;
	КонецЕсли;
	
	ИскомыйКонтрагент = Справочники.Контрагенты.ПустаяСсылка();
	ОбменСКонтрагентамиУТ.СсылкаНаОбъектПоИННКПП("Контрагенты", СведенияЮрЛица.ИНН, СведенияЮрЛица.КПП, ИскомыйКонтрагент);
	Если ЗначениеЗаполнено(ИскомыйКонтрагент) Тогда
		Возврат ИскомыйКонтрагент;
	КонецЕсли;
	
	//-- Локализация
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//++ Локализация

Функция ЭтоЭлектронныеПеревозочныеДокументы(Объект)
	
	Если ОбщегоНазначения.ЭтоДокумент(Объект.Метаданные()) Тогда
		
		Если ОбщегоНазначения.ЗначениеСсылочногоТипа(Объект) Тогда
			Ссылка = Объект;
		Иначе
			Ссылка = Объект.Ссылка;
		КонецЕсли;
		
		Возврат Метаданные.ОпределяемыеТипы.ДокументыЭПД.Тип.СодержитТип(ТипЗнч(Ссылка)); 
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;

КонецФункции

Функция ЭлектронныйДокументСформирован(Объект, СостояниеЭлектронногоДокумента)

	Если Не ЗначениеЗаполнено(СостояниеЭлектронногоДокумента) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЭтоБанковскийДокумент(Объект) Тогда
		Возврат СостояниеЭлектронногоДокумента <> Перечисления.СостоянияОбменСБанками.НеСформирован;
	Иначе
		Возврат СостояниеЭлектронногоДокумента <> Перечисления.СостоянияДокументовЭДО.НеСформирован;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

Функция ЭтоБанковскийДокумент(Объект)

	ТипОбъекта = ТипЗнч(Объект);
	Возврат ТипОбъекта = Тип("ДокументОбъект.СписаниеБезналичныхДенежныхСредств")
		ИЛИ ТипОбъекта = Тип("ДокументОбъект.ПоступлениеБезналичныхДенежныхСредств");
		
КонецФункции

//-- Локализация
	
#КонецОбласти