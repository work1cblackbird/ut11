////////////////////////////////////////////////////////////////////////////////
// Подсистема "Коммерческие предложения документы".
// ОбщийМодуль.КоммерческиеПредложенияДокументыПереопределяемый
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Определяет список анализируемых источников предложений.
// По умолчанию анализируются только торговые предложения из 1С:Бизнес-сеть и
// коммерческие предложения не из этого запроса.
//
// Параметры:
//  Источники - ТаблицаЗначений - таблица с колонками:
//   * ИмяИсточника           - Строка   - имя источника предложений.
//   * ПредставлениеИсточника - Строка   - представление источника.
//   * КартинкаИсточника      - Картинка - картинка источника для вывода на форму.
//   * КраткоеПредставление   - Строка   - текстовое описание источника.
//   * Использовать           - Булево   - использовать источник для новых документов.
//   * Заблокирован           - Булево   - заблокировать возможность отключения источника.
//   * ПоддерживаетСохранение - Булево   - поддерживает комментарии и изменение состояния.
//
Процедура АнализируемыеИсточникиПредложений(Источники) Экспорт
	
	КоммерческиеПредложенияДокументыУТ.АнализируемыеИсточникиПредложений(Источники);
	
КонецПроцедуры

// ЭлектронноеВзаимодействие.ЗапросКоммерческихПредложенийПоставщиков

// Получает построчную информацию из найденных предложениях по запросу коммерческих предложений.
//
// Параметры:
//  СсылкаНаОбъект         - ДокументСсылка.ЗапросКоммерческихПредложенийПоставщиков - запрос коммерческих предложений.
//  АнализируемыеИсточники - ТаблицаЗначений - таблица анализируемых источников.
//  НайденныеПредложения   - ТаблицаЗначений - Дерево данных:
//   * КоммерческоеПредложениеСсылка - ОпределяемыйТип.КоммерческоеПредложениеПоставщика - ссылка на документ.
//   * ДокументОснование             - ОпределяемыйТип.ЗапросКоммерческихПредложенийПоставщиков - ссылка на документ основание.
//   * ПоставщикПредставление        - Строка - представление контрагента.
//   * ПоставщикСсылка               - ОпределяемыйТип.КонтрагентБЭД - ссылка на справочник контрагенты.
//   * УсловияОплатыТекст            - Строка - описание условий оплаты.
//   * УсловияПоставкиТекст          - Строка - описание условий поставки.
//   * ПрочаяДополнительнаяИнформацияТекст - Строка - описание прочей информации о предложении.
//   * СуммаМинимум                  - Число  - минимальная сумма по всем позициям предложения.
//   * СуммаМаксимум                 - Число  - максимальная сумма по всем позициям предложения.
//   * СрокПоставки                  - Дата, Число - срок поставки в днях с момента оплаты заказа, либо конкретная дата поставки.
//   * Охват                         - Число  - охват позиций запроса.
//   * ИмяИсточника                  - Число  - имя источника получения коммерческого предложения.
//   * Налогообложение               - Булево - облагается ли продажа НДС.
//   * ЦенаВключаетНДС               - Булево - включает ли цена НДС.
//   * КоммерческоеПредложениеНомер  - Число  - номер предложения.
//   * КоммерческоеПредложениеДата   - Дата   - дата предложения.
//   * МожетВыкупатьсяЧастично       - Булево - можно ли выкупать только часть предложений.
//   * Валюта                        - СправочникСсылка.Валюты - валюта предложения.
//   * Товары                        - ТаблицаЗначений         - товары предложения, колонки:
//      ** НоменклатураПоставщика               - Строка - номенклатура.
//      ** ИдентификаторСтрокиЗапроса           - Строка - идентификатор запроса.
//      ** ИдентификаторСтрокиИсточника         - Строка - идентификатор источника.
//      ** ИдентификаторНоменклатурыПоставщика  - Строка - идентификатор номенклатуры поставщика.
//      ** СрокПоставки                         - Число, Дата - количество дней или дата поставки.
//      ** Количество                           - Число  - количество товара.
//      ** Цена                                 - Число  - цена товара.
//      ** ПроцентСкидки                        - Число  - скидка.
//      ** СуммаСНДС                            - Число  - сумму с учетом НДС.
//      ** ДополнительнаяИнформацияОтПоставщика - Строка - дополнительная информация поставщика.
//      ** Комментарий                          - Строка - комментарий.
//      ** ЕдиницаИзмерения                     - Строка - единица измерения номенклатуры.
//      ** СнятСРассмотрения                    - Булево - признак снятия с рассмотрения.
//      ** СтавкаНДС                            - ОпределяемыйТип.СтавкаНДСКоммерческихПредложений.
//
Процедура ПредложенияИсточниковПоЗапросуКоммерческихПредложений(Знач СсылкаНаОбъект, Знач АнализируемыеИсточники, НайденныеПредложения) Экспорт
	
	КоммерческиеПредложенияДокументыУТ.ПредложенияИсточниковПоЗапросуКоммерческихПредложений(СсылкаНаОбъект, АнализируемыеИсточники, НайденныеПредложения);
	
КонецПроцедуры

// Конец ЭлектронноеВзаимодействие.ЗапросКоммерческихПредложенийПоставщиков

// Сохраняет изменения в комментариях и состояниях источников.
//
// Параметры:
//   Источники - ТаблицаЗначений - таблица с колонками:
//    * Источник          - Произвольный - источника анализа торговых предложений.
//    * СнятСРассмотрения - Булево   - не рассматривать предложение.
//    * Комментарий       - Картинка - краткий комментарий.
//   Отказ - Булево - во время сохранения были ошибки.
//
Процедура СохранитьПользовательскиеИзмененияВДокументахИсточниках(Источники, Отказ) Экспорт
	
	КоммерческиеПредложенияДокументыУТ.СохранитьПользовательскиеИзмененияВДокументахИсточниках(Источники, Отказ);
	
КонецПроцедуры

// Устанавливаем условное оформление для характеристик номенклатуры.
//
// Параметры:
//  Форма - Форма - Содержит данную форму 
//  ИмяПоляВводаХарактеристики - Строка - Наименование элемента формы, содержащего характеристики номенклатуры,
//     если оно отличается от "ТоварыХарактеристика".
//  ПутьКПолюОтбора - Строка - Полный путь к реквизиту "характеристики используются",
//     если он отличается от "Объект.Товары.ХарактеристикиИспользуются".
//
Процедура УстановитьУсловноеОформлениеХарактеристикНоменклатуры(Форма,
	ИмяПоляВводаХарактеристики = "ТоварыХарактеристика",
	ПутьКПолюОтбора = "Объект.Товары.ХарактеристикиИспользуются") Экспорт
	
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(Форма);
	
КонецПроцедуры

// Возможность определить условное оформление в форме.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, для которой определяется условное оформление.
//
Процедура ПриУстановкеУсловногоОформления(Форма) Экспорт
	
	КоммерческиеПредложенияДокументыУТ.ПриУстановкеУсловногоОформления(Форма);
	
КонецПроцедуры

// Возможность определения настроек учета.
//
// Параметры:
//  Настройки - см. КоммерческиеПредложенияДокументы.НастройкиУчета
//
Процедура ПриОпределенииНастроекУчета(Настройки) Экспорт
	
	КоммерческиеПредложенияДокументыУТ.ПриОпределенииНастроекУчета(Настройки);
	
	// ЭлектронноеВзаимодействие.ИнтеграцияСЭлектроннымиТорговымиПлощадками
	ИнтеграцияСЭлектроннымиТорговымиПлощадками.ПриОпределенииНастроекУчета(Настройки);
	// Конец ЭлектронноеВзаимодействие.ИнтеграцияСЭлектроннымиТорговымиПлощадками
	
КонецПроцедуры

// ЭлектронноеВзаимодействие.ЗапросКоммерческогоПредложенияОтКлиента

// Позволяет изменить вывод данных в форме списка ЗапросКоммерческогоПредложенияОтКлиента.
//
// Параметры:
//  Шаблоны - Структура - заполненная структура с шаблонами вывода информации.
//
Процедура ИзменитьШаблоныДекорацииВводаНаОсновании(Шаблоны) Экспорт
	
КонецПроцедуры

// Конец ЭлектронноеВзаимодействие.ЗапросКоммерческогоПредложенияОтКлиента

// Вызывается для получения документов созданных на основании Коммерческие предложения клиенту.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на документ коммерческое предложение клиенту.
//  КоммерческиеПредложенияКлиенту - ТаблицаЗначений - таблица с данными о созданных на основании документа:
//   * Ссылка   - ДокументСсылка - ссылка на созданный документ.
//   * Номер    - Число  - номер документа.
//   * Дата     - Дата   - дата документа.
//   * Менеджер - Строка - Имя пользователя создавшего документ.
//
Процедура ПолучитьКоммерческиеПредложенияКлиентуНаОсновании(Знач СсылкаНаОбъект, КоммерческиеПредложенияКлиенту) Экспорт
	
	КоммерческиеПредложенияДокументыУТ.ПолучитьКоммерческиеПредложенияКлиентуНаОсновании(СсылкаНаОбъект,
		КоммерческиеПредложенияКлиенту);
	
КонецПроцедуры

// Вызывается для получения представления партнера.
//
// Параметры:
//   ПредставлениеПартнераКонтрагента - Строка - текстовое представление партнера контрагента.
//   Партнер                          - ОпределяемыйТип.ПартнерБЭД - ссылка на справочник партнеры.
//   Контрагент                       - ОпределяемыйТип.КонтрагентБЭД - ссылка на справочник контрагенты.
//   СтандартнаяОбработка             - Булево - Представление контрагента изменено.
//
Процедура ПриПолученииПредставленияПартнераКонтрагента(ПредставлениеПартнераКонтрагента, Партнер, Контрагент, СтандартнаяОбработка) Экспорт
	
	КоммерческиеПредложенияДокументыУТ.ПриПолученииПредставленияПартнераКонтрагента(ПредставлениеПартнераКонтрагента, Партнер, 
		Контрагент, СтандартнаяОбработка);
	
КонецПроцедуры

// Возможность переопределить подготовку данных для формирования электронного документа.
//
// Параметры:
//   СсылкаНаОбъект       - ДокументСсылка.КоммерческоеПредложениеКлиенту - ссылка на документ.
//   ПодготовленныеДанные - Неопределено - в эту переменную помещаются подготовленные данные.
//   СтандартнаяОбработка             - Булево - Представление контрагента изменено.
//
Процедура ПриЗаполненииДанныхЭлектронногоДокумента(СсылкаНаОбъект, ПодготовленныеДанные , СтандартнаяОбработка) Экспорт
	
	КоммерческиеПредложенияДокументыУТ.ПриЗаполненииДанныхЭлектронногоДокумента(СсылкаНаОбъект, ПодготовленныеДанные , СтандартнаяОбработка);
	
КонецПроцедуры

#Область ОбработчикиСобытийФормы

// Возникает на сервере при создании формы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - создаваемая форма.
//  Отказ - Булево - признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - признак выполнения стандартной обработки.
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	КоммерческиеПредложенияДокументыУТ.ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

// Вызывается при чтении объекта на сервере.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма читаемого объекта.
//  ТекущийОбъект - ДокументОбъект, СправочникОбъект - читаемый объект.
//
Процедура ПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
	КоммерческиеПредложенияДокументыУТ.ПриЧтенииНаСервере(Форма, ТекущийОбъект);
	
КонецПроцедуры

// Вызывается после записи в форме объекта на сервере.
//
// Параметры:
//  Форма           - ФормаКлиентскогоПриложения - форма записанного объекта,
//  ТекущийОбъект   - ДокументОбъект, СправочникОбъект - записанный объект,
//  ПараметрыЗаписи - Структура - содержащая параметры записи.
//
Процедура ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	КоммерческиеПредложенияДокументыУТ.ПослеЗаписиНаСервере(Форма, ТекущийОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийДокументов

// Вызывается при вводе документа на основании, при выполнении метода Заполнить или при интерактивном вводе нового.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - заполняемый документ.
//  ДанныеЗаполнения - Произвольный - значение, которое используется как основание для заполнения.
//  ТекстЗаполнения - Строка, Неопределено - текст, используемый для заполнения документа.
//  СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаЗаполненияДокумента(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	КоммерческиеПредложенияДокументыУТ.ОбработкаЗаполненияДокумента(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецПроцедуры

// Вызывается расширением формы при необходимости проверки заполнения реквизитов при записи или при проведении документа в форме,
// а также при выполнении метода ПроверитьЗаполнение.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - проверяемый документ.
//  Отказ - Булево - признак отказа от проведения документа.
//  ПроверяемыеРеквизиты - Массив из см. УправлениеСвойствами.ОбработкаПроверкиЗаполнения - массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//  МассивНепроверяемыхРеквизитов - Массив из см. УправлениеСвойствами.ОбработкаПроверкиЗаполнения - массив путей к реквизитам, для которых не будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(ДокументОбъект, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов) Экспорт
	
	КоммерческиеПредложенияДокументыУТ.ОбработкаПроверкиЗаполнения(ДокументОбъект, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

// Возникает перед выполнением записи документа. Вызывается после начала транзакции записи, но до начала записи документа.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - записываемый документ,
//  Отказ - Булево - признак отказа от записи,
//  РежимЗаписи - РежимЗаписиДокумента - текущий режим записи документа,
//  РежимПроведения - РежимПроведенияДокумента - текущий режим проведения документа.
//
Процедура ПередЗаписью(ДокументОбъект, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	КоммерческиеПредложенияДокументыУТ.ПередЗаписью(ДокументОбъект, Отказ, РежимЗаписи, РежимПроведения);
	
КонецПроцедуры

// Возникает в транзакции при записи документа.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - записываемый документ,
//  Отказ - Булево - признак отказа от записи
//
Процедура ПриЗаписи(ДокументОбъект, Отказ) Экспорт
	
	КоммерческиеПредложенияДокументыУТ.ПриЗаписи(ДокументОбъект, Отказ);
	
КонецПроцедуры

// Возникает в транзакции при проведении документа.
//
// Параметры:
//  ДокументОбъект  - ДокументОбъект - проводимый документ.
//  Отказ           - Булево - признак отказа от выполнения операции.
//  РежимПроведения - РежимПроведенияДокумента - оперативно или нет.
//
Процедура ОбработкаПроведения(ДокументОбъект, Отказ, РежимПроведения) Экспорт
	
	КоммерческиеПредложенияДокументыУТ.ОбработкаПроведения(ДокументОбъект, Отказ, РежимПроведения);
	
КонецПроцедуры

// Возникает в транзакции при проведении документа.
//
// Параметры:
//  ДокументОбъект  - ДокументОбъект - документ, в котором удаляется проведение.
//  Отказ           - Булево         - признак отказа от выполнения операции.
//
Процедура ОбработкаУдаленияПроведения(ДокументОбъект, Отказ) Экспорт
	
	КоммерческиеПредложенияДокументыУТ.ОбработкаУдаленияПроведения(ДокументОбъект, Отказ);
	
КонецПроцедуры

// Возникает при получении списка текущих дел для документов коммерческих предложений.
//
// Параметры:
//  ТекущиеДела - см. ТекущиеДелаСервер.ТекущиеДела.
//  ИмяДокумента - Строка - имя документа, для которого заполняется список текущих дел.
//
Процедура ПриЗаполненииСпискаТекущихДелКоммерческихПредложений(ТекущиеДела, ИмяДокумента) Экспорт
	
	КоммерческиеПредложенияДокументыУТ.ПриЗаполненииСпискаТекущихДелКоммерческихПредложений(ТекущиеДела, ИмяДокумента);
	
КонецПроцедуры

#КонецОбласти

#Область СерверныеОбработчикиСобытийЭлементовДокументов

// Выполняет действия при изменении номенклатуры в таблице Товары.
//
// Параметры:
//  Форма                   - ФормаКлиентскогоПриложения - Форма, в которой произошло событие.
//  ТекущаяСтрока           - ДанныеФормыЭлементКоллекции - Строка таблицы товаров.
//  ТекущийЭлемент          - Строка - Имя изменившегося поля текущей строки,
//
Процедура ПриИзмененииНоменклатуры(Форма, ТекущаяСтрока, ТекущийЭлемент) Экспорт
	
КонецПроцедуры

// Выполняет действия при изменении характеристики в таблице Товары.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров.
//
Процедура ПриИзмененииХарактеристики(Форма, ТекущаяСтрока) Экспорт
	
КонецПроцедуры

// Выполняет действия при изменении единицы измерения в таблице Товары.
//
// Параметры:
//  Форма          - ФормаКлиентскогоПриложения - Форма, в которой произошло событие.
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - Строка таблицы товаров,
//
Процедура ПриИзмененииЕдиницыИзмерения(Форма, ТекущаяСтрока) Экспорт
	
КонецПроцедуры

// Выполняет действия при изменении количества в таблице Товары.
//
// Параметры:
//  Форма          - ФормаКлиентскогоПриложения - Форма, в которой произошло событие,
//  ТекущаяСтрока  - ДанныеФормыЭлементКоллекции - Строка таблицы товаров.
//
Процедура ПриИзмененииКоличества(Форма, ТекущаяСтрока) Экспорт
	
КонецПроцедуры

// Выполняет действия при изменении цены в таблице Товары.
//
// Параметры:
//  Форма         - ФормаКлиентскогоПриложения - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров.
//
Процедура ПриИзмененииЦены(Форма, ТекущаяСтрока) Экспорт
	
КонецПроцедуры

// Выполняет действия при изменении вида цены в таблице Товары.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров.
//
Процедура ПриИзмененииВидаЦены(Форма, ТекущаяСтрока) Экспорт
	
КонецПроцедуры

// Выполняет действия при изменении суммы в таблице Товары.
//
// Параметры:
//  Форма         - ФормаКлиентскогоПриложения - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров
//
Процедура ПриИзмененииСумма(Форма, ТекущаяСтрока) Экспорт
	
КонецПроцедуры

// Выполняет действия при изменении ставки НДС в таблице Товары.
//
// Параметры:
//  Форма         - ФормаКлиентскогоПриложения - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров
//
Процедура ПриИзмененииСтавкаНДС(Форма, ТекущаяСтрока) Экспорт
	
КонецПроцедуры

// Выполняет действия при изменении суммы НДС в таблице Товары.
//
// Параметры:
//  Форма           - ФормаКлиентскогоПриложения - форма, в которой произошло событие,
//  ТекущаяСтрока   - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  ЦенаВключаетНДС - Булево - признак того, что в цену включен НДС.
//
Процедура ПриИзмененииСуммыНДС(Форма, ТекущаяСтрока, ЦенаВключаетНДС) Экспорт
	
КонецПроцедуры

// Выполняет действия при изменении налогообложения НДС.
//
// Параметры:
//  Форма                   - ФормаКлиентскогоПриложения - форма, в которой произошло событие.
//
Процедура ПриИзмененииНалогообложенияНДС(Форма) Экспорт
	
	КоммерческиеПредложенияДокументыУТ.ПриИзмененииНалогообложенияНДС(Форма);
	
КонецПроцедуры

// Выполняет действия при изменении признака включения НДС в Цену.
//
// Параметры:
//  Форма           - ФормаКлиентскогоПриложения - форма, в которой произошло событие,
//  Налогообложение - Булево - признак того, что продажа или закупка облагаются НДС
//
Процедура ПриИзмененииЦенаВключаетНДС(Форма, Налогообложение) Экспорт
	
	КоммерческиеПредложенияДокументыУТ.ПриИзмененииЦенаВключаетНДС(Форма, Налогообложение);
	
КонецПроцедуры

// Выполняет действия при изменении партнера (клиента или поставщика) в форме документа.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой произошло событие
//
Процедура ПриИзмененииПартнера(Форма) Экспорт
	
	 КоммерческиеПредложенияДокументыУТ.ПриИзмененииПартнера(Форма);
	
КонецПроцедуры

// Выполняет действия при изменении контрагента в форме документа.
//
// Параметры:
//  Форма         - ФормаКлиентскогоПриложения - форма, в которой произошло событие.
//
Процедура ПриИзмененииКонтрагента(Форма) Экспорт
	
КонецПроцедуры

// Выполняет действия при изменении валюты в форме документа.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой произошло событие.
//
Процедура ПриИзмененииВалюты(Форма) Экспорт
	
	КоммерческиеПредложенияДокументыУТ.ПриИзмененииВалюты(Форма);
	
КонецПроцедуры

// Выполняет действия при изменении срока действия коммерческого предложения в форме документа.
//
// Параметры:
//  Форма        - ФормаКлиентскогоПриложения - форма, в которой произошло событие.
//  ТекущаяДата  - Дата - дата выполнения изменения.
//
Процедура ПриИзмененииСрокаДействияКоммерческогоПредложения(Форма, ТекущаяДата) Экспорт
	
КонецПроцедуры

// Выполняет действия при изменении хозяйственной операции в форме документа.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой произошло событие.
//
Процедура ПриИзмененииХозяйственнойОперации(Форма) Экспорт
	
	КоммерческиеПредложенияДокументыУТ.ПриИзмененииХозяйственнойОперации(Форма);
	
КонецПроцедуры

// Выполняет действия при изменении флага может выкупаться частично в форме документа.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой произошло событие.
//
Процедура ПриИзмененииФлагаМожетВыкупатьсяЧастично(Форма) Экспорт
	
КонецПроцедуры

// Выполняет действия при изменении менеджера в форме документа.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой произошло событие.
//
Процедура ПриИзмененииМенеджера(Форма) Экспорт
	
КонецПроцедуры

// Выполняет действия при изменении контактного лица в форме документа.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой произошло событие.
//
Процедура ПриИзмененииКонтактногоЛица(Форма) Экспорт
	
КонецПроцедуры

// Выполняет действия при изменении статуса в форме документа.
//
// Параметры:
//  Форма         - ФормаКлиентскогоПриложения - форма, в которой произошло событие,
//  ТекущаяДата - Дата - дата выполнения изменения.
//
Процедура ПриИзмененииСтатуса(Форма, ТекущаяДата) Экспорт
	
КонецПроцедуры

// Выполняет действия при изменении организации в форме документа.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой произошло событие.
//
Процедура ПриИзмененииОрганизации(Форма) Экспорт
	
	КоммерческиеПредложенияДокументыУТ.ПриИзмененииОрганизации(Форма);
	
КонецПроцедуры

// Выполняет действия при изменении процента ручной скидки в таблице Товары.
//
// Параметры:
//  Форма                   - ФормаКлиентскогоПриложения - форма, в которой произошло событие,
//  ТекущаяСтрока           - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  ЦенаВключаетНДС         - Булево - признак того, что в цену включен НДС,
//  Налогообложение         - Булево - признак того, что продажа или закупка облагаются НДС.
//
Процедура ПриИзмененииПроцентаРучнойСкидки(Форма, ТекущаяСтрока , ЦенаВключаетНДС, Налогообложение) Экспорт
	
КонецПроцедуры

// Выполняет действия при изменении суммы ручной скидки в таблице Товары.
//
// Параметры:
//  Форма           - ФормаКлиентскогоПриложения - форма, в которой произошло событие
//  ТекущаяСтрока   - ДанныеФормыЭлементКоллекции - строка таблицы товаров
//  ЦенаВключаетНДС - Булево - признак того, что в цену включен НДС
//  Налогообложение - Булево - признак того, что продажа или закупка облагаются НДС
//
Процедура ПриИзмененииСуммыРучнойСкидки(Форма, ТекущаяСтрока , ЦенаВключаетНДС, Налогообложение) Экспорт
	
КонецПроцедуры

// Серверный обработчик события выбора в табличной части "Товары" документа "Коммерческое предложение клиента"
//
// Параметры:
//  Форма              - ФормаКлиентскогоПриложения - форма, в которой выполнена команда.
//  ИмяПоля            - Строка - имя поля табличной части, в котором произошло событие.
//  РезультатОбработки - Произвольный     - можно поместить произвольные данные для дальнейшей обработки на клиенте.
//
Процедура ТоварыВыборСервер(Форма, ИмяПоля, РезультатОбработки) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

// Обработчик события ПриЗаполненииВидовОграниченийПравОбъектовМетаданных подсистемы "Управление доступом".
//
// Параметры:
//  ИмяОбъекта - Строка - имя объекта, в котором произошло событие.
//  Описание   - см. УправлениеДоступомПереопределяемый.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных.Описание
//
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(ИмяОбъекта, Описание) Экспорт
	
	КоммерческиеПредложенияДокументыУТ.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(ИмяОбъекта, Описание);
	
КонецПроцедуры

// Обработчик события ПриЗаполненииОграниченияДоступа подсистемы "Управление доступом"
//
// Параметры:
//  ИмяОбъекта - Строка - имя объекта, в котором произошло событие
//  Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(ИмяОбъекта, Ограничение) Экспорт
	
	КоммерческиеПредложенияДокументыУТ.ПриЗаполненииОграниченияДоступа(ИмяОбъекта, Ограничение);
	
КонецПроцедуры

#КонецОбласти

#Область Скидки

// Серверный обработчик команды "Рассчитать скидки" документа "Коммерческое предложение клиента"
//
// Параметры:
//  Форма              - ФормаКлиентскогоПриложения - форма, в которой выполнена команда
//  РезультатОбработки - Произвольный - можно поместить произвольные данные для дальнейшей обработки на клиенте
//
Процедура РассчитатьСкидкиНаСервере(Форма, РезультатОбработки) Экспорт
	
	КоммерческиеПредложенияДокументыУТ.РассчитатьСкидкиНаСервере(Форма, РезультатОбработки);
	
КонецПроцедуры

// Серверный обработчик команды "Показать информацию о скидках" документа "Коммерческое предложение клиента"
//
// Параметры:
//  Форма              - ФормаКлиентскогоПриложения - форма, в которой выполнена команда
//  РезультатОбработки - Произвольный     - можно поместить произвольные данные для дальнейшей обработки на клиенте
//
Процедура ПодготовитьОткрытиеИнформацииОСкидкахНаСервере(Форма, РезультатОбработки) Экспорт
	
	КоммерческиеПредложенияДокументыУТ.ПодготовитьОткрытиеИнформацииОСкидкахНаСервере(Форма, РезультатОбработки);
	
КонецПроцедуры

// Серверный обработчик команды "Отменить ручные скидки" документа "Коммерческое предложение клиента"
//
// Параметры:
//  Форма              - ФормаКлиентскогоПриложения - форма, в которой выполнена команда
//  РезультатОбработки - Произвольный     - можно поместить произвольные данные для дальнейшей обработки на клиенте
//
Процедура ПриОтменеРучныхСкидокНаСервере(Форма, РезультатОбработки) Экспорт
	
	КоммерческиеПредложенияДокументыУТ.ПриОтменеРучныхСкидокНаСервере(Форма, РезультатОбработки);
	
КонецПроцедуры

// Серверный обработчик команды "Назначить ручные скидки" документа "Коммерческое предложение клиента"
//
// Параметры:
//  Форма              - ФормаКлиентскогоПриложения - форма, в которой выполнена команда
//  РезультатОбработки - Произвольный     - можно поместить произвольные данные для дальнейшей обработки на клиенте
//
Процедура ПриНазначенииРучнойСкидкиНаСервере(Форма, РезультатОбработки) Экспорт
	
	КоммерческиеПредложенияДокументыУТ.ПриНазначенииРучнойСкидкиНаСервере(Форма, РезультатОбработки);
	
КонецПроцедуры

// Серверный обработчик после выбора ручной скидки на сервере
//
// Параметры:
//  Форма                   - ФормаКлиентскогоПриложения - форма, в которой выполнена команда
//  ВыделенныеСтроки        - Массив из СтрокаТабличнойЧасти - выделенные строки табличной части "Товары", для которых применяются скидки
//  РезультатОбработки      - Произвольный - можно поместить произвольные данные для дальнейшей обработки на клиенте
//  ДополнительныеПараметры - Структура    - параметры выполнения команды
//
Процедура ПослеНазначенияРучнойСкидкиНаСервере(Форма, ВыделенныеСтроки, РезультатОбработки, ДополнительныеПараметры) Экспорт
	
	КоммерческиеПредложенияДокументыУТ.ПослеНазначенияРучнойСкидкиНаСервере(Форма, ВыделенныеСтроки, РезультатОбработки, ДополнительныеПараметры);
	
КонецПроцедуры

// Серверный обработчик команды "Назначить автоматические скидки" документа "Коммерческое предложение клиента"
//
// Параметры:
//  Форма     - ФормаКлиентскогоПриложения - форма, в которой выполнена команда
//  Результат - Произвольный - можно поместить произвольные данные для дальнейшей обработки на клиенте
//
Процедура ПриНазначенииАвтоматическихСкидокНаСервере(Форма, Результат) Экспорт
	
	КоммерческиеПредложенияДокументыУТ.ПриНазначенииАвтоматическихСкидокНаСервере(Форма, Результат);
	
КонецПроцедуры

// Серверный обработчик после назначения автоматических скидок
//
// Параметры:
//  Форма                   - ФормаКлиентскогоПриложения - форма, в которой выполнена команда
//  Результат               - Произвольный     - можно поместить произвольные данные для дальнейшей обработки на клиенте
//  ДополнительныеПараметры - Структура        - параметры выполнения команды
//
Процедура ПослеНазначенияАвтоматическойСкидкиНаСервере(Форма, Результат, ДополнительныеПараметры) Экспорт
	
	КоммерческиеПредложенияДокументыУТ.ПослеНазначенияАвтоматическойСкидкиНаСервере(Форма, Результат, ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область ИнтеграцияШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона:
//         * Имя            - Строка - Уникальное имя общего реквизита.
//         * Представление  - Строка - Представление общего реквизита.
//         * Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         * Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения:
//         * Имя            - Строка - Уникальное имя вложения.
//         * Представление  - Строка - Представление варианта.
//         * ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl"
//                                      и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие из КлючИЗначение- список используемых в шаблоне реквизитов:
//      * Ключ     - Строка - имя реквизита в шаблоне;
//      * Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие из КлючИЗначение - список используемых в шаблоне общих реквизитов:
//      * Ключ     - Строка - имя реквизита в шаблоне;
//      * Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие из КлючИЗначение - значения реквизитов
//      * Ключ     - Строка - имя вложения в шаблоне;
//      * Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS:
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - СправочникСсылка - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма:
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * ВариантОтправки - Строка - Варианты отправки письма: "Кому", "Копия", "СкрытаяКопия", "ОбратныйАдреса";
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
КонецПроцедуры

#КонецОбласти

// Серверный обработчик переопределяемой команды документа "Коммерческое предложение клиента"
//
// Параметры:
//  Форма              - ФормаКлиентскогоПриложения - форма, в которой выполнена команда,
//  ИмяКоманды         - Строка - форма, имя выполненной команды,
//  РезультатОбработки - Произвольный     - можно поместить произвольные данные для дальнейшей обработки на клиенте.
//
Процедура ПриВыполненииПереопределяемойКоманды(Форма, ИмяКоманды, РезультатОбработки) Экспорт
	
	КоммерческиеПредложенияДокументыУТ.ПриВыполненииПереопределяемойКоманды(Форма, ИмяКоманды, РезультатОбработки);
	
КонецПроцедуры

// Обработчик события ПриДобавленииКомандОтчетов подсистемы "Подключаемые команды"
//
// Параметры:
//  ИмяОбъекта - Строка - имя объекта, в котором произошло событие,
//  КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//      См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//  Параметры - Структура - Вспомогательные параметры. Для чтения.
//      См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ПриДобавленииКомандОтчетов(ИмяОбъекта, КомандыОтчетов, Параметры) Экспорт
	
	КоммерческиеПредложенияДокументыУТ.ПриДобавленииКомандОтчетов(ИмяОбъекта, КомандыОтчетов, Параметры);
	
КонецПроцедуры

// Обрабатывает успешное сканирование штрихового кода в таблице Товары.
//
// Параметры:
//  Форма              - ФормаКлиентскогоПриложения - форма, в которой производится подбор,
//  ДанныеШтрихкода    - Произвольный - данные отсканированного штрихкода,
//  РезультатОбработки - Произвольный - в данное значение требуется поместить результат обработки, для дальнейших
//    действий на клиенте.
//
Процедура ОбработатьВводШтрихкода(Форма, ДанныеШтрихкода, РезультатОбработки) Экспорт
	
	КоммерческиеПредложенияДокументыУТ.ОбработатьВводШтрихкода(Форма, ДанныеШтрихкода, РезультатОбработки);
	
КонецПроцедуры

// Заполняет табличную часть Товары подобранными товарами.
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой производится подбор.
//  ВыбранноеЗначение - Произвольный - данные, содержащие подобранную пользователем номенклатуру.
//  ДополнительныеПараметры - Структура, Неопределено - дополнительные параметры обработки.
//  РезультатОбработки - Произвольный - можно поместить произвольные данные для дальнейшей обработки на клиенте.
//
Процедура ОбработкаРезультатаПодбораНоменклатуры(Форма, ВыбранноеЗначение, ДополнительныеПараметры, РезультатОбработки) Экспорт
	
	КоммерческиеПредложенияДокументыУТ.ОбработкаРезультатаПодбораНоменклатуры(Форма, ВыбранноеЗначение, ДополнительныеПараметры, РезультатОбработки);
	
КонецПроцедуры

// Заполняет табличную часть Товары товарами, полученными из внешнего файла данных.
// Параметры:
//  Форма     - ФормаКлиентскогоПриложения - форма, в которой производится заполнение,
//  Результат - Произвольный - данные из файла.
//
Процедура ЗагрузитьПолученныеИзВнешнегоФайлаДанные(Форма, Результат) Экспорт
	
	КоммерческиеПредложенияДокументыУТ.ЗагрузитьПолученныеИзВнешнегоФайлаДанные(Форма, Результат);
	
КонецПроцедуры

// Предназначена для переноса таблицы товаров, сформированной при обработке данных ТСД.
//
// Параметры:
//  Форма              - ФормаКлиентскогоПриложения - форма, в которую производилась загрузка данных ТСД,
//  ТаблицаТоваров     - Произвольный - содержит данные о товарах, сформированные по данным ТСД,
//  РезультатОбработки - Произвольный - в данное значение требуется поместить результат обработки
//    для дальнейших действий на клиенте.
//
Процедура ОбработатьПолученныеДанныеТСД(Форма, ТаблицаТоваров, РезультатОбработки) Экспорт
	
	КоммерческиеПредложенияДокументыУТ.ОбработатьПолученныеДанныеТСД(Форма, ТаблицаТоваров, РезультатОбработки);
	
КонецПроцедуры

// Предназначена для заполнения цен по выбранному виду цены для выделенных строк табличной части
// товары документа "Коммерческое предложение клиенту".
//
// Параметры:
//  Форма                   - ФормаКлиентскогоПриложения - форма, в которой требуется заполнить цены по виду цен.
//  ВидЦены                 - ОпределяемыйТип.ВидЦеныКоммерческихПредложений - выбранный вид цены.
//  ДополнительныеПараметры - Структура - дополнительные параметры обработки.
//
Процедура ЗаполнитьЦеныПоВидуЦен(Форма, ВидЦены, ДополнительныеПараметры) Экспорт
	
	КоммерческиеПредложенияДокументыУТ.ЗаполнитьЦеныПоВидуЦен(Форма, ВидЦены, ДополнительныеПараметры);
	
КонецПроцедуры

// Предназначена для заполнения цен по выбранному условию продаж для выделенных строк табличной части
// товары документа "Коммерческое предложение клиенту".
//
// Параметры:
//  Форма                   - ФормаКлиентскогоПриложения - форма, в которой требуется заполнить цены по виду цен,
//  УсловиеПродаж           - Произвольный     - выбранное условие продажи,
//  ДополнительныеПараметры - Структура        - дополнительные параметры обработки.
//
Процедура ЗаполнитьЦеныПоУсловиюПродаж(Форма, УсловиеПродаж, ДополнительныеПараметры) Экспорт
	
	КоммерческиеПредложенияДокументыУТ.ЗаполнитьЦеныПоУсловиюПродаж(Форма, УсловиеПродаж, ДополнительныеПараметры);
	
КонецПроцедуры

// Получение данных по номенклатуре для формирования дерева ЭДО.
//
// Параметры:
//   СписокНоменклатур - Массив из ОпределяемыйТип.НоменклатураБЭД - список номенклатуры для которой требуется расшифровка
//   ЗначенияПолейТоваров - Соответствие из КлючИЗначение - Значения полей элементов номенклатуры:
//     * Ключ     - Произвольный - Значение элемента массива
//     * Значение - Структура    - Значение полей требуемых заполнить:
//        ** НоменклатураСсылка       - ОпределяемыйТип.НоменклатураБЭД - ссылка на номенклатуру из массива 'СписокНоменклатур'
//        ** НоменклатураНаименование - Строка - представление номенклатуры
//
Процедура ЗаполнитьДанныеНоменклатуры(Знач СписокНоменклатур, ЗначенияПолейТоваров) Экспорт
	
	КоммерческиеПредложенияДокументыУТ.ЗаполнитьДанныеНоменклатуры(СписокНоменклатур, ЗначенияПолейТоваров);
	
КонецПроцедуры

// Получение данных по характеристикам номенклатуры для формирования дерева ЭДО.
//
// Параметры:
//  СписокХарактеристик - Массив из ОпределяемыйТип.ХарактеристикаНоменклатурыБЭД - Список характеристик номенклатуры для которой требуется расшифровка
//  ЗначенияПолейХарактеристик - Соответствие из КлючИЗначение - Значения полей элементов массива Характеристики. Содержит свойства:
//    * Ключ     - Произвольный - Значение элемента массива
//    * Значение - Структура    - Значение полей требуемых заполнить.Содержит свойства:
//        ** ХарактеристикаСсылка       - ОпределяемыйТип.ХарактеристикаНоменклатурыБЭД - ссылка на характеристику из массива 'СписокХарактеристик'
//        ** ХарактеристикаНаименование - Строка - представление характеристики номенклатуры
//
Процедура ЗаполнитьДанныеХарактеристикНоменклатуры(Знач СписокХарактеристик, ЗначенияПолейХарактеристик) Экспорт
	
	КоммерческиеПредложенияДокументыУТ.ЗаполнитьДанныеХарактеристикНоменклатуры(СписокХарактеристик, ЗначенияПолейХарактеристик);
	
КонецПроцедуры

// Получение данных по единицам измерения для формирования дерева ЭДО.
//
// Параметры:
//  СписокЕдиницИзмерения - Массив из ОпределяемыйТип.УпаковкаНоменклатурыБЭД - Список единиц измерения для которой требуется расшифровка
//  ЗначенияПолей - Соответствие из КлючИЗначение - Значения полей элементов массива ЕдиницыИзмерения. Содержит свойства:
//   * Ключ     - Произвольный - Значение элемента массива
//   * Значение - Структура    - Значение полей требуемых заполнить:
//      ** ЕдиницаИзмеренияСсылка            - ОпределяемыйТип.УпаковкаНоменклатурыБЭД - ссылка на единицу измерения
//      ** ЕдиницаИзмеренияКодОКЕИ           - Строка - код ОКЕИ единицы измерения
//      ** ЕдиницаИзмеренияНаименование      - Строка - представление единицы измерения
//      ** ЛогистическаяУпаковкаНаименование - Строка - представление логистической упаковки
//      ** Числитель                         - Число  - числитель
//      ** Знаменатель                       - Число  - знаменатель
//
Процедура ЗаполнитьДанныеЕдиницИзмерения(Знач СписокЕдиницИзмерения, ЗначенияПолей) Экспорт
	
	КоммерческиеПредложенияДокументыУТ.ЗаполнитьДанныеЕдиницИзмерения(СписокЕдиницИзмерения, ЗначенияПолей);
	
КонецПроцедуры

// Получение данных по единицам измерения для формирования дерева ЭДО.
//
// Параметры:
//  СписокНоменклатур	- ТаблицаЗначений - Список полей для получения штрихкодов. Содержит колонки:
//   * Номенклатура     - ОпределяемыйТип.НоменклатураБЭД - номенклатура
//   * Характеристика   - ОпределяемыйТип.ХарактеристикаНоменклатурыБЭД - характеристика номенклатуры
//   * ЕдиницаИзмерения - ОпределяемыйТип.УпаковкаНоменклатурыБЭД - единица измерения
//   * Штрихкод         - Строка - штрихкод
//
Процедура ЗаполнитьДанныеШтрихКодовНоменклатуры(СписокНоменклатур) Экспорт
	
	КоммерческиеПредложенияДокументыУТ.ЗаполнитьДанныеШтрихКодовНоменклатуры(СписокНоменклатур);
	
КонецПроцедуры

// Получение данных о Партнере по контрагенту.
//
// Параметры:
//  Контрагент - ОпределяемыйТип.КонтрагентБЭД - ссылка на контрагента.
//  Партнер    - ОпределяемыйТип.ПартнерБЭД - ссылка на партнера.
//
Процедура ПолучитьПартнераПоКонтрагенту(Знач Контрагент, Партнер) Экспорт
	КоммерческиеПредложенияДокументыУТ.ПолучитьПартнераПоКонтрагенту(Контрагент, Партнер);
КонецПроцедуры

// Возможность реализовать заполнение реквизита Контактное лицо документа, по переданным данным контактного лица.
//
// Параметры:
//  Контрагент             - ОпределяемыйТип.КонтрагентБЭД - контрагент документа.
//  ДанныеКонтактногоЛица  - Структура - содержит следующие поля:
//    * ФИО              - Строка - фамилия, имя и отчество.
//    * ЭлектроннаяПочта - Строка - адрес электронной почты.
//    * Телефон          - Строка - номер телефона.
//  КонтактноеЛицо         - ОпределяемыйТип.КонтактноеЛицоКоммерческихПредложений - контактное лицо документа.
//
Процедура ЗаполнитьКонтактноеЛицоДокументаПоДаннымЭлектронногоДокумента(Контрагент, ДанныеКонтактногоЛица, КонтактноеЛицо) Экспорт
	
	КоммерческиеПредложенияДокументыУТ.ЗаполнитьКонтактноеЛицоДокументаПоДаннымЭлектронногоДокумента(Контрагент, ДанныеКонтактногоЛица, КонтактноеЛицо);
	
КонецПроцедуры

// Формирует структуру, описывающая данные организации или контрагента.
//
// Параметры:
//  Участник        - ОпределяемыйТип.Организация, ОпределяемыйТип.КонтрагентБЭД - одна из сторон коммерческого предложения.
//  ДанныеУчастника - Структура - данные участника коммерческих предложений для помещения в дерево:
//   * Ссылка           - ОпределяемыйТип.Организация, ОпределяемыйТип.КонтрагентБЭД - ссылка на элемент справочника.
//   * Наименование     - Строка - наименование контрагента или организации.
//   * ЮридическийАдрес - Строка - юридический адрес контрагента или организации.
//   * Вид              - Структура - если это индивидуальный предприниматель то "ИНН, Имя, Фамилия, Отчество",
//                                     если ЮридическоеЛицо то "ИНН, КПП".
//
Процедура ДанныеУчастникаКоммерческихПредложений(Знач Участник, ДанныеУчастника) Экспорт
	
	КоммерческиеПредложенияДокументыУТ.ДанныеУчастникаКоммерческихПредложений(Участник, ДанныеУчастника);
	
КонецПроцедуры

// Заполняет представление адреса и код ФИАС по определяемому типу СкладыКоммерческихПредложений.
//
// Параметры:
//  Склад        - ОпределяемыйТип.СкладыКоммерческихПредложений - ссылка на склад.
//  ДанныеАдреса - Структура - данные участника коммерческих предложений для помещения в дерево:
//   * Представление - Строка - текстовое представление адреса.
//   * Код           - Строка - идентификатор ФИАС.
//
Процедура ЗаполнитьАдресПоСкладу(Знач Склад, ДанныеАдреса) Экспорт
	
	КоммерческиеПредложенияДокументыУТ.ЗаполнитьАдресПоСкладу(Склад, ДанныеАдреса);
	
КонецПроцедуры

// Позволяет изменить получение единицы измерения если в прикладной логике
// единица измерения может быть заполнена не всегда.
//
// Параметры:
//  ТекстЗапроса - Строка - текст запроса получения единицы измерения, по умолчанию "Товары.ЕдиницаИзмерения".
//
Процедура ПолучитьТекстЗапросаПолученияЕдиницыИзмерения(ТекстЗапроса) Экспорт
	
	КоммерческиеПредложенияДокументыУТ.ПолучитьТекстЗапросаПолученияЕдиницыИзмерения(ТекстЗапроса);
	
КонецПроцедуры

// Позволяет переопределить заполнение макета "Сравнение запрошено предложено" в документах
//	"Коммерческое предложение поставщика" и "Коммерческое предложение клиенту".
//
// Параметры:
//  Параметры  - Структура - параметры заполнения макета
//  ДанныеПоСтрокеЗапроса  - ДанныеФормыЭлементКоллекции - данные строки Запрошено.
//  ДанныеТекущейСтроки    - ДанныеФормыЭлементКоллекции - данные строки Предложено.
//
Процедура ПриЗаполненииПараметровСравненияЗапрошеноПредложено(Параметры, ДанныеПоСтрокеЗапроса, ДанныеТекущейСтроки) Экспорт
	
	КоммерческиеПредложенияДокументыУТ.ПриЗаполненииПараметровСравненияЗапрошеноПредложено(Параметры, ДанныеПоСтрокеЗапроса, ДанныеТекущейСтроки);
	
КонецПроцедуры

// Позволяет определить дополнительные действия после добавления строк из запроса коммерческих предложений по команде
// в форме документа "Коммерческое предложение клиенту".
//
// Параметры:
//  Форма                                 - ФормаКлиентскогоПриложения - форма, в которой произошло событие,
//  МассивИдентификаторовДобавленныхСтрок - Массив из Строка - указывает на добавленные строки.
//
Процедура ПослеДобавленияСтрокИзЗапросаВКоммерческомПредложениеКлиенту(Форма, МассивИдентификаторовДобавленныхСтрок) Экспорт
	
	КоммерческиеПредложенияДокументыУТ.ПослеДобавленияСтрокИзЗапросаВКоммерческомПредложениеКлиенту(Форма, МассивИдентификаторовДобавленныхСтрок);
	
КонецПроцедуры

// Предназначена для организации вывода штрихового кода в печатную форму документа.
//
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент - табличный документ, в котором формируется печатная форма документа.
//  Макет             - ТабличныйДокумент - макет, который используется для формирования печатной формы.
//  ОбластьМакета     - ТабличныйДокумент - область макета табличного документа, в котором находится картинка,
//                                          в которую будет выведен штриховой код документа.
//  ДанныеПечати      - Структура - содержит данные печатаемого объекта.
//
Процедура ПриВыводеШтриховогоКодаВПечатныеФормы(ТабличныйДокумент, Макет, ОбластьМакета, ДанныеПечати) Экспорт
	
	КоммерческиеПредложенияДокументыУТ.ПриВыводеШтриховогоКодаВПечатныеФормы(ТабличныйДокумент, Макет, ОбластьМакета, ДанныеПечати);
	
КонецПроцедуры

// Позволяет переопределить вывод заголовка печатной формы документа "Коммерческое предложение клиенту"
//
// Параметры:
//  Макет         - ТабличныйДокумент - макет печатной формы,
//  ОбластьМакета - ТабличныйДокумент - область макета, содержащая заголовок печатной формы.
//  ДанныеОбъекта - Структура - содержит данные документа.
//
Процедура ПриФормированииЗаголовкаПечатнойФормы(Макет, ОбластьМакета, ДанныеОбъекта) Экспорт
	
	КоммерческиеПредложенияДокументыУТ.ПриФормированииЗаголовкаПечатнойФормы(Макет, ОбластьМакета, ДанныеОбъекта);
	
КонецПроцедуры

// Позволяет дополнить данные при печати для строки табличной части Товары
//
// Параметры:
//  СтрокаТаблицыТовары - Структура - данные печати для строки.
//  СтрокаТовары        - СтрокаТаблицыЗначений - строка с данными для формирования данных печати
//  ДанныеОбъекта       - Структура - содержит данные документа.
//
Процедура ДополнитьДанныеОбъектаДляПечати(СтрокаТаблицыТовары, СтрокаТовары, ДанныеОбъекта) Экспорт
	
	КоммерческиеПредложенияДокументыУТ.ДополнитьДанныеОбъектаДляПечати(СтрокаТаблицыТовары, СтрокаТовары, ДанныеОбъекта);
	
КонецПроцедуры

// Позволяет переопределить формирование структуры данных печати в документе "Коммерческое предложение клиенту"
//
// Параметры:
//  МассивОбъектов           - Массив из ДокументСсылка - объекты печати.
//  СтруктураДанныхДляПечати - Неопределено - сюда требуется поместить сформированные данные в виде структуры.
//  ПараметрыПечати          - Структура - параметры печати.
//  СтандартнаяОбработка     - Булево - необходимо установить в Ложь, если выполняется переопределение.
//
Процедура КоммерческоеПредложениеКлиентуПриФормированииСтруктурыДанныхПечати(МассивОбъектов, СтруктураДанныхДляПечати, ПараметрыПечати, СтандартнаяОбработка) Экспорт
	
	КоммерческиеПредложенияДокументыУТ.КоммерческоеПредложениеКлиентуПриФормированииСтруктурыДанныхПечати(
		МассивОбъектов,
		СтруктураДанныхДляПечати,
		ПараметрыПечати,
		СтандартнаяОбработка);
	
КонецПроцедуры

// Позволяет переопределить вывод строки табличной части товары в документе "Коммерческое предложение клиенту"
//
// Параметры:
//  ТабличныйДокумент              - ТабличныйДокумент - в который осуществляется вывод.
//  СтрокаТовары                   - СтрокаТаблицыЗначений - строка с данными для формирования данных печати.
//  ОбластьСтрокаТаблицыТовары     - ТабличныйДокумент - область строки таблицы товаров.
//  ИменованнаяОбластьСтрокаТовары - Строка - имя области в которую осуществляется вывод.
//  ДополнительныеПараметрыВывода  - Неопределено - предоставляет возможность сохранять данные при нескольких вызовах данной процедуры.
//  СтандартнаяОбработка           - Булево - необходимо установить в Ложь, если выполняется переопределение.
//
Процедура ПриВыводеСтрокиТоварыПечатнуюФорму(ТабличныйДокумент, СтрокаТовары, ОбластьСтрокаТаблицыТовары, ИменованнаяОбластьСтрокаТовары, ДополнительныеПараметрыВывода, СтандартнаяОбработка) Экспорт
	
	КоммерческиеПредложенияДокументыУТ.ПриВыводеСтрокиТоварыПечатнуюФорму(ТабличныйДокумент, 
	                                                                      СтрокаТовары, 
	                                                                      ОбластьСтрокаТаблицыТовары, 
	                                                                      ИменованнаяОбластьСтрокаТовары, 
	                                                                      ДополнительныеПараметрыВывода, 
	                                                                      СтандартнаяОбработка);
	
КонецПроцедуры

// Получает данные об организации по ссылке.
//
// Параметры:
//  Организация - ОпределяемыйТип.Организация - ссылка на элемент справочника, по которому получаются данные.
//  Сведения - Структура - возвращаемые данные:
//   * ПолноеНаименование      - Строка - полное наименование.
//   * Наименование            - Строка - наименование.
//   * ЮридическийАдрес        - Строка - представление юридического адреса.
//   * Телефоны                - Строка - представление телефонов.
//   * ЭлектроннаяПочта        - Строка - представление электронной почты.
//
Процедура ЗаполнитьДанныеОрганизации(Знач Организация, Сведения) Экспорт

	КоммерческиеПредложенияДокументыУТ.ЗаполнитьДанныеОрганизации(Организация, Сведения);
	
КонецПроцедуры

#Область КомандыФормы

// Инициализация команд формы.
// Используется для реализации прикладной логики управления командами формы.
//
// Параметры:
//  ИмяСобытия - Строка - ключ имени события, например "ДобавитьКомандуСоздатьНаОсновании".
//  ИмяОбъекта - Строка - имя объекта метаданных, например "РеализацияТоваровУслуг".
//  Контекст   - Произвольный - контекст инициализации.
//  Результат  - Произвольный - возвращаемый результат.
//  Параметры  - Произвольный - параметры инициализации.
//
Процедура ИнициализацияКомандФормы(ИмяСобытия, ИмяОбъекта, Контекст, Результат = Неопределено, Параметры = Неопределено) Экспорт
	
	КоммерческиеПредложенияДокументыУТ.ИнициализацияКомандФормы(ИмяСобытия, ИмяОбъекта, Контекст, Результат, Параметры);
	
КонецПроцедуры

#КонецОбласти

#Область КопированиеСтрок

// Позволяет переопределить действия при вставки строк из буфера обмена в документе "Коммерческое предложение клиенту".
// 
// Параметры:
//  Форма                - ФормаКлиентскогоПриложения - форма документа, в который были вставлены строки из буфера обмена.
//  КоличествоСтрок      - Число                      - в случае переопределения требуется поместить информацию о скопированном количестве строк.
//  СтандартнаяОбработка - Булево                     - требуется установить в Ложь, если выполнено переопределение. 
//
Процедура ПриВставкеСтрокИзБуфераОбмена(Форма, КоличествоСтрок, СтандартнаяОбработка) Экспорт
	
	КоммерческиеПредложенияДокументыУТ.ПриВставкеСтрокИзБуфераОбмена(Форма, КоличествоСтрок, СтандартнаяОбработка);
	
КонецПроцедуры

// Позволяет переопределить действия при копировании строк в буфер обмена в документе "Коммерческое предложение клиенту".
// 
// Параметры:
//  Форма                - ФормаКлиентскогоПриложения - форма документа, из которой копируются строки из буфера обмена.
//  ТабличнаяЧасть       - ДанныеФормыСтруктура       - табличная часть, из которой копируются строки.
//  ВыделенныеСтроки     - Массив из СтрокаТабличнойЧасти - копируемые строки.
//  ИмяТабличнойЧасти    - Строка                     - имя табличной части.
//  СтандартнаяОбработка - Булево                     - требуется установить в Ложь, если выполнено переопределение. 
//
Процедура ПриКопированииСтрокВБуферОбмена(Форма, ТабличнаяЧасть, ВыделенныеСтроки, ИмяТабличнойЧасти, СтандартнаяОбработка) Экспорт
	
	КоммерческиеПредложенияДокументыУТ.ПриКопированииСтрокВБуферОбмена(Форма, ТабличнаяЧасть, ВыделенныеСтроки, ИмяТабличнойЧасти, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
