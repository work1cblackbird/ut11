#Область ПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//++ Локализация

// Возвращает признак того, что данный вид документа может формировать задания в регистры сведений вида "ЗаданиеК..."
//
// Параметры:
// 	ИмяДокумента - Строка - имя метаданных документа.
//
// Возвращаемое значение:
//	Булево - признак возможности формрования заданий
//
Функция ДокументМожетФормироватьЗадания(ИмяДокумента) Экспорт
	
	Если ЭтоДокументИсключениеДляФормированияЗаданий(ИмяДокумента) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТипДокумента = Тип("ДокументСсылка." + ИмяДокумента);
	
	
	МетаДвижения 	= Метаданные.Документы[ИмяДокумента].Движения;
	ИсточникиДанных = ЗакрытиеМесяцаЛокализация.ИсточникиДанныхДляЗаданийЗакрытияМесяца();
	
	Для Каждого КлючИЗначение Из ИсточникиДанных Цикл
		Если МетаДвижения.Содержит(КлючИЗначение.Ключ) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Содержит перечень документов, имеющих движения по регистрам, формирующим задания к расчету,
// но не использующих стандартную механику проведения документов.
//
Функция ЭтоДокументИсключениеДляФормированияЗаданий(ИмяДокумента)
	
	ДокументыИсключение = Новый Структура;
	ДокументыИсключение.Вставить(Метаданные.Документы.РасчетСебестоимостиТоваров.Имя);
	ДокументыИсключение.Вставить(Метаданные.Документы.КорректировкаРегистров.Имя);
	
	Возврат ДокументыИсключение.Свойство(ИмяДокумента);
	
КонецФункции

// Проверяет вхождение регистра в перечень контрольных регистров, используемых для формирования заданий к закрытию месяца.
//
// Параметры:
//	ИмяТаблицы - Строка - имя таблицы источника данных
//
// Возвращаемое значение:
//	Строка - текст ошибки проверки; если ошибок нет, то возвращается пустая строка.
//
Функция ПроверитьВхождениеИсточникаДанныхВКонтрольныеРегистрыДляЗаданийЗакрытияМесяца(ИмяТаблицы) Экспорт
	
	ИмяРегистра = "";
	МетаРегистр = Неопределено;
	ТекстОшибки = "";
	
	Если СтрНачинаетсяС(ИмяТаблицы, "ТаблицаИзменений") = 1 Тогда
		ИмяРегистра = Сред(ИмяТаблицы, СтрДлина("ТаблицаИзменений" + 1));
	ИначеЕсли СтрЗаканчиваетсяНа(ИмяТаблицы, "Изменение") Тогда
		ИмяРегистра = Лев(ИмяТаблицы, СтрДлина(ИмяТаблицы) - СтрДлина("Изменение"));
	ИначеЕсли СтрЗаканчиваетсяНа(ИмяТаблицы, "Изменения") Тогда
		ИмяРегистра = Лев(ИмяТаблицы, СтрДлина(ИмяТаблицы) - СтрДлина("Изменения"));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяРегистра) Тогда
		Если Метаданные.РегистрыСведений.Найти(ИмяРегистра) <> Неопределено Тогда
			МетаРегистр = Метаданные.РегистрыСведений[ИмяРегистра];
		ИначеЕсли Метаданные.РегистрыНакопления.Найти(ИмяРегистра) <> Неопределено Тогда
			МетаРегистр = Метаданные.РегистрыНакопления[ИмяРегистра];
		КонецЕсли;
	КонецЕсли;
	
	Если МетаРегистр = Неопределено Тогда
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не удалось определить имя контрольного регистра по имени таблицы: %1'"),
			ИмяТаблицы);
		
	Иначе
		
		КонтрольныеРегистры = ЗакрытиеМесяцаЛокализация.ИсточникиДанныхДляЗаданийЗакрытияМесяца();
		
		Если КонтрольныеРегистры.Получить(МетаРегистр) = Неопределено Тогда
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1 не входит в перечень контрольных регистров для формирования заданий к закрытию месяца (см. %2)'"),
				МетаРегистр.ПолноеИмя(),
				"ЗакрытиеМесяцаЛокализация.ИсточникиДанныхДляЗаданийЗакрытияМесяца");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции

//-- Локализация

// Блокировка закрытия месяца обработчиками обновления.
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//	 * Ключ - Строка - процедура обработчика обновления
//	 * Значение - Булево - признак блокировки закрытия месяца
Функция БлокировкаЗакрытияМесяцаОбработчикамиОбновления() Экспорт
	
	ОбработчикиОбновления = Новый Соответствие;
	
	// Не влияют на закрытие месяца
	Обработчики = ЗакрытиеМесяцаСервер.ОбработчикиОбновленияНеВлияющиеНаЗакрытиеМесяца();
	Для НомерСтроки = 1 По СтрЧислоСтрок(Обработчики) Цикл
		
		ИмяОбработчика = СтрПолучитьСтроку(Обработчики, НомерСтроки);
		ИмяОбработчика = СокрЛП(СтрЗаменить(ИмяОбработчика, ",", ""));
		
		Если ПустаяСтрока(ИмяОбработчика) Тогда
			Продолжить;
		КонецЕсли;
		
		ОбработчикиОбновления.Вставить(НРег(ИмяОбработчика), Ложь);
		
	КонецЦикла;
		
	// Блокируют закрытие месяца
	Обработчики = ЗакрытиеМесяцаСервер.ОбработчикиОбновленияБлокирующиеЗакрытиеМесяца();
	Для НомерСтроки = 1 По СтрЧислоСтрок(Обработчики) Цикл
		
		ИмяОбработчика = СтрПолучитьСтроку(Обработчики, НомерСтроки);
		ИмяОбработчика = СокрЛП(СтрЗаменить(ИмяОбработчика, ",", ""));
		
		Если ПустаяСтрока(ИмяОбработчика) Тогда
			Продолжить;
		КонецЕсли;
		
		ОбработчикиОбновления.Вставить(НРег(ИмяОбработчика), Истина);
		
	КонецЦикла;
		
	Возврат ОбработчикиОбновления;
	
КонецФункции

#КонецОбласти
