#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработкаСобытий

#Область КонтрольДоступа

// См. ЭлектронноеВзаимодействие.ПриЗаполненииСписковСОграничениемДоступа
// 
// Параметры:
//  Списки - Соответствие из КлючИЗначение:
//  * Ключ - ОбъектМетаданных
//  * Значение - Булево
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.РегистрыСведений.ПроверкиЭлектронныхПодписейЭДО, Истина);
	
КонецПроцедуры

// См. ЭлектронноеВзаимодействие.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных
// 
// Параметры:
//  Описание - Строка
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	Описание = Описание + "
	|РегистрСведений.ПроверкиЭлектронныхПодписейЭДО.Чтение.Организации
	|РегистрСведений.ПроверкиЭлектронныхПодписейЭДО.Изменение.Организации
	|";
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеКонфигурации

// См. ЭлектронноеВзаимодействие.ПриДобавленииОбработчиковОбновления.
// 
// Параметры:
//  Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

#Область Версия_1_9_5

#Область РегистрыСведений_ПроверкиЭлектронныхПодписейЭДО_ОбработатьДанныеДляПереходаНаНовуюВерсию
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.9.5.18";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.Процедура = "РегистрыСведений.ПроверкиЭлектронныхПодписейЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("f000eb23-0b04-496b-885e-56944a7cad5e");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления =
		"РегистрыСведений.ПроверкиЭлектронныхПодписейЭДО.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрСведений.ПроверкиЭлектронныхПодписейЭДО,
		|РегистрСведений.ЭлектронныеПодписиПоМЧД,
		|Документ.СообщениеЭДО,
		|Справочник.СообщениеЭДОПрисоединенныеФайлы";
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.ПроверкиЭлектронныхПодписейЭДО";
	Обработчик.Комментарий = НСтр("ru = '1С:Обмен с контрагентами: запись проверок электронных подписей ЭДО.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.СообщениеЭДОПрисоединенныеФайлы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
#КонецОбласти

#КонецОбласти

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОпределениеКомандЭДО

// Определяет и параметризирует список команд ЭДО
//
// Параметры:
//   СоставКоманд - Структура - структура состава команд ЭДО.
//    Исходящие    - Массив - состав объектов, например "Документ.РеализацияТоваровУслуг".
//    Входящие     - Массив - состав объектов.
//    БезПодписи   - Массив - состав объектов для обмена без ЭП.
//    Интеркампани - Массив - состав объектов Интеркампани.
//    Контрагенты  - Массив - состав объектов Контрагенты.
//    Организации  - Массив - состав объектов Организации.
//    Договоры     - Массив - состав объектов Договоры.
//  ПолноеИмя - Строка - имя объекта, например "Документ.РеализацияТоваровУслуг".
//  НаправлениеЭД - ПеречислениеСсылка.НаправленияЭДО - параметр отбора входящих или исходящих документов.
//  КомандыЭДО - ТаблицаЗначений - подготавливаемый список команд ЭДО.
//
Процедура ПриОпределенииСпискаКомандЭДО(Знач СоставКоманд, Знач ПолноеИмя, Знач НаправлениеЭД, КомандыЭДО) Экспорт
		
	ИспользоватьОбменЭД = ОбщегоНазначенияБЭД.ЗначениеФункциональнойОпции("ИспользоватьОбменЭД");
	ИспользоватьИнтеркампани = ОбщегоНазначенияБЭД.ЗначениеФункциональнойОпции("ИспользоватьОбменЭДМеждуОрганизациями");	
		
	ЕстьПравоПросмотраЭД           = ЭлектронныеДокументыЭДО.ЕстьПравоЧтенияДокументов();
	ЕстьПравоОбработкиЭД           = ЭлектронныеДокументыЭДО.ЕстьПравоОбработкиДокументов();
	ЕстьПравоНастройкиОбмена       = НастройкиЭДО.ЕстьПравоНастройкиОбмена();
	ЕстьПравоЧтенияНастройкиОбмена = НастройкиЭДО.ЕстьПравоЧтенияНастройкиОбмена();
	ЕстьПравоОбменаЭД              = СинхронизацияЭДО.ЕстьПравоВыполненияОбмена();
	
	ЕстьПравоВывода = ПравоДоступа("Вывод", Метаданные);
	
	Если СоставКоманд.Договоры.Найти(ПолноеИмя) <> Неопределено
		И ИспользоватьОбменЭД Тогда
		
		КомандаЭДО = КомандыЭДО.Добавить();
		КомандаЭДО.Обработчик = "ИнтерфейсДокументовЭДОКлиент.ОткрытьНастройкиОтправкиДокументовПоДоговору";
		КомандаЭДО.СписокФорм    = "";
		КомандаЭДО.Идентификатор = "ПригласитьКОбменуЭДО";
		КомандаЭДО.Представление = НСтр("ru = 'Настройки отправки документов'");
		КомандаЭДО.Порядок       = 40;
		КомандаЭДО.Картинка      = БиблиотекаКартинок.ЭлектронныйДокументИсходящий;
		КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаЭДО.МестоРазмещения = "КомандыЭДОДополнительное";
		КомандаЭДО.УправлениеВидимостью.Вставить("Использовать", Истина);
		КомандаЭДО.УправлениеВидимостью.Вставить("ИмяАлгоритмаПроверкиУсловия", "ЗначениеЗаполнено");
		КомандаЭДО.УправлениеВидимостью.Вставить("ЗначениеУсловия", Истина);
		КомандаЭДО.Недоступна    = Не ЕстьПравоЧтенияНастройкиОбмена;
		
	КонецЕсли;

	Если СоставКоманд.Контрагенты.Найти(ПолноеИмя) <> Неопределено
		И ИспользоватьОбменЭД Тогда
		
		КомандаЭДО = КомандыЭДО.Добавить();
		КомандаЭДО.Обработчик = "ИнтерфейсДокументовЭДОКлиент.ПригласитьКОбменуЭДО";
		КомандаЭДО.СписокФорм    = "";
		КомандаЭДО.Идентификатор = "ПригласитьКОбменуЭДО";
		КомандаЭДО.Представление = НСтр("ru = 'Пригласить к обмену электронными документами'");
		КомандаЭДО.Порядок       = 10;
		КомандаЭДО.Картинка      = БиблиотекаКартинок.ДобавитьКонтрагентыБЭД;
		КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
		КомандаЭДО.Недоступна    = Не ЕстьПравоНастройкиОбмена;
		
		КомандаЭДО = КомандыЭДО.Добавить();
		КомандаЭДО.Обработчик = "ИнтерфейсДокументовЭДОКлиент.ОткрытьНастройкиОтраженияВУчете";
		КомандаЭДО.СписокФорм    = "";
		КомандаЭДО.Идентификатор = "НастройкиОтраженияВУчете";
		КомандаЭДО.Представление = НСтр("ru = 'Настройки отражения в учете'");
		КомандаЭДО.Порядок       = 20;
		КомандаЭДО.Картинка      = БиблиотекаКартинок.ЗагрузитьXMLФайлВИнформационнуюБазу;
		КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
		КомандаЭДО.УправлениеВидимостью.Вставить("Использовать", Истина);
		КомандаЭДО.УправлениеВидимостью.Вставить("ИмяАлгоритмаПроверкиУсловия", "ИнтерфейсДокументовЭДО.ЕстьНастройкиПоКонтрагенту");
		КомандаЭДО.УправлениеВидимостью.Вставить("ЗначениеУсловия", Истина);
		КомандаЭДО.Недоступна    = Не ЕстьПравоЧтенияНастройкиОбмена;
		
		КомандаЭДО = КомандыЭДО.Добавить();
		КомандаЭДО.Обработчик = "ИнтерфейсДокументовЭДОКлиент.ОткрытьНастройкиОтправкиДокументовКонтрагента";
		КомандаЭДО.СписокФорм    = "";
		КомандаЭДО.Идентификатор = "НастройкиОтправкиДокументов";
		КомандаЭДО.Представление = НСтр("ru = 'Настройки отправки документов'");
		КомандаЭДО.Порядок       = 30;
		КомандаЭДО.Картинка      = БиблиотекаКартинок.ЭлектронныйДокументИсходящий;
		КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
		КомандаЭДО.УправлениеВидимостью.Вставить("Использовать", Истина);
		КомандаЭДО.УправлениеВидимостью.Вставить("ИмяАлгоритмаПроверкиУсловия", "ИнтерфейсДокументовЭДО.ЕстьНастройкиПоКонтрагенту");
		КомандаЭДО.УправлениеВидимостью.Вставить("ЗначениеУсловия", Истина);
		КомандаЭДО.Недоступна    = Не ЕстьПравоЧтенияНастройкиОбмена;
		
	КонецЕсли;
	
	Если СоставКоманд.Организации.Найти(ПолноеИмя) <> Неопределено
		И ИспользоватьОбменЭД Тогда
		
		КомандаЭДО = КомандыЭДО.Добавить();
		КомандаЭДО.Обработчик = "ИнтерфейсДокументовЭДОКлиент.ПодключитьКЭДО";
		КомандаЭДО.СписокФорм    = "";
		КомандаЭДО.Идентификатор = "ПодключитьКЭДО";
		КомандаЭДО.Представление = НСтр("ru = 'Подключить организацию'");
		КомандаЭДО.Порядок       = 10;
		КомандаЭДО.Картинка      = БиблиотекаКартинок.ПодключениеБЭД;
		КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
		КомандаЭДО.УправлениеВидимостью.Вставить("Использовать", Истина);
		КомандаЭДО.УправлениеВидимостью.Вставить("ИмяАлгоритмаПроверкиУсловия", "СинхронизацияЭДО.ЕстьУчетныеЗаписи");
		КомандаЭДО.УправлениеВидимостью.Вставить("ЗначениеУсловия", Ложь);
		КомандаЭДО.Недоступна    = Не ЕстьПравоЧтенияНастройкиОбмена;
		
		КомандаЭДО = КомандыЭДО.Добавить();
		КомандаЭДО.Обработчик = "ИнтерфейсДокументовЭДОКлиент.ОткрытьСписокУчетныхЗаписей";
		КомандаЭДО.СписокФорм    = "";
		КомандаЭДО.Идентификатор = "УчетныеЗаписиЭДО";
		КомандаЭДО.Представление = НСтр("ru = 'Учетные записи'");
		КомандаЭДО.Порядок       = 20;
		КомандаЭДО.Картинка      = БиблиотекаКартинок.ЗаявлениеНаВыпускСертификатаКлюча;
		КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
		КомандаЭДО.УправлениеВидимостью.Вставить("Использовать", Истина);
		КомандаЭДО.УправлениеВидимостью.Вставить("ИмяАлгоритмаПроверкиУсловия", "СинхронизацияЭДО.ЕстьУчетныеЗаписи");
		КомандаЭДО.УправлениеВидимостью.Вставить("ЗначениеУсловия", Истина);
		КомандаЭДО.Недоступна    = Не ЕстьПравоЧтенияНастройкиОбмена;

		КомандаЭДО = КомандыЭДО.Добавить();
		КомандаЭДО.Обработчик = "ИнтерфейсДокументовЭДОКлиент.ОткрытьСписокМЧД";
		КомандаЭДО.СписокФорм    = "";
		КомандаЭДО.Идентификатор = "СписокМЧД";
		КомандаЭДО.Представление = НСтр("ru = 'Машиночитаемые доверенности'");
		КомандаЭДО.Порядок       = 20;
		КомандаЭДО.Картинка      = БиблиотекаКартинок.СправочникОбъект;
		КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
		КомандаЭДО.Недоступна    = Не ЕстьПравоЧтенияНастройкиОбмена;
		
		Если ИспользоватьИнтеркампани Тогда
			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик = "ИнтерфейсДокументовЭДОКлиент.НастройкиОтправкиДокументовИнтеркампани";
			КомандаЭДО.СписокФорм    = "";
			КомандаЭДО.Идентификатор = "НастройкиОтправкиДокументовИнтеркампани";
			КомандаЭДО.Представление = НСтр("ru = 'Настройки отправки документов'");
			КомандаЭДО.Порядок       = 30;
			КомандаЭДО.Картинка      = БиблиотекаКартинок.СохранитьФайлКак;
			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
			КомандаЭДО.Недоступна    = Не ЕстьПравоНастройкиОбмена;
			
			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик = "ИнтерфейсДокументовЭДОКлиент.ПригласитьКОбменуЭДО";
			КомандаЭДО.СписокФорм    = "";
			КомандаЭДО.Идентификатор = "ПригласитьКОбменуЭДО";
			КомандаЭДО.Представление = НСтр("ru = 'Пригласить к обмену электронными документами'");
			КомандаЭДО.Порядок       = 10;
			КомандаЭДО.Картинка      = БиблиотекаКартинок.ДобавитьКонтрагентыБЭД;
			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
			КомандаЭДО.Недоступна    = Не ЕстьПравоНастройкиОбмена;
		КонецЕсли;
		
	КонецЕсли;

	Если СоставКоманд.Исходящие.Найти(ПолноеИмя) <> Неопределено 
			И НаправлениеЭД <> Перечисления.НаправленияЭДО.Входящий Тогда
		
		Если ИспользоватьОбменЭД Тогда
			
			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик    = "ИнтерфейсДокументовЭДОКлиент.ОткрытьЭлектронныйДокументОбъектаУчетаКоманда";
			КомандаЭДО.СписокФорм    = "";
			КомандаЭДО.Идентификатор = "ОткрытьАктуальныйЭД";
			КомандаЭДО.Представление = НСтр("ru = 'Просмотреть электронный документ'");
			КомандаЭДО.Порядок       = 10;
			КомандаЭДО.Картинка      = БиблиотекаКартинок.ОткрытьВыбранныйФайл;
			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
			КомандаЭДО.Недоступна    = Не ЕстьПравоПросмотраЭД;

			Если СоставКоманд.Договоры.Найти(ПолноеИмя) = Неопределено Тогда

				КомандаЭДО = КомандыЭДО.Добавить();
				КомандаЭДО.Обработчик    = "ИнтерфейсДокументовЭДОКлиент.СформироватьПодписатьОтправитьЭД";
				КомандаЭДО.СписокФорм    = "";
				КомандаЭДО.Идентификатор = "СформироватьПодписатьОтправитьЭД";
				КомандаЭДО.Представление = НСтр("ru = 'Отправить электронный документ'");
				КомандаЭДО.Порядок       = 20;
				КомандаЭДО.Картинка      = БиблиотекаКартинок.ЭлектронныйДокументИсходящий;
				КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
				КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
				КомандаЭДО.Недоступна    = Не ЕстьПравоОбработкиЭД;
				
				КомандаЭДО = КомандыЭДО.Добавить();
				КомандаЭДО.Обработчик    = "ИнтерфейсДокументовЭДОКлиент.ОткрытьНовыйПроизвольныйЭлектронныйДокументНаОсновании";
				КомандаЭДО.СписокФорм    = "";
				КомандаЭДО.Идентификатор = "СоздатьПроизвольныйДокумент";
				КомандаЭДО.Представление = НСтр("ru = 'Создать произвольный документ'");
				КомандаЭДО.Порядок       = 50;
				КомандаЭДО.Картинка      = БиблиотекаКартинок.Скрепка;
				КомандаЭДО.МестоРазмещения = "КомандыЭДОбщее";
				КомандаЭДО.Недоступна    = Не ЕстьПравоОбработкиЭД;
			
			Иначе
				
				КомандаЭДО = КомандыЭДО.Добавить();
				КомандаЭДО.Обработчик    = "ИнтерфейсДокументовЭДОКлиент.СформироватьПодписатьОтправитьЭД";
				КомандаЭДО.СписокФорм    = "";
				КомандаЭДО.Идентификатор = "СформироватьПодписатьОтправитьЭД";
				КомандаЭДО.Представление = НСтр("ru = 'Отправить электронный документ'");
				КомандаЭДО.Порядок       = 20;
				КомандаЭДО.Картинка      = БиблиотекаКартинок.ЭлектронныйДокументИсходящий;
				КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
				КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
				КомандаЭДО.Недоступна    = Не ЕстьПравоОбработкиЭД;
			
			КонецЕсли;
			
			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик    = "ИнтерфейсДокументовЭДОКлиент.ОткрытьТекущиеДелаЭДОКоманда";
			КомандаЭДО.СписокФорм    = "";
			КомандаЭДО.Идентификатор = "ОткрытьТекущиеДелаЭДО";
			КомандаЭДО.Представление = НСтр("ru = 'Текущие дела ЭДО'");
			КомандаЭДО.Порядок       = 30;
			КомандаЭДО.Картинка      = БиблиотекаКартинок.ЭмблемаСервиса1СЭДО;
			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОДополнительное";
			КомандаЭДО.Недоступна    = Не ЕстьПравоПросмотраЭД;
			
			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик    = "ИнтерфейсДокументовЭДОКлиент.ОткрытьДеревоЭлектронныхДокументов";
			КомандаЭДО.СписокФорм    = "";
			КомандаЭДО.Идентификатор = "ДеревоЭД";
			КомандаЭДО.Представление = НСтр("ru = 'Список электронных документов'");
			КомандаЭДО.Порядок       = 25;
			КомандаЭДО.Картинка      = БиблиотекаКартинок.Подсистема;
			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОДополнительное";
			КомандаЭДО.ТолькоВоВсехДействиях = Истина;
			КомандаЭДО.Недоступна    = Не ЕстьПравоПросмотраЭД;
			
		КонецЕсли;
		
		Если ЕстьПравоВывода И СоставКоманд.БезПодписи.Найти(ПолноеИмя) <> Неопределено Тогда
			// Команды из механизма однократных сделок не завязаны на ФО и роли БЭД.
			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик    = "ИнтерфейсДокументовЭДОКлиент.ВыгрузитьДанныеВФайл";
			КомандаЭДО.СписокФорм    = "";
			КомандаЭДО.Идентификатор = "ВыгрузитьДанныеВФайл";
			КомандаЭДО.Представление = НСтр("ru = 'Выгрузить документ в файл'");
			КомандаЭДО.Порядок       = 50;
			КомандаЭДО.Картинка      = БиблиотекаКартинок.ВыгрузитьДанныеИзИнформационнойБазыВXMLФайл;
			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОДополнительное";
			КомандаЭДО.ТолькоВоВсехДействиях = Истина;
			КомандаЭДО.Недоступна    = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СоставКоманд.Входящие.Найти(ПолноеИмя) <> Неопределено 
		И НаправлениеЭД <> Перечисления.НаправленияЭДО.Исходящий Тогда
		
		Если ИспользоватьОбменЭД Тогда
			
			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик    = "ИнтерфейсДокументовЭДОКлиент.ОткрытьЭлектронныйДокументОбъектаУчетаКоманда";
			КомандаЭДО.СписокФорм    = "";
			КомандаЭДО.Идентификатор = "ОткрытьАктуальныйЭД";
			КомандаЭДО.Представление = НСтр("ru = 'Просмотреть электронный документ'");
			КомандаЭДО.Порядок       = 10;
			КомандаЭДО.Картинка      = БиблиотекаКартинок.ОткрытьВыбранныйФайл;
			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
			КомандаЭДО.Недоступна    = Не ЕстьПравоПросмотраЭД;
			
			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик    = "ИнтерфейсДокументовЭДОКлиент.ОткрытьДеревоЭлектронныхДокументов";
			КомандаЭДО.СписокФорм    = "";
			КомандаЭДО.Идентификатор = "ДеревоЭД";
			КомандаЭДО.Представление = НСтр("ru = 'Открыть электронные документы'");
			КомандаЭДО.Порядок       = 20;
			КомандаЭДО.Картинка      = БиблиотекаКартинок.Подсистема;
			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
			КомандаЭДО.ТолькоВоВсехДействиях = Истина;
			КомандаЭДО.Недоступна    = Не ЕстьПравоПросмотраЭД;
			
			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик    = "ИнтерфейсДокументовЭДОКлиент.ПерезаполнитьДокумент";
			КомандаЭДО.СписокФорм    = "";
			КомандаЭДО.Идентификатор = "ПерезаполнитьДокумент";
			КомандаЭДО.Представление = НСтр("ru = 'Перезаполнить по электронному документу'");
			КомандаЭДО.Порядок       = 30;
			КомандаЭДО.Картинка      = БиблиотекаКартинок.ДобавитьДопСвойствоВНабор;
			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОДополнительное";
			КомандаЭДО.ТолькоВоВсехДействиях = Истина;
			КомандаЭДО.Недоступна    = Не ЕстьПравоОбработкиЭД;
			
			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик    = "ИнтерфейсДокументовЭДОКлиент.ОткрытьНовыйПроизвольныйЭлектронныйДокументНаОсновании";
			КомандаЭДО.СписокФорм    = "";
			КомандаЭДО.Идентификатор = "СоздатьПроизвольныйДокумент";
			КомандаЭДО.Представление = НСтр("ru = 'Создать произвольный документ'");
			КомандаЭДО.Порядок       = 50;
			КомандаЭДО.Картинка      = БиблиотекаКартинок.Скрепка;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОДополнительное";
			КомандаЭДО.Недоступна    = Не ЕстьПравоОбменаЭД;

			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик    = "ИнтерфейсДокументовЭДОКлиент.ОткрытьТекущиеДелаЭДОКоманда";
			КомандаЭДО.СписокФорм    = "";
			КомандаЭДО.Идентификатор = "ОткрытьТекущиеДелаЭДО";
			КомандаЭДО.Представление = НСтр("ru = 'Текущие дела ЭДО'");
			КомандаЭДО.Порядок       = 30;
			КомандаЭДО.Картинка      = БиблиотекаКартинок.ЭмблемаСервиса1СЭДО;
			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОДополнительное";
			КомандаЭДО.Недоступна    = Не ЕстьПравоПросмотраЭД;
			
		КонецЕсли;
		
		Если ЕстьПравоОбменаЭД Тогда
			
			// Команды из механизма однократных сделок не завязаны на ФО и роли БЭД.
			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик    = "ИнтерфейсДокументовЭДОКлиент.ЗагрузитьДанныеИзФайла";
			КомандаЭДО.СписокФорм    = "";
			КомандаЭДО.Идентификатор = "ЗагрузитьДанныеИзФайла";
			КомандаЭДО.Представление = НСтр("ru = 'Загрузить документ из файла'");
			КомандаЭДО.Порядок       = 50;
			КомандаЭДО.Картинка      = БиблиотекаКартинок.ЗагрузитьXMLФайлВИнформационнуюБазу;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОДополнительное";
			КомандаЭДО.ТолькоВоВсехДействиях = Истина;
			КомандаЭДО.Недоступна    = Ложь;		
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИспользоватьОбменЭД И ИспользоватьИнтеркампани И СоставКоманд.Интеркампани.Найти(ПолноеИмя) <> Неопределено Тогда
		
		КомандаЭДО = КомандыЭДО.Добавить();
		КомандаЭДО.Обработчик = "ИнтерфейсДокументовЭДОКлиент.ОткрытьЭлектронныйДокументОбъектаУчетаКоманда";
		КомандаЭДО.СписокФорм    = "";
		КомандаЭДО.Идентификатор = "ОткрытьАктуальныйЭД";
		КомандаЭДО.Представление = НСтр("ru = 'Просмотреть электронный документ'");
		КомандаЭДО.Порядок       = 10;
		КомандаЭДО.Картинка      = БиблиотекаКартинок.ОткрытьВыбранныйФайл;
		КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
		КомандаЭДО.Недоступна    = Не ЕстьПравоПросмотраЭД;
		
		КомандаЭДО = КомандыЭДО.Добавить();
		КомандаЭДО.Обработчик = "ИнтерфейсДокументовЭДОКлиент.СформироватьПодписатьОтправитьЭД";
		КомандаЭДО.СписокФорм    = "";
		КомандаЭДО.Идентификатор = "СформироватьПодписатьОтправитьЭД";
		КомандаЭДО.Представление = НСтр("ru = 'Подписать электронный документ'");
		КомандаЭДО.Порядок       = 12;
		КомандаЭДО.Картинка      = БиблиотекаКартинок.ЭлектронныйДокументИсходящий;
		КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
		КомандаЭДО.Недоступна    = Не ЕстьПравоОбменаЭД;
			
	КонецЕсли;
	
	ИспользоватьВнутренниеДокументыЭДО = НастройкиЭДО.ИспользуютсяВнутренниеДокументы();
	
	Если ИспользоватьОбменЭД И ИспользоватьВнутренниеДокументыЭДО
		И СоставКоманд.Внутренние.Найти(ПолноеИмя) <> Неопределено Тогда
		
		КомандаЭДО = КомандыЭДО.Добавить();
		КомандаЭДО.Обработчик    = "ИнтерфейсДокументовЭДОКлиент.ОткрытьЭлектронныйДокументОбъектаУчетаКоманда";
		КомандаЭДО.СписокФорм    = "";
		КомандаЭДО.Идентификатор = "ОткрытьАктуальныйЭД";
		КомандаЭДО.Представление = НСтр("ru = 'Просмотреть электронный документ'");
		КомандаЭДО.Порядок       = 10;
		КомандаЭДО.Картинка      = БиблиотекаКартинок.ОткрытьВыбранныйФайл;
		КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
		КомандаЭДО.Недоступна    = Не ЕстьПравоПросмотраЭД;
		
		КомандаЭДО = КомандыЭДО.Добавить();
		КомандаЭДО.Обработчик    = "ИнтерфейсДокументовЭДОКлиент.СформироватьПодписатьОтправитьЭД";
		КомандаЭДО.СписокФорм    = "";
		КомандаЭДО.Идентификатор = "СформироватьПодписатьОтправитьЭД";
		КомандаЭДО.Представление = НСтр("ru = 'Подписать электронный документ'");
		КомандаЭДО.Порядок       = 20;
		КомандаЭДО.Картинка      = БиблиотекаКартинок.ПодписанЭП;
		КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
		КомандаЭДО.Недоступна    = Не ЕстьПравоОбработкиЭД;
		
		КомандаЭДО = КомандыЭДО.Добавить();
		КомандаЭДО.Обработчик    = "ИнтерфейсДокументовЭДОКлиент.ОткрытьТекущиеДелаЭДОКоманда";
		КомандаЭДО.СписокФорм    = "";
		КомандаЭДО.Идентификатор = "ОткрытьТекущиеДелаЭДО";
		КомандаЭДО.Представление = НСтр("ru = 'Текущие дела ЭДО'");
		КомандаЭДО.Порядок       = 30;
		КомандаЭДО.Картинка      = БиблиотекаКартинок.ЭмблемаСервиса1СЭДО;
		КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаЭДО.МестоРазмещения = "КомандыЭДОДополнительное";
		КомандаЭДО.Недоступна    = Не ЕстьПравоПросмотраЭД;
		
		КомандаЭДО = КомандыЭДО.Добавить();
		КомандаЭДО.Обработчик    = "ИнтерфейсДокументовЭДОКлиент.ОткрытьДеревоЭлектронныхДокументов";
		КомандаЭДО.СписокФорм    = "";
		КомандаЭДО.Идентификатор = "ДеревоЭД";
		КомандаЭДО.Представление = НСтр("ru = 'Список электронных документов'");
		КомандаЭДО.Порядок       = 25;
		КомандаЭДО.Картинка      = БиблиотекаКартинок.Подсистема;
		КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаЭДО.МестоРазмещения = "КомандыЭДОДополнительное";
		КомандаЭДО.ТолькоВоВсехДействиях = Истина;
		КомандаЭДО.Недоступна    = Не ЕстьПравоПросмотраЭД;
		
	КонецЕсли;
	
	Если ИспользоватьОбменЭД И ИспользоватьВнутренниеДокументыЭДО
		И СоставКоманд.Организации.Найти(ПолноеИмя) <> Неопределено Тогда
		
		КомандаЭДО = КомандыЭДО.Добавить();
		КомандаЭДО.Обработчик = "ИнтерфейсДокументовЭДОКлиент.ОткрытьНастройкиВнутреннегоЭДО";
		КомандаЭДО.СписокФорм    = "";
		КомандаЭДО.Идентификатор = "НастройкиВнутреннегоЭДО";
		КомандаЭДО.Представление = НСтр("ru = 'Настройки внутреннего ЭДО'");
		КомандаЭДО.Порядок       = 40;
		КомандаЭДО.Картинка      = БиблиотекаКартинок.ПодписанЭП;
		КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
		КомандаЭДО.Недоступна    = Не ЕстьПравоЧтенияНастройкиОбмена;

	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Печать") Тогда
	   Если ИнтеграцияБСПБЭД.ИсточникиКомандПечати().Найти(Метаданные.НайтиПоПолномуИмени(ПолноеИмя)) <> Неопределено
			И СоставКоманд.Внутренние.Найти(ПолноеИмя) = Неопределено
			И СоставКоманд.Исходящие.Найти(ПолноеИмя) = Неопределено 
			И СоставКоманд.Входящие.Найти(ПолноеИмя) = Неопределено
			И СоставКоманд.Интеркампани.Найти(ПолноеИмя) = Неопределено
			И СоставКоманд.Контрагенты.Найти(ПолноеИмя) = Неопределено 
			И СоставКоманд.Организации.Найти(ПолноеИмя) = Неопределено
			И СоставКоманд.Договоры.Найти(ПолноеИмя) = Неопределено Тогда
		
			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик    = "ИнтерфейсДокументовЭДОКлиент.ОтправитьПечатнуюФормуПоЭДОКоманда";
			КомандаЭДО.СписокФорм    = "";
			КомандаЭДО.Идентификатор = "ОтправитьПечатнуюФорму";
			КомандаЭДО.Представление = НСтр("ru = 'ЭДО'");
			КомандаЭДО.Порядок       = 10;
			КомандаЭДО.Картинка      = БиблиотекаКартинок.ЭмблемаСервиса1СЭДО;
			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
			КомандаЭДО.Недоступна    = Не ЕстьПравоПросмотраЭД;
			КомандаЭДО.Отображение   = ОтображениеКнопки.КартинкаИТекст;
			
		КонецЕсли;
	 КонецЕсли;
	
	
КонецПроцедуры

#КонецОбласти

#Область ПросмотрЭлектронногоДокумента

Функция ДанныеФормыПросмотраЭлектронногоДокумента(ЭлектронныйДокумент, ЭтоВходящийЭДО) Экспорт
	
	ТекстыЗапроса = Новый Массив;
	ТекстыЗапроса.Добавить(ИнтеграцияЭДО.ТекстЗапросаОбъектовУчетаЭлектронныхДокументов());
	ТекстыЗапроса.Добавить(ЭлектронныеДокументыЭДО.ТекстЗапросаСостоянияДокумента());
	ТекстыЗапроса.Добавить(ЭлектронныеДокументыЭДО.ТекстЗапросаДанныхЭлементовСхемыРегламента(ЭтоВходящийЭДО));
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеФормыПросмотра = Новый Структура;
	ДанныеФормыПросмотра.Вставить("ВыборкаОбъектовУчета", РезультатыЗапроса[0].Выбрать());
	ДанныеФормыПросмотра.Вставить("ВыборкаСостоянияЭДО", РезультатыЗапроса[1].Выбрать());
	
	ДанныеЭлементовСхемы = СформироватьДанныеЭлементовСхемы(РезультатыЗапроса[2].Выгрузить());
	
	ДанныеФормыПросмотра.Вставить("ДанныеЭлементовСхемы", ДанныеЭлементовСхемы);
	
	Возврат ДанныеФормыПросмотра;
	
КонецФункции

Процедура СоздатьРеквизитыИЭлементыДляПредставленияДокумента(Форма, СхемаРегламента) Экспорт
	
	НовыеРеквизитыФормы = Новый Массив;
	ПодготовитьНовыеРеквизитыФормыПоСхемеРегламента(Форма, СхемаРегламента, НовыеРеквизитыФормы);
	
	Если НовыеРеквизитыФормы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ИзменитьРеквизиты(НовыеРеквизитыФормы);
	
	Для Каждого РеквизитФормы Из НовыеРеквизитыФормы Цикл
		
		ИмяСтраницы = "Страница" + РеквизитФормы.Имя;
		Страница = Форма.Элементы.Добавить(ИмяСтраницы, Тип("ГруппаФормы"), Форма.Элементы.СтраницыПредставленийДокумента);
		Страница.Вид = ВидГруппыФормы.Страница;
		Страница.ОтображатьЗаголовок = Ложь;
		Страница.Видимость = Истина;
		
		НовыйЭлемент = Форма.Элементы.Добавить(РеквизитФормы.Имя, Тип("ПолеФормы"), Страница);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеТабличногоДокумента;
		НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		НовыйЭлемент.ПутьКДанным = РеквизитФормы.Имя;
		НовыйЭлемент.Редактирование = Ложь;
		
	КонецЦикла;
	
КонецПроцедуры

// Читает установленные подписи.
// 
// Параметры:
//  ЭлементСхемыРегламента - ДанныеФормыЭлементДерева
//  ТипРегламента - ПеречислениеСсылка.ТипыРегламентовЭДО
// 
// Возвращаемое значение:
//  Массив из Структура:
//   * СвойстваПодписи - См. ЭлектронныеДокументы.НовыеДанныеПодписи
//   * ЭтоПодписьПоДоверенности - Булево
//   * СвойстваДоверенности - Неопределено,
//   						- см. МашиночитаемыеДоверенности.ОбщиеСвойстваДоверенности
//   * РезультатПроверкиПоМЧД - Неопределено, 
//   						  - см. МашиночитаемыеДоверенности.НовыйРезультатПроверкиПодписи
//   						  
//   * ПодписанныйОбъект - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//   * ОтветнаяПодпись - Булево
//   * СообщениеЭДО - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//   
Функция УстановленныеПодписи(ЭлементСхемыРегламента, ТипРегламента) Экспорт
	
	Результат = Новый Массив();
	
	Если Не ЗначениеЗаполнено(ЭлементСхемыРегламента.Сообщение) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Подписи = ЭлектронныеДокументыЭДО.УстановленныеПодписиСУчетомДоверенностей(ЭлементСхемыРегламента.Сообщение);
	
	Если Не ЗначениеЗаполнено(Подписи) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого Подпись Из Подписи Цикл
		СкорректироватьДатыПодписиНаЧасовойПоясКлиента(Подпись);
	КонецЦикла;
	
	Если ТипРегламента = Перечисления.ТипыРегламентовЭДО.Неформализованный Тогда
		
		Для Каждого Подпись Из Подписи Цикл
			
			СвойстваПодписи = Подпись.СвойстваПодписи;
			ОтветнаяПодпись = ЭлементСхемыРегламента.Статус = Перечисления.СтатусыСообщенийЭДО.Подтвержден
				И ЭлементСхемыРегламента.ДатаИзмененияСтатуса < СвойстваПодписи.ДатаПодписи;
			Подпись.Вставить("ОтветнаяПодпись", ОтветнаяПодпись);
			Подпись.Вставить("СообщениеЭДО", ЭлементСхемыРегламента.Сообщение);
			Результат.Добавить(Подпись);
			
		КонецЦикла;
		
		Возврат Результат;
		
	КонецЕсли;
	
	ПодписиПолучателя = Новый Массив;
	ЭлементСхемыИнформацияПолучателя =
		ИнтерфейсДокументовЭДОКлиентСервер.НайтиЭлементСхемыИнформацияПолучателя(ЭлементСхемыРегламента);
	
	Если ЭлементСхемыИнформацияПолучателя <> Неопределено
		И ЗначениеЗаполнено(ЭлементСхемыИнформацияПолучателя.Сообщение) Тогда
			
		ПодписиПолучателя = ЭлектронныеДокументыЭДО.УстановленныеПодписиСУчетомДоверенностей(
			ЭлементСхемыИнформацияПолучателя.Сообщение);
		
	КонецЕсли;
	
	Для Каждого Подпись Из Подписи Цикл
		
		Подпись.Вставить("ОтветнаяПодпись", ЭлементСхемыРегламента.Направление = Перечисления.НаправленияЭДО.Входящий);
		Подпись.Вставить("СообщениеЭДО", ЭлементСхемыРегламента.Сообщение);
		Результат.Добавить(Подпись);
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ПодписиПолучателя) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого Подпись Из ПодписиПолучателя Цикл
		
		Подпись.Вставить("ОтветнаяПодпись", ЭлементСхемыРегламента.Направление <> Перечисления.НаправленияЭДО.Входящий);
		Подпись.Вставить("СообщениеЭДО", ЭлементСхемыИнформацияПолучателя.Сообщение);
		СкорректироватьДатыПодписиНаЧасовойПоясКлиента(Подпись);
		Результат.Добавить(Подпись);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Конструктор параметров визуализации документа.
// 
// Возвращаемое значение:
// 	Структура - Описание:
// 	* ВыводитьДопДанные - Булево - признак включения режима вывода дополнительных данных.
// 	* ВыводитьБанковскиеРеквизиты - Булево -  признак включения режима вывода банковских реквизитов.
// 	* ВыводитьКопияВерна - Булево -  признак включения режима вывода отметки "Копия верна".
// 	* ВыводитьШапкуСИдДокумента - Булево - признак, позволяющий отключить вывод шапки с идентификатором документа.
// 	* ПодсказкаQRКода - Строка -  текст подсказки QR кода.
// 	* ПубличнаяСсылкаQRКода - Строка - текст публичной ссылки QR кода.
//
Функция НовыеПараметрыВизуализацииДокумента() Экспорт
	
	Возврат ЭлектронныеДокументыЭДО.НовыеПараметрыВизуализацииДокумента();
	
КонецФункции

// Запускает операцию по формированию представления.
// 
// Параметры:
// 	ЭлементСхемыРегламента - ДанныеФормыЭлементДерева - Элемент для которого нужно найти информацию отправителя.
// 	ИдентификаторФормы - УникальныйИдентификатор - ИДентификатор формы.
// 	ПараметрыВизуализацииДокумента - См. ФорматыЭДО.НовыеПараметрыВизуализацииДокумента.
// 	АдресОписанияСообщения - Строка - Адрес хранилища с описанием сообщения.
//
// Возвращаемое значение:
//  Неопределено - если отсутствуют двоичные данные файла.
//  Структура:
//   * ПредставлениеДокумента - ТабличныйДокумент, Неопределено - Табличный документ с представлением.
//   * Успех - Булево - Табличный документ сформирован.
//
Функция ЗапуститьФормированиеПредставленияДанныхДокумента(ЭлементСхемыРегламента, ИдентификаторФормы, ПараметрыВизуализацииДокумента, АдресОписанияСообщения = "") Экспорт
	
	ДвоичныеДанныеФайла = Неопределено;
	
	Если ЗначениеЗаполнено(ЭлементСхемыРегламента.ПрисоединенныйФайл) Тогда
		ДвоичныеДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(ЭлементСхемыРегламента.ПрисоединенныйФайл, Ложь);
	КонецЕсли;
	
	Если ДвоичныеДанныеФайла = Неопределено
		И ЗначениеЗаполнено(АдресОписанияСообщения) Тогда
		ОписаниеСообщения = ПолучитьИзВременногоХранилища(АдресОписанияСообщения);
		ДвоичныеДанныеФайла = ОписаниеСообщения.Данные.Документ.ДвоичныеДанные;
	КонецЕсли;
	
	Если ДвоичныеДанныеФайла = Неопределено И ЗначениеЗаполнено(ЭлементСхемыРегламента.АдресФайла) Тогда
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ЭлементСхемыРегламента.АдресФайла);
	КонецЕсли;
	
	Если ДвоичныеДанныеФайла = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДвоичныеДанныеФайлаОтвета = Неопределено;
	ЭлементСхемыИнформацияОтправителя = Неопределено;
	ЭлементСхемыИнформацияПолучателя = Неопределено;
	ЭлементСхемыПриложениеПоставщикаДляЕИС = Неопределено;
	ЭлементСхемыДополнительныеСведения = Неопределено;
	
	Если ТипЗнч(ЭлементСхемыРегламента) <> Тип("Структура") Тогда 
		
		ЭлементСхемыИнформацияПолучателя = 
			ИнтерфейсДокументовЭДОКлиентСервер.НайтиЭлементСхемыИнформацияПолучателя(ЭлементСхемыРегламента);
		Если ЭлементСхемыИнформацияПолучателя <> Неопределено
			И ЗначениеЗаполнено(ЭлементСхемыИнформацияПолучателя.ПрисоединенныйФайл) Тогда
			ДвоичныеДанныеФайлаОтвета = РаботаСФайлами.ДвоичныеДанныеФайла(
			ЭлементСхемыИнформацияПолучателя.ПрисоединенныйФайл);
		КонецЕсли;
		
		ЭлементСхемыИнформацияОтправителя = 
			НайтиЭлементСхемыИнформацияОтправителя(ЭлементСхемыРегламента);
		ЭлементСхемыДополнительныеСведения = 
			НайтиЭлементСхемыДополнительныеСведения(ЭлементСхемыРегламента);		
		
		Если ЗначениеЗаполнено(ЭлементСхемыРегламента.Сообщение) Тогда
			СпособОбмена = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементСхемыРегламента.Сообщение, "ЭлектронныйДокумент.СпособОбмена");
			Если СпособОбмена = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезСерверЕИС") Тогда
				
				ТипЭлементаРегламента = Неопределено;
				Если ЭлементСхемыРегламента.ТипДокумента = 
						ПредопределенноеЗначение("Перечисление.ТипыДокументовЭДО.УПД")
					Или ЭлементСхемыРегламента.ТипДокумента = 
							ПредопределенноеЗначение("Перечисление.ТипыДокументовЭДО.АктВыполненныхРабот")
					Или ЭлементСхемыРегламента.ТипДокумента = 
							ПредопределенноеЗначение("Перечисление.ТипыДокументовЭДО.ДокументПриемкиЕИСУПД") Тогда
					ТипЭлементаРегламента = 
						ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ПриложениеУПДДляЕИС");
				ИначеЕсли ЭлементСхемыРегламента.ТипДокумента = 
							ПредопределенноеЗначение("Перечисление.ТипыДокументовЭДО.УКД")
					Или ЭлементСхемыРегламента.ТипДокумента = 
							ПредопределенноеЗначение("Перечисление.ТипыДокументовЭДО.ДокументПриемкиЕИСУКД") Тогда
					ТипЭлементаРегламента = 
						ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ПриложениеУКДДляЕИС");
				КонецЕсли;
				Если ТипЭлементаРегламента <> Неопределено Тогда
					ЭлементСхемыПриложениеПоставщикаДляЕИС = 
						ИнтерфейсДокументовЭДОКлиентСервер.НайтиЭлементСхемыПриложениеДляЕИС(ЭлементСхемыРегламента,
							ТипЭлементаРегламента);
				КонецЕсли;		
				
			КонецЕсли;
		КонецЕсли;
	Иначе
		
		
		Если ЭлементСхемыРегламента.Свойство("ЗависимыйЭлементСхемыРегламента")
			И ЭлементСхемыРегламента.ЗависимыйЭлементСхемыРегламента <> Неопределено
			И ЭлементСхемыРегламента.ЗависимыйЭлементСхемыРегламента.ТипЭлементаРегламента =
				Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя Тогда
			
			ЭлементСхемыИнформацияПолучателя = ЭлементСхемыРегламента.ЗависимыйЭлементСхемыРегламента;
			
			Если ЗначениеЗаполнено(ЭлементСхемыИнформацияПолучателя.ПрисоединенныйФайл) Тогда
				ДвоичныеДанныеФайлаОтвета = РаботаСФайлами.ДвоичныеДанныеФайла(
					ЭлементСхемыИнформацияПолучателя.ПрисоединенныйФайл);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(ИдентификаторФормы);

	Если ЭлементСхемыРегламента.ТипДокумента = Перечисления.ТипыДокументовЭДО.Внутренний Тогда
		Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
			"ЭлектронныеДокументыЭДО.ПредставлениеДанныхВнутреннегоСообщения", 
			ДвоичныеДанныеФайла);
	Иначе
		Если ЗначениеЗаполнено(ЭлементСхемыРегламента.Сообщение) Тогда
			
			ПараметрыПолученияПредставления = ЭлектронныеДокументыЭДО.НовыеПараметрыПолученияПредставленияДанныхСообщенияПоСсылке();
			ПараметрыПолученияПредставления.Сообщение = ЭлементСхемыРегламента.Сообщение;
			ПараметрыПолученияПредставления.ПараметрыВизуализации = ПараметрыВизуализацииДокумента;
			
			Если ЭлементСхемыРегламента.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя Тогда
				
				СообщениеОтвета = Неопределено;
				Если ЭлементСхемыИнформацияПолучателя <> Неопределено
					И ЭлементСхемыПриложениеПоставщикаДляЕИС <> Неопределено Тогда
					СообщениеОтвета = Новый Массив;
					СообщениеОтвета.Добавить(ЭлементСхемыИнформацияПолучателя.Сообщение);
					СообщениеОтвета.Добавить(ЭлементСхемыПриложениеПоставщикаДляЕИС.Сообщение);
				ИначеЕсли ЭлементСхемыИнформацияПолучателя <> Неопределено Тогда	
					СообщениеОтвета = ЭлементСхемыИнформацияПолучателя.Сообщение;
				ИначеЕсли ЭлементСхемыПриложениеПоставщикаДляЕИС <> Неопределено Тогда	
					СообщениеОтвета = ЭлементСхемыПриложениеПоставщикаДляЕИС.Сообщение;	
				ИначеЕсли ЭлементСхемыДополнительныеСведения <> Неопределено Тогда	
					СообщениеОтвета = ЭлементСхемыДополнительныеСведения.Сообщение;
				КонецЕсли;
				
				ПараметрыПолученияПредставления.СообщениеОтвета = СообщениеОтвета;
				Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
					"ЭлектронныеДокументыЭДО.ПредставлениеДанныхСообщенияПоСсылке", 
					ПараметрыПолученияПредставления);
				
			ИначеЕсли ЭлементСхемыРегламента.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя Тогда		
				
				Если ЭлементСхемыИнформацияОтправителя <> Неопределено Тогда

					ПараметрыПолученияПредставления.СообщениеЗапроса = ЭлементСхемыИнформацияОтправителя.Сообщение;
					Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
						"ЭлектронныеДокументыЭДО.ПредставлениеДанныхСообщенияПоСсылке", 
						ПараметрыПолученияПредставления);
				Иначе
					Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
						"ЭлектронныеДокументыЭДО.ПредставлениеДанныхСообщенияПоСсылке", 
						ПараметрыПолученияПредставления);
				КонецЕсли;
					
			Иначе
				Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
					"ЭлектронныеДокументыЭДО.ПредставлениеДанныхСообщенияПоСсылке", 
					ПараметрыПолученияПредставления);
			КонецЕсли;
		Иначе
			 Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
				"ЭлектронныеДокументыЭДО.ПредставлениеДанныхСообщения", 
				ЭлементСхемыРегламента.ВидДокумента, ДвоичныеДанныеФайла, ДвоичныеДанныеФайлаОтвета, ПараметрыВизуализацииДокумента);
		КонецЕсли;
	КонецЕсли;
КонецФункции

Функция ПредставлениеИнформацииОтправителя(НомерДокумента, ДатаДокумента) Экспорт 
	
	Если ЗначениеЗаполнено(НомерДокумента) Тогда
		Представление = СтрШаблон(НСтр("ru = '%1 № %2 от %3'"), Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя,
			НомерДокумента, Формат(ДатаДокумента, "ДЛФ=D;"));
	ИначеЕсли ЗначениеЗаполнено(ДатаДокумента) Тогда
		Представление = СтрШаблон(НСтр("ru = '%1 от %2'"), Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя,
			Формат(ДатаДокумента, "ДЛФ=D;"));
	Иначе
		Представление = Строка(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
	КонецЕсли;	

	Возврат Представление;

КонецФункции

// Возвращаемое значение:
//  Структура:
//  * ОбъектУчета - Неопределено,ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - ссылка на основание электронного документа.
//  * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО,ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  * ПредварительныйПросмотр - Неопределено - если предварительный просмотр недоступен.
//                            - См. ПараметрыПредварительногоПросмотраЭлектронногоДокумента
//  * ПросмотрСтатусовЭлектронныхДокументов - Неопределено
//                                          - См. ПараметрыПросмотраСтатусовЭлектронныхДокументов
//  * ОбъектУчетаЯвляетсяГруппой - Булево - является ли объект учета группой, в случае если его тип справочник
//
Функция НовыеПараметрыПросмотраЭлектронногоДокумента() Экспорт
	ПараметрыПросмотра = Новый Структура;
	ПараметрыПросмотра.Вставить("ОбъектУчета", Неопределено);
	ПараметрыПросмотра.Вставить("ЭлектронныйДокумент", Документы.ЭлектронныйДокументИсходящийЭДО.ПустаяСсылка());
	ПараметрыПросмотра.Вставить("ПредварительныйПросмотр", Неопределено);
	ПараметрыПросмотра.Вставить("ПросмотрСтатусовЭлектронныхДокументов", Неопределено);
	ПараметрыПросмотра.Вставить("ОбъектУчетаЯвляетсяГруппой", Ложь);
	Возврат ПараметрыПросмотра;
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * АдресДанных - Строка
Функция НовыеПараметрыПросмотраСтатусовЭлектронныхДокументов() Экспорт
	Параметры = Новый Структура;
	Параметры.Вставить("АдресДанных", "");
	Возврат Параметры;
КонецФункции

// Параметры:
//  СписокОбъектовУчета - СписокЗначений из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
// 
// Возвращаемое значение:
//  Структура:
//  * Заголовок - Строка
//  * Представление - ФорматированнаяСтрока
Функция ПредставлениеОбъектовУчетаИсходящегоДокумента(СписокОбъектовУчета, ТипДокумента) Экспорт
	
	КоличествоОбъектовУчета = СписокОбъектовУчета.Количество();
	
	Заголовок = НСтр("ru = 'Документ учета'");
	
	Представление = "";
	ОтображатьПодбор = Ложь;
	
	Если КоличествоОбъектовУчета = 0 Тогда
		
		Если ТипДокумента = Перечисления.ТипыДокументовЭДО.КаталогТоваров Тогда
			Представление = НСтр("ru = 'Сопоставить номенклатуру'");
			Заголовок = НСтр("ru = 'Настройка ЭДО'");
		ИначеЕсли Не ЭтоВнутреннийТипДокумента(ТипДокумента) Тогда
			ОтображатьПодбор = Истина;
		КонецЕсли;
		
	ИначеЕсли КоличествоОбъектовУчета = 1 Тогда
		
		Представление = Строка(СписокОбъектовУчета[0].Значение);
		
	Иначе
		
		Заголовок = НСтр("ru = 'Документы учета'");
		ШаблонТекста = НСтр("ru = 'Список документов (%1)'");  
		Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, КоличествоОбъектовУчета);
		
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	
	Если ЗначениеЗаполнено(Представление) Тогда
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
			Представление,,,,"ПредставлениеДокументовУчетаЭлектронногоДокументаНажатие"));
		МассивСтрок.Добавить("   ");
	КонецЕсли;
	
	Если ОтображатьПодбор Тогда
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
			НСтр("ru = '<Подбор>'"),,,,"ОткрытьФормуПодбораДокументовУчетаНажатие"));
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Заголовок", Заголовок);
	Результат.Вставить("Представление", Новый ФорматированнаяСтрока(МассивСтрок));
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ИнформацияОбОшибке - ИнформацияОбОшибке
Процедура ЗаписатьОшибкуВизуализацииPDFВЖурналРегистрации(ИнформацияОбОшибке) Экспорт
	
	ПодсистемаРегистрацииОшибок = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами;
	Шаблон = НСтр("ru = 'Не удалось визуализировать документ PDF по причине:
		|%1'");
	ТекстСообщения = СтрШаблон(Шаблон, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	ПараметрыЗаписиВЖурналРегистрации = ОбщегоНазначенияБЭД.НовыеПараметрыЗаписиВЖурналРегистрации();
	ПараметрыЗаписиВЖурналРегистрации.Данные = "ЭлектронныеДокументыЭДО.ПредставлениеДанныхДокумента";
	ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ТекстСообщения, ПодсистемаРегистрацииОшибок,
		УровеньЖурналаРегистрации.Ошибка, ПараметрыЗаписиВЖурналРегистрации);
	
КонецПроцедуры

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра входящего/исходящего электронного документа:
//  * СопроводительнаяЗаписка - Строка
//  * СхемаРегламента - ДеревоЗначений
//  * ИдентификаторТекущегоЭлемента - Число
Процедура ОчиститьСопроводительнуюЗаписку(Форма) Экспорт

	Если ЗначениеЗаполнено(Форма.СопроводительнаяЗаписка) Тогда
	
		ТекущаяСтрокаДерева = Форма.СхемаРегламента.НайтиПоИдентификатору(Форма.ИдентификаторТекущегоЭлемента);
		
		ЭлектронныеДокументыЭДО.ОчиститьДополнительнуюИнформациюСообщения(ТекущаяСтрокаДерева.Сообщение);
		
		Форма.СопроводительнаяЗаписка = "";
		
		ТекущаяСтрокаДерева = Форма.СхемаРегламента.НайтиПоИдентификатору(Форма.ИдентификаторТекущегоЭлемента);
		ТекущаяСтрокаДерева.ДополнительнаяИнформация = Форма.СопроводительнаяЗаписка;
		
	КонецЕсли;
	
КонецПроцедуры

// Настраивает элементы сопроводительной записки форм просмотра входящего/исходящего электронного документа
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра входящего/исходящего электронного документа:
//  * СопроводительнаяЗаписка - Строка
//  * Элементы - ВсеЭлементыФормы:
//  ** СтраницаСопроводительнаяЗаписка - ГруппаФормы
//  ** ОчиститьЗаписку - Кнопка
//  ** СопроводительнаяЗаписка - ПолеВвода
//  ЭлементСхемы - ДанныеФормыЭлементДерева
Процедура НастроитьСопроводительнуюЗаписку(Форма, ЭлементСхемы) Экспорт
	
	Форма.Элементы.СтраницаСопроводительнаяЗаписка.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(
		Форма.СопроводительнаяЗаписка);
		
	ЗапискаДоступнаДляИзменения = ЭлементСхемы.Направление = Перечисления.НаправленияЭДО.Исходящий
		И (ЭлементСхемы.Статус = Перечисления.СтатусыСообщенийЭДО.НеСформирован
		Или ЭлементСхемы.Статус = Перечисления.СтатусыСообщенийЭДО.Сформирован
		Или ЭлементСхемы.Статус = Перечисления.СтатусыСообщенийЭДО.Утвержден);
		
	Форма.Элементы.ОчиститьЗаписку.Доступность = ЗапискаДоступнаДляИзменения;
	Форма.Элементы.СопроводительнаяЗаписка.ТолькоПросмотр = Не ЗапискаДоступнаДляИзменения;

КонецПроцедуры

// Параметры:
// Форма - ФормаКлиентскогоПриложения - форма просмотра входящего/исходящего электронного документа
// ПараметрыЗаписи - Структура
// ЭлементыСхемыРегламента - Массив Из ДанныеФормыЭлементДерева
Процедура ДобавитьОписанияСообщенийВПараметрыЗаписиЭлектронногоДокумента(Форма, ПараметрыЗаписи, 
	ЭлементыСхемыРегламента) Экспорт
	
	ОписанияСообщений = Новый Массив;
		
	Если ПараметрыЗаписи.Свойство("ОписанияСообщений") Тогда
		ПараметрыЗаписи.ОписанияСообщений = ОписанияСообщений;
	Иначе
		ПараметрыЗаписи.Вставить("ОписанияСообщений", ОписанияСообщений);
	КонецЕсли;
	
	Для Каждого ЭлементСхемы Из ЭлементыСхемыРегламента Цикл
		ОписаниеСообщения = ОписаниеСообщения(Форма, ЭлементСхемы);
		ОписанияСообщений.Добавить(ОписаниеСообщения);
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  РеквизитыДокумента - Структура:
//  * Организация - ОпределяемыйТип.Организация
//  * Контрагент - ОпределяемыйТип.КонтрагентБЭД
//  * ДоговорКонтрагента - ОпределяемыйТип.ДоговорСКонтрагентомЭДО
//  * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
// 
// Возвращаемое значение:
//  См. НовыйРезультатПроверкиНастроекОтправки
Функция ПроверитьНастройкиОтправкиПоРеквизитамДокумента(РеквизитыДокумента) Экспорт

	Если ЭлектронныеДокументыЭДО.ЭтоВнутреннийВидДокумента(РеквизитыДокумента.ВидДокумента) Тогда
		РезультатПроверки = ПроверитьНастройкиВнутреннегоЭДО(РеквизитыДокумента);
		РезультатПроверки.ЭтоВнутреннийЭДО = Истина;
	Иначе
		РезультатПроверки = ПроверитьНастройкиОтправки(РеквизитыДокумента);
		РезультатПроверки.ЭтоВнутреннийЭДО = Ложь;
	КонецЕсли;

	Возврат РезультатПроверки;

КонецФункции

// Возвращаемое значение:
//  Структура:
// * Отказ - Булево
// * КлючНастроекОтправки - Неопределено
//                        - См. НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтправки
//                        - Структура:
//                          * Организация - ОпределяемыйТип.Организация
//                          * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
// * ЭтоВнутреннийЭДО - Булево
// * ФормированиеЗапрещено - Булево
Функция НовыйРезультатПроверкиНастроекОтправки() Экспорт

	Результат = Новый Структура;
	Результат.Вставить("Отказ", Ложь);
	Результат.Вставить("КлючНастроекОтправки", Неопределено);
	Результат.Вставить("ЭтоВнутреннийЭДО", Ложь);
	Результат.Вставить("ФормированиеЗапрещено", Ложь);
	Возврат Результат;
	
КонецФункции

// Возвращаемое значение:
//  Булево
Функция ТребуетсяПоказыватьОкноПредложенияОтправкиВФормализованномВиде() Экспорт
	Возврат ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиБольшеНеПоказывать", "ПоказыватьОкноПредложенияОтправкиВФормализованномВиде", Истина);
КонецФункции

// Параметры:
//  Идентификатор - УникальныйИдентификатор - адрес во временном хранилище, по которому надо поместить данные
//  Организация - ОпределяемыйТип.Организация
//  МаршрутПодписания - СправочникСсылка.МаршрутыПодписания
//  Подписанты - Неопределено,ТаблицаЗначений:
//  * Подписант - СправочникСсылка.Пользователи
//  * Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
// 
// Возвращаемое значение:
//  Строка - адрес настроек во временном хранилище.
Функция СохранитьНастройкиВыбораМаршрутаПодписания(Идентификатор, Организация, МаршрутПодписания,
	Подписанты = Неопределено) Экспорт
	
	ДоступныеДляВыбораСертификаты = КриптографияБЭД.ДоступныеДляВыбораСертификатыПоОрганизации(Организация);
	
	ЗадаватьМаршрутВручную = Подписанты.Количество()
		И (МаршрутПодписания = Справочники.МаршрутыПодписания.УказыватьПриСоздании 
		Или Не ЗначениеЗаполнено(МаршрутПодписания));
	
	Возврат МаршрутыПодписанияБЭД.СохранитьНастройкиВыбораМаршрута(Идентификатор, ЗадаватьМаршрутВручную, 
		Подписанты, МаршрутПодписания, ДоступныеДляВыбораСертификаты);

КонецФункции

// Параметры:
//  АдресВоВременномХранилище - Строка
// 
// Возвращаемое значение:
//  См. НовыеДанныеПредварительногоПросмотраВстроенногоЭДО
Функция ДанныеПредварительногоПросмотраПоАдресу(АдресВоВременномХранилище) Экспорт
	Возврат ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
КонецФункции

#Область ПредварительныйПросмотр

// Возвращаемое значение:
//  Структура:
//  * ДлительнаяОперация - Неопределено
//                       - См. ДлительныеОперации.ВыполнитьФункцию
//  * Ошибка - Булево
//  * АдресСведенийОбОшибках - Строка
//  * АдресДанныхПредварительногоПросмотра - Строка
//  * КонтекстДиагностики - Неопределено
//                        - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Функция НовыйРезультатПодготовкиДанныхПредварительногоПросмотра() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("ДлительнаяОперация", Неопределено);
	Результат.Вставить("Ошибка", Ложь);
	Результат.Вставить("АдресСведенийОбОшибках", "");
	Результат.Вставить("АдресДанныхПредварительногоПросмотра", "");
	Результат.Вставить("КонтекстДиагностики", Неопределено);
	Возврат Результат;
КонецФункции

// Параметры:
//  ДлительнаяОперация - См. ДлительныеОперации.ВыполнитьФункцию
// 
// Возвращаемое значение:
//  См. НовыйРезультатПодготовкиДанныхПредварительногоПросмотра
Функция РезультатПодготовкиДанныхПросмотраПослеДлительнойОперации(ДлительнаяОперация) Экспорт
	
	КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	
	РезультатПодготовкиДанных = ОбщегоНазначенияБЭД.РезультатДлительнойОперации(ДлительнаяОперация,
		КонтекстДиагностики, НСтр("ru = 'Подготовка данных предварительного просмотра'"));
	
	Если ТипЗнч(РезультатПодготовкиДанных) = Тип("Структура") Тогда
		Возврат РезультатПодготовкиДанных;
	КонецЕсли;
	
	РезультатПодготовкиДанных = НовыйРезультатПодготовкиДанныхПредварительногоПросмотра();
	РезультатПодготовкиДанных.КонтекстДиагностики = КонтекстДиагностики;
	Возврат РезультатПодготовкиДанных;
	
КонецФункции

#КонецОбласти // ПредварительныйПросмотр

#Область ЗагрузкаФормализованногоДокументаXML

// Формирует данные электронного документа.
// 
// Параметры:
//  ВыбранныйФайл - Структура - данные выбранного файла:
//  * Хранение - Строка - расположение данных во временном хранилище
//  * Имя - Строка - путь к файлу / имя файла
//
// Возвращаемое значение:
//  См. НовыйРезультатПодготовкиДанныхПредварительногоПросмотраПоФайлуXML
Функция ПодготовитьДанныеПредварительногоПросмотраПоФайлуXML(ВыбранныйФайл) Экспорт
	
	Если ИспользоватьИнтеграциюОблачногоЭДО() Тогда
		Возврат ПодготовитьДанныеПредварительногоПросмотраПоФайлуXMLОблачногоЭДО(ВыбранныйФайл);
	Иначе
		Возврат ПодготовитьДанныеПредварительногоПросмотраПоФайлуXMLВстроенногоЭДО(ВыбранныйФайл);
	КонецЕсли;
	
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * ДлительнаяОперация - Неопределено
//                       - См. ДлительныеОперации.ВыполнитьФункцию
//  * Ошибка - Булево
//  * ДокументРаспознан - Булево
//  * АдресСведенийОбОшибках - Строка
//  * АдресДанных - Строка
//  * НастройкиФормирования - Неопределено
//                          - См. ИнтерфейсДокументовЭДОКлиентСервер.НовыеНастройкиФормированияЭлектронногоДокументаОбъектаУчета
//  * КонтекстДиагностики - Неопределено
//                        - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Функция НовыйРезультатПодготовкиДанныхПредварительногоПросмотраПоФайлуXML() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("ДлительнаяОперация", Неопределено);
	Результат.Вставить("Ошибка", Ложь);
	Результат.Вставить("ДокументРаспознан", Ложь);
	Результат.Вставить("АдресСведенийОбОшибках", "");
	Результат.Вставить("АдресДанных", "");
	Результат.Вставить("НастройкиФормирования", Неопределено);
	Результат.Вставить("КонтекстДиагностики", Неопределено);
	Возврат Результат;
КонецФункции

// Параметры:
//  ДлительнаяОперация - См. ДлительныеОперации.ВыполнитьФункцию
// 
// Возвращаемое значение:
//  См. НовыйРезультатПодготовкиДанныхПредварительногоПросмотраПоФайлуXML
Функция РезультатПодготовкиДанныхПросмотраПоФайлуXMLПослеДлительнойОперации(ДлительнаяОперация) Экспорт
	
	КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	
	РезультатПодготовкиДанных = ОбщегоНазначенияБЭД.РезультатДлительнойОперации(ДлительнаяОперация,
		КонтекстДиагностики, НСтр("ru = 'Подготовка данных предварительного просмотра по файлу XML'"));
	
	Если ТипЗнч(РезультатПодготовкиДанных) = Тип("Структура") Тогда
		Возврат РезультатПодготовкиДанных;
	КонецЕсли;
	
	РезультатПодготовкиДанных = НовыйРезультатПодготовкиДанныхПредварительногоПросмотраПоФайлуXML();
	РезультатПодготовкиДанных.КонтекстДиагностики = КонтекстДиагностики;
	Возврат РезультатПодготовкиДанных;
	
КонецФункции

// Параметры:
//  ДанныеДокумента - Структура:
//                    * Ссылка - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//                    * Организация - ОпределяемыйТип.Организация
//  ВыбранныйФайл - Структура - данные выбранного файла:
//  * Хранение - Строка - расположение данных во временном хранилище
//  * Имя - Строка - путь к файлу / имя файла
//  ПринудительнаяЗагрузка - Булево
// 
// Возвращаемое значение:
//  См. НовыйРезультатЗагрузкиФормализованногоДокументаПоДаннымФайлаXML
Функция ЗагрузитьФормализованныйДокументПоФайлуXML(ДанныеДокумента, ВыбранныйФайл,
	ПринудительнаяЗагрузка = Ложь) Экспорт
	
	Результат = НовыйРезультатЗагрузкиФормализованногоДокументаПоДаннымФайлаXML();
	
	СуществующийДокумент = ЭлектронныеДокументыЭДО.ИсходящийДокументПоИдентификаторуФайла(ВыбранныйФайл,
		ДанныеДокумента.Ссылка);
	Если ЗначениеЗаполнено(СуществующийДокумент) Тогда
		Результат.Успех = Ложь;
		Результат.СуществующийДокумент = СуществующийДокумент;
		Возврат Результат;
	КонецЕсли;
	
	ОписаниеФайла = РаботаСФайламиБЭД.ОписаниеФайлаПоДаннымПомещенногоФайла(ВыбранныйФайл);
	
	Если ПринудительнаяЗагрузка Тогда
		ЗагрузитьФормализованныйДокументПоДаннымФайлаXMLПослеПроверок(ДанныеДокумента, ОписаниеФайла, Результат,
			ПринудительнаяЗагрузка);
		Возврат Результат;
	КонецЕсли;
	
	РезультатПроверки = ПроверитьСоответствиеЗагружаемогоФайлаXMLОсновномуФайлуДокумента(ДанныеДокумента, ВыбранныйФайл);
	Если Не РезультатПроверки.Успех Тогда
		Результат.Успех = Ложь;
		Результат.Ошибки = ОбщегоНазначения.СкопироватьРекурсивно(РезультатПроверки.Ошибки);
		Возврат Результат;
	КонецЕсли;
	
	ЗагрузитьФормализованныйДокументПоДаннымФайлаXMLПослеПроверок(ДанныеДокумента, ОписаниеФайла, Результат);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти // ЗагрузкаФормализованногоДокументаXML

#КонецОбласти

#Область АлгоритмыУсловнойВидимостиКоманд

// Параметры:
//  Контрагент - ОпределяемыйТип.КонтрагентБЭД
// 
// Возвращаемое значение:
//  Булево
Функция ЕстьНастройкиПоКонтрагенту(Контрагент) Экспорт
	
	Запросы = Новый Массив;
	
	Отбор = НастройкиЭДО.НовыйОтборНастроекОтправки();
	Отбор.Получатель = "&Контрагент";
	ЗапросНастроек = НастройкиЭДО.ЗапросНастроекОтправки("НастройкиОтправки", Отбор);
	Запросы.Добавить(ЗапросНастроек);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Отправитель ИЗ НастройкиОтправки";
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	ИтоговыйЗапрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Возврат Не ИтоговыйЗапрос.Выполнить().Пустой();
	
КонецФункции

#КонецОбласти

#Область ПечатьЭлектронныхДокументов

// Формирует представление данных сообщения в виде табличного документа.
// Если представление имеет другой тип, то возвращается неопределено.
// 
// Параметры:
// 	Сообщение - ДокументСсылка.СообщениеЭДО - Сообщение для которого формируется представление.
// 	СообщениеОтвета - ДокументСсылка.СообщениеЭДО - Информация получателя для сообщения, переданного первым параметром.
// 	ПараметрыПечати - См. ФорматыЭДО.НовыеПараметрыВизуализацииДокумента.
//	ВыводитьШтампыПодписей - Булево - Определяет необходимость вывода штампа с подписями.
//
// Возвращаемое значение:
//  ТабличныйДокумент, Неопределено - Представление.
//
Функция ПредставлениеСообщения(Сообщение, СообщениеОтвета = Неопределено, ПараметрыПечати = Неопределено,
	ВыводитьШтампыПодписей = Истина) Экспорт
	
	ПараметрыПолученияПредставления = 
		ЭлектронныеДокументыЭДО.НовыеПараметрыПолученияПредставленияДанныхСообщенияПоСсылке();
	ПараметрыПолученияПредставления.Сообщение = Сообщение;
	ПараметрыПолученияПредставления.СообщениеОтвета = СообщениеОтвета;
	ПараметрыПолученияПредставления.СообщениеЗапроса = Сообщение;
	ПараметрыПолученияПредставления.ПараметрыВизуализации = ПараметрыПечати;
	
	РезультатФормирования = ЭлектронныеДокументыЭДО.ПредставлениеДанныхСообщенияПоСсылке(
		ПараметрыПолученияПредставления);
	ТабличныйДокумент = РезультатФормирования.ПредставлениеДокумента; 
	
	Если ТипЗнч(ТабличныйДокумент) = Тип("ТабличныйДокумент") Тогда
		Если ВыводитьШтампыПодписей Тогда
			ЭлектронныеДокументыЭДО.ДополнитьТабличныйДокументШтампамиПодписей(ТабличныйДокумент, Сообщение);
		КонецЕсли;
	Иначе
		ТабличныйДокумент = Неопределено;
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция КомандаПечатиОбъекта(Объект, Идентификатор) Экспорт
	
	Возврат КомандаПечатиОбъектаМетаданных(Объект.Метаданные(), Идентификатор);
	
КонецФункции

// Возвращает представление команды печати объекта.
//
// Параметры:
//  ИдентификаторОбъекта - СправочникСсылка.ИдентификаторыОбъектовМетаданных - идентификатор объекта метаданных.
//  ИдентификаторКоманды - Строка - идентификатор команды печати.
//
// Возвращаемое значение:
//  Строка - представление команды печати.
//
Функция ПредставлениеКомандыПечатиОбъекта(ИдентификаторОбъекта, ИдентификаторКоманды) Экспорт
	
	ОбъектМетаданных = ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(ИдентификаторОбъекта);
	
	КомандаПечати = КомандаПечатиОбъектаМетаданных(ОбъектМетаданных, ИдентификаторКоманды);
	
	Если ЗначениеЗаполнено(КомандаПечати) Тогда
		Возврат КомандаПечати.Представление;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// Возвращает печатные формы электронных документов.
//
// Параметры:
//  ЭлектронныеДокументы - Массив Из ДокументСсылка.ЭлектронныйДокументИсходящийЭДО,ДокументСсылка.ЭлектронныйДокументВходящийЭДО -
//   Электронные документы, печатные формы которых необходимо сформировать.
//  ПараметрыСоставаПечати - см. ИнтерфейсДокументовЭДО.ПараметрыСоставаПечатиЭлектронныхДокументов
//  ПараметрыВизуализации - см. ИнтерфейсДокументовЭДО.НовыеПараметрыВизуализацииДокумента
//
// Возвращаемое значение:
//  Массив Из Структура - Сформированные печатные формы. Элементы - структуры со свойствами:
//   * ИмяМакета - Строка - Уникальное имя макета.
//   * СинонимМакета - Строка - Наименование макета.
//   * ТабличныйДокумент - ТабличныйДокумент - Сформированная печатная форма.
//   * Ссылка - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО,ДокументСсылка.ЭлектронныйДокументВходящийЭДО - Ссылка
//     на документ, по которому сформирована печатная форма.
//
Функция СформироватьПечатныеФормыЭлектронныхДокументов(ЭлектронныеДокументы, ПараметрыСоставаПечати,
	ПараметрыВизуализации) Экспорт
	
	ПечатныеФормы = Новый Массив;
	КоличествоФайловДокументов = Новый Соответствие;
	
	МодульОбменСГИСЭПД = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");	
	КонецЕсли;
	
	ПротоколыОбмена = Новый Соответствие;
	Если ПараметрыСоставаПечати.ПечататьПротоколОбменаПоДокументу Тогда
		
		ПротоколыОбмена = Обработки.ПротоколОбменаПоДокументуЭДО.ПротоколыОбменаПоДокументам(ЭлектронныеДокументы);
	КонецЕсли;
	
	Для каждого ЭлектронныйДокумент Из ЭлектронныеДокументы Цикл
		
		КоличествоФайловДокумента = 0;
		
		Сообщение = Неопределено;
		СообщениеОтвета = Неопределено;
		ТехническиеСообщения = Новый Массив;
		
		ДанныеСхемыРегламента = ЭлектронныеДокументыЭДО.ДанныеЭлементовСхемыРегламента(ЭлектронныйДокумент);
		Для каждого ЭлементСхемыРегламента Из ДанныеСхемыРегламента Цикл
			
			Если ЭлементСхемыРегламента.Статус = Перечисления.СтатусыСообщенийЭДО.НеСформирован Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЭлементСхемыРегламента.ТипЭлементаРегламента =
				Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя
				Или (МодульОбменСГИСЭПД <> Неопределено 
					И МодульОбменСГИСЭПД.ЭтоТитулОтправителя(ЭлементСхемыРегламента.ТипЭлементаРегламента)) Тогда
				Сообщение = ЭлементСхемыРегламента.Сообщение;
			ИначеЕсли ЭлементСхемыРегламента.ТипЭлементаРегламента =
				Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя
				Или ЭлементСхемыРегламента.ТипЭлементаРегламента = 
				Перечисления.ТипыЭлементовРегламентаЭДО.ДопСведенияПоРезультатамПриемки
				Или (МодульОбменСГИСЭПД <> Неопределено 
					И МодульОбменСГИСЭПД.ЭтоТитулПолучателя(ЭлементСхемыРегламента.ТипЭлементаРегламента)) Тогда
				СообщениеОтвета = ЭлементСхемыРегламента.Сообщение;
			Иначе
				ТехническиеСообщения.Добавить(ЭлементСхемыРегламента.Сообщение);
			КонецЕсли;
			
		КонецЦикла;
		
		Если Сообщение = Неопределено И СообщениеОтвета = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПредставлениеДокумента = ЭлектронныеДокументыЭДО.ПредставлениеДокумента(ЭлектронныйДокумент);
		
		ЭлектронныйДокументНапечатан = Ложь;
		
		Если ПараметрыСоставаПечати.ПечататьЭлектронныйДокумент Тогда
			
			ТабличныйДокумент = ПредставлениеСообщения(Сообщение, СообщениеОтвета, ПараметрыВизуализации,
				ПараметрыСоставаПечати.ВыводитьШтампыПодписей);
			ИмяМакета = "ЭлектронныйДокумент" + ЭлектронныйДокумент.УникальныйИдентификатор();
			СинонимМакета = ПредставлениеДокумента;
			Если ПараметрыСоставаПечати.ДополнятьСинонимМакетаВидомПечатнойФормы Тогда
				СинонимМакета = СтрШаблон("%1 (%2)", СинонимМакета, НСтр("ru = 'Электронный документ'")); 
			КонецЕсли;
			
			Если ДобавитьПечатнуюФорму(ПечатныеФормы, ИмяМакета, СинонимМакета, ТабличныйДокумент,
				ЭлектронныйДокумент) Тогда
				ЭлектронныйДокументНапечатан = Истина;
				КоличествоФайловДокумента = КоличествоФайловДокумента + 1;
			КонецЕсли;
			
		КонецЕсли;
		
		НужноПечататьКарточкуЭлектронногоДокумента = ПараметрыСоставаПечати.ПечататьКарточкуЭлектронногоДокумента;
		
		Если Не НужноПечататьКарточкуЭлектронногоДокумента Тогда
			НужноПечататьКарточкуЭлектронногоДокумента =
				ПараметрыСоставаПечати.ПечататьКарточкуЕслиНеУдалосьНапечататьЭлектронныйДокумент
				И ПараметрыСоставаПечати.ПечататьЭлектронныйДокумент И Не ЭлектронныйДокументНапечатан;
		КонецЕсли;
		
		Если НужноПечататьКарточкуЭлектронногоДокумента Тогда
		
			ТабличныйДокумент = ПредставлениеКарточкиСообщения(Сообщение, СообщениеОтвета);
			ИмяМакета = "КарточкаДокумента" + ЭлектронныйДокумент.УникальныйИдентификатор();
			СинонимМакета = ПредставлениеДокумента;
			Если ПараметрыСоставаПечати.ДополнятьСинонимМакетаВидомПечатнойФормы Тогда
				СинонимМакета = СтрШаблон("%1 (%2)", СинонимМакета, НСтр("ru = 'Карточка электронного документа'")); 
			КонецЕсли;
			
			Если ДобавитьПечатнуюФорму(ПечатныеФормы, ИмяМакета, СинонимМакета, ТабличныйДокумент,
				ЭлектронныйДокумент) Тогда
				КоличествоФайловДокумента = КоличествоФайловДокумента + 1;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПараметрыСоставаПечати.ПечататьТехнологическиеКвитанции Тогда
			
			ВидыСообщений = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ТехническиеСообщения, "ВидСообщения");
			
			Для каждого ТехническоеСообщение Из ТехническиеСообщения Цикл
				
				ТабличныйДокумент = ПредставлениеСообщения(ТехническоеСообщение, СообщениеОтвета, ПараметрыВизуализации,
					ПараметрыСоставаПечати.ВыводитьШтампыПодписей);
				ИмяМакета = "Сообщение" + ТехническоеСообщение.УникальныйИдентификатор();
				СинонимМакета = ПредставлениеДокумента;
				Если ПараметрыСоставаПечати.ДополнятьСинонимМакетаВидомПечатнойФормы Тогда
					ВидСообщения = ВидыСообщений[ТехническиеСообщения];
					ЭлементРегламента = ДанныеСхемыРегламента.Найти(ТехническоеСообщение, "Сообщение");
					Если ЭлементРегламента.ТипЭлементаРегламента = 
						Перечисления.ТипыЭлементовРегламентаЭДО.ДопСведенияПоРезультатамПриемки Тогда
						ВидСообщения = НСтр("ru = 'Дополнительные сведения по итогам приемки';");
					ИначеЕсли ТехническоеСообщение = СообщениеОтвета Тогда
						ВидСообщения = НСтр("ru = 'Информация получателя'");
					Иначе
						ВидСообщения = ВидыСообщений[ТехническоеСообщение];
					КонецЕсли;
					СинонимМакета = СтрШаблон("%1 (%2)", СинонимМакета, Строка(ВидСообщения)); 
				КонецЕсли;
				
				Если ДобавитьПечатнуюФорму(ПечатныеФормы, ИмяМакета, СинонимМакета, ТабличныйДокумент,
					ЭлектронныйДокумент) Тогда
					КоличествоФайловДокумента = КоличествоФайловДокумента + 1;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ПараметрыСоставаПечати.ПечататьПротоколОбменаПоДокументу Тогда
			ТабличныйДокументПротокола = ПротоколыОбмена.Получить(ЭлектронныйДокумент);
			Если ТабличныйДокументПротокола <> Неопределено Тогда
				ИмяМакета = "ПротоколОбменаПоДокументу" + ЭлектронныйДокумент.УникальныйИдентификатор();
				СинонимМакета = СтрШаблон("%1 - %2",
					НСтр("ru = 'Протокол обмена по документу'"), ПредставлениеДокумента);
				Если ДобавитьПечатнуюФорму(ПечатныеФормы, ИмяМакета, СинонимМакета, ТабличныйДокументПротокола,
					ЭлектронныйДокумент) Тогда
					КоличествоФайловДокумента = КоличествоФайловДокумента + 1;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		КоличествоФайловДокументов.Вставить(ЭлектронныйДокумент, КоличествоФайловДокумента);
		
	КонецЦикла;
	
	Если ПараметрыСоставаПечати.ПечататьРеестрЭлектронныхДокументов Тогда
		
		ТабличныйДокумент = СформироватьРеестрЭлектронныхДокументов(ЭлектронныеДокументы, КоличествоФайловДокументов);
		ИмяМакета = "РеестрЭлектронныхДокументов";
		СинонимМакета = НСтр("ru = 'Реестр электронных документов'");
		
		ДобавитьПечатнуюФорму(ПечатныеФормы, ИмяМакета, СинонимМакета, ТабличныйДокумент);
		
	КонецЕсли;
	
	Возврат ПечатныеФормы;
	
КонецФункции

// Возвращает параметры для передачи в функцию ИнтерфейсДокументовЭДО.СформироватьПечатныеФормыЭлектронныхДокументов().
//
// Возвращаемое значение:
//  Структура - параметры, определяющие состав печати электронных документов:
//   * ПечататьЭлектронныйДокумент - Булево - Нужно печатать электронные документы.
//   * ПечататьТехнологическиеКвитанции - Булево - Нужно печатать технические документы, подтверждающие
//                                                 прохождение этапов в документообороте.
//   * ПечататьКарточкуЭлектронногоДокумента - Булево - Нужно печатать карточки электронных документов.
//   * ПечататьРеестрЭлектронныхДокументов - Булево - Нужно печатать реестр электронных документов.
//   * ПечататьКарточкуЕслиНеУдалосьНапечататьЭлектронныйДокумент - Булево - Если не удалось напечатать электронный
//                                                                      документ, тогда печатаем карточку документа.
//   * ВыводитьШтампыПодписей - Булево - Нужно выводить штампы подписей.
//   * ДополнятьСинонимМакетаВидомПечатнойФормы - Булево - К синониму макета добавляется вид печатной формы в скобках.
//
Функция ПараметрыСоставаПечатиЭлектронныхДокументов() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ПечататьЭлектронныйДокумент", Истина);
	Результат.Вставить("ПечататьТехнологическиеКвитанции", Ложь);
	Результат.Вставить("ПечататьКарточкуЭлектронногоДокумента", Ложь);
	Результат.Вставить("ПечататьРеестрЭлектронныхДокументов", Ложь);
	Результат.Вставить("ПечататьКарточкуЕслиНеУдалосьНапечататьЭлектронныйДокумент", Ложь);
	Результат.Вставить("ПечататьПротоколОбменаПоДокументу", Ложь);
	Результат.Вставить("ВыводитьШтампыПодписей", Истина);
	Результат.Вставить("ДополнятьСинонимМакетаВидомПечатнойФормы", Ложь);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ВыгрузкаЭлектронныхДокументов

// Выгружает электронные документы в формате PDF в архив
//
// Параметры:
//  ЭлектронныеДокументы - Массив - Электронные документы, которые необходимо выгрузить.
//  АдресДанныхВХранилище - Строка - адрес данных или уникальный идентификатор для помещения в хранилище
//  данного идентификатора
//
// Возвращаемое значение:
//  Соответствие - Данные о выгруженных файлах:
//   * Ключ - Структура - Данные файла:
//    ** ИмяФайла - Строка
//    ** ИмяБезРасширения - Строка
//    ** Расширение - Строка
//    ** Размер - Число
//   * Значение - Строка - Адрес архива во временном хранилище
//
Функция СформироватьФайлыВыгрузкиЭДВФорматеPDF(Знач ЭлектронныеДокументы, Знач АдресДанныхВХранилище) Экспорт
	
	ЭтоМассовоеШтампирование = ЭлектронныеДокументы.Количество() > 1;
	
	ПараметрыСоставаПечати = ПараметрыСоставаПечатиЭлектронныхДокументов();
	ПараметрыСоставаПечати.ПечататьЭлектронныйДокумент = Истина;
	ПараметрыСоставаПечати.ПечататьТехнологическиеКвитанции = Ложь;
	ПараметрыСоставаПечати.ПечататьКарточкуЭлектронногоДокумента = Ложь;
	ПараметрыСоставаПечати.ПечататьРеестрЭлектронныхДокументов = Ложь; // Реестр будет сформирован позже
	ПараметрыСоставаПечати.ПечататьКарточкуЕслиНеУдалосьНапечататьЭлектронныйДокумент = Ложь;
	ПараметрыСоставаПечати.ВыводитьШтампыПодписей = Истина;
	ПараметрыСоставаПечати.ДополнятьСинонимМакетаВидомПечатнойФормы = Ложь;
	ПараметрыСоставаПечати.ПечататьПротоколОбменаПоДокументу = Истина;
	
	ПараметрыВизуализации = НовыеПараметрыВизуализацииДокумента();
	ПараметрыВизуализации.ВыводитьБанковскиеРеквизиты = Ложь;
	ПараметрыВизуализации.ВыводитьДопДанные = Ложь;
	ПараметрыВизуализации.ВыводитьКопияВерна = Ложь;
	
	ПечатныеФормы = СформироватьПечатныеФормыЭлектронныхДокументов(ЭлектронныеДокументы, ПараметрыСоставаПечати,
		ПараметрыВизуализации);
	
	АдресКаталога = РаботаСФайламиБЭД.ВременныйКаталог();
	РаботаСФайламиБЭД.УдалитьВременныеФайлы(АдресКаталога, "*");
	
	МассивФайлов = Новый Массив;
	КоличествоФайловДокументов = Новый Соответствие;
	
	Для каждого ДанныеПечатнойФормы Из ПечатныеФормы Цикл
			
		ИмяФайла = РаботаСФайламиБЭДКлиентСервер.ДопустимоеИмяФайла(ДанныеПечатнойФормы.СинонимМакета, Истина);
		ПолноеИмяФайла = АдресКаталога + ИмяФайла + ".pdf";
		ПолноеИмяФайла = РаботаСФайламиБЭДКлиентСервер.ОпределитьУникальноеИмяФайла(ПолноеИмяФайла);
		
		ДанныеПечатнойФормы.ТабличныйДокумент.Записать(ПолноеИмяФайла, ТипФайлаТабличногоДокумента.PDF);
		
		МассивФайлов.Добавить(ПолноеИмяФайла);
		
		КоличествоФайловДокументов.Вставить(ДанныеПечатнойФормы.Ссылка, 1);
		
	КонецЦикла;
	
	ДокументыСПечатнымиФормамиОсновногоФайла = Новый Массив;
	Для каждого ДанныеПечатнойФормы Из ПечатныеФормы Цикл
		Если СтрНачинаетсяС(ДанныеПечатнойФормы.ИмяМакета, "ЭлектронныйДокумент")
			Или СтрНачинаетсяС(ДанныеПечатнойФормы.ИмяМакета, "КарточкаДокумента") Тогда
			ДокументыСПечатнымиФормамиОсновногоФайла.Добавить(ДанныеПечатнойФормы.Ссылка);
		КонецЕсли;
	КонецЦикла;
	ДокументыБезПечатныхФорм = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ЭлектронныеДокументы,
		ДокументыСПечатнымиФормамиОсновногоФайла);
	
	Для каждого ЭлектронныйДокумент Из ДокументыБезПечатныхФорм Цикл
		
		ОсновнойФайл = ЭлектронныеДокументыЭДО.ОсновнойФайлИнформацииОтправителя(ЭлектронныйДокумент);
		ДанныеФайла = ИнтерфейсДокументовЭДОВызовСервера.ДанныеФайла(ОсновнойФайл, , ЭтоМассовоеШтампирование);
		
		ПолноеИмяФайла = АдресКаталога + ДанныеФайла.ИмяФайла;
		ПолноеИмяФайла = РаботаСФайламиБЭДКлиентСервер.ОпределитьУникальноеИмяФайла(ПолноеИмяФайла);
		
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
		ДвоичныеДанныеФайла.Записать(ПолноеИмяФайла);
		
		МассивФайлов.Добавить(ПолноеИмяФайла);
		
		КоличествоФайловДокументов.Вставить(ЭлектронныйДокумент, 1);
		
	КонецЦикла;
	
	СоответствиеДанныеФайлаАдресВХранилище = Новый Соответствие;
	
	Если МассивФайлов.Количество() = 0 Тогда
		Возврат СоответствиеДанныеФайлаАдресВХранилище;
	КонецЕсли;
	
	ПолноеИмяФайла = АдресКаталога + НСтр("ru = 'Реестр электронных документов'") + ".pdf";
	ТабличныйДокумент = СформироватьРеестрЭлектронныхДокументов(ЭлектронныеДокументы,
		КоличествоФайловДокументов);
	ТабличныйДокумент.Записать(ПолноеИмяФайла, ТипФайлаТабличногоДокумента.PDF);
	МассивФайлов.Добавить(ПолноеИмяФайла);
	
	ИмяФайла = СтрШаблон(НСтр("ru = 'Выгрузка от %1'"), Формат(ТекущаяДатаСеанса(), "ДФ=dd.MM.yyyy;"));
	ИмяФайлаКонтейнера = АдресКаталога + ИмяФайла + ".zip";
	
	РаботаСФайламиБЭД.СформироватьАрхивФайлов(МассивФайлов, ИмяФайлаКонтейнера);
	
	ДвоичныеДанныеКонтейнера = Новый ДвоичныеДанные(ИмяФайлаКонтейнера);
	ДанныеФайла = РаботаСФайламиБЭД.ДанныеФайла(ИмяФайлаКонтейнера);
	ДанныеФайла.Вставить("ЭлектронныеДокументы", ЭлектронныеДокументы);
	
	РаботаСФайламиБЭД.УдалитьВременныеФайлы(АдресКаталога, "*");
	
	АдресДанных = ПоместитьВоВременноеХранилище(ДвоичныеДанныеКонтейнера, АдресДанныхВХранилище);
	СоответствиеДанныеФайлаДвоичныеДанные = Новый Соответствие;
	СоответствиеДанныеФайлаДвоичныеДанные.Вставить(ДанныеФайла, АдресДанных);
	
	Возврат СоответствиеДанныеФайлаДвоичныеДанные;
	
КонецФункции

// Выгружает документооборот по электронным документам в архив.
//
// Параметры:
//  ЭлектронныеДокументы - Массив - Электронные документы, которые необходимо выгрузить.
//  АдресДанныхВХранилище - УникальныйИдентификатор, Строка - адрес данных или уникальный идентификатор для помещения в хранилище
//  данного идентификатора
//
// Возвращаемое значение:
//  Соответствие из КлючИЗначение - Данные о выгруженных файлах:
//   * Ключ - Структура - Данные файла:
//    ** ИмяФайла - Строка
//    ** ИмяБезРасширения - Строка
//    ** Расширение - Строка
//    ** Размер - Число
//   * Значение - Строка - Адрес архива во временном хранилище
//
Функция СформироватьФайлыВыгрузкиЭДДокументооборотЦеликом(Знач ЭлектронныеДокументы, Знач АдресДанныхВХранилище) Экспорт
	
	СоответствиеДанныеФайлаДвоичныеДанные = Новый Соответствие;
	
	ПрисоединенныеФайлыЭлектронныхДокументов = ЭлектронныеДокументыЭДО.ПрисоединенныеФайлыЭлектронныхДокументов(ЭлектронныеДокументы);
	ПрисоединенныеФайлыЭлектронныхДокументов.Индексы.Добавить("ЭлектронныйДокумент");
	
	Если ПрисоединенныеФайлыЭлектронныхДокументов.Количество() = 0 Тогда
		Возврат СоответствиеДанныеФайлаДвоичныеДанные;
	КонецЕсли;
	
	СообщенияЭДО = ПрисоединенныеФайлыЭлектронныхДокументов.ВыгрузитьКолонку("СообщениеЭДО");
	ТипыСообщенийЭДО = ЭлектронныеДокументыЭДО.ТипыСообщенийКратко(СообщенияЭДО);
	
	АдресКаталога = РаботаСФайламиБЭД.ВременныйКаталог();
	РаботаСФайламиБЭД.УдалитьВременныеФайлы(АдресКаталога, "*");
	
	АдресКаталогаФайлов = АдресКаталога + "Файлы" + ПолучитьРазделительПути();
	СоздатьКаталог(АдресКаталогаФайлов);
	
	РасширениеДляФайловПодписи = ЭлектроннаяПодпись.ПерсональныеНастройки().РасширениеДляФайловПодписи;
	
	Для каждого ЭлектронныйДокумент Из ЭлектронныеДокументы Цикл
		
		ПараметрыОтбораФайлов = Новый Структура("ЭлектронныйДокумент", ЭлектронныйДокумент);
		ФайлыДокумента = ПрисоединенныеФайлыЭлектронныхДокументов.НайтиСтроки(ПараметрыОтбораФайлов);
		Если ФайлыДокумента.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПредставлениеДокумента = ЭлектронныеДокументыЭДО.ПредставлениеДокумента(ЭлектронныйДокумент);
		КаталогДокумента = АдресКаталогаФайлов + ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(
			ПредставлениеДокумента);
		КаталогДокумента = РаботаСФайламиБЭДКлиентСервер.ОпределитьУникальноеИмяФайла(КаталогДокумента, Истина)
			+ ПолучитьРазделительПути();
		СоздатьКаталог(КаталогДокумента);
		
		Для каждого ФайлДокумента Из ФайлыДокумента Цикл
			
			ПрисоединенныйФайл = ФайлДокумента.ПрисоединенныйФайл;
			
			КаталогСообщения = КаталогДокумента + ТипыСообщенийЭДО[ФайлДокумента.СообщениеЭДО];
			КаталогСообщения = РаботаСФайламиБЭДКлиентСервер.ОпределитьУникальноеИмяФайла(КаталогСообщения, Истина)
				+ ПолучитьРазделительПути();
			
			ДанныеФайла = РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл);
			
			ИмяФайла = ДанныеФайла.ИмяФайла;
			ПолноеИмяФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрисоединенныйФайл, "ПолноеИмяФайла");
			Если Не ПустаяСтрока(ПолноеИмяФайла) И (СтрДлина(ПолноеИмяФайла) > СтрДлина(ИмяФайла)) Тогда
				СтруктураИмениФайла =
					ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ИмяФайла);
				СтруктураИмениПрисоединенногоФайла =
					ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПолноеИмяФайла);
				ИмяФайла = СтруктураИмениПрисоединенногоФайла.ИмяБезРасширения + СтруктураИмениФайла.Расширение;
			КонецЕсли;
			
			ИмяФайла = КаталогСообщения + ИмяФайла;
			ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
			ДвоичныеДанныеФайла.Записать(ИмяФайла);
			
			КоллекцияПодписей = ЭлектроннаяПодпись.УстановленныеПодписи(ПрисоединенныйФайл);
			Для каждого ВсеСвойстваПодписи Из КоллекцияПодписей Цикл
				
				МассивСлов = СтрРазделить(ВсеСвойстваПодписи.КомуВыданСертификат, " ", Ложь);
				Если МассивСлов.Количество() > 0 Тогда
					ИмяФайлаПодписи = СтрШаблон("%1%2%3", "Подпись", "-", МассивСлов[0]);
					ИмяФайлаСертификата = СтрШаблон("%1%2%3", "Сертификат", "-", МассивСлов[0]);
				Иначе
					ИмяФайлаПодписи = СтрШаблон("%1%2%3", "Подпись", "", "");
					ИмяФайлаСертификата = СтрШаблон("%1%2%3", "Сертификат", "", "");
				КонецЕсли;
				
				Если ТипЗнч(ВсеСвойстваПодписи.Подпись) = Тип("ДвоичныеДанные") Тогда
					ПутьКФайлу = СтрШаблон("%1%2.%3", КаталогСообщения, ИмяФайлаПодписи, РасширениеДляФайловПодписи);
					ВсеСвойстваПодписи.Подпись.Записать(ПутьКФайлу);
				КонецЕсли;
				
				Если ТипЗнч(ВсеСвойстваПодписи.Сертификат) = Тип("ДвоичныеДанные") Тогда
					ДвоичныеДанныеСертификата = ВсеСвойстваПодписи.Сертификат;
				Иначе
					ДвоичныеДанныеСертификата = ВсеСвойстваПодписи.Сертификат.Получить();
				КонецЕсли;
				
				Если ТипЗнч(ДвоичныеДанныеСертификата) = Тип("ДвоичныеДанные") Тогда
					ПутьКФайлу = СтрШаблон("%1%2.%3", КаталогСообщения, ИмяФайлаСертификата, "cer");
					ДвоичныеДанныеСертификата.Записать(ПутьКФайлу);
				ИначеЕсли ТипЗнч(ДвоичныеДанныеСертификата) = Тип("Строка") Тогда
					ПутьКФайлу = СтрШаблон("%1%2.%3", КаталогСообщения, ИмяФайлаСертификата, "txt");
					ЗаписьТекста = Новый ЗаписьТекста(ПутьКФайлу, КодировкаТекста.UTF8);
					ЗаписьТекста.Записать(ДвоичныеДанныеСертификата);
					ЗаписьТекста.Закрыть();
				КонецЕсли;

			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ИмяФайла = СтрШаблон(НСтр("ru = 'Выгрузка от %1'"), Формат(ТекущаяДатаСеанса(), "ДФ=dd.MM.yyyy;"));
	ИмяФайлаКонтейнера = АдресКаталога + ИмяФайла + ".zip";
	
	МассивФайлов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(АдресКаталогаФайлов + "*");
	ПараметрыФормированияАрхива = РаботаСФайламиБЭД.НовыеПараметрыФормированияАрхива();
	ПараметрыФормированияАрхива.РежимСохраненияПутей = РежимСохраненияПутейZIP.СохранятьОтносительныеПути;
	ПараметрыФормированияАрхива.РежимОбработкиПодкаталогов = РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно;
	
	РаботаСФайламиБЭД.СформироватьАрхивФайлов(МассивФайлов, ИмяФайлаКонтейнера, ПараметрыФормированияАрхива);
	
	ДвоичныеДанныеКонтейнера = Новый ДвоичныеДанные(ИмяФайлаКонтейнера);
	ДанныеФайла = РаботаСФайламиБЭД.ДанныеФайла(ИмяФайлаКонтейнера);
	ДанныеФайла.Вставить("ЭлектронныеДокументы", ЭлектронныеДокументы);
	
	АдресДанных = ПоместитьВоВременноеХранилище(ДвоичныеДанныеКонтейнера, АдресДанныхВХранилище);
	СоответствиеДанныеФайлаДвоичныеДанные.Вставить(ДанныеФайла, АдресДанных);
	
	РаботаСФайламиБЭД.УдалитьВременныеФайлы(АдресКаталога, "*");
	
	Возврат СоответствиеДанныеФайлаДвоичныеДанные;
	
КонецФункции

// См. ИнтеграцияБРОЭДО.СформироватьФайлыВыгрузкиЭДДляФНС().
Функция СформироватьФайлыВыгрузкиЭДДляФНС(Знач ЭлектронныеДокументы) Экспорт
	
	Возврат ИнтеграцияБРОЭДО.СформироватьФайлыВыгрузкиЭДДляФНС(ЭлектронныеДокументы);
	
КонецФункции

// Параметры:
//  ВыгруженныеФайлы - Массив из ОписаниеПереданногоФайла
Процедура УдалитьВыгруженныеФайлыИзХранилища(ВыгруженныеФайлы) Экспорт
	
	Если Не ЗначениеЗаполнено(ВыгруженныеФайлы) Тогда
		Возврат;
	КонецЕсли;

	Для Каждого ОписаниеСохраненногоФайла Из ВыгруженныеФайлы Цикл
		УдалитьИзВременногоХранилища(ОписаниеСохраненногоФайла.Хранение);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаПредупрежденийКомпонентов

Функция ПолучитьПредупрежденияКомпонентов(КлючНастроекОтправки) Экспорт
	
	Предупреждения = Новый Массив;

	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Предупреждения, НастройкиЭДО.ПредупрежденияКомпонента(КлючНастроекОтправки));
	
	Возврат Предупреждения;
	
КонецФункции

#КонецОбласти

#Область РаботаСФормами

// Параметры:
//  ДоступныеДействия - Соответствие из КлючИЗначение:
//  * Ключ - ПеречислениеСсылка.СостоянияДокументовЭДО
//  * Значение - Булево
//  ДействиеПоЭДО - ПеречислениеСсылка.ДействияПоЭДО
// 
// Возвращаемое значение:
//  Булево
Функция ЕстьДействиеПоЭДО(ДоступныеДействия, ДействиеПоЭДО) Экспорт
	Возврат ДоступныеДействия[ДействиеПоЭДО] <> Неопределено
		И ЭлектронныеДокументыЭДО.ЕстьПравоОбработкиДокументов();
КонецФункции

#Область ПредставленияКоманд

Функция ПредставлениеКомандыПодписать(ПакетСоставной, СостоянияПакетаОднородно) Экспорт
	
	Если ПакетСоставной Тогда		
		Если СостоянияПакетаОднородно Тогда			
			Возврат НСтр("ru = 'Подписать пакет'");
		Иначе			
			Возврат НСтр("ru = 'Подписать документ'");
		КонецЕсли;	
	Иначе
		Возврат НСтр("ru = 'Подписать'");
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеКомандыОтправить(ПакетСоставной, СостоянияПакетаОднородно) Экспорт
	
	Если ПакетСоставной Тогда		
		Если СостоянияПакетаОднородно Тогда			
			Возврат НСтр("ru = 'Отправить пакет'");
		Иначе
			Возврат НСтр("ru = 'Отправить документ'");
		КонецЕсли;	
	Иначе
		Возврат НСтр("ru = 'Отправить'");
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеКомандыПодписатьИОтправить(ПакетСоставной, СостоянияПакетаОднородно) Экспорт
	
	Если ПакетСоставной Тогда		
		Если СостоянияПакетаОднородно Тогда			
			Возврат НСтр("ru = 'Подписать и отправить пакет'");
		Иначе			
			Возврат НСтр("ru = 'Подписать и отправить документ'");
		КонецЕсли;	
	Иначе
		Возврат НСтр("ru = 'Подписать и отправить'");
	КонецЕсли;

КонецФункции

Функция ПредставлениеКомандыПринятьАннулирование(ПакетСоставной, СостоянияПакетаОднородно) Экспорт
	
	Если ПакетСоставной Тогда		
		Если СостоянияПакетаОднородно Тогда			
			Возврат НСтр("ru = 'Согласиться с аннулированием пакета'");
		Иначе			
			Возврат НСтр("ru = 'Согласиться с аннулированием документа'");
		КонецЕсли;	
	Иначе
		Возврат НСтр("ru = 'Согласиться с аннулированием'");
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеКомандыОтклонитьАннулирование(ПакетСоставной, СостоянияПакетаОднородно) Экспорт
	
	Если ПакетСоставной Тогда		
		Если СостоянияПакетаОднородно Тогда			
			Возврат НСтр("ru = 'Не согласиться с аннулированием пакета'");		
		Иначе
			Возврат НСтр("ru = 'Не согласиться с аннулированием документа'");		
		КонецЕсли;	
	Иначе
		Возврат НСтр("ru = 'Не согласиться с аннулированием'");
	КонецЕсли;

КонецФункции

Функция ПредставлениеКомандыОтклонить(ПакетСоставной, СостоянияПакетаОднородно) Экспорт
	
	Если ПакетСоставной Тогда		
		Если СостоянияПакетаОднородно Тогда			
			Возврат НСтр("ru = 'Отклонить пакет'");
		Иначе			
			Возврат НСтр("ru = 'Отклонить документ'");			
		КонецЕсли;	
	Иначе
		Возврат НСтр("ru = 'Отклонить'");
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеКомандыОтклонитьПодписание(ПакетСоставной, СостоянияПакетаОднородно) Экспорт
	
	Если ПакетСоставной Тогда		
		Если СостоянияПакетаОднородно Тогда			
			Возврат НСтр("ru = 'Отказаться от подписания пакета'");
		Иначе			
			Возврат НСтр("ru = 'Отказаться от подписания документа'");			
		КонецЕсли;	
	Иначе
		Возврат НСтр("ru = 'Отказаться от подписания'");
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеКомандыПереформировать(ПакетСоставной, СостоянияПакетаОднородно) Экспорт
	
	Если ПакетСоставной Тогда		
		Если СостоянияПакетаОднородно Тогда			
			Возврат НСтр("ru = 'Переформировать пакет'");
		Иначе
			Возврат НСтр("ru = 'Переформировать документ'");
		КонецЕсли;	
	Иначе
		Возврат НСтр("ru = 'Переформировать'");
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеКомандыАннулировать(ПакетСоставной, СостоянияПакетаОднородно) Экспорт
	
	Если ПакетСоставной Тогда		
		Если СостоянияПакетаОднородно Тогда			
			Возврат  НСтр("ru = 'Аннулировать пакет'");
		Иначе
			Возврат НСтр("ru = 'Аннулировать документ'");			
		КонецЕсли;	
	Иначе
		Возврат НСтр("ru = 'Аннулировать'");
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеКомандыЗакрытьПринудительно(ПакетСоставной, СостоянияПакетаОднородно) Экспорт
	
	Если ПакетСоставной Тогда		
		Если СостоянияПакетаОднородно Тогда			
			Возврат  НСтр("ru = 'Закрыть принудительно пакет'");
		Иначе
			Возврат НСтр("ru = 'Закрыть принудительно документ'");			
		КонецЕсли;	
	Иначе
		Возврат НСтр("ru = 'Закрыть принудительно'");
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеКомандыОтправитьВАрхив(ПакетСоставной, СостоянияПакетаОднородно) Экспорт
	
	Если ПакетСоставной Тогда		
		Если СостоянияПакетаОднородно Тогда			
			Возврат НСтр("ru = 'Отправить пакет в архив'");
		Иначе
			Возврат НСтр("ru = 'Отправить документ в архив'");
		КонецЕсли;	
	Иначе
		Возврат НСтр("ru = 'Отправить в архив'");
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеКомандыВернутьВРаботу(ПакетСоставной, СостоянияПакетаОднородно) Экспорт
	
	Если ПакетСоставной Тогда		
		Если СостоянияПакетаОднородно Тогда			
			Возврат НСтр("ru = 'Вернуть пакет в работу'");
		Иначе
			Возврат НСтр("ru = 'Вернуть документ в работу'");
		КонецЕсли;	
	Иначе
		Возврат НСтр("ru = 'Вернуть в работу'");
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеКомандыОтправитьПовторно(ПакетСоставной, СостоянияПакетаОднородно) Экспорт
	
	Если ПакетСоставной Тогда		
		Если СостоянияПакетаОднородно Тогда			
			Возврат НСтр("ru = 'Отправить пакет повторно'");			
		Иначе
			Возврат НСтр("ru = 'Отправить документ повторно'");			
		КонецЕсли;	
	Иначе
		Возврат НСтр("ru = 'Отправить повторно'");
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеКомандыУтвердить(ПакетСоставной, СостоянияПакетаОднородно) Экспорт
	
	Если ПакетСоставной Тогда		
		Если СостоянияПакетаОднородно Тогда			
			Возврат НСтр("ru = 'Утвердить пакет'");			
		Иначе
			Возврат НСтр("ru = 'Утвердить документ'");			
		КонецЕсли;	
	Иначе
		Возврат НСтр("ru = 'Утвердить'");
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ТекущиеДела

Процедура ИнициализироватьРазделыТекущихДел(ОписаниеРазделов) Экспорт
	
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "Входящие", НСтр("ru = 'Входящие'"), , ОбщегоНазначения.ЭтоМобильныйКлиент());
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "Обработать", НСтр("ru = 'Отразить в учете'"));
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "Утвердить", НСтр("ru = 'Утвердить'"));
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "Подписать", НСтр("ru = 'Подписать'"));
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "Исправить", НСтр("ru = 'Исправить'"));
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "Аннулировать", НСтр("ru = 'Аннулировать'"));
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "НаКонтроле", НСтр("ru = 'На контроле'"));
	
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "Исходящие", НСтр("ru = 'Исходящие'"), , ОбщегоНазначения.ЭтоМобильныйКлиент());
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "Сформировать", НСтр("ru = 'Создать'"));
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "ПодписатьИсх", НСтр("ru = 'Подписать'"));
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "ИсправитьИсх", НСтр("ru = 'Исправить'"));
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "АннулироватьИсх", НСтр("ru = 'Аннулировать'"));
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "НаКонтролеИсх", НСтр("ru = 'На контроле'"));
	
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "Ознакомиться", НСтр("ru = 'Ознакомиться'"));
	
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "Отправить", НСтр("ru = 'Отправить'"));
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "Распаковать", НСтр("ru = 'Распаковать'"));
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "Ошибки", НСтр("ru = 'Ошибки'"));
	
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "Приглашения", НСтр("ru = 'Приглашения'"), , Ложь);
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "ТребуетсяПригласить", НСтр("ru = 'Требуется пригласить'"));
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "ЖдемСогласия", НСтр("ru = 'Ждем согласия'"));
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "ТребуетсяСогласие", НСтр("ru = 'Требуется согласие'"));
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "ПриглашенияОзнакомиться", НСтр("ru = 'Ознакомиться'"));
	
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "НоменклатураКонтрагентов", НСтр("ru = 'Сопоставить'"));
	
КонецПроцедуры

#КонецОбласти

// Скрывает все элементы на форме
//
// Параметры:
//  Элементы - ВсеЭлементыФормы - содержит коллекцию всех элементов формы клиентского приложения для прямого доступа вне зависимости от иерархии.
//
Процедура СкрытьВсеЭлементыФормы(Элементы) Экспорт
	
	Для каждого ЭлементКоллекции Из Элементы Цикл
		Если ТипЗнч(ЭлементКоллекции) <> Тип("ДекорацияФормы") Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ЭлементКоллекции.Имя, "Видимость", Ложь);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Перемещает элемент на форме.
//
// Параметры:
//  Элементы -  ВсеЭлементыФормы - содержит коллекцию всех элементов формы клиентского приложения для прямого доступа вне зависимости от иерархии.
//  Элемент - Строка - имя перемещаемого элемента
//  Родитель - Строка, ФормаКлиентскогоПриложения - имя нового родителя элемента или форма
//  МестоРасположения - Строка - имя элемента, перед которым нужно разместить перемещаемый элемент. Если не задан, то перемещается в конец коллекции.
//
Процедура ПереместитьЭлемент(Элементы, Элемент, Родитель, МестоРасположения = Неопределено) Экспорт
	
	ЭлементСсылка = Элементы.Найти(Элемент);
	Если ТипЗнч(Родитель) = Тип("Строка") Тогда
		РодительСсылка = Элементы.Найти(Родитель);
	Иначе
		РодительСсылка = Родитель;
	КонецЕсли;
	
	Если МестоРасположения = Неопределено Тогда
		Если ЭлементСсылка <> Неопределено И РодительСсылка <> Неопределено Тогда
			Элементы.Переместить(ЭлементСсылка, РодительСсылка);
		КонецЕсли;
	Иначе
		МестоРасположенияСсылка = Элементы.Найти(МестоРасположения);
		Если ЭлементСсылка <> Неопределено И РодительСсылка <> Неопределено И МестоРасположенияСсылка <> Неопределено Тогда
			Элементы.Переместить(ЭлементСсылка, РодительСсылка, МестоРасположенияСсылка);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Устанавливает видимость элементов в Истина
//
// Параметры:
//  ВсеЭлементы - ВсеЭлементыФормы - все элементы формы.
//  ВидимыеЭлементы - Строка - список элементов через запятую для включения видимости.
//
Процедура УстановитьВидимостьЭлементов(ВсеЭлементы, ВидимыеЭлементы) Экспорт
	
	МассивВидимыхЭлементов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		ВидимыеЭлементы, , Истина, Истина);
		
	Для каждого ЭлементКоллекции Из МассивВидимыхЭлементов Цикл
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ВсеЭлементы, ЭлементКоллекции, "Видимость", Истина);
	КонецЦикла;
	
КонецПроцедуры

// Формирует представления для подписей
// 
// Параметры:
//  Подписи - ДанныеФормыКоллекция Из ТаблицаЗначений:
//   * Владелец - Строка
//   * ВыводКартинки - Число
//   * ДатаПодписи - Дата
//   * ДатаПроверкиПодписи - Дата
//   * ДоверенностьПредставление - Строка
//   * НомерСтроки - Число
//   * ОтветнаяПодпись - Булево
//   * Отпечаток - Строка
//   * ОтсутствуетВСписке - Булево
//   * ПодписанныйОбъект - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//   * ПодписьВерна - Булево
//   * ПодписьВернаПредставление - Строка
//   * РезультатПроверкиПоМЧД - Неопределено
//                            - См. МашиночитаемыеДоверенности.НовыйРезультатПроверкиПодписи
//   * СвойстваДоверенности - Неопределено
//                          - См. МашиночитаемыеДоверенности.ОбщиеСвойстваДоверенности
//   * СвойстваПодписи - Неопределено
//                     - См. ЭлектронныеДокументы.НовыеДанныеПодписи
//   * Сертификат - Неопределено
//                - ХранилищеЗначения
//   * СообщениеЭДО - ДокументСсылка.СообщениеЭДО
//   * УстановившийПодпись - СправочникСсылка.Пользователи
//   * ЭтоПодписьПоДоверенности - Булево
// 
Процедура ЗаполнитьПредставлениеСостоянияПодписей(Подписи) Экспорт

	Для Каждого СтрокаПодписи Из Подписи Цикл 
		
		ДанныеДляПолученияПредставления = НовыеДанныеДляПолученияПредставленияСостоянияПодписи();
		ДанныеДляПолученияПредставления.ДатаПодписи = СтрокаПодписи.ДатаПодписи;
		ДанныеДляПолученияПредставления.ДатаПроверкиПодписи = СтрокаПодписи.ДатаПроверкиПодписи;
		ДанныеДляПолученияПредставления.ПодписьВерна = СтрокаПодписи.ПодписьВерна;
		ДанныеДляПолученияПредставления.РезультатПроверкиПоМЧД = СтрокаПодписи.РезультатПроверкиПоМЧД;
		ДанныеДляПолученияПредставления.СвойстваДоверенности = СтрокаПодписи.СвойстваДоверенности;
		ДанныеДляПолученияПредставления.ЭтоПодписьПоДоверенности = СтрокаПодписи.ЭтоПодписьПоДоверенности;
		
		ПредставлениеСостояния = ПредставлениеСостоянияПодписи(ДанныеДляПолученияПредставления);
		СтрокаПодписи.ПодписьВернаПредставление = ПредставлениеСостояния.ПодписьВернаПредставление;
		СтрокаПодписи.ДоверенностьПредставление = ПредставлениеСостояния.ДоверенностьПредставление;
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  ДанныеДляПолученияПредставления - См. НовыеДанныеДляПолученияПредставленияСостоянияПодписи
// 
// Возвращаемое значение:
//  Структура:
//  * ПодписьВернаПредставление - Строка
//  * ДоверенностьПредставление - Строка
Функция ПредставлениеСостоянияПодписи(ДанныеДляПолученияПредставления) Экспорт

	Результат = Новый Структура("ПодписьВернаПредставление, ДоверенностьПредставление", "", "");

	СвойстваДоверенности = ДанныеДляПолученияПредставления.СвойстваДоверенности;
	РезультатПроверкиПоМЧД = ДанныеДляПолученияПредставления.РезультатПроверкиПоМЧД;
	ДоверенностьОпределена = ЗначениеЗаполнено(СвойстваДоверенности) И ЗначениеЗаполнено(СвойстваДоверенности.Ссылка);
	ПодписьВерна = ДанныеДляПолученияПредставления.ПодписьВерна;
	ДатаПодписи = ДанныеДляПолученияПредставления.ДатаПодписи;
	ДатаПроверкиПодписи = ДанныеДляПолученияПредставления.ДатаПроверкиПодписи;
	
	Если ДанныеДляПолученияПредставления.ЭтоПодписьПоДоверенности Тогда
		
		ПроверкаДоверенностиВыполненаВручную = 
			МашиночитаемыеДоверенностиКлиентСервер.ПроверкаДоверенностиВыполненаВручную(РезультатПроверкиПоМЧД);
				
		ПредставлениеРезультатаРучнойПроверкиМЧД = 
			МашиночитаемыеДоверенности.ПредставлениеРезультатаРучнойПроверкиМЧД();
		
		Если ДоверенностьОпределена Тогда 
		
			Если ПроверкаДоверенностиВыполненаВручную Тогда
				
				Результат.ПодписьВернаПредставление = ПредставлениеРезультатаРучнойПроверкиМЧД + Символы.ПС;
				
			Иначе
			
				ПротоколПроверки = Неопределено;
				ИмеетсяПротоколПроверки = Ложь;
				
				Если ЗначениеЗаполнено(РезультатПроверкиПоМЧД) Тогда
					ПротоколПроверки = РезультатПроверкиПоМЧД.ПротоколПроверки;
					ИмеетсяПротоколПроверки = ПротоколПроверки <> Неопределено;
				КонецЕсли;
				
				ДоверенностьДействует = Ложь;
				
				Если ИмеетсяПротоколПроверки И ПротоколПроверки.ВерсияПротокола = "2.0" Тогда
					ПроверкаДоверенности = ПротоколПроверки.ПроверкаМЧД;
					ДоверенностьДействует = 
						МашиночитаемыеДоверенностиКлиентСервер.ДоверенностьПроверенаУспешно(ПроверкаДоверенности);
				Иначе
					ДоверенностьДействует = МашиночитаемыеДоверенности.ДоверенностьДействительнаПоСвойствам(
						СвойстваДоверенности, ДатаПодписи);
				КонецЕсли; 
				
				Результат.ПодписьВернаПредставление = Результат.ПодписьВернаПредставление
					+ МашиночитаемыеДоверенности.ПредставлениеРезультатаАвтоматическойПроверкиМЧД(ДоверенностьДействует)
					+ Символы.ПС;
				
			КонецЕсли;
			
			ЛокализованныйФорматДата = НСтр("ru='ДФ=''dd.MM.yyyy'''");
			
			Результат.ДоверенностьПредставление = СвойстваДоверенности.НомерДоверенности 
				+ Символы.ПС 
				+ Формат(СвойстваДоверенности.ДатаВыдачи, ЛокализованныйФорматДата) 
				+ " - " 
				+ Формат(СвойстваДоверенности.ДатаОкончания, ЛокализованныйФорматДата);
			
		Иначе
		
			Если ПроверкаДоверенностиВыполненаВручную Тогда
				Результат.ПодписьВернаПредставление = ПредставлениеРезультатаРучнойПроверкиМЧД + Символы.ПС;
				Результат.ДоверенностьПредставление = "";
			Иначе
				Результат.ДоверенностьПредставление = НСтр("ru = 'Доверенность не проверена'");
				Результат.ПодписьВернаПредставление = НСтр("ru = 'Доверенность не найдена'") + Символы.ПС;
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаПроверкиПодписи) Тогда
		Результат.ПодписьВернаПредставление = ?(ПодписьВерна, НСтр("ru = 'Подпись верна'"), 
			НСтр("ru = 'Подпись неверна'")) + Символы.ПС + Результат.ПодписьВернаПредставление;
		
		ЛокализованныйФорматДатаВремя = НСтр("ru='ДФ=''dd.MM.yyyy HH:mm'''");
		
		Результат.ПодписьВернаПредставление = Результат.ПодписьВернаПредставление 
			+ Формат(ДатаПроверкиПодписи, ЛокализованныйФорматДатаВремя);
	Иначе
		Результат.ПодписьВернаПредставление = НСтр("ru = 'Не проверена'")
			+ Символы.ПС
			+ Результат.ПодписьВернаПредставление;
	КонецЕсли; 

	Возврат Результат;

КонецФункции

// Возвращаемое значение:
//  Структура:
//  * СвойстваДоверенности - Неопределено
//                         - См. МашиночитаемыеДоверенности.ОбщиеСвойстваДоверенности
//  * ПодписьВерна - Булево
//  * ЭтоПодписьПоДоверенности - Булево
//  * РезультатПроверкиПоМЧД - Неопределено
//                           - См. МашиночитаемыеДоверенности.НовыйРезультатПроверкиПодписи
//  * ДатаПодписи - Дата
//  * ДатаПроверкиПодписи - Дата
Функция НовыеДанныеДляПолученияПредставленияСостоянияПодписи() Экспорт

	Данные = Новый Структура;
	Данные.Вставить("СвойстваДоверенности", Неопределено);
	Данные.Вставить("ПодписьВерна", Ложь);
	Данные.Вставить("ЭтоПодписьПоДоверенности", Ложь);
	Данные.Вставить("РезультатПроверкиПоМЧД", Неопределено);
	Данные.Вставить("ДатаПодписи", Дата(1, 1, 1));
	Данные.Вставить("ДатаПроверкиПодписи", Дата(1, 1, 1));
	Возврат Данные;

КонецФункции

// Для полей форм, в которые выбирается договор контрагента, необходимо установить связи параметров выбора.
//
// Параметры:
//  ЭлементФормы           - ПолеФормы - Поле, в которое указывается договор контрагента.
//  ПутьКДаннымОрганизация - Строка    - Путь к реквизиту "Организация" объекта формы.
//  ПутьКДаннымКонтрагент  - Строка    - Путь к реквизиту "Контрагент"  объекта формы.
//
Процедура УстановитьСвязиПараметровВыбораДоговорКонтрагента(ЭлементФормы, ПутьКДаннымОрганизация, ПутьКДаннымКонтрагент) Экспорт
	
	ИменаСвязей = ИнтеграцияЭДО.ИменаСвязейПараметровВыбораДоговорКонтрагента();
	
	НовыеСвязи = Новый Массив;
	
	Если ЗначениеЗаполнено(ИменаСвязей.ПоОрганизации) Тогда
		НовыеСвязи.Добавить(Новый СвязьПараметраВыбора(ИменаСвязей.ПоОрганизации, ПутьКДаннымОрганизация));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИменаСвязей.ПоКонтрагенту) Тогда
		НовыеСвязи.Добавить(Новый СвязьПараметраВыбора(ИменаСвязей.ПоКонтрагенту, ПутьКДаннымКонтрагент));
	КонецЕсли;
	
	ЭлементФормы.СвязиПараметровВыбора = Новый ФиксированныйМассив(НовыеСвязи);
	
КонецПроцедуры

#КонецОбласти

#Область ТекущиеЭлектронныеДокументы

// Возвращает параметры, используемые для определения текущих электронных документов.
//
// Возвращаемое значение:
//  Структура - Параметры, определяющие текущие электронные документы:
//   * Раздел - Строка - Раздел, по которому нужно получить документы. Разделы см. ИнициализироватьРазделыТекущихДел
//   * Режим  - Строка - Режим получения документов. Доступные значения: "ВсеДокументы", "МоиДокументы", "КИсполнению".
//   * Ответственный - Массив из СправочникСсылка.Пользователи - Пользователи для отбора документов по ответственным.
//                                                               Актуально для режима "МоиДокументы".
//   * Отбор  - Массив из Структура - Отбор документов. Можно выполнять по полям учетного документа для раздела
//                                    "Сформировать" и полям электронного документа для подразделов входящих/исходящих
//                                    документов. По остальным разделам отбор не выполняется.
//    Элементы должны быть представлены структурой со свойствами:
//     ** Поле         - Строка - Путь к данным для отбора.
//     ** ВидСравнения - ВидСравнения - Вид сравнения.
//     ** Значение     - Произвольный - Значение для отбора.
//   * КоличествоПолучаемыхЗаписей - Число - Ограничение выборки документов (оператор ПЕРВЫЕ в запросе).
//   * ОтправлятьВходящиеДокументыНаУтверждение - Булево - Если Истина, то входящие документы сначала попадают в
//                                                         Утвердить. Если Ложь - то сразу в Подписать.
//   * ТипыДоговорСКонтрагентомЭДО - Массив из Тип - набор типов из см. ОпределяемыйТип.ДоговорСКонтрагентомЭДО
//
Функция НовыеПараметрыОпределенияТекущихЭлектронныхДокументов() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Раздел", "Входящие");
	Результат.Вставить("Режим", "ВсеДокументы");
	Результат.Вставить("Ответственный", Новый Массив);
	Результат.Вставить("Отбор", Новый Массив);
	Результат.Вставить("КоличествоПолучаемыхЗаписей", 0);
	Результат.Вставить("ОтправлятьВходящиеДокументыНаУтверждение", Истина);
	Результат.Вставить("ТипыДоговорСКонтрагентомЭДО", Метаданные.ОпределяемыеТипы.ДоговорСКонтрагентомЭДО.Тип.Типы());
	
	Возврат Результат;
	
КонецФункции

// Возвращает количество текущих электронных документов.
//
// Параметры:
//  Параметры - Структура - параметры определения текущих документов. См. НовыеПараметрыОпределенияТекущихЭлектронныхДокументов.
//
// Возвращаемое значение:
//  Число - число текущих документов, соответствующих переданным параметрам.
//
Функция КоличествоТекущихЭлектронныхДокументов(Знач Параметры) Экспорт
	
	Запрос = ЗапросКоличестваТекущихЭлектронныхДокументов(Параметры);
	
	Количество = 0;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Количество = Выборка._Счетчик;
	КонецЕсли;
	
	Возврат Количество;
	
КонецФункции

// Возвращает запрос, инициализированный для получения количества текущих электронных документов.
//
// Параметры:
//  Параметры - Структура - параметры определения текущих документов. См. НовыеПараметрыОпределенияТекущихЭлектронныхДокументов.
//
// Возвращаемое значение:
//  Запрос - запрос для получения количества документов. Количество документов представлено в результате запроса полем "_Счетчик".
//
Функция ЗапросКоличестваТекущихЭлектронныхДокументов(Параметры) Экспорт
	
	// Изменения в тексты запросов вносить согласовано с отборами по разделу в текущих делах ЭДО.
	// См. метод СоздатьОтборПоРазделу.
	
	Раздел = Параметры.Раздел;
	
	ПутьКОтбору = "";
	
	ТекстЗапроса = Неопределено;
	
	Если Раздел = "Входящие" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияЭДО
		|				ПО СостоянияЭДО.ЭлектронныйДокумент = ЭлектронныйДокументВходящийЭДО.Ссылка 
		|				И СостоянияЭДО.Состояние НЕ В (
		|					ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.Аннулирован),
		|					ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОбменЗавершен),
		|					ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОбменЗавершенСИсправлением),
		|					ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ЗакрытПринудительно),
		|					ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ЗакрытСОтклонением)
		|		)
		|	ГДЕ
		|		&УсловиеОтбора
		|		И НЕ ЭлектронныйДокументВходящийЭДО.ПометкаУдаления				
		|		И ((&РежимОтображения = ""ВсеДокументы""
		|		ИЛИ &РежимОтображения = ""МоиДокументы""
		|		И ЭлектронныйДокументВходящийЭДО.Ответственный В (&СписокПользователей)))) КАК ВложенныйЗапрос";
	
	ИначеЕсли Раздел = "Обработать" Тогда
		
		ПутьКОтбору = "ЭлектронныйДокументВходящийЭДО.";
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияЭДО
		|			ПО СостоянияЭДО.ЭлектронныйДокумент = ЭлектронныйДокументВходящийЭДО.Ссылка
		|			И НЕ СостоянияЭДО.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяУточнение),
		|				ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.Аннулирован),
		|				ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяПодписаниеАннулирования),
		|				ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяОтправкаАннулирования),
		|				ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеАннулирования),
		|				ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.НеСформирован),
		|				ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ЗакрытПринудительно),
		|				ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ЗакрытСОтклонением))
		|	ГДЕ
		|		&УсловиеОтбора
		|		И НЕ ЭлектронныйДокументВходящийЭДО.ПометкаУдаления
		|		И 1 В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				1
		|			ИЗ
		|				РегистрСведений.КонтрольОтраженияВУчетеЭДО КАК Контроль
		|			ГДЕ
		|				ЭлектронныйДокументВходящийЭДО.Ссылка = Контроль.ЭлектронныйДокумент)
		|		И (&РежимОтображения = ""ВсеДокументы""
		|		ИЛИ ЭлектронныйДокументВходящийЭДО.Ответственный В (&СписокПользователей))) КАК ВложенныйЗапрос";
		
	ИначеЕсли Раздел = "Утвердить" Тогда
		
		ПутьКОтбору = "ЭлектронныйДокументВходящийЭДО.";
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		| 		Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияЭДО
		|				ПО СостоянияЭДО.ЭлектронныйДокумент = ЭлектронныйДокументВходящийЭДО.Ссылка
		|				И СостоянияЭДО.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяУтверждение)
		|	ГДЕ
		|		&УсловиеОтбора
		|		И НЕ ЭлектронныйДокументВходящийЭДО.ПометкаУдаления
		|		И (&РежимОтображения = ""ВсеДокументы""
		|		ИЛИ ЭлектронныйДокументВходящийЭДО.Ответственный В (&СписокПользователей))) КАК ВложенныйЗапрос";
		
	ИначеЕсли Раздел = "Подписать" Тогда
		
		ПутьКОтбору = "ЭлектронныйДокументВходящийЭДО.";
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияЭДО
		|			ПО СостоянияЭДО.ЭлектронныйДокумент = ЭлектронныйДокументВходящийЭДО.Ссылка
		|			И СостоянияЭДО.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяПодписание),
		|				ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяПодписаниеОтклонения),
		|				ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяПодписаниеИзвещения))
		|	ГДЕ
		|		&УсловиеОтбора
		|		И НЕ ЭлектронныйДокументВходящийЭДО.ПометкаУдаления
		|		И (&РежимОтображения <> ""МоиДокументы""
		|		ИЛИ ЭлектронныйДокументВходящийЭДО.Ответственный В (&СписокПользователей))) КАК ВложенныйЗапрос";


	ИначеЕсли Раздел = "Исправить" Тогда
		
		ПутьКОтбору = "ЭлектронныйДокументВходящийЭДО.";
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияЭДО
		|				ПО СостоянияЭДО.ЭлектронныйДокумент = ЭлектронныйДокументВходящийЭДО.Ссылка
		|				И СостоянияЭДО.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяУточнение)
		|					
		|	ГДЕ
		|		&УсловиеОтбора	
		|		И НЕ ЭлектронныйДокументВходящийЭДО.ПометкаУдаления			
		|		И (&РежимОтображения = ""ВсеДокументы""
		|				ИЛИ ЭлектронныйДокументВходящийЭДО.Ответственный В (&СписокПользователей))) КАК ВложенныйЗапрос";
		
	ИначеЕсли Раздел = "Аннулировать" Тогда
		
		ПутьКОтбору = "ЭлектронныйДокументВходящийЭДО.";
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияЭДО
		|				ПО СостоянияЭДО.ЭлектронныйДокумент = ЭлектронныйДокументВходящийЭДО.Ссылка
		|				И СостоянияЭДО.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяПодтверждениеАннулирования)
		|	ГДЕ
		|		&УсловиеОтбора
		|		И НЕ ЭлектронныйДокументВходящийЭДО.ПометкаУдаления
		|		И (&РежимОтображения = ""ВсеДокументы""
		|				ИЛИ ЭлектронныйДокументВходящийЭДО.Ответственный В (&СписокПользователей))) КАК ВложенныйЗапрос";
		
	ИначеЕсли Раздел = "НаКонтроле" Тогда
		
		ПутьКОтбору = "ЭлектронныйДокументВходящийЭДО.";
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО	
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияЭДО
		|				ПО СостоянияЭДО.ЭлектронныйДокумент = ЭлектронныйДокументВходящийЭДО.Ссылка	
		|				И СостоянияЭДО.Состояние В (
		|					ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеАннулирования),
		|					ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОжидаетсяИзвещениеОПолучении),
		|					ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОжидаетсяИсправление),
		|					ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОжидаетсяПередачаОператору),
		|					ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОжидаетсяПодтверждение),
		|					ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеОператора),
		|					ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОжидаетсяИзвещениеПоОтклонению),
		|					ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяИзвещениеОПолучении),
		|					ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОжидаетсяОтветНаПриглашение)
		|					)
		|	ГДЕ
		|		&УсловиеОтбора
		|		И НЕ ЭлектронныйДокументВходящийЭДО.ПометкаУдаления
		|		И (&РежимОтображения = ""ВсеДокументы""
		|				ИЛИ &РежимОтображения = ""МоиДокументы""
		|					И ЭлектронныйДокументВходящийЭДО.Ответственный В (&СписокПользователей))) КАК ВложенныйЗапрос";
		
	ИначеЕсли Раздел = "Сформировать" Тогда
		
		ПутьКОтбору = "СостоянияЭД.СсылкаНаОбъект."; 
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		РегистрСведений.СостоянияПоОбъектамУчетаЭДО КАК СостоянияЭД
		|	ГДЕ
		|		&УсловиеОтбора
		|		И СостоянияЭД.СостояниеЭДО = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.НеСформирован)
		|		И НЕ СостоянияЭД.СсылкаНаОбъект ССЫЛКА Документ.УдалитьПроизвольныйЭД
		|		И НЕ СостоянияЭД.СсылкаНаОбъект ССЫЛКА Документ.ТранспортныйКонтейнерЭДО
		|		И НЕ СостоянияЭД.СсылкаНаОбъект ССЫЛКА Справочник.НастройкиЭДО
		|		И НЕ СостоянияЭД.СсылкаНаОбъект ССЫЛКА Справочник.УдалитьСоглашенияОбИспользованииЭД
		|		И НЕ ТИПЗНАЧЕНИЯ(СостоянияЭД.СсылкаНаОбъект) В (&ТипыДоговорСКонтрагентомЭДО)
		|		И СостоянияЭД.Вид <> """") КАК ВложенныйЗапрос";
		
	ИначеЕсли Раздел = "Исходящие" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияЭДО
		|				ПО СостоянияЭДО.ЭлектронныйДокумент = ЭлектронныйДокументИсходящийЭДО.Ссылка 
		|				И СостоянияЭДО.Состояние НЕ В (
		|					ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.Аннулирован),
		|					ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОбменЗавершен),
		|					ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОбменЗавершенСИсправлением),
		|					ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ЗакрытПринудительно),
		|					ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ЗакрытСОтклонением)
		|		)
		|	ГДЕ
		|		&УсловиеОтбора
		|		И НЕ ЭлектронныйДокументИсходящийЭДО.ПометкаУдаления	
		|		И ((&РежимОтображения = ""ВсеДокументы""
		|		ИЛИ &РежимОтображения = ""МоиДокументы""
		|		И ЭлектронныйДокументИсходящийЭДО.Ответственный В (&СписокПользователей)))) КАК ВложенныйЗапрос";

	ИначеЕсли Раздел = "ПодписатьИсх" Тогда
		
		ПутьКОтбору = "ЭлектронныйДокументИсходящийЭДО.";
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|		ЭлектронныйДокументИсходящийЭДО.Ссылка
		|	ИЗ
		|		Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияЭДО
		|			ПО СостоянияЭДО.ЭлектронныйДокумент = ЭлектронныйДокументИсходящийЭДО.Ссылка 
		|			И СостоянияЭДО.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяПодписание),
		|				ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяПодписаниеИзвещения),
		|				ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяПодписаниеИзвещенияПоОтклонению))
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеПодписанияЭД КАК СостояниеПодписания
		|			ПО ЭлектронныйДокументИсходящийЭДО.Ссылка = 
		|					ВЫРАЗИТЬ(СостояниеПодписания.Объект КАК Документ.СообщениеЭДО).ЭлектронныйДокумент
		|				И СостояниеПодписания.Текущий
		|				И СостояниеПодписания.Подписант В (&СписокПользователей)
		|	ГДЕ
		|		&УсловиеОтбора
		|		И НЕ ЭлектронныйДокументИсходящийЭДО.ПометкаУдаления
		|		И (&РежимОтображения <> ""МоиДокументы""
		|				ИЛИ ЭлектронныйДокументИсходящийЭДО.Ответственный В (&СписокПользователей))
		|		И (&РежимОтображения <> ""КИсполнению""
		|				ИЛИ НЕ СостояниеПодписания.Объект ЕСТЬ NULL)) КАК ВложенныйЗапрос";
		
	ИначеЕсли Раздел = "ИсправитьИсх" Тогда
		
		ПутьКОтбору = "ЭлектронныйДокументИсходящийЭДО.";
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияЭДО
		|				ПО СостоянияЭДО.ЭлектронныйДокумент = ЭлектронныйДокументИсходящийЭДО.Ссылка 
		|				И СостоянияЭДО.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяУточнение)
		|	ГДЕ
		|		&УсловиеОтбора
		|		И НЕ ЭлектронныйДокументИсходящийЭДО.ПометкаУдаления
		|		И (&РежимОтображения = ""ВсеДокументы""
		|				ИЛИ ЭлектронныйДокументИсходящийЭДО.Ответственный В (&СписокПользователей))) КАК ВложенныйЗапрос";
		
	ИначеЕсли Раздел = "АннулироватьИсх" Тогда
		
		ПутьКОтбору = "ЭлектронныйДокументИсходящийЭДО.";
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияЭДО
		|				ПО СостоянияЭДО.ЭлектронныйДокумент = ЭлектронныйДокументИсходящийЭДО.Ссылка 
		|				И (СостоянияЭДО.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяПодписаниеАннулирования)
		|					ИЛИ СостоянияЭДО.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяПодтверждениеАннулирования))
		|	ГДЕ
		|		&УсловиеОтбора
		|		И НЕ ЭлектронныйДокументИсходящийЭДО.ПометкаУдаления
		|		И (&РежимОтображения = ""ВсеДокументы""
		|				ИЛИ ЭлектронныйДокументИсходящийЭДО.Ответственный В (&СписокПользователей))) КАК ВложенныйЗапрос";
		
	ИначеЕсли Раздел = "НаКонтролеИсх" Тогда
		
		ПутьКОтбору = "ЭлектронныйДокументИсходящийЭДО.";
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияЭДО
		|				ПО СостоянияЭДО.ЭлектронныйДокумент = ЭлектронныйДокументИсходящийЭДО.Ссылка 
		|				И СостоянияЭДО.Состояние В (
		|						ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеАннулирования),
		|						ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОжидаетсяИзвещениеОПолучении),
		|						ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОжидаетсяИсправление),
		|						ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОжидаетсяПередачаОператору),
		|						ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОжидаетсяПодтверждение),
		|						ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеОператора),
		|						ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОжидаетсяОтветНаПриглашение),
		|						ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОжидаетсяИзвещениеПоОтклонению)
		|						)
		|	ГДЕ
		|		&УсловиеОтбора
		|		И НЕ ЭлектронныйДокументИсходящийЭДО.ПометкаУдаления
		|		И (&РежимОтображения = ""ВсеДокументы""
		|		ИЛИ &РежимОтображения = ""МоиДокументы""
		|		И ЭлектронныйДокументИсходящийЭДО.Ответственный В (&СписокПользователей))) КАК ВложенныйЗапрос";
		
	ИначеЕсли Раздел = "Ошибки" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		РегистрСведений.СостоянияДокументовЭДО КАК СостоянияЭДО
		|	ГДЕ
		|		СостоянияЭДО.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяИсправлениеОшибкиПередачи)) КАК ВложенныйЗапрос";
		
	ИначеЕсли Раздел = "Ознакомиться" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|	ГДЕ
		|		ЭлектронныйДокументВходящийЭДО.НаОзнакомлении
		|		И НЕ ЭлектронныйДокументВходящийЭДО.ПометкаУдаления
		|		И (&РежимОтображения = ""ВсеДокументы""
		|				ИЛИ ЭлектронныйДокументВходящийЭДО.Ответственный В (&СписокПользователей))
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1
		|	ИЗ
		|		Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
		|	ГДЕ
		|		ЭлектронныйДокументИсходящийЭДО.НаОзнакомлении
		|		И НЕ ЭлектронныйДокументИсходящийЭДО.ПометкаУдаления
		|		И (&РежимОтображения = ""ВсеДокументы""
		|				ИЛИ ЭлектронныйДокументИсходящийЭДО.Ответственный В (&СписокПользователей))) КАК ВложенныйЗапрос";
		
	ИначеЕсли Раздел = "Отправить" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ
		|	ЭлектронныйДокументВходящийЭДО.Ссылка КАК ЭлектронныйДокумент,
		|	ЭлектронныйДокументВходящийЭДО.ВидДокумента КАК ВидДокумента,
		|	ЭлектронныйДокументВходящийЭДО.Дата КАК Дата,
		|	ЭлектронныйДокументВходящийЭДО.Номер КАК Номер,
		|	ЭлектронныйДокументВходящийЭДО.ДатаДокумента КАК ДатаЭД,
		|	ЭлектронныйДокументВходящийЭДО.НомерДокумента КАК НомерЭД,
		|	ЭлектронныйДокументВходящийЭДО.Организация КАК Организация,
		|	ЭлектронныйДокументВходящийЭДО.Контрагент КАК Контрагент,
		|	ЭлектронныйДокументВходящийЭДО.СуммаДокумента КАК СуммаДокумента,
		|	СостоянияЭДО.Состояние КАК СостояниеЭД,
		|	""КартинкаМК"" КАК КартинкаМК,
		|	ЭлектронныйДокументВходящийЭДО.Ответственный КАК Ответственный,
		|	СоставПакетовДокументовЭДО.ИдентификаторПакета КАК ИдентификаторПакета,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА(20)) КАК ПредставлениеДокументовВнеОтбора,
		|	ЛОЖЬ КАК ПервыйДокументПакета,
		|	ДанныеКоличестваДокументовВПакете.КоличествоОбъектовУчета КАК КоличествоДокументовВПакете,
		|	ПакетыДокументовЭДО.Дата КАК ДатаПакета
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияЭДО
		|	ПО СостоянияЭДО.ЭлектронныйДокумент = ЭлектронныйДокументВходящийЭДО.Ссылка
		|	И СостоянияЭДО.Состояние В 
		|	(
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяОтправка),
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяОтправкаАннулирования),
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяОтправкаИзвещения),
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяОтправкаИзвещенияПоОтклонению),
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяОтправкаОтклонения),
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправке),
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеАннулирования),
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеИзвещения),
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеОтклонения),
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеИзвещенияПоОтклонению)
		|	)
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставПакетовДокументовЭДО КАК СоставПакетовДокументовЭДО
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				СоставПакетовДокументовЭДО.ИдентификаторПакета,
		|				КОЛИЧЕСТВО(СоставПакетовДокументовЭДО.ЭлектронныйДокумент) КАК КоличествоОбъектовУчета
		|			ИЗ
		|				РегистрСведений.СоставПакетовДокументовЭДО КАК СоставПакетовДокументовЭДО
		|			СГРУППИРОВАТЬ ПО
		|				СоставПакетовДокументовЭДО.ИдентификаторПакета) КАК ДанныеКоличестваДокументовВПакете
		|			ПО СоставПакетовДокументовЭДО.ИдентификаторПакета = ДанныеКоличестваДокументовВПакете.ИдентификаторПакета
		|		ПО СоставПакетовДокументовЭДО.ЭлектронныйДокумент = ЭлектронныйДокументВходящийЭДО.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПакетыДокументовЭДО КАК ПакетыДокументовЭДО
		|		ПО СоставПакетовДокументовЭДО.ИдентификаторПакета = ПакетыДокументовЭДО.ИдентификаторПакета
		|ГДЕ
		|	НЕ ЭлектронныйДокументВходящийЭДО.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭлектронныйДокументИсходящийЭДО.Ссылка,
		|	ЭлектронныйДокументИсходящийЭДО.ВидДокумента,
		|	ЭлектронныйДокументИсходящийЭДО.Дата,
		|	ЭлектронныйДокументИсходящийЭДО.Номер,
		|	ЭлектронныйДокументИсходящийЭДО.ДатаДокумента,
		|	ЭлектронныйДокументИсходящийЭДО.НомерДокумента,
		|	ЭлектронныйДокументИсходящийЭДО.Организация,
		|	ЭлектронныйДокументИсходящийЭДО.Контрагент,
		|	ЭлектронныйДокументИсходящийЭДО.СуммаДокумента,
		|	СостоянияЭДО.Состояние,
		|	""КартинкаМК"",
		|	ЭлектронныйДокументИсходящийЭДО.Ответственный,
		|	СоставПакетовДокументовЭДО.ИдентификаторПакета,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА(20)),
		|	Ложь,
		|	ДанныеКоличестваДокументовВПакете.КоличествоОбъектовУчета,
		|	ПакетыДокументовЭДО.Дата
		|ИЗ
		|	Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияЭДО
		|	ПО СостоянияЭДО.ЭлектронныйДокумент = ЭлектронныйДокументИсходящийЭДО.Ссылка
		|	И СостоянияЭДО.Состояние В 
		|	(
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяОтправка),
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяОтправкаАннулирования),
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяОтправкаИзвещения),
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяОтправкаИзвещенияПоОтклонению),
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяОтправкаОтклонения),
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправке),
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеАннулирования),
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеИзвещения),
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеОтклонения),
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеИзвещенияПоОтклонению)
		|	)
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставПакетовДокументовЭДО КАК СоставПакетовДокументовЭДО
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				СоставПакетовДокументовЭДО.ИдентификаторПакета,
		|				КОЛИЧЕСТВО(СоставПакетовДокументовЭДО.ЭлектронныйДокумент) КАК КоличествоОбъектовУчета
		|			ИЗ
		|				РегистрСведений.СоставПакетовДокументовЭДО КАК СоставПакетовДокументовЭДО
		|			СГРУППИРОВАТЬ ПО
		|				СоставПакетовДокументовЭДО.ИдентификаторПакета) КАК ДанныеКоличестваДокументовВПакете
		|			ПО СоставПакетовДокументовЭДО.ИдентификаторПакета = ДанныеКоличестваДокументовВПакете.ИдентификаторПакета
		|		ПО СоставПакетовДокументовЭДО.ЭлектронныйДокумент = ЭлектронныйДокументИсходящийЭДО.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПакетыДокументовЭДО КАК ПакетыДокументовЭДО
		|		ПО СоставПакетовДокументовЭДО.ИдентификаторПакета = ПакетыДокументовЭДО.ИдентификаторПакета
		|ГДЕ
		|	НЕ ЭлектронныйДокументИсходящийЭДО.ПометкаУдаления
		|) КАК ВложенныйЗапрос";
		
	ИначеЕсли Раздел = "Распаковать" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		Документ.ТранспортныйКонтейнерЭДО КАК ОсновнаяТаблица
		|	ГДЕ
		|		ОсновнаяТаблица.ПометкаУдаления = ЛОЖЬ
		|		И ОсновнаяТаблица.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияЭДО.Входящий)
		|		И &СтатусыКРаспаковке
		|) КАК ВложенныйЗапрос";
		
		СтатусыКРаспаковке = ТранспортныеКонтейнерыЭДО.СтатусыНеРаспакованныхТранспортныхСообщенийБЭД();
		
		МассивСтатусовВВидеСтрок = Новый Массив;
		Для Каждого СтатусКРаспаковке Из СтатусыКРаспаковке Цикл 
			ИмяПеречисления = ОбщегоНазначения.ИмяТаблицыПоСсылке(СтатусКРаспаковке);
			ИмяЗначенияПеречисления = ОбщегоНазначения.ИмяЗначенияПеречисления(СтатусКРаспаковке); 
			МассивСтатусовВВидеСтрок.Добавить(СтрШаблон("Значение(%1.%2)", ИмяПеречисления, ИмяЗначенияПеречисления));
		КонецЦикла; 

		ТекстУсловия = "Истина";
		Если СтатусыКРаспаковке.Количество() > 0 Тогда
			СписокСтатусовВВидеСтроки = СтрСоединить(МассивСтатусовВВидеСтрок, ", ");
			ТекстУсловия = СтрШаблон("ОсновнаяТаблица.Статус В (%1)", СписокСтатусовВВидеСтроки);
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СтатусыКРаспаковке", ТекстУсловия);
		
	ИначеЕсли Раздел = "ТребуетсяПригласить" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ОсновнаяТаблица
		|	ГДЕ
		|		ОсновнаяТаблица.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПриглашений.ТребуетсяОтправить)) КАК ВложенныйЗапрос";
		
	ИначеЕсли Раздел = "ЖдемСогласия" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ОсновнаяТаблица
		|	ГДЕ
		|		ОсновнаяТаблица.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПриглашений.ОжидаемСогласия) ИЛИ
		|		ОсновнаяТаблица.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПриглашений.НастройкаРоуминга)) КАК ВложенныйЗапрос";
		
	ИначеЕсли Раздел = "ТребуетсяСогласие" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ОсновнаяТаблица
		|	ГДЕ
		|		ОсновнаяТаблица.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПриглашений.ТребуетсяСогласие)) КАК ВложенныйЗапрос";
		
	ИначеЕсли Раздел = "ПриглашенияОзнакомиться" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ОсновнаяТаблица
		|	ГДЕ
		|		ОсновнаяТаблица.Ознакомиться) КАК ВложенныйЗапрос";
		
		
	ИначеЕсли Раздел = "НоменклатураКонтрагентов" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|		КонтрольСопоставленияНоменклатурыЭДО.Владелец,
		|		КонтрольСопоставленияНоменклатурыЭДО.Идентификатор
		|	ИЗ
		|		РегистрСведений.КонтрольСопоставленияНоменклатурыЭДО КАК КонтрольСопоставленияНоменклатурыЭДО) КАК ВложенныйЗапрос";
		
	Иначе
		
		ВызватьИсключение ОбщегоНазначенияБЭД.СформироватьТекстИсключения(
			"НедопустимыеПараметрыМетода", "ЗапросКоличестваТекущихЭлектронныхДокументов");
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РежимОтображения", Параметры.Режим);
	СписокПользователей = ОбщегоНазначения.СкопироватьРекурсивно(Параметры.Ответственный);
	Если Параметры.Режим <> "МоиДокументы" Тогда
		СписокПользователей.Добавить(ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"));
	КонецЕсли;
	Запрос.УстановитьПараметр("СписокПользователей", СписокПользователей);
	
	Запрос.УстановитьПараметр("ТипыДоговорСКонтрагентомЭДО", Параметры.ТипыДоговорСКонтрагентомЭДО);
	
	ИсполняемыйОтбор = ОбщегоНазначения.СкопироватьРекурсивно(Параметры.Отбор);
	
	НомерОтбора = 1;
	ПрефиксПараметров = "ОтборПараметр";
	Для каждого ЭлементОтбора Из ИсполняемыйОтбор Цикл
		
		ОтборПоСсылкеИзмерения = (Раздел = "Сформировать" И ЭлементОтбора.Поле = "Ссылка");
		Если НЕ ОтборПоСсылкеИзмерения Тогда
			ЭлементОтбора.Поле = ПутьКОтбору + ЭлементОтбора.Поле;
		Иначе
			ПутьКОтборуБезТочки = ПутьКОтбору;
			СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ПутьКОтборуБезТочки, 1);
			ЭлементОтбора.Поле = ПутьКОтборуБезТочки;
		КонецЕсли;
				
		Запрос.УстановитьПараметр(ПрефиксПараметров + Формат(НомерОтбора, "ЧГ=0"), ЭлементОтбора.Значение);
		НомерОтбора = НомерОтбора + 1;
	КонецЦикла;
	
	ТекстОтбора = ТекстУсловияПоОтбору(ИсполняемыйОтбор, ПрефиксПараметров);
	Если ЗначениеЗаполнено(ТекстОтбора) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбора", ТекстОтбора);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбора", "ИСТИНА");
	КонецЕсли;
	
	ТекстПервые = "";
	Если ЗначениеЗаполнено(Параметры.КоличествоПолучаемыхЗаписей) Тогда
		ТекстПервые = "ПЕРВЫЕ " + Формат(Параметры.КоличествоПолучаемыхЗаписей, "ЧГ=0");
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПЕРВЫЕ 1000", ТекстПервые);
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос;
	
КонецФункции

Функция ВидыЭлектронныхДокументовДоступныеДляОтборов() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВидыДокументовЭДО.Ссылка КАК ВидДокументаЭДО
		|ИЗ
		|	Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
		|ГДЕ
		|	НЕ ВидыДокументовЭДО.ПометкаУдаления";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидДокументаЭДО");
	
КонецФункции

#КонецОбласти

#Область РаботаСДеревомЭлектронныхДокументов

Процедура СформироватьДеревьяЭД(ДеревоОбъект,СоответствиеВладельцевИЭД) Экспорт
	
		Если СоответствиеВладельцевИЭД.Количество() > 0 Тогда
		
		Для Каждого Элемент Из СоответствиеВладельцевИЭД Цикл
			
			Если ЗначениеЗаполнено(Элемент.ЭлектронныйДокумент) Тогда
				
				СхемаРегламента = СхемаРегламентаЭлектронногоДокумента(Элемент.ЭлектронныйДокумент);
				ОбновитьЭлементыДереваЭлектронныхДокументов(ДеревоОбъект, СхемаРегламента, Элемент.Актуальный);
				
			КонецЕсли;			
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры	

#КонецОбласти

#Область ИнтеграцияСИнтерфейсомУчетныхДокументов

#Область ФормыСписков

// Параметры "ПриСозданииНаСервере" формы списка справочников и документов.
// 
// Возвращаемое значение:
//  Структура:
// * Форма - ФормаКлиентскогоПриложения
// * МестоРазмещенияКоманд - РасширениеГруппыФормыДляПодменю
// * Направление - ПеречислениеСсылка.НаправленияЭДО
// * ИсточникКомандЭДО - ДинамическийСписок - список, в котором будут размещены кеш и настройки видимости команд ЭДО
// * КолонкаСостоянияЭДО - ПолеФормы
// * ИспользоватьОформлениеБиблиотеки - Булево
//
Функция ПараметрыПриСозданииНаСервере_ФормаСписка() Экспорт

	ПараметрыПриСоздании = ПодключаемыеКомандыЭДО.ПараметрыРазместитьНаФормеКомандыЭДО();
	ПараметрыПриСоздании.Вставить("КолонкаСостоянияЭДО", Неопределено);
	ПараметрыПриСоздании.Вставить("ИспользоватьОформлениеБиблиотеки", Истина);
	//@skip-check constructor-function-return-section
	Возврат ПараметрыПриСоздании;

КонецФункции

// Обработчик события "ПриСозданииНаСервере" формы списка справочников и документов
//
// Параметры:
//  ПараметрыПриСозданииНаСервере - см. ПараметрыПриСозданииНаСервере_ФормаСписка
//
Процедура ПриСозданииНаСервере_ФормаСписка(ПараметрыПриСозданииНаСервере) Экспорт

	ЕстьПравоЧтенияДокументов = ИнтерфейсДокументовЭДОВызовСервера.ЕстьПравоЧтенияДокументов();
	Если Не ЕстьПравоЧтенияДокументов Тогда
		СкрытьЭлементыЭДОФормыСписка(ПараметрыПриСозданииНаСервере);
		Возврат;
	КонецЕсли;
	
	ПодключаемыеКомандыЭДО.РазместитьНаФормеКомандыЭДО(ПараметрыПриСозданииНаСервере);
	
	Если ПараметрыПриСозданииНаСервере.КолонкаСостоянияЭДО = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыПриСозданииНаСервере.ИспользоватьОформлениеБиблиотеки Тогда
	
		КолонкаСостоянияЭДО = ПараметрыПриСозданииНаСервере.КолонкаСостоянияЭДО;
	
		КолонкаСостоянияЭДО.ГиперссылкаЯчейки = Истина;
		
		ЭлементОформления = ПараметрыПриСозданииНаСервере.Форма.УсловноеОформление.Элементы.Добавить();
		ЭлементОформления.Использование = Истина;
	    ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ГиперссылкаЦвет);
		
		ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(КолонкаСостоянияЭДО.Имя);

		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(КолонкаСостоянияЭДО.ПутьКДанным);
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Заполнено;	
		
	КонецЕсли;
	
	Направление = ПараметрыПриСозданииНаСервере.Направление;
	Если Направление = Перечисления.НаправленияЭДО.Внутренний Тогда
		ИспользоватьОбменЭД = НастройкиЭДО.ИспользуетсяОбменЭлектроннымиДокументами();
		ИспользоватьВнутренниеДокументыЭДО = НастройкиЭДО.ИспользуютсяВнутренниеДокументы();
		ПараметрыПриСозданииНаСервере.КолонкаСостоянияЭДО.Видимость = ИспользоватьОбменЭД И ИспользоватьВнутренниеДокументыЭДО;
	КонецЕсли;
	
КонецПроцедуры

// см. ПодключаемыеКомандыЭДО.ПриПолученииДанныхНаСервере
//
Процедура ПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки) Экспорт
	ПодключаемыеКомандыЭДО.ПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки);
КонецПроцедуры

#КонецОбласти

#Область ФормыОбъектов

// Параметры "ПриСозданииНаСервере" формы документа.
// 
// Возвращаемое значение:
//  Структура:
// * Форма - ФормаКлиентскогоПриложения
// * МестоРазмещенияКоманд - РасширениеГруппыФормыДляПодменю
// * Направление - ПеречислениеСсылка.НаправленияЭДО
// * ИсточникКомандЭДО - ДинамическийСписок - список, в котором будут размещены кеш и настройки видимости команд ЭДО
// * ДокументСсылка - ДокументСсылка
// * КонтроллерСостояниеЭДО - ДекорацияФормы, ПолеФормы - элемент для отображения состояния ЭДО
// * ГруппаСостояниеЭДО - ГруппаФормы - владелец для размещения КонтроллерСостояниеЭДО
// * СкрыватьСостояниеПриОтсутствииЭДО - Булево
//
Функция ПараметрыПриСозданииНаСервере_ФормаДокумента() Экспорт

	ПараметрыПриСоздании = ПодключаемыеКомандыЭДО.ПараметрыРазместитьНаФормеКомандыЭДО();
	ПараметрыПриСоздании.Вставить("ДокументСсылка", Неопределено);
	ПараметрыПриСоздании.Вставить("КонтроллерСостояниеЭДО", Неопределено);
	ПараметрыПриСоздании.Вставить("ГруппаСостояниеЭДО", Неопределено);
	ПараметрыПриСоздании.Вставить("СкрыватьСостояниеНеНачатогоЭДО", Ложь);
	//@skip-check constructor-function-return-section
	Возврат ПараметрыПриСоздании;

КонецФункции

// Параметры "ПриСозданииНаСервере" формы справочника.
// 
// Возвращаемое значение:
//  Структура:
// * Форма - ФормаКлиентскогоПриложения
// * МестоРазмещенияКоманд - РасширениеГруппыФормыДляПодменю
// * Направление - ПеречислениеСсылка.НаправленияЭДО
// * ИсточникКомандЭДО - ДинамическийСписок - список, в котором будут размещены кеш и настройки видимости команд ЭДО
// * СправочникСсылка - СправочникСсылка
// * КонтроллерСостояниеЭДО - ДекорацияФормы, ПолеФормы - элемент для отображения состояния ЭДО
// * ГруппаСостояниеЭДО - ГруппаФормы - владелец для размещения КонтроллерСостояниеЭДО
// * СкрыватьСостояниеПриОтсутствииЭДО - Булево
//
Функция ПараметрыПриСозданииНаСервере_ФормаСправочника() Экспорт

	ПараметрыПриСоздании = ПодключаемыеКомандыЭДО.ПараметрыРазместитьНаФормеКомандыЭДО();
	ПараметрыПриСоздании.Вставить("СправочникСсылка", Неопределено);
	ПараметрыПриСоздании.Вставить("КонтроллерСостояниеЭДО", Неопределено);
	ПараметрыПриСоздании.Вставить("ГруппаСостояниеЭДО", Неопределено);
	ПараметрыПриСоздании.Вставить("СкрыватьСостояниеНеНачатогоЭДО", Ложь);
	//@skip-check constructor-function-return-section
	Возврат ПараметрыПриСоздании;

КонецФункции

// Обработчик события "ПриСозданииНаСервере" формы документа.
//
// Параметры:
//  ПараметрыПриСозданииНаСервере - см. ПараметрыПриСозданииНаСервере_ФормаДокумента
//   
Процедура ПриСозданииНаСервере_ФормаДокумента(ПараметрыПриСозданииНаСервере) Экспорт
	
	ЕстьПравоЧтенияДокументов = ИнтерфейсДокументовЭДОВызовСервера.ЕстьПравоЧтенияДокументов();
	Если Не ЕстьПравоЧтенияДокументов Тогда
		СкрытьЭлементыЭДОФормыОбъекта(ПараметрыПриСозданииНаСервере);
		Возврат;
	КонецЕсли;
	
	ПодключаемыеКомандыЭДО.РазместитьНаФормеКомандыЭДО(ПараметрыПриСозданииНаСервере);
	
	Если ПараметрыПриСозданииНаСервере.КонтроллерСостояниеЭДО = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Реквизиты = Новый Массив;
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
		ПараметрыПриСозданииНаСервере.Форма, "ПараметрыОбменаСКонтрагентами") Тогда
		
		Реквизиты.Добавить(Новый РеквизитФормы("ПараметрыОбменаСКонтрагентами", Новый ОписаниеТипов()));
		
		ПараметрыПриСозданииНаСервере.Форма.ИзменитьРеквизиты(Реквизиты);
		
	КонецЕсли;
	
	ОписаниеОбъектаУчета = ИнтеграцияЭДО.ОписаниеОбъектаУчета(ПараметрыПриСозданииНаСервере.ДокументСсылка);
	ОписаниеОбъектаУчета = ОбщегоНазначения.ТаблицаЗначенийВМассив(ОписаниеОбъектаУчета);
	
	ПараметрыОбменаСКонтрагентами = Новый Структура;
	ПараметрыОбменаСКонтрагентами.Вставить("ОписаниеОбъектаУчета", ОписаниеОбъектаУчета);
	ПараметрыОбменаСКонтрагентами.Вставить("ДанныеСостоянияЭДОИзначальные", Неопределено);
	ПараметрыОбменаСКонтрагентами.Вставить("ДанныеСостоянияЭДОТекущие", Неопределено);
	ПараметрыОбменаСКонтрагентами.Вставить("КонтекстОперации", Неопределено);
	ПараметрыОбменаСКонтрагентами.Вставить("СкрыватьСостояниеНеНачатогоЭДО", Ложь);
	
	Если ТипЗнч(ПараметрыПриСозданииНаСервере.КонтроллерСостояниеЭДО) = Тип("ПолеФормы") Тогда
		ПараметрыОбменаСКонтрагентами.Вставить("ПутьКДаннымКонтроллераСостояния",
			ПараметрыПриСозданииНаСервере.КонтроллерСостояниеЭДО.ПутьКДанным);
	КонецЕсли;
	
	ПараметрыОбменаСКонтрагентами.СкрыватьСостояниеНеНачатогоЭДО = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ПараметрыПриСозданииНаСервере, "СкрыватьСостояниеНеНачатогоЭДО", Ложь);
	
	ПараметрыПриСозданииНаСервере.Форма.ПараметрыОбменаСКонтрагентами = ПараметрыОбменаСКонтрагентами;
	
	ИнтерфейсДокументовЭДОКлиентСервер.ЗаполнитьСостояниеЭДО_ФормаДокумента(ПараметрыПриСозданииНаСервере);
	
КонецПроцедуры

// Обработчик события "ПриСозданииНаСервере" формы справочника.
//
// Параметры:
//  ПараметрыПриСозданииНаСервере - см. ПараметрыПриСозданииНаСервере_ФормаСправочника
//   
Процедура ПриСозданииНаСервере_ФормаСправочника(ПараметрыПриСозданииНаСервере) Экспорт
	
	ЕстьПравоЧтенияДокументов = ИнтерфейсДокументовЭДОВызовСервера.ЕстьПравоЧтенияДокументов();
	Если Не ЕстьПравоЧтенияДокументов Тогда
		СкрытьЭлементыЭДОФормыОбъекта(ПараметрыПриСозданииНаСервере);
		Возврат;
	КонецЕсли;
	
	ПодключаемыеКомандыЭДО.РазместитьНаФормеКомандыЭДО(ПараметрыПриСозданииНаСервере);
	
	Если ПараметрыПриСозданииНаСервере.КонтроллерСостояниеЭДО = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Реквизиты = Новый Массив;
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
		ПараметрыПриСозданииНаСервере.Форма, "ПараметрыОбменаСКонтрагентами") Тогда
		
		Реквизиты.Добавить(Новый РеквизитФормы("ПараметрыОбменаСКонтрагентами", Новый ОписаниеТипов()));
		
		ПараметрыПриСозданииНаСервере.Форма.ИзменитьРеквизиты(Реквизиты);
		
	КонецЕсли;
	
	ОписаниеОбъектаУчета = ИнтеграцияЭДО.ОписаниеОбъектаУчета(ПараметрыПриСозданииНаСервере.СправочникСсылка);
	ОписаниеОбъектаУчета = ОбщегоНазначения.ТаблицаЗначенийВМассив(ОписаниеОбъектаУчета);
	
	ПараметрыОбменаСКонтрагентами = Новый Структура;
	ПараметрыОбменаСКонтрагентами.Вставить("ОписаниеОбъектаУчета", ОписаниеОбъектаУчета);
	ПараметрыОбменаСКонтрагентами.Вставить("ДанныеСостоянияЭДОИзначальные", Неопределено);
	ПараметрыОбменаСКонтрагентами.Вставить("ДанныеСостоянияЭДОТекущие", Неопределено);
	ПараметрыОбменаСКонтрагентами.Вставить("КонтекстОперации", Неопределено);
	ПараметрыОбменаСКонтрагентами.Вставить("СкрыватьСостояниеНеНачатогоЭДО", Ложь);
	
	Если ТипЗнч(ПараметрыПриСозданииНаСервере.КонтроллерСостояниеЭДО) = Тип("ПолеФормы") Тогда
		ПараметрыОбменаСКонтрагентами.Вставить("ПутьКДаннымКонтроллераСостояния",
			ПараметрыПриСозданииНаСервере.КонтроллерСостояниеЭДО.ПутьКДанным);
	КонецЕсли;
	
	ПараметрыОбменаСКонтрагентами.СкрыватьСостояниеНеНачатогоЭДО = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ПараметрыПриСозданииНаСервере, "СкрыватьСостояниеНеНачатогоЭДО", Ложь);
	
	ПараметрыПриСозданииНаСервере.Форма.ПараметрыОбменаСКонтрагентами = ПараметрыОбменаСКонтрагентами;
	
	ИнтерфейсДокументовЭДОКлиентСервер.ЗаполнитьСостояниеЭДО_ФормаСправочника(ПараметрыПриСозданииНаСервере);
	
КонецПроцедуры

// Получение параметров оповещения для формы документ, передаваемые в метод 
// ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента
//
// Возвращаемое значение:
//  Структура:
//   * Форма - ФормаКлиентскогоПриложения - форма документа.
//   * ДокументСсылка - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - Ссылка на документ.
//   * КонтроллерСостояниеЭДО - ДекорацияФормы, РасширениеПоляФормыДляПоляНадписи - элемент, в заголовке которого
//                                                                                   будет отображаться состояние ЭДО.
//   * ГруппаСостояниеЭДО - ГруппаФормы - элемент, которому может принадлежать КонтроллерСостояниеЭДО,
//                                         необязательный параметр.
//   * МестоРазмещенияКоманд - РасширениеГруппыФормыДляПодменю - подменю, в котором отображаются команды ЭДО.
Функция ПараметрыПриЧтенииНаСервере_ФормаДокумента() Экспорт
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Форма");
	ПараметрыОповещения.Вставить("ДокументСсылка");
	ПараметрыОповещения.Вставить("КонтроллерСостояниеЭДО");
	ПараметрыОповещения.Вставить("ГруппаСостояниеЭДО");
	ПараметрыОповещения.Вставить("МестоРазмещенияКоманд");
	Возврат ПараметрыОповещения;
	
КонецФункции

// Получение параметров оповещения для формы справочника, для передачи в метод 
// ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаСправочника
//
// Возвращаемое значение:
//  Структура:
//    * Форма - ФормаКлиентскогоПриложения - форма справочника.
//    * СправочникСсылка - СправочникСсылка
//    * КонтроллерСостояниеЭДО - ДекорацияФормы, РасширениеПоляФормыДляПоляНадписи - элемент формы "декорация", 
//          "поле надписи", в заголовке которого будет отображаться состояние ЭДО.
//    * ГруппаСостояниеЭДО - ГруппаФормы - элемент формы "группа", которому может принадлежать КонтроллерСостояниеЭДО,
//   	 	необязательный параметр.
//    * МестоРазмещенияКоманд - РасширениеГруппыФормыДляПодменю - подменю, в котором отображаются команды ЭДО.
Функция ПараметрыПриЧтенииНаСервере_ФормаСправочника() Экспорт
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Форма");
	ПараметрыОповещения.Вставить("СправочникСсылка");
	ПараметрыОповещения.Вставить("КонтроллерСостояниеЭДО");
	ПараметрыОповещения.Вставить("ГруппаСостояниеЭДО");
	ПараметрыОповещения.Вставить("МестоРазмещенияКоманд");
	Возврат ПараметрыОповещения;
	
КонецФункции

// Обработчик события "ПриЧтенииНаСервере" формы документа.
//
// Параметры:
//  ПараметрыПриЧтенииНаСервере - см. ПараметрыПриЧтенииНаСервере_ФормаДокумента
//
Процедура ПриЧтенииНаСервере_ФормаДокумента(ПараметрыПриЧтенииНаСервере) Экспорт

	ЕстьПравоЧтенияДокументов = ИнтерфейсДокументовЭДОВызовСервера.ЕстьПравоЧтенияДокументов();
	Если Не ЕстьПравоЧтенияДокументов Тогда
		СкрытьЭлементыЭДОФормыОбъекта(ПараметрыПриЧтенииНаСервере);
		Возврат;
	КонецЕсли;
	
	ИнтерфейсДокументовЭДОКлиентСервер.ЗаполнитьСостояниеЭДО_ФормаДокумента(ПараметрыПриЧтенииНаСервере);
	
КонецПроцедуры

// Обработчик события "ПриЧтенииНаСервере" формы справочника.
//
// Параметры:
//  ПараметрыПриЧтенииНаСервере - см. ПараметрыПриЧтенииНаСервере_ФормаСправочника
//
Процедура ПриЧтенииНаСервере_ФормаСправочника(ПараметрыПриЧтенииНаСервере) Экспорт

	ЕстьПравоЧтенияДокументов = ИнтерфейсДокументовЭДОВызовСервера.ЕстьПравоЧтенияДокументов();
	Если Не ЕстьПравоЧтенияДокументов Тогда
		СкрытьЭлементыЭДОФормыОбъекта(ПараметрыПриЧтенииНаСервере);
		Возврат;
	КонецЕсли;
	
	ИнтерфейсДокументовЭДОКлиентСервер.ЗаполнитьСостояниеЭДО_ФормаСправочника(ПараметрыПриЧтенииНаСервере);
	
КонецПроцедуры

// Функция - Параметры "ПослеЗаписиНаСервере" формы документа.
// 
// Возвращаемое значение:
//  Структура - Параметры, которые нужно передавать в метод ОбменСКонтрагентами.ПослеЗаписиНаСервере:
//    * Форма - ФормаКлиентскогоПриложения - форма документа.
//    * ДокументСсылка - ДокументСсылка - ссылка на документ.
//    * КонтроллерСостояниеЭДО - ДекорацияФормы - элемент формы "декорация", "поле формы", в заголовке которого
//                                                будет отображаться состояние ЭДО, необязательный параметр.
//    * ГруппаСостояниеЭДО - ГруппаФормы - элемент формы "группа", которому может принадлежать КонтроллерСостояниеЭДО,
//                                         необязательный параметр.
//
Функция ПараметрыПослеЗаписиНаСервере() Экспорт
	
	ПараметрыПослеЗаписи = Новый Структура;
	
	ПараметрыПослеЗаписи.Вставить("Форма");
	ПараметрыПослеЗаписи.Вставить("ДокументСсылка");
	ПараметрыПослеЗаписи.Вставить("КонтроллерСостояниеЭДО");
	ПараметрыПослеЗаписи.Вставить("ГруппаСостояниеЭДО");
	
	Возврат ПараметрыПослеЗаписи;
	
КонецФункции

// Функция - Параметры "ПослеЗаписиНаСервере" формы справочника.
// 
// Возвращаемое значение:
//  Структура - Параметры, которые нужно передавать в метод ОбменСКонтрагентами.ПослеЗаписиНаСервере_ФормаСправочника:
//    * Форма - ФормаКлиентскогоПриложения - форма документа.
//    * СправочникСсылка - СправочникСсылка - ссылка на элемент справочника.
//    * КонтроллерСостояниеЭДО - ДекорацияФормы - элемент формы "декорация", "поле формы", в заголовке которого
//                                                будет отображаться состояние ЭДО, необязательный параметр.
//    * ГруппаСостояниеЭДО - ГруппаФормы - элемент формы "группа", которому может принадлежать КонтроллерСостояниеЭДО,
//                                         необязательный параметр.
//
Функция ПараметрыПослеЗаписиНаСервере_ФормаСправочника() Экспорт
	
	ПараметрыПослеЗаписи = Новый Структура;
	
	ПараметрыПослеЗаписи.Вставить("Форма");
	ПараметрыПослеЗаписи.Вставить("СправочникСсылка");
	ПараметрыПослеЗаписи.Вставить("КонтроллерСостояниеЭДО");
	ПараметрыПослеЗаписи.Вставить("ГруппаСостояниеЭДО");
	
	Возврат ПараметрыПослеЗаписи;
	
КонецФункции

// Обработчик события "ПослеЗаписиНаСервере" формы документа
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - Записываемый объект.
//  ПараметрыЗаписи - Структура - Структура, содержащая параметры записи.
//  ПараметрыПослеЗаписи - см. ПараметрыПослеЗаписиНаСервере
//
Процедура ПослеЗаписиНаСервере(ДокументОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи) Экспорт
	
	ЕстьПравоЧтенияДокументов = ИнтерфейсДокументовЭДОВызовСервера.ЕстьПравоЧтенияДокументов();
	Если Не ЕстьПравоЧтенияДокументов Тогда
		Возврат;
	КонецЕсли;
	
	ИнтерфейсДокументовЭДОКлиентСервер.ЗаполнитьСостояниеЭДО_ФормаДокумента(ПараметрыПослеЗаписи);
	
	ДокументОбъект.ДополнительныеСвойства.Свойство("КонтекстОперации", ПараметрыПослеЗаписи.Форма.ПараметрыОбменаСКонтрагентами.КонтекстОперации);
	
КонецПроцедуры

// Обработчик события "ПослеЗаписиНаСервере" формы справочника
//
// Параметры:
//  СправочникОбъект - СправочникОбъект - Записываемый объект.
//  ПараметрыЗаписи - Структура - Структура, содержащая параметры записи.
//  ПараметрыПослеЗаписи - см. ПараметрыПослеЗаписиНаСервере_ФормаСправочника
//
Процедура ПослеЗаписиНаСервере_ФормаСправочника(СправочникОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи) Экспорт
	
	ЕстьПравоЧтенияДокументов = ИнтерфейсДокументовЭДОВызовСервера.ЕстьПравоЧтенияДокументов();
	Если Не ЕстьПравоЧтенияДокументов Тогда
		Возврат;
	КонецЕсли;
	
	ИнтерфейсДокументовЭДОКлиентСервер.ЗаполнитьСостояниеЭДО_ФормаСправочника(ПараметрыПослеЗаписи);
	
	СправочникОбъект.ДополнительныеСвойства.Свойство("КонтекстОперации",
		ПараметрыПослеЗаписи.Форма.ПараметрыОбменаСКонтрагентами.КонтекстОперации);
	
КонецПроцедуры

// Параметры для процедуры см. КлючевыеРеквизитыТекстСостоянияЭДОПриИзменении.
// Если ОписаниеОбъектаУчета оставить Неопределено, тогда оно будет получено по ДокументОбъект.
//
// Возвращаемое значение:
//  Структура:
//    * Форма                 - ФормаКлиентскогоПриложения - Форма учетного документа.
//    * ДокументСсылка        - ДокументСсылка   - Ссылка на документ.
//    * ДокументОбъект        - ДокументОбъект   - Объект документа.
//    * КонтроллерСостояниеЭДО - ДекорацияФормы, ПолеФормы - контроллер состояния ЭДЛ.
//    * ГруппаСостояниеЭДО    - ГруппаФормы      - Группа, в которую входит "КонтроллерСостояниеЭДО".
//    * ОписаниеОбъектаУчета  - Неопределено, ТаблицаЗначений - См. ИнтеграцияЭДО.ОписаниеОбъектаУчета.
//
Функция ПараметрыИзмененияКлючевыхРеквизитов() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Форма");
	Параметры.Вставить("ДокументСсылка");
	Параметры.Вставить("ДокументОбъект");
	Параметры.Вставить("КонтроллерСостояниеЭДО");
	Параметры.Вставить("ГруппаСостояниеЭДО");
	Параметры.Вставить("ОписаниеОбъектаУчета");
	
	Возврат Параметры;
	
КонецФункции

// Обработчик события "ПриИзменении" для полей документов,
// которые содержат значения "Организация", "Контрагент", "ДоговорКонтрагента".
//
// Параметры:
//  ПараметрыПриИзменении - см. ПараметрыИзмененияКлючевыхРеквизитов.
//
Процедура КлючевыеРеквизитыТекстСостоянияЭДОПриИзменении(ПараметрыПриИзменении) Экспорт
	
	ЕстьПравоЧтенияДокументов = ИнтерфейсДокументовЭДОВызовСервера.ЕстьПравоЧтенияДокументов();
	Если Не ЕстьПравоЧтенияДокументов Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбменаСКонтрагентами = ПараметрыПриИзменении.Форма.ПараметрыОбменаСКонтрагентами;
	
	// По незаписанным документам определить параметры не можем, поэтому не реагируем на изменение ключевых реквизитов
	Если Не ЗначениеЗаполнено(ПараметрыПриИзменении.ДокументСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыПриИзменении.ОписаниеОбъектаУчета = Неопределено Тогда
		ОписаниеОбъектаУчета = ИнтеграцияЭДО.ОписаниеОбъектаУчета(ПараметрыПриИзменении.ДокументОбъект);
	Иначе
		ОписаниеОбъектаУчета = ПараметрыПриИзменении.ОписаниеОбъектаУчета;
	КонецЕсли;
	
	Если ТипЗнч(ОписаниеОбъектаУчета) = Тип("ТаблицаЗначений") Тогда
		ОписаниеОбъектаУчета = ОбщегоНазначения.ТаблицаЗначенийВМассив(ОписаниеОбъектаУчета);
	КонецЕсли;
	
	ОписаниеОбъектаУчетаИзменено = Не ОбщегоНазначения.ДанныеСовпадают(ОписаниеОбъектаУчета,
		ПараметрыОбменаСКонтрагентами.ОписаниеОбъектаУчета);
	
	Если ОписаниеОбъектаУчетаИзменено Тогда
		
		ПараметрыПолученияСостояния = ИнтеграцияЭДО.НовыеПараметрыПолученияСостоянияНеНачатогоЭДООбъектаУчета();
		
		Для каждого СтрокаОписания Из ОписаниеОбъектаУчета Цикл
			СтрокаПараметровПолученияСостояния = ПараметрыПолученияСостояния.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПараметровПолученияСостояния, СтрокаОписания);
		КонецЦикла;
		
		ДанныеСостоянияЭДО = Неопределено;
		ИнтеграцияЭДО.ЗаполнитьСостояниеНеНачатогоЭДООбъектаУчета(ПараметрыПолученияСостояния, ДанныеСостоянияЭДО);
		
		ДанныеСостоянияЭДОТекущие = ДанныеСостоянияЭДО;
		ПредставлениеСостояния = ДанныеСостоянияЭДО.ПредставлениеСостояния;
		
	ИначеЕсли ПараметрыОбменаСКонтрагентами.ДанныеСостоянияЭДОИзначальные <> Неопределено Тогда
		
		
		ДанныеСостоянияЭДОТекущие = ПараметрыОбменаСКонтрагентами.ДанныеСостоянияЭДОИзначальные;
		ПредставлениеСостояния = ПараметрыОбменаСКонтрагентами.ДанныеСостоянияЭДОИзначальные.ПредставлениеСостояния;
		
	КонецЕсли;
	
	ПараметрыОбменаСКонтрагентами.ДанныеСостоянияЭДОТекущие = ДанныеСостоянияЭДОТекущие;
	
	Если ТипЗнч(ПараметрыПриИзменении.КонтроллерСостояниеЭДО) = Тип("ПолеФормы") Тогда
		ПараметрыПриИзменении.Форма[ПараметрыПриИзменении.КонтроллерСостояниеЭДО.ПутьКДанным] = ПредставлениеСостояния;
	Иначе
		ПараметрыПриИзменении.КонтроллерСостояниеЭДО.Заголовок = ПредставлениеСостояния;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ФормаСтатусовЭлектронныхДокументов

// Возвращает статусы электронных документов объекта учета.
// 
// Параметры:
//  ОписаниеОбъектаУчета - см. ИнтеграцияЭДО.ОписаниеОбъектаУчета
//  УчитыватьВсеАктуальные - Булево
// 
// Возвращаемое значение:
//  см. НовыйНаборСтатусовЭлектронныхДокументов
Функция СтатусыЭлектронныхДокументовОбъектаУчета(ОписаниеОбъектаУчета, УчитыватьВсеАктуальные = Ложь) Экспорт
	
	СтатусыЭлектронныхДокументов = НовыйНаборСтатусовЭлектронныхДокументов();
	
	ПараметрыОбъектаУчета = ПараметрыОбъектаУчетаДляЗапросаСтатусов(ОписаниеОбъектаУчета);
	
	ДанныеДляЗаполнения = ДанныеДляЗаполненияСтатусовЭлектронныхДокументов(ПараметрыОбъектаУчета, УчитыватьВсеАктуальные);
	
	ЗаполнитьСтатусыПоАктуальнымДокументам(СтатусыЭлектронныхДокументов, ДанныеДляЗаполнения.АктуальныеДокументы);
	
	ЗаполнитьСтатусыПоНастройкам(СтатусыЭлектронныхДокументов, ДанныеДляЗаполнения.РезультатыПоискаНастроек);
	
	Возврат СтатусыЭлектронныхДокументов;
	
КонецФункции

// Возвращает новый набор статусов электронных документов.
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//  * ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  * Организация - ОпределяемыйТип.Организация
//  * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * ПредставлениеДокумента - Строка
//  * ПредставлениеСостояния - Строка
//  * ОжидаемоеДействие - ПеречислениеСсылка.ДействияПоЭДО
//  * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  * Контрагент - ОпределяемыйТип.УчастникЭДО
//  * ДоговорКонтрагента - ОпределяемыйТип.ДоговорСКонтрагентомЭДО
//  * ИдентификаторОбъекта - СправочникСсылка.ИдентификаторыОбъектовМетаданных
//  * НетНастройки - Булево
Функция НовыйНаборСтатусовЭлектронныхДокументов() Экспорт
	
	ОписаниеТипаОбъектаУчета = Метаданные.ОпределяемыеТипы.ОснованияЭлектронныхДокументовЭДО.Тип;
	ОписаниеТипаОрганизация  = Метаданные.ОпределяемыеТипы.Организация.Тип;
	ОписаниеТипаКонтрагент = Метаданные.ОпределяемыеТипы.УчастникЭДО.Тип;
	ОписаниеТипаДоговорКонтрагента = Метаданные.ОпределяемыеТипы.ДоговорСКонтрагентомЭДО.Тип;
	
	СтатусыЭлектронныхДокументов = Новый ТаблицаЗначений;
	СтатусыЭлектронныхДокументов.Колонки.Добавить("ОбъектУчета", ОписаниеТипаОбъектаУчета);
	СтатусыЭлектронныхДокументов.Колонки.Добавить("Организация", ОписаниеТипаОрганизация);
	СтатусыЭлектронныхДокументов.Колонки.Добавить("ЭлектронныйДокумент",
		Новый ОписаниеТипов("ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО"));
	СтатусыЭлектронныхДокументов.Колонки.Добавить("ПредставлениеДокумента", Новый ОписаниеТипов("Строка"));
	СтатусыЭлектронныхДокументов.Колонки.Добавить("ПредставлениеСостояния", Новый ОписаниеТипов("Строка"));
	СтатусыЭлектронныхДокументов.Колонки.Добавить("ОжидаемоеДействие", Новый ОписаниеТипов("ПеречислениеСсылка.ДействияПоЭДО"));
	СтатусыЭлектронныхДокументов.Колонки.Добавить("ВидДокумента",
		Новый ОписаниеТипов("СправочникСсылка.ВидыДокументовЭДО"));
	СтатусыЭлектронныхДокументов.Колонки.Добавить("Контрагент", ОписаниеТипаКонтрагент);
	СтатусыЭлектронныхДокументов.Колонки.Добавить("ДоговорКонтрагента", ОписаниеТипаДоговорКонтрагента);
	СтатусыЭлектронныхДокументов.Колонки.Добавить("ИдентификаторОбъекта",
		Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыОбъектовМетаданных"));
	СтатусыЭлектронныхДокументов.Колонки.Добавить("НетНастройки", Новый ОписаниеТипов("Булево"));
	
	Возврат СтатусыЭлектронныхДокументов;
	
КонецФункции

// Заполняет статусы по данным актуальных электронных документов.
//
// Параметры:
//  СтатусыЭлектронныхДокументов - см. НовыйНаборСтатусовЭлектронныхДокументов
//  АктуальныеДокументы - ТаблицаЗначений:
//  * ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
//  * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * Организация - ОпределяемыйТип.Организация
//  * Контрагент - ОпределяемыйТип.УчастникЭДО
//  * ДоговорКонтрагента - ОпределяемыйТип.ДоговорСКонтрагентомЭДО
//  * НаОзнакомлении - Булево
//  * НомерДокумента - Строка
//  * ДатаДокумента - Дата
//  * СостояниеЭДО - ПеречислениеСсылка.СостоянияДокументовЭДО
//  * ЭтапПодписанияОтсутствует - Булево
Процедура ЗаполнитьСтатусыПоАктуальнымДокументам(СтатусыЭлектронныхДокументов, АктуальныеДокументы) Экспорт
	
	Для Каждого  АктуальныйДокумент Из АктуальныеДокументы Цикл
		
		СвойстваДокумента = Новый Структура;
		СвойстваДокумента.Вставить("Ссылка", АктуальныйДокумент.ЭлектронныйДокумент);
		СвойстваДокумента.Вставить("НаОзнакомлении", АктуальныйДокумент.НаОзнакомлении);
		СвойстваДокумента.Вставить("ТипДокумента", АктуальныйДокумент.ТипДокумента);
		СвойстваДокумента.Вставить("ЭтоОблачныйЭДО", АктуальныйДокумент.ЭтоОблачныйЭДО);
		ДоступныеДействия = ДействияПоСостояниюДокумента(АктуальныйДокумент.СостояниеЭДО, СвойстваДокумента);
		
		ОжидаемоеДействие = Неопределено;
		Если ЗначениеЗаполнено(ДоступныеДействия) Тогда
			Если ДоступныеДействия[Перечисления.ДействияПоЭДО.Сформировать] = Истина Тогда
				ОжидаемоеДействие = Перечисления.ДействияПоЭДО.Сформировать;
			ИначеЕсли ДоступныеДействия[Перечисления.ДействияПоЭДО.Подписать] = Истина Тогда
				ОжидаемоеДействие = Перечисления.ДействияПоЭДО.Подписать;
			ИначеЕсли ДоступныеДействия[Перечисления.ДействияПоЭДО.ПодготовитьКОтправке] = Истина
				ИЛИ ДоступныеДействия[Перечисления.ДействияПоЭДО.Отправить] = Истина Тогда
				ОжидаемоеДействие = Перечисления.ДействияПоЭДО.Отправить;
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыПредставления = ЭлектронныеДокументыЭДО.НовыеСвойстваПредставленияДокумента();
		ПараметрыПредставления.ВидДокумента = АктуальныйДокумент.ВидДокумента;
		ПараметрыПредставления.НомерДокумента = АктуальныйДокумент.НомерДокумента;
		ПараметрыПредставления.ДатаДокумента = АктуальныйДокумент.ДатаДокумента;
		
		НоваяСтрока = СтатусыЭлектронныхДокументов.Добавить();
		НоваяСтрока.ОбъектУчета             = АктуальныйДокумент.ОбъектУчета;
		НоваяСтрока.Организация             = АктуальныйДокумент.Организация;
		НоваяСтрока.ЭлектронныйДокумент     = АктуальныйДокумент.ЭлектронныйДокумент;
		НоваяСтрока.ВидДокумента            = АктуальныйДокумент.ВидДокумента;
		НоваяСтрока.Контрагент              = АктуальныйДокумент.Контрагент;
		НоваяСтрока.ДоговорКонтрагента      = АктуальныйДокумент.ДоговорКонтрагента;
		НоваяСтрока.ПредставлениеДокумента  = ЭлектронныеДокументыЭДО.ПредставлениеДокументаПоСвойствам(ПараметрыПредставления);
		НоваяСтрока.ОжидаемоеДействие       = ОжидаемоеДействие;
		НоваяСтрока.НетНастройки            = Ложь;
		
		Если Не ЗначениеЗаполнено(ОжидаемоеДействие) Тогда
			НоваяСтрока.ПредставлениеСостояния = СтрШаблон("<%1>", АктуальныйДокумент.СостояниеЭДО);
		ИначеЕсли АктуальныйДокумент.ЭтапПодписанияОтсутствует
			И ОжидаемоеДействие = Перечисления.ОжидаемоеДействиеЭД.Подписать Тогда
			НоваяСтрока.ОжидаемоеДействие = Перечисления.ОжидаемоеДействиеЭД.ПустаяСсылка();
			НоваяСтрока.ПредставлениеСостояния = НСтр("ru = '<Ожидается подписание других лиц>'");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет статусы по данным актуальных электронных документов.
//
// Параметры:
//  СтатусыЭлектронныхДокументов - см. НовыйНаборСтатусовЭлектронныхДокументов
//  РезультатыПоискаНастроек - ТаблицаЗначений:
//  * ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  * Организация - ОпределяемыйТип.Организация
//  * Контрагент - Неопределено,ОпределяемыйТип.УчастникЭДО
//  * ДоговорКонтрагента - Неопределено,ОпределяемыйТип.ДоговорСКонтрагентомЭДО
//  * ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  * ИдентификаторОбъекта - СправочникСсылка.ИдентификаторыОбъектовМетаданных
//  * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
//  * НетНастройки - Булево
Процедура ЗаполнитьСтатусыПоНастройкам(СтатусыЭлектронныхДокументов, РезультатыПоискаНастроек) Экспорт
	
	ОбъектыУчетаПоИдентификаторам = Новый Соответствие;
	
	ЗаменяемыеВиды = ЭлектронныеДокументыЭДО.ВидыДокументовЗаменяемыеУПДУКД();
	
	Для Каждого РезультатПоискаНастройки Из РезультатыПоискаНастроек Цикл
		
		Если ЗначениеЗаполнено(РезультатПоискаНастройки.Контрагент) Тогда
			ОтборАктуальныхДокументовОбъекта = Новый Структура("ОбъектУчета, Организация, Контрагент");
			Если ЗначениеЗаполнено(РезультатПоискаНастройки.ДоговорКонтрагента) Тогда
				ОтборАктуальныхДокументовОбъекта.Вставить("ДоговорКонтрагента");
			КонецЕсли;
		Иначе
			ОтборАктуальныхДокументовОбъекта = Новый Структура("ОбъектУчета, Организация");
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ОтборАктуальныхДокументовОбъекта, РезультатПоискаНастройки);
		
		ОтборВидовДокументов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(РезультатПоискаНастройки.ВидДокумента);
		
		Если ЗаменяемыеВиды.УПД.ВидДокумента = РезультатПоискаНастройки.ВидДокумента Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОтборВидовДокументов,
				ЗаменяемыеВиды.УПД.ЗаменяемыеВидыДокументов);
		ИначеЕсли ЗаменяемыеВиды.УПД.ЗаменяемыеВидыДокументов.Найти(РезультатПоискаНастройки.ВидДокумента) <> Неопределено Тогда 
			ОтборВидовДокументов.Добавить(ЗаменяемыеВиды.УПД.ВидДокумента);
		ИначеЕсли ЗаменяемыеВиды.УКД.ВидДокумента = РезультатПоискаНастройки.ВидДокумента Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОтборВидовДокументов,
				ЗаменяемыеВиды.УКД.ЗаменяемыеВидыДокументов);
		ИначеЕсли ЗаменяемыеВиды.УКД.ЗаменяемыеВидыДокументов.Найти(РезультатПоискаНастройки.ВидДокумента) <> Неопределено Тогда 
			ОтборВидовДокументов.Добавить(ЗаменяемыеВиды.УКД.ВидДокумента);
		КонецЕсли;
		
		ЕстьСведенияОСтатусе = Ложь;
		
		СтатусыАктуальныхДокументов = СтатусыЭлектронныхДокументов.НайтиСтроки(ОтборАктуальныхДокументовОбъекта);
		Для Каждого СведенияОСтатусеДокумента Из СтатусыАктуальныхДокументов Цикл
			Если ОтборВидовДокументов.Найти(СведенияОСтатусеДокумента.ВидДокумента) <> Неопределено Тогда
				ЕстьСведенияОСтатусе = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьСведенияОСтатусе Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = СтатусыЭлектронныхДокументов.Добавить();
		НоваяСтрока.ОбъектУчета             = РезультатПоискаНастройки.ОбъектУчета;
		НоваяСтрока.Организация             = РезультатПоискаНастройки.Организация;
		НоваяСтрока.ВидДокумента            = РезультатПоискаНастройки.ВидДокумента;
		НоваяСтрока.Контрагент              = РезультатПоискаНастройки.Контрагент;
		НоваяСтрока.ДоговорКонтрагента      = РезультатПоискаНастройки.ДоговорКонтрагента;
		НоваяСтрока.ПредставлениеДокумента  = РезультатПоискаНастройки.ВидДокумента;
		НоваяСтрока.ОжидаемоеДействие       = Перечисления.ДействияПоЭДО.Сформировать;
		НоваяСтрока.ИдентификаторОбъекта    = РезультатПоискаНастройки.ИдентификаторОбъекта;
		Если РезультатПоискаНастройки.ТипДокумента <> Перечисления.ТипыДокументовЭДО.МашиночитаемаяДоверенность Тогда
			НоваяСтрока.НетНастройки = РезультатПоискаНастройки.НетНастройки;
		КонецЕсли;
		
		Если ОбъектыУчетаПоИдентификаторам[РезультатПоискаНастройки.ИдентификаторОбъекта] = Неопределено Тогда
			ОбъектыУчетаПоИдентификаторам.Вставить(РезультатПоискаНастройки.ИдентификаторОбъекта,
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(РезультатПоискаНастройки.ОбъектУчета));
		Иначе
			ОбъектыУчетаПоИдентификаторам[РезультатПоискаНастройки.ИдентификаторОбъекта].Добавить(РезультатПоискаНастройки.ОбъектУчета);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ОбъектыУчетаПоИдентификаторам) Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = ВыборкаРеквизитовНомерДатаОбъектовУчета(ОбъектыУчетаПоИдентификаторам);
	
	ОтборОбъектаУчета = Новый Структура("ОбъектУчета");
	
	Пока Выборка.Следующий() Цикл
		
		ОтборОбъектаУчета.ОбъектУчета = Выборка.Ссылка;
		НайденныеСтроки = СтатусыЭлектронныхДокументов.НайтиСтроки(ОтборОбъектаУчета);
		Если НайденныеСтроки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
	
		Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
		
			Если ЗначениеЗаполнено(СтрокаТаблицы.ЭлектронныйДокумент) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТаблицы.ПредставлениеДокумента = ПредставлениеНеСформированногоДокументаПоВиду(
				СтрокаТаблицы.ВидДокумента, Выборка.Номер, Выборка.Дата);
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПредставлениеДокумента

// Возвращает пустые свойства электронного документа для формирования представления.
// 
// Возвращаемое значение:
// 	Структура - Описание:
// 	* ВидДокумента - СправочникСсылка.ВидыДокументовЭДО - 
// 	* НомерДокумента - Строка - 
// 	* ДатаДокумента - Дата - 
Функция НовыеСвойстваПредставленияДокумента() Экспорт
	Свойства = Новый Структура;
	Свойства.Вставить("ВидДокумента", Справочники.ВидыДокументовЭДО.ПустаяСсылка());
	Свойства.Вставить("НомерДокумента", "");
	Свойства.Вставить("ДатаДокумента", Дата(1,1,1));
	Возврат Свойства;
КонецФункции

// Получение представления по свойствам электронного документа.
//
// Параметры:
// 	СвойстваДокумента - Структура - параметры из которых формируется представление документа:
// 	* ВидДокумента - СправочникСсылка.ВидыДокументовЭДО - вид электронного документа.
// 	* НомерДокумента - Строка - номер электронного документа.
// 	* ДатаДокумента - Дата - дата электронного документа.
// 	ЭтоНовый - Булево
// 
// Возвращаемое значение:
//  См. ИнтерфейсДокументовЭДОКлиентСервер.ПредставлениеДокументаПоСвойствам
Функция ПредставлениеДокументаПоСвойствам(СвойстваДокумента, ЭтоНовый = Ложь) Экспорт
	Возврат ИнтерфейсДокументовЭДОКлиентСервер.ПредставлениеДокументаПоСвойствам(СвойстваДокумента, ЭтоНовый);
КонецФункции

#КонецОбласти

#Область ФормыМЧД
// Возвращает количество подписанных электронных документов доверенностью.
//
// Параметры:
//  Доверенность - СправочникСсылка - ссылка на элемент справочника машиночитаемых доверенностей.
//
// Возвращаемое значение:
//  Число - число текущих документов, соответствующих переданным параметрам. 
//
Функция КоличествоПодписанныхЭлектронныхДокументовПоМЧД(Знач Доверенность) Экспорт
	
	Запрос = ЗапросКоличестваПодписанныхЭлектронныхДокументовПоМЧД(Доверенность);
	
	Количество = 0;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Количество = Выборка.Количество;
	КонецЕсли;
	
	Возврат Количество;

КонецФункции

#КонецОбласти

#Область ПереопределениеМеханизмаПечатиБСП

// см. УправлениеПечатьюПереопределяемый.ПриПечати
Процедура ПриПечати(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если Не НастройкиЭДО.ИспользуетсяОбменЭлектроннымиДокументами()
			Или Не НастройкиЭДО.ИспользуютсяВнутренниеДокументы() 
			Или ПараметрыПечати.Свойство("ИсключитьШтампы")
			Или Не ЭлектронныеДокументыЭДО.ЕстьПравоЧтенияДокументов() Тогда
		Возврат;
	КонецЕсли;
		
	Для Каждого ОбъектПечати Из ОбъектыПечати Цикл
		
		ПараметрыВнутреннегоЭД = Неопределено;
		ОписаниеОбъектаУчета = ИнтеграцияЭДО.ОписаниеОбъектаУчета(ОбъектПечати.Значение);
		Для каждого СтрокаОписания Из ОписаниеОбъектаУчета Цикл
			Если СтрокаОписания.Направление = Перечисления.НаправленияЭДО.Внутренний Тогда
				ПараметрыВнутреннегоЭД = СтрокаОписания;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ПараметрыВнутреннегоЭД <> Неопределено Тогда
			
			Для Каждого ПечатнаяФорма Из КоллекцияПечатныхФорм Цикл
				
				ОбластьДокумента  = ПечатнаяФорма.ТабличныйДокумент.Области.Найти(ОбъектПечати.Представление);
				
				Если ОбластьДокумента <> Неопределено Тогда
					
					МетаданныеОбъекта = ОбъектПечати.Значение.Метаданные();
					
					ПолноеИмяФормы = МетаданныеОбъекта.ОсновнаяФормаОбъекта.Имя;
					СписокОбъектов = Новый Массив();
					СписокОбъектов.Добавить(МетаданныеОбъекта);
					
					Идентификатор = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(ОбъектПечати.Значение));
					КомандыПечати = УправлениеПечатью.КомандыПечатиФормы(ПолноеИмяФормы, СписокОбъектов);
					НайденнаяКоманда = КомандыПечати.Найти(ПечатнаяФорма.ИмяМакета, "Идентификатор"); 
					
					Если Не ЗначениеЗаполнено(НайденнаяКоманда) Тогда
						Возврат;
					КонецЕсли;
					
					ВидВнутреннегоДокумента = ЭлектронныеДокументыЭДО.НайтиСоздатьВидВнутреннегоДокумента(
						Идентификатор,
						НайденнаяКоманда);
					
					АктуальныеЭлектронныеДокументы = ИнтеграцияЭДО.АктуальныеЭлектронныеДокументы(
						ОбъектПечати.Значение);
					
					ОтборПоВидуДокумента = Новый Структура("ВидДокумента", ВидВнутреннегоДокумента);
					АктуальныеЭлектронныеДокументыПоВиду = АктуальныеЭлектронныеДокументы.НайтиСтроки(
						ОтборПоВидуДокумента);
					
					Если АктуальныеЭлектронныеДокументыПоВиду.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					АктуальныйЭлектронныйДокумент = АктуальныеЭлектронныеДокументыПоВиду[0].ЭлектронныйДокумент;
					
					Если Не ЗначениеЗаполнено(АктуальныйЭлектронныйДокумент) Тогда
						Продолжить;
					КонецЕсли;
					
					ЭД = ЭлектронныеДокументыЭДО.СообщениеОтправителя(АктуальныйЭлектронныйДокумент);
					
					Если Не ЗначениеЗаполнено(ЭД) Тогда
						Продолжить;
					КонецЕсли;
					
					ЭлектронныеДокументыЭДО.ДополнитьТабличныйДокументШтампамиПодписей(
						ПечатнаяФорма.ТабличныйДокумент,
						ЭД);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// см. УправлениеПечатьюПереопределяемый.ПечатьДокументовПриСозданииНаСервере
Процедура ПечатьДокументовПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт

	Если Не НастройкиЭДО.ИспользуетсяОбменЭлектроннымиДокументами()
		Или Не ЭлектронныеДокументыЭДО.ЕстьПравоОбработкиДокументов() Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектыУчета = Форма.Параметры.ПараметрКоманды;
	
	Если Не ЗначениеЗаполнено(ОбъектыУчета) Тогда 
		 Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ОбъектыУчета) <> Тип("Массив") Тогда
		 ОбъектыУчета = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбъектыУчета);
	КонецЕсли;
	
	ЕстьНаправлениеЭДОВнутренний = Ложь;
	ЕстьНаправлениеЭДОВнешний = Ложь;
	ОписаниеОбъектаУчета = ИнтеграцияЭДО.ОписаниеОбъектаУчета(ОбъектыУчета[0]);
	Для каждого ПараметрыЭД Из ОписаниеОбъектаУчета Цикл
		Если ПараметрыЭД.Направление = Перечисления.НаправленияЭДО.Внутренний Тогда
			ЕстьНаправлениеЭДОВнутренний = Истина;
		Иначе
			ЕстьНаправлениеЭДОВнешний = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьНаправлениеЭДОВнутренний  
		И ПолучитьФункциональнуюОпцию("ИспользоватьВнутренниеДокументыЭДО") Тогда 
		ДополнитьЭлементамиВнутреннегоЭДО(Форма, Отказ, СтандартнаяОбработка);
	КонецЕсли;
	
	Если ЕстьНаправлениеЭДОВнешний
		И ОбъектыУчета.Количество() = 1 
		И Метаданные.ОпределяемыеТипы.ОснованияЭлектронныхДокументовЭДО.Тип.СодержитТип(ТипЗнч(ОбъектыУчета[0])) Тогда
		ДополнитьЭлементамиВнешнегоЭДО(Форма, Отказ, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область СхемаРегламента

// Возвращает новые данные элементов схемы.
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
// * Наименование - Строка
// * ТипЭлементаРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО
// * Сообщение - ДокументСсылка.СообщениеЭДО
// * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
// * ВидСообщения - СправочникСсылка.ВидыДокументовЭДО
// * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
// * Направление - ПеречислениеСсылка.НаправленияЭДО
// * Статус - ПеречислениеСсылка.СтатусыСообщенийЭДО
// * ДатаИзмененияСтатуса - Дата
// * ДополнительнаяИнформация - Строка
// * ПрисоединенныйФайл - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
// * АдресОписанияСообщения - Строка
// * Доступность - Булево
// * ИмяФайла - Строка
// * Расширение - Строка
//
Функция НовыеДанныеЭлементовСхемы() Экспорт
	ДанныеЭлементов = Новый ТаблицаЗначений;
	ДанныеЭлементов.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	ДанныеЭлементов.Колонки.Добавить("ТипЭлементаРегламента",
		Новый ОписаниеТипов("ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО"));
	ДанныеЭлементов.Колонки.Добавить("Сообщение", Новый ОписаниеТипов("ДокументСсылка.СообщениеЭДО"));
	ДанныеЭлементов.Колонки.Добавить("ВидДокумента", Новый ОписаниеТипов("СправочникСсылка.ВидыДокументовЭДО"));
	ДанныеЭлементов.Колонки.Добавить("ВидСообщения", Новый ОписаниеТипов("СправочникСсылка.ВидыДокументовЭДО"));
	ДанныеЭлементов.Колонки.Добавить("ТипДокумента", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыДокументовЭДО"));
	ДанныеЭлементов.Колонки.Добавить("Направление", Новый ОписаниеТипов("ПеречислениеСсылка.НаправленияЭДО"));
	ДанныеЭлементов.Колонки.Добавить("Статус", Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыСообщенийЭДО"));
	ДанныеЭлементов.Колонки.Добавить("ДатаИзмененияСтатуса", Новый ОписаниеТипов("Дата"));
	ДанныеЭлементов.Колонки.Добавить("ДополнительнаяИнформация", Новый ОписаниеТипов("Строка"));
	ДанныеЭлементов.Колонки.Добавить("ПрисоединенныйФайл",
		Новый ОписаниеТипов("СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы"));
	ДанныеЭлементов.Колонки.Добавить("АдресОписанияСообщения", Новый ОписаниеТипов("Строка"));
	ДанныеЭлементов.Колонки.Добавить("Доступность", Новый ОписаниеТипов("Булево"));
	ДанныеЭлементов.Колонки.Добавить("ИмяФайла", Новый ОписаниеТипов("Строка"));
	ДанныеЭлементов.Колонки.Добавить("Расширение", Новый ОписаниеТипов("Строка"));
	Возврат ДанныеЭлементов;
КонецФункции

Процедура ЗаполнитьСхемуРегламента(НастройкиСхемыРегламента, ДанныеЭлементовСхемы, СхемаРегламента) Экспорт
	
	НоваяСхемаРегламента = ЭлектронныеДокументыЭДО.НоваяСхемаРегламента(НастройкиСхемыРегламента, ДанныеЭлементовСхемы);
	
	ЗаполнитьПустыеДанныеЭлементовСхемыРегламента(НоваяСхемаРегламента, ДанныеЭлементовСхемы);
	
	ОбновитьЭлементыСхемыРегламента(СхемаРегламента, НоваяСхемаРегламента);
	
КонецПроцедуры

Функция ИдентификаторЭлементаСхемыРегламента(ЭлементСхемыРодитель, Сообщение) Экспорт
	
	КоллекцияЭлементовСхемы = ЭлементСхемыРодитель.ПолучитьЭлементы();
	Если КоллекцияЭлементовСхемы.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для Каждого ЭлементСхемы Из КоллекцияЭлементовСхемы Цикл
		Если ЭлементСхемы.Сообщение = Сообщение Тогда
			Возврат ЭлементСхемы.ПолучитьИдентификатор();
		КонецЕсли;
		ИдентификаторЭлемента = ИдентификаторЭлементаСхемыРегламента(ЭлементСхемы, Сообщение);
		Если ИдентификаторЭлемента <> Неопределено Тогда
			Возврат ИдентификаторЭлемента;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область ПредупрежденияКомпонентов

Процедура СформироватьПредупреждения(Форма, ГруппаПредупреждений) Экспорт
	
	КлючНастроекОтправки = НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтправки();
	КлючНастроекОтправки.Отправитель = Форма.Объект.Организация;
	КлючНастроекОтправки.Получатель = Форма.Объект.Контрагент;
	КлючНастроекОтправки.Договор = Форма.Объект.ДоговорКонтрагента;
	КлючНастроекОтправки.ВидДокумента = Форма.Объект.ВидДокумента;
	
	Предупреждения = ПолучитьПредупрежденияКомпонентов(КлючНастроекОтправки);
	
	Форма.АдресХранилищаПредупреждений = ПоместитьВоВременноеХранилище(Предупреждения, Форма.УникальныйИдентификатор);
	
	НеподдерживаемыйСпособОбменаВид = НастройкиЭДО.ВидыПредупреждений().НеподдерживаемыйСпособОбмена;
	ПредупрежденияНеподдерживаемыйСпособОбмена = ПредупрежденияПоВиду(Предупреждения,
		НеподдерживаемыйСпособОбменаВид);
	
	ИмяГруппыПрекращенияПрямогоОбмена = "ГруппаПрекращениеПоддержкиПрямогоОбмена";
	ИмяГруппыПрекращенияПредупрежденияОбменаСКонтрагентом = "ГруппПредупрежденияОбменаСКонтрагентом";
	ИмяГруппыОНеактуальномЭлектронномДокументе = "ГруппПредупрежденияОНеактуальномЭлектронномДокументе";
	
	СоздатьЭлементыОтображенияПредупрежденияПрекращенияПрямогоОбмена(Форма, ГруппаПредупреждений,
		ИмяГруппыПрекращенияПрямогоОбмена);
	СоздатьЭлементыОтображенияПредупрежденияОбменаСКонтрагентом(Форма, ГруппаПредупреждений,
		ИмяГруппыПрекращенияПредупрежденияОбменаСКонтрагентом);
	СоздатьЭлементыОтображенияПредупрежденияОНеактуальномЭлектронномДокументе(Форма, ГруппаПредупреждений,
		ИмяГруппыОНеактуальномЭлектронномДокументе);

	Форма.Элементы.Найти(ИмяГруппыПрекращенияПрямогоОбмена).Видимость = ЗначениеЗаполнено(
		ПредупрежденияНеподдерживаемыйСпособОбмена);
	Форма.Элементы.Найти(ИмяГруппыПрекращенияПредупрежденияОбменаСКонтрагентом).Видимость = ЗначениеЗаполнено(
		Предупреждения);
	Форма.Элементы.Найти(ИмяГруппыОНеактуальномЭлектронномДокументе).Видимость = Ложь;	
	
	МассивОбъектов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Форма.Объект.Ссылка);
	
	ОбъектыУчетаЭлектронныхДокументов = ИнтеграцияЭДО.ОбъектыУчетаЭлектронныхДокументов(МассивОбъектов);
	ОбъектыУчетаЭлектронногоДокумента = ОбъектыУчетаЭлектронныхДокументов.НайтиСтроки(Новый Структура("ЭлектронныйДокумент", Форма.Объект.Ссылка));
		
	Для Каждого СтрокаДанных Из ОбъектыУчетаЭлектронногоДокумента Цикл
		Если Не СтрокаДанных.Актуальный 
			И ТипЗнч(СтрокаДанных.ОбъектУчета) <> Тип("СправочникСсылка.НастройкиЭДО") Тогда
			
			Форма.Элементы.Найти(ИмяГруппыОНеактуальномЭлектронномДокументе).Видимость = Истина;	
	
			Прервать;	
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Переформирование

// Настраивает визуальное оформление команды Переформировать.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  ЭлементСхемы - СтрокаДереваЗначений
Процедура НастроитьКомандуПереформировать(Форма, ЭлементСхемы) Экспорт
	
	КнопкаПереформировать = Форма.Элементы.Переформировать;
	
	ЕстьПравоОбработкиДокументов = ЭлектронныеДокументыЭДО.ЕстьПравоОбработкиДокументов();
	
	Если Форма.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.НеСформирован 
		Или Не ЭлементСхемы.Распознан 
		Или ЭлектронныеДокументыЭДО.ПереформированиеЗапрещеноПоТипуДокумента(ЭлементСхемы.ТипДокумента)
		Или Не ЕстьПравоОбработкиДокументов
		Или ЕстьЭлектронныйДокумент(Форма.Основания.ВыгрузитьЗначения()) Тогда
		
		КнопкаПереформировать.Видимость = Ложь;	
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Элементы, "ПереформироватьДокумент") Тогда
			 Форма.Элементы.ПереформироватьДокумент.Видимость = Ложь;	
		КонецЕсли;
		Возврат;
	Иначе
		КнопкаПереформировать.Видимость = Истина;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Элементы, "ПереформироватьДокумент") Тогда
			 Форма.Элементы.ПереформироватьДокумент.Видимость = Истина;	
		КонецЕсли;	
	КонецЕсли;
	
	Если Форма.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяУточнение Тогда
		ПереместитьЭлемент(Форма.Элементы, Форма.Элементы.Переформировать.Имя, Форма.Элементы.ГруппаКоманды,
			Форма.Элементы.ГруппаКомандОсновные.Имя);
			
	Иначе
		ПереместитьЭлемент(Форма.Элементы, Форма.Элементы.Переформировать.Имя, Форма.Элементы.ПодменюДругиеДействия,
			Форма.Элементы.ГруппаКомандСоздатьПроизвольныйДокумент.Имя);
	КонецЕсли;
	
	Если ЭлементСхемы.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя
		И ЗначениеЗаполнено(Форма.Основания) Тогда
		КнопкаПереформировать.Заголовок = НСтр("ru = 'Переформировать документ'");
	ИначеЕсли ЭлементСхемы.Направление = Перечисления.НаправленияЭДО.Исходящий 
		И ЗначениеЗаполнено(Форма.Основания) Тогда
		КнопкаПереформировать.Заголовок = СтрШаблон(НСтр("ru = 'Переформировать %1'"), ЭлементСхемы.ВидДокумента);
	Иначе
		КнопкаПереформировать.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает параметры, заполняемые при выполнении переформирования документов.
// 
// Возвращаемое значение:
//  Структура:
//   * СформированныеДокументы - Соответствие Из КлючИЗначение:
//    ** Ключ - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//    ** Значение - Булево 
//   * РезультатДействийПоЭДО - См. ЭлектронныеДокументыЭДО.НовыйРезультатДействийПоЭДО 
//   * ЕстьОшибки - Булево
Функция НовыйРезультатПереформированияДокументов() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("СформированныеДокументы", Новый Соответствие());
	Результат.Вставить("РезультатДействийПоЭДО", Неопределено);
	Результат.Вставить("ЕстьОшибки", Ложь);
	
	Возврат Результат;
	
КонецФункции 

#КонецОбласти

#Область Настройки
	
Функция НастройкиВнутреннегоЭДО(Организация, ВидДокумента) Экспорт
	
	Запросы = Новый Массив;
	
	ОтборНастроекВнутреннегоЭДО = НастройкиЭДО.НовыйОтборНастроекВнутреннегоЭДО();
	ОтборНастроекВнутреннегоЭДО.Организация = "&Организация";
	ОтборНастроекВнутреннегоЭДО.ВидДокумента = "&ВидДокумента";
	Организация = Организация;		
	
	ЗапросНастроек = НастройкиЭДО.ЗапросНастроекВнутреннегоЭДО("НастройкиВнутреннегоЭДО", ОтборНастроекВнутреннегоЭДО);
	
	Запросы.Добавить(ЗапросНастроек);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	НастройкиВнутреннегоЭДО.Организация КАК Организация,
	|	НастройкиВнутреннегоЭДО.ВидВнутреннегоДокумента КАК ВидДокумента,
	|	НастройкиВнутреннегоЭДО.Формировать КАК Формировать,
	|	НастройкиВнутреннегоЭДО.ВидПодписи КАК ВидПодписи,
	|	НастройкиВнутреннегоЭДО.МаршрутПодписания КАК МаршрутПодписания,
	|	НастройкиВнутреннегоЭДО.ЭтоОсновнойВидДокумента КАК ЭтоОсновнойВидДокумента
	|ИЗ
	|	НастройкиВнутреннегоЭДО";
	
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	ИтоговыйЗапрос.УстановитьПараметр("Организация", Организация);
	ИтоговыйЗапрос.УстановитьПараметр("ВидДокумента", ВидДокумента);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = ИтоговыйЗапрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);

	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(РезультатЗапроса.Выгрузить())[0];
	КонецЕсли;
	
КонецФункции
	
#КонецОбласти

#Область ДействияПоИнтеграциямЭДО

// Заполняет отпечатки сертификатов на сервере.
// 
// Параметры:
//  ПараметрыВыполнения - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Процедура ЗаполнитьОтпечаткиСертификатов(ПараметрыВыполнения, КонтекстДиагностики) Экспорт
	
	Если Не ЕстьДействие(ПараметрыВыполнения.НаборДействий, Перечисления.ДействияПоЭДО.Подписать)
		И Не ЕстьДействие(ПараметрыВыполнения.НаборДействий, Перечисления.ДействияПоЭДО.Отправить) Тогда
		Возврат;
	КонецЕсли;
	
	ВидОперации = НСтр("ru = 'Выполнение действий по ЭДО'");
	ПараметрыВыполнения.ОтпечаткиСертификатов = КриптографияБЭД.ПолучитьОтпечаткиСертификатов(ВидОперации,
		Неопределено, ПараметрыВыполнения.ОтпечаткиСертификатов);
	
КонецПроцедуры

// Возвращает признак наличия действия в наборе.
// 
// Параметры:
//  НаборДействий - Соответствие из КлючИЗначение:
//  * Ключ - ПеречислениеСсылка.ДействияПоЭДО
//  * Значение - Булево
//  Действие - ПеречислениеСсылка.ДействияПоЭДО
// 
// Возвращаемое значение:
//  Булево
Функция ЕстьДействие(НаборДействий, Действие) Экспорт
	Возврат НаборДействий[Действие] = Истина;
КонецФункции

// Возвращает имя таблицы документа ЭДО.
// 
// Параметры:
//  ЭтоВходящийЭДО - Булево
// 
// Возвращаемое значение:
//  Строка
Функция ИмяТаблицыДокументаЭДО(ЭтоВходящийЭДО) Экспорт
	Возврат ?(ЭтоВходящийЭДО, "Документ.ЭлектронныйДокументВходящийЭДО", "Документ.ЭлектронныйДокументИсходящийЭДО");
КонецФункции

// Параметры:
//  Сообщение - ДокументСсылка.СообщениеЭДО - Ссылка на сообщение ЭДО
//  ОтветноеСообщение - ДокументСсылка.СообщениеЭДО, Неопределено - Ответное сообщение ЭДО
// 
// Возвращаемое значение:
//  ТабличныйДокумент
Функция ПредставлениеКарточкиСообщения(Сообщение, ОтветноеСообщение = Неопределено) Экспорт
	
	Возврат ЭлектронныеДокументыЭДО.ПредставлениеКарточкиСообщения(Сообщение, ОтветноеСообщение);
	
КонецФункции

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  СпособОбработки - Строка
// 
// Возвращаемое значение:
//  Неопределено,Структура:
//  * СпособОбработки - Строка
//  * Организация - см. ИнтеграцияЭДО.ПустаяСсылкаОрганизации
//  * Контрагент - см. ИнтеграцияЭДО.ПустаяСсылкаУчастникаЭДО
//  * ИмяОбъектаМетаданных - Строка - Опционально.
//  * ИмяТипаСсылки - Строка - Опционально.
Функция НастройкиПодбораУчетногоДокумента(ЭлектронныйДокумент, СпособОбработки = "") Экспорт
		
	Настройки = Новый Структура;
	Настройки.Вставить("СпособОбработки", СпособОбработки);
	ИмяТипа = ИнтеграцияЭДО.ИмяДокументаПоСпособуОбработки(СпособОбработки);

	Если Метаданные.Справочники.Найти(ИмяТипа) <> Неопределено Тогда
		
		МетаданныеОбъекта = Метаданные.Справочники.Найти(ИмяТипа);
		Настройки.Вставить("ИмяОбъектаМетаданных", МетаданныеОбъекта.ПолноеИмя());
		Настройки.Вставить("ИмяТипаСсылки", "СправочникСсылка." + ИмяТипа);
		
	ИначеЕсли Метаданные.Документы.Найти(ИмяТипа) <> Неопределено Тогда
		
		МетаданныеОбъекта = Метаданные.Документы.Найти(ИмяТипа);
		Настройки.Вставить("ИмяОбъектаМетаданных", МетаданныеОбъекта.ПолноеИмя());
		Настройки.Вставить("ИмяТипаСсылки", "ДокументСсылка." + ИмяТипа);

	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ДанныеЭлементовСхемыРегламента = ЭлектронныеДокументыЭДО.ДанныеЭлементовСхемыРегламента(ЭлектронныйДокумент);
	
	ИнформацияОтправителя = ДанныеЭлементовСхемыРегламента.Найти(
		Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя, "ТипЭлементаРегламента");
		
	Если ИнформацияОтправителя <> Неопределено Тогда
	
		ПрисоединенныйФайл = ИнформацияОтправителя.ПрисоединенныйФайл;
		
		ДанныеФайла = РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл);
		
		ОписаниеФайла = РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла();
		ОписаниеФайла.ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
		УдалитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
		ОписаниеФайла.ИмяФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрисоединенныйФайл, "ПолноеИмяФайла");
		СодержаниеСообщения = ЭлектронныеДокументыЭДО.СодержаниеСообщения(ОписаниеФайла);
		
		Если СодержаниеСообщения <> Неопределено Тогда
			Получатель = СодержаниеСообщения.Получатель;
			Отправитель = СодержаниеСообщения.Отправитель;
			
			ПараметрыПриглашения = ПриглашенияЭДОКлиентСервер.КлючПриглашения();
			ПараметрыПриглашения.ИдентификаторОрганизации = ЭлектронныйДокумент.ИдентификаторОрганизации;
			ПараметрыПриглашения.ИдентификаторКонтрагента = ЭлектронныйДокумент.ИдентификаторКонтрагента;
			ПараметрыПриглашения.ИНН = Получатель.ИНН;
			ПараметрыПриглашения.КПП = Отправитель.КПП;
			
			ОбменМеждуСобственнымиОрганизациями = ПриглашенияЭДО.ОбменЭДМеждуОрганизациями(ПараметрыПриглашения);
			ТипОбъектаОтправителя = ?(ОбменМеждуСобственнымиОрганизациями, "Организации", "Контрагенты");
			
			Организация = ИнтеграцияЭДО.СсылкаНаОбъектПоИННКПП("Организации", Получатель.ИНН, Получатель.КПП);
			Контрагент = ИнтеграцияЭДО.СсылкаНаОбъектПоИННКПП(ТипОбъектаОтправителя, Отправитель.ИНН, Отправитель.КПП);

		КонецЕсли;
	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация) Или Не ЗначениеЗаполнено(Контрагент) Тогда
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлектронныйДокумент, "Организация, Контрагент");
		Организация = ЗначенияРеквизитов.Организация;
		Контрагент = ЗначенияРеквизитов.Контрагент;
	КонецЕсли;
	
	Настройки.Вставить("Организация", Организация);
	Настройки.Вставить("Контрагент", Контрагент);
	
	Возврат Настройки;
		
КонецФункции

// Возвращаемое значение:
//  Булево - есть интеграция с клиентом ЭДО
Функция ЕстьИнтеграцияОблачногоЭДО() Экспорт
	Возврат ОбщегоНазначения.ПодсистемаСуществует(
		"ЭлектронноеВзаимодействие.ОбменСКонтрагентами.ИнтеграцияОблачногоЭДО");
КонецФункции

#КонецОбласти

#Область ОтправитьИПолучить

// Параметры:
//  УчетныеЗаписиОбмена - Неопределено, Массив из Строка - идентификаторы оператора электронного документооборота
// Возвращаемое значение:
//  Структура:
//  * ПараметрыВыполненияДействий - см. ПараметрыВыполненияДействийПриОтправкеПолученииДокументовЭДО
//  * УчетныеЗаписиЭДОБезПринятыхУсловийСервиса - см. УчетныеЗаписиЭДО.УчетныеЗаписиЭДОБезПринятыхУсловийСервиса
//	* ИспользуетсяОтправкаПолучениеСОтборомПоОрганизации - Булево, Неопределено -
//	* ДанныеОтбораНастройкиОтправкиПолучения - см. ДанныеОтбораНастройкиОтправкиПолучения
Функция ПараметрыОтправкиПолученияДокументовЭДО(УчетныеЗаписиОбмена = Неопределено) Экспорт
	
	ПараметрыВыполненияДействий = ПараметрыВыполненияДействийПриОтправкеПолученииДокументовЭДО();
	
	ПараметрыОтправкиПолучения = Новый Структура;
	ПараметрыОтправкиПолучения.Вставить("ПараметрыВыполненияДействий", ПараметрыВыполненияДействий);
	ПараметрыОтправкиПолучения.Вставить("УчетныеЗаписиЭДОБезПринятыхУсловийСервиса", Новый Массив);
	ПараметрыОтправкиПолучения.Вставить("ИспользуетсяОтправкаПолучениеСОтборомПоОрганизации"
			, ИнтерфейсДокументовЭДОВызовСервера.ИспользуетсяОтправкаПолучениеСОтборомПоОрганизации());
	ПараметрыОтправкиПолучения.Вставить("ДанныеОтбораНастройкиОтправкиПолучения", ДанныеОтбораНастройкиОтправкиПолучения());
	Если ЗначениеЗаполнено(УчетныеЗаписиОбмена) Тогда
		ПараметрыВыполненияДействий.ОбъектыДействий.ИдентификаторыОрганизаций = УчетныеЗаписиОбмена;
	КонецЕсли;
	ИдентификаторыОрганизаций = ПараметрыВыполненияДействий.ОбъектыДействий.ИдентификаторыОрганизаций;
	ПараметрыОтправкиПолучения.УчетныеЗаписиЭДОБезПринятыхУсловийСервиса = 
		УчетныеЗаписиЭДО.УчетныеЗаписиЭДОБезПринятыхУсловийСервиса(ИдентификаторыОрганизаций);
	
	Возврат ПараметрыОтправкиПолучения;
	
КонецФункции

// Данные отбора настройки отправки получения.
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение - Данные отбора настройки отправки получения:
//  *Ключ - ОпределяемыйТип.Организация
//  *Значение - Массив из Структура:
//		**Наименование - Строка - представление ИД ЭДО
//		**ИдентификаторЭДО - Строка - ИД ЭДО
//		**Сертификаты - Массив из Структура:
//			***Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//			***Отпечаток - Строка - Отпечаток сертификата
//
Функция ДанныеОтбораНастройкиОтправкиПолучения() Экспорт
	Запросы = Новый Массив;
	ЗапросСертификатовУчетныхЗаписей = УчетныеЗаписиЭДО.ЗапросСертификатовУчетныхЗаписей("СертификатыУчетныхЗаписей");
	Запросы.Добавить(ЗапросСертификатовУчетныхЗаписей);
	ЗапросУчетныхЗаписей = УчетныеЗаписиЭДО.ЗапросУчетныхЗаписей("УчетныеЗаписи");
	Запросы.Добавить(ЗапросУчетныхЗаписей);
	ЗапросСертификатов = КриптографияБЭД.ЗапросДействующихСертификатов("Сертификаты");
	Запросы.Добавить(ЗапросСертификатов);
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УчетныеЗаписи.Организация КАК Организация,
	|	СертификатыУчетныхЗаписей.ИдентификаторЭДО КАК ИдентификаторЭДО,
	|	СертификатыУчетныхЗаписей.Сертификат КАК Сертификат,
	|	Сертификаты.Отпечаток КАК Отпечаток
	|ИЗ
	|	УчетныеЗаписи КАК УчетныеЗаписи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СертификатыУчетныхЗаписей КАК СертификатыУчетныхЗаписей
	|		ПО СертификатыУчетныхЗаписей.ИдентификаторЭДО = УчетныеЗаписи.ИдентификаторЭДО
	|		И НЕ УчетныеЗаписи.Организация ЕСТЬ NULL
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Сертификаты КАК Сертификаты
	|		ПО СертификатыУчетныхЗаписей.Сертификат = Сертификаты.Ссылка
	|ИТОГИ ПО
	|	Организация,
	|	ИдентификаторЭДО";
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);

	Результат = ИтоговыйЗапрос.Выполнить();
	ДеревоНастроек = Новый Соответствие;
	ВыборкаПоОрганизации = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Организация");
	Пока ВыборкаПоОрганизации.Следующий() Цикл
		
		ВыборкаПоУчетнымЗаписям = ВыборкаПоОрганизации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ИдентификаторЭДО");
		МассивУчетныхЗаписей = Новый Массив;
		Пока ВыборкаПоУчетнымЗаписям.Следующий() Цикл
			НастройкаИдентификаторЭДО = Новый Структура;
			НастройкаИдентификаторЭДО.Вставить("Наименование", СтрШаблон(НСтр("ru = 'ИД ЭДО: %1'"),
				ВыборкаПоУчетнымЗаписям.ИдентификаторЭДО));
			НастройкаИдентификаторЭДО.Вставить("ИдентификаторЭДО", ВыборкаПоУчетнымЗаписям.ИдентификаторЭДО);
			ВыборкаСертификаты = ВыборкаПоУчетнымЗаписям.Выбрать();
			МассивДоступныхСертификатов = Новый Массив;
			Пока ВыборкаСертификаты.Следующий() Цикл
				СтрокаСертификата = Новый Структура;
				СтрокаСертификата.Вставить("Сертификат", ВыборкаСертификаты.Сертификат);
				СтрокаСертификата.Вставить("Отпечаток", ВыборкаСертификаты.Отпечаток);
				МассивДоступныхСертификатов.Добавить(СтрокаСертификата);
			КонецЦикла;
			НастройкаИдентификаторЭДО.Вставить("Сертификаты", МассивДоступныхСертификатов);
			МассивУчетныхЗаписей.Добавить(НастройкаИдентификаторЭДО);
		КонецЦикла;
		Если МассивУчетныхЗаписей.Количество() > 0 И МассивДоступныхСертификатов.Количество() > 0 Тогда
			ДеревоНастроек.Вставить(ВыборкаПоОрганизации.Организация, МассивУчетныхЗаписей);
		КонецЕсли;
	КонецЦикла;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС") Тогда
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЕИС");
		МодульПодсистемы.ПриФормированииДанныхОтбораНастройкиОтправкиПолучения(ДеревоНастроек);
	КонецЕсли;
	Возврат ДеревоНастроек;
КонецФункции

#КонецОбласти

#Область НастройкаИнтерфейса

// Возвращает пользовательскую настройку выбранного варианта интерфейса.
// 
// Возвращаемое значение:
//  Булево
Функция ВыбранЛегкийВариантИнтерфейса() Экспорт
	
	КлючОбъектаНастроек = ИнтерфейсДокументовЭДОКлиентСервер.КлючОбъектаНастроекИнтерфейсаЭДО();
	КлючНастройки = "ИспользуетсяЛегкийВариантИнтерфейса";
	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(КлючОбъектаНастроек, КлючНастройки, Ложь);
	
КонецФункции

// Возвращает признак необходимости вывода окна выбора варианта интерфейса пользователю.
// 
// Возвращаемое значение:
//  Булево
Функция ТребуетсяПоказатьОкноВыбораВариантаИнтерфейса() Экспорт

	КлючОбъектаНастроек = ИнтерфейсДокументовЭДОКлиентСервер.КлючОбъектаНастроекИнтерфейсаЭДО();
	КлючНастройки = "ОзнакомленСВозможностьюВыбратьВариантИнтерфейса";
	Возврат Не ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(КлючОбъектаНастроек, КлючНастройки, Ложь);

КонецФункции

// Возвращает настройку использования пользователем легкого варианта интерфейса карточек электронных документов.
// 
// Возвращаемое значение:
//  Булево
Функция ИспользуютсяЛегкиеКарточкиЭлектронныхДокументов() Экспорт
	
	КлючОбъектаНастроек = ИнтерфейсДокументовЭДОКлиентСервер.КлючОбъектаНастроекИнтерфейсаЭДО();
	КлючНастройки = "ИспользуютсяЛегкиеКарточкиЭлектронныхДокументов";
	ИспользуютсяЛегкиеКарточки =
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(КлючОбъектаНастроек, КлючНастройки, Ложь);
	ВыбранЛегкийВариантИнтерфейса = ВыбранЛегкийВариантИнтерфейса();
	Возврат ИспользуютсяЛегкиеКарточки И ВыбранЛегкийВариантИнтерфейса;
	
КонецФункции

#КонецОбласти // НастройкаИнтерфейса

#Область ПроверкиЭлектронныхПодписейЭДО

// Записывает значения проверок электронных подписей по электронному документу из сообщения ЭДО присоединенного файла.
//
// Параметры:
//  ПодписанныйОбъект - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//
Процедура ЗаписатьПроверкуЭлектронныхПодписейЭДО(ПодписанныйОбъект) Экспорт
	
	Если ТипЗнч(ПодписанныйОбъект) <> Тип("СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы") Тогда
		Возврат;
	КонецЕсли;
	
	СообщениеЭДО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПодписанныйОбъект, "ВладелецФайла");
	Если ЭлектронныеДокументыЭДО.ЭтоСлужебныйСообщение(СообщениеЭДО) Тогда
		Возврат;
	КонецЕсли;
	
	ЭлектронныйДокумент = ЭлектронныеДокументыЭДО.ЭлектронныйДокументСообщенияЭДО(СообщениеЭДО);
	
	ЗначенияПроверок = ЗначенияПроверокЭлектронныхПодписейПоЭлектронномуДокументу(ЭлектронныйДокумент);
	РегистрыСведений.ПроверкиЭлектронныхПодписейЭДО.ЗаписатьПроверки(ЭлектронныйДокумент, ЗначенияПроверок);
	
КонецПроцедуры

// Рассчитывает значения проверок электронных подписей по электронному документу.
// Учитываем только подписи сообщений ЭДО с типами элемента регламента ИнформацияОтправителя и ИнформацияПолучателя.
// Если нет проверок, то возвращаются пустые значения.
//
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,
//                        ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//
// Возвращаемое значение:
//  Структура - Значения проверок электронной подписи по электронному документу:
//   * ДатаПроверкиПодписиПоМЧД - Дата
//   * ЕстьНевалидныеПодписиПоМЧД - Булево
//
Функция ЗначенияПроверокЭлектронныхПодписейПоЭлектронномуДокументу(ЭлектронныйДокумент) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(ЭлектронныеПодписиПоМЧД.ДатаПроверки), ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПроверкиПодписиПоМЧД,
	|	НЕ ЕСТЬNULL(МИНИМУМ(ЭлектронныеПодписиПоМЧД.ПодписьВерна), ИСТИНА) КАК ЕстьНевалидныеПодписиПоМЧД
	|ИЗ
	|	РегистрСведений.ЭлектронныеПодписиПоМЧД КАК ЭлектронныеПодписиПоМЧД
	|ГДЕ
	|	ЭлектронныеПодписиПоМЧД.ПодписанныйОбъект.ВладелецФайла.ЭлектронныйДокумент = &ЭлектронныйДокумент
	|	И ЭлектронныеПодписиПоМЧД.ПодписанныйОбъект.ВладелецФайла.ТипЭлементаРегламента В
	|	(ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя))";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Результат = Новый Структура("ДатаПроверкиПодписиПоМЧД, ЕстьНевалидныеПодписиПоМЧД");
	ЗаполнитьЗначенияСвойств(Результат, Выборка);
	
	Возврат Результат;
	
КонецФункции

// Корректирует даты подписи на часовой пояс клиента.
// 
// Параметры:
//  Подпись - Структура, Неопределено, Произвольный - Подпись:
// * СвойстваПодписи - Структура -:
// ** Подпись - ДвоичныеДанные -
// ** УстановившийПодпись - СправочникСсылка.Пользователи -
// ** ВидПодписи - ПеречислениеСсылка.ВидыЭлектронныхПодписей -
// ** Комментарий - Строка -
// ** ИмяФайлаПодписи - Строка -
// ** ДатаПодписи - Дата -
// ** ДатаПроверкиПодписи - Дата -
// ** ПодписьВерна - Булево -
// ** ПорядковыйНомер - Число -
// ** Сертификат - ХранилищеЗначения -
// ** Отпечаток - Строка -
// ** КомуВыданСертификат - Строка -
// ** Должность - Строка -
// * ЭтоПодписьПоДоверенности - Булево -
// * СвойстваДоверенности 
// * ОтветнаяПодпись 
Процедура СкорректироватьДатыПодписиНаЧасовойПоясКлиента(Подпись) Экспорт
	
	Если Подпись.Свойство("СвойстваПодписи") Тогда
		СвойстваПодписи = Подпись.СвойстваПодписи;
	Иначе
		СвойстваПодписи = Подпись;
	КонецЕсли;		
	
	СмещениеДат = ТекущаяДатаСеанса() - ТекущаяУниверсальнаяДата();
	
	Если СмещениеДат = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если СвойстваПодписи.ВидПодписи = Перечисления.ВидыЭлектронныхПодписей.УсиленнаяКвалифицированная 
		И ЭтоУниверсальнаяДатаПроверкиПодписи(СвойстваПодписи.ДатаПроверкиПодписи, СвойстваПодписи.ДатаПодписи) Тогда
		
		СвойстваПодписи.ДатаПроверкиПодписи = СвойстваПодписи.ДатаПроверкиПодписи + СмещениеДат;
		
	ИначеЕсли СвойстваПодписи.ВидПодписи = Перечисления.ВидыЭлектронныхПодписей.Простая Тогда
		
		СвойстваПодписи.ДатаПодписи = СвойстваПодписи.ДатаПодписи + СмещениеДат;
		СвойстваПодписи.ДатаПроверкиПодписи = СвойстваПодписи.ДатаПроверкиПодписи + СмещениеДат;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДействияПоСостояниюДокумента

// Возвращает набор действий по указанному состоянию и свойствам электронного документа.
// 
// Параметры:
// 	СостояниеДокумента - ПеречислениеСсылка.СостоянияДокументовЭДО - Состояние электронного документа.
// 	СвойстваДокумента - ДокументОбъект.ЭлектронныйДокументВходящийЭДО, ДокументОбъект.ЭлектронныйДокументИсходящийЭДО, Структура - Свойства:
// 	* Ссылка - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - Ссылка на электронный документ.
// 	* НаОзнакомлении - Булево - Признак необходимости ознакомиться с электронным документом.
// 	* ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
// 	
// Возвращаемое значение:
// 	См. ДоступныеДействияПоЭДО
Функция ДействияПоСостояниюДокумента(СостояниеДокумента, СвойстваДокумента) Экспорт
	Возврат ДоступныеДействияПоЭДО(СостояниеДокумента, СвойстваДокумента);
КонецФункции

#КонецОбласти

#Область ВидыДокументов

// Возвращает новые параметры поиска вида документа.
// 
// Параметры:
//  ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
// 
// Возвращаемое значение:
//  Структура - Новые параметры поиска вида документа:
//  * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
//  * ПрикладнойТипДокумента - Произвольный
//  * ИдентификаторОбъектаУчета - СправочникСсылка.ИдентификаторыОбъектовМетаданных
//  * ИдентификаторКомандыПечати - Строка
//  * ПредставлениеКомандыПечати - Строка
// 
Функция НовыеПараметрыПоискаВидаДокумента(ТипДокумента) Экспорт
	Параметры = Новый Структура;
	Параметры.Вставить("ТипДокумента", ТипДокумента);
	Параметры.Вставить("ПрикладнойТипДокумента", ИнтеграцияЭДО.ПустойПрикладнойТипЭлектронногоДокумента());
	Параметры.Вставить("ИдентификаторОбъектаУчета", ИнтеграцияБСПБЭД.ПустойИдентификаторОбъектаМетаданных());
	Параметры.Вставить("ИдентификаторКомандыПечати", "");
	Параметры.Вставить("ПредставлениеКомандыПечати", "");
	Возврат Параметры;
КонецФункции

// Ищет вид документа.
// 
// Параметры:
//  ПараметрыПоиска см. НовыеПараметрыПоискаВидаДокумента
// 
// Возвращаемое значение:
//  - Неопределено
//  - СправочникСсылка.ВидыДокументовЭДО
//  
Функция НайтиВидДокумента(ПараметрыПоиска) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВидыДокументовЭДО.Ссылка
		|ИЗ
		|	Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
		|ГДЕ
		|	ВидыДокументовЭДО.ТипДокумента = &ТипДокумента
		|	И ВидыДокументовЭДО.ПрикладнойТипДокумента = &ПрикладнойТипДокумента
		|	И ВидыДокументовЭДО.ИдентификаторКомандыПечати = &ИдентификаторКомандыПечати
		|	И ВидыДокументовЭДО.ИдентификаторОбъектаУчета = &ИдентификаторОбъектаУчета";
	
	Запрос.УстановитьПараметр("ТипДокумента", ПараметрыПоиска.ТипДокумента);
	Запрос.УстановитьПараметр("ПрикладнойТипДокумента", ПараметрыПоиска.ПрикладнойТипДокумента);
	Запрос.УстановитьПараметр("ИдентификаторОбъектаУчета", ПараметрыПоиска.ИдентификаторОбъектаУчета);
	Запрос.УстановитьПараметр("ИдентификаторКомандыПечати", ПараметрыПоиска.ИдентификаторКомандыПечати);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Заполняет наименование вида документа.
// 
// Параметры:
//  ВидДокументаОбъект - СправочникОбъект.ВидыДокументовЭДО
//  ПредставлениеКомандыПечати - Строка
// 
Процедура ЗаполнитьНаименованиеВидаДокумента(ВидДокументаОбъект, ПредставлениеКомандыПечати = "") Экспорт
	
	Если ВидДокументаОбъект.ТипДокумента = Перечисления.ТипыДокументовЭДО.Прикладной Тогда
		ВидДокументаОбъект.Наименование = Строка(ВидДокументаОбъект.ПрикладнойТипДокумента);
	ИначеЕсли ВидДокументаОбъект.ТипДокумента = Перечисления.ТипыДокументовЭДО.Внутренний Тогда
		Если ЗначениеЗаполнено(ПредставлениеКомандыПечати) Тогда
			ВидДокументаОбъект.Наименование = ПредставлениеКомандыПечати;
		Иначе
			ВидДокументаОбъект.Наименование = ПредставлениеКомандыПечатиОбъекта(
				ВидДокументаОбъект.ИдентификаторОбъектаУчета, ВидДокументаОбъект.ИдентификаторКомандыПечати)
		КонецЕсли;
	Иначе
		ВидДокументаОбъект.Наименование = Строка(ВидДокументаОбъект.ТипДокумента);
		ВидДокументаОбъект.КраткоеНаименование = КраткоеНаименованиеТипаДокумента(ВидДокументаОбъект.ТипДокумента);
	КонецЕсли;
	
	Если ПустаяСтрока(ВидДокументаОбъект.КраткоеНаименование) Тогда
		ВидДокументаОбъект.КраткоеНаименование = ВидДокументаОбъект.Наименование;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает вид электронного документа по доступному типу электронного документа.
// 
// Параметры:
//  ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО - Значение элемента структуры СтандартныеТипыДокументов.
// 
// Возвращаемое значение:
//  СправочникСсылка.ВидыДокументовЭДО - Ссылка на вид электронного документа.
Функция ВидДокументаПоТипу(ТипДокумента) Экспорт
	
	Если Не ЗначениеЗаполнено(ТипДокумента) Тогда
		ВызватьИсключение НСтр("ru = 'Не заполнено значение параметра ""Тип документа""'");
	КонецЕсли;
	
	ПараметрыПоиска = НовыеПараметрыПоискаВидаДокумента(ТипДокумента);
	Возврат НайтиСоздатьВидДокумента(ПараметрыПоиска);
	
КонецФункции

// Возвращает виды электронных документов по стандартным типам электронных документов.
// Не подходит для поиска по внутренним и прикладным типам документов.
// 
// Параметры:
//  ТипыДокументов - Массив из ПеречислениеСсылка.ТипыДокументовЭДО - Набор прикладных типов электронных документов.
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//   * Ключ - ПеречислениеСсылка.ТипыДокументовЭДО - Ссылка на тип документа.
//   * Значение - СправочникСсылка.ВидыДокументовЭДО - Ссылка на вид электронного документа.
//                                                     Для внутреннего и прикладного документа возвращается пустая ссылка.
Функция ВидыДокументовПоСтандартнымТипам(ТипыДокументов) Экспорт
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВидыДокументовЭДО.Ссылка,
		|	ВидыДокументовЭДО.ТипДокумента
		|ИЗ
		|	Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
		|ГДЕ
		|	ВидыДокументовЭДО.ТипДокумента В (&ТипыДокументов)
		|	И ВидыДокументовЭДО.ПрикладнойТипДокумента = &ПрикладнойТипДокумента
		|	И ВидыДокументовЭДО.ИдентификаторКомандыПечати = &ИдентификаторКомандыПечати
		|	И ВидыДокументовЭДО.ИдентификаторОбъектаУчета = &ИдентификаторОбъектаУчета";
	
	Запрос.УстановитьПараметр("ТипыДокументов", ТипыДокументов);
	Запрос.УстановитьПараметр("ПрикладнойТипДокумента", ИнтеграцияЭДО.ПустойПрикладнойТипЭлектронногоДокумента());
	Запрос.УстановитьПараметр("ИдентификаторОбъектаУчета", ИнтеграцияБСПБЭД.ПустойИдентификаторОбъектаМетаданных());
	Запрос.УстановитьПараметр("ИдентификаторКомандыПечати", "");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.ТипДокумента, Выборка.Ссылка);
	КонецЦикла;
	
	Если ТипыДокументов.Количество() = Результат.Количество() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого ТипДокумента Из ТипыДокументов Цикл
		Если Не ЗначениеЗаполнено(ТипДокумента)
			ИЛИ Результат[ТипДокумента] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ПараметрыПоиска = НовыеПараметрыПоискаВидаДокумента(ТипДокумента);
		//@skip-check query-in-loop
		ВидДокумента = СоздатьВидДокумента(ПараметрыПоиска);
		Результат.Вставить(ТипДокумента, ВидДокумента);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоВнутреннийТипДокумента(ТипДокумента) Экспорт
	Возврат ТипДокумента = Перечисления.ТипыДокументовЭДО.Внутренний;
КонецФункции

#КонецОбласти

#Область Приглашения

// Возвращает параметры получения связи идентификаторов электронного документооборота.
// 
// Возвращаемое значение:
// 	Структура:
// * Организация - ОпределяемыйТип.Организация
// * Контрагент - ОпределяемыйТип.КонтрагентБЭД, Массив из ОпределяемыйТип.КонтрагентБЭД -
// * ИдентификаторыОрганизации - Массив из Строка -
// * ИдентификаторыКонтрагента - Массив из Строка, ТаблицаЗначений - 
// * ФормироватьСписокВыбора - Булево
// * ПолучатьПочтовыеАдреса - Булево
// * ПриоритетПодключенные - Булево
Функция НовыеПараметрыПолученияСвязиИдентификаторов() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Организация");
	Параметры.Вставить("Контрагент");
	Параметры.Вставить("ИдентификаторыОрганизации", Новый Массив);
	Параметры.Вставить("ИдентификаторыКонтрагента", Новый Массив);
	Параметры.Вставить("ПриоритетПодключенные", Ложь);
	Параметры.Вставить("ПолучатьПочтовыеАдреса", Ложь);
	Параметры.Вставить("ФормироватьСписокВыбора", Истина);
	
	Возврат Параметры;
	
КонецФункции

// Возвращаемое значение:
//  ТаблицаЗначений - Новые параметры связи идентификаторов:
// * Контрагент - ОпределяемыйТип.УчастникЭДО
// * КонтрагентИНН - Строка
// * КонтрагентКПП - Строка
// * ИдентификаторКонтрагента - Строка 
// * ИдентификаторКонтрагентаПредставление - Строка
// * ИдентификаторКонтрагентаОписание - Строка
// * ОператорКонтрагента - Строка
// * ОператорКонтрагентаПредставление - Строка
// * АбонентВХабе1С - Булево
// * ИдентификаторОрганизации - Строка
// * ИдентификаторОрганизацииПредставление - Строка
// * ОператорОрганизации - Строка
// * ИмяФайлаСоглашенияНаРоуминг - Строка
// * РекомендацияПоНастройке - Строка
// * СтатусПриглашенияПредставление - Строка
// * НавигационнаяСсылкаНаПриглашение - Строка
// * АбонентАктивен - Булево
// * СертификатДействителен - Булево
// * СтатусПодключения - Число
// * ОператорыСовпадают - Булево
// * СвязьДоступна - Число
// * ОтправкаТолькоНаИдентификаторЭДО - Булево
// * ТребуетсяСоглашение - Булево
// * ТребуетсяНовоеСоглашение - Булево
// * ЭлектроннаяПочта - Строка
// * СписокВыбора - Неопределено,СписокЗначений из Строка
// * ВариантПотребностиСоглашения - ПеречислениеСсылка.ВариантыПотребностиСоглашенияНаРоуминг
// * Абоненты - Неопределено,СписокЗначений из Строка
// * ТребуетсяСоглашениеПриПервомПодключении - Булево
// * ОбязательнаяОтправкаЗаявкиНаРоуминг - Булево
// * ЗаявкаНаРоумингПринята - Булево
// * ПриглашениеОтправлено - Булево
// * СтатусПриглашенияНаИдентификатор - ПеречислениеСсылка.СтатусыПриглашений
// * СтатусШироковещательногоПриглашения - ПеречислениеСсылка.СтатусыПриглашений
// * СтатусЗаявкиНаРоуминг - ПеречислениеСсылка.СтатусыПриглашений
// * ЭтоОблачныйЭДО - Булево
Функция НовыеПараметрыСвязиИдентификаторов() Экспорт
	ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
	ОписаниеТипаСтрокаНеограниченная = ОбщегоНазначения.ОписаниеТипаСтрока(0);
	ОписаниеТипаСтатусыПриглашений = Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыПриглашений");
	ПараметрыСвязи = Новый ТаблицаЗначений;
	ПараметрыСвязи.Колонки.Добавить("Контрагент", Метаданные.ОпределяемыеТипы.УчастникЭДО.Тип);
	ПараметрыСвязи.Колонки.Добавить("КонтрагентИНН", ОбщегоНазначения.ОписаниеТипаСтрока(12));
	ПараметрыСвязи.Колонки.Добавить("КонтрагентКПП", ОбщегоНазначения.ОписаниеТипаСтрока(9));
	ПараметрыСвязи.Колонки.Добавить("ИдентификаторКонтрагента", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ПараметрыСвязи.Колонки.Добавить("ИдентификаторКонтрагентаПредставление", ОписаниеТипаСтрокаНеограниченная);
	ПараметрыСвязи.Колонки.Добавить("ИдентификаторКонтрагентаОписание", ОписаниеТипаСтрокаНеограниченная);
	ПараметрыСвязи.Колонки.Добавить("ОператорКонтрагента", ОбщегоНазначения.ОписаниеТипаСтрока(3));
	ПараметрыСвязи.Колонки.Добавить("ОператорКонтрагентаПредставление", ОписаниеТипаСтрокаНеограниченная);
	ПараметрыСвязи.Колонки.Добавить("АбонентВХабе1С", ОписаниеТипаБулево);
	ПараметрыСвязи.Колонки.Добавить("ИдентификаторОрганизации", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ПараметрыСвязи.Колонки.Добавить("ИдентификаторОрганизацииПредставление");
	ПараметрыСвязи.Колонки.Добавить("ОператорОрганизации", ОбщегоНазначения.ОписаниеТипаСтрока(3));
	ПараметрыСвязи.Колонки.Добавить("ИмяФайлаСоглашенияНаРоуминг", ОписаниеТипаСтрокаНеограниченная);
	ПараметрыСвязи.Колонки.Добавить("РекомендацияПоНастройке", ОписаниеТипаСтрокаНеограниченная);
	ПараметрыСвязи.Колонки.Добавить("СтатусПриглашения", ОписаниеТипаСтатусыПриглашений);
	ПараметрыСвязи.Колонки.Добавить("СтатусПриглашенияПредставление", ОписаниеТипаСтрокаНеограниченная);
	ПараметрыСвязи.Колонки.Добавить("НавигационнаяСсылкаНаПриглашение", ОписаниеТипаСтрокаНеограниченная);
	ПараметрыСвязи.Колонки.Добавить("АбонентАктивен", ОписаниеТипаБулево);
	ПараметрыСвязи.Колонки.Добавить("СертификатДействителен", ОписаниеТипаБулево);
	ПараметрыСвязи.Колонки.Добавить("СтатусПодключения", ОбщегоНазначения.ОписаниеТипаЧисло(1));
	ПараметрыСвязи.Колонки.Добавить("ОператорыСовпадают", ОписаниеТипаБулево);
	ПараметрыСвязи.Колонки.Добавить("СвязьДоступна", ОбщегоНазначения.ОписаниеТипаЧисло(1));
	ПараметрыСвязи.Колонки.Добавить("ОтправкаТолькоНаИдентификаторЭДО", ОписаниеТипаБулево);
	ПараметрыСвязи.Колонки.Добавить("ТребуетсяСоглашение", ОписаниеТипаБулево);
	ПараметрыСвязи.Колонки.Добавить("ТребуетсяНовоеСоглашение", ОписаниеТипаБулево);
	ПараметрыСвязи.Колонки.Добавить("ЭлектроннаяПочта", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ПараметрыСвязи.Колонки.Добавить("СписокВыбора", Новый ОписаниеТипов("Неопределено"));
	ПараметрыСвязи.Колонки.Добавить("ВариантПотребностиСоглашения", Новый ОписаниеТипов(
		"ПеречислениеСсылка.ВариантыПотребностиСоглашенияНаРоуминг"));
	ПараметрыСвязи.Колонки.Добавить("Абоненты", Новый ОписаниеТипов("Неопределено, СписокЗначений"));
	ПараметрыСвязи.Колонки.Добавить("ТребуетсяСоглашениеПриПервомПодключении", ОписаниеТипаБулево);
	ПараметрыСвязи.Колонки.Добавить("ОбязательнаяОтправкаЗаявкиНаРоуминг", ОписаниеТипаБулево);
	ПараметрыСвязи.Колонки.Добавить("ЗаявкаНаРоумингПринята", ОписаниеТипаБулево);
	ПараметрыСвязи.Колонки.Добавить("ПриглашениеОтправлено", ОписаниеТипаБулево);
	ПараметрыСвязи.Колонки.Добавить("СтатусПриглашенияНаИдентификатор", ОписаниеТипаСтатусыПриглашений);
	ПараметрыСвязи.Колонки.Добавить("СтатусШироковещательногоПриглашения", ОписаниеТипаСтатусыПриглашений);
	ПараметрыСвязи.Колонки.Добавить("СтатусЗаявкиНаРоуминг", ОписаниеТипаСтатусыПриглашений);
	ПараметрыСвязи.Колонки.Добавить("ЭтоОблачныйЭДО", ОписаниеТипаБулево);
	Возврат ПараметрыСвязи;
КонецФункции

// Получает параметры связи идентификаторов электронного документооборота.
// 
// Параметры:
//  ПараметрыПолучения - см. НовыеПараметрыПолученияСвязиИдентификаторов
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  ОбновитьДанныеАбонентов - Булево - предварительно обновить данные абонентов из сервиса настроек
// 
// Возвращаемое значение:
//  - Неопределено
//  - См. НовыеПараметрыСвязиИдентификаторов
Функция ПараметрыСвязиИдентификаторов(ПараметрыПолучения, КонтекстДиагностики = Неопределено, ОбновитьДанныеАбонентов = Ложь) Экспорт	
	
	ПараметрыСвязиИдентификаторов = Неопределено;
	
	Если Не ЗначениеЗаполнено(ПараметрыПолучения.ИдентификаторыОрганизации) Тогда
		Возврат ПараметрыСвязиИдентификаторов;
	КонецЕсли;
	
	ИдентификаторыПоИнтеграциямЭДО = УчетныеЗаписиЭДО.ИдентификаторыПоИнтеграциямЭДО(
		ПараметрыПолучения.ИдентификаторыОрганизации);
	
	ПараметрыСвязиИдентификаторовОблачногоЭДО = Неопределено;
	ПараметрыСвязиИдентификаторовВстроенногоЭДО = Неопределено;
	
	Если ИспользоватьИнтеграциюОблачногоЭДО()
		И ЗначениеЗаполнено(ИдентификаторыПоИнтеграциямЭДО.ИдентификаторыДляОблачногоЭДО) Тогда
		ПараметрыПолученияДляОблачногоЭДО = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыПолучения);
		ПараметрыПолученияДляОблачногоЭДО.ИдентификаторыОрганизации =
			ИдентификаторыПоИнтеграциямЭДО.ИдентификаторыДляОблачногоЭДО;
		ОбщийМодульИнтеграцияОблачногоЭДО = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияОблачногоЭДО");
		ПараметрыСвязиИдентификаторовОблачногоЭДО = ОбщийМодульИнтеграцияОблачногоЭДО.ПараметрыСвязиИдентификаторов(
			ПараметрыПолученияДляОблачногоЭДО, КонтекстДиагностики);
	КонецЕсли;
	
	Если ИспользоватьИнтеграциюВстроенногоЭДО()
		И ЗначениеЗаполнено(ИдентификаторыПоИнтеграциямЭДО.ИдентификаторыДляВстроенногоЭДО) Тогда
		ПараметрыПолученияДляВстроенногоЭДО = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыПолучения);
		ПараметрыПолученияДляВстроенногоЭДО.ИдентификаторыОрганизации =
			ИдентификаторыПоИнтеграциямЭДО.ИдентификаторыДляВстроенногоЭДО;
		ОбщийМодульРаботаСАбонентамиЭДО = ОбщегоНазначения.ОбщийМодуль("РаботаСАбонентамиЭДО");
		ПараметрыСвязиИдентификаторовВстроенногоЭДО = ОбщийМодульРаботаСАбонентамиЭДО.ПараметрыСвязиИдентификаторов(
			ПараметрыПолученияДляВстроенногоЭДО, КонтекстДиагностики, ОбновитьДанныеАбонентов);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыСвязиИдентификаторовОблачногоЭДО) Тогда
		ПараметрыСвязиИдентификаторов = ПараметрыСвязиИдентификаторовОблачногоЭДО;
	ИначеЕсли ЗначениеЗаполнено(ПараметрыСвязиИдентификаторовВстроенногоЭДО) Тогда
		ПараметрыСвязиИдентификаторов = ПараметрыСвязиИдентификаторовВстроенногоЭДО;
		Возврат ПараметрыСвязиИдентификаторов;
	Иначе
		Возврат ПараметрыСвязиИдентификаторов;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыСвязиИдентификаторовВстроенногоЭДО) Тогда
		Возврат ПараметрыСвязиИдентификаторов;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(
		ПараметрыСвязиИдентификаторовВстроенногоЭДО,
		ПараметрыСвязиИдентификаторов);
	
	Возврат ПараметрыСвязиИдентификаторов;
	
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Организация - Неопределено,ОпределяемыйТип.Организация
//  * ОбновитьКэшНастроек - Булево
//  * ЗаполнитьОператоровЭДО - Булево
//  * ПараметрыПолученияСвязиИдентификаторов - см. НовыеПараметрыПолученияСвязиИдентификаторов
Функция НовыеПараметрыДанныхЗаполненияНастройкиОтправкиПриглашений() Экспорт
	Параметры = Новый Структура;
	Параметры.Вставить("Организация", Неопределено);
	Параметры.Вставить("ОбновитьКэшНастроек", Ложь);
	Параметры.Вставить("ЗаполнитьОператоровЭДО", Ложь);
	Параметры.Вставить("ПараметрыПолученияСвязиИдентификаторов", Новый Структура);
	Возврат Параметры;
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  * ОператорыЭДО - Неопределено -
//                 - см. СервисНастроекЭДО.СписокОператоровЭДО
//  * ПараметрыСвязиИдентификаторовЭДО - Неопределено -
//                                     - см. ПараметрыСвязиИдентификаторов
Функция НовыеДанныеЗаполненияНастройкиОтправкиПриглашений() Экспорт
	Данные = Новый Структура;
	Данные.Вставить("КонтекстДиагностики", ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики());
	Данные.Вставить("ОператорыЭДО", Неопределено);
	Данные.Вставить("ПараметрыСвязиИдентификаторовЭДО", Неопределено);
	Возврат Данные;
КонецФункции

// Параметры:
//  ПараметрыЗаполнения - См. НовыеПараметрыДанныхЗаполненияНастройкиОтправкиПриглашений
// 
// Возвращаемое значение:
//  - Неопределено
//  - См. НовыеДанныеЗаполненияНастройкиОтправкиПриглашений
Функция ДанныеЗаполненияНастройкиОтправкиПриглашений(ПараметрыЗаполнения) Экспорт
	
	ДанныеЗаполненияНастройки = НовыеДанныеЗаполненияНастройкиОтправкиПриглашений();
	
	ИдентификаторыПоИнтеграциямЭДО = Неопределено;
	Если ЗначениеЗаполнено(ПараметрыЗаполнения.ПараметрыПолученияСвязиИдентификаторов) Тогда
		ИдентификаторыОрганизации = ПараметрыЗаполнения.ПараметрыПолученияСвязиИдентификаторов.ИдентификаторыОрганизации;
		ИдентификаторыПоИнтеграциямЭДО = УчетныеЗаписиЭДО.ИдентификаторыПоИнтеграциямЭДО(ИдентификаторыОрганизации);
	КонецЕсли;
	
	ДанныеЗаполненияНастройкиОблачногоЭДО = Неопределено;
	ДанныеЗаполненияНастройкиВстроенногоЭДО = Неопределено;
	
	Если ИспользоватьИнтеграциюОблачногоЭДО() Тогда
		ПараметрыЗаполненияДляОблачногоЭДО = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыЗаполнения);
		Если ИдентификаторыПоИнтеграциямЭДО <> Неопределено Тогда
			ПараметрыЗаполненияДляОблачногоЭДО.ПараметрыПолученияСвязиИдентификаторов.ИдентификаторыОрганизации =
				ИдентификаторыПоИнтеграциямЭДО.ИдентификаторыДляОблачногоЭДО;
		КонецЕсли;
		ОбщийМодульИнтеграцияОблачногоЭДО = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияОблачногоЭДО");
		ДанныеЗаполненияНастройкиОблачногоЭДО = ОбщийМодульИнтеграцияОблачногоЭДО.ДанныеЗаполненияНастройкиОтправкиПриглашений(
			ПараметрыЗаполненияДляОблачногоЭДО);
	КонецЕсли;
	
	Если ИспользоватьИнтеграциюВстроенногоЭДО() Тогда
		ПараметрыЗаполненияДляВстроенногоЭДО = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыЗаполнения);
		Если ИдентификаторыПоИнтеграциямЭДО <> Неопределено Тогда
			ПараметрыЗаполненияДляВстроенногоЭДО.ПараметрыПолученияСвязиИдентификаторов.ИдентификаторыОрганизации =
				ИдентификаторыПоИнтеграциямЭДО.ИдентификаторыДляВстроенногоЭДО;
		КонецЕсли;
		ОбщийМодульПриглашенияЭДО = ОбщегоНазначения.ОбщийМодуль("ПриглашенияЭДО");
		ДанныеЗаполненияНастройкиВстроенногоЭДО = ОбщийМодульПриглашенияЭДО.ДанныеЗаполненияНастройкиОтправкиПриглашений(
			ПараметрыЗаполненияДляВстроенногоЭДО);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеЗаполненияНастройкиОблачногоЭДО) Тогда
		ДанныеЗаполненияНастройки = ДанныеЗаполненияНастройкиОблачногоЭДО;
	ИначеЕсли ЗначениеЗаполнено(ДанныеЗаполненияНастройкиВстроенногоЭДО) Тогда
		ДанныеЗаполненияНастройки = ДанныеЗаполненияНастройкиВстроенногоЭДО;
		Возврат ДанныеЗаполненияНастройки;
	Иначе
		Возврат ДанныеЗаполненияНастройки;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполненияНастройкиВстроенногоЭДО) Тогда
		Возврат ДанныеЗаполненияНастройки;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(
		ДанныеЗаполненияНастройкиВстроенногоЭДО.ПараметрыСвязиИдентификаторовЭДО,
		ДанныеЗаполненияНастройки.ПараметрыСвязиИдентификаторовЭДО);
	
	Возврат ДанныеЗаполненияНастройки;
	
КонецФункции

// Возвращаемое значение:
//  См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Функция ОбновитьДанныеДляНастройкиОтправкиПриглашений() Экспорт
	
	КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	
	Если ИспользоватьИнтеграциюОблачногоЭДО() Тогда
		ОбщийМодульИнтеграцияОблачногоЭДО = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияОблачногоЭДО");
		КонтекстДиагностики = ОбщийМодульИнтеграцияОблачногоЭДО.ОбновитьУчетныеЗаписиЭДО();
	КонецЕсли;
	
	Если ИспользоватьИнтеграциюВстроенногоЭДО() Тогда
		ОбщийМодульСинхронизацияЭДО = ОбщегоНазначения.ОбщийМодуль("СинхронизацияЭДО");
		ОбщийМодульСинхронизацияЭДО.ОбновитьКешиОператоровЭДОИФорматов(КонтекстДиагностики);
	КонецЕсли;
	
	Возврат КонтекстДиагностики;
	
КонецФункции

#КонецОбласти

#Область РаботаСОтборами

// Возвращает отборы списка.
// 
// Параметры:
//  Список - ДинамическийСписок
// 
// Возвращаемое значение:
//  ОтборКомпоновкиДанных
Функция ПользовательскийОтборСписка(Список) Экспорт

	ИдентификаторНастройки = Список.КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки;
	ПользовательскийОтбор = Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ИдентификаторНастройки);

	Если ПользовательскийОтбор = Неопределено Тогда
		ПользовательскийОтбор = Новый ОтборКомпоновкиДанных();
	КонецЕсли;

	Возврат ПользовательскийОтбор;

КонецФункции

// Возвращает массив элементов отбора.
// 
// Параметры:
//  Отбор - ГруппаЭлементовОтбораКомпоновкиДанных,Неопределено
// 
// Возвращаемое значение:
//  Массив Из ЭлементОтбораКомпоновкиДанных
Функция ЭлементыОтбора(Отбор) Экспорт

	НайденныеЭлементы = Новый Массив;

	Если Отбор = Неопределено Тогда
		Возврат НайденныеЭлементы;
	КонецЕсли;

	Для Каждого Элемент Из Отбор.Элементы Цикл

		Если ТипЗнч(Элемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда

			НайденныеЭлементыГруппы = ЭлементыОтбора(Элемент);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НайденныеЭлементы, НайденныеЭлементыГруппы);

		Иначе

			НайденныеЭлементы.Добавить(Элемент);

		КонецЕсли;

	КонецЦикла;

	Возврат НайденныеЭлементы;

КонецФункции

#КонецОбласти

#Область ПакетыДокуметовЭДО

// Параметры:
//  ИдентификаторПакета - см. РегистрСведений.ПакетыДокументовЭДО.ИдентификаторПакета
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Процедура УдалитьДокументИзПакета(ИдентификаторПакета, ЭлектронныйДокумент, КонтекстДиагностики = Неопределено) Экспорт
	
	ЭтоОблачныйЭДО = ЭлектронныеДокументыЭДО.ЭтоДокументОблачногоЭДО(ЭлектронныйДокумент);
	
	Если ЭтоОблачныйЭДО Тогда
		ОбщийМодульИнтеграцияОблачногоЭДО = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияОблачногоЭДО");
		ОбщийМодульИнтеграцияОблачногоЭДО.УдалитьДокументИзПакета(ЭлектронныйДокумент);
	Иначе
		ПакетыДокументовЭДО.УдалитьДокументИзПакета(ИдентификаторПакета, ЭлектронныйДокумент, КонтекстДиагностики);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Подготавливает необходимые данные для формирования пакета ЭД.
//
// Параметры:
//  Параметры - Структура - параметры для заполнения документа;
//  
//  Возвращаемое значение:
//  Структура
//  *ТаблицаЭД - ТаблицаЗначений
//  *ТекстОшибки - Строка
//
Функция ПодготовитьДанныеДляЗаполненияДокументов(Параметры) Экспорт
	
	ТаблицаЭД = Новый ТаблицаЗначений;
	ТаблицаЭД.Колонки.Добавить("ПолноеИмяФайла");
	ТаблицаЭД.Колонки.Добавить("ИмяФайла");
	ТаблицаЭД.Колонки.Добавить("НаправлениеЭД");
	ТаблицаЭД.Колонки.Добавить("Контрагент");
	ТаблицаЭД.Колонки.Добавить("ДвоичныеДанныеПакета");
	ТаблицаЭД.Колонки.Добавить("ДвоичныеДанныеФайла");
	
	ОписанияОбъектовУчета = ИнтеграцияЭДО.ОписанияОбъектовУчета(Параметры.МассивСсылокНаОбъект);

	РезультатФормирования = ЭлектронныеДокументыЭДО.СформироватьДанныеДокументовДляВыгрузки(ОписанияОбъектовУчета);
	ДанныеДокументов = РезультатФормирования.ДанныеДокументов;
	ТекстОшибки = РезультатФормирования.ТекстОшибки;
	
	Для Каждого ДанныеДокумента Из ДанныеДокументов Цикл
		НоваяСтрока = ТаблицаЭД.Добавить();
		НоваяСтрока.НаправлениеЭД = Перечисления.НаправленияЭДО.Исходящий;
		НоваяСтрока.ДвоичныеДанныеФайла = ДанныеДокумента.ОписаниеДанных.ДвоичныеДанные;
		НоваяСтрока.Контрагент = ДанныеДокумента.Контрагент;
		
		ДанныеПакета = СинхронизацияЭДО.ДвоичныеДанныеТранспортногоКонтейнера(ДанныеДокумента);
		
		НоваяСтрока.ДвоичныеДанныеПакета = ДанныеПакета;
		НоваяСтрока.ПолноеИмяФайла = ДанныеДокумента.ОписаниеДанных.ИмяФайла;
		НоваяСтрока.ИмяФайла = ДанныеДокумента.ОписаниеДанных.ИмяФайла;			
	КонецЦикла;
	
	РезультатФормирования = Новый Структура("ТаблицаЭД, ТекстОшибки", ТаблицаЭД, ТекстОшибки);
	Возврат РезультатФормирования;
		
КонецФункции

// Возвращает структуру с длительной операцией получения проштампованного файла pdf и с признаком необходимости
//  исользования просмотра pdf.
// 
// Параметры:
//  СообщениеЭДО - ДокументСсылка.СообщениеЭДО
//  УникальныйИдентификатор - УникальныйИдентификатор
//  ПроверятьДоступностьВыводаПДФ_А3 - Булево - Проверять версию платформы для работы с просмотром файлов формата
//                                     PDF/A3. Требуется для того, чтобы не получать ошибку обновления динамического
//                                     списка. Истина, если проверка требуется.
// 
// Возвращаемое значение:
//  Структура - Структура результатов обработки:
//  * ИспользоватьПросмотрПроштампованногоФайла - Булево - нужно ли использовать просмотр
//  * ДлительнаяОперация - Неопределено - Если операция не была запущена.
//                       - см. ДлительныеОперации.ВыполнитьФункцию
//
Функция ПроштампованныйФайлPDF(СообщениеЭДО, УникальныйИдентификатор, ПроверятьДоступностьВыводаПДФ_А3 = Истина) Экспорт
	
	ИспользоватьПросмотрPDF = ИспользоватьПросмотрPDF(СообщениеЭДО, ПроверятьДоступностьВыводаПДФ_А3);
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ИспользоватьПросмотрПроштампованногоФайла", ИспользоватьПросмотрPDF);
	СтруктураВозврата.Вставить("ДлительнаяОперация", Неопределено);
	
	Если Не СтруктураВозврата.ИспользоватьПросмотрПроштампованногоФайла Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	СтруктураВозврата.ДлительнаяОперация = ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
		"Документы.СообщениеЭДО.ПроштампованныйФайл", СообщениеЭДО, ПроверятьДоступностьВыводаПДФ_А3);
	
	Возврат СтруктураВозврата;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПросмотрЭлектронногоДокумента

// Возвращает параметры просмотра электронного документа по объекту учета.
// 
// Параметры:
//  ОбъектУчета - см. ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  ПараметрыОткрытия - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыОткрытияЭлектронногоДокумента
// 
// Возвращаемое значение:
//  См. НовыеПараметрыПросмотраЭлектронногоДокумента
//
Функция ПараметрыПросмотраЭлектронногоДокументаПоОбъектуУчета(ОбъектУчета, ПараметрыОткрытия) Экспорт
	
	Если ИспользоватьИнтеграциюОблачногоЭДО()
		Или ИспользуютсяЛегкиеКарточкиЭлектронныхДокументов() Тогда
		ПараметрыПросмотра = ЛегкийИнтерфейсДокументовЭДО.ПараметрыПросмотраЭлектронногоДокументаПоОбъектуУчета(
			ОбъектУчета, ПараметрыОткрытия);
		Если ПараметрыПросмотра <> Неопределено Тогда
			Возврат ПараметрыПросмотра;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыПросмотра = НовыеПараметрыПросмотраЭлектронногоДокумента();
	ПараметрыПросмотра.ОбъектУчета = ОбъектУчета;
	
	Если ОбщегоНазначения.ЭтоСправочник(ОбъектУчета.Метаданные()) И ОбъектУчета.ЭтоГруппа Тогда
		ПараметрыПросмотра.ОбъектУчетаЯвляетсяГруппой = Истина;
	КонецЕсли;
	
	ОписаниеОбъектаУчета = ИнтеграцияЭДО.ОписаниеОбъектаУчета(ОбъектУчета);
	
	СтатусыЭлектронныхДокументов = СтатусыЭлектронныхДокументовОбъектаУчета(ОписаниеОбъектаУчета, Истина);
	
	ЗаполнитьПараметрыПросмотраПоСтатусамЭлектронныхДокументов(ПараметрыПросмотра,
		СтатусыЭлектронныхДокументов, ОписаниеОбъектаУчета, ПараметрыОткрытия);
	
	Возврат ПараметрыПросмотра;
	
КонецФункции

// Возвращает параметры просмотра электронного документа по описанию электронного документа объекта учета.
// 
// Параметры:
// 	ОписаниеЭлектронногоДокументаОбъектаУчета - СтрокаТаблицыЗначений из см. ИнтеграцияЭДО.НовоеОписаниеОбъектаУчета
// 	ПараметрыОткрытия - см. ПараметрыПросмотраЭлектронногоДокументаПоОбъектуУчета.ПараметрыОткрытия
// 
// Возвращаемое значение:
// 	см. НовыеПараметрыПросмотраЭлектронногоДокумента
//
Функция ПараметрыПросмотраЭлектронногоДокументаПоОписанию(ОписаниеЭлектронногоДокументаОбъектаУчета, ПараметрыОткрытия = Неопределено) Экспорт
	
	ПараметрыПросмотра = НовыеПараметрыПросмотраЭлектронногоДокумента();
	ПараметрыПросмотра.ОбъектУчета = ОписаниеЭлектронногоДокументаОбъектаУчета.ОбъектУчета;
	
	ОписанияЭлектронныхДокументовОбъектаУчета = ИнтеграцияЭДО.НовоеОписаниеОбъектаУчета();
	
	Если ОписаниеЭлектронногоДокументаОбъектаУчета.Свойство("ВидДокумента") Тогда
		ОписанияЭлектронныхДокументовОбъектаУчета.Колонки.Добавить("ВидДокумента",
			Новый ОписаниеТипов("СправочникСсылка.ВидыДокументовЭДО"));
		Если ПараметрыОткрытия = Неопределено Тогда
			ПараметрыОткрытия = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыОткрытияЭлектронногоДокумента();
		КонецЕсли;
		ПараметрыОткрытия.ВидДокумента = ОписаниеЭлектронногоДокументаОбъектаУчета.ВидДокумента;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ОписанияЭлектронныхДокументовОбъектаУчета.Добавить(),
		ОписаниеЭлектронногоДокументаОбъектаУчета);
	
	СтатусыЭлектронныхДокументов = СтатусыЭлектронныхДокументовОбъектаУчета(
		ОписанияЭлектронныхДокументовОбъектаУчета, Ложь);
	
	ЗаполнитьПараметрыПросмотраПоСтатусамЭлектронныхДокументов(ПараметрыПросмотра,
		СтатусыЭлектронныхДокументов, ОписанияЭлектронныхДокументовОбъектаУчета, ПараметрыОткрытия);
	
	Возврат ПараметрыПросмотра;
	
КонецФункции

// Заполняет параметры просмотра по статусам электронных документов.
// 
// Параметры:
//  ПараметрыПросмотра - см. НовыеПараметрыПросмотраЭлектронногоДокумента
//  СтатусыЭлектронныхДокументов - см. СтатусыЭлектронныхДокументовОбъектаУчета
//  ОписаниеОбъектаУчета - см. ИнтеграцияЭДО.ОписаниеОбъектаУчета
//  ПараметрыОткрытия - см. ПараметрыПросмотраЭлектронногоДокументаПоОбъектуУчета.ПараметрыОткрытия
Процедура ЗаполнитьПараметрыПросмотраПоСтатусамЭлектронныхДокументов(ПараметрыПросмотра, СтатусыЭлектронныхДокументов, ОписаниеОбъектаУчета, ПараметрыОткрытия)
	
	Количество = СтатусыЭлектронныхДокументов.Количество();
	
	Если Количество > 1 Тогда
		
		ПараметрыПросмотра.ПросмотрСтатусовЭлектронныхДокументов = ПараметрыПросмотраСтатусовЭлектронныхДокументов(
			СтатусыЭлектронныхДокументов);
		
	ИначеЕсли Количество > 0 И ЗначениеЗаполнено(СтатусыЭлектронныхДокументов[0].ЭлектронныйДокумент) Тогда
		
		ПараметрыПросмотра.ЭлектронныйДокумент = СтатусыЭлектронныхДокументов[0].ЭлектронныйДокумент;
		
	Иначе
		
		СтатусЭлектронныхДокументов = ?(ЗначениеЗаполнено(СтатусыЭлектронныхДокументов), 
			СтатусыЭлектронныхДокументов[0], 
			Неопределено); 
		ОписаниеЭлектронногоДокумента = НайтиОписаниеПоСтатусуЭлектронногоДокумента(
			ОписаниеОбъектаУчета, СтатусЭлектронныхДокументов);
		
		Если ЗначениеЗаполнено(ОписаниеЭлектронногоДокумента) Тогда
			ПараметрыПросмотра.ПредварительныйПросмотр = ПараметрыПредварительногоПросмотраЭлектронногоДокумента(
				ОписаниеЭлектронногоДокумента, ПараметрыОткрытия);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиОписаниеПоСтатусуЭлектронногоДокумента(ОписанияЭлектронныхДокументовОбъектаУчета, СтатусЭлектронногоДокумента)
	
	Результат = Неопределено;
	
	Если ОписанияЭлектронныхДокументовОбъектаУчета.Количество() = 1 Тогда
		Результат = ОписанияЭлектронныхДокументовОбъектаУчета[0];
		Возврат Результат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(СтатусЭлектронногоДокумента)
		Или СтатусЭлектронногоДокумента.ОжидаемоеДействие <> Перечисления.ДействияПоЭДО.Сформировать
		Или Не ЗначениеЗаполнено(СтатусЭлектронногоДокумента.ВидДокумента) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Отбор = Новый Структура("ОбъектУчета, Организация, Контрагент, Договор");
	ЗаполнитьЗначенияСвойств(Отбор, СтатусЭлектронногоДокумента);
	Отбор.Договор = СтатусЭлектронногоДокумента.ДоговорКонтрагента;
	
	ЗначенияРеквизитовВидаДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		СтатусЭлектронногоДокумента.ВидДокумента, "ТипДокумента, ПрикладнойТипДокумента");
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Отбор, ЗначенияРеквизитовВидаДокумента);
	
	ОписанияЭлектронныхДокументовПоОтбору = ОписанияЭлектронныхДокументовОбъектаУчета.НайтиСтроки(Отбор);
	Для Каждого ОписаниеЭлектронногоДокумента Из ОписанияЭлектронныхДокументовПоОтбору Цикл
		Если ОписаниеЭлектронногоДокумента.Направление <> Перечисления.НаправленияЭДО.Входящий Тогда
			Результат = ОписаниеЭлектронногоДокумента;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры предварительного просмотра электронного документа.
// 
// Параметры:
//  ОписаниеЭлектронногоДокументаОбъектаУчета - СтрокаТаблицыЗначений из см. ИнтеграцияЭДО.ОписаниеОбъектаУчета
//  ПараметрыОткрытия - см. ПараметрыПросмотраЭлектронногоДокументаПоОбъектуУчета.ПараметрыОткрытия
// 
// Возвращаемое значение:
//  См. НовыеПараметрыПредварительногоПросмотраЭлектронногоДокумента
Функция ПараметрыПредварительногоПросмотраЭлектронногоДокумента(ОписаниеЭлектронногоДокументаОбъектаУчета,
	ПараметрыОткрытия) Экспорт
	
	ПредварительныйПросмотр = НовыеПараметрыПредварительногоПросмотраЭлектронногоДокумента();
	
	Если Не ЗначениеЗаполнено(ОписаниеЭлектронногоДокументаОбъектаУчета) Тогда
		Возврат ПредварительныйПросмотр;
	КонецЕсли;
	
	ПредварительныйПросмотр.РезультатПроверкиГотовности = ПроверитьГотовностьОбъектаУчетаКДокументообороту(
		ОписаниеЭлектронногоДокументаОбъектаУчета.ОбъектУчета);
	Если Не ПредварительныйПросмотр.РезультатПроверкиГотовности.Успех Тогда
		Возврат ПредварительныйПросмотр;
	КонецЕсли;
	
	ПредварительныйПросмотр.РезультатПодготовкиВложения = ВложениеПроизвольногоДокумента(
		ОписаниеЭлектронногоДокументаОбъектаУчета);
	Если ПредварительныйПросмотр.РезультатПодготовкиВложения.Успех
		ИЛИ ПредварительныйПросмотр.РезультатПодготовкиВложения.Ошибка Тогда
		Возврат ПредварительныйПросмотр;
	КонецЕсли;
	
	ПредварительныйПросмотр.РезультатПоискаНастроек = НастройкиФормированияЭлектронногоДокументаОбъектаУчета(
		ОписаниеЭлектронногоДокументаОбъектаУчета, ПараметрыОткрытия.ВидДокумента);
	Если Не ПредварительныйПросмотр.РезультатПоискаНастроек.Успех Тогда
		Возврат ПредварительныйПросмотр;
	КонецЕсли;
	
	ПредварительныйПросмотр.РезультатПодготовкиДанных = ПодготовитьДанныеПредварительногоПросмотра(
		ОписаниеЭлектронногоДокументаОбъектаУчета, ПредварительныйПросмотр.РезультатПоискаНастроек.Настройки,
		ПараметрыОткрытия);
	
	Возврат ПредварительныйПросмотр;
	
КонецФункции

// Возвращаемое значение:
//  Структура:
// * РезультатПроверкиГотовности - Неопределено - если проверка не выполнялась.
//                               - См. ПроверитьГотовностьОбъектаУчетаКДокументообороту
// * РезультатПодготовкиВложения - Неопределено - если подготовка не выполнялась.
//                               - См. ВложениеПроизвольногоДокумента
// * РезультатПоискаНастроек     - Неопределено - если поиск не выполнялся.
//                               - См. НастройкиФормированияЭлектронногоДокументаОбъектаУчета
// * РезультатПодготовкиДанных   - Неопределено - если подготовка не выполнялась.
//                               - См. ПодготовитьДанныеПредварительногоПросмотра
Функция НовыеПараметрыПредварительногоПросмотраЭлектронногоДокумента()
	Параметры = Новый Структура;
	Параметры.Вставить("РезультатПроверкиГотовности", Неопределено);
	Параметры.Вставить("РезультатПодготовкиВложения", Неопределено);
	Параметры.Вставить("РезультатПоискаНастроек", Неопределено);
	Параметры.Вставить("РезультатПодготовкиДанных", Неопределено);
	Возврат Параметры;
КонецФункции

// Проверяет готовность объекта учета к документообороту.
// 
// Параметры:
//  ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
// Возвращаемое значение:
//  Структура - результат проверки готовности объекта учета:
//  * Успех - Булево - признак готовности объекта учета к документообороту.
//  * ПроверкаГотовности - см. ИнтеграцияЭДО.ПроверкаГотовностиКДокументообороту
Функция ПроверитьГотовностьОбъектаУчетаКДокументообороту(ОбъектУчета) 
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("Успех", Истина);
	РезультатПроверки.Вставить("ПроверкаГотовности", Новый ФиксированнаяСтруктура(Новый Структура));
	
	НаборОбъектовУчета = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбъектУчета);
	ПроверкаГотовности = ИнтеграцияЭДО.ПроверкаГотовностиКДокументообороту(НаборОбъектовУчета);
	Если Не ИнтеграцияЭДОКлиентСервер.ГотовностьКДокументообороту(ПроверкаГотовности) Тогда
		РезультатПроверки.Успех = Ложь;
		РезультатПроверки.Вставить("ПроверкаГотовности", ПроверкаГотовности);
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

// Параметры:
//  СтатусыЭлектронныхДокументов - См. СтатусыЭлектронныхДокументовОбъектаУчета
// 
// Возвращаемое значение:
//  См. НовыеПараметрыПросмотраСтатусовЭлектронныхДокументов
Функция ПараметрыПросмотраСтатусовЭлектронныхДокументов(СтатусыЭлектронныхДокументов)
	
	ПараметрыПросмотра = НовыеПараметрыПросмотраСтатусовЭлектронныхДокументов();
	
	Если ЗначениеЗаполнено(СтатусыЭлектронныхДокументов) Тогда
		ПараметрыПросмотра.АдресДанных = ПоместитьВоВременноеХранилище(СтатусыЭлектронныхДокументов);
	КонецЕсли;
	
	Возврат ПараметрыПросмотра;
	
КонецФункции

// Формирует данные электронного документа.
// 
// Параметры:
//  ОписаниеОбъектаУчета - см. ИнтеграцияЭДО.ОписаниеОбъектаУчета
//  НастройкиФормирования - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыеНастройкиФормированияЭлектронногоДокументаОбъектаУчета
//  ПараметрыОткрытия - см. ПараметрыПросмотраЭлектронногоДокументаПоОбъектуУчета.ПараметрыОткрытия
// Возвращаемое значение:
//  См. НовыйРезультатПодготовкиДанныхПредварительногоПросмотра
Функция ПодготовитьДанныеПредварительногоПросмотра(ОписаниеОбъектаУчета, НастройкиФормирования,
	ПараметрыОткрытия) Экспорт
	
	Если НастройкиФормирования.ЭтоОблачныйЭДО Тогда
		Возврат ПодготовитьДанныеПредварительногоПросмотраОблачногоЭДО(
			ОписаниеОбъектаУчета, НастройкиФормирования, ПараметрыОткрытия);
	Иначе
		Возврат ПодготовитьДанныеПредварительногоПросмотраВстроенногоЭДО(
			ОписаниеОбъектаУчета, НастройкиФормирования, ПараметрыОткрытия);
	КонецЕсли;
	
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Основания - Массив Из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО -
//  * СвязующийОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//                         - Неопределено
//  * СвязанныеОбъектыУчета - Массив Из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  * ОписанияСообщений - Массив из см. ЭлектронныеДокументыЭДО.НовоеОписаниеСообщения
//
Функция НовыеДанныеПредварительногоПросмотраВстроенногоЭДО()
	Данные = Новый Структура;
	Данные.Вставить("Основания", Новый Массив);
	Данные.Вставить("СвязующийОбъектУчета", Неопределено);
	Данные.Вставить("СвязанныеОбъектыУчета", Новый Массив);
	Данные.Вставить("ОписанияСообщений", Новый Массив);
	Возврат Данные;
КонецФункции

// Формирует данные электронного документа.
// 
// Параметры:
//  ОписаниеОбъектаУчета - см. ИнтеграцияЭДО.ОписаниеОбъектаУчета
//  НастройкиФормирования - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыеНастройкиФормированияЭлектронногоДокументаОбъектаУчета
//  ПараметрыОткрытия - см. ПараметрыПросмотраЭлектронногоДокументаПоОбъектуУчета.ПараметрыОткрытия
// Возвращаемое значение:
//  См. НовыйРезультатПодготовкиДанныхПредварительногоПросмотра
Функция ПодготовитьДанныеПредварительногоПросмотраВстроенногоЭДО(ОписаниеОбъектаУчета, НастройкиФормирования,
	ПараметрыОткрытия)
	
	РезультатПодготовкиДанных = НовыйРезультатПодготовкиДанныхПредварительногоПросмотра();
	
	ДанныеПредварительногоПросмотра = НовыеДанныеПредварительногоПросмотраВстроенногоЭДО();
	
	ОбъектУчета = ОписаниеОбъектаУчета.ОбъектУчета;
	ОписанияДополнительныхСообщений = Неопределено;
	
	ОписанияОшибок = Новый Массив;
	
	Если ОписаниеОбъектаУчета.Направление = Перечисления.НаправленияЭДО.Внутренний Тогда
		ОписаниеСообщения = ЭлектронныеДокументыЭДО.ОписаниеСообщенияВнутреннегоЭДО(ОбъектУчета,
			НастройкиФормирования.НастройкиВнутреннегоЭДО);
		ДанныеПредварительногоПросмотра.Основания.Добавить(ОбъектУчета);
	ИначеЕсли ОписаниеОбъектаУчета.ТипДокумента = Перечисления.ТипыДокументовЭДО.Прикладной Тогда
		ОписаниеСообщения = ЭлектронныеДокументыЭДО.ОписаниеСообщенияОтправителяПрикладногоДокумента(ОбъектУчета,
			НастройкиФормирования.НастройкиОтправки, ОписаниеОбъектаУчета.ПрикладнойТипДокумента);
		ДанныеПредварительногоПросмотра.Основания.Добавить(ОбъектУчета);
	Иначе
		ПараметрыФормирования = ИнтеграцияЭДО.НовыеПараметрыФормированияДанныхОбъектаУчета();
		ЗаполнитьЗначенияСвойств(ПараметрыФормирования, НастройкиФормирования.НастройкиОтправки);
		ПараметрыФормирования.ТипДокумента = ОписаниеОбъектаУчета.ТипДокумента;
		ПараметрыФормирования.ДанныеКаталога = ПараметрыОткрытия.ДанныеКаталога;
		Если ЗначениеЗаполнено(ПараметрыОткрытия.ФайлДоговора) Тогда
			ПараметрыФормирования.ДанныеФайлаДоговора = ПараметрыОткрытия.ФайлДоговора.ДвоичныеДанные;
		КонецЕсли;
		ОписаниеДанных = ИнтеграцияЭДО.ОписаниеДанныхОбъектаУчета(ОбъектУчета, ПараметрыФормирования);
		
		Формат = НастройкиФормирования.НастройкиОтправки.Формат;
		Если ИнтерфейсДокументовЭДОКлиентСервер.ЭтоФорматДоговорногоДокументаXML(Формат)
			И ЗначениеЗаполнено(ПараметрыОткрытия.ФайлДоговора)
			И ОписаниеДанных.Данные.ОбъектXDTO = Неопределено Тогда
			
			Возврат РезультатПодготовкиДанных;
			
		КонецЕсли;
		
		ОписаниеСообщения = ЭлектронныеДокументыЭДО.ОписаниеСообщенияОтправителя(
			ОбъектУчета, ОписаниеДанных.Данные, НастройкиФормирования.НастройкиОтправки,
			ПараметрыОткрытия.ЗначенияДополнительныхПолей);
		ОписанияДополнительныхСообщений = ЭлектронныеДокументыЭДО.ОписанияДополнительныхСообщений(
			ОбъектУчета, ОписаниеДанных.Данные, НастройкиФормирования.НастройкиОтправки, ПараметрыФормирования);
		
		ДанныеПредварительногоПросмотра.Основания = ОписаниеДанных.Основания;
		ДанныеПредварительногоПросмотра.СвязующийОбъектУчета = ОписаниеДанных.СвязующийОбъектУчета;
		ДанныеПредварительногоПросмотра.СвязанныеОбъектыУчета = ОписаниеДанных.СвязанныеОбъектыУчета;
		
		Если (ИнтерфейсДокументовЭДОКлиентСервер.ЭтоФорматДоговорногоДокументаПДФ_А3(Формат)
			Или ИнтерфейсДокументовЭДОКлиентСервер.ЭтоФорматДоговорногоДокументаXML(Формат))
			И Не ЗначениеЗаполнено(ПараметрыОткрытия.ФайлДоговора) Тогда
			
			РезультатПодготовкиДанных.Ошибка = Истина;
			ОписаниеОшибки = ЭлектронныеДокументыЭДО.НовоеОписаниеОшибкиФормирования();
			ЗаполнитьЗначенияСвойств(ОписаниеОшибки.ОписаниеОбъектаУчета, ОписаниеОбъектаУчета);
			
			ПараметрыВыбораФайла = ЭлектронныеДокументыЭДО.НовыеПараметрыПолученияФайлаДоговорногоДокумента();
			ПараметрыВыбораФайла.Формат = Формат;
			
			Если ОписаниеСообщения.Данные <> Неопределено
				И ОписаниеСообщения.Данные.Содержание <> Неопределено Тогда
				ПараметрыВыбораФайла.ИдентификаторОсновногоФайла = 
					ОписаниеСообщения.Данные.Содержание.ИдентификаторДокумента;
			КонецЕсли;
			
			ОписаниеОшибки.ОтсутствуетФайлДоговорногоДокумента = ПараметрыВыбораФайла;
			ОписанияОшибок.Добавить(ОписаниеОшибки);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОписанияСообщений = ДанныеПредварительногоПросмотра.ОписанияСообщений;
	ОписанияСообщений.Добавить(ОписаниеСообщения);
	Если ЗначениеЗаполнено(ОписанияДополнительныхСообщений) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОписанияСообщений, ОписанияДополнительныхСообщений);
	КонецЕсли;
	
	Для Каждого ОписаниеСообщения Из ОписанияСообщений Цикл
		
		Если ЗначениеЗаполнено(ОписаниеСообщения.Данные.Ошибки.ЗаполнениеДанных)
			Или ЗначениеЗаполнено(ОписаниеСообщения.Данные.Ошибки.ЗначенияДополнительныхПолей) Тогда
			
			РезультатПодготовкиДанных.Ошибка = Истина;
			
			ОписаниеОшибки = ЭлектронныеДокументыЭДО.НовоеОписаниеОшибкиФормирования();
			ЗаполнитьЗначенияСвойств(ОписаниеОшибки.ОписаниеОбъектаУчета, ОписаниеОбъектаУчета);
			ОписаниеОшибки.ОшибкиДанных = ОписаниеСообщения.Данные.Ошибки;
			ОписанияОшибок.Добавить(ОписаниеОшибки);
		КонецЕсли;
		
	КонецЦикла;
	
	Если РезультатПодготовкиДанных.Ошибка Тогда
		АдресСведенийОбОшибках = ПоместитьВоВременноеХранилище(ОписанияОшибок, Новый УникальныйИдентификатор);
		РезультатПодготовкиДанных.АдресСведенийОбОшибках = АдресСведенийОбОшибках;
		Возврат РезультатПодготовкиДанных;
	КонецЕсли;
	
	РезультатПодготовкиДанных.АдресДанныхПредварительногоПросмотра = ПоместитьВоВременноеХранилище(
		ДанныеПредварительногоПросмотра, Новый УникальныйИдентификатор);
	
	Возврат РезультатПодготовкиДанных;
	
КонецФункции

// Параметры:
//  ОписаниеОбъектаУчета - см. ПодготовитьДанныеПредварительногоПросмотра.ОписаниеОбъектаУчета
//  НастройкиФормирования - см. ПодготовитьДанныеПредварительногоПросмотра.НастройкиФормирования
//  ПараметрыОткрытия - см. ПодготовитьДанныеПредварительногоПросмотра.ПараметрыОткрытия
// 
// Возвращаемое значение:
//  См. НовыйРезультатПодготовкиДанныхПредварительногоПросмотра
Функция ПодготовитьДанныеПредварительногоПросмотраОблачногоЭДО(ОписаниеОбъектаУчета, НастройкиФормирования,
	ПараметрыОткрытия)
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияФункции(Новый УникальныйИдентификатор);
	
	// См. ИнтеграцияОблачногоЭДО.ПодготовитьДанныеПредварительногоПросмотра
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполненияВФоне,
		"ИнтеграцияОблачногоЭДО.ПодготовитьДанныеПредварительногоПросмотра",
		ОписаниеОбъектаУчета, НастройкиФормирования, ПараметрыОткрытия);
	
	РезультатПодготовкиДанных = РезультатПодготовкиДанныхПросмотраПослеДлительнойОперации(ДлительнаяОперация);
	
	Если Не ЗначениеЗаполнено(РезультатПодготовкиДанных) Тогда
		РезультатПодготовкиДанных = НовыйРезультатПодготовкиДанныхПредварительногоПросмотра();
		РезультатПодготовкиДанных.ДлительнаяОперация = ДлительнаяОперация;
	КонецЕсли;
	
	Возврат РезультатПодготовкиДанных;
	
КонецФункции

Процедура ПодготовитьНовыеРеквизитыФормыПоСхемеРегламента(Форма, ЭлементСхемыРодитель, НовыеРеквизитыФормы)
	
	КоллекцияЭлементовСхемы = ЭлементСхемыРодитель.ПолучитьЭлементы();
	Если КоллекцияЭлементовСхемы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементСхемы Из КоллекцияЭлементовСхемы Цикл
		
		ПодготовитьНовыеРеквизитыФормыПоСхемеРегламента(Форма, ЭлементСхемы, НовыеРеквизитыФормы);
		
		ПостфиксИмениРеквизита = Неопределено;
		Если ЭлементСхемы.Свойство("АдресОписанияСообщения") Тогда
			ПостфиксИмениРеквизита = ЭлементСхемы.АдресОписанияСообщения;
		ИначеЕсли ЭлементСхемы.Свойство("АдресФайла") Тогда
			ПостфиксИмениРеквизита = ЭлементСхемы.АдресФайла;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ЭлементСхемы.Сообщение)
			И Не ЗначениеЗаполнено(ПостфиксИмениРеквизита) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭлементСхемы.Сообщение) Тогда
			ПостфиксИмениРеквизита = Строка(ЭлементСхемы.Сообщение.УникальныйИдентификатор());
		КонецЕсли;
		ПостфиксИмениРеквизита = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(
			ПостфиксИмениРеквизита, "");
		ПостфиксИмениРеквизита = СтрЗаменить(ПостфиксИмениРеквизита, "-", "");
		
		ИмяРеквизита = "ТабличныйДокумент" + ПостфиксИмениРеквизита;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, ИмяРеквизита) Тогда
			ЭлементСхемы.ИмяРеквизита = ИмяРеквизита;
			Продолжить;
		КонецЕсли;
		
		ЭлементСхемы.ИмяРеквизита = ИмяРеквизита;
		РеквизитФормы = Новый РеквизитФормы(ЭлементСхемы.ИмяРеквизита, Новый ОписаниеТипов("ТабличныйДокумент"));
		НовыеРеквизитыФормы.Добавить(РеквизитФормы);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает параметры просмотра нового электронного документа по объекту учета.
// 
// Параметры:
//  ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - объект учета.
//  ПараметрыОткрытия - см. ИнтерфейсДокументовЭДОВызовСервера.ПараметрыПросмотраЭлектронногоДокументаПоОбъектуУчета.ПараметрыОткрытия
// 
// Возвращаемое значение:
//  См. НовыеПараметрыПросмотраЭлектронногоДокумента
//
Функция ПараметрыПросмотраНовогоЭлектронногоДокументаПоОбъектуУчета(ОбъектУчета, ПараметрыОткрытия) Экспорт
	
	ПараметрыПросмотра = НовыеПараметрыПросмотраЭлектронногоДокумента();
	ПараметрыПросмотра.ОбъектУчета = ОбъектУчета;
	
	ОписаниеОбъектаУчета = ЭлектронныеДокументыЭДО.ОписаниеОбъектаУчета(ОбъектУчета, ПараметрыОткрытия.ВидДокумента);
	
	КоличествоОписанийДокументовЭДО = ОписаниеОбъектаУчета.Количество();
	
	Если КоличествоОписанийДокументовЭДО > 1 Тогда
		СтатусыЭлектронныхДокументов = СтатусыЭлектронныхДокументовОбъектаУчета(
			ОписаниеОбъектаУчета, Истина);
		ПараметрыПросмотра.ПросмотрСтатусовЭлектронныхДокументов = ПараметрыПросмотраСтатусовЭлектронныхДокументов(
			СтатусыЭлектронныхДокументов);
	ИначеЕсли КоличествоОписанийДокументовЭДО = 1 Тогда
		ПараметрыПросмотра.ПредварительныйПросмотр = ПараметрыПредварительногоПросмотраЭлектронногоДокумента(
			ОписаниеОбъектаУчета[0], ПараметрыОткрытия);
	КонецЕсли;
	
	Возврат ПараметрыПросмотра;
	
КонецФункции

// Возвращает новый результат подготовки вложения произвольного документа.
// 
// Возвращаемое значение:
//  Структура:
// * Успех - Булево
// * АдресОписанияФайла - Строка
// * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
// * Ошибка - Булево
// * ТекстОшибки - Строка
Функция НовыйРезультатПодготовкиВложенияПроизвольногоДокумента()
	Результат = Новый Структура;
	Результат.Вставить("Успех", Ложь);
	Результат.Вставить("АдресОписанияФайла", "");
	Результат.Вставить("ВидДокумента", Справочники.ВидыДокументовЭДО.ПустаяСсылка());
	Результат.Вставить("Ошибка", Ложь);
	Результат.Вставить("ТекстОшибки", "");
	Возврат Результат;
КонецФункции

// Возвращает результат подготовки вложения произвольного документа.
// 
// Параметры:
//  ОписаниеЭлектронногоДокумента - СтрокаТаблицыЗначений из см. ИнтеграцияЭДО.ОписаниеОбъектаУчета
// 
// Возвращаемое значение:
//  См. НовыйРезультатПодготовкиВложенияПроизвольногоДокумента
Функция ВложениеПроизвольногоДокумента(ОписаниеЭлектронногоДокумента)
	
	Если ОписаниеЭлектронногоДокумента.ТипДокумента = Перечисления.ТипыДокументовЭДО.МашиночитаемаяДоверенность Тогда
		Результат = ВложениеМашиночитаемойДоверенности(ОписаниеЭлектронногоДокумента);
	ИначеЕсли ОписаниеЭлектронногоДокумента.ТипДокумента = Перечисления.ТипыДокументовЭДО.СоглашениеОбЭДО Тогда
		Результат = ВложениеСоглашенияОбЭДО(ОписаниеЭлектронногоДокумента);
	Иначе
		Результат = НовыйРезультатПодготовкиВложенияПроизвольногоДокумента();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает результат подготовки вложения машиночитаемой доверенности.
// 
// Параметры:
//  ОписаниеЭлектронногоДокумента - СтрокаТаблицыЗначений из см. ИнтеграцияЭДО.ОписаниеОбъектаУчета
// 
// Возвращаемое значение:
//  См. НовыйРезультатПодготовкиВложенияПроизвольногоДокумента
Функция ВложениеМашиночитаемойДоверенности(ОписаниеЭлектронногоДокумента)
	
	Результат = НовыйРезультатПодготовкиВложенияПроизвольногоДокумента();
	
	РезультатВыгрузки = МашиночитаемыеДоверенности.ВыгрузитьДанныеДоверенности(
		ОписаниеЭлектронногоДокумента.ОбъектУчета);
	Если РезультатВыгрузки.Ошибка Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки = НСтр("ru = 'Не удалось сформировать электронный документ по причине:'")
			+ Символы.ПС + РезультатВыгрузки.ТекстОшибки;
		Возврат Результат;
	КонецЕсли;
	
	Результат.АдресОписанияФайла = ПоместитьВоВременноеХранилище(РезультатВыгрузки.ОписаниеФайла);
	Результат.Успех = Истина;
	
	Возврат Результат;
	
КонецФункции

// Возвращает результат подготовки вложения соглашения об ЭДО.
// 
// Параметры:
//  ОписаниеЭлектронногоДокумента - СтрокаТаблицыЗначений из см. ИнтеграцияЭДО.ОписаниеОбъектаУчета
// 
// Возвращаемое значение:
//  См. НовыйРезультатПодготовкиВложенияПроизвольногоДокумента
Функция ВложениеСоглашенияОбЭДО(ОписаниеЭлектронногоДокумента)
	
	Результат = НовыйРезультатПодготовкиВложенияПроизвольногоДокумента();
	
	НастройкаЭДО = НастройкиОтправкиЭДО.СсылкаНаОбъектНастройкиЭДО(
		ОписаниеЭлектронногоДокумента.Организация,
		ОписаниеЭлектронногоДокумента.Контрагент,
		ОписаниеЭлектронногоДокумента.Договор);
	
	ОписаниеФайлаСоглашения = НастройкиОтправкиЭДО.СформироватьСоглашениеПоШаблону(НастройкаЭДО);
	Если ОписаниеФайлаСоглашения = Неопределено Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки = НСтр("ru = 'Не удалось сформировать соглашение по ЭДО'");
		Возврат Результат;
	КонецЕсли;
	
	Результат.АдресОписанияФайла = ПоместитьВоВременноеХранилище(ОписаниеФайлаСоглашения);
	Результат.ВидДокумента = ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(ОписаниеЭлектронногоДокумента.ТипДокумента);
	Результат.Успех = Истина;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  РеквизитыДокумента - Структура:
//  * Организация - ОпределяемыйТип.Организация
//  * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
// 
// Возвращаемое значение:
//  См. НовыйРезультатПроверкиНастроекОтправки
Функция ПроверитьНастройкиВнутреннегоЭДО(РеквизитыДокумента)
	
	Результат = НовыйРезультатПроверкиНастроекОтправки();
	
	НастройкиФормированияВнутреннегоЭДО = НастройкиВнутреннегоЭДО(РеквизитыДокумента.Организация,
		РеквизитыДокумента.ВидДокумента);

	Если НастройкиФормированияВнутреннегоЭДО = Неопределено Тогда
		Результат.Отказ = Истина;

		Если НастройкиЭДО.ЕстьПравоНастройкиОбмена() Тогда
			КлючНастроек = Новый Структура;
			КлючНастроек.Вставить("Организация", РеквизитыДокумента.Организация);
			КлючНастроек.Вставить("ВидДокумента", РеквизитыДокумента.ВидДокумента);
			
			Результат.КлючНастроекОтправки = КлючНастроек;
		Иначе 
			ТекстСообщения = НСтр("ru = 'Не создано настроек формирования документов для:
				|Организация - %1.
				|Вид документа - %2.
				|Недостаточно прав для выполнения операции, обратитесь к администратору.'");
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(ТекстСообщения, РеквизитыДокумента.Организация, РеквизитыДокумента.ВидДокумента));
		КонецЕсли;
		
		Возврат Результат;
	КонецЕсли;
	
	Если Не НастройкиФормированияВнутреннегоЭДО.Формировать Тогда
		Результат.Отказ = Истина;

		Если НастройкиЭДО.ЕстьПравоНастройкиОбмена() Тогда
			ТекстСообщения = НСтр("ru = 'Запрещена отправка произвольных документов между:
				|Организация - %1.
				|Вид документа - %2.
				|Включите возможность формирования произвольных документов в настройке отправки и повторите попытку.'");
		Иначе 
			ТекстСообщения = НСтр("ru = 'Запрещена отправка произвольных документов между:
				|Организация - %1.
				|Вид документа - %2.
				|Недостаточно прав для выполнения операции, обратитесь к администратору.'");
		КонецЕсли;
		
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(ТекстСообщения, РеквизитыДокумента.Организация, РеквизитыДокумента.ВидДокумента));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  РеквизитыДокумента - Структура:
//  * Организация - ОпределяемыйТип.Организация
//  * Контрагент - ОпределяемыйТип.КонтрагентБЭД
//  * ДоговорКонтрагента - ОпределяемыйТип.ДоговорСКонтрагентомЭДО
//  * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
// 
// Возвращаемое значение:
//  См. НовыйРезультатПроверкиНастроекОтправки
Функция ПроверитьНастройкиОтправки(РеквизитыДокумента)
	
	Результат = НовыйРезультатПроверкиНастроекОтправки();
	
	КлючНастроекОтправки = НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтправки();
	КлючНастроекОтправки.Отправитель = РеквизитыДокумента.Организация;
	КлючНастроекОтправки.Получатель = РеквизитыДокумента.Контрагент;
	КлючНастроекОтправки.Договор = РеквизитыДокумента.ДоговорКонтрагента;
	КлючНастроекОтправки.ВидДокумента = РеквизитыДокумента.ВидДокумента;
	
	НастройкиОтправки = НастройкиЭДО.НастройкиОтправки(КлючНастроекОтправки);
	
	Если НастройкиОтправки = Неопределено Тогда
		Результат.Отказ = Истина;

		Если НастройкиЭДО.ЕстьПравоНастройкиОбмена() Тогда
			Результат.Вставить("КлючНастроекОтправки", КлючНастроекОтправки);
		Иначе 
			ТекстСообщения = НСтр("ru = 'Не создано настроек отправки электронных документов между:
				|Организация - %1.
				|Контрагент - %2.
				|Недостаточно прав для выполнения операции, обратитесь к администратору.'");
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(ТекстСообщения, РеквизитыДокумента.Организация, РеквизитыДокумента.Контрагент));
		КонецЕсли;
		
		Возврат Результат;
	КонецЕсли;
	
	Если Не НастройкиОтправки.Формировать Тогда
		Результат.Отказ = Истина;
		Результат.ФормированиеЗапрещено = Истина;
		
		Если НастройкиЭДО.ЕстьПравоНастройкиОбмена() Тогда
			Результат.Вставить("КлючНастроекОтправки", КлючНастроекОтправки);
		Иначе 
			ТекстСообщения = НСтр("ru = 'Запрещена отправка документов с видом %1 между:
				|Организация - %2.
				|Контрагент - %3.
				|Недостаточно прав для выполнения операции, обратитесь к администратору.'");
			
			ОбщегоНазначения.СообщитьПользователю(СтрШаблон(ТекстСообщения, 
				РеквизитыДокумента.ВидДокумента, РеквизитыДокумента.Организация, РеквизитыДокумента.Контрагент));
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выполняет поиск настроек формирования по объекту учета.
// 
// Параметры:
//  ОписаниеОбъектаУчета - СтрокаТаблицыЗначений из См. ИнтеграцияЭДО.ОписаниеОбъектаУчета
//  ВидДокумента - Неопределено,СправочникСсылка.ВидыДокументовЭДО
// 
// Возвращаемое значение:
//  Структура - результат поиска настройки отправки:
//  * Успех - Булево - признак наличия настроек.
//  * Настройки - См. ИнтерфейсДокументовЭДОКлиентСервер.НовыеНастройкиФормированияЭлектронногоДокументаОбъектаУчета
//  * ПараметрыПоиска - Структура:
//   ** ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//   ** Направление - ПеречислениеСсылка.НаправленияЭДО - направление электронного документа.
//   ** КлючНастроекОтправки - Неопределено
//                           - См. ЭлектронныеДокументыЭДО.КлючНастроекОтправкиОбъектаУчета
//   ** КлючНастроекИнтеркампани - Неопределено
//                               - Структура:
//                                 *** Организация - ОпределяемыйТип.Организация
//   ** КлючОсновнойНастройкиВнутреннегоЭДО - Неопределено
//                                          - Структура:
//                                            *** ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//                                            *** Организация - ОпределяемыйТип.Организация
//   ** ПараметрыОсновногоВидаВнутреннегоДокумента - Неопределено
Функция НастройкиФормированияЭлектронногоДокументаОбъектаУчета(ОписаниеОбъектаУчета, ВидДокумента = Неопределено)
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("ОбъектУчета", ОписаниеОбъектаУчета.ОбъектУчета);
	ПараметрыПоиска.Вставить("Направление", ОписаниеОбъектаУчета.Направление);
	ПараметрыПоиска.Вставить("КлючНастроекОтправки");
	ПараметрыПоиска.Вставить("КлючНастроекИнтеркампани");
	ПараметрыПоиска.Вставить("КлючОсновнойНастройкиВнутреннегоЭДО");
	ПараметрыПоиска.Вставить("ПараметрыОсновногоВидаВнутреннегоДокумента");
	
	НастройкиФормирования = 
		ИнтерфейсДокументовЭДОКлиентСервер.НовыеНастройкиФормированияЭлектронногоДокументаОбъектаУчета();
	НастройкиФормирования.Направление = ОписаниеОбъектаУчета.Направление;
	
	ФормированиеЗапрещено = Ложь;
	Успех = Истина;
	УказанОсновнойВидДокумента = Истина;
	
	Если ОписаниеОбъектаУчета.Направление = Перечисления.НаправленияЭДО.Внутренний Тогда
		ПараметрыПоиска.КлючОсновнойНастройкиВнутреннегоЭДО = Новый Структура("ОбъектУчета, Организация");
		Если ЗначениеЗаполнено(ВидДокумента) Тогда
			Настройки = НастройкиВнутреннегоЭДО(ОписаниеОбъектаУчета.Организация, ВидДокумента);
		Иначе
			ЗаполнитьЗначенияСвойств(ПараметрыПоиска.КлючОсновнойНастройкиВнутреннегоЭДО, ОписаниеОбъектаУчета);
			Настройки = НастройкиОсновногоВидаВнутреннегоДокумента(ОписаниеОбъектаУчета.Организация,
				ОписаниеОбъектаУчета.ОбъектУчета);			
			Если Не ЗначениеЗаполнено(Настройки) Тогда 
				УказанОсновнойВидДокумента = Ложь;
				НастройкиОбъектаУчета = НастройкиВнутреннегоЭДООбъектаУчета(ОписаниеОбъектаУчета.Организация,
					ОписаниеОбъектаУчета.ОбъектУчета);
				Если ЗначениеЗаполнено(НастройкиОбъектаУчета) Тогда
					Настройки = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(НастройкиОбъектаУчета[0]);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		НастройкиФормирования.НастройкиВнутреннегоЭДО = Настройки;
		ДоступныеКФормированиюНастройки = НастройкиВнутреннегоЭДООбъектаУчета(ОписаниеОбъектаУчета.Организация,
			ОписаниеОбъектаУчета.ОбъектУчета, Истина);
		ФормированиеЗапрещено = Не ЗначениеЗаполнено(ДоступныеКФормированиюНастройки);
		
		Успех = ЗначениеЗаполнено(Настройки) И Не ФормированиеЗапрещено И УказанОсновнойВидДокумента;

	ИначеЕсли ОписаниеОбъектаУчета.Направление = Перечисления.НаправленияЭДО.Интеркампани Тогда
		ПараметрыПоиска.КлючНастроекИнтеркампани = Новый Структура("Организация");
		ЗаполнитьЗначенияСвойств(ПараметрыПоиска.КлючНастроекИнтеркампани, ОписаниеОбъектаУчета);
		
		КлючНастроек = НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтправки();
		КлючНастроек.Отправитель = ОписаниеОбъектаУчета.Организация;
		КлючНастроек.Получатель = ОписаниеОбъектаУчета.Контрагент;
		КлючНастроек.Договор = ОписаниеОбъектаУчета.Договор;
		КлючНастроек.ВидДокумента = ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(ОписаниеОбъектаУчета.ТипДокумента);
		
		ПараметрыПоиска.КлючНастроекОтправки = КлючНастроек;
		Настройки = НастройкиЭДО.НастройкиОтправкиИнтеркампани(ПараметрыПоиска.КлючНастроекОтправки);
		
		Если Настройки = Неопределено Тогда
			Настройки = НастройкиЭДО.СоздатьНастройкиИнтеркампани(КлючНастроек);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Настройки) Тогда
			Настройки.Договор = 
				?(ЗначениеЗаполнено(Настройки.Договор), Настройки.Договор, ОписаниеОбъектаУчета.Договор);
				
			ФормированиеЗапрещено = Не Настройки.Формировать;
		КонецЕсли;
		
		НастройкиФормирования.НастройкиОтправки = Настройки;	
		Успех = ЗначениеЗаполнено(Настройки) И Не ФормированиеЗапрещено;	
	Иначе		
		ПараметрыПоиска.КлючНастроекОтправки = 
			ЭлектронныеДокументыЭДО.КлючНастроекОтправкиОбъектаУчета(ОписаниеОбъектаУчета);
		Настройки = НастройкиЭДО.НастройкиОтправки(ПараметрыПоиска.КлючНастроекОтправки);
		
		Если ЗначениеЗаполнено(Настройки) Тогда
			Настройки.Договор = 
				?(ЗначениеЗаполнено(Настройки.Договор), Настройки.Договор, ОписаниеОбъектаУчета.Договор);
			
			ФормированиеЗапрещено = Не Настройки.Формировать;
		КонецЕсли;
		
		НастройкиФормирования.НастройкиОтправки = Настройки;
		Успех = ЗначениеЗаполнено(Настройки) И Не ФормированиеЗапрещено;
	КонецЕсли;
	
	Если ТипЗнч(ОписаниеОбъектаУчета) = Тип("СтрокаТаблицыЗначений") Тогда
		ОписаниеОбъектаУчетаСтруктурой = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ОписаниеОбъектаУчета);
	Иначе
		ОписаниеОбъектаУчетаСтруктурой = ОписаниеОбъектаУчета;
	КонецЕсли;
	
	РезультатПоиска = Новый Структура;
	РезультатПоиска.Вставить("Успех", Успех);
	РезультатПоиска.Вставить("ФормированиеЗапрещено", ФормированиеЗапрещено);
	РезультатПоиска.Вставить("Настройки", НастройкиФормирования);
	РезультатПоиска.Вставить("ПараметрыПоиска", ПараметрыПоиска);
	РезультатПоиска.Вставить("НеУказанОсновнойВидДокумента", Не УказанОсновнойВидДокумента);
	РезультатПоиска.Вставить("ОписаниеОбъектаУчета", ОписаниеОбъектаУчетаСтруктурой);
	
	Возврат РезультатПоиска;
	
КонецФункции

#Область ЗагрузкаФормализованногоДокументаXML

// Формирует данные электронного документа.
// 
// Параметры:
//  ВыбранныйФайл - Структура - данные выбранного файла:
//  * Хранение - Строка - расположение данных во временном хранилище
//  * Имя - Строка - путь к файлу / имя файла
//
// Возвращаемое значение:
//  См. НовыйРезультатПодготовкиДанныхПредварительногоПросмотраПоФайлуXML
Функция ПодготовитьДанныеПредварительногоПросмотраПоФайлуXMLВстроенногоЭДО(ВыбранныйФайл)
	
	РезультатПодготовкиДанных = НовыйРезультатПодготовкиДанныхПредварительногоПросмотраПоФайлуXML();
	
	ОписаниеФайла = РаботаСФайламиБЭД.ОписаниеФайлаПоДаннымПомещенногоФайла(ВыбранныйФайл);
	СодержаниеФайла = ЭлектронныеДокументыЭДО.СодержаниеСообщения(ОписаниеФайла);
	Если Не ЗначениеЗаполнено(СодержаниеФайла) Тогда
		Возврат РезультатПодготовкиДанных;
	КонецЕсли;
	
	ОписанияОшибок = Новый Массив;
	СуществующийДокумент = ЭлектронныеДокументыЭДО.ИсходящийДокументПоИдентификаторуФайла(ВыбранныйФайл);
	Если ЗначениеЗаполнено(СуществующийДокумент) Тогда
		
		ОписаниеОшибки = НоваяОшибкаПодготовкиДанныхПредварительногоПросмотраПоФайлуXML();
		ОписаниеОшибки.Текст = НСтр("ru = 'Такой документ уже был загружен ранее.'");
		ОписаниеОшибки.Данные = СуществующийДокумент;
		ОписанияОшибок.Добавить(ОписаниеОшибки);
		
		РезультатПодготовкиДанных.Ошибка = Истина;
		РезультатПодготовкиДанных.АдресСведенийОбОшибках = ПоместитьВоВременноеХранилище(ОписанияОшибок,
			Новый УникальныйИдентификатор);
		
		Возврат РезультатПодготовкиДанных;
		
	КонецЕсли;
	
	ДанныеДокумента = ЭлектронныеДокументыЭДО.ДанныеДокументаДляЗагрузкиПоДаннымФайлаXML(ОписаниеФайла, СодержаниеФайла);
	Если Не ДанныеДокумента.Успех И ЗначениеЗаполнено(ДанныеДокумента.Ошибка) Тогда
		
		ОписаниеОшибки = НоваяОшибкаПодготовкиДанныхПредварительногоПросмотраПоФайлуXML();
		ОписаниеОшибки.Текст = ДанныеДокумента.Ошибка;
		ОписанияОшибок.Добавить(ОписаниеОшибки);
		
		РезультатПодготовкиДанных.Ошибка = Истина;
		РезультатПодготовкиДанных.АдресСведенийОбОшибках = ПоместитьВоВременноеХранилище(ОписанияОшибок,
			Новый УникальныйИдентификатор);
		
		Возврат РезультатПодготовкиДанных;
	
	ИначеЕсли Не ДанныеДокумента.Успех Тогда
		
		Возврат РезультатПодготовкиДанных;
		
	КонецЕсли;
	
	РезультатУдаленияПодписанта = ЭлектронныеДокументыЭДО.УдалитьИзФайлаЭлектронногоДокументаСведенияОПодписанте(
		ОписаниеФайла, ДанныеДокумента.НастройкиОтправки.Отправитель);
	Если Не РезультатУдаленияПодписанта.Успех Тогда
		
		ОписаниеОшибки = НоваяОшибкаПодготовкиДанныхПредварительногоПросмотраПоФайлуXML();
		ОписаниеОшибки.Текст = РезультатУдаленияПодписанта.Ошибка;
		ОписанияОшибок.Добавить(ОписаниеОшибки);
		
		РезультатПодготовкиДанных.Ошибка = Истина;
		РезультатПодготовкиДанных.АдресСведенийОбОшибках = ПоместитьВоВременноеХранилище(ОписанияОшибок,
			Новый УникальныйИдентификатор);
		
		Возврат РезультатПодготовкиДанных;
		
	КонецЕсли;
	
	ДанныеПредварительногоПросмотра = НовыеДанныеПредварительногоПросмотраВстроенногоЭДО();
	
	ОписанияСообщений = ДанныеПредварительногоПросмотра.ОписанияСообщений;
	
	ОписаниеСообщения = ЭлектронныеДокументыЭДО.НовоеОписаниеСообщения();
	ОписаниеСообщения.ВидСообщения = ДанныеДокумента.НастройкиОтправки.ВидДокумента;
	ОписаниеСообщения.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя;
	ОписаниеСообщения.Направление = Перечисления.НаправленияЭДО.Исходящий;
	
	ДанныеДокументаСообщения = ОписаниеСообщения.Данные;
	ДанныеДокументаСообщения.Документ = ОписаниеФайла;
	ДанныеДокументаСообщения.Содержание = СодержаниеФайла;
	
	ОписанияСообщений.Добавить(ОписаниеСообщения);
	
	РезультатПодготовкиДанных.АдресДанных = ПоместитьВоВременноеХранилище(
		ДанныеПредварительногоПросмотра, Новый УникальныйИдентификатор);
		
	НастройкиФормирования = 
		ИнтерфейсДокументовЭДОКлиентСервер.НовыеНастройкиФормированияЭлектронногоДокументаОбъектаУчета();
	НастройкиФормирования.Направление = Перечисления.НаправленияЭДО.Исходящий;
	НастройкиФормирования.НастройкиОтправки = ДанныеДокумента.НастройкиОтправки;
	НастройкиФормирования.ЭтоОблачныйЭДО = Ложь;
		
	РезультатПодготовкиДанных.НастройкиФормирования = НастройкиФормирования;
	
	РезультатПодготовкиДанных.ДокументРаспознан = Истина;
	
	Возврат РезультатПодготовкиДанных;
		
КонецФункции

// Формирует данные электронного документа.
// 
// Параметры:
//  ВыбранныйФайл - Структура - данные выбранного файла:
//  * Хранение - Строка - расположение данных во временном хранилище
//  * Имя - Строка - путь к файлу / имя файла
//
// Возвращаемое значение:
//  См. НовыйРезультатПодготовкиДанныхПредварительногоПросмотраПоФайлуXML
Функция ПодготовитьДанныеПредварительногоПросмотраПоФайлуXMLОблачногоЭДО(ВыбранныйФайл)
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияФункции(Новый УникальныйИдентификатор);
	
	// См. ИнтеграцияОблачногоЭДО.ПодготовитьДанныеПредварительногоПросмотраПоФайлуXML
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполненияВФоне,
		"ИнтеграцияОблачногоЭДО.ПодготовитьДанныеПредварительногоПросмотраПоФайлуXML", ВыбранныйФайл);
	
	РезультатПодготовкиДанных = РезультатПодготовкиДанныхПросмотраПоФайлуXMLПослеДлительнойОперации(ДлительнаяОперация);
	
	Если Не ЗначениеЗаполнено(РезультатПодготовкиДанных) Тогда
		РезультатПодготовкиДанных = НовыйРезультатПодготовкиДанныхПредварительногоПросмотра();
		РезультатПодготовкиДанных.ДлительнаяОперация = ДлительнаяОперация;
	КонецЕсли;
	
	Возврат РезультатПодготовкиДанных;
	
КонецФункции

// Возвращаемое значение:
//  Структура - Новая ошибка подготовки данных предварительного просмотра по файлу XML:
//  * Текст - Строка
//  * Данные - Неопределено 
//           - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
Функция НоваяОшибкаПодготовкиДанныхПредварительногоПросмотраПоФайлуXML()
	Результат = Новый Структура;
	Результат.Вставить("Текст", "");
	Результат.Вставить("Данные", Неопределено);
	Возврат Результат;
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Успех - Булево
//  * Данные - Неопределено
//           - Структура:
//             ** СодержаниеФайла - См. ЭлектронныеДокументыЭДО.СодержаниеСообщения
//             ** НастройкиОтправки - См. НастройкиОтправкиЭДО.НастройкиОтправки
//  * Ошибки - Соответствие Из КлючИЗначение:
//   ** Ключ - Строка - текст ошибки, имя атрибута
//   ** Значение - Булево
//               - Структура - Ложь, если принудительная загрузка невозможна, если загрузка возможна, тогда Структура:
//                 *** ВИсходномДокументе - Строка - значение в загруженном файле
//                 *** ВЗагружаемомДокументе - Строка - значение в загружаемом файле
//  * СуществующийДокумент - Неопределено
//                         - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
Функция НовыйРезультатЗагрузкиФормализованногоДокументаПоДаннымФайлаXML()
	
	Результат = Новый Структура;
	Результат.Вставить("Успех", Истина);
	Результат.Вставить("Данные", Неопределено);
	Результат.Вставить("Ошибки", Новый Соответствие);
	Результат.Вставить("СуществующийДокумент", Неопределено);
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ДанныеДокумента - Структура:
//                    * Ссылка - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//                    * Организация - ОпределяемыйТип.Организация
//  ОписаниеФайла - См. РаботаСФайламиБЭД.НовоеОписаниеФайла 
//  Результат - См. НовыйРезультатЗагрузкиФормализованногоДокументаПоДаннымФайлаXML
//  ПринудительнаяЗагрузка - Булево
Процедура ЗагрузитьФормализованныйДокументПоДаннымФайлаXMLПослеПроверок(ДанныеДокумента, ОписаниеФайла, Результат,
	ПринудительнаяЗагрузка = Ложь)

	РезультатЗагрузки = ВыполнитьЗагрузкуФормализованногоДокументаПоДаннымФайлаXML(ДанныеДокумента, ОписаниеФайла,
		ПринудительнаяЗагрузка);
		
	Результат.Данные = РезультатЗагрузки.Данные;
	Если Не РезультатЗагрузки.Успех Тогда
		Результат.Успех = Ложь;
		Результат.Ошибки.Вставить(РезультатЗагрузки.Ошибка, Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ДанныеДокумента - Структура:
//                    * Ссылка - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//                    * Организация - ОпределяемыйТип.Организация
//  ВыбранныйФайл - Структура - данные выбранного файла:
//  * Хранение - Строка - расположение данных во временном хранилище
//  * Имя - Строка - путь к файлу / имя файла
//
// Возвращаемое значение:
//  Структура:
//  * Успех - Булево
//  * Ошибки - Соответствие Из КлючИЗначение:
//   ** Ключ - Строка - текст ошибки, имя атрибута
//   ** Значение - Булево
//               - Структура - Ложь, если принудительная загрузка невозможна, если загрузка возможна, тогда Структура:
//                 *** ВИсходномДокументе - Строка - значение в загруженном файле
//                 *** ВЗагружаемомДокументе - Строка - значение в загружаемом файле
Функция ПроверитьСоответствиеЗагружаемогоФайлаXMLОсновномуФайлуДокумента(ДанныеДокумента, ВыбранныйФайл)

	Результат = Новый Структура("Успех, Ошибки", Истина, Новый Соответствие);

	ОсновнойФайлДокумента = ЭлектронныеДокументыЭДО.ОсновнойФайлИнформацииОтправителя(ДанныеДокумента.Ссылка);
	
	СтруктураИмениВыбранногоФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ВыбранныйФайл.Имя);
	
	ОшибкиСоответствияФайлов = ФорматыЭДО.ЗагружаемыйФайлСоответсвуетЗагруженномуФайлу(ДанныеДокумента.Организация,
		ВыбранныйФайл, ОсновнойФайлДокумента, СтруктураИмениВыбранногоФайла.ИмяБезРасширения);
		
	Если ОшибкиСоответствияФайлов.Количество() Тогда
		Результат.Успех = Ложь;
		Результат.Ошибки = ОбщегоНазначения.СкопироватьРекурсивно(ОшибкиСоответствияФайлов);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Параметры:
//  ДанныеДокумента - Структура:
//                    * Ссылка - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//                    * Организация - ОпределяемыйТип.Организация
//  ОписаниеФайла - См. РаботаСФайламиБЭД.НовоеОписаниеФайла 
//  ПринудительнаяЗагрузка - Булево
//
// Возвращаемое значение:
//  Структура:
//  * Успех - Булево
//  * Ошибка - Строка
//  * Данные - Неопределено
//           - Структура:
//             ** СодержаниеФайла - См. ЭлектронныеДокументыЭДО.СодержаниеСообщения
//             ** НастройкиОтправки - Неопределено
//                                  - См. НастройкиОтправкиЭДО.НастройкиОтправки
Функция ВыполнитьЗагрузкуФормализованногоДокументаПоДаннымФайлаXML(ДанныеДокумента, ОписаниеФайла,
	ПринудительнаяЗагрузка)
		
	РезультатЗагрузки = Новый Структура("Успех, Ошибка, Данные", Истина, "", Неопределено);
		
	РезультатУдаленияПодписанта = ЭлектронныеДокументыЭДО.УдалитьИзФайлаЭлектронногоДокументаСведенияОПодписанте(
		ОписаниеФайла, ДанныеДокумента.Организация);
	Если Не РезультатУдаленияПодписанта.Успех Тогда
		РезультатЗагрузки.Успех = Ложь;
		РезультатЗагрузки.Ошибка = РезультатУдаленияПодписанта.Ошибка;
		Возврат РезультатЗагрузки;
	КонецЕсли;
		
	ЭлектронныеДокументыЭДО.ЗаменитьДанныеОсновногоФайлаДокумента(ДанныеДокумента.Ссылка, ОписаниеФайла);
		
	ДанныеДокумента = ЭлектронныеДокументыЭДО.ДанныеДокументаДляЗагрузкиПоДаннымФайлаXML(ОписаниеФайла, Неопределено,
		ПринудительнаяЗагрузка);
	Если Не ДанныеДокумента.Успех Тогда
		РезультатЗагрузки.Успех = Ложь;
		РезультатЗагрузки.Ошибка = ДанныеДокумента.Ошибка;
		Возврат РезультатЗагрузки;
	КонецЕсли;
	
	РезультатЗагрузки.Данные = Новый Структура("СодержаниеФайла, НастройкиОтправки",
		ДанныеДокумента.СодержаниеФайла, ДанныеДокумента.НастройкиОтправки);
	
	Возврат РезультатЗагрузки;
	
КонецФункции

#КонецОбласти // ЗагрузкаФормализованногоДокументаXML

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО,ДокументСсылка.ЭлектронныйДокументВходящийЭДО
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоВходящийЭДО(ЭлектронныйДокумент) Экспорт
	Возврат ТипЗнч(ЭлектронныйДокумент) = Тип("ДокументСсылка.ЭлектронныйДокументВходящийЭДО");
КонецФункции

#КонецОбласти // ПросмотрЭлектронногоДокумента

#Область СхемаРегламента

// Возвращает данные элементов схемы для формы просмотра электронного документа.
// 
// Параметры:
//  ДанныеЭлементов - см. ЭлектронныеДокументыЭДО.ДанныеЭлементовСхемыРегламента
// 
// Возвращаемое значение:
//  См. НовыеДанныеЭлементовСхемы
Функция СформироватьДанныеЭлементовСхемы(ДанныеЭлементов)
	
	ДанныеЭлементовСхемы = НовыеДанныеЭлементовСхемы();
	
	Для Каждого ДанныеЭлемента Из ДанныеЭлементов Цикл
		НовыеДанныеЭлемента = ДанныеЭлементовСхемы.Добавить();
		ЗаполнитьЗначенияСвойств(НовыеДанныеЭлемента, ДанныеЭлемента);
		НовыеДанныеЭлемента.Доступность = (ДанныеЭлемента.Статус <> Перечисления.СтатусыСообщенийЭДО.НеСформирован);
		Если ЗначениеЗаполнено(ДанныеЭлемента.ПолноеИмяФайла) Тогда
			СтруктураИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ДанныеЭлемента.ПолноеИмяФайла);
			НовыеДанныеЭлемента.ИмяФайла = СтруктураИмениФайла.Имя;
			НовыеДанныеЭлемента.Расширение = СтруктураИмениФайла.Расширение;
		КонецЕсли;
		Если НовыеДанныеЭлемента.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя Тогда
			НовыеДанныеЭлемента.Наименование = ПредставлениеИнформацииОтправителя(
				ДанныеЭлемента.НомерДокумента, ДанныеЭлемента.ДатаДокумента);
		Иначе
			НовыеДанныеЭлемента.Наименование = НаименованиеЭлементаСхемыРегламента(
				НовыеДанныеЭлемента.ТипЭлементаРегламента);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДанныеЭлементовСхемы;
	
КонецФункции

Функция СхемаРегламентаЭлектронногоДокумента(ЭлектронныйДокумент)
	
	НастройкиСхемыРегламента = РегламентыЭДО.НовыеНастройкиСхемыРегламента();
	ЗаполнитьЗначенияСвойств(НастройкиСхемыРегламента, ЭлектронныйДокумент);

	ДанныеЭлементовСхемыРегламента = ЭлектронныеДокументыЭДО.ДанныеЭлементовСхемыРегламента(ЭлектронныйДокумент);
	
	ДанныеЭлементовСхемы = СформироватьДанныеЭлементовСхемы(ДанныеЭлементовСхемыРегламента);
	ДанныеЭлементовСхемы.Колонки.Добавить("ЭлектронныйДокумент");
	ДанныеЭлементовСхемы.ЗаполнитьЗначения(ЭлектронныйДокумент, "ЭлектронныйДокумент");

	СхемаРегламента = ЭлектронныеДокументыЭДО.НоваяСхемаРегламента(НастройкиСхемыРегламента, ДанныеЭлементовСхемы);
	ЗаполнитьПустыеДанныеЭлементовСхемыРегламента(СхемаРегламента, ДанныеЭлементовСхемы);
	
	Возврат СхемаРегламента;
	
КонецФункции

Процедура ЗаполнитьПустыеДанныеЭлементовСхемыРегламента(СхемаРегламента, ДанныеЭлементовСхемы)
	
	КоллекцияЭлементовСхемы = ЭлектронныеДокументыЭДО.ЭлементыСхемыРегламентаБезДанных(СхемаРегламента);
	
	Для Каждого ЭлементСхемы Из КоллекцияЭлементовСхемы Цикл
		НовыеДанныеЭлемента = ДанныеЭлементовСхемы.Добавить();
		НовыеДанныеЭлемента.ТипЭлементаРегламента = ЭлементСхемы.ТипЭлементаРегламента;
		НовыеДанныеЭлемента.Статус = Перечисления.СтатусыСообщенийЭДО.НеСформирован;
		НовыеДанныеЭлемента.Наименование = НаименованиеЭлементаСхемыРегламента(ЭлементСхемы.ТипЭлементаРегламента);
		ЭлементСхемы.Данные = НовыеДанныеЭлемента;
	КонецЦикла;
	
КонецПроцедуры

Функция НаименованиеЭлементаСхемыРегламента(ТипЭлементаРегламента);
	
	ТипСлужебногоДокумента = ЭлектронныеДокументыЭДО.ТипСлужебногоДокумента(ТипЭлементаРегламента);
	Если ЗначениеЗаполнено(ТипСлужебногоДокумента) Тогда
		Наименование = Строка(ТипСлужебногоДокумента);
	Иначе
		Наименование = Строка(ТипЭлементаРегламента);
	КонецЕсли;
		
	Возврат Наименование;
	
КонецФункции

Процедура ОбновитьЭлементыСхемыРегламента(Приемник, Источник)
	
	КоллекцияЭлементовИсточника = Источник.Строки;
	Если КоллекцияЭлементовИсточника.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КоллекцияЭлементовПриемника = Приемник.ПолучитьЭлементы();
	КоличествоЭлементовПриемника = КоллекцияЭлементовПриемника.Количество();
	
	МодульОбменСГИСЭПД = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");	
	КонецЕсли;
	
	Индекс = 0;
	Для Каждого ЭлементИсточника Из КоллекцияЭлементовИсточника Цикл
		
		ДанныеЭлементаИсточника = ЭлементИсточника.Данные;
		
		Если ЭлементИсточника.Дополнительный
			И Не ЗначениеЗаполнено(ДанныеЭлементаИсточника.Сообщение)
			И ПустаяСтрока(ДанныеЭлементаИсточника.АдресОписанияСообщения) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ РегламентыЭДО.ЭтоЭлементРегламентаОтправителя(ДанныеЭлементаИсточника.ТипЭлементаРегламента)
			И НЕ (МодульОбменСГИСЭПД <> Неопределено 
				И МодульОбменСГИСЭПД.ЭтоТитулОтправителя(ДанныеЭлементаИсточника.ТипЭлементаРегламента))
			И НЕ ЗначениеЗаполнено(ДанныеЭлементаИсточника.Сообщение) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Индекс < КоличествоЭлементовПриемника Тогда
			ЭлементПриемника = КоллекцияЭлементовПриемника[Индекс];
		Иначе
			ЭлементПриемника = КоллекцияЭлементовПриемника.Добавить();
		КонецЕсли;
		
		Если ЭлементПриемника.Сообщение <> ДанныеЭлементаИсточника.Сообщение
			ИЛИ ЭлементПриемника.Статус <> ДанныеЭлементаИсточника.Статус Тогда
			ЗаполнитьЗначенияСвойств(ЭлементПриемника, ДанныеЭлементаИсточника);
			ЭлементПриемника.ПредставлениеСформировано = Ложь;
			ЭлементПриемника.РаспознаниеВыполнено = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭлементПриемника.Сообщение)
			ИЛИ (МодульОбменСГИСЭПД <> Неопределено 
				И МодульОбменСГИСЭПД.ЭтоТитулОтправителя(ДанныеЭлементаИсточника.ТипЭлементаРегламента))
			ИЛИ РегламентыЭДО.ЭтоЭлементРегламентаОтправителя(ЭлементПриемника.ТипЭлементаРегламента) Тогда
			ОбновитьЭлементыСхемыРегламента(ЭлементПриемника, ЭлементИсточника);
		КонецЕсли;
		
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПредупрежденияКомпонентов

Процедура СоздатьЭлементыОтображенияПредупрежденияПрекращенияПрямогоОбмена(Форма, ГруппаПредупреждений, ИмяГруппы)	
	
	Если Форма.Элементы.Найти(ИмяГруппы) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Группа = Форма.Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), ГруппаПредупреждений);
	Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	Группа.ОтображатьЗаголовок = Ложь;
	Группа.ЦветФона = Новый Цвет(255, 240, 240);
	Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	Группа.Объединенная = Истина;
	Группа.РастягиватьПоГоризонтали = Истина;
	Группа.Видимость = Истина;
	
	НовыйЭлемент = Форма.Элементы.Добавить("НадписьПрекращениеПоддержкиПрямогоОбмена", Тип("ДекорацияФормы"), Группа);
	НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись;
	НовыйЭлемент.РастягиватьПоГоризонтали = Истина;
	НовыйЭлемент.АвтоМаксимальнаяВысота = Истина;
	НовыйЭлемент.АвтоМаксимальнаяШирина = Ложь;
	НовыйЭлемент.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(НСтр("ru='Прекращена поддержка прямого обмена с контрагентом (через каталог, Email, FTP). 
	|Для продолжения обмена с контрагентами необходимо использовать один из следующих вариантов:
	|• Обмен через <a href = ""ПерейтиНаСайтЭДО"">оператора ЭДО</a>.
	|• Обмен через сервис <a href = ""ПерейтиНаСайтБизнесСеть"">1С:Бизнес-сеть</a>'"));
	
	НовыйЭлемент.УстановитьДействие("ОбработкаНавигационнойСсылки","Подключаемый_ОбработкаНавигационнойСсылки");	
	
КонецПроцедуры

Процедура СоздатьЭлементыОтображенияПредупрежденияОбменаСКонтрагентом(Форма, ГруппаПредупреждений, ИмяГруппы)	
	
	Если Форма.Элементы.Найти(ИмяГруппы) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Группа = Форма.Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), ГруппаПредупреждений);
	Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	Группа.ОтображатьЗаголовок = Ложь;
	Группа.ЦветФона = Новый Цвет(255, 240, 240);
	Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	Группа.Объединенная = Истина;
	Группа.РастягиватьПоГоризонтали = Истина;

	Группа.Видимость = Истина;
	
	НовыйЭлемент = Форма.Элементы.Добавить("НадписьПредупрежденияОбменаСКонтрагентом", Тип("ДекорацияФормы"), Группа);
	НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись;
	НовыйЭлемент.РастягиватьПоГоризонтали = Истина;
	НовыйЭлемент.АвтоМаксимальнаяВысота = Истина;
	НовыйЭлемент.АвтоМаксимальнаяШирина = Ложь;
	НовыйЭлемент.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(НСтр("ru='По данному документу есть предупреждения. Нажмите <a href = ""ПоказатьПредупреждения"">посмотреть</a> чтобы ознакомиться с ними.'"));

	НовыйЭлемент.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ОбработкаНавигационнойСсылки");	
	
КонецПроцедуры

Процедура СоздатьЭлементыОтображенияПредупрежденияОНеактуальномЭлектронномДокументе(Форма, ГруппаПредупреждений, ИмяГруппы)	
	
	Если Форма.Элементы.Найти(ИмяГруппы) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Группа = Форма.Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), ГруппаПредупреждений);
	Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	Группа.ОтображатьЗаголовок = Ложь;
	Группа.ЦветФона = Новый Цвет(255, 250, 217);
	Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	Группа.Объединенная = Истина;
	Группа.РастягиватьПоГоризонтали = Истина;

	Группа.Видимость = Истина;
	
	НовыйЭлемент = Форма.Элементы.Добавить("НадписьПредупрежденияОНеактуальномЭлектронномДокументе", Тип("ДекорацияФормы"), Группа);
	НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись;
	НовыйЭлемент.РастягиватьПоГоризонтали = Истина;
	НовыйЭлемент.АвтоМаксимальнаяВысота = Истина;
	НовыйЭлемент.АвтоМаксимальнаяШирина = Ложь;
	НовыйЭлемент.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(НСтр("ru='Электронный документ не является актуальным для указанных объектов учета. <a href = ""СделатьАктуальнымЭлектронныйДокумент"">Сделать актуальным</a>.'"));

	НовыйЭлемент.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ОбработкаНавигационнойСсылки");	
	
КонецПроцедуры

#КонецОбласти

#Область Переформирование

Функция ПараметрыПереформированияДокумента(Сообщение) Экспорт
	
	ПараметрыДействийПоЭДО = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	ПараметрыДействийПоЭДО.ОбъектыДействий.Сообщения.Добавить(Сообщение);
	
	Параметры = Новый Структура;
	Параметры.Вставить("Отказ", Ложь);
	Параметры.Вставить("ПричинаОтказа", "");
	Параметры.Вставить("ТребуетсяФормированиеДокумента", Ложь);
	Параметры.Вставить("ТекстВопроса", "");
	Параметры.Вставить("ПараметрыДействийПоЭДО", ПараметрыДействийПоЭДО);
	
	СвойстваДокумента = ЭлектронныеДокументыЭДО.СвойстваСообщения(Сообщение);
		
	Параметры.Вставить("ТипЭлементаРегламента", СвойстваДокумента.ТипЭлементаРегламента);
	Параметры.Вставить("ВидСообщения", СвойстваДокумента.ВидСообщения);
	Параметры.Вставить("ЭлектронныйДокумент", СвойстваДокумента.ЭлектронныйДокумент);
	
	МодульОбменСГИСЭПД = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");	
	КонецЕсли;
	
	Если СвойстваДокумента.Направление = Перечисления.НаправленияЭДО.Входящий Тогда
		Параметры.Отказ = Истина;
		Параметры.ПричинаОтказа = НСтр("ru = 'Входящий документ не может быть переформирован'");	
	ИначеЕсли СвойстваДокумента.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя 
		Или (МодульОбменСГИСЭПД <> Неопределено 
			И МодульОбменСГИСЭПД.ЭтоТитулОтправителя(СвойстваДокумента.ТипЭлементаРегламента)) Тогда
		ЗаполнитьПараметрыПереформированияОсновногоДокумента(Параметры, СвойстваДокумента);
	Иначе
		ЗаполнитьПараметрыПереформированияСлужебногоДокумента(Параметры, СвойстваДокумента);
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

Процедура ЗаполнитьПараметрыПереформированияОсновногоДокумента(Параметры, СвойстваДокумента)
	
	Если Не ЭлектронныеДокументыЭДО.СообщениеОтправлено(СвойстваДокумента.Статус) Тогда
		
		ЭлектронныеДокументыЭДО.ДобавитьДействие(Параметры.ПараметрыДействийПоЭДО.НаборДействий,
			Перечисления.ДействияПоЭДО.ЗакрытьПринудительно);
		
		Параметры.ТребуетсяФормированиеДокумента = Истина;
		
		Подписи = ЭлектронныеДокументыЭДО.УстановленныеПодписи(СвойстваДокумента.Ссылка);
		
		Если ЗначениеЗаполнено(Подписи) Тогда
			Параметры.ТекстВопроса = НСтр("ru = 'После переформирования документ нужно будет заново подписать. Продолжить?'");
		Иначе
			Параметры.ТекстВопроса = НСтр("ru = 'Документ будет переформирован. Продолжить?'");
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	СостояниеЭДО = ЭлектронныеДокументыЭДО.СостояниеДокумента(СвойстваДокумента.ЭлектронныйДокумент);
	
	Если СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяУточнение Тогда
		Параметры.ТекстВопроса = НСтр("ru = 'Документ будет переформирован. Продолжить?'");
		
		ЭлектронныеДокументыЭДО.ДобавитьДействие(Параметры.ПараметрыДействийПоЭДО.НаборДействий,
			Перечисления.ДействияПоЭДО.СформироватьИсправление);
		Возврат;
	КонецЕсли;
	
	Если СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеАннулирования
		ИЛИ СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.Аннулирован Тогда
		
		Параметры.ТекстВопроса = НСтр("ru = 'Документ будет переформирован. Продолжить?'");
		
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодтверждениеАннулирования Тогда
		
		Параметры.ТекстВопроса = НСтр("ru = 'Текущая версия документа будет аннулирована. Продолжить?'");
		ЭлектронныеДокументыЭДО.ДобавитьДействие(Параметры.ПараметрыДействийПоЭДО.НаборДействий,
			Перечисления.ДействияПоЭДО.ПринятьАннулирование);
		
	ИначеЕсли ЭлектронныеДокументыЭДО.ЕстьОтклонениеАннулирования(СвойстваДокумента.ЭлектронныйДокумент) Тогда
		
		Параметры.ТекстВопроса = НСтр("ru = 'Запрос аннулирования текущей версии был ЗакрытСОтклонением контрагентом.
			|В случае формирования новой версии легитимность документа может быть не подтверждена. Продолжить?'");
		ЭлектронныеДокументыЭДО.ДобавитьДействие(Параметры.ПараметрыДействийПоЭДО.НаборДействий,
			Перечисления.ДействияПоЭДО.ЗакрытьПринудительно);
		
	Иначе
		
		Параметры.ТекстВопроса = НСтр("ru = 'Документ уже отправлен контрагенту. 
			|Контрагенту будет предложено аннулировать текущую версию. Продолжить?'");
		ЭлектронныеДокументыЭДО.ДобавитьДействие(Параметры.ПараметрыДействийПоЭДО.НаборДействий,
			Перечисления.ДействияПоЭДО.Аннулировать);
				
		ДополнительныеПараметрыДействия = ИнтерфейсДокументовЭДОКлиентСервер.НовыеДополнительныеПараметрыДействия();
		ДополнительныеПараметрыДействия.Комментарий = НСтр("ru = 'Переформирование документа'");	
			
		Параметры.ПараметрыДействийПоЭДО.ДополнительныеПараметрыДействий.Вставить(
			Перечисления.ДействияПоЭДО.Аннулировать, ДополнительныеПараметрыДействия);
	
	КонецЕсли;
	
	Параметры.ТребуетсяФормированиеДокумента = Истина;
		
КонецПроцедуры

Процедура ЗаполнитьПараметрыПереформированияСлужебногоДокумента(Параметры, СвойстваДокумента)
	
	Если ЭлектронныеДокументыЭДО.СообщениеОтправлено(СвойстваДокумента.Статус) Тогда
		Параметры.Отказ = Истина;
		Параметры.ПричинаОтказа = НСтр("ru = 'Переформирование служебного документа доступно до момента отправки'");
		Возврат;
	КонецЕсли;
	
	ЭлектронныеДокументыЭДО.ДобавитьДействие(Параметры.ПараметрыДействийПоЭДО.НаборДействий,
		Перечисления.ДействияПоЭДО.Переформировать);
	
	Подписи = ЭлектронныеДокументыЭДО.УстановленныеПодписи(СвойстваДокумента.Ссылка);
	
	Если ЗначениеЗаполнено(Подписи) Тогда
		Параметры.ТекстВопроса = НСтр("ru = 'После переформирования документ нужно будет заново подписать. Продолжить?'");
	Иначе
		Параметры.ТекстВопроса = НСтр("ru = 'Документ будет переформирован. Продолжить?'");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПереопределениеМеханизмаПечатиБСП

Процедура ДополнитьЭлементамиВнешнегоЭДО(Форма, Отказ, СтандартнаяОбработка)
	
	ИдентификаторПечатнойФормы = Форма.НастройкиПечатныхФорм[0].ИмяМакета;
	Если ИнтеграцияЭДО.ПечатнаяФормаЗапрещенаДляФормированияДокумента(ИдентификаторПечатнойФормы) Тогда
		Возврат;
	КонецЕсли;
	
	ОтправитьНаПодписьКоманда = Форма.Команды.Добавить("ЭДОСформироватьПроизвольныйДокумент");
	ОтправитьНаПодписьКоманда.Заголовок = НСтр("ru = 'Отправить по ЭДО'");
	ОтправитьНаПодписьКоманда.Действие  = "Подключаемый_ВыполнитьКоманду";	
	
	ОтправитьЧерезЭДОКнопкаФормы = Форма.Элементы.Добавить(
	"СформироватьПроизвольныйДокументКнопкаФормы", 
	Тип("КнопкаФормы"),
	Форма.Элементы.ГруппаСохранитьОтправить);
	
	ОтправитьЧерезЭДОКнопкаФормы.ИмяКоманды = "ЭДОСформироватьПроизвольныйДокумент";
	ОтправитьЧерезЭДОКнопкаФормы.Вид = ВидКнопкиФормы.ОбычнаяКнопка; 
	ОтправитьЧерезЭДОКнопкаФормы.Картинка = БиблиотекаКартинок.ЭмблемаСервиса1СЭДО;
	ОтправитьЧерезЭДОКнопкаФормы.Отображение = ОтображениеКнопки.КартинкаИТекст;
	ОтправитьЧерезЭДОКнопкаФормы.Видимость = Истина;

КонецПроцедуры

Процедура ДополнитьЭлементамиВнутреннегоЭДО(Форма, Отказ, СтандартнаяОбработка)
	
	ГруппаЭлементовВнутреннегоЭДО = Форма.Элементы.Вставить(
		"ГруппаЭлементовВнутреннегоЭДО", 
		Тип("ГруппаФормы"), Форма.Элементы.ГруппаКоманднаяПанель, 
		Форма.Элементы.КоманднаяПанельЛеваяЧасть);
		
	ГруппаЭлементовВнутреннегоЭДО.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаЭлементовВнутреннегоЭДО.РастягиватьПоВертикали = Ложь;
	ГруппаЭлементовВнутреннегоЭДО.РастягиватьПоГоризонтали = Ложь;
	ГруппаЭлементовВнутреннегоЭДО.ОтображатьЗаголовок = Ложь;
	ГруппаЭлементовВнутреннегоЭДО.Отображение = ОтображениеОбычнойГруппы.Нет;
	
	ЭмблемаСервиса1СЭДОКартинкаПодписание = Форма.Элементы.Добавить(
	"ЭмблемаСервиса1СЭДОПодписаниеКартинка", 
	Тип("ДекорацияФормы"),
	ГруппаЭлементовВнутреннегоЭДО);
	
	ЭмблемаСервиса1СЭДОКартинкаПодписание.Вид = ВидДекорацииФормы.Картинка;
	ЭмблемаСервиса1СЭДОКартинкаПодписание.Картинка = БиблиотекаКартинок.ЭмблемаСервиса1СЭДО;
	ЭмблемаСервиса1СЭДОКартинкаПодписание.Видимость = Ложь;
	
	ПредставлениеПрогрессаПодписанияДекорация = Форма.Элементы.Добавить(
	"ПредставлениеПрогрессаПодписанияДекорация", 
	Тип("ДекорацияФормы"), ГруппаЭлементовВнутреннегоЭДО);
	
	ПредставлениеПрогрессаПодписанияДекорация.Вид = ВидДекорацииФормы.Надпись;
	ПредставлениеПрогрессаПодписанияДекорация.РастягиватьПоГоризонтали = Истина;
	ПредставлениеПрогрессаПодписанияДекорация.АвтоМаксимальнаяШирина = Ложь;
	ПредставлениеПрогрессаПодписанияДекорация.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ОбработкаНавигационнойСсылки");
	ПредставлениеПрогрессаПодписанияДекорация.Видимость = Ложь;
	
	ОтправитьНаПодписьКоманда = Форма.Команды.Добавить("ВнутреннийЭДООтправитьНаПодпись");
	ОтправитьНаПодписьКоманда.Заголовок = НСтр("ru = 'Отправить на подпись'");
	ОтправитьНаПодписьКоманда.Действие  = "Подключаемый_ВыполнитьКоманду";	
	
	ОтправитьНаПодписьКнопкаФормы = Форма.Элементы.Добавить(
	"ОтправитьНаПодписьКнопкаФормы", 
	Тип("КнопкаФормы"),
	ГруппаЭлементовВнутреннегоЭДО);
	
	ГруппаРекламыВнутреннегоЭДО = Форма.Элементы.Вставить(
		"ГруппаРекламыВнутреннегоЭДО", 
		Тип("ГруппаФормы"), Форма.Элементы.ГруппаКоманднаяПанель, 
		Форма.Элементы.КоманднаяПанельЛеваяЧасть);
		
	Форма.Элементы.ДополнительнаяИнформация.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ОбработкаНавигационнойСсылки");

	ОтправитьНаПодписьКнопкаФормы.ИмяКоманды = "ВнутреннийЭДООтправитьНаПодпись";
	ОтправитьНаПодписьКнопкаФормы.Вид = ВидКнопкиФормы.ОбычнаяКнопка; 
	ОтправитьНаПодписьКнопкаФормы.Картинка = БиблиотекаКартинок.ЭмблемаСервиса1СЭДО;
	ОтправитьНаПодписьКнопкаФормы.Отображение = ОтображениеКнопки.КартинкаИТекст;
	ОтправитьНаПодписьКнопкаФормы.ЦветФона = ЦветаСтиля.ЦветВажного;
	ОтправитьНаПодписьКнопкаФормы.Видимость = Ложь;
	
	ИнтерфейсДокументовЭДОКлиентСервер.ОбновитьФормуПечатиДокументовБСП(Форма);

КонецПроцедуры

#КонецОбласти 

#Область Настройки

Функция НастройкиОсновногоВидаВнутреннегоДокумента(Организация, ОбъектУчета) Экспорт
	
	Запросы = Новый Массив;
	
	ИдентификаторОбъектаУчета = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектУчета.Метаданные().ПолноеИмя());
	
	ОтборНастроекВнутреннегоЭДО = НастройкиЭДО.НовыйОтборНастроекВнутреннегоЭДО();
	ОтборНастроекВнутреннегоЭДО.Организация = "&Организация";
	ОтборНастроекВнутреннегоЭДО.ПроизвольноеУсловие = "ВидВнутреннегоДокумента.ИдентификаторОбъектаУчета = &ИдентификаторОбъектаУчета";
	Организация = Организация;		
	
	ЗапросНастроек = НастройкиЭДО.ЗапросНастроекВнутреннегоЭДО("НастройкиВнутреннегоЭДО", ОтборНастроекВнутреннегоЭДО);
	
	Запросы.Добавить(ЗапросНастроек);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	НастройкиВнутреннегоЭДО.Организация КАК Организация,
	|	НастройкиВнутреннегоЭДО.ВидВнутреннегоДокумента КАК ВидДокумента,
	|	НастройкиВнутреннегоЭДО.Формировать КАК Формировать,
	|	НастройкиВнутреннегоЭДО.ВидПодписи КАК ВидПодписи,
	|	НастройкиВнутреннегоЭДО.МаршрутПодписания КАК МаршрутПодписания,
	|	НастройкиВнутреннегоЭДО.ЭтоОсновнойВидДокумента КАК ЭтоОсновнойВидДокумента
	|ИЗ
	|	НастройкиВнутреннегоЭДО
	| ГДЕ НастройкиВнутреннегоЭДО.ЭтоОсновнойВидДокумента";
	
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	ИтоговыйЗапрос.УстановитьПараметр("Организация", Организация);
	ИтоговыйЗапрос.УстановитьПараметр("ИдентификаторОбъектаУчета", ИдентификаторОбъектаУчета);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = ИтоговыйЗапрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);

	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(РезультатЗапроса.Выгрузить())[0];
	КонецЕсли;
	
КонецФункции

Функция НастройкиВнутреннегоЭДООбъектаУчета(Организация, ОбъектУчета, ТолькоРазрешенные = Ложь)
	
	Запросы = Новый Массив;
	
	ИдентификаторОбъектаУчета = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектУчета.Метаданные().ПолноеИмя());
	
	ОтборНастроекВнутреннегоЭДО = НастройкиЭДО.НовыйОтборНастроекВнутреннегоЭДО();
	ОтборНастроекВнутреннегоЭДО.Организация = "&Организация";
	ОтборНастроекВнутреннегоЭДО.ПроизвольноеУсловие = "ВидВнутреннегоДокумента.ИдентификаторОбъектаУчета = &ИдентификаторОбъектаУчета";	
	
	ЗапросНастроек = НастройкиЭДО.ЗапросНастроекВнутреннегоЭДО("НастройкиВнутреннегоЭДО", ОтборНастроекВнутреннегоЭДО);
	
	Запросы.Добавить(ЗапросНастроек);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	НастройкиВнутреннегоЭДО.Организация КАК Организация,
	|	НастройкиВнутреннегоЭДО.ВидВнутреннегоДокумента КАК ВидВнутреннегоДокумента,
	|	НастройкиВнутреннегоЭДО.Формировать КАК Формировать,
	|	НастройкиВнутреннегоЭДО.ВидПодписи КАК ВидПодписи,
	|	НастройкиВнутреннегоЭДО.МаршрутПодписания КАК МаршрутПодписания,
	|	НастройкиВнутреннегоЭДО.ЭтоОсновнойВидДокумента КАК ЭтоОсновнойВидДокумента
	|ИЗ
	|	НастройкиВнутреннегоЭДО";
	
	Если ТолькоРазрешенные Тогда
		Запрос.Текст = Запрос.Текст + " ГДЕ НастройкиВнутреннегоЭДО.Формировать";
	КонецЕсли;
	
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	ИтоговыйЗапрос.УстановитьПараметр("Организация", Организация);
	ИтоговыйЗапрос.УстановитьПараметр("ИдентификаторОбъектаУчета", ИдентификаторОбъектаУчета);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = ИтоговыйЗапрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);

	Возврат РезультатЗапроса.Выгрузить()
	
КонецФункции

#КонецОбласти 

#Область ПроизвольныйДокумент

Функция РеквизитыДокументаПоФайлу(ОписаниеФайла) Экспорт
	
	СодержаниеСообщения = ЭлектронныеДокументыЭДО.СодержаниеСообщения(ОписаниеФайла);
	Если Не ЗначениеЗаполнено(СодержаниеСообщения) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("Номер", "");
	Реквизиты.Вставить("Дата", '00010101');
	Реквизиты.Вставить("Сумма", 0);
	Реквизиты.Вставить("ВидДокумента", Справочники.ВидыДокументовЭДО.ПустаяСсылка());
	
	Реквизиты.Номер = СодержаниеСообщения.НомерДокумента;
	Реквизиты.Дата = СодержаниеСообщения.ДатаДокумента;
	Реквизиты.Сумма = СодержаниеСообщения.СуммаДокумента;
	Если ЗначениеЗаполнено(СодержаниеСообщения.ПрикладнойТипДокумента) Тогда
		Реквизиты.ВидДокумента = ЭлектронныеДокументыЭДО.ВидДокументаПоПрикладномуТипу(
			СодержаниеСообщения.ПрикладнойТипДокумента);
	Иначе
		Реквизиты.ВидДокумента = ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(СодержаниеСообщения.ТипДокумента);
	КонецЕсли;
	
	Возврат Реквизиты;
	
КонецФункции

#КонецОбласти

#Область ФормаСтатусовЭлектронныхДокументов

// Возвращает параметры объекта учета для запроса статусов электронных документов.
// 
// Параметры:
//  ОписаниеОбъектаУчета - см. ИнтеграцияЭДО.ОписаниеОбъектаУчета
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Параметры объекта учета для запроса статусов:
//  * ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  * Организация - ОпределяемыйТип.Организация
//  * Контрагент - ОпределяемыйТип.УчастникЭДО
//  * Договор - ОпределяемыйТип.ДоговорСКонтрагентомЭДО
//  * Направление - ПеречислениеСсылка.НаправленияЭДО
//  * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
//  * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  * ИдентификаторОбъекта - СправочникСсылка.ИдентификаторыОбъектовМетаданных
Функция ПараметрыОбъектаУчетаДляЗапросаСтатусов(ОписаниеОбъектаУчета)
	
	ОписаниеТипаОбъектаУчета = Метаданные.ОпределяемыеТипы.ОснованияЭлектронныхДокументовЭДО.Тип;
	ОписаниеТипаОрганизация  = Метаданные.ОпределяемыеТипы.Организация.Тип;
	ОписаниеТипаКонтрагент = Метаданные.ОпределяемыеТипы.УчастникЭДО.Тип;
	ОписаниеТипаДоговорКонтрагента = Метаданные.ОпределяемыеТипы.ДоговорСКонтрагентомЭДО.Тип;
	
	ТаблицаПараметров = Новый ТаблицаЗначений;
	ТаблицаПараметров.Колонки.Добавить("ОбъектУчета", ОписаниеТипаОбъектаУчета);
	ТаблицаПараметров.Колонки.Добавить("Организация", ОписаниеТипаОрганизация);
	ТаблицаПараметров.Колонки.Добавить("Направление", Новый ОписаниеТипов("ПеречислениеСсылка.НаправленияЭДО"));
	ТаблицаПараметров.Колонки.Добавить("ТипДокумента", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыДокументовЭДО"));
	ТаблицаПараметров.Колонки.Добавить("ВидДокумента", Новый ОписаниеТипов("СправочникСсылка.ВидыДокументовЭДО"));
	ТаблицаПараметров.Колонки.Добавить("Контрагент", ОписаниеТипаКонтрагент);
	ТаблицаПараметров.Колонки.Добавить("Договор", ОписаниеТипаДоговорКонтрагента);
	ТаблицаПараметров.Колонки.Добавить("ИдентификаторОбъекта",
		Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыОбъектовМетаданных"));
	
	ИдентификаторыОбъектовУчета = Новый Соответствие;
	Для каждого ОписаниеЭлектронногоДокументаОбъектаУчета Из ОписаниеОбъектаУчета Цикл
		
		СтрокаТаблицыПараметров = ТаблицаПараметров.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыПараметров, ОписаниеЭлектронногоДокументаОбъектаУчета);
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицыПараметров.ВидДокумента) Тогда
			Если ОписаниеЭлектронногоДокументаОбъектаУчета.ТипДокумента = Перечисления.ТипыДокументовЭДО.Прикладной Тогда
				ВидДокумента = ЭлектронныеДокументыЭДО.ВидДокументаПоПрикладномуТипу(
					ОписаниеЭлектронногоДокументаОбъектаУчета.ПрикладнойТипДокумента);
			ИначеЕсли ОписаниеЭлектронногоДокументаОбъектаУчета.ТипДокумента = Перечисления.ТипыДокументовЭДО.Внутренний Тогда
				ВидДокумента = Справочники.ВидыДокументовЭДО.ПустаяСсылка();
			Иначе
				ВидДокумента = ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(
					ОписаниеЭлектронногоДокументаОбъектаУчета.ТипДокумента);
			КонецЕсли;
			СтрокаТаблицыПараметров.ВидДокумента = ВидДокумента;
		КонецЕсли;
		
		// При получении данных о статусе электронного документа для договора, некорректно анализировать настройки
		//     в разрезе этого же договора. Значения договора в электронном документе и объекта учета будут различаться.
		Если СтрокаТаблицыПараметров.ОбъектУчета = СтрокаТаблицыПараметров.Договор Тогда
			СтрокаТаблицыПараметров.Договор = Неопределено;
		КонецЕсли;
		
		СтрокаТаблицыПараметров.ИдентификаторОбъекта = ИдентификаторыОбъектовУчета[
			ОписаниеЭлектронногоДокументаОбъектаУчета.ОбъектУчета];
		Если Не ЗначениеЗаполнено(СтрокаТаблицыПараметров.ИдентификаторОбъекта) Тогда
			ПолноеИмяОбъекта = ОписаниеЭлектронногоДокументаОбъектаУчета.ОбъектУчета.Метаданные().ПолноеИмя();
			СтрокаТаблицыПараметров.ИдентификаторОбъекта = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяОбъекта);
			ИдентификаторыОбъектовУчета.Вставить(ОписаниеЭлектронногоДокументаОбъектаУчета.ОбъектУчета,
				СтрокаТаблицыПараметров.ИдентификаторОбъекта);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаПараметров;
	
КонецФункции

// Возвращает данные для заполнения статусов электронных документов.
// 
// Параметры:
//  ПараметрыОбъектовУчета - см. ПараметрыОбъектаУчетаДляЗапросаСтатусов
//  УчитыватьВсеАктуальные - Булево
// 
// Возвращаемое значение:
//  Структура:
//  * АктуальныеДокументы - ТаблицаЗначений:
//  ** ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  ** ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  ** ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
//  ** ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  ** Организация - ОпределяемыйТип.Организация
//  ** Контрагент - ОпределяемыйТип.УчастникЭДО
//  ** ДоговорКонтрагента - ОпределяемыйТип.ДоговорСКонтрагентомЭДО
//  ** НаОзнакомлении - Булево
//  ** СпособОбмена - ПеречислениеСсылка.СпособыОбменаЭД
//  ** НомерДокумента - Строка
//  ** ДатаДокумента - Дата
//  ** ИдентификаторОбъекта - СправочникСсылка.ИдентификаторыОбъектовМетаданных
//  ** СостояниеЭДО - ПеречислениеСсылка.СостоянияДокументовЭДО
//  ** СтатусЭД - ПеречислениеСсылка.СтатусыСообщенийЭДО
//  ** ЭтапПодписанияОтсутствует - Булево
//  * РезультатыПоискаНастроек - ТаблицаЗначений:
//  ** ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  ** Организация - ОпределяемыйТип.Организация
//  ** Контрагент - Неопределено,ОпределяемыйТип.УчастникЭДО
//  ** ДоговорКонтрагента - Неопределено,ОпределяемыйТип.ДоговорСКонтрагентомЭДО
//  ** ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  ** ИдентификаторОбъекта - СправочникСсылка.ИдентификаторыОбъектовМетаданных
//  ** ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
//  ** НетНастройки - Булево
Функция ДанныеДляЗаполненияСтатусовЭлектронныхДокументов(ПараметрыОбъектовУчета, УчитыватьВсеАктуальные)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПараметрыОбъектовУчета", ПараметрыОбъектовУчета);
	Запрос.УстановитьПараметр("ПустойВидДокумента", Справочники.ВидыДокументовЭДО.ПустаяСсылка());
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.АвторизованныйПользователь());
	Запрос.УстановитьПараметр("ПустойПользователь", Справочники.Пользователи.ПустаяСсылка());
	ПустойДоговор = ОбменСКонтрагентамиИнтеграция.ВсеПустыеЗначенияДоговораСКонтрагентомЭДО();
	Запрос.УстановитьПараметр("ПустойДоговор", ПустойДоговор);
	Запрос.УстановитьПараметр("УчитыватьВсеАктуальные", УчитыватьВсеАктуальные);
	
	ТитулыОтправителя = Новый Массив;
	ТитулыОтправителя.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
		МодульОбменСГИСЭПД.ЗаполнитьТитулыОтправителя(ТитулыОтправителя);	
	КонецЕсли;
	Запрос.УстановитьПараметр("ТитулыОтправителя", ТитулыОтправителя);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПараметрыОбъектовУчета.ОбъектУчета КАК Ссылка,
		|	ПараметрыОбъектовУчета.Организация КАК Организация,
		|	ПараметрыОбъектовУчета.Направление КАК Направление,
		|	ПараметрыОбъектовУчета.ТипДокумента КАК ТипДокумента,
		|	ПараметрыОбъектовУчета.ВидДокумента КАК ВидДокумента,
		|	ПараметрыОбъектовУчета.Контрагент КАК Контрагент,
		|	ПараметрыОбъектовУчета.Договор КАК ДоговорКонтрагента,
		|	ПараметрыОбъектовУчета.ИдентификаторОбъекта КАК ИдентификаторОбъекта
		|ПОМЕСТИТЬ ПараметрыОбъектовУчета
		|ИЗ
		|	&ПараметрыОбъектовУчета КАК ПараметрыОбъектовУчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОбъектыУчетаДокументовЭДО.ОбъектУчета КАК ОбъектУчета,
		|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент.ВидДокумента КАК ВидДокумента,
		|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент.ВидДокумента.ТипДокумента КАК ТипДокумента,
		|	ПараметрыОбъектовУчета.ИдентификаторОбъекта КАК ИдентификаторОбъекта
		|ПОМЕСТИТЬ АктуальныеДокументы
		|ИЗ
		|	РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПараметрыОбъектовУчета КАК ПараметрыОбъектовУчета
		|		ПО ОбъектыУчетаДокументовЭДО.ОбъектУчета = ПараметрыОбъектовУчета.Ссылка
		|ГДЕ
		|	&УчитыватьВсеАктуальные
		|	И ОбъектыУчетаДокументовЭДО.Актуальный
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ОбъектыУчетаДокументовЭДО.ОбъектУчета КАК ОбъектУчета,
		|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент.ВидДокумента КАК ВидДокумента,
		|	ПараметрыОбъектовУчета.ТипДокумента КАК ТипДокумента,
		|	ПараметрыОбъектовУчета.ИдентификаторОбъекта КАК ИдентификаторОбъекта
		|ИЗ
		|	РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПараметрыОбъектовУчета КАК ПараметрыОбъектовУчета
		|		ПО ОбъектыУчетаДокументовЭДО.ОбъектУчета = ПараметрыОбъектовУчета.Ссылка
		|		И ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент.Организация = ПараметрыОбъектовУчета.Организация
		|		И ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент.ВидДокумента = ПараметрыОбъектовУчета.ВидДокумента
		|		И ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент.Контрагент = ПараметрыОбъектовУчета.Контрагент
		|		И ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент.ДоговорКонтрагента В (ПараметрыОбъектовУчета.ДоговорКонтрагента,
		|			&ПустойДоговор)
		|		И ПараметрыОбъектовУчета.ВидДокумента <> &ПустойВидДокумента
		|ГДЕ
		|	НЕ (&УчитыватьВсеАктуальные)
		|	И ОбъектыУчетаДокументовЭДО.Актуальный
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ОбъектыУчетаДокументовЭДО.ОбъектУчета,
		|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент,
		|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент.ВидДокумента,
		|	ПараметрыОбъектовУчета.ТипДокумента КАК ТипДокумента,
		|	ПараметрыОбъектовУчета.ИдентификаторОбъекта КАК ИдентификаторОбъекта
		|ИЗ
		|	РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПараметрыОбъектовУчета КАК ПараметрыОбъектовУчета
		|		ПО ОбъектыУчетаДокументовЭДО.ОбъектУчета = ПараметрыОбъектовУчета.Ссылка
		|		И ПараметрыОбъектовУчета.ВидДокумента = &ПустойВидДокумента
		|ГДЕ
		|	НЕ (&УчитыватьВсеАктуальные)
		|	И ОбъектыУчетаДокументовЭДО.Актуальный
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	АктуальныеДокументы.ОбъектУчета КАК ОбъектУчета,
		|	АктуальныеДокументы.ВидДокумента КАК ВидДокумента,
		|	АктуальныеДокументы.ТипДокумента КАК ТипДокумента,
		|	АктуальныеДокументы.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	АктуальныеДокументы.ЭлектронныйДокумент.Организация КАК Организация,
		|	АктуальныеДокументы.ЭлектронныйДокумент.Контрагент КАК Контрагент,
		|	АктуальныеДокументы.ЭлектронныйДокумент.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	АктуальныеДокументы.ЭлектронныйДокумент.НаОзнакомлении КАК НаОзнакомлении,
		|	АктуальныеДокументы.ЭлектронныйДокумент.СпособОбмена КАК СпособОбмена,
		|	АктуальныеДокументы.ЭлектронныйДокумент.НомерДокумента КАК НомерДокумента,
		|	АктуальныеДокументы.ЭлектронныйДокумент.ДатаДокумента КАК ДатаДокумента,
		|	АктуальныеДокументы.ЭлектронныйДокумент.ЭтоОблачныйЭДО КАК ЭтоОблачныйЭДО,
		|	АктуальныеДокументы.ИдентификаторОбъекта КАК ИдентификаторОбъекта,
		|	СостоянияЭДО.Состояние КАК СостояниеЭДО,
		|	СообщениеЭДО.Статус КАК СтатусЭД,
		|	СостояниеПодписанияЭД.Объект ЕСТЬ NULL КАК ЭтапПодписанияОтсутствует
		|ИЗ
		|	АктуальныеДокументы КАК АктуальныеДокументы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ПО АктуальныеДокументы.ЭлектронныйДокумент = СообщениеЭДО.ЭлектронныйДокумент
		|		И СообщениеЭДО.ТипЭлементаРегламента В(&ТитулыОтправителя)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеПодписанияЭД КАК СостояниеПодписанияЭД
		|		ПО (СообщениеЭДО.Ссылка = СостояниеПодписанияЭД.Объект)
		|		И (СостояниеПодписанияЭД.Текущий)
		|		И (СостояниеПодписанияЭД.Подписант В (&ТекущийПользователь, &ПустойПользователь))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияЭДО
		|		ПО СостоянияЭДО.ЭлектронныйДокумент = АктуальныеДокументы.ЭлектронныйДокумент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НастройкиВнутреннегоЭДО.ВидВнутреннегоДокумента КАК ВидДокумента,
		|	НастройкиВнутреннегоЭДО.Организация КАК Организация,
		|	НЕОПРЕДЕЛЕНО КАК Контрагент,
		|	НЕОПРЕДЕЛЕНО КАК ДоговорКонтрагента,
		|	ПараметрыОбъектовУчета.Ссылка КАК ОбъектУчета,
		|	ПараметрыОбъектовУчета.ИдентификаторОбъекта КАК ИдентификаторОбъекта,
		|	ПараметрыОбъектовУчета.ТипДокумента КАК ТипДокумента,
		|	ЛОЖЬ КАК НетНастройки
		|ИЗ
		|	РегистрСведений.НастройкиВнутреннегоЭДО КАК НастройкиВнутреннегоЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
		|		ПО НастройкиВнутреннегоЭДО.ВидВнутреннегоДокумента = ВидыДокументовЭДО.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПараметрыОбъектовУчета КАК ПараметрыОбъектовУчета
		|		ПО ПараметрыОбъектовУчета.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыДокументовЭДО.Внутренний)
		|		И НастройкиВнутреннегоЭДО.Организация = ПараметрыОбъектовУчета.Организация
		|		И НастройкиВнутреннегоЭДО.ВидВнутреннегоДокумента = ПараметрыОбъектовУчета.ВидДокумента
		|		И (ПараметрыОбъектовУчета.ВидДокумента <> &ПустойВидДокумента)
		|		И (ВидыДокументовЭДО.ИдентификаторОбъектаУчета = ПараметрыОбъектовУчета.ИдентификаторОбъекта)
		|ГДЕ
		|	НастройкиВнутреннегоЭДО.Формировать
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НастройкиВнутреннегоЭДО.ВидВнутреннегоДокумента,
		|	НастройкиВнутреннегоЭДО.Организация,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	ПараметрыОбъектовУчета.Ссылка КАК ОбъектУчета,
		|	ПараметрыОбъектовУчета.ИдентификаторОбъекта КАК ИдентификаторОбъекта,
		|	ПараметрыОбъектовУчета.ТипДокумента КАК ТипДокумента,
		|	ЛОЖЬ
		|ИЗ
		|	РегистрСведений.НастройкиВнутреннегоЭДО КАК НастройкиВнутреннегоЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
		|		ПО НастройкиВнутреннегоЭДО.ВидВнутреннегоДокумента = ВидыДокументовЭДО.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПараметрыОбъектовУчета КАК ПараметрыОбъектовУчета
		|		ПО ПараметрыОбъектовУчета.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыДокументовЭДО.Внутренний)
		|		И НастройкиВнутреннегоЭДО.Организация = ПараметрыОбъектовУчета.Организация
		|		И (ПараметрыОбъектовУчета.ВидДокумента = &ПустойВидДокумента)
		|		И (ВидыДокументовЭДО.ИдентификаторОбъектаУчета = ПараметрыОбъектовУчета.ИдентификаторОбъекта)
		|ГДЕ
		|	НастройкиВнутреннегоЭДО.Формировать
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПараметрыОбъектовУчета.ВидДокумента,
		|	ПараметрыОбъектовУчета.Организация,
		|	ПараметрыОбъектовУчета.Контрагент,
		|	ЕСТЬNULL(НастройкиОтправкиДокументовПоВидам.Договор, ПараметрыОбъектовУчета.ДоговорКонтрагента),
		|	ПараметрыОбъектовУчета.Ссылка,
		|	ПараметрыОбъектовУчета.ИдентификаторОбъекта,
		|	ПараметрыОбъектовУчета.ТипДокумента КАК ТипДокумента,
		|	НастройкиОтправкиДокументовПоВидам.ВидДокумента ЕСТЬ NULL
		|	И НастройкиОтправкиДокументовПоВидамПустойДоговор.ВидДокумента ЕСТЬ NULL
		|ИЗ
		|	ПараметрыОбъектовУчета КАК ПараметрыОбъектовУчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам КАК
		|			НастройкиОтправкиДокументовПоВидам
		|		ПО ПараметрыОбъектовУчета.Организация = НастройкиОтправкиДокументовПоВидам.Отправитель
		|		И ПараметрыОбъектовУчета.ВидДокумента = НастройкиОтправкиДокументовПоВидам.ВидДокумента
		|		И ПараметрыОбъектовУчета.Контрагент = НастройкиОтправкиДокументовПоВидам.Получатель
		|		И НастройкиОтправкиДокументовПоВидам.Договор = ПараметрыОбъектовУчета.ДоговорКонтрагента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам КАК
		|			НастройкиОтправкиДокументовПоВидамПустойДоговор
		|		ПО ПараметрыОбъектовУчета.Организация = НастройкиОтправкиДокументовПоВидамПустойДоговор.Отправитель
		|		И ПараметрыОбъектовУчета.ВидДокумента = НастройкиОтправкиДокументовПоВидамПустойДоговор.ВидДокумента
		|		И ПараметрыОбъектовУчета.Контрагент = НастройкиОтправкиДокументовПоВидамПустойДоговор.Получатель
		|		И НастройкиОтправкиДокументовПоВидамПустойДоговор.Договор В (&ПустойДоговор)
		|ГДЕ
		|	ПараметрыОбъектовУчета.Направление <> ЗНАЧЕНИЕ(Перечисление.НаправленияЭДО.Входящий)
		|	И ПараметрыОбъектовУчета.ТипДокумента <> ЗНАЧЕНИЕ(Перечисление.ТипыДокументовЭДО.Внутренний)
		|	И ПараметрыОбъектовУчета.ВидДокумента <> &ПустойВидДокумента";
	
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	
	ДанныеДляЗаполнения = Новый Структура;
	ДанныеДляЗаполнения.Вставить("АктуальныеДокументы", РезультатыЗапросов[2].Выгрузить());
	ДанныеДляЗаполнения.Вставить("РезультатыПоискаНастроек", РезультатыЗапросов[3].Выгрузить());
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции

// Возвращает представление не сформированного документа по виду.
// 
// Параметры:
//  ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  Номер - Строка
//  Дата - Дата
// 
// Возвращаемое значение:
//  Строка - Представление не сформированного документа по виду.
Функция ПредставлениеНеСформированногоДокументаПоВиду(ВидДокумента, Номер, Дата)

	ЧастиПредставления = Новый Массив;
	ЧастиПредставления.Добавить(Строка(ВидДокумента));
	
	Если ЗначениеЗаполнено(Номер) Тогда
		ЧастиПредставления.Добавить("№");
		ЧастиПредставления.Добавить(ИнтеграцияБСПБЭД.ПредставлениеНомераОбъектаУчета(Номер));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Дата) Тогда
		ЧастиПредставления.Добавить(НСтр("ru = 'от'"));
		ЧастиПредставления.Добавить(Формат(Дата, "ДЛФ=D"));
	КонецЕсли;
	
	Возврат СтрСоединить(ЧастиПредставления, " ");
	
КонецФункции

#КонецОбласти

#Область ОтправитьИПолучить

// Возвращаемое значение:
//  См. ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
Функция ПараметрыВыполненияДействийПриОтправкеПолученииДокументовЭДО()
	
	ПараметрыВыполнения = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(ПараметрыВыполнения.НаборДействий,
		Перечисления.ДействияПоЭДО.ЗагрузитьПриглашения);
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(ПараметрыВыполнения.НаборДействий,
		Перечисления.ДействияПоЭДО.Отправить);
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(ПараметрыВыполнения.НаборДействий,
		Перечисления.ДействияПоЭДО.Загрузить);
	
	ОтборУчетныхЗаписей = УчетныеЗаписиЭДО.НовыйОтборУчетныхЗаписей();
	
	ИспользоватьИнтеграциюОблачногоЭДО = ИспользоватьИнтеграциюОблачногоЭДО();
	ИспользоватьИнтеграциюВстроенногоЭДО = ИспользоватьИнтеграциюВстроенногоЭДО();
	
	Если ИспользоватьИнтеграциюВстроенногоЭДО
		И Не ИспользоватьИнтеграциюОблачногоЭДО Тогда
		ОтборУчетныхЗаписей.ЭтоОблачныйЭДО = Ложь;
	ИначеЕсли Не ИспользоватьИнтеграциюВстроенногоЭДО
		И ИспользоватьИнтеграциюОблачногоЭДО Тогда
		ОтборУчетныхЗаписей.ЭтоОблачныйЭДО = Истина;
	КонецЕсли;
	
	ПараметрыВыполнения.ОбъектыДействий.ИдентификаторыОрганизаций =
		ИдентификаторыУчетныхЗаписейДляОтправкиПолученияДокументовЭДО(ОтборУчетныхЗаписей);
	
	Возврат ПараметрыВыполнения;
	
КонецФункции

#КонецОбласти

#Область ДействияПоИнтеграциямЭДО

// Возвращаемое значение:
//  Булево - Использовать интеграцию с клиентом ЭДО
Функция ИспользоватьИнтеграциюОблачногоЭДО() Экспорт
	Возврат ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами.ИнтеграцияОблачногоЭДО")
		И ПолучитьФункциональнуюОпцию("ИспользоватьИнтеграциюОблачногоЭДО");
КонецФункции

// Возвращаемое значение:
//  Булево
Функция ИспользоватьИнтеграциюВстроенногоЭДО()
	Возврат ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами");
КонецФункции

// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - Строка - идентификатор интеграции ЭДО.
//  * Значение - ОбщийМодуль
Функция МенеджерыДействийЭДО()
	
	МенеджерыДействийЭДО = Новый Соответствие; // см. МенеджерыДействийЭДО
	
	ПриОпределенииМенеджеровДействийЭДО(МенеджерыДействийЭДО);
	
	Возврат МенеджерыДействийЭДО;
	
КонецФункции

// Заполнение обработчиков перед выполнением операции интеграцииЭДО.
// Обработчик должен поддерживать методы:
// * ПриОпределенииОбработчиковИнтеграцийЭДО
// * ВыполнитьДействияПоЭДО
// * РезультатДействийПоЭДОДляКлиента
// * РезультатОбработкиДействийПоЭДОДляСервера
// * ПродолжитьВыполнениеДействийПоЭДОПослеОбработкиРезультатов
//
// Параметры:
//  МенеджерыДействийЭДО - см. МенеджерыДействийЭДО
Процедура ПриОпределенииМенеджеровДействийЭДО(МенеджерыДействийЭДО)
	
	ЭлектронныеДокументыЭДО.ПриОпределенииМенеджеровДействийЭДО(МенеджерыДействийЭДО);
	
	Если ЕстьИнтеграцияОблачногоЭДО() Тогда
		ОбщийМодульИнтеграцияОблачногоЭДО = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияОблачногоЭДО");
		ОбщийМодульИнтеграцияОблачногоЭДО.ПриОпределенииМенеджеровДействийЭДО(МенеджерыДействийЭДО);
	КонецЕсли;
	
КонецПроцедуры

// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - Строка - идентификатор интеграции ЭДО.
//  * Значение - Структура - результат действий по интеграции ЭДО.
Функция НовыеРезультатыВыполненияДействийПоИнтеграциямЭДО() Экспорт
	Возврат Новый Соответствие;
КонецФункции

// Возвращает описание длительной операции выполнения действий по ЭДО.
// 
// Параметры:
//   ПараметрыВыполненияДействий - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//
// Возвращаемое значение:
//   См. НовыеРезультатыВыполненияДействийПоИнтеграциямЭДО
Функция ВыполнитьДействияПоИнтеграциямЭДО(ПараметрыВыполненияДействий) Экспорт
	
	РезультатыПоИнтеграциямЭДО = НовыеРезультатыВыполненияДействийПоИнтеграциямЭДО();
	
	МенеджерыДействийЭДО = МенеджерыДействийЭДО();
	
	Для Каждого МенеджерДействийЭДО Из МенеджерыДействийЭДО Цикл
		РезультатДействийЭДО = МенеджерДействийЭДО.Значение.ВыполнитьДействияЭДО(ПараметрыВыполненияДействий);
		РезультатыПоИнтеграциямЭДО.Вставить(МенеджерДействийЭДО.Ключ, РезультатДействийЭДО);
	КонецЦикла;
	
	Возврат РезультатыПоИнтеграциямЭДО;
	
КонецФункции

// Параметры:
//  РезультатыПоИнтеграциямЭДО - см. ВыполнитьДействияПоИнтеграциямЭДО
// 
// Возвращаемое значение:
//  См. НовыеРезультатыВыполненияДействийПоИнтеграциямЭДО
Функция РезультатыВыполненияДействийПоИнтеграциямЭДОДляКлиента(РезультатыПоИнтеграциямЭДО) Экспорт
	
	РезультатыПоИнтеграциямЭДОДляКлиента = НовыеРезультатыВыполненияДействийПоИнтеграциямЭДО();
	
	МенеджерыДействийЭДО = МенеджерыДействийЭДО();
	
	Для Каждого РезультатПоИнтеграцииЭДО Из РезультатыПоИнтеграциямЭДО Цикл
		ИдентификаторМенеджера = РезультатПоИнтеграцииЭДО.Ключ;
		МодульМенеджера = МенеджерыДействийЭДО[ИдентификаторМенеджера];
		РезультатВыполнения = РезультатПоИнтеграцииЭДО.Значение;
		РезультатВыполненияДляКлиента = МодульМенеджера.РезультатВыполненияДействийЭДОДляКлиента(РезультатВыполнения);
		РезультатыПоИнтеграциямЭДОДляКлиента.Вставить(ИдентификаторМенеджера, РезультатВыполненияДляКлиента);
	КонецЦикла;
	
	Возврат РезультатыПоИнтеграциямЭДОДляКлиента;
	
КонецФункции

// Параметры:
//  ПараметрыПродолженияДействийПоИнтеграциямЭДО - см. ИнтерфейсДокументовЭДОВызовСервера.ПродолжитьВыполнениеДействийПоИнтеграциямЭДОВФоне.ПараметрыПродолженияДействийПоИнтеграциямЭДО
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - Строка - идентификатор менеджера действий интеграции ЭДО.
//  * Значение - Произвольный
Функция ПараметрыПродолженияДействийПоИнтеграциямЭДОВФоне(ПараметрыПродолженияДействийПоИнтеграциямЭДО) Экспорт
	
	ПараметрыПродолженияПоИнтеграциямЭДОВФоне = Новый Соответствие;
	
	МенеджерыДействийЭДО = МенеджерыДействийЭДО();
	
	Для Каждого ПараметрыПродолженияПоИнтеграцииЭДО Из ПараметрыПродолженияДействийПоИнтеграциямЭДО Цикл
		ИдентификаторМенеджера = ПараметрыПродолженияПоИнтеграцииЭДО.Ключ;
		ПараметрыПродолжения = ПараметрыПродолженияПоИнтеграцииЭДО.Значение;
		МодульМенеджера = МенеджерыДействийЭДО[ИдентификаторМенеджера];
		ПараметрыПродолженияВФоне = МодульМенеджера.ПараметрыПродолженияДействийЭДОВФоне(ПараметрыПродолжения);
		ПараметрыПродолженияПоИнтеграциямЭДОВФоне.Вставить(ИдентификаторМенеджера, ПараметрыПродолженияВФоне);
	КонецЦикла;
	
	Возврат ПараметрыПродолженияПоИнтеграциямЭДОВФоне;
	
КонецФункции

// Параметры:
//  ПараметрыПродолженияДействийПоИнтеграциямЭДО - Соответствие из КлючИЗначение:
//  * Ключ - Строка - идентификатор менеджера действий интеграции ЭДО.
//  * Значение - Произвольный
//  ПараметрыВыполненияДействий - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
// 
// Возвращаемое значение:
//  См. НовыеРезультатыВыполненияДействийПоИнтеграциямЭДО
Функция ПродолжитьВыполнениеДействийПоИнтеграциямЭДОПослеОбработкиРезультатов(ПараметрыПродолженияДействийПоИнтеграциямЭДО, ПараметрыВыполненияДействий) Экспорт
	
	РезультатыПоИнтеграциямЭДО = НовыеРезультатыВыполненияДействийПоИнтеграциямЭДО();
	
	МенеджерыДействийЭДО = МенеджерыДействийЭДО();
	
	Для Каждого ПараметрыПродолженияПоИнтеграцииЭДО Из ПараметрыПродолженияДействийПоИнтеграциямЭДО Цикл
		ИдентификаторМенеджера = ПараметрыПродолженияПоИнтеграцииЭДО.Ключ;
		ПараметрыПродолжения = ПараметрыПродолженияПоИнтеграцииЭДО.Значение;
		МодульМенеджера = МенеджерыДействийЭДО[ИдентификаторМенеджера];
		РезультатДействий = МодульМенеджера.ПродолжитьВыполнениеДействийЭДОПослеОбработкиРезультатов(
			ПараметрыПродолжения, ПараметрыВыполненияДействий);
		РезультатыПоИнтеграциямЭДО.Вставить(ИдентификаторМенеджера, РезультатДействий);
	КонецЦикла;
	
	Возврат РезультатыПоИнтеграциямЭДО;
	
КонецФункции

#КонецОбласти

#Область ДействияПоСостояниюДокумента

// Доступные действия по ЭДО.
// 
// Параметры:
//  СостояниеДокумента - ПеречислениеСсылка.СостоянияДокументовЭДО
//  СвойстваДокумента - См. ДействияПоСостояниюДокумента.СвойстваДокумента
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - ПеречислениеСсылка.СостоянияДокументовЭДО
//  * Значение - Булево
Функция ДоступныеДействияПоЭДО(СостояниеДокумента, СвойстваДокумента)
	
	Действия = Новый Соответствие;
	
	Если СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.НеСформирован Тогда
		
		ЗаполнитьДействияПоСостояниюНеСформирован(Действия, СвойстваДокумента);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписание Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяПодписание(Действия, СвойстваДокумента);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправке Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяПодготовкаКОтправке(Действия, СвойстваДокумента);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаПриглашения Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяОтправкаПриглашения(Действия, СвойстваДокумента);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправка Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяОтправка(Действия, СвойстваДокумента);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяУтверждение Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяУтверждение(Действия, СвойстваДокумента);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеОтклонения Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяПодписаниеОтклонения(Действия, СвойстваДокумента);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеОтклонения Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяПодготовкаКОтправкеОтклонения(Действия, СвойстваДокумента);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаОтклонения Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяОтправкаОтклонения(Действия, СвойстваДокумента);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодтверждениеАннулирования Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяПодтверждениеАннулирования(Действия, СвойстваДокумента);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеАннулирования Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяПодписаниеАннулирования(Действия, СвойстваДокумента);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеАннулирования Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяПодготовкаКОтправкеАннулирования(Действия, СвойстваДокумента);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаАннулирования Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяОтправкаАннулирования(Действия, СвойстваДокумента);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяИзвещениеОПолучении Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяИзвещениеОПолучении(Действия, СвойстваДокумента);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеИзвещения Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяПодписаниеИзвещения(Действия, СвойстваДокумента);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеИзвещения Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяПодготовкаКОтправкеИзвещения(Действия, СвойстваДокумента);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаИзвещения Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяОтправкаИзвещения(Действия, СвойстваДокумента);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяИзвещениеПоОтклонению Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяИзвещениеПоОтклонению(Действия, СвойстваДокумента);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеИзвещенияПоОтклонению Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяПодписаниеИзвещенияПоОтклонению(Действия, СвойстваДокумента);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеИзвещенияПоОтклонению Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяПодготовкаКОтправкеИзвещенияПоОтклонению(Действия, СвойстваДокумента);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаИзвещенияПоОтклонению Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяОтправкаИзвещенияПоОтклонению(Действия, СвойстваДокумента);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяУточнение Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяУточнение(Действия, СвойстваДокумента);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяИсправлениеОшибкиПередачи Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяИсправлениеОшибкиПередачи(Действия, СвойстваДокумента);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПовторнаяОтправка Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяПовторнаяОтправка(Действия, СвойстваДокумента);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонениемПриглашения Тогда
		
		ЗаполнитьДействияПоСостояниюЗакрытСОтклонениемПриглашения(Действия, СвойстваДокумента);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеОператора Тогда
		
		ЗаполнитьДействияПоСостояниюОжидаетсяПодтверждениеОператора(Действия, СвойстваДокумента);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОжидаетсяИзвещениеОПолучении Тогда
		
		ЗаполнитьДействияПоСостояниюОжидаетсяИзвещениеОПолучении(Действия, СвойстваДокумента);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждение Тогда
		
		ЗаполнитьДействияПоСостояниюОжидаетсяПодтверждение(Действия, СвойстваДокумента);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеАннулирования Тогда
		
		ЗаполнитьДействияПоСостояниюОжидаетсяПодтверждениеАннулирования(Действия, СвойстваДокумента);
	
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОжидаетсяИзвещениеПоОтклонению Тогда
		
		ЗаполнитьДействияПоСостояниюОжидаетсяОжидаетсяИзвещениеПоОтклонению(Действия, СвойстваДокумента);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОжидаетсяИсправление Тогда
		
		ЗаполнитьДействияПоСостояниюОжидаетсяОжидаетсяИсправление(Действия, СвойстваДокумента);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОжидаетсяОтветНаПриглашение Тогда
		
		ЗаполнитьДействияПоСостояниюОжидаетсяОтветНаПриглашение(Действия, СвойстваДокумента);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОбменЗавершен Тогда
		
		ЗаполнитьДействияПоСостояниюОбменЗавершен(Действия, СвойстваДокумента);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОбменЗавершенСИсправлением Тогда
		
		ЗаполнитьДействияПоСостояниюОбменЗавершенСИсправлением(Действия, СвойстваДокумента);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ЗакрытПринудительно Тогда
		
		ЗаполнитьДействияПоСостояниюЗакрытПринудительно(Действия, СвойстваДокумента);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонением Тогда
		
		ЗаполнитьДействияПоСостояниюЗакрытСОтклонением(Действия, СвойстваДокумента);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ЗакрытСОшибкойПередачи Тогда
		
		ЗаполнитьДействияПоСостояниюЗакрытСОшибкойПередачи(Действия, СвойстваДокумента);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.Аннулирован Тогда
		
		ЗаполнитьДействияПоСостояниюАннулирован(Действия, СвойстваДокумента);
		
	КонецЕсли;
	
	Если СвойстваДокумента.НаОзнакомлении Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.ОтправитьВАрхив, Истина);
		
	КонецЕсли;
	
	Если НЕ ДействиеАннулироватьДоступно(СвойстваДокумента) Тогда
		Действия.Удалить(Перечисления.ДействияПоЭДО.Аннулировать);
	КонецЕсли;
	
	Возврат Действия;
	
КонецФункции

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  СвойстваДокумента - см. ДействияПоСостояниюДокумента.СвойстваДокумента
Процедура ЗаполнитьДействияПоСостояниюНеСформирован(Действия, СвойстваДокумента)
	Действия.Вставить(Перечисления.ДействияПоЭДО.Сформировать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Подписать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке, Истина);
	Если ДействиеОтправитьДоступно(СвойстваДокумента.ТипДокумента) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
	КонецЕсли;
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  СвойстваДокумента - см. ДействияПоСостояниюДокумента.СвойстваДокумента
Процедура ЗаполнитьДействияПоСостояниюТребуетсяПодписание(Действия, СвойстваДокумента)
	
	Если ДействиеПодписатьДоступно(СвойстваДокумента) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.Подписать, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке, Истина);
		Если ДействиеОтправитьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
		КонецЕсли;
		Действия.Вставить(Перечисления.ДействияПоЭДО.ОтклонитьПодписание, Истина);
	КонецЕсли;
	Действия.Вставить(Перечисления.ДействияПоЭДО.Переформировать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ЭтоВходящийЭДО(СвойстваДокумента.Ссылка) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.Аннулировать, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.СформироватьОтвет, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Отклонить, Истина);
	КонецЕсли;
	Если ДействиеАннулироватьДоступно(СвойстваДокумента) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.Аннулировать, Истина);
	КонецЕсли;
	Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  СвойстваДокумента - см. ДействияПоСостояниюДокумента.СвойстваДокумента
Процедура ЗаполнитьДействияПоСостояниюТребуетсяПодготовкаКОтправке(Действия, СвойстваДокумента)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке, Истина);
	Если ДействиеОтправитьДоступно(СвойстваДокумента) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
	КонецЕсли;
	Действия.Вставить(Перечисления.ДействияПоЭДО.Переформировать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  СвойстваДокумента - см. ДействияПоСостояниюДокумента.СвойстваДокумента
Процедура ЗаполнитьДействияПоСостояниюТребуетсяОтправкаПриглашения(Действия, СвойстваДокумента)
	Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  СвойстваДокумента - см. ДействияПоСостояниюДокумента.СвойстваДокумента
Процедура ЗаполнитьДействияПоСостояниюТребуетсяОтправка(Действия, СвойстваДокумента)
	
	Если ДействиеОтправитьДоступно(СвойстваДокумента) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
	КонецЕсли;
	Действия.Вставить(Перечисления.ДействияПоЭДО.ОтменитьОтправку, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  СвойстваДокумента - см. ДействияПоСостояниюДокумента.СвойстваДокумента
Процедура ЗаполнитьДействияПоСостояниюТребуетсяУтверждение(Действия, СвойстваДокумента)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.Утвердить, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Отклонить, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Аннулировать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.СформироватьОтвет, Истина);
	Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  СвойстваДокумента - см. ДействияПоСостояниюДокумента.СвойстваДокумента
Процедура ЗаполнитьДействияПоСостояниюТребуетсяПодписаниеОтклонения(Действия, СвойстваДокумента)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.Подписать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Переформировать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  СвойстваДокумента - см. ДействияПоСостояниюДокумента.СвойстваДокумента
Процедура ЗаполнитьДействияПоСостояниюТребуетсяПодготовкаКОтправкеОтклонения(Действия, СвойстваДокумента)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке, Истина);
	Если ДействиеОтправитьДоступно(СвойстваДокумента) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
	КонецЕсли;
	Действия.Вставить(Перечисления.ДействияПоЭДО.Переформировать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;

КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  СвойстваДокумента - см. ДействияПоСостояниюДокумента.СвойстваДокумента
Процедура ЗаполнитьДействияПоСостояниюТребуетсяОтправкаОтклонения(Действия, СвойстваДокумента)
	
	Если ДействиеОтправитьДоступно(СвойстваДокумента) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
	КонецЕсли;
	Действия.Вставить(Перечисления.ДействияПоЭДО.ОтменитьОтправку, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  СвойстваДокумента - см. ДействияПоСостояниюДокумента.СвойстваДокумента
Процедура ЗаполнитьДействияПоСостояниюТребуетсяПодтверждениеАннулирования(Действия, СвойстваДокумента)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.ПринятьАннулирование, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.ОтклонитьАннулирование, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  СвойстваДокумента - см. ДействияПоСостояниюДокумента.СвойстваДокумента
Процедура ЗаполнитьДействияПоСостояниюТребуетсяПодписаниеАннулирования(Действия, СвойстваДокумента)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.Подписать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке, Истина);
	Если ДействиеОтправитьДоступно(СвойстваДокумента) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
	КонецЕсли;
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  СвойстваДокумента - см. ДействияПоСостояниюДокумента.СвойстваДокумента
Процедура ЗаполнитьДействияПоСостояниюТребуетсяПодготовкаКОтправкеАннулирования(Действия, СвойстваДокумента)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке, Истина);
	Если ДействиеОтправитьДоступно(СвойстваДокумента) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
	КонецЕсли;
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  СвойстваДокумента - см. ДействияПоСостояниюДокумента.СвойстваДокумента
Процедура ЗаполнитьДействияПоСостояниюТребуетсяОтправкаАннулирования(Действия, СвойстваДокумента)
	
	Если ДействиеОтправитьДоступно(СвойстваДокумента) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
	КонецЕсли;
	Действия.Вставить(Перечисления.ДействияПоЭДО.ОтменитьОтправку, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  СвойстваДокумента - см. ДействияПоСостояниюДокумента.СвойстваДокумента
Процедура ЗаполнитьДействияПоСостояниюТребуетсяИзвещениеОПолучении(Действия, СвойстваДокумента)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.СформироватьИзвещение, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Подписать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке, Истина);
	Если ДействиеОтправитьДоступно(СвойстваДокумента) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
	КонецЕсли;
	Действия.Вставить(Перечисления.ДействияПоЭДО.Аннулировать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  СвойстваДокумента - см. ДействияПоСостояниюДокумента.СвойстваДокумента
Процедура ЗаполнитьДействияПоСостояниюТребуетсяПодписаниеИзвещения(Действия, СвойстваДокумента)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.Подписать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке, Истина);
	Если ДействиеОтправитьДоступно(СвойстваДокумента) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
	КонецЕсли;
	Действия.Вставить(Перечисления.ДействияПоЭДО.Аннулировать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Переформировать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  СвойстваДокумента - см. ДействияПоСостояниюДокумента.СвойстваДокумента
Процедура ЗаполнитьДействияПоСостояниюТребуетсяПодготовкаКОтправкеИзвещения(Действия, СвойстваДокумента)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке, Истина);
	Если ДействиеОтправитьДоступно(СвойстваДокумента) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
	КонецЕсли;
	Действия.Вставить(Перечисления.ДействияПоЭДО.Аннулировать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Переформировать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  СвойстваДокумента - см. ДействияПоСостояниюДокумента.СвойстваДокумента
Процедура ЗаполнитьДействияПоСостояниюТребуетсяОтправкаИзвещения(Действия, СвойстваДокумента);
	
	Если ДействиеОтправитьДоступно(СвойстваДокумента) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
	КонецЕсли;
	Действия.Вставить(Перечисления.ДействияПоЭДО.ОтменитьОтправку, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Аннулировать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  СвойстваДокумента - см. ДействияПоСостояниюДокумента.СвойстваДокумента
Процедура ЗаполнитьДействияПоСостояниюТребуетсяИзвещениеПоОтклонению(Действия, СвойстваДокумента)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.СформироватьИзвещение, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Подписать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке, Истина);
	Если ДействиеОтправитьДоступно(СвойстваДокумента) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
	КонецЕсли;
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  СвойстваДокумента - см. ДействияПоСостояниюДокумента.СвойстваДокумента
Процедура ЗаполнитьДействияПоСостояниюТребуетсяПодписаниеИзвещенияПоОтклонению(Действия, СвойстваДокумента)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.Подписать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке, Истина);
	Если ДействиеОтправитьДоступно(СвойстваДокумента) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
	КонецЕсли;
	Действия.Вставить(Перечисления.ДействияПоЭДО.Переформировать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  СвойстваДокумента - см. ДействияПоСостояниюДокумента.СвойстваДокумента
Процедура ЗаполнитьДействияПоСостояниюТребуетсяПодготовкаКОтправкеИзвещенияПоОтклонению(Действия, СвойстваДокумента)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке, Истина);
	Если ДействиеОтправитьДоступно(СвойстваДокумента) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
	КонецЕсли;
	Действия.Вставить(Перечисления.ДействияПоЭДО.Переформировать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  СвойстваДокумента - см. ДействияПоСостояниюДокумента.СвойстваДокумента
Процедура ЗаполнитьДействияПоСостояниюТребуетсяОтправкаИзвещенияПоОтклонению(Действия, СвойстваДокумента)
	
	Если ДействиеОтправитьДоступно(СвойстваДокумента) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
	КонецЕсли;
	Действия.Вставить(Перечисления.ДействияПоЭДО.ОтменитьОтправку, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  СвойстваДокумента - см. ДействияПоСостояниюДокумента.СвойстваДокумента
Процедура ЗаполнитьДействияПоСостояниюТребуетсяУточнение(Действия, СвойстваДокумента)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.СформироватьИсправление, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  СвойстваДокумента - см. ДействияПоСостояниюДокумента.СвойстваДокумента
Процедура ЗаполнитьДействияПоСостояниюТребуетсяИсправлениеОшибкиПередачи(Действия, СвойстваДокумента)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.СформироватьИсправление, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  СвойстваДокумента - см. ДействияПоСостояниюДокумента.СвойстваДокумента
Процедура ЗаполнитьДействияПоСостояниюТребуетсяПовторнаяОтправка(Действия, СвойстваДокумента)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.ВернутьВРаботу, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  СвойстваДокумента - см. ДействияПоСостояниюДокумента.СвойстваДокумента
Процедура ЗаполнитьДействияПоСостояниюЗакрытСОтклонениемПриглашения(Действия, СвойстваДокумента)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  СвойстваДокумента - см. ДействияПоСостояниюДокумента.СвойстваДокумента
Процедура ЗаполнитьДействияПоСостояниюЗакрытСОшибкойПередачи(Действия, СвойстваДокумента)
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  СвойстваДокумента - см. ДействияПоСостояниюДокумента.СвойстваДокумента
Процедура ЗаполнитьДействияПоСостояниюАннулирован(Действия, СвойстваДокумента)
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  СвойстваДокумента - см. ДействияПоСостояниюДокумента.СвойстваДокумента
Процедура ЗаполнитьДействияПоСостояниюОжидаетсяПодтверждениеОператора(Действия, СвойстваДокумента)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.Аннулировать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  СвойстваДокумента - см. ДействияПоСостояниюДокумента.СвойстваДокумента
Процедура ЗаполнитьДействияПоСостояниюОжидаетсяИзвещениеОПолучении(Действия, СвойстваДокумента)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.Аннулировать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  СвойстваДокумента - см. ДействияПоСостояниюДокумента.СвойстваДокумента
Процедура ЗаполнитьДействияПоСостояниюОжидаетсяПодтверждение(Действия, СвойстваДокумента)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.Аннулировать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  СвойстваДокумента - см. ДействияПоСостояниюДокумента.СвойстваДокумента
Процедура ЗаполнитьДействияПоСостояниюОжидаетсяПодтверждениеАннулирования(Действия, СвойстваДокумента)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  СвойстваДокумента - см. ДействияПоСостояниюДокумента.СвойстваДокумента
Процедура ЗаполнитьДействияПоСостояниюОжидаетсяОжидаетсяИзвещениеПоОтклонению(Действия, СвойстваДокумента)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  СвойстваДокумента - см. ДействияПоСостояниюДокумента.СвойстваДокумента
Процедура ЗаполнитьДействияПоСостояниюОжидаетсяОжидаетсяИсправление(Действия, СвойстваДокумента)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  СвойстваДокумента - см. ДействияПоСостояниюДокумента.СвойстваДокумента
Процедура ЗаполнитьДействияПоСостояниюОжидаетсяОтветНаПриглашение(Действия, СвойстваДокумента)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  СвойстваДокумента - см. ДействияПоСостояниюДокумента.СвойстваДокумента
Процедура ЗаполнитьДействияПоСостояниюОбменЗавершен(Действия, СвойстваДокумента)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.Аннулировать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  СвойстваДокумента - см. ДействияПоСостояниюДокумента.СвойстваДокумента
Процедура ЗаполнитьДействияПоСостояниюОбменЗавершенСИсправлением(Действия, СвойстваДокумента)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  СвойстваДокумента - см. ДействияПоСостояниюДокумента.СвойстваДокумента
Процедура ЗаполнитьДействияПоСостояниюЗакрытПринудительно(Действия, СвойстваДокумента)
	Действия.Вставить(Перечисления.ДействияПоЭДО.ВернутьВРаботу, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  СвойстваДокумента - см. ДействияПоСостояниюДокумента.СвойстваДокумента
Процедура ЗаполнитьДействияПоСостояниюЗакрытСОтклонением(Действия, СвойстваДокумента)
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
КонецПроцедуры

// Параметры:
//  СвойстваДокумента - См. ДействияПоСостояниюДокумента.СвойстваДокумента
// 
// Возвращаемое значение:
//  Булево
Функция ДействиеАннулироватьДоступно(СвойстваДокумента)
	Возврат СвойстваДокумента.ТипДокумента <> Перечисления.ТипыДокументовЭДО.МашиночитаемаяДоверенность;
КонецФункции

// Параметры:
//  СвойстваДокумента - См. ДействияПоСостояниюДокумента.СвойстваДокумента
// 
// Возвращаемое значение:
//  Булево
Функция ДействиеПодписатьДоступно(СвойстваДокумента)
	
	Если ЭтоВходящийЭДО(СвойстваДокумента.Ссылка)
		ИЛИ СвойстваДокумента.ЭтоОблачныйЭДО Тогда
		Возврат Истина;
	КонецЕсли;
	
	ОписанияЗапросов = Новый Массив;
	
	ОписаниеЗапроса = ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса();
	ОписаниеЗапроса.Текст = 
		"ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ СообщенияДляОбработки
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|ГДЕ
		|	СообщениеЭДО.ЭлектронныйДокумент = &ОтборЭлектронныйДокумент
		|	И СообщениеЭДО.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСообщенийЭДО.Подписание)
		|	И СообщениеЭДО.ТипЭлементаРегламента В (ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя),
		|		ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя))";
	ОписаниеЗапроса.СлужебныеПараметры.Вставить("ОтборЭлектронныйДокумент", СвойстваДокумента.Ссылка);
	ОписанияЗапросов.Добавить(ОписаниеЗапроса);
	
	Отбор = МаршрутыПодписанияБЭД.НовыйОтборОбъектовДляПодписания();
	Отбор.Объект = "ВЫБРАТЬ Ссылка ИЗ СообщенияДляОбработки";
	ОписанияЗапросов.Добавить(МаршрутыПодписанияБЭД.ЗапросОбъектовДляПодписания("ОбъектыДляПодписания", Отбор));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбъектыДляПодписания.Объект
		|ИЗ
		|	ОбъектыДляПодписания";
	
	Запрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, ОписанияЗапросов);
	РезультатЗапроса = Запрос.Выполнить();
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

// Параметры:
//  СвойстваДокумента - См. ДействияПоСостояниюДокумента.СвойстваДокумента
// 
// Возвращаемое значение:
//  Булево
Функция ДействиеОтправитьДоступно(СвойстваДокумента)
	Возврат Не ЭтоВнутреннийТипДокумента(СвойстваДокумента.ТипДокумента)
КонецФункции

// Параметры:
//  СвойстваДокумента - См. ДействияПоСостояниюДокумента.СвойстваДокумента
// 
// Возвращаемое значение:
//  Булево
Функция ДействиеЗакрытьДоступно(СвойстваДокумента)
	Возврат Не ЭтоВнутреннийТипДокумента(СвойстваДокумента.ТипДокумента);
КонецФункции

#КонецОбласти

#Область ТекущиеЭлектронныеДокументы

Функция ТекстУсловияПоОтбору(Знач Отбор, Знач ПрефиксПараметров = "ЗначениеОтбора")
	
	Если Не ЗначениеЗаполнено(Отбор) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстПолей = "";
	Для НомерОтбора = 1 По Отбор.Количество() Цикл
		ОписаниеПоля = СтрШаблон("""Поле%1"" КАК Поле%1,", НомерОтбора);
		ТекстПолей = ТекстПолей + ОписаниеПоля;
	КонецЦикла;
	ТекстПолей = Лев(ТекстПолей, СтрДлина(ТекстПолей) - 1);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&ТекстПолей
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстПолей", ТекстПолей);
	
	Построитель = Новый ПостроительЗапроса(ТекстЗапроса);
	Построитель.ЗаполнитьНастройки();
	
	Для НомерОтбора = 1 По Отбор.Количество() Цикл
		ЭлементОтбора = Отбор[НомерОтбора - 1];
		НовыйЭлементОтбора = Построитель.Отбор.Добавить("Поле" + НомерОтбора);
		НовыйЭлементОтбора.Использование = Истина;
		НовыйЭлементОтбора.ВидСравнения = ЭлементОтбора.ВидСравнения;
	КонецЦикла;
	
	Запрос = Построитель.ПолучитьЗапрос();
	ТекстЗапроса = Запрос.Текст;
	
	ИндексУсловия = СтрНайти(ТекстЗапроса, "ГДЕ");
	
	ТекстУсловия = Сред(ТекстЗапроса, ИндексУсловия + 4); // учтен перенос строки.
	
	Для НомерОтбора = 1 По Отбор.Количество() Цикл
		ЭлементОтбора = Отбор[НомерОтбора - 1];
		ТекстУсловия = СтрЗаменить(ТекстУсловия, """Поле" + НомерОтбора + """", ЭлементОтбора.Поле);
		ТекстУсловия = СтрЗаменить(ТекстУсловия, "&Параметр" + НомерОтбора, "&" + ПрефиксПараметров + НомерОтбора);
	КонецЦикла;
	
	Возврат ТекстУсловия;
	
КонецФункции

#КонецОбласти

#Область РаботаСДеревомЭлектронныхДокументов

Процедура ОбновитьЭлементыДереваЭлектронныхДокументов(Приемник, Источник, Актуальный = Ложь)
	
	КоллекцияЭлементовИсточника = Источник.Строки;
	Если КоллекцияЭлементовИсточника.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КоллекцияЭлементовПриемника = Приемник.Строки;
	
	Для Каждого ЭлементИсточника Из КоллекцияЭлементовИсточника Цикл
		
		ДанныеЭлементаИсточника = ЭлементИсточника.Данные;
		
		Если ЭлементИсточника.Дополнительный
			И Не ЗначениеЗаполнено(ДанныеЭлементаИсточника.Сообщение) Тогда
			Продолжить;
		КонецЕсли;		
		
		ЭлементПриемника = КоллекцияЭлементовПриемника.Добавить();		
		
		Если ЭлементПриемника.Сообщение <> ДанныеЭлементаИсточника.Сообщение
			Или ЭлементПриемника.Статус <> ДанныеЭлементаИсточника.Статус Тогда
			ЗаполнитьЗначенияСвойств(ЭлементПриемника, ДанныеЭлементаИсточника);
		КонецЕсли;

		Дата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ДанныеЭлементаИсточника.Сообщение, "Дата");
			
		ЭлементПриемника.Сообщение = ДанныеЭлементаИсточника.Сообщение;
		ЭлементПриемника.Версия = Дата;
		
		Если ЗначениеЗаполнено(ЭлементПриемника.Сообщение) 
			И ЭлементПриемника.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя Тогда
			ЭлементПриемника.Актуальный = Актуальный;
			СостояниеЭДО = ЭлектронныеДокументыЭДО.СостояниеДокумента(ЭлементПриемника.ЭлектронныйДокумент);
			СвойстваДокумента = ЭлектронныеДокументыЭДО.СвойстваДокумента(ЭлементПриемника.ЭлектронныйДокумент,
				"Ссылка, НаОзнакомлении, СпособОбмена, ВидДокумента");
			ДействияНаЭтапе = ЭлектронныеДокументыЭДО.ДействияПоСостояниюДокумента(СостояниеЭДО, СвойстваДокумента);
			
			Если ЗначениеЗаполнено(ДействияНаЭтапе) Тогда
				ЭлементПриемника.ОжидаемоеДействие = МассивДействийНаЭтапе(ДействияНаЭтапе)[0];	
			КонецЕсли;
			
		КонецЕсли;

		Если ЗначениеЗаполнено(ЭлементПриемника.ЭлектронныйДокумент) 
			Или ЭлементПриемника.ТипЭлементаРегламента	= Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя Тогда
			ОбновитьЭлементыДереваЭлектронныхДокументов(ЭлементПриемника, ЭлементИсточника);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ВидыДокументов

// Параметры:
//  ПараметрыПоиска - см. НовыеПараметрыПоискаВидаДокумента
// 
// Возвращаемое значение:
//  СправочникСсылка.ВидыДокументовЭДО - Найти создать вид документа
Функция НайтиСоздатьВидДокумента(ПараметрыПоиска)
	
	ВидДокумента = НайтиВидДокумента(ПараметрыПоиска);
	Если Не ЗначениеЗаполнено(ВидДокумента) Тогда
		ВидДокумента = СоздатьВидДокумента(ПараметрыПоиска);
	КонецЕсли;
	
	Возврат ВидДокумента;
	
КонецФункции

// Параметры:
//  ПараметрыПоиска - см. НовыеПараметрыПоискаВидаДокумента
// 
// Возвращаемое значение:
//  СправочникСсылка.ВидыДокументовЭДО
Функция СоздатьВидДокумента(ПараметрыПоиска)
	
	ВидДокумента = Справочники.ВидыДокументовЭДО.ПустаяСсылка();
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВидДокумента = НайтиВидДокумента(ПараметрыПоиска);
	Если ЗначениеЗаполнено(ВидДокумента) Тогда
		Возврат ВидДокумента;
	КонецЕсли;
	
	НовыйЭлемент = Справочники.ВидыДокументовЭДО.СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(НовыйЭлемент, ПараметрыПоиска);
	ЗаполнитьНаименованиеВидаДокумента(НовыйЭлемент, ПараметрыПоиска.ПредставлениеКомандыПечати);
	НовыйЭлемент.ПорядокСортировкиВПакете = ПорядокСортировкиВПакете(ПараметрыПоиска.ТипДокумента);
	
	Если Не НовыйЭлемент.ПроверитьЗаполнение() Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка заполнения нового вида документа'");
	КонецЕсли;
	
	НовыйЭлемент.Записать();
	ВидДокумента = НовыйЭлемент.Ссылка;
		
	УстановитьПривилегированныйРежим(Ложь);

	Возврат ВидДокумента;
	
КонецФункции

// Параметры:
//  ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
// 
// Возвращаемое значение:
//  Строка
Функция КраткоеНаименованиеТипаДокумента(ТипДокумента)
	
	Наименование = "";
	
	Если ТипДокумента = Перечисления.ТипыДокументовЭДО.УПД Тогда
		Наименование = НСтр("ru = 'УПД'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.УКД Тогда
		Наименование = НСтр("ru = 'УКД'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.АктСверки Тогда
		Наименование = НСтр("ru = 'Сверка'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.АктНаПередачуПрав Тогда
		Наименование = НСтр("ru = 'Акт ПП'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.АктВыполненныхРабот Тогда
		Наименование = НСтр("ru = 'Акт'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.АктОРасхождениях Тогда
		Наименование = НСтр("ru = 'Расхождения'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная
		ИЛИ ТипДокумента = Перечисления.ТипыДокументовЭДО.ПередачаТоваровМеждуОрганизациями Тогда
		Наименование = НСтр("ru = 'Накладная'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.СчетФактура Тогда
		Наименование = НСтр("ru = 'СФ'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.СоглашениеОбИзмененииСтоимости Тогда
		Наименование = НСтр("ru = 'Корректировка'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.КорректировочныйСчетФактура Тогда
		Наименование = НСтр("ru = 'Кор. СФ'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.КаталогТоваров Тогда
		Наименование = НСтр("ru = 'Каталог'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.СчетНаОплату Тогда
		Наименование = НСтр("ru = 'Счет'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ПрайсЛист Тогда
		Наименование = НСтр("ru = 'Прайс'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ЗаказТовара Тогда
		Наименование = НСтр("ru = 'Заказ'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ОтветНаЗаказ Тогда
		Наименование = НСтр("ru = 'Заказ покупателя'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.АктВзаимозачета Тогда
		Наименование = НСтр("ru = 'Взаимозачет'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ГарантийноеПисьмо Тогда
		Наименование = НСтр("ru = 'Гар. письмо'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ДополнительноеСоглашение Тогда
		Наименование = НСтр("ru = 'Доп. согл.'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ПлатежноеПоручение Тогда
		Наименование = НСтр("ru = 'Пл. поруч.'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ПриложениеКАкту Тогда
		Наименование = НСтр("ru = 'Акт (прил.)'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.СоглашениеОбЭДО Тогда
		Наименование = НСтр("ru = 'Соглашение'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ИзвещениеОПолучении Тогда
		Наименование = НСтр("ru = 'Извещение'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ПредложениеОбАннулировании Тогда
		Наименование = НСтр("ru = 'ПОА'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.УведомлениеОбУточнении Тогда
		Наименование = НСтр("ru = 'УОУ'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ОтчетОПродажахКомиссионногоТовара Тогда
		Наименование = НСтр("ru = 'Продажа (комиссия)'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ОтчетОСписанииКомиссионногоТовара Тогда
		Наименование = НСтр("ru = 'Списание (комиссия)'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ВозвратТоваровМеждуОрганизациями Тогда
		Наименование = НСтр("ru = 'Возврат'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ЗапросКоммерческихПредложений Тогда
		Наименование = НСтр("ru = 'Запрос ком. пред.'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ПодтверждениеОператораЭДО Тогда
		Наименование = НСтр("ru = 'Подтв. оператора'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.СведенияОРеализацииКомиссионером Тогда
		Наименование = НСтр("ru = 'Реализ. комиссионером'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.СведенияОЗакупкеКомиссионером Тогда
		Наименование = НСтр("ru = 'Закупка комиссионером'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.КорректировкаСведенийОРеализацииКомиссионером Тогда
		Наименование = НСтр("ru = 'Корр. реализ. ком-ром'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.КорректировкаСведенийОЗакупкеКомиссионером Тогда
		Наименование = НСтр("ru = 'Корр. закуп. ком-ром'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.МашиночитаемаяДоверенность Тогда
		Наименование = НСтр("ru = 'МЧД'");
	Иначе
		Наименование = Строка(ТипДокумента);
	КонецЕсли;
	
	Возврат Наименование;
	
КонецФункции

// Параметры:
//  ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
// 
// Возвращаемое значение:
//  Число
Функция ПорядокСортировкиВПакете(ТипДокумента)
	Порядок = 100;
	Если ТипДокумента = Перечисления.ТипыДокументовЭДО.УПД Тогда Порядок = 1;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.УКД Тогда Порядок = 2;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная Тогда Порядок = 3;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.АктВыполненныхРабот Тогда Порядок = 4;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.АктНаПередачуПрав Тогда Порядок = 5;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.СоглашениеОбИзмененииСтоимости Тогда Порядок = 6;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.СчетФактура Тогда Порядок = 7;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.КорректировочныйСчетФактура Тогда Порядок = 8;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.АктОРасхождениях Тогда Порядок = 9;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ОтчетОПродажахКомиссионногоТовара Тогда Порядок = 10;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ОтчетОСписанииКомиссионногоТовара Тогда Порядок = 11;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.Прикладной Тогда Порядок = 12;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.КаталогТоваров Тогда Порядок = 13;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.СчетНаОплату Тогда Порядок = 14;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ЗаказТовара Тогда Порядок = 15;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ОтветНаЗаказ Тогда Порядок = 16;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ЗапросКоммерческихПредложений Тогда Порядок = 17;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.КоммерческоеПредложение Тогда Порядок = 18;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.АктВзаимозачета Тогда Порядок = 19;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.АктСверки Тогда Порядок = 20;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.Ведомость Тогда Порядок = 21;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ГарантийноеПисьмо Тогда Порядок = 22;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.Договор Тогда Порядок = 23;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ДополнительноеСоглашение Тогда Порядок = 24;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.КС11 Тогда Порядок = 25;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.КС2 Тогда Порядок = 26;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.КС3 Тогда Порядок = 27;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.Отчет Тогда Порядок = 28;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ПлатежноеПоручение Тогда Порядок = 29;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ПриложениеКАкту Тогда Порядок = 30;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.СоглашениеОбЭДО Тогда Порядок = 31;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.Спецификация Тогда Порядок = 32;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.Уведомление Тогда Порядок = 33;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.Прочее Тогда Порядок = 34;
	КонецЕсли;
	Возврат Порядок;
КонецФункции

// Определяет соответствует ли тип вида документа внутреннему типу.
// 
// Параметры:
// 	ВидДокумента - СправочникСсылка.ВидыДокументовЭДО - ссылка на вид документа.
// Возвращаемое значение:
// 	Булево - вид имеет тип документа запрос коммерческих предложений.
Функция ЭтоВнутреннийВидДокумента(ВидДокумента) Экспорт
	Возврат ТипВидаДокументаСоответствуетТипу(ВидДокумента,
		Перечисления.ТипыДокументовЭДО.Внутренний);
КонецФункции

// Параметры:
//  ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
// 
// Возвращаемое значение:
//  Булево
Функция ТипВидаДокументаСоответствуетТипу(ВидДокумента, ТипДокумента)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИСТИНА КАК Выбран
		|ИЗ
		|	Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
		|ГДЕ
		|	ВидыДокументовЭДО.Ссылка = &Ссылка
		|	И ВидыДокументовЭДО.ТипДокумента = &ТипДокумента";
	
	Запрос.УстановитьПараметр("Ссылка", ВидДокумента);
	Запрос.УстановитьПараметр("ТипДокумента", ТипДокумента);
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

#КонецОбласти

#Область РеестрЭлектронныхДокументов

// Формирует реестр электронных документов.
//
// Параметры:
//  ЭлектронныеДокументы - Массив Из ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  КоличествоФайловДокументов - Соответствие Из КлючИЗначение:
//   * Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - Документ.
//   * Значение - Число - Количество файлов по документу.
//
// Возвращаемое значение:
//  ТабличныйДокумент - Сформированный реестр электронных документов.
Функция СформироватьРеестрЭлектронныхДокументов(Знач ЭлектронныеДокументы, Знач КоличествоФайловДокументов)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	Макет = Обработки.ИнтерфейсДокументовЭДО.ПолучитьМакет("РеестрЭлектронныхДокументов_ru");
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапка.Параметры.ДатаСоставления = Формат(ТекущаяДатаСеанса(), "ДЛФ=DT");
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	ДанныеДокументов = ЭлектронныеДокументыЭДО.ДанныеДокументовДляРеестраЭлектронныхДокументов(ЭлектронныеДокументы);
	
	ОбъектыУчета = ИнтеграцияЭДО.ОбъектыУчетаАктуальныхЭлектронныхДокументов(ЭлектронныеДокументы);
	ОбъектыУчета.Индексы.Добавить("ЭлектронныйДокумент");
	
	НомерСтроки = 1;
	СуммаДокументов = 0;
	КоличествоФайлов = 0;
	
	Для каждого ДанныеДокумента Из ДанныеДокументов Цикл
		
		ЭлектронныйДокумент = ДанныеДокумента.Ссылка;
		
		ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
		
		ОбластьСтрока.Параметры.НомерСтроки = НомерСтроки;
		ОбластьСтрока.Параметры.ДатаДокумента = ДанныеДокумента.ДатаДокумента;
		ОбластьСтрока.Параметры.Организация = ДанныеДокумента.Организация;
		ОбластьСтрока.Параметры.Контрагент = ДанныеДокумента.Контрагент;
		ОбластьСтрока.Параметры.СуммаДокумента = ДанныеДокумента.СуммаДокумента;
		
		ОбластьСтрока.Параметры.ПредставлениеДокумента = ДанныеДокумента.ПредставлениеДокумента;
		
		ОбластьСтрока.Параметры.Направление = ДанныеДокумента.НаправлениеКратко;
		
		КоличествоФайловДокумента = КоличествоФайловДокументов[ЭлектронныйДокумент];
		Если КоличествоФайловДокумента <> Неопределено Тогда
			ОбластьСтрока.Параметры.КоличествоФайлов = КоличествоФайловДокумента;
			КоличествоФайлов = КоличествоФайлов + КоличествоФайловДокумента;
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьСтрока);
		
		ОбъектыУчетаДокумента = ОбъектыУчета.НайтиСтроки(Новый Структура("ЭлектронныйДокумент", ЭлектронныйДокумент));
		Для каждого ОбъектУчетаДокумента Из ОбъектыУчетаДокумента Цикл
			НавигационнаяСсылкаОбъектаУчета = ПолучитьНавигационнуюСсылку(ОбъектУчетаДокумента.ОбъектУчета);
			ОбластьОбъектУчета = Макет.ПолучитьОбласть("ОбъектУчета");
			ОбластьОбъектУчета.Параметры.НавигационнаяСсылкаОбъектаУчета = НавигационнаяСсылкаОбъектаУчета;
			ТабличныйДокумент.Вывести(ОбластьОбъектУчета);
		КонецЦикла;
		
		НомерСтроки = НомерСтроки + 1;
		СуммаДокументов = СуммаДокументов + ДанныеДокумента.СуммаДокумента;
		
	КонецЦикла;
	
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьПодвал.Параметры.СуммаДокументов = СуммаДокументов;
	ОбластьПодвал.Параметры.КоличествоФайлов = КоличествоФайлов;
	ТабличныйДокумент.Вывести(ОбластьПодвал);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

#Область ОбработкаПредупрежденийКомпонентов

// Возвращает параметры просмотра документооборота.
// 
// Параметры:
//  Предупреждения - Массив из см. ИнтерфейсДокументовЭДОКлиентСервер.НовыеДанныеПредупрежденияКомпонента.
//  Вид - см. НастройкиЭДО.ВидыПредупреждений.
// 
// Возвращаемое значение:
//  Массив из см. ИнтерфейсДокументовЭДОКлиентСервер.НовыеДанныеПредупрежденияКомпонента.
Функция ПредупрежденияПоВиду(Предупреждения, Вид)
	
	ПредупрежденияПоВиду = Новый Массив;
	
	Для Каждого Предупреждение Из Предупреждения Цикл
		Если Предупреждение.Вид = Вид Тогда
			ПредупрежденияПоВиду.Добавить(Предупреждение);
		КонецЕсли;
	КонецЦикла;
		
	Возврат ПредупрежденияПоВиду;
	
КонецФункции

#КонецОбласти

#Область РаботаСФормами

#Область ПросмотрЭД

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра входящего/исходящего электронного документа
//  ЭлементСхемыРегламента - ДанныеФормыЭлементДерева 
// 
// Возвращаемое значение:
//  См. ЭлектронныеДокументыЭДО.НовоеОписаниеСообщения
Функция ОписаниеСообщения(Форма, ЭлементСхемыРегламента)
	
	АдресОписанияДанныхДокумента = "";
	Если ЭлементСхемыРегламента.Свойство("АдресОписанияСообщения") Тогда
		АдресОписанияДанныхДокумента = ЭлементСхемыРегламента.АдресОписанияСообщения;
	ИначеЕсли ЭлементСхемыРегламента.Свойство("АдресДанныхДокумента") Тогда
		АдресОписанияДанныхДокумента = ЭлементСхемыРегламента.АдресДанныхДокумента;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресОписанияДанныхДокумента) Тогда
		ОписаниеСообщения = ПолучитьИзВременногоХранилища(АдресОписанияДанныхДокумента);
	Иначе
		ОписаниеСообщения = ОписаниеСообщенияПроизвольногоФормата(Форма, ЭлементСхемыРегламента);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОписаниеСообщения.Данные.Содержание) Тогда
		СодержаниеСообщения = ЭлектронныеДокументыЭДО.НовоеСодержаниеСообщения();
		
		СодержаниеСообщения.ТипРегламента = Перечисления.ТипыРегламентовЭДО.Неформализованный;
		СодержаниеСообщения.НомерДокумента = Форма.Объект.НомерДокумента;
		СодержаниеСообщения.ДатаДокумента = Форма.Объект.ДатаДокумента;
		СодержаниеСообщения.СуммаДокумента = Форма.Объект.СуммаДокумента;
		СодержаниеСообщения.ЕстьМаркировка = Ложь;
		
		ОписаниеСообщения.Данные.Содержание = СодержаниеСообщения;
	КонецЕсли;
	
	ОписаниеСообщения.ДополнительнаяИнформация = ЭлементСхемыРегламента.ДополнительнаяИнформация;
	
	Возврат ОписаниеСообщения;
	
КонецФункции

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра входящего/исходящего электронного документа
//  ЭлементСхемыРегламента - ДанныеФормыЭлементДерева 
// 
// Возвращаемое значение:
//  См. ЭлектронныеДокументыЭДО.НовоеОписаниеСообщения
Функция ОписаниеСообщенияПроизвольногоФормата(Форма, ЭлементСхемыРегламента)
	
	ОписаниеСообщения = ЭлектронныеДокументыЭДО.НовоеОписаниеСообщения();
	ОписаниеСообщения.ТипЭлементаРегламента = ЭлементСхемыРегламента.ТипЭлементаРегламента;
	ОписаниеСообщения.Направление = ЭлементСхемыРегламента.Направление;
	ОписаниеСообщения.ДополнительнаяИнформация = ЭлементСхемыРегламента.ДополнительнаяИнформация;
	ОписаниеСообщения.ВидСообщения = Форма.Объект.ВидДокумента;
	ОписаниеСообщения.Ссылка = ЭлементСхемыРегламента.Сообщение;
	
	Если ЗначениеЗаполнено(ЭлементСхемыРегламента.АдресФайла) Тогда
		ОписаниеСообщения.Данные.Документ.ДвоичныеДанные = ПолучитьИзВременногоХранилища(
			ЭлементСхемыРегламента.АдресФайла);
	КонецЕсли;
	ОписаниеСообщения.Данные.Документ.ИмяФайла = ЭлементСхемыРегламента.ИмяФайла;
	
	Возврат ОписаниеСообщения;
	
КонецФункции

// см. Документы.СообщениеЭДО.ИспользоватьПросмотрPDF
Функция ИспользоватьПросмотрPDF(СообщениеЭДО, ПроверятьДоступностьВыводаПДФ_А3 = Ложь)
	Возврат Документы.СообщениеЭДО.ИспользоватьПросмотрPDF(СообщениеЭДО, ПроверятьДоступностьВыводаПДФ_А3);
КонецФункции

#КонецОбласти // ПросмотрЭД

#КонецОбласти // РаботаСФормами

Функция ВыборкаРеквизитовНомерДатаОбъектовУчета(ОбъектыУчетаПоИдентификаторам)
	
	ИдентификаторыОбъектов = Новый Массив;
	
	Для Каждого ЭлементКоллекции Из ОбъектыУчетаПоИдентификаторам Цикл
		ИдентификаторыОбъектов.Добавить(ЭлементКоллекции.Ключ);
	КонецЦикла;
	
	КоллекцияМетаданныхОбъектов = ОбщегоНазначения.ОбъектыМетаданныхПоИдентификаторам(ИдентификаторыОбъектов);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1,1,1));
	
	ТекстыЗапросов = Новый Массив;
	Счетчик = 0;
	
	Для Каждого ЭлементКоллекции Из КоллекцияМетаданныхОбъектов Цикл
		
		МетаданныеОбъекта = ЭлементКоллекции.Значение;
		
		Если МетаданныеОбъекта = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		РеквизитНомер = """""";
		РеквизитДата = "&ПустаяДата";
		
		Для Каждого СтандартныйРеквизит Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
			Если СтандартныйРеквизит.Имя = "Номер" Тогда
				РеквизитНомер = "Номер";
			ИначеЕсли СтандартныйРеквизит.Имя = "Дата" Тогда
				РеквизитДата = "Дата";
			КонецЕсли;
		КонецЦикла;
		
		Если ПустаяСтрока(РеквизитНомер) И ПустаяСтрока(РеквизитДата) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстыЗапросов.Добавить(СтрШаблон("ВЫБРАТЬ Ссылка, %2 КАК Номер,%3 КАК Дата ИЗ %4 ГДЕ Ссылка В (&Ссылки%1)",
			Счетчик, РеквизитНомер, РеквизитДата, МетаданныеОбъекта.ПолноеИмя()));
		
		Запрос.УстановитьПараметр("Ссылки" + Счетчик, ОбъектыУчетаПоИдентификаторам[ЭлементКоллекции.Ключ]);
		
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
	ТекстОбъединитьВсе ="
		|ОБЪЕДИНИТЬ ВСЕ
		|";
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапросов, ТекстОбъединитьВсе);
	Запрос.Текст = ТекстЗапроса;
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РезультатЗапроса.Выбрать();
	
КонецФункции

Функция ДобавитьОписаниеРаздела(ОписаниеРазделов, Знач Имя, Знач Представление = "", Знач Видимость = Истина, Знач РассчитыватьКоличество = Истина) 
	
	НовыйРаздел = ОписаниеРазделов.Добавить();
	НовыйРаздел.Имя = Имя;
	НовыйРаздел.Представление = Представление;
	НовыйРаздел.Видимость = Видимость;
	НовыйРаздел.РассчитыватьКоличество = РассчитыватьКоличество;
	НовыйРаздел.КоличествоРассчитано = Ложь;
	
	Возврат НовыйРаздел;
	
КонецФункции

Функция КомандаПечатиОбъектаМетаданных(ОбъектМетаданных, Идентификатор)
	
	КомандыПечати = ИнтеграцияЭДО.КомандыПечатиДляВнутреннегоЭДО(ОбъектМетаданных); 
	Команда = КомандыПечати.Найти(Идентификатор, "Идентификатор");
	
	Если ЗначениеЗаполнено(Команда) Тогда
		Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Команда);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ДобавитьПечатнуюФорму(ПечатныеФормы, Знач ИмяМакета, Знач СинонимМакета, Знач ТабличныйДокумент,
	Знач Ссылка = Неопределено)
	
	Если ТабличныйДокумент = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПечатнаяФорма = Новый Структура;
	ПечатнаяФорма.Вставить("ИмяМакета", ИмяМакета);
	ПечатнаяФорма.Вставить("СинонимМакета", СинонимМакета);
	ПечатнаяФорма.Вставить("ТабличныйДокумент", ТабличныйДокумент);
	ПечатнаяФорма.Вставить("Ссылка", Ссылка);
	
	ПечатныеФормы.Добавить(ПечатнаяФорма);
	
	Возврат Истина;
	
КонецФункции

Функция МассивДействийНаЭтапе(ДействияНаЭтапе)
	
	МассивДействийНаЭтапе = Новый Массив;
	Для Каждого ДействиеНаЭтапе Из ДействияНаЭтапе Цикл
		МассивДействийНаЭтапе.Добавить(ДействиеНаЭтапе.Ключ);	
	КонецЦикла;
	
	Возврат МассивДействийНаЭтапе;
	
КонецФункции

Функция ЗапросКоличестваПодписанныхЭлектронныхДокументовПоМЧД(Доверенность)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЭлектронныеПодписиПоМЧД.ПодписанныйОбъект.ВладелецФайла.ЭлектронныйДокумент) КАК Количество
	|ИЗ
	|	РегистрСведений.ЭлектронныеПодписиПоМЧД КАК ЭлектронныеПодписиПоМЧД
	|ГДЕ
	|	ЭлектронныеПодписиПоМЧД.Доверенность = &Доверенность";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Доверенность", Доверенность);
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос;
			
КонецФункции

// Проверяет, есть ли в коллекции электронный документ.
// 
// Параметры:
//  Коллекция - Массив из ЛюбаяСсылка
// 
// Возвращаемое значение:
//  Булево
Функция ЕстьЭлектронныйДокумент(Коллекция)
	
	Для Каждого ЭлементКоллекции Из Коллекция Цикл
		Если ЭлектронныеДокументыЭДО.ЭтоЭлектронныйДокумент(ЭлементКоллекции) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает информацию отправителя.
// 
// Параметры:
// 	ЭлементСхемыРегламенты - ДанныеФормыЭлементДерева - Элемент для которого нужно найти информацию отправителя.
//
// Возвращаемое значение:
//  ДанныеФормыЭлементДерева, Неопределено - Элемент информации отправителя.
//
Функция НайтиЭлементСхемыИнформацияОтправителя(ЭлементСхемыРегламенты)
	
	Результат = Неопределено;
	
	Если ЭлементСхемыРегламенты.ТипЭлементаРегламента =
		ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя") Тогда
		
		Для Каждого ЭлементСхемы Из ЭлементСхемыРегламенты.ПолучитьЭлементы() Цикл
			Если ЭлементСхемы.ТипЭлементаРегламента = 
				ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя") Тогда
				Результат = ЭлементСхемы;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Результат = Неопределено Тогда
			РодительскийЭлементСхемыРегламента = ЭлементСхемыРегламенты.ПолучитьРодителя();
			Если РодительскийЭлементСхемыРегламента <> Неопределено
				И РодительскийЭлементСхемыРегламента.ТипЭлементаРегламента =
					ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя") Тогда
				    Результат = РодительскийЭлементСхемыРегламента;
			КонецЕсли;	
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает дополнительные сведения по результатам приемки.
// 
// Параметры:
// 	ЭлементСхемыРегламента - ДанныеФормыЭлементДерева - Элемент для которого нужно найти информацию отправителя.
//
// Возвращаемое значение:
//  ДанныеФормыЭлементДерева, Неопределено - Элемент информации отправителя.
//
Функция НайтиЭлементСхемыДополнительныеСведения(ЭлементСхемыРегламента)
	
	Результат = Неопределено;
	
	Если ЭлементСхемыРегламента.ТипЭлементаРегламента =
		ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя") Тогда
		
		Для Каждого ЭлементСхемы Из ЭлементСхемыРегламента.ПолучитьЭлементы() Цикл
			Если ЭлементСхемы.ТипЭлементаРегламента = ПредопределенноеЗначение(
					"Перечисление.ТипыЭлементовРегламентаЭДО.ДопСведенияПоРезультатамПриемки")
				И ЭлементСхемы.Статус <> ПредопределенноеЗначение(
					"Перечисление.СтатусыСообщенийЭДО.НеСформирован") Тогда
				Результат = ЭлементСхемы;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Результат = Неопределено Тогда
			РодительскийЭлементСхемыРегламента = ЭлементСхемыРегламента.ПолучитьРодителя();
			Если РодительскийЭлементСхемыРегламента <> Неопределено
				И РодительскийЭлементСхемыРегламента.ТипЭлементаРегламента = ПредопределенноеЗначение(
					"Перечисление.ТипыЭлементовРегламентаЭДО.ДопСведенияПоРезультатамПриемки")
				И РодительскийЭлементСхемыРегламента.Статус <> ПредопределенноеЗначение(
					"Перечисление.СтатусыСообщенийЭДО.НеСформирован") Тогда
					Результат = РодительскийЭлементСхемыРегламента;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Скрывает элементы интерфейса ЭДО и делает невозможным заполнение состояния ЭДО на форме списка.
// 
// Параметры:
//  ПараметрыПриСозданииНаСервере - см. ПараметрыПриСозданииНаСервере_ФормаСписка.
Процедура СкрытьЭлементыЭДОФормыСписка(ПараметрыПриСозданииНаСервере)
	
	Если ПараметрыПриСозданииНаСервере.КолонкаСостоянияЭДО <> Неопределено Тогда	
		ИмяКолонкиСостоянияЭДО = ПараметрыПриСозданииНаСервере.КолонкаСостоянияЭДО.Имя;
		ПараметрыПриСозданииНаСервере.Форма.Элементы[ИмяКолонкиСостоянияЭДО].Видимость = Ложь;
		ПараметрыПриСозданииНаСервере.КолонкаСостоянияЭДО = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Скрывает элементы интерфейса ЭДО и делает невозможным заполнение состояния ЭДО на форме объекта.
//
// Параметры:
//  ПараметрыПриЧтенииСозданииНаСервере - Структура:
//   * Форма - ФормаКлиентскогоПриложения
//   * КонтроллерСостояниеЭДО - ДекорацияФормы, РасширениеПоляФормыДляПоляНадписи, ПолеФормы - элемент для отображения 
//   	состояния ЭДО 
//   * ГруппаСостояниеЭДО - ГруппаФормы - владелец для размещения КонтроллерСостояниеЭДО
Процедура СкрытьЭлементыЭДОФормыОбъекта(ПараметрыПриЧтенииСозданииНаСервере)
	
	Если ПараметрыПриЧтенииСозданииНаСервере.ГруппаСостояниеЭДО <> Неопределено Тогда
		ИмяГруппыСостояниеЭДО = ПараметрыПриЧтенииСозданииНаСервере.ГруппаСостояниеЭДО.Имя;
		ПараметрыПриЧтенииСозданииНаСервере.Форма.Элементы[ИмяГруппыСостояниеЭДО].Видимость = Ложь;
		ПараметрыПриЧтенииСозданииНаСервере.ГруппаСостояниеЭДО = Неопределено;
	КонецЕсли;
	ПараметрыПриЧтенииСозданииНаСервере.КонтроллерСостояниеЭДО = Неопределено;
	
КонецПроцедуры

// Параметры:
//  ДатаПроверкиПодписи - Дата
//  ДатаПодписи - Дата
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоУниверсальнаяДатаПроверкиПодписи(ДатаПроверкиПодписи, ДатаПодписи)
	ОтклонениеДатыПроверкиВМинутах = (ДатаПодписи - ДатаПроверкиПодписи) / 60;
	РазмерМинимальногоЧасовогоПоясВМинутах = 15;
	Возврат ДатаПодписи > ДатаПроверкиПодписи И ОтклонениеДатыПроверкиВМинутах >= РазмерМинимальногоЧасовогоПоясВМинутах;
КонецФункции

// Параметры:
//  ОтборУчетныхЗаписей - Неопределено
//                      - см. УчетныеЗаписиЭДО.НовыйОтборУчетныхЗаписей
// 
// Возвращаемое значение:
//  Массив из Строка
Функция ИдентификаторыУчетныхЗаписейДляОтправкиПолученияДокументовЭДО(ОтборУчетныхЗаписей = Неопределено)
	
	ИдентификаторыЭДО = Новый Массив;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УчетныеЗаписиЭДО.ИдентификаторЭДО КАК ИдентификаторЭДО,
		|	УчетныеЗаписиЭДО.СпособОбменаЭД КАК СпособОбменаЭД,
		|	СертификатыУчетныхЗаписей.Сертификат КАК Сертификат
		|ИЗ
		|	УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Организации КАК Организации
		|		ПО УчетныеЗаписиЭДО.Организация = Организации.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ СертификатыУчетныхЗаписей КАК СертификатыУчетныхЗаписей
		|		ПО УчетныеЗаписиЭДО.ИдентификаторЭДО = СертификатыУчетныхЗаписей.ИдентификаторЭДО
		|ИТОГИ ПО
		|	СпособОбменаЭД,
		|	ИдентификаторЭДО";
	
	Запросы = Новый Массив;
	Запросы.Добавить(УчетныеЗаписиЭДО.ЗапросУчетныхЗаписей("УчетныеЗаписиЭДО", ОтборУчетныхЗаписей));
	Запросы.Добавить(ИнтеграцияЭДО.ЗапросДоступныхОрганизаций("Организации"));
	Запросы.Добавить(КриптографияБЭД.ЗапросДействующихСертификатов("Сертификаты"));
	Запросы.Добавить(УчетныеЗаписиЭДО.ЗапросСертификатовУчетныхЗаписей("СертификатыУчетныхЗаписей"));
	
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	
	РезультатЗапроса = ИтоговыйЗапрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		
		ВыборкаПрофиль = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПрофиль.Следующий() Цикл
			
			ВыборкаДетали = ВыборкаПрофиль.Выбрать();
			ЕстьВалидныйСертификат = ВыборкаДетали.Следующий();
			
			Если ЕстьВалидныйСертификат Тогда
				ИдентификаторыЭДО.Добавить(ВыборкаПрофиль.ИдентификаторЭДО);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС") Тогда
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЕИС");
		МодульПодсистемы.ПриФормированииИдентификаторовУчетныхЗаписейДляОтправкиПолученияДокументовЭДО(
			ИдентификаторыЭДО);
	КонецЕсли;
	
	Возврат ИдентификаторыЭДО;
	
КонецФункции

#КонецОбласти