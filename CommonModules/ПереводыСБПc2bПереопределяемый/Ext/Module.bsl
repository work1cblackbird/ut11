///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.ПереводыСБПc2b".
// ОбщийМодуль.ПереводыСБПc2bПереопределяемый.
//
// Переопределяемые серверные процедуры работы с Системой быстрых платежей:
//  - определение параметров оплаты и возврата на основании первичного документа;
//  - обработка статусов выполнения оплат и возвратов;
//  - формирование шаблонов сообщений и подготовка платежных ссылок.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ПрикладныеОперации

// Определяются данные для формирования запроса на оплату в платежную систему СБП.
// Все поля переменной ЗаказНаОплату обязательны для заполнения.
//
// Параметры:
//  ДокументОплаты - ОпределяемыйТип.ДокументОперацииСБП - документ, который отражает
//    продажу в информационной базе;
//  ЗаказНаОплату - Структура - содержит описание заказа на оплату Системы быстрых платежей:
//    * СуммаОплаты - Число - сумма оплаты в Системе быстрых платежей. Сумма, которую необходимо
//      списать со счета покупателя;
//    * ДатаОплаты - Дата - дата операции оплаты;
//    * СрокЖизниQRКода - Число - содержит значение срока действия QR-кода в целых минутах.
//      Минимальное значение - 5 минут, максимальное значение - 129 600 минут
//      (90 дней в минутах). В случае передачи значения не входящего в выше
//      описанный диапазон возвращать ошибку "НеверныйФорматЗапроса".
//      Если значение не предано используется стандартный срок использования СБП;
//    * ОтложенноеПолучениеСтатуса - Булево - признак загрузки статуса оплаты регламентным заданием;
//    * НазначениеПлатежа - Строка - информация о платеже, которая будет отображена пользователю
//      в момент сканирования QR-кода в мобильном приложении. Рекомендуется
//      делать строку не длинной и включать информацию об организации, которая
//      является получателем денежных средств, например: Оплата СБП 524,00 RUB ООО Ромашка
//      Если строка не заполнена, будет передано стандартное представление
//      назначения: Оплата СБП {ЗаказНаОплату.СуммаОплаты} RUB.
//      Длина строки не должна превышать 140 символов, в противном случае будет
//      обрезана принудительно. Система быстрых платежей имеет дополнительные требования
//      к символам и их кодировке. Возможна передача следующих значений:
//        - символы латинского алфавита (A-Z и a-z) с десятичными кодами из диапазонов
//         [065-090] и [097-122] в кодировке UTF-8;
//        - символы русского алфавита (А-Я и а-я) с десятичными кодами из диапазона
//         [1040-1103] в кодировке UTF-8;
//        - цифры 0-9 с десятичными кодами из диапазона [048-057] в кодировке UTF-8;
//        - специальные символы с десятичными кодами из диапазонов [032-047], [058-064],
//         [091-096], [123-126] в кодировке UTF-8;
//        - символ "№" под номером 8470 в кодировке UTF-8.
//    * ШаблоныНазначений - ТаблицаЗначений - настройки заполнения шаблонов платежей:
//      ** ОбъектМетаданных - Строка - имя объекта метаданных операции.
//      ** Идентификатор - Строка - идентификатор шаблона.
//      ** Наименование - Строка - наименование шаблона для пользователя.
//      ** Параметры - Структура - параметры заполнения шаблона:
//      ** Параметры - Структура - параметры заполнения шаблона:
//        *** Наименование - Строка - наименование параметра для пользователя.
//        *** Идентификатор - Строка - идентификатор параметра для заполнения.
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//    настройка выполнения операции;
//  ДополнительныеПараметры - Структура, Неопределено - дополнительные настройки формирования
//    заказа на оплату переданные при вызове функции ПереводыСБПc2b.ДинамическаяСсылка
//    или ПереводыСБПc2b.АктивироватьКассовуюСсылку.
//
Процедура ПриФормированииЗаказаНаОплатуСБП(
		ДокументОплаты,
		ЗаказНаОплату,
		НастройкаПодключения,
		ДополнительныеПараметры) Экспорт
	
	//++ Локализация
	Если ДополнительныеПараметры <> Неопределено Тогда
		
		ЗаказНаОплату.ДатаОплаты  = ДополнительныеПараметры.ДатаОплаты;
		ЗаказНаОплату.СуммаОплаты = ДополнительныеПараметры.СуммаОплаты;
		
	Иначе
		
		РеквизитыЗапроса   = Новый Структура("СуммаОплаты, ДатаОплаты", "СуммаДокумента", "Дата");
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОплаты, РеквизитыЗапроса);
		
		ЗаполнитьЗначенияСвойств(ЗаказНаОплату, РеквизитыДокумента);
		
		ЗаполнитьЗначенияСвойств(ЗаказНаОплату, Новый Структура("ОтложенноеПолучениеСтатуса", Истина));
		ЗаполнитьЗначенияСвойств(ЗаказНаОплату, Новый Структура("СрокЖизниQRКода", 			  24*60*14)); // 14 дней
		
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

// Определяются данные для формирования запроса на оплату в платежную систему СБП.
// Все поля переменной ЗаказНаОплату обязательны для заполнения.
//
// Параметры:
//  ОснованиеПлатежа - ОпределяемыйТип.ДокументОперацииСБП - документ, который является
//    основанием частичного платежа;
//  ЗаказНаОплату - Структура - содержит описание заказа на оплату Системы быстрых платежей:
//    * СрокЖизниQRКода - Число - содержит значение срока действия QR-кода в целых минутах.
//      Минимальное значение - 5 минут, максимальное значение - 129 600 минут
//      (90 дней в минутах). В случае передачи значения не входящего в выше
//      описанный диапазон возвращать ошибку "НеверныйФорматЗапроса".
//      Если значение не предано используется стандартный срок использования СБП;
//    * НазначениеПлатежа - Строка - информация о платеже, которая будет отображена пользователю
//      в момент сканирования QR-кода в мобильном приложении. Рекомендуется
//      делать строку не длинной и включать информацию об организации, которая
//      является получателем денежных средств, например: Оплата СБП 524,00 RUB ООО Ромашка
//      Если строка не заполнена, будет передано стандартное представление
//      назначения: Оплата СБП {ЗаказНаОплату.СуммаОплаты} RUB.
//      Длина строки не должна превышать 140 символов, в противном случае будет
//      обрезана принудительно. Система быстрых платежей имеет дополнительные требования
//      к символам и их кодировке. Возможна передача следующих значений:
//        - символы латинского алфавита (A-Z и a-z) с десятичными кодами из диапазонов
//         [065-090] и [097-122] в кодировке UTF-8;
//        - символы русского алфавита (А-Я и а-я) с десятичными кодами из диапазона
//         [1040-1103] в кодировке UTF-8;
//        - цифры 0-9 с десятичными кодами из диапазона [048-057] в кодировке UTF-8;
//        - специальные символы с десятичными кодами из диапазонов [032-047], [058-064],
//         [091-096], [123-126] в кодировке UTF-8;
//        - символ "№" под номером 8470 в кодировке UTF-8.
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//    настройка выполнения операции;
//  ДополнительныеПараметры - Структура, Неопределено - дополнительные настройки формирования
//    заказа на оплату переданные при вызове функции ПереводыСБПc2b.ДинамическаяСсылка
//
Процедура ПриФормированииЗаказаНаЧастичнуюОплатуСБП(
		ОснованиеПлатежа,
		ЗаказНаОплату,
		НастройкаПодключения,
		ДополнительныеПараметры) Экспорт
	
	
КонецПроцедуры

// Определяются данные для формирования запроса на возврат в платежную систему СБП.
// Все поля переменной ЗаказНаВозврат обязательны для заполнения.
//
// Параметры:
//  ДокументВозврата - ОпределяемыйТип.ДокументОперацииСБП - документ, который отражает
//   возврат в информационной базе;
//  ЗаказНаВозврат - Структура - содержит описание заказа на возврат в Системе быстрых платежей:
//    * СуммаВозврата - Число - сумма возврата в Системе быстрых платежей. Сумма, которую необходимо
//      перевести на счета покупателя;
//    *ДатаВозврата - Дата - дата операции возврата;
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//   настройка выполнения операции.;
//  ДополнительныеПараметры - Структура, Неопределено - дополнительные настройки формирования
//   заказа на оплату переданные при вызове функции ПереводыСБПc2b.ВозвратОплаты.
//
Процедура ПриФормированииЗаказаНаВозвратСБП(
		ДокументВозврата,
		ЗаказНаВозврат,
		НастройкаПодключения,
		ДополнительныеПараметры) Экспорт
	
	//++ Локализация
	Если ДополнительныеПараметры <> Неопределено Тогда
		
		ЗаказНаВозврат.ДатаВозврата  = ДополнительныеПараметры.ДатаВозврата;
		ЗаказНаВозврат.СуммаВозврата = ДополнительныеПараметры.СуммаВозврата;
		
		Если ОбщегоНазначения.СсылкаСуществует(ДокументВозврата) Тогда
			ЗаказНаВозврат.ДатаВозврата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументВозврата, "Дата");
		КонецЕсли;
		
	Иначе
		
		РеквизитыЗапроса   = Новый Структура("СуммаВозврата, ДатаВозврата", "СуммаДокумента", "Дата");
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументВозврата, РеквизитыЗапроса);
		
		ЗаполнитьЗначенияСвойств(ЗаказНаВозврат, РеквизитыДокумента);
		
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

// Определяет алгоритм обработки операции, статус которых был получен регламентным заданием.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииСБП - документ, который отражает
//   операцию в информационной базе;
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//    настройка выполнения операций;
//  РезультатОбработки - Структура - результат загрузки статуса операции:
//    * СтатусОперации - Строка - текущее состояние операции операции. Для проверки статуса
//      операции, необходимо функции программного интерфейса общего модуля
//      СистемаБыстрыхПлатежейКлиентСервер. Возможные значения:
//        - "Отменена" - по ранее сформированная операция отменена НСПК;
//        - "Выполнена" - участник СБП подтвердил выполнение операции;
//        - "Ошибка" - не удалось выполнить проверку статуса операции из-за ошибки
//           или участник СБП вернул ошибку;
//    * ПараметрыОперации - Структура - дополнительные данные по оплате:
//        ** ДатаОперации - Дата - фактическая дата оплаты в UTC;
//        ** СуммаОперации - Число - фактическая суммы операции по документу;
//        ** ИдентификаторОперации - Строка - идентификатор сформированной операции;
//        ** ДокументЧастичнойОплаты - Документ.ПлатежнаяСсылкаСБПc2b - документ частичной оплаты;
//        ** ИдентификаторОплаты- Строка - идентификатор оплаты;
//    * СообщениеОбОшибке - Строка - сообщение пользователю. Заполняется в случае ошибки.
//  Обработан - Булево - признак обработки операции. Необходимо установить Истина,
//   после завершения обработки.
//
Процедура ПриЗагрузкеСтатусаОперации(
		ДокументОперации,
		НастройкаПодключения,
		РезультатОбработки,
		Обработан) Экспорт
	
	//++ Локализация
	НачатьТранзакцию();
	
	Попытка
		
		СтатусОплаты = Перечисления.ТипыСтатусовОплатыСБП.Ошибка;
		Если РезультатОбработки.СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииВыполнена() Тогда
			СтатусОплаты = Перечисления.ТипыСтатусовОплатыСБП.Выполнена;
		ИначеЕсли РезультатОбработки.СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииОтменена() Тогда
			СтатусОплаты = Перечисления.ТипыСтатусовОплатыСБП.Отменена;
		КонецЕсли;
		
		Если ТипЗнч(ДокументОперации) = Тип("ДокументСсылка.ЧекККМ")
			ИЛИ ТипЗнч(ДокументОперации) = Тип("ДокументСсылка.РеализацияПодарочныхСертификатов") Тогда
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить();
			Если ТипЗнч(ДокументОперации) = Тип("ДокументСсылка.ЧекККМ") Тогда
				ЭлементБлокировки.Область = "Документ.ЧекККМ";
			Иначе
				ЭлементБлокировки.Область = "Документ.РеализацияПодарочныхСертификатов";
			КонецЕсли;
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ДокументОперации);
			Блокировка.Заблокировать();
			
			ДокументОперацииОбъект = ДокументОперации.ПолучитьОбъект();
			
			// В отложенном чеке может быть только оплата СБП
			Для Каждого СтрокаОплатыПлатежнойКартой Из ДокументОперацииОбъект.ОплатаПлатежнымиКартами Цикл
				
				СтрокаОплатыПлатежнойКартой.СтатусОплатыСБП = СтатусОплаты;
				Если СтатусОплаты = Перечисления.ТипыСтатусовОплатыСБП.Выполнена Тогда
					СтрокаОплатыПлатежнойКартой.Сумма = РезультатОбработки.ПараметрыОперации.СуммаОперации;
					ПараметрыОперации = Новый Структура;
					ПараметрыОперации.Вставить("ИдентификаторОперации", РезультатОбработки.ПараметрыОперации.ИдентификаторОперации);
					ПараметрыОперации.Вставить("ИдентификаторОплаты", РезультатОбработки.ПараметрыОперации.ИдентификаторОплаты);
					СтрокаОплатыПлатежнойКартой.СсылочныйНомер = ПереводыСБПc2b.ИдентификаторыОперации(ПараметрыОперации);
				ИначеЕсли СтатусОплаты = Перечисления.ТипыСтатусовОплатыСБП.Ошибка Тогда
					СтрокаОплатыПлатежнойКартой.ТекстОшибки = РезультатОбработки.СообщениеОбОшибке;
				КонецЕсли;
				
			КонецЦикла;
			
			// Если срок жизни QR-кода оплаты сгорел, очищаем оплату СБП для возможности повторной оплаты
			Если СтатусОплаты = Перечисления.ТипыСтатусовОплатыСБП.Отменена Тогда
				ДокументОперацииОбъект.ОплатаПлатежнымиКартами.Очистить();
			КонецЕсли;
			
			ДокументОперацииОбъект.Записать();
			
		Иначе
			
			Если СтатусОплаты = Перечисления.ТипыСтатусовОплатыСБП.Выполнена Тогда
				
				ДокументОперацииОбъект = Документы.ОперацияПоПлатежнойКарте.СоздатьДокумент();
				ДокументОперацииОбъект.Заполнить(ДокументОперации);
				ДокументОперацииОбъект.Дата = МестноеВремя(РезультатОбработки.ПараметрыОперации.ДатаОперации, ЧасовойПоясСеанса());
				ДокументОперацииОбъект.ДоговорЭквайринга = РозничныеПродажиЛокализация.ДоговорПодключения(НастройкаПодключения);
				ДокументОперацииОбъект.ЭквайринговыйТерминал = Неопределено;
				ДокументОперацииОбъект.СуммаДокумента = РезультатОбработки.ПараметрыОперации.СуммаОперации;
				
				ВалютаРеглУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(
					ДокументОперацииОбъект.Организация);
				СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеОплатыОтКлиента;
				
				ФинансыКлиентСервер.ПересчитатьСуммыВСтрокеРасшифровкиПлатежа(
					ДокументОперацииОбъект,
					ДокументОперацииОбъект.СуммаДокумента,
					Ложь);
				
				Если ДокументОперацииОбъект.РасшифровкаПлатежа.Количество() > 0 Тогда
					СтрокаРасшифровкиПлатежа = ДокументОперацииОбъект.РасшифровкаПлатежа[0];
					СтрокаРасшифровкиПлатежа.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
					
					ДенежныеСредстваКлиентСервер.РассчитатьСуммуВзаиморасчетовВСтрокеРасшифровки(
						СтрокаРасшифровкиПлатежа,
						ДокументОперацииОбъект.Валюта,
						ВалютаРеглУчета);
				КонецЕсли;

				ПараметрыОперации = Новый Структура;
				ПараметрыОперации.Вставить("ИдентификаторОперации", РезультатОбработки.ПараметрыОперации.ИдентификаторОперации);
				ПараметрыОперации.Вставить("ИдентификаторОплаты", РезультатОбработки.ПараметрыОперации.ИдентификаторОплаты);
				ДокументОперацииОбъект.ИдентификаторОплатыСБП = ПереводыСБПc2b.ИдентификаторыОперации(ПараметрыОперации);
				ДокументОперацииОбъект.ОплатаВыполнена = Истина;

				ДокументОперацииОбъект.Записать(РежимЗаписиДокумента.Проведение);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Обработан = Истина;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru='ПереводыСБПc2bПереопределяемый.ПриЗагрузкеСтатусаОперации'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.ОбщиеМодули.ПереводыСБПc2bПереопределяемый,,
			ОБработкаОШибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		Обработан = Ложь;
			
	КонецПопытки;
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область ШаблоныСообщений

// Возвращает признак использования шаблонов сообщений для работы с СБП.
//
// Параметры:
//  Используется - Булево - признак использования шаблонов сообщений.
//
//@skip-warning
Процедура ПриПроверкеИспользованияШаблоновСообщенийСБП(Используется) Экспорт
	
	//++ Локализация
	РозничныеПродажиЛокализация.ПриПроверкеИспользованияШаблоновСообщенийСБП(Используется);
	//-- Локализация
	
КонецПроцедуры

// Описывает предопределенные шаблоны писем по типу,
// с помощью которых можно будет выставлять счета для оплаты через СБП.
// Эти шаблоны будут доступны для создания из основной формы настроек и использоваться
// в форме формирования платежной ссылки СБП.
// Добавлены реквизиты:
//   * ПредставлениеСсылкиСБПQRКод - вставляет платежную ссылку в виде картинки (Base64).
//   * ПредставлениеСсылкиСБП - вставляет платежную ссылку в виде строки.
//
// Параметры:
//  Шаблоны - Массив - Массив структур данных, описывающих предопределенные шаблоны сообщения.
//    * ПолноеИмяТипаНазначения - Строка - Полное имя объекта метаданных, на основании которого по данному шаблону
//        будут создаваться письма.
//    * Текст - Строка - Текст, который будет использоваться в качестве шаблона письма в формате HTML.
//    * Тема - Строка - Текст, который будет использоваться в качестве шаблона темы письма.
//    * Наименование - Строка - Текст, наименование шаблона письма.
//    * Тип - Строка - Тип шаблона. Возможные значения:"Почта" или "SMS".
//
//@skip-warning
Процедура ПриОпределенииПредопределенныхШаблоновСообщенийСБППоТипам(Шаблоны) Экспорт 
	
	//++ Локализация
	РозничныеПродажиЛокализация.ПриОпределенииПредопределенныхШаблоновСообщенийСБППоТипам(Шаблоны);
	//-- Локализация
	
КонецПроцедуры

// Определяет параметры отправки сообщений с использованием шаблонов СБП.
//
// Параметры:
//  ПараметрыОтправкиСообщений - Структура - описание параметров отправки сообщений:
//    * ПараметрыОтправкиПисем - Структура - описание параметров отправки электронных писем:
//       ** ОтправлятьПисьмаВФорматеHTML - Булево, Неопределено - признак отправки электронных писем в формате HTML.
//          Если свойство не задано, в дальнейшем при наличии подсистемы "Взаимодействия" будет получено значение
//          функциональной опции "ОтправлятьПисьмаВФорматеHTML", либо Ложь при ее отсутствии.
//
//@skip-warning
Процедура ПриОпределенииПараметровОтправкиСообщенийСБП(
		ПараметрыОтправкиСообщений) Экспорт
	
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСКассовымиСслками

// Заполняет список кассовых ссылок по параметрам настройки.
//
// Параметры:
//  ПараметрыНастройки - Структура - содержит в себе описание настроек подключения:
//    * НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//      настройка подключения к Системе быстрых платежей.
//  ДанныеКассовыхСсылок -  Структура - содержит описание настроенных кассовых ссылок по параметрам настройки
//    * Количество - Число - количество кассовых ссылок по преданной настройке подключения.
//
Процедура ПриОпределенииДанныхКассовыхСсылок(
		ПараметрыНастройки,
		ДанныеКассовыхСсылок) Экспорт
	
	
КонецПроцедуры

#КонецОбласти
#Область ФормаПодготовкиПлатежнойСсылки

// Определяет объекты, которые могут выступать в качестве оснований платежа через СБП.
//
// Параметры:
//  ИменаДокументовОперации - Массив Из Строка - имена объектов метаданных оснований платежа через СБП.
//
//@skip-warning
Процедура ПриОпределенииОбъектовСКомандамиСБП(ИменаДокументовОперации) Экспорт
	
	ИменаДокументовОперации.Добавить("Документ.ЗаказКлиента");
	ИменаДокументовОперации.Добавить("Документ.СчетНаОплатуКлиенту");
	ИменаДокументовОперации.Добавить("Документ.АктВыполненныхРабот");
	ИменаДокументовОперации.Добавить("Документ.РеализацияТоваровУслуг");
	ИменаДокументовОперации.Добавить("Документ.РеализацияУслугПрочихАктивов");
	
КонецПроцедуры

// Определяет возможность формирования платежной ссылки на основании данных документа операции.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииСБП - документ, который отражает
//    операцию в информационной базе.
//  Результат - Структура - результат проверки:
//    * ИнтеграцияДоступна - Булево - признак доступности работы с СБП по данным документа операции.
//    * СообщениеОбОшибке - Строка - сообщение для пользователя. Отображается в случае, если в параметр
//    ИнтеграцияДоступна установлено значение Ложь.
//
//@skip-warning
Процедура ПриОпределенииДоступностиПодключенияПоДокументуОперации(
		ДокументОперации,
		Результат) Экспорт
	
	МассивРеквизитовДокумента = Новый Массив;
	МассивРеквизитовДокумента.Добавить("Контрагент.ЮрФизЛицо");
	МассивРеквизитовДокумента.Добавить("Проведен");
	Если ТипЗнч(ДокументОперации) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		МассивРеквизитовДокумента.Добавить("ХозяйственнаяОперация");
		МассивРеквизитовДокумента.Добавить("ПорядокРасчетов");
	ИначеЕсли ТипЗнч(ДокументОперации) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		МассивРеквизитовДокумента.Добавить("ХозяйственнаяОперация");
	КонецЕсли;
	РеквизитыДокументаОперации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОперации, СтрСоединить(МассивРеквизитовДокумента,","));

	Если ТипЗнч(ДокументОперации) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		Если РеквизитыДокументаОперации.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда	
			Результат.ИнтеграцияДоступна = Ложь;
			Результат.СообщениеОбОшибке = НСтр("ru = 'Оплата заказа клиента через СБП при передаче на комиссию не поддерживается.'");
		ИначеЕсли РеквизитыДокументаОперации.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным Тогда	
			Результат.ИнтеграцияДоступна = Ложь;
			Результат.СообщениеОбОшибке = НСтр("ru = 'Оплата заказа клиента через СБП с порядком расчетов по накладным не поддерживается.'");
		КонецЕсли;
	ИначеЕсли ТипЗнч(ДокументОперации) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Если РеквизитыДокументаОперации.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда	
			Результат.ИнтеграцияДоступна = Ложь;
			Результат.СообщениеОбОшибке = НСтр("ru = 'Оплата через СБП при передаче на комиссию не поддерживается.'");
		КонецЕсли;
	КонецЕсли;
	Если Результат.ИнтеграцияДоступна Тогда
		Если Не (РеквизитыДокументаОперации.КонтрагентЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо) Тогда	
			Результат.ИнтеграцияДоступна = Ложь;
			Результат.СообщениеОбОшибке = НСтр("ru = 'Оплата через СБП возможна только для физических лиц.'");
		ИначеЕсли РеквизитыДокументаОперации.Проведен = Ложь Тогда	
			Результат.ИнтеграцияДоступна = Ложь;
			Результат.СообщениеОбОшибке = НСтр("ru = 'Для оплаты через СБП необходимо провести документ.'");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Определяет перечень возможных настроек подключения на основании данных документа операции.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииСБП - документ, который отражает
//    операцию в информационной базе.
//  НастройкиПодключения - Массив Из СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//    настройка подключения к СБП.
//  ДополнительныеНастройки - Структура - дополнительные настройки подключения СБП
//   * БИК - Строка, Неопределено - идентификатор банка. Используется для автоматического
//     выбора участника СБП.
//   * ДополнительныеПараметры - Структура, Неопределено - дополнительные параметры подключения.
//     Значение будет передано в переопределяемые методы:
//       - СистемаБыстрыхПлатежейПереопределяемый.ПриНастройкеЭлементовФормыПодключения;
//       - СистемаБыстрыхПлатежейПереопределяемый.ПриНастройкеЭлементовФормыПодключения.
//   * ОтборУчастников - Строка, Неопределено - Параметры отбора участников СБП.
//     Допустимые значения - "Банки", "ПлатежныеАгрегаторы", "КассовыеСсылки", Неопределено.
//     Неопределено по умолчанию.
//   * МаксимальнаяСуммаОплаты - Число- определяет максимальную сумму оплаты по данным документа.
//  ПараметрыВопроса - Структура - настройки отображения вопроса, который будет выведен пользователю
//    перед началом формирования платежной ссылки или началом подключения к СБП.
//    Вопрос не выводится, если параметр "ТекстВопроса" имеет значение Неопределено.
//    * ТекстВопроса - Строка, Неопределено - текст вопроса для отображения.
//
//@skip-warning
Процедура ПриОпределенииПараметровПодключенияДокументаОперации(
		ДокументОперации,
		НастройкиПодключения,
		ДополнительныеНастройки,
		ПараметрыВопроса) Экспорт
	
	ТребуетсяПроверкаДокументаОснования = Ложь;
	
	РеквизитыДокументаОперации = Новый Массив;
	РеквизитыДокументаОперации.Добавить("Организация");
	Если ТипЗнч(ДокументОперации) = Тип("ДокументСсылка.СчетНаОплатуКлиенту") Тогда
		РеквизитыДокументаОперации.Добавить("ДокументОснование");
		Если РегистрыСведений.ИдентификаторыОперацийСБПc2b.ИдентификаторыОперацииСБП(ДокументОперации) = Неопределено Тогда 
			ТребуетсяПроверкаДокументаОснования = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ЗначенияРеквизитовДокументаОперации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОперации, РеквизитыДокументаОперации);
	
	ТаблицаПодключенийСБППоОрганизации = Справочники.НастройкиРМК.СписокДоговоровИПодключенийСБП(ЗначенияРеквизитовДокументаОперации.Организация);
	Для Каждого Строка Из ТаблицаПодключенийСБППоОрганизации Цикл
		Если НастройкиПодключения.Найти(Строка.НастройкаПодключения) = Неопределено Тогда
			НастройкиПодключения.Добавить(Строка.НастройкаПодключения);
		КонецЕсли;
	КонецЦикла;
	
	Если ТребуетсяПроверкаДокументаОснования 
		И ЗначениеЗаполнено(ЗначенияРеквизитовДокументаОперации.ДокументОснование) Тогда
		
		Если Не РегистрыСведений.ИдентификаторыОперацийСБПc2b.ИдентификаторыОперацииСБП(ЗначенияРеквизитовДокументаОперации.ДокументОснование) = Неопределено Тогда 
			
			ПараметрыВопроса.ТекстВопроса = НСтр("ru = 'Для документа основания уже сформирована ссылка на оплату СБП. Продолжить?'");	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ФормаОтображенияQRКода

// Определяет алгоритм, выполняющийся при создании формы отображения QR-кода на форме подготовки платежной ссылки СБП.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма отображения QR-кода.
//  НастройкиФормы - Структура - описание настроек формы для размещения
//    программно созданных объектов.
//    * Группа - ГруппаФормы - элемент формы для программного добавления новых элементов управления,
//        в качестве свойства "Действие" у программно создаваемых команд,
//        необходимо указать значение "Подключаемый_ПриОбработкеНажатияКоманды".
//  ДанныеПлатежнойСсылки - Структура - параметры выполнения команды:
//    * ПлатежнаяСсылка - Строка - ссылка сформированная по данным документа операции.
//    * QRКод - ДвоичныеДанные - данные изображения QR-кода.
//    * ОснованиеПлатежа - ОпределяемыйТип.ДокументОперацииСБП - документ, который отражает
//      оплату в информационной базе.
//
//@skip-warning
Процедура ПриСозданииНаСервереФормыQRКода(
		Форма,
		НастройкиФормы,
		ДанныеПлатежнойСсылки) Экспорт
	
	//++ Локализация
	
	// Добавляем реквизиты, которые используются БПО при вызове метода МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы
	Реквизиты = Новый Массив;	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ИспользоватьПодключаемоеОборудование") Тогда
		Массив = Новый Массив;
		Массив.Добавить(Тип("Булево"));	
		Реквизиты.Добавить(Новый РеквизитФормы("ИспользоватьПодключаемоеОборудование", Новый ОписаниеТипов(Массив)));
	КонецЕсли;
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПоддерживаемыеТипыПодключаемогоОборудования") Тогда
		КвалификаторТипаСтроки = Новый КвалификаторыСтроки(0);
		Массив = Новый Массив;
		Массив.Добавить(Тип("Строка"));
		Реквизиты.Добавить(Новый РеквизитФормы("ПоддерживаемыеТипыПодключаемогоОборудования", Новый ОписаниеТипов(Массив, , КвалификаторТипаСтроки)));
	КонецЕсли;
	Если Реквизиты.Количество() Тогда
		Форма.ИзменитьРеквизиты(Реквизиты);
	КонецЕсли;
	Форма.ИспользоватьПодключаемоеОборудование = ПолучитьФункциональнуюОпцию("ИспользоватьПодключаемоеОборудованиеИОплатуПлатежнымиКартами");
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область ФормаПодключениеКассовойСсылки

// Определяет алгоритм, выполняющийся при создании формы подключения кассовой ссылки.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма подключения кассовой ссылки.
//  Отказ - Булево - признак отказа от открытия формы.
//
Процедура ПриСозданииНаСервереФормыПодключенияСсылки(Форма, Отказ) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#Область ОтправкаСообщений

// Заполняет список получателей сообщения с платежной ссылкой.
//
// Параметры:
//  ДокументОперации - Произвольный - документ операции, для которого получена платежная ссылка.
//  ВариантОтправки - Строка - способ отправки ссылки. "ЭлектроннаяПочта" - по электронной почте, "Телефон" - по SMS.
//  Получатели - СписокЗначений - адреса электронной почты или номера телефонов получателей (строка).
//
//@skip-warning
Процедура ПриФормированииСпискаПолучателейСообщенияСБП(
		Знач ДокументОперации,
		Знач ВариантОтправки,
		Получатели) Экспорт
	
	//++ Локализация
	РозничныеПродажиЛокализация.ПриФормированииСпискаПолучателейСообщенияСБП(ДокументОперации, ВариантОтправки, Получатели);
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
