////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы библиотеки УправлениеТорговлей.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область СведенияОБиблиотекеИлиКонфигурации

// Заполняет основные сведения о библиотеке или основной конфигурации.
// Библиотека, имя которой имя совпадает с именем конфигурации в метаданных, определяется как основная конфигурация.
// 
// Параметры:
//  Описание - Структура - сведения о библиотеке:
//
//   * Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//   * Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.1".
//
//   * ТребуемыеПодсистемы - Массив - имена других библиотек (Строка), от которых зависит данная библиотека.
//                                    Обработчики обновления таких библиотек должны быть вызваны ранее
//                                    обработчиков обновления данной библиотеки.
//                                    При циклических зависимостях или, напротив, отсутствии каких-либо зависимостей,
//                                    порядок вызова обработчиков обновления определяется порядком добавления модулей
//                                    в процедуре ПриДобавленииПодсистем общего модуля
//                                    ПодсистемыКонфигурацииПереопределяемый.
//   * РежимВыполненияОтложенныхОбработчиков - Строка - "Последовательно" - отложенные обработчики обновления выполняются
//                                    последовательно в интервале от номера версии информационной базы до номера
//                                    версии конфигурации включительно или "Параллельно" - отложенный обработчик после
//                                    обработки первой порции данных передает управление следующему обработчику, а после
//                                    выполнения последнего обработчика цикл повторяется заново.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя    = "УправлениеТорговлей" + ?(СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации(), "Базовая", "");
	Описание.Версия = "11.5.20.68";
	Описание.РежимВыполненияОтложенныхОбработчиков = "Параллельно";
	Описание.ИдентификаторИнтернетПоддержки = ?(СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации(), "TradeBase", "Trade");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОбновленияИнформационнойБазы

// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	ОбновлениеИнформационнойБазыУТ.ПриДобавленииОбработчиковОбновленияУТ(Обработчики);
	ЗакрытиеМесяцаСервер.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.ЗапасыИПотребности.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.НастройкиХозяйственныхОпераций.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ЗаказНаВнутреннееПотребление.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ЗаявкаНаРасходованиеДенежныхСредств.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.СверкаВзаиморасчетов2_5_11.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.СписаниеБезналичныхДенежныхСредств.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.ДвиженияДенежныеСредстваКонтрагент.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.УдалитьРегистраторГрафикаДвиженияТоваров.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.РасчетыСКлиентами.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.РасчетыСКлиентамиПоСрокам.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.РасчетыСПоставщиками.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.РеестрДокументов.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.СуммыДокументовВВалютахУчета.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.ТоварыКПоступлению.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.РаспределениеЗапасов.ПриДобавленииОбработчиковОбновления(Обработчики);
	
	Справочники.ГруппыФинансовогоУчетаРасчетов.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.Организации.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ЧекККМ.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ЧекККМВозврат.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ЧекККМКоррекции.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.РеализацияПодарочныхСертификатов.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ВозвратПодарочныхСертификатов.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.ИсправленияДокументов.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.СтатьиДвиженияДенежныхСредств.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.ОбъектыРасчетов.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.ДенежныеСредстваКВыплате.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.ДенежныеСредстваБезналичные.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.ГрафикПлатежей.ПриДобавленииОбработчиковОбновления(Обработчики);
	
	Документы.ПриходныйКассовыйОрдер.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.РасходныйКассовыйОрдер.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.Кассы.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.РаспоряженияНаОтгрузку.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ОтчетОРозничныхВозвратах.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.РаспоряженияНаОтгрузкуКВыполнению.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.ДоговорыКонтрагентов.ПриДобавленииОбработчиковОбновления(Обработчики); 
	Справочники.НомераГТД.ПриДобавленииОбработчиковОбновления(Обработчики);
	КомиссионнаяТорговляСервер.ПриДобавленииОбработчиковОбновления(Обработчики);
	ПодключаемоеОборудованиеУТСервер.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ПрочиеДоходыРасходы.ПриДобавленииОбработчиковОбновления(Обработчики);
	ПланыВидовХарактеристик.СтатьиРасходов.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ПрочееОприходованиеТоваров.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.ДанныеПоследнихОповещений.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.ОбъектыПроблемСостоянияСистемы.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.ОчередьСобытийДляОповещенийКлиентам.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.ОшибкиВыполненияОтложенныхЗаданий.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ВводОстатковРасчетовПоЭквайрингу.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ВводОстатковДенежныхСредств.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.ДоговорыЭквайринга.ПриДобавленииОбработчиковОбновления(Обработчики);
	
	Справочники.ВидыРетроБонусовКлиентов.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.УсловияРетроБонусовКлиентов.ПриДобавленииОбработчиковОбновления(Обработчики);
	
	Документы.ПоступлениеБезналичныхДенежныхСредств.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.ДвиженияДенежныеСредстваДоходыРасходы.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.ДвиженияДоходыРасходыПрочиеАктивыПассивы.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.ДвиженияКонтрагентДоходыРасходы.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.ДвиженияНоменклатураДоходыРасходы.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.ДвиженияПоПрочимАктивамПассивам.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.МатериалыИРаботыВПроизводстве.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.ПартииНДСКРаспределению.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.ПартииПрочихРасходов.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.ПрочиеАктивыПассивы.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.СебестоимостьТоваров.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.ТоварыОрганизаций.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.АвансовыйОтчет.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.Бронирование.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ВводОстатков.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ВводОстатковПрочихАктивовПассивов.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ВнутреннееПотребление.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ДвижениеПрочихАктивовПассивов.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.КорректировкаЗадолженности.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.КорректировкаЗадолженностиПоФинансовымИнструментам.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.КорректировкаПриобретения.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.КорректировкаРеализации.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.НачисленияКредитовИДепозитов.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ОприходованиеИзлишковТоваровУХранителя.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ОтчетОСписанииТоваровУХранителя.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ПересортицаТоваровУХранителя.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ПорчаТоваровУХранителя.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ПриобретениеУслугПрочихАктивов.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.РеализацияУслугПрочихАктивов.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.СписаниеНДСНаРасходы.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.СписаниеНедостачТоваров.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.СписаниеРасхожденийПоступлениеПриобретение.ПриДобавленииОбработчиковОбновления(Обработчики);
	
	Справочники.ВидыНалоговВзносов.ПриДобавленииОбработчиковОбновления(Обработчики);
КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры

// Вызывается после завершения обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления,
//                                             сгруппированных по номеру версии.
//   ВыводитьОписаниеОбновлений - Булево - (возвращаемое значение) если установить Истина,
//                                то будет выведена форма с описанием обновлений. По умолчанию, Истина.
//   МонопольныйРежим           - Булево - Истина, если обновление выполнялось в монопольном режиме.
//
// Пример обхода выполненных обработчиков обновления:
//
//	Для Каждого Версия Из ВыполненныеОбработчики.Строки Цикл
//		
//		Если Версия.Версия = "*" Тогда
//			// Обработчик, который может выполнятся при каждой смене версии.
//		Иначе
//			// Обработчик, который выполняется для определенной версии.
//		КонецЕсли;
//		
//		Для Каждого Обработчик Из Версия.Строки Цикл
//			...
//		КонецЦикла;
//		
//	КонецЦикла;
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
	ВыводитьОписаниеОбновлений = НЕ ПолучитьФункциональнуюОпцию("УправлениеПредприятием");
	
	ПараметрЗапускаНаСервере = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("ПараметрЗапуска");
	Если ПараметрЗапускаНаСервере<>Неопределено Тогда
		Если Найти(ПараметрЗапускаНаСервере,"Trade103Data")<>0 Тогда
			ВыводитьОписаниеОбновлений = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы ПредыдущееИмяКонфигурации. 
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации = "УправлениеТорговлейБазовая";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТ.ПерейтиСБазовойВерсииНаПРОФ";
	
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура: 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует
//        указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, 
	Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
	Если ПредыдущееИмяКонфигурации = "УправлениеТорговлейБазовая" Тогда
		Параметры.ОчиститьСведенияОПредыдущейКонфигурации = Ложь;
		Параметры.ВерсияКонфигурации = ПредыдущаяВерсияКонфигурации;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПереименованныеОбъектыМетаданных

// Заполняет переименования объектов метаданных (подсистемы и роли).
// Подробнее см. ОбщегоНазначенияПереопределяемый.ПриДобавленииПереименованийОбъектовМетаданных.
// 
// Параметры:
//   Итог	- Структура - передается в процедуру подсистемой БазоваяФункциональность.
//
Процедура ПриДобавленииПереименованийОбъектовМетаданных(Итог) Экспорт
	
	ОписаниеПодсистемы = Новый Структура("Имя, Версия, РежимВыполненияОтложенныхОбработчиков, ИдентификаторИнтернетПоддержки");
	ПриДобавленииПодсистемы(ОписаниеПодсистемы);
	
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"11.3.1.12",
		"Роль.ОтчетыИОбработкиСупервайзераТорговыхПредставлителей",
		"Роль.ОтчетыИОбработкиСупервайзераТорговыхПредставителей",
		ОписаниеПодсистемы.Имя);
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"11.3.1.13",
		"Роль.РазделФинансовыйРезультатИКонтроллинг",
		"Роль.ПодсистемаФинансовыйРезультатИКонтроллинг",
		ОписаниеПодсистемы.Имя);
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"11.4.1.19",
		"Роль.ДобавлениеИзменениеАссортиментаИЦенПартнеров",
		"Роль.ДобавлениеИзменениеЦенПартнеров",
		ОписаниеПодсистемы.Имя);
	
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"11.5.1.38",
		"Роль.ПропускКонтроляТоваровОрганизацийПриОтменеПриходов",
		"Роль.РазрешитьОтключениеКонтроляТоваровОрганизацийНаВремяСеанса",
		ОписаниеПодсистемы.Имя);
	
КонецПроцедуры

#КонецОбласти

#Область УниверсальныеПроцедурыОбновления

// Используется для записи движений
//
// Параметры:
//   МенеджерРегистра - РегистрыСведенийМенеджер - 
//   ИмяРегистра - Строка - имя регистра.
//   Ссылка  - ДокументСсылка - ссылка на документ.
//   ТаблицыДляДвижений - Массив - массив, содержащий таблицы значений с движениями, которые необходимо записать.
//   РегистрироватьНаУзлахПлановОбмена - Булево - включает регистрацию на узлах планов обмена при записи объекта.
//
Процедура ЗаписатьНаборЗаписей(МенеджерРегистра, ИмяРегистра, Ссылка, ТаблицыДляДвижений = Неопределено, РегистрироватьНаУзлахПлановОбмена = Ложь) Экспорт

	НаборЗаписей = МенеджерРегистра[ИмяРегистра].СоздатьНаборЗаписей(); // РегистрСведенийНаборЗаписей - 
	НаборЗаписей.Отбор.Регистратор.Установить(Ссылка);
	Если ТаблицыДляДвижений <> Неопределено Тогда
		НаборЗаписей.Загрузить(ТаблицыДляДвижений["Таблица" + ИмяРегистра]);
	КонецЕсли; 
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей, РегистрироватьНаУзлахПлановОбмена);
	
КонецПроцедуры

// Используется для записи движений
//
// Параметры:
//   МенеджерРегистров                 - РегистрНакопленияМенеджер, РегистрСведенийМенеджер -
//   ИменаРегистров                    - Массив - массив, содержащий имена регистров.
//   Ссылка                      	   - ДокументСсылка - ссылка на документ.
//   ТаблицыДляДвижений                - Массив - массив, содержащий таблицы значений с движениями, которые необходимо записать.
//   РегистрироватьНаУзлахПлановОбмена - Булево - включает регистрацию на узлах планов обмена при записи объекта.
// 
Процедура ЗаписатьНаборыЗаписей(МенеджерРегистров, ИменаРегистров, Ссылка, ТаблицыДляДвижений = Неопределено, РегистрироватьНаУзлахПлановОбмена = Ложь) Экспорт

	Регистры = Новый Структура(ИменаРегистров);
	
	Для Каждого Регистр Из Регистры Цикл
		ЗаписатьНаборЗаписей(МенеджерРегистров, Регистр.Ключ, Ссылка, ТаблицыДляДвижений, РегистрироватьНаУзлахПлановОбмена);
	КонецЦикла;
	
КонецПроцедуры

/// Дополнительные параметры функции ПерезаписатьДвиженияИзОчереди()
// 
// Возвращаемое значение:
//  Структура - структура со свойствами:
//      * ЭтоНезависимыйРегистрСведений - Булево - в параметре Данные функции передана таблица со значениями измерений,
//                                                 по которым нужно обновлять данные, Значение по умолчанию - ЛОЖЬ.
//      * ИмяИзмеренияДляОтбора - Строка - имя измерения независимого регистра сведений, по которому будет установлен
//                                          отбор для перезаписи набора записей по документу (аналог регистратора для
//                                          регистров, подчиненных регистраторам).
//      * ОбновляемыеДанные - ВыборкаИзРезультатаЗапроса, ТаблицаЗначений - 
//      * ПередатьДополнительныеСвойства - Булево - признак необходимости передать набору записей дополнительные свойства.
//      * ДополнительныеСвойстваНабораЗаписей - Неопределено, Структура - структура передаваемых набору записей дополнительных свойств.
//
Функция ДополнительныеПараметрыПерезаписиДвиженийИзОчереди() Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЭтоНезависимыйРегистрСведений",Ложь);
	ДополнительныеПараметры.Вставить("ИмяИзмеренияДляОтбора","");
	ДополнительныеПараметры.Вставить("ПоляУпорядочивания", Новый Массив);
	ДополнительныеПараметры.Вставить("Менеджер", Неопределено);
	ДополнительныеПараметры.Вставить("НужнаДополнительнаяОбработкаЗаписей", Ложь);
	ДополнительныеПараметры.Вставить("ЗаписыватьВОднойТранзакции", Ложь);
	ДополнительныеПараметры.Вставить("ОбновляемыеДанные");
	ДополнительныеПараметры.Вставить("ПередатьДополнительныеСвойства", Ложь);
	ДополнительныеПараметры.Вставить("ДополнительныеСвойстваНабораЗаписей", Неопределено);
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

// На основе данных о необходимости переформирования движений перезаписывает движения документа.
//	Для работы функции необходимо, чтобы процедура ИнициализироватьДанныеДокумента модуля менеджера документа, поддерживала параметр Регистры.
//	см. например, Документ.ПриходныйОрдерНаТовары.ИнициализироватьДанныеДокумента.
//
// Параметры:
//  ПолныеИменаДокументов				 - Строка, Массив, Неопределено - имя документа, по которому нужно переформировать движения. Например, "Документ.ПриходныйОрдерНаТовары"
//																Если документов несколько, то нужно передать их имена в массиве.
//																При обработке независимого регистра сведений нужно передать Неопределено.
//  ПолныеИменаРегистров				 - Строка, Массив - имя регистра, по которому нужно переформировать движения. Например, "РегистрНакопления.ТоварыНаСкладах"
//																Если регистров несколько, то их имена нужно передать в массиве.
//  Очередь								 - Число - очередь отложенной обработки данных для контроля данных на предмет блокировки другими обработчиками
//  ДополнительныеПараметры	 - см. ОбновлениеИнформационнойБазыУТ.ДополнительныеПараметрыПерезаписиДвиженийИзОчереди.
// 
// Возвращаемое значение:
//  Булево - ИСТИНА, если обработка всех движений завершена.
//
Функция ПерезаписатьДвиженияИзОчереди(ПолныеИменаДокументов, ПолныеИменаРегистров, Очередь, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ДополнительныеПараметрыПерезаписиДвиженийИзОчереди();
	КонецЕсли;
	
	ЕстьЕщеРабота = Ложь;
	ЭтоНезависимыйРегистрСведений = ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений;
	ОбновляемыеДанные = ДополнительныеПараметры.ОбновляемыеДанные;
	ЕстьОбновляемыеДанные = ОбновляемыеДанные <> Неопределено;
	ИмяПоляРегистратор = ?(ЭтоНезависимыйРегистрСведений, ДополнительныеПараметры.ИмяИзмеренияДляОтбора, "Регистратор");
	Регистры = ИменаРегистровВМассив(ПолныеИменаРегистров);
	СписокДокументов = ИменаДокументовВМассив(ПолныеИменаДокументов);
	Если ТипЗнч(СписокДокументов) = Тип("Массив") Тогда 
		СписокДокументов.Добавить("Документ.Сторно"); // Сторно регистрируется к обновлению автоматически, если зарегистрировался сторнируемый.  
	КонецЕсли;
	ТипыДокументов = МассивИменВСоответствиеТипов(СписокДокументов, "ДокументСсылка", 1);
	
	Если ЭтоНезависимыйРегистрСведений Или ЕстьОбновляемыеДанные Тогда
		ИтерируемыйСписокДокументов = Новый Массив;
		ИтерируемыйСписокДокументов.Добавить(Неопределено);
	Иначе
		ИтерируемыйСписокДокументов = СписокДокументов;
	КонецЕсли;
	
	Если ЕстьОбновляемыеДанные
		И ОбновляемыеДанные.НаборДанных.Количество() > 0 Тогда
		
		МассивРегистраторов = Новый массив;
		МассивДокументовСоСторно = Новый Массив;
		
		Для Каждого ПорцияДанных Из ОбновляемыеДанные.НаборДанных Цикл
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивРегистраторов, ПорцияДанных.Данные.ВыгрузитьКолонку(ИмяПоляРегистратор));
			Для Каждого СтрокаДанных Из ПорцияДанных.Данные Цикл
				
				МетаданныеДокумента = СтрокаДанных[ИмяПоляРегистратор].Метаданные();
				Если НЕ МетаданныеДокумента.Реквизиты.Найти("СторнируемыйДокумент") = Неопределено Тогда
					
					МассивДокументовСоСторно.Добавить(СтрокаДанных[ИмяПоляРегистратор]);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		РеквизитыПроведен = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивРегистраторов, "Проведен");
		РеквизитыСоСторно = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивДокументовСоСторно, "СторнируемыйДокумент");
		
	КонецЕсли;
	
	Для Каждого ПолноеИмяДокумента Из ИтерируемыйСписокДокументов Цикл
		Если Не ЭтоНезависимыйРегистрСведений И Не ЕстьОбновляемыеДанные Тогда
			Если ДополнительныеПараметры.Менеджер = Неопределено Тогда
				МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяДокумента);
			Иначе
				МенеджерДокумента = ДополнительныеПараметры.Менеджер;
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого ПолноеИмяРегистра Из Регистры Цикл
			ИмяРегистра = СтрРазделить(ПолноеИмяРегистра,".",Ложь)[1];
			МенеджерРегистра = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяРегистра); // РегистрСведенийМенеджер - 
			ПараметрыВыборки = НовыеПараметрыВыборки();
			
			Если ЕстьОбновляемыеДанные Тогда
				ВыборкаПоРегистраторам = Неопределено;
				ПараметрыВыборки.ТипыДокументов = ТипыДокументов;
				ПараметрыВыборки.ИмяПоляРегистратор = ИмяПоляРегистратор;
			Иначе
				ДополнительныеПараметрыДляОбработки = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
				
				Если ЭтоНезависимыйРегистрСведений Тогда
					ДополнительныеИсточникиДанных = Новый Соответствие;
					ДополнительныеИсточникиДанных.Вставить(ИмяПоляРегистратор);
					ДополнительныеПараметрыДляОбработки.ДополнительныеИсточникиДанных = ДополнительныеИсточникиДанных;
					ДополнительныеПараметрыДляОбработки.ПоляУпорядочивания = ДополнительныеПараметры.ПоляУпорядочивания;
					ВыборкаПоРегистраторам = ОбновлениеИнформационнойБазы.ВыбратьИзмеренияНезависимогоРегистраСведенийДляОбработки(
						Очередь,
						ПолноеИмяРегистра,
						ДополнительныеПараметрыДляОбработки);
				Иначе
					Источники = МенеджерДокумента.ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра);
					ДополнительныеПараметрыДляОбработки.ДополнительныеИсточникиДанных = Источники;
					ВыборкаПоРегистраторам = ОбновлениеИнформационнойБазы.ВыбратьРегистраторыРегистраДляОбработки(
						Очередь,
						ПолноеИмяДокумента,
						ПолноеИмяРегистра,
						ДополнительныеПараметрыДляОбработки);
				КонецЕсли;
			КонецЕсли;
			
			Если ДополнительныеПараметры.ЗаписыватьВОднойТранзакции Тогда
				НачатьТранзакцию();
			КонецЕсли;
			
			Пока СледующаяВыборкаИлиСтрокаТаблицыЗначений(ВыборкаПоРегистраторам, ОбновляемыеДанные, ПараметрыВыборки) Цикл
				
				СторнируемыйДокумент = Неопределено;
				
				Если ТипЗнч(ВыборкаПоРегистраторам) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
					
					МетаданныеДокумента = ВыборкаПоРегистраторам[ИмяПоляРегистратор].Метаданные(); // ОбъектМетаданныхДокумент - 
					Если МетаданныеДокумента.Реквизиты.Найти("СторнируемыйДокумент") <> Неопределено Тогда
						
						СторнируемыйДокумент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаПоРегистраторам[ИмяПоляРегистратор], "СторнируемыйДокумент");
						
					КонецЕсли;
					
				Иначе
					
					СторнируемыйДокумент = РеквизитыСоСторно.Получить(ВыборкаПоРегистраторам[ИмяПоляРегистратор]);
					
				КонецЕсли;
				
				Если ЭтоНезависимыйРегистрСведений И ПолныеИменаДокументов <> Неопределено Тогда
					
					Если ПолныеИменаДокументов.Найти(ВыборкаПоРегистраторам[ИмяПоляРегистратор].Метаданные().ПолноеИмя()) = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
				КонецЕсли;
				
				Если НЕ ЭтоНезависимыйРегистрСведений 
					И СторнируемыйДокумент <> Неопределено Тогда
					// Если движения сторнируемого документа еще не обработаны, то пропускаем обработку
					Если ЗначениеЗаполнено(СторнируемыйДокумент)
						И ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Очередь, ПолноеИмяРегистра, СторнируемыйДокумент) Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ СформироватьИЗаписатьДвижения(
							ВыборкаПоРегистраторам[ИмяПоляРегистратор],
							ПолноеИмяРегистра,
							МенеджерРегистра,
							ДополнительныеПараметры,
							ИмяПоляРегистратор,
							РеквизитыПроведен) Тогда
							
					Возврат Ложь;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ДополнительныеПараметры.ЗаписыватьВОднойТранзакции Тогда
				Попытка
					ЗафиксироватьТранзакцию();
				Исключение
					ОтменитьТранзакцию();
					
					ТекстСообщения = НСтр("ru = 'Не удалось зафиксировать транзакцию записи движения в регистр %ИмяРегистра% по причине: %Причина%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяРегистра%", ПолноеИмяРегистра);
					
					ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
												УровеньЖурналаРегистрации.Предупреждение,
												Метаданные.НайтиПоПолномуИмени(ПолноеИмяРегистра),
												,
												ТекстСообщения);
						
					Возврат Ложь;
				КонецПопытки;
			КонецЕсли;	
			
			
			Если Не ЕстьЕщеРабота
				И ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Очередь, ПолноеИмяРегистра) Тогда 
				ЕстьЕщеРабота = Истина;
			КонецЕсли;
			Если ЭтоНезависимыйРегистрСведений Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	ВсеСделано = Не ЕстьЕщеРабота;
	Возврат ВсеСделано;
	
КонецФункции

// Адаптирует запрос механизма проведения для использования в функции ОбновлениеИнформационнойБазыУТ.РегистраторыДляПерепроведения,
// делая его запросом для всех проведенных документов.
// Параметры:
//  ИзначальныйТекстЗапроса - Строка - текст запроса механизма проведения, который или формирует таблицу движений, или
//										создает временные таблицы, используемые в запросах формирующих таблицы движений.
//										см. ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса
//										Требования к тексту запроса следующие.
//										  Все объединяемые таблицы запроса, формирующего таблицу движений имеют один синоним.
//										  Если есть соединения с другими таблицами, то оно реализовано таким образом, 
//											что будет корректно работать, если не установлен отбор по ссылке;
//										  Не используются временные таблицы;
//										  Не используются вложенные запросы и группировки;
//										  Нет упорядочивания;
//										  параметры запроса рассчитываются или по данным шапки, или являются значениями констант;
// 										  Для всех полей непримитивных типов заполнены значения по умолчанию, как они хранятся в регистре;
//											это или пустая ссылка типа, или НЕОПРЕДЕЛЕНО (для полей составного типа), то НЕ должно быть NULL
//										  параметр, устанавливающий отбор по ссылке называется &Ссылка;
//										  В конце запроса не должно быть знака ";"
// 										  В тексте запроса, формирующим таблицу движения, должны выбираться только значимые
//											для формирования движений поля (нет полей НомерСтроки, Порядок и т.д.).
//  ПолноеИмяДокумента				 - Строка - полное имя документа, как оно задается в языке запросов (например, Документ.ВводОстатков)
//  СинонимТаблицыДокумента			 - Строка - синоним таблицы документа, используемый в запросе
//  ПереопределениеРасчетаПараметров - Структура - по умолчанию все параметры, которые есть в запросе заменяются на <СинонимТаблицыДокумента>.Ссылка.<ИмяПараметра>
//  												Для параметра &Период по умолчанию подставляется <СинонимТаблицыДокумента>.Ссылка.Дата
//  												Если параметры рассчитываются иначе, то в этой структуре в ключе передается имя параметра, в значении
//													  выражение для его расчета.
//  ТекстыЗапросаВременныхТаблиц     - Соответствие - тексты запросов временных таблиц, используемых в тексте запроса
//                                                    механизма проведения.
//													  Ключ соответствия - имя временной таблицы, Значение - текст запроса временной таблицы.
//													  Параметр необходимо использовать когда механизм формирования движений опирается не на
//													  физическую таблицу документа, а на предварительно созданную временную таблицу.
//													  Поля выборки временной таблицы должны содержать поле "Ссылка" - ссылку на физическую таблицу проводимого документа.
//													  Вложенные временные таблицы не поддерживаются.
//
// Возвращаемое значение:
//  Строка - адаптированный текст запроса.
//
Функция АдаптироватьЗапросМеханизмаПроведения(Знач ИзначальныйТекстЗапроса,
														ПолноеИмяДокумента,
														СинонимТаблицыДокумента,
														ПереопределениеРасчетаПараметров = Неопределено,
														ТекстыЗапросаВременныхТаблиц = Неопределено) Экспорт
														
	Если ПереопределениеРасчетаПараметров = Неопределено Тогда
		ПереопределениеРасчетаПараметров = Новый Структура;
	КонецЕсли;
	
	Если СтрНайти(ИзначальныйТекстЗапроса, "КАК Регистратор,") = 0 Тогда // @query-part
		
		ИзначальныйТекстЗапроса = СтрЗаменить(ИзначальныйТекстЗапроса,
											"ВЫБРАТЬ", // @query-part
											"ВЫБРАТЬ
											|	ТаблицаДокументаОбновлениеИБ.Ссылка КАК Регистратор,"); // @query-part
		
	КонецЕсли;
				
	ИзначальныйТекстЗапроса = СтрЗаменить(ИзначальныйТекстЗапроса,
										"ГДЕ",
										"
										|ГДЕ
										|	ТаблицаДокументаОбновлениеИБ.Ссылка.Проведен
										|	И ");
	
	Если ТекстыЗапросаВременныхТаблиц <> Неопределено Тогда
		
		Для Каждого Элемент Из ТекстыЗапросаВременныхТаблиц Цикл
			
			Для Каждого ДругойЭлемент Из ТекстыЗапросаВременныхТаблиц Цикл
				
				Если Элемент.Ключ <> ДругойЭлемент.Ключ Тогда
					
					Если СтрНайти(ДругойЭлемент.Значение, Элемент.Ключ) <> 0 Тогда
						ВызватьИсключение НСтр("ru = 'Адаптированный текст запроса. Вложенные временные таблицы не поддерживаются.'");
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Для Каждого Элемент Из ТекстыЗапросаВременныхТаблиц Цикл
			
			ПервыйСимвол = СтрНайти(Элемент.Значение, "ПОМЕСТИТЬ");
			ПоследнийСимвол = СтрНайти(Элемент.Значение, Элемент.Ключ, НаправлениеПоиска.СНачала, ПервыйСимвол) + СтрДлина(Элемент.Ключ);
			ПодстановкаПоиска = Сред(Элемент.Значение, ПервыйСимвол, ПоследнийСимвол - ПервыйСимвол);
			ПодстановкаВременнойТаблицы = СтрЗаменить(Элемент.Значение, ПодстановкаПоиска, "");
			ИзначальныйТекстЗапроса = СтрЗаменить(ИзначальныйТекстЗапроса, Элемент.Ключ, "(" + ПодстановкаВременнойТаблицы + ")");
			
		КонецЦикла;
		
	КонецЕсли;
	
	ИзначальныйТекстЗапроса = СтрЗаменить(ИзначальныйТекстЗапроса,СинонимТаблицыДокумента,"ТаблицаДокументаОбновлениеИБ");
	ИзначальныйТекстЗапроса = СтрЗаменить(ИзначальныйТекстЗапроса,"ТаблицаДокументаОбновлениеИБ.Ссылка = &Ссылка","ИСТИНА");
	ИзначальныйТекстЗапроса = СтрЗаменить(ИзначальныйТекстЗапроса,
											"ТаблицаДокументаОбновлениеИБ.Ссылка В (&Ссылка)",
											"ИСТИНА");
	
	Запрос = Новый Запрос;
	Запрос.Текст = ИзначальныйТекстЗапроса;
	
	// Параметры запроса нужно упорядочить по наименованию в обратном порядке,
	// т.к. их имена могут начинаться одинаково, например, "Номер", "НомерНаПечать".
	ПараметрыЗапроса = Новый СписокЗначений;
	Для каждого ПараметрЗапроса Из Запрос.НайтиПараметры() Цикл
		ПараметрыЗапроса.Добавить(ПараметрЗапроса.Имя);
	КонецЦикла; 
	ПараметрыЗапроса.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
	
	МетаданныеДокумента = Метаданные.НайтиПоПолномуИмени(ПолноеИмяДокумента);
	
	Для Каждого Параметр Из ПараметрыЗапроса Цикл
		
		ТекстЗамены = Неопределено;
		
		Если ПереопределениеРасчетаПараметров.Свойство(Параметр.Значение) Тогда
			ТекстЗамены = ПереопределениеРасчетаПараметров[Параметр.Значение];
			ТекстЗамены = СтрЗаменить(ТекстЗамены, СинонимТаблицыДокумента, "ТаблицаДокументаОбновлениеИБ");
		ИначеЕсли Параметр.Значение = "Ссылка" Тогда
			ТекстЗамены = "ТаблицаДокументаОбновлениеИБ.Ссылка";
		ИначеЕсли Параметр.Значение = "Период" Тогда
			ТекстЗамены = "ТаблицаДокументаОбновлениеИБ.Ссылка.Дата";
		ИначеЕсли МетаданныеДокумента.Реквизиты.Найти(Параметр.Значение) <> Неопределено
			ИЛИ Параметр.Значение = "Проведен"
			ИЛИ Параметр.Значение = "ПометкаУдаления"
			ИЛИ Параметр.Значение = "Номер"
			ИЛИ Параметр.Значение = "Дата" Тогда
			ТекстЗамены = "ТаблицаДокументаОбновлениеИБ.Ссылка." + Параметр.Значение;
		КонецЕсли;	
		
		Если ТекстЗамены <> Неопределено Тогда
			ИзначальныйТекстЗапроса = СтрЗаменить(ИзначальныйТекстЗапроса,"&" + Параметр.Значение, ТекстЗамены);
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат ИзначальныйТекстЗапроса;
	
КонецФункции

// Адаптирует запрос механизма проведения по независимому регистру.
// Результат функции используется в ДанныеНезависимогоРегистраДляПерепроведения().
//
// Параметры:
//  ИзначальныйТекстЗапроса			 - Строка - текст запроса механизма проведения, который формирует таблицу движений.
//  ПолноеИмяДокумента				 - Строка - полное имя документа, как оно задается в языке запросов (например, Документ.ВводОстатков)
//  СинонимТаблицыДокумента			 - Строка - синоним таблицы документа, используемый в запросе
//  ВЗапросеЕстьИсточник			 - Булево - Истина, если в запросе описан источник
//  ПереопределениеРасчетаПараметров - Структура - по умолчанию все параметры, которые есть в запросе заменяются на <СинонимТаблицыДокумента>.Ссылка.<ИмяПараметра>
//  												Для параметра &Период по умолчанию подставляется <СинонимТаблицыДокумента>.Ссылка.Дата
//  												Если параметры рассчитываются иначе, то в этой структуре в ключе передается имя параметра, в значении - выражение для его расчета.
//  ТекстыЗапросаВременныхТаблиц     - Соответствие - тексты запросов временных таблиц, используемых в тексте запроса
//                                                    механизма проведения.
//													  Ключ соответствия - имя временной таблицы, Значение - текст запроса временной таблицы.
//													  Параметр необходимо использовать когда механизм формирования движений опирается не на
//													  физическую таблицу документа, а на предварительно созданную временную таблицу.
//													  Поля выборки временной таблицы должны содержать поле "Ссылка" - ссылку на физическую таблицу проводимого документа.
//													  Вложенные временные таблицы не поддерживаются.
// 
// Возвращаемое значение:
//  Строка - адаптированный текст запроса, который может выполняться для всех документов.
//
Функция АдаптироватьЗапросПроведенияПоНезависимомуРегистру(Знач ИзначальныйТекстЗапроса,
														ПолноеИмяДокумента,
														СинонимТаблицыДокумента,
														ВЗапросеЕстьИсточник,
														ПереопределениеРасчетаПараметров = Неопределено,
														ТекстыЗапросаВременныхТаблиц = Неопределено) Экспорт
	
	Если ПереопределениеРасчетаПараметров = Неопределено Тогда
		ПереопределениеРасчетаПараметров = Новый Структура;
	КонецЕсли;
	
	Если НЕ ВЗапросеЕстьИсточник Тогда                   
		
		ИзначальныйТекстЗапроса = ИзначальныйТекстЗапроса + "
		|ИЗ
		|	" + ПолноеИмяДокумента + " КАК ТаблицаДокументаОбновлениеИБ";
		
	КонецЕсли;
	
	Если ТекстыЗапросаВременныхТаблиц <> Неопределено Тогда
		
		Для Каждого Элемент Из ТекстыЗапросаВременныхТаблиц Цикл
			
			Для Каждого ДругойЭлемент Из ТекстыЗапросаВременныхТаблиц Цикл
				
				Если Элемент.Ключ <> ДругойЭлемент.Ключ Тогда
					
					Если СтрНайти(ДругойЭлемент.Значение, Элемент.Ключ) <> 0 Тогда
						ВызватьИсключение НСтр("ru = 'Адаптированный текст запроса. Вложенные временные таблицы не поддерживаются.'");
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Для Каждого Элемент Из ТекстыЗапросаВременныхТаблиц Цикл
			ПервыйСимвол 				= СтрНайти(Элемент.Значение, "ПОМЕСТИТЬ");
			ПоследнийСимвол 			= СтрНайти(Элемент.Значение, Элемент.Ключ, НаправлениеПоиска.СНачала, ПервыйСимвол)
											+ СтрДлина(Элемент.Ключ);
			ПодстановкаПоиска 			= Сред(Элемент.Значение, ПервыйСимвол, ПоследнийСимвол - ПервыйСимвол);
			ПодстановкаВременнойТаблицы = СтрЗаменить(Элемент.Значение, ПодстановкаПоиска, "");
			ИзначальныйТекстЗапроса 	= СтрЗаменить(ИзначальныйТекстЗапроса,
														Элемент.Ключ,
														"(" + ПодстановкаВременнойТаблицы + ")");
		КонецЦикла;
		
	КонецЕсли;
	
	ИзначальныйТекстЗапроса = СтрЗаменить(ИзначальныйТекстЗапроса,СинонимТаблицыДокумента,"ТаблицаДокументаОбновлениеИБ");
	ИзначальныйТекстЗапроса = СтрЗаменить(ИзначальныйТекстЗапроса,"ТаблицаДокументаОбновлениеИБ.Ссылка = &Ссылка","ИСТИНА");
	ИзначальныйТекстЗапроса = СтрЗаменить(ИзначальныйТекстЗапроса,
											"ТаблицаДокументаОбновлениеИБ.Ссылка В (&Ссылка)",
											"ИСТИНА");
	ИзначальныйТекстЗапроса = СтрЗаменить(ИзначальныйТекстЗапроса,"ТаблицаДокументаОбновлениеИБ.Комментарий",
		"ВЫРАЗИТЬ(ТаблицаДокументаОбновлениеИБ.Ссылка.Комментарий КАК Строка (100))");
	
	Запрос = Новый Запрос;
	Запрос.Текст = ИзначальныйТекстЗапроса;
	
	// Параметры запроса нужно упорядочить по наименованию в обратном порядке,
	// т.к. их имена могут начинаться одинаково, например, "Номер", "НомерНаПечать".
	ПараметрыЗапроса = Новый СписокЗначений;
	Для каждого ПараметрЗапроса Из Запрос.НайтиПараметры() Цикл
		ПараметрыЗапроса.Добавить(ПараметрЗапроса.Имя);
	КонецЦикла; 
	ПараметрыЗапроса.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
	
	МетаданныеДокумента = Метаданные.НайтиПоПолномуИмени(ПолноеИмяДокумента);
	
	Для Каждого Параметр Из ПараметрыЗапроса Цикл
		
		ТекстЗамены = Неопределено;
		
		Если ПереопределениеРасчетаПараметров.Свойство(Параметр.Значение) Тогда
			ТекстЗамены = ПереопределениеРасчетаПараметров[Параметр.Значение];
			ТекстЗамены = СтрЗаменить(ТекстЗамены, СинонимТаблицыДокумента, "ТаблицаДокументаОбновлениеИБ");
		ИначеЕсли Параметр.Значение = "НомерНаПечать" Тогда
			ТекстЗамены = """""";
		ИначеЕсли Параметр.Значение = "Ссылка" Тогда
			ТекстЗамены = "ТаблицаДокументаОбновлениеИБ.Ссылка";
		ИначеЕсли Параметр.Значение = "Комментарий" Тогда
			ТекстЗамены = "ВЫРАЗИТЬ(ТаблицаДокументаОбновлениеИБ.Ссылка.Комментарий КАК Строка (100))";
		ИначеЕсли Параметр.Значение = "Период" Тогда
			ТекстЗамены = "ТаблицаДокументаОбновлениеИБ.Ссылка.Дата";
		ИначеЕсли МетаданныеДокумента.Реквизиты.Найти(Параметр.Значение) <> Неопределено 
			ИЛИ Параметр.Значение = "Проведен"
			ИЛИ Параметр.Значение = "ПометкаУдаления"
			ИЛИ Параметр.Значение = "Номер"
			ИЛИ Параметр.Значение = "Дата" Тогда
			ТекстЗамены = "ТаблицаДокументаОбновлениеИБ.Ссылка." + Параметр.Значение;
		КонецЕсли;	
		
		Если ТекстЗамены <> Неопределено Тогда
			ИзначальныйТекстЗапроса = СтрЗаменить(ИзначальныйТекстЗапроса,"&" + Параметр.Значение, ТекстЗамены);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИзначальныйТекстЗапроса;
	
КонецФункции

// Результат адаптации запроса для функции ОбновлениеИнформационнойБазыУТ.РегистраторыДляПерепроведения.
// 
// Возвращаемое значение:
//  Структура - поля:
//	* ТекстЗапроса - Строка - должен быть объявлен обязательно, адаптированный текст запроса
//	* ЗначенияПараметров - Структура - значения параметров запроса, которые вычисляются из констант
//										(не зависят от конкретного документа).
//
Функция РезультатАдаптацииЗапроса() Экспорт
	
	РезультатАдаптацииЗапроса = Новый Структура;
	РезультатАдаптацииЗапроса.Вставить("ТекстЗапроса");
	РезультатАдаптацииЗапроса.Вставить("ЗначенияПараметров", Новый Структура);
	
	Возврат РезультатАдаптацииЗапроса;
КонецФункции

// Выбирает регистраторы, по которым движения записанные в регистр отличаются от тех, 
// которые формируются запросом механизма проведения.
//  
// Параметры:
//  РезультатАдаптацииЗапроса - см. РезультатАдаптацииЗапроса.
// 												Требования к запросам:
// 												- текст не должен содержать обращения к временным таблицам
//												- все запросы должны быть адаптированы для выборки без отбора по ссылке.
//													это можно сделать  с помощью функции ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения, 
//													 если текст запроса удовлетворяет ее условиям. Если нет - можно попробовать адаптировать текст самостоятельно
// 												- в тексте запроса, формирующим таблицу движения, должны выбираться только ЗНАЧИМЫЕ
//													для формирования движений поля (нет полей НомерСтроки, Порядок и т.д.);
// 												- нет упорядочивания; 
// 												- есть поле "Регистратор". 
//  ПолноеИмяРегистра				 - Строка - полное имя регистра, как оно задается в языке запросов (например, РегистрНакопления.ТоварыНаСкладах)
//  ПолноеИмяДокумента				 - Строка - полное имя документа, как оно задается в языке запросов (например, Документ.ВводОстатков).
//  НеиспользуемыеПоля				 - Массив Из Строка - список полей, по которым не требуется проверять совпадение данных.
//
// Возвращаемое значение:
//  Массив из ДокументСсылка - массив ссылок на документы, по которым нужно переформировать движения по регистру.
//
Функция РегистраторыДляПерепроведения(РезультатАдаптацииЗапроса,
										ПолноеИмяРегистра,
										ПолноеИмяДокумента,
										НеиспользуемыеПоля = Неопределено) Экспорт
	
	Очередь = Неопределено;
	ТекстЗапросаФормированияДвижений = РезультатАдаптацииЗапроса.ТекстЗапроса;
	ЗначенияПараметров = РезультатАдаптацииЗапроса.ЗначенияПараметров;
	
	ЧастиИмениРегистра = СтрРазделить(ПолноеИмяРегистра, ".", Ложь);
	
	ТипРегистра = ЧастиИмениРегистра[0];
	ИмяРегистра = ЧастиИмениРегистра[1];
	
	Если ТипРегистра = "РегистрНакопления"
		Или ТипРегистра = "РегистрСведений" Тогда
		МетаданныеРегистра = Метаданные.НайтиПоПолномуИмени(ПолноеИмяРегистра);
	Иначе
		ТекстИсключения = НСтр("ru = 'Функция пока не поддерживает работу с регистрами типа %ТипРегистра%.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ТипРегистра%", ТипРегистра);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
		
	ТекстРегистра = "";
	
	ТекстВыборкиСуммирующегоЗапроса = "";
	ТекстГруппировкиСуммирующегоЗапроса = "
	|";	
	ТекстУсловияСуммирующегоЗапроса = "
	|ИМЕЮЩИЕ
	|	ЛОЖЬ";	
	
	Если ТипРегистра = "РегистрСведений" Тогда
		ТекстЗапросаФормированияДвижений = СтрЗаменить(ТекстЗапросаФормированияДвижений,
											"ВЫБРАТЬ", // @query-part
											"ВЫБРАТЬ
											|	1 КАК КонтрольноеПолеОбновлениеИБ,"); // @query-part
		ТекстРегистра = "
						|	-1,";

		ТекстВыборкиСуммирующегоЗапроса = "
										|	СУММА(КонтрольноеПолеОбновлениеИБ) КАК КонтрольноеПолеОбновлениеИБ,";
		ТекстУсловияСуммирующегоЗапроса = ТекстУсловияСуммирующегоЗапроса + "
		| ИЛИ СУММА(КонтрольноеПолеОбновлениеИБ) <> 0";
	КонецЕсли;
	
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапросаФормированияДвижений);
	
	Запрос = СхемаЗапроса.ПакетЗапросов[0];
	
	ВсеКолонки = Новый Массив;
	
	// Поля по которым не требуется проверять совпадение данных в ИБ с данными запроса.
	Если НеиспользуемыеПоля = Неопределено Тогда
		НеиспользуемыеПоля = Новый Массив;
	КонецЕсли; 
	
	Для каждого Колонка Из Запрос.Колонки Цикл
		
		ВсеКолонки.Добавить(Колонка.Псевдоним);
		
		Если ТипРегистра = "РегистрНакопления"
			И МетаданныеРегистра.Ресурсы.Найти(Колонка.Псевдоним) <> Неопределено Тогда		
			
			ТекстРегистра = ТекстРегистра + "
			|	-ТаблицаРегистра." + Колонка.Псевдоним + ",";
			
			Если НеиспользуемыеПоля.Найти(Колонка.Псевдоним) = Неопределено Тогда
				
				ТекстВыборкиСуммирующегоЗапроса = ТекстВыборкиСуммирующегоЗапроса + "
				|	СУММА(ВложенныйЗапрос." + Колонка.Псевдоним + ") КАК " + Колонка.Псевдоним + ",";
				
				ТекстУсловияСуммирующегоЗапроса = ТекстУсловияСуммирующегоЗапроса + "
				|	ИЛИ СУММА(ВложенныйЗапрос." + Колонка.Псевдоним + ") <> 0";
				
			КонецЕсли;
			
		ИначеЕсли Не Колонка.Псевдоним = "КонтрольноеПолеОбновлениеИБ" Тогда
			
			ТекстРегистра = ТекстРегистра + "
			|	ТаблицаРегистра." + Колонка.Псевдоним + ",";
			
			Если НеиспользуемыеПоля.Найти(Колонка.Псевдоним) = Неопределено Тогда
				
				ТекстВыборкиСуммирующегоЗапроса = ТекстВыборкиСуммирующегоЗапроса + "
				|	ВложенныйЗапрос." + Колонка.Псевдоним + " КАК " + Колонка.Псевдоним + ",";
				
				ТекстГруппировкиСуммирующегоЗапроса = ТекстГруппировкиСуммирующегоЗапроса + " 
				|	ВложенныйЗапрос." + Колонка.Псевдоним + ",";
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстВставкиЗапросФормирующийДвижения = "";
	
	Для каждого Измерение Из МетаданныеРегистра.Измерения Цикл
		
		Если ВсеКолонки.Найти(Измерение.Имя) <> Неопределено
			Или НеиспользуемыеПоля.Найти(Измерение.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстРегистра = ТекстРегистра + "
		|	ТаблицаРегистра." + Измерение.Имя + ",";
		
		ТекстВыборкиСуммирующегоЗапроса = ТекстВыборкиСуммирующегоЗапроса + "
		|	ВложенныйЗапрос." + Измерение.Имя + " КАК " + Измерение.Имя + ",";
		
		ТекстГруппировкиСуммирующегоЗапроса = ТекстГруппировкиСуммирующегоЗапроса + " 
		|	ВложенныйЗапрос." + Измерение.Имя + ",";
		
		ТекстВставкиЗапросФормирующийДвижения = ТекстВставкиЗапросФормирующийДвижения + "
		|	&ПустоеЗначение" + Измерение.Имя + " КАК " + Измерение.Имя + ",";
		
		ЗначенияПараметров.Вставить("ПустоеЗначение" + Измерение.Имя, Измерение.Тип.ПривестиЗначение());
		
	КонецЦикла;
	
	Для каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл
		
		Если ВсеКолонки.Найти(Ресурс.Имя) <> Неопределено
			Или НеиспользуемыеПоля.Найти(Ресурс.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипРегистра = "РегистрНакопления" Тогда
			ТекстРегистра = ТекстРегистра + "
			|	-ТаблицаРегистра." + Ресурс.Имя + ",";
			
			ТекстВыборкиСуммирующегоЗапроса = ТекстВыборкиСуммирующегоЗапроса + "
			|	СУММА(ВложенныйЗапрос." + Ресурс.Имя + ") КАК " + Ресурс.Имя + ",";
			
			ТекстУсловияСуммирующегоЗапроса = ТекстУсловияСуммирующегоЗапроса + "
			|	ИЛИ СУММА(ВложенныйЗапрос." + Ресурс.Имя + ") <> 0";
			
			ТекстВставкиЗапросФормирующийДвижения = ТекстВставкиЗапросФормирующийДвижения + "
			|	0 КАК " + Ресурс.Имя + ",";
		Иначе	
			ТекстРегистра = ТекстРегистра + "
			|	ТаблицаРегистра." + Ресурс.Имя + ",";
			
			ТекстВыборкиСуммирующегоЗапроса = ТекстВыборкиСуммирующегоЗапроса + "
			|	ВложенныйЗапрос." + Ресурс.Имя + " КАК " + Ресурс.Имя + ",";
			
			ТекстГруппировкиСуммирующегоЗапроса = ТекстГруппировкиСуммирующегоЗапроса + " 
			|	ВложенныйЗапрос." + Ресурс.Имя + ",";
			
			ТекстВставкиЗапросФормирующийДвижения = ТекстВставкиЗапросФормирующийДвижения + "
			|	&ПустоеЗначение" + Ресурс.Имя + " КАК " + Ресурс.Имя + ",";
			
			ЗначенияПараметров.Вставить("ПустоеЗначение" + Ресурс.Имя, Ресурс.Тип.ПривестиЗначение());
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Реквизит Из МетаданныеРегистра.Реквизиты Цикл
		
		Если ВсеКолонки.Найти(Реквизит.Имя) <> Неопределено
			Или НеиспользуемыеПоля.Найти(Реквизит.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстРегистра = ТекстРегистра + "
		|	ТаблицаРегистра." + Реквизит.Имя + ",";
		
		ТекстВыборкиСуммирующегоЗапроса = ТекстВыборкиСуммирующегоЗапроса + "
		|	ВложенныйЗапрос." + Реквизит.Имя + " КАК " + Реквизит.Имя + ",";
		
		ТекстГруппировкиСуммирующегоЗапроса = ТекстГруппировкиСуммирующегоЗапроса + " 
		|	ВложенныйЗапрос." + Реквизит.Имя + ",";
		
		ТекстВставкиЗапросФормирующийДвижения = ТекстВставкиЗапросФормирующийДвижения + "
		|	&ПустоеЗначение" + Реквизит.Имя + " КАК " + Реквизит.Имя + ",";
		
		ЗначенияПараметров.Вставить("ПустоеЗначение" + Реквизит.Имя, Реквизит.Тип.ПривестиЗначение());
		
	КонецЦикла;
	
	ТекстРегистра = Лев(ТекстРегистра, СтрДлина(ТекстРегистра) - 1);
	ТекстВыборкиСуммирующегоЗапроса = Лев(ТекстВыборкиСуммирующегоЗапроса, СтрДлина(ТекстВыборкиСуммирующегоЗапроса) - 1);
	ТекстГруппировкиСуммирующегоЗапроса = Лев(ТекстГруппировкиСуммирующегоЗапроса, СтрДлина(ТекстГруппировкиСуммирующегоЗапроса) - 1);
	
	Если Не ПустаяСтрока(ТекстВставкиЗапросФормирующийДвижения) Тогда
		ТекстВставкиЗапросФормирующийДвижения = Лев(ТекстВставкиЗапросФормирующийДвижения, СтрДлина(ТекстВставкиЗапросФормирующийДвижения) - 1);
		ТекстЗапросаФормированияДвижений = СтрЗаменить(ТекстЗапросаФормированияДвижений,
											"ИЗ",
											",
											|" +ТекстВставкиЗапросФормирующийДвижения + "
											|ИЗ");
	КонецЕсли;
			
	ТекстРегистра = ТекстРегистра + "
	|ИЗ
	|	" + ПолноеИмяРегистра + " КАК ТаблицаРегистра";
	
	Если Очередь <> Неопределено Тогда
		ТекстРегистра = ТекстРегистра + "
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ПолноеИмяРегистра + ".Изменения КАК РегистраторыКОбработке
		|		ПО ТаблицаРегистра.Регистратор = РегистраторыКОбработке.Регистратор
		|			И (РегистраторыКОбработке.Узел = &ТекущаяОчередь)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаблокированоРегистратор КАК ВТЗаблокированоРегистратор
		|		ПО ТаблицаРегистра.Регистратор = ВТЗаблокированоРегистратор.Регистратор
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаблокированоСсылка КАК ВТЗаблокированоСсылка
		|		ПО ТаблицаРегистра.Регистратор = ВТЗаблокированоСсылка.Ссылка";
	КонецЕсли;
	
	ТекстРезультирующегоЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НеправильныеДвижения.Регистратор КАК Регистратор 
	|ПОМЕСТИТЬ НеправильныеДвижения 
	|ИЗ
	|	(ВЫБРАТЬ
	|		&ТекстВыборкиСуммирующегоЗапроса
	|
	|	ИЗ (ВЫБРАТЬ &ТекстЗапросаФормированияДвижений
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ 
	|		&ТекстРегистра
	|	ГДЕ
	|		ТаблицаРегистра.Регистратор ССЫЛКА ПолноеИмяДокумента
	|		И &Сторно
	|		И ВТЗаблокированоРегистратор.Регистратор ЕСТЬ NULL 
	|		И ВТЗаблокированоСсылка.Ссылка ЕСТЬ NULL
	|	) КАК ВложенныйЗапрос
	|СГРУППИРОВАТЬ ПО 
	|	&ТекстГруппировкиСуммирующегоЗапроса
	|ИМЕЮЩИЕ &ТекстУсловияСуммирующегоЗапроса ) КАК НеправильныеДвижения
	|ИНДЕКСИРОВАТЬ ПО 
	|	Регистратор	
	|;
	|
	|////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеестрДокументов.ИсправляемыйДокумент КАК ИсправляемыйДокумент
	|ПОМЕСТИТЬ ИсправляемыеДокументы
	|ИЗ
	|	НеправильныеДвижения КАК НеправильныеДвижения
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.РеестрДокументов КАК РеестрДокументов 
	|	ПО
	|		НеправильныеДвижения.Регистратор = РеестрДокументов.СторнируемыйДокумент
	|		И НЕ РеестрДокументов.ДополнительнаяЗапись
	|ГДЕ
	|	НЕ РеестрДокументов.Ссылка ЕСТЬ NULL
	|	И РеестрДокументов.ИсправляемыйДокумент <> НЕОПРЕДЕЛЕНО
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИсправляемыйДокумент
	|;
	|
	|ВЫБРАТЬ
	|	НеправильныеДвижения.Регистратор КАК Регистратор
	|ИЗ
	|	НеправильныеДвижения КАК НеправильныеДвижения
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	РеестрДокументов.Ссылка КАК Регистратор
	|ИЗ
	|	ИсправляемыеДокументы КАК ИсправляемыеДокументы
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.РеестрДокументов КАК РеестрДокументов 
	|	ПО
	|		ИсправляемыеДокументы.ИсправляемыйДокумент = РеестрДокументов.ИсправляемыйДокумент
	|		И НЕ РеестрДокументов.ДополнительнаяЗапись
	|ГДЕ
	|	НЕ РеестрДокументов.Ссылка ЕСТЬ NULL	
	|";
	
	ТекстРезультирующегоЗапроса = СтрЗаменить(ТекстРезультирующегоЗапроса, "ПолноеИмяДокумента", ПолноеИмяДокумента);
	Если Очередь = Неопределено Тогда
		ТекстРезультирующегоЗапроса = СтрЗаменить(ТекстРезультирующегоЗапроса, "И ВТЗаблокированоРегистратор", "//"+"И ВТЗаблокированоРегистратор");
		ТекстРезультирующегоЗапроса = СтрЗаменить(ТекстРезультирующегоЗапроса, "И ВТЗаблокированоСсылка", "//"+"И ВТЗаблокированоСсылка");
	КонецЕсли;
	ТекстРезультирующегоЗапроса = СтрЗаменить(ТекстРезультирующегоЗапроса, "&ТекстВыборкиСуммирующегоЗапроса", ТекстВыборкиСуммирующегоЗапроса);
	ТекстРезультирующегоЗапроса = СтрЗаменить(ТекстРезультирующегоЗапроса, "ВЫБРАТЬ &ТекстЗапросаФормированияДвижений", ТекстЗапросаФормированияДвижений);
	ТекстРезультирующегоЗапроса = СтрЗаменить(ТекстРезультирующегоЗапроса, "&ТекстРегистра", ТекстРегистра);
	ТекстРезультирующегоЗапроса = СтрЗаменить(ТекстРезультирующегоЗапроса, "&ТекстГруппировкиСуммирующегоЗапроса", ТекстГруппировкиСуммирующегоЗапроса);
	ТекстРезультирующегоЗапроса = СтрЗаменить(ТекстРезультирующегоЗапроса, "ИМЕЮЩИЕ &ТекстУсловияСуммирующегоЗапроса", ТекстУсловияСуммирующегоЗапроса);
	
	Если МетаданныеРегистра.Реквизиты.Найти("Сторно") <> Неопределено Тогда
		ТекстРезультирующегоЗапроса = СтрЗаменить(ТекстРезультирующегоЗапроса, "&Сторно", "НЕ ТаблицаРегистра.Сторно");
	Иначе
		ТекстРезультирующегоЗапроса = СтрЗаменить(ТекстРезультирующегоЗапроса, "&Сторно", "ИСТИНА");
	КонецЕсли;
	
	ЗапросВыборки = Новый Запрос;
	
	Для Каждого Параметр Из ЗначенияПараметров Цикл
		
		ЗапросВыборки.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
		
	КонецЦикла;
	
	Если Очередь <> Неопределено Тогда
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
		
		ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияДанных(Очередь, ПолноеИмяДокумента, МенеджерВременныхТаблиц);
		ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияДанных(Очередь, ПолноеИмяРегистра, МенеджерВременныхТаблиц);
	
		ТекстРезультирующегоЗапроса = СтрЗаменить(ТекстРезультирующегоЗапроса, "ВТЗаблокированоРегистратор","ВТЗаблокировано" + ИмяРегистра);
		ТекстРезультирующегоЗапроса = СтрЗаменить(ТекстРезультирующегоЗапроса, "ВТЗаблокированоСсылка","ВТЗаблокировано" + СтрРазделить(ПолноеИмяДокумента,".")[1]);
	
		ЗапросВыборки.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		ЗапросВыборки.УстановитьПараметр("ТекущаяОчередь", ПланыОбмена.ОбновлениеИнформационнойБазы.УзелПоОчереди(Очередь));
		
	КонецЕсли;
	
	ЗапросВыборки.Текст = ТекстРезультирующегоЗапроса;
	
	Регистраторы = ЗапросВыборки.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	
	Возврат Регистраторы;
КонецФункции

// Выбирает документы, по которым движения записанные в регистр отличаются от тех, которые формируются запросом
// механизма проведения. Используется для независимых регистров сведений, например, РеестрДокументов, ДокументыПоОС, ДокументыПоНМА.
//
// Параметры:
//  РезультатАдаптацииЗапроса	 - см. РезультатАдаптацииЗапроса.
//  ПолноеИмяРегистра			 - Строка	 - полное имя регистра, как оно задается в языке запросов (например, РегистрНакопления.ТоварыНаСкладах)
//  ПолноеИмяДокумента			 - Строка	 - полное имя документа, как оно задается в языке запросов (например, Документ.ВводОстатков)
//  НеиспользуемыеПоля			 - Массив Из Строка	 - Список полей, по которым не требуется проверять совпадение данных.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Содержит колонку "Ссылка".
//
Функция ДанныеНезависимогоРегистраДляПерепроведения(РезультатАдаптацииЗапроса, ПолноеИмяРегистра, ПолноеИмяДокумента, НеиспользуемыеПоля = Неопределено) Экспорт
	
	ЗапросВыборки = ЗапросРазличийОтраженияДокументовВНезависимомРегистре(РезультатАдаптацииЗапроса, ПолноеИмяРегистра, ПолноеИмяДокумента, НеиспользуемыеПоля);
	
	ТекстЗапросаВыборки = ЗапросВыборки.Текст;
	
	ТекстЗапроса = 
	"
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НеправильныеДвижения.Ссылка КАК Ссылка
	|ИЗ
	|	&ТекстЗапросаВыборки КАК НеправильныеДвижения";

	ЗапросВыборки.Текст = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаВыборки", "(" + ТекстЗапросаВыборки + ")");
	
	ДанныеРегистра = ЗапросВыборки.Выполнить().Выгрузить();
	
	Возврат ДанныеРегистра;

КонецФункции

// Сообщает пользователю, работа с формой временно ограничена, т.к. не завершен переход на новую версию программы.
//
Процедура СообщитьЧтоРаботаСФормойВременноОграничена() Экспорт

	ТекстСообщения = НСтр("ru = 'Работа с формой временно ограничена, так как выполняется переход на новую версию программы. Это плановый процесс, он не мешает работе в информационной базе и скоро завершится. Если у вас возникли сложности - обратитесь к администратору или в службу поддержки.'");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения); 
	
КонецПроцедуры

// Сообщает пользователю, что работа с формой временно ограниченна, т.к. не завершены процедуры обновления ИБ по объекту
// метаданных.
//
// Параметры:
//  ПолноеИмяМетаданныхОбъекта	 - Строка	 - полное имя объекта метаданных, по которому обновление ИБ должно быть завершено. 
//
Процедура ПроверитьВозможностьОткрытияФормы(ПолноеИмяМетаданныхОбъекта) Экспорт
	
	Если ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Неопределено, ПолноеИмяМетаданныхОбъекта) Тогда
		СообщитьЧтоРаботаСФормойВременноОграничена();
	КонецЕсли;

КонецПроцедуры

// Сообщает пользователю, что работа с журналом документов временно ограниченна, т.к. не завершена процедура обновления
// РС РеестрДокументов в разрезе используемых документов журнала.
//
// Параметры:
//  ТипыДокументов - Массив - список типов документов, по которым обновление РС должно быть завершено.
//
Процедура ПроверитьВозможностьОткрытияЖурналаДокументов(ТипыДокументов) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ОтложенноеОбновлениеЗавершеноУспешно") Тогда
		ЭтоПодчиненныйУзелРИБ = ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ();
		Если Не ЭтоПодчиненныйУзелРИБ Тогда
			Возврат;
		ИначеЕсли ПолучитьФункциональнуюОпцию("ОтложенноеОбновлениеВГлавномУзлеЗавершеноУспешно") Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	РегистрСведений.РеестрДокументов.Изменения КАК ТаблицаИзменений
		|ГДЕ
		|	ТаблицаИзменений.Узел ССЫЛКА ПланОбмена.ОбновлениеИнформационнойБазы
		|	И ТИПЗНАЧЕНИЯ(ТаблицаИзменений.Ссылка) В (&ТипыДокументов)");
	Запрос.УстановитьПараметр("ТипыДокументов", ТипыДокументов);
	
	Если Не Запрос.Выполнить().Пустой() Тогда
		СообщитьЧтоРаботаСФормойВременноОграничена();
	КонецЕсли;
	
КонецПроцедуры

// Записывает значения констант с помощью ОбновлениеИнформационнойБазы.ЗаписатьДанные().
//
// Параметры:
//  ЗначенияКонстант - Структура - Ключ описывает имя константы.
//
Процедура ЗаписатьЗначенияКонстант(ЗначенияКонстант) Экспорт

	Для Каждого КлючИЗначение Из ЗначенияКонстант Цикл
		
		МенеджерЗначения = Константы[КлючИЗначение.Ключ].СоздатьМенеджерЗначения();
		
		МенеджерЗначения.Значение = КлючИЗначение.Значение;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения, Ложь);
			
	КонецЦикла;
	
КонецПроцедуры

// Процедура - Сообщить о неудачной обработке
//
// Параметры:
//  ИнформацияОбОшибке	 - ИнформацияОбОшибке - результат функции ИнформацияОбОшибке()
//  Ссылка				 - ЛюбаяСсылка - обрабатываемый объект.
//
Процедура СообщитьОНеудачнойОбработке(ИнформацияОбОшибке, Ссылка, ПредставлениеСсылки = Неопределено) Экспорт
	ТекстСообщения = НСтр("ru = 'Не удалось обработать объект: %Объект% по причине: %Причина%'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Объект%", ?(ПредставлениеСсылки = Неопределено, Ссылка, ПредставлениеСсылки));
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
							УровеньЖурналаРегистрации.Предупреждение,
							Ссылка.Метаданные(),
							Ссылка,
							ТекстСообщения);
КонецПроцедуры

// Выполняет проверку корректности данных ссылки на объект информационной базы.
// В случае успешной проверки возвращает объект информационной базы.
//
// Параметры:
//	Ссылка			- ЛюбаяСсылка	 - ссылка на объект информационной базы.
//	ВерсияДанных	- Строка		 - текущая версия данных объекта.
//	Очередь			- Число			 - очередь отложенной обработки данных для контроля данных на предмет блокировки
//										другими обработчиками.
//
// Возвращаемое значение:
//	ДокументОбъект, СправочникОбъект, ПланСчетовОбъект, ПланВидовХарактеристикОбъект, Неопределено - объект информационной базы.
//
Функция ПроверитьПолучитьОбъект(Ссылка,ВерсияДанных,Очередь) Экспорт
	
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Ссылка);
		Возврат Неопределено;
	КонецЕсли;
	Если Объект.ВерсияДанных <> ВерсияДанных Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат Объект;
	
КонецФункции

// Получает данные для записи в регистр и записывает их.
// 
// Параметры:
// 	Ссылка - ДокументСсылка - 
// 	ПолноеИмяРегистра - Строка - 
// 	МенеджерРегистра - РегистрСведенийМенеджер - 
// 	ДополнительныеПараметры - см. ДополнительныеПараметрыПерезаписиДвиженийИзОчереди
// 	ИмяПоляРегистратор - Строка - 
// Возвращаемое значение:
// 	Булево - Ложь, если не удалось записать движения.
Функция СформироватьИЗаписатьДвижения(Ссылка, ПолноеИмяРегистра, МенеджерРегистра, ДополнительныеПараметры, ИмяПоляРегистратор = "Регистратор", РеквизитыПроведен = Неопределено) Экспорт
	
	ИмяРегистра = СтрРазделить(ПолноеИмяРегистра,".",Ложь)[1];
	
	Если Не ДополнительныеПараметры.ЗаписыватьВОднойТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	Попытка
		
		// Устанавливаем управляемую блокировку, чтобы провести ответственное чтение объекта.
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить(Ссылка.Метаданные().ПолноеИмя());
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		
		Блокировка.Заблокировать();
		
		НаборЗаписей = МенеджерРегистра.СоздатьНаборЗаписей(); // РегистрСведенийНаборЗаписей - 
		НаборЗаписей.Отбор[ИмяПоляРегистратор].Установить(Ссылка);
		
		Если ДополнительныеПараметры.ПередатьДополнительныеСвойства Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(НаборЗаписей.ДополнительныеСвойства,
			ДополнительныеПараметры.ДополнительныеСвойстваНабораЗаписей);
		КонецЕсли;	
		
		Если ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений Тогда
			ЗаписатьДвижения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяПоляРегистратор) <> Неопределено;
		Иначе
			
			Если РеквизитыПроведен = Неопределено Тогда
				
				ЗаписатьДвижения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Проведен"); //ответственное чтение реквизита "Проведен"
				
			Иначе
				
				ЗаписатьДвижения = РеквизитыПроведен.Получить(Ссылка);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТипЗнч(ЗаписатьДвижения) <> Тип("Булево") Тогда
			ЗаписатьДвижения = Ложь;
		КонецЕсли;
		
		Если ИмяРегистра = "ЗапасыИПотребности" Тогда
			
			РегистрыНакопления.ЗапасыИПотребности.СформироватьИЗаписатьДвижения(НаборЗаписей, Ссылка, ЗаписатьДвижения); 
			
		Иначе
			
			Если ЗаписатьДвижения Тогда
				
				ТаблицыДляДвижений = ПроведениеДокументов.ДанныеДокументаДляПроведения(
					Ссылка, ИмяРегистра);
					
				Если ТаблицыДляДвижений.Свойство("Таблица" + ИмяРегистра) Тогда
					ТаблицаДанных = ТаблицыДляДвижений["Таблица" + ИмяРегистра];
				
					Если ДополнительныеПараметры.НужнаДополнительнаяОбработкаЗаписей Тогда
						НаборЗаписей.ЗагрузитьСОбработкой(ТаблицаДанных);
					Иначе
						НаборЗаписей.Загрузить(ТаблицаДанных);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			
		КонецЕсли;
		
		СторноДокумент = ИсправлениеДокументов.СторноДокумент(Ссылка);
		Если СторноДокумент <> Неопределено Тогда
			ДополнительныеПараметрыОбновленияСторно = ОбщегоНазначения.СкопироватьРекурсивно(ДополнительныеПараметры);
			ДополнительныеПараметрыОбновленияСторно.ЗаписыватьВОднойТранзакции = Истина; 
			СформироватьИЗаписатьДвижения(
				СторноДокумент,
				ПолноеИмяРегистра,
				МенеджерРегистра,
				ДополнительныеПараметрыОбновленияСторно, 
				ИмяПоляРегистратор);
		КонецЕсли;

		Если Не ДополнительныеПараметры.ЗаписыватьВОднойТранзакции Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;	
		
	Исключение
		
		Если Не ДополнительныеПараметры.ЗаписыватьВОднойТранзакции Тогда
			ОтменитьТранзакцию();
		КонецЕсли;	
		
		ТекстСообщения = НСтр("ru = 'Не удалось перезаписать движения в регистр ""%ИмяРегистра%"" по документу %Ссылка% по причине: %Причина%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Ссылка);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяРегистра%", ПолноеИмяРегистра);
		
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
			Ссылка.Метаданные(), Ссылка, ТекстСообщения);
		
		Если НаборЗаписей <> Неопределено Тогда
			ОбновлениеИнформационнойБазы.ЗарегистрироватьПроблемуСДанными(Ссылка,
				СтрШаблон(НСтр("ru = 'Не удалось перезаписать движения в регистр ""%1"" по документу %2'"),
					ПолноеИмяРегистра, Ссылка));
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
		КонецЕсли;
		
		Если ДополнительныеПараметры.ЗаписыватьВОднойТранзакции Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецПопытки;

	Возврат Истина;
	
КонецФункции

// Параметры:
//  Данные - ЛюбаяСсылка
//         - Массив
//         - РегистрСведенийНаборЗаписей, РегистрНакопленияНаборЗаписей, РегистрБухгалтерииНаборЗаписей
//         - РегистрРасчетаНаборЗаписей - данные, по которым нужно зарегистрировать изменения.
//         - ТаблицаЗначений - значения измерений независимого регистра сведений. Требования:
//                              а) все измерения регистра должны входить в основной отбор;
//                              б) в таблице должны быть только колонки, соответствующие по именам измерениям регистра,
//                                по которым ранее регистрировалась необходимость обработки;
//                              в) запись наборов в процессе обновления должна проходить с тем же отбором,
//                                что и регистрация необходимости обработки;
//                              г) в ДополнительныеПараметры нужно передать соответствующий признак и полное имя регистра.
//  ДополнительныеПараметры - см. ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки.
//
Процедура ОтметитьВыполнениеОбработкиИнтерактивно(Данные, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ОбновлениеИнформационнойБазы.ОтложенноеОбновлениеЗавершено() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбновлениеИнформационнойБазы.Ссылка КАК Ссылка
		|ИЗ
		|	ПланОбмена.ОбновлениеИнформационнойБазы КАК ОбновлениеИнформационнойБазы
		|ГДЕ
		|	НЕ ОбновлениеИнформационнойБазы.ЭтотУзел";
	Очереди = Запрос.Выполнить().Выгрузить();
	Очереди = Очереди.ВыгрузитьКолонку("Ссылка");
	
	КопияДанных = Данные;
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	КонецЕсли;
	
	Если (ТипЗнч(Данные) = Тип("Массив")
		Или ТипЗнч(Данные) = Тип("ТаблицаЗначений"))
		И Данные.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЭтоДвижения Тогда
		
		Набор = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ДополнительныеПараметры.ПолноеИмяРегистра).СоздатьНаборЗаписей();
		
		Если ТипЗнч(Данные) = Тип("Массив") Тогда
			Для Каждого СтрокаМассива Из Данные Цикл
				Набор.Отбор.Регистратор.Установить(СтрокаМассива);
				ПланыОбмена.УдалитьРегистрациюИзменений(Очереди, Набор);
			КонецЦикла;
		Иначе
			Набор.Отбор.Регистратор.Установить(Данные);
			ПланыОбмена.УдалитьРегистрациюИзменений(Очереди, Набор);
		КонецЕсли;
		
	ИначеЕсли ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений Тогда
		
		Набор = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ДополнительныеПараметры.ПолноеИмяРегистра).СоздатьНаборЗаписей();
		МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ДополнительныеПараметры.ПолноеИмяРегистра);
		
		УстановитьНедостающиеОтборыВНаборе(Набор, МетаданныеОбъекта, Данные);
		
		Для Каждого СтрокаТаблицы Из Данные Цикл
			Для Каждого Колонка Из Данные.Колонки Цикл
				Набор.Отбор[Колонка.Имя].Значение = СтрокаТаблицы[Колонка.Имя];
				Набор.Отбор[Колонка.Имя].Использование = Истина;
			КонецЦикла;
			
			ПланыОбмена.УдалитьРегистрациюИзменений(Очереди, Набор);
		КонецЦикла;
		
	Иначе
		Если ТипЗнч(Данные) = Тип("ОбъектМетаданных") Тогда
			ТекстИсключения = НСтр("ru = 'Не поддерживается отметка выполнения обработки обновления целиком объекта метаданных. Нужно отмечать обработку конкретных данных.'");
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
		
		Если ТипЗнч(Данные) <> Тип("Массив") Тогда
			
			ТипЗначенияОбъекта = ТипЗнч(Данные);
			МетаданныеОбъекта  = Метаданные.НайтиПоТипу(ТипЗначенияОбъекта);
			
			Если ОбщегоНазначения.ЭтоРегистрСведений(МетаданныеОбъекта)
				И МетаданныеОбъекта.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый Тогда
				Набор = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеОбъекта.ПолноеИмя()).СоздатьНаборЗаписей();
				Для Каждого ЭлементОтбора Из Данные.Отбор Цикл
					Набор.Отбор[ЭлементОтбора.Имя].Значение = ЭлементОтбора.Значение;
					Набор.Отбор[ЭлементОтбора.Имя].Использование = ЭлементОтбора.Использование;
				КонецЦикла;
				УстановитьНедостающиеОтборыВНаборе(Набор, МетаданныеОбъекта, Данные.Отбор);
			ИначеЕсли ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(МетаданныеОбъекта)
				И Не ОбщегоНазначения.ЭтоСсылка(ТипЗначенияОбъекта)
				И Данные.ЭтоНовый() Тогда
				
				Возврат;
			ИначеЕсли ОбщегоНазначения.ЭтоКонстанта(МетаданныеОбъекта) Тогда
				
				Возврат;
			Иначе
				Набор = Данные;
			КонецЕсли;
			
			ПланыОбмена.УдалитьРегистрациюИзменений(Очереди, Набор);
			КопияДанных = Набор;
		Иначе
			Для Каждого ЭлементМассива Из Данные Цикл
				ПланыОбмена.УдалитьРегистрациюИзменений(Очереди, ЭлементМассива);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Регистрирует плохие данные как проблемы системы.
// 
// Параметры:
//  ПлохиеДанные - Массив из Структура - Плохие данные.
//  ОбъектовОбработано - Число - Объектов обработано
//  Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//  ДополнительныеПараметры - см. ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки.
Процедура ЗаписатьПлохиеДанные(ПлохиеДанные, ОбъектовОбработано, Параметры, ДополнительныеПараметры = Неопределено) Экспорт
	Если ОбъектовОбработано > 0 Тогда
		Для Каждого ПроблемаСДанными Из ПлохиеДанные Цикл
			ОбновлениеИнформационнойБазы.ЗарегистрироватьПроблемуСДанными(ПроблемаСДанными.СсылкаНаОбъект,
				ПроблемаСДанными.Рекомендация, Параметры);
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ПроблемаСДанными.СсылкаНаОбъект,
				ДополнительныеПараметры);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Описание проблемы с данными.
// 
// Параметры:
//  СсылкаНаОбъект - ЛюбаяСсылка - Ссылка на объект
//  Рекомендация - Строка - Рекомендация пользователю, как исправить проблему с данными.
//  ИнформацияОбОшибке - Строка - Расширенная информация об ошибке.
// 
// Возвращаемое значение:
//  Структура -  Проблема с данными:
// * СсылкаНаОбъект - ЛюбаяСсылка
// * Рекомендация - Строка
// * ИнформацияОбОшибке -Строка
Функция ПроблемаСДанными(СсылкаНаОбъект, Рекомендация, ИнформацияОбОшибке) Экспорт
	Возврат Новый Структура("СсылкаНаОбъект, Рекомендация, ИнформацияОбОшибке", СсылкаНаОбъект, Рекомендация, ИнформацияОбОшибке);
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьНедостающиеОтборыВНаборе(Набор, МетаданныеНабора, УстанавливаемыеОтборы)
	Для Каждого Измерение Из МетаданныеНабора.Измерения Цикл
		
		ЕстьОтборПоИзмерению = Ложь;
		
		Если ТипЗнч(УстанавливаемыеОтборы) = Тип("ТаблицаЗначений") Тогда
			ЕстьОтборПоИзмерению = УстанавливаемыеОтборы.Колонки.Найти(Измерение.Имя) <> Неопределено;
		Иначе //Отбор
			ЕстьОтборПоИзмерению = УстанавливаемыеОтборы[Измерение.Имя].Использование;	
		КонецЕсли;
		
		Если Не ЕстьОтборПоИзмерению Тогда
			ПустоеЗначение = Измерение.Тип.ПривестиЗначение();
			Набор.Отбор[Измерение.Имя].Установить(ПустоеЗначение);
		КонецЕсли;
	КонецЦикла;
	
	Если МетаданныеНабора.ОсновнойОтборПоПериоду Тогда
		
		Если ТипЗнч(УстанавливаемыеОтборы) = Тип("ТаблицаЗначений") Тогда
			ЕстьОтборПоИзмерению = УстанавливаемыеОтборы.Колонки.Найти("Период") <> Неопределено;
		Иначе //Отбор
			Период = УстанавливаемыеОтборы.Период; // ЭлементОтбораКомпоновкиДанных
			ЕстьОтборПоИзмерению = Период.Использование;
		КонецЕсли;
		
		Если Не ЕстьОтборПоИзмерению Тогда
			ПустоеЗначение = '00010101';
			Набор.Отбор.Период.Установить(ПустоеЗначение);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

// Возвращаемое значение:
//  Запрос - Запрос различий отражения документов в независимом регистре
Функция ЗапросРазличийОтраженияДокументовВНезависимомРегистре(РезультатАдаптацииЗапроса, ПолноеИмяРегистра, ПолноеИмяДокумента, НеиспользуемыеПоля = Неопределено) Экспорт

	ТекстЗапросаФормированияДвижений = РезультатАдаптацииЗапроса.ТекстЗапроса;
	ЗначенияПараметров = РезультатАдаптацииЗапроса.ЗначенияПараметров;
	
	ТекстРезультирующегоЗапроса	= "";
	
	МетаданныеРегистра = Метаданные.НайтиПоПолномуИмени(ПолноеИмяРегистра); // ОбъектМетаданныхРегистрСведений - 
		
	ТекстГруппировкиСуммирующегоЗапроса = "";	
	ТекстЗапросаФормированияДвижений = СтрЗаменить(ТекстЗапросаФормированияДвижений,
										"ВЫБРАТЬ", // @query-part
										"ВЫБРАТЬ
										|	1 КАК КонтрольноеПолеОбновлениеИБ,"); // @query-part
	ТекстПолейРегистра = "
						|	-1,";
	ТекстВыборкиСуммирующегоЗапроса = "
									|	СУММА(КонтрольноеПолеОбновлениеИБ) КАК КонтрольноеПолеОбновлениеИБ,";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапросаФормированияДвижений);
	
	Запрос = СхемаЗапроса.ПакетЗапросов[0];
	
	ВсеКолонки = Новый Массив;
	
	// Поля по которым не требуется проверять совпадение данных в ИБ с данными запроса.
	Если НеиспользуемыеПоля = Неопределено Тогда
		НеиспользуемыеПоля = Новый Массив;
	КонецЕсли; 
	
	Для каждого Колонка Из Запрос.Колонки Цикл
		
		ВсеКолонки.Добавить(Колонка.Псевдоним);
		
		Если Колонка.Псевдоним = "КонтрольноеПолеОбновлениеИБ" Тогда
			Продолжить;
		КонецЕсли;
		
		Поле = МетаданныеРегистра.Измерения.Найти(Колонка.Псевдоним); 
		
		Если Поле <> Неопределено Тогда
			ДополнитьТекстРегистраПоМетаданнымПоля(ТекстПолейРегистра, Поле);
		Иначе
			Поле = МетаданныеРегистра.Ресурсы.Найти(Колонка.Псевдоним); 
			Если Поле <> Неопределено Тогда
				ДополнитьТекстРегистраПоМетаданнымПоля(ТекстПолейРегистра, Поле);
			Иначе
				Поле = МетаданныеРегистра.Реквизиты.Найти(Колонка.Псевдоним); 
				Если Поле <> Неопределено Тогда
					ДополнитьТекстРегистраПоМетаданнымПоля(ТекстПолейРегистра, Поле);
				Иначе
					ТекстИсключения = НСтр("ru = 'В запросе выборки данных документа %ПолноеИмяДокумента% для формирования движений по регистру %ПолноеИмяРегистра% присутствует поле, которого нет в регистре.'");
					ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
					ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяРегистра%", ПолноеИмяРегистра);
					
					ВызватьИсключение ТекстИсключения;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НеиспользуемыеПоля.Найти(Колонка.Псевдоним) = Неопределено Тогда
			ДополнитьТекстТекстВыборкиСуммирующегоЗапросаПоМетаданнымПоля(ТекстВыборкиСуммирующегоЗапроса, Поле);
			ДополнитьТекстГруппировкиСуммирующегоЗапросаПоМетаданнымПоля(ТекстГруппировкиСуммирующегоЗапроса, Поле);
		КонецЕсли;
				
	КонецЦикла;
	
	ТекстВставкиЗапросФормирующийДвижения = "";
	
	Для каждого Измерение Из МетаданныеРегистра.Измерения Цикл		
		
		ЗначенияПараметров.Вставить("ПустоеЗначение" + Измерение.Имя, Измерение.Тип.ПривестиЗначение());
		
		Если ВсеКолонки.Найти(Измерение.Имя) <> Неопределено
			ИЛИ НеиспользуемыеПоля.Найти(Измерение.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДополнитьТекстРегистраПоМетаданнымПоля(ТекстПолейРегистра, Измерение);
		ДополнитьТекстТекстВыборкиСуммирующегоЗапросаПоМетаданнымПоля(ТекстВыборкиСуммирующегоЗапроса, Измерение);
		ДополнитьТекстГруппировкиСуммирующегоЗапросаПоМетаданнымПоля(ТекстГруппировкиСуммирующегоЗапроса, Измерение);
		
		ТекстВставкиЗапросФормирующийДвижения = ТекстВставкиЗапросФормирующийДвижения + "
		|	&ПустоеЗначение" + Измерение.Имя + " КАК " + Измерение.Имя + ",";
		
	КонецЦикла;
	
	Для каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл		
		
		ЗначенияПараметров.Вставить("ПустоеЗначение" + Ресурс.Имя, Ресурс.Тип.ПривестиЗначение());
		
		Если ВсеКолонки.Найти(Ресурс.Имя) <> Неопределено
			ИЛИ НеиспользуемыеПоля.Найти(Ресурс.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДополнитьТекстРегистраПоМетаданнымПоля(ТекстПолейРегистра, Ресурс);
		ДополнитьТекстТекстВыборкиСуммирующегоЗапросаПоМетаданнымПоля(ТекстВыборкиСуммирующегоЗапроса, Ресурс);
		ДополнитьТекстГруппировкиСуммирующегоЗапросаПоМетаданнымПоля(ТекстГруппировкиСуммирующегоЗапроса, Ресурс);
		
		ТекстВставкиЗапросФормирующийДвижения = ТекстВставкиЗапросФормирующийДвижения + "
		|	&ПустоеЗначение" + Ресурс.Имя + " КАК " + Ресурс.Имя + ",";
		
	КонецЦикла;
	
	Для каждого Реквизит Из МетаданныеРегистра.Реквизиты Цикл		
		
		ЗначенияПараметров.Вставить("ПустоеЗначение" + Реквизит.Имя, Реквизит.Тип.ПривестиЗначение());
		
		Если ВсеКолонки.Найти(Реквизит.Имя) <> Неопределено
			ИЛИ НеиспользуемыеПоля.Найти(Реквизит.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДополнитьТекстРегистраПоМетаданнымПоля(ТекстПолейРегистра, Реквизит);
		ДополнитьТекстТекстВыборкиСуммирующегоЗапросаПоМетаданнымПоля(ТекстВыборкиСуммирующегоЗапроса, Реквизит);
		ДополнитьТекстГруппировкиСуммирующегоЗапросаПоМетаданнымПоля(ТекстГруппировкиСуммирующегоЗапроса, Реквизит);
		
		ТекстВставкиЗапросФормирующийДвижения = ТекстВставкиЗапросФормирующийДвижения + "
		|	&ПустоеЗначение" + Реквизит.Имя + " КАК " + Реквизит.Имя + ",";
		
	КонецЦикла;
	
	ТекстПолейРегистра = Лев(ТекстПолейРегистра, СтрДлина(ТекстПолейРегистра) - 1);
	ТекстВыборкиСуммирующегоЗапроса = Лев(ТекстВыборкиСуммирующегоЗапроса, СтрДлина(ТекстВыборкиСуммирующегоЗапроса) - 1);
	ТекстГруппировкиСуммирующегоЗапроса = Лев(ТекстГруппировкиСуммирующегоЗапроса, СтрДлина(ТекстГруппировкиСуммирующегоЗапроса) - 1);
	
	Если Не ПустаяСтрока(ТекстВставкиЗапросФормирующийДвижения) Тогда
		ТекстВставкиЗапросФормирующийДвижения = Лев(ТекстВставкиЗапросФормирующийДвижения, СтрДлина(ТекстВставкиЗапросФормирующийДвижения) - 1);
		ТекстЗапросаФормированияДвижений = СтрЗаменить(ТекстЗапросаФормированияДвижений,
											"ИЗ",
											",
											|" +ТекстВставкиЗапросФормирующийДвижения + "
											|ИЗ");
	КонецЕсли;
	
	ТекстРегистра = 
	"ВЫБРАТЬ
	|&ТекстПолейРегистра
	|ИЗ
	|	&ПолноеИмяРегистра КАК ТаблицаРегистра
	|ГДЕ
	|	ТаблицаРегистра.Ссылка ССЫЛКА ПолноеИмяДокумента";
	
	ТекстРегистра = СтрЗаменить(ТекстРегистра, "&ТекстПолейРегистра", ТекстПолейРегистра);
	ТекстРегистра = СтрЗаменить(ТекстРегистра, "&ПолноеИмяРегистра", ПолноеИмяРегистра);
	ТекстРегистра = СтрЗаменить(ТекстРегистра, "ПолноеИмяДокумента", ПолноеИмяДокумента);
	
	ТекстРезультирующегоЗапроса =  
	"ВЫБРАТЬ
	|&ТекстВыборкиСуммирующегоЗапроса
	|ИЗ
	|	(ВЫБРАТЬ &ТекстЗапросаФормированияДвижений
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ &ТекстРегистра
	|) КАК ВложенныйЗапрос 
	|СГРУППИРОВАТь ПО
	|&ТекстГруппировкиСуммирующегоЗапроса
	|ИМЕЮЩИЕ
	|	СУММА(КонтрольноеПолеОбновлениеИБ) <> 0";
	
	ТекстРезультирующегоЗапроса = СтрЗаменить(ТекстРезультирующегоЗапроса, "&ТекстВыборкиСуммирующегоЗапроса", ТекстВыборкиСуммирующегоЗапроса);
	ТекстРезультирующегоЗапроса = СтрЗаменить(ТекстРезультирующегоЗапроса, "ВЫБРАТЬ &ТекстЗапросаФормированияДвижений", ТекстЗапросаФормированияДвижений);
	ТекстРезультирующегоЗапроса = СтрЗаменить(ТекстРезультирующегоЗапроса, "ВЫБРАТЬ &ТекстРегистра", ТекстРегистра);
	ТекстРезультирующегоЗапроса = СтрЗаменить(ТекстРезультирующегоЗапроса, "&ТекстГруппировкиСуммирующегоЗапроса", ТекстГруппировкиСуммирующегоЗапроса);
	
	ЗапросВыборки = Новый Запрос;
	Для Каждого Параметр Из ЗначенияПараметров Цикл
		
		ЗапросВыборки.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
		
	КонецЦикла;
	
	ЗапросВыборки.Текст = ТекстРезультирующегоЗапроса;
	
	Возврат ЗапросВыборки;
	
КонецФункции

Процедура ДополнитьТекстРегистраПоМетаданнымПоля(ТекстРегистра, Поле)
	
	Если Поле.Имя = "Комментарий" Тогда
		ТекстРегистра = ТекстРегистра + "
		|	ВЫРАЗИТЬ(ТаблицаРегистра." + Поле.Имя + " КАК Строка (1000)),";
	ИначеЕсли Поле.Тип.СодержитТип(Тип("СправочникСсылка.КлючиРеестраДокументов")) Тогда
		ТекстРегистра = ТекстРегистра + "
		|	ТаблицаРегистра." + Поле.Имя + ".Ключ,";
	Иначе	
		ТекстРегистра = ТекстРегистра + "
		|	ТаблицаРегистра." + Поле.Имя + ",";
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьТекстТекстВыборкиСуммирующегоЗапросаПоМетаданнымПоля(ТекстВыборкиСуммирующегоЗапроса, Поле)
	
	ТекстВыборкиСуммирующегоЗапроса = ТекстВыборкиСуммирующегоЗапроса + "
		|	ВЫБОР КОГДА ВложенныйЗапрос." + Поле.Имя + " ЕСТЬ NULL ИЛИ ВложенныйЗапрос." + Поле.Имя + " = НЕОПРЕДЕЛЕНО ТОГДА &ПустоеЗначение" + Поле.Имя + " ИНАЧЕ ВложенныйЗапрос." + Поле.Имя + " КОНЕЦ  КАК " + Поле.Имя + ",";
		
КонецПроцедуры

Процедура ДополнитьТекстГруппировкиСуммирующегоЗапросаПоМетаданнымПоля(ТекстГруппировкиСуммирующегоЗапроса, Поле)
	
	ТекстГруппировкиСуммирующегоЗапроса = ТекстГруппировкиСуммирующегоЗапроса + "
		|	ВЫБОР КОГДА ВложенныйЗапрос." + Поле.Имя + " ЕСТЬ NULL ИЛИ ВложенныйЗапрос." + Поле.Имя + " = НЕОПРЕДЕЛЕНО ТОГДА &ПустоеЗначение" + Поле.Имя + " ИНАЧЕ ВложенныйЗапрос." + Поле.Имя + " КОНЕЦ,";
		
КонецПроцедуры

#Область ЗаполненияПустойИБ

// Обработчик первого запуска УТ 11.
//
Процедура ПервыйЗапуск() Экспорт
	
	ЭтоПереходСБазовойВерсииНаПРОФ = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ПереходСБазовойВерсииНаПРОФ","ЭтоПереходСБазовойВерсииНаПРОФ");
	Если ЭтоПереходСБазовойВерсииНаПРОФ <> Неопределено И ЭтоПереходСБазовойВерсииНаПРОФ Тогда
		Возврат;
	КонецЕсли;
	
	//++ Локализация
	Справочники.Валюты.ЗаполнитьВалютыПоУмолчанию();
	//-- Локализация
	Справочники.УпаковкиЕдиницыИзмерения.ЗаполнитьЕдиницыИзмеренияИзКлассификатора("006,113,166,796,055,168,112");
	
	ЗаполнитьКонстантыПоУмолчанию();
	
	БизнесПроцессы.СогласованиеПродажи.ИнициализироватьРолиИсполнителей();
	БизнесПроцессы.СогласованиеЗакупки.ИнициализироватьРолиИсполнителей();
	БизнесПроцессы.СогласованиеЦенНоменклатуры.ИнициализироватьРолиИсполнителей();
	БизнесПроцессы.СогласованиеЗаявкиНаВозвратТоваровОтКлиента.ИнициализироватьРолиИсполнителей();
	БизнесПроцессы.СогласованиеЗаказаНаВнутреннееПотребление.ИнициализироватьРолиИсполнителей();
	
	Справочники.Партнеры.ЗаполнитьПредопределенныхПартнеров();
	Справочники.Контрагенты.ЗаполнитьПредопределенныхКонтрагентов();

	Справочники.СкидкиНаценки.ЗаполнитьПредопределенныеЭлементы();
	Справочники.СостоянияПроцессов.НачальноеЗаполнениеПоследовательностиЭтаповПроцессовПродаж();
	Справочники.СтатьиДвиженияДенежныхСредств.ЗаполнитьПредопределенныеСтатьиДвиженияДенежныхСредств();
	ЗаполнитьСвойстваВидовКонтактнойИнформации();
	Справочники.НастройкиХозяйственныхОпераций.ЗаполнитьПредопределенныеНастройкиХозяйственныхОпераций();
	Справочники.ПричиныОтменыЗаказовПоставщикам.ЗаполнитьПредопределенныеЭлементы();
	Справочники.ИнструкцииБанку.ЗаполнитьПредопределенныеЭлементы();
	
	Справочники.СтавкиНДС.СоздатьЭлементыПервоначальногоЗаполнения();
	УчетНДСЛокализация.ОсновныеСтавкиНДС_СоздатьЭлементыПервоначальногоЗаполнения();
	
	АудитСостоянияСистемы.ЗаполнитьСправочникПроверокСостоянияСистемы();
	
	ПланыВидовХарактеристик.СтатьиАктивовПассивов.ЗаполнитьНастройкиПредопределенныхЭлементов();
	
	КалендарныеГрафики.ОбновитьИспользованиеНесколькихПроизводственныхКалендарей();
	Справочники.ВариантыКлассификацииЗадолженности.СоздатьВариантКлассификацииЗадолженностиПоУмолчаниюМонопольно();
	МониторингЦелевыхПоказателей.ЗаполнитьСтруктуруЦелейИВариантыАнализа();
	
	ПланыОбмена.МобильноеПриложениеТорговыйПредставитель.НачальноеЗаполнениеКодаУзлаЭтойИБ();
	
	РегистрыСведений.ШтрихкодыНоменклатуры.ЗаполнитьКонстантыПодсистемыШтрихкодирования();
	ОбновлениеИнформационнойБазыБПО.ОбновитьПоставляемыеДрайвера();
	
	ОбновлениеИнформационнойБазыУТ.ОтключитьНеиспользуемыеРегламентныеЗаданияБазовойВерсии();
	
КонецПроцедуры

// Заполняет константы значениями по умолчанию.
// Вызывается при первоначальном заполнении ИБ после заполнения следующих данных
//	- Справочник.УпаковкиЕдиницыИзмерения.
//
Процедура ЗаполнитьКонстантыПоУмолчанию()
	
	УстановитьЕдиницыИзмерения();
	
	ЗначенияКонстант = НастройкиСистемыПовтИсп.ПолучитьЗначенияКонстантПоУмолчанию();
	Для Каждого КлючИЗначение Из ЗначенияКонстант Цикл
		Константы[КлючИЗначение.Ключ].Установить(КлючИЗначение.Значение);
	КонецЦикла; 
	
	ОбеспечениеСервер.НеИспользоватьНазначенияБезЗаказаВычислитьИЗаписатьИнверсией();
	ОбновитьПовторноИспользуемыеЗначения();
	
	Если НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		Константы.ОграничиватьДоступНаУровнеЗаписейУниверсально.Установить(Истина);
	КонецЕсли;
	
	Константы.ИспользоватьМеханизмИзмененияНастроекСписковДокументов.Установить(Истина);
	
КонецПроцедуры

// Заполняет служебные константы-идентификаторы конфигурации.
//
Процедура УстановитьСлужебныеКонстанты() Экспорт
	
	// Определим правильные значения служебных констант (функциональных опций).
	ЗначенияКонстант = Новый Структура("УправлениеТорговлей, КомплекснаяАвтоматизация, УправлениеПредприятием", Ложь, Ложь, Ложь);
	
	МодулиПодсистем = Новый Массив;
	ПодсистемыКонфигурацииПереопределяемый.ПриДобавленииПодсистем(МодулиПодсистем);
	
	МодулиПодсистем = ОбщегоНазначенияУТКлиентСервер.ПреобразоватьМассивВСтруктуруИлиСоответствие(МодулиПодсистем, Истина);
	
	Если МодулиПодсистем.Свойство("ОбновлениеИнформационнойБазыУП") Тогда
		ЗначенияКонстант.УправлениеПредприятием = Истина;
	ИначеЕсли МодулиПодсистем.Свойство("ОбновлениеИнформационнойБазыКА") Тогда
		ЗначенияКонстант.КомплекснаяАвтоматизация = Истина;
	ИначеЕсли МодулиПодсистем.Свойство("ОбновлениеИнформационнойБазыУТ") Тогда
		ЗначенияКонстант.УправлениеТорговлей = Истина;
	Иначе
		ВызватьИсключение НСтр("ru = 'Не удалось определить служебный идентификатор конфигурации.'");
	КонецЕсли;
	
	// Установим эти значения.
	УстановитьПривилегированныйРежим(Истина);
	
	ЕстьИзменения = Ложь;
	
	Для Каждого КлючИЗначение Из ЗначенияКонстант Цикл
		
		Если Константы[КлючИЗначение.Ключ].Получить() <> КлючИЗначение.Значение Тогда
			
			// Текущее значение константы в ИБ не соответствует правильному - исправим
			МенеджерЗначения = Константы[КлючИЗначение.Ключ].СоздатьМенеджерЗначения();
			
			МенеджерЗначения.Значение = КлючИЗначение.Значение;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения, Ложь);
			
			ЕстьИзменения = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьИзменения Тогда
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Процедура устанавливает значение валюты регламентированного учета.
// Вызывается при первоначальном заполнении ИБ.
//

// Процедура устанавливает значения констант, связанных с единицами измерения
//
Процедура УстановитьЕдиницыИзмерения()
	
	БазоваяЕдиницаИзмеренияДлины  = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("006");
	БазоваяЕдиницаИзмеренияВеса   = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("166");
	БазоваяЕдиницаИзмеренияОбъема = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("113");
	БазоваяЕдиницаИзмеренияПлощади = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("055");
	БазоваяЕдиницаИзмеренияШтук    = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("796");
	БазоваяЕдиницаИзмеренияРазливнойПродукции = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("112");
	
	Константы.ЕдиницаИзмеренияДлины.Установить(БазоваяЕдиницаИзмеренияДлины);
	Константы.ЕдиницаИзмеренияВеса.Установить(БазоваяЕдиницаИзмеренияВеса);
	Константы.ЕдиницаИзмеренияОбъема.Установить(БазоваяЕдиницаИзмеренияОбъема);
	Константы.ЕдиницаИзмеренияПлощади.Установить(БазоваяЕдиницаИзмеренияПлощади);
	Константы.ЕдиницаИзмеренияКоличестваШтук.Установить(БазоваяЕдиницаИзмеренияШтук);
	Константы.ЕдиницаИзмеренияРазливнойПродукции.Установить(БазоваяЕдиницаИзмеренияРазливнойПродукции);
	
КонецПроцедуры

// Для базовой версии отключает неиспользуемые регламентные задания.
//
Процедура ОтключитьНеиспользуемыеРегламентныеЗаданияБазовойВерсии() Экспорт
	
	Если НЕ СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации()
	 ИЛИ ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	НеиспользуемыеЗадания = Новый Структура(
		"ABCКлассификацияНоменклатуры,
		|ABCКлассификацияПартнеров,
		|АрхивированиеЧековККМ,
		|XYZКлассификацияНоменклатуры,
		|XYZКлассификацияПартнеров,
		|АрхивированиеЧековККМ,
		|ЗагрузкаКурсовВалют,
		|ЗапускДополнительныхОбработок,
		|ЗаполнениеДанныхДляОграниченияДоступа,
		|ИнтеграцияС1СДокументооборотВыполнитьОбменДанными,
		|ОбновлениеАгрегатов,
		|ОбновлениеДанныхОДоступностиТоваровДляВнешнихПользователей,
		|ОбновлениеКодовТоваровПодключаемогоОборудования,
		|ОбновлениеНоменклатурыПродаваемойСовместно,
		|ОбновлениеСтатусовДоставкиSMS,
		|ОтправкаSMS,
		|ОчисткаСегментов,
		|ПерестроениеАгрегатов,
		|ПолучениеИОтправкаЭлектронныхПисем,
		|ПроведениеПоРасчетамСПартнерами,
		|РасчетИсточниковДанныхВариантовАнализа,
		|РасчетПоказателейПрогнозаРасходаУпаковок,
		|СозданиеЗаданийНаОтбор,
		|СозданиеЗаданийНаПересчетТоваров,
		|СозданиеЗаданийНаПеремещение,
		|СозданиеРасходныхОрдеров,
		|УведомлениеИсполнителейОНовыхЗадачах,
		|УдалениеНеактуальнойИнформацииСинхронизации,
		|УдалениеОтложенныхЧековККМ,
		|ФормированиеСегментов");
	
	ПараметрыЗадания = Новый Структура("Использование", Истина);
	МассивЗаданий = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыЗадания); // Массив Из РегламентноеЗадание - 
	
	ПараметрыЗадания = Новый Структура("Использование", Ложь);
	
	Для Каждого Задание Из МассивЗаданий Цикл
		
		Если НеиспользуемыеЗадания.Свойство(Задание.Метаданные.Имя) Тогда
			РегламентныеЗаданияСервер.ИзменитьЗадание(Задание.УникальныйИдентификатор, ПараметрыЗадания);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПереходНаВерсиюПроф

// Обработчик перехода на версию ПРОФ.
//
Процедура ПерейтиСБазовойВерсииНаПРОФ() Экспорт
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ПереходСБазовойВерсииНаПРОФ","ЭтоПереходСБазовойВерсииНаПРОФ",Истина);
	
	БазоваяВерсия = СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации();
	
	ЗначенияКонстант = Новый Структура;
	ЗначенияКонстант.Вставить("БазоваяВерсия",                   БазоваяВерсия);
	ЗначенияКонстант.Вставить("ИспользоватьУправлениеДоступом",  Не БазоваяВерсия);
	ЗначенияКонстант.Вставить("УправлениеТорговлей",             Истина);
	ЗначенияКонстант.Вставить("ОтветственныйВДокументах",        Не БазоваяВерсия);
	ЗначенияКонстант.Вставить("НеБазоваяВерсия",                 Не БазоваяВерсия);
	
	Для Каждого КлючИЗначение Из ЗначенияКонстант Цикл
		Константы[КлючИЗначение.Ключ].Установить(КлючИЗначение.Значение);
	КонецЦикла; 
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры
 
#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновленияУТ(Обработчики) Экспорт

#Область ПервыйЗапуск

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТ.ПервыйЗапуск";
	Обработчик.Версия = "";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Комментарий = "";

#КонецОбласти

//++ Локализация
#Область СоздатьЭлементыСтавкиНДСДляМежценовойРазницы

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТ.СоздатьЭлементыСтавкиНДСДляМежценовойРазницы";
	Обработчик.Версия = "11.5.18.32";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("c5c787dc-9056-4e5f-b0b8-340cf710ff1a");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУТ.СоздатьЭлементыСтавкиНДСДляМежценовойРазницы_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Создает новые элементы справочника ""Ставки НДС"" для типа налогообложения НДС ""Облагается НДС с межценовой разницы"".
		|В ставку 0% добавляет тип налогообложения НДС ""Космическая деятельность"".
		|В ставку ""Без НДС"" добавляет тип налогообложения НДС ""Облагается НДС в стране ЕАЭС (не РФ)"".
		|Удаляет дубли в табличной части ""Типы налогообложения НДС"" для ставки ""Без НДС"".'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Справочники.СтавкиНДС.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.СтавкиНДС.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
#КонецОбласти    

#Область СоздатьЭлементыСтавкиНДСДляЛьготногоНалогообложенияНДСнаУСН

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТ.СоздатьЭлементыСтавкиНДСДляЛьготногоНалогообложенияНДСнаУСН";
	Обработчик.Версия = "11.5.20.16";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("c5c787dc-9056-4e5f-b0b8-340cf710ff1b");  
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУТ.СоздатьЭлементыСтавкиНДСДляМежценовойРазницы_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Создает новые элементы справочника ""Ставки НДС"" для типа налогообложения НДС ""Льготное налогообложение НДС на УСН"".
		|В ставку ""Без НДС"" добавляет тип налогообложения НДС ""Льготное налогообложение НДС на УСН"".
		|Удаляет дубли в табличной части ""Типы налогообложения НДС"" для ставки ""Без НДС"".'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Справочники.СтавкиНДС.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.СтавкиНДС.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
#КонецОбласти

//-- Локализация

#Область УстановитьКонстантуВариантУпорядочиванияПотребностейПоЗаказамДляОбеспечения
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТ.УстановитьКонстантуВариантУпорядочиванияПотребностейПоЗаказамДляОбеспечения";
	Обработчик.Версия = "11.5.17.23";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("eff0b943-6301-4891-9271-58b93258a33f");
	
	Обработчик.Комментарий = НСтр("ru = 'Устанавливает значение константы ""Вариант упорядочивания потребностей по заказам для обеспечения"".'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Константы.ВариантУпорядочиванияПотребностейПоЗаказамДляОбеспечения.ПолноеИмя());
	
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Константы.ВариантУпорядочиванияПотребностейПоЗаказамДляОбеспечения.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
#КонецОбласти

#Область СоздатьПредопределенныеНаборыСвойств

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.5.14.39";
	Обработчик.Процедура = "УправлениеСвойствамиСлужебный.СоздатьПредопределенныеНаборыСвойств";
	Обработчик.РежимВыполнения = "Оперативно";

#КонецОбласти

#Область ВключитьИспользованиеИнтеграцииС1САналитикой

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТ.ВключитьИспользованиеИнтеграцииС1САналитикой";
	Обработчик.Версия = "11.5.17.58";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("6faf3f70-8ae3-437a-89ab-4e4be3e4a802");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУТ.ВключитьИспользованиеИнтеграцииС1САналитикой_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Включает использование интеграции с 1С:Аналитикой, если подлючение было настроено ранее'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Константы.ИспользоватьИнтеграциюС1САналитикой.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Константы.ИспользоватьИнтеграциюС1САналитикой.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");

#КонецОбласти

#Область ОчисткаУстаревшихМетаданныхИзРегистраОбъектыНезарегистрированныеПриЗацикливании

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТ.ОбъектыНезарегистрированныеПриЗацикливании_ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.19.19";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("1b99875e-b1fe-43d1-ae81-54f2e0dc6ce1");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУТ.ОбъектыНезарегистрированныеПриЗацикливании_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Некритичный;
	Обработчик.Комментарий = НСтр("ru = 'Удаление записей регистра по устаревшим объектам метаданных.'");;
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыСведений.ОбъектыНезарегистрированныеПриЗацикливании.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.ОбъектыНезарегистрированныеПриЗацикливании.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыСведений.ОбъектыНезарегистрированныеПриЗацикливании.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

#КонецОбласти

#Область УстановитьПредельноеВремяОбновленияСпискаДокументов

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТ.УстановитьПредельноеВремяОбновленияСпискаДокументов";
	Обработчик.Версия = "11.5.20.3";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("f059a124-3d63-11ea-80fa-c7cc1f049a78");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУТ.ПредельноеВремяОбновленияСпискаДокументов_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Устанавливает предельное время обновления списков документов'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Константы.ПредельноеВремяОбновленияСпискаДокументов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Константы.ПредельноеВремяОбновленияСпискаДокументов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");

#КонецОбласти

КонецПроцедуры

// Заполняет пустое поле объекта значением реквизита по умолчанию. 
//
// Параметры:
//  Параметры			 - Структура - параметры обработчика обновления, передаваемые в обработчик при его запуске 
//  ПолноеИмяОбъекта	 - Строка - полное имя объекта, например, Документ.ПриходныйОрдерНаТовары 
//  ИмяРеквизита		 - Строка - имя заполняемого реквизита
//  ИсходноеЗначение	 - Произвольный - исходное значение реквизита. Если на момент обработки в объекте будет другое значение,
//										то он будет отмечен обработанным без изменения реквизита.
//  КонечноеЗначение	 - Произвольный - новое значение реквизита, которое будет присвоено при обработке.
//
Процедура ЗаменитьЗначениеРеквизита(Параметры, ПолноеИмяОбъекта, ИмяРеквизита, ИсходноеЗначение, КонечноеЗначение) Экспорт
	
	ОбъектыДляОбработки = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
			
	
	Пока ОбъектыДляОбработки.Следующий() Цикл
		НачатьТранзакцию();
		
		Попытка
			
			// Устанавливаем управляемую блокировку, чтобы провести ответственное чтение объекта.
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ОбъектыДляОбработки.Ссылка);
			
			Блокировка.Заблокировать();
			
			Объект = ОбъектыДляОбработки.Ссылка.ПолучитьОбъект();
			
			Если Объект = Неопределено Тогда
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ОбъектыДляОбработки.Ссылка);
				Продолжить;
			КонецЕсли;
			
			Если Объект[ИмяРеквизита] <> ИсходноеЗначение Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Объект);
			Иначе
				Объект[ИмяРеквизита] = КонечноеЗначение;
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
			КонецЕсли;
			
		    ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать %ИмяОбъекта%: %Ссылка% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяОбъекта%", ПолноеИмяОбъекта);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", ОбъектыДляОбработки.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
										УровеньЖурналаРегистрации.Предупреждение,
										МетаданныеОбъекта,
										ОбъектыДляОбработки.Ссылка,
										ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;	
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

// Регистрирует к обработке объекты, у которых реквизит имеет переданное значение.
//
// Параметры:
//  Параметры			 - Структура - параметры обработчика обновления, передаваемые в обработчик при его запуске 
//  ПолноеИмяОбъекта	 - Строка - полное имя объекта, например, Документ.ПриходныйОрдерНаТовары 
//  ИмяРеквизита		 - Строка - имя заполняемого реквизита
//  ИсходноеЗначение	 - Произвольный - к обработке будут отмечены реквизиты.
//
Процедура ЗаменитьЗначениеРеквизитаЗарегистрироватьДанныеКОбработке(Параметры, ПолноеИмяОбъекта, ИмяРеквизита, ИсходноеЗначение) Экспорт
  
	Запрос = Новый Запрос;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаОбъекта.Ссылка КАК Ссылка 
	|ИЗ
	|	&ПолноеИмяОбъекта КАК ТаблицаОбъекта
	|ГДЕ
	|	ТаблицаОбъекта.ИмяРеквизита = &ИсходноеЗначение";
		
	Запрос.УстановитьПараметр("ИсходноеЗначение", ИсходноеЗначение);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолноеИмяОбъекта", ПолноеИмяОбъекта);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяРеквизита", ИмяРеквизита);
	
	Запрос.Текст = ТекстЗапроса;
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура СообщитьОНеудачнойБлокировке(Ссылка) Экспорт
	ТекстСообщения = НСтр("ru = 'Не удалось заблокировать объект: %Объект% по причине: %Причина%'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Объект%", Ссылка);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
							УровеньЖурналаРегистрации.Предупреждение,
							Ссылка.Метаданные(),
							Ссылка,
							ТекстСообщения);
КонецПроцедуры

Процедура ЗаполнитьЗначениеРазделенияПоОбластямДанных() Экспорт
	
	Если Константы.НеИспользоватьРазделениеПоОбластямДанных.Получить() Тогда
		Константы.НеИспользоватьРазделениеПоОбластямДанныхИЭтоКА.Установить(Константы.КомплекснаяАвтоматизация.Получить());
		Константы.НеИспользоватьРазделениеПоОбластямДанныхИЭтоУТ.Установить(Константы.УправлениеТорговлей.Получить());
	Иначе
		Константы.НеИспользоватьРазделениеПоОбластямДанныхИЭтоКА.Установить(Ложь);
		Константы.НеИспользоватьРазделениеПоОбластямДанныхИЭтоУТ.Установить(Ложь);
	КонецЕсли;
	
КонецПроцедуры

#Область УстановитьКонстантуВариантУпорядочиванияПотребностейПоЗаказамДляОбеспечения

Процедура УстановитьКонстантуВариантУпорядочиванияПотребностейПоЗаказамДляОбеспечения() Экспорт
	
	Если Не ЗначениеЗаполнено(Константы.ВариантУпорядочиванияПотребностейПоЗаказамДляОбеспечения.Получить()) Тогда
		ЗначениеПоУмолчанию = Перечисления.ВариантыУпорядочиванияПотребностейПоЗаказамДляОбеспечения.ПриоритетИДатаОтгрузки;
		Константы.ВариантУпорядочиванияПотребностейПоЗаказамДляОбеспечения.Установить(ЗначениеПоУмолчанию);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

//++ Локализация
#Область СоздатьЭлементыСтавкиНДСДляМежценовойРазницы

Процедура СоздатьЭлементыСтавкиНДСДляМежценовойРазницы_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	// Регистрация не требуется
	Возврат;
	
КонецПроцедуры

Процедура СоздатьЭлементыСтавкиНДСДляМежценовойРазницы(Параметры) Экспорт 
	
	#Область СтавкиНДСДляМежценовойРазницы
	НачатьТранзакцию();
	Попытка
		
		#Область СтавкаНДС20_120
		СтавкаНДС20_120 = УчетНДСРФВызовСервера.СтавкаНДСПоЗначениюПеречисления(
			Перечисления.СтавкиНДС.НДС20_120, Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС);
			
		Если Не СтавкаНДС20_120.Пустая() Тогда
				
			СтавкаНДС20_120 = СтавкаНДС20_120.ПолучитьОбъект();
			
			Если СтавкаНДС20_120.ТипыНалогообложенияНДС.Найти(Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДССМежценовойРазницы, "ТипНалогообложенияНДС") = Неопределено Тогда 
				ТипНалогообложенияНДС = СтавкаНДС20_120.ТипыНалогообложенияНДС.Добавить();
				ТипНалогообложенияНДС.ТипНалогообложенияНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДССМежценовойРазницы;
				
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(СтавкаНДС20_120);
			КонецЕсли;
			
		КонецЕсли;
		#КонецОбласти
		
		#Область СтавкаНДС10_110
		СтавкаНДС10_110 = УчетНДСРФВызовСервера.СтавкаНДСПоЗначениюПеречисления(
			Перечисления.СтавкиНДС.НДС10_110, Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС, Истина);
			
		Если Не СтавкаНДС10_110.Пустая() Тогда
				
			СтавкаНДС10_110 = СтавкаНДС10_110.ПолучитьОбъект();
			
			Если СтавкаНДС10_110.ТипыНалогообложенияНДС.Найти(Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДССМежценовойРазницы, "ТипНалогообложенияНДС") = Неопределено Тогда 
				ТипНалогообложенияНДС = СтавкаНДС10_110.ТипыНалогообложенияНДС.Добавить();
				ТипНалогообложенияНДС.ТипНалогообложенияНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДССМежценовойРазницы;
				
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(СтавкаНДС10_110);
			КонецЕсли;
			
		КонецЕсли;
		#КонецОбласти
		
		#Область СтавкаНДС16_67
		СтавкаНДС16_67 = УчетНДСРФВызовСервера.СтавкаНДСПоЗначениюПеречисления(Перечисления.СтавкиНДС.НДС20_120, Перечисления.ТипыНалогообложенияНДС.ЭлектронныеУслуги);
		Если Не СтавкаНДС16_67.Пустая() Тогда
			
			СтавкаНДС16_67 = СтавкаНДС16_67.ПолучитьОбъект();
			
			Если СтавкаНДС16_67.ТипыНалогообложенияНДС.Найти(Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДССМежценовойРазницы, "ТипНалогообложенияНДС") = Неопределено Тогда 
				ТипНалогообложенияНДС = СтавкаНДС16_67.ТипыНалогообложенияНДС.Добавить();
				ТипНалогообложенияНДС.ТипНалогообложенияНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДССМежценовойРазницы;
				
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(СтавкаНДС16_67);
			КонецЕсли;
			
		КонецЕсли;
		#КонецОбласти
		
		#Область СтавкаНДС9_09
		СтавкаНДС9_09 = УчетНДСРФВызовСервера.СтавкаНДСПоЗначениюПеречисления(Перечисления.СтавкиНДС.НДС10_110, Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДССМежценовойРазницы, Ложь);
		Если СтавкаНДС9_09.Пустая() Тогда
			СтавкаНДС9_09 = Справочники.СтавкиНДС.СоздатьЭлемент();
		Иначе
			СтавкаНДС9_09 = СтавкаНДС9_09.ПолучитьОбъект();
		КонецЕсли;
	
		СтавкаНДС9_09.Наименование = "9,09%";
		СтавкаНДС9_09.Ставка = 9.09;
		СтавкаНДС9_09.Страна = Справочники.СтраныМира.Россия;
		СтавкаНДС9_09.НачалоПериода = Дата(2023, 01, 01);
			
		СтавкаНДС9_09.РасчетнаяСтавка = Ложь;
		СтавкаНДС9_09.ПеречислениеСтавкаНДС = Перечисления.СтавкиНДС.НДС10_110;
		
		СтавкаНДС9_09.ТипыНалогообложенияНДС.Очистить();
		ТипНалогообложенияНДС = СтавкаНДС9_09.ТипыНалогообложенияНДС.Добавить();
		ТипНалогообложенияНДС.ТипНалогообложенияНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДССМежценовойРазницы; 
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(СтавкаНДС9_09);
		#КонецОбласти
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстСообщения = НСтр("ru = 'Не удалось создать ставки НДС для межценовой разницы: %Причина%'",
				ОбщегоНазначения.КодОсновногоЯзыка());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,,,
				ТекстСообщения);
		
	КонецПопытки;
	#КонецОбласти
	
	#Область СтавкиНДСДляКосмическойДеятельности
	НачатьТранзакцию();
	Попытка
		
		СтавкаНДС0 = УчетНДСРФВызовСервера.СтавкаНДСПоЗначениюПеречисления(Перечисления.СтавкиНДС.НДС0);
			
		Если Не СтавкаНДС0.Пустая() Тогда
				
			СтавкаНДС0 = СтавкаНДС0.ПолучитьОбъект();
			
			Если СтавкаНДС0.ТипыНалогообложенияНДС.Найти(Перечисления.ТипыНалогообложенияНДС.Космос, "ТипНалогообложенияНДС") = Неопределено Тогда 
				ТипНалогообложенияНДС = СтавкаНДС0.ТипыНалогообложенияНДС.Добавить();
				ТипНалогообложенияНДС.ТипНалогообложенияНДС = Перечисления.ТипыНалогообложенияНДС.Космос;
				
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(СтавкаНДС0);
			КонецЕсли;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстСообщения = НСтр("ru = 'Не удалось создать ставки НДС для космической деятельности: %Причина%'",
				ОбщегоНазначения.КодОсновногоЯзыка());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,,,
				ТекстСообщения);
		
	КонецПопытки;
	
	#КонецОбласти
	
	#Область УдалитьДублиВСтавкеБезНДС
	НачатьТранзакцию();
	Попытка
		
		СтавкаБезНДС = Справочники.СтавкиНДС.БезНДС.ПолучитьОбъект();
		Если СтавкаБезНДС.ТипыНалогообложенияНДС.Найти(
			Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДСВСтранеЕАЭС, "ТипНалогообложенияНДС") = Неопределено Тогда 
			ТипНалогообложенияНДС = СтавкаБезНДС.ТипыНалогообложенияНДС.Добавить();
			ТипНалогообложенияНДС.ТипНалогообложенияНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДСВСтранеЕАЭС;
		КонецЕсли;
		СтавкаБезНДС.ТипыНалогообложенияНДС.Свернуть("ТипНалогообложенияНДС");
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(СтавкаБезНДС);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстСообщения = НСтр("ru = 'Не удалось обработать данные табличной части ""Типы налогообложения НДС"" ставки ""Без НДС"": %Причина%'",
				ОбщегоНазначения.КодОсновногоЯзыка());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,,,
				ТекстСообщения);
		
	КонецПопытки;
	#КонецОбласти

	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#КонецОбласти 

#Область СоздатьЭлементыСтавкиНДСДляЛьготногоНалогообложенияНДСнаУСН

Процедура СоздатьЭлементыСтавкиНДСДляЛьготногоНалогообложенияНДСнаУСН(Параметры) Экспорт 
	
	#Область СтавкиНДСДляЛьготногоНалогообложенияНДСнаУСН
	НачатьТранзакцию();
	Попытка
		
		#Область СтавкаНДС5		
		СтавкаНДС5 = УчетНДСРФВызовСервера.СтавкаНДСПоЗначениюПеречисления(Перечисления.СтавкиНДС.НДС5);
		Если СтавкаНДС5.Пустая() Тогда
			СтавкаНДС5 = Справочники.СтавкиНДС.СоздатьЭлемент();
		Иначе
			СтавкаНДС5 = СтавкаНДС5.ПолучитьОбъект();
		КонецЕсли;
	
		СтавкаНДС5.Наименование = "5%";
		СтавкаНДС5.Ставка = 5;
		СтавкаНДС5.Страна = Справочники.СтраныМира.Россия;
		СтавкаНДС5.НачалоПериода = Дата(2025, 01, 01);
		
		СтавкаНДС5.ПеречислениеСтавкаНДС = Перечисления.СтавкиНДС.НДС5;
		
		СтавкаНДС5.ТипыНалогообложенияНДС.Очистить();
		
		ТипНалогообложенияНДС = СтавкаНДС5.ТипыНалогообложенияНДС.Добавить();
		ТипНалогообложенияНДС.ТипНалогообложенияНДС = Перечисления.ТипыНалогообложенияНДС.ЛьготноеНалогообложениеНДСНаУСН; 
		ТипНалогообложенияНДС = СтавкаНДС5.ТипыНалогообложенияНДС.Добавить();
		ТипНалогообложенияНДС.ТипНалогообложенияНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(СтавкаНДС5);
		#КонецОбласти 
		
		#Область СтавкаНДС7		
		СтавкаНДС7 = УчетНДСРФВызовСервера.СтавкаНДСПоЗначениюПеречисления(Перечисления.СтавкиНДС.НДС7);
		Если СтавкаНДС7.Пустая() Тогда
			СтавкаНДС7 = Справочники.СтавкиНДС.СоздатьЭлемент();
		Иначе
			СтавкаНДС7 = СтавкаНДС7.ПолучитьОбъект();
		КонецЕсли;
	
		СтавкаНДС7.Наименование = "7%";
		СтавкаНДС7.Ставка = 7;
		СтавкаНДС7.Страна = Справочники.СтраныМира.Россия; 
		СтавкаНДС7.НачалоПериода = Дата(2025, 01, 01);
		
		СтавкаНДС7.ПеречислениеСтавкаНДС = Перечисления.СтавкиНДС.НДС7;
		
		СтавкаНДС7.ТипыНалогообложенияНДС.Очистить();
		
		ТипНалогообложенияНДС = СтавкаНДС7.ТипыНалогообложенияНДС.Добавить();
		ТипНалогообложенияНДС.ТипНалогообложенияНДС = Перечисления.ТипыНалогообложенияНДС.ЛьготноеНалогообложениеНДСНаУСН; 
		ТипНалогообложенияНДС = СтавкаНДС7.ТипыНалогообложенияНДС.Добавить(); 
		ТипНалогообложенияНДС.ТипНалогообложенияНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(СтавкаНДС7);
		#КонецОбласти   
		
		#Область СтавкаНДС5_105
		СтавкаНДС5_105 = УчетНДСРФВызовСервера.СтавкаНДСПоЗначениюПеречисления(Перечисления.СтавкиНДС.НДС5_105);
		Если СтавкаНДС5_105.Пустая() Тогда
			СтавкаНДС5_105 = Справочники.СтавкиНДС.СоздатьЭлемент();
		Иначе
			СтавкаНДС5_105 = СтавкаНДС5_105.ПолучитьОбъект();
		КонецЕсли;
	
		СтавкаНДС5_105.Наименование = "5/105";
		СтавкаНДС5_105.Ставка = 5;
		СтавкаНДС5_105.Страна = Справочники.СтраныМира.Россия;
		СтавкаНДС5_105.НачалоПериода = Дата(2025, 01, 01);
		
		СтавкаНДС5_105.РасчетнаяСтавка = Истина;
		СтавкаНДС5_105.ПеречислениеСтавкаНДС = Перечисления.СтавкиНДС.НДС5_105;
		СтавкаНДС5_105.СоответствующаяБазоваяСтавка = СтавкаНДС5.Ссылка;
		
		СтавкаНДС5_105.ТипыНалогообложенияНДС.Очистить();
		
		ТипНалогообложенияНДС = СтавкаНДС5_105.ТипыНалогообложенияНДС.Добавить();
		ТипНалогообложенияНДС.ТипНалогообложенияНДС = Перечисления.ТипыНалогообложенияНДС.ЛьготноеНалогообложениеНДСНаУСН;
		ТипНалогообложенияНДС = СтавкаНДС5_105.ТипыНалогообложенияНДС.Добавить(); 
		ТипНалогообложенияНДС.ТипНалогообложенияНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(СтавкаНДС5_105);
		
		СтавкаНДС5.СоответствующаяРасчетнаяСтавка = СтавкаНДС5_105.Ссылка;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(СтавкаНДС5);
		#КонецОбласти  
		
		#Область СтавкаНДС7_107
		СтавкаНДС7_107 = УчетНДСРФВызовСервера.СтавкаНДСПоЗначениюПеречисления(Перечисления.СтавкиНДС.НДС7_107);
		Если СтавкаНДС7_107.Пустая() Тогда
			СтавкаНДС7_107 = Справочники.СтавкиНДС.СоздатьЭлемент();
		Иначе
			СтавкаНДС7_107 = СтавкаНДС7_107.ПолучитьОбъект();
		КонецЕсли;
	
		СтавкаНДС7_107.Наименование = "7/107";
		СтавкаНДС7_107.Ставка = 7;
		СтавкаНДС7_107.Страна = Справочники.СтраныМира.Россия;
		СтавкаНДС7_107.НачалоПериода = Дата(2025, 01, 01);
		
		СтавкаНДС7_107.РасчетнаяСтавка = Истина;
		СтавкаНДС7_107.ПеречислениеСтавкаНДС = Перечисления.СтавкиНДС.НДС7_107;
		СтавкаНДС7_107.СоответствующаяБазоваяСтавка = СтавкаНДС7.Ссылка;
		
		СтавкаНДС7_107.ТипыНалогообложенияНДС.Очистить();
		
		ТипНалогообложенияНДС = СтавкаНДС7_107.ТипыНалогообложенияНДС.Добавить();
		ТипНалогообложенияНДС.ТипНалогообложенияНДС = Перечисления.ТипыНалогообложенияНДС.ЛьготноеНалогообложениеНДСНаУСН;
		ТипНалогообложенияНДС = СтавкаНДС7_107.ТипыНалогообложенияНДС.Добавить();
		ТипНалогообложенияНДС.ТипНалогообложенияНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(СтавкаНДС7_107);
		
		СтавкаНДС7.СоответствующаяРасчетнаяСтавка = СтавкаНДС7_107.Ссылка;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(СтавкаНДС7);
		#КонецОбласти 
			
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстСообщения = НСтр("ru = 'Не удалось создать льготные ставки НДС при УСН: %Причина%'",
				ОбщегоНазначения.КодОсновногоЯзыка());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,,,
				ТекстСообщения);
		
	КонецПопытки;
	#КонецОбласти
	
	#Область ИзменитьСтавки
	НачатьТранзакцию();
	Попытка
		
		СтавкаБезНДС = Справочники.СтавкиНДС.БезНДС.ПолучитьОбъект();
		Если СтавкаБезНДС.ТипыНалогообложенияНДС.Найти(
			Перечисления.ТипыНалогообложенияНДС.ЛьготноеНалогообложениеНДСНаУСН, "ТипНалогообложенияНДС") = Неопределено Тогда 
			ТипНалогообложенияНДС = СтавкаБезНДС.ТипыНалогообложенияНДС.Добавить();
			ТипНалогообложенияНДС.ТипНалогообложенияНДС = Перечисления.ТипыНалогообложенияНДС.ЛьготноеНалогообложениеНДСНаУСН;
		КонецЕсли;
		СтавкаБезНДС.ТипыНалогообложенияНДС.Свернуть("ТипНалогообложенияНДС");
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(СтавкаБезНДС);
				
		Ставка10 = УчетНДСРФВызовСервера.СтавкаНДСПоЗначениюПеречисления(Перечисления.СтавкиНДС.НДС10);
		Если Ставка10.Пустая() Тогда
			Ставка10 = Справочники.СтавкиНДС.СоздатьЭлемент();
		Иначе
			Ставка10 = Ставка10.ПолучитьОбъект();
		КонецЕсли;
		Если Ставка10.ТипыНалогообложенияНДС.Найти(
			Перечисления.ТипыНалогообложенияНДС.ЛьготноеНалогообложениеНДСНаУСН, "ТипНалогообложенияНДС") = Неопределено Тогда 
			ТипНалогообложенияНДС = Ставка10.ТипыНалогообложенияНДС.Добавить();
			ТипНалогообложенияНДС.ТипНалогообложенияНДС = Перечисления.ТипыНалогообложенияНДС.ЛьготноеНалогообложениеНДСНаУСН;
		КонецЕсли;
		Ставка10.ТипыНалогообложенияНДС.Свернуть("ТипНалогообложенияНДС");
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Ставка10);		
		
		Ставка20 = УчетНДСРФВызовСервера.СтавкаНДСПоЗначениюПеречисления(Перечисления.СтавкиНДС.НДС20);
		Если Ставка20.Пустая() Тогда
			Ставка20 = Справочники.СтавкиНДС.СоздатьЭлемент();
		Иначе
			Ставка20 = Ставка20.ПолучитьОбъект();
		КонецЕсли;
		Если Ставка20.ТипыНалогообложенияНДС.Найти(
			Перечисления.ТипыНалогообложенияНДС.ЛьготноеНалогообложениеНДСНаУСН, "ТипНалогообложенияНДС") = Неопределено Тогда 
			ТипНалогообложенияНДС = Ставка20.ТипыНалогообложенияНДС.Добавить();
			ТипНалогообложенияНДС.ТипНалогообложенияНДС = Перечисления.ТипыНалогообложенияНДС.ЛьготноеНалогообложениеНДСНаУСН;
		КонецЕсли;
		Ставка20.ТипыНалогообложенияНДС.Свернуть("ТипНалогообложенияНДС");
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Ставка20);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстСообщения = НСтр("ru = 'Не удалось обработать данные табличной части ""Типы налогообложения НДС"": %Причина%'",
				ОбщегоНазначения.КодОсновногоЯзыка());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,,,
				ТекстСообщения);
		
	КонецПопытки; 
			
	#КонецОбласти

	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#КонецОбласти

//-- Локализация

#Область КонтактнаяИнформация

Функция ПараметрыВидаКонтактнойИнформации(Тип)
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Тип);
	ПараметрыВида.Тип = Тип;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Вставить("АдресТолькоРоссийский", Ложь);
	
	Возврат ПараметрыВида;
	
КонецФункции

// Процедура обновления ИБ для справочника видов контактной информации.
//
// Инструкция:
// Для каждого объекта, владельца КИ, для каждого соответствующего ему вида КИ добавить 
// строчку вида: ОбновитьВидКИ(.....). При этом,
// важен порядок в котором будут осуществляться эти вызовы, чем раньше вызов для вида КИ,
// тем выше этот вид КИ будет располагаться на форме объекта.
//
Процедура ЗаполнитьСвойстваВидовКонтактнойИнформации() Экспорт
	
	// СтандартныеПодсистемы 
	// СтандартныеПодсистемы.Пользователи
	ПараметрыВидаКИ = ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	ПараметрыВидаКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailПользователя;
	ПараметрыВидаКИ.Порядок = 1;
	ОбновитьВидКИ(ПараметрыВидаКИ);
	
	ПараметрыВидаКИ = ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Телефон);
	ПараметрыВидаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонПользователя;
	ПараметрыВидаКИ.Порядок = 2;
	ОбновитьВидКИ(ПараметрыВидаКИ);
	// Конец СтандартныеПодсистемы.Пользователи
	
	// СтандартныеПодсистемы.Организации
	ПараметрыВидаКИ = ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВидаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
	ПараметрыВидаКИ.ХранитьИсториюИзменений = Истина;
	ПараметрыВидаКИ.АдресТолькоРоссийский = Истина;
	ПараметрыВидаКИ.Порядок = 12;
	ОбновитьВидКИ(ПараметрыВидаКИ);
	
	ПараметрыВидаКИ = ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВидаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
	ПараметрыВидаКИ.Порядок = 13;
	ОбновитьВидКИ(ПараметрыВидаКИ);
	
	ПараметрыВидаКИ = ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВидаКИ.Вид = Справочники.ВидыКонтактнойИнформации.МеждународныйАдресОрганизации;
	ПараметрыВидаКИ.Порядок = 14;
	ОбновитьВидКИ(ПараметрыВидаКИ);
	
	ПараметрыВидаКИ = ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Телефон);
	ПараметрыВидаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации;
	ПараметрыВидаКИ.Порядок = 15;
	ОбновитьВидКИ(ПараметрыВидаКИ);
	
	ПараметрыВидаКИ = ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Факс);
	ПараметрыВидаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ФаксОрганизации;
	ПараметрыВидаКИ.Порядок = 16;
	ОбновитьВидКИ(ПараметрыВидаКИ);
	
	ПараметрыВидаКИ = ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	ПараметрыВидаКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailОрганизации;
	ПараметрыВидаКИ.Порядок = 17;
	ОбновитьВидКИ(ПараметрыВидаКИ);
	
	ПараметрыВидаКИ = ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВидаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации;
	ПараметрыВидаКИ.Порядок = 18;
	ОбновитьВидКИ(ПараметрыВидаКИ);
	
	ПараметрыВидаКИ = ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Другое);
	ПараметрыВидаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияОрганизации;
	ПараметрыВидаКИ.Порядок = 19;
	ОбновитьВидКИ(ПараметрыВидаКИ);
	// Конец СтандартныеПодсистемы.Организации
	// Конец СтандартныеПодсистемы 
	
	// Справочник "Контрагенты"
	ПараметрыВидаКИ = ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВидаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
	ПараметрыВидаКИ.Порядок = 3;
	ОбновитьВидКИ(ПараметрыВидаКИ);
		
	ПараметрыВидаКИ = ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВидаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
	ПараметрыВидаКИ.Порядок = 4;
	ОбновитьВидКИ(ПараметрыВидаКИ);
		
	ПараметрыВидаКИ = ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВидаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента;
	ПараметрыВидаКИ.Порядок = 5;
	ОбновитьВидКИ(ПараметрыВидаКИ);
		
	ПараметрыВидаКИ = ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВидаКИ.Вид = Справочники.ВидыКонтактнойИнформации.МеждународныйАдресКонтрагента;
	ПараметрыВидаКИ.Порядок = 6;
	ОбновитьВидКИ(ПараметрыВидаКИ);
		
	ПараметрыВидаКИ = ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Телефон);
	ПараметрыВидаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
	ПараметрыВидаКИ.Порядок = 7;
	ОбновитьВидКИ(ПараметрыВидаКИ);
		
	ПараметрыВидаКИ = ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Факс);
	ПараметрыВидаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ФаксКонтрагенты;
	ПараметрыВидаКИ.Порядок = 8;
	ОбновитьВидКИ(ПараметрыВидаКИ);
		
	ПараметрыВидаКИ = ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	ПараметрыВидаКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
	ПараметрыВидаКИ.Порядок = 9;
	ОбновитьВидКИ(ПараметрыВидаКИ);
		
	ПараметрыВидаКИ = ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Другое);
	ПараметрыВидаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтрагенты;
	ПараметрыВидаКИ.Порядок = 10;
	ОбновитьВидКИ(ПараметрыВидаКИ);
	
	// Справочник "Партнеры"
	ПараметрыВидаКИ = ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВидаКИ.Вид = Справочники.ВидыКонтактнойИнформации.АдресПартнера;
	ПараметрыВидаКИ.Порядок = 6;
	ОбновитьВидКИ(ПараметрыВидаКИ);
	
	ПараметрыВидаКИ = ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Телефон);
	ПараметрыВидаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера;
	ПараметрыВидаКИ.Порядок = 7;
	ОбновитьВидКИ(ПараметрыВидаКИ);
	
	ПараметрыВидаКИ = ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	ПараметрыВидаКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailПартнера;
	ПараметрыВидаКИ.Порядок = 8;
	ОбновитьВидКИ(ПараметрыВидаКИ);
	
	// Справочник "Контактные лица партнеров"
	ПараметрыВидаКИ = ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Телефон);
	ПараметрыВидаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица;
	ПараметрыВидаКИ.Порядок = 9;
	ОбновитьВидКИ(ПараметрыВидаКИ);
	
	ПараметрыВидаКИ = ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Телефон);
	ПараметрыВидаКИ.Вид = Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица;
	ПараметрыВидаКИ.Порядок = 10;
	ОбновитьВидКИ(ПараметрыВидаКИ);
	
	ПараметрыВидаКИ = ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	ПараметрыВидаКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица;
	ПараметрыВидаКИ.Порядок = 11;
	ОбновитьВидКИ(ПараметрыВидаКИ);
	
	// Справочник "Физические лица"
	ПараметрыВидаКИ = ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	ПараметрыВидаКИ.Вид = Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица;
	ПараметрыВидаКИ.Порядок = 19;
	ОбновитьВидКИ(ПараметрыВидаКИ);
	
	ПараметрыВидаКИ = ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Телефон);
	ПараметрыВидаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица;
	ПараметрыВидаКИ.Порядок = 20;
	ОбновитьВидКИ(ПараметрыВидаКИ);
	
	ПараметрыВидаКИ = ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Телефон);
	ПараметрыВидаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица;
	ПараметрыВидаКИ.Порядок = 22;
	ОбновитьВидКИ(ПараметрыВидаКИ);
	
	ПараметрыВидаКИ = ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВидаКИ.Вид = Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияФизическиеЛица;
	ПараметрыВидаКИ.Порядок = 23;
	ОбновитьВидКИ(ПараметрыВидаКИ);
	
	ПараметрыВидаКИ = ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Телефон);
	ПараметрыВидаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица;
	ПараметрыВидаКИ.Порядок = 24;
	ОбновитьВидКИ(ПараметрыВидаКИ);
	
	ПараметрыВидаКИ = ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВидаКИ.Вид = Справочники.ВидыКонтактнойИнформации.АдресЗаПределамиРФФизическиеЛица;
	ПараметрыВидаКИ.Порядок = 25;
	ОбновитьВидКИ(ПараметрыВидаКИ);
	
	ПараметрыВидаКИ = ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВидаКИ.Вид = Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица;
	ПараметрыВидаКИ.Порядок = 26;
	ОбновитьВидКИ(ПараметрыВидаКИ);
	
	ПараметрыВидаКИ = ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВидаКИ.Вид = Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица;
	ПараметрыВидаКИ.Порядок = 27;
	ОбновитьВидКИ(ПараметрыВидаКИ);
	
	// Справочник "Склады"
	ПараметрыВидаКИ = ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВидаКИ.Вид = Справочники.ВидыКонтактнойИнформации.АдресСклада;
	ПараметрыВидаКИ.Порядок = 28;
	ОбновитьВидКИ(ПараметрыВидаКИ);
	
	ПараметрыВидаКИ = ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Телефон);
	ПараметрыВидаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонСклада;
	ПараметрыВидаКИ.Порядок = 29;
	ОбновитьВидКИ(ПараметрыВидаКИ);
	
	// Справочник "Регистрации в налоговом органе"
	ПараметрыВидаКИ = ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВидаКИ.Вид = Справочники.ВидыКонтактнойИнформации.АдресНалоговогоОргана;
	ПараметрыВидаКИ.Порядок = 30;
	ОбновитьВидКИ(ПараметрыВидаКИ);
	
	ПараметрыВидаКИ = ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Телефон);
	ПараметрыВидаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонНалоговогоОргана;
	ПараметрыВидаКИ.Порядок = 31;
	ОбновитьВидКИ(ПараметрыВидаКИ);
	
	ПараметрыВидаКИ = ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВидаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресОбособленногоПодразделения;
	ПараметрыВидаКИ.Порядок = 32;
	ОбновитьВидКИ(ПараметрыВидаКИ);

	// Справочник "Торговые точки"
	ПараметрыВидаКИ = ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВидаКИ.Вид = Справочники.ВидыКонтактнойИнформации.АдресТорговойТочки;
	ПараметрыВидаКИ.Порядок = 33;
	ОбновитьВидКИ(ПараметрыВидаКИ);
	
КонецПроцедуры

Процедура ОбновитьВидКИ(ПараметрыВидаКИ)

	НастройкиПроверки = Новый Структура;
	НастройкиПроверки.Вставить("АдресТолькоРоссийский", 		ПараметрыВидаКИ.АдресТолькоРоссийский);
	НастройкиПроверки.Вставить("ПроверятьКорректность", 		Ложь);
	НастройкиПроверки.Вставить("ЗапрещатьВводНекорректного", 	Ложь);
	НастройкиПроверки.Вставить("СкрыватьНеактуальныеАдреса", 	Ложь);
	НастройкиПроверки.Вставить("ВключатьСтрануВПредставление", 	Ложь);
	НастройкиПроверки.Вставить("ТелефонСДобавочнымНомером", 	Истина);
	
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВидаКИ);
	
КонецПроцедуры

#КонецОбласти

#Область ВключитьИспользованиеИнтеграцииС1САналитикой

Процедура ВключитьИспользованиеИнтеграцииС1САналитикой_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	// Регистрация не требуется
	Возврат;
	
КонецПроцедуры

Процедура ВключитьИспользованиеИнтеграцииС1САналитикой(Параметры) Экспорт 
	
	ИспользоватьИнтеграциюС1САналитикой = Константы.ИспользоватьИнтеграциюС1САналитикой.Получить();
	АдресСистемыАналитики = СистемаАналитики.ПолучитьАдресСервераСистемыАналитики();
	Если Не ПустаяСтрока(АдресСистемыАналитики) И Не ИспользоватьИнтеграциюС1САналитикой Тогда
		Константы.ИспользоватьИнтеграциюС1САналитикой.Установить(Истина);
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ПредельноеВремяОбновленияСпискаДокументов

Процедура ПредельноеВремяОбновленияСпискаДокументов_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	// Регистрация не требуется
	Возврат;
	
КонецПроцедуры

Процедура УстановитьПредельноеВремяОбновленияСпискаДокументов(Параметры) Экспорт
	
	ПредельноеВремяОбновленияСпискаДокументов = Константы.ПредельноеВремяОбновленияСпискаДокументов.Получить();
	Если ПредельноеВремяОбновленияСпискаДокументов = 0 Тогда
		Константы.ПредельноеВремяОбновленияСпискаДокументов.Установить(2);
	КонецЕсли;
	Параметры.ОбработкаЗавершена = Истина;

КонецПроцедуры

#КонецОбласти

// Возвращает параметры выборки для СледующаяВыборкаИлиСтрокаТаблицыЗначений().
//
// Возвращаемое значение:
//  Структура - индексы для обхода таблиц с данными для обновления:
//   * ИндексПорции - Число - индекс строки в таблице порций;
//   * ИндексСтрокиВПорции - Число - индекс строки данных в порции.
//   * ТипыДокументов - Соответствие из КлючИЗначение - см. МассивИменВСоответствиеТипов.
//   * ИмяПоляРегистратор - Строка - обычно "Регистратор", но может быть, например, и "Ссылка".
//
Функция НовыеПараметрыВыборки()
	
	ПараметрыВыборки = Новый Структура;
	ПараметрыВыборки.Вставить("ИндексПорции", 0);
	ПараметрыВыборки.Вставить("ИндексСтрокиВПорции", 0);
	ПараметрыВыборки.Вставить("ТипыДокументов", Новый Соответствие);
	ПараметрыВыборки.Вставить("ИмяПоляРегистратор", "Регистратор");
	
	Возврат ПараметрыВыборки;
	
КонецФункции

// Преобразование массива имен в соответствие типов с этими именами.
//
// Параметры:
//  Имена - Массив - имена (например: документов).
//  ПрефиксТипа - Строка - префикс для формирования полного имени типа (например: "ДокументСсылка").
//  ИндексИмени - Число - индекс имени типа, отсчитываемый с 0 (например: 1 в "Документ.ИмяДокумента").
//
// Возвращаемое значение:
//  Соответствие:
//   Ключ - Тип - сформированный тип.
//   Значение - Булево - Истина.
//
Функция МассивИменВСоответствиеТипов(Имена, ПрефиксТипа, ИндексИмени)
	
	СоответствиеТипов = Новый Соответствие;
	
	Если ТипЗнч(Имена) = Тип("Массив") Тогда
		ТипСтрока = Тип("Строка");
		Шаблон = "%1.%2";
		
		Для Каждого Имя Из Имена Цикл
			Если ТипЗнч(Имя) = ТипСтрока Тогда
				Состав = СтрРазделить(Имя, ".");
				
				Если Состав.ВГраница() >= ИндексИмени Тогда
					ИмяТипа = СокрЛП(Состав[ИндексИмени]);
					Тип = Тип(СтрШаблон(Шаблон, ПрефиксТипа, ИмяТипа));
					СоответствиеТипов[Тип] = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СоответствиеТипов;
	
КонецФункции

// Итератор по выборке запроса или таблице значений.
//
// Если параметр Выборка имеет тип "ВыборкаИзРезультатаЗапроса", то в этом параметре будут данные из выборки.
// Иначе выборка выполняется из параметра Таблица, но данные для обработки все равно помещаются в параметр Выборка.
// Применим для выборки из запроса или таблицы значений в одном цикле.
//
// Параметры:
//  Выборка - ВыборкаИзРезультатаЗапроса - выборка запроса.
//          - СтрокаТаблицыЗначений - возвращаемое значение, если выборка выполняется из таблицы значений.
//  ОбновляемыеДанные - ВыборкаИзРезультатаЗапроса, ТаблицаЗначений -
//                      Используется, если Выборка не задана (равна Неопределено).
//  ПараметрыВыборки - см. НовыеПараметрыВыборки.
//
// Возвращаемое значение:
//  Булево - Истина, если Выборка (возвращаемое значение) содержит данные для обработки.
//
Функция СледующаяВыборкаИлиСтрокаТаблицыЗначений(Выборка, ОбновляемыеДанные, ПараметрыВыборки)
	
	Если ТипЗнч(Выборка) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
		Возврат Выборка.Следующий();
	Иначе
		ИндексПорции = ПараметрыВыборки.ИндексПорции;
		ИндексСтрокиВПорции = ПараметрыВыборки.ИндексСтрокиВПорции;
		ТипыДокументов = ПараметрыВыборки.ТипыДокументов;
		ИмяПоляРегистратор = ПараметрыВыборки.ИмяПоляРегистратор;
		Выбран = Ложь;
		
		Пока Не Выбран Цикл
			Если ИндексПорции >= ОбновляемыеДанные.НаборДанных.Количество() Или ИндексПорции < 0 Тогда
				Возврат Ложь;
			КонецЕсли;
			
			Порция = ОбновляемыеДанные.НаборДанных[ИндексПорции].Данные;
			РазмерПорции = Порция.Количество();
			
			Если ИндексСтрокиВПорции >= РазмерПорции Или ИндексСтрокиВПорции < 0 Тогда
				Возврат Ложь;
			КонецЕсли;
			
			ПредварительнаяВыборка = Порция[ИндексСтрокиВПорции];
			ТипДокумента = ТипЗнч(ПредварительнаяВыборка[ИмяПоляРегистратор]);
			
			Если ТипыДокументов.Количество() = 0 Или ТипыДокументов[ТипДокумента] = Истина Тогда
				Выборка = ПредварительнаяВыборка;
				Выбран = Истина;
			КонецЕсли;
			
			ПараметрыВыборки.ИндексСтрокиВПорции = ПараметрыВыборки.ИндексСтрокиВПорции + 1;
			
			Если ПараметрыВыборки.ИндексСтрокиВПорции >= РазмерПорции Тогда
				ПараметрыВыборки.ИндексПорции = ПараметрыВыборки.ИндексПорции + 1;
				ПараметрыВыборки.ИндексСтрокиВПорции = 0;
				Возврат Выбран;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Получить имена документов в виде массива.
//
// Параметры:
//  ПолныеИменаДокументов - Строка, Массив, Неопределено - имя документа, по которому нужно переформировать движения.
//                          Например, "Документ.ПриходныйОрдерНаТовары".
//                          Если документов несколько, то нужно передать их имена в массиве.
//
// Возвращаемое значение:
//  Массив - полные имена документов.
//
Функция ИменаДокументовВМассив(ПолныеИменаДокументов)
	
	Если ТипЗнч(ПолныеИменаДокументов) = Тип("Строка") Тогда
		СписокДокументов = СтрРазделить(ПолныеИменаДокументов, ",", Ложь);
		
		Для Индекс = 0 По СписокДокументов.ВГраница() Цикл
			СписокДокументов[Индекс] = СокрЛП(СписокДокументов[Индекс]);
		КонецЦикла;
	Иначе
		СписокДокументов = ПолныеИменаДокументов;
	КонецЕсли;
	
	Возврат СписокДокументов;
	
КонецФункции


// Получить имена регистров в виде массива.
//
// Параметры:
//  ПолныеИменаРегистров - Строка, Массив - имя регистра, по которому нужно переформировать движения.
//                         Например, "РегистрНакопления.ТоварыНаСкладах".
//                         Если регистров несколько, то их имена нужно передать в массиве.
//
// Возвращаемое значение:
//  Массив - полные имена регистров.
//
Функция ИменаРегистровВМассив(ПолныеИменаРегистров)
	
	Если ТипЗнч(ПолныеИменаРегистров) = Тип("Строка") Тогда
		СписокРегистров = СтрРазделить(ПолныеИменаРегистров, ",", Ложь);
	Иначе
		СписокРегистров = ПолныеИменаРегистров;
	КонецЕсли;
	
	Возврат СписокРегистров;
	
КонецФункции

// Проверяет правильность заполнения первой цифры версии.
//
// Параметры:
//   ИтерацииОбновления     - Массив - массив структур, описывающих сведения об обновлении каждой
//                                     библиотеки и конфигурации, с ключами:
//       * Подсистема              - Строка - имя библиотеки или конфигурации.
//       * Версия                  - Строка - например, "2.1.3.39". Номер версии библиотеки (конфигурации).
//       * ЭтоОсновнаяКонфигурация - Булево - Истина, если это основная конфигурация, а не библиотека.
//       * Обработчики             - ТаблицаЗначений - все обработчики обновления библиотеки, описание колонок
//                                   см. в ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//       * ВыполненныеОбработчики  - ДеревоЗначений - выполненные обработчики обновления, сгруппированные по
//                                   библиотеке и номеру версии, описание колонок
//                                   см. в ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//       * ИмяОсновногоСерверногоМодуля - Строка - имя модуля библиотеки (конфигурации), который предоставляет
//                                        основные сведения о ней: имя, версия и т.д.
//       * ОсновнойСерверныйМодуль      - ОбщийМодуль - общий модуль библиотеки (конфигурации), который предоставляет
//                                        основные сведения о ней: имя, версия и т.д.
//       * ПредыдущаяВерсия             - Строка - например, "2.1.3.30". Номер версии библиотеки (конфигурации) до обновления.
//
Процедура ПроверитьНомераВерсий(ИтерацииОбновления) Экспорт
	
	Обработка = Обработки.ОписаниеОбработчиковОбновления.Создать();
	ОшибкиВерсии = Новый Массив;
	Для Каждого Подсистема Из Обработка.РазрабатываемыеПодсистемы() Цикл
		Для Каждого Итерация Из ИтерацииОбновления Цикл
			Если Подсистема <> Итерация.Подсистема Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрЧислоВхождений(Итерация.Версия, ".") = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ПерваяЦифраВерсии = СтрРазделить(Итерация.Версия,".")[0];
			Ошибки = Новый Массив;
			Для Каждого Обработчик Из Итерация.Обработчики Цикл
				Если СтрЧислоВхождений(Обработчик.Версия, ".") = 0 Тогда
					Продолжить;
				КонецЕсли;
				ПерваяЦифраОбработчика = СтрРазделить(Обработчик.Версия,".")[0];
				Если Число(ПерваяЦифраОбработчика) > Число(ПерваяЦифраВерсии) Тогда
					Ошибки.Добавить(Символы.Таб + Обработчик.Версия + " " + Обработчик.Процедура);
				КонецЕсли;
			КонецЦикла;
			Если Ошибки.Количество() > 0 Тогда
				ОшибкиВерсии.Добавить(Новый Структура("Подсистема, Ошибки", Подсистема + " " + Итерация.Версия, Ошибки));
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если ОшибкиВерсии.Количество() Тогда
		ТекстСообщения = 
			"Обнаружено не соответствие первой цифры номера версии у обработчиков.
			|Следующие обработчики никогда не выполнятся:" + Символы.ПС;
		Для Каждого Описание Из ОшибкиВерсии Цикл
			Текст = Описание.Подсистема + ":" + Символы.ПС;
			Текст = Текст + СтрСоединить(Описание.Ошибки, Символы.ПС);
			ТекстСообщения = ТекстСообщения + ?(ПустаяСтрока(ТекстСообщения), "", Символы.ПС) + Текст;
		КонецЦикла;
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецПроцедуры

#Область ОчисткаУстаревшихМетаданныхИзРегистраОбъектыНезарегистрированныеПриЗацикливании

Процедура ОбъектыНезарегистрированныеПриЗацикливании_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрСведений.ОбъектыНезарегистрированныеПриЗацикливании";
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиИзмеренияНезависимогоРегистраСведений();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;
	
	Запрос = Новый Запрос;
	ТекстыЗапросов = Новый Массив;
		
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбъектыНезарегистрированныеПриЗацикливании.УзелИнформационнойБазы КАК УзелИнформационнойБазы,
	|	ОбъектыНезарегистрированныеПриЗацикливании.Объект КАК Объект,
	|	ОбъектыНезарегистрированныеПриЗацикливании.КлючРегистраСведений КАК КлючРегистраСведений
	|ИЗ
	|	РегистрСведений.ОбъектыНезарегистрированныеПриЗацикливании КАК ОбъектыНезарегистрированныеПриЗацикливании
	|ГДЕ
	|	ЛОЖЬ
	//++ Локализация
	|	ИЛИ ОбъектыНезарегистрированныеПриЗацикливании.Объект ССЫЛКА Перечисление.УдалитьВариантыУчетаСтоимостиТМЦ
	
	//-- Локализация
	|";
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	Данные = Запрос.Выполнить().Выгрузить();
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Данные, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОбъектыНезарегистрированныеПриЗацикливании_ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт 
	
	МетаданныеОбъекта = Метаданные.РегистрыСведений.ОбъектыНезарегистрированныеПриЗацикливании;
	ПолноеИмяОбъекта  = МетаданныеОбъекта.ПолноеИмя();
	
	Если Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта) Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	Для каждого ЗаписьРегистра Из ОбновляемыеДанные Цикл
		
		НаборЗаписей = РегистрыСведений.ОбъектыНезарегистрированныеПриЗацикливании.СоздатьНаборЗаписей();
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			
			Для каждого ЭлементИзмерения Из ОбновляемыеДанные.Колонки Цикл
				ЭлементБлокировки.УстановитьЗначение(ЭлементИзмерения.Имя, ЗаписьРегистра[ЭлементИзмерения.Имя]);
				НаборЗаписей.Отбор[ЭлементИзмерения.Имя].Установить(ЗаписьРегистра[ЭлементИзмерения.Имя]);
			КонецЦикла;
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			Блокировка.Заблокировать();
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось обновить данные в регистре %ИмяРегистра% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяРегистра%", ПолноеИмяОбъекта);
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
			МетаданныеОбъекта, Неопределено, ТекстСообщения);
			
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти
