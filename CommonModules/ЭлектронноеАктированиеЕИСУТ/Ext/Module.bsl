
#Область ПрограммныйИнтерфейс

// Сопоставлять номенклатуру контракта средствами подсистемы сопоставление номенклатуры.
// 
// Возвращаемое значение:
//  Булево - Сопоставлять номенклатуру.
Функция СопоставлятьНоменклатуруКонтракта() Экспорт
	
	Возврат Истина
	
КонецФункции

// См. ЭлектронноеАктированиеЕИСПереопределяемый.ПередЗаписьюНаСервереГосударственногоКонтракта
Процедура ПередЗаписьюНаСервереГосударственногоКонтракта(
		ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
		
	Если ТекущийОбъект.ТипНаправленияДеятельности = Перечисления.ТипыНаправленийДеятельности.КонтрактГОЗ Тогда
		Если НЕ ЗначениеЗаполнено(ТекущийОбъект.НомерГОЗ) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнен Номер ГОЗ'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		КонецЕсли;
	КонецЕсли;	
			
	ПроверкаНоменклатурыНаДубли = Новый Соответствие();
	// Проверим корректность заполнения номенклатуры
	Для Каждого СтрокаНоменклатура Из ТекущийОбъект.НоменклатураОбъектовЗакупки Цикл
		
		Отбор = Новый Структура("Идентификатор", СтрокаНоменклатура.Идентификатор);
		СтрокиГосконтракта = ТекущийОбъект.ОбъектыЗакупки.НайтиСтроки(
			Отбор);
		
		Если СтрокиГосконтракта.Количество() > 0 Тогда
			ЭтоТоварЕИС = (СтрокиГосконтракта[0].Тип = Перечисления.ТипыОбъектовЗакупкиЕИС.Товар);
		Иначе
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаНоменклатура.Номенклатура) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
					"Колонка", "Заполнение", НСтр("ru = 'Номенклатура'"),
					СтрокиГосконтракта[0].НомерСтроки, НСтр("ru = 'Объекты закупки'"));
					
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				"ОбъектыЗакупки", СтрокиГосконтракта[0].НомерСтроки, "Тип");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , Поле, , Отказ);
			Продолжить;
		КонецЕсли;
		
		ВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			СтрокаНоменклатура.Номенклатура, "ВидНоменклатуры");
		Если НЕ ЗначениеЗаполнено(ВидНоменклатуры) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
					"Колонка", "Корректность", НСтр("ru = 'Номенклатура'"),
					СтрокиГосконтракта[0].НомерСтроки, НСтр("ru = 'Объекты закупки'"),
					 НСтр("ru = 'Не указан вид номенклатуры товара.'"));
					
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				"ОбъектыЗакупки", СтрокиГосконтракта[0].НомерСтроки, "Тип");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , Поле, , Отказ);
			Продолжить;
		КонецЕсли;
		
		ТипыНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ВидНоменклатуры, "ТипНоменклатуры");
		ЭтоТоварНоменклатура = ТипыНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;
		
		Если ЭтоТоварЕИС <> ЭтоТоварНоменклатура Тогда
			
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
					"Колонка", "Корректность", НСтр("ru = 'Номенклатура'"),
					СтрокиГосконтракта[0].НомерСтроки, НСтр("ru = 'Объекты закупки'"),
					 НСтр("ru = 'Тип номенклатуры не соответствует типу объекта закупки'"));
					
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				"ОбъектыЗакупки", СтрокиГосконтракта[0].НомерСтроки, "Тип");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , Поле, , Отказ);
			
		КонецЕсли;
		
		Если НЕ ЭтоТоварЕИС Тогда
			Продолжить;
		КонецЕсли;
		
		ИдентификаторСтроки = ПроверкаНоменклатурыНаДубли.Получить(СтрокаНоменклатура.Номенклатура);
		
		Если ИдентификаторСтроки = Неопределено Тогда
			
			ПроверкаНоменклатурыНаДубли.Вставить(СтрокаНоменклатура.Номенклатура, СтрокаНоменклатура.Идентификатор);
			
		КонецЕсли;
	КонецЦикла;
	
	// Проверим, что все данные для актирования заполнены
	НоменклатураЗаполнена      = Истина;
	
	Для Каждого СтрокаГосконтракта Из ТекущийОбъект.ОбъектыЗакупки Цикл
		
		ЭтоТоварЕИС = (СтрокаГосконтракта.Тип = Перечисления.ТипыОбъектовЗакупкиЕИС.Товар);
		
		Если ЭтоТоварЕИС Тогда
			Отбор = Новый Структура("Идентификатор", СтрокаГосконтракта.Идентификатор);
			СтрокиНоменклатуры = ТекущийОбъект.НоменклатураОбъектовЗакупки.НайтиСтроки(Отбор);
			Если СтрокиНоменклатуры.Количество() = 0 Тогда
				НоменклатураЗаполнена = Ложь;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТекущийОбъект.ГотовДляОтраженияВУчете = НоменклатураЗаполнена;
	
КонецПроцедуры

// Проверяет заполненность этапа госконтракта.
// 
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма записываемого объекта.
//   ТекущийОбъект - ДокументОбъект, СправочникОбъект - записываемый объект.
//
Процедура ПередЗаписьюНаСервереДокумент(Форма, ТекущийОбъект) Экспорт

	ИспользоватьЕИС = Истина;
	
	Если Не ЭлектронноеАктированиеЕИС.ИспользоватьЭлектронноеАктированиеВЕИС() Тогда
		ИспользоватьЕИС = Ложь;
	КонецЕсли;

	ГосКонтракт = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийОбъект.Договор, "ГосударственныйКонтракт");
	Если ЗначениеЗаполнено(ГосКонтракт) И ИспользоватьЕИС Тогда 
		ЗаполненВнутреннийИдентификаторЕИС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГосКонтракт, "ВнутреннийИдентификаторЕИС");		
		Если ЗначениеЗаполнено(ЗаполненВнутреннийИдентификаторЕИС) Тогда
			Если Не ЗначениеЗаполнено(ТекущийОбъект.ЭтапГосконтрактаЕИС) Тогда
				КлючДанных = ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(ТекущийОбъект);
				Поле = "ПредставлениеЭтапаГосконтрактаЕИС";
				ТекстСообщения = НСтр("ru = 'Не заполнен этап госконтракта.'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , Поле, , Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// См. ЭлектронноеАктированиеЕИСПереопределяемый.ПослеЗагрузкиКонтрактаИзЕИС
Процедура ПослеЗагрузкиКонтрактаИзЕИС(СсылкаНаКонтракт) Экспорт
	
	РеквизитыКонтракта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаКонтракт, "НомерИГК, НомерГОЗ");
	
	Если Не ЗначениеЗаполнено(РеквизитыКонтракта.НомерИГК) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НомерИГК", РеквизитыКонтракта.НомерИГК);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.ИдентификаторГосКонтракта = &НомерИГК";
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		
		НайденныйДоговор = Результат.Ссылка; // СправочникСсылка.ДоговорыКонтрагентов
		
		НачатьТранзакцию();
		Попытка
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("Справочник.ДоговорыКонтрагентов");
			ЭлементБлокировкиДанных.УстановитьЗначение("Ссылка", НайденныйДоговор);
			ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
			БлокировкаДанных.Заблокировать();
			
			НайденныйДоговорОбъект = НайденныйДоговор.ПолучитьОбъект();
			НайденныйДоговорОбъект.ГосударственныйКонтракт = СсылкаНаКонтракт;
			НайденныйДоговорОбъект.ДоговорСУчастникомГОЗ = ЗначениеЗаполнено(РеквизитыКонтракта.НомерГОЗ);
			НайденныйДоговорОбъект.Записать();
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			// В случае проблем при записи - предупреждение в журнал регистрации.
			ШаблонСообщения = НСтр("ru = 'Не удалось записать справочник ""Договоры""
				|%1'");
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Изменение договоров контрагента'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.ДоговорыКонтрагентов, 
				НайденныйДоговор,
				ТекстСообщения);
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

// См. ЭлектронноеАктированиеЕИСПереопределяемый.ЗаполнитьСвязиПараметровВыбораИПараметрыВыбораДоговора
Процедура ЗаполнитьСвязиПараметровВыбораИПараметрыВыбораДоговора(СвязиПараметровВыбора,
			 ПараметрыВыбора) Экспорт
	
	МассивСвязей = Новый Массив();
	НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Контрагент", "Объект.Контрагент");
	МассивСвязей.Добавить(НоваяСвязь);
	НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация");
	МассивСвязей.Добавить(НоваяСвязь);

	СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивСвязей);
	
	ВидыДоговоров = Новый Массив();
	ВидыДоговоров.Добавить(Перечисления.ТипыДоговоров.СПокупателем);
	ЗначенияПараметровВыбора = Новый ФиксированныйМассив(ВидыДоговоров);
		
	НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипДоговора", ЗначенияПараметровВыбора);
	
	МассивСвязей = Новый Массив();
	МассивСвязей.Добавить(НовыйПараметр);
	
	ПараметрыВыбора = Новый ФиксированныйМассив(МассивСвязей);
	
КонецПроцедуры

// См. ЭлектронноеАктированиеЕИСПереопределяемый.ЗаполнитьТипыОбъектовВызоваКомандыОткрытияПараметровАктирования
Процедура ЗаполнитьТипыОбъектовВызоваКомандыОткрытияПараметровАктирования(ТипыОбъектов) Экспорт
	
	ТипыОбъектов.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
	ТипыОбъектов.Добавить(Тип("ДокументСсылка.КорректировкаРеализации"));
	ТипыОбъектов.Добавить(Тип("ДокументСсылка.АктВыполненныхРабот"));
	
КонецПроцедуры

// См. ЭлектронноеАктированиеЕИСПереопределяемый.ДляДокументаЗаполняютсяМестаПоставки
Процедура ДляДокументаЗаполняютсяМестаПоставки(Документ, МестаПоставкиЗаполняются) Экспорт

	МестаПоставкиЗаполняются = Истина;
	Если ТипЗнч(Документ) <> Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		МестаПоставкиЗаполняются = Ложь;
	КонецЕсли;

КонецПроцедуры

// См. ЭлектронноеАктированиеЕИСПереопределяемый.ЗаполнитьТабличнуюЧастьДокументаПоДаннымДереваТоваровУслуг
Процедура ЗаполнитьТабличнуюЧастьДокументаПоДаннымДереваТоваровУслуг(
			СсылкаНаДокумент, ДеревоТоваров, ДеревоРаботУслуг, РезультатЗаполнения) Экспорт

	РезультатЗаполнения = ЭлектронноеАктированиеЕИС.НовыйРезультатЗаполненияТабличныхЧастей();
	РезультатЗаполнения.Выполнено = Истина;
	
	ДокументОбъект = СсылкаНаДокумент.ПолучитьОбъект();

	Ошибки = Новый Массив;
	
	КоличествоСтрокВДокументе = ДокументОбъект.Товары.Количество();
	Для Каждого РодительскаяСтрока Из ДеревоТоваров.Строки Цикл
		Если РодительскаяСтрока.Строки.Количество() = 0 Тогда
			// Без детализации.
			Если РодительскаяСтрока.НомерСтроки < КоличествоСтрокВДокументе Тогда
				СтрокаДокумента = ДокументОбъект.Товары.Получить(РодительскаяСтрока.НомерСтроки - 1);
				СтрокаДокумента.Количество = РодительскаяСтрока.Количество;
				СтрокаДокумента.Сумма = РодительскаяСтрока.Сумма;
				ЗаполнитьЗначенияСвойств(СтрокаДокумента, РодительскаяСтрока);
			КонецЕсли;
		Иначе
			Для Каждого СтрокаДетализации Из РодительскаяСтрока.Строки Цикл
				Если СтрокаДетализации.Номенклатура.Пустая() Тогда
					ОписаниеОшибки = НСтр("ru='Не заполнена номенклатура.'");
					Ошибки.Добавить(ОписаниеОшибки);
				КонецЕсли;
				Если СтрокаДетализации.НомерСтроки > 0 Тогда
					// Строки с номером.
					Если РодительскаяСтрока.НомерСтроки <= КоличествоСтрокВДокументе Тогда
						СтрокаДокумента = ДокументОбъект.Товары.Получить(СтрокаДетализации.НомерСтроки - 1);
						ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтрокаДетализации);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	Если Ошибки.Количество() > 0 Тогда
		РезультатЗаполнения.ОписаниеОшибки = СтрСоединить(Ошибки);
		РезультатЗаполнения.Выполнено = Ложь;
	КонецЕсли;

	Для Каждого РодительскаяСтрока Из ДеревоТоваров.Строки Цикл
		Если РодительскаяСтрока.Строки.Количество() > 0 Тогда
			// Новые строки.
			Для Каждого СтрокаДетализации Из РодительскаяСтрока.Строки Цикл
				Если СтрокаДетализации.НомерСтроки = 0 Тогда
					// Строки без номера.
					СтрокаДокумента = ДокументОбъект.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтрокаДетализации);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;	

КонецПроцедуры

// См. ЭлектронноеАктированиеЕИСПереопределяемый.СоздатьЭлементФормыПараметровЭлектронногоАктированияДокумента
Процедура СоздатьЭлементФормыПараметровЭлектронногоАктированияДокумента(Форма, Элемент) Экспорт
	
	ЭлементыФормы = Форма.Элементы;
	
	Если ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ГруппаДекорации = ЭлементыФормы.ГруппаШапка.ПодчиненныеЭлементы[0];
	Иначе
		ГруппаДекорации = ЭлементыФормы.ГруппаШапка;
	КонецЕсли;
	
	ИмяДекорации = ЭлектронноеАктированиеЕИС.ИмяДекорацииФормыПараметровЭлектронногоАктированияДокумента();
	ТипДекорации = Тип("ДекорацияФормы");
	ДекорацияГосударственныйКонтракт = ЭлементыФормы.Вставить(
			ИмяДекорации,
			ТипДекорации,
			ГруппаДекорации);
	ДекорацияГосударственныйКонтракт.Вид = ВидДекорацииФормы.Надпись;
	ДекорацияГосударственныйКонтракт.Гиперссылка = Истина;
	ДекорацияГосударственныйКонтракт.АвтоМаксимальнаяШирина = Ложь;
	ДекорацияГосударственныйКонтракт.Заголовок = НСтр("ru='<нет данных о контракте>'");
	
КонецПроцедуры

// Версия приложения.
// 
// Возвращаемое значение:
//  Строка - Версия приложения.
//
Функция ВерсияПриложения() Экспорт

	МетаданныеИмя = Метаданные.Имя;
	
	Если МетаданныеИмя = "УправлениеПредприятием" Тогда
		ИмяПрограммы = НСтр("ru = '1С:ERP'");
	Иначе
		ИмяПрограммы = МетаданныеИмя;
	КонецЕсли;
	
	Возврат ИмяПрограммы + " " + Метаданные.Версия;
	
КонецФункции

// Определить владельца присоединенных файлов электронного документа.
// 
// Параметры:
//  ОбъектыУчетаЭД - ТаблицаЗначений - массив ссылок на документы объекты учета.
//  
// Возвращаемое значение:
//  ДокументСсылка - документ владелец присоединенных файлов.
//
Функция ВладелецПрисоединенныхФайлов(ОбъектыУчетаЭД) Экспорт
	
	СсылкаНаОбъект = Неопределено;
	Для каждого Основание Из ОбъектыУчетаЭД Цикл
		Если ТипЗнч(Основание.ОбъектУчета) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
			ИЛИ ТипЗнч(Основание.ОбъектУчета) = Тип("ДокументСсылка.СчетФактураВыданный")
			ИЛИ ТипЗнч(Основание.ОбъектУчета) = Тип("ДокументСсылка.ЗаказКлиента")
			ИЛИ ТипЗнч(Основание.ОбъектУчета) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
				СсылкаНаОбъект = Основание.ОбъектУчета;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СсылкаНаОбъект;
		
КонецФункции

// См. ЭлектронноеАктированиеЕИСПереопределяемый.СтавкаНДСДляПриложенияЕИС
Процедура СтавкаНДСДляПриложенияЕИС(Знач СтавкаНДС, СтавкаНДСПриложения) Экспорт

	СтавкаНДСПриложения = "";
	
	Если ТипЗнч(СтавкаНДС) = Тип("СправочникСсылка.СтавкиНДС") Тогда
		Если СтавкаНДС <> Справочники.СтавкиНДС.БезНДС Тогда
			СтавкаНДСПриложения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтавкаНДС, "Наименование");
		Иначе
			СтавкаНДСПриложения = "без НДС";
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

// Медицинская специализация включена.
// 
// Возвращаемое значение:
//  Булево - признак включения медицинской специализации.
Функция МедицинскаяСпециализацияВключена() Экспорт
	
	Возврат Ложь
	
КонецФункции

// Строительная специализация включена.
// 
// Возвращаемое значение:
//  Булево - признак включения строительной специализации.
Функция СтроительнаяСпециализацияВключена() Экспорт
	
	Возврат Ложь
	
КонецФункции

// См. ЭлектронноеАктированиеЕИСПереопределяемый.НайтиСоздатьКонтрагентаПоСведениямОЗаказчике
Процедура НайтиСоздатьКонтрагентаПоСведениямОЗаказчике(ДанныеКонтрагента, Контрагент) Экспорт
	
	ОбменСКонтрагентамиУТ.СсылкаНаОбъектПоИННКПП("Контрагенты", ДанныеКонтрагента.ИНН, ДанныеКонтрагента.КПП, Контрагент);
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Контрагент = ОбменСКонтрагентамиУТ.СоздатьКонтрагентаВБД(ДанныеКонтрагента)
	КонецЕсли;	
	
КонецПроцедуры

// См. ЭлектронноеАктированиеЕИСПереопределяемый.ГосударственныйКонтрактДокумента
Процедура ГосударственныйКонтрактДокумента(Документ, ГосударственныйКонтракт) Экспорт
	
	Договор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Договор");
	ГосударственныйКонтракт = ЭлектронноеАктированиеЕИС.ГосударственныйКонтрактДоговора(Договор);
	
КонецПроцедуры

// См. ЭлектронноеАктированиеЕИСПереопределяемый.ДоговорКонтрагентаИсточникаКоманды
Процедура ДоговорКонтрагентаИсточникаКоманды(ИсточникКоманды, ДоговорКонтрагента) Экспорт

	ДоговорКонтрагента = ИсточникКоманды.Договор;
	
КонецПроцедуры

// См. ЭлектронноеАктированиеЕИСПереопределяемый.СтавкаНДСОбъектаЗакупки
Процедура СтавкаНДСОбъектаЗакупки(Знач СтавкаНДСОбъектаЗакупки, СтавкаНДС) Экспорт

	СоответствиеСтавокНДС = Новый Соответствие;
	
	ОбменСконтрагентамиУТ.ЗаполнитьСоответствиеСтавокНДС(СоответствиеСтавокНДС);
	СоответствиеСтавокНДС.Вставить("n", Справочники.СтавкиНДС.БезНДС);

	СтавкаНДС = СоответствиеСтавокНДС.Получить(СтавкаНДСОбъектаЗакупки);

	Если СтавкаНДС = Неопределено Тогда
		Шаблон = НСтр("ru='Неизвестная ставка НДС объекта закупки ""%1"".'");
		ТекстОшибки = СтрШаблон(Шаблон, СтавкаНДСОбъектаЗакупки);
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

// см. ЭлектронноеАктированиеЕИСПереопределяемый.СоздатьДоговорНаОснованииКонтракта
Процедура СоздатьДоговорНаОснованииКонтракта(СсылкаНаКонтракт, РезультатСоздания) Экспорт
		
	ДоговорОбъект = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
	
	ДоговорОбъект.Дата = СсылкаНаКонтракт.ДатаЗаключенияКонтракта;
	ДоговорОбъект.Номер = СсылкаНаКонтракт.Номер;
	ДоговорОбъект.Организация = СсылкаНаКонтракт.Организация;
	ДоговорОбъект.Контрагент = СсылкаНаКонтракт.Контрагент;
	Если ЗначениеЗаполнено(СсылкаНаКонтракт.Контрагент.Партнер) Тогда
		ДоговорОбъект.Партнер = СсылкаНаКонтракт.Контрагент.Партнер;
	КонецЕсли;
	ДоговорОбъект.ТипДоговора = Перечисления.ТипыДоговоров.СПокупателем;
	ДоговорОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
	ДоговорОбъект.ВалютаВзаиморасчетов = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(СсылкаНаКонтракт.Организация);
	ДоговорОбъект.ОплатаВВалюте = Ложь;
	ДоговорОбъект.Статус = Перечисления.СтатусыДоговоровКонтрагентов.Действует;
	ДоговорОбъект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов;
	ДоговорОбъект.ИнициализироватьСправочник();

	ТипДоговораСтрокой = НСтр("ru = 'с клиентом'");
	
	Если ЗначениеЗаполнено(ДоговорОбъект.Дата) И ЗначениеЗаполнено(ДоговорОбъект.Номер) Тогда
		ТекстНаименования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Договор %1 № %2 от %3'"),
						ТипДоговораСтрокой,
						ДоговорОбъект.Номер,
						Формат(ДоговорОбъект.Дата,"ДЛФ=D"));
	ИначеЕсли ЗначениеЗаполнено(ДоговорОбъект.Номер) Тогда
		ТекстНаименования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Договор %1 № %2'"),
						ТипДоговораСтрокой,
						ДоговорОбъект.Номер);
	ИначеЕсли ЗначениеЗаполнено(ДоговорОбъект.Дата) Тогда
		ТекстНаименования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Договор %1 от %2'"),
						ТипДоговораСтрокой,
						Формат(ДоговорОбъект.Дата,"ДЛФ=D"));
	Иначе
		ТекстНаименования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Договор %1 от %2'"),
						ТипДоговораСтрокой);
	КонецЕсли;

	ДоговорОбъект.Наименование = ТекстНаименования;
	ДоговорОбъект.НаименованиеДляПечати = ТекстНаименования;

	Попытка
		ДоговорОбъект.Записать();
	Исключение
		// В случае проблем при записи нового договора записать предупреждение в журнал регистрации.
		ШаблонСообщения = НСтр("ru = 'Не удалось записать справочник ""Договоры""
			|%1'");
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Изменение договоров контрагента'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.Справочники.ДоговорыКонтрагентов, 
			ДоговорОбъект.Ссылка,
			ТекстСообщения);
		РезультатСоздания.Выполнено = Ложь;
		РезультатСоздания.ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		Возврат;
	КонецПопытки;
	
	РезультатСоздания.Договор = ДоговорОбъект.Ссылка;
	РезультатСоздания.Выполнено = Истина;
	
КонецПроцедуры

// Заполнить табличную часть документа по данным госконтракта.
// 
// Параметры:
//  ДанныеФормы - Форма - данные формы.
//  ЗаполнениеАктаВыполненныхРабот - Булево - признак заполнения акта выполненных работ.
//
Процедура ЗаполнитьТабличнуюЧастьДокументаПоДаннымГосконтракта(ДанныеФормы, ЗаполнениеАктаВыполненныхРабот = Ложь) Экспорт

	Если ЗаполнениеАктаВыполненныхРабот Тогда
		ИмяТаблицыНоменклатуры = "Услуги";
	Иначе
		ИмяТаблицыНоменклатуры = "Товары"
	КонецЕсли;
	
	ДанныеДляЗаполнения =
		ЭлектронноеАктированиеЕИС.ДанныеДляЗаполненияТабличнойЧастиДокумента(ДанныеФормы.Договор);
	
	Если ДанныеДляЗаполнения = Неопределено Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='В договоре не указан государственный контракт.'"));
		Возврат;
	КонецЕсли;
	
	Если ДанныеДляЗаполнения.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Номенклатура контракта не сопоставлена с данными БД.'"));
		Возврат;
	КонецЕсли;
	
	ЕстьНоменклатураПоАкту = Ложь;
	
	ДанныеФормы[ИмяТаблицыНоменклатуры].Очистить();
	Для Каждого ОбъектЗакупки Из ДанныеДляЗаполнения Цикл
		
		Если НЕ ЗначениеЗаполнено(ОбъектЗакупки.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗаполнениеАктаВыполненныхРабот Тогда
			ТипНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектЗакупки.Номенклатура, "ТипНоменклатуры");
			Если НЕ (ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа
				Или ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга) Тогда
				Продолжить;
			Иначе
				ЕстьНоменклатураПоАкту = Истина;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаДокумента = ДанныеФормы[ИмяТаблицыНоменклатуры].Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДокумента, ОбъектЗакупки);
		Если СтрокаДокумента.Свойство("Содержание") Тогда
			СтрокаДокумента.Содержание = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаДокумента.Номенклатура, "Наименование");
		КонецЕсли;
		
		Если СтрокаДокумента.Свойство("КоличествоУпаковок") Тогда
			СтрокаДокумента.КоличествоУпаковок = ОбъектЗакупки.Количество;
		КонецЕсли;
		СтрокаДокумента.СуммаСНДС = ОбъектЗакупки.Сумма + ОбъектЗакупки.СуммаНДС;
		Если ДанныеФормы.Свойство("Склад") И ЗначениеЗаполнено(ДанныеФормы.Склад) Тогда
			СтрокаДокумента.Склад = ДанныеФормы.Склад;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗаполнениеАктаВыполненныхРабот И Не ЕстьНоменклатураПоАкту Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='В контракте нет номенклатуры, подходящей для акта выполненных работ.'"));
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает видимость группы выбора госконтракта и этапа.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма из которой вызвана процедура.
//   ЭтоЗаказКлиента - Булево - Признак, что метод вызван из Заказа клиента.
//   НаименованиеТЧТовары - Строка - Наименование табличной части с товарами.
//
Процедура УстановкаВидимостиГруппыГосконтракта(Форма, ЭтоЗаказКлиента = Ложь, НаименованиеТЧТовары = "Товары") Экспорт

	ВидимостьНоменклатурыПартнера = Ложь;
	ИспользоватьЕИС = Истина;
	
	Если Не ЭлектронноеАктированиеЕИС.ИспользоватьЭлектронноеАктированиеВЕИС() Тогда
		ИспользоватьЕИС = Ложь;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	Договор = Форма.Объект.Договор;
	Если ЗначениеЗаполнено(Договор.ГосударственныйКонтракт) И ИспользоватьЕИС Тогда
		Форма.Элементы.ГруппаГосКонтракт.Видимость = Истина;
		Форма.ГосКонтракт = Договор.ГосударственныйКонтракт;
		УстановитьВидимостьПоляВыбораЭтаповГосконтракта(Форма, Договор);
		Если ЗначениеЗаполнено(Договор.ГосударственныйКонтракт.ВнутреннийИдентификаторЕИС) Тогда
			Форма.ЭтоГосконтрактЕИС = Истина;
			ВидимостьНоменклатурыПартнера = Истина;
			Форма.Элементы.ГруппаФайлыЕИС.Видимость = Истина;
		КонецЕсли;
	Иначе
		Форма.Элементы.ГруппаГосКонтракт.Видимость = Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
		НаименованиеТЧТовары = "Услуги";
	КонецЕсли;	
	НаименованиеПоляНоменклатурыПартнера = НаименованиеТЧТовары + "НоменклатураПартнера";
	Если Не ЭтоЗаказКлиента Тогда
		Форма.Элементы[НаименованиеПоляНоменклатурыПартнера].Видимость = ВидимостьНоменклатурыПартнера;
	Иначе
		Для Каждого ЭлементОформления Из Форма.УсловноеОформление.Элементы Цикл
			Если ЭлементОформления.Поля.Элементы[0].Поле = Новый ПолеКомпоновкиДанных(НаименованиеПоляНоменклатурыПартнера) Тогда
				ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", ВидимостьНоменклатурыПартнера);
			КонецЕсли;
		КонецЦикла
	КонецЕсли;
	
	Если ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		Если НаименованиеТЧТовары = "Товары" Тогда
			Форма.Элементы.РасхожденияНоменклатураПартнера.Видимость = ВидимостьНоменклатурыПартнера;
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

// Заполняет реквизиты госконтракта при записи договора.
// 
// Параметры:
//  Госконтракт - ОпределяемыйТип.ГосударственныеКонтрактыБЭД - Ссылка на контракт.
//  Договор - ОпределяемыйТип.ДоговорСКонтрагентомЭДО - Ссылка на договор.
//
Процедура ПриЗаписиДоговора(Госконтракт, Договор) Экспорт
	
	Если Не ЗначениеЗаполнено(Госконтракт) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ВладелецКонтракта = ПолучитьДоговорГосконтракта(Госконтракт);
	
	ДоговорСсылка = Договор.Ссылка;
	Если ВладелецКонтракта <> ДоговорСсылка Тогда
		
		НачатьТранзакцию();
		Попытка
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("Справочник.ГосударственныеКонтракты");
			ЭлементБлокировкиДанных.УстановитьЗначение("Ссылка", Госконтракт);
			ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
			БлокировкаДанных.Заблокировать();
			
			ГосконтрактОбъект = Госконтракт.ПолучитьОбъект();
			ГосконтрактОбъект.Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорСсылка, "Организация");
			ГосконтрактОбъект.Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорСсылка, "Контрагент");
			ГосконтрактОбъект.Записать();
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			// В случае проблем при записи - предупреждение в журнал регистрации.
			ШаблонСообщения = НСтр("ru = 'Не удалось записать справочник ""Государственные контракты""
				|%1'");
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Изменение государственного контракта'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.ДоговорыКонтрагентов, 
				Госконтракт,
				ТекстСообщения);
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует представление этапа госконтракта для отображения в формах документов.
// 
// Параметры:
//  Данные - Структура - данные для формирования представления:
// * НомерСтроки - Число.
// * ДатаНачала - Дата.
// * ДатаОкончания - Дата.
// 
// Возвращаемое значение:
//  Строка - Представление этапа
//
Функция СформироватьПредставлениеЭтапаГосконтракта(Данные) Экспорт
	
	Представление = "№" + Данные.НомерСтроки + " (" + Формат(Данные.ДатаНачала, "ДЛФ=ДД") + " - " + Формат(Данные.ДатаОкончания, "ДЛФ=ДД") + ")";
	Возврат Представление;
	
КонецФункции

// Разрешается использовать электронное актирование ЕИС.
// 
// Параметры:
//  ИспользованиеРазрешено - Булево - Истина, если использование разрешено.
Процедура РазрешаетсяИспользоватьЭлектронноеАктированиеЕИС(ИспользованиеРазрешено) Экспорт
	
	ИспользованиеРазрешено = Истина;
	
КонецПроцедуры

// Заполнение данных дерева для электронного актирования ЕИС.
// 
// Параметры:
//  ДеревоДанных - ДеревоЗначений
//  ДанныеЭлектронногоАктированияЕИС - Структура
//  ВыборкаШапки - ВыборкаИзРезультатаЗапроса
//  ДанныеПриложенияЕИС - Структура
//  ДокументОснование - ДокументСсылка
//  ЭтоУКД - Булево
//
Процедура ЗаполнитьДанныеДереваДляЭлектронногоАктированияЕИС(ДеревоДанных,
		ДанныеЭлектронногоАктированияЕИС,
		ВыборкаШапки,
		ДанныеПриложенияЕИС,
		ДокументОснование,
		ЭтоУКД) Экспорт

	ТаблицаПодписанты = ЭлектронноеАктированиеЕИС.НоваяТаблицаПодписантов();
	
	ПодписантыЕИС = ДанныеЭлектронногоАктированияЕИС.ПодписантыДокументовЕИС;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДанныеЭлектронногоАктированияЕИС.ДанныеБД",
		ДанныеЭлектронногоАктированияЕИС);
		
	Если ДанныеЭлектронногоАктированияЕИС.ДанныеГосконтракта.Количество() = 0 Тогда
		ОписаниеОшибки = НСтр("ru = 'Не заполнены данные для электронного актирования в форме документа.'");
		ЭлектронноеАктированиеЕИС.ДобавитьОшибкуЗаполненияПриложения(
			ДанныеПриложенияЕИС, ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	// Номер строки указывается в атрибуте ИныеСвед.
	// в дальнейшем используется для заполнения приложений для ЕИС.
	НомерСтроки = 1;
	
	ОтветственныеЗаОформление = Новый Массив;
	Если ЗначениеЗаполнено(ВыборкаШапки.Менеджер) Тогда
		Менеджер = ВыборкаШапки.Менеджер.ФизическоеЛицо;
		МенеджерФИО = Менеджер.Наименование;		
		ОтветственныеЗаОформление.Добавить(МенеджерФИО);
	КонецЕсли;
	Если ЗначениеЗаполнено(ВыборкаШапки.Кладовщик) Тогда
		Если ТипЗнч(ВыборкаШапки.Кладовщик) = Тип("Строка") Тогда
			КладовщикФИО = ВыборкаШапки.Кладовщик;
		Иначе
			КладовщикФИО = ВыборкаШапки.Кладовщик.Наименование;
		КонецЕсли;
		ОтветственныеЗаОформление.Добавить(КладовщикФИО);
	КонецЕсли;	
	
	Если Не ОтветственныеЗаОформление.Количество() Тогда
		ОписаниеОшибки = НСтр("ru = 'Не заполнен менеджер ответственный за оформление УПД.'");
		ЭлектронноеАктированиеЕИС.ДобавитьОшибкуЗаполненияПриложения(
			ДанныеПриложенияЕИС, ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ 
	               |	ПодписантыОрганизацийЕИС.Ссылка КАК Ссылка,
	               |	ПодписантыОрганизацийЕИС.Наименование КАК Наименование,
	               |	ПодписантыОрганизацийЕИС.Фамилия КАК Фамилия,
	               |	ПодписантыОрганизацийЕИС.Имя КАК Имя,
	               |	ПодписантыОрганизацийЕИС.Отчество КАК Отчество,
	               |	ПодписантыОрганизацийЕИС.Должность КАК Должность
	               |ИЗ
	               |	Справочник.ПодписантыОрганизацийЕИС КАК ПодписантыОрганизацийЕИС
	               |ГДЕ
	               |	ПодписантыОрганизацийЕИС.Организация = &Организация
	               |	И ПодписантыОрганизацийЕИС.Наименование В (&ФИО)
	               |	И ПодписантыОрганизацийЕИС.Актуален = ИСТИНА";
	Запрос.УстановитьПараметр("Организация", ВыборкаШапки.Организация);
	Запрос.УстановитьПараметр("ФИО", ОтветственныеЗаОформление);
	ВыборкаПодписантов = Запрос.Выполнить().Выбрать();

	Если Не ВыборкаПодписантов.Количество() Тогда
		ОписаниеОшибки = НСтр("ru = 'Менеджер ответственный за оформление УПД не найден в списке подписантов личного кабинета ЕИС.'");
		ЭлектронноеАктированиеЕИС.ДобавитьОшибкуЗаполненияПриложения(
			ДанныеПриложенияЕИС, ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	Пока ВыборкаПодписантов.Следующий() Цикл
		Подписант = ВыборкаПодписантов.Ссылка;
		ПорядковыйНомерРуководителяОрганизации = 1;
		СтрокаПодписант = ТаблицаПодписанты.Добавить();
		СтрокаПодписант.ТипПодписанта = Перечисления.ТипыПодписантовЕИС.ПредставительЮридическогоЛица;
		СтрокаПодписант.ИНН = ВыборкаШапки.Организация.ИНН;
		ЗаполнитьЗначенияСвойств(СтрокаПодписант, Подписант);
		СтрокаПодписант.Статус = "1";
		Если ЭтоУКД Тогда
			СтрокаПодписант.ОбластьПолномочий = "6";
		Иначе
			СтрокаПодписант.ОбластьПолномочий = "5";
		КонецЕсли;
		СтрокаПодписант.ОснованиеПолномочий = НСтр("ru='Должностные обязанности'");
		СтрокаПодписант.НомерСтроки = НомерСтроки;
		Если Не ЗначениеЗаполнено(СтрокаПодписант.Организация) Тогда
			СтрокаПодписант.Организация = ВыборкаШапки.Организация;
		КонецЕсли;
		ДанныеПриложенияЕИС.ПорядковыйНомерРуководителяОрганизации = ПорядковыйНомерРуководителяОрганизации;
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ДанныеЭлектронногоАктированияЕИС.Подписанты",
			ТаблицаПодписанты);
		НомерСтроки = НомерСтроки + 1;	
	КонецЦикла;
		
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		ДанныеПриложенияЕИС.ДокументОснование = ДокументОснование;
	КонецЕсли;
	ДанныеПриложенияЕИС.Контрагент = ВыборкаШапки.Контрагент;
	
	ДанныеКонтракта = ДанныеЭлектронногоАктированияЕИС.ДанныеГосконтракта[0];
	ДанныеПриложенияЕИС.ДоговорКонтрагента = ДанныеКонтракта.ДоговорКонтрагента;
	
	Если ЭтоУКД Тогда
		ЗаполнитьДанныеПриложенияУКД(
			ДанныеЭлектронногоАктированияЕИС,
			ДанныеПриложенияЕИС);
	Иначе
		ЗаполнитьДанныеПриложенияУПД(
			ДанныеЭлектронногоАктированияЕИС,
			ДанныеПриложенияЕИС);
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДанныеЭлектронногоАктированияЕИС.ДанныеПриложения",
		ДанныеПриложенияЕИС);
		
	// Информация продавца об обстоятельствах закупок для государственных и муниципальных нужд.
	Если НЕ ЭтоУКД Тогда
		ЗакупкаДляГосударственныхНужд = Новый Структура;
		ЗакупкаДляГосударственныхНужд.Вставить("ДатаГосКонтракта", ДанныеКонтракта.ДатаЗаключенияКонтракта);
		ЗакупкаДляГосударственныхНужд.Вставить("НомерГосКонтракта", ДанныеКонтракта.Номер);
		Для каждого КлючЗначение Из ЗакупкаДляГосударственныхНужд Цикл
			Если ЗначениеЗаполнено(КлючЗначение.Значение) Тогда
				Путь = "ДополнительныеСведенияОбУчастниках.ЗакупкаДляГосударственныхНужд." + КлючЗначение.Ключ;
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, Путь, КлючЗначение.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры	

// Заполнение данных приложения УПД.
// 
// Параметры:
//  ДанныеЭлектронногоАктированияЕИС - Структура
//  ДанныеПриложенияЕИС - Структура
//  
Процедура ЗаполнитьДанныеПриложенияУПД(ДанныеЭлектронногоАктированияЕИС, ДанныеПриложенияЕИС) Экспорт
	
	СтоимостьТоваровСНалогом = 0;
	ВсегоКОплатеСуммаНалога = 0;
	
	ЭтоВалютныйКонтракт = Ложь;
	НоминалКурсаВалюты = 1;
	
	Если ЭтоВалютныйКонтракт Тогда
		// Заполняется, если валюта УПД не совпадает с валютой контракта.
		ДанныеПриложенияЕИС.СведенияОТоварах.СтоимостьТоваровСНалогом = СтоимостьТоваровСНалогом;
		ДанныеПриложенияЕИС.СведенияОТоварах.ВсегоКОплатеСуммаНалога = ВсегоКОплатеСуммаНалога;
		//В схемах 11.1 аннотации и описания атрибутов и тэгов будут скорректированы
		//В случае, если валюта документа - Российский Рубль, игнорирование атрибута НоминалКурсВал при загрузке правомерно.
		ДанныеПриложенияЕИС.СведенияОТоварах.НоминалКурсаВалюты = НоминалКурсаВалюты;
	КонецЕсли;

	Если ДанныеЭлектронногоАктированияЕИС.ДанныеГосконтракта.Количество() = 0 Тогда
		ОписаниеОшибки = НСтр("ru='Не заполнены данные государственного контракта для электронного актирования.'");
		ЭлектронноеАктированиеЕИС.ДобавитьОшибкуЗаполненияПриложения(
			ДанныеПриложенияЕИС, ОписаниеОшибки);
		Возврат;
	Иначе
		ДанныеПриложенияЕИС.ГосударственныйКонтракт =
			ДанныеЭлектронногоАктированияЕИС.ДанныеГосконтракта[0].Ссылка;
	КонецЕсли;
	
	ЭлектронноеАктированиеЕИС.ДобавитьДвоичныеВложенияПриложенияДляЕИС(
		ДанныеПриложенияЕИС, ДанныеЭлектронногоАктированияЕИС);
	
	Для Каждого МестоПоставки Из ДанныеЭлектронногоАктированияЕИС.МестаПоставкиДокументовДляЕИС Цикл
		Место = ЭлектронноеАктированиеЕИС.НовыеСведенияОМестеПоставкиТовара();
		МестоJSON = МестоПоставки.ДанныеМеста;
		ЗаполнитьЗначенияСвойств(Место, МестоПоставки);
		КодыАдреса = АдресныйКлассификатор.КодыАдреса(МестоJSON);
		Место.Классификатор = ЭлектронноеАктированиеЕИС.МестоПоставкиПоКЛАДР();
		Место.Код = ЭлектронноеАктированиеЕИС.ПреобразоватьКодКладрДляЕИС(
			КодыАдреса.КодКЛАДР);
		ДанныеПриложенияЕИС.МестаПоставки.Добавить(Место);
	КонецЦикла;
		
КонецПроцедуры

// Заполнение данных приложения УКД.
// 
// Параметры:
//  ДанныеЭлектронногоАктированияЕИС - Структура
//  ДанныеПриложенияЕИС - Структура
// 
Процедура ЗаполнитьДанныеПриложенияУКД(ДанныеЭлектронногоАктированияЕИС, ДанныеПриложенияЕИС) Экспорт
	
	Если ДанныеЭлектронногоАктированияЕИС.ДанныеГосконтракта.Количество() = 0 Тогда
		ОписаниеОшибки = НСтр("ru='Не заполнены данные государственного контракта для электронного актирования.'");
		ЭлектронноеАктированиеЕИС.ДобавитьОшибкуЗаполненияПриложения(
			ДанныеПриложенияЕИС, ОписаниеОшибки);
		Возврат;
	Иначе
		ДанныеПриложенияЕИС.ГосударственныйКонтракт =
			ДанныеЭлектронногоАктированияЕИС.ДанныеГосконтракта[0].Ссылка;
	КонецЕсли;
	
	ЭлектронноеАктированиеЕИС.ДобавитьДвоичныеВложенияПриложенияДляЕИС(
		ДанныеПриложенияЕИС, ДанныеЭлектронногоАктированияЕИС);
	
КонецПроцедуры

// Проверка договора. Если документ содержит договор, привязанный к контракту, выводим предупреждение пользователю.
// 
// Параметры:
//  Настройки - см. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеУПД2019_ИнформацияПродавца.Настройки
//  ДокументОтгрузки - ДокументСсылка
//  ДеревоДанных - ДеревоЗначений
//  ЭтоУКД - Булево
//
Процедура ПроверитьДоговорЭД(Настройки, ДокументОтгрузки, ДеревоДанных, ЭтоУКД) Экспорт
	
	Если НЕ Настройки.Свойство("Договор")
		ИЛИ НЕ Настройки.Свойство("Отправитель")
		ИЛИ НЕ ЗначениеЗаполнено(ДокументОтгрузки) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтправкиВЕИС = ПараметрыОтправкиВЕИС(
		Настройки.Отправитель, Настройки.Договор);
		
	Если НЕ ПараметрыОтправкиВЕИС.ВозможнаОтправка Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоВозврат = Ложь;
	Если ТипЗнч(ДокументОтгрузки) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
		ЭтоВозврат = Истина;
	КонецЕсли;
	
	Если ЭтоУКД Тогда
		ДанныеПриложенияЕИС = ЭлектронноеАктированиеЕИС.НовыеДанныеПриложенияКТитулуПродавцаУКД();
	Иначе
		ДанныеПриложенияЕИС = ЭлектронноеАктированиеЕИС.НовыеДанныеПриложенияКТитулуПродавцаУПД();
	КонецЕсли;
	
	Если ЭтоУКД И ЭтоВозврат Тогда
		ТекстОшибки = НСтр("ru='Возврат товаров от клиента не отправляется при актировании. Используйте корректировку реализации.'");
	Иначе
		Шаблон = НСтр("ru='Выбран договор, привязанный к контракту %1. Отправка документа в ЕИС не поддерживается, для отправки контрагенту используйте договор без привязки к госконтракту.'");
		ТекстОшибки = СтрШаблон(Шаблон, ПараметрыОтправкиВЕИС.Контракт);
	КонецЕсли;
	
	// Закладываем текст ошибки в данные электронного актирования в дереве документа.
	ЭлектронноеАктированиеЕИС.ДобавитьОшибкуЗаполненияПриложения(ДанныеПриложенияЕИС, ТекстОшибки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДанныеЭлектронногоАктированияЕИС.ДанныеПриложения", ДанныеПриложенияЕИС);
	
КонецПроцедуры

// Параметры:
//  СведенияОбУчастнике - см. ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица
//  СтрокаУчастника - СтрокаТаблицыЗначений
//  ВидУчастника - Строка
//  ДанныеПриложенияЕИС - Структура
//  ДатаСведений - Дата
//
Процедура ЗаполнитьМестаПоставкиПриложенияЕИСПоДаннымУчастника(СведенияОбУчастнике, СтрокаУчастника, ВидУчастника, ДанныеПриложенияЕИС, ДатаСведений = Неопределено) Экспорт
	
	Если ВРег(ВидУчастника) = ВРег("СведенияОПокупателе") Тогда
		ИдентификаторУчастника = ЭлектронноеАктированиеЕИС.НачальныйИндексИнформацииУчастникаПокупателя();
	ИначеЕсли ВРег(ВидУчастника) = ВРег("СведенияОГрузополучателе") Тогда
		ИдентификаторУчастника = ЭлектронноеАктированиеЕИС.НачальныйИндексИнформацииУчастникаГрузополучателя();
	КонецЕсли;
	
	СтрокаУчастника.ИнформацияДляУчастника = ИдентификаторУчастника;

	АдресУчастника = Новый Структура();
	СведенияОбУчастнике.Вставить("ДатаКИ", ДатаСведений);
	ОбменСКонтрагентамиУТ.ПолучитьАдресСтруктурой(АдресУчастника, СведенияОбУчастнике, "Ссылка", "Факт");
	
	Если ЗначениеЗаполнено(АдресУчастника) Тогда
		МестоПоставки = ЭлектронноеАктированиеЕИС.НовыеСведенияОМестеПоставкиТовара();
		МестоПоставки.Место = АдресУчастника.АдресТекст;
		МестоПоставки.Наименование = АдресУчастника.АдресТекст;
		МестоПоставки.Классификатор = ЭлектронноеАктированиеЕИС.МестоПоставкиПоКЛАДР();
		МестоПоставки.РайонИлиГород = "-";
		МестоПоставки.НаселенныйПункт = "-";
		Если АдресУчастника.Свойство("КодРегиона")
			И ЗначениеЗаполнено(АдресУчастника.КодРегиона) Тогда
			МестоПоставки.Код = ЭлектронноеАктированиеЕИС.КодКЛАДРПроизвольногоАдреса(
				АдресУчастника.КодРегиона);
		Иначе
			Шаблон = НСтр("ru='Не удалось определить код региона адреса: %1'");
			ТекстОшибки = СтрШаблон(Шаблон, АдресУчастника.АдресТекст);
			ЭлектронноеАктированиеЕИС.ДобавитьОшибкуЗаполненияПриложения(ДанныеПриложенияЕИС, ТекстОшибки);
			Возврат;
		КонецЕсли;
		Если СведенияОбУчастнике.Свойство("ИдентификаторМестаПоставкиЕИС") Тогда
			ИдентификаторМеста = СведенияОбУчастнике.ИдентификаторМестаПоставкиЕИС;
			ДанныеПриложенияЕИС.МестаПоставки.Очистить();
		Иначе
			ИдентификаторМеста = Строка(Новый УникальныйИдентификатор);
			ИдентификаторМеста = СтрЗаменить(ИдентификаторМеста, "-", "");
		КонецЕсли;
		МестоПоставки.Идентификатор = ИдентификаторМеста;
		МестоПоставки.ИдентификаторУчастника = ИдентификаторУчастника;
		ДанныеПриложенияЕИС.МестаПоставки.Добавить(МестоПоставки);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  АдресДоставки - Строка
//  ИдентификаторМестаПоставкиЕИС - Строка
//  ДанныеПриложенияЕИС - Структура
//
Процедура ЗаполнитьМестаПоставкиПриложенияЕИСПоАдресуДоставки(АдресДоставки, ИдентификаторМестаПоставкиЕИС, ДанныеПриложенияЕИС) Экспорт
	
	АдресДоставкиСтруктура = РаботаСАдресами.СведенияОбАдресе(АдресДоставки);
	Если ЗначениеЗаполнено(АдресДоставкиСтруктура) Тогда
		ДанныеПриложенияЕИС.МестаПоставки.Очистить();
		
		МестоПоставки = ЭлектронноеАктированиеЕИС.НовыеСведенияОМестеПоставкиТовара();
		МестоПоставки.Место = АдресДоставкиСтруктура.Представление;
		МестоПоставки.Наименование = АдресДоставкиСтруктура.Представление;
		МестоПоставки.Классификатор = ЭлектронноеАктированиеЕИС.МестоПоставкиПоКЛАДР();
		МестоПоставки.РайонИлиГород = "-";
		МестоПоставки.НаселенныйПункт = "-";
		Если АдресДоставкиСтруктура.Свойство("КодРегиона")
			И ЗначениеЗаполнено(АдресДоставкиСтруктура.КодРегиона) Тогда
			МестоПоставки.Код = ЭлектронноеАктированиеЕИС.КодКЛАДРПроизвольногоАдреса(
				АдресДоставкиСтруктура.КодРегиона);
		Иначе
			Шаблон = НСтр("ru = 'Не удалось определить код региона адреса: %1'");
			ТекстОшибки = СтрШаблон(Шаблон, АдресДоставки);
			ЭлектронноеАктированиеЕИС.ДобавитьОшибкуЗаполненияПриложения(ДанныеПриложенияЕИС, ТекстОшибки);
			Возврат;
		КонецЕсли;
		МестоПоставки.Идентификатор = ИдентификаторМестаПоставкиЕИС;
		МестоПоставки.ИдентификаторУчастника = ЭлектронноеАктированиеЕИС.НачальныйИндексИнформацииУчастникаПокупателя();
		
		ДанныеПриложенияЕИС.МестаПоставки.Добавить(МестоПоставки);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  НоваяСтрокаЭД - Структура
//  СтрокаВыборки - ВыборкаИзРезультатаЗапроса
//  СтруктураДанных - Структура
//  ДанныеПриложенияЕИС - Структура
//
Процедура ЗаполнитьДанныеПоСтрокеТоваровУПД_2019(НоваяСтрокаЭД, СтрокаВыборки, СтруктураДанных, ДанныеПриложенияЕИС) Экспорт

	ДанныеЭлектронногоАктированияЕИС = СтруктураДанных.ДанныеЭлектронногоАктирования;
	
	ДанныеПоДетализации = ДанныеЭлектронногоАктированияЕИС.ДанныеПоДетализации;
	СтрокиДокумента = ДанныеЭлектронногоАктированияЕИС.ДанныеСтрокАктированияЕИС;
	
	ИдентификаторСтроки = СтрокаВыборки.НоменклатураПартнера;
	СтрокаДокумента = СтрокиДокумента.Найти(ИдентификаторСтроки, "НоменклатураПартнера");
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента) Тогда
		Шаблон = НСтр("ru = 'Не найдена строка госконтракта по идентификатору %1.'");
		ТекстОшибки = СтрШаблон(Шаблон, ИдентификаторСтроки);
		ЭлектронноеАктированиеЕИС.ДобавитьОшибкуЗаполненияПриложения(
			ДанныеПриложенияЕИС, ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Если ДанныеЭлектронногоАктированияЕИС.ДанныеГосконтракта.Количество() = 0 Тогда
		ОписаниеОшибки = НСтр("ru = 'Не заполнены данные государственного контракта для электронного актирования.'");
		ЭлектронноеАктированиеЕИС.ДобавитьОшибкуЗаполненияПриложения(ДанныеПриложенияЕИС, ОписаниеОшибки);
		Возврат;
	Иначе
		Контракт = ДанныеЭлектронногоАктированияЕИС.ДанныеГосконтракта[0].Ссылка;
	КонецЕсли;

	ДанныеКонтракта = ЭлектронноеАктированиеЕИС.ДанныеГосударственногоКонтракта(Контракт);
	СпособМаксимальнаяЦена = ЭлектронноеАктированиеЕИС.СпособУказанияЦеныМаксимальнаяЦена();
	
	// Замена кода и наименования товара в УПД на данные из контракта.
	НоваяСтрокаЭД.ТоварКод = СтрокаДокумента.КодТовараДляЕИС;
	НоваяСтрокаЭД.ТоварНаименование = СтрокаДокумента.Наименование;
	
	ОбъектЗамененНаЛучший = СтрокаДокумента.ОбъектЗамененНаЛучший;
	
	Если НоваяСтрокаЭД.Количество = 0 Тогда
		Количество = 1;
	Иначе
		Количество = НоваяСтрокаЭД.Количество;
	КонецЕсли;
	
	Если ТипЗнч(НоваяСтрокаЭД.НалоговаяСтавка) = Тип("СправочникСсылка.СтавкиНДС") Тогда
		СтавкаНДС = НоваяСтрокаЭД.НалоговаяСтавка.Ставка;
	Иначе
		СтавкаНДС = 0;
	КонецЕсли;
	МножительНДС = 1 / (1 + СтавкаНДС / 100);
	
	// Цена за единицу указывается с точностью до 11 цифр.
	// Описание методики расчета приведено в комментариях к РДИК_0210.
	Если ДанныеКонтракта.ИнформацияОЦенах.СпособУказанияЦены = СпособМаксимальнаяЦена
		И ЗначениеЗаполнено(ДанныеКонтракта.ИнформацияОЦенах.ФормулаЦены)
		И НЕ ДанныеКонтракта.НевозможноУказатьКоличество Тогда
		ЦенаИзКонтрактаСНДС = НоваяСтрокаЭД.СтоимостьТоваровСНалогом / Количество;
		НоваяСтрокаЭД.ЦенаЗаЕдиницуИзмерения = Окр(ЦенаИзКонтрактаСНДС * МножительНДС, 11);
		ЦенаИзКонтрактаСНДС = Окр(ЦенаИзКонтрактаСНДС, 11);
	Иначе
		ЦенаИзКонтрактаСНДС = СтрокаДокумента.Цена;
		ЦенаЗаЕдиницуИзмерения = Окр(ЦенаИзКонтрактаСНДС * МножительНДС, 11);
		НоваяСтрокаЭД.ЦенаЗаЕдиницуИзмерения = ЦенаЗаЕдиницуИзмерения;
	КонецЕсли;
	
	ИдентификаторДляАктированияЕИС = СтрокаДокумента.ИдентификаторДляАктированияЕИС;
	СтрокаДетализации = ДанныеПоДетализации[ИдентификаторДляАктированияЕИС];
	ЕстьДетализация = СтрокаДетализации.КоличествоСтрок > 1;
	ВерсияФорматаВерсииСхем12 = "1.11";
	Если НЕ ЭлектронноеАктированиеЕИС.ВерсияФормата() = ВерсияФорматаВерсииСхем12 Тогда
		// С 13 версии схем детализация не используется.
		ЕстьДетализация = Ложь;
	КонецЕсли;
	
	// Определяем вид ТРУ.
	ВидТРУ = ЭлектронноеАктированиеЕИС.ОпределитьВидТРУДляУПД(СтрокаДокумента.Тип);
	ЭтоРаботаИлиУслуга = СтрокаДокумента.ЭтоРаботаИлиУслуга;
	// Устанавливаем признак в строке УПД.
	НоваяСтрокаЭД.Признак = Строка(ВидТРУ);
	
	Если ЕстьДетализация Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаДетализации.ДанныеРодителя) Тогда
			// создаем родителя
			ДанныеРодителя = ЭлектронноеАктированиеЕИС.НовыеДетализированныеСведенияОТРУ();
			СведенияОРодительскойПозиции = ДанныеРодителя.СведенияОРодительскойПозиции;
			
			СведенияОРодительскойПозиции.Идентификатор =
				ИдентификаторДляАктированияЕИС;
			СведенияОРодительскойПозиции.ТехническийИдентификатор =
				СтрокаДокумента.ВнутреннийИдентификаторЕИС;
			СведенияОРодительскойПозиции.ВнешнийТехническийИдентификатор =
				СтрокаДокумента.ВнешнийИдентификатор;
			СведенияОРодительскойПозиции.Код = СтрокаДокумента.КодТовараДляЕИС;
			
			СведенияОРодительскойПозиции.Наименование = СтрокаДокумента.Наименование;
			СведенияОРодительскойПозиции.Вид = ВидТРУ;
			СведенияОРодительскойПозиции.КодЕдиницыИзмерения = НоваяСтрокаЭД.ЕдиницаИзмеренияКод;
			СведенияОРодительскойПозиции.ЦенаЗаЕдиницу = НоваяСтрокаЭД.ЦенаЗаЕдиницуИзмерения;
			СведенияОРодительскойПозиции.Количество = НоваяСтрокаЭД.Количество;
			СведенияОРодительскойПозиции.СтоимостьБезНалогов = НоваяСтрокаЭД.СтоимостьТоваровБезНалога;
			СтавкаНДСДляПриложенияЕИС(СтрокаВыборки.СтавкаНДС, СведенияОРодительскойПозиции.НалоговаяСтавка);
			СведенияОРодительскойПозиции.СтоимостьСНалогами = НоваяСтрокаЭД.СтоимостьТоваровСНалогом;
			СведенияОРодительскойПозиции.СуммаНалога = НоваяСтрокаЭД.СуммаНалога;
			СведенияОРодительскойПозиции.СуммаАкциза = НоваяСтрокаЭД.СуммаАкциза;
			
			Если НЕ ЭтоРаботаИлиУслуга Тогда
				// Страна происхождения не указывается для услуг.
				Если ЗначениеЗаполнено(СтрокаВыборки.СтранаПроисхождения) Тогда
					СведенияОРодительскойПозиции.КодСтраныПроисхождения = СтрокаВыборки.СтранаПроисхождения.Код;
					СведенияОРодительскойПозиции.НаименованиеСтраныПроисхождения = СтрокаВыборки.СтранаПроисхождения.Наименование;
				КонецЕсли;
			КонецЕсли;
			
			СтрокаДетализации.ДанныеРодителя = ДанныеРодителя;
			
			// Добавляем строку родителя, остальные строки добавляются как дочерние позиции.
			ДанныеПриложенияЕИС.СведенияОТоварах.ТоварыРаботыУслуги.Добавить(ДанныеРодителя);
			
		Иначе
			
			ДанныеРодителя = СтрокаДетализации.ДанныеРодителя;
			СведенияОРодительскойПозиции = ДанныеРодителя.СведенияОРодительскойПозиции;
			СведенияОРодительскойПозиции.Количество = СведенияОРодительскойПозиции.Количество + НоваяСтрокаЭД.Количество;
			СведенияОРодительскойПозиции.СтоимостьСНалогами = СведенияОРодительскойПозиции.СтоимостьСНалогами + НоваяСтрокаЭД.СтоимостьТоваровСНалогом;
			СведенияОРодительскойПозиции.СтоимостьБезНалогов = СведенияОРодительскойПозиции.СтоимостьБезНалогов + НоваяСтрокаЭД.СтоимостьТоваровБезНалога;
			СведенияОРодительскойПозиции.СуммаНалога = СведенияОРодительскойПозиции.СуммаНалога + НоваяСтрокаЭД.СуммаНалога;
			СведенияОРодительскойПозиции.СуммаАкциза = СведенияОРодительскойПозиции.СуммаАкциза + НоваяСтрокаЭД.СуммаАкциза;
			
		КонецЕсли;
		
		СведенияОДочернейПозиции = ЭлектронноеАктированиеЕИС.НовыеСведенияОДочернейПозицииТРУ();
		ИдентификаторНоменклатуры = Строка(Новый УникальныйИдентификатор);
		СведенияОДочернейПозиции.Идентификатор = СтрЗаменить(ИдентификаторНоменклатуры, "-", "");
			
		СведенияОДочернейПозиции.НомерСтрокиТаблицы = СтрокаВыборки.НомерСтроки;
		
		Если НоваяСтрокаЭД.Количество > 0 Тогда
			СведенияОДочернейПозиции.ЦенаЗаЕдиницуСНДС = НоваяСтрокаЭД.СтоимостьТоваровСНалогом / НоваяСтрокаЭД.Количество;
		Иначе
			СведенияОДочернейПозиции.ЦенаЗаЕдиницуСНДС = НоваяСтрокаЭД.СтоимостьТоваровСНалогом;
		КонецЕсли;
		
		Если НЕ ЭтоРаботаИлиУслуга Тогда

			Если ЗначениеЗаполнено(СтрокаВыборки.СтранаПроисхождения) Тогда
				СведенияОДочернейПозиции.КодСтраныПроисхождения = СтрокаВыборки.СтранаПроисхождения.Код;
				СведенияОДочернейПозиции.НаименованиеСтраныПроисхождения = СтрокаВыборки.СтранаПроисхождения.Наименование;
			КонецЕсли;
			
			МестоПоставки = ЭлектронноеАктированиеЕИС.НовыеСведенияОМестеПоставкиТоварнойПозиции();
			МестоПоставки.Идентификатор = НоваяСтрокаЭД.ИдентификаторМестаПоставкиЕИС;
			МестоПоставки.ПоставляемоеКоличество = НоваяСтрокаЭД.Количество; 
			СведенияОДочернейПозиции.СведенияОМестахПоставкиТовара.Добавить(МестоПоставки);
			
		КонецЕсли;
		Если ОбъектЗамененНаЛучший Тогда
			СведенияОДочернейПозиции.ПризнакПоставкиОбъектаЗакупкиСУлучшеннымиХарактеристиками = 2;
		Иначе
			СведенияОДочернейПозиции.ПризнакПоставкиОбъектаЗакупкиСУлучшеннымиХарактеристиками = 1;
		КонецЕсли;
		
		ДанныеРодителя.СведенияОДочернихПозициях.Добавить(СведенияОДочернейПозиции);
		
	Иначе
		
		// Без детализации.
		СтрокаПриложения = ЭлектронноеАктированиеЕИС.НовыеНедетализированныеСведенияОТРУ();
		СтрокаПриложения.Идентификатор = ИдентификаторДляАктированияЕИС;
		СтрокаПриложения.НомерСтрокиТаблицы = НоваяСтрокаЭД.НомерСтроки;
		Если ЭтоРаботаИлиУслуга Тогда
			Если ЗначениеЗаполнено(СтрокаДокумента.ОбъемРаботыУслуги) Тогда
				// Количество указывается в текстовом выражении.
				СтрокаПриложения.ОбъемВТекстовомВыражении = СтрокаДокумента.ОбъемРаботыУслуги;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаПриложения.ЦенаИзКонтрактаСНДС = ЦенаИзКонтрактаСНДС;
		СтрокаПриложения.ИсходноеНаименование = СтрокаДокумента.Наименование;
		
		СтрокаПриложения.ТехническийИдентификатор = СтрокаДокумента.ВнутреннийИдентификаторЕИС;
		СтрокаПриложения.ВнешнийТехническийИдентификатор = СтрокаДокумента.ВнешнийИдентификатор;
		
		Если НЕ ЭтоРаботаИлиУслуга Тогда
			Если ЗначениеЗаполнено(СтрокаВыборки.СтранаПроисхождения) Тогда
				СтрокаПриложения.КодСтраныПроисхождения = СтрокаВыборки.СтранаПроисхождения.Код;
				СтрокаПриложения.НаименованиеСтраныПроисхождения = СтрокаВыборки.СтранаПроисхождения.Наименование;
			Иначе
				Если НЕ СтрокаДокумента.СтранаПроисхожденияКонтракт.Пустая() Тогда
					СтрокаПриложения.КодСтраныПроисхождения = СтрокаДокумента.СтранаПроисхожденияКонтракт.Код;
					СтрокаПриложения.НаименованиеСтраныПроисхождения = СтрокаДокумента.СтранаПроисхожденияКонтракт.Наименование;
				КонецЕсли;
			КонецЕсли;
			Если НЕ СтрокаДокумента.СтранаПроизводителяКонтракт.Пустая() Тогда
				СтрокаПриложения.КодСтраныПроизводителя = СтрокаДокумента.СтранаПроизводителяКонтракт.Код;
				СтрокаПриложения.НаименованиеСтраныПроизводителя = СтрокаДокумента.СтранаПроизводителяКонтракт.Наименование;
			КонецЕсли;
		КонецЕсли;
		
		// Признак поставки объекта закупки с улучшенными характеристиками:
		// - 1 - не установлен;
		// - 2 - установлен из информации о контракте;
		// - 3 - установлен пользователем.
		// Игнорируется для авансовых СЧФ.
		// Игнорируется при приеме исправления к документу, который был подписан до версии 11.2.
		// В других случаях контролируется обязательное заполнение.
		// Если для позиции ТРУ в сведениях о контракте установлен одноименный признак, то контролируется, что в составе данного атрибута указано значение "2 - установлен из информации о контракте".
		// Если для позиции ТРУ в сведениях о контракте НЕ установлен одноименный признак, то контролируется, что в составе данного атрибута указано значение, отличное от "2 - установлен из информации о контракте".
		// В исправлении редактирование данного признака допускается только в том случае, если:
		// - статус документа, к которому формируется исправление - «Отказано при рассмотрении»
		// - в сведениях о контракте для данной позиции не установлен признак поставки объекта закупки с улучшенными характеристиками.
		Если ОбъектЗамененНаЛучший Тогда
			СтрокаПриложения.ПризнакПоставкиОбъектаЗакупкиСУлучшеннымиХарактеристиками = 2;
		Иначе
			СтрокаПриложения.ПризнакПоставкиОбъектаЗакупкиСУлучшеннымиХарактеристиками = 1;
		КонецЕсли;
		
		Если НЕ ЭтоРаботаИлиУслуга Тогда
			МестоПоставки = ЭлектронноеАктированиеЕИС.НовыеСведенияОМестеПоставкиТоварнойПозиции();
			МестоПоставки.Идентификатор = НоваяСтрокаЭД.ИдентификаторМестаПоставкиЕИС;
			МестоПоставки.ПоставляемоеКоличество = НоваяСтрокаЭД.Количество; 
			СтрокаПриложения.СведенияОМестахПоставкиТовара.Добавить(МестоПоставки);
		КонецЕсли;
		
		ДанныеПриложенияЕИС.СведенияОТоварах.ТоварыРаботыУслуги.Добавить(СтрокаПриложения);
		
	КонецЕсли;
	
КонецПроцедуры

// Заполнение данных по строке товаров УКД.
// 
// Параметры:
//  НоваяСтрокаЭД - Структура
//  СтрокаВыборки - ВыборкаИзРезультатаЗапроса
//  СтруктураДанных - Структура
//  ДанныеПриложенияЕИС - Структура
//
Процедура ЗаполнитьДанныеПоСтрокеТоваровУКД(НоваяСтрокаЭД, СтрокаВыборки, СтруктураДанных, ДанныеПриложенияЕИС) Экспорт
	
	ДанныеЭлектронногоАктированияЕИС = СтруктураДанных.ДанныеЭлектронногоАктирования;
	
	ДанныеПоДетализации = ДанныеЭлектронногоАктированияЕИС.ДанныеПоДетализации;
	СтрокиДокумента = ДанныеЭлектронногоАктированияЕИС.ДанныеСтрокАктированияЕИС;
	
	ИдентификаторСтроки = СтрокаВыборки.НоменклатураПартнера;
	СтрокаДокумента = СтрокиДокумента.Найти(ИдентификаторСтроки, "НоменклатураПартнера");
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента) Тогда
		Шаблон = НСтр("ru='Не найдена строка госконтракта по номенклатуре партнера строки документа %1.'");
		ТекстОшибки = СтрШаблон(Шаблон, ИдентификаторСтроки);
		ЭлектронноеАктированиеЕИС.ДобавитьОшибкуЗаполненияПриложения(
			ДанныеПриложенияЕИС, ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	// Замена кода и наименования товара в УПД на данные из контракта.
	НоваяСтрокаЭД.ТоварНаименование = СтрокаДокумента.Наименование;
	
	// Замена цены на цену из контракта с точностью до 11 знаков.
	НоваяСтрокаЭД.ЦенаЗаЕдиницуИзмерения = СтрокаДокумента.ЦенаЗаЕдиницуИзмерения;
	НоваяСтрокаЭД.ЦенаЗаЕдиницуИзмеренияДоКорректировки = СтрокаДокумента.ЦенаЗаЕдиницуИзмерения;
	
	ИдентификаторДляАктированияЕИС = СтрокаДокумента.ИдентификаторДляАктированияЕИС;
	СтрокаДетализации = ДанныеПоДетализации[ИдентификаторДляАктированияЕИС];
	ЕстьДетализация = СтрокаДетализации.КоличествоСтрок > 1;
	
	// Определяем вид ТРУ.
	ЭтоРаботаИлиУслуга = СтрокаДокумента.ЭтоРаботаИлиУслуга;
	
	СтрокаПриложения = ЭлектронноеАктированиеЕИС.НовыеСведенияОТРУДляУКД();
	СтрокаПриложения.НомерСтрокиТаблицы = НоваяСтрокаЭД.НомерСтроки;
	
	Если НоваяСтрокаЭД.Количество = 0 Тогда
		СтрокаПриложения.ЦенаСНДСПослеИзменения = 0;
	Иначе
		СтрокаПриложения.ЦенаСНДСПослеИзменения =
			НоваяСтрокаЭД.СтоимостьТоваровСНалогом / НоваяСтрокаЭД.Количество; 
	КонецЕсли;
	
	Если НоваяСтрокаЭД.КоличествоДоКорректировки = 0 Тогда
		СтрокаПриложения.ЦенаСНДСДоИзменения = 0;
	Иначе
		СтрокаПриложения.ЦенаСНДСДоИзменения =
			НоваяСтрокаЭД.СтоимостьТоваровСНалогомДоКорректировки / НоваяСтрокаЭД.КоличествоДоКорректировки;
	КонецЕсли;
	
	СтрокаПриложения.ИсходноеНаименование = СтрокаДокумента.Наименование;
	
	СтрокаПриложения.ВнешнийТехническийИдентификатор = СтрокаДокумента.ВнешнийИдентификатор;
	СтрокаПриложения.Код = СтрокаДокумента.КодТовараДляЕИС;
	СтрокаПриложения.НаименованиеЕдиницыИзмеренияДоИзменения = СтрокаВыборки.ЕдиницаИзмеренияНаименование;
	СтрокаПриложения.НаименованиеЕдиницыИзмеренияПослеИзменения = СтрокаВыборки.ЕдиницаИзмеренияНаименование;
	// Для работ и услуг.
	Если ЭтоРаботаИлиУслуга Тогда
		Если ДанныеЭлектронногоАктированияЕИС.ДанныеГосконтракта.Количество() Тогда
			Если ДанныеЭлектронногоАктированияЕИС.ДанныеГосконтракта[0].ЕстьУслугиСУказаниемОбъемаВТекстовомВыражении Тогда
				СтрокаПриложения.ОбъемВТекстовомВыраженииДоИзменения = СтрокаДокумента.ОбъемВТекстовомВыраженииДоИзменения;
				СтрокаПриложения.ОбъемВТекстовомВыраженииПослеИзменения = СтрокаДокумента.ОбъемВТекстовомВыражении;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьДетализация Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаДетализации.ДанныеРодителя) Тогда
			// создаем родителя
		КонецЕсли;
	Иначе
		
		СтрокаПриложения.Идентификатор = ИдентификаторДляАктированияЕИС;
		
	КонецЕсли;
	
	ДанныеПриложенияЕИС.СведенияОТоварах.ТоварыРаботыУслуги.Добавить(СтрокаПриложения);
	
КонецПроцедуры

// Параметры отправки.
//
// Параметры:
//   Организация - СправочникСсылка.Организации - Организация документа.
//   Договор - ОпределяемыйТип.ДоговорСКонтрагентомЭДО - Ссылка на договор.
// 
// Возвращаемое значение:
//  Структура - параметры отправки в ЕИС:
//     * ВозможнаОтправка - Булево - возможность отправки.
//     * Контракт       - ОпределяемыйТип.ГосударственныеКонтрактыБЭД, Неопределено - гос. контракт.
Функция ПараметрыОтправкиВЕИС(Организация, Договор) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ВозможнаОтправка", Ложь);
	Результат.Вставить("Контракт", Неопределено);
	
	УстановитьПривилегированныйРежим(Истина);
	Если ЭлектронноеАктированиеЕИС.ИспользоватьЭлектронноеАктированиеВЕИС()
		И ЭлектронноеАктированиеЕИС.ОбменПоОрганизацииВключен(Организация) Тогда
		Контракт = ЭлектронноеАктированиеЕИС.ГосударственныйКонтрактДоговора(Договор);
		Если ЗначениеЗаполнено(Контракт) Тогда
			Результат.ВозможнаОтправка = Истина;
			Результат.Контракт = Контракт;
		КонецЕсли;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

// Проверка возможности отправить документ в ЕИС.
//
// Параметры:
//   ДокументСсылка - ДокументСсылка - Ссылка на документ.
// 
// Возвращаемое значение:
//  Булево - возможность отправки в ЕИС.
Функция ДокументОтправляетсяВЕИС(ДокументСсылка) Экспорт
	
	ПоддерживаетсяОтправка = Новый Массив;
	ПоддерживаетсяОтправка.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
	ПоддерживаетсяОтправка.Добавить(Тип("ДокументСсылка.АктВыполненныхРабот"));
	ПоддерживаетсяОтправка.Добавить(Тип("ДокументСсылка.КорректировкаРеализации"));
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.СчетФактураВыданный") 
		Или ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.СчетФактураВыданныйАванс") Тогда
		ДокументСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ДокументОснование");
	КонецЕсли;
	ТипЗначения = ТипЗнч(ДокументСсылка);
	
	Возврат ПоддерживаетсяОтправка.Найти(ТипЗначения) <> Неопределено;
	
КонецФункции

// Текст запроса для выборки данных ЕИС.
// 
// Параметры:
//  Основания - Массив из ДокументСсылка
// 
// Возвращаемое значение:
//  Строка - текст запроса.
Функция ТекстЗапросаДанныеДляПечатиСчетовФактур(Основания) Экспорт

	ТекстЗапроса = "ВЫБРАТЬ
	|	МестаПоставкиДокументовДляЕИС.Организация,
	|	МестаПоставкиДокументовДляЕИС.Документ КАК Регистратор,
	|	МестаПоставкиДокументовДляЕИС.Место,
	|	МестаПоставкиДокументовДляЕИС.Классификатор,
	|	МестаПоставкиДокументовДляЕИС.Код,
	|	МестаПоставкиДокументовДляЕИС.Наименование,
	|	МестаПоставкиДокументовДляЕИС.Адрес,
	|	МестаПоставкиДокументовДляЕИС.РайонИлиГород,
	|	МестаПоставкиДокументовДляЕИС.НаселенныйПункт,
	|	МестаПоставкиДокументовДляЕИС.ДанныеМеста
	|ИЗ
	|	РегистрСведений.МестаПоставкиДокументовДляЕИС КАК МестаПоставкиДокументовДляЕИС
	|ГДЕ
	|	МестаПоставкиДокументовДляЕИС.Документ В (&МассивОснований)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|" + ОбщаяЧастьЗапросаДляПечати();

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "МассивОснований", Основания);
	
	Возврат ОбщегоНазначения.РазделительПакетаЗапросов() + ТекстЗапроса;
	
КонецФункции

// Параметры:
//  РезультатЗапроса - РезультатЗапроса
//  ДанныеДляПечати - Структура
//  КоличествоРезультатов - Число
// 
Процедура ПоместитьРезультатВыполненияЗапросаВДанныеДляПечати(
				РезультатЗапроса, ДанныеДляПечати, КоличествоРезультатов) Экспорт
				
	ДанныеЭлектронногоАктирования = Новый Структура;
	КоличествоРезультатов = КоличествоРезультатов + 5;
	
	// Места поставки есть только в УПД.
	ДанныеЭлектронногоАктирования.Вставить("МестаПоставкиДокументовДляЕИС",
		РезультатЗапроса[КоличествоРезультатов - 5].Выгрузить());
	
	ДанныеСтрокАктированияЕИС = РезультатЗапроса[КоличествоРезультатов - 4].Выгрузить();
	ДанныеЭлектронногоАктирования.Вставить("ДанныеСтрокАктированияЕИС",
		ДанныеСтрокАктированияЕИС);
	ДанныеЭлектронногоАктирования.Вставить("ДанныеГосконтракта",
		РезультатЗапроса[КоличествоРезультатов - 1].Выгрузить());
	ДанныеЭлектронногоАктирования.Вставить("ПодписантыДокументовЕИС",
		РезультатЗапроса[КоличествоРезультатов - 3].Выгрузить());
	ДанныеЭлектронногоАктирования.Вставить("ПриложенныеФайлыДляЭлектронногоАктированияЕИС",
		РезультатЗапроса[КоличествоРезультатов - 2].Выгрузить());
	
	ТаблицаИдентификаторовЕИС = ДанныеСтрокАктированияЕИС.Скопировать();
	ТаблицаИдентификаторовЕИС.Свернуть(
		"ИдентификаторДляАктированияЕИС", "КоличествоСтрок");
	// Соответствие между идентификатором для ЕИС и структурой с количеством строк и данными родителя.
	ДанныеПоДетализации = Новый Соответствие();
	Для Каждого Строка Из ТаблицаИдентификаторовЕИС Цикл
		ДанныеСтрок = Новый Структура("КоличествоСтрок, ДанныеРодителя",
			Строка.КоличествоСтрок, Неопределено);
		ДанныеПоДетализации.Вставить(
			Строка.ИдентификаторДляАктированияЕИС, ДанныеСтрок);
	КонецЦикла;
	ДанныеЭлектронногоАктирования.Вставить("ДанныеПоДетализации", ДанныеПоДетализации);
	
	ДанныеДляПечати.Вставить("ДанныеЭлектронногоАктирования", ДанныеЭлектронногоАктирования);
	
КонецПроцедуры

// Получение этапа Госконтракта.
// 
// Параметры:
//  Договор - СправочникСсылка.ДоговорыКонтрагентов
//  ЭтапГосконтрактаЕИС - Строка
//
Процедура ПолучитьЭтапГосконтракта(Договор, ЭтапГосконтрактаЕИС) Экспорт
	
	ДанныеГосконтракта = ЭлектронноеАктированиеЕИС.ДанныеГосконтрактаПоВладельцу(Договор);
	ТаблицаЭтапов = ДанныеГосконтракта.ТаблицаЭтапов;
	Если ЗначениеЗаполнено(ТаблицаЭтапов) И ТаблицаЭтапов.Количество() = 1 Тогда
		ЭтапГосконтрактаЕИС = ТаблицаЭтапов[0].Идентификатор;
	Иначе
		ЭтапГосконтрактаЕИС = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Получает ссылку на договор, в котором указан переданный госконтракт.
// 
// Параметры:
//  СсылкаНаКонтракт - СправочникСсылка.ГосударственныеКонтракты - Ссылка на госконтракт.
//
// Возвращаемое значение:
//  СправочникСсылка.ДоговорыКонтрагентов - найденный договор.
Функция ПолучитьДоговорГосконтракта(СсылкаНаКонтракт) Экспорт
	
	НайденныйДоговор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(СсылкаНаКонтракт) Тогда
			
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СсылкаНаГосконтракт", СсылкаНаКонтракт.Ссылка);
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.ГосударственныйКонтракт = &СсылкаНаГосконтракт";
		
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			НайденныйДоговор = Результат.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НайденныйДоговор;
	
КонецФункции

// Получает ссылку на все договора, в которых указан переданный госконтракт.
// 
// Параметры:
//  СсылкаНаКонтракт - СправочникСсылка.ГосударственныеКонтракты - Ссылка на госконтракт.
//
// Возвращаемое значение:
//  СписокЗначений из СправочникСсылка.ДоговорыКонтрагентов.
//
Функция ПолучитьВсеДоговораГосконтракта(СсылкаНаКонтракт) Экспорт
	
	СписокДоговоров = Новый СписокЗначений;
	
	Если ЗначениеЗаполнено(СсылкаНаКонтракт) Тогда
			
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СсылкаНаГосконтракт", СсылкаНаКонтракт);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.ГосударственныйКонтракт = &СсылкаНаГосконтракт";
		
		Результат = Запрос.Выполнить().Выбрать();
		Пока Результат.Следующий() Цикл
			СписокДоговоров.Добавить(Результат.Ссылка);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СписокДоговоров;
	
КонецФункции

//Устанавливает видимость госконтракта и этапа госконтракта на форме документа, заполняет этап госконтракта
// 
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма, из которой вызвана процедура.
//  Объект - ДанныеФормыСтруктура - 
//  НаименованиеТЧТовары - Строка - название табличной части "Товары"
//
Процедура ДоговорПриИзмененииЭлектронноеАктированиеЕИС(Форма, Объект, НаименованиеТЧТовары = "Товары") Экспорт
	
	УстановкаВидимостиГруппыГосконтракта(Форма, , НаименованиеТЧТовары);
	ГосконтрактДоговора = ЭлектронноеАктированиеЕИС.ГосударственныйКонтрактДоговора(Объект.Договор);
	Если ЗначениеЗаполнено(ГосконтрактДоговора) И ЗначениеЗаполнено(ГосконтрактДоговора.ВнутреннийИдентификаторЕИС)Тогда
		Форма.ЭтоГосконтрактЕИС = Истина;
		ГосКонтракт = ГосконтрактДоговора;
		ЭтапГосконтрактаЕИС = Неопределено;
		ПолучитьЭтапГосконтракта(Объект.Договор, ЭтапГосконтрактаЕИС);
		Если ЗначениеЗаполнено(ЭтапГосконтрактаЕИС) Тогда
			Объект.ЭтапГосконтрактаЕИС = ЭтапГосконтрактаЕИС;
		Иначе
			Объект.ЭтапГосконтрактаЕИС = "";
			Форма.ПредставлениеЭтапаГосконтрактаЕИС = "";
		КонецЕсли;
	Иначе
		Форма.ЭтоГосконтрактЕИС = Ложь;
		Объект.ЭтапГосконтрактаЕИС = "";
		Форма.ПредставлениеЭтапаГосконтрактаЕИС = "";
	КонецЕсли;
	
КонецПроцедуры

// При необходимости очищает номенклатуру партнера.
// 
// Параметры:
//  Договор - СправочникСсылка.ДоговорыКонтрагентов - Договор из документа.
//  ТаблицаТоваров - ТабличнаяЧасть - ТЧ документа с номенклатурой партнера.
//
Процедура ПередЗаписьюДокумента(Договор, ТаблицаТоваров) Экспорт

	ОчищатьНоменклатуруПартнера = Ложь;
	
	Если ЗначениеЗаполнено(Договор) Тогда 	
		ГосконтрактДоговора = ЭлектронноеАктированиеЕИС.ГосударственныйКонтрактДоговора(Договор);
		Если ЗначениеЗаполнено(ГосконтрактДоговора) И ЗначениеЗаполнено(ГосконтрактДоговора.ВнутреннийИдентификаторЕИС) Тогда
			ОчищатьНоменклатуруПартнера = Ложь;
		Иначе
			ОчищатьНоменклатуруПартнера = Истина;
		КонецЕсли;
	Иначе
		ОчищатьНоменклатуруПартнера = Истина;
	КонецЕсли;

	Если ОчищатьНоменклатуруПартнера Тогда
		Для Каждого СтрокаТовары Из ТаблицаТоваров Цикл
			СтрокаТовары.НоменклатураПартнера = Справочники.НоменклатураКонтрагентов.ПустаяСсылка();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// См. ЭлектронноеАктированиеЕИСПереопределяемый.УсловиеОтбораГосударственныхКонтрактовПоДоговору
Процедура УсловиеОтбораГосударственныхКонтрактовПоДоговору(ТекстУсловия) Экспорт

	ТекстУсловия = "ОписанияОбъектовУчета.ДоговорКонтрагента.ГосударственныйКонтракт = ГосударственныеКонтрактыЕИС.Ссылка";
	
КонецПроцедуры

// См. ЭлектронноеАктированиеЕИСПереопределяемый.ЗаполнитьТаблицуНоменклатурыКонтракта
Процедура ЗаполнитьТаблицуНоменклатурыКонтракта(ТаблицаИдентификаторов, ДанныеГосКонтракта, ТаблицаНоменклатуры) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТЗ.ИдентификаторНоменклатурыКонтрагентов КАК ИдентификаторНоменклатурыКонтрагентов,
	|	ТЗ.Идентификатор КАК Идентификатор,
	|	ТЗ.Количество КАК Количество
	|ПОМЕСТИТЬ ВТ_ТЗ
	|ИЗ
	|	&ТЗ КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураКонтрагентовБЭД.Номенклатура КАК Номенклатура,
	|	НоменклатураКонтрагентовБЭД.Ссылка КАК НоменклатураПартнера,
	|	ВТ_ТЗ.Идентификатор КАК Идентификатор,
	|	ВТ_ТЗ.Количество КАК Количество,
	|	НоменклатураКонтрагентовБЭД.Характеристика КАК Характеристика,
	|	НоменклатураКонтрагентовБЭД.Упаковка КАК Упаковка
	|ИЗ
	|	ВТ_ТЗ КАК ВТ_ТЗ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатураКонтрагентов КАК НоменклатураКонтрагентовБЭД
	|		ПО (НоменклатураКонтрагентовБЭД.Владелец = &Владелец)
	|			И (НоменклатураКонтрагентовБЭД.Идентификатор = ВТ_ТЗ.ИдентификаторНоменклатурыКонтрагентов)
	|			И НЕ НоменклатураКонтрагентовБЭД.Недействителен
	|			И НЕ НоменклатураКонтрагентовБЭД.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ТЗ", ТаблицаИдентификаторов);
	Запрос.УстановитьПараметр("Владелец", ДанныеГосКонтракта.Контрагент.Партнер);

	ТаблицаНоменклатуры = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

// Устанавливает видимость элемента формы для выбора этапа госконтракта.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма, из которой вызвана процедура.
//   Договор - ОпределяемыйТип.ДоговорСКонтрагентомЭДО - Ссылка на договор.
//
Процедура УстановитьВидимостьПоляВыбораЭтаповГосконтракта(Форма, Договор)
	
	ДанныеГосконтракта = ЭлектронноеАктированиеЕИС.ДанныеГосконтрактаПоВладельцу(Договор);
	ТаблицаЭтапов = ДанныеГосконтракта.ТаблицаЭтапов;
	Если ЗначениеЗаполнено(ТаблицаЭтапов) И ТаблицаЭтапов.Количество() > 1 Тогда
		Форма.Элементы.ЭтапГосконтрактаЕИС.Видимость = Истина;
		Если ЗначениеЗаполнено(Форма.Объект.ЭтапГосконтрактаЕИС) Тогда
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Идентификатор", Форма.Объект.ЭтапГосконтрактаЕИС);
			НайденныйЭтап = ТаблицаЭтапов.НайтиСтроки(ПараметрыОтбора);
			Если ЗначениеЗаполнено(НайденныйЭтап) Тогда
				Форма.ПредставлениеЭтапаГосконтрактаЕИС = СформироватьПредставлениеЭтапаГосконтракта(НайденныйЭтап[0]);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Форма.Элементы.ЭтапГосконтрактаЕИС.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Функция ОбщаяЧастьЗапросаДляПечати()
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ГосударственныеКонтрактыЕИСНоменклатураОбъектовЗакупки.Идентификатор КАК ИдентификаторДляАктированияЕИС,
	               |	ГосударственныеКонтрактыЕИСНоменклатураОбъектовЗакупки.НоменклатураПартнера КАК НоменклатураПартнера,
	               |	1 КАК КоличествоСтрок,
	               |	ГосударственныеКонтрактыЕИСОбъектыЗакупки.Ссылка КАК Ссылка,
	               |	ГосударственныеКонтрактыЕИСОбъектыЗакупки.НомерСтроки КАК НомерСтроки,
	               |	ГосударственныеКонтрактыЕИСОбъектыЗакупки.ВнешнийИдентификатор КАК ВнешнийИдентификатор,
	               |	ГосударственныеКонтрактыЕИСОбъектыЗакупки.ВнутреннийИдентификаторЕИС КАК ВнутреннийИдентификаторЕИС,
	               |	ГосударственныеКонтрактыЕИСОбъектыЗакупки.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	ГосударственныеКонтрактыЕИСОбъектыЗакупки.Идентификатор КАК Идентификатор,
	               |	ГосударственныеКонтрактыЕИСОбъектыЗакупки.КодТовараДляЕИС КАК КодТовараДляЕИС,
	               |	ГосударственныеКонтрактыЕИСОбъектыЗакупки.Количество КАК Количество,
	               |	ГосударственныеКонтрактыЕИСОбъектыЗакупки.Наименование КАК Наименование,
	               |	ГосударственныеКонтрактыЕИСОбъектыЗакупки.ОбъектЗамененНаЛучший КАК ОбъектЗамененНаЛучший,
	               |	ГосударственныеКонтрактыЕИСОбъектыЗакупки.ОбъемРаботыУслуги КАК ОбъемРаботыУслуги,
	               |	ГосударственныеКонтрактыЕИСОбъектыЗакупки.СтавкаНДС КАК СтавкаНДС,
	               |	ГосударственныеКонтрактыЕИСОбъектыЗакупки.СтранаПроизводителя КАК СтранаПроизводителяКонтракт,
	               |	ГосударственныеКонтрактыЕИСОбъектыЗакупки.СтранаПроисхождения КАК СтранаПроисхожденияКонтракт,
	               |	ГосударственныеКонтрактыЕИСОбъектыЗакупки.Сумма КАК Сумма,
	               |	ГосударственныеКонтрактыЕИСОбъектыЗакупки.Тип КАК Тип,
	               |	ГосударственныеКонтрактыЕИСОбъектыЗакупки.Цена КАК Цена,
	               |	ГосударственныеКонтрактыЕИСОбъектыЗакупки.ЭтоЛекарственныйПрепарат КАК ЭтоЛекарственныйПрепарат,
	               |	ГосударственныеКонтрактыЕИСОбъектыЗакупки.ЭтоМедицинскоеИзделие КАК ЭтоМедицинскоеИзделие,
	               |	ГосударственныеКонтрактыЕИСОбъектыЗакупки.ЭтоРаботаИлиУслуга КАК ЭтоРаботаИлиУслуга,
	               |	ГосударственныеКонтрактыЕИСОбъектыЗакупки.СуммаНДС КАК СуммаНДС,
	               |	ГосударственныеКонтрактыЕИСОбъектыЗакупки.ЦенаЗаЕдиницуИзмерения КАК ЦенаЗаЕдиницуИзмерения
	               |ИЗ
	               |	ТаблицаТоваровДокументов КАК ДанныеДляАктированияЕИС
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГосударственныеКонтракты.НоменклатураОбъектовЗакупки КАК ГосударственныеКонтрактыЕИСНоменклатураОбъектовЗакупки
	               |		ПО ДанныеДляАктированияЕИС.НоменклатураПартнера = ГосударственныеКонтрактыЕИСНоменклатураОбъектовЗакупки.НоменклатураПартнера
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГосударственныеКонтракты.ОбъектыЗакупки КАК ГосударственныеКонтрактыЕИСОбъектыЗакупки
	               |		ПО ГосударственныеКонтрактыЕИСНоменклатураОбъектовЗакупки.Идентификатор = ГосударственныеКонтрактыЕИСОбъектыЗакупки.Идентификатор
	               |ГДЕ
	               |	ДанныеДляАктированияЕИС.Ссылка В (&МассивОснований)
	               |	И ГосударственныеКонтрактыЕИСОбъектыЗакупки.Ссылка = &ГосударственныйКонтрактЕИС
	               |	И ГосударственныеКонтрактыЕИСНоменклатураОбъектовЗакупки.Ссылка = &ГосударственныйКонтрактЕИС
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПодписантыДокументовЕИС.Подписант.ОбластьПолномочий КАК ОбластьПолномочий,
	               |	ПодписантыДокументовЕИС.Подписант.ОснованиеПолномочий КАК ОснованиеПолномочий,
	               |	ПодписантыДокументовЕИС.Подписант.Фамилия КАК Фамилия,
	               |	ПодписантыДокументовЕИС.Подписант.Имя КАК Имя,
	               |	ПодписантыДокументовЕИС.Подписант.Отчество КАК Отчество,
	               |	ПодписантыДокументовЕИС.Подписант.ИНН КАК ИНН,
	               |	ПодписантыДокументовЕИС.Подписант.Должность КАК Должность,
	               |	ПодписантыДокументовЕИС.Статус КАК Статус,
	               |	ПодписантыДокументовЕИС.Подписант.ТипПодписанта КАК ТипПодписанта,
	               |	ПодписантыДокументовЕИС.Подписант.ПолноеНаименованиеОрганизации КАК ПодписантПолноеНаименованиеОрганизации,
	               |	ПодписантыДокументовЕИС.ОбластьПолномочий КАК ОбластьПолномочийДокумент,
	               |	ПодписантыДокументовЕИС.ОснованиеПолномочий КАК ОснованиеПолномочийДокумент
	               |ИЗ
	               |	РегистрСведений.ПодписантыДокументовЕИС КАК ПодписантыДокументовЕИС
	               |ГДЕ
	               |	ПодписантыДокументовЕИС.Подписант.Актуален = ИСТИНА
	               |	И ПодписантыДокументовЕИС.Подписант.ПометкаУдаления = ЛОЖЬ
	               |	И ПодписантыДокументовЕИС.Документ  В (&МассивОснований)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПриложенныеФайлыДляЭлектронногоАктированияЕИС.ВидВложения.Код КАК КодВида,
	               |	ПриложенныеФайлыДляЭлектронногоАктированияЕИС.ВидВложения.Наименование КАК НаименованиеВида,
	               |	ПриложенныеФайлыДляЭлектронногоАктированияЕИС.ВидВложения КАК ВидВложения,
	               |	ПриложенныеФайлыДляЭлектронногоАктированияЕИС.ПрисоединенныйФайл КАК ПрисоединенныйФайл
	               |ИЗ
	               |	РегистрСведений.ПриложенныеФайлыДляЭлектронногоАктированияЕИС КАК ПриложенныеФайлыДляЭлектронногоАктированияЕИС
	               |ГДЕ
	               |	ПриложенныеФайлыДляЭлектронногоАктированияЕИС.Документ  В (&МассивОснований)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ГосударственныеКонтрактыЕИС.Ссылка КАК Ссылка,
	               |	ГосударственныеКонтрактыЕИС.РеестровыйНомерКонтракта КАК Код,
	               |	ГосударственныеКонтрактыЕИС.ВнутреннийИдентификаторЕИС КАК ВнутреннийИдентификаторЕИС,
	               |	ГосударственныеКонтрактыЕИС.ЕстьАвансы КАК ЕстьАвансы,
	               |	ГосударственныеКонтрактыЕИС.ЕстьАвансыПоЭтапам КАК ЕстьАвансыПоЭтапам,
	               |	ГосударственныеКонтрактыЕИС.ЕстьЛекарственныеПрепараты КАК ЕстьЛекарственныеПрепараты,
				   |	ГосударственныеКонтрактыЕИС.ЕстьПриобретениеЖилыхПомещений КАК ЕстьПриобретениеЖилыхПомещений,
	               |	ГосударственныеКонтрактыЕИС.ЕстьРаботыИлиУслуги КАК ЕстьРаботыИлиУслуги,
	               |	ГосударственныеКонтрактыЕИС.ЕстьУслугиСУказаниемОбъемаВТекстовомВыражении КАК ЕстьУслугиСУказаниемОбъемаВТекстовомВыражении,
	               |	ГосударственныеКонтрактыЕИС.ИдентификаторУчастникаДокументооборотаЗаказчика КАК ИдентификаторУчастникаДокументооборотаЗаказчика,
	               |	ГосударственныеКонтрактыЕИС.ИдентификационныйКодЗакупки КАК ИдентификационныйКодЗакупки,
	               |	ГосударственныеКонтрактыЕИС.НомерИГК КАК НомерИГК,
	               |	ГосударственныеКонтрактыЕИС.Номер КАК Номер,
	               |	ГосударственныеКонтрактыЕИС.ДатаЗаключенияКонтракта КАК ДатаЗаключенияКонтракта,
	               |	ГосударственныеКонтрактыЕИС.ПредметОтноситсяКРаботамПоСтроительству КАК ПредметОтноситсяКРаботамПоСтроительству,
	               |	ГосударственныеКонтрактыЕИС.ПолноеНаименованиеЗаказчика КАК ПолноеНаименованиеЗаказчика,
	               |	&ЭтапИсполненияКонтрактаЕИС КАК ИдентификаторЭтапаКонтракта,
	               |	ДоговорыКонтрагентов.Ссылка КАК ДоговорКонтрагента,
	               |	ГосударственныеКонтрактыЕИС.ПолноеНаименованиеПоставщика КАК ПолноеНаименованиеПоставщика,
	               |	ВЫБОР 
	               |		КОГДА ГосударственныеКонтрактыЕИС.ТипНаправленияДеятельности = ЗНАЧЕНИЕ(Перечисление.ТипыНаправленийДеятельности.КонтрактГОЗ)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ЭтоКонтрактГОЗ,
	               |	ГосударственныеКонтрактыЕИС.НомерГОЗ КАК НомерГОЗ,
	               |	ГосударственныеКонтрактыЕИСЭтапыИсполнения.ВнутреннийИдентификаторЕИС КАК ТехническийИдентификаторЭтапаКонтракта,
	               |	ГосударственныеКонтрактыЕИС.УказанаМаксимальнаяЦена КАК УказанаМаксимальнаяЦена,
	               |	ГосударственныеКонтрактыЕИС.ТребуетсяКазначейскоеСопровождение КАК ТребуетсяКазначейскоеСопровождение				   
	               |ИЗ
	               |	Справочник.ГосударственныеКонтракты.ЭтапыИсполнения КАК ГосударственныеКонтрактыЕИСЭтапыИсполнения
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГосударственныеКонтракты КАК ГосударственныеКонтрактыЕИС
	               |		ПО ГосударственныеКонтрактыЕИСЭтапыИсполнения.Ссылка = ГосударственныеКонтрактыЕИС.Ссылка
	               |			И (ГосударственныеКонтрактыЕИСЭтапыИсполнения.Идентификатор = &ЭтапИсполненияКонтрактаЕИС)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	               |		ПО ДоговорыКонтрагентов.ГосударственныйКонтракт = ГосударственныеКонтрактыЕИС.Ссылка
	               |ГДЕ
	               |	ГосударственныеКонтрактыЕИС.Ссылка = &ГосударственныйКонтрактЕИС
				   |    И ГосударственныеКонтрактыЕИСЭтапыИсполнения.Ссылка = &ГосударственныйКонтрактЕИС";

	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти
