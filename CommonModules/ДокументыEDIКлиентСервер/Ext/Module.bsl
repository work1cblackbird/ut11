///////////////////////////////////////////////////////////////////////////////////////////////////////
// В модуле реализованы клиент-серверные процедуры и функции, предназначенные для работы с документами EDI
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область ДеревоСтатусов

Процедура УстановитьПометкиДеревоСтатусовСогласноВыбраннымСтатусам(ДеревоСтатусов, ВыбранныеСтатусы) Экспорт
	
	Для Каждого СтрокаДерева Из ДеревоСтатусов.ПолучитьЭлементы() Цикл
		
		ЕстьНеВыбранные = Ложь;
		ЕстьВыбранные   = Ложь;
		
		Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
			
			Если ВыбранныеСтатусы.Найти(ПодчиненнаяСтрока.СтатусСсылка) <> Неопределено Тогда
				ПодчиненнаяСтрока.Выбран = Истина;
				ЕстьВыбранные            = Истина;
			Иначе
				ПодчиненнаяСтрока.Выбран = Ложь;
				ЕстьНеВыбранные          = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЕстьВыбранные Тогда
			Если ЕстьНеВыбранные Тогда
				СтрокаДерева.Выбран = 2;
			Иначе
				СтрокаДерева.Выбран = 1;
			КонецЕсли;
		Иначе
			СтрокаДерева.Выбран = 0;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ВыбранныеВДеревеСтатусыДокументов(ДеревоСтатусов) Экспорт
	
	ВыбранныеСтатусы = Новый Массив;
	
	Для Каждого Строка Из ДеревоСтатусов.ПолучитьЭлементы() Цикл
		
		Для Каждого ПодчиненнаяСтрока Из Строка.ПолучитьЭлементы() Цикл
			
			Если ПодчиненнаяСтрока.Выбран Тогда
				ВыбранныеСтатусы.Добавить(ПодчиненнаяСтрока.СтатусСсылка);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ВыбранныеСтатусы;
	
КонецФункции

#КонецОбласти

#Область ПанельОтбора

Процедура УправлениеОтображениемПанелиОтбораРеестрДокументов(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	Элементы.ГруппаПанельНавигации.Видимость = Форма.ОтборПоСтатусамОтображается;
	Если Форма.ОтборПоСтатусамОтображается Тогда
		Элементы.ИзменитьВидимостьПанелиОтборов.Заголовок = НСтр("ru = 'Выберите статусы для отображения:'");
		Элементы.ИзменитьВидимостьПанелиОтборов.Картинка = Форма.КартинкаВправо;
	Иначе
		Элементы.ИзменитьВидимостьПанелиОтборов.Заголовок = ПредставлениеОтбораПоСтатусам(Форма);
		Элементы.ИзменитьВидимостьПанелиОтборов.Картинка = Форма.КартинкаВлево;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КатегорииДокументов

Функция КатегорияДокументаПоТипу(ТипДокумента) Экспорт
	
	Возврат ДокументыEDIИнтеграцияКлиентСервер.КатегорияДокументаПоТипу(ТипДокумента);
	
КонецФункции

#КонецОбласти

#Область НаборыСтатусовИДействий

// Описывает массив действий над документа, при которых возникли отклонения при выполнении.
// 
// Возвращаемое значение:
// 	Массив - массив действий.
//
Функция ДействияОтклоненияПриВыполнении() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(ПредопределенноеЗначение("Перечисление.ДействияПроцессаЗаказаEDI.ЗапрошеноИзменение"));
	МассивДействий.Добавить(ПредопределенноеЗначение("Перечисление.ДействияПроцессаЗаказаEDI.ОтклоненоИзменение"));
	МассивДействий.Добавить(ПредопределенноеЗначение("Перечисление.ДействияПроцессаЗаказаEDI.ОтклоненоВыполнение"));
	МассивДействий.Добавить(ПредопределенноеЗначение("Перечисление.ДействияПроцессаЗаказаEDI.ВозвращенНаВыполнение"));
	МассивДействий.Добавить(ПредопределенноеЗначение("Перечисление.ДействияПроцессаЗаказаEDI.ЗапрошенаОтмена"));
	
	Возврат МассивДействий;
	
КонецФункции

// Описывает массив статусов документа, в которых документ не согласован.
// 
// Возвращаемое значение:
// 	Массив - массив статусов.
//
Функция МассивСтатусовНеСогласовано() Экспорт
	
	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗаказаEDI.СогласуетсяПоставщиком"));
	МассивСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗаказаEDI.СогласуетсяПокупателем"));
	МассивСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗаказаEDI.ГотовКОтправке"));
	
	Возврат МассивСтатусов;
	
КонецФункции

// Описывает массив статусов документа, в которых работа над документом окончена.
// 
// Возвращаемое значение:
// 	Массив - массив статусов.
//
Функция МассивСтатусовАрхив() Экспорт
	
	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗаказаEDI.Выполнен"));
	МассивСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗаказаEDI.Отменен"));
	
	Возврат МассивСтатусов;
	
КонецФункции

// Описывает массив статусов документа, в которых выполняется плановая работа над документом.
// 
// Возвращаемое значение:
// 	Массив - массив статусов.
//
Функция МассивСтатусовВРаботе() Экспорт
	
	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗаказаEDI.СогласуетсяПоставщиком"));
	МассивСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗаказаEDI.СогласуетсяПокупателем"));
	МассивСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗаказаEDI.Выполняется"));
	МассивСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗаказаEDI.ПодтверждаетсяВыполнение"));
	
	Возврат МассивСтатусов;
	
КонецФункции

// Описывает массив статусов документа, при которых есть отклонения при выполнении.
// 
// Возвращаемое значение:
// 	Массив - массив статусов.
//
Функция МассивСтатусовОтклоненияПриВыполнении() Экспорт
	
	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗаказаEDI.ИзмененияПодтверждаютсяПоставщиком"));
	МассивСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗаказаEDI.ИзмененияПодтверждаютсяПокупателем"));
	МассивСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗаказаEDI.ОтменаПодтверждаетсяПоставщиком"));
	МассивСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗаказаEDI.ОтменаПодтверждаетсяПокупателем"));
	МассивСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗаказаEDI.ВыполнениеОтклонено"));
	
	Возврат МассивСтатусов;
	
КонецФункции

// Описывает массив статусов документа, при которых документ находится на стороне продавца.
// 
// Возвращаемое значение:
// 	Массив - массив статусов.
//
Функция МассивСтатусовНаСторонеПродавца() Экспорт
	
	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗаказаEDI.СогласуетсяПоставщиком"));
	МассивСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗаказаEDI.Выполняется"));
	МассивСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗаказаEDI.ИзмененияПодтверждаютсяПоставщиком"));
	МассивСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗаказаEDI.ВыполнениеОтклонено"));
	МассивСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗаказаEDI.ОтменаПодтверждаетсяПоставщиком"));
	
	Возврат МассивСтатусов;
	
КонецФункции

// Описывает массив статусов документа, при которых документ находится на стороне покупателя.
// 
// Возвращаемое значение:
// 	Массив - массив статусов.
//
Функция МассивСтатусовНаСторонеПокупателя() Экспорт
	
	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗаказаEDI.СогласуетсяПокупателем"));
	МассивСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗаказаEDI.ИзмененияПодтверждаютсяПокупателем"));
	МассивСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗаказаEDI.ПодтверждаетсяВыполнение"));
	МассивСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗаказаEDI.ОтменаПодтверждаетсяПокупателем"));
	
	Возврат МассивСтатусов;
	
КонецФункции

// Описывает массив статусов документа, при которых работа над документом не окончена.
// 
// Возвращаемое значение:
// 	Массив - массив статусов.
//
Функция МассивСтатусовНеАрхив() Экспорт
	
	МассивСтатусов = МассивСтатусовВРаботе();
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСтатусов, МассивСтатусовОтклоненияПриВыполнении());
	
	Возврат МассивСтатусов;
	
КонецФункции

// Описывает массив статусов документа, при которых работа над документом находится в стадии выполняется и еще не завершена.
// 
// Возвращаемое значение:
// 	Массив - массив статусов.
//
Функция МассивСтатусовВыполняется() Экспорт
	
	МассивСтатусов = Новый Массив;
	
	МассивСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗаказаEDI.Выполняется"));
	МассивСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗаказаEDI.ИзмененияПодтверждаютсяПоставщиком"));
	МассивСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗаказаEDI.ИзмененияПодтверждаютсяПокупателем"));
	МассивСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗаказаEDI.ПодтверждаетсяВыполнение"));
	МассивСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗаказаEDI.ВыполнениеОтклонено"));
	
	Возврат МассивСтатусов;
	
КонецФункции

// Описывает массив всех возможных статусов документа.
// 
// Возвращаемое значение:
// 	Массив - массив статусов.
//
Функция ВсеСтатусы() Экспорт
	
	МассивСтатусов = МассивСтатусовВРаботе();
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСтатусов, МассивСтатусовОтклоненияПриВыполнении());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСтатусов, МассивСтатусовАрхив());
	
	Возврат МассивСтатусов;
	
КонецФункции

// Описывает массив статусов, при которых документ находится на стороне контрагента.
// 
// Параметры:
// 	КатегорияДокументовEDI - ПеречислениеСсылка.КатегорииДокументовEDI - категория документа.
// 	
// Возвращаемое значение:
// 	Массив - массив статусов.
//
Функция МассивСтатусовНаСторонеКонтрагента(КатегорияДокументовEDI) Экспорт
	
	Если КатегорияДокументовEDI = ПредопределенноеЗначение("Перечисление.КатегорииДокументовEDI.Закупка") Тогда
		МассивСтатусов = МассивСтатусовНаСторонеПродавца();
	Иначе
		МассивСтатусов = МассивСтатусовНаСторонеПокупателя();
	КонецЕсли;
	
	Возврат МассивСтатусов;
	
КонецФункции

// Описывает массив статусов, в которых документ выполняется без отклонений.
// 
// Возвращаемое значение:
// 	Массив - массив статусов.
//
Функция МассивСтатусовВыполняетсяБезОтклонений() Экспорт
	
	МассивСтатусов = Новый Массив;
	
	МассивСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗаказаEDI.Выполняется"));
	МассивСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗаказаEDI.ПодтверждаетсяВыполнение"));
	
	Возврат МассивСтатусов;
	
КонецФункции

#КонецОбласти

#Область РаботаСоСписками

// Устанавливает отбор в списке по указанному значению для нужной колонки
// с учетом переданной структуры быстрого отбора
//
// Параметры:
//  Список                  - ДинамическийСписок - список, для которого требуется установить отбор
//  ИмяКолонки              - Строка - Имя колонки, по которой устанавливается отбор
//  Значение                - Произвольный - устанавливаемое значение отбора
//  СтруктураБыстрогоОтбора - Неопределено, Структура - Структура, содержащая ключи и значения отбора
//  Использование            - Неопределено, Булево - Признак использования элемента отбора
//  ВидСравнения             - Неопределено, ВидСравненияКомпоновкиДанных - вид сравнения, устанавливаемый для элемента отбора
//  ПриводитьЗначениеКЧислу  - Булево - Признак приведения значения к числу.
//
Процедура ОтборПоЗначениюСпискаПриСозданииНаСервере(Список, ИмяКолонки, Значение, Знач СтруктураБыстрогоОтбора, 
			Использование = Неопределено, ВидСравнения = Неопределено, ПриводитьЗначениеКЧислу = Ложь) Экспорт
	
	Если СтруктураБыстрогоОтбора <> Неопределено Тогда
		
		Если СтруктураБыстрогоОтбора.Свойство(ИмяКолонки, Значение) Тогда
			Если ПриводитьЗначениеКЧислу Тогда
				Значение = ?(ЗначениеЗаполнено(Значение), Число(Значение), Значение);
			КонецЕсли;
			ИспользованиеЭлементаОтбора = ?(Использование = Неопределено, ЗначениеЗаполнено(Значение), Использование);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, ИмяКолонки, Значение, ВидСравнения,,ИспользованиеЭлементаОтбора);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает отбор в списке по указанному значению для нужной колонки
// с учетом переданной структуры быстрого отбора.
//
// Параметры:
//  Список                  - ДинамическийСписок - список, для которого требуется установить отбор
//  ИмяКолонки              - Строка - Имя колонки, по которой устанавливается отбор
//  Значение                - Произвольный - устанавливаемое значение отбора.
//  СтруктураБыстрогоОтбора - Неопределено, Структура - Структура, содержащая ключи и значения отбора.
//  Настройки               - Соответствие - загружаемые настройки.
//  Использование           - Неопределено, Булево - Признак использования элемента отбора
//  ВидСравнения            - Неопределено, ВидСравненияКомпоновкиДанных - вид сравнения, устанавливаемый для элемента отбора.
//
Процедура ОтборПоЗначениюСпискаПередЗагрузкойИзНастроек(Список, ИмяКолонки, Значение, Знач СтруктураБыстрогоОтбора, 
			Настройки, Использование = Неопределено, ВидСравнения = Неопределено) Экспорт
	
	Если СтруктураБыстрогоОтбора = Неопределено Тогда
		Значение = Настройки.Получить(ИмяКолонки);
		ИспользованиеЭлементаОтбора = ?(Использование = Неопределено, ЗначениеЗаполнено(Значение), Использование);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, ИмяКолонки, Значение, ВидСравнения,,ИспользованиеЭлементаОтбора);
	Иначе
		Если Не СтруктураБыстрогоОтбора.Свойство(ИмяКолонки) Тогда
			Значение = Настройки.Получить(ИмяКолонки);
			ИспользованиеЭлементаОтбора = ?(Использование = Неопределено, ЗначениеЗаполнено(Значение), Использование);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, ИмяКолонки, Значение, ВидСравнения,,ИспользованиеЭлементаОтбора);
		КонецЕсли;
	КонецЕсли;
	
	Настройки.Удалить(ИмяКолонки);
	
КонецПроцедуры

#КонецОбласти

// Определяет, доступен ли документ для редактирования исходя из статуса EDI
// 
// Параметры:
// 	ТипДокумента - ПеречислениеСсылка.ТипыДокументовEDI - тип документа.
// 	Статус       - ПеречислениеСсылка.СтатусыЗаказаEDI - статус заказа EDI.
// Возвращаемое значение:
// 	Булево - Истина если доступен и ложь в обратном случае.
//
Функция ДокументДоступенДляРедактированияПоСтатусу(ТипДокумента, Статус) Экспорт
	
	Возврат ДокументыEDIИнтеграцияКлиентСервер.ДокументДоступенДляРедактированияПоСтатусу(ТипДокумента, Статус);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПанельОтбора

Функция ПредставлениеОтбораПоСтатусам(Форма)
	
	ВсегоСтатусов   = 0;
	ВыбраноСтатусов = 0;
	
	Для Каждого СтрокаДерева Из Форма.ДеревоСтатусов.ПолучитьЭлементы() Цикл
		
		Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
			
			ВсегоСтатусов = ВсегоСтатусов + 1;
			Если ПодчиненнаяСтрока.Выбран = 1 Тогда
				ВыбраноСтатусов = ВыбраноСтатусов + 1;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ВсегоСтатусов = 0 Тогда
		
		Возврат НСтр("ru = 'Показать отбор по статусам'");
		
	ИначеЕсли ВсегоСтатусов = ВыбраноСтатусов Тогда
		
		Возврат НСтр("ru = 'Отображаются документы во всех статусах'");
		
	Иначе
		
		Возврат СтрШаблон(НСтр("ru = 'Выбрано статусов: %1 из %2.'"), ВыбраноСтатусов, ВсегоСтатусов);
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

