
#Область СлужебныйПрограммныйИнтерфейс

Функция СервисПроверитьРаботоспособность() Экспорт
	
	Результат = Ложь;
	
	ПараметрыОперации = ПараметрыВыполненияОперацииСервиса();
	ПараметрыОперации.АдресРесурса = "common/heartbeat";
	ПараметрыОперации.Метод = "GET";
	ПараметрыОперации.Таймаут = 7;
	
	ОтветСервиса = ВыполнитьОперацию(ПараметрыОперации);
	Если ОтветСервиса.Успех Тогда
		ДанныеОтвета = СтруктураИзJson(ОтветСервиса.Ответ.ПолучитьТелоКакСтроку(), Истина);
		Результат = ЗначениеЗаполнено(ДанныеОтвета["Date"]);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СервисРегистрацияОрганизации(ИдентификаторЭДО, Организация, Маркер) Экспорт
	
	Результат = Ложь;
	
	ДанныеОрганизации = ИнтеграцияЭДО.РегистрационныеДанныеОрганизации(Организация);
	АдресПочты = ЗначениеКонтактнойИнформации(Организация, "Справочник.ВидыКонтактнойИнформации.EmailОрганизации");

	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("INN", СвойствоСтруктуры(ДанныеОрганизации, "ИНН"));
	ПараметрыЗапроса.Вставить("KPP", СвойствоСтруктуры(ДанныеОрганизации, "КПП"));
	ПараметрыЗапроса.Вставить("OGRN", СвойствоСтруктуры(ДанныеОрганизации, "ОГРН"));
	ПараметрыЗапроса.Вставить("Title", СвойствоСтруктуры(ДанныеОрганизации, "Наименование"));
	ПараметрыЗапроса.Вставить("AbonentEDO", ИдентификаторЭДО);
	ПараметрыЗапроса.Вставить("OperatorEDO", Лев(ИдентификаторЭДО, 3));
	ПараметрыЗапроса.Вставить("Email", АдресПочты);
	ПараметрыЗапроса.Вставить("Marker", Маркер);
	ПараметрыЗапроса.Вставить("Phone", СвойствоСтруктуры(ДанныеОрганизации, "Телефон"));
	ПараметрыЗапроса.Вставить("Ticket", ПолучитьСтруктуруДанныхТикетаПодпискиИТС());
	ПараметрыЗапроса.Вставить("version", ВерсияБиблиотеки());
	
	ПараметрыОперации = ПараметрыВыполненияОперацииСервиса(ИдентификаторЭДО);
	ПараметрыОперации.АдресРесурса = "service/registrationEDO";
	ПараметрыОперации.Метод = "POST";
	ПараметрыОперации.ТелоЗапроса = СтруктураВJSON(ПараметрыЗапроса);

	ОтветСервиса = ВыполнитьОперацию(ПараметрыОперации);
	Если ОтветСервиса.Успех Тогда
		ДанныеОтвета = СтруктураИзJson(ОтветСервиса.Ответ.ПолучитьТелоКакСтроку(), Истина, Новый Структура("ИменаСвойствДаты", "expiration"));
		
		ЗаписьРегистра = РегистрыСведений.НастройкиВзаимодействияМПЭПД.ПараметрыЗаписиРегистра(ИдентификаторЭДО);
		ЗаписьРегистра.Организация = Организация;
		ЗаписьРегистра.СрокДействияТокена = СвойствоСтруктуры(ДанныеОтвета, "expiration"); 
		ЗаписьРегистра.ТокенДоступа = СвойствоСтруктуры(ДанныеОтвета, "token");
		ЗаписьРегистра.ТокенОбновления = СвойствоСтруктуры(ДанныеОтвета, "refresh_token");
		
		РегистрыСведений.НастройкиВзаимодействияМПЭПД.РегистрироватьЗапись(ЗаписьРегистра);
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция СервисУдалениеОрганизации(ИдентификаторЭДО) Экспорт
	
	Результат = Ложь;
	
	ТокенДоступа = ПолучитьТокенДоступа(ИдентификаторЭДО);
	
	ПараметрыОперации = ПараметрыВыполненияОперацииСервиса(ИдентификаторЭДО);
	ПараметрыОперации.АдресРесурса = "service/deleteEDO";
	ПараметрыОперации.Метод = "POST";
	ПараметрыОперации.Токен = ТокенДоступа.Токен;
	ПараметрыОперации.ТокенОбновления = ТокенДоступа.ТокенОбновления;

	ОтветСервиса = ВыполнитьОперацию(ПараметрыОперации);
	Если ОтветСервиса.Успех Тогда
		ЗаписьРегистра = РегистрыСведений.НастройкиВзаимодействияМПЭПД.ПараметрыЗаписиРегистра(ИдентификаторЭДО);
		РегистрыСведений.НастройкиВзаимодействияМПЭПД.УдалитьЗапись(ЗаписьРегистра);
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция СервисДобавитьВодителя(ИдентификаторЭДО, ДанныеВодителя) Экспорт
	
	Результат = Неопределено;
	
	ТокенДоступа = ПолучитьТокенДоступа(ИдентификаторЭДО);

	ПараметрыЗапроса = Новый Структура;
	Если ДанныеВодителя.Свойство("ИдентификаторМП")
		И Не ПустаяСтрока(СвойствоСтруктуры(ДанныеВодителя, "ИдентификаторМП")) Тогда
		ПараметрыЗапроса.Вставить("Number", СвойствоСтруктуры(ДанныеВодителя, "ИдентификаторМП"));
		ПараметрыЗапроса.Вставить("repeat", Истина);
	КонецЕсли;
	Если ДанныеВодителя.Свойство("МЧД") Тогда
		ДанныеМЧД = МашиночитаемыеДоверенности.ВыгрузитьДанныеДоверенности(ДанныеВодителя.МЧД);
		Если НЕ ДанныеМЧД.Ошибка Тогда
			ПараметрыЗапроса.Вставить("Attorney", ПолучитьBase64СтрокуИзДвоичныхДанных(ДанныеМЧД.ОписаниеФайла.ДвоичныеДанные));
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыЗапроса.Вставить("FIO", СвойствоСтруктуры(ДанныеВодителя, "Наименование"));
	ПараметрыЗапроса.Вставить("SNILS", СвойствоСтруктуры(ДанныеВодителя, "СНИЛС"));
	ПараметрыЗапроса.Вставить("INN", СвойствоСтруктуры(ДанныеВодителя, "ИНН"));
	ПараметрыЗапроса.Вставить("Role", СвойствоСтруктуры(ДанныеВодителя, "Роль"));
	ПараметрыЗапроса.Вставить("Marker", СвойствоСтруктуры(ДанныеВодителя, "Маркер"));
	ПараметрыЗапроса.Вставить("Phone", СвойствоСтруктуры(ДанныеВодителя, "Телефон"));
	ПараметрыЗапроса.Вставить("ExtID", СвойствоСтруктуры(ДанныеВодителя, "Идентификатор"));
	
	ПараметрыЗапроса.Вставить("KindSign", СоответствиеВидаПодписи(СвойствоСтруктуры(ДанныеВодителя, "ВидЭП")));
	
	ПараметрыЗапроса.Вставить("DirectExchange", СвойствоСтруктуры(ДанныеВодителя, "ПрямойОбмен", Ложь));
	ПараметрыЗапроса.Вставить("PaperAttorney", СвойствоСтруктуры(ДанныеВодителя, "ЕстьБумажнаяДоверенность", Ложь));
	
	ПараметрыОперации = ПараметрыВыполненияОперацииСервиса(ИдентификаторЭДО);
	ПараметрыОперации.АдресРесурса = "service/registrationMA";
	ПараметрыОперации.Метод = "POST";
	ПараметрыОперации.ТелоЗапроса = СтруктураВJSON(ПараметрыЗапроса);
	ПараметрыОперации.Токен = ТокенДоступа.Токен;
	ПараметрыОперации.ТокенОбновления = ТокенДоступа.ТокенОбновления;

	ОтветСервиса = ВыполнитьОперацию(ПараметрыОперации);
	Если ОтветСервиса.Успех Тогда
		ДанныеОтвета = СтруктураИзJson(ОтветСервиса.Ответ.ПолучитьТелоКакСтроку(), Истина, Новый Структура("ИменаСвойствДаты", "expiration"));
		Результат = СвойствоСтруктуры(ДанныеОтвета, "code"); 
		
		Идентификатор = СвойствоСтруктуры(ДанныеВодителя, "Идентификатор");
		
		НоваяЗапись = РегистрыСведений.ПодключенныеМПЭПД.ПараметрыЗаписиРегистра(ИдентификаторЭДО, Идентификатор);
		НоваяЗапись.ИдентификаторМП = СвойствоСтруктуры(ДанныеВодителя, "ИдентификаторМП");
		НоваяЗапись.ИНН = СвойствоСтруктуры(ДанныеВодителя, "ИНН");
		НоваяЗапись.СНИЛС = СвойствоСтруктуры(ДанныеВодителя, "СНИЛС");
		НоваяЗапись.Состояние = Перечисления.СостояниеМПЭПД.ОжидаетсяПодключение;
		НоваяЗапись.Наименование = СвойствоСтруктуры(ДанныеВодителя, "Наименование");
		НоваяЗапись.Телефоны = СвойствоСтруктуры(ДанныеВодителя, "Телефон");
		НоваяЗапись.ВидПодписи = СвойствоСтруктуры(ДанныеВодителя, "ВидЭП");
		НоваяЗапись.Роль =  СвойствоСтруктуры(ДанныеВодителя, "Роль");
		НоваяЗапись.ДатаВремяПолученияКодаРегистрации = ТекущаяУниверсальнаяДата();
		НоваяЗапись.Фамилия =  СвойствоСтруктуры(ДанныеВодителя, "Фамилия");
		НоваяЗапись.Имя =  СвойствоСтруктуры(ДанныеВодителя, "Имя");
		НоваяЗапись.Отчество =  СвойствоСтруктуры(ДанныеВодителя, "Отчество");
		НоваяЗапись.ФизическоеЛицо =  СвойствоСтруктуры(ДанныеВодителя, "ФизическоеЛицо");
		Если ДанныеВодителя.Свойство("МЧД") Тогда
			НоваяЗапись.МЧД = ДанныеВодителя.МЧД;
		КонецЕсли;
		НоваяЗапись.ПрямойОбмен =  СвойствоСтруктуры(ДанныеВодителя, "ПрямойОбмен", Ложь);
		НоваяЗапись.ЕстьБумажнаяДоверенность =  СвойствоСтруктуры(ДанныеВодителя, "ЕстьБумажнаяДоверенность", Ложь);
		НоваяЗапись.КодРегистрации = Результат;
		
		РегистрыСведений.ПодключенныеМПЭПД.РегистрироватьЗапись(НоваяЗапись);
		
		ИзменитьИспользованиеЗаданияПолучениеНовыхУведомлений(Истина);
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция СервисПолучитьПользователей(ИдентификаторЭДО) Экспорт
	
	ТекущаяУниверсальнаяДатаПередЗапросом = ТекущаяУниверсальнаяДата();
	
	СтруктураРезультата = НовыйРезультатПолученияСпискаПользователей();
	СтруктураРезультата.УспешностьЗагрузки = Истина;
	
	МассивИдентификаторов = Новый Массив;
	Если ТипЗнч(ИдентификаторЭДО) = Тип("Строка") Тогда
		МассивИдентификаторов.Добавить(ИдентификаторЭДО);
	Иначе
		МассивИдентификаторов = ИдентификаторЭДО;
	КонецЕсли;                         
	
	Для Каждого СтрокаЭДО Из МассивИдентификаторов Цикл
		ТокенДоступа = ПолучитьТокенДоступа(СтрокаЭДО);
		
		Если ТокенДоступа.Токен = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыОперации = ПараметрыВыполненияОперацииСервиса(СтрокаЭДО);
		ПараметрыОперации.АдресРесурса = "service/listMA";
		ПараметрыОперации.Метод = "GET";
		ПараметрыОперации.Токен = ТокенДоступа.Токен;
		ПараметрыОперации.ТокенОбновления = ТокенДоступа.ТокенОбновления;

		ОтветСервиса = ВыполнитьОперацию(ПараметрыОперации);
		СтруктураРезультата.УспешностьЗагрузки = СтруктураРезультата.УспешностьЗагрузки И ОтветСервиса.Успех;
		
		Если ОтветСервиса.Успех Тогда
			
			ДанныеОтвета = СтруктураИзJson(ОтветСервиса.Ответ.ПолучитьТелоКакСтроку(), Истина);
			
			НаборЗаписей = Новый Массив;
			Для Каждого СтрокаМассива Из ДанныеОтвета Цикл
				НоваяЗапись = РегистрыСведений.ПодключенныеМПЭПД.ПараметрыЗаписиРегистра(СтрокаЭДО, СтрокаМассива["ExtID"]);
				НоваяЗапись.ИдентификаторМП = СтрокаМассива["Number"];
				НоваяЗапись.ИНН = СтрокаМассива["INN"];
				НоваяЗапись.СНИЛС = СтрокаМассива["SNILS"];

				РольПоВидамОбщая = СтрокаМассива["Role"];
				РольИВиды = СервисВзаимодействияМПЭПДКлиентСервер.РазделитьРольИВидыДокументов(РольПоВидамОбщая);
				НоваяЗапись.Роль = РольИВиды.Роль;
				НоваяЗапись.ВидыДокументов = РольИВиды.ВидыДокументов;
				
				НоваяЗапись.Состояние = СоответствиеСостояниеМП(СтрокаМассива["Status"]);
				НоваяЗапись.Наименование = СтрокаМассива["Title"];
				НоваяЗапись.Телефоны = СтрокаМассива["Phones"];
				НоваяЗапись.ВидПодписи = СоответствиеВидаПодписи(СтрокаМассива["KindSign"]);
				НаборЗаписей.Добавить(НоваяЗапись);
			КонецЦикла;
			
			РезультатРегистрации = РегистрыСведений.ПодключенныеМПЭПД.РегистрироватьНабор(
					СтрокаЭДО, НаборЗаписей, ТекущаяУниверсальнаяДатаПередЗапросом);
			
			Если РезультатРегистрации.ЕстьУстройстваОжидающиеПодключение Тогда
				СтруктураРезультата.ЕстьУстройстваОжидающиеПодключение = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла; // По массиву идентификаторов

	Возврат СтруктураРезультата;
	
КонецФункции

Функция СервисУдалитьВодителя(ИдентификаторЭДО, ИдентификаторМП, Идентификатор) Экспорт
	
	Результат = Неопределено;
	
	Если Не ЗначениеЗаполнено(ИдентификаторМП) Тогда
		Результат = Истина;
		ПараметрыЗаписи = РегистрыСведений.ПодключенныеМПЭПД.ПараметрыЗаписиРегистра(ИдентификаторЭДО, Идентификатор);
		РегистрыСведений.ПодключенныеМПЭПД.УдалитьЗапись(ПараметрыЗаписи);
		Возврат Результат;
	КонецЕсли;
	
	ТокенДоступа = ПолучитьТокенДоступа(ИдентификаторЭДО);
	
	ПараметрыЗапроса = Новый Структура("Number", ИдентификаторМП);
	
	ПараметрыОперации = ПараметрыВыполненияОперацииСервиса(ИдентификаторЭДО);
	ПараметрыОперации.АдресРесурса = "service/deleteMA";
	ПараметрыОперации.Метод = "POST";
	ПараметрыОперации.ТелоЗапроса = СтруктураВJSON(ПараметрыЗапроса);
	ПараметрыОперации.Токен = ТокенДоступа.Токен;
	ПараметрыОперации.ТокенОбновления = ТокенДоступа.ТокенОбновления;

	ОтветСервиса = ВыполнитьОперацию(ПараметрыОперации);
	Если ОтветСервиса.Успех Тогда
		ДанныеОтвета = СтруктураИзJson(ОтветСервиса.Ответ.ПолучитьТелоКакСтроку());
		Результат = ДанныеОтвета.success;
		
		Если Результат = Истина Тогда 
			УдалитьЗаписьПодключенныхМПЭПД(ИдентификаторЭДО, Идентификатор);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СервисУдалитьСписокВодителей(УчетныеЗаписи) Экспорт
	
	Всего = УчетныеЗаписи.Количество();
	
	Для Каждого СтрокаМассива Из УчетныеЗаписи Цикл
		Если СервисУдалитьВодителя(СтрокаМассива.ИдентификаторЭДО, СтрокаМассива.ИдентификаторМП, СтрокаМассива.Идентификатор) = Истина Тогда
			Всего = Всего - 1;
		КонецЕсли;
	КонецЦикла;

	Возврат Всего = 0;
	
КонецФункции

Функция СервисПриостановитьРаботуВодителя(ИдентификаторЭДО, ИдентификаторМП) Экспорт
	
	Результат = Неопределено;
	
	ТокенДоступа = ПолучитьТокенДоступа(ИдентификаторЭДО);
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Number", ИдентификаторМП);
	ПараметрыЗапроса.Вставить("status", "Недоступен");
	       
	ПараметрыОперации = ПараметрыВыполненияОперацииСервиса(ИдентификаторЭДО);
	ПараметрыОперации.АдресРесурса = "service/status_ma";
	ПараметрыОперации.Метод = "POST";
	ПараметрыОперации.ТелоЗапроса = СтруктураВJSON(ПараметрыЗапроса);
	ПараметрыОперации.Токен = ТокенДоступа.Токен;
	ПараметрыОперации.ТокенОбновления = ТокенДоступа.ТокенОбновления;

	ОтветСервиса = ВыполнитьОперацию(ПараметрыОперации);
	Если ОтветСервиса.Успех Тогда
		ДанныеОтвета = СтруктураИзJson(ОтветСервиса.Ответ.ПолучитьТелоКакСтроку());
		Если ДанныеОтвета.Свойство("status")
			И ДанныеОтвета.status = "Недоступен" Тогда
			Результат = Истина;
		Иначе
			Результат = Ложь;
		КонецЕсли;
		Если Результат = Истина Тогда
			Состояние = Перечисления.СостояниеМПЭПД.Приостановлен;
			РегистрыСведений.ПодключенныеМПЭПД.ИзменитьСостояниеМП(ИдентификаторМП, Состояние);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СервисВозбновитьРаботуПользователя(ИдентификаторЭДО, ИдентификаторМП) Экспорт
	
	Результат = Неопределено;
	
	ТокенДоступа = ПолучитьТокенДоступа(ИдентификаторЭДО);
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Number", ИдентификаторМП);
	ПараметрыЗапроса.Вставить("status", "Свободен");
	       
	ПараметрыОперации = ПараметрыВыполненияОперацииСервиса(ИдентификаторЭДО);
	ПараметрыОперации.АдресРесурса = "service/status_ma";
	ПараметрыОперации.Метод = "POST";
	ПараметрыОперации.ТелоЗапроса = СтруктураВJSON(ПараметрыЗапроса);
	ПараметрыОперации.Токен = ТокенДоступа.Токен;
	ПараметрыОперации.ТокенОбновления = ТокенДоступа.ТокенОбновления;

	ОтветСервиса = ВыполнитьОперацию(ПараметрыОперации);
	Если ОтветСервиса.Успех Тогда
		ДанныеОтвета = СтруктураИзJson(ОтветСервиса.Ответ.ПолучитьТелоКакСтроку());
		Если ДанныеОтвета.Свойство("status")
			И ДанныеОтвета.status = "Свободен" Тогда
			Результат = Истина;
		Иначе
			Результат = Ложь;
		КонецЕсли;
		Если Результат = Истина Тогда
			Состояние = Перечисления.СостояниеМПЭПД.Подключен;
			РегистрыСведений.ПодключенныеМПЭПД.ИзменитьСостояниеМП(ИдентификаторМП, Состояние);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СервисИзменитьВодителя(ИдентификаторЭДО, ДанныеВодителя) Экспорт
	
	Результат = Неопределено;
	
	ТокенДоступа = ПолучитьТокенДоступа(ИдентификаторЭДО);
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Number", ДанныеВодителя.ИдентификаторМП);
	ПараметрыЗапроса.Вставить("KindSign", СоответствиеВидаПодписи(ДанныеВодителя.ВидПодписи));
	ПараметрыЗапроса.Вставить("SNILS", СвойствоСтруктуры(ДанныеВодителя, "СНИЛС"));
	ПараметрыЗапроса.Вставить("INN", СвойствоСтруктуры(ДанныеВодителя, "ИНН"));
	ПараметрыЗапроса.Вставить("Role", СвойствоСтруктуры(ДанныеВодителя, "Роль"));
	Телефон = СвойствоСтруктуры(ДанныеВодителя, "Телефоны");
	Если СтрНачинаетсяС(Телефон, "+") Тогда
		Телефон = Сред(Телефон, 2);
	КонецЕсли;
	ПараметрыЗапроса.Вставить("PhoneList", Телефон);
                   
	Если ДанныеВодителя.Свойство("МЧД") Тогда
		ДанныеМЧД = "";
		Если ЗначениеЗаполнено(ДанныеВодителя.МЧД) Тогда
			НашлиМЧД = МашиночитаемыеДоверенности.ВыгрузитьДанныеДоверенности(ДанныеВодителя.МЧД);
			Если НЕ НашлиМЧД.Ошибка Тогда
				ДанныеМЧД = ПолучитьBase64СтрокуИзДвоичныхДанных(НашлиМЧД.ОписаниеФайла.ДвоичныеДанные);
			КонецЕсли;
		КонецЕсли;
		ПараметрыЗапроса.Вставить("Attorney", ДанныеМЧД);
	КонецЕсли;
	ПараметрыЗапроса.Вставить("PaperAttorney", СвойствоСтруктуры(ДанныеВодителя, "ЕстьБумажнаяДоверенность", Ложь));
	ПараметрыЗапроса.Вставить("DirectExchange", СвойствоСтруктуры(ДанныеВодителя, "ПрямойОбмен", Ложь));
	
	ПараметрыОперации = ПараметрыВыполненияОперацииСервиса(ИдентификаторЭДО);
	ПараметрыОперации.АдресРесурса = "service/changeMA";
	ПараметрыОперации.Метод = "POST";
	ПараметрыОперации.ТелоЗапроса = СтруктураВJSON(ПараметрыЗапроса);
	ПараметрыОперации.Токен = ТокенДоступа.Токен;
	ПараметрыОперации.ТокенОбновления = ТокенДоступа.ТокенОбновления;

	ОтветСервиса = ВыполнитьОперацию(ПараметрыОперации);
	Если ОтветСервиса.Успех Тогда
		ДанныеОтвета = СтруктураИзJson(ОтветСервиса.Ответ.ПолучитьТелоКакСтроку());
		Результат = ДанныеОтвета.status; 
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция СервисПолучитьУведомления(ИдентификаторЭДО, ТочкаНачала) Экспорт
	
	Результат = Неопределено;
	
	ТокенДоступа = ПолучитьТокенДоступа(ИдентификаторЭДО);
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("point", Формат(ТочкаНачала, "ЧН=0; ЧГ=0"));

	ПараметрыОперации = ПараметрыВыполненияОперацииСервиса(ИдентификаторЭДО);
	ПараметрыОперации.АдресРесурса = "service/notifications";
	ПараметрыОперации.Метод = "GET";
	ПараметрыОперации.Токен = ТокенДоступа.Токен;
	ПараметрыОперации.ТокенОбновления = ТокенДоступа.ТокенОбновления;
	ПараметрыОперации.ПараметрыЗапроса = ПараметрыЗапроса;

	ОтветСервиса = ВыполнитьОперацию(ПараметрыОперации);
	Если ОтветСервиса.Успех Тогда
		ДанныеОтвета = СтруктураИзJson(ОтветСервиса.Ответ.ПолучитьТелоКакСтроку(), Ложь, Новый Структура("ИменаСвойствДаты", "Date"));
		Для Каждого СтрокаМассива Из ДанныеОтвета.List Цикл
			ТекущаяЗапись = РегистрыСведений.КэшВзаимодействияМПЭПД.ПараметрыЗаписиРегистра();
			ТекущаяЗапись.ИдентификаторЭДО = ИдентификаторЭДО;
			ТекущаяЗапись.Вставить("ВнешнийИД", СтрокаМассива.ID);
			ТекущаяЗапись.Вставить("Дата", СтрокаМассива.Date);
			ТекущаяЗапись.Вставить("ИдентификаторДокумента", СтрокаМассива.IDobject);
			ТекущаяЗапись.Вставить("Содержимое", СтрокаМассива.Content);
			ТекущаяЗапись.Вставить("ДанныеСообщения", СтрокаМассива.ServiceData);
			ТекущаяЗапись.Вставить("ИдентификаторМП", СтрокаМассива.IDrecipient);
			ТекущаяЗапись.Вставить("ВидСообщения", СоответствиеУведомлений(СтрокаМассива.Kind));
			ТекущаяЗапись.Вставить("ИдентификаторРодителя", СтрокаМассива.IDparent);
			РегистрыСведений.КэшВзаимодействияМПЭПД.РегистрироватьЗапись(ТекущаяЗапись);
		КонецЦикла;
		Результат = ДанныеОтвета.LastPoint;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция СервисПолучитьСобытия(ИдентификаторЭДО, ТочкаНачала) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("События", Новый Массив);
	Результат.Вставить("Точка");
	
	ТокенДоступа = ПолучитьТокенДоступа(ИдентификаторЭДО);
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("point", Формат(ТочкаНачала, "ЧН=0; ЧГ=0"));
	ПараметрыЗапроса.Вставить("details", "true");

	ПараметрыОперации = ПараметрыВыполненияОперацииСервиса(ИдентификаторЭДО);
	ПараметрыОперации.АдресРесурса = "common/events";
	ПараметрыОперации.Метод = "GET";
	ПараметрыОперации.Токен = ТокенДоступа.Токен;
	ПараметрыОперации.ТокенОбновления = ТокенДоступа.ТокенОбновления;

	ПараметрыОперации.ПараметрыЗапроса = ПараметрыЗапроса;

	ОтветСервиса = ВыполнитьОперацию(ПараметрыОперации);
	Если ОтветСервиса.Успех Тогда
		ДанныеОтвета = СтруктураИзJson(ОтветСервиса.Ответ.ПолучитьТелоКакСтроку(), Ложь, Новый Структура("ИменаСвойствДаты", "Date"));
		ВсеСобытия = Новый Массив;
		Для Каждого СтрокаМассива Из ДанныеОтвета.events Цикл
			ВидСобытия = СоответствиеУведомлений(СтрокаМассива.IDEvent);
			Если ЗначениеЗаполнено(ВидСобытия) Тогда
				ТекущаяЗапись = РегистрыСведений.КэшВзаимодействияМПЭПД.ПараметрыЗаписиРегистра();
				ТекущаяЗапись.ИдентификаторЭДО = ИдентификаторЭДО;
				ТекущаяЗапись.Дата = СтрокаМассива.Date;
				ТекущаяЗапись.Содержимое = СтрокаМассива.NameEvent;
				ТекущаяЗапись.ВидСообщения = ВидСобытия;
				ТекущаяЗапись.ИдентификаторДокумента = СтрокаМассива.IDEPD;
				Если СтрокаМассива.Свойство("IDrecipient") Тогда
					ТекущаяЗапись.ИдентификаторМП = СтрокаМассива.IDrecipient;
				КонецЕсли;
				ВсеСобытия.Добавить(ТекущаяЗапись);
			КонецЕсли;
		КонецЦикла;
		Результат.Вставить("События", ВсеСобытия);
		Результат.Вставить("Точка", ДанныеОтвета.point);
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция СервисОтправитьУведомления(ИдентификаторЭДО, Параметры) Экспорт
	
	Результат = Неопределено;
	
	ТокенДоступа = ПолучитьТокенДоступа(ИдентификаторЭДО);
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("content", СвойствоСтруктуры(Параметры, "Содержимое", ""));
	ПараметрыЗапроса.Вставить("service_data",  СвойствоСтруктуры(Параметры, "ДанныеСообщения", ""));
	ПараметрыЗапроса.Вставить("kind", СоответствиеУведомлений(СвойствоСтруктуры(Параметры, "ВидСообщения", Перечисления.ТипыВзаимодействияМПЭПД.Сообщение)));
	ПараметрыЗапроса.Вставить("idobject", СвойствоСтруктуры(Параметры, "ИдентификаторДокумента"));
	ПараметрыЗапроса.Вставить("recipient", СвойствоСтруктуры(Параметры, "ИдентификаторМП"));

	ПараметрыОперации = ПараметрыВыполненияОперацииСервиса(ИдентификаторЭДО);
	ПараметрыОперации.АдресРесурса = "service/notification";
	ПараметрыОперации.Метод = "POST";
	ПараметрыОперации.Токен = ТокенДоступа.Токен;
	ПараметрыОперации.ТокенОбновления = ТокенДоступа.ТокенОбновления;
	ПараметрыОперации.ТелоЗапроса = СтруктураВJSON(ПараметрыЗапроса);

	ОтветСервиса = ВыполнитьОперацию(ПараметрыОперации);
	Если ОтветСервиса.Успех Тогда
		ДанныеОтвета = СтруктураИзJson(ОтветСервиса.Ответ.ПолучитьТелоКакСтроку(), Ложь, Новый Структура("ИменаСвойствДаты", "Date"));
		Результат = Новый Структура;
		Результат.Вставить("Идентификатор", ДанныеОтвета.ID);
		Результат.Вставить("Дата", ДанныеОтвета.Date);
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция СервисИзменитьДокумент(ИдентификаторЭДО, ИдентификаторДокумента, ИдентификаторМП = "", СтатусДокумента = Неопределено, ДокументЭПД = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	ТокенДоступа = ПолучитьТокенДоступа(ИдентификаторЭДО);
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("DocFlow", ИдентификаторДокумента);
	ПараметрыЗапроса.Вставить("DocType", СервисВзаимодействияМПЭПДКлиентСервер.ТипДокументаМП(ДокументЭПД));
	ПараметрыЗапроса.Вставить("IDMA", ИдентификаторМП);
	Если СтатусДокумента <> Неопределено Тогда
		ПараметрыЗапроса.Вставить("Status", СоответствиеСостояниеЭПД(СтатусДокумента));
	КонецЕсли;

	ПараметрыОперации = ПараметрыВыполненияОперацииСервиса(ИдентификаторЭДО);
	ПараметрыОперации.АдресРесурса = "edo/SetEPD";
	ПараметрыОперации.Метод = "POST";
	ПараметрыОперации.Токен = ТокенДоступа.Токен;
	ПараметрыОперации.ТокенОбновления = ТокенДоступа.ТокенОбновления;
	ПараметрыОперации.ТелоЗапроса = СтруктураВJSON(ПараметрыЗапроса);

	ОтветСервиса = ВыполнитьОперацию(ПараметрыОперации);
	Если ОтветСервиса.Успех Тогда
		Результат = Истина;
		
		ТекущаяЗапись = РегистрыСведений.КэшВзаимодействияМПЭПД.ПараметрыЗаписиРегистра();
		ТекущаяЗапись.ИдентификаторЭДО = ИдентификаторЭДО;
		ТекущаяЗапись.Дата = ТекущаяДатаСеанса();
		ТекущаяЗапись.Содержимое = "Смена пользователя";
		ТекущаяЗапись.Исходящее = Истина;
		Если ЗначениеЗаполнено(ИдентификаторМП) Тогда
			ТекущаяЗапись.ВидСообщения = Перечисления.ТипыВзаимодействияМПЭПД.ПривязкаВодителя;
		Иначе
			ТекущаяЗапись.ВидСообщения = Перечисления.ТипыВзаимодействияМПЭПД.ОтвязкаВодителя;
		КонецЕсли;
		ТекущаяЗапись.ИдентификаторДокумента = ИдентификаторДокумента;
		ТекущаяЗапись.ИдентификаторМП = ИдентификаторМП;
		ТекущаяЗапись.ДокументЭПД = ДокументЭПД;
		ТекущаяЗапись.Автор = Пользователи.ТекущийПользователь();
		
		РегистрыСведений.КэшВзаимодействияМПЭПД.РегистрироватьЗапись(ТекущаяЗапись);
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция СервисОтвязатьДокумент(Документ, ИдентификаторЭДО) Экспорт
	
	Результат = Ложь;

	ЭД = ИнтеграцияЭДО.ОсновнойЭлектронныйДокументОбъектаУчета(Документ);
	
	Результат = СервисИзменитьДокумент(
			ИдентификаторЭДО, 
			ЭД.ИдентификаторДокументооборота,
			,
			,
			Документ);	
			
	Если Результат = Истина Тогда
		ЗаписьРеестраЭПД = РегистрыСведений.РеестрЭПД.СоздатьМенеджерЗаписи();
		ЗаписьРеестраЭПД.Ссылка = Документ;
		ЗаписьРеестраЭПД.Прочитать();
		Если ЗаписьРеестраЭПД.Выбран() Тогда
			ЗаписьРеестраЭПД.МобильноеПриложение = "Отключено";
			ЗаписьРеестраЭПД.ИдентификаторЗаписиМП = Неопределено;
			ЗаписьРеестраЭПД.НаименованиеМП = Неопределено;
			ЗаписьРеестраЭПД.Записать();
		КонецЕсли;
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

Функция ОбслуживаниеОтметокПрочитано(Организация, ДатаОбновления) Экспорт
	
	Результат = Ложь;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НастройкиВзаимодействияМПЭПД.ИдентификаторЭДО КАК ИдентификаторЭДО
	|ПОМЕСТИТЬ ВсеУчетныеЗаписи
	|ИЗ
	|	РегистрСведений.НастройкиВзаимодействияМПЭПД КАК НастройкиВзаимодействияМПЭПД
	|ГДЕ
	|	НастройкиВзаимодействияМПЭПД.Организация = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КэшВзаимодействияМПЭПД.Идентификатор КАК Идентификатор
	|ИЗ
	|	РегистрСведений.КэшВзаимодействияМПЭПД КАК КэшВзаимодействияМПЭПД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеУчетныеЗаписи КАК ВсеУчетныеЗаписи
	|		ПО КэшВзаимодействияМПЭПД.ИдентификаторЭДО = ВсеУчетныеЗаписи.ИдентификаторЭДО
	|ГДЕ
	|	КэшВзаимодействияМПЭПД.Прочитано = ЛОЖЬ
	|	И КэшВзаимодействияМПЭПД.Исходящее = ЛОЖЬ
	|	И КэшВзаимодействияМПЭПД.ДатаПолучения <= &ДатаПолучения";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаПолучения", ДатаОбновления);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТекущаяЗапись = РегистрыСведений.КэшВзаимодействияМПЭПД.ПараметрыЗаписиРегистра(Выборка.Идентификатор);
		ТекущаяЗапись.Прочитано = Истина;
		Результат = Результат ИЛИ РегистрыСведений.КэшВзаимодействияМПЭПД.РегистрироватьЗапись(ТекущаяЗапись);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ОбслуживаниеУдалениеСтарыхЗаписей(Организация = Неопределено, Знач ДатаОбновления = Неопределено) Экспорт
	
	Результат = Ложь;
	
	Если ДатаОбновления = Неопределено Тогда
		ДатаПолучения = ДобавитьМесяц(НачалоДня(ТекущаяДатаСеанса()), -1);
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НастройкиВзаимодействияМПЭПД.ИдентификаторЭДО КАК ИдентификаторЭДО
	|ПОМЕСТИТЬ ВсеУчетныеЗаписи
	|ИЗ
	|	РегистрСведений.НастройкиВзаимодействияМПЭПД КАК НастройкиВзаимодействияМПЭПД
	|ГДЕ
	|	(НастройкиВзаимодействияМПЭПД.Организация = &Организация
	|			ИЛИ &Организация = НЕОПРЕДЕЛЕНО)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КэшВзаимодействияМПЭПД.Идентификатор КАК Идентификатор
	|ИЗ
	|	РегистрСведений.КэшВзаимодействияМПЭПД КАК КэшВзаимодействияМПЭПД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеУчетныеЗаписи КАК ВсеУчетныеЗаписи
	|		ПО КэшВзаимодействияМПЭПД.ИдентификаторЭДО = ВсеУчетныеЗаписи.ИдентификаторЭДО
	|ГДЕ
	|	КэшВзаимодействияМПЭПД.Прочитано = ИСТИНА
	|	И КэшВзаимодействияМПЭПД.ДатаПолучения <= &ДатаПолучения";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаПолучения", ДатаПолучения);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТекущаяЗапись = РегистрыСведений.КэшВзаимодействияМПЭПД.ПараметрыЗаписиРегистра(Выборка.Идентификатор);
		Результат = Результат ИЛИ РегистрыСведений.КэшВзаимодействияМПЭПД.УдалитьЗапись(ТекущаяЗапись);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ИзменитьИспользованиеЗаданияПолучениеНовыхУведомлений(Использование) Экспорт
	
	Если ПривилегированныйРежим() = Ложь Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Использование", Использование);
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.ОчередьЗаданий") Тогда
			МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
			МодульОчередьЗаданий = ОбщегоНазначения.ОбщийМодуль("ОчередьЗаданий");
			ПараметрыПоиска = Новый Структура;
			Если ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
				ОбластьДанных = МодульРаботаВМоделиСервиса.ЗначениеРазделителяСеанса();
				ПараметрыПоиска.Вставить("ОбластьДанных", ОбластьДанных);
			КонецЕсли;
			Шаблон = МодульОчередьЗаданий.ШаблонПоИмени("ПолучениеСобытийМПЭПД");
			Если ЗначениеЗаполнено(Шаблон) Тогда
				ПараметрыПоиска.Вставить("Шаблон", Шаблон);
				СписокЗаданий = МодульОчередьЗаданий.ПолучитьЗадания(ПараметрыПоиска);
				Для Каждого Задание Из СписокЗаданий Цикл
					МодульОчередьЗаданий.ИзменитьЗадание(Задание.Идентификатор, ПараметрыЗадания);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	Иначе
		РегламентныеЗаданияСервер.ИзменитьЗадание(Метаданные.РегламентныеЗадания.ПолучениеСобытийМПЭПД, ПараметрыЗадания);
	КонецЕсли;
	
КонецПроцедуры

Функция НужноВыполнятьРегламентноеЗаданиеПолученияНовыхУведомлений() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПодключенныеМПЭПД.Идентификатор
	|ИЗ
	|	РегистрСведений.ПодключенныеМПЭПД КАК ПодключенныеМПЭПД";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ИзменитьИспользованиеЗаданияПолучениеНовыхУведомлений(Ложь);
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура ОбслуживаниеПолучениеНовыхУведомлений(Организация = Неопределено) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ПолучениеСобытийМПЭПД);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НужноВыполнятьРегламентноеЗаданиеПолученияНовыхУведомлений() = Ложь Тогда
		Возврат;
	КонецЕсли;

	СтрокаОтбора = Неопределено;
	Если Организация <> Неопределено Тогда
		СтрокаОтбора = Новый Структура("Организация", Организация);
	КонецЕсли;
	
	ВсеУчетныеЗаписи = СписокПодключенныхУчетныхЗаписейЭДО(Ложь, СтрокаОтбора);
	
	Для Каждого СтрокаТаблицы Из ВсеУчетныеЗаписи Цикл
		Если СтрокаТаблицы.ВсегоМП = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяТочка1 = СервисПолучитьУведомления(СтрокаТаблицы.УчетнаяЗаписьЭДО, СтрокаТаблицы.ТочкаОпросаУведомлений);
		ДанныеСобытий = СервисПолучитьСобытия(СтрокаТаблицы.УчетнаяЗаписьЭДО, СтрокаТаблицы.ТочкаОпросаСобытий);
		НоваяТочка2 = ДанныеСобытий.Точка;
		
		Для Каждого СтрокаМассива Из ДанныеСобытий.События Цикл
			
			Если СтрокаМассива.ВидСообщения = Перечисления.ТипыВзаимодействияМПЭПД.ПовторнаяРегистрацияМП
				ИЛИ СтрокаМассива.ВидСообщения = Перечисления.ТипыВзаимодействияМПЭПД.ИзменениеСведенийМП
				ИЛИ СтрокаМассива.ВидСообщения = Перечисления.ТипыВзаимодействияМПЭПД.ОтвязкаВодителя
				ИЛИ СтрокаМассива.ВидСообщения = Перечисления.ТипыВзаимодействияМПЭПД.ПривязкаВодителя
				ИЛИ СтрокаМассива.ВидСообщения = Перечисления.ТипыВзаимодействияМПЭПД.УдалениеМП Тогда
				РегистрыСведений.КэшВзаимодействияМПЭПД.РегистрироватьЗапись(СтрокаМассива);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(НоваяТочка1) ИЛИ ЗначениеЗаполнено(НоваяТочка2) Тогда
			ТекущаяЗапись = РегистрыСведений.НастройкиВзаимодействияМПЭПД.ПараметрыЗаписиРегистра(СтрокаТаблицы.УчетнаяЗаписьЭДО);
			Если ЗначениеЗаполнено(НоваяТочка1) Тогда
				ТекущаяЗапись.ТочкаОпросаУведомлений = НоваяТочка1;
			КонецЕсли;
			Если ЗначениеЗаполнено(НоваяТочка2) Тогда
				ТекущаяЗапись.ТочкаОпросаСобытий = НоваяТочка2;
			КонецЕсли;
			РегистрыСведений.НастройкиВзаимодействияМПЭПД.РегистрироватьЗапись(ТекущаяЗапись);
		КонецЕсли;
		
	КонецЦикла;
	
	// Отметка текущего шага МП для журнала
	Запрос = Новый Запрос;      
	МассивПодтвержденийМП = Новый Массив;    
	МассивПодтвержденийМП.Добавить("Подверждение переадресовки водителем");
	МассивПодтвержденийМП.Добавить("Подверждение замены водителем");
	Запрос.УстановитьПараметр("МассивПодтвержденийМП", МассивПодтвержденийМП);
	Запрос.Текст = "ВЫБРАТЬ
	|	КэшВзаимодействияМПЭПД.Идентификатор КАК Идентификатор,
	|	КэшВзаимодействияМПЭПД.Дата КАК Дата,
	|	КэшВзаимодействияМПЭПД.ИдентификаторЭДО КАК ИдентификаторЭДО,
	|	КэшВзаимодействияМПЭПД.ИдентификаторДокумента КАК ИдентификаторДокументооборота,
	|	КэшВзаимодействияМПЭПД.ИдентификаторМП КАК МобильноеПриложение,
	|	КэшВзаимодействияМПЭПД.ВидСообщения КАК ВидСообщения,
	|	КэшВзаимодействияМПЭПД.Содержимое КАК Содержимое,
	|	КэшВзаимодействияМПЭПД.ДанныеСообщения КАК ДанныеСообщения
	|ПОМЕСТИТЬ ВТ_ТЗ
	|ИЗ
	|	РегистрСведений.КэшВзаимодействияМПЭПД КАК КэшВзаимодействияМПЭПД
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрЭПД КАК РеестрЭПД
	|		ПО КэшВзаимодействияМПЭПД.ДокументЭПД = РеестрЭПД.Ссылка
	|ГДЕ
	|	КэшВзаимодействияМПЭПД.Исходящее = ЛОЖЬ
	|	И (РеестрЭПД.МобильноеПриложение ЕСТЬ NULL
	|	ИЛИ КэшВзаимодействияМПЭПД.Дата > РеестрЭПД.ДатаСобытияМП)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КэшВзаимодействияМПЭПД.Идентификатор,
	|	КэшВзаимодействияМПЭПД.Дата,
	|	КэшВзаимодействияМПЭПД.ИдентификаторЭДО,
	|	КэшВзаимодействияМПЭПД.ИдентификаторДокумента,
	|	КэшВзаимодействияМПЭПД.ИдентификаторМП,
	|	КэшВзаимодействияМПЭПД.ВидСообщения,
	|	КэшВзаимодействияМПЭПД.Содержимое,
	|	КэшВзаимодействияМПЭПД.ДанныеСообщения
	|ИЗ
	|	РегистрСведений.КэшВзаимодействияМПЭПД КАК КэшВзаимодействияМПЭПД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РеестрЭПД КАК РеестрЭПД
	|		ПО КэшВзаимодействияМПЭПД.ДокументЭПД = РеестрЭПД.Ссылка
	|		И КэшВзаимодействияМПЭПД.Исходящее = ЛОЖЬ
	|		И (КэшВзаимодействияМПЭПД.Содержимое В (&МассивПодтвержденийМП))
	|ГДЕ
	|	РеестрЭПД.ОжидаемПросмотрМП = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъектыУчетаДокументовЭДО.ОбъектУчета КАК Документ,
	|	ВТ_ТЗ.Идентификатор КАК ИдентификаторСообщения,
	|	ВТ_ТЗ.Дата КАК Дата,
	|	ВТ_ТЗ.МобильноеПриложение КАК МобильноеПриложение,
	|	ВТ_ТЗ.ВидСообщения КАК ВидСообщения,
	|	ВТ_ТЗ.Содержимое КАК Содержимое,
	|	ВТ_ТЗ.ДанныеСообщения КАК ДанныеСообщения,
	|	ВТ_ТЗ.ИдентификаторЭДО КАК ИдентификаторЭДО
	|ПОМЕСТИТЬ ВТ_СООБЩЕНИЯ_ДОКУМЕНТОВ
	|ИЗ
	|	Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТЗ КАК ВТ_ТЗ
	|		ПО (ВТ_ТЗ.ИдентификаторДокументооборота = ЭлектронныйДокументВходящийЭДО.ИдентификаторДокументооборота)
	|		И (ВТ_ТЗ.ИдентификаторЭДО = ЭлектронныйДокументВходящийЭДО.ИдентификаторОрганизации)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
	|		ПО ЭлектронныйДокументВходящийЭДО.Ссылка = ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент
	|		И (ОбъектыУчетаДокументовЭДО.Актуальный = ИСТИНА)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОбъектыУчетаДокументовЭДО.ОбъектУчета,
	|	ВТ_ТЗ.Идентификатор,
	|	ВТ_ТЗ.Дата,
	|	ВТ_ТЗ.МобильноеПриложение,
	|	ВТ_ТЗ.ВидСообщения,
	|	ВТ_ТЗ.Содержимое,
	|	ВТ_ТЗ.ДанныеСообщения,
	|	ВТ_ТЗ.ИдентификаторЭДО
	|ИЗ
	|	Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТЗ КАК ВТ_ТЗ
	|		ПО (ВТ_ТЗ.ИдентификаторДокументооборота = ЭлектронныйДокументИсходящийЭДО.ИдентификаторДокументооборота)
	|		И (ВТ_ТЗ.ИдентификаторЭДО = ЭлектронныйДокументИсходящийЭДО.ИдентификаторОрганизации)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
	|		ПО ЭлектронныйДокументИсходящийЭДО.Ссылка = ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент
	|		И (ОбъектыУчетаДокументовЭДО.Актуальный = ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СООБЩЕНИЯ_ДОКУМЕНТОВ.Документ,
	|	ВТ_СООБЩЕНИЯ_ДОКУМЕНТОВ.ИдентификаторСообщения,
	|	ВТ_СООБЩЕНИЯ_ДОКУМЕНТОВ.Дата,
	|	ВТ_СООБЩЕНИЯ_ДОКУМЕНТОВ.МобильноеПриложение,
	|	ВТ_СООБЩЕНИЯ_ДОКУМЕНТОВ.ВидСообщения,
	|	ВТ_СООБЩЕНИЯ_ДОКУМЕНТОВ.Содержимое,
	|	ВТ_СООБЩЕНИЯ_ДОКУМЕНТОВ.ДанныеСообщения,
	|	ПодключенныеМПЭПД.Идентификатор КАК ИдентификаторЗаписиМП,
	|	ПодключенныеМПЭПД.Наименование КАК НаименованиеМП
	|ИЗ
	|	ВТ_СООБЩЕНИЯ_ДОКУМЕНТОВ КАК ВТ_СООБЩЕНИЯ_ДОКУМЕНТОВ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодключенныеМПЭПД КАК ПодключенныеМПЭПД
	|		ПО ВТ_СООБЩЕНИЯ_ДОКУМЕНТОВ.МобильноеПриложение = ПодключенныеМПЭПД.ИдентификаторМП
	|		И ВТ_СООБЩЕНИЯ_ДОКУМЕНТОВ.ИдентификаторЭДО = ПодключенныеМПЭПД.ИдентификаторЭДО
	|		И ПодключенныеМПЭПД.Удален = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_СООБЩЕНИЯ_ДОКУМЕНТОВ.Дата";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			ТекущаяЗаписьРеестра = РегистрыСведений.РеестрЭПД.СоздатьМенеджерЗаписи();
			ТекущаяЗаписьРеестра.Ссылка = Выборка.Документ;
			ТекущаяЗаписьРеестра.Прочитать();
			Если ТекущаяЗаписьРеестра.Выбран() Тогда
				Если ЗначениеЗаполнено(Выборка.ДанныеСообщения) Тогда
					ДанныеСообщения = СтруктураИзJson(Выборка.ДанныеСообщения);
					Принято = Неопределено;
					Тип = Неопределено;
					ДанныеСообщения.Свойство("Принято", Принято);
					ДанныеСообщения.Свойство("Type", Тип);
					Если Тип <> Неопределено Тогда
						ТекущаяЗаписьРеестра.ТекущийШагМП = Тип + ?(Принято = Ложь, "_reject", "");	
					КонецЕсли;		
					ТекущаяЗаписьРеестра.ОжидаемПросмотрМП = ОжидаемПросмотрМП(ТекущаяЗаписьРеестра, ДанныеСообщения);
				КонецЕсли;
				Если Выборка.ВидСообщения = Перечисления.ТипыВзаимодействияМПЭПД.ПривязкаВодителя Тогда
					ТекущаяЗаписьРеестра.МобильноеПриложение = Выборка.МобильноеПриложение;
				ИначеЕсли Выборка.ВидСообщения = Перечисления.ТипыВзаимодействияМПЭПД.ОтвязкаВодителя Тогда
					ТекущаяЗаписьРеестра.МобильноеПриложение = Неопределено;
				КонецЕсли;
				ТекущаяЗаписьРеестра.ДатаСобытияМП = Выборка.Дата;
				ТекущаяЗаписьРеестра.НаименованиеМП = Выборка.НаименованиеМП;
				ТекущаяЗаписьРеестра.ИдентификаторЗаписиМП = Выборка.ИдентификаторЗаписиМП;
				ТекущаяЗаписьРеестра.Записать();
				
				ТекущаяЗаписьКэша = РегистрыСведений.КэшВзаимодействияМПЭПД.СоздатьМенеджерЗаписи();
				ТекущаяЗаписьКэша.Идентификатор = Выборка.ИдентификаторСообщения;
				ТекущаяЗаписьКэша.Прочитать();
				Если ТекущаяЗаписьКэша.Выбран() Тогда
					ТекущаяЗаписьКэша.ДокументЭПД = Выборка.Документ;	
					ТекущаяЗаписьКэша.Записать();
				КонецЕсли;
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
		КонецПопытки;
	КонецЦикла; 

КонецПроцедуры

Функция ПредставлениеУчетнойЗаписиЭДО(ИдентификаторЭДО = "", Организация = Неопределено) Экспорт
	
	Результат = НСтр("ru = 'Неизвестно'");
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Результат = СокрЛП(Организация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторЭДО) И ЗначениеЗаполнено(Организация) Тогда
		Результат = Результат + " (" + ИдентификаторЭДО  + ")";
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторЭДО) Тогда
		Результат = ИдентификаторЭДО;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СписокПодключенныхУчетныхЗаписейЭДО(ДанныеПоОрганизациям = Ложь, Отборы = Неопределено) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СертификатыУчетныхЗаписейЭДО.ИдентификаторЭДО КАК ИдентификаторЭДО,
	|	МАКСИМУМ(СертификатыУчетныхЗаписейЭДО.ДействителенДо) КАК СертификатДействителенДо
	|ПОМЕСТИТЬ ДатыСертификатов
	|ИЗ
	|	РегистрСведений.СертификатыУчетныхЗаписейЭДО КАК СертификатыУчетныхЗаписейЭДО
	|
	|СГРУППИРОВАТЬ ПО
	|	СертификатыУчетныхЗаписейЭДО.ИдентификаторЭДО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПодключенныеМПЭПД.ИдентификаторЭДО КАК ИдентификаторЭДО,
	|	СУММА(1) КАК ВсегоМП
	|ПОМЕСТИТЬ ВсеМП
	|ИЗ
	|	РегистрСведений.ПодключенныеМПЭПД КАК ПодключенныеМПЭПД
	|ГДЕ
	|	ПодключенныеМПЭПД.ИдентификаторМП <> """"
	|	И ПодключенныеМПЭПД.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостояниеМПЭПД.Приостановлен), ЗНАЧЕНИЕ(Перечисление.СостояниеМПЭПД.ОжидаетсяПодключение), ЗНАЧЕНИЕ(Перечисление.СостояниеМПЭПД.Подключен), ЗНАЧЕНИЕ(Перечисление.СостояниеМПЭПД.ПодключениеНеВыполнено))
	|	И ПодключенныеМПЭПД.Удален = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	ПодключенныеМПЭПД.ИдентификаторЭДО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УчетныеЗаписиЭДО.ИдентификаторЭДО КАК ИдентификаторЭДО,
	|	УчетныеЗаписиЭДО.Организация КАК Организация,
	|	УчетныеЗаписиЭДО.СпособОбменаЭД КАК СпособОбменаЭД
	|ПОМЕСТИТЬ ВсеУчетныеЗаписиЭДО
	|ИЗ
	|	РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
	|ГДЕ
	|	УчетныеЗаписиЭДО.СпособОбменаЭД = &СпособОбменаЭД
	|;
	|
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КэшВзаимодействияМПЭПД.ИдентификаторЭДО КАК ИдентификаторЭДО,
	|	1 КАК ВсегоУведомлений
	|ПОМЕСТИТЬ ВсеУведомления
	|ИЗ
	|	РегистрСведений.КэшВзаимодействияМПЭПД КАК КэшВзаимодействияМПЭПД
	|ГДЕ
	|	КэшВзаимодействияМПЭПД.Прочитано = ЛОЖЬ
	|	И КэшВзаимодействияМПЭПД.Исходящее = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВсеУчетныеЗаписиЭДО.Организация КАК Организация,
	|	ВсеУчетныеЗаписиЭДО.ИдентификаторЭДО КАК ИдентификаторЭДО,
	|	МАКСИМУМ(ВсеУчетныеЗаписиЭДО.ИдентификаторЭДО) КАК УчетнаяЗаписьЭДО,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ДатыСертификатов.СертификатДействителенДо ЕСТЬ NULL
	|					ИЛИ РАЗНОСТЬДАТ(&ТекущаяДата, ДатыСертификатов.СертификатДействителенДо, ДЕНЬ) > 30
	|				ТОГДА 0
	|			КОГДА РАЗНОСТЬДАТ(&ТекущаяДата, ДатыСертификатов.СертификатДействителенДо, МИНУТА) <= 0
	|				ТОГДА 2
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СтатусСертификата,
	|	СУММА(ЕСТЬNULL(ПодключенныеМПЭПД.ВсегоМП, 0)) КАК ВсегоМП,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ НастройкиВзаимодействияМПЭПД.Организация ЕСТЬ NULL
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Настроено,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НЕ НастройкиВзаимодействияМПЭПД.Организация ЕСТЬ NULL
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ПодключеноЭДО,
	|	СУММА(1) КАК Всего,
	|	СУММА(ЕСТЬNULL(ВсеУведомления.ВсегоУведомлений, 0)) КАК ВсегоУведомлений,
	|	МАКСИМУМ(НастройкиВзаимодействияМПЭПД.ТочкаОпросаУведомлений) КАК ТочкаОпросаУведомлений,
	|	МАКСИМУМ(НастройкиВзаимодействияМПЭПД.ТочкаОпросаСобытий) КАК ТочкаОпросаСобытий,
	|	МАКСИМУМ(НастройкиВзаимодействияМПЭПД.ДатаОпросаДокументов) КАК ДатаОпросаДокументов
	|{ВЫБРАТЬ
	|	ИдентификаторЭДО,
	|	Организация,
	|	УчетнаяЗаписьЭДО,
	|	СтатусСертификата,
	|	ВсегоМП,
	|	Настроено,
	|	ПодключеноЭДО,
	|	Всего,
	|	ТочкаОпросаУведомлений,
	|	ТочкаОпросаСобытий,
	|	ДатаОпросаДокументов}
	|ИЗ
	|	ВсеУчетныеЗаписиЭДО КАК ВсеУчетныеЗаписиЭДО
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиВзаимодействияМПЭПД КАК НастройкиВзаимодействияМПЭПД
	|		ПО ВсеУчетныеЗаписиЭДО.ИдентификаторЭДО = НастройкиВзаимодействияМПЭПД.ИдентификаторЭДО
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВсеМП КАК ПодключенныеМПЭПД
	|		ПО ВсеУчетныеЗаписиЭДО.ИдентификаторЭДО = ПодключенныеМПЭПД.ИдентификаторЭДО
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДатыСертификатов КАК ДатыСертификатов
	|		ПО ВсеУчетныеЗаписиЭДО.ИдентификаторЭДО = ДатыСертификатов.ИдентификаторЭДО
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВсеУведомления КАК ВсеУведомления
	|		ПО ВсеУчетныеЗаписиЭДО.ИдентификаторЭДО = ВсеУведомления.ИдентификаторЭДО
	|
	|СГРУППИРОВАТЬ ПО
	|	ВсеУчетныеЗаписиЭДО.ИдентификаторЭДО,
	|	ВсеУчетныеЗаписиЭДО.Организация";
	
	НовыйЗапрос = Новый ПостроительЗапроса;
	НовыйЗапрос.Текст = ТекстЗапроса;
	НовыйЗапрос.ЗаполнитьНастройки();
	
	Если Отборы <> Неопределено Тогда
		Счетчик = 1;
		Для Каждого СтрокаКлюча Из Отборы Цикл
			НовыйОтбор = НовыйЗапрос.Отбор.Добавить(СтрокаКлюча.Ключ, "П" + Счетчик);
			НовыйОтбор.ВидСравнения = ВидСравнения.Равно;
			НовыйОтбор.Значение = СтрокаКлюча.Значение;
			НовыйОтбор.Использование = Истина;
		КонецЦикла;
	КонецЕсли;
	
	Если ДанныеПоОрганизациям Тогда
		НовыйЗапрос.ВыбранныеПоля.Удалить(НовыйЗапрос.ВыбранныеПоля[0]);
	КонецЕсли;
	
	Запрос = НовыйЗапрос.ПолучитьЗапрос();
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("СпособОбменаЭД", Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Функция СписокПодключенныхМП(Отборы = Неопределено, ВключаяНеактивные = Ложь, ВернутьМассив = Ложь) Экспорт
	
	МетаданныеПеречисления = Перечисления.СостояниеМПЭПД.ПустаяСсылка().Метаданные();
	
	ПервоеЗначение = Истина;
	МассивЧастейСостояний = Новый Массив;
	Для Каждого ЗначениеПеречисления Из МетаданныеПеречисления.ЗначенияПеречисления Цикл
		СостояниеТекстом = ЗначениеПеречисления.Имя;
		Состояние = Перечисления.СостояниеМПЭПД[СостояниеТекстом];
		ИндексКартинки = Перечисления.СостояниеМПЭПД.ПолучитьИндексКартинки(Состояние);
		Если ПервоеЗначение Тогда
			Шаблон = "ВЫБРАТЬ
			|ЗНАЧЕНИЕ(Перечисление.СостояниеМПЭПД.%1) КАК Состояние,
			|%2 КАК ИндексКартинки
			|ПОМЕСТИТЬ ВТ_ИндексыКартинокСостояний";
			ПервоеЗначение = Ложь;
		Иначе
			Шаблон = "ВЫБРАТЬ
			|ЗНАЧЕНИЕ(Перечисление.СостояниеМПЭПД.%1) КАК Состояние,
			|%2 КАК ИндексКартинки";
		КонецЕсли;
		ТекстВставки = СтрШаблон(Шаблон, СостояниеТекстом, ИндексКартинки);
		МассивЧастейСостояний.Добавить(ТекстВставки);
	КонецЦикла;
	
	ПредставленияРолейМП = СервисВзаимодействияМПЭПДКлиентСервер.ПредставленияРолейМП();
	МассивЧастейПредставленийРолей = Новый Массив;
	ПервоеЗначение = Истина;
	Для Каждого КиЗ Из ПредставленияРолейМП Цикл
		Если ПервоеЗначение Тогда
			ШаблонПредставленияРолей = "ВЫБРАТЬ
			|%1 КАК ЧисловоеЗначение,
			|""%2"" КАК Представление
			|ПОМЕСТИТЬ ВТ_ПредставленияРолей";
			ПервоеЗначение = Ложь;
		Иначе
			ШаблонПредставленияРолей = "ВЫБРАТЬ
			|%1 КАК ЧисловоеЗначение,
			|""%2"" КАК Представление";
		КонецЕсли;
		ТекстВставки = СтрШаблон(ШаблонПредставленияРолей, КиЗ.Ключ, КиЗ.Значение);
		МассивЧастейПредставленийРолей.Добавить(ТекстВставки);	
	КонецЦикла;
	
	СтрокаОбъединения = "
	|ОБЪЕДИНИТЬ ВСЕ
	|";
	ТекстНачалаЗапроса = СтрСоединить(МассивЧастейСостояний, СтрокаОбъединения);
	
	ТекстНачалаЗапроса = ТекстНачалаЗапроса +
	";
	|
	|////////////////////////////////////////////////////////////////////////////////
	|" + СтрСоединить(МассивЧастейПредставленийРолей, СтрокаОбъединения);
	
	ТекстЗапроса = ТекстНачалаЗапроса +
	";
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НастройкиВзаимодействияМПЭПД.ИдентификаторЭДО КАК ИдентификаторЭДО,
	|	НастройкиВзаимодействияМПЭПД.Организация КАК Организация
	|ПОМЕСТИТЬ ВсеУчетныеЗаписи
	|ИЗ
	|	РегистрСведений.НастройкиВзаимодействияМПЭПД КАК НастройкиВзаимодействияМПЭПД
	|{ГДЕ
	|	НастройкиВзаимодействияМПЭПД.Организация,
	|	НастройкиВзаимодействияМПЭПД.ИдентификаторЭДО}
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПодключенныеМПЭПД.ИдентификаторЭДО КАК ИдентификаторЭДО,
	|	ПодключенныеМПЭПД.ИдентификаторМП КАК ИдентификаторМП,
	|	ПодключенныеМПЭПД.Идентификатор КАК Идентификатор,
	|	ПодключенныеМПЭПД.Состояние КАК Состояние,
	|	ЕСТЬNULL(ВТ_ИндексыКартинокСостояний.ИндексКартинки, 1) КАК ИндексКартинки,
	|	ПодключенныеМПЭПД.Фамилия КАК Фамилия,
	|	ПодключенныеМПЭПД.Имя КАК Имя,
	|	ПодключенныеМПЭПД.Отчество КАК Отчество,
	|	ПодключенныеМПЭПД.ИНН КАК ИНН,
	|	ПодключенныеМПЭПД.СНИЛС КАК СНИЛС,
	|	ПодключенныеМПЭПД.Наименование КАК Наименование,
	|	ПодключенныеМПЭПД.ВидПодписи КАК ВидПодписи,
	|	ПодключенныеМПЭПД.Телефоны КАК Телефоны,
	|	ПодключенныеМПЭПД.МЧД КАК МЧД,
	|	ПодключенныеМПЭПД.Фото КАК Фото,
	|	ПодключенныеМПЭПД.Роль КАК Роль,
	|	ПодключенныеМПЭПД.ВидыДокументов КАК ВидыДокументов,
	|	ВТ_ПредставленияРолей.Представление КАК ПредставлениеРоли,
	|	ВсеУчетныеЗаписи.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.ПодключенныеМПЭПД КАК ПодключенныеМПЭПД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеУчетныеЗаписи КАК ВсеУчетныеЗаписи
	|		ПО ПодключенныеМПЭПД.ИдентификаторЭДО = ВсеУчетныеЗаписи.ИдентификаторЭДО
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИндексыКартинокСостояний КАК ВТ_ИндексыКартинокСостояний
	|		ПО ПодключенныеМПЭПД.Состояние = ВТ_ИндексыКартинокСостояний.Состояние
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПредставленияРолей КАК ВТ_ПредставленияРолей
	|		ПО ПодключенныеМПЭПД.Роль = ВТ_ПредставленияРолей.ЧисловоеЗначение
	|{ГДЕ
	|	ПодключенныеМПЭПД.ИНН,
	|	ПодключенныеМПЭПД.СНИЛС,
	|	ПодключенныеМПЭПД.Телефоны,
	|	ПодключенныеМПЭПД.ИдентификаторМП}";
	
	НовыйЗапрос = Новый ПостроительЗапроса;
	НовыйЗапрос.Текст = ТекстЗапроса;
	НовыйЗапрос.ЗаполнитьНастройки();
	
	Счетчик = 1;
	Если Отборы <> Неопределено Тогда
		Для Каждого КлючЗначение Из Отборы Цикл
			Если ТипЗнч(КлючЗначение.Значение) = Тип("СписокЗначений") Тогда
				НовыйОтбор = НовыйЗапрос.Отбор.Добавить(КлючЗначение.Ключ, "П" + Счетчик);
				НовыйОтбор.ВидСравнения = ВидСравнения.ВСписке;
				НовыйОтбор.Значение = КлючЗначение.Значение;
				НовыйОтбор.Использование = Истина;
			Иначе
				НовыйОтбор = НовыйЗапрос.Отбор.Добавить(КлючЗначение.Ключ, "П" + Счетчик);
				НовыйОтбор.ВидСравнения = ВидСравнения.Равно;
				НовыйОтбор.Значение = КлючЗначение.Значение;
				НовыйОтбор.Использование = Истина;
			КонецЕсли;
			Счетчик = Счетчик + 1;
		КонецЦикла;
	КонецЕсли;

	Если Не ВключаяНеактивные Тогда
		СписокСостояний = Новый СписокЗначений;
		СписокСостояний.Добавить(Перечисления.СостояниеМПЭПД.Недоступен);
		СписокСостояний.Добавить(Перечисления.СостояниеМПЭПД.ОжидаетсяПодключение);
		СписокСостояний.Добавить(Перечисления.СостояниеМПЭПД.Подключен);
		СписокСостояний.Добавить(Перечисления.СостояниеМПЭПД.ПодключениеНеВыполнено);
		СписокСостояний.Добавить(Перечисления.СостояниеМПЭПД.Черновик);
		НовыйОтбор = НовыйЗапрос.Отбор.Добавить("Состояние", "П" + Счетчик);
		НовыйОтбор.ВидСравнения = ВидСравнения.ВСписке;
		НовыйОтбор.Значение = СписокСостояний;
		НовыйОтбор.Использование = Истина;
	КонецЕсли;
	
	Запрос = НовыйЗапрос.ПолучитьЗапрос();
	РезультатТаблица = Запрос.Выполнить().Выгрузить();
	
	Если ВернутьМассив = Истина Тогда
		Результат = ОбменСГИСЭПДКлиентСервер.ТаблицаВМассивСтруктур(РезультатТаблица);
	Иначе
		Результат = РезультатТаблица;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция УчетныеЗаписиОрганизации(Организация) Экспорт
	
	ОписаниеОтбора = УчетныеЗаписиЭДО.НовыйОтборУчетныхЗаписей();
	ОписаниеОтбора.Организация = "&Организация";
	ОписаниеОтбора.СпособОбмена = "&СпособОбмена"; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	УчетныеЗаписиЭДО.ИдентификаторЭДО КАК ИдентификаторЭДО
		|ИЗ
		|	УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО";	
	Запросы = Новый Массив;
	Запросы.Добавить(УчетныеЗаписиЭДО.ЗапросУчетныхЗаписей("УчетныеЗаписиЭДО", ОписаниеОтбора));
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	ИтоговыйЗапрос.УстановитьПараметр("Организация", Организация);
	ИтоговыйЗапрос.УстановитьПараметр("СпособОбмена", Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = ИтоговыйЗапрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	Выборка = РезультатЗапроса.Выбрать();
	
	УчетныеЗаписи = Новый Массив;
	Пока Выборка.Следующий() Цикл
		УчетныеЗаписи.Добавить(Выборка.ИдентификаторЭДО);
	КонецЦикла;
	
	Возврат УчетныеЗаписи;
	
КонецФункции

Функция ОрганизацияПоИдентификаторуЭДО(ИдентификаторЭДО) Экспорт
	
	ОписаниеОтбора = УчетныеЗаписиЭДО.НовыйОтборУчетныхЗаписей();
	ОписаниеОтбора.УчетныеЗаписи = "&ИдентификаторЭДО";
	ОписаниеОтбора.СпособОбмена = "&СпособОбмена"; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	УчетныеЗаписиЭДО.Организация КАК Организация
	|ИЗ
	|	УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО";	
	Запросы = Новый Массив;
	Запросы.Добавить(УчетныеЗаписиЭДО.ЗапросУчетныхЗаписей("УчетныеЗаписиЭДО", ОписаниеОтбора));
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	ИтоговыйЗапрос.УстановитьПараметр("УчетныеЗаписи", ИдентификаторЭДО);
	ИтоговыйЗапрос.УстановитьПараметр("СпособОбмена", Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО);
	
	РезультатЗапроса = ИтоговыйЗапрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Организация;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура УдалитьЗаписьПодключенныхМПЭПД(ИдентификаторЭДО, Идентификатор) Экспорт
	
	ПараметрыЗаписи = РегистрыСведений.ПодключенныеМПЭПД.ПараметрыЗаписиРегистра(ИдентификаторЭДО, Идентификатор);
	РегистрыСведений.ПодключенныеМПЭПД.УдалитьЗапись(ПараметрыЗаписи);
	
КонецПроцедуры

Процедура ОтправитьСообщениеОПереадресовке(Документ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭлектронныйДокументВходящийЭДО.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
	|	ЭлектронныйДокументВходящийЭДО.ИдентификаторДокументооборота КАК ИдентификаторДокументооборота,
	|	ВЫРАЗИТЬ(ОбъектыУчетаДокументовЭДО.ОбъектУчета КАК Документ.ЭлектроннаяТранспортнаяНакладная).ТитулГрузоотправителяТранспортнаяНакладнаяНомер КАК Номер,
	|	ВЫРАЗИТЬ(ОбъектыУчетаДокументовЭДО.ОбъектУчета КАК Документ.ЭлектроннаяТранспортнаяНакладная).ТитулГрузоотправителяТранспортнаяНакладнаяДата КАК Дата,
	|	ВЫРАЗИТЬ(ОбъектыУчетаДокументовЭДО.ОбъектУчета КАК Документ.ЭлектроннаяТранспортнаяНакладная).ТитулПереадресовкаИдентификаторФайла КАК ИдентификаторФайла,
	|	ВЫРАЗИТЬ(ОбъектыУчетаДокументовЭДО.ОбъектУчета КАК Документ.ЭлектроннаяТранспортнаяНакладная).ДопТитулПереадресовкаИдентификаторФайла КАК ДопТитулИдентификаторФайла,
	|	РеестрЭПД.МобильноеПриложение КАК ИдентификаторМП
	|ИЗ
	|	РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
	|		ПО ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент = ЭлектронныйДокументВходящийЭДО.Ссылка
	|			И (ОбъектыУчетаДокументовЭДО.ОбъектУчета = &Документ)
	|			И (ОбъектыУчетаДокументовЭДО.Актуальный = ИСТИНА)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиВзаимодействияМПЭПД КАК НастройкиВзаимодействияМПЭПД
	|		ПО (ЭлектронныйДокументВходящийЭДО.ИдентификаторОрганизации = НастройкиВзаимодействияМПЭПД.ИдентификаторЭДО)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрЭПД КАК РеестрЭПД
	|		ПО ОбъектыУчетаДокументовЭДО.ОбъектУчета = РеестрЭПД.Ссылка";
	Запрос.УстановитьПараметр("Документ", Документ);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторДокументооборота = Выборка.ИдентификаторДокументооборота;
	ИдентификаторЭДО = Выборка.ИдентификаторОрганизации;
	Номер = Выборка.Номер;
	Дата = Формат(Выборка.Дата, "ДФ=dd.MM.yyyy");
	ИдентификаторМП = Выборка.ИдентификаторМП;
	
	Шаблон = НСтр("ru='Переадресовка сформирована по документу %1 от %2'");
	Содержимое = СтрШаблон(Шаблон, Номер, Дата);
	
	Если ЗначениеЗаполнено(Выборка.ДопТитулИдентификаторФайла) Тогда
		ИдентификаторФайла = Выборка.ДопТитулИдентификаторФайла;
	Иначе
		ИдентификаторФайла = Выборка.ИдентификаторФайла;
	КонецЕсли;
	
	ДанныеСообщения = Новый Структура;
	ДанныеСообщения.Вставить("FileId", ИдентификаторФайла);
	ДанныеСообщения.Вставить("Type", ТипСообщенияДляМППереадресовка());
	
	ДанныеСообщенияJSON = СтруктураВJSON(ДанныеСообщения);
	
	ПараметрыОперации = Новый Структура;
	ПараметрыОперации.Вставить("ИдентификаторДокумента", ИдентификаторДокументооборота);
	ПараметрыОперации.Вставить("Содержимое", Содержимое);
	ПараметрыОперации.Вставить("ДанныеСообщения", ДанныеСообщенияJSON);
	ПараметрыОперации.Вставить("ИдентификаторМП", ИдентификаторМП);
	
	СервисОтправитьУведомления(ИдентификаторЭДО, ПараметрыОперации);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ОтправитьСообщениеОЗаменеТС(Документ) Экспорт
	
	МассивТитулов = Новый Массив;
	МассивТитулов.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул8);
	МассивТитулов.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ДопТитул8);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗначенияРеквизитовДокументовЭПД.ЗначениеРеквизитаСтрока КАК СодержаниеОперации
	|ИЗ
	|	РегистрСведений.ЗначенияРеквизитовДокументовЭПД КАК ЗначенияРеквизитовДокументовЭПД
	|ГДЕ
	|	ЗначенияРеквизитовДокументовЭПД.Документ = &Документ
	|	И ЗначенияРеквизитовДокументовЭПД.Титул В(&МассивТитулов)
	|	И (ЗначенияРеквизитовДокументовЭПД.ИмяРеквизита = ""ТитулПеревозчикаЗаменыСодержаниеОперации""
	|			ИЛИ ЗначенияРеквизитовДокументовЭПД.ИмяРеквизита = ""ДопТитулПеревозчикаЗаменыСодержаниеОперации"")
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗначенияРеквизитовДокументовЭПД.НомерВерсии УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭлектронныйДокументВходящийЭДО.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
	|	ЭлектронныйДокументВходящийЭДО.ИдентификаторДокументооборота КАК ИдентификаторДокументооборота,
	|	ВЫРАЗИТЬ(ОбъектыУчетаДокументовЭДО.ОбъектУчета КАК Документ.ЭлектроннаяТранспортнаяНакладная).ТитулГрузоотправителяТранспортнаяНакладнаяНомер КАК Номер,
	|	ВЫРАЗИТЬ(ОбъектыУчетаДокументовЭДО.ОбъектУчета КАК Документ.ЭлектроннаяТранспортнаяНакладная).ТитулГрузоотправителяТранспортнаяНакладнаяДата КАК Дата,
	|	ВЫРАЗИТЬ(ОбъектыУчетаДокументовЭДО.ОбъектУчета КАК Документ.ЭлектроннаяТранспортнаяНакладная).ТитулПеревозчикаЗаменыИдентификаторФайла КАК ИдентификаторФайла,
	|	ВЫРАЗИТЬ(ОбъектыУчетаДокументовЭДО.ОбъектУчета КАК Документ.ЭлектроннаяТранспортнаяНакладная).ДопТитулПеревозчикаЗаменыИдентификаторФайла КАК ДопТитулИдентификаторФайла,
	|	РеестрЭПД.МобильноеПриложение КАК ИдентификаторМП
	|ИЗ
	|	РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
	|		ПО ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент = ЭлектронныйДокументВходящийЭДО.Ссылка
	|			И (ОбъектыУчетаДокументовЭДО.ОбъектУчета = &Документ)
	|			И (ОбъектыУчетаДокументовЭДО.Актуальный = ИСТИНА)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиВзаимодействияМПЭПД КАК НастройкиВзаимодействияМПЭПД
	|		ПО (ЭлектронныйДокументВходящийЭДО.ИдентификаторОрганизации = НастройкиВзаимодействияМПЭПД.ИдентификаторЭДО)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрЭПД КАК РеестрЭПД
	|		ПО ОбъектыУчетаДокументовЭДО.ОбъектУчета = РеестрЭПД.Ссылка";
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("МассивТитулов", МассивТитулов);
	
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	Выборка = РезультатыЗапросов[1].Выбрать();
	ВыборкаСодержанияОперации = РезультатыЗапросов[0].Выбрать();
	
	Если Не Выборка.Следующий()
		Или Не ВыборкаСодержанияОперации.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	// Если в содержании операции есть замена водителя, значит в моб. устройстве документооборот завершается,
	// в этом случае отправлять дополнительное сообщение не нужно
	СодержаниеОперации = ВыборкаСодержанияОперации.СодержаниеОперации;
	Если СтрНайти(СодержаниеОперации, "Замена водителя") <> 0
		Или СтрНайти(СодержаниеОперации, "Замена водителей") <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторДокументооборота = Выборка.ИдентификаторДокументооборота;
	ИдентификаторЭДО = Выборка.ИдентификаторОрганизации;
	Номер = Выборка.Номер;
	Дата = Формат(Выборка.Дата, "ДФ=dd.MM.yyyy");
	ИдентификаторМП = Выборка.ИдентификаторМП;
	
	Шаблон = НСтр("ru='Замена ТС сформирована по документу %1 от %2'");
	Содержимое = СтрШаблон(Шаблон, Номер, Дата);
	
	Если ЗначениеЗаполнено(Выборка.ДопТитулИдентификаторФайла) Тогда
		ИдентификаторФайла = Выборка.ДопТитулИдентификаторФайла;
	Иначе
		ИдентификаторФайла = Выборка.ИдентификаторФайла;
	КонецЕсли;
	
	ДанныеСообщения = Новый Структура;
	ДанныеСообщения.Вставить("FileId", ИдентификаторФайла);
	ДанныеСообщения.Вставить("Type", ТипСообщенияДляМПЗаменаТС());
	
	ДанныеСообщенияJSON = СтруктураВJSON(ДанныеСообщения);
	
	ПараметрыОперации = Новый Структура;
	ПараметрыОперации.Вставить("ИдентификаторДокумента", ИдентификаторДокументооборота);
	ПараметрыОперации.Вставить("Содержимое", Содержимое);
	ПараметрыОперации.Вставить("ДанныеСообщения", ДанныеСообщенияJSON);
	ПараметрыОперации.Вставить("ИдентификаторМП", ИдентификаторМП);
	
	СервисОтправитьУведомления(ИдентификаторЭДО, ПараметрыОперации);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура СервисОтправитьНастройкиДополнительныхПолей(МассивНастроек) Экспорт
	
	МассивМП = СервисВзаимодействияМПЭПДВызовСервера.СписокПодключенныхМП(, , Истина);
	
	СоответствиеОтправки = Новый Соответствие;
	Для Каждого СтруктураМП Из МассивМП Цикл
		ПараметрыПоИдентификаторуЭДО = СоответствиеОтправки.Получить(СтруктураМП.ИдентификаторЭДО); 
		Если ПараметрыПоИдентификаторуЭДО = Неопределено Тогда
			ПараметрыПоИдентификаторуЭДО = Новый Соответствие;
			СоответствиеОтправки.Вставить(СтруктураМП.ИдентификаторЭДО, ПараметрыПоИдентификаторуЭДО);
		КонецЕсли;
		ПараметрыОтправки = ПараметрыПоИдентификаторуЭДО.Получить(СтруктураМП.ИдентификаторМП);
		Если ПараметрыОтправки = Неопределено Тогда
			ПараметрыОтправки = Новый Структура;
			ПараметрыПоИдентификаторуЭДО.Вставить(СтруктураМП.ИдентификаторМП, ПараметрыОтправки);
		КонецЕсли;
		
		ПараметрыОтправки.Вставить("ВидСообщения", Перечисления.ТипыВзаимодействияМПЭПД.НастройкиДополнительныхПолей);
		ПараметрыОтправки.Вставить("ИдентификаторМП", СтруктураМП.ИдентификаторМП);
		
		Для Каждого СтруктураНастройки Из МассивНастроек Цикл
			СодержимоеСтруктура = Новый Структура;
			Если ЗначениеЗаполнено(СтруктураНастройки.Контрагент) Тогда
				ИНН = СтруктураНастройки.Контрагент.ИНН;
			Иначе
				ИНН = "";
			КонецЕсли;
			СодержимоеСтруктура.Вставить("INN", ИНН);
			СодержимоеСтруктура.Вставить("DocType", СервисВзаимодействияМПЭПДКлиентСервер.ТипДокументаМП(СтруктураНастройки.ТипДокумента));
			СодержимоеСтруктура.Вставить("Id", СтруктураНастройки.ИдентификаторНастройки);
			СодержимоеСтруктура.Вставить("DataGroup", СтруктураНастройки.ГруппаДанных);
			СодержимоеСтруктура.Вставить("DataId", СтруктураНастройки.ИдентификаторИнформации);
			СодержимоеСтруктура.Вставить("DataType", СтруктураНастройки.ТипДанных);
			СодержимоеСтруктура.Вставить("Qualifiers", СтруктураНастройки.Квалификаторы);
			СодержимоеСтруктура.Вставить("Enums", СтруктураНастройки.Перечисления);
			СодержимоеСтруктура.Вставить("Required", СтруктураНастройки.Обязательный);
			СодержимоеСтруктура.Вставить("Caption", СтруктураНастройки.Заголовок);
		КонецЦикла;
		
		ПараметрыОтправки.Вставить("Содержимое", СтруктураВJSON(СодержимоеСтруктура));
	КонецЦикла;
	
	Для Каждого ПараметрыПоИдентификаторуЭДО Из СоответствиеОтправки Цикл
		Для Каждого ПараметрыОтправки Из ПараметрыПоИдентификаторуЭДО.Значение Цикл
			СервисОтправитьУведомления(ПараметрыПоИдентификаторуЭДО.Ключ, ПараметрыОтправки.Значение);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ОжидатьВыполнениеФоновойФункции(ИмяФункции, ИдентификаторФормы, ПараметрыФункции = Неопределено) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(ИдентификаторФормы);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания =
		НСтр("ru = 'Сервис взаимодействия МП ЭПД.'") + ИмяФункции;
		
	Если ПараметрыФункции = Неопределено Тогда	
		Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, ИмяФункции);
	ИначеЕсли ПараметрыФункции.Количество() = 1 Тогда
		Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, ИмяФункции,
			ПараметрыФункции[0]);
	ИначеЕсли ПараметрыФункции.Количество() = 2 Тогда
		Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, ИмяФункции,
			ПараметрыФункции[0], ПараметрыФункции[1]);
	ИначеЕсли ПараметрыФункции.Количество() = 3 Тогда
		Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, ИмяФункции,
			ПараметрыФункции[0], ПараметрыФункции[1], ПараметрыФункции[2]);
	ИначеЕсли ПараметрыФункции.Количество() = 4 Тогда
		Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, ИмяФункции,
			ПараметрыФункции[0], ПараметрыФункции[1], ПараметрыФункции[2], ПараметрыФункции[3]);
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьЗначенияОбъекта(ТекущийОбъект, СвойстваОбъекта) Экспорт

	ТолькоИзмененные = Новый Структура;
	Для Каждого СтрокаСвойства Из СвойстваОбъекта Цикл
		Если СтрокаСвойства.Значение <> Неопределено Тогда
			ТолькоИзмененные.Вставить(СтрокаСвойства.Ключ, СтрокаСвойства.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(ТекущийОбъект, ТолькоИзмененные);
	
КонецПроцедуры

Функция РеквизитФормы(ТекущаяФорма, ИмяРеквизита) Экспорт
	
	Результат = Неопределено;
	
	ВсеРеквизиты = ТекущаяФорма.ПолучитьРеквизиты();
	Для Каждого СтрокаМассива Из ВсеРеквизиты Цикл
		Если СтрокаМассива.Имя = ИмяРеквизита Тогда
			Результат = СтрокаМассива;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДанныеФизическогоЛица(СсылкаСправочника) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИНН", "");
	Результат.Вставить("СтраховойНомерПФР", "");
	Результат.Вставить("Фамилия", "");
	Результат.Вставить("Имя", "");
	Результат.Вставить("Отчество", "");
	
	ОбъектВыбора = СсылкаСправочника.ПолучитьОбъект();
	ЗаполнитьЗначенияСвойств(Результат, ОбъектВыбора);
	Результат.Вставить("Телефон", ЗначениеКонтактнойИнформации(СсылкаСправочника, "Справочник.ВидыКонтактнойИнформации.ТелефонРабочийФизлица"));

	Возврат Результат;
	
КонецФункции

Функция ВремяАктивностиКодаРегистрацииВСекундах() Экспорт
	
	Возврат 1800;
	
КонецФункции

Функция ОрганизацияПоУмолчанию() Экспорт
	
	Если Не Метаданные.ОпределяемыеТипы.Организация.Тип.СодержитТип(Тип("Строка")) Тогда
		ПолноеИмя = Метаданные.НайтиПоТипу(Метаданные.ОпределяемыеТипы.Организация.Тип.Типы()[0]).ПолноеИмя();
		ИмяСправочникаОрганизации = "Справочники." + СтрРазделить(ПолноеИмя, ".")[1];
		МодульОрганизации = ОбщегоНазначения.ОбщийМодуль(ИмяСправочникаОрганизации);
		ОрганизацияПоУмолчанию = МодульОрганизации.ОрганизацияПоУмолчанию();
	Иначе
		ОрганизацияПоУмолчанию = Неопределено;
	КонецЕсли;
	
	Возврат ОрганизацияПоУмолчанию;
	
КонецФункции

Функция СсылкаНаИнструкцию() Экспорт
	
	Возврат "https://mobile.1c.ru/1c-epd/";
	
КонецФункции

Функция УчетнаяЗаписьПодключена(ИдентификаторЭДО) Экспорт

	Результат = Ложь;
	
	Если ЗначениеЗаполнено(ИдентификаторЭДО) Тогда
		ВсеЭДО = СписокПодключенныхУчетныхЗаписейЭДО();
		НашлиСтроки = ВсеЭДО.НайтиСтроки(Новый Структура("УчетнаяЗаписьЭДО, ПодключеноЭДО", ИдентификаторЭДО, Истина));
		Если НашлиСтроки.Количество() > 0 Тогда
			Результат = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НеобходимыеДанныеДляРегистрацииУчетнойЗаписи(ИдентификаторЭДО) Экспорт
	
	УчетнаяЗаписьПодключена = УчетнаяЗаписьПодключена(ИдентификаторЭДО);
	НужноВвестиДанныеИнтернетПоддержки = НужноВвестиДанныеИнтернетПоддержки();
	
	Структура = НоваяСтруктураНеобходимыхДанныхДляРегистрацииУчетнойЗаписи();
	
	Структура.УчетнаяЗаписьПодключена = УчетнаяЗаписьПодключена;
	Структура.НужноВвестиДанныеИнтернетПоддержки = НужноВвестиДанныеИнтернетПоддержки;
	
	Возврат Структура;
	
КонецФункции

Процедура ДобавитьКнопкуОтбораНовыхСообщений(Форма, ГруппаКнопокОтбор) Экспорт
	
	КомандаОтбор = Форма.Команды.Добавить("ОтборНовыеСообщения");
	КомандаОтбор.Действие = "Подключаемый_ОтборНовыеСообщения";
	КомандаОтбор.Заголовок = НСтр("ru='Новые сообщения'");

	КнопкаОтборНовыеСообщения = Форма.Элементы.Добавить("КнопкаОтборНовыеСообщения", Тип("КнопкаФормы"), ГруппаКнопокОтбор);
	КнопкаОтборНовыеСообщения.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	КнопкаОтборНовыеСообщения.Отображение = ОтображениеКнопки.КартинкаИТекст;
	КнопкаОтборНовыеСообщения.Картинка = СервисВзаимодействияМПЭПДКлиентСервер.КартинкаМобильноеУстройствоЭПД();
	КнопкаОтборНовыеСообщения.ИмяКоманды = "ОтборНовыеСообщения";

КонецПроцедуры

Функция РегламентноеЗаданиеПолученияСобытийМПЭПД() Экспорт
	
	Возврат Метаданные.РегламентныеЗадания.ПолучениеСобытийМПЭПД;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОжидаемПросмотрМП(ТекущаяЗаписьРеестра, ДанныеСообщения)
	
	Результат = Ложь;
	
	ТекущийШагМП = Неопределено;
	ДанныеСообщения.Свойство("Type", ТекущийШагМП);
	
	ФайлТекущегоШагаМП = Неопределено;
	ДанныеСообщения.Свойство("fileid", ФайлТекущегоШагаМП);
	
	СоответствиеШагов = ОбменСГИСЭПД.СоответствиеТитуловИШагов();
	СоответствиеТитулов = ПеревернутьСоответствие(СоответствиеШагов);
	
	ТекущийШаг = ТекущаяЗаписьРеестра.ТекущийШаг;
	ТекущийШагВыполнен = ТекущаяЗаписьРеестра.ТекущийШагВыполнен;	
	
	Если ТекущийШагВыполнен = Истина Тогда
		Если СоответствиеТитулов.Получить(ТекущийШаг) = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул7 Тогда
			РеквизитИмениФайлаТитула = "ТитулПереадресовкаИдентификаторФайла";
			ИмяШагаПросмотрМП = "readressing_viewed";
		ИначеЕсли СоответствиеТитулов.Получить(ТекущийШаг) = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ДопТитул7 Тогда
			РеквизитИмениФайлаТитула = "ДопТитулПереадресовкаИдентификаторФайла";
			ИмяШагаПросмотрМП = "readressing_viewed";
		ИначеЕсли СоответствиеТитулов.Получить(ТекущийШаг) = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул8 Тогда
			РеквизитИмениФайлаТитула = "ТитулПеревозчикаЗаменыИдентификаторФайла";
			ИмяШагаПросмотрМП = "replacement_viewed";
		ИначеЕсли СоответствиеТитулов.Получить(ТекущийШаг) = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_ДопТитул8 Тогда
			РеквизитИмениФайлаТитула = "ДопТитулПеревозчикаЗаменыИдентификаторФайла";
			ИмяШагаПросмотрМП = "replacement_viewed";	
		Иначе
			Возврат Результат;
		КонецЕсли;
		
		Результат = Истина;
		Если ТекущийШагМП = ИмяШагаПросмотрМП Тогда
			ИмяФайлаТитула = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяЗаписьРеестра.Ссылка, РеквизитИмениФайлаТитула);
			Если ИмяФайлаТитула = ФайлТекущегоШагаМП Тогда
				Результат = Ложь;	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПараметрыВыполненияОперацииСервиса(ИдентификаторЭДО = "")
	
	Параметры = Новый Структура;
	Параметры.Вставить("АдресРесурса", "");
	Параметры.Вставить("ВерсияИнтерфейса", 1);
	Параметры.Вставить("ПредставлениеОперации", "");
	Параметры.Вставить("Метод", "");
	Параметры.Вставить("Токен", Неопределено);
	Параметры.Вставить("ТокенОбновления", Неопределено);
	Параметры.Вставить("ПараметрыЗапроса", Новый Структура);
	Параметры.Вставить("Заголовки", Новый Соответствие);
	Параметры.Вставить("ТелоЗапроса", Неопределено);
	Параметры.Вставить("Таймаут", 60);
	Параметры.Вставить("ИдентификаторЭДО", ИдентификаторЭДО);
	
	Возврат Параметры;
	
КонецФункции

Функция ЗначениеКонтактнойИнформации(СсылкаВладельца, ВидИнформации)
	
	Результат = "";
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		Попытка
			СсылкаВида = ОбщегоНазначения.ПредопределенныйЭлемент(ВидИнформации);
			МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
			Результат = МодульУправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(СсылкаВладельца, СсылкаВида);
		Исключение
			Результат = "";
		КонецПопытки;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СоответствиеВидаПодписи(ТекущееЗначение)
	
	ВсеПредставления = Новый Соответствие;
	ВсеПредставления.Вставить(Перечисления.ВидПодписиМПЭПД.НеИспользуется, "Empty");
	ВсеПредставления.Вставить(Перечисления.ВидПодписиМПЭПД.ГосключНЭП, "UES");
	ВсеПредставления.Вставить(Перечисления.ВидПодписиМПЭПД.ПростаяПодпись, "Simple");
	ВсеПредставления.Вставить(Перечисления.ВидПодписиМПЭПД.СервисDSS, "DSS");
	
	Возврат ПеревернутьСоответствие(ВсеПредставления)[ТекущееЗначение];
	
КонецФункции

Функция СоответствиеСостояниеМП(ТекущееЗначение)
	
	ВсеПредставления = Новый Соответствие;
	ВсеПредставления.Вставить(Перечисления.СостояниеМПЭПД.Приостановлен, "Недоступен");
	ВсеПредставления.Вставить(Перечисления.СостояниеМПЭПД.Подключен, "Свободен");
	ВсеПредставления.Вставить(Перечисления.СостояниеМПЭПД.ОжидаетсяПодключение, "ОжидаетПерегистрации");
	
	Возврат ПеревернутьСоответствие(ВсеПредставления)[ТекущееЗначение];
	
КонецФункции

Функция СоответствиеСостояниеЭПД(ТекущееЗначение)
	
	ВсеПредставления = Новый Соответствие;
	ВсеПредставления.Вставить("Title1", "Титул 1");
	ВсеПредставления.Вставить("Title2", "Титул 2");
	ВсеПредставления.Вставить("Title3", "Титул 3");
	ВсеПредставления.Вставить("Title4", "Титул 4");
	ВсеПредставления.Вставить("Title5", "Титул 5");
	ВсеПредставления.Вставить("Title6", "Титул 6");
	ВсеПредставления.Вставить("Title7", "Титул 7");
	ВсеПредставления.Вставить("Title8", "Титул 8");
	ВсеПредставления.Вставить("Title2Work", "В работе титул 2");
	ВсеПредставления.Вставить("Title4Work", "В работе титул 4");
	ВсеПредставления.Вставить("Close", "Закрыт");
	
	Возврат ПеревернутьСоответствие(ВсеПредставления)[ТекущееЗначение];
	
КонецФункции

Функция СоответствиеУведомлений(ТекущееЗначение)
	
	ВсеПредставления = Новый Соответствие;
	ВсеПредставления.Вставить(Перечисления.ТипыВзаимодействияМПЭПД.ПодтвердитьДокумент, "Acсept");
	ВсеПредставления.Вставить(Перечисления.ТипыВзаимодействияМПЭПД.Уведомление, "Свободен");
	ВсеПредставления.Вставить(Перечисления.ТипыВзаимодействияМПЭПД.Сообщение, "Comment");
	ВсеПредставления.Вставить(Перечисления.ТипыВзаимодействияМПЭПД.НовыйДокументЭПД, "NewEPD");
	ВсеПредставления.Вставить(Перечисления.ТипыВзаимодействияМПЭПД.НовоеСообщение, "NewNotification");
	ВсеПредставления.Вставить(Перечисления.ТипыВзаимодействияМПЭПД.УдалениеМП, "DeleteMA");
	ВсеПредставления.Вставить(Перечисления.ТипыВзаимодействияМПЭПД.ИсходящийПакет, "OutgoingPacket");
	//ВсеПредставления.Вставить(Перечисления.ТипыВзаимодействияМПЭПД.ИзменениеСведенийВодителя, "ChangeInfoDriver");
	ВсеПредставления.Вставить(Перечисления.ТипыВзаимодействияМПЭПД.ИзменениеСведенийМП, "ChangeInfoМА");
	ВсеПредставления.Вставить(Перечисления.ТипыВзаимодействияМПЭПД.ПовторнаяРегистрацияМП, "RepeatRegistration");
	ВсеПредставления.Вставить(Перечисления.ТипыВзаимодействияМПЭПД.ИзменениеЭПД, "ChangeEPD");
	ВсеПредставления.Вставить(Перечисления.ТипыВзаимодействияМПЭПД.ПодписаниеГосключ, "GovernmentSign");
	ВсеПредставления.Вставить(Перечисления.ТипыВзаимодействияМПЭПД.ОтвязкаВодителя, "CancelDoc");
	ВсеПредставления.Вставить(Перечисления.ТипыВзаимодействияМПЭПД.ПривязкаВодителя, "DesignatedDoc");
	ВсеПредставления.Вставить(Перечисления.ТипыВзаимодействияМПЭПД.НастройкиДополнительныхПолей, "AdditionalParametersSetup");
	
	Возврат ПеревернутьСоответствие(ВсеПредставления)[ТекущееЗначение];
	
КонецФункции

Функция ПеревернутьСоответствие(ТекущееСоответствие)
	
	Результат = Новый Соответствие;
	
	Для Каждого СтрокаКлюча Из ТекущееСоответствие Цикл
		Результат.Вставить(СтрокаКлюча.Ключ, СтрокаКлюча.Значение);
		Результат.Вставить(СтрокаКлюча.Значение, СтрокаКлюча.Ключ);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьТокенДоступа(ИдентификаторЭДО)
	
	Результат = Новый Структура;
	
	ЗаписьРегистра = РегистрыСведений.НастройкиВзаимодействияМПЭПД.ПараметрыЗаписиРегистра(ИдентификаторЭДО);
	ЗаписьРегистра = РегистрыСведений.НастройкиВзаимодействияМПЭПД.НайтиЗапись(ЗаписьРегистра);

	Результат.Вставить("Токен", ЗаписьРегистра.ТокенДоступа);
	Результат.Вставить("ТокенОбновления", ЗаписьРегистра.ТокенОбновления);
	
	Возврат Результат;
	
КонецФункции

Функция СвойствоСтруктуры(ТекущееХранилище, ИмяСвойства, ЗначениеПоУмолчанию = "")
	
	Результат = ЗначениеПоУмолчанию;
	
	Если ТипЗнч(ТекущееХранилище) = Тип("Структура") ИЛИ ТипЗнч(ТекущееХранилище) = Тип("ФиксированнаяСтруктура") Тогда
		Результат = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ТекущееХранилище, ИмяСвойства, ЗначениеПоУмолчанию);
	ИначеЕсли ТекущееХранилище <> Неопределено Тогда
		Результат = ТекущееХранилище[ИмяСвойства];
		Если Результат = Неопределено Тогда
			Результат = ЗначениеПоУмолчанию;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСтруктуруДанныхТикетаПодпискиИТС()
	
	Результат = Новый Структура;
	Результат.Вставить("Login", "");
	Результат.Вставить("Password", "");
	Результат.Вставить("Ticket", "");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
		ВладелецТикета = "MAEPD";
		МодульИнтернетПоддержкаПользователей = ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователей");
		
		УстановитьПривилегированныйРежим(Истина);
		
		Если Не ОбщегоНазначения.РазделениеВключено() Тогда
			РезультатЗапроса = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
			
			Если РезультатЗапроса <> Неопределено Тогда
				Результат.Login = РезультатЗапроса.Логин;
				Результат.Password = РезультатЗапроса.Пароль;
			КонецЕсли;
		КонецЕсли;
		
		РезультатЗапроса = МодульИнтернетПоддержкаПользователей.ТикетАутентификацииНаПорталеПоддержки(ВладелецТикета);
		Если ЗначениеЗаполнено(РезультатЗапроса.Тикет) Тогда
			Результат.Ticket = РезультатЗапроса.Тикет;
		Иначе
			ИмяПодсобытияСистемы = НСтр("ru='Получение тикета ИТС'", ОбщегоНазначения.КодОсновногоЯзыка());
			РегистрацияВЖурнале(УровеньЖурналаРегистрации.Ошибка, РезультатЗапроса.ИнформацияОбОшибке, ИмяПодсобытияСистемы);
		КонецЕсли; 
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВерсияБиблиотеки()
	
	Возврат "LED_" + ОбновлениеИнформационнойБазыБЭД.ВерсияБиблиотеки();
	
КонецФункции

// Получение объекта соединение.
//
// Параметры:
//  ПараметрыОперации - См. ПараметрыВыполненияОперацииСервиса
//
// Возвращаемое значение:
//  См. ИнтернетСоединениеБЭД.ОписаниеHTTPСоединения
//
Функция СоединениеССервисом(ПараметрыОперации)
	
	Возврат ИнтернетСоединениеБЭД.ОписаниеHTTPСоединения(
				АдресСервисаВзаимодействия(),
				ПараметрыОперации.Таймаут);

КонецФункции

// Возвращает подготовленный HTTP запрос к сервису.
// 
// Параметры:
//  ПараметрыОперации - см. ПараметрыВыполненияОперацииСервиса
// 
// Возвращаемое значение:
//  HTTPЗапрос
Функция ЗапросКСервису(ПараметрыОперации)
	
	HTTPЗапрос = Новый HTTPЗапрос;

	АдресРесурса = АдресВерсииИнтерфейса(ПараметрыОперации.ВерсияИнтерфейса) + "/" + ПараметрыОперации.АдресРесурса;
	
	СиволРазделителя = "?";
	Для Каждого Параметр Из ПараметрыОперации.ПараметрыЗапроса Цикл
		ЗначениеПараметра = КодироватьСтроку(Параметр.Значение, СпособКодированияСтроки.КодировкаURL);
		АдресРесурса = АдресРесурса + СиволРазделителя + Параметр.Ключ + "=" + ЗначениеПараметра;
		СиволРазделителя = "&";
	КонецЦикла;
	
	Если ТипЗнч(ПараметрыОперации.ТелоЗапроса) = Тип("ДвоичныеДанные") Тогда
		HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ПараметрыОперации.ТелоЗапроса);
	ИначеЕсли ТипЗнч(ПараметрыОперации.ТелоЗапроса) = Тип("Строка") Тогда
		HTTPЗапрос.УстановитьТелоИзСтроки(ПараметрыОперации.ТелоЗапроса);
	КонецЕсли;

	Заголовки = Новый Соответствие;
	Токен = ПараметрыОперации.Токен;
	
	Если ЗначениеЗаполнено(Токен) Тогда
		ТокенДоступа = "";
		Если ТипЗнч(Токен) = Тип("ДвоичныеДанные") Тогда
			ТокенДоступа = ПолучитьСтрокуИзДвоичныхДанных(Токен);
		ИначеЕсли ТипЗнч(Токен) = Тип("Строка") Тогда 
			ТокенДоступа = Токен;
		КонецЕсли;
		Заголовки.Вставить("X-Auth-Token", ТокенДоступа);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(Заголовки, ПараметрыОперации.Заголовки);
	
	HTTPЗапрос.АдресРесурса = АдресРесурса;
	HTTPЗапрос.Заголовки = Заголовки;

	Возврат HTTPЗапрос;
	
КонецФункции

// Вызывает HTTP метод и возвращает его результат в виде структуры, при ошибках формирует запись в журнале регистрации
// 
// Параметры:
//  ОписаниеСоединения - См. СоединениеССервисом
//  HTTPЗапрос - HTTPЗапрос
//  Метод - Строка
//  ВидОперации - Строка
// 
// Возвращаемое значение:
//  Структура
// * Успех - Булево
// * Ответ - HTTPОтвет, Неопределено - Неопределно в случае ошибки
Функция ВызватьHTTPМетод(ОписаниеСоединения, HTTPЗапрос, Метод, ВидОперации)
	
	РезультатВызова = Новый Структура;
	РезультатВызова.Вставить("Успех", Ложь);
	РезультатВызова.Вставить("Ответ", Неопределено);
	
	Попытка
		Ответ = ОписаниеСоединения.HTTPСоединение.ВызватьHTTPМетод(Метод, HTTPЗапрос);
		РезультатВызова.Ответ = Ответ;
		РезультатВызова.Успех = Истина;
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		//@skip-check Undefined variable
		РегистрацияВЖурнале(УровеньЖурналаРегистрации.Ошибка, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецПопытки;
	
	Возврат РезультатВызова;
	
КонецФункции

Процедура ОбновитьТокенДоступа(ОтветСервиса, ПараметрыОперации, ОписаниеСоединения, ТекущийШаг)
	
	Если ОтветСервиса.КодСостояния <> 531 
		ИЛИ ТекущийШаг > 1 
		ИЛИ ПустаяСтрока(ПараметрыОперации.ТокенОбновления) Тогда // закончился срок действия токена
		ТекущийШаг = 0;
		Возврат;
	КонецЕсли;
	
	ПараметрыОбновления = ПараметрыВыполненияОперацииСервиса();
	ПараметрыОбновления.ПараметрыЗапроса.Вставить("refresh_token", ПараметрыОперации.ТокенОбновления);
	ПараметрыОбновления.ПараметрыЗапроса.Вставить("version", ВерсияБиблиотеки());
	ПараметрыОбновления.АдресРесурса = "common/token";
	ПараметрыОбновления.Метод = "GET";
	ПараметрыОбновления.ПредставлениеОперации = "Обновление токена доступа";
	
	HTTPЗапросОбновления = ЗапросКСервису(ПараметрыОбновления);
	РезультатЗапроса = ВызватьHTTPМетод(ОписаниеСоединения, HTTPЗапросОбновления, ПараметрыОбновления.Метод, ПараметрыОбновления.ПредставлениеОперации);
	
	Если РезультатЗапроса.Успех и РезультатЗапроса.Ответ.КодСостояния = 200 Тогда
		ДанныеОтвета = СтруктураИзJson(ОтветСервиса.ПолучитьТелоКакСтроку(), Истина);
		ПараметрыОперации.Токен = СвойствоСтруктуры(ДанныеОтвета, "token");
		ПараметрыОперации.ТокенОбновления = СвойствоСтруктуры(ДанныеОтвета, "refresh_token");
		ИдентификаторЭДО = СвойствоСтруктуры(ПараметрыОперации, "ИдентификаторЭДО");

		Если НЕ ПустаяСтрока(ИдентификаторЭДО) Тогда
			ЗаписьРегистра = РегистрыСведений.НастройкиВзаимодействияМПЭПД.ПараметрыЗаписиРегистра(ИдентификаторЭДО);
			ЗаписьРегистра.ТокенДоступа = ПараметрыОперации.Токен;
			ЗаписьРегистра.ТокенОбновления = ПараметрыОперации.ТокенОбновления;
			ЗаписьРегистра.СрокДействияТокена = СвойствоСтруктуры(ДанныеОтвета, "expiration");
			РегистрыСведений.НастройкиВзаимодействияМПЭПД.РегистрироватьЗапись(ЗаписьРегистра);
		КонецЕсли;
		
	КонецЕсли;

	ТекущийШаг = ТекущийШаг + 1;
	
КонецПроцедуры

// Описание
// 
// Параметры:
// 	ПараметрыОперации - см. ПараметрыВыполненияОперацииСервиса
// Возвращаемое значение:
// 	Структура:
//		* Успех - Булево
//		* Ответ - HTTPОтвет, Неопределено - Неопределено при ошибках
//		* Ошибка - Строка - Описание ошибки
Функция ВыполнитьОперацию(ПараметрыОперации)
	
	РезультатОперации = Новый Структура("Успех, Ответ, Ошибка", Ложь, Неопределено, "");
	ОписаниеСоединения = СоединениеССервисом(ПараметрыОперации);
	
	HTTPЗапрос = ЗапросКСервису(ПараметрыОперации);
	
	ТекущийШаг = 1;
	
	Пока ТекущийШаг Цикл
		РезультатЗапроса = ВызватьHTTPМетод(ОписаниеСоединения, HTTPЗапрос, ПараметрыОперации.Метод, ПараметрыОперации.ПредставлениеОперации);
		
		Если Не РезультатЗапроса.Успех Тогда
			Возврат РезультатОперации;
		КонецЕсли;
		
		ОбновитьТокенДоступа(РезультатЗапроса.Ответ, ПараметрыОперации, ОписаниеСоединения, ТекущийШаг);
		
	КонецЦикла;
	
	РезультатОперации.Успех = РезультатЗапроса.Ответ.КодСостояния = 200;
	РезультатОперации.Ответ = РезультатЗапроса.Ответ;
	Если Не РезультатОперации.Успех Тогда
		ОшибкаОператора = ПрочитатьОписаниеОшибкиОператора(РезультатЗапроса.Ответ);
		РезультатОперации.Ошибка = ОшибкаОператора.Описание;
		РегистрацияВЖурнале(УровеньЖурналаРегистрации.Ошибка, ОшибкаОператора.Журнал);
	КонецЕсли;

	Возврат РезультатОперации;

КонецФункции

Функция ПрочитатьОписаниеОшибкиОператора(ОтветСервиса)
	
	Результат = Новый Структура();
	Результат.Вставить("Описание");
	Результат.Вставить("Журнал");
	
	Описание = НСтр("ru = 'Ошибка на сервере взаимодействия с мобильными устройствами'", ОбщегоНазначения.КодОсновногоЯзыка());
	ОшибкавЖурнале = НСтр("ru = 'Ошибка на сервере взаимодействия с мобильными устройствами'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	Попытка
		ДанныеОтвета = СтруктураИзJson(ОтветСервиса.ПолучитьТелоКакСтроку(), Истина);
		Результат.Описание = СвойствоСтруктуры(ДанныеОтвета, "title");
		Результат.Журнал = ОшибкавЖурнале + Символы.ПС				
				+ СвойствоСтруктуры(ДанныеОтвета, "title") + Символы.ПС
				+ СвойствоСтруктуры(ДанныеОтвета, "code") + Символы.ПС
				+ СвойствоСтруктуры(ДанныеОтвета, "details") + Символы.ПС
				+ СвойствоСтруктуры(ДанныеОтвета, "id");
	Исключение
		Результат.Описание = Описание;
		Результат.Журнал = ОшибкавЖурнале;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Процедура РегистрацияВЖурнале(Уровень, ПолноеПредставлениеОшибки, ИмяПодсобытияСистемы = "") Экспорт
	
	Если ЗначениеЗаполнено(ИмяПодсобытияСистемы) Тогда
		Шаблон = НСтр("ru='Сервис взаимодействия МПЭПД.%1'", ОбщегоНазначения.КодОсновногоЯзыка());
		ИмяСобытия = СтрШаблон(Шаблон, ИмяПодсобытияСистемы);
	Иначе
		ИмяСобытия =  НСтр("ru='Сервис взаимодействия МПЭПД'", ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	ЗаписьЖурналаРегистрации(ИмяСобытия, Уровень, , , ПолноеПредставлениеОшибки);
	
КонецПроцедуры

#Область РаботаСJson

// Служебная функция, предназначенная для использования в объекте ЗаписатьJSON
// Служит функцией преобразования двоичных данных в base64 и содержит обязательные 
// для такого случая параметры.
// 
// Параметры: 
// 	Свойство 				- Строка - в параметр передается имя свойства, если выполняется запись структуры или соответствия
// 	Значение 				- Произвольный - ожидается тип ДвоичныеДанные
// 	ДополнительныеПараметры - Структура - дополнительные параметры, которые указаны в вызове метода ЗаписатьJSON:
//   * ЗаменятьДвоичныеДанные - Булево - заменяет двоичные данные
// 	Отказ - Булево	- отказ от записи свойства
// 
// Возвращаемое значение: 
//  Строка
//
Функция ПреобразоватьДвоичныеДанныеВBase64(Свойство, Значение, ДополнительныеПараметры, Отказ) Экспорт
	
	Если ТипЗнч(Значение) = Тип("ДвоичныеДанные") Тогда
		Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
			И ДополнительныеПараметры.Свойство("ЗаменятьДвоичныеДанные")
			И ДополнительныеПараметры.ЗаменятьДвоичныеДанные Тогда
			Возврат Значение.Размер();
		Иначе
			Возврат Base64Строка(Значение);
		КонецЕсли;
	КонецЕсли;
		
КонецФункции

// Служебная функция, предназначенная для использования в объекте ПрочитатьJSON
// Служит функцией восстановления строки base64 в ДвоичныеДанные и содержит обязательные 
// для такого случая параметры.
// 
// Параметры: 
//	Свойство 				- Строка - указывается только при чтении объектов JSON,
//	Значение 				- Произвольный - значение допустимого для сериализации типа
//	ДополнительныеПараметры - Произвольный - содержит дополнительные параметры 
// 
// Возвращаемое значение: 
//  ДвоичныеДанные
//
Функция ПреобразоватьСвойстваОбъекта(Свойство, Значение, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		Возврат Base64Значение(Значение);
	ИначеЕсли ТипЗнч(Значение) = Тип("Массив") Тогда
		Для Индекс = 0 По Значение.ВГраница() Цикл
			Значение[Индекс] = Base64Значение(Значение[Индекс]);	
		КонецЦикла;
		Возврат Значение;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

// Преобразует строку в формате JSON в структуру. 
//
// Параметры:
//  СтрокаJSON              - Строка - строка в формате JSON.
//  КакСоответствие - Булево
//  ПараметрыПреобразования - Структура - дополнительные параметры для настройки преобразования:
//    * ИменаСвойствДляВосстановления - Массив из Строка, ФиксированныйМассив из Строка - список свойств, 
//                                      которые необходимо преобразовать из Base64 в двоичные данные.
// Возвращаемое значение:
//	Структура:
//	 * Поле - Произвольный - произвольный набор полей.
//
Функция СтруктураИзJson(СтрокаJSON, КакСоответствие = Ложь, ПараметрыПреобразования = Неопределено)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	
	ИменаСвойствДаты = СвойствоСтруктуры(ПараметрыПреобразования, "ИменаСвойствДаты", Неопределено);
	Если ИменаСвойствДаты <> Неопределено Тогда
		ИменаСвойствДаты = СтрРазделить(ИменаСвойствДаты, ",");
	КонецЕсли;
	ИменаСвойствВосстановления = СвойствоСтруктуры(ПараметрыПреобразования, "ИменаСвойствВосстановления", Неопределено);
	Если ИменаСвойствВосстановления <> Неопределено Тогда
		ИменаСвойствВосстановления = СтрРазделить(ИменаСвойствВосстановления, ",");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИменаСвойствВосстановления) Тогда
		Объект = ПрочитатьJSON(
			ЧтениеJSON, КакСоответствие,
			ИменаСвойствДаты,
			ФорматДатыJSON.ISO, 
			"ПреобразоватьСвойстваОбъекта", 
			СервисВзаимодействияМПЭПД, 
			ПараметрыПреобразования,
			ИменаСвойствВосстановления);
	Иначе
		Объект = ПрочитатьJSON(
			ЧтениеJSON, КакСоответствие,
			ИменаСвойствДаты,
			ФорматДатыJSON.ISO);
	КонецЕсли;
	
	ЧтениеJSON.Закрыть();
	
	Возврат Объект;
	
КонецФункции

// Преобразует структура в строку JSON. Двоичные данные преобразуются в строки Base64.
//
// Параметры:
//  Объект - Структура - которую необходимо преобразовать в строку JSON.
//  ПараметрыПреобразования - Структура - Дополнительные параметры, которые будут переданы в функцию восстановления значений.
//
// Возвращаемое значение:
//	Строка - в формате JSON.
//
Функция СтруктураВJSON(Объект, ПараметрыПреобразования = Неопределено)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(
		ЗаписьJSON, 
		Объект,, 
		"ПреобразоватьДвоичныеДанныеВBase64", 
		СервисВзаимодействияМПЭПД, 
		ПараметрыПреобразования);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

#КонецОбласти

Функция АдресСервисаВзаимодействия()
	
	Результат = "https://app-492902.1cmycloud.com";
	Возврат Результат;
	
КонецФункции

Функция АдресВерсииИнтерфейса(ВерсияВзаимодействия = 1)
	
	Результат = "applications/REDMS";
	Если ВерсияВзаимодействия = 1 Тогда
		Результат = Результат + "/api/v1";
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция НовыйРезультатПолученияСпискаПользователей()
	
	Структура = Новый Структура;
	Структура.Вставить("УспешностьЗагрузки", Ложь);
	Структура.Вставить("ЕстьУстройстваОжидающиеПодключение", Ложь);
	
	Возврат Структура;
	
КонецФункции

Функция НужноВвестиДанныеИнтернетПоддержки()
	
	ЗаполненыДанныеАутентификации = ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
	Возврат Не ЗаполненыДанныеАутентификации;
	
КонецФункции

Функция НоваяСтруктураНеобходимыхДанныхДляРегистрацииУчетнойЗаписи()
	
	Структура = Новый Структура;
	Структура.Вставить("УчетнаяЗаписьПодключена");
	Структура.Вставить("НужноВвестиДанныеИнтернетПоддержки");
	
	Возврат Структура;
	
КонецФункции

Функция ТипСообщенияДляМППереадресовка()
	
	Возврат "readressing";
	
КонецФункции

Функция ТипСообщенияДляМПЗаменаТС()
	
	Возврат "replacement";
	
КонецФункции

#КонецОбласти
