
#Область ПрограммныйИнтерфейс

#Область ПараметрыСканирования

// Выполняет инициализацию и заполнение параметров сканирования по переданному контексту.
// Параметры сканирования необходимы для анализа и обработки штрихкодов маркируемой продукции.
//
// Параметры:
//  Контекст - Неопределено, ДокументСсылка, ФормаКлиентскогоПриложения - Источник данных для формирования параметров сканирования.
//  ФормаВыбора - ФормаКлиентскогоПриложения - Форма
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции
//  ПараметрыРежимаИсправленияОшибок - Структура - Параметры режима исправления ошибок
//
// Возвращаемое значение:
//  См. ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.БазовыеПараметрыСканирования
Функция ПараметрыСканирования(Контекст = Неопределено, ФормаВыбора = Неопределено, ВидПродукции = Неопределено, ПараметрыРежимаИсправленияОшибок = Неопределено) Экспорт
	
	ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.БазовыеПараметрыСканирования();
	
	ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ЗаполнитьБазовыеПараметрыСканирования(ПараметрыСканирования, Контекст);
	ЗаполнитьПараметрыСканированияРасширенные(ПараметрыСканирования, Контекст);
	ПараметрыСканирования.ПодсистемаИСМПСуществует = ОбщегоНазначенияКлиент.ПодсистемаСуществует("ГосИС.ИСМП");
	
	ЗаполнитьПараметрыСканированияДляАлкогольнойПродукции(ПараметрыСканирования, Контекст, ВидПродукции, ФормаВыбора);
	ЗаполнитьПараметрыСканированияДляТабачнойПродукции(ПараметрыСканирования, Контекст, ВидПродукции, ФормаВыбора, ПараметрыРежимаИсправленияОшибок);
	ЗаполнитьПараметрыСканированияДляПродукцииИСМП(ПараметрыСканирования, Контекст, ВидПродукции, ФормаВыбора, ПараметрыРежимаИсправленияОшибок);
	
	ШтрихкодированиеИСКлиентСерверПереопределяемый.ПриЗаполненииПараметровСканирования(ПараметрыСканирования, Контекст, ВидПродукции);
	
	//@skip-check constructor-function-return-section
	Возврат ПараметрыСканирования;
	
КонецФункции

#КонецОбласти

#Область ОбработкаШтрихкодов

Функция ПроверитьНаНаличиеОшибокУточнения(ПараметрыСканирования, РезультатВыбораДанныеШтрихкода, ДанныеУточнения) Экспорт
	
	ТекстСообщения = "";
	Если ЗначениеЗаполнено(РезультатВыбораДанныеШтрихкода.ТекстОшибки) Тогда
		ТекстСообщения = РезультатВыбораДанныеШтрихкода.ТекстОшибки;
	ИначеЕсли ЗначениеЗаполнено(РезультатВыбораДанныеШтрихкода.Номенклатура)
		И ЗначениеЗаполнено(ДанныеУточнения.Номенклатура)
		И (РезультатВыбораДанныеШтрихкода.Номенклатура <> ДанныеУточнения.Номенклатура Или РезультатВыбораДанныеШтрихкода.Характеристика <> ДанныеУточнения.Характеристика)
		И Не (ПараметрыСканирования.ТребуетсяЧастичноеВыбытие
			  И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеУточнения, "ЧастичноеВыбытиеВариантУчета")
			  И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(РезультатВыбораДанныеШтрихкода, "ЧастичноеВыбытиеВариантУчета")
			  И РезультатВыбораДанныеШтрихкода.ЧастичноеВыбытиеВариантУчета = ПредопределенноеЗначение("Перечисление.ВариантыУчетаЧастичногоВыбытияИС.НастроеннаяНоменклатура")
			  И ШтрихкодированиеОбщегоНазначенияИСВызовСервера.ЭтоНастроенноеВыбытие(ДанныеУточнения.Номенклатура, ДанныеУточнения.Характеристика, РезультатВыбораДанныеШтрихкода.Номенклатура, РезультатВыбораДанныеШтрихкода.Характеристика)) Тогда
		
		Если ЗначениеЗаполнено(РезультатВыбораДанныеШтрихкода.Характеристика) Тогда
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Код маркировки не соответствует номенклатуре %1 (%2)'"),
				ДанныеУточнения.Номенклатура, ДанныеУточнения.Характеристика);
		Иначе
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Код маркировки не соответствует номенклатуре %1'"), ДанныеУточнения.Номенклатура);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		Возврат ТекстСообщения;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// Выполняет обработку штрихкода. Вызывается из формы проверки и подбора маркируемой продукции.
//
// Параметры:
//  ЗавершениеОбработки - Строка - Имя описания оповещения - обработчика формы, которое произойдет при завершении обработки.
//  Форма - ФормаКлиентскогоПриложения - форма, в которой отсканирован штрихкод.
//  ДанныеШтрихкода - Структура - структура с ключами:
//   * Штрихкод - Строка - считанный штрихкод,
//   * Количество - Число - количество упаковок.
//  ПараметрыСканирования - См. ПараметрыСканирования
//  ДанныеРазбора - см. РазборКодаМаркировкиИССлужебныйКлиентСервер.НовыйРезультатРазбораКодаМаркировки
//  ДополнительныеПараметры - Структура
Процедура ОбработатьДанныеШтрихкода(ЗавершениеОбработки, Форма, ДанныеШтрихкода, ПараметрыСканирования = Неопределено, ДанныеРазбора = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ПараметрыСканирования = Неопределено Тогда
		ПараметрыСканирования = ПараметрыСканирования(Форма);
	КонецЕсли;
	
	ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ДекодироватьШтрихкодДанныхBase64(ДанныеШтрихкода);
	
	// Заполнение параметра ДополнительныеВариантыСопоставленияНоменклатуры выполняется только в формах
	// проверки и подбора продукции, в зависимых формах используется ранее заданное сопоставление.
	Если ПараметрыСканирования.ИспользуетсяСоответствиеШтрихкодовСтрокДерева
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПодобраннаяМаркируемаяПродукция") Тогда
		
		ПараметрыСканирования.ДополнительныеВариантыСопоставленияНоменклатуры = Неопределено;
		
		GTIN = Неопределено;
		Если ДанныеРазбора = Неопределено
			И РазборКодаМаркировкиИССлужебныйКлиентСервер.ЭтоEANИлиGTIN(ДанныеШтрихкода.Штрихкод) Тогда
			GTIN = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.GTINПоШтрихкодуEAN(ДанныеШтрихкода.Штрихкод);
		ИначеЕсли ДанныеРазбора = Неопределено Тогда
			
			ПользовательскиеПараметрыРазбораКодаМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПользовательскиеПараметрыРазбораКодаМаркировки();
			ЗаполнитьРасширенныеПараметрыРазбораКодаМаркировки(ПараметрыСканирования, ПользовательскиеПараметрыРазбораКодаМаркировки);
			
			ДанныеРазбора = РазборКодаМаркировкиИССлужебныйКлиент.РазобратьКодМаркировки(
				ДанныеШтрихкода.Штрихкод, ПараметрыСканирования.ДопустимыеВидыПродукции,,, ПользовательскиеПараметрыРазбораКодаМаркировки);
				
		КонецЕсли;
		Если ДанныеРазбора <> Неопределено Тогда
			ДанныеРазбора.СоставКодаМаркировки.Свойство("GTIN", GTIN);
		КонецЕсли;
		
		Если GTIN <> Неопределено Тогда
			
			ШтрихкодEAN = РазборКодаМаркировкиИССлужебныйКлиентСервер.ШтрихкодEANИзGTIN(GTIN);
			
			ОтборПоGTIN = Новый Структура("GTIN", GTIN);
			СтрокиТаблицыМаркируемойПродукции = Форма.ПодобраннаяМаркируемаяПродукция.НайтиСтроки(ОтборПоGTIN);
			Если СтрокиТаблицыМаркируемойПродукции.Количество() Тогда
				
				Индекс = Новый Соответствие;
				
				ПараметрыСканирования.ДополнительныеВариантыСопоставленияНоменклатуры = Новый Соответствие;
				ВариантыСопоставления = Новый Массив;
				Для Каждого СтрокаТаблицы Из СтрокиТаблицыМаркируемойПродукции Цикл 
					
					ИндексНоменклатура = Индекс.Получить(СтрокаТаблицы.Номенклатура);
					Если ИндексНоменклатура = Неопределено Тогда
						ИндексНоменклатура = Новый Соответствие;
					КонецЕсли;
					ИндексХарактеристика = ИндексНоменклатура.Получить(СтрокаТаблицы.Характеристика);
					Если ИндексХарактеристика = Неопределено Тогда
						ИндексХарактеристика = Новый Соответствие;
					КонецЕсли;
					
					Если ИндексХарактеристика.Получить(СтрокаТаблицы.Серия) = Неопределено Тогда
						
						ИндексХарактеристика.Вставить(СтрокаТаблицы.Серия, Истина);
						ИндексНоменклатура.Вставить(СтрокаТаблицы.Характеристика, ИндексХарактеристика);
						Индекс.Вставить(СтрокаТаблицы.Номенклатура, ИндексНоменклатура);
						
						ВариантСопоставления = Новый Структура("Номенклатура, Характеристика, Серия");
						ЗаполнитьЗначенияСвойств(ВариантСопоставления, СтрокаТаблицы);
						ВариантыСопоставления.Добавить(ВариантСопоставления);
						
					КонецЕсли;
					
				КонецЦикла;
				
				ПараметрыСканирования.ДополнительныеВариантыСопоставленияНоменклатуры.Вставить(
					ШтрихкодEAN, ВариантыСопоставления);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОтразитьИзменениеАдресаДанныхОснованияВФорме(Форма, ПараметрыСканирования);
	
	ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ЗакодироватьШтрихкодДанныхBase64(ДанныеШтрихкода);
	
	РезультатОбработкиШтрихкода = ШтрихкодированиеОбщегоНазначенияИСВызовСервера.ОбработатьШтрихкод(
		ДанныеШтрихкода, ПараметрыСканирования, Неопределено, Форма.УникальныйИдентификатор);
	
	Если РезультатОбработкиШтрихкода <> Неопределено Тогда
		
		Если ПараметрыСканирования.ИспользуетсяСоответствиеШтрихкодовСтрокДерева
			И РезультатОбработкиШтрихкода.ТребуетсяВыборНоменклатуры Тогда
			
			Если Форма.СоответствиеШтрихкодовСтрокДерева.Получить(ДанныеШтрихкода.Штрихкод) <> Неопределено Тогда
				РезультатОбработкиШтрихкода.ТребуетсяВыборНоменклатуры = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		ДополнительныеПроверкиПередЗавершениемОбработкиШтрихкода(Форма, ПараметрыСканирования, РезультатОбработкиШтрихкода);
		
		Если РезультатОбработкиШтрихкода.ЕстьОшибкиВДеревеУпаковок
			Или Не ПустаяСтрока(РезультатОбработкиШтрихкода.ТекстОшибки)
			Или РезультатОбработкиШтрихкода.ТребуетсяУточнениеДанных
			Или РезультатОбработкиШтрихкода.ТребуетсяУточнениеСоставаУпаковки
			Или (РезультатОбработкиШтрихкода.ТребуетсяПроверкаСредствамиККТ
				И Не РезультатОбработкиШтрихкода.ПроверкаСредствамиККТЗавершена
			Или ТребуетсяУточнениеДанныхУПользователя(Форма, РезультатОбработкиШтрихкода, ПараметрыСканирования)) Тогда
			
			ПараметрыЗавершенияВводаШтрихкода = ПараметрыЗавершенияОбработкиШтрихкода("","",ЗавершениеОбработки);
			ПараметрыЗавершенияВводаШтрихкода.РезультатОбработкиШтрихкода   = РезультатОбработкиШтрихкода;
			ПараметрыЗавершенияВводаШтрихкода.ПараметрыСканирования         = ПараметрыСканирования;
			ПараметрыЗавершенияВводаШтрихкода.Форма                         = Форма;
			ПараметрыЗавершенияВводаШтрихкода.ДанныеШтрихкода               = ДанныеШтрихкода;
			ПараметрыЗавершенияВводаШтрихкода.ВызовИзФормыДокумента         = Ложь;
			
			Если Не ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда
				ДополнитьДанныеШтрихкодаМиниВерсия(РезультатОбработкиШтрихкода, ДанныеШтрихкода);
			КонецЕсли;
			
			ЗавершитьОбработкуШтрихкода(ПараметрыЗавершенияВводаШтрихкода);
			
		Иначе
			
			ДанныеШтрихкода = РезультатОбработкиШтрихкода.ДанныеШтрихкода;
			ОповещениеЗавершениеОбработки = Новый ОписаниеОповещения(ЗавершениеОбработки, Форма, ДополнительныеПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеЗавершениеОбработки, ДанныеШтрихкода);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеПроцедурыИФункции

Функция Подключаемый_ОбработатьУточнениеКодаМаркировки(Форма) Экспорт
	
	ДанныеУточненияКодаМаркировки = Неопределено;
	
	// Сценарий: есть текущий результат обработки кода маркировки
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "КодМаркировкиДляУточнения")
		И ЗначениеЗаполнено(Форма.КодМаркировкиДляУточнения) Тогда
		
		КодМаркировкиДляУточнения = Форма.КодМаркировкиДляУточнения;
		
		ПараметрыОткрытияФормыУточненияДанных = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ПараметрыОткрытияФормыУточненияДанных();
		ПараметрыОткрытияФормыУточненияДанных.КодМаркировкиДляУточнения = КодМаркировкиДляУточнения;
		ПараметрыОткрытияФормыУточненияДанных.ДанныеДляУточненияСведенийПользователя = ПреобразоватьВПараметрыОткрытияФормыВводаКодаМаркировки(
			ПараметрыОткрытияФормыУточненияДанных.КодМаркировкиДляУточнения);
		
		Форма.КодМаркировкиДляУточнения = Неопределено;
		ДанныеУточненияКодаМаркировки = ПараметрыОткрытияФормыУточненияДанных;
		
	КонецЕсли;
	
	Возврат ДанныеУточненияКодаМаркировки;
	
КонецФункции

#КонецОбласти

#Область ПроверкаВидовПродукции

// Выполняет проверку в переданном массиве "ВидыПродукции" наличие элемента алкогольной продукции.
//
// Параметры:
//  ВидыПродукции - Массив из ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции ИС.
//  ПараметрыСканирования - (см. ПараметрыСканирования)
// Возвращаемое значение:
//  Булево - Истина, если в переданном массиве найден элемент перечисления алкогольная продукция.
Функция ПрисутствуетАлкогольнаяПродукция(ВидыПродукции, ПараметрыСканирования) Экспорт
	
	Алкоголь = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная");
	
	Если ПараметрыСканирования.ДопустимыеВидыПродукции.Найти(Алкоголь) = Неопределено Тогда
		Возврат Ложь;
	ИначеЕсли ВидыПродукции.Найти(Алкоголь) <> Неопределено Тогда
		Возврат Истина;
	ИначеЕсли ПараметрыСканирования.ТолькоЕГАИС Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Выполняет проверку в переданном массиве "ВидыПродукции" наличие элемента табачной продукции.
//
// Параметры:
//  ВидыПродукции - Массив из ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции ИС.
// Возвращаемое значение:
//  Булево - Истина, если в переданном массиве найден элемент перечисления табачная продукция.
Функция ПрисутствуетТабачнаяПродукция(ВидыПродукции) Экспорт
	
	Для Каждого ВидПродукции Из ВидыПродукции Цикл
		Если ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияМОТП(ВидПродукции) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Выполняет проверку в переданном массиве "ВидыПродукции" наличие элемента продукции ИСМП.
//
// Параметры:
//  ВидыПродукции - Массив из ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции ИС.
//  ВключатьТабачнуюПродукцию - Булево - Признак включения табачной продукции
//  ВключатьМолочнуюПродукцию - Булево - Признак вкючения молочной продукции
// Возвращаемое значение:
//  Булево - Истина, если в переданном массиве найден элемент перечисления обувная продукция.
Функция ПрисутствуетПродукцияИСМП(ВидыПродукции, ВключатьТабачнуюПродукцию = Ложь, ВключатьМолочнуюПродукцию = Истина) Экспорт
	
	Для Каждого ВидПродукции Из ВидыПродукции Цикл
		Если ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияИСМП(ВидПродукции, ВключатьТабачнуюПродукцию, ВключатьМолочнуюПродукцию) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Выполняет проверку в переданном массиве "ВидыПродукции" наличие элемента с пустым видом продукции.
//
// Параметры:
//  ВидыПродукции - Массив из ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции ИС.
// Возвращаемое значение:
//  Булево - Истина, если в переданном массиве найден элемент перечисления пустая ссылка.
Функция ПрисутствуетПрочаяПродукция(ВидыПродукции) Экспорт
	
	ПрочаяПродукция = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПустаяСсылка");
	
	Возврат ВидыПродукции.Найти(ПрочаяПродукция) <> Неопределено
		Или ВидыПродукции.Количество() = 0;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

//Сценарий: на вход уточнения данных передан частично обработанный код маркировки
//
// Параметры:
//  КодМаркировкиДляУточнения - См. ПараметрыЗавершенияОбработкиШтрихкода
// Возвращаемое значение:
//  см. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыОткрытияФормыВводаКодаМаркировки
Функция ПреобразоватьВПараметрыОткрытияФормыВводаКодаМаркировки(КодМаркировкиДляУточнения) Экспорт
	
	ДанныеДляУточнения = ПараметрыОткрытияФормыВводаКодаМаркировки();
	ДанныеШтрихкода    = КодМаркировкиДляУточнения.РезультатОбработкиШтрихкода.ДанныеШтрихкода;
	ЗаполнитьЗначенияСвойств(ДанныеДляУточнения, ДанныеШтрихкода);
	
	ДанныеДляУточнения.ДанныеШтрихкода       = ДанныеШтрихкода;
	ДанныеДляУточнения.ПараметрыСканирования = КодМаркировкиДляУточнения.ПараметрыСканирования;
	
	Возврат ДанныеДляУточнения;
	
КонецФункции

// Структура параметров, необходимых для открытия формы считывания кода маркировки.
//
// Возвращаемое значение:
//  Структура - требуемые параметры:
// * Номенклатура - ОпределяемыйТип.Номенклатура - Номенклатура
// * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - Характеристика номенклатуры
// * ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции ИС
// * МаркируемаяПродукция - Булево - Истина, если продукция маркируемая
// * ПараметрыСканирования - См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования
// * ДанныеШтрихкода - См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьДанныеШтрихкода
// * Документ - Произвольный - Ссылка на текущий документ
// * РазрешатьДобавлениеБезКодаМарки - Булево - разрешать добавление строки при отказе от ввода кода маркировки
//
Функция ПараметрыОткрытияФормыВводаКодаМаркировки() Экспорт
	
	ПараметрыОткрытияФормы = Новый Структура;
	
	ПараметрыОткрытияФормы.Вставить("Номенклатура",                    Неопределено);
	ПараметрыОткрытияФормы.Вставить("Характеристика",                  Неопределено);
	ПараметрыОткрытияФормы.Вставить("Серия",                           Неопределено);
	ПараметрыОткрытияФормы.Вставить("Количество",                      Неопределено);
	ПараметрыОткрытияФормы.Вставить("ВидПродукции",                    Неопределено);
	ПараметрыОткрытияФормы.Вставить("МаркируемаяПродукция",            Истина);
	ПараметрыОткрытияФормы.Вставить("ПараметрыСканирования",           Неопределено);
	ПараметрыОткрытияФормы.Вставить("ДанныеШтрихкода",                 Неопределено);
	ПараметрыОткрытияФормы.Вставить("Документ",                        Неопределено);
	ПараметрыОткрытияФормы.Вставить("РазрешатьДобавлениеБезКодаМарки", Истина);
	
	//@skip-check constructor-function-return-section
	Возврат ПараметрыОткрытияФормы;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Прочие

// Обновляет отображение адреса данных документа основания на форме.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, для которой выполняется обработка штрихкода(ов).
//  ПараметрыСканирования - (см. ПараметрыСканирования).
Процедура ОтразитьИзменениеАдресаДанныхОснованияВФорме(Форма, ПараметрыСканирования) Экспорт
	
	Если Не ЗначениеЗаполнено(ПараметрыСканирования.ДокументОснование) Тогда
		Возврат;
	КонецЕсли;

	ФормаСоЗначением = Неопределено;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "АдресДанныхДокументаОснования") Тогда
		ФормаСоЗначением = Форма;
	ИначеЕсли Форма.ВладелецФормы <> Неопределено
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.ВладелецФормы, "АдресДанныхДокументаОснования") Тогда
		ФормаСоЗначением = Форма.ВладелецФормы;
	КонецЕсли;
	
	Если ФормаСоЗначением = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ФормаСоЗначением.АдресДанныхДокументаОснования <> ПараметрыСканирования.АдресДанныхДокументаОснования Тогда
		ФормаСоЗначением.АдресДанныхДокументаОснования = ПараметрыСканирования.АдресДанныхДокументаОснования;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет завершение обработки штрихкода. На основании ПараметрыЗавершенияОбработкиШтрихкода.РезультатОбработкиШтрихкода
// выполняет необходимые действия.
//
// Параметры:
//  ПараметрыЗавершенияОбработкиШтрихкода - (См. ПараметрыЗавершенияОбработкиШтрихкода).
Процедура ЗавершитьОбработкуШтрихкода(ПараметрыЗавершенияОбработкиШтрихкода) Экспорт
	
	Форма                 = ПараметрыЗавершенияОбработкиШтрихкода.Форма;
	ПараметрыСканирования = ПараметрыЗавершенияОбработкиШтрихкода.ПараметрыСканирования;
	РезультатОбработки    = ПараметрыЗавершенияОбработкиШтрихкода.РезультатОбработкиШтрихкода;
	ЗавершениеОбработки   = ПараметрыЗавершенияОбработкиШтрихкода.ЗавершениеОбработки;
	
	ДополнительныеПроверкиПередЗавершениемОбработкиШтрихкода(Форма, ПараметрыСканирования, РезультатОбработки);
	
	ЗавершитьРасширеннуюОбработкуШтрихкода(Форма, ПараметрыСканирования, РезультатОбработки.ДанныеШтрихкода);
	
	// ТребуетсяСопоставлениеНоменклатуры - для массива штрихкодов вызывается только 1 раз
	Если РезультатОбработки.ТребуетсяСопоставлениеНоменклатуры
		Или РезультатОбработки.ТребуетсяУточнениеКоэффициентовУпаковок Тогда
		
		Если Форма.ИмяФормы = "Обработка.ПроверкаКодовМаркировкиИСМП.Форма.ФормаПроверки" Тогда
			Форма.КодМаркировкиДляУточнения = ПараметрыЗавершенияОбработкиШтрихкода;
		ИначеЕсли ПараметрыСканирования.РежимБРМК Тогда
			ПараметрыЗавершенияОбработкиШтрихкода.Форма = Неопределено;
			Форма.КодМаркировкиДляУточнения = ПараметрыЗавершенияОбработкиШтрихкода;
		КонецЕсли;
		Форма.ПодключитьОбработчикОжидания("Подключаемый_ОткрытьФормуУточненияДанных", 0.1, Истина);
		Возврат;
		
	КонецЕсли;
	
	// Вызывается только при сканировании 1 штрихкода
	Если РезультатОбработки.ОткрытьФормуВводаКодаМаркировки Тогда
		
		ПараметрыЗавершенияОбработкиШтрихкода.Форма = Неопределено;
		Форма.КодМаркировкиДляУточнения = ПараметрыЗавершенияОбработкиШтрихкода;
		Форма.ПодключитьОбработчикОжидания("Подключаемый_ОткрытьФормуУточненияДанных", 0.1, Истина);
		Возврат;
		
	КонецЕсли;
	
	// Далее, общие обработчики ИС МП для сканера и ТСД
	Если ПрисутствуетПродукцияИСМП(РезультатОбработки.ВидыПродукции, Истина)
		Или ПрисутствуетПрочаяПродукция(РезультатОбработки.ВидыПродукции) Тогда
		
		Если РезультатОбработки.ТребуетсяВыборНоменклатуры
			Или РезультатОбработки.ТребуетсяУточнениеДанных
			Или РезультатОбработки.ТребуетсяУточнениеСоставаУпаковки Тогда
			
			ПараметрыЗавершенияОбработкиШтрихкода.Форма = Неопределено;
			Форма.КодМаркировкиДляУточнения = ПараметрыЗавершенияОбработкиШтрихкода;
			Форма.ПодключитьОбработчикОжидания("Подключаемый_ОткрытьФормуУточненияДанных", 0.1, Истина);
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыСканирования.ВыводитьСообщенияОбОшибках Тогда
		
		Если Не ПараметрыСканирования.РежимБРМК И (РезультатОбработки.ОбщаяОшибка
			Или РезультатОбработки.ОшибкаДопустимостиВидовПродукции
			Или (РезультатОбработки.ВидыПродукции.Количество() = 0 И ЗначениеЗаполнено(РезультатОбработки.ТекстОшибки))) Тогда
			
			ИнформироватьВРасширеннойВерсииОНевозможностиДобавления(Форма, РезультатОбработки, ПараметрыСканирования, Истина);
			Возврат;
			
		КонецЕсли;
		
		Если ПараметрыСканирования.РежимБРМК
			И (РезультатОбработки.ДанныеШтрихкода <> Неопределено
				И РезультатОбработки.ДанныеШтрихкода.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая")
					Или ЗначениеЗаполнено(РезультатОбработки.ТекстОшибки)) Тогда
			
			ПараметрыЗавершенияОбработкиШтрихкода.Форма = Неопределено;
			Форма.КодМаркировкиДляУточнения = ПараметрыЗавершенияОбработкиШтрихкода;
			Форма.ПодключитьОбработчикОжидания("Подключаемый_СообщитьОНевозможностиПодбора", 0.1, Истина);
			
			Возврат;
			
		КонецЕсли;
		
		Если ПараметрыСканирования.ДопустимыеВидыПродукции.Количество() > 1 Тогда
		
			ВидовПродукции = 0;
			Для Каждого ВидПродукции Из РезультатОбработки.ВидыПродукции Цикл
				Если ПараметрыСканирования.ДопустимыеВидыПродукции.Найти(ВидПродукции) <> Неопределено Тогда
					ВидовПродукции = ВидовПродукции + 1;
				КонецЕсли;
			КонецЦикла;
			
			Если ВидовПродукции > 1 И ЗначениеЗаполнено(РезультатОбработки.ТекстОшибки) Тогда
				
				ИнформироватьВРасширеннойВерсииОНевозможностиДобавления(Форма, РезультатОбработки, ПараметрыСканирования);
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
	
	Если ПрисутствуетАлкогольнаяПродукция(ПараметрыСканирования.ДопустимыеВидыПродукции, ПараметрыСканирования)
		И ПрисутствуетАлкогольнаяПродукция(РезультатОбработки.ВидыПродукции, ПараметрыСканирования)
		И ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда
		
		//@skip-check wrong-string-literal-content
		МодульОбработки = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеЕГАИСКлиент");
		Если МодульОбработки.ЗавершитьОбработкуШтрихкода(ПараметрыЗавершенияОбработкиШтрихкода) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПрисутствуетПродукцияИСМП(ПараметрыСканирования.ДопустимыеВидыПродукции, Истина)
		И ПрисутствуетПродукцияИСМП(РезультатОбработки.ВидыПродукции, Истина) Тогда
		
		//@skip-check wrong-string-literal-content
		МодульОбработки = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеОбщегоНазначенияИСМПКлиент");
		Если МодульОбработки.ЗавершитьОбработкуВводаШтрихкода(ПараметрыЗавершенияОбработкиШтрихкода, Ложь) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗавершениеОбработки <> "" Тогда
		ДополнительныеПараметры = Новый Структура;
		Если ПараметрыЗавершенияОбработкиШтрихкода.ОбработкаДанныхТСД Тогда
			ДополнительныеПараметры.Вставить("ОбработкаДанныхТСД");
		КонецЕсли;
		ОповещениеЗавершениеОбработки = Новый ОписаниеОповещения(ЗавершениеОбработки, Форма, ДополнительныеПараметры);
		Если ПараметрыЗавершенияОбработкиШтрихкода.ВызовИзФормыДокумента Тогда
			ВыполнитьОбработкуОповещения(ОповещениеЗавершениеОбработки, РезультатОбработки);
		Иначе
			ВыполнитьОбработкуОповещения(ОповещениеЗавершениеОбработки, РезультатОбработки.ДанныеШтрихкода);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Инициализирует структуру для завершения обработки штрихкода.
//
// Параметры:
//  ВыполнитьДействие - Строка  - Имя обработчика оповещения действия после уточнения данных на форме
// ОбработатьШтрихкод  - Строка - Имя обработчика оповещения для повторной обработки штрихкода.
// ЗавершениеОбработки - Строка - Имя обработчика оповещения действия после завершения обработки штрихкода.
//
// Возвращаемое значение:
//  Структура - Описание:
// * Форма - ФормаКлиентскогоПриложения - Форма, для которой выполняется обработка.
// * ВызовИзФормыДокумента - Булево - Истина, в случае выполнения вызова из формы документа, Ложь - из формы обработки
// проверки и подбора.
// * ОбработкаДанныхТСД - Булево - Истина Истина если это обработка данных ТСД (используется в форме проверки ЕГАИС).
// * ПараметрыСканирования - (См. ПараметрыСканирования).
// * КэшированныеЗначения - Структура - Содержит поля кэшируемых значений.
// * ДанныеШтрихкода - (См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьДанныеШтрихкода).
// * РезультатОбработкиШтрихкода - (См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьРезультатОбработкиШтрихкода).
// * ВыполнитьДействие   - Строка - Имя обработчика оповещения действия после уточнения данных на форме.
// * ОбработатьШтрихкод  - Строка - Имя обработчика оповещения для повторной обработки штрихкода.
// * ЗавершениеОбработки - Строка - Имя обработчика оповещения действия после завершения обработки штрихкода.
Функция ПараметрыЗавершенияОбработкиШтрихкода(
	ВыполнитьДействие   = "ОбработкаКодаМаркировкиВыполнитьДействие",
	ОбработатьШтрихкод  = "ОбработатьКодМаркировки",
	ЗавершениеОбработки = "ПослеОбработкиШтрихкодов") Экспорт
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("Форма");
	Параметры.Вставить("ВызовИзФормыДокумента", Истина);
	Параметры.Вставить("ОбработкаДанныхТСД",    Ложь);
	Параметры.Вставить("ПараметрыСканирования");
	Параметры.Вставить("КэшированныеЗначения");
	
	Параметры.Вставить("ДанныеШтрихкода");
	Параметры.Вставить("РезультатОбработкиШтрихкода");
	
	Параметры.Вставить("ВыполнитьДействие",   ВыполнитьДействие);
	Параметры.Вставить("ОбработатьШтрихкод",  ОбработатьШтрихкод);
	Параметры.Вставить("ЗавершениеОбработки", ЗавершениеОбработки);
	
	//@skip-check constructor-function-return-section
	Возврат Параметры;
	
КонецФункции

// Анализирует результат проверки на необходимость уточнения каких-либо данных у пользователя.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, для которой необходимо выполнить обработку штрихкода.
//  РезультатОбработкиШтрихкода - (См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьРезультатОбработкиШтрихкода).
//  ПараметрыСканирования - (см. ПараметрыСканирования).
// Возвращаемое значение:
//  Булево - Истина, если требуется уточнить какие-либо данные у пользователя.
Функция ТребуетсяУточнениеДанныхУПользователя(Форма, РезультатОбработкиШтрихкода, ПараметрыСканирования) Экспорт
	
	Если РезультатОбработкиШтрихкода.ТребуетсяВыборНоменклатуры Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если РезультатОбработкиШтрихкода.ОткрытьФормуВводаКодаМаркировки Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если РезультатОбработкиШтрихкода.ТребуетсяСопоставлениеНоменклатуры Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если РезультатОбработкиШтрихкода.ТребуетсяУточнениеКоэффициентовУпаковок Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПрисутствуетАлкогольнаяПродукция(РезультатОбработкиШтрихкода.ВидыПродукции, ПараметрыСканирования)
		И ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда
		
		//@skip-check wrong-string-literal-content
		МодульШтрихкодированиеЕГАИСКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеЕГАИСКлиент");
		
		Если МодульШтрихкодированиеЕГАИСКлиент.ТребуетсяУточнениеДанныхУПользователя(РезультатОбработкиШтрихкода) Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПрисутствуетТабачнаяПродукция(РезультатОбработкиШтрихкода.ВидыПродукции)
			Или ПрисутствуетПродукцияИСМП(РезультатОбработкиШтрихкода.ВидыПродукции) Тогда
		
		//@skip-check wrong-string-literal-content
		МодульШтрихкодированиеИСМПКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеОбщегоНазначенияИСМПКлиент");
		
		Если МодульШтрихкодированиеИСМПКлиент.ТребуетсяУточнениеДанныхУПользователя(РезультатОбработкиШтрихкода) Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура ДополнитьДанныеШтрихкодаМиниВерсия(РезультатОбработкиШтрихкода, ДанныеШтрихкода)
	
	Если РезультатОбработкиШтрихкода.Свойство("ТребуетсяАвторизацияИСМП")
		И РезультатОбработкиШтрихкода.ТребуетсяАвторизацияИСМП Тогда
		ДанныеШтрихкода.Вставить("ТребуетсяАвторизацияИСМП", Истина);
	КонецЕсли;
	
	Если РезультатОбработкиШтрихкода.Свойство("ТребуетсяАвторизацияИСМПРозница")
		И РезультатОбработкиШтрихкода.ТребуетсяАвторизацияИСМПРозница Тогда
		ДанныеШтрихкода.Вставить("ТребуетсяАвторизацияИСМПРозница", Истина);
	КонецЕсли;
	
	Если РезультатОбработкиШтрихкода.Свойство("ТребуетВзвешивания")
		И РезультатОбработкиШтрихкода.ТребуетВзвешивания Тогда
		ДанныеШтрихкода.Вставить("ТребуетсяУточнениеВеса", Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПараметрыСканирования

// Включает поддержку алкогольной продукции и заполняет параметры сканирования с учетом ее специфики.
//
// Параметры:
//  ПараметрыСканирования - (См. ПараметрыСканирования).
//  Контекст - Неопределено, ФормаКлиентскогоПриложения, ДокументСсылка - Описание
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции, по которому будут инициализированы параметры сканирования.
//  ФормаВыбора - ФормаКлиентскогоПриложения - форма выбора.
Процедура ЗаполнитьПараметрыСканированияДляАлкогольнойПродукции(ПараметрыСканирования, Контекст, ВидПродукции, ФормаВыбора)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ГосИС.ЕГАИС") Тогда
		Если (ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная")
			Или ВидПродукции = Неопределено) Тогда
			
			//@skip-check wrong-string-literal-content
			Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеОбщегоНазначенияЕГАИСКлиентСервер");
			Модуль.ЗаполнитьПараметрыСканирования(ПараметрыСканирования, Контекст, ВидПродукции, ФормаВыбора);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Включает поддержку табачной продукции и заполняет параметры сканирования с учетом ее специфики.
//
// Параметры:
//  ПараметрыСканирования - См. ПараметрыСканирования
//  Контекст - Неопределено, ФормаКлиентскогоПриложения, ДокументСсылка - Контекст
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции, по которому будут инициализированы параметры сканирования
//  ФормаВыбора - ФормаКлиентскогоПриложения - форма выбора
//  ПараметрыРежимаИсправленияОшибок - Структура - Параметры режима исправления ошибок
Процедура ЗаполнитьПараметрыСканированияДляТабачнойПродукции(ПараметрыСканирования, Контекст, ВидПродукции, ФормаВыбора, ПараметрыРежимаИсправленияОшибок = Неопределено)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ГосИС.ИСМП")
		И (ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияМОТП(ВидПродукции) Или ВидПродукции = Неопределено) Тогда
		
		//@skip-check wrong-string-literal-content
		МодульШтрихкодированиеМОТПКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеОбщегоНазначенияМОТПКлиентСервер");
		МодульШтрихкодированиеМОТПКлиентСервер.ЗаполнитьПараметрыСканирования(ПараметрыСканирования, Контекст, ВидПродукции, ФормаВыбора, ПараметрыРежимаИсправленияОшибок);
		
	КонецЕсли;
	
КонецПроцедуры

// Включает поддержку обувной продукции и заполняет параметры сканирования с учетом ее специфики.
//
// Параметры:
//  ПараметрыСканирования - См. ПараметрыСканирования
//  Контекст - Неопределено, ФормаКлиентскогоПриложения, ДокументСсылка - Контекст
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции, по которому будут инициализированы параметры сканирования
//  ФормаВыбора - ФормаКлиентскогоПриложения - форма выбора
//  ПараметрыРежимаИсправленияОшибок - Структура - Параметры режима исправления ошибок
Процедура ЗаполнитьПараметрыСканированияДляПродукцииИСМП(ПараметрыСканирования, Контекст, ВидПродукции, ФормаВыбора, ПараметрыРежимаИсправленияОшибок = Неопределено)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
		
		Если ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияИСМП(ВидПродукции)
			Или Не ЗначениеЗаполнено(ВидПродукции) Тогда
			
			//@skip-check wrong-string-literal-content
			МодульШтрихкодированиеИСМПКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеОбщегоНазначенияИСМПКлиентСервер");
			МодульШтрихкодированиеИСМПКлиентСервер.ЗаполнитьПараметрыСканирования(Контекст, ВидПродукции, ПараметрыСканирования, ПараметрыРежимаИсправленияОшибок);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыСканированияРасширенные(ПараметрыСканирования, Контекст)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ГосИС.ИСМП.Расширенная") Тогда
		
		//@skip-check wrong-string-literal-content
		МодульШтрихкодированиеИСКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеИСКлиентСервер");
		МодульШтрихкодированиеИСКлиентСервер.ЗаполнитьПараметрыСканирования(ПараметрыСканирования, Контекст);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбращениеКРасширеннойВерсииГосИС

Процедура ЗаполнитьРасширенныеПараметрыРазбораКодаМаркировки(ПараметрыСканирования, ПользовательскиеПараметрыРазбораКодаМаркировки)
	
	Если ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда
		
		//@skip-check wrong-string-literal-content
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеИСКлиент");
		Модуль.ЗаполнитьРасширенныеПараметрыРазбораКодаМаркировки(ПараметрыСканирования, ПользовательскиеПараметрыРазбораКодаМаркировки);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗавершитьРасширеннуюОбработкуШтрихкода(Форма, ПараметрыСканирования, ДанныеШтрихкода)

	Если ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда
		
		//@skip-check wrong-string-literal-content
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеИСКлиент");
		Модуль.ЗавершитьРасширеннуюОбработкуШтрихкода(Форма, ПараметрыСканирования, ДанныеШтрихкода);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнформироватьВРасширеннойВерсииОНевозможностиДобавления(Форма, РезультатОбработки, ПараметрыСканирования, ОбщаяОшибка = Ложь)
	
	Если ПараметрыСканирования.РасширеннаяВерсияГосИС И Не ПараметрыСканирования.РежимБРМК Тогда
		
		//@skip-check wrong-string-literal-content
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеИСКлиент");
		Модуль.ИнформироватьВРасширеннойВерсииОНевозможностиДобавления(Форма, РезультатОбработки, ПараметрыСканирования, ОбщаяОшибка);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнительныеПроверкиПередЗавершениемОбработкиШтрихкода(Форма, ПараметрыСканирования, РезультатОбработкиШтрихкода)
	
	Если ПрисутствуетТабачнаяПродукция(РезультатОбработкиШтрихкода.ВидыПродукции)
			Или ПрисутствуетПродукцияИСМП(РезультатОбработкиШтрихкода.ВидыПродукции) Тогда
		
		МодульШтрихкодированиеИСМПКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеОбщегоНазначенияИСМПКлиент");
		МодульШтрихкодированиеИСМПКлиент.ДополнительныеПроверкиПередЗавершениемОбработкиШтрихкода(Форма, ПараметрыСканирования, РезультатОбработкиШтрихкода);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

