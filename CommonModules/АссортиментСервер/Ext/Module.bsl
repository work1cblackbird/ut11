////////////////////////////////////////////////////////////////////////////////
// Модуль "Ассортимент", содержит процедуры и функции для
// проверки корректности документов изменения ассортимента и установки квот ассортимента,
// обработки регистрации ассортимента в регистрах,
// обработки введенных пользователем данных,
// а также содержит ряд вспомогательных функций и процедур.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область Проведение

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Свойства - См. ПроведениеДокументов.СвойстваДокумента
//
// Возвращаемое значение:
//  Структура - См. ПроведениеДокументов.ПараметрыУчетногоМеханизма
//
Функция ПараметрыДляПроведенияДокумента(Документ, Свойства) Экспорт
	
	Параметры = ПроведениеДокументов.ПараметрыУчетногоМеханизма();
	
	// Проведение
	Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыСведений.Ассортимент);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыСведений.КвотыАссортимента);
		
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Возвращает тексты запросов для сторнирования движений при исправлении документов
// 
// Параметры:
// 	МетаданныеДокумента - ОбъектМетаданныхДокумент - Метаданные документа, который проводится.
// 
// Возвращаемое значение:
// 	Соответствие - Соответствие полного имени регистра тексту запроса сторнирования
//
Функция ТекстыЗапросовСторнирования(МетаданныеДокумента) Экспорт
	
	ТекстыЗапросов = Новый Соответствие();
	
	Возврат ТекстыЗапросов;
	
КонецФункции

// Процедура формирования движений по подчиненным регистрам управления ассортиментом.
//
// Параметры:
//	ТаблицыДляДвижений - Структура - таблицы данных документа
//	Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//	Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "Ассортимент");
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "КвотыАссортимента");
	
КонецПроцедуры

// Дополняет текст запроса механизма проверки даты запрета по таблице изменений.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 
// Возвращаемое значение:
//	Соответствие - соответствие имен таблиц изменения регистров и текстов запросов.
//	
Функция ТекстыЗапросовКонтрольДатыЗапретаПоТаблицеИзменений(Запрос) Экспорт

	СоответствиеТекстовЗапросов = Новый Соответствие();
	Возврат СоответствиеТекстовЗапросов;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииПроверкиКорректностиЗаполненияДокументов

// Функция проверяет, соответствует ли реквизит "ЦенаВключаетНДС"
// у всех видов цен в табличной части "Товары" документа "ИзменениеАссортимента"
// и у вида цен, указанного в объекте планирования этого документа.
// В случае нахождения расхождений выводит информационное сообщение
// Вызывается ПЕРЕД записью соответствующего документа-объекта.
//
// Параметры: 
//  ДокументОбъект - ДокументОбъект.ИзменениеАссортимента
//
// Возвращаемое значение: 
//  Булево - если реквизит "ЦенаВключаетНДС" все виды цен совпадает, возвращается Истина, иначе Ложь.
//
Функция ВидыЦенИзмененияАссортиментаСоответствуютПравилам(ДокументОбъект) Экспорт
	ВсеВерно=Истина;
	Запрос = Новый Запрос;
	ТекстЗапроса = "
	               |ВЫБРАТЬ
	               |	ТаблицаТовары.НомерСтроки,
	               |	ТаблицаТовары.ВидЦены
				   |ПОМЕСТИТЬ ТаблицаТовары
	               |ИЗ
	               |	&ТаблицаТовары КАК ТаблицаТовары
				   |;
	               |ВЫБРАТЬ
	               |	ТаблицаТовары.НомерСтроки,
	               |	ТаблицаТовары.ВидЦены,
	               |	ТаблицаТовары.ВидЦены.Наименование КАК ВидЦенНаименование
	               |ИЗ
	               |	ТаблицаТовары КАК ТаблицаТовары
	               |ГДЕ
	               |	ТаблицаТовары.ВидЦены.ЦенаВключаетНДС <> &ЦенаВключаетНДС
	               |	ИЛИ (НЕ ТаблицаТовары.ВидЦены.ИспользоватьПриПродаже)";
	Запрос.Текст = ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаТовары", ДокументОбъект.Товары.Выгрузить());
	РеквизитыОбъекта = Новый Структура;
	РеквизитыОбъекта.Вставить("ЦенаВключаетНДС", "РозничныйВидЦены.ЦенаВключаетНДС");
	ДанныеВидаЦен = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОбъект.ОбъектПланирования, РеквизитыОбъекта);
	Запрос.УстановитьПараметр("ЦенаВключаетНДС", ДанныеВидаЦен.ЦенаВключаетНДС);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВсеВерно = Ложь;
		ТекстСообщения = НСтр("ru = 'В строке %1 выбран некорректный вид цен %2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
																				 Выборка.НомерСтроки,
																				 Выборка.ВидЦенНаименование);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			ДокументОбъект,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки, "ВидЦены"),
			"Объект",
			Истина);
	КонецЦикла;
	
	Возврат ВсеВерно;	
КонецФункции

#КонецОбласти

// Функция возвращает значение текущего объекта планирования ассортимента в зависимости от настроек.
//
// Параметры:
//  ОбъектПроверки  - СправочникСсылка.Склады, СправочникСсылка.ФорматыМагазинов - Склад или формат для которого
//                                                                                 определяется объект планирования
//  НаДату  - Дата - Дата на которую определяется текущий объект планирования.
//
// Возвращаемое значение:
//   СправочникСсылка.ФорматыМагазинов, СправочникСсылка.Склады   - текущий объект планирования, в зависимости от ФО -
//   формат магазина или склад-магазин.
//
Функция ОбъектПланирования(ОбъектПроверки, Знач НаДату = Неопределено) Экспорт 
	
	Если Не ЗначениеЗаполнено(НаДату) Тогда
		НаДату = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если ТипЗнч(ОбъектПроверки) = Тип("СправочникСсылка.Склады") И ПолучитьФункциональнуюОпцию("ИспользоватьФорматыМагазинов") Тогда
		
		ОбъектПланирования = РегистрыСведений.ИсторияИзмененияФорматовМагазинов.ТекущийФормат(ОбъектПроверки, НаДату);
	Иначе
		
		ОбъектПланирования = ОбъектПроверки;
		
	КонецЕсли;
	
	Возврат ОбъектПланирования;

КонецФункции
 
#Область ПрочиеПроцедурыИФункции

// Процедура проверяет стадию документа "ИзменениеАссортимента"
// Вызывается при обработке заполнения документа "Установка цен" на основании "ИзменениеАссортимента"
// если документ переводит товары в стадию "ЗапрещеныЗакупкиИПродажи"
// то принудительно вызывается исключение и формируется соответствующий текст ошибки.
// 
// Параметры: 
// 		ДокументОснование - ДокументСсылка.ИзменениеАссортимента.
Процедура ПроверитьНеобходимостьУстановкиЦенНаОсновании(ДокументОснование) Экспорт
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Стадия") = Перечисления.СтадииАссортимента.ЗапрещеныЗакупкиИПродажи Тогда
			
			ТекстОшибки = НСтр("ru='Документ %1 запрещает и закупки, и продажи.%2Установка цен на основании такого документа невозможна.'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ДокументОснование, Символы.ПС);
			
			ВызватьИсключение ТекстОшибки;
			
	КонецЕсли;
КонецПроцедуры

// Функция получает таблицы товаров и видов цен, содержащихся в табличной части документа "ИзменениеАссортимента"
// вызывается при вводе на основании изменения ассортимента документа установки цен.
//
// Параметры:
//  ДокументОснование - ДокументСсылка.ИзменениеАссортимента
//
// Возвращаемое значение:
//  Массив - результат выполнения пакета запросов.
//
Функция РезультатПакетаВидыЦенИТоварыДляУстановкиПоАссортименту(ДокументОснование) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИзменениеАссортиментаТовары.Номенклатура КАК Номенклатура,
	|	ИзменениеАссортиментаТовары.ВидЦены КАК ВидЦены
	|ИЗ
	|	Документ.ИзменениеАссортимента.Товары КАК ИзменениеАссортиментаТовары
	|ГДЕ
	|	ИзменениеАссортиментаТовары.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ИзменениеАссортиментаТовары.ВидЦены КАК ВидЦены
	|ИЗ
	|	Документ.ИзменениеАссортимента.Товары КАК ИзменениеАссортиментаТовары
	|ГДЕ
	|	ИзменениеАссортиментаТовары.Ссылка = &ДокументОснование";
	Запрос.УстановитьПараметр("ДокументОснование",ДокументОснование);
	
	РезультатПакета=Запрос.ВыполнитьПакет();
	
	Возврат РезультатПакета;
	
КонецФункции

// Функция возвращает признак контроля ассортимента по истории изменений
//
// Параметры:
//  Склад  - СправочникСсылка.Склады - Склад/магазин для которого проверяется контроль ассортимента
//  НаДату  - Дата - Дата на которую производится проверка контроля ассортимента.
//
// Возвращаемое значение:
//   Булево   - Истина, если ассортимент контролируется на складе и Ложь, если нет.
//
Функция КонтролироватьАссортимент(Знач Склад, Знач НаДату = Неопределено) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(НаДату) Тогда
		НаДату = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсторияИзмененияФорматовМагазиновСрезПоследних.КонтролироватьАссортимент
	|ИЗ
	|	РегистрСведений.ИсторияИзмененияФорматовМагазинов.СрезПоследних(&НаДату, Склад = &Склад) КАК ИсторияИзмененияФорматовМагазиновСрезПоследних";
	
	Запрос.УстановитьПараметр("НаДату", НаДату);
	Запрос.УстановитьПараметр("Склад", Склад);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		Возврат ВыборкаДетальныеЗаписи.КонтролироватьАссортимент;
		
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции 
 
// Функция возвращает признак контроля ассортимента по истории изменений
//
// Параметры:
//  Склад  - СправочникСсылка.Склады - Склад/магазин для которого проверяется контроль ассортимента
//  НаДату  - Дата - Дата на которую производится проверка контроля ассортимента.
//
// Возвращаемое значение:
//   Булево   - Истина, если ассортимент контролируется на складе и Ложь, если нет.
//
Функция ФорматМагазинаПоСкладу(Знач Склад, Знач НаДату = Неопределено) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(НаДату) Тогда
		НаДату = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсторияИзмененияФорматовМагазиновСрезПоследних.ФорматМагазина
	|ИЗ
	|	РегистрСведений.ИсторияИзмененияФорматовМагазинов.СрезПоследних(&НаДату, Склад = &Склад) КАК
	|		ИсторияИзмененияФорматовМагазиновСрезПоследних
	|ГДЕ
	|	ИсторияИзмененияФорматовМагазиновСрезПоследних.ФорматМагазина <> ЗНАЧЕНИЕ(Справочник.ФорматыМагазинов.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("НаДату", НаДату);
	Запрос.УстановитьПараметр("Склад", Склад);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		Возврат ВыборкаДетальныеЗаписи.ФорматМагазина;
		
	КонецЕсли;
	
	Возврат Склад;

КонецФункции 

// Процедура проверяет вхождение в ассортимент магазина на указанную дату товаров в подборе, не входящих в основание
// 
// Параметры:
// 	Объект - ДокументОбъект.ЗаказНаПеремещение - объект подбора
// 	       - ДокументОбъект.ЗаказПоставщику - объект подбора 
// 	ИмяРеквизитаСклад - Строка - указывает на реквизит склад, ассортимент которого проверяется
// 	ТаблицаТоваров - ТаблицаЗначений - таблица товаров, добавленных в табличную часть документа, для которых нужно выполнить проверку.
Процедура ПроверитьАссортиментТаблицыПодобранныхТоваров(Объект, ИмяРеквизитаСклад, ТаблицаТоваров = Неопределено) Экспорт
	
	// ДокументОбъект.ЗаказПоставщику -  
	 
	УстановитьПривилегированныйРежим(Истина);
	
	Магазин = Объект[ИмяРеквизитаСклад];
	Дата = ?(ЗначениеЗаполнено(Объект.ЖелаемаяДатаПоступления), Объект.ЖелаемаяДатаПоступления, Объект.Дата);
	Дата = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса());
	
	КонтролироватьАссортимент = АссортиментСерверПовтИсп.КонтролироватьАссортимент(Магазин, Дата);
	
	Если КонтролироватьАссортимент Тогда
		Запрос = Новый Запрос;
		Если ТипЗнч(ТаблицаТоваров) = Тип("ТаблицаЗначений") Тогда
			ТекстЗапроса = "
			|ВЫБРАТЬ
			|	Товары.Номенклатура КАК Номенклатура
			|ПОМЕСТИТЬ Товары
			|ИЗ
			|	&Товары КАК Товары
			|;
			|
			|ВЫБРАТЬ
			|	ТоварыДокумента.НомерСтроки КАК НомерСтроки,
			|	ТоварыДокумента.Номенклатура КАК Номенклатура
			|ПОМЕСТИТЬ ТоварыДокумента
			|ИЗ
			|	&ТоварыДокумента КАК ТоварыДокумента
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТоварыДокумента.НомерСтроки КАК НомерСтроки,
			|	ТоварыДокумента.Номенклатура КАК Номенклатура,
			|	ТоварыДокумента.Номенклатура.Наименование КАК НоменклатураНаименование
			|ИЗ
			|	ТоварыДокумента КАК ТоварыДокумента
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Товары КАК Товары
			|		ПО ТоварыДокумента.Номенклатура = Товары.Номенклатура
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Ассортимент.СрезПоследних(КОНЕЦПЕРИОДА(&Период, ДЕНЬ), ОбъектПланирования = &ОбъектПланирования) КАК Ассортимент
			|		ПО ТоварыДокумента.Номенклатура = Ассортимент.Номенклатура
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Ассортимент.СрезПоследних(КОНЕЦПЕРИОДА(&Период, ДЕНЬ), ОбъектПланирования = &ОбъектПланирования И Номенклатура В (ВЫБРАТЬ РАЗЛИЧНЫЕ Т.Ссылка.Владелец КАК Номенклатура ИЗ Справочник.ВариантыКомплектацииНоменклатуры.Товары КАК Т ВНУТРЕННЕЕ Соединение ТоварыДокумента КАК ТД ПО Т.Номенклатура = ТД.Номенклатура)) КАК АссортиментНаборы
			|		ПО ТоварыДокумента.Номенклатура = АссортиментНаборы.Номенклатура
			|ГДЕ
			|	ЕСТЬNULL(АссортиментНаборы.РазрешеныЗакупки, ЛОЖЬ) = ЛОЖЬ И ЕСТЬNULL(Ассортимент.РазрешеныЗакупки, ЛОЖЬ) = ЛОЖЬ
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
			Запрос.УстановитьПараметр("Товары", ТаблицаТоваров);
		Иначе
			ТекстЗапроса = "
			|ВЫБРАТЬ
			|	ТоварыДокумента.НомерСтроки КАК НомерСтроки,
			|	ТоварыДокумента.Номенклатура КАК Номенклатура
			|ПОМЕСТИТЬ ТоварыДокумента
			|ИЗ
			|	&ТоварыДокумента КАК ТоварыДокумента
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТоварыДокумента.НомерСтроки КАК НомерСтроки,
			|	ТоварыДокумента.Номенклатура КАК Номенклатура,
			|	ТоварыДокумента.Номенклатура.Наименование КАК НоменклатураНаименование
			|ИЗ
			|	ТоварыДокумента КАК ТоварыДокумента
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Ассортимент.СрезПоследних(КОНЕЦПЕРИОДА(&Период, ДЕНЬ), ОбъектПланирования = &ОбъектПланирования) КАК Ассортимент
			|		ПО ТоварыДокумента.Номенклатура = Ассортимент.Номенклатура
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Ассортимент.СрезПоследних(КОНЕЦПЕРИОДА(&Период, ДЕНЬ), ОбъектПланирования = &ОбъектПланирования И Номенклатура В (ВЫБРАТЬ РАЗЛИЧНЫЕ Т.Ссылка.Владелец КАК Номенклатура ИЗ Справочник.ВариантыКомплектацииНоменклатуры.Товары КАК Т ВНУТРЕННЕЕ Соединение ТоварыДокумента КАК ТД ПО Т.Номенклатура = ТД.Номенклатура)) КАК АссортиментНаборы
			|		ПО ТоварыДокумента.Номенклатура = АссортиментНаборы.Номенклатура
			|			И АссортиментНаборы.РазрешеныЗакупки
			|ГДЕ
			|	ЕСТЬNULL(АссортиментНаборы.РазрешеныЗакупки, ЛОЖЬ) = ЛОЖЬ И ЕСТЬNULL(Ассортимент.РазрешеныЗакупки, ЛОЖЬ) = ЛОЖЬ
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
			
		КонецЕсли;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("ТоварыДокумента", Объект.Товары.Выгрузить());
		
		
		Запрос.УстановитьПараметр("Период", Дата);
		ОбъектПланирования = АссортиментСервер.ОбъектПланирования(Магазин, Дата);
		Запрос.УстановитьПараметр("ОбъектПланирования", ОбъектПланирования);
		
		Результат=Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ТекстСообщения = НСтр("ru = 'Товар %1 не включен в ассортимент или запрещен к закупке.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Выборка.НоменклатураНаименование);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				Объект.Ссылка,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки, "Номенклатура"),
				"Объект",
				Ложь);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает массив видов цен, которые назначены для объекта планирования на дату
//
// Параметры:
//  ОбъектПланирования - СправочникСсылка.Склады,СправочникСсылка.ФорматыМагазинов
//  Дата			 - Дата 
//  ОтборПоРесурсам	 - Структура.
// 
// Возвращаемое значение:
//  Массив - Виды цен по ассортименту.
//
Функция ВидыЦенПоАссортименту(ОбъектПланирования, Знач Дата, ОтборПоРесурсам = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ОбъектПланирования = ОбъектПланирования(ОбъектПланирования, Дата);
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Ассортимент.ВидЦены КАК ВидЦены
	|ИЗ
	|	РегистрСведений.Ассортимент.СрезПоследних(&Дата, ОбъектПланирования = &ОбъектПланирования) КАК Ассортимент
	|ГДЕ
	|	ИСТИНА
	|	И &ОтборПоРесурсам";
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("ОбъектПланирования", ОбъектПланирования);
	
	
	Если ОтборПоРесурсам <> Неопределено Тогда
		ОтборПоРесурсамСтрока = "ИСТИНА";
	Иначе
		ОтборПоРесурсамСтрока = "";
		Для Каждого КлючЗначение Из ОтборПоРесурсам Цикл
			ОтборПоРесурсамСтрока = ОтборПоРесурсамСтрока + "
			|	 Ассортимент." + КлючЗначение.Ключ + " = &" +  КлючЗначение.Ключ;
			Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ОтборПоРесурсам", ОтборПоРесурсамСтрока);
	
	Запрос.Текст = ТекстЗапроса;
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидЦены");
	
КонецФункции

// Функция получает значение цены продажи
// в соответствии с видом цен, указанным в регистре "Ассортимент",
// для номенклатуры и склада на указанную дату.
//
// Параметры: 
//		ПараметрыОтбора - Структура - Параметры отбора для цены.
//
// Возвращаемое значение:
//  Число - Цена
//
Функция ПолучитьЦенуПоАссортименту(ПараметрыОтбора) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	ОбъектПланирования = АссортиментСервер.ОбъектПланирования(ПараметрыОтбора.Склад, ПараметрыОтбора.Дата);
	СтруктураАссортимента = СтруктураСостоянияАссортиментаТовараВФормате(ПараметрыОтбора.Номенклатура, ОбъектПланирования, ПараметрыОтбора.Дата);
	
	ВидЦены = СтруктураАссортимента.ВидЦены;
	Запрос.УстановитьПараметр("ВидЦены", ВидЦены);
	Запрос.УстановитьПараметр("БазоваяВалюта", ЗначениеНастроекПовтИсп.БазоваяВалютаПоУмолчанию());
	
	Для Каждого Параметр Из ПараметрыОтбора Цикл
		Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	Запрос.Текст =
	"
	|ВЫБРАТЬ
	|	ЕстьNULL(&ТекстЗапросаКоэффициентУпаковки1, 1)
	|	* ЕстьNULL(ЦеныНоменклатурыСрезПоследних.Цена,0)
	|	* ВЫБОР
	|		КОГДА &Валюта <> ЦеныНоменклатурыСрезПоследних.Валюта
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(КурсыВалютыЦены.КурсЗнаменатель, 0) > 0
	|						И ЕСТЬNULL(КурсыВалютыЦены.КурсЧислитель, 0) > 0
	|						И ЕСТЬNULL(КурсыВалюты.КурсЗнаменатель, 0) > 0
	|						И ЕСТЬNULL(КурсыВалюты.КурсЧислитель, 0) > 0
	|					ТОГДА 
	|						(КурсыВалютыЦены.КурсЧислитель * КурсыВалюты.КурсЗнаменатель)
	|						/ (КурсыВалюты.КурсЧислитель * КурсыВалютыЦены.КурсЗнаменатель)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ /ЕстьNULL(&ТекстЗапросаКоэффициентУпаковки2,1) КАК Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(КОНЕЦПЕРИОДА(&Дата, ДЕНЬ), 
	|				ВидЦены = ВЫРАЗИТЬ(&ВидЦены КАК Справочник.ВидыЦен)
	|				И Номенклатура = ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура)
	|				И Характеристика = ВЫРАЗИТЬ(&Характеристика КАК Справочник.ХарактеристикиНоменклатуры)
	|) КАК ЦеныНоменклатурыСрезПоследних
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата, БазоваяВалюта = &БазоваяВалюта) КАК КурсыВалютыЦены
	|ПО 
	|	ЦеныНоменклатурыСрезПоследних.Валюта = КурсыВалютыЦены.Валюта
	|	
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта И БазоваяВалюта = &БазоваяВалюта) КАК КурсыВалюты
	|	ПО ИСТИНА
	|";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения)",
		"ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура)"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЦеныНоменклатурыСрезПоследних.Упаковка",
		"ЦеныНоменклатурыСрезПоследних.Номенклатура"));	
	
	Цена = 0;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Цена = Выборка.Цена;
	КонецЕсли;
	Возврат Цена;
	
КонецФункции

// Функция получает актуальные значения ресурсов регистра сведений "Ассортимент" на указанную дату 
// для товара и формата магазина.
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура
//  ОбъектПроверки - СправочникСсылка.ФорматыМагазинов, СправочникСсылка.Склады - Склад или формат магазина
//  НаДату - Дата - Дата на которую определяется текущий объект планирования.
//
// Возвращаемое значение:
//  Структура - аналогична выборке всех ресурсов из регистра.
//
Функция СтруктураСостоянияАссортиментаТовараВФормате(Номенклатура, ОбъектПроверки, Знач НаДату) Экспорт
	
	Если Не ЗначениеЗаполнено(НаДату) Тогда
		НаДату = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Запрос=Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Ассортимент.РольАссортимента КАК РольАссортимента,
	|	Ассортимент.РазрешеныЗакупки КАК РазрешеныЗакупки,
	|	Ассортимент.РазрешеныПродажи КАК РазрешеныПродажи,
	|	Ассортимент.РейтингПродаж КАК РейтингПродаж,
	|	Ассортимент.ВидЦены КАК ВидЦены
	|ИЗ
	|	РегистрСведений.Ассортимент.СрезПоследних(
	|			КОНЕЦПЕРИОДА(&НаДату, ДЕНЬ),
	|			ОбъектПланирования = &ОбъектПланирования
	|				И (Номенклатура = &Номенклатура ИЛИ Номенклатура В (ВЫБРАТЬ РАЗЛИЧНЫЕ Т.Ссылка.Владелец КАК Номенклатура ИЗ Справочник.ВариантыКомплектацииНоменклатуры.Товары КАК Т ГДЕ Т.Номенклатура = &Номенклатура))) КАК Ассортимент
	|");
	Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
	
	ОбъектПланирования = АссортиментСервер.ОбъектПланирования(ОбъектПроверки, НаДату);
	Запрос.УстановитьПараметр("ОбъектПланирования", ОбъектПланирования);
	
	Запрос.УстановитьПараметр("НаДату",НаДату);
	РезультатПакета=Запрос.ВыполнитьПакет();
	ИндексПоследнего=РезультатПакета.Количество()-1;
	РезультатЗапроса=РезультатПакета[ИндексПоследнего]; // РезультатЗапроса - 
	
	СтруктураСостоянияАссортимента=Новый Структура;
	СтруктураСостоянияАссортимента.Вставить("РольАссортимента", Перечисления.РолиАссортимента.ПустаяСсылка());
	СтруктураСостоянияАссортимента.Вставить("РазрешеныЗакупки", Ложь);
	СтруктураСостоянияАссортимента.Вставить("РазрешеныПродажи", Ложь);
	СтруктураСостоянияАссортимента.Вставить("ВидЦены",          Справочники.ВидыЦен.ПустаяСсылка());
	СтруктураСостоянияАссортимента.Вставить("РейтингПродаж",    Справочники.РейтингиПродажНоменклатуры.ПустаяСсылка());
	
	Выборка=РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураСостоянияАссортимента, Выборка);
	КонецЕсли;
	
	Возврат СтруктураСостоянияАссортимента;
	
КонецФункции

// Функция получает актуальные значения ресурсов регистра сведений "Квоты ассортимента" на указанную дату 
// для категории, марки и формата магазина.
//
// Параметры:
//  ОбъектПланирования - СправочникСсылка.ФорматыМагазинов, СправочникСсылка.Склады - Объект по которому получаем квоты
//  ТоварнаяКатегория - СправочникСсылка.ТоварныеКатегории
//  Марка - СправочникСсылка.Марки
//  НаДату - Дата - дата и время
//
// Возвращаемое значение:
// Структура - аналогична выборке всех ресурсов из регистра.
//
Функция СтруктураКвотыПоКатегории(ОбъектПланирования, ТоварнаяКатегория, Марка, Знач НаДату) Экспорт
	
	Если Не ЗначениеЗаполнено(НаДату) Тогда
		НаДату = ТекущаяДатаСеанса();
	КонецЕсли;
	
	СтруктураКвоты=Новый Структура;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(К.Период) КАК Период
	|ПОМЕСТИТЬ ТекущиеКвоты
	|ИЗ
	|	РегистрСведений.КвотыАссортимента КАК К
	|ГДЕ
	|	К.Период <= &НаДату
	|	И К.ОбъектПланирования = &ОбъектПланирования
	|	И К.ТоварнаяКатегория = &ТоварнаяКатегория
	|	И К.Марка = &Марка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Квоты.Квота КАК Квота,
	|	Квоты.ПроцентОтклонения КАК ПроцентОтклонения
	|ИЗ
	|	РегистрСведений.КвотыАссортимента КАК Квоты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТекущиеКвоты КАК ТекущиеКвоты
	|		ПО Квоты.Период = ТекущиеКвоты.Период
	|ГДЕ
	|	Квоты.ОбъектПланирования = &ОбъектПланирования
	|	И Квоты.ТоварнаяКатегория = &ТоварнаяКатегория
	|	И Квоты.Марка = &Марка";
	
	Запрос.УстановитьПараметр("ТоварнаяКатегория",ТоварнаяКатегория);
	Запрос.УстановитьПараметр("ОбъектПланирования",ОбъектПланирования);
	Запрос.УстановитьПараметр("Марка",Марка);
	Запрос.УстановитьПараметр("НаДату",НаДату);
	
	РезультатЗапроса=Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		СтруктураКвоты.Вставить("Квота", 0);
		СтруктураКвоты.Вставить("ПроцентОтклонения", 0);
	Иначе
		Выборка=РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		СтруктураКвоты.Вставить("Квота", Выборка.Квота);
		СтруктураКвоты.Вставить("ПроцентОтклонения", Выборка.ПроцентОтклонения);
	КонецЕсли;
	Возврат СтруктураКвоты;
КонецФункции

// Если в настройках СКД включено использование отбора по ассортименту,
// то процедура устанавливает служебный параметр использования отбора по ассортименту.
//
//	Параметры:
//		КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - компоновщик настроек СКД.
//		
Процедура ВключитьОтборПоАссортиментуВСКД(КомпоновщикНастроек) Экспорт
	
	ПараметрИспользуетсяОтборПоАссортименту  = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(
		КомпоновщикНастроек.Настройки, 
		"ИспользуетсяОтборПоАссортименту");
	
	Если ПараметрИспользуетсяОтборПоАссортименту = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрИспользуетсяОтборПоАссортименту.Значение      = Ложь;
	ПараметрИспользуетсяОтборПоАссортименту.Использование = Ложь;
	
	Если ТипЗнч(КомпоновщикНастроек) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
	
		НастройкиОсновнойСхемы = КомпоновщикНастроек.Настройки;
	
	Иначе
	
		НастройкиОсновнойСхемы = КомпоновщикНастроек.ПолучитьНастройки();
	
	КонецЕсли;
	
	ИспользуетсяОтборПоАссортименту = Ложь;
	
	ЭлементыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(НастройкиОсновнойСхемы.Отбор,"ОбъектПланирования");
	Для каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если ЭлементОтбора.Использование Тогда  
			ИспользуетсяОтборПоАссортименту = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ЭлементыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(НастройкиОсновнойСхемы.Отбор,"КоллекцияНоменклатуры");
	Для каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если ЭлементОтбора.Использование Тогда  
			ИспользуетсяОтборПоАссортименту = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ТипЗнч(КомпоновщикНастроек) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
	
		ФиксированныеНастройки = КомпоновщикНастроек.Настройки;
	
	Иначе
	
		ФиксированныеНастройки = КомпоновщикНастроек.ФиксированныеНастройки;
	
	КонецЕсли;
	
	ПараметрИспользуетсяОтборПоАссортименту = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(
		ФиксированныеНастройки, 
		"ИспользуетсяОтборПоАссортименту");
	
	ПараметрИспользуетсяОтборПоАссортименту.Значение = Истина;
	ПараметрИспользуетсяОтборПоАссортименту.Использование = ИспользуетсяОтборПоАссортименту;
	
КонецПроцедуры

#КонецОбласти

#Область ПакетнаяОбработкаТабличныхЧастей

// Добавляет запрос в пакет запросов для получения данных, необходимых для получения цены продажи по ассортименту.
//
// Параметры:
//  СтруктураДействий - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения
//  ОписаниеЗапроса - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОписаниеЗапроса
//  КэшированныеЗначения - Структура
Процедура ДополнитьТекстЗапросаЗаполнитьЦенуПродажиПоАссортименту(СтруктураДействий, ОписаниеЗапроса, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыДействия;
	
	Если ПакетнаяОбработкаТабличнойЧастиСервер.ТребуетсяВыполнитьДействие(
		"ЗаполнитьЦенуПродажиПоАссортименту",
		СтруктураДействий,
		КэшированныеЗначения,
		ПараметрыДействия) Тогда
		
		ОбъектПланирования = ОбъектПланирования(ПараметрыДействия.Склад, ПараметрыДействия.Дата);
		
		СписокЗапросов = ТекстыЗапросовЗаполненияЦенПакетнаяОбработка();
		Для Каждого ЭлементСписка Из СписокЗапросов Цикл
			ОписаниеЗапроса.ТекстыЗапросов.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		КонецЦикла;
		
		ОписаниеЗапроса.ПараметрыЗапроса.Вставить("ОбъектПланирования", ОбъектПланирования);
		ОписаниеЗапроса.ПараметрыЗапроса.Вставить("БазоваяВалюта", ЗначениеНастроекПовтИсп.БазоваяВалютаПоУмолчанию());
		ОписаниеЗапроса.ПараметрыЗапроса.Вставить("Валюта", ПараметрыДействия.Валюта);
		ОписаниеЗапроса.ПараметрыЗапроса.Вставить("Дата", ПараметрыДействия.Дата);
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет запрос в пакет запросов для получения данных, необходимых для проверки ассортимента строки.
//
// Параметры:
//  СтруктураДействий - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения
//  ОписаниеЗапроса - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОписаниеЗапроса
//  КэшированныеЗначения - Структура
Процедура ДополнитьТекстЗапросаПроверитьАссортиментСтроки(СтруктураДействий, ОписаниеЗапроса, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыДействия;
	
	Если ПакетнаяОбработкаТабличнойЧастиСервер.ТребуетсяВыполнитьДействие(
		"ПроверитьАссортиментСтроки",
		СтруктураДействий,
		КэшированныеЗначения,
		ПараметрыДействия) Тогда
		
		ОбъектПланирования = ОбъектПланирования(ПараметрыДействия.Склад, ПараметрыДействия.Дата);
		
		СписокЗапросов = ТекстыЗапросовПроверкиАссортиментаПакетнаяОбработка(ПараметрыДействия.Ссылка);
		Для Каждого ЭлементСписка Из СписокЗапросов Цикл
			ОписаниеЗапроса.ТекстыЗапросов.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		КонецЦикла;
		
		ОписаниеЗапроса.ПараметрыЗапроса.Вставить("ОбъектПланирования", ОбъектПланирования);
		ОписаниеЗапроса.ПараметрыЗапроса.Вставить("Склад", ПараметрыДействия.Склад);
		ОписаниеЗапроса.ПараметрыЗапроса.Вставить("Дата", ПараметрыДействия.Дата);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПакетнаяОбработкаТабличныхЧастейСлужебная

// Возвращает тексты запросов для получения цен продажи по ассортименту.
// 
// Возвращаемое значение:
// 	СписокЗначений Из Строка.
//
Функция ТекстыЗапросовЗаполненияЦенПакетнаяОбработка()
	
	Результат = Новый СписокЗначений();
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВтИсточникДанных.ИдентификаторСтрокиВТ КАК ИдентификаторСтрокиВТ,
	|	МАКСИМУМ(ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) * ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) * ВЫБОР
	|			КОГДА &Валюта <> ЦеныНоменклатурыСрезПоследних.Валюта
	|				ТОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(КурсыВалютыЦены.КурсЗнаменатель, 0) > 0
	|								И ЕСТЬNULL(КурсыВалютыЦены.КурсЧислитель, 0) > 0
	|								И ЕСТЬNULL(КурсыВалюты.КурсЗнаменатель, 0) > 0
	|								И ЕСТЬNULL(КурсыВалюты.КурсЧислитель, 0) > 0
	|							ТОГДА КурсыВалютыЦены.КурсЧислитель * КурсыВалюты.КурсЗнаменатель / (КурсыВалюты.КурсЧислитель * КурсыВалютыЦены.КурсЗнаменатель)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ 1
	|		КОНЕЦ / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1)) КАК Цена
	|ИЗ
	|	ВтИсточникДанных КАК ВтИсточникДанных
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Ассортимент.СрезПоследних(КОНЕЦПЕРИОДА(&Дата, ДЕНЬ), ОбъектПланирования = &ОбъектПланирования) КАК Ассортимент
	|		ПО (ВтИсточникДанных.Номенклатура = Ассортимент.Номенклатура
	|				ИЛИ ИСТИНА В
	|					(ВЫБРАТЬ ПЕРВЫЕ 1
	|						ИСТИНА
	|					ИЗ
	|						Справочник.ВариантыКомплектацииНоменклатуры.Товары КАК ТаблицаТоваров
	|					ГДЕ
	|						ТаблицаТоваров.Номенклатура = ВтИсточникДанных.Номенклатура))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(КОНЕЦПЕРИОДА(&Дата, ДЕНЬ), ) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО ВтИсточникДанных.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			И ВтИсточникДанных.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
	|			И (Ассортимент.ВидЦены = ЦеныНоменклатурыСрезПоследних.ВидЦены)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата, БазоваяВалюта = &БазоваяВалюта) КАК КурсыВалютыЦены
	|		ПО (ЦеныНоменклатурыСрезПоследних.Валюта = КурсыВалютыЦены.Валюта)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(
	|				&Дата,
	|				Валюта = &Валюта
	|					И БазоваяВалюта = &БазоваяВалюта) КАК КурсыВалюты
	|		ПО (ИСТИНА)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтИсточникДанных.ИдентификаторСтрокиВТ";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ВтИсточникДанных.Упаковка",
		"ВтИсточникДанных.Номенклатура"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЦеныНоменклатурыСрезПоследних.Упаковка",
		"ЦеныНоменклатурыСрезПоследних.Номенклатура"));
	
	Результат.Добавить(ТекстЗапроса, "ЗаполнитьЦенуПродажиПоАссортименту");
	
	Возврат Результат;
	
КонецФункции

// Возвращает тексты запросов для проверки ассортимента.
// 
// Возвращаемое значение:
// 	СписокЗначений Из Строка.
//
Функция ТекстыЗапросовПроверкиАссортиментаПакетнаяОбработка(ДокументСсылка)
	
	Результат = Новый СписокЗначений;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВтИсточникДанных.ИдентификаторСтрокиВТ КАК ИдентификаторСтрокиВТ,
	|	ВтИсточникДанных.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(ИсторияИзменения.КонтролироватьАссортимент, ЛОЖЬ) КАК КонтролироватьАссортимент,
	|	ЕСТЬNULL(Ассортимент.РольАссортимента, ЗНАЧЕНИЕ(Перечисление.РолиАссортимента.ПустаяСсылка)) КАК РольАссортимента,
	|	ЕСТЬNULL(Ассортимент.РазрешеныЗакупки, ЛОЖЬ) КАК РазрешеныЗакупки,
	|	ЕСТЬNULL(Ассортимент.РазрешеныПродажи, ЛОЖЬ) КАК РазрешеныПродажи
	|ИЗ
	|	ВтИсточникДанных КАК ВтИсточникДанных
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияИзмененияФорматовМагазинов.СрезПоследних(&Дата, Склад = &Склад) КАК
	|			ИсторияИзменения
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Ассортимент.СрезПоследних(КОНЕЦПЕРИОДА(&Дата, ДЕНЬ),
	|			ОбъектПланирования = &ОбъектПланирования) КАК Ассортимент
	|		ПО (ВтИсточникДанных.Номенклатура = Ассортимент.Номенклатура
	|		ИЛИ ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				Справочник.ВариантыКомплектацииНоменклатуры.Товары КАК ТаблицаТоваров
	|			ГДЕ
	|				ТаблицаТоваров.Номенклатура = ВтИсточникДанных.Номенклатура))
	|ГДЕ
	|	ВтИсточникДанных.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВтИсточникДанных.ИдентификаторСтрокиВТ,
	|	&ИмяПоляНоменклатураНабора,
	|	ЕСТЬNULL(ИсторияИзменения.КонтролироватьАссортимент, ЛОЖЬ),
	|	ЕСТЬNULL(Ассортимент.РольАссортимента, ЗНАЧЕНИЕ(Перечисление.РолиАссортимента.ПустаяСсылка)),
	|	ЕСТЬNULL(Ассортимент.РазрешеныЗакупки, ЛОЖЬ),
	|	ЕСТЬNULL(Ассортимент.РазрешеныПродажи, ЛОЖЬ)
	|ИЗ
	|	ВтИсточникДанных КАК ВтИсточникДанных
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияИзмененияФорматовМагазинов.СрезПоследних(&Дата, Склад = &Склад) КАК
	|			ИсторияИзменения
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Ассортимент.СрезПоследних(КОНЕЦПЕРИОДА(&Дата, ДЕНЬ),
	|			ОбъектПланирования = &ОбъектПланирования) КАК Ассортимент
	|		ПО (&ИмяПоляНоменклатураНабора = Ассортимент.Номенклатура
	|		ИЛИ ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				Справочник.ВариантыКомплектацииНоменклатуры.Товары КАК ТаблицаТоваров
	|			ГДЕ
	|				ТаблицаТоваров.Номенклатура = &ИмяПоляНоменклатураНабора))
	|ГДЕ
	|	ВтИсточникДанных.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И &ИмяПоляНоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)";
	
	ЕстьНоменклатураНабора = ДокументСсылка.Метаданные().ТабличныеЧасти.Товары.Реквизиты.Найти("НоменклатураНабора") <> Неопределено;
	Если ЕстьНоменклатураНабора Тогда
		ИмяПоляНоменклатураНабора = "ВтИсточникДанных.НоменклатураНабора";
	Иначе
		ИмяПоляНоменклатураНабора = "NULL";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ИмяПоляНоменклатураНабора",
		ИмяПоляНоменклатураНабора);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ВтИсточникДанных.Упаковка",
			"ВтИсточникДанных.Номенклатура"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ЦеныНоменклатурыСрезПоследних.Упаковка",
			"ЦеныНоменклатурыСрезПоследних.Номенклатура"));
	
	Результат.Добавить(ТекстЗапроса, "ПроверитьАссортиментСтроки");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

