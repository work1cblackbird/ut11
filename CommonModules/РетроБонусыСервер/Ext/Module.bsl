//@strict-types

#Область ПрограммныйИнтерфейс

// Возвращает ссылку на новую группу отбора в переданном отборе схемы компоновки данных.
//
// Параметры:
//  Отбор - ОтборКомпоновкиДанных - отбор схемы компоновки, в который необходимо добавить новый элемент
//  ТипГруппы - ТипГруппыЭлементовОтбораКомпоновкиДанных, Неопределено - тип создаваемой группы (по умолчанию - ИЛИ) 
//  
// Возвращаемое значение:
//  ОтборКомпоновкиДанных - ссылка на новый элемент отбора схемы компоновки данных.
//
Функция НоваяГруппаОтборов(Отбор, ТипГруппы = Неопределено) Экспорт
	
	НоваяГруппа = ФинансоваяОтчетностьСервер.НовыйОтбор(
		Отбор, Неопределено,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных")); // ОтборКомпоновкиДанных
	
	Если ТипГруппы = Неопределено Тогда
		НоваяГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Иначе
		НоваяГруппа.ТипГруппы = ТипГруппы;
	КонецЕсли; 
	
	Возврат НоваяГруппа;
	
КонецФункции

// Возвращает последний согласованный и проведенный документ условий ретро-бонусов по корневому документу цепочки 
// 
// Параметры:
//  Документ - ДокументОбъект.УсловияРетроБонусовКлиентов - Документ, по которому требуется получить актуальный (действующий) исправительный документ условий ретро-бонусов
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса:
//	* Ссылка - ДокументСсылка.УсловияРетроБонусовКлиентов -
// 
Функция АктуальныйДокументУсловийРетроБонусов(Документ) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РеестрДокументов.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|ГДЕ
	|	РеестрДокументов.ИсправляемыйДокумент = &ИсправляемыйДокумент
	|	И РеестрДокументов.Ссылка <> &ИсправительныйДокумент
	|	И НЕ РеестрДокументов.ДополнительнаяЗапись
	|	И РеестрДокументов.Проведен
	|	И ВЫРАЗИТЬ(РеестрДокументов.Ссылка КАК Документ.УсловияРетроБонусовКлиентов).Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДокументовРетроБонусов.Согласован)
	|
	|УПОРЯДОЧИТЬ ПО
	|	РеестрДокументов.ДатаДокументаИБ УБЫВ";
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ИсправляемыйДокумент", Документ.ИсправляемыйДокумент);
	Запрос.УстановитьПараметр("ИсправительныйДокумент", Документ.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка;
	
КонецФункции

// Возвращает последний проведенный документ условий ретро-бонусов в указанном статусе по корневому документу цепочки.
// Если статус не указан, будет возвращен последний проведенный согласованный документ.
// Если нет исправительного документа - будет возвращен сам документ. 
// 
// Параметры:
//  Документ - ДокументСсылка.УсловияРетроБонусовКлиентов - Ссылка на документ, по которому требуется получить актуальный (действующий) документ условий ретро-бонусов
//  Статус - ПеречислениеСсылка.СтатусыДокументовРетроБонусов, Неопределено - Статус последнего документа цепочки
// 
// Возвращаемое значение:
//  ДокументСсылка.УсловияРетроБонусовКлиентов
// 
Функция АктуальныйДокументУсловийРетроБонусовПоСсылке(Документ, Статус = Неопределено) Экспорт
	
	Если Статус = Неопределено Тогда
		СтатусДокумента = Перечисления.СтатусыДокументовРетроБонусов.Согласован;
	Иначе
		СтатусДокумента = Статус;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РеестрДокументов.Ссылка КАК Ссылка,
	|	РеестрДокументов.ДатаДокументаИБ КАК ДатаДокумента
	|ПОМЕСТИТЬ ВТ_КорректировкиДокументов
	|ИЗ
	|	РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|ГДЕ
	|	ВЫРАЗИТЬ(РеестрДокументов.ИсправляемыйДокумент КАК Документ.УсловияРетроБонусовКлиентов) = &ИсправляемыйДокумент
	|	И НЕ РеестрДокументов.ДополнительнаяЗапись
	|	И РеестрДокументов.Проведен
	|	И ВЫРАЗИТЬ(РеестрДокументов.Ссылка КАК Документ.УсловияРетроБонусовКлиентов).Статус = &СтатусДокумента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РеестрДокументов.Ссылка КАК Ссылка,
	|	РеестрДокументов.ДатаДокументаИБ КАК ДатаДокумента
	|ИЗ
	|	РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|ГДЕ
	|	РеестрДокументов.Ссылка = &ИсправляемыйДокумент
	|	И ВЫРАЗИТЬ(РеестрДокументов.ИсправляемыйДокумент КАК Документ.УсловияРетроБонусовКлиентов) = ЗНАЧЕНИЕ(Документ.УсловияРетроБонусовКлиентов.ПустаяСсылка)
	|	И НЕ РеестрДокументов.ДополнительнаяЗапись
	|	И РеестрДокументов.Проведен
	|	И ВЫРАЗИТЬ(РеестрДокументов.Ссылка КАК Документ.УсловияРетроБонусовКлиентов).Статус = &СтатусДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	РеестрДокументов.ДатаДокументаИБ УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВТ_КорректировкиДокументов.Ссылка КАК Ссылка
	|ИЗ
	|	ВТ_КорректировкиДокументов КАК ВТ_КорректировкиДокументов";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ИсправляемыйДокумент", Документ);
	Запрос.УстановитьПараметр("СтатусДокумента", СтатусДокумента);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		АктуальныйДокумент = Документы.УсловияРетроБонусовКлиентов.ПустаяСсылка();
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		АктуальныйДокумент = Выборка.Ссылка;
		
	КонецЕсли;
	
	Возврат АктуальныйДокумент;
	
КонецФункции

// см. ОтчетыУТПереопределяемый.ДополнитьСоответствияРегистраторовОтчетаОДвижениях
//
Процедура ДополнитьСоответствияРегистраторовОтчетаОДвижениях(Документ, СоответствиеРегистров) Экспорт
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.УсловияРетроБонусовКлиентов") Тогда
		
		Регистры = Метаданные.РегистрыСведений;
		
		СоответствиеРегистров.Вставить(Регистры.РетроБонусыКлиентовИНН, "РегистраторДвижения");
		СоответствиеРегистров.Вставить(Регистры.РетроБонусыКлиентовКонтрагенты, "РегистраторДвижения");
		СоответствиеРегистров.Вставить(Регистры.РетроБонусыКлиентовСегментыПартнеров, "РегистраторДвижения");
		СоответствиеРегистров.Вставить(Регистры.РетроБонусыКлиентовСегментыТоваров, "РегистраторДвижения");
		СоответствиеРегистров.Вставить(Регистры.РетроБонусыКлиентовТовары, "РегистраторДвижения");
		СоответствиеРегистров.Вставить(Регистры.РетроБонусыКлиентовУсловия, "РегистраторДвижения");
		СоответствиеРегистров.Вставить(Регистры.РетроБонусыКлиентовДоговорыСоглашения, "РегистраторДвижения");
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура проверяет дубли строк в табличной части
//
// Параметры:
//  Объект - ДокументОбъект, ФормаКлиентскогоПриложения - проверяемый ДокументОбъект или форма
//  ИмяТЧ - Строка - имя проверяемой табличной части
//  КлючевыеРеквизитыТЧ - Массив из Строка -
//	                    - Строка - массив имен реквизитов, по которым определяется уникальность строки
//	                    - Структура - Ключ это наименование реквизита, значение - представление реквизита
//  Отказ - Булево - отказ продолжения операции.
//  ПредставлениеТЧ - Строка - если не указано, то представление будет получено из метаданных.
//  УказыватьНомераСтрок - Булево - определяет необходимость вывода номера строки в сообщении об ошибке.
//  ОтборСтрок - Структура - если не указано, то выбираются все строки из табличной части, иначе - согласно отбору:
//  	* Ключ - Строка
//  	* Значение - Произвольный
//
Процедура ПроверитьНаличиеДублейСтрокТЧ(Объект, ИмяТЧ, КлючевыеРеквизитыТЧ, Отказ, ПредставлениеТЧ = "", УказыватьНомераСтрок = Истина, ОтборСтрок = Неопределено) Экспорт
	
	Если ОтборСтрок = Неопределено Тогда
		ОтборСтрок = Новый Структура;
	КонецЕсли;
	
	ТипЗначенияКлючевыеРеквизитыТЧ = ТипЗнч(КлючевыеРеквизитыТЧ);
	ПредставлениеРеквизитаИзСинонима = Истина;
	
	Если ТипЗначенияКлючевыеРеквизитыТЧ = Тип("Строка") Тогда
		КлючевыеРеквизиты = СтрРазделить(КлючевыеРеквизитыТЧ, ",");
	ИначеЕсли ТипЗначенияКлючевыеРеквизитыТЧ = Тип("Структура") Тогда
		
		ПредставлениеРеквизитаИзСинонима = Ложь;
		КлючевыеРеквизиты = Новый Массив; // Массив из Строка
		Для Каждого ИмяИПредставлениеРеквизита Из КлючевыеРеквизитыТЧ Цикл
			
			КлючевыеРеквизиты.Добавить(ИмяИПредставлениеРеквизита.Ключ);
			
		КонецЦикла;
		
	Иначе
		КлючевыеРеквизиты = КлючевыеРеквизитыТЧ;
	КонецЕсли;
	
	КлючДанных = ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(Объект);
	
	ЭтоФорма = Ложь;
	Если ТипЗнч(Объект) = Тип("ФормаКлиентскогоПриложения") Тогда
		
		ЭтоФорма = Истина;
		
	Иначе
		
		МетаданныеОбъекта = Объект.Метаданные();
		Если ПустаяСтрока(ПредставлениеТЧ) Тогда
			ПредставлениеТЧ = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Синоним;
		КонецЕсли;
		
	КонецЕсли;
	
	МассивСтрокПоляВыборки = Новый Массив; // Массив из Строка
	МассивСтрокПоляСоединения = Новый Массив; // Массив из Строка
	МассивСтрокПоляВыгрузки = Новый Массив; // Массив из Строка
	МассивСтрокСообщенияОДублях = Новый Массив; // Массив из Строка
	
	Для Каждого СтрМас Из КлючевыеРеквизиты Цикл
		
		МассивСтрокПоляВыборки.Добавить(СтрШаблон("ТаблицаПроверки.%1", СтрМас));
		МассивСтрокПоляСоединения.Добавить(СтрШаблон("ТаблицаПроверки.%1 = ДублирующиесяСтроки.%1", СтрМас));
		МассивСтрокПоляВыгрузки.Добавить(СтрМас);
		
		Если ПредставлениеРеквизитаИзСинонима Тогда
			ПредставлениеРеквизита = ?(ЭтоФорма, "", МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Реквизиты[СтрМас].Синоним);
		Иначе
			ПредставлениеРеквизита = ?(ЭтоФорма, "", КлючевыеРеквизитыТЧ[СтрМас]);
		КонецЕсли;
		МассивСтрокСообщенияОДублях.Добавить(СтрШаблон("""%1""", ПредставлениеРеквизита));
		
	КонецЦикла;	
	
	ТекстПоляВыборки = СтрСоединить(МассивСтрокПоляВыборки, "," + Символы.ПС);
	ТекстПоляСоединения = СтрСоединить(МассивСтрокПоляСоединения, Символы.ПС + "И" + " ");
	ТекстПоляВыгрузки = СтрСоединить(МассивСтрокПоляВыгрузки, ",");
	ТекстДляСообщенияОДублях =  СтрСоединить(МассивСтрокСообщенияОДублях, ",");
	
	ТекстЗапроса =
	"ВЫБРАТЬ 
	|	ТаблицаПроверки.НомерСтроки,
	|	&ПоляВыборки
	|ПОМЕСТИТЬ ТаблицаПроверки
	|ИЗ
	|	&ТаблицаПроверки КАК ТаблицаПроверки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаПроверки.НомерСтроки) КАК НомерСтроки,
	|	КОЛИЧЕСТВО(1) КАК КоличествоДублей,
	|	&ПоляВыборки
	|ПОМЕСТИТЬ ДублирующиесяСтроки
	|ИЗ
	|	ТаблицаПроверки КАК ТаблицаПроверки
	|
	|СГРУППИРОВАТЬ ПО 
	|	&ПоляВыборки
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(1) > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПроверки.НомерСтроки,
	|	ДублирующиесяСтроки.НомерСтроки КАК ПерваяСтрока,
	|	&ПоляВыборки
	|ИЗ
	|	ТаблицаПроверки КАК ТаблицаПроверки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДублирующиесяСтроки КАК ДублирующиесяСтроки
	|		ПО ТаблицаПроверки.НомерСтроки <> ДублирующиесяСтроки.НомерСтроки 
	|			И &ПоляСоединения";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляВыборки", ТекстПоляВыборки);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляСоединения", ?(ТекстПоляСоединения = "", "ИСТИНА", ТекстПоляСоединения));
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТаблицаПроверки", Объект[ИмяТЧ].Выгрузить(ОтборСтрок, "НомерСтроки," + ТекстПоляВыгрузки));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если ЭтоФорма Тогда
		Если УказыватьНомераСтрок Тогда
			Если КлючевыеРеквизиты.Количество() = 1 Тогда
				ШаблонСообщения = НСтр("ru = 'В строке %НомерСтроки% списка ""%ПредставлениеТЧ%"" по сравнению со строкой %ПерваяСтрока% повторяется значение ""%ПовторяемоеЗначение%"" в ключевом поле.'");
			Иначе
				ШаблонСообщения = НСтр("ru = 'В строке %НомерСтроки% списка ""%ПредставлениеТЧ%"" по сравнению со строкой %ПерваяСтрока% повторяется сочетание значений ""%ПовторяемоеЗначение%"" в ключевых полях.'");
			КонецЕсли;
		Иначе
			Если КлючевыеРеквизиты.Количество() = 1 Тогда
				ШаблонСообщения = НСтр("ru = 'В списке ""%ПредставлениеТЧ%"" повторяется значение ""%ПовторяемоеЗначение%"" в ключевом поле.'");
			Иначе
				ШаблонСообщения = НСтр("ru = 'В списке ""%ПредставлениеТЧ%"" повторяется сочетание значений ""%ПовторяемоеЗначение%"" в ключевых полях.'");
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если УказыватьНомераСтрок Тогда
			Если КлючевыеРеквизиты.Количество() = 1 Тогда
				ШаблонСообщения = НСтр("ru = 'В строке %НомерСтроки% списка ""%ПредставлениеТЧ%"" по сравнению со строкой %ПерваяСтрока% повторяется значение ""%ПовторяемоеЗначение%"" в поле %НазванияПолей%.'");
			Иначе
				ШаблонСообщения = НСтр("ru = 'В строке %НомерСтроки% списка ""%ПредставлениеТЧ%"" по сравнению со строкой %ПерваяСтрока% повторяется сочетание значений ""%ПовторяемоеЗначение%"" в полях %НазванияПолей%.'");
			КонецЕсли;
		Иначе
			Если КлючевыеРеквизиты.Количество() = 1 Тогда
				ШаблонСообщения = НСтр("ru = 'В списке ""%ПредставлениеТЧ%"" повторяется значение ""%ПовторяемоеЗначение%"" в поле %НазванияПолей%.'");
			Иначе
				ШаблонСообщения = НСтр("ru = 'В списке ""%ПредставлениеТЧ%"" повторяется сочетание значений ""%ПовторяемоеЗначение%"" в полях %НазванияПолей%.'");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		ТекстСообщения =  СтрЗаменить(ШаблонСообщения, "%ПредставлениеТЧ%", ПредставлениеТЧ);
		ТекстСообщения =  СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Выборка.НомерСтроки);
		ТекстСообщения =  СтрЗаменить(ТекстСообщения, "%ПерваяСтрока%", Выборка.ПерваяСтрока);
		ТекстСообщения =  СтрЗаменить(ТекстСообщения, "%НазванияПолей%", ТекстДляСообщенияОДублях);
		
		ПовторяемоеЗначение = "";
		
		Для Каждого СтрМас Из КлючевыеРеквизиты Цикл
			ПредставлениеЗначения = СокрЛП(Строка(Выборка[СтрМас]));
			Если ЗначениеЗаполнено(ПредставлениеЗначения) Тогда
				ПовторяемоеЗначение = ПовторяемоеЗначение + Выборка[СтрМас] + "/";
			КонецЕсли;
		КонецЦикла;
		
		ПовторяемоеЗначение = Лев(ПовторяемоеЗначение, СтрДлина(ПовторяемоеЗначение) - 1);
		
		ТекстСообщения =  СтрЗаменить(ТекстСообщения, "%ПовторяемоеЗначение%", ПовторяемоеЗначение);
		
		Если УказыватьНомераСтрок Тогда
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "НомерСтроки");
		Иначе
			Поле = ИмяТЧ;
		КонецЕсли;
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,КлючДанных,Поле,"Объект",Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

// Проверка корректности указания начала и окончания периода для заданной периодичности
//
// Параметры:
//  ПериодичностьУсловий - ПеречислениеСсылка.ПериодичностиРетроБонусов
//  ДатаНачало - Дата - дата начала
//  ДатаОкончание - Дата - дата окончание
//  ПроверкаПериодаНачисления - Булево
// 
// Возвращаемое значение:
//  Структура - Проверить периоды по периодичности:
// * ЕстьНарушениеНачала - Булево - 
// * ТекстОшибкиНачала - Строка - 
// * ТребуемаяДатаНачала - Дата - 
// * ЕстьНарушениеОкончания - Булево - 
// * ТекстОшибкиОкончания - Строка - 
// * ТребуемаяДатаОкончания - Дата - 
//
Функция ПроверитьПериодыПоПериодичности(ПериодичностьУсловий, Знач ДатаНачало, Знач ДатаОкончание, ПроверкаПериодаНачисления = Ложь) Экспорт
	
	ПустаяДата = Дата(1, 1, 1);
	
	ЕстьНарушениеНачала = Ложь;
	ЕстьНарушениеОкончания = Ложь;
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("ЕстьНарушениеНачала", ЕстьНарушениеНачала);
	РезультатПроверки.Вставить("ТекстОшибкиНачала", "");
	РезультатПроверки.Вставить("ТребуемаяДатаНачала", ПустаяДата);
	РезультатПроверки.Вставить("ЕстьНарушениеОкончания", ЕстьНарушениеОкончания);
	РезультатПроверки.Вставить("ТекстОшибкиОкончания", "");
	РезультатПроверки.Вставить("ТребуемаяДатаОкончания", ПустаяДата);
	
	НачалоЗаполнено = (НачалоДня(ДатаНачало) <> ПустаяДата);
	ОкончаниеЗаполнено = (НачалоДня(ДатаОкончание) <> ПустаяДата);
	
	Если ПериодичностьУсловий = Перечисления.ПериодичностиРетроБонусов.Неделя Тогда
		
		ТребуемаяДатаНачала = НачалоНедели(ДатаНачало);
		ТребуемаяДатаОкончания = НачалоДня(КонецНедели(ДатаОкончание));
		
		Если НачалоЗаполнено
		   И ТребуемаяДатаНачала <> НачалоДня(ДатаНачало) Тогда
			
			ЕстьНарушениеНачала = Истина;
			ШаблонСообщенияНачалоДействия = НСтр("ru = 'Начало действия должно быть началом недели (%1)'");
			ШаблонСообщенияНачалоПериода = НСтр("ru = 'Начало периода должно быть началом недели (%1)'");
			
		КонецЕсли;
		
		Если ОкончаниеЗаполнено
		   И ТребуемаяДатаОкончания <> НачалоДня(ДатаОкончание) Тогда
			
			ЕстьНарушениеОкончания = Истина;
			ШаблонСообщенияОкончанияДействия = НСтр("ru = 'Окончание действия должно быть концом недели (%1)'");
			ШаблонСообщенияОкончанияПериода = НСтр("ru = 'Окончание периода должно быть концом недели (%1)'");
			
		КонецЕсли;
		
	ИначеЕсли ПериодичностьУсловий = Перечисления.ПериодичностиРетроБонусов.Месяц Тогда
		
		ТребуемаяДатаНачала = НачалоМесяца(ДатаНачало);
		ТребуемаяДатаОкончания = НачалоДня(КонецМесяца(ДатаОкончание));
		
		Если НачалоЗаполнено
		   И ТребуемаяДатаНачала <> НачалоДня(ДатаНачало) Тогда
			
			ЕстьНарушениеНачала = Истина;
			ШаблонСообщенияНачалоДействия = НСтр("ru = 'Начало действия должно быть началом месяца (%1)'");
			ШаблонСообщенияНачалоПериода = НСтр("ru = 'Начало периода должно быть началом месяца (%1)'");
			
		КонецЕсли;
		
		Если ОкончаниеЗаполнено
		   И  ТребуемаяДатаОкончания <> НачалоДня(ДатаОкончание) Тогда
			
			ЕстьНарушениеОкончания = Истина;
			ШаблонСообщенияОкончанияДействия = НСтр("ru = 'Окончание действия должно быть концом месяца (%1)'");
			ШаблонСообщенияОкончанияПериода = НСтр("ru = 'Окончание периода должно быть концом месяца (%1)'");
			
		КонецЕсли;
		
	ИначеЕсли ПериодичностьУсловий = Перечисления.ПериодичностиРетроБонусов.Квартал Тогда
		
		ТребуемаяДатаНачала = НачалоКвартала(ДатаНачало);
		ТребуемаяДатаОкончания = НачалоДня(КонецКвартала(ДатаОкончание));
		
		Если НачалоЗаполнено
		   И ТребуемаяДатаНачала <> НачалоДня(ДатаНачало) Тогда
			
			ЕстьНарушениеНачала = Истина;
			ШаблонСообщенияНачалоДействия = НСтр("ru = 'Начало действия должно быть началом квартала (%1)'");
			ШаблонСообщенияНачалоПериода = НСтр("ru = 'Начало периода должно быть началом квартала (%1)'");
			
		КонецЕсли;
		
		Если ОкончаниеЗаполнено
		   И  ТребуемаяДатаОкончания <> НачалоДня(ДатаОкончание) Тогда
			
			ЕстьНарушениеОкончания = Истина;
			ШаблонСообщенияОкончанияДействия = НСтр("ru = 'Окончание действия должно быть концом квартала (%1)'");
			ШаблонСообщенияОкончанияПериода = НСтр("ru = 'Окончание периода должно быть концом квартала (%1)'");
			
		КонецЕсли;
		
	КонецЕсли;
	
	РезультатПроверки.ТребуемаяДатаНачала = ТребуемаяДатаНачала;
	РезультатПроверки.ТребуемаяДатаОкончания = ТребуемаяДатаОкончания;
	
	РезультатПроверки.ЕстьНарушениеНачала = ЕстьНарушениеНачала;
	Если ЕстьНарушениеНачала Тогда
		
		Если ПроверкаПериодаНачисления Тогда
			ШаблонСообщенияНачала = ШаблонСообщенияНачалоПериода;
		Иначе
			ШаблонСообщенияНачала = ШаблонСообщенияНачалоДействия;
		КонецЕсли;
		
		РезультатПроверки.ТекстОшибкиНачала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщенияНачала,
			Формат(ТребуемаяДатаНачала, "ДЛФ=D;"));
		
	КонецЕсли;
	
	РезультатПроверки.ЕстьНарушениеОкончания = ЕстьНарушениеОкончания;
	Если ЕстьНарушениеОкончания Тогда
		
		Если ПроверкаПериодаНачисления Тогда
			ШаблонСообщенияОкончания = ШаблонСообщенияОкончанияПериода;
		Иначе
			ШаблонСообщенияОкончания = ШаблонСообщенияОкончанияДействия;
		КонецЕсли;
		
		РезультатПроверки.ТекстОшибкиОкончания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщенияОкончания,
			Формат(ТребуемаяДатаОкончания, "ДЛФ=D;"));
		
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

#Область Прочее

// Выполняет установку параметров сеанса. Вызывается из модуля сеанса.
//
// Параметры:
//   ИмяПараметра  - Строка - имя параметра сеанса.
//   УстановленныеПараметры - Массив из Строка - массив всех установленных параметров сеанса.
//
Процедура УстановитьПараметрыСеанса(ИмяПараметра, УстановленныеПараметры) Экспорт
	
	ПараметрыСеанса.ПроводитьБезКонтроляОстатковРетроБонусов = Ложь;
	
	Если ИмяПараметра = "ПроводитьБезКонтроляОстатковРетроБонусов" Тогда
		
		ПараметрыСеанса.ПроводитьБезКонтроляОстатковРетроБонусов = Ложь;
		УстановленныеПараметры.Добавить(ИмяПараметра);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// Смотри также ОбновлениеИнформационнойБазыПереопределяемый.ПриНачальномЗаполненииЭлементов
//
// Параметры:
//  КодыЯзыков - см. ОбновлениеИнформационнойБазыПереопределяемый.ПриНачальномЗаполненииЭлементов.КодыЯзыков
//  Элементы   - см. ОбновлениеИнформационнойБазыПереопределяемый.ПриНачальномЗаполненииЭлементов.Элементы
//  ТабличныеЧасти - см. ОбновлениеИнформационнойБазыПереопределяемый.ПриНачальномЗаполненииЭлементов.ТабличныеЧасти
//
Процедура ПриНачальномЗаполненииЭлементов(КодыЯзыков, Элементы, ТабличныеЧасти) Экспорт
	
	Набор = Элементы.Добавить();
	Набор.ИмяПредопределенногоНабора = "Справочник_ВидыРетроБонусовКлиентов";
	Набор.Ссылка = Новый УникальныйИдентификатор("a5dc0822-c1f3-46f1-aa4f-966144930cbd");
	Набор.Используется = ПолучитьФункциональнуюОпцию("ИспользоватьРетроБонусыКлиентов");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Набор, "Наименование",
		"ru = 'Виды ретро-бонусов клиентов'", КодыЯзыков); // @НСтр-1
	
	Набор = Элементы.Добавить();
	Набор.ИмяПредопределенногоНабора = "Документ_УсловияРетроБонусовКлиентов";
	Набор.Ссылка = Новый УникальныйИдентификатор("8a733795-0f00-41e7-8e2e-8f908562db9e");
	Набор.Используется = ПолучитьФункциональнуюОпцию("ИспользоватьРетроБонусыКлиентов");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Набор, "Наименование",
		"ru = 'Условия ретро-бонусов клиентов'", КодыЯзыков); // @НСтр-1
	
	Набор = Элементы.Добавить();
	Набор.ИмяПредопределенногоНабора = "Документ_СписаниеРетроБонусовКлиента";
	Набор.Ссылка = Новый УникальныйИдентификатор("b770ef38-80ab-4ae0-bc77-f07eed4a2468");
	Набор.Используется = ПолучитьФункциональнуюОпцию("ИспользоватьРетроБонусыКлиентов");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Набор, "Наименование",
		"ru = 'Списания ретро-бонусов клиентов'", КодыЯзыков); // @НСтр-1
	
	
	Набор = Элементы.Добавить();
	Набор.ИмяПредопределенногоНабора = "Документ_НачислениеРетроБонусовКлиента";
	Набор.Ссылка = Новый УникальныйИдентификатор("ec2e9239-8e45-421e-9444-6d8695e7fd63");
	Набор.Используется = ПолучитьФункциональнуюОпцию("ИспользоватьРетроБонусыКлиентов");
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Набор, "Наименование",
		"ru = 'Начисления ретро-бонусов клиентов'", КодыЯзыков); // @НСтр-1
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.Справочники.АктПремииКлиентуПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Справочники.УсловияРетроБонусовКлиентовПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Справочники.НачислениеРетроБонусовКлиентаПрисоединенныеФайлы, Истина);
	
	Списки.Вставить(Метаданные.Документы.УсловияРетроБонусовКлиентов, Истина);
	Списки.Вставить(Метаданные.Документы.НачислениеРетроБонусовКлиента, Истина);
	Списки.Вставить(Метаданные.Документы.СписаниеРетроБонусовКлиента, Истина);
	Списки.Вставить(Метаданные.Документы.АктПремииКлиенту, Истина);
	
	Списки.Вставить(Метаданные.РегистрыСведений.РетроБонусыКлиентовИНН, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.РетроБонусыКлиентовКонтрагенты, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.РетроБонусыКлиентовСегментыПартнеров, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.РетроБонусыКлиентовСегментыТоваров, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.РетроБонусыКлиентовТовары, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.РетроБонусыКлиентовУсловия, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.РетроБонусыКлиентовПериодыНачислений, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.РетроБонусыКлиентовДоговорыСоглашения, Истина);
	
	Списки.Вставить(Метаданные.РегистрыНакопления.РетроБонусыКлиентов, Истина);
	
КонецПроцедуры

// См. ВариантыОтчетовПереопределяемый.ОпределитьОбъектыСКомандамиОтчетов
Процедура ОпределитьОбъектыСКомандамиОтчетов(Объекты) Экспорт
	
	Объекты.Добавить(Метаданные.Документы.УсловияРетроБонусовКлиентов);
	Объекты.Добавить(Метаданные.Документы.НачислениеРетроБонусовКлиента);
	Объекты.Добавить(Метаданные.Документы.АктПремииКлиенту);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Проведение

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Свойства - См. ПроведениеДокументов.СвойстваДокумента
//
// Возвращаемое значение:
//  См. ПроведениеДокументов.ПараметрыУчетногоМеханизма
//
Функция ПараметрыДляПроведенияДокумента(Документ, Свойства) Экспорт
	
	Параметры = ПроведениеДокументов.ПараметрыУчетногоМеханизма();
	
	ТипДокумента = ТипЗнч(Документ);
	Если ТипДокумента  = Тип("ДокументОбъект.УсловияРетроБонусовКлиентов") Тогда
		
		Параметры.ЕстьПроизводныеДвижения = Истина;
		
	КонецЕсли;
	
	Если ТипДокумента = Тип("ДокументОбъект.УсловияРетроБонусовКлиентов")
	 ИЛИ ТипДокумента = Тип("ДокументОбъект.НачислениеРетроБонусовКлиента")
	 ИЛИ ТипДокумента = Тип("ДокументОбъект.СписаниеРетроБонусовКлиента")
	 ИЛИ ТипДокумента = Тип("ДокументОбъект.АктПремииКлиенту") Тогда
		
		// Проведение
		Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			
			Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.РетроБонусыКлиентов);
			
		КонецЕсли;
		
		// Контроль
		Если Свойства.РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
			
			Параметры.КонтрольныеРегистрыИзменений.Добавить(Метаданные.РегистрыНакопления.РетроБонусыКлиентов);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипДокумента  = Тип("ДокументОбъект.НачислениеРетроБонусовКлиента") Тогда
		
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыСведений.РетроБонусыКлиентовПериодыНачислений);
		
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Возвращает тексты запросов для сторнирования движений при исправлении документов
// 
// Параметры:
// 	МетаданныеДокумента - ОбъектМетаданныхДокумент - Метаданные документа, который проводится.
// 
// Возвращаемое значение:
// 	Соответствие Из КлючИЗначение - Содержит тексты запросов сторнирования, где:
// 		* Ключ - Строка - Полное имя регистра.
// 		* Значение - Строка - Текст запроса.
//
Функция ТекстыЗапросовСторнирования(МетаданныеДокумента) Экспорт
	
	ТекстыЗапросов = Новый Соответствие();
	
	Возврат ТекстыЗапросов;
	
КонецФункции

// Возникает перед выполнением записи регистров документа.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц,
//								используемый для хранения таблиц контроля изменений регистров.
//  Отказ - Булево - признак отказа от проведения документа.
//
Процедура ПередЗаписьюДвиженийДокумента(Документ, МенеджерВременныхТаблиц, Отказ) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Возникает после выполнения записи регистров документа
//
// Параметры:
//  Документ - ДокументОбъект.УсловияРетроБонусовКлиентов - записываемый документ
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц,
//								используемый для хранения таблиц контроля изменений регистров.
//  Отказ - Булево - признак отказа от проведения документа.
//
Процедура ПослеЗаписиДвиженийДокумента(Документ, МенеджерВременныхТаблиц, Отказ) Экспорт
	
	ПослеЗаписиДвиженийДокументаУсловияРетроБонусовКлиентов(Документ, МенеджерВременныхТаблиц, Отказ);
	
КонецПроцедуры

// Процедура формирования движений по подчиненным регистрам управления ассортиментом.
//
// Параметры:
//	ТаблицыДляДвижений - Структура - таблицы данных документа
//	Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//	Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "РетроБонусыКлиентов");
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "РетроБонусыКлиентовПериодыНачислений");
	
КонецПроцедуры

// Дополняет текст запроса механизма проверки даты запрета по таблице изменений.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 
// Возвращаемое значение:
//	Соответствие Из КлючИЗначение:
//		* Ключ - Строка - Имя временной таблицы изменений регистра.
//		* Значение - Строка - Текст запроса.
//
Функция ТекстыЗапросовКонтрольДатыЗапретаПоТаблицеИзменений(Запрос) Экспорт
	
	СоответствиеТекстовЗапросов = Новый Соответствие();
	Возврат СоответствиеТекстовЗапросов;
	
КонецФункции

// Формирует тексты запросов для контроля изменений записанных движений регистров.
//
// Параметры:
//  Запрос - Запрос - запрос, хранящий параметры используемые в списке запросов
//  ТекстыЗапроса - СписокЗначений из Строка - список текстов запросов и их имен.
//  Документ - ДокументОбъект - записываемый документ.
//
Процедура ИнициализироватьДанныеКонтроляИзменений(Запрос, ТекстыЗапроса, Документ) Экспорт
	
	ИнициализацияКонтроляИзмененийРетроБонусыКлиентов(Запрос, ТекстыЗапроса, Документ);
	
КонецПроцедуры

// Выводит сообщения пользователю при наличии ошибок контроля изменений записанных движений регистров.
//
// Параметры:
//  РезультатыКонтроля - Структура - таблицы с результатами контроля изменений:
//   * ОшибкиСписанияСуммБонусов - ТаблицаЗначений:
//     ** Организация - СправочникСсылка.Организации
//     ** Контрагент - СправочникСсылка.Контрагенты
//     ** Партнер - СправочникСсылка.Партнеры
//     ** НачалоПериода - Дата
//     ** ОкончаниеПериода - Дата
//     ** ДокументУсловий - ДокументСсылка.УсловияРетроБонусовКлиентов
//     ** Валюта - СправочникСсылка.Валюты
//     ** СуммаБонусОстаток - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака
//     ** КонтрольНаДатуДокумента - Булево
//  Документ - ДокументОбъект - записываемый документ
//  Отказ - Булево - признак отказа от проведения документа.
//
Процедура СообщитьОРезультатахКонтроляИзменений(РезультатыКонтроля, Документ, Отказ) Экспорт
	
	КонтрольИзмененийРетроБонусыКлиентов(РезультатыКонтроля, Документ, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииПоставляемыхПрофилейГруппДоступа
//
Процедура ДополнитьПоставляемыеПрофилиГруппДоступа(ОписанияПрофилей, ПараметрыОбновления) Экспорт
	
	ДобавитьПрофильОтветственныйВидыРетроБонусовКлиентов(ОписанияПрофилей, ПараметрыОбновления);
	ДобавитьПрофильМенеджерРетроБонусовКлиентов(ОписанияПрофилей, ПараметрыОбновления);
	ДобавитьПрофильУчастникСогласованияУсловийРетроБонусовКлиентов(ОписанияПрофилей, ПараметрыОбновления);
	ДобавитьПрофильОтветственныйАктыПремийКлиентамДополнительный(ОписанияПрофилей, ПараметрыОбновления);
	ДобавитьПрофильПравоОтключенияКонтроляОстатковРетроБонусовДополнительный(ОписанияПрофилей, ПараметрыОбновления);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Заголовок документа.
// 
// Параметры:
//  Документ - ДокументСсылка.УсловияРетроБонусовКлиентов- Обрабатываемый документ
//  НомерДокумента - Строка - Номер документа
//  ДатаДокумента - Дата - Дата документа
//  Исправление - Булево - Исправление
// 
// Возвращаемое значение:
//  Строка - представление документа
//
Функция ЗаголовокДокумента(Документ, НомерДокумента, ДатаДокумента, Исправление) Экспорт
	
	Если Исправление = Null Тогда
		Возврат "";
	КонецЕсли;
	
	Если Исправление Тогда
		ШаблонЗаголовкаДокумента = НСтр("ru = 'Корректировка условий РБ клиентов %1'");
	Иначе
		ШаблонЗаголовкаДокумента = НСтр("ru = 'Условия РБ клиентов %1'");
	КонецЕсли;
	
	ОкончаниеЗаголовка = "";
	
	Если ЗначениеЗаполнено(Документ) Тогда
		
		ШаблонОкончаниеЗаголовка = НСтр("ru = '%1 от %2'");
		ОкончаниеЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонОкончаниеЗаголовка, НомерДокумента, Формат(ДатаДокумента, "ДЛФ=D;"));
		
	Иначе
		
		ОкончаниеЗаголовка = НСтр("ru = '(создание)'");
		
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонЗаголовкаДокумента, ОкончаниеЗаголовка);
	
КонецФункции

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма списка:
//   * Список - ДинамическийСписок
//
Процедура УстановитьОформлениеСтатуса(Форма) Экспорт
	
	СписокУсловноеОформление = Форма.Список.КомпоновщикНастроек.Настройки.УсловноеОформление;
	
	#Область НаСогласовании
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Выделение шрифтом статуса ""На согласовании""'");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Статус");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыДокументовРетроБонусов.НаСогласовании;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ЖирныйШрифт);
	#КонецОбласти
	
	#Область Согласован
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Выделение цветом статуса ""Согласован""'");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Статус");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыДокументовРетроБонусов.Согласован;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.РезультатУспехЦвет);
	#КонецОбласти
	
	#Область НеСогласован
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Выделение цветом статуса ""Не согласован""'");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Статус");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыДокументовРетроБонусов.НеСогласован;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.РезультатПроблемаЦвет);
	#КонецОбласти
	
КонецПроцедуры

// Определяет максимальную дату окончания периода зарегистрированных начислений по условию ретро-бонусов клиентов
// 
// Параметры:
//  ДокументУсловий - ДокументСсылка.УсловияРетроБонусовКлиентов -
// 
// Возвращаемое значение:
//  Дата - максимальная дата окончания периода зарегистрированных начислений:
//
Функция ГраницаНачисленийКлиентов(ДокументУсловий) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Дата(1, 1, 1);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументУсловий", ДокументУсловий);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РетроБонусыКлиентов.ДокументУсловий,
	|	МАКСИМУМ(РетроБонусыКлиентов.ОкончаниеПериода) КАК ОкончаниеПериодаНачислений
	|ИЗ
	|	РегистрНакопления.РетроБонусыКлиентов КАК РетроБонусыКлиентов
	|ГДЕ
	|	РетроБонусыКлиентов.ДокументУсловий = &ДокументУсловий
	|	И РетроБонусыКлиентов.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И РетроБонусыКлиентов.Регистратор <> &ДокументУсловий
	|СГРУППИРОВАТЬ ПО
	|	РетроБонусыКлиентов.ДокументУсловий";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Результат = Выборка.ОкончаниеПериодаНачислений; // Дата
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Фиксирует актуальный состав сегментов товаров и партнеров для дальнейшего расчета
// 
// Параметры:
//  Документ - ДокументСсылка.УсловияРетроБонусовКлиентов
//
Процедура ЗафиксироватьСоставСегментов(Документ) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных();
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.РетроБонусыКлиентовСегментыТоваров");
		ЭлементБлокировки.УстановитьЗначение("ДокументУсловий", Документ);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.РетроБонусыКлиентовТовары");
		ЭлементБлокировки.УстановитьЗначение("ДокументУсловий", Документ);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.РетроБонусыКлиентовСегментыПартнеров");
		ЭлементБлокировки.УстановитьЗначение("ДокументУсловий", Документ);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.РетроБонусыКлиентовКонтрагенты");
		ЭлементБлокировки.УстановитьЗначение("ДокументУсловий", Документ);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.РетроБонусыКлиентовУсловия");
		ЭлементБлокировки.УстановитьЗначение("ДокументУсловий", Документ);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		ВведенаКорректировкаНаСогласовании = ЕстьКорректировкаНаСогласовании(Документ);
		Если ВведенаКорректировкаНаСогласовании Тогда
			
			ТекстИсключения = НСтр("ru = 'По документу условий введена корректировка в статусе ""На согласовании""'");
			ВызватьИсключение ТекстИсключения;
			
		КонецЕсли;
		
		ЗафиксироватьСегменты = Ложь;
		
		УстановитьПривилегированныйРежим(Истина);
		
		АктуальныеДанныеДокумента = Документы.УсловияРетроБонусовКлиентов.АктуальныеДанные(Документ);
		Если АктуальныеДанныеДокумента.СоставТоваров = Перечисления.СоставыТоваровРетроБонусов.СегментыНоменклатуры Тогда
			
			СоставТоваров = СоставСегментовТоваров(Документ);
			Если СоставТоваров.Количество() > 0 Тогда
				
				НаборЗаписейТовары = РегистрыСведений.РетроБонусыКлиентовТовары.СоздатьНаборЗаписей();
				НаборЗаписейТовары.Отбор.ДокументУсловий.Установить(Документ);
				НаборЗаписейТовары.Загрузить(СоставТоваров);
				НаборЗаписейТовары.Записать();
				
			КонецЕсли;
			
			ЗафиксироватьСегменты = Истина;
			
		КонецЕсли;
		
		Если АктуальныеДанныеДокумента.СоставУчастников = Перечисления.СоставыУчастниковРетроБонусов.СегментыПартнеров Тогда
			
			СоставПартнеров = СоставСегментовПартнеров(Документ);
			Если СоставПартнеров.Количество() > 0 Тогда
				
				НаборЗаписейКонтрагенты = РегистрыСведений.РетроБонусыКлиентовКонтрагенты.СоздатьНаборЗаписей();
				НаборЗаписейКонтрагенты.Отбор.ДокументУсловий.Установить(Документ);
				НаборЗаписейКонтрагенты.Загрузить(СоставПартнеров);
				НаборЗаписейКонтрагенты.Записать();
				
			КонецЕсли;
			
			ЗафиксироватьСегменты = Истина;
			
		КонецЕсли;
		
		Если ЗафиксироватьСегменты Тогда
			
			НаборЗаписейУсловия = РегистрыСведений.РетроБонусыКлиентовУсловия.СоздатьНаборЗаписей();
			НаборЗаписейУсловия.Отбор.ДокументУсловий.Установить(Документ);
			НаборЗаписейУсловия.Прочитать();
			Для Каждого ЗаписьУсловия Из НаборЗаписейУсловия Цикл
				
				ЗаписьУсловия.СегментыЗафиксированы = Истина;
				
			КонецЦикла;
			НаборЗаписейУсловия.Записать();
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Отменяет фиксацию составов сегментов товаров и партнеров
// 
// Параметры:
//  Документ - ДокументСсылка.УсловияРетроБонусовКлиентов
//
Процедура ОтменитьФиксациюСоставаСегментов(Документ) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РетроБонусыКлиентовУсловия.СоставУчастников КАК СоставУчастников,
	|	РетроБонусыКлиентовУсловия.СоставТоваров КАК СоставТоваров
	|ИЗ
	|	РегистрСведений.РетроБонусыКлиентовУсловия КАК РетроБонусыКлиентовУсловия
	|ГДЕ
	|	РетроБонусыКлиентовУсловия.ДокументУсловий = &ДокументУсловий
	|	И РетроБонусыКлиентовУсловия.СегментыЗафиксированы";
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных();
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.РетроБонусыКлиентовТовары");
		ЭлементБлокировки.УстановитьЗначение("ДокументУсловий", Документ);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.РетроБонусыКлиентовКонтрагенты");
		ЭлементБлокировки.УстановитьЗначение("ДокументУсловий", Документ);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.РетроБонусыКлиентовУсловия");
		ЭлементБлокировки.УстановитьЗначение("ДокументУсловий", Документ);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("ДокументУсловий", Документ);
		РезультатЗапроса = Запрос.Выполнить();
		СегментыЗафиксированы = НЕ РезультатЗапроса.Пустой();
		
		Если СегментыЗафиксированы Тогда
			
			УстановитьПривилегированныйРежим(Истина);
			
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			Если Выборка.СоставТоваров = Перечисления.СоставыТоваровРетроБонусов.СегментыНоменклатуры Тогда
				
				НаборЗаписейТовары = РегистрыСведений.РетроБонусыКлиентовТовары.СоздатьНаборЗаписей();
				НаборЗаписейТовары.Отбор.ДокументУсловий.Установить(Документ);
				НаборЗаписейТовары.Очистить();
				НаборЗаписейТовары.Записать();
				
			КонецЕсли;
			
			Если Выборка.СоставУчастников = Перечисления.СоставыУчастниковРетроБонусов.СегментыПартнеров Тогда
				
				НаборЗаписейКонтрагенты = РегистрыСведений.РетроБонусыКлиентовКонтрагенты.СоздатьНаборЗаписей();
				НаборЗаписейКонтрагенты.Отбор.ДокументУсловий.Установить(Документ);
				НаборЗаписейКонтрагенты.Очистить();;
				НаборЗаписейКонтрагенты.Записать();
				
			КонецЕсли;
			
			НаборЗаписейУсловия = РегистрыСведений.РетроБонусыКлиентовУсловия.СоздатьНаборЗаписей();
			НаборЗаписейУсловия.Отбор.ДокументУсловий.Установить(Документ);
			НаборЗаписейУсловия.Прочитать();
			Для Каждого ЗаписьУсловия Из НаборЗаписейУсловия Цикл
				
				ЗаписьУсловия.СегментыЗафиксированы = Ложь;
				
			КонецЦикла;
			НаборЗаписейУсловия.Записать();
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Возвращает таблицу товаров, входящих в сегменты документа, соответствующую структуре РС РетроБонусыКлиентовТовары
//
// Параметры:
//  Документ - ДокументСсылка.УсловияРетроБонусовКлиентов
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//  * НачалоДействия - Дата
//  * ОкончаниеДействия - Дата
//  * ДокументУсловий - ДокументСсылка.УсловияРетроБонусовКлиентов
//  * Номенклатура - СправочникСсылка.Номенклатура
//  * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры
//  * КоличествоПлан - Число
//  * БонусПроцент - Число
//  * БазоваяЦена - ОпределяемыйТип.Цена
//  * РегистраторДвижения - ДокументСсылка.УсловияРетроБонусовКлиентов
//
Функция СоставСегментовТоваров(Документ) Экспорт
	
	СоставСегментовТоваров = РегистрыСведений.РетроБонусыКлиентовТовары.СоздатьНаборЗаписей().Выгрузить();
	
	АктуальныйДокумент = АктуальныйДокументУсловийРетроБонусовПоСсылке(Документ);
	Если НЕ АктуальныйДокумент.Пустая() Тогда
		
		НоменклатураСегментов = ЗаполнитьДанныеДляФиксацииСегментовТоваров(Документ);
		Если НоменклатураСегментов.Количество() > 0 Тогда
			
			ДанныеДокумента = Документы.УсловияРетроБонусовКлиентов.АктуальныеДанные(Документ);
			
			Для Каждого ДанныеНоменклатуры Из НоменклатураСегментов Цикл
				
				НоваяСтрока = СоставСегментовТоваров.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеДокумента);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеНоменклатуры);
				НоваяСтрока.ДокументУсловий = Документ;
				НоваяСтрока.РегистраторДвижения = АктуальныйДокумент;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СоставСегментовТоваров;
	
КонецФункции

// Возвращает таблицу партнеров, входящих в сегменты документа, соответствующую структуре РС РетроБонусыКлиентовКонтрагенты
//
// Параметры:
//  Документ - ДокументСсылка.УсловияРетроБонусовКлиентов
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//  * НачалоДействия - Дата
//  * ОкончаниеДействия - Дата
//  * ДокументУсловий - ДокументСсылка.УсловияРетроБонусовКлиентов
//  * Контрагент - СправочникСсылка.Контрагенты
//  * Партнер - СправочникСсылка.Партнеры
//  * СуммаПлан - ОпределяемыйТип.ДенежнаяСуммаНеотрицательная
//  * РегистраторДвижения - ДокументСсылка.УсловияРетроБонусовКлиентов
//
Функция СоставСегментовПартнеров(Документ) Экспорт
	
	СоставСегментовПартнеров = РегистрыСведений.РетроБонусыКлиентовКонтрагенты.СоздатьНаборЗаписей().Выгрузить();
	
	АктуальныйДокумент = АктуальныйДокументУсловийРетроБонусовПоСсылке(Документ);
	Если НЕ АктуальныйДокумент.Пустая() Тогда
		
		ПартнерыСегментов = ЗаполнитьДанныеДляФиксацииСегментовПартнеров(Документ);
		
		Если ПартнерыСегментов.Количество() > 0 Тогда
			
			ДанныеДокумента = Документы.УсловияРетроБонусовКлиентов.АктуальныеДанные(Документ);
			
			Для Каждого ДанныеПартнера Из ПартнерыСегментов Цикл
				
				НоваяСтрока = СоставСегментовПартнеров.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеДокумента);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеПартнера);
				НоваяСтрока.ДокументУсловий = Документ;
				НоваяСтрока.РегистраторДвижения = АктуальныйДокумент;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СоставСегментовПартнеров;
	
КонецФункции

// Определяет имя табличной части и представление для условий ретро-бонусов клиентов по переданным параметрам
// 
// Параметры:
//  Состав - ПеречислениеСсылка.СоставыУчастниковРетроБонусов, ПеречислениеСсылка.СоставыТоваровРетроБонусов - 
//  ОтборУчастников - ПеречислениеСсылка.СоставыСписковРетроБонусов - Отбор участников
// 
// Возвращаемое значение:
//  Структура - Имя представление таблицы по реквизитам:
// * ИмяТаблицы - Строка - 
// * ПредставлениеТаблицы - Строка - 
//
Функция ИмяПредставлениеТаблицыПоРеквизитамУсловийКлиентов(Состав, ОтборУчастников) Экспорт
	
	ИмяПредставлениеТаблицы = Новый Структура;
	ИмяПредставлениеТаблицы.Вставить("ИмяТаблицы", "");
	ИмяПредставлениеТаблицы.Вставить("ПредставлениеТаблицы", "");
	
	Если ТипЗнч(Состав) = Тип("ПеречислениеСсылка.СоставыУчастниковРетроБонусов") Тогда
		
		Если Состав = Перечисления.СоставыУчастниковРетроБонусов.Контрагенты Тогда
			
			ИмяПредставлениеТаблицы.ИмяТаблицы = "Контрагенты";
			Если ОтборУчастников = Перечисления.СоставыСписковРетроБонусов.Выбранные Тогда
				ИмяПредставлениеТаблицы.ПредставлениеТаблицы = НСтр("ru = 'Выбранные контрагенты'");
			Иначе
				ИмяПредставлениеТаблицы.ПредставлениеТаблицы = НСтр("ru = 'Кроме контрагентов'");
			КонецЕсли;
			
		ИначеЕсли Состав = Перечисления.СоставыУчастниковРетроБонусов.Клиенты Тогда
			
			ИмяПредставлениеТаблицы.ИмяТаблицы = "Контрагенты";
			Если ОтборУчастников = Перечисления.СоставыСписковРетроБонусов.Выбранные Тогда
				ИмяПредставлениеТаблицы.ПредставлениеТаблицы = НСтр("ru = 'Выбранные клиенты'");
			Иначе
				ИмяПредставлениеТаблицы.ПредставлениеТаблицы = НСтр("ru = 'Кроме клиентов'");
			КонецЕсли;
			
		ИначеЕсли Состав = Перечисления.СоставыУчастниковРетроБонусов.ИНН Тогда
			
			ИмяПредставлениеТаблицы.ИмяТаблицы = "ИННКонтрагентов";
			Если ОтборУчастников = Перечисления.СоставыСписковРетроБонусов.Выбранные Тогда
				ИмяПредставлениеТаблицы.ПредставлениеТаблицы = НСтр("ru = 'Выбранные ИНН'");
			Иначе
				ИмяПредставлениеТаблицы.ПредставлениеТаблицы = НСтр("ru = 'Кроме ИНН'");
			КонецЕсли;
			
		ИначеЕсли Состав = Перечисления.СоставыУчастниковРетроБонусов.Договоры Тогда
			
			ИмяПредставлениеТаблицы.ИмяТаблицы = "ДоговорыСоглашения";
			ИмяПредставлениеТаблицы.ПредставлениеТаблицы = НСтр("ru = 'Выбранные договоры'");
			
		ИначеЕсли Состав = Перечисления.СоставыУчастниковРетроБонусов.Соглашения Тогда
			
			ИмяПредставлениеТаблицы.ИмяТаблицы = "ДоговорыСоглашения";
			ИмяПредставлениеТаблицы.ПредставлениеТаблицы = НСтр("ru = 'Выбранные соглашения'");
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Состав) = Тип("ПеречислениеСсылка.СоставыТоваровРетроБонусов") Тогда
		
		Если Состав = Перечисления.СоставыТоваровРетроБонусов.Номенклатура Тогда
			
			ИмяПредставлениеТаблицы.ИмяТаблицы = "Товары";
			Если ОтборУчастников = Перечисления.СоставыСписковРетроБонусов.Выбранные Тогда
				ИмяПредставлениеТаблицы.ПредставлениеТаблицы = НСтр("ru = 'Выбранные товары'");
			Иначе
				ИмяПредставлениеТаблицы.ПредставлениеТаблицы = НСтр("ru = 'Кроме товаров'");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИмяПредставлениеТаблицы;
	
КонецФункции

// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.ТипыНоменклатуры
Функция ПоддерживаемыеТипыНоменклатуры() Экспорт
	
	ПоддерживаемыеТипыНоменклатуры = Новый Массив; // Массив из ПеречислениеСсылка.ТипыНоменклатуры
	ПоддерживаемыеТипыНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Товар);
	ПоддерживаемыеТипыНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Услуга);
	ПоддерживаемыеТипыНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Работа);
	
	Возврат ПоддерживаемыеТипыНоменклатуры;
	
КонецФункции

// см. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов
Процедура НастроитьВариантыОтчетов(Настройки) Экспорт
	
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ВедомостьПоРетроБонусамКлиентов);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.РасчетРетроБонусовКлиентов);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ДействующиеРетроБонусыКлиента);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.СоставСегментовРетроБонусовКлиентов);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ДействующиеРетроБонусыПоСоглашению);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ДействующиеРетроБонусыПоДоговору);
	
КонецПроцедуры

// Формирует представление периода расчета для отчета.
// 
// Параметры:
//  НачалоПериодаРасчета - Дата
//  Периодичность - ПеречислениеСсылка.ПериодичностиРетроБонусов - Периодичность условий ретро-бонусов
//  ПериодОтчета - СтандартныйПериод
// 
// Возвращаемое значение:
//  Строка - Строковое представление периода расчета
//
Функция ПредставлениеПериодаРасчета(НачалоПериодаРасчета, Периодичность, ПериодОтчета) Экспорт
	
	НачалоПериодаРасчетаПредставление = Формат(НачалоПериодаРасчета, "ДЛФ=D");
	ШаблонПредставленияПериода = "%1 - %2";
	
	Периодичности = Перечисления.ПериодичностиРетроБонусов;
	Если Периодичность = Периодичности.День Тогда
		
		ПредставлениеПериода = НачалоПериодаРасчетаПредставление;
		
	ИначеЕсли Периодичность = Периодичности.Неделя Тогда
		
		КонецПериода = КонецНедели(НачалоПериодаРасчета);
		КонецПериодаПредставление = Формат(КонецПериода, "ДЛФ=D");
		ПредставлениеПериода = СтрШаблон(
			ШаблонПредставленияПериода, НачалоПериодаРасчетаПредставление, КонецПериодаПредставление);
		
	ИначеЕсли Периодичность = Периодичности.Месяц Тогда
		
		КонецПериода = КонецМесяца(НачалоПериодаРасчета);
		ПредставлениеПериода = ПредставлениеПериода(НачалоПериодаРасчета, КонецПериода);
		
	ИначеЕсли Периодичность = Периодичности.Квартал Тогда
		
		КонецПериода = КонецКвартала(НачалоПериодаРасчета);
		ПредставлениеПериода = ПредставлениеПериода(НачалоПериодаРасчета, КонецПериода);
		
	Иначе
		
		НачалоПериодаОтчетаПредставление = Формат(ПериодОтчета.ДатаНачала, "ДЛФ=D");
		КонецПериодаОтчетаПредставление = Формат(ПериодОтчета.ДатаОкончания, "ДЛФ=D");
		ПредставлениеПериода = СтрШаблон(
			ШаблонПредставленияПериода, НачалоПериодаОтчетаПредставление, КонецПериодаОтчетаПредставление);
		
	КонецЕсли;
	
	Возврат ПредставлениеПериода;
	
КонецФункции

// Возвращает признак наличия корректировочных документов в статусе "На согласовании" для документа условий ретро-бонусов
// 
// Параметры:
//  Документ - ДокументСсылка.УсловияРетроБонусовКлиентов
//
// Возвращаемое значение:
//  Булево
//
Функция ЕстьКорректировкаНаСогласовании(Документ) Экспорт
	
	КорректировкаНаСогласовании = АктуальныйДокументУсловийРетроБонусовПоСсылке(
		Документ,
		Перечисления.СтатусыДокументовРетроБонусов.НаСогласовании);
	
	Результат = (НЕ КорректировкаНаСогласовании.Пустая()
				  И КорректировкаНаСогласовании <> Документ);
	
	Возврат Результат;
	
КонецФункции

Функция ИмяСобытияВыключенКонтрольОстатков() Экспорт
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Возврат НСтр("ru = 'Контроль остатков ретро-бонусов'", КодОсновногоЯзыка);
	
КонецФункции

#КонецОбласти

#Область ПакетнаяОбработкаСтрок

// см. ПакетнаяОбработкаТабличнойЧастиСервер.ПриДобавленииОбработчиковСтрокКоллекции
Процедура ПриДобавленииОбработчиковСтрокКоллекции(ОбработчикиСтрок) Экспорт
	
	ОбработчикиСтрок.Добавить(
		"ЗаполнитьПризнакСоглашенияВСтрокеТЧ",
		"РетроБонусыСервер.ОбработкаСтрокЗаполнитьПризнакСоглашенияВСтрокеТЧ");
	
КонецПроцедуры

// Параметры:
//	ТекущаяСтрока - Структура:
//		* Соглашение - СправочникСсылка.СоглашенияСКлиентами
//		* ЭтоТиповоеСоглашение - Булево
//	СтруктураДействий - См. ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ.СтруктураДействий
//	КешированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения
//
Процедура ОбработкаСтрокЗаполнитьПризнакСоглашенияВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КешированныеЗначения = Неопределено) Экспорт
	
	Перем ИмяПоляСоглашение; // Строка
	
	СтруктураДействий.Свойство("ЗаполнитьПризнакСоглашенияВСтрокеТЧ", ИмяПоляСоглашение);
	
	ДанныеДляОбработки = ПакетнаяОбработкаТабличнойЧастиСервер.ДанныеДляОбработкиСтроки(
		"ПризнакиСоглашений", КешированныеЗначения); 
	
	Если ДанныеДляОбработки <> Неопределено Тогда
		
		ПолученныеДанные = ДанныеДляОбработки[0].ЭтоТиповоеСоглашение; // Булево
		ТекущаяСтрока.ЭтоТиповоеСоглашение = ПолученныеДанные;
		
		ЗначениеСоглашения = ТекущаяСтрока[ИмяПоляСоглашение]; // СправочникСсылка.СоглашенияСКлиентами
		КешированныеЗначения.ПризнакиСоглашений[ЗначениеСоглашения] = ТекущаяСтрока.ЭтоТиповоеСоглашение;
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧВЦикле.Действия
//  КешированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения
//
Процедура ДополнитьТекстыЗапросовИсточниковДанных(Действия, КешированныеЗначения) Экспорт
	
	ОписаниеЗапроса = КешированныеЗначения.ОписаниеЗапроса; // см. ПакетнаяОбработкаТабличнойЧастиСервер.ОписаниеЗапроса
	
	ДополнитьТекстЗапросаПризнакСоглашенияВСтрокеТЧ(Действия, ОписаниеЗапроса, КешированныеЗначения);
	
КонецПроцедуры

// Добавляет запрос в пакет запросов для получения данных, необходимых для заполнения типа номера ГТД при 
// обработке строк табличной части.
//
// Параметры:
//  СтруктураДействий - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧВЦикле.Действия
//  ОписаниеЗапроса - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОписаниеЗапроса
//  КешированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения
//
Процедура ДополнитьТекстЗапросаПризнакСоглашенияВСтрокеТЧ(СтруктураДействий, ОписаниеЗапроса, КешированныеЗначения) Экспорт
	
	Перем ИмяПоляСоглашение; // Строка
	
	ДействиеТребуется = ПакетнаяОбработкаТабличнойЧастиСервер.ТребуетсяВыполнитьДействие(
		"ЗаполнитьПризнакСоглашенияВСтрокеТЧ",
		СтруктураДействий,
		КешированныеЗначения,
		ИмяПоляСоглашение);
	
	Если ДействиеТребуется Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИсточникДанных.ИдентификаторСтрокиВТ КАК ИдентификаторСтрокиВТ,
		|	СоглашенияСКлиентами.Типовое КАК ЭтоТиповоеСоглашение
		|ИЗ
		|	ВтИсточникДанных КАК ИсточникДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
		|		ПО &ПолеСоглашение = СоглашенияСКлиентами.Ссылка";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеСоглашение", "ИсточникДанных." + ИмяПоляСоглашение);
		
		ОписаниеЗапроса.ТекстыЗапросов.Добавить(ТекстЗапроса, "ПризнакиСоглашений");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Процедура ОчиститьРегистрыАктуальныхДанных(ДокументСсылка, ИменаРегистров)
	
	Для Каждого ИмяРегистра Из ИменаРегистров Цикл
		
		НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ДокументУсловий.Установить(ДокументСсылка);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьРегистрыАктуальныхДанных(ДокументРегистратор, ДокументОснование, ИменаРегистров)
	
	СтрокаРегистров = СтрСоединить(ИменаРегистров, ",");
	
	ТаблицыДляДвижений = ПроведениеДокументов.ДанныеДокументаДляПроведения(ДокументРегистратор, СтрокаРегистров);
	Для Каждого ИмяРегистра Из ИменаРегистров Цикл
		
		ИмяТаблицы = "Таблица" + ИмяРегистра;
		
		НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ДокументУсловий.Установить(ДокументОснование);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		
		// Можем не готовить таблицу, если по настройкам она не используется, но очистить записи требуется
		Если ТаблицыДляДвижений.Свойство(ИмяТаблицы) Тогда
			
			ТаблицаДанных = ТаблицыДляДвижений[ИмяТаблицы]; // ТаблицаЗначений
			НаборЗаписей.Загрузить(ТаблицаДанных);
			
		КонецЕсли;
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  Документ - ДокументОбъект.УсловияРетроБонусовКлиентов - записываемый документ
//  МенеджерВременныхТаблиц - см. ПослеЗаписиДвиженийДокумента.МенеджерВременныхТаблиц
//  Отказ - Булево - см. ПослеЗаписиДвиженийДокумента.Отказ
//
Процедура ПослеЗаписиДвиженийДокументаУсловияРетроБонусовКлиентов(Документ, МенеджерВременныхТаблиц, Отказ) Экспорт
	
	Если ТипЗнч(Документ) <> Тип("ДокументОбъект.УсловияРетроБонусовКлиентов") Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваДокумента = ПроведениеДокументов.СвойстваДокумента(Документ);
	
	ИменаРегистров = Новый Массив; // Массив из Строка
	
	ИменаРегистров.Добавить("РетроБонусыКлиентовУсловия");
	ИменаРегистров.Добавить("РетроБонусыКлиентовКонтрагенты");
	ИменаРегистров.Добавить("РетроБонусыКлиентовИНН");
	ИменаРегистров.Добавить("РетроБонусыКлиентовСегментыПартнеров");
	ИменаРегистров.Добавить("РетроБонусыКлиентовДоговорыСоглашения");
	ИменаРегистров.Добавить("РетроБонусыКлиентовТовары");
	ИменаРегистров.Добавить("РетроБонусыКлиентовСегментыТоваров");
	
	ИсходныйДокумент = ?(Документ.ИсправляемыйДокумент.Пустая(), Документ.Ссылка, Документ.ИсправляемыйДокумент);
	
	Если СвойстваДокумента.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		
		Если Документ.ИсправляемыйДокумент.Пустая() Тогда
			
			ОчиститьРегистрыАктуальныхДанных(Документ.Ссылка, ИменаРегистров);
			
		Иначе
			
			Выборка = АктуальныйДокументУсловийРетроБонусов(Документ);
			Если Выборка.Следующий() Тогда
				
				АктуальныйДокумент = Выборка.Ссылка; // ДокументСсылка.УсловияРетроБонусовПокупателей
				СформироватьРегистрыАктуальныхДанных(АктуальныйДокумент, ИсходныйДокумент, ИменаРегистров);
				
			Иначе
				
				// Остался только сам исходный документ
				СформироватьРегистрыАктуальныхДанных(ИсходныйДокумент, ИсходныйДокумент, ИменаРегистров);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если Документ.Статус = Перечисления.СтатусыДокументовРетроБонусов.Согласован
		 ИЛИ Документ.ИсправляемыйДокумент.Пустая() Тогда
			
			СформироватьРегистрыАктуальныхДанных(Документ.Ссылка, ИсходныйДокумент, ИменаРегистров);
			
		Иначе
			
			Выборка = АктуальныйДокументУсловийРетроБонусов(Документ);
			
			Если Выборка.Следующий() Тогда
				
				АктуальныйДокумент = Выборка.Ссылка; // ДокументСсылка.УсловияРетроБонусовПокупателей
				СформироватьРегистрыАктуальныхДанных(АктуальныйДокумент, ИсходныйДокумент, ИменаРегистров);
				
			Иначе
				
				// Остался только сам исходный документ
				СформироватьРегистрыАктуальныхДанных(ИсходныйДокумент, ИсходныйДокумент, ИменаРегистров);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// см. ИнициализироватьДанныеКонтроляИзменений
Процедура ИнициализацияКонтроляИзмененийРетроБонусыКлиентов(Запрос, ТекстыЗапроса, Документ) Экспорт
	
	ЕстьИзмененияДвиженийКОформлению = ПроведениеДокументов.ЕстьЗаписиВТаблице(
		Документ, "ДвиженияРетроБонусыКлиентовИзменение");
	
	Если НЕ ЕстьИзмененияДвиженийКОформлению Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаКонтроляПосле", Новый Граница(КонецДня(Документ.Дата), ВидГраницы.Включая));
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ИСТИНА КАК КонтрольНаДатуДокумента,
	|	РетроБонусыКлиентовОстатки.Организация КАК Организация,
	|	РетроБонусыКлиентовОстатки.Контрагент КАК Контрагент,
	|	РетроБонусыКлиентовОстатки.Партнер КАК Партнер,
	|	РетроБонусыКлиентовОстатки.НачалоПериода КАК НачалоПериода,
	|	РетроБонусыКлиентовОстатки.ОкончаниеПериода КАК ОкончаниеПериода,
	|	РетроБонусыКлиентовОстатки.ДокументУсловий КАК ДокументУсловий,
	|	РетроБонусыКлиентовОстатки.Валюта КАК Валюта,
	|	РетроБонусыКлиентовОстатки.СуммаБонусОстаток - РетроБонусыКлиентовОстатки.КАктированиюОстаток - РетроБонусыКлиентовОстатки.КПодписаниюОстаток - РетроБонусыКлиентовОстатки.КСписаниюОстаток КАК СуммаБонусОстаток
	|ИЗ
	|	РегистрНакопления.РетроБонусыКлиентов.Остатки(&ДатаКонтроляПосле, (Организация, Контрагент, Партнер, НачалоПериода,	ОкончаниеПериода, ДокументУсловий, Валюта) В
	|		(ВЫБРАТЬ
	|			Таблица.Организация,
	|			Таблица.Контрагент,
	|			Таблица.Партнер,
	|			Таблица.НачалоПериода,
	|			Таблица.ОкончаниеПериода,
	|			Таблица.ДокументУсловий,
	|			Таблица.Валюта
	|		ИЗ
	|			ДвиженияРетроБонусыКлиентовИзменение КАК Таблица)) КАК РетроБонусыКлиентовОстатки
	|ГДЕ
	|	РетроБонусыКлиентовОстатки.СуммаБонусОстаток - РетроБонусыКлиентовОстатки.КАктированиюОстаток - РетроБонусыКлиентовОстатки.КПодписаниюОстаток - РетроБонусыКлиентовОстатки.КСписаниюОстаток < 0
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЛОЖЬ КАК КонтрольНаДатуДокумента,
	|	РетроБонусыКлиентовОстатки.Организация КАК Организация,
	|	РетроБонусыКлиентовОстатки.Контрагент КАК Контрагент,
	|	РетроБонусыКлиентовОстатки.Партнер КАК Партнер,
	|	РетроБонусыКлиентовОстатки.НачалоПериода КАК НачалоПериода,
	|	РетроБонусыКлиентовОстатки.ОкончаниеПериода КАК ОкончаниеПериода,
	|	РетроБонусыКлиентовОстатки.ДокументУсловий КАК ДокументУсловий,
	|	РетроБонусыКлиентовОстатки.Валюта КАК Валюта,
	|	РетроБонусыКлиентовОстатки.СуммаБонусОстаток - РетроБонусыКлиентовОстатки.КАктированиюОстаток - РетроБонусыКлиентовОстатки.КПодписаниюОстаток - РетроБонусыКлиентовОстатки.КСписаниюОстаток КАК СуммаБонусОстаток
	|ИЗ
	|	РегистрНакопления.РетроБонусыКлиентов.Остатки(, (Организация, Контрагент, Партнер, НачалоПериода, ОкончаниеПериода,	ДокументУсловий, Валюта) В
	|		(ВЫБРАТЬ
	|			Таблица.Организация,
	|			Таблица.Контрагент,
	|			Таблица.Партнер,
	|			Таблица.НачалоПериода,
	|			Таблица.ОкончаниеПериода,
	|			Таблица.ДокументУсловий,
	|			Таблица.Валюта
	|		ИЗ
	|			ДвиженияРетроБонусыКлиентовИзменение КАК Таблица)) КАК РетроБонусыКлиентовОстатки
	|ГДЕ
	|	РетроБонусыКлиентовОстатки.СуммаБонусОстаток - РетроБонусыКлиентовОстатки.КАктированиюОстаток - РетроБонусыКлиентовОстатки.КПодписаниюОстаток - РетроБонусыКлиентовОстатки.КСписаниюОстаток < 0";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, "ОшибкиСписанияСуммБонусов");
	
КонецПроцедуры

// см. СообщитьОРезультатахКонтроляИзменений
Процедура КонтрольИзмененийРетроБонусыКлиентов(РезультатыКонтроля, Документ, Отказ)
	
	Если НЕ ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияРетроБонусыКлиентовИзменение") Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонСообщенияНаДатуДокумента = НСтр("ru = 'Недостаточно суммы бонуса за период с %1 по %2 по документу ""%3"", контрагенту ""%4"" и партнеру ""%5"" на дату документа.
										  |Превышение: %6 %7'");
	
	ШаблонСообщенияОбщий = НСтр("ru = 'Недостаточно суммы бонуса за период с %1 по %2 по документу ""%3"", контрагенту ""%4"" и партнеру ""%5"".
								|Превышение: %6 %7'");
	
	Для каждого СтрокаОшибки Из РезультатыКонтроля.ОшибкиСписанияСуммБонусов Цикл
		
		КонтрольНаДатуДокумента = СтрокаОшибки.КонтрольНаДатуДокумента;
		СуммаПревышения = Формат(- СтрокаОшибки.СуммаБонусОстаток, "ЧДЦ=2;");
		НачалоПериода = Формат(СтрокаОшибки.НачалоПериода, "ДЛФ=D;");
		ОкончаниеПериода = Формат(СтрокаОшибки.ОкончаниеПериода, "ДЛФ=D;");
		ДокументУсловий = Строка(СтрокаОшибки.ДокументУсловий);
		Валюта = Строка(СтрокаОшибки.Валюта);
		Партнер = Строка(СтрокаОшибки.Партнер);
		Контрагент = Строка(СтрокаОшибки.Контрагент);
		
		Шаблон = ШаблонСообщенияОбщий;
		Если КонтрольНаДатуДокумента Тогда
			
			Шаблон = ШаблонСообщенияНаДатуДокумента;
			
		КонецЕсли;
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Шаблон,
			НачалоПериода,
			ОкончаниеПериода,
			ДокументУсловий,
			Контрагент,
			Партнер,
			СуммаПревышения,
			Валюта);
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Документ,,, Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

// Параметры:
//  ОписаниеПрофиля - см. УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа
//
Процедура ДополнитьПрофильРолямиЧтенияВидовРетроБонусовКлиентов(ОписаниеПрофиля)
	
	ОписаниеПрофиля.Роли.Добавить("ПодсистемаCRMИМаркетинг");
	ОписаниеПрофиля.Роли.Добавить("РазделCRMИМаркетингРетроБонусыКлиентов");
	
	ОписаниеПрофиля.Роли.Добавить("ЧтениеВидовРетроБонусовКлиентов");
	
КонецПроцедуры

Процедура ДобавитьПрофильОтветственныйВидыРетроБонусовКлиентов(ОписанияПрофилей, ПараметрыОбновления)
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя = "ОтветственныйВидыРетроБонусовКлиентов";
	ОписаниеПрофиля.Идентификатор = "01f05bc6-7524-42db-b87f-c303d0ac3349";
	ОписаниеПрофиля.Родитель = "АдминистрированиеИНСИ";
	ОписаниеПрофиля.Наименование =
		НСтр("ru = 'Ответственный за параметры ретро-бонусов клиентов (дополнительный)'",
			 ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПрофиля.Описание =
		НСтр("ru = 'Профиль предоставляет права на изменение видов ретро-бонусов клиентов.
			 |Должен быть назначен в дополнение к любому другому профилю с правом входа в систему.'",
			 ОбщегоНазначения.КодОсновногоЯзыка());
	
	ДополнитьПрофильРолямиЧтенияВидовРетроБонусовКлиентов(ОписаниеПрофиля);
	
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеВидовРетроБонусовКлиентов");
	
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
КонецПроцедуры

Процедура ДобавитьПрофильМенеджерРетроБонусовКлиентов(ОписанияПрофилей, ПараметрыОбновления)
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя = "МенеджерРетроБонусовКлиентов";
	ОписаниеПрофиля.Идентификатор = "44ec2720-e674-40fa-aec7-04fd4f3f6c6f";
	ОписаниеПрофиля.Родитель = "Продажи";
	ОписаниеПрофиля.Наименование =
		НСтр("ru = 'Менеджер ретро-бонусов клиентов (дополнительный)'",
			 ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПрофиля.Описание =
		НСтр("ru = 'Профиль предоставляет права ведения условий, начислений, списаний ретро-бонусов клиентов.
			 |Должен быть назначен в дополнение к профилю менеджера продаж или руководителя отдела продаж.'",
			 ОбщегоНазначения.КодОсновногоЯзыка());
	
	ДополнитьПрофильРолямиЧтенияВидовРетроБонусовКлиентов(ОписаниеПрофиля);
	
	ОписаниеПрофиля.Роли.Добавить("ЧтениеИнформацииПоПартнерам");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеНормативноСправочнойИнформации");
	
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеУсловийРетроБонусовКлиентов");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеНачисленийРетроБонусовКлиентов");
	ОписаниеПрофиля.Роли.Добавить("ИспользованиеОбработкиГрупповоеНачислениеРетроБонусовКлиентов");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеСписанийРетроБонусовКлиентов");
	
	ОписаниеПрофиля.Роли.Добавить("ПросмотрОтчетаВедомостьПоРетроБонусамКлиентов");
	ОписаниеПрофиля.Роли.Добавить("ПросмотрОтчетаРасчетРетроБонусовКлиентов");
	
	ОписаниеПрофиля.ВидыДоступа.Добавить("Организации", "ВначалеВсеРазрешены");
	
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
КонецПроцедуры

Процедура ДобавитьПрофильУчастникСогласованияУсловийРетроБонусовКлиентов(ОписанияПрофилей, ПараметрыОбновления)
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя = "УчастникСогласованияУсловийРетроБонусовКлиентов";
	ОписаниеПрофиля.Идентификатор = "a9d6dc14-4886-4d20-b30a-f8ae3c2956c4";
	ОписаниеПрофиля.Родитель = "Продажи";
	ОписаниеПрофиля.Наименование =
		НСтр("ru = 'Участник согласования условий ретро-бонусов клиентов (дополнительный)'",
			 ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПрофиля.Описание =
		НСтр("ru = 'Профиль предоставляет право непосредственного согласования документ условий ретро-бонусов.
			 |Должен быть назначен в дополнение к профилю ""Менеджер ретро-бонусов клиентов (дополнительный)""'",
			 ОбщегоНазначения.КодОсновногоЯзыка());
	
	ОписаниеПрофиля.Роли.Добавить("ПравоСогласованияУсловийРетроБонусовКлиентов");
	
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
КонецПроцедуры

Процедура ДобавитьПрофильОтветственныйАктыПремийКлиентамДополнительный(ОписанияПрофилей, ПараметрыОбновления)
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя = "ОтветственныйАктыПремийКлиентамДополнительный";
	ОписаниеПрофиля.Идентификатор = "852ffecd-ef3c-4be8-ab91-05c17c2645ba";
	ОписаниеПрофиля.Родитель = "Продажи";
	ОписаниеПрофиля.Наименование =
		НСтр("ru = 'Ответственный за акты премий клиентам (дополнительный)'",
			 ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПрофиля.Описание =
		НСтр("ru = 'Профиль предоставляет право оформления актов премий клиентам.
			 |Должен быть назначен в дополнение к профилю ""Менеджер ретро-бонусов клиентов (дополнительный)""'",
			 ОбщегоНазначения.КодОсновногоЯзыка());
	
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеАктПремииКлиенту");
	
	ОписаниеПрофиля.ВидыДоступа.Добавить("Организации", "ВначалеВсеРазрешены");
	
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
КонецПроцедуры

Процедура ДобавитьПрофильПравоОтключенияКонтроляОстатковРетроБонусовДополнительный(ОписанияПрофилей, ПараметрыОбновления)
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя = "ПравоОтключенияКонтроляОстатковРетроБонусовДополнительный";
	ОписаниеПрофиля.Идентификатор = "17126a31-a792-4be6-92b9-6a5451248c79";
	ОписаниеПрофиля.Родитель = "Продажи";
	ОписаниеПрофиля.Наименование =
		НСтр("ru = 'Право отключения контроля остатков ретро-бонусов (дополнительный)'",
			 ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПрофиля.Описание =
		НСтр("ru = 'Профиль предоставляет право отключения контроля остатков ретро-бонусов.
			 |
			 |Назначается в дополнение к профилю ""Менеджер ретро-бонусов клиентов (дополнительный)"" или ""Ответственный за акты премий клиентам (дополнительный)""'",
			 ОбщегоНазначения.КодОсновногоЯзыка());
	
	ОписаниеПрофиля.Роли.Добавить("РазрешитьОтключениеКонтроляРетроБонусовНаВремяСеанса");
	
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
КонецПроцедуры

#КонецОбласти

#Область ФиксацияСоставовСегментов

// Параметры:
//  ДокументУсловий - ДокументСсылка.УсловияРетроБонусовКлиентов
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
// * Номенклатура - СправочникСсылка.Номенклатура
// * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры
//
Функция ЗаполнитьДанныеДляФиксацииСегментовТоваров(ДокументУсловий, ПоДаннымДокумента = Ложь) Экспорт
	
	ТипыНоменклатуры = ПоддерживаемыеТипыНоменклатуры();
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаДляФиксацииСегментовНоменклатуры(ПоДаннымДокумента);
	Запрос.УстановитьПараметр("ДокументУсловий", ДокументУсловий);
	Запрос.УстановитьПараметр("ПоддерживаемыеТипыНоменклатуры", ТипыНоменклатуры);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	РезультатСтатическиеСегменты = РезультатыЗапроса[1];
	РезультатДинамическиеСегменты = РезультатыЗапроса[2];
	
	НоменклатураСегментов = НоваяТаблицаНоменклатурыСегментов();
		
	Если НЕ РезультатСтатическиеСегменты.Пустой() Тогда
		
		Выборка = РезультатСтатическиеСегменты.Выбрать();
		ЗаполнитьДанныеДляФиксацииСтатическихСегментов(Выборка, НоменклатураСегментов);
		
	КонецЕсли;
	
	Если НЕ РезультатДинамическиеСегменты.Пустой() Тогда
		
		Выборка = РезультатДинамическиеСегменты.Выбрать();
		ЗаполнитьДанныеДляФиксацииДинамическихСегментовТоваров(
			Выборка,
			НоменклатураСегментов);
			
	КонецЕсли;
	
	Возврат НоменклатураСегментов;
	
КонецФункции

// Параметры:
//  ДокументУсловий - ДокументСсылка.УсловияРетроБонусовКлиентов
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
// * Партнер - СправочникСсылка.Партнеры
//
Функция ЗаполнитьДанныеДляФиксацииСегментовПартнеров(ДокументУсловий, ПоДаннымДокумента = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаДляФиксацииСегментовПартнеров(ПоДаннымДокумента);
	Запрос.УстановитьПараметр("ДокументУсловий", ДокументУсловий);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	РезультатСтатическиеСегменты = РезультатыЗапроса[1];
	РезультатДинамическиеСегменты = РезультатыЗапроса[2];
	
	ПартнерыСегментов = НоваяТаблицаПартнеровСегментов();
	
	Если НЕ РезультатСтатическиеСегменты.Пустой() Тогда
		
		Выборка = РезультатСтатическиеСегменты.Выбрать();
		ЗаполнитьДанныеДляФиксацииСтатическихСегментов(Выборка, ПартнерыСегментов);
		
	КонецЕсли;
	
	Если НЕ РезультатДинамическиеСегменты.Пустой() Тогда
		
		Выборка = РезультатДинамическиеСегменты.Выбрать();
		ЗаполнитьДанныеДляФиксацииДинамическихСегментовПартнеров(Выборка, ПартнерыСегментов);
		
	КонецЕсли;
	
	Возврат ПартнерыСегментов;
	
КонецФункции

Функция ТекстЗапросаДляФиксацииСегментовНоменклатуры(ПоДаннымДокумента)
	
	МассивЗапросов = Новый Массив;
	
	Если ПоДаннымДокумента Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	УсловияРетроБонусовКлиентовСегментыТоваров.Сегмент КАК Сегмент,
		|	УсловияРетроБонусовКлиентовСегментыТоваров.Сегмент.СпособФормирования КАК СпособФормирования
		|ПОМЕСТИТЬ ВТ_Сегменты
		|ИЗ
		|	Документ.УсловияРетроБонусовКлиентов.СегментыТоваров КАК УсловияРетроБонусовКлиентовСегментыТоваров
		|ГДЕ
		|	УсловияРетроБонусовКлиентовСегментыТоваров.Ссылка = &ДокументУсловий
		|	И НЕ УсловияРетроБонусовКлиентовСегментыТоваров.Отменено";
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СегментыТоваров.Сегмент КАК Сегмент,
		|	СегментыТоваров.Сегмент.СпособФормирования КАК СпособФормирования
		|ПОМЕСТИТЬ ВТ_Сегменты
		|ИЗ
		|	РегистрСведений.РетроБонусыКлиентовСегментыТоваров КАК СегментыТоваров
		|ГДЕ
		|	СегментыТоваров.ДокументУсловий = &ДокументУсловий
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сегмент"; 
		
	КонецЕсли;
	
	МассивЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НоменклатураСегмента.Номенклатура КАК Номенклатура,
	|	НоменклатураСегмента.Характеристика КАК Характеристика
	|ИЗ
	|	ВТ_Сегменты КАК ВТ_Сегменты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
	|		ПО ВТ_Сегменты.Сегмент = НоменклатураСегмента.Сегмент
	|		И НоменклатураСегмента.Номенклатура.ТипНоменклатуры В (&ПоддерживаемыеТипыНоменклатуры)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Сегменты.Сегмент КАК Сегмент
	|ИЗ
	|	ВТ_Сегменты КАК ВТ_Сегменты
	|ГДЕ
	|	ВТ_Сегменты.СпособФормирования = ЗНАЧЕНИЕ(Перечисление.СпособыФормированияСегментов.ФормироватьДинамически)";
	
	МассивЗапросов.Добавить(ТекстЗапроса);
	ТекстЗапроса = СтрСоединить(МассивЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДляФиксацииСегментовПартнеров(ПоДаннымДокумента)
	
	МассивЗапросов = Новый Массив;
	
	Если ПоДаннымДокумента Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	УсловияРетроБонусовКлиентовСегментыПартнеров.Сегмент КАК Сегмент,
		|	УсловияРетроБонусовКлиентовСегментыПартнеров.Сегмент.СпособФормирования КАК СпособФормирования
		|ПОМЕСТИТЬ ВТ_Сегменты
		|ИЗ
		|	Документ.УсловияРетроБонусовКлиентов.СегментыПартнеров КАК УсловияРетроБонусовКлиентовСегментыПартнеров
		|ГДЕ
		|	УсловияРетроБонусовКлиентовСегментыПартнеров.Ссылка = &ДокументУсловий
		|	И НЕ УсловияРетроБонусовКлиентовСегментыПартнеров.Отменено";
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СегментыПартнеров.Сегмент КАК Сегмент,
		|	СегментыПартнеров.Сегмент.СпособФормирования КАК СпособФормирования
		|ПОМЕСТИТЬ ВТ_Сегменты
		|ИЗ
		|	РегистрСведений.РетроБонусыКлиентовСегментыПартнеров КАК СегментыПартнеров
		|ГДЕ
		|	СегментыПартнеров.ДокументУсловий = &ДокументУсловий
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сегмент";
		
	КонецЕсли;
	
	МассивЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПартнерыСегмента.Партнер КАК Партнер
	|ИЗ
	|	ВТ_Сегменты КАК ВТ_Сегменты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
	|		ПО ВТ_Сегменты.Сегмент = ПартнерыСегмента.Сегмент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Сегменты.Сегмент КАК Сегмент
	|ИЗ
	|	ВТ_Сегменты КАК ВТ_Сегменты
	|ГДЕ
	|	ВТ_Сегменты.СпособФормирования = ЗНАЧЕНИЕ(Перечисление.СпособыФормированияСегментов.ФормироватьДинамически)";
	
	МассивЗапросов.Добавить(ТекстЗапроса);
	ТекстЗапроса = СтрСоединить(МассивЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Параметры:
//  Выборка - ВыборкаИзРезультатаЗапроса:
//  ТаблицаДанныхСегментов - ТаблицаЗначений
//
Процедура ЗаполнитьДанныеДляФиксацииСтатическихСегментов(Выборка, ТаблицаДанныхСегментов)
	
	Пока Выборка.Следующий() Цикл
		
		ДанныеСегмента = ТаблицаДанныхСегментов.Добавить();
		ЗаполнитьЗначенияСвойств(ДанныеСегмента, Выборка);
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  Выборка - ВыборкаИзРезультатаЗапроса:
//  * Сегмент - СправочникСсылка.СегментыНоменклатуры
//  ТаблицаДанныхСегментов - см. НоваяТаблицаНоменклатурыСегментов:
//
Процедура ЗаполнитьДанныеДляФиксацииДинамическихСегментовТоваров(Выборка, ТаблицаДанныхСегментов)
	
	НоменклатураДинамическихСегментов = НоваяТаблицаНоменклатурыСегментов();
	
	Пока Выборка.Следующий() Цикл
		
		ТаблицаСегмента = ТаблицаДинамическогоСегментаНоменклатуры(Выборка.Сегмент);
		Для Каждого СтрокаТаблицыСегмента Из ТаблицаСегмента Цикл
			
			ДанныеСегмента = НоменклатураДинамическихСегментов.Добавить();
			ДанныеСегмента.Номенклатура = СтрокаТаблицыСегмента.ЭлементСписка;
			ДанныеСегмента.Характеристика = СтрокаТаблицыСегмента.ХарактеристикаЭлемента;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(НоменклатураСегментов.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	НоменклатураСегментов.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ВТ_НоменклатураСегментов
	|ИЗ
	|	&НоменклатураСегментов КАК НоменклатураСегментов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_НоменклатураСегментов.Номенклатура КАК Номенклатура,
	|	ВТ_НоменклатураСегментов.Характеристика КАК Характеристика
	|ИЗ
	|	ВТ_НоменклатураСегментов КАК ВТ_НоменклатураСегментов
	|ГДЕ
	|	ВТ_НоменклатураСегментов.Номенклатура.ТипНоменклатуры В (&ПоддерживаемыеТипыНоменклатуры)";
	
	ТипыНоменклатуры = ПоддерживаемыеТипыНоменклатуры();
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НоменклатураСегментов", НоменклатураДинамическихСегментов);
	Запрос.УстановитьПараметр("ПоддерживаемыеТипыНоменклатуры", ТипыНоменклатуры);
	
	РезультатСоставСегментов = Запрос.Выполнить();
	Если НЕ РезультатСоставСегментов.Пустой() Тогда
		
		Выборка = РезультатСоставСегментов.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ДанныеСегмента = ТаблицаДанныхСегментов.Добавить();
			ЗаполнитьЗначенияСвойств(ДанныеСегмента, Выборка);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТаблицаДанныхСегментов.Свернуть("Номенклатура, Характеристика");
	
КонецПроцедуры

// Параметры:
//  Выборка - ВыборкаИзРезультатаЗапроса:
//  * Сегмент - СправочникСсылка.СегментыПартнеров
//  ТаблицаДанныхСегментов - см. НоваяТаблицаПартнеровСегментов
//
Процедура ЗаполнитьДанныеДляФиксацииДинамическихСегментовПартнеров(Выборка, ТаблицаДанныхСегментов)
	
	Пока Выборка.Следующий() Цикл
		
		ТаблицаСегмента = ТаблицаДинамическогоСегментаПартнеров(Выборка.Сегмент);
		Для Каждого СтрокаТаблицыСегмента Из ТаблицаСегмента Цикл
			
			ДанныеСегмента = ТаблицаДанныхСегментов.Добавить();
			ДанныеСегмента.Партнер = СтрокаТаблицыСегмента.ЭлементСписка;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаДанныхСегментов.Свернуть("Партнер");
	
КонецПроцедуры

// Возвращаемое значение:
//  ТаблицаЗначений - Новая таблица номенклатуры сегментов:
//  * Номенклатура - СправочникСсылка.Номенклатура
//  * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры
Функция НоваяТаблицаНоменклатурыСегментов()
	
	ОписаниеТиповНоменклатура = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	ОписаниеТиповХарактеристика = Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры");
	
	НоменклатураСегментов = Новый ТаблицаЗначений();
	НоменклатураСегментов.Колонки.Добавить("Номенклатура", ОписаниеТиповНоменклатура);
	НоменклатураСегментов.Колонки.Добавить("Характеристика", ОписаниеТиповХарактеристика);
	
	Возврат НоменклатураСегментов;
	
КонецФункции

// Возвращаемое значение:
//  ТаблицаЗначений - Новая таблица номенклатуры сегментов:
//  * Партнер - СправочникСсылка.Партнеры
Функция НоваяТаблицаПартнеровСегментов()
	
	ОписаниеТиповПартнер = Новый ОписаниеТипов("СправочникСсылка.Партнеры");
	
	ПартнерыСегментов = Новый ТаблицаЗначений();
	ПартнерыСегментов.Колонки.Добавить("Партнер", ОписаниеТиповПартнер);
	
	Возврат ПартнерыСегментов;
	
КонецФункции

// Параметры:
//  Сегмент - СправочникСсылка.СегментыНоменклатуры
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//  * ЭлементСписка - СправочникСсылка.Номенклатура
//  * ХарактеристикаЭлемента - СправочникСсылка.ХарактеристикиНоменклатуры
Функция ТаблицаДинамическогоСегментаНоменклатуры(Сегмент)
	
	ТаблицаСегмента = СегментыСервер.СписокЭлементовСКД(Сегмент);
	Возврат ТаблицаСегмента;
	
КонецФункции

// Параметры:
//  Сегмент - СправочникСсылка.СегментыПартнеров
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//  * ЭлементСписка - СправочникСсылка.Партнеры
Функция ТаблицаДинамическогоСегментаПартнеров(Сегмент)
	
	ТаблицаСегмента = СегментыСервер.СписокЭлементовСКД(Сегмент);
	Возврат ТаблицаСегмента;
	
КонецФункции

#КонецОбласти

#КонецОбласти