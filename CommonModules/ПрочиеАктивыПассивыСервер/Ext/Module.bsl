
#Область ПрограммныйИнтерфейс

#Область Проведение

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Свойства - ФиксированнаяСтруктура - свойства документа (См. ПроведениеДокументов.СвойстваДокумента).
//
// Возвращаемое значение:
//  Структура - параметры учетного механизма (См. ПроведениеДокументов.ПараметрыУчетногоМеханизма).
//
Функция ПараметрыДляПроведенияДокумента(Документ, Свойства) Экспорт
	
	Параметры = ПроведениеДокументов.ПараметрыУчетногоМеханизма();
	
	// Проведение
	Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.ДвиженияПоПрочимАктивамПассивам);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.ПрочиеАктивыПассивы);
		
		Если ПолучитьФункциональнуюОпцию("ФормироватьУправленческийБаланс")
			И ТипЗнч(Документ) <> Тип("ДокументОбъект.РасчетСебестоимостиТоваров") Тогда
			
			Параметры.ЕстьПроизводныеДвижения = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Контроль даты запрета
	Если Свойства.РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
		Параметры.КонтрольныеРегистрыДатаЗапрета.Добавить(Метаданные.РегистрыНакопления.ДвиженияПоПрочимАктивамПассивам);
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Возвращает тексты запросов для сторнирования движений при исправлении документов
// 
// Параметры:
// 	МетаданныеДокумента - ОбъектМетаданныхДокумент - Метаданные документа, который проводится.
// 
// Возвращаемое значение:
// 	Соответствие - Соответствие полного имени регистра тексту запроса сторнирования
//
Функция ТекстыЗапросовСторнирования(МетаданныеДокумента) Экспорт
	
	ДвиженияДокумента = МетаданныеДокумента.Движения;
	
	ТекстыЗапросов = Новый Соответствие();
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.ДвиженияПоПрочимАктивамПассивам;
	Если ДвиженияДокумента.Содержит(МетаданныеРегистра) Тогда
		ТекстДопУсловий = "
		|	НЕ ДанныеРегистра.РасчетСебестоимости
		|";		
		ТекстыЗапросов.Вставить(МетаданныеРегистра.ПолноеИмя(),
			ПроведениеДокументов.ТекстСторнирующегоЗапроса(
				МетаданныеРегистра,
				МетаданныеДокумента,
				ТекстДопУсловий));
	КонецЕсли;
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.ПрочиеАктивыПассивы;
	Если ДвиженияДокумента.Содержит(МетаданныеРегистра) Тогда
		ТекстДопУсловий = "
		|	НЕ ДанныеРегистра.РасчетСебестоимости
		|	И ДанныеРегистра.Источник = ЗНАЧЕНИЕ(Перечисление.ИсточникиУправленческогоБаланса.ПустаяСсылка)
		|";		
		ТекстыЗапросов.Вставить(МетаданныеРегистра.ПолноеИмя(),
			ПроведениеДокументов.ТекстСторнирующегоЗапроса(
				МетаданныеРегистра,
				МетаданныеДокумента,
				ТекстДопУсловий));
	КонецЕсли;
	
	Возврат ТекстыЗапросов;
	
КонецФункции

// Дополняет текст запроса механизма проверки даты запрета по таблице изменений.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 
// Возвращаемое значение:
//	Соответствие - соответствие имен таблиц изменения регистров и текстов запросов.
//	
Функция ТекстыЗапросовКонтрольДатыЗапретаПоТаблицеИзменений(Запрос) Экспорт

	СоответствиеТекстовЗапросов = Новый Соответствие();
	
	СоответствиеТекстовЗапросов.Вставить("ТаблицаИзмененийДвиженияПоПрочимАктивамПассивам", 
		РегистрыНакопления.ДвиженияПоПрочимАктивамПассивам.ТекстЗапросаКонтрольДатыЗапрета(Запрос));
	
	Возврат СоответствиеТекстовЗапросов;
	
КонецФункции

// Процедура формирования движений по подчиненным регистрам денежных документов.
//
// Параметры:
//   ТаблицыДляДвижений - Структура - таблицы данных документа
//   Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//   Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "ДвиженияПоПрочимАктивамПассивам");
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "ПрочиеАктивыПассивы");
		
КонецПроцедуры

// Формирует тексты запросов для контроля изменений записанных движений регистров.
//
// Параметры:
//  Запрос - Запрос - запрос, хранящий параметры используемые в списке запросов
//  ТекстыЗапроса - СписокЗначений - список текстов запросов и их имен.
//  Документ - ДокументОбъект - записываемый документ.
//
Процедура ИнициализироватьДанныеКонтроляИзменений(Запрос, ТекстыЗапроса, Документ) Экспорт
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

// Выводит сообщения пользователю при наличии ошибок контроля изменений записанных движений регистров.
//
// Параметры:
//  РезультатыКонтроля - Структура - таблицы с результатами контроля изменений
//  Документ - ДокументОбъект - записываемый документ
//  Отказ - Булево - признак отказа от проведения документа.
//
Процедура СообщитьОРезультатахКонтроляИзменений(РезультатыКонтроля, Документ, Отказ) Экспорт
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

// Возникает перед выполнением записи регистров документа.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц,
//      используемый для хранения таблиц контроля изменений регистров
//  Отказ - Булево - признак отказа от проведения документа.
//
Процедура ПередЗаписьюДвиженийДокумента(Документ, МенеджерВременныхТаблиц, Отказ) Экспорт
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

// Возникает после выполнения записи регистров документа.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц,
//      используемый для хранения таблиц контроля изменений регистров
//  Отказ - Булево - признак отказа от проведения документа.
//
Процедура ПослеЗаписиДвиженийДокумента(Документ, МенеджерВременныхТаблиц, Отказ) Экспорт
	
	Если Документ.ДополнительныеСвойства.ПроведениеДокументов.Свойство("НеФормироватьУправленческийБаланс")
	 Или Документ.Движения.Найти("ПрочиеАктивыПассивы") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтложенныеЗадания.ОбработатьЗаданияОчереди(
		"ЗаданияКЗаписиВПрочиеАктивыПассивы",
		Новый Структура("Документ", Документ.Ссылка));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Проведение

// Функция возвращает текст запроса для отражения взаимозачета между филиалами в регистре ДвиженияПоПрочимАктивамПассивам.
// Аналог проводок вида Дт 6Х.ХХ :: Кт 79.02, Дт 79.02 :: Кт 6Х.ХХ.
// Движения формируются по данным временной таблицы, используемой для записи в регистр ДвиженияКонтрагентКонтрагент
//
// Параметры:
//  ЕстьПРиВР - Булево - Признак необходимости добавления в запрос полей постоянной и временной разниц
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаВзаимозачетСФилиалами(ЕстьПРиВР = Ложь, ЕстьОбъектРасчетов = Ложь) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДвиженияКонтрагентКонтрагент.Период                     КАК Период,
	|	ДвиженияКонтрагентКонтрагент.Организация                КАК Организация,
	|	ОбъектыКорРасчетов.Подразделение                        КАК Подразделение,
	|	ДвиженияКонтрагентКонтрагент.КорНаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.РасчетыСФилиалами) КАК Статья,
	|	ДвиженияКонтрагентКонтрагент.КорКонтрагент              КАК Аналитика,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПрочихАктивовПассивов.Дебет)    КАК ДебетКредит,
	|
	|	ДвиженияКонтрагентКонтрагент.СуммаРегл КАК СуммаРегл,
	|	ДвиженияКонтрагентКонтрагент.Сумма     КАК СуммаУпр,
	|	ДвиженияКонтрагентКонтрагент.Сумма     КАК СуммаСНДС,
	|	ДвиженияКонтрагентКонтрагент.Сумма     КАК СуммаБезНДС,
	|	&ПостояннаяРазница,
	|	&ВременнаяРазница,
	|
	|	&ОбъектРасчетов,
	|	ОбъектыКорРасчетов.УникальныйИдентификатор КАК ИдентификаторФинЗаписи,
	|	ВЫБОР
	|		КОГДА &ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеТаможне),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации))
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПереносПлатежаМеждуФилиалами)
	|		ИНАЧЕ НастройкиХозяйственныхОпераций.Ссылка
	|	КОНЕЦ КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	ВтДвиженияКонтрагентКонтрагент КАК ДвиженияКонтрагентКонтрагент
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыКорРасчетов
	|		ПО ДвиженияКонтрагентКонтрагент.КорОбъектРасчетов = ОбъектыКорРасчетов.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиХозяйственныхОпераций КАК НастройкиХозяйственныхОпераций
	|		ПО ДвиженияКонтрагентКонтрагент.ХозяйственнаяОперация = НастройкиХозяйственныхОпераций.ХозяйственнаяОперация
	|ГДЕ
	|	ДвиженияКонтрагентКонтрагент.Организация <> ДвиженияКонтрагентКонтрагент.КорКонтрагент
	|	И ДвиженияКонтрагентКонтрагент.Организация.ГоловнаяОрганизация = ДвиженияКонтрагентКонтрагент.КорКонтрагент.ГоловнаяОрганизация
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДвиженияКонтрагентКонтрагент.Период                  КАК Период,
	|	ДвиженияКонтрагентКонтрагент.Организация             КАК Организация,
	|	ОбъектыРасчетов.Подразделение                        КАК Подразделение,
	|	ДвиженияКонтрагентКонтрагент.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.РасчетыСФилиалами) КАК Статья,
	|	ДвиженияКонтрагентКонтрагент.Контрагент              КАК Аналитика,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПрочихАктивовПассивов.Кредит) КАК ДебетКредит,
	|
	|	ДвиженияКонтрагентКонтрагент.СуммаРегл КАК СуммаРегл,
	|	ДвиженияКонтрагентКонтрагент.Сумма     КАК СуммаУпр,
	|	ДвиженияКонтрагентКонтрагент.Сумма     КАК СуммаСНДС,
	|	ДвиженияКонтрагентКонтрагент.Сумма     КАК СуммаБезНДС,
	|	&ПостояннаяРазница,
	|	&ВременнаяРазница,
	|
	|	&ОбъектРасчетов,
	|	ОбъектыРасчетов.УникальныйИдентификатор КАК ИдентификаторФинЗаписи,
	|	ВЫБОР
	|		КОГДА &ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеТаможне),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации))
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПереносПлатежаМеждуФилиалами)
	|		ИНАЧЕ НастройкиХозяйственныхОпераций.Ссылка
	|	КОНЕЦ КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	ВтДвиженияКонтрагентКонтрагент КАК ДвиженияКонтрагентКонтрагент
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|		ПО ДвиженияКонтрагентКонтрагент.ОбъектРасчетов = ОбъектыРасчетов.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиХозяйственныхОпераций КАК НастройкиХозяйственныхОпераций
	|		ПО ДвиженияКонтрагентКонтрагент.ХозяйственнаяОперация = НастройкиХозяйственныхОпераций.ХозяйственнаяОперация
	|ГДЕ
	|	ДвиженияКонтрагентКонтрагент.Организация <> ДвиженияКонтрагентКонтрагент.Контрагент
	|	И ДвиженияКонтрагентКонтрагент.Организация.ГоловнаяОрганизация = ДвиженияКонтрагентКонтрагент.Контрагент.ГоловнаяОрганизация
	|";
	
	Если ЕстьПРиВР Тогда
		ПолеПостояннаяРазница = "0 КАК ПостояннаяРазница,";
		ПолеВременнаяРазница  = "0 КАК ВременнаяРазница,";
	Иначе
		ПолеПостояннаяРазница = "";
		ПолеВременнаяРазница  = "";
	КонецЕсли;
	
	Если ЕстьОбъектРасчетов Тогда
		ПолеОбъектРасчетов = "НЕОПРЕДЕЛЕНО КАК ОбъектРасчетов,";
	Иначе
		ПолеОбъектРасчетов = "";
	КонецЕсли;

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПостояннаяРазница,", ПолеПостояннаяРазница);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВременнаяРазница,",  ПолеВременнаяРазница);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОбъектРасчетов,",    ПолеОбъектРасчетов);

	Возврат ТекстЗапроса;
	
КонецФункции

// Отражает прочие активы и пассивы.
//
// Параметры:
//  Задания - ТаблицаЗначений - колонки соответствуют измерениям, ресурсам и реквизитам регистра сведений
//                              "ЗаданияКЗаписиВПрочиеАктивыПассивы", есть и служебные колонки:
//             * Документ               - ДокументСсылка          - ссылка на документ, который надо отразить
//             * ИдентификаторЗаписи    - УникальныйИдентификатор -
//             * ДатаЗаписи             - Дата                    -
//             * ИдентификаторЗадания   - УникальныйИдентификатор - служебная
//             * ДатаЗадания            - Дата                    - служебная
//  ИдентификаторыНеОбработанныхЗаписей - Соответствие из УникальныйИдентификатор - ключ, это идентификатор 
//                                                                                   не выполненных (выдающих ошибку при
//                                                                                   выполнении) записей регистра
//                                                                                   сведений очереди заданий
//                                                                                   (измерение ИдентификаторЗаписи
//                                                                                   регистра сведений очереди заданий),
//                                                                                  значение, это представление ошибки.
//  ДополнительныеСвойства - Неопределено, Структура - дополнительные свойства выполнения заданий.
//
Процедура ОтразитьПрочиеАктивыИПассивы(
			Задания,
			ИдентификаторыНеОбработанныхЗаписей,
			ДополнительныеСвойства = Неопределено) Экспорт	
	
	МассивДокументов = ОбщегоНазначения.ВыгрузитьКолонку(Задания, "Документ", Истина);
	
	МетаРегистра = Неопределено;
	
	Для каждого Документ Из МассивДокументов Цикл
		
		Попытка
			
			УправленческийУчетПроведениеСервер.ОбновитьДвиженияАктивовПассивов(
				Документ,
				Документ.ПолучитьОбъект().Движения);
			
		Исключение
			
			Если МетаРегистра = Неопределено Тогда
				
				МетаРегистра = Метаданные.РегистрыСведений.ЗаданияКЗаписиВПрочиеАктивыПассивы;
				
				ИмяСобытия   = ОтложенныеЗадания.ИмяСобытия();
				
				ПоляОшибки   = Новый Структура("Документ");
				ДанныеОшибки = Новый Структура("Документ");
				
				Задания.Индексы.Добавить("Документ");
				
			КонецЕсли;
			
			ТекстИсключения = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, МетаРегистра,, ТекстИсключения);
			
			ДанныеОшибки.Документ = Документ;
			
			ТекстОшибки = ОтложенныеЗадания.ТекстОшибкиВыполнения(ПоляОшибки, ДанныеОшибки, ТекстИсключения);
			
			НайденныеСтроки = Задания.НайтиСтроки(ДанныеОшибки);
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				ИдентификаторыНеОбработанныхЗаписей.Вставить(НайденнаяСтрока.ИдентификаторЗаписи, ТекстОшибки);
			КонецЦикла;
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
