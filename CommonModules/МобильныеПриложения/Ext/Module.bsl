#Область ПрограммныйИнтерфейс

#Область МетодыРаботыСМобильнымиПриложениямиИИхВерсиями

// Получает структуру, содержащую данные о версии мобильного приложения.
//
// Параметры:
//  ИмяПриложения - Строка - строка с именем мобильного приложения
//  НомерВерсии - Строка - строка, содержащая номер версии мобильного приложения.
//
// Возвращаемое значение:
//  Структура - структура, содержащая данные о версии мобильного приложения
//
Функция ОписаниеПриложения(ИмяПриложения, НомерВерсии) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ВерсииМобильныхПриложений.Ссылка КАК Ссылка,
	|	ВерсииМобильныхПриложений.ЭтоГруппа КАК ЭтоГруппа
	|ИЗ
	|	Справочник.ВерсииМобильныхПриложений КАК ВерсииМобильныхПриложений
	|ГДЕ
	|	(НЕ ВерсииМобильныхПриложений.ЭтоГруппа)
	|	И ВерсииМобильныхПриложений.Код = &НомерВерсии
	|	И ВерсииМобильныхПриложений.Родитель.Наименование = &ИмяПриложения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВерсииМобильныхПриложений.Ссылка,
	|	ВерсииМобильныхПриложений.ЭтоГруппа
	|ИЗ
	|	Справочник.ВерсииМобильныхПриложений КАК ВерсииМобильныхПриложений
	|ГДЕ
	|	ВерсииМобильныхПриложений.ЭтоГруппа
	|	И ВерсииМобильныхПриложений.Наименование = &ИмяПриложения"
	;
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НомерВерсии", НомерВерсии);
	Запрос.УстановитьПараметр("ИмяПриложения", ИмяПриложения);
	
	СтруктураПриложения = Новый Структура("Приложение,Версия",Неопределено,Неопределено);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.ЭтоГруппа Тогда
			СтруктураПриложения.Вставить("Приложение", Выборка.Ссылка);
		Иначе
			СтруктураПриложения.Вставить("Версия", Выборка.Ссылка);
		КонецЕсли;	
	КонецЦикла;
	
	Возврат СтруктураПриложения;
	
КонецФункции

// Записывает версию мобильного приложения в справочник на основании переданных данных.
//
// Параметры:
//  ИмяПриложения - Строка - строка с именем мобильного приложения.
//  НомерВерсии - Строка - строка, содержащая номер версии мобильного приложения.
//  Приложение - Строка - мобильное приложение в виде кодированной строки.
//  ИспользуемыеМетаданные - Строка - строка, содержащая информацию об используемых приложением метаданных в XML-виде.
//  СтруктураПриложения - Структура - структура, содержащая информацию о приложении.
//
Процедура ЗаписатьПриложение(ИмяПриложения, НомерВерсии, Приложение, ИспользуемыеМетаданные, СтруктураПриложения) Экспорт
	
	Если СтруктураПриложения.Приложение = Неопределено Тогда
		ПриложениеОбъект = Справочники.ВерсииМобильныхПриложений.СоздатьГруппу();
		ПриложениеОбъект.Наименование = ИмяПриложения;
		ПриложениеОбъект.Записать();
		ПриложениеСсылка = ПриложениеОбъект.Ссылка;
	Иначе
		ПриложениеСсылка = СтруктураПриложения.Приложение;

		Если ПриложениеСсылка.ПометкаУдаления Тогда
			ПриложениеОбъект = ПриложениеСсылка.ПолучитьОбъект();
			ПриложениеОбъект.ПометкаУдаления = Ложь;
			ПриложениеОбъект.Записать();
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураПриложения.Версия = Неопределено Тогда
		ВерсияОбъект = Справочники.ВерсииМобильныхПриложений.СоздатьЭлемент();
		ВерсияОбъект.Родитель = ПриложениеСсылка;
		ВерсияОбъект.Код = НомерВерсии;
		ВерсияОбъект.Наименование = ИмяПриложения + "," + НСтр("ru='версия'") + ": " + НомерВерсии;
	Иначе
		ВерсияОбъект = СтруктураПриложения.Версия.ПолучитьОбъект();
	КонецЕсли;
	
	ВерсияОбъект.МобильноеПриложение = Приложение;
	ВерсияОбъект.ИспользуемыеМетаданные = ИспользуемыеМетаданные;
	ВерсияОбъект.ПометкаУдаления = Ложь;
	
	ВерсияОбъект.Записать();
	
КонецПроцедуры

// Получает группу справочника "Версии мобильных приложений", соответствующую указанному приложению.
//
// Параметры:
//  ИмяМобильногоПриложения - Строка - имя мобильного приложения, для которого необходимо получить группу.
//
// Возвращаемое значение:
//  СправочникСсылка.ВерсииМобильныхПриложений - группа справочника, соответствующая мобильному приложения. Если не найдено -
//                                         возвращается пустая ссылка.
//
Функция ПолучитьГруппуПриложения(ИмяМобильногоПриложения) Экспорт

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВерсииМобильныхПриложений.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВерсииМобильныхПриложений КАК ВерсииМобильныхПриложений
	|ГДЕ
	|	ВерсииМобильныхПриложений.ЭтоГруппа
	|	И ВерсииМобильныхПриложений.Наименование = &ИмяМобильногоПриложения"
	;
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ИмяМобильногоПриложения", ИмяМобильногоПриложения);
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе	
		Возврат Справочники.ВерсииМобильныхПриложений.ПустаяСсылка();
	КонецЕсли;

КонецФункции

// Получает элемент справочника "Версии мобильных приложений", соответствующий указанной версии приложения.
//
// Параметры:
//  ИмяМобильногоПриложения - Строка - имя мобильного приложения, для которого необходимо получить элемент.
//  ВерсияМобильногоПриложения - СправочникСсылка.ВерсииМобильныхПриложений - версия мобильного приложения, для которого
//                                                                            необходимо получить элемент.
//
// Возвращаемое значение:
//  СправочникСсылка.ВерсииМобильныхПриложений - элемент справочника, соответствующий указанной версии мобильного
//                                               приложения.Если не найдено - возвращается пустая ссылка.
//
Функция ПолучитьЭлементПриложения(ИмяМобильногоПриложения, ВерсияМобильногоПриложения) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВерсииМобильныхПриложений.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВерсииМобильныхПриложений КАК ВерсииМобильныхПриложений
	|ГДЕ
	|	(НЕ ВерсииМобильныхПриложений.ЭтоГруппа)
	|	И ВерсииМобильныхПриложений.Родитель.Наименование = &ИмяМобильногоПриложения
	|	И ВерсииМобильныхПриложений.Код = &ВерсияМобильногоПриложения"
	;
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ИмяМобильногоПриложения", ИмяМобильногоПриложения);
	Запрос.УстановитьПараметр("ВерсияМобильногоПриложения", ВерсияМобильногоПриложения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе	
		Возврат Справочники.ВерсииМобильныхПриложений.ПустаяСсылка();
	КонецЕсли;

КонецФункции

// Загружает данные о версии мобильного приложения из макета конфигурации.
//
// Параметры:
//  ИмяМакета - Строка - имя макета, из которого производится загрузка.
//
Процедура ЗагрузитьВерсиюПриложенияИзМакета(ИмяМакета) Экспорт

	СтрокаДанныхЗагрузки = Справочники.ВерсииМобильныхПриложений.ПолучитьXMLДанныеВерсииПриложения(ИмяМакета);
	
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXML.УстановитьСтроку(СтрокаДанныхЗагрузки);
	
	Попытка
		
		Если ЧтениеXML.Прочитать() Тогда
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				Если ЧтениеXML.Имя <> "MobileApplicationVersionData" Тогда
					ТекстСообщения = НСтр("ru='Ошибка загрузки мобильного приложения из макета'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					Возврат;
				КонецЕсли;	
			КонецЕсли;
		Иначе
			ТекстСообщения = НСтр("ru='Ошибка загрузки мобильного приложения из макета'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;	
		
		ИмяТекущегоЭлемента = Неопределено;

		ИмяПриложения = Неопределено;
		НомерВерсии = Неопределено;
		Приложение = Неопределено;
		ИспользуемыеМетаданные = Неопределено;
		
		Пока ЧтениеXML.Прочитать() Цикл
			
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				ИмяТекущегоЭлемента = ЧтениеXML.Имя;
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
				
				Если ИмяТекущегоЭлемента = "ApplicationName" Тогда
					ИмяПриложения = ЧтениеXML.Значение;
				ИначеЕсли ИмяТекущегоЭлемента = "Version" Тогда
					НомерВерсии = ЧтениеXML.Значение;
				ИначеЕсли ИмяТекущегоЭлемента = "Application" Тогда
					Приложение = ЧтениеXML.Значение;
				ИначеЕсли ИмяТекущегоЭлемента = "Metadata" Тогда
					ИспользуемыеМетаданные = ЧтениеXML.Значение;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		СтруктураПриложения = ОписаниеПриложения(ИмяПриложения, НомерВерсии);
		ЗаписатьПриложение(ИмяПриложения, НомерВерсии, Приложение, ИспользуемыеМетаданные, СтруктураПриложения);
		
	Исключение
		
		ТекстСообщения = НСтр("ru='Ошибка загрузки мобильного приложения из макета'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецПопытки;
	
	ЧтениеXML.Закрыть();

КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииДляРаботыСУзламиОбмена

// Получает узел обмена, соответствующий мобильному подключению (т.е. паре пользователь + компьютер).
//
// Параметры:
//  ИмяПользователя - Строка - имя мобильного пользователя
//  КодМобильногоКомпьютера - Строка - код (серийный номер или сетевое имя) мобильного компьютера).
//
// Возвращаемое значение:
//  ПланОбменаСсылка - узелОбмена - ссылка на соответствующий узел обмена.
//
Функция ПолучитьУзелОбменаДляМобильногоПодключения(ИмяПользователя, КодМобильногоКомпьютера) Экспорт

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МобильноеПриложениеТорговыйПредставитель.Ссылка КАК Ссылка
	|ИЗ
	|	ПланОбмена.МобильноеПриложениеТорговыйПредставитель КАК МобильноеПриложениеТорговыйПредставитель
	|ГДЕ
	|	МобильноеПриложениеТорговыйПредставитель.ИмяПользователя = &ИмяПользователя
	|	И МобильноеПриложениеТорговыйПредставитель.МобильныйКомпьютер.СерийныйНомер = &КодМобильногоКомпьютера
	|	И МобильноеПриложениеТорговыйПредставитель.Ссылка <> &ЭтотУзел"
	;
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ИмяПользователя", ИмяПользователя);
	Запрос.УстановитьПараметр("КодМобильногоКомпьютера", КодМобильногоКомпьютера);
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.МобильноеПриложениеТорговыйПредставитель.ЭтотУзел());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе	
		Возврат ПланыОбмена.МобильноеПриложениеТорговыйПредставитель.ПустаяСсылка();
	КонецЕсли;

КонецФункции

// Проверяет, существует ли узел, соответствующий указанному подключению.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - пользователь, для которого определяется наличие узла.
//  МобильныйКомпьютер - СправочникСсылка.МобильныеКомпьютеры - мобильный компьютер, для которого определяется наличие узла.
//  ПроверяемыйУзел - ПланОбменаСсылка - ссылка на узел плана обмена, для которого проверяется существование.
//
// Возвращаемое значение:
//  Булево - существование узла. Истина - узел существует, Ложь - не существует.
//
Функция УзелДляПодключенияСуществует(Пользователь, МобильныйКомпьютер, ПроверяемыйУзел) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МобильноеПриложениеТорговыйПредставитель.Ссылка КАК Ссылка
	|ИЗ
	|	ПланОбмена.МобильноеПриложениеТорговыйПредставитель КАК МобильноеПриложениеТорговыйПредставитель
	|ГДЕ
	|	МобильноеПриложениеТорговыйПредставитель.Пользователь = &Пользователь
	|	И МобильноеПриложениеТорговыйПредставитель.МобильныйКомпьютер = &МобильныйКомпьютер
	|	И МобильноеПриложениеТорговыйПредставитель.Ссылка <> &ЭтотУзел
	|	И МобильноеПриложениеТорговыйПредставитель.Ссылка <> &ПроверяемыйУзел"
	;
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("МобильныйКомпьютер", МобильныйКомпьютер);
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.МобильноеПриложениеТорговыйПредставитель.ЭтотУзел());
	Запрос.УстановитьПараметр("ПроверяемыйУзел", ПроверяемыйУзел);
	
	Возврат НЕ Запрос.Выполнить().Пустой();

КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииФормированияПакетаОбмена

// Выполняет подготовку необходимых данных для обмена.
//
// Параметры:
//  УзелОбмена - ПланОбменаСсылка - узел плана обмена, для которого требуется подготовка данных.
//  СтруктураПараметровОбменаДанными - Структура - структура, содержащая параметры обмена данными.
//
Процедура ПодготовитьДанные(УзелОбмена, СтруктураПараметровОбменаДанными) Экспорт
	
	ИспользованиеЗаданий = Константы.ИспользованиеЗаданийТорговымПредставителям.Получить();
	Если ИспользованиеЗаданий = Перечисления.ИспользованиеЗаданийТорговымПредставителям.ИспользуютсяТорговымиПредставителямиДляПланирования Тогда
		
		Если СтруктураПараметровОбменаДанными.Свойство("ФормироватьЗаданияАвтоматическиПоУсловиямОбслуживания") Тогда
			
			ФормироватьЗадания = СтруктураПараметровОбменаДанными.ФормироватьЗаданияАвтоматическиПоУсловиямОбслуживания;
			Если ФормироватьЗадания Тогда
				
				НачалоПериодаПланирования = '00010101000000';
				КонецПериодаПланирования = '00010101000000';
				
				Если СтруктураПараметровОбменаДанными.Свойство("НачалоПериодаПланирования") Тогда
					НачалоПериодаПланирования = СтруктураПараметровОбменаДанными.НачалоПериодаПланирования;
				КонецЕсли;
				
				Если СтруктураПараметровОбменаДанными.Свойство("КонецПериодаПланирования") Тогда
					КонецПериодаПланирования = СтруктураПараметровОбменаДанными.КонецПериодаПланирования;
				КонецЕсли;
				
				Пользователь = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УзелОбмена, "Пользователь");
				ТорговыеПредставителиСервер.СформироватьЗадания(Пользователь, НачалоПериодаПланирования, КонецПериодаПланирования);

			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет запись данных в пакет обмена
//
// Параметры:
//  УзелОбмена - ПланОбменаСсылка.МобильноеПриложениеТорговыйПредставитель - узел плана обмена, для которого необходимо зарегистрировать изменение данных.
//  СтруктураПараметровОбменаДанными - Структура - структура, содержащая параметры обмена данными.
//  НачальнаяИнициализацияИБ - Булево - признак выполнения начальной инициализации ИБ.
//
// Возвращаемое значение:
//  Строка - строка, содержащая данные пакета обмена.
//
Функция СформироватьПакетОбмена(УзелОбмена, СтруктураПараметровОбменаДанными, НачальнаяИнициализацияИБ) Экспорт

	ЗаписьXML = Новый ЗаписьXML();
	
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("_1CV8MobileAppData", "http://www.1c.ru/V8/1CV8MobileAppData/");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("V8MobileAppExch", "http://www.1c.ru/V8/1CV8MobileAppData/");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("v8",  "http://v8.1c.ru/data");
	
	ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
	
	ВременнаяЗаписьXML = Новый ЗаписьXML();
	ВременнаяЗаписьXML.УстановитьСтроку();
	ЗаписьСообщения.НачатьЗапись(ВременнаяЗаписьXML, УзелОбмена);
	
	// В начало пакета обмена помещается секция очистки данных
	Если НЕ НачальнаяИнициализацияИБ Тогда
		ЗаписатьСекциюОчисткиДанных(УзелОбмена, ЗаписьXML, СтруктураПараметровОбменаДанными);
	КонецЕсли;
	
	// Далее помещаем секцию хранимых данных
	ЗаписатьСекциюХранимыхДанных(УзелОбмена, ЗаписьXML, СтруктураПараметровОбменаДанными);
	
	ДеревоИспользуемыхМетаданных = ИспользуемыеМетаданные(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УзелОбмена, "ВерсияМобильногоПриложения.ИспользуемыеМетаданные"));
	
	// Выбираются все данные, удовлетворяющие схеме обмена
	МетаданныеПланаОбмена = УзелОбмена.Метаданные();
	
	СтруктураНастроекОтбора = НастройкиОтбора(УзелОбмена);
	СтруктураПараметровНастройкиОбмена = ОписаниеПараметровНастройкиОбмена(УзелОбмена);
	
	Для Каждого ЭлементСоставаПланаОбмена Из МетаданныеПланаОбмена.Состав Цикл

		ОбъектМетаданных = ЭлементСоставаПланаОбмена.Метаданные;
		
		СтруктураОписанияОбъекта = ОбменДаннымиСМобильнымиПриложениямиСобытия.ОписаниеОбъекта(ОбъектМетаданных, Истина);

		Если СтруктураОписанияОбъекта.ИмяКласса = "Справочники" ИЛИ СтруктураОписанияОбъекта.ИмяКласса = "Документы" Тогда
			СтруктураСостава = ОписаниеСоставаОбъекта(ОбъектМетаданных, СтруктураОписанияОбъекта.ИмяКласса, СтруктураОписанияОбъекта.ИмяОбъекта, ДеревоИспользуемыхМетаданных);
		Иначе
			СтруктураСостава = Неопределено;
		КонецЕсли;
				
		Если НЕ ВключатьДанныеВПакетОбмена(СтруктураОписанияОбъекта, СтруктураПараметровОбменаДанными) Тогда
			Продолжить;
		КонецЕсли;
			
		Если СтруктураОписанияОбъекта.ИмяКласса = "РегистрыСведений" Тогда

			МассивКлючевыхПолей = КлючевыеПоляРегистраСведений(ОбъектМетаданных);
			МассивПолей = ПоляРегистраСведенийДляВыборки(ОбъектМетаданных);
			
			// Необходимо проставить в таблицах изменений номер сообщения для последующего удаления регистрации изменений.
			ПланыОбмена.ВыбратьИзменения(УзелОбмена, ЗаписьСообщения.НомерСообщения, ОбъектМетаданных);

			// Формируем таблицу значений, содержащую все комбинации ключевых полей регистра, по которым есть изменения.
			ТаблицаКлючей = КлючиНабораЗаписей(СтруктураОписанияОбъекта, СтруктураНастроекОтбора, МассивКлючевыхПолей, СтруктураПараметровНастройкиОбмена, Истина, УзелОбмена, ЗаписьСообщения.НомерСообщения);

			МассивВыбранныхПолей = Новый Массив();
			Для Каждого Колонка Из ТаблицаКлючей.Колонки Цикл
				МассивВыбранныхПолей.Добавить(Колонка.Имя);
			КонецЦикла;
			
			СтруктураОписанияОбъекта = ОбменДаннымиСМобильнымиПриложениямиСобытия.ОписаниеОбъекта(ОбъектМетаданных, Ложь);
			ТаблицаЗаписей = ЗаписиРегистраСведений(СтруктураОписанияОбъекта, СтруктураНастроекОтбора, МассивПолей, СтруктураПараметровНастройкиОбмена, УзелОбмена);

			СтруктураОтбора = Новый Структура();

			Для Каждого КомбинацияКлючей Из ТаблицаКлючей Цикл

				Для Каждого КлючевоеПоле Из МассивКлючевыхПолей Цикл
					Если МассивВыбранныхПолей.Найти(КлючевоеПоле) <> Неопределено Тогда
						СтруктураОтбора.Вставить(КлючевоеПоле, КомбинацияКлючей[КлючевоеПоле]);
					КонецЕсли;
				КонецЦикла;

				МассивСтрокТаблицыЗаписей = ТаблицаЗаписей.НайтиСтроки(СтруктураОтбора);
				НаборЗаписей = СформироватьНаборЗаписейДляВыгрузки(СтруктураОписанияОбъекта.ИмяОбъекта, КомбинацияКлючей, МассивСтрокТаблицыЗаписей, МассивКлючевыхПолей, МассивПолей, МассивВыбранныхПолей);
				ЗаписатьДанныеВПакетОбмена(НаборЗаписей, СтруктураОписанияОбъекта.ИмяКласса, СтруктураОписанияОбъекта.ИмяОбъекта, СтруктураСостава, ЗаписьXML, УзелОбмена);

			КонецЦикла;

		Иначе
			
			// Данные констант, справочников и документов прямо из выборки пишем в XML
			ВыборкаДанных = ПланыОбмена.ВыбратьИзменения(УзелОбмена, ЗаписьСообщения.НомерСообщения, ОбъектМетаданных);
			
			Пока ВыборкаДанных.Следующий() Цикл
				Объект = ВыборкаДанных.Получить();
				ОбработатьОбъектПередЗаписьюВПакетОбмена(Объект, СтруктураОписанияОбъекта.ИмяКласса, СтруктураОписанияОбъекта.ИмяОбъекта, 
					СтруктураПараметровОбменаДанными, УзелОбмена);
				ЗаписатьДанныеВПакетОбмена(Объект, СтруктураОписанияОбъекта.ИмяКласса, СтруктураОписанияОбъекта.ИмяОбъекта, СтруктураСостава, ЗаписьXML, УзелОбмена);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;

	ЗаписьСообщения.ЗакончитьЗапись();
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); //_1CV8MobileAppData
	
	Возврат ЗаписьXML.Закрыть();

КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСПолученнымиПакетамиОбмена

// Выполняет запись данных, содержащихся в полученном пакете обмена, в ИБ.
//
// Параметры:
//  УзелОбмена - ПланОбменаСсылка - узел плана обмена, для которого предназначен полученный пакет обмена.
//  ДанныеМобильногоПриложения - Строка - пакет обмена в виде xml-строки.
//  ПараметрыОбменаДанными - Строка - Строка с параметрами обмена данными.
//
Процедура ЗаписатьДанныеПолученногоПакетаОбмена(УзелОбмена, ДанныеМобильногоПриложения, ПараметрыОбменаДанными) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ДанныеМобильногоПриложения);
	
	// проверка формата файла обмена
	Если Не ЧтениеXML.Прочитать() Или
		ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Или 
		ЧтениеXML.ЛокальноеИмя <> "_1CV8MobileAppData" Или 
		ЧтениеXML.URIПространстваИмен <> "http://www.1c.ru/V8/1CV8MobileAppData/" Тогда
		
		#Если ВнешнееСоединение Тогда
		ТекстСообщения = НСтр("ru = 'Неверный формат данных: некорректное начало файла'");
		ВызватьИсключение(ТекстСообщения);
		#КонецЕсли
	
		Возврат;
		
	КонецЕсли;

	СтруктураОписанияИспользуемыхОбъектов = ОписаниеИспользуемыхОбъектов(УзелОбмена);

	// чтение и запись в ИБ данных пакета обмена
	Если Не ЧтениеXML.Прочитать() Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеПланаОбмена = УзелОбмена.Метаданные();
	
	СтруктураПараметровНастройкиОбмена = ОписаниеПараметровНастройкиОбмена(УзелОбмена);
	СтруктураПараметровОбменаДанными = ОписаниеПараметровОбменаДанными(ПараметрыОбменаДанными);

	Пока ВозможностьЧтенияXML(ЧтениеXML) Цикл
		
		ТипXML = ПолучитьXMLТип(ЧтениеXML);

		Если ТипXML = Неопределено Тогда
			ЧтениеXML.Пропустить();
			Продолжить;
		КонецЕсли; 
		
		ИмяКласса = "";
		ИмяОбъекта = "";
		ОпределитьПоТипуДанныхКлассИИмяТипа(ТипXML.ИмяТипа, ИмяКласса, ИмяОбъекта);
		
		// непосредственно само чтение данных
		ОбъектЧтения = Неопределено;
		
		Если ИмяКласса = "CATALOGOBJECT" Тогда

			// читаем элемент справочника
			СоставОбъекта = СтруктураОписанияИспользуемыхОбъектов["Справочники" + ИмяОбъекта];
			ОбъектЧтения = ПрочитатьИИзменитьЭлементСправочника(ЧтениеXML, ИмяОбъекта, СоставОбъекта, УзелОбмена);

			ОбработатьЗаполнениеНовогоОбъекта(ОбъектЧтения, "Справочники", ИмяОбъекта, УзелОбмена);

		ИначеЕсли ИмяКласса = "DOCUMENTOBJECT" Тогда

			// читаем документ
			СоставОбъекта = СтруктураОписанияИспользуемыхОбъектов["Документы" + ИмяОбъекта];
			ОбъектЧтения = ПрочитатьИИзменитьДокумент(ЧтениеXML, ИмяОбъекта, СоставОбъекта, УзелОбмена);

			ОбработатьЗаполнениеНовогоОбъекта(ОбъектЧтения, "Документы", ИмяОбъекта, УзелОбмена);

		Иначе
			// Константы и наборы записей регистров сведений читаем без дополнительного анализа,
			// поскольку эти значения в пакете обмена представлены целостно.
			ОбъектЧтения = ПрочитатьXML(ЧтениеXML);

		КонецЕсли;
		
		// нечего записывать, когда ничего не прочитали
		Если ОбъектЧтения = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПланыОбмена.ИзменениеЗарегистрировано(УзелОбмена, ОбъектЧтения) Тогда
			// Изменения, выполненные в центральной ИБ, не должны быть затерты изменениями в мобильной ИБ.
			Продолжить;
		КонецЕсли;
		
		ОбъектЧтения.ОбменДанными.Загрузка = Истина;
		
		Если МетаданныеПланаОбмена.Состав.Содержит(ОбъектЧтения.Метаданные()) Тогда
			Если НЕ ТребуетсяЗарегистрироватьИзмененияДляУзлаОтправителя(ИмяКласса, ИмяОбъекта, ОбъектЧтения) Тогда
				ОбъектЧтения.ОбменДанными.Отправитель = УзелОбмена;
			КонецЕсли;
		КонецЕсли;
		
		ОбъектЧтения.Записать();
		
		ОбработатьЗаписанныйОбъект(ОбъектЧтения, СтруктураПараметровНастройкиОбмена, УзелОбмена);

	КонецЦикла;

	ЧтениеXML.Закрыть();

КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииДляУправленияРегистрациейИзмененийИВыборкиДанных

// Определяет необходимость регистрации изменений в указанном узле плана обмена, исходя из
// схемы обмена, определенной для данного узла обмена.
//
// Параметры:
//  СтруктураРеквизитовОбъекта - Структура - структура, содержащая реквизиты проверяемого объекта.
//  СтруктураОписанияОбъекта - Структура - структура, содержащая описание объекта метаданных.
//  МассивПолей - Массив - массив, содержащий имена полей объекта.
//  ТаблицаДанныхОбъекта - ТаблицаЗначений - таблица значений, содержащая данные полей объекта.
//  УзелОбмена - ПланОбменаСсылка.МобильноеПриложениеТорговыйПредставитель - узел плана обмена, в котором регистрируются изменения.
//
// Возвращаемое значение:
//  Булево - Признак необходимости регистрации изменений по объекту. Истина - регистрация требуется. Ложь - регистрация
//                                                                            не требуется.
//
Функция ТребуетсяРегистрацияИзмененийОбъекта(СтруктураРеквизитовОбъекта, СтруктураОписанияОбъекта, МассивПолей, ТаблицаДанныхОбъекта, УзелОбмена) Экспорт

	ИмяКласса = СтруктураОписанияОбъекта.ИмяКласса;
	ИмяОбъекта = СтруктураОписанияОбъекта.ИмяОбъекта;
	
	СтруктураПараметровНастройкиОбмена = ОписаниеПараметровНастройкиОбмена(УзелОбмена);
	
	СтруктураНастроекОтбора = НастройкиОтбора(УзелОбмена);
	
	Если ИспользованиеОбъектаОтключено(ИмяКласса, ИмяОбъекта, УзелОбмена) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СхемаКомпоновки = ПолучитьСхемуКомпоновкиДанныхДляОбъекта(МассивПолей);
	НастройкиКомпоновки = СкомпоноватьНастройки(СхемаКомпоновки);
	
	ДобавитьОтборыИзСхемыОбмена(НастройкиКомпоновки, СтруктураНастроекОтбора, ИмяКласса, ИмяОбъекта, Ложь, СтруктураПараметровНастройкиОбмена, Ложь);
	ДобавитьОтборыДляОтдельныхОбъектов(СтруктураРеквизитовОбъекта, НастройкиКомпоновки.Отбор, СтруктураНастроекОтбора, ИмяКласса, ИмяОбъекта);
	ДобавитьОбязательныеОтборы(НастройкиКомпоновки, ИмяКласса, ИмяОбъекта, СтруктураПараметровНастройкиОбмена);
	
	МакетКомпоновки = КомпоновкаДанныхСервер.ПолучитьМакетКомпоновки(СхемаКомпоновки, НастройкиКомпоновки);
	
	ВнешниеНаборыДанных = Новый Структура("ОбъектДанных", ТаблицаДанныхОбъекта);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений();
	ТаблицаРезультата = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Возврат ТаблицаРезультата.Количество()>0;

КонецФункции

// Регистрирует изменения для указанного узла обмена в соответствии
// со схемой обмена, определенной для этого узла.
//
// Параметры:
// УзелОбмена - ПланОбменаСсылка.МобильноеПриложениеТорговыйПредставитель - узел плана обмена, для которого нужно зарегистрировать изменения.
//
Процедура ЗарегистрироватьИзмененияДанных(УзелОбмена) Экспорт

	СоставПланаОбмена = УзелОбмена.Метаданные().Состав;
	
	СтруктураПараметровНастройкиОбмена = ОписаниеПараметровНастройкиОбмена(УзелОбмена);
	
	СтруктураНастроекОтбора = НастройкиОтбора(УзелОбмена);
	
	// В цикле обходятся все объекты метаданных, входящие в состав плана обмена и по каждому из них
	// регистрируются изменения с учетом настроек схемы обмена.

	Для Каждого ЭлементСоставаПланаОбмена Из СоставПланаОбмена Цикл
		
		СтруктураОписанияОбъекта = ОбменДаннымиСМобильнымиПриложениямиСобытия.ОписаниеОбъекта(ЭлементСоставаПланаОбмена.Метаданные, Ложь);

		ИмяКласса = СтруктураОписанияОбъекта.ИмяКласса;
		ИмяОбъекта = СтруктураОписанияОбъекта.ИмяОбъекта;
	
		Если ИмяКласса = "Константы" Тогда
			
			// Для констант никаких условий отбора не задается, поэтому сразу зарегистрируем изменения.
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена,ЭлементСоставаПланаОбмена.Метаданные);

		ИначеЕсли ИмяКласса = "Справочники" ИЛИ ИмяКласса = "Документы" Тогда
			
			Если ИспользованиеОбъектаОтключено(ИмяКласса, ИмяОбъекта, УзелОбмена) Тогда
				Продолжить;
			КонецЕсли;	
			
			// Для справочников и документов выберем ссылки, по которым зарегистрируем изменения.
			ВыборкаДанных = ВыбратьСсылкиДляРегистрацииИзменений(УзелОбмена, СтруктураОписанияОбъекта, СтруктураНастроекОтбора, СтруктураПараметровНастройкиОбмена);
			
			Пока ВыборкаДанных.Следующий() Цикл
				
				ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена,ВыборкаДанных.Ссылка);
				
			КонецЦикла;
			
		ИначеЕсли ИмяКласса = "РегистрыСведений" Тогда
			
			МассивПолей = КлючевыеПоляРегистраСведений(ЭлементСоставаПланаОбмена.Метаданные);
			ТаблицаКлючей = КлючиНабораЗаписей(СтруктураОписанияОбъекта, СтруктураНастроекОтбора, МассивПолей, СтруктураПараметровНастройкиОбмена);
			
			МассивВыбранныхПолей = Новый Массив();
			Для Каждого Колонка Из ТаблицаКлючей.Колонки Цикл
				МассивВыбранныхПолей.Добавить(Колонка.Имя);
			КонецЦикла;

			// Для каждой уникальной комбинации полей сформируем наборы записей с такими отборами и зарегистрируем по ним изменения.
			Для Каждого КомбинацияКлючей Из ТаблицаКлючей Цикл

				НаборЗаписей = ПолучитьНаборЗаписейРегистраСведенийПоКомбинацииКлючей(СтруктураОписанияОбъекта, КомбинацияКлючей, МассивПолей, МассивВыбранныхПолей);
				ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена,НаборЗаписей);

			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Формирует и возвращает текст запроса для выборки данных конкретного регистра сведений.
//
// Параметры:
//  ИмяОбъекта - Строка - имя регистра, по которому необходимо сформировать текст запроса.
//  ИмяТаблицы - Строка - имя таблицы данных, по которой необходимо сформировать текст запроса.
//  МассивПолей - Массив - массив, содержащий имена полей для выборки.
//  Изменения - Булево - признак выборки только изменений.
//  НомерСообщения - Число - номер сообщения обмена.
//
// Возвращаемое значение:
//  Строка - Текст запроса, если он определен для регистра. В противном случае возвращается пустая строка - при этом будет
//  использован "стандартный" текст запроса по таблице, без дополнительных условий.
//
Функция ПолучитьТекстЗапросаДляРегистра(ИмяОбъекта, ИмяТаблицы, МассивПолей, Изменения, НомерСообщения) Экспорт
	
	ТекстЗапроса = "";
	
	Если ИмяТаблицы = "РегистрСведений.ОтносительныеКурсыВалют" Тогда
				
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КурсыВалютСрезПоследних.Период,
		|	КурсыВалютСрезПоследних.Валюта,
		|	КурсыВалютСрезПоследних.БазоваяВалюта,
		|	КурсыВалютСрезПоследних.КурсЧислитель,
		|	КурсыВалютСрезПоследних.КурсЗнаменатель
		|ИЗ
		|	РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&ТекущаяДата, ) КАК КурсыВалютСрезПоследних"
		;
	КонецЕсли;
	
	Если Изменения Тогда
		МассивПолейОтбора = Новый Массив();
		МассивПолейОтбора.Добавить("Узел");
		
		Если НомерСообщения <> Неопределено Тогда
			МассивПолейОтбора.Добавить("НомерСообщения");
		КонецЕсли;	
	Иначе
		МассивПолейОтбора = ОбменДаннымиСМобильнымиПриложениямиСобытия.ПоляОтбораДляОбъекта("РегистрыСведений", ИмяОбъекта);
	КонецЕсли;
	
	ДобавитьПоляОтбораВТекстЗапроса(ТекстЗапроса, МассивПолейОтбора);
	
	Возврат ТекстЗапроса;

КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииДляРаботыСКомпоновкойДанных

// Формирует и возвращает настройки компоновщика для переданной схемы компоновки.
//
// Параметры:
//  СхемаКомпоновки - СхемаКомпоновкиДанных - схема компоновки данных, для которой компонуются настройки.
//
// Возвращаемое значение:
//  НастройкиКомпоновкиДанных - настройки компоновщика.
//
Функция СкомпоноватьНастройки(СхемаКомпоновки) Экспорт

	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки);
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
	КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	
	// Добавим выбранные поля
	Для Каждого Элемент Из КомпоновщикНастроек.Настройки.Выбор.ДоступныеПоляВыбора.Элементы Цикл
		
		Если НЕ Элемент.Папка Тогда
			ВыбранноеПоле = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПоле.Использование = Истина;
			ВыбранноеПоле.Поле = Элемент.Поле;
		КонецЕсли;
		
	КонецЦикла;
	
	// Добавим группировку
	ГруппировкаНастроек = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	Поле = ГруппировкаНастроек.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	
	Возврат КомпоновщикНастроек.Настройки;

КонецФункции

// Добавляет элемент отбора в настройки компоновки
//
// Параметры:
//  Настройки - НастройкиКомпоновкиДанных - настройки компоновки
//  ИмяПоля - Строка - имя поля, по которому задается отбор
//  ВидСравнения - ВидСравненияКомпоновкиДанных - вид сравнения компоновки данных
//  Использование - Булево - использование элемента отбора
//  ПравоеЗначение - Произвольный - правое значение сравнения.
//
Процедура ДобавитьЭлементОтбораВНастройкиСхемы(Настройки, ИмяПоля, ВидСравнения = Неопределено, Использование = Истина, ПравоеЗначение = Неопределено) Экспорт

	Если ВидСравнения = Неопределено Тогда
		ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;

	Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Элемент = Настройки.ДоступныеПоляОтбора.НайтиПоле(Поле);

	Если Элемент = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ЭлементОтбора = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ЭлементОтбора.ЛевоеЗначение = Элемент.Поле;
	ЭлементОтбора.ВидСравнения = ВидСравнения;
	ЭлементОтбора.Использование = Использование;
	ЭлементОтбора.ПравоеЗначение = ПравоеЗначение;

КонецПроцедуры

// Выполняет установку значения элемента отбора в настройках компоновки
//
// Параметры:
//  Отбор - ОтборКомпоновкиДанных - отбор компоновки.
//  ИмяПоля - Строка - имя поля.
//  ВидСравнения - ВидСравненияКомпоновкиДанных - вид сравнения.
//  Использование - Булево - Признак использования.
//  ПравоеЗначение - Произвольный - правое значение в отборе.
//
Процедура УстановитьЗначениеЭлементаОтбора(Отбор, ИмяПоля, ВидСравнения = Неопределено, Использование = Истина, ПравоеЗначение = Неопределено) Экспорт

	Если ВидСравнения = Неопределено Тогда
		ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;
	
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных(ИмяПоля);
	
	Для Каждого ЭлементОтбора Из Отбор.Элементы Цикл
		
		Если ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновки Тогда
			ЭлементОтбора.ПравоеЗначение = ПравоеЗначение;
			ЭлементОтбора.Использование = Использование;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Устанавливает признак включения в настройки компоновки поля.
//
// Параметры:
//  НастройкиКомпоновки - НастройкиКомпоновкиДанных - настройки компоновки, для которых требуется установить использование.
//  ИмяПоля - Строка - имя поля компоновки, использование которого требуется установить.
//  Использование - Булево - признак использования поля.
//
Процедура УстановитьИспользованиеПоляКомпоновки(НастройкиКомпоновки, ИмяПоля, Использование) Экспорт

	ПолеКомпоновки = Новый ПолеКомпоновкиДанных(ИмяПоля);

	Для Каждого Элемент Из НастройкиКомпоновки.Выбор.Элементы Цикл
		Если ТипЗнч(Элемент) = Тип("ВыбранноеПолеКомпоновкиДанных") Тогда
			Если Элемент.Поле = ПолеКомпоновки Тогда
				Элемент.Использование = Использование;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Устанавливает указанное значение параметра настроек компоновки данных.
//
// Параметры:
//  Настройки - НастройкиКомпоновкиДанных - настройки компоновки данных.
//  ИмяПараметра - Строка - имя параметра, значение которого нужно установить.
//  Значение - Произвольный - устанавливаемое значение параметра.
//
Процедура УстановитьЗначениеПараметраНастроек(Настройки, ИмяПараметра, Значение) Экспорт

	Параметр = Настройки.ПараметрыДанных.Элементы.Найти(ИмяПараметра);
	
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = Значение;
		Параметр.Использование = Истина;
	КонецЕсли;

КонецПроцедуры

// Формирует и возвращает структуру на основе переданного отбора компоновки данных.
//
// Параметры:
//  Отбор - ОтборКомпоновкиДанных - отбор компоновки данных.
//
// Возвращаемое значение:
//  Структура - структура, содержащая данные отбора.
// 
Функция ОписаниеОтбораКомпоновкиДанных(Отбор) Экспорт

	СтруктураОтбора = Новый Структура();
	
	Для Каждого ЭлементОтбора Из Отбор.Элементы Цикл
		
		// Заполним структуру элемента отбора
		СтруктураЭлементаОтбора = Новый Структура();
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			
			СтруктураЭлементаОтбора.Вставить("ВидСравнения",ЭлементОтбора.ВидСравнения);
			СтруктураЭлементаОтбора.Вставить("ИдентификаторПользовательскойНастройки",ЭлементОтбора.ИдентификаторПользовательскойНастройки);
			СтруктураЭлементаОтбора.Вставить("Использование",ЭлементОтбора.Использование);
			СтруктураЭлементаОтбора.Вставить("ЛевоеЗначение",ЭлементОтбора.ЛевоеЗначение);
			СтруктураЭлементаОтбора.Вставить("ПравоеЗначение",ЭлементОтбора.ПравоеЗначение);
			СтруктураЭлементаОтбора.Вставить("Представление",ЭлементОтбора.Представление);
			СтруктураЭлементаОтбора.Вставить("ПредставлениеПользовательскойНастройки",ЭлементОтбора.ПредставлениеПользовательскойНастройки);
			СтруктураЭлементаОтбора.Вставить("Применение",ЭлементОтбора.Применение);
			СтруктураЭлементаОтбора.Вставить("РежимОтображения",ЭлементОтбора.РежимОтображения);
			
			// Структуру элемента отбора поместим в структуру отбора
			СтруктураОтбора.Вставить(ЭлементОтбора.ЛевоеЗначение, СтруктураЭлементаОтбора);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураОтбора;

КонецФункции

// Заполняет указанный отбор на основании структуры, содержащей данные отбора.
//
// Параметры:
//  Отбор - ОтборКомпоновкиДанных - отбор компоновки данных, который надо заполнить.
//  СтруктураОтбора - Структура - структура, содержащая данные для заполнения отбора.
//
Процедура ЗаполнитьОтборКомпоновкиИзСтруктуры(Отбор, СтруктураОтбора) Экспорт

	Отбор.Элементы.Очистить();
	
	Для Каждого ЭлементСтруктурыОтбора Из СтруктураОтбора Цикл
		
		ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		
		СтруктураЭлементаОтбора = ЭлементСтруктурыОтбора.Значение;
		
		Для Каждого Элемент Из СтруктураЭлементаОтбора Цикл
			Если Элемент.Ключ = "ЛевоеЗначение" Тогда
				ЭлементОтбора[Элемент.Ключ] =  Новый ПолеКомпоновкиДанных(Элемент.Значение);
			Иначе
				ЭлементОтбора[Элемент.Ключ] = Элемент.Значение;
			КонецЕсли;
		КонецЦикла;	
		
	КонецЦикла;

КонецПроцедуры

// Задает отборы для выборки объектов с использованием компоновки.
//
// Параметры:
//  НастройкиКомпоновки - НастройкиКомпоновкиДанных - настройки компоновки данных, для которых задаются отборы.
//  СтруктураНастроекОтбора - Структура - структура, содержащая описание устанавливаемого отбора.
//  ИмяКласса - Строка - имя класса, к которому принадлежит объект (Справочники, Документы и т.д).
//  ИмяОбъекта - Строка - имя объекта метаданных, для которого добавляются отборы.
//  ИспользоватьДополнительныеОтборы - Булево - признак необходимости установки доп. отборов для регистров (помимо
//                                              ключевых полей).
//  СтруктураПараметровНастройкиОбмена - Структура - структура, содержащая параметры настройки обмена.
//  ИспользуетсяВыборка - Булево - признак того, что используется выборка данных и отборы указываются для выборки.
//
Процедура ДобавитьОтборыИзСхемыОбмена(НастройкиКомпоновки, СтруктураНастроекОтбора, ИмяКласса, ИмяОбъекта, 
									  ИспользоватьДополнительныеОтборы, СтруктураПараметровНастройкиОбмена, ИспользуетсяВыборка) Экспорт

	Если ИмяКласса = "Справочники" Тогда

		Если ИмяОбъекта = "Партнеры" Тогда
			ЗаполнитьЭлементОтбораКомпоновкиИзСтруктуры(НастройкиКомпоновки.Отбор, СтруктураНастроекОтбора, "Партнеры","Ссылка");
		ИначеЕсли ИмяОбъекта = "Контрагенты" Тогда
			ЗаполнитьЭлементОтбораКомпоновкиИзСтруктуры(НастройкиКомпоновки.Отбор, СтруктураНастроекОтбора, "Партнеры","Партнер");
		ИначеЕсли ИмяОбъекта = "КонтактныеЛицаПартнеров" Тогда
			ЗаполнитьЭлементОтбораКомпоновкиИзСтруктуры(НастройкиКомпоновки.Отбор, СтруктураНастроекОтбора, "Партнеры","Владелец");
			ДобавитьЭлементОтбораВНастройкиСхемы(НастройкиКомпоновки, "Владелец.ОбслуживаетсяТорговымиПредставителями", ВидСравненияКомпоновкиДанных.Равно, Истина, Истина);
		ИначеЕсли ИмяОбъекта = "Организации" Тогда
			ЗаполнитьЭлементОтбораКомпоновкиИзСтруктуры(НастройкиКомпоновки.Отбор, СтруктураНастроекОтбора, "Организации","Ссылка");
		ИначеЕсли ИмяОбъекта = "СоглашенияСКлиентами" Тогда
			Если ИспользуетсяВыборка Тогда
				ЗаполнитьЭлементОтбораКомпоновкиИзСтруктуры(НастройкиКомпоновки.Отбор, СтруктураНастроекОтбора, "Партнеры","Партнер");
			КонецЕсли;
		ИначеЕсли ИмяОбъекта = "ДоговорыКонтрагентов" Тогда
			Если ИспользуетсяВыборка Тогда
				ЗаполнитьЭлементОтбораКомпоновкиИзСтруктуры(НастройкиКомпоновки.Отбор, СтруктураНастроекОтбора, "Партнеры","Партнер");
			КонецЕсли;
		ИначеЕсли ИмяОбъекта = "Номенклатура" Тогда
			ЗаполнитьЭлементОтбораКомпоновкиИзСтруктуры(НастройкиКомпоновки.Отбор, СтруктураНастроекОтбора, "Номенклатура","Ссылка");
		ИначеЕсли ИмяОбъекта = "УпаковкиНоменклатуры" Тогда
			Если ИспользуетсяВыборка Тогда
				ЗаполнитьЭлементОтбораКомпоновкиИзСтруктуры(НастройкиКомпоновки.Отбор, СтруктураНастроекОтбора, "Номенклатура","Владелец");
			КонецЕсли;
		ИначеЕсли ИмяОбъекта = "ХарактеристикиНоменклатуры" Тогда
			Если ИспользуетсяВыборка Тогда
				ЗаполнитьЭлементОтбораКомпоновкиИзСтруктуры(НастройкиКомпоновки.Отбор, СтруктураНастроекОтбора, "Номенклатура","Владелец");
			КонецЕсли;
		ИначеЕсли ИмяОбъекта = "ВидыЦен" Тогда
			ЗаполнитьЭлементОтбораКомпоновкиИзСтруктуры(НастройкиКомпоновки.Отбор, СтруктураНастроекОтбора, "ВидыЦен","Ссылка");
		ИначеЕсли ИмяОбъекта = "Склады" Тогда
			ЗаполнитьЭлементОтбораКомпоновкиИзСтруктуры(НастройкиКомпоновки.Отбор, СтруктураНастроекОтбора, "Склады","Ссылка");
		ИначеЕсли ИмяОбъекта = "ПричиныОтменыЗаказовКлиентов" Тогда
			ЗаполнитьЭлементОтбораКомпоновкиИзСтруктуры(НастройкиКомпоновки.Отбор, СтруктураНастроекОтбора, "ПричиныОтменыЗаказовКлиентов","Ссылка");
		ИначеЕсли ИмяОбъекта = "НоменклатураПрисоединенныеФайлы" Тогда
			ЗаполнитьЭлементОтбораКомпоновкиИзСтруктуры(НастройкиКомпоновки.Отбор, СтруктураНастроекОтбора, "Номенклатура","Ссылка");
		КонецЕсли;

	ИначеЕсли ИмяКласса = "Документы" Тогда

		Если ИмяОбъекта = "ЗаданиеТорговомуПредставителю" Тогда
			ЗаполнитьЭлементОтбораКомпоновкиИзСтруктуры(НастройкиКомпоновки.Отбор, СтруктураНастроекОтбора, "Партнеры","Партнер");
		КонецЕсли;

	ИначеЕсли ИмяКласса = "РегистрыСведений" Тогда

		Если ИмяОбъекта = "ЦеныНоменклатуры" Тогда
			Если ИспользоватьДополнительныеОтборы Тогда
				ЗаполнитьЭлементОтбораКомпоновкиИзСтруктуры(НастройкиКомпоновки.Отбор, СтруктураНастроекОтбора, "ВидыЦен","ВидЦены");
				ЗаполнитьЭлементОтбораКомпоновкиИзСтруктуры(НастройкиКомпоновки.Отбор, СтруктураНастроекОтбора, "Номенклатура","Номенклатура");
				ДобавитьЭлементОтбораВНастройкиСхемы(НастройкиКомпоновки, "ВидЦены.ИспользоватьПриПродаже", ВидСравненияКомпоновкиДанных.Равно, Истина, Истина);
			КонецЕсли;
		ИначеЕсли ИмяОбъекта = "ДоступностьТоваровДляВнешнихПользователей" Тогда
			Если ИспользоватьДополнительныеОтборы Тогда
				ЗаполнитьЭлементОтбораКомпоновкиИзСтруктуры(НастройкиКомпоновки.Отбор, СтруктураНастроекОтбора, "Номенклатура","Номенклатура");
				ЗаполнитьЭлементОтбораКомпоновкиИзСтруктуры(НастройкиКомпоновки.Отбор, СтруктураНастроекОтбора, "Склады","Склад");
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСНастройкамиИПараметрамиОбмена

// Формирует и возвращает структуру, содержащую структуры настроек отбора.
//
// Параметры:
//  УзелОбмена - ПланОбменаСсылка - узел плана обмена, для которого определяются настройки отборов.
//
// Возвращаемое значение:
//  Структура - структура, описывающее отборы.
//
Функция НастройкиОтбора(УзелОбмена) Экспорт
	
	ХранилищеОтбораСхемыОбмена = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УзелОбмена, "ХранилищеОтбораСхемыОбмена");
	СтруктураНастроек = ХранилищеОтбораСхемыОбмена.Получить();
	
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		Возврат СтруктураНастроек;
	Иначе
		Возврат Новый Структура();
	КонецЕсли;
	
	Возврат СтруктураНастроек;

КонецФункции

// Формирует и возвращает структуру, описывающие параметры настройки обмена для указанного узла обмена.
//
// Параметры:
//  УзелОбмена - ПланОбменаСсылка - узел плана обмена, для которого требуется получить параметры.
//
// Возвращаемое значение:
//  Структура - структура, описывающая параметры настройки обмена для указанного узла обмена, с полями:
//      * АвтоматическиСоздаватьЗаказыПоЗаданию - Булево - признак необходимости автоматического создания заказов.
//      * ТорговыйПредставитель - СправочникСсылка.Пользователи - торговый представитель.
//      * ИспользованиеКонтактнойИнформации - ПеречислениеСсылка.ИспользованиеКонтактнойИнформацииМобильнымПриложением -
//                                            вид использования контактной информации.
//      * ИспользованиеСоглашенийСКлиентами - ПеречислениеСсылка.ИспользованиеСоглашенийСКлиентами - вид использования
//          соглашений с клиентами.
//
Функция ОписаниеПараметровНастройкиОбмена(УзелОбмена) Экспорт
	
	АвтоматическиСоздаватьЗаказыПоЗаданию = Ложь;
	ТорговыйПредставитель = Неопределено;
	ИспользованиеКонтактнойИнформации = Неопределено;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МобильноеПриложениеТорговыйПредставитель.Пользователь КАК ТорговыйПредставитель,
	|	МобильноеПриложениеТорговыйПредставитель.АвтоматическиСоздаватьЗаказыПоЗаданию КАК АвтоматическиСоздаватьЗаказыПоЗаданию,
	|	МобильноеПриложениеТорговыйПредставитель.ИспользованиеКонтактнойИнформации КАК ИспользованиеКонтактнойИнформации
	|ИЗ
	|	ПланОбмена.МобильноеПриложениеТорговыйПредставитель КАК МобильноеПриложениеТорговыйПредставитель
	|ГДЕ
	|	МобильноеПриложениеТорговыйПредставитель.Ссылка = &УзелОбмена"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("УзелОбмена", УзелОбмена);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		АвтоматическиСоздаватьЗаказыПоЗаданию = Выборка.АвтоматическиСоздаватьЗаказыПоЗаданию;
		ТорговыйПредставитель = Выборка.ТорговыйПредставитель;
		ИспользованиеКонтактнойИнформации = Выборка.ИспользованиеКонтактнойИнформации;
		
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("АвтоматическиСоздаватьЗаказыПоЗаданию", АвтоматическиСоздаватьЗаказыПоЗаданию);
	СтруктураПараметров.Вставить("ТорговыйПредставитель", ТорговыйПредставитель);
	СтруктураПараметров.Вставить("ИспользованиеКонтактнойИнформации", ИспользованиеКонтактнойИнформации);
    СтруктураПараметров.Вставить("ИспользованиеСоглашенийСКлиентами", Константы.ИспользованиеСоглашенийСКлиентами.Получить());
	
	Возврат СтруктураПараметров;

КонецФункции

// Разбирает xml-строку параметров обмена данными и формирует структуру параметров на ее основе.
//
// Параметры:
//  ПараметрыОбменаДанными - Строка - xml-строка, содержащая параметры обмена.
//
// Возвращаемое значение:
//  Структура - структура, содержащая параметры обмена.
//
Функция ОписаниеПараметровОбменаДанными(ПараметрыОбменаДанными) Экспорт
	
	СтруктураПараметров = Новый Структура();
	
	ЧтениеXML = Новый ЧтениеXML();
		
	Попытка
		ЧтениеXML.УстановитьСтроку(ПараметрыОбменаДанными);
	Исключение
		
		#Если ВнешнееСоединение Тогда
		ТекстСообщения = НСтр("ru='Ошибка при чтении параметров обмена данными:'");
		ВызватьИсключение(ТекстСообщения + КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		#КонецЕсли
		
	КонецПопытки;
	
	Попытка
		
		Пока ЧтениеXML.Прочитать() Цикл
			
			Пока ВозможностьЧтенияXML(ЧтениеXML) Цикл
				
				ИмяПараметра = ЧтениеXML.Имя;
				ЗначениеПараметра = ПрочитатьXML(ЧтениеXML);
				
				СтруктураПараметров.Вставить(ИмяПараметра, ЗначениеПараметра);
				
			КонецЦикла;
			
		КонецЦикла;		
				
	Исключение
		
		#Если ВнешнееСоединение Тогда
		ТекстСообщения = НСтр("ru='Ошибка при чтении параметров обмена данными:'");
		ВызватьИсключение(ТекстСообщения + КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		#КонецЕсли
		
	КонецПопытки;

	Возврат СтруктураПараметров;

КонецФункции

// Определяет, требуется ли подключение внешней компоненты обмена данными при старте системы.
//
// Возвращаемое значение:
//  Булево - результат проверки. Истина - подключение требуется, Ложь - не требуется.
//
Функция ПодключатьКомпонентуОбменаДаннымиПриСтартеСистемы() Экспорт
	
	ТребуетсяПодключение = Ложь;
	
	ЗначениеНастройкиИзХранилища = Неопределено;
	ЗначениеНастройкиИзХранилища = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиРаботыПользователяСКомпонентойОбменаДанными", 
																				"ПодключатьКомпонентуОбменаДаннымиПриСтартеСистемы");
		
	Если ЗначениеНастройкиИзХранилища <> Неопределено Тогда
		ТребуетсяПодключение = ЗначениеНастройкиИзХранилища;
	КонецЕсли;
	
	Возврат ТребуетсяПодключение;

КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСМетаданными

// Формирует дерево используемых метаданных на основании описания, полученного от редактора мобильных приложений.
//
// Параметры:
//  ОписаниеМетаданных - Строка - XML-строка, содержащая описание используемых метаданных.
//
// Возвращаемое значение:
//  ДеревоЗначений - ДеревоЗначений - с колонками:
//   * Имя - Строка
//   * Использование - Булево
//
Функция ИспользуемыеМетаданные(ОписаниеМетаданных) Экспорт

	ДеревоМетаданных = Новый ДеревоЗначений();
	ДеревоМетаданных.Колонки.Добавить("Имя");	
	ДеревоМетаданных.Колонки.Добавить("Использование");	
	
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXML.УстановитьСтроку(ОписаниеМетаданных);
	
	СтрокаДерева = Неопределено;
	
	Попытка
		
		Пока ЧтениеXML.Прочитать() Цикл	
			
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				
				Если СтрокаДерева = Неопределено Тогда
					КоллекцияСтрокДляДобавления = ДеревоМетаданных.Строки;
				Иначе
					КоллекцияСтрокДляДобавления = СтрокаДерева.Строки;
				КонецЕсли;	
					
				СтрокаДерева = КоллекцияСтрокДляДобавления.Добавить();
				Имя = ЧтениеXML.Имя;
				СтрокаДерева.Имя = Имя;
				
				Если СтрокаДерева.Уровень() = 1 Тогда
					
					Если Имя = "Constants" Тогда
						СтрокаДерева.Имя = "Константы";
					ИначеЕсли Имя = "Catalogs" Тогда
						СтрокаДерева.Имя = "Справочники";
					ИначеЕсли Имя = "Documents" Тогда
						СтрокаДерева.Имя = "Документы";
					ИначеЕсли Имя = "InformationRegisters" Тогда
						СтрокаДерева.Имя = "РегистрыСведений";
					КонецЕсли;
						
				КонецЕсли;
				
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				
				Если СтрокаДерева <> Неопределено Тогда
					СтрокаДерева = СтрокаДерева.Родитель;
				КонецЕсли;	
				
			КонецЕсли;
				
		КонецЦикла;
			
	Исключение
		
		#Если ВнешнееСоединение Тогда
		ВызватьИсключение(НСтр("ru='Ошибка чтения перечня метаданных, используемых мобильным приложением'"));
		#КонецЕсли
	
	КонецПопытки;
	
	Возврат ДеревоМетаданных;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцедурыИФункцииФормированияПакетаОбмена

// Записывает в пакет обмена специальную секцию ClearData.
//
// Параметры:
//  УзелОбмена - ПланОбменаСсылка.МобильноеПриложениеТорговыйПредставитель - узел плана обмена, для которого требуется сформировать секцию очистки данных.
//  ЗаписьXML - ЗаписьXML - объект ЗаписьXML, при помощи которого производится запись пакета обмена.
//  СтруктураПараметровОбменаДанными - Структура - структура, содержащая параметры обмена данными.
//
Процедура ЗаписатьСекциюОчисткиДанных(УзелОбмена, ЗаписьXML, СтруктураПараметровОбменаДанными)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ClearData");
	
	// Очистка прекративших действие соглашений
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Catalog.СоглашенияСКлиентами");
		ЗаписьXML.ЗаписатьНачалоЭлемента("Filter");
		
			ЗаписьXML.ЗаписатьНачалоЭлемента("ДатаОкончанияДействия");
				ЗаписатьXML(ЗаписьXML, НачалоДня(ТекущаяДатаСеанса()), "Value", НазначениеТипаXML.Неявное);
				ЗаписатьXML(ЗаписьXML, "Меньше", "ComparisonType", НазначениеТипаXML.Неявное);
			ЗаписьXML.ЗаписатьКонецЭлемента(); //Для тега "ДатаОкончанияДействия"
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("ДатаОкончанияДействия");
				ЗаписатьXML(ЗаписьXML, '00010101000000', "Value", НазначениеТипаXML.Неявное);
				ЗаписатьXML(ЗаписьXML, "НеРавно", "ComparisonType", НазначениеТипаXML.Неявное);
			ЗаписьXML.ЗаписатьКонецЭлемента(); //Для тега "ДатаОкончанияДействия"
			
		ЗаписьXML.ЗаписатьКонецЭлемента(); // Для тега Filter
	ЗаписьXML.ЗаписатьКонецЭлемента(); // Для тега "Catalog.СоглашенияСКлиентами"
	
	// Очистка прекративших действие договоров
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Catalog.ДоговорыКонтрагентов");
		ЗаписьXML.ЗаписатьНачалоЭлемента("Filter");
		
			ЗаписьXML.ЗаписатьНачалоЭлемента("ДатаОкончанияДействия");
				ЗаписатьXML(ЗаписьXML, НачалоДня(ТекущаяДатаСеанса()), "Value", НазначениеТипаXML.Неявное);
				ЗаписатьXML(ЗаписьXML, "Меньше", "ComparisonType", НазначениеТипаXML.Неявное);
			ЗаписьXML.ЗаписатьКонецЭлемента(); //Для тега "ДатаОкончанияДействия"
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("ДатаОкончанияДействия");
				ЗаписатьXML(ЗаписьXML, '00010101000000', "Value", НазначениеТипаXML.Неявное);
				ЗаписатьXML(ЗаписьXML, "НеРавно", "ComparisonType", НазначениеТипаXML.Неявное);
			ЗаписьXML.ЗаписатьКонецЭлемента(); //Для тега "ДатаОкончанияДействия"
			
		ЗаписьXML.ЗаписатьКонецЭлемента(); // Для тега Filter
	ЗаписьXML.ЗаписатьКонецЭлемента(); // Для тега "Catalog.ДоговорыКонтрагентов"
	
	// Очистка помеченных на удаление заданий
	
	ИспользованиеЗаданий = Константы.ИспользованиеЗаданийТорговымПредставителям.Получить();
	Если ИспользованиеЗаданий = Перечисления.ИспользованиеЗаданийТорговымПредставителям.ИспользуютсяТорговымиПредставителямиДляПланирования Тогда
	
		ЗаписьXML.ЗаписатьНачалоЭлемента("Document.ЗаданиеТорговомуПредставителю");
			ЗаписьXML.ЗаписатьНачалоЭлемента("Filter");
			
				ЗаписьXML.ЗаписатьНачалоЭлемента("ПометкаУдаления");
					ЗаписатьXML(ЗаписьXML, Истина, "Value", НазначениеТипаXML.Неявное);
					ЗаписатьXML(ЗаписьXML, "Равно", "ComparisonType", НазначениеТипаXML.Неявное);
				ЗаписьXML.ЗаписатьКонецЭлемента(); //Для тега "ПометкаУдаления"
				
			ЗаписьXML.ЗаписатьКонецЭлемента(); // Для тега Filter
		ЗаписьXML.ЗаписатьКонецЭлемента(); // Для тега "Document.ЗаданиеТорговомуПредставителю"
	
	КонецЕсли;
	
	Если ИспользованиеЗаданий <> Перечисления.ИспользованиеЗаданийТорговымПредставителям.НеИспользуются Тогда
		// Очистка заданий по требованию пользователя
		Если СтруктураПараметровОбменаДанными.Свойство("УдалятьЗадания") И СтруктураПараметровОбменаДанными.Свойство("ДатаГраницыОчисткиЗаданий") Тогда
			Если СтруктураПараметровОбменаДанными.УдалятьЗадания Тогда
				ЗаписьXML.ЗаписатьНачалоЭлемента("Document.ЗаданиеТорговомуПредставителю");
					ЗаписьXML.ЗаписатьНачалоЭлемента("Filter");
					
						ЗаписьXML.ЗаписатьНачалоЭлемента("ДатаВизитаФакт");
							ЗаписатьXML(ЗаписьXML, КонецДня(СтруктураПараметровОбменаДанными.ДатаГраницыОчисткиЗаданий), "Value", НазначениеТипаXML.Неявное);
							ЗаписатьXML(ЗаписьXML, "МеньшеИлиРавно", "ComparisonType", НазначениеТипаXML.Неявное);
						ЗаписьXML.ЗаписатьКонецЭлемента(); //Для тега "ДатаВизитаФакт"
						
						ЗаписьXML.ЗаписатьНачалоЭлемента("ДатаВизитаФакт");
							ЗаписатьXML(ЗаписьXML, '00010101000000', "Value", НазначениеТипаXML.Неявное);
							ЗаписатьXML(ЗаписьXML, "НеРавно", "ComparisonType", НазначениеТипаXML.Неявное);
						ЗаписьXML.ЗаписатьКонецЭлемента(); //Для тега "ДатаВизитаФакт"
						
					ЗаписьXML.ЗаписатьКонецЭлемента(); //Для тега "Filter"
				ЗаписьXML.ЗаписатьКонецЭлемента(); // Для тега "Document.ЗаданиеТорговомуПредставителю"
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ИспользованиеЗаданий <> Перечисления.ИспользованиеЗаданийТорговымПредставителям.ИспользуютсяДляУправленияТорговымиПредставителями Тогда
		
		// Очистка заказов по требованию пользователя
		Если СтруктураПараметровОбменаДанными.Свойство("УдалятьЗаказы") И СтруктураПараметровОбменаДанными.Свойство("ДатаГраницыОчисткиЗаказов") Тогда
			Если СтруктураПараметровОбменаДанными.УдалятьЗаказы Тогда
				ЗаписьXML.ЗаписатьНачалоЭлемента("Document.ЗаказКлиента");
					ЗаписьXML.ЗаписатьНачалоЭлемента("Filter");
						ЗаписьXML.ЗаписатьНачалоЭлемента("Дата");
							ЗаписатьXML(ЗаписьXML, КонецДня(СтруктураПараметровОбменаДанными.ДатаГраницыОчисткиЗаказов), "Value", НазначениеТипаXML.Неявное);
							ЗаписатьXML(ЗаписьXML, "МеньшеИлиРавно", "ComparisonType", НазначениеТипаXML.Неявное);
						ЗаписьXML.ЗаписатьКонецЭлемента(); //Для тега "Дата"
					ЗаписьXML.ЗаписатьКонецЭлемента(); //Для тега "Filter"
				ЗаписьXML.ЗаписатьКонецЭлемента(); // Для тега "Document.ЗаказКлиента"
			КонецЕсли;
		КонецЕсли;
			
	КонецЕсли;
	
	// Очистка авансовых отчетов по требованию пользователя
	Если СтруктураПараметровОбменаДанными.Свойство("УдалятьАвансовыеОтчеты") И СтруктураПараметровОбменаДанными.Свойство("ДатаГраницыОчисткиАвансовыхОтчетов") Тогда
		Если СтруктураПараметровОбменаДанными.УдалятьАвансовыеОтчеты Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("Document.АвансовыйОтчет");
				ЗаписьXML.ЗаписатьНачалоЭлемента("Filter");
					ЗаписьXML.ЗаписатьНачалоЭлемента("Дата");
						ЗаписатьXML(ЗаписьXML, КонецДня(СтруктураПараметровОбменаДанными.ДатаГраницыОчисткиАвансовыхОтчетов), "Value", НазначениеТипаXML.Неявное);
						ЗаписатьXML(ЗаписьXML, "МеньшеИлиРавно", "ComparisonType", НазначениеТипаXML.Неявное);
					ЗаписьXML.ЗаписатьКонецЭлемента(); //Для тега "Дата"
				ЗаписьXML.ЗаписатьКонецЭлемента(); //Для тега "Filter"
			ЗаписьXML.ЗаписатьКонецЭлемента(); // Для тега "Document.АвансовыйОтчет"
		КонецЕсли;
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); // Для тега ClearData
	
КонецПроцедуры

// Записывает в пакет обмена специальную секцию хранимых данных.
//
// Параметры:
//  УзелОбмена - ПланОбменаСсылка.МобильноеПриложениеТорговыйПредставитель - узел плана обмена, для которого требуется сформировать секцию очистки данных.
//  ЗаписьXML - ЗаписьXML - объект ЗаписьXML, при помощи которого производится запись пакета обмена.
//  СтруктураПараметровОбменаДанными - Структура - структура, содержащая параметры обмена данными.
//
Процедура ЗаписатьСекциюХранимыхДанных(УзелОбмена, ЗаписьXML, СтруктураПараметровОбменаДанными)
	
	УказыватьИспользованиеКонтактнойИнформации = Истина;
	ТекущееИспользованиеКонтактнойИнформации = Неопределено;
	
	ИспользованиеКонтактнойИнформации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УзелОбмена, "ИспользованиеКонтактнойИнформации");
	
	Если СтруктураПараметровОбменаДанными.Свойство("ТекущееИспользованиеКонтактнойИнформации",ТекущееИспользованиеКонтактнойИнформации) Тогда
		Если ТекущееИспользованиеКонтактнойИнформации = ИспользованиеКонтактнойИнформации Тогда
			УказыватьИспользованиеКонтактнойИнформации = Ложь;
		КонецЕсли;
	Иначе
		УказыватьИспользованиеКонтактнойИнформации = Ложь;
	КонецЕсли;

	ЗаписьXML.ЗаписатьНачалоЭлемента("PersistentDataList");
	
	Если УказыватьИспользованиеКонтактнойИнформации Тогда
		ЗаписатьXML(ЗаписьXML, ИспользованиеКонтактнойИнформации, "ИспользованиеКонтактнойИнформации", НазначениеТипаXML.Явное);
	КонецЕсли;
	
	ЗаписатьXML(ЗаписьXML, Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры, "ИндивидуальныйНаборУпаковокДляНоменклатуры", НазначениеТипаXML.Явное);
		
	ЗаписьXML.ЗаписатьКонецЭлемента(); // PersistentDataList
		
КонецПроцедуры

// Записывает в пакет обмена реквизиты указанного элемента справочника.
//
// Параметры:
//  Объект - СправочникОбъект - объект, подлежащий записи.
//  ЭтоГруппа - Булево - признак, определяющий, является ли объект группой.
//  СтруктураСостава - Структура - структура, описывающая набор используемых полей объекта.
//  ЗаписьXML - ЗаписьXML - объект ЗаписьXML, который выполняет запись.
//
Процедура ЗаписатьРеквизитыСправочникаВПакетОбмена(Объект, ЭтоГруппа, СтруктураСостава, ЗаписьXML)

	СтруктураРеквизитов = СтруктураСостава.Реквизиты;

	Для Каждого Реквизит Из СтруктураРеквизитов Цикл

		СтруктураОписанияРеквизита = Реквизит.Значение;

		Если НеобходимоУказаниеСвойства(ЭтоГруппа, СтруктураОписанияРеквизита) Тогда
			ЗаписатьXML(ЗаписьXML, Объект[Реквизит.Ключ], Реквизит.Ключ, СтруктураОписанияРеквизита.УказаниеТипа);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Записывает в пакет обмена табличные части указанного элемента справочника.
//
// Параметры:
//  Объект - СправочникОбъект - объект, подлежащий записи.
//  ЭтоГруппа - Булево - признак, определяющий, является ли объект группой.
//  СтруктураСостава - Структура - структура, описывающая набор используемых полей объекта.
//  ЗаписьXML - ЗаписьXML - объект ЗаписьXML, который выполняет запись.
//  УзелОбмена - ПланОбменаСсылка.МобильноеПриложениеТорговыйПредставитель - узел обмена данными, для которого формируется пакет обмена.
//
Процедура ЗаписатьТабличныеЧастиСправочникаВПакетОбмена(Объект, ЭтоГруппа, СтруктураСостава, ЗаписьXML, УзелОбмена)

	СтруктураТабличныхЧастей = СтруктураСостава.ТабличныеЧасти;

	Для Каждого ТабличнаяЧасть Из СтруктураТабличныхЧастей Цикл

		СтруктураОписанияТабличнойЧасти = ТабличнаяЧасть.Значение;		
					
		Если НеобходимоУказаниеСвойства(ЭтоГруппа, СтруктураОписанияТабличнойЧасти) Тогда
			
			// Запишем поочередно каждую табличную часть объекта.
			ЗаписьXML.ЗаписатьНачалоЭлемента(ТабличнаяЧасть.Ключ);
			
			Если ТребуетсяВыгрузкаДанныхТабличнойЧасти(ТипЗнч(Объект), ТабличнаяЧасть.Ключ, УзелОбмена) Тогда
				
				Для Каждого СтрокаТабличнойЧасти Из Объект[ТабличнаяЧасть.Ключ] Цикл
					
					// Запишем строки табличной части.
					ЗаписьXML.ЗаписатьНачалоЭлемента("Row");
					
					СтруктураРеквизитов = СтруктураОписанияТабличнойЧасти.СтруктураРеквизитов;
					
					Для Каждого ЭлементСтруктурыРеквизитов Из СтруктураРеквизитов Цикл
						
						ИмяРеквизита = ЭлементСтруктурыРеквизитов.Ключ;
						СтруктураОписанияРеквизита = ЭлементСтруктурыРеквизитов.Значение;
						
						// Для каждой строки табличной части запишем используемые реквизиты.
						ЗаписатьXML(ЗаписьXML, СтрокаТабличнойЧасти[ИмяРеквизита], ИмяРеквизита, СтруктураОписанияРеквизита.УказаниеТипа);
						
					КонецЦикла;
					
					ЗаписьXML.ЗаписатьКонецЭлемента(); // Row
					
				КонецЦикла;
				
			КонецЕсли;
			
			ЗаписьXML.ЗаписатьКонецЭлемента(); // Имя табличной части
			
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Записывает в пакет обмена данные объекта, подлежащие записи (используемые и стандартные реквизиты).
//
// Параметры:
//  Объект - СправочникОбъект - объект, подлежащий записи.
//  ИмяОбъекта - Структура - имя записываемого объекта.
//  СтруктураСостава - Структура - структура, описывающая набор используемых полей объекта.
//  ЗаписьXML - ЗаписьXML - объект ЗаписьXML, который выполняет запись.
//  УзелОбмена - ПланОбменаСсылка.МобильноеПриложениеТорговыйПредставитель - узел плана обмена, для которого формируется пакет обмена.
//
Процедура ЗаписатьЭлементСправочникаВПакетОбмена(Объект, ИмяОбъекта, СтруктураСостава, ЗаписьXML, УзелОбмена)

	ЗаписьXML.ЗаписатьНачалоЭлемента("CatalogObject." + ИмяОбъекта);
	
	ЭтоГруппа = Объект.ЭтоГруппа;

	// Запишем реквизиты справочника.
	ЗаписатьРеквизитыСправочникаВПакетОбмена(Объект, ЭтоГруппа, СтруктураСостава, ЗаписьXML);

	// Запишем табличные части справочника.
	ЗаписатьТабличныеЧастиСправочникаВПакетОбмена(Объект, ЭтоГруппа, СтруктураСостава, ЗаписьXML, УзелОбмена);

	ЗаписьXML.ЗаписатьКонецЭлемента(); // CatalogObject
	
КонецПроцедуры

// Записывает в пакет обмена реквизиты указанного документа.
//
// Параметры:
//  Объект - ДокументОбъект - объект, подлежащий записи.
//  СтруктураСостава - Структура - структура, описывающая набор используемых полей объекта.
//  ЗаписьXML - ЗаписьXML - объект ЗаписьXML, который выполняет запись.
//
Процедура ЗаписатьРеквизитыДокументаВПакетОбмена(Объект, СтруктураСостава, ЗаписьXML)

	СтруктураРеквизитов = СтруктураСостава.Реквизиты;

	Для Каждого Реквизит Из СтруктураРеквизитов Цикл

		СтруктураОписанияРеквизита = Реквизит.Значение;
		ЗаписатьXML(ЗаписьXML, Объект[Реквизит.Ключ], Реквизит.Ключ, СтруктураОписанияРеквизита.УказаниеТипа);

	КонецЦикла;

КонецПроцедуры

// Записывает в пакет обмена табличные части указанного документа.
//
// Параметры:
//  Объект - ДокументОбъект - объект, подлежащий записи.
//  СтруктураСостава - Структура - структура, описывающая набор используемых полей объекта.
//  ЗаписьXML - ЗаписьXML - объект ЗаписьXML, который выполняет запись.
//
Процедура ЗаписатьТабличныеЧастиДокументаВПакетОбмена(Объект, СтруктураСостава, ЗаписьXML)

	СтруктураТабличныхЧастей = СтруктураСостава.ТабличныеЧасти;
	
	Для Каждого ТабличнаяЧасть Из СтруктураТабличныхЧастей Цикл
		
		СтруктураОписанияТабличнойЧасти = ТабличнаяЧасть.Значение;
		
		// Запишем поочередно каждую табличную часть объекта.
		ЗаписьXML.ЗаписатьНачалоЭлемента(ТабличнаяЧасть.Ключ);
		
		Для Каждого СтрокаТабличнойЧасти Из Объект[ТабличнаяЧасть.Ключ] Цикл
			
			// Запишем строки табличной части.
			ЗаписьXML.ЗаписатьНачалоЭлемента("Row");
			
			СтруктураРеквизитов = СтруктураОписанияТабличнойЧасти.СтруктураРеквизитов;
			
			Для Каждого ЭлементСтруктурыРеквизитов Из СтруктураРеквизитов Цикл
				
				ИмяРеквизита = ЭлементСтруктурыРеквизитов.Ключ;
				СтруктураОписанияРеквизита = ЭлементСтруктурыРеквизитов.Значение;

				// Для каждой строки табличной части запишем используемые реквизиты.
				ЗаписатьXML(ЗаписьXML, СтрокаТабличнойЧасти[ИмяРеквизита], ИмяРеквизита, СтруктураОписанияРеквизита.УказаниеТипа);
				
			КонецЦикла;
			
			ЗаписьXML.ЗаписатьКонецЭлемента(); // Row
			
		КонецЦикла;
		
		ЗаписьXML.ЗаписатьКонецЭлемента(); // Имя табличной части
		
	КонецЦикла;

КонецПроцедуры

// Записывает в пакет обмена данные объекта, подлежащие записи (используемые и стандартные реквизиты).
//
// Параметры:
//  Объект - ДокументОбъект - объект, подлежащий записи.
//  ИмяОбъекта - Строка - имя записываемого объекта.
//  СтруктураСостава - Структура - структура, описывающая набор используемых полей объекта.
//  ЗаписьXML - ЗаписьXML - объект ЗаписьXML, который выполняет запись.
//
Процедура ЗаписатьДокументВПакетОбмена(Объект, ИмяОбъекта, СтруктураСостава, ЗаписьXML)

	ЗаписьXML.ЗаписатьНачалоЭлемента("DocumentObject." + ИмяОбъекта);

	// Запишем реквизиты документа.
	ЗаписатьРеквизитыДокументаВПакетОбмена(Объект, СтруктураСостава, ЗаписьXML);

	// Запишем табличные части справочника.
	ЗаписатьТабличныеЧастиДокументаВПакетОбмена(Объект, СтруктураСостава, ЗаписьXML);

	ЗаписьXML.ЗаписатьКонецЭлемента(); // DocumentObject	

КонецПроцедуры	

// Записывает данные по конкретному объекту в пакет обмена.
//
// Параметры:
//  Объект - СправочникОбъект, ДокументОбъект - объект, подлежащий записи.
//  ИмяКласса - Строка - имя класса, к которому принадлежит объект (Справочники, Документы и т.д.).
//  ИмяОбъекта - Строка - имя объекта метаданных, данные которого требуется записать.
//  СтруктураСостава - Структура - структура, описывающая набор используемых полей объекта.
//  ЗаписьXML - ЗаписьXML - объект ЗаписьXML, который выполняет запись.
//  УзелОбмена - ПланОбменаСсылка.МобильноеПриложениеТорговыйПредставитель - узел плана обмена, для которого формируется пакет обмена.
//
Процедура ЗаписатьДанныеВПакетОбмена(Объект, ИмяКласса, ИмяОбъекта, СтруктураСостава, ЗаписьXML, УзелОбмена)

	Если ТипЗнч(Объект) = Тип("УдалениеОбъекта") Тогда
		ЗаписатьXML(ЗаписьXML, Объект);
		Возврат;
	КонецЕсли;

	Если ИмяКласса = "Константы" ИЛИ ИмяКласса = "РегистрыСведений" Тогда

		ЗаписатьXML(ЗаписьXML, Объект);

	ИначеЕсли ИмяКласса = "Справочники" Тогда

		ЗаписатьЭлементСправочникаВПакетОбмена(Объект, ИмяОбъекта, СтруктураСостава, ЗаписьXML, УзелОбмена);

	ИначеЕсли ИмяКласса = "Документы" Тогда

		ЗаписатьДокументВПакетОбмена(Объект, ИмяОбъекта, СтруктураСостава, ЗаписьXML);

	КонецЕсли;

КонецПроцедуры

// Определяет и возвращает признак необходимости указания свойства объекта метаданных.
//
// Параметры:
//  ЭтоГруппаСправочника - Булево - признак, определяющий, является ли объект группой.
//  СтруктураОписанияСвойства - Структура - структура, содержащая описание свойства (вариант использования реквизита или ТЧ).
//
// Возвращаемое значение:
//  Булево - признак необходимости. Истина - свойство необходимо указать, Ложь - указание не требуется.
//
Функция НеобходимоУказаниеСвойства(ЭтоГруппаСправочника, СтруктураОписанияСвойства)

	Если ЭтоГруппаСправочника Тогда
		Возврат СтруктураОписанияСвойства.ИспользуетсяДляГруппы;
	Иначе
		Возврат СтруктураОписанияСвойства.ИспользуетсяДляЭлемента;
	КонецЕсли;

КонецФункции

// Анализирует, требуется ли включать данные объекта в пакет обмена.
//
// Параметры:
//  СтруктураОписанияОбъекта - Структура - структура, содержащая описание объекта.
//  СтруктураПараметровОбменаДанными - Структура - структура, содержащая параметры обмена данными.
//
// Возвращаемое значение:
//  Булево - необходимость включения данных. Истина - данные нужно включать в пакет обмена, Ложь - не нужно.
//
Функция ВключатьДанныеВПакетОбмена(СтруктураОписанияОбъекта, СтруктураПараметровОбменаДанными)
	
	Если СтруктураОписанияОбъекта.ИмяКласса = "Справочники" Тогда
		
		Если СтруктураОписанияОбъекта.ИмяОбъекта = "НоменклатураПрисоединенныеФайлы" Тогда
			
			ПолучатьИзображенияНоменклатуры = Ложь;
			Если СтруктураПараметровОбменаДанными.Свойство("ПолучатьИзображенияНоменклатуры") Тогда
				ПолучатьИзображенияНоменклатуры = СтруктураПараметровОбменаДанными.ПолучатьИзображенияНоменклатуры;
			КонецЕсли;
			
			Возврат ПолучатьИзображенияНоменклатуры;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураОписанияОбъекта.ИмяКласса = "РегистрыСведений" Тогда
		
		Если СтруктураОписанияОбъекта.ИмяОбъекта = "ДоступностьТоваровДляВнешнихПользователей" Тогда
			
			ПолучатьИнформациюОДоступныхТоварах = Ложь;
			Если СтруктураПараметровОбменаДанными.Свойство("ПолучатьИнформациюОДоступныхТоварах") Тогда
				ПолучатьИнформациюОДоступныхТоварах = СтруктураПараметровОбменаДанными.ПолучатьИнформациюОДоступныхТоварах;
			КонецЕсли;
			
			Возврат ПолучатьИнформациюОДоступныхТоварах;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Анализирует, требуется ли выгрузка данных указанной табличной части.
//
// Параметры:
//  ТипОбъекта - Тип - тип объекта, которому принадлежит табличная часть.
//  ИмяТабличнойЧасти - Строка - имя табличной части, необходимость выгрузки которой нужно проверить.
//  УзелОбмена - ПланОбменаСсылка.МобильноеПриложениеТорговыйПредставитель - узел плана обмена, для которого выгружаются данные.
//
// Возвращаемое значение:
//  Булево - признак необходимости выгрузки. Истина - выгрузка требуется, Ложь - не требуется.
//
Функция ТребуетсяВыгрузкаДанныхТабличнойЧасти(ТипОбъекта, ИмяТабличнойЧасти, УзелОбмена)
	
	Если ТипОбъекта = Тип("СправочникОбъект.Партнеры") И ИмяТабличнойЧасти = "КонтактнаяИнформация" Тогда
		ИспользованиеКонтактнойИнформации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УзелОбмена, "ИспользованиеКонтактнойИнформации");
		Возврат Не (ИспользованиеКонтактнойИнформации = Перечисления.ИспользованиеКонтактнойИнформацииМобильнымПриложением.НеИспользуется);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Обрабатывает указанный объект перед записью в пакет.
//
// Параметры:
//  Объект - СправочникОбъект, ДокументОбъект - объект, подлежащий обработке.
//  ИмяКласса - Строка - имя класса обрабатываемого объекта.
//  ИмяОбъекта - Строка - имя обрабатываемого объекта.
//  СтруктураПараметровОбменаДанными - Структура - структура, содержащая параметры обмена данными.
//  УзелОбмена - ПланОбменаСсылка.МобильноеПриложениеТорговыйПредставитель - узел обмена.
//
Процедура ОбработатьОбъектПередЗаписьюВПакетОбмена(Объект, ИмяКласса, ИмяОбъекта, СтруктураПараметровОбменаДанными, УзелОбмена)
	
	Если ТипЗнч(Объект) = Тип("УдалениеОбъекта") Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяКласса = "Справочники" Тогда
		Если ИмяОбъекта = "НоменклатураПрисоединенныеФайлы" Тогда
			Если УзелОбмена.Метаданные().Имя = "МобильноеПриложениеТорговыйПредставитель" Тогда
				ОбработатьПрисоединенныйФайлПередЗаписьюВПакет(Объект);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИмяКласса = "Документы" Тогда
		Если ИмяОбъекта = "ЗаданиеТорговомуПредставителю" Тогда
			ОбработатьЗаданиеТорговомуПредставителюПередЗаписьюВПакет(Объект, СтруктураПараметровОбменаДанными);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает задание торговому представителю.
//
// Параметры:
//  Объект - ДокументОбъект - объект, подлежащий обработке.
//  СтруктураПараметровОбменаДанными - Структура - структура, содержащая параметры обмена данными.
//
Процедура ОбработатьЗаданиеТорговомуПредставителюПередЗаписьюВПакет(Объект, СтруктураПараметровОбменаДанными)
	
	ТребуетсяЗаполнениеЗаданийПоДаннымИсторииПродаж = Ложь;
	ТребуетсяЗаполнениеДанныхОРасчетахСКлиентами = Ложь;
	
	ИспользованиеЗаданий = Константы.ИспользованиеЗаданийТорговымПредставителям.Получить();
	ДетализироватьЗадания = Константы.ДетализироватьЗаданияТорговымПредставителямПоНоменклатуре.Получить();
	
	Если ИспользованиеЗаданий = Перечисления.ИспользованиеЗаданийТорговымПредставителям.ИспользуютсяТорговымиПредставителямиДляПланирования Тогда
		Если СтруктураПараметровОбменаДанными.Свойство("ЗаполнятьЗаданияПоДаннымИсторииПродаж") Тогда
			ТребуетсяЗаполнениеЗаданийПоДаннымИсторииПродаж = СтруктураПараметровОбменаДанными.ЗаполнятьЗаданияПоДаннымИсторииПродаж;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураПараметровОбменаДанными.Свойство("ПолучатьИнформациюОРасчетахСКлиентами") Тогда
		ТребуетсяЗаполнениеДанныхОРасчетахСКлиентами = СтруктураПараметровОбменаДанными.ПолучатьИнформациюОРасчетахСКлиентами;
	КонецЕсли;
	
	Если ТребуетсяЗаполнениеЗаданийПоДаннымИсторииПродаж ИЛИ ТребуетсяЗаполнениеДанныхОРасчетахСКлиентами Тогда
		Попытка
			Если ТребуетсяЗаполнениеЗаданийПоДаннымИсторииПродаж Тогда
				ЗаполнитьЗаданиеДаннымиИсторииПродаж(Объект, СтруктураПараметровОбменаДанными);
			КонецЕсли;
			
			Если ТребуетсяЗаполнениеДанныхОРасчетахСКлиентами Тогда
				Объект.ЗаполнитьДанныеОДебиторскойЗадолженности();
				Объект.ДобавитьАвтоматическиеЗадачи();
			КонецЕсли;
			
			Объект.ДополнительныеСвойства.Вставить("НеРегистрироватьИзменения", Истина);
			Объект.Записать();
		Исключение
			КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
		
			ТекстСообщения = ИнформацияОбОшибке().Описание;
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка при записи задания торговому представителю'", КодОсновногоЯзыка),
								УровеньЖурналаРегистрации.Ошибка,
								,
								,
								ТекстСообщения);
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьПрисоединенныйФайлПередЗаписьюВПакет(Объект)
	
	Объект.ФайлХранилище = Новый ХранилищеЗначения(РаботаСФайлами.ДвоичныеДанныеФайла(Объект.Ссылка));
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСПолученнымиПакетамиОбмена

// Выполняет чтение данных объекта из пакета обмена и отражение этих данных в ИБ.
//
// Параметры:
//  ЧтениеXML - ЧтениеXML - объект, при помощи которого выполняется чтение пакета.
//  ИмяОбъекта - Строка - имя объекта данных, подлежащего чтению.
//  СоставОбъекта - Структура - структура, описывающая состав объекта данных.
//  УзелОбмена - ПланОбменаСсылка.МобильноеПриложениеТорговыйПредставитель - узел плана обмена, для которого получен пакет обмена.
//
// Возвращаемое значение:
//  СправочникОбъект - объект, обновленный или созданный по данным пакета обмена.
//
Функция ПрочитатьИИзменитьЭлементСправочника(ЧтениеXML, ИмяОбъекта, СоставОбъекта, УзелОбмена)

	ДеревоОбъекта = ДанныеОбъектаИЗXML(ЧтениеXML, "Справочники", ИмяОбъекта, СоставОбъекта);
	СтрокаИдентификатора = ПолучитьИдентификаторСсылкиИзДереваОбъекта(ДеревоОбъекта);

	СсылкаНаОбъект = ПолучитьСсылку(СтрокаИдентификатора, "Справочники", ИмяОбъекта);
	ОбъектДанных = СсылкаНаОбъект.ПолучитьОбъект();

	Если ОбъектДанных = Неопределено Тогда
		// Создадим новый объект.
		ЭтоГруппа = ПолучитьЗначениеРеквизитаИзДереваОбъекта("IsFolder", ДеревоОбъекта);
		Если ЭтоГруппа<> Неопределено И ЭтоГруппа Тогда
			ОбъектДанных = Справочники[ИмяОбъекта].СоздатьГруппу();
		Иначе
			ОбъектДанных = Справочники[ИмяОбъекта].СоздатьЭлемент();
		КонецЕсли;

		ОбъектДанных.УстановитьСсылкуНового(СсылкаНаОбъект);

	КонецЕсли;

	ЗаполнитьОбъектПоДереву(ОбъектДанных, ДеревоОбъекта, СоставОбъекта, УзелОбмена);

	Возврат ОбъектДанных;

КонецФункции

// Выполняет чтение данных объекта из пакета обмена и отражение этих данных в ИБ.
//
// Параметры:
//  ЧтениеXML - ЧтениеXML - объект, при помощи которого выполняется чтение пакета.
//  ИмяОбъекта - Строка - имя объекта данных, подлежащего чтению.
//  СоставОбъекта - Структура - структура, описывающая состав объекта данных.
//  УзелОбмена - ПланОбменаСсылка.МобильноеПриложениеТорговыйПредставитель- узел плана обмена, для которого получены данные.
//
// Возвращаемое значение:
//  ДокументОбъект - объект, обновленный или созданный по данным пакета обмена.
//
Функция ПрочитатьИИзменитьДокумент(ЧтениеXML, ИмяОбъекта, СоставОбъекта, УзелОбмена)

	ДеревоОбъекта = ДанныеОбъектаИЗXML(ЧтениеXML, "Документы", ИмяОбъекта, СоставОбъекта);

	СтрокаИдентификатора = ПолучитьИдентификаторСсылкиИзДереваОбъекта(ДеревоОбъекта);

	СсылкаНаОбъект = ПолучитьСсылку(СтрокаИдентификатора, "Документы", ИмяОбъекта);
	ОбъектДанных = СсылкаНаОбъект.ПолучитьОбъект();

	Если ОбъектДанных = Неопределено Тогда
		// Создадим новый объект.
		ОбъектДанных = Документы[ИмяОбъекта].СоздатьДокумент();
		ОбъектДанных.УстановитьСсылкуНового(СсылкаНаОбъект);
	КонецЕсли;

	ЗаполнитьОбъектПоДереву(ОбъектДанных, ДеревоОбъекта, СоставОбъекта, УзелОбмена);

	Возврат ОбъектДанных;

КонецФункции

// Выполняет заполнение свойств переданного объекта данных на
// основании считанных из XML  в дерево объекта данных.
//
// Параметры:
//  ОбъектДанных - СправочникОбъект, ДокументОбъект - элемент справочника иди документ.
//  ДеревоОбъекта - ДеревоЗначений - дерево значений, содержащее считанные из пакета обмена данные объекта.
//  СоставОбъекта - Структура - структура, описывающая состав объекта.
//  УзелОбмена - ПланОбменаСсылка.МобильноеПриложениеТорговыйПредставитель - узел плана обмена, для которого получены данные.
//
Процедура ЗаполнитьОбъектПоДереву(ОбъектДанных, ДеревоОбъекта, СоставОбъекта, УзелОбмена)

	// Заполним реквизиты объекта.
	СтрокаРеквизитов = ДеревоОбъекта.Строки.Найти("Реквизиты", "Имя");
	
	СтруктураРеквизитов = СоставОбъекта.Реквизиты;
	СтруктураТабличныхЧастей = СоставОбъекта.ТабличныеЧасти;

	Для Каждого СтрокаРеквизита Из СтрокаРеквизитов.Строки Цикл
		
		// Проверка наличия реквизита в текущей конфигурации.
		Если НЕ СтруктураРеквизитов.Свойство(СтрокаРеквизита.Имя) Тогда
			Продолжить;
		КонецЕсли;

		Если (СтрокаРеквизита.Имя <> "Ref") И (СтрокаРеквизита.Имя <> "Ссылка")
			И (СтрокаРеквизита.Имя <> "IsFolder") И (СтрокаРеквизита.Имя <> "ЭтоГруппа") Тогда 
			// Ссылка проставляется отдельно.
			ЗначениеРеквизита = ПолучитьЗначениеИзXMLСтроки(СтрокаРеквизита.Тип, СтрокаРеквизита.Значение);
			ОбъектДанных[СтрокаРеквизита.Имя] = ЗначениеРеквизита;
		КонецЕсли;

	КонецЦикла;

	// Заполним табличные части объекта.
	СтрокаТабличныхЧастей = ДеревоОбъекта.Строки.Найти("ТабличныеЧасти", "Имя");

	Если СтрокаТабличныхЧастей <> Неопределено Тогда
		// Для каждой строки дерева, соответствующей табличной части, нужно заполнить строки этой ТЧ.
		Для Каждого СтрокаТЧ Из СтрокаТабличныхЧастей.Строки Цикл

			Если НЕ СтруктураТабличныхЧастей.Свойство(СтрокаТЧ.Имя) Тогда
				Продолжить;
			КонецЕсли;
		
			Если НЕ ТребуетсяЗагрузкаДанныхТабличнойЧасти(ТипЗнч(ОбъектДанных),СтрокаТЧ.Имя, УзелОбмена) Тогда
				Продолжить;
			КонецЕсли;
			
			ТабличнаяЧасть = ОбъектДанных[СтрокаТЧ.Имя];
			ТабличнаяЧасть.Очистить();

			// Просматриваем каждую строку табличной части.
			Для Каждого СтрокаТабличнойЧасти Из СтрокаТЧ.Строки Цикл

				НоваяСтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();

				// Заполняем каждый реквизит строки табличной части.
				Для Каждого СтрокаРеквизитаТЧ Из СтрокаТабличнойЧасти.Строки Цикл

					ЗначениеРеквизита = ПолучитьЗначениеИзXMLСтроки(СтрокаРеквизитаТЧ.Тип, СтрокаРеквизитаТЧ.Значение);
					НоваяСтрокаТабличнойЧасти[СтрокаРеквизитаТЧ.Имя] = ЗначениеРеквизита;
					
				КонецЦикла;

			КонецЦикла;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

// Формирует и возвращает дерево объекта, сформированное на основании данных, считанных из XML.
//
// Параметры:
//  ЧтениеXML - ЧтениеXML - объект, при помощи которого производится чтение.
//  ИмяКласса - Строка - имя класса, к которому принадлежит объект (Справочники, Документы и т.д.).
//  ИмяОбъекта - Строка - имя объекта, который читается и для которого требуется сформировать дерево.
//  СоставОбъекта - Структура - структура, описывающая состав объекта.
//
// Возвращаемое значение:
//  ДеревоЗначений - дерево, содержащее прочитанные данные объекта.
//
Функция ДанныеОбъектаИЗXML(ЧтениеXML, ИмяКласса, ИмяОбъекта, СоставОбъекта)

	ДеревоОбъекта = Новый ДеревоЗначений();

	ДеревоОбъекта.Колонки.Добавить("Имя");
	ДеревоОбъекта.Колонки.Добавить("Тип");
	ДеревоОбъекта.Колонки.Добавить("Значение");

	Реквизиты = ДеревоОбъекта.Строки.Добавить();
	Реквизиты.Имя = "Реквизиты";

	ТабличныеЧасти = ДеревоОбъекта.Строки.Добавить();
	ТабличныеЧасти.Имя = "ТабличныеЧасти";
	
	ТекущаяСтрока = Неопределено; // СтрокаДереваЗначений
	ТабличнаяЧасть = Неопределено;  // СтрокаДереваЗначений 
	СтрокаТабличнойЧасти = Неопределено; // СтрокаДереваЗначений

	УровеньВложенности = 1;

	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			УровеньВложенности = УровеньВложенности + 1;
			
			// Читаем элемент.
			Если УровеньВложенности = 2 Тогда

				// Это либо реквизит, либо табличная часть - нужно определить, что именно.
				Если СвойствоЯвляетсяРеквизитом(ИмяКласса, ИмяОбъекта, ЧтениеXML.Имя, СоставОбъекта) Тогда
					ТекущаяСтрока = Реквизиты.Строки.Добавить();
				ИначеЕсли СвойствоЯвляетсяТабличнойЧастью(ИмяКласса, ИмяОбъекта, ЧтениеXML.Имя, СоставОбъекта) Тогда	
					ТекущаяСтрока = ТабличныеЧасти.Строки.Добавить();
					ТабличнаяЧасть = ТекущаяСтрока;
				КонецЕсли;

			ИначеЕсли УровеньВложенности = 3 Тогда

				// Это строка табличной части.
				Если ТабличнаяЧасть <> Неопределено Тогда
					ТекущаяСтрока = ТабличнаяЧасть.Строки.Добавить();
					СтрокаТабличнойЧасти = ТекущаяСтрока;
				КонецЕсли;

			ИначеЕсли УровеньВложенности = 4 Тогда
		
				// Это реквизиты строки табличной части.
				Если СтрокаТабличнойЧасти <> Неопределено Тогда
					ТекущаяСтрока = СтрокаТабличнойЧасти.Строки.Добавить();
				КонецЕсли;

			КонецЕсли;
			
			Если ТекущаяСтрока <> Неопределено Тогда
				
				ТекущаяСтрока.Имя = ЧтениеXML.Имя;
				
				// Читаем атрибуты элемента.
				Пока ЧтениеXML.ПрочитатьАтрибут() Цикл

					Тип = Неопределено;

					// Если указан тип, прочитаем его.
					Если ЧтениеXML.Имя = "xsi:type" Тогда 
						Тип = ПолучитьТипПоСтроке(ЧтениеXML.Значение);
					ИначеЕсли ЧтениеXML.Имя = "xsi:nil" Тогда
						Тип = Неопределено;
					КонецЕсли;
					
					ТекущаяСтрока.Тип = Тип;
					
				КонецЦикла;
				
			КонецЕсли;
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			
			Если ТекущаяСтрока <> Неопределено Тогда

				Если ТекущаяСтрока.Тип = Неопределено Тогда
					
					ЭтоРеквизит = Ложь;

					ИмяТабличнойЧасти = "";
					Если УровеньВложенности = 4 Тогда // Если это реквизит табличной части

						Если ТабличнаяЧасть <> Неопределено Тогда
							ЭтоРеквизит = Истина;
							ИмяТабличнойЧасти = ТабличнаяЧасть.Имя;
						КонецЕсли;

					ИначеЕсли УровеньВложенности = 2 Тогда
						ЭтоРеквизит = СвойствоЯвляетсяРеквизитом(ИмяКласса, ИмяОбъекта, ЧтениеXML.Имя, СоставОбъекта);
					КонецЕсли;

					Если ЭтоРеквизит Тогда
						ТекущаяСтрока.Тип = ПолучитьТипПоМетаданным(ТекущаяСтрока.Имя, ИмяТабличнойЧасти, СоставОбъекта);
					КонецЕсли;

				КонецЕсли;

				Если ТекущаяСтрока.Значение = Неопределено Тогда
					ТекущаяСтрока.Значение = "";
				КонецЕсли;

			КонецЕсли;

			УровеньВложенности = УровеньВложенности - 1;

			Если УровеньВложенности <= 0 Тогда
				ЧтениеXML.Прочитать();
				Возврат ДеревоОбъекта;
			КонецЕсли;
			
		Иначе

			Если ТекущаяСтрока <> Неопределено Тогда
				// Возьмем значение.
				ТекущаяСтрока.Значение = ЧтениеXML.Значение;

				ИмяТабличнойЧасти = "";
				Если УровеньВложенности = 4 Тогда // Если это реквизит табличной части
					Если ТабличнаяЧасть <> Неопределено Тогда
						ИмяТабличнойЧасти = ТабличнаяЧасть.Имя;
					КонецЕсли;
				КонецЕсли;

				Если ТекущаяСтрока.Тип = Неопределено Тогда
					ТекущаяСтрока.Тип = ПолучитьТипПоМетаданным(ТекущаяСтрока.Имя, ИмяТабличнойЧасти, СоставОбъекта);
				КонецЕсли;

			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

	Возврат ДеревоОбъекта;

КонецФункции

// Получает и возвращает значение указанного реквизита, содержащееся в 
// дереве объекта.
//
// Параметры:
//  ИмяРеквизита - Строка - имя реквизита, значение которого требуется получить.
//  ДеревоОбъекта - ДеревоЗначений - дерево значений, содержащее данные объекта.
//
// Возвращаемое значение:
//  Произвольный - Значение реквизита.
//
Функция ПолучитьЗначениеРеквизитаИзДереваОбъекта(ИмяРеквизита, ДеревоОбъекта)

	СтрокаРеквизитов = ДеревоОбъекта.Строки.Найти("Реквизиты", "Имя");
	СтрокаРеквизита = СтрокаРеквизитов.Строки.Найти(ИмяРеквизита, "Имя");

	Если СтрокаРеквизита = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	СтроковоеЗначение = СтрокаРеквизита.Значение;
	Тип = СтрокаРеквизита.Тип;

	Возврат ПолучитьЗначениеИзXMLСтроки(Тип, СтроковоеЗначение);

КонецФункции

// Определяет, является ли указанное свойство реквизитом объекта или нет.
//
// Параметры:
//  ИмяКласса - Строка - имя класса, к которому принадлежит объект (Справочники, Документы и т.д.).
//  ИмяОбъекта - Строка - имя объекта, свойство которого надо проанализировать.
//  СоставОбъекта - Структура - структура, описывающая состав объекта метаданных.
//
// Возвращаемое значение:
//  Булево - результат проверки свойства. Истина - свойство является реквизитом, Ложь - не является.
//
Функция СвойствоЯвляетсяРеквизитом(ИмяКласса, ИмяОбъекта, ИмяСвойства, СоставОбъекта)

	// Сразу проверим стандартные реквизиты.
	Если ИмяКласса = "Справочники" Тогда
		Если ИмяСвойства = "Ref"
			ИЛИ ИмяСвойства = "IsFolder"
			ИЛИ ИмяСвойства = "DeletionMark"
			ИЛИ ИмяСвойства = "Parent"
			ИЛИ ИмяСвойства = "Code"
			ИЛИ ИмяСвойства = "Description"
			ИЛИ ИмяСвойства = "Owner" Тогда

			Возврат Истина;

		КонецЕсли;

	ИначеЕсли ИмяКласса = "Документы" Тогда

		Если ИмяСвойства = "Ref"
			ИЛИ ИмяСвойства = "DeletionMark"
			ИЛИ ИмяСвойства = "Date"
			ИЛИ ИмяСвойства = "Number"
			ИЛИ ИмяСвойства = "Posted" Тогда

			Возврат Истина;

		КонецЕсли;

	КонецЕсли;

	СтруктураРеквизитов = СоставОбъекта["Реквизиты"];

	Возврат СтруктураРеквизитов.Свойство(ИмяСвойства);

КонецФункции

// Определяет, является ли указанное свойство табличной частью объекта или нет.
//
// Параметры:
//  ИмяКласса - Строка - имя класса, к которому принадлежит объект (Справочники, Документы и т.д.).
//  ИмяОбъекта - Строка - имя объекта, свойство которого надо проанализировать.
//  СоставОбъекта - Структура - структура, описывающая состав объекта метаданных.
//
// Возвращаемое значение:
//  Булево - результат проверки. Истина - свойство является табличной частью, Ложь - не является.
//
Функция СвойствоЯвляетсяТабличнойЧастью(ИмяКласса, ИмяОбъекта, ИмяСвойства, СоставОбъекта)

	// Сразу проверим стандартные реквизиты.
	Если ИмяКласса = "Справочники" ИЛИ ИмяКласса = "Документы" Тогда
		СтруктураТабличныхЧастей = СоставОбъекта["ТабличныеЧасти"];
		Возврат СтруктураТабличныхЧастей.Свойство(ИмяСвойства);
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

// Получает и возвращает ссылку на объект по строковому уникальному идентификатору.
//
// Параметры:
//  СтрокаИдентификатора - Строка - строка уникального идентификатора ссылки.
//  ИмяКласса - Строка - имя класса, к которому принадлежит объект (Справочники, Документы  и т.д.).
//  ИмяОбъекта - Строка - имя объекта метаданных, ссылку для которого требуется получить.
//
// Возвращаемое значение:
//  СправочникСсылка, ДокументСсылка - Ссылка на объект.
//
Функция ПолучитьСсылку(СтрокаИдентификатора, ИмяКласса, ИмяОбъекта)

	Если СтрокаИдентификатора = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;		
	
	Если ИмяКласса = "Справочники" Тогда
		
		СсылкаНаОбъект = XMLЗначение(Тип("СправочникСсылка." + ИмяОбъекта), СтрокаИдентификатора);
				
	ИначеЕсли ИмяКласса = "Документы" Тогда
		
		СсылкаНаОбъект = XMLЗначение(Тип("ДокументСсылка." + ИмяОбъекта), СтрокаИдентификатора);
			
	КонецЕсли;
	
	Возврат СсылкаНаОбъект;

КонецФункции

// Получает и возвращает строковый идентификатор ссылки из дерева объекта.
//
// Параметры:
//  ДеревоОбъекта - ДеревоЗначений - дерево значений, содержащее данные объекта.
//
// Возвращаемое значение:
//  Строка - Строка-идентификатор ссылки.
//
Функция ПолучитьИдентификаторСсылкиИзДереваОбъекта(ДеревоОбъекта)

	СтрокаРеквизитов = ДеревоОбъекта.Строки.Найти("Реквизиты", "Имя");
	СтрокаСсылки = СтрокаРеквизитов.Строки.Найти("Ref", "Имя");

	Возврат СтрокаСсылки.Значение;

КонецФункции

// Получает и возвращает значение, считанное из XML,
// в виде значение требуемого типа.
//
// Параметры:
//  Тип - Тип - Тип для значения.
//  СтрокаЗначения - Строка - значение строкой, полученное из XML.
//
// Возвращаемое значение:
//  Произвольный - Значение, полученное из XML-строки.
//
Функция ПолучитьЗначениеИзXMLСтроки(Тип, СтрокаЗначения)

	Если Тип = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат XMLЗначение(Тип, СтрокаЗначения);
	КонецЕсли;

КонецФункции

// Получает и возвращает тип для указанного реквизита объекта метаданных.
//
// Параметры:
//  ИмяРеквизита - Строка - имя реквизита, тип которого требуется получить.
//  ИмяТабличнойЧасти - Строка - имя табличной части, которой принадлежит реквизит.
//  СоставОбъекта - Структура - структура, содержащая описание объекта.
//
// Возвращаемое значение:
//  Тип - тип реквизита.
//
Функция ПолучитьТипПоМетаданным(ИмяРеквизита, ИмяТабличнойЧасти, СоставОбъекта)

	Если ПустаяСтрока(ИмяТабличнойЧасти) Тогда
		// Это реквизит объекта.
		СтруктураРеквизитов = СоставОбъекта["Реквизиты"];
		СтруктураОписанияРеквизита = СтруктураРеквизитов[ИмяРеквизита];
		Тип = СтруктураОписанияРеквизита["Тип"];
	Иначе
		 // Это реквизит табличной части.
		СтруктураТабличныхЧастей = СоставОбъекта["ТабличныеЧасти"];
		СтруктураОписанияТабличнойЧасти = СтруктураТабличныхЧастей[ИмяТабличнойЧасти];
		СтруктураРеквизитовТабличнойЧасти = СтруктураОписанияТабличнойЧасти["СтруктураРеквизитов"];
		СтруктураОписанияРеквизита = СтруктураРеквизитовТабличнойЧасти[ИмяРеквизита];
		Тип = СтруктураОписанияРеквизита.Тип;
	КонецЕсли;

	Возврат Тип;

КонецФункции

// Получает и возвращает тип на основании строки типа, полученной из XML.
//
// Параметры:
//  XMLСтрокаТипа - Строка - строковое описание типа.
//
// Возвращаемое значение:
//  Тип - тип объекта.
//
Функция ПолучитьТипПоСтроке(XMLСтрокаТипа)

	ИмяКласса = "";
	ИмяОбъекта = "";
	ОпределитьПоТипуДанныхКлассИИмяТипа(XMLСтрокаТипа, ИмяКласса, ИмяОбъекта);

	Если ПустаяСтрока(ИмяКласса) Тогда

		Возврат Неопределено;
	
	ИначеЕсли ИмяКласса = "CATALOGREF" Тогда

		Возврат Тип("СправочникСсылка." + ИмяОбъекта);

	ИначеЕсли ИмяКласса = "DOCUMENTREF" Тогда

		Возврат Тип("ДокументСсылка." + ИмяОбъекта);

	ИначеЕсли ИмяКласса = "ENUMREF" Тогда

		Возврат Тип("ПеречислениеСсылка." + ИмяОбъекта);

	ИначеЕсли ИмяКласса = "XSD:STRING" Тогда

		Возврат Тип("Строка");

	ИначеЕсли ИмяКласса = "XSD:DECIMAL" Тогда

		Возврат Тип("Число");
		
	ИначеЕсли ИмяКласса = "XSD:DATETIME" Тогда

		Возврат Тип("Дата");
		
	ИначеЕсли ИмяКласса = "XSD:BOOLEAN" Тогда

		Возврат Тип("Булево");
		
	ИначеЕсли ИмяКласса = "XSI:NIL" Тогда

		Возврат Неопределено;
		
	ИначеЕсли ИмяКласса = "XSD:BASE64BINARY" Тогда

		Возврат Тип("ДвоичныеДанные");
		
	ИначеЕсли ИмяКласса = "V8:VALUESTORAGE" Тогда	
		
		Возврат Тип("ХранилищеЗначения");
						
	Иначе
		#Если ВнешнееСоединение Тогда
		ТекстСообщения = НСтр("ru = 'Неизвестный тип данных в пакете обмена'");
		ВызватьИсключение(ТекстСообщения);
		#КонецЕсли
	КонецЕсли;

КонецФункции

// Определяет по типу данных, полученному из XML, имя соответствующего класса и объекта.
//
// Параметры:
//  ТипДанных - Строка - строка типа данных.
//  ИмяКласса - Строка - имя класса объекта (Справочники, Документы и т.д.).
//  ИмяОбъекта - Строка - имя конкретного объекта метаданных.
//
Процедура ОпределитьПоТипуДанныхКлассИИмяТипа(Знач ТипДанных, ИмяКласса, ИмяОбъекта)

	ПозицияТочки = СтрНайти(ТипДанных, ".");
	ИмяТипаДанных = "";
	Если ПозицияТочки > 0 Тогда
			
		ИмяКласса = Врег(Сред(ТипДанных, 1, ПозицияТочки - 1)); 
		ИмяОбъекта = Сред(ТипДанных, ПозицияТочки + 1);
			
	Иначе
		// тип не удалось определить.
		ИмяКласса = Врег(ТипДанных);
			
	КонецЕсли;

КонецПроцедуры

// Анализирует, требуется ли загрузка данных указанной табличной части.
//
// Параметры:
//  ТипОбъекта - Тип - тип объекта, которому принадлежит табличная часть.
//  ИмяТабличнойЧасти - Строка - имя табличной части, необходимость выгрузки которой нужно проверить.
//  УзелОбмена - ПланОбменаСсылка.МобильноеПриложениеТорговыйПредставитель - узел плана обмена, для которого выгружаются данные.
//
// Возвращаемое значение:
//  Булево - результат проверки. Истина - выгрузка требуется, Ложь - не требуется.
//
Функция ТребуетсяЗагрузкаДанныхТабличнойЧасти(ТипОбъекта, ИмяТабличнойЧасти, УзелОбмена)
	
	Если ТипОбъекта = Тип("СправочникОбъект.Партнеры") И ИмяТабличнойЧасти = "КонтактнаяИнформация" Тогда
		ИспользованиеКонтактнойИнформации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УзелОбмена, "ИспользованиеКонтактнойИнформации");
		Возврат (ИспользованиеКонтактнойИнформации = Перечисления.ИспользованиеКонтактнойИнформацииМобильнымПриложением.ИспользуетсяДляЧтенияИЗаписи);
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ЗаданиеТорговомуПредставителю") 
		И (ИмяТабличнойЧасти = "ДолгиПоЗаказам") ИЛИ (ИмяТабличнойЧасти = "РасшифровкаДебиторскойЗадолженности") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Определяет, требуется ли для указанного объекта регистрировать изменения в узле-отправителе.
//
// Параметры:
//  ИмяКласса - Строка - имя класса, к которому принадлежит объект (Справочники, Документы  и т.д.).
//  ИмяОбъекта - Строка - имя объекта метаданных, для которого требуется проверка.
//
// Возвращаемое значение:
//  Булево - Признак необходимости регистрации изменений.
//
Функция ТребуетсяЗарегистрироватьИзмененияДляУзлаОтправителя(ИмяКласса, ИмяОбъекта, ОбъектЧтения)
	
	Если ИмяКласса = "DOCUMENTOBJECT" Тогда
		Если ИмяОбъекта = "ЗаданиеТорговомуПредставителю" Тогда
			Если ОбъектЧтения.Статус = Перечисления.СтатусыЗаданийТорговымПредставителям.НеПодготовлено Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииДляЗаполненияИОбработкиОбъектовПолученныхИзПакетаОбмена

// Выполняет заполнение полученного при обмене объекта - 
// устанавливает при необходимости значения незаполненных реквизитов объекта.
//
// Параметры:
//  Объект - СправочникОбъект, ДокументОбъект - записываемый объект.
//  ИмяКласса - Строка - имя класса, к которому принадлежит объект (Справочники, Документы).
//  ИмяОбъекта - Строка - имя записываемого объекта, как оно определено в метаданных.
//  УзелОбмена - ПланОбменаСсылка.МобильноеПриложениеТорговыйПредставитель - узел обмена, от которого получены данные.
//
Процедура ОбработатьЗаполнениеНовогоОбъекта(Объект, ИмяКласса, ИмяОбъекта, УзелОбмена)

	// Заполнение имеет смысл проводить только для новых объектов.
	Если Не Объект.ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;

	Если ИмяКласса = "Справочники" Тогда
		ОбработатьЗаполнениеСправочника(Объект, ИмяОбъекта, УзелОбмена);
	ИначеЕсли ИмяКласса = "Документы" Тогда
		ОбработатьЗаполнениеДокумента(Объект, ИмяОбъекта, УзелОбмена);
	КонецЕсли;

КонецПроцедуры

// Выполняет заполнение полученного при обмене элемента (группы) справочника -
// устанавливает при необходимости значения незаполненных реквизитов объекта.
//
// Параметры:
//  Объект - СправочникОбъект - записываемый объект.
//  ИмяОбъекта - Строка - имя записываемого объекта, как оно определено в метаданных.
//  УзелОбмена - ПланОбменаСсылка.МобильноеПриложениеТорговыйПредставитель - узел обмена, от которого получены данные.
//
Процедура ОбработатьЗаполнениеСправочника(Объект, ИмяОбъекта, УзелОбмена)

	Если ИмяОбъекта = "Партнеры" Тогда
		ОбработатьЗаполнениеПартнера(Объект, УзелОбмена);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет заполнение полученного при обмене документа -
// устанавливает при необходимости значения незаполненных реквизитов объекта.
//
// Параметры:
//  Объект - СправочникОбъект, ДокументОбъект - записываемый объект.
//  ИмяОбъекта - Строка - имя записываемого объекта, как оно определено в метаданных.
//  УзелОбмена - ПланОбменаСсылка.МобильноеПриложениеТорговыйПредставитель - узел обмена, от которого получены данные.
//
Процедура ОбработатьЗаполнениеДокумента(Объект, ИмяОбъекта, УзелОбмена)

	Если ИмяОбъекта = "ЗаказКлиента" Тогда
		ОбработатьЗаполнениеЗаказаКлиента(Объект, УзелОбмена);
	ИначеЕсли ИмяОбъекта = "АвансовыйОтчет" Тогда
		ОбработатьЗаполнениеАвансовогоОтчета(Объект, УзелОбмена);
	КонецЕсли;

КонецПроцедуры

// Выполняет заполнение партнера, полученного при обмене.
//
// Параметры:
//  Объект - СправочникОбъект.Партнеры - справочник-объект партнеры.
//  УзелОбмена - ПланОбменаСсылка.МобильноеПриложениеТорговыйПредставитель - узел обмена, от которого получены данные.
//
Процедура ОбработатьЗаполнениеПартнера(Объект, УзелОбмена)
	
	Объект.Клиент = Истина;

КонецПроцедуры

// Выполняет заполнение заказа клиента, полученного при обмене.
//
// Параметры:
//  Объект - ДокументОбъект.ЗаказКлиента - документ-объект ЗаказКлиента.
//  УзелОбмена - ПланОбменаСсылка.МобильноеПриложениеТорговыйПредставитель - узел обмена, от которого получены данные.
//
Процедура ОбработатьЗаполнениеЗаказаКлиента(Объект, УзелОбмена)
	
	Если НЕ ЗначениеЗаполнено(Объект.Статус) Тогда
		Объект.Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
	КонецЕсли;

	Объект.Приоритет = ЗначениеНастроекПовтИсп.ПолучитьПриоритетПоУмолчанию(Объект.Приоритет);

	Если НЕ ЗначениеЗаполнено(Объект.Менеджер) Тогда
		Пользователь = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УзелОбмена, "Пользователь");
		Объект.Менеджер = Пользователь;
	КонецЕсли;
	
	ЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(Объект, "Товары");
	Объект.СуммаДокумента = Объект.ПолучитьСуммуЗаказанныхСтрок();	

КонецПроцедуры

// Выполняет заполнение авансового отчета, полученного при обмене.
//
// Параметры:
//  Объект - ДокументОбъект.АвансовыйОтчет -документ-объект АвансовыйОтчет.
//  УзелОбмена - ПланОбменаСсылка.МобильноеПриложениеТорговыйПредставитель - узел обмена, от которого получены данные.
//
Процедура ОбработатьЗаполнениеАвансовогоОтчета(Объект, УзелОбмена)
	
	Если НЕ ЗначениеЗаполнено(Объект.ПодотчетноеЛицо) Тогда
		ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УзелОбмена, "Пользователь.ФизическоеЛицо");
		Объект.ПодотчетноеЛицо = ФизическоеЛицо;
	КонецЕсли;

КонецПроцедуры

// Выполняет действия по обработке записанных объектов.
//
// Параметры:
//  Объект - ДокументОбъект - записанный объект.
//
Процедура ОбработатьЗаписанныйОбъект(Объект, СтруктураПараметровНастройкиОбмена, УзелОбмена)
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ЗаданиеТорговомуПредставителю") Тогда
		Если Объект.Статус = Перечисления.СтатусыЗаданийТорговымПредставителям.НеПодготовлено Тогда
			ЗаполнитьЗадание(Объект, УзелОбмена);
		Иначе
			Если СтруктураПараметровНастройкиОбмена.АвтоматическиСоздаватьЗаказыПоЗаданию Тогда
				СоздатьЗаказКлиентаПоЗаданию(Объект);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Создает заказ на основании задания торговому представителю.
//
// Параметры:
//  Задание - ДокументСсылка.ЗаданиеТорговомуПредставителю - ссылка на задание, по которому требуется создать заказ.
//
Процедура СоздатьЗаказКлиентаПоЗаданию(Задание)
	
	// Для заданий, по которым уже существуют заказы, запись новых в автоматическом режиме не допускается.
	Если ПоЗаданиюИмеютсяЗаказы(Задание.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Задание.Товары.Итог("Количество") = 0 Тогда
		Возврат;
	КонецЕсли;
		
	ЗаказКлиента = Документы.ЗаказКлиента.СоздатьДокумент();
	ЗаказКлиента.Заполнить(Задание.Ссылка);
	ЗаказКлиента.Дата = ТекущаяДатаСеанса();
	ЗаказКлиента.Менеджер = Задание.ТорговыйПредставитель;
	
	ЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(ЗаказКлиента, "Товары");
	ЗаказКлиента.СуммаДокумента = ЗаказКлиента.ПолучитьСуммуЗаказанныхСтрок();
	
	ЗаказКлиента.Записать();
	
	// После записи заказа система пробует его провести.
	Попытка
		ЗаказКлиента.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
		
		ТекстСообщения = ИнформацияОбОшибке().Описание;
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка при записи заказа клиента'", КодОсновногоЯзыка),
								УровеньЖурналаРегистрации.Ошибка,
								,
								,
								ТекстСообщения);
	КонецПопытки;	
	
КонецПроцедуры

// Анализирует, имеются ли заказы по указанному заданию.
//
// Параметры:
//  Задание - ДокументСсылка.ЗаданиеТорговомуПредставителю - задание, по которому проверяется наличие заказов.
//
// Возвращаемое значение:
//  Булево - результат проверки. Истина - заказы имеются, Ложь - нет.
//
Функция ПоЗаданиюИмеютсяЗаказы(Задание)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказКлиента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.ДокументОснование = &Задание
	|	И (НЕ ЗаказКлиента.ПометкаУдаления)"
	;
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Задание", Задание);
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

// Выполняет автоматическое заполнение задания.
//
// Параметры:
//  Задание - ДокументОбъект.ЗаданиеТорговомуПредставителю - Документ "ЗаданиеТорговомуПредставителю", который необходимо заполнить.
//  УзелОбмена - ПланОбменаСсылка.МобильноеПриложениеТорговыйПредставитель -узел плана обмена, от которого получен документ, требующий заполнения.
//
Процедура ЗаполнитьЗадание(Задание, УзелОбмена)

	Задание.ЗаполнитьДокументПоДаннымСоглашения();
	Пользователь = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УзелОбмена, "Пользователь");

	Задание.Куратор = Пользователь;
	Задание.ТорговыйПредставитель = Пользователь;
	
	Если Константы.ДетализироватьЗаданияТорговымПредставителямПоНоменклатуре.Получить() Тогда
		Задание.Статус = Перечисления.СтатусыЗаданийТорговымПредставителям.КОтработке;
	КонецЕсли;
	
	Попытка
		Задание.Записать();
	Исключение
		КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
		
		ТекстСообщения = ИнформацияОбОшибке().Описание;
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка при записи задания торговому представителю'", КодОсновногоЯзыка),
								УровеньЖурналаРегистрации.Ошибка,
								,
								,
								ТекстСообщения);
	КонецПопытки;

КонецПроцедуры

// Выполняет заполнение указанного задания по данным истории продаж.
//
// Параметры:
//  Задание - ДокументОбъект.ЗаданиеТорговомуПредставителю - Задание, которое требуется заполнить.
//  СтруктураПараметровОбменаДанными - Структура - структура, содержащая параметры обмена данными.
//
Процедура ЗаполнитьЗаданиеДаннымиИсторииПродаж(Задание, СтруктураПараметровОбменаДанными)
	
	ЗаполнятьЗаданияСДетализациейПоХарактеристикам = Ложь;
	НачалоПериодаАнализаИсторииПродаж = '00010101000000';
	КонецПериодаАнализаИсторииПродаж = '00010101000000';
	
	Если Константы.ИспользоватьХарактеристикиНоменклатуры.Получить() Тогда
		Если СтруктураПараметровОбменаДанными.Свойство("ЗаполнятьЗаданияСДетализациейПоХарактеристикам") Тогда
			ЗаполнятьЗаданияСДетализациейПоХарактеристикам = СтруктураПараметровОбменаДанными["ЗаполнятьЗаданияСДетализациейПоХарактеристикам"];
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураПараметровОбменаДанными.Свойство("НачалоПериодаАнализаИсторииПродаж") Тогда
		НачалоПериодаАнализаИсторииПродаж = СтруктураПараметровОбменаДанными["НачалоПериодаАнализаИсторииПродаж"];
	КонецЕсли;
	
	Если СтруктураПараметровОбменаДанными.Свойство("КонецПериодаАнализаИсторииПродаж") Тогда
		КонецПериодаАнализаИсторииПродаж = СтруктураПараметровОбменаДанными["КонецПериодаАнализаИсторииПродаж"];
	КонецЕсли;
	
	ОписаниеПериода = Новый Структура;
	ОписаниеПериода.Вставить("Период", "день");
	ОписаниеПериода.Вставить("НачалоПериода", НачалоПериодаАнализаИсторииПродаж);
	ОписаниеПериода.Вставить("КонецПериода", КонецПериодаАнализаИсторииПродаж);
		
	Задание.ЗаполнитьПоИсторииПродаж(ОписаниеПериода, ЗаполнятьЗаданияСДетализациейПоХарактеристикам);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииДляУправленияРегистрациейИзмененийИВыборкиДанных

// Выбирает и возвращает данные, подлежащие регистрации изменения, исходя из схемы обмена,
// определенной для узла.
//
// Параметры:
//  УзелОбмена - ПланОбменаСсылка.МобильноеПриложениеТорговыйПредставитель -узел плана обмена, по которому регистрируются изменения.
//  СтруктураОписанияОбъекта - Структура - структура, в которой хранится описание объекта метаданных.
//  СтруктураНастроекОтбора - Структура - структура, содержащая настройки обмена.
//  СтруктураПараметровНастройкиОбмена - Структура - структура, содержащая параметры настройки обмена.
//
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - Выборка данных, подлежащих регистрации изменений.
//
Функция ВыбратьСсылкиДляРегистрацииИзменений(УзелОбмена, СтруктураОписанияОбъекта, СтруктураНастроекОтбора, СтруктураПараметровНастройкиОбмена)
	
	ТекстЗапроса = ПолучитьТекстЗапросаДляВыборкиСсылочныхДанных(СтруктураОписанияОбъекта, СтруктураПараметровНастройкиОбмена);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Ссылка", Неопределено);
	СтруктураПараметров.Вставить("Изменения", Ложь);
	СтруктураПараметров.Вставить("УзелОбмена", Неопределено);
	СтруктураПараметров.Вставить("НомерСообщения", Неопределено);
	СтруктураПараметров.Вставить("ИспользоватьДополнительныеОтборы", Ложь);
	
	Запрос = ПолучитьЗапросДляОбъекта(ТекстЗапроса,
									  СтруктураОписанияОбъекта,
									  СтруктураНастроекОтбора,
									  СтруктураПараметровНастройкиОбмена,
									  СтруктураПараметров);

	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выбрать();

КонецФункции

// Формирует и возвращает таблицу значений, содержащую записи регистра сведений, отобранные по условиям схемы обмена.
//
// Параметры:
//  СтруктураОписанияОбъекта - Структура - структура, содержащая описание объекта.
//  СтруктураНастроекОтбора -  Структура - Структура, включающая настройки отбора по схеме обмена.
//  МассивПолей - Массив - массив, содержащий имена полей регистра.
//  СтруктураПараметровНастройкиОбмена - Структура - структура, содержащая параметры настройки обмена.
//  УзелОбмена - ПланОбменаСсылка.МобильноеПриложениеТорговыйПредставитель -узел обмена, для которого выбираются данные.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица значений, содержащая записи регистра сведений, отобранные по условиям схемы обмена.
//
Функция ЗаписиРегистраСведений(ОписаниеОбъекта, НастройкиОтбора, Поля, ПараметрыНастройкиОбмена, УзелОбмена)

	// Выбираем данные с учетом отборов, определенных в настройках обмена.
	ТекстЗапроса = ПолучитьТекстЗапросаДляВыборкиПолейРегистраСведений(ОписаниеОбъекта.ИмяОбъекта,
																		ОписаниеОбъекта.ИмяТаблицы,
																		Поля,
																		Ложь);
																		
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Ссылка", Неопределено);
	СтруктураПараметров.Вставить("Изменения", Ложь);
	СтруктураПараметров.Вставить("УзелОбмена", УзелОбмена);
	СтруктураПараметров.Вставить("НомерСообщения", Неопределено);
	СтруктураПараметров.Вставить("ИспользоватьДополнительныеОтборы", Истина);
	
	Запрос = ПолучитьЗапросДляОбъекта(ТекстЗапроса,
									  ОписаниеОбъекта,
									  НастройкиОтбора,
									  ПараметрыНастройкиОбмена,
									  СтруктураПараметров);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

// Формирует и возвращает набор записей регистра сведений, сформированный из переданных данных.
//
// Параметры:
//  ИмяОбъекта - Строка - имя регистра сведений.
//  Комбинация ключей - СтрокаТаблицыЗначений - строка таблицы значений, в свойствах которой - значения полей набора записей.
//  МассивСтрокТаблицыЗаписей - Массив - массив, содержащий строки таблицы значений с записями регистра.
//  МассивКлючевыхПолей - Массив - массив, содержащий имена ключевых полей регистра сведений.
//  МассивПолей - Массив - массив, содержащий имена полей регистра сведений.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица значений, содержащая записи регистра сведений, отобранные по условиям схемы обмена.
//
Функция СформироватьНаборЗаписейДляВыгрузки(ИмяОбъекта, КомбинацияКлючей, МассивСтрокТаблицыЗаписей, МассивКлючевыхПолей, МассивПолей, МассивВыбранныхПолей)

	НаборЗаписей = РегистрыСведений[ИмяОбъекта].СоздатьНаборЗаписей();

	Для Каждого КлючевоеПоле Из МассивКлючевыхПолей Цикл
		Если МассивВыбранныхПолей.Найти(КлючевоеПоле) = Неопределено Тогда
			ТипИзмерения = Метаданные.РегистрыСведений[ИмяОбъекта].Измерения[КлючевоеПоле].Тип;
			ЗначениеОтбора = ТипИзмерения.ПривестиЗначение();
			НаборЗаписей.Отбор[КлючевоеПоле].Установить(ЗначениеОтбора, Истина);
		Иначе
			НаборЗаписей.Отбор[КлючевоеПоле].Установить(КомбинацияКлючей[КлючевоеПоле], Истина);
		КонецЕсли;
	КонецЦикла;

	Для Каждого СтрокаТаблицыЗаписей Из МассивСтрокТаблицыЗаписей Цикл
		Запись = НаборЗаписей.Добавить();
		Для Каждого Поле Из МассивПолей Цикл
			Попытка
				Запись[Поле] = СтрокаТаблицыЗаписей[Поле];
			Исключение
				КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
		
				ТекстСообщения = ИнформацияОбОшибке().Описание;
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка при формировании пакета обмена'", КодОсновногоЯзыка),
								УровеньЖурналаРегистрации.Ошибка,
								,
								,
								ТекстСообщения);
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;

	Возврат НаборЗаписей;

КонецФункции

// Формирует и возвращает таблицу значений, в строках которой содержатся уникальные комбинации
// значений полей регистра сведений, на основании которых можно задавать отборы для наборов записей.
//
// Параметры:
//  СтруктураОписанияОбъекта - Структура - структура, содержащая описание объекта метаданных (Имя, имя таблицы и т.д.).
//  СтруктураНастроекОтбора - Структура - структура, содержащая настройки отбора.
//  СтруктураПараметровНастройкиОбмена - Структура - структура, содержащая параметры настройки обмена.
//  Изменения - Булево - признак того, что выбираются только изменения по таблице изменений.
//  НомерСообщения - Число - номер сообщения обмена, в рамках которого ведется выборка данных.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица значений, содержащая уникальные наборы значений полей регистра сведений.
//
Функция КлючиНабораЗаписей(ОписаниеОбъекта, НастройкиОтбора, Поля, ПараметрыНастройкиОбмена, Изменения = Ложь, УзелОбмена = Неопределено, НомерСообщения = Неопределено)

	ТекстЗапроса = ПолучитьТекстЗапросаДляВыборкиПолейРегистраСведений(ОписаниеОбъекта.ИмяОбъекта,
																		ОписаниеОбъекта.ИмяТаблицы,
																		Поля,
																		Изменения,
																		НомерСообщения);
																		
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Ссылка", Неопределено);
	СтруктураПараметров.Вставить("Изменения", Изменения);
	СтруктураПараметров.Вставить("УзелОбмена", УзелОбмена);
	СтруктураПараметров.Вставить("НомерСообщения", НомерСообщения);
	СтруктураПараметров.Вставить("ИспользоватьДополнительныеОтборы", Ложь);
	
	Запрос = ПолучитьЗапросДляОбъекта(ТекстЗапроса,
									  ОписаниеОбъекта,
									  НастройкиОтбора,
									  ПараметрыНастройкиОбмена,
									  СтруктураПараметров);

	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();

КонецФункции

// Формирует и возвращает набор записей для указанного регистра сведений.
// При этом отбор для набора записей устанавливается по указанным значениям комбинации полей отбора.
//
// Параметры:
//  СтруктураОписанияОбъекта - Структура - структура, содержащая описание объекта метаданных.
//  КомбинацияКлючей - СтрокаТаблицыЗначений - строка таблицы значений, содержащая значения полей отбора.
//  МассивПолей - Массив - массив, содержащий имена полей регистра, по которым устанавливается отбор.
//
// Возвращаемое значение:
//  РегистрСведенийНаборЗаписей - Набор записей с установленным отборам.
//
Функция ПолучитьНаборЗаписейРегистраСведенийПоКомбинацииКлючей(СтруктураОписанияОбъекта, КомбинацияКлючей, МассивПолей, МассивВыбранныхПолей)

	НаборЗаписей = РегистрыСведений[СтруктураОписанияОбъекта.ИмяОбъекта].СоздатьНаборЗаписей();
	
	Для Каждого Поле Из МассивПолей Цикл

		ЭлементОтбора = НаборЗаписей.Отбор.Найти(Поле);
		Если ЭлементОтбора <> Неопределено Тогда
			Если МассивВыбранныхПолей.Найти(Поле) = Неопределено Тогда
				ТипИзмерения = Метаданные.РегистрыСведений[СтруктураОписанияОбъекта.ИмяОбъекта].Измерения[Поле].Тип;
				ЗначениеОтбора = ТипИзмерения.ПривестиЗначение();
				ЭлементОтбора.Установить(ЗначениеОтбора, Истина);
			Иначе
				ЭлементОтбора.Установить(КомбинацияКлючей[Поле], Истина);
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат НаборЗаписей;

КонецФункции

// Формирует и возвращает текст запроса по данным объекта определенного вида с учетом
// полей, на которые будет налагаться отбор.
//
// Параметры:
// СтруктураОписанияОбъекта - Структура - структура, содержащая описание объекта.
//  СтруктураПараметровНастройкиОбмена - Структура - структура, содержащая параметры настройки обмена.
//
// Возвращаемое значение:
//  Строка - Сформированный текст запроса.
//
Функция ПолучитьТекстЗапросаДляВыборкиСсылочныхДанных(СтруктураОписанияОбъекта, СтруктураПараметровНастройкиОбмена)

	// Для справочников и документов.
	ИмяКласса = СтруктураОписанияОбъекта.ИмяКласса;
	ИмяОбъекта = СтруктураОписанияОбъекта.ИмяОбъекта;
	ИмяТаблицы = СтруктураОписанияОбъекта.ИмяТаблицы;

	МассивПолейОтбора = ОбменДаннымиСМобильнымиПриложениямиСобытия.ПоляОтбораДляОбъекта(ИмяКласса, ИмяОбъекта);

	ТекстЗапроса = ПолучитьТекстЗапросаДляОбъекта(ИмяОбъекта, ИмяТаблицы, МассивПолейОтбора, СтруктураПараметровНастройкиОбмена);

	Если ТекстЗапроса <> "" Тогда
		Возврат ТекстЗапроса;
	КонецЕсли;
	Как = " КАК "; //@Query-part
	НачалоЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ "; //@Query-part
	ТекстЗапроса = НачалоЗапроса + ИмяОбъекта + ".Ссылка ИЗ " + ИмяТаблицы + Как
	 + ИмяОбъекта + " ГДЕ НЕ " + ИмяОбъекта + ".ПометкаУдаления ";

	ДобавитьПоляОтбораВТекстЗапроса(ТекстЗапроса, МассивПолейОтбора);
	
	Возврат ТекстЗапроса;

КонецФункции

// Формирует и возвращает текст запроса для выборки полей регистра сведений.
// При этом выбираются различные комбинации указанных полей.
//
// Параметры:
//  ИмяОбъекта - Строка - имя регистра сведений.
//  ИмяТаблицы - Строка - Имя таблицы, из которой производится выборка.
//  МассивПолей - Массив - массив, содержащий имена полей регистра, подлежащих выборке.
//  Изменения - Булево - признак того, что выбираются только изменения по таблице изменений.
//  НомерСообщения - Число - номер сообщения обмена. Используется при запросе по таблицам изменений.
//
// Возвращаемое значение:
//  Строка - Сформированный текст запроса.
//
Функция ПолучитьТекстЗапросаДляВыборкиПолейРегистраСведений(ИмяОбъекта, ИмяТаблицы, МассивПолей, Изменения = Ложь, НомерСообщения = Неопределено)
	
	ТекстЗапроса = ПолучитьТекстЗапросаДляРегистра(ИмяОбъекта, ИмяТаблицы, МассивПолей, Изменения, НомерСообщения);

	Если ТекстЗапроса <> "" Тогда
		Возврат ТекстЗапроса;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&ПоляЗапроса
	|ИЗ
	|	&ИмяТаблицы КАК Таблица"
	;
	
	СтрокаПолей = "";
	
	КоличествоПолей = МассивПолей.Количество();

	Если КоличествоПолей > 0 Тогда	

		Индекс = 0;

		Для Каждого Поле Из МассивПолей Цикл
			
			СтрокаПолей = СтрокаПолей + "Таблица." + Поле;

			Если Индекс < КоличествоПолей-1 Тогда
				СтрокаПолей = СтрокаПолей + ",";
			КонецЕсли;	
			
			Индекс = Индекс + 1;
			
		КонецЦикла;

	КонецЕсли;

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляЗапроса", СтрокаПолей);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяТаблицы", ИмяТаблицы);
	
	Если Изменения Тогда
		МассивПолейОтбора = Новый Массив();
		МассивПолейОтбора.Добавить("Узел");
		
		Если НомерСообщения <> Неопределено Тогда
			МассивПолейОтбора.Добавить("НомерСообщения");
		КонецЕсли;	
	Иначе
		МассивПолейОтбора = ОбменДаннымиСМобильнымиПриложениямиСобытия.ПоляОтбораДляОбъекта("РегистрыСведений", ИмяОбъекта);
	КонецЕсли;
	
	ДобавитьПоляОтбораВТекстЗапроса(ТекстЗапроса, МассивПолейОтбора);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Формирует и возвращает текст запроса для выборки данных конкретного объекта.
//
// Параметры:
//  ИмяОбъекта - Строка - имя объекта, по которому необходимо сформировать текст запроса.
//  ИмяТаблицы - Строка - имя таблицы данных, по которой необходимо сформировать текст запроса.
//  МассивПолейОтбора - Массив - массив, содержащий имена полей, которые могут участвовать в отборе.
//  СтруктураПараметровНастройкиОбмена - Структура - структура, содержащая параметры настройки обмена.
//
// Возвращаемое значение:
//  Строка - Текст запроса, если он определен для объекта. В противном случае возвращается пустая строка - при этом будет
//  использован "стандартный" текст запроса по таблице, без дополнительных условий.
//
Функция ПолучитьТекстЗапросаДляОбъекта(ИмяОбъекта, ИмяТаблицы, МассивПолейОтбора, СтруктураПараметровНастройкиОбмена)

	ТекстЗапроса = "";
	
	Если ИмяТаблицы = "Справочник.Партнеры" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Партнеры.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Партнеры КАК Партнеры
		|ГДЕ
		|	Партнеры.Клиент
		|	И Партнеры.ОбслуживаетсяТорговымиПредставителями
		|	И (НЕ Партнеры.ПометкаУдаления)"
		;
		
	ИначеЕсли ИмяТаблицы = "Справочник.Организации" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)"
		;
		
	ИначеЕсли ИмяТаблицы = "Справочник.ВидыКонтактнойИнформации" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВидыКонтактнойИнформации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|ГДЕ
		|	(ВидыКонтактнойИнформации.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.СправочникПартнеры))
		|			ИЛИ ВидыКонтактнойИнформации.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.СправочникКонтактныеЛицаПартнеров)))
		|	И (НЕ ВидыКонтактнойИнформации.ПометкаУдаления)"
		;	
		
	ИначеЕсли ИмяТаблицы = "Справочник.ВидыЦен" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВидыЦен.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВидыЦен КАК ВидыЦен
		|ГДЕ
		|	ВидыЦен.ИспользоватьПриПродаже
		|	И (НЕ ВидыЦен.ПометкаУдаления)"
		;	
		
	ИначеЕсли ИмяТаблицы = "Справочник.УпаковкиЕдиницыИзмерения" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УпаковкиНоменклатуры.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
		|		ПО (УпаковкиНоменклатуры.Владелец = Номенклатура.Ссылка),
		|	Справочник.НаборыУпаковок КАК НаборыУпаковок
		|ГДЕ
		|	(НЕ УпаковкиНоменклатуры.Ссылка ЕСТЬ NULL )
		|	И (НЕ ВЫРАЗИТЬ(УпаковкиНоменклатуры.Владелец КАК Справочник.Номенклатура) ЕСТЬ NULL )
		|	И (НЕ УпаковкиНоменклатуры.ПометкаУдаления)
		|{ГДЕ
		|	УпаковкиНоменклатуры.Владелец.*}
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	УпаковкиНоменклатуры.Ссылка
		|ИЗ
		|	Справочник.НаборыУпаковок КАК НаборыУпаковок
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
		|		ПО (УпаковкиНоменклатуры.Владелец = НаборыУпаковок.Ссылка)
		|ГДЕ
		|	(НЕ УпаковкиНоменклатуры.Ссылка ЕСТЬ NULL )
		|	И (НЕ ВЫРАЗИТЬ(УпаковкиНоменклатуры.Владелец КАК Справочник.НаборыУпаковок) ЕСТЬ NULL )
		|	И (НЕ УпаковкиНоменклатуры.ПометкаУдаления)"
		;
		
	ИначеЕсли ИмяТаблицы = "Справочник.ХарактеристикиНоменклатуры" Тогда	
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ХарактеристикиНоменклатуры.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ПО (ХарактеристикиНоменклатуры.Владелец = Номенклатура.Ссылка),
		|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|ГДЕ
		|	(НЕ ХарактеристикиНоменклатуры.Ссылка ЕСТЬ NULL )
		|	И (НЕ ВЫРАЗИТЬ(ХарактеристикиНоменклатуры.Владелец КАК Справочник.Номенклатура) ЕСТЬ NULL )
		|	И (НЕ ХарактеристикиНоменклатуры.ПометкаУдаления)
		|{ГДЕ
		|	ХарактеристикиНоменклатуры.Владелец.*}
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ХарактеристикиНоменклатуры.Ссылка
		|ИЗ
		|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ПО (ХарактеристикиНоменклатуры.Владелец = ВидыНоменклатуры.Ссылка)
		|ГДЕ
		|	(НЕ ХарактеристикиНоменклатуры.Ссылка ЕСТЬ NULL )
		|	И (НЕ ВЫРАЗИТЬ(ХарактеристикиНоменклатуры.Владелец КАК Справочник.ВидыНоменклатуры) ЕСТЬ NULL )
		|	И (НЕ ХарактеристикиНоменклатуры.ПометкаУдаления)";
		
	ИначеЕсли ИмяТаблицы = "Справочник.СоглашенияСКлиентами" Тогда
		
		ТекстЗапроса = 	 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СоглашениеСКлиентомИндивидуальное.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СоглашенияСКлиентами КАК СоглашениеСКлиентомИндивидуальное
		|ГДЕ
		|   (&ИспользованиеСоглашенийСКлиентами <> ЗНАЧЕНИЕ(Перечисление.ИспользованиеСоглашенийСКлиентами.ТолькоТиповыеСоглашения))
		|	И СоглашениеСКлиентомИндивидуальное.ИспользуетсяВРаботеТорговыхПредставителей
		|	И СоглашениеСКлиентомИндивидуальное.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
		|	И (НЕ СоглашениеСКлиентомИндивидуальное.Типовое)
		|	И (НЕ СоглашениеСКлиентомИндивидуальное.ПометкаУдаления)
		|{ГДЕ
		|	СоглашениеСКлиентомИндивидуальное.Партнер}
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СоглашениеСКлиентомТиповое.Ссылка
		|ИЗ
		|	Справочник.СоглашенияСКлиентами КАК СоглашениеСКлиентомТиповое
		|ГДЕ
		|   (&ИспользованиеСоглашенийСКлиентами <> ЗНАЧЕНИЕ(Перечисление.ИспользованиеСоглашенийСКлиентами.ТолькоИндивидуальныеСоглашения))
		|	И СоглашениеСКлиентомТиповое.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
		|	И СоглашениеСКлиентомТиповое.ИспользуетсяВРаботеТорговыхПредставителей
		|	И СоглашениеСКлиентомТиповое.Типовое
		|	И (НЕ СоглашениеСКлиентомТиповое.ПометкаУдаления)"
		;
		
	ИначеЕсли ИмяТаблицы = "Справочник.ДоговорыКонтрагентов" Тогда
		
		ТекстЗапроса = 	 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
		|	И (НЕ ДоговорыКонтрагентов.ПометкаУдаления)
		|	И (ДоговорыКонтрагентов.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
		|			ИЛИ ДоговорыКонтрагентов.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию))
		|{ГДЕ
		|	ДоговорыКонтрагентов.Партнер}"
		;
		
	ИначеЕсли ИмяТаблицы = "Справочник.НоменклатураПрисоединенныеФайлы" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Номенклатура.ФайлКартинки КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.ФайлКартинки <> ЗНАЧЕНИЕ(Справочник.НоменклатураПрисоединенныеФайлы.ПустаяСсылка)
		|	И (НЕ Номенклатура.ПометкаУдаления)
		|	И (НЕ Номенклатура.ЭтоГруппа)
		|{ГДЕ
		|	Номенклатура.Ссылка.*}"
		;
		
	ИначеЕсли ИмяТаблицы = "Документ.ЗаданиеТорговомуПредставителю" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаданиеТорговомуПредставителю.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаданиеТорговомуПредставителю КАК ЗаданиеТорговомуПредставителю
		|ГДЕ
		|	ЗаданиеТорговомуПредставителю.ТорговыйПредставитель = &ТорговыйПредставитель
		|	И ЗаданиеТорговомуПредставителю.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийТорговымПредставителям.КОтработке)
		|	И (НЕ ЗаданиеТорговомуПредставителю.ПометкаУдаления)"
		
		;

	КонецЕсли;

	// Добавим поля, по которым возможен отбор.
	ДобавитьПоляОтбораВТекстЗапроса(ТекстЗапроса, МассивПолейОтбора);
	
	Возврат ТекстЗапроса;

КонецФункции

// Добавляет в переданный текст запроса поля, по которым возможен отбор.
//
// Параметры:
//  ТекстЗапроса - Строка - текст запроса, в который требуется добавить поля.
//  МассивПолейОтбора - Массив - массив, содержащий имена полей для отбора.
//
Процедура ДобавитьПоляОтбораВТекстЗапроса(ТекстЗапроса, МассивПолейОтбора)
	
	Если ТекстЗапроса <> "" Тогда
		
		КоличествоПолейОтбора = МассивПолейОтбора.Количество();
		
		Если КоличествоПолейОтбора > 0 Тогда
			
			ТекстДополнения = " {ГДЕ ";
			
			Индекс = 0;
			
			Для Каждого Поле Из МассивПолейОтбора Цикл
				
				ТекстДополнения = ТекстДополнения + Поле;
				
				Если Индекс < КоличествоПолейОтбора-1 Тогда
					ТекстДополнения = ТекстДополнения + ",";
				КонецЕсли;	
				
				Индекс = Индекс + 1;
				
			КонецЦикла;
			
			ТекстДополнения = ТекстДополнения + "}";
			ТекстЗапроса = ТекстЗапроса + ТекстДополнения;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Формирует и возвращает запрос на основании переданного текста запроса
// и структуры настроек, содержащей отборы для объекта.
//
// Параметры:
//  ТекстЗапроса - Строка - текст запроса.
//  СтруктураОписанияОбъекта - Структура - структура, содержащая описание объекта.
//  СтруктураНастроекОтбора - Структура - структура, содержащая настройки отбора для обмена.
//  СтруктураПараметровНастройкиОбмена - Структура - структура, содержащая параметры настройки обмена.
//  ДополнительныеПараметры - Структура - структура, содержащая дополнительные параметры
//
// Возвращаемое значение:
//  Запрос - Сформированный запрос.
//
Функция ПолучитьЗапросДляОбъекта(ТекстЗапроса, СтруктураОписанияОбъекта, СтруктураНастроекОтбора, СтруктураПараметровНастройкиОбмена, ДополнительныеПараметры)

 	ИмяКласса = СтруктураОписанияОбъекта.ИмяКласса;
	ИмяОбъекта = СтруктураОписанияОбъекта.ИмяОбъекта;

	СхемаКомпоновки = ПолучитьСхемуКомпоновкиДанныхДляВыборки(ТекстЗапроса);
	НастройкиКомпоновки = СкомпоноватьНастройки(СхемаКомпоновки);

	ДобавитьОтборыИзСхемыОбмена(НастройкиКомпоновки,
								СтруктураНастроекОтбора,
								ИмяКласса,
								ИмяОбъекта,
								ДополнительныеПараметры.ИспользоватьДополнительныеОтборы,
								СтруктураПараметровНастройкиОбмена,
								Истина);

	Если ДополнительныеПараметры.Ссылка <> Неопределено Тогда
									
		ДобавитьЭлементОтбораВНастройкиСхемы(НастройкиКомпоновки,
											"Ссылка",
											ВидСравненияКомпоновкиДанных.Равно,
											Истина,
											ДополнительныеПараметры.Ссылка);
	КонецЕсли;

	Если ДополнительныеПараметры.Изменения Тогда
		
		ДобавитьЭлементОтбораВНастройкиСхемы(НастройкиКомпоновки,
											"Узел",
											ВидСравненияКомпоновкиДанных.Равно,
											Истина,
											ДополнительныеПараметры.УзелОбмена);
		
		Если ДополнительныеПараметры.НомерСообщения <> Неопределено Тогда
			ДобавитьЭлементОтбораВНастройкиСхемы(НастройкиКомпоновки,
												"НомерСообщения",
												ВидСравненияКомпоновкиДанных.Равно,
												Истина,
												ДополнительныеПараметры.НомерСообщения);
		КонецЕсли;
		
	КонецЕсли;
	
	Макет = КомпоновкаДанныхСервер.ПолучитьМакетКомпоновки(СхемаКомпоновки, НастройкиКомпоновки);
	
	Запрос = КомпоновкаДанныхСервер.ПолучитьЗапросИзМакетаКомпоновки(Макет, "Запрос");

	ДобавитьПараметрыЗапроса(Запрос, ИмяКласса, ИмяОбъекта, СтруктураПараметровНастройкиОбмена);

	Возврат Запрос;

КонецФункции

// Добавляет параметры в переданный запрос для указанного объекта.
//
// Параметры:
//  Запрос - Запрос - запрос, в который требуется добавить параметры.
//  ИмяКласса - Строка - имя класса, к которому принадлежит объект (Справочники, Документы и т.д), для которого используется запрос.
//  ИмяОбъекта - Строка - имя объекта метаданных, для которого используется запрос.
//  СтруктураПараметровНастройкиОбмена - Структура - структура, содержащая настройки параметров обмена.
//
Процедура ДобавитьПараметрыЗапроса(Запрос, ИмяКласса, ИмяОбъекта, СтруктураПараметровНастройкиОбмена)

	Если ИмяКласса = "Справочники" Тогда
		Если ИмяОбъекта = "СоглашенияСКлиентами" Тогда
			Запрос.УстановитьПараметр("ИспользованиеСоглашенийСКлиентами", СтруктураПараметровНастройкиОбмена.ИспользованиеСоглашенийСКлиентами);
		КонецЕсли;
	ИначеЕсли ИмяКласса = "Документы" Тогда
		Если ИмяОбъекта = "ЗаданиеТорговомуПредставителю" Тогда
			Запрос.УстановитьПараметр("ТорговыйПредставитель", СтруктураПараметровНастройкиОбмена.ТорговыйПредставитель);
		КонецЕсли;
	ИначеЕсли ИмяКласса = "РегистрыСведений" Тогда
		Если ИмяОбъекта = "КурсыВалют" Тогда
			Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Определяет, отключено ли использование конкретного объекта функциональной опцией, или другими условиями.
//
// Параметры:
//  ИмяКласса - Строка - имя класса, которому принадлежит объект (Справочники, Документы и т.д.).
//  ИмяОбъекта - Строка - имя объекта, для которого проверяется факт исключения.
//  УзелОбмена - ПланОбменаСсылка.МобильноеПриложениеТорговыйПредставитель - узел плана обмена, для которого выполняется обмен или регистрируются изменения.
//
// Возвращаемое значение:
//  Булево - Признак отключения использования. Истина - использование отключено, Ложь - объект используется.
//
Функция ИспользованиеОбъектаОтключено(ИмяКласса, ИмяОбъекта, УзелОбмена)
	
	Если ИмяКласса = "Справочники" Тогда
		
		Если ИмяОбъекта = "УпаковкиНоменклатуры" ИЛИ ИмяОбъекта = "НаборыУпаковок" Тогда
			Возврат НЕ ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
		ИначеЕсли ИмяОбъекта = "ХарактеристикиНоменклатуры" Тогда
			Возврат НЕ ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
		ИначеЕсли ИмяОбъекта = "ЦеновыеГруппы" Тогда
			Возврат НЕ ПолучитьФункциональнуюОпцию("ИспользоватьЦеновыеГруппы");
		ИначеЕсли ИмяОбъекта = "КонтактныеЛицаПартнеров" Тогда
			ИспользованиеКонтактнойИнформации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УзелОбмена, "ИспользованиеКонтактнойИнформации");
			Возврат (ИспользованиеКонтактнойИнформации = Перечисления.ИспользованиеКонтактнойИнформацииМобильнымПриложением.НеИспользуется);
		ИначеЕсли ИмяОбъекта = "ГрафикиОплаты" Тогда
			Возврат НЕ ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиОплаты");
		ИначеЕсли ИмяОбъекта = "ПричиныОтменыЗаказовКлиентов" Тогда
			Возврат НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПричиныОтменыЗаказовКлиентов");
		ИначеЕсли ИмяОбъекта = "ДоговорыКонтрагентов" Тогда
			Возврат НЕ ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами");
		КонецЕсли;
		
	ИначеЕсли ИмяКласса = "Документы" Тогда	
		
		Если ИмяОбъекта = "ЗаданиеТорговомуПредставителю" Тогда
			ИспользованиеЗаданий = Константы.ИспользованиеЗаданийТорговымПредставителям.Получить();
			Возврат (ИспользованиеЗаданий = Перечисления.ИспользованиеЗаданийТорговымПредставителям.НеИспользуются)
					ИЛИ (НЕ ЗначениеЗаполнено(ИспользованиеЗаданий));
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииДляРаботыСКомпоновкойДанных

// Формирует и возвращает схему компоновки данных на основании текста запроса
// для выборки данных по конкретному объекту.
//
// Параметры:
//  ТекстЗапроса - Строка - текст запроса для источника данных схемы компоновки.
//
// Возвращаемое значение:
//  СхемаКомпоновкиДанных - Схема компоновки данных.
//
Функция ПолучитьСхемуКомпоновкиДанныхДляВыборки(ТекстЗапроса)

	СхемаКомпоновки = Новый СхемаКомпоновкиДанных();
	
	Источник = СхемаКомпоновки.ИсточникиДанных.Добавить();
	Источник.Имя = "Источник1";
	Источник.СтрокаСоединения="";
	Источник.ТипИсточникаДанных = "local";
	
	НаборДанных = СхемаКомпоновки.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Запрос = ТекстЗапроса;
	НаборДанных.Имя = "Запрос";
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
	НаборДанных.ИсточникДанных = "Источник1";
	
	Возврат СхемаКомпоновки;

КонецФункции

// Формирует и возвращает схему компоновки данных для объекта.
//
// Параметры:
//  МассивПолей - Массив - массив, содержащий имена полей.
//
// Возвращаемое значение:
//  СхемаКомпоновкиДанных - Схема компоновки данных.
//
Функция ПолучитьСхемуКомпоновкиДанныхДляОбъекта(МассивПолей)

	СхемаКомпоновки = Новый СхемаКомпоновкиДанных();
	
	Источник = СхемаКомпоновки.ИсточникиДанных.Добавить();
	Источник.Имя = "Источник1";
	Источник.СтрокаСоединения="";
	Источник.ТипИсточникаДанных = "local";
	
	НаборДанных = СхемаКомпоновки.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
	НаборДанных.Имя = "Объект";
	НаборДанных.ИмяОбъекта = "ОбъектДанных";
	НаборДанных.ИсточникДанных = "Источник1";
	
	Для Каждого Поле Из МассивПолей Цикл
		ПолеНабораДанных = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ПолеНабораДанных.Поле = Поле;
		ПолеНабораДанных.ПутьКДанным = Поле;
	КонецЦикла;
	
	Возврат СхемаКомпоновки;

КонецФункции

// Заполняет в переданном отборе элемент на основании структуры, содержащей данные отбора.
//
// Параметры:
//  Отбор - ОтборКомпоновкиДанных - отбор компоновки данных, который надо заполнить.
//  СтруктураЭлементаОтбора - Структура - структура, содержащая данные для заполнения элемента отбора.
//  ИмяЭлементаОтбора - Строка - имя поля - элемента отбора.
//
Процедура ЗаполнитьЭлементОтбораКомпоновкиИзСтруктуры(Отбор, СтруктураНастроекОтбора, ИмяНастройки, ИмяЭлементаОтбора)

	СтруктураЭлементаОтбора = ОписаниеОтбораДляНастройки(СтруктураНастроекОтбора, ИмяНастройки);

	Если СтруктураЭлементаОтбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	Для Каждого Элемент Из СтруктураЭлементаОтбора Цикл
		Если Элемент.Ключ = "ЛевоеЗначение" Тогда
			ЭлементОтбора[Элемент.Ключ] =  Новый ПолеКомпоновкиДанных(ИмяЭлементаОтбора);
		Иначе
			ЭлементОтбора[Элемент.Ключ] = Элемент.Значение;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Добавляет отборы в настройки компоновки для отдельных объектов.
//
// Параметры:
//  СтруктураРеквизитовОбъекта - Структура - структура, содержащая реквизиты объекта.
//  Отбор - ОтборКомпоновкиДанных - отбор компоновки, элемент которого требуется заполнить.
//  СтруктураНастроекОтбора - Структура - структура, содержащая описание устанавливаемого отбора.
//  ИмяКласса - Строка - имя класса, к которому принадлежит объект (Справочники, Документы и т.д.).
//  ИмяОбъекта - Строка - имя объекта, для которого добавляются отборы.
//
Процедура ДобавитьОтборыДляОтдельныхОбъектов(СтруктураРеквизитовОбъекта, Отбор, СтруктураНастроекОтбора, ИмяКласса, ИмяОбъекта)
	
	Если ИмяКласса = "Справочники" Тогда
		
		Если ИмяОбъекта = "УпаковкиНоменклатуры" ИЛИ ИмяОбъекта = "ХарактеристикиНоменклатуры" Тогда
			ЗаполнитьЭлементОтбораДляУпаковкиИХарактеристикиНоменклатуры(СтруктураРеквизитовОбъекта, Отбор, СтруктураНастроекОтбора);
		КонецЕсли;
		
		Если ИмяОбъекта = "СоглашенияСКлиентами" Тогда
			ЗаполнитьЭлементОтбораДляСоглашенияСКлиентом(СтруктураРеквизитовОбъекта, Отбор, СтруктураНастроекОтбора);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры	

// Выполняет заполнение элемента отбора для справочников "УпаковкиНоменклатуры" и "ХарактеристикиНоменклатуры".
//
// Параметры:
//  СтруктураРеквизитовОбъекта - Структура - структура, содержащая реквизиты объекта.
//  Отбор - ОтборКомпоновкиДанных - отбор компоновки, элемент которого требуется заполнить.
//  СтруктураНастроекОтбора - Структура - структура, содержащая описание устанавливаемого отбора.
//
Процедура ЗаполнитьЭлементОтбораДляУпаковкиИХарактеристикиНоменклатуры(СтруктураРеквизитовОбъекта, Отбор, СтруктураНастроекОтбора)
	
	Если ТипЗнч(СтруктураРеквизитовОбъекта.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		СтруктураЭлементаОтбора = ОписаниеОтбораДляНастройки(СтруктураНастроекОтбора, "Номенклатура");
		
		Если СтруктураЭлементаОтбора = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		
		Для Каждого Элемент Из СтруктураЭлементаОтбора Цикл
			Если Элемент.Ключ = "ЛевоеЗначение" Тогда
				ЭлементОтбора[Элемент.Ключ] =  Новый ПолеКомпоновкиДанных("Владелец");
			Иначе
				ЭлементОтбора[Элемент.Ключ] = Элемент.Значение;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет заполнение элемента отбора для справочника "СоглашенияСКлиентами".
//
// Параметры:
//  СтруктураРеквизитовОбъекта - Структура - структура, содержащая реквизиты объекта.
//  Отбор - ОтборКомпоновкиДанных - отбор компоновки, элемент которого требуется заполнить.
//  СтруктураНастроекОтбора - Структура - структура, содержащая описание устанавливаемого отбора.
//
Процедура ЗаполнитьЭлементОтбораДляСоглашенияСКлиентом(СтруктураРеквизитовОбъекта, Отбор, СтруктураНастроекОтбора)
	
	Если Не СтруктураРеквизитовОбъекта.Типовое Тогда
		
		СтруктураЭлементаОтбора = ОписаниеОтбораДляНастройки(СтруктураНастроекОтбора, "Партнер");
		
		Если СтруктураЭлементаОтбора = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		
		Для Каждого Элемент Из СтруктураЭлементаОтбора Цикл
			Если Элемент.Ключ = "ЛевоеЗначение" Тогда
				ЭлементОтбора[Элемент.Ключ] =  Новый ПолеКомпоновкиДанных("Партнер");
			Иначе
				ЭлементОтбора[Элемент.Ключ] = Элемент.Значение;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Задает обязательные отборы для выборки объектов с использованием компоновки, налагаемые независимо от настроек пользователя.
//
// Параметры:
//  НастройкиКомпоновки - НастройкиКомпоновкиДанных - настройки компоновки данных, для которых задаются отборы.
//  ИмяКласса - Строка - имя класса, к которому принадлежит объект (Справочники, Документы и т.д).
//  ИмяОбъекта - Строка - имя объекта метаданных, для которого добавляются отборы.
//  СтруктураПараметровНастройкиОбмена - Структура - структура, содержащая параметры настройки обмена.
//
Процедура ДобавитьОбязательныеОтборы(НастройкиКомпоновки, ИмяКласса, ИмяОбъекта, СтруктураПараметровНастройкиОбмена)

	Если ИмяКласса = "Справочники" Тогда

		Если ИмяОбъекта = "Партнеры" Тогда
			
			ДобавитьЭлементОтбораВНастройкиСхемы(НастройкиКомпоновки, "Клиент", ВидСравненияКомпоновкиДанных.Равно, Истина, Истина);
			ДобавитьЭлементОтбораВНастройкиСхемы(НастройкиКомпоновки, "ОбслуживаетсяТорговымиПредставителями", ВидСравненияКомпоновкиДанных.Равно, Истина, Истина);
			
		ИначеЕсли ИмяОбъекта = "Организации" Тогда
			
			ДобавитьЭлементОтбораВНастройкиСхемы(НастройкиКомпоновки, "Ссылка", ВидСравненияКомпоновкиДанных.НеРавно, Истина, Справочники.Организации.УправленческаяОрганизация);
			
		ИначеЕсли ИмяОбъекта = "СоглашенияСКлиентами" Тогда
			
			ДобавитьЭлементОтбораВНастройкиСхемы(НастройкиКомпоновки, "Статус", ВидСравненияКомпоновкиДанных.Равно, Истина, Перечисления.СтатусыСоглашенийСКлиентами.Действует);
			ДобавитьЭлементОтбораВНастройкиСхемы(НастройкиКомпоновки, "ИспользуетсяВРаботеТорговыхПредставителей", ВидСравненияКомпоновкиДанных.Равно, Истина, Истина);
			
			Если СтруктураПараметровНастройкиОбмена.ИспользованиеСоглашенийСКлиентами = Перечисления.ИспользованиеСоглашенийСКлиентами.ТолькоТиповыеСоглашения Тогда
				ДобавитьЭлементОтбораВНастройкиСхемы(НастройкиКомпоновки, "Типовое", ВидСравненияКомпоновкиДанных.Равно, Истина, Истина);
			КонецЕсли;
			
			Если СтруктураПараметровНастройкиОбмена.ИспользованиеСоглашенийСКлиентами = Перечисления.ИспользованиеСоглашенийСКлиентами.ТолькоИндивидуальныеСоглашения Тогда
				ДобавитьЭлементОтбораВНастройкиСхемы(НастройкиКомпоновки, "Типовое", ВидСравненияКомпоновкиДанных.Равно, Истина, Ложь);
			КонецЕсли;
			
		ИначеЕсли ИмяОбъекта = "ДоговорыКонтрагентов" Тогда
			
			ДобавитьЭлементОтбораВНастройкиСхемы(НастройкиКомпоновки, "Статус", ВидСравненияКомпоновкиДанных.Равно, Истина, Перечисления.СтатусыДоговоровКонтрагентов.Действует);
			
			СписокХозяйственныхОпераций = Новый СписокЗначений();
			СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.РеализацияКлиенту);
			СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
			
			ДобавитьЭлементОтбораВНастройкиСхемы(НастройкиКомпоновки, "ХозяйственнаяОперация", ВидСравненияКомпоновкиДанных.ВСписке, Истина, СписокХозяйственныхОпераций);
			
		ИначеЕсли ИмяОбъекта = "ВидыКонтактнойИнформации" Тогда
			
			СписокИспользуемыхГрупп = Новый СписокЗначений();
			СписокИспользуемыхГрупп.Добавить(Справочники.ВидыКонтактнойИнформации.СправочникПартнеры);
			СписокИспользуемыхГрупп.Добавить(Справочники.ВидыКонтактнойИнформации.СправочникКонтактныеЛицаПартнеров);
			
			ДобавитьЭлементОтбораВНастройкиСхемы(НастройкиКомпоновки, "Ссылка", ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии, Истина, СписокИспользуемыхГрупп);
			
		КонецЕсли;
		
	ИначеЕсли ИмяКласса = "Документы" Тогда

		Если ИмяОбъекта = "ЗаданиеТорговомуПредставителю" Тогда
			ДобавитьЭлементОтбораВНастройкиСхемы(НастройкиКомпоновки, "Статус", ВидСравненияКомпоновкиДанных.Равно, Истина, Перечисления.СтатусыЗаданийТорговымПредставителям.КОтработке);
			ДобавитьЭлементОтбораВНастройкиСхемы(НастройкиКомпоновки, "ТорговыйПредставитель", ВидСравненияКомпоновкиДанных.Равно, Истина, СтруктураПараметровНастройкиОбмена.ТорговыйПредставитель);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСНастройкамиИПараметрамиОбмена

// Получает и возвращает структуру, содержащую описание отбора для указанной настройки обмена.
//
// Параметры:
//  СтруктураНастроекОтбора - Структура - структура, содержащая настройки отбора для схемы обмена.
//  ИмяНастройки - Строка - имя настройки в структуре настроек отбора.
//
// Возвращаемое значение:
//  Структура - Структура, содержащая описание отбора для указанной настройки обмена.
//
Функция ОписаниеОтбораДляНастройки(НастройкиОтбора, ИмяНастройки)

	Настройка = Неопределено;
	Если НастройкиОтбора.Свойство(ИмяНастройки, Настройка) Тогда
		Если ТипЗнч(Настройка) = Тип("Структура") Тогда
			Возврат Настройка;
		КонецЕсли;
	КонецЕсли;

	Возврат Настройка;

КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСМетаданными

// Формирует и возвращает структуру использования свойства справочника (реквизита или табличной части.
//
// Параметры:
//  Свойство - Произвольный - свойство объекта метаданных - реквизит или табличная часть справочника.
//
// Возвращаемое значение:
//  Структура - Структура использования свойства, определяющая использование для элемента и группы справочника.
//
Функция ИспользованиеСвойстваСправочника(Свойство)

	// Определим вариант использования.
	ДляЭлемента = (Свойство.Использование <> Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы);
	ДляГруппы   = (Свойство.Использование <> Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента);

	СтруктураИспользования = Новый Структура();
	СтруктураИспользования.Вставить("ИспользуетсяДляЭлемента", ДляЭлемента);
	СтруктураИспользования.Вставить("ИспользуетсяДляГруппы", ДляГруппы);

	Возврат СтруктураИспользования;

КонецФункции

Функция ПолучитьУказаниеТипаРеквизита(Реквизит)

	Если Реквизит.Тип.Типы().Количество()>1 Тогда
		Возврат НазначениеТипаXML.Явное;
	Иначе
		Возврат НазначениеТипаXML.Неявное;
	КонецЕсли;

КонецФункции

// Определяет и возвращает тип стандартного реквизита объекта (справочника или документа).
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданныхСправочник, ОбъектМетаданныхДокумент - объект метаданных, которому принадлежит реквизит.
//  ИмяКласса - Строка - имя класса, к которому принадлежит объект (Справочники, Документы).
//  ИмяРеквизита - Строка - имя реквизита, тип которого требуется определить.
//
// Возвращаемое значение:
//  Тип - тип реквизита.
//
Функция ПолучитьТипСтандартногоРеквизита(ОбъектМетаданных, ИмяКласса, ИмяРеквизита)

	ТипРеквизита = Неопределено;
	
	Если ИмяРеквизита = "Ref" ИЛИ ИмяРеквизита = "Ссылка" Тогда
		
		Если ИмяКласса = "Справочники" Тогда
			ТипРеквизита = Тип("СправочникСсылка." + ОбъектМетаданных.Имя);
		Иначе
			ТипРеквизита = Тип("ДокументСсылка." + ОбъектМетаданных.Имя);
		КонецЕсли;
		
	ИначеЕсли ИмяРеквизита = "IsFolder" ИЛИ ИмяРеквизита = "ЭтоГруппа"
		ИЛИ ИмяРеквизита = "DeletionMark" ИЛИ ИмяРеквизита = "ПометкаУдаления"
		ИЛИ ИмяРеквизита = "Posted" ИЛИ ИмяРеквизита = "Проведен" Тогда
		
		ТипРеквизита = Тип("Булево");
		
	ИначеЕсли ИмяРеквизита = "Parent" ИЛИ ИмяРеквизита = "Родитель" Тогда
		
		ТипРеквизита = Тип("СправочникСсылка." + ОбъектМетаданных.Имя);
		
	ИначеЕсли ИмяРеквизита = "Description" ИЛИ ИмяРеквизита = "Наименование" Тогда
		
		ТипРеквизита = Тип("Строка");
		
	ИначеЕсли ИмяРеквизита = "Date" ИЛИ ИмяРеквизита = "Дата" Тогда
		
		ТипРеквизита = Тип("Дата");
		
	ИначеЕсли ИмяРеквизита = "Code" ИЛИ ИмяРеквизита = "Код" Тогда
		
		Если ОбъектМетаданных.ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Строка Тогда
			ТипРеквизита = Тип("Строка");
		Иначе
			ТипРеквизита = Тип("Число");
		КонецЕсли;
			
	ИначеЕсли ИмяРеквизита = "Number" ИЛИ ИмяРеквизита = "Номер" Тогда
		
		Если ОбъектМетаданных.ТипНомера = Метаданные.СвойстваОбъектов.ТипНомераДокумента.Строка Тогда
			ТипРеквизита = Тип("Строка");
		Иначе
			ТипРеквизита = Тип("Число");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТипРеквизита;

КонецФункции

Функция ПолучитьТипРеквизита(Реквизит)

	ОписаниеТипов = Реквизит.Тип;
	МассивТипов = ОписаниеТипов.Типы();
	
	Если МассивТипов.Количество()=1 Тогда
		Возврат МассивТипов[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

// Формирует и возвращает структуру описания реквизита объекта метаданных.
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданныхСправочник, ОбъектМетаданныхДокумент - объект метаданных, реквизит которого анализируется.
//  ИмяРеквизита - Строка - имя реквизита, использование которого определяется.
//
// Возвращаемое значение:
//  Структура - Структура, описывающая использование (для группы и элемента) и указание типа реквизита справочника.
//
Функция ОписаниеРеквизитаСправочника(ОбъектМетаданных, ИмяРеквизита)

	ТипРеквизита = Неопределено;
	
	Если ИмяРеквизита = "Ref" ИЛИ ИмяРеквизита = "Ссылка"
		ИЛИ ИмяРеквизита = "IsFolder" ИЛИ ИмяРеквизита = "ЭтоГруппа"
		ИЛИ ИмяРеквизита = "DeletionMark" ИЛИ ИмяРеквизита = "ПометкаУдаления"
		ИЛИ ИмяРеквизита = "Parent" ИЛИ ИмяРеквизита = "Родитель"
		ИЛИ ИмяРеквизита = "Code" ИЛИ ИмяРеквизита = "Код"
		ИЛИ ИмяРеквизита = "Description" ИЛИ ИмяРеквизита = "Наименование" Тогда

		ДляЭлемента = Истина;
		ДляГруппы = Истина;
		УказаниеТипа = НазначениеТипаXML.Неявное;
		
		ТипРеквизита = ПолучитьТипСтандартногоРеквизита(ОбъектМетаданных, "Справочники", ИмяРеквизита);

	ИначеЕсли ИмяРеквизита = "Owner" ИЛИ ИмяРеквизита = "Владелец" Тогда

		ДляЭлемента = Истина;
		ДляГруппы = Истина;
		УказаниеТипа = НазначениеТипаXML.Явное;
		
	ИначеЕсли ИмяРеквизита = "Predefined" ИЛИ ИмяРеквизита = "Предопределенный" Тогда

		ДляЭлемента = Истина;
		ДляГруппы = Истина;
		УказаниеТипа = НазначениеТипаXML.НеЯвное;
		ТипРеквизита = Тип("Булево");
		
	Иначе
		
		Реквизит = ОбъектМетаданных.Реквизиты[ИмяРеквизита];
		ТипРеквизита = ПолучитьТипРеквизита(Реквизит);
		
		// Определим вариант использования реквизита.
		СтруктураИспользования = ИспользованиеСвойстваСправочника(Реквизит);

		ДляЭлемента = СтруктураИспользования.ИспользуетсяДляЭлемента;
		ДляГруппы   = СтруктураИспользования.ИспользуетсяДляГруппы;
		
		// Определим вариант указания типа для реквизита.
		// Тип следует указывать только в том случае, если он не всегда может быть однозначно определен.
		
		УказаниеТипа = ПолучитьУказаниеТипаРеквизита(Реквизит);
		
	КонецЕсли;

	СтруктураОписания = Новый Структура();
	СтруктураОписания.Вставить("ИспользуетсяДляЭлемента", ДляЭлемента);
	СтруктураОписания.Вставить("ИспользуетсяДляГруппы", ДляГруппы);
	СтруктураОписания.Вставить("УказаниеТипа", УказаниеТипа);
	СтруктураОписания.Вставить("Тип", ТипРеквизита);

	Возврат СтруктураОписания;

КонецФункции

// Формирует и возвращает структуру описания реквизита объекта метаданных.
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданныхСправочник, ОбъектМетаданныхДокумент - объект метаданных, реквизит которого анализируется.
//  ИмяРеквизита - Строка - имя реквизита, использование которого определяется.
//
// Возвращаемое значение:
//  Структура - Структура, описывающая указание типа реквизита документа.
//
Функция ОписаниеРеквизитаДокумента(ОбъектМетаданных, ИмяРеквизита)

	ТипРеквизита = Неопределено;
	
	Если ИмяРеквизита = "Ref" ИЛИ ИмяРеквизита = "Ссылка"
		ИЛИ ИмяРеквизита = "DeletionMark" ИЛИ ИмяРеквизита = "ПометкаУдаления"
		ИЛИ ИмяРеквизита = "Date" ИЛИ ИмяРеквизита = "Дата"
		ИЛИ ИмяРеквизита = "Number" ИЛИ ИмяРеквизита = "Номер"
		ИЛИ ИмяРеквизита = "Posted" ИЛИ ИмяРеквизита = "Проведен" Тогда

		УказаниеТипа = НазначениеТипаXML.Неявное;
		
		ТипРеквизита = ПолучитьТипСтандартногоРеквизита(ОбъектМетаданных, "Документы", ИмяРеквизита);
		
	Иначе
		
		Реквизит = ОбъектМетаданных.Реквизиты[ИмяРеквизита];
		ТипРеквизита = ПолучитьТипРеквизита(Реквизит);
		
		// Определим вариант указания типа для реквизита.
		// Тип следует указывать только в том случае, если он не всегда может быть однозначно определен.
		УказаниеТипа = ПолучитьУказаниеТипаРеквизита(Реквизит);
		
	КонецЕсли;

	СтруктураОписания = Новый Структура();
	СтруктураОписания.Вставить("УказаниеТипа", УказаниеТипа);
	СтруктураОписания.Вставить("Тип", ТипРеквизита);

	Возврат СтруктураОписания;

КонецФункции

// Формирует и возвращает структуру, отражающую состав объекта метаданных (справочника или документа).
// Структура содержит следующие элементы: Реквизиты - массив реквизитов объекта, ТабличныеЧасти - структура табличных частей.
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданныхСправочник, ОбъектМетаданныхДокумент - объект метаданных, структуру состава которого требуется получить.
//  ИмяКласса - Строка - имя класса объекта (Справочники, Документы и т.д.).
//  ИмяОбъекта - Строка - имя объекта метаданных.
//  ДеревоИспользуемыхМетаданных - см. МобильныеПриложения.ИспользуемыеМетаданные
//
// Возвращаемое значение:
//  Структура - Структура, описывающая состав объекта.
//
Функция ОписаниеСоставаОбъекта(ОбъектМетаданных, ИмяКласса, ИмяОбъекта, ДеревоИспользуемыхМетаданных)

	СтруктураСостава = Новый Структура();
	СтруктураРеквизитов = Новый Структура();
	
	СтруктураТабличныхЧастей = Новый Структура();

	СтрокаКласса = ДеревоИспользуемыхМетаданных.Строки[0].Строки.Найти(ИмяКласса, "Имя");

	Если СтрокаКласса = Неопределено Тогда
		
		#Если ВнешнееСоединение Тогда
		ТекстСообщения = НСтр("ru='В пакет обмена записаны неверные данные: %ИмяКласса%.%ИмяОбъекта%.%ПереводСтроки%В приложении не используются %ИмяКласса%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%ИмяКласса%",ИмяКласса);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%ИмяОбъекта%",ИмяОбъекта);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%ПереводСтроки%",Символы.ПС);
		
		ВызватьИсключение(ТекстСообщения);
		#КонецЕсли
		
	КонецЕсли;

	СтрокаОбъекта = СтрокаКласса.Строки.Найти(ИмяОбъекта, "Имя");

	Если СтрокаОбъекта = Неопределено Тогда
		
		#Если ВнешнееСоединение Тогда
		ТекстСообщения = НСтр("ru='В пакет обмена записаны неверные данные: %ИмяКласса%.%ИмяОбъекта%.%ПереводСтроки%В приложении не используется данный объект'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%ИмяКласса%",ИмяКласса);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%ИмяОбъекта%",ИмяОбъекта);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%ПереводСтроки%",Символы.ПС);
		
		ВызватьИсключение(ТекстСообщения);
		#КонецЕсли
		
	КонецЕсли;
	
	// Добавим реквизиты объекта.
	ВетвьРеквизитов = СтрокаОбъекта.Строки.Найти("Attributes","Имя");
	
	Если ВетвьРеквизитов <> Неопределено Тогда
		Для Каждого СтрокаРеквизита Из ВетвьРеквизитов.Строки Цикл
			
			СтруктураОписанияРеквизита = Новый Структура();
					
			Если ИмяКласса = "Справочники" Тогда
				СтруктураОписанияРеквизита = ОписаниеРеквизитаСправочника(ОбъектМетаданных, СтрокаРеквизита.Имя);
			ИначеЕсли ИмяКласса = "Документы" Тогда
				СтруктураОписанияРеквизита = ОписаниеРеквизитаДокумента(ОбъектМетаданных, СтрокаРеквизита.Имя);
			КонецЕсли;

			СтруктураРеквизитов.Вставить(СтрокаРеквизита.Имя, СтруктураОписанияРеквизита);

		КонецЦикла;	
	КонецЕсли;	
	
	// Добавим реквизиты табличных частей.
	
	ВетвьТабличныхЧастей = СтрокаОбъекта.Строки.Найти("TabularParts","Имя");
	
	Если ВетвьТабличныхЧастей <> Неопределено Тогда
		
		Для Каждого СтрокаТабличнойЧасти Из ВетвьТабличныхЧастей.Строки Цикл

			СтруктураОписанияТабличнойЧасти = Новый Структура();
			СтруктураРеквизитовТабличнойЧасти = Новый Структура();
			
			ИмяТабличнойЧасти = СтрокаТабличнойЧасти.Имя;
			
			Для Каждого СтрокаРеквизита Из СтрокаТабличнойЧасти.Строки Цикл

				СтруктураОписанияРеквизита = Новый Структура();

				РеквизитТабличнойЧасти = ОбъектМетаданных.ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты[СтрокаРеквизита.Имя];
				УказаниеТипа = ПолучитьУказаниеТипаРеквизита(РеквизитТабличнойЧасти);
				ТипРеквизита = ПолучитьТипРеквизита(РеквизитТабличнойЧасти);

				СтруктураОписанияРеквизита.Вставить("УказаниеТипа", УказаниеТипа);
				СтруктураОписанияРеквизита.Вставить("Тип", ТипРеквизита);

				СтруктураРеквизитовТабличнойЧасти.Вставить(СтрокаРеквизита.Имя, СтруктураОписанияРеквизита);

			КонецЦикла;
			
			ТабличнаяЧасть = ОбъектМетаданных.ТабличныеЧасти[ИмяТабличнойЧасти];

			Если ИмяКласса = "Справочники" Тогда
				
				СтруктураИспользованияТабличнойЧасти = ИспользованиеСвойстваСправочника(ТабличнаяЧасть);
				
				СтруктураОписанияТабличнойЧасти.Вставить("ИспользуетсяДляЭлемента", СтруктураИспользованияТабличнойЧасти.ИспользуетсяДляЭлемента);
				СтруктураОписанияТабличнойЧасти.Вставить("ИспользуетсяДляГруппы", СтруктураИспользованияТабличнойЧасти.ИспользуетсяДляГруппы);
				
			КонецЕсли;
			
			СтруктураОписанияТабличнойЧасти.Вставить("СтруктураРеквизитов", СтруктураРеквизитовТабличнойЧасти);

			СтруктураТабличныхЧастей.Вставить(ИмяТабличнойЧасти, СтруктураОписанияТабличнойЧасти);
			
		КонецЦикла;
		
	КонецЕсли;
	
	СтруктураСостава.Вставить("Реквизиты", СтруктураРеквизитов);
	СтруктураСостава.Вставить("ТабличныеЧасти", СтруктураТабличныхЧастей);
		
	Возврат СтруктураСостава;

КонецФункции

// Формирует и возвращает структуру, содержащую описание используемых объектов.
//
// Параметры:
//  УзелОбмена - ПланОбменаСсылка.МобильноеПриложениеТорговыйПредставитель- узел плана обмена, для которого анализируются используемые объекты.
//
// Возвращаемое значение:
//  Структура - Структура, содержащая описание используемых объектов.
//
Функция ОписаниеИспользуемыхОбъектов(УзелОбмена)

	СтруктураОписания = Новый Структура();

	ОписаниеИспользуемыхМетаданных = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УзелОбмена, "ВерсияМобильногоПриложения. ИспользуемыеМетаданные");
	ДеревоИспользуемыхМетаданных = ИспользуемыеМетаданные(ОписаниеИспользуемыхМетаданных);

	КореньДереваМетаданных = ДеревоИспользуемыхМетаданных.Строки[0];

	Для Каждого СтрокаКласса Из КореньДереваМетаданных.Строки Цикл

		ИмяКласса = СтрокаКласса.Имя;

		Если ИмяКласса = "Константы" ИЛИ ИмяКласса = "Справочники" ИЛИ ИмяКласса = "Документы" ИЛИ ИмяКласса = "РегистрыСведений" Тогда

			МетаданныеКласса = Метаданные[ИмяКласса];
			
			Для Каждого СтрокаОбъекта Из СтрокаКласса.Строки Цикл
				
				МетаданныеОбъекта = МетаданныеКласса[СтрокаОбъекта.Имя];
				
				СтруктураОписанияОбъекта = ОбменДаннымиСМобильнымиПриложениямиСобытия.ОписаниеОбъекта(МетаданныеОбъекта, Ложь);
				
				Если СтруктураОписанияОбъекта.ИмяКласса = "Справочники" ИЛИ СтруктураОписанияОбъекта.ИмяКласса = "Документы" Тогда
					СтруктураСостава = ОписаниеСоставаОбъекта(МетаданныеОбъекта, СтруктураОписанияОбъекта.ИмяКласса, СтруктураОписанияОбъекта.ИмяОбъекта, ДеревоИспользуемыхМетаданных);
					СтруктураОписания.Вставить(СтруктураОписанияОбъекта.ИмяКласса + СтруктураОписанияОбъекта.ИмяОбъекта, СтруктураСостава);
				КонецЕсли;
				
			КонецЦикла;

		КонецЕсли;

	КонецЦикла;

	Возврат СтруктураОписания;

КонецФункции

// Получает и возвращает массив, содержащий имена ключевых полей регистра сведений,
// т.е. полей, которые участвуют в основном отборе и обязательно должны быть заполнены
// при регистрации изменений.
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданныхРегистрСведений - объект метаданных конкретного регистра сведений.
//
// Возвращаемое значение:
//  Массив - Массив, содержащий имена ключевых полей регистра.
//
Функция КлючевыеПоляРегистраСведений(ОбъектМетаданных)

	МассивПолей = Новый Массив();

	// Для регистров сведений, подчиненных регистратору, отбор возможен только по регистратору.
	Если ОбъектМетаданных.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда
		МассивПолей.Добавить("Регистратор");
		Возврат МассивПолей;
	КонецЕсли;
	
	Если ОбъектМетаданных.ОсновнойОтборПоПериоду Тогда
		МассивПолей.Добавить("Период");
	КонецЕсли;

	Для Каждого Измерение Из ОбъектМетаданных.Измерения Цикл
		Если Измерение.ОсновнойОтбор Тогда
			МассивПолей.Добавить(Измерение.Имя);
		КонецЕсли;
	КонецЦикла;

	Возврат МассивПолей;

КонецФункции

// Получает и возвращает массив, содержащий имена полей регистра сведений.
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданныхРегистрСведений - объект метаданных конкретного регистра сведений
//
// Возвращаемое значение:
//  Массив - массив, содержащий имена полей регистра.
//
Функция ПоляРегистраСведенийДляВыборки(ОбъектМетаданных)

	МассивПолей = КлючевыеПоляРегистраСведений(ОбъектМетаданных);
	
	Для Каждого СтандартныйРеквизит Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
		Если МассивПолей.Найти(СтандартныйРеквизит.Имя) = Неопределено Тогда
			МассивПолей.Добавить(СтандартныйРеквизит.Имя);
		КонецЕсли;
	КонецЦикла;

	Для Каждого Измерение Из ОбъектМетаданных.Измерения Цикл
		Если МассивПолей.Найти(Измерение.Имя) = Неопределено Тогда
			МассивПолей.Добавить(Измерение.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Ресурс Из ОбъектМетаданных.Ресурсы Цикл
		МассивПолей.Добавить(Ресурс.Имя);
	КонецЦикла;
	
	Для Каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
		МассивПолей.Добавить(Реквизит.Имя);
	КонецЦикла;

	Возврат МассивПолей;

КонецФункции

#КонецОбласти

#КонецОбласти
