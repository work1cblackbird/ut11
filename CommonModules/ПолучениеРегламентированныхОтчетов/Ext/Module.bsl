///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "ИнтернетПоддержкаПользователей.ПолучениеРегламентированныхОтчетов".
// ОбщийМодуль.ПолучениеРегламентированныхОтчетов.
//
// Серверные процедуры и функции загрузки регламентированных отчетов:
//  - получение актуальных файлов регламентированных отчетов регламентным заданием;
//  - получение актуальных файлов регламентированных отчетов и обработка по требованию прикладной подсистемы;
//  - изменения настроек загрузки регламентированных отчетов;
//  - обработки событий Библиотеки технологии сервиса;
//  - обработки событий Библиотеки стандартных подсистем.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Выполняет загрузку, обновление регламентированных отчетов и обработку данных.
//
// Возвращаемое значение:
//  Структура - содержит результат обновления регламентированного отчета:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//                  может быть обработан вызывающим функционалом:
//          <Пустая строка> - обновление выполнено успешно;
//          "ОбновлениеНеТребуется" - обновление не обнаружено;
//          "НеверныйЛогинИлиПароль" - неверный логин или пароль;
//          "ОшибкаПодключения" - ошибка при подключении к сервису;
//          "ОшибкаСервиса" - внутренняя ошибка сервиса;
//          "НеизвестнаяОшибка" - при получении информации возникла
//          неизвестная (необрабатываемая) ошибка;
//          "НеОбработан" - файл регламентированного отчета успешно загружен, но не обработан.
//          Ошибка может возникнуть, если отсутствуют алгоритмы обработки файла
//          см. процедуру ПриЗагрузкеРегламентированногоОтчета;
//          "СервисВременноНедоступен" - на сервер ведутся регламентные работы;
//          "НеизвестныйРегламентированныйОтчетИлиПрограмма" - регламентированный отчет или программа
//          в сервисе не обнаружены по переданному идентификатору;
//          "ФайлНеЗагружен" - при загрузке файлов регламентированного отчета возникли ошибки;
//          "НетДоступаКПрограмме" - отсутствует доступ к программе на Портале 1С:ИТС;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция ОбновитьРегламентированныеОтчеты() Экспорт
	
	РезультатОбновления = Новый Структура;
	РезультатОбновления.Вставить("КодОшибки",          "");
	РезультатОбновления.Вставить("СообщениеОбОшибке",  "");
	РезультатОбновления.Вставить("ИнформацияОбОшибке", "");
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		ВызватьИсключение НСтр("ru = 'При работе в модели сервиса информация о регламентированных отчетах
			|загружается из поставляемых данных.'");
	КонецЕсли;
	
	Результат = ДанныеАутентификации();
	Если Результат.Ошибка Тогда
		РезультатОперации = Новый Структура;
		РезультатОперации.Вставить("КодОшибки",          КодОшибкиНеверныйЛогинИлиПароль());
		РезультатОперации.Вставить("СообщениеОбОшибке",  Результат.ИнформацияОбОшибке);
		РезультатОперации.Вставить("ИнформацияОбОшибке", Результат.ИнформацияОбОшибке);
		Возврат РезультатОперации;
	КонецЕсли;
	ДанныеАутентификации = Результат.ДанныеАутентификации;
	
	// 1. Проверка доступности обновления.
	ПроверитьДоступностьОбновления();
	
	// 2. Из сервиса загружается информация об актуальных версиях регламентированных отчетов,
	// а также файлы регламентированных отчетов.
	РезультатОперации = СлужебнаяОпределитьДанныеРегламентированныхОтчетов(ДанныеАутентификации);
	
	Если РезультатОперации.Ошибка Тогда
		ЗаполнитьЗначенияСвойств(
			РезультатОбновления,
			РезультатОперации,
			"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
		Возврат РезультатОбновления;
	КонецЕсли;
	
	// 3. Обработка файлов потребителями подсистемы.
	НеОбработанные = ОбработатьФайлыРегламентированныхОтчетов(
		РезультатОперации.ДанныеРегламентированныхОтчетов);
	
	Если НеОбработанные.Количество() > 0 Тогда
		РезультатОбновления.КодОшибки = КодОшибкиНеОбработан();
		РезультатОбновления.СообщениеОбОшибке  = НСтр("ru = 'Не удалось обработать обновления регламентированных отчетов.'");
		РезультатОбновления.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При обработке загруженных обновлений регламентированных отчетов %1 возникли ошибки.'"),
			СтрСоединить(НеОбработанные, ","));
	КонецЕсли;
	
	Возврат РезультатОбновления;
	
КонецФункции

// Создает описание версии регламентированного отчета, которая используется в программе.
//
// Возвращаемое значение:
//  Структура - содержит перечень значений необходимых для обновления версии регламентированного отчета:
//    *Наименование            - Строка - пользовательское представление регламентированного отчета.
//                               Длина не более 150 символов;
//    *Идентификатор           - Строка - идентификатор регламентированного отчета в сервисе.
//                               Поле обязательно для заполнения.
//                               Если передана пустая строка, тогда будет вызвано исключение.
//                               Длина не более 50 символов;
//    *Версия                  - Число - номер актуальной версии регламентированного отчета.
//                               Если передан 0, тогда будет вызвано исключение.
//                               Длина не более 11 символов;
//    *ИдентификаторВидаОтчета - Строка - идентификатор вида регламентированного отчета в сервисе.
//                               Поле обязательно для заполнения.
//                               Если передана пустая строка, тогда будет вызвано исключение.
//                               Длина не более 50 символов;
//
Функция ОписаниеВерсииРегламентированногоОтчета() Экспорт
	
	Описатель = Новый Структура;
	Описатель.Вставить("Наименование",            "");
	Описатель.Вставить("Идентификатор",           "");
	Описатель.Вставить("Версия",                  0);
	Описатель.Вставить("ИдентификаторВидаОтчета", "");
	
	Возврат Описатель;
	
КонецФункции

// Добавляет информацию о новой версии регламентированного отчета или изменяет номер загруженной версии.
// Процедуру следует использовать, если выполняется обновление данных не из сервиса регламентированных отчетов.
//
// Параметры:
//  ОписаниеВерсии - Структура - описание версии регламентированного отчета.
//                               См. ОписаниеВерсииРегламентированногоОтчета.
//
Процедура УстановитьВерсиюРегламентированногоОтчета(ОписаниеВерсии) Экспорт
	
	ЭтоОбластьДанных = ОбщегоНазначения.РазделениеВключено()
		И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных();
		
	Если ЭтоОбластьДанных Тогда
		ВызватьИсключение НСтр("ru = 'При работе в модели сервиса информация о регламентированных отчетах
			|загружается в неразделенном режиме.'");
	КонецЕсли;
	
	Если ПустаяСтрока(ОписаниеВерсии.Идентификатор) Тогда
		ВызватьИсключение НСтр("ru = 'Не заполнен идентификатор регламентированного отчета.'");
	КонецЕсли;
	
	Если ПустаяСтрока(ОписаниеВерсии.ИдентификаторВидаОтчета) Тогда
		ВызватьИсключение НСтр("ru = 'Не заполнен идентификатор вида регламентированного отчета.'");
	КонецЕсли;
	
	Если ОписаниеВерсии.Версия = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не задан номер версии регламентированного отчета.'");
	КонецЕсли;
	
	Если ПустаяСтрока(ОписаниеВерсии.Наименование) Тогда
		ВызватьИсключение НСтр("ru = 'Не заполнено наименование регламентированного отчета.'");
	КонецЕсли;
	
	ОписаниеВерсии = ОписаниеДанныхФайлаРегламентированногоОтчета(
		Неопределено,
		ОписаниеВерсии);
	УстановитьПривилегированныйРежим(Истина);
	ОбновитьСлужебныеДанныеРегламентированногоОтчета(ОписаниеВерсии);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ИнтеграцияСБиблиотекойСтандартныхПодсистем

#Область БСПБазоваяФункциональность

// Интеграция с подсистемой СтандартныеПодсистемы.БазоваяФункциональность.
//
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда 
		Возврат;
	КонецЕсли;
	
	НовыеРазрешения = Новый Массив;
	МодульРаботаВБезопасномРежиме = ОбщегоНазначения.ОбщийМодуль("РаботаВБезопасномРежиме");
	
	Разрешение = МодульРаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTPS",
		ХостСервисаРегламентированныхОтчетов(),
		443,
		НСтр("ru = 'Сервис регламентированных отчетов (ru)'"));
	НовыеРазрешения.Добавить(Разрешение);
	
	ЗапросыРазрешений.Добавить(МодульРаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(НовыеРазрешения));
	
КонецПроцедуры

#КонецОбласти

#Область БСПОбновлениеИнформационнойБазы

// Заполняет список обработчиков обновления информационной базы.
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия              = "2.6.5.14";
		Обработчик.Процедура           = "ПолучениеРегламентированныхОтчетов.НастроитьОбновленияРегламентированныхОтчетов";
		Обработчик.ОбщиеДанные         = Ложь;
		Обработчик.НачальноеЗаполнение = Ложь;
		Обработчик.РежимВыполнения     = "Отложенно"; 
		Обработчик.Идентификатор       = Новый УникальныйИдентификатор("2e0cf784-5a63-4e2f-841e-c8b129f3bdaf");
		Обработчик.Комментарий         = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1. Настройка обновлений регламентированных отчетов"".'"),
			ИмяСобытияЖурналаРегистрации());
	КонецЕсли;
	
КонецПроцедуры

// Выполняет заполнение константы ВариантОбновленияРегламентированныхОтчетов.
//
Процедура НастроитьОбновленияРегламентированныхОтчетов(Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Установка значения константы ВариантОбновленияРегламентированныхОтчетов и добавление
			|регламентного задания ОбновлениеРегламентированныхОтчетов. Начало обновления.'"),
		Ложь);
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	ЗаданияОбновления = ЗаданияОбновлениеРегламентированныхОтчетов();
	Если ЗаданияОбновления.Количество() <> 0 Тогда
		Если ЗаданияОбновления[0].Использование
			И ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки() Тогда
			Константы.ВариантОбновленияРегламентированныхОтчетов.Установить(1);
		КонецЕсли;
	Иначе
		ДобавитьРегламентноеЗаданиеОбновленияРегламентированныхОтчетов(Ложь);
	КонецЕсли;
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Установка значения константы ВариантОбновленияРегламентированныхОтчетов и добавление
			|регламентного задания ОбновлениеРегламентированныхОтчетов. Успешно завершено.'"),
		Ложь);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ИнтеграцияСБиблиотекойТехнологииСервиса

#Область БТСПоставляемыеДанные

// См. ПоставляемыеДанныеПереопределяемый.ПолучитьОбработчикиПоставляемыхДанных.
//
Процедура ПриОпределенииОбработчиковПоставляемыхДанных(Обработчики) Экспорт
	
	ВидыДанных = ВидыПоставляемыхДанныхРегламентированныеОтчеты();
	Для Каждого ВидДанных Из ВидыДанных Цикл 
		СтрОбработчик = Обработчики.Добавить();
		СтрОбработчик.ВидДанных      = ВидДанных;
		СтрОбработчик.КодОбработчика = ВидДанных;
		СтрОбработчик.Обработчик     = ОбщегоНазначения.ОбщийМодуль("ПолучениеРегламентированныхОтчетов");
	КонецЦикла;
	
КонецПроцедуры

// Вызывается при получении уведомления о новых данных.
// В теле следует проверить, необходимы ли эти данные приложению,
//  и если ДА - установить флажок Загружать.
// 
// Параметры:
//  Дескриптор - ОбъектXDTO Descriptor.
//  Загружать - булево, возвращаемое.
//
Процедура ДоступныНовыеДанные(Знач Дескриптор, Загружать) Экспорт
	
	ВидДанных = Дескриптор.DataType;
	Если СтрНайти(ВидДанных, ВидПоставляемыхДанныхРегламентированныеОтчеты()) = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Идентификатор           = "";
	Версия                  = "";
	ИдентификаторВидаОтчета = "";
	Для Каждого Характеристика Из Дескриптор.Properties.Property Цикл
		Если Характеристика.Code = "Идентификатор" Тогда
			Идентификатор = Характеристика.Value;
		ИначеЕсли Характеристика.Code = "Версия" Тогда
			Версия = Число(Характеристика.Value);
		ИначеЕсли Характеристика.Code = "ИдентификаторВидаОтчета" Тогда
			ИдентификаторВидаОтчета = Характеристика.Value;
		КонецЕсли;
	КонецЦикла;
	
	ВидыРегламентированныхОтчетов = ВидыРегламентированныхОтчетов();
	Для Каждого ВидРегламентированногоОтчета Из ВидыРегламентированныхОтчетов Цикл
		Если ВидРегламентированногоОтчета.ИдентификаторВида = ИдентификаторВидаОтчета Тогда
			Загружать = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не Загружать Тогда
		Возврат;
	КонецЕсли;
	
	Настройки = НастройкиРегламентированногоОтчета(Идентификатор);
	Загружать = (Настройки = Неопределено Или Настройки.Версия < Версия);
	
КонецПроцедуры

// Вызывается после вызова ДоступныНовыеДанные, позволяет разобрать данные.
//
// Параметры:
//  Дескриптор - ОбъектXDTO - Дескриптор.
//  ПутьКФайлу - Строка - Полное имя извлеченного файла. Файл будет автоматически удален 
//                        после завершения процедуры.
//
Процедура ОбработатьНовыеДанные(Знач Дескриптор, Знач ПутьКФайлу) Экспорт
	
	ВидДанных = Дескриптор.DataType;
	Если СтрНайти(ВидДанных, ВидПоставляемыхДанныхРегламентированныеОтчеты()) = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеФайла = ОписаниеДанныхФайлаРегламентированногоОтчета(
		ПоместитьВоВременноеХранилище(
			Новый ДвоичныеДанные(ПутьКФайлу)));
	
	ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
	Для Каждого Характеристика Из Дескриптор.Properties.Property Цикл
		Если Характеристика.Code = "Идентификатор" Тогда
			ОписаниеФайла.Идентификатор = Характеристика.Value;
		ИначеЕсли Характеристика.Code = "ИдентификаторВидаОтчета" Тогда
			ОписаниеФайла.ИдентификаторВидаОтчета = Характеристика.Value;
		ИначеЕсли Характеристика.Code = "Версия" Тогда
			ОписаниеФайла.Версия = ОписаниеТипаЧисло.ПривестиЗначение(Характеристика.Value);
		ИначеЕсли Характеристика.Code = "Наименование" Тогда
			ОписаниеФайла.Наименование = Характеристика.Value;
		ИначеЕсли Характеристика.Code = "КонтрольнаяСумма" Тогда
			ОписаниеФайла.КонтрольнаяСумма = Характеристика.Value;
		ИначеЕсли Характеристика.Code = "ОписаниеВерсии" Тогда
			ОписаниеФайла.ОписаниеВерсии = Характеристика.Value;
		ИначеЕсли Характеристика.Code = "Размер" Тогда
			ОписаниеФайла.Размер = ОписаниеТипаЧисло.ПривестиЗначение(Характеристика.Value);
		КонецЕсли;
	КонецЦикла;
	
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Начало обработки Файл регламентированного отчета %1.'"),
			ОписаниеФайла.Идентификатор),
		Ложь);
	
	Обработан = Ложь;
	ДополнительныеПараметры = Новый Структура;
	
	ПриЗагрузкеРегламентированногоОтчета(
		ОписаниеФайла,
		Обработан,
		ДополнительныеПараметры);
	
	Если Не Обработан Тогда
		
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось обработать поставляемые данные регламентированного отчета:
				|Идентификатор: %1
				|Версия: %2'"),
			ОписаниеФайла.Идентификатор,
			ОписаниеФайла.Версия);
		
		ЗаписатьИнформациюВЖурналРегистрации(СообщениеОбОшибке);
		
	КонецЕсли;
	
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Завершена обработка файла регламентированного отчета %1.'"),
			ОписаниеФайла.Идентификатор),
		Ложь);
	
КонецПроцедуры

// Вызывается при отмене обработки данных в случае сбоя
//
Процедура ОбработкаДанныхОтменена(Знач Дескриптор) Экспорт
	
	МодульПоставляемыеДанные = ОбщегоНазначения.ОбщийМодуль("ПоставляемыеДанные");
	
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Обработка поставляемых данных не выполнена.
				|Поставляемые данные:
				|%1'"),
			МодульПоставляемыеДанные.ПолучитьОписаниеДанных(Дескриптор)));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ИнтеграцияПодсистемИнтернетПоддержкиПользователей

// Вызывается при изменении логина и пароля пользователя ИПП в
// информационной базе из всех контекстов использования библиотеки.
//
Процедура ПриИзмененииДанныхАутентификации(Логин, Пароль) Экспорт
	
	Если ЗначениеЗаполнено(Логин) Тогда
		Если Константы.ВариантОбновленияРегламентированныхОтчетов.Получить() = 0 Тогда
			Константы.ВариантОбновленияРегламентированныхОтчетов.Установить(1);
		Иначе
			УстановитьИспользованиеРегламентныхЗаданий(Истина);
		КонецЕсли;
	Иначе
		Если Константы.ВариантОбновленияРегламентированныхОтчетов.Получить() = 1 Тогда
			УстановитьИспользованиеРегламентныхЗаданий(Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из обработчика ПриСозданииНаСервере() панели администрирования
// БИП, выполняется настройку отображения элементов управления для подсистем
// библиотеки ИПП.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма панели управления.
//
Процедура ИнтернетПоддержкаИСервисыПриСозданииНаСервере(Форма) Экспорт
	
	Если ИнтерактивнаяЗагрузкаРегламентированныхОтчетовДоступна() Тогда
		Форма.Элементы.ГруппаОбновлениеРегламентированныхОтчетов.Видимость = Истина;
	Иначе
		Форма.Элементы.ГруппаОбновлениеРегламентированныхОтчетов.Видимость = Ложь;
	КонецЕсли;
	
	Если Не Форма.Элементы.ГруппаОбновлениеРегламентированныхОтчетов.Видимость Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ВариантОбновленияРегламентированныхОтчетов = Константы.ВариантОбновленияРегламентированныхОтчетов.Получить();
	Форма.ФайлРегламентированныхОтчетов = Константы.ФайлРегламентированныхОтчетов.Получить();
	Форма.ВариантОбновленияРегламентированныхОтчетовПредыдущееЗначение = Форма.ВариантОбновленияРегламентированныхОтчетов;
	
	УстановитьПривилегированныйРежим(Истина);
	ЗаданияОбновления = ЗаданияОбновлениеРегламентированныхОтчетов();
	Если ЗаданияОбновления.Количество() = 0 Тогда
		ДобавитьРегламентноеЗаданиеОбновленияРегламентированныхОтчетов(Ложь);
		ЗаданияОбновления = ЗаданияОбновлениеРегламентированныхОтчетов();
	КонецЕсли;
	
	Если ЗаданияОбновления.Количество() <> 0 Тогда
		Форма.Элементы.ДекорацияРасписаниеОбновленияРегламентированныхОтчетов.Заголовок =
			ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеРасписания(
				ЗаданияОбновления[0].Расписание);
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки()
			И Константы.ВариантОбновленияРегламентированныхОтчетов.Получить() = 1 Тогда
		Форма.Элементы.ДекорацияОбновлениеРегламентированныхОтчетовНеВыполняется.Видимость = Истина;
	Иначе
		Форма.Элементы.ДекорацияОбновлениеРегламентированныхОтчетовНеВыполняется.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Создает структуру с описанием вида регламентированного отчета.
//
// Возвращаемое значение:
//  Структура - содержит перечень значений необходимых для подключения вида регламентированного отчета:
//    * ИдентификаторВида - Строка - идентификатор вида регламентированного отчета.
//
Функция ОписаниеВидаРегламентированногоОтчета() Экспорт
	
	Описатель = Новый Структура;
	Описатель.Вставить("ИдентификаторВида", "");
	
	Возврат Описатель;
	
КонецФункции

// Заполняет описание используемых в подсистеме хостов сервисов Интернет-поддержки.
//
// Параметры:
//  ХостыСервисовИнтернетПоддержки - Соответствие - хост и название используемого сервиса.
//
Процедура ПриЗаполненииХостовСервисовИнтернетПоддержки(ХостыСервисовИнтернетПоддержки) Экспорт
	
	ХостыСервисовИнтернетПоддержки.Вставить(
		ХостСервисаРегламентированныхОтчетов(),
		НСтр("ru = 'Получение регламентированных отчетов'"));
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаРегламентированныхОтчетов

// Вызываются алгоритмы обработки файла, загруженного из сервиса регламентированных отчетов,
// а также фиксируется дата обновления регламентированного отчета.
//
// Параметры:
//  ОписаниеФайла - Структура - см. функцию ОписаниеДанныхФайлаРегламентированногоОтчета.
//  Обработан - Булево - если Ложь, при обработке файла обновления были ошибки
//                       и его необходимо загрузить повторно;
//  ДополнительныеПараметры - Структура - содержит дополнительные параметры обработки.
//
Процедура ПриЗагрузкеРегламентированногоОтчета(
		ОписаниеФайла,
		Обработан,
		ДополнительныеПараметры) Экспорт
		
	ИнтеграцияПодсистемБИП.ПриЗагрузкеРегламентированногоОтчета(
		ОписаниеФайла,
		Обработан,
		ДополнительныеПараметры);
	ПолучениеРегламентированныхОтчетовПереопределяемый.ПриЗагрузкеРегламентированногоОтчета(
		ОписаниеФайла,
		Обработан,
		ДополнительныеПараметры);
	
	Если Обработан Тогда
		
		// Вне зависимости от прав пользователя данные в регистрах сведений
		// Версии регламентированных отчетов данные должны быть обновлены после
		// обработки файла регламентированного отчета.
		УстановитьПривилегированныйРежим(Истина);
		ОбновитьСлужебныеДанныеРегламентированногоОтчета(ОписаниеФайла);
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиРегламентныхЗаданий

// Обработчик регламентного задания "ОбновлениеРегламентированныхОтчетов"
//
Процедура ОбновлениеРегламентированныхОтчетов() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ОбновлениеРегламентированныхОтчетов);
		
	РежимОбновления = Константы.ВариантОбновленияРегламентированныхОтчетов.Получить();
	Если РежимОбновления = 2 Тогда
		
		ИмяФайла = Константы.ФайлРегламентированныхОтчетов.Получить();
		Если Не ЗначениеЗаполнено(ИмяФайла) Тогда
			ЗаписатьИнформациюВЖурналРегистрации(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Файл %1 с регламентированными отчетами не найден.'"),
					ИмяФайла),
				Истина,
				Метаданные.РегламентныеЗадания.ОбновлениеРегламентированныхОтчетов);
			Возврат;
		КонецЕсли;
		
		ФайлРегламентированныхОтчетов = Новый Файл(ИмяФайла);
		Если Не ФайлРегламентированныхОтчетов.Существует() Тогда
			ЗаписатьИнформациюВЖурналРегистрации(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Файл %1 с регламентированными отчетами не существует.'"),
					ИмяФайла),
				Истина,
				Метаданные.РегламентныеЗадания.ОбновлениеРегламентированныхОтчетов);
			Возврат;
		КонецЕсли;
		
		ОбновитьРегламентированныеОтчетыИзФайла(ИмяФайла);
		
	ИначеЕсли РежимОбновления = 1 Тогда
		
		Если Не ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки() Тогда
			ЗаписатьИнформациюВЖурналРегистрации(
				НСтр("ru = 'Не заполнены данные аутентификации Интернет-поддержки пользователей.
					|Обновление регламентированных отчетов из сервиса не возможно.'"),
			Ложь,
			Метаданные.РегламентныеЗадания.ОбновлениеРегламентированныхОтчетов);
			Возврат;
		КонецЕсли;
		
		ОбновитьРегламентированныеОтчеты();
		
	КонецЕсли;
	
КонецПроцедуры

// Создает регламентное задание "ОбновлениеРегламентированныхОтчетов" 
// при обновлении ИБ или при подключении Интернет-поддержки пользователей.
//
// Параметры:
//  Использование - Булево - признак использования регламентного задания.
//
Процедура ДобавитьРегламентноеЗаданиеОбновленияРегламентированныхОтчетов(Использование = Истина)
	
	// При работе в режиме коробки обновление регламентированных отчетов производится
	// регламентным заданием.
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
		
	Отбор = Новый Структура;
	Отбор.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ОбновлениеРегламентированныхОтчетов);
	ЗаданияОбновления = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	
	Если ЗаданияОбновления.Количество() = 0 Тогда
		
		// Чтобы не создавать пиковых нагрузок на сервис,
		// время обновления будет выбрано случайным образом
		// между 01:00 и 08:00.
		Генератор = Новый ГенераторСлучайныхЧисел;
		Расписание = Новый РасписаниеРегламентногоЗадания;
		Расписание.ВремяНачала       = Дата("00010101010000") + Генератор.СлучайноеЧисло(0, 25200);
		Расписание.ПериодПовтораДней = 1;
		
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("Использование", Использование);
		ПараметрыЗадания.Вставить("Метаданные",    Метаданные.РегламентныеЗадания.ОбновлениеРегламентированныхОтчетов);
		ПараметрыЗадания.Вставить("Расписание",    Расписание);
		ПараметрыЗадания.Вставить("Наименование",  НСтр("ru = 'Обновление регламентированных отчетов'"));
		
		НачатьТранзакцию();
		
		Попытка
			РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
			Если Использование И Константы.ВариантОбновленияРегламентированныхОтчетов.Получить() = 0 Тогда
				Константы.ВариантОбновленияРегламентированныхОтчетов.Установить(1);
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ИнформацияОбОшибке = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЗаписатьИнформациюВЖурналРегистрации(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось создать регламентное задание обновления регламентированных отчетов по причине:
							|%1'"),
						ИнформацияОбОшибке),
					Истина,
					Метаданные.РегламентныеЗадания.ОбновлениеРегламентированныхОтчетов);
			ВызватьИсключение ИнформацияОбОшибке;
		КонецПопытки;
		
		ЗаписатьИнформациюВЖурналРегистрации(
			НСтр("ru = 'Создано регламентное задание обновления регламентированных отчетов.'"),
			Ложь,
			Метаданные.РегламентныеЗадания.ОбновлениеРегламентированныхОтчетов);
	КонецЕсли;
	
КонецПроцедуры

// Изменяет признак использования регламентного задания "ОбновлениеРегламентированныхОтчетов".
//
// Параметры:
//  Использование - Булево - признак использования регламентного задания.
//
Процедура УстановитьИспользованиеРегламентныхЗаданий(Использование) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Задания = ЗаданияОбновлениеРегламентированныхОтчетов();
	Если Задания.Количество() <> 0 Тогда
		Для Каждого Задание Из Задания Цикл
			РегламентныеЗаданияСервер.УстановитьИспользованиеРегламентногоЗадания(
				Задание,
				Использование);
		КонецЦикла;
	Иначе
		ДобавитьРегламентноеЗаданиеОбновленияРегламентированныхОтчетов(Использование);
	КонецЕсли;
	
КонецПроцедуры

// Определяет созданные регламентные задания ОбновлениеРегламентированныхОтчетов.
//
// Возвращаемое значение:
//  Массив из РегламентноеЗадание - массив регламентных заданий см. описание метода РегламентноеЗадание
//  в синтакс-помощнике.
//
Функция ЗаданияОбновлениеРегламентированныхОтчетов() Экспорт
	
	Отбор = Новый Структура;
	Отбор.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ОбновлениеРегламентированныхОтчетов);
	Возврат РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаДанныхРегламентированныхОтчетов

// Выполняет загрузку данных регламентированных отчетов из сервиса.
//
// Параметры:
//  ДанныеАутентификации - Структура - логин и пароль для авторизации в сервисе регламентированных отчетов.
//
// Возвращаемое значение:
//  Структура - содержит результат загрузки данных регламентированных отчетов:
//    * Ошибка    - Булево - признак ошибки загрузки данных;
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//    может быть обработан вызывающим функционалом:
//          <Пустая строка> - определение выполнено успешно;
//          "ОбновлениеНеТребуется" - обновление не обнаружено;
//          "НеверныйЛогинИлиПароль" - неверный логин или пароль;
//          "ОшибкаПодключения" - ошибка при подключении к сервису;
//          "ОшибкаСервиса" - внутренняя ошибка сервиса;
//          "НеизвестнаяОшибка" - при получении информации возникла
//          неизвестная (не обрабатываемая) ошибка;
//          "СервисВременноНеДоступен" - на сервер ведутся регламентные работы;
//          "НеизвестныйРегламентированныйОтчетИлиПрограмма" - регламентированный отчет или программа
//          в сервисе не обнаружен по переданному идентификатору;
//          "ФайлНеЗагружен" - при загрузке файлов регламентированного отчета возникли ошибки;
//          "НетДоступаКПрограмме" - отсутствует доступ к программе на Портале 1С:ИТС;
//    *СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция СлужебнаяОпределитьДанныеРегламентированныхОтчетов(ДанныеАутентификации)
	
	ПараметрыПолучения = ПодготовитьПараметрыПолученияИнформацииОбОбновлениях();
	РезультатОперации = ИнформацияОбАктуальныхВерсияхРегламентированныхОтчетов(
		ПараметрыПолучения.ВидыРегламентированныхОтчетов,
		ПараметрыПолучения.ВерсииРегламентированныхОтчетов,
		ДанныеАутентификации);
	
	Если РезультатОперации.Ошибка Тогда
		Возврат РезультатОперации;
	КонецЕсли;
	
	// Если номер версии регламентированного отчета в базе равен номеру версии в сервисе,
	// обновление не будет загружено.
	УдалитьАктуальныеВерсии(РезультатОперации.ДанныеРегламентированныхОтчетов);
	
	Если РезультатОперации.ДанныеРегламентированныхОтчетов.Количество() = 0 Тогда
		СообщениеОбОшибке = НСтр("ru = 'Обновление не требуется. Загружены актуальные версии регламентированных отчетов.'");
		РезультатОперации.Ошибка             = Истина;
		РезультатОперации.КодОшибки          = КодОшибкиОбновлениеНеТребуется();
		РезультатОперации.СообщениеОбОшибке  = СообщениеОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = СообщениеОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	РезультатЗагрузки = ЗагрузитьФайлыРегламентированныхОтчетов(
		РезультатОперации.ДанныеРегламентированныхОтчетов,
		ДанныеАутентификации);
	
	Если РезультатЗагрузки.Ошибка Тогда
		ЗаполнитьЗначенияСвойств(
			РезультатОперации,
			РезультатЗагрузки,
			"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
		РезультатОперации.Ошибка = Истина;
		Возврат РезультатОперации;
	КонецЕсли;
	
	Возврат РезультатОперации;
	
КонецФункции

#КонецОбласти

#Область ВызовОперацийСервиса

////////////////////////////////////////////////////////////////////////////////
// Вызов операции /actual-regulated-report-version

// Возвращает список описаний актуальных версий регламентированных отчетов, которые доступны пользователю
// на текущий момент.
//
// Параметры:
//  ВидыРегламентированныхОтчетов - Массив из Строка- см. функцию ВидыРегламентированныхОтчетов();
//  РегламентированныеОтчеты - Массив из Структура - см. функцию ВерсииРегламентированныхОтчетов();
//  ДанныеАутентификации - Структура - параметры аутентификации пользователя Интернет-поддержки.
//
// Возвращаемое значение:
//  Структура - содержит результат операции:
//    * Ошибка - Булево - Истина, если в не удалось получить информацию из сервиса;
//    * СообщениеОбОшибке - Строка - описание ошибки для пользователя;
//    * ИнформацияОбОшибке - Строка - описание ошибки для администратора;
//    * ДанныеРегламентированныхОтчетов - ТаблицаЗначений - см. функцию ОписаниеДанныхРегламентированныхОтчетов().
//
Функция ИнформацияОбАктуальныхВерсияхРегламентированныхОтчетов(
		ВидыРегламентированныхОтчетов,
		РегламентированныеОтчеты,
		ДанныеАутентификации)
	
	ТекстЖурналРегистрации = НСтр("ru = 'Начало получения информации об актуальных версиях регламентированных отчетов.'");
	
	ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	РезультатОперации = Новый Структура;
	РезультатОперации.Вставить("КодОшибки",                       "");
	РезультатОперации.Вставить("Ошибка",                          Ложь);
	РезультатОперации.Вставить("СообщениеОбОшибке",               "");
	РезультатОперации.Вставить("ИнформацияОбОшибке",              "");
	РезультатОперации.Вставить("ДанныеРегламентированныхОтчетов", ОписаниеДанныхРегламентированныхОтчетов());
	
	Если ВидыРегламентированныхОтчетов.Количество() = 0 Тогда
		
		СообщениеОбОшибке = НСтр("ru = 'Обновление не требуется. Не заданы виды регламентированных отчетов.'");
		РезультатОперации.КодОшибки         = КодОшибкиОбновлениеНеТребуется();
		РезультатОперации.Ошибка            = Ложь;
		РезультатОперации.СообщениеОбОшибке = СообщениеОбОшибке;
		
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось получить актуальные версии регламентированных отчетов.
					|%1'"),
				РезультатОперации.СообщениеОбОшибке);
		
		ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Ложь);
		
		Возврат РезультатОперации;
	КонецЕсли;
	
	ПараметрыПодключения = ИнициализироватьПараметрыОбновления();
	
	URLОперации = URLОперацииСервисаРегламентированныхОтчетов(
		"/actual-regulated-report-version");
	
	ПараметрыЗапросаJSON = ActualRegulatedReportVersion(
		ВидыРегламентированныхОтчетов,
		РегламентированныеОтчеты);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		ДанныеАутентификации.Логин,
		ДанныеАутентификации.Пароль,
		ПараметрыОтправки);
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки         = ПереопределитьКодОшибкиСервиса(РезультатОтправки.КодСостояния);
		РезультатОперации.Ошибка            = Истина;
		РезультатОперации.СообщениеОбОшибке = ПереопределитьСообщениеПользователю(РезультатОперации.КодОшибки);
		
		РезультатОперации.ИнформацияОбОшибке = Новый ФорматированнаяСтрока(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось получить актуальные версии регламентированных отчетов.
					|
					|%1
					|
					|Техническая информация об ошибке:
					|При получении информации об актуальных версиях регламентированных отчетов сервис вернул ошибку.
					|URL: %2
					|Код ошибки: %3
					|Подробная информация:
					|%4'"),
				Строка(РезультатОперации.СообщениеОбОшибке),
				URLОперации,
				РезультатОтправки.КодОшибки,
				РезультатОтправки.ИнформацияОбОшибке));
		
		ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	ПрочитатьДанные_ActualRegulatedReportVersion(
		РезультатОтправки.Содержимое,
		РезультатОперации.ДанныеРегламентированныхОтчетов);
	
	ТекстЖурналРегистрации = НСтр("ru = 'Завершено получение актуальных версий регламентированных отчетов.'");
	
	ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	Возврат РезультатОперации;
	
КонецФункции

// Формирует параметры запроса для операции
// /actual-regulated-report-version.
//
Функция ActualRegulatedReportVersion(ВидыРегламентированныхОтчетов, РегламентированныеОтчеты)
	
	//{
	// "program_nick": "string",
	// "version": 0,
	// "reportTypes": [
	//  "string"
	// ],
	// "installedReports": [
	//   {
	//    "version": 0,
	//    "reportIdentifier": "string"
	//   }
	//  ]
	//}
	
	ИмяПрограммы    = ИнтернетПоддержкаПользователей.СлужебнаяИмяПрограммы();
	ВерсияПрограммы = ИнтернетПоддержкаПользователей.ВерсияКонфигурации();
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("programNick");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ИмяПрограммы);
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("programVersion");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ВерсияПрограммы);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("reportTypes");
	ЗаписьДанныхСообщения.ЗаписатьНачалоМассива();
	Для Каждого ВидРегламентированногоОтчета Из ВидыРегламентированныхОтчетов Цикл 
		ЗаписьДанныхСообщения.ЗаписатьЗначение(ВидРегламентированногоОтчета.ИдентификаторВида);
	КонецЦикла;
	ЗаписьДанныхСообщения.ЗаписатьКонецМассива();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("installedReports");
	ЗаписьДанныхСообщения.ЗаписатьНачалоМассива();
	Для Каждого РегламентированныйОтчет Из РегламентированныеОтчеты Цикл 
		ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("reportIdentifier");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(РегламентированныйОтчет.Идентификатор);
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("version");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(РегламентированныйОтчет.Версия);
		ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	КонецЦикла;
	ЗаписьДанныхСообщения.ЗаписатьКонецМассива();
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

// Чтение ответа операции actual-regulated-report-version.
//
Процедура ПрочитатьДанные_ActualRegulatedReportVersion(
		ТелоJSON,
		ДанныеРегламентированныхОтчетов)
	
	// Тело ответа:
	// reportIdentifier - идентификатор регламентированного отчета в сервисе;
	// url - ссылка на скачивание файла актуальной версии;
	// version - номер актуальной версии;
	// hashSum - контрольная сумма файла;
	// fileSize - размер файла;
	// regulatedReportName - наименование регламентированного отчета;
	// description - описание версии регламентированного отчета;
	// regulatedReportType - идентификатор вида регламентированного отчета.
	//
	// [
	//  {
	//   "externalVersionUeid": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
	//   "reportIdentifier": "Идентификатор",
	//   "url": "https://fileUrl",
	//   "version": 1,
	//   "hashSum": "Контрольная сумма",
	//   "fileSize": Размер в байтах,
	//   "regulatedReportName": "Имя регламентированного отчета",
	//   "description": "Описание версии регламентированного отчета",
	//   "regulatedReportType": "Идентификатор вида"
	//  }
	// ]
	//
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получен ответ Сервиса регламентированных отчетов:
			|%1'"),
		ТелоJSON);
	
	ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	Попытка
		Данные = ПрочитатьJSON(ЧтениеОтвета);
	Исключение
		
		СообщениеОбОшибке = НСтр("ru = 'Неверный формат ответа Сервиса регламентированных отчетов.'");
		ЗаписатьИнформациюВЖурналРегистрации(СообщениеОбОшибке);
		ВызватьИсключение СообщениеОбОшибке;
		
	КонецПопытки;
	
	ЧтениеОтвета.Закрыть();
	
	Для Каждого ДанныеОтчета Из Данные Цикл 
		
		ОписательВерсии = ДанныеРегламентированныхОтчетов.Добавить();
		ОписательВерсии.Идентификатор           = ЗначениеСвойстваJSON(ДанныеОтчета, "reportIdentifier", "");
		ОписательВерсии.ИдентификаторВидаОтчета = ЗначениеСвойстваJSON(ДанныеОтчета, "regulatedReportType", "");
		ОписательВерсии.Версия                  = ЗначениеСвойстваJSON(ДанныеОтчета, "version", 0);
		ОписательВерсии.Наименование            = ЗначениеСвойстваJSON(ДанныеОтчета, "regulatedReportName", "");
		ОписательВерсии.ИдентификаторФайла      = ЗначениеСвойстваJSON(ДанныеОтчета, "url", "");
		ОписательВерсии.КонтрольнаяСумма        = ЗначениеСвойстваJSON(ДанныеОтчета, "hashSum", "");
		ОписательВерсии.ОписаниеВерсии          = ЗначениеСвойстваJSON(ДанныеОтчета, "description", "");
		ОписательВерсии.Размер                  = ЗначениеСвойстваJSON(ДанныеОтчета, "fileSize", 0);
		
		Если Не ЗначениеЗаполнено(ОписательВерсии.Идентификатор)
			Или Не ЗначениеЗаполнено(ОписательВерсии.Версия)
			Или Не ЗначениеЗаполнено(ОписательВерсии.ИдентификаторВидаОтчета)
			Или Не ЗначениеЗаполнено(ОписательВерсии.ИдентификаторФайла) Тогда
			
			СообщениеОбОшибке = НСтр("ru = 'Неверный формат ответа Сервиса регламентированных отчетов.'");
			ЗаписатьИнформациюВЖурналРегистрации(СообщениеОбОшибке);
			ВызватьИсключение СообщениеОбОшибке;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вызов операции загрузки файлов /version/download/

// Выполняет загрузку файлов по переданным ранее URL.
//
// Параметры:
//  ДанныеРегламентированныхОтчетов - ТаблицаЗначений - см. функцию ОписаниеДанныхРегламентированныхОтчетов();
//  ДанныеАутентификации  - Структура - параметры аутентификации пользователя Интернет-поддержки;
//
// Возвращаемое значение:
//  Структура - содержит результат операции:
//    * Ошибка - Булево - Истина, если в не удалось получить информацию из сервиса;
//    * СообщениеОбОшибке - Строка - описание ошибки для пользователя;
//    * ИнформацияОбОшибке - Строка - описание ошибки для администратора.
//
Функция ЗагрузитьФайлыРегламентированныхОтчетов(ДанныеРегламентированныхОтчетов, ДанныеАутентификации)
	
	РезультатОперации = Новый Структура;
	РезультатОперации.Вставить("КодОшибки",          "");
	РезультатОперации.Вставить("Ошибка",             Ложь);
	РезультатОперации.Вставить("СообщениеОбОшибке",  "");
	РезультатОперации.Вставить("ИнформацияОбОшибке", "");
	
	ПараметрыЗапросаJSON = VersionDownload(ДанныеАутентификации);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод",                    "POST");
	ПараметрыОтправки.Вставить("Таймаут",                  640);
	ПараметрыОтправки.Вставить("ФорматОтвета",             2);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки",       ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("Заголовки",                Заголовки);
	
	Для Каждого ОписательРегламентированногоОтчета Из ДанныеРегламентированныхОтчетов Цикл
		
		ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Получение файла регламентированного отчета: %1'"),
				ОписательРегламентированногоОтчета.ИдентификаторФайла),
			Ложь);
		
		ИнтернетПоддержкаПользователей.ПроверитьURL(ОписательРегламентированногоОтчета.ИдентификаторФайла);
		
		РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
			ОписательРегламентированногоОтчета.ИдентификаторФайла,
			,
			,
			ПараметрыОтправки);
		
		Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
			
			РезультатОперации.КодОшибки          = КодОшибкиФайлНеЗагружен();
			РезультатОперации.Ошибка             = Истина;
			РезультатОперации.СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при получении файла регламентированного отчета %1: 
					|%2'"),
				ОписательРегламентированногоОтчета.Идентификатор,
				РезультатОтправки.СообщениеОбОшибке);
				
			РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось получить файл регламентированного отчета %1.
					|%2
					|
					|Техническая информация об ошибке:
					|При загрузке файла сервис вернул ошибку.
					|Код ошибки: %3.
					|URL Файла: %4
					|Подробная информация:
					|%5'"),
				ОписательРегламентированногоОтчета.Идентификатор,
				РезультатОперации.СообщениеОбОшибке,
				РезультатОперации.КодОшибки,
				ОписательРегламентированногоОтчета.ИдентификаторФайла,
				РезультатОтправки.ИнформацияОбОшибке);
			ЗаписатьИнформациюВЖурналРегистрации(
				РезультатОперации.ИнформацияОбОшибке,
				Истина);
			
			Возврат РезультатОперации;
			
		КонецЕсли;
		
		КонтрольнаяСуммаФайл = ИнтернетПоддержкаПользователей.КонтрольнаяСуммаФайла(РезультатОтправки.Содержимое);
		Если ОписательРегламентированногоОтчета.КонтрольнаяСумма <> КонтрольнаяСуммаФайл Тогда
			РезультатОперации.КодОшибки          = КодОшибкиФайлНеЗагружен();
			РезультатОперации.Ошибка             = Истина;
			РезультатОперации.СообщениеОбОшибке  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при получении файла регламентированного отчета %1: 
					|%2'"),
				ОписательРегламентированногоОтчета.Идентификатор,
				НСтр("ru = 'Получен некорректный файл.'"));
				
			РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось получить файл регламентированного отчета %1.
					|Контрольная сумма полученного файла отличается от ожидаемой.'"),
				ОписательРегламентированногоОтчета.Идентификатор);
			ЗаписатьИнформациюВЖурналРегистрации(РезультатОперации.ИнформацияОбОшибке);
			
			Возврат РезультатОперации;
		КонецЕсли;
		
		ОписательРегламентированногоОтчета.АдресФайла = ПоместитьВоВременноеХранилище(РезультатОтправки.Содержимое);
		
	КонецЦикла;
	
	Возврат РезультатОперации;
	
КонецФункции

// Формирует параметры запроса для операции
// /regulatedReports/version/download/.
//
Функция VersionDownload(ДанныеАутентификации)
	
	// {
	//  "programNick":"nick",
	//  "login": "User",
	//  "password":"Pass"
	// }
	
	ИмяПрограммы = ИнтернетПоддержкаПользователей.СлужебнаяИмяПрограммы();
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("programNick");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ИмяПрограммы);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("login");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеАутентификации.Логин);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("password");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеАутентификации.Пароль);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

#КонецОбласти

#Область ИнтерактивноеОбновлениеРегламентированныхОтчетов

// Определяет доступность использования обработки интерактивной загрузки
// регламентированных отчетов.
//
// Возвращаемое значение:
//  Булево - определяет возможность использования обработки ОбновлениеРегламентированныхОтчетов
//           Если Истина, обработку можно использовать.
// 
Функция ИнтерактивнаяЗагрузкаРегламентированныхОтчетовДоступна() Экспорт
	
	Возврат Не ОбщегоНазначения.РазделениеВключено()
		И ЗагрузкаРегламентированныхОтчетовДоступна();
	
КонецФункции

// Проверяет наличие доступных обновлений регламентированных отчетов в Сервисе регламентированных отчетов.
//
// Параметры:
//  ДанныеАутентификации - Структура - логин и пароль для авторизации в сервисе регламентированных отчетов;
//  УдалитьАктуальные - Булево - признак удаления актуальных версий регламентированных отчетов.
//
// Возвращаемое значение:
//  Структура - информация о доступных обновлениях:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//                  может быть обработан вызывающим функционалом:
//          <Пустая строка> - обновление выполнено успешно;
//          "НеверныйЛогинИлиПароль" - неверный логин или пароль;
//          "ОшибкаПодключения" - ошибка при подключении к сервису;
//          "ОшибкаСервиса" - внутренняя ошибка сервиса;
//          "НеизвестнаяОшибка" - при получении информации возникла
//          неизвестная (не обрабатываемая) ошибка;
//          "СервисВременноНеДоступен" - на сервер ведутся регламентные работы;
//          "НеизвестныйРегламентированныйОтчетИлиПрограмма" - регламентированный отчет или программа
//          в сервисе не обнаружен по переданному идентификатору;
//          "НетДоступаКПрограмме" - отсутствует доступ к программе на Портале 1С:ИТС;
//          "ОбновлениеНеТребуется" - загружены актуальные версии регламентированных отчетов;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора;
//    * ДоступныеВерсии - Массив из Структура - содержит информацию о доступных обновлениях:
//        ** Идентификатор - Строка - идентификатор регламентированного отчета в сервисе;
//        ** Версия - Строка - номер актуальной версии;
//        ** КонтрольнаяСумма - Число - контрольная сумма файла;
//        ** ОписаниеВерсии - Строка - описание изменений в версии;
//        ** ИдентификаторФайла - Структура - идентификатор файла, который будет использован для загрузки;
//        ** Размер - Число - размер файла;
//        ** Наименование - Строка - наименование регламентированного отчета;
//
Функция СлужебнаяДоступныеОбновленияРегламентированныхОтчетов(
		ДанныеАутентификации,
		УдалитьАктуальные = Ложь) Экспорт
	
	// 1. Проверка доступности обновления.
	ПроверитьДоступностьОбновления();
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда 
		ВызватьИсключение НСтр("ru = 'При работе в модели сервиса информация о регламентированных отчетах
			|загружается из поставляемых данных.'");
	КонецЕсли;
	
	// 2. Определить данные аутентификации.
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("КодОшибки",          "");
	РезультатПроверки.Вставить("СообщениеОбОшибке",  "");
	РезультатПроверки.Вставить("ИнформацияОбОшибке", "");
	РезультатПроверки.Вставить("ДоступныеВерсии ",   Новый Массив);
	
	Если ДанныеАутентификации = Неопределено Тогда
		Результат = ДанныеАутентификации();
		Если Результат.Ошибка Тогда
			РезультатПроверки.КодОшибки = КодОшибкиНеверныйЛогинИлиПароль();
			ЗаполнитьЗначенияСвойств(РезультатПроверки, Результат, "ИнформацияОбОшибке");
			РезультатПроверки.СообщениеОбОшибке = Результат.ИнформацияОбОшибке;
			Возврат РезультатПроверки;
		КонецЕсли;
		ДанныеАутентификации = Результат.ДанныеАутентификации;
	КонецЕсли;
	
	// 3. Из сервиса загружается информация об актуальных версиях регламентированных отчетов,
	// а также ссылки на файл.
	ПараметрыПолучения = ПодготовитьПараметрыПолученияИнформацииОбОбновлениях();
	РезультатОперации = ИнформацияОбАктуальныхВерсияхРегламентированныхОтчетов(
		ПараметрыПолучения.ВидыРегламентированныхОтчетов,
		ПараметрыПолучения.ВерсииРегламентированныхОтчетов,
		ДанныеАутентификации);
		
	Если РезультатОперации.Ошибка Тогда
		ЗаполнитьЗначенияСвойств(
			РезультатПроверки,
			РезультатОперации,
			"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
		Возврат РезультатПроверки;
	КонецЕсли;
	
	// 4. Если номер версии регламентированного отчета в базе равен номеру версии в сервисе,
	// обновление не будет загружено.
	Если УдалитьАктуальные Тогда
		УдалитьАктуальныеВерсии(
			РезультатОперации.ДанныеРегламентированныхОтчетов);
	КонецЕсли;
	
	Для Каждого ОписательВерсии Из РезультатОперации.ДанныеРегламентированныхОтчетов Цикл
		
		ИдентификаторФайла = Новый Структура;
		ИдентификаторФайла.Вставить("ИдентификаторФайла", ОписательВерсии.ИдентификаторФайла);
		ИдентификаторФайла.Вставить("КонтрольнаяСумма",   ОписательВерсии.КонтрольнаяСумма);
		ИдентификаторФайла.Вставить("Размер",             ОписательВерсии.Размер);
		ИдентификаторФайла.Вставить("ОписаниеВерсии",     ОписательВерсии.ОписаниеВерсии);
		
		ДанныеВерсии = Новый Структура;
		ДанныеВерсии.Вставить("Идентификатор",           ОписательВерсии.Идентификатор);
		ДанныеВерсии.Вставить("ИдентификаторВидаОтчета", ОписательВерсии.ИдентификаторВидаОтчета);
		ДанныеВерсии.Вставить("Наименование",            ОписательВерсии.Наименование);
		ДанныеВерсии.Вставить("Версия",                  ОписательВерсии.Версия);
		ДанныеВерсии.Вставить("ОписаниеВерсии",          ОписательВерсии.ОписаниеВерсии);
		ДанныеВерсии.Вставить("Размер",                  ОписательВерсии.Размер);
		ДанныеВерсии.Вставить("ИдентификаторФайла",      ИдентификаторФайла);
		РезультатПроверки.ДоступныеВерсии.Добавить(ДанныеВерсии);
		
	КонецЦикла;
	
	Возврат РезультатПроверки;
	
КонецФункции

// Выполняет обновление данных регламентированных отчетов в фоновом задании.
//
// Параметры:
//  ПараметрыПроцедуры - Структура - данные для обновления;
//  АдресХранилища - Строка - адрес хранилища результат обновления.
//
Процедура ИнтерактивноеОбновлениеРегламентированныхОтчетовИзСервиса(ПараметрыПроцедуры, АдресХранилища) Экспорт
	
	РезультатОбновления = Новый Структура;
	РезультатОбновления.Вставить("КодОшибки",         "");
	РезультатОбновления.Вставить("СообщениеОбОшибке", "");
	
	ДанныеРегламентированныхОтчетов = ПараметрыПроцедуры.ДанныеРегламентированныхОтчетов;
	ДанныеРегламентированныхОтчетов.Колонки.Добавить("АдресФайла", ОбщегоНазначения.ОписаниеТипаСтрока(250));
	
	Если ПараметрыПроцедуры.РежимОбновления = 0 Тогда
		
		Результат = ДанныеАутентификации();
		Если Результат.Ошибка Тогда
			РезультатОбновления.КодОшибки = КодОшибкиНеверныйЛогинИлиПароль();
			РезультатОбновления.СообщениеОбОшибке = Результат.ИнформацияОбОшибке;
			ПоместитьВоВременноеХранилище(РезультатОбновления, АдресХранилища);
			Возврат;
		КонецЕсли;
		
		РезультатЗагрузки = ЗагрузитьФайлыРегламентированныхОтчетов(
			ДанныеРегламентированныхОтчетов,
			Результат.ДанныеАутентификации);
		
		Если РезультатЗагрузки.Ошибка Тогда
			ЗаполнитьЗначенияСвойств(
				РезультатОбновления,
				РезультатЗагрузки,
				"КодОшибки, СообщениеОбОшибке");
			ПоместитьВоВременноеХранилище(РезультатОбновления, АдресХранилища);
			Возврат;
		КонецЕсли;
	Иначе
		Для Каждого ОписаниеРегламентированногоОтчета Из ДанныеРегламентированныхОтчетов Цикл
			Если ОписаниеРегламентированногоОтчета.ДанныеФайла.Размер() = 0 Тогда
				ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Файл регламентированного отчета %1 (%2) имеет размер равный 0.
						|Загрузка данных остановлена.'"),
					ОписаниеРегламентированногоОтчета.Наименование,
					ОписаниеРегламентированногоОтчета.Идентификатор);
				ЗаписатьИнформациюВЖурналРегистрации(
					ТекстИсключения,
					Истина,
					Метаданные.Обработки.ОбновлениеРегламентированныхОтчетов);
				ВызватьИсключение ТекстИсключения;
			КонецЕсли;
			ОписаниеРегламентированногоОтчета.АдресФайла = ПоместитьВоВременноеХранилище(
				ОписаниеРегламентированногоОтчета.ДанныеФайла);
		КонецЦикла;
	КонецЕсли;
	
	ОбработатьФайлыПриИнтерактивнойЗагрузке(
		ДанныеРегламентированныхОтчетов,
		РезультатОбновления);
	
	ПоместитьВоВременноеХранилище(РезультатОбновления, АдресХранилища);
	
КонецПроцедуры

// Обработка файла с обновлениями регламентированных отчетов в фоновом задании.
//
// Параметры:
//  ПараметрыПроцедуры - Структура - данные для обновления;
//  АдресХранилища - Строка - адрес хранилища результат обновления.
//
Процедура ИнтерактивноеОбновлениеРегламентированныхОтчетовИзФайла(ПараметрыПроцедуры, АдресХранилища) Экспорт
	
	РезультатОбновления = Новый Структура;
	РезультатОбновления.Вставить("КодОшибки",         "");
	РезультатОбновления.Вставить("СообщениеОбОшибке", "");
	
	ДанныеФайла                     = ПараметрыПроцедуры.ДанныеФайла;
	ДанныеРегламентированныхОтчетов = ПараметрыПроцедуры.ДанныеРегламентированныхОтчетов;
	
	ДанныеРегламентированныхОтчетов.Колонки.Добавить("АдресФайла", ОбщегоНазначения.ОписаниеТипаСтрока(250));
	
	КаталогОбновлений = ФайловаяСистема.СоздатьВременныйКаталог(
		Строка(Новый УникальныйИдентификатор));
	
	ФайлыРегламентированныхОтчетов = ПолучитьИмяВременногоФайла(".zip");
	ДанныеФайла.Записать(ФайлыРегламентированныхОтчетов);
	ДанныеФайла = Неопределено;
	
	ЧтениеZipФайла = Новый ЧтениеZipФайла(ФайлыРегламентированныхОтчетов);
	Для Каждого ОписаниеВерсии Из ДанныеРегламентированныхОтчетов Цикл
		
		ЭлементАрхива = ЧтениеZipФайла.Элементы.Найти(ОписаниеВерсии.ИдентификаторФайла);
		Если ЭлементАрхива = Неопределено Тогда
			ЗаписатьИнформациюВЖурналРегистрации(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось найти файл регламентированного отчета %1 в архиве %2.'"),
					ОписаниеВерсии.Идентификатор,
					ФайлыРегламентированныхОтчетов),
				Истина,
				Метаданные.Обработки.ОбновлениеРегламентированныхОтчетов);
			Продолжить;
		КонецЕсли;
		
		ЧтениеZipФайла.Извлечь(ЭлементАрхива, КаталогОбновлений);
		ДанныеФайла = Новый ДвоичныеДанные(КаталогОбновлений + ОписаниеВерсии.ИдентификаторФайла);
		
		Если ДанныеФайла.Размер() = 0 Тогда
			ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Файл регламентированного отчета %1 (%2) имеет размер равный 0.
					|Загрузка данных остановлена.'"),
				ОписаниеВерсии.Наименование,
				ОписаниеВерсии.Идентификатор);
			ЗаписатьИнформациюВЖурналРегистрации(
				ТекстИсключения,
				Истина,
				Метаданные.Обработки.ОбновлениеРегламентированныхОтчетов);
				
			ФайловаяСистема.УдалитьВременныйФайл(ФайлыРегламентированныхОтчетов);
			ФайловаяСистема.УдалитьВременныйКаталог(КаталогОбновлений);
			
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
		
		ОписаниеВерсии.Размер           = ДанныеФайла.Размер();
		ОписаниеВерсии.КонтрольнаяСумма = ИнтернетПоддержкаПользователей.КонтрольнаяСуммаФайла(ДанныеФайла);
		ОписаниеВерсии.АдресФайла       = ПоместитьВоВременноеХранилище(ДанныеФайла);
		
	КонецЦикла;
	
	ЧтениеZipФайла.Закрыть();
	
	ФайловаяСистема.УдалитьВременныйФайл(ФайлыРегламентированныхОтчетов);
	ФайловаяСистема.УдалитьВременныйКаталог(КаталогОбновлений);
	
	ОбработатьФайлыПриИнтерактивнойЗагрузке(
		ДанныеРегламентированныхОтчетов,
		РезультатОбновления);
	
	ПоместитьВоВременноеХранилище(РезультатОбновления, АдресХранилища);
	
КонецПроцедуры

// Загружает файлы регламентированных отчетов при интерактивной обработке данных.
//
// Параметры:
//  ДанныеРегламентированныхОтчетов - ТаблицаЗначений - см. функцию 
//  ПолучениеРегламентированныхОтчетов.ОписаниеДанныхРегламентированныхОтчетов;
//  РезультатОбновления  - Структура - содержит результат загрузки.
//
Процедура ОбработатьФайлыПриИнтерактивнойЗагрузке(ДанныеРегламентированныхОтчетов, РезультатОбновления)
	
	НеОбработанные = ОбработатьФайлыРегламентированныхОтчетов(ДанныеРегламентированныхОтчетов, Истина);
	
	Для Каждого ОписаниеРегламентированногоОтчета Из ДанныеРегламентированныхОтчетов Цикл
		УдалитьИзВременногоХранилища(ОписаниеРегламентированногоОтчета.АдресФайла);
	КонецЦикла;
	
	Если НеОбработанные.Количество() > 0 Тогда
		Сч = 1;
		СообщениеОбОшибке = "";
		Для Каждого ОписаниеРегламентированногоОтчета Из ДанныеРегламентированныхОтчетов Цикл
			Если НеОбработанные.Найти(ОписаниеРегламентированногоОтчета.Идентификатор) <> Неопределено Тогда
				СообщениеОбОшибке = СообщениеОбОшибке
					+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '%1. Версия %2 регламентированного отчета %3 не загружена;'"),
							Сч,
							ОписаниеРегламентированногоОтчета.Версия,
							ОписаниеРегламентированногоОтчета.Наименование)
						+ Символы.ПС;
				Сч = Сч + 1;
			КонецЕсли;
		КонецЦикла;
		РезультатОбновления.КодОшибки         = КодОшибкиНеОбработан();
		РезультатОбновления.СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось обработать обновления регламентированных отчетов:
				|
				|%1'"),
			СообщениеОбОшибке);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает параметры получения данных об актуальных регламентированных отчетах.
// 
// Возвращаемое значение:
//  Структура - параметры получения данных:
//    * ВерсииРегламентированныхОтчетов - Массив из Структура - см. функцию ВерсииРегламентированныхОтчетов();
//    * ВидыРегламентированныхОтчетов - Массив из Строка - см. функцию ВидыРегламентированныхОтчетов();
//
Функция ПодготовитьПараметрыПолученияИнформацииОбОбновлениях()
	
	ПараметрыПолучения = Новый Структура;
	ПараметрыПолучения.Вставить("ВерсииРегламентированныхОтчетов", ВерсииРегламентированныхОтчетов());
	ПараметрыПолучения.Вставить("ВидыРегламентированныхОтчетов",   ВидыРегламентированныхОтчетов());
	
	Возврат ПараметрыПолучения;
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаРегламентированныхОтчетовИзФайлов

// Выполняет загрузку обновления регламентированных отчетов и обработку данных из файла.
//
// Параметры:
//  ИмяФайла - Строка - путь к файлу с данными регламентированных отчетов.
//
Процедура ОбновитьРегламентированныеОтчетыИзФайла(ИмяФайла)
	
	ВерсииРегламентированныхОтчетовФайл = ВерсииРегламентированныхОтчетовВФайле(ИмяФайла);
	
	ВерсииРегламентированныхОтчетовИБ = ВерсииРегламентированныхОтчетов();
	
	ДанныеРегламентированныхОтчетов = ОписаниеДанныхРегламентированныхОтчетов();
	КаталогРегламентированныхОтчетов = ФайловаяСистема.СоздатьВременныйКаталог();
	
	ЧтениеZipФайлаОтчетов = Новый ЧтениеZipФайла(ИмяФайла);
	Для Каждого ВерсияРегламентированногоОтчетаФайл Из ВерсииРегламентированныхОтчетовФайл Цикл
		
		ИмяКонфигурации    = ИнтернетПоддержкаПользователей.ИмяКонфигурации();
		ВерсияКонфигурации = ИнтернетПоддержкаПользователей.ВерсияКонфигурации();
		ТребуетсяЗагрузка  = Ложь;
		Для Каждого ОписаниеВерсии Из ВерсияРегламентированногоОтчетаФайл.ВерсииПрограмм Цикл
			Если ОписаниеВерсии.Программа = ИмяКонфигурации
				И ОписаниеВерсии.Версия = ВерсияКонфигурации Тогда
				ТребуетсяЗагрузка = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ТребуетсяЗагрузка Тогда
			Продолжить;
		КонецЕсли;
		
		ТребуетсяЗагрузка = Истина;
		
		Для Каждого ВерсияРегламентированногоОтчетаИБ Из ВерсииРегламентированныхОтчетовИБ Цикл
			Если ВерсияРегламентированногоОтчетаИБ.Идентификатор = ВерсияРегламентированногоОтчетаФайл.Идентификатор Тогда 
				Если ВерсияРегламентированногоОтчетаИБ.Версия >= ВерсияРегламентированногоОтчетаФайл.Версия Тогда
					ТребуетсяЗагрузка = Ложь;
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ТребуетсяЗагрузка Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементАрхива = ЧтениеZipФайлаОтчетов.Элементы.Найти(ВерсияРегламентированногоОтчетаФайл.Имя);
		Если ЭлементАрхива = Неопределено Тогда
			ЗаписатьИнформациюВЖурналРегистрации(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось найти файл регламентированного отчета %1 в архиве %2.'"),
					ВерсияРегламентированногоОтчетаФайл.Идентификатор,
					ИмяФайла),
				Истина,
				Метаданные.РегламентныеЗадания.ОбновлениеРегламентированныхОтчетов);
			Продолжить;
		КонецЕсли;
		
		ЧтениеZipФайлаОтчетов.Извлечь(ЭлементАрхива, КаталогРегламентированныхОтчетов);
		ИмяФайлаОтчетаВАрхиве = КаталогРегламентированныхОтчетов + ВерсияРегламентированногоОтчетаФайл.Имя;
		ДанныеФайла = Новый ДвоичныеДанные(ИмяФайлаОтчетаВАрхиве);
		
		СтрокаДанных = ДанныеРегламентированныхОтчетов.Добавить();
		СтрокаДанных.АдресФайла              = ПоместитьВоВременноеХранилище(ДанныеФайла);
		СтрокаДанных.Версия                  = ВерсияРегламентированногоОтчетаФайл.Версия;
		СтрокаДанных.Идентификатор           = ВерсияРегламентированногоОтчетаФайл.Идентификатор;
		СтрокаДанных.Наименование            = ВерсияРегламентированногоОтчетаФайл.Наименование;
		СтрокаДанных.ОписаниеВерсии          = ВерсияРегламентированногоОтчетаФайл.ОписаниеВерсии;
		СтрокаДанных.Размер                  = ДанныеФайла.Размер();
		СтрокаДанных.КонтрольнаяСумма        = ИнтернетПоддержкаПользователей.КонтрольнаяСуммаФайла(ДанныеФайла);
		СтрокаДанных.ИдентификаторВидаОтчета = ВерсияРегламентированногоОтчетаФайл.ИдентификаторВидаОтчета;
		
	КонецЦикла;
	
	ФайловаяСистема.УдалитьВременныйФайл(КаталогРегламентированныхОтчетов);
	ОбработатьФайлыРегламентированныхОтчетов(ДанныеРегламентированныхОтчетов);
	
КонецПроцедуры

// Определяет описание версии регламентированного отчета, которое содержит файл.
//
// Параметры:
//  ИмяФайлаОтчета - Строка - расположение архива с регламентированным отчетом.
//
// Возвращаемое значение:
//  Структура - содержит описание регламентированного отчета.
//
Функция ОписаниеВерсииРегламентированногоОтчетаИзФайла(ИмяФайлаОтчета)
	
	ОписаниеОтчета = ОписаниеВерсииРегламентированногоОтчета();
	ОписаниеОтчета.Вставить("ВерсииПрограмм");
	ОписаниеОтчета.Вставить("ОписаниеВерсии");
	
	СоставИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ИмяФайлаОтчета);
	ОписаниеОтчета.Вставить("Имя", СоставИмениФайла.Имя);
	
	Если СоставИмениФайла.Расширение <> ".zip" Тогда
		Возврат ОписаниеОтчета;
	КонецЕсли;
	
	ФайлМанифеста = Неопределено;
	
	ЧтениеZipФайла = Новый ЧтениеZipФайла(ИмяФайлаОтчета);
	Для Каждого ЭлементАрхива Из ЧтениеZipФайла.Элементы Цикл
		
		Если ВРег(ЭлементАрхива.Имя) = "MANIFEST.JSON" Тогда
			ФайлМанифеста = ЭлементАрхива;
			Прервать;
		Иначе
			
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	Если ФайлМанифеста = Неопределено Тогда 
		ИнформацияОбОшибке = НСтр("ru = 'Отсутствует файл описания отчета.'");
		Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить описание регламентированного отчета из файла по причине:
				|%1'"),
			ИнформацияОбОшибке);
		ЗаписатьИнформациюВЖурналРегистрации(
			Комментарий,
			Истина);
			
		ЧтениеZipФайла.Закрыть();
		
		Возврат ОписаниеОтчета;
	КонецЕсли;
	
	КаталогМанифеста  = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(
		ПолучитьИмяВременногоФайла(ФайлМанифеста.Имя));
	ЧтениеZipФайла.Извлечь(ФайлМанифеста, КаталогМанифеста, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
	ИмяФайлаМанифеста = КаталогМанифеста + ФайлМанифеста.Имя;
	ПрочитатьФайлМанифеста(ИмяФайлаМанифеста, ОписаниеОтчета);
	ФайловаяСистема.УдалитьВременныйКаталог(КаталогМанифеста);
	
	ЧтениеZipФайла.Закрыть();
	
	Возврат ОписаниеОтчета;
	
КонецФункции

// Заполняет описание регламентированного отчета на основании данных файла-манифеста.
//
// Параметры:
//  ИмяФайлаМанифеста - Строка - расположение файла с описанием регламентированного отчета.
//  ОписаниеОтчета - Структура - содержит описание регламентированного отчета.
//
Процедура ПрочитатьФайлМанифеста(ИмяФайлаМанифеста, ОписаниеОтчета)
	
	ОписаниеИзМанифеста = Новый Структура;
	
	Попытка
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.ОткрытьФайл(ИмяФайлаМанифеста);
		МанифестОтчета = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		
		ОписаниеИзМанифеста.Вставить("Идентификатор",           МанифестОтчета.reportIdentifier);
		ОписаниеИзМанифеста.Вставить("Наименование",            МанифестОтчета.name);
		ОписаниеИзМанифеста.Вставить("ИдентификаторВидаОтчета", МанифестОтчета.reportType);
		ОписаниеИзМанифеста.Вставить("Версия",                  МанифестОтчета.version);
		ОписаниеИзМанифеста.Вставить("ОписаниеВерсии",          МанифестОтчета.description);
		ОписаниеИзМанифеста.Вставить("ВерсииПрограмм",          Новый Массив);
		Для Каждого ВерсияПрограммы Из МанифестОтчета.programVersionApplicability Цикл
			ДанныеВерсииПрограммы = Новый Структура;
			ДанныеВерсииПрограммы.Вставить("Программа", ВерсияПрограммы.program);
			ДанныеВерсииПрограммы.Вставить("Версия",    ВерсияПрограммы.version);
			ОписаниеИзМанифеста.ВерсииПрограмм.Добавить(ДанныеВерсииПрограммы);
		КонецЦикла;
		
	Исключение
		ИнформацияОбОшибке = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить описание регламентированного отчета из файла по причине:
				|%1'"),
			ИнформацияОбОшибке);
		ЗаписатьИнформациюВЖурналРегистрации(
			Комментарий,
			Истина);
	КонецПопытки;
	
	ЗаполнитьЗначенияСвойств(ОписаниеОтчета, ОписаниеИзМанифеста);
	
КонецПроцедуры

// Определяет идентификаторы и номера версий, которые содержит файла с обновлениями.
//
// Параметры:
//  ИмяФайла - Строка - расположение архива с регламентированными отчетами.
//
// Возвращаемое значение:
//  Массив из Структура - содержит идентификаторы регламентированных отчетов и номер версий.
//
Функция ВерсииРегламентированныхОтчетовВФайле(ИмяФайла)
	
	ВерсииРегламентированныхОтчетов = Новый Массив;
	
	Если ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ИмяФайла) <> "zip" Тогда
		Возврат ВерсииРегламентированныхОтчетов;
	КонецЕсли;
	
	ЧтениеZipФайла = Новый ЧтениеZipФайла(ИмяФайла);
	Для Каждого Элемент Из ЧтениеZipФайла.Элементы Цикл
		
		// Зашифрованные элементы архива не обрабатываются.
		Если Элемент.Зашифрован
			Или Элемент.Расширение <> "zip" Тогда
			Продолжить;
		КонецЕсли;
		
		КаталогОписанияОтчета = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(
			ФайловаяСистема.СоздатьВременныйКаталог() + Элемент.ИмяБезРасширения);
		ЧтениеZipФайла.Извлечь(Элемент, КаталогОписанияОтчета, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
		ИмяФайлаОтчета = КаталогОписанияОтчета + Элемент.Имя;
		
		ОписаниеВерсии = ОписаниеВерсииРегламентированногоОтчетаИзФайла(ИмяФайлаОтчета);
		
		// Если имя файла содержит некорректные данные, подсистема не должна
		// выполнять его обработку.
		Если Не ЗначениеЗаполнено(ОписаниеВерсии.Идентификатор)
			Или Не ЗначениеЗаполнено(ОписаниеВерсии.Версия) Тогда
			Продолжить;
		КонецЕсли;
		
		ВерсииРегламентированныхОтчетов.Добавить(ОписаниеВерсии);
		ФайловаяСистема.УдалитьВременныйКаталог(КаталогОписанияОтчета);
		
	КонецЦикла;
	
	ЧтениеZipФайла.Закрыть();
	
	Возврат ВерсииРегламентированныхОтчетов;
	
КонецФункции

#КонецОбласти

#Область ОбработкаСлужебныхДанныхРегламентированныхОтчетов

// Возвращает описание файла регламентированного отчета
//
// Параметры:
//  ДанныеФайла - ДвоичныеДанные - данные файла отчета;
//  ОписаниеОтчета - Структура, Неопределено - описание регламентированного отчета:
//    * Идентификатор - Строка - идентификатор регламентированного отчета в сервисе;
//    * ИдентификаторВидаОтчета - Строка - идентификатор вида регламентированного отчета в сервисе;
//    * Наименование - Строка - наименование регламентированного отчета в сервисе;
//    * Версия - Число - номер актуальной версии;
//    * КонтрольнаяСумма - Число - контрольная сумма файла;
//    * Размер - Число - размер файла;
//    * ОписаниеВерсии - Строка - описание версии регламентированного отчета.
// 
// Возвращаемое значение:
//  Структура - содержит информацию, которая используется для обновления данных регламентированных отчетов:
//    * ДанныеФайла - ДвоичныеДанные - данные файла отчета;
//    * Идентификатор - Строка - идентификатор регламентированного отчета в сервисе;
//    * ИдентификаторВидаОтчета - Строка - идентификатор вида регламентированного отчета в сервисе;
//    * Наименование - Строка - наименование регламентированного отчета в сервисе;
//    * Версия - Число - номер актуальной версии;
//    * КонтрольнаяСумма - Число - контрольная сумма файла;
//    * Размер - Число - размер файла;
//    * ОписаниеВерсии - Строка - описание версии регламентированного отчета.
//
Функция ОписаниеДанныхФайлаРегламентированногоОтчета(
		ДанныеФайла,
		ОписаниеОтчета = Неопределено)
	
	ОписаниеФайла = Новый Структура(
		"Идентификатор,
		|ИдентификаторВидаОтчета,
		|Наименование,
		|Версия,
		|КонтрольнаяСумма,
		|Размер,
		|ОписаниеВерсии");
	
	Если ОписаниеОтчета <> Неопределено Тогда 
		ЗаполнитьЗначенияСвойств(ОписаниеФайла, ОписаниеОтчета);
	КонецЕсли;
	
	ОписаниеФайла.Вставить("ДанныеФайла", ДанныеФайла);
	
	Возврат ОписаниеФайла;
	
КонецФункции

// Возвращает данные идентификаторов и версий регламентированных отчетов,
// которые используются в конфигурации.
//
// Возвращаемое значение:
//  Массив из Структура - содержит настройки регламентированных отчетов:
//    * Идентификатор - Строка - идентификатор регламентированного отчета;
//    * Версия - Число - версия регламентированного отчета.
//
Функция ВерсииРегламентированныхОтчетов() Экспорт
	
	ВерсииРегламентированныхОтчетов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РегВерсииРегламентированныхОтчетов.Идентификатор КАК Идентификатор,
		|	РегВерсииРегламентированныхОтчетов.Версия КАК Версия
		|ИЗ
		|	РегистрСведений.ВерсииРегламентированныхОтчетов КАК РегВерсииРегламентированныхОтчетов";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ОписаниеРегламентированногоОтчета = Новый Структура;
		ОписаниеРегламентированногоОтчета.Вставить("Идентификатор", ВыборкаДетальныеЗаписи.Идентификатор);
		ОписаниеРегламентированногоОтчета.Вставить("Версия",        ВыборкаДетальныеЗаписи.Версия);
		
		ВерсииРегламентированныхОтчетов.Добавить(ОписаниеРегламентированногоОтчета);
	КонецЦикла;
	
	Возврат ВерсииРегламентированныхОтчетов;
	
КонецФункции

// Возвращает список используемых в системе видов регламентированных отчетов.
//
// Параметры:
//  ДополнительныеПараметры  - Произвольный - содержит настройки определения видов регламентированных отчетов.
//
// Возвращаемое значение:
//  Массив из Структура - Список используемых видов регламентированных отчетов
//
Функция ВидыРегламентированныхОтчетов(ДополнительныеПараметры = Неопределено)
	
	ВидыОтчетов = Новый Массив;
	
	ИнтеграцияПодсистемБИП.ПриДобавленииВидовРегламентированныхОтчетов(ВидыОтчетов, 
		ДополнительныеПараметры);
	ПолучениеРегламентированныхОтчетовПереопределяемый.ПриДобавленииВидовРегламентированныхОтчетов(
		ВидыОтчетов, 
		ДополнительныеПараметры);
	
	Возврат ВидыОтчетов;
	
КонецФункции

// Выполняет обновления данных регламентированных отчетов и при необходимости
// создает задание, которые выполняет обработку областей данных.
//
// Параметры:
//  ДанныеРегламентированныхОтчетов - ТаблицаЗначений - см. функцию ОписаниеДанныхРегламентированныхОтчетов();
//  СообщитьПрогресс - Булево - если регламентированные отчеты загружаются в длительной операции,
//  необходимо сообщать прогресс обновления.
//
// Возвращаемое значение:
//  Массив из Строка - Идентификаторы регламентированных отчетов, данные которых не удалось обновить.
//
Функция ОбработатьФайлыРегламентированныхОтчетов(ДанныеРегламентированныхОтчетов, СообщитьПрогресс = Ложь)
	
	НеОбработанные = Новый Массив;
	
	Сч = 1;
	Для Каждого ДанныеФайла Из ДанныеРегламентированныхОтчетов Цикл
		
		Обработан               = Ложь;
		ДополнительныеПараметры = Новый Структура;
		
		ДанныеФайлаРегламентированногоОтчета = ДанныеФайлаАрхиваРегламентированногоОтчета(ДанныеФайла.АдресФайла);
		
		ОписаниеФайла = ОписаниеДанныхФайлаРегламентированногоОтчета(
			ДанныеФайлаРегламентированногоОтчета,
			ДанныеФайла);
		
		ПриЗагрузкеРегламентированногоОтчета(
			ОписаниеФайла,
			Обработан,
			ДополнительныеПараметры);
		
		Если Не Обработан Тогда
			НеОбработанные.Добавить(ДанныеФайла.Идентификатор);
		КонецЕсли;
		
		Если СообщитьПрогресс Тогда
			ДлительныеОперации.СообщитьПрогресс(100 * Сч / ДанныеРегламентированныхОтчетов.Количество());
		КонецЕсли;
		Сч = Сч + 1;
	КонецЦикла;
	
	Возврат НеОбработанные;
	
КонецФункции

// Возвращает двоичные данные регламентированного отчета.
//
// Параметры:
//  АдресФайла - Строка - адрес во временном хранилище.
// 
// Возвращаемое значение:
//  ДвоичныеДанные - двоичные данные регламентированного отчета.
//
Функция ДанныеФайлаАрхиваРегламентированногоОтчета(АдресФайла)
	
	ДанныеФайла = ПолучитьИзВременногоХранилища(АдресФайла);
	Поток = ДанныеФайла.ОткрытьПотокДляЧтения();
	ЧтениеZip = Новый ЧтениеZipФайла(Поток);
	Для Каждого ЭлементАрхива Из ЧтениеZip.Элементы Цикл
		
		Если ВРег(ЭлементАрхива.Имя) = "MANIFEST.JSON" Тогда
			Продолжить;
		Иначе
			ФайлОтчета = ЭлементАрхива;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Каталог = ФайловаяСистема.СоздатьВременныйКаталог();
	ЧтениеZip.Извлечь(ФайлОтчета, Каталог);
	ИмяФайлаОтчета = Каталог + ФайлОтчета.Имя;
	ДанныеФайлаОтчета = Новый ДвоичныеДанные(ИмяФайлаОтчета);
	ЧтениеZip.Закрыть();
	
	Попытка
		ФайловаяСистема.УдалитьВременныйКаталог(Каталог);
	Исключение
		ЗаписатьИнформациюВЖурналРегистрации(
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			Истина);
	КонецПопытки;
	
	Возврат ДанныеФайлаОтчета;
	
КонецФункции

// Изменяет данные загруженной версии в регистре сведений.
//
// Параметры:
//  ОписаниеФайла - Структура - см. функцию ОписаниеДанныхФайлаРегламентированногоОтчета.
//
Процедура ОбновитьСлужебныеДанныеРегламентированногоОтчета(ОписаниеФайла)
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ВерсииРегламентированныхОтчетов");
		ЭлементБлокировки.УстановитьЗначение("Идентификатор", ОписаниеФайла.Идентификатор);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		Запись = РегистрыСведений.ВерсииРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
		Запись.Идентификатор = ОписаниеФайла.Идентификатор;
		Запись.Прочитать();
		Если Не Запись.Выбран() Тогда
			Запись.Идентификатор = ОписаниеФайла.Идентификатор;
		КонецЕсли;
		
		Запись.ИдентификаторВидаОтчета = ОписаниеФайла.ИдентификаторВидаОтчета;
		Запись.Версия                  = Число(ОписаниеФайла.Версия);
		Запись.Наименование            = ОписаниеФайла.Наименование;
		
		Запись.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписатьИнформациюВЖурналРегистрации(ИнформацияОбОшибке, Истина);
		ВызватьИсключение ИнформацияОбОшибке;
		
	КонецПопытки;
	
КонецПроцедуры

// Производит удаление актуальных версий регламентированных отчетов,
// которые определяются на основании данных ИБ.
//
// Параметры:
//  ДанныеРегламентированныхОтчетов - ТаблицаЗначений - см. функцию ОписаниеДанныхРегламентированныхОтчетов()
//
Процедура УдалитьАктуальныеВерсии(ДанныеРегламентированныхОтчетов)
	
	Идентификаторы = Новый Массив;
	Для Каждого РегламентированныйОтчет Из ДанныеРегламентированныхОтчетов Цикл 
		Идентификаторы.Добавить(РегламентированныйОтчет.Идентификатор);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВерсииРегламентированныхОтчетов.Идентификатор КАК Идентификатор,
		|	ВерсииРегламентированныхОтчетов.Версия КАК Версия
		|ИЗ
		|	РегистрСведений.ВерсииРегламентированныхОтчетов КАК ВерсииРегламентированныхОтчетов
		|ГДЕ
		|	ВерсииРегламентированныхОтчетов.Идентификатор В(&Идентификаторы)";
	
	Запрос.УстановитьПараметр("Идентификаторы", Идентификаторы);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	АктуальныеВерсии = Новый Массив;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Отбор = Новый Структура;
		Отбор.Вставить("Идентификатор", ВыборкаДетальныеЗаписи.Идентификатор);
		
		НайденныеСтроки = ДанныеРегламентированныхОтчетов.НайтиСтроки(Отбор);
		Для Каждого ОписательВерсии Из НайденныеСтроки Цикл
			Если ОписательВерсии.Версия <= ВыборкаДетальныеЗаписи.Версия Тогда
				АктуальныеВерсии.Добавить(ОписательВерсии);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ОписательВерсии Из АктуальныеВерсии Цикл
		ДанныеРегламентированныхОтчетов.Удалить(ОписательВерсии);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеСлужебныеПроцедурыФункции

// Добавляет запись в журнал регистрации.
//
// Параметры:
//  СообщениеОбОшибке - Строка - комментарий к записи журнала регистрации;
//  Ошибка - Булево - если истина будет установлен уровень журнала регистрации "Ошибка";
//  ОбъектМетаданных - ОбъектМетаданных - объект метаданных для которого регистрируется ошибка.
//
Процедура ЗаписатьИнформациюВЖурналРегистрации(
		СообщениеОбОшибке,
		Ошибка = Истина,
		ОбъектМетаданных = Неопределено)
	
	УровеньЖР = ?(Ошибка, УровеньЖурналаРегистрации.Ошибка, УровеньЖурналаРегистрации.Информация);
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации(),
		УровеньЖР,
		ОбъектМетаданных,
		,
		Лев(СообщениеОбОшибке, 5120));
	
КонецПроцедуры

// Определяет виды данных.
//
// Возвращаемое значение:
//  Массив из Строка - наименование вида данных.
//
Функция ВидыПоставляемыхДанныхРегламентированныеОтчеты()
	
	ВидыДанных = Новый Массив;
	
	ВидыРегламентированныхОтчетов = ВидыРегламентированныхОтчетов();
	Для Каждого ВидРегламентированногоОтчета Из ВидыРегламентированныхОтчетов Цикл
		ВидДанных = ВидПоставляемыхДанныхРегламентированныеОтчеты(ВидРегламентированногоОтчета.ИдентификаторВида);
		ВидыДанных.Добавить(ВидДанных);
	КонецЦикла;
	
	Возврат ВидыДанных;
	
КонецФункции

// Определяет вид данных и код обработчика для поставляемых данных.
//
// Возвращаемое значение:
//  Строка - наименование вида данных.
//
Функция ВидПоставляемыхДанныхРегламентированныеОтчеты(Идентификатор = "")
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"ExtRegReports.%1",
		Идентификатор);
	
КонецФункции

// Определяет настройки обновления регламентированных отчетов.
//
// Параметры:
//  Идентификатор  - Строка - Идентификатор регламентированного отчета,
//  для которого необходимо получить настройки;
//
// Возвращаемое значение:
//  Структура, Неопределено - настройки регламентированного отчета.
//
Функция НастройкиРегламентированногоОтчета(Идентификатор)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВерсииРегламентированныхОтчетов.Версия КАК Версия
		|ИЗ
		|	РегистрСведений.ВерсииРегламентированныхОтчетов КАК ВерсииРегламентированныхОтчетов
		|ГДЕ
		|	ВерсииРегламентированныхОтчетов.Идентификатор = &Идентификатор";
	
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		Настройки = Новый Структура;
		Настройки.Вставить("Версия", ВыборкаДетальныеЗаписи.Версия);
		
		Возврат Настройки;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Создает таблицу с описанием данных актуальных версий.
//
// Возвращаемое значение:
//  ТаблицаЗначений - содержит информацию, которая используется
//  для обновления данных регламентированных отчетов.
//    * Идентификатор - Строка - идентификатор регламентированного отчета в сервисе;
//    * ИдентификаторВидаОтчета - Строка - идентификатор вида регламентированного отчета в сервисе;
//    * Версия - Число  - номер актуальной версии;
//    * КонтрольнаяСумма - Строка - контрольная сумма файла;
//    * ИдентификаторФайла - Строка - ссылка на скачивание файла актуальной версии;
//    * АдресФайла - Строка - адрес файла регламентированного отчета во временном хранилище;
//    * Размер - Число  - размер файла;
//    * Наименование - Строка - наименование регламентированного отчета;
//    * ОписаниеВерсии - Строка - описание версии регламентированного отчета.
//
Функция ОписаниеДанныхРегламентированныхОтчетов()
	
	ДанныеРегламентированныхОтчетов = Новый ТаблицаЗначений;
	ДанныеРегламентированныхОтчетов.Колонки.Добавить("Идентификатор",           ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ДанныеРегламентированныхОтчетов.Колонки.Добавить("ИдентификаторВидаОтчета", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ДанныеРегламентированныхОтчетов.Колонки.Добавить("Версия",                  ОбщегоНазначения.ОписаниеТипаЧисло(11));
	ДанныеРегламентированныхОтчетов.Колонки.Добавить("КонтрольнаяСумма",        ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ДанныеРегламентированныхОтчетов.Колонки.Добавить("ИдентификаторФайла",      ОбщегоНазначения.ОписаниеТипаСтрока(800));
	ДанныеРегламентированныхОтчетов.Колонки.Добавить("АдресФайла",              ОбщегоНазначения.ОписаниеТипаСтрока(250));
	ДанныеРегламентированныхОтчетов.Колонки.Добавить("Размер",                  ОбщегоНазначения.ОписаниеТипаЧисло(32));
	ДанныеРегламентированныхОтчетов.Колонки.Добавить("Наименование",            ОбщегоНазначения.ОписаниеТипаСтрока(150));
	ДанныеРегламентированныхОтчетов.Колонки.Добавить("ОписаниеВерсии",          ОбщегоНазначения.ОписаниеТипаСтрока(800));
	
	Возврат ДанныеРегламентированныхОтчетов;
	
КонецФункции

// Определяет по коду состояния тип ошибку сервиса.
//
// Параметры:
//  КодСостояния - Число - код состояния ответа сервиса.
//
// Возвращаемое значение:
//  Строка - код ошибки сервиса.
//
Функция ПереопределитьКодОшибкиСервиса(КодСостояния)
	
	Если КодСостояния = 200 Тогда
		Возврат "";
	ИначеЕсли КодСостояния = 400 Тогда
		Возврат КодОшибкиНеверныйФорматЗапроса();
	ИначеЕсли КодСостояния = 401 Тогда
		Возврат КодОшибкиНеверныйЛогинИлиПароль();
	ИначеЕсли КодСостояния = 403 Тогда
		Возврат КодОшибкиНетДоступаКПрограмме();
	ИначеЕсли КодСостояния = 404 Тогда
		Возврат КодОшибкиНеизвестныйРегламентированныйОтчетИлиПрограмма();
	ИначеЕсли КодСостояния = 503 Тогда
		Возврат КодОшибкиСервисВременноНеДоступен();
	ИначеЕсли КодСостояния = 500
		Или КодСостояния = 501
		Или КодСостояния = 502
		Или КодСостояния > 503 Тогда
		Возврат КодОшибкиОшибкаСервиса();
	ИначеЕсли КодСостояния = 0 Тогда
		Возврат КодОшибкиОшибкаПодключения();
	Иначе
		Возврат КодОшибкиНеизвестнаяОшибка();
	КонецЕсли;
	
КонецФункции

// Определяет по коду ошибки сообщение пользователю.
//
// Параметры:
//  КодОшибки - Строка - ошибка сервиса см. процедуру
//  ПереопределитьКодОшибкиСервиса.
//
// Возвращаемое значение:
//  Строка - сообщение пользователю.
//
Функция ПереопределитьСообщениеПользователю(КодОшибки)
	
	Если КодОшибки = КодОшибкиНеизвестныйРегламентированныйОтчетИлиПрограмма() Тогда
		Возврат НСтр("ru = 'Регламентированный отчет или версия программы не обнаружены.'");
	ИначеЕсли КодОшибки = КодОшибкиНеверныйФорматЗапроса() Тогда
		Возврат НСтр("ru = 'Неверный набор параметров или формат запроса. Обратитесь к администратору.'");
	ИначеЕсли КодОшибки = КодОшибкиНетДоступаКПрограмме() Тогда
		Возврат СтроковыеФункции.ФорматированнаяСтрока(
			НСтр("ru = 'Доступ к обновлению регламентированного отчета невозможен, 
				|так как ваша программа не находится на <a href = ""https://portal.1c.ru/support/"">официальной поддержке</a>.'"));
	ИначеЕсли КодОшибки = КодОшибкиНеверныйЛогинИлиПароль() Тогда
		Возврат НСтр("ru = 'Ошибка авторизации на Портале 1С:ИТС.
			|Подробнее см. в журнале регистрации.'");
	ИначеЕсли КодОшибки = КодОшибкиСервисВременноНеДоступен() Тогда
		Возврат НСтр("ru = 'Не удалось подключиться к сервису регламентированных отчетов. Сервис временно недоступен.
			|Повторите попытку подключения позже.'");
	ИначеЕсли КодОшибки = КодОшибкиОшибкаСервиса() Тогда
		Возврат НСтр("ru = 'Ошибка работы с сервисом регламентированных отчетов.'");
	ИначеЕсли КодОшибки = КодОшибкиОшибкаПодключения() Тогда
		Возврат НСтр("ru = 'Отсутствует доступ в сеть интернет по причине:
							|- компьютер не подключен к интернету;
							|- неполадки у интернет-провайдера;
							|- подключение к интернету блокирует межсетевой экран, 
							|  антивирусная программа или другое программное обеспечение.'");
	Иначе
		Возврат НСтр("ru = 'Неизвестная ошибка при подключении к сервису.'");
	КонецЕсли;
	
КонецФункции

// Проверяет права доступа на обновление данных регламентированных отчетов.
// Обновление может быть недоступно если:
//  - у пользователя нет прав на получение обновлений,
//  - при работе в модели сервиса обновления загружаются из поставляемых данных.
//
Процедура ПроверитьДоступностьОбновления()
	
	Если Не ЗагрузкаРегламентированныхОтчетовДоступна() Тогда
		ВызватьИсключение НСтр("ru = 'Нарушение прав доступа.'");
	КонецЕсли;
	
КонецПроцедуры

// Проверяет права доступа на обновление данных регламентированных отчетов.
// Обновление может быть недоступно если:
//  - у пользователя нет прав на получение обновлений,
//  - при работе в модели сервиса обновления загружаются из поставляемых данных.
//
// Возвращаемое значение:
//  Булево - Истина, загрузка регламентированных отчетов доступна, если ложь
//  прав на загрузку не достаточно.
//
Функция ЗагрузкаРегламентированныхОтчетовДоступна()
	
	ОбъектМетаданных = Метаданные.РегистрыСведений.ВерсииРегламентированныхОтчетов;
	
	Если Не ПравоДоступа("Чтение", ОбъектМетаданных) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Создает структуру настроек подключения к сервису регламентированных отчетов
//
Функция ИнициализироватьПараметрыОбновления()
	
	ПараметрыЗагрузки = Новый Структура;
	ПараметрыЗагрузки.Вставить("НастройкиСоединения"   , ИнтернетПоддержкаПользователей.НастройкиСоединенияССерверами());
	ПараметрыЗагрузки.Вставить("НастройкиПроксиСервера", ПолучениеФайловИзИнтернета.НастройкиПроксиНаСервере());
	
	Возврат ПараметрыЗагрузки;
	
КонецФункции

// Определяет значение свойства из чтения JSON.
//
// Параметры:
//  ОбъектJSON          - Структура - объект JSON для определения значения;
//  ИмяСвойства         - Строка - имя свойства объекта JSON;
//  ЗначениеПоУмолчанию - Неопределено, Строка, Число, Булево - определяет
//  значение по умолчанию.
//
// Возвращаемое значение:
//  Неопределено, Строка, Число, Булево - значение.
//
Функция ЗначениеСвойстваJSON(ОбъектJSON, ИмяСвойства, ЗначениеПоУмолчанию = Неопределено)
	
	Значение = Неопределено;
	ОбъектJSON.Свойство(ИмяСвойства, Значение); // АПК:1415 Данные из внешних источников.
	
	ТипЗначения = ТипЗнч(Значение);
	Если ТипЗначения = Тип("Строка") Тогда 
		Возврат СокрЛП(Значение);
	ИначеЕсли ТипЗначения = Тип("Число")
		Или ТипЗначения = Тип("Булево") Тогда 
		Возврат Значение;
	ИначеЕсли Значение = Неопределено
		Или ТипЗначения = Тип("Null") Тогда 
		Возврат ЗначениеПоУмолчанию;
	Иначе
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось прочитать значение свойства %1.
				|Некорректный тип значения свойства (%2).'"),
			ИмяСвойства,
			Строка(ТипЗначения));
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецФункции

// Возвращает логин и пароль Интернет-поддержки.
//
// Возвращаемое значение:
//  Структура - структура, содержащая результаты определения параметров
//  аутентификации пользователя Интернет-поддержки:
//    * ДанныеАутентификации - Структура - параметры аутентификации пользователя Интернет-поддержки;
//    * ИнформацияОбОшибке   - Строка    - информация об ошибке для пользователя.
//    * Ошибка               - Строка    - признак наличия ошибки.
//
Функция ДанныеАутентификации()
	
	Результат = Новый Структура;
	Результат.Вставить("ДанныеАутентификации", Новый Структура);
	Результат.Вставить("ИнформацияОбОшибке",   "");
	Результат.Вставить("Ошибка",               Ложь);
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		ВызватьИсключение НСтр("ru = 'При работе в модели сервиса информация о регламентированных отчетах
			|загружается из поставляемых данных.'");
		
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		Результат.ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
		УстановитьПривилегированныйРежим(Ложь);
		Если Результат.ДанныеАутентификации = Неопределено Тогда
			Результат.Ошибка             = Истина;
			Результат.ИнформацияОбОшибке =
				НСтр("ru = 'Для получения обновлений регламентированных отчетов 
					|необходимо подключить Интернет-поддержку пользователей.'");
			ЗаписатьИнформациюВЖурналРегистрации(Результат.ИнформацияОбОшибке);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Определяет URL для вызова сервиса регламентированных отчетов.
//
// Параметры:
//  Операция  - Строка - путь к ресурсу;
//
// Возвращаемое значение:
//  Строка - URL операции.
//
Функция URLОперацииСервисаРегламентированныхОтчетов(Операция)
	
	Возврат "https://"
		+ ХостСервисаРегламентированныхОтчетов()
		+ "/public"
		+ Операция;
	
КонецФункции

// Определяет хост для вызова сервиса регламентированных отчетов.
//
// Возвращаемое значение:
//  Строка - хост подключения.
//
Функция ХостСервисаРегламентированныхОтчетов()
	
	
	Возврат "legislative-update-manager.1c.ru";
	
КонецФункции

// Возвращает имя события для журнала регистрации
//
// Возвращаемое значение:
//  Строка - имя события.
//
Функция ИмяСобытияЖурналаРегистрации()
	
	Возврат НСтр("ru = 'Получение регламентированных отчетов'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

// Возвращает код ошибки "НеОбработан".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиНеОбработан()
	
	Возврат "НеОбработан";
	
КонецФункции

// Возвращает код ошибки "ФайлНеЗагружен".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиФайлНеЗагружен()
	
	Возврат "ФайлНеЗагружен";
	
КонецФункции

// Возвращает код ошибки "НеверныйЛогинИлиПароль".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиНеверныйЛогинИлиПароль()
	
	Возврат "НеверныйЛогинИлиПароль";
	
КонецФункции

// Возвращает код ошибки "НеизвестныйРегламентированныйОтчетИлиПрограмма".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиНеизвестныйРегламентированныйОтчетИлиПрограмма()
	
	Возврат "НеизвестныйРегламентированныйОтчетИлиПрограмма";
	
КонецФункции

// Возвращает код ошибки "НеверныйФорматЗапроса".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиНеверныйФорматЗапроса()
	
	Возврат "НеверныйФорматЗапроса";
	
КонецФункции

// Возвращает код ошибки "НетДоступаКПрограмме".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиНетДоступаКПрограмме()
	
	Возврат "НетДоступаКПрограмме";
	
КонецФункции

// Возвращает код ошибки "СервисВременноНеДоступен".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиСервисВременноНеДоступен()
	
	Возврат "СервисВременноНеДоступен";
	
КонецФункции

// Возвращает код ошибки "ОшибкаСервиса".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиОшибкаСервиса()
	
	Возврат "ОшибкаСервиса";
	
КонецФункции

// Возвращает код ошибки "ОшибкаПодключения".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиОшибкаПодключения()
	
	Возврат "ОшибкаПодключения";
	
КонецФункции

// Возвращает код ошибки "НеизвестнаяОшибка".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиНеизвестнаяОшибка()
	
	Возврат "НеизвестнаяОшибка";
	
КонецФункции

// Возвращает код ошибки "ОбновлениеНеТребуется".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиОбновлениеНеТребуется()
	
	Возврат "ОбновлениеНеТребуется";
	
КонецФункции

#КонецОбласти

#КонецОбласти
