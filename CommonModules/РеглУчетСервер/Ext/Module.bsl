
#Область ПрограммныйИнтерфейс

// Возвращает настройки регламентированного учета.
// 
// Возвращаемое значение:
// 	Структура - Описание:
//		* ДополнительноВедетсяУправленческийУчет - Булево - Истина, если совместно с регламентированным (на одном плане счетов) ведется управленческий учет.
//		* ДатаНачалаВеденияУправленческогоУчета - Дата - Дата, с которой ведется совместный управленческий и регламентированный учет. Если пустая, то с начала ведения учета.
//		* ДополнительноВедетсяУчетВВалютеФинОтчетности - Булево - Истина, если плане счетов регламентированного учета дополнительно ведется учет в валюте финансовой отчетности.
//		* ВалютаФинОтчетности - СправочникСсылка.Валюты - Валюта финансовой отчетности.
//
Функция НастройкиУчета() Экспорт
	
	НастройкиУчета = Новый Структура();
	НастройкиУчета.Вставить("ДополнительноВедетсяУправленческийУчет",       Ложь);
	НастройкиУчета.Вставить("ДатаНачалаВеденияУправленческогоУчета",        Дата(1,1,1));
	НастройкиУчета.Вставить("ДополнительноВедетсяУчетВВалютеФинОтчетности", Ложь);
	НастройкиУчета.Вставить("ВалютаФинОтчетности",                          Справочники.Валюты.ПустаяСсылка());
	НастройкиУчета.Вставить("ИспользоватьРеглУчет",                         Ложь);
	НастройкиУчета.Вставить("ДатаНачалаВеденияРеглУчета",                   Дата(1,1,1));
	
	//++ Локализация


	//-- Локализация
	
	Возврат НастройкиУчета;
	
КонецФункции

// Определяет ведение регл. учета на указанную дату.
// 
// Параметры:
// 	Дата - Дата - Дата, на которую нужно проверить ведение регл. учета.
// 	
// Возвращаемое значение:
// 	Булево - Истина, если ведется регл. учет.
Функция ВедетсяРеглУчет(Дата = '000101010000') Экспорт
	
	НастройкиУчета = НастройкиУчета();
	
	ВедетсяРеглУчет =
		НастройкиУчета.ИспользоватьРеглУчет
		И (Дата >= НастройкиУчета.ДатаНачалаВеденияРеглУчета
			ИЛИ Дата = '000101010000' 
				И ТекущаяДатаСеанса() >= НастройкиУчета.ДатаНачалаВеденияРеглУчета);
	
	Возврат ВедетсяРеглУчет;
	
КонецФункции

// Функция возвращает счет бухгалтерского учета в зависимости от выбранного типа налога. Вызов функции происходит из
// платежных документов.
//
// Параметры:
//   ТипНалога - СправочникСсылка.ВидыНалоговВзносов - Типа налогов.
//
// Возвращаемое значение:
//   ПланСчетовСсылка - Счет учета по типу налога.
// 
Функция СчетУчетаПоТипуНалога(ТипНалога) Экспорт
	
	СчетУчета = Неопределено;
	//++ Локализация


	//-- Локализация
	
	Возврат СчетУчета;
	
КонецФункции

//Функция возвращает массив Типов документов ввода остатков
// 
// Возвращаемое значение:
//  Массив - типы документов ввода остатков
Функция ДокументыВводаОстатков() Экспорт
	
	ТипыДокументовВводаОстатков = Новый Массив;
	
	ТипыДокументовВводаОстатков.Добавить(ТИП("ДокументСсылка.ВводОстатков")); 
	ТипыДокументовВводаОстатков.Добавить(ТИП("ДокументСсылка.ВводОстатковВзаиморасчетов"));
	ТипыДокументовВводаОстатков.Добавить(ТИП("ДокументСсылка.ВводОстатковДенежныхСредств"));
	
	//++ Локализация
	ТипыДокументовВводаОстатков.Добавить(ТИП("ДокументСсылка.ВводОстатковНДСПредъявленного")); 
	//-- Локализация
	
	ТипыДокументовВводаОстатков.Добавить(ТИП("ДокументСсылка.ВводОстатковОПродажахЗаПрошлыеПериоды")); 
	ТипыДокументовВводаОстатков.Добавить(ТИП("ДокументСсылка.ВводОстатковПоФинансовымИнструментам"));
	ТипыДокументовВводаОстатков.Добавить(ТИП("ДокументСсылка.ВводОстатковПрочиеРасходы"));
	ТипыДокументовВводаОстатков.Добавить(ТИП("ДокументСсылка.ВводОстатковПрочихАктивовПассивов"));
	ТипыДокументовВводаОстатков.Добавить(ТИП("ДокументСсылка.ВводОстатковРасчетовПоЭквайрингу")); 
	ТипыДокументовВводаОстатков.Добавить(ТИП("ДокументСсылка.ВводОстатковСПодотчетниками"));
	ТипыДокументовВводаОстатков.Добавить(ТИП("ДокументСсылка.ВводОстатковТМЦВЭксплуатации"));
	ТипыДокументовВводаОстатков.Добавить(ТИП("ДокументСсылка.ВводОстатковТоваров"));
	
	
	//++ Локализация
	//-- Локализация

	Возврат ТипыДокументовВводаОстатков;
	
КонецФункции
	
// Функция возвращает типа налога в зависимости от выбранного счета бухгалтерского учета. Вызов функции происходит из
// обработчиков обновления.
//
// Параметры:
//   СчетУчета - ПланСчетовСсылка - Счет учета по типу налога.
//
// Возвращаемое значение:
//   СправочникСсылка.ВидыНалоговВзносов - Тип налогов по счету учета.
// 
Функция ТипНалогаПоСчетуУчета(СчетУчета) Экспорт
	
	ТипНалога = Неопределено;
	
	//++ Локализация


	//-- Локализация
	
	Возврат ТипНалога;
	
КонецФункции

// Возвращает доступность отражения документов в регл. учете текущему пользователю.
// 
// Возвращаемое значение:
// 	Булево - Наличие прав на отражение документов в регл. учете
//
Функция ЕстьПравоОтраженияДокументовВРеглУчете() Экспорт
	
	Результат = Ложь;
	//++ Локализация


	//-- Локализация
	Возврат Результат;
	
КонецФункции

// Возвращает документы к отражению в регл. учете
//
// Параметры:
// 	ДокументыКОтражению -   ТаблицаЗначений, 
// 							МенеджерВременныхТаблиц - Таблица документов, которые надо вернуть к отражению, 
// 													  или менеджер временных таблиц имеющий таблицу ДокументыКОтражению
// 													  Таблица должна иметь колонки Документ, Организация, ДатаОтражения. 
// 	КоличествоОбработанных - Число - В данном параметр устанавливается количество возвращенных к отражению документов.
// 									 Параметр не является обязательным.
//
Процедура ВернутьДокументыКОтражению(ДокументыКОтражению, КоличествоОбработанных = Неопределено) Экспорт
	
	//++ Локализация


	//-- Локализация
	
КонецПроцедуры

// Регистрирует документы расчетов с партнерами к отражению в регламентированном учете.
//
// Параметры:
//	Расчеты - ТаблицаЗначений - Таблица движений по расчетам с партнерами:
//	                         * Регистратор - ДокументСсылка - Документ-регистратор движений
//	                         * Период - Дата - Период движений
//	                         * АналитикаУчетаПоПартнерам - СправочникСсылка.КлючиАналитикиУчетаПоПартнерам - Аналитика учета.
//
Процедура ЗарегистрироватьДокументыРасчетовСПартнерамиКОтражениюВРеглУчете(Расчеты) Экспорт
	
	//++ Локализация


	//-- Локализация
	
КонецПроцедуры

// Процедура вызывается из методов регламентных операций для записи в регистр сведений "ЗаданияКЗакрытиюМесяца"
//	данных о необходимости пересчета признания расходов (если изменяются организации с объектом налогообложения "Доходы минус расходы").
// Параметры:
//	Период - Дата - период пересчета;
//	СписокОрганизаций - Массив - СправочникСсылка.Организации - массив организаций, для которых запущена процедура пересчета.
//	ТолькоРасходы - Булево - Признак выборки подходящих организаций. Значение по умолчанию - Истина.
//		Если Истина - будут выбираться организации на УСН, с объектом налогообложения "Доходы минус расходы".
//		Если Ложь - будут выбираться организации на УСН вне зависимости от объекта налогообложения. значение по умолчанию - Истина.
//	КоличествоОбработанныхЭлементов - Число - Количество данных, обработанных данной процедурой (см. общий модуль "Производительность").
//
Процедура ОбновитьЗаданияКЗакрытиюМесяцаПриВыполненииРеглОперации(Период, СписокОрганизаций, ТолькоРасходы = Истина, КоличествоОбработанныхЭлементов = 0) Экспорт
	
	//++ Локализация


	//-- Локализация
	
КонецПроцедуры

// Возвращает структуру регистров регл учета
// 
// Возвращаемое значение:
// 	Структура - Структура регистров НДС, где
// 	     Ключ - Имя регистра
// 	     Значение - Набор записей регистра.
Функция РегистрыРеглУчета() Экспорт
	
	РегистрыРегл = Новый Структура();
	//++ Локализация


	//-- Локализация
	Возврат РегистрыРегл;
	
КонецФункции

// Процедура формирования движений по подчиненным регистрам регламентированного учета.
//
// Параметры:
//   ТаблицыДляДвижений - Структура - таблицы данных документа
//   Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//   Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
	//++ Локализация


	//-- Локализация
	
КонецПроцедуры

// Возвращает свойства счета регламентированного учета
//
// Параметры:
// 	Счет - ПланСчетовСсылка - Счет регламентированного учета
// Возвращаемое значение:
// 	Структура - Свойства счета
Функция ПолучитьСвойстваСчета(Знач Счет) Экспорт
	
	ДанныеСчета = Неопределено;
	
	//++ Локализация


	//-- Локализация
	
	Возврат ДанныеСчета;
	
КонецФункции

// Настраивает видимость полей НУ, ПР и ВР на форме
//
// Параметры:
//  ПоляНалогНаПрибыль - Соответствие - ключ = поле формы, в том числе - заголовки строк; значение = вид учета НУ/ПР/ВР
//  Период         - Дата - основной период набора записей
//  Организация    - СправочникСсылка.Организации - организация набора записей
//                 - Неопределено - организация набора записей не может быть определена
//  ВидИспользованияСумм - Строка -
//  ВыводитьСуммыРазницДляПлательщикаНалогаНаПрибыль - Булево - вывести суммы разниц, если организация ведет учет ПБУ 18/02 простым балансовым методом 
//
Процедура НастроитьВидимостьПолейНалоговогоУчетаИРазниц(ПоляНалогНаПрибыль, Период, Организация = Неопределено, ВидИспользованияСумм = "",
	ВыводитьСуммыРазницДляПлательщикаНалогаНаПрибыль = Ложь) Экспорт
	
	ВидимостьПоУмолчанию = Ложь;
	
	Для Каждого Поле Из ПоляНалогНаПрибыль Цикл
		Поле.Ключ.Видимость = ВидимостьПоУмолчанию;
	КонецЦикла;
	
	//++ Локализация


	//-- Локализация
	
КонецПроцедуры

//++ Локализация


#Область ЕдиныйНалоговыйСчет

// Возвращает дату начала обязательного применения ЕНП
//
// Возвращаемое значение:
// 	Дата - дата начала обязательного применения ЕНП
//
Функция ДатаНачалаОбязательногоПримененияЕНП() Экспорт
	
	Возврат '20230101';
	
КонецФункции


#КонецОбласти

//-- Локализация

// Виды налогов с настройкой счетов.
// 
// Возвращаемое значение:
//  Массив - СправочникСсылка.ВидыНалоговВзносов
//
Функция ВидыНалоговСНастройкойСчетов() Экспорт
	
	ВидыНалогов = Новый Массив;
	
	//++ Локализация
	ВидыНалогов.Добавить(Справочники.ВидыНалоговВзносов.НДС_ВвозимыеТовары);
	ВидыНалогов.Добавить(Справочники.ВидыНалоговВзносов.НДС_НалоговыйАгент);
	//-- Локализация
	
	Возврат ВидыНалогов;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//++ Локализация


//-- Локализация

#КонецОбласти
