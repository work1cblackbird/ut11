
////////////////////////////////////////////////////////////////////////////////
// Модуль "ЭтапыОплатыСервер" содержит процедуры и функции для 
// работы с механизмом этапов оплаты,
// в первую очередь заполнение этапов оплаты различных объектов.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ЗаполнениеЭтаповОплатыПоЗаказам

// Возвращает структуру с параметрами заполнения этапов оплаты по заказам.
// 
// Возвращаемое значение:
//  Структура - Параметры заполнения этапов оплаты:
// * ДатаЗаказа                     - Дата - Дата заказа, если есть.
// * ДатаСогласования               - Дата - Дата заказа, если есть.
// * ДатаОтгрузки                   - Дата, ТаблицаЗначений - 
// * СрокПереходаПраваСобственности - Число - Срок перехода права собственности из соглашения.
// * Соглашение                     - СправочникСсылка.СоглашенияСКлиентами, СправочникСсылка.СоглашенияСПоставщиками - Соглашение, если есть
// * СуммаОплаты                    - Число - Общая сумма к оплате, без учета залога.
// * СуммаЗалога                    - Число - Сумма залога за тару.
//
Функция ПараметрыЗаполненияЭтаповОплатыПоЗаказам() Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДатаОтгрузки",                      Дата(1,1,1));
	СтруктураПараметров.Вставить("ДатаПереходаПраваСобственности",    Дата(1,1,1));
	СтруктураПараметров.Вставить("ЕстьДатаПереходаПраваСобственности",Ложь);
	СтруктураПараметров.Вставить("ТабличнаяЧасть",                    Неопределено);
	СтруктураПараметров.Вставить("Соглашение",                        Неопределено);
	СтруктураПараметров.Вставить("ПорядокРасчетов",                   Неопределено);
	СтруктураПараметров.Вставить("ЭтоРасчетыСКлиентами",              Неопределено);
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Заполняет ТЧ ЭтапыГрафикаОплаты по переданной структуре параметров.
// 
// Параметры:
//  ЭтапыГрафикаОплаты - ТаблицаЗначений - Таблица этапов для заполнения.
//  Параметры - см. ПараметрыЗаполненияЭтаповОплатыПоЗаказам
//
Процедура ЗаполнитьЭтапыОплатыДокументаПоЗаказам(ЭтапыГрафикаОплаты, Параметры) Экспорт
	
	ДатаОтгрузки = ?(Параметры.ДатаОтгрузки=Дата(1,1,1), НачалоДня(ТекущаяДатаСеанса()), Параметры.ДатаОтгрузки);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ *
	|ПОМЕСТИТЬ ВТДанныеДокумента
	|ИЗ &ТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Соглашения.ГрафикОплаты.Календарь, Соглашения.Календарь) КАК Календарь,
	|	Соглашения.СрокПереходаПраваСобственности КАК СрокПереходаПраваСобственности
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК Соглашения
	|ГДЕ
	|	Соглашения.Ссылка = &Соглашение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Соглашения.Календарь КАК Календарь,
	|	Соглашения.СрокПереходаПраваСобственности КАК СрокПереходаПраваСобственности
	|ИЗ
	|	Справочник.СоглашенияСПоставщиками КАК Соглашения
	|ГДЕ
	|	Соглашения.Ссылка = &Соглашение
	|;
	|ВЫБРАТЬ
	|	ДанныеДокумента.Заказ                    КАК Заказ,
	|	ДанныеДокумента.Заказ.Дата               КАК ДатаЗаказа,
	|	ДанныеДокумента.Заказ.ДатаСогласования   КАК ДатаСогласования,
	|	ВЫБОР КОГДА &ЭтоРасчетыСКлиентами И &ЭтоЗаказКакСчет
	|		ТОГДА ЛОЖЬ
	|		ИНАЧЕ ДанныеДокумента.СверхЗаказа
	|	КОНЕЦ                                    КАК СверхЗаказа,
	|	СУММА(ДанныеДокумента.СуммаПлатежа)      КАК СуммаПлатежа,
	|	ВЫБОР КОГДА СУММА(ДанныеДокумента.СуммаВзаиморасчетов) = 0 
	|		ТОГДА СУММА(ДанныеДокумента.СуммаПлатежа) 
	|		ИНАЧЕ СУММА(ДанныеДокумента.СуммаВзаиморасчетов)
	|	КОНЕЦ                                    КАК СуммаВзаиморасчетов,
	|	СУММА(ДанныеДокумента.СуммаЗалогаЗаТару) КАК СуммаЗалогаЗаТару,
	|	ВЫБОР КОГДА СУММА(ДанныеДокумента.СуммаВзаиморасчетовПоТаре) = 0 
	|		ТОГДА СУММА(ДанныеДокумента.СуммаЗалогаЗаТару) 
	|		ИНАЧЕ СУММА(ДанныеДокумента.СуммаВзаиморасчетовПоТаре)
	|	КОНЕЦ                                    КАК СуммаВзаиморасчетовПоТаре
	|ИЗ
	|	ВтДанныеДокумента КАК ДанныеДокумента
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Заказ,
	|	ДанныеДокумента.СверхЗаказа,
	|	ВЫБОР КОГДА &ЭтоРасчетыСКлиентами И &ЭтоЗаказКакСчет
	|		ТОГДА ЛОЖЬ
	|		ИНАЧЕ ДанныеДокумента.СверхЗаказа
	|	КОНЕЦ
	|;";
	
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ
	|	Заказы.Заказ КАК Заказ,
	|	Заказы.Сдвиг КАК Сдвиг,
	|	Заказы.ВариантОплаты КАК ВариантОплаты,
	|	Заказы.ВариантОтсчета КАК ВариантОтсчета,
	|	СУММА(Заказы.СуммаПлатежа) КАК СуммаПлатежа,
	|	СУММА(Заказы.СуммаЗалогаЗаТару) КАК СуммаЗалогаЗаТару,
	|	СУММА(Заказы.ПроцентПлатежа) КАК ПроцентПлатежа,
	|	СУММА(Заказы.ПроцентЗалогаЗаТару) КАК ПроцентЗалогаЗаТару,
	|	Заказы.Календарь КАК Календарь
	|ИЗ ("; //@Query-part-1
	
	Если ВзаиморасчетыКлиентСервер.ЭтоТабличнаяЧасть(ЭтапыГрафикаОплаты) Тогда
		СписокТипов = ЭтапыГрафикаОплаты.Колонки.Заказ.ТипЗначения.Типы();
	Иначе
		ТаблицаЗначений = ЭтапыГрафикаОплаты.Выгрузить(); //ТаблицаЗначений
		СписокТипов = ТаблицаЗначений.Колонки.Заказ.ТипЗначения.Типы();
	КонецЕсли;
	
	Для Каждого Тип Из СписокТипов Цикл
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	Заказы.Ссылка КАК Заказ,
		|	Заказы.Сдвиг КАК Сдвиг,
		|	Заказы.ВариантОплаты КАК ВариантОплаты,
		|	Заказы.ВариантОтсчета КАК ВариантОтсчета,
		|	Заказы.СуммаПлатежа КАК СуммаПлатежа,
		|	Заказы.СуммаЗалогаЗаТару КАК СуммаЗалогаЗаТару,
		|	Заказы.ПроцентПлатежа КАК ПроцентПлатежа,
		|	Заказы.ПроцентЗалогаЗаТару КАК ПроцентЗалогаЗаТару,
		|	&Календарь КАК Календарь
		|ИЗ
		|	&ЭтапыГрафикаОплаты КАК Заказы
		|ГДЕ
		|	Заказы.Ссылка В (&СписокЗаказов)
		|";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЭтапыГрафикаОплаты", Метаданные.НайтиПоТипу(Тип).ПолноеИмя()+".ЭтапыГрафикаОплаты");
		Если Параметры.ЭтоРасчетыСКлиентами 
			И Метаданные.НайтиПоТипу(Тип).Реквизиты.Найти("ГрафикОплаты") <> Неопределено Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Календарь", "Заказы.Ссылка.ГрафикОплаты.Календарь");
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Календарь", "ЗНАЧЕНИЕ(Справочник.ПроизводственныеКалендари.ПустаяССылка)");
		КонецЕсли;
		
		Если Тип <> СписокТипов[СписокТипов.Количество()-1] Тогда
			
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|"
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + ") КАК Заказы
	|
	|СГРУППИРОВАТЬ ПО
	|	Заказ,
	|	Сдвиг,
	|	ВариантОплаты,
	|	ВариантОтсчета,
	|	Календарь
	|";
	
	Если Параметры.ТабличнаяЧасть.Количество() > 0
		И (ТипЗнч(Параметры.ТабличнаяЧасть[0].Заказ) = Тип("ДокументСсылка.ЗаказКлиента")
		Или ТипЗнч(Параметры.ТабличнаяЧасть[0].Заказ) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента")) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЭтоЗаказКакСчет", "ДанныеДокумента.Заказ.ЭтоЗаказКакСчет");
	Иначе
		// для всех остальных типов документов используются расширенные возможности заказов
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЭтоЗаказКакСчет", "ЛОЖЬ");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ТаблицаТовары", Параметры.ТабличнаяЧасть);
	Запрос.УстановитьПараметр("СписокЗаказов", Параметры.ТабличнаяЧасть.ВыгрузитьКолонку("Заказ"));
	Запрос.УстановитьПараметр("Соглашение", Параметры.Соглашение);
	Запрос.УстановитьПараметр("ЭтоРасчетыСКлиентами", Параметры.ЭтоРасчетыСКлиентами);
	
	УстановитьПривилегированныйРежим(Истина);
	Результаты = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ДанныеСоглашения = Результаты[1].Выгрузить();
	Заказы           = Результаты[2].Выгрузить();
	СтрокиЭтапов     = Результаты[3].Выгрузить();
	СтрокиЭтапов.Индексы.Добавить("Заказ");
	
	ЭтапыГрафикаОплаты.Очистить();
	
	Если ДанныеСоглашения.Количество() > 0 Тогда
		Календарь = ДанныеСоглашения[0].Календарь;
		СрокПереходаПрава = ДанныеСоглашения[0].СрокПереходаПраваСобственности;
	Иначе
		Календарь = Справочники.ПроизводственныеКалендари.ПустаяСсылка();
		СрокПереходаПрава = 0;
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиОплаты") Тогда
		СтрокиЭтапов.ЗаполнитьЗначения(Календарь, "Календарь");
	КонецЕсли;
	
	Если НЕ ВзаиморасчетыКлиентСервер.ЭтоТабличнаяЧасть(ЭтапыГрафикаОплаты) Тогда
		ЭтапыЗаказа = ЭтапыГрафикаОплаты.Выгрузить();
		ЭтапыГрафикаОплатыНовые = ЭтапыГрафикаОплаты.Выгрузить();
	Иначе
		ЭтапыЗаказа = ЭтапыГрафикаОплаты.Скопировать();
		ЭтапыГрафикаОплатыНовые = ЭтапыГрафикаОплаты.Скопировать();
	КонецЕсли;
	
	Для Каждого СтрокаЗаказа Из Заказы Цикл
		
		ПараметрыЗаполнения = ПараметрыЗаполненияЭтаповОплаты();
		ПараметрыЗаполнения.ДатаЗаказа = СтрокаЗаказа.ДатаЗаказа;
		ПараметрыЗаполнения.ДатаСогласования = СтрокаЗаказа.ДатаСогласования;
		ПараметрыЗаполнения.ДатаОтгрузки = ДатаОтгрузки;
		ПараметрыЗаполнения.ДатаПереходаПраваСобственности = Параметры.ДатаПереходаПраваСобственности;
		ПараметрыЗаполнения.ЕстьДатаПереходаПраваСобственности = Параметры.ЕстьДатаПереходаПраваСобственности;
		ПараметрыЗаполнения.Соглашение = Параметры.Соглашение;
		ПараметрыЗаполнения.СрокПереходаПраваСобственности = СрокПереходаПрава;
		ПараметрыЗаполнения.СуммаЗалогаЗаТару = СтрокаЗаказа.СуммаЗалогаЗаТару;
		ПараметрыЗаполнения.СуммаОплаты = СтрокаЗаказа.СуммаПлатежа;
		ПараметрыЗаполнения.Календарь = Календарь;
		ПараметрыЗаполнения.ШаблонГрафика = СтрокиЭтапов.Скопировать(Новый Структура("Заказ",СтрокаЗаказа.Заказ));
		ПараметрыЗаполнения.НакладнаяПоЗаказам = Истина;
		ПараметрыЗаполнения.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказам;
		ПараметрыЗаполнения.ЭтоЗаказ = Ложь;
		ПараметрыЗаполнения.ЭтоРасчетыСКлиентами = Параметры.ЭтоРасчетыСКлиентами;
		
		ЗаполнитьЭтапыОплатыДокументаПоШаблону(ЭтапыЗаказа, ПараметрыЗаполнения);
		
		СуммаВзаиморасчетовКРаспределению = СтрокаЗаказа.СуммаВзаиморасчетов;
		СуммаВзаиморасчетовПоТареКРаспределению = СтрокаЗаказа.СуммаВзаиморасчетовПоТаре;
		
		Для Каждого Стр Из ЭтапыЗаказа Цикл
			НовСтр = ЭтапыГрафикаОплатыНовые.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, Стр);
			НовСтр.Заказ = СтрокаЗаказа.Заказ;
			НовСтр.СверхЗаказа = СтрокаЗаказа.СверхЗаказа;
			
			Если Стр = ЭтапыЗаказа[ЭтапыЗаказа.Количество()-1] Тогда
				НовСтр.СуммаВзаиморасчетов = СуммаВзаиморасчетовКРаспределению;
				НовСтр.СуммаВзаиморасчетовПоТаре = СуммаВзаиморасчетовПоТареКРаспределению;
			Иначе
				Если СтрокаЗаказа.СуммаПлатежа > 0 Тогда
					НовСтр.СуммаВзаиморасчетов = СтрокаЗаказа.СуммаВзаиморасчетов * НовСтр.СуммаПлатежа / СтрокаЗаказа.СуммаПлатежа;
				КонецЕсли;
				Если СтрокаЗаказа.СуммаЗалогаЗаТару > 0 Тогда
					НовСтр.СуммаВзаиморасчетовПоТаре = СтрокаЗаказа.СуммаВзаиморасчетовПоТаре * НовСтр.СуммаЗалогаЗаТару / СтрокаЗаказа.СуммаЗалогаЗаТару;
				КонецЕсли;
			КонецЕсли;
			
			СуммаВзаиморасчетовКРаспределению = СуммаВзаиморасчетовКРаспределению - НовСтр.СуммаВзаиморасчетов;
			СуммаВзаиморасчетовПоТареКРаспределению = СуммаВзаиморасчетовПоТареКРаспределению - НовСтр.СуммаВзаиморасчетовПоТаре;
			
		КонецЦикла;
		
		ЭтапыЗаказа.Очистить();
		
	КонецЦикла;
	
	КолонкиИзмерений = "Заказ,СверхЗаказа,ВариантОплаты,ДатаПлатежа,Сдвиг,ВариантОтсчета";
	КолонкиРесурсов = "СуммаПлатежа,ПроцентПлатежа,СуммаЗалогаЗаТару,ПроцентЗалогаЗаТару,СуммаВзаиморасчетов,СуммаВзаиморасчетовПоТаре";
	
	ЭтапыГрафикаОплатыНовые.Свернуть(КолонкиИзмерений,КолонкиРесурсов);
	
	ЗаполнитьПроцентыПоСуммам(ЭтапыГрафикаОплатыНовые);
	ЭтапыОплатыКлиентСервер.СортироватьТаблицуЭтапов(ЭтапыГрафикаОплатыНовые);
	
	Для Каждого Стр Из ЭтапыГрафикаОплатыНовые Цикл
		ЗаполнитьЗначенияСвойств(ЭтапыГрафикаОплаты.Добавить(),Стр);
	КонецЦикла;
	
КонецПроцедуры

// Распределяет суммы документа по процентам графика
// 
// Параметры:
//  ЭтапыГрафикаОплаты -ТаблицаЗначений - Этапы графика оплаты.
//  Параметры - см. ПараметрыЗаполненияЭтаповОплатыПоЗаказам
//
Процедура РаспределитьСуммыЭтаповОплатыДокументаПоЗаказам(ЭтапыГрафикаОплаты, Параметры) Экспорт
	
	Запрос   = Новый Запрос;
	Менеджер = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = Менеджер;
	
	Суммы = Параметры.ТабличнаяЧасть;
	ТребуетсяПерезаполнение = Ложь;
	
	Если ВзаиморасчетыКлиентСервер.ЭтоТабличнаяЧасть(ЭтапыГрафикаОплаты) Тогда
		ЕстьТара = ЭтапыГрафикаОплаты.Колонки.Найти("СуммаЗалогаЗаТару") <> Неопределено;
	Иначе
		ТаблицаЗначений = ЭтапыГрафикаОплаты.Выгрузить(); //ТаблицаЗначений
		ЕстьТара = ТаблицаЗначений.Колонки.Найти("СуммаЗалогаЗаТару") <> Неопределено;
	КонецЕсли;
	
	ТребуетсяПерезаполнение = Ложь;
	Для Каждого СтрокаЭтапов Из ЭтапыГрафикаОплаты Цикл
		СтрокиСумм = Суммы.НайтиСтроки(Новый Структура("Заказ, СверхЗаказа", СтрокаЭтапов.Заказ, СтрокаЭтапов.СверхЗаказа));
		Если СтрокиСумм.Количество() = 0 Тогда
			ТребуетсяПерезаполнение = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаСумм Из Суммы Цикл
		СтрокиГрафика = ЭтапыГрафикаОплаты.НайтиСтроки(Новый Структура("Заказ, СверхЗаказа", СтрокаСумм.Заказ, СтрокаСумм.СверхЗаказа));
		Если СтрокиГрафика.Количество() = 0 Тогда
			ТребуетсяПерезаполнение = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ТребуетсяПерезаполнение Тогда
		ЗаполнитьЭтапыОплатыДокументаПоЗаказам(ЭтапыГрафикаОплаты, Параметры);
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаСумм Из Суммы Цикл
		
		СтрокиГрафика = ЭтапыГрафикаОплаты.НайтиСтроки(Новый Структура("Заказ, СверхЗаказа", СтрокаСумм.Заказ, СтрокаСумм.СверхЗаказа));
		
		СуммаПлатежа              = СтрокаСумм.СуммаПлатежа;
		СуммаВзаиморасчетов       = СтрокаСумм.СуммаВзаиморасчетов;
		СуммаЗалогаЗаТару         = СтрокаСумм.СуммаЗалогаЗаТару;
		СуммаВзаиморасчетовПоТаре = СтрокаСумм.СуммаВзаиморасчетовПоТаре;
		
		ВалютыСовпадают = СуммаПлатежа = СуммаВзаиморасчетов;
		
		СуммаПроцентовПлатежа = 0;
		СуммаПроцентовЗалога = 0;
		Для Каждого СтрокаГрафика Из СтрокиГрафика Цикл
			СуммаПроцентовПлатежа = СуммаПроцентовПлатежа + СтрокаГрафика.ПроцентПлатежа;
			Если ЕстьТара Тогда
				СуммаПроцентовЗалога = СуммаПроцентовЗалога + СтрокаГрафика.ПроцентЗалогаЗаТару;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаГрафика Из СтрокиГрафика Цикл
			
			ЭтоПоследняяСтрока = СтрокаГрафика = СтрокиГрафика[СтрокиГрафика.Количество()-1];
			
			Если СуммаПлатежа <> 0 Тогда
				Если ЭтоПоследняяСтрока Тогда
					СтрокаГрафика.СуммаПлатежа = СуммаПлатежа;
				Иначе
					СтрокаГрафика.СуммаПлатежа = СтрокаГрафика.ПроцентПлатежа / СуммаПроцентовПлатежа * СтрокаСумм.СуммаПлатежа;
				КонецЕсли;
				СуммаПлатежа = СуммаПлатежа - СтрокаГрафика.СуммаПлатежа;
			Иначе
				СтрокаГрафика.СуммаПлатежа = 0;
			КонецЕсли;
			
			Если СуммаВзаиморасчетов <> 0 Тогда
				Если ВалютыСовпадают Тогда
					СтрокаГрафика.СуммаВзаиморасчетов = СтрокаГрафика.СуммаПлатежа;
				ИначеЕсли ЭтоПоследняяСтрока Тогда
					СтрокаГрафика.СуммаВзаиморасчетов = СуммаВзаиморасчетов;
				Иначе
					СтрокаГрафика.СуммаВзаиморасчетов = СтрокаГрафика.СуммаПлатежа / СтрокаСумм.СуммаПлатежа * СуммаВзаиморасчетов;
				КонецЕсли;
				СуммаВзаиморасчетов = СуммаВзаиморасчетов - СтрокаГрафика.СуммаВзаиморасчетов;
			Иначе
				СтрокаГрафика.СуммаВзаиморасчетов = 0;
			КонецЕсли;
			
			Если СуммаЗалогаЗаТару <> 0 Тогда
				Если ЭтоПоследняяСтрока Тогда
					СтрокаГрафика.СуммаЗалогаЗаТару = СуммаЗалогаЗаТару;
				Иначе
					СтрокаГрафика.СуммаЗалогаЗаТару = СтрокаГрафика.ПроцентЗалогаЗаТару / СуммаПроцентовЗалога * СуммаЗалогаЗаТару;
				КонецЕсли;
				СуммаЗалогаЗаТару = СуммаЗалогаЗаТару - СтрокаГрафика.СуммаЗалогаЗаТару;
			ИначеЕсли ЕстьТара Тогда
				СтрокаГрафика.СуммаЗалогаЗаТару = 0;
			КонецЕсли;
			
			Если СуммаВзаиморасчетовПоТаре <> 0 Тогда
				Если ВалютыСовпадают Тогда
					СтрокаГрафика.СуммаВзаиморасчетовПоТаре = СтрокаГрафика.СуммаЗалогаЗаТару;
				ИначеЕсли ЭтоПоследняяСтрока Тогда
					СтрокаГрафика.СуммаВзаиморасчетовПоТаре = СуммаВзаиморасчетовПоТаре;
				Иначе
					СтрокаГрафика.СуммаВзаиморасчетовПоТаре = СтрокаГрафика.СуммаЗалогаЗаТару / СтрокаСумм.СуммаЗалогаЗаТару * СуммаВзаиморасчетовПоТаре;
				КонецЕсли;
				СуммаВзаиморасчетовПоТаре = СуммаВзаиморасчетовПоТаре - СтрокаГрафика.СуммаВзаиморасчетовПоТаре;
			ИначеЕсли ЕстьТара Тогда
				СтрокаГрафика.СуммаВзаиморасчетовПоТаре = 0;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеЭтаповОплаты

// Возвращает структуру с параметрами заполнения этапов оплаты по соглашению, графику оплаты или по умолчанию.
// 
// Возвращаемое значение:
//  Структура - Параметры заполнения этапов оплаты:
// * ДатаЗаказа                     - Дата - Дата заказа, если есть.
// * ДатаСогласования               - Дата - Дата заказа, если есть.
// * ДатаОтгрузки                   - Дата, ТаблицаЗначений - Общая дата отгрузки или таблица значений с колонками "ДатаОтгрузки","СуммаПлатежа" и "СуммаЗалогаЗаТару".
// * СрокПереходаПраваСобственности - Число - Срок перехода права собственности из соглашения.
// * Соглашение                     - СправочникСсылка.СоглашенияСКлиентами, СправочникСсылка.СоглашенияСПоставщиками - Соглашение, если есть
// * СуммаОплаты                    - Число - Общая сумма к оплате, без учета залога.
// * СуммаЗалога                    - Число - Сумма залога за тару.
//
Функция ПараметрыЗаполненияЭтаповОплаты() Экспорт
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ДатаЗаказа",                        Дата(1,1,1));
	СтруктураПараметров.Вставить("ДатаСогласования",                  Дата(1,1,1));
	СтруктураПараметров.Вставить("ДатаОтгрузки",                      Дата(1,1,1));
	СтруктураПараметров.Вставить("ДатаПереходаПраваСобственности",    Дата(1,1,1));
	СтруктураПараметров.Вставить("СрокПереходаПраваСобственности",    0);
	СтруктураПараметров.Вставить("СуммаОплаты",                       0);
	СтруктураПараметров.Вставить("СуммаЗалогаЗаТару",                 0);
	СтруктураПараметров.Вставить("СуммаВзаиморасчетов",               0);
	СтруктураПараметров.Вставить("СуммаВзаиморасчетовПоТаре",         0);
	
	СтруктураПараметров.Вставить("ГрафикСоглашенияЗаполнен",          Ложь);
	СтруктураПараметров.Вставить("Соглашение",                        Неопределено);
	СтруктураПараметров.Вставить("ГрафикИсполненияДоговора",          Неопределено);
	СтруктураПараметров.Вставить("ГрафикОплаты",                      Неопределено);
	
	СтруктураПараметров.Вставить("ПорядокРасчетов",                   Неопределено);
	СтруктураПараметров.Вставить("ЭтоРасчетыСКлиентами",              Неопределено);
	СтруктураПараметров.Вставить("ЭтоЗаказ",                          Неопределено);
	СтруктураПараметров.Вставить("НетКонтроляПредоплаты",             Ложь);
	СтруктураПараметров.Вставить("НакладнаяПоЗаказам",                Неопределено);
	СтруктураПараметров.Вставить("ЕстьДатаПереходаПраваСобственности", Неопределено);
	
	СтруктураПараметров.Вставить("ШаблонГрафика",                     Неопределено);
	СтруктураПараметров.Вставить("Календарь",                         Неопределено);
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Заполняет этапы графика оплаты или распределяет уже заполненную сумму в документах продажи.
//
// Параметры:
// 		ЭтапыГрафикаОплаты - ТаблицаЗначений - таблица этапов оплаты.
// 		ПараметрыЗаполнения - см. ПараметрыЗаполненияЭтаповОплаты
//
Процедура ЗаполнитьЭтапыОплаты(ЭтапыГрафикаОплаты, ПараметрыЗаполнения) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыЗаполнения.ГрафикИсполненияДоговора) 
		И НЕ ПараметрыЗаполнения.ЭтоЗаказ Тогда
		ЗаполнитьЭтапыОплатыПоГрафикуИсполнения(ЭтапыГрафикаОплаты, ПараметрыЗаполнения);
	ИначеЕсли ЗначениеЗаполнено(ПараметрыЗаполнения.ГрафикОплаты) И ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиОплаты") Тогда
		ЗаполнитьЭтапыОплатыПоГрафикуОплаты(ЭтапыГрафикаОплаты, ПараметрыЗаполнения);
	ИначеЕсли ПараметрыЗаполнения.ГрафикСоглашенияЗаполнен Тогда
		ЗаполнитьЭтапыОплатыПоСоглашению(ЭтапыГрафикаОплаты, ПараметрыЗаполнения);
	ИначеЕсли ЭтапыГрафикаОплаты.Количество() > 0 Тогда
		ЭтапыОплатыКлиентСервер.РаспределитьСуммуПоЭтапамГрафикаОплаты(
			ЭтапыГрафикаОплаты,
			ПараметрыЗаполнения.СуммаОплаты,
			ПараметрыЗаполнения.СуммаЗалогаЗаТару,
			ПараметрыЗаполнения.СуммаВзаиморасчетов,
			ПараметрыЗаполнения.СуммаВзаиморасчетовПоТаре);
	Иначе
		НовСтр = ЭтапыГрафикаОплаты.Добавить();
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НовСтр, "ВариантОплаты") Тогда
			Если ПараметрыЗаполнения.ЭтоРасчетыСКлиентами Тогда
				НовСтр.ВариантОплаты = Перечисления.ВариантыКонтроляОплатыКлиентом.КредитПослеОтгрузки;
			Иначе
				НовСтр.ВариантОплаты = Перечисления.ВариантыКонтроляОплатыПоставщику.КредитПослеПоступления;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрыЗаполнения.ДатаЗаказа) Тогда
			НовСтр.ДатаПлатежа  = ПараметрыЗаполнения.ДатаЗаказа;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НовСтр, "ВариантОтсчета") Тогда
				НовСтр.ВариантОтсчета = Перечисления.ВариантыОтсчетаДатыПлатежа.ОтДатыЗаказа;
			КонецЕсли;
		Иначе
			НовСтр.ДатаПлатежа  = ПараметрыЗаполнения.ДатаОтгрузки;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НовСтр, "ВариантОтсчета") Тогда
				НовСтр.ВариантОтсчета = Перечисления.ВариантыОтсчетаДатыПлатежа.ОтДатыОтгрузки;
			КонецЕсли;
		КонецЕсли;
		
		НовСтр.СуммаПлатежа = ПараметрыЗаполнения.СуммаОплаты;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НовСтр, "СуммаЗалогаЗаТару") Тогда
			НовСтр.СуммаЗалогаЗаТару     = ПараметрыЗаполнения.СуммаЗалогаЗаТару;
		КонецЕсли;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НовСтр,"ДатаОтгрузки") Тогда
			НовСтр.ДатаОтгрузки = ПараметрыЗаполнения.ДатаОтгрузки;
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НовСтр, "СуммаВзаиморасчетов") Тогда
			НовСтр.СуммаВзаиморасчетов = ПараметрыЗаполнения.СуммаВзаиморасчетов;
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НовСтр, "СуммаВзаиморасчетовПоТаре") Тогда
			НовСтр.СуммаВзаиморасчетовПоТаре = ПараметрыЗаполнения.СуммаВзаиморасчетовПоТаре;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьПроцентыПоСуммам(ЭтапыГрафикаОплаты);
	
КонецПроцедуры

// Заполняет этапы графика оплаты в документе по графику исполнения договора.
//
// Параметры:
// 		ЭтапыГрафикаОплаты - ТаблицаЗначений - таблица этапов оплаты.
// 		ПараметрыЗаполнения - см. ПараметрыЗаполненияЭтаповОплаты
//
Процедура ЗаполнитьЭтапыОплатыПоГрафикуИсполнения(ЭтапыГрафикаОплаты, ПараметрыЗаполнения) Экспорт
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЭтапыГрафикаОплаты.ВариантОплаты      КАК ВариантОплаты,
	|	ЭтапыГрафикаОплаты.Сдвиг              КАК Сдвиг,
	|	ЭтапыГрафикаОплаты.ВариантОтсчета     КАК ВариантОтсчета,
	|	СУММА(ЭтапыГрафикаОплаты.ПроцентПлатежа)   КАК ПроцентПлатежа,
	|	0                                     КАК ПроцентЗалогаЗаТару,
	|	Неопределено                          КАК ФормаОплаты,
	|	ЭтапыГрафикаОплаты.Ссылка.Договор.Дата КАК ДатаДоговора,
	|	ЭтапыГрафикаОплаты.Ссылка.Календарь   КАК Календарь
	|ИЗ
	|	Документ.ГрафикИсполненияДоговора.ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
	|ГДЕ
	|	ЭтапыГрафикаОплаты.Ссылка = &ГрафикИсполненияДоговора
	|СГРУППИРОВАТЬ ПО
	|	ЭтапыГрафикаОплаты.ВариантОплаты,
	|	ЭтапыГрафикаОплаты.Сдвиг,
	|	ЭтапыГрафикаОплаты.ВариантОтсчета,
	|	ЭтапыГрафикаОплаты.Ссылка.Календарь,
	|	ЭтапыГрафикаОплаты.Ссылка.Договор.Дата");
	
	Запрос.УстановитьПараметр("ГрафикИсполненияДоговора", ПараметрыЗаполнения.ГрафикИсполненияДоговора);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выгрузка         = РезультатЗапроса.Выгрузить();
	
	Если ПараметрыЗаполнения.СуммаОплаты = 0 ИЛИ Выгрузка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаполнения.Вставить("ШаблонГрафика",Выгрузка);
	ПараметрыЗаполнения.Вставить("Календарь",Выгрузка[0].Календарь);
	ПараметрыЗаполнения.Вставить("ДатаЗаказа",Выгрузка[0].ДатаДоговора);
	
	ЗаполнитьЭтапыОплатыДокументаПоШаблону(ЭтапыГрафикаОплаты, ПараметрыЗаполнения);
КонецПроцедуры

// Заполняет этапы графика оплаты в документе по графику указанном в соглашении.
//
// Параметры:
// 		ЭтапыГрафикаОплаты - ТаблицаЗначений - таблица этапов оплаты.
// 		ПараметрыЗаполнения - см. ПараметрыЗаполненияЭтаповОплаты
//
Процедура ЗаполнитьЭтапыОплатыПоСоглашению(ЭтапыГрафикаОплаты, ПараметрыЗаполнения) Экспорт
	
	Если ТипЗнч(ПараметрыЗаполнения.Соглашение) = Тип("СправочникСсылка.СоглашенияСКлиентами") Тогда
		Если ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиОплаты") Тогда
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ГрафикиОплатыЭтапы.НомерСтроки КАК НомерСтроки,
			|	ГрафикиОплатыЭтапы.ВариантОплаты КАК ВариантОплаты,
			|	ГрафикиОплатыЭтапы.Сдвиг КАК Сдвиг,
			|	ГрафикиОплатыЭтапы.ВариантОтсчета КАК ВариантОтсчета,
			|	ГрафикиОплатыЭтапы.ПроцентПлатежа КАК ПроцентПлатежа,
			|	ГрафикиОплатыЭтапы.ПроцентЗалогаЗаТару КАК ПроцентЗалогаЗаТару,
			|	ГрафикиОплатыЭтапы.Ссылка.ФормаОплаты КАК ФормаОплаты,
			|	ГрафикиОплатыЭтапы.Ссылка.Календарь КАК Календарь,
			|	СоглашенияСКлиентами.СрокПереходаПраваСобственности КАК СрокПереходаПраваСобственности
			|ИЗ
			|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГрафикиОплаты.Этапы КАК ГрафикиОплатыЭтапы
			|		ПО СоглашенияСКлиентами.ГрафикОплаты = ГрафикиОплатыЭтапы.Ссылка
			|ГДЕ
			|	СоглашенияСКлиентами.Ссылка = &Соглашение
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки");
		Иначе
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	СоглашенияСКлиентамиЭтапыГрафикаОплаты.НомерСтроки КАК НомерСтроки,
			|	СоглашенияСКлиентамиЭтапыГрафикаОплаты.ВариантОплаты КАК ВариантОплаты,
			|	СоглашенияСКлиентамиЭтапыГрафикаОплаты.Сдвиг КАК Сдвиг,
			|	СоглашенияСКлиентамиЭтапыГрафикаОплаты.ВариантОтсчета КАК ВариантОтсчета,
			|	СоглашенияСКлиентамиЭтапыГрафикаОплаты.ПроцентПлатежа КАК ПроцентПлатежа,
			|	СоглашенияСКлиентамиЭтапыГрафикаОплаты.ПроцентЗалогаЗаТару КАК ПроцентЗалогаЗаТару,
			|	СоглашенияСКлиентамиЭтапыГрафикаОплаты.Ссылка.ФормаОплаты КАК ФормаОплаты,
			|	СоглашенияСКлиентамиЭтапыГрафикаОплаты.Ссылка.Календарь КАК Календарь,
			|	СоглашенияСКлиентамиЭтапыГрафикаОплаты.Ссылка.СрокПереходаПраваСобственности КАК СрокПереходаПраваСобственности
			|ИЗ
			|	Справочник.СоглашенияСКлиентами.ЭтапыГрафикаОплаты КАК СоглашенияСКлиентамиЭтапыГрафикаОплаты
			|ГДЕ
			|	СоглашенияСКлиентамиЭтапыГрафикаОплаты.Ссылка = &Соглашение
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки");
			ПараметрыЗаполнения.ЭтоРасчетыСКлиентами = Истина;
		КонецЕсли;
	Иначе
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СоглашенияСПоставщикамиЭтапыГрафикаОплаты.НомерСтроки КАК НомерСтроки,
		|	СоглашенияСПоставщикамиЭтапыГрафикаОплаты.ВариантОплаты КАК ВариантОплаты,
		|	СоглашенияСПоставщикамиЭтапыГрафикаОплаты.Сдвиг КАК Сдвиг,
		|	СоглашенияСПоставщикамиЭтапыГрафикаОплаты.ВариантОтсчета КАК ВариантОтсчета,
		|	СоглашенияСПоставщикамиЭтапыГрафикаОплаты.ПроцентПлатежа КАК ПроцентПлатежа,
		|	СоглашенияСПоставщикамиЭтапыГрафикаОплаты.ПроцентЗалогаЗаТару КАК ПроцентЗалогаЗаТару,
		|	СоглашенияСПоставщикамиЭтапыГрафикаОплаты.Ссылка.ФормаОплаты КАК ФормаОплаты,
		|	СоглашенияСПоставщикамиЭтапыГрафикаОплаты.Ссылка.Календарь КАК Календарь,
		|	СоглашенияСПоставщикамиЭтапыГрафикаОплаты.Ссылка.СрокПереходаПраваСобственности КАК СрокПереходаПраваСобственности
		|ИЗ
		|	Справочник.СоглашенияСПоставщиками.ЭтапыГрафикаОплаты КАК СоглашенияСПоставщикамиЭтапыГрафикаОплаты
		|ГДЕ
		|	СоглашенияСПоставщикамиЭтапыГрафикаОплаты.Ссылка = &Соглашение
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки");
		ПараметрыЗаполнения.ЭтоРасчетыСКлиентами = Ложь;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Соглашение", ПараметрыЗаполнения.Соглашение);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выгрузка         = РезультатЗапроса.Выгрузить();
	
	Если (ПараметрыЗаполнения.СуммаОплаты = 0 И ПараметрыЗаполнения.СуммаЗалогаЗаТару = 0) ИЛИ Выгрузка.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыЗаполнения.Вставить("СрокПереходаПраваСобственности",Выгрузка[0].СрокПереходаПраваСобственности);
	ПараметрыЗаполнения.Вставить("ШаблонГрафика",Выгрузка);
	ПараметрыЗаполнения.Вставить("Календарь",Выгрузка[0].Календарь);
	
	ЗаполнитьЭтапыОплатыДокументаПоШаблону(ЭтапыГрафикаОплаты, ПараметрыЗаполнения);
	
КонецПроцедуры

// Заполняет этапы графика оплаты в документе по графику оплаты указанном в соглашении.
//
// Параметры:
// 		ЭтапыГрафикаОплаты - ТаблицаЗначений - таблица этапов оплаты.
// 		ПараметрыЗаполнения - см. ПараметрыЗаполненияЭтаповОплаты
//
Процедура ЗаполнитьЭтапыОплатыПоГрафикуОплаты(ЭтапыГрафикаОплаты, ПараметрыЗаполнения) Экспорт
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ГрафикиОплатыЭтапы.НомерСтроки         КАК НомерСтроки,
		|	ГрафикиОплатыЭтапы.ВариантОплаты       КАК ВариантОплаты,
		|	ГрафикиОплатыЭтапы.ВариантОтсчета      КАК ВариантОтсчета,
		|	ГрафикиОплатыЭтапы.Сдвиг               КАК Сдвиг,
		|	ГрафикиОплатыЭтапы.ПроцентПлатежа      КАК ПроцентПлатежа,
		|	ГрафикиОплатыЭтапы.ПроцентЗалогаЗаТару КАК ПроцентЗалогаЗаТару,
		|	ГрафикиОплатыЭтапы.Ссылка.Календарь    КАК Календарь,
		|	ГрафикиОплатыЭтапы.Ссылка.ФормаОплаты  КАК ФормаОплаты
		|ИЗ
		|	Справочник.ГрафикиОплаты.Этапы КАК ГрафикиОплатыЭтапы
		|ГДЕ
		|	ГрафикиОплатыЭтапы.Ссылка = &ГрафикОплаты
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки ВОЗР
		|");
		
	Запрос.УстановитьПараметр("ГрафикОплаты",ПараметрыЗаполнения.ГрафикОплаты);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выгрузка         = РезультатЗапроса.Выгрузить();
	
	Если (ПараметрыЗаполнения.СуммаОплаты = 0 И ПараметрыЗаполнения.СуммаЗалогаЗаТару = 0) ИЛИ Выгрузка.Количество() = 0 Тогда
		
		ЭтапыГрафикаОплаты.Очистить();
		Возврат;
		
	КонецЕсли;
	
	ПараметрыЗаполнения.Вставить("СрокПереходаПраваСобственности", 0);
	ПараметрыЗаполнения.Вставить("ШаблонГрафика",                  Выгрузка);
	ПараметрыЗаполнения.Вставить("Календарь",                      Выгрузка[0].Календарь);
	
	ЗаполнитьЭтапыОплатыДокументаПоШаблону(ЭтапыГрафикаОплаты, ПараметрыЗаполнения);
	
КонецПроцедуры

// Заполняет этапы графика оплаты в документе по переданному шаблону.
//
// Параметры:
// 		ЭтапыГрафикаОплаты - ТаблицаЗначений - таблица этапов оплаты.
// 		ПараметрыЗаполнения - см. ПараметрыЗаполненияЭтаповОплаты
//
Процедура ЗаполнитьЭтапыОплатыДокументаПоШаблону(ЭтапыГрафикаОплаты, ПараметрыЗаполнения) Экспорт
	
	РаспределеннаяСуммаОплаты = 0;
	РаспределеннаяСуммаЗалога = 0;
	ТекущийЭтап               = 0;
	
	ШаблонГрафика             = ПараметрыЗаполнения.ШаблонГрафика;
	Календарь                 = ПараметрыЗаполнения.Календарь;
	СуммаОплатыКРаспределению = ПараметрыЗаполнения.СуммаОплаты;
	СуммаЗалогаКРаспределению = ПараметрыЗаполнения.СуммаЗалогаЗаТару;
	
	ДатаЗаказа                     = ПараметрыЗаполнения.ДатаЗаказа;
	ДатаСогласования               = ПараметрыЗаполнения.ДатаСогласования;
	СрокПереходаПраваСобственности = ПараметрыЗаполнения.СрокПереходаПраваСобственности;
	
	ЕстьТара = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтапыГрафикаОплаты.Добавить(),"СуммаЗалогаЗаТару");
	ЕстьСуммаВзаиморасчетов = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтапыГрафикаОплаты.Добавить(),"СуммаВзаиморасчетов");
	ЭтапыГрафикаОплаты.Очистить();
	
	Если ВзаиморасчетыКлиентСервер.ЭтоТабличнаяЧасть(ЭтапыГрафикаОплаты) Тогда
		НовыеЭтапыГрафикаОплаты = ЭтапыГрафикаОплаты.Скопировать();
	Иначе
		НовыеЭтапыГрафикаОплаты = ЭтапыГрафикаОплаты.Выгрузить();
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыЗаполнения.ДатаОтгрузки) = Тип("Дата") Тогда
		ТаблицаОтгрузок = Новый ТаблицаЗначений();
		ТаблицаОтгрузок.Колонки.Добавить("ДатаОтгрузки");
		ТаблицаОтгрузок.Колонки.Добавить("СуммаПлатежа");
		ТаблицаОтгрузок.Колонки.Добавить("СуммаЗалогаЗаТару");
		НовСтр = ТаблицаОтгрузок.Добавить();
		НовСтр.ДатаОтгрузки = ПараметрыЗаполнения.ДатаОтгрузки;
		НовСтр.СуммаПлатежа = ПараметрыЗаполнения.СуммаОплаты;
		НовСтр.СуммаЗалогаЗаТару = ПараметрыЗаполнения.СуммаЗалогаЗаТару;
	Иначе
		ТаблицаОтгрузок = ПараметрыЗаполнения.ДатаОтгрузки;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаСогласования) Тогда
		ДатаСогласования = ДатаЗаказа;
	КонецЕсли;
	
	КоличествоЭтапов = ШаблонГрафика.Количество();
	
	// Определим последний незалоговый этап
	ПоследнийНезалоговыйЭтап = КоличествоЭтапов;
	Пока ПоследнийНезалоговыйЭтап <> 0 И ШаблонГрафика[ПоследнийНезалоговыйЭтап-1].ПроцентПлатежа = 0 Цикл
		ПоследнийНезалоговыйЭтап = ПоследнийНезалоговыйЭтап - 1;
	КонецЦикла;
	
	// Определим последний залоговый этап
	ПоследнийЗалоговыйЭтап = КоличествоЭтапов;
	Пока ПоследнийЗалоговыйЭтап <> 0 И ШаблонГрафика[ПоследнийЗалоговыйЭтап-1].ПроцентЗалогаЗаТару = 0 Цикл
		ПоследнийЗалоговыйЭтап = ПоследнийЗалоговыйЭтап - 1;
	КонецЦикла;
	
	// Если накладная вводится по всей сумме заказа, то и суммы в этапах следует взять из закаказа.
	КопироватьСуммуПлатежа = Ложь;
	КопироватьСуммуЗалогаЗаТару = Ложь;
	Если КоличествоЭтапов > 0 И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ШаблонГрафика[0],"СуммаПлатежа") Тогда
		Если ШаблонГрафика.Итог("СуммаПлатежа") = СуммаОплатыКРаспределению Тогда
			КопироватьСуммуПлатежа = Истина;
		КонецЕсли;
		Если ШаблонГрафика.Итог("СуммаЗалогаЗаТару") = СуммаЗалогаКРаспределению Тогда
			КопироватьСуммуЗалогаЗаТару = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Заполним этапы в соответствии с графиком оплаты
	Для Каждого Этап Из ШаблонГрафика Цикл
		
		ТекущийЭтап                     = ТекущийЭтап + 1;
		
		Если НЕ (СуммаОплатыКРаспределению <> 0 И Этап.ПроцентПлатежа <> 0
					ИЛИ СуммаЗалогаКРаспределению <> 0 И Этап.ПроцентЗалогаЗаТару <> 0) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Этап, "Календарь") Тогда
			Календарь = Этап.Календарь;
		КонецЕсли;
		
		Если Этап.ВариантОтсчета = Перечисления.ВариантыОтсчетаДатыПлатежа.ОтДатыЗаказа 
			Или Этап.ВариантОтсчета = Перечисления.ВариантыОтсчетаДатыПлатежа.ОтДатыСогласования Тогда
			
			ЭтапГрафикаОплаты               = НовыеЭтапыГрафикаОплаты.Добавить();
			ЭтапГрафикаОплаты.ВариантОплаты  = Этап.ВариантОплаты;
			Если НЕ ПараметрыЗаполнения.ЭтоЗаказ 
				И (НЕ ПараметрыЗаполнения.НакладнаяПоЗаказам ИЛИ ПараметрыЗаполнения.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным)
				И (НЕ ЗначениеЗаполнено(ПараметрыЗаполнения.ГрафикИсполненияДоговора) ИЛИ ПараметрыЗаполнения.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным) Тогда
				
				Если ЭтапГрафикаОплаты.ВариантОплаты = Перечисления.ВариантыКонтроляОплатыКлиентом.КредитСдвиг
					ИЛИ ЭтапГрафикаОплаты.ВариантОплаты = Перечисления.ВариантыКонтроляОплатыПоставщику.КредитСдвиг
					ИЛИ ЭтапГрафикаОплаты.ВариантОплаты = Перечисления.ВариантыКонтроляОплатыКлиентом.КредитПослеОтгрузки
					ИЛИ ЭтапГрафикаОплаты.ВариантОплаты = Перечисления.ВариантыКонтроляОплатыПоставщику.КредитПослеПоступления Тогда
					ЭтапГрафикаОплаты.ВариантОтсчета = Перечисления.ВариантыОтсчетаДатыПлатежа.ОтДатыОтгрузки;
				Иначе
					ЭтапГрафикаОплаты.ВариантОтсчета = Перечисления.ВариантыОтсчетаДатыПлатежа.ДоДатыОтгрузки;
				КонецЕсли;
				ЭтапГрафикаОплаты.Сдвиг          = Этап.Сдвиг;
				
				Если ЭтапГрафикаОплаты.ВариантОплаты = Перечисления.ВариантыКонтроляОплатыКлиентом.АвансДоОбеспечения Тогда
					ЭтапГрафикаОплаты.ВариантОплаты = Перечисления.ВариантыКонтроляОплатыКлиентом.ПредоплатаДоОтгрузки;
				КонецЕсли;
				
				Если ЭтапГрафикаОплаты.ВариантОплаты = Перечисления.ВариантыКонтроляОплатыПоставщику.АвансДоПодтверждения Тогда
					ЭтапГрафикаОплаты.ВариантОплаты = Перечисления.ВариантыКонтроляОплатыПоставщику.ПредоплатаДоПоступления;
				КонецЕсли;
				
				СтруктураПараметров = ЭтапыОплатыКлиентСервер.ПараметрыРасчетаДатыПлатежа();
				СтруктураПараметров.ВариантОтсчета                 = ЭтапГрафикаОплаты.ВариантОтсчета;
				СтруктураПараметров.Сдвиг                          = ЭтапГрафикаОплаты.Сдвиг;
				СтруктураПараметров.ДатаЗаказа                     = ДатаЗаказа;
				СтруктураПараметров.ДатаСогласования               = ДатаСогласования;
				СтруктураПараметров.ДатаОтгрузки                   = ПараметрыЗаполнения.ДатаОтгрузки;
				СтруктураПараметров.ДатаПереходаПраваСобственности = ПараметрыЗаполнения.ДатаПереходаПраваСобственности;
				СтруктураПараметров.СрокПереходаПраваСобственности = СрокПереходаПраваСобственности;
				СтруктураПараметров.Календарь                      = Календарь;
				
				Если ЗначениеЗаполнено(Календарь)  Тогда
					ЭтапГрафикаОплаты.ДатаПлатежа = ЭтапыОплатыВызовСервера.ДатаПлатежаПоКалендарю(СтруктураПараметров);
				Иначе
					ЭтапГрафикаОплаты.ДатаПлатежа = ЭтапыОплатыКлиентСервер.ДатаПлатежаБезКалендаря(СтруктураПараметров);
				КонецЕсли;
				
			Иначе
				ЭтапГрафикаОплаты.Сдвиг          = Этап.Сдвиг;
				ЭтапГрафикаОплаты.ВариантОтсчета = Этап.ВариантОтсчета;
				
				СтруктураПараметров = ЭтапыОплатыКлиентСервер.ПараметрыРасчетаДатыПлатежа();
				СтруктураПараметров.ВариантОтсчета                 = ЭтапГрафикаОплаты.ВариантОтсчета;
				СтруктураПараметров.Сдвиг                          = ЭтапГрафикаОплаты.Сдвиг;
				СтруктураПараметров.ДатаЗаказа                     = ДатаЗаказа;
				СтруктураПараметров.ДатаСогласования               = ДатаСогласования;
				СтруктураПараметров.ДатаОтгрузки                   = Дата(1,1,1);
				СтруктураПараметров.ДатаПереходаПраваСобственности = Дата(1,1,1);
				СтруктураПараметров.СрокПереходаПраваСобственности = 0;
				СтруктураПараметров.Календарь                      = Календарь;
				
				Если ЗначениеЗаполнено(Календарь)  Тогда
					ЭтапГрафикаОплаты.ДатаПлатежа = ЭтапыОплатыВызовСервера.ДатаПлатежаПоКалендарю(СтруктураПараметров);
				Иначе
					ЭтапГрафикаОплаты.ДатаПлатежа = ЭтапыОплатыКлиентСервер.ДатаПлатежаБезКалендаря(СтруктураПараметров);
				КонецЕсли;
			КонецЕсли;
			
			Если КопироватьСуммуПлатежа Тогда 
				СуммаЭтапаОплаты                      = Этап.СуммаПлатежа;
			Иначе
				СуммаЭтапаОплаты                      = СуммаЭтапаОплаты(Этап, СуммаОплатыКРаспределению)
			КонецЕсли;
			ЭтапГрафикаОплаты.СуммаПлатежа        = ?(ТекущийЭтап = ПоследнийНезалоговыйЭтап, СуммаОплатыКРаспределению - РаспределеннаяСуммаОплаты, СуммаЭтапаОплаты);
			ЭтапГрафикаОплаты.ПроцентПлатежа      = ?(СуммаЭтапаОплаты <> 0, Этап.ПроцентПлатежа, 0);
			РаспределеннаяСуммаОплаты             = РаспределеннаяСуммаОплаты + ЭтапГрафикаОплаты.СуммаПлатежа;
			
			Если ЕстьТара Тогда
				
				Если КопироватьСуммуЗалогаЗаТару Тогда
					СуммаЭтапаЗалога                      = Этап.СуммаЗалогаЗаТару;
				Иначе
					СуммаЭтапаЗалога                      = СуммаЭтапаОплаты(Этап, СуммаЗалогаКРаспределению, Истина);
				КонецЕсли;
				
				ЭтапГрафикаОплаты.СуммаЗалогаЗаТару   = ?(ТекущийЭтап = ПоследнийЗалоговыйЭтап, СуммаЗалогаКРаспределению - РаспределеннаяСуммаЗалога, СуммаЭтапаЗалога);
				ЭтапГрафикаОплаты.ПроцентЗалогаЗаТару = ?(Этап.ПроцентЗалогаЗаТару > 0,Этап.ПроцентЗалогаЗаТару, 
					?(СуммаЗалогаКРаспределению<>0 И ЭтапГрафикаОплаты.СуммаЗалогаЗаТару <> 0,
					(Окр(ЭтапГрафикаОплаты.СуммаЗалогаЗаТару/СуммаЗалогаКРаспределению,2,РежимОкругления.Окр15как20))*100,
					0));
				РаспределеннаяСуммаЗалога             = РаспределеннаяСуммаЗалога + ЭтапГрафикаОплаты.СуммаЗалогаЗаТару;
			КонецЕсли;
		Иначе
			
			Если КопироватьСуммуПлатежа Тогда
				СуммаЭтапаОплатыКРаспределению = Этап.СуммаПлатежа;
			ИначеЕсли ТекущийЭтап = ПоследнийНезалоговыйЭтап Тогда
				СуммаЭтапаОплатыКРаспределению = СуммаОплатыКРаспределению - РаспределеннаяСуммаОплаты;
			Иначе
				СуммаЭтапаОплатыКРаспределению = СуммаЭтапаОплаты(Этап, СуммаОплатыКРаспределению)
			КонецЕсли;
			
			Если КопироватьСуммуЗалогаЗаТару Тогда
				СуммаЭтапаЗалогаКРаспределению = Этап.СуммаЗалогаЗаТару;
			ИначеЕсли ТекущийЭтап = ПоследнийЗалоговыйЭтап Тогда
				СуммаЭтапаЗалогаКРаспределению = СуммаЗалогаКРаспределению - РаспределеннаяСуммаЗалога;
			Иначе
				СуммаЭтапаЗалогаКРаспределению = СуммаЭтапаОплаты(Этап, СуммаЗалогаКРаспределению, Истина);
			КонецЕсли;
			
			РаспределеннаяСуммаОплатыЭтапа = 0;
			РаспределеннаяСуммаЗалогаЭтапа = 0;
			Для Каждого СтрокаДатыОтгрузки Из ТаблицаОтгрузок Цикл
				
				Если НЕ ЗначениеЗаполнено(СтрокаДатыОтгрузки.ДатаОтгрузки) Тогда
					ДатаОтгрузки = ПараметрыЗаполнения.ДатаЗаказа;
				Иначе
					ДатаОтгрузки = СтрокаДатыОтгрузки.ДатаОтгрузки;
				КонецЕсли;
				
				СтруктураПараметров = ЭтапыОплатыКлиентСервер.ПараметрыРасчетаДатыПлатежа();
				Если Этап.ВариантОтсчета = Перечисления.ВариантыОтсчетаДатыПлатежа.ОтДатыПереходаПраваСобственности
					И НЕ ПараметрыЗаполнения.ЕстьДатаПереходаПраваСобственности
					ИЛИ НЕ ЗначениеЗаполнено(Этап.ВариантОтсчета) Тогда
					СтруктураПараметров.ВариантОтсчета                 = Перечисления.ВариантыОтсчетаДатыПлатежа.ОтДатыОтгрузки;
				Иначе
					СтруктураПараметров.ВариантОтсчета                 = Этап.ВариантОтсчета;
				КонецЕсли;
				СтруктураПараметров.Сдвиг                          = Этап.Сдвиг;
				СтруктураПараметров.ДатаЗаказа                     = ДатаЗаказа;
				СтруктураПараметров.ДатаСогласования               = ДатаСогласования;
				СтруктураПараметров.ДатаОтгрузки                   = ДатаОтгрузки;
				СтруктураПараметров.ДатаПереходаПраваСобственности = ПараметрыЗаполнения.ДатаПереходаПраваСобственности;
				СтруктураПараметров.СрокПереходаПраваСобственности = СрокПереходаПраваСобственности;
				СтруктураПараметров.Календарь                      = Календарь;
				
				Если ЗначениеЗаполнено(Календарь)  Тогда
					ДатаПлатежа = ЭтапыОплатыВызовСервера.ДатаПлатежаПоКалендарю(СтруктураПараметров);
				Иначе
					ДатаПлатежа = ЭтапыОплатыКлиентСервер.ДатаПлатежаБезКалендаря(СтруктураПараметров);
				КонецЕсли;
			
				Если (Этап.ВариантОплаты = Перечисления.ВариантыКонтроляОплатыПоставщику.АвансДоПодтверждения
						Или Этап.ВариантОплаты = Перечисления.ВариантыКонтроляОплатыПоставщику.ПредоплатаДоПоступления
						Или Этап.ВариантОплаты = Перечисления.ВариантыКонтроляОплатыКлиентом.АвансДоОбеспечения
						Или Этап.ВариантОплаты = Перечисления.ВариантыКонтроляОплатыКлиентом.ПредоплатаДоОтгрузки)
					И ЗначениеЗаполнено(ДатаОтгрузки)
					И ДатаПлатежа > ДатаОтгрузки Тогда
					ДатаПлатежа = ДатаОтгрузки;
				КонецЕсли;
				
				ЭтапГрафикаОплаты               = НовыеЭтапыГрафикаОплаты.Добавить();
				ЭтапГрафикаОплаты.ВариантОплаты = Этап.ВариантОплаты;
				ЭтапГрафикаОплаты.Сдвиг         = Этап.Сдвиг;
				ЭтапГрафикаОплаты.ВариантОтсчета = СтруктураПараметров.ВариантОтсчета;
				ЭтапГрафикаОплаты.ДатаПлатежа   = ДатаПлатежа;
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтапГрафикаОплаты,"ДатаОтгрузки") Тогда
					ЭтапГрафикаОплаты.ДатаОтгрузки  = СтрокаДатыОтгрузки.ДатаОтгрузки;
				КонецЕсли;
				
				ЭтапГрафикаОплаты.СуммаПлатежа        = ?(СтрокаДатыОтгрузки = ТаблицаОтгрузок[ТаблицаОтгрузок.Количество()-1] ИЛИ СуммаЭтапаОплатыКРаспределению = 0,
															СуммаЭтапаОплатыКРаспределению - РаспределеннаяСуммаОплатыЭтапа,
															СуммаЭтапаОплатыКРаспределению * (СтрокаДатыОтгрузки.СуммаПлатежа/СуммаОплатыКРаспределению));
				РаспределеннаяСуммаОплатыЭтапа         = РаспределеннаяСуммаОплатыЭтапа + ЭтапГрафикаОплаты.СуммаПлатежа;
				РаспределеннаяСуммаОплаты              = РаспределеннаяСуммаОплаты + ЭтапГрафикаОплаты.СуммаПлатежа;
				
				Если ЕстьТара Тогда
					ЭтапГрафикаОплаты.СуммаЗалогаЗаТару   = ?(СтрокаДатыОтгрузки = ТаблицаОтгрузок[ТаблицаОтгрузок.Количество()-1] ИЛИ СуммаЭтапаЗалогаКРаспределению = 0,
															СуммаЭтапаЗалогаКРаспределению-РаспределеннаяСуммаЗалогаЭтапа,
															СуммаЭтапаЗалогаКРаспределению * (СтрокаДатыОтгрузки.СуммаЗалогаЗаТару/СуммаЗалогаКРаспределению));
					РаспределеннаяСуммаЗалогаЭтапа        = РаспределеннаяСуммаЗалогаЭтапа + ЭтапГрафикаОплаты.СуммаЗалогаЗаТару;
					РаспределеннаяСуммаЗалога             = РаспределеннаяСуммаЗалога + ЭтапГрафикаОплаты.СуммаЗалогаЗаТару;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьСуммаВзаиморасчетов Тогда
		
		ПоследнийНезалоговыйЭтап = 0;
		ПоследнийЗалоговыйЭтап = 0;
		Для Каждого Стр Из НовыеЭтапыГрафикаОплаты Цикл
			Если Стр.СуммаПлатежа <> 0 Тогда
				ПоследнийНезалоговыйЭтап = Стр;
			КонецЕсли;
			Если ЕстьТара И Стр.СуммаЗалогаЗаТару <> 0 Тогда
				ПоследнийЗалоговыйЭтап = Стр;
			КонецЕсли;
		КонецЦикла;
		
		СуммаВзаиморасчетовКРаспределению = ПараметрыЗаполнения.СуммаВзаиморасчетов;
		СуммаВзаиморасчетовПоТареКРаспределению = ПараметрыЗаполнения.СуммаВзаиморасчетовПоТаре;
		Для Каждого Стр Из НовыеЭтапыГрафикаОплаты Цикл
			
			Если Стр <> ПоследнийНезалоговыйЭтап И ПараметрыЗаполнения.СуммаОплаты <> 0 Тогда
				Стр.СуммаВзаиморасчетов = Стр.СуммаПлатежа/ПараметрыЗаполнения.СуммаОплаты * ПараметрыЗаполнения.СуммаВзаиморасчетов
			Иначе
				Стр.СуммаВзаиморасчетов = СуммаВзаиморасчетовКРаспределению;
			КонецЕсли;
			СуммаВзаиморасчетовКРаспределению = СуммаВзаиморасчетовКРаспределению - Стр.СуммаВзаиморасчетов;
			
			Если ЕстьТара Тогда
				Если Стр <> ПоследнийЗалоговыйЭтап И ПараметрыЗаполнения.СуммаЗалогаЗаТару <> 0 Тогда
					Стр.СуммаВзаиморасчетовПоТаре = Стр.СуммаЗалогаЗаТару/ПараметрыЗаполнения.СуммаЗалогаЗаТару * ПараметрыЗаполнения.СуммаВзаиморасчетовПоТаре
				Иначе
					Стр.СуммаВзаиморасчетовПоТаре = СуммаВзаиморасчетовПоТареКРаспределению;
				КонецЕсли;
				СуммаВзаиморасчетовПоТареКРаспределению = СуммаВзаиморасчетовПоТареКРаспределению - Стр.СуммаВзаиморасчетовПоТаре;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	КолонкиИзмерений = "ВариантОплаты, ДатаПлатежа, Сдвиг, ВариантОтсчета";
	КолонкиРесурсов = "СуммаПлатежа,ПроцентПлатежа"
	 + ?(ЕстьТара,",СуммаЗалогаЗаТару,ПроцентЗалогаЗаТару","")
	 + ?(ЕстьСуммаВзаиморасчетов,",СуммаВзаиморасчетов","")
	 + ?(ЕстьСуммаВзаиморасчетов И ЕстьТара,",СуммаВзаиморасчетовПоТаре","");
	НовыеЭтапыГрафикаОплаты.Свернуть(КолонкиИзмерений, КолонкиРесурсов);
	
	ЭтапыОплатыКлиентСервер.СортироватьТаблицуЭтапов(НовыеЭтапыГрафикаОплаты);
	ЗаполнитьПроцентыПоСуммам(НовыеЭтапыГрафикаОплаты);
	
	Для Каждого Стр Из НовыеЭтапыГрафикаОплаты Цикл
		ЗаполнитьЗначенияСвойств(ЭтапыГрафикаОплаты.Добавить(),Стр);
	КонецЦикла;
	
	Если ПараметрыЗаполнения.ЭтоРасчетыСклиентами И ПолучитьФункциональнуюОпцию("ИспользоватьУпрощеннуюСхемуОплатыВПродажах")
		ИЛИ НЕ ПараметрыЗаполнения.ЭтоРасчетыСКлиентами И ПолучитьФункциональнуюОпцию("ИспользоватьУпрощеннуюСхемуОплатыВЗакупках") Тогда
		ПреобразоватьТаблицуЭтаповВДанныеУпрощенногоРежима(ЭтапыГрафикаОплаты, ПараметрыЗаполнения.НетКонтроляПредоплаты);
	КонецЕсли;
	
КонецПроцедуры

// Параметры проверки корректности заполнения этапов.
// 
// Возвращаемое значение:
//  Структура - Параметры проверки корректности заполнения этапов:
// * ДатаОтгрузки                     - Дата, ТаблицаЗначений - Единая дата отгрузки или таблица с колонками "ДатаОтгрузки", "СуммаПлатежа" и "СуммаЗалогаЗаТару".
// * Дата                             - Дата - Дата документа.
// * Валюта                           - СправочникСсылка.Валюты - Валюта оплаты.
// * ЭтоЗаказ                         - Булево - Это заказ.
// * НакладнаяИсточникГрафика         - Булево - Это накладная на основании заказа.
// * НадписьЭтапыОплаты               - Строка - Путь к реквизиту формы "НадписьЭтапыОплаты", если есть.
// * СуммаОплатыПоДокументу           - Число - сумма документа, в котором необходимо осуществить проверку
// * СуммаЗалогаПоДокументу           - Число - сумма залога по документу, в котором необходимо осуществить проверку
// * ИмяКолонкиДатаОтгрузки           - Строка - Имя колонки, содержащей даты отгрузки в ТЧ, если параметр ДатаОтгрузки содержит ТЧ.
//
Функция ПараметрыПроверкиКорректностиЗаполненияЭтапов() Экспорт
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДатаОтгрузки",        Неопределено);
	СтруктураПараметров.Вставить("Дата",                Дата(1,1,1));
	СтруктураПараметров.Вставить("Валюта",              Справочники.Валюты.ПустаяСсылка());
	СтруктураПараметров.Вставить("ЭтоЗаказ",            Неопределено);
	СтруктураПараметров.Вставить("НакладнаяИсточникГрафика", Неопределено);
	СтруктураПараметров.Вставить("НадписьЭтапыОплаты",  "");
	СтруктураПараметров.Вставить("СуммаОплатыПоДокументу", 0);
	СтруктураПараметров.Вставить("СуммаЗалогаПоДокументу", 0);
	СтруктураПараметров.Вставить("ИмяКолонкиДатаОтгрузки", "ДатаОтгрузки");
	
	Возврат СтруктураПараметров;
КонецФункции

// Проверяет корректность заполнения этапов графика оплаты в документе
//
// Параметры:
// ЭтапыГрафикаОплаты               - ТаблицаЗначений - Таблица этапов оплаты для проверки.
// Отказ                            - Булево - Флаг отказа от записи документа
// СтруктураПараметров              - см. ПараметрыПроверкиКорректностиЗаполненияЭтапов
// УпрощенныйРежимДиалога           - Булево - флаг, указывающий на использование простого диалога ввода этапов оплаты.
// ПривязыватьСообщенияКГиперссылке - Булево - флаг, говорящий о том что проверка происходит на форме и сообщения надо привязывать к надписи графика этапов оплаты.
//
Процедура ПроверитьКорректностьЭтаповГрафикаОплаты(Знач ЭтапыГрафикаОплаты,
	                                               Отказ,
	                                               СтруктураПараметров,
	                                               УпрощенныйРежимДиалога = Истина,
	                                               ПривязыватьСообщенияКГиперссылке = Ложь) Экспорт
	
	Если ЗначениеЗаполнено(СтруктураПараметров.Дата) Тогда
		ДатаДокумента = НачалоДня(СтруктураПараметров.Дата);
	КонецЕсли;
	
	Если ТипЗнч(СтруктураПараметров.ДатаОтгрузки) = Тип("Дата") Тогда
		ДатаОтгрузки = СтруктураПараметров.ДатаОтгрузки;
	Иначе
		ДатаОтгрузки = Дата(3000,1,1);
		Для Каждого ДатаОтгрузкиСтроки Из СтруктураПараметров.ДатаОтгрузки Цикл
			ДатаОтгрузки = Мин(ДатаОтгрузки, ДатаОтгрузкиСтроки);
		КонецЦикла;
	КонецЕсли;
	
	СуммаОплатыВсего = Окр(СтруктураПараметров.СуммаОплатыПоДокументу, 2);
	СуммаЗалогаВсего = Окр(СтруктураПараметров.СуммаЗалогаПоДокументу, 2);
	
	Если ПривязыватьСообщенияКГиперссылке И ЗначениеЗаполнено(СтруктураПараметров.НадписьЭтапыОплаты) Тогда
		НадписьЭтапыОплаты = СтрЗаменить(СтруктураПараметров.НадписьЭтапыОплаты,"Форма.","");
	Иначе
		НадписьЭтапыОплаты = "";
	КонецЕсли;
	
	СообщенияПользователю = Новый Соответствие;
	
	Если ЭтапыГрафикаОплаты.Количество() = 0 Тогда
		
		Если СуммаОплатыВсего <> 0 Или СуммаЗалогаВсего <> 0 Тогда
			
			Если УпрощенныйРежимДиалога Тогда
				ТекстОшибки = НСтр("ru = 'Необходимо заполнить хотя бы один из этапов оплаты'");
				ПолеОшибки  = "ПроцентПлатежаКредит";
			Иначе
				ТекстОшибки = НСтр("ru = 'Необходимо заполнить этапы графика оплаты'");
				ПолеОшибки  = "ЭтапыГрафикаОплаты";
			КонецЕсли;
			
			Если ПривязыватьСообщенияКГиперссылке Тогда
				ПолеОшибки = НадписьЭтапыОплаты;
			КонецЕсли;
			
			Отказ = Истина;
			СообщенияПользователю.Вставить(ТекстОшибки, ПолеОшибки);
			
		КонецЕсли;
		
	Иначе
		
		УчитыватьВариантОплаты = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтапыГрафикаОплаты[0],"ВариантОплаты");
		
		ИтогПроцентПлатежа = 0;
		ИтогПроцентЗалогаЗаТару = 0;
		ИтогСуммаПлатежа = 0;
		ИтогСуммаЗалогаЗаТару = 0;
		ИтогСуммаОтклонения = 0;
		Для ТекИндекс = 0 По ЭтапыГрафикаОплаты.Количество()-1 Цикл
			
			ДанныеЭтапа = Новый Структура();
			ДанныеЭтапа.Вставить("НомерСтроки",                  0);
			ДанныеЭтапа.Вставить("ВариантОплаты",     Неопределено);
			ДанныеЭтапа.Вставить("ДатаПлатежа",         '00010101');
			ДанныеЭтапа.Вставить("ПроцентПлатежа",               0);
			ДанныеЭтапа.Вставить("ПроцентЗалогаЗаТару",          0);
			ДанныеЭтапа.Вставить("СуммаПлатежа",                 0);
			ДанныеЭтапа.Вставить("СуммаЗалогаЗаТару",            0);
			ДанныеЭтапа.Вставить("СуммаОтклоненияМерныхТоваров", 0);
			ДанныеЭтапа.Вставить("ВариантОтсчета",    Неопределено);
			
			ЗаполнитьЗначенияСвойств(ДанныеЭтапа, ЭтапыГрафикаОплаты[ТекИндекс]);
			ИтогПроцентПлатежа = ИтогПроцентПлатежа + ДанныеЭтапа.ПроцентПлатежа;
			ИтогПроцентЗалогаЗаТару = ИтогПроцентЗалогаЗаТару + ДанныеЭтапа.ПроцентЗалогаЗаТару;
			ИтогСуммаПлатежа = ИтогСуммаПлатежа + ДанныеЭтапа.СуммаПлатежа;
			ИтогСуммаЗалогаЗаТару = ИтогСуммаЗалогаЗаТару + ДанныеЭтапа.СуммаЗалогаЗаТару;
			ИтогСуммаОтклонения = ИтогСуммаОтклонения + ДанныеЭтапа.СуммаОтклоненияМерныхТоваров;
			
			АдресОшибки = НСтр("ru = 'в строке %НомерСтроки% списка ""Этапы графика оплаты""'");
			АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%", ДанныеЭтапа.НомерСтроки);
			
			// Все реквизиты этапа оплаты должны быть заполнены
			
			Если Не ЗначениеЗаполнено(ДанныеЭтапа.ВариантОплаты) И УчитыватьВариантОплаты Тогда
				
				ТекстОшибки = НСтр("ru = 'Не заполнена колонка ""Вариант оплаты""'");
				
				Если ПривязыватьСообщенияКГиперссылке Тогда
					ПолеОшибки = НадписьЭтапыОплаты;
				Иначе
					ПолеОшибки = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ДанныеЭтапа.НомерСтроки, "ВариантОплаты");
				КонецЕсли;
				
				Отказ = Истина;
				СообщенияПользователю.Вставить(ТекстОшибки + " " + АдресОшибки, ПолеОшибки);
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДанныеЭтапа.ВариантОтсчета) И УчитыватьВариантОплаты Тогда
				
				Если УпрощенныйРежимДиалога Тогда
					Если ДанныеЭтапа.ВариантОплаты = Перечисления.ВариантыКонтроляОплатыПоставщику.КредитСдвиг
						Или ДанныеЭтапа.ВариантОплаты = Перечисления.ВариантыКонтроляОплатыКлиентом.КредитСдвиг Тогда
						ТекстОшибки = НСтр("ru = 'Не заполнен ""Вариант отсчета"" по постоплате'");
						ПолеОшибки  = "ВариантОтсчетаНеКонтролируемый";
					Иначе
						ТекстОшибки = НСтр("ru = 'Не заполнен ""Вариант отсчета"" по предоплате'");
						ПолеОшибки  = "ВариантОтсчетаКонтролируемый";
					КонецЕсли;
				Иначе
					ТекстОшибки = НСтр("ru = 'Не заполнена колонка ""Вариант отсчета""'");
					
					Если ПривязыватьСообщенияКГиперссылке Тогда
						ПолеОшибки = НадписьЭтапыОплаты;
					Иначе
						ПолеОшибки = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ДанныеЭтапа.НомерСтроки, "ВариантОтсчета");
					КонецЕсли;
					
				КонецЕсли;
				
				Отказ = Истина;
				СообщенияПользователю.Вставить(ТекстОшибки + " " + АдресОшибки, ПолеОшибки);
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДанныеЭтапа.ДатаПлатежа) Тогда
				
				Если УпрощенныйРежимДиалога Тогда
					Если ДанныеЭтапа.ВариантОплаты = Перечисления.ВариантыКонтроляОплатыПоставщику.КредитСдвиг
						Или ДанныеЭтапа.ВариантОплаты = Перечисления.ВариантыКонтроляОплатыКлиентом.КредитСдвиг Тогда
						ТекстОшибки = НСтр("ru = 'Не заполнена ""Дата платежа"" по постоплате'");
						ПолеОшибки  = "ДатаКредит";
					Иначе
						ТекстОшибки = НСтр("ru = 'Не заполнена ""Дата платежа"" по предоплате'");
						ПолеОшибки  = "ДатаПредоплата";
					КонецЕсли;
				Иначе
					ТекстОшибки = НСтр("ru = 'Не заполнена колонка ""Дата платежа""'");
					ПолеОшибки  = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ДанныеЭтапа.НомерСтроки, "ДатаПлатежа");
				КонецЕсли;
				
				Если ПривязыватьСообщенияКГиперссылке Тогда
					ПолеОшибки = НадписьЭтапыОплаты;
				КонецЕсли;
				
				Отказ = Истина;
				СообщенияПользователю.Вставить(ТекстОшибки, ПолеОшибки);
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДанныеЭтапа.ПроцентПлатежа)
				И Не ЗначениеЗаполнено(ДанныеЭтапа.ПроцентЗалогаЗаТару)
				И СуммаЗалогаВсего + СуммаОплатыВсего > 0
				И ((ДанныеЭтапа.СуммаПлатежа + ДанныеЭтапа.СуммаЗалогаЗаТару) / (СуммаЗалогаВсего+СуммаОплатыВсего) >= 0.0001
					Или ДанныеЭтапа.СуммаПлатежа + ДанныеЭтапа.СуммаЗалогаЗаТару = 0) Тогда
				
				ТекстОшибки = НСтр("ru = 'Не заполнена колонка ""Процент платежа""'");
				
				Если ПривязыватьСообщенияКГиперссылке Тогда
					ПолеОшибки = НадписьЭтапыОплаты;
				Иначе
					ПолеОшибки = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ДанныеЭтапа.НомерСтроки, "ПроцентПлатежа");
				КонецЕсли;
				
				Отказ = Истина;
				СообщенияПользователю.Вставить(ТекстОшибки + " " + АдресОшибки, ПолеОшибки);
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДанныеЭтапа.СуммаПлатежа)
				И ЗначениеЗаполнено(ДанныеЭтапа.ПроцентПлатежа)
				И СуммаОплатыВсего <> 0 Тогда
				
				ТекстОшибки = НСтр("ru = 'Не заполнена колонка ""Сумма платежа""'");
				
				Если ПривязыватьСообщенияКГиперссылке Тогда
					ПолеОшибки = НадписьЭтапыОплаты;
				Иначе
					ПолеОшибки = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ДанныеЭтапа.НомерСтроки, "СуммаПлатежа");
				КонецЕсли;
				
				Отказ = Истина;
				СообщенияПользователю.Вставить(ТекстОшибки + " " + АдресОшибки, ПолеОшибки);
				
			КонецЕсли;
				
			Если Не ЗначениеЗаполнено(ДанныеЭтапа.СуммаЗалогаЗаТару)
				И ЗначениеЗаполнено(ДанныеЭтапа.ПроцентЗалогаЗаТару) 
				И СуммаЗалогаВсего > 0 Тогда
				
				ТекстОшибки = НСтр("ru = 'Не заполнена колонка ""Сумма залога за тару""'");
				
				Если ПривязыватьСообщенияКГиперссылке Тогда
					ПолеОшибки = НадписьЭтапыОплаты;
				Иначе
					ПолеОшибки = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ДанныеЭтапа.НомерСтроки, "СуммаЗалогаЗаТару");
				КонецЕсли;
				
				Отказ = Истина;
				СообщенияПользователю.Вставить(ТекстОшибки + " " + АдресОшибки, ПолеОшибки);
				
			КонецЕсли;
			
			// Дата платежа в тч ЭтапыГрафикаОплаты должна быть не меньше даты документа
			Если ЗначениеЗаполнено(ДанныеЭтапа.ДатаПлатежа) 
				И ЗначениеЗаполнено(СтруктураПараметров.Дата) 
				И ДанныеЭтапа.ДатаПлатежа < ДатаДокумента
				И (СтруктураПараметров.ЭтоЗаказ
					Или СтруктураПараметров.НакладнаяИсточникГрафика) Тогда
				
				Если УпрощенныйРежимДиалога Тогда
					Если ДанныеЭтапа.ВариантОплаты = Перечисления.ВариантыКонтроляОплатыПоставщику.КредитСдвиг
						Или ДанныеЭтапа.ВариантОплаты = Перечисления.ВариантыКонтроляОплатыКлиентом.КредитСдвиг Тогда
						ПолеОшибки = "ДатаКредит";
					Иначе
						ПолеОшибки = "ДатаПредоплата";
					КонецЕсли;
				Иначе
					ПолеОшибки = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ДанныеЭтапа.НомерСтроки, "ДатаПлатежа");
				КонецЕсли;
				
				Если ПривязыватьСообщенияКГиперссылке Тогда
					ПолеОшибки = НадписьЭтапыОплаты;
				КонецЕсли;
				
				ТекстОшибки = НСтр("ru = 'Дата платежа должна быть не меньше даты документа %ДатаДокумента%'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ДатаДокумента%", Формат(СтруктураПараметров.Дата, "ДЛФ=DD"));
				
				Отказ = Истина;
				СообщенияПользователю.Вставить(ТекстОшибки, ПолеОшибки);
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Процент платежей в в тч ЭтапыГрафикаОплаты должен равняться 100%
		
		Если ЭтапыГрафикаОплаты.Количество() > 0 Тогда
			
			Если ИтогПроцентПлатежа <> 100 И СуммаОплатыВсего - СуммаЗалогаВсего > 0 Тогда
				
				ТекстОшибки = НСтр("ru = 'Процент платежей по всем этапам ""%ПроцентПоЭтапам%%"" должен равняться ""100%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПроцентПоЭтапам%", ИтогПроцентПлатежа);
				
				Если ПривязыватьСообщенияКГиперссылке Тогда
					ПолеОшибки = НадписьЭтапыОплаты;
				Иначе
					ПолеОшибки = ?(УпрощенныйРежимДиалога, "ПроцентПлатежаКредит", "ЭтапыГрафикаОплаты[0].ПроцентПлатежа");
				КонецЕсли;
				
				Отказ = Истина;
				СообщенияПользователю.Вставить(ТекстОшибки, ПолеОшибки);
				
			КонецЕсли;
				
			Если ИтогСуммаЗалогаЗаТару + ИтогСуммаОтклонения -(СуммаОплатыВсего - ИтогСуммаПлатежа) 
				<> СуммаЗалогаВсего И СуммаЗалогаВсего <> 0 Тогда
				
				ТекстОшибки = НСтр("ru = 'Процент залога за тару по всем этапам ""%ПроцентПоЭтапам%%"" должен равняться ""100%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПроцентПоЭтапам%", ИтогПроцентЗалогаЗаТару);
				
				Если ПривязыватьСообщенияКГиперссылке Тогда
					ПолеОшибки = НадписьЭтапыОплаты;
				Иначе
					ПолеОшибки = ?(УпрощенныйРежимДиалога, "ПроцентЗалогаЗаТаруКредит", "ЭтапыГрафикаОплаты[0].ПроцентЗалогаЗаТару");
				КонецЕсли;
				
				Отказ = Истина;
				СообщенияПользователю.Вставить(ТекстОшибки, ПолеОшибки);
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Сумма платежей в в тч ЭтапыГрафикаОплаты должна равняться сумме заказа с учетом отмененных позиций.
		
		Если ЭтапыГрафикаОплаты.Количество() > 0 Тогда
			
			Если СуммаОплатыВсего <> 0 И ИтогСуммаПлатежа + ИтогСуммаОтклонения <> СуммаОплатыВсего Тогда
				
				ТекстОшибки = НСтр("ru = 'Сумма платежей по всем этапам ""%СуммаПоЭтапам% %Валюта%"" не должна отличаться от суммы документа ""%СуммаВсего% %Валюта%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СуммаПоЭтапам%", ИтогСуммаПлатежа);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СуммаВсего%",    СуммаОплатыВсего - СуммаЗалогаВсего);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Валюта%",        СтруктураПараметров.Валюта);
				
				Если УпрощенныйРежимДиалога Тогда
					Если ЭтапыГрафикаОплаты[0].ВариантОплаты = Перечисления.ВариантыКонтроляОплатыПоставщику.ПредоплатаДоПоступления Тогда
						ПолеОшибки = "СуммаПлатежаПредоплата";
					Иначе
						ПолеОшибки = "СуммаПлатежаКредит";
					КонецЕсли;
				Иначе
					ПолеОшибки = "ЭтапыГрафикаОплаты[0].СуммаПлатежа";
				КонецЕсли;
				
				Отказ = Истина;
				СообщенияПользователю.Вставить(ТекстОшибки, ПолеОшибки);
				
			КонецЕсли;
			
			Если СуммаЗалогаВсего <> 0 И ИтогСуммаЗалогаЗаТару <> СуммаЗалогаВсего Тогда
				
				ТекстОшибки = НСтр("ru = 'Сумма залога за тару по всем этапам ""%СуммаПоЭтапам% %Валюта%"" не должна отличаться от суммы залога по документу ""%СуммаВсего% %Валюта%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СуммаПоЭтапам%", ИтогСуммаЗалогаЗаТару);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СуммаВсего%",    СуммаЗалогаВсего);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Валюта%",        СтруктураПараметров.Валюта);
				
				Если УпрощенныйРежимДиалога Тогда
					Если ЭтапыГрафикаОплаты[0].ВариантОплаты = Перечисления.ВариантыКонтроляОплатыПоставщику.ПредоплатаДоПоступления Тогда
						ПолеОшибки = "СуммаЗалогаЗаТаруПредоплата";
					Иначе
						ПолеОшибки = "СуммаЗалогаЗаТаруКредит";
					КонецЕсли;
				Иначе
					ПолеОшибки = "ЭтапыГрафикаОплаты[0].СуммаЗалогаЗаТару";
				КонецЕсли;
				
				Если ПривязыватьСообщенияКГиперссылке Тогда
					ПолеОшибки = НадписьЭтапыОплаты;
				КонецЕсли;
				
				Отказ = Истина;
				СообщенияПользователю.Вставить(ТекстОшибки, ПолеОшибки);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого ЭлементСоответствия Из СообщенияПользователю Цикл
		
		ОбщегоНазначения.СообщитьПользователю(
			ЭлементСоответствия.Ключ,,
			ЭлементСоответствия.Значение);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбщиеМетоды

// Возвращает дату последнего этапа по графику.
//
// Параметры:
// 	ДатаОтгрузки                   - Дата - дата отгрузки.
// 	Соглашение                     - СправочникСсылка.СоглашенияСПоставщиками, СправочникСсылка.СоглашенияСКлиентами - Соглашение. 
// 	ГрафикОплаты                   - СправочникСсылка.ГрафикиОплаты - График оплаты, если есть.
// 	ДатаЗаказа                     - Дата - дата заказа.
// 	ДатаСогласования               - Дата - дата согласования заказа.
// 	ДатаПереходаПраваСобственности - Дата - дата перехода права собственности
//
// Возвращаемое значение:
// 	Дата - Последняя дата по графику с учетом календаря.
//
Функция ПолучитьПоследнююДатуПоГрафику(ДатаОтгрузки,
	Соглашение,
	ГрафикОплаты = Неопределено,
	ДатаЗаказа = Неопределено,
	ЗНАЧ ДатаСогласования = Неопределено,
	ЗНАЧ ДатаПереходаПраваСобственности = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ДатаСогласования) Тогда
		ДатаСогласования = ДатаЗаказа;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Соглашение) И ТипЗнч(Соглашение) = Тип("СправочникСсылка.СоглашенияСПоставщиками") Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ЭтапыГрафикаОплаты.Сдвиг                                 КАК Сдвиг,
			|	ЭтапыГрафикаОплаты.Ссылка.Календарь                      КАК Календарь,
			|	ЭтапыГрафикаОплаты.ВариантОтсчета                        КАК ВариантОтсчета,
			|	ЭтапыГрафикаОплаты.Ссылка.СрокПереходаПраваСобственности КАК СрокПереходаПраваСобственности
			|ИЗ
			|	Справочник.СоглашенияСПоставщиками.ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
			|ГДЕ
			|	ЭтапыГрафикаОплаты.Ссылка = &Соглашение");
	Иначе 
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ЭтапыГрафикаОплаты.Сдвиг                                 КАК Сдвиг,
			|	ЭтапыГрафикаОплаты.Ссылка.Календарь                      КАК Календарь,
			|	ЭтапыГрафикаОплаты.ВариантОтсчета                        КАК ВариантОтсчета,
			|	ЭтапыГрафикаОплаты.Ссылка.СрокПереходаПраваСобственности КАК СрокПереходаПраваСобственности
			|ИЗ
			|	Справочник.СоглашенияСКлиентами.ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
			|ГДЕ
			|	ЭтапыГрафикаОплаты.Ссылка = &Соглашение
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЭтапыГрафикаОплаты.Сдвиг            КАК Сдвиг,
			|	ЭтапыГрафикаОплаты.Ссылка.Календарь КАК Календарь,
			|	ЭтапыГрафикаОплаты.ВариантОтсчета   КАК ВариантОтсчета,
			|	0                                   КАК СрокПереходаПраваСобственности
			|ИЗ
			|	Справочник.ГрафикиОплаты.Этапы КАК ЭтапыГрафикаОплаты
			|ГДЕ
			|	ЭтапыГрафикаОплаты.Ссылка = &ГрафикОплаты
			|
			|");
		Запрос.УстановитьПараметр("ГрафикОплаты", ГрафикОплаты);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Соглашение", ?(НЕ ЗначениеЗаполнено(ГрафикОплаты),Соглашение,Неопределено));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПоследняяДатаПлатежа = Дата(1,1,1);
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
	
		СтруктураПараметров = ЭтапыОплатыКлиентСервер.ПараметрыРасчетаДатыПлатежа();
		СтруктураПараметров.ВариантОтсчета                 = Выборка.ВариантОтсчета;
		СтруктураПараметров.Сдвиг                          = Выборка.Сдвиг;
		СтруктураПараметров.ДатаЗаказа                     = ДатаЗаказа;
		СтруктураПараметров.ДатаСогласования               = ДатаСогласования;
		СтруктураПараметров.ДатаОтгрузки                   = ДатаОтгрузки;
		СтруктураПараметров.ДатаПереходаПраваСобственности = ДатаПереходаПраваСобственности;
		СтруктураПараметров.СрокПереходаПраваСобственности = Выборка.СрокПереходаПраваСобственности;
		СтруктураПараметров.Календарь                      = Выборка.Календарь;
		
		Если ЗначениеЗаполнено(Выборка.Календарь) Тогда
			ДатаПлатежа = ЭтапыОплатыВызовСервера.ДатаПлатежаПоКалендарю(СтруктураПараметров);
		Иначе
			ДатаПлатежа = ЭтапыОплатыКлиентСервер.ДатаПлатежаБезКалендаря(СтруктураПараметров);
		КонецЕсли;
		
		ПоследняяДатаПлатежа = Макс(ПоследняяДатаПлатежа,ДатаПлатежа);
		
	КонецЦикла;
	
	Возврат ПоследняяДатаПлатежа;
	
КонецФункции

// Возвращает структуру с параметрами выбора реквизитов оплаты для передачи во внешние формы.
//
// Параметры:
// 		ОбъектМетаданных - ОбъектМетаданных - объект метаданных, по которому нужно определить параметры.
//
// Возвращаемое значение:
// 		Структура:
// 			* Ключ - Строка - Имя реквизита оплаты.
// 			* Значение - ФиксированныйМассив из Структура - Параметры выбора, где:
// 				** ФормаОплаты - ФиксированныйМассив из ПараметрВыбора.
// 				** Касса - ФиксированныйМассив из ПараметрВыбора.
// 				** БанковскийСчет - ФиксированныйМассив из ПараметрВыбора.
// 				** ГрафикОплаты - ФиксированныйМассив из ПараметрВыбора.
//
Функция ПараметрыВыбораРеквизитовОплаты(ОбъектМетаданных) Экспорт
	
	РеквизитыОбъекта = ОбъектМетаданных.Реквизиты;
	ПараметрыВыбораРеквизитов = Новый Структура;
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ФормаОплаты", ОбъектМетаданных) Тогда
		ПараметрыВыбораРеквизитов.Вставить("ФормаОплаты", РеквизитыОбъекта.ФормаОплаты.ПараметрыВыбора);
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Касса", ОбъектМетаданных) Тогда
		ПараметрыВыбораРеквизитов.Вставить("Касса", РеквизитыОбъекта.Касса.ПараметрыВыбора);
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("БанковскийСчет", ОбъектМетаданных) Тогда
		ПараметрыВыбораРеквизитов.Вставить("БанковскийСчет", РеквизитыОбъекта.БанковскийСчет.ПараметрыВыбора);
	ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("БанковскийСчетОрганизации", ОбъектМетаданных) Тогда
		ПараметрыВыбораРеквизитов.Вставить("БанковскийСчет", РеквизитыОбъекта.БанковскийСчетОрганизации.ПараметрыВыбора);
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ГрафикОплаты", ОбъектМетаданных) Тогда
		ПараметрыВыбораРеквизитов.Вставить("ГрафикОплаты", РеквизитыОбъекта.ГрафикОплаты.ПараметрыВыбора);
	КонецЕсли;
	
	Возврат ПараметрыВыбораРеквизитов;
	
КонецФункции

//Возращает минимальную дату неоплаченного этапа графика исполнения договора.
//
// Параметры:
//
// 		ГрафикИсполненияДоговора - ДокументСсылка.ГрафикИсполненияДоговора - график договора.
// 		Дата - Дата - дата документа.
// 		ТипРасчетов - ПеречислениеСсылка.ТипыРасчетовСПартнерами - определяет в каком регистре искать дату неоплаченного этапа.
//
// Возвращаемое значение:
// 		Дата - Минимальная дата неоплаченного этапа графика, если все оплачены - пустая дата.
Функция ДатаПервогоНеоплаченногоЭтапаГрафика(ГрафикИсполненияДоговора, Дата, ТипРасчетов) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") И ЗначениеЗаполнено(ГрафикИсполненияДоговора) Тогда
		
		Запрос = Новый Запрос;
		Если ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом Тогда
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	ЕСТЬNULL(МИНИМУМ(РасчетыСКлиентамиПланОплатОстатки.ДатаПлановогоПогашения), ДАТАВРЕМЯ(1,1,1)) КАК ДатаПлановогоПогашения
			|ИЗ
			|	РегистрНакопления.РасчетыСКлиентамиПланОплат.Остатки(,
			|		ДокументПлан = &ДокументПлан) КАК РасчетыСКлиентамиПланОплатОстатки";
		Иначе
			Запрос.Текст = "
			|	ВЫБРАТЬ
			|		ЕСТЬNULL(МИНИМУМ(РасчетыСПоставщикамиПланОплат.ДатаПлановогоПогашения), ДАТАВРЕМЯ(1,1,1)) КАК ДатаПлановогоПогашения
			|	ИЗ
			|		РегистрНакопления.РасчетыСПоставщикамиПланОплат.Остатки(,
			|			ДокументПлан = &ДокументПлан) КАК РасчетыСПоставщикамиПланОплат";
		КонецЕсли;
		Запрос.УстановитьПараметр("ДокументПлан", ГрафикИсполненияДоговора);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.ДатаПлановогоПогашения;
		Иначе
			Возврат Дата;
		КонецЕсли;
	Иначе
		Возврат Дата;
	КонецЕсли;
	
КонецФункции

// Процедура проверяет заполнение и корректность даты платежа в документе.
//
// Параметры:
//		ДатаПлатежа - Дата - дата платежа проверяемого документа
//		ДатаДокумента - Дата - дата проверяемого документа 
//		Отказ - Булево - Признак отказа от продолжения работы.
//
Процедура ПроверитьЗаполнениеКорректностьДатыПлатежа(ДатаПлатежа, ДатаДокумента, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ДатаПлатежа) Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Поле ""Дата платежа"" не заполнено'"),
			,
			"ДатаПлатежа",
			"Объект",
			Отказ);
		
	ИначеЕсли ДатаПлатежа < НачалоДня(ДатаДокумента) Тогда
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Дата платежа должна быть не меньше даты документа %1'"),
			Формат(ДатаДокумента, "ДЛФ=DD"));
		ОбщегоНазначения.СообщитьПользователю(
			ТекстОшибки,
			,
			"ДатаПлатежа",
			"Объект",
			Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет проценты по уже рассчитанным суммам в таблице этапов графиков оплаты.
// 
// Параметры:
// 	ЭтапыГрафикаОплаты - ТаблицаЗначений,ДанныеФормыКоллекция - этапы, в которых надо заполнить проценты.
//
Процедура ЗаполнитьПроцентыПоСуммам(ЭтапыГрафикаОплаты) Экспорт
	
	Если ВзаиморасчетыКлиентСервер.ЭтоТабличнаяЧасть(ЭтапыГрафикаОплаты) Тогда
		ЕстьТара = ЭтапыГрафикаОплаты.Колонки.Найти("СуммаЗалогаЗаТару") <> Неопределено;
	Иначе
		ЕстьТара = ЭтапыГрафикаОплаты.Выгрузить().Колонки.Найти("СуммаЗалогаЗаТару") <> Неопределено;
	КонецЕсли;
	
	СуммыПлатежей = Новый Массив;
	СуммыПлатежейПоЗалогу = Новый Массив;
	
	// Если в этапах оплаты есть и положительные и отрицательные суммы, проценты не могут быть рассчитаны в РаспределитьСуммуПропорциональноКоэффициентам
	// Рассчитываются проценты относительно суммы по модулю
	СуммаПлатежейПоМодулю = 0;
	СуммаЗалогаПоМодулю = 0;
	Для Каждого СтрокаЭтапа Из ЭтапыГрафикаОплаты Цикл 
		МодульСуммы = ?(СтрокаЭтапа.СуммаПлатежа > 0, СтрокаЭтапа.СуммаПлатежа, -СтрокаЭтапа.СуммаПлатежа);
		СуммыПлатежей.Добавить(МодульСуммы);
		СуммаПлатежейПоМодулю = СуммаПлатежейПоМодулю + МодульСуммы;
		Если ЕстьТара Тогда
			МодульСуммы = ?(СтрокаЭтапа.СуммаЗалогаЗаТару > 0, СтрокаЭтапа.СуммаЗалогаЗаТару, -СтрокаЭтапа.СуммаЗалогаЗаТару);
			СуммыПлатежейПоЗалогу.Добавить(МодульСуммы);
			СуммаЗалогаПоМодулю = СуммаЗалогаПоМодулю + МодульСуммы;
		КонецЕсли;
	КонецЦикла;
	
	ПроцентыПлатежей = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(100, СуммыПлатежей);
	ПроцентыПлатежейПоЗалогу = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(?(ЕстьТара,100,0), СуммыПлатежейПоЗалогу);
	
	Сч = 0;
	Пока Сч < ЭтапыГрафикаОплаты.Количество() Цикл
		
		Если ПроцентыПлатежей <> Неопределено Тогда
			ЭтапыГрафикаОплаты[Сч].ПроцентПлатежа = ПроцентыПлатежей[Сч];
		Иначе
			ЭтапыГрафикаОплаты[Сч].ПроцентПлатежа = 0;
		КонецЕсли;
		Если ЕстьТара Тогда
			Если ПроцентыПлатежейПоЗалогу <> Неопределено Тогда
				ЭтапыГрафикаОплаты[Сч].ПроцентЗалогаЗаТару = ПроцентыПлатежейПоЗалогу[Сч];
			Иначе
				ЭтапыГрафикаОплаты[Сч].ПроцентЗалогаЗаТару = 0;
			КонецЕсли;
		КонецЕсли;
		
		Сч = Сч + 1;
	КонецЦикла;
	
КонецПроцедуры

// Процедура распределяет сумму отклонения мерных товаров по этапам графика оплаты.
Процедура РаспределитьСуммуОтклоненияПоЭтапамГрафикаОплаты(ЭтапыГрафикаОплаты, Знач СуммаОтклоненияКРаспределению) Экспорт
	
	РаспределеннаяСуммаОтклонения = 0;
	ТекущийЭтап                   = 0;
	КоличествоЭтапов              = ЭтапыГрафикаОплаты.Количество();
	СуммаОтклоненияКРаспределению = СуммаОтклоненияКРаспределению + ЭтапыГрафикаОплаты.Итог("СуммаОтклоненияМерныхТоваров");
	
	Если СуммаОтклоненияКРаспределению = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СуммаОплатыВсего              = ЭтапыГрафикаОплаты.Итог("СуммаПлатежа")+ЭтапыГрафикаОплаты.Итог("СуммаЗалогаЗаТару");
	
	Для Каждого ЭтапГрафикаОплаты Из ЭтапыГрафикаОплаты Цикл
		
		ТекущийЭтап = ТекущийЭтап + 1;
		
		КоэффициентОтОбщего    = (ЭтапГрафикаОплаты.СуммаПлатежа + ЭтапГрафикаОплаты.СуммаЗалогаЗаТару)/СуммаОплатыВсего;
		СуммаОтклоненияПоЭтапу = Окр(СуммаОтклоненияКРаспределению * КоэффициентОтОбщего, 2, РежимОкругления.Окр15как20);
		
		ЭтапГрафикаОплаты.СуммаОтклоненияМерныхТоваров  = ?(ТекущийЭтап = КоличествоЭтапов,
		                                                    СуммаОтклоненияКРаспределению - РаспределеннаяСуммаОтклонения,
		                                                    СуммаОтклоненияПоЭтапу);
		
		КоэффициентОтСтроки = ЭтапГрафикаОплаты.СуммаОтклоненияМерныхТоваров
		                      / (ЭтапГрафикаОплаты.СуммаПлатежа+ЭтапГрафикаОплаты.СуммаЗалогаЗаТару);
		
		ЧастьСуммыПлатежа   = Окр(ЭтапГрафикаОплаты.СуммаПлатежа * КоэффициентОтСтроки,2);
		ЭтапГрафикаОплаты.СуммаПлатежа      = ЭтапГрафикаОплаты.СуммаПлатежа - ЧастьСуммыПлатежа;
		
		ЭтапГрафикаОплаты.СуммаЗалогаЗаТару = ЭтапГрафикаОплаты.СуммаЗалогаЗаТару
		                                      - (ЭтапГрафикаОплаты.СуммаОтклоненияМерныхТоваров - ЧастьСуммыПлатежа);
		
		РаспределеннаяСуммаОтклонения = РаспределеннаяСуммаОтклонения + ЭтапГрафикаОплаты.СуммаОтклоненияМерныхТоваров;
		
	КонецЦикла;
	
КонецПроцедуры

// Двигает даты платежа этапов оплаты  в соответствии с изменениями исходных дат
// 
// Параметры:
//  Объект - ДокументОбъект, СправочникОбъект, ФормаКлиентскогоПриложения - Обрабатываемый объект
//  СтруктураПараметров - см. ВзаиморасчетыСервер.ПараметрыМеханизма
//  МассивИспользуемыхРеквизитов- Массив из Строка - имена реквизитов
// 
// Возвращаемое значение:
//  Булево - Истина, если есть изменения в Этапах оплаты
Функция ПересчитатьДатыПлатежаЭтаповОплаты(Объект, СтруктураПараметров, МассивИспользуемыхРеквизитов) Экспорт
	
	ИзмененыЭтапыОплаты = Ложь;
	
	ЭтапыГрафика = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты);
	
	Если СтруктураПараметров.ЭтоЗаказ Тогда
		
		ДатыОтгрузки = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ДатаОтгрузки);
		// Определяет, действительно ли в заказе несколько дат отгрузки, а не просто снят флаг ОтгружатьОднойДатой
		НесколькоДатОтгрузки = Истина;
		Если ТипЗнч(ДатыОтгрузки) = Тип("Массив") Тогда
			ДатыОтгрузки = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ДатыОтгрузки);
			Если ДатыОтгрузки.Количество() = 1 Тогда
				НесколькоДатОтгрузки = Ложь;
			КонецЕсли;
		Иначе
			НесколькоДатОтгрузки = Ложь;
		КонецЕсли;
		
		Если МассивИспользуемыхРеквизитов.Найти("ДатаОтгрузки") <> Неопределено 
			И МассивИспользуемыхРеквизитов.Найти("ОтгружатьОднойДатой") = Неопределено
			И НесколькоДатОтгрузки Тогда 
			СтруктураПараметров.ИзменилосьНесколькоДатОтгрузки = Истина;
		Иначе
			
			ДатаСогласования = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ДатаСогласования);
			ДатаЗаказа = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Дата);
			Если ТипЗнч(ДатыОтгрузки) = Тип("Массив") И ДатыОтгрузки.Количество() > 0 Тогда
				ДатаОтгрузки = ДатыОтгрузки[0];
			ИначеЕсли ТипЗнч(ДатыОтгрузки) = Тип("Дата") Тогда
				ДатаОтгрузки = ДатыОтгрузки;
			Иначе
				ДатаОтгрузки = Дата(1,1,1)
			КонецЕсли;
			
			Для Каждого СтрокаЭтапа Из ЭтапыГрафика Цикл
				Если СтрокаЭтапа.ВариантОтсчета = Перечисления.ВариантыОтсчетаДатыПлатежа.ОтДатыСогласования 
						И МассивИспользуемыхРеквизитов.Найти("ДатаСогласования") <> Неопределено
					ИЛИ СтрокаЭтапа.ВариантОтсчета = Перечисления.ВариантыОтсчетаДатыПлатежа.ОтДатыЗаказа 
						И МассивИспользуемыхРеквизитов.Найти("Дата") <> Неопределено 
					ИЛИ (СтрокаЭтапа.ВариантОтсчета = Перечисления.ВариантыОтсчетаДатыПлатежа.ДоДатыОтгрузки
							ИЛИ СтрокаЭтапа.ВариантОтсчета = Перечисления.ВариантыОтсчетаДатыПлатежа.ОтДатыОтгрузки)
						И МассивИспользуемыхРеквизитов.Найти("ДатаОтгрузки") <> Неопределено
					ИЛИ СтрокаЭтапа.ВариантОтсчета = Перечисления.ВариантыОтсчетаДатыПлатежа.ОтДатыПереходаПраваСобственности
						И МассивИспользуемыхРеквизитов.Найти("ДатаОтгрузки") <> Неопределено Тогда
					ПараметрыРасчетаДатыПлатежа = ЭтапыОплатыКлиентСервер.ПараметрыРасчетаДатыПлатежа();
					ПараметрыРасчетаДатыПлатежа.ВариантОтсчета                 = СтрокаЭтапа.ВариантОтсчета;
					ПараметрыРасчетаДатыПлатежа.Сдвиг                          = СтрокаЭтапа.Сдвиг;
					ПараметрыРасчетаДатыПлатежа.ДатаЗаказа                     = ДатаЗаказа;
					ПараметрыРасчетаДатыПлатежа.ДатаСогласования               = ДатаСогласования;
					ПараметрыРасчетаДатыПлатежа.ДатаОтгрузки                   = ДатаОтгрузки;
					ПараметрыРасчетаДатыПлатежа.ДатаПереходаПраваСобственности = Дата(1,1,1);
					ПараметрыРасчетаДатыПлатежа.СрокПереходаПраваСобственности = СтруктураПараметров.СрокПереходаПраваСобственности;
					ПараметрыРасчетаДатыПлатежа.Календарь                      = СтруктураПараметров.Календарь;
					ИзмененыЭтапыОплаты = Истина;
					Если ЗначениеЗаполнено(СтруктураПараметров.Календарь)  Тогда
						СтрокаЭтапа.ДатаПлатежа = ЭтапыОплатыВызовСервера.ДатаПлатежаПоКалендарю(ПараметрыРасчетаДатыПлатежа);
					Иначе
						СтрокаЭтапа.ДатаПлатежа = ЭтапыОплатыКлиентСервер.ДатаПлатежаБезКалендаря(ПараметрыРасчетаДатыПлатежа);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла; 
			
			
		КонецЕсли;
	ИначеЕсли СтруктураПараметров.ЭтоПродажаЗакупка Тогда
		
		ДатаСогласования = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ДатаСогласования);
		ДатаЗаказа = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Дата);
		Если ЗначениеЗаполнено(СтруктураПараметров.ДатаПереходаПраваСобственности) Тогда
			ДатаПереходаПраваСобственности = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ДатаПереходаПраваСобственности);
		Иначе
			ДатаПереходаПраваСобственности = Дата(1,1,1);
		КонецЕсли;
		
		Для Каждого СтрокаЭтапа Из ЭтапыГрафика Цикл
			Если (СтрокаЭтапа.ВариантОтсчета = Перечисления.ВариантыОтсчетаДатыПлатежа.ОтДатыОтгрузки 
				ИЛИ СтрокаЭтапа.ВариантОтсчета = Перечисления.ВариантыОтсчетаДатыПлатежа.ДоДатыОтгрузки) 
					И МассивИспользуемыхРеквизитов.Найти("Дата") <> Неопределено 
				ИЛИ СтрокаЭтапа.ВариантОтсчета = Перечисления.ВариантыОтсчетаДатыПлатежа.ОтДатыПереходаПраваСобственности
						И МассивИспользуемыхРеквизитов.Найти("ДатаОтгрузки") Тогда
				ПараметрыРасчетаДатыПлатежа = ЭтапыОплатыКлиентСервер.ПараметрыРасчетаДатыПлатежа();
				ПараметрыРасчетаДатыПлатежа.ВариантОтсчета                 = СтрокаЭтапа.ВариантОтсчета;
				ПараметрыРасчетаДатыПлатежа.Сдвиг                          = СтрокаЭтапа.Сдвиг;
				ПараметрыРасчетаДатыПлатежа.ДатаЗаказа                     = ДатаЗаказа;
				ПараметрыРасчетаДатыПлатежа.ДатаСогласования               = ДатаСогласования;
				ПараметрыРасчетаДатыПлатежа.ДатаОтгрузки                   = Дата(1,1,1);
				ПараметрыРасчетаДатыПлатежа.ДатаПереходаПраваСобственности = ДатаПереходаПраваСобственности;
				ПараметрыРасчетаДатыПлатежа.СрокПереходаПраваСобственности = СтруктураПараметров.СрокПереходаПраваСобственности;
				ПараметрыРасчетаДатыПлатежа.Календарь                      = СтруктураПараметров.Календарь;
				ИзмененыЭтапыОплаты = Истина;
				Если ЗначениеЗаполнено(СтруктураПараметров.Календарь)  Тогда
					СтрокаЭтапа.ДатаПлатежа = ЭтапыОплатыВызовСервера.ДатаПлатежаПоКалендарю(ПараметрыРасчетаДатыПлатежа);
				Иначе
					СтрокаЭтапа.ДатаПлатежа = ЭтапыОплатыКлиентСервер.ДатаПлатежаБезКалендаря(ПараметрыРасчетаДатыПлатежа);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если ИзмененыЭтапыОплаты Тогда
		СвернутьЭтапыГрафикаОплаты(ЭтапыГрафика);
	КонецЕсли;
	
	Возврат ИзмененыЭтапыОплаты;
	
КонецФункции

// Процедура по возможности пересчитает этапы оплаты заказа клиента после заполнения обеспечения.
// 
// Параметры:
//  Объект - ДокументОбъект.ЗаказКлиента, ДокументОбъект.ЗаказДавальца2_5 - Заказ, в котором изменились даты отгрузки
Процедура ПослеЗаполненияОбеспечения(Объект) Экспорт
	
	ИзмененыЭтапыОплаты = Ложь;
	
	ЭтапыГрафика = Объект.ЭтапыГрафикаОплаты;
	
	ДатаСогласования = Объект.ДатаСогласования;
	ДатаЗаказа = Объект.Дата;
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		ДатыОтгрузки = Объект.Товары.ВыгрузитьКолонку("ДатаОтгрузки");
	Иначе
		ДатыОтгрузки = Объект.Продукция.ВыгрузитьКолонку("ДатаОтгрузки");
	КонецЕсли;
	ДатыОтгрузки = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ДатыОтгрузки);
	Если ДатыОтгрузки.Количество() = 1 Тогда
		ДатаОтгрузки = ДатыОтгрузки[0];
	Иначе
		// Несколько дат отгрузки - не очищаем и не двигаем текущий график оплаты
		Возврат;
	КонецЕсли;
	
	ПараметрыСоглашения = Новый Структура("Календарь, СрокПереходаПраваСобственности");
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЗаказКлиента") И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		РеквизитыСоглашения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Соглашение, "Календарь, СрокПереходаПраваСобственности");
		ЗаполнитьЗначенияСвойств(ПараметрыСоглашения, РеквизитыСоглашения);
	Иначе
		ПараметрыСоглашения.Календарь = Справочники.ПроизводственныеКалендари.ПустаяСсылка();
		ПараметрыСоглашения.СрокПереходаПраваСобственности = 0;
	КонецЕсли;
	
	Для Каждого СтрокаЭтапа Из ЭтапыГрафика Цикл
		Если СтрокаЭтапа.ВариантОтсчета = Перечисления.ВариантыОтсчетаДатыПлатежа.ДоДатыОтгрузки
			ИЛИ СтрокаЭтапа.ВариантОтсчета = Перечисления.ВариантыОтсчетаДатыПлатежа.ОтДатыОтгрузки
			ИЛИ СтрокаЭтапа.ВариантОтсчета = Перечисления.ВариантыОтсчетаДатыПлатежа.ОтДатыПереходаПраваСобственности Тогда
			ПараметрыРасчетаДатыПлатежа = ЭтапыОплатыКлиентСервер.ПараметрыРасчетаДатыПлатежа();
			ПараметрыРасчетаДатыПлатежа.ВариантОтсчета                 = СтрокаЭтапа.ВариантОтсчета;
			ПараметрыРасчетаДатыПлатежа.Сдвиг                          = СтрокаЭтапа.Сдвиг;
			ПараметрыРасчетаДатыПлатежа.ДатаЗаказа                     = ДатаЗаказа;
			ПараметрыРасчетаДатыПлатежа.ДатаСогласования               = ДатаСогласования;
			ПараметрыРасчетаДатыПлатежа.ДатаОтгрузки                   = ДатаОтгрузки;
			ПараметрыРасчетаДатыПлатежа.ДатаПереходаПраваСобственности = Дата(1,1,1);
			ПараметрыРасчетаДатыПлатежа.СрокПереходаПраваСобственности = ПараметрыСоглашения.СрокПереходаПраваСобственности;
			ПараметрыРасчетаДатыПлатежа.Календарь                      = ПараметрыСоглашения.Календарь;
			ИзмененыЭтапыОплаты = Истина;
			Если ЗначениеЗаполнено(ПараметрыСоглашения.Календарь)  Тогда
				СтрокаЭтапа.ДатаПлатежа = ЭтапыОплатыВызовСервера.ДатаПлатежаПоКалендарю(ПараметрыРасчетаДатыПлатежа);
			Иначе
				СтрокаЭтапа.ДатаПлатежа = ЭтапыОплатыКлиентСервер.ДатаПлатежаБезКалендаря(ПараметрыРасчетаДатыПлатежа);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ИзмененыЭтапыОплаты Тогда
		СвернутьЭтапыГрафикаОплаты(ЭтапыГрафика);
		Объект.ДополнительныеСвойства.Вставить("ОповеститьОЗаполненииЭтапов", Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПреобразоватьТаблицуЭтаповВДанныеУпрощенногоРежима(ЭтапыОплаты, НетКонтроляПредоплаты)
	
	ЕстьТара = ЭтапыОплаты.Количество() > 0 
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтапыОплаты[0],"СуммаЗалогаЗаТару");
	ЕстьСуммаВзаиморасчетов = ЭтапыОплаты.Количество() > 0
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтапыОплаты[0],"СуммаВзаиморасчетов");
	
	СуммаПлатежаПредоплата                = 0;
	ПроцентПлатежаПредоплата              = 0;
	СуммаЗалогаЗаТаруПредоплата           = 0;
	ПроцентЗалогаЗаТаруПредоплата         = 0;
	СуммаВзаиморасчетовПредоплата         = 0;
	СуммаВзаиморасчетовПоТареПредоплата   = 0;
	ДатаПредоплата                        = Дата(1,1,1);
	ВариантОтсчетаПредоплата              = Неопределено;
	СдвигПредоплата                       = 0;
	ВариантОплатыПредоплата               = Неопределено;
	
	СуммаПлатежаКредит                    = 0;
	ПроцентПлатежаКредит                  = 0;
	СуммаЗалогаЗаТаруКредит               = 0;
	ПроцентЗалогаЗаТаруКредит             = 0;
	СуммаВзаиморасчетовКредит             = 0;
	СуммаВзаиморасчетовПоТареКредит       = 0;
	ДатаКредит                            = Дата(1,1,1);
	ВариантОтсчетаКредит                  = Неопределено;
	СдвигКредит                           = 0;
	ВариантОплатыКредит                   = Неопределено;
	
	Для Каждого ТекСтрока Из ЭтапыОплаты Цикл
		
		Если ТекСтрока.ВариантОплаты <> Перечисления.ВариантыКонтроляОплатыКлиентом.КредитСдвиг
			И ТекСтрока.ВариантОплаты <> Перечисления.ВариантыКонтроляОплатыПоставщику.КредитСдвиг
			И ТекСтрока.ВариантОплаты <> Перечисления.ВариантыКонтроляОплатыКлиентом.КредитПослеОтгрузки
			И ТекСтрока.ВариантОплаты <> Перечисления.ВариантыКонтроляОплатыПоставщику.КредитПослеПоступления
			И НЕ НетКонтроляПредоплаты Тогда
			СуммаПлатежаПредоплата   = СуммаПлатежаПредоплата + ТекСтрока.СуммаПлатежа;
			ПроцентПлатежаПредоплата = ПроцентПлатежаПредоплата + ТекСтрока.ПроцентПлатежа;
			
			Если ЕстьТара Тогда
				СуммаЗалогаЗаТаруПредоплата   = СуммаЗалогаЗаТаруПредоплата + ТекСтрока.СуммаЗалогаЗаТару;
				ПроцентЗалогаЗаТаруПредоплата = ПроцентЗалогаЗаТаруПредоплата + ТекСтрока.ПроцентЗалогаЗаТару;
			КонецЕсли;
			
			Если ЕстьСуммаВзаиморасчетов Тогда
				СуммаВзаиморасчетовПредоплата = СуммаВзаиморасчетовПредоплата + ТекСтрока.СуммаВзаиморасчетов;
				Если ЕстьТара Тогда
					СуммаВзаиморасчетовПоТареПредоплата = СуммаВзаиморасчетовПоТареПредоплата + ТекСтрока.СуммаВзаиморасчетовПоТаре;
				КонецЕсли;
			КонецЕсли;
			
			Если ДатаПредоплата <= ТекСтрока.ДатаПлатежа Тогда
				ДатаПредоплата = Макс(ДатаПредоплата, ТекСтрока.ДатаПлатежа);
				ВариантОтсчетаПредоплата = ТекСтрока.ВариантОтсчета;
				СдвигПредоплата = ТекСтрока.Сдвиг;
				ВариантОплатыПредоплата = ТекСтрока.ВариантОплаты;
			КонецЕсли;
		Иначе
			СуммаПлатежаКредит   = СуммаПлатежаКредит + ТекСтрока.СуммаПлатежа;
			ПроцентПлатежаКредит = ПроцентПлатежаКредит + ТекСтрока.ПроцентПлатежа;
			
			Если ЕстьТара Тогда
				СуммаЗалогаЗаТаруКредит   = СуммаЗалогаЗаТаруКредит + ТекСтрока.СуммаЗалогаЗаТару;
				ПроцентЗалогаЗаТаруКредит = ПроцентЗалогаЗаТаруКредит + ТекСтрока.ПроцентЗалогаЗаТару;
			КонецЕсли;
			
			Если ЕстьСуммаВзаиморасчетов Тогда
				СуммаВзаиморасчетовКредит = СуммаВзаиморасчетовКредит + ТекСтрока.СуммаВзаиморасчетов;
				Если ЕстьТара Тогда
					СуммаВзаиморасчетовПоТареКредит = СуммаВзаиморасчетовПоТареКредит + ТекСтрока.СуммаВзаиморасчетовПоТаре;
				КонецЕсли;
			КонецЕсли;
			
			Если ДатаКредит <= ТекСтрока.ДатаПлатежа Тогда
				ДатаКредит = Макс(ДатаКредит, ТекСтрока.ДатаПлатежа);
				ВариантОтсчетаКредит = ТекСтрока.ВариантОтсчета;
				СдвигКредит = ТекСтрока.Сдвиг;
				ВариантОплатыКредит = ТекСтрока.ВариантОплаты;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(ВариантОтсчетаПредоплата) И СуммаПлатежаПредоплата + СуммаЗалогаЗаТаруПредоплата > 0 Тогда
		ВариантОтсчетаПредоплата = Перечисления.ВариантыОтсчетаДатыПлатежа.ДоДатыОтгрузки;
	КонецЕсли;
	
	ЭтапыОплаты.Очистить();
	
	Если СуммаПлатежаПредоплата + СуммаЗалогаЗаТаруПредоплата <> 0 Тогда
		НовСтр = ЭтапыОплаты.Добавить();
		НовСтр.СуммаПлатежа      = СуммаПлатежаПредоплата;
		НовСтр.ПроцентПлатежа    = ПроцентПлатежаПредоплата;
		НовСтр.ДатаПлатежа       = ДатаПредоплата;
		НовСтр.ВариантОтсчета    = ВариантОтсчетаПредоплата;
		НовСтр.ВариантОплаты     = ВариантОплатыПредоплата;
		НовСтр.Сдвиг             = СдвигПредоплата;
		Если ЕстьТара Тогда
			НовСтр.СуммаЗалогаЗаТару   = СуммаЗалогаЗаТаруПредоплата;
			НовСтр.ПроцентЗалогаЗаТару = ПроцентЗалогаЗаТаруПредоплата;
		КонецЕсли;
		Если ЕстьСуммаВзаиморасчетов Тогда
			НовСтр.СуммаВзаиморасчетов = СуммаВзаиморасчетовПредоплата;
			Если ЕстьТара Тогда
				НовСтр.СуммаВзаиморасчетовПоТаре = СуммаВзаиморасчетовПоТареПредоплата;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СуммаПлатежаКредит + СуммаЗалогаЗаТаруКредит <> 0 Тогда
		НовСтр = ЭтапыОплаты.Добавить();
		НовСтр.СуммаПлатежа      = СуммаПлатежаКредит;
		НовСтр.ПроцентПлатежа    = ПроцентПлатежаКредит;
		НовСтр.ДатаПлатежа       = ДатаКредит;
		НовСтр.ВариантОтсчета    = ВариантОтсчетаКредит;
		НовСтр.ВариантОплаты     = ВариантОплатыКредит;
		НовСтр.Сдвиг             = СдвигКредит;
		Если ЕстьТара Тогда
			НовСтр.СуммаЗалогаЗаТару   = СуммаЗалогаЗаТаруКредит;
			НовСтр.ПроцентЗалогаЗаТару = ПроцентЗалогаЗаТаруКредит;
		КонецЕсли;
		Если ЕстьСуммаВзаиморасчетов Тогда
			НовСтр.СуммаВзаиморасчетов = СуммаВзаиморасчетовКредит;
			Если ЕстьТара Тогда
				НовСтр.СуммаВзаиморасчетовПоТаре = СуммаВзаиморасчетовПоТареКредит;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Сворачивает совпадающие этапы графика оплаты
//
// Параметры:
//  ЭтапыГрафикаОплаты	 - 	ДанныеФормыКоллекция, ТабличнаяЧасть - таблица этапов графика оплаты
//
Процедура СвернутьЭтапыГрафикаОплаты(ЭтапыГрафикаОплаты)
	
	ТаблицаЭтапыГрафикаОплаты = ЭтапыГрафикаОплаты.Выгрузить();
	МассивКолонок = Новый Массив;
	Для Каждого Колонка Из ТаблицаЭтапыГрафикаОплаты.Колонки Цикл
		МассивКолонок.Добавить(Колонка.Имя);
	КонецЦикла;
	
	МассивИзмерений = Новый Массив;
	МассивИзмерений.Добавить("ВариантОплаты");
	МассивИзмерений.Добавить("ВариантОтсчета");
	МассивИзмерений.Добавить("ДатаПлатежа");
	МассивИзмерений.Добавить("Сдвиг");
	МассивИзмерений.Добавить("Заказ");
	МассивИзмерений.Добавить("ОбъектРасчетов");
	МассивИзмерений.Добавить("СверхЗаказа");
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить("СуммаПлатежа");
	МассивРесурсов.Добавить("ПроцентПлатежа");
	МассивРесурсов.Добавить("СуммаЗалогаЗаТару");
	МассивРесурсов.Добавить("ПроцентЗалогаЗаТару");
	МассивРесурсов.Добавить("СуммаОтклоненияМерныхТоваров");
	МассивРесурсов.Добавить("СуммаВзаиморасчетов");
	МассивРесурсов.Добавить("СуммаВзаиморасчетовПоТаре");
	
	МассивИзмерений = ОбщегоНазначенияУТКлиентСервер.ПересечениеМассивов(МассивИзмерений, МассивКолонок);
	МассивРесурсов = ОбщегоНазначенияУТКлиентСервер.ПересечениеМассивов(МассивРесурсов, МассивКолонок);
	КолонкиИзмерений = СтрСоединить(МассивИзмерений, ",");
	КолонкиРесурсов = СтрСоединить(МассивРесурсов, ",");
	
	ТаблицаЭтапыГрафикаОплаты.Свернуть(КолонкиИзмерений,КолонкиРесурсов);
	
	ЭтапыОплатыСервер.ЗаполнитьПроцентыПоСуммам(ТаблицаЭтапыГрафикаОплаты);
	ЭтапыОплатыКлиентСервер.СортироватьТаблицуЭтапов(ТаблицаЭтапыГрафикаОплаты);
	
	ЭтапыГрафикаОплаты.Очистить();
	Для Каждого Стр Из ТаблицаЭтапыГрафикаОплаты Цикл
		ЗаполнитьЗначенияСвойств(ЭтапыГрафикаОплаты.Добавить(),Стр);
	КонецЦикла;

КонецПроцедуры

Функция СуммаЭтапаОплаты(ЭтапОплаты, СуммаОплаты, ЭтоЗалогЗаТару = Ложь)
	
	Если ЭтапОплаты.ВариантОплаты = Перечисления.ВариантыКонтроляОплатыКлиентом.АвансДоОбеспечения
		Или ЭтапОплаты.ВариантОплаты = Перечисления.ВариантыКонтроляОплатыКлиентом.ПредоплатаДоОтгрузки
		Или ЭтапОплаты.ВариантОплаты = Перечисления.ВариантыКонтроляОплатыПоставщику.АвансДоПодтверждения
		Или ЭтапОплаты.ВариантОплаты = Перечисления.ВариантыКонтроляОплатыПоставщику.ПредоплатаДоПоступления Тогда
		Возврат ОбщегоНазначенияУТКлиентСервер.ОкрВниз(
			СуммаОплаты 
				* ?(ЭтоЗалогЗаТару, ЭтапОплаты.ПроцентЗалогаЗаТару, ЭтапОплаты.ПроцентПлатежа) / 100,
			2);
	Иначе
		Возврат Окр(
			СуммаОплаты 
				* ?(ЭтоЗалогЗаТару, ЭтапОплаты.ПроцентЗалогаЗаТару, ЭтапОплаты.ПроцентПлатежа) / 100, 
			2,
			РежимОкругления.Окр15как20);
	КонецЕсли;
	
КонецФункции

#КонецОбласти
