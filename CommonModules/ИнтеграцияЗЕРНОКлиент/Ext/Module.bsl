#Область ПрограммныйИнтерфейс

#Область ОбменДанными

// Выполняет подготовку к передаче в сервис сообщений и начинает процедуру обмена
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма
//  ПараметрыОбработкиСообщений - Массив из см. ИнтеграцияЗЕРНОСлужебныйКлиентСервер.ПараметрыОбработкиСообщений
//                              - см. ИнтеграцияЗЕРНОСлужебныйКлиентСервер.ПараметрыОбработкиСообщений
//  ОповещениеПриЗавершении - ОписаниеОповещения - Оповещение при завершении операции
Процедура ПодготовитьКПередаче(Форма, ПараметрыОбработкиСообщений, ОповещениеПриЗавершении = Неопределено) Экспорт
	
	ОчиститьСообщения();
	
	Если ТипЗнч(ПараметрыОбработкиСообщений) = Тип("Массив") Тогда
		ВходящиеДанные = ПараметрыОбработкиСообщений;
	Иначе
		ВходящиеДанные = Новый Массив();
		ВходящиеДанные.Добавить(ПараметрыОбработкиСообщений);
	КонецЕсли;
	
	РезультатОбмена = ИнтеграцияЗЕРНОВызовСервера.ПодготовитьКПередаче(
		ВходящиеДанные,
		Форма.УникальныйИдентификатор);
	
	ИнтеграцияЗЕРНОСлужебныйКлиент.ОбработатьРезультатОбмена(
		РезультатОбмена, Форма, Неопределено, ОповещениеПриЗавершении);
	
КонецПроцедуры

// Выполняет отправку подготовленных сообщений, загрузку новых документов, обработку ответов из ЗЕРНО.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - источник команды выполнения обмена
//  Организация - Неопределено, Массив из ОпределяемыйТип.Организация, ОпределяемыйТип.Организация - Организация или несколько организаций,
//                                                                    по которым необходимо выполнить обмен.
//  ОповещениеПриЗавершении - ОписаниеОповещения - Оповещение при завершении операции.
//  СообщениеИлиДокумент    - Неопределено, Массив из Строка - Сообщения в очереди.
Процедура ВыполнитьОбмен(Форма, Организация = Неопределено, ОповещениеПриЗавершении = Неопределено, СообщениеИлиДокумент = Неопределено) Экспорт
	
	ОчиститьСообщения();
	
	РезультатОбмена = ИнтеграцияЗЕРНОВызовСервера.ВыполнитьОбмен(
		Организация,
		Форма.УникальныйИдентификатор,
		СообщениеИлиДокумент);
	
	ИнтеграцияЗЕРНОСлужебныйКлиент.ОбработатьРезультатОбмена(
		РезультатОбмена, Форма,, ОповещениеПриЗавершении);
	
КонецПроцедуры

// Отменяет последнюю операцию (например, если возникла ошибка передачи данных).
//
// Параметры:
//   ДокументСсылка - ДокументСсылка - документ, по которому требуется отменить операцию.
//
Процедура ОтменитьПоследнююОперацию(ДокументСсылка) Экспорт
	
	Изменения = ИнтеграцияЗЕРНОВызовСервера.ОтменитьПоследнююОперацию(ДокументСсылка);
	
	Если Изменения <> Неопределено Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Контекст",                ДокументСсылка);
		ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", Неопределено);
		
		ИнтеграцияЗЕРНОСлужебныйКлиент.ПослеЗавершенияОбмена(
			Изменения,
			ДополнительныеПараметры);
		
	Иначе
		
		ИнтеграцияЗЕРНОВызовСервера.ВосстановитьСтатусДокументаПоДаннымПротоколаОбмена(ДокументСсылка);
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Операция отмены не может быть выполнена для документа %1 по причине нарушения внутренней структуры хранения данных.
				           |Выполнена операция восстановления статуса по данным протокола обмена.'"),
				ДокументСсылка));
		
	КонецЕсли;
	
КонецПроцедуры

// Удаляет неотправленную операцию из очереди передачи данных в ЗЕРНО.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ, по которому требуется отменить передачу данных.
//
Процедура ОтменитьПередачу(ДокументСсылка) Экспорт
	
	Изменения = ИнтеграцияЗЕРНОВызовСервера.ОтменитьПередачу(ДокументСсылка);
	
	Если Изменения <> Неопределено Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Контекст",                ДокументСсылка);
		ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", Неопределено);
		
		ИнтеграцияЗЕРНОСлужебныйКлиент.ПослеЗавершенияОбмена(
			Изменения,
			ДополнительныеПараметры);
		
	Иначе
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Операция отмены не может быть выполнена для документа %1 по причине нарушения внутренней структуры хранения данных.
				           |Выполнена операция восстановления статуса по данным протокола обмена.'"),
				ДокументСсылка));
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОрганизацииДляОбмена(Форма) Экспорт
	
	Организации = Форма.Организации.ВыгрузитьЗначения();
	Если Организации.Количество() = 0 Тогда
		Возврат Неопределено;
	ИначеЕсли Организации.Количество() = 1 Тогда
		Возврат Организации[0];
	Иначе
		Возврат Организации;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ОтборПоОрганизации

Процедура ОткрытьФормуВыбораОрганизаций(Форма, Префикс, Префиксы = Неопределено, ОповещениеПриЗавершении = Неопределено) Экспорт
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("Организации", Форма.Организации.ВыгрузитьЗначения());
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма",                   Форма);
	ДополнительныеПараметры.Вставить("Префикс",                 Префикс);
	ДополнительныеПараметры.Вставить("Префиксы",                Префиксы);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	
	ОткрытьФорму(
		"ОбщаяФорма.ФормаВыбораСпискаОрганизацийЗЕРНО",
		ПараметрыОткрытияФормы,
		Форма,,,,
		Новый ОписаниеОповещения("ПослеЗавершенияВыбораОрганизаций", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры

Процедура ПослеЗавершенияВыбораОрганизаций(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма             = ДополнительныеПараметры.Форма;
	СписокОрганизаций = Результат.Организации;
	ПрименятьОтбор    = ДополнительныеПараметры.ОповещениеПриЗавершении = Неопределено;
	
	Если Результат.СохраненыНастройки Тогда
		Форма.ЗаполнитьСписокВыбораОрганизацииПоСохраненнымНастройкам();
	КонецЕсли;
	
	ОбработатьВыборОрганизаций(Форма, СписокОрганизаций, ПрименятьОтбор,
		ДополнительныеПараметры.Префикс, ДополнительныеПараметры.Префиксы);
	
	Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, СписокОрганизаций);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьВыборОрганизаций(Форма, Результат, ПрименятьОтбор, Префикс = Неопределено, Префиксы = Неопределено) Экспорт
	
	ИнтеграцияИСКлиентСервер.НастроитьОтборПоОрганизации(Форма, Результат, Префикс, Префиксы);
	
	Если ПрименятьОтбор Тогда
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Список") Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.Список,
				"Организация", Форма.Организации, ВидСравненияКомпоновкиДанных.ВСписке,,Форма.Организации.Количество() > 0);
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "СписокКОформлению") Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.СписокКОформлению,
				"Организация", Форма.Организации, ВидСравненияКомпоновкиДанных.ВСписке,, Форма.Организации.Количество() > 0);
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "СписокКОформлениюГосмониторинг") Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.СписокКОформлениюГосмониторинг,
				"Организация", Форма.Организации, ВидСравненияКомпоновкиДанных.ВСписке,, Форма.Организации.Количество() > 0);
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "СписокПоДокументамКОформлению") Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.СписокПоДокументамКОформлению,
				"Организация", Форма.Организации, ВидСравненияКомпоновкиДанных.ВСписке,, Форма.Организации.Количество() > 0);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаВСпискахДокументов

// Обработчик команд по выполнению требуемого дальнейшего действия в динамических списках.
//
// Параметры:
//  ДинамическийСписок - ТаблицаФормы - список в котором выполняется команда.
//  ПараметрыПередачи - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - действие, которое будет выполнено.
//                    - См. ИнтеграцияИСКлиентСервер.ИнициализироватьПараметрыПередачиДанных
Процедура ПодготовитьСообщенияКПередаче(ДинамическийСписок, ПараметрыПередачи) Экспорт
	
	ОчищатьСообщения = Истина;
	Если ТипЗнч(ПараметрыПередачи) = Тип("Структура") Тогда
		ОчищатьСообщения = ПараметрыПередачи.ОчищатьСообщения;
	КонецЕсли;
	Если ОчищатьСообщения Тогда
		ОчиститьСообщения();
	КонецЕсли;
	
	ДополнительныеПараметры = Неопределено;
	Если ТипЗнч(ПараметрыПередачи) = Тип("Структура") Тогда
		ДополнительныеПараметры = ПараметрыПередачи;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыПередачи) = Тип("Структура") Тогда
		ДальнейшееДействие = ПараметрыПередачи.ДальнейшееДействие;
	Иначе
		ДальнейшееДействие = ПараметрыПередачи;
	КонецЕсли;
	
	Контекст = ИнтеграцияИСКлиент.СтруктураПодготовкиСообщенийКПередаче(
		ДинамическийСписок, ДальнейшееДействие,
		Новый ОписаниеОповещения("ПодготовитьСообщенияКПередачеЗавершение", ЭтотОбъект, ДополнительныеПараметры));
	Если ТипЗнч(ПараметрыПередачи) = Тип("Структура") Тогда
		Контекст.ПараметрыПередачи = ПараметрыПередачи;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыПередачи) = Тип("Структура")
		И ПараметрыПередачи.ИменаКолонокДальнейшиеДействия <> Неопределено Тогда
		ИменаКолонокДальнейшиеДействия = ПараметрыПередачи.ИменаКолонокДальнейшиеДействия;
	Иначе
		ИменаКолонокДальнейшиеДействия = Новый Массив;
		ИменаКолонокДальнейшиеДействия.Добавить("ДальнейшееДействие1");
		ИменаКолонокДальнейшиеДействия.Добавить("ДальнейшееДействие2");
		ИменаКолонокДальнейшиеДействия.Добавить("ДальнейшееДействие3");
	КонецЕсли;
	
	ИменаРеквизитов = Новый Структура();
	ИменаРеквизитов.Вставить("Организация");
	ИменаРеквизитов.Вставить("Подразделение");
	
	ИнтеграцияИСКлиент.ОпределитьДоступностьДействий(
		Контекст, ИменаКолонокДальнейшиеДействия, ИменаРеквизитов);
	
	ИнтеграцияИСКлиент.ПодготовитьСообщенияКПередаче(Контекст);
	
КонецПроцедуры

// Обработчик завершения процедуры ПодготовитьСообщенияКПередаче.
//
// Параметры:
//  Контекст - Структура - контекст выполнения обработчика:
//   * МассивДокументов - Массив из ОпределяемыйТип.ДокументыЗЕРНО - список ссылок на обрабатываемые документы,
//   * НепроведенныеДокументы - Массив из ОпределяемыйТип.ДокументыЗЕРНО - документы, исключенные из обработки,
//   * ДинамическийСписок - ТаблицаФормы - список в котором выполняется команда,
//   * ДальнейшееДействие - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - действие, которое будет выполнено.
//  ДополнительныеПараметры - Структура, Неопределено - Дополнительные параметры
Процедура ПодготовитьСообщенияКПередачеЗавершение(Контекст, ДополнительныеПараметры = Неопределено) Экспорт
	
	ОчиститьСообщения();
	
	ВходящиеДанные = Новый Массив;
	Для Каждого ДокументСсылка Из Контекст.МассивДокументов Цикл
		
		ПараметрыОбработкиДокументов = ИнтеграцияЗЕРНОСлужебныйКлиентСервер.ПараметрыОбработкиСообщений();
		ПараметрыОбработкиДокументов.Ссылка             = ДокументСсылка;
		ПараметрыОбработкиДокументов.Организация        = Контекст.РеквизитыДокументов[ДокументСсылка].Организация;
		ПараметрыОбработкиДокументов.Подразделение      = Контекст.РеквизитыДокументов[ДокументСсылка].Подразделение;
		ПараметрыОбработкиДокументов.ДальнейшееДействие = Контекст.ДальнейшееДействие;
		
		ВходящиеДанные.Добавить(ПараметрыОбработкиДокументов);
		
	КонецЦикла;
	
	Форма = Неопределено;
	Если ТипЗнч(Контекст) = Тип("Структура")
		И Контекст.Свойство("ДинамическийСписок")
		И ТипЗнч(Контекст.ДинамическийСписок) = Тип("ТаблицаФормы") Тогда
		Форма = ИнтеграцияИСКлиент.ПолучитьФормуПоЭлементуФормы(Контекст.ДинамическийСписок);
	КонецЕсли;
	
	РезультатОбмена = ИнтеграцияЗЕРНОВызовСервера.ПодготовитьКПередаче(
		ВходящиеДанные,
		Форма.УникальныйИдентификатор);
	
	ОповещениеПриЗавершении = Неопределено;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ОповещениеПриЗавершении") Тогда
		ОповещениеПриЗавершении = ДополнительныеПараметры.ОповещениеПриЗавершении;
	КонецЕсли;
	
	ИнтеграцияЗЕРНОСлужебныйКлиент.ОбработатьРезультатОбмена(
		РезультатОбмена, Форма, Неопределено, ОповещениеПриЗавершении);
	
КонецПроцедуры

// Выполняет архивирование документов.
// 
// Параметры:
// 	Результат - КодВозвратаДиалога - Ответ на вопрос архивирования.
// 	ДополнительныеПараметры - Структура - Структура дополнительных параметров.
//
Процедура АрхивироватьДокументы(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	Изменения = ИнтеграцияЗЕРНОВызовСервера.АрхивироватьДокументы(
		ДополнительныеПараметры.ДокументыКАрхивированию);
	
	Если Изменения <> Неопределено Тогда
		
		ИнтеграцияЗЕРНОСлужебныйКлиент.ПослеЗавершенияОбмена(
			Изменения, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет архивирование распоряжений к оформлению.
// 
// Параметры:
// 	Результат - КодВозвратаДиалога - Ответ на вопрос архивирования.
// 	ДополнительныеПараметры - Структура - Структура дополнительных параметров.
//
Процедура АрхивироватьРаспоряжения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	Изменения = ИнтеграцияЗЕРНОВызовСервера.АрхивироватьРаспоряженияКОформлению(
		ДополнительныеПараметры.Распоряжения,
		ДополнительныеПараметры.ПустаяСсылка);
	
	Если Изменения <> Неопределено Тогда
		
		ИнтеграцияЗЕРНОСлужебныйКлиент.ПослеЗавершенияОбмена(
			Изменения, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

//Выполняет команду создания документа, с предварительным выбором вида продукции или способа ввода в оборот.
//
Процедура ОткрытьФормуСозданияДокумента(ПолноеИмяДокумента, ДокументОснование = Неопределено, Владелец = Неопределено, ОписаниеОповещения = Неопределено, КорректировочныйДокумент = Ложь) Экспорт
	
	ПараметрыОбъектаВыбора = ПараметрыИнтерактивногоВыбораОтбораЗаполнения(ПолноеИмяДокумента, ДокументОснование, КорректировочныйДокумент);
	
	Если ПараметрыОбъектаВыбора.ОбъектыДляВыбора.Количество() > 1 Тогда
		
		ПараметрыВыбораИзСписка = Новый Структура;
		ПараметрыВыбораИзСписка.Вставить("ОбъектыДляВыбора",         ПараметрыОбъектаВыбора.ОбъектыДляВыбора);
		ПараметрыВыбораИзСписка.Вставить("ПолноеИмяДокумента",       ПолноеИмяДокумента);
		ПараметрыВыбораИзСписка.Вставить("ДокументОснование",        ДокументОснование);
		ПараметрыВыбораИзСписка.Вставить("Владелец",                 Владелец);
		ПараметрыВыбораИзСписка.Вставить("ОписаниеОповещения",       ОписаниеОповещения);
		ПараметрыВыбораИзСписка.Вставить("ИмяФильтра",               ПараметрыОбъектаВыбора.ИмяФильтра);
		ПараметрыВыбораИзСписка.Вставить("КорректировочныйДокумент", КорректировочныйДокумент);
		
		ИнтеграцияИСКлиент.ВыбратьИзСпискаИОткрытьФормуСозданияДокумента(ПараметрыВыбораИзСписка, КорректировочныйДокумент);
		
	Иначе
		
		ИнтеграцияИСКлиент.ОткрытьФормуСозданияДокумента(ПолноеИмяДокумента, ДокументОснование, Владелец, ОписаниеОповещения, КорректировочныйДокумент);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПодборПартий

// Параметры формы подбора партий.
// 
// Возвращаемое значение:
//  Структура - Параметры формы подбора партий:
// * РежимВыбора - Булево - 
// * ЗакрыватьПриВыборе - Булево - 
// * ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - 
// * ОрганизацияВладелецПартии - ОпределяемыйТип.ОрганизацияКонтрагентГосИС
// * ПодразделениеВладелецПартии - ОпределяемыйТип.Подразделение
// * Грузоотправитель - ОпределяемыйТип.ОрганизацияКонтрагентГосИС
// * Местоположение - СправочникСсылка.КлючиАдресовЗЕРНО
// * ОрганизацияЭлеватор - ОпределяемыйТип.Организация
// * Номенклатура - ОпределяемыйТип.Номенклатура
// * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры
// * Серия - ОпределяемыйТип.СерияНоменклатуры
// * ОКПД2 - Строка
// * ЭтоЭкспорт - Неопределено, Булево - 
Функция ПараметрыФормыПодбораПартий() Экспорт
	
	Результат = Новый Структура;
	// Параметры формы
	Результат.Вставить("РежимВыбора", Истина);
	Результат.Вставить("ЗакрыватьПриВыборе", Ложь);
	// Параметр отбора
	Результат.Вставить("ВидПродукции", ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПустаяСсылка"));
	// Сопоставление отбора
	Результат.Вставить("ОрганизацияВладелецПартии");
	Результат.Вставить("ПодразделениеВладелецПартии");
	// Сопоставление или параметр отбора
	Результат.Вставить("Грузоотправитель");
	Результат.Вставить("Местоположение");
	// Сопоставление отбора
	Результат.Вставить("ОрганизацияЭлеватор");
	// Для выбора партии в строке
	Результат.Вставить("Номенклатура");
	Результат.Вставить("Характеристика");
	Результат.Вставить("Серия");
	Результат.Вставить("ОКПД2");
	// Отдельный блок для партий, предназначенных на экспорт
	Результат.Вставить("ЭтоЭкспорт", Неопределено);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

// Открыть форму синхронизация данных ЗЕРНО.
// 
// Параметры:
//  Форма - Форма
Процедура ОткрытьФормуСинхронизацияДанныхЗЕРНО(Форма) Экспорт
	
	ПараметрыФормы = Новый Структура;
	СтруктураБыстрогоОтбора = Новый Структура();
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Организации") Тогда
		СтруктураБыстрогоОтбора.Вставить("ОрганизацииПредставление", Форма.ОрганизацииПредставление);
		СтруктураБыстрогоОтбора.Вставить("Организации",              Форма.Организации);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Организация") Тогда
		СтруктураБыстрогоОтбора.Вставить("Организация",              Форма.Организация);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	
	ОткрытьФорму("РегистрСведений.СинхронизацияДанныхЗЕРНО.Форма.ФормаСписка", ПараметрыФормы);
	
КонецПроцедуры

// Открыть форму синхронизация данных ЗЕРНО.
// 
// Параметры:
//  Форма - Форма
//  Организации - Массив Из ОпределяемыйТип.Организация
//  ИмяЗапросаЗЕРНО - ПеречислениеСсылка.ИмяЗапросаЗЕРНО
//  ИмяСписка - Строка - Имя списка, который необходимо обновить
Процедура ЗагрузитьИзменения(Форма, Организации, ИмяЗапросаЗЕРНО, ИмяСписка = "Список") Экспорт
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ИмяЗапросаЗЕРНО", ИмяЗапросаЗЕРНО);
	ПараметрыОбработки.Вставить("ИмяСписка",       ИмяСписка);
	
	Если Организации.Количество() = 0 Тогда
		ПараметрыОбработки.Вставить("Форма", Форма);
		
		ПараметрыОткрытияФормы = Новый Структура("Организации", Организации);
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВыбратьОрганизацию",
			ЭтотОбъект, ПараметрыОбработки);
		
		ОткрытьФорму(
			"ОбщаяФорма.ФормаВыбораСпискаОрганизацийЗЕРНО",
			ПараметрыОткрытияФормы, Форма,,,, ОбработчикОповещения);
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработки.Вставить("Организации", Организации);
	
	ЗагрузитьИзмененияПродолжение(ПараметрыОбработки, Форма);
	
КонецПроцедуры

//см. ОбщегоНазначенияКлиентПереопределяемый.ПередПериодическойОтправкойДанныхКлиентаНаСервер
Процедура ПередПериодическойОтправкойДанныхКлиентаНаСервер(Параметры) Экспорт
	
	Если Не СтандартныеПодсистемыКлиент.ПараметрКлиента("ДоступноИспользованиеРазделенныхДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ИнтеграцияЗЕРНОКлиентСерверПовтИсп.ВестиУчетПродукции() Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПараметров    = ИнтеграцияЗЕРНОКлиентСерверПовтИсп.ИменаПараметровПериодическогоПолученияДанных();
	ПараметрПриложения = ПараметрыПриложения[ИменаПараметров.ИмяПараметраПриложения]; // - см. ИнтеграцияЗЕРНОСлужебныйКлиентСервер.ПараметрыПриложенияОтветственныеЗаПодписаниеСообщений
	
	Если Не ПараметрПриложения.ПараметрыИнициализированы Тогда
		Параметры.Вставить(
			ИменаПараметров.ИнициализацияНастроекОтветственногоЗаПодписаниеСообщений,
			Истина);
		Возврат;
	КонецЕсли;
	
	ТекущаяДата = ТекущаяДата();
	Если ЗначениеЗаполнено(ПараметрПриложения.ВремяСледующегоОбновленияНастроек)
		И ПараметрПриложения.ВремяСледующегоОбновленияНастроек <= ТекущаяДата Тогда
		Параметры.Вставить(ИменаПараметров.ОбновлениеНастроекОтветственногоЗаПодписаниеСообщений);
	КонецЕсли;
	
	Если ПараметрПриложения.ЯвляетсяОтветственным Тогда
		Параметры.Вставить(ИменаПараметров.ПроверитьНаличиеСообщенийКПодписанию, ПараметрПриложения.НастройкиОтветственного);
	КонецЕсли;
	
КонецПроцедуры

//см. ОбщегоНазначенияКлиентПереопределяемый.ПослеПериодическогоПолученияДанныхКлиентаНаСервере
Процедура ПослеПериодическогоПолученияДанныхКлиентаНаСервере(Результаты) Экспорт
	
	ИменаПараметров = ИнтеграцияЗЕРНОКлиентСерверПовтИсп.ИменаПараметровПериодическогоПолученияДанных();
	
	ЗначениеПараметраИнициализацияНастроек     = Результаты[ИменаПараметров.ИнициализацияНастроекОтветственногоЗаПодписаниеСообщений];
	ЗначениеПараметраОбновлениеНастроек        = Результаты[ИменаПараметров.ОбновлениеНастроекОтветственногоЗаПодписаниеСообщений];
	ЗначениеПараметраПроверитьНаличиеСообщений = Результаты[ИменаПараметров.ПроверитьНаличиеСообщенийКПодписанию];
	
	Если ЗначениеПараметраИнициализацияНастроек = Неопределено
		И ЗначениеПараметраОбновлениеНастроек = Неопределено
		И ЗначениеПараметраПроверитьНаличиеСообщений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не СтандартныеПодсистемыКлиент.ПараметрКлиента("ДоступноИспользованиеРазделенныхДанных")
		Или Не ИнтеграцияЗЕРНОКлиентСерверПовтИсп.ВестиУчетПродукции() Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеПараметраИнициализацияНастроек <> Неопределено Тогда
		
		ПараметрПриложения = ПараметрыПриложения[ИменаПараметров.ИмяПараметраПриложения];
		
		ПараметрПриложения.ПараметрыИнициализированы         = Истина;
		ПараметрПриложения.ЯвляетсяОтветственным             = ЗначениеПараметраИнициализацияНастроек.ЯвляетсяОтветственным;
		ПараметрПриложения.НастройкиОтветственного           = ЗначениеПараметраИнициализацияНастроек.НастройкиОтветственного;
		ПараметрПриложения.ВремяСледующегоОбновленияНастроек = ТекущаяДата();
		ИнтеграцияЗЕРНОСлужебныйКлиентСервер.УстановитьВремяСледующегоОбновленияНастроек(ПараметрПриложения);
		
		Если ПараметрПриложения.ЯвляетсяОтветственным Тогда
			ИнтеграцияЗЕРНОСлужебныйКлиент.ПериодическоеПолучениеДанныхОбработатьДанныеДляПодписания(
				ЗначениеПараметраИнициализацияНастроек,
				ПараметрПриложения);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеПараметраОбновлениеНастроек <> Неопределено Тогда
		
		ПараметрПриложения = ПараметрыПриложения[ИменаПараметров.ИмяПараметраПриложения];
		
		ПараметрПриложения.ПараметрыИнициализированы         = Истина;
		ПараметрПриложения.ЯвляетсяОтветственным             = ЗначениеПараметраОбновлениеНастроек.ЯвляетсяОтветственным;
		ПараметрПриложения.НастройкиОтветственного           = ЗначениеПараметраОбновлениеНастроек.НастройкиОтветственного;
		ПараметрПриложения.ВремяСледующегоОбновленияНастроек = ТекущаяДата();
		ИнтеграцияЗЕРНОСлужебныйКлиентСервер.УстановитьВремяСледующегоОбновленияНастроек(ПараметрПриложения);
		
	КонецЕсли;
	
	Если ЗначениеПараметраПроверитьНаличиеСообщений <> Неопределено Тогда
			
		ИнтеграцияЗЕРНОСлужебныйКлиент.ПериодическоеПолучениеДанныхОбработатьДанныеДляПодписания(
			ЗначениеПараметраПроверитьНаличиеСообщений,
			ПараметрПриложения);
		
	КонецЕсли;
	
КонецПроцедуры

//см. ОбщегоНазначенияКлиентПереопределяемый.ПослеНачалаРаботыСистемы
Процедура ПослеНачалаРаботыСистемы() Экспорт
	
	Если Не СтандартныеПодсистемыКлиент.ПараметрКлиента("ДоступноИспользованиеРазделенныхДанных") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрПриложения = ИнтеграцияЗЕРНОСлужебныйКлиентСервер.ПараметрыПриложенияОтветственныеЗаПодписаниеСообщений();
	ИменаПараметров = ИнтеграцияЗЕРНОКлиентСерверПовтИсп.ИменаПараметровПериодическогоПолученияДанных();
	ПараметрыПриложения[ИменаПараметров.ИмяПараметраПриложения] = ПараметрПриложения;
	
КонецПроцедуры

Процедура НастроитьТипЗначенияПотребительскогоСвойства(Форма, Элемент, ПотребительскоеСвойство, Значение, ОКПД2) Экспорт
	
	ДанныеПотребительскихСвойств = Форма.КэшПотребительскихСвойств.НайтиСтроки(
		Новый Структура("ОКПД2, ПотребительскоеСвойство", ОКПД2, ПотребительскоеСвойство));
	
	Элемент.СписокВыбора.Очистить();
	Элемент.МинимальноеЗначение  = Неопределено;
	Элемент.МаксимальноеЗначение = Неопределено;
	
	РежимВыбораИзСписка = Ложь;
	Если ДанныеПотребительскихСвойств.Количество() Тогда
		
		ЗначенияПотребительскогоСвойства = ДанныеПотребительскихСвойств[0];
		Если ЗначенияПотребительскогоСвойства.ТипЗначения = ПредопределенноеЗначение("Перечисление.ТипыЗначенияПотребительскогоСвойстваЗЕРНО.Перечисление") Тогда
			
			ДоступныеЗначения = СтрРазделить(ЗначенияПотребительскогоСвойства.ДопустимыеЗначения, "|");
			
			Для Каждого ЗначениеВыбора Из ДоступныеЗначения Цикл
				Элемент.СписокВыбора.Добавить(ЗначениеВыбора);
			КонецЦикла;
			РежимВыбораИзСписка = Истина;
			
		ИначеЕсли ЗначенияПотребительскогоСвойства.ТипЗначения = ПредопределенноеЗначение("Перечисление.ТипыЗначенияПотребительскогоСвойстваЗЕРНО.Число") Тогда
			
			Элемент.МинимальноеЗначение = ЗначенияПотребительскогоСвойства.ДиапазонС;
			Если ЗначениеЗаполнено(ЗначенияПотребительскогоСвойства.ДиапазонПо) Тогда
				Элемент.МаксимальноеЗначение = ЗначенияПотребительскогоСвойства.ДиапазонПо;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Элемент.ВыбиратьТип         = Ложь;
	Элемент.РежимВыбораИзСписка = РежимВыбораИзСписка;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ПредставлениеПодсистемы() Экспорт
	
	Возврат НСтр("ru = 'ЗЕРНО'");
	
КонецФункции

#Область ПодборПоОКПД2

Функция ИнициализироватьПараметрыОткрытияФормыПодбора() Экспорт
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("ТекущаяСтрока");
	ПараметрыОткрытияФормы.Вставить("ВидПродукции");
	ПараметрыОткрытияФормы.Вставить("ОКПД2");
	ПараметрыОткрытияФормы.Вставить("ВозвращатьСсылкуНаЭлементКлассификатора", Ложь);
	ПараметрыОткрытияФормы.Вставить("РежимВыбора");
	ПараметрыОткрытияФормы.Вставить("ОтборОКПД2ПодлежащиеГосмониторингу", Ложь);
	
	Возврат ПараметрыОткрытияФормы;
	
КонецФункции

Процедура ОткрытьФормуПодбораОКПД2(Форма, ТекущиеДанные, Владелец, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыФормы = ИнициализироватьПараметрыОткрытияФормыПодбора();
	
	ПараметрыФормы.ТекущаяСтрока = ТекущиеДанные.ОКПД2;
	ПараметрыФормы.РежимВыбора   = Истина;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, "ВидПродукции") Тогда
		ПараметрыФормы.ВидПродукции = Форма.Объект.ВидПродукции;
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыФормы, ДополнительныеПараметры);
	КонецЕсли;
	
	ОткрытьФорму(
		"Справочник.КлассификаторНСИЗЕРНО.Форма.ФормаСпискаОКПД2", 
		ПараметрыФормы,
		Владелец,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ОткрытьФормуПодбораТНВЭД(Форма, ТекущиеДанные, Владелец, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыФормы = ИнициализироватьПараметрыОткрытияФормыПодбора();
	
	ПараметрыФормы.ТекущаяСтрока = ТекущиеДанные.КодТНВЭД;
	ПараметрыФормы.РежимВыбора   = Истина;
	ПараметрыФормы.ОКПД2         = ТекущиеДанные.ОКПД2;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, "ВидПродукции") Тогда
		ПараметрыФормы.ВидПродукции = Форма.Объект.ВидПродукции;
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыФормы, ДополнительныеПараметры);
	КонецЕсли;
	
	ОткрытьФорму(
		"РегистрСведений.ВидыСельскохозяйственныхКультурЗЕРНО.Форма.ФормаПодбораТНВЭД", 
		ПараметрыФормы,
		Владелец,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Функция КодТНВЭДПоДаннымКеша(ОКПД2, КодТНВЭД, Форма) Экспорт
	
	Результат = Неопределено;
	
	КэшВидовСельхозКультур = Форма["КэшВидовСельхозКультур"];
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ОКПД2", ОКПД2);
	КодыТНВЭД = КэшВидовСельхозКультур.НайтиСтроки(ПараметрыОтбора);
	
	Если КодыТНВЭД.Количество() = 1 Тогда
		
		Результат = КодыТНВЭД[0].КодТНВЭД;
		
	ИначеЕсли КодыТНВЭД.Количество() > 1 Тогда
		
		Если ЗначениеЗаполнено(КодТНВЭД) Тогда
			
			ПараметрыОтбора.Вставить("КодТНВЭД", КодТНВЭД);
			КодыТНВЭД = КэшВидовСельхозКультур.НайтиСтроки(ПараметрыОтбора);
			Если КодыТНВЭД.Количество() = 0 Тогда
				Результат = "";
			Иначе
				Результат = КодТНВЭД;
			КонецЕсли;
			
		Иначе
			Результат = "";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОткрытьПротоколОбмена(СсылкаНаОбъект, Владелец = Неопределено, ДляДокументаОснования = Ложь) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Документ", СсылкаНаОбъект);
	ПараметрыФормы.Вставить("ДляДокументаОснования", ДляДокументаОснования);
	
	ОткрытьФорму(
		"Справочник.ЗЕРНОПрисоединенныеФайлы.Форма.ФормаПротоколОбмена",
		ПараметрыФормы,
		Владелец,
		Новый УникальныйИдентификатор,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Функция ПараметрыИнтерактивногоВыбораОтбораЗаполнения(ПолноеИмяДокумента, ДокументОснование, КорректировочныйДокумент = Ложь)
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("ИмяФильтра");
	ВозвращаемоеЗначение.Вставить("ОбъектыДляВыбора", Новый Массив);
	
	Если ПолноеИмяДокумента = "Документ.ФормированиеПартийПриПроизводствеЗЕРНО"
			Или ПолноеИмяДокумента = "Документ.ВнесениеСведенийОСобранномУрожаеЗЕРНО"
			Или ТипЗнч(ДокументОснование) = Тип("СправочникСсылка.АктыОтбораПробЗЕРНО")
			Или ТипЗнч(ДокументОснование) = Тип("СправочникСсылка.РезультатыИсследованийЗЕРНО") Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ВозвращаемоеЗначение.ИмяФильтра       = "ЗаполнениеСВидомПродукции";
	ВозвращаемоеЗначение.ОбъектыДляВыбора = ИнтеграцияЗЕРНОВызовСервера.ВидыПродукцииДанныхЗаполнения(
		ПолноеИмяДокумента, ДокументОснование, КорректировочныйДокумент);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура ОбработкаНавигационнойСсылкиВФормеДокументаОснования(Форма, Объект,
			Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка, СобытиеОбработано = Ложь) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Контекст = Новый Структура;
	Контекст.Вставить("Форма",  Форма);
	Контекст.Вставить("Объект", Объект);
	Контекст.Вставить("ДокументОснование", Объект.Ссылка);
	Контекст.Вставить("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки);
	Контекст.Вставить("СобытиеОбработано", СобытиеОбработано);
	
	Если Форма.Модифицированность ИЛИ НЕ ЗначениеЗаполнено(Контекст.ДокументОснование) Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения(
			"ОбработкаНавигационнойСсылкиВФормеДокументаОснованияЗЕРНОЗавершение",
			ЭтотОбъект,
			Контекст);
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Документ ""%1"" %2. Записать?'"),
			Контекст.ДокументОснование,
			?(НЕ ЗначениеЗаполнено(Контекст.ДокументОснование), НСтр("ru='не записан'"), НСтр("ru='был изменен'")));
		
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ВыполнитьКомандуГиперссылкиВФормеДокументаОснованияЗЕРНО(
			Контекст.ДокументОснование,
			НавигационнаяСсылкаФорматированнойСтроки,
			Форма,
			СобытиеОбработано);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаНавигационнойСсылкиВФормеДокументаОснованияЗЕРНОЗавершение(РезультатВопроса, Контекст) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Контекст.Объект.Проведен Тогда
		Если Контекст.Форма.ПроверитьЗаполнение() Тогда
			Контекст.Форма.Записать();
		КонецЕсли;
	Иначе
		Контекст.Форма.Записать();
	КонецЕсли;
	
	Если НЕ Контекст.Форма.Модифицированность И ЗначениеЗаполнено(Контекст.ДокументОснование) Тогда
		
		ВыполнитьКомандуГиперссылкиВФормеДокументаОснованияЗЕРНО(
			Контекст.ДокументОснование,
			Контекст.НавигационнаяСсылкаФорматированнойСтроки,
			Контекст.Форма,
			Контекст.СобытиеОбработано);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьКомандуГиперссылкиВФормеДокументаОснованияЗЕРНО(ДокументОснование, НавигационнаяСсылкаФорматированнойСтроки, Форма, СобытиеОбработано)
	
	ОписаниеКоманды   = ИнтеграцияИСКлиентСервер.ПреобразоватьИмяКомандыНавигационнойСсылкиВоВнутреннийФормат(
		НавигационнаяСсылкаФорматированнойСтроки);
	
	// Открытие протокола обмена.
	Если ИнтеграцияИСКлиентСервер.ЭтоКомандаНавигационнойСсылкиОткрытьПротоколОбмена(ОписаниеКоманды) Тогда
		
		ОткрытьПротоколОбмена(ДокументОснование, Форма, Истина);
		
		СобытиеОбработано = Истина;
		Возврат;
		
	КонецЕсли;
	
	// Создание документа.
	Если ИнтеграцияИСКлиентСервер.ЭтоКомандаНавигационнойСсылкиСоздатьОбъект(ОписаниеКоманды) Тогда
		
		ПолноеИмяДокументаЗЕРНО = ИнтеграцияИСКлиентСервер.ИмяОбъектаДляОткрытияИзВнутреннегоФорматаКомандыНавигационнойСсылки(ОписаниеКоманды);
		ОткрытьФормуСозданияДокумента(ПолноеИмяДокументаЗЕРНО, ДокументОснование, Форма,, ИнтеграцияИСКлиентСервер.ЭтоКорректировочныйДокументКомандыНавигационнойСсылки(ОписаниеКоманды));
		СобытиеОбработано = Истина;
		Возврат;
		
	КонецЕсли;
	
	// Открытие документа.
	Если ИнтеграцияИСКлиентСервер.ЭтоКомандаНавигационнойСсылкиОткрытьОбъект(ОписаниеКоманды) Тогда
		
		ПолноеИмяДокументаЗЕРНО = ИнтеграцияИСКлиентСервер.ИмяОбъектаДляОткрытияИзВнутреннегоФорматаКомандыНавигационнойСсылки(ОписаниеКоманды);
		ЧастиИмениОбъекта       = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолноеИмяДокументаЗЕРНО, ".");
		ДокументыЗЕРНО          = ИнтеграцияЗЕРНОВызовСервера.ДокументыЗЕРНОПоДокументуОснованию(ДокументОснование);
		МассивДокументов        = ДокументыЗЕРНО[ЧастиИмениОбъекта[1]];
		
		Если МассивДокументов.Количество() = 1 Тогда
			ПоказатьЗначение(, МассивДокументов[0].Ссылка);
			СобытиеОбработано = Истина;
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	// Открытие произвольной навигационной ссылки.
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(НавигационнаяСсылкаФорматированнойСтроки);
	
	СобытиеОбработано = Истина;
	
КонецПроцедуры

Процедура ПриОбработкеОповещенияИмяСобытияИзмененоСостояние(ПолноеИмяОбъекта, ТипДокумента, ОбновитьСписок, Форма, Параметр, Источник) Экспорт
	
	ТипЗначения  = ТипЗнч(Параметр.Ссылка);
	ТипСДИЗЗЕРНО = Тип("СправочникСсылка.СДИЗЗЕРНО");
	
	Если ТипДокумента = Тип("ДокументСсылка.ПогашениеСДИЗЗЕРНО")
		И ТипЗначения = ТипСДИЗЗЕРНО Тогда
		
		Если ТипЗначения = Тип("Массив") Тогда
			
			Для Каждого ЭлементДанных Из Параметр.Ссылка Цикл
				Если ТипЗнч(ЭлементДанных) = ТипСДИЗЗЕРНО Тогда
					ОбновитьСписок = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли (ТипЗначения = ТипСДИЗЗЕРНО) Тогда
			ОбновитьСписок = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьИзмененияПродолжение(ПараметрыОбработки, Форма)
	
	ПараметрыОбработки.Вставить("УникальныйИдентификатор", Форма.УникальныйИдентификатор);
	
	РезультатОбмена = ИнтеграцияЗЕРНОВызовСервера.ЗагрузитьИзменения(ПараметрыОбработки);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма",     Форма);
	ДополнительныеПараметры.Вставить("ИмяСписка", ПараметрыОбработки.ИмяСписка);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПолученияРезультатОбмена", ЭтотОбъект, ДополнительныеПараметры);
	
	ИнтеграцияЗЕРНОСлужебныйКлиент.ОбработатьРезультатОбмена(РезультатОбмена, Форма,, ОписаниеОповещения);
	
КонецПроцедуры

Процедура ОповещениеВыбратьОрганизацию(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ИмяЗапросаЗЕРНО", ДополнительныеПараметры.ИмяЗапросаЗЕРНО);
	ПараметрыОбработки.Вставить("ИмяСписка",       ДополнительныеПараметры.ИмяСписка);
	ПараметрыОбработки.Вставить("Организации",     Результат.Организации);
	
	ЗагрузитьИзмененияПродолжение(ПараметрыОбработки, ДополнительныеПараметры.Форма);
	
КонецПроцедуры

Процедура ПослеПолученияРезультатОбмена(Изменения, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	ИмяСписка = ДополнительныеПараметры.ИмяСписка;
	
	Форма.Элементы[ИмяСписка].Обновить();
	
КонецПроцедуры

#КонецОбласти