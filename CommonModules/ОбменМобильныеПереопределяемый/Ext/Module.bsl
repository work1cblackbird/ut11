#Область ПрограммныйИнтерфейс

// Функция выполняет проверку того, что данные нужно переностить в данный узел
//
// Параметры:
//  Данные - Произвольный - Объект или набор записей, который нужно проверить.
//    То, что переносится везде, не обрабатывается.
//  УзелОбмена - ПланОбменаСсылка - узел плана обмена, куда осуществляется перенос.
//
// Возвращаемое значение:
//  Булево - Истина - необходимо выполнять перенос, 
//    Ложь - перенос выполнять не нужно.
//
Функция НуженПереносДанных(Данные, УзелОбмена) Экспорт
	
	Перенос = Истина;

#Если НЕ МобильныйАвтономныйСервер Тогда

	Если ТипЗнч(Данные) = Тип("РегистрСведенийНаборЗаписей.БлокировкиСкладскихЯчеек") Тогда
		// Проверяем, что регистратор блокировки — это использующиеся документы
		Если ТипЗнч(Данные[0].Регистратор) <> Тип("ДокументСсылка.УстановкаБлокировокЯчеек")
			И ТипЗнч(Данные[0].Регистратор) <> Тип("ДокументСсылка.ПересчетТоваров") Тогда
			Перенос = Ложь;
		КонецЕсли;
	КонецЕсли; 
	
#КонецЕсли
 	
	Возврат Перенос;
	
КонецФункции

// Процедура записывает данные в формат XML.
// Процедура анализирует переданный объект данных и на основе этого анализа
// записывает его определенным образом в формат XML.
//
// Параметры:
//  ЗаписьXML - ЗаписьXML - объект, записывающий XML данные.
//  Данные - Произвольный - данные, подлежащие записи в формат XML.
//
Процедура ЗаписатьДанные(ЗаписьXML, Данные) Экспорт
	
	// В данном случае, нет данных, которые требуют нестандартной обработки
	// Записываем данные с помощью стандартного метода
	
	Если ТипЗнч(Данные) = Тип("СправочникОбъект.УпаковкиЕдиницыИзмерения") Тогда
		УпаковкиЕдиницыИзмеренияВXML(ЗаписьXML, Данные);
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.НаборыУпаковок") Тогда
		НаборыУпаковокВXML(ЗаписьXML, Данные);
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.Номенклатура") Тогда
		НоменклатураВXML(ЗаписьXML, Данные);
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.Пользователи") Тогда
		ПользователиВXML(ЗаписьXML, Данные);
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.Склады") Тогда
		СкладыВXML(ЗаписьXML, Данные);
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.СкладскиеПомещения") Тогда
		СкладскиеПомещенияВXML(ЗаписьXML, Данные);
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.СкладскиеЯчейки") Тогда
		СкладскиеЯчейкиВXML(ЗаписьXML, Данные);
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.ХарактеристикиНоменклатуры") Тогда
		ХарактеристикиНоменклатурыВXML(ЗаписьXML, Данные);
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.ВидыНоменклатуры") Тогда
		ВидыНоменклатурыВXML(ЗаписьXML, Данные);
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.ВариантыОтчетов") Тогда
		ВариантыОтчетовВXML(ЗаписьXML, Данные);
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.ДашбордыМЦП") Тогда
		ДашбордыМЦПВXML(ЗаписьXML, Данные); 
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.УстановкаБлокировокЯчеек") Тогда
		УстановкаБлокировокЯчеекВXML(ЗаписьXML, Данные);  
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.ПересчетТоваров") Тогда	
		ПересчетТоваровВXML(ЗаписьXML, Данные);   
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.ПриходныйОрдерНаТовары") Тогда	
		ПриходныйОрдерВXML(ЗаписьXML, Данные);
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.РасходныйОрдерНаТовары") Тогда	
		РасходныйОрдерВXML(ЗаписьXML, Данные);  
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.ОтборРазмещениеТоваров") Тогда	
		ОтборРазмещениеТоваровВXML(ЗаписьXML, Данные);	
	ИначеЕсли ТипЗнч(Данные) = Тип("РегистрСведенийНаборЗаписей.ШтрихкодыНоменклатуры") Тогда
		ШтрихкодыНоменклатурыВXML(ЗаписьXML, Данные);
	ИначеЕсли ТипЗнч(Данные) = Тип("РегистрСведенийНаборЗаписей.СнимкиОтчетов") Тогда
		СнимкиОтчетовВXML(ЗаписьXML, Данные); 
	ИначеЕсли ТипЗнч(Данные) = Тип("РегистрСведенийНаборЗаписей.БлокировкиСкладскихЯчеек") Тогда
		БлокировкиСкладскихЯчеекВXML(ЗаписьXML, Данные);  
	КонецЕсли;
	
	#Если МобильныйАвтономныйСервер Тогда
		Константы.ОтправленоЗаписей.Установить(Константы.ОтправленоЗаписей.Получить() + 1);
	#КонецЕсли
	
КонецПроцедуры

// Функция читает данные из формат XML.
// Анализирует переданный объект ЧтениеXML и на основе этого анализа
// читает из него данные определенным образом.
//
// Параметры:
//  ЧтениеXML - ЧтениеXML - Объект, читающий XML-данные.
//
// Возвращаемое значение:
//  Произвольный - значение, прочитанное из объекта ЧтениеXML.
//
Функция ПрочитатьДанные(ЧтениеXML) Экспорт
	
	Если ЧтениеXML.Имя = "CatalogObject.УпаковкиЕдиницыИзмерения" Тогда
		Данные = УпаковкиЕдиницыИзмеренияИзXML(ЧтениеXML);
	ИначеЕсли ЧтениеXML.Имя = "CatalogObject.НаборыУпаковок" Тогда
		Данные = НаборыУпаковокИзXML(ЧтениеXML);
	ИначеЕсли ЧтениеXML.Имя = "CatalogObject.Номенклатура" Тогда
		Данные = НоменклатураИзXML(ЧтениеXML);
	ИначеЕсли ЧтениеXML.Имя = "CatalogObject.Пользователи" Тогда
		Данные = ПользователиИзXML(ЧтениеXML);
	ИначеЕсли ЧтениеXML.Имя = "CatalogObject.Склады" Тогда
		Данные = СкладыИзXML(ЧтениеXML);
	ИначеЕсли ЧтениеXML.Имя = "CatalogObject.СкладскиеПомещения" Тогда
		Данные = СкладскиеПомещенияИзXML(ЧтениеXML);
	ИначеЕсли ЧтениеXML.Имя = "CatalogObject.СкладскиеЯчейки" Тогда
		Данные = СкладскиеЯчейкиИзXML(ЧтениеXML);
	ИначеЕсли ЧтениеXML.Имя = "CatalogObject.ХарактеристикиНоменклатуры" Тогда
		Данные = ХарактеристикиНоменклатурыИзXML(ЧтениеXML);
	ИначеЕсли ЧтениеXML.Имя = "CatalogObject.ВидыНоменклатуры" Тогда
		Данные = ВидыНоменклатурыИзXML(ЧтениеXML);
	ИначеЕсли ЧтениеXML.Имя = "CatalogObject.ВариантыОтчетов" Тогда
		Данные = ВариантыОтчетовИзXML(ЧтениеXML);
	ИначеЕсли ЧтениеXML.Имя = "CatalogObject.ДашбордыМЦП" Тогда
		Данные = ДашбордыМЦПИзXML(ЧтениеXML); 
	ИначеЕсли ЧтениеXML.Имя =  "DocumentObject.УстановкаБлокировокЯчеек" Тогда	
		Данные = УстановкаБлокировокЯчеекИзXML(ЧтениеXML);
	ИначеЕсли ЧтениеXML.Имя =  "DocumentObject.ПересчетТоваров" Тогда	
		Данные = ПересчетТоваровИзXML(ЧтениеXML);
	ИначеЕсли ЧтениеXML.Имя =  "DocumentObject.ПриходныйОрдерНаТовары" Тогда	
		Данные = ПриходныйОрдерИзXML(ЧтениеXML); 
	ИначеЕсли ЧтениеXML.Имя =  "DocumentObject.РасходныйОрдерНаТовары" Тогда	
		Данные = РасходныйОрдерИзXML(ЧтениеXML);   
	ИначеЕсли ЧтениеXML.Имя = "DocumentObject.ОтборРазмещениеТоваров" Тогда	
		Данные = ОтборРазмещениеТоваровИзXML(ЧтениеXML);
	ИначеЕсли ЧтениеXML.Имя = "InformationRegisterRecordSet.ШтрихкодыНоменклатуры" Тогда
		Данные = ШтрихкодыНоменклатурыИзXML(ЧтениеXML);
	ИначеЕсли ЧтениеXML.Имя = "InformationRegisterRecordSet.СнимкиОтчетов" Тогда
		Данные = СнимкиОтчетовИзXML(ЧтениеXML);
	ИначеЕсли ЧтениеXML.Имя = "InformationRegisterRecordSet.БлокировкиСкладскихЯчеек" Тогда
		Данные = БлокировкиСкладскихЯчеекИзXML(ЧтениеXML); 
	КонецЕсли;
	
#Если НЕ МобильныйАвтономныйСервер Тогда
#Иначе
	Константы.ПринятоЗаписей.Установить(Константы.ПринятоЗаписей.Получить() + 1);
#КонецЕсли
	
	Возврат Данные;
	
КонецФункции

// Процедура регистрирует изменения, для всех данных, входящих в состав плана обмена
// Параметры:
//  УзелОбмена - ПланОбменаСсылка - Узел плана обмена, для которого регистрируются изменения.
Процедура ЗарегистрироватьИзмененияДанных(УзелОбмена) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СнимкиОтчетов.Вариант КАК Вариант
	|ИЗ
	|	РегистрСведений.СнимкиОтчетов КАК СнимкиОтчетов
	|ГДЕ
	|	СнимкиОтчетов.Вариант ССЫЛКА Справочник.ВариантыОтчетов";
	
	СоставПланаОбмена = УзелОбмена.Метаданные().Состав;
	Для Каждого ЭлементСоставаПланаОбмена Из СоставПланаОбмена Цикл
		
		Если ЭлементСоставаПланаОбмена.Метаданные = Метаданные.Справочники.ВариантыОтчетов Тогда
			МассивСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Вариант");
			Если МассивСсылок.Количество() > 0 Тогда
				ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, МассивСсылок);
			КонецЕсли;
		Иначе
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена,ЭлементСоставаПланаОбмена.Метаданные);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаДанных

Процедура НоменклатураВXML(ЗаписьXML, Данные)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("CatalogObject.Номенклатура");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Ссылка");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.Ссылка.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Родитель");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.Родитель.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Наименование");
	ЗаписьXML.ЗаписатьТекст(Данные.Наименование);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ЭтоГруппа");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.ЭтоГруппа));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Если НЕ Данные.ЭтоГруппа Тогда
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Артикул");
		ЗаписьXML.ЗаписатьТекст(Данные.Артикул);
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("ЕдиницаИзмерения");
		ЗаписьXML.ЗаписатьТекст(Строка(Данные.ЕдиницаИзмерения.УникальныйИдентификатор()));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура УпаковкиЕдиницыИзмеренияВXML(ЗаписьXML, Данные)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("CatalogObject.УпаковкиЕдиницыИзмерения");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Ссылка");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.Ссылка.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Владелец");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.Владелец.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Родитель");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.Родитель.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Наименование");
	ЗаписьXML.ЗаписатьТекст(Данные.Наименование);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("НаименованиеПолное");
	ЗаписьXML.ЗаписатьТекст(Данные.НаименованиеПолное);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ЕдиницаИзмерения");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.ЕдиницаИзмерения.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("КоличествоУпаковок");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.КоличествоУпаковок));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура НаборыУпаковокВXML(ЗаписьXML, Данные)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("CatalogObject.НаборыУпаковок");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Ссылка");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.Ссылка.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Наименование");
	ЗаписьXML.ЗаписатьТекст(Данные.Наименование);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ЕдиницаИзмерения");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.ЕдиницаИзмерения.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ЕдиницаДляОтчетов");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.ЕдиницаДляОтчетов.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("КоэффициентЕдиницыДляОтчетов");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.КоэффициентЕдиницыДляОтчетов));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ПользователиВXML(ЗаписьXML, Данные)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("CatalogObject.Пользователи");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Ссылка");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.Ссылка.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Наименование");
	ЗаписьXML.ЗаписатьТекст(Данные.Наименование);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ИдентификаторПользователяИБ");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.ИдентификаторПользователяИБ));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура СкладыВXML(ЗаписьXML, Данные)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("CatalogObject.Склады");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Ссылка");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.Ссылка.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Наименование");
	ЗаписьXML.ЗаписатьТекст(Данные.Наименование);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Родитель");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.Родитель.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ЭтоГруппа");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.ЭтоГруппа));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Если НЕ Данные.ЭтоГруппа Тогда
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("ИспользоватьАдресноеХранение");
		ЗаписьXML.ЗаписатьТекст(Строка(Данные.ИспользоватьАдресноеХранение));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("ИспользоватьАдресноеХранениеСправочно");
		ЗаписьXML.ЗаписатьТекст(Строка(Данные.ИспользоватьАдресноеХранениеСправочно));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("ИспользоватьОрдернуюСхемуПриОтгрузке");
		ЗаписьXML.ЗаписатьТекст(Строка(Данные.ИспользоватьОрдернуюСхемуПриОтгрузке));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач");
		ЗаписьXML.ЗаписатьТекст(Строка(Данные.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("ИспользоватьОрдернуюСхемуПриПоступлении");
		ЗаписьXML.ЗаписатьТекст(Строка(Данные.ИспользоватьОрдернуюСхемуПриПоступлении));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("ИспользоватьСерииНоменклатуры");
		ЗаписьXML.ЗаписатьТекст(Строка(Данные.ИспользоватьСерииНоменклатуры));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("ИспользоватьСкладскиеПомещения");
		ЗаписьXML.ЗаписатьТекст(Строка(Данные.ИспользоватьСкладскиеПомещения));
		ЗаписьXML.ЗаписатьКонецЭлемента();  
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("ИспользоватьСтатусыПриходныхОрдеров");
		ЗаписьXML.ЗаписатьТекст(Строка(Данные.ИспользоватьСтатусыПриходныхОрдеров));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("ИспользоватьСтатусыРасходныхОрдеров");
		ЗаписьXML.ЗаписатьТекст(Строка(Данные.ИспользоватьСтатусыРасходныхОрдеров));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура СкладскиеПомещенияВXML(ЗаписьXML, Данные)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("CatalogObject.СкладскиеПомещения");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Ссылка");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.Ссылка.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Наименование");
	ЗаписьXML.ЗаписатьТекст(Данные.Наименование);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Владелец");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.Владелец.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ИспользоватьАдресноеХранение");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.ИспользоватьАдресноеХранение));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ИспользоватьАдресноеХранениеСправочно");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.ИспользоватьАдресноеХранениеСправочно));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура СкладскиеЯчейкиВXML(ЗаписьXML, Данные)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("CatalogObject.СкладскиеЯчейки");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Ссылка");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.Ссылка.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Если ЗначениеЗаполнено(Данные.Наименование) Тогда 
		ЗаписьXML.ЗаписатьНачалоЭлемента("Наименование");
		ЗаписьXML.ЗаписатьТекст(Данные.Наименование);
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
		
	ЗаписьXML.ЗаписатьНачалоЭлемента("Код");
	ЗаписьXML.ЗаписатьТекст(Данные.Код);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Родитель");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.Родитель.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ЭтоГруппа");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.ЭтоГруппа));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Владелец");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.Владелец.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Если НЕ Данные.ЭтоГруппа Тогда
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("ТипСкладскойЯчейки");
		ЗаписьXML.ЗаписатьТекст(XMLСтрока(Данные.ТипСкладскойЯчейки));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Помещение");
		ЗаписьXML.ЗаписатьТекст(Строка(Данные.Помещение.УникальныйИдентификатор()));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ХарактеристикиНоменклатурыВXML(ЗаписьXML, Данные)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("CatalogObject.ХарактеристикиНоменклатуры");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Ссылка");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.Ссылка.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Наименование");
	ЗаписьXML.ЗаписатьТекст(Данные.Наименование);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("НаименованиеПолное");
	ЗаписьXML.ЗаписатьТекст(Данные.НаименованиеПолное);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ВладелецТип");
	ЗаписьXML.ЗаписатьТекст(Строка(ТипЗнч(Данные.Владелец)));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Владелец");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.Владелец.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ВидыНоменклатурыВXML(ЗаписьXML, Данные)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("CatalogObject.ВидыНоменклатуры");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Ссылка");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.Ссылка.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Наименование");
	ЗаписьXML.ЗаписатьТекст(Данные.Наименование);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Родитель");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.Родитель.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ЭтоГруппа");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.ЭтоГруппа));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ВариантыОтчетовВXML(ЗаписьXML, Данные)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("CatalogObject.ВариантыОтчетов");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Ссылка");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.Ссылка.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Наименование");
	ЗаписьXML.ЗаписатьТекст(Данные.Наименование);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ДашбордыМЦПВXML(ЗаписьXML, Данные)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("CatalogObject.ДашбордыМЦП");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Ссылка");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.Ссылка.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Наименование");
	ЗаписьXML.ЗаписатьТекст(Данные.Наименование);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Автор");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.Автор.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ТолькоДляАвтора");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.ТолькоДляАвтора));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Иконка");
	Иконка = СериализаторXDTO.ЗаписатьXDTO(Данные.Иконка);
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, Иконка, "ValueStorage", "http://v8.1c.ru/8.1/data/core", , НазначениеТипаXML.Явное);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ПользователиДашборда");
	Для Каждого СтрокаПользователи Из Данные.ПользователиДашборда Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("Пользователь");
		ЗаписьXML.ЗаписатьТекст(Строка(СтрокаПользователи.Пользователь.УникальныйИдентификатор()));
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ШтрихкодыНоменклатурыВXML(ЗаписьXML, Данные)
	
	Если Данные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("InformationRegisterRecordSet.ШтрихкодыНоменклатуры");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Номенклатура");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные[0].Номенклатура.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Характеристика");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные[0].Характеристика.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента();

	ЗаписьXML.ЗаписатьНачалоЭлемента("Упаковка");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные[0].Упаковка.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Штрихкод");
	ЗаписьXML.ЗаписатьТекст(Данные[0].Штрихкод);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура СнимкиОтчетовВXML(ЗаписьXML, Данные)
	
	Если Данные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("InformationRegisterRecordSet.СнимкиОтчетов");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Пользователь");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные[0].Пользователь.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Отчет");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные[0].Отчет.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ОтчетТипЗначения");
	ЗаписьXML.ЗаписатьТекст(?(ТипЗнч(Данные[0].Отчет) = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных"),
							"ИдентификаторыОбъектовМетаданных",
							"ИдентификаторыОбъектовРасширений"));
	ЗаписьXML.ЗаписатьКонецЭлемента();

	ЗаписьXML.ЗаписатьНачалоЭлемента("ВариантОтчета");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные[0].Вариант.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ВариантТипЗначения");
	ЗаписьXML.ЗаписатьТекст(?(ТипЗнч(Данные[0].Вариант) = Тип("СправочникСсылка.ВариантыОтчетов"),
							"ВариантыОтчетов",
							"ДашбордыМЦП"));
	ЗаписьXML.ЗаписатьКонецЭлемента();

	ЗаписьXML.ЗаписатьНачалоЭлемента("ХешПользовательскойНастройки");
	ЗаписьXML.ЗаписатьТекст(Данные[0].ХешПользовательскойНастройки);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("РезультатОтчета");
	РезультатОтчета = СериализаторXDTO.ЗаписатьXDTO(Данные[0].РезультатОтчета);
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, РезультатОтчета, "ValueStorage", "http://v8.1c.ru/8.1/data/core", , НазначениеТипаXML.Явное);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ДатаАктуальности");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные[0].ДатаАктуальности));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ДатаПоследнегоПросмотра");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные[0].ДатаПоследнегоПросмотра));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ОшибкаОбновленияОтчета");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные[0].ОшибкаОбновленияОтчета));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура БлокировкиСкладскихЯчеекВXML(ЗаписьXML, Данные)
	
	Если Данные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Блокировка Из Данные Цикл

		ЗаписьXML.ЗаписатьНачалоЭлемента("InformationRegisterRecordSet.БлокировкиСкладскихЯчеек");
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("РегистраторТипЗначения");
		ЗаписьXML.ЗаписатьТекст(?(ТипЗнч(Блокировка.Регистратор) = Тип("ДокументСсылка.УстановкаБлокировокЯчеек"),
								"УстановкаБлокировокЯчеек",
								"ПересчетТоваров"));
		ЗаписьXML.ЗаписатьКонецЭлемента();

		ЗаписьXML.ЗаписатьНачалоЭлемента("Регистратор");
		ЗаписьXML.ЗаписатьТекст(Строка(Блокировка.Регистратор.УникальныйИдентификатор()));
		ЗаписьXML.ЗаписатьКонецЭлемента();     
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Активность");
		ЗаписьXML.ЗаписатьТекст(Строка(Блокировка.Активность));
		ЗаписьXML.ЗаписатьКонецЭлемента();

		ЗаписьXML.ЗаписатьНачалоЭлемента("Ячейка");
		ЗаписьXML.ЗаписатьТекст(Строка(Блокировка.Ячейка.УникальныйИдентификатор()));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("ТипБлокировки");
		ЗаписьXML.ЗаписатьТекст(XMLСтрока(Блокировка.ТипБлокировки));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьКонецЭлемента(); 
		
	КонецЦикла;
	
КонецПроцедуры 

Процедура УстановкаБлокировокЯчеекВXML(ЗаписьXML, Данные)
		
	ЗаписьXML.ЗаписатьНачалоЭлемента("DocumentObject.УстановкаБлокировокЯчеек");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Ссылка");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.Ссылка.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Номер");
	ЗаписьXML.ЗаписатьТекст(Данные.Номер);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Дата");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.Дата));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ПометкаУдаления");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.ПометкаУдаления));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Проведен");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.Проведен));
	ЗаписьXML.ЗаписатьКонецЭлемента();  
	
	Если ЗначениеЗаполнено(Данные.Ответственный) Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("Ответственный");
		ЗаписьXML.ЗаписатьТекст(Строка(Данные.Ответственный.УникальныйИдентификатор()));
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;

	Если ЗначениеЗаполнено(Данные.Комментарий) Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("Комментарий");
		ЗаписьXML.ЗаписатьТекст(Данные.Комментарий);
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Склад");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.Склад.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Помещение");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.Помещение.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ПересчетТоваровВXML(ЗаписьXML, Данные)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("DocumentObject.ПересчетТоваров");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Ссылка");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.Ссылка.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Номер");
	ЗаписьXML.ЗаписатьТекст(Данные.Номер);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Дата");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.Дата));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ПометкаУдаления");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.ПометкаУдаления));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Проведен");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.Проведен));
	ЗаписьXML.ЗаписатьКонецЭлемента();   
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Исполнитель");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.Исполнитель.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента(); 
	
	Если ЗначениеЗаполнено(Данные.Ответственный) Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("Ответственный");
		ЗаписьXML.ЗаписатьТекст(Строка(Данные.Ответственный.УникальныйИдентификатор()));
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;

	Если ЗначениеЗаполнено(Данные.Комментарий) Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("Комментарий");
		ЗаписьXML.ЗаписатьТекст(Данные.Комментарий);
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
		
	ЗаписьXML.ЗаписатьНачалоЭлемента("Склад");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.Склад.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента();     
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Помещение");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.Помещение.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента(); 
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Статус");
	ЗаписьXML.ЗаписатьТекст(XMLСтрока(Данные.Статус));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ПриходныйОрдерВXML(ЗаписьXML, Данные)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("DocumentObject.ПриходныйОрдерНаТовары");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Ссылка");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.Ссылка.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Номер");
	ЗаписьXML.ЗаписатьТекст(Данные.Номер);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Дата");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.Дата));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ПометкаУдаления");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.ПометкаУдаления));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Проведен");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.Проведен));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Склад");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.Склад.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента();

	ЗаписьXML.ЗаписатьНачалоЭлемента("Исполнитель");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.Исполнитель.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Если ЗначениеЗаполнено(Данные.Комментарий) Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("Комментарий");
		ЗаписьXML.ЗаписатьТекст(Данные.Комментарий);
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Статус");
	ЗаписьXML.ЗаписатьТекст(XMLСтрока(Данные.Статус));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Помещение");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.Помещение.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ЗонаПриемки");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.ЗонаПриемки.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Если ЗначениеЗаполнено(Данные.ДатаВходящегоДокумента) Тогда 
		ЗаписьXML.ЗаписатьНачалоЭлемента("ДатаВходящегоДокумента");
		ЗаписьXML.ЗаписатьТекст(Строка(Данные.ДатаВходящегоДокумента));
		ЗаписьXML.ЗаписатьКонецЭлемента(); 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Данные.НомерВходящегоДокумента) Тогда 
		ЗаписьXML.ЗаписатьНачалоЭлемента("НомерВходящегоДокумента");
		ЗаписьXML.ЗаписатьТекст(Данные.НомерВходящегоДокумента);
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура РасходныйОрдерВXML(ЗаписьXML, Данные)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("DocumentObject.РасходныйОрдерНаТовары");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Ссылка");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.Ссылка.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Номер");
	ЗаписьXML.ЗаписатьТекст(Данные.Номер);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Дата");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.Дата));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ПометкаУдаления");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.ПометкаУдаления));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Проведен");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.Проведен));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ЗонаОтгрузки");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.ЗонаОтгрузки.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Если ЗначениеЗаполнено(Данные.Комментарий) Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("Комментарий");
		ЗаписьXML.ЗаписатьТекст(Данные.Комментарий);
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Ответственный");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.Ответственный.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Помещение");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.Помещение.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Склад");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.Склад.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента();
		
	ЗаписьXML.ЗаписатьНачалоЭлемента("Статус");
	ЗаписьXML.ЗаписатьТекст(XMLСтрока(Данные.Статус));
	ЗаписьXML.ЗаписатьКонецЭлемента();
		
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ОтборРазмещениеТоваровВXML(ЗаписьXML, Данные)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("DocumentObject.ОтборРазмещениеТоваров");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Ссылка");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.Ссылка.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Номер");
	ЗаписьXML.ЗаписатьТекст(Данные.Номер);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Дата");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.Дата));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ПометкаУдаления");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.ПометкаУдаления));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Проведен");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.Проведен));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ВидОперации");
	ЗаписьXML.ЗаписатьТекст(XMLСтрока(Данные.ВидОперации));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ЗонаОтгрузки");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.ЗонаОтгрузки.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента();

	ЗаписьXML.ЗаписатьНачалоЭлемента("ЗонаПриемки");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.ЗонаПриемки.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента();     
	
	Если ЗначениеЗаполнено(Данные.Исполнитель) Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("Исполнитель");
		ЗаписьXML.ЗаписатьТекст(Строка(Данные.Исполнитель.УникальныйИдентификатор()));
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Данные.Комментарий) Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("Комментарий");
		ЗаписьXML.ЗаписатьТекст(Данные.Комментарий);
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Склад");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.Склад.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Помещение");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.Помещение.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента();

	ЗаписьXML.ЗаписатьНачалоЭлемента("Статус");
	ЗаписьXML.ЗаписатьТекст(XMLСтрока(Данные.Статус));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Если ЗначениеЗаполнено(Данные.ОбъемРазмещение) Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("ОбъемРазмещение");
		ЗаписьXML.ЗаписатьТекст(Строка(Данные.ОбъемРазмещение));
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Данные.ВесРазмещение) Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("ВесРазмещение");
		ЗаписьXML.ЗаписатьТекст(Строка(Данные.ВесРазмещение));
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
	Если Данные.ТоварыОтбор.Количество() Тогда   
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("ТоварыОтбор");	
		Для Каждого СтрокаТоварыОтбор Из Данные.ТоварыОтбор Цикл			
			ЗаписьXML.ЗаписатьНачалоЭлемента("ЭлементТоварыОтбор");

			ЗаписьXML.ЗаписатьНачалоЭлемента("Количество");
			ЗаписьXML.ЗаписатьТекст(Строка(СтрокаТоварыОтбор.Количество));
			ЗаписьXML.ЗаписатьКонецЭлемента();     
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("КоличествоОтобрано");
			ЗаписьXML.ЗаписатьТекст(Строка(СтрокаТоварыОтбор.КоличествоОтобрано));
			ЗаписьXML.ЗаписатьКонецЭлемента();
				
			ЗаписьXML.ЗаписатьНачалоЭлемента("КоличествоУпаковок");
			ЗаписьXML.ЗаписатьТекст(Строка(СтрокаТоварыОтбор.КоличествоУпаковок));
			ЗаписьXML.ЗаписатьКонецЭлемента();            
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("КоличествоУпаковокОтобрано");
			ЗаписьXML.ЗаписатьТекст(Строка(СтрокаТоварыОтбор.КоличествоУпаковокОтобрано));
			ЗаписьXML.ЗаписатьКонецЭлемента();   
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Номенклатура");
			ЗаписьXML.ЗаписатьТекст(Строка(СтрокаТоварыОтбор.Номенклатура.УникальныйИдентификатор()));
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Упаковка");
			ЗаписьXML.ЗаписатьТекст(Строка(СтрокаТоварыОтбор.Упаковка.УникальныйИдентификатор()));
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Характеристика");
			ЗаписьXML.ЗаписатьТекст(Строка(СтрокаТоварыОтбор.Характеристика.УникальныйИдентификатор()));
			ЗаписьXML.ЗаписатьКонецЭлемента();    
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Ячейка");
			ЗаписьXML.ЗаписатьТекст(Строка(СтрокаТоварыОтбор.Ячейка.УникальныйИдентификатор()));
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
	Если Данные.ТоварыРазмещение.Количество() Тогда  
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("ТоварыРазмещение");
		Для Каждого СтрокаТоварыОтбор Из Данные.ТоварыРазмещение Цикл 
			ЗаписьXML.ЗаписатьНачалоЭлемента("ЭлементТоварыРазмещение");

			ЗаписьXML.ЗаписатьНачалоЭлемента("Количество");
			ЗаписьXML.ЗаписатьТекст(Строка(СтрокаТоварыОтбор.Количество));
			ЗаписьXML.ЗаписатьКонецЭлемента();     
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("КоличествоРазмещено");
			ЗаписьXML.ЗаписатьТекст(Строка(СтрокаТоварыОтбор.КоличествоРазмещено));
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("КоличествоУпаковок");
			ЗаписьXML.ЗаписатьТекст(Строка(СтрокаТоварыОтбор.КоличествоУпаковок));
			ЗаписьXML.ЗаписатьКонецЭлемента();            
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("КоличествоУпаковокРазмещено");
			ЗаписьXML.ЗаписатьТекст(Строка(СтрокаТоварыОтбор.КоличествоУпаковокРазмещено));
			ЗаписьXML.ЗаписатьКонецЭлемента();       
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Номенклатура");
			ЗаписьXML.ЗаписатьТекст(Строка(СтрокаТоварыОтбор.Номенклатура.УникальныйИдентификатор()));
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Упаковка");
			ЗаписьXML.ЗаписатьТекст(Строка(СтрокаТоварыОтбор.Упаковка.УникальныйИдентификатор()));
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Характеристика");
			ЗаписьXML.ЗаписатьТекст(Строка(СтрокаТоварыОтбор.Характеристика.УникальныйИдентификатор()));
			ЗаписьXML.ЗаписатьКонецЭлемента();    
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Ячейка");
			ЗаписьXML.ЗаписатьТекст(Строка(СтрокаТоварыОтбор.Ячейка.УникальныйИдентификатор()));
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
		ЗаписьXML.ЗаписатьКонецЭлемента(); 
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаДанных

Функция УпаковкиЕдиницыИзмеренияИзXML(ЧтениеXML)
	
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	ДанныеСсылка = Справочники.УпаковкиЕдиницыИзмерения.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.Ссылка));
	Данные = ДанныеСсылка.ПолучитьОбъект();
	
	Если Данные = Неопределено Тогда
		Данные = Справочники.УпаковкиЕдиницыИзмерения.СоздатьЭлемент();
		Данные.УстановитьСсылкуНового(ДанныеСсылка);
	Иначе
		Данные = ДанныеСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Данные, ОбъектXDTO);
	
	Данные.Родитель = Справочники.УпаковкиЕдиницыИзмерения.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.Родитель));
	
	Если ТипЗнч(ОбъектXDTO.НаименованиеПолное) = Тип("ОбъектXDTO") Тогда
		Данные.НаименованиеПолное = "";
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

Функция НаборыУпаковокИзXML(ЧтениеXML)
	
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	ДанныеСсылка = Справочники.НаборыУпаковок.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.Ссылка));
	Данные = ДанныеСсылка.ПолучитьОбъект();
	
	Если Данные = Неопределено Тогда
		Данные = Справочники.НаборыУпаковок.СоздатьЭлемент();
		Данные.УстановитьСсылкуНового(ДанныеСсылка);
	Иначе
		Данные = ДанныеСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Данные, ОбъектXDTO);
	
	Возврат Данные;
	
КонецФункции

Функция НоменклатураИзXML(ЧтениеXML)
	
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	ЭтоГруппа = Булево(ОбъектXDTO.ЭтоГруппа);
	
	ДанныеСсылка = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.Ссылка));
	Данные = ДанныеСсылка.ПолучитьОбъект();
	
	Если Данные = Неопределено И ЭтоГруппа Тогда
		Данные = Справочники.Номенклатура.СоздатьГруппу();
		Данные.УстановитьСсылкуНового(ДанныеСсылка);
	ИначеЕсли Данные = Неопределено И НЕ ЭтоГруппа Тогда
		Данные = Справочники.Номенклатура.СоздатьЭлемент();
		Данные.УстановитьСсылкуНового(ДанныеСсылка);
	Иначе
		Данные = ДанныеСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Данные, ОбъектXDTO);
	
	Данные.Родитель = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.Родитель));
	
	Если ЭтоГруппа Тогда
		Возврат Данные;
	КонецЕсли;
	
	Данные.ЕдиницаИзмерения = Справочники.УпаковкиЕдиницыИзмерения.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.ЕдиницаИзмерения));
	
	Если ТипЗнч(ОбъектXDTO.Артикул) = Тип("ОбъектXDTO") Тогда
		Данные.Артикул = "";
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

Функция ПользователиИзXML(ЧтениеXML)
	
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	ДанныеСсылка = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.Ссылка));
	Данные = ДанныеСсылка.ПолучитьОбъект();
	
	Если Данные = Неопределено Тогда
		Данные = Справочники.Пользователи.СоздатьЭлемент();
		Данные.УстановитьСсылкуНового(ДанныеСсылка);
	Иначе
		Данные = ДанныеСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Данные, ОбъектXDTO);
	Данные.ИдентификаторПользователяИБ = Новый УникальныйИдентификатор(ОбъектXDTO.ИдентификаторПользователяИБ);
	
	Возврат Данные;
	
КонецФункции

Функция СкладыИзXML(ЧтениеXML)
	
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	ЭтоГруппа = Булево(ОбъектXDTO.ЭтоГруппа);
	
	ДанныеСсылка = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.Ссылка));
	Данные = ДанныеСсылка.ПолучитьОбъект();
	
	Если Данные = Неопределено И ЭтоГруппа Тогда
		Данные = Справочники.Склады.СоздатьГруппу();
		Данные.УстановитьСсылкуНового(ДанныеСсылка);
	ИначеЕсли Данные = Неопределено И НЕ ЭтоГруппа Тогда
		Данные = Справочники.Склады.СоздатьЭлемент();
		Данные.УстановитьСсылкуНового(ДанныеСсылка);
	Иначе
		Данные = ДанныеСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Данные, ОбъектXDTO);
	
	Данные.Родитель = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.Родитель));
	
	Если ЭтоГруппа Тогда
		Возврат Данные;
	КонецЕсли;
	
	Данные.ИспользоватьАдресноеХранение                          = Булево(ОбъектXDTO.ИспользоватьАдресноеХранение);
	Данные.ИспользоватьАдресноеХранениеСправочно                 = Булево(ОбъектXDTO.ИспользоватьАдресноеХранениеСправочно);
	Данные.ИспользоватьОрдернуюСхемуПриОтгрузке                  = Булево(ОбъектXDTO.ИспользоватьОрдернуюСхемуПриОтгрузке);
	Данные.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач = Булево(ОбъектXDTO.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач);
	Данные.ИспользоватьОрдернуюСхемуПриПоступлении               = Булево(ОбъектXDTO.ИспользоватьОрдернуюСхемуПриПоступлении);
	Данные.ИспользоватьСерииНоменклатуры                         = Булево(ОбъектXDTO.ИспользоватьСерииНоменклатуры);
	Данные.ИспользоватьСкладскиеПомещения                        = Булево(ОбъектXDTO.ИспользоватьСкладскиеПомещения);
	Данные.ИспользоватьСтатусыПриходныхОрдеров                   = Булево(ОбъектXDTO.ИспользоватьСтатусыПриходныхОрдеров);
	Данные.ИспользоватьСтатусыРасходныхОрдеров                   = Булево(ОбъектXDTO.ИспользоватьСтатусыРасходныхОрдеров);

	Возврат Данные;
	
КонецФункции

Функция СкладскиеПомещенияИзXML(ЧтениеXML)
	
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	ДанныеСсылка = Справочники.СкладскиеПомещения.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.Ссылка));
	Данные = ДанныеСсылка.ПолучитьОбъект();
	
	Если Данные = Неопределено Тогда
		Данные = Справочники.СкладскиеПомещения.СоздатьЭлемент();
		Данные.УстановитьСсылкуНового(ДанныеСсылка);
	Иначе
		Данные = ДанныеСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Данные, ОбъектXDTO);
	Данные.ИспользоватьАдресноеХранение = Булево(ОбъектXDTO.ИспользоватьАдресноеХранение);
	Данные.ИспользоватьАдресноеХранениеСправочно = Булево(ОбъектXDTO.ИспользоватьАдресноеХранениеСправочно);
	
	Данные.Владелец = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.Владелец));
	
	Возврат Данные;
	
КонецФункции

Функция СкладскиеЯчейкиИзXML(ЧтениеXML)
	
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	ЭтоГруппа = Булево(ОбъектXDTO.ЭтоГруппа);
	
	ДанныеСсылка = Справочники.СкладскиеЯчейки.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.Ссылка));
	Данные = ДанныеСсылка.ПолучитьОбъект();
	
	Если Данные = Неопределено И ЭтоГруппа Тогда
		Данные = Справочники.СкладскиеЯчейки.СоздатьГруппу();
		Данные.УстановитьСсылкуНового(ДанныеСсылка);
	ИначеЕсли Данные = Неопределено И НЕ ЭтоГруппа Тогда
		Данные = Справочники.СкладскиеЯчейки.СоздатьЭлемент();
		Данные.УстановитьСсылкуНового(ДанныеСсылка);
	Иначе
		Данные = ДанныеСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Данные, ОбъектXDTO);
	
	Данные.Родитель = Справочники.СкладскиеЯчейки.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.Родитель));
	Данные.Владелец = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.Владелец));
	
	Если ЭтоГруппа Тогда
		Возврат Данные;
	КонецЕсли;
	
	Данные.Помещение = Справочники.СкладскиеПомещения.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.Помещение));
	Если ТипЗнч(ОбъектXDTO.ТипСкладскойЯчейки) = Тип("Строка") Тогда
		Данные.ТипСкладскойЯчейки = Перечисления.ТипыСкладскихЯчеек[ОбъектXDTO.ТипСкладскойЯчейки];
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

Функция ХарактеристикиНоменклатурыИзXML(ЧтениеXML)
	
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	ДанныеСсылка = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.Ссылка));
	Данные = ДанныеСсылка.ПолучитьОбъект();
	
	Если Данные = Неопределено Тогда
		Данные = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
		Данные.УстановитьСсылкуНового(ДанныеСсылка);
	Иначе
		Данные = ДанныеСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Данные, ОбъектXDTO);
	
	// Определить тип и по нему поискать ссылки
	Данные.Владелец = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.Владелец));
	
	Возврат Данные;
	
КонецФункции

Функция ВидыНоменклатурыИзXML(ЧтениеXML)
	
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	ЭтоГруппа = Булево(ОбъектXDTO.ЭтоГруппа);
	
	ДанныеСсылка = Справочники.ВидыНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.Ссылка));
	Данные = ДанныеСсылка.ПолучитьОбъект();
	
	Если Данные = Неопределено И ЭтоГруппа Тогда
		Данные = Справочники.ВидыНоменклатуры.СоздатьГруппу();
		Данные.УстановитьСсылкуНового(ДанныеСсылка);
	ИначеЕсли Данные = Неопределено И НЕ ЭтоГруппа Тогда
		Данные = Справочники.ВидыНоменклатуры.СоздатьЭлемент();
		Данные.УстановитьСсылкуНового(ДанныеСсылка);
	Иначе
		Данные = ДанныеСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Данные, ОбъектXDTO);
	
	Данные.Родитель = Справочники.ВидыНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.Родитель));
	
	Если ЭтоГруппа Тогда
		Возврат Данные;
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

Функция ВариантыОтчетовИзXML(ЧтениеXML)
	
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	ДанныеСсылка = Справочники.ВариантыОтчетов.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.Ссылка));
	Данные = ДанныеСсылка.ПолучитьОбъект();
	
	Если Данные = Неопределено Тогда
		Данные = Справочники.ВариантыОтчетов.СоздатьЭлемент();
		Данные.УстановитьСсылкуНового(ДанныеСсылка);
	Иначе
		Данные = ДанныеСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Данные, ОбъектXDTO);
	
	Возврат Данные;
	
КонецФункции

Функция ДашбордыМЦПИзXML(ЧтениеXML)
	
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	ДанныеСсылка = Справочники.ДашбордыМЦП.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.Ссылка));
	Данные = ДанныеСсылка.ПолучитьОбъект();
	
	Если Данные = Неопределено Тогда
		Данные = Справочники.ДашбордыМЦП.СоздатьЭлемент();
		Данные.УстановитьСсылкуНового(ДанныеСсылка);
	Иначе
		Данные = ДанныеСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Данные, ОбъектXDTO);
	
	Данные.Автор = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.Автор));
    Данные.Иконка = ОбъектXDTO.Иконка.ValueStorage;
	
	Данные.ПользователиДашборда.Очистить();
	Если ОбъектXDTO.ПользователиДашборда.Свойства().Получить("Пользователь") <> Неопределено Тогда
		Если ТипЗнч(ОбъектXDTO.ПользователиДашборда.Пользователь) = Тип("Строка") Тогда
			НоваяСтрока = Данные.ПользователиДашборда.Добавить();
			НоваяСтрока.Пользователь = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.ПользователиДашборда.Пользователь));
		Иначе	
			Для Каждого СтрокаПользователь Из ОбъектXDTO.ПользователиДашборда.Пользователь Цикл
				НоваяСтрока = Данные.ПользователиДашборда.Добавить();
				НоваяСтрока.Пользователь = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаПользователь));
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

Функция ШтрихкодыНоменклатурыИзXML(ЧтениеXML)
	
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	МенеджерЗаписи = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Штрихкод       = ОбъектXDTO.Штрихкод;
	МенеджерЗаписи.Номенклатура   = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.Номенклатура));
	МенеджерЗаписи.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.Характеристика));
	МенеджерЗаписи.Упаковка       = Справочники.УпаковкиЕдиницыИзмерения.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.Упаковка));
	Попытка
		МенеджерЗаписи.Записать();
	Исключение
	КонецПопытки;
	
	Возврат Неопределено;
	
КонецФункции

Функция СнимкиОтчетовИзXML(ЧтениеXML)
	
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	Пользователь = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.Пользователь));
	Если ОбъектXDTO.ОтчетТипЗначения = "ИдентификаторыОбъектовМетаданных" Тогда
		Отчет = Справочники.ИдентификаторыОбъектовМетаданных.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.Отчет));
	Иначе
		Отчет = Справочники.ИдентификаторыОбъектовРасширений.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.Отчет));
	КонецЕсли;
	Если ОбъектXDTO.ВариантТипЗначения = "ВариантыОтчетов" Тогда
		Вариант = Справочники.ВариантыОтчетов.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.ВариантОтчета));
	Иначе
		Вариант = Справочники.ДашбордыМЦП.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.ВариантОтчета));
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.СнимкиОтчетов.СоздатьМенеджерЗаписи();
	
	МенеджерЗаписи.Пользователь = Пользователь;
	МенеджерЗаписи.Отчет = Отчет;
	МенеджерЗаписи.Вариант = Вариант;
	МенеджерЗаписи.ХешПользовательскойНастройки = ОбъектXDTO.ХешПользовательскойНастройки;
	
	МенеджерЗаписи.РезультатОтчета = ОбъектXDTO.РезультатОтчета.ValueStorage;
	МенеджерЗаписи.ДатаАктуальности = Дата(ОбъектXDTO.ДатаАктуальности);
	МенеджерЗаписи.ДатаПоследнегоПросмотра = Дата(ОбъектXDTO.ДатаПоследнегоПросмотра);
	
	МенеджерЗаписи.ОшибкаОбновленияОтчета = Булево(ОбъектXDTO.ОшибкаОбновленияОтчета);
	
	Попытка
		МенеджерЗаписи.Записать();
	Исключение
	КонецПопытки;
	
	Возврат Неопределено;
	
КонецФункции

Функция БлокировкиСкладскихЯчеекИзXML(ЧтениеXML)
	
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	НаборЗаписей = РегистрыСведений.БлокировкиСкладскихЯчеек.СоздатьНаборЗаписей();   
	Если ОбъектXDTO.РегистраторТипЗначения = "УстановкаБлокировокЯчеек" Тогда
		Регистратор = Документы.УстановкаБлокировокЯчеек.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.Регистратор));
	Иначе
		Регистратор = Документы.ПересчетТоваров.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.Регистратор));
	КонецЕсли;   
	
	НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
	НаборЗаписей.Прочитать();
	НоваяЗапись = НаборЗаписей.Добавить();
	
	НоваяЗапись.Регистратор	  = Регистратор;
	НоваяЗапись.Активность	  = Булево(ОбъектXDTO.Активность);
	НоваяЗапись.Ячейка 		  = Справочники.СкладскиеЯчейки.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.Ячейка));
	Если ТипЗнч(ОбъектXDTO.ТипБлокировки) = Тип("Строка") Тогда
		НоваяЗапись.ТипБлокировки = Перечисления.ТипыБлокировокСкладскихЯчеек[ОбъектXDTO.ТипБлокировки];
	КонецЕсли;
	Попытка
		НаборЗаписей.Записать();
	Исключение
	КонецПопытки;
	
	Возврат Неопределено;
	
КонецФункции

Функция УстановкаБлокировокЯчеекИзXML(ЧтениеXML)
	
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	ДанныеСсылка = Документы.УстановкаБлокировокЯчеек.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.Ссылка));
	Данные = ДанныеСсылка.ПолучитьОбъект();
	
	Если Данные = Неопределено Тогда
		Данные = Документы.УстановкаБлокировокЯчеек.СоздатьДокумент();
		Данные.УстановитьСсылкуНового(ДанныеСсылка);
	Иначе
		Данные = ДанныеСсылка.ПолучитьОбъект();
	КонецЕсли;
			
	ЗаполнитьЗначенияСвойств(Данные, ОбъектXDTO); 
	
	Данные.Дата = Дата(ОбъектXDTO.Дата);
	Данные.ПометкаУдаления = Булево(ОбъектXDTO.ПометкаУдаления);
	Данные.Проведен = Булево(ОбъектXDTO.Проведен);			
	Если ОбъектXDTO.Свойства().Получить("Ответственный") <> Неопределено Тогда
		Данные.Ответственный = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.Ответственный));
	КонецЕсли;
	Данные.Склад = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.Склад));
	Данные.Помещение = Справочники.СкладскиеПомещения.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.Помещение));

	Возврат Данные;
	
КонецФункции 

Функция ПересчетТоваровИзXML(ЧтениеXML)
	
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	ДанныеСсылка = Документы.ПересчетТоваров.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.Ссылка));
	Данные = ДанныеСсылка.ПолучитьОбъект();
	
	Если Данные = Неопределено Тогда
		Данные = Документы.ПересчетТоваров.СоздатьДокумент();
		Данные.УстановитьСсылкуНового(ДанныеСсылка);
	Иначе
		Данные = ДанныеСсылка.ПолучитьОбъект();
	КонецЕсли;
			
	ЗаполнитьЗначенияСвойств(Данные, ОбъектXDTO); 
	
	Данные.Дата = Дата(ОбъектXDTO.Дата);
	Данные.ПометкаУдаления = Булево(ОбъектXDTO.ПометкаУдаления);
	Данные.Проведен = Булево(ОбъектXDTO.Проведен);		
	Данные.Исполнитель = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.Исполнитель));
	Если ОбъектXDTO.Свойства().Получить("Ответственный") <> Неопределено Тогда
		Данные.Ответственный = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.Ответственный));
	КонецЕсли;	
	Данные.Склад = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.Склад));
    Данные.Помещение = Справочники.СкладскиеПомещения.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.Помещение));
	Если ТипЗнч(ОбъектXDTO.Статус) = Тип("Строка") Тогда
		Данные.Статус = Перечисления.СтатусыПересчетовТоваров[ОбъектXDTO.Статус];
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции 

Функция ПриходныйОрдерИзXML(ЧтениеXML)
	
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	ДанныеСсылка = Документы.ПриходныйОрдерНаТовары.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.Ссылка));
	Данные = ДанныеСсылка.ПолучитьОбъект();
	
	Если Данные = Неопределено Тогда
		Данные = Документы.ПриходныйОрдерНаТовары.СоздатьДокумент();
		Данные.УстановитьСсылкуНового(ДанныеСсылка);
	Иначе
		Данные = ДанныеСсылка.ПолучитьОбъект();
	КонецЕсли;
			
	ЗаполнитьЗначенияСвойств(Данные, ОбъектXDTO); 
	
	Данные.Дата = Дата(ОбъектXDTO.Дата);
	Данные.ПометкаУдаления = Булево(ОбъектXDTO.ПометкаУдаления);
	Данные.Проведен = Булево(ОбъектXDTO.Проведен);
	Данные.Склад = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.Склад));
	Данные.Исполнитель = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.Исполнитель));
	Если ТипЗнч(ОбъектXDTO.Статус) = Тип("Строка") Тогда
		Данные.Статус = Перечисления.СтатусыПриходныхОрдеров[ОбъектXDTO.Статус];
	КонецЕсли;
	Данные.Помещение = Справочники.СкладскиеПомещения.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.Помещение));
    Данные.ЗонаПриемки = Справочники.СкладскиеЯчейки.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.ЗонаПриемки));
	Если ОбъектXDTO.Свойства().Получить("ДатаВходящегоДокумента") <> Неопределено Тогда
		Данные.ДатаВходящегоДокумента = Дата(ОбъектXDTO.ДатаВходящегоДокумента);
	КонецЕсли;
		
	Возврат Данные;
	
КонецФункции

Функция РасходныйОрдерИзXML(ЧтениеXML)
	
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	ДанныеСсылка = Документы.РасходныйОрдерНаТовары.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.Ссылка));
	Данные = ДанныеСсылка.ПолучитьОбъект();
	
	Если Данные = Неопределено Тогда
		Данные = Документы.РасходныйОрдерНаТовары.СоздатьДокумент();
		Данные.УстановитьСсылкуНового(ДанныеСсылка);
	Иначе
		Данные = ДанныеСсылка.ПолучитьОбъект();
	КонецЕсли;
			
	ЗаполнитьЗначенияСвойств(Данные, ОбъектXDTO); 
	
	Данные.Дата = Дата(ОбъектXDTO.Дата);
	Данные.ПометкаУдаления = Булево(ОбъектXDTO.ПометкаУдаления);
	Данные.Проведен = Булево(ОбъектXDTO.Проведен);
	Данные.ЗонаОтгрузки = Справочники.СкладскиеЯчейки.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.ЗонаОтгрузки));
   	Данные.Ответственный = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.Ответственный));
	Данные.Помещение = Справочники.СкладскиеПомещения.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.Помещение));
	Данные.Склад = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.Склад));
	Если ТипЗнч(ОбъектXDTO.Статус) = Тип("Строка") Тогда
		Данные.Статус = Перечисления.СтатусыРасходныхОрдеров[ОбъектXDTO.Статус];
	КонецЕсли;
		
	Возврат Данные;
	
КонецФункции

Функция ОтборРазмещениеТоваровИзXML(ЧтениеXML)
	
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	ДанныеСсылка = Документы.ОтборРазмещениеТоваров.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.Ссылка));
	Данные = ДанныеСсылка.ПолучитьОбъект();
	
	Если Данные = Неопределено Тогда
		Данные = Документы.ОтборРазмещениеТоваров.СоздатьДокумент();
		Данные.УстановитьСсылкуНового(ДанныеСсылка);
	Иначе
		Данные = ДанныеСсылка.ПолучитьОбъект();
	КонецЕсли;
			
	ЗаполнитьЗначенияСвойств(Данные, ОбъектXDTO); 
	
	Данные.Дата = Дата(ОбъектXDTO.Дата);
	Данные.ПометкаУдаления = Булево(ОбъектXDTO.ПометкаУдаления);
	Данные.Проведен = Булево(ОбъектXDTO.Проведен);	
	Если ТипЗнч(ОбъектXDTO.ВидОперации) = Тип("Строка") Тогда
		Данные.ВидОперации = Перечисления.ВидыОперацийОтбораРазмещенияТоваров[ОбъектXDTO.ВидОперации];
	КонецЕсли;	
	Данные.ЗонаОтгрузки = Справочники.СкладскиеЯчейки.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.ЗонаОтгрузки));
    Данные.ЗонаПриемки = Справочники.СкладскиеЯчейки.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.ЗонаПриемки));
	Если ОбъектXDTO.Свойства().Получить("Исполнитель") <> Неопределено Тогда
		Данные.Исполнитель = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.Исполнитель));
	КонецЕсли;	
    Данные.Склад = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.Склад));
    Данные.Помещение = Справочники.СкладскиеПомещения.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.Помещение));
 	Если ТипЗнч(ОбъектXDTO.Статус) = Тип("Строка") Тогда
		Данные.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров[ОбъектXDTO.Статус];
	КонецЕсли;  
	Если ОбъектXDTO.Свойства().Получить("ОбъемРазмещение") <> Неопределено Тогда
		Данные.ОбъемРазмещение = Число(ОбъектXDTO.ОбъемРазмещение);
	КонецЕсли;	
	Если ОбъектXDTO.Свойства().Получить("ВесРазмещение") <> Неопределено Тогда
		Данные.ВесРазмещение = Число(ОбъектXDTO.ВесРазмещение);
	КонецЕсли;		
	
	Данные.ТоварыОтбор.Очистить(); 
	
	Если ОбъектXDTO.Свойства().Получить("ТоварыОтбор") <> Неопределено Тогда   
		
		Если ТипЗнч(ОбъектXDTO.ТоварыОтбор.ЭлементТоварыОтбор) <> Тип("СписокXDTO") Тогда
			СписокXDTOСтрокаТоварыОтбор	= Новый Массив;
			СписокXDTOСтрокаТоварыОтбор.Добавить(ОбъектXDTO.ТоварыОтбор.ЭлементТоварыОтбор);
		Иначе
			СписокXDTOСтрокаТоварыОтбор = ОбъектXDTO.ТоварыОтбор.ЭлементТоварыОтбор;
		КонецЕсли;
			
		Для Каждого СтрокаТоварыОтбор Из СписокXDTOСтрокаТоварыОтбор Цикл
			НоваяСтрока = Данные.ТоварыОтбор.Добавить();
			НоваяСтрока.Количество = Число(СтрокаТоварыОтбор.Количество);
			НоваяСтрока.КоличествоОтобрано = Число(СтрокаТоварыОтбор.КоличествоОтобрано);
			НоваяСтрока.КоличествоУпаковок = Число(СтрокаТоварыОтбор.КоличествоУпаковок);
			НоваяСтрока.КоличествоУпаковокОтобрано = Число(СтрокаТоварыОтбор.КоличествоУпаковокОтобрано);
			НоваяСтрока.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТоварыОтбор.Номенклатура));
			НоваяСтрока.Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТоварыОтбор.Упаковка));
		    НоваяСтрока.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТоварыОтбор.Характеристика));
		    НоваяСтрока.Ячейка = Справочники.СкладскиеЯчейки.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТоварыОтбор.Ячейка)); 
		КонецЦикла;
	КонецЕсли;

	Данные.ТоварыРазмещение.Очистить();
	
	Если ОбъектXDTO.Свойства().Получить("ТоварыРазмещение") <> Неопределено Тогда  
		
		Если ТипЗнч(ОбъектXDTO.ТоварыРазмещение.ЭлементТоварыРазмещение) <> Тип("СписокXDTO") Тогда
			СписокXDTOСтрокаТоварыРазмещение	= Новый Массив;
			СписокXDTOСтрокаТоварыРазмещение.Добавить(ОбъектXDTO.ТоварыРазмещение.ЭлементТоварыРазмещение);
		Иначе
			СписокXDTOСтрокаТоварыРазмещение = ОбъектXDTO.ТоварыРазмещение.ЭлементТоварыРазмещение;
		КонецЕсли;
	
		Для Каждого СтрокаТоварыОтбор Из СписокXDTOСтрокаТоварыРазмещение Цикл
			НоваяСтрока = Данные.ТоварыРазмещение.Добавить();
			НоваяСтрока.Количество = Число(СтрокаТоварыОтбор.Количество);
			НоваяСтрока.КоличествоРазмещено = Число(СтрокаТоварыОтбор.КоличествоРазмещено);
			НоваяСтрока.КоличествоУпаковок = Число(СтрокаТоварыОтбор.КоличествоУпаковок);
			НоваяСтрока.КоличествоУпаковокРазмещено = Число(СтрокаТоварыОтбор.КоличествоУпаковокРазмещено);
			НоваяСтрока.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТоварыОтбор.Номенклатура));
			НоваяСтрока.Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТоварыОтбор.Упаковка));
		    НоваяСтрока.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТоварыОтбор.Характеристика));
		    НоваяСтрока.Ячейка = Справочники.СкладскиеЯчейки.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТоварыОтбор.Ячейка)); 
		КонецЦикла;
    КонецЕсли;

	Возврат Данные;
	
КонецФункции

Процедура ЗарегистрироватьИзмененияДляАвтономногоРежимаПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.ВариантыОтчетов") Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Вариант", Источник.Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СнимкиОтчетов.Вариант КАК Вариант
		|ИЗ
		|	РегистрСведений.СнимкиОтчетов КАК СнимкиОтчетов
		|ГДЕ
		|	СнимкиОтчетов.Вариант = &Вариант";
		Если Запрос.Выполнить().Пустой() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	УзлыДляРегистрации = УзлыДляРегистрации();
	
	ЗарегистрироватьИзмененияДляУзловОбмена(УзлыДляРегистрации, Источник);
	
КонецПроцедуры

// Возвращает массив узлов плана обмена с учетом исключаемых.
//
// Возвращаемое значение:
//  Массив из ПланОбменаСсылка - Массив узлов для регистрации изменений.
//
Функция УзлыДляРегистрации()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Мобильные.Ссылка
	|ИЗ
	|	ПланОбмена.Мобильные КАК Мобильные
	|ГДЕ
	|	НЕ Мобильные.ПометкаУдаления
	|	И НЕ Мобильные.ЭтотУзел");
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции

// Регистрирует объекты в узлах обмена мобильного приложения.
//
// Параметры:
//  МассивУзлов - Массив из ПланОбменаСсылка - Содержит узлы для регистрации изменений объекта;
//  Объект - СправочникОбъект, РегистрСведенийНаборЗаписей - объект для которого регистрируются изменения.
//
Процедура ЗарегистрироватьИзмененияДляУзловОбмена(МассивУзлов, Объект) Экспорт
	
	Если МассивУзлов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Объект.Ссылка);
	
КонецПроцедуры

Процедура ЗарегистрироватьИзмененияДляАвтономногоРежимаРегистрыПриЗаписи(Источник, Отказ, Замещение) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	УзлыДляРегистрации = УзлыДляРегистрации();
	
	ЗарегистрироватьИзмененияДляУзловОбменаРегистры(УзлыДляРегистрации, Источник);
	
КонецПроцедуры

// Регистрирует объекты в узлах обмена мобильного приложения.
//
// Параметры:
//  МассивУзлов - Массив из ПланОбменаСсылка - содержит узлы для регистрации изменений объекта;
//  НаборЗаписей - РегистрСведенийНаборЗаписей - объект для которого регистрируются изменения.
//
Процедура ЗарегистрироватьИзмененияДляУзловОбменаРегистры(МассивУзлов, НаборЗаписей) Экспорт
	
	Если МассивУзлов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, НаборЗаписей);
	
КонецПроцедуры

#КонецОбласти