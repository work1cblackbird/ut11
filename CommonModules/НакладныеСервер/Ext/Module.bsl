
////////////////////////////////////////////////////////////////////////////////
// Модуль "НакладныеСервер" содержит процедуры и функции для
// поддержки заполнения накладных и функциональности форм документов
// и списков накладных.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Для переданной группировки возвращает параметры для открытия формы переоформляемой по ордерам накладной.
// см. НакладныеКлиент.ОткрытьФормуСозданныхДокументов.
//
// Параметры:
//  ПараметрыПроцедуры - Структура - Структура с полями:
//   *ГруппировкиРаспоряжений            - Массив - содержит массивы групп распоряжений по которым необходимо создать документ
//  															см. НакладныеКлиент.ДанныеДляОформленияПоЗаказам.
//   *ПараметрыФормыСозданныхДокументов	 - Структура - параметры для ОбщаяФорма.ФормаСозданныхДокументов.
//   *ПолеОшибки						 - Строка - значение, которое задается в свойстве Поле объекта СообщениеПользователю.
//  АдресРезультата - Строка - Адрес во временном хранилище. Содержит сруктуру с полями:
//   * ПараметрыСозданныхДокументов - Структура - Структура с полями:
//     ** ИмяФормы	 - Строка    - имя открываемой формы
//  	** Параметры - Структура - параметры открываемой формы
//   * СписокОшибок - см. ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю
//
Процедура ОформитьНакладныеПоОрдерамВФоне(ПараметрыПроцедуры, АдресРезультата) Экспорт
	
	ГруппировкиРаспоряжений           = ПараметрыПроцедуры.ГруппировкиРаспоряжений;
	ПараметрыФормыСозданныхДокументов = ПараметрыПроцедуры.ПараметрыФормыСозданныхДокументов;
	ПолеОшибки                        = ПараметрыПроцедуры.ПолеОшибки;
	Результат = ОформитьНакладныеПоОрдерам(ГруппировкиРаспоряжений, ПараметрыФормыСозданныхДокументов, ПолеОшибки);
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Для переданной группировки возвращает параметры для открытия формы оформляемой по заказам накладной.
// см. НакладныеКлиент.ОткрытьФормуСозданныхДокументов.
//
// Параметры:
//  ПараметрыПроцедуры - Структура - Структура с полями:
//   *ГруппировкиРаспоряжений            - Массив - содержит массивы групп распоряжений по которым необходимо создать документ
//  															см. НакладныеКлиент.ДанныеДляОформленияПоЗаказам.
//   *ПараметрыФормыСозданныхДокументов	 - Структура - параметры для ОбщаяФорма.ФормаСозданныхДокументов.
//   *ПолеОшибки						 - Строка - значение, которое задается в свойстве Поле объекта СообщениеПользователю.
//  АдресРезультата - Строка - Адрес во временном хранилище. Содержит сруктуру с полями:
//   * ПараметрыСозданныхДокументов - Структура - Структура с полями:
//     ** ИмяФормы	 - Строка    - имя открываемой формы
//  	** Параметры - Структура - параметры открываемой формы
//   * СписокОшибок - см. ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю
//
Процедура ОформитьНакладныеПоЗаказамВФоне(ПараметрыПроцедуры, АдресРезультата) Экспорт
	
	ГруппировкиРаспоряжений           = ПараметрыПроцедуры.ГруппировкиРаспоряжений;
	ПараметрыФормыСозданныхДокументов = ПараметрыПроцедуры.ПараметрыФормыСозданныхДокументов;
	ПолеОшибки                        = ПараметрыПроцедуры.ПолеОшибки;
	Результат = ОформитьНакладныеПоЗаказам(ГруппировкиРаспоряжений, ПараметрыФормыСозданныхДокументов, ПолеОшибки);
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Оформляет акты о расхождениях для переданных накладных и заказов.
//
// Параметры:
//  ПараметрыПроцедуры - Структура - Структура с полями:
//   *Накладные                         - Массив - накладные.
//   *Заказы                            - Массив - заказы.
//   *ПараметрыФормыСозданныхДокументов - Структура - параметры для ОбщаяФорма.ФормаСозданныхДокументов.
//   *ПолеОшибки						- Строка - значение, которое задается в свойстве Поле объекта СообщениеПользователю.
//  АдресРезультата - Строка - Адрес во временном хранилище. Содержит сруктуру с полями:
//   * ПараметрыСозданныхДокументов - Структура - Структура с полями:
//     ** ИмяФормы	 - Строка    - имя открываемой формы
//  	** Параметры - Структура - параметры открываемой формы
//   * СписокОшибок - см. ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю
//
Процедура ОформитьАктыОРасхожденияхВФоне(ПараметрыПроцедуры, АдресРезультата) Экспорт

	Накладные                         = ПараметрыПроцедуры.Накладные;
	Заказы                            = ПараметрыПроцедуры.Заказы;
	ПараметрыФормыСозданныхДокументов = ПараметрыПроцедуры.ПараметрыФормыСозданныхДокументов;
	ПолеОшибки                        = ПараметрыПроцедуры.ПолеОшибки;

	Результат = ОформитьАктОРасхождениях(Накладные, Заказы, ПараметрыФормыСозданныхДокументов, ПолеОшибки);
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Заполняет заголовок команды подбора по заказам/ордерам.
//
// Параметры:
//   Элемент              - ВсеЭлементыФормы - элемент для заполнения заголовка.
//   Параметры            - Структура        - структура с полями:
//    * ОрдернаяСхемаПриОтгрузке                 - Булево - значение соответствующей ФО для типа документов.
//    * ИспользоватьЗаказы                       - Булево - значение соответствующей ФО для типа документов.
//    * ИспользоватьНакладныеПоНесколькимЗаказам - Булево - значение соответствующей ФО для типа документов.
//   УстанавливатьДоступность                    - Булево - истина, если доступность элемента подлежит обновлению.
//
Процедура НастроитьКомандуПодобратьПоЗаказамОрдерам(Элемент, Параметры, УстанавливатьДоступность = Истина) Экспорт
	
	Если УстанавливатьДоступность Тогда
		Элемент.Видимость = Параметры.ОрдернаяСхемаПриОтгрузке Или Параметры.ИспользоватьЗаказы;
	КонецЕсли;
	
	Если Параметры.ИспользоватьЗаказы Тогда
		
		Если Параметры.ОрдернаяСхемаПриОтгрузке Тогда
			
			Элемент.Заголовок = ?(Параметры.ИспользоватьНакладныеПоНесколькимЗаказам,
				НСтр("ru = 'Подобрать товары по заказам/ордерам'"),
				НСтр("ru = 'Подобрать товары по заказу/ордерам'"));
			
		Иначе
			
			Элемент.Заголовок = ?(Параметры.ИспользоватьНакладныеПоНесколькимЗаказам,
				НСтр("ru = 'Подобрать товары по заказам'"),
				НСтр("ru = 'Подобрать товары по заказу'"));
			
		КонецЕсли;
		
	Иначе
		
		Элемент.Заголовок = НСтр("ru = 'Подобрать товары по ордерам'");
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет наличие расходных ордеров по распоряжению.
//
// Параметры:
//  Распоряжения - ДокументСсылка - массив распоряжений-заказов.
//  УчитыватьСобирается - Булево - необходимость учета ордеров в статусе Собирается.
//
// Возвращаемое значение:
//  Булево - Истина, если есть ордера, Ложь - если нет ордеров.
//
Функция ЕстьРасходныйОрдерДляЗаказовНаОтгрузку(Распоряжения, УчитыватьСобирается = Истина) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.ОстаткиИОбороты(, , , ,
		|	ДокументОтгрузки В (&Заказы)
		|	И Склад В(
		|		ВЫБРАТЬ
		|			СпрСклады.Ссылка КАК Склад
		|		ИЗ
		|			Справочник.Склады КАК СпрСклады
		|		ГДЕ
		|			СпрСклады.ИспользоватьОрдернуюСхемуПриОтгрузке
		|			И СпрСклады.ДатаНачалаОрдернойСхемыПриОтгрузке <= &НачалоТекущегоДня)) КАК Таблица
		|ГДЕ
		|	Таблица.КОтгрузкеРасход + Таблица.СобраноПриход + Таблица.СобираетсяПриход > 0";
	
	Если Не УчитыватьСобирается Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "+ Таблица.СобираетсяПриход", "");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Заказы", Распоряжения);
	Запрос.УстановитьПараметр("НачалоТекущегоДня", НачалоДня(ТекущаяДатаСеанса()));
	УстановитьПривилегированныйРежим(Истина);
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Списывает количество для оформления по ордерам на количество для оформления по заказам.
//
// Параметры:
//  ТаблицаПриемник - ТаблицаЗначений - таблица, содержащая данные для оформления по заказам.
//  ТаблицаИсточник - ТаблицаЗначений - таблица, содержащая данные для оформления по ордерам.
//  ПоляКлюча - Строка - ключ связи таблиц для списания.
//
Процедура ЗаполнитьПоказательКоличествоПоОрдерам(ТаблицаПриемник, ТаблицаИсточник, ПоляКлюча) Экспорт
	
	// Поддержка "старых" назначений, которые не проходят по складу.
	ИмяПоляНазначение = ИмяПоляНазначение(ТаблицаПриемник, ПоляКлюча);
	ДобавитьКолонкуДвиженияПоСкладскимРегистрам(ТаблицаПриемник, ПоляКлюча);
	ПустоеНазначение = Справочники.Назначения.ПустаяСсылка();
	
	Если ТаблицаПриемник.Колонки.Найти("КоличествоВОрдере") = Неопределено Тогда
		ТаблицаПриемник.Колонки.Добавить("КоличествоВОрдере", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15, 3));
	КонецЕсли;
	Если ТаблицаПриемник.Колонки.Найти("Собирается") = Неопределено Тогда
		ТаблицаПриемник.Колонки.Добавить("Собирается", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15, 3));
	КонецЕсли;
	
	ТаблицаИсточник.Индексы.Добавить(ПоляКлюча);
	ПараметрыПоиска = Новый Структура(ПоляКлюча);
	
	// Попытка сохранить количество в накладной.
	Для Каждого СтрокаПриемник Из ТаблицаПриемник Цикл
		
		ЗаполнитьЗначенияСвойств(ПараметрыПоиска, СтрокаПриемник);
		Если Не СтрокаПриемник.ДвиженияПоСкладскимРегистрам Тогда
			ПараметрыПоиска[ИмяПоляНазначение] = ПустоеНазначение;
		КонецЕсли;
		НайденныеСтроки = ТаблицаИсточник.НайтиСтроки(ПараметрыПоиска);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			СтрокаИсточник = НайденныеСтроки[0];
			СтрокаПриемник.Собирается = СтрокаИсточник.Собирается;
			КоличествоСписать = Мин(СтрокаИсточник.Количество,
				?(СтрокаПриемник.КоличествоВНакладной > 0, Макс(СтрокаПриемник.КоличествоВНакладной, СтрокаПриемник.КоличествоВЗаказе), 0));
			Если КоличествоСписать > 0 Тогда
				
				СтрокаПриемник.КоличествоВОрдере = КоличествоСписать;
				СтрокаИсточник.Количество = СтрокаИсточник.Количество - КоличествоСписать;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Дополнение отгрузки до заказа.
	Для Каждого СтрокаПриемник Из ТаблицаПриемник Цикл
		
		ЗаполнитьЗначенияСвойств(ПараметрыПоиска, СтрокаПриемник);
		Если Не СтрокаПриемник.ДвиженияПоСкладскимРегистрам Тогда
			ПараметрыПоиска[ИмяПоляНазначение] = ПустоеНазначение;
		КонецЕсли;
		НайденныеСтроки = ТаблицаИсточник.НайтиСтроки(ПараметрыПоиска);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			СтрокаИсточник = НайденныеСтроки[0];
			КоличествоСписать = Мин(СтрокаИсточник.Количество, СтрокаПриемник.КоличествоВЗаказе - СтрокаПриемник.КоличествоВОрдере);
			Если КоличествоСписать > 0 Тогда
				
				СтрокаПриемник.КоличествоВОрдере = СтрокаПриемник.КоличествоВОрдере + КоличествоСписать;
				СтрокаИсточник.Количество = СтрокаИсточник.Количество - КоличествоСписать;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Добавление строк сверх заказа.
	Для Каждого СтрокаИсточник Из ТаблицаИсточник Цикл
		
		Если СтрокаИсточник.Количество > 0 Тогда
			
			КоличествоСписать = СтрокаИсточник.Количество;
			
			СтрокаПриемник = ТаблицаПриемник.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник);
			СтрокаПриемник.КоличествоВОрдере = КоличествоСписать;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет таблицу по варианту заполнения (по данным заказа или данным ордера).
//
// Параметры:
//  Приемник - ТаблицаЗначений - таблица с обязательными колонками "Количество" и "Количество упаковок".
//  Источник - ТаблицаЗначений - таблица, содержащая данные для оформления по заказам, либо по заказам и ордерам.
//  ВариантЗаполнения - Строка - "ЗаполнятьПоОрдеру" - если требуется заполнение по ордеру.
//  ДобавлятьСтроки - Булево - возможность добавлять стоки сверх заказа в накладную.
Процедура ЗаполнитьПоВарианту(Приемник, Источник, ВариантЗаполнения, ДобавлятьСтроки = Истина) Экспорт
	
	Для Каждого СтрокаТаблицы Из Источник Цикл
		
		Если ВариантЗаполнения = "ЗаполнятьПоОрдеру" И СтрокаТаблицы.КоличествоВОрдере = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДобавлятьСтроки Тогда
			НоваяСтрока = Приемник.Добавить();
		Иначе
			НоваяСтрока = Приемник;
		КонецЕсли;
		
		Если ВариантЗаполнения = "ЗаполнятьПоОрдеру" Тогда
			ЗаполнитьСтрокуПоВарианту(НоваяСтрока, СтрокаТаблицы, СтрокаТаблицы.КоличествоВОрдере);
		ИначеЕсли ВариантЗаполнения = "ЗаполнятьПоЗаказу" Тогда
			ЗаполнитьСтрокуПоВарианту(НоваяСтрока, СтрокаТаблицы, СтрокаТаблицы.КоличествоВЗаказе);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Вычисляет каким образом заполнять накладную, по заказам, либо по ордерам.
//
// Параметры:
//  Склад - СправочникСсылка.Склады - склад оформления.
//
// Возвращаемое значение:
//  Булево - Истина, если заполнять по ордеру, Ложь - если заполнять по заказу.
//
Функция ЗаполнятьПоОрдеру(Склад) Экспорт
	
	Возврат СкладыСервер.ИспользоватьОрдернуюСхемуПриОтгрузке(Склад, ТекущаяДатаСеанса())
		И Константы.ПорядокОформленияНакладныхРасходныхОрдеров.Получить() =
			Перечисления.ПорядокОформленияНакладныхРасходныхОрдеров.СначалаОрдера;
	
КонецФункции

#Область РМКОформлению

// Разбивает документы одного типа на группы по ключевым полям.
//
// Параметры:
//  ДокументыДляГруппировки	 - Массив - содержащий ссылки на документы.
//  КлючевыеПоля				 - Строка - перечисление реквизитов документа по которым будет происходить группировка.
Процедура СгруппироватьДокументыПоКлючевымПолям(ДокументыДляГруппировки, КлючевыеПоля) Экспорт
	
	Если Не ЗначениеЗаполнено(ДокументыДляГруппировки) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапросаГруппировки(КлючевыеПоля, ДокументыДляГруппировки, "ВтИсходныеДанные", "Документы"));
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Документы", ДокументыДляГруппировки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Отбор = Новый Структура(КлючевыеПоля);
	
	ИсходнаяТаблица = Запрос.МенеджерВременныхТаблиц.Таблицы[0].ПолучитьДанные().Выгрузить();
	ИсходнаяТаблица.Индексы.Добавить(КлючевыеПоля);
	
	ДокументыДляГруппировки.Очистить();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Отбор, Выборка);
		МассивДокументов = ИсходнаяТаблица.НайтиСтроки(Отбор);
		Для Индекс = 0 По МассивДокументов.ВГраница() Цикл
			МассивДокументов[Индекс] = МассивДокументов[Индекс].Ссылка;
		КонецЦикла;
		ДокументыДляГруппировки.Добавить(МассивДокументов);
	КонецЦикла;
	
КонецПроцедуры

// Разбивает документы одного типа на группы по ключевым полям в коллекции.
//
// Параметры:
//  Коллекция						 - Массив - массив структур.
//  ИмяМассиваДокументовВКоллекции	 - Строка - имя поля коллекции содержащее массив ссылок на документы.
//  ИмяПоляКлючевыхПолейВКоллекции	 - Строка - имя поля коллекции содержащее строку с перечислениям реквизитов документа по которым будет происходить группировка.
//  ИмяПоляКлючевыхПолейАдаптированныхВКоллекции - Строка - имя поля коллекции содержащее строку с адаптированными значениями полей сопоставляемыми с реквизитами документа.
Процедура СгруппироватьДокументыПоКлючевымПолямВКоллекции(
			Коллекция, 
			ИмяМассиваДокументовВКоллекции, 
			ИмяПоляКлючевыхПолейВКоллекции, 
			ИмяПоляКлючевыхПолейАдаптированныхВКоллекции = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Индекс = 0;
	Пакет = Новый Массив;
	Для каждого Значение Из Коллекция Цикл
		
		Пакет.Добавить(ТекстЗапросаГруппировки(Значение[ИмяПоляКлючевыхПолейВКоллекции],
			Значение[ИмяМассиваДокументовВКоллекции],
			"ВтИсходныеДанные" + Индекс, "Документы" + Индекс,
			?(ЗначениеЗаполнено(ИмяПоляКлючевыхПолейАдаптированныхВКоллекции), Значение[ИмяПоляКлючевыхПолейАдаптированныхВКоллекции], Неопределено)));
		Запрос.УстановитьПараметр("Документы" + Индекс, Значение[ИмяМассиваДокументовВКоллекции]);
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	Запрос.Текст = СтрСоединить(Пакет, ОбщегоНазначения.РазделительПакетаЗапросов());
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Индекс = 0;
	Для каждого Значение Из Коллекция Цикл
		
		Отбор = Новый Структура(Значение[ИмяПоляКлючевыхПолейВКоллекции]);
		
		ИсходнаяТаблица = Запрос.МенеджерВременныхТаблиц.Таблицы[Индекс].ПолучитьДанные().Выгрузить();
		ИсходнаяТаблица.Индексы.Добавить(Значение[ИмяПоляКлючевыхПолейВКоллекции]);
		
		Значение[ИмяМассиваДокументовВКоллекции].Очистить();
		
		Выборка = РезультатЗапроса[2*Индекс + 1].Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(Отбор, Выборка);
			МассивДокументов = ИсходнаяТаблица.НайтиСтроки(Отбор);
			Для ИндексМассива = 0 По МассивДокументов.ВГраница() Цикл
				МассивДокументов[ИндексМассива] = МассивДокументов[ИндексМассива].Ссылка;
			КонецЦикла;
			Значение[ИмяМассиваДокументовВКоллекции].Добавить(МассивДокументов);
		КонецЦикла;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
КонецПроцедуры

// Описание состояний:
// 0 - документ оформлен полностью
// 1 - документ не оформлен
// 2 - документ оформлен частично
// 3 - распоряжение не соответствует документу
// 4 - не используется.

// Заполняет переданный список значениями состояний накладных в РМ
//
// Параметры:
//  СписокВыбора	 - СписокЗначений - заполняемый список.
//  ТолькоАктивные	 - Булево - при установке в Истина, не заполняет состояния по которым не требуется оформление (0 и 4).
//
Процедура ЗаполнитьСостоянияНакладной(СписокВыбора, ТолькоАктивные = Ложь) Экспорт
	
	СписокВыбора.Очистить();
	Если ТолькоАктивные Тогда
		СписокВыбора.Добавить("1", НСтр("ru = 'Создать накладную'"),      Ложь, БиблиотекаКартинок.СоздатьНакладную);
		СписокВыбора.Добавить("2", НСтр("ru = 'Дооформить накладную'"),   Ложь, БиблиотекаКартинок.ДооформитьНакладную);
	Иначе
		СписокВыбора.Добавить("0", НСтр("ru = 'Все оформлено'"),          Ложь, БиблиотекаКартинок.ВыполненоУспешно);
		СписокВыбора.Добавить("1", НСтр("ru = 'Создать накладную'"),      Ложь, БиблиотекаКартинок.СоздатьНакладную);
		СписокВыбора.Добавить("2", НСтр("ru = 'Дооформить накладную'"),   Ложь, БиблиотекаКартинок.ДооформитьНакладную);
		СписокВыбора.Добавить("4", НСтр("ru = 'Не используются заказы'"), Ложь, БиблиотекаКартинок.ПустаяКартинка);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет переданный список значениями состояний ордеров в РМ
//
// Параметры:
//  СписокВыбора	 - СписокЗначений - заполняемый список.
//  ТолькоАктивные	 - Булево - при установке в Истина, не заполняет состояния по которым не требуется оформление (0 и 4).
//
Процедура ЗаполнитьСостоянияОрдера(СписокВыбора, ТолькоАктивные = Ложь) Экспорт
	
	СписокВыбора.Очистить();
	Если ТолькоАктивные Тогда
		СписокВыбора.Добавить("1", НСтр("ru = 'Не оформлены'"),               Ложь, БиблиотекаКартинок.СоздатьНакладную);
		СписокВыбора.Добавить("3", НСтр("ru = 'Не соответствуют накладным'"), Ложь, БиблиотекаКартинок.НесоответствиеОрдерНакладная);
	Иначе
		СписокВыбора.Добавить("0", НСтр("ru = 'Соответствуют накладным'"),    Ложь, БиблиотекаКартинок.ВыполненоУспешно);
		СписокВыбора.Добавить("1", НСтр("ru = 'Не оформлены'"),               Ложь, БиблиотекаКартинок.СоздатьНакладную);
		СписокВыбора.Добавить("3", НСтр("ru = 'Не соответствуют накладным'"), Ложь, БиблиотекаКартинок.НесоответствиеОрдерНакладная);
		СписокВыбора.Добавить("4", НСтр("ru = 'Не используются'"),            Ложь, БиблиотекаКартинок.ПустаяКартинка);
	КонецЕсли;
	
КонецПроцедуры

// Формирует документы по списку групп распоряжений.
//
// Параметры:
//  ГруппировкиРаспоряжений  - см. НакладныеКлиент.ДанныеДляОформленияПоЗаказам
//  СписокОшибок			 - Структура - список ошибок.
//  ПолеОшибки				 - Строка - значение, которое задается в свойстве Поле объекта СообщениеПользователю.
//
// Возвращаемое значение:
//  Массив из ДокументСсылка - содержит ссылки на созданные документы.
//
Функция СформироватьДокументыПоРаспоряжениям(ГруппировкиРаспоряжений, СписокОшибок, ПолеОшибки) Экспорт
	
	СозданныеДокументы = Новый Массив;
	
	Для каждого Группировка Из ГруппировкиРаспоряжений Цикл
		
		Если Группировка.Свойство("Обработчик") И ЗначениеЗаполнено(Группировка.Обработчик) Тогда
			МенеджерНакладной = ОбщегоНазначения.ОбщийМодуль(Группировка.Обработчик);
		Иначе
			МенеджерНакладной = Документы[Группировка.ИмяОформляемогоДокумента];
		КонецЕсли;
		
		Для каждого Распоряжения Из Группировка.МассивЗаказов Цикл
			
			ДокументОбъект = Документы[Группировка.ИмяОформляемогоДокумента].СоздатьДокумент();
			
			ПараметрыЗаполнения = МенеджерНакладной.ПараметрыЗаполненияДокумента();
			ЗаполнитьЗначенияСвойств(ПараметрыЗаполнения, Группировка.ПоляЗаполнения);
			РеквизитыШапки = МенеджерНакладной.ДанныеЗаполненияНакладной(Распоряжения, Группировка.ПоляЗаполнения);
			МенеджерНакладной.ИнициализироватьПараметрыЗаполнения(ПараметрыЗаполнения, РеквизитыШапки, Распоряжения);
			
			ДокументОбъект.Заполнить(ПараметрыЗаполнения);
			ДокументОбъект.Дата = ?(ЗначениеЗаполнено(ДокументОбъект.Дата), ДокументОбъект.Дата, ТекущаяДатаСеанса());
			
			Ошибка = Не ДокументОбъект.ПроверитьЗаполнение();
			Если Не Ошибка Тогда
				Попытка
					ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					ЗаписьЖурналаРегистрации(
						НСтр("ru = 'Ошибка при проведении документа'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
						УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					Ошибка = Истина;
				КонецПопытки;
			КонецЕсли;
			
			Если Ошибка Тогда
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				
				Сообщения = ПолучитьСообщенияПользователю(Истина);
				Для Каждого Сообщение Из Сообщения Цикл
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, ПолеОшибки, Сообщение.Текст, Неопределено);
				КонецЦикла;
				
				ТекстОшибки = НСтр("ru = 'Не удалось провести документ - %1'");
				ТекстОшибки = СтрШаблон(ТекстОшибки, ДокументОбъект.Ссылка);
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, ПолеОшибки, ТекстОшибки, Неопределено);
			КонецЕсли;
			
			ИсторияРаботыПользователя.Добавить(ДокументОбъект.Ссылка);
			СозданныеДокументы.Добавить(ДокументОбъект.Ссылка);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ОбеспечениеВДокументахСервер.ПроверитьЗапуститьФоновоеЗаданиеРаспределенияЗапасов();
	Возврат СозданныеДокументы;
	
КонецФункции

#КонецОбласти

#Область РасчетСостоянийОформления

// Функция-конструктор структуры, описывающей параметры для отбора распоряжений в функциях расчета состояний.
//
// Возвращаемое значение:
//  Структура - Структура с полями:
//  		Организация			- Булево - Добавление в запрос параметра отбора &Организация.
//  		Подразделение		- Булево - Добавление в запрос параметра отбора &Подразделение.
//  		Склад				- Булево - Добавление в запрос параметра отбора &Склад.
//  		ХозОперация			- Булево - Добавление в запрос параметра отбора &ХозОперация.
//  		Менеджер			- Булево - Добавление в запрос параметра отбора &Менеджер.
//
Функция ПараметрыОтбораРаспоряжений(Организация = Неопределено, Подразделение = Неопределено, Склад = Неопределено,
	ХозОперация = Неопределено, Менеджер = Неопределено) Экспорт
	
	ПараметрыОтбора = Новый Структура;
	
	ПараметрыОтбора.Вставить("Организация",   ЗначениеЗаполнено(Организация));
	ПараметрыОтбора.Вставить("Подразделение", ЗначениеЗаполнено(Подразделение));
	ПараметрыОтбора.Вставить("Склад",         ЗначениеЗаполнено(Склад));
	ПараметрыОтбора.Вставить("ХозОперация",   ЗначениеЗаполнено(ХозОперация));
	ПараметрыОтбора.Вставить("Менеджер",      ЗначениеЗаполнено(Менеджер));
	
	Возврат ПараметрыОтбора;
	
КонецФункции

// Функция возвращает текст запроса получения временной таблицы содержащей состояния оформления документов
// Имя временной таблицы: ВТ[ИмяТаблицыСостояний]
// Обязательные поля: Распоряжение, Состояние
// Дополнительные поля: Склад, Отправитель, Получатель, ХозОперация.
//
// Параметры:
//  ИмяТаблицыСостояний			- Строка - имя требуемой таблицы см. СостоянияПоХозОперациям.
//  ПараметрыОтбора				- см. ПараметрыОтбораРаспоряжений.
//  Распоряжения				- Массив - имена документов, по которым необходимо рассчитать состояния.
//  ТолькоНаличиеКОформлению	- Булево - если Истина, то вернуть временную таблицу с одной строкой
//                                         если есть остатки для оформления, либо пустую если остатков нет.
//  ПараметрыЗамены             - Неопределено, Структура - Если есть ключ "ПолеНоменклатура", тогда в текст запроса
//                                                          проставляется поле Номенклатура (Характеристика).
//
// Возвращаемое значение:
//  Строка - текст запроса
//
Функция ТекстЗапросаСостояний(
			ИмяТаблицыСостояний,
			ПараметрыОтбора,
			Распоряжения,
			ТолькоНаличиеКОформлению = Ложь,
			ПараметрыЗамены = Неопределено) Экспорт
	
	Если ИмяТаблицыСостояний = "СостоянияРасходныхОрдеров" Тогда
		Возврат ТекстЗапросаСостоянияРасходныхОрдеров(ПараметрыОтбора, Распоряжения, ТолькоНаличиеКОформлению, ПараметрыЗамены);
	ИначеЕсли ИмяТаблицыСостояний = "СостоянияПриходныхОрдеров" Тогда
		Возврат ТекстЗапросаСостоянияПриходныхОрдеров(ПараметрыОтбора, Распоряжения, ТолькоНаличиеКОформлению, ПараметрыЗамены);
	ИначеЕсли ИмяТаблицыСостояний = "СостоянияПоступлений" Тогда
		Возврат ТекстЗапросаСостоянияПоступлений(ПараметрыОтбора, Распоряжения, ТолькоНаличиеКОформлению);
	ИначеЕсли ИмяТаблицыСостояний = "СостоянияОтгрузок" Тогда
		Возврат ТекстЗапросаСостоянияОтгрузок(ПараметрыОтбора, Распоряжения, ТолькоНаличиеКОформлению);
	ИначеЕсли ИмяТаблицыСостояний = "СостоянияПеремещений" Тогда
		Возврат ТекстЗапросаСостоянияПеремещений(ПараметрыОтбора, ТолькоНаличиеКОформлению);
	ИначеЕсли ИмяТаблицыСостояний = "СостоянияСборок" Тогда
		Возврат ТекстЗапросаСостоянияСборок(ПараметрыОтбора, ТолькоНаличиеКОформлению);
	ИначеЕсли ИмяТаблицыСостояний = "СостоянияВнутреннихПотреблений" Тогда
		Возврат ТекстЗапросаСостоянияВнутреннихПотреблений(ПараметрыОтбора, Распоряжения, ТолькоНаличиеКОформлению);
	Иначе
		ВызватьИсключение НСтр("ru = 'Ошибка формирования текста запроса состояний: некорректное имя таблицы состояний.'");;
	КонецЕсли;
	
КонецФункции

Процедура ДобавитьПараметрыОтбораПоРееструДокументов(Запрос, ПараметрыОтбора) Экспорт
	
	Запрос.УстановитьПараметр("ОтбиратьПоХозОперации", ПараметрыОтбора.Свойство("ХозОперация") И ПараметрыОтбора.ХозОперация);
	Запрос.УстановитьПараметр("ОтбиратьПоОрганизации", ПараметрыОтбора.Свойство("Организация") И ПараметрыОтбора.Организация);
	Запрос.УстановитьПараметр("ОтбиратьПоПодразделению", ПараметрыОтбора.Свойство("Подразделение") И ПараметрыОтбора.Подразделение);
	Запрос.УстановитьПараметр("ОтбиратьПоСкладу", ПараметрыОтбора.Свойство("Склад") И ПараметрыОтбора.Склад);
	Запрос.УстановитьПараметр("ОтбиратьПоМенеджеру", ПараметрыОтбора.Свойство("Менеджер") И ПараметрыОтбора.Менеджер);
	
	ВсеПараметры = "ХозОперация,Организация,Подразделение,Склад,Менеджер";
	МассивПараметров = СтрРазделить(ВсеПараметры, ",");
	Для Каждого Элемент Из МассивПараметров Цикл
		Если Не Запрос.Параметры.Свойство(Элемент) Тогда
			Запрос.УстановитьПараметр(Элемент, Неопределено);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает структуру содержащую необходимые имена таблиц расчета состояний для переданных хоз. операций.
// 
// Параметры:
//  ХозОперации	- Массив - список хозяйственных операций.
//
// Возвращаемое значение:
//  Структура -
//  		Ключ	 - Строка - имя таблицы состояний.
//  		Значение - Массив - имена документов, по которым необходимо рассчитать состояния.
//
Функция СостоянияПоХозОперациям(ХозОперации) Экспорт
	
	Состояния = Новый Структура;
	
	Для каждого ХО Из ХозОперации Цикл
		Если ХО = Перечисления.ХозяйственныеОперации.ПередачаВЭксплуатацию Тогда
			ДобавитьСостояние(Состояния, "СостоянияВнутреннихПотреблений", Метаданные.Документы.ЗаказНаВнутреннееПотребление);
			ДобавитьСостояние(Состояния, "СостоянияРасходныхОрдеров", Метаданные.Документы.ЗаказНаВнутреннееПотребление);
			ДобавитьСостояние(Состояния, "СостоянияРасходныхОрдеров", Метаданные.Документы.ВнутреннееПотребление);
		ИначеЕсли ХО = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию Тогда
			ДобавитьСостояние(Состояния, "СостоянияВнутреннихПотреблений", Метаданные.Документы.ЗаказНаВнутреннееПотребление);
			ДобавитьСостояние(Состояния, "СостоянияРасходныхОрдеров", Метаданные.Документы.ЗаказНаВнутреннееПотребление);
			ДобавитьСостояние(Состояния, "СостоянияРасходныхОрдеров", Метаданные.Документы.ВнутреннееПотребление);
		ИначеЕсли ХО = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров
			Или ХО = Перечисления.ХозяйственныеОперации.ПеремещениеТоваровМеждуФилиалами Тогда
			ДобавитьСостояние(Состояния, "СостоянияПеремещений", Метаданные.Документы.ЗаказНаПеремещение);
			ДобавитьСостояние(Состояния, "СостоянияРасходныхОрдеров", Метаданные.Документы.ЗаказНаПеремещение);
			ДобавитьСостояние(Состояния, "СостоянияРасходныхОрдеров", Метаданные.Документы.ПеремещениеТоваров);
			ДобавитьСостояние(Состояния, "СостоянияПриходныхОрдеров", Метаданные.Документы.ЗаказНаПеремещение);
			ДобавитьСостояние(Состояния, "СостоянияПриходныхОрдеров", Метаданные.Документы.ПеремещениеТоваров);
		ИначеЕсли ХО = Перечисления.ХозяйственныеОперации.СборкаТоваров
			Или ХО = Перечисления.ХозяйственныеОперации.РазборкаТоваров Тогда
			ДобавитьСостояние(Состояния, "СостоянияСборок", Метаданные.Документы.ЗаказНаСборку);
			ДобавитьСостояние(Состояния, "СостоянияРасходныхОрдеров", Метаданные.Документы.ЗаказНаСборку);
			ДобавитьСостояние(Состояния, "СостоянияРасходныхОрдеров", Метаданные.Документы.СборкаТоваров);
			ДобавитьСостояние(Состояния, "СостоянияПриходныхОрдеров", Метаданные.Документы.ЗаказНаСборку);
			ДобавитьСостояние(Состояния, "СостоянияПриходныхОрдеров", Метаданные.Документы.СборкаТоваров);
		ИначеЕсли ХО = Перечисления.ХозяйственныеОперации.ПоступлениеИзПроизводства
			Или ХО = Перечисления.ХозяйственныеОперации.ОприходованиеЗаСчетРасходов
			Или ХО = Перечисления.ХозяйственныеОперации.ВозвратИзЭксплуатации Тогда
			ДобавитьСостояние(Состояния, "СостоянияПриходныхОрдеров", Метаданные.Документы.ПрочееОприходованиеТоваров);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Состояния;
	
КонецФункции

// Функция возвращает имена временных таблиц по наименованиям состояний.
// 
// Возвращаемое значение:
//  Структура -
//   Ключ - Строка - имя таблицы состояний.
//   Значение - Строка - Имя временной таблицы.
//
Функция ИменаВременныхТаблицПоСостояниям() Экспорт
	
	ИменаТаблиц = Новый Структура();
	ИменаТаблиц.Вставить("СостоянияВнутреннихПотреблений", "ВтСостоянияВнутреннихПотреблений");
	ИменаТаблиц.Вставить("СостоянияРасходныхОрдеров", "ВтСостоянияРасходныхОрдеров");
	ИменаТаблиц.Вставить("СостоянияПеремещений", "ВтСостоянияПеремещений");
	ИменаТаблиц.Вставить("СостоянияПриходныхОрдеров", "ВтСостоянияПриходныхОрдеров");
	ИменаТаблиц.Вставить("СостоянияСборок", "ВтСостоянияСборок");
	ИменаТаблиц.Вставить("СостоянияПередачВПроизводство", "ВтСостоянияПередачВПроизводство");
	ИменаТаблиц.Вставить("СостоянияОтгрузок", "ВтСостоянияОтгрузок");
	ИменаТаблиц.Вставить("СостоянияПоступлений", "ВтСостоянияПоступлений");
	ИменаТаблиц.Вставить("СостоянияПередачИзПроизводства", "ВтСостоянияПередачИзПроизводства");
	
	
	Возврат ИменаТаблиц;
	
КонецФункции

#КонецОбласти

#Область ПереоформлениеНакладных

// Формирует структуру параметров настройки общей формы "Переоформление накладных по распоряжениям".
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * ОсновнойТовар - Структура -:
// ** Ключ - Структура -:
// *** Номенклатура - СправочникСсылка.Номенклатура - 
// *** Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - 
// *** Склад - СправочникСсылка.Склады - 
// ** КартинкаШапки - Картинка - 
// ** КартинкаЗначений - Картинка - 
// * ЭтоДокументПоступлениеТоваров - Булево - 
// * НакладнаяНаПриемку - Булево - 
// * НакладнаяНаОтгрузку - Булево - 
// * Заголовок - Строка - 
// * ДанныеЗаполнения - Структура - 
// * ИмяФормыНакладной - Строка -  
Функция НастройкиФормыПереоформленияНакладных() Экспорт
	
	НастройкиФормы = Новый Структура();
	НастройкиФормы.Вставить("ИмяФормыНакладной");
	НастройкиФормы.Вставить("ДанныеЗаполнения");
	НастройкиФормы.Вставить("Заголовок");
	НастройкиФормы.Вставить("НакладнаяНаОтгрузку", Истина);
	НастройкиФормы.Вставить("НакладнаяНаПриемку",  Ложь);
	НастройкиФормы.Вставить("ЭтоДокументПоступлениеТоваров", Ложь);
	
	КлючТовара = Новый Структура("Номенклатура, Характеристика, Склад");
	ОсновнойТовар = Новый Структура("Ключ, КартинкаШапки, КартинкаЗначений",
		КлючТовара, БиблиотекаКартинок.Набор, БиблиотекаКартинок.Наборы);
	НастройкиФормы.Вставить("ОсновнойТовар", ОсновнойТовар);
	
	Возврат НастройкиФормы;
	
КонецФункции

// Переносит в табличную часть документа подобранные по заказам и ордерам строки.
//
// Параметры:
//  ДеревоСтрок - Массив - элементами массива являются строки для переноса с одинаковыми значениями ключевых полей.
//  ПоляПоиска - Строка - ключевые поля поиска, перечисленные через запятую.
//  ТабЧасть - ДанныеФормыКоллекция - таблица в которою необходимо перенести подобранные строки.
//  ПустыеПоляСвязиСЗаказом - Структура - значения полей "Код строки" и "Заказ..." в табличной части документа для
//                                        строки без заказа.
//  НеЗаполняемыеПоля - Строка - Поля через запятую, которые не нужно переносить в табличную часть из дерева строк.
//
// Возвращаемое значение:
//  Массив - добавленные строки.
//
Функция ЗаполнитьТоварыПодобраннымиИзЗаказа(ДеревоСтрок, ПоляПоиска, ТабЧасть, ПустыеПоляСвязиСЗаказом, НеЗаполняемыеПоля = "") Экспорт
	
	ДобавленныеСтроки = Новый Массив();
	СтруктураПоиска = Новый Структура(ПоляПоиска);
	Для Каждого ПодобранныеСтроки Из ДеревоСтрок Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ПодобранныеСтроки[0]);
		НайденныеСтроки = ТабЧасть.НайтиСтроки(СтруктураПоиска);
		
		// Новая строка - добавление строк.
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			Для Каждого СтрокаИсточник Из ПодобранныеСтроки Цикл
				
				Если СтрокаИсточник.Количество > 0 Тогда
					СтрокаПриемник = ТабЧасть.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник,, НеЗаполняемыеПоля);
					Если СтрокаИсточник.ОтвязатьОтЗаказа Тогда
						ЗаполнитьЗначенияСвойств(СтрокаПриемник, ПустыеПоляСвязиСЗаказом);
					КонецЕсли;
					ДобавленныеСтроки.Добавить(СтрокаПриемник);
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			Если НайденныеСтроки.Количество() > 1 Тогда
				
				Для Счетчик = 1 По НайденныеСтроки.Количество() - 1 Цикл
					ТабЧасть.Удалить(НайденныеСтроки[Счетчик]);
				КонецЦикла;
				
			КонецЕсли;
			
			Если ПодобранныеСтроки.Количество() = 1 Тогда
			
				СтрокаИсточник = ПодобранныеСтроки[0];
				СтрокаПриемник = НайденныеСтроки[0];
				Если СтрокаИсточник.Количество = 0 Тогда
					ТабЧасть.Удалить(СтрокаПриемник);
				Иначе
					ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник,, НеЗаполняемыеПоля);
					Если СтрокаИсточник.ОтвязатьОтЗаказа Тогда
						ЗаполнитьЗначенияСвойств(СтрокаПриемник, ПустыеПоляСвязиСЗаказом);
					КонецЕсли;
				КонецЕсли;
			
			Иначе
				
				СтрокаПриемник = НайденныеСтроки[0];
				СтрокаПриемник.Количество = 0;
				
				Для Каждого СтрокаИсточник Из ПодобранныеСтроки Цикл
				
					Если СтрокаИсточник.Количество > 0 Тогда
						ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник,, НеЗаполняемыеПоля);
						Если СтрокаИсточник.ОтвязатьОтЗаказа Тогда
							ЗаполнитьЗначенияСвойств(СтрокаПриемник, ПустыеПоляСвязиСЗаказом);
						КонецЕсли;
						СтрокаПриемник = ТабЧасть.Добавить();
						ДобавленныеСтроки.Добавить(СтрокаПриемник);
					КонецЕсли;
				
				КонецЦикла;
				
				Если СтрокаПриемник.Количество = 0 Тогда
					ТабЧасть.Удалить(СтрокаПриемник);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДобавленныеСтроки;
	
КонецФункции

Процедура ПерезаполнитьКоличествоПоОрдерам(ТабЧасть, Накладная, Распоряжения, Склад, РаспределятьПолностью = Истина) Экспорт
	
	Отбор = Новый Соответствие;
	ОбщегоНазначенияУТ.ДобавитьЭлементОтбораВКоллекцию(Отбор, "Склад", "&Склад");
	
	Запрос = Новый Запрос(РегистрыНакопления.ТоварыКПоступлению.ТекстЗапросаОсталосьОформитьПоОрдерам(,Отбор));
	Запрос.УстановитьПараметр("Распоряжения", Распоряжения);
	Запрос.УстановитьПараметр("Регистратор",  Накладная);
	Запрос.УстановитьПараметр("Склад",        Склад);
	
	ТаблицаОрдера = Запрос.Выполнить().Выгрузить();
	ТаблицаНакладная = ТабЧасть.Выгрузить(); // ТаблицаЗначений - 
	
	// Добавление количества ордеров.
	КолонкаТЗ = ТаблицаОрдера.Колонки.Количество; // КолонкаТаблицыЗначений - 
	КолонкаТЗ.Имя = "КоличествоВОрдере";
	НакладныеСервер.РаспределитьКоличествоИЗаполнить(ТаблицаОрдера, ТаблицаНакладная, "КоличествоВОрдере",
		"Номенклатура, Характеристика, Назначение", "ПО [Количество]", РаспределятьПолностью, "Серия");
	НакладныеСервер.ДополнитьТаблицу(ТаблицаОрдера, ТаблицаНакладная, "КоличествоВОрдере");
	
	КолонкаТЗ = ТаблицаНакладная.Колонки.Количество; // КолонкаТаблицыЗначений - 
	КолонкаТЗ.Имя = "КоличествоДоИзменения";
	КолонкаТЗ = ТаблицаНакладная.Колонки.КоличествоВОрдере; // КолонкаТаблицыЗначений - 
	КолонкаТЗ.Имя = "Количество";
	НакладныеСервер.УдалитьПустыеСтроки(ТаблицаНакладная, "Количество");
	
	ТабЧасть.Загрузить(ТаблицаНакладная);
	
КонецПроцедуры

#КонецОбласти

// Переносит серии указанные в отдельной таблице в строки другой таблицы.
// 
// Параметры:
//   Таблица      - ТаблицаЗначений - содержит строки без указания серий.
//   ИндексыСтрок - Массив           - массив индексов строк в таблице для обработки. Индексы должны быть по убыванию.
//   ТаблицаСерий - ТаблицаЗначений - таблица содержащая серии и количества этих серий.
//   КлючСерии    - Строка           - ключевые поля в таблице серий через запятую.
//
Процедура ПеренестиСерииИзТаблицыВСтроки(Таблица, ИндексыСтрок, ТаблицаСерий, КлючСерии) Экспорт
	
	ТаблицаСерий.Индексы.Добавить(КлючСерии);
	ПараметрыОтбораСерий = Новый Структура(КлючСерии);
	Для Каждого Индекс Из ИндексыСтрок Цикл
		
		СтрокаТовары = Таблица[Индекс];
		ЗаполнитьЗначенияСвойств(ПараметрыОтбораСерий, СтрокаТовары);
		НайденныеСтроки = ТаблицаСерий.НайтиСтроки(ПараметрыОтбораСерий);
		Для Каждого СтрокаСерии Из НайденныеСтроки Цикл
			
			КоличествоСписать = Мин(СтрокаСерии.Количество, СтрокаТовары.Количество);
			СтрокаСерии.Количество = СтрокаСерии.Количество - КоличествоСписать;
			
			Если КоличествоСписать > 0 Тогда
				
				СтрокаТовары.Серия = СтрокаСерии.Серия;
				
				Если КоличествоСписать < СтрокаТовары.Количество Тогда
					
					НоваяСтрока = Таблица.Вставить(Индекс);
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
					
					Доля = КоличествоСписать / СтрокаТовары.Количество;
					
					НоваяСтрока.Количество = КоличествоСписать;
					НоваяСтрока.КоличествоУпаковок = Доля * СтрокаТовары.КоличествоУпаковок;
					
					СтрокаТовары.Количество = СтрокаТовары.Количество - НоваяСтрока.Количество;
					СтрокаТовары.КоличествоУпаковок = СтрокаТовары.КоличествоУпаковок - НоваяСтрока.КоличествоУпаковок;
					
				Иначе
					
					Прервать;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Свернуть полученную таблицу.
	МассивКолонок = Новый Массив();
	Для Каждого Колонка Из Таблица.Колонки Цикл
		Если Колонка.Имя <> "Количество" И Колонка.Имя <> "КоличествоУпаковок" Тогда
			МассивКолонок.Добавить(Колонка.Имя);
		КонецЕсли;
	КонецЦикла;
	КолонкиСтрокой = СтрСоединить(МассивКолонок, ",");
	Таблица.Свернуть(КолонкиСтрокой, "Количество,КоличествоУпаковок");
	
КонецПроцедуры

// Настраивает поле Номенклатура (Характеристика) в тексте запроса,
// а так же, при необходимости условие соединение по полю Номенклатура (Характеристика) и индекс.
//
// Параметры:
//  ТекстЗапроса                             - Строка                  - Текст запроса
//  ПараметрыЗамены                          - Неопределено, Структура - Если есть ключ "ПолеНоменклатура",
//                                                                       тогда в текст запроса проставляется
//                                                                       поле Номенклатура (Характеристика)
//  ПолеНоменклатураКонструкция              - Строка                  - Конструкция поле номенклатура
//                                                                       которая подлежит замене
//  ИмяТаблицы                               - Строка                  - Имя таблицы
//  УсловиеСоединениеКонструкция             - Неопределено, Строка    - Конструкция условие соединение
//                                                                       которая подлежит замене
//  ИмяТаблицыСоединение                     - Неопределено, Строка    - Имя таблицы соединение
//  ПолеНоменклатураБезПсевдонимаКонструкция - Неопределено, Строка    - Конструкция поле номенклатура
//                                                                       без псевдонима которая подлежит замене
//
Процедура НастроитьПолеНоменклатуры(
			ТекстЗапроса,
			ПараметрыЗамены,
			ПолеНоменклатураКонструкция,
			ИмяТаблицы,
			УсловиеСоединениеКонструкция = Неопределено,
			ИмяТаблицыСоединение = Неопределено,
			ПолеНоменклатураБезПсевдонимаКонструкция = Неопределено) Экспорт
	
	ПолеНоменклатура			  = "";
	УсловиеСоединение			  = "ИСТИНА";
	ПолеНоменклатураБезПсевдонима = "";
	
	Если ЗначениеЗаполнено(ПараметрыЗамены) И ПараметрыЗамены.Свойство("ПолеНоменклатура") Тогда
		
		Если Прав(ПолеНоменклатураКонструкция, 1) = "," Тогда
			
			ПолеНоменклатура = "Таблица.Номенклатура   КАК Номенклатура,
							   |Таблица.Характеристика КАК Характеристика,";
		
		Иначе
			
			ПолеНоменклатура = "Таблица.Номенклатура   КАК Номенклатура,
							   |Таблица.Характеристика КАК Характеристика";
		
		КонецЕсли;
		
		ПолеНоменклатура = СтрЗаменить(ПолеНоменклатура, "Таблица", ИмяТаблицы);
	
		Если ЗначениеЗаполнено(УсловиеСоединениеКонструкция) Тогда
			
			УсловиеСоединение = "Таблица.Номенклатура = ТСоединение.Номенклатура
								|И Таблица.Характеристика = ТСоединение.Характеристика";
			
			УсловиеСоединение = СтрЗаменить(УсловиеСоединение, "Таблица", ИмяТаблицы);
			УсловиеСоединение = СтрЗаменить(УсловиеСоединение, "ТСоединение", ИмяТаблицыСоединение);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПолеНоменклатураБезПсевдонимаКонструкция) Тогда
			
			Если Прав(ПолеНоменклатураБезПсевдонимаКонструкция, 1) = "," Тогда
				
				ПолеНоменклатураБезПсевдонима = "Таблица.Номенклатура,
												|Таблица.Характеристика,";
				
			Иначе
				
				ПолеНоменклатураБезПсевдонима = "Таблица.Номенклатура,
												|Таблица.Характеристика";
				
			КонецЕсли;
			
			ПолеНоменклатураБезПсевдонима = СтрЗаменить(ПолеНоменклатураБезПсевдонима, "Таблица", ИмяТаблицы);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ПолеНоменклатураКонструкция, ПолеНоменклатура);
	
	Если ЗначениеЗаполнено(УсловиеСоединениеКонструкция) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, УсловиеСоединениеКонструкция, УсловиеСоединение);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПолеНоменклатураБезПсевдонимаКонструкция) Тогда
		ТекстЗапроса =
			СтрЗаменить(ТекстЗапроса, ПолеНоменклатураБезПсевдонимаКонструкция, ПолеНоменклатураБезПсевдонима);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ОформитьНакладныеПоОрдерам(ГруппировкиРаспоряжений, ПараметрыФормыСозданныхДокументов, ПолеОшибки) Экспорт
	
	СписокОшибок = Неопределено;
	ПараметрыСозданныхДокументов = Новый Структура("ИмяФормы, Параметры");
	
	Если ГруппировкиРаспоряжений.Количество() = 1 И ГруппировкиРаспоряжений[0].ЭтоНакладная Тогда
		
		ЗначенияЗаполнения = Новый Структура(
			"ЗаполнятьПоОрдеру, МассивЗаказов, ОтборПоТоварам", Истина, ГруппировкиРаспоряжений[0].МассивЗаказов);
		ГруппировкиРаспоряжений[0].ПоляЗаполнения.Свойство("ОтборПоТоварам", ЗначенияЗаполнения.ОтборПоТоварам);
		
		ПараметрыСозданныхДокументов.ИмяФормы = "Документ." + ГруппировкиРаспоряжений[0].ИмяОформляемогоДокумента + ".ФормаОбъекта";
		ПараметрыСозданныхДокументов.Параметры = Новый Структура("Ключ, ЗначенияЗаполнения",
			ГруппировкиРаспоряжений[0].МассивЗаказов[0], ЗначенияЗаполнения);
		
		Результат = Новый Структура("ПараметрыСозданныхДокументов, СписокОшибок",
			ПараметрыСозданныхДокументов, СписокОшибок);
		Возврат Результат;
		
	КонецЕсли;
	
	НакладныеСервер.СгруппироватьДокументыПоКлючевымПолямВКоллекции(ГруппировкиРаспоряжений, "МассивЗаказов", "КлючевыеПоляШапки");
	
	Если ГруппировкиРаспоряжений.Количество() = 1 И ГруппировкиРаспоряжений[0].МассивЗаказов.Количество() = 1 Тогда
		
		Если ГруппировкиРаспоряжений[0].Свойство("Обработчик")
		   И ЗначениеЗаполнено(ГруппировкиРаспоряжений[0].Обработчик) Тогда
			МенеджерНакладной = ОбщегоНазначения.ОбщийМодуль(ГруппировкиРаспоряжений[0].Обработчик);
		Иначе
			МенеджерНакладной = Документы[ГруппировкиРаспоряжений[0].ИмяОформляемогоДокумента];
		КонецЕсли;
		
		Если ГруппировкиРаспоряжений[0].ЕстьНакладные Тогда
			
			РеквизитыШапки = МенеджерНакладной.ДанныеЗаполненияНакладной(ГруппировкиРаспоряжений[0].МассивЗаказов[0], ГруппировкиРаспоряжений[0].ПоляЗаполнения);
			
			НастройкиФормы = НакладныеСервер.НастройкиФормыПереоформленияНакладных();
			НастройкиФормы.Заголовок = ГруппировкиРаспоряжений[0].ЗаголовокФормыПереоформления;
			НастройкиФормы.ИмяФормыНакладной = "Документ." + ГруппировкиРаспоряжений[0].ИмяОформляемогоДокумента + ".ФормаОбъекта";
			НастройкиФормы.НакладнаяНаПриемку = ГруппировкиРаспоряжений[0].НакладнаяНаПриемку;
			НастройкиФормы.НакладнаяНаОтгрузку = ГруппировкиРаспоряжений[0].НакладнаяНаОтгрузку;
			
			ПараметрыСозданныхДокументов.ИмяФормы = "ОбщаяФорма.ПереоформлениеНакладныхПоРаспоряжениям";
			ПараметрыСозданныхДокументов.Параметры = Новый Структура("НастройкиФормы, Заказы, РеквизитыШапки, Склад",
				НастройкиФормы, ГруппировкиРаспоряжений[0].МассивЗаказов[0], РеквизитыШапки, ГруппировкиРаспоряжений[0].Склад);
			
		Иначе
			
			ПараметрыЗаполнения = МенеджерНакладной.ПараметрыЗаполненияДокумента();
			ЗаполнитьЗначенияСвойств(ПараметрыЗаполнения, ГруппировкиРаспоряжений[0].ПоляЗаполнения);
			РеквизитыШапки = МенеджерНакладной.ДанныеЗаполненияНакладной(ГруппировкиРаспоряжений[0].МассивЗаказов[0], ГруппировкиРаспоряжений[0].ПоляЗаполнения);
			МенеджерНакладной.ИнициализироватьПараметрыЗаполнения(ПараметрыЗаполнения, РеквизитыШапки, ГруппировкиРаспоряжений[0].МассивЗаказов[0]);
			
			ПараметрыСозданныхДокументов.ИмяФормы = "Документ." + ГруппировкиРаспоряжений[0].ИмяОформляемогоДокумента + ".ФормаОбъекта";
			ПараметрыСозданныхДокументов.Параметры = Новый Структура("Основание", ПараметрыЗаполнения);
			
		КонецЕсли;
		
	Иначе
		
		СозданныеДокументы = НакладныеСервер.СформироватьДокументыПоРаспоряжениям(ГруппировкиРаспоряжений, СписокОшибок, ПолеОшибки);
		
		Владелец = Пользователи.АвторизованныйПользователь();
		УстановитьПривилегированныйРежим(Истина);
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Владелец, СозданныеДокументы, ПараметрыФормыСозданныхДокументов.КлючДанных);
		УстановитьПривилегированныйРежим(Ложь);
		
		ПараметрыСозданныхДокументов.ИмяФормы = "ОбщаяФорма.ФормаСозданныхДокументов";
		ПараметрыСозданныхДокументов.Параметры = ПараметрыФормыСозданныхДокументов;
		ПараметрыСозданныхДокументов.Вставить("КоличествоСозданныхДокументов", СозданныеДокументы.Количество());
		
	КонецЕсли;
	
	Результат = Новый Структура("ПараметрыСозданныхДокументов, СписокОшибок",
		ПараметрыСозданныхДокументов, СписокОшибок);
	Возврат Результат;
	
КонецФункции

Функция ОформитьНакладныеПоЗаказам(ГруппировкиРаспоряжений, ПараметрыФормыСозданныхДокументов, ПолеОшибки) Экспорт
	
	СписокОшибок = Неопределено;
	ПараметрыСозданныхДокументов = Новый Структура("ИмяФормы, Параметры");
	
	НакладныеСервер.СгруппироватьДокументыПоКлючевымПолямВКоллекции(ГруппировкиРаспоряжений, "МассивЗаказов", "КлючевыеПоляШапки");
	
	Если ГруппировкиРаспоряжений.Количество() = 1 И ГруппировкиРаспоряжений[0].МассивЗаказов.Количество() = 1 Тогда
		
		Если ГруппировкиРаспоряжений[0].Свойство("Обработчик")
			И ЗначениеЗаполнено(ГруппировкиРаспоряжений[0].Обработчик) Тогда
			МенеджерНакладной = ОбщегоНазначения.ОбщийМодуль(ГруппировкиРаспоряжений[0].Обработчик);
		Иначе
			МенеджерНакладной = Документы[ГруппировкиРаспоряжений[0].ИмяОформляемогоДокумента];
		КонецЕсли;
		
		ПараметрыЗаполнения = МенеджерНакладной.ПараметрыЗаполненияДокумента();
		ЗаполнитьЗначенияСвойств(ПараметрыЗаполнения, ГруппировкиРаспоряжений[0].ПоляЗаполнения);
		РеквизитыШапки = МенеджерНакладной.ДанныеЗаполненияНакладной(ГруппировкиРаспоряжений[0].МассивЗаказов[0], ГруппировкиРаспоряжений[0].ПоляЗаполнения);
		МенеджерНакладной.ИнициализироватьПараметрыЗаполнения(ПараметрыЗаполнения, РеквизитыШапки, ГруппировкиРаспоряжений[0].МассивЗаказов[0]);
		
		ПараметрыСозданныхДокументов.ИмяФормы = "Документ." + ГруппировкиРаспоряжений[0].ИмяОформляемогоДокумента + ".ФормаОбъекта";
		ПараметрыСозданныхДокументов.Параметры = Новый Структура("Основание", ПараметрыЗаполнения);
		
	Иначе
		
		СозданныеДокументы = НакладныеСервер.СформироватьДокументыПоРаспоряжениям(ГруппировкиРаспоряжений, СписокОшибок, ПолеОшибки);
		
		Владелец = Пользователи.АвторизованныйПользователь();
		УстановитьПривилегированныйРежим(Истина);
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Владелец, СозданныеДокументы, ПараметрыФормыСозданныхДокументов.КлючДанных);
		УстановитьПривилегированныйРежим(Ложь);
		
		ПараметрыСозданныхДокументов.ИмяФормы = "ОбщаяФорма.ФормаСозданныхДокументов";
		ПараметрыСозданныхДокументов.Параметры = ПараметрыФормыСозданныхДокументов;
		ПараметрыСозданныхДокументов.Вставить("КоличествоСозданныхДокументов", СозданныеДокументы.Количество());
		
	КонецЕсли;

	Результат = Новый Структура("ПараметрыСозданныхДокументов, СписокОшибок",
		ПараметрыСозданныхДокументов, СписокОшибок);
	Возврат Результат;
	
КонецФункции

Функция ОформитьАктОРасхождениях(Накладные, Заказы, ПараметрыФормыСозданныхДокументов, ПолеОшибки)
	
	СписокОшибок = Неопределено;
	
	ПараметрыСозданныхДокументов = Новый Структура("ИмяФормы, Параметры");
	
	Если ЗначениеЗаполнено(Заказы) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПеремещениеТоваров.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваров
			|ГДЕ
			|	ПеремещениеТоваров.ЗаказНаПеремещение В(&ЗаказыНаПеремещение)
			|	И ПеремещениеТоваров.Ссылка.Проведен";
		
		Запрос.УстановитьПараметр("ЗаказыНаПеремещение", Заказы);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Накладные, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
		
	КонецЕсли;
	
	НакладныеСервер.СгруппироватьДокументыПоКлючевымПолям(Накладные, Документы.АктОРасхожденияхПослеПеремещения.КлючевыеПоляШапкиРаспоряжения());
	
	Если Накладные.Количество() = 1 Тогда
		
		МенеджерНакладной = Документы.АктОРасхожденияхПослеПеремещения;
		
		ПараметрыЗаполнения = МенеджерНакладной.ПараметрыЗаполненияДокумента();
		РеквизитыШапки = МенеджерНакладной.ДанныеЗаполненияНакладной(Накладные[0]);
		МенеджерНакладной.ИнициализироватьПараметрыЗаполнения(ПараметрыЗаполнения, РеквизитыШапки, Накладные[0]);
		
		ПараметрыСозданныхДокументов.ИмяФормы = "Документ.АктОРасхожденияхПослеПеремещения.ФормаОбъекта";
		ПараметрыСозданныхДокументов.Параметры = Новый Структура("Основание", ПараметрыЗаполнения);
		
	Иначе
		
		Группировка = Новый Структура("ИмяОформляемогоДокумента, МассивЗаказов, ПоляЗаполнения",
			Метаданные.Документы.АктОРасхожденияхПослеПеремещения.Имя, Накладные, Новый Структура);
		
		ГруппировкиРаспоряжений = Новый Массив(1);
		ГруппировкиРаспоряжений[0] = Группировка;
		
		СозданныеДокументы = НакладныеСервер.СформироватьДокументыПоРаспоряжениям(ГруппировкиРаспоряжений, СписокОшибок, ПолеОшибки);
		
		Если Не ЗначениеЗаполнено(СозданныеДокументы) Тогда
			
			Результат = Новый Структура("ПараметрыСозданныхДокументов, СписокОшибок", Неопределено, СписокОшибок);
			Возврат Результат;
			
		КонецЕсли;
		
		Владелец = Пользователи.АвторизованныйПользователь();
		УстановитьПривилегированныйРежим(Истина);
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Владелец, СозданныеДокументы, ПараметрыФормыСозданныхДокументов.КлючДанных);
		УстановитьПривилегированныйРежим(Ложь);
		
		ПараметрыСозданныхДокументов.ИмяФормы = "ОбщаяФорма.ФормаСозданныхДокументов";
		ПараметрыСозданныхДокументов.Параметры = ПараметрыФормыСозданныхДокументов;
		ПараметрыСозданныхДокументов.Вставить("КоличествоСозданныхДокументов", СозданныеДокументы.Количество());
		
	КонецЕсли;
	
	Результат = Новый Структура("ПараметрыСозданныхДокументов, СписокОшибок",
		ПараметрыСозданныхДокументов, СписокОшибок);
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьСостояние(Состояния, Состояние, Документ) Экспорт
	
	Если Не ПравоДоступа("Чтение", Документ) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Состояния.Свойство(Состояние) Тогда
		Состояния.Вставить(Состояние, Новый Массив);
	КонецЕсли;
	
	Если Состояния[Состояние].Найти(Документ.ПолноеИмя()) = Неопределено Тогда
		Состояния[Состояние].Добавить(Документ.ПолноеИмя());
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполняет строку по варианту заполнения (по данным заказа или данным ордера).
//
// Параметры:
//  ТаблицаПриемник - СтрокаТаблицыЗначений, ДанныеФормыСтруктура - структура с обязательными колонками "Количество" и
//                                                                  "Количество упаковок".
//  ТаблицаИсточник - ТаблицаЗначений, ВыборкаИзРезультатаЗапроса - структура, содержащая данные для оформления по
//                                                                  заказам, либо по заказам и ордерам.
//  Количество - Число - Количество для заполнения.
//
Процедура ЗаполнитьСтрокуПоВарианту(Приемник, Источник, Количество)
	
	ЗаполнитьЗначенияСвойств(Приемник, Источник);
	
	Приемник.Количество = Количество;
	// Заполнение количества упаковок.
	Если ЗначениеЗаполнено(Источник.КоличествоВЗаказе) И Источник.КоличествоВЗаказе > 0
		И ЗначениеЗаполнено(Источник.УпаковкаЗаказаКоэффициент) Тогда
		
		Приемник.Упаковка = Источник.УпаковкаЗаказа;
		Приемник.КоличествоУпаковок = Приемник.Количество / Источник.УпаковкаЗаказаКоэффициент;
		
	ИначеЕсли ЗначениеЗаполнено(Источник.КоличествоВНакладной) И Источник.КоличествоВНакладной > 0
		И ЗначениеЗаполнено(Источник.УпаковкаНакладнойКоэффициент) Тогда
		
		Приемник.Упаковка = Источник.УпаковкаНакладной;
		Приемник.КоличествоУпаковок = Приемник.Количество / Источник.УпаковкаНакладнойКоэффициент;
		
	Иначе
		
		Приемник.КоличествоУпаковок = Приемник.Количество;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьВозможностьВводаНаОсновании(Документ, Статус, ЕстьОшибкиПроведен, ЕстьОшибкиСтатус, МассивДопустимыхСтатусов) Экспорт
	
	ТекстОшибки = "";
	Если ЕстьОшибкиПроведен Тогда
		
		ТекстОшибки = НСтр("ru = 'Документ не проведен. Ввод на основании непроведенного документа запрещен.'");
		
	ИначеЕсли ЕстьОшибкиСтатус Тогда
		
		СтрокаДопустимыхСтатусов = "";
		
		Для Каждого ДопустимыйСтатус Из МассивДопустимыхСтатусов Цикл
			СтрокаДопустимыхСтатусов = СтрокаДопустимыхСтатусов + """" + ДопустимыйСтатус + """, ";
		КонецЦикла;
		
		СтрокаДопустимыхСтатусов = Лев(СтрокаДопустимыхСтатусов, СтрДлина(СтрокаДопустимыхСтатусов)-2);
		
		Если МассивДопустимыхСтатусов.Количество() = 1 Тогда
			Если Статус <> Неопределено Тогда
				ТекстОшибки = НСтр("ru = 'Документ находится в статусе ""%Статус%"". Ввод на основании разрешен только в статусе %СтрокаДопустимыхСтатусов%.'");
			Иначе
				ТекстОшибки = НСтр("ru = 'Ввод на основании разрешен только в статусе %СтрокаДопустимыхСтатусов%.'");
			КонецЕсли;
		Иначе
			Если Статус <> Неопределено Тогда
				ТекстОшибки = НСтр("ru = 'Документ находится в статусе ""%Статус%"". Ввод на основании разрешен только в статусах %СтрокаДопустимыхСтатусов%.'");
			Иначе
				ТекстОшибки = НСтр("ru = 'Ввод на основании разрешен только в статусах %СтрокаДопустимыхСтатусов%.'");
			КонецЕсли;
		КонецЕсли;
		
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СтрокаДопустимыхСтатусов%", СтрокаДопустимыхСтатусов);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Статус%", Статус);
	
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции

Функция ИмяПоляНазначение(Таблица, Поля)
	
	СтруктураПолей = Новый Структура(Поля);
	Для Каждого Элемент Из СтруктураПолей Цикл
		
		Колонка = Таблица.Колонки.Найти(Элемент.Ключ);
		Если Колонка.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Назначения")) Тогда
			Возврат Элемент.Ключ;
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

Процедура ДобавитьКолонкуДвиженияПоСкладскимРегистрам(Таблица, Поля)
	
	ИмяПоляНазначение = ИмяПоляНазначение(Таблица, Поля);
	МассивНазначений = Таблица.ВыгрузитьКолонку(ИмяПоляНазначение);
	СкладскиеНазначения = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивНазначений, "ДвиженияПоСкладскимРегистрам");
	Таблица.Колонки.Добавить("ДвиженияПоСкладскимРегистрам", Новый ОписаниеТипов("Булево"));
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		
		СтрокаТаблицы.ДвиженияПоСкладскимРегистрам = ЗначениеЗаполнено(СтрокаТаблицы[ИмяПоляНазначение])
			И СкладскиеНазначения[СтрокаТаблицы[ИмяПоляНазначение]].ДвиженияПоСкладскимРегистрам;
		
	КонецЦикла;
	
КонецПроцедуры

// Переносит значение числового поля из таблицы источник в таблицу приемник. 
//
// Параметры:
//  ТаблицаИсточник			 - ТаблицаЗначений - 
//  ТаблицаПриемник			 - ТаблицаЗначений - 
//  ИмяПоляКоличество		 - Строка - Заполняемое поле. Если в таблице приемнике отсутствует - добавляется.
//  Измерения				 - Строка - Ключевые поля для поиска соответствий между строками таблиц
//  Ресурсы					 - Строка - Условия накладываемые на числовые поля строк таблицы приемника, вида:
//  									"НЕ [Количество], ПО [КоличествоВЗаказе], [КоличествоВЗаказе]"
//  									Где в квадратных скобках пишется имя числового поля в таблице приемнике, 
//  									и перед ним идентификатор действия:
//  									НЕ [ИмяПоля] - значение ИмяПоля должно быть равно нулю
//  									ПО [ИмяПоля] - в строке приемнике в поле *ИмяПоляКоличество* нельзя записать число большее,
//  									чем в ИмяПоля.
//  									[ИмяПоля] - значение ИмяПоля должно быть больше нуля
//  РаспределятьПолностью	 - Булево - Если в результате действия ограничения условия "ПО", в строке источнике остается нераспределенное
//  									количество - разрешаем списать это количество в последнюю сопоставленную строку приемника.
//  ЗаполняемыеПоля			 - Массив - Перечень полей, значения которых необходимо перенести из строк ТаблицаИсточник в строки ТаблицаПриемник.
//
Процедура РаспределитьКоличество(ТаблицаИсточник, ТаблицаПриемник, ИмяПоляКоличество, Измерения, Ресурсы, РаспределятьПолностью = Ложь, ЗаполняемыеПоля = Неопределено) Экспорт
	
	Если ТаблицаПриемник.Колонки.Найти(ИмяПоляКоличество) = Неопределено Тогда
		ТаблицаПриемник.Колонки.Добавить(ИмяПоляКоличество, Новый ОписаниеТипов("Число"));
	КонецЕсли;
	
	Если ЗаполняемыеПоля = Неопределено Тогда
		ЗаполняемыеПоля = Новый Массив;
	КонецЕсли;
	
	ПараметрыОтбораСтрок = ДействияСРесурсамиИзСтроки(Ресурсы);
	
	Отбор = Новый Структура(Измерения);
	
	Для Каждого СтрокаИсточник Из ТаблицаИсточник Цикл
		
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаИсточник);
		НайденныеСтроки = ТаблицаПриемник.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаПриемник Из НайденныеСтроки Цикл
			
			ПроверкаПройдена = СтрокаСоответствуетОтбору(СтрокаПриемник, ПараметрыОтбораСтрок);
			
			Если Не ПроверкаПройдена Тогда
				Продолжить;
			КонецЕсли;
			
			// Если массив НеБольше - пустой, тогда переносится как есть
			// иначе происходит доп. проверка на то, что результат заполнения поля не превысит значения проверяемых полей.
			Количество = СтрокаИсточник[ИмяПоляКоличество];
			
			КоличествоПолейПроверки = ПараметрыОтбораСтрок.НеБольше.Количество();
			Если КоличествоПолейПроверки > 0 Тогда
				МаксимальноеКоличество = СтрокаПриемник[ПараметрыОтбораСтрок.НеБольше[0]];
				Для н = 1 По КоличествоПолейПроверки - 1 Цикл
					ПолеПроверки = ПараметрыОтбораСтрок.НеБольше[КоличествоПолейПроверки - н - 1];
					МаксимальноеКоличество = Мин(СтрокаПриемник[ПолеПроверки], МаксимальноеКоличество);
				КонецЦикла;
				
				Превышение = СтрокаПриемник[ИмяПоляКоличество] + Количество - МаксимальноеКоличество;
				Если Превышение >= Количество Тогда
					Количество = 0;
				ИначеЕсли Превышение > 0 Тогда
					Количество = Количество - Превышение;
				КонецЕсли;
				
			КонецЕсли;
			
			Если Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаПриемник[ИмяПоляКоличество] = СтрокаПриемник[ИмяПоляКоличество] + Количество;
			СтрокаИсточник[ИмяПоляКоличество] = СтрокаИсточник[ИмяПоляКоличество] - Количество;
			
			Для Каждого ТекПоле Из ЗаполняемыеПоля Цикл
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаПриемник, ТекПоле)
					И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаИсточник, ТекПоле) Тогда
					СтрокаПриемник[ТекПоле] = СтрокаИсточник[ТекПоле];
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
		// Если было распределено не полное количество, записываем остаток в последнюю найденную строку.
		Если РаспределятьПолностью
			И СтрокаИсточник[ИмяПоляКоличество] > 0 
			И НайденныеСтроки.Количество() > 0 Тогда
			
			Количество = СтрокаИсточник[ИмяПоляКоличество];
			НайденнаяСтрока = НайденныеСтроки[НайденныеСтроки.Количество() - 1];
			
			Если Не СтрокаСоответствуетОтбору(НайденнаяСтрока, ПараметрыОтбораСтрок) Тогда
				Продолжить;
			КонецЕсли;
			
			НайденнаяСтрока[ИмяПоляКоличество] = НайденнаяСтрока[ИмяПоляКоличество] + Количество;
			СтрокаИсточник[ИмяПоляКоличество] = 0;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Вариант процедуры РаспределитьКоличество
// Переносит значение числового поля из таблицы источник в таблицу приемник.
// Заполняет произвольное поле ЗаполняемоеПоле, и если одной строке приемника соответствует несколько строк источника,
// отличающиеся лишь значением поля ЗаполняемоеПоле - дробит соответствующую строку приемника.
//
// Параметры:
//  ТаблицаИсточник			 - ТаблицаЗначений	 - 
//  ТаблицаПриемник			 - ТаблицаЗначений	 - 
//  ИмяПоляКоличество		 - Строка	 - Заполняемое поле. Если в таблице приемнике отсутствует - добавляется.
//  Измерения				 - Строка	 - Ключевые поля для поиска соответствий между строками таблиц
//  Ресурсы					 - Строка	 - Условия накладываемые на числовые поля строк таблицы приемника, вида:
//  									"НЕ [Количество], ПО [КоличествоВЗаказе], [КоличествоВЗаказе]"
//  									Где в квадратных скобках пишется имя числового поля в таблице приемнике,
//  									и перед ним идентификатор действия:
//  									НЕ [ИмяПоля] - значение ИмяПоля должно быть равно нулю
//  									ПО [ИмяПоля] - в строке приемнике в поле *ИмяПоляКоличество* нельзя записать число большее,
//  									чем в ИмяПоля.
//  									[ИмяПоля] - значение ИмяПоля должно быть больше нуля
//  РаспределятьПолностью	 - Булево	 - Если в результате действия ограничения условия "ПО", в строке источнике остается нераспределенное
//  			количество - разрешаем списать это количество в последнюю сопоставленную строку приемника
//  ЗаполняемыеПоля			 - Строка	 - Произвольные поля, значение которых нужно скопировать из строки источника в строку приемника.
//
Процедура РаспределитьКоличествоИЗаполнить(ТаблицаИсточник, ТаблицаПриемник, ИмяПоляКоличество, Измерения, Ресурсы, 
									РаспределятьПолностью = Ложь, ЗаполняемыеПоля = "") Экспорт
	
	Если ТаблицаПриемник.Колонки.Найти(ИмяПоляКоличество) = Неопределено Тогда
		ТаблицаПриемник.Колонки.Добавить(ИмяПоляКоличество, Новый ОписаниеТипов("Число"));
	КонецЕсли;
	
	ПараметрыОтбораСтрок = ДействияСРесурсамиИзСтроки(Ресурсы);
	
	Отбор = Новый Структура(Измерения);
	
	Для Каждого СтрокаИсточник Из ТаблицаИсточник Цикл
		
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаИсточник);
		НайденныеСтроки = ТаблицаПриемник.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаПриемник Из НайденныеСтроки Цикл
			
			ПроверкаПройдена = СтрокаСоответствуетОтбору(СтрокаПриемник, ПараметрыОтбораСтрок);
			
			Если Не ПроверкаПройдена Тогда
				Продолжить;
			КонецЕсли;
			
			// Если массив НеБольше - пустой, тогда переносится как есть
			// иначе происходит доп. проверка на то, что результат заполнения поля не превысит значения проверяемых полей.
			Количество = СтрокаИсточник[ИмяПоляКоличество];
			
			КоличествоПолейПроверки = ПараметрыОтбораСтрок.НеБольше.Количество();
			Если КоличествоПолейПроверки > 0 Тогда
				МаксимальноеКоличество = СтрокаПриемник[ПараметрыОтбораСтрок.НеБольше[0]];
				Для н = 1 По КоличествоПолейПроверки - 1 Цикл
					ПолеПроверки = ПараметрыОтбораСтрок.НеБольше[КоличествоПолейПроверки - н - 1];
					МаксимальноеКоличество = Мин(СтрокаПриемник[ПолеПроверки], МаксимальноеКоличество);
				КонецЦикла;
				
				Превышение = СтрокаПриемник[ИмяПоляКоличество] + Количество - МаксимальноеКоличество;
				Если Превышение >= Количество Тогда
					Количество = 0;
				ИначеЕсли Превышение > 0 Тогда
					Количество = Количество - Превышение;
				КонецЕсли;
				
			КонецЕсли;
			
			Если Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			МассивЗаполняемыхПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ЗаполняемыеПоля, ",");
			
			ЗаполняемыеПоляРавны = Истина;
			Для Каждого ЗаполняемоеПоле Из МассивЗаполняемыхПолей Цикл
				Если СтрокаПриемник[ЗаполняемоеПоле] <> СтрокаИсточник[ЗаполняемоеПоле] Тогда
					ЗаполняемыеПоляРавны = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ЗначениеЗаполнено(ЗаполняемыеПоля)
				И Не ЗаполняемыеПоляРавны
				И СтрокаПриемник[ИмяПоляКоличество] = 0 Тогда
				// Можно заполнять текущую строку Приемник
				ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник, ЗаполняемыеПоля);
				
				СтрокаПриемник[ИмяПоляКоличество] = СтрокаПриемник[ИмяПоляКоличество] + Количество;
				СтрокаИсточник[ИмяПоляКоличество] = СтрокаИсточник[ИмяПоляКоличество] - Количество;
				
			ИначеЕсли ЗначениеЗаполнено(ЗаполняемыеПоля)
				И Не ЗаполняемыеПоляРавны Тогда
				// В текущую строку Приемник уже записывались данные, нужно выделить новую строку
				НоваяСтрокаПриемник = ТаблицаПриемник.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаПриемник, СтрокаПриемник);
				ЗаполнитьЗначенияСвойств(НоваяСтрокаПриемник, СтрокаИсточник, ЗаполняемыеПоля);
				
				Если КоличествоПолейПроверки > 0 Тогда
					ПолеКонтроляКоличества = ПараметрыОтбораСтрок.НеБольше[0];
					НоваяСтрокаПриемник[ПолеКонтроляКоличества] = НоваяСтрокаПриемник[ПолеКонтроляКоличества] - НоваяСтрокаПриемник[ИмяПоляКоличество];
					СтрокаПриемник[ПолеКонтроляКоличества] = СтрокаПриемник[ИмяПоляКоличество];
				КонецЕсли;
				
				НоваяСтрокаПриемник[ИмяПоляКоличество] = Количество;
				СтрокаИсточник[ИмяПоляКоличество] = СтрокаИсточник[ИмяПоляКоличество] - Количество;
				
			Иначе
				СтрокаПриемник[ИмяПоляКоличество] = СтрокаПриемник[ИмяПоляКоличество] + Количество;
				СтрокаИсточник[ИмяПоляКоличество] = СтрокаИсточник[ИмяПоляКоличество] - Количество;
			КонецЕсли;
			
		КонецЦикла;
		
		// Если было распределено не полное количество, записываем остаток в последнюю найденную строку.
		Если РаспределятьПолностью
			И СтрокаИсточник[ИмяПоляКоличество] > 0 
			И НайденныеСтроки.Количество() > 0 Тогда
			
			Количество = СтрокаИсточник[ИмяПоляКоличество];
			НайденнаяСтрока = НайденныеСтроки[НайденныеСтроки.Количество() - 1];
			
			Если Не СтрокаСоответствуетОтбору(НайденнаяСтрока, ПараметрыОтбораСтрок) Тогда
				Продолжить;
			КонецЕсли;
			
			НайденнаяСтрока[ИмяПоляКоличество] = НайденнаяСтрока[ИмяПоляКоличество] + Количество;
			СтрокаИсточник[ИмяПоляКоличество] = 0;
			
			Если ЗначениеЗаполнено(ЗаполняемыеПоля) Тогда
				ЗаполнитьЗначенияСвойств(НайденнаяСтрока, СтрокаИсточник, ЗаполняемыеПоля);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Распределяет отклонение мерных товаров (если оно допустимо) из таблицы источник в таблицу приемник.
//
// Параметры:
//  ТаблицаИсточник			 - ТаблицаЗначений	 - 
//  ТаблицаПриемник			 - ТаблицаЗначений	 - 
//  ИмяПоляКоличество		 - Строка	 - Поле в таблице приемника, относительно которого будет рассчитываться допустимая величина отклонения
//  ИмяПоляОтклонение		 - Строка	 - Заполняемое поле. Количество, которое осталось распределить в таблице источнике
//  										и количество, которое уже было распределено в таблице приемника
//  Измерения				 - Строка	 - Ключевые поля для поиска соответствий между строками таблиц.
//
Процедура РаспределитьОтклонениеМерныхТоваров(ТаблицаИсточник, ТаблицаПриемник, ИмяПоляКоличество, ИмяПоляОтклонение, Измерения) Экспорт
	
	Если Не Константы.ИспользоватьДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	ДопустимоеОтклонение = Константы.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров.Получить() / 100;
	
	Если ДопустимоеОтклонение = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В (&СписокНоменклатуры)
		|	И Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (&МерныеТипыЕдиницИзмерений)";
	
	Запрос.УстановитьПараметр("СписокНоменклатуры", ТаблицаИсточник.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("МерныеТипыЕдиницИзмерений", Справочники.УпаковкиЕдиницыИзмерения.МерныеТипыЕдиницИзмерений());
	
	ИмяПоляМаксКоличество = ИмяПоляКоличество + "Макс";
	ТаблицаПриемник.Колонки.Добавить(ИмяПоляМаксКоличество, Новый ОписаниеТипов("Число"));
	ОтборНоменклатуры = Новый Структура("Номенклатура");
	ОтборИзмерений = Новый Структура(Измерения);
	СтрокиДляРаспределения = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОтборНоменклатуры.Номенклатура = Выборка.Ссылка;
		
		СтрокиИсточника = ТаблицаИсточник.НайтиСтроки(ОтборНоменклатуры);
		Для каждого СтрокаИсточник Из СтрокиИсточника Цикл
			
			Если СтрокаИсточник[ИмяПоляОтклонение] <= 0 Тогда
				Продолжить;
			КонецЕсли;
				
			БылоРаспределено = 0;
			ЗаполнитьЗначенияСвойств(ОтборИзмерений, СтрокаИсточник);
			СтрокиПриемника = ТаблицаПриемник.НайтиСтроки(ОтборИзмерений);
			
			Для каждого Строка Из СтрокиПриемника Цикл
				Строка[ИмяПоляМаксКоличество] = Строка[ИмяПоляКоличество] * (1 + ДопустимоеОтклонение);
				БылоРаспределено = БылоРаспределено + Строка[ИмяПоляОтклонение];
			КонецЦикла;
			
			Если БылоРаспределено * ДопустимоеОтклонение >= СтрокаИсточник[ИмяПоляОтклонение] Тогда
				СтрокиДляРаспределения.Добавить(СтрокаИсточник);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
		
	Условие = "[" + ИмяПоляКоличество + "], ПО [" + ИмяПоляМаксКоличество + "]";
	НакладныеСервер.РаспределитьКоличество(СтрокиДляРаспределения, ТаблицаПриемник, ИмяПоляОтклонение, Измерения, Условие, Ложь);
	
	ТаблицаПриемник.Колонки.Удалить(ИмяПоляМаксКоличество);
	
КонецПроцедуры

Функция СтрокаСоответствуетОтбору(СтрокаПриемник, ПараметрыОтбора)
	
	Для Каждого ПолеПроверки Из ПараметрыОтбора.РавноНулю Цикл
		// Значение поля проверки должно быть равно нулю
		Если СтрокаПриемник[ПолеПроверки] <> 0 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ПолеПроверки Из ПараметрыОтбора.БольшеНуля Цикл
		// Значение поля проверки должно быть больше нуля
		Если СтрокаПриемник[ПолеПроверки] <= 0 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ДействияСРесурсамиИзСтроки(Ресурсы)
	
	ДействияСРесурсами = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Ресурсы);
	
	РавноНулю           = Новый Массив();
	НеБольше            = Новый Массив();
	БольшеНуля          = Новый Массив();
	
	Для Каждого СтрокаРесурса Из ДействияСРесурсами Цикл
		
		СтрокаРесурсаОбработанная = НРег(СтрокаРесурса);
		СтрокаРесурсаОбработанная = СокрЛП(СтрокаРесурсаОбработанная);
		
		НачалоИмениПоля = СтрНайти(СтрокаРесурсаОбработанная, "[") + 1;
		КонецИмениПоля = СтрНайти(СтрокаРесурсаОбработанная, "]");
		ДлинаИмениПоля = КонецИмениПоля - НачалоИмениПоля;
		КомандаНе = "не";
		КомандаПо = "по";
		
		ИмяРесурса = Сред(СтрокаРесурсаОбработанная, НачалоИмениПоля, ДлинаИмениПоля);
		ИмяРесурса = СокрЛП(ИмяРесурса);
		
		Если СтрНачинаетсяС(СтрокаРесурсаОбработанная, КомандаНе) Тогда
			РавноНулю.Добавить(ИмяРесурса);
		ИначеЕсли СтрНачинаетсяС(СтрокаРесурсаОбработанная, КомандаПо) Тогда
			НеБольше.Добавить(ИмяРесурса);
		Иначе
			БольшеНуля.Добавить(ИмяРесурса);
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДействий = Новый Структура();
	СтруктураДействий.Вставить("РавноНулю",           РавноНулю);
	СтруктураДействий.Вставить("НеБольше",            НеБольше);
	СтруктураДействий.Вставить("БольшеНуля",          БольшеНуля);
	
	Возврат СтруктураДействий;
	
КонецФункции

// Добавляет строку источника в таблицу приемник если ИмяПоляКоличество больше нуля
//
// Параметры:
//  ТаблицаИсточник		 - ТаблицаЗначений - 
//  ТаблицаПриемник		 - ТаблицаЗначений - 
//  ИмяПоляКоличество	 - Строка - 
//
Процедура ДополнитьТаблицу(ТаблицаИсточник, ТаблицаПриемник, ИмяПоляКоличество) Экспорт
	
	Для Каждого СтрокаТаблицыИсточник Из ТаблицаИсточник Цикл
		Если СтрокаТаблицыИсточник[ИмяПоляКоличество] > 0 Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаПриемник.Добавить(), СтрокаТаблицыИсточник);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьПустыеСтроки(Таблица, ИмяПоляКоличество) Экспорт
	
	КоличествоИндексов = Таблица.Количество() - 1;
	Для Н = 0 По КоличествоИндексов Цикл
		
		Строка = Таблица[КоличествоИндексов - Н];
		Если Строка[ИмяПоляКоличество] = 0 Тогда
			Таблица.Удалить(Строка);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстРазделителяЗапросов() Экспорт

	Возврат
		"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";

КонецФункции

Процедура ЗаполнитьНазначенияВТабличнойЧасти(ТабличнаяЧасть, Назначение) Экспорт
	
	Если ТабличнаяЧасть.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПустоеНазначение = Справочники.Назначения.ПустаяСсылка();
	Если Не ЗначениеЗаполнено(Назначение) Тогда
		
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			
			Строка.Назначение = ПустоеНазначение;
			
		КонецЦикла;
		
	Иначе
		
		Таблица = Новый ТаблицаЗначений();
		Таблица.Колонки.Добавить("Индекс", Новый ОписаниеТипов("Число"));
		Таблица.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		Индекс = 0;
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.Индекс = Индекс;
			Индекс = Индекс + 1;
			
		КонецЦикла;
		
		Запрос = Новый Запрос();
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Таблица.Индекс       КАК Индекс,
			|	Таблица.Номенклатура КАК Номенклатура
			|ПОМЕСТИТЬ ВтТовары
			|ИЗ
			|	&Таблица КАК Таблица
			|;
			|
			|//////////////////////////////
			|ВЫБРАТЬ
			|	Таблица.Индекс КАК Индекс,
			|	
			|	ВЫБОР КОГДА СпрНоменклатура.Ссылка ЕСТЬ NULL ТОГДА
			|				ЛОЖЬ
			|			ИНАЧЕ
			|				ИСТИНА
			|		КОНЕЦ КАК ЗаполнятьНазначение
			|ИЗ
			|	ВтТовары КАК Таблица
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
			|		ПО СпрНоменклатура.Ссылка = Таблица.Номенклатура
			|			И СпрНоменклатура.ТипНоменклатуры В(
			|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
			|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))";
			
		Запрос.УстановитьПараметр("Таблица", Таблица);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.ЗаполнятьНазначение Тогда
				
				ТабличнаяЧасть[Выборка.Индекс].Назначение = Назначение;
				
			Иначе
				
				ТабличнаяЧасть[Выборка.Индекс].Назначение = ПустоеНазначение;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаГруппировки(
			КлючевыеПоля, Ссылки, ИмяВременнойТаблицы, ИмяПараметра, КлючевыеПоляАдаптированные = Неопределено)
	
	ТипыДокументов = Новый Соответствие();
	ИменаДокументов = Новый Массив();
	Для Каждого Элемент Из Ссылки Цикл
		ТипДокумента = ТипЗнч(Элемент);
		Если ТипыДокументов.Получить(ТипДокумента) = Неопределено Тогда
			ТипыДокументов.Вставить(ТипДокумента, Истина);
			ИменаДокументов.Добавить(Элемент.Метаданные().ПолноеИмя());
		КонецЕсли;
	КонецЦикла;
	ЭтоПервыйЗапросВПакете = Истина;
	ТекстЗамены = "ПОМЕСТИТЬ ПодстановкаИмяВременнойТаблицы";
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Ссылка,
		|	ПодстановкаАдаптированныеКлючевыеПоля
		|ПОМЕСТИТЬ ПодстановкаИмяВременнойТаблицы
		|ИЗ
		|	ПодстановкаИмяИсточника
		|ГДЕ
		|	Ссылка В (&ПодстановкаИмяПараметра)";
	Тексты = Новый Массив();
	Для Каждого ИмяИсточника Из ИменаДокументов Цикл
		Текст = ТекстЗапроса;
		Если Не ЭтоПервыйЗапросВПакете Тогда
			Текст = СтрЗаменить(Текст, ТекстЗамены, "");
		КонецЕсли;
		Текст = СтрЗаменить(Текст, "ПодстановкаИмяИсточника", ИмяИсточника);
		Тексты.Добавить(Текст);
		ЭтоПервыйЗапросВПакете = Ложь;
	КонецЦикла;
	ТекстЗапроса = СтрСоединить(Тексты, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	Тексты = Новый Массив();
	Тексты.Добавить(ТекстЗапроса);
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПодстановкаКлючевыеПоля
		|ИЗ
		|	ПодстановкаИмяВременнойТаблицы";
	Тексты.Добавить(ТекстЗапроса);
	ТекстЗапроса = СтрСоединить(Тексты, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	ПодстановкаАдаптированныеКлючевыеПоля = ?(ЗначениеЗаполнено(КлючевыеПоляАдаптированные), КлючевыеПоляАдаптированные, КлючевыеПоля);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПодстановкаИмяВременнойТаблицы", ИмяВременнойТаблицы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПодстановкаИмяПараметра", ИмяПараметра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПодстановкаКлючевыеПоля", КлючевыеПоля);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПодстановкаАдаптированныеКлючевыеПоля", ПодстановкаАдаптированныеКлючевыеПоля);
	Возврат ТекстЗапроса;
	
КонецФункции

#Область РасчетСостоянийОформленияСлужебная

Функция ТекстЗапросаСостоянияРасходныхОрдеров(ПараметрыОтбора, ТипыРаспоряжений, ТолькоНаличиеКОформлению, ПараметрыЗамены = Неопределено)
	
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ТоварыКОтгрузке) Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 0
		|	NULL КАК КОформлению,
		|	NULL КАК Распоряжение,
		|	&Поля КАК Поля,
		|	NULL КАК Склад,
		|	NULL КАК Получатель,
		|	NULL КАК Состояние
		|ПОМЕСТИТЬ ВТСостоянияРасходныхОрдеров";
		
		ПолеНоменклатура = "";
		Если ЗначениеЗаполнено(ПараметрыЗамены) И ПараметрыЗамены.Свойство("ПолеНоменклатура") Тогда
			ПолеНоменклатура = "NULL КАК Номенклатура,
							   |NULL КАК Характеристика,"
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Поля КАК Поля,", ПолеНоменклатура);
		
		Возврат ТекстЗапроса;
		
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.ДокументОтгрузки КАК ДокументОтгрузки,
	|	&ВтЕстьРаспоряженияПоля КАК ВтЕстьРаспоряженияПоля,
	|	ВложенныйЗапрос.Склад            КАК Склад,
	|	ВложенныйЗапрос.Получатель       КАК Получатель
	|ПОМЕСТИТЬ ВтЕстьРаспоряжения
	|ИЗ
	|	(ВЫБРАТЬ
	|		Остатки.Склад            КАК Склад,
	|		Остатки.Получатель       КАК Получатель,
	|		Остатки.ДокументОтгрузки КАК ДокументОтгрузки,
	|		Остатки.Номенклатура     КАК Номенклатура,
	|		Остатки.Характеристика   КАК Характеристика,
	|		Остатки.Назначение       КАК Назначение,
	|		Остатки.Серия            КАК Серия
	|	ИЗ
	|		РегистрНакопления.ТоварыКОтгрузке.Остатки(, &УсловиеОтбораОстатков) КАК Остатки
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СпрСклады
	|			ПО Остатки.Склад = СпрСклады.Ссылка
	|				И (СпрСклады.ИспользоватьОрдернуюСхемуПриОтгрузке)
	|				И (СпрСклады.ДатаНачалаОрдернойСхемыПриОтгрузке <= &НачалоТекущегоДня)
	|	ГДЕ
	|		НЕ СпрСклады.Ссылка ЕСТЬ NULL
	|		И Остатки.КОтгрузкеОстаток - Остатки.СобраноОстаток <> Остатки.КОформлениюОстаток
	|		И ИСТИНА В(
	|			ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|			ГДЕ
	|				РеестрДокументов.Ссылка = Остатки.ДокументОтгрузки
	|				И (НЕ &ОтбиратьПоХозОперации ИЛИ РеестрДокументов.ХозяйственнаяОперация В (&ХозОперация))
	|				И (НЕ &ОтбиратьПоОрганизации ИЛИ РеестрДокументов.Организация В (&Организация))
	|				И (НЕ &ОтбиратьПоПодразделению ИЛИ РеестрДокументов.Подразделение В (&Подразделение))
	|				И (НЕ &ОтбиратьПоМенеджеру ИЛИ РеестрДокументов.Ответственный В (&Менеджер))
	|			)
	|	) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Распоряжения.ДокументОтгрузки КАК ДокументОтгрузки,
	|	&ВтЕстьОрдераПоля КАК ВтЕстьОрдераПоля,
	|	Распоряжения.Склад            КАК Склад,
	|	Распоряжения.Получатель       КАК Получатель
	|ПОМЕСТИТЬ ВтЕстьОрдера
	|ИЗ
	|	ВтЕстьРаспоряжения КАК Распоряжения
	|ГДЕ
	|	ИСТИНА В
	|			(ВЫБРАТЬ
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.ТоварыКОтгрузке КАК ТоварыКОтгрузке
	|			ГДЕ
	|				ТоварыКОтгрузке.Активность
	|				И ТоварыКОтгрузке.ДокументОтгрузки = Распоряжения.ДокументОтгрузки
	|				И &ВтЕстьОрдераУсловие
	|				И ТоварыКОтгрузке.Склад = Распоряжения.Склад
	|				И ТоварыКОтгрузке.Получатель = Распоряжения.Получатель
	|				И ТоварыКОтгрузке.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ИМЕЮЩИЕ
	|				СУММА(ТоварыКОтгрузке.Собрано) > 0
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.ТоварыКОтгрузке КАК ТоварыКОтгрузке
	|			ГДЕ
	|				ТоварыКОтгрузке.Активность
	|				И ТоварыКОтгрузке.ДокументОтгрузки = Распоряжения.ДокументОтгрузки
	|				И &ВтЕстьОрдераУсловие
	|				И ТоварыКОтгрузке.Склад = Распоряжения.Склад
	|				И ТоварыКОтгрузке.Получатель = Распоряжения.Получатель
	|				И ТоварыКОтгрузке.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				
	|			ИМЕЮЩИЕ
	|				СУММА(ТоварыКОтгрузке.КОтгрузке) > 0
	|			)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОтгрузки,
	|	ВтЕстьОрдераПоля,
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтЕстьРаспоряжения.ДокументОтгрузки КАК Распоряжение,
	|	&ВТСостоянияРасходныхОрдеровПоля КАК ВТСостоянияРасходныхОрдеровПоля,
	|	ВтЕстьРаспоряжения.Склад            КАК Склад,
	|	ВтЕстьРаспоряжения.Получатель       КАК Получатель,
	|	ВЫБОР
	|		КОГДА ВтЕстьОрдера.Склад ЕСТЬ NULL
	|			ТОГДА 1
	|		ИНАЧЕ 3
	|	КОНЕЦ                               КАК Состояние
	|ПОМЕСТИТЬ ВТСостоянияРасходныхОрдеров
	|ИЗ
	|	ВтЕстьРаспоряжения КАК ВтЕстьРаспоряжения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтЕстьОрдера КАК ВтЕстьОрдера
	|		ПО ВтЕстьРаспоряжения.ДокументОтгрузки = ВтЕстьОрдера.ДокументОтгрузки
	|			И &ВТСостоянияРасходныхОрдеровУсловие
	|			И ВтЕстьРаспоряжения.Склад = ВтЕстьОрдера.Склад
	|			И ВтЕстьРаспоряжения.Получатель = ВтЕстьОрдера.Получатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтЕстьРаспоряжения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтЕстьОрдера";
	
	НастроитьПолеНоменклатуры(
		ТекстЗапроса, ПараметрыЗамены, "&ВтЕстьРаспоряженияПоля КАК ВтЕстьРаспоряженияПоля,", "ВложенныйЗапрос");
	
	НастроитьПолеНоменклатуры(
		ТекстЗапроса,
		ПараметрыЗамены,
		"&ВтЕстьОрдераПоля КАК ВтЕстьОрдераПоля,",
		"Распоряжения",
		"&ВтЕстьОрдераУсловие",
		"ТоварыКОтгрузке",
		"ВтЕстьОрдераПоля,");
	
	НастроитьПолеНоменклатуры(
		ТекстЗапроса,
		ПараметрыЗамены,
		"&ВТСостоянияРасходныхОрдеровПоля КАК ВТСостоянияРасходныхОрдеровПоля,",
		"ВтЕстьРаспоряжения",
		"&ВТСостоянияРасходныхОрдеровУсловие",
		"ВтЕстьОрдера");
	
	ДополнитьТекстОтборомПоОстаткам(ТекстЗапроса, "ДокументОтгрузки", ТипыРаспоряжений, ПараметрыОтбора.Склад, "", Ложь, Истина);
	ПреобразоватьТекстЗапросаВНаличиеКОформлению(ТекстЗапроса, "ВТСостоянияРасходныхОрдеров", ТолькоНаличиеКОформлению);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСостоянияПриходныхОрдеров(ПараметрыОтбора, ТипыРаспоряжений, ТолькоНаличиеКОформлению, ПараметрыЗамены = Неопределено)
	
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ТоварыКПоступлению) Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 0
		|	NULL КАК КОформлению,
		|	NULL КАК Распоряжение,
		|	&Поля КАК Поля,
		|	NULL КАК Склад,
		|	NULL КАК Отправитель,
		|	NULL КАК ХозОперация,
		|	NULL КАК Состояние
		|ПОМЕСТИТЬ ВТСостоянияПриходныхОрдеров";
		
		ПолеНоменклатура = "";
		Если ЗначениеЗаполнено(ПараметрыЗамены) И ПараметрыЗамены.Свойство("ПолеНоменклатура") Тогда
			ПолеНоменклатура = "NULL КАК Номенклатура,
							   |NULL КАК Характеристика,"
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Поля КАК Поля,", ПолеНоменклатура);
		
		Возврат ТекстЗапроса;
		
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.ДокументПоступления   КАК ДокументПоступления,
	|	&ВтЕстьРаспоряженияПоля КАК ВтЕстьРаспоряженияПоля,
	|	ВложенныйЗапрос.Склад                 КАК Склад,
	|	ВложенныйЗапрос.Отправитель           КАК Отправитель,
	|	ВложенныйЗапрос.ХозяйственнаяОперация КАК ХозяйственнаяОперация
	|ПОМЕСТИТЬ ВтЕстьРаспоряжения
	|ИЗ
	|	(ВЫБРАТЬ
	|		Остатки.Склад КАК Склад,
	|		Остатки.ДокументПоступления   КАК ДокументПоступления,
	|		Остатки.Номенклатура          КАК Номенклатура,
	|		Остатки.Характеристика        КАК Характеристика,
	|		Остатки.Назначение            КАК Назначение,
	|		Остатки.Серия                 КАК Серия,
	|		Остатки.Отправитель           КАК Отправитель,
	|		Остатки.ХозяйственнаяОперация КАК ХозяйственнаяОперация
	|	ИЗ
	|		РегистрНакопления.ТоварыКПоступлению.Остатки(, &УсловиеОтбораОстатков) КАК Остатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СпрСклады
	|		ПО Остатки.Склад = СпрСклады.Ссылка
	|			И (СпрСклады.ИспользоватьОрдернуюСхемуПриПоступлении)
	|			И (СпрСклады.ДатаНачалаОрдернойСхемыПриПоступлении <= &НачалоТекущегоДня)
	|	ГДЕ
	|		НЕ СпрСклады.Ссылка ЕСТЬ NULL
	|		И Остатки.КОформлениюПоступленийПоОрдерамОстаток <> 0
	|		И ИСТИНА В(
	|			ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|			ГДЕ
	|				РеестрДокументов.Ссылка = Остатки.ДокументПоступления
	|				И (НЕ &ОтбиратьПоОрганизации ИЛИ РеестрДокументов.Организация В (&Организация))
	|				И (НЕ &ОтбиратьПоПодразделению ИЛИ РеестрДокументов.Подразделение В (&Подразделение))
	|				И (НЕ &ОтбиратьПоМенеджеру ИЛИ РеестрДокументов.Ответственный В (&Менеджер))
	|			)
	|	) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Распоряжения.ДокументПоступления   КАК ДокументПоступления,
	|	&ВтЕстьОрдераПоля КАК ВтЕстьОрдераПоля,
	|	Распоряжения.Склад                 КАК Склад,
	|	Распоряжения.Отправитель           КАК Отправитель,
	|	Распоряжения.ХозяйственнаяОперация КАК ХозяйственнаяОперация
	|ПОМЕСТИТЬ ВтЕстьОрдера
	|ИЗ
	|	ВтЕстьРаспоряжения КАК Распоряжения
	|ГДЕ
	|	ИСТИНА В
	|			(ВЫБРАТЬ
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.ТоварыКПоступлению КАК ТоварыКОформлениюПоступления
	|			ГДЕ
	|				ТоварыКОформлениюПоступления.Активность
	|				И ТоварыКОформлениюПоступления.ДокументПоступления = Распоряжения.ДокументПоступления
	|				И &ВтЕстьОрдераУсловие
	|				И ТоварыКОформлениюПоступления.Склад = Распоряжения.Склад
	|				И ТоварыКОформлениюПоступления.Отправитель = Распоряжения.Отправитель
	|				И ТоварыКОформлениюПоступления.ХозяйственнаяОперация = Распоряжения.ХозяйственнаяОперация
	|				И ТоварыКОформлениюПоступления.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ИМЕЮЩИЕ
	|				СУММА(ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерам) > 0)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументПоступления,
	|	ВтЕстьОрдераПоля,
	|	Склад,
	|	ХозяйственнаяОперация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтЕстьРаспоряжения.ДокументПоступления   КАК Распоряжение,
	|	&ВТСостоянияПриходныхОрдеровПоля КАК ВТСостоянияПриходныхОрдеровПоля,
	|	ВтЕстьРаспоряжения.Склад                 КАК Склад,
	|	ВтЕстьРаспоряжения.Отправитель           КАК Отправитель,
	|	ВтЕстьРаспоряжения.ХозяйственнаяОперация КАК ХозОперация,
	|	ВЫБОР
	|		КОГДА ВтЕстьОрдера.Склад ЕСТЬ NULL
	|			ТОГДА 1
	|		ИНАЧЕ 3
	|	КОНЕЦ                                  КАК Состояние
	|ПОМЕСТИТЬ ВТСостоянияПриходныхОрдеров
	|ИЗ
	|	ВтЕстьРаспоряжения КАК ВтЕстьРаспоряжения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтЕстьОрдера КАК ВтЕстьОрдера
	|		ПО ВтЕстьРаспоряжения.ДокументПоступления = ВтЕстьОрдера.ДокументПоступления
	|			И &ВТСостоянияПриходныхОрдеровУсловие
	|			И ВтЕстьРаспоряжения.Склад = ВтЕстьОрдера.Склад
	|			И ВтЕстьРаспоряжения.Отправитель = ВтЕстьОрдера.Отправитель
	|			И ВтЕстьРаспоряжения.ХозяйственнаяОперация = ВтЕстьОрдера.ХозяйственнаяОперация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтЕстьРаспоряжения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтЕстьОрдера";
	
	НастроитьПолеНоменклатуры(
		ТекстЗапроса, ПараметрыЗамены, "&ВтЕстьРаспоряженияПоля КАК ВтЕстьРаспоряженияПоля,", "ВложенныйЗапрос");
	
	НастроитьПолеНоменклатуры(
		ТекстЗапроса,
		ПараметрыЗамены,
		"&ВтЕстьОрдераПоля КАК ВтЕстьОрдераПоля,",
		"Распоряжения",
		"&ВтЕстьОрдераУсловие",
		"ТоварыКОформлениюПоступления",
		"ВтЕстьОрдераПоля,");
	
	НастроитьПолеНоменклатуры(
		ТекстЗапроса,
		ПараметрыЗамены,
		"&ВТСостоянияПриходныхОрдеровПоля КАК ВТСостоянияПриходныхОрдеровПоля,",
		"ВтЕстьРаспоряжения",
		"&ВТСостоянияПриходныхОрдеровУсловие",
		"ВтЕстьОрдера");
	
	ДопУсловие = ?(ПараметрыОтбора.ХозОперация, "ХозяйственнаяОперация В (&ХозОперация)", "");
	ДополнитьТекстОтборомПоОстаткам(ТекстЗапроса, "ДокументПоступления", ТипыРаспоряжений, ПараметрыОтбора.Склад, ДопУсловие, Истина);
	ПреобразоватьТекстЗапросаВНаличиеКОформлению(ТекстЗапроса, "ВТСостоянияПриходныхОрдеров", ТолькоНаличиеКОформлению);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСостоянияПоступлений(ПараметрыОтбора, ТипыРаспоряжений, ТолькоНаличиеКОформлению)
	
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ЗаказыПоставщикам) Тогда
		
		Возврат
			"ВЫБРАТЬ ПЕРВЫЕ 0
			|	NULL КАК КОформлению,
			|	NULL КАК Распоряжение,
			|	NULL КАК Склад,
			|	NULL КАК Состояние
			|ПОМЕСТИТЬ ВтСостоянияПоступлений";
		
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.ЗаказПоставщику КАК ЗаказПоставщику,
	|	ВложенныйЗапрос.Склад           КАК Склад
	|ПОМЕСТИТЬ ВтЕстьРаспоряжения
	|ИЗ
	|	(ВЫБРАТЬ
	|		Остатки.ЗаказПоставщику КАК ЗаказПоставщику,
	|		Остатки.Номенклатура КАК Номенклатура,
	|		Остатки.Характеристика КАК Характеристика,
	|		Остатки.КодСтроки КАК КодСтроки,
	|		Остатки.Склад КАК Склад
	|	ИЗ
	|		РегистрНакопления.ЗаказыПоставщикам.Остатки(, &УсловиеОтбораОстатков) КАК Остатки
	|	ГДЕ
	|		Остатки.КОформлениюОстаток <> 0
	|		И НЕ Остатки.ЗаказПоставщику.Ссылка ЕСТЬ NULL // для отработки RLS
	|		И НЕ Остатки.Склад.Ссылка ЕСТЬ NULL
	|		И ИСТИНА В(
	|			ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|			ГДЕ
	|				РеестрДокументов.Ссылка = Остатки.ЗаказПоставщику
	|				И (НЕ &ОтбиратьПоХозОперации ИЛИ РеестрДокументов.ХозяйственнаяОперация В (&ХозОперация))
	|				И (НЕ &ОтбиратьПоОрганизации ИЛИ РеестрДокументов.Организация В (&Организация))
	|				И (НЕ &ОтбиратьПоПодразделению ИЛИ РеестрДокументов.Подразделение В (&Подразделение))
	|				И (НЕ &ОтбиратьПоМенеджеру ИЛИ РеестрДокументов.Ответственный В (&Менеджер))
	|			)
	|	) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Распоряжения.ЗаказПоставщику КАК ЗаказПоставщику,
	|	Распоряжения.Склад           КАК Склад
	|ПОМЕСТИТЬ ВтЕстьНакладные
	|ИЗ
	|	ВтЕстьРаспоряжения КАК Распоряжения
	|ГДЕ
	|	ИСТИНА В
	|			(ВЫБРАТЬ
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.ЗаказыПоставщикам КАК ЗаказыПоставщикам
	|			ГДЕ
	|				ЗаказыПоставщикам.Активность
	|				И ЗаказыПоставщикам.ЗаказПоставщику = Распоряжения.ЗаказПоставщику
	|				И ЗаказыПоставщикам.Склад = Распоряжения.Склад
	|				И ЗаказыПоставщикам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ИМЕЮЩИЕ
	|				СУММА(ЗаказыПоставщикам.КОформлению) > 0)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗаказПоставщику,
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтЕстьРаспоряжения.ЗаказПоставщику КАК Распоряжение,
	|	ВтЕстьРаспоряжения.Склад           КАК Склад,
	|	ВЫБОР
	|		КОГДА ВтЕстьНакладные.ЗаказПоставщику ЕСТЬ NULL
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ                              КАК Состояние
	|ПОМЕСТИТЬ ВтСостоянияПоступлений
	|ИЗ
	|	ВтЕстьРаспоряжения КАК ВтЕстьРаспоряжения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтЕстьНакладные КАК ВтЕстьНакладные
	|		ПО ВтЕстьРаспоряжения.ЗаказПоставщику = ВтЕстьНакладные.ЗаказПоставщику
	|			И ВтЕстьРаспоряжения.Склад = ВтЕстьНакладные.Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтЕстьРаспоряжения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтЕстьНакладные";
	
	ДополнитьТекстОтборомПоОстаткам(ТекстЗапроса, "ЗаказПоставщику", ТипыРаспоряжений, ПараметрыОтбора.Склад);
	ПреобразоватьТекстЗапросаВНаличиеКОформлению(ТекстЗапроса, "ВтСостоянияПоступлений", ТолькоНаличиеКОформлению);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСостоянияОтгрузок(ПараметрыОтбора, ТипыРаспоряжений, ТолькоНаличиеКОформлению)
	
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.РаспоряженияНаОтгрузку) Тогда
		
		Возврат
			"ВЫБРАТЬ ПЕРВЫЕ 0
			|	NULL КАК КОформлению,
			|	NULL КАК Распоряжение,
			|	NULL КАК Склад,
			|	NULL КАК Состояние
			|ПОМЕСТИТЬ ВтСостоянияОтгрузок";
		
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.ЗаказКлиента КАК ЗаказКлиента,
	|	ВложенныйЗапрос.Склад        КАК Склад
	|ПОМЕСТИТЬ ВтЕстьРаспоряжения
	|ИЗ
	|	(ВЫБРАТЬ
	|		Остатки.Распоряжение КАК ЗаказКлиента,
	|		Остатки.Номенклатура КАК Номенклатура,
	|		Остатки.Характеристика КАК Характеристика,
	|		Остатки.КодСтроки КАК КодСтроки,
	|		Остатки.Склад КАК Склад,
	|		Остатки.Серия КАК Серия
	|	ИЗ
	|		РегистрНакопления.РаспоряженияНаОтгрузку.Обороты(,,, &УсловиеОтбораОстатков) КАК Остатки
	|	ГДЕ
	|		Остатки.КОформлениюОборот <> 0
	|		И НЕ Остатки.Распоряжение.Ссылка ЕСТЬ NULL // для отработки RLS
	|		И НЕ Остатки.Склад.Ссылка ЕСТЬ NULL
	|		И ИСТИНА В(
	|			ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|			ГДЕ
	|				РеестрДокументов.Ссылка = Остатки.Распоряжение
	|				И (НЕ &ОтбиратьПоХозОперации ИЛИ РеестрДокументов.ХозяйственнаяОперация В (&ХозОперация))
	|				И (НЕ &ОтбиратьПоОрганизации ИЛИ РеестрДокументов.Организация В (&Организация))
	|				И (НЕ &ОтбиратьПоПодразделению ИЛИ РеестрДокументов.Подразделение В (&Подразделение))
	|				И (НЕ &ОтбиратьПоМенеджеру ИЛИ РеестрДокументов.Ответственный В (&Менеджер))
	|			)
	|	) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Распоряжения.ЗаказКлиента КАК ЗаказКлиента,
	|	Распоряжения.Склад        КАК Склад
	|ПОМЕСТИТЬ ВтЕстьНакладные
	|ИЗ
	|	ВтЕстьРаспоряжения КАК Распоряжения
	|ГДЕ
	|	ИСТИНА В
	|			(ВЫБРАТЬ
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.РаспоряженияНаОтгрузку КАК РаспоряженияНаОтгрузку
	|			ГДЕ
	|				РаспоряженияНаОтгрузку.Активность
	|				И РаспоряженияНаОтгрузку.Распоряжение = Распоряжения.ЗаказКлиента
	|				И РаспоряженияНаОтгрузку.Склад = Распоряжения.Склад
	|				И РаспоряженияНаОтгрузку.ВидДвиженияРегистра = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженияНакопления.Расход)
	|			ИМЕЮЩИЕ
	|				СУММА(РаспоряженияНаОтгрузку.КОформлению) < 0)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗаказКлиента,
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтЕстьРаспоряжения.ЗаказКлиента КАК Распоряжение,
	|	ВтЕстьРаспоряжения.Склад        КАК Склад,
	|	ВЫБОР
	|		КОГДА ВтЕстьНакладные.ЗаказКлиента ЕСТЬ NULL
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ                           КАК Состояние
	|ПОМЕСТИТЬ ВтСостоянияОтгрузок
	|ИЗ
	|	ВтЕстьРаспоряжения КАК ВтЕстьРаспоряжения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтЕстьНакладные КАК ВтЕстьНакладные
	|		ПО ВтЕстьРаспоряжения.ЗаказКлиента = ВтЕстьНакладные.ЗаказКлиента
	|			И ВтЕстьРаспоряжения.Склад = ВтЕстьНакладные.Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтЕстьРаспоряжения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтЕстьНакладные";
	
	ДополнитьТекстОтборомПоОстаткам(ТекстЗапроса, "Распоряжение", ТипыРаспоряжений, ПараметрыОтбора.Склад);
	ПреобразоватьТекстЗапросаВНаличиеКОформлению(ТекстЗапроса, "ВтСостоянияОтгрузок", ТолькоНаличиеКОформлению);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСостоянияПеремещений(ПараметрыОтбора, ТолькоНаличиеКОформлению)
	
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ЗаказыНаПеремещение) Тогда
		
		Возврат
			"ВЫБРАТЬ ПЕРВЫЕ 0
			|	NULL КАК КОформлению,
			|	NULL КАК Распоряжение,
			|	NULL КАК Состояние
			|ПОМЕСТИТЬ ВтСостоянияПеремещений";
		
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.ЗаказНаПеремещение КАК ЗаказНаПеремещение
	|ПОМЕСТИТЬ ВтЕстьРаспоряжения
	|ИЗ
	|	(ВЫБРАТЬ
	|		Остатки.ЗаказНаПеремещение КАК ЗаказНаПеремещение,
	|		Остатки.Номенклатура КАК Номенклатура,
	|		Остатки.Характеристика КАК Характеристика,
	|		Остатки.КодСтроки КАК КодСтроки,
	|		Остатки.Серия КАК Серия
	|	ИЗ
	|		РегистрНакопления.ЗаказыНаПеремещение.Остатки(, ) КАК Остатки
	|	ГДЕ
	|		Остатки.КОформлениюОстаток <> 0
	|		И ИСТИНА В(
	|			ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|			ГДЕ
	|				РеестрДокументов.Ссылка = Остатки.ЗаказНаПеремещение
	|				И (НЕ &ОтбиратьПоХозОперации ИЛИ РеестрДокументов.ХозяйственнаяОперация В (&ХозОперация))
	|				И (НЕ &ОтбиратьПоОрганизации ИЛИ РеестрДокументов.Организация В (&Организация))
	|				И (НЕ &ОтбиратьПоПодразделению ИЛИ РеестрДокументов.Подразделение В (&Подразделение))
	|				И (НЕ &ОтбиратьПоСкладу ИЛИ РеестрДокументов.МестоХранения.Ключ В (&Склад))
	|				И (НЕ &ОтбиратьПоМенеджеру ИЛИ РеестрДокументов.Ответственный В (&Менеджер))
	|			)
	|	) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Распоряжения.ЗаказНаПеремещение КАК ЗаказНаПеремещение
	|ПОМЕСТИТЬ ВтЕстьНакладные
	|ИЗ
	|	ВтЕстьРаспоряжения КАК Распоряжения
	|ГДЕ
	|	ИСТИНА В
	|			(ВЫБРАТЬ
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.ЗаказыНаПеремещение КАК ЗаказыНаПеремещение
	|			ГДЕ
	|				ЗаказыНаПеремещение.Активность
	|				И ЗаказыНаПеремещение.ЗаказНаПеремещение = Распоряжения.ЗаказНаПеремещение
	|				И ЗаказыНаПеремещение.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ИМЕЮЩИЕ
	|				СУММА(ЗаказыНаПеремещение.КОформлению) > 0)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗаказНаПеремещение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтЕстьРаспоряжения.ЗаказНаПеремещение КАК Распоряжение,
	|	ВЫБОР
	|		КОГДА ВтЕстьНакладные.ЗаказНаПеремещение ЕСТЬ NULL
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ                                 КАК Состояние
	|ПОМЕСТИТЬ ВтСостоянияПеремещений
	|ИЗ
	|	ВтЕстьРаспоряжения КАК ВтЕстьРаспоряжения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтЕстьНакладные КАК ВтЕстьНакладные
	|		ПО ВтЕстьРаспоряжения.ЗаказНаПеремещение = ВтЕстьНакладные.ЗаказНаПеремещение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтЕстьРаспоряжения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтЕстьНакладные";
	
	ПреобразоватьТекстЗапросаВНаличиеКОформлению(ТекстЗапроса, "ВтСостоянияПеремещений", ТолькоНаличиеКОформлению);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСостоянияСборок(ПараметрыОтбора, ТолькоНаличиеКОформлению)
	
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ЗаказыНаСборку) Тогда
		
		Возврат
			"ВЫБРАТЬ ПЕРВЫЕ 0
			|	NULL КАК КОформлению,
			|	NULL КАК Распоряжение,
			|	NULL КАК Состояние
			|ПОМЕСТИТЬ ВтСостоянияСборок";
		
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.ЗаказНаСборку КАК ЗаказНаСборку
	|ПОМЕСТИТЬ ВтЕстьРаспоряжения
	|ИЗ
	|	(ВЫБРАТЬ
	|		Остатки.ЗаказНаСборку КАК ЗаказНаСборку,
	|		Остатки.Номенклатура КАК Номенклатура,
	|		Остатки.Характеристика КАК Характеристика,
	|		Остатки.ТипСборки КАК ТипСборки,
	|		Остатки.КодСтроки КАК КодСтроки,
	|		Остатки.Серия КАК Серия
	|	ИЗ
	|		РегистрНакопления.ЗаказыНаСборку.Остатки(, ) КАК Остатки
	|	ГДЕ
	|		Остатки.КОформлениюОстаток <> 0
	|		И ИСТИНА В(
	|			ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|			ГДЕ
	|				РеестрДокументов.Ссылка = Остатки.ЗаказНаСборку
	|				И (НЕ &ОтбиратьПоХозОперации ИЛИ РеестрДокументов.ХозяйственнаяОперация В (&ХозОперация))
	|				И (НЕ &ОтбиратьПоОрганизации ИЛИ РеестрДокументов.Организация В (&Организация))
	|				И (НЕ &ОтбиратьПоПодразделению ИЛИ РеестрДокументов.Подразделение В (&Подразделение))
	|				И (НЕ &ОтбиратьПоСкладу ИЛИ РеестрДокументов.МестоХранения.Ключ В (&Склад))
	|				И (НЕ &ОтбиратьПоМенеджеру ИЛИ РеестрДокументов.Ответственный В (&Менеджер))
	|			)
	|	) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Распоряжения.ЗаказНаСборку КАК ЗаказНаСборку
	|ПОМЕСТИТЬ ВтЕстьНакладные
	|ИЗ
	|	ВтЕстьРаспоряжения КАК Распоряжения
	|ГДЕ
	|	ИСТИНА В
	|			(ВЫБРАТЬ
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.ЗаказыНаСборку КАК ЗаказыНаСборку
	|			ГДЕ
	|				ЗаказыНаСборку.Активность
	|				И ЗаказыНаСборку.ЗаказНаСборку = Распоряжения.ЗаказНаСборку
	|				И ЗаказыНаСборку.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ИМЕЮЩИЕ
	|				СУММА(ЗаказыНаСборку.КОформлению) > 0)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗаказНаСборку
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтЕстьРаспоряжения.ЗаказНаСборку КАК Распоряжение,
	|	ВЫБОР
	|		КОГДА ВтЕстьНакладные.ЗаказНаСборку ЕСТЬ NULL
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ                            КАК Состояние
	|ПОМЕСТИТЬ ВтСостоянияСборок
	|ИЗ
	|	ВтЕстьРаспоряжения КАК ВтЕстьРаспоряжения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтЕстьНакладные КАК ВтЕстьНакладные
	|		ПО ВтЕстьРаспоряжения.ЗаказНаСборку = ВтЕстьНакладные.ЗаказНаСборку
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтЕстьРаспоряжения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтЕстьНакладные";
	
	ПреобразоватьТекстЗапросаВНаличиеКОформлению(ТекстЗапроса, "ВтСостоянияСборок", ТолькоНаличиеКОформлению);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСостоянияВнутреннихПотреблений(ПараметрыОтбора, ТипыРаспоряжений, ТолькоНаличиеКОформлению)
	
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ЗаказыНаВнутреннееПотребление) Тогда
		
		Возврат
			"ВЫБРАТЬ ПЕРВЫЕ 0
			|	NULL КАК КОформлению,
			|	NULL КАК Распоряжение,
			|	NULL КАК Склад,
			|	NULL КАК Состояние
			|ПОМЕСТИТЬ ВтСостоянияВнутреннихПотреблений";
		
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
	|	ВложенныйЗапрос.Склад                        КАК Склад
	|ПОМЕСТИТЬ ВтЕстьРаспоряжения
	|ИЗ
	|	(ВЫБРАТЬ
	|		Остатки.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
	|		Остатки.Номенклатура КАК Номенклатура,
	|		Остатки.Характеристика КАК Характеристика,
	|		Остатки.КодСтроки КАК КодСтроки,
	|		Остатки.Склад КАК Склад,
	|		Остатки.Серия КАК Серия
	|	ИЗ
	|		РегистрНакопления.ЗаказыНаВнутреннееПотребление.Остатки(, &УсловиеОтбораОстатков) КАК Остатки
	|	ГДЕ
	|		Остатки.КОформлениюОстаток <> 0
	|		И ИСТИНА В(
	|			ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|			ГДЕ
	|				РеестрДокументов.Ссылка = Остатки.ЗаказНаВнутреннееПотребление
	|				И (НЕ &ОтбиратьПоХозОперации ИЛИ РеестрДокументов.ХозяйственнаяОперация В (&ХозОперация))
	|				И (НЕ &ОтбиратьПоОрганизации ИЛИ РеестрДокументов.Организация В (&Организация))
	|				И (НЕ &ОтбиратьПоПодразделению ИЛИ РеестрДокументов.Подразделение В (&Подразделение))
	|				И (НЕ &ОтбиратьПоМенеджеру ИЛИ РеестрДокументов.Ответственный В (&Менеджер))
	|			)
	|	) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Распоряжения.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
	|	Распоряжения.Склад                        КАК Склад
	|ПОМЕСТИТЬ ВтЕстьНакладные
	|ИЗ
	|	ВтЕстьРаспоряжения КАК Распоряжения
	|ГДЕ
	|	ИСТИНА В
	|			(ВЫБРАТЬ
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.ЗаказыНаВнутреннееПотребление КАК ЗаказыНаВнутреннееПотребление
	|			ГДЕ
	|				ЗаказыНаВнутреннееПотребление.Активность
	|				И ЗаказыНаВнутреннееПотребление.ЗаказНаВнутреннееПотребление = Распоряжения.ЗаказНаВнутреннееПотребление
	|				И ЗаказыНаВнутреннееПотребление.Склад = Распоряжения.Склад
	|				И ЗаказыНаВнутреннееПотребление.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ИМЕЮЩИЕ
	|				СУММА(ЗаказыНаВнутреннееПотребление.КОформлению) > 0)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗаказНаВнутреннееПотребление,
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтЕстьРаспоряжения.ЗаказНаВнутреннееПотребление КАК Распоряжение,
	|	ВтЕстьРаспоряжения.Склад                        КАК Склад,
	|	ВЫБОР
	|		КОГДА ВтЕстьНакладные.ЗаказНаВнутреннееПотребление ЕСТЬ NULL
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ                                           КАК Состояние
	|ПОМЕСТИТЬ ВтСостоянияВнутреннихПотреблений
	|ИЗ
	|	ВтЕстьРаспоряжения КАК ВтЕстьРаспоряжения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтЕстьНакладные КАК ВтЕстьНакладные
	|		ПО ВтЕстьРаспоряжения.ЗаказНаВнутреннееПотребление = ВтЕстьНакладные.ЗаказНаВнутреннееПотребление
	|			И ВтЕстьРаспоряжения.Склад = ВтЕстьНакладные.Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтЕстьРаспоряжения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтЕстьНакладные";
	
	ДополнитьТекстОтборомПоОстаткам(ТекстЗапроса, "ЗаказНаВнутреннееПотребление", ТипыРаспоряжений, ПараметрыОтбора.Склад);
	ПреобразоватьТекстЗапросаВНаличиеКОформлению(ТекстЗапроса, "ВтСостоянияВнутреннихПотреблений", ТолькоНаличиеКОформлению);
	
	Возврат ТекстЗапроса;
	
КонецФункции


Процедура ДополнитьТекстОтборомПоОстаткам(ТекстЗапроса, ПолеСвязи, ТипыРаспоряжений, Склад = Ложь, ДопУсловие = "", ВключаяОтправитель = Ложь, ВключаяПолучатель = Ложь)
	
	УсловияОтбораОстатков = Новый Массив();
	
	Если ЗначениеЗаполнено(ТипыРаспоряжений) Тогда
		
		Если ТипыРаспоряжений.Количество() = 1 Тогда
			Подстановка = "ВЫРАЗИТЬ(Остатки.ЗаказПоставщику КАК Документ.ЗаказНаВнутреннееПотребление).Ссылка";
			Подстановка = СтрЗаменить(Подстановка, "Документ.ЗаказНаВнутреннееПотребление", ТипыРаспоряжений[0]);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Остатки.ЗаказПоставщику.Ссылка", Подстановка);
			Подстановка = "ВЫРАЗИТЬ(Остатки.Распоряжение КАК Документ.ЗаказНаВнутреннееПотребление).Ссылка";
			Подстановка = СтрЗаменить(Подстановка, "Документ.ЗаказНаВнутреннееПотребление", ТипыРаспоряжений[0]);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Остатки.Распоряжение.Ссылка", Подстановка);
		КонецЕсли;
		
		ТекстыУсловий = Новый Массив();
		ШаблонУсловия = "&Измерение ССЫЛКА Документ.ЗаказНаВнутреннееПотребление";
		Для Каждого ПолноеИмяДокумента Из ТипыРаспоряжений Цикл
			Текст = СтрЗаменить(ШаблонУсловия, "&Измерение", ПолеСвязи);
			Текст = СтрЗаменить(Текст, "Документ.ЗаказНаВнутреннееПотребление", ПолноеИмяДокумента);
			ТекстыУсловий.Добавить(Текст);
		КонецЦикла;
		
		//@Query-part
		СоединительУсловий = " ИЛИ ";
		ТекстУсловия = СтрСоединить(ТекстыУсловий, СоединительУсловий);
		
		Текст = СтрШаблон("(%1)", ТекстУсловия);
		УсловияОтбораОстатков.Добавить(Текст);
	КонецЕсли;
	
	Если Склад Тогда
		Если ВключаяОтправитель Тогда
			УсловияОтбораОстатков.Добавить("(Склад В (&Склад) ИЛИ Отправитель В (&Склад))");
		ИначеЕсли ВключаяПолучатель Тогда
			УсловияОтбораОстатков.Добавить("(Склад В (&Склад) ИЛИ Получатель В (&Склад))");
		Иначе
			УсловияОтбораОстатков.Добавить("Склад В (&Склад)");
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ДопУсловие) Тогда
		УсловияОтбораОстатков.Добавить(ДопУсловие);
	КонецЕсли;
	
	//@Query-part
	СоединительУсловий = " И ";
	ТекстУсловия = СтрСоединить(УсловияОтбораОстатков, СоединительУсловий);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбораОстатков", ТекстУсловия);
	
КонецПроцедуры


Процедура ПреобразоватьТекстЗапросаВНаличиеКОформлению(ТекстЗапроса, ИмяТаблицыСостояний, Преобразовать)
	Если Преобразовать Тогда
		НачальныйНомер = СтрНайти(ТекстЗапроса, "ВтЕстьРаспоряжения");
		ТекстЗапроса = СтрЗаменить(Сред(ТекстЗапроса, НачальныйНомер, СтрНайти(ТекстЗапроса, ";") - НачальныйНомер),
			"ВтЕстьРаспоряжения",
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	ИСТИНА КАК КОформлению
			|ПОМЕСТИТЬ ПодстановкаИмениТаблицы");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПодстановкаИмениТаблицы", ИмяТаблицыСостояний);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#КонецОбласти
