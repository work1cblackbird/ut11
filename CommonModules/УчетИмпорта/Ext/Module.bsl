#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Проведение

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Свойства - См. ПроведениеДокументов.СвойстваДокумента
//
// Возвращаемое значение:
//  Структура - См. ПроведениеДокументов.ПараметрыУчетногоМеханизма
//
Функция ПараметрыДляПроведенияДокумента(Документ, Свойства) Экспорт
	
	Параметры = ПроведениеДокументов.ПараметрыУчетногоМеханизма();
	
	// Проведение
	Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.ТоварыКОформлениюДокументовИмпорта);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.ТоварыКОформлениюЗаявленийОВвозе);
		
	КонецЕсли;
	
	// Контроль
	Если Свойства.РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
		
		Параметры.КонтрольныеРегистрыИзменений.Добавить(Метаданные.РегистрыНакопления.ТоварыКОформлениюДокументовИмпорта);
		Параметры.КонтрольныеРегистрыИзменений.Добавить(Метаданные.РегистрыНакопления.ТоварыКОформлениюЗаявленийОВвозе);
		
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Возвращает тексты запросов для сторнирования движений при исправлении документов
// 
// Параметры:
// 	МетаданныеДокумента - ОбъектМетаданныхДокумент - Метаданные документа, который проводится.
// 
// Возвращаемое значение:
// 	Соответствие - Соответствие полного имени регистра тексту запроса сторнирования
//
Функция ТекстыЗапросовСторнирования(МетаданныеДокумента) Экспорт
	
	ДвиженияДокумента = МетаданныеДокумента.Движения;

	ТекстыЗапросов = Новый Соответствие();
		
	МетаданныеРегистра = Метаданные.РегистрыНакопления.ТоварыКОформлениюДокументовИмпорта;
	Если ДвиженияДокумента.Содержит(МетаданныеРегистра) Тогда
		ТекстыЗапросов.Вставить(МетаданныеРегистра.ПолноеИмя(),
			ПроведениеДокументов.ТекстСторнирующегоЗапроса(
				МетаданныеРегистра,
				МетаданныеДокумента));
	КонецЕсли;
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.ТоварыКОформлениюЗаявленийОВвозе;
	Если ДвиженияДокумента.Содержит(МетаданныеРегистра) Тогда	
		ТекстыЗапросов.Вставить(МетаданныеРегистра.ПолноеИмя(),
			ПроведениеДокументов.ТекстСторнирующегоЗапроса(
				МетаданныеРегистра,
				МетаданныеДокумента));
	КонецЕсли;
	
	Возврат ТекстыЗапросов;
	
КонецФункции

// Процедура формирования движений по регистру.
//
// Параметры:
//   ТаблицыДляДвижений - Структура - таблицы данных документа
//   Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//   Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "ТоварыКОформлениюДокументовИмпорта");
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "ТоварыКОформлениюЗаявленийОВвозе");
	
КонецПроцедуры

// Дополняет текст запроса механизма проверки даты запрета по таблице изменений.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 
// Возвращаемое значение:
//	Соответствие - соответствие имен таблиц изменения регистров и текстов запросов.
//	
Функция ТекстыЗапросовКонтрольДатыЗапретаПоТаблицеИзменений(Запрос) Экспорт

	СоответствиеТекстовЗапросов = Новый Соответствие();
	Возврат СоответствиеТекстовЗапросов;
	
КонецФункции

// Формирует тексты запросов для контроля изменений записанных движений регистров.
//
// Параметры:
//  Запрос - Запрос - запрос, хранящий параметры используемые в списке запросов
//  ТекстыЗапроса - СписокЗначений Из Строка- список текстов запросов и их имен.
//  Документ - ДокументОбъект, Структура - записываемый документ, содержит:
//  	* ДополнительныеСвойства - Структура:
//  		** ПроведениеДокументов - Структура:
//  			*** СвойстваДокумента - ФиксированнаяСтруктура:
//  				**** ЭтоНовый - Булево
//  				**** РежимЗаписи - РежимЗаписиДокумента
//  				**** РежимПроведения - РежимПроведенияДокумента
//  				**** Проведен - Булево
//  			*** ТаблицыКонтроля - Структура:
//  				**** ДвиженияТоварыОрганизацийИзменение - Структура:
//  					***** ЕстьЗаписиВТаблице - Булево
//  					***** Параметры - Структура:
//  						****** МинимальныйПериод - Дата
//  		** ДвиженияТоварыКОформлениюДокументовИмпортаИзменение - Произвольный
//
Процедура ИнициализироватьДанныеКонтроляИзменений(Запрос, ТекстыЗапроса, Документ) Экспорт
	
	#Область ТоварыКОформлениюДокументовИмпорта
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияТоварыКОформлениюДокументовИмпортаИзменение") Тогда
		
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	ДАТАВРЕМЯ(1,1,1) 											КАК Период,
			|	ТаблицаОстатков.Организация 								КАК Организация,
			|	ТаблицаОстатков.Поставщик 									КАК Поставщик,
			|	ТаблицаОстатков.ДокументПоступления 						КАК ДокументПоступления,
			|	ТаблицаОстатков.АналитикаУчетаНоменклатуры.Номенклатура 	КАК Номенклатура,
			|	ТаблицаОстатков.АналитикаУчетаНоменклатуры.Характеристика 	КАК Характеристика,
			|	ТаблицаОстатков.АналитикаУчетаНоменклатуры.МестоХранения 	КАК Склад,
			|	ТаблицаОстатков.АналитикаУчетаНоменклатуры.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ТаблицаОстатков.АналитикаУчетаНоменклатуры.Серия 			КАК Серия,
			|	ТаблицаОстатков.ВидЗапасов 									КАК ВидЗапасов,
			|	ТаблицаОстатков.ТипДокументаИмпорта 						КАК ТипДокументаИмпорта,
			|	ТаблицаОстатков.СуммаОстаток 								КАК Сумма,
			|	ТаблицаОстатков.КоличествоОстаток 							КАК Количество,
			|	ВЫРАЗИТЬ(ТаблицаОстатков.КоличествоПоРНПТОстаток КАК ЧИСЛО(23, 11)) 	КАК КоличествоПоРНПТ
			|ИЗ
			|	РегистрНакопления.ТоварыКОформлениюДокументовИмпорта.Остатки(,
			|			(Организация, Поставщик, ДокументПоступления, АналитикаУчетаНоменклатуры, ВидЗапасов, ТипДокументаИмпорта) В
			|				(ВЫБРАТЬ
			|					Таблица.Организация,
			|					Таблица.Поставщик,
			|					Таблица.ДокументПоступления,
			|					Таблица.АналитикаУчетаНоменклатуры,
			|					Таблица.ВидЗапасов,
			|					Таблица.ТипДокументаИмпорта
			|				ИЗ
			|					ДвиженияТоварыКОформлениюДокументовИмпортаИзменение КАК Таблица)
			|	) КАК ТаблицаОстатков
			|
			|ГДЕ
			|	(ТаблицаОстатков.КоличествоОстаток < 0 ИЛИ ТаблицаОстатков.КоличествоПоРНПТОстаток < 0)
			|";
			
		Запрос.УстановитьПараметр("ИдентификаторЗаявлениеОВвозеТоваров", ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ЗаявлениеОВвозеТоваров"));
		ТекстыЗапроса.Добавить(ТекстЗапроса, "ОшибкиТоварыКОформлениюДокументовИмпорта");
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ТоварыКОформлениюЗаявленийОВвозе
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ТоварыКОформлениюЗаявленийОВвозеИзменение") Тогда
		
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	ТаблицаОстатков.ДокументПоступления           КАК ДокументПоступления,
			|	ТаблицаОстатков.Номенклатура                  КАК Номенклатура,
			|	ТаблицаОстатков.Характеристика                КАК Характеристика,
			|	ТаблицаОстатков.Серия                         КАК Серия,
			|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ТаблицаОстатков.Склад                         КАК Склад,
			|	ТаблицаОстатков.КОформлениюОстаток            КАК КОформлению
			|ИЗ
			|	РегистрНакопления.ТоварыКОформлениюЗаявленийОВвозе.Остатки(
			|			,
			|			(ДокументПоступления, Номенклатура, Характеристика, Серия, Склад) В
			|				(ВЫБРАТЬ
			|					Таблица.ДокументПоступления,
			|					Таблица.Номенклатура,
			|					Таблица.Характеристика,
			|					Таблица.Серия,
			|					Таблица.Склад
			|				ИЗ
			|					ТоварыКОформлениюЗаявленийОВвозеИзменение КАК Таблица)) КАК ТаблицаОстатков
			|ГДЕ
			|	ТаблицаОстатков.КОформлениюОстаток < 0";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса, "ОшибкиТоварыКОформлениюЗаявленийОВвозе");
		
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

// Выводит сообщения пользователю при наличии ошибок контроля изменений записанных движений регистров.
//
// Параметры:
//  РезультатыКонтроля - Структура - таблицы с результатами контроля изменений
//  Документ - ДокументОбъект - записываемый документ
//  Отказ - Булево - признак отказа от проведения документа.
//
Процедура СообщитьОРезультатахКонтроляИзменений(РезультатыКонтроля, Документ, Отказ) Экспорт
	
	#Область ТоварыКОформлениюДокументовИмпорта
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияТоварыКОформлениюДокументовИмпортаИзменение") Тогда
		
		ШаблонСообщенияБезПоступления = НСтр("ru = 'Номенклатура %1
			|Количество товара к оформлению не соответствует количеству в документе поступления на %2 %3'");
		ШаблонСообщенияСПоступлением = ШаблонСообщенияБезПоступления + " " + НСтр("ru = '(см. документ %4)'");
		
		ШаблонСообщенияБезПоступленияАренда = НСтр("ru = 'Сумма услуг к оформлению не соответствует сумме в документе поступления на %1 %2'");
		ШаблонСообщенияСПоступлениемАренда = ШаблонСообщенияБезПоступленияАренда + " " + НСтр("ru = '(см. документ %3)'");
		
		Для каждого СтрокаОшибки Из РезультатыКонтроля.ОшибкиТоварыКОформлениюДокументовИмпорта Цикл
			
			
				ПредставлениеНоменклатуры = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(СтрокаОшибки.Номенклатура,
					СтрокаОшибки.Характеристика);
				
				Если ЗначениеЗаполнено(СтрокаОшибки.ДокументПоступления) Тогда
					ТекстСообщения = СтрШаблон(ШаблонСообщенияСПоступлением, ПредставлениеНоменклатуры,
						-СтрокаОшибки.Количество, СтрокаОшибки.ЕдиницаИзмерения, СтрокаОшибки.ДокументПоступления);
				Иначе
					ТекстСообщения = СтрШаблон(ШаблонСообщенияБезПоступления, ПредставлениеНоменклатуры,
						-СтрокаОшибки.Количество, СтрокаОшибки.ЕдиницаИзмерения);
				КонецЕсли;
				
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Документ,,, Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ТоварыКОформлениюЗаявленийОВвозе
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ТоварыКОформлениюЗаявленийОВвозеИзменение") Тогда
		
		ШаблонСообщенияБезПоступления = НСтр("ru = 'Номенклатура %1
			|Количество товара к оформлению не соответствует количеству в документе поступления на %2 %3'");
		ШаблонСообщенияСПоступлением = ШаблонСообщенияБезПоступления + " " + НСтр("ru = '(см. документ %4)'");
		
		Для каждого СтрокаОшибки Из РезультатыКонтроля.ОшибкиТоварыКОформлениюЗаявленийОВвозе Цикл
			
			ПредставлениеНоменклатуры = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(СтрокаОшибки.Номенклатура,
				СтрокаОшибки.Характеристика);
				
			Если ЗначениеЗаполнено(СтрокаОшибки.ДокументПоступления) Тогда
				ТекстСообщения = СтрШаблон(ШаблонСообщенияСПоступлением, ПредставлениеНоменклатуры,
					-СтрокаОшибки.КОформлению, СтрокаОшибки.ЕдиницаИзмерения, СтрокаОшибки.ДокументПоступления);
			Иначе
				ТекстСообщения = СтрШаблон(ШаблонСообщенияБезПоступления, ПредставлениеНоменклатуры,
					-СтрокаОшибки.КОформлению, СтрокаОшибки.ЕдиницаИзмерения);
			КонецЕсли;
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Документ,,, Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

// Дополняет запрос отражения документа отражением регистрации ввоза товаров из Таможенного союза.
// Операция формирует движения по регистру ТоварыКОформлениюЗаявленийОВвозе.
//
// В документе должна быть объявлена экспортная процедура СформироватьСуммыДокументаВВалютахУчета,
// которая инициализирует втСуммыДокументовВВалютахУчета (См. РегистрыСведений.СуммыДокументовВВалютахУчета.СформироватьПоДаннымДокумента).
//
// Параметры:
// 	Запрос - Запрос - Запрос отражения документа.
// 	ТекстыЗапроса - СписокЗначений из Строка - Список текстов запроса отражения документа.
// 	Регистры - Неопределено, Структура, Строка - Список регистров для отражения.
// 	ТекстТовары - Строка - Текст запроса получения из документа приобретения.
// 	    Запрос должен возвращать выборку полей:
// 	    Реквизиты операции.
// 	     * Период - Дата - Дата отражения операции.
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа.
// 	     * Организация - СправочникСсылка.Организации - Организация, в которой отражается ввоз товаров из таможенного союза.
// 	     * Контрагент - СправочникСсылка.Контрагенты - Контрагент-поставщик товаров.
// 	     * ДокументПриобретения - ОпределяемыйТип.СчетФактура - Ссылка на документ приобретения товаров.
// 	    Ввозимые товары.
// 	     * Номенклатура - СправочникСсылка.Номенклатура - Ввозимая номенклатурная позиция.
// 	     * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - Характеристика ввозимой номенклатурной позиции.
// 	     * Серия - СправочникСсылка.СерииНоменклатуры - Серия ввозимой номенклатурной позиции.
// 	     * Количество - Число - Количество ввозимого товара.
// 	     * ИдентификаторСтроки - Строка, УникальныйИдентификатор - Идентификатор строки документа приобретения.
// 	    Аналитика учета ввозимых товаров.
// 	     * Склад - СправочникСсылка.Склады - Склад, на который приобретаются товары.
// 	     * АналитикаУчетаНоменклатуры - СправочникСсылка.КлючиАналитикиУчетаНоменклатуры - Ключ аналитика учета товара.
//
Процедура ОтразитьВвозТоваровИзТаможенногоСоюза(Запрос, ТекстыЗапроса, Регистры, ТекстТовары) Экспорт
	
	Если НЕ Запрос.Параметры.Свойство("ТипыНоменклатурыТовар") Тогда
		Запрос.УстановитьПараметр("ТипыНоменклатурыТовар", УчетНДСУПСлужебный.ТипыНоменклатурыТовар());
	КонецЕсли;
	
	ТекстТоварыКОформлениюЗаявленийОВвозе =
	"ВЫБРАТЬ
	|	Товары.Ссылка                          КАК Регистратор,
	|	Товары.Период                          КАК Период,
	|	Товары.Склад                           КАК Склад,
	|	Товары.ДокументПриобретения            КАК ДокументПоступления,
	|	Товары.Номенклатура                    КАК Номенклатура,
	|	Товары.Характеристика                  КАК Характеристика,
	|	Товары.Серия                           КАК Серия,
	|	Товары.Количество                      КАК КОформлению,
	|	Товары.ИдентификаторСтроки             КАК ИдентификаторСтроки,
	|	СуммыДокументов.СуммаБезНДС            КАК ФактурнаяСтоимость
	|ИЗ
	|	#Товары КАК Товары
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.Контрагенты КАК Контрагенты
	|	ПО
	|		Товары.Контрагент = Контрагенты.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ВтСуммыДокументовВВалютахУчета КАК СуммыДокументов
	|	ПО
	|		Товары.Ссылка = СуммыДокументов.Ссылка
	|		И Товары.ИдентификаторСтроки = СуммыДокументов.ИдентификаторСтроки
	|ГДЕ
	|	Товары.Номенклатура.ТипНоменклатуры В (&ТипыНоменклатурыТовар)
	|";
	
	ТекстыШаблоновОтражения = Новый Структура();
	Если ПроведениеДокументов.ТребуетсяТаблицаДляДвижений("ТоварыКОформлениюЗаявленийОВвозе", Регистры) Тогда 
		ТекстыШаблоновОтражения.Вставить("ТоварыКОформлениюЗаявленийОВвозе", ТекстТоварыКОформлениюЗаявленийОВвозе);
	КонецЕсли;
	Если ТекстыШаблоновОтражения.Количество() > 0 Тогда
		МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Запрос.Параметры.Ссылка);
		МенеджерДокумента.СформироватьСуммыДокументаВВалютахУчета(Запрос, ТекстыЗапроса);
	КонецЕсли;
	ТекстыЗапросовДанныхДокумента = Новый Структура("Товары", ТекстТовары);
	ПроведениеДокументов.ДополнитьЗапросОтраженияДокумента(Запрос, ТекстыЗапроса, ТекстыШаблоновОтражения, ТекстыЗапросовДанныхДокумента);
	
КонецПроцедуры

// Дополняет запрос отражения документа отражением регистрации ввоза товаров из Таможенного союза.
// Операция формирует движения по регистру ТоварыКОформлениюДокументовИмпорта.
//
// В документе должна быть объявлена экспортная процедура СформироватьСуммыДокументаВВалютахУчета,
// которая инициализирует втСуммыДокументовВВалютахУчета (См. РегистрыСведений.СуммыДокументовВВалютахУчета.СформироватьПоДаннымДокумента).
//
// Параметры:
// 	Запрос - Запрос - Запрос отражения документа.
// 	ТекстыЗапроса - СписокЗначений из Строка - Список текстов запроса отражения документа.
// 	Регистры - Неопределено, Структура, Строка - Список регистров для отражения.
// 	ТекстТовары - Строка - Текст запроса получения из документа приобретения.
// 	     Запрос должен возвращать выборку полей:
// 	    Реквизиты операции.
// 	     * Период - Дата - Дата отражения операции.
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа.
// 	     * Организация - СправочникСсылка.Организации - Организация, в которой отражается ввоз товаров из таможенного союза.
// 	     * Контрагент - СправочникСсылка.Контрагенты - Контрагент-поставщик товаров.
// 	     * ДокументПриобретения - ОпределяемыйТип.СчетФактура - Ссылка на документ приобретения товаров.
// 	    Ввозимые товары.
// 	     * Номенклатура - СправочникСсылка.Номенклатура - Ввозимая номенклатурная позиция.
// 	     * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - Характеристика ввозимой номенклатурной позиции.
// 	     * Серия - СправочникСсылка.СерииНоменклатуры - Серия ввозимой номенклатурной позиции.
// 	     * Количество - Число - Количество ввозимого товара.
// 	     * ИдентификаторСтроки - Строка, УникальныйИдентификатор - Идентификатор строки документа приобретения.
// 	    Аналитика учета ввозимых товаров.
// 	     * Склад - СправочникСсылка.Склады- Склад, на который приобретаются товары.
// 	     * АналитикаУчетаНоменклатуры - СправочникСсылка.КлючиАналитикиУчетаНоменклатуры - Ключ аналитика учета товара.
//
Процедура ОтразитьВвозТоваровИзТаможенногоСоюзаНоваяМеханика(Запрос, ТекстыЗапроса, Регистры, ТекстТовары) Экспорт
	
	Если НЕ Запрос.Параметры.Свойство("ТипыНоменклатурыТовар") Тогда
		Запрос.УстановитьПараметр("ТипыНоменклатурыТовар", УчетНДСУПСлужебный.ТипыНоменклатурыТовар());
	КонецЕсли;
	
	ТекстТоварыКОформлениюДокументовИмпорта =
	"ВЫБРАТЬ
	|	Товары.ВидДвижения                     КАК ВидДвижения,
	|	Товары.Ссылка                          КАК Регистратор,
	|	Товары.Период                          КАК Период,
	|	Товары.Организация                     КАК Организация,
	|	Товары.Поставщик                       КАК Поставщик,
	|	Товары.АналитикаУчетаНоменклатуры      КАК АналитикаУчетаНоменклатуры,
	|	Товары.ВидЗапасов                      КАК ВидЗапасов,
	|	Товары.ДокументПриобретения            КАК ДокументПоступления,
	|	Товары.ТипДокументаИмпорта             КАК ТипДокументаИмпорта,
	|	Товары.Количество                      КАК Количество,
	|	0                                      КАК КоличествоПоРНПТ,
	|	Товары.Сумма			               КАК Сумма,
	|	Товары.НомерГТД                        КАК НомерГТД,
	|	Товары.ИдентификаторСтроки             КАК ИдентификаторСтроки,
	|	ИСТИНА								   КАК Первичное
	|ИЗ
	|	#Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК КлючиАналитикиУчетаНоменклатуры
	|		ПО Товары.АналитикаУчетаНоменклатуры = КлючиАналитикиУчетаНоменклатуры.Ссылка	   
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО КлючиАналитикиУчетаНоменклатуры.Номенклатура = СпрНоменклатура.Ссылка
	|
	|ГДЕ
	|	СпрНоменклатура.ТипНоменклатуры В (&ТипыНоменклатурыТовар)
	|	И Товары.Сумма <> 0
	|";
	
	ТекстыШаблоновОтражения = Новый Структура();
	Если ПроведениеДокументов.ТребуетсяТаблицаДляДвижений("ТоварыКОформлениюДокументовИмпорта", Регистры) Тогда 
		ТекстыШаблоновОтражения.Вставить("ТоварыКОформлениюДокументовИмпорта", ТекстТоварыКОформлениюДокументовИмпорта);
	КонецЕсли;
	ТекстыЗапросовДанныхДокумента = Новый Структура("Товары", ТекстТовары);
	ПроведениеДокументов.ДополнитьЗапросОтраженияДокумента(Запрос, ТекстыЗапроса, ТекстыШаблоновОтражения, ТекстыЗапросовДанныхДокумента);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
