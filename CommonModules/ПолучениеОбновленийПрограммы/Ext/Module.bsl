///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "Получение обновлений программы".
// ОбщийМодуль.ПолучениеОбновленийПрограммы.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ОбновлениеПрограммы

// Возвращает параметры получения обновлений, определенные для текущей конфигурации.
//
// Возвращаемое значение:
//  Структура - содержит настройки обновления информационной базы:
//    * ПолучатьОбновленияКонфигурации - Булево - Истина, если для конфигурации задействовано получение обновлений
//        конфигурации.
//    * ПолучатьИсправления - Булево - Истина, если для конфигурации задействовано получение исправлений (патчей).
//    * ПолучатьОбновленияПлатформы - Булево - Истина, если разрешено загружать и устанавливать новые версии платформы.
//
Функция ПараметрыПолученияОбновлений() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ПолучатьОбновленияКонфигурации", Истина);
	Результат.Вставить("ПолучатьИсправления"           , Истина);
	Результат.Вставить("ПолучатьОбновленияПлатформы"   , Истина);
	
	ПараметрыПолученияОбновлений = СлужебнаяПараметрыПолученияОбновлений();
	ЗаполнитьЗначенияСвойств(Результат, ПараметрыПолученияОбновлений);
	
	Возврат Результат;
	
КонецФункции

// Определяет возможность использования автоматического обновления программы в
// текущем режиме работы.
//
// Параметры:
//	ПроверитьВозможностьПримененияОбновлений - Булево - проверить для текущего
//		пользователя наличие права применения обновления.
//		Если Истина - проверяется возможность использования в режиме применения
//		обновления, иначе проверить возможность просмотра информации о
//		доступных обновлениях;
//	ПроверитьОС - Булево - проверить возможность применения обновления
//		на текущей операционной системе.
//
// Возвращаемое значение:
//	Булево - признак возможности использования: Истина, если использование
//		возможно, Ложь - в противном случае.
//
Функция ДоступноИспользованиеОбновленияПрограммы(
	ПроверитьВозможностьПримененияОбновлений = Ложь,
	ПроверитьОС = Истина) Экспорт
	
	ПараметрыДоступа = ПараметрыДоступаКОбновлениюПрограммы();
	Результат        = ПараметрыДоступа.ДоступнаПодсистема
		И Не ПараметрыДоступа.ЭтоВебПодключение;
	Если ПроверитьВозможностьПримененияОбновлений Тогда
		Результат = Результат И ПараметрыДоступа.ДоступнаУстановка;
	КонецЕсли;
	Если ПроверитьОС Тогда
		Результат = Результат И ПараметрыДоступа.ЭтоWindowsКлиент;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// В файловом режиме работы возвращает каталог, в который был сохранен последний
// полученный дистрибутив Платформы 1С:Предприятие. В других режимах работы
// возвращает Неопределено.
//
// Возвращаемое значение:
//	Строка - каталог с дистрибутивом Платформы 1С:Предприятие в
//		файловом режиме работы;
//	Неопределено - в других режимах работы.
//
Функция КаталогСохраненияПоследнегоПолученногоДистрибутива() Экспорт
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		
		Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			ПолучениеОбновленийПрограммыКлиентСервер.ИдентификаторОбщихНастроек(),
			КлючНастройкиКаталогДистрибутива());
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Исправления

// Возвращается список доступных исправлений (патчей) для текущей версии конфигурации и библиотек, встроенных в
// конфигурацию.
// Вызов метода доступен только при работе под пользователем с административными правами или при установленном
// привилегированном режиме, в противном случае, в результате выполнения возвращается ошибка.
//
// Возвращаемое значение:
//  Структура - информация о доступных исправлениях (патчах):
//    * Исправления - Структура - описание исправлений:
//        ** Установить - Массив из Структура - описание доступных исправлений (патчей):
//             *** Идентификатор - Строка - идентификатор исправления (патча);
//             *** Наименование - Строка - наименование исправления (патча);
//             *** ИмяПрограммы - Строка - имя родительской конфигурации, для которой доступно исправление;
//             *** ВерсияПрограммы - Строка - версия родительской конфигурации, для которой доступно исправление;
//             *** Описание - Строка - описание исправления (патча);
//             *** ОписаниеИзмененныхМетаданных - Строка - список метаданных, в которые внесены изменения;
//             *** Размер - Число - размер исправления (патча);
//        ** Удалить - Массив из Строка - содержит элементы типа Строка, идентификаторы отозванных
//             исправлений, которые необходимо удалить;
//    * Ошибка - Булево - Истина, если при получении информации об исправлениях возникла ошибка;
//    * КраткоеОписаниеОшибки - Строка - краткое описание ошибки, которое может быть отображено пользователю;
//    * ПодробноеОписаниеОшибки - Строка - подробное описание ошибки, которое может быть записано в журнал регистрации.
//
Функция ИсправленияРодительскихКонфигураций() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Ошибка"                 , Ложь);
	Результат.Вставить("КраткоеОписаниеОшибки"  , "");
	Результат.Вставить("ПодробноеОписаниеОшибки", "");
	
	Исправления = Новый Структура;
	Исправления.Вставить("Установить", Новый Массив);
	Исправления.Вставить("Удалить"   , Новый Массив);
	Результат.Вставить("Исправления", Исправления);
	
	Если Не Пользователи.ЭтоПолноправныйПользователь(, Истина, Истина) Тогда
		Результат.Ошибка = Истина;
		Результат.КраткоеОписаниеОшибки   = НСтр("ru = 'Недостаточно прав.'");
		Результат.ПодробноеОписаниеОшибки = НСтр("ru = 'Недостаточно прав для получения информации об исправлениях.'");
		ЗаписатьОшибкуВЖурналРегистрации(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить информацию о доступных исправлениях (патчах) родительских конфигураций.
				|%1'"),
			Результат.ПодробноеОписаниеОшибки));
		Возврат Результат;
	КонецЕсли;
	
	ВерсииПодсистем = ОбщегоНазначения.ОписанияПодсистем();
	ПараметрВерсииПодсистем = Новый Массив;
	ИндексДляПоиска = Новый Соответствие;
	Для Каждого ТекВерсия Из ВерсииПодсистем Цикл
		Если ЗначениеЗаполнено(ТекВерсия.ИдентификаторИнтернетПоддержки) Тогда
			ОписаниеВерсии = Новый Структура;
			ОписаниеВерсии.Вставить("ИмяПрограммы", ТекВерсия.ИдентификаторИнтернетПоддержки);
			ОписаниеВерсии.Вставить("Версия",       ТекВерсия.Версия);
			ПараметрВерсииПодсистем.Добавить(ОписаниеВерсии);
			ИндексДляПоиска.Вставить(ТекВерсия.ИдентификаторИнтернетПоддержки + ":" + ТекВерсия.Версия, Истина);
		КонецЕсли;
	КонецЦикла;
	
	ДополнительныеПодсистемы = НастройкиЗагрузкиИсправлений().Подсистемы;
	Для Каждого ТекДопПодсистема Из ДополнительныеПодсистемы Цикл
		
		ОписаниеВерсии = Новый Структура();
		ОписаниеВерсии.Вставить("ИмяПрограммы", ТекДопПодсистема.ИдентификаторИнтернетПоддержки);
		ОписаниеВерсии.Вставить("Версия"      , ТекДопПодсистема.Версия);
		
		ПараметрВерсииПодсистем.Добавить(ОписаниеВерсии);
		ИндексДляПоиска.Вставить(ТекДопПодсистема.ИдентификаторИнтернетПоддержки + ":" + ТекДопПодсистема.Версия,
			Истина);
		
	КонецЦикла;
	
	Если ПараметрВерсииПодсистем.Количество() > 0 Тогда
		ИнформацияОбИсправлениях = ИнформацияОДоступныхИсправленияхКонфигураций(
			ПараметрВерсииПодсистем,
			ИдентификаторыУстановленныхИсправлений());
	Иначе
		Возврат Результат;
	КонецЕсли;
	
	Если ИнформацияОбИсправлениях.Ошибка Тогда
		ЗаполнитьЗначенияСвойств(
			Результат,
			ИнформацияОбИсправлениях,
			"Ошибка, КраткоеОписаниеОшибки, ПодробноеОписаниеОшибки");
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого ТекИсправление Из ИнформацияОбИсправлениях.Исправления Цикл
		Если ТекИсправление.Отозвано Тогда
			Результат.Исправления.Удалить.Добавить(Строка(ТекИсправление.Идентификатор));
		Иначе
			Для Каждого СтрокаПрименимость Из ТекИсправление.Применимость Цикл
				КлючПоиска = СтрокаПрименимость.ИмяПрограммы + ":" + СтрокаПрименимость.ВерсияПрограммы;
				Если ИндексДляПоиска.Получить(КлючПоиска) <> Неопределено Тогда
					НовоеИсправление = НовыйИнформацияОбИсправленииДляПрограммногоИнтерфейса();
					ЗаполнитьЗначенияСвойств(НовоеИсправление, ТекИсправление);
					НовоеИсправление.ИмяПрограммы    = СтрокаПрименимость.ИмяПрограммы;
					НовоеИсправление.ВерсияПрограммы = СтрокаПрименимость.ВерсияПрограммы;
					Результат.Исправления.Установить.Добавить(НовоеИсправление);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Загружает выбранные исправления (патчи) во временное хранилище.
// При возникновении ошибки загрузки файла одного из исправлений: загрузка файлов
// прерывается, вместе с описанием ошибки возвращаются файлы, которые удалось
// загрузить. На вызывающей стороне необходимо повторить вызов для незагруженных
// исправлений.
// Вызов метода доступен только при работе под пользователем с административными
// правами или при установленном привилегированном режиме, в противном случае,
// в результате выполнения возвращается ошибка.
// Работа метода в модели сервиса не поддерживается.
//
// Параметры:
//	ИдентификаторыИсправлений - Массив из Строка - идентификаторы загружаемых исправлений;
//	ИдентификаторФормы - УникальныйИдентификатор - уникальный идентификатор
//		формы, в хранилище которой необходимо поместить загруженные файлы.
//
// Возвращаемое значение:
//  Структура - информация о загруженных файлах исправлений:
//    * Исправления - Массив из Структура - описание файлов исправлений, которые удалось загрузить:
//      ** Идентификатор - УникальныйИдентификатор - идентификатор исправления;
//      ** АдресФайла - Строка - адрес полученного файла во временном хранилище;
//    * Ошибка - Булево - Истина, если при получении информации об исправлениях
//      возникла ошибка;
//    * КраткоеОписаниеОшибки - Строка - краткое описание ошибки,
//      которое может быть отображено пользователю;
//    * ПодробноеОписаниеОшибки - Строка - подробное описание ошибки,
//      которое может быть записано в журнал регистрации.
//
Функция ЗагрузитьИсправления(ИдентификаторыИсправлений, ИдентификаторФормы = Неопределено) Экспорт
	
	Возврат СлужебнаяЗагрузитьИсправления(ИдентификаторыИсправлений, ИдентификаторФормы, Истина);
	
КонецФункции

// Определяет возможность автоматической загрузки и установки исправлений регламентным заданием.
//
// Возвращаемое значение:
//	Булево - признак возможности использования: Истина, если использование
//		возможно, Ложь - в противном случае.
//
Функция ДоступнаАвтоматическаяЗагрузкаИсправлений() Экспорт
	
	ПараметрыОбновления = СлужебнаяПараметрыПолученияОбновлений();
	Возврат ПараметрыОбновления.ПолучатьИсправления;
	
КонецФункции

// Определяет значение настройки автоматической загрузки и установки исправлений.
// При работе в модели сервиса загрузка патчей выполняется через обработку поставляемых данных.
// Функция вернет значение "Истина", если работа с исправлениями в программе разрешена.
//
// Возвращаемое значение:
//	Булево - признак включенности автоматической загрузки: Истина, если загрузка
//		включена, Ложь - в противном случае.
//
Функция АвтоматическаяЗагрузкаИсправленийВключена() Экспорт
	
	Если Не ДоступнаАвтоматическаяЗагрузкаИсправлений() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// При работе в модели сервиса загрузка патчей выполняется
	// через обработку поставляемых данных.
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.ЗагружатьИУстанавливатьИсправленияАвтоматически.Получить();
	
КонецФункции

// Изменяет значение настройки автоматической загрузки и установки исправлений.
// Перед вызовом метода необходимо проверить доступность загрузки исправлений
// см. ДоступнаАвтоматическаяЗагрузкаИсправлений. Если автоматическая
// загрузка исправлений не доступна, будет вызвано исключение.
//
// При работе в модели сервиса загрузка исправлений выполняется через обработку
// поставляемых данных. Вызов метода в модели сервиса не имеет смысла.
//
// Параметры:
//	ЗначениеНастройки - Булево - если Истина, автоматическая загрузка будет включена.
//
// Пример:
//	Если ПолучениеОбновленийПрограммы.ДоступнаАвтоматическаяЗагрузкаИсправлений() Тогда
//		ПолучениеОбновленийПрограммы.ВключитьОтключитьАвтоматическуюУстановкуИсправлений(Истина);
//	КонецЕсли;
//
Процедура ВключитьОтключитьАвтоматическуюУстановкуИсправлений(Знач ЗначениеНастройки) Экспорт
	
	Если Не ДоступнаАвтоматическаяЗагрузкаИсправлений() Тогда
		ВызватьИсключение НСтр("ru = 'Автоматическое получение исправлений недоступно в текущем режиме работы.'");
	КонецЕсли;
	
	// При работе в модели сервиса загрузка патчей выполняется
	// через обработку поставляемых данных.
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеНастройки = (ЗначениеНастройки = Истина);
	Константы.ЗагружатьИУстанавливатьИсправленияАвтоматически.Установить(ЗначениеНастройки);
	РегламентныеЗаданияСервер.УстановитьИспользованиеРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ПолучениеИУстановкаИсправленийКонфигурации,
		(ЗначениеНастройки И ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки()));
	
КонецПроцедуры

// Возвращает список доступных исправлений (патчей) для текущей версии конфигурации и библиотек, встроенных в
// конфигурацию.
// Вызов метода доступен только при работе под пользователем с административными правами или при установленном
// привилегированном режиме, в противном случае, в результате выполнения возвращается ошибка.
// Работа метода в модели сервиса не поддерживается.
//
// Возвращаемое значение:
//  Структура:
//    * Исправления - Неопределено - не удалось получить информацию о доступных исправлениях (патчах).
//                  - ТаблицаЗначений - список доступных исправлений с колонками:
//                      ** Идентификатор - Строка - идентификатор исправления (патча).
//                      ** Наименование - Строка - наименование исправления (патча).
//                      ** Описание - Строка - описание исправления (патча).
//                      ** ОписаниеИзмененныхМетаданных - Строка - список метаданных, в которые внесены изменения.
//                      ** Размер - Число - размер исправления (патча).
//    * Ошибка - Булево - Истина, если при получении информации об исправлениях возникла ошибка.
//    * КраткоеОписаниеОшибки - Строка - краткое описание ошибки, которое может быть отображено пользователю;
//    * ПодробноеОписаниеОшибки - Строка - подробное описание ошибки, которое может быть записано в журнал регистрации.
//
Функция ИнформацияОДоступныхИсправлениях() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Ошибка"                 , Ложь);
	Результат.Вставить("КраткоеОписаниеОшибки"  , "");
	Результат.Вставить("ПодробноеОписаниеОшибки", "");
	Результат.Вставить("Исправления"            , Неопределено);
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Получение информации о доступных исправлениях (патчей) для текущей версии конфигурации.'"));
	
	// При работе в модели сервиса загрузка патчей выполняется через инструмент поставляемых данных.
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Результат.Ошибка                  = Истина;
		Результат.КраткоеОписаниеОшибки   = НСтр("ru = 'Работа с исправлениями в модели сервиса запрещена.'");
		Результат.ПодробноеОписаниеОшибки =
			НСтр("ru = 'Работа с исправлениями в модели сервиса выполняется через инструмент поставляемых данных.'");
		
	// Проверка платформы
	ИначеЕсли Не ДоступнаАвтоматическаяЗагрузкаИсправлений() Тогда
		Результат.Ошибка                  = Истина;
		Результат.КраткоеОписаниеОшибки   = НСтр("ru = 'Автоматическое получение исправлений недоступно.'");
		Результат.ПодробноеОписаниеОшибки =
			НСтр("ru = 'Автоматическое получение исправлений недоступно в текущем режиме работы.'");
		
	// Проверка наличия административных прав
	ИначеЕсли Не ЭтоАдминистраторСистемы(Истина) Тогда
		Результат.Ошибка                  = Истина;
		Результат.КраткоеОписаниеОшибки   = НСтр("ru = 'Недостаточно прав.'");
		Результат.ПодробноеОписаниеОшибки =
			НСтр("ru = 'Недостаточно прав для получения информации об исправлениях.'");
	КонецЕсли;
	
	Если Результат.Ошибка Тогда
		ЗаписатьОшибкуВЖурналРегистрации(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить информацию о доступных исправлениях (патчах) для текущей версии конфигурации.
				|%1'"),
			Результат.ПодробноеОписаниеОшибки));
		Возврат Результат;
	КонецЕсли;
	
	// Получение списка доступных для установки исправлений (патчей)
	ИнформацияОбИсправлениях = ИнформацияОДоступныхИсправленияхКонфигураций(
		ВерсииПрограммИсправлений(),
		ИдентификаторыУстановленныхИсправлений());
	Если ИнформацияОбИсправлениях.Ошибка Тогда
		ЗаполнитьЗначенияСвойств(Результат, ИнформацияОбИсправлениях, , "Исправления");
		ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось получить информацию о доступных исправлениях (патчах) для текущей версии конфигурации.
					|%1'"),
				ИнформацияОбИсправлениях.ПодробноеОписаниеОшибки));
		Возврат Результат;
	КонецЕсли;
	
	Исправления = ИнформацияОбИсправлениях.Исправления;
	Исправления.Колонки.Удалить("ИмяПрограммы");
	Исправления.Колонки.Удалить("ВерсияПрограммы");
	Исправления.Колонки.Удалить("ДляНовойВерсии");
	Исправления.Колонки.Удалить("ДляТекущейВерсии");
	Исправления.Колонки.Удалить("Применимость");
	
	Результат.Исправления = Исправления;
	
	Возврат Результат;
	
КонецФункции

// Производить загрузку доступных исправлений, их установку и удаление отозванных исправлений для текущей версии
// конфигурации и библиотек, встроенных в конфигурацию.
// Вызов метода доступен только при работе под пользователем с административными правами или при установленном
// привилегированном режиме, в противном случае, в результате выполнения возвращается ошибка.
// Работа метода в модели сервиса не поддерживается.
//
// Возвращаемое значение:
//  Структура:
//    * НеУстановлено - Число - количество неустановленных исправлений.
//    * НеУдалено - Число - количество неудаленных исправлений.
//    * Ошибка - Булево - Истина, если ни один из доступных исправлений не применен.
//    * КраткоеОписаниеОшибки - Строка - краткое описание ошибки, которое может быть отображено пользователю. Может
//        быть заполнено даже если параметр Ошибка имеет значение Ложь.
//    * ПодробноеОписаниеОшибки - Строка - подробное описание ошибки, которое может быть записано в журнал регистрации.
//        Может быть заполнено даже если параметр Ошибка имеет значение Ложь.
//
Функция ЗагрузитьИУстановитьИсправления() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Ошибка"                 , Ложь);
	Результат.Вставить("КраткоеОписаниеОшибки"  , "");
	Результат.Вставить("ПодробноеОписаниеОшибки", "");
	Результат.Вставить("НеУстановлено"          , 0);
	Результат.Вставить("НеУдалено"              , 0);
	
	ИнформацияОбИсправлениях = ИнформацияОДоступныхИсправлениях();
	Если ИнформацияОбИсправлениях.Ошибка Тогда
		ЗаполнитьЗначенияСвойств(Результат, ИнформацияОбИсправлениях);
		Возврат Результат;
	КонецЕсли;
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Автоматическое получение и установка исправлений (патчей) для текущей версии конфигурации.'"));
	
	// Проверка подключения ИПП
	УстановитьПривилегированныйРежим(Истина);
	ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
	УстановитьПривилегированныйРежим(Ложь);
	Если ДанныеАутентификации = Неопределено Тогда
		Результат.Ошибка                  = Истина;
		Результат.КраткоеОписаниеОшибки   = НСтр("ru = 'Интернет-поддержка не подключена.'");
		Результат.ПодробноеОписаниеОшибки = НСтр("ru = 'Интернет-поддержка не подключена.'");
	КонецЕсли;
	
	Если Результат.Ошибка Тогда
		ЗаписатьОшибкуВЖурналРегистрации(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось завершить подготовку автоматического получения и установки исправлений (патчей) для текущей версии конфигурации.
				|%1'"),
			Результат.ПодробноеОписаниеОшибки));
		Возврат Результат;
	КонецЕсли;
	
	Исправления = ИнформацияОбИсправлениях.Исправления;
	Если Исправления = Неопределено Или Исправления.Количество() = 0 Тогда
		ЗаписатьИнформациюВЖурналРегистрации(НСтр("ru = 'Нет доступных исправлений (патчей) для установки'"));
		Возврат Результат;
	КонецЕсли;
	
	// Загрузка исправлений
	ИдентификаторыИсправлений = Новый Массив;
	ОтозванныеИсправления     = Новый Массив;
	Для Каждого ТекИсправление Из Исправления Цикл
		Если ТекИсправление.Отозвано Тогда
			ОтозванныеИсправления.Добавить(Строка(ТекИсправление.Идентификатор));
		Иначе
			ИдентификаторыИсправлений.Добавить(Строка(ТекИсправление.Идентификатор));
		КонецЕсли;
	КонецЦикла;
	
	ОписаниеФайлов = СлужебнаяЗагрузитьИсправления(ИдентификаторыИсправлений, , Ложь);
	Если ОписаниеФайлов.Ошибка Тогда
		ЗаполнитьЗначенияСвойств(Результат, ОписаниеФайлов);
		ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось автоматически получить и установить исправления (патчи) для текущей версии конфигурации.
					|Не удалось получить информацию о доступных исправлениях.
					|%1'"),
				ОписаниеФайлов.ПодробноеОписаниеОшибки));
		Возврат Результат;
	КонецЕсли;
	
	// Установка исправлений
	
	// Проверить, какие исправления уже установлены.
	УстановленныеИсправления = ОбновлениеКонфигурации.УстановленныеИсправления();
	ИдентификаторыУстановленныхДляПроверки = Новый Соответствие;
	Для Каждого ТекИсправление Из УстановленныеИсправления Цикл
		ИдентификаторыУстановленныхДляПроверки.Вставить(ТекИсправление.Идентификатор, Истина);
	КонецЦикла;
	
	ИсправленияДляУстановкиОписанияСтр     = Новый Массив;
	ИдентификаторыУстановленныхОписанияСтр = Новый Массив;
	ФайлыИсправленийПараметр = Новый Массив;
	Для Каждого ТекИсправление Из ОписаниеФайлов.Исправления Цикл
		ИдентификаторСтр = Строка(ТекИсправление.Идентификатор);
		Если ИдентификаторыУстановленныхДляПроверки[ИдентификаторСтр] = Неопределено Тогда
			ИсправленияДляУстановкиОписанияСтр.Добавить(ИдентификаторСтр);
			Если Не ПустаяСтрока(ТекИсправление.АдресФайла) Тогда
				ФайлыИсправленийПараметр.Добавить(ТекИсправление.АдресФайла);
			Иначе
				ФайлыИсправленийПараметр.Добавить(
					ПоместитьВоВременноеХранилище(
						Новый ДвоичныеДанные(ТекИсправление.ИмяПолученногоФайла)));
			КонецЕсли;
		Иначе
			ИдентификаторыУстановленныхОписанияСтр.Добавить(ИдентификаторСтр);
		КонецЕсли;
	КонецЦикла;
	
	// Вызов установки исправлений.
	ОписаниеИсправлений = Новый Структура;
	ОписаниеИсправлений.Вставить("Установить", ФайлыИсправленийПараметр);
	ОписаниеИсправлений.Вставить("Удалить"   , ОтозванныеИсправления);
	
	Если ОписаниеИсправлений.Установить.Количество() = 0
		И ОписаниеИсправлений.Удалить.Количество() = 0 Тогда
		ЗаписатьИнформациюВЖурналРегистрации(
			НСтр("ru = 'Установка и удаление исправлений не требуются (все исправления были установлены ранее).'"));
		Возврат Результат;
	КонецЕсли;
	
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Вызов установки и удаления исправлений (БСП).
				|Исправления для установки:
				|%1
				|
				|Исправления для удаления (отозванные):
				|%2
				|
				|Уже установлены (исключены из установки):
				|%3.'"),
			СтрСоединить(ИсправленияДляУстановкиОписанияСтр, Символы.ПС),
			СтрСоединить(ОтозванныеИсправления, Символы.ПС),
			СтрСоединить(ИдентификаторыУстановленныхОписанияСтр, Символы.ПС)));
	РезультатУстановки = ОбновлениеКонфигурации.УстановкаИУдалениеИсправлений(ОписаниеИсправлений, Ложь);
	
	// Обработка результата установки
	КраткоеОписаниеОшибки   = Новый Массив;
	ПодробноеОписаниеОшибки = Новый Массив;
	
	// Сбор информации об ошибке установки
	Если РезультатУстановки.НеУстановлено > 0 Тогда
		
		СообщениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось установить исправления (%1 шт.).'"),
			РезультатУстановки.НеУстановлено);
		
		КраткоеОписаниеОшибки.Добавить(СообщениеОшибки);
		ПодробноеОписаниеОшибки.Добавить(СообщениеОшибки);
		
		Для Каждого ТекОшибка Из РезультатУстановки.Ошибки Цикл
			
			Если ТекОшибка.Событие <> "Установка" Тогда
				Продолжить;
			КонецЕсли;
			
			ПодробноеОписаниеОшибки.Добавить(
				"--------------------------------------------------------------------------------");
			ПодробноеОписаниеОшибки.Добавить(ТекОшибка.НомерПатча);
			ПодробноеОписаниеОшибки.Добавить(СокрЛП(ТекОшибка.Причина));
			
		КонецЦикла;
		ПодробноеОписаниеОшибки.Добавить(
			"--------------------------------------------------------------------------------");
		
	КонецЕсли;
	
	// Сбор информации об ошибке удалении
	Если РезультатУстановки.НеУдалено > 0 Тогда
		
		СообщениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось удалить исправления (%1 шт.).'"),
			РезультатУстановки.НеУдалено);
		
		КраткоеОписаниеОшибки.Добавить(СообщениеОшибки);
		ПодробноеОписаниеОшибки.Добавить(СообщениеОшибки);
		
		Для Каждого ТекОшибка Из РезультатУстановки.Ошибки Цикл
			
			Если ТекОшибка.Событие <> "Удаление" Тогда
				Продолжить;
			КонецЕсли;
			
			ПодробноеОписаниеОшибки.Добавить(
				"--------------------------------------------------------------------------------");
			ПодробноеОписаниеОшибки.Добавить(ТекОшибка.НомерПатча);
			ПодробноеОписаниеОшибки.Добавить(СокрЛП(ТекОшибка.Причина));
			
		КонецЦикла;
		ПодробноеОписаниеОшибки.Добавить(
			"--------------------------------------------------------------------------------");
		
	КонецЕсли;
	
	// Ошибкой считается когда не установлено и не удалено ни одно исправление
	Результат.Ошибка                  =
		(РезультатУстановки.НеУстановлено = ОписаниеИсправлений.Установить.Количество()
		И РезультатУстановки.НеУдалено = ОписаниеИсправлений.Удалить.Количество());
	Результат.КраткоеОписаниеОшибки   = СтрСоединить(КраткоеОписаниеОшибки, Символы.ПС);
	Результат.ПодробноеОписаниеОшибки = СтрСоединить(ПодробноеОписаниеОшибки, Символы.ПС);
	Результат.НеУстановлено           = РезультатУстановки.НеУстановлено;
	Результат.НеУдалено               = РезультатУстановки.НеУдалено;
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Завершено автоматическое получение и установка исправлений (патчей) для текущей версии конфигурации.'"));
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ИнтеграцияСБиблиотекойСтандартныхПодсистем

// Возвращает сохраненный ответ сервиса по получению информации о версиях платформы для текущей конфигурации.
//
// Возвращаемое значение:
//  Структура:
//    * МинимальнаяВерсияПлатформы - Строка - список минимальных версий платформы, перечисленные через ";".
//    * РекомендуемаяВерсияПлатформы - Строка - список рекомендуемых версий платформы, перечисленные через ";".
//
Функция ИнформацияОВерсияхПлатформы() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("МинимальнаяВерсияПлатформы"  , "");
	Результат.Вставить("РекомендуемаяВерсияПлатформы", "");
	
	// Прервем чтение настроек, если обновление платформы запрещено
	Если ОбщегоНазначения.РазделениеВключено()
		Или ЭтоЗащищенныйПрограммныйКомплекс()
		Или Не СлужебнаяПараметрыПолученияОбновлений().ПолучатьОбновленияПлатформы Тогда
		
		Возврат Результат;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СохраненныеДанные = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		ПолучениеОбновленийПрограммыКлиентСервер.ИдентификаторОбщихНастроек(),
		КлючНастройкиИнформацияОВерсияхПлатформы(),
		,
		,
		"");
	
	Если ТипЗнч(СохраненныеДанные) = Тип("Структура") Тогда
		
		РасширенныеСохраненныеДанные = Новый Структура();
		РасширенныеСохраненныеДанные.Вставить("ИмяПрограммы"                , "");
		РасширенныеСохраненныеДанные.Вставить("ВерсияПрограммы"             , "");
		РасширенныеСохраненныеДанные.Вставить("МинимальнаяВерсияПлатформы"  , "");
		РасширенныеСохраненныеДанные.Вставить("РекомендуемаяВерсияПлатформы", "");
		
		ЗаполнитьЗначенияСвойств(РасширенныеСохраненныеДанные, СохраненныеДанные);
		
		// Проверка актуальности данных
		ИмяПрограммы    = ИнтернетПоддержкаПользователей.ИмяПрограммы();
		ВерсияПрограммы = ИнтернетПоддержкаПользователей.ВерсияКонфигурации();
		
		Если РасширенныеСохраненныеДанные.ИмяПрограммы = ИмяПрограммы
			И РасширенныеСохраненныеДанные.ВерсияПрограммы = ВерсияПрограммы Тогда
			
			ЗаполнитьЗначенияСвойств(Результат, РасширенныеСохраненныеДанные);
			
		Иначе
			УдалитьИнформациюОВерсияхПлатформы();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Удаляет ранее сохраненный ответ сервиса по получению информации о версиях платформы для текущей конфигурации.
//
Процедура УдалитьИнформациюОВерсияхПлатформы() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекУдалить(
		ПолучениеОбновленийПрограммыКлиентСервер.ИдентификаторОбщихНастроек(),
		КлючНастройкиИнформацияОВерсияхПлатформы(),
		"");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Вызывается при сохранении логина и пароля пользователя ИПП в
// информационной базе из всех контекстов использования библиотеки.
//
// Параметры:
//  Логин - Строка - логин пользователя Интернет-поддержки.
//
Процедура ПриИзмененииДанныхАутентификации(Логин) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	РегламентныеЗаданияСервер.УстановитьИспользованиеРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ПолучениеИУстановкаИсправленийКонфигурации,
		(ЗначениеЗаполнено(Логин) И АвтоматическаяЗагрузкаИсправленийВключена()));
	
КонецПроцедуры

// Добавляет необходимые параметры работы клиента при запуске.
// Добавленные параметры доступны в
// СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиентаПриЗапуске().ИнтернетПоддержкаПользователей.<ИмяПараметра>;
// Используется в том случае, если подсистема реализует сценарий, выполняемый
// при начале работы системы.
// См. ИнтеграцияПодсистемБИП.ПриДобавленииПараметровРаботыКлиентаПриЗапуске
//
// Параметры:
//	Параметры - Структура - заполняемые параметры;
//
Процедура ПараметрыРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	НастройкиОбновления = Неопределено;	// см. НастройкиАвтоматическогоОбновления
	
	Параметры.Вставить("ПолучениеОбновленийПрограммы"                                 , НастройкиОбновления);
	Параметры.Вставить("ПоказатьОповещениеОВключенииАвтоматическойЗагрузкиИсправлений", Ложь);
	Параметры.Вставить("ПроверкаНаличияОбновления"                                    , Неопределено);
	
	Если Не ДоступноИспользованиеОбновленияПрограммы() Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.ПолучениеОбновленийПрограммы = НастройкиАвтоматическогоОбновления();
	
	ПроверитьНаличиеОбновленийПриЗапуске(Параметры);
	
	НастройкиЗагрузкиИсправлений = НастройкиЗагрузкиИсправлений();
	Если Не НастройкиЗагрузкиИсправлений.ОтключитьНапоминания
		И Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ТекущиеДела")
		И ДоступнаАвтоматическаяЗагрузкаИсправлений()
		И Не АвтоматическаяЗагрузкаИсправленийВключена() Тогда
		
		ДатаИнформирования = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			ПолучениеОбновленийПрограммыКлиентСервер.ИдентификаторОбщихНастроек(),
			ПолучениеОбновленийПрограммыКлиентСервер.КлючНастройкиДатаИнформированияОВключенииЗагрузкиИсправлений(),
			'00010101');
		Если ДатаИнформирования <= ТекущаяДатаСеанса() Тогда
			Параметры.ПоказатьОповещениеОВключенииАвтоматическойЗагрузкиИсправлений = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Интеграция с подсистемой СтандартныеПодсистемы.БазоваяФункциональность.
//
// Параметры:
//  ЗапросыРазрешений - см. РаботаВБезопасномРежимеПереопределяемый.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам.ЗапросыРазрешений
//
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		
		НовыеРазрешения = Новый Массив;
		МодульРаботаВБезопасномРежиме = ОбщегоНазначения.ОбщийМодуль("РаботаВБезопасномРежиме");
		
		Разрешение = МодульРаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
			"HTTP",
			"downloads.v8.1c.ru",
			80,
			НСтр("ru = 'Получение файлов обновлений программы (зона ru)'"));
		НовыеРазрешения.Добавить(Разрешение);
		
		Разрешение = МодульРаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
			"HTTP",
			"downloads.v8.1c.eu",
			80,
			НСтр("ru = 'Получение файлов обновлений программы (зона eu)'"));
		НовыеРазрешения.Добавить(Разрешение);
		
		Разрешение = МодульРаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
			"HTTPS",
			"update-api.1c.ru",
			443,
			НСтр("ru = 'Сервис получения обновлений программы (зона ru)'"));
		НовыеРазрешения.Добавить(Разрешение);
		
		Разрешение = МодульРаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
			"HTTPS",
			"update-api.1c.eu",
			443,
			НСтр("ru = 'Сервис получения обновлений программы (зона eu)'"));
		НовыеРазрешения.Добавить(Разрешение);
		
		ЗапросыРазрешений.Добавить(МодульРаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(НовыеРазрешения));
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список обработчиков обновления информационной базы.
//
// Параметры:
//  Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	РазделениеВключено = ОбщегоНазначения.РазделениеВключено();
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "2.1.8.1";
	Обработчик.Процедура =
		"ПолучениеОбновленийПрограммы.ОбновлениеИнформационнойБазы_ОбновитьНастройкиПолученияОбновлений_2_1_8_1";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения     = "Оперативно";
	
	Если Не РазделениеВключено Тогда
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия              = "2.4.2.59";
		Обработчик.Процедура           = "ПолучениеОбновленийПрограммы.ОбновитьРасписаниеЗагрузкиИсправлений";
		Обработчик.ОбщиеДанные         = Ложь;
		Обработчик.НачальноеЗаполнение = Ложь;
		Обработчик.РежимВыполнения     = "Отложенно";
		Обработчик.Идентификатор       = Новый УникальныйИдентификатор("d7d83d59-29bb-43ce-838c-339151202fde");
		Обработчик.Комментарий         = НСтр("ru = 'Обновление расписания загрузки исправлений (патчей).'");
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия              = "";
		Обработчик.Процедура           = "ПолучениеОбновленийПрограммы.ОбновитьРасписаниеЗагрузкиИсправлений";
		Обработчик.ОбщиеДанные         = Ложь;
		Обработчик.НачальноеЗаполнение = Истина;
		Обработчик.РежимВыполнения     = "Отложенно";
		Обработчик.Идентификатор       = Новый УникальныйИдентификатор("a7503eb2-d55f-4f03-883b-1ffafdd7cba5");
		Обработчик.Комментарий         =
			НСтр("ru = 'Начальное заполнение. Обновление расписания загрузки исправлений (патчей).'");
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия              = "2.7.1.36";
		Обработчик.Процедура           =
			"ПолучениеОбновленийПрограммы.ОбновитьРасписаниеЗаданияПоОбновлениюИнформацииОВерсияхПлатформы";
		Обработчик.ОбщиеДанные         = Ложь;
		Обработчик.НачальноеЗаполнение = Ложь;
		Обработчик.РежимВыполнения     = "Отложенно";
		Обработчик.Идентификатор       = Новый УникальныйИдентификатор("aa92254f-635d-446d-a779-8637e2700474");
		Обработчик.Комментарий         =
			НСтр("ru = 'Обновление расписания регламентной операции по обновлению информации о версиях платформы.'");
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия              = "";
		Обработчик.Процедура           =
			"ПолучениеОбновленийПрограммы.ОбновитьРасписаниеЗаданияПоОбновлениюИнформацииОВерсияхПлатформы";
		Обработчик.ОбщиеДанные         = Ложь;
		Обработчик.НачальноеЗаполнение = Истина;
		Обработчик.РежимВыполнения     = "Отложенно";
		Обработчик.Идентификатор       = Новый УникальныйИдентификатор("f06d3442-9f10-4a6d-979d-0324b1ce5949");
		Обработчик.Комментарий         =
			НСтр("ru = 'Начальное заполнение. Обновление расписания регламентной операции по обновлению информации о версиях платформы.'");
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия              = "2.7.4.4";
		Обработчик.Процедура           = "ПолучениеОбновленийПрограммы.ИсправитьРасписаниеЗагрузкиИсправлений";
		Обработчик.ОбщиеДанные         = Ложь;
		Обработчик.НачальноеЗаполнение = Ложь;
		Обработчик.РежимВыполнения     = "Отложенно";
		Обработчик.Идентификатор       = Новый УникальныйИдентификатор("bd1168b7-2046-4cae-baf0-b40246971d0a");
		Обработчик.Комментарий         =
			НСтр("ru = 'Исправление расписания загрузки исправлений (патчей).'");
		
	КонецЕсли;
	
	Если Не РазделениеВключено
		И СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации()
		И ДоступнаАвтоматическаяЗагрузкаИсправлений()
		И Не АвтоматическаяЗагрузкаИсправленийВключена() Тогда
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия              = "2.5.1.51";
		Обработчик.Процедура           = "ПолучениеОбновленийПрограммы.ВключитьАвтоматическуюЗагрузкуИсправлений";
		Обработчик.ОбщиеДанные         = Ложь;
		Обработчик.НачальноеЗаполнение = Ложь;
		Обработчик.РежимВыполнения     = "Отложенно";
		Обработчик.Идентификатор       = Новый УникальныйИдентификатор("15411940-c2c6-4299-a80e-f7deaec31f36");
		Обработчик.Комментарий         =
			НСтр("ru = 'Установка настройки автоматической загрузки исправлений (патчей).'");
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия              = "";
		Обработчик.Процедура           = "ПолучениеОбновленийПрограммы.ВключитьАвтоматическуюЗагрузкуИсправлений";
		Обработчик.ОбщиеДанные         = Ложь;
		Обработчик.НачальноеЗаполнение = Истина;
		Обработчик.РежимВыполнения     = "Отложенно";
		Обработчик.Идентификатор       = Новый УникальныйИдентификатор("da082492-99e3-4dbd-870e-bc12fb62f1ad");
		Обработчик.Комментарий         =
			НСтр("ru = 'Начальное заполнение. Установка настройки автоматической загрузки исправлений (патчей).'");
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает идентификаторы установленных исправлений (патчей) конфигурации.
//
// Возвращаемое значение:
//  Массив из Строка
//
Функция ИдентификаторыУстановленныхИсправлений() Экспорт
	
	// Список идентификаторов исправлений конфигурации не является
	// секретной информацией, поэтому доступен для получения любому
	// пользователю ИБ.
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Массив;
	УстановленныеИсправления = ОбновлениеКонфигурации.УстановленныеИсправления();
	Для Каждого ТекИсправление Из УстановленныеИсправления Цикл
		Если ЗначениеЗаполнено(ТекИсправление.Идентификатор) Тогда
			Результат.Добавить(Строка(ТекИсправление.Идентификатор));
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает информацию о доступном обновлении в сценарии рабочего обновления.
//
// Возвращаемое значение:
//  см. ИнформацияОДоступномОбновленииСлужебная
//
Функция ИнформацияОДоступномОбновлении() Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("НастройкиСоединения",
		ИнтернетПоддержкаПользователей.НастройкиСоединенияССерверами());
	Возврат ИнформацияОДоступномОбновленииСлужебная(
		ИнтернетПоддержкаПользователей.СлужебнаяИмяПрограммы(),
		ИнтернетПоддержкаПользователей.ВерсияКонфигурации(),
		"",
		"",
		"РабочееОбновление",
		ДополнительныеПараметры);
	
КонецФункции

// Возвращает настройки загрузки и установки переопределяемого метода.
//
// Возвращаемое значение:
//  Структура - Дополнительные настройки загрузки исправлений:
//    * ОтключитьНапоминания - Булево - Истина, если необходимо отключить создание задачи по включению автоматической
//        загрузки исправлений в подсистеме БСП.ТекущиеДела и не показывать оповещение пользователю при старте системы,
//        если подсистема БСП.ТекущиеДела отсутствует в конфигурации.
//        Значение по умолчанию - Ложь.
//    * Подсистемы - Массив из Структура - список программ, исправления которых необходимо загружать и устанавливать:
//        ** ИмяПодсистемы - Строка - имя подсистемы, например, "ИнтернетПоддержкиПользователей".
//        ** ИдентификаторИнтернетПоддержки - Строка - имя программы в сервисах Интернет-поддержки.
//        ** Версия - Строка - версия программы в формате из 4-х цифр, например, "2.1.3.1".
//
Функция НастройкиЗагрузкиИсправлений() Экспорт
	
	Настройки = Новый Структура();
	Настройки.Вставить("ОтключитьНапоминания", Ложь);
	Настройки.Вставить("Подсистемы"          , Новый Массив());
	
	ПолучениеОбновленийПрограммыПереопределяемый.ПриОпределенииНастроекЗагрузкиИсправлений(Настройки);
	
	Возврат Настройки;
	
КонецФункции

// Возвращает разрешения компонентов подсистемы получения обновлений.
//
// Возвращаемое значение:
//  Структура:
//    * ПолучатьОбновленияКонфигурации - Булево - Истина, если разрешено загружать и устанавливать обновления.
//    * ПолучатьИсправления - Булево - Истина, если разрешено загружать и устанавливать исправления.
//    * ПолучатьОбновленияПлатформы - Булево - Истина, если разрешено загружать и устанавливать новые версии платформы.
//    * ВыбиратьКаталогСохраненияДистрибутиваПлатформы - Булево - Истина, если разрешено переопределить адрес каталог
//        загрузки дистрибутива в пользовательском интерфейсе.
//    * ИнформироватьОВыходеВерсийДлительнойПоддержки - Булево - если Истина, то программа будет отправлять уведомления
//        о выходе новых сборок текущей версии в период срока поддержки и о выходе новых версий после окончания срока
//        поддержки у текущей версии.
//
Функция СлужебнаяПараметрыПолученияОбновлений() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ПолучатьОбновленияКонфигурации"                , Истина);
	Результат.Вставить("ПолучатьИсправления"                           , Истина);
	Результат.Вставить("ПолучатьОбновленияПлатформы"                   , Истина);
	Результат.Вставить("ВыбиратьКаталогСохраненияДистрибутиваПлатформы", Истина);
	
	ИнтеграцияПодсистемБИП.ПриОпределенииПараметровПолученияОбновлений(
		Результат);
	ПолучениеОбновленийПрограммыПереопределяемый.ПриОпределенииПараметровПолученияОбновлений(
		Результат);
	
	НастройкиОбновления = НастройкиАвтоматическогоОбновления();
	Результат.Вставить("ИнформироватьОВыходеВерсийДлительнойПоддержки",
		НастройкиОбновления.ВариантИнформированияОВыходеОбновлений = 1);
	
	Возврат Результат;
	
КонецФункции

#Область ИнтеграцияПодсистемИнтернетПоддержкиПользователей

// Заполняет описание используемых в подсистеме хостов сервисов Интернет-поддержки.
//
// Параметры:
//  ХостыСервисовИнтернетПоддержки - Соответствие из КлючИЗначение - хост и название используемого сервиса:
//    * Ключ - Строка - хост сервиса.
//    * Значение - Строка - описание сервиса.
//
Процедура ПриЗаполненииХостовСервисовИнтернетПоддержки(ХостыСервисовИнтернетПоддержки) Экспорт
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		
		ХостыСервисовИнтернетПоддержки.Вставить(
			"downloads.v8.1c.ru",
			НСтр("ru = 'Получение файлов обновлений программы'"));
		ХостыСервисовИнтернетПоддержки.Вставить(
			"downloads.v8.1c.eu",
			НСтр("ru = 'Получение файлов обновлений программы'"));
		ХостыСервисовИнтернетПоддержки.Вставить(
			ХостСервисаОбновлений(0),
			НСтр("ru = 'Получение обновлений программы'"));
		ХостыСервисовИнтернетПоддержки.Вставить(
			ХостСервисаОбновлений(1),
			НСтр("ru = 'Получение обновлений программы'"));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиПрограммы

// Вызывается из обработчика ПриСозданииНаСервере() панели администрирования БИП.
// Выполняет настройку отображения элементов управления подсистемы.
//
// Параметры:
//  Форма - см. Обработка.ПанельАдминистрированияБИП.Форма.ИнтернетПоддержкаИСервисы
//
Процедура ИнтернетПоддержкаИСервисы_ПриСозданииНаСервере(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	Элементы.ГруппаОбновлениеПрограммы.Видимость = Истина;
	
	ПараметрыПолученияОбновлений = СлужебнаяПараметрыПолученияОбновлений();
	ПараметрыДоступа             = ПараметрыДоступаКОбновлениюПрограммы();
	
	ПолучениеОбновленийРазрешено = ПараметрыДоступа.ДоступнаПодсистема
		И (ПараметрыПолученияОбновлений.ПолучатьОбновленияКонфигурации
		Или ПараметрыПолученияОбновлений.ПолучатьИсправления
		Или ПараметрыПолученияОбновлений.ПолучатьОбновленияПлатформы);
	ДоступенПросмотрИнформацииОбОбновлениях = ПолучениеОбновленийРазрешено
		И Не ПараметрыДоступа.ЭтоВебПодключение;
	ДоступноПрименениеОбновлений = ПараметрыДоступа.ДоступнаПодсистема
		И ПараметрыДоступа.ДоступнаУстановка
		И ПараметрыДоступа.ЭтоWindowsКлиент
		И Не ПараметрыДоступа.ЭтоВебПодключение;
	
	Элементы.ОбновлениеПрограммы.Видимость                  = ДоступенПросмотрИнформацииОбОбновлениях;
	Элементы.ГруппаОбновлениеПрограммы_Настройки.Видимость  = ПолучениеОбновленийРазрешено;
	Элементы.ГруппаОбновлениеПрограммыИсправления.Видимость =
		ПараметрыПолученияОбновлений.ПолучатьИсправления
		И ПараметрыДоступа.ДоступнаПодсистема
		И ПараметрыДоступа.ДоступнаУстановка;
	Элементы.ГруппаОбновлениеПрограммы_АвтоматическаяПроверкаОбновлений2.Видимость = ПолучениеОбновленийРазрешено;
	Элементы.ГруппаОбновлениеПрограммы_ВариантИнформированияОВыходеОбновлений.Видимость =
		ПараметрыПолученияОбновлений.ПолучатьОбновленияКонфигурации;
	
	НастройкиОбновления = НастройкиАвтоматическогоОбновления();
	
	Если ПолучениеОбновленийРазрешено Тогда
		Форма.АвтоматическаяПроверкаОбновлений =
			НастройкиОбновления.РежимАвтоматическойПроверкиНаличияОбновленийПрограммы;
		Элементы.ДекорацияРасписаниеПроверкиОбновлений.Доступность =
			(Форма.АвтоматическаяПроверкаОбновлений = 2);
		Элементы.ДекорацияРасписаниеПроверкиОбновлений.Заголовок =
			ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеРасписания(НастройкиОбновления.Расписание);
	КонецЕсли;
	
	Форма.ВариантИнформированияОВыходеОбновлений = НастройкиОбновления.ВариантИнформированияОВыходеОбновлений;
	
	Если Элементы.ГруппаОбновлениеПрограммыИсправления.Видимость Тогда
		Форма.ЗагружатьИУстанавливатьИсправленияАвтоматически =
			Константы.ЗагружатьИУстанавливатьИсправленияАвтоматически.Получить();
		Задание = РегламентныеЗаданияСервер.ПолучитьРегламентноеЗадание(
			Метаданные.РегламентныеЗадания.ПолучениеИУстановкаИсправленийКонфигурации);
		Если Задание <> Неопределено Тогда
			Элементы.ДекорацияРасписаниеУстановкаИсправлений.Заголовок =
				ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеРасписания(Задание.Расписание);
		КонецЕсли;
		Элементы.ДекорацияРасписаниеУстановкаИсправлений.Доступность =
			Форма.ЗагружатьИУстанавливатьИсправленияАвтоматически;
	КонецЕсли;
	
	Если Не ЭтоФайловаяИБ()
		Или Не ДоступноПрименениеОбновлений
		Или Не ПараметрыПолученияОбновлений.ПолучатьОбновленияПлатформы Тогда
		
		Элементы.КаталогДистрибутиваПлатформы.Видимость = Ложь;
		
	Иначе
		Форма.КаталогДистрибутиваПлатформы = КаталогСохраненияПоследнегоПолученногоДистрибутива();
		Элементы.КаталогДистрибутиваПлатформы.Видимость =
			ПолучениеОбновленийПрограммыКлиентСервер.ФайлСуществует(Форма.КаталогДистрибутиваПлатформы, Истина);
	КонецЕсли;
	
	// СтандартныеПодсистемы.ОбновлениеВерсииИБ
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаОткрытьОписаниеИзмененийСистемы",
		"Видимость",
		Пользователи.РолиДоступны("ПросмотрОписанияИзмененийПрограммы", , Ложь));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"РезультатыОбновленияИДополнительнаяОбработкаДанных",
		"Видимость",
		Форма.ЭтоАдминистраторСистемы);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаДетализироватьОбновлениеИБВЖурналеРегистрации",
		"Видимость",
		Форма.ЭтоАдминистраторСистемы
			И (Не Форма.РазделениеВключено
				Или Не Форма.ДоступноИспользованиеРазделенныхДанных));
	
	// Конец СтандартныеПодсистемы.ОбновлениеВерсииИБ
	
КонецПроцедуры

#КонецОбласти

#Область ПерсональныеНастройкиПользователя

// Возвращает персональные настройки автоматического обновления.
//
// Возвращаемое значение:
//  см. НовыйНастройкиАвтоматическогоОбновления
//
Функция НастройкиАвтоматическогоОбновления() Экспорт
	
	Результат           = НовыйНастройкиАвтоматическогоОбновления();
	УстаревшиеПараметры = Новый Структура("СпособАвтоматическойПроверки");
	Настройки           = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		ПолучениеОбновленийПрограммыКлиентСервер.ИдентификаторОбщихНастроек(),
		КлючНастройкиАвтоматическогоОбновления());
	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(Результат, Настройки);
		ЗаполнитьЗначенияСвойств(УстаревшиеПараметры, Настройки);
		Если УстаревшиеПараметры.СпособАвтоматическойПроверки <> Неопределено Тогда
			Результат.РежимАвтоматическойПроверкиНаличияОбновленийПрограммы =
				УстаревшиеПараметры.СпособАвтоматическойПроверки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Записывает персональные настройки автоматического обновления.
//
// Параметры:
//  Настройки - см. НовыйНастройкиАвтоматическогоОбновления
//
Процедура ЗаписатьНастройкиАвтоматическогоОбновления(Настройки) Экспорт
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		ПолучениеОбновленийПрограммыКлиентСервер.ИдентификаторОбщихНастроек(),
		КлючНастройкиАвтоматическогоОбновления(),
		Настройки);
	
КонецПроцедуры

#КонецОбласти

#Область БСПТекущиеДела

// Интеграция с подсистемой СтандартныеПодсистемы.ТекущиеДела.
// Заполняет список текущих дел пользователя.
//
// Параметры:
//  ТекущиеДела - ТаблицаЗначений - таблица значений с колонками:
//    * Идентификатор - Строка - внутренний идентификатор дела, используемый механизмом "Текущие дела".
//    * ЕстьДела      - Булево - если Истина, дело выводится в списке текущих дел пользователя.
//    * Важное        - Булево - если Истина, дело будет выделено красным цветом.
//    * Представление - Строка - представление дела, выводимое пользователю.
//    * Количество    - Число  - количественный показатель дела, выводится в строке заголовка дела.
//    * Форма         - Строка - полный путь к форме, которую необходимо открыть при нажатии на гиперссылку
//                               дела на панели "Текущие дела".
//    * ПараметрыФормы - Структура - параметры, с которыми нужно открывать форму показателя.
//    * Владелец      - Строка, ОбъектМетаданных - строковый идентификатор дела, которое будет владельцем для текущего
//                      или объект метаданных подсистема.
//    * Подсказка     - Строка - текст подсказки.
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ТекущиеДела") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСписокТекущиеДелОбновленияПрограммы(ТекущиеДела);
	ЗаполнитьСписокТекущихДелАвтоматическойЗагрузкиИсправлений(ТекущиеДела);
	
КонецПроцедуры

#КонецОбласти

#Область БСПРаботаВМоделиСервиса

// См. ПоставляемыеДанныеПереопределяемый.ПолучитьОбработчикиПоставляемыхДанных
//
Процедура ПриОпределенииОбработчиковПоставляемыхДанных(Обработчики) Экспорт
	
	СтрОбработчик = Обработчики.Добавить();
	СтрОбработчик.ВидДанных      = ВидПоставляемыхДанныхИсправления();
	СтрОбработчик.КодОбработчика = ВидПоставляемыхДанныхИсправления();
	СтрОбработчик.Обработчик     = ОбщегоНазначения.ОбщийМодуль("ПолучениеОбновленийПрограммы");
	
КонецПроцедуры

// Вызывается при получении уведомления о новых данных.
// В теле следует проверить, необходимы ли эти данные приложению,
//  и если ДА - установить флажок Загружать.
// 
// Параметры:
//   Дескриптор - ОбъектXDTO
//   Загружать - Булево - (возвращаемое) признак загрузки новых данных.
//
Процедура ДоступныНовыеДанные(Знач Дескриптор, Загружать) Экспорт
	
	Если Дескриптор.DataType <> ВидПоставляемыхДанныхИсправления() Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиОбновления = СлужебнаяПараметрыПолученияОбновлений();
	Если Не НастройкиОбновления.ПолучатьИсправления Тогда
		ЗаписатьИнформациюВЖурналРегистрации(
			НСтр("ru = 'Установка исправлений (патчей) запрещена в настройках конфигурации.'"));
		Загружать = Ложь;
		Возврат;
	КонецЕсли;
	
	УдалитьИсправление       = Ложь;
	Идентификатор            = "";
	ДополнительныеПодсистемы = НастройкиЗагрузкиИсправлений().Подсистемы;
	
	Для каждого Характеристика Из Дескриптор.Properties.Property Цикл
		Если Характеристика.Code = "ДанныеВерсийПрограмм" Тогда
			ДоступныеВерсии = ОбщегоНазначения.ЗначениеИзСтрокиXML(
				Характеристика.Value);
			Для Каждого ОписаниеВерсии Из ДоступныеВерсии Цикл
				Если ОписаниеВерсии.ИмяКонфигурации = ИнтернетПоддержкаПользователей.ИмяКонфигурации()
					И ОписаниеВерсии.ВерсияКонфигурации = ИнтернетПоддержкаПользователей.ВерсияКонфигурации() Тогда
					Загружать = Истина;
					Прервать;
				Иначе
					Для Каждого ТекПодсистема Из ДополнительныеПодсистемы Цикл
						Если ОписаниеВерсии.ИмяКонфигурации = ТекПодсистема.ИмяПодсистемы
							И ОписаниеВерсии.ВерсияКонфигурации = ТекПодсистема.Версия Тогда
							Загружать = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если Загружать Тогда
						Прервать
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли Характеристика.Code = "СтатусВыхода" Тогда
			Если Характеристика.Value = "revocation" Тогда
				УдалитьИсправление = Истина;
			КонецЕсли;
		ИначеЕсли Характеристика.Code = "Идентификатор" Тогда
			Идентификатор = Характеристика.Value;
		КонецЕсли;
	КонецЦикла;
	
	Если УдалитьИсправление Тогда
		
		ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Отзыв исправления: %1'"),
				Идентификатор));
			
		// Удаление отозванных исправлений.
		УдаляемыеИсправления = Новый Массив;
		УдаляемыеИсправления.Добавить(Идентификатор);
		
		Исправления = Новый Структура;
		Исправления.Вставить("Установить", Новый Массив);
		Исправления.Вставить("Удалить",    УдаляемыеИсправления);
		
		ОбновлениеКонфигурации.УстановкаИУдалениеИсправлений(Исправления);
		Загружать = Ложь;
		
	Иначе
		
		// Проверка ранее установленных исправлений.
		УстановленныеИсправления = ОбновлениеКонфигурации.УстановленныеИсправления();
		Для Каждого ОписательИсправления Из УстановленныеИсправления Цикл
			Если Строка(ОписательИсправления.Идентификатор) = Идентификатор Тогда
				Загружать = Ложь;
				Возврат;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается после вызова ДоступныНовыеДанные, позволяет разобрать данные.
//
// Параметры:
//   Дескриптор - ОбъектXDTO
//   ПутьКФайлу - Строка - полное имя извлеченного файла. Файл будет автоматически удален после завершения процедуры.
//
Процедура ОбработатьНовыеДанные(Знач Дескриптор, Знач ПутьКФайлу) Экспорт
	
	Если Дескриптор.DataType <> ВидПоставляемыхДанныхИсправления() Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиОбновления = СлужебнаяПараметрыПолученияОбновлений();
	Если Не НастройкиОбновления.ПолучатьИсправления Тогда
		ЗаписатьИнформациюВЖурналРегистрации(
			НСтр("ru = 'Установка исправлений (патчей) запрещена в настройках конфигурации.'"));
		Возврат;
	КонецЕсли;
	
	ДополнительныеПодсистемы = НастройкиЗагрузкиИсправлений().Подсистемы;
	
	// Необходимо выполнить повторную проверку, т.к. после загрузки
	// поставляемых данных в ИБ, может измениться номер версии конфигурации.
	Установить = Ложь;
	Для каждого Характеристика Из Дескриптор.Properties.Property Цикл
		Если Характеристика.Code = "ДанныеВерсийПрограмм" Тогда
			ДоступныеВерсии = ОбщегоНазначения.ЗначениеИзСтрокиXML(
				Характеристика.Value);
			Для Каждого ОписаниеВерсии Из ДоступныеВерсии Цикл
				Если ОписаниеВерсии.ИмяКонфигурации = ИнтернетПоддержкаПользователей.ИмяКонфигурации()
					И ОписаниеВерсии.ВерсияКонфигурации = ИнтернетПоддержкаПользователей.ВерсияКонфигурации() Тогда
					Установить = Истина;
					Прервать;
				Иначе
					Для Каждого ТекПодсистема Из ДополнительныеПодсистемы Цикл
						Если ОписаниеВерсии.ИмяКонфигурации = ТекПодсистема.ИмяПодсистемы
							И ОписаниеВерсии.ВерсияКонфигурации = ТекПодсистема.Версия Тогда
							Установить = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если Установить Тогда
						Прервать
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	МодульПоставляемыеДанные = ОбщегоНазначения.ОбщийМодуль("ПоставляемыеДанные");
	
	Если Не Установить Тогда
		ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Установка нового исправления не возможна, т.к.
						|в дескрипторе поставляемых данных отсутствует номер
						|версии конфигурации:
						|%1'"),
				МодульПоставляемыеДанные.ПолучитьОписаниеДанных(Дескриптор)));
		Возврат;
	КонецЕсли;
	
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Установка нового исправления:
				|%1'"),
			МодульПоставляемыеДанные.ПолучитьОписаниеДанных(Дескриптор)));
	
	ДанныеИсправления = Новый ДвоичныеДанные(ПутьКФайлу);
	УстанавливаемыеИсправления = Новый Массив;
	УстанавливаемыеИсправления.Добавить(ПоместитьВоВременноеХранилище(ДанныеИсправления));
	
	Исправления = Новый Структура;
	Исправления.Вставить("Установить", УстанавливаемыеИсправления);
	Исправления.Вставить("Удалить",    Новый Массив);
	
	ОбновлениеКонфигурации.УстановкаИУдалениеИсправлений(Исправления);
	
КонецПроцедуры

// Вызывается при отмене обработки данных в случае сбоя
//
// Параметры:
//  Дескриптор - ОбъектXDTO
//
Процедура ОбработкаДанныхОтменена(Знач Дескриптор) Экспорт
	
	МодульПоставляемыеДанные = ОбщегоНазначения.ОбщийМодуль("ПоставляемыеДанные");
	
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Обработка поставляемых данных не выполнена.
				|Поставляемые данные:
				|%1'"),
			МодульПоставляемыеДанные.ПолучитьОписаниеДанных(Дескриптор)));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает доступность подсистемы обновления программы, наличие права применить обновления, информацию об
// операционной системе клиента и способ подключения клиента к информационной базе.
//
// Возвращаемое значение:
//  Структура:
//    * ДоступнаПодсистема - Булево - Истина, если доступно использовать подсистему без учета операционной системы и
//          способа подключения клиента.
//    * ДоступнаУстановка - Булево - Истине, если текущий пользователь администратор системы.
//    * ЭтоWindowsКлиент - Булево - Истина, если операционная система клиента Windows.
//    * ЭтоВебПодключение - Булево - Истина, если используется веб-клиент или тонкий клиент подключенный через веб-сервер.
//
Функция ПараметрыДоступаКОбновлениюПрограммы()
	
	ДоступнаПодсистема = Не (ОбщегоНазначения.РазделениеВключено()
		Или Не Пользователи.РолиДоступны("ПросмотрИнформацииОДоступныхОбновленияхПрограммы", , Ложь)
		Или Пользователи.ЭтоСеансВнешнегоПользователя()
		Или ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ()
		Или ОбщегоНазначения.ЭтоАвтономноеРабочееМесто());
	ЭтоВебПодключение = ОбщегоНазначения.ЭтоВебКлиент()
		Или ОбщегоНазначения.КлиентПодключенЧерезВебСервер();
	
	Результат = Новый Структура();
	Результат.Вставить("ДоступнаПодсистема", ДоступнаПодсистема);
	Результат.Вставить("ДоступнаУстановка" , ЭтоАдминистраторСистемы());
	Результат.Вставить("ЭтоWindowsКлиент"  , ОбщегоНазначения.ЭтоWindowsКлиент());
	Результат.Вставить("ЭтоВебПодключение" , ЭтоВебПодключение);
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоФайловаяИБ() Экспорт
	
	Возврат ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
КонецФункции

Функция ЭтоАдминистраторСистемы(УчитыватьПривилегированныйРежим = Ложь) Экспорт
	
	Возврат Пользователи.ЭтоПолноправныйПользователь(, Истина, УчитыватьПривилегированныйРежим);
	
КонецФункции

Функция ЭтоБазоваяВерсияКонфигурации() Экспорт
	
	Возврат СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации();
	
КонецФункции

// Выполняет проверку используемого варианта приложения и возвращает Истина, если вариант поставки платформы относится к
// защищенным.
//
// Возвращаемое значение:
//  Булево
//
Функция ЭтоЗащищенныйПрограммныйКомплекс()
	
	СистемныеСвойства = Новый Структура();
	СистемныеСвойства.Вставить("ВариантПриложения", "");
	
	// Свойство ВариантПриложения у объекта СистемнаяИнформация реализовано в платформе 8.3.22+
	СистемнаяИнформация = Новый СистемнаяИнформация();
	ЗаполнитьЗначенияСвойств(СистемныеСвойства, СистемнаяИнформация);
	
	Возврат Не ПустаяСтрока(СистемныеСвойства.ВариантПриложения);
	
КонецФункции

Функция СлужебнаяДоступноИспользованиеПолученияОбновленийПлатформы(
	ПроверитьВозможностьАвтоматическойУстановки = Ложь) Экспорт
	
	Если ОбщегоНазначения.ЭтоВебКлиент()
		Или ОбщегоНазначения.РазделениеВключено()
		Или ЭтоЗащищенныйПрограммныйКомплекс()
		Или Не СлужебнаяПараметрыПолученияОбновлений().ПолучатьОбновленияПлатформы
		Или Не Пользователи.ЭтоПолноправныйПользователь(, Истина)
		Или ПроверитьВозможностьАвтоматическойУстановки
			И Не ЭтоФайловаяИБ()
		Или Пользователи.ЭтоСеансВнешнегоПользователя()
		Или Не ОбщегоНазначения.ЭтоWindowsСервер() Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ИнформацияОДоступномОбновленииВНастройках()
	
	Попытка
		
		Результат           = НовыйОписаниеСохраняемойИнформацииОДоступномОбновлении();
		СохраненноеЗначение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			ПолучениеОбновленийПрограммыКлиентСервер.ИдентификаторОбщихНастроек(),
			КлючНастройкиИнформацияОДоступномОбновлении());
		
		Если ТипЗнч(СохраненноеЗначение) = Тип("Структура") Тогда
			ЗаполнитьЗначенияСвойств(Результат, СохраненноеЗначение);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
		Если Результат.ИмяПрограммы <> ИнтернетПоддержкаПользователей.СлужебнаяИмяПрограммы()
			Или Результат.МетаданныеИмя <> ИнтернетПоддержкаПользователей.ИмяКонфигурации()
			Или Результат.МетаданныеВерсия <> ИнтернетПоддержкаПользователей.ВерсияКонфигурации()
			Или Результат.ВерсияПлатформы <> ИнтернетПоддержкаПользователей.ТекущаяВерсияПлатформы1СПредприятие()
			Или ТипЗнч(Результат.ИнформацияОДоступномОбновлении) <> Тип("Структура") Тогда
			
			Возврат Неопределено;
			
		Иначе
			Возврат Результат.ИнформацияОДоступномОбновлении;
		КонецЕсли;
		
	Исключение
		
		ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось получить информацию о доступном обновлении из настроек пользователя.
					|%1'"),
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции

// Подготавливает объект с информацией о доступном обновлении.
//
// Параметры:
//  ИнформацияОДоступномОбновлении - Неопределено - информация о доступных обновлениях отсутствует.
//                                 - см. ИнформацияОДоступномОбновленииСлужебная
//  ДляТекущихДел - Булево - Истина, если необходимо подготовить информацию о доступных обновлениях для подсистемы
//    СтандартныеПодсистемы.ТекущиеДела.
//
// Возвращаемое значение:
//  Неопределено - нет доступных обновлений.
//  Структура:
//    * Текст - Строка - информация о доступном обновлении.
//    * РекомендуетсяУстановить - Булево
//    * Важное - Булево
//    * Ошибка - Булево
//
Функция ПараметрыОповещенияОДоступномОбновлении(ИнформацияОДоступномОбновлении, ДляТекущихДел = Ложь)
	
	Если ТипЗнч(ИнформацияОДоступномОбновлении) <> Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Структура();
	Результат.Вставить("Текст"                  , "");
	Результат.Вставить("РекомендуетсяУстановить", Ложь);
	Результат.Вставить("Важное"                 , Ложь);
	Результат.Вставить("Ошибка"                 , Ложь);
	
	Если Не ПустаяСтрока(ИнформацияОДоступномОбновлении.ИмяОшибки) Тогда
		
		Если ИнформацияОДоступномОбновлении.ИмяОшибки = "ConnectError"
			Или ИнформацияОДоступномОбновлении.ИмяОшибки = "ServerError"
			Или ИнформацияОДоступномОбновлении.ИмяОшибки = "ClientError" Тогда
			
			// Обработать ошибку подключения.
			Результат.Текст  = НСтр("ru = 'Не удалось проверить наличие обновлений программы.'");
			Результат.Важное = Истина;
			Результат.Ошибка = Истина;
			
			Возврат Результат;
			
		КонецЕсли;
		
	Иначе
		
		ОбновлениеКомКонф  = ИнформацияОДоступномОбновлении.Конфигурация;
		ОбновлениеКомПл    = ИнформацияОДоступномОбновлении.Платформа;
		ДоступноОбновление =
			(ОбновлениеКомКонф <> Неопределено
			И ОбновлениеКомКонф.ДоступноОбновление
			Или ИнформацияОДоступномОбновлении.Исправления <> Неопределено
			И ИнформацияОДоступномОбновлении.Исправления.Количество() > 0
			И Не АвтоматическаяЗагрузкаИсправленийВключена()
			Или ОбновлениеКомПл <> Неопределено
			И ОбновлениеКомПл.ДоступноОбновление);
		
		Если ДоступноОбновление Тогда
			
			// Текущий версия на длительной поддержке
			Если ИнформацияОДоступномОбновлении.ОкончаниеПоддержкиТекущейВерсии <> Неопределено
				И ИнформацияОДоступномОбновлении.ОкончаниеПоддержкиТекущейВерсии > ТекущаяДатаСеанса()
				И НастройкиАвтоматическогоОбновления().ВариантИнформированияОВыходеОбновлений = 1 Тогда
				
				// Поиск доступного обновления для текущей версии без номера сборки
				ДоступноОбновлениеТекущейВерсии = Ложь;
				ТекущаяВерсияБезСборки          = ОбщегоНазначенияКлиентСервер.ВерсияКонфигурацииБезНомераСборки(
					ИнтернетПоддержкаПользователей.ВерсияКонфигурации());
				
				Если ОбновлениеКомКонф <> Неопределено
					И ТекущаяВерсияБезСборки = ОбщегоНазначенияКлиентСервер.ВерсияКонфигурацииБезНомераСборки(ОбновлениеКомКонф.Версия) Тогда
					
					ДоступноОбновлениеТекущейВерсии = Истина;
					
				Иначе
					Для Каждого ДополнительнаяВерсия Из ИнформацияОДоступномОбновлении.ДополнительныеВерсии Цикл
						ВерсияБезНомераСборки = ОбщегоНазначенияКлиентСервер.ВерсияКонфигурацииБезНомераСборки(
							ДополнительнаяВерсия.Конфигурация.Версия);
						Если ТекущаяВерсияБезСборки = ВерсияБезНомераСборки Тогда
							ДоступноОбновлениеТекущейВерсии = ДополнительнаяВерсия.Конфигурация.ДоступноОбновление;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если Не ДоступноОбновлениеТекущейВерсии Тогда
					Возврат Неопределено;
				КонецЕсли;
				
			КонецЕсли;
			
			Результат.Текст = НСтр("ru = 'Доступно обновление программы.'");
			
			ОбновлениеКомКонф = ИнформацияОДоступномОбновлении.Конфигурация;
			ОбновлениеКомПл   = ИнформацияОДоступномОбновлении.Платформа;
			
			Результат.РекомендуетсяУстановить = ((ОбновлениеКомКонф = Неопределено
				Или Не ОбновлениеКомКонф.ДоступноОбновление)
				И (ОбновлениеКомПл <> Неопределено
				И ОбновлениеКомПл.ДоступноОбновление
				И ОбновлениеКомПл.ОбязательностьУстановки < 2));
			
			Если Результат.РекомендуетсяУстановить Тогда
				Если Не ДляТекущихДел Тогда
					Результат.Текст = Результат.Текст + Символы.ПС
						+ НСтр("ru = 'Рекомендуется установить это обновление.'");
				КонецЕсли;
				Результат.Важное = Истина;
			КонецЕсли;
			
			Возврат Результат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Формирует новый объект настройки автоматического обновления.
//
// Возвращаемое значение:
//  Структура:
//    * РежимАвтоматическойПроверкиНаличияОбновленийПрограммы - Число - режим автоматической проверки обновлений.
//        Доступные значения:
//          0 - не проверять автоматически.
//          1 - при запуске программы. Режим по умолчанию.
//          2 - по расписанию.
//    * Расписание - Неопределено - расписание не настроено.
//                 - Структура из см. ОбщегоНазначенияКлиентСервер.СтруктураВРасписание
//    * ДатаПоследнейПроверки - Дата - дата и время последней проверки расписания на необходимость запустить проверку
//        наличия доступных обновлений. Заполняется если РежимАвтоматическойПроверкиНаличияОбновленийПрограммы =1.
//    * КаталогДистрибутивовПлатформы - Неопределено - каталог по умолчанию.
//                                    - Строка - каталог, выбранный пользователем.
//    * РежимУстановки - Число - режим установки платформы. Доступные значения:
//        0 - "тихий" режим установки. Режим по умолчанию.
//        1 - интерактивный режим установки.
//    * ВариантИнформированияОВыходеОбновлений - Число - вариант информирования пользователя о выходе новой версии.
//        Доступные значения:
//          0 - информировать о выходе любой версии
//          1 - если текущая версия на длительной поддержке и срок ее не истек, то информировать о выходе новой сборки
//            текущей версии, иначе информировать о выходе любой версии.
//
Функция НовыйНастройкиАвтоматическогоОбновления()
	
	Результат = Новый Структура();
	Результат.Вставить("РежимАвтоматическойПроверкиНаличияОбновленийПрограммы", 1);
	Результат.Вставить("Расписание"                                           , Неопределено);
	Результат.Вставить("ДатаПоследнейПроверки"                                , '00010101');
	Результат.Вставить("КаталогДистрибутивовПлатформы"                        , Неопределено);
	Результат.Вставить("РежимУстановки"                                       , 0);
	Результат.Вставить("ВариантИнформированияОВыходеОбновлений"               , 0);
	
	Возврат Результат;
	
КонецФункции

Функция КаталогФайлаИзПолногоИмени(ПолноеИмяФайла)
	
	ДлинаСтроки = СтрДлина(ПолноеИмяФайла);
	Для Итератор = 0 По ДлинаСтроки - 1 Цикл
		ИндексТекСимвола = ДлинаСтроки - Итератор;
		ТекСимвол = Сред(ПолноеИмяФайла, ИндексТекСимвола, 1);
		Если ТекСимвол = "\" Или ТекСимвол = "/" Тогда
			Возврат Лев(ПолноеИмяФайла, ИндексТекСимвола);
		КонецЕсли;
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

Функция КаталогСодержитДистрибутивПлатформы1СПредприятие(Знач Каталог, Версия)
	
	Если Прав(Каталог, 1) <> "\" Тогда
		Каталог = Каталог + "\";
	КонецЕсли;
	
	Если НЕ ПолучениеОбновленийПрограммыКлиентСервер.ФайлСуществует(Каталог)
		ИЛИ НЕ ПолучениеОбновленийПрограммыКлиентСервер.ФайлСуществует(Каталог + "setup.exe")
		ИЛИ НЕ ПолучениеОбновленийПрограммыКлиентСервер.ФайлСуществует(Каталог + "Setup.ini") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Чтение строк *.ini-файла
	ЧтениеТекста = Новый ЧтениеТекста(Каталог + "Setup.ini");
	ЕстьИмяПродукта = Ложь;
	ЕстьНомерВерсии = Ложь;
	Если ПолучениеОбновленийПрограммыКлиентСервер.Это64РазрядноеПриложение() Тогда
		ИскомаяСтрокаПродукта = "PRODUCT=1C:ENTERPRISE 8 (X86-64)";
	Иначе
		ИскомаяСтрокаПродукта = "PRODUCT=1C:ENTERPRISE 8";
	КонецЕсли;
	ИскомаяСтрокаВерсии = "PRODUCTVERSION=" + Версия;
	
	Попытка
		
		ПрочитаннаяСтрока = ЧтениеТекста.ПрочитатьСтроку();
		Пока ПрочитаннаяСтрока <> Неопределено Цикл
			ПрочитаннаяСтрокаВРег = ВРег(СокрЛП(ПрочитаннаяСтрока));
			Если ПрочитаннаяСтрокаВРег = ИскомаяСтрокаПродукта Тогда
				ЕстьИмяПродукта = Истина;
			ИначеЕсли ПрочитаннаяСтрокаВРег = ИскомаяСтрокаВерсии Тогда
				ЕстьНомерВерсии = Истина;
			КонецЕсли;
			
			Если ЕстьИмяПродукта И ЕстьНомерВерсии Тогда
				ЧтениеТекста.Закрыть();
				Возврат Истина;
			КонецЕсли;
			
			ПрочитаннаяСтрока = ЧтениеТекста.ПрочитатьСтроку();
		КонецЦикла;
		
		ЧтениеТекста.Закрыть();
		
	Исключение
		
		ПолучениеОбновленийПрограммыВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Возврат Ложь;
	
КонецФункции

// Выполняет проверку доступности обновления программы и запускает длительную операцию по проверке наличия обновлений.
//
// Возвращаемое значение:
//  Неопределено - возвращается если обновление программы не доступно, длительная операция отменена или возникла ошибка.
//  см. ДлительныеОперации.ВыполнитьФункцию - возвращается если запущенное задание имеет статус Выполняется или
//    Выполнено.
//
Функция НачатьПроверкуНаличияОбновления() Экспорт
	
	Если Не ДоступноИспользованиеОбновленияПрограммы() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(Новый УникальныйИдентификатор);
		ПараметрыВыполнения.ЗапуститьВФоне              = Истина;
		ПараметрыВыполнения.ОжидатьЗавершение           = 0;
		ПараметрыВыполнения.КлючФоновогоЗадания         = "ПроверкаНаличияОбновленийПрограммы_"
			+ Строка(Новый УникальныйИдентификатор);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Проверка наличия обновлений программы'");
		
		Результат = ДлительныеОперации.ВыполнитьФункцию(
			ПараметрыВыполнения,
			"ПолучениеОбновленийПрограммы.ПроверитьНаличиеОбновленияВФоновомРежиме");
		
		Если Результат.Статус = "Отменено" Тогда
			
			ЗаписатьИнформациюВЖурналРегистрации(
				НСтр("ru = 'Не удалось выполнить фоновую проверку наличия обновлений. Задание отменено администратором.'"));
			Возврат Неопределено;
			
		ИначеЕсли Результат.Статус = "Ошибка" Тогда
			
			ЗаписатьОшибкуВЖурналРегистрации(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка фоновой проверки наличия обновлений. Не удалось выполнить фоновое задание. %1'"),
					Результат.ПодробноеПредставлениеОшибки));
			Возврат Неопределено;
			
		Иначе
			Возврат Результат;
		КонецЕсли;
		
	Исключение
		
		ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка фоновой проверки наличия обновлений. Не удалось выполнить фоновое задание. %1'"),
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции

#Область Исправления

Функция УстановкаИУдалениеИсправлений(
	Исправления,
	ОтозванныеИсправления,
	УдалятьФайлыИсправлений = Ложь,
	ВФоне = Ложь) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Ошибка"               , Ложь);
	Результат.Вставить("Сообщение"            , "");
	Результат.Вставить("ИнформацияОбОшибке"   , "");
	Результат.Вставить("СообщениеТехподдержке", "");
	
	// Проверить, какие исправления уже установлены.
	УстановленныеИсправления = ОбновлениеКонфигурации.УстановленныеИсправления();
	ИдентификаторыУстановленныхДляПроверки = Новый Соответствие;
	Для Каждого ТекИсправление Из УстановленныеИсправления Цикл
		ИдентификаторыУстановленныхДляПроверки.Вставить(ТекИсправление.Идентификатор, Истина);
	КонецЦикла;
	
	ИсправленияДляУстановкиОписанияСтр     = Новый Массив;
	ИдентификаторыУстановленныхОписанияСтр = Новый Массив;
	ФайлыИсправленийПараметр = Новый Массив;
	Для Каждого ТекИсправление Из Исправления Цикл
		ИдентификаторСтр = Строка(ТекИсправление.Идентификатор);
		Если ИдентификаторыУстановленныхДляПроверки[ИдентификаторСтр] = Неопределено Тогда
			ИсправленияДляУстановкиОписанияСтр.Добавить("" + ИдентификаторСтр);
			Если Не ПустаяСтрока(ТекИсправление.АдресФайла) Тогда
				ФайлыИсправленийПараметр.Добавить(ТекИсправление.АдресФайла);
			Иначе
				ФайлыИсправленийПараметр.Добавить(
					ПоместитьВоВременноеХранилище(
						Новый ДвоичныеДанные(ТекИсправление.ИмяПолученногоФайла)));
				Если УдалятьФайлыИсправлений Тогда
					Попытка
						УдалитьФайлы(ТекИсправление.ИмяПолученногоФайла);
					Исключение
						ЗаписатьОшибкуВЖурналРегистрации(
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Не удалось удалить файл исправления %1.
									|%2'"),
								ТекИсправление.ИмяПолученногоФайла,
							ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ИдентификаторыУстановленныхОписанияСтр.Добавить(ИдентификаторСтр);
		КонецЕсли;
	КонецЦикла;
	
	// Вызов установки исправлений.
	ОписаниеИсправлений = Новый Структура;
	ОписаниеИсправлений.Вставить("Установить", ФайлыИсправленийПараметр);
	ОписаниеИсправлений.Вставить("Удалить"   , ОтозванныеИсправления);
	
	Если ОписаниеИсправлений.Установить.Количество() = 0
		И ОписаниеИсправлений.Удалить.Количество() = 0 Тогда
		ЗаписатьИнформациюВЖурналРегистрации(
			НСтр("ru = 'Установка и удаление исправлений не требуются (все исправления были установлены ранее).'"));
		Возврат Результат;
	КонецЕсли;
	
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Вызов установки и удаления исправлений (БСП).
				|Исправления для установки:
				|%1
				|
				|Исправления для удаления (отозванные):
				|%2
				|
				|Уже установлены (исключены из установки):
				|%3.'"),
			СтрСоединить(ИсправленияДляУстановкиОписанияСтр, Символы.ПС),
			СтрСоединить(ОтозванныеИсправления, Символы.ПС),
			СтрСоединить(ИдентификаторыУстановленныхОписанияСтр, Символы.ПС)));
	РезультатУстановки = ОбновлениеКонфигурации.УстановкаИУдалениеИсправлений(ОписаниеИсправлений, ВФоне);
	
	Если РезультатУстановки.НеУстановлено > 0 Или РезультатУстановки.НеУдалено > 0 Тогда
		
		// Часть исправлений не удалось установить или удалить - считается ошибочной
		// ситуацией, т.к. обновление применено не полностью и должно
		// обрабатываться как ошибка.
		СообщениеОбОшибке     = "";
		СообщениеВЖурнале     = "";
		СообщениеТехподдержке = Новый Массив();
		
		Если РезультатУстановки.НеУстановлено > 0 Тогда
			
			Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось установить исправления (%1 шт.).'"),
				РезультатУстановки.НеУстановлено);
			
			СообщениеОбОшибке = Сообщение;
			СообщениеВЖурнале = Сообщение;
			
			СообщениеТехподдержке.Добавить(Сообщение);
			Для Каждого ТекОшибка Из РезультатУстановки.Ошибки Цикл
				
				Если ТекОшибка.Событие <> "Установка" Тогда
					Продолжить
				КонецЕсли;
				
				СообщениеТехподдержке.Добавить(
					"--------------------------------------------------------------------------------");
				СообщениеТехподдержке.Добавить(ТекОшибка.НомерПатча);
				СообщениеТехподдержке.Добавить(СокрЛП(ТекОшибка.Причина));
				
			КонецЦикла;
			СообщениеТехподдержке.Добавить(
				"--------------------------------------------------------------------------------");
			
		КонецЕсли;
		
		Если РезультатУстановки.НеУдалено > 0 Тогда
			
			Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось удалить исправления (%1 шт.).'"),
					РезультатУстановки.НеУдалено);
			
			СообщениеОбОшибке = СообщениеОбОшибке + ?(ПустаяСтрока(СообщениеОбОшибке), "", Символы.ПС) + Сообщение;
			СообщениеВЖурнале = СообщениеВЖурнале + ?(ПустаяСтрока(СообщениеВЖурнале), "", Символы.ПС) + Сообщение;
			
			СообщениеТехподдержке.Добавить();
			СообщениеТехподдержке.Добавить(Сообщение);
			Для Каждого ТекОшибка Из РезультатУстановки.Ошибки Цикл
				
				Если ТекОшибка.Событие <> "Удаление" Тогда
					Продолжить
				КонецЕсли;
				
				СообщениеТехподдержке.Добавить(
					"--------------------------------------------------------------------------------");
				СообщениеТехподдержке.Добавить(ТекОшибка.НомерПатча);
				СообщениеТехподдержке.Добавить(СокрЛП(ТекОшибка.Причина));
				
			КонецЦикла;
			СообщениеТехподдержке.Добавить(
				"--------------------------------------------------------------------------------");
			
		КонецЕсли;
		
		ЗаписатьОшибкуВЖурналРегистрации(СообщениеВЖурнале);
		
		Результат.Ошибка                = Истина;
		Результат.Сообщение             = СообщениеОбОшибке;
		Результат.ИнформацияОбОшибке    = СообщениеВЖурнале;
		Результат.СообщениеТехподдержке = СокрЛ(СтрСоединить(СообщениеТехподдержке, Символы.ПС));
		
	Иначе
		
		ЗаписатьИнформациюВЖурналРегистрации(НСтр("ru = 'Установка и удаление исправлений успешно завершены.'"));
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// По данным настроек получения обновления программы выполняет проверку и при необходимости запускает асинхронный
// процесс проверки наличия обновлений.
//
// Параметры:
//  Параметры - Структура - структура параметров работы клиента при запуске.
//
Процедура ПроверитьНаличиеОбновленийПриЗапуске(Параметры)
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиОбновления = Параметры.ПолучениеОбновленийПрограммы;
	ДатаПроверки        = ТекущаяДатаСеанса();
	
	ПроверкаНаличияОбновления = Новый Структура;
	ПроверкаНаличияОбновления.Вставить("ПроверкаЗапущена", Ложь);
	ПроверкаНаличияОбновления.Вставить("ОписаниеЗадания" , Неопределено);
	
	// Обработать настройки автоматической проверки обновления.
	Если НастройкиОбновления.РежимАвтоматическойПроверкиНаличияОбновленийПрограммы = 1 Тогда
		ПроверкаНаличияОбновления.ПроверкаЗапущена = Истина;
	ИначеЕсли НастройкиОбновления.РежимАвтоматическойПроверкиНаличияОбновленийПрограммы = 2 Тогда
		
		// Определение необходимости выполнения проверки по расписанию
		Расписание = ОбщегоНазначенияКлиентСервер.СтруктураВРасписание(НастройкиОбновления.Расписание);
		ДатаПоследнейПроверки = НастройкиОбновления.ДатаПоследнейПроверки;
		
		Если Расписание.ТребуетсяВыполнение(ДатаПроверки, ДатаПоследнейПроверки) Тогда
			ПроверкаНаличияОбновления.ПроверкаЗапущена = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ПроверкаНаличияОбновления.ПроверкаЗапущена Тогда
		Параметры.ПроверкаНаличияОбновления = ПроверкаНаличияОбновления;
		Возврат;
	КонецЕсли;
	
	Если НастройкиОбновления.РежимАвтоматическойПроверкиНаличияОбновленийПрограммы = 2 Тогда
		// Записать дату последней проверки.
		Параметры.ПолучениеОбновленийПрограммы.ДатаПоследнейПроверки = ДатаПроверки;
		ЗаписатьНастройкиАвтоматическогоОбновления(Параметры.ПолучениеОбновленийПрограммы);
	КонецЕсли;
	
	ПроверкаНаличияОбновления.ОписаниеЗадания = НачатьПроверкуНаличияОбновления();
	
	Параметры.ПроверкаНаличияОбновления = ПроверкаНаличияОбновления;
	
КонецПроцедуры

// Возвращает список имен программы и их версий для установки исправлений (патчей). В список входит информация о
// основной версии программы и дополнительных подсистемах, описанных в переопределяемом модуле
// см. ПолучениеОбновленийПрограммыПереопределяемый.ПриОпределенииНастроекЗагрузкиИсправлений.
// 
// Возвращаемое значение:
//  Массив из Структура:
//    * ИмяПрограммы - Строка - имя программы в сервисах Интернет-поддержки.
//    * Версия - Строка
//
Функция ВерсииПрограммИсправлений()
	
	// Сбор информации об основной конфигурации.
	ВерсииКонфигураций = Новый Массив;
	ВерсииКонфигураций.Добавить(
		Новый Структура("ИмяПрограммы, Версия",
			ИнтернетПоддержкаПользователей.ИмяПрограммы(),
			ИнтернетПоддержкаПользователей.ВерсияКонфигурации()));
	
	// Сбор информации о дополнительных подсистемах
	ДополнительныеПодсистемы = НастройкиЗагрузкиИсправлений().Подсистемы;
	Для Каждого ТекДопПодсистема Из ДополнительныеПодсистемы Цикл
		
		ВерсияКонфигурации = Новый Структура();
		ВерсияКонфигурации.Вставить("ИмяПрограммы", ТекДопПодсистема.ИдентификаторИнтернетПоддержки);
		ВерсияКонфигурации.Вставить("Версия"      , ТекДопПодсистема.Версия);
		
		ВерсииКонфигураций.Добавить(ВерсияКонфигурации);
		
	КонецЦикла;
	
	Возврат ВерсииКонфигураций;
	
КонецФункции

#КонецОбласти

#Область ПерсональныеНастройкиПользователя

Процедура СохранитьКаталогПоследнегоПолученногоДистрибутиваПлатформы(Каталог)
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		ПолучениеОбновленийПрограммыКлиентСервер.ИдентификаторОбщихНастроек(),
		КлючНастройкиКаталогДистрибутива(),
		Каталог);
	
КонецПроцедуры

#КонецОбласти

#Область ОрганизацияФоновыхПроцессов

Функция ПроверитьНаличиеОбновленияВФоновомРежиме() Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("НастройкиСоединения",
		ИнтернетПоддержкаПользователей.НастройкиСоединенияССерверами());
	ИнформацияОДоступномОбновлении = ИнформацияОДоступномОбновленииСлужебная(
		ИнтернетПоддержкаПользователей.СлужебнаяИмяПрограммы(),
		ИнтернетПоддержкаПользователей.ВерсияКонфигурации(),
		Неопределено,
		Неопределено,
		"РабочееОбновление",
		ДополнительныеПараметры);
	
	Возврат ИнформацияОДоступномОбновлении;
	
КонецФункции

Функция ОпределитьПараметрыОповещенияОДоступномОбновлении(АдресРезультата) Экспорт
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	СохранитьИнформациюОДоступномОбновленииВНастройках(Результат);
	ПараметрыОповещения = ПараметрыОповещенияОДоступномОбновлении(Результат);
	Если ПараметрыОповещения = Неопределено Тогда
		Возврат -1;
	Иначе
		Возврат ПараметрыОповещения;
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Получение и установка обновлений в файловом варианте.
// Выполняется в фоновом задании.

Функция ЗагрузитьИУстановитьОбновленияВФоновомРежиме(Параметры) Экспорт
	
	Если Не ДоступноИспользованиеОбновленияПрограммы(Истина, Ложь) Тогда
		ВызватьИсключение НСтр("ru = 'Использование обновления программы недоступно в текущем режиме работы.'");
	КонецЕсли;
	
	ДопПараметры = Неопределено;	// см. ПолучениеОбновленийПрограммыКлиентСервер.НовыйКонтекстПолученияИУстановкиОбновлений
	
	Результат = Новый Структура();
	Результат.Вставить("КодСостояния", "");
	Результат.Вставить("ДопПараметры", ДопПараметры);
	
	Контекст = Параметры.КонтекстОбновления;	// см. ПолучениеОбновленийПрограммыКлиентСервер.НовыйКонтекстПолученияИУстановкиОбновлений
	Если Контекст = Неопределено Тогда
		Контекст = ПолучениеОбновленийПрограммыКлиентСервер.НовыйКонтекстПолученияИУстановкиОбновлений(Параметры);
	Иначе
		// Сброс состояния ошибки.
		Контекст.ИмяОшибки          = "";
		Контекст.Сообщение          = "";
		Контекст.ИнформацияОбОшибке = "";
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ДанныеАутентификации = Неопределено Тогда
		Контекст.ИмяОшибки     = "НеЗаполненыДанныеАутентификации";
		Контекст.Сообщение     = НСтр("ru = 'Не заполнены данные аутентификации.'");
		Результат.КодСостояния = "Ошибка";
		Результат.ДопПараметры = Контекст;
		Возврат Результат;
	КонецЕсли;
	
	ПолученоФайлов        = 0;
	ОбъемПолученныхФайлов = 0;
	
	// 1) Получение файла обновления платформы.
	Если Контекст.ОбновитьПлатформу Тогда
		
		ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Получение обновления платформы 1С:Предприятие: версия %1; URL: %2'"),
				Контекст.ВерсияПлатформы,
				Контекст.URLФайлаОбновленияПлатформы));
		
		Если Не ПустаяСтрока(Контекст.КаталогДистрибутиваПлатформы) Тогда
			
			ПолученоФайлов        = 1;
			ОбъемПолученныхФайлов = ОбъемПолученныхФайлов + Контекст.РазмерОбновленияПлатформы;
			
			ЗаписатьИнформациюВЖурналРегистрации(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Обновление платформы 1С:Предприятие уже было загружено ранее в %1'"),
					Контекст.КаталогДистрибутиваПлатформы));
			
		Иначе
			
			КаталогУстановкиПлатформы = ПолучениеОбновленийПрограммыКлиентСервер.КаталогУстановкиПлатформы1СПредприятие(
				Контекст.ВерсияПлатформы);
			Если КаталогУстановкиПлатформы <> Неопределено Тогда
				
				// Платформа уже установлена.
				ПолученоФайлов        = 1;
				ОбъемПолученныхФайлов = ОбъемПолученныхФайлов + Контекст.РазмерОбновленияПлатформы;
				Контекст.ОбновлениеПлатформыУстановлено = Истина;
				
				ЗаписатьИнформациюВЖурналРегистрации(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Версия %1 платформы 1С:Предприятие уже установлена на компьютере.'"),
						Контекст.ВерсияПлатформы));
				
			Иначе
				
				// Загрузить файл платформы.
				Контекст.ТекущееДействие =
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Получение файла %1 из %2'"),
						Строка(ПолученоФайлов + 1),
						Контекст.КоличествоФайлов);
				СообщитьСостояние("ПолучениеФайлов", , Контекст);
				
				ЗагрузитьОбновлениеПлатформы(Контекст, Параметры, ДанныеАутентификации);
				Если Не ПустаяСтрока(Контекст.ИмяОшибки) Тогда
					// Ошибка загрузки платформы.
					Результат.КодСостояния = "Ошибка";
					Результат.ДопПараметры = Контекст;
					Возврат Результат;
				Иначе
					ПолученоФайлов        = 1;
					ОбъемПолученныхФайлов = ОбъемПолученныхФайлов + Контекст.РазмерОбновленияПлатформы;
					Контекст.Прогресс = 75 * (ОбъемПолученныхФайлов / Контекст.ОбъемФайлов);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// 2) Получение файлов обновления конфигурации.
	Для Каждого ТекОбновление Из Контекст.ОбновленияКонфигурации Цикл
		
		ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Получение обновления конфигурации.
					|URL: %1;
					|Размер: %2;
					|Формат файла обновления: %3;
					|Контрольная сумма файла обновления: %4;
					|Каталог дистрибутива: %5;
					|Выполнить обработчики обновления: %6;
					|Имя файла обновления (cfu): %7.'"),
				ТекОбновление.URLФайлаОбновления,
				ТекОбновление.РазмерФайла,
				ТекОбновление.ФорматФайлаОбновления,
				ТекОбновление.КонтрольнаяСумма,
				ТекОбновление.КаталогДистрибутива,
				ТекОбновление.ПрименитьОбработчикиОбновления,
				ТекОбновление.ОтносительныйПутьCFUФайла));
		
		Контекст.ТекущееДействие =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Получение файла %1 из %2'"),
				Строка(ПолученоФайлов + 1),
				Контекст.КоличествоФайлов);
		Контекст.Прогресс = 75 * (ОбъемПолученныхФайлов / Контекст.ОбъемФайлов);
		СообщитьСостояние("ПолучениеФайлов", , Контекст);
		
		Если Не ПолучениеОбновленийПрограммыКлиентСервер.ОбновлениеКонфигурацииПолучено(ТекОбновление, Контекст) Тогда
			
			ЗагрузитьОбновлениеКонфигурации(ТекОбновление, Контекст, Параметры, ДанныеАутентификации);
			Если Не ПустаяСтрока(Контекст.ИмяОшибки) Тогда
				Результат.КодСостояния = "Ошибка";
				Результат.ДопПараметры = Контекст;
				Возврат Результат;
			КонецЕсли;
			
		Иначе
			
			ЗаписатьИнформациюВЖурналРегистрации(
				НСтр("ru = 'Обновление конфигурации уже было получено ранее.'"));
			
		КонецЕсли;
		
		ПолученоФайлов        = ПолученоФайлов + 1;
		ОбъемПолученныхФайлов = ОбъемПолученныхФайлов + ТекОбновление.РазмерФайла;
		
	КонецЦикла;
	
	// 3) Получение файлов исправлений.
	Для Каждого ТекИсправление Из Контекст.Исправления Цикл
		
		ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Получение файла исправления (патча).
					|URL: %1;
					|Идентификатор: %2;
					|Размер: %3;
					|Локальный файл: %4.'"),
				ТекИсправление.URLФайла,
				ТекИсправление.Идентификатор,
				ТекИсправление.Размер,
				ТекИсправление.ИмяПолученногоФайла));
			
		Контекст.ТекущееДействие =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Получение файла %1 из %2'"),
				Строка(ПолученоФайлов + 1),
				Контекст.КоличествоФайлов);
		Контекст.Прогресс = 75 * (ОбъемПолученныхФайлов / Контекст.ОбъемФайлов);
		СообщитьСостояние("ПолучениеФайлов", , Контекст);
			
		Если Не ТекИсправление.Получено Тогда
			
			РезультатПолучения = ЗагрузитьФайлИсправления(
				ТекИсправление.URLФайла,
				ТекИсправление.Идентификатор,
				ДанныеАутентификации);
			
			Если РезультатПолучения.Ошибка Тогда
				
				СообщениеЖурнала =
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ошибка при получении файла исправления (патча) (%1). %2'"),
						ТекИсправление.URLФайла,
						РезультатПолучения.ПодробноеОписаниеОшибки);
				ЗаписатьОшибкуВЖурналРегистрации(СообщениеЖурнала);
				
				Контекст.ИмяОшибки = "PatchFileDownloadError";
				Контекст.ИнформацияОбОшибке = СообщениеЖурнала;
				Контекст.Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка при получении файла исправления (патча). %1'"),
					РезультатПолучения.КраткоеОписаниеОшибки);
				Результат.КодСостояния = "Ошибка";
				Результат.ДопПараметры = Контекст;
				Возврат Результат;
				
			Иначе
				
				Попытка
					РезультатПолучения.Содержимое.Записать(ТекИсправление.ИмяПолученногоФайла);
				Исключение
					
					ИнформацияОбОшибке = ИнформацияОбОшибке();
					СообщениеЖурнала =
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Ошибка при получении файла исправления (патча) (%1).
								|Не удалось сохранить файл в локальном каталоге.
								|%2'"),
							ТекИсправление.URLФайла,
							ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
					ЗаписатьОшибкуВЖурналРегистрации(СообщениеЖурнала);
					
					Контекст.ИмяОшибки = "FileSystemError";
					Контекст.ИнформацияОбОшибке = СообщениеЖурнала;
					Контекст.Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ошибка при получении файла исправления (патча). %1'"),
						ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
					Результат.КодСостояния = "Ошибка";
					Результат.ДопПараметры = Контекст;
					Возврат Результат;
					
				КонецПопытки;
				
				ТекИсправление.Получено = Истина;
				ЗаписатьИнформациюВЖурналРегистрации(НСтр("ru = 'Файл исправления (патча) успешно получен.'"));
				
			КонецЕсли;
			
		Иначе
			
			ЗаписатьИнформациюВЖурналРегистрации(
				НСтр("ru = 'Исправление (патч) уже было получено ранее.'"));
			
		КонецЕсли;
		
		ПолученоФайлов        = ПолученоФайлов + 1;
		ОбъемПолученныхФайлов = ОбъемПолученныхФайлов + ТекИсправление.Размер;
		
	КонецЦикла;
	
	Контекст.ФайлыОбновленияПолучены = Истина;
	
	// 4) Установка платформы.
	Если Контекст.ОбновитьПлатформу И Не Контекст.ОбновлениеПлатформыУстановлено Тогда
		
		Контекст.Прогресс        = 80;
		Контекст.ТекущееДействие = НСтр("ru = 'Установка платформы 1С:Предприятие'");
		СообщитьСостояние("УстановкаПлатформы", , Контекст);
		
		УстановкаОтменена = Ложь;
		УстановитьОбновлениеПлатформы(Контекст, Параметры, УстановкаОтменена);
		Если УстановкаОтменена Тогда
			
			Результат.КодСостояния = "УстановкаПлатформыОтменена";
			Результат.ДопПараметры = Контекст;
			Возврат Результат;
			
		ИначеЕсли Не ПустаяСтрока(Контекст.ИмяОшибки) Тогда
			
			// Ошибка установки платформы.
			Результат.КодСостояния = "Ошибка";
			Результат.ДопПараметры = Контекст;
			Возврат Результат;
			
		Иначе
			
			Контекст.ОбновлениеПлатформыУстановлено = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// 5) Установка/удаление исправлений.
	Если Контекст.ОбновленияКонфигурации.Количество() = 0
		И (Контекст.Исправления.Количество() > 0
		Или Контекст.ОтозванныеИсправления.Количество() > 0) Тогда
		// Установить/удалить исправления сразу, если
		// исправления для текущей версии конфигурации.
		
		Контекст.Прогресс = 85;
		Контекст.ТекущееДействие = НСтр("ru = 'Установка исправлений (патчей)'");
		СообщитьСостояние("УстановкаИсправлений", , Контекст);
		
		РезультатУстановки = УстановкаИУдалениеИсправлений(Контекст.Исправления, Контекст.ОтозванныеИсправления, , Истина);
		Если РезультатУстановки.Ошибка Тогда

			Контекст.ИмяОшибки             = "ОшибкаУстановкиИсправлений";
			Контекст.Сообщение             = РезультатУстановки.Сообщение;
			Контекст.ИнформацияОбОшибке    = РезультатУстановки.ИнформацияОбОшибке;
			Контекст.СообщениеТехподдержке = РезультатУстановки.СообщениеТехподдержке;
			
			Результат.КодСостояния = "Ошибка";
			Результат.ДопПараметры = Контекст;
			Возврат Результат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Контекст.Прогресс  = 100;
	Контекст.Завершено = Истина;
	
	Результат.КодСостояния = "Завершено";
	Результат.ДопПараметры = Контекст;
	Возврат Результат;
	
КонецФункции

Процедура ЗагрузитьОбновлениеПлатформы(Контекст, Параметры, ДанныеАутентификации)
	
	КаталогДляЗагрузки = ПолучениеОбновленийПрограммыКлиентСервер.КаталогДляРаботыСОбновлениямиПлатформы();
	КаталогХраненияДистрибутивов = Параметры.КаталогХраненияДистрибутивовПлатформы;
	
	Если КаталогХраненияДистрибутивов = Неопределено Тогда
		КаталогДистрибутива = КаталогДляЗагрузки
			+ ?(ПолучениеОбновленийПрограммыКлиентСервер.Это64РазрядноеПриложение(),
				"setup_64\",
				"setup\");
	Иначе
		Если Прав(КаталогХраненияДистрибутивов, 1) <> "\" Тогда
			КаталогХраненияДистрибутивов = КаталогХраненияДистрибутивов + "\";
		КонецЕсли;
		КаталогДистрибутива = КаталогХраненияДистрибутивов + Контекст.ВерсияПлатформы
			+ ?(ПолучениеОбновленийПрограммыКлиентСервер.Это64РазрядноеПриложение(), "_64", "")
			+ "\";
	КонецЕсли;
	
	// Проверить наличие загруженного дистрибутива.
	ДистрибутивЗагружен = КаталогСодержитДистрибутивПлатформы1СПредприятие(
		КаталогДистрибутива,
		Контекст.ВерсияПлатформы);
	
	// Загрузка дистрибутива.
	Если ДистрибутивЗагружен Тогда
		Контекст.КаталогДистрибутиваПлатформы = КаталогДистрибутива;
		ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Обновление платформы 1С:Предприятие уже было загружено ранее в %1'"),
				Контекст.КаталогДистрибутиваПлатформы));
		Возврат;
	КонецЕсли;
	
	Попытка
		СоздатьКаталог(КаталогДистрибутива);
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		СообщениеЖурнала =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при создании каталога для сохранения дистрибутива (%1).'"),
				КаталогДистрибутива)
			+ Символы.ПС
			+ ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ЗаписатьОшибкуВЖурналРегистрации(СообщениеЖурнала);
		
		Контекст.ИмяОшибки = "ОшибкаВзаимодействияСФайловойСистемой";
		Контекст.ИнформацияОбОшибке = СообщениеЖурнала;
		Контекст.Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось создать каталог %1 для сохранения дистрибутива. %2'"),
			КаталогДистрибутива,
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		Возврат;
		
	КонецПопытки;
	
	Попытка
		СоздатьКаталог(КаталогДляЗагрузки);
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		СообщениеЖурнала =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при создании каталога для загрузки дистрибутива (%1).'"),
				КаталогДляЗагрузки)
			+ Символы.ПС
			+ ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ЗаписатьОшибкуВЖурналРегистрации(СообщениеЖурнала);
		
		Контекст.ИмяОшибки = "ОшибкаВзаимодействияСФайловойСистемой";
		Контекст.ИнформацияОбОшибке = СообщениеЖурнала;
		Контекст.Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось создать каталог %1 для сохранения дистрибутива. %2'"),
			КаталогДляЗагрузки,
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		Возврат;
		
	КонецПопытки;
	
	// Загрузка файла.
	ПутьПолученногоФайла = КаталогДляЗагрузки + "setup.zip";
	
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Получение файла обновления платформы 1С:Предприятие: %1'"),
			ПутьПолученногоФайла));
	
	ИнтернетПоддержкаПользователей.ПроверитьURL(Контекст.URLФайлаОбновленияПлатформы);
	ДопПараметры = Новый Структура("ИмяФайлаОтвета, Таймаут", ПутьПолученногоФайла, 43200);
	РезультатПолучения = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		Контекст.URLФайлаОбновленияПлатформы,
		ДанныеАутентификации.Логин,
		ДанныеАутентификации.Пароль,
		ДопПараметры);
	
	Если Не ПустаяСтрока(РезультатПолучения.КодОшибки) Тогда
		
		СообщениеЖурнала =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при получении файла дистрибутива платформы 1С:Предприятие (%1). %2'"),
				Контекст.URLФайлаОбновленияПлатформы,
				РезультатПолучения.ИнформацияОбОшибке);
		ЗаписатьОшибкуВЖурналРегистрации(СообщениеЖурнала);
		
		Контекст.ИмяОшибки = РезультатПолучения.КодОшибки;
		Контекст.ИнформацияОбОшибке = СообщениеЖурнала;
		Контекст.Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при получении файла дистрибутива. %1'"),
			РезультатПолучения.СообщениеОбОшибке);
		Если ПолучениеОбновленийПрограммыКлиентСервер.ФайлСуществует(ПутьПолученногоФайла, Ложь) Тогда
			Попытка
				УдалитьФайлы(ПутьПолученногоФайла);
			Исключение
				ЗаписатьОшибкуВЖурналРегистрации(
					ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;
		Возврат;
		
	КонецЕсли;
	
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Файл обновления платформы 1С:Предприятие успешно получен: %1'"),
			ПутьПолученногоФайла));
	
	// Извлечение файлов.
	Попытка
		ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Извлечение дистрибутива платформы 1С:Предприятие в %1'"),
				КаталогДистрибутива));
		ЧтениеZIP = Новый ЧтениеZipФайла(ПутьПолученногоФайла);
		ЧтениеZIP.ИзвлечьВсе(КаталогДистрибутива, РежимВосстановленияПутейФайловZIP.Восстанавливать);
	Исключение
		
		СообщениеЖурнала =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при извлечении файлов архива (%1) в каталог %2.'"),
				ПутьПолученногоФайла,
				КаталогДистрибутива)
			+ Символы.ПС
			+ ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписатьОшибкуВЖурналРегистрации(СообщениеЖурнала);
		
		Контекст.ИмяОшибки          = "ОшибкаИзвлеченияДанныхИзФайла";
		Контекст.ИнформацияОбОшибке = СообщениеЖурнала;
		Контекст.Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось извлечь файлы дистрибутива. %1'"),
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
		
	КонецПопытки;
	
	ЧтениеZIP.Закрыть();
	
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Дистрибутив платформы 1С:Предприятие успешно сохранен в %1'"),
			КаталогДистрибутива));
	
	СохранитьКаталогПоследнегоПолученногоДистрибутиваПлатформы(КаталогДистрибутива);
	Контекст.КаталогДистрибутиваПлатформы = КаталогДистрибутива;
	
	Если ПолучениеОбновленийПрограммыКлиентСервер.ФайлСуществует(ПутьПолученногоФайла, Ложь) Тогда
		Попытка
			УдалитьФайлы(ПутьПолученногоФайла);
		Исключение
			ЗаписатьОшибкуВЖурналРегистрации(
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьОбновлениеПлатформы(Контекст, Параметры, УстановкаОтменена)
	
	// Подготовка протокола установки.
	КаталогДляЗагрузки  = ПолучениеОбновленийПрограммыКлиентСервер.КаталогДляРаботыСОбновлениямиПлатформы();
	КаталогДистрибутива = Контекст.КаталогДистрибутиваПлатформы;
	
	ПутьФайлаПротокола = КаталогДляЗагрузки + "installlog.txt";
	Контекст.ПутьФайлаПротокола = ПутьФайлаПротокола;
	
	Если ПолучениеОбновленийПрограммыКлиентСервер.ФайлСуществует(ПутьФайлаПротокола) Тогда
		Попытка
			УдалитьФайлы(ПутьФайлаПротокола);
		Исключение
			ЗаписатьОшибкуВЖурналРегистрации(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка при удалении файла протокола (%1). %2'"),
					ПутьФайлаПротокола,
					ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		КонецПопытки;
	КонецЕсли;
	
	// Запуск установки.
	КодВозврата = 0;
	ПутьФайлаПрограммыУстановки = КаталогДистрибутива + "setup.exe";
	Если Не ПолучениеОбновленийПрограммыКлиентСервер.ФайлСуществует(ПутьФайлаПрограммыУстановки) Тогда
		
		СообщениеЖурнала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Загружен некорректный дистрибутив платформы 1С:Предприятие. Отсутствует файл setup.exe (%1).'"),
			ПутьФайлаПрограммыУстановки);
		ЗаписатьОшибкуВЖурналРегистрации(СообщениеЖурнала);
		
		Контекст.ИмяОшибки = "НекорректныйДистрибутивПлатформы";
		Контекст.ИнформацияОбОшибке = СообщениеЖурнала;
		Контекст.Сообщение =
			НСтр("ru = 'Загружен некорректный дистрибутив платформы 1С:Предприятие. Отсутствует файл setup.exe.'");
		Возврат;
		
	КонецЕсли;
	
	Попытка
		
		ПутьФайлаПрограммыУстановки = """" + КаталогДистрибутива + "setup.exe""";
		КомандаЗапуска = ПутьФайлаПрограммыУстановки + " "
			+ ?(Параметры.РежимУстановкиПлатформы = 0, " /S ", "") // "Тихий" или полный режим
			+ "/debuglog installlog.txt"; // Протокол установки
		
		ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Установка новой версии платформы 1С:Предприятие (%1). %2'"),
				Контекст.ВерсияПлатформы,
				КомандаЗапуска));
		
		ПараметрыЗапуска = ФайловаяСистема.ПараметрыЗапускаПрограммы();
		ПараметрыЗапуска.ТекущийКаталог      = КаталогДляЗагрузки;
		ПараметрыЗапуска.ДождатьсяЗавершения = Истина;
		
		РезультатЗапуска = ФайловаяСистема.ЗапуститьПрограмму(КомандаЗапуска, ПараметрыЗапуска);
		КодВозврата      = РезультатЗапуска.КодВозврата;
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		СообщениеЖурнала   = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при запуске программы установки платформы 1С:Предприятие (%1). %2'"),
			КомандаЗапуска,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
		ЗаписатьОшибкуВЖурналРегистрации(СообщениеЖурнала);
		
		Контекст.ИмяОшибки = "ОшибкаУстановкиПлатформы";
		Контекст.ИнформацияОбОшибке = СообщениеЖурнала;
		Контекст.Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при запуске программы установки платформы 1С:Предприятие. %1'"),
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		Возврат;
		
	КонецПопытки;
	
	Контекст.КодВозвратаПрограммыУстановки = КодВозврата;
	
	Если КодВозврата = 0 Тогда
		
		ЗаписатьИнформациюВЖурналРегистрации(НСтр("ru = 'Новая версия платформы 1С:Предприятие успешно установлена.'"));
		
	Иначе
		
		Если КодВозврата = 1602 Или КодВозврата = 1 Тогда
			
			// Отменено пользователем.
			УстановкаОтменена = Истина;
			
		Иначе
			
			// Обработка прочих кодов возврата.
			СообщениеЖурнала =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Установка платформы 1С:Предприятие завершена с ошибкой.
						|Версия %1;
						|Код возврата: %2;
						|Команда: %3'"),
					Контекст.ВерсияПлатформы,
					Строка(КодВозврата),
					КомандаЗапуска);
			ЗаписатьОшибкуВЖурналРегистрации(СообщениеЖурнала);
			
			ШаблонСообщенияПользователю =
				НСтр("ru = 'При установке новой версии платформы 1С:Предприятие произошла ошибка.
					|Код возврата: %1.'");
			
			Если ПолучениеОбновленийПрограммыКлиентСервер.ФайлСуществует(ПутьФайлаПротокола) Тогда
				ШаблонСообщенияПользователю = ШаблонСообщенияПользователю
					+ Символы.ПС
					+ НСтр("ru = 'Техническая информация содержится в <a href=""open:debuglog"">протоколе установки</a>.'");
			КонецЕсли;
			
			Если Параметры.РежимУстановкиПлатформы = 0
				И ПолучениеОбновленийПрограммыКлиентСервер.ЭтоКодВозвратаОграниченияСистемныхПолитик(КодВозврата) Тогда
				// При ошибке ограничений системных политик установки в тихом режиме
				// предложить пользователю выполнить установку в полном интерактивном режиме.
				ШаблонСообщенияПользователю = ШаблонСообщенияПользователю
					+ Символы.ПС
					+ Символы.ПС
					+ НСтр("ru = 'Данная ошибка связана с ограничениями системных политик безопасности.
						|Рекомендуется <a href=""action:retruupdateplatfom"">установить платформу с ручными настройками</a>, либо запустить
						|программу от имени администратора.'");
			КонецЕсли;
			
			ШаблонСообщенияПользователю = ШаблонСообщенияПользователю
				+ Символы.ПС
				+ НСтр("ru = 'При возникновении проблем напишите в <a href=""mailto:webits-info@1c.ru"">техподдержку</a>.'");
			
			Контекст.ИмяОшибки = "ОшибкаУстановкиПлатформы";
			Контекст.ИнформацияОбОшибке = СообщениеЖурнала;
			Контекст.Сообщение = ИнтернетПоддержкаПользователей.ПодставитьДомен(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонСообщенияПользователю,
					Строка(КодВозврата)),
				ИнтернетПоддержкаПользователей.НастройкиСоединенияССерверами().ДоменРасположенияСерверовИПП);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьОбновлениеКонфигурации(Обновление, Контекст, Параметры, ДанныеАутентификации)
	
	// Создание каталогов.
	ПолучениеОбновленийПрограммыКлиентСервер.СоздатьКаталогиДляПолученияОбновления(Обновление, Контекст);
	
	Если Не ПустаяСтрока(Контекст.ИмяОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	// Загрузка файла.
	ДопПараметры = Новый Структура("ИмяФайлаОтвета, Таймаут", Обновление.ИмяПолученногоФайла, 43200);
	
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Загрузка файла обновления конфигурации %1'"),
			Обновление.ИмяПолученногоФайла));
	
	ИнтернетПоддержкаПользователей.ПроверитьURL(Обновление.URLФайлаОбновления);
	РезультатПолучения = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		Обновление.URLФайлаОбновления,
		ДанныеАутентификации.Логин,
		ДанныеАутентификации.Пароль,
		ДопПараметры);
	
	Если Не ПустаяСтрока(РезультатПолучения.КодОшибки) Тогда
		
		СообщениеЖурнала =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при получении файла дистрибутива конфигурации (%1). %2'"),
				Обновление.URLФайлаОбновления,
				РезультатПолучения.ИнформацияОбОшибке);
		ЗаписатьОшибкуВЖурналРегистрации(СообщениеЖурнала);
		
		Контекст.ИмяОшибки = РезультатПолучения.КодОшибки;
		Контекст.ИнформацияОбОшибке = СообщениеЖурнала;
		Контекст.Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при получении файла дистрибутива конфигурации. %1'"),
			РезультатПолучения.СообщениеОбОшибке);
		Если ПолучениеОбновленийПрограммыКлиентСервер.ФайлСуществует(Обновление.ИмяПолученногоФайла, Ложь) Тогда
			Попытка
				УдалитьФайлы(Обновление.ИмяПолученногоФайла);
			Исключение
				ЗаписатьОшибкуВЖурналРегистрации(
					ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;
		Возврат;
		
	КонецЕсли;
	
	ЗаписатьИнформациюВЖурналРегистрации(НСтр("ru = 'Файл обновления успешно загружен.'"));
	ПолучениеОбновленийПрограммыКлиентСервер.ЗавершитьПолучениеОбновления(Обновление, Контекст);
	Обновление.Получено = Истина;
	
КонецПроцедуры

Процедура СообщитьСостояние(
	КодСостояния,
	Сообщение = "",
	ДопПараметры = Неопределено,
	СообщениеЖурналаРегистрации = Неопределено)
	
	ОписательСостояния = Новый Структура("КодСостояния, ДопПараметры", КодСостояния, ДопПараметры);
	Если СообщениеЖурналаРегистрации <> Неопределено Тогда
		ОписательСостояния.Вставить("СообщениеЖурналаРегистрации", СообщениеЖурналаРегистрации);
	КонецЕсли;
	
	ДлительныеОперации.СообщитьПрогресс(
		,
		Сообщение,
		ОписательСостояния);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Автоматическое получение и установка исправлений.

Процедура РегламентноеЗаданиеПолучениеИУстановкаИсправленийКонфигурации() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ПолучениеИУстановкаИсправленийКонфигурации);
	
	Если Не Пользователи.ЭтоПолноправныйПользователь(, Истина, Ложь) Тогда
		ВызватьИсключение НСтр("ru = 'Недостаточно прав.'");
	КонецЕсли;
	
	Если Не ДоступнаАвтоматическаяЗагрузкаИсправлений() Тогда
		ЗаписатьИнформациюВЖурналРегистрации(
			НСтр("ru = 'Использование получения исправлений недоступно в текущем режиме работы.
				|Регламентное задание ПолучениеИУстановкаИсправленийКонфигурации отключено.'"));
		РегламентныеЗаданияСервер.УстановитьИспользованиеРегламентногоЗадания(
			Метаданные.РегламентныеЗадания.ПолучениеИУстановкаИсправленийКонфигурации,
			Ложь);
		Возврат;
	КонецЕсли;
	
	Задание = РегламентныеЗаданияСервер.ПолучитьРегламентноеЗадание(
		Метаданные.РегламентныеЗадания.ПолучениеИУстановкаИсправленийКонфигурации);
	Если Задание <> Неопределено Тогда
		Расписание = Задание.Расписание;
		ПериодПовтораВТечениеДня = Расписание.ПериодПовтораВТечениеДня;
		Если ПериодПовтораВТечениеДня > 0 И ПериодПовтораВТечениеДня < 3600 Тогда
			ВызватьИсключение НСтр("ru = 'Интервал автоматической установки не может быть чаще, чем один раз в час.'");
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
	УстановитьПривилегированныйРежим(Ложь);
	Если ДанныеАутентификации = Неопределено Тогда
		ЗаписатьИнформациюВЖурналРегистрации(НСтр("ru = 'Интернет-поддержка не подключена.
			|Выполнение задания автоматического получения и установки прервано.'"));
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИУстановитьИсправленияДляТекущейВерсииКонфигурации(ДанныеАутентификации, Истина);
	
КонецПроцедуры

Процедура ЗагрузитьИУстановитьИсправленияДляТекущейВерсииКонфигурации(ДанныеАутентификации, ВФоне)
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Автоматическое получение и установка исправлений (патчей) для текущей версии конфигурации'"));
	
	// 1) Информация о доступных исправлениях.
	ВерсииКонфигураций = Новый Массив;
	ВерсииКонфигураций.Добавить(
		Новый Структура("ИмяПрограммы, Версия",
			ИнтернетПоддержкаПользователей.ИмяПрограммы(),
			ИнтернетПоддержкаПользователей.ВерсияКонфигурации()));
	
	ДополнительныеПодсистемы = НастройкиЗагрузкиИсправлений().Подсистемы;
	Для Каждого ТекДопПодсистема Из ДополнительныеПодсистемы Цикл
		
		ВерсияКонфигурации = Новый Структура();
		ВерсияКонфигурации.Вставить("ИмяПрограммы", ТекДопПодсистема.ИдентификаторИнтернетПоддержки);
		ВерсияКонфигурации.Вставить("Версия"      , ТекДопПодсистема.Версия);
		
		ВерсииКонфигураций.Добавить(ВерсияКонфигурации);
		
	КонецЦикла;
	
	ИнформацияОбИсправлениях = ИнформацияОДоступныхИсправленияхКонфигураций(
		ВерсииКонфигураций,
		ИдентификаторыУстановленныхИсправлений());
	Если ИнформацияОбИсправлениях.Ошибка Тогда
		ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось автоматически получить и установить исправления (патчи) для текущей версии конфигурации.
					|Не удалось получить информацию о доступных исправлениях.
					|%1'"),
				ИнформацияОбИсправлениях.ПодробноеОписаниеОшибки));
		Возврат;
	КонецЕсли;
	
	Исправления = ИнформацияОбИсправлениях.Исправления;
	Если Исправления = Неопределено Или Исправления.Количество() = 0 Тогда
		ЗаписатьИнформациюВЖурналРегистрации(НСтр("ru = 'Нет доступных исправлений (патчей) для установки'"));
		Возврат;
	КонецЕсли;
	
	// 2) Загрузка исправлений.
	ИдентификаторыИсправлений = Новый Массив;
	ОтозванныеИсправления     = Новый Массив;
	Для Каждого ТекИсправление Из Исправления Цикл
		Если ТекИсправление.Отозвано Тогда
			ОтозванныеИсправления.Добавить(Строка(ТекИсправление.Идентификатор));
		Иначе
			ИдентификаторыИсправлений.Добавить(Строка(ТекИсправление.Идентификатор));
		КонецЕсли;
	КонецЦикла;
	
	ОписаниеФайлов = СлужебнаяЗагрузитьИсправления(ИдентификаторыИсправлений, , Ложь);
	Если ОписаниеФайлов.Ошибка Тогда
		ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось автоматически получить и установить исправления (патчи) для текущей версии конфигурации.
					|Не удалось получить информацию о доступных исправлениях.
					|%1'"),
				ОписаниеФайлов.ПодробноеОписаниеОшибки));
		Возврат;
	КонецЕсли;
	
	// 3) Установка исправлений.
	УстановкаИУдалениеИсправлений(ОписаниеФайлов.Исправления, ОтозванныеИсправления, , ВФоне);
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Завершено автоматическое получение и установка исправлений (патчей)'"));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обновление информации о версиях платформы по текущей версии конфигурации.

// Обработчик события регламентного задания "ОбновлениеИнформацииОВерсияхПлатформы".
//
Процедура ОбновлениеИнформацииОВерсияхПлатформы() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ОбновлениеИнформацииОВерсияхПлатформы);
	
	// Прервем обновление настроек, если обновление платформы запрещено
	Если ОбщегоНазначения.РазделениеВключено()
		Или ЭтоЗащищенныйПрограммныйКомплекс()
		Или Не СлужебнаяПараметрыПолученияОбновлений().ПолучатьОбновленияПлатформы Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// Проверить периодичность запуска регламентного задания
	Задание = РегламентныеЗаданияСервер.ПолучитьРегламентноеЗадание(
		Метаданные.РегламентныеЗадания.ОбновлениеИнформацииОВерсияхПлатформы);
	Если Задание <> Неопределено
		И (Задание.Расписание.ПериодПовтораВТечениеДня > 0
		И Задание.Расписание.ПериодПовтораВТечениеДня <= 3600
		Или Задание.Расписание.ПаузаПовтора > 0
		И Задание.Расписание.ПаузаПовтора <= 3600) Тогда
		
		ВызватьИсключение НСтр(
			"ru = 'Интервал обновления информации о версиях платформы не может быть чаще, чем один раз в час.'");
		
	КонецЕсли;
	
	ОбновлениеИнформацииОВерсияхПлатформыДляТекущейВерсииКонфигурации();
	
КонецПроцедуры

// Выполняет обновление информации о минимальных и рекомендуемых версиях платформы для текущей версии конфигурации и
// сохраняет ее в базу данных.
// Операция выполняется в привилегированном режиме.
//
Процедура ОбновлениеИнформацииОВерсияхПлатформыДляТекущейВерсииКонфигурации()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Обновление информации о версиях платформы для текущей версии конфигурации'"));
	
	// 1. Загрузка информации о версиях платформы из сервиса
	ИмяПрограммы    = ИнтернетПоддержкаПользователей.ИмяПрограммы();
	ВерсияПрограммы = ИнтернетПоддержкаПользователей.ВерсияКонфигурации();
	
	ИнформацияОВерсияхПлатформы = ИнформацияОВерсияхПлатформыКонфигурации(ИмяПрограммы, ВерсияПрограммы);
	Если ИнформацияОВерсияхПлатформы.Ошибка Тогда
		ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обновить информацию о версиях платформы для текущей версии конфигурации по причине:
					|%1'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
				ИнформацияОВерсияхПлатформы.КраткоеОписаниеОшибки));
		Возврат;
	
	// 2. Сохранение информации о версиях платформы
	ИначеЕсли Не ПустаяСтрока(ИнформацияОВерсияхПлатформы.МинимальнаяВерсияПлатформы)
		Или Не ПустаяСтрока(ИнформацияОВерсияхПлатформы.РекомендуемаяВерсияПлатформы) Тогда
		
		// Сравнение с ранее сохраненными значениями
		СохраненныеЗначения = ИнформацияОВерсияхПлатформы();
		Если СохраненныеЗначения.МинимальнаяВерсияПлатформы <> ИнформацияОВерсияхПлатформы.МинимальнаяВерсияПлатформы
			Или СохраненныеЗначения.РекомендуемаяВерсияПлатформы <> ИнформацияОВерсияхПлатформы.РекомендуемаяВерсияПлатформы Тогда
			
			ДанныеСохранения = Новый Структура("МинимальнаяВерсияПлатформы,РекомендуемаяВерсияПлатформы");
			ЗаполнитьЗначенияСвойств(ДанныеСохранения, ИнформацияОВерсияхПлатформы);
			
			СохранитьИнформациюОВерсияхПлатформы(ДанныеСохранения);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Завершено обновление информации о версиях платформы для текущей версии конфигурации'"));
	
КонецПроцедуры

// Выполняет сохранение переданной информации о версиях платформы для текущей конфигурации в общих настройках.
//
// Параметры:
//  ДанныеСохранения - Структура:
//    * МинимальнаяВерсияПлатформы - Строка - список минимальных версий платформы, перечисленные через ";".
//    * РекомендуемаяВерсияПлатформы - Строка - список рекомендуемых версий платформы, перечисленные через ";".
//
Процедура СохранитьИнформациюОВерсияхПлатформы(ДанныеСохранения)
	
	// Добавление в сохраняемые данные информацию о текущем имени программы ее версии с целью проверки актуальности
	// информации о версиях платформы при чтения см. ИнформацияОВерсияхПлатформы.
	РасширенныеДанныеСохранения = ОбщегоНазначения.СкопироватьРекурсивно(ДанныеСохранения);
	
	ИмяПрограммы    = ИнтернетПоддержкаПользователей.ИмяПрограммы();
	ВерсияПрограммы = ИнтернетПоддержкаПользователей.ВерсияКонфигурации();
	
	РасширенныеДанныеСохранения.Вставить("ИмяПрограммы"   , ИмяПрограммы);
	РасширенныеДанныеСохранения.Вставить("ВерсияПрограммы", ВерсияПрограммы);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		ПолучениеОбновленийПрограммыКлиентСервер.ИдентификаторОбщихНастроек(),
		КлючНастройкиИнформацияОВерсияхПлатформы(),
		РасширенныеДанныеСохранения,
		,
		"");
	
КонецПроцедуры

#КонецОбласти

#Область ВызовОперацийСервисаОбновлений

Функция ХостСервисаОбновлений(Домен)
	
	
	Если Домен = 0 Тогда
		Возврат "update-api.1c.ru";
	Иначе
		Возврат "update-api.1c.eu";
	КонецЕсли;
	
КонецФункции

Функция URLОперацииСервисаОбновлений(Операция, Домен)
	
	Возврат "https://"
		+ ХостСервисаОбновлений(Домен)
		+ "/update-platform"
		+ Операция;
	
КонецФункции

Функция URLОперацииPing(Домен)
	
	Возврат URLОперацииСервисаОбновлений("/programs/update/ping", Домен);
	
КонецФункции

Функция URLОперацииInfo(Домен)
	
	Возврат URLОперацииСервисаОбновлений("/programs/update/info", Домен);
	
КонецФункции

Функция URLОперацииФайлыОбновлений(Домен)
	
	Возврат URLОперацииСервисаОбновлений("/programs/update/", Домен);
	
КонецФункции

Функция URLОперацииДоступныеИсправления(Домен)
	
	Возврат URLОперацииСервисаОбновлений("/patches/getInfo", Домен);
	
КонецФункции

Функция URLОперацииФайлыИсправлений(Домен)
	
	Возврат URLОперацииСервисаОбновлений("/patches/getFiles", Домен);
	
КонецФункции

Функция URLОперацииИнформацияОВерсияхПлатформы(Домен)
	
	Возврат URLОперацииСервисаОбновлений("/platform/getInfo", Домен);
	
КонецФункции

Функция ЗначениеСвойстваJSON(ЧтениеОтвета, ТекущийУровень, ЗначениеПоУмолчанию = Неопределено)
	
	ЧтениеJSONПрочитать(ЧтениеОтвета, ТекущийУровень);
	Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.Строка
		Или ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.Число
		Или ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.Булево Тогда
		Возврат ЧтениеОтвета.ТекущееЗначение;
	КонецЕсли;
	
	Возврат ЗначениеПоУмолчанию;
	
КонецФункции

Функция ЧтениеJSONПрочитать(Чтение, ТекущийУровень)
	
	Результат = Чтение.Прочитать();
	Если Чтение.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда
		ТекущийУровень = ТекущийУровень + 1;
	ИначеЕсли Чтение.ТипТекущегоЗначения = ТипЗначенияJSON.КонецОбъекта Тогда
		ТекущийУровень = ТекущийУровень - 1;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаписатьДополнительныеПараметрыЗапроса(ДопПараметрыЗапроса, ЗаписьДанныхСообщения)
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("additionalParameters");
	ЗаписьДанныхСообщения.ЗаписатьНачалоМассива();
	Для каждого КлючЗначение Из ДопПараметрыЗапроса Цикл
		ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("key");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(КлючЗначение.Ключ);
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("value");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(Строка(КлючЗначение.Значение));
		ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	КонецЦикла;
	ЗаписьДанныхСообщения.ЗаписатьКонецМассива();
	
КонецПроцедуры

Функция ПредставлениеДополнительныхПараметровЗапроса(ДопПараметрыЗапроса)
	
	Результат = Новый Массив;
	Для каждого КлючЗначение Из ДопПараметрыЗапроса Цикл
		Результат.Добавить(Символы.Таб + КлючЗначение.Ключ + ": " + Строка(КлючЗначение.Значение));
	КонецЦикла;
	
	Возврат СтрСоединить(Результат, Символы.ПС);
	
КонецФункции

Процедура ЗаполнитьИнформациюОФайлахИсправленийИзJSON(Результат, ЧтениеОтвета, ТекущийУровень)
	
	ЧтениеJSONПрочитать(ЧтениеОтвета, ТекущийУровень);
	Если ЧтениеОтвета.ТипТекущегоЗначения <> ТипЗначенияJSON.НачалоМассива Тогда
		Возврат;
	КонецЕсли;
	
	ТекущееИсправление = Неопределено;
	Пока ЧтениеJSONПрочитать(ЧтениеОтвета, ТекущийУровень) Цикл
		
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецМассива Тогда
			
			Возврат;
			
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта И ТекущийУровень = 2 Тогда
			
			ТекущееИсправление = Новый Структура;
			ТекущееИсправление.Вставить("Идентификатор"      , Неопределено);
			ТекущееИсправление.Вставить("Имя"                , "");
			ТекущееИсправление.Вставить("URLФайла"           , "");
			ТекущееИсправление.Вставить("ИмяФайла"           , "");
			ТекущееИсправление.Вставить("ФорматФайла"        , "");
			ТекущееИсправление.Вставить("Размер"             , 0);
			ТекущееИсправление.Вставить("КонтрольнаяСумма"   , "");
			ТекущееИсправление.Вставить("АдресФайла"         , "");
			ТекущееИсправление.Вставить("ИмяПолученногоФайла", "");
			ТекущееИсправление.Вставить("Получено"           , Ложь);
			
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецОбъекта И ТекущийУровень = 1 Тогда
			
			Результат.Исправления.Добавить(ТекущееИсправление);
			
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства И ТекущийУровень = 2 Тогда
			
			ИмяСвойства = ЧтениеОтвета.ТекущееЗначение;
			
			Если ИмяСвойства = "patchUeid" Тогда
				
				Попытка
					ЗначениеСвойства = ЗначениеСвойстваJSON(ЧтениеОтвета, ТекущийУровень, "");
					ТекущееИсправление.Идентификатор = Новый УникальныйИдентификатор(ЗначениеСвойства);
				Исключение
					ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Некорректный идентификатор исправления (патча) в patchUpdateList[].uin (%1)'"),
						ЗначениеСвойства);
					ВызватьИсключение ТекстИсключения;
				КонецПопытки;
				
			ИначеЕсли ИмяСвойства = "patchFileUrl" Тогда
				
				ТекущееИсправление.URLФайла = ЗначениеСвойстваJSON(ЧтениеОтвета, ТекущийУровень, "");
				
			ИначеЕсли ИмяСвойства = "patchFileName" Тогда
				
				ТекущееИсправление.ИмяФайла = ЗначениеСвойстваJSON(ЧтениеОтвета, ТекущийУровень, "");
				
			ИначеЕсли ИмяСвойства = "patchFileFormat" Тогда
				
				ТекущееИсправление.ФорматФайла = ЗначениеСвойстваJSON(ЧтениеОтвета, ТекущийУровень, "");
				
			ИначеЕсли ИмяСвойства = "size" Тогда
				
				ТекущееИсправление.Размер = ЗначениеСвойстваJSON(ЧтениеОтвета, ТекущийУровень, "");
				
			ИначеЕсли ИмяСвойства = "hashSum" Тогда
				
				ТекущееИсправление.КонтрольнаяСумма = ЗначениеСвойстваJSON(ЧтениеОтвета, ТекущийУровень, "");
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Информация о доступном обновлении.

// Возвращает информацию о доступном обновлении конфигурации и платформы.
//
// Параметры:
//  ИмяТекущейПрограммы - Строка - имя программы в сервисах Интернет-поддержки.
//    См. ОбщегоНазначения.ИдентификаторИнтернетПоддержкиКонфигурации.
//  ВерсияТекущейПрограммы - Строка - номер версии текущей программы.
//  ИмяНовойПрограммы - Строка - имя новой программы в СценарийОбновления = "ПереходНаДругуюПрограммуИлиРедакцию". В
//    остальных сценария - пустая строка.
//  НомерРедакцииНовойПрограммы - Строка - номер новой версии программы в СценарийОбновления =
//    "ПереходНаДругуюПрограммуИлиРедакцию". В остальных сценария - пустая строка.
//  СценарийОбновления - Строка - идентификатор сценария обновления. Доступные значения:
//    "РабочееОбновление" - поиск обновлений текущей конфигурации.
//    "ПереходНаНовуюВерсиюПлатформы" - поиск обновлений только новой версии платформы.
//    "ПереходНаДругуюПрограммуИлиРедакцию" - поиск обновлений для перехода на новую конфигурацию и/или новую редакцию.
//    "СообщениеОНерекомендуемойВерсииПлатформы" - отображение информации о использовании нерекомендуемой версии
//      платформы.
//  ДополнительныеПараметры - Структура - дополнительные параметры поиска обновлений. Список допустимых ключей:
//    * НастройкиСоединения - см. ИнтернетПоддержкаПользователей.НастройкиСоединенияССерверами
//    * НастройкиПроксиСервера - Структура
//    * ТолькоИсправления - Булево - Истина, если выполнить поиск только новых исправлений текущей программы и версии.
//
// Возвращаемое значение:
//  Структура:
//    * ИмяОшибки - Строка - идентификатор ошибки.
//    * Сообщение - Строка - короткое описание ошибки.
//    * ИнформацияОбОшибке - Строка - подробное описание ошибки.
//    * ДоступноОбновление - Булево - Истина, если доступно обновление для установки.
//    * Сценарий - Строка - идентификатор сценария обновления программы.
//    * Конфигурация - Неопределено - получение информации о доступных новых версиях конфигурации отключено.
//                   - см. НовыйИнформацияОДоступномОбновленииКонфигурации
//    * Платформа - Неопределено - получение информации о доступных новых версий платформы отключено.
//                - см. НовыйИнформацияОДоступномОбновленииПлатформы
//    * Исправления - Неопределено - получение информации о исправлениях отключено.
//                  - см. НовыйИнформацияОбИсправлениях
//    * ДополнительныеВерсии - Массив из Структура - список дополнительных версий, доступных для установки:
//        ** Конфигурация - см. НовыйИнформацияОДоступномОбновленииКонфигурации
//        ** Платформа - см. НовыйИнформацияОДоступномОбновленииПлатформы
//    * ОкончаниеПоддержкиТекущейВерсии - Неопределено - текущая версия не находится на длительной поддержке или
//        получение информации о доступных новых версиях конфигурации отключено.
//                                      - Дата - дата (без времени) окончания поддержки текущей версии.
//
Функция ИнформацияОДоступномОбновленииСлужебная(
	ИмяТекущейПрограммы,
	ВерсияТекущейПрограммы,
	ИмяНовойПрограммы,
	НомерРедакцииНовойПрограммы,
	СценарийОбновления,
	ДополнительныеПараметры = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИмяОшибки"                      , "");
	Результат.Вставить("Сообщение"                      , "");
	Результат.Вставить("ИнформацияОбОшибке"             , "");
	Результат.Вставить("ДоступноОбновление"             , Ложь);
	Результат.Вставить("Сценарий"                       , СценарийОбновления);
	Результат.Вставить("Конфигурация"                   , Неопределено);
	Результат.Вставить("Платформа"                      , Неопределено);
	Результат.Вставить("Исправления"                    , Неопределено);
	Результат.Вставить("ДополнительныеВерсии"           , Новый Массив());
	Результат.Вставить("ОкончаниеПоддержкиТекущейВерсии", Неопределено);
	
	ПараметрыПолученияОбновлений = СлужебнаяПараметрыПолученияОбновлений();
	
	// Проверка разрешений получения обновлений
	Если Не ПараметрыПолученияОбновлений.ПолучатьОбновленияКонфигурации
		И СценарийОбновления <> "ПереходНаДругуюПрограммуИлиРедакцию"
		И Не ПараметрыПолученияОбновлений.ПолучатьИсправления
		И Не ПараметрыПолученияОбновлений.ПолучатьОбновленияПлатформы Тогда
		
		Возврат Результат;
		
	КонецЕсли;
	
	// Подготовительные операции
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("НастройкиСоединения"   , Неопределено);
	ДопПараметры.Вставить("НастройкиПроксиСервера", Неопределено);
	ДопПараметры.Вставить("ТолькоИсправления"     , Ложь);
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ДопПараметры, ДополнительныеПараметры);
	КонецЕсли;
	
	Если ДопПараметры.НастройкиПроксиСервера <> Неопределено Тогда
		НастройкиПрокси = ДопПараметры.НастройкиПроксиСервера.НастройкиПрокси;
	Иначе
		НастройкиПрокси = Неопределено;
	КонецЕсли;
	
	// Получение информации о доступной новой версии конфигурации и/или платформы
	Если (ПараметрыПолученияОбновлений.ПолучатьОбновленияКонфигурации
		Или СценарийОбновления = "ПереходНаДругуюПрограммуИлиРедакцию"
		Или ПараметрыПолученияОбновлений.ПолучатьОбновленияПлатформы)
		И Не ДопПараметры.ТолькоИсправления Тогда
		
		ДополнительныеПараметрыВызовОперации = Новый Структура;
		ДополнительныеПараметрыВызовОперации.Вставить("НастройкиСоединения"   , ДопПараметры.НастройкиСоединения);
		ДополнительныеПараметрыВызовОперации.Вставить("НастройкиПроксиСервера", НастройкиПрокси);
		
		ПараметрыОбновления = Новый Структура;
		ПараметрыОбновления.Вставить("ИмяТекущейПрограммы"        , ИмяТекущейПрограммы);
		ПараметрыОбновления.Вставить("ВерсияТекущейПрограммы"     , ВерсияТекущейПрограммы);
		ПараметрыОбновления.Вставить("ИмяНовойПрограммы"          , ИмяНовойПрограммы);
		ПараметрыОбновления.Вставить("НомерРедакцииНовойПрограммы", НомерРедакцииНовойПрограммы);
		ПараметрыОбновления.Вставить("СценарийОбновления"         ,
			?(СценарийОбновления = "РабочееОбновление" И Не ПараметрыПолученияОбновлений.ПолучатьОбновленияКонфигурации,
				"ПереходНаНовуюВерсиюПлатформы", // если конфигурация не обновляется в сценарии рабочего обновления, это эквивалентно обновлению платформы.
				СценарийОбновления));
		
		ИнформацияОДоступномОбновленииВызовОперации(
			Результат,
			ПараметрыОбновления,
			ПараметрыПолученияОбновлений,
			ДополнительныеПараметрыВызовОперации);
		
	КонецЕсли;
	
	// Получение информации о исправлениях
	Если ПустаяСтрока(Результат.ИмяОшибки)
		И ПараметрыПолученияОбновлений.ПолучатьИсправления Тогда
		
		Результат.Исправления = НовыйИнформацияОбИсправлениях();
		
		ВерсииКонфигураций = Новый Массив;
		Если СценарийОбновления = "РабочееОбновление" Тогда
			
			ВерсииКонфигураций.Добавить(
				Новый Структура("ИмяПрограммы, Версия", ИмяТекущейПрограммы, ВерсияТекущейПрограммы));
			
			// В сценарии "РабочееОбновление" доступны версии длительной поддержки
			Для Каждого ДополнительнаяВерсия Из Результат.ДополнительныеВерсии Цикл
				
				ВерсияКонфигурации = Новый Структура();
				ВерсияКонфигурации.Вставить("ИмяПрограммы", ИмяТекущейПрограммы);
				ВерсияКонфигурации.Вставить("Версия"      , ДополнительнаяВерсия.Конфигурация.Версия);
				
				ВерсииКонфигураций.Добавить(ВерсияКонфигурации);
				
			КонецЦикла;
			
		КонецЕсли;
		
		ИмяНовойВерсииКонфигурации   = Неопределено;
		НомерНовойВерсииКонфигурации = Неопределено;
		Если Результат.Конфигурация <> Неопределено
			И Результат.Конфигурация.ДоступноОбновление Тогда
			
			ИмяНовойВерсииКонфигурации = ?(ПустаяСтрока(ИмяНовойПрограммы), ИмяТекущейПрограммы, ИмяНовойПрограммы);
			НомерНовойВерсииКонфигурации = Результат.Конфигурация.Версия;
			ВерсииКонфигураций.Добавить(
				Новый Структура(
					"ИмяПрограммы, Версия",
					ИмяНовойВерсииКонфигурации,
					НомерНовойВерсииКонфигурации));
			
		КонецЕсли;
		
		ДополнительныеПодсистемы = НастройкиЗагрузкиИсправлений().Подсистемы;
		Для Каждого ТекДопПодсистема Из ДополнительныеПодсистемы Цикл
			
			ВерсияКонфигурации = Новый Структура();
			ВерсияКонфигурации.Вставить("ИмяПрограммы", ТекДопПодсистема.ИдентификаторИнтернетПоддержки);
			ВерсияКонфигурации.Вставить("Версия"      , ТекДопПодсистема.Версия);
			
			ВерсииКонфигураций.Добавить(ВерсияКонфигурации);
			
		КонецЦикла;
		
		Если ВерсииКонфигураций.Количество() > 0 Тогда
			
			РезультатИнформацияОбИсправлениях = ИнформацияОДоступныхИсправленияхКонфигураций(
				ВерсииКонфигураций,
				ИдентификаторыУстановленныхИсправлений(),
				Ложь);
			
			Если РезультатИнформацияОбИсправлениях.Ошибка Тогда
				Результат.ИмяОшибки = РезультатИнформацияОбИсправлениях.КраткоеОписаниеОшибки;
				Результат.Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось получить информацию об исправлениях (патчах). %1'"),
					РезультатИнформацияОбИсправлениях.КраткоеОписаниеОшибки);
				Результат.ИнформацияОбОшибке = РезультатИнформацияОбИсправлениях.ПодробноеОписаниеОшибки;
				Возврат Результат;
			КонецЕсли;
			
			Результат.Исправления = РезультатИнформацияОбИсправлениях.Исправления;
			Для Каждого ТекущееИсправление Из РезультатИнформацияОбИсправлениях.Исправления Цикл
				ТекущееИсправление.ДляТекущейВерсии =
					ТекущееИсправление.Применимость.НайтиСтроки(
						Новый Структура("ИмяПрограммы, ВерсияПрограммы", ИмяТекущейПрограммы, ВерсияТекущейПрограммы)).Количество() > 0;
				ТекущееИсправление.ДляНовойВерсии = (НомерНовойВерсииКонфигурации <> Неопределено
					И ТекущееИсправление.Применимость.НайтиСтроки(
						Новый Структура(
							"ИмяПрограммы, ВерсияПрограммы",
							ИмяНовойВерсииКонфигурации,
							НомерНовойВерсииКонфигурации)).Количество() > 0);
				
				Для Каждого ТекДопПодсистема Из ДополнительныеПодсистемы Цикл
					ИсправлениеПрименимо = ТекущееИсправление.Применимость.НайтиСтроки(
						Новый Структура(
							"ИмяПрограммы, ВерсияПрограммы",
							ТекДопПодсистема.ИдентификаторИнтернетПоддержки,
							ТекДопПодсистема.Версия)).Количество() > 0;
					Если ИсправлениеПрименимо Тогда
						ТекущееИсправление.ДляТекущейВерсии = Истина;
						ТекущееИсправление.ДляНовойВерсии   = Истина;
					КонецЕсли;
				КонецЦикла;
				
				// Принудительный отзыв исправления (патча) для случаев
				// отсутствия информации о применимости в сервисе.
				//
				// Суть проблемы:
				//  - пользователь работает на версии программы №1;
				//  - для версии программы №1 выпускается исправление (патч);
				//  - пользователь загружает исправление (патч) в свою программу;
				//  - исправление (патч) отзывается в сервисе;
				//  - пользователь не получает информации об отзыве (например, нет Интернета);
				//  - пользователь обновляет вручную программу на версию №2;
				//  - сервисе отсутствует информация о том что исправление (патч) отозвано для версии;
				//  - для корректной работы необходимо отозвать исправление (патч) игнорируя применимость.
				Если Не ТекущееИсправление.ДляТекущейВерсии
					И Не ТекущееИсправление.ДляНовойВерсии
					И ТекущееИсправление.Отозвано Тогда
					ТекущееИсправление.ДляТекущейВерсии = Истина;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Результат.ДоступноОбновление =
		(Результат.Конфигурация <> Неопределено И Результат.Конфигурация.ДоступноОбновление
		Или (Результат.Платформа <> Неопределено И Результат.Платформа.ДоступноОбновление)
		Или Результат.Исправления <> Неопределено И Результат.Исправления.Количество() > 0);
	
	Если СценарийОбновления = "РабочееОбновление" Тогда
		СохранитьИнформациюОДоступномОбновленииВНастройках(Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ИнформацияОДоступномОбновленииВызовОперации(
	Результат,
	ПараметрыОбновления,
	ПараметрыПолученияОбновлений,
	ДополнительныеПараметры)
	
	ИмяТекущейПрограммы         = ПараметрыОбновления.ИмяТекущейПрограммы;
	ВерсияТекущейПрограммы      = ПараметрыОбновления.ВерсияТекущейПрограммы;
	ИмяНовойПрограммы           = ПараметрыОбновления.ИмяНовойПрограммы;
	НомерРедакцииНовойПрограммы = ПараметрыОбновления.НомерРедакцииНовойПрограммы;
	СценарийОбновления          = ПараметрыОбновления.СценарийОбновления;
	
	НастройкиСоединения    = ДополнительныеПараметры.НастройкиСоединения;
	НастройкиПроксиСервера = ДополнительныеПараметры.НастройкиПроксиСервера;
	
	ПолучатьОбновленияКонфигурации = (СценарийОбновления <> "РабочееОбновление"
		И СценарийОбновления <> "ПереходНаНовуюВерсиюПлатформы"
		Или ПараметрыПолученияОбновлений.ПолучатьОбновленияКонфигурации);
	
	Если НастройкиСоединения = Неопределено Тогда
		НастройкиСоединения = ИнтернетПоддержкаПользователей.НастройкиСоединенияССерверами();
	КонецЕсли;
	
	КомпонентОбновлениеКонфигурации = ?(
		ПолучатьОбновленияКонфигурации,
		НовыйИнформацияОДоступномОбновленииКонфигурации(),
		Неопределено);
	Результат.Вставить("Конфигурация", КомпонентОбновлениеКонфигурации);
	
	ОбновлениеПлатформы = ?(
		ОбщегоНазначения.РазделениеВключено()
			Или ЭтоЗащищенныйПрограммныйКомплекс()
			Или Не ПараметрыПолученияОбновлений.ПолучатьОбновленияПлатформы,
		Неопределено,
		НовыйИнформацияОДоступномОбновленииПлатформы());
	Результат.Вставить("Платформа", ОбновлениеПлатформы);
	
	Если ИмяТекущейПрограммы = "Unknown" Тогда
		Результат.ИмяОшибки = "ConnectError";
		Результат.Сообщение = НСтр("ru = 'Неверные параметры подключения к сервису.'");
		Результат.ИнформацияОбОшибке =
			НСтр("ru = 'Не удалось получить информацию о доступном обновлении.
				|Не определено имя программы в методе ПриДобавленииПодсистемы() общего модуля ОбновлениеИнформационнойБазы[Имя программы].'");
		ЗаписатьОшибкуВЖурналРегистрации(Результат.ИнформацияОбОшибке);
		Возврат;
	КонецЕсли;
	
	// Проверка доступности сервиса.
	URLОперацииPing   = URLОперацииPing(НастройкиСоединения.ДоменРасположенияСерверовИПП);
	РезультатПроверки = ИнтернетПоддержкаПользователей.ПроверитьURLДоступен(URLОперацииPing, НастройкиПроксиСервера);
	
	Если Не ПустаяСтрока(РезультатПроверки.ИмяОшибки) Тогда
		Результат.ИмяОшибки = РезультатПроверки.ИмяОшибки;
		Результат.Сообщение = РезультатПроверки.СообщениеОбОшибке;
		Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить информацию о доступном обновлении.
				|Не удалось проверить доступность сервиса автоматического обновления программы: %1.
				|Причина:
				|%2'"),
			URLОперацииPing,
			РезультатПроверки.ИнформацияОбОшибке);
		ЗаписатьОшибкуВЖурналРегистрации(Результат.ИнформацияОбОшибке);
		Возврат;
	КонецЕсли;
	
	// Вызов операции сервиса.
	URLОперации = URLОперацииInfo(НастройкиСоединения.ДоменРасположенияСерверовИПП);
	
	ПараметрыОперации = Новый Структура;
	ПараметрыОперации.Вставить("ИмяТекущейПрограммы", ИмяТекущейПрограммы);
	ПараметрыОперации.Вставить("ВерсияТекущейПрограммы", ВерсияТекущейПрограммы);
	ПараметрыОперации.Вставить("ИмяНовойПрограммы", ИмяНовойПрограммы);
	ПараметрыОперации.Вставить("НомерРедакцииНовойПрограммы", НомерРедакцииНовойПрограммы);
	ПараметрыОперации.Вставить("СценарийОбновления", СценарийОбновления);
	
	ДополнительныеПараметрыЗапроса = ДополнительныеПараметрыЗапросаКСервисуОбновлений();
	
	// Логирование запроса.
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Получение информации о доступном обновлении (%1).'"),
			URLОперации)
		+ Символы.ПС
		+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Имя текущей программы: %1;
				|Версия текущей программы: %2;
				|Имя новой программы: %3;
				|Номер редакции новой программы: %4;
				|Сценарий обновления: %5;
				|Дополнительные параметры:
				|%7'"),
			ПараметрыОперации.ИмяТекущейПрограммы,
			ПараметрыОперации.ВерсияТекущейПрограммы,
			ПараметрыОперации.ИмяНовойПрограммы,
			ПараметрыОперации.НомерРедакцииНовойПрограммы,
			ПараметрыОперации.СценарийОбновления,
			ПредставлениеДополнительныхПараметровЗапроса(ДополнительныеПараметрыЗапроса)));
	
	ПараметрыЗапросаJSON = InfoRequestJSON(ПараметрыОперации, ДополнительныеПараметрыЗапроса);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при получении информации о доступном обновлении.
				|%1'"),
			РезультатОтправки.ИнформацияОбОшибке);
		ЗаписатьОшибкуВЖурналРегистрации(Результат.ИнформацияОбОшибке);
		
		Результат.ИмяОшибки = РезультатОтправки.КодОшибки;
		Результат.Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить информацию о доступном обновлении.
				|%1'"),
			РезультатОтправки.СообщениеОбОшибке);
		
		Возврат;
		
	КонецЕсли;
	
	// Обработка ответа.
	Попытка
		ЗаполнитьИнформациюОбОбновленииИзInfoResonseИзJSON(Результат, РезультатОтправки.Содержимое);
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось проверить наличие обновлений программы.
				|Ошибка при обработке ответа сервиса.
				|Некорректный ответ сервиса.
				|%1
				|Тело ответа: %2'"),
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке),
			Лев(РезультатОтправки.Содержимое, 1024));
		ЗаписатьОшибкуВЖурналРегистрации(Результат.ИнформацияОбОшибке);
		
		Результат.ИмяОшибки = "НекорректныйОтветСервиса";
		Результат.Сообщение =
			НСтр("ru = 'Не удалось проверить наличие обновлений программы.
				|Некорректный ответ сервиса.'");
		
		Возврат;
		
	КонецПопытки;
	
	Если Не ПустаяСтрока(Результат.ИмяОшибки) Тогда
		
		ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось проверить наличие обновлений программы.
				|
				|Сервис сообщил об ошибке.
				|
				|Ответ сервиса: %1'"),
			Лев(РезультатОтправки.Содержимое, 1024)));
		
		Возврат;
		
	КонецЕсли;
	
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Получена информация о доступном обновлении.
				|%1'"),
			РезультатОтправки.Содержимое));
	
	Если КомпонентОбновлениеКонфигурации <> Неопределено Тогда
		КомпонентОбновлениеКонфигурации.ДоступноОбновление =
			Не ПустаяСтрока(КомпонентОбновлениеКонфигурации.Версия);
	КонецЕсли;
	
	// Уровень обязательности установки платформы:
	// 0 - обязательно;
	// 1 - рекомендуется;
	// 2 - доступна.
	ТекВерсияПлатформы = ИнтернетПоддержкаПользователей.ТекущаяВерсияПлатформы1СПредприятие();
	Если ОбновлениеПлатформы <> Неопределено
		И Не ПустаяСтрока(ОбновлениеПлатформы.Версия) Тогда
		
		ОбновлениеПлатформы.ДоступноОбновление =
			(ОбщегоНазначенияКлиентСервер.СравнитьВерсии(
				ТекВерсияПлатформы,
				ОбновлениеПлатформы.Версия) < 0);
		
		Если КомпонентОбновлениеКонфигурации <> Неопределено
			И Не ПустаяСтрока(КомпонентОбновлениеКонфигурации.Версия)
			И Не ПустаяСтрока(КомпонентОбновлениеКонфигурации.МинимальнаяВерсияПлатформы) Тогда
			
			Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(
				ТекВерсияПлатформы,
				КомпонентОбновлениеКонфигурации.МинимальнаяВерсияПлатформы) < 0 Тогда
				ОбновлениеПлатформы.ОбязательностьУстановки = 0;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОбновлениеПлатформы.ОбязательностьУстановки > 0 Тогда
			// Если выше не было установлено 0 - обязательно.
			
			Если ОбновлениеПлатформы.РекомендуетсяПереход Тогда
				ОбновлениеПлатформы.ОбязательностьУстановки = 1;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Заполнение доступности обновлений компонентов у дополнительных версий
	Для Каждого ДополнительнаяВерсия Из Результат.ДополнительныеВерсии Цикл
		
		Если ДополнительнаяВерсия.Конфигурация <> Неопределено Тогда
			ДополнительнаяВерсия.Конфигурация.ДоступноОбновление =
				Не ПустаяСтрока(ДополнительнаяВерсия.Конфигурация.Версия);
		КонецЕсли;
		
		Если ДополнительнаяВерсия.Платформа <> Неопределено
			И Не ПустаяСтрока(ДополнительнаяВерсия.Платформа.Версия) Тогда
			
			ДополнительнаяВерсия.Платформа.ДоступноОбновление =
				(ОбщегоНазначенияКлиентСервер.СравнитьВерсии(
					ТекВерсияПлатформы,
					ДополнительнаяВерсия.Платформа.Версия) < 0);
			
			Если ДополнительнаяВерсия.Конфигурация <> Неопределено
				И Не ПустаяСтрока(ДополнительнаяВерсия.Конфигурация.Версия)
				И Не ПустаяСтрока(ДополнительнаяВерсия.Конфигурация.МинимальнаяВерсияПлатформы) Тогда
				
				Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(
					ТекВерсияПлатформы,
					ДополнительнаяВерсия.Конфигурация.МинимальнаяВерсияПлатформы) < 0 Тогда
					ДополнительнаяВерсия.Платформа.ОбязательностьУстановки = 0;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ДополнительнаяВерсия.Платформа.ОбязательностьУстановки > 0 Тогда
				// Если выше не было установлено 0 - обязательно.
				
				Если ДополнительнаяВерсия.Платформа.РекомендуетсяПереход Тогда
					ДополнительнаяВерсия.Платформа.ОбязательностьУстановки = 1;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Описание объекта с информацией о доступном обновлении конфигурации.
//
// Возвращаемое значение:
//  Структура:
//    * Версия - Строка
//    * МинимальнаяВерсияПлатформы - Строка
//    * ФайлыДляЗагрузки - Массив из Строка - список идентификаторов файлов обновлений для загрузки.
//    * РазмерОбновления - Число - размер всех файлов для загрузки в байтах.
//    * URLНовоеВВерсии - Строка
//    * URLПорядокОбновления - Строка
//    * ИдентификаторВерсии - Строка - идентификатор текущей версии конфигурации в формате GUID. Используется в сервисе
//        загрузке обновлений и идентифицирует начальную версию конфигурации в цепочки обновлений.
//    * ДоступноОбновление - Булево - Истина, если доступна загрузка и установка новой версии конфигурации.
//    * ОкончаниеПоддержки - Неопределено - версия не находится на длительной поддержке.
//                         - Дата - дата (без времени) окончания поддержки текущей версии.
//
Функция НовыйИнформацияОДоступномОбновленииКонфигурации()
	
	Результат = Новый Структура;
	Результат.Вставить("Версия"                    , "");
	Результат.Вставить("МинимальнаяВерсияПлатформы", "");
	Результат.Вставить("ФайлыДляЗагрузки"          , Новый Массив);
	Результат.Вставить("РазмерОбновления"          , 0);
	Результат.Вставить("URLНовоеВВерсии"           , "");
	Результат.Вставить("URLПорядокОбновления"      , "");
	Результат.Вставить("ИдентификаторВерсии"       , "");
	Результат.Вставить("ДоступноОбновление"        , Ложь);
	Результат.Вставить("ОкончаниеПоддержки"        , Неопределено);
	
	Возврат Результат;
	
КонецФункции

Функция НовыйИнформацияОбИсправлениях()
	
	Результат = Новый ТаблицаЗначений;
	
	ТипСтрока = Новый ОписаниеТипов("Строка");
	ТипБулево = Новый ОписаниеТипов("Булево");
	
	Результат.Колонки.Добавить("Идентификатор"               , Новый ОписаниеТипов("УникальныйИдентификатор"));
	Результат.Колонки.Добавить("Наименование"                , ТипСтрока);
	Результат.Колонки.Добавить("ИмяПрограммы"                , ТипСтрока);
	Результат.Колонки.Добавить("ВерсияПрограммы"             , ТипСтрока);
	Результат.Колонки.Добавить("Описание"                    , ТипСтрока);
	Результат.Колонки.Добавить("ОписаниеИзмененныхМетаданных", ТипСтрока);
	Результат.Колонки.Добавить("Отозвано"                    , ТипБулево);
	Результат.Колонки.Добавить("ДляНовойВерсии"              , ТипБулево);
	Результат.Колонки.Добавить("ДляТекущейВерсии"            , ТипБулево);
	Результат.Колонки.Добавить("Размер"                      , Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("Применимость");
	
	Возврат Результат;
	
КонецФункции

Функция НовыйИнформацияОбИсправленииДляПрограммногоИнтерфейса()
	
	Результат = Новый Структура;
	
	Результат.Вставить("Идентификатор", Неопределено);
	Результат.Вставить("Наименование"                , "");
	Результат.Вставить("ИмяПрограммы"                , "");
	Результат.Вставить("ВерсияПрограммы"             , "");
	Результат.Вставить("Описание"                    , "");
	Результат.Вставить("ОписаниеИзмененныхМетаданных", "");
	Результат.Вставить("Размер"                      , 0);
	
	Возврат Результат;
	
КонецФункции

Функция НовыйТаблицаЗначенийПрименимостьИсправления()
	
	Результат = Новый ТаблицаЗначений;
	
	ТипСтрока = Новый ОписаниеТипов("Строка");
	Результат.Колонки.Добавить("ИмяПрограммы", ТипСтрока);
	Результат.Колонки.Добавить("ВерсияПрограммы", ТипСтрока);
	
	Возврат Результат;
	
КонецФункции

// Описание объекта с информацией о доступном обновлении платформы.
//
// Возвращаемое значение:
//  Структура:
//    * Версия - Строка
//    * ИдентификаторФайла - Строка
//    * РазмерОбновления - Число - размер файла для загрузки в байтах.
//    * URLОсобенностиПерехода - Строка
//    * URLСтраницыПлатформы - Строка
//    * РекомендуетсяПереход - Булево - Истина, если рекомендуется обновить платформу.
//    * ДоступноОбновление - Булево
//    * ОбязательностьУстановки - Число - вариант установки новой версии платформы. Доступные значения:
//        0 - обновление платформы является обязательным для работы с новой версией конфигурации.
//        1 - новая версия платформы 1С:Предприятие рекомендуется для работы с новой версией конфигурации.
//        2 - обновление платформы не является обязательным для работы с новой версией конфигурации.
//
Функция НовыйИнформацияОДоступномОбновленииПлатформы()
	
	Результат = Новый Структура;
	Результат.Вставить("Версия"                 , "");
	Результат.Вставить("ИдентификаторФайла"     , "");
	Результат.Вставить("РазмерОбновления"       , 0);
	Результат.Вставить("URLОсобенностиПерехода" , "");
	Результат.Вставить("URLСтраницыПлатформы"   , "");
	Результат.Вставить("РекомендуетсяПереход"   , Ложь);
	Результат.Вставить("ДоступноОбновление"     , Ложь);
	Результат.Вставить("ОбязательностьУстановки", 2);
	
	Возврат Результат;
	
КонецФункции

Функция InfoRequestJSON(ПараметрыОперации, ДопПараметрыЗапроса)
	
	// {
	//  programName: String,
	//  versionNumber: String,
	//  platformVersion: String,
	//  programNewName: String,
	//  redactionNumber: String,
	//  updateType: NewConfigurationAndOrPlatform / NewProgramOrRedaction / NewPlatform,
	//  additionalParameters: [
	//    {
	//      key: String,
	//      value: String
	//    }
	//  ]
	// }
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("programName");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Строка(ПараметрыОперации.ИмяТекущейПрограммы));
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("versionNumber");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ПараметрыОперации.ВерсияТекущейПрограммы);
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("platformVersion");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ИнтернетПоддержкаПользователей.ТекущаяВерсияПлатформы1СПредприятие());
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("programNewName");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ПараметрыОперации.ИмяНовойПрограммы);
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("redactionNumber");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ПараметрыОперации.НомерРедакцииНовойПрограммы);
	
	Если ПараметрыОперации.СценарийОбновления = "РабочееОбновление" Тогда
		ИмяСценарияВСервисе = "NewConfigurationAndOrPlatform";
	ИначеЕсли ПараметрыОперации.СценарийОбновления = "ПереходНаДругуюПрограммуИлиРедакцию" Тогда
		ИмяСценарияВСервисе = "NewProgramOrRedaction";
	Иначе
		ИмяСценарияВСервисе = "NewPlatform";
	КонецЕсли;
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("updateType");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ИмяСценарияВСервисе);
	
	ЗаписатьДополнительныеПараметрыЗапроса(ДопПараметрыЗапроса, ЗаписьДанныхСообщения);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

Процедура ЗаполнитьИнформациюОбОбновленииИзInfoResonseИзJSON(Результат, ТелоJSON)
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	
	ТекущийУровень = 0;
	Пока ЧтениеJSONПрочитать(ЧтениеОтвета, ТекущийУровень) Цикл
		
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства И ТекущийУровень = 1 Тогда
			
			ИмяСвойства = ЧтениеОтвета.ТекущееЗначение;
			Если ИмяСвойства = "errorName" Тогда
				
				Результат.ИмяОшибки = ЗначениеСвойстваJSON(ЧтениеОтвета, ТекущийУровень, "");
				
			ИначеЕсли ИмяСвойства = "errorMessage" Тогда
				
				Результат.ИнформацияОбОшибке = ЗначениеСвойстваJSON(ЧтениеОтвета, ТекущийУровень, "");
				Результат.Сообщение          = Результат.ИнформацияОбОшибке;
				
			ИначеЕсли ИмяСвойства = "configurationUpdateResponse" Тогда
				
				ЗаполнитьИнформациюОбОбновленииКонфигурацииИзJSON(Результат, ЧтениеОтвета, ТекущийУровень, 2);
				
			ИначеЕсли ИмяСвойства = "platformUpdateResponse" Тогда
				
				ЗаполнитьИнформациюОбОбновленииПлатформыИзJSON(Результат, ЧтениеОтвета, ТекущийУровень, 2);
				
			ИначеЕсли ИмяСвойства = "additionalReleaseUpdate" Тогда
				
				ЗаполнитьИнформациюОДополнительныхВерсияхОбновленийИзJSON(Результат, ЧтениеОтвета, ТекущийУровень);
				
			ИначеЕсли ИмяСвойства = "currentReleaseSupportEndDate" Тогда
				
				ДатаСтрокой = ЗначениеСвойстваJSON(ЧтениеОтвета, ТекущийУровень);
				Если ДатаСтрокой <> Неопределено Тогда
					Результат.ОкончаниеПоддержкиТекущейВерсии = ПрочитатьДатуJSON(ДатаСтрокой, ФорматДатыJSON.ISO);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЧтениеОтвета.Закрыть();
	
КонецПроцедуры

Процедура ЗаполнитьИнформациюОбОбновленииКонфигурацииИзJSON(Результат, ЧтениеОтвета, ТекущийУровень, УровеньОбъекта)
	
	ЧтениеJSONПрочитать(ЧтениеОтвета, ТекущийУровень);
	
	Если ЧтениеОтвета.ТипТекущегоЗначения <> ТипЗначенияJSON.НачалоОбъекта Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеКомКонф = Результат.Конфигурация;
	Если ОбновлениеКомКонф = Неопределено Тогда
		// Если обновление конфигурации не требуется, тогда пропустить.
		// Контролируется сервисом, используется для дополнительной проверки.
		Пока ЧтениеJSONПрочитать(ЧтениеОтвета, ТекущийУровень) Цикл
			Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецОбъекта Тогда
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Пока ЧтениеJSONПрочитать(ЧтениеОтвета, ТекущийУровень) Цикл
		
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецОбъекта Тогда
			
			Возврат;
			
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства
			И ТекущийУровень = УровеньОбъекта Тогда
			
			ИмяСвойства = ЧтениеОтвета.ТекущееЗначение;
			Если ИмяСвойства = "configurationVersion" Тогда
				ОбновлениеКомКонф.Версия = ЗначениеСвойстваJSON(ЧтениеОтвета, ТекущийУровень, "");
			ИначеЕсли ИмяСвойства = "size" Тогда
				ОбновлениеКомКонф.РазмерОбновления = ЗначениеСвойстваJSON(ЧтениеОтвета, ТекущийУровень, 0);
			ИначеЕсли ИмяСвойства = "platformVersion" Тогда
				ОбновлениеКомКонф.МинимальнаяВерсияПлатформы = ЗначениеСвойстваJSON(ЧтениеОтвета, ТекущийУровень, "");
			ИначеЕсли ИмяСвойства = "updateInfoUrl" Тогда
				ОбновлениеКомКонф.URLНовоеВВерсии = ЗначениеСвойстваJSON(ЧтениеОтвета, ТекущийУровень, "");
			ИначеЕсли ИмяСвойства = "howToUpdateInfoUrl" Тогда
				ОбновлениеКомКонф.URLПорядокОбновления = ЗначениеСвойстваJSON(ЧтениеОтвета, ТекущийУровень, "");
			ИначеЕсли ИмяСвойства = "programVersionUin" Тогда
				ОбновлениеКомКонф.ИдентификаторВерсии = ЗначениеСвойстваJSON(ЧтениеОтвета, ТекущийУровень, "");
			ИначеЕсли ИмяСвойства = "supportEndDate" Тогда
				
				ДатаСтрокой = ЗначениеСвойстваJSON(ЧтениеОтвета, ТекущийУровень);
				Если ДатаСтрокой <> Неопределено Тогда
					ОбновлениеКомКонф.ОкончаниеПоддержки = ПрочитатьДатуJSON(ДатаСтрокой, ФорматДатыJSON.ISO);
				КонецЕсли;
				
			ИначеЕсли ИмяСвойства = "upgradeSequence" Тогда
				
				ЧтениеJSONПрочитать(ЧтениеОтвета, ТекущийУровень);
				Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоМассива Тогда
					Пока ЧтениеJSONПрочитать(ЧтениеОтвета, ТекущийУровень) Цикл
						Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецМассива Тогда
							Прервать;
						ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.Строка Тогда
							ОбновлениеКомКонф.ФайлыДляЗагрузки.Добавить(ЧтениеОтвета.ТекущееЗначение);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьИнформациюОбОбновленииПлатформыИзJSON(Результат, ЧтениеОтвета, ТекущийУровень, УровеньОбъекта)
	
	ОбновлениеКомПл = Результат.Платформа;
	Если ОбновлениеКомПл = Неопределено Тогда
		// Если обновление платформы не требуется, тогда пропустить.
		Пока ЧтениеJSONПрочитать(ЧтениеОтвета, ТекущийУровень) Цикл
			Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецОбъекта Тогда
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЧтениеJSONПрочитать(ЧтениеОтвета, ТекущийУровень);
	Если ЧтениеОтвета.ТипТекущегоЗначения <> ТипЗначенияJSON.НачалоОбъекта Тогда
		Возврат;
	КонецЕсли;
	
	Пока ЧтениеJSONПрочитать(ЧтениеОтвета, ТекущийУровень) Цикл
		
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецОбъекта Тогда
			
			Возврат;
			
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства
			И ТекущийУровень = УровеньОбъекта Тогда
			
			ИмяСвойства = ЧтениеОтвета.ТекущееЗначение;
			Если ИмяСвойства = "platformVersion" Тогда
				ОбновлениеКомПл.Версия = ЗначениеСвойстваJSON(ЧтениеОтвета, ТекущийУровень, "");
			ИначеЕсли ИмяСвойства = "transitionInfoUrl" Тогда
				ОбновлениеКомПл.URLОсобенностиПерехода = ЗначениеСвойстваJSON(ЧтениеОтвета, ТекущийУровень, "");
			ИначеЕсли ИмяСвойства = "releaseUrl" Тогда
				ОбновлениеКомПл.URLСтраницыПлатформы = ЗначениеСвойстваJSON(ЧтениеОтвета, ТекущийУровень, "");
			ИначеЕсли ИмяСвойства = "distributionUin" Тогда
				ОбновлениеКомПл.ИдентификаторФайла = ЗначениеСвойстваJSON(ЧтениеОтвета, ТекущийУровень, "");
			ИначеЕсли ИмяСвойства = "size" Тогда
				ОбновлениеКомПл.РазмерОбновления = ЗначениеСвойстваJSON(ЧтениеОтвета, ТекущийУровень, 0);
			ИначеЕсли ИмяСвойства = "recommended" Тогда
				ОбновлениеКомПл.РекомендуетсяПереход = ЗначениеСвойстваJSON(ЧтениеОтвета, ТекущийУровень, Ложь);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьИнформациюОДополнительныхВерсияхОбновленийИзJSON(Результат, ЧтениеОтвета, ТекущийУровень)
	
	ЧтениеJSONПрочитать(ЧтениеОтвета, ТекущийУровень);
	Если ЧтениеОтвета.ТипТекущегоЗначения <> ТипЗначенияJSON.НачалоМассива Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеВерсии = Результат.ДополнительныеВерсии;
	Пока ЧтениеJSONПрочитать(ЧтениеОтвета, ТекущийУровень) Цикл
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецМассива Тогда
			Прервать;
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда
			
			ДополнительнаяВерсияКонфигурации = ?(
				Результат.Конфигурация = Неопределено,
				Неопределено,
				НовыйИнформацияОДоступномОбновленииКонфигурации());
			ДополнительнаяВерсияПлатформы = ?(
				Результат.Платформа = Неопределено,
				Неопределено,
				НовыйИнформацияОДоступномОбновленииПлатформы());
			
			ДополнительнаяВерсия = Новый Структура();
			ДополнительнаяВерсия.Вставить("Конфигурация", ДополнительнаяВерсияКонфигурации);
			ДополнительнаяВерсия.Вставить("Платформа"   , ДополнительнаяВерсияПлатформы);
			
			ДополнительныеВерсии.Добавить(ДополнительнаяВерсия);
			
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда
			
			Если ЧтениеОтвета.ТекущееЗначение = "configurationUpdate" Тогда
				ЗаполнитьИнформациюОбОбновленииКонфигурацииИзJSON(
					ДополнительнаяВерсия,
					ЧтениеОтвета,
					ТекущийУровень,
					3);
			ИначеЕсли ЧтениеОтвета.ТекущееЗначение = "platformUpdate" Тогда
				ЗаполнитьИнформациюОбОбновленииПлатформыИзJSON(ДополнительнаяВерсия, ЧтениеОтвета, ТекущийУровень, 3);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Получение файлов обновления.

// Возвращает информацию о файлах обновления для получения файлов в сценариях помощника "Обновление программы".
//
// Параметры:
//  ОбновлениеКонфигурации - см. НовыйИнформацияОДоступномОбновленииКонфигурации
//  ИдентификаторыИсправлений - Массив из Строка
//  ОбновлениеПлатформы - см. НовыйИнформацияОДоступномОбновленииПлатформы
//  Логин - Строка - логин пользователя Интернет-поддержки.
//  Пароль - Строка - пароль пользователя Интернет-поддержки.
//
// Возвращаемое значение:
//  Структура:
//    * ИмяОшибки - Строка - идентификатор ошибки.
//    * Сообщение - Строка - короткое описание ошибки.
//    * ИнформацияОбОшибке - Строка - подробное описание ошибки.
//    * ОбновленияКонфигурации - Массив из Структура - информация о новых конфигурациях.
//    * Исправления - Массив из Структура - информация о новых исправлениях.
//    * ВерсияПлатформы - Строка - версия новой платформы 1С.
//    * URLФайлаОбновленияПлатформы - Строка - адрес загрузки дистрибутива платформы 1С.
//    * РазмерОбновленияПлатформы - Число - размер всех файлов обновления в байтах.
//
Функция ОписаниеФайловОбновлений(
	ОбновлениеКонфигурации,
	ИдентификаторыИсправлений,
	ОбновлениеПлатформы,
	Логин,
	Пароль) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИмяОшибки"             , "");
	Результат.Вставить("Сообщение"             , "");
	Результат.Вставить("ИнформацияОбОшибке"    , "");
	Результат.Вставить("ОбновленияКонфигурации", Новый Массив);
	Результат.Вставить("Исправления"           , Новый Массив);
	Результат.Вставить("URLФайлаОбновленияПлатформы", "");
	Результат.Вставить("РазмерОбновленияПлатформы"  , 0);
	
	Если ОбновлениеПлатформы <> Неопределено Тогда
		Результат.Вставить("ВерсияПлатформы"          , ОбновлениеПлатформы.Версия);
		Результат.Вставить("РазмерОбновленияПлатформы", ОбновлениеПлатформы.РазмерОбновления);
	Иначе
		Результат.Вставить("ВерсияПлатформы"          , "");
		Результат.Вставить("РазмерОбновленияПлатформы", 0);
	КонецЕсли;
	
	НастройкиСоединения = ИнтернетПоддержкаПользователей.НастройкиСоединенияССерверами();
	
	// Проверка доступности сервиса.
	URLОперацииPing = URLОперацииPing(НастройкиСоединения.ДоменРасположенияСерверовИПП);
	РезультатПроверки = ИнтернетПоддержкаПользователей.ПроверитьURLДоступен(URLОперацииPing);
	
	Если Не ПустаяСтрока(РезультатПроверки.ИмяОшибки) Тогда
		Результат.ИмяОшибки = РезультатПроверки.ИмяОшибки;
		Результат.Сообщение = РезультатПроверки.СообщениеОбОшибке;
		Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить информацию о файлах обновления.
				|Не удалось проверить доступность сервиса автоматического обновления программы: %1.
				|Причина:
				|%2'"),
			URLОперацииPing,
			РезультатПроверки.ИнформацияОбОшибке);
		ЗаписатьОшибкуВЖурналРегистрации(Результат.ИнформацияОбОшибке);
		Возврат Результат;
	КонецЕсли;
	
	Если ОбновлениеКонфигурации <> Неопределено Или ОбновлениеПлатформы <> Неопределено Тогда
		ПолучитьОписаниеФайловОбновленияКонфигурацииИПлатформы(
			Результат,
			ОбновлениеКонфигурации,
			ОбновлениеПлатформы,
			Логин,
			Пароль,
			НастройкиСоединения);
		Если Не ПустаяСтрока(Результат.ИмяОшибки) Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Если ИдентификаторыИсправлений <> Неопределено И ИдентификаторыИсправлений.Количество() > 0 Тогда
		РезультатФайлыИсправлений = ОписаниеФайловИсправлений(
			ИдентификаторыИсправлений,
			Новый Структура("Логин, Пароль", Логин, Пароль),
			Ложь);
		Если Не ПустаяСтрока(РезультатФайлыИсправлений.ИмяОшибки) Тогда
			ЗаполнитьЗначенияСвойств(Результат, РезультатФайлыИсправлений, "ИмяОшибки, Сообщение, ИнформацияОбОшибке");
			Возврат Результат;
		КонецЕсли;
		
		Результат.Исправления = РезультатФайлыИсправлений.Исправления;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ПолучитьОписаниеФайловОбновленияКонфигурацииИПлатформы(
	Результат,
	ОбновлениеКонфигурации,
	ОбновлениеПлатформы,
	Логин,
	Пароль,
	НастройкиСоединения)
	
	URLОперации = URLОперацииФайлыОбновлений(НастройкиСоединения.ДоменРасположенияСерверовИПП);
	ДополнительныеПараметрыЗапроса = ДополнительныеПараметрыЗапросаКСервисуОбновлений();
	
	// Логирование запроса.
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Получение информации о файлах обновления конфигурации и Платформы (%1).'"),
			URLОперации)
		+ Символы.ПС
		+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Логин: %1
				|Обновление конфигурации:
				|%2;
				|Обновление платформы: %3;
				|Дополнительные параметры:
				|%5'"),
			Логин,
			?(ОбновлениеКонфигурации = Неопределено,
				"-",
				СтрСоединить(ОбновлениеКонфигурации.ФайлыДляЗагрузки, Символы.ПС)),
			?(ОбновлениеПлатформы = Неопределено,
				"-",
				ОбновлениеПлатформы.ИдентификаторФайла),
			ПредставлениеДополнительныхПараметровЗапроса(ДополнительныеПараметрыЗапроса)));
	
	ПараметрыЗапросаJSON = UpdateRequestJSON(
		ОбновлениеКонфигурации,
		ОбновлениеПлатформы,
		Логин,
		Пароль,
		ДополнительныеПараметрыЗапроса);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при получении информации о файлах обновления.
				|%1'"),
			РезультатОтправки.ИнформацияОбОшибке);
		ЗаписатьОшибкуВЖурналРегистрации(Результат.ИнформацияОбОшибке);
		
		Результат.ИмяОшибки = РезультатОтправки.КодОшибки;
		Результат.Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить информацию о файлах обновления.
				|%1'"),
			РезультатОтправки.СообщениеОбОшибке);
		
		Возврат;
		
	КонецЕсли;
	
	// Обработка ответа.
	Попытка
		ЗаполнитьИнформациюОФайлахОбновленияИзUpdateResonseJSON(Результат, РезультатОтправки.Содержимое);
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить информацию об обновлении программы.
				|Ошибка при обработке ответа сервиса.
				|Некорректный ответ сервиса.
				|%1
				|Тело ответа: %2'"),
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке),
			Лев(РезультатОтправки.Содержимое, 1024));
		ЗаписатьОшибкуВЖурналРегистрации(Результат.ИнформацияОбОшибке);
		
		Результат.ИмяОшибки = "НекорректныйОтветСервиса";
		Результат.Сообщение =
			НСтр("ru = 'Не удалось получить информацию об обновлении программы.
				|Некорректный ответ сервиса.'");
		
		Возврат;
		
	КонецПопытки;
	
	Если Не ПустаяСтрока(Результат.ИмяОшибки) Тогда
		
		ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить информацию об обновлении программы.
				|
				|Сервис сообщил об ошибке.
				|
				|Ответ сервиса: %1'"),
			Лев(РезультатОтправки.Содержимое, 1024)));
		
		Возврат;
		
	КонецЕсли;
	
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Получена информация о файлах обновления конфигурации и Платформы.
				|%1'"),
			РезультатОтправки.Содержимое));
	
	// Проверка возвращенных данных.
	Если ОбновлениеКонфигурации <> Неопределено Тогда
		Если ОбновлениеКонфигурации.ФайлыДляЗагрузки.Количество() <> Результат.ОбновленияКонфигурации.Количество() Тогда
			Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Возвращена неполная информация об обновлении конфигурации.
					|Не совпадает количество запрошенных и возвращенных файлов (%1 и %2).'"),
				ОбновлениеКонфигурации.ФайлыДляЗагрузки.Количество(),
				Результат.ОбновленияКонфигурации.Количество());
			ЗаписатьОшибкуВЖурналРегистрации(Результат.ИнформацияОбОшибке);
			
			Результат.ИмяОшибки = "НекорректныйОтветСервиса";
			Результат.Сообщение =
				НСтр("ru = 'Не удалось получить информацию об обновлении программы.
					|Некорректный ответ сервиса.'");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция UpdateRequestJSON(
	ОбновлениеКонф,
	ОбновлениеПл,
	Логин,
	Пароль,
	ДопПараметрыЗапроса)
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("upgradeSequence");
	Если ОбновлениеКонф = Неопределено Тогда
		ЗаписьДанныхСообщения.ЗаписатьЗначение(Неопределено);
	Иначе
		ЗаписьДанныхСообщения.ЗаписатьНачалоМассива();
		Для каждого ТекИд Из ОбновлениеКонф.ФайлыДляЗагрузки Цикл
			ЗаписьДанныхСообщения.ЗаписатьЗначение(ТекИд);
		КонецЦикла;
		ЗаписьДанныхСообщения.ЗаписатьКонецМассива();
	КонецЕсли;
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("programVersionUin");
	Если ОбновлениеКонф = Неопределено Тогда
		ЗаписьДанныхСообщения.ЗаписатьЗначение(Неопределено);
	Иначе
		ЗаписьДанныхСообщения.ЗаписатьЗначение(ОбновлениеКонф.ИдентификаторВерсии);
	КонецЕсли;
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("platformDistributionUin");
	Если ОбновлениеПл = Неопределено Тогда
		ЗаписьДанныхСообщения.ЗаписатьЗначение(Неопределено);
	Иначе
		ЗаписьДанныхСообщения.ЗаписатьЗначение(ОбновлениеПл.ИдентификаторФайла);
	КонецЕсли;
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("login");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Логин);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("password");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Пароль);
	
	ЗаписатьДополнительныеПараметрыЗапроса(ДопПараметрыЗапроса, ЗаписьДанныхСообщения);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

Процедура ЗаполнитьИнформациюОФайлахОбновленияИзUpdateResonseJSON(Результат, ТелоJSON)
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	
	ТекущийУровень = 0;
	Пока ЧтениеJSONПрочитать(ЧтениеОтвета, ТекущийУровень) Цикл
		
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства И ТекущийУровень = 1 Тогда
			
			ИмяСвойства = ЧтениеОтвета.ТекущееЗначение;
			Если ИмяСвойства = "errorName" Тогда
				
				Результат.ИмяОшибки = ЗначениеСвойстваJSON(ЧтениеОтвета, ТекущийУровень, "");
				
			ИначеЕсли ИмяСвойства = "errorMessage" Тогда
				
				Результат.ИнформацияОбОшибке = ЗначениеСвойстваJSON(ЧтениеОтвета, ТекущийУровень, "");
				Результат.Сообщение          = Результат.ИнформацияОбОшибке;
				
			ИначеЕсли ИмяСвойства = "platformDistributionUrl" И ТекущийУровень = 1 Тогда
				
				Результат.URLФайлаОбновленияПлатформы = ЗначениеСвойстваJSON(ЧтениеОтвета, ТекущийУровень, "");
				
			ИначеЕсли ИмяСвойства = "configurationUpdateDataList" Тогда
				
				ЗаполнитьИнформациюОФайлахОбновленияКонфигурацииИзJSON(Результат, ЧтениеОтвета, ТекущийУровень);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЧтениеОтвета.Закрыть();
	
КонецПроцедуры

Процедура ЗаполнитьИнформациюОФайлахОбновленияКонфигурацииИзJSON(Результат, ЧтениеОтвета, ТекущийУровень)
	
	ЧтениеJSONПрочитать(ЧтениеОтвета, ТекущийУровень);
	Если ЧтениеОтвета.ТипТекущегоЗначения <> ТипЗначенияJSON.НачалоМассива Тогда
		Возврат;
	КонецЕсли;
	
	Пока ЧтениеJSONПрочитать(ЧтениеОтвета, ТекущийУровень) Цикл
		
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецМассива Тогда
			Возврат;
			
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта И ТекущийУровень = 2 Тогда
			
			templatePath = "";
			executeUpdateProcess = Ложь;
			updateFileUrl = "";
			updateFileName = "";
			updateFileFormat = "";
			size = 0;
			hashSum = "";
			
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецОбъекта И ТекущийУровень = 1 Тогда
			
			Результат.ОбновленияКонфигурации.Добавить(
				НовыйОбновлениеКонфигурации(
					updateFileUrl,
					templatePath,
					updateFileName,
					executeUpdateProcess,
					updateFileFormat,
					size,
					hashSum));
			
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства И ТекущийУровень = 2 Тогда
			
			ИмяСвойства = ЧтениеОтвета.ТекущееЗначение;
			
			Если ИмяСвойства = "templatePath" Тогда
				templatePath = ЗначениеСвойстваJSON(ЧтениеОтвета, ТекущийУровень, "");
			ИначеЕсли ИмяСвойства = "executeUpdateProcess" Тогда
				executeUpdateProcess = ЗначениеСвойстваJSON(ЧтениеОтвета, ТекущийУровень, Ложь);
			ИначеЕсли ИмяСвойства = "updateFileUrl" Тогда
				updateFileUrl = ЗначениеСвойстваJSON(ЧтениеОтвета, ТекущийУровень, "");
			ИначеЕсли ИмяСвойства = "updateFileName" Тогда
				updateFileName = ЗначениеСвойстваJSON(ЧтениеОтвета, ТекущийУровень, "");
			ИначеЕсли ИмяСвойства = "updateFileFormat" Тогда
				updateFileFormat = ЗначениеСвойстваJSON(ЧтениеОтвета, ТекущийУровень, "");
			ИначеЕсли ИмяСвойства = "size" Тогда
				size = ЗначениеСвойстваJSON(ЧтениеОтвета, ТекущийУровень, 0);
			ИначеЕсли ИмяСвойства = "hashSum" Тогда
				hashSum = ЗначениеСвойстваJSON(ЧтениеОтвета, ТекущийУровень, "");
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция НовыйОбновлениеКонфигурации(
	URLФайлаОбновления,
	ПодкаталогШаблонов,
	ОтносительныйПутьCFUФайла,
	ПрименитьОбработчикиОбновления,
	ФорматФайлаОбновления,
	РазмерФайла,
	КонтрольнаяСумма)
	
	Результат = Новый Структура;
	Результат.Вставить("URLФайлаОбновления"            , URLФайлаОбновления);
	Результат.Вставить("ПодкаталогШаблонов"            , ПодкаталогШаблонов);
	Результат.Вставить("ОтносительныйПутьCFUФайла"     , ОтносительныйПутьCFUФайла);
	Результат.Вставить("ПрименитьОбработчикиОбновления", ПрименитьОбработчикиОбновления);
	Результат.Вставить("ФорматФайлаОбновления"         , НРег(ФорматФайлаОбновления));
	Результат.Вставить("РазмерФайла"                   , РазмерФайла);
	Результат.Вставить("КонтрольнаяСумма"              , КонтрольнаяСумма);
	Результат.Вставить("ПодкаталогCfu"                 , КаталогФайлаИзПолногоИмени(ОтносительныйПутьCFUФайла));
	
	Если Прав(ВРег(Результат.ОтносительныйПутьCFUФайла), 4) <> ".CFU" Тогда
		Результат.ОтносительныйПутьCFUФайла = Результат.ОтносительныйПутьCFUФайла + ".cfu";
	КонецЕсли;
	
	Если Прав(Результат.ПодкаталогШаблонов, 1) <> "\" Тогда
		Результат.ПодкаталогШаблонов = Результат.ПодкаталогШаблонов + "\";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Информация о доступных исправлениях для подсистем.

Функция PatchInfoRequestJSON(ПараметрыОперации, ДопПараметрыЗапроса)
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("programVersionList");
	ЗаписьДанныхСообщения.ЗаписатьНачалоМассива();
	Для Каждого ВерсияПодсистемы Из ПараметрыОперации.ВерсииКонфигураций Цикл
		ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("programName");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(ВерсияПодсистемы.ИмяПрограммы);
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("versionNumber");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(ВерсияПодсистемы.Версия);
		ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	КонецЦикла;
	ЗаписьДанныхСообщения.ЗаписатьКонецМассива();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("installedPatchesList");
	ЗаписьДанныхСообщения.ЗаписатьНачалоМассива();
	Для Каждого ИдентификаторИсправления Из ПараметрыОперации.ИдентификаторыУстановленныхИсправлений Цикл
		ЗаписьДанныхСообщения.ЗаписатьЗначение(Строка(ИдентификаторИсправления));
	КонецЦикла;
	ЗаписьДанныхСообщения.ЗаписатьКонецМассива();
	
	ЗаписатьДополнительныеПараметрыЗапроса(ДопПараметрыЗапроса, ЗаписьДанныхСообщения);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

Функция ИнформацияОДоступныхИсправленияхКонфигураций(
	ВерсииКонфигураций,
	ИдентификаторыУстановленныхИсправлений,
	ПроверитьДоступностьСервиса = Истина)
	
	Результат = Новый Структура;
	Результат.Вставить("Ошибка"                 , Ложь);
	Результат.Вставить("КраткоеОписаниеОшибки"  , "");
	Результат.Вставить("ПодробноеОписаниеОшибки", "");
	Результат.Вставить("Исправления"            , НовыйИнформацияОбИсправлениях());
	
	НастройкиСоединения = ИнтернетПоддержкаПользователей.НастройкиСоединенияССерверами();
	
	// Проверка доступности сервиса.
	Если ПроверитьДоступностьСервиса Тогда
		URLОперацииPing = URLОперацииPing(НастройкиСоединения.ДоменРасположенияСерверовИПП);
		РезультатПроверки = ИнтернетПоддержкаПользователей.ПроверитьURLДоступен(URLОперацииPing);
		Если Не ПустаяСтрока(РезультатПроверки.ИмяОшибки) Тогда
			Результат.Ошибка                  = Истина;
			Результат.КраткоеОписаниеОшибки   = РезультатПроверки.СообщениеОбОшибке;
			Результат.ПодробноеОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось получить информацию о доступных исправлениях (патчах) конфигураций.
					|Не удалось проверить доступность сервиса автоматического обновления программы: %1.
					|Причина:
					|%2'"),
				URLОперацииPing,
				РезультатПроверки.ИнформацияОбОшибке);
			ЗаписатьОшибкуВЖурналРегистрации(Результат.ПодробноеОписаниеОшибки);
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	// Вызов операции сервиса.
	URLОперации = URLОперацииДоступныеИсправления(НастройкиСоединения.ДоменРасположенияСерверовИПП);
	
	ПараметрыОперации = Новый Структура;
	ПараметрыОперации.Вставить("ВерсииКонфигураций"                    , ВерсииКонфигураций);
	ПараметрыОперации.Вставить("ИдентификаторыУстановленныхИсправлений", ИдентификаторыУстановленныхИсправлений);
	
	ДополнительныеПараметрыЗапроса = ДополнительныеПараметрыЗапросаКСервисуОбновлений();
	
	// Логирование запроса.
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Получение информации об исправлениях (патчах) конфигураций (%1).'"),
			URLОперации)
		+ Символы.ПС
		+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Версии подсистем:
				|%1;
				|ИдентификаторыУстановленныхИсправлений:
				|%2;
				|Дополнительные параметры:
				|%3'"),
			ПредставлениеСпискаКонфигураций(ВерсииКонфигураций),
			СтрСоединить(ИдентификаторыУстановленныхИсправлений, Символы.ПС),
			ПредставлениеДополнительныхПараметровЗапроса(ДополнительныеПараметрыЗапроса)));
	
	ПараметрыЗапросаJSON = PatchInfoRequestJSON(ПараметрыОперации, ДополнительныеПараметрыЗапроса);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		Результат.Ошибка = Истина;
		Результат.ПодробноеОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при получении информации о доступных исправлениях (патчах) конфигураций.
				|%1'"),
			РезультатОтправки.ИнформацияОбОшибке);
		ЗаписатьОшибкуВЖурналРегистрации(Результат.ПодробноеОписаниеОшибки);
		
		Результат.КраткоеОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить информацию о доступных исправлениях (патчах) конфигураций.
				|%1'"),
			РезультатОтправки.СообщениеОбОшибке);
		
		Возврат Результат;
		
	КонецЕсли;
	
	// Обработка ответа.
	Попытка
		ЗаполнитьИнформациюОбОбновленииИзPatchInfoResonseИзJSON(Результат, РезультатОтправки.Содержимое);
	Исключение
		
		Результат.Ошибка = Истина;
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		Результат.ПодробноеОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось проверить наличие исправлений (патчей) конфигураций.
				|Ошибка при обработке ответа сервиса.
				|Некорректный ответ сервиса.
				|%1
				|Тело ответа: %2'"),
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке),
			Лев(РезультатОтправки.Содержимое, 1024));
		ЗаписатьОшибкуВЖурналРегистрации(Результат.ПодробноеОписаниеОшибки);
		Результат.КраткоеОписаниеОшибки =
			НСтр("ru = 'Не удалось проверить наличие исправлений (патчей) конфигураций.
				|Некорректный ответ сервиса.'");
		
		Возврат Результат;
		
	КонецПопытки;
	
	Если Результат.Ошибка Тогда
		
		ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось проверить наличие исправлений (патчей) конфигураций.
				|
				|Сервис сообщил об ошибке.
				|
				|Ответ сервиса: %1'"),
			Лев(РезультатОтправки.Содержимое, 1024)));
		
		Возврат Результат;
		
	КонецЕсли;
	
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Получена информация о доступных исправлениях (патчах) конфигураций.
				|%1'"),
			РезультатОтправки.Содержимое));
	
	Возврат Результат;
	
КонецФункции

Функция ПредставлениеСпискаКонфигураций(СписокПодсистем)
	
	Результат = Новый Массив;
	
	Для Каждого ТекОписаниеПодсистемы Из СписокПодсистем Цикл
		Результат.Добавить(
			Символы.Таб
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1: %2'"),
				ТекОписаниеПодсистемы.ИмяПрограммы,
				ТекОписаниеПодсистемы.Версия));
	КонецЦикла;
	
	Возврат СтрСоединить(Результат, Символы.ПС);
	
КонецФункции

Процедура ЗаполнитьИнформациюОбОбновленииИзPatchInfoResonseИзJSON(Результат, ТелоJSON)
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	
	ТекущийУровень = 0;
	Пока ЧтениеJSONПрочитать(ЧтениеОтвета, ТекущийУровень) Цикл
		
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства И ТекущийУровень = 1 Тогда
			
			ИмяСвойства = ЧтениеОтвета.ТекущееЗначение;
			Если ИмяСвойства = "errorName" Тогда
				
				ИмяОшибки = ЗначениеСвойстваJSON(ЧтениеОтвета, ТекущийУровень, "");
				Если Не ПустаяСтрока(ИмяОшибки) Тогда
					Результат.Ошибка = Истина;
				КонецЕсли;
				
			ИначеЕсли ИмяСвойства = "errorMessage" Тогда
				
				Результат.КраткоеОписаниеОшибки   = ЗначениеСвойстваJSON(ЧтениеОтвета, ТекущийУровень, "");
				Результат.ПодробноеОписаниеОшибки = Результат.КраткоеОписаниеОшибки;
				
			ИначеЕсли ИмяСвойства = "patchUpdateList" Тогда
				
				ЗаполнитьИнформациюОбИсправленияхРодительскихКонфигурацийИзJSON(Результат, ЧтениеОтвета, ТекущийУровень);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЧтениеОтвета.Закрыть();
	
КонецПроцедуры

Процедура ЗаполнитьИнформациюОбИсправленияхРодительскихКонфигурацийИзJSON(Результат, ЧтениеОтвета, ТекущийУровень)
	
	ЧтениеJSONПрочитать(ЧтениеОтвета, ТекущийУровень);
	Если ЧтениеОтвета.ТипТекущегоЗначения <> ТипЗначенияJSON.НачалоМассива Тогда
		Возврат;
	КонецЕсли;
	
	Исправления = Результат.Исправления;
	Если Исправления = Неопределено Тогда
		// Если получение исправлений не требуется, тогда пропустить.
		// Контролируется сервисом, используется для дополнительной проверки.
		Пока ЧтениеJSONПрочитать(ЧтениеОтвета, ТекущийУровень) Цикл
			Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецМассива Тогда
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ДанныеИсправления = Неопределено;
	Пока ЧтениеJSONПрочитать(ЧтениеОтвета, ТекущийУровень) Цикл
		
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецМассива Тогда
			
			Возврат;
			
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда
			
			ДанныеИсправления = Результат.Исправления.Добавить();
			ДанныеИсправления.Применимость = НовыйТаблицаЗначенийПрименимостьИсправления();
			
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства И ТекущийУровень = 2 Тогда
			
			ИмяСвойства = ЧтениеОтвета.ТекущееЗначение;
			Если ИмяСвойства = "ueid" Тогда
				
				ЗначениеСвойства = ЗначениеСвойстваJSON(ЧтениеОтвета, ТекущийУровень, "");
				Попытка
					ДанныеИсправления.Идентификатор = Новый УникальныйИдентификатор(ЗначениеСвойства);
				Исключение
					ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Некорректный идентификатор исправления в patchUpdateList[].ueid (%1)'"),
						ЗначениеСвойства);
					ВызватьИсключение ТекстИсключения;
				КонецПопытки;
				
			ИначеЕсли ИмяСвойства = "name" Тогда
				ДанныеИсправления.Наименование = ЗначениеСвойстваJSON(ЧтениеОтвета, ТекущийУровень, "");
				
			ИначеЕсли ИмяСвойства = "description" Тогда
				ДанныеИсправления.Описание = ЗначениеСвойстваJSON(ЧтениеОтвета, ТекущийУровень, "");
				
			ИначеЕсли ИмяСвойства = "modificatedMetadata" Тогда
				ДанныеИсправления.ОписаниеИзмененныхМетаданных  = ЗначениеСвойстваJSON(ЧтениеОтвета, ТекущийУровень, "");
				
			ИначеЕсли ИмяСвойства = "status" Тогда
				ДанныеИсправления.Отозвано = (ЗначениеСвойстваJSON(ЧтениеОтвета, ТекущийУровень, "") = "revocation");
				
			ИначеЕсли ИмяСвойства = "size" Тогда
				ДанныеИсправления.Размер = ЗначениеСвойстваJSON(ЧтениеОтвета, ТекущийУровень, 0);
				
			ИначеЕсли ИмяСвойства = "applyToVersion" Тогда
				
				ЧтениеJSONПрочитать(ЧтениеОтвета, ТекущийУровень);
				Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоМассива Тогда
					Пока ЧтениеJSONПрочитать(ЧтениеОтвета, ТекущийУровень) Цикл
						Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта И ТекущийУровень = 3 Тогда
							СтрокаПрименимость = ДанныеИсправления.Применимость.Добавить();
						ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства И ТекущийУровень = 3 Тогда
							Если ЧтениеОтвета.ТекущееЗначение = "programName" Тогда
								СтрокаПрименимость.ИмяПрограммы = ЗначениеСвойстваJSON(ЧтениеОтвета, ТекущийУровень, "");
							ИначеЕсли ЧтениеОтвета.ТекущееЗначение = "versionNumber" Тогда
								СтрокаПрименимость.ВерсияПрограммы = ЗначениеСвойстваJSON(ЧтениеОтвета, ТекущийУровень, "");
							КонецЕсли;
						ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецМассива Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Получение файлов исправлений в сценариях вызова из программного интерфейса.

Функция ОписаниеФайловИсправлений(
	ИдентификаторыИсправлений,
	ДанныеАутентификации,
	ПроверитьДоступностьСервиса)
	
	НастройкиСоединения = ИнтернетПоддержкаПользователей.НастройкиСоединенияССерверами();
	
	Результат = Новый Структура;
	Результат.Вставить("ИмяОшибки"         , "");
	Результат.Вставить("Сообщение"         , "");
	Результат.Вставить("ИнформацияОбОшибке", "");
	Результат.Вставить("Исправления"       , Новый Массив);
	
	// Проверка доступности сервиса.
	Если ПроверитьДоступностьСервиса Тогда
		URLОперацииPing = URLОперацииPing(НастройкиСоединения.ДоменРасположенияСерверовИПП);
		РезультатПроверки = ИнтернетПоддержкаПользователей.ПроверитьURLДоступен(URLОперацииPing);
		Если Не ПустаяСтрока(РезультатПроверки.ИмяОшибки) Тогда
			Результат.ИмяОшибки = РезультатПроверки.ИмяОшибки;
			Результат.Сообщение = РезультатПроверки.СообщениеОбОшибке;
			Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось получить информацию о файлах исправлений (патчах).
					|Не удалось проверить доступность сервиса автоматического обновления программы: %1.
					|Причина:
					|%2'"),
				URLОперацииPing,
				РезультатПроверки.ИнформацияОбОшибке);
			ЗаписатьОшибкуВЖурналРегистрации(Результат.ИнформацияОбОшибке);
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	// Вызов операции сервиса.
	URLОперации = URLОперацииФайлыИсправлений(НастройкиСоединения.ДоменРасположенияСерверовИПП);
	ДополнительныеПараметрыЗапроса = ДополнительныеПараметрыЗапросаКСервисуОбновлений();
	
	// Логирование запроса.
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Получение информации о файлах исправлений (патчей) (%1).'"),
			URLОперации)
		+ Символы.ПС
		+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Логин:
				|%1;
				|Идентификаторы исправлений:
				|%2;
				|Дополнительные параметры:
				|%3'"),
			ДанныеАутентификации.Логин,
			СтрСоединить(ИдентификаторыИсправлений, Символы.ПС),
			ПредставлениеДополнительныхПараметровЗапроса(ДополнительныеПараметрыЗапроса)));
	
	ПараметрыЗапросаJSON = GetPatchFilesRequestJSON(
		ИдентификаторыИсправлений,
		ДанныеАутентификации,
		ДополнительныеПараметрыЗапроса);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при получении информации о файлах исправлений (патчах).
				|%1'"),
			РезультатОтправки.ИнформацияОбОшибке);
		ЗаписатьОшибкуВЖурналРегистрации(Результат.ИнформацияОбОшибке);
		
		Результат.ИмяОшибки = РезультатОтправки.КодОшибки;
		Результат.Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить информацию о файлах исправлений (патчах).
				|%1'"),
			РезультатОтправки.СообщениеОбОшибке);
		
		Возврат Результат;
		
	КонецЕсли;
	
	// Обработка ответа.
	Попытка
		ЗаполнитьИнформациюОФайлахИсправленийИзGetPacthFilesResonseJSON(Результат, РезультатОтправки.Содержимое);
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить информацию о файлах исправлений (патчах).
				|Ошибка при обработке ответа сервиса.
				|Некорректный ответ сервиса.
				|%1
				|Тело ответа: %2'"),
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке),
			Лев(РезультатОтправки.Содержимое, 1024));
		ЗаписатьОшибкуВЖурналРегистрации(Результат.ИнформацияОбОшибке);
		
		Результат.ИмяОшибки = "НекорректныйОтветСервиса";
		Результат.Сообщение =
			НСтр("ru = 'Не удалось получить информацию о файлах исправлений (патчах).
				|Некорректный ответ сервиса.'");
		
		Возврат Результат;
		
	КонецПопытки;
	
	Если Не ПустаяСтрока(Результат.ИмяОшибки) Тогда
		
		ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить информацию о файлах исправлений (патчах).
				|
				|Сервис сообщил об ошибке.
				|
				|Ответ сервиса: %1'"),
			Лев(РезультатОтправки.Содержимое, 1024)));
		
		Возврат Результат;
		
	КонецЕсли;
	
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Получена информация о файлах исправлений (патчах).
				|%1'"),
			РезультатОтправки.Содержимое));
	
	Возврат Результат;
	
КонецФункции

Функция GetPatchFilesRequestJSON(
	ИдентификаторыИсправлений,
	ДанныеАутентификации,
	ДопПараметрыЗапроса)
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("patchUinList");
	ЗаписьДанныхСообщения.ЗаписатьНачалоМассива();
	Для Каждого Идентификатор Из ИдентификаторыИсправлений Цикл
		ЗаписьДанныхСообщения.ЗаписатьЗначение(Строка(Идентификатор));
	КонецЦикла;
	ЗаписьДанныхСообщения.ЗаписатьКонецМассива();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("login");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеАутентификации.Логин);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("password");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеАутентификации.Пароль);
	
	ЗаписатьДополнительныеПараметрыЗапроса(ДопПараметрыЗапроса, ЗаписьДанныхСообщения);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

Процедура ЗаполнитьИнформациюОФайлахИсправленийИзGetPacthFilesResonseJSON(Результат, ТелоJSON)
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	
	ТекущийУровень = 0;
	Пока ЧтениеJSONПрочитать(ЧтениеОтвета, ТекущийУровень) Цикл
		
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства И ТекущийУровень = 1 Тогда
			
			ИмяСвойства = ЧтениеОтвета.ТекущееЗначение;
			Если ИмяСвойства = "errorName" Тогда
				
				Результат.ИмяОшибки = ЗначениеСвойстваJSON(ЧтениеОтвета, ТекущийУровень, "");
				
			ИначеЕсли ИмяСвойства = "errorMessage" Тогда
				
				Результат.ИнформацияОбОшибке = ЗначениеСвойстваJSON(ЧтениеОтвета, ТекущийУровень, "");
				Результат.Сообщение          = Результат.ИнформацияОбОшибке;
				
			ИначеЕсли ИмяСвойства = "patchDistributionDataList" Тогда
				
				ЗаполнитьИнформациюОФайлахИсправленийИзJSON(Результат, ЧтениеОтвета, ТекущийУровень);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЧтениеОтвета.Закрыть();
	
КонецПроцедуры

Функция СлужебнаяЗагрузитьИсправления(
	ИдентификаторыИсправлений,
	ИдентификаторФормы = Неопределено,
	ПроверитьДоступностьСервиса = Истина)
	
	Результат = Новый Структура;
	Результат.Вставить("Ошибка"                 , Ложь);
	Результат.Вставить("КраткоеОписаниеОшибки"  , "");
	Результат.Вставить("ПодробноеОписаниеОшибки", "");
	Результат.Вставить("Исправления"            , Новый Массив);
	
	Если Не Пользователи.ЭтоПолноправныйПользователь(, Истина, Истина) Тогда
		Результат.Ошибка = Истина;
		Результат.КраткоеОписаниеОшибки   = НСтр("ru = 'Недостаточно прав.'");
		Результат.ПодробноеОписаниеОшибки = НСтр("ru = 'Недостаточно прав для получения файлов исправлений (патчей).'");
		ЗаписатьОшибкуВЖурналРегистрации(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить файлы исправлений (патчей).
				|%1'"),
			Результат.ПодробноеОписаниеОшибки));
		Возврат Результат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеАутентификации =
		ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
	УстановитьПривилегированныйРежим(Ложь);
	Если ДанныеАутентификации = Неопределено Тогда
		Результат.Ошибка = Истина;
		Результат.КраткоеОписаниеОшибки   = НСтр("ru = 'Интернет-поддержка пользователей не подключена.'");
		Результат.ПодробноеОписаниеОшибки = НСтр("ru = 'Интернет-поддержка пользователей не подключена.'");
		ЗаписатьОшибкуВЖурналРегистрации(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить файлы исправлений (патчей).
				|%1'"),
			Результат.ПодробноеОписаниеОшибки));
		Возврат Результат;
	КонецЕсли;
	
	РезультатПолученияОписанияФайлов = ОписаниеФайловИсправлений(
		ИдентификаторыИсправлений,
		ДанныеАутентификации,
		ПроверитьДоступностьСервиса);
	Если Не ПустаяСтрока(РезультатПолученияОписанияФайлов.ИмяОшибки) Тогда
		Результат.Ошибка = Истина;
		Результат.КраткоеОписаниеОшибки   = РезультатПолученияОписанияФайлов.Сообщение;
		Результат.ПодробноеОписаниеОшибки = РезультатПолученияОписанияФайлов.ИнформацияОбОшибке;
		ЗаписатьОшибкуВЖурналРегистрации(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить файлы исправлений (патчей).
				|%1'"),
			Результат.ПодробноеОписаниеОшибки));
		Возврат Результат;
	КонецЕсли;
	
	// Загрузка файлов исправлений.
	Для Каждого ТекИсправление Из РезультатПолученияОписанияФайлов.Исправления Цикл
		
		РезультатПолучения = ЗагрузитьФайлИсправления(
			ТекИсправление.URLФайла,
			ТекИсправление.Идентификатор,
			ДанныеАутентификации);
		
		Если РезультатПолучения.Ошибка Тогда
			
			Результат.Ошибка = Истина;
			Результат.КраткоеОписаниеОшибки =
				НСтр("ru = 'Не удалось получить файл исправления (патча).'")
				+ Символы.ПС
				+ РезультатПолучения.КраткоеОписаниеОшибки;
			Результат.ПодробноеОписаниеОшибки =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось загрузить файл исправления (патча) с идентификатором %1.
						|%2'"),
					ТекИсправление.Идентификатор,
					РезультатПолучения.ПодробноеОписаниеОшибки);
			Возврат Результат;
			
		Иначе
			
			ЗагружаемоеИсправление = НовыйЗагружаемоеИсправление();
			ЗагружаемоеИсправление.Идентификатор = ТекИсправление.Идентификатор;
			ЗагружаемоеИсправление.АдресФайла    = ПоместитьВоВременноеХранилище(
				РезультатПолучения.Содержимое,
				ИдентификаторФормы);
			
			Результат.Исправления.Добавить(ЗагружаемоеИсправление);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Описание нового объекта загружаемого исправления.
//
// Возвращаемое значение:
//  Структура:
//    * Идентификатор - УникальныйИдентификатор - идентификатор исправления.
//    * АдресФайла - Строка - адрес файла во временном хранилище.
//    * ИмяПолученногоФайла - Строка - путь к файлу исправления.
//
Функция НовыйЗагружаемоеИсправление()
	
	Результат = Новый Структура();
	Результат.Вставить("Идентификатор"      , ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор());
	Результат.Вставить("АдресФайла"         , "");
	Результат.Вставить("ИмяПолученногоФайла", "");
	
	Возврат Результат;
	
КонецФункции

Функция ЗагрузитьФайлИсправления(URLФайла, Идентификатор, ДанныеАутентификации) Экспорт
	
	ИнтернетПоддержкаПользователей.ПроверитьURL(URLФайла);
	
	Результат = Новый Структура;
	Результат.Вставить("Ошибка"                 , Ложь);
	Результат.Вставить("КраткоеОписаниеОшибки"  , "");
	Результат.Вставить("ПодробноеОписаниеОшибки", "");
	Результат.Вставить("Содержимое"             , Неопределено);
	
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Получение файла исправления (патча).
				|URL: %1;
				|Идентификатор: %2.'"),
			URLФайла,
			Идентификатор));
	
	ТелоЗапроса = GetPatchFileRequestJSON(ДанныеАутентификации.Логин, ДанныеАутентификации.Пароль);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Метод"                   , "POST");
	ДопПараметры.Вставить("ФорматДанныхДляОбработки", 1);
	ДопПараметры.Вставить("ДанныеДляОбработки"      , ТелоЗапроса);
	ДопПараметры.Вставить("ФорматОтвета"            , 2);
	ДопПараметры.Вставить("Таймаут"                 , 600);
	ДопПараметры.Вставить("Заголовки"               , Заголовки);
	
	РезультатПолучения = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(URLФайла, , , ДопПараметры);
	Если Не ПустаяСтрока(РезультатПолучения.КодОшибки) Тогда
		Результат.Ошибка = Истина;
		Результат.КраткоеОписаниеОшибки =
			НСтр("ru = 'Не удалось получить файл исправления (патча).'") + Символы.ПС + РезультатПолучения.СообщениеОбОшибке;
		Результат.ПодробноеОписаниеОшибки =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось загрузить файл исправления (патча) с идентификатором %1.
					|%2'"),
				Идентификатор,
				РезультатПолучения.ИнформацияОбОшибке);
		ЗаписатьОшибкуВЖурналРегистрации(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить файл исправления (патча).
				|Идентификатор: %1;
				|URL: %2;
				|%3'"),
			Идентификатор,
			URLФайла,
			Результат.ПодробноеОписаниеОшибки));
		Возврат Результат;
	КонецЕсли;
	
	Результат.Содержимое = РезультатПолучения.Содержимое;
	
	ЗаписатьИнформациюВЖурналРегистрации(НСтр("ru = 'Файл исправления (патча) успешно получен'"));
	
	Возврат Результат;
	
КонецФункции

Функция GetPatchFileRequestJSON(Логин, Пароль)
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("login");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Логин);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("password");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Пароль);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Настройки автоматического обновления.

Процедура СохранитьИнформациюОДоступномОбновленииВНастройках(Знач ИнформацияОДоступномОбновлении)
	
	Если ТипЗнч(ИнформацияОДоступномОбновлении) = Тип("Структура") Тогда
		
		ОписаниеИнформацииОДоступномОбновлении = НовыйОписаниеСохраняемойИнформацииОДоступномОбновлении();
		ОписаниеИнформацииОДоступномОбновлении.ИмяПрограммы =
			ИнтернетПоддержкаПользователей.СлужебнаяИмяПрограммы();
		ОписаниеИнформацииОДоступномОбновлении.МетаданныеИмя =
			ИнтернетПоддержкаПользователей.ИмяКонфигурации();
		ОписаниеИнформацииОДоступномОбновлении.МетаданныеВерсия =
			ИнтернетПоддержкаПользователей.ВерсияКонфигурации();
		ОписаниеИнформацииОДоступномОбновлении.ВерсияПлатформы =
			ИнтернетПоддержкаПользователей.ТекущаяВерсияПлатформы1СПредприятие();
		ОписаниеИнформацииОДоступномОбновлении.ИнформацияОДоступномОбновлении = ИнформацияОДоступномОбновлении;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			ПолучениеОбновленийПрограммыКлиентСервер.ИдентификаторОбщихНастроек(),
			КлючНастройкиИнформацияОДоступномОбновлении(),
			ОписаниеИнформацииОДоступномОбновлении);
		
	КонецЕсли;
	
КонецПроцедуры

// Новый объект описания сохраняемой информации о доступном обновлении.
//
// Возвращаемое значение:
//  Структура:
//    * ИмяПрограммы - Строка
//    * МетаданныеИмя - Строка
//    * МетаданныеВерсия - Строка
//    * ВерсияПлатформы - Строка
//    * ИнформацияОДоступномОбновлении - Неопределено - объект не инициализирован.
//                                     - см. ИнформацияОДоступномОбновленииСлужебная
//
Функция НовыйОписаниеСохраняемойИнформацииОДоступномОбновлении()
	
	ИнформацияОДоступномОбновлении = Неопределено;	// см. ИнформацияОДоступномОбновленииСлужебная
	
	Результат = Новый Структура();
	Результат.Вставить("ИмяПрограммы"                  , "");
	Результат.Вставить("МетаданныеИмя"                 , "");
	Результат.Вставить("МетаданныеВерсия"              , "");
	Результат.Вставить("ВерсияПлатформы"               , "");
	Результат.Вставить("ИнформацияОДоступномОбновлении", ИнформацияОДоступномОбновлении);
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Информация о версиях платформы для текущей версии конфигурации

Функция ИнформацияОВерсияхПлатформыКонфигурации(ИмяПрограммы, ВерсияПрограммы)
	
	Результат = Новый Структура();
	Результат.Вставить("Ошибка"                      , Ложь);
	Результат.Вставить("КраткоеОписаниеОшибки"       , "");
	Результат.Вставить("ПодробноеОписаниеОшибки"     , "");
	Результат.Вставить("МинимальнаяВерсияПлатформы"  , "");
	Результат.Вставить("РекомендуемаяВерсияПлатформы", "");
	
	НастройкиСоединения = ИнтернетПоддержкаПользователей.НастройкиСоединенияССерверами();
	
	// Проверка доступности сервиса.
	URLОперацииPing   = URLОперацииPing(НастройкиСоединения.ДоменРасположенияСерверовИПП);
	РезультатПроверки = ИнтернетПоддержкаПользователей.ПроверитьURLДоступен(URLОперацииPing);
	Если Не ПустаяСтрока(РезультатПроверки.ИмяОшибки) Тогда
		Результат.Ошибка                  = Истина;
		Результат.КраткоеОписаниеОшибки   = РезультатПроверки.СообщениеОбОшибке;
		Результат.ПодробноеОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось проверить доступность сервиса автоматического обновления программы: %1.
				|Причина:
				|%2'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			URLОперацииPing,
			РезультатПроверки.ИнформацияОбОшибке);
		ЗаписатьОшибкуВЖурналРегистрации(Результат.ПодробноеОписаниеОшибки);
		Возврат Результат;
	КонецЕсли;
	
	// Вызов операции сервиса.
	URLОперации = URLОперацииИнформацияОВерсияхПлатформы(НастройкиСоединения.ДоменРасположенияСерверовИПП);
	
	ДанныеЗапроса = Новый Структура();
	ДанныеЗапроса.Вставить("programName"  , ИмяПрограммы);
	ДанныеЗапроса.Вставить("versionNumber", ВерсияПрограммы);
	
	// Логирование запроса.
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Получение информации о версиях платформы для текущей версии программы.
				|URL: %3
				|Имя программы: %1
				|Версия программы: %2'"),
			ИмяПрограммы,
			ВерсияПрограммы,
			URLОперации));
	
	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, ДанныеЗапроса);
	
	ПараметрыЗапросыJSON = ЗаписьJSON.Закрыть();
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "application/json");
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("Метод"                   , "POST");
	ПараметрыЗапроса.Вставить("ФорматОтвета"            , 1);
	ПараметрыЗапроса.Вставить("Заголовки"               , Заголовки);
	ПараметрыЗапроса.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросыJSON);
	ПараметрыЗапроса.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыЗапроса.Вставить("Таймаут"                 , НастройкиСоединения.ТаймаутПодключения);
	
	ОтветСервиса = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыЗапроса);
	
	// Данные из сервиса получены успешно
	Если ОтветСервиса.КодСостояния = 200 Тогда
		
		// Тело ответа:
		// [
		//   {
		//     "platformVersionMin": "string",
		//     "platformVersionRecommended": "string"
		//   }
		// ]
		
		ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Получена информация о версиях платформы для текущей версии конфигурации.
					|%1'"),
				ОтветСервиса.Содержимое));
		
		Попытка
			
			ДанныеОтвета = ОбщегоНазначения.JSONВЗначение(ОтветСервиса.Содержимое, , Ложь);	// Массив из Структура
			
			МинимальнаяВерсияПлатформы   = Новый Массив();
			РекомендуемаяВерсияПлатформы = Новый Массив();
			
			Для Каждого СтрокаОтвета Из ДанныеОтвета Цикл
				МинимальнаяВерсияПлатформы.Добавить(СтрокаОтвета.platformVersionMin);
				РекомендуемаяВерсияПлатформы.Добавить(СтрокаОтвета.platformVersionRecommended);
			КонецЦикла;
			
			Результат.МинимальнаяВерсияПлатформы   = СтрСоединить(МинимальнаяВерсияПлатформы, ";");
			Результат.РекомендуемаяВерсияПлатформы = СтрСоединить(РекомендуемаяВерсияПлатформы, ";");
			
		Исключение
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			
			Результат.Ошибка                  = Истина;
			Результат.КраткоеОписаниеОшибки   =
				НСтр("ru = 'Не удалось получить информацию о версиях платформы для текущей версии конфигурации.
					|Некорректный ответ сервиса.'");
			Результат.ПодробноеОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при получении информации о версиях платформы для текущей версии конфигурации.
					|Некорректный ответ сервиса.
					|%1
					|Ответ сервиса: %2'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке),
				ОтветСервиса.Содержимое);
			
		КонецПопытки;
		
	ИначеЕсли ОтветСервиса.КодСостояния = 404 Тогда
		
		ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось получить информацию о версиях платформы для текущей версии конфигурации по причине:
					|Не найдена имя и версия программы.
					|Имя программы: %1
					|Версия программы: %2'"),
				ДанныеЗапроса.programName,
				ДанныеЗапроса.versionNumber));
		
	ИначеЕсли Не ПустаяСтрока(ОтветСервиса.КодОшибки) Тогда
		
		Результат.Ошибка                  = Истина;
		Результат.КраткоеОписаниеОшибки   = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить информацию о версиях платформы для текущей версии конфигурации.
				|%1'"),
			ОтветСервиса.СообщениеОбОшибке);
		Результат.ПодробноеОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при получении информации о версиях платформы для текущей версии конфигурации.
				|%1
				|Ответ сервиса: %2'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			ОтветСервиса.ИнформацияОбОшибке,
			ОтветСервиса.Содержимое);
		
	КонецЕсли;
	
	Если Результат.Ошибка Тогда
		ЗаписатьОшибкуВЖурналРегистрации(Результат.ПодробноеОписаниеОшибки);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

Процедура ЗаписатьОшибкуВЖурналРегистрации(СообщениеОбОшибке) Экспорт
	
	ЗаписьЖурналаРегистрации(
		ПолучениеОбновленийПрограммыКлиентСервер.ИмяСобытияЖурналаРегистрации(ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Ошибка,
		,
		,
		Лев(СообщениеОбОшибке, 5120));
	
КонецПроцедуры

Процедура ЗаписатьИнформациюВЖурналРегистрации(Сообщение) Экспорт
	
	ЗаписьЖурналаРегистрации(
		ПолучениеОбновленийПрограммыКлиентСервер.ИмяСобытияЖурналаРегистрации(ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Информация,
		,
		,
		Лев(Сообщение, 5120));
	
КонецПроцедуры

Функция ДополнительныеПараметрыЗапросаКСервисуОбновлений()
	
	Результат = ИнтернетПоддержкаПользователей.ДополнительныеПараметрыВызоваОперацииСервиса();
	Если ПолучениеОбновленийПрограммыКлиентСервер.Это64РазрядноеПриложение() Тогда
		// Сообщить о поддержке платформы 64 только в случае, если конфигурация может
		// определить, что текущее приложение - 64-разрядное.
		Результат.Вставить("platform64Supported", "true");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьОтключенноеДело(ТекущиеДела, ИдентификаторДела, Разделы)
	
	Для Каждого Раздел Из Разделы Цикл
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = ИдентификаторДела;
		Дело.ЕстьДела       = Ложь;
		Дело.Важное         = Ложь;
		Дело.Представление  = НСтр("ru = 'Доступно обновление программы'");
		Дело.Форма          = "Обработка.ОбновлениеПрограммы.Форма.Форма";
		Дело.Владелец       = Раздел;
	КонецЦикла;
	
КонецПроцедуры

Функция ВидПоставляемыхДанныхИсправления()
	
	Возврат "Patches";
	
КонецФункции 

Процедура УстановитьРасписаниеРегламентногоЗаданияЗагрузкиИсправлений()
	
	Задание = РегламентныеЗаданияСервер.Задание(
		Метаданные.РегламентныеЗадания.ПолучениеИУстановкаИсправленийКонфигурации);
	
	// Чтобы не создавать пиковых нагрузок на сервис,
	// время загрузки исправлений будет выбрано случайным
	// образом между интервалами:
	// - 00:00 и 06:00
	// - 11:00 и 14:00
	// - 16:00 и 22:00
	// Каждый день регламентное задание должно запускаться 3 раза.
	
	Генератор = Новый ГенераторСлучайныхЧисел;
	РасписаниеНочь = Новый РасписаниеРегламентногоЗадания;
	РасписаниеНочь.ВремяНачала       = Дата("00010101000000") + Генератор.СлучайноеЧисло(0, 21600);
	РасписаниеНочь.ПериодПовтораДней = 1;
	
	РасписаниеДень = Новый РасписаниеРегламентногоЗадания;
	РасписаниеДень.ВремяНачала       = Дата("00010101110000") + Генератор.СлучайноеЧисло(0, 10800);
	РасписаниеДень.ПериодПовтораДней = 1;
	
	РасписаниеВечер = Новый РасписаниеРегламентногоЗадания;
	РасписаниеВечер.ВремяНачала       = Дата("00010101160000") + Генератор.СлучайноеЧисло(0, 21600);
	РасписаниеВечер.ПериодПовтораДней = 1;
	
	ДетальныеРасписанияДня = Новый Массив;
	ДетальныеРасписанияДня.Добавить(РасписаниеНочь);
	ДетальныеРасписанияДня.Добавить(РасписаниеДень);
	ДетальныеРасписанияДня.Добавить(РасписаниеВечер);
	Задание.Расписание.ДетальныеРасписанияДня = ДетальныеРасписанияДня;
	Задание.Расписание.ПериодПовтораДней      = 1;
	
	Задание.Записать();
	
КонецПроцедуры

// Возвращает идентификатор ключа настройки общего хранилища, который хранит информацию о настройках автоматического
// обновления.
//
// Возвращаемое значение:
//  Строка
//
Функция КлючНастройкиАвтоматическогоОбновления()
	
	Возврат "ПолучениеОбновленийПрограммы";
	
КонецФункции

// Возвращает идентификатор ключа настройки общего хранилища, который хранит информацию о версиях платформы для текущей
// версии конфигурации, полученного из сервиса.
//
// Возвращаемое значение:
//  Строка
//
Функция КлючНастройкиИнформацияОВерсияхПлатформы()
	
	Возврат "ПолучениеОбновленийПрограммы/ИнформацияОВерсияхПлатформы";
	
КонецФункции

// Возвращает идентификатор ключа настройки общего хранилища, который хранит информацию о доступном обновлении текущей
// версии конфигурации.
//
// Возвращаемое значение:
//  Строка
//
Функция КлючНастройкиИнформацияОДоступномОбновлении() Экспорт
	
	Возврат "ПолучениеОбновленийПрограммы/ИнформацияОДоступномОбновлении"
		+ ?(ПолучениеОбновленийПрограммыКлиентСервер.Это64РазрядноеПриложение(),
			"64",
			"");
	
КонецФункции

// Возвращает идентификатор ключа настройки общего хранилища, который хранит информацию о каталога дистрибутива
// платформы 1С:Предприятие.
//
// Возвращаемое значение:
//  Строка
//
Функция КлючНастройкиКаталогДистрибутива()
	
	Возврат "КаталогДистрибутива";
	
КонецФункции

// Возвращает идентификатор ключа настройки общего хранилища, который хранит информацию о версии платформы для которой
// не надо отображать сообщение о использовании нерекомендуемой версии.
//
// Возвращаемое значение:
//  Строка
//
Функция КлючНастройкиСообщениеОНерекомендуемойВерсииПлатформы() Экспорт
	
	Возврат "СообщениеОНерекомендуемойВерсииПлатформы";
	
КонецФункции

#КонецОбласти

#Область ОбработчикиОбновления

// Преобразует пользовательские настройки подсистемы
// "Получение обновлений программы".
//
Процедура ОбновлениеИнформационнойБазы_ОбновитьНастройкиПолученияОбновлений_2_1_8_1() Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		// Не используется при работе в модели сервиса.
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Перенос настроек проверки наличия обновлений
	// из СтандартныеПодсистемы.ОбновлениеКонфигурации,
	// преобразование существующих настроек БИП.
	
	ТипСтруктура = Тип("Структура");
	СписокПользователей = ПользователиИнформационнойБазы.ПолучитьПользователей();
	Для Каждого ТекПользователь Из СписокПользователей Цикл
		
		ИмяПользователя = ТекПользователь.Имя;
		
		НастройкиБИП = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			ПолучениеОбновленийПрограммыКлиентСервер.ИдентификаторОбщихНастроек(),
			КлючНастройкиАвтоматическогоОбновления(),
			,
			,
			ИмяПользователя);
		
		// Поиск и замена устаревших свойств
		Если ТипЗнч(НастройкиБИП) = ТипСтруктура Тогда
			УстаревшиеПараметры = Новый Структура("СпособАвтоматическойПроверки");
			ЗаполнитьЗначенияСвойств(УстаревшиеПараметры, НастройкиБИП);
			Если УстаревшиеПараметры.СпособАвтоматическойПроверки <> Неопределено Тогда
				НастройкиБИП.Вставить("РежимАвтоматическойПроверкиНаличияОбновленийПрограммы",
					УстаревшиеПараметры.СпособАвтоматическойПроверки);
				НастройкиБИП.Удалить("СпособАвтоматическойПроверки");
			КонецЕсли;
		КонецЕсли;
		
		НастройкиБСП = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"ОбновлениеКонфигурации",
			"НастройкиОбновленияКонфигурации",
			,
			,
			ИмяПользователя);
		
		Если ТипЗнч(НастройкиБСП) = ТипСтруктура Тогда
			
			УстаревшиеПараметры = Новый Структура(
				"ПроверятьНаличиеОбновленияПриЗапуске,РасписаниеПроверкиНаличияОбновления");
			ЗаполнитьЗначенияСвойств(УстаревшиеПараметры, НастройкиБСП);
			
			Если ЗначениеЗаполнено(УстаревшиеПараметры.ПроверятьНаличиеОбновленияПриЗапуске) Тогда
				
				Если ТипЗнч(НастройкиБИП) <> ТипСтруктура Тогда
					НастройкиБИП = НовыйНастройкиАвтоматическогоОбновления();
				КонецЕсли;
				
				НастройкиБИП.РежимАвтоматическойПроверкиНаличияОбновленийПрограммы =
					УстаревшиеПараметры.ПроверятьНаличиеОбновленияПриЗапуске;
				НастройкиБИП.Расписание = УстаревшиеПараметры.РасписаниеПроверкиНаличияОбновления;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТипЗнч(НастройкиБИП) = ТипСтруктура Тогда
			// Если настройки были изменены, сохранить настройки.
			ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
				ПолучениеОбновленийПрограммыКлиентСервер.ИдентификаторОбщихНастроек(),
				КлючНастройкиАвтоматическогоОбновления(),
				НастройкиБИП,
				,
				ИмяПользователя);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет обновление расписания загрузки исправлений в информационную базу.
//
// Параметры:
//  Параметры - Структура
//
Процедура ОбновитьРасписаниеЗагрузкиИсправлений(Параметры) Экспорт
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Обновление расписания загрузки исправлений (патчей).'"));
	
	УстановитьРасписаниеРегламентногоЗаданияЗагрузкиИсправлений();
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Обновление расписания загрузки исправлений (патчей). Успешно завершено.'"));
	
КонецПроцедуры

// Включает автоматическую загрузку исправлений (патчей).
//
// Параметры:
//  Параметры - Структура
//
Процедура ВключитьАвтоматическуюЗагрузкуИсправлений(Параметры) Экспорт
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Установка настройки автоматической загрузки исправлений (патчей).'"));
	
	Если ДоступнаАвтоматическаяЗагрузкаИсправлений() Тогда
		ВключитьОтключитьАвтоматическуюУстановкуИсправлений(Истина);
	КонецЕсли;
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Установка настройки автоматической загрузки исправлений (патчей). Успешно завершено.'"));
	
КонецПроцедуры

// Выполняет обновление расписания регламентной операции по обновлению информации о версиях платформы.
//
// Параметры:
//  Параметры - Структура
//
Процедура ОбновитьРасписаниеЗаданияПоОбновлениюИнформацииОВерсияхПлатформы(Параметры) Экспорт
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Обновление расписания регламентной операции по обновлению информации о версиях платформы.'"));
	
	Задание = РегламентныеЗаданияСервер.Задание(
		Метаданные.РегламентныеЗадания.ОбновлениеИнформацииОВерсияхПлатформы);
	
	// Чтобы не создавать пиковых нагрузок на сервис, время обновления информации о версиях платформы будет выбрано
	// случайным образом.
	
	Генератор = Новый ГенераторСлучайныхЧисел();
	
	Задание.Расписание.ВремяНачала       = Дата("00010101") + Генератор.СлучайноеЧисло(0, 86399);
	Задание.Расписание.ПериодПовтораДней = 1;
	
	Задание.Записать();
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Успешно обновлено расписание регламентной операции по обновлению информации о версиях платформы.'"));
	
КонецПроцедуры

// Выполняет исправление расписания загрузки исправлений в информационную базу.
//
// Параметры:
//  Параметры - Структура
//
Процедура ИсправитьРасписаниеЗагрузкиИсправлений(Параметры) Экспорт
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Обновление расписания загрузки исправлений (патчей).'"));
	
	Задание = РегламентныеЗаданияСервер.Задание(
		Метаданные.РегламентныеЗадания.ПолучениеИУстановкаИсправленийКонфигурации);
	
	// Необходимо выполнить поиск второго промежутка времени проверки обновлений и если он находится в периоде с 11:00
	// по 11:30, то необходимо переопределить время старта используя генератор случайных числе, чтобы второй период
	// находился в диапазоне с 11:00 по 14:00
	
	Время_1100 = '00010101110000';
	Время_1130 = '00010101113000';
	
	РасписаниеИзменено = Ложь;
	Для Каждого РасписаниеДня Из Задание.Расписание.ДетальныеРасписанияДня Цикл
		Если Время_1100 <= РасписаниеДня.ВремяНачала
			И РасписаниеДня.ВремяНачала <= Время_1130 Тогда
			
			Генератор = Новый ГенераторСлучайныхЧисел();
			РасписаниеДня.ВремяНачала = Время_1100 + Генератор.СлучайноеЧисло(0, 10800);
			
			РасписаниеИзменено = Истина;
			Прервать;
			
		КонецЕсли;
	КонецЦикла;
	
	Если РасписаниеИзменено Тогда
		Задание.Записать();
	КонецЕсли;
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Обновление расписания загрузки исправлений (патчей). Успешно завершено.'"));
	
КонецПроцедуры

#КонецОбласти

#Область БСПТекущиеДела

// Добавляет задачу обновления программы в список текущих дел, если подсистема доступна, есть право просмотра и доступно
// обновление программы.
//
// Параметры:
//  ТекущиеДела - см. ПриЗаполненииСпискаТекущихДел.ТекущиеДела.
//
Процедура ЗаполнитьСписокТекущиеДелОбновленияПрограммы(ТекущиеДела)
	
	Если Не ДоступноИспользованиеОбновленияПрограммы() Тогда
		Возврат;
	КонецЕсли;
	
	// Если автоматическая проверка обновлений отключена, то информация о доступном обновлении хранящаяся в настройках
	// может быть не актуальной
	НастройкиОбновления = НастройкиАвтоматическогоОбновления();
	Если НастройкиОбновления.РежимАвтоматическойПроверкиНаличияОбновленийПрограммы = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторДела = "ОбновлениеПрограммы";
	
	// Вызов процедуры предполагает наличие подсистемы СтандартныеПодсистемы.ТекущиеДела.
	МодульТекущиеДелаСервер = ОбщегоНазначения.ОбщийМодуль("ТекущиеДелаСервер");
	Если МодульТекущиеДелаСервер.ДелоОтключено(ИдентификаторДела) Тогда
		Возврат;
	КонецЕсли;
	
	Подсистема = Метаданные.Подсистемы.Найти("Администрирование");
	Если Подсистема = Неопределено
		Или Не ПравоДоступа("Просмотр", Подсистема)
		Или Не ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(Подсистема) Тогда
		Разделы = МодульТекущиеДелаСервер.РазделыДляОбъекта(Метаданные.Обработки.ОбновлениеПрограммы.ПолноеИмя());
	Иначе
		Разделы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Подсистема);
	КонецЕсли;
	
	Если Разделы.Количество() > 0 Тогда
		
		ИнформацияОДоступномОбновлении = ИнформацияОДоступномОбновленииВНастройках();
		ПараметрыОповещения = ПараметрыОповещенияОДоступномОбновлении(ИнформацияОДоступномОбновлении, Истина);
		
		Если ПараметрыОповещения = Неопределено Тогда
			ДобавитьОтключенноеДело(ТекущиеДела, ИдентификаторДела, Разделы);
			Возврат;
		КонецЕсли;
		
		Для Каждого Раздел Из Разделы Цикл
			
			Дело = ТекущиеДела.Добавить();
			Дело.Идентификатор = ИдентификаторДела;
			Дело.ЕстьДела      = Истина;
			Дело.Важное        = ПараметрыОповещения.Важное;
			Дело.Представление = ПараметрыОповещения.Текст;
			Дело.Форма         = "Обработка.ОбновлениеПрограммы.Форма.Форма";
			Дело.Владелец      = Раздел;
			
			Если ПараметрыОповещения.РекомендуетсяУстановить Тогда
				ДелоРекомендуетсяУстановить = ТекущиеДела.Добавить();
				ДелоРекомендуетсяУстановить.Идентификатор  = "РекомендацияУстановитьОбновленияПрограммы";
				ДелоРекомендуетсяУстановить.ЕстьДела       = Истина;
				ДелоРекомендуетсяУстановить.Представление  = НСтр("ru = 'Рекомендуется установить это обновление.'");
				ДелоРекомендуетсяУстановить.Владелец       = ИдентификаторДела;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет задачу включения автоматической загрузки и установки исправлений в список текущих дел, если доступна
// автоматическая загрузка исправлений и признак не включен.
//
// Параметры:
//  ТекущиеДела - см. ПриЗаполненииСпискаТекущихДел.ТекущиеДела.
//
Процедура ЗаполнитьСписокТекущихДелАвтоматическойЗагрузкиИсправлений(ТекущиеДела)
	
	НастройкиЗагрузки = НастройкиЗагрузкиИсправлений();
	Если НастройкиЗагрузки.ОтключитьНапоминания Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыДоступа = ПараметрыДоступаКОбновлениюПрограммы();
	Если Не ПараметрыДоступа.ДоступнаПодсистема
		Или Не ДоступнаАвтоматическаяЗагрузкаИсправлений() Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторДела = "ВключениеАвтоматическойЗагрузкиИсправлений";
	
	// Вызов процедуры предполагает наличие подсистемы СтандартныеПодсистемы.ТекущиеДела.
	МодульТекущиеДелаСервер = ОбщегоНазначения.ОбщийМодуль("ТекущиеДелаСервер");
	Если МодульТекущиеДелаСервер.ДелоОтключено(ИдентификаторДела) Тогда
		Возврат;
	КонецЕсли;
	
	Подсистема = Метаданные.Подсистемы.Найти("Администрирование");
	Если Подсистема = Неопределено
		Или Не ПравоДоступа("Просмотр", Подсистема)
		Или Не ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(Подсистема) Тогда
		Разделы = МодульТекущиеДелаСервер.РазделыДляОбъекта(Метаданные.Обработки.ОбновлениеПрограммы.ПолноеИмя());
	Иначе
		Разделы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Подсистема);
	КонецЕсли;
	
	Если Разделы.Количество() > 0 Тогда
		
		ДатаИнформирования = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			ПолучениеОбновленийПрограммыКлиентСервер.ИдентификаторОбщихНастроек(),
			ПолучениеОбновленийПрограммыКлиентСервер.КлючНастройкиДатаИнформированияОВключенииЗагрузкиИсправлений(),
			'00010101');
		ЕстьДела           = Не АвтоматическаяЗагрузкаИсправленийВключена()
			И ДатаИнформирования <= ТекущаяДатаСеанса();
		
		Для Каждого Раздел Из Разделы Цикл
			
			Дело = ТекущиеДела.Добавить();
			Дело.Идентификатор  = ИдентификаторДела;
			Дело.ЕстьДела       = ЕстьДела;
			Дело.Важное         = Истина;
			Дело.Владелец       = Раздел;
			Дело.Представление  = НСтр("ru = 'Автоматическая установка исправлений'");
			Дело.Форма          = "Обработка.ОбновлениеПрограммы.Форма.НастройкаЗагрузкиИсправлений";
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
