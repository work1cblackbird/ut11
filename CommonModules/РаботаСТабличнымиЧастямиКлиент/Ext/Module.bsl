#Область ПрограммныйИнтерфейс

// Проверяет наличие выделенной строки, необходимой для выполнения команды. Выводит сообщение в случае ее отсутствия.
//
// Параметры:
//  ТаблицаФормы - ТаблицаФормы - элемент формы, содержащий табличную часть.
//
// Возвращаемое значение:
//  Булево - Истина - выполнение команды возможно; Ложь - в противном случае.
//
Функция ВыбранаСтрокаДляВыполненияКоманды(ТаблицаФормы) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаФормы.ВыделенныеСтроки) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Для выполнения команды требуется выбрать строку табличной части.'"));
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

#Область ПроверкаВозможностиЗаполнения

// Функция-конструктор параметров проверки возможности заполнения табличной части.
//
// Возвращаемое значение:
//  Структура:
//     * ТабличнаяЧасть - ДанныеФормыКоллекция - табличная часть, которую необходимо проверить на незаполненность,
//          в случае если табличная часть заполнена, после подтверждения пользователя, происходит её очистка.
//     * ЗаголовокТабличнойЧасти - Строка - имя проверяемой табличной части, которое будет показано в сообщениях проверки
//     * ПроверятьРаспроведенность - Булево - указывает необходимость проверки непроведенности документа,
//          в случае если документ проведен, после подтверждения пользователя, происходит отмена его проведения.
//     * ПроверяемыеРеквизиты - Структура - реквизиты объекта, для которых необходимо выполнить проверку заполнения,
//          где Ключ - имя реквизита, а Значение - его заголовок.
//
Функция ПараметрыПроверкиЗаполнения() Экспорт
	
	ПараметрыПроверкиЗаполнения = Новый Структура;
	ПараметрыПроверкиЗаполнения.Вставить("ТабличнаяЧасть", Неопределено);
	ПараметрыПроверкиЗаполнения.Вставить("ЗаголовокТабличнойЧасти", "");
	ПараметрыПроверкиЗаполнения.Вставить("ПроверятьРаспроведенность", Истина);
	ПараметрыПроверкиЗаполнения.Вставить("ПроверяемыеРеквизиты", Новый Структура);
	
	Возврат ПараметрыПроверкиЗаполнения;
	
КонецФункции

// Проверяет возможность заполнения табличной части объекта.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма объекта
//  ОповещениеПослеПроверки - ОписаниеОповещения - описание процедуры, которая будет вызвана, если заполнение возможно
//      со следующими параметрами:
//          Результат - Булево - всегда Истина
//          ДополнительныеПараметры - Произвольный - параметры, заданные в ОповещениеПослеПроверки при создании.
//  ПараметрыПроверкиЗаполнения - Структура - (см. РаботаСТабличнымиЧастямиКлиент.ПараметрыПроверкиЗаполнения).
//
Процедура ПроверитьВозможностьЗаполнения(Форма, ОповещениеПослеПроверки, ПараметрыПроверкиЗаполнения) Экспорт
	
	ОчиститьСообщения();
	
	ШаблонОшибки = НСтр("ru = 'Поле ""%1"" не заполнено'");
	Отказ = Ложь;
	Для Каждого Элемент Из ПараметрыПроверкиЗаполнения.ПроверяемыеРеквизиты Цикл
		
		Если Не ЗначениеЗаполнено(Форма.Объект[Элемент.Ключ]) Тогда
			ТекстОшибки = СтрШаблон(ШаблонОшибки, Элемент.Значение);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, Элемент.Ключ, "Объект", Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	НужноРаспровести = ПараметрыПроверкиЗаполнения.ПроверятьРаспроведенность И Форма.Объект.Проведен;
	НужноОчиститьТЧ = ЗначениеЗаполнено(ПараметрыПроверкиЗаполнения.ТабличнаяЧасть);
	ТекстВопроса = "";
	
	Если НужноРаспровести И НужноОчиститьТЧ Тогда
		ТекстВопроса = НСтр("ru = 'Заполнение ""%1"" возможно только в непроведенном документе.
			|Табличная часть будет очищена. Очистить и отменить проведение?'");
	ИначеЕсли НужноРаспровести И Не НужноОчиститьТЧ Тогда
		ТекстВопроса = НСтр("ru = 'Заполнение ""%1"" возможно только в непроведенном документе, отменить проведение?'");
	ИначеЕсли Не НужноРаспровести И НужноОчиститьТЧ Тогда
		ТекстВопроса = НСтр("ru = 'Табличная часть ""%1"" будет очищена, продолжить?'");
	КонецЕсли;

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("ОповещениеПослеПроверки", ОповещениеПослеПроверки);
	ДополнительныеПараметры.Вставить("НужноРаспровести",        НужноРаспровести);
	ДополнительныеПараметры.Вставить("ТабличнаяЧасть",          ПараметрыПроверкиЗаполнения.ТабличнаяЧасть);
	Если НЕ ПустаяСтрока(ТекстВопроса) Тогда
		Если ПустаяСтрока(ПараметрыПроверкиЗаполнения.ЗаголовокТабличнойЧасти) Тогда
			ТекстВопроса = СтрЗаменить(ТекстВопроса, " ""%1"" ", " ");
		Иначе
			ТекстВопроса = СтрШаблон(ТекстВопроса, ПараметрыПроверкиЗаполнения.ЗаголовокТабличнойЧасти);
		КонецЕсли;
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВозможностьЗаполненияПослеВопроса",
			ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ПроверитьВозможностьЗаполненияПослеЗаписи(Истина, ДополнительныеПараметры);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область РазбиениеСтроки

// Функция-конструктор дополнительных параметров разбиения строки.
//
// Возвращаемое значение:
//  Структура:
//     * ИмяПоляКоличество - Строка - имя поля, по которому будет происходить разбиение
//     * Заголовок - Строка - заголовок формы ввода числа
//     * РазрешитьНулевоеКоличество - Булево - признак, что в исходной и конечной строке может быть 0
//     * Количество - Неопределено, Число - количество, которое будет отображено в форме редактирования числа;
//          если Неопределенно - будет показано количество, взятое из исходной строки.
//     * МаксимальноДопустимоеЗначение - Число - верхний предел указания количества.
//
Функция ПараметрыРазбиенияСтроки() Экспорт
	
	ПараметрыРазбиенияСтроки = Новый Структура;
	ПараметрыРазбиенияСтроки.Вставить("ИмяПоляКоличество", "КоличествоУпаковок");
	ПараметрыРазбиенияСтроки.Вставить("Заголовок", НСтр("ru = 'Введите количество товара в новой строке'"));
	ПараметрыРазбиенияСтроки.Вставить("РазрешитьНулевоеКоличество", Истина);
	ПараметрыРазбиенияСтроки.Вставить("Количество", Неопределено);
	ПараметрыРазбиенияСтроки.Вставить("МаксимальноДопустимоеЗначение", 0);
	
	Возврат ПараметрыРазбиенияСтроки;
	
КонецФункции

// Разбивает выделенную строку на две по введенному количеству.
//
// Параметры:
//  ТабличнаяЧасть - ДанныеФормыКоллекция - табличная часть, в которой необходимо разбить выделенную строку
//  ТаблицаФормы - ТаблицаФормы - элемент формы, содержащий табличную часть
//  ОповещениеПослеРазбиения - ОписаниеОповещения - описание процедуры, вызов которой будет произведен после разбиения,
//      с передачей значения результата разбиения: ДанныеФормыЭлементКоллекции - новая строка полученная разбиением;
//      Неопределено - разбиение не проводилось.
//  ПараметрыРазбиенияСтроки - Структура - (см. РаботаСТабличнымиЧастямиКлиент.ПараметрыРазбиенияСтроки).
//
Процедура РазбитьСтроку(ТабличнаяЧасть, ТаблицаФормы, ОповещениеПослеРазбиения = Неопределено, ПараметрыРазбиенияСтроки = Неопределено) Экспорт
	
	Если ПараметрыРазбиенияСтроки = Неопределено Тогда
		ПараметрыРазбиенияСтроки = ПараметрыРазбиенияСтроки();
	КонецЕсли;
	
	Отказ = Ложь;
	Если Не ВыбранаСтрокаДляВыполненияКоманды(ТаблицаФормы) Тогда
		Отказ = Истина;
	ИначеЕсли ТаблицаФормы.ТекущиеДанные[ПараметрыРазбиенияСтроки.ИмяПоляКоличество] = 0
		И Не ПараметрыРазбиенияСтроки.РазрешитьНулевоеКоличество Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Невозможно разбить строку с нулевым количеством.'"));
		Отказ = Истина;
	ИначеЕсли ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ТабличнаяЧасть[0], "НоменклатураНабора") Тогда
		НаборыКлиент.ПередУдалениемСтрокиТабличнойЧасти(ТаблицаФормы, ТаблицаФормы.Имя, Отказ, Истина);
	КонецЕсли;
	
	Если Отказ Тогда
		Если ОповещениеПослеРазбиения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеПослеРазбиения, Неопределено);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ТаблицаФормы.ТекущиеДанные[ПараметрыРазбиенияСтроки.ИмяПоляКоличество] = 0 Тогда // копирование строки
		ДобавитьСтрокуРазбиением(ТабличнаяЧасть, ТаблицаФормы, 0, ОповещениеПослеРазбиения, ПараметрыРазбиенияСтроки);
	Иначе
		ПараметрыОбработки = Новый Структура;
		ПараметрыОбработки.Вставить("ТабличнаяЧасть",           ТабличнаяЧасть);
		ПараметрыОбработки.Вставить("ЭлементФормы",             ТаблицаФормы);
		ПараметрыОбработки.Вставить("ОповещениеПослеРазбиения", ОповещениеПослеРазбиения);
		ПараметрыОбработки.Вставить("ПараметрыРазбиенияСтроки", ПараметрыРазбиенияСтроки);
		
		ВвестиКоличествоДляРазбиения(ПараметрыОбработки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КопированиеВставкаСтрок

// Показывает окно оповещения о количестве скопированных строк.
// Оповещает другие формы о событии копирования строк в буфер обмена.
// 
// Параметры:
//  КоличествоСтрок - Число - количество скопированных строк из табличной части.
//
Процедура ОповеститьПользователяОКопированииСтрок(КоличествоСтрок) Экспорт
	
	ТекстЗаголовка = НСтр("ru='Строки скопированы'");
	ТекстСообщения = СтрШаблон(НСтр("ru='В буфер обмена скопировано %1 строк'"), КоличествоСтрок);
	ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
	
	Оповестить("КопированиеСтрокВБуферОбмена");
	
КонецПроцедуры

// Показывает окно оповещения о количестве вставленных строк.
// 
// Параметры:
//  КоличествоСтрок - Число - количество вставленных строк в табличную часть.
//
Процедура ОповеститьПользователяОВставкеСтрок(КоличествоСтрок) Экспорт
	
	ТекстЗаголовка = НСтр("ru='Строки вставлены'");
	ТекстСообщения = СтрШаблон(НСтр("ru='Из буфера обмена вставлено %1 строк'"), КоличествоСтрок);
	ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаТоваровИзВнешнихФайлов

// Функция-конструктор параметров формы загрузки номенклатуры из внешних источников.
//
// Возвращаемое значение:
//  Структура:
//     * Заголовок - Строка - заголовок формы загрузки номенклатуры
//     * ДопПояснениеПриЗагрузке - Строка - дополнительное пояснение, выводимое на форме при загрузке номенклатуры
//     * ПараметрыОтбора - Структура - задает условия фильтрации загружаемой номенклатуры,
//          где Ключ - имя реквизита номенклатуры, а Значение - искомое значение;
//          также через ключ СегментНоменклатуры доступен отбор по сегменту номенклатуры.
//     * ПроверятьЗаполнениеХарактеристик - Булево - указывает необходимость проверки заполнения характеристик
//     * ЗаполнятьНоменклатуруПартнера - СправочникСсылка.Партнеры - при указании поставщика, определяет возможность
//          для загружаемой номенклатуры заполнить сопоставленную с ней номенклатуру поставщика.
//
//     * ЗагружатьКоличество - Булево - определяет возможность загрузки количества единиц
//     * ЗагружатьЦены - Булево - определяет возможность загрузки цен
//     * ЗагружатьСуммы - Булево - определяет возможность загрузки сумм
//     * ЗагружатьГТД - Булево - определяет возможность загрузки номеров ГТД
//
//     * ЗагружатьЗапасы - Булево - определяет возможность загрузки минимального и максимального запаса
//     * ЗагружатьСкидки - Булево - определяет возможность загрузки ручных скидок
//     * ЗагружатьУпаковочныеЛисты - Булево - определяет возможность загрузки упаковочных листов
//
//     * ПересчитыватьСуммы - Булево - указывает необходимость пересчета сумм загружаемой номенклатуры
//     * ЦенаВключаетНДС - Булево - признак включения НДС в цену и сумму загружаемой номенклатуры
//     * Организация - СправочникСсылка.Организации - определяет заполнение ставок НДС
//     * НалогообложениеНДС - ПеречислениеСсылка.ТипыНалогообложенияНДС - определяет заполнение ставки НДС
//     * ДатаЗаполнения - Дата - указывает дату, на которую происходит заполнение ставки НДС
//     * ЭтоВозвратнаяТара - Булево - указывает, является ли загружаемая тара возвратной
//
//     * ПараметрыЦенКомплектующих - Структура - описание параметров заполнения цен для комплектующих набора:
//        ** Дата - Дата - дата получения цен
//        ** Валюта - СправочникСсылка.Валюты - валюта цен
//        ** Соглашение - СправочникСсылка.СоглашенияСКлиентами - соглашение, в рамках которого необходимо получить цены;
//              не заполняется, если необходимо заполнить цены по виду цен.
//        ** ВидЦены - СправочникСсылка.ВидыЦен - вид цены, определяющий алгоритм расчета цен;
//              не заполняется, если необходимо заполнить цены по соглашению.
//
Функция ПараметрыЗагрузкиНоменклатуры() Экспорт
	
	ПараметрыЗагрузкиНоменклатуры = Новый Структура();
	ПараметрыЗагрузкиНоменклатуры.Вставить("Заголовок", НСтр("ru = 'Загрузка товаров из внешних файлов'"));
	ПараметрыЗагрузкиНоменклатуры.Вставить("ДопПояснениеПриЗагрузке", "");
	
	ПараметрыЗагрузкиНоменклатуры.Вставить("ПроверятьЗаполнениеХарактеристик", Ложь);
	ПараметрыЗагрузкиНоменклатуры.Вставить("ЗаполнятьНоменклатуруПартнера",  Неопределено);
	
	ПараметрыЗагрузкиНоменклатуры.Вставить("ЗагружатьКоличество", Истина);
	ПараметрыЗагрузкиНоменклатуры.Вставить("ЗагружатьЦены",       Ложь);
	ПараметрыЗагрузкиНоменклатуры.Вставить("ЗагружатьСуммы",      Ложь);
	ПараметрыЗагрузкиНоменклатуры.Вставить("ЗагружатьГТД",        Ложь);
	
	ПараметрыЗагрузкиНоменклатуры.Вставить("ЗагружатьЗапасы",           Ложь);
	ПараметрыЗагрузкиНоменклатуры.Вставить("ЗагружатьСкидки",           Ложь);
	ПараметрыЗагрузкиНоменклатуры.Вставить("ЗагружатьУпаковочныеЛисты", Ложь);
	
	ПараметрыЗагрузкиНоменклатуры.Вставить("ПересчитыватьСуммы", Истина);
	ПараметрыЗагрузкиНоменклатуры.Вставить("ЦенаВключаетНДС",    Истина);
	ПараметрыЗагрузкиНоменклатуры.Вставить("Организация",        Неопределено);
	ПараметрыЗагрузкиНоменклатуры.Вставить("НалогообложениеНДС",
		ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС"));
	ПараметрыЗагрузкиНоменклатуры.Вставить("ДатаЗаполнения",     '00010101');
	ПараметрыЗагрузкиНоменклатуры.Вставить("ЭтоВозвратнаяТара",  Ложь);
	
	ПараметрыЗагрузкиНоменклатуры.Вставить("ПараметрыЦенКомплектующих",
		Новый Структура("Дата,Валюта,Соглашение,ВидЦены"));
	
	ПараметрыЗагрузкиНоменклатуры.Вставить("ПараметрыОтбора", Новый Структура);
	
	Возврат ПараметрыЗагрузкиНоменклатуры;
	
КонецФункции

// Открывает форму загрузки номенклатуры из внешнего источника.
//
// Параметры:
//  ПараметрыЗагрузки - см. ПараметрыЗагрузкиНоменклатуры
//  ОповещениеОЗагрузке - ОписаниеОповещения - описание процедуры, вызов которой будет произведен после загрузки,
//      с передачей значения результата загрузки: Строка - адрес во временном хранилище; Неопределено - загрузка не проводилась.
//
Процедура ПоказатьФормуЗагрузкиНоменклатуры(ПараметрыЗагрузки, ОповещениеОЗагрузке) Экспорт
	
	ОткрытьФорму("Обработка.ЗагрузкаТоваровИзВнешнихФайлов.Форма.Форма", ПараметрыЗагрузки,
		ОповещениеОЗагрузке.Модуль, , , , ОповещениеОЗагрузке);
	
КонецПроцедуры

// Функция-конструктор параметров формы загрузки номенклатуры из внешних источников для планов.
//
// Возвращаемое значение:
//  Структура:
//     * Заголовок - Строка - заголовок формы загрузки номенклатуры
//     * ПараметрыОтбора - Структура - задает условия фильтрации загружаемой номенклатуры, где Ключ - имя реквизита номенклатуры, а Значение - искомое значение:
//       ** ТипНоменклатуры - Массив из ПеречислениеСсылка.ТипыНоменклатуры - 
//
//     * ВидПлана - СправочникСсылка.ВидыПланов - настройка заполнения плана
//     * ПланироватьПоСумме - Булево - признак планирования по ценам и суммам
//     * КроссТаблица - Булево - признак формирования плана в кросс-таблице
//
//     * АдресТаблицыПериодов - Строка - адрес во временном хранилище таблицы периодов
//     * АдресТаблицыТоваров - Строка - адрес во временном хранилище таблицы товаров
//
//     * Партнер - СправочникСсылка.Партнеры - партнер участвующий в хозяйственных операциях с предприятием по плану
//     * Подразделение - СправочникСсылка.СтруктураПредприятия - подразделение по которому формируется план.
//
Функция ПараметрыЗагрузкиНоменклатурыДляПланов() Экспорт
	
	ПараметрыЗагрузкиНоменклатуры = Новый Структура();
	ПараметрыЗагрузкиНоменклатуры.Вставить("Заголовок", НСтр("ru = 'Загрузка товаров из внешних файлов'"));
	
	ПараметрыЗагрузкиНоменклатуры.Вставить("ВидПлана",            ПредопределенноеЗначение("Справочник.ВидыПланов.ПустаяСсылка"));
	ПараметрыЗагрузкиНоменклатуры.Вставить("ПланироватьПоСумме",  Ложь);
	ПараметрыЗагрузкиНоменклатуры.Вставить("КроссТаблица",        Ложь);
	
	ПараметрыЗагрузкиНоменклатуры.Вставить("АдресТаблицыПериодов", "");
	ПараметрыЗагрузкиНоменклатуры.Вставить("АдресТаблицыТоваров",  "");
	
	ПараметрыЗагрузкиНоменклатуры.Вставить("Партнер",       ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка"));
	ПараметрыЗагрузкиНоменклатуры.Вставить("Подразделение", ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка"));
	
	
	ПараметрыЗагрузкиНоменклатуры.Вставить("ПараметрыОтбора", Новый Структура);
	
	Возврат ПараметрыЗагрузкиНоменклатуры;
	
КонецФункции

// Открывает форму загрузки номенклатуры из внешнего источника.
//
// Параметры:
//  ПараметрыЗагрузки - см. ПараметрыЗагрузкиНоменклатурыДляПланов
//  ОповещениеОЗагрузке - ОписаниеОповещения - описание процедуры, вызов которой будет произведен после загрузки,
//      с передачей значения результата загрузки: Строка - адрес во временном хранилище; Неопределено - загрузка не проводилась.
//
Процедура ПоказатьФормуЗагрузкиНоменклатурыДляПланов(ПараметрыЗагрузки, ОповещениеОЗагрузке) Экспорт
	
	ОткрытьФорму("Обработка.ЗагрузкаТоваровИзВнешнихФайлов.Форма.ФормаДляПланов", ПараметрыЗагрузки,
		ОповещениеОЗагрузке.Модуль, , , , ОповещениеОЗагрузке);
	
КонецПроцедуры

#КонецОбласти

#Область КэшированиеСтрок

// Сохраняет в кэше на форме текущую строку указанной таблицы.
// Перед использованием необходим разовый вызов РаботаСТабличнымиЧастями.ИнициализироватьКэшСтрок().
//
// Параметры:
//  ТаблицаФормы - ТаблицаФормы - элемент формы, содержащий табличную часть.
//  Форма - ФормаКлиентскогоПриложения - форма объекта метаданных.
//
Процедура КэшироватьТекущуюСтроку(ТаблицаФормы, Форма) Экспорт
	
	ТекущиеДанные = ТаблицаФормы.ТекущиеДанные;
	КэшСтроки     = Новый Структура(Форма.КэшированныеСтроки[ТаблицаФормы.Имя]);
	
	Если ТекущиеДанные <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(КэшСтроки, ТекущиеДанные);
	Иначе
		Для Каждого КлючИЗначение Из КэшСтроки Цикл
			КэшСтроки[КлючИЗначение.Ключ] = Неопределено;
		КонецЦикла;
	КонецЕсли;
	
	Форма.КэшированныеСтроки[ТаблицаФормы.Имя] = Новый ФиксированнаяСтруктура(КэшСтроки);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроверкаВозможностиЗаполнения

// Параметры:
// 	РезультатВопроса - КодВозвратаДиалога
// 	ДополнительныеПараметры - Структура:
// 		* Форма - РасширениеУправляемойФормыДляОбъектов
// 		* НужноРаспровести - Булево
//
Процедура ПроверитьВозможностьЗаполненияПослеВопроса(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	Если ДополнительныеПараметры.НужноРаспровести Тогда
		
		ПараметрыЗаписи = Новый Структура;
		ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения);
		
		// В форме используются специальные процедуры для записи документа. Отказ от модальности.
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма, "НеВыполнятьПроверкуПередЗаписью") Тогда
			ПараметрыЗаписи.Вставить("ДействиеПослеЗаписи",
				Новый ОписаниеОповещения("ПроверитьВозможностьЗаполненияПослеЗаписи", ЭтотОбъект, ДополнительныеПараметры));
			
			Форма.Записать(ПараметрыЗаписи);
		Иначе
			ПроверитьВозможностьЗаполненияПослеЗаписи(Форма.Записать(ПараметрыЗаписи), ДополнительныеПараметры);
		КонецЕсли;
		
	Иначе
		ПроверитьВозможностьЗаполненияПослеЗаписи(Истина, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьВозможностьЗаполненияПослеЗаписи(РезультатЗаписи, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатЗаписи Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Не удалось отменить проведение документа'"));
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДополнительныеПараметры.ТабличнаяЧасть) Тогда
		ДополнительныеПараметры.ТабличнаяЧасть.Очистить();
		ДополнительныеПараметры.Форма.Модифицированность = Истина;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПроверки, РезультатЗаписи);
	
КонецПроцедуры

#КонецОбласти

#Область РазбиениеСтроки

Процедура ДобавитьСтрокуРазбиением(ТЧ, ЭлементФормы, Количество, ОповещениеПослеРазбиения, ПараметрыРазбиенияСтроки)
	
	ТекущаяСтрока = ЭлементФормы.ТекущиеДанные;
	НоваяСтрока   = ТЧ.Вставить(ТЧ.Индекс(ТекущаяСтрока) + 1);
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
	
	НоваяСтрока[ПараметрыРазбиенияСтроки.ИмяПоляКоличество]   = Количество;
	ТекущаяСтрока[ПараметрыРазбиенияСтроки.ИмяПоляКоличество] =
		ТекущаяСтрока[ПараметрыРазбиенияСтроки.ИмяПоляКоличество] - Количество;
	
	Если ОповещениеПослеРазбиения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеПослеРазбиения, НоваяСтрока);
	КонецЕсли;
	
	ЭлементФормы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
КонецПроцедуры

Процедура ВвестиКоличествоДляРазбиения(ПараметрыОбработки) Экспорт
	
	ПараметрыРазбиенияСтроки = ПараметрыОбработки.ПараметрыРазбиенияСтроки;
	
	Если ПараметрыРазбиенияСтроки.Количество = Неопределено Тогда
		Количество = ПараметрыОбработки.ЭлементФормы.ТекущиеДанные[ПараметрыРазбиенияСтроки.ИмяПоляКоличество];
	Иначе
		Количество = ПараметрыРазбиенияСтроки.Количество;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ВвестиКоличествоДляРазбиенияПослеВвода", ЭтотОбъект, ПараметрыОбработки);
	ПоказатьВводЧисла(Оповещение, Количество, ПараметрыРазбиенияСтроки.Заголовок, 15, 3);
	
КонецПроцедуры

Процедура ВвестиКоличествоДляРазбиенияПослеВвода(Количество, ПараметрыОбработки) Экспорт
	
	ОповещениеПослеРазбиения = ПараметрыОбработки.ОповещениеПослеРазбиения;
	
	Если Количество = Неопределено Тогда
		Если ОповещениеПослеРазбиения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеПослеРазбиения, Неопределено);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ПараметрыРазбиенияСтроки = ПараметрыОбработки.ПараметрыРазбиенияСтроки;
	ТекущееКоличество = ПараметрыОбработки.ЭлементФормы.ТекущиеДанные[ПараметрыРазбиенияСтроки.ИмяПоляКоличество];
	
	ТекстСообщения = Неопределено;
	Если Количество = 0 И Не ПараметрыРазбиенияСтроки.РазрешитьНулевоеКоличество Тогда
		ТекстСообщения = НСтр("ru = 'Количество в новой строке не может быть равно нулю.'");
	ИначеЕсли Количество = ТекущееКоличество И Не ПараметрыРазбиенияСтроки.РазрешитьНулевоеКоличество Тогда
		ТекстСообщения = НСтр("ru = 'Количество в новой строке должно отличаться от количества в текущей.'");
	ИначеЕсли Количество < 0 И ТекущееКоличество >= 0 Тогда
		ТекстСообщения = НСтр("ru = 'Количество в новой строке не может быть отрицательным.'");
	ИначеЕсли Количество > 0 И ТекущееКоличество <= 0 Тогда
		ТекстСообщения = НСтр("ru = 'Количество в новой строке не может быть положительным.'");
	ИначеЕсли Количество > ТекущееКоличество И ТекущееКоличество >= 0 Тогда
		ТекстСообщения = НСтр("ru = 'Количество в новой строке не может быть больше количества в текущей.'");
	ИначеЕсли Количество < ТекущееКоличество И ТекущееКоличество <= 0 Тогда
		ТекстСообщения = НСтр("ru = 'Количество в новой строке не может быть меньше количества в текущей.'");
	ИначеЕсли ПараметрыРазбиенияСтроки.МаксимальноДопустимоеЗначение <> 0 
		И Количество > ПараметрыРазбиенияСтроки.МаксимальноДопустимоеЗначение Тогда
		ТекстСообщения = НСтр("ru = 'Количество в новой строке не должно превышать %1.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения, ПараметрыРазбиенияСтроки.МаксимальноДопустимоеЗначение);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		Оповещение = Новый ОписаниеОповещения("ВвестиКоличествоДляРазбиения", ЭтотОбъект, ПараметрыОбработки);
		ПоказатьПредупреждение(Оповещение, ТекстСообщения);
	Иначе
		ДобавитьСтрокуРазбиением(ПараметрыОбработки.ТабличнаяЧасть, ПараметрыОбработки.ЭлементФормы,
			Количество, ОповещениеПослеРазбиения, ПараметрыРазбиенияСтроки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
