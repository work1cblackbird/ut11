///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.БазоваяФункциональностьСБП".
// ОбщийМодуль.СистемаБыстрыхПлатежей.
//
// Серверные процедуры обмена данными с Системой быстрых платежей:
//  - предоставление учетных данных мерчанта;
//  - загрузка и обработка настроек.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область НастройкиПодключения

// Определяет доступность использования функциональности подключения
// к СБП на основании прав доступа пользователя.
//
// Возвращаемое значение:
//  Булево - если Истина, настройка подключения к Системе быстрых платежей доступна.
//
Функция НастройкаПодключенияДоступна() Экспорт
	
	Возврат СистемаБыстрыхПлатежейПовтИсп.НастройкаПодключенияДоступна();
	
КонецФункции

// Определяет возможность настройки подключения к Системе быстрых платежей.
//
// Параметры:
//  БИК - Строка - идентификатор банка;
//
// Возвращаемое значение:
//  Структура - настройки подключения:
//    * ИнтеграцияДоступнаСБПc2b - Булево - если Истина, участник СБП интегрирован;
//    * ПараметрыУчастникаСБП - Структура, Неопределено - информация об участие СБП:
//      ** Наименование - Строка - имя банка участника СБП;
//      ** НастройкаПодключения  - Массив из НастройкиПодключенияКСистемеБыстрыхПлатежей - список настроек подключения;
//      ** Идентификатор  - Строка - идентификатор участника СБП;
//
Функция ПараметрыПодключенияПоБИК(БИК) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИнтеграцияДоступнаСБПc2b", Ложь);
	Результат.Вставить("ПараметрыУчастникаСБП ", Неопределено);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НастройкиУчастниковСБП.Идентификатор КАК Идентификатор,
		|	НастройкиУчастниковСБП.Наименование КАК Наименование
		|ИЗ
		|	РегистрСведений.БИКУчастниковСБП КАК БИКУчастниковСБП
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчастниковСБП КАК НастройкиУчастниковСБП
		|		ПО БИКУчастниковСБП.Идентификатор = НастройкиУчастниковСБП.Идентификатор
		|ГДЕ
		|	БИКУчастниковСБП.БИК = &БИК";
	
	Запрос.УстановитьПараметр("БИК", БИК);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	
	ПараметрыУчастникаСБП = Новый Структура;
	ПараметрыУчастникаСБП.Вставить("Наименование", ВыборкаДетальныеЗаписи.Наименование);
	ПараметрыУчастникаСБП.Вставить("НастройкаПодключения", Новый Массив);
	ПараметрыУчастникаСБП.Вставить("Идентификатор", ВыборкаДетальныеЗаписи.Идентификатор);
	
	Результат.ИнтеграцияДоступнаСБПc2b = Истина;
	Результат.ПараметрыУчастникаСБП = ПараметрыУчастникаСБП;
	ПараметрыУчастникаСБП.НастройкаПодключения = Справочники.НастройкиПодключенияКСистемеБыстрыхПлатежей.НастройкиПодключенияУчастникаСБП(
		ВыборкаДетальныеЗаписи.Идентификатор);
	
	Возврат Результат;
	
КонецФункции

// Определяет доступность операций для настройки подключения к СБП. В сценариях оплаты
// различных участников СБП существуют отличия, поэтому ряд операций могут
// быть запрещены для выполнения. Метод следует использовать для настройки
// элементов форм оплаты и возвратов и получение общих настроек подключения.
//
// Параметры:
//  Настройка - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//                  настройка выполнения операции СБП.
//
// Возвращаемое значение:
//  Структура - общие настройки и информация о доступных операциях:
//    * Идентификатор - Строка - строковый идентификатор или участника СБП;
//    * СинонимСистемы - Строка - синоним для печати;
//    * Используется - Булево - признак активности настройки;
//    * ИНН - Строка - ИНН участника СБП;
//    * БИК - Массив из Строка - список БИК участника СБП;
//    * Наименование - Строка - наименование участника СБП;
//    * НастройкиСБПc2b - Структура - настройки выполнения переводов c2b:
//       ** Переводыc2b - Булево - признак доступности переводов СБП c2b;
//       ** КассовыеСсылки - Булево - признак доступности использования кассовых ссылок;
//       ** ПлатежныйАгрегатор - Булево - настроена интеграция с платежным агрегатором;
//       ** УчастникСБПВозврата - Булево - Устарело. Следует использовать ПереводыСБПc2b.НастройкиВозвратаОплаты
//          признак доступности возврата оплаты на счет отличный отчета оплаты. Для получения списка
//          доступных участников следует использовать метод ПереводыСБПc2b.УчастникиСБПДляВозврата;
//       ** ПодключениеКассовойСсылки - Булево - определяет доступность подключения кассовой ссылки.
//
Функция НастройкиПодключения(Настройка) Экспорт
	
	Если Не ЗначениеЗаполнено(Настройка) Тогда
		ВызватьИсключение НСтр("ru = 'Параметр ""НастройкаПодключения"" не заполнен.'");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	РеквизитыНастройки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Настройка,
		"Используется, ИдентификаторУчастника");
	
	НастройкиУчастникаСБП = СистемаБыстрыхПлатежейСлужебный.НастройкиУчастникаСБП(
		РеквизитыНастройки.ИдентификаторУчастника);
	
	Если НастройкиУчастникаСБП = Неопределено Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неопределенны настройки участника СБП по идентификатору %1.
				|Проверьте данные регистра сведений НастройкиУчастниковСБП.'"),
			РеквизитыНастройки.ИдентификаторУчастника);
	КонецЕсли;
	
	ОбщиеНастройки = Новый Структура;
	ОбщиеНастройки.Вставить("Используется", РеквизитыНастройки.Используется);
	ОбщиеНастройки.Вставить("Идентификатор", РеквизитыНастройки.ИдентификаторУчастника);
	ОбщиеНастройки.Вставить("СинонимСистемы", НСтр("ru = 'Система быстрых платежей'"));
	ОбщиеНастройки.Вставить("БИК", Новый Массив);
	ОбщиеНастройки.Вставить("Наименование", НастройкиУчастникаСБП.Наименование);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	БИКУчастниковСБП.БИК КАК БИК
		|ИЗ
		|	РегистрСведений.БИКУчастниковСБП КАК БИКУчастниковСБП
		|ГДЕ
		|	БИКУчастниковСБП.Идентификатор = &Идентификатор";
	
	Запрос.УстановитьПараметр(
		"Идентификатор",
		РеквизитыНастройки.ИдентификаторУчастника);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ОбщиеНастройки.БИК.Добавить(ВыборкаДетальныеЗаписи.БИК);
	КонецЦикла;
	
	НастройкиСБПc2b = Новый Структура;
	Если НастройкиУчастникаСБП <> Неопределено Тогда
		ОбщиеНастройки.Вставить("ИНН", НастройкиУчастникаСБП.ИНН);
		НастройкиСБПc2b.Вставить("Переводыc2b", Истина);
		НастройкиСБПc2b.Вставить("КассовыеСсылки", НастройкиУчастникаСБП.КассовыеСсылки);
		НастройкиСБПc2b.Вставить("ПлатежныйАгрегатор", НастройкиУчастникаСБП.ПлатежныйАгрегатор);
		НастройкиСБПc2b.Вставить("УчастникСБПВозврата", СистемаБыстрыхПлатежейСлужебный.УчастникСБПВозврата(
			НастройкиУчастникаСБП.ЗапрещенВыборУчастника,
			ОбщиеНастройки.Идентификатор));
		НастройкиСБПc2b.Вставить("ПодключениеКассовойСсылки", НастройкиУчастникаСБП.ПодключениеКассовойСсылки);
	Иначе
		ОбщиеНастройки.Вставить("ИНН", "");
		НастройкиСБПc2b.Вставить("Переводыc2b", Ложь);
		НастройкиСБПc2b.Вставить("КассовыеСсылки", Ложь);
		НастройкиСБПc2b.Вставить("ПлатежныйАгрегатор", Ложь);
		НастройкиСБПc2b.Вставить("УчастникСБПВозврата", Ложь);
		НастройкиСБПc2b.Вставить("ПодключениеКассовойСсылки", Ложь);
	КонецЕсли;
	
	ОбщиеНастройки.Вставить("НастройкиСБПc2b", НастройкиСБПc2b);
	
	Возврат ОбщиеНастройки;
	
КонецФункции

#КонецОбласти

#Область ДополнительныеОперации

// Формирование изображения идентификатора оплаты (QR-кода).
//
// Параметры: 
//  ФункциональнаяСсылка - Строка - идентификатор оплаты;
//  Размер - Число - размер QR-кода в пикселях;
//  ТипПечати - Число - вариант печати QR-кода. В зависимости от выбранного варианта
//    печати подбирается картина с логотипом Системы быстрых платежей. Возможные варианты:
//      - 0 - печать на цветном принтере;
//      - 1 - монохромная печать;
//      - 2 - черно-белая печать;
//      - 3 - без логотипа.
//
// Возвращаемое значение: 
//  ДвоичныеДанные - данные изображения QR-кода.
//
Функция ИзображениеQRКодаСБП(ФункциональнаяСсылка, Размер, ТипПечати = 0) Экспорт
	
	Логотип = Неопределено;
	Если ТипПечати = 0 Тогда
		Логотип = БиблиотекаКартинок.ЛоготипСБПЦветной;
	ИначеЕсли ТипПечати = 1 Тогда
		Логотип = БиблиотекаКартинок.ЛоготипСБПМонохромный;
	ИначеЕсли ТипПечати = 2 Тогда
		Логотип = БиблиотекаКартинок.ЛоготипСБПЧерный;
	КонецЕсли;
	
	ПараметрыГенерации = ГенерацияШтрихкода.ПараметрыГенерацииШтрихкода();
	ПараметрыГенерации.Ширина = Размер;
	ПараметрыГенерации.Высота = Размер;
	ПараметрыГенерации.ТипКода = 16;
	ПараметрыГенерации.Штрихкод = ФункциональнаяСсылка;
	ПараметрыГенерации.УровеньКоррекцииQR = 3;
	
	ПараметрыГенерации.ЛоготипКартинка = ?(Логотип = Неопределено,
		"",
		Base64Строка(Логотип.ПолучитьДвоичныеДанные()));
	ПараметрыГенерации.ЛоготипРазмерПроцентОтШК = ?(Логотип = Неопределено,
		0,
		33);
	
	Результат = ГенерацияШтрихкода.ИзображениеШтрихкода(
		ПараметрыГенерации);
	
	Возврат Результат.ДвоичныеДанные;
	
КонецФункции

#КонецОбласти

#Область СохранениеНастроек

// Возвращает список участников СБП.
//
// Возвращаемое значение:
//  Структура - результат запроса:
//   * ДанныеУчастников - Соответствие - Содержит описание данных участников СБП
//      ** Ключ - Строка - идентификатор участника СБП.
//      ** Значение - Структура - Описание параметров участника СБП.
//          *** Представление - Строка - Представление участника СБП для пользователя.
//          *** АдресСтраницыПодключения - Строка - Адрес страницы подключения к участнику СБП.
//          *** ТекстПредупреждения - Строка - Представление участника СБП для пользователя.
//          *** ИНН - Строка - ИНН участника СБП.
//          *** БИК - Массив Из Строк - Массив БИК участника СБП;
//          *** АдресСтраницыЗаявки - Строка - адресе страницы отправки заявки;
//          *** ПартнерАгентаСБП - Булево - признак подключения банка партнера Агента ТСП.
//   * Ошибка - Булево, Истина - если задание завершено с ошибкой.
//   * СообщениеОбОшибке - Строка, Форматированная строка - сообщение об ошибке для пользователя.
//   * ИнформацияОбОшибке - Строка, Форматированная строка - сообщение об ошибке для администратора.
//
Функция ПолучитьУчастниковСБП() Экспорт
	
	РезультатОперации = СистемаБыстрыхПлатежейСлужебный.ПолучитьУчастниковСБП();
	РезультатОперации.Вставить("Ошибка", ?(ЗначениеЗаполнено(РезультатОперации.КодОшибки), Истина, Ложь));
	РезультатОперации.Удалить("КодОшибки");
	
	Возврат РезультатОперации;
	
КонецФункции

// Возвращает параметры подключения, оплаты и аутентификации для участника СБП.
//
// Параметры:
//  УчастникСБП - Строка - идентификатор участника СБП для которого получается настройка.
//
// Возвращаемое значение:
//  Структура - результат выполнения:
//   * ПараметрыНастройкиПодключения - Массив из Структура - содержит описание и значения полей реквизитов справочника
//       "НастройкиПодключенияКСистемеБыстрыхПлатежей".
//   * ПараметрыОплаты - Структура - настройки приема оплат:
//      ** c2b - Массив из Структура, Неопределено - содержит описание и значения полей регистра сведений,
//         хранящего данные о настройках оплат.
//   * ПараметрыАутентификации - Массив из Структура - описание и значения параметров аутентификации.
//
Функция ПараметрыПодключенияПоУчастникуСБП(УчастникСБП) Экспорт
	
	Возврат СистемаБыстрыхПлатежейСлужебный.ПараметрыПодключенияПоУчастникуСБП(
		УчастникСБП);
	
КонецФункции

// Возвращает параметры подключения, оплаты и аутентификации для переданного по ссылке элемента справочника
// "НастройкиПодключенияКСистемеБыстрыхПлатежей".
//
// Параметры:
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей - ссылка на элемент справочника 
//    для которого нужно получить параметры подключения.
//
// Возвращаемое значение:
//  Структура - результат выполнения:
//   * ПараметрыНастройкиПодключения - Массив из Структура - содержит описание и значения полей реквизитов элемента справочника
//       "НастройкиПодключенияКСистемеБыстрыхПлатежей";
//   * ПараметрыОплаты - Структура - настройки приема оплат:
//      ** c2b - Массив из Структура, Неопределено - содержит описание и значения полей регистра сведений,
//         хранящего данные о настройках оплат.
//   * ПараметрыАутентификации - Массив из Структура - описание и значения параметров аутентификации.
//
Функция ПараметрыПодключенияПоНастройке(НастройкаПодключения) Экспорт
	
	Возврат СистемаБыстрыхПлатежейСлужебный.ПараметрыПодключенияПоНастройке(
		НастройкаПодключения);
	
КонецФункции

// Возвращает результат проверки подключения по переданным параметрам.
//
// Параметры:
//  ИдентификаторУчастника - Строка - идентификатор участника СБП для которого производится настройка.
//  ПараметрыАутентификации - Массив из Структура - описание и значения параметров аутентификации.
//
// Возвращаемое значение:
//  Структура - результат проверки параметров подключения:
//   * ПодключениеУстановлено - Булево, Истина - если подключение выполнено успешно;
//   * СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя.
//
Функция ПроверитьПараметрыПодключения(
		ИдентификаторУчастника,
		ПараметрыАутентификации) Экспорт
	
	ПараметрыАутентификацииСоответствием = Новый Соответствие;
	Для Каждого ОписаниеКлюча Из ПараметрыАутентификации Цикл
		Если ОписаниеКлюча.Значение <> СистемаБыстрыхПлатежейСлужебный.УдалитьНечитаемыеСимволы(ОписаниеКлюча.Значение) Тогда
			ОписаниеКлюча.Значение = СистемаБыстрыхПлатежейСлужебный.УдалитьНечитаемыеСимволы(
				ОписаниеКлюча.Значение);
		КонецЕсли;
		ПараметрыАутентификацииСоответствием.Вставить(
			ОписаниеКлюча.Имя,
			ОписаниеКлюча.Значение);
	КонецЦикла;
	
	РезультатПроверки = СистемаБыстрыхПлатежейСлужебный.ПроверитьПараметрыПодключения(
		ИдентификаторУчастника,
		ПараметрыАутентификацииСоответствием);
	РезультатПроверки.Вставить("ПодключениеУстановлено", ?(ЗначениеЗаполнено(РезультатПроверки.КодОшибки), Ложь, Истина));
	РезультатПроверки.Удалить("КодОшибки");
	
	Возврат РезультатПроверки;
	
КонецФункции

// Сохраняет настройки подключения к СБП в информационную базу.
//
// Параметры:
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей - ссылка на элемент справочника,
//    данные которого нужно записать. Пустая, если нужно записать новый элемент.
//  НастройкиЗаполнения - Структура - описание сохраняемых данных:
//   * ПараметрыНастройкиПодключения - Массив из Структура - содержит описание и значения полей реквизитов элемента справочника
//       "НастройкиПодключенияКСистемеБыстрыхПлатежей";
//   * ПараметрыОплаты - Структура - настройки приема оплат:
//      ** c2b - Массив из Структура, Неопределено - содержит описание и значения полей регистра сведений,
//         хранящего данные о настройках оплат.
//   * ПараметрыАутентификации - Массив из Структура - описание и значения параметров аутентификации.
//  ИдентификаторУчастника - Строка - идентификатор участника СБП для которого производится настройка.
//
// Возвращаемое значение:
//  Структура - результат создания торговой точки:
//   * НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей - ссылка на элемент справочника;
//   * Ошибка - Булево - признак ошибки сохранения;
//   * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//   * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция ЗаписатьПараметрыПодключения(
		НастройкаПодключения,
		НастройкиЗаполнения,
		ИдентификаторУчастника) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("НастройкаПодключения", НастройкаПодключения);
	Результат.Вставить("Ошибка", Ложь);
	Результат.Вставить("СообщениеОбОшибке", "");
	Результат.Вставить("ИнформацияОбОшибке", "");
	
	Родитель = Справочники.НастройкиПодключенияКСистемеБыстрыхПлатежей.РодительНастройки(
		ИдентификаторУчастника);
	
	НачатьТранзакцию();
	
	Попытка
		
		Для Каждого ПараметрАутентификации Из НастройкиЗаполнения.ПараметрыАутентификации Цикл 
			Если ПараметрАутентификации.Значение <> СистемаБыстрыхПлатежейСлужебный.УдалитьНечитаемыеСимволы(ПараметрАутентификации.Значение) Тогда
				ПараметрАутентификации.Значение = СистемаБыстрыхПлатежейСлужебный.УдалитьНечитаемыеСимволы(
						ПараметрАутентификации.Значение);
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(НастройкаПодключения) Тогда
			
			НастройкаПодключенияОбъект = НастройкаПодключения.ПолучитьОбъект();
			
			Если НастройкаПодключенияОбъект.ЭтоГруппа Тогда
				
				ОтменитьТранзакцию();
				
				Результат.Ошибка = Истина;
				Результат.СообщениеОбОшибке = НСтр("ru = 'Ошибка записи настройки подключения.
					|В качестве значения параметра запрещено передавать группу справочника.'");
				Результат.ИнформацияОбОшибке = Результат.СообщениеОбОшибке;
				
				Возврат Результат;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НастройкаПодключенияОбъект.Родитель)
				И НастройкаПодключенияОбъект.Родитель <> Родитель Тогда
			
				ОтменитьТранзакцию();
					
				Результат.Ошибка = Истина;
				Результат.СообщениеОбОшибке = НСтр("ru = 'Ошибка записи настройки подключения.
					|Запрещено менять платежную систему у существующей настройки.'");
				Результат.ИнформацияОбОшибке = Результат.СообщениеОбОшибке;
				
				Возврат Результат;
				
			КонецЕсли;
			
			НастройкаПодключенияОбъект.Заблокировать();
			
		Иначе
			НастройкаПодключенияОбъект = Справочники.НастройкиПодключенияКСистемеБыстрыхПлатежей.СоздатьЭлемент();
		КонецЕсли;
		
		НастройкаПодключенияОбъект.Родитель = Родитель;
		НастройкаПодключенияОбъект.ИдентификаторУчастника = ИдентификаторУчастника;
		
		Для Каждого Реквизит Из НастройкиЗаполнения.ПараметрыНастройкиПодключения Цикл
			
			Если Реквизит.Свойство("ДляГруппы") И Реквизит.ДляГруппы Тогда // АПК:1416 Универсальный механизм обработки настроек.
				Продолжить;
			КонецЕсли;
			
			Попытка
				НастройкаПодключенияОбъект[Реквизит.Имя] = Реквизит.Значение;
			Исключение
				
				ОтменитьТранзакцию();
				
				Результат.Ошибка = Истина;
				Результат.СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось присвоить значение реквизиту %1 по причине:
					|%2'"),
					Реквизит.Ключ,
					ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				Результат.ИнформацияОбОшибке = Результат.СообщениеОбОшибке;
				
				Возврат Результат;
				
			КонецПопытки;
			
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(НастройкаПодключенияОбъект.ИдентификаторМерчанта) Тогда
			ПараметрыАутентификацииСоответствием = Новый Соответствие;
			Для Каждого ОписаниеКлюча Из НастройкиЗаполнения.ПараметрыАутентификации Цикл
				ПараметрыАутентификацииСоответствием.Вставить(ОписаниеКлюча.Имя, ОписаниеКлюча.Значение);
			КонецЦикла;
			НастройкаПодключенияОбъект.ИдентификаторМерчанта = СистемаБыстрыхПлатежейСлужебный.ИдентификаторМерчантаПоДаннымАутентификации(
				ПараметрыАутентификацииСоответствием);
		КонецЕсли;
		
		НастройкаПодключенияОбъект.Записать();
		
		ПараметрыОплаты = Новый Соответствие;
		Для Каждого ПараметрОплаты Из НастройкиЗаполнения.ПараметрыОплаты.c2b Цикл
			ПараметрыОплаты.Вставить(ПараметрОплаты.Имя, ПараметрОплаты.Значение);
		КонецЦикла;
		
		РезультатЗаписиНастроек = СистемаБыстрыхПлатежейСлужебный.ЗаписатьНастройкиОплаты(
			ПараметрыОплаты,
			НастройкаПодключенияОбъект.Ссылка);
		
		Если РезультатЗаписиНастроек.Отказ Тогда
			Результат.Ошибка = Истина;
			Результат.СообщениеОбОшибке = РезультатЗаписиНастроек.СообщениеОбОшибке;
			ОтменитьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		ПараметрыАутентификации = Новый Соответствие;
		Для Каждого ПараметрАутентификации Из НастройкиЗаполнения.ПараметрыАутентификации Цикл
			ПараметрыАутентификации.Вставить(
				ПараметрАутентификации.Имя,
				ПараметрАутентификации.Значение);
		КонецЦикла;
		
		СистемаБыстрыхПлатежейСлужебный.СохранитьНастройкиАутентификации(
			НастройкаПодключенияОбъект.Ссылка,
			ПараметрыАутентификации,
			ИдентификаторУчастника);
			
		Результат.НастройкаПодключения = НастройкаПодключенияОбъект.Ссылка;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			Пока ТранзакцияАктивна() Цикл
				ОтменитьТранзакцию(); // АПК:325 Отмена незакрытых транзакций.
			КонецЦикла;
		КонецЕсли;
		
		// Вызов во вложенной транзакции не предполагается,
		// вместо вызова исключения обработка ошибки делегируется
		// вызывающему методу.
		Результат.Ошибка = Истина;
		Результат.СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось записать торговую точку мерчанта по причине:
				|%1'"),
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Результат.ИнформацияОбОшибке = Результат.СообщениеОбОшибке;
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ШаблоныСообщений

// Возвращает перечень предопределенных шаблонов сообщений подсистемы, структурированный по типам назначения.
//
// Возвращаемое значение:
//  Структура - перечень предопределенных шаблонов сообщений подсистемы, структурированный по сценариям перевода.
//   * c2b - Структура - перечень предопределенных шаблонов сообщений c2b сценария,
//       структурированный по типам назначения.
//     ** Ключ - Строка - тип назначения шаблона, может принимать значения - Письмо, SMS.
//     ** Значение - Массив из СправочникСсылка.ШаблоныСообщений - перечень предопределенных шаблонов по типу.
//
Функция ШаблоныСообщенийПоТипам() Экспорт
	
	Возврат СистемаБыстрыхПлатежейСлужебный.ШаблоныСообщенийПоТипам();
	
КонецФункции

#КонецОбласти

#КонецОбласти