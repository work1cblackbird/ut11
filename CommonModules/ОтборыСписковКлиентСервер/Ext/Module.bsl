#Область ПрограммныйИнтерфейс

// Изменяет элемент отбора группы списка.
//
// Параметры:
//   Группа         - ГруппаЭлементовОтбораКомпоновкиДанных - Группа, для которой меняется элемент отбора.
//   ИмяПоля        - Строка - Имя поля.
//   ПравоеЗначение - Произвольный - значение отбора, по умолчанию Неопределено.
//   Установить     - Булево - Признак установки отбора, по умолчанию Ложь.
//   ВидСравнения   - ВидСравненияКомпоновкиДанных - по умолчанию Неопределено.
//
Процедура ИзменитьЭлементОтбораГруппыСписка(Группа, ИмяПоля, ПравоеЗначение = Неопределено, Установить = Ложь, ВидСравнения = Неопределено) Экспорт
	
	УдалитьЭлементОтбораКоллекции(Группа.Элементы, ИмяПоля);
	
	Если Установить Тогда
		УстановитьЭлементОтбораКоллекции(Группа.Элементы, ИмяПоля, ПравоеЗначение, ВидСравнения);
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЭлементОтбораСписка()

// Поиск элемента отбора по представлению.
//
// Параметры:
//   КоллекцияЭлементов - КоллекцияЭлементовОтбораКомпоновкиДанных - Коллекция, в которой производится поиск.
//   Представление      - Строка - Значение поиска.
//   ВидПоиска          - Число - 0 точное совпадение,
//                                1 начинается с переданного значения,
//                                2 вхождение переданного значения в представление.
//
// Возвращаемое значение:
//   - ЭлементОтбораКомпоновкиДанных - найденный элемент отбора.
//   - Неопределено - если элемент не найден.
//
Функция НайтиЭлементОтбораПоПредставлению(КоллекцияЭлементов, Представление, ВидПоиска = 0) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	Для каждого ЭлементОтбора Из КоллекцияЭлементов Цикл
		Если ВидПоиска = 0 Тогда
			Если ЭлементОтбора.Представление = Представление Тогда
				ВозвращаемоеЗначение = ЭлементОтбора;
				Прервать;
			КонецЕсли;
		ИначеЕсли ВидПоиска = 1 Тогда
			Если СтрНайти(ЭлементОтбора.Представление, Представление) = 1 Тогда
				ВозвращаемоеЗначение = ЭлементОтбора;
				Прервать;
			КонецЕсли;
		ИначеЕсли ВидПоиска = 2 Тогда
			Если СтрНайти(ЭлементОтбора.Представление, Представление) > 0 Тогда
				ВозвращаемоеЗначение = ЭлементОтбора;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение
	
КонецФункции // НайтиЭлементОтбораПоПредставлению()

// Создает группу элементов отбора.
// 
// Параметры:
//   КоллекцияЭлементов - КоллекцияЭлементовОтбораКомпоновкиДанных - Коллекция, в которой будет создана группа.
//   Представление - Строка - Представление группы.
//   ТипГруппы - ТипГруппыЭлементовОтбораКомпоновкиДанных - Тип группы.
//
// Возвращаемое значение:
//   - ГруппаЭлементовОтбораКомпоновкиДанных
//
Функция СоздатьГруппуЭлементовОтбора(КоллекцияЭлементов, Представление, ТипГруппы) Экспорт
	
	ГруппаЭлементовОтбора = НайтиЭлементОтбораПоПредставлению(КоллекцияЭлементов, Представление);
	Если ГруппаЭлементовОтбора = Неопределено Тогда
		ГруппаЭлементовОтбора = КоллекцияЭлементов.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	Иначе
		ГруппаЭлементовОтбора.Элементы.Очистить();
	КонецЕсли;
	
	ГруппаЭлементовОтбора.Представление    = Представление;
	ГруппаЭлементовОтбора.Применение       = ТипПримененияОтбораКомпоновкиДанных.Элементы;
	ГруппаЭлементовОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ГруппаЭлементовОтбора.ТипГруппы        = ТипГруппы;
	ГруппаЭлементовОтбора.Использование    = Истина;
	
	Возврат ГруппаЭлементовОтбора;
	
КонецФункции

// Устанавливает элемент отбор динамического списка
//
// Параметры:
//   Список         - ДинамическийСписок - обрабатываемый динамический список.
//   ИмяПоля        - Строка - имя поля компоновки, отбор по которому нужно установить.
//   ПравоеЗначение - Произвольный - значение отбора.
//   ВидСравнения   - ВидСравненияКомпоновкиДанных - вид сравнения отбора, по умолчанию - Равно.
//   Представление  - Строка - представление поля компоновки, отбор по которому нужно установить.
//
Процедура УстановитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение, ВидСравнения = Неопределено, Представление = "") Экспорт
	
	УстановитьЭлементОтбораКоллекции(ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Список).Элементы, ИмяПоля, ПравоеЗначение, ВидСравнения, Представление);
	
КонецПроцедуры // УстановитьЭлементОтбораСписка()

// Изменяет элемент отбора динамического списка
//
// Параметры:
// Список         - ДинамическийСписок - обрабатываемый динамический список.
// ИмяПоля        - Строка - имя поля компоновки, отбор по которому нужно установить.
// ПравоеЗначение - Произвольный - значение отбора, по умолчанию - Неопределено.
// Использование  - Булево - признак использования отбора, по умолчанию - Ложь.
// ВидСравнения   - ВидСравненияКомпоновкиДанных - вид сравнения отбора, по умолчанию - Равно.
//
Процедура ИзменитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение = Неопределено, Использование = Ложь, ВидСравнения = Неопределено) Экспорт
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(
		Список.КомпоновщикНастроек.Настройки.Отбор, 
		ИмяПоля);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Список.КомпоновщикНастроек.Настройки.Отбор, 
		ИмяПоля, 
		ПравоеЗначение, 
		ВидСравнения, 
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ, 
		Использование); 
	
КонецПроцедуры // ИзменитьЭлементОтбораСписка()

// Возвращает элемент пользовательского отбора динамического списка, 
// соответствующий отбору, заданному в конфигураторе с указанным именем.
// Соответствие определяется по совпадению идентификаторов настройки.
//
// Параметры:
//  Список - ДинамическийСписок - динамический список, для которого ищется элемент отбора.
//  ИмяОтбора - Строка - имя отбора, заданное в конфигураторе для элемента настроек динамического списка.
//
// Возвращаемое значение:
//  - ЭлементОтбораКомпоновкиДанных - найденный элемент пользовательского отбора.
//  - Неопределено - если элемент пользовательского отбора не найден.
//
Функция ЭлементОтбораСпискаПоИмени(Список, ИмяОтбора) Экспорт

	Отборы = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(
		Список.КомпоновщикНастроек.Настройки.Отбор, 
		ИмяОтбора);
	
	Если Отборы.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Отборы[0];
	КонецЕсли;
	
КонецФункции

// Устанавливает или изменяет "быстрый" отбор динамического списка (по значениям отбора, указанным в реквизитах формы).
//
// Параметры:
// Форма - ФормаКлиентскогоПриложения - форма, у которой есть реквизит динамический список с именем Список.
// ИмяПоля - Строка - имя отбора, у формы должны быть реквизиты с именами Отбор<ИмяПоля> и Отбор<ИмяПоля>Использование.
// ВидСравнения - ВидСравненияКомпоновкиДанных - вид сравнения отбора.
//
Процедура УстановитьБыстрыйОтбор(Форма, ИмяПоля, ВидСравнения = Неопределено) Экспорт
	
	ПравоеЗначение = Форма["Отбор" + ИмяПоля];
	Использование  = Форма["Отбор" + ИмяПоля + "Использование"];
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(
		Форма.Список.КомпоновщикНастроек.Настройки.Отбор, 
		ИмяПоля);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Форма.Список.КомпоновщикНастроек.Настройки.Отбор,
		ИмяПоля,
		ПравоеЗначение,
		ВидСравнения,
		,
		Использование);
	
КонецПроцедуры

#Область ПроцедурыОтбораПоАктуальности

// Устанавливает переданный в форму списка документов отбор по актуальности
//
// Параметры:
// Список - ДинамическийСписок - список, в котором необходимо установить отбор
// Актуальность - Строка - строка отбора по актуальности
// СписокВыбора - СписокЗначений - Список значений выбора элемента формы отбора по актуальности
// ДатаСобытия - Дата - дата, на которую необходимо считать документы неактуальными
// СтруктураБыстрогоОтбора - Структура - переданный в форму списка документов отбор.
//
Процедура ОтборПоАктуальностиПриСозданииНаСервере(Список, Актуальность, СписокВыбора, ДатаСобытия, Знач СтруктураБыстрогоОтбора) Экспорт
	
	Если СтруктураБыстрогоОтбора <> Неопределено Тогда
		
		СтруктураБыстрогоОтбора.Свойство("Актуальность",   Актуальность);
		СтруктураБыстрогоОтбора.Свойство("ДатаСобытия",    ДатаСобытия);
		
		ПриИзмененииОтбораПоАктуальности(Список, Актуальность, ДатаСобытия, СписокВыбора);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает в форме списка документов отбор по актуальности, сохраненный в настройках
// Отбор из настроек устанавливается только если отбор не передан в форму извне.
//
// Параметры:
// Список - ДинамическийСписок - список, в котором необходимо установить отбор
// Актуальность - Строка - строка отбора по актуальности
// ДатаСобытия - Дата - дата, на которую необходимо считать документы неактуальными
// СписокВыбора - СписокЗначений - Список значений выбора элемента формы отбора по актуальности
// СтруктураБыстрогоОтбора - Структура - переданный в форму списка документов отбор
// Настройки - Соответствие - настройки формы.
//
Процедура ОтборПоАктуальностиПриЗагрузкеИзНастроек(Список, Актуальность, СписокВыбора, ДатаСобытия, Знач СтруктураБыстрогоОтбора, Настройки) Экспорт
	
	Если СтруктураБыстрогоОтбора = Неопределено Тогда
		
		Актуальность     = Настройки.Получить("Актуальность");
		ДатаСобытия      = Настройки.Получить("ДатаСобытия");
		
		ПриИзмененииОтбораПоАктуальности(Список, Актуальность, ДатаСобытия, СписокВыбора);
		
	Иначе
		
		Если Не СтруктураБыстрогоОтбора.Свойство("Актуальность") Тогда
			Актуальность = Настройки.Получить("Актуальность");
		КонецЕсли;
		
		Если Не СтруктураБыстрогоОтбора.Свойство("ДатаСобытия") Тогда
			ДатаСобытия = Настройки.Получить("ДатаСобытия");
		КонецЕсли;
		
		ПриИзмененииОтбораПоАктуальности(Список, Актуальность, ДатаСобытия, СписокВыбора);
		
	КонецЕсли;
	
	Настройки.Удалить("Актуальность");
	Настройки.Удалить("ДатаСобытия");
	
КонецПроцедуры

// Устанавливает в форме списка документов отбор по актуальности
//
// Параметры:
// Список - ДинамическийСписок - список, в котором необходимо установить отбор
// Актуальность - Строка - строка отбора по актуальности.
//
Процедура УстановитьОтборВСпискеПоАктуальности(Список, Актуальность) Экспорт
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, 
		"Просрочен",
		Актуальность = "Просрочен",
		ВидСравненияКомпоновкиДанных.Равно,,
		Актуальность = "НеПросрочен" ИЛИ Актуальность = "Просрочен");
	
КонецПроцедуры

// Устанавливает в форме списка документов отбор по дате события
//
// Параметры:
// Список - ДинамическийСписок - список, в котором необходимо установить отбор
// ДатаСобытия - Дата - дата, на которую документ будет просрочен.
//
Процедура УстановитьОтборВСпискеПоДатеСобытия(Список, ДатаСобытия) Экспорт
	
	ВидСравненияДатыСобытия = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	
	ГруппаОтбора = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы,
		НСтр("ru='Отбор по дате события'"), 
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора,
		"ДатаСобытия",
		ВидСравненияДатыСобытия,
		ДатаСобытия,,
		ЗначениеЗаполнено(ДатаСобытия));
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора,
		"ДатаСобытия",
		ВидСравненияКомпоновкиДанных.НеРавно,
		Дата(1,1,1),,
		ЗначениеЗаполнено(ДатаСобытия));

КонецПроцедуры

// Устанавливает в форме списка документов отбор по актуальности и дате актуальности
// Изменяет значение даты актуальности в зависимости от строки актуальности.
//
// Параметры:
// Список - ДинамическийСписок - список, в котором необходимо установить отбор
// Актуальность - Строка - строка отбора по актуальности
// ДатаСобытия - Дата - дата, на которую документы считаются неактуальными.
// СписокВыбора - СписокЗначений - Список значений выбора элемента формы отбора по актуальности
//
Процедура ПриИзмененииОтбораПоАктуальности(Список, Актуальность, ДатаСобытия, СписокВыбора=Неопределено) Экспорт
	
	ВидСравненияДатыСобытия = ВидСравненияКомпоновкиДанных.Равно;
	
	Если Не ЗначениеЗаполнено(Актуальность) Тогда
		ДатаСобытия = Дата(1,1,1);
	ИначеЕсли Актуальность = "Сегодня" Тогда
		ДатаСобытия = ОбщегоНазначенияУТВызовСервера.ДатаСеанса();
	ИначеЕсли Актуальность = "Завтра" Тогда
		ДатаСобытия = ОбщегоНазначенияУТВызовСервера.ДатаСеанса() + 86400;
	ИначеЕсли Актуальность = "Послезавтра" Тогда
		ДатаСобытия = ОбщегоНазначенияУТВызовСервера.ДатаСеанса() + 172800;
	ИначеЕсли Актуальность = "ЧерезНеделю" Тогда
		ДатаСобытия = ОбщегоНазначенияУТВызовСервера.ДатаСеанса() + 604800;
	ИначеЕсли Актуальность = "ИстекаетНаДату" Тогда
		
		Представление = НСтр("ru = 'Истекает на %ДатаСобытия%'");
		
		Представление = СтрЗаменить(Представление, "%ДатаСобытия%", Формат(ДатаСобытия, "ДФ=dd.MM.yy"));
		СписокВыбора.НайтиПоЗначению(Актуальность).Представление = Представление;

	// Отрабатываем старые значения, из сохранившихся настроек
	ИначеЕсли Актуальность =  НСтр("ru = 'Сегодня'") Тогда
		Актуальность = "Сегодня";
		ДатаСобытия = ОбщегоНазначенияУТВызовСервера.ДатаСеанса();
	ИначеЕсли Актуальность = НСтр("ru = 'Завтра'") Тогда
		Актуальность = "Завтра";
		ДатаСобытия = ОбщегоНазначенияУТВызовСервера.ДатаСеанса() + 86400;
	ИначеЕсли Актуальность = НСтр("ru = 'Послезавтра'") Тогда
		Актуальность = "Послезавтра";
		ДатаСобытия = ОбщегоНазначенияУТВызовСервера.ДатаСеанса() + 172800;
	ИначеЕсли Актуальность = НСтр("ru = 'Через неделю'") Тогда
		Актуальность = "ЧерезНеделю";
		ДатаСобытия = ОбщегоНазначенияУТВызовСервера.ДатаСеанса() + 604800;
	ИначеЕсли Актуальность = НСтр("ru = 'Все'") 
		Или СтрНайти(Актуальность,  НСтр("ru = 'Истекающие на'")) > 0 Тогда
		Актуальность = "";
		ДатаСобытия = Дата(1,1,1);
	ИначеЕсли СтрНайти(Актуальность, НСтр("ru = 'Истекает на'")) > 0 Тогда
		Актуальность = "ИстекаетНаДату";
		Представление = НСтр("ru = 'Истекает на %ДатаСобытия%'");
		Представление = СтрЗаменить(Представление, "%ДатаСобытия%", Формат(ДатаСобытия, "ДФ=dd.MM.yy"));
		СписокВыбора.НайтиПоЗначению(Актуальность).Представление = Представление;
	ИначеЕсли Актуальность = НСтр("ru = 'Просрочен'") Или Актуальность = НСтр("ru = 'Просроченные'") Тогда
		Актуальность = "Просрочен";
		ДатаСобытия      = Дата(1,1,1);
	ИначеЕсли Актуальность = "НеПросрочен"
		Или Актуальность = НСтр("ru = 'Не просрочен'") 
		Или Актуальность = НСтр("ru = 'Не просроченные'") Тогда
		Актуальность = "НеПросрочен";
		ДатаСобытия      = Дата(1,1,1);
	КонецЕсли;
	
	УстановитьОтборВСпискеПоАктуальности(Список, Актуальность);
	УстановитьОтборВСпискеПоДатеСобытия(Список, ДатаСобытия);
	
КонецПроцедуры

// Устанавливает в форме списка документов отбор по актуальности и дате актуальности
// Изменяет значение даты актуальности в зависимости от строки актуальности.
//
// Параметры:
// 	Список - ДинамическийСписок - список, в котором необходимо установить отбор
// 	Актуальность - Строка - строка отбора по актуальности
// 	ДатаСобытия - Дата - дата, на которую документ будет просрочен
// 	СтандартнаяОбработка - Булево - флаг выполнения стандартной обработки при очистке значения поля.
//
Процедура ПриОчисткеОтбораПоАктуальности(Список, Актуальность, ДатаСобытия, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Актуальность) Тогда
		Актуальность = "";
		ПриИзмененииОтбораПоАктуальности(Список, Актуальность, ДатаСобытия);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список выбора для отбора по актуальности
//
// Параметры:
// 	СписокВыбораАктуальности - СписокЗначений - список выбора, который необходимо заполнить.
//
Процедура ЗаполнитьСписокВыбораОтбораПоАктуальности(СписокВыбораАктуальности) Экспорт
	
	СписокВыбораАктуальности.Добавить("НеПросрочен", НСтр("ru='Не просрочен'"));
	СписокВыбораАктуальности.Добавить("Просрочен", НСтр("ru='Просрочен'"));
	СписокВыбораАктуальности.Добавить("ИстекаетНаДату", НСтр("ru='Истекает на дату...'"));
	СписокВыбораАктуальности.Добавить("Сегодня", НСтр("ru='Сегодня'"));
	СписокВыбораАктуальности.Добавить("Завтра", НСтр("ru='Завтра'"));
	СписокВыбораАктуальности.Добавить("Послезавтра", НСтр("ru='Послезавтра'"));
	СписокВыбораАктуальности.Добавить("ЧерезНеделю", НСтр("ru='Через неделю'"));
	
КонецПроцедуры

#КонецОбласти

// ФУНКЦИИ ОТБОРА ПО СОСТОЯНИЮ

// Проверяет передан ли в форму списка документов отбор по состоянию
//
// Параметры:
// Состояние - Строка - строка отбора по состоянию
// СтруктураБыстрогоОтбора - Структура - переданный в форму списка документов отбор.
//
// Возвращаемое значение:
// Булево
// Истина, если необходимо установить отбор по состоянию, иначе Ложь.
//
Функция НеобходимОтборПоСостояниюПриСозданииНаСервере(Состояние, Знач СтруктураБыстрогоОтбора) Экспорт
	
	Если СтруктураБыстрогоОтбора <> Неопределено Тогда
		Если СтруктураБыстрогоОтбора.Свойство("Состояние", Состояние) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // НеобходимОтборПоСостояниюПриСозданииНаСервере()

// Проверяет, нужно ли устанавливать отбор по состоянию, загруженный из настроек или переданный в форму извне.
// Отбор из настроек устанавливается, только если отбор не передан в форму извне.
//
// Параметры:
// 	Состояние - ПеречислениеСсылка - Отбор состояние
// 	СтруктураБыстрогоОтбора - Структура - Структура быстрого отбора
// 	Настройки - Соответствие - Настройки формы.
//
// Возвращаемое значение:
// 	Булево - 
Функция НеобходимОтборПоСостояниюПриЗагрузкеИзНастроек(Состояние, Знач СтруктураБыстрогоОтбора, Настройки) Экспорт
	
	НеобходимОтборПоСостоянию = Ложь;
	
	Если СтруктураБыстрогоОтбора = Неопределено Тогда
		
		Состояние = Настройки.Получить("Состояние");
		НеобходимОтборПоСостоянию = Истина;
		
	Иначе
	
		Если Не СтруктураБыстрогоОтбора.Свойство("Состояние") Тогда
			Состояние = Настройки.Получить("Состояние");
			НеобходимОтборПоСостоянию = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Настройки.Удалить("Состояние");

	Возврат НеобходимОтборПоСостоянию;
	
КонецФункции // НеобходимОтборПоСостояниюПриЗагрузкеИзНастроек()

// ПРОЦЕДУРЫ ОТБОРА ПО РЕГУЛЯРНОСТИ

// Устанавливает переданный в форму списка документов отбор по регулярности
//
// Параметры:
// Список - ДинамическийСписок - список, в котором необходимо установить отбор
// Регулярность - Строка - строка отбора по регулярности
// СтруктураБыстрогоОтбора - Структура - переданный в форму списка документов отбор.
//
Процедура ОтборПоРегулярностиПриСозданииНаСервере(Список, Регулярность, Знач СтруктураБыстрогоОтбора) Экспорт
	
	Если СтруктураБыстрогоОтбора <> Неопределено Тогда
		
		Если СтруктураБыстрогоОтбора.Свойство("Регулярность", Регулярность) Тогда
			УстановитьОтборВСпискеПоРегулярности(Список, Регулярность);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОтборПоРегулярностиПриСозданииНаСервере()

// Устанавливает в форме списка документов отбор по регулярности, сохраненный в настройках
// Отбор из настроек устанавливается только если отбор не передан в форму извне.
//
// Параметры:
// Список - ДинамическийСписок - список, в котором необходимо установить отбор
// Регулярность - Строка - строка отбора по регулярности
// СтруктураБыстрогоОтбора - Структура - переданный в форму списка документов отбор
// Настройки - Соответствие - настройки формы.
//
Процедура ОтборПоРегулярностиПриЗагрузкеИзНастроек(Список, Регулярность, Знач СтруктураБыстрогоОтбора, Настройки) Экспорт
	
	Если СтруктураБыстрогоОтбора = Неопределено Тогда
		
		Регулярность = Настройки.Получить("Регулярность");
		УстановитьОтборВСпискеПоРегулярности(Список, Регулярность);
		
	Иначе
	
		Если Не СтруктураБыстрогоОтбора.Свойство("Регулярность") Тогда
			Регулярность = Настройки.Получить("Регулярность");
			УстановитьОтборВСпискеПоРегулярности(Список, Регулярность);
		КонецЕсли;
		
	КонецЕсли;
	
	Настройки.Удалить("Регулярность");
	
КонецПроцедуры // ОтборПоРегулярностиПриЗагрузкеИзНастроек()

// Устанавливает в форме списка документов отбор по регулярности
//
// Параметры:
// Список - ДинамическийСписок - список, в котором необходимо установить отбор
// Регулярность - Строка - строка отбора по регулярности.
//
Процедура УстановитьОтборВСпискеПоРегулярности(Список, Регулярность) Экспорт
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Регулярное", Регулярность = "Регулярные", ВидСравненияКомпоновкиДанных.Равно,,ЗначениеЗаполнено(Регулярность));
	
КонецПроцедуры // УстановитьОтборВСпискеПоРегулярности()

// ПРОЦЕДУРЫ ОТБОРА ПО ЗНАЧЕНИЮ СПИСКОВ

// Устанавливает отбор в списке по указанному значению для нужной колонки
// с учетом переданной структуры быстрого отбора.
//
// Параметры:
//  Список - ДинамическийСписок -  динамический список, для которого требуется установить отбор
//  ИмяКолонки - Строка - Имя колонки, по которой устанавливается отбор
//  Значение - Произвольный -  устанавливаемое значение отбора
//  СтруктураБыстрогоОтбора - Неопределено, Структура - Структура, содержащая ключи и значения отбора
//  Использование - Неопределено, Булево - Признак использования элемента отбора
//  ВидСравнения - Неопределено, ВидСравненияКомпоновкиДанных - вид сравнения, устанавливаемый для элемента отбора
//  ПриводитьЗначениеКЧислу - Булево - Признак приведения значения к числу.
//
Процедура ОтборПоЗначениюСпискаПриСозданииНаСервере(Список, ИмяКолонки, Значение, Знач СтруктураБыстрогоОтбора, 
			Использование = Неопределено, ВидСравнения = Неопределено, ПриводитьЗначениеКЧислу = Ложь) Экспорт
	
	Если СтруктураБыстрогоОтбора <> Неопределено Тогда
		
		Если СтруктураБыстрогоОтбора.Свойство(ИмяКолонки, Значение) Тогда
			Если ПриводитьЗначениеКЧислу Тогда
				Значение = ?(ЗначениеЗаполнено(Значение), Число(Значение), Значение);
			КонецЕсли;
			ИспользованиеЭлементаОтбора = ?(Использование = Неопределено, ЗначениеЗаполнено(Значение), Использование);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, ИмяКолонки, Значение, ВидСравнения,,ИспользованиеЭлементаОтбора);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОтборПоЗначениюСпискаПриСозданииНаСервере()

// Устанавливает отбор в списке по указанному значению для нужной колонки
// с учетом переданной структуры быстрого отбора и переданных настроек.
//
// Параметры:
//  Список - ДинамическийСписок - динамический список, для которого требуется установить отбор
//  ИмяКолонки - Строка - Имя колонки, по которой устанавливается отбор
//  Значение - Произвольный - устанавливаемое значение отбора
//  СтруктураБыстрогоОтбора - Неопределено, Структура - Структура, содержащая ключи и значения отбора
//  Настройки - Соответствие - настройки формы, из которых могут получаться значения отбора
//  Использование - Неопределено, Булево - Признак использования элемента отбора
//  ВидСравнения - Неопределено, ВидСравненияКомпоновкиДанных - вид сравнения, устанавливаемый для элемента отбора
//  ПриводитьЗначениеКЧислу - Булево - Признак приведения значения к числу.
//
Процедура ОтборПоЗначениюСпискаПриЗагрузкеИзНастроек(Список, ИмяКолонки, Значение, Знач СтруктураБыстрогоОтбора, 
			Настройки, Использование = Неопределено, ВидСравнения = Неопределено, ПриводитьЗначениеКЧислу = Ложь) Экспорт
	
	Если СтруктураБыстрогоОтбора = Неопределено Тогда
		Значение = Настройки.Получить(ИмяКолонки);
		Если ПриводитьЗначениеКЧислу Тогда
			Значение = ?(ЗначениеЗаполнено(Значение), Число(Значение), Значение);
		КонецЕсли;
		ИспользованиеЭлементаОтбора = ?(Использование = Неопределено, ЗначениеЗаполнено(Значение), Использование);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, ИмяКолонки, Значение, ВидСравнения,,ИспользованиеЭлементаОтбора);
	Иначе
		Если Не СтруктураБыстрогоОтбора.Свойство(ИмяКолонки) Тогда
			Значение = Настройки.Получить(ИмяКолонки);
			Если ПриводитьЗначениеКЧислу Тогда
				Значение = ?(ЗначениеЗаполнено(Значение), Число(Значение), Значение);
			КонецЕсли;
			ИспользованиеЭлементаОтбора = ?(Использование = Неопределено, ЗначениеЗаполнено(Значение), Использование);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, ИмяКолонки, Значение, ВидСравнения,,ИспользованиеЭлементаОтбора);
		КонецЕсли;
	КонецЕсли;
	
	Настройки.Удалить(ИмяКолонки);
	
КонецПроцедуры

// Устанавливает отборы в списке по указанному значению для нужной колонки
// с учетом переданной структуры быстрого отбора и переданных настроек.
//
// Параметры:
//	ПараметрыОтбора - Структура - Структура параметров отбора, включающая следующие поля:
//  	*ФормаСписка - ФормаКлиентскогоПриложения - Форма, на которой находятся динамические списки
//  	*МассивСписков - Массив - массив названий динамических списков, для которого требуется установить отбор
//  	*ИмяКолонки - Строка - Имя колонки, по которой устанавливается отбор
//  	*Значение - Произвольный - устанавливаемое значение отбора
//  	*Настройки - Соответствие - настройки формы, из которых могут получаться значения отбора
//  СтруктураБыстрогоОтбора - Неопределено, Структура - Структура, содержащая ключи и значения отбора
//  Использование - Неопределено, Булево - Признак использования элемента отбора
//  ВидСравнения - Неопределено, ВидСравненияКомпоновкиДанных - вид сравнения, устанавливаемый для элемента отбора.
//
Процедура УстановитьОтборыПоЗначениюСпискаПриЗагрузкеИзНастроек(ПараметрыОтбора, Знач СтруктураБыстрогоОтбора, Использование = Неопределено, ВидСравнения = Неопределено) Экспорт
	
	ФормаСписка     = ПараметрыОтбора.ФормаСписка;
	МассивСписков 	= ПараметрыОтбора.МассивСписков;
	ИмяКолонки  	= ПараметрыОтбора.ИмяКолонки;
	Значение        = ПараметрыОтбора.Значение;
	Настройки       = ПараметрыОтбора.Настройки;
	
	Если СтруктураБыстрогоОтбора = Неопределено Тогда
		Значение = Настройки.Получить(ИмяКолонки);
		ИспользованиеЭлементаОтбора = ?(Использование = Неопределено, ЗначениеЗаполнено(Значение), Использование);
		Для каждого Список Из МассивСписков Цикл
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ФормаСписка[Список], 
				ИмяКолонки,
				Значение,
				ВидСравнения,,
				ИспользованиеЭлементаОтбора);
		КонецЦикла;
	Иначе
		Если Не СтруктураБыстрогоОтбора.Свойство(ИмяКолонки) Тогда
			Значение = Настройки.Получить(ИмяКолонки);
			ИспользованиеЭлементаОтбора = ?(Использование = Неопределено, ЗначениеЗаполнено(Значение), Использование);
			Для каждого Список Из МассивСписков Цикл
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ФормаСписка[Список],
					ИмяКолонки, 
					Значение, 
					ВидСравнения,,
					ИспользованиеЭлементаОтбора);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Настройки.Удалить(ИмяКолонки);
	
КонецПроцедуры
// ПРОЦЕДУРЫ И ФУНКЦИИ ОТБОРА ПО МЕНЕДЖЕРУ

// Процедура копирует в список выбора поля отбора значения из списка источника
//
Процедура СкопироватьСписокВыбораОтбораПоМенеджеру(СписокВыбора, СписокИсточник) Экспорт
	
	СписокВыбора.Очистить();
	Для Итератор = 0 По СписокИсточник.Количество() - 1 Цикл
		СписокВыбора.Добавить(СписокИсточник[Итератор].Значение, СписокИсточник[Итератор].Представление);
	КонецЦикла;
	
КонецПроцедуры // СкопироватьСписокВыбораОтбораПоМенеджеру()

// Удаляет элемент отбора динамического списка
//
// Параметры:
// Список  - ДинамическийСписок - обрабатываемый динамический список,
// ИмяПоля - Строка - имя поля компоновки, отбор по которому нужно удалить.
//
Процедура УдалитьЭлементОтбораСписка(Список, ИмяПоля) Экспорт
	
	ЭлементыДляУдаления = Новый Массив;
	
	ЭлементыОтбора = ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Список).Элементы;
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
			И ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновки Тогда
			ЭлементыДляУдаления.Добавить(ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементОтбораДляУдаления Из ЭлементыДляУдаления Цикл
		ЭлементыОтбора.Удалить(ЭлементОтбораДляУдаления);
	КонецЦикла;
	
КонецПроцедуры // УдалитьЭлементОтбораСписка()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьЭлементОтбораКоллекции(КоллекцияЭлементов, ИмяПоля, ПравоеЗначение, ВидСравнения = Неопределено, Представление = "")
	
	ЭлементОтбора = КоллекцияЭлементов.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных(ИмяПоля);
	ЭлементОтбора.ВидСравнения     = ?(ВидСравнения = Неопределено, ВидСравненияКомпоновкиДанных.Равно, ВидСравнения);
	ЭлементОтбора.Использование    = Истина;
	ЭлементОтбора.ПравоеЗначение   = ПравоеЗначение;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Представление    = Представление;
	
КонецПроцедуры // УстановитьЭлементОтбораКоллекции()

Процедура УдалитьЭлементОтбораКоллекции(КоллекцияЭлементов, ИмяПоля)
	
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Для Каждого ЭлементОтбора Из КоллекцияЭлементов Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
			И ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновки Тогда
			КоллекцияЭлементов.Удалить(ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // УдалитьЭлементОтбораКоллекции()

#КонецОбласти