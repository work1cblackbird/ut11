#Область ПрограммныйИнтерфейс

// Обработать данные штрихкода.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  ДанныеШтрихкода - Неопределено, Структура - Результат анализа штрихкода, все данные, которые удалось по нему собрать.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  ВложенныеШтрихкоды - Неопределено - Вложенные штрихкоды
// 
// Возвращаемое значение:
//   см. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода
Функция ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды = Неопределено) Экспорт
	
	РезультатОбработки = ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
	
	Возврат РезультатОбработки;
	
КонецФункции

Функция ПоискДублейШКУпаковок(ШтрихкодыУпаковок, ШтрихкодУпаковки) Экспорт
	
	ДеревоМаркированнойПродукции = ЗаполнитьДеревоЗначений(ШтрихкодыУпаковок);
	
	МассивВложенныхШтрихкодов = Новый Массив;
	МассивВложенныхШтрихкодов.Добавить(ШтрихкодУпаковки);
	МассивВложенныхШтрихкодов = ЗаполнитьВложенныеКоды(МассивВложенныхШтрихкодов, ШтрихкодУпаковки);
	
	ЕстьДубль = Ложь;
	
	Для Каждого ШКОтсканированный Из МассивВложенныхШтрихкодов Цикл
		Для Каждого СтрокаДерева Из ДеревоМаркированнойПродукции.Строки Цикл
			ЕстьДубль = НайтиКодУпаковкиВДереве(СтрокаДерева, ШКОтсканированный, ЕстьДубль);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ЕстьДубль;
	
КонецФункции

Функция ОбработатьВводШтрихкода(ДокументСсылка, ШтрихкодКоличество, КэшированныеЗначения, ПараметрыСканирования = Неопределено) Экспорт
	
	ПараметрыСканирования.Склад                                         = ДокументСсылка.Склад;
	ПараметрыСканирования.СсылкаНаОбъект                                = ДокументСсылка;
	ПараметрыСканирования.ИспользуетсяСоответствиеШтрихкодовСтрокДерева = Истина;
	ПараметрыСканирования.Вставить("ОтключитьПоискСуществующего", Истина);
	Если Не ПараметрыСканирования.Свойство("ЭтоПроверкаКодовМаркировкиИСМП") Тогда		
		ПараметрыСканирования.Вставить("ЭтоПроверкаКодовМаркировкиИСМП", Ложь);
		ПараметрыСканирования.Вставить("ЭтоОтчетПроизводственнойЛинии", Ложь);
		ПараметрыСканирования.Вставить("ВидОперацииИСМП", ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ОтгрузкаПродажа"));
	КонецЕсли;
	
	ПараметрыСканирования.ДопустимыеВидыПродукции.Очистить();
	ПараметрыСканирования.ДопустимыеВидыПродукции = ВидыПродукцииИСМП();
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ДокументСсылка, Документы.ПриходныйОрдерНаТовары);
	ПараметрыУказанияСерий.ИмяПоляПомещение = Неопределено;
	
	ПараметрыСканирования.ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(ПараметрыУказанияСерий);
	
	ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ЗакодироватьШтрихкодДанныхBase64(ШтрихкодКоличество);
	
	РезультатОбработкиШтрихкода = ШтрихкодированиеОбщегоНазначенияИСВызовСервера.ОбработатьШтрихкод(
	ШтрихкодКоличество, ПараметрыСканирования, Неопределено, ДокументСсылка.УникальныйИдентификатор());
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

Функция ВидыПродукцииИСМП() Экспорт
	
	ДопустимыеВидыПродукции = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиУчетаМаркируемойПродукцииИСМП.ВидПродукции КАК ВидПродукции
		|ИЗ
		|	РегистрСведений.НастройкиУчетаМаркируемойПродукцииИСМП КАК НастройкиУчетаМаркируемойПродукцииИСМП
		|ГДЕ
		|	НастройкиУчетаМаркируемойПродукцииИСМП.ВестиУчетПродукции";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДопустимыеВидыПродукции.Добавить(ВыборкаДетальныеЗаписи.ВидПродукции);
	КонецЦикла;
	
	Возврат ДопустимыеВидыПродукции;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗаполнитьДеревоЗначений(ШтрихкодыУпаковок)
	
	ДеревоМаркированнойПродукции = Новый ДеревоЗначений;
	ДеревоМаркированнойПродукции.Колонки.Добавить("ШтрихкодУпаковки");
		
	Для Каждого СтрокаШтрихкод Из ШтрихкодыУпаковок Цикл
		ДобавитьСтроки(ДеревоМаркированнойПродукции, СтрокаШтрихкод.ШтрихкодУпаковки);
	КонецЦикла;
	
	Возврат ДеревоМаркированнойПродукции;
	
КонецФункции

Функция ЗаполнитьВложенныеКоды(МассивВложенныхШтрихкодов, ШтрихкодУпаковки)
	
	Для Каждого СтрокаШтрихкод Из ШтрихкодУпаковки.ВложенныеШтрихкоды Цикл
		МассивВложенныхШтрихкодов.Добавить(СтрокаШтрихкод.Штрихкод);
		ЗаполнитьВложенныеКоды(МассивВложенныхШтрихкодов, СтрокаШтрихкод.Штрихкод);
	КонецЦикла;
	
	Возврат МассивВложенныхШтрихкодов;
	
КонецФункции

Процедура ДобавитьСтроки(ДеревоМаркированнойПродукции, ШтрихкодУпаковки, СтрокаДЗ = Неопределено)
	
	Если СтрокаДЗ = Неопределено Тогда
		НоваяСтрока = ДеревоМаркированнойПродукции.Строки.Добавить();
	Иначе
		НоваяСтрока = СтрокаДЗ.Строки.Добавить();
	КонецЕсли;
	
	НоваяСтрока.ШтрихкодУпаковки = ШтрихкодУпаковки;
	
	Для Каждого СтрокаШтрихкод Из ШтрихкодУпаковки.ВложенныеШтрихкоды Цикл
		ДобавитьСтроки(ДеревоМаркированнойПродукции, СтрокаШтрихкод.Штрихкод, НоваяСтрока);
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиКодУпаковкиВДереве(СтрокаДерева, ШтрихкодУпаковки, ЕстьДубль)
	
	Если ЕстьДубль Тогда
		Возврат ЕстьДубль;
	КонецЕсли;
	
	Если СтрокаДерева.ШтрихкодУпаковки = ШтрихкодУпаковки Тогда
		ЕстьДубль = Истина;
		Возврат ЕстьДубль;
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из СтрокаДерева.Строки Цикл
		ЕстьДубль = НайтиКодУпаковкиВДереве(СтрокаДерева, ШтрихкодУпаковки, ЕстьДубль);
	КонецЦикла;
	
	Возврат ЕстьДубль;
	
КонецФункции

#КонецОбласти