/////////////////////////////////////////////////////////////////////////////
// Совместная работа подсистем ВетИС и ИСМП.
//   * Если подсистема ВетИС отсутствует, изменения модуля не требуется.
//

#Область ПрограммныйИнтерфейс

// Проверяет использование встроенной или внешней подсистемы ВетИС
// 
// Возвращаемое значение:
//  Булево - Истина, если используется встроенная или внешняя подсистема работы с ВетИС
//
Функция ИспользуетсяПодсистемаВетИС() Экспорт
	
	ИспользуетсяВнешняяПодсистемаВетИС = Ложь;
	ИнтеграцияИСМПВЕТИСПереопределяемый.ПриПроверкеИспользованияВнешнейПодсистемыВетИС(ИспользуетсяВнешняяПодсистемаВетИС);
	
	Если ИспользуетсяВнешняяПодсистемаВетИС Тогда
		Возврат ИспользуетсяВнешняяПодсистемаВетИС;
	ИначеЕсли ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ВетИС") Тогда
		Возврат ПолучитьФункциональнуюОпцию("ВестиУчетПодконтрольныхТоваровВЕТИС");
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#Область ОбщийМодульШтрихкодированиеИС

// Заполняет данные документа-основания из подсистемы ВетИС для документа ИСМП
// 
// Параметры:
//   ДанныеОснования    - см. ШтрихкодированиеОбщегоНазначенияИС.ИнициализицияТаблицыДанныхДокумента.
//   ДокументОснование  - ДокументСсылка  - документ-основание.
//   ДанныеСформированы - Булево          - заполнение произведено.
//
Процедура СформироватьДанныеДокументаОснования(ДанныеОснования, ДокументОснование, ДанныеСформированы) Экспорт
	
	ИнтеграцияИСМПВЕТИСПереопределяемый.СформироватьДанныеДокументаОснования(ДанныеОснования, ДокументОснование, ДанныеСформированы);
	Если ДанныеСформированы Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ВетИС") Тогда
		МодульВЕТИС = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияВЕТИС");
		МодульВЕТИС.СформироватьДанныеДокументаОснования(ДанныеОснования, ДокументОснование, ДанныеСформированы);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбщийМодульШтрихкодированиеИСМПСлужебный

// Проверяет код маркировки молочной продукции на соответствие документу-основанию
// 
// Параметры:
//   СтрокаДанных          - Структура - известные данные кода маркировки.
//   ПравилоПроверки       - Структура - текущее правило проверки кода маркировки:
//     * ЕстьОшибка - Булево - код маркировки не соответствует документу-основанию.
//   ПараметрыСканирования - см. ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования.
//
Процедура ПроверитьДанныеСтрокиПоСрокуГодностиДокументаОснования(СтрокаДанных, ПравилоПроверки, ПараметрыСканирования) Экспорт
	
	СтандартнаяОбработка = Истина;
	ИнтеграцияИСМПВЕТИСПереопределяемый.ПроверитьДанныеСтрокиПоСрокуГодностиДокументаОснования(СтрокаДанных, ПравилоПроверки, ПараметрыСканирования, СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ВетИС") Тогда
		Возврат;
	ИначеЕсли Не ЭтоАдресВременногоХранилища(ПараметрыСканирования.АдресДанныхДокументаОснования) Тогда
		Возврат;
	КонецЕсли;
	
	МодульВЕТИС = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияВЕТИСКлиентСервер");
	
	СкоропортящаясяПродукция = Ложь;
	ГоденДо         = '00010101';
	ГоденДоПоДаннымВСД = '00010101';
	Если СтрокаДанных.СоставКодаМаркировки <> Неопределено
		И СтрокаДанных.СоставКодаМаркировки.Свойство("ГоденДо")
		И ЗначениеЗаполнено(СтрокаДанных.СоставКодаМаркировки.ГоденДо) Тогда
		ГоденДо         = СтрокаДанных.СоставКодаМаркировки.ГоденДо;
		СкоропортящаясяПродукция = СтрокаДанных.СоставКодаМаркировки.СкоропортящаясяПродукция;
	КонецЕсли;
	
	ДанныеДокументаОснования = ПолучитьИзВременногоХранилища(ПараметрыСканирования.АдресДанныхДокументаОснования);
	СтруктураПоиска = Новый Структура("Номенклатура, Характеристика", СтрокаДанных.Номенклатура, СтрокаДанных.Характеристика);
	НайденныеДанные = ДанныеДокументаОснования.НайтиСтроки(СтруктураПоиска);
	
	ПодходящиеИдентификаторыПроисхожденияВЕТИС = Новый Массив;
	Для Каждого НайденнаяСтрока Из НайденныеДанные Цикл
		
		ДанныеИдентификатораПроисхожденияВЕТИС = НайденнаяСтрока.ДанныеИдентификатораПроисхожденияВЕТИС;
		
		Если ЗначениеЗаполнено(ГоденДо) Тогда
			
			Если ДанныеИдентификатораПроисхожденияВЕТИС.СкоропортящаясяПродукция = СкоропортящаясяПродукция Тогда
				
				НачалоПериода = МодульВЕТИС.ЗначениеЭлементаПериодаВЕТИС(
					ДанныеИдентификатораПроисхожденияВЕТИС.НачалоПериода,
					ДанныеИдентификатораПроисхожденияВЕТИС.ТочностьЗаполнения);
				
				КонецПериода = МодульВЕТИС.ЗначениеЭлементаПериодаВЕТИС(
					ДанныеИдентификатораПроисхожденияВЕТИС.КонецПериода,
					ДанныеИдентификатораПроисхожденияВЕТИС.ТочностьЗаполнения,
					Истина);
				
				Если ГоденДо >= НачалоПериода
					И (ГоденДо <= КонецПериода Или Не ЗначениеЗаполнено(КонецПериода))Тогда
					ПодходящиеИдентификаторыПроисхожденияВЕТИС.Добавить(ДанныеИдентификатораПроисхожденияВЕТИС.ИдентификаторПроисхожденияВЕТИС);
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Если ЗначениеЗаполнено(ДанныеИдентификатораПроисхожденияВЕТИС.НачалоПериода)
				И Не ЗначениеЗаполнено(ДанныеИдентификатораПроисхожденияВЕТИС.КонецПериода) Тогда
				ГоденДоПоДаннымВСД = ДанныеИдентификатораПроисхожденияВЕТИС.НачалоПериода;
			КонецЕсли;
			ПодходящиеИдентификаторыПроисхожденияВЕТИС.Добавить(ДанныеИдентификатораПроисхожденияВЕТИС.ИдентификаторПроисхожденияВЕТИС);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПодходящиеИдентификаторыПроисхожденияВЕТИС.Количество() > 1 Тогда
		СтрокаДанных.ИдентификаторыПроисхожденияВЕТИС = ПодходящиеИдентификаторыПроисхожденияВЕТИС;
	ИначеЕсли ПодходящиеИдентификаторыПроисхожденияВЕТИС.Количество() = 1 Тогда
		СтрокаДанных.ИдентификаторПроисхожденияВЕТИС = ПодходящиеИдентификаторыПроисхожденияВЕТИС[0];
		Если ЗначениеЗаполнено(ГоденДо) Тогда
			СтрокаДанных.ГоденДо = ГоденДо;
			СтрокаДанных.ТребуетсяВыборВСД = Ложь;
		ИначеЕсли ЗначениеЗаполнено(ГоденДоПоДаннымВСД) Тогда
			СтрокаДанных.ГоденДо = ГоденДоПоДаннымВСД;
			СтрокаДанных.ТребуетсяВыборВСД = Ложь;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаДанных.СтрокаДерева) Тогда
			ЗаполнитьЗначенияСвойств(СтрокаДанных.СтрокаДерева, СтрокаДанных, "ИдентификаторПроисхожденияВЕТИС, ГоденДо");
		КонецЕсли;
	Иначе
		ПравилоПроверки.ЕстьОшибка     = Истина;
		СтрокаДанных.ТребуетсяВыборВСД = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Дополняет дерево вложенных штрихкодов сохраненными данными ВетИС табличной части "Штрихкоды упаковок"
//   для документа МаркировкаТоваровИСМП:
//     * Заполняет признаки ИдентификаторПроисхожденияВЕТИС, ГоденДо, СкоропортящаясяПродукция по заполненным данным
//      табличной части "ШтрихкодыУпаковок".
//     * Заполняет эти же признаки для всех дочерних узлов дерева.
//     * Заполняет эти же признаки для таблицы МаркированныеТовары вложенных штрихкодов.
// 
// Параметры:
//   ВложенныеШтрихкоды    - см. ШтрихкодированиеИС.ВложенныеШтрихкодыУпаковокПоДокументу.
//   ПараметрыСканирования - см. ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования.
//
Процедура ДополнитьВложенныеШтрихкодыДаннымиВЕТИС(ВложенныеШтрихкоды, ПараметрыСканирования) Экспорт
	
	СтандартнаяОбработка = Истина;
	ИнтеграцияИСМПВЕТИСПереопределяемый.ДополнитьВложенныеШтрихкодыДаннымиВЕТИС(ВложенныеШтрихкоды, ПараметрыСканирования, СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ВетИС") Тогда
		Возврат;
	ИначеЕсли Не ПараметрыСканирования.ЗаполнятьДанныеВЕТИС Тогда
		Возврат;
	ИначеЕсли ПараметрыСканирования.СсылкаНаОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковок.ШтрихкодУпаковки,
	|	ШтрихкодыУпаковок.ИдентификаторПроисхожденияВЕТИС,
	|	ЕСТЬNULL(ШтрихкодыУпаковок.ИдентификаторПроисхожденияВЕТИС.СкоропортящаясяПродукция, ЛОЖЬ) КАК СкоропортящаясяПродукция,
	|	ШтрихкодыУпаковок.СрокГодности КАК ГоденДо
	|ИЗ
	|	Документ.%1.ШтрихкодыУпаковок КАК ШтрихкодыУпаковок
	|ГДЕ
	|	ШтрихкодыУпаковок.Ссылка = &Ссылка
	|	И (ШтрихкодыУпаковок.ИдентификаторПроисхожденияВЕТИС <> Неопределено
	|		ИЛИ ШтрихкодыУпаковок.СрокГодности <> ДАТАВРЕМЯ(1, 1, 1))");
	
	
	МетаданныеДокумента = ПараметрыСканирования.СсылкаНаОбъект.Метаданные();
	ИмяДокумента        = МетаданныеДокумента.Имя;
	
	Запрос.Текст = СтрШаблон(Запрос.Текст, ИмяДокумента);
	
	Запрос.УстановитьПараметр("Ссылка", ПараметрыСканирования.СсылкаНаОбъект);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	УпаковкиСДаннымиВЕТИС = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.ИдентификаторПроисхожденияВЕТИС)
			Или ЗначениеЗаполнено(Выборка.ГоденДо) Тогда
			
			ДанныеВЕТИС = Новый Структура("ИдентификаторПроисхожденияВЕТИС, ГоденДо, СкоропортящаясяПродукция",
			Выборка.ИдентификаторПроисхожденияВЕТИС, Выборка.ГоденДо, Выборка.СкоропортящаясяПродукция);
			
			УпаковкиСДаннымиВЕТИС.Вставить(Выборка.ШтрихкодУпаковки, ДанныеВЕТИС);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДеревоУпаковок = ВложенныеШтрихкоды.ДеревоУпаковок;
	ДополнитьВложенныеШтрихкодыДереваДаннымиВЕТИС(ДеревоУпаковок, УпаковкиСДаннымиВЕТИС);
	
	// Если сканирование выполняется в форме проверки и подбора, то заполнение таблицы маркированных товаров не требуется
	Если Не ПараметрыСканирования.ИспользуетсяСоответствиеШтрихкодовСтрокДерева Тогда
		МаркированныеТовары = ВложенныеШтрихкоды.МаркированныеТовары;
		Для Каждого СтрокаТЧ Из МаркированныеТовары Цикл
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаТЧ.СтрокаДерева, "ИдентификаторПроисхожденияВЕТИС, ГоденДо, СкоропортящаясяПродукция");
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбщийМодульИнтеграцияИСМПСлужебный

// Заполняет ссылку на идентификатор происхождения ВетИС по его строковому идентификатору
//  Проверка существования подсистемы не производится
// 
// Параметры:
//   ИдентификаторПроисхожденияВЕТИССтрокой - Строка - строковое представление идентификатора ВетИС
//   ИдентификаторПроисхожденияВЕТИССсылка - ОпределяемыйТип.ИдентификаторПроисхожденияВЕТИС - ссылочное представление идентификатора ВетИС
//   Кеш - Структура - ранее найденные значения:
//    ПараметрыПреобразования - Структура - :
//      НайденныеСсылки- Структура - :
//        ВетеринарноСопроводительныйДокументВЕТИС - Соответствие - :
//          Ключ - Строка - строковое представление идентификатора ВетИС
//          Значение - ОпределяемыйТип.ИдентификаторПроисхожденияВЕТИС - ссылочное представление идентификатора ВетИС
//
Процедура ПолучитьСсылкуПоСтроковомуИдентификаторуПроисхождения(ИдентификаторПроисхожденияВЕТИССтрокой, ИдентификаторПроисхожденияВЕТИССсылка, Кеш) Экспорт
	
	СтандартнаяОбработка = Истина;
	ИнтеграцияИСМПВЕТИСПереопределяемый.ПолучитьСсылкуПоСтроковомуИдентификаторуПроисхождения(ИдентификаторПроисхожденияВЕТИССтрокой, ИдентификаторПроисхожденияВЕТИССсылка, Кеш, СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	Модуль = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияВЕТИС");
	ИмяТаблицыСправочникаВСД = "ВетеринарноСопроводительныйДокументВЕТИС";
	ПоискСуществующегоВСД = Модуль.СсылкаПоИдентификатору(
		Кеш, ИмяТаблицыСправочникаВСД, ИдентификаторПроисхожденияВЕТИССтрокой);
	Если ЗначениеЗаполнено(ПоискСуществующегоВСД) Тогда
		ИдентификаторПроисхожденияВЕТИССсылка = ПоискСуществующегоВСД;
	Иначе
		ИдентификаторПроисхожденияВЕТИССсылка = Модуль.СоздатьВетеринарноСопроводительныйДокументВЕТИСДляЗагрузки(ИдентификаторПроисхожденияВЕТИССтрокой);
	КонецЕсли;
	Кеш.ПараметрыПреобразования.НайденныеСсылки[ИмяТаблицыСправочникаВСД].Вставить(
		ИдентификаторПроисхожденияВЕТИССтрокой,	ИдентификаторПроисхожденияВЕТИССсылка);
	
КонецПроцедуры
			
#КонецОбласти

#Область ДокументЗаказНаЭмиссиюКодовМаркировкиСУЗ

// Определяет ожидаемый шаблон кода маркировки молочной продукции по идентификатору происхождения ВетИС. Ожидаемое поведение:
//   * выставление актуального шаблона молочной продукции.
// 
// Параметры:
//  Запрос - Запрос - запрос обработчика заполнения табличной части заказа на эмиссию по маркировке
//
Процедура ДоработатьЗапросЗаполненияЗаказаНаЭмиссиюПоМаркировке(Запрос) Экспорт
	
	СтандартнаяОбработка = Истина;
	ИнтеграцияИСМПВЕТИСПереопределяемый.ДоработатьЗапросЗаполненияЗаказаНаЭмиссиюПоМаркировке(Запрос, СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ВетИС") Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонМаркировки = "ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияСерия6СимволовВЕТИС)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ШаблонМаркировкаТовары", ШаблонМаркировки);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ШаблонМаркировкаШтрихкоды", ШаблонМаркировки);
	
КонецПроцедуры

#КонецОбласти

#Область ДокументМаркировкаТоваровИСМП

// Обработка заполнения документа "Маркировка товаров ИСМП" по документам ВетИС.
//   
// Параметры:
//   ДокументОбъект - ДокументОбъект.МаркировкаТоваровИСМП - заполняемый документ
//   ДанныеЗаполнения - Произвольный - данные заполнения
//   ТекстЗаполнения - Строка - текст заполнения
//   СтандартнаяОбработка - Булево - признак стандартной обработки события
Процедура ОбработкаЗаполненияМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	ИнтеграцияИСМПВЕТИСПереопределяемый.ОбработкаЗаполненияМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ВетИС") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнениеВыполнено = Ложь;
	МодульВЕТИС = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияВЕТИС");
	ДанныеВЕТИС = МодульВЕТИС.ДанныеЗаполненияДокументаМаркировкаТоваровИСМП(ЗаполнениеВыполнено, ДанныеЗаполнения, ДокументОбъект);
	Если Не ЗаполнениеВыполнено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ЭтоПерезаполнение = ЗначениеЗаполнено(ДокументОбъект.Ссылка);
	Если Не ЭтоПерезаполнение И Не ДокументОбъект.ДополнительныеСвойства.Свойство("НеЗаполнятьШапку") Тогда
		ИнтеграцияИСПереопределяемый.ПроверитьВозможностьВводаНаОсновании(
			ДанныеВЕТИС.Шапка[0].ДокументОснование,,
			ДанныеВЕТИС.Шапка[0].ЕстьОшибкиПроведен);
		ЗаполнитьЗначенияСвойств(ДокументОбъект, ДанныеВЕТИС.Шапка[0]);
	КонецЕсли;
	
	Если Не ДокументОбъект.ДополнительныеСвойства.Свойство("НеЗаполнятьТабличнуюЧасть") Тогда
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
			Основание = ДанныеЗаполнения.Основание;
		Иначе
			Основание = ДанныеЗаполнения;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Товары", ДанныеВЕТИС.Товары);
		Запрос.УстановитьПараметр("ШтрихкодыУпаковок", ДанныеВЕТИС.ШтрихкодыУпаковок);
		Запрос.УстановитьПараметр("ДокументОснование", Основание);
		Запрос.УстановитьПараметр("Этассылка", ДокументОбъект.Ссылка);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.Серия КАК Серия,
		|	Товары.Количество КАК Количество,
		|	Товары.ИдентификаторПроисхожденияВЕТИС КАК ИдентификаторПроисхожденияВЕТИС,
		|	Товары.СрокГодности КАК СрокГодности
		|ПОМЕСТИТЬ ДанныеШтрихкодовУпаковок
		|ИЗ &Товары КАК Товары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ШтрихкодыУпаковок.ШтрихкодУпаковки КАК ШтрихкодУпаковки,
		|	ШтрихкодыУпаковок.ИдентификаторПроисхожденияВЕТИС КАК ИдентификаторПроисхожденияВЕТИС,
		|	ШтрихкодыУпаковок.СрокГодности КАК СрокГодности
		|ПОМЕСТИТЬ ШтрихкодыУпаковок
		|ИЗ
		|	&ШтрихкодыУпаковок КАК ШтрихкодыУпаковок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|"
		+ ШтрихкодированиеОбщегоНазначенияИС.ТекстЗапросаСвойстваМаркируемойПродукции()
		+"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.Серия КАК Серия,
		|	Товары.Количество КАК Количество,
		|	Товары.ИдентификаторПроисхожденияВЕТИС КАК ИдентификаторПроисхожденияВЕТИС,
		|	Товары.СрокГодности КАК СрокГодности
		|ПОМЕСТИТЬ ТоварыСерии
		|ИЗ
		|	ДанныеШтрихкодовУпаковок КАК Товары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СвойстваМаркируемойПродукции КАК СвойстваМаркируемойПродукции
		|		ПО СвойстваМаркируемойПродукции.Номенклатура = Товары.Номенклатура
		|ГДЕ
		|	СвойстваМаркируемойПродукции.МаркируемаяПродукция
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	МаркировкаТоваровИСМПТовары.Номенклатура,
		|	МаркировкаТоваровИСМПТовары.Характеристика,
		|	МаркировкаТоваровИСМПТовары.Серия,
		|	-МаркировкаТоваровИСМПТовары.Количество,
		|	МаркировкаТоваровИСМПТовары.ИдентификаторПроисхожденияВЕТИС,
		|	МаркировкаТоваровИСМПТовары.СрокГодности
		|	ИЗ Документ.МаркировкаТоваровИСМП КАК МаркировкаТоваровИСМП
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаркировкаТоваровИСМП.Товары КАК МаркировкаТоваровИСМПТовары
		|		ПО МаркировкаТоваровИСМП.Ссылка = МаркировкаТоваровИСМПТовары.Ссылка
		|ГДЕ
		|	МаркировкаТоваровИСМП.Проведен
		|	И МаркировкаТоваровИСМП.Ссылка <> &ЭтаСсылка
		|	И МаркировкаТоваровИСМП.ДокументОснование = &ДокументОснование
		|	И МаркировкаТоваровИСМП.Операция В(
		|		ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВводВОборотИмпортСФТС),
		|		ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВводВОборотКонтрактноеПроизводствоЕАЭС),
		|		ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков),
		|		ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВводВОборотПолучениеПродукцииОтФизическихЛиц),
		|		ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС),
		|		ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоРФ),
		|		ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговору),
		|		ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговоруНаСторонеЗаказчика),
		|		ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
		Если ДокументОбъект.ДополнительныеСвойства.Свойство("ОтчетПроизводственнойЛинии") Тогда
			Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ
			|	Товары.Номенклатура КАК Номенклатура,
			|	Товары.Характеристика КАК Характеристика,
			|	Товары.Серия КАК Серия,
			|	Товары.ИдентификаторПроисхожденияВЕТИС КАК ИдентификаторПроисхожденияВЕТИС,
			|	МАКСИМУМ(Товары.СрокГодности) КАК СрокГодности
			|ПОМЕСТИТЬ СгруппированныеТоварыКОформлению
			|ИЗ
			|	ТоварыСерии КАК Товары
			|СГРУППИРОВАТЬ ПО
			|	Товары.Номенклатура,
			|	Товары.Характеристика,
			|	Товары.Серия,
			|	Товары.ИдентификаторПроисхожденияВЕТИС
			|ИМЕЮЩИЕ
			|	СУММА(Товары.Количество) > 0
			|;
			|
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СгруппированныеТоварыКОформлению.Номенклатура       КАК Номенклатура,
			|	СгруппированныеТоварыКОформлению.Характеристика     КАК Характеристика,
			|	СгруппированныеТоварыКОформлению.Серия              КАК Серия,
			|	СгруппированныеТоварыКОформлению.ИдентификаторПроисхожденияВЕТИС КАК ИдентификаторПроисхожденияВЕТИС
			|ИЗ
			|	СгруппированныеТоварыКОформлению КАК СгруппированныеТоварыКОформлению
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СгруппированныеТоварыКОформлению.Номенклатура) > 1
			|			ТОГДА Неопределено
			|		ИНАЧЕ МАКСИМУМ(СгруппированныеТоварыКОформлению.Номенклатура)
			|	КОНЕЦ КАК Номенклатура,
			|	ВЫБОР
			|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СгруппированныеТоварыКОформлению.Характеристика) > 1
			|			ТОГДА Неопределено
			|		ИНАЧЕ МАКСИМУМ(СгруппированныеТоварыКОформлению.Характеристика)
			|	КОНЕЦ КАК Характеристика,
			|	ВЫБОР
			|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СгруппированныеТоварыКОформлению.Серия) > 1
			|			ТОГДА Неопределено
			|		ИНАЧЕ МАКСИМУМ(СгруппированныеТоварыКОформлению.Серия)
			|	КОНЕЦ КАК Серия,
			|	ВЫБОР
			|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СгруппированныеТоварыКОформлению.ИдентификаторПроисхожденияВЕТИС) > 1
			|			ТОГДА Неопределено
			|		ИНАЧЕ МАКСИМУМ(СгруппированныеТоварыКОформлению.ИдентификаторПроисхожденияВЕТИС)
			|	КОНЕЦ КАК ИдентификаторПроисхожденияВЕТИС
			|ИЗ
			|	СгруппированныеТоварыКОформлению КАК СгруппированныеТоварыКОформлению
			|";
			
			Пакет = Запрос.ВыполнитьПакет();
			ДанныеНоменклатуры = Пакет[Пакет.Количество()-1].Выгрузить();
			
			Если ДанныеНоменклатуры.Количество() = 0 Тогда
				ВызватьИсключение СтрШаблон(
					НСтр("ru = 'В %1 отсутствует продукция для заполнения.'"),
					Основание);
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ДокументОбъект, ДанныеНоменклатуры[0]);
			
		Иначе
			
			Запрос.Текст = Запрос.Текст +
			"ВЫБРАТЬ
			|	Штрихкоды.ШтрихкодУпаковки КАК ШтрихкодУпаковки
			|ПОМЕСТИТЬ ОформленныеШтрихкодыУпаковок
			|	ИЗ Документ.МаркировкаТоваровИСМП КАК МаркировкаТоваровИСМП
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаркировкаТоваровИСМП.ШтрихкодыУпаковок КАК Штрихкоды
			|		ПО МаркировкаТоваровИСМП.Ссылка = Штрихкоды.Ссылка
			|ГДЕ
			|	МаркировкаТоваровИСМП.Проведен
			|	И МаркировкаТоваровИСМП.Ссылка <> &ЭтаСсылка
			|	И МаркировкаТоваровИСМП.ДокументОснование = &ДокументОснование
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Товары.Номенклатура КАК Номенклатура,
			|	Товары.Характеристика КАК Характеристика,
			|	Товары.Серия КАК Серия,
			|	Товары.ИдентификаторПроисхожденияВЕТИС КАК ИдентификаторПроисхожденияВЕТИС,
			|	СУММА(Товары.Количество) КАК Количество,
			|	СУММА(Товары.Количество) КАК КоличествоУпаковок,
			|	МАКСИМУМ(Товары.СрокГодности) КАК СрокГодности,
			|	0 КАК КоличествоПотребительскихУпаковок
			|ИЗ
			|	ТоварыСерии КАК Товары
			|СГРУППИРОВАТЬ ПО
			|	Товары.Номенклатура,
			|	Товары.Характеристика,
			|	Товары.Серия,
			|	Товары.ИдентификаторПроисхожденияВЕТИС
			|ИМЕЮЩИЕ
			|	СУММА(Товары.Количество) > 0
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ШтрихкодыУпаковок.ШтрихкодУпаковки КАК ШтрихкодУпаковки,
			|	ШтрихкодыУпаковок.ИдентификаторПроисхожденияВЕТИС КАК ИдентификаторПроисхожденияВЕТИС,
			|	ШтрихкодыУпаковок.СрокГодности КАК СрокГодности
			|ИЗ ШтрихкодыУпаковок КАК ШтрихкодыУпаковок
			|	ЛЕВОЕ СОЕДИНЕНИЕ ОформленныеШтрихкодыУпаковок КАК ОформленныеШтрихкодыУпаковок
			|	ПО ОформленныеШтрихкодыУпаковок.ШтрихкодУпаковки = ШтрихкодыУпаковок.ШтрихкодУпаковки
			|ГДЕ
			|	ОформленныеШтрихкодыУпаковок.ШтрихкодУпаковки ЕСТЬ NULL
			|";
			
			Пакет = Запрос.ВыполнитьПакет();
			Товары = Пакет[Пакет.Количество()-2].Выгрузить();
			ШтрихкодыУпаковок = Пакет[Пакет.Количество()-1].Выгрузить();
			Если Товары.Количество() = 0 Тогда
				
				ВызватьИсключение СтрШаблон(
					НСтр("ru = 'В %1 отсутствует продукция для заполнения.'"),
					Основание);
				
			КонецЕсли;
			
			// Штучные.
			Если ШтрихкодыУпаковок.Количество() = 0 Тогда
				ДокументОбъект.Товары.Загрузить(Товары);
			Иначе
				
				// Коды маркировки товара переменного количества.
				//  Дополним ТЧ Товары известными даннымии по потребительским упаковкам
				Упаковки = ШтрихкодыУпаковок.ВыгрузитьКолонку("ШтрихкодУпаковки");
				ВложенныеШтрихкоды = ШтрихкодированиеИС.ВложенныеШтрихкодыИзвестныхУпаковок(Упаковки);
				
				ПоляПоиска = "Номенклатура,Характеристика,Серия,ИдентификаторПроисхожденияВЕТИС,СрокГодности";
				Отбор = Новый Структура(ПоляПоиска);
				Товары.Индексы.Добавить(ПоляПоиска);
				ШтрихкодыУпаковок.Индексы.Добавить("ШтрихкодУпаковки");
				
				Для Каждого ЭлементТовар Из ВложенныеШтрихкоды.МаркированныеТовары Цикл
					СтрокаШтрихкод = ШтрихкодыУпаковок.Найти(ЭлементТовар.УпаковкаВерхнегоУровня.ШтрихкодУпаковки,"ШтрихкодУпаковки");
					ЗаполнитьЗначенияСвойств(Отбор, ЭлементТовар);
					ЗаполнитьЗначенияСвойств(Отбор, СтрокаШтрихкод);
					СтрокаТовар = Товары.НайтиСтроки(Отбор)[0];
					СтрокаТовар.КоличествоПотребительскихУпаковок = СтрокаТовар.КоличествоПотребительскихУпаковок + 1;
				КонецЦикла;
				
				ДокументОбъект.Товары.Загрузить(Товары);
				ДокументОбъект.ШтрихкодыУпаковок.Загрузить(ШтрихкодыУпаковок);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗнч(ДанныеВЕТИС.ВидПродукции) = Тип("ПеречислениеСсылка.ВидыПродукцииИС") Тогда
		ДокументОбъект.ВидПродукции = ДанныеВЕТИС.ВидПродукции;
	Иначе
		ИнтеграцияИС.ЗаполнитьВидПродукцииПоТабличнойЧасти(ДокументОбъект);
	КонецЕсли;
	
	Если ДокументОбъект.ВидПродукции = Перечисления.ВидыПродукцииИС.МорепродуктыПодконтрольныеВЕТИС
		И ДокументОбъект.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС Тогда
		ДокументОбъект.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТС;
	КонецЕсли;
	
КонецПроцедуры

// Определяет признак "Скоропортящаяся продукция" по идентификатору происхождения ВетИС. Ожидаемое поведение:
//   * Для скоропортящейся продукции выставление Истина.
//   * Для прочей продукции (в т. ч. при незаполненном идентификаторе) выставление Ложь.
// 
// Параметры:
//  Запрос - Запрос - запрос обработчика заполнения маркируемой продукции документов ИСМП.
//         - Строка - текст части запроса заполнения специфики маркируемой продукции.
//  ЕстьКолонкаВСДСтрокой - Булево - Признак наличия колонки строкового представления индентификатора ВСД.
Процедура ДоработатьЗапросЗаполненияМаркируемойПродукцииДокументаМаркировка(Запрос, ЕстьКолонкаВСДСтрокой = Ложь) Экспорт
	
	СтандартнаяОбработка = Истина;
	ИнтеграцияИСМПВЕТИСПереопределяемый.ДоработатьЗапросЗаполненияМаркируемойПродукцииДокументаМаркировка(Запрос, СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ВетИС") Тогда
		Если ЕстьКолонкаВСДСтрокой Тогда
			ЗначениеЗапросаПоля = "Товары.ИдентификаторПроисхожденияВЕТИССтрокой";
			Запрос = СтрЗаменить(Запрос, "&ИдентификаторПроисхожденияВЕТИССтрокой", ЗначениеЗапросаПоля);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Запрос) = Тип("Строка") Тогда
		ЗначениеЗапросаПоля = "ЕСТЬNULL(Товары.ИдентификаторПроисхожденияВЕТИС.Идентификатор, """")";
		Если ЕстьКолонкаВСДСтрокой
			И Не ИспользуетсяПодсистемаВетИС() Тогда
			ЗначениеЗапросаПоля = "Товары.ИдентификаторПроисхожденияВЕТИССтрокой";
		КонецЕсли;
		Запрос = СтрЗаменить(Запрос, "&ИдентификаторПроисхожденияВЕТИССтрокой", ЗначениеЗапросаПоля);
	Иначе
		
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст, "&СкоропортящаясяПродукция", "ЕСТЬNULL(Товары.ИдентификаторПроисхожденияВЕТИС.СкоропортящаясяПродукция, ЛОЖЬ)");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбщийМодульРасчетСтатусовОформленияИСМП

// Заполняет имена реквизитов документа-основания ВЕТИС для документа ИСМП.
//   При использовании внешней подсистемы ВетИС, расчет статусов оформления пишется в общем переопределении.
//
// Параметры:
//  МетаданныеОснования - ОбъектМетаданных - метаданные документа из ОпределяемыйТип.Основание<Имя документа ИСМП>
//  МетаданныеДокументаИСМП - ОбъектМетаданных - метаданные документа из ОпределяемыйТип.ДокументыИСМППоддерживающиеСтатусыОформления
//  Реквизиты  - Структура - имена реквизитов:
//  * Ключ  - Строка - служебное имя реквизита в ИСМП
//  * Значение - Строка - имя реквизита документа-основания, которое при необходимости надо переопределить
//  (см. РасчетСтатусовОформленияИСМП.СтруктураРеквизитовДляРасчетаСтатусаОформленияДокументов).
Процедура ПриОпределенииИменРеквизитовДляРасчетаСтатусаОформления(МетаданныеОснования, МетаданныеДокументаИСМП, Реквизиты) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ВетИС") Тогда
		Возврат;
	КонецЕсли;
	
	Если МетаданныеОснования = Метаданные.Документы["ПроизводственнаяОперацияВЕТИС"] Тогда
		Реквизиты.Контрагент = "ХозяйствующийСубъект.Контрагент";
	ИначеЕсли МетаданныеОснования = Метаданные.Документы["ВходящаяТранспортнаяОперацияВЕТИС"] Тогда
		Реквизиты.Контрагент = "ГрузополучательХозяйствующийСубъект.Контрагент";
	КонецЕсли;
	
КонецПроцедуры

// Позволяет переопределить текст запроса выборки данных из документов-основания для расчета статуса оформления.
//   При использовании внешней подсистемы ВетИС, расчет статусов оформления пишется в общем переопределении.
//   Требования к тексту запроса:
//     Если данные из документа выбирать не требуется, переопределение также не заполнять.
//     Результат запроса обязательно должен содержать следующие поля:
//      * Ссылка - ОпределяемыйТип.Основание<Имя документа ИСМП> - ссылка на документ-основание
//      * ЭтоДвижениеПриход - Булево - вид движения ТМЦ (Истина - приход, Ложь - расход)
//      * Номенклатура - ОпределяемыйТип.Номенклатура - номенклатура
//      * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика номенклатуры
//      * Серия - ОпределяемыйТип.СерияНоменклатуры - серия номенклатуры
//      * Количество - Число - количество номенклатуры в ее основной единице измерения
//     В результат запроса нужно включать только подконтрольную номенклатуру ИСМП (табак, обувь)
//     Для отбора документов-основания в запросе нужно использовать отбор "В (&МассивДокументов)"
//     Выбранные данные необходимо поместить во временную таблицу (См. РасчетСтатусовОформленияИС.ИмяВременнойТаблицыДляВыборкиДанныхДокумента).
//
//Параметры:
//   МетаданныеОснования - ОбъектМетаданных - метаданные документа из ОпределяемыйТип.Основание<Имя документа ИСМП>
//   МетаданныеДокументаИСМП - ОбъектМетаданных - метаданные документа из ОпределяемыйТип.ДокументыИСМППоддерживающиеСтатусыОформления
//   ТекстЗапроса - Строка - текст запроса выборки данных, который надо переопределить
//   ПараметрыЗапроса - Структура - дополнительные параметры запроса, требуемые для выполнения запроса 
//       конкретного документа; при необходимости можно дополнить данную структуру
//     Ключ     - имя параметры
//     Значение - значение параметра.
//
Процедура ПриОпределенииТекстаЗапросаДляРасчетаСтатусаОформления(
			МетаданныеОснования, МетаданныеДокументаИСМП, ТекстЗапроса, ПараметрыЗапроса) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ВетИС") Тогда
		Возврат;
	КонецЕсли;
	
	Если МетаданныеДокументаИСМП <> Метаданные.Документы.МаркировкаТоваровИСМП Тогда
		Возврат;
	ИначеЕсли МетаданныеОснования <> Метаданные.Документы["ПроизводственнаяОперацияВЕТИС"]
			И МетаданныеОснования <> Метаданные.Документы["ВходящаяТранспортнаяОперацияВЕТИС"] Тогда
		Возврат;
	КонецЕсли;
	
	ЧастиЗапроса = Новый Массив;
	
	Если МетаданныеОснования = Метаданные.Документы["ПроизводственнаяОперацияВЕТИС"] Тогда
		
		//В случае выполнения производственной операции для создания набора ВЕТИС, требуется переопределение
		
		ТекстЗапроса = "ВЫБРАТЬ
		|	ТаблицаТовары.Ссылка КАК Ссылка,
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.Характеристика КАК Характеристика,
		|	ТаблицаТовары.Серия КАК Серия,
		|	СУММА(ТаблицаТовары.Количество) КАК Количество
		|ПОМЕСТИТЬ ДанныеШтрихкодовУпаковок
		|ИЗ
		|	Документ.ПроизводственнаяОперацияВЕТИС.Товары КАК ТаблицаТовары
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПроизводственнаяОперацияВЕТИС КАК ТаблицаДокумента
		|		ПО ТаблицаДокумента.Ссылка = ТаблицаТовары.Ссылка
		|ГДЕ
		|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
		|	И ТаблицаДокумента.Проведен
		|	И ТаблицаТовары.ВетеринарноСопроводительныйДокумент <> ЗНАЧЕНИЕ(Справочник.ВетеринарноСопроводительныйДокументВЕТИС.ПустаяСсылка)
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТовары.Ссылка,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Характеристика,
		|	ТаблицаТовары.Серия
		|ИМЕЮЩИЕ
		|	СУММА(ТаблицаТовары.Количество) > 0
		|"
		
	ИначеЕсли МетаданныеОснования = Метаданные.Документы["ВходящаяТранспортнаяОперацияВЕТИС"] Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ
		|	ТаблицаТовары.Ссылка КАК Ссылка,
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.Характеристика КАК Характеристика,
		|	ТаблицаТовары.Серия КАК Серия,
		|	СУММА(ТаблицаТовары.Количество) КАК Количество
		|ПОМЕСТИТЬ ДанныеШтрихкодовУпаковок
		|ИЗ
		|	Документ.ВходящаяТранспортнаяОперацияВЕТИС.Товары КАК ТаблицаТовары
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВходящаяТранспортнаяОперацияВЕТИС КАК ТаблицаДокумента
		|		ПО ТаблицаДокумента.Ссылка = ТаблицаТовары.Ссылка
		|ГДЕ
		|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
		|	И ТаблицаДокумента.Проведен
		|	И ТаблицаДокумента.ГашениеНаСВХ
		|	И ТаблицаТовары.ВетеринарноСопроводительныйДокумент <> ЗНАЧЕНИЕ(Справочник.ВетеринарноСопроводительныйДокументВЕТИС.ПустаяСсылка)
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТовары.Ссылка,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Характеристика,
		|	ТаблицаТовары.Серия
		|ИМЕЮЩИЕ
		|	СУММА(ТаблицаТовары.Количество) > 0
		|";
		
	КонецЕсли;
	
	ЧастиЗапроса.Добавить(ТекстЗапроса);
	ЧастиЗапроса.Добавить(ШтрихкодированиеОбщегоНазначенияИС.ТекстЗапросаСвойстваМаркируемойПродукции());
	ЧастиЗапроса.Добавить("ВЫБРАТЬ
		|	ТаблицаТовары.Ссылка КАК Ссылка,
		|	ИСТИНА КАК ЭтоДвижениеПриход,
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.Характеристика КАК Характеристика,
		|	ТаблицаТовары.Серия КАК Серия,
		|	ТаблицаТовары.Количество КАК Количество
		|ПОМЕСТИТЬ %1
		|ИЗ
		|	ДанныеШтрихкодовУпаковок КАК ТаблицаТовары
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ СвойстваМаркируемойПродукции КАК МаркируемаяПродукцияИСМПВЕТИС
		|		ПО ТаблицаТовары.Номенклатура = МаркируемаяПродукцияИСМПВЕТИС.Номенклатура
		|		И МаркируемаяПродукцияИСМПВЕТИС.ВидПродукции В
		|			(ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС),
		|			ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.МорепродуктыПодконтрольныеВЕТИС),
		|			ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.КормаДляЖивотныхПодконтрольныеВЕТИС),
		|			ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.КонсервированнаяПродукцияПодконтрольнаяВЕТИС),
		|			ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.МясоПодконтрольноеВЕТИС))
		|"
	);
	ЧастиЗапроса.Добавить("УНИЧТОЖИТЬ ДанныеШтрихкодовУпаковок");
	ЧастиЗапроса.Добавить("УНИЧТОЖИТЬ СвойстваМаркируемойПродукции");
	ТекстЗапроса = СтрСоединить(ЧастиЗапроса, ИнтеграцияИС.РазделительЗапросовВПакете());
	
КонецПроцедуры

#КонецОбласти

// Возвращает данные ВетИС по идентификаторам происхождения:
//   * СрокГодности    - Дата   - дата начала последнего периода срока годности.
//   * СкоропортящаясяПродукция - Булево - признак скоропорта.
//   * Представление   - Строка - представление идентификатора (без имени), ожидается "Дата (срок годности)"
//   * Идентификатор   - ОпределяемыйТип.УникальныйИдентификаторИС - GUID объекта ВетИС.
//	 * Продукция       - Произвольный - продукция ВетИС.
// Параметры:
//   ИдентификаторыПроисхождения - Массив Из ОпределяемыйТип.ИдентификаторПроисхожденияВЕТИС - идентификаторы происхождения.
//
//  Возвращаемое значение:
//   Соответствие - данные ВетИС по идентификаторам происхождения, где ключ - ссылка на идентификатор, значение - полученные данные.
//
Функция ДанныеИдентификаторовПроисхождения(ИдентификаторыПроисхождения) Экспорт
	
	ДанныеПоСрокамГодности = Новый Соответствие;
	
	СтандартнаяОбработка = Истина;
	ИнтеграцияИСМПВЕТИСПереопределяемый.ПриПолученииДанныхИдентификаторовПроисхождения(ИдентификаторыПроисхождения, ДанныеПоСрокамГодности, СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат ДанныеПоСрокамГодности;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ВетИС") Тогда
		Возврат ДанныеПоСрокамГодности;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ИдентификаторыПроисхождения) Тогда
		Возврат ДанныеПоСрокамГодности;
	КонецЕсли;
	
	МодульВЕТИС = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияВЕТИСКлиентСервер");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИдентификаторПроисхожденияВЕТИС.Ссылка КАК ИдентификаторыПроисхождения,
	|	ВЫБОР
	|		КОГДА ИдентификаторПроисхожденияВЕТИС.СрокГодностиКонецПериода = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ИдентификаторПроисхожденияВЕТИС.СрокГодностиНачалоПериода
	|		ИНАЧЕ ИдентификаторПроисхожденияВЕТИС.СрокГодностиКонецПериода
	|	КОНЕЦ КАК СрокГодности,
	|	ИдентификаторПроисхожденияВЕТИС.СрокГодностиНачалоПериода КАК НачалоПериода,
	|	ИдентификаторПроисхожденияВЕТИС.СрокГодностиКонецПериода КАК КонецПериода,
	|	ИдентификаторПроисхожденияВЕТИС.СрокГодностиТочностьЗаполнения КАК ТочностьЗаполнения,
	|	ИдентификаторПроисхожденияВЕТИС.Продукция КАК Продукция,
	|	ИдентификаторПроисхожденияВЕТИС.Идентификатор,
	|	ИдентификаторПроисхожденияВЕТИС.Дата,
	|	ИдентификаторПроисхожденияВЕТИС.СкоропортящаясяПродукция
	|ИЗ
	|	Справочник.ВетеринарноСопроводительныйДокументВЕТИС КАК ИдентификаторПроисхожденияВЕТИС
	|ГДЕ
	|	ИдентификаторПроисхожденияВЕТИС.Ссылка В (&ИдентификаторыПроисхождения)";
	Запрос.УстановитьПараметр("ИдентификаторыПроисхождения", ИдентификаторыПроисхождения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СрокГодности = МодульВЕТИС.ЗначениеЭлементаПериодаВЕТИС(Выборка.СрокГодности, Выборка.ТочностьЗаполнения);
		
		Период = МодульВЕТИС.ПредставлениеПериодаВЕТИС(
			Выборка.ТочностьЗаполнения, Выборка.НачалоПериода, Выборка.КонецПериода);
		ПредставлениеШаблон = НСтр("ru = '%1 (%2)'");
		Представление = СтрШаблон(ПредставлениеШаблон, Формат(Выборка.Дата, "ДФ=dd.MM.yyyy"), Период);
		
		ДанныеВЕТИС = Новый Структура;
		ДанныеВЕТИС.Вставить("СрокГодности",    СрокГодности);
		ДанныеВЕТИС.Вставить("СкоропортящаясяПродукция", Выборка.СкоропортящаясяПродукция);
		ДанныеВЕТИС.Вставить("Идентификатор",   Выборка.Идентификатор);
		ДанныеВЕТИС.Вставить("Представление",   Представление);
		ДанныеВЕТИС.Вставить("Продукция",       Выборка.Продукция);
		
		ДанныеПоСрокамГодности.Вставить(Выборка.ИдентификаторыПроисхождения, ДанныеВЕТИС);
		
	КонецЦикла;
	
	Возврат ДанныеПоСрокамГодности;
	
КонецФункции

// Проверяет продукцию идентификатора происхождения на соответствие сопоставленной продукции по переданной структуре данных товара.
//
// Параметры:
//  ИдентификаторыПроисхождения   - Массив Из ОпределяемыйТип.УникальныйИдентификаторИС - GUID объекта ВетИС.
//  ДанныеСопоставления - Структура - со свойствами:
//   * Номенклатура   - ОпределяемыйТип.Номенклатура               - номенклатура.
//   * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика.
//   * Серия          - ОпределяемыйТип.СерияНоменклатуры          - серия.
//  Соответствует - Булево - переопределяемый параметр, Истина, если продукция идентификатора совпадает с сопоставленной продукцией данных для сопоставления.
//  СтандартнаяОбработка - Булево - признак библиотечной обработки.
//
// Возвращаемое значение:
//   Булево - номенклатура соответствует.
Функция НоменклатураСоответствуетСопоставленнойПродукцииВЕТИСПоИдентификаторуПроисхождения(ИдентификаторыПроисхождения, ДанныеСопоставления) Экспорт
	
	Соответствует = Ложь;
	
	СтандартнаяОбработка = Истина;
	ИнтеграцияИСМПВЕТИСПереопределяемый.ПриПроверкеСоответствияНоменклатурыИдентификаторуПроисхождения(
		ИдентификаторыПроисхождения,
		ДанныеСопоставления,
		Соответствует,
		СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат Соответствует;
	КонецЕсли;
	
	ДанныеВЕТИС = ДанныеИдентификаторовПроисхождения(ИдентификаторыПроисхождения);
	ДанныеПоИдентификаторуВЕТИС = ДанныеВЕТИС[ИдентификаторыПроисхождения];
	
	Если ДанныеПоИдентификаторуВЕТИС = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Номенклатура   = ДанныеСопоставления.Номенклатура;
	Характеристика = ДанныеСопоставления.Характеристика;
	Серия          = ДанныеСопоставления.Серия;
	
	МодульВЕТИС = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияВЕТИС");
	СопоставленнаяПродукция = МодульВЕТИС.СопоставленнаяПродукция(Номенклатура, Характеристика, Серия);
	
	Если СопоставленнаяПродукция.Найти(ДанныеПоИдентификаторуВетИС.Продукция) <> Неопределено Тогда
		Соответствует = Истина;
	КонецЕсли;
	
	Возврат Соответствует;
	
КонецФункции

// Возвращает идентификатор производственной площадки ВетИС.
//
// Параметры:
//   ПроизводственнаяПлощадкаВЕТИС - ОпределяемыйТип.ПроизводственнаяПлощадкаВЕТИС - Ссылка на производственную площадку ВетИС.
//
//  Возвращаемое значение:
//   ОпределяемыйТип.УникальныйИдентификаторИС - Идентификатор производственной площадки ВетИС.
//
Функция ИдентификаторПроизводственнойПлощадкиВЕТИС(ПроизводственнаяПлощадкаВЕТИС) Экспорт
	
	ИдентификаторПроизводственнойПлощадкиВЕТИС = ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа(
		Метаданные.ОпределяемыеТипы.УникальныйИдентификаторИС);
	
	СтандартнаяОбработка = Истина;
	ИнтеграцияИСМПВЕТИСПереопределяемый.ПриПолученииИдентификатораПроизводственнойПлощадкиВЕТИС(
		ПроизводственнаяПлощадкаВЕТИС,
		ИдентификаторПроизводственнойПлощадкиВЕТИС,
		СтандартнаяОбработка);
	
	Если Не СтандартнаяОбработка Тогда
		Возврат ИдентификаторПроизводственнойПлощадкиВЕТИС;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ВетИС") Тогда
		Возврат ИдентификаторПроизводственнойПлощадкиВЕТИС;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПроизводственнаяПлощадкаВЕТИС) Тогда
		Возврат ИдентификаторПроизводственнойПлощадкиВЕТИС;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПроизводственнаяПлощадкаВЕТИС, "Идентификатор").Идентификатор;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДополнитьВложенныеШтрихкодыДереваДаннымиВЕТИС(ДеревоУпаковок, УпаковкиСДаннымиВЕТИС, Знач ДанныеВЕТИС = Неопределено)
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		Если ДанныеВЕТИС = Неопределено Тогда
			ТекущиеДанныеВЕТИС = УпаковкиСДаннымиВЕТИС[СтрокаДерева.ШтрихкодУпаковки];
		Иначе
			ТекущиеДанныеВЕТИС = ДанныеВЕТИС;
		КонецЕсли;
		
		Если ТекущиеДанныеВЕТИС <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаДерева, ТекущиеДанныеВЕТИС);
		КонецЕсли;
		
		ДополнитьВложенныеШтрихкодыДереваДаннымиВЕТИС(СтрокаДерева, УпаковкиСДаннымиВЕТИС, ТекущиеДанныеВЕТИС);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
