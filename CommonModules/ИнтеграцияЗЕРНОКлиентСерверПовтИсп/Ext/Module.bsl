#Область ПрограммныйИнтерфейс

// Возвращает признак ведения учета продукци переданного вида.
// 
// Возвращаемое значение:
//  Булево -- признак ведения учета продукции зерна и зернопереработки.
Функция ВестиУчетПродукции() Экспорт
	
	Возврат ИнтеграцияЗЕРНОВызовСервера.ВестиУчетПродукции();
	
КонецФункции

// Возвращает список особенностей учета продукци для ФГИС "Зерно".
// 
// Возвращаемое значение:
//  ФиксированныйМассив Из ПеречислениеСсылка.ВидыПродукцииИС - Учитываемые виды продукции
Функция УчитываемыеВидыПродукции() Экспорт
	
	ВидыПродукции = Новый Массив;
	
	ВидыПродукции.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Зерно"));
	ВидыПродукции.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродуктыПереработкиЗерна"));
	
	Возврат Новый ФиксированныйМассив(ВидыПродукции);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// Возвращает признак включения режима работы с тестовым контуром ЗЕРНО
//
// Возвращаемое значение:
//  Булево - Истина, если включен режим работы с тестовым контуром ЗЕРНО.
//
Функция РежимРаботыСТестовымКонтуромЗЕРНО() Экспорт
	
	Возврат ИнтеграцияЗЕРНОВызовСервера.РежимРаботыСТестовымКонтуромЗЕРНО();
	
КонецФункции

// Параметры цикла сообщения.
// 
// Параметры:
//  ТекущееДействие - ПеречислениеСсылка.ДействиеССообщениемЗЕРНО, Неопределено - Текущее действие.
//  
// Возвращаемое значение:
//  Массив Из Структура:
//  * ИмяПоляСообщения        - Строка - Имя поля сообщения
//  * ИмяЗапроса              - Строка - Имя поля в конверте
//  * ИмяПоляТела             - Строка, Неопределено - Имя поля данных тела
//  * ОперацияСообщения       - ПеречислениеСсылка.ДействиеССообщениемЗЕРНО - Действие выполняемое сообщением.
Функция ПараметрыЦиклаСообщения(ТекущееДействие = Неопределено) Экспорт
	
	ВозвращаемоеЗначение = Новый Массив();
	
	ТекущееДействиеОтправка               = ПредопределенноеЗначение("Перечисление.ДействиеССообщениемЗЕРНО.Отправка");
	ТекущееДействиеПолучениеРезультата    = ПредопределенноеЗначение("Перечисление.ДействиеССообщениемЗЕРНО.ПолучениеРезультата");
	ТекущееДействиеПодтверждениеПолучения = ПредопределенноеЗначение("Перечисление.ДействиеССообщениемЗЕРНО.ПодтверждениеПолучения");
	
	Если Не ЗначениеЗаполнено(ТекущееДействие)
		Или ТекущееДействие = ТекущееДействиеОтправка Тогда
		ТребуетсяЗапрос              = Истина;
		ТребуетсяПолучениеРезультата = Истина;
		ТребуетсяПодтверждение       = Ложь;
	ИначеЕсли ТекущееДействие = ТекущееДействиеПолучениеРезультата Тогда
		ТребуетсяЗапрос              = Ложь;
		ТребуетсяПолучениеРезультата = Истина;
		ТребуетсяПодтверждение       = Ложь;
	Иначе
		ТребуетсяЗапрос              = Ложь;
		ТребуетсяПолучениеРезультата = Ложь;
		ТребуетсяПодтверждение       = Истина;
	КонецЕсли;
	
	Если ТребуетсяЗапрос Тогда
		ПараметрыСообщения = Новый Структура();
		ПараметрыСообщения.Вставить("ИмяПоляСообщения",  "КонвертЗапросXML");
		ПараметрыСообщения.Вставить("ИмяЗапроса",        "SendRequestRequest");
		ПараметрыСообщения.Вставить("ИмяПоляТела",       "ТекстСообщенияЗапросXML");
		ПараметрыСообщения.Вставить("ОперацияСообщения", ТекущееДействиеОтправка);
		ВозвращаемоеЗначение.Добавить(ПараметрыСообщения);
	КонецЕсли;
	
	Если ТребуетсяПолучениеРезультата Тогда
		ПараметрыСообщения = Новый Структура();
		ПараметрыСообщения.Вставить("ИмяПоляСообщения",  "КонвертРезультатXML");
		ПараметрыСообщения.Вставить("ИмяЗапроса",        "SendResponseRequest");
		ПараметрыСообщения.Вставить("ИмяПоляТела",       Неопределено);
		ПараметрыСообщения.Вставить("ОперацияСообщения", ТекущееДействиеПолучениеРезультата);
		ВозвращаемоеЗначение.Добавить(ПараметрыСообщения);
	КонецЕсли;
	
	Если ТребуетсяПодтверждение Тогда
		ПараметрыСообщения = Новый Структура();
		ПараметрыСообщения.Вставить("ИмяПоляСообщения",  "КонвертПодтверждениеXML");
		ПараметрыСообщения.Вставить("ИмяЗапроса",        "AckRequest");
		ПараметрыСообщения.Вставить("ИмяПоляТела",       Неопределено);
		ПараметрыСообщения.Вставить("ОперацияСообщения", ТекущееДействиеПодтверждениеПолучения);
		ВозвращаемоеЗначение.Добавить(ПараметрыСообщения);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Параметры ошибок по кодам.
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - Строка - Код ошибки
//  * Значение - см. НовыйПараметрыОшибки
Функция ПараметрыОшибокПоКодам() Экспорт
	
	ВозвращаемоеЗначение = Новый Соответствие;
	
	ПараметрыОшибки = ОбщегоНазначенияИСКлиентСервер.НовыйПараметрыОшибки();
	ПараметрыОшибки.ЗаписыватьВЖурналРегистрации      = Истина;
	ПараметрыОшибки.ПрерватьОбработкуОчередиСообщений = Истина;
	ПараметрыОшибки.СообщатьОбОшибке                  = Истина;
	ВозвращаемоеЗначение.Вставить("zerno-001", ПараметрыОшибки);
	
	ПараметрыОшибки = ОбщегоНазначенияИСКлиентСервер.НовыйПараметрыОшибки();
	ПараметрыОшибки.ЗаписыватьВЖурналРегистрации      = Истина;
	ПараметрыОшибки.ПрерватьОбработкуОчередиСообщений = Истина;
	ПараметрыОшибки.СообщатьОбОшибке                  = Истина;
	ВозвращаемоеЗначение.Вставить("zerno-002", ПараметрыОшибки);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ИменаПараметровПериодическогоПолученияДанных() Экспорт
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить(
		"ИмяПараметраПриложения",
		"ЗЕРНО.ОтветственныеЗаПодписаниеСообщений");
	ВозвращаемоеЗначение.Вставить(
		"ИнициализацияНастроекОтветственногоЗаПодписаниеСообщений",
		"ИнтеграцияЗЕРНО.ИнициализацияНастроекОтветственногоЗаПодписаниеСообщений");
	ВозвращаемоеЗначение.Вставить(
		"ОбновлениеНастроекОтветственногоЗаПодписаниеСообщений",
		"ИнтеграцияЗЕРНО.ОбновлениеНастроекОтветственногоЗаПодписаниеСообщений");
	ВозвращаемоеЗначение.Вставить(
		"ПроверитьНаличиеСообщенийКПодписанию",
		"ИнтеграцияЗЕРНО.ПроверитьНаличиеСообщенийКПодписанию");
	ВозвращаемоеЗначение.Вставить(
		"ПоступилиНовыеСообщенияДляПодписания",
		"ИнтеграцияЗЕРНО.ПоступилиНовыйДанныеСообщенияДляПодписания");
	ВозвращаемоеЗначение.Вставить(
		"ВыполненоАвтоподписание",
		"ИнтеграцияЗЕРНО.ВыполненоАвтоподписание");
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти
