#Область СлужебныйПрограммныйИнтерфейс

// Формирование строки подключения к сервису.
// 
// Параметры:
//  ВидЭТП - ПеречислениеСсылка.ВидыЭлектронныхТорговыхПлощадок - Вид ЭТП
//  РазделУчета - строка - "Поставщики" или "Покупатели"
// 
// Возвращаемое значение:
//  Строка - Строка подключения к сервису этп
Функция СтрокаПодключенияКСервису(ВидЭТП, РазделУчета) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ВидЭТП", ВидЭТП);
	Параметры.Вставить("РазделУчета", РазделУчета);
	
	ДанныеДляПодключения = ИнтеграцияСЭлектроннымиТорговымиПлощадками.ПараметрыРаботыССервисомАвторизации(Параметры);
	
	СтрокаПодключения = ДанныеДляПодключения.Протокол + "://" + ДанныеДляПодключения.Сервер;
	Если ДанныеДляПодключения.Порт <> "" Тогда
	 	СтрокаПодключения = СтрокаПодключения + ":"+ДанныеДляПодключения.Порт;
	КонецЕсли;

	Возврат СтрокаПодключения;
КонецФункции

Функция ПроверитьСвязьСЭТПБидзаарВФоне(ПараметрыОперации) Экспорт

	ВидЭТП = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОперации, "ВидЭТП");

	Если ВидЭТП = Перечисления.ВидыЭлектронныхТорговыхПлощадок.БидзаарПокупатели Тогда
		УстановитьПривилегированныйРежим(Истина);
		Если Не Константы.ИспользоватьИнтеграциюСЭТПБидзаарДляПокупателей.Получить() Тогда
			Возврат Неопределено;
		КонецЕсли;
		ИмяПроцедуры = "ИнтеграцияСЭлектроннымиТорговымиПлощадками.ПроверитьСвязьСЭТПБидзаарДляПокупателей";
		УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектронныхТорговыхПлощадок.УчетнаяЗаписьОрганизации(ВидЭТП,
			ПараметрыОперации.Организация);
		УстановитьПривилегированныйРежим(Ложь);
		Если УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектронныхТорговыхПлощадок.ПустаяСсылка() Тогда
			Возврат Неопределено;
		Иначе
			ПараметрыОперации.Вставить("УчетнаяЗапись", УчетнаяЗапись);
		КонецЕсли;
	ИначеЕсли ВидЭТП = Перечисления.ВидыЭлектронныхТорговыхПлощадок.БидзаарПоставщики Тогда
		УстановитьПривилегированныйРежим(Истина);
		Если Не Константы.ИспользоватьИнтеграциюСЭТПБидзаарДляПоставщиков.Получить() Тогда
			Возврат Неопределено;
		КонецЕсли;
		ИмяПроцедуры = "ИнтеграцияСЭлектроннымиТорговымиПлощадками.ПроверитьСвязьСЭТПБидзаарДляПоставщиков";
		УстановитьПривилегированныйРежим(Ложь);
	Иначе
		Возврат Неопределено;
	КонецЕсли;

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Проверка связи с ЭТП Бидзаар'");
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;

	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыОперации, ПараметрыВыполнения);

КонецФункции

// Формирует фоновое задание, позволяющее опубликовать запрос коммерческих предложений
// 
// Параметры:
//  ЗапросКоммерческихПредложений - ДокументСсылка.ЗапросКоммерческихПредложенийПоставщиков - публикуемый документ
// 
// Возвращаемое значение:
//  Структура - см. описание ДлительныеОперации.ВыполнитьВФоне
//
Функция ПубликацияЗапросаКоммерческихПредложенийБидзаарВФоне(Знач ЗапросКоммерческихПредложений, ПубликоватьПрисоединенныеФайлы) Экспорт
	
	ИмяПроцедуры = "ИнтеграцияСЭлектроннымиТорговымиПлощадками.ПубликацияЗапросаКоммерческихПредложенийБидзаар";

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Публикация запроса коммерческих предложений.'");
	ПараметрыВыполнения.КлючФоновогоЗадания = XMLСтрока(ЗапросКоммерческихПредложений);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;

	ПараметрыОперации = Новый Структура;
	ПараметрыОперации.Вставить("ЗапросКоммерческихПредложений", ЗапросКоммерческихПредложений);
	ПараметрыОперации.Вставить("ПубликоватьПрисоединенныеФайлы", ПубликоватьПрисоединенныеФайлы);

	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыОперации, ПараметрыВыполнения);
	
КонецФункции

// Формирует фоновое задание, позволяющее опубликовать файлы, присодиненные к запросу коммерческих предложений
// 
// Параметры:
//  ЗапросКоммерческихПредложений - ДокументСсылка.ЗапросКоммерческихПредложенийПоставщиков - документ, присоединенные файлы которого необходимо опубликовать
// 
// Возвращаемое значение:
//  Структура - см. описание ДлительныеОперации.ВыполнитьВФоне
// 
Функция ПубликацияДокументовЗапросаКоммерческихПредложенийБидзаарВФоне(Знач ЗапросКоммерческихПредложений) Экспорт
	ИмяПроцедуры = "ИнтеграцияСЭлектроннымиТорговымиПлощадками.ПубликацияДокументовБидзаар";

	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗапросКоммерческихПредложений,
		"Организация, МенеджерEmail");
	УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектронныхТорговыхПлощадок.УчетнаяЗаписьОрганизации(
		Перечисления.ВидыЭлектронныхТорговыхПлощадок.БидзаарПокупатели, РеквизитыДокумента.Организация);

	ОписанияФайлов = ИнтеграцияСЭлектроннымиТорговымиПлощадками.ОписанияФайловДляПубликацииЗапросаКоммерческихПредложенийБидзаар(
		ЗапросКоммерческихПредложений);

	ИдентификаторФормы = Новый УникальныйИдентификатор;
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр(
		"ru = 'Публикация документов запроса коммерческих предложений.'");
	ПараметрыВыполнения.КлючФоновогоЗадания = XMLСтрока(ЗапросКоммерческихПредложений);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;

	ПараметрыОперации = Новый Структура;
	ПараметрыОперации.Вставить("УчетнаяЗапись", УчетнаяЗапись);
	ПараметрыОперации.Вставить("МенеджерEmail", РеквизитыДокумента.МенеджерEmail);
	ПараметрыОперации.Вставить("ОписанияФайлов", ОписанияФайлов);

	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыОперации, ПараметрыВыполнения);
КонецФункции

// Запрос текущих состояний опубликованных документов бидзаар в фоне.
// 
// Параметры:
//  ОпубликованныеДокументы - Массив из ДокументСсылка.ЗапросКоммерческихПредложенийПоставщиков - опубликованные документы
// 
// Возвращаемое значение:
//  Структура - см. описание ДлительныеОперации.ВыполнитьВФоне
// 
Функция ЗапросТекущихСостоянийОпубликованныхДокументовБидзаарВФоне(ОпубликованныеДокументы) Экспорт
	
	ИмяПроцедуры = "ИнтеграцияСЭлектроннымиТорговымиПлощадками.ЗапросТекущихСостоянийОпубликованныхДокументовБидзаар";

	ИдентификаторФормы = Новый УникальныйИдентификатор;
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Запрос текущих состояний опубликованных документов.'");
	ПараметрыВыполнения.КлючФоновогоЗадания = Строка(ИдентификаторФормы);
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
		
	ПараметрыОперации = Новый Структура;
	ПараметрыОперации.Вставить("ОпубликованныеДокументы", ОпубликованныеДокументы);
	ПараметрыОперации.Вставить("ТолькоПобедители", Истина);
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыОперации, ПараметрыВыполнения);
	
КонецФункции

Функция ПолучениеДанныхКоммерческихПредложенийПоЗапросуБидзаарВФоне(Знач ЗапросКоммерческихПредложений) Экспорт
	
	ИмяПроцедуры = "ИнтеграцияСЭлектроннымиТорговымиПлощадками.ПолучениеДанныхКоммерческихПредложенийПоЗапросуБидзаар";

	ИдентификаторФормы = Новый УникальныйИдентификатор;
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение данных коммерческих предложений по запросу Бидзаар.'");
	ПараметрыВыполнения.КлючФоновогоЗадания = XMLСтрока(ЗапросКоммерческихПредложений);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;

	ПараметрыОперации = Новый Структура("ЗапросКоммерческихПредложений", ЗапросКоммерческихПредложений);

	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыОперации, ПараметрыВыполнения);
		
КонецФункции

Функция ПолучениеДанныхУчастниковПоЗапросуБидзаарВФоне(Знач ЗапросКоммерческихПредложений, ТолькоПобедители) Экспорт

	ИмяПроцедуры = "ИнтеграцияСЭлектроннымиТорговымиПлощадками.ПолучениеДанныхУчастниковПоЗапросуБидзаар";

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение данных участинков по запросу Бидзаар.'");
	ПараметрыВыполнения.КлючФоновогоЗадания = XMLСтрока(ЗапросКоммерческихПредложений);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;

	ПараметрыОперации = Новый Структура("ЗапросКоммерческихПредложений, ТолькоПобедители",
		ЗапросКоммерческихПредложений, ТолькоПобедители);

	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыОперации, ПараметрыВыполнения);

КонецФункции

// Получить вид ЭТП по разделу учета или раздел учета по виду ЭТП.
// 
// Параметры:
//  Параметр - ПеречислениеСсылка.ВидыЭлектронныхТорговыхПлощадок, Строка - Соответствующий возвращаемому значению
//  ПолучитьВидЭТП - Булево - Истина (вид ЭТП), Ложь (раздел учета)
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ВидыЭлектронныхТорговыхПлощадок, Строка - Вид ЭТП или раздел учета
Функция ПолучитьВидЭТПИлиРазделУчета(Параметр, ПолучитьВидЭТП = Истина) Экспорт

	Возврат ИнтеграцияСЭлектроннымиТорговымиПлощадками.ПолучитьВидЭТПИлиРазделУчета(Параметр, ПолучитьВидЭТП = Истина);

КонецФункции

Функция ДоступноПравоНастройкиАвторизацииБидзаар() Экспорт
	Возврат ИнтеграцияСЭлектроннымиТорговымиПлощадками.ДоступноПравоНастройкиАвторизацииБидзаар();
КонецФункции

#КонецОбласти