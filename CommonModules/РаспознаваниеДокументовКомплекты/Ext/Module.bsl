#Область СлужебныеПроцедурыИФункции

#Область ИспользуютРаспознанныйДокумент

Функция ДублиРаспознанногоДокумента(ДанныеДокумента) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&Ссылка КАК РаспознанныйДокумент,
	|	Дубль.Ссылка КАК ДубльДокумента,
	|	Дубль.ПометкаУдаления КАК ПометкаУдаления,
	|	Дубль.Статус КАК Статус,
	|	Дубль.ТипДокумента КАК ТипДокумента,
	|	Дубль.НомерДокумента КАК НомерДокумента,
	|	Дубль.ДатаДокумента КАК ДатаДокумента
	|ИЗ
	|	Документ.РаспознанныйДокумент КАК Дубль
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РаспознанныйДокумент КАК РаспознанныйДокумент
	|		ПО (РаспознанныйДокумент.Ссылка = &Ссылка)
	|			И (РаспознанныйДокумент.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыСозданныхДокументовРаспознаваниеДокументов.Ошибка))
	|			И Дубль.Ссылка <> РаспознанныйДокумент.Ссылка
	|			И (&ДопУсловие)";
	
	Если ТипЗнч(ДанныеДокумента) = Тип("ДокументСсылка.РаспознанныйДокумент") Тогда
		Запрос.УстановитьПараметр("Ссылка", ДанныеДокумента);
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДопУсловие",
		"Дубль.ТипДокумента = РаспознанныйДокумент.ТипДокумента
		|			И Дубль.Направление = РаспознанныйДокумент.Направление
		|			И Дубль.НомерДокумента = РаспознанныйДокумент.НомерДокумента
		|			И Дубль.ДатаДокумента = РаспознанныйДокумент.ДатаДокумента
		|			И Дубль.Контрагент = РаспознанныйДокумент.Контрагент
		|			И (РаспознанныйДокумент.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
		|			И Дубль.Организация = РаспознанныйДокумент.Организация
		|			И (РаспознанныйДокумент.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
		|			И Дубль.СуммаДокумента = РаспознанныйДокумент.СуммаДокумента
		|			И (НЕ Дубль.ПометкаУдаления)");
	ИначеЕсли ТипЗнч(ДанныеДокумента) = Тип("Структура") Тогда
		Для Каждого ЭлементСтруктуры Из ДанныеДокумента Цикл
			Запрос.УстановитьПараметр(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		КонецЦикла;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДопУсловие",
		"Дубль.ТипДокумента = &ТипДокумента
		|			И Дубль.Направление = &Направление
		|			И Дубль.НомерДокумента = &НомерДокумента
		|			И Дубль.ДатаДокумента = &ДатаДокумента
		|			И Дубль.Контрагент = &Контрагент
		|			И (&Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
		|			И Дубль.Организация = &Организация
		|			И (&Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
		|			И Дубль.СуммаДокумента = &СуммаДокумента
		|			И (НЕ Дубль.ПометкаУдаления)");
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ТаблицаДублей = Результат.Выгрузить();
	
	//Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаДублей);
	Возврат ТаблицаДублей;
	
КонецФункции

Функция КандидатыКомплекта(ДанныеОбязательногоДокумента)
	
	Если ДанныеОбязательногоДокумента.ПометкаУдаления
		Или ДанныеОбязательногоДокумента.Статус <> Перечисления.СтатусыСозданныхДокументовРаспознаваниеДокументов.Новый
		Или ДанныеОбязательногоДокумента.Организация = Справочники.Организации.ПустаяСсылка()
		Или ДанныеОбязательногоДокумента.Контрагент = Справочники.Контрагенты.ПустаяСсылка()
		Или ДанныеОбязательногоДокумента.СуммаДокумента = 0 Тогда
		
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Направление", ДанныеОбязательногоДокумента.Направление);
	Запрос.УстановитьПараметр("ТипДокумента", ДанныеОбязательногоДокумента.ТипДокумента);
	Запрос.УстановитьПараметр("Контрагент", ДанныеОбязательногоДокумента.Контрагент);
	Запрос.УстановитьПараметр("Организация", ДанныеОбязательногоДокумента.Организация);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаспознанныйДокумент.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РаспознанныйДокумент КАК РаспознанныйДокумент
	|ГДЕ
	|	НЕ РаспознанныйДокумент.ПометкаУдаления
	|	И РаспознанныйДокумент.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСозданныхДокументовРаспознаваниеДокументов.Новый)
	|	И РаспознанныйДокумент.ТипДокумента <> &ТипДокумента
	|	И РаспознанныйДокумент.СуммаДокумента <> 0
	|	И РаспознанныйДокумент.Контрагент = &Контрагент
	|	И РаспознанныйДокумент.Организация = &Организация
	|	И РаспознанныйДокумент.Направление = &Направление";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	КандидатыКомплекта = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат КандидатыКомплекта;
	
КонецФункции
 
Функция ВсеДокументыКомплектов(ВыбранныеДокументы)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РаспознанныеДокументы", ВыбранныеДокументы);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаспознанныйДокумент.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РаспознанныйДокумент КАК РаспознанныйДокумент
	|ГДЕ
	|	РаспознанныйДокумент.Ссылка В(&РаспознанныеДокументы)
	|	И РаспознанныйДокумент.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСозданныхДокументовРаспознаваниеДокументов.Новый)
	|	И РаспознанныйДокумент.ТипДокумента <> ЗНАЧЕНИЕ(Перечисление.ТипыДокументовРаспознаваниеДокументов.НеопознанныйДокумент)
	|	И РаспознанныйДокумент.ТипДокумента <> ЗНАЧЕНИЕ(Перечисление.ТипыДокументовРаспознаваниеДокументов.ПустаяСсылка)";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция ДополнитьДанныеДокументов(ВыбранныеДокументы, ОбязательныйДокумент = Неопределено) Экспорт
	
	ТаблицаОшибок = ОшибкиПоДокументам(ВыбранныеДокументы);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВыбранныеДокументы", ВыбранныеДокументы);
	Запрос.УстановитьПараметр("ТаблицаОшибок", ТаблицаОшибок);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОшибок.Ссылка КАК Ссылка,
	|	ТаблицаОшибок.КоличествоОшибок КАК КоличествоОшибок,
	|	ТаблицаОшибок.КоличествоОшибокВТаблицах КАК КоличествоОшибокВТаблицах
	|ПОМЕСТИТЬ ВТ_ТаблицаОшибок
	|ИЗ
	|	&ТаблицаОшибок КАК ТаблицаОшибок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаспознанныйДокументПометкиНаДокументе.Ссылка КАК Ссылка,
	|	КОЛИЧЕСТВО(РаспознанныйДокументПометкиНаДокументе.ТипПометки) КАК Печатей
	|ПОМЕСТИТЬ КоличествоПечатей
	|ИЗ
	|	Документ.РаспознанныйДокумент.ПометкиНаДокументе КАК РаспознанныйДокументПометкиНаДокументе
	|ГДЕ
	|	РаспознанныйДокументПометкиНаДокументе.Ссылка В(&ВыбранныеДокументы)
	|	И РаспознанныйДокументПометкиНаДокументе.ТипПометки = ЗНАЧЕНИЕ(Перечисление.ТипыПометокРаспознанногоДокумента.Печать)
	|
	|СГРУППИРОВАТЬ ПО
	|	РаспознанныйДокументПометкиНаДокументе.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаспознанныйДокументРеквизитыТабличныхЧастей.Ссылка КАК Ссылка,
	|	МАКСИМУМ(РаспознанныйДокументРеквизитыТабличныхЧастей.НомерСтрокиТЧ) КАК СтрокТЧ
	|ПОМЕСТИТЬ КоличествоСтрокТЧ
	|ИЗ
	|	Документ.РаспознанныйДокумент.РеквизитыТабличныхЧастей КАК РаспознанныйДокументРеквизитыТабличныхЧастей
	|ГДЕ
	|	РаспознанныйДокументРеквизитыТабличныхЧастей.Ссылка В(&ВыбранныеДокументы)
	|	И НЕ РаспознанныйДокументРеквизитыТабличныхЧастей.СтрокаУдалена
	|
	|СГРУППИРОВАТЬ ПО
	|	РаспознанныйДокументРеквизитыТабличныхЧастей.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаспознанныйДокумент.Ссылка КАК Ссылка,
	|	ИСТИНА КАК МожетВходитьВКомплект,
	|	РаспознанныйДокумент.ПометкаУдаления КАК ПометкаУдаления,
	|	0 КАК СтатусРаспознавания,
	|	РаспознанныйДокумент.Статус КАК Статус,
	|	0 КАК НаправлениеДокумента,
	|	РаспознанныйДокумент.Направление КАК Направление,
	|	РаспознанныйДокумент.ТипДокумента КАК ТипДокумента,
	|	РаспознанныйДокумент.ВариантОбработки КАК ВариантОбработки,
	|	РаспознанныйДокумент.Наименование КАК Наименование,
	|	РаспознанныйДокумент.Организация КАК Организация,
	|	РаспознанныйДокумент.Контрагент КАК Контрагент,
	|	РаспознанныйДокумент.СуммаДокумента КАК СуммаДокумента,
	|	РаспознанныйДокумент.ДатаДокумента КАК ДатаДокумента,
	|	РаспознанныйДокумент.НомерДокумента КАК НомерДокумента,
	|	ВТ_ТаблицаОшибок.КоличествоОшибок КАК ОшибокВсего,
	|	ВТ_ТаблицаОшибок.КоличествоОшибокВТаблицах КАК ОшибокТЧ
	|ПОМЕСТИТЬ ВсеДокументы
	|ИЗ
	|	Документ.РаспознанныйДокумент КАК РаспознанныйДокумент
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаОшибок КАК ВТ_ТаблицаОшибок
	|		ПО РаспознанныйДокумент.Ссылка = ВТ_ТаблицаОшибок.Ссылка
	|ГДЕ
	|	РаспознанныйДокумент.Ссылка В(&ВыбранныеДокументы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(РаспознанныйДокумент.Ссылка) КАК Ссылка,
	|	РаспознанныйДокумент.МожетВходитьВКомплект КАК МожетВходитьВКомплект,
	|	РаспознанныйДокумент.ПометкаУдаления КАК ПометкаУдаления,
	|	0 КАК СтатусРаспознавания,
	|	РаспознанныйДокумент.Статус КАК Статус,
	|	0 КАК НаправлениеДокумента,
	|	РаспознанныйДокумент.Направление КАК Направление,
	|	РаспознанныйДокумент.ТипДокумента КАК ТипДокумента,
	|	РаспознанныйДокумент.ВариантОбработки КАК ВариантОбработки,
	|	РаспознанныйДокумент.Наименование КАК Наименование,
	|	РаспознанныйДокумент.Организация КАК Организация,
	|	РаспознанныйДокумент.Контрагент КАК Контрагент,
	|	РаспознанныйДокумент.СуммаДокумента КАК СуммаДокумента,
	|	РаспознанныйДокумент.ДатаДокумента КАК ДатаДокумента,
	|	РаспознанныйДокумент.НомерДокумента КАК НомерДокумента,
	|	РаспознанныйДокумент.ОшибокВсего КАК ОшибокВсего,
	|	РаспознанныйДокумент.ОшибокТЧ КАК ОшибокТЧ,
	|	ЕСТЬNULL(КоличествоСтрокТЧ.СтрокТЧ, 0) КАК СтрокТЧ,
	|	ЕСТЬNULL(КоличествоПечатей.Печатей, 0) КАК Печатей
	|ИЗ
	|	ВсеДокументы КАК РаспознанныйДокумент
	|		ЛЕВОЕ СОЕДИНЕНИЕ КоличествоПечатей КАК КоличествоПечатей
	|		ПО РаспознанныйДокумент.Ссылка = КоличествоПечатей.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ КоличествоСтрокТЧ КАК КоличествоСтрокТЧ
	|		ПО РаспознанныйДокумент.Ссылка = КоличествоСтрокТЧ.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	РаспознанныйДокумент.МожетВходитьВКомплект,
	|	РаспознанныйДокумент.ПометкаУдаления,
	|	РаспознанныйДокумент.Статус,
	|	РаспознанныйДокумент.Направление,
	|	РаспознанныйДокумент.ТипДокумента,
	|	РаспознанныйДокумент.ВариантОбработки,
	|	РаспознанныйДокумент.Наименование,
	|	РаспознанныйДокумент.Организация,
	|	РаспознанныйДокумент.Контрагент,
	|	РаспознанныйДокумент.СуммаДокумента,
	|	РаспознанныйДокумент.ДатаДокумента,
	|	РаспознанныйДокумент.НомерДокумента,
	|	РаспознанныйДокумент.ОшибокВсего,
	|	РаспознанныйДокумент.ОшибокТЧ,
	|	ЕСТЬNULL(КоличествоСтрокТЧ.СтрокТЧ, 0),
	|	ЕСТЬNULL(КоличествоПечатей.Печатей, 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СуммаДокумента";
	
	Если ОбязательныйДокумент = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"	ИСТИНА КАК МожетВходитьВКомплект,"
		,
		"	ВЫБОР
		|		КОГДА РаспознанныйДокумент.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|				И РаспознанныйДокумент.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|				И РаспознанныйДокумент.СуммаДокумента <> 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК МожетВходитьВКомплект,"
		);
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"УПОРЯДОЧИТЬ ПО
		|	СуммаДокумента"
		,
		"УПОРЯДОЧИТЬ ПО
		|	Направление,
		|	Организация,
		|	Контрагент,
		|	СуммаДокумента,
		|	Ссылка"
		);
	КонецЕсли;
	РезультатЗапроса = Запрос.Выполнить();
	
	ОбщаяТаблицаДокументов = РезультатЗапроса.Выгрузить();
	ОбщаяТаблицаДокументов.Колонки.Добавить("НомерКомплекта", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 0, ДопустимыйЗнак.Неотрицательный)));
	ОбщаяТаблицаДокументов.Колонки.Добавить("ТипКомплекта", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(250)));
	
	Для Каждого СтрокаТаблицы Из ОбщаяТаблицаДокументов Цикл
		ДополнитьДанныеДокументовПоСтроке(СтрокаТаблицы);
	КонецЦикла;
	
	ТаблицыДокументовИТипов = Новый ТаблицаЗначений;
	ТаблицыДокументовИТипов.Колонки.Добавить("ТаблицаДокументов"); // может быть таблицей значений или массивом строк таблицы значений
	ТаблицыДокументовИТипов.Колонки.Добавить("ТаблицаПоТипам");
	// Каждая строка из ТаблицыДокументовИТипов содержит
	// - ТаблицаДокументов - это массив строк из ОбщаяТаблицаДокументов (либо сама эта таблица), у которых совпадает
	// Направление, Организация и Контрагент и все три реквизита заполнены, а также СуммаДокумента <> 0.
	// При этом все документы в ВыбранныеДокументы должны иметь статус Новый, поэтому Направление обязательно
	// будет заполнено и дополнительной проверки не нужно. Итого нужно проверить, что "МожетВходитьВКомплект = Истина"
	// - ТаблицаПоТипам - см. ПустаяТаблицаПоТипам()
	
	Если ОбязательныйДокумент = Неопределено Тогда
		
		ТекНаправление = Неопределено;
		ТекОрганизация = Неопределено;
		ТекКонтрагент = Неопределено;
		ЭлементТаблицыДокументов = Неопределено;
		НоваяТаблицаПоТипам = Неопределено;
		Для Каждого СтрокаТаблицы Из ОбщаяТаблицаДокументов Цикл
			Если Не СтрокаТаблицы.МожетВходитьВКомплект Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаТаблицы.Контрагент <> ТекКонтрагент
				Или СтрокаТаблицы.Организация <> ТекОрганизация
				Или СтрокаТаблицы.Направление <> ТекНаправление Тогда
				
				Если ЭлементТаблицыДокументов <> Неопределено
					И ЭлементТаблицыДокументов.Количество() > 1 Тогда
					// Одиночные документы не могут образовывать комплекты
					
					СтрокаТаблицыДокументовИТипов = ТаблицыДокументовИТипов.Добавить();
					СтрокаТаблицыДокументовИТипов.ТаблицаДокументов = ЭлементТаблицыДокументов;
					СтрокаТаблицыДокументовИТипов.ТаблицаПоТипам = НоваяТаблицаПоТипам;
				КонецЕсли;
				
				Ид = 0;
				ЭлементТаблицыДокументов = Новый Массив;
				НоваяТаблицаПоТипам = ПустаяТаблицаПоТипам();
				ТекКонтрагент = СтрокаТаблицы.Контрагент;
				ТекОрганизация = СтрокаТаблицы.Организация;
				ТекНаправление = СтрокаТаблицы.Направление;
			КонецЕсли;
			
			ЭлементТаблицыДокументов.Добавить(СтрокаТаблицы);
			
			СтрокаНовойТаблицаПоТипам = НоваяТаблицаПоТипам.Найти(СтрокаТаблицы.ТипДокумента, "ТипДокументов");
			Если СтрокаНовойТаблицаПоТипам = Неопределено Тогда
				СтрокаНовойТаблицаПоТипам = НоваяТаблицаПоТипам.Добавить();
				СтрокаНовойТаблицаПоТипам.ТипДокументов = СтрокаТаблицы.ТипДокумента;
				СтрокаНовойТаблицаПоТипам.ИдентификаторыСтрок = Новый Массив;
			КонецЕсли;
			СтрокаНовойТаблицаПоТипам.ИдентификаторыСтрок.Добавить(Ид);
			Ид = Ид + 1;
		КонецЦикла;
		
		Если ЭлементТаблицыДокументов <> Неопределено
			И ЭлементТаблицыДокументов.Количество() > 1 Тогда
			// Одиночные документы не могут образовывать комплекты
			
			СтрокаТаблицыДокументовИТипов = ТаблицыДокументовИТипов.Добавить();
			СтрокаТаблицыДокументовИТипов.ТаблицаДокументов = ЭлементТаблицыДокументов;
			СтрокаТаблицыДокументовИТипов.ТаблицаПоТипам = НоваяТаблицаПоТипам;
		КонецЕсли;
		
	Иначе
		// Для обязательного документа не важно, какое ОшибокВсего, ОшибокТЧ, СтрокТЧ, Печатей.
		// Он обязательный и в любом случае должен попасть, а вот отборы типа Организация, Контрагент -
		// нужно брать не из ссылки, т.к. значения могут изменить на форме
		ОбязательнаяСтрока = ОбщаяТаблицаДокументов.Вставить(0);
		ЗаполнитьЗначенияСвойств(ОбязательнаяСтрока, ОбязательныйДокумент);
		ОбязательнаяСтрока.ОшибокВсего = 0;
		ОбязательнаяСтрока.ОшибокТЧ = 0;
		ОбязательнаяСтрока.СтрокТЧ = 0;
		ОбязательнаяСтрока.Печатей = 0;
		
		ДополнитьДанныеДокументовПоСтроке(ОбязательнаяСтрока);
		
		// Если есть ОбязательныйДокумент, то у всех строк из ОбщаяТаблицаДокументов совпадают Направление, Организация и Контрагент,
		// поэтому достаточно одной ТаблицаПоТипам
		НоваяТаблицаПоТипам = ПустаяТаблицаПоТипам();
		
		Ид = 0;
		Для Каждого СтрокаТаблицы Из ОбщаяТаблицаДокументов Цикл
			СтрокаНовойТаблицаПоТипам = НоваяТаблицаПоТипам.Найти(СтрокаТаблицы.ТипДокумента, "ТипДокументов");
			Если СтрокаНовойТаблицаПоТипам = Неопределено Тогда
				СтрокаНовойТаблицаПоТипам = НоваяТаблицаПоТипам.Добавить();
				СтрокаНовойТаблицаПоТипам.ТипДокументов = СтрокаТаблицы.ТипДокумента;
				СтрокаНовойТаблицаПоТипам.ИдентификаторыСтрок = Новый Массив;
			КонецЕсли;
			СтрокаНовойТаблицаПоТипам.ИдентификаторыСтрок.Добавить(Ид);
			Ид = Ид + 1;
		КонецЦикла;
		
		СтрокаТаблицыДокументовИТипов = ТаблицыДокументовИТипов.Добавить();
		СтрокаТаблицыДокументовИТипов.ТаблицаДокументов = ОбщаяТаблицаДокументов;
		СтрокаТаблицыДокументовИТипов.ТаблицаПоТипам = НоваяТаблицаПоТипам;
	КонецЕсли;
	
	Возврат Новый Структура("ОбщаяТаблицаДокументов, ТаблицыДокументовИТипов", ОбщаяТаблицаДокументов, ТаблицыДокументовИТипов);
	
КонецФункции

Функция НайтиКомплектныеДокументы(ДанныеОбязательногоДокумента) Экспорт
	
	ОбязательныйДокументВключенВКомплект = Ложь;
	КомплектныеДокументы = Новый Массив;
	
	КандидатыКомплекта = КандидатыКомплекта(ДанныеОбязательногоДокумента);
	Если КандидатыКомплекта.Количество() <> 0 Тогда
		ВсеДанныеДокументов = ДополнитьДанныеДокументов(КандидатыКомплекта, ДанныеОбязательногоДокумента);
		ДанныеКомплекта = НайтиКомплекты(ВсеДанныеДокументов, ДанныеОбязательногоДокумента);
		
		Для Каждого СтрокаКомплектов Из ДанныеКомплекта.ТаблицаКомплектов Цикл
			Если СтрокаКомплектов.Ссылка = ДанныеОбязательногоДокумента.Ссылка Тогда
				ОбязательныйДокументВключенВКомплект = Истина;
			КонецЕсли;
			КомплектныеДокументы.Добавить(СтрокаКомплектов.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
	Если Не ОбязательныйДокументВключенВКомплект Тогда
		КомплектныеДокументы.Добавить(ДанныеОбязательногоДокумента.Ссылка);
	КонецЕсли;
	
	Возврат КомплектныеДокументы;
	
КонецФункции

Функция ПоследнийПеренесенныйКомплект(ТаблицаПоиска) Экспорт
	
	КандидатыКомплекта = ТаблицаПоиска.ВыгрузитьКолонку("Ссылка");
	ВсеДанныеДокументов = ДополнитьДанныеДокументов(КандидатыКомплекта);
	ТаблицаРезультата = НайтиВсеВозможныеКомплекты(ВсеДанныеДокументов);
	
	КлючевыеПоля = "Направление, Организация, Контрагент"; // без СуммаДокумента
	ТаблицаКлючевыхПолей = ТаблицаПоиска.Скопировать(, КлючевыеПоля);
	ТаблицаКлючевыхПолей.Свернуть(КлючевыеПоля);
	
	Если ТаблицаРезультата.Количество() > 0
		И ТаблицаКлючевыхПолей.Количество() > 1 Тогда
		
		//Если формируются принципиально разные комплекты - отличаются ключевые поля поиска комплектов, то оставлять комплект который последним перетащили
		ПодходящиеКомплекты = Новый Массив;
		Для Ид = 0 По ТаблицаРезультата.Количество() - 1 Цикл
			ПодходящиеКомплекты.Добавить(Ид);
		КонецЦикла;
		
		ИдПоиска = ТаблицаПоиска.Количество();
		Пока ИдПоиска > 0 Цикл
			// Проверяем с конца элементы из ТаблицаПоиска - входят ли они в один из найденных комплектов
			ИдПоиска = ИдПоиска - 1;
			
			СтрокаПоискаИзОбщейТаблицы = ВсеДанныеДокументов.ОбщаяТаблицаДокументов.Найти(ТаблицаПоиска[ИдПоиска].Ссылка, "Ссылка");
			
			ОставитьКомплекты = Новый Массив;
			Для Каждого ИдКомплекта Из ПодходящиеКомплекты Цикл
				СтрокаКомплекта = ТаблицаРезультата[ИдКомплекта];
				Если СтрокаКомплекта.СтрокиОбщейТаблицы.Найти(СтрокаПоискаИзОбщейТаблицы) <> Неопределено Тогда
					ОставитьКомплекты.Добавить(ИдКомплекта);
				КонецЕсли;
			КонецЦикла;
			
			Если ОставитьКомплекты.Количество() <> 0 Тогда
				ПодходящиеКомплекты = ОставитьКомплекты;
			КонецЕсли;
			
			Если ПодходящиеКомплекты.Количество() = 1 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПодходящиеКомплекты.Количество() > 0 Тогда
			ИдПоследнегоКомплекта = ПодходящиеКомплекты[0];
		Иначе
			ИдПоследнегоКомплекта = 0;
		КонецЕсли;
	Иначе
		ИдПоследнегоКомплекта = 0;
	КонецЕсли;
	
	Результат = Новый Структура("ДокументыКомплекта, ТипКомплекта");
	
	ДокументыКомплекта = Новый Массив;
	Если ТаблицаРезультата.Количество() <> 0 Тогда
		Для Каждого ЭтаСтрока Из ТаблицаРезультата[ИдПоследнегоКомплекта].СтрокиОбщейТаблицы Цикл
			ДокументыКомплекта.Добавить(ЭтаСтрока.Ссылка);
		КонецЦикла;
		Результат.ТипКомплекта = ТаблицаРезультата[ИдПоследнегоКомплекта].ТипКомплекта;
	КонецЕсли;
	Результат.ДокументыКомплекта = ДокументыКомплекта;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СвязанныеДокументы

// Позволяет получить индекс картинки статуса документа из коллекции КоллекцияСтатусыРаспознаванияДокумента
//
// Параметры:
//  Объект -ДокументОбъект.РаспознанныйДокумент - основной реквизит формы документа с типом ДанныеФормыСтруктура или подходящая Структура
//
// Возвращаемое значение:
//  Число - числовое обозначение статуса документа.
//
Функция СтатусДокументаЧислом(Объект) Экспорт
	
	Если Объект.ПометкаУдаления Тогда
		СтатусДокумента = 0;
	Иначе
		Если Объект.Статус = Перечисления.СтатусыСозданныхДокументовРаспознаваниеДокументов.Ошибка Тогда
			СтатусДокумента = 1;
		ИначеЕсли Объект.Статус = Перечисления.СтатусыСозданныхДокументовРаспознаваниеДокументов.Новый Тогда
			СтатусДокумента = 2;
		ИначеЕсли Объект.Статус = Перечисления.СтатусыСозданныхДокументовРаспознаваниеДокументов.Обработан Тогда
			СтатусДокумента = 4;
		Иначе
			// Пустой Статус (документа нет)
			СтатусДокумента = 3;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтатусДокумента;
	
КонецФункции

#КонецОбласти

#Область Комплекты

Процедура ОбновитьИЗаполнитьСвязанныеИСозданныеДокументы(ПараметрыСоздания, КоличествоСвязанных = 0) Экспорт
	
	ПараметрыСоздания.Вставить("СозданныеДокументы", Новый Соответствие);
	ПараметрыСоздания.Вставить("СвязанныеДокументы", Новый Массив);
	
	КомплектныеДокументы = Новый Массив;
	Для Каждого ДанныеТипа Из ПараметрыСоздания.РаспознанныеДокументыПоТипам Цикл
		КомплектныеДокументы.Добавить(ДанныеТипа.Значение);
	КонецЦикла;
	
	Для Каждого ДанныеТипа Из ПараметрыСоздания.РаспознанныеДокументыПоТипам Цикл
		
		РаспознаваниеДокументовСлужебный.АктуализироватьОбъектыСвязанныеСРаспознаннымДокументом(ДанныеТипа.Значение);
		
		Связанные = РегистрыСведений.СвязанныеОбъектыРаспознаниеДокументов.ВсеСвязанныеДокументы(ДанныеТипа.Значение);
		
		Для Каждого Связанный Из Связанные Цикл
			Если ПараметрыСоздания.СвязанныеДокументы.Найти(Связанный.Ссылка) = Неопределено Тогда
				ПараметрыСоздания.СвязанныеДокументы.Вставить(0, Связанный.Ссылка);
			КонецЕсли;
			
			НовыйСозданный = РаспознаваниеДокументовКомплектыКлиентСервер.СтруктураСозданныхДокументов();
			НовыйСозданный.Ссылка = Связанный.Ссылка;
			НовыйСозданный.СозданПоРаспознанномуДокументу = Не Связанный.ПотенциальныйКандидат;
			НовыйСозданный.ДокументНайден = Истина;
			НовыйСозданный.СоздатьДокумент = Ложь;
			
			ДанныеРаспознанного = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеТипа.Значение, "ИсходноеИзображение, ИмяФайла", Истина);
			АдресКартинки = ПоместитьВоВременноеХранилище(ДанныеРаспознанного.ИсходноеИзображение.Получить());
			НовыйСозданный.СканУжеПрикреплен = РаспознаваниеДокументовСлужебный.СканУжеЕстьУВладельца(ДанныеРаспознанного, НовыйСозданный.Ссылка, АдресКартинки);
			Если Не НовыйСозданный.СканУжеПрикреплен И Не РаспознаваниеДокументовКомплектыВызовСервера.НужноПрикрепитьДополнительныйСкан(
					ПараметрыСоздания.ТипКомплекта,
					ДанныеТипа.Ключ,
					ТипЗнч(Связанный.Ссылка))
				Тогда
				
				НовыйСозданный.СканУжеПрикреплен = Истина;
			КонецЕсли;
			НовыйСозданный.ПрикрепитьСкан = Истина;
			
			ТипСвязанного = ТипЗнч(Связанный.Ссылка);
			ПараметрыСоздания.СозданныеДокументы.Вставить(ТипСвязанного, НовыйСозданный);
		КонецЦикла;
		
		КоличествоСвязанных = КоличествоСвязанных + Связанные.Количество();
		
	КонецЦикла;
	
	ТипыДокументов = РаспознаваниеДокументовКомплектыКлиентСервер.СоздаваемыеДокументыКомплекта(ПараметрыСоздания);
	Для Каждого ТипДокумента Из ТипыДокументов Цикл
		Если ПараметрыСоздания.СозданныеДокументы.Получить(ТипДокумента) = Неопределено Тогда
			НовыйСозданный = РаспознаваниеДокументовКомплектыКлиентСервер.СтруктураСозданныхДокументов();
			НовыйСозданный.ДокументНайден = Ложь;
			НовыйСозданный.СоздатьДокумент = Истина;
			
			НовыйСозданный.СканУжеПрикреплен = Ложь;
			НовыйСозданный.ПрикрепитьСкан = Истина;
			
			ПараметрыСоздания.СозданныеДокументы.Вставить(ТипДокумента, НовыйСозданный);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПустаяТаблицаПоТипам()
	
	ТаблицаПоТипам = Новый ТаблицаЗначений;
	ТаблицаПоТипам.Колонки.Добавить("ТипДокументов", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыДокументовРаспознаваниеДокументов"));
	ТаблицаПоТипам.Колонки.Добавить("ИдентификаторыСтрок", Новый ОписаниеТипов("Массив")); // Ид из ТаблицаПоиска
	
	Возврат ТаблицаПоТипам;
	
КонецФункции

Процедура ДополнитьДанныеДокументовПоСтроке(СтрокаТаблицы) Экспорт
	
	Если СтрокаТаблицы.ПометкаУдаления Тогда
		СтрокаТаблицы.СтатусРаспознавания = 0;
	ИначеЕсли СтрокаТаблицы.Статус = Перечисления.СтатусыСозданныхДокументовРаспознаваниеДокументов.Ошибка Тогда
		СтрокаТаблицы.СтатусРаспознавания = 1;
	ИначеЕсли СтрокаТаблицы.Статус = Перечисления.СтатусыСозданныхДокументовРаспознаваниеДокументов.Новый Тогда
		СтрокаТаблицы.СтатусРаспознавания = 2;
	ИначеЕсли СтрокаТаблицы.Статус = Перечисления.СтатусыСозданныхДокументовРаспознаваниеДокументов.Обработан Тогда
		СтрокаТаблицы.СтатусРаспознавания = 4;
	Иначе
		// Пустой ссылки быть не может
		// СтатусРаспознавания = 3
	КонецЕсли;
	
	Если СтрокаТаблицы.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий Тогда
		СтрокаТаблицы.НаправлениеДокумента = 2;
	ИначеЕсли СтрокаТаблицы.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий Тогда
		СтрокаТаблицы.НаправлениеДокумента = 1;
	КонецЕсли;
	
	СтрокаТаблицы.Наименование = СтрШаблон(НСтр("ru = '%1 № %2'"), СтрокаТаблицы.ТипДокумента, СтрокаТаблицы.НомерДокумента);
	
КонецПроцедуры

Функция НайтиКомплекты(ВсеДанныеДокументов, ДанныеОбязательногоДокумента = Неопределено) Экспорт
	
	ВсеКомплекты = НайтиВсеВозможныеКомплекты(ВсеДанныеДокументов, ДанныеОбязательногоДокумента);
	
	КоличествоКомплектов = 0;
	ТаблицаКомплектов = ВсеДанныеДокументов.ОбщаяТаблицаДокументов.СкопироватьКолонки();
	
	Для Каждого ВозможныйКомплект Из ВсеКомплекты Цикл
		Если КоличествоКомплектов > 0 Тогда
			Для Каждого СтрокаТабДок Из ВозможныйКомплект.СтрокиОбщейТаблицы Цикл
				ЭтоДубль = ЕстьДубльДокументаИзКомплекта(СтрокаТабДок, ТаблицаКомплектов);
				Если ЭтоДубль Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ЭтоДубль Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		КоличествоКомплектов = КоличествоКомплектов + 1;
		
		Для Каждого СтрокаТабДок Из ВозможныйКомплект.СтрокиОбщейТаблицы Цикл
			СтрокаТабДок.НомерКомплекта = КоличествоКомплектов;
			СтрокаТабДок.ТипКомплекта = ВозможныйКомплект.ТипКомплекта;
			
			СтрокаТаблицыКомплектов = ТаблицаКомплектов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыКомплектов, СтрокаТабДок);
		КонецЦикла;
		
		Если ДанныеОбязательногоДокумента <> Неопределено Тогда
			// Поиск возвращает порядок, начиная с самого подходящего комплекта.
			// При наличии ОбязательныйДокумент нам необходим 1 комплект, который и будет самым верхним из подходящих
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Результат = Новый Структура("ТаблицаКомплектов, КоличествоКомплектов", ТаблицаКомплектов, КоличествоКомплектов);
	
	Возврат Результат;
	
КонецФункции

Функция НайтиВсеВозможныеКомплекты(ВсеДанныеДокументов, ДанныеОбязательногоДокумента = Неопределено)
	
	ВсеДокументыДляОбхода = Новый Массив;
	// Массив идентификаторов из ТаблицаДокументов, которые нужно обойти в ширину
	
	ДокументыДляОбходаВШирину = Новый Массив;
	// Массив идентификаторов из ТаблицаДокументов, которые уже были пройдены на предыдущем шаге
	
	ВсеГруппыПо2Документа = Новый Массив;
	ВсеГруппыПо3Документа = Новый Массив;
	
	// Критерии предпочтения документов в комплекте.
	// Если можем сформировать комплект из разных комбинаций документов, то предпочтение отдаем документам:
	//	1. С бОльшим количество документов в комплекте
	//	2. С меньшей Разностью дат
	//	3. С бОльшим количеством печатей
	//	4. С бОльшим количество строк в табличной части
	//	5. С меньшим количеством ошибок в табличной части
	//	6. С меньшим количеством ошибок по документу в целом
	//	7. Которые последними перетащили
	
	ТаблицаРезультата = Новый ТаблицаЗначений;
	ТаблицаРезультата.Колонки.Добавить("ИдентификаторыГрупп", Новый ОписаниеТипов("Массив")); // Идентификатор из ВсеГруппыДокументов
	ТаблицаРезультата.Колонки.Добавить("ИдентификаторыСтрок", Новый ОписаниеТипов("Массив")); // Идентификатор из ТаблицаПоиска
	ТаблицаРезультата.Колонки.Добавить("СтрокиОбщейТаблицы", Новый ОписаниеТипов("Массив")); // Сами строки документов из ОбщаяТаблицаДокументов
	
	ТаблицаРезультата.Колонки.Добавить("ДокументовВКомплекте", Новый ОписаниеТипов("Число"));
	ТаблицаРезультата.Колонки.Добавить("РазностьДат", Новый ОписаниеТипов("Число"));
	ТаблицаРезультата.Колонки.Добавить("Печатей", Новый ОписаниеТипов("Число"));
	ТаблицаРезультата.Колонки.Добавить("СтрокТЧ", Новый ОписаниеТипов("Число"));
	ТаблицаРезультата.Колонки.Добавить("ОшибокТЧ", Новый ОписаниеТипов("Число"));
	ТаблицаРезультата.Колонки.Добавить("ОшибокВсего", Новый ОписаниеТипов("Число"));
	ТаблицаРезультата.Колонки.Добавить("ТипКомплекта", Новый ОписаниеТипов("Строка"));
	
	Для Каждого СтрокаТаблицыДокументовИТипов Из ВсеДанныеДокументов.ТаблицыДокументовИТипов Цикл
		
		ТаблицаДокументов = СтрокаТаблицыДокументовИТипов.ТаблицаДокументов;
		ТаблицаПоТипам = СтрокаТаблицыДокументовИТипов.ТаблицаПоТипам;
		
		ВсеДокументыДляОбхода.Очистить();
		ДокументыДляОбходаВШирину.Очистить();
		
		Если ДанныеОбязательногоДокумента = Неопределено Тогда
			Для Ид = 0 По ТаблицаДокументов.Количество() - 1 Цикл
				ВсеДокументыДляОбхода.Добавить(Ид);
			КонецЦикла;
		Иначе
			// Обязательный документ всегда будет на 0 позиции
			ВсеДокументыДляОбхода.Добавить(0);
		КонецЕсли;
		
		// Функция НайтиГруппыКомплектов ищет группы (пары, тройки и т.д.) документов для ТекущегоДокумента, т.е.
		// этот документ обязательно должен входить в группу, а значит в него не могут входить докуемнты того же типа.
		// Поэтому можно подготовить Х = ТаблицаПоТипам.Количество() таблиц, каждая их которых не будет содержать данных по 
		// определенному типу.
		КороткиеТаблицыПоТипам = Новый Соответствие;
		Ид = 0;
		Пока Ид < ТаблицаПоТипам.Количество() Цикл
			УдаляемыйТип = ТаблицаПоТипам[Ид].ТипДокументов;
			ТекущаяТаблицаПоТипам = ТаблицаПоТипам.Скопировать();
			ТекущаяТаблицаПоТипам.Удалить(Ид);
			
			КороткиеТаблицыПоТипам.Вставить(УдаляемыйТип, ТекущаяТаблицаПоТипам);
			Ид = Ид + 1;
		КонецЦикла;
		
		Для Каждого ИдТекущегоДокумента Из ВсеДокументыДляОбхода Цикл
			Если ДокументыДляОбходаВШирину.Найти(ИдТекущегоДокумента) = Неопределено Тогда
				// Запускаем новый обход в ширину
				ДокументыДляОбходаВШирину.Добавить(ИдТекущегоДокумента);
			Иначе
				Продолжить;
			КонецЕсли;
			
			ВсеГруппыПо2Документа.Очистить();
			ВсеГруппыПо3Документа.Очистить();
			
			Ид = ДокументыДляОбходаВШирину.Количество() - 1;
			Пока Ид < ДокументыДляОбходаВШирину.Количество() Цикл
				
				ИдДокументаОбхода = ДокументыДляОбходаВШирину[Ид];
				ТипДокументаОбхода = ТаблицаДокументов[ИдДокументаОбхода].ТипДокумента;
				ТекущаяТаблицаПоТипам = КороткиеТаблицыПоТипам.Получить(ТипДокументаОбхода);
				
				ГруппыПо2Документа = НайтиГруппыДляКомплектов(2, ТаблицаДокументов, ТекущаяТаблицаПоТипам, ИдДокументаОбхода);
				ГруппыПо3Документа = НайтиГруппыДляКомплектов(3, ТаблицаДокументов, ТекущаяТаблицаПоТипам, ИдДокументаОбхода);
				
				Для Каждого ЭтаГруппа Из ГруппыПо2Документа Цикл
					Для Каждого ИдДокумента Из ЭтаГруппа Цикл
						Если ДокументыДляОбходаВШирину.Найти(ИдДокумента) = Неопределено Тогда
							СтрокаТаблицы = ТаблицаДокументов[ИдДокумента];
							Если ЗначениеЗаполнено(СтрокаТаблицы.Контрагент)
								И ЗначениеЗаполнено(СтрокаТаблицы.Организация)
								И ЗначениеЗаполнено(СтрокаТаблицы.СуммаДокумента) Тогда
							
								ДокументыДляОбходаВШирину.Добавить(ИдДокумента);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					ВсеГруппыПо2Документа.Добавить(ЭтаГруппа);
				КонецЦикла;
				
				Для Каждого ЭтаГруппа Из ГруппыПо3Документа Цикл
					Для Каждого ИдДокумента Из ЭтаГруппа Цикл
						Если ДокументыДляОбходаВШирину.Найти(ИдДокумента) = Неопределено Тогда
							СтрокаТаблицы = ТаблицаДокументов[ИдДокумента];
							Если ЗначениеЗаполнено(СтрокаТаблицы.Контрагент)
								И ЗначениеЗаполнено(СтрокаТаблицы.Организация)
								И ЗначениеЗаполнено(СтрокаТаблицы.СуммаДокумента) Тогда
								
								ДокументыДляОбходаВШирину.Добавить(ИдДокумента);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					ВсеГруппыПо3Документа.Добавить(ЭтаГруппа);
				КонецЦикла;
				
				// ИдДокументаОбхода - этот документ пройден, для него найдены все пары и тройки, поэтому его можно удалить
				// из КороткиеТаблицыПоТипам, чтобы не было повторений вроде пар: (0, 1) = (1, 0)
				Для Каждого КороткаяТаблица Из КороткиеТаблицыПоТипам Цикл
					Если КороткаяТаблица.Ключ = ТипДокументаОбхода Тогда
						Продолжить;
					КонецЕсли;
					Для Каждого СтрокаТипа Из КороткаяТаблица.Значение Цикл
						Если СтрокаТипа.ТипДокументов = ТипДокументаОбхода Тогда
							ИдДокументаОбходаВМассиве = СтрокаТипа.ИдентификаторыСтрок.Найти(ИдДокументаОбхода);
							Если ИдДокументаОбходаВМассиве <> Неопределено Тогда
								СтрокаТипа.ИдентификаторыСтрок.Удалить(ИдДокументаОбходаВМассиве);
								
								Если СтрокаТипа.ИдентификаторыСтрок.Количество() = 0 Тогда
									// Если в типе не осталось документов, то его нужно удалить из всех КороткиеТаблицыПоТипам
									Для Каждого ЭтаКороткаяТаблица Из КороткиеТаблицыПоТипам Цикл
										Если ЭтаКороткаяТаблица.Ключ = ТипДокументаОбхода Тогда
											// если Ключ = ТипДокументаОбхода, то в короткой таблице нет этого ТипДокументаОбхода
											Продолжить;
										КонецЕсли;
										Для Каждого ЭтаСтрокаТипа Из ЭтаКороткаяТаблица.Значение Цикл
											Если ЭтаСтрокаТипа.ТипДокументов = ТипДокументаОбхода Тогда
												ЭтаКороткаяТаблица.Значение.Удалить(ЭтаСтрокаТипа);
												Прервать;
											КонецЕсли;
										КонецЦикла;
									КонецЦикла;
								КонецЕсли;
							КонецЕсли;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					// Всегда нужно помнить, что в соответствии хранится указатель на массив, т.е.
					// При удалении в одном из соответствий КороткиеТаблицыПоТипам оно исчезнет во всех + в исходной ТаблицаПоТипам
					Прервать;
				КонецЦикла;
				
				Ид = Ид + 1;
			КонецЦикла;
			
			// Объединим все пары, тройки и т.д.
			Для Каждого ЭтаГруппа Из ВсеГруппыПо2Документа Цикл
				ВсеГруппыПо3Документа.Добавить(ЭтаГруппа);
			КонецЦикла;
			ВсеГруппыДокументов = ВсеГруппыПо3Документа;
			
			СформироватьКомплектыИзСвязанных(ТаблицаДокументов, ВсеГруппыДокументов, ТаблицаРезультата);
			
		КонецЦикла;
	КонецЦикла;
	
	Если ДанныеОбязательногоДокумента <> Неопределено Тогда
		// Нужно удалить комплекты, куда не входит обязательный документ
		ИдКомплекта = ТаблицаРезультата.Количество();
		Пока ИдКомплекта > 0 Цикл
			ИдКомплекта = ИдКомплекта - 1;
			//обязательный документ всегда имеет индекс 0
			Если ТаблицаРезультата[ИдКомплекта].ИдентификаторыСтрок.Найти(0) = Неопределено Тогда
				ТаблицаРезультата.Удалить(ИдКомплекта);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаРезультата.Сортировать("ДокументовВКомплекте Убыв, Печатей Убыв, СтрокТЧ Убыв, ОшибокТЧ, ОшибокВсего");
	
	Возврат ТаблицаРезультата;
	
КонецФункции

Процедура СформироватьКомплектыИзСвязанных(ТаблицаДокументов, ВсеГруппыДокументов, ТаблицаРезультата)
	
	// Попытаемся максимально расширить все группы
	// фактически сделаем перебор сочетаний из Н по К, где Н = ВсеГруппыДокументов.Количество(), К = 2, но
	// при последовательном переборе i-ой, а затем j-ой пары будем делать следующее:
	// 1 - Как только берем новую i-ую группу, то сразу записываем ее в ТаблицаРезультата
	// 2 - Если i-ую группу можно расширить при помощи j-ой группы, то объединенную группу записываем ее в ТаблицаРезультата, а
	// при проверке следующей при помощи j-ой группы выполняем попытки расширения не только i-ой группы, но и всех групп, которые
	// ранее были расширены из i-ой группы
	
	МаксИдГруппы = ВсеГруппыДокументов.Количество() - 1;
	
	РасширенныеГруппы = Новый Соответствие;
	// Содержит список расширенных групп для i-ой группы.
	// Ключ - индекс исходной группы в массиве ВсеГруппыДокументов
	// Значение - массив индексов расширенной группы в ТаблицаРезультата
	
	ИдГруппы1 = -1;
	Пока ИдГруппы1 < МаксИдГруппы Цикл
		ИдГруппы1 = ИдГруппы1 + 1;
		
		// берем новую группу и записываем ее в ТаблицаРезультата
		ДобавитьКомплект(ТаблицаДокументов, ИдГруппы1, ВсеГруппыДокументов[ИдГруппы1], ТаблицаРезультата);
		ИдТаблицаРезультатаГруппы1 = ТаблицаРезультата.Количество() - 1;
		
		ИдГруппы2 = ИдГруппы1;
		Пока ИдГруппы2 < МаксИдГруппы Цикл
			ИдГруппы2 = ИдГруппы2 + 1;
			
			МассивИд = КакимиДокументамиИзГруппы2МожноРасширитьГруппу1(
				ТаблицаДокументов,
				ВсеГруппыДокументов[ИдГруппы1],
				ВсеГруппыДокументов[ИдГруппы2]
				);
			Если МассивИд.Количество() <> 0 Тогда
				// Значит можно расширить и нужно сначала попробовать расширить все ранее РасширенныеГруппы
				
				Если РасширенныеГруппы[ИдГруппы1] = Неопределено Тогда
					РасширенныеГруппы[ИдГруппы1] = Новый Массив;
				КонецЕсли;
				
				ИдРасшГруппы = РасширенныеГруппы[ИдГруппы1].Количество();
				Пока ИдРасшГруппы >= 0 Цикл
					ИдРасшГруппы = ИдРасшГруппы - 1;
					Если ИдРасшГруппы = -1 Тогда
						// Когда прошли все расширенные группы 1 нужно сделать то же самое с исходгой группой 1
						ИдТаблицаРезультата = ИдТаблицаРезультатаГруппы1;
						МассивИдРасш = МассивИд;
					Иначе
						ИдТаблицаРезультата = РасширенныеГруппы[ИдГруппы1][ИдРасшГруппы];
						// Чтобы комплект У, состоящий из нескольких групп Х можно было расширить на Группа2
						// нужно, чтобы каждую группу Х из комплекта У можно было расширить на Группа2.
						Если ТаблицаРезультата[ИдТаблицаРезультата].ИдентификаторыГрупп.Количество() = 1 Тогда
							
							МассивИдРасш = КакимиДокументамиИзГруппы2МожноРасширитьГруппу1(
								ТаблицаДокументов,
								ТаблицаРезультата[ИдТаблицаРезультата].ИдентификаторыСтрок,
								ВсеГруппыДокументов[ИдГруппы2]
							);
						Иначе
							
							МассивИдРасш = Неопределено;
							Для Каждого ИдГруппыХ Из ТаблицаРезультата[ИдТаблицаРезультата].ИдентификаторыГрупп Цикл
								МассивИдРасшВр = КакимиДокументамиИзГруппы2МожноРасширитьГруппу1(
									ТаблицаДокументов,
									ВсеГруппыДокументов[ИдГруппыХ],
									ВсеГруппыДокументов[ИдГруппы2]
								);
								Если МассивИдРасш = Неопределено Тогда
									МассивИдРасш = МассивИдРасшВр;
								Иначе
									Если Не ВсеЭлементыМассивовСовпадают(МассивИдРасш, МассивИдРасшВр) Тогда
										МассивИдРасш.Очистить();
										Прервать;
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
					
					Если МассивИдРасш.Количество() <> 0 Тогда
						РасшИдентификаторыГрупп = СкопироватьМассив(ТаблицаРезультата[ИдТаблицаРезультата].ИдентификаторыГрупп);
						РасшИдентификаторыГрупп.Добавить(ИдГруппы2);
						
						РасшИдентификаторыСтрок = СкопироватьМассив(ТаблицаРезультата[ИдТаблицаРезультата].ИдентификаторыСтрок);
						Для Каждого ИдРасш Из МассивИдРасш Цикл
							РасшИдентификаторыСтрок.Добавить(ИдРасш);
						КонецЦикла;
						
						ПроверитьИДобавитьКомплект(ТаблицаДокументов, РасшИдентификаторыГрупп, РасшИдентификаторыСтрок, ТаблицаРезультата);
						
						// Смогли расширить одну из групп, поэтому должны дополнить РасширенныеГруппы
						ИдТаблицаРезультатаРасшГруппы = ТаблицаРезультата.Количество() - 1;
						Для Каждого ЭтотИдентификаторГруппы Из РасшИдентификаторыГрупп Цикл
							Если РасширенныеГруппы[ЭтотИдентификаторГруппы] = Неопределено Тогда
								РасширенныеГруппы[ЭтотИдентификаторГруппы] = Новый Массив;
							КонецЕсли;
							РасширенныеГруппы[ЭтотИдентификаторГруппы].Добавить(ИдТаблицаРезультатаРасшГруппы);
						КонецЦикла;
						
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла; // Пока ИдГруппы2 < МаксИдГруппы Цикл
		
	КонецЦикла; // Пока ИдГруппы1 < МаксИдГруппы Цикл
	
КонецПроцедуры

Функция КакимиДокументамиИзГруппы2МожноРасширитьГруппу1(ТаблицаДокументов, Группа1, Группа2)
	
	// Чтобы Группа1 можно было расширить на Группа2 нужно:
	// 1 - проверить, что нет пересечения по типам
	// 2 - проверить, что есть как минимум 1 общий документ и 1 новый
	// 3 - для всех новых документов выполнить проверки совместимости с не общими документами
	
	ДублиПоТипам = Ложь;
	ВсеТипы = Новый Соответствие;
	Для Каждого ИдДокумента Из Группа1 Цикл
		ВсеТипы.Вставить(ТаблицаДокументов[ИдДокумента].ТипДокумента, Истина);
	КонецЦикла;
	
	ОбщиеДокументы = Новый Массив;
	НовыеДокументы = Новый Массив;
	Для Каждого ИдДокумента Из Группа2 Цикл
		Если Группа1.Найти(ИдДокумента) = Неопределено Тогда
			// Новый документ
			Если ВсеТипы.Получить(ТаблицаДокументов[ИдДокумента].ТипДокумента) <> Неопределено Тогда
				// Такой тип уже был
				ДублиПоТипам = Истина;
				Прервать;
			КонецЕсли;
			ВсеТипы.Вставить(ТаблицаДокументов[ИдДокумента].ТипДокумента, Истина);
			НовыеДокументы.Добавить(ИдДокумента);
		Иначе
			// Общий документ
			ОбщиеДокументы.Добавить(ИдДокумента);
		КонецЕсли;
	КонецЦикла;
	
	Если ДублиПоТипам
		Или ОбщиеДокументы.Количество() = 0
		Или НовыеДокументы.Количество() = 0 Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	МожноРасширить = Истина;
	
	СтарыеДокументы = Новый Массив;
	Для Каждого ИдДокумента Из Группа1 Цикл
		Если ОбщиеДокументы.Найти(ИдДокумента) = Неопределено Тогда
			СтарыеДокументы.Добавить(ИдДокумента);
		КонецЕсли;
	КонецЦикла;
	
	// Для документов Торг12, Акт, СФ, Счет есть только 2 варианта:
	// - когда СтарыеДокументы.Количество() + НовыеДокументы.Количество() = 2
	//   и тогда нужно просто проверить на совместимость типов и проверку по сумма этой двойки
	// - когда СтарыеДокументы.Количество() + НовыеДокументы.Количество() = 3
	//   и тогда нужно просто проверить на совместимость типов и проверку по сумма этой двойки
	
	// При добавлении новых типов проверку нужно будет усложнять!
	
	
	// расширим массив СтарыеДокументы еще и новыми документами
	Для Каждого ИдДокумента Из НовыеДокументы Цикл
		СтарыеДокументы.Добавить(ИдДокумента);
	КонецЦикла;
	
	ДанныеДляПроверки = Новый Массив;
	ТипыДляПроверкиКомплектности = Новый Массив;
	Для Каждого ИдДокумента Из СтарыеДокументы Цикл
		ДанныеДляПроверки.Добавить(ТаблицаДокументов[ИдДокумента]);
		ТипыДляПроверкиКомплектности.Добавить(ТаблицаДокументов[ИдДокумента].ТипДокумента);
	КонецЦикла;
	
	Если Не ЕстьПравилоСравненияДляТипов(ТипыДляПроверкиКомплектности) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	// Тут не нужно делать проверку "СовпадаютКонтрагентОрганизацияНаправление", т.к.
	// Группа1 и Группа2 должны иметь общий документ, а значит во всех остальных документах
	// должны совпадать Контрагент, Организация и Направление
	
	ПравилаСравнения = ПолучитьПравилаСравнения(ДанныеДляПроверки, СтарыеДокументы.Количество());
	РезультатПроверки = ВыполнитьПроверку(ДанныеДляПроверки, ПравилаСравнения);
	
	Если РезультатПроверки.Выполнена Тогда
		Возврат НовыеДокументы;
	Иначе
		Возврат Новый Массив;
	КонецЕсли;
	
КонецФункции

Процедура ПроверитьИДобавитьКомплект(ТаблицаДокументов, ИдентификаторыГрупп, ИдентификаторыСтрок, ТаблицаРезультата)
	
	НовыеСтрокиОбщейТаблицы = Новый Массив;
	Для Каждого ИдСтроки Из ИдентификаторыСтрок Цикл
		НовыеСтрокиОбщейТаблицы.Добавить(ТаблицаДокументов[ИдСтроки]);
	КонецЦикла;
	
	// Сначала проверим, есть ли строка с такими СтрокиОбщейТаблицы в ТаблицаРезультата.
	Для Каждого СтрокаРезультата Из ТаблицаРезультата Цикл
		Если ВсеЭлементыМассивовСовпадают(СтрокаРезультата.СтрокиОбщейТаблицы, НовыеСтрокиОбщейТаблицы) Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	ДобавитьКомплект(ТаблицаДокументов, ИдентификаторыГрупп, ИдентификаторыСтрок, ТаблицаРезультата);
	
КонецПроцедуры

Процедура ДобавитьКомплект(ТаблицаДокументов, ИдентификаторыГрупп, ИдентификаторыСтрок, ТаблицаРезультата)
	
	К = ИдентификаторыСтрок.Количество();
	
	СтрокаРезультата = ТаблицаРезультата.Добавить();
	Если ТипЗнч(ИдентификаторыГрупп) = Тип("Массив") Тогда
		СтрокаРезультата.ИдентификаторыГрупп = ИдентификаторыГрупп;
	ИначеЕсли ТипЗнч(ИдентификаторыГрупп) = Тип("Число") Тогда
		СтрокаРезультата.ИдентификаторыГрупп.Добавить(ИдентификаторыГрупп);
	КонецЕсли;
	СтрокаРезультата.ИдентификаторыСтрок = ИдентификаторыСтрок;
	СтрокаРезультата.ДокументовВКомплекте = К;
	
	// РазностьДат - разность между наибольшей и наименьшей датой среди всех документов
	МинДата = ТаблицаДокументов[ИдентификаторыСтрок[0]].ДатаДокумента;
	МаксДата = МинДата;
	
	ВсеТипыДокументов = Новый Массив;
	Для Каждого ИдСтроки Из ИдентификаторыСтрок Цикл
		СтрокаРезультата.СтрокиОбщейТаблицы.Добавить(ТаблицаДокументов[ИдСтроки]);
		
		Если МинДата > ТаблицаДокументов[ИдСтроки].ДатаДокумента Тогда
			МинДата = ТаблицаДокументов[ИдСтроки].ДатаДокумента;
		ИначеЕсли МаксДата < ТаблицаДокументов[ИдСтроки].ДатаДокумента Тогда
			МаксДата = ТаблицаДокументов[ИдСтроки].ДатаДокумента;
		КонецЕсли;
		ВсеТипыДокументов.Добавить(ТаблицаДокументов[ИдСтроки].ТипДокумента);
		
		СтрокаРезультата.Печатей = СтрокаРезультата.Печатей + ТаблицаДокументов[ИдСтроки].Печатей;
		СтрокаРезультата.СтрокТЧ = СтрокаРезультата.СтрокТЧ + ТаблицаДокументов[ИдСтроки].СтрокТЧ;
		СтрокаРезультата.ОшибокТЧ = СтрокаРезультата.ОшибокТЧ + ТаблицаДокументов[ИдСтроки].ОшибокТЧ;
		СтрокаРезультата.ОшибокВсего = СтрокаРезультата.ОшибокВсего + ТаблицаДокументов[ИдСтроки].ОшибокВсего;
	КонецЦикла;
	СтрокаРезультата.РазностьДат = (МаксДата - МинДата) / 86400;
	СтрокаРезультата.ТипКомплекта = СформироватьТипКомплекта(ВсеТипыДокументов);
	
КонецПроцедуры

Функция СформироватьТипКомплекта(ЭлементыОбхода, Вариант = "ПоМассивуТипов") Экспорт
	
	Список = Новый СписокЗначений;
	Если Вариант = "ПоМассивуТипов" Тогда
		Для Каждого ТипДокумента Из ЭлементыОбхода Цикл
			Список.Добавить(XMLСтрока(ТипДокумента));
		КонецЦикла;
	ИначеЕсли Вариант = "ПоТаблице" Тогда
		Для Каждого СтрокаТаблицы Из ЭлементыОбхода Цикл
			Список.Добавить(XMLСтрока(СтрокаТаблицы.ТипДокумента));
		КонецЦикла;
	КонецЕсли;
	Список.СортироватьПоЗначению();
	
	Результат = "";
	Для Каждого ЭлементСписка Из Список Цикл
		Результат = Результат + ЭлементСписка.Значение;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ВыполнитьПроверку(ПроверяемыеДокументы, ВсеПравилаСравнения)
	
	Результат = Новый Структура("Выполнена, ДосрочныйВыход", Истина, Ложь);
	
	Если ПроверяемыеДокументы.Количество() > 2 Тогда
		СуммыПоТипам = Новый Соответствие;
		Для Каждого ЭтаСтрока Из ПроверяемыеДокументы Цикл
			СуммыПоТипам.Вставить(ЭтаСтрока.ТипДокумента, ЭтаСтрока.СуммаДокумента);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ИмяПравила Из ВсеПравилаСравнения Цикл
		
		Если ИмяПравила = "Для2РавнаСуммаДокумента" Тогда
			Результат.Выполнена = (ПроверяемыеДокументы[0].СуммаДокумента = ПроверяемыеДокументы[1].СуммаДокумента);
			// обход идет от большей суммы к меньшей, поэтому:
			Результат.Вставить("ДосрочныйВыход", (ПроверяемыеДокументы[0].СуммаДокумента > ПроверяемыеДокументы[1].СуммаДокумента));
			
		ИначеЕсли ИмяПравила = "Для2РавнаСуммаНомерДатаДокумента" Тогда
			Результат.Выполнена = (ПроверяемыеДокументы[0].СуммаДокумента = ПроверяемыеДокументы[1].СуммаДокумента
				И ПроверяемыеДокументы[0].НомерДокумента = ПроверяемыеДокументы[1].НомерДокумента
				И ПроверяемыеДокументы[0].ДатаДокумента = ПроверяемыеДокументы[1].ДатаДокумента
			);
			Результат.Вставить("ДосрочныйВыход", Ложь);
			
		ИначеЕсли ИмяПравила = "СуммаДокументаТорг12+СуммаДокументаАкт=СуммаДокументаСФ" Тогда
			
			СуммаДокументаТорг12 = СуммыПоТипам.Получить(Перечисления.ТипыДокументовРаспознаваниеДокументов.ТОРГ12);
			СуммаДокументаАкт = СуммыПоТипам.Получить(Перечисления.ТипыДокументовРаспознаваниеДокументов.АктОбОказанииУслуг);
			СуммаДокументаСФ = СуммыПоТипам.Получить(Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетФактура);
			
			Если СуммаДокументаТорг12 = Неопределено
				Или СуммаДокументаАкт = Неопределено
				Или СуммаДокументаСФ = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Результат.Выполнена = (СуммаДокументаТорг12 + СуммаДокументаАкт = СуммаДокументаСФ);
			
			// перебор идет именно по колонке К-1, т.е. для трех документов = 2
			Если ПроверяемыеДокументы[2].ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетФактура Тогда
				// Перебор идет по СФ в сторону уменьшения Суммы, поэтому:
				Результат.Вставить("ДосрочныйВыход", (СуммаДокументаТорг12 + СуммаДокументаАкт > СуммаДокументаСФ));
			Иначе
				Результат.Вставить("ДосрочныйВыход", (СуммаДокументаТорг12 + СуммаДокументаАкт < СуммаДокументаСФ));
			КонецЕсли;
			
			Если Не Результат.Выполнена Тогда
				Прервать;
			КонецЕсли;
			
		ИначеЕсли ИмяПравила = "СуммаДокументаТорг12+СуммаДокументаАкт=СуммаДокументаСчетНаОплату" Тогда
			
			СуммаДокументаТорг12 = СуммыПоТипам.Получить(Перечисления.ТипыДокументовРаспознаваниеДокументов.ТОРГ12);
			СуммаДокументаАкт = СуммыПоТипам.Получить(Перечисления.ТипыДокументовРаспознаваниеДокументов.АктОбОказанииУслуг);
			СуммаДокументаУПД = СуммыПоТипам.Получить(Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетНаОплату);
			
			Если СуммаДокументаТорг12 = Неопределено
				Или СуммаДокументаАкт = Неопределено
				Или СуммаДокументаУПД = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Результат.Выполнена = (СуммаДокументаТорг12 + СуммаДокументаАкт = СуммаДокументаУПД);
			
			Если ПроверяемыеДокументы[2].ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетНаОплату Тогда
				// Перебор идет по СчетНаОплату в сторону уменьшения Суммы, поэтому:
				Результат.Вставить("ДосрочныйВыход", (СуммаДокументаТорг12 + СуммаДокументаАкт > СуммаДокументаУПД));
			Иначе
				Результат.Вставить("ДосрочныйВыход", (СуммаДокументаТорг12 + СуммаДокументаАкт < СуммаДокументаУПД));
			КонецЕсли;
			
			Если Не Результат.Выполнена Тогда
				Прервать;
			КонецЕсли;
			
		ИначеЕсли ИмяПравила = "СуммаДокументаТорг12+СуммаДокументаАкт=СуммаДокументаУПД" Тогда
			
			СуммаДокументаТорг12 = СуммыПоТипам.Получить(Перечисления.ТипыДокументовРаспознаваниеДокументов.ТОРГ12);
			СуммаДокументаАкт = СуммыПоТипам.Получить(Перечисления.ТипыДокументовРаспознаваниеДокументов.АктОбОказанииУслуг);
			СуммаДокументаУПД = СуммыПоТипам.Получить(Перечисления.ТипыДокументовРаспознаваниеДокументов.УПД);
			
			Если СуммаДокументаТорг12 = Неопределено
				Или СуммаДокументаАкт = Неопределено
				Или СуммаДокументаУПД = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Результат.Выполнена = (СуммаДокументаТорг12 + СуммаДокументаАкт = СуммаДокументаУПД);
			Результат.Вставить("ДосрочныйВыход", Ложь);
			
			Если Не Результат.Выполнена Тогда
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция НайтиГруппыДляКомплектов(РазмерГруппы, ТаблицаДокументов, ТаблицаПоТипам, ИдТекущегоДокумента)
	
	МассивРезультатов = Новый Массив;
	
	// Найдем группы с количеством элементов = РазмерГруппы без повторений, т.е.
	// фактически сделаем перебор сочетаний из Н по К, где Н = ТаблицаПоТипам.Количество(),
	// К = РазмерГруппы - 1 (должны везде исключить тип ТекущегоДокумента)
	
	Н = ТаблицаПоТипам.Количество();
	К = РазмерГруппы - 1;
	Если Н < К Тогда
		// нельзя найти комбинацию. В ТаблицаПоТипам недостаточно типов
		Возврат МассивРезультатов;
	КонецЕсли;
	
	ДанныеТекущегоДокумента = ТаблицаДокументов[ИдТекущегоДокумента];
	
	КомбинацияТипов = Новый Массив(К);
	ТипыДляПроверкиКомплектности = Новый Массив;
	ЭлементыТипа = Новый Массив(К); // Массив по типам, в каждом элементе содержится массив Идентификаторов строк из ТаблицаДокументов
	ИдТаблицыТипов = Новый Массив(К); // Текущий элемент обхода для ЭлементыТипа. Содержит индекс во внетреннем массиве из ЭлементыТипа
	КомбинацияСтрокТипов = Новый Массив(К);
	ИдПроверяемыхДокументов = Новый Массив(К);
	ДанныеДляПроверки = Новый Массив;
	ПравилаСравнения = Новый Массив;
	ИдентификаторыСтрок = Новый Массив;
	
	Для Ид = 0 По К-1 Цикл
		КомбинацияТипов[Ид] = Ид;
	КонецЦикла;
	
	НайденаКомбинацияТипов = Истина;
	Пока НайденаКомбинацияТипов Цикл
		
		// проверить, что типы 0..К-1 совместимы c типом ТекущегоДокумента
		ТипыДляПроверкиКомплектности.Очистить();
		ТипыДляПроверкиКомплектности.Добавить(ДанныеТекущегоДокумента.ТипДокумента);
		Для Ид = 0 По К-1 Цикл
			ТипыДляПроверкиКомплектности.Добавить(ТаблицаПоТипам[КомбинацияТипов[Ид]].ТипДокументов);
		КонецЦикла;
		МогутОбразовыватьКомплект = ЕстьПравилоСравненияДляТипов(ТипыДляПроверкиКомплектности);
		
		Если МогутОбразовыватьКомплект Тогда
			
			Для Ид = 0 По К-1 Цикл
				ЭлементыТипа[Ид] = ТаблицаПоТипам[КомбинацияТипов[Ид]].ИдентификаторыСтрок;
				
				// количество строк в различных типах может быть разное, поэтому будем делать
				// обход строк типов по принципу "каждая строка с каждой" при обходе строк от максимальной до 0
				ИдТаблицыТипов[Ид] = ЭлементыТипа[Ид].Количество() - 1;
			КонецЦикла;
			
			НайденаКомбинацияСтрокТипов = Истина;
			Пока НайденаКомбинацияСтрокТипов Цикл
				
				// проверить по суммам на равенство или что Сумма (Торг12 + Акт = СФ)
				ДанныеДляПроверки.Очистить();
				ДанныеДляПроверки.Добавить(ДанныеТекущегоДокумента);
				ИдентификаторыСтрок.Очистить();
				ИдентификаторыСтрок.Добавить(ИдТекущегоДокумента);
				Для Ид = 0 По К-1 Цикл
					ИдСтроки = ЭлементыТипа[Ид][ИдТаблицыТипов[Ид]];
					ДанныеДляПроверки.Добавить(ТаблицаДокументов[ИдСтроки]);
					ИдентификаторыСтрок.Добавить(ИдСтроки);
				КонецЦикла;
				
				ПравилаСравнения = ПолучитьПравилаСравнения(ДанныеДляПроверки, К + 1);
				РезультатПроверки = ВыполнитьПроверку(ДанныеДляПроверки, ПравилаСравнения);
				
				Если РезультатПроверки.Выполнена Тогда
					МассивРезультатов.Добавить(СкопироватьМассив(ИдентификаторыСтрок));
				КонецЕсли;
				
				Если РезультатПроверки.ДосрочныйВыход Тогда
					// При ДосрочныйВыход = Истина можем не проверять все нижележащие элементы
					ИдТаблицыТипов[К-1] = 0;
				КонецЕсли;
				НайденаКомбинацияСтрокТипов = СледующаяКомбинацияТаблицыТипов(ИдТаблицыТипов, ЭлементыТипа, К);
				
			КонецЦикла;
			
		КонецЕсли;
		
		НайденаКомбинацияТипов = СледующаяКомбинация(КомбинацияТипов, Н, К);
	КонецЦикла;
	
	Возврат МассивРезультатов;
	
КонецФункции

Функция ПолучитьПравилаСравнения(ДанныеДляПроверки, КоличествоДокументов)
	
	ПравилаСравнения = Новый Массив;
	
	Если КоличествоДокументов = 2 Тогда
		Если ДанныеДляПроверки[0].ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.УПД
			И ДанныеДляПроверки[1].ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетФактура
			Или
			ДанныеДляПроверки[0].ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетФактура
			И ДанныеДляПроверки[1].ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.УПД
			Тогда
			
			ПравилаСравнения.Добавить("Для2РавнаСуммаНомерДатаДокумента");
		Иначе
			ПравилаСравнения.Добавить("Для2РавнаСуммаДокумента");
		КонецЕсли;
	ИначеЕсли КоличествоДокументов = 3 Тогда
		ПравилаСравнения.Добавить("СуммаДокументаТорг12+СуммаДокументаАкт=СуммаДокументаСФ");
		ПравилаСравнения.Добавить("СуммаДокументаТорг12+СуммаДокументаАкт=СуммаДокументаСчетНаОплату");
		ПравилаСравнения.Добавить("СуммаДокументаТорг12+СуммаДокументаАкт=СуммаДокументаУПД");
	КонецЕсли;
	
	Возврат ПравилаСравнения;
	
КонецФункции

Функция СледующаяКомбинацияТаблицыТипов(ИдТаблицыТипов, ТаблицыТипа, К)
	
	// Обход строк типов по принципу "каждая строка с каждой" при обходе строк от максимальной до 0
	
	// Уменьшаем самый правый элемент
	Если ИдТаблицыТипов[К - 1] > 0 Тогда
		ИдТаблицыТипов[К - 1] = ИдТаблицыТипов[К - 1] - 1;
		Возврат Истина;
	КонецЕсли;
	
	// Ищем самый правый элемент, который можно уменьшить
	Ид = К - 2;
	Пока Ид >= 0 Цикл
		Если ИдТаблицыТипов[Ид] > 0 Тогда
			Прервать;
		КонецЕсли;
		
		Ид = Ид - 1;
	КонецЦикла;
	
	Если Ид < 0 Тогда
		// Перебрали все элементы, т.е. достаигли того, что все ИдТаблицыТипов[i] = 0
		Возврат Ложь;
	КонецЕсли;
	
	ИдТаблицыТипов[Ид] = ИдТаблицыТипов[Ид] - 1;
	
	// Перешли на новую строку, значит сбрасываем значения до максимальных
	Пока Ид < К - 1 Цикл
		Ид = Ид + 1;
		ИдТаблицыТипов[Ид] = ТаблицыТипа[Ид].Количество() - 1;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция СледующаяКомбинация(Комбинация, Н, К);
	
	// Классический перебор сочетаний из Н по К
	
	// Увеличиваем самый правый элемент
	Если Комбинация[К - 1] < Н - 1 Тогда
		Комбинация[К - 1] = Комбинация[К - 1] + 1;
		Возврат Истина;
	КонецЕсли;
	
	// Ищем самый правый элемент, который можно увеличить
	Ид = К - 2;
	Пока Ид >= 0 Цикл
		Если Комбинация[Ид] < Н - К + Ид Тогда
			Прервать;
		КонецЕсли;
		
		Ид = Ид - 1;
	КонецЦикла;
	
	Если Ид < 0 Тогда
		// Перебрали все элементы, т.е. достаигли Комбинация[0] = Н - К
		Возврат Ложь;
	КонецЕсли;
	
	Комбинация[Ид] = Комбинация[Ид] + 1;
	
	// Увеличиваем все элементы справа
	Пока Ид < К - 1 Цикл
		Комбинация[Ид + 1] = Комбинация[Ид] + 1;
		Ид = Ид + 1;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ЕстьПравилоСравненияДляТипов(МассивТипов)
	
	К = МассивТипов.Количество();
	
	ЕстьТип = Новый Соответствие;
	Для Каждого ТипДокумента Из МассивТипов Цикл
		ЕстьТип.Вставить(ТипДокумента, Истина);
	КонецЦикла;
	
	Если К = 2 Тогда
		
		КомплектВозможен =
			(ЕстьТип.Получить(Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетНаОплату) = Истина
			И ЕстьТип.Получить(Перечисления.ТипыДокументовРаспознаваниеДокументов.УПД) = Истина)
			Или
			(ЕстьТип.Получить(Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетНаОплату) = Истина
			И ЕстьТип.Получить(Перечисления.ТипыДокументовРаспознаваниеДокументов.ТОРГ12) = Истина)
			Или
			(ЕстьТип.Получить(Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетНаОплату) = Истина
			И ЕстьТип.Получить(Перечисления.ТипыДокументовРаспознаваниеДокументов.АктОбОказанииУслуг) = Истина)
			Или
			(ЕстьТип.Получить(Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетНаОплату) = Истина
			И ЕстьТип.Получить(Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетФактура) = Истина)
			Или
			(ЕстьТип.Получить(Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетФактура) = Истина
			И ЕстьТип.Получить(Перечисления.ТипыДокументовРаспознаваниеДокументов.ТОРГ12) = Истина)
			Или
			(ЕстьТип.Получить(Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетФактура) = Истина
			И ЕстьТип.Получить(Перечисления.ТипыДокументовРаспознаваниеДокументов.АктОбОказанииУслуг) = Истина)
			Или
			(ЕстьТип.Получить(Перечисления.ТипыДокументовРаспознаваниеДокументов.УПД) = Истина
			И ЕстьТип.Получить(Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетФактура) = Истина)
			Или
			(ЕстьТип.Получить(Перечисления.ТипыДокументовРаспознаваниеДокументов.УПД) = Истина
			И ЕстьТип.Получить(Перечисления.ТипыДокументовРаспознаваниеДокументов.ТОРГ12) = Истина)
			Или
			(ЕстьТип.Получить(Перечисления.ТипыДокументовРаспознаваниеДокументов.УПД) = Истина
			И ЕстьТип.Получить(Перечисления.ТипыДокументовРаспознаваниеДокументов.АктОбОказанииУслуг) = Истина)
			;
	ИначеЕсли К = 3 Тогда
		КомплектВозможен =
			(ЕстьТип.Получить(Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетНаОплату) = Истина
			И ЕстьТип.Получить(Перечисления.ТипыДокументовРаспознаваниеДокументов.ТОРГ12) = Истина
			И ЕстьТип.Получить(Перечисления.ТипыДокументовРаспознаваниеДокументов.АктОбОказанииУслуг) = Истина)
			Или
			(ЕстьТип.Получить(Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетФактура) = Истина
			И ЕстьТип.Получить(Перечисления.ТипыДокументовРаспознаваниеДокументов.ТОРГ12) = Истина
			И ЕстьТип.Получить(Перечисления.ТипыДокументовРаспознаваниеДокументов.АктОбОказанииУслуг) = Истина)
			Или
			(ЕстьТип.Получить(Перечисления.ТипыДокументовРаспознаваниеДокументов.УПД) = Истина
			И ЕстьТип.Получить(Перечисления.ТипыДокументовРаспознаваниеДокументов.ТОРГ12) = Истина
			И ЕстьТип.Получить(Перечисления.ТипыДокументовРаспознаваниеДокументов.АктОбОказанииУслуг) = Истина)
			;
	Иначе
		КомплектВозможен = Ложь;
	КонецЕсли;
	
	Возврат КомплектВозможен;
	
КонецФункции

Функция ЕстьДубльДокументаИзКомплекта(СтрокаКомплекта, ТаблицаПоискаДублей) Экспорт
	
	Для Каждого СтрокаДанных Из ТаблицаПоискаДублей Цикл
		Если СтрокаКомплекта.НомерДокумента = СтрокаДанных.НомерДокумента
			И СтрокаКомплекта.ДатаДокумента = СтрокаДанных.ДатаДокумента
			И СтрокаКомплекта.СуммаДокумента = СтрокаДанных.СуммаДокумента
			И СтрокаКомплекта.Контрагент = СтрокаДанных.Контрагент
			И СтрокаКомплекта.Организация = СтрокаДанных.Организация
			И СтрокаКомплекта.ТипДокумента = СтрокаДанных.ТипДокумента
			И СтрокаКомплекта.Направление = СтрокаДанных.Направление Тогда
			
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ВсеЭлементыМассивовСовпадают(Массив1, Массив2)
	
	Если Массив1.Количество() <> Массив2.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого ЭлементМассива1 Из Массив1 Цикл
		Если Массив2.Найти(ЭлементМассива1) = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция СкопироватьМассив(МассивИсточник)
	
	МассивРезультат = Новый Массив;
	
	Для Каждого Элемент Из МассивИсточник Цикл
		МассивРезультат.Добавить(Элемент);
	КонецЦикла;
	
	Возврат МассивРезультат;
	
КонецФункции

Процедура СкопироватьЭлементыФормыРекурсивно(Форма, ИсходнаяГруппа, ГруппаДляВставки, НомерГруппы, ИсключаемыеЭлементы = "") Экспорт
	
	Элементы = Форма.Элементы;
	
	НоваяГруппа = Элементы.Добавить(ИсходнаяГруппа.Имя + "_" + НомерГруппы, Тип("ГруппаФормы"), ГруппаДляВставки);
	НоваяГруппа.Вид = ИсходнаяГруппа.Вид;
	ЗаполнитьЗначенияСвойств(НоваяГруппа, ИсходнаяГруппа, "Отображение, Группировка, ОтображатьЗаголовок");
	ВсеИсключаемыеЭлементы = СтрРазделить(СтрЗаменить(ИсключаемыеЭлементы, " ", ""), ",", Ложь);
	
	Для Каждого ЭлементГруппы Из ИсходнаяГруппа.ПодчиненныеЭлементы Цикл
		Если ВсеИсключаемыеЭлементы.Найти(ЭлементГруппы.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ЭлементГруппы) = Тип("ГруппаФормы") Тогда
			СкопироватьЭлементыФормыРекурсивно(Форма, ЭлементГруппы, НоваяГруппа, НомерГруппы, ИсключаемыеЭлементы);
		ИначеЕсли ТипЗнч(ЭлементГруппы) = Тип("ПолеФормы") Тогда
			НовыйЭлемент = Элементы.Добавить(ЭлементГруппы.Имя+ "_" + НомерГруппы, Тип("ПолеФормы"), НоваяГруппа);
			НовыйЭлемент.Вид = ЭлементГруппы.Вид;
			НовыйЭлемент.ПутьКДанным = СтрЗаменить(ЭлементГруппы.ПутьКДанным, "0", СтрРазделить(НомерГруппы, "_")[0]);
			Если НовыйЭлемент.Вид = ВидПоляФормы.ПолеКартинки Тогда
				НовыйЭлемент.КартинкаЗначений = ЭлементГруппы.КартинкаЗначений;
			КонецЕсли;
			Если НовыйЭлемент.Вид <> ВидПоляФормы.ПолеФлажка Тогда
				ЗаполнитьЗначенияСвойств(
					НовыйЭлемент,
					ЭлементГруппы,
					"АвтоМаксимальнаяВысота,
					|АвтоМаксимальнаяШирина,
					|Высота,
					|Гиперссылка,
					|МаксимальнаяВысота,
					|МаксимальнаяШирина,
					|Рамка,
					|РастягиватьПоВертикали,
					|РастягиватьПоГоризонтали,
					|Ширина"
				);
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(
				НовыйЭлемент,
				ЭлементГруппы,
				"ВажностьПриОтображении,
				|ВертикальноеПоложение,
				|ВертикальноеПоложениеВГруппе,
				|Видимость,
				|ВысотаЗаголовка,
				|ГоризонтальноеПоложение,
				|ГоризонтальноеПоложениеВГруппе,
				|Доступность,
				|Заголовок,
				|ОтображениеПодсказки,
				|Подсказка,
				|ПоложениеЗаголовка,
				|ПропускатьПриВводе,
				|ТолькоПросмотр,
				|ЦветРамки,
				|ЦветТекста,
				|ЦветТекстаЗаголовка,
				|ЦветТекстаПодвала,
				|ЦветФонаЗаголовка,
				|ЦветФонаПодвала,
				|Шрифт,
				|ШрифтЗаголовка,
				|ШрифтПодвала"
			);
			Если ЭлементГруппы.Имя = "СоздатьДокумент" Тогда
				НовыйЭлемент.УстановитьДействие("ПриИзменении", "СоздатьДокументПриИзменении");
			КонецЕсли;
		ИначеЕсли ТипЗнч(ЭлементГруппы) = Тип("ДекорацияФормы") Тогда
			НовыйЭлемент = Элементы.Добавить(ЭлементГруппы.Имя+ "_" + НомерГруппы, Тип("ДекорацияФормы"), НоваяГруппа);
			НовыйЭлемент.Вид = ЭлементГруппы.Вид;
			ЗаполнитьЗначенияСвойств(
				НовыйЭлемент,
				ЭлементГруппы,
				"АвтоМаксимальнаяВысота,
				|АвтоМаксимальнаяШирина,
				|ВажностьПриОтображении,
				|ВертикальноеПоложение,
				|ВертикальноеПоложениеВГруппе,
				|Видимость,
				|Высота,
				|ВысотаЗаголовка,
				|Гиперссылка,
				|ГоризонтальноеПоложение,
				|ГоризонтальноеПоложениеВГруппе,
				|Доступность,
				|Заголовок,
				|МаксимальнаяВысота,
				|МаксимальнаяШирина,
				|ОтображениеПодсказки,
				|Подсказка,
				|ПропускатьПриВводе,
				|Рамка,
				|РастягиватьПоВертикали,
				|РастягиватьПоГоризонтали,
				|ЦветРамки,
				|ЦветТекста,
				|ЦветФона,
				|Ширина,
				|Шрифт"
			);
		ИначеЕсли ТипЗнч(ЭлементГруппы) = Тип("КнопкаФормы") Тогда
			СкопироватьКнопкуФормы(Форма, ЭлементГруппы, НоваяГруппа, НомерГруппы);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура СкопироватьКнопкуФормы(Форма, КнопкаФормы, ГруппаДляВставки, НомерГруппы) Экспорт
	
	НовоеИмяКоманды = КнопкаФормы.Имя + "_" + НомерГруппы;
	Если Форма.Команды.Найти(НовоеИмяКоманды) = Неопределено Тогда
		НоваяКоманда = Форма.Команды.Добавить(НовоеИмяКоманды);
		// У копируемой кнопки ИмяКоманды должно совпадать с действием
		НоваяКоманда.Действие = КнопкаФормы.ИмяКоманды;
	КонецЕсли;
	
	НовыйЭлемент = Форма.Элементы.Добавить(НовоеИмяКоманды, Тип("КнопкаФормы"), ГруппаДляВставки);
	НовыйЭлемент.Вид = КнопкаФормы.Вид;
	НовыйЭлемент.ИмяКоманды = НовоеИмяКоманды;
	НовыйЭлемент.Заголовок = КнопкаФормы.Заголовок;
	
КонецПроцедуры

Функция ОшибкиПоДокументам(ВсеДокументы, Вариант = "Общий") Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.РаспознанныйДокумент"));
	Результат.Колонки.Добавить("КоличествоОшибок", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	Результат.Колонки.Добавить("КоличествоОшибокВТаблицах", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	
	Для Каждого Ссылка Из ВсеДокументы Цикл
	
		ДокументОбъект = Ссылка.ПолучитьОбъект();
		
		ТаблицаПроблем = РаспознаваниеДокументовСлужебный.ПроблемныеРеквизиты(ДокументОбъект, Вариант);
		КоличествоОшибокВРеквизитах = ТаблицаПроблем.Скопировать(Новый Структура("НомерСтроки", 0), "ИмяРеквизита").Количество();
		
		СтрокаРезультата = Результат.Добавить();
		СтрокаРезультата.Ссылка = Ссылка;
		СтрокаРезультата.КоличествоОшибок = ТаблицаПроблем.Количество();
		СтрокаРезультата.КоличествоОшибокВТаблицах = СтрокаРезультата.КоличествоОшибок - КоличествоОшибокВРеквизитах;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеКомплектов(ВыбранныеДокументы) Экспорт
	
	ВсеДокументы = ВсеДокументыКомплектов(ВыбранныеДокументы);
	ВсеДанныеДокументов = ДополнитьДанныеДокументов(ВсеДокументы);
	ДанныеКомплектов = НайтиКомплекты(ВсеДанныеДокументов);
	
	Результат = Новый Структура;
	Результат.Вставить("ВсеДанныеДокументов", ВсеДанныеДокументов);
	Результат.Вставить("ДанныеКомплектов", ДанныеКомплектов);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти
