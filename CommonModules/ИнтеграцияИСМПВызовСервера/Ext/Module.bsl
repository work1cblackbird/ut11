#Область ПрограммныйИнтерфейс

#Область ДлительныеОперации

// Подготавливает сообщения к передаче в сервис ИСМП.
//
// Параметры:
//  ВходящиеДанные - Массив Из (См. ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ПараметрыОбработкиДокументов)
//  УникальныйИдентификатор - УникальныйИдентификатор - Уникальный идентификатор формы.
// 
// Возвращаемое значение:
//  Структура - см. функцию ПодготовитьСообщенияКПередаче().
//
Функция ПодготовитьКПередаче(ВходящиеДанные, УникальныйИдентификатор = Неопределено) Экспорт
	
	Организации = Неопределено;
	
	ПараметрыОбмена = ИнтеграцияИСМП.ПараметрыОбмена(Организации, УникальныйИдентификатор);
	
	Если УникальныйИдентификатор <> Неопределено И Не ИнтеграцияИС.РежимРаботыБезФоновыхЗаданий() Тогда
		
		ВозвращаемоеЗначение = Новый Структура;
		ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Неопределено);
		ВозвращаемоеЗначение.Вставить("ДоступныеСертификаты",           Неопределено);
		ВозвращаемоеЗначение.Вставить("ТребуетсяПодписание",            Неопределено);
		ВозвращаемоеЗначение.Вставить("КОпределениюВидаУпаковки",       Неопределено);
		ВозвращаемоеЗначение.Вставить("Изменения",                      Новый Массив);
		ВозвращаемоеЗначение.Вставить("ДлительнаяОперация",             Неопределено);
		ВозвращаемоеЗначение.Вставить("Ожидать",                        Неопределено);
		ВозвращаемоеЗначение.Вставить("АдресВоВременномХранилище",      Неопределено);
		
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Выполнение обмена с ИС МП'");
		
		ПараметрыФоновогоЗадания = Новый Структура;
		ПараметрыФоновогоЗадания.Вставить("ВходящиеДанные",    ВходящиеДанные);
		ПараметрыФоновогоЗадания.Вставить("ПараметрыОбмена",   ПараметрыОбмена);
		ПараметрыФоновогоЗадания.Вставить("ПараметрыСеансаИС", ИнтеграцияИСМПСлужебный.ПараметрыСеансаИС());
		
		ИнтеграцияИСПереопределяемый.НастроитьДлительнуюОперацию(ПараметрыФоновогоЗадания, ПараметрыВыполнения);
		
		ВозвращаемоеЗначение.ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
			"ИнтеграцияИСМПСлужебный.ПодготовитьКПередачеДлительнаяОперация",
			ПараметрыФоновогоЗадания, ПараметрыВыполнения);
		
	Иначе
		
		ВозвращаемоеЗначение = ИнтеграцияИСМПСлужебный.ПодготовитьКПередачеУниверсально(ВходящиеДанные, ПараметрыОбмена);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Подготавливает сообщения к передаче в сервис ИСМП.
//
// Параметры:
//  ПараметрыЗагрузки - Структура - Структура со свойствами:
//   * Организация - ОпределяемыйТип.Организация - Организация
//   * Интервал - Структура - Структура со свойствами:
//     ** НачалоПериода - Дата - Дата начала периода.
//     ** КонецПериода - Дата - Дата окончания периода.
//  УникальныйИдентификатор - УникальныйИдентификатор - Уникальный идентификатор формы.
// 
// Возвращаемое значение:
//  Структура - см. функцию ПодготовитьСообщенияКПередаче().
//
Функция ЗагрузитьВходящиеДокументы(ПараметрыЗагрузки, УникальныйИдентификатор = Неопределено) Экспорт
	
	ПараметрыОбмена = ИнтеграцияИСМП.ПараметрыОбмена(ПараметрыЗагрузки.Организация, УникальныйИдентификатор);
	
	Если УникальныйИдентификатор <> Неопределено И Не ИнтеграцияИС.РежимРаботыБезФоновыхЗаданий() Тогда
		
		ВозвращаемоеЗначение = Новый Структура;
		ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Неопределено);
		ВозвращаемоеЗначение.Вставить("ДоступныеСертификаты",           Неопределено);
		ВозвращаемоеЗначение.Вставить("ТребуетсяПодписание",            Неопределено);
		ВозвращаемоеЗначение.Вставить("КОпределениюВидаУпаковки",       Неопределено);
		ВозвращаемоеЗначение.Вставить("Изменения",                      Новый Массив);
		ВозвращаемоеЗначение.Вставить("ДлительнаяОперация",             Неопределено);
		ВозвращаемоеЗначение.Вставить("Ожидать",                        Неопределено);
		ВозвращаемоеЗначение.Вставить("АдресВоВременномХранилище",      Неопределено);
		
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Загрузка входящих документов из ИС МП'");
		
		ПараметрыФоновогоЗадания = Новый Структура;
		ПараметрыФоновогоЗадания.Вставить("ПараметрыЗагрузки", ПараметрыЗагрузки);
		ПараметрыФоновогоЗадания.Вставить("ПараметрыОбмена",   ПараметрыОбмена);
		ПараметрыФоновогоЗадания.Вставить("ПараметрыСеансаИС", ИнтеграцияИСМПСлужебный.ПараметрыСеансаИС());
		
		ИнтеграцияИСПереопределяемый.НастроитьДлительнуюОперацию(ПараметрыФоновогоЗадания, ПараметрыВыполнения);
		
		ВозвращаемоеЗначение.ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
			"ИнтеграцияИСМПСлужебный.ЗагрузитьВходящиеДокументыДлительнаяОперация",
			ПараметрыФоновогоЗадания, ПараметрыВыполнения);
		
	Иначе
		
		ВозвращаемоеЗначение = ИнтеграцияИСМПСлужебный.ЗагрузитьВходящиеДокументыУниверсально(ПараметрыЗагрузки, ПараметрыОбмена);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ВыполнитьОбмен(Организации = Неопределено, УникальныйИдентификатор = Неопределено, СообщениеИлиДокумент = Неопределено) Экспорт
	
	ПараметрыОбмена = ИнтеграцияИСМП.ПараметрыОбмена(Организации, УникальныйИдентификатор);
	
	ИнтеграцияИСМПСлужебный.ПостроитьОчередьСообщений(ПараметрыОбмена, СообщениеИлиДокумент);
	
	Если УникальныйИдентификатор <> Неопределено И Не ИнтеграцияИС.РежимРаботыБезФоновыхЗаданий() Тогда
		
		ВозвращаемоеЗначение = Новый Структура;
		ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Неопределено);
		ВозвращаемоеЗначение.Вставить("ДоступныеСертификаты",           Неопределено);
		ВозвращаемоеЗначение.Вставить("ТребуетсяПодписание",            Неопределено);
		ВозвращаемоеЗначение.Вставить("КОпределениюВидаУпаковки",       Неопределено);
		ВозвращаемоеЗначение.Вставить("Изменения",                      Новый Массив);
		ВозвращаемоеЗначение.Вставить("ДлительнаяОперация",             Неопределено);
		ВозвращаемоеЗначение.Вставить("Ожидать",                        Неопределено);
		ВозвращаемоеЗначение.Вставить("АдресВоВременномХранилище",      Неопределено);
		
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Выполнение обмена с ИС МП'");
		
		ПараметрыФоновогоЗадания = Новый Структура;
		ПараметрыФоновогоЗадания.Вставить("ПараметрыОбмена",   ПараметрыОбмена);
		ПараметрыФоновогоЗадания.Вставить("ПараметрыСеансаИС", ИнтеграцияИСМПСлужебный.ПараметрыСеансаИС());
		
		ИнтеграцияИСПереопределяемый.НастроитьДлительнуюОперацию(ПараметрыФоновогоЗадания, ПараметрыВыполнения);
		
		ВозвращаемоеЗначение.ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
			"ИнтеграцияИСМПСлужебный.ВыполнитьОбменДлительнаяОперация",
			ПараметрыФоновогоЗадания, ПараметрыВыполнения);
		
	Иначе
		
		ВозвращаемоеЗначение = ИнтеграцияИСМПСлужебный.ВыполнитьОбменУниверсально(ПараметрыОбмена);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПродолжитьВыполнениеОбмена(ПодписанныеДанныеПоОрганизациям, АдресВоВременномХранилище) Экспорт
	
	ПараметрыОбмена = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	// Установка параметров сеанса выполняется НЕ в фоновом задании.
	ТребуетсяЗапроситьУстановитьКлючСессии = Неопределено;
	ПодписанныеСообщенияПоОрганизациям     = Неопределено;
	Если ПодписанныеДанныеПоОрганизациям <> Неопределено Тогда
		Для Каждого КлючИЗначение Из ПодписанныеДанныеПоОрганизациям Цикл
			
			Организация = КлючИЗначение.Ключ;
			Сообщения   = КлючИЗначение.Значение;
			
			ЗапроситьУстановитьКлючСессии = Новый Массив;
			ПодписанныеСообщения          = Новый Массив;
			
			Для Каждого Сообщение Из Сообщения Цикл
				Если Сообщение.Свойство("ПараметрыАвторизации") Тогда
					ЗапроситьУстановитьКлючСессии.Добавить(Сообщение);
				Иначе
					ПодписанныеСообщения.Добавить(Сообщение);
				КонецЕсли;
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Сообщение, "СвойстваПодписи")
					И ЭтоАдресВременногоХранилища(Сообщение.СвойстваПодписи) Тогда
					Сообщение.СвойстваПодписи = ПолучитьИзВременногоХранилища(Сообщение.СвойстваПодписи);
				КонецЕсли;
			КонецЦикла;
			
			Если ЗапроситьУстановитьКлючСессии.Количество() > 0 Тогда
				Если ТребуетсяЗапроситьУстановитьКлючСессии = Неопределено Тогда
					ТребуетсяЗапроситьУстановитьКлючСессии = Новый Соответствие;
				КонецЕсли;
				ТребуетсяЗапроситьУстановитьКлючСессии.Вставить(Организация, ЗапроситьУстановитьКлючСессии);
			КонецЕсли;
			
			Если ПодписанныеСообщения.Количество() > 0 Тогда
				Если ПодписанныеСообщенияПоОрганизациям = Неопределено Тогда
					ПодписанныеСообщенияПоОрганизациям = Новый Соответствие;
				КонецЕсли;
				ПодписанныеСообщенияПоОрганизациям.Вставить(Организация, ПодписанныеСообщения);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	ИнтеграцияИСМПСлужебный.ЗапроситьУстановитьКлючСессии(
		ТребуетсяЗапроситьУстановитьКлючСессии,
		ПодписанныеСообщенияПоОрганизациям,
		ПараметрыОбмена);
	
	// В процессе установки ключа сессии могли произойти ошибки.
	Для Каждого ЭлементОчереди Из ПараметрыОбмена.ОбработанныеЭлементыОчереди Цикл
		Если ПараметрыОбмена.ОчередьСообщений.Индекс(ЭлементОчереди) <> -1 Тогда
			ПараметрыОбмена.ОчередьСообщений.Удалить(ЭлементОчереди);
		КонецЕсли;
	КонецЦикла;
	ПараметрыОбмена.ОбработанныеЭлементыОчереди.Очистить();
	
	Если ПараметрыОбмена.УникальныйИдентификатор <> Неопределено
		И Не ИнтеграцияИС.РежимРаботыБезФоновыхЗаданий() Тогда
		
		ВозвращаемоеЗначение = Новый Структура;
		ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Неопределено);
		ВозвращаемоеЗначение.Вставить("ДоступныеСертификаты",           Неопределено);
		ВозвращаемоеЗначение.Вставить("ТребуетсяПодписание",            Неопределено);
		ВозвращаемоеЗначение.Вставить("КОпределениюВидаУпаковки",       Неопределено);
		ВозвращаемоеЗначение.Вставить("Изменения",                      Новый Массив);
		ВозвращаемоеЗначение.Вставить("ДлительнаяОперация",             Неопределено);
		ВозвращаемоеЗначение.Вставить("Ожидать",                        Неопределено);
		ВозвращаемоеЗначение.Вставить("АдресВоВременномХранилище",      Неопределено);
		
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ПараметрыОбмена.УникальныйИдентификатор);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Выполнение обмена с ИС МП'");
		
		ПараметрыФоновогоЗадания = Новый Структура;
		ПараметрыФоновогоЗадания.Вставить("ПодписанныеСообщенияПоОрганизациям", ПодписанныеСообщенияПоОрганизациям);
		ПараметрыФоновогоЗадания.Вставить("ПараметрыОбмена",                    ПараметрыОбмена);
		ПараметрыФоновогоЗадания.Вставить("ПараметрыСеансаИС",                  ИнтеграцияИСМПСлужебный.ПараметрыСеансаИС());
		
		ИнтеграцияИСПереопределяемый.НастроитьДлительнуюОперацию(ПараметрыФоновогоЗадания, ПараметрыВыполнения);
		
		ВозвращаемоеЗначение.ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
			"ИнтеграцияИСМПСлужебный.ПродолжитьВыполнениеОбменаДлительнаяОперация",
			ПараметрыФоновогоЗадания, ПараметрыВыполнения);
		
	Иначе
		
		ВозвращаемоеЗначение = ИнтеграцияИСМПСлужебный.ПродолжитьВыполнениеОбменаУниверсально(
			ПодписанныеСообщенияПоОрганизациям, ПараметрыОбмена);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Запуск в фоне заполнения настроек разрешительного режима - аналогично обработчику обновления, но при включении новой товарной группы, 
// если на момент обновления таковых не велось
// 
// Параметры:
//  УникальныйИдентификатор - УникальныйИдентификатор, Неопределено - Уникальный идентификатор формы
// 
// Возвращаемое значение:
//  см. ДлительныеОперации.ВыполнитьВФоне.
Функция ЗапуститьЗаполнениеНастроекРазрешительногоРежима(УникальныйИдентификатор = Неопределено) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Первичная настройка разрешительного режима'");
	
	ПараметрыФоновогоЗадания = Новый Структура;
	ПараметрыФоновогоЗадания.Вставить("ПараметрыЛогированияЗапросовИСМП", ПараметрыСеанса.ПараметрыЛогированияЗапросовИСМП);
	
	Если ОбщегоНазначенияИСМП.ЭтоРасширеннаяВерсияГосИС() Тогда
		МодульИнтеграцияИСПереопределяемый = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияИСПереопределяемый");
		МодульИнтеграцияИСПереопределяемый.НастроитьДлительнуюОперацию(ПараметрыФоновогоЗадания, ПараметрыВыполнения);
	КонецЕсли;
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"ИнтеграцияИСМП.ВыполнитьОбновлениеНастроекДляРазрешительногоРежимаДлительнаяОперация",
		ПараметрыФоновогоЗадания, ПараметрыВыполнения);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

#КонецОбласти

// Удаляет неотправленную операцию из очереди передачи данных в ИС МП.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ, по которому требуется отменить передачу данных.
//
// Возвращаемое значение:
//  Массив - Массив структур, см. функцию ИнтеграцияИСМПСлужебный.СтруктураИзменения(), или Неопределено (если в очереди нет сообщений).
//
Функция ОтменитьПередачу(ДокументСсылка) Экспорт
	
	ОчередьСообщений = РегистрыСведений.ОчередьСообщенийИСМП.ОчередьСообщенийПоДокументу(ДокументСсылка);
	
	Если ОчередьСообщений.Количество() = 0 Тогда
		
		ВосстановитьСтатусДокументаПоДаннымПротоколаОбмена(ДокументСсылка);
		Возврат ЗаполнитьИзменения(ДокументСсылка);
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстОшибки = "";
	
	НачатьТранзакцию();
	Попытка
		
		Для Каждого ЭлементОчереди Из ОчередьСообщений Цикл
			НаборЗаписей = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Сообщение.Установить(ЭлементОчереди.Сообщение, Истина);
			НаборЗаписей.Записать();
		КонецЦикла;
		
		НовыйСтатус = ВосстановитьСтатусДокументаПоДаннымПротоколаОбмена(ДокументСсылка, ЭлементОчереди.Сообщение);
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ИнтеграцияИСМПСлужебный.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
		
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ЗаполнитьИзменения(ДокументСсылка, ЭлементОчереди, ТекстОшибки, НовыйСтатус);
	
КонецФункции

// Отменяет последнюю операцию (например, если возникла ошибка передачи данных).
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ, по которому требуется отменить операцию.
//
// Возвращаемое значение:
//  Массив - Массив структур, см. функцию ИнтеграцияИСМПСлужебный.СтруктураИзменения().
//
Функция ОтменитьПоследнююОперацию(ДокументСсылка) Экспорт
	
	ДанныеПоследнегоСообщения = Справочники.ИСМППрисоединенныеФайлы.ПоследнееСообщение(ДокументСсылка, "Передано");
	
	Если ДанныеПоследнегоСообщения = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстОшибки = "";
	Попытка
		НовыйСтатус = ВосстановитьСтатусДокументаПоДаннымПротоколаОбмена(ДокументСсылка, ДанныеПоследнегоСообщения.Сообщение);
	Исключение
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ИнтеграцияИСМПСлужебный.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
		Возврат Неопределено;
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ЗаполнитьИзменения(ДокументСсылка, ДанныеПоследнегоСообщения, ТекстОшибки, НовыйСтатус);
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область НастройкиУчета

// Возвращает дату обязательной маркировки маркируемой продукци переданного вида.
// 
// Параметры:
//  ВидМаркируемойПродукции - ПеречислениеСсылка.ВидыПродукцииИС - вид маркируемой продукции
// Возвращаемое значение:
// 	Дата - дата обязательной маркировки маркируемой продукции.
//
Функция ДатаОбязательнойМаркировкиПродукции(ВидМаркируемойПродукции) Экспорт
	
	ДатаОбязательнойМаркировки = '00010101';
	
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДатаОбязательнойМаркировки КАК ДатаОбязательнойМаркировки
	|ИЗ
	|	РегистрСведений.НастройкиУчетаМаркируемойПродукцииИСМП
	|ГДЕ
	|	ВидПродукции = &ВидМаркируемойПродукции
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ВидМаркируемойПродукции", ВидМаркируемойПродукции);
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ДатаОбязательнойМаркировки = Выборка.ДатаОбязательнойМаркировки;
	КонецЕсли;
	
	Возврат ДатаОбязательнойМаркировки;

КонецФункции

// Возвращает виды продукции, по которым доступно заполнение документа ИСМП
//
// Параметры:
//   ПолноеИмяДокумента - Строка - создаваемый вводом на основании документ
//   Ссылка - ОпределяемыйТип.ОснованиеСтатусыОформленияДокументовИСМП - документ по которому происходит обработка заполнения
//
// Возвращаемое значение:
//   Массив Из ПеречислениеСсылка.ВидыПродукцииИС - различные виды продукции в документе ИСМП, заполненном 
//     по основанию без фильтра по виду продукции.
Функция ВидыПродукцииДанныхЗаполнения(ПолноеИмяДокумента, Ссылка) Экспорт
	
	ДоступныеВидыПродукции = Новый Массив;
	
	Если НЕ ИнтеграцияИСМПКлиентСерверПовтИсп.ВестиУчетМаркируемойПродукции() Тогда
		Возврат ДоступныеВидыПродукции;
	КонецЕсли;
	
	ВидыПродукцииИСМП = ОбщегоНазначенияИСКлиентСервер.ВидыПродукцииИСМП(Истина);
	Для Каждого ВидПродукцииИСМП Из ВидыПродукцииИСМП Цикл
		Если ИнтеграцияИСМПКлиентСерверПовтИсп.ВестиУчетМаркируемойПродукции(ВидПродукцииИСМП) Тогда
			ДоступныеВидыПродукции.Добавить(ВидПродукцииИСМП);
		КонецЕсли;
	КонецЦикла;
	
	Если ДоступныеВидыПродукции.Количество() < 2 Тогда
		Возврат ДоступныеВидыПродукции;
	КонецЕсли;
	
	ИмяДокумента = СтрРазделить(ПолноеИмяДокумента, ".")[1];
	Предзаполнение = Документы[ИмяДокумента].СоздатьДокумент();
	Предзаполнение.Заполнить(Ссылка);
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.МаркировкаТоваровИСМП")
		И ИнтеграцияИС.ЕстьРеквизитТабЧастиОбъекта("GTIN", Предзаполнение.Метаданные(), "Товары")
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Операция") = Перечисления.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков Тогда
		Товары = Предзаполнение.Товары.Выгрузить(, "Номенклатура, GTIN");
		ПараметрыЗаполненияПоКодамОстатков = Новый Структура;
		ПараметрыЗаполненияПоКодамОстатков.Вставить("Организация", Предзаполнение.Организация);
	Иначе
		Товары = Предзаполнение.Товары.Выгрузить(, "Номенклатура");
		Товары.Колонки.Добавить("GTIN", Метаданные.ОпределяемыеТипы.GTIN.Тип);
		ПараметрыЗаполненияПоКодамОстатков = Неопределено;
	КонецЕсли;
	
	Товары.Колонки.Добавить("Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	
	Возврат ИнтеграцияИСМП.ВидыПродукцииПоТаблицеНоменклатуры(Товары, ПараметрыЗаполненияПоКодамОстатков);
	
КонецФункции

// 
// Параметры:
// 	Номенклатура - ОпределяемыйТип.Номенклатура - Номенклатура
// Возвращаемое значение:
// 	СправочникСсылка.ВидыАлкогольнойПродукции
//
Функция ВидПродукцииПоНоменклатуре(Номенклатура) Экспорт
	Возврат ИнтеграцияИС.ВидПродукцииПоНоменклатуре(Номенклатура);
КонецФункции

// Возвращает признак необходимости контроля статусов кодов маркировок ИС МП.
//
//Параметры:
//	 ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции
//	 ВидОперации  - ПеречислениеСсылка.ВидыОперацийИСМП, Неопределено - Вид операции.
//	
// Возвращаемое значение:
//  Произвольный - Истина, в случае необходимости контроля статусов.
Функция КонтролироватьСтатусыКодовМаркировки(ВидПродукции = Неопределено, ВидОперации = Неопределено) Экспорт
	
	Возврат ОбщегоНазначенияИСМПКлиентСерверПовтИсп.КонтролироватьСтатусыКодовМаркировки(ВидПродукции = Неопределено, ВидОперации = Неопределено);
	
КонецФункции

// Возвращает признак необходимости контроля статусов кодов маркировок при розничной торговле.
//
//Параметры:
//	 ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции
//	 ВидОперации  - ПеречислениеСсылка.ВидыОперацийИСМП, Неопределено - Вид операции.
// Возвращаемое значение:
//  Булево - Истина, в случае необходимости контроля статусов в рознице.
Функция КонтролироватьСтатусыКодовМаркировкиВРознице(ВидПродукции = Неопределено, ВидОперации = Неопределено) Экспорт
	
	Возврат ОбщегоНазначенияИСМПКлиентСерверПовтИсп.КонтролироватьСтатусыКодовМаркировкиВРознице(ВидПродукции = Неопределено, ВидОперации = Неопределено);
	
КонецФункции

#КонецОбласти

// Восстанавливает статус документа по данным протокола обмена.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ, по которому требуется восстановить статус.
//  СообщениеПрерывания - Строка, СправочникСсылка.ИСМППрисоединенныеФайлы - Сообщение на котором необходимо закончить процесс расчета статусов.
// Возвращаемое значение:
// 	ПеречислениеСсылка.СтатусыОбработкиВозвратаВОборотИСМП, ПеречислениеСсылка.СтатусыОбработкиСписанияКодовМаркировкиИСМП, ПеречислениеСсылка.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП, ПеречислениеСсылка.СтатусыОбработкиПеремаркировкиТоваровИСМП, ПеречислениеСсылка.СтатусыОбработкиПриемкиТоваровИСМП, ПеречислениеСсылка.СтатусыОбработкиОтгрузкиТоваровИСМП, ПеречислениеСсылка.СтатусыОбработкиВыводаИзОборотаИСМП, ПеречислениеСсылка.СтатусыОбработкиМаркировкиТоваровИСМП - Рассчитанный статус.
Функция ВосстановитьСтатусДокументаПоДаннымПротоколаОбмена(ДокументСсылка, СообщениеПрерывания = Неопределено) Экспорт
	
	НаборПоДокументу = ИнтеграцияИСМП.РассчитатьСтатусДокументаПоДаннымПротоколаОбмена(ДокументСсылка,, СообщениеПрерывания);
	
	Возврат НаборПоДокументу[0].Статус;
	
КонецФункции

// Функция - Документы ИСМП по документу основанию
//
// Параметры:
//  ДокументОснование - ДокументСсылка - основание по которому надо получить документы ИСМП
// 
// Возвращаемое значение:
//  Структура - (см. ИнтеграцияИС.ДокументыИСПоДокументуОснованию)
//
Функция ДокументыИСМППоДокументуОснованию(ДокументОснование) Экспорт
	
	ДокументыИСМП = ИнтеграцияИС.ДокументыИСПоДокументуОснованию(
		ДокументОснование,
		Метаданные.РегистрыСведений.СтатусыДокументовИСМП);
	
	Возврат ДокументыИСМП;
	
КонецФункции

// Возвращает имена документов ИСМП, основанием для которых может являться указанный документ.
//
// Параметры:
//   ДокументОснование - ОпределяемыйТип.ОснованиеСтатусыОформленияДокументовИСМП - документ-основание для документа ИСМП
//
// Возвращаемое значение:
//   Массив из Строка - имена документов ИСМП
//
Функция ИменаДокументовДляДокументаОснования(ДокументОснование) Экспорт
	
	Возврат РасчетСтатусовОформленияИСМП.ИменаДокументовДляДокументаОснования(ДокументОснование);
	
КонецФункции

Функция АрхивироватьДокументы(ДокументыКАрхивированию) Экспорт
	
	Возврат РегистрыСведений.СтатусыДокументовИСМП.Архивировать(ДокументыКАрхивированию);
	
КонецФункции

// см. РегистрыСведений.СтатусыОформленияДокументовИСМП.АрхивироватьРаспоряженияКОформлению
Функция АрхивироватьРаспоряженияКОформлению(Основания, Документ) Экспорт
	
	Возврат РегистрыСведений.СтатусыОформленияДокументовИСМП.АрхивироватьРаспоряженияКОформлению(Основания, Документ);
	
КонецФункции

Функция ТекстНадписиПоляИнтеграцииВФормеДокументаОснования(Знач ДокументОснование) Экспорт
	
	ТекстНадписи = "";
	
	// Получим структуру вида ИмяДокументаИСМП - Статус
	СтатусыОформления = РегистрыСведений.СтатусыОформленияДокументовИСМП.СтатусыДокументовИСМППоДокументуОснованию(ДокументОснование);
	
	Если НЕ ЗначениеЗаполнено(СтатусыОформления) Тогда
		Возврат ТекстНадписи;
	КонецЕсли;
	
	// Получим структуру вида ИмяДокументаИСМП - Массив(ДокументыИСМПДанногоВида)
	ДокументыИСМП = ДокументыИСМППоДокументуОснованию(ДокументОснование);
	
	ТекстыНадписиПоДокументам = Новый Массив;
	
	Для Каждого КлючИЗначение Из СтатусыОформления Цикл
		
		МетаданныеДокумента = Метаданные.Документы[КлючИЗначение.Ключ];
		
		Если ИнтеграцияИС.РеквизитДокументОснованиеДокументаИС(МетаданныеДокумента).Тип.СодержитТип(ТипЗнч(ДокументОснование)) Тогда
			
			// Получим структуру с ключами "Представление, МассивДокументов, СтатусОформления, МетаданныеДокумента"
			Описание = ИнтеграцияИСМП.ОписаниеОформленныхДокументов(МетаданныеДокумента, ДокументОснование, ДокументыИСМП, СтатусыОформления);
			
			Если Описание = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТекстыНадписиПоДокументам.Количество() > 0 Тогда
				ТекстыНадписиПоДокументам.Добавить(", ");
			КонецЕсли;
			
			ТекстыНадписиПоДокументам.Добавить(Описание.ТекстНадписи);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстНадписи = Новый ФорматированнаяСтрока(ТекстыНадписиПоДокументам);
	Возврат ТекстНадписи;
	
КонецФункции

// Получает ТН ВЭД
//
// Параметры:
//  КодТНВЭД - Строка - Код по классификатору товарной номенклатуры внешнеэкономической деятельности
//
// Возвращаемое значение:
//   Произвольный - элемент классификатора (если он определен в конфигурации)
//
Функция КлассификаторТНВЭДПоКоду(КодТНВЭД) Экспорт
	
	ТНВЭД = Неопределено;
	
	ИнтеграцияИСМППереопределяемый.КлассификаторТНВЭД(КодТНВЭД, ТНВЭД);
	
	Возврат ТНВЭД;
	
КонецФункции

Процедура ИзвлечьЛогЗапросовИзРезультатаОбмена(РезультатОбмена) Экспорт
	
	ДанныеЛогаЗапросов = ЛогированиеЗапросовИС.ДанныеЛогаЗапросовПоАдресуВременногоХранилища(РезультатОбмена.АдресДанныхЛогаЗапроса);
	
	ДанныеДляЗаписи = Новый Структура();
	ДанныеДляЗаписи.Вставить("ДанныеЛогаЗапросов", ДанныеЛогаЗапросов);
	
	ЛогированиеЗапросовИС.ДописатьВТекущийЛогДанныеИзФоновогоЗадания(
		ДанныеДляЗаписи,
		ЛогированиеЗапросовИСМП.ПараметрыЛогированияЗапросов());
	
КонецПроцедуры

Функция ИнформацияСертификатовНоменклатуры(СписокНоменклатуры) Экспорт
	
	СертификатыНоменклатуры = Новый Соответствие;
	ИнтеграцияИСПереопределяемый.ПриЗаполненииСертификатовНоменклатуры(СписокНоменклатуры, СертификатыНоменклатуры);
	
	Возврат СертификатыНоменклатуры;
	
КонецФункции

Функция ТребуетсяПерейтиВПул(Знач ДокументОснование) Экспорт
	
	Возврат Документы.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.ТребуетсяПерейтиВПул(ДокументОснование);
	
КонецФункции

Функция ОрганизацияЯвляетсяФермером(Организация) Экспорт
	
	КодОКОПФ = "";
	
	ИнтеграцияИСПереопределяемый.КодОКОПФОрганизации(КодОКОПФ, Организация);
	
	Возврат КодОКОПФ = "15300" Или КодОКОПФ = "50101" Или КодОКОПФ = "14100";
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполняет структуру изменений по документу.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ, по которому требуется отменить передачу данных.
//  ЭлементОчереди - Неопределено,
//                   СтрокаТаблицыЗначений с колонками:
//                     Сообщение - ОпределяемыйТип.УникальныйИдентификаторИС - идентификатор сообщения.
//                     Операция - ПеречислениеСсылка.ВидыОперацийИСМП - операция.
//                     Организация - ОпределяемыйТип.Организация - организация.
//  ТекстОшибки - Строка.
//  НовыйСтатус - Неопределено.
// 
// Возвращаемое значение:
//  Массив из см. ИнтеграцияИСМПСлужебный.СтруктураИзменения()
Функция ЗаполнитьИзменения(ДокументСсылка, ЭлементОчереди = Неопределено, ТекстОшибки = "", НовыйСтатус = Неопределено)
	
	Изменения = Новый Массив;
	
	ДокументОснование = Неопределено;
	Если ДокументСсылка.Метаданные().Реквизиты.Найти("ДокументОснование") <> Неопределено Тогда
		ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ДокументОснование");
	КонецЕсли;
	
	СтрокаРезультата = ИнтеграцияИСМПСлужебный.СтруктураИзменения();
	СтрокаРезультата.Объект            = ДокументСсылка;
	СтрокаРезультата.ДокументОснование = ДокументОснование;
	СтрокаРезультата.НовыйСтатус       = НовыйСтатус;
	СтрокаРезультата.ТекстОшибки       = ТекстОшибки;
	
	Если ЭлементОчереди <> Неопределено Тогда
		СтрокаРезультата.Организация       = ЭлементОчереди.Организация;
		СтрокаРезультата.Операция          = ЭлементОчереди.Операция;
	КонецЕсли;
	
	Изменения.Добавить(СтрокаРезультата);
	
	Возврат Изменения;

КонецФункции

#КонецОбласти
