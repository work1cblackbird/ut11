#Область ПрограммныйИнтерфейс

// Выполняет операции после обработки облачного задания
// 
// Параметры:
//  ДокументОперации - ДокументСсылка - Документ-основание.
//  Касса - СправочникСсылка.ПодключаемоеОборудование - подключаемое оборудование.
//  ПараметрыОперации - Структура
//  ОбъектОбработан - Булево
Процедура ЧекОблачногоЗаданияОбработан(ДокументОперации, Касса, ПараметрыОперации, ОбъектОбработан) Экспорт
	
	ИдентификаторЧекаВОчереди = ОбщегоНазначенияБПО.ЗначениеРеквизитаОбъекта(ДокументОперации, "ИдентификаторЧекаВОчереди");
	ДанныеЧекаВОчереди = РаспределеннаяФискализация.ДанныеЧекаВОчереди(ИдентификаторЧекаВОчереди);
	
	Если ЗначениеЗаполнено(ДанныеЧекаВОчереди) Тогда
		ПараметрыОперацииЧека = ДанныеЧекаВОчереди.ДанныеЧека;
	Иначе
		ПараметрыОперацииЧека = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОперацииФискализацииЧека();
	КонецЕсли;
	
	ТекстОшибки = "";
	Если ПараметрыОперации.СтатусОперации = "Выполнена" Тогда
		СтатусЧекаВОчереди = Перечисления.СтатусЧекаККТВОчереди.Фискализирован;
		СтатусЧекаВСервисе = Перечисления.СтатусыОперацийВСервисеОблачныхКасс.Выполнена; 
		РезультатПробития  = Истина;
	Иначе
		СтатусЧекаВОчереди = Перечисления.СтатусЧекаККТВОчереди.Ошибка;
		СтатусЧекаВСервисе = Перечисления.СтатусыОперацийВСервисеОблачныхКасс.Ошибка;
		РезультатПробития  = Ложь;
	КонецЕсли;
	
	Если РезультатПробития Тогда
		ФискальныеДанныеЧека = ПараметрыОперации.ДанныеДляОбработки;
		
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(РезультатПробития, Неопределено, Касса);
		
		РезультатВыполнения.Вставить("НомерСменыККТ" , ФискальныеДанныеЧека.shiftNumber);
		РезультатВыполнения.Вставить("НомерЧекаККТ"  , ФискальныеДанныеЧека.receiptNumber);
		РезультатВыполнения.Вставить("СтатусСмены", 2);
		РезультатВыполнения.Вставить("ДатаВремяЧека"          , ПреобразоватьДату(ФискальныеДанныеЧека.receiptDate));
		РезультатВыполнения.Вставить("ФискальныйПризнак"      , ФискальныеДанныеЧека.FNSign);
		РезультатВыполнения.Вставить("АдресСайтаПроверки"     , ФискальныеДанныеЧека.addressSiteInspections);
		РезультатВыполнения.Вставить("РегистрационныйНомерККТ", ФискальныеДанныеЧека.KKTSerialNumber);
		РезультатВыполнения.Вставить("ОперацияЗаписана"       , Истина);
		РезультатВыполнения.Вставить("НомерФискальногоНакопителя"       , ФискальныеДанныеЧека.FNSerialNumber);
		
		ФискальнаяОперацияЧека = ОборудованиеЧекопечатающиеУстройства.ДанныеФискальнойОперации(ДокументОперации);
		Если ФискальнаяОперацияЧека = Неопределено Тогда
			Попытка
				// Записать фискальную операцию.
				ОборудованиеЧекопечатающиеОблачныеККТВызовСервера.ЗаписатьФискальнуюОперацию(ПараметрыОперацииЧека, РезультатВыполнения);
			Исключение
				#Если НЕ МобильноеПриложениеСервер Тогда
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Запись фискальной операции чека'",
					ОбщегоНазначенияБПО.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				#КонецЕсли
				Возврат;
			КонецПопытки;
		КонецЕсли; 
	КонецЕсли;
	
	РаспределеннаяФискализацияПереопределяемый.ОбработатьСтатусПостановкиЧекаВОблачныйСервис(
		ДокументОперации, 
		ПараметрыОперации.СтатусОперации, 
		ПараметрыОперацииЧека, 
		ТекстОшибки);
	
	РаспределеннаяФискализация.ЗаписатьСтатусЧекаВОчереди(ПараметрыОперацииЧека, СтатусЧекаВОчереди, Касса, , СтатусЧекаВСервисе, ОбъектОбработан);
	
КонецПроцедуры

Функция СтатусПробитияЧека(ДокументОперации) Экспорт
	
	МодульОблачныхКасс = ОбщегоНазначенияБПО.ОбщийМодуль("ОблачныеКассы");
	Возврат МодульОблачныхКасс.СтатусПробитияЧека(ДокументОперации);
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция СтатусКассы(ИдентификаторОборудования) Экспорт
	
	МодульОблачныхКасс = ОбщегоНазначенияБПО.ОбщийМодуль("ОблачныеКассы");
	Возврат МодульОблачныхКасс.СостояниеКассы(ИдентификаторОборудования);
	
КонецФункции

Процедура ПробитьЧек(ДокументОперации, ИдентификаторОборудования, ПараметрыДокумента) Экспорт
	
	РезультатФискализацииЧека = ФискализацияЧека(ДокументОперации, ИдентификаторОборудования, ПараметрыДокумента);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторУстройства", ИдентификаторОборудования);
	ДополнительныеПараметры.Вставить("ПараметрыОперации", ПараметрыДокумента);
	
	РезультатВыполненияОперации = РезультатВыполненияОперации(РезультатФискализацииЧека, ДополнительныеПараметры);
	ОбработатьРезультатФискализации(РезультатВыполненияОперации, ПараметрыДокумента);
	
КонецПроцедуры

// Выполняет фискализацию чека
// 
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ОснованиеФискальнойОперацииБПО
//  ИдентификаторОборудования - СправочникСсылка.ПодключаемоеОборудование 
//  ПараметрыДокумента - см. ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОперацииФискализацииЧека
//
// Возвращаемое значение:
//  Структура    
Функция ФискализацияЧека(ДокументОперации, ИдентификаторОборудования, ПараметрыДокумента) Экспорт
	
	ПозицииЧека  = ПараметрыДокумента.ПозицииЧека;
	ТаблицаОплат = ПараметрыДокумента.ТаблицаОплат;
	
	ТипРасчета = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.КодРасчетаДенежнымиСредствами(ПараметрыДокумента.ТипРасчета);
	СистемаНалогообложения = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.КодСистемыНалогообложенияККТ(ПараметрыДокумента.СистемаНалогообложения);
	
	ПараметрыПробития = ПараметрыПробитияЧека();
	ПараметрыШапкиЧека = ПараметрыШапкиЧека();
	
	ПараметрыШапкиЧека.cashierName = ПараметрыДокумента.Кассир;
	Если Не ПустаяСтрока(ПараметрыДокумента.КассирИНН) Тогда 
		ПараметрыШапкиЧека.Вставить("cashierINN", ПараметрыДокумента.КассирИНН);
	КонецЕсли;
	ПараметрыШапкиЧека.operationType = ТипРасчета;
	ПараметрыШапкиЧека.taxationSystem = СистемаНалогообложения + 1;
	
	Если Не ПустаяСтрока(ПараметрыДокумента.ОтправительEmail) Тогда
		ПараметрыШапкиЧека.senderEmail = ПараметрыДокумента.ОтправительEmail;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПараметрыДокумента.АдресРасчетов) Тогда   
		ПараметрыШапкиЧека.saleAddress = ПараметрыДокумента.АдресРасчетов;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПараметрыДокумента.МестоРасчетов) Тогда  
		ПараметрыШапкиЧека.saleLocation = ПараметрыДокумента.МестоРасчетов;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПараметрыДокумента.ПокупательEmail) Тогда  
		ПараметрыШапкиЧека.customerEmail = ПараметрыДокумента.ПокупательEmail;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПараметрыДокумента.ПокупательНомер) Тогда  
		ПокупательНомер = МенеджерОборудованияКлиентСервер.АбонентскийНомерФорматФФД(ПараметрыДокумента.ПокупательНомер);
		ПараметрыШапкиЧека.customerPhone = ПокупательНомер;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПараметрыДокумента.НомерАвтомата) Тогда
		ПараметрыШапкиЧека.automatNumber = ПараметрыДокумента.НомерАвтомата;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПараметрыДокумента.ПризнакАгента) Тогда
		
		ПризнакАгента = ОборудованиеЧекопечатающиеУстройстваРФКлиентСервер.КодПризнакаАгента(ПараметрыДокумента.ПризнакАгента);
		ПараметрыШапкиЧека.Вставить("agentType", ПризнакАгента);
		ДанныеАгента = ПараметрыДокумента.ДанныеАгента;
		ПараметрыАгента = ЗаполнитьДанныеАгента(ДанныеАгента);
		ПараметрыШапкиЧека.Вставить("agentData", ПараметрыАгента);
	
	КонецЕсли;
	
	Если ПараметрыДокумента.Свойство("ДанныеКоррекции") Тогда
		ПараметрыКоррекции = ПараметрыКоррекции();
		ДанныеКоррекции = ПараметрыДокумента.ДанныеКоррекции;
		ТипКоррекции = ?(ПустаяСтрока(ДанныеКоррекции.ТипКоррекции), 0, ДанныеКоррекции.ТипКоррекции);   
		ПараметрыКоррекции.type = ТипКоррекции;
		Если Не ПустаяСтрока(ДанныеКоррекции.ДатаКоррекции) Тогда
			ПараметрыКоррекции.date = НачалоДня(ДанныеКоррекции.ДатаКоррекции);
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеКоррекции.НомерПредписания) Тогда
			ПараметрыКоррекции.number = ДанныеКоррекции.НомерПредписания;
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеКоррекции.ОписаниеКоррекции) Тогда
			ПараметрыКоррекции.description = ДанныеКоррекции.ОписаниеКоррекции;
		КонецЕсли;
		ПараметрыШапкиЧека.isCorrection = Истина;
		ПараметрыШапкиЧека.Вставить("correctionData", ПараметрыКоррекции);
	Иначе
		ПараметрыШапкиЧека.isCorrection = Ложь;
	КонецЕсли;
	
	Если ПараметрыДокумента.Свойство("ДанныеПоставщика") И НЕ ПустаяСтрока(ПараметрыДокумента.ДанныеПоставщика.Наименование) Тогда
		ПараметрыПоставщика = ЗаполнитьДанныеПоставщика(ПараметрыДокумента.ДанныеПоставщика);
		ПараметрыШапкиЧека.Вставить("vendorData", ПараметрыПоставщика);
	КонецЕсли;
	
	Если ПараметрыДокумента.Свойство("ОперационныйРеквизит") И Не ПустаяСтрока(ПараметрыДокумента.ОперационныйРеквизит.ИдентификаторОперации) Тогда
		ПараметрыОперационногоРеквизита = ПараметрыОперационногоРеквизита();
		ОперационныйРеквизит = ПараметрыДокумента.ОперационныйРеквизит;
		Если Не ПустаяСтрока(ОперационныйРеквизит.ДанныеОперации) Тогда
			ПараметрыОперационногоРеквизита.operationData = ОперационныйРеквизит.ДанныеОперации;
		КонецЕсли;
		Если Не ПустаяСтрока(ОперационныйРеквизит.ИдентификаторОперации) Тогда
			ПараметрыОперационногоРеквизита.operationID = ОперационныйРеквизит.ИдентификаторОперации
		КонецЕсли;
		Если Не ПустаяСтрока(ОперационныйРеквизит.ДатаВремяОперации) Тогда
			ПараметрыОперационногоРеквизита.dateTime = ОперационныйРеквизит.ДатаВремяОперации;
		КонецЕсли;
		ПараметрыШапкиЧека.Вставить("operationalAttribute", ПараметрыОперационногоРеквизита);
	КонецЕсли;
	
	Если ПараметрыДокумента.Свойство("ОтраслевойРеквизит") И Не ПустаяСтрока(ПараметрыДокумента.ОтраслевойРеквизит.ИдентификаторФОИВ) Тогда
		ПараметрыОтраслевогоРеквизита = ПараметрыОтраслевогоРеквизита();
		ОтраслевойРеквизит = ПараметрыДокумента.ОтраслевойРеквизит;
		Если Не ПустаяСтрока(ОтраслевойРеквизит.ИдентификаторФОИВ) Тогда
			ПараметрыОтраслевогоРеквизита.identifierFOIV = ОтраслевойРеквизит.ИдентификаторФОИВ;
		КонецЕсли;
		Если Не ПустаяСтрока(ОтраслевойРеквизит.ДатаДокументаОснования) Тогда
			ПараметрыОтраслевогоРеквизита.documentDate = ОтраслевойРеквизит.ДатаДокументаОснования
		КонецЕсли;
		Если Не ПустаяСтрока(ОтраслевойРеквизит.НомерДокументаОснования) Тогда
			ПараметрыОтраслевогоРеквизита.documentNumber = ОтраслевойРеквизит.НомерДокументаОснования;
		КонецЕсли;
		Если Не ПустаяСтрока(ОтраслевойРеквизит.ЗначениеРеквизита) Тогда
			ПараметрыОтраслевогоРеквизита.attributeValue = ОтраслевойРеквизит.ЗначениеРеквизита;
		КонецЕсли;
		ПараметрыШапкиЧека.Вставить("industryAttribute", ПараметрыОтраслевогоРеквизита);
	КонецЕсли;
	
	СведенияОПокупателе = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыПерсональныеДанныеПокупателя();
	МенеджерОборудованияВызовСервераПереопределяемый.ОбработкаЗаполненияПерсональныхДанных(СведенияОПокупателе, ПараметрыДокумента.СубъектПерсональныхДанных, 
		ПараметрыДокумента.ТипПерсональныхДанных, ПараметрыДокумента.ДатаВремя); 
	Если Не ПустаяСтрока(ПараметрыДокумента.СведенияОПокупателе.Покупатель) Тогда
		ЗаписатьСведенияОПокупателе(ПараметрыШапкиЧека, ПараметрыДокумента, СведенияОПокупателе);
	КонецЕсли;
	
	ПараметрыПробития.documentHeader = ПараметрыШапкиЧека;
	
	Если ПараметрыДокумента.ПозицииЧека <> Неопределено Тогда
		Для Каждого ПозицияЧека Из ПараметрыДокумента.ПозицииЧека Цикл
			Если ПозицияЧека.Свойство("ФискальнаяСтрока") Тогда
				ПараметрыТовараЧека = ПараметрыТовараЧека();
				Если ПозицияЧека.ЦенаСоСкидками = 0 И ПозицияЧека.Сумма > 0 И ПозицияЧека.Количество > 0 Тогда
					ЦенаСоСкидками = Окр(ПозицияЧека.Сумма / ПозицияЧека.Количество, 2); 
				Иначе
					ЦенаСоСкидками = ПозицияЧека.ЦенаСоСкидками; 
				КонецЕсли;
				ПараметрыТовараЧека.name = ПозицияЧека.Наименование; // Наименование товара.
				ПараметрыТовараЧека.quantity = ПозицияЧека.Количество; // Количество товара.
				ПараметрыТовараЧека.priceWithDiscount = ЦенаСоСкидками; // Цена единицы товара с учетом скидок/наценок.
				ПараметрыТовараЧека.amountWithDiscount = ПозицияЧека.Сумма; // Конечная сумма по позиции чека с учетом всех скидок/наценок.
				
				Если НЕ ПустаяСтрока(ПозицияЧека.СтавкаНДС) Тогда 
					Если ПозицияЧека.СтавкаНДС = 118 Тогда
						ЗначениеСтавкаНДС = 118;
					ИначеЕсли ПозицияЧека.СтавкаНДС = 110 Тогда
						ЗначениеСтавкаНДС = 110;
					ИначеЕсли ПозицияЧека.СтавкаНДС = 120 Тогда
						ЗначениеСтавкаНДС = 120;
					Иначе
						ЗначениеСтавкаНДС = ПозицияЧека.СтавкаНДС;
					КонецЕсли;
				Иначе
					ЗначениеСтавкаНДС = Неопределено;
				КонецЕсли;
				ПараметрыТовараЧека.VATRate = ЗначениеСтавкаНДС;
				ПараметрыТовараЧека.VATAmount = ПозицияЧека.СуммаНДС;
				
				Если ПозицияЧека.Свойство("ПризнакСпособаРасчета") И НЕ ПустаяСтрока(ПозицияЧека.ПризнакСпособаРасчета) Тогда
					ПризнакСпособаРасчета = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.КодПризнакаСпособаРасчета(ПозицияЧека.ПризнакСпособаРасчета);
					ПараметрыТовараЧека.paymentMethod = ПризнакСпособаРасчета;
				КонецЕсли;
				
				Если ПозицияЧека.Свойство("ПризнакПредметаРасчета") И НЕ ПустаяСтрока(ПозицияЧека.ПризнакПредметаРасчета) Тогда
					ПризнакСпособаРасчета = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.КодПризнакаПредметаРасчета(ПозицияЧека.ПризнакПредметаРасчета);
					ПараметрыТовараЧека.calculationSubject = ПризнакСпособаРасчета;
				КонецЕсли;
				
				Если ПозицияЧека.Свойство("ПризнакАгентаПоПредметуРасчета") И НЕ ПустаяСтрока(ПозицияЧека.ПризнакАгентаПоПредметуРасчета) Тогда
					ПараметрыТовараЧека.Вставить("calculationAgent", ПараметрыАгента.ПризнакАгентаПоПредметуРасчета);
					ПараметрыАгента = ЗаполнитьДанныеАгента(ПозицияЧека.ДанныеАгента);
					ПараметрыТовараЧека.Вставить("agentData", ПараметрыАгента);
				КонецЕсли;
				
				Если ПозицияЧека.Свойство("ДанныеПоставщика") И НЕ ПустаяСтрока(ПозицияЧека.ДанныеПоставщика.Наименование) Тогда
					ПараметрыПоставщика = ЗаполнитьДанныеПоставщика(ПозицияЧека.ДанныеПоставщика);
					ПараметрыТовараЧека.Вставить("vendorData", ПараметрыПоставщика);
				КонецЕсли;
				
				Если ПозицияЧека.Свойство("КодЕдиницыИзмерения") И НЕ ПустаяСтрока(ПозицияЧека.КодЕдиницыИзмерения) Тогда
					МераКоличестваПредметаРасчета = ОборудованиеЧекопечатающиеУстройстваРФКлиентСервер.МераКоличестваПредметаРасчетаПоКодуЕдиницыИзмерения(ПозицияЧека.КодЕдиницыИзмерения);
					МераКоличестваПредметаРасчета = ОборудованиеЧекопечатающиеУстройстваРФКлиентСервер.КодМерыКоличестваПредметаРасчетаККТ(МераКоличестваПредметаРасчета);
					ПараметрыТовараЧека.measureOfQuantity = МераКоличестваПредметаРасчета;
				КонецЕсли;
				
				ДробноеКоличествоУказано = Ложь;
				ДробноеКоличество = ПозицияЧека.ДробноеКоличество;
				Если Не ПустаяСтрока(ДробноеКоличество.Числитель) И Не ПустаяСтрока(ДробноеКоличество.Знаменатель) Тогда
					Если Число(ДробноеКоличество.Числитель) > 0 И Число(ДробноеКоличество.Знаменатель) > 0 Тогда 
						ДробноеКоличествоУказано = Истина;
					КонецЕсли;
				КонецЕсли;
				
				Если ДробноеКоличествоУказано Тогда
					МераКоличестваПредметаРасчета = 0;
					ПараметрыТовараЧека.MeasureOfQuantity = МераКоличестваПредметаРасчета;
					ПараметрыДробногоКоличества = ПараметрыДробногоКоличества();
					ПараметрыДробногоКоличества.Numerator = ДробноеКоличество.Числитель;
					ПараметрыДробногоКоличества.Denominator = ДробноеКоличество.Знаменатель;
					ПараметрыТовараЧека.Вставить("fractionalQuantity", ПараметрыДробногоКоличества);
				Иначе
					Если ОборудованиеЧекопечатающиеУстройства.ВедетсяОбъемноСортовойУчет() И ПозицияЧека.ОбъемноСортовойУчет И Не ПустаяСтрока(ПозицияЧека.КоличествоВесовогоТовара) Тогда
						МераКоличестваПредметаРасчета = 11; // Килограмм
					Иначе
						МераКоличестваПредметаРасчета = ОборудованиеЧекопечатающиеУстройстваРФКлиентСервер.МераКоличестваПредметаРасчетаПоКодуЕдиницыИзмерения(ПозицияЧека.КодЕдиницыИзмерения);
						МераКоличестваПредметаРасчета = ОборудованиеЧекопечатающиеУстройстваРФКлиентСервер.КодМерыКоличестваПредметаРасчетаККТ(МераКоличестваПредметаРасчета);
					КонецЕсли;
					ПараметрыТовараЧека.measureOfQuantity = МераКоличестваПредметаРасчета;
				КонецЕсли;
				
				ЗаписатьДанныеКодаТоварнойНоменклатуры(ПараметрыТовараЧека, ПозицияЧека, ТипРасчета, ДробноеКоличествоУказано);
				
				Если Не ПустаяСтрока(ПозицияЧека.КонтрольнаяМарка) Тогда
					ПараметрыТовараЧека.Вставить("markingCode", ПозицияЧека.КонтрольнаяМарка);
				КонецЕсли;
				
				Если Не ПустаяСтрока(ПозицияЧека.ДополнительныйРеквизит) Тогда
					ПараметрыТовараЧека.Вставить("additionalAttribute", ПозицияЧека.ДополнительныйРеквизит);
				КонецЕсли;
				
				Если Не ПустаяСтрока(ПозицияЧека.СуммаАкциза) Тогда
					ПараметрыТовараЧека.Вставить("exciseAmount", ПозицияЧека.СуммаАкциза);
				КонецЕсли;
				
				Если Не ПустаяСтрока(ПозицияЧека.НомерТаможеннойДекларации) Тогда
					ПараметрыТовараЧека.Вставить("customsDeclaration", ПозицияЧека.НомерТаможеннойДекларации);
				КонецЕсли;
				
				Если Не ПустаяСтрока(ПозицияЧека.КодСтраныПроисхожденияТовара) Тогда
					ПараметрыТовараЧека.Вставить("countryOfOrigin", ПозицияЧека.КодСтраныПроисхожденияТовара);
				КонецЕсли;
				
				Если ПозицияЧека.Свойство("ОтраслевойРеквизит") И Не ПустаяСтрока(ПозицияЧека.ОтраслевойРеквизит.ИдентификаторФОИВ) Тогда
					ПараметрыОтраслевогоРеквизита = ПараметрыОтраслевогоРеквизита();
					ОтраслевойРеквизит = ПозицияЧека.ОтраслевойРеквизит;
					Если Не ПустаяСтрока(ОтраслевойРеквизит.ИдентификаторФОИВ) Тогда
						ПараметрыОтраслевогоРеквизита.identifierFOIV = ОтраслевойРеквизит.ИдентификаторФОИВ;
					КонецЕсли;
					Если Не ПустаяСтрока(ОтраслевойРеквизит.ДатаДокументаОснования) Тогда
						ПараметрыОтраслевогоРеквизита.documentDate = ОтраслевойРеквизит.ДатаДокументаОснования
					КонецЕсли;
					Если Не ПустаяСтрока(ОтраслевойРеквизит.НомерДокументаОснования) Тогда
						ПараметрыОтраслевогоРеквизита.documentNumber = ОтраслевойРеквизит.НомерДокументаОснования;
					КонецЕсли;
					Если Не ПустаяСтрока(ОтраслевойРеквизит.ЗначениеРеквизита) Тогда
						ПараметрыОтраслевогоРеквизита.attributeValue = ОтраслевойРеквизит.ЗначениеРеквизита;
					КонецЕсли;
					ПараметрыТовараЧека.Вставить("industryAttribute", ПараметрыОтраслевогоРеквизита);
				КонецЕсли;
				
				ПараметрыПробития.items.Добавить(ПараметрыТовараЧека);
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Таблица оплат
	СуммаЧека = 0;
	СуммаНаличные       = 0;
	СуммаЭлектронно     = 0;
	СуммаПредоплата     = 0;
	СуммаПостоплата     = 0;
	СуммаПредоставление = 0;

	Если ТаблицаОплат <> Неопределено Тогда
		ПараметрыОплатЧека = ПараметрыОплатЧека();
		
		Для ИндексОплаты = 0 По ТаблицаОплат.Количество() - 1 Цикл
			Если ТаблицаОплат[ИндексОплаты].ТипОплаты = Перечисления.ТипыОплатыККТ.Электронно Тогда
				СуммаЭлектронно = СуммаЭлектронно + ТаблицаОплат[ИндексОплаты].Сумма;
			ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = Перечисления.ТипыОплатыККТ.Предоплата Тогда
				СуммаПредоплата = СуммаПредоплата + ТаблицаОплат[ИндексОплаты].Сумма;
			ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = Перечисления.ТипыОплатыККТ.Постоплата Тогда
				СуммаПостоплата = СуммаПостоплата + ТаблицаОплат[ИндексОплаты].Сумма;
			ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = Перечисления.ТипыОплатыККТ.ВстречноеПредоставление Тогда
				СуммаПредоставление = СуммаПредоставление + ТаблицаОплат[ИндексОплаты].Сумма;
			Иначе
				СуммаНаличные = СуммаНаличные + ТаблицаОплат[ИндексОплаты].Сумма;
			КонецЕсли;
		КонецЦикла;
		
		ПараметрыОплатЧека.cash        = СуммаНаличные;
		ПараметрыОплатЧека.electronic  = СуммаЭлектронно;
		ПараметрыОплатЧека.barter      = СуммаПредоставление;
		ПараметрыОплатЧека.postPayment = СуммаПостоплата;
		ПараметрыОплатЧека.prePayment  = СуммаПредоплата;
		
		ЗаполнитьЗначенияСвойств(ПараметрыПробития.payments, ПараметрыОплатЧека);
		
	КонецЕсли;
	
	МодульОблачныхКасс = ОбщегоНазначенияБПО.ОбщийМодуль("ОблачныеКассы");
	Возврат МодульОблачныхКасс.ПробитьЧек(ДокументОперации, ИдентификаторОборудования, ПараметрыПробития);
	
КонецФункции

Процедура ПолучитьСтатусПробитияЧека(ДокументОперации, ДополнительныеПараметры) Экспорт
	
	РезультатПроверкиСтатуса = СтатусПробитияЧека(ДокументОперации);
	РезультатВыполненияОперации = РезультатВыполненияОперации(РезультатПроверкиСтатуса, ДополнительныеПараметры);
	ОбработатьРезультатФискализации(РезультатВыполненияОперации, ДополнительныеПараметры.ПараметрыОперации);
	
КонецПроцедуры 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция РезультатВыполненияОперации(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.ДанныеОперации.СтатусОперации = "Выполняется"
		Или Результат.ДанныеОперации.СтатусОперации = "Выполнена" Тогда
		РезультатПробития = Истина;
	Иначе
		РезультатПробития = Ложь;
	КонецЕсли;
	
	СтатусОперации = Результат.ДанныеОперации.СтатусОперации;
	РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(РезультатПробития, Неопределено, ДополнительныеПараметры.ИдентификаторУстройства);
	РезультатВыполнения.СтатусВОблачнойКассе = Результат.ДанныеОперации.СтатусОперации;
	
	Если Не РезультатПробития Тогда
		
		РезультатВыполнения.Вставить("ОписаниеОшибки", Результат.СообщениеОбОшибке);
		
	#Если НЕ МобильноеПриложениеСервер Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Запись статуса чека в очереди'",
			ОбщегоНазначенияБПО.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			ДополнительныеПараметры.ПараметрыОперации.ДокументОснование,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	#КонецЕсли
		
	Иначе
		
		Если Результат.ДанныеОперации.СтатусОперации = "Выполнена" Тогда
			
			РезультатОперации = Результат.Результат;
			
			РезультатВыполнения.Вставить("НомерСменыККТ" , РезультатОперации.shiftNumber);
			РезультатВыполнения.Вставить("НомерЧекаККТ"  , РезультатОперации.receiptNumber);
			РезультатВыполнения.Вставить("СтатусСмены", 2);
			РезультатВыполнения.Вставить("ДатаВремяЧека"          , ПреобразоватьДату(РезультатОперации.receiptDate));
			РезультатВыполнения.Вставить("ФискальныйПризнак"      , РезультатОперации.FNSign);
			РезультатВыполнения.Вставить("АдресСайтаПроверки"     , РезультатОперации.addressSiteInspections);
			РезультатВыполнения.Вставить("РегистрационныйНомерККТ", РезультатОперации.KKTSerialNumber);
			РезультатВыполнения.Вставить("ОперацияЗаписана"       , Истина);
			РезультатВыполнения.Вставить("НомерФискальногоНакопителя"       , РезультатОперации.FNSerialNumber);
			
			Попытка
				// Записать фискальную операцию.
				ОборудованиеЧекопечатающиеОблачныеККТВызовСервера.ЗаписатьФискальнуюОперацию(ДополнительныеПараметры.ПараметрыОперации, РезультатВыполнения);
			Исключение
				РезультатВыполнения.ОперацияЗаписана = Ложь;
			КонецПопытки;
			
		Иначе
			РезультатВыполнения.Вставить("ПараметрыОперации", ДополнительныеПараметры.ПараметрыОперации);
			РезультатВыполнения.Вставить("ИдентификаторУстройства", ДополнительныеПараметры.ИдентификаторУстройства);
		КонецЕсли;
		
	КонецЕсли;
	
	РаспределеннаяФискализацияПереопределяемый.ОбработатьСтатусПостановкиЧекаВОблачныйСервис(ДополнительныеПараметры.ПараметрыОперации.ДокументОснование, СтатусОперации, ДополнительныеПараметры.ПараметрыОперации, Результат.СообщениеОбОшибке);
	
	Возврат РезультатВыполнения;
	
КонецФункции

Процедура ОбработатьРезультатФискализации(РезультатВыполнения, ОбщиеПараметры) Экспорт
	
	Если РезультатВыполнения.Результат И РезультатВыполнения.СтатусВОблачнойКассе = "Выполняется" Тогда
		СтатусОперацииВСервисе = Перечисления.СтатусыОперацийВСервисеОблачныхКасс.Выполняется; 
		СтатусЧека = ПредопределенноеЗначение("Перечисление.СтатусЧекаККТВОчереди.Фискализируется");
	ИначеЕсли РезультатВыполнения.Результат И РезультатВыполнения.СтатусВОблачнойКассе = "Выполнена" Тогда
		СтатусОперацииВСервисе = Перечисления.СтатусыОперацийВСервисеОблачныхКасс.Выполнена;
		СтатусЧека = ПредопределенноеЗначение("Перечисление.СтатусЧекаККТВОчереди.Фискализирован");
		ТекстСообщения = "";
	ИначеЕсли РезультатВыполнения.Результат И РезультатВыполнения.СтатусВОблачнойКассе = "" Тогда
		СтатусОперацииВСервисе = Перечисления.СтатусыОперацийВСервисеОблачныхКасс.ПустаяСсылка();
		СтатусЧека = ПредопределенноеЗначение("Перечисление.СтатусЧекаККТВОчереди.Фискализирован");
		ТекстСообщения = "";
	Иначе
		СтатусОперацииВСервисе = Перечисления.СтатусыОперацийВСервисеОблачныхКасс.Ошибка;
		СтатусЧека = ПредопределенноеЗначение("Перечисление.СтатусЧекаККТВОчереди.Ошибка");
		ТекстСообщения = РезультатВыполнения.ОписаниеОшибки;
	КонецЕсли;
	
	Если РезультатВыполнения.Свойство("ДополнительныеПараметры") Тогда
		ОбщиеПараметры.Вставить("ДополнительныеПараметры", РезультатВыполнения.ДополнительныеПараметры);
	КонецЕсли;
	
	РаспределеннаяФискализация.ЗаписатьСтатусЧекаВОчереди(ОбщиеПараметры, СтатусЧека, Неопределено, ТекстСообщения, СтатусОперацииВСервисе);
	
КонецПроцедуры

Функция ЗаполнитьДанныеАгента(ДанныеАгента) 
	
	ПараметрыАгента = ПараметрыАгента();
	Если Не ПустаяСтрока(ДанныеАгента.ПлатежныйАгент.Операция) Тогда // Операция платежного агента
		ПараметрыАгента.agentOperation = ДанныеАгента.ПлатежныйАгент.Операция;
	КонецЕсли;
	Если Не ПустаяСтрока(ДанныеАгента.ПлатежныйАгент.Телефон) Тогда // Телефон платежного агента            
		Телефон = МенеджерОборудованияКлиентСервер.АбонентскийНомерФорматФФД(ДанныеАгента.ПлатежныйАгент.Телефон);
		ПараметрыАгента.agentPhone = Телефон;
	КонецЕсли;
	Если Не ПустаяСтрока(ДанныеАгента.ОператорПоПриемуПлатежей.Телефон) Тогда // Телефон оператора по приему платежей         
		Телефон = МенеджерОборудованияКлиентСервер.АбонентскийНомерФорматФФД(ДанныеАгента.ОператорПоПриемуПлатежей.Телефон);
		ПараметрыАгента.paymentProcessorPhone = Телефон;
	КонецЕсли;
	Если Не ПустаяСтрока(ДанныеАгента.ОператорПеревода.Телефон) Тогда // Телефон оператора перевода           
		Телефон = МенеджерОборудованияКлиентСервер.АбонентскийНомерФорматФФД(ДанныеАгента.ОператорПеревода.Телефон);
		ПараметрыАгента.acquirerOperatorPhone = Телефон;
	КонецЕсли;
	Если Не ПустаяСтрока(ДанныеАгента.ОператорПеревода.Наименование) Тогда // Наименование оператора перевода
		ПараметрыАгента.acquirerOperatorName = ДанныеАгента.ОператорПеревода.Наименование;
	КонецЕсли;
	Если Не ПустаяСтрока(ДанныеАгента.ОператорПеревода.Адрес) Тогда // Адрес оператора перевода
		ПараметрыАгента.acquirerOperatorAddress = ДанныеАгента.ОператорПеревода.Адрес;
	КонецЕсли;
	Если Не ПустаяСтрока(ДанныеАгента.ОператорПеревода.ИНН) Тогда // ИНН оператора перевода
		ПараметрыАгента.acquirerOperatorINN = ДанныеАгента.ОператорПеревода.ИНН;
	КонецЕсли;
	
	Возврат ПараметрыАгента;
	
КонецФункции

Функция ЗаполнитьДанныеПоставщика(ДанныеПоставщика) 
	
	ПараметрыПоставщика = ПараметрыПоставщика();
	Если Не ПустаяСтрока(ДанныеПоставщика.Телефон) Тогда // Телефон поставщика      
		Телефон = МенеджерОборудованияКлиентСервер.АбонентскийНомерФорматФФД(ДанныеПоставщика.Телефон);
		ПараметрыПоставщика.phone = Телефон;
	КонецЕсли;
	Если Не ПустаяСтрока(ДанныеПоставщика.Наименование) Тогда // Наименование поставщика
		ПараметрыПоставщика.name = ДанныеПоставщика.Наименование
	КонецЕсли;
	Если Не ПустаяСтрока(ДанныеПоставщика.ИНН) Тогда // ИНН поставщика
		ПараметрыПоставщика.INN = ДанныеПоставщика.ИНН;
	КонецЕсли;
	
	Возврат ПараметрыПоставщика;
	
КонецФункции

Процедура ЗаписатьСведенияОПокупателе(ПараметрыШапкиЧека, ПараметрыДокумента, СведенияОПокупателе);
	
	ПараметрыПокупателя = ПараметрыПокупателя();
	
	ТипПерсональныхДанных = ПараметрыДокумента.ТипПерсональныхДанных;
	Покупатель = ПараметрыДокумента.СведенияОПокупателе.Покупатель;
	Если ПустаяСтрока(Покупатель) Тогда
		Покупатель = ПараметрыДокумента.Получатель;
	КонецЕсли;
	
	Если СведенияОПокупателе <> Неопределено И ТипПерсональныхДанных <> Неопределено И ТипПерсональныхДанных = Перечисления.ТипыПерсональныхДанныхККТ.ИНН Тогда
		ПокупательИНН = СведенияОПокупателе.ИНН
	Иначе
		ПокупательИНН = ПараметрыДокумента.СведенияОПокупателе.ПокупательИНН;
	КонецЕсли;
	
	Если ПустаяСтрока(ПокупательИНН) Тогда
		ПокупательИНН = ПараметрыДокумента.ПолучательИНН;
	КонецЕсли;
	
	Если Не ПустаяСтрока(Покупатель) Тогда
		ПараметрыПокупателя.Info = Покупатель;
	КонецЕсли;
	Если Не ПустаяСтрока(ПокупательИНН) Тогда
		ПараметрыПокупателя.INN = ПокупательИНН;
	КонецЕсли;
	Если Не ПустаяСтрока(ПараметрыДокумента.СведенияОПокупателе.ПокупательАдрес) Тогда
		ПараметрыПокупателя.Address = ПараметрыДокумента.СведенияОПокупателе.ПокупательАдрес;
	КонецЕсли;
	
	Если СведенияОПокупателе <> Неопределено И ТипПерсональныхДанных <> Неопределено И ТипПерсональныхДанных = Перечисления.ТипыПерсональныхДанныхККТ.ПаспортныеДанные Тогда
		
		Если Не ПустаяСтрока(СведенияОПокупателе.Гражданство) Тогда
			ПараметрыПокупателя.Citizenship = СведенияОПокупателе.Гражданство;
		КонецЕсли;
		
		Если Не ПустаяСтрока(СведенияОПокупателе.ВидДокумента) Тогда
			ВидДокумента = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.КодВидДокументаУдостоверяющегоЛичность(СведенияОПокупателе.ВидДокумента);
			ПараметрыПокупателя.DocumentTypeCode = ВидДокумента;
		КонецЕсли;
		
		Если Не ПустаяСтрока(СведенияОПокупателе.ДанныеДокумента) Тогда
			ПараметрыПокупателя.DocumentData = СведенияОПокупателе.ДанныеДокумента;
		КонецЕсли;
		
		Если Не ПустаяСтрока(СведенияОПокупателе.ДатаРождения) Тогда
			// АПК: 1367-выкл, АПК: СведенияОПокупателе-выкл особенность локального законодательства
			ДатаРождения = Формат(СведенияОПокупателе.ДатаРождения, "ДФ=""дд.ММ.гггг""");
			// АПК: 1367-вкл, АПК: 335-вкл 
			ПараметрыПокупателя.DateOfBirth = ДатаРождения;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыШапкиЧека.Вставить("customerDetail" ,ПараметрыПокупателя);
	
КонецПроцедуры

Процедура ЗаписатьДанныеКодаТоварнойНоменклатуры(ПараметрыТовараЧека, Позиция, ТипРасчета, ДробноеКоличество);
	
	ДанныеКодаТоварнойНоменклатуры = Позиция.ДанныеКодаТоварнойНоменклатуры;
	ДанныеКодаТовара = Неопределено;
	
	МодульМенеджерОборудованияМаркировкаКлиентСервер = ОбщегоНазначенияБПО.ОбщийМодуль("МенеджерОборудованияМаркировкаКлиентСервер");
	Если НЕ ПустаяСтрока(Позиция.КодВидаНоменклатурнойКлассификации) Тогда
		ДанныеКодаТовара = МодульМенеджерОборудованияМаркировкаКлиентСервер.РазобратьШтриховойКодТовара(Позиция.КодВидаНоменклатурнойКлассификации);
		РеквизитКодаТовара = ДанныеКодаТовара.РеквизитКодаТовара;
	ИначеЕсли НЕ ПустаяСтрока(Позиция.ШтрихкодBase64) Тогда
		ДанныеКодаТовара = МодульМенеджерОборудованияМаркировкаКлиентСервер.РазобратьШтриховойКодТовара(Позиция.ШтрихкодBase64, Истина);
		РеквизитКодаТовара = ДанныеКодаТовара.РеквизитКодаТовара;
	Иначе
		ДанныеКодаТовара = МодульМенеджерОборудованияМаркировкаКлиентСервер.РазобратьШтриховойКодТовара(Позиция.Штрихкод);
		РеквизитКодаТовара = ДанныеКодаТовара.РеквизитКодаТовара;
	КонецЕсли;
	
	ТипыИдентификаторов = МенеджерОборудованияМаркировка.КодТовараЗаполняетсяДляТиповИдентификаторов();
	
	Если (НЕ ПустаяСтрока(РеквизитКодаТовара) И НЕ ПустаяСтрока(ДанныеКодаТовара.ШтрихкодBase64)) Тогда // Запись тега 1163
		Если ПустаяСтрока(Позиция.КонтрольнаяМарка) И ТипыИдентификаторов.Найти(ДанныеКодаТовара.ТипИдентификатораТовара)<> Неопределено Тогда
			ПараметрыКодаТовара = Новый Структура;
			Если ДанныеКодаТовара.ТипИдентификатораТовара = Перечисления.ТипыИдентификаторовТовараККТ.ИзделияИзНатуральногоМеха Тогда
				ПараметрыКодаТовара.Вставить(ДанныеКодаТовара.НаименованиеРеквизита, МенеджерОборудованияКлиентСервер.Base64ВШтрихкод(ДанныеКодаТовара.ШтрихкодBase64));
				// Заполнение отраслевых реквизитов в соответствии с требованиями ЦРПТ по ТипИдентификатораТовара
				МенеджерОборудованияМаркировка.ЗаполнитьОтраслевойРеквизитИзделияИзНатуральногоМеха(Позиция);
			ИначеЕсли ДанныеКодаТовара.ТипИдентификатораТовара = Перечисления.ТипыИдентификаторовТовараККТ.КодТовараНеРаспознан Тогда
				ПараметрыКодаТовара.Вставить(ДанныеКодаТовара.НаименованиеРеквизита, ДанныеКодаТовара.EAN);
			Иначе
				ШтрихкодBase64 = МенеджерОборудованияМаркировка.ШтрихкодДляТега1163Base64(ДанныеКодаТовара);
				ПараметрыКодаТовара.Вставить(ДанныеКодаТовара.НаименованиеРеквизита, ШтрихкодBase64);
			КонецЕсли;
			ПараметрыТовараЧека.Вставить("goodCodeData", ПараметрыКодаТовара);
		КонецЕсли;
	КонецЕсли; 
	
	Если НЕ ПустаяСтрока(РеквизитКодаТовара) ИЛИ НЕ ПустаяСтрока(Позиция.КонтрольнаяМарка) Тогда
		
		Если ТипРасчета = 1 Тогда
			Если ДробноеКоличество Тогда
				ПланируемыйСтатусТовара = 2;
			Иначе
				ПланируемыйСтатусТовара = 1;
			КонецЕсли;
		ИначеЕсли ТипРасчета = 2 Тогда
			Если ДробноеКоличество Тогда
				ПланируемыйСтатусТовара = 4;
			Иначе
				ПланируемыйСтатусТовара = 3;
			КонецЕсли;
		КонецЕсли;
		ПараметрыТовараЧека.Вставить("plannedStatus", ПланируемыйСтатусТовара);
		
	КонецЕсли;
	
	Если ДанныеКодаТовара.ТипИдентификатораТовара = Перечисления.ТипыИдентификаторовТовараККТ.КодТовараВФорматеDataMatrixGS1 И ДанныеКодаТовара.ТехническийКод Тогда
		МенеджерОборудованияМаркировка.ЗаполнитьОтраслевойРеквизитМолочнаяПродукцияСНечитаемымиКМ(Позиция);
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает дату в формате UNIX-даты с добавлением смещения по часовому поясу.
//
// Параметры:
//  НеформатированнаяДата - Строка
//
// Возвращаемое значение:
//  Дата 
Функция ПреобразоватьДату(НеформатированнаяДата) Экспорт
	
	НеформатированнаяДата = СтрЗаменить(НеформатированнаяДата, "-", "");
	НеформатированнаяДата = СтрЗаменить(НеформатированнаяДата, ":", "");
	НеформатированнаяДата = СтрЗаменить(НеформатированнаяДата, "T", "");
	НеформатированнаяДата = Лев(СокрЛП(НеформатированнаяДата), СтрДлина(СокрЛП(НеформатированнаяДата))); 
	ФорматированнаяДата = Дата(НеформатированнаяДата);
	
	Возврат ФорматированнаяДата;
	
КонецФункции

#Область Конструкторы

Функция ПараметрыПробитияЧека()
	
	ПараметрыПробитияЧека = Новый Структура;
	ПараметрыПробитияЧека.Вставить("documentHeader", ПараметрыШапкиЧека());
	ПараметрыПробитияЧека.Вставить("items",          Новый Массив);
	ПараметрыПробитияЧека.Вставить("payments",       ПараметрыОплатЧека());
	
	Возврат ПараметрыПробитияЧека;
	
КонецФункции

Функция ПараметрыШапкиЧека()
	
	ПараметрыШапкиЧека = Новый Структура;
	ПараметрыШапкиЧека.Вставить("cashierName", "");
	ПараметрыШапкиЧека.Вставить("operationType", 1);
	ПараметрыШапкиЧека.Вставить("isCorrection", Ложь);
	ПараметрыШапкиЧека.Вставить("taxationSystem", 0);
	ПараметрыШапкиЧека.Вставить("customerEmail", "");
	ПараметрыШапкиЧека.Вставить("customerPhone", "");
	ПараметрыШапкиЧека.Вставить("senderEmail", "");
	ПараметрыШапкиЧека.Вставить("saleAddress", "");
	ПараметрыШапкиЧека.Вставить("saleLocation", "");
	ПараметрыШапкиЧека.Вставить("automatNumber", "");
	
	Возврат ПараметрыШапкиЧека;
	
КонецФункции

Функция ПараметрыКоррекции()
	
	ПараметрыКоррекции = Новый Структура;
	ПараметрыКоррекции.Вставить("type", 0);
	ПараметрыКоррекции.Вставить("number", "");
	ПараметрыКоррекции.Вставить("description", "");
	ПараметрыКоррекции.Вставить("date", Дата(2024,10,10));
	
	Возврат ПараметрыКоррекции;
	
КонецФункции

Функция ПараметрыПокупателя()
	
	ПараметрыПокупателя = Новый Структура;
	ПараметрыПокупателя.Вставить("info");
	ПараметрыПокупателя.Вставить("INN");
	ПараметрыПокупателя.Вставить("dateOfBirth");
	ПараметрыПокупателя.Вставить("citizenship");
	ПараметрыПокупателя.Вставить("documentTypeCode");
	ПараметрыПокупателя.Вставить("documentData");
	ПараметрыПокупателя.Вставить("address");
	
	Возврат ПараметрыПокупателя;
	
КонецФункции

Функция ПараметрыАгента()
	
	ПараметрыАгента = Новый Структура;
	ПараметрыАгента.Вставить("agentOperation", "");
	ПараметрыАгента.Вставить("agentPhone", "");
	ПараметрыАгента.Вставить("paymentProcessorPhone", "");
	ПараметрыАгента.Вставить("acquirerOperatorPhone", "");
	ПараметрыАгента.Вставить("acquirerOperatorName", "");
	ПараметрыАгента.Вставить("acquirerOperatorAddress", "");
	ПараметрыАгента.Вставить("acquirerOperatorINN", "");
	
	Возврат ПараметрыАгента;
	
КонецФункции 

Функция ПараметрыПоставщика()
	
	ПараметрыПоставщика = Новый Структура;
	ПараметрыПоставщика.Вставить("phone", "");
	ПараметрыПоставщика.Вставить("name", "");
	ПараметрыПоставщика.Вставить("INN", "");
	
	Возврат ПараметрыПоставщика;
	
КонецФункции 

Функция ПараметрыОтраслевогоРеквизита()
	
	ПараметрыОтраслевогоРеквизита = Новый Структура;
	ПараметрыОтраслевогоРеквизита.Вставить("identifierFOIV", "");
	ПараметрыОтраслевогоРеквизита.Вставить("documentDate", Дата(1,1,1));
	ПараметрыОтраслевогоРеквизита.Вставить("documentNumber", "");
	ПараметрыОтраслевогоРеквизита.Вставить("attributeValue", "");
	
	Возврат ПараметрыОтраслевогоРеквизита;
	
КонецФункции

Функция ПараметрыОперационногоРеквизита()
	
	ПараметрыОперационногоРеквизита = Новый Структура;
	ПараметрыОперационногоРеквизита.Вставить("dateTime", Дата(1,1,1));
	ПараметрыОперационногоРеквизита.Вставить("operationID", "");
	ПараметрыОперационногоРеквизита.Вставить("operationData", "");
	
	Возврат ПараметрыОперационногоРеквизита;
	
КонецФункции

Функция ПараметрыТовараЧека()
	
	ПараметрыТовараЧека = Новый Структура;
	ПараметрыТовараЧека.Вставить("name", "");
	ПараметрыТовараЧека.Вставить("quantity", 1);
	ПараметрыТовараЧека.Вставить("priceWithDiscount", 0);
	ПараметрыТовараЧека.Вставить("amountWithDiscount", 0);
	ПараметрыТовараЧека.Вставить("VATRate", 20);
	ПараметрыТовараЧека.Вставить("VATAmount", 0);
	ПараметрыТовараЧека.Вставить("paymentMethod", 4);
	ПараметрыТовараЧека.Вставить("calculationSubject", 1);
	ПараметрыТовараЧека.Вставить("measureOfQuantity", 255);
	
	Возврат ПараметрыТовараЧека;
	
КонецФункции

Функция ПараметрыДробногоКоличества()
	
	ПараметрыДробногоКоличества = Новый Структура;
	ПараметрыДробногоКоличества.Вставить("numerator", 0);
	ПараметрыДробногоКоличества.Вставить("denominator", 0);
	
	Возврат ПараметрыДробногоКоличества;
	
КонецФункции

Функция ПараметрыОплатЧека()
	
	ПараметрыОплатЧека = Новый Структура;
	ПараметрыОплатЧека.Вставить("cash");
	ПараметрыОплатЧека.Вставить("electronic");
	ПараметрыОплатЧека.Вставить("barter");
	ПараметрыОплатЧека.Вставить("postPayment");
	ПараметрыОплатЧека.Вставить("prePayment");
	
	Возврат ПараметрыОплатЧека;
	
КонецФункции

#КонецОбласти

#КонецОбласти
