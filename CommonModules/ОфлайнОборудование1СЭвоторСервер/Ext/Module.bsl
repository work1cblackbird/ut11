////////////////////////////////////////////////////////////////////////////////
// Подсистема "Офлайн-оборудование".
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ТоварыИДокументы

// Возвращает информацию обо всех товарах в определенном магазине ({storeUuid}) пользователя платформы.
//
// Параметры:
//  Настройки - Структура - техническая информация об устройстве, поля:
//   * Токен - Строка - токен интеграции Эвотор из личного кабинета,
//   * МагазинЗначение - Строка - УИД магазина из облака Эвотор для передачи товаров.
//  Товары - Массив - возвращаемый массив товаров из указанного магазина пользователя Эвотор.
//  ЕстьОшибки - Булево - флаг ошибки при обработке;
//  СообщениеОбОшибке - Строка - строка сообщения об ошибке;
//  ВестиЛог - Булево - флаг ведения записей в журнале регистрации;
//
Процедура ВыполнитьЗагрузкуТоваров(Настройки, Товары, ЕстьОшибки, СообщениеОбОшибке, ВестиЛог = Истина) Экспорт
	
	ЗаголовокЖурнала = НСтр("ru = 'Загрузка товаров из ККТ.'", ОбщегоНазначенияБПО.КодОсновногоЯзыка());
	
	Соединение = HTTPСоединение(Настройки);
	Если Соединение.HTTPСоединение = Неопределено Тогда
		СообщениеОбОшибке = Соединение.СообщениеОбОшибке;
		ЕстьОшибки = Истина;
		Если ЕстьОшибки Тогда
#Если Не МобильноеПриложениеСервер Тогда 
			ЗаписьЖурналаРегистрации(ЗаголовокЖурнала,
				УровеньЖурналаРегистрации.Предупреждение,,, СообщениеОбОшибке);
#КонецЕсли
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ЗагрузитьТовары(Соединение.HTTPСоединение, Настройки, Товары, ЕстьОшибки, СообщениеОбОшибке);
	
	Если ЕстьОшибки Тогда
#Если Не МобильноеПриложениеСервер Тогда 
			ЗаписьЖурналаРегистрации(ЗаголовокЖурнала,
				УровеньЖурналаРегистрации.Ошибка,,, СообщениеОбОшибке);
#КонецЕсли
	КонецЕсли;
	
	Если ВестиЛог Тогда
#Если Не МобильноеПриложениеСервер Тогда 
		ЗаписьЖурналаРегистрации(ЗаголовокЖурнала,
				УровеньЖурналаРегистрации.Информация,,,
				НСтр("ru = 'Завершение обмена.'"));
#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

// Загружает информацию об одном или нескольких товарах в определенный магазин ({storeUuid}) пользователя платформы.
// При обновлении товара необходимо передавать полный набор полей описания товара. Облако удаляет старые и записывает новые поля.
//
// Параметры:
//  Настройки - Структура - техническая информация об устройстве, поля:
//   * Токен - Строка - токен интеграции Эвотор из личного кабинета,
//   * МагазинЗначение - Строка - УИД магазина из облака Эвотор для передачи товаров.
//  Товары - Массив - список товаров для отправки в магазин Эвотор;
//  ЕстьОшибки - Булево - флаг ошибки при обработке;
//  СообщениеОбОшибке - Строка - строка сообщения об ошибке;
//  ВестиЛог - Булево - флаг ведения записей в журнале регистрации;
//
Процедура ВыполнитьВыгрузкуТоваров(Настройки, Товары, ЕстьОшибки, СообщениеОбОшибке, ВестиЛог = Истина) Экспорт
	
	ЗаголовокЖурнала = НСтр("ru = 'Выгрузка товаров на ККТ.'", ОбщегоНазначенияБПО.КодОсновногоЯзыка());
	
	Соединение = HTTPСоединение(Настройки);
	Если Соединение.HTTPСоединение = Неопределено Тогда
		СообщениеОбОшибке = Соединение.СообщениеОбОшибке;
		ЕстьОшибки = Истина;
		Если ЕстьОшибки Тогда
#Если Не МобильноеПриложениеСервер Тогда 
			ЗаписьЖурналаРегистрации(ЗаголовокЖурнала,
				УровеньЖурналаРегистрации.Предупреждение,,, СообщениеОбОшибке);
#КонецЕсли
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ЗарегистрироватьТовары(Соединение.HTTPСоединение, Настройки, Товары, ЕстьОшибки, СообщениеОбОшибке);
	
	Если ЕстьОшибки Тогда
#Если Не МобильноеПриложениеСервер Тогда 
			ЗаписьЖурналаРегистрации(ЗаголовокЖурнала,
				УровеньЖурналаРегистрации.Ошибка,,, СообщениеОбОшибке);
#КонецЕсли
	КонецЕсли;
	
	Если ВестиЛог Тогда
#Если Не МобильноеПриложениеСервер Тогда 
		ЗаписьЖурналаРегистрации(ЗаголовокЖурнала,
				УровеньЖурналаРегистрации.Информация,,,
				НСтр("ru = 'Завершение обмена.'"));
#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

// HTTP-запрос с пустым массивом удалит все товары в магазине. Чтобы удалить определенный товар, в теле HTTP-запроса требуется указать его UUID.
//
// Параметры:
//  Настройки - Структура - техническая информация об устройстве, поля:
//   * Токен - Строка - токен интеграции Эвотор из личного кабинета,
//   * МагазинЗначение - Строка - УИД магазина из облака Эвотор для удаления товаров.
//  Товары - Массив - список товаров для удаления в магазине Эвотор;
//  ЕстьОшибки - Булево - флаг ошибки при обработке;
//  СообщениеОбОшибке - Строка - строка сообщения об ошибке;
//  ВестиЛог - Булево - флаг ведения записей в журнале регистрации;
//
Процедура ВыполнитьОчисткуТоваров(Настройки, Товары, ЕстьОшибки, СообщениеОбОшибке, ВестиЛог = Истина) Экспорт
	
	ЗаголовокЖурнала = НСтр("ru = 'Очистка товаров на ККТ.'", ОбщегоНазначенияБПО.КодОсновногоЯзыка());
	
	Соединение = HTTPСоединение(Настройки);
	Если Соединение.HTTPСоединение = Неопределено Тогда
		СообщениеОбОшибке = Соединение.СообщениеОбОшибке;
		ЕстьОшибки = Истина;
		Если ЕстьОшибки Тогда
#Если Не МобильноеПриложениеСервер Тогда 
			ЗаписьЖурналаРегистрации(ЗаголовокЖурнала,
				УровеньЖурналаРегистрации.Предупреждение,,, СообщениеОбОшибке);
#КонецЕсли
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ОчиститьТовары(Соединение.HTTPСоединение, Настройки, Товары, ЕстьОшибки, СообщениеОбОшибке);
	
	Если ЕстьОшибки Тогда
#Если Не МобильноеПриложениеСервер Тогда 
			ЗаписьЖурналаРегистрации(ЗаголовокЖурнала,
				УровеньЖурналаРегистрации.Ошибка,,, СообщениеОбОшибке);
#КонецЕсли
	КонецЕсли;
	
	Если ВестиЛог Тогда
#Если Не МобильноеПриложениеСервер Тогда 
		ЗаписьЖурналаРегистрации(ЗаголовокЖурнала,
				УровеньЖурналаРегистрации.Информация,,,
				НСтр("ru = 'Завершение обмена.'"));
#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

// Возвращает таблицу значений документов.
//
// Параметры:
//  Настройки - Структура - техническая информация об устройстве, поля:
//   * Токен - Строка - токен интеграции Эвотор из личного кабинета,
//   * МагазинЗначение - Строка - УИД магазина из облака Эвотор для загрузки документов,
//   * ТерминалЗначение - Строка - УИД терминала из облака Эвотор для загрузки документов (необязательно),
//   * ПериодНачалоВыгрузки - ДатаВремя - Желаемая дата начала загрузки документов из Облака Эвотор (необязательно),
//   * ПериодОкончаниеВыгрузки - ДатаВремя - Желаемая дата окончания загрузки документов из Облака Эвотор (необязательно),
//   * ТипыДокументов - Строка - Типы выгружаемых документов в формате облака Эвотор (необязательно).
//  КассовыеДокументы - ТаблицаЗначений - возвращаемая таблица кассовых документов.
//  ЕстьОшибки - Булево - флаг ошибки при обработке;
//  СообщениеОбОшибке - Строка - строка сообщения об ошибке;
//  ВестиЛог - Булево - флаг ведения записей в журнале регистрации;
//
Процедура ВыполнитьЗагрузкуСпискаДокументов(Настройки, КассовыеДокументы, ЕстьОшибки, СообщениеОбОшибке, ВестиЛог = Истина) Экспорт
	
	ЗаголовокЖурнала = НСтр("ru = 'Загрузка кассовых документов на ККТ.'", ОбщегоНазначенияБПО.КодОсновногоЯзыка());
	
	Соединение = HTTPСоединение(Настройки);
	Если Соединение.HTTPСоединение = Неопределено Тогда
		СообщениеОбОшибке = Соединение.СообщениеОбОшибке;
		ЕстьОшибки = Истина;
		Если ВестиЛог Тогда
#Если Не МобильноеПриложениеСервер Тогда 
			ЗаписьЖурналаРегистрации(ЗаголовокЖурнала,
				УровеньЖурналаРегистрации.Предупреждение,,, СообщениеОбОшибке);
#КонецЕсли
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если Настройки.Свойство("ИспользоватьФорматЗагрузкиВ2") И Настройки.ИспользоватьФорматЗагрузкиВ2 Тогда
		ЗагрузитьКассовыеДокументы(Соединение.HTTPСоединение, Настройки, КассовыеДокументы, ЕстьОшибки, СообщениеОбОшибке);
	Иначе
		ЗагрузитьКассовыеДокументыФормат10(Соединение.HTTPСоединение, Настройки, КассовыеДокументы, ЕстьОшибки, СообщениеОбОшибке);
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
#Если Не МобильноеПриложениеСервер Тогда 
			ЗаписьЖурналаРегистрации(ЗаголовокЖурнала,
				УровеньЖурналаРегистрации.Ошибка,,, СообщениеОбОшибке);
#КонецЕсли
	КонецЕсли;
	
	Если ВестиЛог Тогда
#Если Не МобильноеПриложениеСервер Тогда 
		ЗаписьЖурналаРегистрации(ЗаголовокЖурнала,
				УровеньЖурналаРегистрации.Информация,,,
				НСтр("ru = 'Завершение обмена.'"));
#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СущностиПользователяЭвотор

// Возвращает массив с информацией о всех магазинах пользователя.
//
// Параметры:
//  Настройки - Структура - техническая информация об устройстве, поля:
//   * Токен - Строка - токен интеграции Эвотор из личного кабинета.
//  СписокМагазинов - Массив - возвращаемый массив магазинов пользователя Эвотор.
//  ЕстьОшибки - Булево - флаг ошибки при обработке;
//  СообщениеОбОшибке - Строка - строка сообщения об ошибке;
//  ВестиЛог - Булево - флаг ведения записей в журнале регистрации;
//
Процедура ВыполнитьЗагрузкуМагазинов(Настройки, СписокМагазинов, ЕстьОшибки, СообщениеОбОшибке, ВестиЛог = Истина) Экспорт
	
	ЗаголовокЖурнала = НСтр("ru = 'Загрузка магазинов Эвотор.'", ОбщегоНазначенияБПО.КодОсновногоЯзыка());
	
	Соединение = HTTPСоединение(Настройки);
	Если Соединение.HTTPСоединение = Неопределено Тогда
		СообщениеОбОшибке = Соединение.СообщениеОбОшибке;
		ЕстьОшибки = Истина;
		Если ВестиЛог Тогда
#Если Не МобильноеПриложениеСервер Тогда 
			ЗаписьЖурналаРегистрации(ЗаголовокЖурнала,
				УровеньЖурналаРегистрации.Предупреждение,,, СообщениеОбОшибке);
#КонецЕсли
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ЗагрузитьМагазины(Соединение.HTTPСоединение, Настройки, СписокМагазинов, ЕстьОшибки, СообщениеОбОшибке);
	
	Если ЕстьОшибки Тогда
#Если Не МобильноеПриложениеСервер Тогда 
			ЗаписьЖурналаРегистрации(ЗаголовокЖурнала,
				УровеньЖурналаРегистрации.Ошибка,,, СообщениеОбОшибке);
#КонецЕсли
	КонецЕсли;
	
	Если ВестиЛог Тогда
#Если Не МобильноеПриложениеСервер Тогда 
		ЗаписьЖурналаРегистрации(ЗаголовокЖурнала,
				УровеньЖурналаРегистрации.Информация,,,
				НСтр("ru = 'Завершение обмена.'"));
#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

// Возвращает массив с информацией о всех сотрудниках пользователя. Под сотрудниками понимаются пользователи смарт-терминалов, например, кассиры.
//
// Параметры:
//  Настройки - Структура - техническая информация об устройстве, поля:
//   * Токен - Строка - токен интеграции Эвотор из личного кабинета.
//  СписокСотрудников - Массив - возвращаемый массив магазинов пользователя Эвотор.
//  ЕстьОшибки - Булево - флаг ошибки при обработке;
//  СообщениеОбОшибке - Строка - строка сообщения об ошибке;
//  ВестиЛог - Булево - флаг ведения записей в журнале регистрации.
//
Процедура ВыполнитьЗагрузкуСотрудников(Настройки, СписокСотрудников, ЕстьОшибки, СообщениеОбОшибке, ВестиЛог = Истина) Экспорт
	Возврат;
КонецПроцедуры

// Возвращает массив с информацией о всех терминалах пользователя.
//
// Параметры:
//  Настройки - Структура - техническая информация об устройстве, поля:
//   * Токен - Строка - токен интеграции Эвотор из личного кабинета.
//  СписокТерминалов - Массив - возвращаемый массив магазинов пользователя Эвотор.
//  ЕстьОшибки - Булево - флаг ошибки при обработке;
//  СообщениеОбОшибке - Строка - строка сообщения об ошибке;
//  ВестиЛог - Булево - флаг ведения записей в журнале регистрации.
//
Процедура ВыполнитьЗагрузкуТерминалов(Настройки, СписокТерминалов, ЕстьОшибки, СообщениеОбОшибке, ВестиЛог = Истина) Экспорт
	
	ЗаголовокЖурнала = НСтр("ru = 'Загрузка магазинов Эвотор.'", ОбщегоНазначенияБПО.КодОсновногоЯзыка());
	
	Соединение = HTTPСоединение(Настройки);
	Если Соединение.HTTPСоединение = Неопределено Тогда
		СообщениеОбОшибке = Соединение.СообщениеОбОшибке;
		ЕстьОшибки = Истина;
		Если ВестиЛог Тогда
#Если Не МобильноеПриложениеСервер Тогда 
			ЗаписьЖурналаРегистрации(ЗаголовокЖурнала,
				УровеньЖурналаРегистрации.Предупреждение,,, СообщениеОбОшибке);
#КонецЕсли
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ЗагрузитьСмартТерминалы(Соединение.HTTPСоединение, Настройки, СписокТерминалов, ЕстьОшибки, СообщениеОбОшибке);
	
	Если ЕстьОшибки Тогда
#Если Не МобильноеПриложениеСервер Тогда 
			ЗаписьЖурналаРегистрации(ЗаголовокЖурнала,
				УровеньЖурналаРегистрации.Ошибка,,, СообщениеОбОшибке);
#КонецЕсли
	КонецЕсли;
	
	Если ВестиЛог Тогда
#Если Не МобильноеПриложениеСервер Тогда 
		ЗаписьЖурналаРегистрации(ЗаголовокЖурнала,
				УровеньЖурналаРегистрации.Информация,,,
				НСтр("ru = 'Завершение обмена.'"));
#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СхемыИДополнительныеПоляТоваров

// Возвращает схемы товаров для определенного магазина ({storeUuid}) пользователя платформы.
// Эвотор возвращает схемы в соответствии с приложением, создавшим схемы.
// Эвотор определяет приложение по токену, который сторонний сервис передает в заголовке X-Authorization.
//
// Параметры:
//  Параметры - Структура - Параметры
//  ЕстьОшибки - Булево - флаг ошибки при обработке;
//  СообщениеОбОшибке - Строка - строка сообщения об ошибке;
//  ВестиЛог - Булево - флаг ведения записей в журнале регистрации;
//
Процедура ВыполнитьЗагрузкуСхемыТоваров(Параметры, ЕстьОшибки, СообщениеОбОшибке, ВестиЛог = Истина) Экспорт
	Возврат;
КонецПроцедуры

// Удаляет указанные схемы. В теле запроса укажите один или несколько идентификаторов схем, которые требуется удалить.
//
// Параметры:
//  Параметры - Структура - Параметры
//  ЕстьОшибки - Булево - флаг ошибки при обработке;
//  СообщениеОбОшибке - Строка - строка сообщения об ошибке;
//  ВестиЛог - Булево - флаг ведения записей в журнале регистрации;
//
Процедура ВыполнитьУдалениеСхемыТоваров(Параметры, ЕстьОшибки, СообщениеОбОшибке, ВестиЛог = Истина) Экспорт
	Возврат;
КонецПроцедуры

// Создает/изменяет схемы товаров для определенного магазина ({storeUuid}) пользователя платформы.
// Эвотор возвращает схемы в соответствии с приложением, создавшим схемы.
// Эвотор определяет приложение по токену, который сторонний сервис передает в заголовке X-Authorization.
//
// Параметры:
//  Параметры - Структура - Параметры
//  ЕстьОшибки - Булево - флаг ошибки при обработке;
//  СообщениеОбОшибке - Строка - строка сообщения об ошибке;
//  ВестиЛог - Булево - флаг ведения записей в журнале регистрации;
//
Процедура ВыполнитьСозданиеСхемыТоваров(Параметры, ЕстьОшибки, СообщениеОбОшибке, ВестиЛог = Истина) Экспорт
	Возврат;
КонецПроцедуры

// Возвращает информацию обо всех товарах в определенном магазине ({storeUuid}) пользователя платформы.
//
// Параметры:
//  Параметры - Структура - Параметры
//  ЕстьОшибки - Булево - флаг ошибки при обработке;
//  СообщениеОбОшибке - Строка - строка сообщения об ошибке;
//  ВестиЛог - Булево - флаг ведения записей в журнале регистрации;
//
Процедура ВыполнитьЗагрузкуДополнительныхПолейТовара(Параметры, ЕстьОшибки, СообщениеОбОшибке, ВестиЛог = Истина) Экспорт
	Возврат;
КонецПроцедуры

// Загружает информацию об одном или нескольких товарах в определенный магазин ({storeUuid}) пользователя платформы.
//
// Параметры:
//  Параметры - Структура - Параметры
//  ЕстьОшибки - Булево - флаг ошибки при обработке;
//  СообщениеОбОшибке - Строка - строка сообщения об ошибке;
//  ВестиЛог - Булево - флаг ведения записей в журнале регистрации;
//
Процедура ВыполнитьСозданиеДополнительныхПолейТовара(Параметры, ЕстьОшибки, СообщениеОбОшибке, ВестиЛог = Истина) Экспорт
	Возврат;
КонецПроцедуры

// Удаляет указанные дополнительные поля. В теле запроса укажите один или несколько идентификаторов дополнительных полей, которые требуется удалить.
//
// Параметры:
//  Параметры - Структура - Параметры
//  ЕстьОшибки - Булево - флаг ошибки при обработке;
//  СообщениеОбОшибке - Строка - строка сообщения об ошибке;
//  ВестиЛог - Булево - флаг ведения записей в журнале регистрации;
//
Процедура ВыполнитьУдалениеДополнительныхПолейТовара(Параметры, ЕстьОшибки, СообщениеОбОшибке, ВестиЛог = Истина) Экспорт
	Возврат;
КонецПроцедуры

#КонецОбласти

#Область ВебхукиЗапросы

// Авторизация существующего пользователя в стороннем сервисе с помощью данных учетной записи Личного кабинета Эвотор.
//
// Параметры:
//  ПроизвольныйПараметр - Произвольный
//  ЕстьОшибки - Булево - флаг ошибки при обработке;
//  СообщениеОбОшибке - Строка - строка сообщения об ошибке;
//  ВестиЛог - Булево - флаг ведения записей в журнале регистрации;
//
Процедура ВыполнитьАвторизациюПользователя(ПроизвольныйПараметр, ЕстьОшибки, СообщениеОбОшибке, ВестиЛог = Истина) Экспорт
	Возврат;
КонецПроцедуры

// Регистрирует новую учетную запись в стороннем сервисе. ВАЖНО: Под пользователем понимается мастер-аккаунт владельца бизнеса в системе партнера.
//
// Параметры:
//  ПроизвольныйПараметр - Произвольный
//  ЕстьОшибки - Булево - флаг ошибки при обработке;
//  СообщениеОбОшибке - Строка - строка сообщения об ошибке;
//  ВестиЛог - Булево - флаг ведения записей в журнале регистрации;
//
Процедура ВыполнитьРегистрациюУчетнойЗаписи(ПроизвольныйПараметр, ЕстьОшибки, СообщениеОбОшибке, ВестиЛог = Истина) Экспорт
	Возврат;
КонецПроцедуры

// Возвращает объект с информацией о товаре, найденном в базе стороннего сервиса с помощью штрихкода и/или кода алкогольной продукции.
//
// Параметры:
//  Штрихкод - Строка
//  ЕстьОшибки - Булево - флаг ошибки при обработке;
//  СообщениеОбОшибке - Строка - строка сообщения об ошибке;
//  ВестиЛог - Булево - флаг ведения записей в журнале регистрации;
//
Процедура ВыполнитьПоискПоШтрихкоду(Штрихкод, ЕстьОшибки, СообщениеОбОшибке, ВестиЛог = Истина) Экспорт
	Возврат;
КонецПроцедуры

// Передает токен приложения, после того, как пользователь установил приложение в Личном кабинете.
// Сторонний сервис использует токен приложения для авторизации запросов к облаку Эвотор.
//
// Параметры:
//  Токен - Строка - токен интеграции Эвотор из личного кабинета,
//  ЕстьОшибки - Булево - флаг ошибки при обработке;
//  СообщениеОбОшибке - Строка - строка сообщения об ошибке;
//  ВестиЛог - Булево - флаг ведения записей в журнале регистрации;
//
Процедура ВыполнитьПередачуТокенаПриложения(Токен, ЕстьОшибки, СообщениеОбОшибке, ВестиЛог = Истина) Экспорт
	Возврат;
КонецПроцедуры

#КонецОбласти

#Область ВебхукиУведомления

// Загружает в сторонний сервис массив новых товаров, созданных на терминале.
//
// Параметры:
//  ТоварыИКассы - Массив - массив товаров из указанного магазина пользователя Эвотор.
//  Магазин - Строка - УИД магазина из облака Эвотор для передачи товаров.
//  ЕстьОшибки - Булево - флаг ошибки при обработке;
//  СообщениеОбОшибке - Строка - строка сообщения об ошибке;
//  ВестиЛог - Булево - флаг ведения записей в журнале регистрации;
//
Процедура ВыполнитьСозданиеТоваров(ТоварыИКассы, Магазин, ЕстьОшибки, СообщениеОбОшибке, ВестиЛог = Истина) Экспорт
	Возврат;
КонецПроцедуры

// Передает в сторонний сервис массив документов с транзакциями.
//
// Параметры:
//  Документы - Массив
//  ЕстьОшибки - Булево - флаг ошибки при обработке;
//  СообщениеОбОшибке - Строка - строка сообщения об ошибке;
//  ВестиЛог - Булево - флаг ведения записей в журнале регистрации;
//
Процедура ВыполнитьПередачуДокументов(Документы, ЕстьОшибки, СообщениеОбОшибке, ВестиЛог = Истина) Экспорт
	Возврат;
КонецПроцедуры

// Создать/отредактировать один или несколько смарт-терминалов в стороннем сервисе.
// Облако эвотор передает в сторонний сервис все изменения, сделанные в Личном кабинете.
// Эвотор является мастер-системой по данной сущности.
//
// Параметры:
//  Касса - Строка
//  ЕстьОшибки - Булево - флаг ошибки при обработке;
//  СообщениеОбОшибке - Строка - строка сообщения об ошибке;
//  ВестиЛог - Булево - флаг ведения записей в журнале регистрации;
//
Процедура ВыполнитьСозданиеСмартТерминала(Касса, ЕстьОшибки, СообщениеОбОшибке, ВестиЛог = Истина) Экспорт
	Возврат;
КонецПроцедуры

// Создать/отредактировать одного или нескольких сотрудников в стороннем сервисе.
// Облако эвотор передает в сторонний сервис все изменения, сделанные в Личном кабинете.
// Эвотор является мастер-системой по данной сущности.
//
// Параметры:
//  Сотрудник - Строка
//  ЕстьОшибки - Булево - флаг ошибки при обработке;
//  СообщениеОбОшибке - Строка - строка сообщения об ошибке;
//  ВестиЛог - Булево - флаг ведения записей в журнале регистрации;
//
Процедура ВыполнитьСозданиеСотрудника(Сотрудник, ЕстьОшибки, СообщениеОбОшибке, ВестиЛог = Истина) Экспорт
	Возврат;
КонецПроцедуры

// Создать/отредактировать один или несколько магазинов в стороннем сервисе.
// Облако эвотор передает в сторонний сервис все изменения, сделанные в Личном кабинете.
// Эвотор является мастер-системой по данной сущности.
//
// Параметры:
//  Магазин - Строка
//  ЕстьОшибки - Булево - флаг ошибки при обработке;
//  СообщениеОбОшибке - Строка - строка сообщения об ошибке;
//  ВестиЛог - Булево - флаг ведения записей в журнале регистрации;
//
Процедура ВыполнитьСозданиеМагазина(Магазин, ЕстьОшибки, СообщениеОбОшибке, ВестиЛог = Истина) Экспорт
	Возврат;
КонецПроцедуры

// После оплаты отправляет чек в сторонний сервис. Тело запроса содержит один или несколько чеков.
//
// Параметры:
//  Чек - Строка
//  ЕстьОшибки - Булево - флаг ошибки при обработке;
//  СообщениеОбОшибке - Строка - строка сообщения об ошибке;
//  ВестиЛог - Булево - флаг ведения записей в журнале регистрации;
//
Процедура ВыполнитьОтправкуЧека(Чек, ЕстьОшибки, СообщениеОбОшибке, ВестиЛог = Истина) Экспорт
	Возврат;
КонецПроцедуры

// Связанные с биллингом события, которые облако Эвотор передает в сторонний сервис.
// Облако выполняет попытки передать события в течение трех суток, до тех пор пока не будет получен ответ об успешной доставке сообщения (200 ОК).
// Интервал повторной отправки события около одной минуты.
//
// Параметры:
//  ПроизвольныеПараметры - Структура
//  ЕстьОшибки - Булево - флаг ошибки при обработке;
//  СообщениеОбОшибке - Строка - строка сообщения об ошибке;
//  ВестиЛог - Булево - флаг ведения записей в журнале регистрации;
//
Процедура ВыполнитьПередачуСобытийПодписки(ПроизвольныеПараметры, ЕстьОшибки, СообщениеОбОшибке, ВестиЛог = Истина) Экспорт
	Возврат;
КонецПроцедуры

// Связанные с установкой и удалением приложения события, которые облако Эвотор передает в сторонний сервис.
// Облако выполняет попытки передать события в течение трех суток, до тех пор пока не будет получен ответ об успешной доставке сообщения (200 ОК).
// Интервал повторной отправки события около одной минуты.
//
// Параметры:
//  ПроизвольныеПараметры - Структура
//  ЕстьОшибки - Булево - флаг ошибки при обработке;
//  СообщениеОбОшибке - Строка - строка сообщения об ошибке;
//  ВестиЛог - Булево - флаг ведения записей в журнале регистрации;
//
Процедура ВыполнитьПередачуСобытийУстановкиУдаления(ПроизвольныеПараметры, ЕстьОшибки, СообщениеОбОшибке, ВестиЛог = Истина) Экспорт
	Возврат;
КонецПроцедуры

#КонецОбласти

#Область ТехническиеПроцедуры

// Выполняет технический тест устройства.
//
// Параметры:
//  Настройки - Структура - техническая информация об устройстве, поля:
//   * Токен - Строка - токен интеграции Эвотор из личного кабинета.
//  Результат - Булево - результат тестирования устройства.
//  ЕстьОшибки - Булево - флаг ошибки при обработке;
//  СообщениеОбОшибке - Строка - строка сообщения об ошибке;
//  ВестиЛог - Булево - флаг ведения записей в журнале регистрации.
//
Процедура ВыполнитьТестУстройства(Настройки, Результат, ЕстьОшибки, СообщениеОбОшибке, ВестиЛог = Истина) Экспорт
	
	ЗаголовокЖурнала = НСтр("ru = 'Загрузка товаров из ККТ.'", ОбщегоНазначенияБПО.КодОсновногоЯзыка());
	
	Соединение = HTTPСоединение(Настройки);
	Если Соединение.HTTPСоединение = Неопределено Тогда
		СообщениеОбОшибке = Соединение.СообщениеОбОшибке;
		ЕстьОшибки = Истина;
		Если ВестиЛог Тогда
#Если Не МобильноеПриложениеСервер Тогда 
			ЗаписьЖурналаРегистрации(ЗаголовокЖурнала,
				УровеньЖурналаРегистрации.Предупреждение,,, СообщениеОбОшибке);
#КонецЕсли
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ТестУстройства(Соединение.HTTPСоединение, Настройки, Результат, ЕстьОшибки, СообщениеОбОшибке);
	
	Если ЕстьОшибки Тогда
#Если Не МобильноеПриложениеСервер Тогда 
			ЗаписьЖурналаРегистрации(ЗаголовокЖурнала,
				УровеньЖурналаРегистрации.Ошибка,,, СообщениеОбОшибке);
#КонецЕсли
	КонецЕсли;
	
	Если ВестиЛог Тогда
#Если Не МобильноеПриложениеСервер Тогда 
		ЗаписьЖурналаРегистрации(ЗаголовокЖурнала,
				УровеньЖурналаРегистрации.Информация,,,
				НСтр("ru = 'Завершение обмена.'"));
#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

// Заполняет структуру Параметры датой последней загрузки
//
// Параметры:
//  Параметры - Структура - Параметры устройства.
//
Процедура ПолучитьДатуПоследнейЗагрузки(Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ДатаЗагрузкиОтчетовКассЭвотор.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КассаЭвотор.Значение = Параметры.Идентификатор;
	НаборЗаписей.Отбор.КассаЭвотор.Использование = Истина;
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0 И Не Параметры.ПериодИзмененВручную Тогда
		Для Каждого Запись Из НаборЗаписей Цикл
			Параметры.ДатаНачала = Запись.ДатаПоследнейЗакрытойКассовойСмены;
			Параметры.ДатаОкончания = ТекущаяДатаСеанса();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Заполнить дату последней попытки загрузки.
// 
// Параметры:
//  Параметры - Структура - Параметры
//  ДатаОкончанияВыгрузки - Дата - Дата окончания выгрузки
// 
// Возвращаемое значение:
//  Булево - Заполнить дату последней попытки загрузки
Функция ЗаполнитьДатуПоследнейПопыткиЗагрузки(Параметры, ДатаОкончанияВыгрузки) Экспорт
	
	Результат = Ложь;
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных();
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ДатаЗагрузкиОтчетовКассЭвотор");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("КассаЭвотор", Параметры.Идентификатор);
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ДатаЗагрузкиОтчетовКассЭвотор.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.КассаЭвотор.Значение = Параметры.Идентификатор;
		НаборЗаписей.Отбор.КассаЭвотор.Использование = Истина;
		НаборЗаписей.Прочитать();
		
		Если Не Параметры.ПериодИзмененВручную Тогда
			Если НаборЗаписей.Количество() > 0 Тогда
				НаборЗаписей[0].ДатаПоследнейПопыткиЗагрузки = ДатаОкончанияВыгрузки;
				НаборЗаписей.Записать();
			КонецЕсли;
		Иначе
			Если НаборЗаписей.Количество() > 0 Тогда
				Если ДатаОкончанияВыгрузки > НаборЗаписей[0].ДатаПоследнейПопыткиЗагрузки Тогда
					НаборЗаписей[0].ДатаПоследнейПопыткиЗагрузки = ДатаОкончанияВыгрузки;
					НаборЗаписей.Записать();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Результат = Истина;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Результат = Ложь;
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

// Заполнить дату последней загрузки.
// 
// Параметры:
//  Параметры - Структура - Параметры
//  ВыходныеПараметры - Структура - Выходные параметры
// 
// Возвращаемое значение:
//  Булево - Заполнить дату последней загрузки
Функция ЗаполнитьДатуПоследнейЗагрузки(Параметры, ВыходныеПараметры) Экспорт
	
	Результат = Ложь;
	ВыходныеПараметры = Новый Массив;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеУстройства = МенеджерОфлайнОборудованияВызовСервера.ДанныеУстройства(Параметры.Идентификатор);
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных();
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ДатаЗагрузкиОтчетовКассЭвотор");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("КассаЭвотор", Параметры.Идентификатор);
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ДатаЗагрузкиОтчетовКассЭвотор.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.КассаЭвотор.Значение = Параметры.Идентификатор;
		НаборЗаписей.Отбор.КассаЭвотор.Использование = Истина;
		НаборЗаписей.Прочитать();
		
		Если Не ДанныеУстройства.Параметры.ПериодИзмененВручную Тогда
			Если НаборЗаписей.Количество() > 0 Тогда
				Для Каждого Запись Из НаборЗаписей Цикл
					Запись.ДатаПоследнейЗакрытойКассовойСмены = Запись.ДатаПоследнейПопыткиЗагрузки;
				КонецЦикла;
				НаборЗаписей.Записать();
			КонецЕсли;
			
		Иначе
			
			Если НаборЗаписей.Количество() > 0 Тогда
				Для Каждого Запись Из НаборЗаписей Цикл
					Если Запись.ДатаПоследнейПопыткиЗагрузки > Запись.ДатаПоследнейЗакрытойКассовойСмены Тогда
						Запись.ДатаПоследнейЗакрытойКассовойСмены = Запись.ДатаПоследнейПопыткиЗагрузки;
					КонецЕсли;
				КонецЦикла;
			НаборЗаписей.Записать();
			КонецЕсли;
			
		КонецЕсли;
		ДанныеУстройства.Параметры.ПериодИзмененВручную = Ложь;
		МенеджерОфлайнОборудованияВызовСервера.СохранитьПараметрыУстройства(Параметры.Идентификатор, ДанныеУстройства.Параметры);
		Результат = Истина;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Результат = Ложь;
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СтруктурыДанных

#Область APIv1
// Возвращает шаблон группы.
//
// Возвращаемое значение:
//  Структура.
//
Функция РеквизитыГруппы() Экспорт
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("uuid", "");
	Реквизиты.Вставить("name", "");
	Реквизиты.Вставить("parentUuid");
	Реквизиты.Вставить("group", Новый ОписаниеТипов("Булево"));
	Реквизиты.Вставить("hasVariants", Новый ОписаниеТипов("Булево"));
	Реквизиты.Вставить("extras", Новый Массив);
	
	Возврат Реквизиты;
	
КонецФункции

// Возвращает шаблон товара.
// 
// Возвращаемое значение:
//  Структура:
//   * tax - Строка - Ставка НДС для товара, возможные значения:
//            "NO_VAT", "VAT_10", "VAT_18", "VAT_0", "VAT_18_118", "VAT_10_110".
//   * type - Строка - Тип товара, возможные значение:
//            "NORMAL", "ALCOHOL_MARKED", "ALCOHOL_NOT_MARKED", "SERVICE".
Функция РеквизитыТовара() Экспорт
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("uuid", "");
	Реквизиты.Вставить("code", "");
	Реквизиты.Вставить("barCodes", Новый Массив);
	Реквизиты.Вставить("alcoCodes", Новый Массив);
	Реквизиты.Вставить("name", "");
	Реквизиты.Вставить("price", 0);
	Реквизиты.Вставить("quantity", 0);
	Реквизиты.Вставить("costPrice", 0);
	Реквизиты.Вставить("measureName", "");
	Реквизиты.Вставить("tax", "");
	Реквизиты.Вставить("allowToSell", Новый ОписаниеТипов("Булево"));
	Реквизиты.Вставить("description", "");
	Реквизиты.Вставить("articleNumber", "");
	Реквизиты.Вставить("parentUuid");
	Реквизиты.Вставить("group", Новый ОписаниеТипов("Булево"));
	Реквизиты.Вставить("type", "");
	Реквизиты.Вставить("alcoholByVolume");
	Реквизиты.Вставить("alcoholProductKindCode", 0);
	Реквизиты.Вставить("tareVolume");
	Реквизиты.Вставить("extras", Новый Массив);
	
	Возврат Реквизиты;
	
КонецФункции

// Возвращает шаблон услуги.
//
// Возвращаемое значение:
//  Структура:
//   * tax - Строка - Ставка НДС для товара, возможные значения:
//            "NO_VAT", "VAT_10", "VAT_18", "VAT_0", "VAT_18_118", "VAT_10_110".
//   * type - Строка - Тип товара, возможные значение:
//            "NORMAL", "ALCOHOL_MARKED", "ALCOHOL_NOT_MARKED", "SERVICE".
//
Функция РеквизитыУслуги() Экспорт
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("uuid", "");
	Реквизиты.Вставить("name", "");
	Реквизиты.Вставить("group", Новый ОписаниеТипов("Булево"));
	Реквизиты.Вставить("parentUuid");
	Реквизиты.Вставить("type", "");
	Реквизиты.Вставить("measureName", "");
	Реквизиты.Вставить("tax", "");
	Реквизиты.Вставить("price", 0);
	Реквизиты.Вставить("allowToSell", Новый ОписаниеТипов("Булево"));
	Реквизиты.Вставить("description", "");
	Реквизиты.Вставить("articleNumber", "");
	Реквизиты.Вставить("code", "");
	Реквизиты.Вставить("barCodes", Новый Массив);
	
	Возврат Реквизиты;
	
КонецФункции

// Возвращает шаблон товара к удалению.
//
// Возвращаемое значение:
//  Структура.
//
Функция РеквизитыТовараКУдалению() Экспорт
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("uuid", "");
	
	Возврат Реквизиты;
	
КонецФункции

// Возвращает шаблон сообщения о магазинах.
//
// Возвращаемое значение:
//  Структура.
//
Функция РеквизитыИнформацииОМагазинах() Экспорт
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("uuid", "");
	Реквизиты.Вставить("address", "");
	Реквизиты.Вставить("name", "");
	Реквизиты.Вставить("code", "");
	
	Возврат Реквизиты;
КонецФункции

// Возвращает шаблон сообщения о терминалах.
//
// Возвращаемое значение:
//  Структура.
//
Функция РеквизитыИнформацииОТерминалах() Экспорт
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("uuid", "");
	Реквизиты.Вставить("code", "");
	Реквизиты.Вставить("name", "");
	Реквизиты.Вставить("storeUuid", "");
	Реквизиты.Вставить("timezoneOffset", "");
	
	Возврат Реквизиты;
	
КонецФункции

// Возвращает шаблон чека.
//
// Возвращаемое значение:
//  Структура.
//
Функция РеквизитыДокументаФормат10() Экспорт
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("type", "");
	Реквизиты.Вставить("uuid", "");
	Реквизиты.Вставить("number", Новый ОписаниеТипов("Число"));
	Реквизиты.Вставить("closeSum", Новый ОписаниеТипов("Число"));
	Реквизиты.Вставить("openDate", "");
	Реквизиты.Вставить("closeDate", "");
	Реквизиты.Вставить("deviceUuid", "");
	Реквизиты.Вставить("sessionUUID", "");
	Реквизиты.Вставить("openUserCode", "");
	Реквизиты.Вставить("openUserUuid", "");
	Реквизиты.Вставить("closeUserCode", "");
	Реквизиты.Вставить("closeUserUuid", "");
	Реквизиты.Вставить("sessionNumber", "");
	Реквизиты.Вставить("closeResultSum", "");
	Реквизиты.Вставить("clientName", "");
	Реквизиты.Вставить("clientPhone", "");
	Реквизиты.Вставить("couponNumber", "");
	Реквизиты.Вставить("baseDocumentUUID", "");
	Реквизиты.Вставить("baseDocumentNumber", "");
	Реквизиты.Вставить("transactions", Новый Массив);
	
	Возврат Реквизиты;
	
КонецФункции

// Возвращает шаблон строки товара чека.
//
// Возвращаемое значение:
//  Структура.
//
Функция РеквизитыТоваровДокументаФормат10() Экспорт
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("id", "");
	Реквизиты.Вставить("sum", "");
	Реквизиты.Вставить("mark", "");
	Реквизиты.Вставить("type", "");
	Реквизиты.Вставить("uuid", "");
	Реквизиты.Вставить("price", "");
	Реквизиты.Вставить("barcode", "");
	Реквизиты.Вставить("quantity", "");
	Реквизиты.Вставить("userCode", "");
	Реквизиты.Вставить("userUuid", "");
	Реквизиты.Вставить("costPrice", "");
	Реквизиты.Вставить("resultSum", "");
	Реквизиты.Вставить("positionId", "");
	Реквизиты.Вставить("tareVolume", "");
	Реквизиты.Вставить("measureName", "");
	Реквизиты.Вставить("extraKeys", Новый Массив);
	Реквизиты.Вставить("resultPrice", "");
	Реквизиты.Вставить("creationDate", "");
	Реквизиты.Вставить("commodityCode", "");
	Реквизиты.Вставить("commodityName", "");
	Реквизиты.Вставить("commodityType", "");
	Реквизиты.Вставить("commodityUuid", "");
	Реквизиты.Вставить("fprintSection", "");
	Реквизиты.Вставить("alcoholByVolume", "");
	Реквизиты.Вставить("balanceQuantity", "");
	Реквизиты.Вставить("alcoholProductKindCode", "");
	
	Возврат Реквизиты;
	
КонецФункции

// Возвращает шаблон строки оплат кассового чека.
//
// Возвращаемое значение:
//  Структура.
//
Функция РеквизитыОплатДокументаФормат10() Экспорт
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("id", "");
	Реквизиты.Вставить("rrn", "");
	Реквизиты.Вставить("sum", "");
	Реквизиты.Вставить("type", "");
	Реквизиты.Вставить("uuid", "");
	Реквизиты.Вставить("userCode", "");
	Реквизиты.Вставить("userUuid", "");
	Реквизиты.Вставить("paymentType", "");
	Реквизиты.Вставить("creationDate", "");
	
	Возврат Реквизиты;
	
КонецФункции

// Возвращает шаблон строки налогов по товару.
//
// Возвращаемое значение:
//  Структура.
//
Функция РеквизитыНалоговДокументаФормат10() Экспорт
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("id", "");
	Реквизиты.Вставить("tax", "");
	Реквизиты.Вставить("type", "");
	Реквизиты.Вставить("uuid", "");
	Реквизиты.Вставить("taxSum", "");
	Реквизиты.Вставить("barcode", "");
	Реквизиты.Вставить("userCode", "");
	Реквизиты.Вставить("userUuid", "");
	Реквизиты.Вставить("resultSum", "");
	Реквизиты.Вставить("taxPercent", "");
	Реквизиты.Вставить("resultPrice", "");
	Реквизиты.Вставить("taxRateCode", "");
	Реквизиты.Вставить("creationDate", "");
	Реквизиты.Вставить("resultTaxSum", "");
	Реквизиты.Вставить("commodityCode", "");
	Реквизиты.Вставить("commodityUuid", "");
	
	Возврат Реквизиты;
	
КонецФункции

// Возвращает шаблон строки движения денежных средств.
//
// Возвращаемое значение:
//  Структура.
//
Функция РеквизитыДвиженияДСДокументаФормат10() Экспорт
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("id", "");
	Реквизиты.Вставить("sum", "");
	Реквизиты.Вставить("type", "");
	Реквизиты.Вставить("uuid", "");
	Реквизиты.Вставить("userCode", "");
	Реквизиты.Вставить("userUuid", "");
	Реквизиты.Вставить("creationDate", "");
	Реквизиты.Вставить("paymentCategoryId", "");
	
	Возврат Реквизиты;
	
КонецФункции

// Возвращает шаблон строки инвентаризации товарной позиции.
//
// Возвращаемое значение:
//  Структура.
//
Функция РеквизитыИнвентаризацииДокументаФормат10() Экспорт
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("id", "");
	Реквизиты.Вставить("type", "");
	Реквизиты.Вставить("uuid", "");
	Реквизиты.Вставить("barcode", "");
	Реквизиты.Вставить("quantity", "");
	Реквизиты.Вставить("userCode", "");
	Реквизиты.Вставить("userUuid", "");
	Реквизиты.Вставить("creationDate", "");
	Реквизиты.Вставить("commodityCode", "");
	Реквизиты.Вставить("commodityUuid", "");
	Реквизиты.Вставить("balanceQuantity", "");
	
	Возврат Реквизиты;
	
КонецФункции

// Возвращает шаблон строки переоценки товарной позиции.
//
// Возвращаемое значение:
//  Структура.
//
Функция РеквизитыПереоценкиДокументаФормат10() Экспорт
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("id", "");
	Реквизиты.Вставить("type", "");
	Реквизиты.Вставить("uuid", "");
	Реквизиты.Вставить("newPrice", "");
	Реквизиты.Вставить("oldPrice", "");
	Реквизиты.Вставить("userCode", "");
	Реквизиты.Вставить("userUuid", "");
	Реквизиты.Вставить("acceptPrice", "");
	Реквизиты.Вставить("creationDate", "");
	Реквизиты.Вставить("commodityCode", "");
	Реквизиты.Вставить("commodityUuid", "");
	
	Возврат Реквизиты;
	
КонецФункции

#КонецОбласти

#Область APIv2
// Возвращает шаблон документа Эвотор.
//
// Возвращаемое значение:
//  Структура.
//
Функция РеквизитыДокумента() Экспорт
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("type", "");
	Реквизиты.Вставить("id", "");
	Реквизиты.Вставить("number", Новый ОписаниеТипов("Число"));
	Реквизиты.Вставить("extras", Новый Структура);
	Реквизиты.Вставить("time_zone_offset", Новый ОписаниеТипов("Число"));
	Реквизиты.Вставить("close_date", "");
	Реквизиты.Вставить("session_id", "");
	Реквизиты.Вставить("session_number", "");
	Реквизиты.Вставить("close_user_id", "");
	Реквизиты.Вставить("device_id", "");
	Реквизиты.Вставить("store_id", "");
	Реквизиты.Вставить("user_id", "");
	Реквизиты.Вставить("receipt_number", Новый ОписаниеТипов("Число"));
	Реквизиты.Вставить("body", Новый Структура);
	
	Возврат Реквизиты;
	
КонецФункции

// Возвращает шаблон тела документа чек Эвотор.
//
// Возвращаемое значение:
//  Структура.
//
Функция РеквизитыТелаФискальногоДокумента() Экспорт
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("payments", Новый Массив);
	Реквизиты.Вставить("positions", Новый Массив);
	Реквизиты.Вставить("result_sum", Новый ОписаниеТипов("Число"));
	Реквизиты.Вставить("sum", Новый ОписаниеТипов("Число"));
	Реквизиты.Вставить("customer_email", "");
	Реквизиты.Вставить("customer_phone", "");
	Реквизиты.Вставить("base_document_id", "");
	Реквизиты.Вставить("base_document_number", Новый ОписаниеТипов("Число"));
	Реквизиты.Вставить("description", "");
	Реквизиты.Вставить("contributor", "");
	Реквизиты.Вставить("check_sum", "");
	Реквизиты.Вставить("document_number", "");
	Реквизиты.Вставить("fiscal_document_number", "");
	Реквизиты.Вставить("fiscal_sign_doc_number", "");
	Реквизиты.Вставить("fn_serial_number", "");
	Реквизиты.Вставить("kkt_reg_number", "");
	Реквизиты.Вставить("kkt_serial_number", "");
	Реквизиты.Вставить("receipt_date", "");
	Реквизиты.Вставить("session_number", "");
	Реквизиты.Вставить("type", "");
	Реквизиты.Вставить("org_name", "");
	Реквизиты.Вставить("org_inn", "");
	Реквизиты.Вставить("org_address", "");
	Реквизиты.Вставить("taxation_system", "");
	
	Возврат Реквизиты;
	
КонецФункции

// Возвращает шаблон тела документа инвентаризация Эвотор.
//
// Возвращаемое значение:
//  Структура.
//
Функция РеквизитыТелаДокументаИнвентаризация() Экспорт
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("complete_inventory", Новый ОписаниеТипов("Булево"));
	Реквизиты.Вставить("positions", Новый Массив);
	
	Возврат Реквизиты;
	
КонецФункции

// Возвращает шаблон тела документов приемка, возврат, списание Эвотор.
//
// Возвращаемое значение:
//  Структура.
//
Функция РеквизитыТелаДокументаПриемкаВозвратСписание() Экспорт
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("positions", Новый Массив);
	Реквизиты.Вставить("sum", Новый ОписаниеТипов("Число"));
	Реквизиты.Вставить("supplier_id", "");
	
	Возврат Реквизиты;
	
КонецФункции

// Возвращает шаблон тела документа переоценка Эвотор.
//
// Возвращаемое значение:
//  Структура.
//
Функция РеквизитыТелаДокументаПереоценка() Экспорт
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("positions", Новый Массив);
	Реквизиты.Вставить("base_document_id", "");
	Реквизиты.Вставить("base_document_number", Новый ОписаниеТипов("Число"));
	
	Возврат Реквизиты;
	
КонецФункции

// Возвращает шаблон тела документа закрытие кассовой смены Эвотор.
//
// Возвращаемое значение:
//  Структура.
//
Функция РеквизитыТелаДокументаЗакрытиеКассовойСмены() Экспорт
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("revenue", Новый ОписаниеТипов("Число"));
	Реквизиты.Вставить("total", Новый ОписаниеТипов("Число"));
	
	Возврат Реквизиты;
	
КонецФункции

// Возвращает шаблон тела документа закрытие кассовой смены Эвотор.
//
// Возвращаемое значение:
//  Структура.
//
Функция РеквизитыТелаДокументаВскрытиеТары() Экспорт
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("positions", Новый Массив);
	
	Возврат Реквизиты;
	
КонецФункции

// Возвращает шаблон строки товара чека.
//
// Возвращаемое значение:
//  Структура.
//
Функция РеквизитыТоваровДокумента() Экспорт
	
	Реквизиты = Новый Структура;
	
	Реквизиты.Вставить("quantity", Новый ОписаниеТипов("Число"));
	Реквизиты.Вставить("initial_quantity", Новый ОписаниеТипов("Число"));
	Реквизиты.Вставить("product_type", "");
	Реквизиты.Вставить("product_name", "");
	Реквизиты.Вставить("measure_name", "");
	Реквизиты.Вставить("id", Новый ОписаниеТипов("Число"));
	Реквизиты.Вставить("price", Новый ОписаниеТипов("Число"));
	Реквизиты.Вставить("cost_price", Новый ОписаниеТипов("Число"));
	Реквизиты.Вставить("sum", Новый ОписаниеТипов("Число"));
	Реквизиты.Вставить("result_sum", Новый ОписаниеТипов("Число"));
	Реквизиты.Вставить("product_id", "");
	Реквизиты.Вставить("parent_id", "");
	Реквизиты.Вставить("attributes_choices", Новый Массив);
	Реквизиты.Вставить("mark", "");
	Реквизиты.Вставить("alcohol_by_volume", Новый ОписаниеТипов("Число"));
	Реквизиты.Вставить("alcohol_product_kind_code", Новый ОписаниеТипов("Число"));
	Реквизиты.Вставить("tare_volume", Новый ОписаниеТипов("Число"));
	Реквизиты.Вставить("code", "");
	Реквизиты.Вставить("bar_code", "");
	Реквизиты.Вставить("uuid", "");
	Реквизиты.Вставить("result_price", Новый ОписаниеТипов("Число"));
	Реквизиты.Вставить("tax", Новый Структура);
	Реквизиты.Вставить("doc_distributed_discount", Новый Структура);
	Реквизиты.Вставить("position_discount", "");
	Реквизиты.Вставить("settlement_method", Новый Структура);
	Реквизиты.Вставить("print_group_id", "");
	Реквизиты.Вставить("extra_keys", Новый Массив);
	Реквизиты.Вставить("splitted_positions", Новый Массив);
	Реквизиты.Вставить("sub_positions", Новый Массив);
	Реквизиты.Вставить("agent_requisites", Новый Массив);
	
	Возврат Реквизиты;
	
КонецФункции

// Возвращает шаблон строки оплат кассового чека.
//
// Возвращаемое значение:
//  Структура.
//
Функция РеквизитыОплатДокумента() Экспорт
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("app_info", Новый Структура);
	Реквизиты.Вставить("bank_info", Новый Структура);
	Реквизиты.Вставить("id", "");
	Реквизиты.Вставить("merchant_info", Новый Структура);
	Реквизиты.Вставить("sum", Новый ОписаниеТипов("Число"));
	Реквизиты.Вставить("type", "");
	Реквизиты.Вставить("change", "");
	Реквизиты.Вставить("print_group_id", "");
	
	Возврат Реквизиты;
	
КонецФункции

// Возвращает шаблон строки оплат кассового чека.
//
// Возвращаемое значение:
//  Структура.
//
Функция РеквизитыЧастиОплатДокумента() Экспорт
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("part_sum", Новый ОписаниеТипов("Число"));
	Реквизиты.Вставить("change", "");
	Реквизиты.Вставить("print_group_id", "");
	
	Возврат Реквизиты;
	
КонецФункции

// Возвращает шаблон строки оплат кассового чека.
//
// Возвращаемое значение:
//  Структура.
//
Функция РеквизитыНалоговТовара() Экспорт
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("type", );
	Реквизиты.Вставить("sum", Новый ОписаниеТипов("Число"));
	Реквизиты.Вставить("result_sum", Новый ОписаниеТипов("Число"));
	Реквизиты.Вставить("tax_percent", "");
	
	Возврат Реквизиты;
	
КонецФункции
#КонецОбласти
#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ТоварыИДокументы

Процедура ЗагрузитьТовары(Соединение, Настройки, Товары, Отказ, СообщениеОбОшибке)
	
	Настройки.Вставить("КомандаЗапроса", "ВыполнитьЗагрузкуСпискаТоваров");
	
	ВыполнитьЗапросКСерверуЭвотор(Соединение, Настройки, Товары, Отказ, СообщениеОбОшибке);
	
КонецПроцедуры

Процедура ЗарегистрироватьТовары(Соединение, Настройки, ТоварыДляОбмена, Отказ, СообщениеОбОшибке)
	
	Настройки.Вставить("КомандаЗапроса", "ВыполнитьВыгрузкуТоваров");
	
	ИндексТовара = 0;
	КоличествоТоваровКОтправке = 0;
	ПакетТоваровКОбмену = Новый Массив;
	
	Для Каждого Товар Из ТоварыДляОбмена Цикл
		
		ПакетТоваровКОбмену.Добавить(Товар);
		КоличествоТоваровКОтправке = КоличествоТоваровКОтправке + 1;
		ИндексТовара = ИндексТовара + 1;
		
		Если КоличествоТоваровКОтправке = 10000 ИЛИ ИндексТовара = ТоварыДляОбмена.Количество() Тогда
			
			ДанныеДляЗапроса = Новый Структура();
			ДанныеДляЗапроса.Вставить("ПараметрыМетода", ПакетТоваровКОбмену);
			ВыполнитьЗапросКСерверуЭвотор(Соединение, Настройки, ДанныеДляЗапроса, Отказ, СообщениеОбОшибке);
			КоличествоТоваровКОтправке = 0
			
		КонецЕсли;
		
		Если Отказ Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла
	
КонецПроцедуры

Процедура ОчиститьТовары(Соединение, Настройки, ТоварыДляУдаления, Отказ, СообщениеОбОшибке)
	
	Настройки.Вставить("КомандаЗапроса", "ВыполнитьОчисткуТоваров");
	
	ДанныеДляЗапроса = Новый Структура();
	ДанныеДляЗапроса.Вставить("ПараметрыМетода", ТоварыДляУдаления);
	
	ВыполнитьЗапросКСерверуЭвотор(Соединение, Настройки, ДанныеДляЗапроса, Отказ, СообщениеОбОшибке);
	
КонецПроцедуры

Процедура ЗагрузитьКассовыеДокументы(Соединение, Настройки, КассовыеДокументы, Отказ, СообщениеОбОшибке)
	
	Настройки.Вставить("КомандаЗапроса", "ВыполнитьЗагрузкуСпискаКассовыхДокументов");
	
	ВыполнитьЗапросКСерверуЭвотор(Соединение, Настройки, КассовыеДокументы, Отказ, СообщениеОбОшибке);
	
КонецПроцедуры

Процедура ЗагрузитьКассовыеДокументыФормат10(Соединение, Настройки, КассовыеДокументы, Отказ, СообщениеОбОшибке)
	
	Настройки.Вставить("КомандаЗапроса", "ВыполнитьЗагрузкуСпискаКассовыхДокументовФормат10");
	
	ВыполнитьЗапросКСерверуЭвотор(Соединение, Настройки, КассовыеДокументы, Отказ, СообщениеОбОшибке);
	
КонецПроцедуры

Процедура ОбработатьОтвет_Товары(Результат, Данные, Отказ, СообщениеОбОшибке, ДополнительныеПараметры)
	
	МассивТоваров = Новый Массив;
	
	Для Каждого Товар Из Результат Цикл
		
		СтруктураТовара = РеквизитыТовара();
		ЗаполнитьЗначенияСвойств(СтруктураТовара, Товар);
		МассивТоваров.Добавить(СтруктураТовара);
		
	КонецЦикла;
	
	Данные = МассивТоваров;
	
КонецПроцедуры

Процедура ОбработатьОтвет_Документы(Результат, Данные, Отказ, СообщениеОбОшибке, ДополнительныеПараметры)
	
	МассивДокументов = Новый Массив;
	Для Каждого Документ Из Результат.items Цикл
		Если Документ.type <> "SELL" И Документ.type <> "PAYBACK" Тогда
			СтруктураДокумента = РеквизитыДокумента();
			ЗаполнитьЗначенияСвойств(СтруктураДокумента, Документ,,"close_date, body");
			СтруктураДокумента.receipt_number = Неопределено;
			ЗаполнитьДатуДокумента(СтруктураДокумента, Документ);
		КонецЕсли;
		Если Документ.type = "OPEN_SESSION" Тогда
			СтруктураДокумента.body = Новый Структура;
		ИначеЕсли Документ.type = "SELL" Тогда
			ТелоДокумента = Документ.body;
			СоответствиеЧеков = Неопределено;
			Если ТелоДокумента.print_groups.Количество() > 0 Тогда
				СоответствиеЧеков = Новый Соответствие;
				Для Каждого Чек Из ТелоДокумента.print_groups Цикл
					СтруктураДокумента = РеквизитыДокумента();
					ЗаполнитьЗначенияСвойств(СтруктураДокумента, Документ,,"close_date, body, id");
					ЗаполнитьДатуДокумента(СтруктураДокумента, Документ);
					СтруктураТелаДокументаЧек = РеквизитыТелаФискальногоДокумента();
					СтруктураДокумента.id = Документ.id + Чек.id;
					ЗаполнитьЗначенияСвойств(СтруктураТелаДокументаЧек, ТелоДокумента,, "payments, positions");
					ЗаполнитьЗначенияСвойств(СтруктураТелаДокументаЧек, Чек);
					СтруктураДокумента.body = СтруктураТелаДокументаЧек;
					СоответствиеЧеков.Вставить(Чек.id, СтруктураДокумента);
				КонецЦикла;
			Иначе
				СтруктураДокумента = РеквизитыДокумента();
				ЗаполнитьЗначенияСвойств(СтруктураДокумента, Документ,,"close_date, body");
				ЗаполнитьДатуДокумента(СтруктураДокумента, Документ);
				СтруктураТелаДокументаЧек = РеквизитыТелаФискальногоДокумента();
				ЗаполнитьЗначенияСвойств(СтруктураТелаДокументаЧек, ТелоДокумента,, "payments, positions");
				СтруктураДокумента.body = СтруктураТелаДокументаЧек;
			КонецЕсли;
				
			Для Каждого Оплата Из ТелоДокумента.payments Цикл
				Для Каждого ЧастьОплаты Из Оплата.parts Цикл
					СтруктураОплатДокумента = РеквизитыОплатДокумента();
					Если ЧастьОплаты.Свойство("print_group_id") Тогда
						СтруктураДокумента = СоответствиеЧеков.Получить(ЧастьОплаты.print_group_id);
						СтруктураОплатДокумента.print_group_id = ЧастьОплаты.print_group_id;
					КонецЕсли;
					ЗаполнитьЗначенияСвойств(СтруктураОплатДокумента, Оплата, , "sum");
					ЗаполнитьЗначенияСвойств(СтруктураОплатДокумента, ЧастьОплаты, "change");
					СтруктураОплатДокумента.sum = ЧастьОплаты.part_sum;
					СтруктураДокумента.body.payments.Добавить(СтруктураОплатДокумента);
				КонецЦикла;
			КонецЦикла;
			
			Для Каждого Товар Из ТелоДокумента.positions Цикл
				Если Товар.Свойство("print_group_id") Тогда
					СтруктураДокумента = СоответствиеЧеков.Получить(Товар.print_group_id);
				КонецЕсли;
				Если Товар.Свойство("sub_positions") И Товар.sub_positions.Количество() > 0 Тогда
					Для Каждого Подпозиция Из Товар.sub_positions Цикл
						СтруктураТовараДокумента = РеквизитыТоваровДокумента();
						ЗаполнитьЗначенияСвойств(СтруктураТовараДокумента, Подпозиция);
						НалогиТовара = ЗаполнитьНалогиТовара(СтруктураДокумента, Товар);
						СтруктураТовараДокумента.tax = РассчитатьСуммуНалоговПодпозиции(НалогиТовара, Подпозиция);
						СтруктураТовараДокумента.settlement_method = Товар.settlement_method;
						СтруктураДокумента.body.positions.Добавить(СтруктураТовараДокумента);
					КонецЦикла;
				Иначе
					СтруктураТовараДокумента = РеквизитыТоваровДокумента();
					ЗаполнитьЗначенияСвойств(СтруктураТовараДокумента, Товар,,"tax");
					СтруктураТовараДокумента.tax = ЗаполнитьНалогиТовара(СтруктураДокумента, Товар);
					СтруктураДокумента.body.positions.Добавить(СтруктураТовараДокумента);
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ФискальныеДанные Из ТелоДокумента.pos_print_results Цикл
				Если ФискальныеДанные.Свойство("print_group_id") Тогда
					СтруктураДокумента = СоответствиеЧеков.Получить(ФискальныеДанные.print_group_id);
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(СтруктураДокумента.body, ФискальныеДанные, 
				"check_sum, document_number, fiscal_document_number, fiscal_sign_doc_number, kkt_reg_number, kkt_serial_number, receipt_date");
				СтруктураДокумента.receipt_number = ФискальныеДанные.receipt_number;
			КонецЦикла;
			
			Если СоответствиеЧеков <> Неопределено Тогда
				Для Каждого СтруктураДокумента Из СоответствиеЧеков Цикл
					МассивДокументов.Добавить(СтруктураДокумента.Значение);
				КонецЦикла;
				Продолжить;
			КонецЕсли;
		ИначеЕсли Документ.type = "PAYBACK" Тогда
			ТелоДокумента = Документ.body;
			СоответствиеЧеков = Неопределено;
			Если ТелоДокумента.print_groups.Количество() > 0 Тогда
				СоответствиеЧеков = Новый Соответствие;
				Для Каждого Чек Из ТелоДокумента.print_groups Цикл
					СтруктураДокумента = РеквизитыДокумента();
					ЗаполнитьЗначенияСвойств(СтруктураДокумента, Документ,,"close_date, body, id");
					ЗаполнитьДатуДокумента(СтруктураДокумента, Документ);
					СтруктураТелаДокументаЧек = РеквизитыТелаФискальногоДокумента();
					СтруктураДокумента.id = Документ.id + Чек.id;
					ЗаполнитьЗначенияСвойств(СтруктураТелаДокументаЧек, ТелоДокумента,, "payments, positions");
					ЗаполнитьЗначенияСвойств(СтруктураТелаДокументаЧек, Чек);
					СтруктураДокумента.body = СтруктураТелаДокументаЧек;
					СоответствиеЧеков.Вставить(Чек.id, СтруктураДокумента);
				КонецЦикла;
			Иначе
				СтруктураДокумента = РеквизитыДокумента();
				ЗаполнитьЗначенияСвойств(СтруктураДокумента, Документ,,"close_date, body");
				ЗаполнитьДатуДокумента(СтруктураДокумента, Документ);
				СтруктураТелаДокументаЧек = РеквизитыТелаФискальногоДокумента();
				ЗаполнитьЗначенияСвойств(СтруктураТелаДокументаЧек, ТелоДокумента,, "payments, positions");
				СтруктураДокумента.body = СтруктураТелаДокументаЧек;
			КонецЕсли;
			
			Для Каждого Оплата Из ТелоДокумента.payments Цикл
				Для Каждого ЧастьОплаты Из Оплата.parts Цикл
					СтруктураОплатДокумента = РеквизитыОплатДокумента();
					Если ЧастьОплаты.Свойство("print_group_id") Тогда
						СтруктураДокумента = СоответствиеЧеков.Получить(ЧастьОплаты.print_group_id);
						СтруктураОплатДокумента.print_group_id = ЧастьОплаты.print_group_id;
					КонецЕсли;
					ЗаполнитьЗначенияСвойств(СтруктураОплатДокумента, Оплата, , "sum");
					ЗаполнитьЗначенияСвойств(СтруктураОплатДокумента, ЧастьОплаты, "change");
					СтруктураОплатДокумента.sum = ЧастьОплаты.part_sum;
					СтруктураДокумента.body.payments.Добавить(СтруктураОплатДокумента);
				КонецЦикла;
			КонецЦикла;
			
			Для Каждого Товар Из ТелоДокумента.positions Цикл
				Если Товар.Свойство("print_group_id") Тогда
					СтруктураДокумента = СоответствиеЧеков.Получить(Товар.print_group_id);
				КонецЕсли;
				Если Товар.Свойство("sub_positions") И Товар.sub_positions.Количество() > 0 Тогда
					Для Каждого Подпозиция Из Товар.sub_positions Цикл
						СтруктураТовараДокумента = РеквизитыТоваровДокумента();
						ЗаполнитьЗначенияСвойств(СтруктураТовараДокумента, Подпозиция);
						НалогиТовара = ЗаполнитьНалогиТовара(СтруктураДокумента, Товар);
						СтруктураТовараДокумента.tax = РассчитатьСуммуНалоговПодпозиции(НалогиТовара, Подпозиция);
						СтруктураТовараДокумента.settlement_method = Товар.settlement_method;
						СтруктураДокумента.body.positions.Добавить(СтруктураТовараДокумента);
					КонецЦикла;
				Иначе
					СтруктураТовараДокумента = РеквизитыТоваровДокумента();
					ЗаполнитьЗначенияСвойств(СтруктураТовараДокумента, Товар,,"tax");
					СтруктураТовараДокумента.tax = ЗаполнитьНалогиТовара(СтруктураДокумента, Товар);
					СтруктураДокумента.body.positions.Добавить(СтруктураТовараДокумента);
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ФискальныеДанные Из ТелоДокумента.pos_print_results Цикл
				Если ФискальныеДанные.Свойство("print_group_id") Тогда
					СтруктураДокумента = СоответствиеЧеков.Получить(ФискальныеДанные.print_group_id);
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(СтруктураДокумента.body, ФискальныеДанные, 
				"check_sum, document_number, fiscal_document_number, fiscal_sign_doc_number, kkt_reg_number, kkt_serial_number, receipt_date");
				СтруктураДокумента.receipt_number = ФискальныеДанные.receipt_number;
			КонецЦикла;
			
			Если СоответствиеЧеков <> Неопределено Тогда
				Для Каждого СтруктураДокумента Из СоответствиеЧеков Цикл
					МассивДокументов.Добавить(СтруктураДокумента.Значение);
				КонецЦикла;
				Продолжить;
			КонецЕсли;
		ИначеЕсли Документ.type = "CASH_INCOME" ИЛИ Документ.type = "CASH_OUTCOME" Тогда
			СтруктураТелаДокументаВнесениеДС = РеквизитыТелаФискальногоДокумента();
			ЗаполнитьЗначенияСвойств(СтруктураТелаДокументаВнесениеДС, Документ.body);
			СтруктураДокумента.receipt_number = Документ.body.receipt_number;
			СтруктураДокумента.body = СтруктураТелаДокументаВнесениеДС;
			СтруктураДокумента.body.result_sum     = Документ.body.sum;
		ИначеЕсли Документ.type = "CLOSE_SESSION" Тогда
			СтруктураТелаДокументаЗакрытиеКассовойСмены = РеквизитыТелаДокументаЗакрытиеКассовойСмены();
			ЗаполнитьЗначенияСвойств(СтруктураТелаДокументаЗакрытиеКассовойСмены, Документ.body);
			СтруктураДокумента.body = СтруктураТелаДокументаЗакрытиеКассовойСмены;
		ИначеЕсли Документ.type = "ACCEPT" Или Документ.type = "WRITE_OFF" Или Документ.type = "RETURN" Тогда
			СтруктураТелаДокументаПриемкаВозвратСписание = РеквизитыТелаДокументаПриемкаВозвратСписание();
			ЗаполнитьЗначенияСвойств(СтруктураТелаДокументаПриемкаВозвратСписание, Документ.body,, "positions");
			Для Каждого Товар Из ТелоДокумента.positions Цикл
				СтруктураТовараДокумента = РеквизитыТоваровДокумента();
				ЗаполнитьЗначенияСвойств(СтруктураТовараДокумента, Товар);
				СтруктураТелаДокументаЧек.positions.Добавить(СтруктураТовараДокумента);
			КонецЦикла;
			СтруктураДокумента.body = СтруктураТелаДокументаПриемкаВозвратСписание;
		ИначеЕсли Документ.type = "REVALUATION" Тогда
			СтруктураТелаДокументаПереоценка = РеквизитыТелаДокументаПереоценка();
			ЗаполнитьЗначенияСвойств(СтруктураТелаДокументаПереоценка, Документ.body);
			СтруктураДокумента.body = СтруктураТелаДокументаПереоценка;
		ИначеЕсли Документ.type = "INVENTORY" Тогда
			СтруктураТелаДокументаИнвентаризация = РеквизитыТелаДокументаИнвентаризация();
			ЗаполнитьЗначенияСвойств(СтруктураТелаДокументаИнвентаризация, Документ.body);
			СтруктураДокумента.body = СтруктураТелаДокументаПереоценка;
		ИначеЕсли Документ.type = "OPEN_TARE" Тогда
			СтруктураТелаДокументаВскрытиеТары = РеквизитыТелаДокументаВскрытиеТары();
			ЗаполнитьЗначенияСвойств(СтруктураТелаДокументаВскрытиеТары, Документ.body);
			СтруктураДокумента.body = СтруктураТелаДокументаВскрытиеТары;
		КонецЕсли;
		
	МассивДокументов.Добавить(СтруктураДокумента);
	
	КонецЦикла;
	
	Данные = МассивДокументов;
	
КонецПроцедуры

Процедура ОбработатьОтвет_ДокументыФормат10(Результат, Данные, Отказ, СообщениеОбОшибке, ДополнительныеПараметры)
	
	МассивДокументов = Новый Массив;
	
	Для Каждого Документ Из Результат Цикл
		СтруктураДокумента = РеквизитыДокументаФормат10();
		ЗаполнитьЗначенияСвойств(СтруктураДокумента, Документ,,"transactions");
		Для Каждого Транзакция Из Документ.transactions Цикл
			Если Транзакция.type = "REGISTER_POSITION" Тогда
				СтруктураТовараДокумента = РеквизитыТоваровДокументаФормат10();
				ЗаполнитьЗначенияСвойств(СтруктураТовараДокумента, Транзакция);
				СтруктураДокумента.transactions.Добавить(СтруктураТовараДокумента);
			ИначеЕсли Транзакция.type = "POSITION_TAX" Тогда
				СтруктураНалоговДокумента = РеквизитыНалоговДокументаФормат10();
				ЗаполнитьЗначенияСвойств(СтруктураНалоговДокумента, Транзакция);
				СтруктураДокумента.transactions.Добавить(СтруктураНалоговДокумента);
			ИначеЕсли Транзакция.type = "PAYMENT" Тогда
				СтруктураОплатДокумента = РеквизитыОплатДокументаФормат10();
				ЗаполнитьЗначенияСвойств(СтруктураОплатДокумента, Транзакция);
				СтруктураДокумента.transactions.Добавить(СтруктураОплатДокумента);
			ИначеЕсли Транзакция.type = "CASH_OUTCOME" ИЛИ Транзакция.type = "CASH_INCOME" Тогда
				СтруктураДвиженияДСДокумента = РеквизитыДвиженияДСДокументаФормат10();
				ЗаполнитьЗначенияСвойств(СтруктураДвиженияДСДокумента, Транзакция);
				СтруктураДокумента.transactions.Добавить(СтруктураДвиженияДСДокумента);
			ИначеЕсли Транзакция.type = "INVENTORY" Тогда
				СтруктураИнвентаризацииДокумента = РеквизитыИнвентаризацииДокументаФормат10();
				ЗаполнитьЗначенияСвойств(СтруктураИнвентаризацииДокумента, Транзакция);
				СтруктураДокумента.transactions.Добавить(СтруктураИнвентаризацииДокумента);
			ИначеЕсли Транзакция.type = "REVALUATION" Тогда
				СтруктураПереоценкиДокумента = РеквизитыПереоценкиДокументаФормат10();
				ЗаполнитьЗначенияСвойств(СтруктураПереоценкиДокумента, Транзакция);
				СтруктураДокумента.transactions.Добавить(СтруктураПереоценкиДокумента);
			ИначеЕсли Транзакция.type = "DOCUMENT_OPEN" Тогда
				ЗаполнитьЗначенияСвойств(СтруктураДокумента, Транзакция,
					"clientName, clientPhone, couponNumber, baseDocumentUUID, baseDocumentNumber");
			КонецЕсли;
		КонецЦикла;
		МассивДокументов.Добавить(СтруктураДокумента);
	КонецЦикла;
	
	Данные = МассивДокументов;
	
КонецПроцедуры

#КонецОбласти

#Область СущностиЭвотор

Процедура ЗагрузитьМагазины(Соединение, Настройки, СписокМагазинов, Отказ, СообщениеОбОшибке)
	
	Настройки.Вставить("КомандаЗапроса", "ВыполнитьЗагрузкуСпискаМагазинов");
	
	ВыполнитьЗапросКСерверуЭвотор(Соединение, Настройки, СписокМагазинов, Отказ, СообщениеОбОшибке);
	
КонецПроцедуры

Процедура ЗагрузитьСмартТерминалы(Соединение, Настройки, СписокМагазинов, Отказ, СообщениеОбОшибке)
	
	Настройки.Вставить("КомандаЗапроса", "ВыполнитьЗагрузкуСпискаТерминалов");
	
	ВыполнитьЗапросКСерверуЭвотор(Соединение, Настройки, СписокМагазинов, Отказ, СообщениеОбОшибке);
	
КонецПроцедуры

Процедура ОбработатьОтвет_МагазиныЭвотор(Результат, Данные, Отказ, СообщениеОбОшибке, ДополнительныеПараметры)
	
	МассивМагазинов = Новый Массив;
	
	Для Каждого Магазин Из Результат Цикл
		
		СтруктураМагазина = РеквизитыИнформацииОМагазинах();
		ЗаполнитьЗначенияСвойств(СтруктураМагазина, Магазин);
		МассивМагазинов.Добавить(СтруктураМагазина);
		
	КонецЦикла;
	
	Данные = МассивМагазинов;
	
КонецПроцедуры

Процедура ОбработатьОтвет_ТерминалыЭвотор(Результат, Данные, Отказ, СообщениеОбОшибке, ДополнительныеПараметры)
	
	МассивТерминалов = Новый Массив;
	
	Для Каждого Терминал Из Результат Цикл
		
		СтруктураТерминала = РеквизитыИнформацииОТерминалах();
		ЗаполнитьЗначенияСвойств(СтруктураТерминала, Терминал);
		МассивТерминалов.Добавить(СтруктураТерминала);
		
	КонецЦикла;
	
	Данные = МассивТерминалов;
	
КонецПроцедуры

#КонецОбласти

#Область ТехническиеПроцедуры

// Возвращает информацию обо всех товарах в определенном магазине ({storeUuid}) пользователя платформы.
//
Процедура ТестУстройства(Соединение, Настройки, Результат, Отказ, СообщениеОбОшибке) 
	
	Настройки.Вставить("КомандаЗапроса", "ВыполнитьТестУстройства");
	
	ВыполнитьЗапросКСерверуЭвотор(Соединение, Настройки, Результат, Отказ, СообщениеОбОшибке);
	
КонецПроцедуры

#КонецОбласти

#Область Общие

// Возвращает результат установки соединения с сервером.
//
// Параметры:
//  Настройки - Структура - настройки соединения.
//
// Возвращаемое значение:
//  Структура - результат установки соединения с сервером:
//   * HTTPСоединение - HTTPСоединение - соединение с сервером;
//   * СообщениеОбОшибке - Строка - подробное представление ошибки.
//
Функция HTTPСоединение(Настройки)
	
	Результат = Новый Структура("HTTPСоединение, СообщениеОбОшибке", Неопределено, "");
	HTTPСоединение = Неопределено;
	ЗащищенноеСоединение = Неопределено;
	Прокси = Неопределено;
	МодульПолучениеФайловИзИнтернета = Неопределено;
	
	СтруктураURL = ОбщегоНазначенияБПОКлиентСервер.СтруктураURI("https://api.evotor.ru/"); // Структура
	
	Протокол = ?(НЕ ЗначениеЗаполнено(СтруктураURL.Схема), "http", СтруктураURL.Схема);
	Если ВРЕГ(Протокол) = "HTTPS" Тогда
		ЗащищенноеСоединение = ОбщегоНазначенияБПОКлиентСервер.НовоеЗащищенноеСоединение();
	КонецЕсли;
	
	Если СтруктураURL.Порт = Неопределено Тогда
		Если ЗащищенноеСоединение = Неопределено Тогда
			Порт = 443;
		Иначе
			Порт = 443;
		КонецЕсли;
	Иначе
		Порт = СтруктураURL.Порт
	КонецЕсли;
	
	Таймаут = 300;
	
	// Вызов БСП
	#Если Сервер Тогда
		Если ОбщегоНазначенияБПО.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
			МодульПолучениеФайловИзИнтернета =
				ОбщегоНазначенияБПО.ОбщийМодуль("ПолучениеФайловИзИнтернета");
		КонецЕсли;
	#КонецЕсли
	
	Если НЕ МодульПолучениеФайловИзИнтернета = Неопределено Тогда
		Прокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси(Протокол);
	Иначе
		Прокси = Новый ИнтернетПрокси(Истина);
	КонецЕсли;
	// Конец Вызов БСП
	
	Попытка
		HTTPСоединение = Новый HTTPСоединение(СтруктураURL.Хост, Порт, , ,
			Прокси, Таймаут, ЗащищенноеСоединение);
	Исключение
		СообщениеОбОшибке = СтрШаблон(НСтр("ru = 'Ошибка при создании HTTP-соединения с сервером Эвотор'"));
		Результат.Вставить("СообщениеОбОшибке", СообщениеОбОшибке);
	КонецПопытки;
	Результат.Вставить("HTTPСоединение", HTTPСоединение);
	
	Возврат Результат;
КонецФункции

// Функция возвращает дату в формате UNIX-даты с добавлением смещения по часовому поясу.
//
Функция ПреобразоватьДату(НеформатированнаяДата)
	
	СмещениеЧасовогоПояса = СмещениеСтандартногоВремени(ЧасовойПоясСеанса(),УниверсальноеВремя(ТекущаяДатаСеанса()));
	
	СмещениеЧасовогоПояса = ?(СмещениеЧасовогоПояса<=0, -СмещениеЧасовогоПояса, СмещениеЧасовогоПояса);
	
	НеформатированнаяДата = НеформатированнаяДата - СмещениеЧасовогоПояса;
	
	ФорматированнаяДата = Формат(НеформатированнаяДата - Дата(1970,1,1,0,0,0), "ЧЦ=13; ЧДЦ=0; ЧС=; ЧГ=0") + "000";
	
	Возврат ФорматированнаяДата;
	
КонецФункции

// Функция возвращает дату в формате JSON-даты с добавлением смещения по часовому поясу.
//
Функция ПреобразоватьДатуФормат10(Дата)
	
	// BSLLS:IdenticalExpressions-off
	Смещение = СмещениеСтандартногоВремени(ЧасовойПоясСеанса(),УниверсальноеВремя(ТекущаяДатаСеанса()))/60/60;
	// BSLLS:IdenticalExpressions-on
	
	Если Смещение < 0 Тогда
		Знак = "%2D";
		Смещение = Смещение * (-1);
	Иначе
		Знак = "%2B";
	КонецЕсли;
	КоличествоЧасов = ?(Смещение > 9, Строка(Смещение), "0" + Строка(Смещение));
	
	СмещениеЧасов = ".000" + Знак + КоличествоЧасов + "00";
	
	// АПК: 335-выкл особенность локального законодательства
	ФорматированнаяДата = Формат(Дата, "ДФ=гггг-ММ-дд") + "T" + Формат(Дата, "ДФ=ЧЧ:мм:сс") + СмещениеЧасов;
	// АПК: 335-вкл
	
	Возврат ФорматированнаяДата;
	
КонецФункции

Процедура ЗаполнитьДатуДокумента(СтруктураДокумента, Документ)
	
	СмещениеЧасовогоПояса = СмещениеСтандартногоВремени(ЧасовойПоясСеанса(),УниверсальноеВремя(ТекущаяДатаСеанса()));
	СмещениеДокумента = Документ.time_zone_offset/1000;
	СтруктураДокумента.close_date = Документ.close_date - СмещениеЧасовогоПояса + СмещениеДокумента;
	
КонецПроцедуры

Процедура ВыполнитьЗапросКСерверуЭвотор(Соединение, Настройки, Данные, Отказ, СообщениеОбОшибке)
	
	HTTPОтвет = Неопределено;
	
	HTTPЗапрос = Новый HTTPЗапрос;
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json");
	HTTPЗапрос.Заголовки.Вставить("X-Authorization", Настройки.Токен);
	АдресРесурса = "";
	МетодЗапроса = "";
	
	Если Настройки.КомандаЗапроса = "ВыполнитьЗагрузкуСпискаМагазинов" Тогда
		АдресРесурса = "api/v1/inventories/stores/search";
		МетодЗапроса = "GET";
	ИначеЕсли Настройки.КомандаЗапроса = "ВыполнитьЗагрузкуСпискаТерминалов" Тогда
		АдресРесурса = "api/v1/inventories/devices/search";
		МетодЗапроса = "GET";
	ИначеЕсли Настройки.КомандаЗапроса = "ВыполнитьЗагрузкуСпискаСотрудников" Тогда
		АдресРесурса = "api/v1/inventories/employees/search";
		МетодЗапроса = "GET";
	ИначеЕсли Настройки.КомандаЗапроса = "ВыполнитьЗагрузкуСпискаТоваров" Тогда
		АдресРесурса = "api/v1/inventories/stores/"+ Настройки.МагазинЗначение + "/products";
		МетодЗапроса = "GET";
	ИначеЕсли Настройки.КомандаЗапроса = "ВыполнитьЗагрузкуСпискаКассовыхДокументов" Тогда
		// BSLLS:UsingHardcodePath-off
		АдресРесурса = "stores/" + Настройки.МагазинЗначение + "/devices/" + Настройки.ТерминалЗначение + "/documents";
		// BSLLS:UsingHardcodePath-on
		HTTPЗапрос.Заголовки.Вставить("Accept", "application/vnd.evotor.v2+json");
		
		НачалоВыгрузки = ПреобразоватьДату(Настройки.ПериодНачалоВыгрузки);
		Если ЗначениеЗаполнено(Настройки.ПериодНачалоВыгрузки) Тогда
			АдресРесурса = АдресРесурса + "?since=" + НачалоВыгрузки;
		Иначе
			АдресРесурса = АдресРесурса + "?since=";
		КонецЕсли;
		
		ОкончаниеВыгрузки = ПреобразоватьДату(Настройки.ПериодОкончаниеВыгрузки);
		Если ЗначениеЗаполнено(Настройки.ПериодОкончаниеВыгрузки) Тогда
			АдресРесурса = АдресРесурса + "&until=" + ОкончаниеВыгрузки;
		Иначе
			АдресРесурса = АдресРесурса + "&until=";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Настройки.ТипыДокументов) Тогда
			АдресРесурса = АдресРесурса + "&type=" + Настройки.ТипыДокументов;
		КонецЕсли;
		
		МетодЗапроса = "GET";
		
	ИначеЕсли Настройки.КомандаЗапроса = "ВыполнитьЗагрузкуСпискаКассовыхДокументовФормат10" Тогда
		
		АдресРесурса = "api/v1/inventories/stores/" + Настройки.МагазинЗначение + "/documents";
		
		Если ЗначениеЗаполнено(Настройки.ТерминалЗначение) Тогда
			АдресРесурса = АдресРесурса + "?deviceUuid=" + Настройки.ТерминалЗначение;
		Иначе
			АдресРесурса = АдресРесурса + "?deviceUuid=";
		КонецЕсли;
		
		НачалоВыгрузки = ПреобразоватьДатуФормат10(Настройки.ПериодНачалоВыгрузки);
		Если ЗначениеЗаполнено(Настройки.ПериодНачалоВыгрузки) Тогда
			АдресРесурса = АдресРесурса + "&gtCloseDate=" + НачалоВыгрузки;
		Иначе
			АдресРесурса = АдресРесурса + "&gtCloseDate=";
		КонецЕсли;
		
		ОкончаниеВыгрузки = ПреобразоватьДатуФормат10(Настройки.ПериодОкончаниеВыгрузки);
		Если ЗначениеЗаполнено(Настройки.ПериодОкончаниеВыгрузки) Тогда
			АдресРесурса = АдресРесурса + "&ltCloseDate=" + ОкончаниеВыгрузки;
		Иначе
			АдресРесурса = АдресРесурса + "&ltCloseDate=";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Настройки.ТипыДокументов) Тогда
			АдресРесурса = АдресРесурса + "&types=" + Настройки.ТипыДокументов;
		КонецЕсли;
		
		МетодЗапроса = "GET";
		
	ИначеЕсли Настройки.КомандаЗапроса = "ВыполнитьВыгрузкуТоваров" Тогда
		АдресРесурса = "api/v1/inventories/stores/" + Настройки.МагазинЗначение + "/products";
		HTTPЗапрос.Заголовки.Вставить("Content-Encoding", "gzip");
		СтрокаJSON = СтрокаJSON(Данные.ПараметрыМетода, Отказ, СообщениеОбОшибке);
		HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаJSON);
		МетодЗапроса = "POST";
	ИначеЕсли Настройки.КомандаЗапроса = "ВыполнитьОчисткуТоваров" Тогда
		АдресРесурса = "api/v1/inventories/stores/" + Настройки.МагазинЗначение + "/products/delete";
		HTTPЗапрос.Заголовки.Вставить("Content-Encoding", "gzip");
		СтрокаJSON = СтрокаJSON(Данные.ПараметрыМетода, Отказ, СообщениеОбОшибке);
		HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаJSON);
		МетодЗапроса = "POST";
	ИначеЕсли Настройки.КомандаЗапроса = "ВыполнитьТестУстройства" ИЛИ Настройки.КомандаЗапроса = "CheckHealth" Тогда
		АдресРесурса = "api/v1/inventories/stores/search";
		МетодЗапроса = "GET";
	КонецЕсли;
	
	HTTPЗапрос.АдресРесурса = АдресРесурса;
	
	Попытка
		Если МетодЗапроса = "GET" Тогда
			HTTPОтвет = Соединение.Получить(HTTPЗапрос);
		Иначе
			HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
		КонецЕсли;
	Исключение
		HTTPЗапрос = Неопределено;
		СообщениеОбОшибке = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Отказ = Истина;
	#Если Не МобильноеПриложениеСервер Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru = 'НТТР запрос к облаку Эвотор.'", ОбщегоНазначенияБПО.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, СообщениеОбОшибке);
		Возврат;
	#КонецЕсли
	КонецПопытки;
	
	ОбработатьОтветСервера(HTTPОтвет, Настройки, Отказ, СообщениеОбОшибке);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Неопределено;
	ОбработатьОтветОблакаЭвотор(HTTPОтвет, Настройки, Данные, Отказ, СообщениеОбОшибке, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОбработатьОтветСервера(Результат, Настройки, Отказ, СообщениеОбОшибке)
	
	// Анализируем фатальные ошибки.
	// В большинстве случаев нужно остановить работу и показать пользователю сообщение об ошибке,
	// включив в него HTTP-статус.
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.КодСостояния = 401 Тогда
		СообщениеОбОшибке = НСтр("ru = 'Ключ авторизации неверный.'");
		Отказ = Истина;
	ИначеЕсли Результат.КодСостояния = 402 Тогда
		СообщениеОбОшибке = НСтр("ru = 'Точка продаж, аккаунт или поддержка интеграции заблокирована.'");
		Отказ = Истина;
	ИначеЕсли Результат.КодСостояния = 404 Тогда
		СообщениеОбОшибке = НСтр("ru = 'Не найдена указанная точка продаж'");
		Отказ = Истина;
	ИначеЕсли Результат.КодСостояния = 405 Тогда
		СообщениеОбОшибке = НСтр("ru = 'Терминал не активен в рамках текущей подписки.'");
		Отказ = Истина;
	ИначеЕсли Результат.КодСостояния = 500 Тогда
		СообщениеОбОшибке = НСтр("ru = 'Внутренняя ошибка сервиса.'");
		Отказ = Истина;
	ИначеЕсли Результат.КодСостояния = 503 Тогда
		СообщениеОбОшибке = НСтр("ru = 'Сервис недоступен.'");
		Отказ = Истина;
	ИначеЕсли Результат.КодСостояния <> 200 Тогда
		СообщениеОбОшибке = НСтр("ru = 'Произошла ошибка при выгрузке данных. Код ответа: %КодСостояния%.'");
		СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%КодСостояния%", Результат.КодСостояния);
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
	#Если Не МобильноеПриложениеСервер Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ответ сервера Эвотор.'", ОбщегоНазначенияБПО.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, СообщениеОбОшибке);
	#КонецЕсли
	КонецЕсли;
		
КонецПроцедуры

Процедура ОбработатьОтветОблакаЭвотор(Результат, Настройки, Данные, Отказ, СообщениеОбОшибке, ДополнительныеПараметры)
	
	СтрокаОтвета = Результат.ПолучитьТелоКакСтроку();
	
	СтрокаОтвета = СтрЗаменить(СтрокаОтвета, "\u001", "");
	
	Результат = Неопределено;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Настройки.КомандаЗапроса = "ВыполнитьЗагрузкуСпискаТоваров" Тогда
		
		ОбъектJSON = ПреобразоватьВСтрокуИзJSON(СтрокаОтвета, Отказ, СообщениеОбОшибке);
		ОбработатьОтвет_Товары(ОбъектJSON, Данные, Отказ, СообщениеОбОшибке, ДополнительныеПараметры);
		
	ИначеЕсли Настройки.КомандаЗапроса = "ВыполнитьЗагрузкуСпискаКассовыхДокументов" Тогда
		
		ОбъектJSON = ПреобразоватьВСтрокуИзJSON(СтрокаОтвета, Отказ, СообщениеОбОшибке);
		ОбработатьОтвет_Документы(ОбъектJSON, Данные, Отказ, СообщениеОбОшибке, ДополнительныеПараметры);
		
	ИначеЕсли Настройки.КомандаЗапроса = "ВыполнитьЗагрузкуСпискаКассовыхДокументовФормат10" Тогда
		
		ОбъектJSON = ПреобразоватьВСтрокуИзJSON(СтрокаОтвета, Отказ, СообщениеОбОшибке);
		ОбработатьОтвет_ДокументыФормат10(ОбъектJSON, Данные, Отказ, СообщениеОбОшибке, ДополнительныеПараметры);
		
	ИначеЕсли Настройки.КомандаЗапроса = "ВыполнитьЗагрузкуСпискаМагазинов" Тогда
		
		ОбъектJSON = ПреобразоватьВСтрокуИзJSON(СтрокаОтвета, Отказ, СообщениеОбОшибке);
		ОбработатьОтвет_МагазиныЭвотор(ОбъектJSON, Данные, Отказ, СообщениеОбОшибке, ДополнительныеПараметры);
		
	ИначеЕсли Настройки.КомандаЗапроса = "ВыполнитьЗагрузкуСпискаТерминалов" Тогда
		
		ОбъектJSON = ПреобразоватьВСтрокуИзJSON(СтрокаОтвета, Отказ, СообщениеОбОшибке);
		ОбработатьОтвет_ТерминалыЭвотор(ОбъектJSON, Данные, Отказ, СообщениеОбОшибке, ДополнительныеПараметры);
		
	ИначеЕсли Настройки.КомандаЗапроса = "ВыполнитьТестУстройства" Тогда
		
		Данные = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Функция РассчитатьСуммуНалоговПодпозиции(НалоговаяСтавка, Подпозиция)
	
	СтруктураНалогов = РеквизитыНалоговТовара();
	
	Если НалоговаяСтавка.tax_percent = "18" ИЛИ НалоговаяСтавка.tax_percent = "18/118" Тогда 
		Ставка = 18;
	ИначеЕсли НалоговаяСтавка.tax_percent = "VAT_10" ИЛИ НалоговаяСтавка.tax_percent = "VAT10_110" Тогда
		Ставка = 10;
	ИначеЕсли НалоговаяСтавка.tax_percent = "NO_VAT" ИЛИ НалоговаяСтавка.tax_percent = "VAT_0" Тогда
		Ставка = 0;
	ИначеЕсли НалоговаяСтавка.tax_percent = "20" ИЛИ НалоговаяСтавка.tax_percent = "20/120" Тогда
		Ставка = 20;
	КонецЕсли;
	СтруктураНалогов.result_sum = Окр(Подпозиция.result_sum*(Ставка/(100+Ставка)), 2);
	СтруктураНалогов.sum = Окр(Подпозиция.sum*(Ставка/(100+Ставка)), 2);
	СтруктураНалогов.tax = НалоговаяСтавка;
	СтруктураНалогов.tax_percent = НалоговаяСтавка.tax_percent;
	
	Возврат СтруктураНалогов;
	
КонецФункции

Функция ЗаполнитьНалогиТовара(СтруктураДокумента, Товар)
	
	НалогиТовара = РеквизитыНалоговТовара();
	
	НалогиТовара.type       = Товар.tax.type;
	НалогиТовара.sum        = Товар.tax.sum;
	НалогиТовара.result_sum = Товар.tax.result_sum;
	
	ИспользоватьСтавкуНДС20 = Истина;
	Если СтруктураДокумента.close_date < Дата(2019,1,1,0,0,0) Тогда
		ИспользоватьСтавкуНДС20 = Ложь;
	ИначеЕсли СтруктураДокумента.close_date > Дата(2019,1,1,0,0,0) И СтруктураДокумента.type = "PAYBACK" И ЗначениеЗаполнено(СтруктураДокумента.body.base_document_id) 
		И -Товар.result_sum > 1 Тогда
		СуммаНДС20 = Окр(Товар.tax.result_sum*(20/(120)), 2);
		Если Товар.tax.result_sum <> СуммаНДС20 Тогда
			ИспользоватьСтавкуНДС20 = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НалогиТовара.type = "NO_VAT" Тогда
		НалогиТовара.tax_percent = "none"
	ИначеЕсли НалогиТовара.type = "VAT_0" Тогда
		НалогиТовара.tax_percent = "0"
	ИначеЕсли НалогиТовара.type = "VAT_10" Тогда
		НалогиТовара.tax_percent = "10"
	ИначеЕсли НалогиТовара.type = "VAT_10_110" Тогда
		НалогиТовара.tax_percent = "10/110"
	ИначеЕсли НалогиТовара.type = "VAT_18" И ИспользоватьСтавкуНДС20 Тогда
		НалогиТовара.tax_percent = "20"
	ИначеЕсли НалогиТовара.type = "VAT_18" И НЕ ИспользоватьСтавкуНДС20 Тогда
		НалогиТовара.tax_percent = "18"
	ИначеЕсли НалогиТовара.type = "VAT_18_118" И ИспользоватьСтавкуНДС20 Тогда
		НалогиТовара.tax_percent = "20/120"
	ИначеЕсли НалогиТовара.type = "VAT_18_118" И НЕ ИспользоватьСтавкуНДС20 Тогда
		НалогиТовара.tax_percent = "18/118"
	КонецЕсли;
	
	Возврат НалогиТовара;
	
КонецФункции
#КонецОбласти

#Область Функции_JSON

Функция ПреобразоватьВСтрокуИзJSON(Строка, Отказ, СообщениеОбОшибке)
	
	Результат = Неопределено;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	Попытка
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Строка);
		ПоляДат = Новый Массив;
		ПоляДат.Добавить("openDate");
		ПоляДат.Добавить("closeDate");
		ПоляДат.Добавить("creationDate");
		ПоляДат.Добавить("close_date");
		Результат = ПрочитатьJSON(ЧтениеJSON,, ПоляДат);
		ЧтениеJSON.Закрыть();
	Исключение
		СообщениеОбОшибке = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Отказ = Истина;
	#Если Не МобильноеПриложениеСервер Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Чтение JSON.'", ОбщегоНазначенияБПО.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	#КонецЕсли
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция СтрокаJSON(Знач ПараметрыМетода, Отказ, СообщениеОбОшибке)
	
	СтрокаJSON = Неопределено;
	
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто);
	ЗаписьJSON = Новый ЗаписьJSON;
	Попытка
		ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
		ЗаписатьJSON(ЗаписьJSON, ПараметрыМетода);
		СтрокаJSON = ЗаписьJSON.Закрыть();
	Исключение
		СообщениеОбОшибке = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Отказ = Истина;
	#Если Не МобильноеПриложениеСервер Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Запись JSON.'", ОбщегоНазначенияБПО.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	#КонецЕсли
	КонецПопытки;
	
	Возврат СтрокаJSON;
	
КонецФункции

#КонецОбласти

#КонецОбласти