
#Область СлужебныйПрограммныйИнтерфейс

#Область ТекущиеДелаЭДО

Функция ПараметрыЗапускаТекущихДелЭДО() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("РежимОтображения", "");
	Результат.Вставить("Раздел", "");
	Результат.Вставить("ОтборУчетныхДокументов", Новый Массив);
	Результат.Вставить("ОтборВходящихДокументов", Новый Массив);
	Результат.Вставить("ОтборИсходящихДокументов", Новый Массив);
	Возврат Результат;
	
КонецФункции

Процедура ОткрытьТекущиеДелаЭДОКоманда(Источник = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ОткрытьТекущиеДелаЭДО();
	
КонецПроцедуры

Процедура ОткрытьТекущиеДелаЭДО(ПараметрыЗапуска = Неопределено, ОповещениеОЗакрытии = Неопределено) Экспорт
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("ОбщийМодуль.ИнтерфейсДокументовЭДОКлиент.ОткрытьТекущиеДелаЭДО");
	
	ОткрытьФорму(ФормаТекущиеДелаПоЭДО(), ПараметрыЗапуска,,,,, ОповещениеОЗакрытии);
	
КонецПроцедуры

// Возвращает путь к форме текущих дел по ЭДО в зависимости от пользовательской настройки.
// 
// Возвращаемое значение:
//  Строка
Функция ФормаТекущиеДелаПоЭДО() Экспорт
	
	ЛегкийИнтерфейс = ИнтерфейсДокументовЭДОВызовСервера.ВыбранЛегкийВариантИнтерфейса();
	Возврат ИнтерфейсДокументовЭДОКлиентСервер.ФормаТекущихДелЭДОПоВариантуИнтерфейса(ЛегкийИнтерфейс);
	
КонецФункции

// Открывает страницу опроса на сайте ИТС
//
Процедура ОткрытьСтраницуОпроса() Экспорт
	
	ПараметрыЕстьИдея = ИнтерфейсДокументовЭДОВызовСервера.ПараметрыОткрытияСтраницыОпроса();
	
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку("http://its.1c.ru/survey/service1cedo" + ПараметрыЕстьИдея);
	
КонецПроцедуры

Процедура ВыборРежимаПросмотраТекущихДел(Оповещение, Форма, РежимОтображения, ПакетноеОтображение, 
		ОбластьЛегенды = Неопределено, ОбластьПросмотра = Неопределено) Экспорт

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимОтображения", РежимОтображения);
	ПараметрыФормы.Вставить("ПакетноеОтображение", ПакетноеОтображение);
	ПараметрыФормы.Вставить("ОбластьЛегенды", ОбластьЛегенды);
	ПараметрыФормы.Вставить("ОбластьПросмотра", ОбластьПросмотра);
	
	ОткрытьФорму("Обработка.ИнтерфейсДокументовЭДО.Форма.ТекущиеДелаПоЭДОВыборРежимаПросмотра", 
		ПараметрыФормы, Форма, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

Процедура ОткрытьАрхивЭДО() Экспорт

	ОткрытьФорму("Обработка.ИнтерфейсДокументовЭДО.Форма.АрхивЭлектронныхДокументов");

КонецПроцедуры

// Изменяет вариант интерфейса пользователя, если это Клиент ЭДО или Демо БЭД - меняет начальную страницу,
// если это встроенная в ПП библиотека - закрывает старую форму и открывает новую
// 
// Параметры:
//  Легкий - Булево
//  ТекущаяФорма - Неопределено,ФормаКлиентскогоПриложения
//  СохранятьНастройку - Булево - Запоминает вариант интерфейса пользователя по умолчанию если Истина
Процедура ИзменитьВариантИнтерфейсаПользователя(Легкий = Ложь, ТекущаяФорма = Неопределено, 
	СохранятьНастройку = Истина) Экспорт
	
	Если СохранятьНастройку Тогда
		ИнтерфейсДокументовЭДОВызовСервера.СохранитьВариантИнтерфейсаПоУмолчанию(Легкий);
	КонецЕсли;
	
	ФормаТекущихДел = ИнтерфейсДокументовЭДОКлиентСервер.ФормаТекущихДелЭДОПоВариантуИнтерфейса(Легкий);
	ОткрытьФорму(ФормаТекущихДел);
	Если ТекущаяФорма <> Неопределено
		И ТекущаяФорма.ИмяФормы <> ФормаТекущихДел Тогда
		ТекущаяФорма.Закрыть();
	КонецЕсли;
	
КонецПроцедуры 

// Открыть обращение в службу технической поддержки.
Процедура ОткрытьОбращениеВСлужбуТехническойПоддержки() Экспорт
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СообщенияВСлужбуТехническойПоддержки") Тогда
		МодульСообщенияВСлужбуТехническойПоддержкиКлиентСервер =
			ОбщегоНазначенияКлиент.ОбщийМодуль("СообщенияВСлужбуТехническойПоддержкиКлиентСервер");
	
		ДанныеСообщения = МодульСообщенияВСлужбуТехническойПоддержкиКлиентСервер.ДанныеСообщения();
		ДанныеСообщения.Получатель                    = "edo";
		ДанныеСообщения.Тема                          = НСтр("ru = 'Текущие дела ЭДО'");
		ДанныеСообщения.Сообщение                     = НСтр("ru = '<Заполните текст обращения>'");
		ДанныеСообщения.ИспользоватьСтандартныйШаблон = Истина;
		МодульСообщенияВСлужбуТехническойПоддержкиКлиент = 
			ОбщегоНазначенияКлиент.ОбщийМодуль("СообщенияВСлужбуТехническойПоддержкиКлиент");
	
		МодульСообщенияВСлужбуТехническойПоддержкиКлиент.ОтправитьСообщение(
			ДанныеСообщения, ,
			Неопределено,
			Новый ОписаниеОповещения("ПриЗавершенииОтправкиСообщенияВТехПоддержку", ЭтотОбъект));
	Иначе
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку("https://its.1c.ru/sd/form/edo");
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаЭлектронныхДокументов

#Область ФормированиеКаталогаТоваров	

// Сформировать каталог товаров.
// 
// Параметры:
//  ПараметрыКаталогаТоваров - см. НастройкиОтправкиЭДОСлужебныйВызовСервера.ПараметрыКаталогаТоваровДляОтправкиПоЭДО
//  ИдентификаторФормы - УникальныйИдентификатор
Процедура СформироватьКаталогТоваров(ПараметрыКаталогаТоваров, ИдентификаторФормы) Экспорт
	
	КонтекстДиагностики = ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики();
	Контекст = Новый Структура;
	Контекст.Вставить("ПараметрыКаталогаТоваров", ПараметрыКаталогаТоваров);
	Контекст.Вставить("ИдентификаторФормы", ИдентификаторФормы);
	Контекст.Вставить("КонтекстДиагностики", КонтекстДиагностики);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьКаталогТоваровПослеПодбора", ЭтотОбъект, Контекст);
	ИнтеграцияЭДОКлиент.ОткрытьФормуПодбораТоваров(ИдентификаторФормы, ОписаниеОповещения);
	
КонецПроцедуры

// Отправить каталог товаров после подбора.
// 
// Параметры:
//  ДанныеКаталога - Строка - адрес временного хранилища данных каталога товаров.
//  Контекст - Структура:
//  * ПараметрыКаталогаТоваров - см. НастройкиОтправкиЭДОСлужебныйВызовСервера.ПараметрыКаталогаТоваровДляОтправкиПоЭДО
//  * ИдентификаторФормы - Строка
//  * КонтекстДиагностики - см. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
Процедура ОтправитьКаталогТоваровПослеПодбора(ДанныеКаталога, Контекст) Экспорт
	
	Если ЗначениеЗаполнено(ДанныеКаталога) Тогда
		ПараметрыОткрытия = НовыеПараметрыОткрытияЭлектронногоДокумента();
		ПараметрыОткрытия.ДанныеКаталога = ДанныеКаталога;
		ПараметрыОткрытия.ВидДокумента = Контекст.ПараметрыКаталогаТоваров.ВидДокумента;
		ПараметрыОткрытия.НовыйДокумент = Истина;
		ОткрытьЭлектронныйДокументОбъектаУчета(Контекст.ПараметрыКаталогаТоваров.НастройкаЭДО, ПараметрыОткрытия);
	КонецЕсли;
	
КонецПроцедуры	

#КонецОбласти

Функция НовыеПараметрыФормыПросмотраЗагрузкиЭлектронныхДокументов() Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("АдресХранилищаФайла");
	СтруктураПараметров.Вставить("АдресХранилищаПакета");
	СтруктураПараметров.Вставить("ФайлАрхива", Истина);
	СтруктураПараметров.Вставить("ИмяФайла");
	СтруктураПараметров.Вставить("НаправлениеЭД");
	СтруктураПараметров.Вставить("Контрагент");
	СтруктураПараметров.Вставить("УникальныйИдентификатор");
	СтруктураПараметров.Вставить("ВладелецЭД");

	Возврат СтруктураПараметров;

КонецФункции

Процедура ОткрытьФормуПросмотраЗагрузкиЭлектронногоДокумента(Параметры) Экспорт

	ОткрытьФорму("Обработка.ИнтерфейсДокументовЭДО.Форма.ЗагрузкаПросмотрЭлектронногоДокумента",
		Новый Структура("СтруктураЭД", Параметры), ЭтотОбъект, Параметры.УникальныйИдентификатор);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиПодключаемыхКоманд

// Обработчик команды отправки печатной формы по ЭДО.
//
// Параметры:
//  ПараметрКоманды - Ссылка - ссылка на объект ИБ, электронные документы которого надо отправить,
//  ПараметрыВыполненияКоманды - Структура - дополнительные параметры просмотра.
//
Процедура ОтправитьПечатнуюФормуПоЭДОКоманда(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	Если ПараметрКоманды = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Контекст = ИнтерфейсДокументовЭДОКлиентСервер.НовыйКонтекстОтправкиПечатныхФормПоЭДО();
	Контекст.ДокументОснование = ПараметрКоманды;
	
	СуществуютЭД = ИнтеграцияЭДОВызовСервера.ЭлектронныеДокументыОбъектовУчета(ПараметрКоманды).Количество() > 0;
	
	Если СуществуютЭД Тогда 
		
		ОткрытьФорму("Обработка.ИнтерфейсДокументовЭДО.Форма.СписокСформированныхДокументов", Контекст, 
			ПараметрКоманды,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Возврат;
		
	КонецЕсли;
	
	СформироватьНеформализованныеЭДОПоКонтекстуОтправки(Контекст);
	
КонецПроцедуры

Процедура ВыгрузитьДанныеВФайл(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	МассивСсылок = ОбщегоНазначенияБЭДКлиент.МассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ИнтерфейсДокументовЭДОВызовСервера.ВыгрузкаДанныхВФайлДоступнаДляОбъектов(МассивСсылок) Тогда
		Если МассивСсылок.Количество() = 1 Тогда
			ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для указанного объекта.'");
		Иначе
			ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для указанных объектов.'");
		КонецЕсли;
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Параметры = Новый Структура("СтруктураЭД", МассивСсылок);
	ОткрытьФорму("Обработка.ИнтерфейсДокументовЭДО.Форма.ВыгрузкаЭлектронныхДокументовВФайл", Параметры, ПараметрыВыполненияКоманды.Источник);
	
КонецПроцедуры

Процедура ОткрытьВыгрузкуДокументовВФайл(ОбъектыУчета) Экспорт
	
	Параметры = Новый Структура("СтруктураЭД", ОбъектыУчета);
	ОткрытьФорму("Обработка.ИнтерфейсДокументовЭДО.Форма.ВыгрузкаЭлектронныхДокументовВФайл", Параметры);
	
КонецПроцедуры

Процедура ПерезаполнитьДокумент(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	ИнтеграцияЭДОКлиент.ПерезаполнитьДокумент(ПараметрКоманды);
	
КонецПроцедуры

Процедура ЗагрузитьДанныеИзФайла(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	АдресВХранилище = Неопределено;
	УникальныйИдентификатор = Новый УникальныйИдентификатор;
	
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СсылкаНаДокумент", ПараметрКоманды);
	ДополнительныеПараметры.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	
	Обработчик = Новый ОписаниеОповещения("ЗагрузитьДанныеИзФайлаОбработатьРезультатПомещенияФайла", ЭтотОбъект, ДополнительныеПараметры);
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.Фильтр = НСтр("ru = 'XML файл'") + "(*.xml)|*.xml|" + НСтр("ru = 'ZIP файл'") + "(*.zip)|*.zip";
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите файл'");
	
	НачатьПомещениеФайла(Обработчик, АдресВХранилище, ДиалогОткрытияФайла, Истина, УникальныйИдентификатор);
		
КонецПроцедуры

Процедура ОткрытьНастройкиОтправкиДокументовПоДоговору(Договор, ДополнительныеПараметры) Экспорт
	
	НастройкиЭДОКлиент.ОткрытьНастройкиОтправкиПоДоговору(Договор);
	
КонецПроцедуры

Процедура ПригласитьКОбменуЭДО(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	Параметры = СинхронизацияЭДОКлиент.НовыеПараметрыОткрытияПомощникаОтправкиПриглашения();
	Параметры.Контрагент = ИнтерфейсДокументовЭДОВызовСервера.КонтрагентыДляОтправкиПриглашений(ПараметрКоманды);
	СинхронизацияЭДОКлиент.ОткрытьПомощникОтправкиПриглашения(Параметры);
	
КонецПроцедуры

Процедура ОткрытьНастройкиОтраженияВУчете(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	НастройкиЭДОКлиент.ОткрытьНастройкиОтраженияВУчете(ПараметрКоманды);
			
КонецПроцедуры
	
Процедура ОткрытьНастройкиОтправкиДокументовКонтрагента(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт

	НастройкиЭДОКлиент.ОткрытьНастройкиОтправки(ПараметрКоманды);	
		
КонецПроцедуры
	
Процедура ПодключитьКЭДО(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт

	ПараметрыСоздания = СинхронизацияЭДОКлиент.НовыеПараметрыСозданияУчетнойЗаписи();
	ПараметрыСоздания.Организация = ПараметрКоманды;
	СинхронизацияЭДОКлиент.СоздатьУчетнуюЗапись(ПараметрыСоздания);
		
КонецПроцедуры
	
Процедура ОткрытьСписокУчетныхЗаписей(Организация, ПараметрыВыполненияКоманды) Экспорт
	
	СинхронизацияЭДОКлиент.ОткрытьСписокУчетныхЗаписей(Организация);
	
КонецПроцедуры

Процедура ОткрытьСписокМЧД(Организация, ПараметрыВыполненияКоманды) Экспорт
	
	МашиночитаемыеДоверенностиКлиент.ОткрытьСписокМЧД(Организация);
	
КонецПроцедуры
	
Процедура НастройкиОтправкиДокументовИнтеркампани(Организация, ДополнительныеПараметры) Экспорт

	НастройкиЭДОКлиент.ОткрытьНастройкиИнтеркампани(Организация);
		
КонецПроцедуры

// Параметры:
//  ПараметрКоманды - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//                  - Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  ПараметрыВыполненияКоманды - Структура
Процедура СформироватьПодписатьОтправитьЭД(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	Если Не ЗначениеЗаполнено(ПараметрКоманды) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран объект учета для отправки электронного документа'"));
		Возврат;
	КонецЕсли;
	
	Основания = ?(ТипЗнч(ПараметрКоманды) = Тип("Массив"), ПараметрКоманды,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрКоманды));
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Источник", ПараметрыВыполненияКоманды.Источник);
	
	Если ПараметрыВыполненияКоманды.Свойство("Оповещение") Тогда
		ДополнительныеПараметры.Вставить("Оповещение", ПараметрыВыполненияКоманды.Оповещение);
	КонецЕсли;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("СформироватьПодписатьОтправитьЭДЗавершить", ЭтотОбъект, ДополнительныеПараметры);
	
	Если Основания.Количество() > 1 Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ПараметрКоманды", Основания);
		ДополнительныеПараметры.Вставить("Обработчик", ОбработчикОповещения);
		Если ПараметрыВыполненияКоманды.Свойство("Оповещение") Тогда
			ДополнительныеПараметры.Вставить("ОповещениеПриОтказе", ПараметрыВыполненияКоманды.Оповещение);
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ПроверитьПроведениеПослеВопросаПользователю", ЭтотОбъект, ДополнительныеПараметры);
		
		ТекстВопроса = НСтр("ru = 'Отправить электронные документы выделенных элементов?
			|Если электронных документов нет, они будут созданы автоматически.'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		
		ИнтеграцияЭДОКлиент.ПодготовитьКДокументообороту(Основания, ОбработчикОповещения);
	
	КонецЕсли;
			
КонецПроцедуры

Процедура ПроверитьПроведениеПослеВопросаПользователю(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Если ДополнительныеПараметры.Свойство("ОповещениеПриОтказе") Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриОтказе);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ИнтеграцияЭДОКлиент.ПодготовитьКДокументообороту(ДополнительныеПараметры.ПараметрКоманды,
		ДополнительныеПараметры.Обработчик);
	
КонецПроцедуры

// Параметры:
//  ПараметрКоманды - см. СформироватьПодписатьОтправитьЭД.ПараметрКоманды
//  ПараметрыВыполненияКоманды - Структура
Процедура СформироватьПодписатьОтправитьЭДЗавершить(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	Если ПараметрКоманды = Неопределено Тогда
		Оповестить(ИмяСобытияОбновленияТекущихДелЭДО());
		Возврат;
	КонецЕсли;
	
	НаборДействий = Новый Соответствие;
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Сформировать"));
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Подписать"));
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ПодготовитьКОтправке"));
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Отправить"));
	
	ПараметрыВыполненияДействийПоЭДО = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	ПараметрыВыполненияДействийПоЭДО.НаборДействий = НаборДействий;
	ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ОбъектыУчета = ПараметрКоманды;
	
	Если ПараметрыВыполненияКоманды.Свойство("ДополнительныеФайлы") Тогда
		ПараметрыВыполненияДействийПоЭДО.ДополнительныеФайлы = ПараметрыВыполненияКоманды.ДополнительныеФайлы;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС") Тогда
		МодульЭлектронноеАктированиеЕИСГИСНРКлиент 
			= ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектронноеАктированиеЕИСГИСНРКлиент");
		МодульЭлектронноеАктированиеЕИСГИСНРКлиент.ПодготовитьПараметрыДокументовЭДО(
			ПараметрыВыполненияКоманды,
			ПараметрыВыполненияДействийПоЭДО);
	КонецЕсли;

	Если ПараметрыВыполненияКоманды.Свойство("Оповещение") Тогда
		Оповещение = ПараметрыВыполненияКоманды.Оповещение;
	Иначе
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("ОбъектыУчета", ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ОбъектыУчета);
		ПараметрыОповещения.Вставить("ПараметрыВыполненияДействийПоЭДО", ПараметрыВыполненияДействийПоЭДО);
		Оповещение = Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ЭтотОбъект, ПараметрыОповещения);
	КонецЕсли;
	
	НачатьВыполнениеДействийПоЭДО(Оповещение, ПараметрыВыполненияДействийПоЭДО);
	
КонецПроцедуры
	
Процедура ОткрытьНастройкиВнутреннегоЭДО(Организация, ПараметрыВыполненияКоманды) Экспорт

	НастройкиЭДОКлиент.ОткрытьНастройкиВнутреннегоЭлектронногоДокументооборота(Организация);
		
КонецПроцедуры
	
Процедура ОткрытьЭлектронныйДокументОбъектаУчетаКоманда(ОбъектУчета, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ОбъектУчета) Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Не выбран объект учета для просмотра электронного документа'"));
		Возврат;
	КонецЕсли;
	
	ОткрытьЭлектронныйДокументОбъектаУчета(ОбъектУчета);
	
КонецПроцедуры

#КонецОбласти

#Область ИнтеграцияСИнтерфейсомУчетныхДокументов

// Параметры "ПриОткрытии" формы.
// 
// Возвращаемое значение:
//  Структура:
//    * Форма - ФормаКлиентскогоПриложения
//    * МестоРазмещенияКоманд - РасширениеГруппыФормыДляПодменю
//    * ЕстьОбработчикОбновитьКомандыЭДО - Булево
//
Функция ПараметрыПриОткрытииФормы() Экспорт

	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Форма");
	ПараметрыОповещения.Вставить("МестоРазмещенияКоманд");
	ПараметрыОповещения.Вставить("ЕстьОбработчикОбновитьКомандыЭДО", Ложь);
	
	//@skip-check constructor-function-return-section
	Возврат ПараметрыОповещения;

КонецФункции

// Обработчика события "ПриОткрытии" для форм списка и документа.
// Параметры:
//  Параметры -  ФормаКлиентскогоПриложения - (вариант передачи параметра устарел).
//            -  см. ПараметрыПриОткрытииФормы
//
Процедура ПриОткрытииФормы(Параметры) Экспорт
	
	Если ТипЗнч(Параметры) = Тип("ФормаКлиентскогоПриложения") Тогда
		ПараметрыПриОткрытии = ПараметрыПриОткрытииФормы();
		ПараметрыПриОткрытии.Форма = Параметры;
	Иначе 
		ПараметрыПриОткрытии = Параметры;
	КонецЕсли;
	
	Если ПараметрыПриОткрытии.ЕстьОбработчикОбновитьКомандыЭДО Тогда
		ПараметрыПриОткрытии.Форма.ОтключитьОбработчикОжидания("Подключаемый_ОбновитьКомандыЭДО");
		ПараметрыПриОткрытии.Форма.ПодключитьОбработчикОжидания("Подключаемый_ОбновитьКомандыЭДО", 0.2, Истина);
	КонецЕсли;
	
КонецПроцедуры

#Область ФормаСписка

// Параметры оповещения для формы списка.
//
// Возвращаемое значение:
//  Структура:
//    * Форма - ФормаКлиентскогоПриложения
//    * ИмяДинамическогоСписка - Строка - Наименование динамического списка формы, отображающего "СостояниеЭД".
//                               Возможно указание нескольких списков через ("СписокИсходящий, СписокВходящий")
//    * МестоРазмещенияКоманд - РасширениеГруппыФормыДляПодменю
//                            - Массив Из РасширениеГруппыФормыДляПодменю
//    * ЕстьОбработчикОбновитьКомандыЭДО - Булево
//    * ЕстьОбработчикОбновленияВидимостиСостоянияЭДО - Булево
//
Функция ПараметрыОповещенияЭДО_ФормаСписка() Экспорт

	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Форма");
	ПараметрыОповещения.Вставить("ИмяДинамическогоСписка", "");
	ПараметрыОповещения.Вставить("МестоРазмещенияКоманд");
	ПараметрыОповещения.Вставить("ЕстьОбработчикОбновитьКомандыЭДО", Ложь);
	ПараметрыОповещения.Вставить("ЕстьОбработчикОбновленияВидимостиСостоянияЭДО", Ложь);

	//@skip-check constructor-function-return-section
	Возврат ПараметрыОповещения;

КонецФункции

// Обработчик события "ОбработкаОповещения" формы списка документов.
//
// Параметры:
//  ИмяСобытия - Строка
//  Параметр - Произвольный
//  Источник - Произвольный
//  ПараметрыОповещения - см. ПараметрыОповещенияЭДО_ФормаСписка
//
Процедура ОбработкаОповещения_ФормаСписка(ИмяСобытия, Параметр, Источник, ПараметрыОповещения) Экспорт

	ОбщаяОбработкаОповещения(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	Форма = ПараметрыОповещения.Форма;
	Если ИмяСобытия = ИмяСобытияОбновленияСостоянияЭДО() Или ИмяСобытия = "ОбновленСписокУчетныхЗаписей1СЭДО" Тогда

		ИмяДинамическогоСписка = ПараметрыОповещения.ИмяДинамическогоСписка;
		МассивСписков = СтрРазделить(ИмяДинамическогоСписка, ", ", Ложь);
		Для Каждого ИмяРеквизита Из МассивСписков Цикл
			Форма.Элементы[ИмяРеквизита].Обновить();
		КонецЦикла;
		Если ПараметрыОповещения.ЕстьОбработчикОбновитьКомандыЭДО Тогда
			Форма.ОтключитьОбработчикОжидания("Подключаемый_ОбновитьКомандыЭДО");
			Форма.ПодключитьОбработчикОжидания("Подключаемый_ОбновитьКомандыЭДО", 0.2, Истина);
		КонецЕсли;

	ИначеЕсли ИмяСобытия = "Запись_НаборКонстант" И Источник = "ИспользоватьВнутренниеДокументыЭДО" Тогда

		Если ПараметрыОповещения.ЕстьОбработчикОбновленияВидимостиСостоянияЭДО Тогда
			Форма.ОтключитьОбработчикОжидания("Подключаемый_ОбновитьВидимостьСостоянияЭДО");
			Форма.ПодключитьОбработчикОжидания("Подключаемый_ОбновитьВидимостьСостоянияЭДО", 0.2, Истина);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Обработка нажатия на гиперссылку "СостояниеЭДО" в форме списка
//
// Параметры:
//  ОбъектУчетаСсылка - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - ссылка на объект учета.
//  СтандартнаяОбработка - Булево - признак стандартной обработки нажатия на гиперссылку (устанавливается в Ложь).
//
Процедура ДекорацияСостояниеЭДОФормаСпискаНажатие(ОбъектУчетаСсылка, СтандартнаяОбработка = Ложь) Экспорт
	
	Если ОбъектУчетаСсылка <> Неопределено Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если Не ИнтерфейсДокументовЭДОВызовСервера.СостояниеОбъектаУчетаУстановлено(ОбъектУчетаСсылка) Тогда
			Возврат;
		КонецЕсли;
		
		ОткрытьЭлектронныйДокументОбъектаУчета(ОбъектУчетаСсылка);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПриАктивизацииСтроки_ФормаСписка(Форма) Экспорт
	
	Форма.ОтключитьОбработчикОжидания("Подключаемый_ОбновитьКомандыЭДО");
	Форма.ПодключитьОбработчикОжидания("Подключаемый_ОбновитьКомандыЭДО", 0.2, Истина);

КонецПроцедуры

// См. ОбменСКонтрагентамиКлиент.ОбработчикОбновленияВидимостьСостоянияЭДО
Процедура ОбработчикОбновленияВидимостьСостоянияЭДО(Форма, КолонкаСостояния) Экспорт
	
	Если КолонкаСостояния <> Неопределено Тогда
		КолонкаСостояния.Видимость = ИнтерфейсДокументовЭДОВызовСервера.ИспользуетсяЭДОИВнутреннийЭДО();
	КонецЕсли; 	
	
КонецПроцедуры

#КонецОбласти

#Область ФормаДокумента
	
// Параметров оповещения для формы документа.
//
// Возвращаемое значение:
//  Структура:
//    * Форма - ФормаКлиентскогоПриложения
//    * ДокументСсылка - ДокументСсылка
//    * КонтроллерСостояниеЭДО - ДекорацияФормы, ПолеФормы - элемент отображения состояние ЭДО
//    * ГруппаСостояниеЭДО - ГруппаФормы - владелец для КонтроллерСостояниеЭДО
//    * МестоРазмещенияКоманд - РасширениеГруппыФормыДляПодменю
//
Функция ПараметрыОповещенияЭДО_ФормаДокумента() Экспорт

	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Форма");
	ПараметрыОповещения.Вставить("ДокументСсылка");
	ПараметрыОповещения.Вставить("КонтроллерСостояниеЭДО");
	ПараметрыОповещения.Вставить("ГруппаСостояниеЭДО");
	ПараметрыОповещения.Вставить("МестоРазмещенияКоманд");
	//@skip-check constructor-function-return-section
	Возврат ПараметрыОповещения;

КонецФункции

// Обработчик события "ОбработкаОповещения" формы документа.
//
// Параметры:
//  ИмяСобытия - Строка
//  Параметр - Произвольный
//  Источник - Произвольный
//  ПараметрыОповещения - см. ПараметрыОповещенияЭДО_ФормаДокумента
//  РезультатыОбработкиОповещения - Структура - Выходной параметр:
//    * ИзменилосьСостояниеЭДО - Булево - Истина, если произошло изменение состояния ЭДО объекта учета, отображаемого 
//                                        в вызывающей форме.
//
Процедура ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения,
	РезультатыОбработкиОповещения = Неопределено) Экспорт

	ОбщаяОбработкаОповещения(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);

	РезультатыОбработкиОповещения = Новый Структура;
	РезультатыОбработкиОповещения.Вставить("ИзменилосьСостояниеЭДО", Ложь);

	Если ИмяСобытия = ИмяСобытияОбновленияСостоянияЭДО() Или ИмяСобытия = "ОбновитьСостояниеПриглашений" Тогда

		ДокументСсылка = ПараметрыОповещения.ДокументСсылка;

		Если ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("ДокументыУчета") И ТипЗнч(
			Параметр.ДокументыУчета) = Тип("Массив") И Параметр.ДокументыУчета.Найти(ДокументСсылка) = Неопределено Тогда

			Возврат;

		КонецЕсли;

		ИнтерфейсДокументовЭДОКлиентСервер.ЗаполнитьСостояниеЭДО_ФормаДокумента(ПараметрыОповещения);
		РезультатыОбработкиОповещения.ИзменилосьСостояниеЭДО = Истина;

	КонецЕсли;

КонецПроцедуры

// Обработка нажатия на гиперссылку "СостояниеЭДО" в форме документа
//
// Параметры:
//  Форма - УправляемаяФорма - Форма учетного документа.
//  СтандартнаяОбработка - Булево - Признак стандартной обработки нажатия на гиперссылку (устанавливается в Ложь).
//
Процедура КонтроллерСостояниеЭДОНажатие(Форма, СтандартнаяОбработка = Ложь) Экспорт
	
	СтандартнаяОбработка = Ложь;

	ПараметрыОбменаСКонтрагентами = Форма.ПараметрыОбменаСКонтрагентами;
	ДанныеСостоянияЭДО = ПараметрыОбменаСКонтрагентами.ДанныеСостоянияЭДОТекущие;
				
	Если ДанныеСостоянияЭДО.СуществуетАктуальныйДокумент Тогда
		
		ОткрытьЭлектронныйДокументОбъектаУчета(Форма.Объект.Ссылка);
		
	ИначеЕсли Не ДанныеСостоянияЭДО.ЕстьПравоНастройки И ДанныеСостоянияЭДО.НеобходимаНастройка Тогда
		ПоказатьПредупреждение(, НСтр("ru='Необходима настройка электронного документооборота. Обратитесь к администратору.'"))
	Иначе
		Если Форма.Модифицированность Тогда
			Если ДанныеСостоянияЭДО.НеобходимаНастройка Тогда
				ТекстВопроса = НСтр("ru='Для того чтобы настроить ЭДО, нужно записать документ. Записать?'");			
			Иначе
				ТекстВопроса = НСтр("ru='Для того чтобы начать ЭДО, нужно записать документ. Записать?'");			
			КонецЕсли;
				
			ПараметрыОповещения = Новый Структура;
			ПараметрыОповещения.Вставить("Форма", Форма);
			Оповещение = Новый ОписаниеОповещения("КонтроллерСостояниеЭДОНажатиеПродолжить", ИнтерфейсДокументовЭДОКлиент, ПараметрыОповещения);
			
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, ,
				КодВозвратаДиалога.Отмена, НСтр("ru='Необходимо записать документ'"));
		
		Иначе
			ОткрытьЭлектронныйДокументОбъектаУчета(Форма.Объект.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Описание оповещения для процедуры КонтроллерСостояниеЭДОНажатие
//
// Параметры:
//  Результат - КодВозвратаДиалога.ОК, КодВозвратаДиалога.Отмена - результат диалога с пользователем.
//  Параметры - Структура - дополнительные параметры.
//    * Форма - ФормаКлиентскогоПриложения - Форма учетного документа, из которого вызван диалог.
//
Процедура КонтроллерСостояниеЭДОНажатиеПродолжить(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Параметры.Форма.Записать();
		ОткрытьЭлектронныйДокументОбъектаУчета(Параметры.Форма.Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события "ПослеЗаписи" формы справочника, документа.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма элемента справочника, учетного документа.
//  ПараметрыЗаписи - Структура - см. параметр события формы ПослеЗаписи.
//
Процедура ПослеЗаписи_ФормаДокументаСправочника(Форма, ПараметрыЗаписи) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПараметрыОбменаСКонтрагентами")
		И ТипЗнч(Форма.ПараметрыОбменаСКонтрагентами) = Тип("Структура")
		И Форма.ПараметрыОбменаСКонтрагентами.КонтекстОперации <> Неопределено Тогда
		СформироватьОтложенныйКонтекстДиагностики(Форма.ПараметрыОбменаСКонтрагентами.КонтекстОперации);
		ПодключитьОбработчикОжидания("ОбменСКонтрагентамиОбработатьОшибкиОтложенно", 1, Истина);
	КонецЕсли;
	
	Оповестить(ИмяСобытияОбновленияТекущихДелЭДО());
	
КонецПроцедуры

#КонецОбласти

#Область ФормаСправочника

// Параметры оповещения ЭДО для формы справочника.
// 
// Возвращаемое значение:
//  Структура:
// * Форма - ФормаКлиентскогоПриложения
// * МестоРазмещенияКоманд - РасширениеГруппыФормыДляПодменю
// * ЕстьОбработчикОбновитьКомандыЭДО - Булево
// * СправочникСсылка - СправочникСсылка
// * КонтроллерСостояниеЭДО - ДекорацияФормы, ПолеФормы - элемент отображения состояние ЭДО
// * ГруппаСостояниеЭДО - ГруппаФормы - владелец для КонтроллерСостояниеЭДО
Функция ПараметрыОповещенияЭДО_ФормаСправочника() Экспорт
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Форма");
	ПараметрыОповещения.Вставить("МестоРазмещенияКоманд");
	ПараметрыОповещения.Вставить("ЕстьОбработчикОбновитьКомандыЭДО", Ложь);
	ПараметрыОповещения.Вставить("СправочникСсылка");
	ПараметрыОповещения.Вставить("КонтроллерСостояниеЭДО");
	ПараметрыОповещения.Вставить("ГруппаСостояниеЭДО");
	//@skip-check constructor-function-return-section
	Возврат ПараметрыОповещения;
	
КонецФункции

// Обработчик события "ОбработкаОповещения" формы справочника.
//
// Параметры:
//  ИмяСобытия - Строка
//  Параметр - Произвольный
//  Источник - Произвольный
//  ПараметрыОповещения - см. ПараметрыОповещенияЭДО_ФормаСправочника
//
Процедура ОбработкаОповещения_ФормаСправочника(ИмяСобытия, Параметр, Источник, ПараметрыОповещения) Экспорт
	
	ОбщаяОбработкаОповещения(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	Форма = ПараметрыОповещения.Форма;
	Если ИмяСобытия = "ОбновленСписокУчетныхЗаписей1СЭДО" Тогда
		
		Если ПараметрыОповещения.ЕстьОбработчикОбновитьКомандыЭДО Тогда
			Форма.ОтключитьОбработчикОжидания("Подключаемый_ОбновитьКомандыЭДО");
			Форма.ПодключитьОбработчикОжидания("Подключаемый_ОбновитьКомандыЭДО", 0.2, Истина);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = ИмяСобытияОбновленияСостоянияЭДО() Или ИмяСобытия = "ОбновитьСостояниеПриглашений" Тогда

		СправочникСсылка = ПараметрыОповещения.СправочникСсылка;

		НеЗаполнятьСостояниеЭДО = (ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("ДокументыУчета") И ТипЗнч(
			Параметр.ДокументыУчета) = Тип("Массив") И Параметр.ДокументыУчета.Найти(СправочникСсылка) = Неопределено);
		
		Если НеЗаполнятьСостояниеЭДО Тогда

			Возврат;

		КонецЕсли;

		ИнтерфейсДокументовЭДОКлиентСервер.ЗаполнитьСостояниеЭДО_ФормаСправочника(ПараметрыОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПечатьЭлектронныхДокументов

// Открывает форму ПечатьЭлектронныхДокументов.
//
// Параметры:
//  ЭлектронныеДокументы - Массив, СписокЗначений, ДокументСсылка.ЭлектронныйДокументВходящийЭДО,
//                         ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  ПараметрыФормы - Структура - Параметры, которые будут переданы в открываемую форму.
//
Процедура ОткрытьФормуПечатиЭлектронныхДокументов(Знач ЭлектронныеДокументы, Знач ПараметрыФормы = Неопределено) Экспорт
	
	Если ПараметрыФормы = Неопределено Тогда
		ПараметрыФормы = Новый Структура;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ЭлектронныеДокументы", ЭлектронныеДокументы);
	
	ОткрытьФорму("Обработка.ИнтерфейсДокументовЭДО.Форма.ПечатьЭлектронныхДокументов", ПараметрыФормы);
	
КонецПроцедуры

// Открывает форму ПечатьЭлектронныхДокументов.
//
// Параметры:
//  ЭлектронныеДокументы - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,
//                         ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//
Процедура ПоказатьПротоколОбмена(Знач ЭлектронныеДокументы) Экспорт
	
	ПечатныеФормы = ИнтерфейсДокументовЭДОВызовСервера.ПечатныеФормыПротоколовОбмена(ЭлектронныеДокументы);
	
	Идентификаторы = Новый Массив;
	Для каждого ПечатнаяФорма Из ПечатныеФормы Цикл
		Идентификаторы.Добавить(ПечатнаяФорма.ИмяМакета);
	КонецЦикла;
	
	КоллекцияПечатныхФорм = УправлениеПечатьюКлиент.НоваяКоллекцияПечатныхФорм(Идентификаторы);
	
	Для каждого ПечатнаяФорма Из ПечатныеФормы Цикл
		ОписаниеПечатнойФормы = УправлениеПечатьюКлиент.ОписаниеПечатнойФормы(КоллекцияПечатныхФорм, ПечатнаяФорма.ИмяМакета); 
		ОписаниеПечатнойФормы.ТабличныйДокумент = ПечатнаяФорма.ТабличныйДокумент;
		ОписаниеПечатнойФормы.СинонимМакета = ПечатнаяФорма.СинонимМакета;
	КонецЦикла;
	
	УправлениеПечатьюКлиент.ПечатьДокументов(КоллекцияПечатныхФорм);
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаЭлектронныхДокументов

// Выгружает электронные документы в формате PDF в файл.
//
// Параметры:
//  ЭлектронныеДокументы - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО, 
//  				- ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - Электронные документы, которые необходимо выгрузить.
//  УникальныйИдентификаторФормы - УникальныйИдентификатор - для создания длительной операции с привязкой к форме
//
Процедура ВыгрузитьЭлектронныеДокументыВФорматеPDF(Знач ЭлектронныеДокументы, Знач УникальныйИдентификаторФормы) Экспорт
	
	АдресДанныхВХранилище = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
	ДлительнаяОперация = ИнтерфейсДокументовЭДОВызовСервера.СформироватьФайлыВыгрузкиЭДВФорматеPDFДлительнаяОперация(ЭлектронныеДокументы, 
		АдресДанныхВХранилище,
		УникальныйИдентификаторФормы);
		
	ОповещениеОЗавершенииПолученияФайлаPDF = Новый ОписаниеОповещения("ВыгрузитьЭлектронныеДокументыВФорматеPDFЗавершение", ЭтотОбъект);
		
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ПараметрыОжидания.ВыводитьСообщения = Ложь;
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершенииПолученияФайлаPDF, ПараметрыОжидания);
	
КонецПроцедуры

Процедура ВыгрузитьЭлектронныеДокументыВФорматеPDFЗавершение(Результат, ДополнительныйПараметр) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ПоказатьПредупреждение(, Результат.КраткоеПредставлениеОшибки);
		Возврат;
	КонецЕсли;
	
	СохранитьФайлыВыгрузкиЭД(ПолучитьИзВременногоХранилища(Результат.АдресРезультата));
	
КонецПроцедуры

// Выгружает документооборот по электронным документам в файл.
//
// Параметры:
//  ЭлектронныеДокументы - Массив - Электронные документы, которые необходимо выгрузить.
//
Процедура ВыгрузитьДокументооборотЦеликом(Знач ЭлектронныеДокументы) Экспорт
	АдресДанныхВХранилище = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
	СоответствиеФайловВыгрузки = ИнтерфейсДокументовЭДОВызовСервера.СформироватьФайлыВыгрузкиЭДДокументооборотЦеликом(
		ЭлектронныеДокументы, 
		АдресДанныхВХранилище);
	
	СохранитьФайлыВыгрузкиЭД(СоответствиеФайловВыгрузки);
	
КонецПроцедуры

// Выгружает электронные документы для предоставления в ФНС.
//
// Параметры:
//  ЭлектронныеДокументы - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//
Процедура ВыгрузитьЭлектронныеДокументыДляФНС(ЭлектронныеДокументы) Экспорт

	Оповещение = Новый ОписаниеОповещения("ОбработатьРезультатПодготовкиЭДДляФНСПослеДлительнойОперации", ЭтотОбъект);
	ДлительнаяОперация = ИнтерфейсДокументовЭДОВызовСервера.ЗапуститьПодготовкуЭлектронныхДокументовДляВыгрузкиФНС(
		ЭлектронныеДокументы);

	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	ПараметрыОжидания.Интервал = 1;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	
КонецПроцедуры

// Обрабатывает результат подготовки электронных документов после длительной операции, 
// предлагает выбрать каталог для сохранения файлов
// 
// Параметры:
//  ДлительнаяОперация - см. ДлительныеОперации.ВыполнитьФункцию
//  ДопПараметры - Неопределено - дополнительные параметры, которые могут быть переданы в процедуру обработки 
//   результатов длительной операции
//
Процедура ОбработатьРезультатПодготовкиЭДДляФНСПослеДлительнойОперации(ДлительнаяОперация, ДопПараметры) Экспорт
	
	Если ДлительнаяОперация <> Неопределено
		И ДлительнаяОперация.Статус = "Выполнено"
		Тогда
		РезультатВыгрузки = ИнтерфейсДокументовЭДОВызовСервера.ВыгрузкаЭДДляФНСПодготовитьДанныеДляВыгрузкиВКаталог(
			ДлительнаяОперация.АдресРезультата, Новый УникальныйИдентификатор);
		Оповещение = Новый ОписаниеОповещения("ВыгрузитьЭлектронныеДокументыДляФНСПослеВыбораКаталога", 
			ЭтотОбъект, РезультатВыгрузки);
		ФайловаяСистемаКлиент.ВыбратьКаталог(Оповещение);
	КонецЕсли;
	
КонецПроцедуры
	
// Сохраняет файлы в заданный каталог, вызывается после выбора каталога пользователем. 
//
// Параметры:
//  ВыбранныйКаталог - Строка, Неопределено - Выбранный пользователем каталог
//  РезультатВыгрузки - см. ИнтерфейсДокументовЭДОВызовСервера.ВыгрузкаЭДДляФНСПодготовитьДанныеДляВыгрузкиВКаталог
//
Процедура ВыгрузитьЭлектронныеДокументыДляФНСПослеВыбораКаталога(ВыбранныйКаталог, РезультатВыгрузки) Экспорт

	Если ВыбранныйКаталог <> Неопределено
		И НЕ ПустаяСтрока(ВыбранныйКаталог)
		И ЗначениеЗаполнено(РезультатВыгрузки.МассивСохраняемыхФайлов)
		Тогда
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("ВыбранныйКаталог", ВыбранныйКаталог);
		ПараметрыОповещения.Вставить("РезультатВыгрузки", РезультатВыгрузки);
		
		Оповещение = Новый ОписаниеОповещения("ВыгрузитьЭлектронныеДокументыДляФНСПослеСохраненияФайлов", 
			ЭтотОбъект, ПараметрыОповещения);
		ПараметрыСохранения = ФайловаяСистемаКлиент.ПараметрыСохраненияФайлов();
		ПараметрыСохранения.Диалог.Каталог = ВыбранныйКаталог;
		ПараметрыСохранения.Интерактивно = Ложь;
		
		ФайловаяСистемаКлиент.СохранитьФайлы(Оповещение, РезультатВыгрузки.МассивСохраняемыхФайлов, 
			ПараметрыСохранения);
	КонецЕсли;

	Для Каждого Ошибка Из РезультатВыгрузки.Ошибки Цикл
		ОбщегоНазначенияКлиент.СообщитьПользователю(Ошибка.ТекстОшибки, Ошибка.КлючДанных);
	КонецЦикла;

КонецПроцедуры 

// Выводит сообщение о результатах выгрузки электронных документов в виде форматированной строки.
// 
// Параметры:
//  Результат - Массив из ОписаниеПереданногоФайла
//  ДополнительныеПараметры - Структура:
//   * ВыбранныйКаталог - Строка - выбранный каталог
//   * РезультатВыгрузки - см. ИнтерфейсДокументовЭДОВызовСервера.ВыгрузкаЭДДляФНСПодготовитьДанныеДляВыгрузкиВКаталог
//
Процедура ВыгрузитьЭлектронныеДокументыДляФНСПослеСохраненияФайлов(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		МассивСтрок = Новый Массив;
		Для Каждого Элемент Из ДополнительныеПараметры.РезультатВыгрузки.РезультатыОбработки Цикл
			ЧастиСтроки = СтрокаСообщенияПоРезультатамВыгрузкиДляФНС(Элемент, ДополнительныеПараметры.ВыбранныйКаталог);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСтрок, ЧастиСтроки);
		КонецЦикла;
		ОбщегоНазначенияБЭДКлиент.ПоказатьФорматированнуюСтроку(
			Новый ФорматированнаяСтрока(МассивСтрок), 
			НСтр("ru='Результат выгрузки электронных документов для ФНС'"));
	КонецЕсли;
	
КонецПроцедуры 

#КонецОбласти

#Область ОтражениеВУчете

// Показывает окно для ввод (выбора) значения учетного документа.
// Выбранное значение передается в оповещение о выборе.
//
// Параметры:
//  Настройки - Структура - настройки подбора учетного документа.
//   * СпособОбработки - Строка - способ обработки входящего электронного документа.
//   * ИмяОбъектаМетаданных - Строка - полное имя объекта метаданных для выбора.
//   * ИмяТипаСсылки - Строка - имя типа ссылки для выбора. Например, "ДокументСсылка.ПоступлениеТоваровУслуг".
//   * Контрагент - ОпределяемыйТип.УчастникЭДО - контрагент по электронному документу.
//   * Организация - ОпределяемыйТип.Организация - организация по электронному документу.
//  ОповещениеОВыборе - ОписаниеОповещения - оповещение, которое выполняется при вводе (выборе) значения.
//
Процедура ПоказатьПодборУчетногоДокумента(Знач Настройки, Знач ОповещениеОВыборе) Экспорт
	
	СтандартнаяОбработка = Истина;
	СпособыОтраженияМЧДвУчете = МашиночитаемыеДоверенностиКлиентСервер.СпособыОтраженияВУчете(); 
	Если ЗначениеЗаполнено(Настройки.СпособОбработки)
		И СпособыОтраженияМЧДвУчете.Свойство(Настройки.СпособОбработки) Тогда
		МашиночитаемыеДоверенностиКлиент.ПриПодбореУчетногоДокумента(Настройки, ОповещениеОВыборе, СтандартнаяОбработка);
	Иначе
		ОбменСКонтрагентамиКлиентПереопределяемый.ПриПодбореУчетногоДокумента(Настройки, ОповещениеОВыборе, СтандартнаяОбработка);		
	КонецЕсли;
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	Подсказка = НСтр("ru = 'Укажите документ отражения в учете'");
	ПоказатьВводЗначения(ОповещениеОВыборе,, Подсказка, Новый ОписаниеТипов(Настройки.ИмяТипаСсылки));
	
КонецПроцедуры

// См. ОбменСКонтрагентамиКлиентПереопределяемый.ПослеПодбораУчетногоДокумента
Процедура ПослеПодбораУчетногоДокумента(ЭлектронныйДокумент, ДокументУчета) Экспорт
	
	ОбменСКонтрагентамиКлиентПереопределяемый.ПослеПодбораУчетногоДокумента(ЭлектронныйДокумент, ДокументУчета);
	
КонецПроцедуры

#КонецОбласти

#Область ПереопределениеМеханизмаПечатиБСП

// См. УправлениеПечатьюКлиентПереопределяемый.ПечатьДокументовОбработкаНавигационнойСсылки
Процедура ПечатьДокументовОбработкаНавигационнойСсылки(Форма, Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ОбъектыУчета = Форма.Параметры.ПараметрКоманды;
	
	Если Не ЗначениеЗаполнено(ОбъектыУчета) Тогда 
		 Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ОбъектыУчета) <> Тип("Массив") Тогда
		 ОбъектыУчета = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбъектыУчета);
	КонецЕсли;  
		
	Команда = ИнтерфейсДокументовЭДОВызовСервера.КомандаПечатиОбъекта(ОбъектыУчета[0], Форма.НастройкиПечатныхФорм[0].ИмяМакета);
	
	Если Не ЗначениеЗаполнено(Команда) Тогда
		Возврат;	
	КонецЕсли;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ВнутреннийЭДОПрогрессПодписания" Тогда
		
		ОткрытьЭлектронныйДокументОбъектаУчета(ОбъектыУчета[0]);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "Реклама1СЭДОВнутренний" Тогда
		
		ЕстьПравоНастройкиОбмена = ИнтерфейсДокументовЭДОВызовСервера.ЕстьПравоНастройкиОбмена();

		Если ЕстьПравоНастройкиОбмена Тогда
			
			Организация = Неопределено;
			ОписаниеОбъектаУчета = ИнтеграцияЭДОВызовСервера.ОписаниеОбъектаУчета(ОбъектыУчета[0]);
			Для каждого СтрокаОписания Из ОписаниеОбъектаУчета Цикл
				Если СтрокаОписания.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовЭДО.Внутренний") Тогда
					Организация = СтрокаОписания.Организация;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Оповещение = Новый ОписаниеОповещения("ЗавершениеРаботыМастераНастроекВнутреннегоЭДОСобытие", ЭтотОбъект);
			
			ВидДокумента = ИнтерфейсДокументовЭДОВызовСервера.НайтиСоздатьВидВнутреннегоДокумента(ОбъектыУчета[0], Команда);
			
			НастройкиЭДОКлиент.НастроитьВнутреннийЭлектронныйДокументооборот(Организация, ВидДокумента, Оповещение);
		Иначе 
			КонтекстОперации = ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики();
			ВидОперации = НСтр("ru = 'Формирование внутреннего электронного документа'");
			ВидОшибки = ИнтерфейсДокументовЭДОКлиентСервер.ВидОшибкиНетПравДляНастройкиЭДО();
			ТекстОшибки = НСтр("ru = 'Не настроен внутренний документооборот'");
			Ошибка = ОбработкаНеисправностейБЭДКлиент.НоваяОшибка(ВидОперации, ВидОшибки, ТекстОшибки, ТекстОшибки);
			ОбработкаНеисправностейБЭДКлиент.ДобавитьОшибку(КонтекстОперации, Ошибка,
				ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами, Ложь);
			ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки(КонтекстОперации);
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// См. УправлениеПечатьюКлиентПереопределяемый.ПечатьДокументовВыполнитьКоманду
Процедура ПечатьДокументовВыполнитьКоманду(Форма, Команда, ПродолжитьВыполнениеНаСервере, ДополнительныеПараметры) Экспорт
	
	Если Команда.Имя = "ВнутреннийЭДООтправитьНаПодпись" Тогда
		
		ОбъектыПечати = Форма.ОбъектыПечати.ВыгрузитьЗначения();
		
		Команда = ИнтерфейсДокументовЭДОВызовСервера.КомандаПечатиОбъекта(ОбъектыПечати[0], Форма.НастройкиПечатныхФорм[0].ИмяМакета);
		
		Если Не ЗначениеЗаполнено(Команда) Тогда
			Возврат;
		КонецЕсли;
		
		ВидВнутреннегоДокумента = ИнтерфейсДокументовЭДОВызовСервера.НайтиСоздатьВидВнутреннегоДокумента(ОбъектыПечати[0], Команда);
		
		Организация = Неопределено;
		ОписаниеОбъектаУчета = ИнтеграцияЭДОВызовСервера.ОписаниеОбъектаУчета(ОбъектыПечати[0]);
		Для каждого СтрокаОписания Из ОписаниеОбъектаУчета Цикл
			Если СтрокаОписания.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовЭДО.Внутренний") Тогда
				Организация = СтрокаОписания.Организация;
			КонецЕсли;
		КонецЦикла;
		
		КлючНастройки = Новый Структура;
		КлючНастройки.Вставить("Организация", Организация);
		КлючНастройки.Вставить("ВидВнутреннегоДокумента", ВидВнутреннегоДокумента);
		
		Параметр = Новый Структура;
		Параметр.Вставить("КлючНастройки", КлючНастройки);
		
		СформироватьЭДИзФормыПечатиБСП(Форма, Параметр);  
		
	ИначеЕсли Команда.Имя = "ЭДОСформироватьПроизвольныйДокумент" Тогда
		
		ВыполнитьКоманду_ЭДОСформироватьПроизвольныйДокумент(
			Форма, Команда, ПродолжитьВыполнениеНаСервере, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

// См. УправлениеПечатьюКлиентПереопределяемый.ПечатьДокументовОбработкаОповещения
Процедура ПечатьДокументовОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник) Экспорт
	
	Если ИмяСобытия = "ВнутреннийЭДО_ОбновлениеСостоянияФормыПечатиБСП" Тогда
		
		ИнтерфейсДокументовЭДОКлиентСервер.ОбновитьФормуПечатиДокументовБСП(Форма);
		Форма.ПодключитьОбработчикОжидания("ОбновитьТекущуюПечатнуюФорму",0.1,Истина);
		
	ИначеЕсли ИмяСобытия = "ЗавершениеРаботыМастераНастроекВнутреннегоЭДО" Тогда
		
		Оповестить("ВнутреннийЭДО_ОбновлениеСостоянияФормыПечатиБСП");
		СформироватьЭДИзФормыПечатиБСП(Форма, Параметр);
				
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗавершениеФормированияЭлектронныхДокументовСобытие(Результат, ДополнительныеПараметры) Экспорт
	Оповестить("ВнутреннийЭДО_ОбновлениеСостоянияФормыПечатиБСП");
КонецПроцедуры

Процедура ЗавершениеРаботыМастераНастроекВнутреннегоЭДОСобытие(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Оповестить("ЗавершениеРаботыМастераНастроекВнутреннегоЭДО", Результат);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаНавигационнойСсылкиВФормеПечатиБСП(НавигационнаяСсылка, Параметры = Неопределено) Экспорт
	
	Если НавигационнаяСсылка = "Реклама1СЭДО" Тогда
		МассивСсылок = Параметры;
		Если ЗначениеЗаполнено(МассивСсылок) Тогда
			ОткрытьЭлектронныйДокументОбъектаУчета(МассивСсылок[0]);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеДокументовИзПечатныхФорм

// Обработать выбор команды печати для отправки неформализованного ЭДО.
// 
// Параметры:
//  Выбор - ЭлементСпискаЗначений, Неопределено -
//  Контекст - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыйКонтекстОтправкиПечатныхФормПоЭДО
//
Процедура ОбработатьВыборКомандыПечатиДляОтправкиНеформализованногоЭДО(Выбор, Контекст) Экспорт
	
	Если Выбор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СформироватьНеформализованныйЭДОПоКомандеПечати(Выбор.Значение, Контекст.ДокументОснование);
	
КонецПроцедуры

// Обработать ответ на вопрос о формировании многих документов ЭДО.
// 
// Параметры:
//  Ответ - КодВозвратаДиалога, Неопределено -
//  Контекст - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыйКонтекстОтправкиПечатныхФормПоЭДО
//
Процедура ОбработатьОтветНаВопросОФормированииМногихДокументов(Ответ, Контекст) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	СформироватьНеформализованныеЭДОПоКонтекстуОтправки(Контекст);
	
КонецПроцедуры

// Открывает формы новых неформализованных документов ЭДО контексту отправки
// 
// Параметры:
//  Контекст - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыйКонтекстОтправкиПечатныхФормПоЭДО
//
Процедура СформироватьНеформализованныеЭДОПоКонтекстуОтправки(Контекст) Экспорт
	
	Если Контекст.ДанныеПечатныхФорм.Количество() = 0 Тогда
		
		КомандыПечати = ИнтерфейсДокументовЭДОВызовСервера.ДоступныеКомандыПечатиОбъекта(Контекст.ДокументОснование);
		
		Если КомандыПечати.Количество() = 0 Тогда
			
			ПоказатьПредупреждение(, НСтр("ru = 'Невозможно сформировать документ ЭДО: не найдено печатных форм для отправки.'"));
			Возврат;
			
		ИначеЕсли КомандыПечати.Количество() = 1 Тогда
			
			СформироватьНеформализованныйЭДОПоКомандеПечати(КомандыПечати[0], Контекст.ДокументОснование);
			Возврат;
			
		Иначе
			
			ВыбратьПечатнуюФормуДляОтправкиНеформализованногоЭДО(Контекст, КомандыПечати);
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого ДанныеПечатнойФормы Из Контекст.ДанныеПечатныхФорм Цикл
		
		ПараметрыФормы = Новый Структура;
		
		Если ДанныеПечатнойФормы.ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ПараметрыФормы.Вставить("ТабличныйДокумент", ДанныеПечатнойФормы.ТабличныйДокумент);
		КонецЕсли;
		
		Если ДанныеПечатнойФормы.ДвоичныеДанныеФайла <> Неопределено Тогда
			ПараметрыФормы.Вставить("ДвоичныеДанныеФайла", ДанныеПечатнойФормы.ДвоичныеДанныеФайла);
		КонецЕсли;
		
		ПараметрыФормы.Вставить("НаименованиеФайла", ДанныеПечатнойФормы.НаименованиеФайла);
		ПараметрыФормы.Вставить("Расширение", ДанныеПечатнойФормы.Расширение);
		ПараметрыФормы.Вставить("Уникальность", ДанныеПечатнойФормы.Уникальность);
		ПараметрыФормы.Вставить("Основание", Контекст.ДокументОснование);
		
		ОткрытьФормуЭлектронногоДокумента(ПараметрыФормы);
		
	КонецЦикла;
	
КонецПроцедуры

// Открывает форму исходящего неформализованного документа ЭДО по описанию команды печати
// 
// Параметры:
//  ОписаниеКомандыПечати - Структура - Структура содержащая поля таблицы значений команд печати.
//                                      см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//  ДокументОснование - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//
Процедура СформироватьНеформализованныйЭДОПоКомандеПечати(ОписаниеКомандыПечати, ДокументОснование) Экспорт
	
	РезультатПечати = ИнтерфейсДокументовЭДОВызовСервера.ПечатныеФормыДокументов(ОписаниеКомандыПечати, 
		ДокументОснование, ТипФайлаТабличногоДокумента.PDF);
	
	Если РезультатПечати = Неопределено Или РезультатПечати.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Контекст = ИнтерфейсДокументовЭДОКлиентСервер.НовыйКонтекстОтправкиПечатныхФормПоЭДО();
	Контекст.ДокументОснование = ДокументОснование;
	
	Для Каждого ПечатныйДокумент Из РезультатПечати Цикл
		
		ДанныеПечатнойФормы = ИнтерфейсДокументовЭДОКлиентСервер.НовыеДанныеПечатнойФормыДляНеформализованногоЭДО();
		
		ДанныеПечатнойФормы.ДвоичныеДанныеФайла = ПечатныйДокумент.ДвоичныеДанные;
		ДанныеПечатнойФормы.НаименованиеФайла = СтрЗаменить(ПечатныйДокумент.ИмяФайла, ".pdf", "");
		ДанныеПечатнойФормы.Расширение = "pdf";
		ДанныеПечатнойФормы.Уникальность = ПечатныйДокумент.ИмяФайла;
		
		Контекст.ДанныеПечатныхФорм.Добавить(ДанныеПечатнойФормы);
		
	КонецЦикла;
	
	Если Контекст.ДанныеПечатныхФорм.Количество() = 1 Тогда
		
		СформироватьНеформализованныеЭДОПоКонтекстуОтправки(Контекст);
		
	Иначе
		
		ШаблонВопроса = НСтр("ru='Будет сформировано %1 электронных документа. Продолжить?'");
		ТекстВопроса = СтрШаблон(ШаблонВопроса, РезультатПечати.Количество());
		
		Оповещение = Новый ОписаниеОповещения("ОбработатьОтветНаВопросОФормированииМногихДокументов", 
			ЭтотОбъект, Контекст);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,, НСтр("ru='Формирование документов'"));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаЭлектронныхДокументовОбъектовУчета

// Создает, утверждает, подписывает и отправляет электронный документ. Выполняются только те действия,
// которые действительно требуются для электронного документа (еще не были выполнены и допустимы). Используется как для
// исходящих, так и для входящих документов.
//
// Параметры:
//  ОбъектыУчета       - Массив Из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - ссылка на объект учета, электронные 
//                       документы которого нужно обработать.
//  ОписаниеОповещения - ОписаниеОповещения - обработчик оповещения, который вызывается по окончании операции.
//						 В качестве результата возвращается ИнтерфейсДокументовЭДОКлиентСервер.НовыйИтогВыполненияДействийПоЭДО().
Процедура ВыполнитьКомплекснуюОбработкуАктуальныхЭлектронныхДокументовОбъектовУчета(ОбъектыУчета, ОписаниеОповещения = Неопределено) Экспорт
	
	НаборДействий = Новый Соответствие;	
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Сформировать"));
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Утвердить"));
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.СформироватьОтвет"));
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Подписать"));
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ПодготовитьКОтправке"));
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Отправить"));
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ОбъектыУчета", ОбъектыУчета);
	ПараметрыОповещения.Вставить("ОповещениеУспешногоЗавершения", ОписаниеОповещения);
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ЭтотОбъект, ПараметрыОповещения);
	
	ПараметрыВыполненияДействийПоЭДО = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	ПараметрыВыполненияДействийПоЭДО.НаборДействий = НаборДействий;
	ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ОбъектыУчета = ОбъектыУчета;
	
	НачатьВыполнениеДействийПоЭДО(Оповещение, ПараметрыВыполненияДействийПоЭДО);
	
КонецПроцедуры

// Отклоняет актуальный для переданного учетного объекта электронный документ. Если в процессе выполнения метода 
// возникают ошибки, они обрабатываются библиотекой, вызывающей стороне не возвращаются.
//
// Параметры:
//  ОбъектыУчета       - Массив Из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - ссылка на объект учета. Имеет смысл 
//  					 передавать только входящие документы.
//  ОписаниеОповещения - ОписаниеОповещения - оповещение вызывается по окончании выполнения операции. В качестве результата
//                       возвращается ИнтерфейсДокументовЭДОКлиентСервер.НовыйИтогВыполненияДействийПоЭДО().
//
Процедура ОтклонитьАктуальныеЭлектронныеДокументыОбъектовУчета(ОбъектыУчета, ОписаниеОповещения) Экспорт
	
	ОбъектыДействий = ИнтерфейсДокументовЭДОКлиентСервер.НовыеОбъектыДействийПоЭДО();
	ОбъектыДействий.ОбъектыУчета = ОбъектыУчета;
	ОтклонитьОбъекты(ОбъектыДействий, ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область События

// Имя события обновления состояния ЭДО.
// Параметры события см. НовыеПараметрыСобытияОбновленияСостоянияЭДО
// 
// Возвращаемое значение:
//  Строка
Функция ИмяСобытияОбновленияСостоянияЭДО() Экспорт
	Возврат "ОбновитьСостояниеЭД";
КонецФункции

// Новые параметры события см. ИмяСобытияОбновленияСостоянияЭДО.
// 
// Возвращаемое значение:
//  Структура:
// * Сообщения - Массив из ДокументСсылка.СообщениеЭДО
// * ЭлектронныеДокументы - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
Функция НовыеПараметрыСобытияОбновленияСостоянияЭДО() Экспорт
	Параметры = Новый Структура;
	Параметры.Вставить("Сообщения", Новый Массив);
	Параметры.Вставить("ЭлектронныеДокументы", Новый Массив);
	Возврат Параметры;
КонецФункции

Функция ИмяСобытияОбновленияТекущихДелЭДО() Экспорт
	Возврат "ОбновитьТекущиеДелаЭДО";
КонецФункции

#КонецОбласти

#Область ПросмотрЭлектронногоДокумента

#Область ОбработчикиСобытий

Процедура ПросмотрЭлектронногоДокументаОбработкаНавигационнойСсылки(Форма, Элемент, НавигационнаяСсылка, СтандартнаяОбработка) Экспорт
	
	Если НавигационнаяСсылка = "ПерейтиНаСайтЭДО" Тогда
		СтандартнаяОбработка = Ложь;
		СинхронизацияЭДОКлиент.ОткрытьСайтСервиса1СЭДО();		
	ИначеЕсли НавигационнаяСсылка = "ПерейтиНаСайтБизнесСеть" Тогда
		СтандартнаяОбработка = Ложь;
		СинхронизацияЭДОКлиент.ОткрытьСайтСервисаБизнесСеть();		
	ИначеЕсли НавигационнаяСсылка = "ПоказатьПредупреждения" Тогда
		СтандартнаяОбработка = Ложь;
		Параметры = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыПроблемПриОбработкеДокументов();
		Параметры.Предупреждения = ПолучитьИзВременногоХранилища(Форма.АдресХранилищаПредупреждений);
		
		ПоказатьПроблемыПриОбработкеДокументов(Новый ОписаниеОповещения, Параметры);
	ИначеЕсли НавигационнаяСсылка = "СделатьАктуальнымЭлектронныйДокумент" Тогда
		СтандартнаяОбработка = Ложь;
		ЭлектронныйДокумент = Форма.Объект.Ссылка;
		НаборОбъектовУчета = Форма.Основания.ВыгрузитьЗначения();
		
		ИнтеграцияЭДОКлиент.УстановитьАктуальныйЭлектронныйДокумент(НаборОбъектовУчета, ЭлектронныйДокумент);
		
		Форма.Элементы["ГруппПредупрежденияОНеактуальномЭлектронномДокументе"].Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытий

// Параметры:
//  ВидДокумента - СправочникСсылка.ВидыДокументовЭДО - вид создаваемого документа
//  ОповещениеОЗавершении - ОписаниеОповещения - описание процедуры, которая будет вызвана после ответа на вопрос:
//  * РезультатОтветаНаВопрос - Структура:
//    ** Значение - КодВозвратаДиалога
//    ** БольшеНеЗадаватьЭтотВопрос - Булево
//  * ДополнительныеПараметры - Неопределено
Процедура ПоказатьОкноПредложенияОтправкиВФормализованномВиде(ВидДокумента, ОповещениеОЗавершении) Экспорт

	ШаблонВопроса = НСтр("ru='Для документа ""%1"" предусмотрен утвержденный ФНС формат.
		|Отправить в формализованном виде?'");
	ТекстВопроса = СтрШаблон(ШаблонВопроса, ВидДокумента);
	
	ПараметрыВопроса = Новый Структура;
	ПараметрыВопроса.Вставить("Заголовок",
		НСтр("ru = 'Отправка формализованного документа в произвольном виде'"));
	ПараметрыВопроса.Вставить("Картинка", БиблиотекаКартинок.Информация32);
	ПараметрыВопроса.Вставить("ТекстФлажка",
		НСтр("ru = 'Больше не показывать это сообщение'"));

	СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(
		ОповещениеОЗавершении, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ПараметрыВопроса);
	
КонецПроцедуры

Процедура ЗаписатьНастройкуНеПоказыватьОкноПредложенияОтправкиВФормализованномВиде() Экспорт
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить(
		"НастройкиБольшеНеПоказывать", "ПоказыватьОкноПредложенияОтправкиВФормализованномВиде", Ложь);
КонецПроцедуры

// Параметры:
//  ДанныеДокумента - Структура:
//  * Организация - ОпределяемыйТип.Организация
//  * Контрагент - ОпределяемыйТип.КонтрагентБЭД
//  * ДоговорКонтрагента - ОпределяемыйТип.ДоговорСКонтрагентомЭДО
//  Оповещение - ОписаниеОповещения
Процедура ПоказатьПроблемуЗапрещеноФормированиеДокумента(ДанныеДокумента, Оповещение) Экспорт

	Описание = ИнтеграцияЭДОКлиентСервер.НовоеОписаниеОбъектаУчетаСтруктура();
	
	Описание.Направление = ПредопределенноеЗначение("Перечисление.НаправленияЭДО.Исходящий");
	Описание.Организация = ДанныеДокумента.Организация;
	Описание.Контрагент = ДанныеДокумента.Контрагент;
	Описание.Договор = ДанныеДокумента.ДоговорКонтрагента;
	Описание.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовЭДО.Прочее");

	ОшибкиФормирования = Новый Массив;
	Ошибка = Новый Структура;
	Ошибка.Вставить("ФормированиеЗапрещено", Истина);
	Ошибка.Вставить("ОписаниеОбъектаУчета", Описание);
	ОшибкиФормирования.Добавить(Ошибка);
	
	ПараметрыОткрытия = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыПроблемПриОбработкеДокументов();
	ПараметрыОткрытия.АдресСведенийОбОшибках = ПоместитьВоВременноеХранилище(ОшибкиФормирования);
	
	ПоказатьПроблемыПриОбработкеДокументов(Оповещение, ПараметрыОткрытия);
	
КонецПроцедуры

// Параметры:
//  ОбработчикЗавершения - ОписаниеОповещения - процедура, которая будет вызвана после выбора файла пользователем:
//  * ОписаниеПомещенногоФайла - Неопределено - если выбор отменен пользователем
//                             - ОписаниеПомещенногоФайла
//  * ДополнительныеПараметры - Произвольный - значение, которое было указано при создании объекта ОписаниеОповещения
Процедура ЗагрузитьФормализованныйДокументXMLСДиска(ОбработчикЗавершения) Экспорт
	
	ПараметрыЗагрузки = ФайловаяСистемаКлиент.ПараметрыЗагрузкиФайла();
	ПараметрыЗагрузки.Диалог.Заголовок = НСтр("ru = 'Выберите формализованный документ xml'");
	ПараметрыЗагрузки.Диалог.Фильтр = НСтр("ru = 'Файлы xml (*.xml;*.xml)|*.xml;*.xml|Все файлы (*.*)|*.*'");
	ФайловаяСистемаКлиент.ЗагрузитьФайл(ОбработчикЗавершения, ПараметрыЗагрузки);

КонецПроцедуры

// Параметры:
//  СуществующийДокумент - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  Форма - Неопределено
//        - ФормаКлиентскогоПриложения - форма просмотра исходящего электронного документа:
//  * Объект - ДанныеФормыСтруктура:
//   ** Ссылка - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
Асинх Процедура ОбработатьНаличиеСуществующегоДокументаДляВыбранногоФайлаXML(СуществующийДокумент,
	Форма = Неопределено) Экспорт
	
	ТекстВопроса = НСтр("ru = 'Такой документ уже был загружен ранее.
		|Открыть его?'");
		
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Да, открыть'"));
	Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Нет, отменить загрузку'"));
	
	Ответ = Ждать ВопросАсинх(ТекстВопроса, Кнопки,, КодВозвратаДиалога.Да);
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, СуществующийДокумент);
	
	Если Форма = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.Открыта() Тогда
		Форма.Модифицированность = Ложь;
		Форма.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  СообщениеЭДО - ДокументСсылка.СообщениеЭДО
//  СостояниеЭДО - ПеречислениеСсылка.СостоянияДокументовЭДО
Процедура ОткрытьТранспортныйКонтейнерДокумента(СообщениеЭДО, СостояниеЭДО) Экспорт
	
	Если ЗначениеЗаполнено(СообщениеЭДО)
		И СостояниеЭДО <> ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ТребуетсяПодписание")
		И СостояниеЭДО <> ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправке") Тогда
		СинхронизацияЭДОКлиент.ОткрытьТранспортныйКонтейнерСообщения(СообщениеЭДО);
	Иначе
		Сообщение = НСтр("ru='Нет данных для открытия транспортного контейнера электронного документа.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(Сообщение);
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти // ПросмотрЭлектронногоДокумента

#Область ФормированиеДокументов

// Открывает форму исходящего произвольного электронного документа на основании объекта учета.
// 
// Параметры:
//  Основание - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  ДополнительныеПараметры - Неопределено,Структура
Процедура ОткрытьНовыйПроизвольныйЭлектронныйДокументНаОсновании(Основание, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ИнтерфейсДокументовЭДОВызовСервера.ИспользуютсяЛегкиеКарточкиЭлектронныхДокументов() Тогда
		ОбработчикЗавершения = Новый ОписаниеОповещения(
			"ОткрытьНовыйПроизвольныйЭлектронныйДокументНаОснованииПослеВыбораФайла", ЭтотОбъект, Основание);
		ПараметрыЗагрузки = ФайловаяСистемаКлиент.ПараметрыЗагрузкиФайла();
		ФайловаяСистемаКлиент.ЗагрузитьФайл(ОбработчикЗавершения, ПараметрыЗагрузки);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Основание", Основание);
	ОткрытьФормуЭлектронногоДокумента(ПараметрыФормы);
	
КонецПроцедуры

// Параметры:
//  ОписаниеФайла - Неопределено,ОписаниеПередаваемогоФайла
//  Основание - Неопределено,ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
Процедура ОткрытьНовыйПроизвольныйЭлектронныйДокументНаОснованииПослеВыбораФайла(ОписаниеФайла,
	Основание = Неопределено) Экспорт
	
	Если ОписаниеФайла = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ОписаниеФайла.Имя);
		
	ОткрытьНовыйЭлектронныйДокументПоФайлу(СтруктураИмениФайла.Имя, ОписаниеФайла.Хранение, Основание);
	
КонецПроцедуры

// Параметры:
//  ИмяФайла - Строка
//  АдресДанныхФайла - Строка - двоичные данные файла во временном хранилище
//  ОбъектУчета - Неопределено,ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
Процедура ОткрытьНовыйЭлектронныйДокументПоФайлу(ИмяФайла, АдресДанныхФайла, ОбъектУчета = Неопределено) Экспорт

	ПараметрыПросмотра = НовыеПараметрыПросмотраДокументаПоФайлу();
	ПараметрыПросмотра.АдресВХранилище = АдресДанныхФайла;
	ПараметрыПросмотра.ВыбранныйФайл = ИмяФайла;
	ПараметрыПросмотра.ОбъектУчета = ОбъектУчета;
	
	РасширениеФайла = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ИмяФайла);

	Если Не РаботаСФайламиБЭДКлиентСервер.ЭтоXML(РасширениеФайла) Тогда
		ОткрытьФормуЭлектронногоДокумента(ПараметрыПросмотра);
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = Новый Структура("Хранение, Имя", АдресДанныхФайла, ИмяФайла);
	РезультатПодготовкиДанных = 
		ИнтерфейсДокументовЭДОВызовСервера.ПодготовитьДанныеПредварительногоПросмотраПоФайлуXML(ДанныеФайла);
		
	ОбработатьРезультатПодготовкиДанныхДляПросмотраПоФайлуXML(РезультатПодготовкиДанных, ПараметрыПросмотра,
		ОбъектУчета);
	
КонецПроцедуры

Процедура ПоказатьПроблемыПриОбработкеДокументов(Оповещение, Параметры, ПараметрыВыполненияДействийПоЭДО = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура("СписокДокументовКОтправке, 
	|АдресСведенийОбОшибках,
	|РежимПодписатьОтправить,
	|ИсправляемыйДокумент,
	|Предупреждения,
	|ПараметрыВыполненияДействийПоЭДО");
	
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, Параметры);
	ПараметрыФормы.ПараметрыВыполненияДействийПоЭДО = ПараметрыВыполненияДействийПоЭДО;
	
	Если Параметры.Свойство("ОткрытьФормуРучногоФормированияОтветногоТитула")
		И Параметры.ОткрытьФормуРучногоФормированияОтветногоТитула Тогда
			ОткрытьФорму("Обработка.ИнтерфейсДокументовЭДО.Форма.РучноеФормированиеОтветногоТитула", ПараметрыФормы, Параметры.ФормаВладелец,,,,,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	Иначе
		ОткрытьФорму("Обработка.ИнтерфейсДокументовЭДО.Форма.ПомощникФормированияДокументов", ПараметрыФормы, Параметры.ФормаВладелец,,,,
			Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

// Конвертирует переданные двоичные данные в произвольный электронный документ.
//
// Параметры:
//  ОповещениеОЗавершении - ОписаниеОповещения - описание процедуры, которая будет вызвана после создания документа:
//  * ЭлектронныйДокумент - Неопределено - если создание отменено пользователем.
//                        - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - ссылка на созданный документ.
//                          Если документ не создан, то возвращается пустая ссылка.
//  * ДополнительныеПараметры - Произвольный - значение, которое было указано при создании объекта ОписаниеОповещения.
//  ПараметрыФормирования - См. ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыСозданияДокументаПоФайлу
//  ПараметрыФайла        - Структура - описывает файл, который нужно отправить:
//  * ИмяФайла - Строка - имя файла вместе с расширением.
//  * АдресХранилища - Строка - адрес временного хранилища, в котором содержатся двоичные данные файла.
//
Процедура НачатьСозданиеЭлектронногоДокументаПоФайлу(ОповещениеОЗавершении, ПараметрыФормирования, ПараметрыФайла) Экспорт
	
	Результат = ИнтерфейсДокументовЭДОВызовСервера.СоздатьЭлектронныйДокументПоФайлу(ПараметрыФормирования, ПараметрыФайла);
	Если Результат.Успех Тогда
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Результат.ЭлектронныйДокумент);
		Возврат;
	КонецЕсли;
	
	ОбъектУчета = ?(ЗначениеЗаполнено(ПараметрыФормирования.ОбъектыУчета), ПараметрыФормирования.ОбъектыУчета[0],
		ПредопределенноеЗначение("Документ.ЭлектронныйДокументИсходящийЭДО.ПустаяСсылка"));
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	Контекст.Вставить("ПараметрыФормирования", ПараметрыФормирования);
	Контекст.Вставить("ПараметрыФайла", ПараметрыФайла);
	Контекст.Вставить("ОбъектУчета", ОбъектУчета);
	
	Оповещение = Новый ОписаниеОповещения("НачатьСозданиеПроизвольногоДокументаПослеОбработкиОшибок",
		ИнтерфейсДокументовЭДОКлиент, Контекст);
	ДополнительныеПараметры = Новый Структура("ОбъектыУчета", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбъектУчета));
	НачатьОбработкуОшибокФормированияДокумента(Оповещение, Результат.Ошибки, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура НачатьСозданиеПроизвольногоДокументаПослеОбработкиОшибок(Результат, Контекст) Экспорт
	
	Если Результат = Неопределено Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеОЗавершении);
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат.ПараметрыВыполненияДействийПоЭДО)
		И ЗначениеЗаполнено(Результат.ПараметрыВыполненияДействийПоЭДО.ПодписантыОбъектов) Тогда
		Подписанты = Результат.ПараметрыВыполненияДействийПоЭДО.ПодписантыОбъектов[Контекст.ОбъектУчета];
		Контекст.ПараметрыФормирования.Вставить("Подписанты", Подписанты);
	КонецЕсли;
	
	НачатьСозданиеЭлектронногоДокументаПоФайлу(Контекст.ОповещениеОЗавершении, Контекст.ПараметрыФормирования,
		Контекст.ПараметрыФайла);
	
КонецПроцедуры

#КонецОбласти

#Область Переформирование

// Переформировать документ.
// 
// Параметры:
//  ОповещениеОЗавершении - ОписаниеОповещения - описание процедуры, которая будет вызвана после переформирования 
//                          со следующими параметрами:
//                           * Результат - См. ПослеПереформирования
//                           * ДополнительныеПараметры - Произвольный - значение, которое было указано при создании
//                             объекта ОписаниеОповещения
//  Параметры - См. ИнтерфейсДокументовЭДО.ПараметрыПереформированияДокумента
Процедура ПереформироватьДокумент(ОповещениеОЗавершении, Параметры) Экспорт
	
	Если Параметры.Отказ Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Параметры.ПричинаОтказа);
		Возврат;
	КонецЕсли;
	
	Если НЕ ИнтеграцияЭДОВызовСервера.ОписаниеОбъектаУчета(Параметры.ОбъектУчета).Количество() Тогда
		ШаблонОшибки = НСтр("ru='Для объекта учета ""%1"" недоступно переформирование'", "ru");
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(ШаблонОшибки, Параметры.ОбъектУчета));
		Возврат;
	КонецЕсли;
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	Контекст.Вставить("Параметры", Параметры);
	Контекст.Вставить("ПараметрыДействийПоЭДО", Параметры.ПараметрыДействийПоЭДО);
	
	КонтекстДиагностики = ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики();
	ПараметрыПереформирования = Новый Структура;
	ПараметрыПереформирования.Вставить("КонтекстДиагностики", КонтекстДиагностики);	
	ПараметрыПереформирования.Вставить("Контекст", Контекст);
		
	НачатьПереформированиеДокумента(ПараметрыПереформирования);	
	
КонецПроцедуры

// Оформить группу состояния и статусы МЧД.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  Подписана - Булево
//  Верна - Булево 
//  Отозвана - Булево
//  ДатаОтзыва - Дата - дата отзыва доверенности из реестра ФНС 
//  СтатусВРеестреФНС - ПеречислениеСсылка.СтатусыМашиночитаемойДоверенностиВРеестреФНС
//  СведенияОРегистрации - Структура:
//  * ДанныеПоМЧДВОчереди - См. МашиночитаемыеДоверенности.НайтиДанныеМЧДВОчередиНаРегистрацию
//  * ОписаниеОшибкиРегистрации - Строка
//  * ДатаОбновленияСтатуса - Дата
//
Процедура ОформитьГруппуСостоянияИСтатусыМЧД(Форма, Подписана, Верна, Отозвана, ДатаОтзыва, СтатусВРеестреФНС, СведенияОРегистрации = Неопределено) Экспорт
	
	Элементы = Форма.Элементы;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		Если Не ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
			Элементы.ГруппаСостоянияИСтатусы.Видимость = Ложь;
			Возврат;
		Иначе
			Элементы.ГруппаСостоянияИСтатусы.Видимость = Истина;		
		КонецЕсли;
	КонецЕсли;
	
	СтатусОтозвана = Отозвана 
		Или СтатусВРеестреФНС = ПредопределенноеЗначение(
				"Перечисление.СтатусыМашиночитаемойДоверенностиВРеестреФНС.Отозвано");
	
	Элементы.ГруппаНеверна.Видимость = Ложь;
	ЦветаФона = МашиночитаемыеДоверенностиВызовСервера.ЦветаФона();
	
	Элементы.ГруппаПометкаОтозвана.Видимость = СтатусОтозвана;
	Если СтатусОтозвана И (ДатаОтзыва > ОбщегоНазначенияКлиент.ДатаСеанса()) Тогда
		ТекстЗаголовка = МашиночитаемыеДоверенностиКлиентСервер.ЗаголовокБудетОтозвана();
		Элементы.ДекорацияПометкаОтозвана.Заголовок = ТекстЗаголовка + " " + Формат(ДатаОтзыва, "ДЛФ=Д");
		Элементы.ДекорацияПометкаОтозванаКартинка.Картинка = БиблиотекаКартинок.ОформлениеВосклицательныйЗнак;
	ИначеЕсли СтатусОтозвана И (ДатаОтзыва <= ОбщегоНазначенияКлиент.ДатаСеанса()) Тогда
		Элементы.ДекорацияПометкаОтозвана.Заголовок = НСтр("ru = 'Отозвана'");
		Элементы.ГруппаСостоянияИСтатусы.ЦветФона = ЦветаФона.ВниманиеМЧД;
		Элементы.ДекорацияПометкаОтозванаКартинка.Картинка = БиблиотекаКартинок.ОформлениеЗнакКрест;
	КонецЕсли;
	
	Если Не Подписана Тогда
		Элементы.ДекорацияПодписана.Заголовок = НСтр("ru = 'Требуется подписать'");
		Элементы.ГруппаСостоянияИСтатусы.ЦветФона = ЦветаФона.НедействительнаяМЧД;
	Иначе
		Элементы.ДекорацияПодписана.Заголовок = НСтр("ru = 'Подписана'");
		Элементы.ГруппаСостоянияИСтатусы.ЦветФона = ЦветаФона.ДействительнаяМЧД;		
	КонецЕсли;
	
	Если (Не Верна) И Подписана Тогда
		Элементы.ГруппаСостоянияИСтатусы.ЦветФона = ЦветаФона.НедействительнаяМЧД;
		Элементы.ГруппаНеверна.Видимость = Истина;
		Элементы.ДекорацияНеверна.Заголовок = НСтр("ru = 'Неверна'");
		Элементы.ДекорацияВернаКартинка.Картинка = БиблиотекаКартинок.ОформлениеЗнакКрест;
	КонецЕсли;
	
	Если Верна Тогда
		Элементы.ДекорацияНеверна.Заголовок = НСтр("ru = 'Верна'");
		Элементы.ГруппаНеверна.Видимость = Истина;
		Элементы.ДекорацияВернаКартинка.Картинка = БиблиотекаКартинок.ОформлениеЗнакФлажок;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтатусВРеестреФНС) Тогда
		
		ШаблонЗаголовка = НСтр("ru = 'В реестре ФНС: %1, %2'");
		Элементы.ГруппаСтатусВРеестреФНС.Видимость = Подписана;
		
		ТекстОтозвана = НСтр("ru = 'не отозвана'");
		ТекстЗаголовка = СтрШаблон(ШаблонЗаголовка, СтатусВРеестреФНС, ТекстОтозвана);
		
		Если СтатусОтозвана Тогда
			ШаблонЗаголовка = НСтр("ru = 'В реестре ФНС: %1'");
			ТекстЗаголовка = СтрШаблон(ШаблонЗаголовка, СтатусВРеестреФНС);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СведенияОРегистрации) Тогда
			
			ПоказыватьДатуОбновленияСтатуса = Истина;
			
			Элементы.ДекорацияОписаниеОшибкиРегистрации.Видимость = Ложь;
			
			ДанныеПоМЧДВОчереди = СведенияОРегистрации.ДанныеПоМЧДВОчереди;
			ЕстьВОчереди = ЗначениеЗаполнено(ДанныеПоМЧДВОчереди) И ДанныеПоМЧДВОчереди.ЕстьВОчереди;
			
			Если ЕстьВОчереди И ДанныеПоМЧДВОчереди.ВидЗапроса = 
					МашиночитаемыеДоверенностиКлиентСервер.ВидыЗапросовКРеестру().Отзыв Тогда
						
				ДатаСоздания = 
					ОбщегоНазначенияБЭДКлиентСервер.ДатаВремяБезСекунд(ДанныеПоМЧДВОчереди.ДатаСоздания);
				ШаблонЗаголовка = НСтр("ru = 'В реестре ФНС: %1 %2'");
				ТекстВОчереди = НСтр("ru = 'В очереди на отзыв с'");
				ТекстЗаголовка = СтрШаблон(ШаблонЗаголовка, ТекстВОчереди, ДатаСоздания);
				ПоказыватьДатуОбновленияСтатуса = Ложь;
				
			ИначеЕсли ЕстьВОчереди И ДанныеПоМЧДВОчереди.ВидЗапроса = 
					МашиночитаемыеДоверенностиКлиентСервер.ВидыЗапросовКРеестру().Регистрация Тогда
					
				ДатаСоздания = 
					ОбщегоНазначенияБЭДКлиентСервер.ДатаВремяБезСекунд(ДанныеПоМЧДВОчереди.ДатаСоздания);
				ШаблонЗаголовка = НСтр("ru = 'В реестре ФНС: %1 %2'");
				ТекстВОчереди = НСтр("ru = 'В очереди на регистрацию с'");
				ТекстЗаголовка = СтрШаблон(ШаблонЗаголовка, ТекстВОчереди, ДатаСоздания);
				ПоказыватьДатуОбновленияСтатуса = Ложь;
				
			ИначеЕсли СтатусВРеестреФНС = ПредопределенноеЗначение(
				"Перечисление.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ОшибкаРегистрации")
				ИЛИ СтатусВРеестреФНС = ПредопределенноеЗначение(
				"Перечисление.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ОшибкаОтзыва") Тогда
					
				ЕстьОписаниеОшибки = ЗначениеЗаполнено(СведенияОРегистрации.ОписаниеОшибкиРегистрации);
				Элементы.ДекорацияОписаниеОшибкиРегистрации.Видимость = ЕстьОписаниеОшибки;
				Элементы.ДекорацияОписаниеОшибкиРегистрации.Заголовок = СведенияОРегистрации.ОписаниеОшибкиРегистрации;	
				Если ЕстьОписаниеОшибки Тогда
					ШаблонЗаголовка = НСтр("ru = 'В реестре ФНС: %1'");
					ТекстЗаголовка = СтрШаблон(ШаблонЗаголовка, СтатусВРеестреФНС);
					ПоказыватьДатуОбновленияСтатуса = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПоказыватьДатуОбновленияСтатуса И ЗначениеЗаполнено(СведенияОРегистрации.ДатаОбновленияСтатуса) Тогда
				ТекстЗаголовкаПоСостоянию = НСтр("ru = '%1%2(по состоянию на %3)'");
				ДатаОбновленияСтатуса = 
					ОбщегоНазначенияБЭДКлиентСервер.ДатаВремяБезСекунд(СведенияОРегистрации.ДатаОбновленияСтатуса);
				ТекстЗаголовка = 
					СтрШаблон(ТекстЗаголовкаПоСостоянию, 
						ТекстЗаголовка, Символы.ПС, ДатаОбновленияСтатуса);
			КонецЕсли;
			
		КонецЕсли;
		
		Элементы.ДекорацияСтатусВРеестреФНС.Заголовок = ТекстЗаголовка;
		
	Иначе
		
		ТекстЗаголовка = НСтр("ru = 'В реестре ФНС: %1'");
		Элементы.ГруппаСтатусВРеестреФНС.Видимость = Подписана;
		Элементы.ДекорацияСтатусВРеестреФНС.Заголовок = СтрШаблон(ТекстЗаголовка, НСтр("ru = 'Не зарегистрирована'"));
		
		Если ЗначениеЗаполнено(СведенияОРегистрации) Тогда
			
			Элементы.ДекорацияОписаниеОшибкиРегистрации.Видимость = Ложь;
			
			ДанныеПоМЧДВОчереди = СведенияОРегистрации.ДанныеПоМЧДВОчереди;
			ЕстьВОчереди = ЗначениеЗаполнено(ДанныеПоМЧДВОчереди) И ДанныеПоМЧДВОчереди.ЕстьВОчереди;
			
			Если ЕстьВОчереди И ДанныеПоМЧДВОчереди.ВидЗапроса = 
					МашиночитаемыеДоверенностиКлиентСервер.ВидыЗапросовКРеестру().Регистрация Тогда
				
				ТекстЗаголовка = НСтр("ru = 'В реестре ФНС: %1 %2'");
				ТекстВОчереди = НСтр("ru = 'В очереди на регистрацию с'");
				ДатаСоздания = 
					ОбщегоНазначенияБЭДКлиентСервер.ДатаВремяБезСекунд(ДанныеПоМЧДВОчереди.ДатаСоздания);
				Элементы.ДекорацияСтатусВРеестреФНС.Заголовок = 
					СтрШаблон(ТекстЗаголовка, ТекстВОчереди, ДатаСоздания);
					
			Иначе
				
				ЕстьОписаниеОшибки = ЗначениеЗаполнено(СведенияОРегистрации.ОписаниеОшибкиРегистрации);
				Элементы.ДекорацияОписаниеОшибкиРегистрации.Видимость = ЕстьОписаниеОшибки;
				Элементы.ДекорацияОписаниеОшибкиРегистрации.Заголовок = СведенияОРегистрации.ОписаниеОшибкиРегистрации;
				Если ЕстьОписаниеОшибки Тогда
					Элементы.ДекорацияСтатусВРеестреФНС.Заголовок = СтрШаблон(ТекстЗаголовка, НСтр("ru = 'Ошибка регистрации'"));
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДействияПоИнтеграциямЭДО

// Запускает процесс выполнения действий по ЭДО.
// 
// Параметры:
//  ОповещениеОЗавершении - ОписаниеОповещения
//  ПараметрыВыполнения   - См. ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  КонтекстДиагностики - Неопределено
//                      - см. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//
Процедура НачатьВыполнениеДействийПоЭДО(ОповещениеОЗавершении, ПараметрыВыполнения, КонтекстДиагностики = Неопределено) Экспорт
	
	Если КонтекстДиагностики = Неопределено Тогда
		КонтекстДиагностики = ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики();
	КонецЕсли;
	
	КонтекстДействийПоЭДО = НовыйКонтекстДействийПоЭДО();
	
	ОбработчикПрерывания = Новый ОписаниеОповещения("ЗавершитьВыполнениеДействийПоЭДОПослеПрерывания",
		ИнтерфейсДокументовЭДОКлиент, КонтекстДействийПоЭДО);
	
	ПараметрыОжидания = ОжиданиеОперацийБЭДКлиент.НовыеПараметры();
	КонтекстОжиданияОперации = ОжиданиеОперацийБЭДКлиент.НовыйКонтекст(ПараметрыОжидания);
	ОжиданиеОперацийБЭДКлиент.УстановитьОбработчикПрерывания(ОбработчикПрерывания, КонтекстОжиданияОперации);
	ОжиданиеОперацийБЭДКлиент.ОтметитьНачалоВыполнения(КонтекстОжиданияОперации);
	ОжиданиеОперацийБЭДКлиент.ОткрытьФормуОжидания(Неопределено, КонтекстОжиданияОперации);
	
	КонтекстДействийПоЭДО.ОповещениеОЗавершении = ОповещениеОЗавершении;
	КонтекстДействийПоЭДО.КонтекстДиагностики = КонтекстДиагностики;
	КонтекстДействийПоЭДО.КонтекстОжиданияОперации = КонтекстОжиданияОперации;
	КонтекстДействийПоЭДО.ПараметрыВыполненияДействий = ПараметрыВыполнения;
	
	НаборДействий = ПараметрыВыполнения.НаборДействий;
	
	Если ЭлектроннаяПодписьКлиент.ИспользоватьЭлектронныеПодписи()
		И ИнтерфейсДокументовЭДОКлиентСервер.ТребуютсяОтпечаткиСертификатовДляНабораДействий(НаборДействий) Тогда
		Оповещение = Новый ОписаниеОповещения("ВыполнитьДействияПоЭДОПослеПолученияОтпечатков",
			ИнтерфейсДокументовЭДОКлиент, КонтекстДействийПоЭДО);
		КриптографияБЭДКлиент.ПолучитьОтпечаткиСертификатов(Оповещение);
	Иначе
		ВыполнитьДействияПоЭДО(КонтекстДействийПоЭДО);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаРезультатовДействийПоИнтеграциямЭДО

// Возвращаемое значение:
//  Структура:
//  * ИтогВыполненияДействий - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыйИтогВыполненияДействийПоЭДО
//  * СостояниеВыполненияДействий - Неопределено,Произвольный
//  * ПродолжитьВыполнениеДействий - Булево
//  * ПараметрыПродолженияДействий - Неопределено,Произвольный
//  * ДокументыДляОбработкиИзвещений - Соответствие из КлючИЗначение:
//  ** Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  ** Значение - Булево
//  * ДокументыДляОбработкиДополнительныхСведений - Соответствие из КлючИЗначение:
//  ** Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  ** Значение - Булево
//  * КонтекстДиагностики - см. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//  * ОшибкиФормирования  - Массив из См. НовоеОписаниеОшибкиФормирования
Функция НовыйРезультатОбработкиДействийИнтеграцииЭДО() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("ИтогВыполненияДействий", ИнтерфейсДокументовЭДОКлиентСервер.НовыйИтогВыполненияДействийПоЭДО());
	Результат.Вставить("СостояниеВыполненияДействий", Неопределено);
	Результат.Вставить("ПродолжитьВыполнениеДействий", Ложь);
	Результат.Вставить("ПараметрыПродолженияДействий", Неопределено);
	Результат.Вставить("ДокументыДляОбработкиИзвещений", Новый Соответствие);
	Результат.Вставить("ДокументыДляОбработкиДополнительныхСведений", Новый Соответствие);
	Результат.Вставить("КонтекстДиагностики", ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики());
	Результат.Вставить("ОшибкиФормирования", Новый Массив);
	Возврат Результат;
КонецФункции

// Параметры:
//  ИсходныйНаборДействий - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыйНаборДействийПоЭДО
//  ВыполненныеДействия - Массив из ПеречислениеСсылка.ДействияПоЭДО
// 
// Возвращаемое значение:
//  см. ИнтерфейсДокументовЭДОКлиентСервер.НовыйНаборДействийПоЭДО
Функция НаборДействийПослеПодписанияРасшифровки(ИсходныйНаборДействий, ВыполненныеДействия) Экспорт
	
	НаборДействий = ИнтерфейсДокументовЭДОКлиентСервер.НовыйНаборДействийПоЭДО();
	
	Для Каждого ЭлементНабора Из ИсходныйНаборДействий Цикл
		Если ВыполненныеДействия.Найти(ЭлементНабора.Ключ) = Неопределено Тогда
			ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ЭлементНабора.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат НаборДействий;
	
КонецФункции

#КонецОбласти

#Область ОбработкаСобытийВыполненияДействийПоЭДО

// Параметры:
//  Результат - Структура:
//  * Итог - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыйИтогВыполненияДействийПоЭДО
//  * ОшибкиФормирования - Массив из Структура
//  * КонтекстДиагностики - см. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//  ПараметрыОповещения - Неопределено,Структура
Процедура ПослеВыполненияДействийПоЭДО(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСобытия = НовыеПараметрыСобытияОбновленияСостоянияЭДО();
	ЭлектронныеДокументы = ПараметрыСобытия.ЭлектронныеДокументы;
	Для Каждого ОбработанныйДокумент Из Результат.Итог.ОбработанныеДокументы Цикл
		ЭлектронныеДокументы.Добавить(ОбработанныйДокумент.Ключ);
	КонецЦикла;
	
	Оповестить(ИмяСобытияОбновленияСостоянияЭДО(), ПараметрыСобытия);
	
	Если Результат.Свойство("ОшибкиФормирования") И Результат.ОшибкиФормирования.Количество() Тогда
		
		Оповещение = Новый ОписаниеОповещения("ВыполнитьДействияПоЭДОПослеОбработкиОшибокФормирования",
			ИнтерфейсДокументовЭДОКлиент, ПараметрыОповещения);
		НачатьОбработкуОшибокФормированияДокумента(Оповещение, Результат.ОшибкиФормирования, ПараметрыОповещения);
		
		Возврат;
		
	ИначеЕсли Результат.Свойство("КонтекстДиагностики")
		И ОбработкаНеисправностейБЭДКлиентСервер.ЕстьОшибки(Результат.КонтекстДиагностики) Тогда
		
		Ошибки = Результат.КонтекстДиагностики.Диагностика.Ошибки;
		Если Ошибки.Количество() = 1 
			И ОбработкаНеисправностейБЭДКлиентСервер.ЭтоОшибкаДанногоВида(Ошибки[0],
				МашиночитаемыеДоверенностиКлиентСервер.ВидОшибкиЕстьПодписиСМЧДДоверенностьНеНайдена()) Тогда
					МашиночитаемыеДоверенностиКлиент.ОткрытьДиалогРучногоПодтвержденияПроверкиПодписиПоМЧД(
						Результат.КонтекстДиагностики, ПараметрыОповещения);
					Возврат;
		КонецЕсли;
		
		ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки(Результат.КонтекстДиагностики);
			
	КонецЕсли;
	
	Если ПараметрыОповещения <> Неопределено 
		И ПараметрыОповещения.Свойство("ОповещениеУспешногоЗавершения") Тогда			
			
		ВыполнитьОбработкуОповещения(ПараметрыОповещения.ОповещениеУспешногоЗавершения, Результат.Итог);
		
	КонецЕсли;	
		
	Оповестить(ИмяСобытияОбновленияТекущихДелЭДО());

КонецПроцедуры

#КонецОбласти

#Область ОтправитьИПолучить

// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  ОповещениеОЗавершении - Неопределено, ОписаниеОповещения
//  УчетныеЗаписиОбмена - Неопределено, Массив из Строка - идентификаторы оператора электронного документооборота
Процедура ОтправитьПолучитьДокументыЭДО(Форма, ОповещениеОЗавершении = Неопределено, УчетныеЗаписиОбмена = Неопределено) Экспорт
	
	ПараметрыОтправкиПолучения = ИнтерфейсДокументовЭДОВызовСервера.ПараметрыОтправкиПолученияДокументовЭДО(УчетныеЗаписиОбмена);
	
	Если ОповещениеОЗавершении = Неопределено Тогда
		ОповещениеОЗавершении = Новый ОписаниеОповещения;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОтправкиПолучения.УчетныеЗаписиЭДОБезПринятыхУсловийСервиса) Тогда
		
		КонтекстПринятияУсловий = Новый Структура;
		КонтекстПринятияУсловий.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
		КонтекстПринятияУсловий.Вставить("ПараметрыОтправкиПолучения", ПараметрыОтправкиПолучения);
		КонтекстПринятияУсловий.Вставить("УчетныеЗаписиОбмена", УчетныеЗаписиОбмена);
		
		Оповещение = Новый ОписаниеОповещения("ОтправитьПолучитьДокументыЭДОПослеПринятияУсловийСервиса",
			ИнтерфейсДокументовЭДОКлиент, КонтекстПринятияУсловий);
		
		ПараметрыФормы = Новый Структура("УчетныеЗаписиЭДО",
			ПараметрыОтправкиПолучения.УчетныеЗаписиЭДОБезПринятыхУсловийСервиса);
		
		ПоказатьУсловияИспользованияСервиса1СЭДО(ПараметрыФормы, Оповещение);
		
	КонецЕсли;
	ПодготовитьОтборУчетныхЗаписейДляОтправкиПолученияДокументовЭДО(ОповещениеОЗавершении,
				ПараметрыОтправкиПолучения, УчетныеЗаписиОбмена);
КонецПроцедуры

#КонецОбласти

#Область ФорматДоговорныйДокумент101_ВыполнениеКлиентскихМетодов

// Для вызова клиентских процедур формата договорного документа PDF/A3
// 
// Возвращаемое значение:
//  см. Обработка.ФорматДоговорныйДокумент101.Форма.ВыполнениеКлиентскихМетодов
//
Функция ФормаДоговорныйДокумент101Клиент() Экспорт
	
	ИмяПараметра = "ЭлектронноеВзаимодействие.ФормаФорматДоговорныйДокумент101";
	Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
		ПараметрыПриложения.Вставить(ИмяПараметра, Новый Соответствие);
	КонецЕсли;
	
	Форма = ПараметрыПриложения[ИмяПараметра].Получить("ФормаВыполнениеКлиентскихМетодов");
	
	Если Форма = Неопределено Тогда
		//@skip-check use-non-recommended-method
		Форма = ПолучитьФорму("Обработка.ФорматДоговорныйДокумент101.Форма.ВыполнениеКлиентскихМетодов"); // АПК:65 не проверять метод ПолучитьФорму
		ПараметрыПриложения[ИмяПараметра].Вставить("ФормаВыполнениеКлиентскихМетодов", Форма);
	КонецЕсли;
	
	Возврат Форма;
	
КонецФункции

#КонецОбласти

// Параметры:
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
Процедура ПоказатьПредставлениеОшибокКонтекстаДиагностики(КонтекстДиагностики) Экспорт
	
	Ошибки = ОбработкаНеисправностейБЭДКлиентСервер.ПолучитьОшибки(КонтекстДиагностики);
	
	МассивПредставленийОшибок = Новый Массив;
	
	Для Каждого Ошибка Из Ошибки Цикл
		МассивПредставленийОшибок.Добавить(Ошибка.ПодробноеПредставлениеОшибки);	
	КонецЦикла;		
	
	ТекстОшибки = СтрСоединить(МассивПредставленийОшибок, Символы.ПС);
	
	ПоказатьПредупреждение( ,ТекстОшибки, 0, НСтр("ru = 'Ошибка'"));
	
КонецПроцедуры

// Открывает форму просмотра электронного документа.
// 
// Параметры:
// 	ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО, ДокументСсылка.ЭлектронныйДокументВходящийЭДО - ссылка на ЭлектронныйДокумент.
Процедура ОткрытьЭлектронныйДокумент(ЭлектронныйДокумент, ТолькоПросмотр = Ложь) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ЭлектронныйДокумент);
	ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);

	ОткрытьФормуЭлектронногоДокумента(ПараметрыФормы);
	
КонецПроцедуры

Процедура ОткрытьДокументыНаПодпись(Параметры) Экспорт
	
	ОткрытьФорму("Обработка.ИнтерфейсДокументовЭДО.Форма.ДокументыНаПодпись", , Параметры.Источник,
		Параметры.Уникальность, Параметры.Окно);
	
КонецПроцедуры

// Открывает форму просмотра электронного документа.
// 
// Параметры:
// 	Сообщение - ДокументСсылка.СообщениеЭДО
Процедура ОткрытьЭлектронныйДокументСообщенияЭДО(Сообщение) Экспорт
	
	Если ТипЗнч(Сообщение) <> Тип("ДокументСсылка.СообщениеЭДО") Тогда
		Возврат;
	КонецЕсли;
	
	ЭлектронныйДокумент = ИнтерфейсДокументовЭДОВызовСервера.ЭлектронныйДокументСообщенияЭДО(Сообщение);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ЭлектронныйДокумент);
	ПараметрыФормы.Вставить("Сообщение", Сообщение);
	ПараметрыФормы.Вставить("ТолькоПросмотр", Ложь);
	
	ОткрытьФормуЭлектронногоДокумента(ПараметрыФормы);
	
КонецПроцедуры

// Открывает форму просмотра дерева электронных документов по указанному объекту.
// 
// Параметры:
// 	ОбъектУчетаСсылка - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - параметры объекта учета.
Процедура ОткрытьДеревоЭлектронныхДокументов(ОбъектУчета, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ОбъектУчета) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ИнтерфейсДокументовЭДОВызовСервера.ЕстьПравоЧтенияДокументов() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ОбъектУчета", ОбъектУчета);
	Если ДополнительныеПараметры = Неопределено Тогда
		ОткрытьФорму("Обработка.ИнтерфейсДокументовЭДО.Форма.ДеревоЭлектронныхДокументов", ПараметрыФормы, , ОбъектУчета.УникальныйИдентификатор());
	Иначе
		Окно = Неопределено;
		Если ТипЗнч(ДополнительныеПараметры) = Тип("ПараметрыВыполненияКоманды")
			ИЛИ ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
			И ДополнительныеПараметры.Свойство("Окно") И ТипЗнч(ДополнительныеПараметры.Окно) = Тип("ОкноКлиентскогоПриложения") Тогда
			
			Окно = ДополнительныеПараметры.Окно;
		КонецЕсли;		

		ОткрытьФорму("Обработка.ИнтерфейсДокументовЭДО.Форма.ДеревоЭлектронныхДокументов", ПараметрыФормы,
			ОбъектУчета, ОбъектУчета.УникальныйИдентификатор(), Окно);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает новые параметры открытия электронного документа.
// 
// Возвращаемое значение:
//  Структура:
//  * ВидДокумента - Неопределено
//                 - СправочникСсылка.ВидыДокументовЭДО - уточнение вида документа, когда по объекту учета доступно несколько вариантов.
//  * ДанныеКаталога - Строка - адрес временного хранилища данных каталога.
//  * НовыйДокумент - Булево - при Истина поиск текущего электронного документа не производится.
//  * ЗначенияДополнительныхПолей - Произвольный
Функция НовыеПараметрыОткрытияЭлектронногоДокумента() Экспорт
	
	Возврат ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыОткрытияЭлектронногоДокумента();
	
КонецФункции

// Открывает форму просмотра электронного документа по указанному объекту учета.
// 
// Параметры:
//  ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - параметры объекта учета.
//  ПараметрыОткрытия - см. НовыеПараметрыОткрытияЭлектронногоДокумента
Процедура ОткрытьЭлектронныйДокументОбъектаУчета(ОбъектУчета, ПараметрыОткрытия = Неопределено) Экспорт
	
	Если ПараметрыОткрытия = Неопределено Тогда
		ПараметрыОткрытия = НовыеПараметрыОткрытияЭлектронногоДокумента();
	КонецЕсли;
	
	ПараметрыПросмотра = ИнтерфейсДокументовЭДОВызовСервера.ПараметрыПросмотраЭлектронногоДокументаПоОбъектуУчета(
		ОбъектУчета, ПараметрыОткрытия);
		
	Если ПараметрыПросмотра.ОбъектУчетаЯвляетсяГруппой Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Данная функция недоступна для группы.'"));
		Возврат;
	КонецЕсли;
	
	ОткрытьЭлектронныйДокументПоПараметрамПросмотра(ПараметрыПросмотра);
	
КонецПроцедуры

Процедура ОткрытьЭлектронныйДокументПоОписанию(ОписаниеЭлектронногоДокументаОбъектаУчета) Экспорт
	
	ПараметрыПросмотра = ИнтерфейсДокументовЭДОВызовСервера.ПараметрыПросмотраЭлектронногоДокументаПоОписанию(
		ОписаниеЭлектронногоДокументаОбъектаУчета);
	
	ОткрытьЭлектронныйДокументПоПараметрамПросмотра(ПараметрыПросмотра);
	
КонецПроцедуры

Процедура ОткрытьПодборОбъектовУчетаЭлектронногоДокумента(ПараметрыФормы, Оповещение = Неопределено) Экспорт
	
	ИмяФормы = "Документ.ЭлектронныйДокументИсходящийЭДО.Форма.ПодборДокументовУчета";
	Если ТипЗнч(ПараметрыФормы.ЭлектронныйДокумент) = Тип("ДокументСсылка.ЭлектронныйДокументВходящийЭДО") Тогда
		ИмяФормы = "Документ.ЭлектронныйДокументВходящийЭДО.Форма.ПодборДокументовУчета";	
	КонецЕсли;	
		
	ОткрытьФорму(ИмяФормы, ПараметрыФормы,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ПеренаправитьЭлектронныеДокументы(ЭлектронныеДокументы, ОписаниеОповещения = Неопределено) Экспорт

	Если Не ИнтерфейсДокументовЭДОВызовСервера.ЕстьПравоОбработкиДокументов() Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Недостаточно прав для выполнения операции, обратитесь к администратору.'"));
		Возврат; 
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЭлектронныеДокументы", ЭлектронныеДокументы);
	
	ОткрытьФорму("Обработка.ИнтерфейсДокументовЭДО.Форма.ПеренаправлениеЭлектронныхДокументов", ПараметрыФормы, , , , , ОписаниеОповещения);
	
КонецПроцедуры

Процедура ОткрытьКарточкуЭлектронногоДокумента(ЭлектронныйДокумент) Экспорт
	
	ПараметрыФормы = Новый Структура("Ключ", ЭлектронныйДокумент);
	Если ТипЗнч(ЭлектронныйДокумент) = Тип("ДокументСсылка.ЭлектронныйДокументВходящийЭДО") Тогда
		ОткрытьФорму("Документ.ЭлектронныйДокументВходящийЭДО.Форма.ФормаДокумента", ПараметрыФормы,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	Иначе
		ОткрытьФорму("Документ.ЭлектронныйДокументИсходящийЭДО.Форма.ФормаДокумента", ПараметрыФормы,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОповеститьОбИзмененииСообщения(Сообщение) Экспорт
	
	Параметр = НовыеПараметрыСобытияОбновленияСостоянияЭДО();
	Параметр.Сообщения.Добавить(Сообщение);
	
	Оповестить(ИмяСобытияОбновленияСостоянияЭДО(), Параметр);
	
КонецПроцедуры

Функция НовыеДанныеПроверкиОповещения() Экспорт
	
	ДанныеПроверки = Новый Структура;
	ДанныеПроверки.Вставить("Сообщение");
	ДанныеПроверки.Вставить("ЭлектронныйДокумент");
	
	Возврат ДанныеПроверки;
	
КонецФункции

// Вызывается из формы просмотра электронного документа.
// Проверяет совпадение переданных в оповещение параметров свойствам формы.
// 
// Параметры:
//  ДанныеПроверки - Структура - данные для проверки необходимости обработки оповещения:
//  	* Сообщение - ДокументСсылка.СообщениеЭДО - электронный документ. 
//  	* ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО, 
//  						ДокументСсылка.ЭлектронныйДокументВходящийЭДО - ссылка на электронный документ. 
//  Параметр - Структура - параметр передаваемый в обработку оповещение формы.
//  ОбработатьОповещение - Булево - признак выхода из обработки оповещения формы.
//
Процедура ПриОбработкеОповещенияФормыПросмотраЭД(ДанныеПроверки, Параметр, ОбработатьОповещение) Экспорт
	
	Если ТипЗнч(Параметр) = Тип("Структура") Тогда
		
		ФлагВыхода = Ложь;
		Если Параметр.Свойство("Сообщения") Тогда
			ФлагВыхода = Истина;
			Если ТипЗнч(Параметр.Сообщения) = Тип("Массив")
				И Параметр.Сообщения.Найти(ДанныеПроверки.Сообщение) <> Неопределено Тогда
				ФлагВыхода = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		ФлагВыхода2 = Ложь;
		Если Параметр.Свойство("ЭлектронныеДокументы") Тогда
			ФлагВыхода2 = Истина;
			Если ТипЗнч(Параметр.ЭлектронныеДокументы) = Тип("Массив")
				И Параметр.ЭлектронныеДокументы.Найти(ДанныеПроверки.ЭлектронныйДокумент) <> Неопределено Тогда
					ФлагВыхода2 = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если ФлагВыхода И ФлагВыхода2 Тогда
			ОбработатьОповещение = Ложь;
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ОткрытьНастройкиОтборовСписка(Оповещение, Форма, КомпоновщикНастроек) Экспорт

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Настройка списка'"));
	ПараметрыФормы.Вставить("ИсточникДоступныхНастроек", КомпоновщикНастроек.ПолучитьИсточникДоступныхНастроек());
	ПараметрыФормы.Вставить("Настройки", КомпоновщикНастроек.Настройки);
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", КомпоновщикНастроек.ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("ФиксированныеНастройки", КомпоновщикНастроек.ФиксированныеНастройки);

	ОткрытьФорму("Обработка.ИнтерфейсДокументовЭДО.Форма.НастройкаОтборовСписка", ПараметрыФормы, ЭтотОбъект, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

Процедура СформироватьОтложенныйКонтекстДиагностики(КонтекстДиагностики) Экспорт
	
	ПараметрыПриложения.Вставить(ИмяПараметраОтложенныйКонтекстДиагностики(), КонтекстДиагностики);
	
КонецПроцедуры

Функция ОтложенныйКонтекстДиагностики() Экспорт
		
	Возврат ПараметрыПриложения[ИмяПараметраОтложенныйКонтекстДиагностики()];
	
КонецФункции

Процедура ЗаблокироватьЭлементФормы(Форма, СписокЭлементов, Элемент) Экспорт

	Элемент.Доступность = Ложь;
	СписокЭлементов.Добавить(Элемент.Имя);

КонецПроцедуры

// Открыть форму электронного документа.
// 
// Параметры:
//  ПараметрыФормы - Неопределено, Структура - Параметры формы.
//
Процедура ОткрытьФормуЭлектронногоДокумента(ПараметрыФормы) Экспорт
		
	ЭтоМобильныйКлиент = Ложь;
	
	Если ПараметрыФормы.Свойство("Ключ")
		И ТипЗнч(ПараметрыФормы.Ключ) = Тип("ДокументСсылка.ЭлектронныйДокументВходящийЭДО") Тогда
		ПолноеИмяДокумента = "Документ.ЭлектронныйДокументВходящийЭДО";
	Иначе
		ПолноеИмяДокумента = "Документ.ЭлектронныйДокументИсходящийЭДО";
	КонецЕсли;
	
	#Если МобильныйКлиент Тогда
		ЭтоМобильныйКлиент = Истина;
	#КонецЕсли
	
	Если ЭтоМобильныйКлиент Тогда
		ИмяФормы = ПолноеИмяДокумента + ".Форма.ФормаПросмотраМК";
	Иначе
		ИмяФормы = ПолноеИмяДокумента + ".ФормаОбъекта";
	КонецЕсли;
	
	Уникальность = Истина;
	
	Если ПараметрыФормы.Свойство("ОбъектУчета") Тогда
		Уникальность = ПараметрыФормы.ОбъектУчета;
	ИначеЕсли ПараметрыФормы.Свойство("Уникальность") Тогда
		Уникальность = ПараметрыФормы.Уникальность;
	КонецЕсли;
	
	ОткрытьФорму(ИмяФормы, ПараметрыФормы, , Уникальность);
	
КонецПроцедуры

// Параметры:
//  Оповещение - ОписаниеОповещения
//  Форма - ФормаКлиентскогоПриложения
//  ОписаниеФайла - см. РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла
//  ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
Процедура ОткрытьВводРеквизитовПроизвольногоДокумента(Оповещение, Форма = Неопределено, ОписаниеФайла = Неопределено, ОбъектУчета = Неопределено) Экспорт
	
	Параметры = Новый Структура;
	
	Если ЗначениеЗаполнено(ОписаниеФайла) Тогда
		Параметры.Вставить("ОписаниеФайла", ОписаниеФайла);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектУчета) Тогда
		Параметры.Вставить("ОбъектУчета", ОбъектУчета);
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ИнтерфейсДокументовЭДО.Форма.ЗаполнениеРеквизитовПроизвольногоДокумента", Параметры, Форма, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

// Открывает форму по массовой загрузке файлов
Процедура ОткрытьФормуМассовойЗагрузкиФайлов() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВложениеИзФайловНаДискеЗавершить", ЭтотОбъект);
	ФайловаяСистемаКлиент.ЗагрузитьФайлы(ОписаниеОповещения);
	
КонецПроцедуры

// Параметры:
//  ОповещениеОЗавершении - ОписаниеОповещения
//  ОшибкиФормирования - Массив из Структура
//  ДополнительныеПараметры - Неопределено,Структура:
//  * ОповещениеУспешногоЗавершения - Неопределено,ОписаниеОповещения
Процедура НачатьОбработкуОшибокФормированияДокумента(ОповещениеОЗавершении, ОшибкиФормирования, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ОшибкиФормирования.Количество() = 1
		И ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			ОшибкиФормирования[0], "ФормированиеНедоступноДляГруппы", Ложь) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Данная функция недоступна для группы.'"));
		Возврат;
	КонецЕсли;
	
	ОшибкаНастройкиСОднимКлючем = Ложь;
	ТекущееОписание = ОшибкиФормирования[0].ОписаниеОбъектаУчета; 
	ОшибкаНастройкиСОднимКлючем = ОшибкиФормирования[0].ОтсутствуютНастройки;
	
	Если ОшибкаНастройкиСОднимКлючем Тогда
		Для Каждого Ошибка Из ОшибкиФормирования Цикл
			Описание = Ошибка.ОписаниеОбъектаУчета;
			Если ТекущееОписание.Организация <> Описание.Организация
				Или ТекущееОписание.Контрагент <> Описание.Контрагент
				Или ТекущееОписание.ТипДокумента <> Описание.ТипДокумента
				Или ТекущееОписание.Направление <> Описание.Направление 
				Или Не Ошибка.ОтсутствуютНастройки Тогда
			
				ОшибкаНастройкиСОднимКлючем = Ложь;
			КонецЕсли;	 
		КонецЦикла;
	КонецЕсли;
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	Контекст.Вставить("ОшибкаНастройкиСОднимКлючем", ОшибкаНастройкиСОднимКлючем);
	Оповещение = Новый ОписаниеОповещения("ПослеОбработкиОшибокФормирования", ИнтерфейсДокументовЭДОКлиент, Контекст);
	
	Если ОшибкаНастройкиСОднимКлючем Тогда
		
		Если ТекущееОписание.Направление = ПредопределенноеЗначение("Перечисление.НаправленияЭДО.Внутренний") Тогда
			
			ОписаниеВидаВнутреннегоДокумента = НастройкиЭДОКлиент.НовоеОписаниеВидаВнутреннегоДокумента();
			ОписаниеВидаВнутреннегоДокумента.ОбъектУчета = ТекущееОписание.ОбъектУчета;			
		
			НастройкиЭДОКлиент.НастроитьВнутреннийЭлектронныйДокументооборот(ТекущееОписание.Организация,
				ОписаниеВидаВнутреннегоДокумента, Оповещение);
		ИначеЕсли ТекущееОписание.Направление = ПредопределенноеЗначение("Перечисление.НаправленияЭДО.Интеркампани") Тогда
			ПараметрыОткрытия = НастройкиОтправкиЭДОКлиент.НовыеПараметрыФормыНастроекИнтеркампани();
			ПараметрыОткрытия.Отправитель = ТекущееОписание.Организация;
			ПараметрыОткрытия.Получатель = ТекущееОписание.Контрагент;
			НастройкиОтправкиЭДОКлиент.ОткрытьНастройкуИнтеркампани(ПараметрыОткрытия);	
		Иначе
			КлючНастроек = ИнтерфейсДокументовЭДОВызовСервера.КлючНастроекОтправкиОбъектаУчета(ТекущееОписание);
			НастройкиЭДОКлиент.НастроитьОбменСКонтрагентом(КлючНастроек, Оповещение);				
		КонецЕсли;
		
	Иначе
		
		ПараметрыОбработки = ?(ТипЗнч(ДополнительныеПараметры) = Тип("Структура"),
			ДополнительныеПараметры, Новый Структура);
		
		Параметры = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыПроблемПриОбработкеДокументов();
		Параметры.АдресСведенийОбОшибках = ПоместитьВоВременноеХранилище(ОшибкиФормирования);
		
		Если ПараметрыОбработки.Свойство("ОбъектыУчета") Тогда
			Параметры.СписокДокументовКОтправке = ПараметрыОбработки.ОбъектыУчета;
		КонецЕсли;
		
		Если ПараметрыОбработки.Свойство("ИсправляемыйДокумент") Тогда
			Параметры.ИсправляемыйДокумент = ПараметрыОбработки.ИсправляемыйДокумент;
		КонецЕсли;
		
		Если ПараметрыОбработки.Свойство("ПараметрыВыполненияДействийПоЭДО")
			И ПараметрыОбработки.ПараметрыВыполненияДействийПоЭДО.НаборДействий.Получить(ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.Подписать")) = Истина Тогда
			Параметры.РежимПодписатьОтправить = Истина;
		КонецЕсли;
		
		Если ОшибкиФормирования[0].Свойство("ОшибкаФормированияВПрикладнойЧасти") 
			И ОшибкиФормирования[0].ОшибкаФормированияВПрикладнойЧасти <> Неопределено Тогда  
			Параметры.Вставить("ОткрытьФормуРучногоФормированияОтветногоТитула", Истина);
		КонецЕсли;
		
		Если ОшибкиФормирования.Количество() = 1
			И ОшибкиФормирования[0].ОтсутствуетФайлДоговорногоДокумента <> Неопределено Тогда
			ОбъектУчета = ОшибкиФормирования[0].ОписаниеОбъектаУчета.ОбъектУчета;
			ПараметрыВыполненияДействийПоЭДО = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
				ПараметрыОбработки, "ПараметрыВыполненияДействийПоЭДО");
			Если Не ЗначениеЗаполнено(ПараметрыВыполненияДействийПоЭДО) Тогда
				ПараметрыВыполненияДействийПоЭДО = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
				ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ОбъектыУчета.Добавить(ОбъектУчета);
			КонецЕсли;
			Контекст = Новый Структура("ОповещениеОЗавершении, ПараметрыВыполненияДействийПоЭДО",
				Оповещение, ПараметрыВыполненияДействийПоЭДО);
			ОповещениеПослеПолученияФайла = Новый ОписаниеОповещения(
				"ЗавершитьОбработкуОшибокФормированияПослеПолученияФайлаДоговорногоДокумента", ЭтотОбъект, Контекст);
			ПараметрыВыбораФайла = ОшибкиФормирования[0].ОтсутствуетФайлДоговорногоДокумента;
			ПолучитьФайлДоговорногоДокумента(ОповещениеПослеПолученияФайла, ОбъектУчета, ПараметрыВыбораФайла.Формат,
				ПараметрыВыбораФайла.ИдентификаторОсновногоФайла);
			Возврат;
		КонецЕсли;
		
		Если ПараметрыОбработки.Свойство("ПараметрыВыполненияДействийПоЭДО") Тогда
			ПоказатьПроблемыПриОбработкеДокументов(Оповещение, Параметры, ПараметрыОбработки.ПараметрыВыполненияДействийПоЭДО);
		Иначе
			ПоказатьПроблемыПриОбработкеДокументов(Оповещение, Параметры);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФорматДоговорныйДокументXML__ВыполнениеКлиентскихМетодов

// Для вызова клиентских процедур формата договорного документа XML
// 
// Возвращаемое значение:
//  см. Обработка.ФорматДоговорныйДокументИнформацияОтправителяЭДО.Форма.ВыполнениеКлиентскихМетодов
//
Функция ФормаДоговорныйДокументXMLКлиент()
	
	ИмяПараметра = "ЭлектронноеВзаимодействие.ФормаДоговорныйДокументXML";
	Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
		ПараметрыПриложения.Вставить(ИмяПараметра, Новый Соответствие);
	КонецЕсли;
	
	Форма = ПараметрыПриложения[ИмяПараметра].Получить("ФормаВыполнениеКлиентскихМетодов");
	
	Если Форма = Неопределено Тогда
		//@skip-check use-non-recommended-method
		Форма = ПолучитьФорму("Обработка.ФорматДоговорныйДокументИнформацияОтправителяЭДО.Форма.ВыполнениеКлиентскихМетодов"); // АПК:65 Не проверять метод ПолучитьФорму
		ПараметрыПриложения[ИмяПараметра].Вставить("ФормаВыполнениеКлиентскихМетодов", Форма);
	КонецЕсли;
	
	Возврат Форма;
	
КонецФункции

#КонецОбласти

#Область ПросмотрЭлектронногоДокумента

#Область ОбработкаСобытийВыполненияДействийПоЭДО

// Параметры:
//  Комментарий - Строка
//  ДополнительныеПараметры - Структура:
//    * НаборДействий - Соответствие из КлючИЗначение:
//      ** Ключ - ПеречислениеСсылка.ДействияПоЭДО
//      ** Значение - Булево
//    * ОбъектыУчета - Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//    * ЭлектронныеДокументы - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,
//                                       ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//    * ПакетыДокументов - Массив из УникальныйИдентификатор
//    * ОсновноеДействие - ПеречислениеСсылка.ДействияПоЭДО
Процедура ВыполнитьДействияПоЭДОПослеВводаСтроки(Комментарий, ДополнительныеПараметры) Экспорт
	
	Если Комментарий = Неопределено Тогда
		Возврат; 
	КонецЕсли;
		
	Оповещение = Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ЭтотОбъект, ДополнительныеПараметры);

	ПараметрыВыполненияДействийПоЭДО = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	ПараметрыВыполненияДействийПоЭДО.НаборДействий = ДополнительныеПараметры.НаборДействий;
	
	Если ДополнительныеПараметры.Свойство("ОбъектыУчета")
		И ЗначениеЗаполнено(ДополнительныеПараметры.ОбъектыУчета) Тогда
		
		ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ОбъектыУчета = ДополнительныеПараметры.ОбъектыУчета;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ЭлектронныеДокументы") 
		И ЗначениеЗаполнено(ДополнительныеПараметры.ЭлектронныеДокументы) Тогда
		
		ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ЭлектронныеДокументы = ДополнительныеПараметры.ЭлектронныеДокументы;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ПакетыДокументов")
		И ЗначениеЗаполнено(ДополнительныеПараметры.ПакетыДокументов) Тогда
		
		ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ПакетыДокументов = ДополнительныеПараметры.ПакетыДокументов;
	КонецЕсли;
		
	ПараметрыДействия = ИнтерфейсДокументовЭДОКлиентСервер.НовыеДополнительныеПараметрыДействия();
	ПараметрыДействия.Комментарий = Комментарий; 
				
	ПараметрыВыполненияДействийПоЭДО.ДополнительныеПараметрыДействий.Вставить(ДополнительныеПараметры.ОсновноеДействие,
		ПараметрыДействия);
	
	НачатьВыполнениеДействийПоЭДО(Оповещение, ПараметрыВыполненияДействийПоЭДО);
		
КонецПроцедуры

// Параметры:
//  ПараметрыВыполненияДействийПоЭДО - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  Контекст - Структура:
//  * ОповещениеОЗавершении - ОписаниеОповещения
//  * ОшибкаНастройкиСОднимКлючем - Булево
Процедура ПослеОбработкиОшибокФормирования(ПараметрыВыполненияДействийПоЭДО, Контекст) Экспорт
	
	Если ПараметрыВыполненияДействийПоЭДО = Неопределено Тогда
		Результат = Неопределено;
	Иначе
		Результат = Новый Структура;
		Результат.Вставить("ПараметрыВыполненияДействийПоЭДО", ПараметрыВыполненияДействийПоЭДО);
		Результат.Вставить("ОшибкаНастройкиСОднимКлючем", Контекст.ОшибкаНастройкиСОднимКлючем);
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Контекст.ОповещениеОЗавершении, Результат);
	
КонецПроцедуры

// Параметры:
//  Результат - Неопределено,Структура:
//  * ПараметрыВыполненияДействийПоЭДО - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  * ОшибкаНастройкиСОднимКлючем - Булево
//  ПараметрыОповещения - Неопределено,Структура:
//  * ПараметрыВыполненияДействийПоЭДО - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
Процедура ВыполнитьДействияПоЭДОПослеОбработкиОшибокФормирования(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ЭтотОбъект, ПараметрыОповещения);
	
	Если Результат.ОшибкаНастройкиСОднимКлючем Тогда
		НачатьВыполнениеДействийПоЭДО(ОповещениеЗавершения, ПараметрыОповещения.ПараметрыВыполненияДействийПоЭДО);
	Иначе
		НачатьВыполнениеДействийПоЭДО(ОповещениеЗавершения, Результат.ПараметрыВыполненияДействийПоЭДО);
	КонецЕсли;
	
КонецПроцедуры

// При завершении отправки сообщения в тех поддержку.
// 
// Параметры:
// Результат - Структура - результат отправки сообщения:
//                            *КодОшибки - Строка - идентификатор ошибки при отправки:
//                                                   <Пустая строка> отправка - выполнена успешно;
//                                                   "НеверныйФорматЗапроса" - переданы некорректные параметры
//                                                     сообщения сообщения в техническую поддержку;
//                                                   ПревышенМаксимальныйРазмер - превышен максимальный
//                                                     размер вложения;
//                                                   НеизвестнаяОшибка - при отправке сообщения возникли ошибки;
//                            *СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке
//                                                 для пользователя;
// ДополнительныеПараметры - Неопределено
//
Процедура ПриЗавершенииОтправкиСообщенияВТехПоддержку(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат.КодОшибки) Тогда
		ПоказатьПредупреждение(, Результат.СообщениеОбОшибке);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ОповещениеОЗавершении - ОписаниеОповещения
//  ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  Формат - Строка
//  ИдентификаторОсновногоФайла - Строка
Процедура ПолучитьФайлДоговорногоДокумента(ОповещениеОЗавершении, ОбъектУчета, Формат, ИдентификаторОсновногоФайла = "")
	
	Если ИнтерфейсДокументовЭДОКлиентСервер.ЭтоФорматДоговорногоДокументаПДФ_А3(Формат) Тогда
		
		Если Не ДоступнаРаботаСФорматомПДФ_А3() Тогда
			Возврат; 
		КонецЕсли;
		
		ФормаДоговорныйДокумент101Клиент = ФормаДоговорныйДокумент101Клиент();
			
		ПараметрыПодготовки = ФормаДоговорныйДокумент101Клиент.ПараметрыПодготовкиФайла();
		ПараметрыПодготовки.ОбработчикЗавершения = ОповещениеОЗавершении;
		ПараметрыПодготовки.Данные = ОбъектУчета;
		
		ФормаДоговорныйДокумент101Клиент.ЗапроситьИПодготовитьФайл(ПараметрыПодготовки);
		
	ИначеЕсли ИнтерфейсДокументовЭДОКлиентСервер.ЭтоФорматДоговорногоДокументаXML(Формат) Тогда
		
		ФормаДоговорныйДокументXMLКлиент = ФормаДоговорныйДокументXMLКлиент();
		
		ИдентификаторОсновногоФайла = ?(ЗначениеЗаполнено(ИдентификаторОсновногоФайла), ИдентификаторОсновногоФайла,
			Строка(Новый УникальныйИдентификатор()));
		ПараметрыПодготовки = ФормаДоговорныйДокументXMLКлиент.ПараметрыПодготовкиФайла();
		ПараметрыПодготовки.ОбработчикЗавершения = ОповещениеОЗавершении;
		ПараметрыПодготовки.Данные = ОбъектУчета;
		ПараметрыПодготовки.ИдентификаторОсновногоФайла = ИдентификаторОсновногоФайла;
		
		ФормаДоговорныйДокументXMLКлиент.НовыйФайлОбмена(ПараметрыПодготовки);
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ПомещенныйФайл - Структура:
//  * Имя      - Строка - Имя файла.
//  * Хранение - Строка - Адрес временного хранилища двоичных данных файла.
//  Контекст - Структура:
//  * ОповещениеОЗавершении - ОписаниеОповещения
//  * ПараметрыВыполненияДействийПоЭДО - См. ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
Процедура ЗавершитьОбработкуОшибокФормированияПослеПолученияФайлаДоговорногоДокумента(ПомещенныйФайл, Контекст) Экспорт
	
	Если ПомещенныйФайл = Неопределено Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеОЗавершении);
		Возврат;
	КонецЕсли;
	
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ПомещенныйФайл.Хранение);
	
	ОписаниеФайла = РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла();
	ОписаниеФайла.ДвоичныеДанные = ДвоичныеДанныеФайла;
	ОписаниеФайла.ИмяФайла = ПомещенныйФайл.Имя;
	
	УдалитьИзВременногоХранилища(ПомещенныйФайл.Хранение);
	
	ПараметрыВыполненияДействийПоЭДО = Контекст.ПараметрыВыполненияДействийПоЭДО;
	Для Каждого ОбъектУчета Из ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ОбъектыУчета Цикл
		ПараметрыВыполненияДействийПоЭДО.ДополнительныеФайлы.Вставить(ОбъектУчета, ОписаниеФайла);
	КонецЦикла;
	
	ВыполнитьОбработкуОповещения(Контекст.ОповещениеОЗавершении, ПараметрыВыполненияДействийПоЭДО);
	
КонецПроцедуры

#КонецОбласти

// Открывает электронный документ по параметрам просмотра.
// 
// Параметры:
//  ПараметрыПросмотра - См. ИнтерфейсДокументовЭДОВызовСервера.ПараметрыПросмотраЭлектронногоДокументаПоОбъектуУчета
Процедура ОткрытьЭлектронныйДокументПоПараметрамПросмотра(ПараметрыПросмотра)
	
	Если ЗначениеЗаполнено(ПараметрыПросмотра.ЭлектронныйДокумент) Тогда
		ОткрытьЭлектронныйДокумент(ПараметрыПросмотра.ЭлектронныйДокумент);
		Возврат;
	КонецЕсли;
	
	Если ПараметрыПросмотра.ПросмотрСтатусовЭлектронныхДокументов <> Неопределено Тогда
		ОткрытьФорму("Обработка.ИнтерфейсДокументовЭДО.Форма.СтатусыЭлектронныхДокументов",
			ПараметрыПросмотра.ПросмотрСтатусовЭлектронныхДокументов,,,,,,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Возврат;
	КонецЕсли;
	
	ПредварительныйПросмотр = ПараметрыПросмотра.ПредварительныйПросмотр;
	Если ПредварительныйПросмотр = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Электронный документ отсутствует.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОбъектУчета = ПараметрыПросмотра.ОбъектУчета;
	
	Если Не ПредварительныйПросмотр.РезультатПроверкиГотовности.Успех Тогда 
		НаборОбъектовУчета = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбъектУчета);
		ОбработчикОповещения = Новый ОписаниеОповещения("ОткрытьЭлектронныйДокументПослеПодготовкиОбъектаУчета",
			ЭтотОбъект, ОбъектУчета);
		ИнтеграцияЭДОКлиент.ПодготовитьКДокументообороту(НаборОбъектовУчета, ОбработчикОповещения);
		Возврат;
	КонецЕсли;
	
	Если ПредварительныйПросмотр.РезультатПодготовкиВложения.Ошибка Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ПредварительныйПросмотр.РезультатПодготовкиВложения.ТекстОшибки);
		Возврат;
	ИначеЕсли ПредварительныйПросмотр.РезультатПодготовкиВложения.Успех Тогда
		ОткрытьНовыйЭлектронныйДокументПоОписанияФайла(ОбъектУчета,
			ПредварительныйПросмотр.РезультатПодготовкиВложения.АдресОписанияФайла,
			ПредварительныйПросмотр.РезультатПодготовкиВложения.ВидДокумента);
		Возврат;
	КонецЕсли;
	
	Если Не ПредварительныйПросмотр.РезультатПоискаНастроек.Успех Тогда
		ПараметрыПоиска = ПредварительныйПросмотр.РезультатПоискаНастроек.ПараметрыПоиска;

		Оповещение = Новый ОписаниеОповещения("ОткрытьЭлектронныйДокументПослеСозданияНастроек", ЭтотОбъект, ПараметрыПоиска);
		Если ПараметрыПоиска.Направление =  ПредопределенноеЗначение("Перечисление.НаправленияЭДО.Внутренний") Тогда
			ОписаниеВида = НастройкиЭДОКлиент.НовоеОписаниеВидаВнутреннегоДокумента();
			ОписаниеВида.ОбъектУчета = ПараметрыПоиска.КлючОсновнойНастройкиВнутреннегоЭДО.ОбъектУчета;
			НеЗаданОсновнойВид = ПредварительныйПросмотр.РезультатПоискаНастроек.НеУказанОсновнойВидДокумента;
			
			Если Не ЗначениеЗаполнено(ПредварительныйПросмотр.РезультатПоискаНастроек.Настройки.НастройкиВнутреннегоЭДО) Тогда
				НастройкиЭДОКлиент.НастроитьВнутреннийЭлектронныйДокументооборот(
				ПараметрыПоиска.КлючОсновнойНастройкиВнутреннегоЭДО.Организация, ОписаниеВида, Оповещение);
			
			ИначеЕсли ПредварительныйПросмотр.РезультатПоискаНастроек.ФормированиеЗапрещено Тогда
				Параметры = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыПроблемПриОбработкеДокументов();
				ОписаниеОбъектаУчета = ПредварительныйПросмотр.РезультатПоискаНастроек.ОписаниеОбъектаУчета;
				СтруктураОшибки = Новый Структура("ОписаниеОбъектаУчета, ФормированиеЗапрещено", ОписаниеОбъектаУчета, Истина);
				ОшибкиФормирования = Новый Массив;
				ОшибкиФормирования.Добавить(СтруктураОшибки);
				
				Параметры.АдресСведенийОбОшибках = ПоместитьВоВременноеХранилище(ОшибкиФормирования);
				Параметры.СписокДокументовКОтправке.Добавить(ОбъектУчета);
				
				Оповещение = Новый ОписаниеОповещения("ОткрытьЭлектронныйДокументПослеРедактированияНастроек",
					ЭтотОбъект, ОбъектУчета);
				ПоказатьПроблемыПриОбработкеДокументов(Оповещение, Параметры);
				Возврат;
			ИначеЕсли НеЗаданОсновнойВид Тогда
				Параметры = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыПроблемПриОбработкеДокументов();
				ОписаниеОбъектаУчета = ПредварительныйПросмотр.РезультатПоискаНастроек.ОписаниеОбъектаУчета;
				СтруктураОшибки = Новый Структура("ОписаниеОбъектаУчета, ОсновнойВидНеУстановлен", ОписаниеОбъектаУчета, Истина);
				ОшибкиФормирования = Новый Массив;
				ОшибкиФормирования.Добавить(СтруктураОшибки);
				
				Параметры.АдресСведенийОбОшибках = ПоместитьВоВременноеХранилище(ОшибкиФормирования);
				Параметры.СписокДокументовКОтправке.Добавить(ОбъектУчета);
				
				Оповещение = Новый ОписаниеОповещения("ОткрытьЭлектронныйДокументПослеРедактированияНастроек",
					ЭтотОбъект, ОбъектУчета);
				ПоказатьПроблемыПриОбработкеДокументов(Оповещение, Параметры);
				Возврат;
			КонецЕсли;
			
		ИначеЕсли ПараметрыПоиска.Направление = ПредопределенноеЗначение("Перечисление.НаправленияЭДО.Интеркампани") Тогда
			Если ПредварительныйПросмотр.РезультатПоискаНастроек.ФормированиеЗапрещено Тогда
				Параметры = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыПроблемПриОбработкеДокументов();
				ОписаниеОбъектаУчета = ПредварительныйПросмотр.РезультатПоискаНастроек.ОписаниеОбъектаУчета;
				СтруктураОшибки = Новый Структура("ОписаниеОбъектаУчета, ФормированиеЗапрещено", ОписаниеОбъектаУчета, Истина);
				ОшибкиФормирования = Новый Массив;
				ОшибкиФормирования.Добавить(СтруктураОшибки);
				
				Параметры.АдресСведенийОбОшибках = ПоместитьВоВременноеХранилище(ОшибкиФормирования);
				Параметры.СписокДокументовКОтправке.Добавить(ОбъектУчета);
				
				Оповещение = Новый ОписаниеОповещения("ОткрытьЭлектронныйДокументПослеРедактированияНастроек",
					ЭтотОбъект, ОбъектУчета);
				ПоказатьПроблемыПриОбработкеДокументов(Оповещение, Параметры);
			Иначе
				НастройкиЭДОКлиент.ОткрытьНастройкиИнтеркампани(ПараметрыПоиска.КлючНастроекИнтеркампани.Организация);
			КонецЕсли;
			
		Иначе
			Если ПредварительныйПросмотр.РезультатПоискаНастроек.ФормированиеЗапрещено Тогда
				Параметры = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыПроблемПриОбработкеДокументов();
				ОписаниеОбъектаУчета = ПредварительныйПросмотр.РезультатПоискаНастроек.ОписаниеОбъектаУчета;
				СтруктураОшибки = Новый Структура("ОписаниеОбъектаУчета, ФормированиеЗапрещено", ОписаниеОбъектаУчета, Истина);
				ОшибкиФормирования = Новый Массив;
				ОшибкиФормирования.Добавить(СтруктураОшибки);
				
				Параметры.АдресСведенийОбОшибках = ПоместитьВоВременноеХранилище(ОшибкиФормирования);
				Параметры.СписокДокументовКОтправке.Добавить(ОбъектУчета);
				
				Оповещение = Новый ОписаниеОповещения("ОткрытьЭлектронныйДокументПослеРедактированияНастроек",
					ЭтотОбъект, ОбъектУчета);
				ПоказатьПроблемыПриОбработкеДокументов(Оповещение, Параметры);
			Иначе
				Если ПараметрыПоиска.Направление = ПредопределенноеЗначение("Перечисление.НаправленияЭДО.Входящий")
					И ПараметрыПоиска.КлючНастроекОтправки = Неопределено Тогда 
						ТекстСообщения = НСтр("ru = 'Электронный документ отсутствует.'");
						ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
						Возврат;
				КонецЕсли;
				НастройкиЭДОКлиент.НастроитьОбменСКонтрагентом(ПараметрыПоиска.КлючНастроекОтправки, Оповещение);
			КонецЕсли;
		КонецЕсли;
		Возврат;
	Иначе
		ПараметрыПоиска = ПредварительныйПросмотр.РезультатПоискаНастроек.ПараметрыПоиска;
		Если ПараметрыПоиска.Направление = ПредопределенноеЗначение("Перечисление.НаправленияЭДО.Исходящий") Тогда
			Настройка = ПредварительныйПросмотр.РезультатПоискаНастроек.Настройки.НастройкиОтправки;
			
			Если Не Настройка.ГотовностьКОбмену 
				И Настройка.СпособОбмена <> ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезКаталог")
				И Настройка.СпособОбмена <> ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезFTP")
				И Настройка.СпособОбмена <> ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезЭлектроннуюПочту") Тогда
				
				ПараметрыПоиска = ПредварительныйПросмотр.РезультатПоискаНастроек.ПараметрыПоиска;
	
				Оповещение = Новый ОписаниеОповещения("ОткрытьЭлектронныйДокументПослеСозданияНастроек", ЭтотОбъект, ПараметрыПоиска);
				НастройкиЭДОКлиент.НастроитьОбменСКонтрагентом(ПараметрыПоиска.КлючНастроекОтправки, Оповещение);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	ОбработатьРезультатПодготовкиДанныхДляПросмотра(ПредварительныйПросмотр.РезультатПодготовкиДанных,
		ОбъектУчета, ПредварительныйПросмотр.РезультатПоискаНастроек.Настройки);

КонецПроцедуры

// Открывает просмотр электронного документа после записи и проведения объекта учета
//
// Параметры:
//  НаборОбъектовУчета	 - Массив Из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - Пустой массив если подготовка не выполнена
//  ОбъектУчета			 - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - Объект учета по которому выполнялась попытка подготовки
//
Процедура ОткрытьЭлектронныйДокументПослеПодготовкиОбъектаУчета(НаборОбъектовУчета, ОбъектУчета) Экспорт
	
	Если Не ЗначениеЗаполнено(НаборОбъектовУчета) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = НовыеПараметрыОткрытияЭлектронногоДокумента();

	ПараметрыПросмотраПослеПодготовки = ИнтерфейсДокументовЭДОВызовСервера.ПараметрыПросмотраЭлектронногоДокументаПоОбъектуУчета(
		ОбъектУчета, ПараметрыОткрытия);
	
	ПредварительныйПросмотр = ПараметрыПросмотраПослеПодготовки.ПредварительныйПросмотр;
	
	Если ПредварительныйПросмотр = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Электронный документ отсутствует.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если Не ПредварительныйПросмотр.РезультатПроверкиГотовности.Успех Тогда 
		ТекстСообщения = НСтр("ru = 'Не удалось сформировать электронную версию документа.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОткрытьЭлектронныйДокументПоПараметрамПросмотра(ПараметрыПросмотраПослеПодготовки);
	
КонецПроцедуры

Процедура ОткрытьЭлектронныйДокументПослеСозданияНастроек(НастройкиОтправки, Параметры) Экспорт
	
	Если Не ЗначениеЗаполнено(НастройкиОтправки) Тогда
		Возврат;
	КонецЕсли;	
	
	НастройкиФормирования = ИнтерфейсДокументовЭДОКлиентСервер.НовыеНастройкиФормированияЭлектронногоДокументаОбъектаУчета();
	НастройкиФормирования.Направление = Параметры.Направление;
	
	Если Параметры.Направление = ПредопределенноеЗначение("Перечисление.НаправленияЭДО.Внутренний") Тогда

		Настройки = Новый Структура;
		Настройки.Вставить("Организация", НастройкиОтправки.КлючНастройки.Организация);
		Настройки.Вставить("ВидДокумента", НастройкиОтправки.КлючНастройки.ВидВнутреннегоДокумента);
		Настройки.Вставить("ВидПодписи", НастройкиОтправки.ВидЭлектроннойПодписи);
		Настройки.Вставить("МаршрутПодписания", НастройкиОтправки.Маршрут);
		Настройки.Вставить("Подписанты", НастройкиОтправки.Подписанты);

		НастройкиФормирования.НастройкиВнутреннегоЭДО = Настройки;
		
	Иначе
		НастройкиФормирования.НастройкиОтправки = НастройкиОтправки;
	КонецЕсли;
	
	ПараметрыОткрытия = НовыеПараметрыОткрытияЭлектронногоДокумента();
	
	РезультатПодготовкиДанных = ИнтерфейсДокументовЭДОВызовСервера.ПодготовитьДанныеДляПросмотра(
		Параметры.ОбъектУчета, НастройкиФормирования, ПараметрыОткрытия);
	
	ОбработатьРезультатПодготовкиДанныхДляПросмотра(РезультатПодготовкиДанных, Параметры.ОбъектУчета, НастройкиФормирования);
	
КонецПроцедуры

Процедура ОткрытьЭлектронныйДокументПослеРедактированияНастроек(Результат, ОбъектУчета) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ОткрытьЭлектронныйДокументОбъектаУчета(ОбъектУчета);
	
КонецПроцедуры

// Открывает электронный документ после обработки проблем при формировании.
// 
// Параметры:
//  Результат - Неопределено,Структура:
//  * ПараметрыВыполненияДействийПоЭДО - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  * ОшибкаНастройкиСОднимКлючем - Булево
//  Контекст - Структура:
//  * НастройкиФормирования - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыеНастройкиФормированияЭлектронногоДокументаОбъектаУчета
Процедура ОткрытьЭлектронныйДокументПослеОбработкиПроблемПриФормировании(Результат, Контекст) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполненияДействийПоЭДО = Результат.ПараметрыВыполненияДействийПоЭДО;
	ОбъектУчета = ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ОбъектыУчета[0];
	Если Не ЗначениеЗаполнено(ОбъектУчета) Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеДанные = ПараметрыВыполненияДействийПоЭДО.ДополнительныеДанныеОбъектов[ОбъектУчета];
	ДополнительныйФайл = ПараметрыВыполненияДействийПоЭДО.ДополнительныеФайлы[ОбъектУчета];
	
	ПараметрыОткрытия = НовыеПараметрыОткрытияЭлектронногоДокумента();
	ПараметрыОткрытия.ЗначенияДополнительныхПолей = ДополнительныеДанные;
	ПараметрыОткрытия.ФайлДоговора = ДополнительныйФайл;
	
	РезультатПодготовкиДанных = ИнтерфейсДокументовЭДОВызовСервера.ПодготовитьДанныеДляПросмотра(
		ОбъектУчета, Контекст.НастройкиФормирования, ПараметрыОткрытия);
	
	ОбработатьРезультатПодготовкиДанныхДляПросмотра(РезультатПодготовкиДанных, ОбъектУчета, Контекст.НастройкиФормирования);
	
КонецПроцедуры

// Параметры:
//  РезультатПодготовкиДанных - См. ИнтерфейсДокументовЭДО.ПодготовитьДанныеПредварительногоПросмотра
//  ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  НастройкиФормирования - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыеНастройкиФормированияЭлектронногоДокументаОбъектаУчета
Процедура ОбработатьРезультатПодготовкиДанныхДляПросмотра(РезультатПодготовкиДанных, ОбъектУчета, НастройкиФормирования)
	
	Если РезультатПодготовкиДанных.Ошибка Тогда
		Контекст = Новый Структура("НастройкиФормирования", НастройкиФормирования);
		Оповещение = Новый ОписаниеОповещения("ОткрытьЭлектронныйДокументПослеОбработкиПроблемПриФормировании",
			ЭтотОбъект, Контекст);
		ОшибкиФормирования = ПолучитьИзВременногоХранилища(РезультатПодготовкиДанных.АдресСведенийОбОшибках);
		УдалитьИзВременногоХранилища(РезультатПодготовкиДанных.АдресСведенийОбОшибках);
		НачатьОбработкуОшибокФормированияДокумента(Оповещение, ОшибкиФормирования);
		Возврат;
		
	ИначеЕсли РезультатПодготовкиДанных.ДлительнаяОперация <> Неопределено Тогда
		Контекст = Новый Структура("ОбъектУчета, НастройкиФормирования", ОбъектУчета, НастройкиФормирования);
		Оповещение = Новый ОписаниеОповещения(
			"ОбработатьРезультатПодготовкиДанныхДляПросмотраПослеДлительнойОперации", ЭтотОбъект, Контекст);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатПодготовкиДанных.ДлительнаяОперация, Оповещение);
		Возврат;
		
	ИначеЕсли Не ЗначениеЗаполнено(РезультатПодготовкиДанных.АдресДанныхПредварительногоПросмотра) Тогда
		ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки(РезультатПодготовкиДанных.КонтекстДиагностики);
		Возврат;
	КонецЕсли;
	
	ОткрытьНовыйЭлектронныйДокументПоПодготовленнымДанным(ОбъектУчета, НастройкиФормирования,
		РезультатПодготовкиДанных.АдресДанныхПредварительногоПросмотра);
	
КонецПроцедуры

// Параметры:
//  ДлительнаяОперация - см. ДлительныеОперации.ВыполнитьФункцию
//  Контекст - Структура:
//  * ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  * НастройкиФормирования - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыеНастройкиФормированияЭлектронногоДокументаОбъектаУчета
Процедура ОбработатьРезультатПодготовкиДанныхДляПросмотраПослеДлительнойОперации(ДлительнаяОперация, Контекст) Экспорт
	
	Результат = ИнтерфейсДокументовЭДОВызовСервера.РезультатПодготовкиДанныхПросмотраПослеДлительнойОперации(
		ДлительнаяОперация);
	
	ОбработатьРезультатПодготовкиДанныхДляПросмотра(Результат, Контекст.ОбъектУчета,
		Контекст.НастройкиФормирования);
	
КонецПроцедуры

// Параметры:
//  РезультатПодготовкиДанных - См. ИнтерфейсДокументовЭДО.ПодготовитьДанныеПредварительногоПросмотраПоФайлуXML
//  ПараметрыПросмотра - См. НовыеПараметрыПросмотраДокументаПоФайлу
//  ОбъектУчета - Неопределено,ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
Процедура ОбработатьРезультатПодготовкиДанныхДляПросмотраПоФайлуXML(РезультатПодготовкиДанных, ПараметрыПросмотра,
	ОбъектУчета = Неопределено)
	
	Если РезультатПодготовкиДанных.ДлительнаяОперация <> Неопределено Тогда
		Контекст = Новый Структура("ПараметрыПросмотра, ОбъектУчета", ПараметрыПросмотра, ОбъектУчета);
		Оповещение = Новый ОписаниеОповещения(
			"ОбработатьРезультатПодготовкиДанныхДляПросмотраПоФайлуXMLПослеДлительнойОперации", ЭтотОбъект, Контекст);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатПодготовкиДанных.ДлительнаяОперация, Оповещение);
		Возврат;
	КонецЕсли;
		
	Если Не РезультатПодготовкиДанных.Ошибка И Не РезультатПодготовкиДанных.ДокументРаспознан Тогда
		ОткрытьФормуЭлектронногоДокумента(ПараметрыПросмотра);
		Возврат;
	КонецЕсли;
		
	Если Не РезультатПодготовкиДанных.Ошибка И РезультатПодготовкиДанных.ДокументРаспознан Тогда
		ОткрытьНовыйЭлектронныйДокументПоПодготовленнымДанным(ОбъектУчета,
			РезультатПодготовкиДанных.НастройкиФормирования, РезультатПодготовкиДанных.АдресДанных);
		Возврат;
	КонецЕсли;
		
	ОписанияОшибок = ПолучитьИзВременногоХранилища(РезультатПодготовкиДанных.АдресСведенийОбОшибках);
	Для Каждого Ошибка Из ОписанияОшибок Цикл
		Если ЗначениеЗаполнено(Ошибка.Данные) Тогда
			ОбработатьНаличиеСуществующегоДокументаДляВыбранногоФайлаXML(Ошибка.Данные);
			Продолжить;
		КонецЕсли;
		
		ПоказатьПредупреждение(, Ошибка.Текст);
		Прервать;
	КонецЦикла;
	
	ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки(РезультатПодготовкиДанных.КонтекстДиагностики);
	
КонецПроцедуры

// Параметры:
//  ДлительнаяОперация - См. ДлительныеОперации.ВыполнитьФункцию
//  Контекст - Структура:
//  * ПараметрыПросмотра - См. НовыеПараметрыПросмотраДокументаПоФайлу
//  * ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
Процедура ОбработатьРезультатПодготовкиДанныхДляПросмотраПоФайлуXMLПослеДлительнойОперации(ДлительнаяОперация,
	Контекст) Экспорт
	
	РезультатПодготовкиДанных = 
		ИнтерфейсДокументовЭДОВызовСервера.РезультатПодготовкиДанныхПросмотраПоФайлуXMLПослеДлительнойОперации(
			ДлительнаяОперация);
	
	ОбработатьРезультатПодготовкиДанныхДляПросмотраПоФайлуXML(РезультатПодготовкиДанных, Контекст.ПараметрыПросмотра,
		Контекст.ОбъектУчета);
	
КонецПроцедуры

// Открывает форму исходящего электронного документа в режиме предварительного просмотра.
// 
// Параметры:
//  ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  НастройкиФормирования - См. ИнтерфейсДокументовЭДОКлиентСервер.НовыеНастройкиФормированияЭлектронногоДокументаОбъектаУчета
//  АдресДанных - Строка
Процедура ОткрытьНовыйЭлектронныйДокументПоПодготовленнымДанным(ОбъектУчета, НастройкиФормирования, АдресДанных)
	
	ПросмотрПодготовленныхДанных = Новый Структура;
	ПросмотрПодготовленныхДанных.Вставить("ОбъектУчета", ОбъектУчета);
	ПросмотрПодготовленныхДанных.Вставить("НастройкиФормирования", НастройкиФормирования);
	ПросмотрПодготовленныхДанных.Вставить("АдресДанных", АдресДанных);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПросмотрПодготовленныхДанных", ПросмотрПодготовленныхДанных);
	ПараметрыФормы.Вставить("ЭтоОблачныйЭДО", НастройкиФормирования.ЭтоОблачныйЭДО);
	
	ОткрытьФормуЭлектронногоДокумента(ПараметрыФормы);
	
КонецПроцедуры

// Открывает форму исходящего электронного документа в режиме предварительного просмотра.
// 
// Параметры:
//  Основание - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  АдресОписанияФайла - Строка - адрес во временном хранилище на см. РаботаСФайламиБЭД.НовоеОписаниеФайла
//  ВидДокумента - Неопределено
//               - СправочникСсылка.ВидыДокументовЭДО - уточнение вида документа, когда по объекту учета доступно несколько вариантов.
Процедура ОткрытьНовыйЭлектронныйДокументПоОписанияФайла(Основание, АдресОписанияФайла, ВидДокумента = Неопределено)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Основание", Основание);
	ПараметрыФормы.Вставить("АдресОписанияФайла", АдресОписанияФайла);
	ПараметрыФормы.Вставить("ВидДокумента", ВидДокумента);
	ОткрытьФормуЭлектронногоДокумента(ПараметрыФормы);
	
КонецПроцедуры

Процедура ОткрытьНовыйЭлектронныйДокумент(ЭлектронныйДокументДляКопирования = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура;
	Если ЗначениеЗаполнено(ЭлектронныйДокументДляКопирования) Тогда
		ПараметрыФормы.Вставить("ЗначениеКопирования", ЭлектронныйДокументДляКопирования);
	КонецЕсли;
	ОткрытьФормуЭлектронногоДокумента(ПараметрыФормы);
	
КонецПроцедуры

Процедура ОповеститьПользователяОСменеОтветственного(Ответственный, КоличествоВсего, КоличествоОбработанных) Экспорт
	
	Если КоличествоОбработанных > 0 Тогда
			
		ТекстСообщения = НСтр("ru = 'Для %КоличествоОбработанных% из %КоличествоВсего% выделенных эл.документов
							|установлен ответственный ""%Ответственный%""'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОбработанных%", КоличествоОбработанных);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоВсего%",        КоличествоВсего);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ответственный%",          Ответственный);
		ТекстЗаголовка = НСтр("ru='Ответственный ""%Ответственный%"" установлен'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Ответственный%", Ответственный);
		ПоказатьОповещениеПользователя(ТекстЗаголовка, , ТекстСообщения, БиблиотекаКартинок.Информация32);
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Ответственный ""%Ответственный%"" не установлен ни для одного эл.документа.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ответственный%", Ответственный);
		ТекстЗаголовка = НСтр("ru = 'Ответственный ""%Ответственный%"" не установлен'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Ответственный%", Ответственный);
		ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращаемое значение:
//  Структура:
//  * ВыбранныйФайл - Строка - имя файла с расширением
//  * АдресВХранилище - Строка - двоичные данные файла во временном хранилище
//  * ОбъектУчета - Неопределено
//                - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
Функция НовыеПараметрыПросмотраДокументаПоФайлу()
	Результат = Новый Структура;
	Результат.Вставить("ВыбранныйФайл", "");
	Результат.Вставить("АдресВХранилище", "");
	Результат.Вставить("ОбъектУчета", Неопределено);
	Возврат Результат;
КонецФункции

#КонецОбласти // ПросмотрЭлектронногоДокумента

// Продолжение массовой загрузки после выбора файлов
//
// Параметры:
//  ОписаниеПомещенныхФайлов - Массив Из ОписаниеПередаваемогоФайла
//  ДополнительныеПараметры - Неопределено
Процедура ДобавитьВложениеИзФайловНаДискеЗавершить(ОписаниеПомещенныхФайлов, ДополнительныеПараметры) Экспорт

	Если ОписаниеПомещенныхФайлов <> Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВложениеИзФайловНаДискеПоказатьРезультат", ЭтотОбъект);
		ОткрытьФорму("Обработка.ИнтерфейсДокументовЭДО.Форма.ЗагрузкаФайлов",
			Новый Структура("ОписаниеПомещенныхФайлов", ОписаниеПомещенныхФайлов),,Истина ,,, ОписаниеОповещения);
	КонецЕсли;

КонецПроцедуры

// Продолжение массовой загрузки после выбора файлов
//
// Параметры:
//  РезультатЗагрузки - Массив Из Структура:
//   * Успех - Булево
//   * ТекстОшибки - Строка
//   * Отправитель - ОпределяемыйТип.Организация
//   * ИдентификаторОтправителя - Строка
//   * Получатель - ОпределяемыйТип.КонтрагентБЭД
//   * ИдентификаторПолучателя - Строка
//   * ИмяФайла - Строка
//  ДополнительныеПараметры - Неопределено
Процедура ДобавитьВложениеИзФайловНаДискеПоказатьРезультат(РезультатЗагрузки, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗагрузки <> Неопределено Тогда
		ОткрытьФорму("Обработка.ИнтерфейсДокументовЭДО.Форма.РезультатЗагрузкиФайлов",
			Новый Структура("РезультатЗагрузки", РезультатЗагрузки),,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

// Вызывает метод переформирования документа, анализирует результат переформирования.
// 
// Параметры:
//  ПараметрыПереформирования - Структура:
//   * КонтекстДиагностики - См. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//   * Контекст - Структура:
//    ** ОповещениеОЗавершении - ОписаниеОповещения
//    ** Параметры - См. ИнтерфейсДокументовЭДО.ПараметрыПереформированияДокумента
//    ** ПараметрыДействийПоЭДО - См. ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
Процедура НачатьПереформированиеДокумента(ПараметрыПереформирования)
	 
	РезультатПереформирования = ИнтерфейсДокументовЭДОВызовСервера.ПереформироватьДокумент(
		ПараметрыПереформирования.Контекст.Параметры, ПараметрыПереформирования.КонтекстДиагностики);

	Если РезультатПереформирования.ЕстьОшибки Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеПолученияДопДанныхПриПереформировании", ЭтотОбъект, 
			ПараметрыПереформирования);
		ПолучитьДопДанныеОбъектаУчета(Оповещение, РезультатПереформирования, 
			ПараметрыПереформирования.Контекст.Параметры.ОбъектУчета);
	Иначе
		ПослеПереформирования(РезультатПереформирования, ПараметрыПереформирования);
	КонецЕсли;

КонецПроцедуры

Процедура ПолучитьДопДанныеОбъектаУчета(Оповещение, РезультатПереформирования, ОбъектУчета)
	
	ПараметрыОткрытия = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыПроблемПриОбработкеДокументов();
	ПараметрыОткрытия.АдресСведенийОбОшибках = ПоместитьВоВременноеХранилище(
		РезультатПереформирования.РезультатДействийПоЭДО.ОшибкиФормирования);
	ПараметрыОткрытия.СписокДокументовКОтправке.Добавить(ОбъектУчета); 
	
	ПоказатьПроблемыПриОбработкеДокументов(Оповещение, ПараметрыОткрытия);
		
КонецПроцедуры

// Анализирует выбранные пользователем допольнительные данные, повторно вызывает метод переформирования документа.
// 
// Параметры:
//  ДопДанные - См. ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  Результат - Структура:
//   * КонтекстДиагностики - См. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//   * Контекст - Структура:
//    ** ОповещениеОЗавершении - ОписаниеОповещения
//    ** Параметры - См. ИнтерфейсДокументовЭДО.ПараметрыПереформированияДокумента
//    ** ПараметрыДействийПоЭДО - См. ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
Процедура ПослеПолученияДопДанныхПриПереформировании(ДопДанные, Результат) Экспорт

	Если ДопДанные <> Неопределено Тогда
		
		Результат.Контекст.Параметры.Вставить("ДопДанные", ДопДанные.ДополнительныеДанныеОбъектов.Получить(Результат.Контекст.Параметры.ОбъектУчета));	
		
		Если ЗначениеЗаполнено(ДопДанные.МаршрутыПодписанияОбъектов) Тогда
			Результат.Контекст.Параметры.ПараметрыДействийПоЭДО.МаршрутыПодписанияОбъектов 
				= ДопДанные.МаршрутыПодписанияОбъектов;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДопДанные.ПодписантыОбъектов) Тогда
			Результат.Контекст.Параметры.ПараметрыДействийПоЭДО.ПодписантыОбъектов = ДопДанные.ПодписантыОбъектов;		
		КонецЕсли;
	
	Иначе
		Возврат;
	КонецЕсли;
	 
	РезультатПереформирования = ИнтерфейсДокументовЭДОВызовСервера.ПереформироватьДокумент(Результат.Контекст.Параметры, Результат.КонтекстДиагностики);
	
	Если РезультатПереформирования.ЕстьОшибки Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеПолученияДопДанныхПриПереформировании", ЭтотОбъект, Результат);
		ПолучитьДопДанныеОбъектаУчета(Оповещение, РезультатПереформирования, Результат.Контекст.Параметры.ОбъектУчета);
	Иначе
		ПослеПереформирования(РезультатПереформирования, Результат);
	КонецЕсли;
	
КонецПроцедуры

// Формирует результат переформирования, вызывает обработку оповещения, если документ уже был отправлен и требуется
// аннулирование - запускает выполнение действий подписания, подготовки к отправке и отправки.
// 
// Параметры:
//  РезультатПереформирования - См. ИнтерфейсДокументовЭДО.НовыйРезультатПереформированияДокументов
//  Результат - Структура:
//   * КонтекстДиагностики - См. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//   * Контекст - Структура:
//    ** ОповещениеОЗавершении - ОписаниеОповещения
//    ** Параметры - См. ИнтерфейсДокументовЭДО.ПараметрыПереформированияДокумента
//    ** ПараметрыДействийПоЭДО - См. ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
Процедура ПослеПереформирования(РезультатПереформирования, Результат)

	Если Результат.Контекст.Параметры.ПараметрыДействийПоЭДО.НаборДействий.Получить(ПредопределенноеЗначение(
			"Перечисление.ДействияПоЭДО.Аннулировать")) <> Неопределено Тогда
		Результат.Контекст.Параметры.ПараметрыДействийПоЭДО.НаборДействий.Вставить(ПредопределенноеЗначение(
			"Перечисление.ДействияПоЭДО.Подписать"), Истина);
		Результат.Контекст.Параметры.ПараметрыДействийПоЭДО.НаборДействий.Вставить(ПредопределенноеЗначение(
			"Перечисление.ДействияПоЭДО.ПодготовитьКОтправке"), Истина);
		Результат.Контекст.Параметры.ПараметрыДействийПоЭДО.НаборДействий.Вставить(ПредопределенноеЗначение(
			"Перечисление.ДействияПоЭДО.Отправить"), Истина);
		Результат.Контекст.Параметры.ПараметрыДействийПоЭДО.ОбъектыДействий.ЭлектронныеДокументы.Добавить(Результат.Контекст.Параметры.ЭлектронныйДокумент);
		
		НачатьВыполнениеДействийПоЭДО(Неопределено, Результат.Контекст.Параметры.ПараметрыДействийПоЭДО);
	КонецЕсли;
	
	Результат.Вставить("Переформирован", РезультатПереформирования.СформированныеДокументы.Количество() <> 0);
	Результат.Вставить("СформированныеДокументы", РезультатПереформирования.СформированныеДокументы);
	Результат.Вставить("СформированоИсправление", Ложь);
	Если РезультатПереформирования.РезультатДействийПоЭДО.Итог.ОбработаноПоДействиям.Получить(
		ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.СформироватьИсправление")) <> Неопределено Тогда
		Результат.СформированоИсправление = Истина;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Результат.Контекст.ОповещениеОЗавершении, Результат);
	
КонецПроцедуры

#Область ИспользоватьПрочтениеДокументовЭДО

Процедура ПометитьКакПрочтенные(Список) Экспорт
	
	Сообщения = ПолучитьВыбранныеДокументы(Список);
	КоличествоСообщений = Сообщения.Количество();
	Если Сообщения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЧислоПрочтенных = 0;
	ВыделенныеСтроки = Список.ВыделенныеСтроки;
	Для каждого Ссылка Из ВыделенныеСтроки Цикл
		
		Если ТипЗнч(Ссылка) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			
			Прочтен = Список.ДанныеСтроки(Ссылка).Прочтен;
			
			Если Прочтен Тогда
				
				ЧислоПрочтенных = ЧислоПрочтенных + 1;
				
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПоставитьПометкуПрочтения = Истина;	
	Если КоличествоСообщений = ЧислоПрочтенных Тогда
		ПоставитьПометкуПрочтения = Ложь;
	КонецЕсли;	
	
	Если КоличествоСообщений > 1 Тогда
		Если ПоставитьПометкуПрочтения Тогда
			Состояние(НСтр("ru = 'Документы помечаются как прочтенные. Пожалуйста подождите...'"));
		Иначе
			Состояние(НСтр("ru = 'Снимается пометка прочтенности. Пожалуйста подождите...'"));
		КонецЕсли;	
	КонецЕсли;
	
	ОповеститьОПрочтении = РаботаСПрочтениямиВызовСервера.УстановитьСвойствоПрочтен(Сообщения, ПоставитьПометкуПрочтения);
	
	Если Не ОповеститьОПрочтении Тогда
		Возврат;
	КонецЕсли;

	Если ПоставитьПометкуПрочтения Тогда
		ШаблонТекста = НСтр("ru = 'Документы помечены как прочтенные (%1)'");
	Иначе
		ШаблонТекста = НСтр("ru = 'Сняты пометки прочтенности документов (%1)'");
	КонецЕсли;

	ТекстСостояния = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, КоличествоСообщений);
	Состояние(ТекстСостояния);

	Список.Обновить();

КонецПроцедуры 

Функция ПолучитьВыбранныеДокументы(Список)
	
	Результат = Новый Массив;
	
	ВыделенныеСтроки = Список.ВыделенныеСтроки;
	Для каждого Строка Из ВыделенныеСтроки Цикл
		ДанныеСтроки = ПолучитьДанныеТекущейСтрокиСписка(Список, Строка);
		Если ДанныеСтроки <> Неопределено Тогда
			ДокументСсылка = ДанныеСтроки.ЭлектронныйДокумент;
			Результат.Добавить(ДокументСсылка);
		КонецЕсли;
	КонецЦикла;
	
	Если Результат.Количество() = 0 Тогда
		ТекущиеДанные = ПолучитьДанныеТекущейСтрокиСписка(Список, Список.ТекущаяСтрока);
		Если ТекущиеДанные <> Неопределено Тогда
			ДокументСсылка = ТекущиеДанные.ЭлектронныйДокумент;
			Результат.Добавить(ДокументСсылка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДанныеТекущейСтрокиСписка(Список, Строка)
		
	Если Строка = Неопределено Или ТипЗнч(Строка) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат Неопределено;
	КонецЕсли;

	Возврат Список.ДанныеСтроки(Строка);
	
КонецФункции

#КонецОбласти

#Область ПереопределениеМеханизмовБСП

Процедура СформироватьЭДИзФормыПечатиБСП(Форма, Параметры = Неопределено)
	
	ОбъектыПечати = Форма.ОбъектыПечати.ВыгрузитьЗначения();

	Команда = ИнтерфейсДокументовЭДОВызовСервера.КомандаПечатиОбъекта(ОбъектыПечати[0], Форма.НастройкиПечатныхФорм[0].ИмяМакета);
	ВидВнутреннегоДокумента = ИнтерфейсДокументовЭДОВызовСервера.НайтиСоздатьВидВнутреннегоДокумента(ОбъектыПечати[0], Команда);
	
	Если Не ЗначениеЗаполнено(Команда) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполненияДействийПоЭДО = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	
	Если ЗначениеЗаполнено(Параметры) Тогда
		
		КлючиНастроекОбъектов = Новый Соответствие;
		КлючНастройки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "КлючНастройки");
		
		ПодписантыОбъектов = Новый Соответствие;
		Подписанты = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "Подписанты");
		
		МаршрутыПодписанияОбъектов = Новый Соответствие;
		МаршрутПодписания = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "Маршрут");
		
		Для Каждого ОбъектПечати Из ОбъектыПечати Цикл
			
			Если ЗначениеЗаполнено(КлючНастройки) Тогда
				МассивКлючейНастроек = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(КлючНастройки);
				КлючиНастроекОбъектов.Вставить(ОбъектПечати, МассивКлючейНастроек);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Подписанты) Тогда
				ПодписантыОбъектов = Новый Соответствие;
				ПодписантыОбъектов.Вставить(ОбъектПечати, Подписанты);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(МаршрутПодписания) Тогда
				МаршрутыПодписанияОбъектов = Новый Соответствие;
				МаршрутыПодписанияОбъектов.Вставить(ОбъектПечати, МаршрутПодписания);
			КонецЕсли;
			
		КонецЦикла;		
		
	КонецЕсли;
	
	НаборДействий = Новый Соответствие;	
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Сформировать"));
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Подписать"));				
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ПодготовитьКОтправке"));
		
	ПараметрыВыполненияДействийПоЭДО.НаборДействий = НаборДействий;
	ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ОбъектыУчета = ОбъектыПечати;
	ПараметрыВыполненияДействийПоЭДО.МаршрутыПодписанияОбъектов = МаршрутыПодписанияОбъектов;
	ПараметрыВыполненияДействийПоЭДО.ПодписантыОбъектов = ПодписантыОбъектов;
	ПараметрыВыполненияДействийПоЭДО.КлючиНастроекОбъектов = КлючиНастроекОбъектов;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ОбъектыУчета", ОбъектыПечати);
	ПараметрыОповещения.Вставить("ПараметрыВыполненияДействийПоЭДО", ПараметрыВыполненияДействийПоЭДО);	
	ПараметрыОповещения.Вставить("ОповещениеУспешногоЗавершения",
		Новый ОписаниеОповещения("ЗавершениеФормированияЭлектронныхДокументовСобытие", ЭтотОбъект));

	Оповещение = Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ЭтотОбъект, ПараметрыОповещения);
	
	НачатьВыполнениеДействийПоЭДО(Оповещение, ПараметрыВыполненияДействийПоЭДО);

КонецПроцедуры

#КонецОбласти

#Область ДействияПоИнтеграциямЭДО

// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - Строка - идентификатор интеграции ЭДО.
//  * Значение - ОбщийМодуль
Функция МенеджерыДействийЭДО()
	
	МенеджерыДействийЭДО = Новый Соответствие; // см. МенеджерыДействийЭДО
	
	ПриОпределенииМенеджеровДействийЭДО(МенеджерыДействийЭДО);
	
	Возврат МенеджерыДействийЭДО;
	
КонецФункции

// Заполнение менеджеров для обработки действий по ЭДО.
// Менеджер должен поддерживать методы:
// * ПриОпределенииМенеджеровДействийЭДО
// * ОбработатьРезультатВыполненияДействийЭДО
//
// Параметры:
//  МенеджерыДействийЭДО - см. МенеджерыДействийЭДО
Процедура ПриОпределенииМенеджеровДействийЭДО(МенеджерыДействийЭДО)
	
	ЭлектронныеДокументыЭДОКлиент.ПриОпределенииМенеджеровДействийЭДО(МенеджерыДействийЭДО);
	
	Если ЕстьИнтеграцияОблачногоЭДО() Тогда
		ОбщийМодульИнтеграцияОблачногоЭДОКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтеграцияОблачногоЭДОКлиент");
		ОбщийМодульИнтеграцияОблачногоЭДОКлиент.ПриОпределенииМенеджеровДействийЭДО(МенеджерыДействийЭДО);
	КонецЕсли;
	
КонецПроцедуры

// Возвращаемое значение:
//  Булево -  Есть интеграция облачного ЭДО
Функция ЕстьИнтеграцияОблачногоЭДО()
	Возврат ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами.ИнтеграцияОблачногоЭДО");
КонецФункции

// Возвращает пустой контекст действий по ЭДО.
// 
// Возвращаемое значение:
//  Структура:
//  * ИтогВыполненияДействий - См. ИнтерфейсДокументовЭДОКлиентСервер.НовыйИтогВыполненияДействийПоЭДО
//  * ОповещениеОЗавершении - ОписаниеОповещения
//  * КонтекстДиагностики - Неопределено
//                        - См. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//  * КонтекстОжиданияОперации - Неопределено
//                             - См. ОжиданиеОперацийБЭДКлиент.НовыйКонтекст
//  * ПаролиСертификатов - См. КриптографияБЭДКлиент.НовыеПаролиСертификатов
//  * Сообщения - ФиксированныйМассив из СообщениеПользователю - ключ возвращаемого значения см. ДлительныеОперации.ВыполнитьПроцедуру
//  * ПараметрыВыполненияДействий - См. ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  * СостоянияВыполненияДействий - См. НовыеСостоянияВыполненияДействийПоИнтеграциямЭДО
//  * ОшибкиФормирования  - Массив из См. НовоеОписаниеОшибкиФормирования
//  * ДокументыДляОбработкиИзвещений - Соответствие из КлючИЗначение:
//  ** Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  ** Значение - Булево
//  * ДокументыДляОбработкиДополнительныхСведений - Соответствие из КлючИЗначение:
//  ** Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  ** Значение - Булево
Функция НовыйКонтекстДействийПоЭДО()
	Контекст = Новый Структура;
	Контекст.Вставить("ИтогВыполненияДействий", ИнтерфейсДокументовЭДОКлиентСервер.НовыйИтогВыполненияДействийПоЭДО());
	Контекст.Вставить("ОповещениеОЗавершении", Новый ОписаниеОповещения);
	Контекст.Вставить("КонтекстДиагностики", Неопределено);
	Контекст.Вставить("КонтекстОжиданияОперации", Неопределено);
	Контекст.Вставить("ПаролиСертификатов", КриптографияБЭДКлиент.НовыеПаролиСертификатов());
	Контекст.Вставить("Сообщения", Новый ФиксированныйМассив(Новый Массив));
	Контекст.Вставить("ПараметрыВыполненияДействий", Новый Структура);
	Контекст.Вставить("СостоянияВыполненияДействий", НовыеСостоянияВыполненияДействийПоИнтеграциямЭДО());
	Контекст.Вставить("ОшибкиФормирования", Новый Массив);
	Контекст.Вставить("ДокументыДляОбработкиИзвещений", Новый Соответствие);
	Контекст.Вставить("ДокументыДляОбработкиДополнительныхСведений", Новый Соответствие);
	Возврат Контекст;
КонецФункции

// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - Строка - идентификатор менеджера действий интеграции ЭДО.
//  * Значение - Произвольный
Функция НовыеСостоянияВыполненияДействийПоИнтеграциямЭДО()
	Возврат Новый Соответствие;
КонецФункции

// Выполняет действия по ЭДО после получения отпечатков.
// 
// Параметры:
//  ОтпечаткиСертификатов - см. КриптографияБЭДКлиентСервер.НовыеРезультатыПолученияОтпечатков
//  КонтекстДействийПоЭДО - см. НовыйКонтекстДействийПоЭДО
Процедура ВыполнитьДействияПоЭДОПослеПолученияОтпечатков(ОтпечаткиСертификатов, КонтекстДействийПоЭДО) Экспорт
	
	КонтекстДействийПоЭДО.ПараметрыВыполненияДействий.ОтпечаткиСертификатов = ОтпечаткиСертификатов;
	
	ВыполнитьДействияПоЭДО(КонтекстДействийПоЭДО);
	
КонецПроцедуры

// Выполняет действия по ЭДО.
// 
// Параметры:
//  КонтекстДействийПоЭДО - см. НовыйКонтекстДействийПоЭДО
//
Асинх Процедура ВыполнитьДействияПоЭДО(КонтекстДействийПоЭДО)
	
	ПараметрыВыполненияДействий = КонтекстДействийПоЭДО.ПараметрыВыполненияДействий;
	Если ИнтерфейсДокументовЭДОКлиентСервер.ОтсутствуютОбъектыДействий(ПараметрыВыполненияДействий.ОбъектыДействий) Тогда
		ЗавершитьВыполнениеДействийПоЭДО(КонтекстДействийПоЭДО);
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС") Тогда
		МодульЭлектронноеАктированиеЕИСГИСНРКлиент 
			= ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектронноеАктированиеЕИСГИСНРКлиент");
		Результат = Ждать МодульЭлектронноеАктированиеЕИСГИСНРКлиент.НачалоОперацииЛогированияЭДО(
			ПараметрыВыполненияДействий);
		Если НЕ Результат Тогда
			ЗавершитьВыполнениеДействийПоЭДО(КонтекстДействийПоЭДО);
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ДлительнаяОперация = ИнтерфейсДокументовЭДОВызовСервера.ВыполнитьДействияПоИнтеграциямЭДОВФоне(
		ПараметрыВыполненияДействий);
	
	Оповещение = Новый ОписаниеОповещения("ПродолжитьВыполнениеДействийПоЭДОПослеДлительнойОперации",
		ИнтерфейсДокументовЭДОКлиент, КонтекстДействийПоЭДО);
	
	ОжидатьЗавершениеДлительнойОперации(ДлительнаяОперация, Оповещение);
	
КонецПроцедуры

// Параметры:
//  ДлительнаяОперация    - См. ДлительныеОперации.ВыполнитьФункцию
//  КонтекстДействийПоЭДО - См. НовыйКонтекстДействийПоЭДО
Процедура ПродолжитьВыполнениеДействийПоЭДОПослеДлительнойОперации(ДлительнаяОперация, КонтекстДействийПоЭДО) Экспорт
	
	Если КонтекстДействийПоЭДО.КонтекстОжиданияОперации <> Неопределено
		И Не ОжиданиеОперацийБЭДКлиент.ОперацияВыполняется(КонтекстДействийПоЭДО.КонтекстОжиданияОперации) Тогда
		Возврат;
	КонецЕсли;
	
	КонтекстДействийПоЭДО.Сообщения = ДлительнаяОперация.Сообщения;
	
	АдресРезультата = АдресРезультатаДлительнойОперации(ДлительнаяОперация, КонтекстДействийПоЭДО.КонтекстДиагностики);
	Если ПустаяСтрока(АдресРезультата) Тогда
		ЗавершитьВыполнениеДействийПоЭДО(КонтекстДействийПоЭДО);
		Возврат;
	КонецЕсли;
	
	РезультатыПоИнтеграциямЭДО = ИнтерфейсДокументовЭДОВызовСервера.РезультатыВыполненияДействийПоИнтеграциямЭДОДляКлиента(
		АдресРезультата);
	
	Если Не ЗначениеЗаполнено(РезультатыПоИнтеграциямЭДО) Тогда
		ЗавершитьВыполнениеДействийПоЭДО(КонтекстДействийПоЭДО);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПродолжитьВыполнениеДействийПоЭДОПослеОбработкиРезультата",
		ИнтерфейсДокументовЭДОКлиент, КонтекстДействийПоЭДО);
	
	НачатьОбработкуРезультатовВыполненияДействийПоИнтеграциямЭДО(Оповещение, РезультатыПоИнтеграциямЭДО, 
		КонтекстДействийПоЭДО.СостоянияВыполненияДействий, КонтекстДействийПоЭДО.ПараметрыВыполненияДействий.НаборДействий,
		КонтекстДействийПоЭДО.ПаролиСертификатов);
	
КонецПроцедуры

// Параметры:
//  РезультатОбработки - см. НовыйРезультатОбработкиВыполненияДействийПоЭДО
//  КонтекстДействийПоЭДО - см. НовыйКонтекстДействийПоЭДО
//
Процедура ПродолжитьВыполнениеДействийПоЭДОПослеОбработкиРезультата(РезультатОбработки, КонтекстДействийПоЭДО) Экспорт
	
	ИнтерфейсДокументовЭДОКлиентСервер.ДополнитьИтогВыполненияДействийПоЭДО(
		КонтекстДействийПоЭДО.ИтогВыполненияДействий, РезультатОбработки.ИтогВыполненияДействий);
	ОбработкаНеисправностейБЭДКлиент.ДополнитьКонтекстДиагностики(
		КонтекстДействийПоЭДО.КонтекстДиагностики, РезультатОбработки.КонтекстДиагностики);
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(КонтекстДействийПоЭДО.ДокументыДляОбработкиИзвещений,
		РезультатОбработки.ДокументыДляОбработкиИзвещений, Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(КонтекстДействийПоЭДО.ДокументыДляОбработкиДополнительныхСведений,
		РезультатОбработки.ДокументыДляОбработкиДополнительныхСведений, Ложь);
	КонтекстДействийПоЭДО.СостоянияВыполненияДействий = РезультатОбработки.СостоянияВыполненияДействий;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(КонтекстДействийПоЭДО.ОшибкиФормирования,
		РезультатОбработки.ОшибкиФормирования);
	
	Если РезультатОбработки.ПродолжитьВыполнениеДействий Тогда
		
		ПродолжитьВыполнениеДействийПоЭДО(РезультатОбработки.ПараметрыПродолженияДействий, КонтекстДействийПоЭДО);
		
	ИначеЕсли ЕстьДокументыДляОбработкиДополнительныхСведений(КонтекстДействийПоЭДО.ДокументыДляОбработкиДополнительныхСведений) Тогда
		
		ВыполнитьДействияПоДополнительнымСведениямДокументовЭДО(КонтекстДействийПоЭДО);
		
	ИначеЕсли ЗначениеЗаполнено(КонтекстДействийПоЭДО.ДокументыДляОбработкиИзвещений) Тогда
		
		ВыполнитьДействияПоИзвещениямДокументовЭДО(КонтекстДействийПоЭДО);
		
	Иначе
		
		ЗавершитьВыполнениеДействийПоЭДО(КонтекстДействийПоЭДО);
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ПараметрыПродолженияДействий - см. НовыеПараметрыПродолженияВыполненияДействийПоИнтеграциямЭДО
//  КонтекстДействийПоЭДО   - См. НовыйКонтекстДействийПоЭДО
Процедура ПродолжитьВыполнениеДействийПоЭДО(ПараметрыПродолженияДействий, КонтекстДействийПоЭДО)
	
	ДлительнаяОперация = ИнтерфейсДокументовЭДОВызовСервера.ПродолжитьВыполнениеДействийПоИнтеграциямЭДОВФоне(
		ПараметрыПродолженияДействий, КонтекстДействийПоЭДО.ПараметрыВыполненияДействий);
	
	Оповещение = Новый ОписаниеОповещения("ПродолжитьВыполнениеДействийПоЭДОПослеДлительнойОперации",
		ИнтерфейсДокументовЭДОКлиент, КонтекстДействийПоЭДО);
	
	ОжидатьЗавершениеДлительнойОперации(ДлительнаяОперация, Оповещение);
	
КонецПроцедуры

// Параметры:
//  ПараметрыПродолженияДействий - см. НовыеПараметрыПродолженияВыполненияДействийПоИнтеграциямЭДО
//  КонтекстДействийПоЭДО   - См. НовыйКонтекстДействийПоЭДО
Процедура ВыполнитьДействияПоИзвещениямДокументовЭДО(КонтекстДействийПоЭДО)
	
	ПараметрыВыполнения = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	ПараметрыВыполнения.ОбъектыДействий.ЭлектронныеДокументы = ОбщегоНазначенияБЭДКлиент.ВыгрузитьКолонку(
		КонтекстДействийПоЭДО.ДокументыДляОбработкиИзвещений, "Ключ");
	ПараметрыВыполнения.ОбработатьТолькоИзвещения = Истина;
	
	ПараметрыВыполнения.ОтпечаткиСертификатов = КонтекстДействийПоЭДО.ПараметрыВыполненияДействий.ОтпечаткиСертификатов;
	ПараметрыВыполнения.РасшифрованныеМаркеры = КонтекстДействийПоЭДО.ПараметрыВыполненияДействий.РасшифрованныеМаркеры;
	
	НаборДействий = ПараметрыВыполнения.НаборДействий;
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий,
		ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.Подписать"));
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий,
		ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.ПодготовитьКОтправке"));
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий,
		ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.Отправить"));
	
	КонтекстДействийПоЭДО.ПараметрыВыполненияДействий = ПараметрыВыполнения;
	КонтекстДействийПоЭДО.СостоянияВыполненияДействий = НовыеСостоянияВыполненияДействийПоИнтеграциямЭДО();
	КонтекстДействийПоЭДО.ДокументыДляОбработкиИзвещений.Очистить();
	
	ВыполнитьДействияПоЭДО(КонтекстДействийПоЭДО);
	
КонецПроцедуры

// Параметры:
//  ПараметрыПродолженияДействий - см. НовыеПараметрыПродолженияВыполненияДействийПоИнтеграциямЭДО
//  КонтекстДействийПоЭДО   - См. НовыйКонтекстДействийПоЭДО
Процедура ВыполнитьДействияПоДополнительнымСведениямДокументовЭДО(КонтекстДействийПоЭДО)
	
	ДокументыДляОбработкиДополнительныхСведений = КонтекстДействийПоЭДО.ДокументыДляОбработкиДополнительныхСведений;
	НаборДокументов = ВыгрузитьДокументыДляОбработкиДополнительныхСведений(КонтекстДействийПоЭДО.ДокументыДляОбработкиДополнительныхСведений);
	Для Каждого ДокументДляОбработки Из НаборДокументов Цикл
		ДокументыДляОбработкиДополнительныхСведений.Вставить(ДокументДляОбработки, Ложь);
	КонецЦикла;
	
	ПараметрыВыполнения = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	ПараметрыВыполнения.ОбъектыДействий.ЭлектронныеДокументы = НаборДокументов;
	
	ПараметрыВыполнения.ОтпечаткиСертификатов = КонтекстДействийПоЭДО.ПараметрыВыполненияДействий.ОтпечаткиСертификатов;
	ПараметрыВыполнения.РасшифрованныеМаркеры = КонтекстДействийПоЭДО.ПараметрыВыполненияДействий.РасшифрованныеМаркеры;
	
	ТекущийНаборДействий = КонтекстДействийПоЭДО.ПараметрыВыполненияДействий.НаборДействий;
	
	НаборДействий = ПараметрыВыполнения.НаборДействий;
	
	ДействиеПодписать = ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.Подписать");
	Если ИнтерфейсДокументовЭДОКлиентСервер.ЕстьДействие(ТекущийНаборДействий, ДействиеПодписать) Тогда
		ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ДействиеПодписать);
	КонецЕсли;
	
	ДействиеПодготовитьКОтправке = ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.ПодготовитьКОтправке");
	Если ИнтерфейсДокументовЭДОКлиентСервер.ЕстьДействие(ТекущийНаборДействий, ДействиеПодготовитьКОтправке) Тогда
		ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ДействиеПодготовитьКОтправке);
	КонецЕсли;
	
	ДействиеОтправить = ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.Отправить");
	Если ИнтерфейсДокументовЭДОКлиентСервер.ЕстьДействие(ТекущийНаборДействий, ДействиеОтправить) Тогда
		ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ДействиеОтправить);
	КонецЕсли;
	
	КонтекстДействийПоЭДО.ПараметрыВыполненияДействий = ПараметрыВыполнения;
	КонтекстДействийПоЭДО.СостоянияВыполненияДействий = НовыеСостоянияВыполненияДействийПоИнтеграциямЭДО();
	
	ВыполнитьДействияПоЭДО(КонтекстДействийПоЭДО);
	
КонецПроцедуры

// Завершает выполнение действий по ЭДО.
// 
// Параметры:
//  КонтекстДействийПоЭДО - См. НовыйКонтекстДействийПоЭДО
//  РезультатДействийПоЭДО - См. ЭлектронныеДокументыЭДОВызовСервера.РезультатДействийПоЭДО
//
Процедура ЗавершитьВыполнениеДействийПоЭДО(КонтекстДействийПоЭДО, РезультатДействийПоЭДО = Неопределено)
	
	КонтекстОжиданияОперации = КонтекстДействийПоЭДО.КонтекстОжиданияОперации;
	
	Если КонтекстОжиданияОперации <> Неопределено Тогда
		ОжиданиеОперацийБЭДКлиент.ЗакрытьФормуОжидания(КонтекстОжиданияОперации);
		ОжиданиеОперацийБЭДКлиент.УстановитьОбработчикПрерывания(Неопределено, КонтекстОжиданияОперации);
	КонецЕсли;
	
	Для Каждого Сообщение Из КонтекстДействийПоЭДО.Сообщения Цикл
		Сообщение.Сообщить();
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("Итог", КонтекстДействийПоЭДО.ИтогВыполненияДействий);
	Результат.Вставить("ОшибкиФормирования", КонтекстДействийПоЭДО.ОшибкиФормирования);
	Результат.Вставить("КонтекстДиагностики", КонтекстДействийПоЭДО.КонтекстДиагностики);
	
	Если РезультатДействийПоЭДО <> Неопределено И РезультатДействийПоЭДО.Свойство("СвойстваПодписи") Тогда
		Результат.Вставить("СвойстваПодписи", РезультатДействийПоЭДО.СвойстваПодписи);
	КонецЕсли;
	
	Если РезультатДействийПоЭДО <> Неопределено И РезультатДействийПоЭДО.Свойство("ПодписанныеДанные") Тогда
		Результат.Вставить("ПодписанныеДанные", РезультатДействийПоЭДО.ПодписанныеДанные);
	КонецЕсли;
	
	Если РезультатДействийПоЭДО <> Неопределено
		И ЗначениеЗаполнено(РезультатДействийПоЭДО.ОшибкиФормирования) Тогда
		Результат.ОшибкиФормирования = РезультатДействийПоЭДО.ОшибкиФормирования;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС") Тогда
		ПараметрыВыполненияДействий = КонтекстДействийПоЭДО.ПараметрыВыполненияДействий;
		МодульЭлектронноеАктированиеЕИСГИСНРКлиент 
			= ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектронноеАктированиеЕИСГИСНРКлиент");
		МодульЭлектронноеАктированиеЕИСГИСНРКлиент.ОкончаниеОперацииЛогированияЭДО(
			ПараметрыВыполненияДействий,
			Результат);
	КонецЕсли;

	// См. НачатьВыполнениеДействийПоЭДО.ОповещениеОЗавершении
	ВыполнитьОбработкуОповещения(КонтекстДействийПоЭДО.ОповещениеОЗавершении, Результат);
	
КонецПроцедуры

// Параметры:
//  ДлительнаяОперация - См. ДлительныеОперации.ВыполнитьФункцию
//  Оповещение - ОписаниеОповещения
Процедура ОжидатьЗавершениеДлительнойОперации(ДлительнаяОперация, Оповещение)
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	
КонецПроцедуры

// Параметры:
//  ДлительнаяОперация    - См. ДлительныеОперации.ВыполнитьФункцию
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//
// Возвращаемое значение:
//  Строка - адрес временного хранилища
Функция АдресРезультатаДлительнойОперации(ДлительнаяОперация, КонтекстДиагностики)
		
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат "";
	ИначеЕсли ДлительнаяОперация.Статус <> "Выполнено" Тогда
		ТекстОшибки = НСтр("ru = 'Не удалось выполнить действия по ЭДО.'");
		ПодробныйТекстОшибки = ТекстОшибки;
		Если ЗначениеЗаполнено(ДлительнаяОперация.ПодробноеПредставлениеОшибки) Тогда
			ПодробныйТекстОшибки = ПодробныйТекстОшибки + Символы.ПС + ДлительнаяОперация.ПодробноеПредставлениеОшибки;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДлительнаяОперация.КраткоеПредставлениеОшибки) Тогда
			ТекстОшибки = ТекстОшибки + Символы.ПС + ДлительнаяОперация.КраткоеПредставлениеОшибки;
		КонецЕсли;
		Ошибка = ОбработкаНеисправностейБЭДКлиент.НоваяОшибка(НСтр("ru = 'Выполнение действий по ЭДО.'"),
			ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка(), ПодробныйТекстОшибки, ТекстОшибки);
		ПодсистемыБЭД = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД();
		ОбработкаНеисправностейБЭДКлиент.ДобавитьОшибку(КонтекстДиагностики, Ошибка,
			ПодсистемыБЭД.ОбменСКонтрагентами);
		Возврат "";
	КонецЕсли;
	
	Возврат ДлительнаяОперация.АдресРезультата;
	
КонецФункции

// Параметры:
//  ДокументыДляОбработкиДополнительныхСведений - Соответствие из КлючИЗначение:
//  * Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * Значение - Булево
// 
// Возвращаемое значение:
//  Булево
Функция ЕстьДокументыДляОбработкиДополнительныхСведений(ДокументыДляОбработкиДополнительныхСведений)
	
	Результат = Ложь;
	
	Если Не ЗначениеЗаполнено(ДокументыДляОбработкиДополнительныхСведений) Тогда
		Возврат Результат;
	КонецЕсли;
	
	НаборДокументов = ВыгрузитьДокументыДляОбработкиДополнительныхСведений(ДокументыДляОбработкиДополнительныхСведений);
	
	Результат = ЗначениеЗаполнено(НаборДокументов);
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ДокументыДляОбработкиДополнительныхСведений - Соответствие из КлючИЗначение:
//  * Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * Значение - Булево
// 
// Возвращаемое значение:
//  Массив из ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
Функция ВыгрузитьДокументыДляОбработкиДополнительныхСведений(ДокументыДляОбработкиДополнительныхСведений)
	
	НаборДокументов = Новый Массив; // См. ПодписанныеДокументыДляОбработкиДополнительныхСведений
	
	Для Каждого ДокументДляОбработки Из ДокументыДляОбработкиДополнительныхСведений Цикл
		
		Если ДокументДляОбработки.Значение Тогда
			НаборДокументов.Добавить(ДокументДляОбработки.Ключ);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НаборДокументов;
	
КонецФункции

// Параметры:
//  РезультатПрерывания - Булево
//  КонтекстДействийПоЭДО - см. НовыйКонтекстДействийПоЭДО
Процедура ЗавершитьВыполнениеДействийПоЭДОПослеПрерывания(РезультатПрерывания, КонтекстДействийПоЭДО) Экспорт
	
	КонтекстДействийПоЭДО.КонтекстОжиданияОперации.ОперацияВыполняется = Ложь;
	
	ЗавершитьВыполнениеДействийПоЭДО(КонтекстДействийПоЭДО);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаРезультатовДействийПоИнтеграциямЭДО

// Возвращаемое значение:
//  Структура:
//  * ОповещениеОЗавершении - ОписаниеОповещения
//  * РезультатыВыполненияДействий - см. ИнтерфейсДокументовЭДОВызовСервера.РезультатыВыполненияДействийПоИнтеграциямЭДОДляКлиента
//  * СостоянияВыполненияДействий - см. НовыеСостоянияВыполненияДействийПоИнтеграциямЭДО
//  * ИсходныйНаборДействийЭДО - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыйНаборДействийПоЭДО
//  * ПаролиСертификатов - см. КриптографияБЭДКлиент.НовыеПаролиСертификатов
//  * МенеджерыДействийЭДО - см. МенеджерыДействийЭДО
//  * ОбработанныеМенеджеры - Массив из Строка
//  * ИдентификаторМенеджера - Строка
//  * ИтогВыполненияДействий - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыйИтогВыполненияДействийПоЭДО
//  * ПродолжитьВыполнениеДействий - Булево
//  * ПараметрыПродолженияДействий - см. НовыеПараметрыПродолженияВыполненияДействийПоИнтеграциямЭДО
//  * ДокументыДляОбработкиИзвещений - Соответствие из КлючИЗначение:
//  ** Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  ** Значение - Булево
//  * ДокументыДляОбработкиДополнительныхСведений - Соответствие из КлючИЗначение:
//  ** Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  ** Значение - Булево
//  * КонтекстДиагностики - см. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//  * ОшибкиФормирования  - Массив из См. НовоеОписаниеОшибкиФормирования
Функция НовыйКонтекстОбработкиРезультатовВыполненияДействийПоИнтеграциямЭДО()
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", Новый ОписаниеОповещения);
	Контекст.Вставить("РезультатыВыполненияДействий", Новый Соответствие);
	Контекст.Вставить("СостоянияВыполненияДействий", НовыеСостоянияВыполненияДействийПоИнтеграциямЭДО());
	Контекст.Вставить("ИсходныйНаборДействийЭДО", ИнтерфейсДокументовЭДОКлиентСервер.НовыйНаборДействийПоЭДО());
	Контекст.Вставить("ПаролиСертификатов", КриптографияБЭДКлиент.НовыеПаролиСертификатов());
	Контекст.Вставить("МенеджерыДействийЭДО", МенеджерыДействийЭДО());
	Контекст.Вставить("ОбработанныеМенеджеры", Новый Массив);
	Контекст.Вставить("ИдентификаторМенеджера", "");
	Контекст.Вставить("ИтогВыполненияДействий", ИнтерфейсДокументовЭДОКлиентСервер.НовыйИтогВыполненияДействийПоЭДО());
	Контекст.Вставить("ПродолжитьВыполнениеДействий", Ложь);
	Контекст.Вставить("ПараметрыПродолженияДействий", НовыеПараметрыПродолженияВыполненияДействийПоИнтеграциямЭДО());
	Контекст.Вставить("ДокументыДляОбработкиИзвещений", Новый Соответствие);
	Контекст.Вставить("ДокументыДляОбработкиДополнительныхСведений", Новый Соответствие);
	Контекст.Вставить("КонтекстДиагностики", ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики());
	Контекст.Вставить("ОшибкиФормирования", Новый Массив);
	Возврат Контекст;
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * ИтогВыполненияДействий - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыйИтогВыполненияДействийПоЭДО
//  * СостоянияВыполненияДействий - см. НовыеСостоянияВыполненияДействийПоИнтеграциямЭДО
//  * ПродолжитьВыполнениеДействий - Булево
//  * ПараметрыПродолженияДействий - см. НовыеПараметрыПродолженияВыполненияДействийПоИнтеграциямЭДО
//  * ДокументыДляОбработкиИзвещений - Соответствие из КлючИЗначение:
//  ** Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  ** Значение - Булево
//  * ДокументыДляОбработкиДополнительныхСведений - Соответствие из КлючИЗначение:
//  ** Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  ** Значение - Булево
//  * КонтекстДиагностики - см. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//  * ОшибкиФормирования  - Массив из См. НовоеОписаниеОшибкиФормирования
Функция НовыйРезультатОбработкиВыполненияДействийПоЭДО()
	Результат = Новый Структура;
	Результат.Вставить("ИтогВыполненияДействий", ИнтерфейсДокументовЭДОКлиентСервер.НовыйИтогВыполненияДействийПоЭДО());
	Результат.Вставить("СостоянияВыполненияДействий", НовыеСостоянияВыполненияДействийПоИнтеграциямЭДО());
	Результат.Вставить("ПродолжитьВыполнениеДействий", Ложь);
	Результат.Вставить("ПараметрыПродолженияДействий", НовыеПараметрыПродолженияВыполненияДействийПоИнтеграциямЭДО());
	Результат.Вставить("ДокументыДляОбработкиИзвещений", Новый Соответствие);
	Результат.Вставить("ДокументыДляОбработкиДополнительныхСведений", Новый Соответствие);
	Результат.Вставить("КонтекстДиагностики", ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики());
	Результат.Вставить("ОшибкиФормирования", Новый Массив);
	Возврат Результат;
КонецФункции

// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - Строка - идентификатор менеджера действий интеграции ЭДО.
//  * Значение - Произвольный
Функция НовыеПараметрыПродолженияВыполненияДействийПоИнтеграциямЭДО()
	Возврат Новый Соответствие;
КонецФункции

// Параметры:
//  ОповещениеОЗавершении - ОписаниеОповещения - см. РезультатОбработкиВыполненияДействийПоИнтеграциямЭДО
//  РезультатыВыполненияДействий - см. ИнтерфейсДокументовЭДОВызовСервера.РезультатыВыполненияДействийПоИнтеграциямЭДОДляКлиента
//  СостоянияВыполненияДействий - см. НовыеСостоянияВыполненияДействийПоИнтеграциямЭДО
//  ИсходныйНаборДействийЭДО - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыйНаборДействийПоЭДО
//  ПаролиСертификатов - см. КриптографияБЭДКлиент.НовыеПаролиСертификатов
Процедура НачатьОбработкуРезультатовВыполненияДействийПоИнтеграциямЭДО(ОповещениеОЗавершении, РезультатыВыполненияДействий, СостоянияВыполненияДействий, ИсходныйНаборДействийЭДО, ПаролиСертификатов)
	
	КонтекстОбработки = НовыйКонтекстОбработкиРезультатовВыполненияДействийПоИнтеграциямЭДО();
	КонтекстОбработки.ОповещениеОЗавершении = ОповещениеОЗавершении;
	КонтекстОбработки.РезультатыВыполненияДействий = РезультатыВыполненияДействий;
	КонтекстОбработки.СостоянияВыполненияДействий = СостоянияВыполненияДействий;
	КонтекстОбработки.ИсходныйНаборДействийЭДО = ИсходныйНаборДействийЭДО;
	КонтекстОбработки.ПаролиСертификатов = ПаролиСертификатов;
	
	ОбработатьРезультатыВыполненияДействийПоИнтеграциямЭДО(КонтекстОбработки);
	
КонецПроцедуры

// Параметры:
//  КонтекстОбработки - см. НовыйКонтекстОбработкиРезультатовВыполненияДействийПоИнтеграциямЭДО
Процедура ОбработатьРезультатыВыполненияДействийПоИнтеграциямЭДО(КонтекстОбработки)
	
	МенеджерУстановлен = УстановитьМенеджерОбработкиРезультатовВыполненияДействийЭДО(КонтекстОбработки);
		
	Если Не МенеджерУстановлен Тогда
		ЗавершитьОбработкуРезультатовВыполненияДействийПоИнтеграциямЭДО(КонтекстОбработки);
		Возврат;
	КонецЕсли;
	
	ИдентификаторМенеджера = КонтекстОбработки.ИдентификаторМенеджера;
	МодульМенеджера = КонтекстОбработки.МенеджерыДействийЭДО[ИдентификаторМенеджера];
	РезультатВыполненияДействий = КонтекстОбработки.РезультатыВыполненияДействий[ИдентификаторМенеджера];
	СостояниеВыполненияДействий = КонтекстОбработки.СостоянияВыполненияДействий[ИдентификаторМенеджера];
	ПаролиСертификатов = КонтекстОбработки.ПаролиСертификатов;
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьРезультатыВыполненияДействийПослеОбработкиПоИнтеграцииЭДО",
		ИнтерфейсДокументовЭДОКлиент, КонтекстОбработки);
	
	МодульМенеджера.ОбработатьРезультатВыполненияДействийЭДО(Оповещение, РезультатВыполненияДействий, СостояниеВыполненияДействий,
		КонтекстОбработки.ИсходныйНаборДействийЭДО, ПаролиСертификатов);
	
КонецПроцедуры

// Параметры:
//  РезультатОбработкиПоИнтеграцииЭДО - см. НовыйРезультатОбработкиДействийИнтеграцииЭДО
//  КонтекстОбработки - см. НовыйКонтекстОбработкиРезультатовВыполненияДействийПоИнтеграциямЭДО
Процедура ОбработатьРезультатыВыполненияДействийПослеОбработкиПоИнтеграцииЭДО(РезультатОбработкиПоИнтеграцииЭДО, КонтекстОбработки) Экспорт
	
	ОбработкаНеисправностейБЭДКлиент.ДополнитьКонтекстДиагностики(
		КонтекстОбработки.КонтекстДиагностики, РезультатОбработкиПоИнтеграцииЭДО.КонтекстДиагностики);
	
	ИнтерфейсДокументовЭДОКлиентСервер.ДополнитьИтогВыполненияДействийПоЭДО(
		КонтекстОбработки.ИтогВыполненияДействий,
		РезультатОбработкиПоИнтеграцииЭДО.ИтогВыполненияДействий);
	
	ИдентификаторМенеджера = КонтекстОбработки.ИдентификаторМенеджера;
	
	КонтекстОбработки.СостоянияВыполненияДействий.Вставить(
		ИдентификаторМенеджера, РезультатОбработкиПоИнтеграцииЭДО.СостояниеВыполненияДействий);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		КонтекстОбработки.ОшибкиФормирования,
		РезультатОбработкиПоИнтеграцииЭДО.ОшибкиФормирования);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(
		КонтекстОбработки.ДокументыДляОбработкиИзвещений,
		РезультатОбработкиПоИнтеграцииЭДО.ДокументыДляОбработкиИзвещений, Истина);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(
		КонтекстОбработки.ДокументыДляОбработкиДополнительныхСведений,
		РезультатОбработкиПоИнтеграцииЭДО.ДокументыДляОбработкиДополнительныхСведений, Истина);
	
	Если РезультатОбработкиПоИнтеграцииЭДО.ПродолжитьВыполнениеДействий Тогда
		КонтекстОбработки.ПродолжитьВыполнениеДействий = Истина;
		КонтекстОбработки.ПараметрыПродолженияДействий.Вставить(
			ИдентификаторМенеджера, РезультатОбработкиПоИнтеграцииЭДО.ПараметрыПродолженияДействий);
	КонецЕсли;
	
	ОбработатьРезультатыВыполненияДействийПоИнтеграциямЭДО(КонтекстОбработки);
	
КонецПроцедуры

// Параметры:
//  КонтекстОбработки - см. НовыйКонтекстОбработкиРезультатовВыполненияДействийПоИнтеграциямЭДО
Процедура ЗавершитьОбработкуРезультатовВыполненияДействийПоИнтеграциямЭДО(КонтекстОбработки)
	
	РезультатОбработки = НовыйРезультатОбработкиВыполненияДействийПоЭДО();
	РезультатОбработки.ИтогВыполненияДействий = КонтекстОбработки.ИтогВыполненияДействий;
	РезультатОбработки.СостоянияВыполненияДействий = КонтекстОбработки.СостоянияВыполненияДействий;
	РезультатОбработки.ПродолжитьВыполнениеДействий = КонтекстОбработки.ПродолжитьВыполнениеДействий;
	РезультатОбработки.ПараметрыПродолженияДействий = КонтекстОбработки.ПараметрыПродолженияДействий;
	РезультатОбработки.КонтекстДиагностики = КонтекстОбработки.КонтекстДиагностики;
	РезультатОбработки.ОшибкиФормирования = КонтекстОбработки.ОшибкиФормирования;
	РезультатОбработки.ДокументыДляОбработкиИзвещений = КонтекстОбработки.ДокументыДляОбработкиИзвещений;
	РезультатОбработки.ДокументыДляОбработкиДополнительныхСведений = КонтекстОбработки.ДокументыДляОбработкиДополнительныхСведений;
	
	// См. НачатьОбработкуРезультатовВыполненияДействийПоИнтеграциямЭДО.ОповещениеОЗавершении
	ВыполнитьОбработкуОповещения(КонтекстОбработки.ОповещениеОЗавершении, РезультатОбработки);
	
КонецПроцедуры

// Параметры:
//  КонтекстОбработки - см. НовыйКонтекстОбработкиРезультатовВыполненияДействийПоИнтеграциямЭДО
Функция УстановитьМенеджерОбработкиРезультатовВыполненияДействийЭДО(КонтекстОбработки)
	
	МенеджерУстановлен = Ложь;
	
	ОбработанныеМенеджеры = КонтекстОбработки.ОбработанныеМенеджеры;
	
	Для Каждого РезультатВыполненияПоИнтеграцииЭДО Из КонтекстОбработки.РезультатыВыполненияДействий Цикл
		
		ИдентификаторМенеджера = РезультатВыполненияПоИнтеграцииЭДО.Ключ;
		Если ОбработанныеМенеджеры.Найти(ИдентификаторМенеджера) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОбработанныеМенеджеры.Добавить(ИдентификаторМенеджера);
		
		РезультатВыполненияДействий = РезультатВыполненияПоИнтеграцииЭДО.Значение;
		Если РезультатВыполненияДействий = Неопределено Тогда
			ВидОперации = НСтр("ru = 'Выполнение действий по ЭДО.'");
			ТекстСообщения = НСтр("ru = 'При выполнении действий по ЭДО возникла неизвестная ошибка.'");
			Ошибка = ОбработкаНеисправностейБЭДКлиент.НоваяОшибка(ВидОперации,
				ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка(),
				ТекстСообщения, ТекстСообщения);
			ОбработкаНеисправностейБЭДКлиент.ДобавитьОшибку(КонтекстОбработки.КонтекстДиагностики, Ошибка,
				ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами);
			Продолжить;
		КонецЕсли;
		
		КонтекстОбработки.ИдентификаторМенеджера = ИдентификаторМенеджера;
		МенеджерУстановлен = Истина;
		Прервать;
		
	КонецЦикла;
	
	Возврат МенеджерУстановлен;
	
КонецФункции

#КонецОбласти

#Область ИнтеграцияСИнтерфейсомУчетныхДокументов

Процедура ОбновитьПиктограммуОповещенияЭДО(Форма, МестоРазмещенияКоманд = Неопределено)
	
	КартинкаПодменюЭДО = БиблиотекаКартинок.ЭмблемаСервиса1СЭДО;
	Если ОповещенияОСобытияхЭДОКлиент.ЕстьНовыеДокументы() Тогда
		КартинкаПодменюЭДО = БиблиотекаКартинок.ВосклицательныйЗнакКрасный;
	КонецЕсли;
	ОбновитьОтображениеНовыхЭД(Форма, КартинкаПодменюЭДО, МестоРазмещенияКоманд);

КонецПроцедуры

// Обновление отображения новых электронных документов.
//
// Параметры:
//  Форма					 - Форма - форма отображения.
//  КартинкаЭДО				 - Картинка - изображение оповещения.
//  МестоРазмещенияКоманд	 - Массив, ЭлементФормы - место размещения команд.
//
Процедура ОбновитьОтображениеНовыхЭД(Форма, КартинкаЭДО, МестоРазмещенияКоманд)
	
	Если Не МестоРазмещенияКоманд = Неопределено Тогда
		
		Если ТипЗнч(МестоРазмещенияКоманд) = Тип("Массив") Тогда
			Для Каждого ЭлементМассива Из МестоРазмещенияКоманд Цикл
				ОбновитьКартинкуЭДО(Форма, КартинкаЭДО, ЭлементМассива);
			КонецЦикла;
			
		Иначе
			ОбновитьКартинкуЭДО(Форма, КартинкаЭДО, МестоРазмещенияКоманд);
			
		КонецЕсли;
		
	Иначе
		
		Элементы = Форма.Элементы;
		
		ПодменюЭДО = ПодменюЭДОФормы(Элементы);
		Если ПодменюЭДО = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ОбновитьКартинкуЭДО(Форма, КартинкаЭДО, ПодменюЭДО);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПодменюЭДОФормы(ЭлементыФормы)
	
	КомандыЭДО = ЭлементыФормы.Найти("ФормаКоманднаяПанельКомандыЭДО");
	
	Возврат КомандыЭДО;
	
КонецФункции

Процедура ОбновитьКартинкуЭДО(Форма, КартинкаЭДО, МестоРазмещенияКоманд)
	
	ПодменюЭДО = МестоРазмещенияКоманд;
	Если ПодменюЭДО.Вид = ВидГруппыФормы.ГруппаКнопок Или ПодменюЭДО.Картинка = КартинкаЭДО Тогда
		Возврат;
	КонецЕсли;
	
	ПодменюЭДО.Картинка = КартинкаЭДО;
	Если Не КартинкаЭДО = БиблиотекаКартинок.ЭмблемаСервиса1СЭДО Тогда
		ПодменюЭДО.Подсказка = НСтр("ru = 'В сервисе 1С-ЭДО есть новые документы'");
	Иначе
		ПодменюЭДО.Подсказка = НСтр("ru = 'Команды ЭДО'");
	КонецЕсли;
	
КонецПроцедуры

// Обработчик общих для форм документа, справочника, списка событий
// 
// Параметры:
//  ИмяСобытия - Строка
//  Параметр - Произвольный
//  Источник - Произвольный
//  ПараметрыОповещения - см. ПараметрыОповещенияЭДО_ФормаДокумента
//                      - см. ПараметрыОповещенияЭДО_ФормаСправочника
//                      - см. ПараметрыОповещенияЭДО_ФормаСписка
//
Процедура ОбщаяОбработкаОповещения(ИмяСобытия, Параметр, Источник, ПараметрыОповещения)
	
	Форма = ПараметрыОповещения.Форма;
	Если ИмяСобытия = ОповещенияОСобытияхЭДОКлиентСервер.ИмяОповещенияОНовыхДокументах() Тогда
		МестоРазмещенияКоманд = ПараметрыОповещения.МестоРазмещенияКоманд;
		ОбновитьПиктограммуОповещенияЭДО(Форма, МестоРазмещенияКоманд);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОтправитьИПолучить

// Показывает условия использования сервиса 1С-ЭДО.
// 
// Параметры:
// 	ПараметрыФормы - Структура:
// 	  * УчетныеЗаписиЭДО - Массив из Строка
// 	  * ОзнакомитьСПрекращениемПоддержкиПрямогоОбмена - Булево
// 	ОповещениеОЗавершении - ОписаниеОповещения - содержит описание процедуры, которая будет выполнена после закрытия 
//                          формы с условиями использования.
Процедура ПоказатьУсловияИспользованияСервиса1СЭДО(ПараметрыФормы = Неопределено,
	ОповещениеОЗавершении = Неопределено)
	
	ОткрытьФорму("РегистрСведений.УчетныеЗаписиЭДО.Форма.УсловияИспользования", ПараметрыФормы,
		,,,, ОповещениеОЗавершении);
	
КонецПроцедуры

// Параметры:
//  УсловияПриняты - Булево
//  КонтекстПринятияУсловий - Структура:
//  * ОповещениеОЗавершении - ОписаниеОповещения
//  * ПараметрыОтправкиПолучения - см. ИнтерфейсДокументовЭДО.ПараметрыОтправкиПолученияДокументовЭДО
//  * УчетныеЗаписиОбмена - Массив из Строка - идентификаторы оператора электронного документооборота
Процедура ОтправитьПолучитьДокументыЭДОПослеПринятияУсловийСервиса(УсловияПриняты, КонтекстПринятияУсловий) Экспорт
	
	Если УсловияПриняты <> Истина Тогда
		ВыполнитьОбработкуОповещения(КонтекстПринятияУсловий.ОповещениеОЗавершении);
		Возврат;
	КонецЕсли;
	
	ПодготовитьОтборУчетныхЗаписейДляОтправкиПолученияДокументовЭДО(КонтекстПринятияУсловий.ОповещениеОЗавершении,
		КонтекстПринятияУсловий.ПараметрыОтправкиПолучения, КонтекстПринятияУсловий.УчетныеЗаписиОбмена);
	
КонецПроцедуры

// Параметры:
//  ОповещениеОЗавершении - см. ОтправитьПолучитьДокументыЭДО.ОповещениеОЗавершении
//  ПараметрыВыполненияДействий - Структура -  Параметры выполнения действий:
Процедура НачатьОтправкуПолучениеДокументовЭДО(ОповещениеОЗавершении, ПараметрыВыполненияДействий)
	
	Оповещение = Новый ОписаниеОповещения("ЗавершитьОтправкуПолучениеДокументовЭДО",
		ИнтерфейсДокументовЭДОКлиент, ОповещениеОЗавершении);
	
	НачатьВыполнениеДействийПоЭДО(Оповещение, ПараметрыВыполненияДействий);
	
КонецПроцедуры

// Параметры:
//  ОповещениеОЗавершении - см. ОтправитьПолучитьДокументыЭДО.ОповещениеОЗавершении
//  ПараметрыОтправкиПолучения - см. ИнтерфейсДокументовЭДО.ПараметрыОтправкиПолученияДокументовЭДО
//  УчетныеЗаписиОбмена - Массив из Строка - идентификаторы оператора электронного документооборота
Асинх Процедура ПодготовитьОтборУчетныхЗаписейДляОтправкиПолученияДокументовЭДО(ОповещениеОЗавершении,
														ПараметрыОтправкиПолучения, УчетныеЗаписиОбмена)
	
	ДоступныеУчетныеЗаписи = ПараметрыОтправкиПолучения.ПараметрыВыполненияДействий.ОбъектыДействий.ИдентификаторыОрганизаций;
	КоличествоДоступныхУчетныхЗаписей = ДоступныеУчетныеЗаписи.Количество();
	Если ЗначениеЗаполнено(УчетныеЗаписиОбмена) Тогда
		ПараметрыОтправкиПолучения.ПараметрыВыполненияДействий.ОбъектыДействий.ИдентификаторыОрганизаций = УчетныеЗаписиОбмена;
	КонецЕсли;
	Если ПараметрыОтправкиПолучения.ИспользуетсяОтправкаПолучениеСОтборомПоОрганизации = Ложь 
			Или КоличествоДоступныхУчетныхЗаписей < 2 Тогда
		НачатьОтправкуПолучениеДокументовЭДО(ОповещениеОЗавершении, ПараметрыОтправкиПолучения.ПараметрыВыполненияДействий);
		Возврат;
	ИначеЕсли ПараметрыОтправкиПолучения.ИспользуетсяОтправкаПолучениеСОтборомПоОрганизации = Неопределено Тогда
		ТекстВопроса = НСтр("ru = 'Теперь можно настроить программу так, чтобы получение и
								|отправка документов выполнялись только для какой-то одной,
								|выбранной организации.
								|Это удобно, когда нужно побыстрее принять и отправить документы.
								|Включить выборочную отправку по организациям можно сейчас 
								|или позже через меню ""Еще"".'");
		ВариантыОтвета = Новый СписокЗначений;
		ВариантыОтвета.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Включить'"));
		ВариантыОтвета.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Не включать'"));
		
		Ответ = Ждать ВопросАсинх(ТекстВопроса, ВариантыОтвета,, КодВозвратаДиалога.Нет);

		Если Ответ = КодВозвратаДиалога.Да Тогда 
			ИнтерфейсДокументовЭДОВызовСервера.УстановитьОтправкуПолучениеСОтборомПоОрганизации(Истина);
			Оповестить("УстановитьОтправкуПолучениеСОтборомПоОрганизации", Истина);
		КонецЕсли;
		Если Ответ = КодВозвратаДиалога.Нет Тогда 
			ИнтерфейсДокументовЭДОВызовСервера.УстановитьОтправкуПолучениеСОтборомПоОрганизации(Ложь);
			Оповестить("УстановитьОтправкуПолучениеСОтборомПоОрганизации", Ложь);
			НачатьОтправкуПолучениеДокументовЭДО(ОповещениеОЗавершении, ПараметрыОтправкиПолучения.ПараметрыВыполненияДействий);			
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если  УчетныеЗаписиОбмена = Неопределено Тогда
		ДанныеУчетныхЗаписей = Новый Массив;
		Для Каждого ДанныеОрганизации Из ПараметрыОтправкиПолучения.ДанныеОтбораНастройкиОтправкиПолучения Цикл
			ДанныеУчетныхЗаписей.Добавить(ДанныеОрганизации.Значение);
		КонецЦикла;
		Если ДанныеУчетныхЗаписей.Количество() = 0 Тогда
			НачатьОтправкуПолучениеДокументовЭДО(ОповещениеОЗавершении, ПараметрыОтправкиПолучения.ПараметрыВыполненияДействий);
		ИначеЕсли ДанныеУчетныхЗаписей.Количество() = 1 И ДанныеУчетныхЗаписей[0].Количество() = 1 Тогда
			УчетныеЗаписиОбмена = Новый Массив;
			МассивУчетныхЗаписей = ДанныеУчетныхЗаписей[0];
			УчетныеЗаписиОбмена.Добавить(МассивУчетныхЗаписей[0].ИдентификаторЭДО);
			ПараметрыОтправкиПолучения.ПараметрыВыполненияДействий.ОбъектыДействий.ИдентификаторыОрганизаций = УчетныеЗаписиОбмена;
			НачатьОтправкуПолучениеДокументовЭДО(ОповещениеОЗавершении, ПараметрыОтправкиПолучения.ПараметрыВыполненияДействий);
		Иначе
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
			ДополнительныеПараметры.Вставить("ПараметрыВыполненияДействий", ПараметрыОтправкиПолучения.ПараметрыВыполненияДействий);
			ОписаниеВыбора = Новый ОписаниеОповещения("ОтправитьПолучитьДокументыЭДОПослеОтбораУчетныхЗаписей",
			ЭтотОбъект, ДополнительныеПараметры);
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ДанныеУчетныхЗаписей", ПараметрыОтправкиПолучения.ДанныеОтбораНастройкиОтправкиПолучения);
			ОткрытьФорму("Обработка.ИнтерфейсДокументовЭДО.Форма.НастройкиОтправкиПолучения",ПараметрыФормы , ЭтотОбъект,,,, ОписаниеВыбора);
		КонецЕсли;
		Возврат;
	Иначе
		НачатьОтправкуПолучениеДокументовЭДО(ОповещениеОЗавершении, ПараметрыОтправкиПолучения.ПараметрыВыполненияДействий);
	КонецЕсли;

КонецПроцедуры

// После выбора организаций.
// 
// Параметры:
//  Результат - Структура:
//  *УчетныеЗаписиОбмена - Массив из Строка - учетные записи ЭДО
//  ДополнительныеПараметры - Структура:
//  *ОповещениеОЗавершении - см. ОтправитьПолучитьДокументыЭДО
//  *ПараметрыВыполненияДействий - См. ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
Процедура ОтправитьПолучитьДокументыЭДОПослеОтбораУчетныхЗаписей(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, 
					ИнтерфейсДокументовЭДОКлиентСервер.НовыйИтогВыполненияДействийПоЭДО());
		Возврат;
	КонецЕсли;
	ДополнительныеПараметры.ПараметрыВыполненияДействий.ОбъектыДействий.ИдентификаторыОрганизаций = Результат.УчетныеЗаписиОбмена;
	НачатьОтправкуПолучениеДокументовЭДО(ДополнительныеПараметры.ОповещениеОЗавершении, 
									ДополнительныеПараметры.ПараметрыВыполненияДействий);
КонецПроцедуры

// Параметры:
//  Результат - Структура:
//  * Итог - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыйИтогВыполненияДействийПоЭДО
//  * ОшибкиФормирования - Массив из Структура
//  * КонтекстДиагностики - см. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//  ОповещениеОЗавершении - см. НачатьОтправкуПолучениеДокументовЭДО.ОповещениеОЗавершении
Процедура ЗавершитьОтправкуПолучениеДокументовЭДО(Результат, ОповещениеОЗавершении) Экспорт
	
	ПоказатьРезультатыОтправкиПолученияДокументовЭДО(Результат.Итог, Результат.КонтекстДиагностики);
	
	Параметры = Новый Структура("ОповещениеУспешногоЗавершения", ОповещениеОЗавершении);
	
	ПослеВыполненияДействийПоЭДО(Результат, Параметры);
	
КонецПроцедуры

// Параметры:
//  ИтогДействийПоЭДО - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыйИтогВыполненияДействийПоЭДО
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
Процедура ПоказатьРезультатыОтправкиПолученияДокументовЭДО(ИтогДействийПоЭДО, КонтекстДиагностики)

	ШаблонОповещения = НСтр("ru = 'Документов отправлено:(%1), получено:(%2), распаковано: (%3),
		|Приглашений получено: (%4)'");
	
	ОбработаноПоДействиям = ИтогДействийПоЭДО.ОбработаноПоДействиям;
	РезультатыОтправкиПолучения = ИтогДействийПоЭДО.РезультатыОтправкиПолучения;
	ОбработанныеУчетныеЗаписи = ИтогДействийПоЭДО.ОбработанныеУчетныеЗаписи;
	
	ОбработанныеУчетныеЗаписиПрямогоОбмена = Неопределено;
	Если КонтекстДиагностики.Свойство("ОбработанныеУчетныеЗаписиПрямогоОбмена", ОбработанныеУчетныеЗаписиПрямогоОбмена) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(
			ОбработанныеУчетныеЗаписи, ОбработанныеУчетныеЗаписиПрямогоОбмена, Ложь);
	КонецЕсли;
	
	ДокументовПолучено = ИтогДействийПоЭДО.ПолученоКонтейнеров;
	
	ДокументовОтправлено = КоличествоОбработанныхДокументовПоДействиюЭДО(ОбработаноПоДействиям,
		ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.Отправить"));
	
	ДокументовРаспаковано = КоличествоОбработанныхДокументовПоДействиюЭДО(ОбработаноПоДействиям,
		ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.Загрузить"));
	
	ПриглашенийПолучено = КоличествоОбработанныхДокументовПоДействиюЭДО(ОбработаноПоДействиям,
		ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.ЗагрузитьПриглашения"));
	
	ТекстОповещения = СтрШаблон(ШаблонОповещения,
		ДокументовОтправлено, ДокументовПолучено, ДокументовРаспаковано, ПриглашенийПолучено);
	
	ЗаголовокОповещения = НСтр("ru = 'Электронные документы'");
	
	ПараметрыДетализации = НовыеПараметрыДетализацииОтправкиПолученияДокументовЭДО();
	ПараметрыДетализации.КонтекстДиагностики = КонтекстДиагностики;
	ПараметрыДетализации.ОбработанныеУчетныеЗаписи = ОбработанныеУчетныеЗаписи;
	ПараметрыДетализации.РезультатыОтправкиПолучения = РезультатыОтправкиПолучения;
	
	ОтсутствуютУчетныеЗаписиСДоступнымиСертификатами = Ложь;
	ВидыОшибокНетДоступныхСертификатов = Новый Массив;
	ВидыОшибокНетДоступныхСертификатов.Добавить(ДиагностикаЭДОКлиентСервер.ВидОшибкиОтправкиИПолученияНетДоступныхСертификатов());
	ВидыОшибокНетДоступныхСертификатов.Добавить(ДиагностикаЭДОКлиентСервер.ВидОшибкиОтправкиИПолученияНетДоступаКСертификатам());
	
	Для Каждого КлючИЗначение Из ПараметрыДетализации.ОбработанныеУчетныеЗаписи Цикл
		Если ВидыОшибокНетДоступныхСертификатов.Найти(КлючИЗначение.Значение.ИнформацияОбОшибке.ВидОшибки) <> Неопределено Тогда
			ОтсутствуютУчетныеЗаписиСДоступнымиСертификатами = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ДействиеПриНажатии = Новый ОписаниеОповещения("ОткрытьФормуДетализацииОтправкиПолученияДокументовЭДО",
		ИнтерфейсДокументовЭДОКлиент, ПараметрыДетализации);
	
	КартинкаОповещения = ?(ОтсутствуютУчетныеЗаписиСДоступнымиСертификатами Или ДиагностикаЭДОКлиентСервер.ЕстьОшибки(КонтекстДиагностики),
		БиблиотекаКартинок.ПредупреждениеКрасноеБЭД, БиблиотекаКартинок.ЭмблемаСервиса1СЭДО48);
	
	#Если Не МобильноеПриложениеКлиент Тогда
	ПоказатьОповещениеПользователя(ЗаголовокОповещения, ДействиеПриНажатии, ТекстОповещения, КартинкаОповещения, СтатусОповещенияПользователя.Важное);
	#КонецЕсли
	
КонецПроцедуры

// Параметры:
//  ОбработаноПоДействиям - Соответствие из КлючИЗначение:
//  * Ключ - ПеречислениеСсылка.ДействияПоЭДО
//  * Значение - Число - количество обработанных документов.
//  ДействиеЭДО - ПеречислениеСсылка.ДействияПоЭДО
// 
// Возвращаемое значение:
//  Число
Функция КоличествоОбработанныхДокументовПоДействиюЭДО(ОбработаноПоДействиям, ДействиеЭДО)
	
	Количество = ОбработаноПоДействиям[ДействиеЭДО];
	Если Количество = Неопределено Тогда
		Возврат 0;
	Иначе
		Возврат Количество;
	КонецЕсли;
	
КонецФункции

// Возвращает параметры детализации операций с документами
// 
// Возвращаемое значение:
// Структура - со свойствами:
// * КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// * ОбработанныеУчетныеЗаписи - Соответствие из КлючИЗначение:
//   ** Ключ - Строка - идентификатор учетной записи ЭДО.
//   ** Значение - см. ДиагностикаЭДОКлиентСервер.НовоеОписаниеОбработаннойУчетнойЗаписи
// * РезультатыОтправкиПолучения - см. НовыеРезультатыОтправкиПолучения
//
Функция НовыеПараметрыДетализацииОтправкиПолученияДокументовЭДО()
	
	ПараметрыДетализации = Новый Структура;
	ПараметрыДетализации.Вставить("КонтекстДиагностики", ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики());
	ПараметрыДетализации.Вставить("ОбработанныеУчетныеЗаписи", Новый Соответствие);
	ПараметрыДетализации.Вставить("РезультатыОтправкиПолучения", НовыеРезультатыОтправкиПолучения());
	
	Возврат ПараметрыДетализации;
	
КонецФункции

// Возвращает результат отправки и получения электронных документов.
// 
// Возвращаемое значение:
// 	Структура:
// * Успешные   - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО - содержит ссылки на успешно
//                                               отправленные/полученные электронные документы документы или
//                                               транспортные контейнеры.
//              - Массив из ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//              - Массив из ДокументСсылка.ТранспортныйКонтейнерЭДО
//  * Неудачные - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО - одержит ссылки на
//                                                неудачно отправленные/полученные документы или
//                                                транспортные контейнеры.
//              - Массив из ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//              - Массив из ДокументСсылка.ТранспортныйКонтейнерЭДО
Функция НовыеРезультатыОтправкиПолучения()
	
	Возврат Новый Структура("Успешные, Неудачные", Новый Массив, Новый Массив);
	
КонецФункции

// Открыть форму с подробной информацией об отправке и получении документов.
//
// Параметры:
//  ПараметрыДетализации - см. НовыеПараметрыДетализацииОперацийСДокументами
//
Процедура ОткрытьФормуДетализацииОтправкиПолученияДокументовЭДО(ПараметрыДетализации) Экспорт
	
	#Если НЕ МобильныйКлиент Тогда
	
	ОткрытьФорму("Обработка.ОповещениеОСобытияхЭДО.Форма.РезультатыОтправкиИПолученияДокументов",
		Новый Структура("ПараметрыДетализации", ПараметрыДетализации));
	
	#КонецЕсли
	
КонецПроцедуры

#КонецОбласти

// Открыть файл, если нужно, сделав визуализацию ЭП. Получение файла с визуализацией выполняется в фоновом задании.
// Формат файла с визуализацией - pdf.
//
// Параметры:
//  ТекущийФайл - ОпределяемыйТип.ПрисоединенныйФайл
//  УникальныйИдентификатор - УникальныйИдентификатор
//  ДляРедактирования - Булево
Процедура ОткрытьФайл(ТекущийФайл, УникальныйИдентификатор, ДляРедактирования) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	ДополнительныеПараметры.Вставить("ДляРедактирования", ДляРедактирования);
	
	ПараметрыДанныхФайла = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
	ПараметрыДанныхФайла.ИдентификаторФормы = УникальныйИдентификатор;
	ПараметрыДанныхФайла.ВызыватьИсключение = Ложь;
	ПараметрыДанныхФайла.ДляРедактирования = ДляРедактирования;
	
	ДлительнаяОперация = ИнтерфейсДокументовЭДОВызовСервера.ДанныеФайлаДлительнаяОперация(ТекущийФайл, ПараметрыДанныхФайла);
	
	ОповещениеОЗавершенииПолученияФайлаPDF = Новый ОписаниеОповещения("ОткрытьФайлЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ПараметрыОжидания.ВыводитьСообщения = Ложь;
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершенииПолученияФайлаPDF, ПараметрыОжидания);
	
КонецПроцедуры

Процедура ОткрытьФайлЗавершение(Результат, ДополнительныйПараметр) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ПоказатьПредупреждение(, Результат.КраткоеПредставлениеОшибки);
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	Если ДанныеФайла.ПометкаУдаления Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			ИнтерфейсДокументовЭДОКлиентСервер.ТекстСообщенияОНеобходимостиСнятьПометкуУдаленияДляОткрытияФайла());
	Иначе
		ДанныеФайла.СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ДанныеФайла.ДвоичныеДанные, ДополнительныйПараметр.УникальныйИдентификатор);
		РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла, ДополнительныйПараметр.ДляРедактирования);
	КонецЕсли;
	
КонецПроцедуры

// Обработка результата помещения файла.
//
// Параметры:
//  ВыборВыполнен			 - Булево - результат выполнения выбора.
//  АдресФайла				 - Строка - адрес хранилища.
//  ВыбранноеИмяФайла		 - Строка - имя файла.
//  ДополнительныеПараметры	 - Структура - дополнительные параметры.
//
Процедура ЗагрузитьДанныеИзФайлаОбработатьРезультатПомещенияФайла(ВыборВыполнен, АдресФайла, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Не ВыборВыполнен Тогда
		Возврат;
	КонецЕсли;
	
	Расширение = Прав(ВыбранноеИмяФайла, 3);
	СсылкаНаДокумент = ДополнительныеПараметры.СсылкаНаДокумент;
	УникальныйИдентификатор = ДополнительныеПараметры.УникальныйИдентификатор;
	
	Если ВРег(Расширение) <> ВРег("zip")
			И ВРег(Расширение) <> ВРег("xml") Тогда
		ТекстСообщения = НСтр("ru = 'Некорректный формат файла.
									|Выберите файл с расширением ""zip"" или ""xml"".'");
		ОчиститьСообщения();
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	СтруктураОбмена = Новый Структура();
	СтруктураОбмена.Вставить("НаправлениеЭД",           ПредопределенноеЗначение("Перечисление.НаправленияЭДО.Входящий"));
	СтруктураОбмена.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	СтруктураОбмена.Вставить("ИмяФайла",     ВыбранноеИмяФайла);
	СтруктураОбмена.Вставить("АдресХранилищаФайла",     АдресФайла);
	СтруктураОбмена.Вставить("АдресХранилищаФайлаДопДанных", "");
	СтруктураОбмена.Вставить("АдресХранилищаФайлаКартинок",  "");
	СтруктураОбмена.Вставить("СсылкаНаДокумент",        СсылкаНаДокумент);
	СтруктураОбмена.Вставить("ИмяФайла",                ВыбранноеИмяФайла);
	
	Если ВРег(Расширение) = ВРег("zip") Тогда
		
		ОписаниеФайла = Новый Структура;

		ОписаниеФайла.Вставить("ИмяФайла", ВыбранноеИмяФайла);
		ОписаниеФайла.Вставить("ДвоичныеДанные", ПолучитьИзВременногоХранилища(АдресФайла));
		
		ОписаниеФайловДокументаПакета = ИнтерфейсДокументовЭДОВызовСервера.ОписаниеФайловДокументаПакета(ОписаниеФайла);
		
		Если ЗначениеЗаполнено(ОписаниеФайловДокументаПакета) Тогда
			СтруктураОбмена.Вставить("АдресХранилищаФайла", ПоместитьВоВременноеХранилище(
				ОписаниеФайловДокументаПакета.ДанныеОсновногоФайла.ДвоичныеДанные, УникальныйИдентификатор));
			СтруктураОбмена.Вставить("ИмяФайла", ОписаниеФайловДокументаПакета.ДанныеОсновногоФайла.ИмяФайла);	
			СтруктураОбмена.Вставить("АдресХранилищаФайлаДопДанных", ПоместитьВоВременноеХранилище(
				ОписаниеФайловДокументаПакета.ДанныеФайлаДопДанных.ДвоичныеДанные, УникальныйИдентификатор));
			Если ЗначениеЗаполнено(ОписаниеФайловДокументаПакета.ДанныеФайлаКартинок) Тогда
				СтруктураОбмена.Вставить("АдресХранилищаФайлаКартинок", ПоместитьВоВременноеХранилище(
					ОписаниеФайловДокументаПакета.ДанныеФайлаКартинок.ДвоичныеДанные, УникальныйИдентификатор));
			КонецЕсли;
		КонецЕсли;
	
	КонецЕсли;
	
	Параметры = Новый Структура("СтруктураЭД", СтруктураОбмена);
	
	ОткрытьФорму("Обработка.ИнтерфейсДокументовЭДО.Форма.ЗагрузкаПросмотрЭлектронногоДокумента", Параметры, ,
		СтруктураОбмена.УникальныйИдентификатор);
	
	
КонецПроцедуры

// Сохраняет переданные файлы. Для каждого файла после сохранения записывает факт выгрузки электронного документа.
//
// Параметры:
//  СоответствиеФайловВыгрузки - Соответствие Из КлючИЗначение:
//   * Ключ - Структура - Данные файла выгрузки.
//   * Значение - Строка - Адрес во внутреннем хранилище, куда помещен файл
//
Процедура СохранитьФайлыВыгрузкиЭД(Знач СоответствиеФайловВыгрузки)
	
	КоличествоФайлов = СоответствиеФайловВыгрузки.Количество();
	Если КоличествоФайлов = 0 Тогда
		Возврат;
	КонецЕсли;

	МассивФайлов = Новый Массив;
	Для Каждого КлючЗначениеФайлВыгрузки Из СоответствиеФайловВыгрузки Цикл
		ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(КлючЗначениеФайлВыгрузки.Ключ.ИмяФайла,
			КлючЗначениеФайлВыгрузки.Значение);
		МассивФайлов.Добавить(ОписаниеФайла);
	КонецЦикла;

	Обработчик = Новый ОписаниеОповещения("СохранитьФайлыВыгрузкиЭДЗавершение", ИнтерфейсДокументовЭДОКлиент);

	Если КоличествоФайлов = 1 Тогда
		ИмяФайла = МассивФайлов[0].Имя;
		РасширениеФайла = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ИмяФайла);
		ПараметрыСохранения = ФайловаяСистемаКлиент.ПараметрыСохраненияФайла();
		ПараметрыСохранения.Диалог.Фильтр = ДополнительныеОтчетыИОбработкиКлиентСервер.ФильтрДиалоговВыбораИСохранения();
		ПараметрыСохранения.Диалог.Заголовок = НСтр("ru = 'Сохранение'");
		ПараметрыСохранения.Диалог.Фильтр = СтрШаблон("(*.%1)|*.%1", РасширениеФайла);

		ФайловаяСистемаКлиент.СохранитьФайл(Обработчик, 
			МассивФайлов[0].Хранение, 
			ИмяФайла,
			ПараметрыСохранения);
	Иначе
		ФайловаяСистемаКлиент.СохранитьФайлы(Обработчик, МассивФайлов);
	КонецЕсли;

КонецПроцедуры

// Обрабатывает результат выгрузки электронных документов
// 
// Параметры:
//  Результат - Массив из ОписаниеПереданногоФайла
//  ДопПараметры - Неопределено
Процедура СохранитьФайлыВыгрузкиЭДЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;

	ИнтерфейсДокументовЭДОВызовСервера.УдалитьВыгруженныеФайлыИзХранилища(Результат);
	
КонецПроцедуры

Функция ИмяПараметраОтложенныйКонтекстДиагностики() 
		
	Возврат "ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстДиагностики";
	
КонецФункции

// Параметры:
//  ОбъектыДействий - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыеОбъектыДействийПоЭДО
//  ОписаниеОповещения - ОписаниеОповещения
Процедура ОтклонитьОбъекты(ОбъектыДействий, ОписаниеОповещения) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЭлектронныеДокументы", ОбъектыДействий.ЭлектронныеДокументы);
	ДополнительныеПараметры.Вставить("ПакетыДокументов", ОбъектыДействий.ПакетыДокументов);
	ДополнительныеПараметры.Вставить("ОбъектыУчета", ОбъектыДействий.ОбъектыУчета);
	
	ДополнительныеПараметры.Вставить("ОповещениеУспешногоЗавершения", ОписаниеОповещения);
	
	НаборДействий = Новый Соответствие;	
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Отклонить"));
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Подписать"));
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ПодготовитьКОтправке"));
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Отправить"));
		
	ДополнительныеПараметры.Вставить("НаборДействий", НаборДействий);
	ДополнительныеПараметры.Вставить("ОсновноеДействие", ПредопределенноеЗначение(
			"Перечисление.ДействияПоЭДО.Отклонить"));
				
	Обработчик = Новый ОписаниеОповещения("ВыполнитьДействияПоЭДОПослеВводаСтроки", ИнтерфейсДокументовЭДОКлиент, ДополнительныеПараметры);
	
	ДополнительныеПараметры = ОбщегоНазначенияБЭДКлиент.ПараметрыВводаСтроки();
	ДополнительныеПараметры.ЗаголовокФормы = НСтр("ru = 'Укажите причины отклонения документа'");
	ДополнительныеПараметры.НазваниеКнопкиПоУмолчанию = НСтр("ru = 'Отклонить'");
	ДополнительныеПараметры.Многострочность = Истина;
	ДополнительныеПараметры.Обязательность = Истина;
	ДополнительныеПараметры.КомментарийОбязательностиВвода =
		НСтр("ru = 'Для отклонения документа необходимо указать причину.'");
	ОбщегоНазначенияБЭДКлиент.ПоказатьВводСтрокиБЭД(Обработчик, ДополнительныеПараметры);
	
КонецПроцедуры

// Возвращает строку сообщений по результатам выгрузки электронных документов для ФНС 
// в виде массива форматированных строк.
// 
// Параметры:
//  РезультатВыгрузки - КлючИЗначение - Результат выгрузки:
// * Ключ - Строка - Наименование организации, по которой выгружаются документы
// * Значение - Структура - Структура результатов обработки:
//  ** КоличествоДокументов - Число
//  ** КоличествоВФормализованномВиде - Число
//  ** НаименованиеАрхиваФормализованных - Строка
//  ** КоличествоВФорматеPDF - Число
//  ** НаименованиеАрхиваНеформализованныхPDF - Строка
//  ** КоличествоСНанесениемШтамповЭП - Число
//  ** НаименованиеАрхиваСНанесениемШтампов - Строка
//  ** КоличествоСОтдельнымиШтампамиЭП - Число
//  ** НаименованиеАрхиваСОтдельнымиШтампами - Строка
//  ** КоличествоНеВыгружено - Число
//  ** НаименованиеФайлаСНевыгруженными - Строка
//  КаталогВыгрузки - Строка
// 
// Возвращаемое значение:
//  Массив из ФорматированнаяСтрока - массив форматированных строк сообщения 
//
Функция СтрокаСообщенияПоРезультатамВыгрузкиДляФНС(РезультатВыгрузки, КаталогВыгрузки)

	ЧастиСтроки = Новый Массив;
	
	ШаблонСтроки = НСтр("ru='<span style=""font:УвеличенныйШрифтБЭД"">Документы по организации ""%1""</span>
		|
		|<span style=""font:ЖирныйШрифтБЭД"">Всего документов %2, из них:</span>'");
	ТекстСтроки = СтроковыеФункцииКлиент.ФорматированнаяСтрока(ШаблонСтроки, 
		РезультатВыгрузки.Ключ,
		РезультатВыгрузки.Значение.КоличествоДокументов);
	ЧастиСтроки.Добавить(ТекстСтроки);
	ЧастиСтроки.Добавить(Символы.ПС);
		
	Если РезультатВыгрузки.Значение.КоличествоВФормализованномВиде <> 0 Тогда
		ШаблонСтроки = НСтр("ru='%1 - выгружены в формализованном виде. Загрузите их в ответ на требование ФНС.
			|Путь к архиву: <a href = ""%2"">%3</a>'");
		ПутьКАрхиву = КаталогВыгрузки + ПолучитьРазделительПути() 
			+ РезультатВыгрузки.Значение.НаименованиеАрхиваФормализованных;
		ТекстСтроки = СтроковыеФункцииКлиент.ФорматированнаяСтрока(
			ШаблонСтроки, 
			РезультатВыгрузки.Значение.КоличествоВФормализованномВиде,
			"file://" + ПутьКАрхиву,
			ПутьКАрхиву);
		ЧастиСтроки.Добавить(ТекстСтроки);
		ЧастиСтроки.Добавить(Символы.ПС);
	КонецЕсли;
	
	Если РезультатВыгрузки.Значение.КоличествоВФорматеPDF <> 0 Тогда
		ШаблонСтроки = НСтр("ru='%1 - выгружены в формате PDF. Загрузите их в ответ на требование ФНС.
			|Путь к архиву: <a href = ""%2"">%3</a>'");
		ПутьКАрхиву = КаталогВыгрузки + ПолучитьРазделительПути() 
			+ РезультатВыгрузки.Значение.НаименованиеАрхиваНеформализованныхPDF;
		ТекстСтроки = СтроковыеФункцииКлиент.ФорматированнаяСтрока(
			ШаблонСтроки, 
			РезультатВыгрузки.Значение.КоличествоВФорматеPDF,
			"file://" + ПутьКАрхиву,
			ПутьКАрхиву);
		ЧастиСтроки.Добавить(ТекстСтроки);
		ЧастиСтроки.Добавить(Символы.ПС);
	КонецЕсли;
	
	Если РезультатВыгрузки.Значение.КоличествоСНанесениемШтамповЭП <> 0 Тогда
		ШаблонСтроки = НСтр("ru='%1 - выгружены с нанесением штампов ЭП. Документы необходимо распечатать,'") 
			+ " " + НСтр("ru='заверить стандартным способом, отсканировать и прикрепить к ответу на требование ФНС.
			|Путь к архиву: <a href = ""%2"">%3</a>'");
		ПутьКАрхиву = КаталогВыгрузки + ПолучитьРазделительПути() 
			+ РезультатВыгрузки.Значение.НаименованиеАрхиваСНанесениемШтампов;
		ТекстСтроки = СтроковыеФункцииКлиент.ФорматированнаяСтрока(
			ШаблонСтроки, 
			РезультатВыгрузки.Значение.КоличествоСНанесениемШтамповЭП,
			"file://" + ПутьКАрхиву,
			ПутьКАрхиву);
		ЧастиСтроки.Добавить(ТекстСтроки);
		ЧастиСтроки.Добавить(Символы.ПС);
	КонецЕсли;

	Если РезультатВыгрузки.Значение.КоличествоСОтдельнымиШтампамиЭП <> 0 Тогда
		ШаблонСтроки = НСтр("ru='%1 - выгружены с отдельными штампами ЭП в виде картинок. Необходимо нанести штампы'")
			+ " " + НСтр("ru='ЭП на выгруженные документы, распечатать, заверить стандартным способом,'") 
			+ " " + НСтр("ru='отсканировать и прикрепить к ответу на требование ФНС.
			|Путь к архиву: <a href = ""%2"">%3</a>'");
		ПутьКАрхиву = КаталогВыгрузки + ПолучитьРазделительПути() 
			+ РезультатВыгрузки.Значение.НаименованиеАрхиваСОтдельнымиШтампами;
		ТекстСтроки = СтроковыеФункцииКлиент.ФорматированнаяСтрока(
			ШаблонСтроки, 
			РезультатВыгрузки.Значение.КоличествоСОтдельнымиШтампамиЭП,
			"file://" + ПутьКАрхиву,
			ПутьКАрхиву);
		ЧастиСтроки.Добавить(ТекстСтроки);
		ЧастиСтроки.Добавить(Символы.ПС);
	КонецЕсли;

	Если РезультатВыгрузки.Значение.КоличествоНеВыгружено <> 0 Тогда
		ШаблонСтроки = НСтр("ru='%1 - не выгружены, так как обнаружены ошибки. Их нужно обработать вручную.
			|Путь к файлу со списком документов: <a href = ""%2"">%3</a>'");
		ПутьКФайлу = КаталогВыгрузки + ПолучитьРазделительПути() 
			+ РезультатВыгрузки.Значение.НаименованиеФайлаСНевыгруженными;
		ТекстСтроки = СтроковыеФункцииКлиент.ФорматированнаяСтрока(
			ШаблонСтроки, 
			РезультатВыгрузки.Значение.КоличествоНеВыгружено,
			"file://" + ПутьКФайлу,
			ПутьКФайлу);
		ЧастиСтроки.Добавить(ТекстСтроки);
		ЧастиСтроки.Добавить(Символы.ПС);
	КонецЕсли;
	
	ЧастиСтроки.Добавить(Символы.ПС);
	ЧастиСтроки.Добавить(Символы.ПС);
	
	Возврат ЧастиСтроки;
	
КонецФункции

#Область СозданиеИсходящегоЭДОИзПФ

// Обрабатывает подключаемую команду отправки по ЭДО в форме печати БСП
// 
// Параметры:
//  Форма - см. ОбщаяФорма.ПечатьДокументов
//  Команда - КомандаФормы - выполняемая команда.
//  ПродолжитьВыполнениеНаСервере - Булево - при установке значения Истина, выполнение обработчика будет продолжено в
//                                           серверном контексте в процедуре УправлениеПечатьюПереопределяемый.ПечатьДокументовПриВыполненииКоманды.
//  ДополнительныеПараметры - Произвольный - параметры, которые необходимо передать в серверный контекст.
Процедура ВыполнитьКоманду_ЭДОСформироватьПроизвольныйДокумент(Форма, Команда,
		ПродолжитьВыполнениеНаСервере, ДополнительныеПараметры)
	
	ОбъектыПечати = Форма.Параметры.ПараметрКоманды;
	ДокументОснование = Неопределено;
	Если ЗначениеЗаполнено(ОбъектыПечати) И ТипЗнч(ОбъектыПечати) = Тип("Массив") Тогда
		ДокументОснование = ОбъектыПечати[0];
	КонецЕсли;
	
	ДанныеПечатныхФорм = ДанныеПечатныхФорм(Форма);
	
	Если ДанныеПечатныхФорм.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Контекст = ИнтерфейсДокументовЭДОКлиентСервер.НовыйКонтекстОтправкиПечатныхФормПоЭДО();
	Контекст.ДокументОснование = ДокументОснование;
	Контекст.ДанныеПечатныхФорм = ДанныеПечатныхФорм;
	
	СуществуютЭД = ИнтеграцияЭДОВызовСервера.ЭлектронныеДокументыОбъектовУчета(ДокументОснование).Количество() <> 0;
		
	Если СуществуютЭД Тогда
		
		ОткрытьФорму("Обработка.ИнтерфейсДокументовЭДО.Форма.СписокСформированныхДокументов", Контекст, 
			Форма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Возврат;
	КонецЕсли;
	
	Если ДанныеПечатныхФорм.Количество() = 1 Тогда
		
		СформироватьНеформализованныеЭДОПоКонтекстуОтправки(Контекст);
		
	Иначе
		
		ШаблонВопроса = НСтр("ru='Будет сформировано %1 электронных документа. Продолжить?'");
		ТекстВопроса = СтрШаблон(ШаблонВопроса, ДанныеПечатныхФорм.Количество());
		
		Оповещение = Новый ОписаниеОповещения("ОбработатьОтветНаВопросОФормированииМногихДокументов", 
			ЭтотОбъект, Контекст);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,, НСтр("ru='Формирование документов'"));
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает собранные параметры печатных форм
// 
// Параметры:
//  Форма - см. ОбщаяФорма.ПечатьДокументов
// 
// Возвращаемое значение:
//  Массив Из см. ИнтерфейсДокументовЭДОКлиентСервер.НовыеДанныеПечатнойФормыДляНеформализованногоЭДО
Функция ДанныеПечатныхФорм(Форма)
	
	ДанныеФорм = Новый Массив();
	
	НастройкиПечатныхФорм = Форма.НастройкиПечатныхФорм.НайтиСтроки(Новый Структура("Печатать", Истина));
	
	Если НастройкиПечатныхФорм.Количество() = 0 Тогда
		Возврат ДанныеФорм;
	КонецЕсли;
	
	Для Каждого НастройкаПечатнойФормы Из НастройкиПечатныхФорм Цикл
		
		ДанныеПечатнойФормы = ИнтерфейсДокументовЭДОКлиентСервер.НовыеДанныеПечатнойФормыДляНеформализованногоЭДО();
		
		ТабличныйДокумент = Форма[НастройкаПечатнойФормы.ИмяРеквизита];
		
		Если ТабличныйДокумент.ВысотаТаблицы = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеПечатнойФормы.ТабличныйДокумент = ТабличныйДокумент;
		ДанныеПечатнойФормы.НаименованиеФайла = НастройкаПечатнойФормы.Название;
		ДанныеПечатнойФормы.Расширение = "pdf";
		ДанныеПечатнойФормы.Уникальность = НастройкаПечатнойФормы.Название;
		
		ДанныеФорм.Добавить(ДанныеПечатнойФормы);
		
	КонецЦикла;
	
	Возврат ДанныеФорм;
	
КонецФункции

// Открывает форму выбора печатной формы объекта для отправки по ЭДО
// 
// Параметры:
//  Контекст - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыйКонтекстОтправкиПечатныхФормПоЭДО
//  КомандыПечати - Массив Из Структура - Коллекция команд печати
//
Процедура ВыбратьПечатнуюФормуДляОтправкиНеформализованногоЭДО(Контекст, КомандыПечати)
	
	СписокКоманд = Новый СписокЗначений();
	Для Каждого КомандаПечати Из КомандыПечати Цикл
		СписокКоманд.Добавить(КомандаПечати, КомандаПечати.Представление);
	КонецЦикла;
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьВыборКомандыПечатиДляОтправкиНеформализованногоЭДО",
		ЭтотОбъект, Контекст);
	СписокКоманд.ПоказатьВыборЭлемента(Оповещение, НСтр("ru = 'Выберите печатную форму для формирования'"));
	
КонецПроцедуры

#КонецОбласти

// Проверяет доступность работы с форматом PDF/A3.
// 
// Возвращаемое значение:
//  Булево - Истина, если функционал доступен.
Функция ДоступнаРаботаСФорматомПДФ_А3()
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	ВерсияПлатформы = СистемнаяИнформация.ВерсияПриложения;
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияПлатформы, "8.3.21.1622") < 0 Тогда
		ШаблонОшибки = СтрШаблон(НСтр("ru='Версия платформы %1 не поддерживает работу с форматом договорных документов PDF/A3.
		|Требуется платформа версии не ниже 8.3.21.1622'", "ru"), ВерсияПлатформы);
		ПоказатьПредупреждение(, ШаблонОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти
