
#Область ПрограммныйИнтерфейс

// Возвращает дату платежа по календарю с учетом сдвига.
// 
// Параметры:
//  Параметры - см. ЭтапыОплатыКлиентСервер.ПараметрыРасчетаДатыПлатежа
// 
// Возвращаемое значение:
//  Дата - Дата платежа по календарю
Функция ДатаПлатежаПоКалендарю(Параметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Параметры.ДатаСогласования) Тогда
		Параметры.ДатаСогласования = Параметры.ДатаЗаказа;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Параметры.ДатаОтгрузки) Тогда
		Параметры.ДатаОтгрузки = Параметры.ДатаЗаказа;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Параметры.ВариантОтсчета) Тогда
		ДатаПлатежа = Дата(1,1,1);
	ИначеЕсли Параметры.ВариантОтсчета = Перечисления.ВариантыОтсчетаДатыПлатежа.ОтДатыЗаказа И ЗначениеЗаполнено(Параметры.ДатаЗаказа) Тогда
		ДатаПлатежа = ДатаПоКалендарю(Параметры.Календарь, Параметры.ДатаЗаказа, Параметры.Сдвиг);
	ИначеЕсли Параметры.ВариантОтсчета = Перечисления.ВариантыОтсчетаДатыПлатежа.ОтДатыСогласования И ЗначениеЗаполнено(Параметры.ДатаСогласования) Тогда
		ДатаПлатежа = ДатаПоКалендарю(Параметры.Календарь, Параметры.ДатаСогласования, Параметры.Сдвиг);
	ИначеЕсли Параметры.ВариантОтсчета = Перечисления.ВариантыОтсчетаДатыПлатежа.ДоДатыОтгрузки И ЗначениеЗаполнено(Параметры.ДатаОтгрузки) Тогда
		ДатаПлатежа = ДатаПоКалендарю(Параметры.Календарь, Параметры.ДатаОтгрузки, -Параметры.Сдвиг);
	ИначеЕсли Параметры.ВариантОтсчета = Перечисления.ВариантыОтсчетаДатыПлатежа.ОтДатыОтгрузки И ЗначениеЗаполнено(Параметры.ДатаОтгрузки) Тогда
		ДатаПлатежа = ДатаПоКалендарю(Параметры.Календарь, Параметры.ДатаОтгрузки, Параметры.Сдвиг);
	ИначеЕсли Параметры.ВариантОтсчета = Перечисления.ВариантыОтсчетаДатыПлатежа.ОтДатыПереходаПраваСобственности И ЗначениеЗаполнено(Параметры.ДатаПереходаПраваСобственности) Тогда
		ДатаПлатежа = ДатаПоКалендарю(Параметры.Календарь, Параметры.ДатаПереходаПраваСобственности, Параметры.Сдвиг);
	ИначеЕсли Параметры.ВариантОтсчета = Перечисления.ВариантыОтсчетаДатыПлатежа.ОтДатыПереходаПраваСобственности И ЗначениеЗаполнено(Параметры.ДатаОтгрузки) Тогда
		ДатаПлатежа = ДатаПоКалендарю(Параметры.Календарь, Параметры.ДатаОтгрузки + 86400*Параметры.СрокПереходаПраваСобственности, Параметры.Сдвиг);
	Иначе
		ДатаПлатежа = Дата(1,1,1);
	КонецЕсли;
	
	Возврат ДатаПлатежа
	
КонецФункции

// Возвращает сдвиг по календарю от даты платежа.
// 
// Параметры:
//  Параметры - см. ЭтапыОплатыКлиентСервер.ПараметрыРасчетаДатыПлатежа
// 
// Возвращаемое значение:
//  Число - Сдвиг по календарю
Функция СдвигПоКалендарю(Параметры) Экспорт
	
	Если Параметры.ДатаПлатежа = Дата(1,1,1) Тогда
		Сдвиг = 0;
	ИначеЕсли Параметры.ВариантОтсчета = ПредопределенноеЗначение("Перечисление.ВариантыОтсчетаДатыПлатежа.ОтДатыЗаказа") 
		И ЗначениеЗаполнено(Параметры.ДатаЗаказа) Тогда
		Сдвиг = СдвигМеждуДатамиПоКалендарю(Параметры.Календарь, Параметры.ДатаЗаказа, Параметры.ДатаПлатежа);
	ИначеЕсли Параметры.ВариантОтсчета = ПредопределенноеЗначение("Перечисление.ВариантыОтсчетаДатыПлатежа.ОтДатыСогласования") 
		И ЗначениеЗаполнено(Параметры.ДатаСогласования) Тогда
		Сдвиг = СдвигМеждуДатамиПоКалендарю(Параметры.Календарь, Параметры.ДатаСогласования, Параметры.ДатаПлатежа);
	ИначеЕсли Параметры.ВариантОтсчета = ПредопределенноеЗначение("Перечисление.ВариантыОтсчетаДатыПлатежа.ДоДатыОтгрузки") 
		И ЗначениеЗаполнено(Параметры.ДатаОтгрузки) Тогда
		Сдвиг = СдвигМеждуДатамиПоКалендарю(Параметры.Календарь, Параметры.ДатаПлатежа, Параметры.ДатаОтгрузки);
	ИначеЕсли Параметры.ВариантОтсчета = ПредопределенноеЗначение("Перечисление.ВариантыОтсчетаДатыПлатежа.ОтДатыОтгрузки")
		И ЗначениеЗаполнено(Параметры.ДатаОтгрузки) Тогда
		Сдвиг = СдвигМеждуДатамиПоКалендарю(Параметры.Календарь, Параметры.ДатаОтгрузки, Параметры.ДатаПлатежа);
	ИначеЕсли Параметры.ВариантОтсчета = ПредопределенноеЗначение("Перечисление.ВариантыОтсчетаДатыПлатежа.ОтДатыПереходаПраваСобственности")
		И ЗначениеЗаполнено(Параметры.ДатаПереходаПраваСобственности) Тогда
		Сдвиг = СдвигМеждуДатамиПоКалендарю(Параметры.Календарь, Параметры.ДатаПереходаПраваСобственности, Параметры.ДатаПлатежа);
	ИначеЕсли Параметры.ВариантОтсчета = ПредопределенноеЗначение("Перечисление.ВариантыОтсчетаДатыПлатежа.ОтДатыПереходаПраваСобственности")
		И ЗначениеЗаполнено(Параметры.ДатаОтгрузки) Тогда
		Сдвиг = СдвигМеждуДатамиПоКалендарю(Параметры.Календарь, Параметры.ДатаОтгрузки, Параметры.ДатаПлатежа) + Параметры.СрокПереходаПраваСобственности;
	Иначе
		Сдвиг = 0;
	КонецЕсли;
	
	Возврат Сдвиг;
	
КонецФункции

// Функция проверки наличия графика оплаты в соглашении
//
// Параметры:
// 		Соглашение - СправочникСсылка.СоглашенияСПоставщиками, СправочникСсылка.СоглашенияСКлиентами - 
//
// Возвращаемое значение:
// 		Булево - "Истина", если в графике есть хотя бы один этап и соглашения используются
//
Функция ГрафикСоглашенияЗаполнен(Соглашение) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Соглашение) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Соглашение) = Тип("СправочникСсылка.СоглашенияСКлиентами")
		И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами")
		ИЛИ ТипЗнч(Соглашение) = Тип("СправочникСсылка.СоглашенияСПоставщиками")
		И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСПоставщиками") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Соглашение) = Тип("СправочникСсылка.СоглашенияСКлиентами") Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	СоглашенияСКлиентамиЭтапыГрафикаОплаты.Ссылка
			|ИЗ
			|	Справочник.СоглашенияСКлиентами.ЭтапыГрафикаОплаты КАК СоглашенияСКлиентамиЭтапыГрафикаОплаты
			|ГДЕ
			|	СоглашенияСКлиентамиЭтапыГрафикаОплаты.Ссылка = &Соглашение");
	Иначе
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	СоглашенияСПоставщикамиЭтапыГрафикаОплаты.Ссылка
			|ИЗ
			|	Справочник.СоглашенияСПоставщиками.ЭтапыГрафикаОплаты КАК СоглашенияСПоставщикамиЭтапыГрафикаОплаты
			|ГДЕ
			|	СоглашенияСПоставщикамиЭтапыГрафикаОплаты.Ссылка = &Соглашение");
	КонецЕсли;
	Запрос.УстановитьПараметр("Соглашение", Соглашение);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает даты, которые отличаются от указанной даты ДатаОт на количество дней,
// входящих в указанный график ГрафикРаботы.
//
// Параметры:
//   ГрафикРаботы	- СправочникСсылка.Календари
//	             	- СправочникСсылка.ПроизводственныеКалендари - график или 
//                    производственный календарь, который необходимо использовать для расчета дат.
//   ДатаОт			- Дата - дата, от которой нужно рассчитать количество дней.
//   МассивДней		- Массив - количество дней (Число), на которые нужно увеличить дату начала.
//   РассчитыватьСледующуюДатуОтПредыдущей	- Булево - нужно ли рассчитывать следующую дату от предыдущей или
//											           все даты рассчитываются от переданной даты.
//   ВызыватьИсключение - Булево - если Истина, вызвать исключение в случае незаполненного графика.
//
// Возвращаемое значение:
//   Неопределено, Массив - массив дат, увеличенных на количество дней, входящих в график,
//	                        Если график ГрафикРаботы не заполнен, и ВызыватьИсключение = Ложь, возвращается Неопределено.
//
Функция ДатыПоКалендарю(Знач ГрафикРаботы, Знач ДатаОт, Знач МассивДней, ВызыватьИсключение = Истина) 
	
	Если Не ЗначениеЗаполнено(ГрафикРаботы) Тогда
		Если ВызыватьИсключение Тогда
			ВызватьИсключение НСтр("ru = 'Не указан график работы или производственный календарь.'");
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	// По производственному календарю.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КалендарныеГрафики.Дата КАК ДатаГрафика
	|ИЗ
	|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК КалендарныеГрафики
	|ГДЕ
	|	КалендарныеГрафики.ПроизводственныйКалендарь = &ГрафикРаботы
	|	И КалендарныеГрафики.ВидДня В (ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий), ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный))
	|УПОРЯДОЧИТЬ ПО
	|	КалендарныеГрафики.Дата УБЫВ";
	Запрос.УстановитьПараметр("ГрафикРаботы", ГрафикРаботы);
	
	МассивДат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ДатаГрафика");
	
	ИндексОт = Неопределено;
	Для сч = 0 По 30 Цикл
		Если МассивДат.Найти(ДатаОт + сч * 86400) <> Неопределено Тогда
			ИндексОт = МассивДат.Найти(ДатаОт + сч * 86400);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ИндексОт = Неопределено Тогда
		СообщениеОбОшибке = НСтр("ru = 'Производственный календарь «%1» не заполнен с даты %2 на указанное количество рабочих дней.'");
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, ГрафикРаботы, Формат(ДатаОт, "ДЛФ=D"));
		Если ВызыватьИсключение Тогда
			ВызватьИсключение СообщениеОбОшибке
		Иначе
			ОбщегоНазначения.СообщитьПользователю(СообщениеОбОшибке);
			Возврат Неопределено
		КонецЕсли;
	Иначе
		Если ДатаОт <> МассивДат[ИндексОт] Тогда
			Сдвиг = 1;
		Иначе
			Сдвиг = 0;
		КонецЕсли;
		
		СоответствиеДат = Новый Соответствие;
		Для сч = 0 По МассивДат.Количество()-1 Цикл
			СоответствиеДат.Вставить(ИндексОт - сч + Сдвиг, МассивДат[сч]);
		КонецЦикла;
	КонецЕсли;
	
	МассивДатРезультат = Новый Массив;
	
	Для Каждого СтрокаДней Из МассивДней Цикл
		Дата = СоответствиеДат.Получить(СтрокаДней);
		Если Дата = Неопределено Тогда
			СообщениеОбОшибке = НСтр("ru = 'Производственный календарь «%1» не заполнен с даты %2 на указанное количество рабочих дней.'");
			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, ГрафикРаботы, Формат(Дата, "ДЛФ=D"));
			Если ВызыватьИсключение Тогда
				ВызватьИсключение СообщениеОбОшибке
			Иначе
				ОбщегоНазначения.СообщитьПользователю(СообщениеОбОшибке);
			КонецЕсли;
		Иначе
			МассивДатРезультат.Добавить(Дата);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивДатРезультат;
	
КонецФункции

// Возвращает дату, которая отличается указанной даты ДатаОт на количество дней,
// входящих в указанный график или производственный календарь ГрафикРаботы.
//
// Параметры:
//   ГрафикРаботы	- СправочникСсылка.Календари
//	             	- СправочникСсылка.ПроизводственныеКалендари - график или 
//                    производственный календарь, который необходимо использовать для расчета даты.
//   ДатаОт			- Дата - дата, от которой нужно рассчитать количество дней.
//   КоличествоДней	- Число - количество дней, на которые нужно увеличить дату начала.
//   ВызыватьИсключение - Булево - если Истина, вызвать исключение в случае незаполненного графика.
//
// Возвращаемое значение:
//   Дата, Неопределено - дата, увеличенная на количество дней, входящих в график.
//	                      Если выбранный график не заполнен, и ВызыватьИсключение = Ложь, возвращается Неопределено.
//
Функция ДатаПоКалендарю(Знач ГрафикРаботы, Знач ДатаОт, Знач КоличествоДней, ВызыватьИсключение = Ложь) 
	
	Если Не ЗначениеЗаполнено(ГрафикРаботы) Тогда
		Если ВызыватьИсключение Тогда
			ВызватьИсключение НСтр("ru = 'Не указан график работы или производственный календарь.'");
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	
	ДатаОт = НачалоДня(ДатаОт);
	
	Если КоличествоДней = 0 Тогда
		Возврат ДатаОт;
	КонецЕсли;
	
	МассивДней = Новый Массив;
	МассивДней.Добавить(КоличествоДней);
	
	МассивДат = ДатыПоКалендарю(ГрафикРаботы, ДатаОт, МассивДней, ВызыватьИсключение);
	
	Возврат ?(МассивДат <> Неопределено И МассивДат.Количество() > 0, МассивДат[0], Неопределено);
	
КонецФункции

Функция СдвигМеждуДатамиПоКалендарю(Знач ГрафикРаботы, Знач ДатаОт, Знач ДатаДо, ВызыватьИсключение = Ложь) 
	
	Если Не ЗначениеЗаполнено(ГрафикРаботы) Тогда
		Если ВызыватьИсключение Тогда
			ВызватьИсключение НСтр("ru = 'Не указан график работы или производственный календарь.'");
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	// По производственному календарю.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КалендарныеГрафики.Дата КАК ДатаГрафика
	|ИЗ
	|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК КалендарныеГрафики
	|ГДЕ
	|	КалендарныеГрафики.ПроизводственныйКалендарь = &ГрафикРаботы
	|	И КалендарныеГрафики.ВидДня В (ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий), ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный))
	|УПОРЯДОЧИТЬ ПО
	|	КалендарныеГрафики.Дата УБЫВ";
	Запрос.УстановитьПараметр("ГрафикРаботы", ГрафикРаботы);
	МассивДат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ДатаГрафика");
	
	Если МассивДат.Количество() = 0 Или ДатаОт > МассивДат[0] Тогда
		СообщениеОбОшибке = НСтр("ru = 'Производственный календарь «%1» не заполнен на дату %2.'");
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, ГрафикРаботы, Формат(ДатаОт, "ДЛФ=D"));
		Если ВызыватьИсключение Тогда
			ВызватьИсключение СообщениеОбОшибке;
		Иначе
			ОбщегоНазначения.СообщитьПользователю(СообщениеОбОшибке);
			Возврат Неопределено;
		КонецЕсли;
	ИначеЕсли МассивДат.Количество() = 0 Или ДатаДо > МассивДат[0] Тогда
		СообщениеОбОшибке = НСтр("ru = 'Производственный календарь «%1» не заполнен на дату %2.'");
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, ГрафикРаботы, Формат(ДатаДо, "ДЛФ=D"));
		Если ВызыватьИсключение Тогда
			ВызватьИсключение СообщениеОбОшибке;
		Иначе
			ОбщегоНазначения.СообщитьПользователю(СообщениеОбОшибке);
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	сч = 0;
	ДнейОт = Неопределено;
	ДнейДо = Неопределено;
	Для Каждого День Из МассивДат Цикл
		Если ДнейОт <> Неопределено И ДнейДо <> Неопределено Тогда
			Прервать;
		КонецЕсли;
		Если ДатаОт >= День И ДнейОт = Неопределено Тогда
			ДнейОт = сч;
		КонецЕсли;
		Если ДатаДо >= День И ДнейДо = Неопределено  Тогда
			ДнейДо = сч;
		КонецЕсли;
		сч = сч + 1;
	КонецЦикла;
	
	Возврат ДнейОт - ДнейДо;
	
КонецФункции

#КонецОбласти
