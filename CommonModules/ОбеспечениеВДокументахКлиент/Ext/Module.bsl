////////////////////////////////////////////////////////////////////////////////
// Модуль "Обеспечение в документах (Клиент)", содержит процедуры и функции
// обслуживающие работу механизма резервирования и обеспечения потребностей в документах на клиенте"
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Обслуживающие формы документов

// Проверяет необходимость обработки результата закрытия формы обработки "Запрос количества и серий".
//
// Параметры:
//  ВыбранноеЗначение - Неопределено,Структура - результат закрытия формы "Запрос количества и серий".
//
// Возвращаемое значение:
//  Булево - Истина, если требуется обработка, ложь - в противном случае.
//
Функция ЕстьПодобранныеТовары(ВыбранноеЗначение) Экспорт
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ВыбранноеЗначение.ПодобранныеТовары.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Обработчик после записи заказа.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма заказа.
//  ИмяОбработчика - Строка - имя процедуры обработчика ожидания для проверки выполнения заданий
//                            по распределению запасов в форме заказа.
//
Процедура ПослеЗаписи(Форма, ИмяОбработчика) Экспорт
	
	СлужебныеПараметры = Форма.ДоступныеОстаткиПараметрыВстраивания.СлужебныеПараметры;
	Если СлужебныеПараметры.НуженОбработчикОбновленияДоступности Тогда
		
		СлужебныеПараметры.НуженОбработчикОбновленияДоступности = Ложь;
		Форма.ПодключитьОбработчикОжидания(ИмяОбработчика, СлужебныеПараметры.ИнтервалЗапускаОбработчика, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет необходимость обновления колонки "Доступно" или гиперссылки состояния обеспечения после записи заказа.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма заказа.
//  ИмяОбработчика - Строка - имя процедуры обработчика ожидания для проверки выполнения заданий
//                            по распределению запасов в форме заказа.
//  Ошибка - Булево - в функции устанавливается истина, если не удалось распределить запасы.
//
// Возвращаемое значение:
//  Булево - Истина, если требуется обработка, ложь - в противном случае.
//
Функция НужноОбновитьДоступностьПослеЗаписи(Форма, ИмяОбработчика, Ошибка) Экспорт
	
	СлужебныеПараметры = Форма.ДоступныеОстаткиПараметрыВстраивания.СлужебныеПараметры;
	Заказы = СлужебныеПараметры.ЗаказыДляОбновленияДоступности;
	НужноОбновить = ОбеспечениеВДокументахВызовСервера.НужноОбновитьДоступностьПослеЗаписи(Заказы);
	Если Не НужноОбновить Тогда
		Если СлужебныеПараметры.ИнтервалЗапускаОбработчика > 15 Тогда
			НужноОбновить = Истина;
			Ошибка = Истина;
		Иначе
			Форма.ПодключитьОбработчикОжидания(ИмяОбработчика, СлужебныеПараметры.ИнтервалЗапускаОбработчика, Истина);
		КонецЕсли;
	КонецЕсли;
	
	Возврат НужноОбновить;
	
КонецФункции

// Проверяет необходимость обновления колонки "Доступно" после записи заказа.
// Вызывать только совместно с НужноОбновитьДоступностьПослеЗаписи.
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма заказа.
// Возвращаемое значение:
//  Булево - Истина, если требуется обработка, ложь - в противном случае.
//
Функция ОбновлятьКолонкуДоступноПослеРаспределенияЗапасов(Форма) Экспорт
	
	СлужебныеПараметры = Форма.ДоступныеОстаткиПараметрыВстраивания.СлужебныеПараметры;
	Возврат СлужебныеПараметры.ОбновлятьКолонкуДоступноПослеРаспределенияЗапасов;
	
КонецФункции

// Конструктор структуры параметров формы состояния обеспечения.
//
// Параметры:
//  КонтекстИспользования - Строка - условное обозначение места открытия формы состояния обеспечения:
//                                   "ЗАКАЗ", если вызов из формы проведенного заказа,
//                                   "СПИСОКЗАКАЗОВ", если вызов из списка заказов,
//                                   "ТАБЛИЦА", если вызов из формы непроведенного заказа,
//                                   "РАЗДЕЛ", если вызов из раздела.
//
// Возвращаемое значение:
//  Булево - Структура - структура с полями в зависимости от контекста использования.
//
Функция ПараметрыФормыСостояниеОбеспеченияЗаказов(КонтекстИспользования) Экспорт
	
	Если КонтекстИспользования = "ЗАКАЗ" Тогда
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("КонтекстИспользования", КонтекстИспользования);
		ПараметрыФормы.Вставить("Заказ");
		ПараметрыФормы.Вставить("ТолькоПросмотр", Ложь);
		ПараметрыФормы.Вставить("ДоступныеОстаткиПараметрыДокумента", Неопределено);
		ПараметрыФормы.Вставить("КомандыСпискаВидимость", Истина);
		ПараметрыФормы.Вставить("ЗаказыРегистраторыДвижений", Неопределено);
		Возврат ПараметрыФормы;
		
	ИначеЕсли КонтекстИспользования = "СПИСОКЗАКАЗОВ" Тогда
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("КонтекстИспользования", КонтекстИспользования);
		ПараметрыФормы.Вставить("Заказы");
		ПараметрыФормы.Вставить("ТолькоПросмотр", Ложь);
		ПараметрыФормы.Вставить("ДоступныеОстаткиПараметрыДокумента", Неопределено);
		ПараметрыФормы.Вставить("КомандыСпискаВидимость", Неопределено);
		Возврат ПараметрыФормы;
		
	ИначеЕсли КонтекстИспользования = "ТАБЛИЦА" Тогда
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("КонтекстИспользования", КонтекстИспользования);
		ПараметрыФормы.Вставить("АдресТаблицыДвижений");
		ПараметрыФормы.Вставить("Заказ");
		ПараметрыФормы.Вставить("ТолькоПросмотр", Ложь);
		ПараметрыФормы.Вставить("ДоступныеОстаткиПараметрыДокумента", Неопределено);
		ПараметрыФормы.Вставить("КомандыСпискаВидимость", Истина);
		ПараметрыФормы.Вставить("ЗаказыРегистраторыДвижений", Неопределено);
		Возврат ПараметрыФормы;
		
	ИначеЕсли КонтекстИспользования = "РАЗДЕЛ" Тогда
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("КонтекстИспользования", КонтекстИспользования);
		ПараметрыФормы.Вставить("ТолькоПросмотр", Ложь);
		ПараметрыФормы.Вставить("ДоступныеОстаткиПараметрыДокумента", Неопределено);
		ПараметрыФормы.Вставить("КомандыСпискаВидимость", Неопределено);
		Возврат ПараметрыФормы;
		
	КонецЕсли;
	
КонецФункции

// Обработчик нажатия гиперссылки состояния обеспечения в форме заказа.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма заказа.
//
// Возвращаемое значение:
//  см. ПараметрыФормыСостояниеОбеспеченияЗаказов
//
Функция ГиперссылкаСостояниеОбеспеченияНажатие(Форма) Экспорт
	
	Если Форма.Модифицированность
			Или Не Форма.ДоступныеОстаткиПараметрыВстраивания.СлужебныеПараметры.ГотовКОбеспечению
			Или Не ЗначениеЗаполнено(Форма.Объект.Ссылка)
			Или Не ОбеспечениеВДокументахВызовСервера.ГиперссылкаСостояниеОбеспеченияНажатиеДокументПроведен(Форма.Объект.Ссылка) Тогда
		
		ПараметрыФормы = ПараметрыФормыСостояниеОбеспеченияЗаказов("ТАБЛИЦА");
		ПараметрыФормы.Заказ = Форма.Объект.Ссылка;
		
	Иначе
		
		ПараметрыФормы = ПараметрыФормыСостояниеОбеспеченияЗаказов("ЗАКАЗ");
		ПараметрыФормы.Заказ = Форма.Объект.Ссылка;
		
	КонецЕсли;
	
	ПараметрыФормы.ТолькоПросмотр = Форма.ТолькоПросмотр;
	ПараметрыФормы.ДоступныеОстаткиПараметрыДокумента =
		ДоступныеОстаткиПараметрыДокумента(Форма);
	
	Возврат ПараметрыФормы;
	
КонецФункции

// Устанавливает необходимую гиперссылку в заказе для перехода к состоянию обеспечения.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма заказа.
//
Процедура НастроитьГиперссылкиСостояниеОбеспечения(Форма) Экспорт
	
	Если Форма.Модифицированность Тогда
		
		Объект = Форма.Объект; // ДокументОбъект
		СвойстваГиперссылки = ОбеспечениеВДокументахВызовСервера.СвойстваГиперссылкиСостояниеОбеспечения(
			Форма.Модифицированность,
			Объект.Ссылка,
			Форма.ДоступныеОстаткиПараметрыВстраивания.СлужебныеПараметры.ГотовКОбеспечению);
			
		Элементы = Форма.Элементы;
		ИменаЭлементов = Форма.ДоступныеОстаткиПараметрыВстраивания.ИменаЭлементов;
		Элементы[ИменаЭлементов["СтраницыГиперссылкаСостояниеОбеспечения"]].ТекущаяСтраница
			= Элементы[ИменаЭлементов[СвойстваГиперссылки.ИмяСтраницы]];
		
	КонецЕсли;

КонецПроцедуры

// Устанавливает необходимую гиперссылку в заказе для перехода к состоянию обеспечения для записанного документа.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма заказа.
//  ПроблемаЗапускаЗадания - Булево - Истина, если в результате запросов определено, что есть проблемы с запуском распределения запаосв.
//
Процедура НастроитьГиперссылкиСостояниеОбеспеченияПослеЗаписи(Форма, ПроблемаЗапускаЗадания) Экспорт
	
	Объект = Форма.Объект; // ДокументОбъект
	СвойстваГиперссылки = ОбеспечениеВДокументахВызовСервера.СвойстваГиперссылкиСостояниеОбеспечения(
		Ложь,
		Объект.Ссылка,
		Форма.ДоступныеОстаткиПараметрыВстраивания.СлужебныеПараметры.ГотовКОбеспечению,
		ПроблемаЗапускаЗадания);
	Элементы = Форма.Элементы;
	ИменаЭлементов = Форма.ДоступныеОстаткиПараметрыВстраивания.ИменаЭлементов;
	Элементы[ИменаЭлементов["СтраницыГиперссылкаСостояниеОбеспечения"]].ТекущаяСтраница
		= Элементы[ИменаЭлементов[СвойстваГиперссылки.ИмяСтраницы]];
	Элементы[ИменаЭлементов[СвойстваГиперссылки.ИмяГиперссылки]].Заголовок = СвойстваГиперссылки.Заголовок;

КонецПроцедуры

// Обработчик изменения флага Обособленно в строке заказа.
//
// Параметры:
//  ТекущиеДанные - ДанныеФормыЭлементКоллекции - строка заказа.
//
Процедура ОбособленноПриИзменении(ТекущиеДанные) Экспорт
	
	ТекущиеДанные.ВариантОбеспечения = ОбеспечениеВДокументахКлиентСервер.ОбособленноПриИзменении(
		ТекущиеДанные.Обособленно,
		ТекущиеДанные.ВариантОбеспечения,
		ТекущиеДанные.ТипНоменклатуры);
	
КонецПроцедуры

// Возвращает текст "Заполнение обеспечения"
//
// Возвращаемое значение:
//   Строка - текст "Заполнение обеспечения".
//
Функция ТекстЗаполнениеОбеспечения() Экспорт
	Возврат НСтр("ru = 'Заполнение обеспечения'");
КонецФункции

// В зависимости от выполняемой команды с обеспечением в форме заказа формирует текст оповещения пользователя.
// 
// Параметры:
//  Режим - Строка - режим выполнения команды.
//
// Возвращаемое значение:
//   Строка - текст оповещения о заполнении склада, действия или серии в заказе.
//
Функция ТекстОповещенияОбработкиВыборСкладаИСерии(Режим) Экспорт
	
	Текст = Неопределено;
	Если Режим = ОбеспечениеВДокументахКлиентСервер.РежимПодборСкладов() Тогда
		Текст = НСтр("ru = 'Заполнение склада'");
	ИначеЕсли Режим = ОбеспечениеВДокументахКлиентСервер.РежимВыборДействия() Тогда
		Текст = НСтр("ru = 'Заполнение действия'");
	ИначеЕсли Режим = ОбеспечениеВДокументахКлиентСервер.РежимПодборСерий() Тогда
		Текст = НСтр("ru = 'Заполнение серий'");
	КонецЕсли;
	Возврат Текст;
	
КонецФункции

// Показывает вопрос о необходимости заполнять целыми или дробными упаковками при выполнении команд
// "Отгрузить" или "Резервировать" в форме заказа.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма заказа.
//  Коллекция - ДанныеФормыКоллекция - табличная часть заказа, в которой выполняют команды обеспечения.
//  Результат - см. ОбеспечениеВДокументахСервер.ОбеспечениеУстановитьДействиеСтруктураРезультата
//  ИмяПроцедурыОповещения - Строка - процедура оповещения в форме заказа в которую будет передано управление после ответа.
//
// Возвращаемое значение:
//  Булево - Истина, если вопрос задан, ложь, если вопрос не задавался.
//
Функция  ПоказатьВопросЗаполнятьОбеспечениеЦелымиУпаковками(Форма, Коллекция, Результат, ИмяПроцедурыОповещения) Экспорт
	
	Если Не Результат.ЗадаватьВопросОЗаполненииЦелымиУпаковками Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(ИмяПроцедурыОповещения, Форма, Результат);
	
	ТекстВопроса = НСтр("ru = 'В результате заполнения в некоторых строках количество упаковок станет дробным.'");
	
	СписокКнопок = Новый СписокЗначений();
	СписокКнопок.Добавить("ДРОБНЫМИ_УПАКОВКАМИ", НСтр("ru = 'Продолжить'"));
	СписокКнопок.Добавить("ЦЕЛЫМИ_УПАКОВКАМИ",   НСтр("ru = 'Заполнить только целыми упаковками'"));
	
	ЗаголовокВопроса = НСтр("ru = 'Заполнение обеспечения'");
	
	ПараметрыФормы = ОбщегоНазначенияУТКлиент.ПараметрыФормыВопросДаНетОтмена();
	ПараметрыФормы.ТекстВопроса = ТекстВопроса;
	ПараметрыФормы.СписокКнопок = СписокКнопок;
	ПараметрыФормы.ЗаголовокВопроса = ЗаголовокВопроса;
	ПараметрыФормы.ОтображатьКнопкуЗакрытия = Истина;
	ОписаниеОповещенияПромежуточный = Новый ОписаниеОповещения("ОбработкаОповещенияПромежуточный",
		ЭтотОбъект, ОписаниеОповещения);
	ОткрытьФорму("ОбщаяФорма.ВопросДаНетОтмена", ПараметрыФормы, Форма, , , , ОписаниеОповещенияПромежуточный);
	Возврат Истина;
	
КонецФункции

// Показывает вопрос о необходимости снятия флага "Отгружать одной датой" при выполнении команд
// "Отгрузить" в форме заказа.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма заказа.
//  Коллекция - ДанныеФормыКоллекция - табличная часть заказа, в которой выполняют команды обеспечения.
//  Результат - см. ОбеспечениеВДокументахСервер.ОбеспечениеУстановитьДействиеСтруктураРезультата
//  ИмяПроцедурыОповещения - Строка - процедура оповещения в форме заказа в которую будет передано управление после ответа.
//
// Возвращаемое значение:
//  Булево - Истина, если вопрос задан, ложь, если вопрос не задавался.
//
Функция ПоказатьВопросСнятьФлагОтгружатьОднойДатой(Форма, Коллекция, Результат, ИмяПроцедурыОповещения) Экспорт
	
	Если Не Результат.СнятьФлагОтгружатьОднойДатой Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(ИмяПроцедурыОповещения, Форма, Результат);
	
	ШаблонТекстаВопроса = НСтр("ru = 'Дата отгрузки заполняемых строк %1, дата отгрузки остальных строк %2.
		|Можно отгрузить все одной датой %1, можно отгружать частями.'");
	
	СтараяДатаОтгрузкиСтрокой = Формат(Результат.ДатаОтгрузкиВсехСтрокОднойДатой, "ДЛФ=D");
	НоваяДатаОтгрузкиСтрокой = Формат(Результат.ДатаОтгрузкиЗаполненныхСтрок, "ДЛФ=D");
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонТекстаВопроса,
		НоваяДатаОтгрузкиСтрокой,
		?(Результат.ДатаОтгрузкиВсехСтрокОднойДатой = '00010101', НСтр("ru = 'не указана'"), СтараяДатаОтгрузкиСтрокой),
		НоваяДатаОтгрузкиСтрокой);
	
	СписокКнопок = Новый СписокЗначений();
	ШаблонКнопки = НСтр("ru = 'Отгрузить одной датой (%1)'");
	ТекстКнопки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонКнопки, НоваяДатаОтгрузкиСтрокой);
	СписокКнопок.Добавить("ОТГРУЖАТЬ_ОДНОЙДАТОЙ_ДРОБНЫМИ_УПАКОВКАМИ", ТекстКнопки);
	СписокКнопок.Добавить("ОТГРУЖАТЬ_ЧАСТЯМИ_ДРОБНЫМИ_УПАКОВКАМИ", НСтр("ru = 'Отгружать частями'"));
	
	ЗаголовокВопроса = НСтр("ru = 'Установка действий'");
	
	ПараметрыФормы = ОбщегоНазначенияУТКлиент.ПараметрыФормыВопросДаНетОтмена();
	ПараметрыФормы.ТекстВопроса = ТекстВопроса;
	ПараметрыФормы.СписокКнопок = СписокКнопок;
	ПараметрыФормы.ЗаголовокВопроса = ЗаголовокВопроса;
	ПараметрыФормы.ОтображатьКнопкуЗакрытия = Истина;
	ОписаниеОповещенияПромежуточный = Новый ОписаниеОповещения("ОбработкаОповещенияПромежуточный",
		ЭтотОбъект, ОписаниеОповещения);
	ОткрытьФорму("ОбщаяФорма.ВопросДаНетОтмена", ПараметрыФормы, Форма, , , , ОписаниеОповещенияПромежуточный);
	
	Возврат Истина;
	
КонецФункции

// Показывает вопрос о необходимости снятия флага "Отгружать одной датой" при выполнении команд
// "Отгрузить" в форме заказа после вопроса о заполнении целыми или дробными упаковками.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма заказа.
//  Коллекция - ДанныеФормыКоллекция - табличная часть заказа, в которой выполняют команды обеспечения.
//  Результат - см. ОбеспечениеВДокументахСервер.ОбеспечениеУстановитьДействиеСтруктураРезультата
//  Ответ - Строка - результат ответа на вопрос о заполнении целыми или дробными упаковками
//  ИмяПроцедурыОповещения - Строка - процедура оповещения в форме заказа в которую будет передано управление после ответа.
//
// Возвращаемое значение:
//  Булево - Истина, если вопрос задан, ложь, если вопрос не задавался.
//
Функция ПоказатьВопросСнятьФлагОтгружатьОднойДатойПослеВопроса(Форма, Коллекция, Результат, Ответ, ИмяПроцедурыОповещения) Экспорт
	
	Если Ответ = "ДРОБНЫМИ_УПАКОВКАМИ" Тогда
		Возврат ПоказатьВопросСнятьФлагОтгружатьОднойДатой(Форма, Коллекция, Результат, ИмяПроцедурыОповещения);
	КонецЕсли;
		
	Если Не Результат.СнятьФлагОтгружатьОднойДатойЦелымиУпаковками Тогда
		Возврат Ложь;
	КонецЕсли;

	ОписаниеОповещения = Новый ОписаниеОповещения(ИмяПроцедурыОповещения, Форма, Результат);
	
	ШаблонТекстаВопроса = НСтр("ru = 'Дата отгрузки заполняемых строк %1, дата отгрузки остальных строк %2.
		|Можно отгрузить все одной датой %1, можно отгружать частями.'");
	
	СтараяДатаОтгрузкиСтрокой = Формат(Результат.ДатаОтгрузкиВсехСтрокОднойДатой, "ДЛФ=D");
	НоваяДатаОтгрузкиСтрокой = Формат(Результат.ДатаОтгрузкиЗаполненныхСтрок, "ДЛФ=D");
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонТекстаВопроса,
		НоваяДатаОтгрузкиСтрокой,
		?(Результат.ДатаОтгрузкиВсехСтрокОднойДатой = '00010101', НСтр("ru = 'не указана'"), СтараяДатаОтгрузкиСтрокой),
		НоваяДатаОтгрузкиСтрокой);
	
	СписокКнопок = Новый СписокЗначений();
	ШаблонКнопки = НСтр("ru = 'Отгрузить одной датой (%1)'");
	ТекстКнопки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонКнопки, НоваяДатаОтгрузкиСтрокой);
	СписокКнопок.Добавить("ОТГРУЖАТЬ_ОДНОЙДАТОЙ_ЦЕЛЫМИ_УПАКОВКАМИ", ТекстКнопки);
	СписокКнопок.Добавить("ОТГРУЖАТЬ_ЧАСТЯМИ_ЦЕЛЫМИ_УПАКОВКАМИ", НСтр("ru = 'Отгружать частями'"));
	
	ЗаголовокВопроса = НСтр("ru = 'Установка действий'");
	ПараметрыФормы = ОбщегоНазначенияУТКлиент.ПараметрыФормыВопросДаНетОтмена();
	ПараметрыФормы.ТекстВопроса = ТекстВопроса;
	ПараметрыФормы.СписокКнопок = СписокКнопок;
	ПараметрыФормы.ЗаголовокВопроса = ЗаголовокВопроса;
	ПараметрыФормы.ОтображатьКнопкуЗакрытия = Истина;
	ОписаниеОповещенияПромежуточный = Новый ОписаниеОповещения("ОбработкаОповещенияПромежуточный",
		ЭтотОбъект, ОписаниеОповещения);
	ОткрытьФорму("ОбщаяФорма.ВопросДаНетОтмена", ПараметрыФормы, Форма, , , , ОписаниеОповещенияПромежуточный);

	Возврат Истина;
	
КонецФункции

// Вставляет в структуру параметры "МаксимальнаяДатаОтгрузки", "МинимальнаяДатаОтгрузки", исходя из дат отгрузки для строк
// табличной части документа с действием "Отгрузить".
//
// Параметры:
//  Структура - Структура - структура в которую необходимо вставить параметр.
//  Товары - ДанныеФормыКоллекция - табличная часть заказа.
//  ДатаОтгрузкиВсехСтрокОднойДатой - Дата, Неопределено - дата отгрузи, указанная в шапке документа, если таковая есть.
//
Процедура ВставитьПараметрыПодобранныхТоваров(Структура, Товары, ДатаОтгрузкиВсехСтрокОднойДатой) Экспорт
	
	Если Не ЗначениеЗаполнено(ДатаОтгрузкиВсехСтрокОднойДатой) Тогда
		Возврат;
	КонецЕсли;
	
	МаксимальнаяДатаОтгрузки = '00010101';
	МинимальнаяДатаОтгрузки = '39990101';
	ДатаОтгрузкиДляРезервировать = Макс(НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса()), ДатаОтгрузкиВсехСтрокОднойДатой);
	Для Каждого Элемент Из Товары Цикл
		
		ЭтоОтгрузка = Элемент.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Отгрузить");
		ДатаОтгрузки = Элемент.ДатаОтгрузки;
		Если ЭтоОтгрузка И Не ЗначениеЗаполнено(ДатаОтгрузки) Тогда
			ДатаОтгрузки = ДатаОтгрузкиДляРезервировать;
		КонецЕсли;
		
		МаксимальнаяДатаОтгрузки = Макс(МаксимальнаяДатаОтгрузки, ДатаОтгрузки);
		Если ДатаОтгрузки > '00010101' Тогда
			МинимальнаяДатаОтгрузки = Мин(МинимальнаяДатаОтгрузки, ДатаОтгрузки);
		КонецЕсли;
		
	КонецЦикла;
	Если МинимальнаяДатаОтгрузки = '39990101' Тогда
		МинимальнаяДатаОтгрузки = '00010101';
	КонецЕсли;
	
	Структура.Вставить("МаксимальнаяДатаОтгрузки", МаксимальнаяДатаОтгрузки);
	Структура.Вставить("МинимальнаяДатаОтгрузки",  МинимальнаяДатаОтгрузки);
	
КонецПроцедуры

// Возвращает параметры встраивания подсистемы обеспечения в заказ, кэшированные в форме документа.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма заказа.
//
// Возвращаемое значение:
//  Структура - структура с полями:
//   * ПараметрыВстраивания - см. ОбеспечениеВДокументахСервер.ДоступныеОстаткиПараметрыВстраивания
//   * ДанныеПрограммногоОбъекта - см. ОбеспечениеВДокументахКлиентСервер.ДанныеПрограммногоОбъекта.
//
Функция ДоступныеОстаткиПараметрыДокумента(Форма) Экспорт
	
	ДанныеПрограммногоОбъекта = Неопределено;
	ПараметрыВстраивания = Форма.ДоступныеОстаткиПараметрыВстраивания;
	
	КоллекцияНаФорме = ОбеспечениеВДокументахКлиентСервер.КоллекцияНаФорме(Форма, ПараметрыВстраивания);
	СтрокаТабЧасти = Неопределено;
	Если КоллекцияНаФорме.Количество() > 0 Тогда
		СтрокаТабЧасти = КоллекцияНаФорме[0];
	КонецЕсли;
		ПараметрыДействия = Новый Структура("Форма,ПараметрыВстраивания", Форма, ПараметрыВстраивания);
		ДанныеПрограммногоОбъекта = ОбеспечениеВДокументахКлиентСервер.ДанныеПрограммногоОбъекта(ПараметрыДействия, СтрокаТабЧасти);
	Возврат Новый Структура("ПараметрыВстраивания,ДанныеПрограммногоОбъекта",
		ПараметрыВстраивания, ДанныеПрограммногоОбъекта);
	
КонецФункции

// Структура для обработки дат отгрузки после выполнения команд обеспечения в заказе.
//
// Параметры:
//  Ответ - Строка - ответ на необходимость снимать флаг отгружать одной датой в форме заказа.
//
// Возвращаемое значение:
//  Структура - структура с полями:
//   * СнятьФлагОтгружатьОднойДатой - Булево - Истина если снимать флаг отгрузки одной датой нужно.
//   * ЗаполнитьДатуОтгрузкиОднойДатой - Булево - Истина если снимать флаг отгрузки одной датой не нужно.
//
Функция ПараметрыОбработкиДатОтгрузкиПослеЗаполненияОбеспечения(Ответ) Экспорт
	
	ПараметрыЗаполнения = Новый Структура();
	ПараметрыЗаполнения.Вставить("СнятьФлагОтгружатьОднойДатой",    Ответ = "КодВозвратаДиалога_Да");
	ПараметрыЗаполнения.Вставить("ЗаполнитьДатуОтгрузкиОднойДатой", Ответ = "КодВозвратаДиалога_Нет");
	Возврат ПараметрыЗаполнения;
	
КонецФункции

// Показывает вопрос о необходимости снятия флага "Отгружать одной датой" при установке действия обеспечения в строке
// заказа если открывается форма указания складов и серий.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма заказа.
//  ВыбранноеЗначение - Структура - результат выбора действия в форме обработки "ЗапросКоличестваИСерий".
//  ПараметрыФормы - см. ОбеспечениеВДокументахСервер.ПараметрыВыбораОбеспечения
//  ИмяПроцедурыОповещения - Строка - процедура оповещения в форме заказа в которую будет передано управление после ответа.
//
Процедура ПоказатьВопросСнятьФлагОтгружатьОднойДатойПослеВыбораОбеспечения(Форма, ВыбранноеЗначение, ПараметрыФормы, ИмяПроцедурыОповещения) Экспорт
	
	Параметры = Новый Структура("ВыбранноеЗначение,ПараметрыФормы", ВыбранноеЗначение, ПараметрыФормы);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(ИмяПроцедурыОповещения, Форма, Параметры);
	
	ПараметрыУстановкиДатОтгрузки = ВыбранноеЗначение.ПараметрыУстановкиДатОтгрузки;
	Если ПараметрыФормы.Режим = ОбеспечениеВДокументахКлиентСервер.РежимВыборДействия()
		И ПараметрыУстановкиДатОтгрузки.ДатаОтгрузкиВсехСтрокОднойДатой <> Неопределено
		И ПараметрыУстановкиДатОтгрузки.ДатаОтгрузкиВсехСтрокОднойДатой < ПараметрыУстановкиДатОтгрузки.ДатаОтгрузкиНовыхСтрок Тогда
		
		Если ПараметрыУстановкиДатОтгрузки.ЗаполнятьДатуОтгрузкиВсехСтрокДатойНовыхСтрок Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, "КодВозвратаДиалога_Нет");
		Иначе
			ПоказатьВопросОбОтгрузкеОднойДатой(
				ОписаниеОповещения,
				ПараметрыУстановкиДатОтгрузки.ДатаОтгрузкиВсехСтрокОднойДатой,
				ПараметрыУстановкиДатОтгрузки.ДатаОтгрузкиНовыхСтрок,
				ПараметрыУстановкиДатОтгрузки.ДатаОтгрузкиНовыхСтрок,
				НСтр("ru = 'Выбор действия'"));
		КонецЕсли;
			
	Иначе
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

// Показывает вопрос о необходимости снятия флага "Отгружать одной датой" после закрытия формы подбора товаров.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма заказа.
//  ДанныеПодбора - Структура - результат закрытия формы подбора товаров в документ
//  ИмяПроцедурыОповещения - Строка - процедура оповещения в форме заказа в которую будет передано управление после ответа.
//
Процедура ПоказатьВопросСнятьФлагОтгружатьОднойДатойПослеПодбора(Форма, ДанныеПодбора, ИмяПроцедурыОповещения) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения(ИмяПроцедурыОповещения, Форма, ДанныеПодбора);
	
	Если ЗначениеЗаполнено(ДанныеПодбора.ДатаОтгрузкиВсехСтрокОднойДатой) И ДанныеПодбора.МинимальнаяДатаОтгрузки <> ДанныеПодбора.МаксимальнаяДатаОтгрузки Тогда
		
		СписокКнопок = Новый СписокЗначений();
		ТекстВопроса = НСтр("ru = 'Даты отгрузки подобранных строк различаются.'");
		СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Отгружать частями'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
		
		ЗаголовокВопроса = НСтр("ru = 'Подбор товаров'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок,,, ЗаголовокВопроса);
		
	ИначеЕсли ЗначениеЗаполнено(ДанныеПодбора.ДатаОтгрузкиВсехСтрокОднойДатой)
				И ЗначениеЗаполнено(ДанныеПодбора.МаксимальнаяДатаОтгрузки)
				И ДанныеПодбора.МаксимальнаяДатаОтгрузки <> ДанныеПодбора.ДатаОтгрузкиВсехСтрокОднойДатой Тогда
				
		ПоказатьВопросОбОтгрузкеОднойДатой(
			ОписаниеОповещения,
			ДанныеПодбора.ДатаОтгрузкиВсехСтрокОднойДатой,
			ДанныеПодбора.МаксимальнаяДатаОтгрузки,
			Макс(ДанныеПодбора.ДатаОтгрузкиВсехСтрокОднойДатой, ДанныеПодбора.МаксимальнаяДатаОтгрузки),
			НСтр("ru = 'Подбор товаров'"));
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

// Показывает вопрос о необходимости снятия флага "Отгружать одной датой" после выполнения команды Отгрузить в форме состояния обеспечения.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма заказа.
//  ПараметрыУстановкиДат - Структура - структура с полями:
//   * ДатаОтгрузкиВсехСтрокОднойДатой - Дата - дата отгрузки в шапке заказа.
//   * ДатаОтгрузкиНовыхСтрок - Дата - дата отгрузки устанавливаемая из состояния обеспечения для изменяемых строк заказа.
//  КодДействия - Строка  - строка "ДЕЙСТВИЕ_ОТГРУЗИТЬ".
//  ИмяПроцедурыОповещения - Строка - процедура оповещения в форме заказа в которую будет передано управление после ответа.
//
Процедура ПоказатьВопросСнятьФлагОтгружатьОднойДатойВСостоянииОбеспечения(Форма, ПараметрыУстановкиДат, КодДействия, ИмяПроцедурыОповещения) Экспорт
	
	Текст = НСтр("ru = 'Дата отгрузки для выбранных позиций %1, дата отгрузки в документе %2.
		|Можно отгрузить все одной датой %3, можно снять флаг отгрузки одной датой в документе.'");
	ТекстКнопки = НСтр("ru = 'Снять флаг отгрузки одной датой.'");
	
	ОписаниеОповещения = Новый ОписаниеОповещения(ИмяПроцедурыОповещения, Форма, КодДействия);
	
	Если ПараметрыУстановкиДат.ДатаОтгрузкиВсехСтрокОднойДатой <> Неопределено
			И ПараметрыУстановкиДат.ДатаОтгрузкиВсехСтрокОднойДатой <> ПараметрыУстановкиДат.ДатаОтгрузкиНовыхСтрок Тогда
		
		ПоказатьВопросОбОтгрузкеОднойДатой(
			ОписаниеОповещения,
			ПараметрыУстановкиДат.ДатаОтгрузкиВсехСтрокОднойДатой,
			ПараметрыУстановкиДат.ДатаОтгрузкиНовыхСтрок,
			Макс(ПараметрыУстановкиДат.ДатаОтгрузкиВсехСтрокОднойДатой, ПараметрыУстановкиДат.ДатаОтгрузкиНовыхСтрок),
			НСтр("ru = 'Состояние обеспечения'"),
			Текст,
			ТекстКнопки);
			
	Иначе
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

// Показывает вопрос о необходимости снятия флага "Отгружать одной датой" при установке действия обеспечения в списке заказов.
//
// Параметры:
//  Заказы - Массив из ЛюбаяСсылка - массив заказов для которых выполняется действие.
//  КодДействия - Строка - условное обозначение команды "ДЕЙСТВИЕ_КОБЕСПЕЧЕНИЮ" или "ДЕЙСТВИЕ_ОТГРУЗИТЬ"
//                         или "ДЕЙСТВИЕ_РЕЗЕРВИРОВАТЬ" или "ДЕЙСТВИЕ_НЕОБЕСПЕЧИВАТЬ".
//  ПараметрыДат - Структура - ОбеспечениеВДокументахВызовСервера.ВыполнитьДействиеВСпискеЗаказов.
//  Форма - ФормаКлиентскогоПриложения - форма списка заказов.
//  ОписаниеОповещения - ОписаниеОповещения - описание оповещения после вопроса
//
Процедура ПоказатьВопросСнятьФлагОтгружатьОднойДатойДляСпискаЗаказов(Заказы, КодДействия, ПараметрыДат, Форма, ОписаниеОповещения = Неопределено) Экспорт
	
	Параметры = Новый Структура();
	Параметры.Вставить("Заказы", Заказы);
	Параметры.Вставить("КодДействия", КодДействия);
	Параметры.Вставить("Форма", Форма);
	Параметры.Вставить("ПараметрыВстраивания", Неопределено);
	Если ОписаниеОповещения = Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВопросаВСпискеЗаказов", ЭтотОбъект, Параметры); 
	КонецЕсли;
	
	СписокКнопок = Новый СписокЗначений();
	ШаблонТекстаВопроса = НСтр("ru = 'В результате заполнения документов даты отгрузки в строках будут отличаться.
		|Можно отгрузить все одной датой %1, можно отгружать частями.'");
	
	ОднаДатаСтрокой = Формат(ПараметрыДат.ДатаОтгрузкиНовыхСтрок, "ДЛФ=D");
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаВопроса, ОднаДатаСтрокой);
	
	СписокКнопок = Новый СписокЗначений();
	ШаблонКнопки = НСтр("ru = 'Отгрузить одной датой (%1)'");
	ТекстКнопки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонКнопки, ОднаДатаСтрокой);
	СписокКнопок.Добавить("КодВозвратаДиалога_Нет", ТекстКнопки);
	СписокКнопок.Добавить("КодВозвратаДиалога_Да", НСтр("ru = 'Отгружать частями'"));
	
	ЗаголовокВопроса = НСтр("ru = 'Заполнение действия в списке заказов'");
	
	ПараметрыФормы = ОбщегоНазначенияУТКлиент.ПараметрыФормыВопросДаНетОтмена();
	ПараметрыФормы.ТекстВопроса = ТекстВопроса;
	ПараметрыФормы.СписокКнопок = СписокКнопок;
	ПараметрыФормы.ЗаголовокВопроса = ЗаголовокВопроса;
	ПараметрыФормы.ОтображатьКнопкуЗакрытия = Истина;
	ОписаниеОповещенияПромежуточный = Новый ОписаниеОповещения("ОбработкаОповещенияПромежуточный",
		ЭтотОбъект, ОписаниеОповещения);
	ОткрытьФорму("ОбщаяФорма.ВопросДаНетОтмена", ПараметрыФормы, Форма, , , , ОписаниеОповещенияПромежуточный);

КонецПроцедуры

// Проверяет что при выполнении действий обеспечения над строками заказа нужно задать вопрос об отгрузке одной датой,
// целыми либо дробными упаковками.
//
// Параметры:
//  РезультатВыполненияДействий - см. ОбеспечениеВДокументахВызовСервера.ВыполнитьДействиеВСпискеЗаказов
//
// Возвращаемое значение:
//  Булево - Истина, если вопрос нужен, Ложь - в противном случае.
//
Функция РезультатВыполненияДействийНуженВопрос(РезультатВыполненияДействий) Экспорт
	
	Возврат ТипЗнч(РезультатВыполненияДействий) = Тип("Структура") И РезультатВыполненияДействий.Свойство("НуженВопрос");
	
КонецФункции

// Обработчик выбора варианта обеспечения в строке заказа.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма списка заказов.
//  ТекущиеДанные - ДанныеФормыЭлементКоллекции - строка в которой выбрали вариант обеспечения.
//  ВыбранноеЗначение - Структура - структура выбора варианта обеспечения.
//
Процедура ВариантОбеспеченияОбработкаВыбора(Форма, ТекущиеДанные, ВыбранноеЗначение) Экспорт
	
	СлужебныеПараметры = Форма.ДоступныеОстаткиПараметрыВстраивания.СлужебныеПараметры;
	СлужебныеПараметры.ВариантОбеспеченияДоИзменения = ТекущиеДанные.ВариантОбеспечения;
	СлужебныеПараметры.ВариантОбеспеченияВыбранноеЗначение = ВыбранноеЗначение;
	
КонецПроцедуры

// Обработчик при изменении варианта обеспечения в строке заказа.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма списка заказов.
//  ПараметрыФормы - см. ОбеспечениеВДокументахСервер.ПараметрыВыбораОбеспечения
//  ИмяПроцедурыВыбораСкладаИСерии - Строка - имя процедуры, отвечающей в форме заказа за обработку закрытия формы выбора складов и серий
//  ЗадаватьВопросОбОтгрузкеОднойДатой - Булево - Истина, Если нужно задавать вопрос об отгрузке одной датой
//  ИмяПроцедурыПослеВопроса - Строка - имя процедуры из модуля формы заказа которую нужно вызывать после окончания обработки 
//
Процедура ВариантОбеспеченияПриИзменении(
			Форма,
			ПараметрыФормы,
			ИмяПроцедурыВыбораСкладаИСерии,
			ЗадаватьВопросОбОтгрузкеОднойДатой,
			ИмяПроцедурыПослеВопроса) Экспорт
	
	ПараметрыВстраивания = Форма.ДоступныеОстаткиПараметрыВстраивания;
	СлужебныеПараметры = ПараметрыВстраивания.СлужебныеПараметры;
	Если ПараметрыВстраивания.ИмяТаблицыФормы <> Неопределено Тогда
		ТекущиеДанные = Форма.Элементы[ПараметрыВстраивания.ИмяТаблицыФормы].ТекущиеДанные;
	Иначе
		ТекущиеДанные = Форма.Объект;
	КонецЕсли;
	
	Если СлужебныеПараметры.ВариантОбеспеченияВыбранноеЗначение = Неопределено Тогда
		Значение = ОбеспечениеВДокументахКлиентСервер.ЗначениеВыбораВариантаОбеспечения();
		Значение.ВариантОбеспечения = ТекущиеДанные.ВариантОбеспечения;
		СлужебныеПараметры.ВариантОбеспеченияВыбранноеЗначение = Значение;
	Иначе
		Если СлужебныеПараметры.ВариантОбеспеченияВыбранноеЗначение.ОткрытьФормуВыбораСкладаИСерий
				Или СлужебныеПараметры.ВариантОбеспеченияВыбранноеЗначение.ОткрытьФормуРазбиенияСтроки Тогда
			ТекущиеДанные.ВариантОбеспечения = СлужебныеПараметры.ВариантОбеспеченияДоИзменения;
		КонецЕсли;
	КонецЕсли;
	ВариантОбеспеченияВыбранноеЗначение = СлужебныеПараметры.ВариантОбеспеченияВыбранноеЗначение;
	
	Если ВариантОбеспеченияВыбранноеЗначение.ОткрытьФормуВыбораСкладаИСерий Тогда
		
		Если ПараметрыФормы <> Неопределено Тогда
			
			ПараметрыФормы.ПодборСерий = Истина;
			ПараметрыФормы.ВариантОбеспеченияПоДокументу = ВариантОбеспеченияВыбранноеЗначение.ВариантОбеспечения;
			
			ОткрытьФорму(
				"Обработка.ЗапросКоличестваИСерий.Форма",
				ПараметрыФормы,
				Форма,
				,
				,
				,
				Новый ОписаниеОповещения(ИмяПроцедурыВыбораСкладаИСерии, Форма, ПараметрыФормы));
			
		КонецЕсли;
		
	ИначеЕсли ВариантОбеспеченияВыбранноеЗначение.ОткрытьФормуРазбиенияСтроки Тогда
		
		ПараметрыОбработки = Новый Структура();
		Если ЗадаватьВопросОбОтгрузкеОднойДатой Тогда
			ДополнительныеПараметры = Новый Структура("Форма,ИмяПроцедурыПослеВопроса", Форма, ИмяПроцедурыПослеВопроса);
			ОповещениеПослеОбработки = Новый ОписаниеОповещения(
				"ОбработатьРазбиениеВариантаОбеспечения",
				ЭтотОбъект,
				ДополнительныеПараметры);
		Иначе
			ОповещениеПослеОбработки = Новый ОписаниеОповещения(ИмяПроцедурыПослеВопроса, Форма);
		КонецЕсли;
		ПараметрыОбработки.Вставить("ОповещениеПослеРазбиения", ОповещениеПослеОбработки);
		ПараметрыОбработки.Вставить("Форма", Форма);
		ВвестиКоличествоДляРазбиения(ПараметрыОбработки);
		
	ИначеЕсли ЗадаватьВопросОбОтгрузкеОднойДатой Тогда
		
		ПоказатьВопросСнятьФлагОтгружатьОднойДатойПриУказанииВариантаОбеспечения(
			Форма,
			ВариантОбеспеченияВыбранноеЗначение,
			ИмяПроцедурыПослеВопроса);
			
	Иначе
		
		ОповещениеПослеОбработки = Новый ОписаниеОповещения(ИмяПроцедурыПослеВопроса, Форма);
		ВыполнитьОбработкуОповещения(ОповещениеПослеОбработки);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает признак необходимости открытия формы выбора склада и серии в заказе.
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
// Возвращаемое значение:
//  Булево - Истина, если нужно открыть форму выбора склада и серии.
Функция ОткрытьФормуВыбораСкладаИСерий(Форма) Экспорт
	
	ПараметрыВстраивания = Форма.ДоступныеОстаткиПараметрыВстраивания;
	СлужебныеПараметры = ПараметрыВстраивания.СлужебныеПараметры;
	Результат = СлужебныеПараметры.ВариантОбеспеченияВыбранноеЗначение <> Неопределено
		И СлужебныеПараметры.ВариантОбеспеченияВыбранноеЗначение.ОткрытьФормуВыбораСкладаИСерий;
	
	Если Результат Тогда
		Если ПараметрыВстраивания.ИмяТаблицыФормы = Неопределено Тогда
			ТекущиеДанные = Форма.Объект;
		Иначе
			ТекущиеДанные = Форма.Элементы[ПараметрыВстраивания.ИмяТаблицыФормы].ТекущиеДанные;
		КонецЕсли;
		ТекущиеДанные.ВариантОбеспечения = СлужебныеПараметры.ВариантОбеспеченияДоИзменения;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверяет необходимость обновления колонки "Доступно" в форме заказа по результатам выполнения
// действия по проверке необходимости обновления колонки "Доступно" в структуре действий.
//
// Параметры:
//  СтруктураДействий - Структура - структура выполненных действий.
//
// Возвращаемое значение:
//  Булево - Истина, если нужно обновить колонку доступно.
//
Функция ТребуетсяОбновитьКолонкуДоступно(СтруктураДействий) Экспорт
	
	Результат = СтруктураДействий.Свойство("ПроверитьНеобходимостьОбновленияКолонкиДоступно")
		И СтруктураДействий.ПроверитьНеобходимостьОбновленияКолонкиДоступно.ОбновитьКолонкуДоступно;
		
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обслуживающие формы списков документов

// Если не запущено фоновое задание распределения запасов то запускает его.
Процедура ПроверитьЗапуститьФоновоеЗаданиеРаспределенияЗапасов() Экспорт
	
	ОбеспечениеВДокументахВызовСервера.ПроверитьЗапуститьФоновоеЗаданиеРаспределенияЗапасов();
	
КонецПроцедуры

// Проверяет выполнение задания распределения запасов по заказам в списке заказов.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма списка заказов.
//  Список - ТаблицаФормы - список заказов на форме.
//
Процедура ПроверитьВыполнениеЗаданияРаспределенияЗапасовПоЗаказам(Форма, Список) Экспорт
	
	МассивСсылок = Форма.ЗаказыДляПроверкиЗаданияРаспределенияЗапасов.ВыгрузитьЗначения();
	Если ОбеспечениеВДокументахВызовСервера.ЕстьЗаданияПоЗаказам(МассивСсылок) Тогда
		Форма.ИнтервалПроверкиЗаданияРаспределенияЗапасов = Форма.ИнтервалПроверкиЗаданияРаспределенияЗапасов + 1;
		Форма.ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияРаспределенияЗапасовПоЗаказам",
			Форма.ИнтервалПроверкиЗаданияРаспределенияЗапасов, Истина);
	Иначе
		
		Список.Обновить();
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события изменения списка.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма списка заказов.
//  ПолныеИменаДокументов - Строка - полные имена документов отображаемых списком через запятую.
//
Процедура СписокПриИзменении(Форма, ПолныеИменаДокументов) Экспорт
	
	МассивСсылок = ОбеспечениеВДокументахВызовСервера.ЗаданияПоЗаказамПоТипу(ПолныеИменаДокументов);
	Если МассивСсылок.Количество() > 0 Тогда
		
		Форма.ЗаказыДляПроверкиЗаданияРаспределенияЗапасов.ЗагрузитьЗначения(МассивСсылок);
		Форма.ИнтервалПроверкиЗаданияРаспределенияЗапасов = 1;
		Форма.ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияРаспределенияЗапасовПоЗаказам",
			Форма.ИнтервалПроверкиЗаданияРаспределенияЗапасов, Истина);
			
	КонецЕсли;
	
КонецПроцедуры

// Сообщает о результатах выполнения действий обеспечения в списке заказов.
//
// Параметры:
//  РезультатВыполненияДействий - см. ОбеспечениеВДокументахВызовСервера.ВыполнитьДействиеВСпискеЗаказов
//
Процедура СообщитьОРезультатахВыполненияДействийВСпискеЗаказов(РезультатВыполненияДействий) Экспорт
	
	Для Каждого Ошибка Из РезультатВыполненияДействий.СписокОшибок Цикл
		
		Текст = Ошибка.Текст;
		КлючДанных = Ошибка.Ссылка;
		
		Поле = "";
		Если Ошибка.Свойство("Поле") Тогда
			Поле = Ошибка.Поле;
		КонецЕсли;
		
		ПутьКДанным = "";
		Если Ошибка.Свойство("ПутьКДанным") Тогда
			ПутьКДанным = Ошибка.ПутьКДанным;
		КонецЕсли;
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(Текст, КлючДанных, Поле, ПутьКДанным);
		
	КонецЦикла;
	
	Текст = СтрШаблон(НСтр("ru = 'Обработано документов: %1.'"), РезультатВыполненияДействий.КоличествоОбработано);
	ПоказатьОповещениеПользователя(НСтр("ru = 'Заполнение действия'"), Неопределено, Текст);
	
КонецПроцедуры

// Дополняет структуру результата выполнения действий обеспечения в списке , используется если список обрабатывается
// порциями.
//
// Параметры:
//  Приемник - см. ОбеспечениеВДокументахВызовСервера.ВыполнитьДействиеВСпискеЗаказов
//  Источник - см. ОбеспечениеВДокументахВызовСервера.ВыполнитьДействиеВСпискеЗаказов
//
Процедура ДополнитьРезультатыВыполненияДействийВСпискеЗаказов(Приемник, Источник) Экспорт
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Приемник.СписокОшибок, Источник.СписокОшибок);
	Приемник.КоличествоОбработано = Приемник.КоличествоОбработано + Источник.КоличествоОбработано;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочие

// Отркывает обработку заполнения корректировки назначения.
//  Параметры:
//   ЭтоРезервирование - Булево - Истина, если нужно открыть обработку для резервирования, ложь, если для снятия резерва.
//   Ссылка - ОпределяемыйТип.ОжидаемаяОтгрузка - ссылка на заказ, в который встроены команды обособленного резервироваия и снятия резерва.
//   ОписаниеКоманды - см. ОбеспечениеКлиент.ПараметрыФормыЗаполненияКорректировкиНазначенияТоваров
Процедура ОткрытьЗаполнениеКорректировкиНазначения(ЭтоРезервирование, Ссылка, ОписаниеКоманды) Экспорт
	
	РезультатПроверки = ОбеспечениеВДокументахВызовСервера.ПроверкаВозможностиОткрытияЗаполнениеКорректировкиНазначения(
		ЭтоРезервирование, Ссылка);
	
	Если ЭтоРезервирование Тогда
		
		Если РезультатПроверки.ЕстьТоварыКОбособленномуОбеспечению Тогда
			СозданиеНаОснованииУТКлиент.ОткрытьМастерРезервирования(ОписаниеКоманды);
		ИначеЕсли РезультатПроверки.ЕстьТоварыКСтороннемуОбособленномуОбеспечению Тогда
			ОбеспечениеКлиент.СообщитьОбОтсутствииТовараКОбособленномуОбеспечениюПоТекущемуЗаказу(Истина);
		Иначе
			ОбеспечениеКлиент.СообщитьОбОтсутствииТовараКОбособленномуОбеспечению();
		КонецЕсли;
	
	Иначе
		
		Если РезультатПроверки.ЕстьТоварыКСнятиюРезерва Тогда
			СозданиеНаОснованииУТКлиент.ОткрытьМастерСнятияРезерва(ОписаниеКоманды);
		ИначеЕсли РезультатПроверки.ЕстьТоварыКСтороннемуСнятиюРезерва Тогда
			ОбеспечениеКлиент.СообщитьОбОтсутствииТовараКОбособленномуОбеспечениюПоТекущемуЗаказу(Ложь);
		Иначе
			ОбеспечениеКлиент.СообщитьОбОтсутствииТовараКСнятиюРезерва();
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ОбработатьРазбиениеВариантаОбеспечения(ВариантОбеспеченияВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	ПоказатьВопросСнятьФлагОтгружатьОднойДатойПриУказанииВариантаОбеспечения(
		ДополнительныеПараметры.Форма,
		ВариантОбеспеченияВыбранноеЗначение,
		ДополнительныеПараметры.ИмяПроцедурыПослеВопроса);
	
КонецПроцедуры

Процедура ВвестиКоличествоДляРазбиения(ПараметрыОбработки) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("ВвестиКоличествоДляРазбиенияПослеВвода", ЭтотОбъект, ПараметрыОбработки);
	ПараметрыВстраивания = ПараметрыОбработки.Форма.ДоступныеОстаткиПараметрыВстраивания;
	ВариантОбеспеченияВыбранноеЗначение = ПараметрыВстраивания.СлужебныеПараметры.ВариантОбеспеченияВыбранноеЗначение;
	Если ВариантОбеспеченияВыбранноеЗначение.ВариантОбеспечения
			= ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Отгрузить") Тогда 
		ЗаголовокВвода = НСтр("ru = 'Ввод количества для отгрузки'");
	Иначе
		ЗаголовокВвода = НСтр("ru = 'Ввод количества для резервирования'");
	КонецЕсли;
	ПоказатьВводЧисла(Оповещение,
		ВариантОбеспеченияВыбранноеЗначение.ДоступноеКоличествоПриРазбиенииСтроки,
		ЗаголовокВвода, 15, 3);
	
КонецПроцедуры

Процедура ВвестиКоличествоДляРазбиенияПослеВвода(Количество, ПараметрыОбработки) Экспорт
	
	Если Количество = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВстраивания = ПараметрыОбработки.Форма.ДоступныеОстаткиПараметрыВстраивания;
	ВариантОбеспеченияВыбранноеЗначение = ПараметрыВстраивания.СлужебныеПараметры.ВариантОбеспеченияВыбранноеЗначение; // Структура
	ДоступноеКоличество = ВариантОбеспеченияВыбранноеЗначение.ДоступноеКоличествоПриРазбиенииСтроки;
	ОбщееКоличество = ВариантОбеспеченияВыбранноеЗначение.ОбщееКоличествоПриРазбиенииСтроки;
	
	ТекстСообщения = Неопределено;
	Если Количество = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Количество в новой строке не может быть равно нулю.'");
	ИначеЕсли Количество < 0 Тогда
		ТекстСообщения = НСтр("ru = 'Количество в новой строке не может быть отрицательным.'");
	ИначеЕсли Количество > ОбщееКоличество Тогда
		ТекстСообщения = НСтр("ru = 'Количество в новой строке не может быть больше количества в текущей строке.'");
	ИначеЕсли Количество > ДоступноеКоличество + Количество
				* ВариантОбеспеченияВыбранноеЗначение.ДопустимоеОтклонениеПриВыбореВариантаОбеспечения / 100 Тогда
		ТекстСообщения = НСтр("ru = 'Количество в новой строке не может быть больше доступного количества в текущей строке.'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		Оповещение = Новый ОписаниеОповещения("ВвестиКоличествоДляРазбиения", ЭтотОбъект, ПараметрыОбработки);
		ПоказатьПредупреждение(Оповещение, ТекстСообщения);
	Иначе
		
		ВариантОбеспеченияВыбранноеЗначение.ОткрытьФормуРазбиенияСтроки = Ложь;
		Если Количество <> ОбщееКоличество Тогда
			ВариантОбеспеченияВыбранноеЗначение.РазбитьСтроку = Истина;
			ВариантОбеспеченияВыбранноеЗначение.Доступно = Количество;
		КонецЕсли;
		ВыполнитьОбработкуОповещения(ПараметрыОбработки.ОповещениеПослеРазбиения, ВариантОбеспеченияВыбранноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаОповещенияПромежуточный(Ответ, ОписаниеОповещения) Экспорт
	
	Если Ответ <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Ответ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаОповещенияПослеВыбораОбеспечения(Ответ, ОписаниеОповещения) Экспорт
	
	Если Ответ = Неопределено Тогда
		СлужебныеПараметры = ОписаниеОповещения.Модуль.ДоступныеОстаткиПараметрыВстраивания.СлужебныеПараметры;
		Если СлужебныеПараметры.Свойство("ВариантОбеспеченияДоИзменения") Тогда
			СлужебныеПараметры.ВариантОбеспеченияВыбранноеЗначение.ВариантОбеспечения = СлужебныеПараметры.ВариантОбеспеченияДоИзменения;
			ОписаниеОповещения.Модуль.Модифицированность = Ложь;
		КонецЕсли;
	КонецЕсли;
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, Ответ);
	
КонецПроцедуры

Функция СтруктураПолейПроверитьНеобходимостьОбновленияКолонкиДоступно() Экспорт
	
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура");
	СтруктураПолей.Вставить("Характеристика");
	СтруктураПолей.Вставить("ВариантОбеспечения");
	Возврат СтруктураПолей;
	
КонецФункции

Процедура ПослеВопросаВСпискеЗаказов(Ответ, Параметры) Экспорт
	
	ПараметрыПроцедуры = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(Параметры);
	Форма = Параметры.Форма;
	ПараметрыПроцедуры.Удалить("Форма");

	ПараметрыЗаполнения = Новый Структура();
	ПараметрыЗаполнения.Вставить("СнятьФлагОтгружатьОднойДатой",    Ответ = "КодВозвратаДиалога_Да");
	ПараметрыЗаполнения.Вставить("ЗаполнитьДатуОтгрузкиОднойДатой", Ответ = "КодВозвратаДиалога_Нет");
	ПараметрыПроцедуры.Вставить("ПараметрыЗаполнения", ПараметрыЗаполнения);
	РезультатВыполненияДействий = ОбеспечениеВДокументахВызовСервера.ВыполнитьДействиеДляЗаказовПослеВопросаФоновымЗаданием(
		ПараметрыПроцедуры, Форма.УникальныйИдентификатор);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
	ДополнительныеПараметры = Новый Структура("Форма,Заказы",
		Форма, ПараметрыПроцедуры.Заказы);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатВыполненияДействий,
		Новый ОписаниеОповещения("ПослеВопросаВСпискеЗаказовЗавершение", ЭтотОбъект, ДополнительныеПараметры),
		ПараметрыОжидания);
	
КонецПроцедуры

Процедура ПослеВопросаВСпискеЗаказовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		
		Возврат;
		
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		
		ПоказатьПредупреждение(, Результат.КраткоеПредставлениеОшибки);
		
	Иначе
		
		Форма = ДополнительныеПараметры.Форма;
		РезультатВыполненияДействий = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		Форма.ЗаказыДляПроверкиЗаданияРаспределенияЗапасов.ЗагрузитьЗначения(ДополнительныеПараметры.Заказы);
		Форма.ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияРаспределенияЗапасовПоЗаказам", 1, Истина);
		СообщитьОРезультатахВыполненияДействийВСпискеЗаказов(РезультатВыполненияДействий);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыФормыРезервы() Экспорт
	
	Параметры = Новый Структура();
	Параметры.Вставить("Номенклатура");
	Параметры.Вставить("Характеристика");
	Параметры.Вставить("Склад");
	Параметры.Вставить("Назначение");
	Параметры.Вставить("ЗаказыНаОтгрузку");
	Параметры.Вставить("Упаковка");
	Возврат Параметры;
	
КонецФункции

// Возвращаемое значение:
//  Структура - структура с полями:
//   * ЕдиницаИзмерения - СправочникСсылка.УпаковкиЕдиницыИзмерения -
//   * Номенклатура - СправочникСсылка.Номенклатура -
//   * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры -
//   * Склад - СправочникСсылка.Склады -
//   * Назначение - СправочникСсылка.Назначения -
//   * Обособленно - Булево -
//   * ЗаказНаОтгрузку - ОпределяемыйТип.ОжидаемаяОтгрузка -
Функция ПараметрыФормыВводаКоличестваЗарезервироватьИзДругихЗаказов() Экспорт
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ЕдиницаИзмерения");
	ПараметрыФормы.Вставить("Номенклатура");
	ПараметрыФормы.Вставить("Характеристика");
	ПараметрыФормы.Вставить("Склад");
	ПараметрыФормы.Вставить("Назначение");
	ПараметрыФормы.Вставить("Обособленно");
	ПараметрыФормы.Вставить("ЗаказНаОтгрузку");
	Возврат ПараметрыФормы;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Показывает вопрос о необходимости снятия флага "Отгружать одной датой" при установке действия обеспечения в строке
// заказа если не открывается форма указания складов и серий.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма заказа.
//  ВариантОбеспеченияВыбранноеЗначение - Структура - результат обработки выбора действия в строке заказа.
//  ИмяПроцедурыОповещения - Строка - процедура оповещения в форме заказа в которую будет передано управление после ответа.
//
Процедура ПоказатьВопросСнятьФлагОтгружатьОднойДатойПриУказанииВариантаОбеспечения(Форма, ВариантОбеспеченияВыбранноеЗначение, ИмяПроцедурыОповещения)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(ИмяПроцедурыОповещения, Форма, Неопределено);
	
	ЗадатьВопрос = Ложь;
	ВариантОбеспечения = ВариантОбеспеченияВыбранноеЗначение.ВариантОбеспечения;
	Если ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Отгрузить")
			И ВариантОбеспечения <> Форма.ДоступныеОстаткиПараметрыВстраивания.СлужебныеПараметры.ВариантОбеспеченияДоИзменения Тогда
			
		ДоступныеОстаткиПараметрыДокумента = ДоступныеОстаткиПараметрыДокумента(Форма);
		ДатаОтгрузкиВсехСтрокОднойДатой = ОбеспечениеВДокументахВызовСервера.ДатаОтгрузкиВсехСтрокОднойДатой(
			ДоступныеОстаткиПараметрыДокумента);
		ДатаОтгрузкиНовыхСтрок = НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса());
		
		ЗаполнениеДляВсехСтрок = ОбеспечениеВДокументахКлиентСервер.КоллекцияНаФорме(Форма,
			Форма.ДоступныеОстаткиПараметрыВстраивания).Количество() = 1
				И Не ВариантОбеспеченияВыбранноеЗначение.РазбитьСтроку;
		ЗадатьВопрос = ДатаОтгрузкиВсехСтрокОднойДатой <> Неопределено
				И ДатаОтгрузкиВсехСтрокОднойДатой < ДатаОтгрузкиНовыхСтрок
				И ДоступныеОстаткиПараметрыДокумента.ПараметрыВстраивания.ВыражениеДляВопросаПриВыполненииДействияВСпискеЗаказов
					<> "НЕОПРЕДЕЛЕНО";
				
	КонецЕсли;
	
	Если ЗадатьВопрос И Не ЗаполнениеДляВсехСтрок Тогда
		
		ШаблонТекстаВопроса = НСтр("ru = 'Дата отгрузки выбранной строки %1, дата отгрузки остальных строк %2.
				|Можно отгрузить все одной датой %3, можно отгружать частями.'");
		
		СтараяДатаОтгрузкиСтрокой = Формат(ДатаОтгрузкиВсехСтрокОднойДатой, "ДЛФ=D");
		НоваяДатаОтгрузкиСтрокой = Формат(ДатаОтгрузкиНовыхСтрок, "ДЛФ=D");
		ОднаДатаСтрокой = НоваяДатаОтгрузкиСтрокой;
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонТекстаВопроса,
			НоваяДатаОтгрузкиСтрокой,
			?(ДатаОтгрузкиВсехСтрокОднойДатой = '00010101', НСтр("ru = 'не указана'"),
				СтараяДатаОтгрузкиСтрокой),
				ОднаДатаСтрокой);
		
		СписокКнопок = Новый СписокЗначений();
		ШаблонКнопки = НСтр("ru = 'Отгрузить одной датой (%1)'");
		ТекстКнопки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонКнопки, ОднаДатаСтрокой);
		СписокКнопок.Добавить("КодВозвратаДиалога_Нет", ТекстКнопки);
		ШаблонКнопкиДа = НСтр("ru = 'Отгружать частями'");
		СписокКнопок.Добавить("КодВозвратаДиалога_Да", ШаблонКнопкиДа);
		
		ПараметрыФормы = ОбщегоНазначенияУТКлиент.ПараметрыФормыВопросДаНетОтмена();
		ПараметрыФормы.ТекстВопроса = ТекстВопроса;
		ПараметрыФормы.СписокКнопок = СписокКнопок;
		ПараметрыФормы.ЗаголовокВопроса = НСтр("ru = 'Выбор действия'");
		ПараметрыФормы.ОтображатьКнопкуЗакрытия = Истина;
		ОписаниеОповещенияПромежуточный = Новый ОписаниеОповещения("ОбработкаОповещенияПослеВыбораОбеспечения",
			ЭтотОбъект, ОписаниеОповещения);
		ОткрытьФорму("ОбщаяФорма.ВопросДаНетОтмена", ПараметрыФормы, , , , , ОписаниеОповещенияПромежуточный);
		
	ИначеЕсли ЗадатьВопрос И ЗаполнениеДляВсехСтрок Тогда
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, "КодВозвратаДиалога_Нет");
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказатьВопросОбОтгрузкеОднойДатой(ОписаниеОповещения, ДатаОтгрузкиВсехСтрокОднойДатой, ДатаОтгрузкиНовыхСтрок, ОднаДата, ЗаголовокВопроса, ШаблонТекстаВопроса = Неопределено, ШаблонКнопкиДа = Неопределено)
	
	Если ШаблонТекстаВопроса = Неопределено Тогда
		
		ШаблонТекстаВопроса = НСтр("ru = 'Дата отгрузки выбранных строк %1, дата отгрузки остальных строк %2.
			|Можно отгрузить все одной датой %3, можно отгружать частями.'");
	КонецЕсли;
	
	СтараяДатаОтгрузкиСтрокой = Формат(ДатаОтгрузкиВсехСтрокОднойДатой, "ДЛФ=D");
	НоваяДатаОтгрузкиСтрокой = Формат(ДатаОтгрузкиНовыхСтрок, "ДЛФ=D");
	ОднаДатаСтрокой = Формат(ОднаДата, "ДЛФ=D");
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонТекстаВопроса,
		НоваяДатаОтгрузкиСтрокой,
		?(ДатаОтгрузкиВсехСтрокОднойДатой = '00010101', НСтр("ru = 'не указана'"),СтараяДатаОтгрузкиСтрокой),
		ОднаДатаСтрокой);
	
	СписокКнопок = Новый СписокЗначений();
	ШаблонКнопки = НСтр("ru = 'Отгрузить одной датой (%1)'");
	ТекстКнопки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонКнопки, ОднаДатаСтрокой);
	СписокКнопок.Добавить("КодВозвратаДиалога_Нет", ТекстКнопки);
	Если ШаблонКнопкиДа = Неопределено Тогда
		ШаблонКнопкиДа = НСтр("ru = 'Отгружать частями'");
	КонецЕсли;
	СписокКнопок.Добавить("КодВозвратаДиалога_Да", ШаблонКнопкиДа);
	
	ПараметрыФормы = ОбщегоНазначенияУТКлиент.ПараметрыФормыВопросДаНетОтмена();
	ПараметрыФормы.ТекстВопроса = ТекстВопроса;
	ПараметрыФормы.СписокКнопок = СписокКнопок;
	ПараметрыФормы.ЗаголовокВопроса = ЗаголовокВопроса;
	ПараметрыФормы.ОтображатьКнопкуЗакрытия = Истина;
	ОписаниеОповещенияПромежуточный = Новый ОписаниеОповещения("ОбработкаОповещенияПромежуточный",
		ЭтотОбъект, ОписаниеОповещения);
	ОткрытьФорму("ОбщаяФорма.ВопросДаНетОтмена", ПараметрыФормы, , , , , ОписаниеОповещенияПромежуточный);
	
КонецПроцедуры

Процедура ВыполнитьДействиеВСпискеЗаказовРазныхТипов(КодДействия, Список, Ссылка, Форма) Экспорт
	
	ОчиститьСообщения();
	ВсеЗаказы = ОбщегоНазначенияУТКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Список);
	
	РезультатВыполненияДействий = ОбеспечениеВДокументахВызовСервера.ВыполнитьДействиеВСпискеЗаказовРазныхТипов(
		КодДействия,
		ВсеЗаказы,
		Ссылка,
		Форма.УникальныйИдентификатор);
	
	Если РезультатВыполненияДействийНуженВопрос(РезультатВыполненияДействий) Тогда
		
		СтруктураПараметров = Новый Структура("РезультатВыполненияДействий,Форма", РезультатВыполненияДействий, Форма);
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ВыполнитьДействиеВСпискеЗаказовРазныхТиповПослеВопроса",
			ЭтотОбъект,
			СтруктураПараметров);
		
		СписокКнопок = Новый СписокЗначений();
		ШаблонТекстаВопроса = НСтр("ru = 'В результате заполнения документов даты отгрузки в строках будут отличаться.
			|Можно отгрузить все одной датой %1, можно отгружать частями.'");
		
		ОднаДатаСтрокой = Формат(РезультатВыполненияДействий.ДатаОтгрузкиНовыхСтрок, "ДЛФ=D");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаВопроса, ОднаДатаСтрокой);
		
		СписокКнопок = Новый СписокЗначений();
		ШаблонКнопки = НСтр("ru = 'Отгрузить одной датой (%1)'");
		ТекстКнопки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонКнопки, ОднаДатаСтрокой);
		СписокКнопок.Добавить("КодВозвратаДиалога_Нет", ТекстКнопки);
		СписокКнопок.Добавить("КодВозвратаДиалога_Да", НСтр("ru = 'Отгружать частями'"));
		
		ЗаголовокВопроса = НСтр("ru = 'Заполнение действия в списке заказов'");
		
		ПараметрыФормы = ОбщегоНазначенияУТКлиент.ПараметрыФормыВопросДаНетОтмена();
		ПараметрыФормы.ТекстВопроса = ТекстВопроса;
		ПараметрыФормы.СписокКнопок = СписокКнопок;
		ПараметрыФормы.ЗаголовокВопроса = ЗаголовокВопроса;
		ПараметрыФормы.ОтображатьКнопкуЗакрытия = Истина;
		ОписаниеОповещенияПромежуточный = Новый ОписаниеОповещения("ОбработкаОповещенияПромежуточный",
			ЭтотОбъект, ОписаниеОповещения);
		ОткрытьФорму("ОбщаяФорма.ВопросДаНетОтмена", ПараметрыФормы, , , , , ОписаниеОповещенияПромежуточный);
		
	Иначе
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
		ДополнительныеПараметры = Новый Структура("Заказы", ВсеЗаказы);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатВыполненияДействий,
			Новый ОписаниеОповещения(
				"ВыполнитьДействиеВСпискеЗаказовРазныхТиповЗавершение", Форма, ДополнительныеПараметры),
			ПараметрыОжидания);
	КонецЕсли;

КонецПроцедуры

Процедура ВыполнитьДействиеВСпискеЗаказовРазныхТиповПослеВопроса(Ответ, СтруктураПараметров) Экспорт
	
	РезультатВыполненияДействий = СтруктураПараметров.РезультатВыполненияДействий;
	РезультатВыполненияДействий.Вставить("СнятьФлагОтгружатьОднойДатой",    Ответ = "КодВозвратаДиалога_Да");
	РезультатВыполненияДействий.Вставить("ЗаполнитьДатуОтгрузкиОднойДатой", Ответ = "КодВозвратаДиалога_Нет");
	
	Результат = ОбеспечениеВДокументахВызовСервера.ВыполнитьДействиеВСпискеЗаказовРазныхТиповПослеВопроса(
		РезультатВыполненияДействий,
		СтруктураПараметров.Форма.УникальныйИдентификатор);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(СтруктураПараметров.Форма);
	ВсеЗаказы = Новый Массив();
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеЗаказы, РезультатВыполненияДействий.ПараметрыВыполнения[0].Заказы);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеЗаказы, РезультатВыполненияДействий.ПараметрыВыполнения[1].Заказы);
	ДополнительныеПараметры = Новый Структура("Заказы", ВсеЗаказы);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат,
		Новый ОписаниеОповещения(
			"ВыполнитьДействиеВСпискеЗаказовРазныхТиповЗавершение", СтруктураПараметров.Форма, ДополнительныеПараметры),
		ПараметрыОжидания);
	
КонецПроцедуры

#КонецОбласти
