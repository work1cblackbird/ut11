///////////////////////////////////////////////////////////
// Тестирование - Модуль тестирования конфигурации       //
//                                                       //
///////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Метод выполняет помещение во временные таблицы данных по указанным регистрам и указанный месяц
// Создается временная таблица ЭталонИмяОбъектаМетаданных, 
// где ИмяОбъектаМетаданных - это имя регистра. 
// Пример: ЭталонСебестоимостьТоваров.
// Параметры:
//		КонтрольныеРегистры - Массив - Список регистров по которым сохраняются данные.
//		ПараметрыЗапроса - см. Тестирование.ПараметрыЗапроса
//		Месяц - Дата - Начало месяца, за который необходимо считать данные.
//		МассивРегистраторов - Массив - Список документов по которым сохраняются движения.
//										Если используется данный параметр, то Месяц не используется.
//		ЭталонныеДанные - ТаблицаЗначений - Эталонные данные, с которыми происходит сравнение.
// Возвращаемое значение:
//	МенеджерВременныхТаблиц - Содержит временные таблицы с выборками по указанным регистрам.
Функция СохранитьЭталонныеДанные(КонтрольныеРегистры, ПараметрыЗапроса = Неопределено, МассивРегистраторов = Неопределено, ЭталонныеДанные = Неопределено) Экспорт
	
	ТекстЗапроса = "";
	СохранитьЭталонныеДанные = Истина;
	ВременныеТаблицы = Новый МенеджерВременныхТаблиц;
	Если ТипЗнч(ПараметрыЗапроса) = Тип("Дата") Или ПараметрыЗапроса = Неопределено Тогда
		// Поддержим старый интерфейс, когда вторым параметром передавался месяц расчета:
		ПараметрыЗапроса = ПараметрыЗапроса(ПараметрыЗапроса, МассивРегистраторов);
	КонецЕсли;
	
	ЗапросДанных = Новый Запрос(ТекстЗапроса);

	Для Каждого КонтрольныйРегистр Из КонтрольныеРегистры Цикл

		ЭталоннаяТаблица = Неопределено;
		Если ЭталонныеДанные <> Неопределено И ЭталонныеДанные[КонтрольныйРегистр] <> Неопределено Тогда
			КомпонентыИмениРегистра = СтрРазделить(КонтрольныйРегистр, ".");
			ИмяРегистра = ?(КомпонентыИмениРегистра.Количество() > 1, КомпонентыИмениРегистра[1], КомпонентыИмениРегистра[0]);

			ЭталоннаяТаблица = ПолучитьИзВременногоХранилища(ЭталонныеДанные[КонтрольныйРегистр]);
			ЗапросДанных.УстановитьПараметр("ВнешняяТаблица" + ИмяРегистра, ЭталоннаяТаблица);
		КонецЕсли;

		ТекстЗапроса = ТекстЗапроса + СформироватьЗапрос(КонтрольныйРегистр, СохранитьЭталонныеДанные, ПараметрыЗапроса.ОтборПоРегистраторам, ЭталоннаяТаблица);
	КонецЦикла;

	ЗапросДанных.Текст = ТекстЗапроса;
	ЗапросДанных.МенеджерВременныхТаблиц = ВременныеТаблицы;
	ЗапросДанных.УстановитьПараметр("МассивРегистраторов", ПараметрыЗапроса.МассивРегистраторов);
	ЗапросДанных.УстановитьПараметр("НачалоПериода", ПараметрыЗапроса.НачалоПериода);
	ЗапросДанных.УстановитьПараметр("КонецПериода", ПараметрыЗапроса.КонецПериода);
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Тестирование'", ОбщегоНазначения.КодОсновногоЯзыка())
		+ "." + НСтр("ru = 'Начато сохранение эталонных данных'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ЗапросДанных.ВыполнитьПакет();
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Тестирование'", ОбщегоНазначения.КодОсновногоЯзыка())
		+ "." + НСтр("ru = 'Завершено сохранение эталонных данных'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	Возврат ВременныеТаблицы;
КонецФункции

// Метод выполняет сравнение данных из временных таблиц с данными из контрольных регистров,
//  возвращает поля по которым расходятся данные с детализацией до исходных и результирующих
//  данных.
//
// Параметры:
//  ВременныеТаблицы		 - МенеджерВременныхТаблиц	 - Содержит эталонные данные.
//  КонтрольныеРегистры		 - Массив					 - Список регистров по которым сравниваются данные.
//  ПараметрыЗапроса 		 - см. Тестирование.ПараметрыЗапроса
//  Месяц					 - Дата						 - Начало месяца, за который сравниваются данные.
//  МассивРегистраторов		 - Массив					 - Список документов по которым сохраняются движения.
//  					Если используется данный параметр, то Месяц не используется.
//  ЭталонныеДанные 		 - ТаблицаЗначений			 - Эталонные данные, с которыми происходит сравнение.
//  ДополнительныеПараметры	 - см. ДополнительныеПараметрыФормированияЗапросаСравнения
// 
// Возвращаемое значение:
//  Структура - Содержит в себе таблицы с расхождениями по контрольным регистрам.
//
Функция СравнитьСЭталоннымиДанными(ВременныеТаблицы, КонтрольныеРегистры, ПараметрыЗапроса = Неопределено, МассивРегистраторов = Неопределено, ЭталонныеДанные = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт

	СохранитьЭталонныеДанные = Ложь;
	Если ТипЗнч(ПараметрыЗапроса) = Тип("Дата") Или ПараметрыЗапроса = Неопределено Тогда
		// Поддержим старый интерфейс, когда третьим параметром передавался месяц расчета:
		ПараметрыЗапроса = ПараметрыЗапроса(ПараметрыЗапроса, МассивРегистраторов);
	КонецЕсли;
	
	ЗапросДанных = Новый Запрос();
	ЗапросДанных.МенеджерВременныхТаблиц = ВременныеТаблицы;
	ЗапросДанных.УстановитьПараметр("МассивРегистраторов", ПараметрыЗапроса.МассивРегистраторов);
	ЗапросДанных.УстановитьПараметр("НачалоПериода", ПараметрыЗапроса.НачалоПериода);
	ЗапросДанных.УстановитьПараметр("КонецПериода", ПараметрыЗапроса.КонецПериода);
	ЗапросДанных.УстановитьПараметр("ПартионныйУчет22", РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии22(ПараметрыЗапроса.НачалоПериода));
	ЗапросДанных.УстановитьПараметр("ДатаНачалаПУ22", РасчетСебестоимостиПовтИсп.ДатаПереходаНаПартионныйУчетВерсии22());
	
	Расхождения = Новый Соответствие();
	КоличествоРасхождений = 0;
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Тестирование'", ОбщегоНазначения.КодОсновногоЯзыка())
		+ "." + НСтр("ru = 'Начато сравнение c эталонными данными'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	Для каждого КонтрольныйРегистр Из КонтрольныеРегистры Цикл
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Выгрузили'", ОбщегоНазначения.КодОсновногоЯзыка()) + " " + КонтрольныйРегистр);
		ДополнительныеПараметрыПоРегистру = Тестирование.ДополнительныеПараметрыФормированияЗапросаСравнения();
		Если ДополнительныеПараметры <> Неопределено Тогда
			ДополнительныеПараметрыПоРегистру = ДополнительныеПараметры[СтрЗаменить(КонтрольныйРегистр,".","_")];
		КонецЕсли;
		Если ПараметрыЗапроса.Свойство("ИсключаемыеПоля") Тогда
			Для Каждого ИсключаемоеПоле Из ПараметрыЗапроса.ИсключаемыеПоля Цикл
				ДополнительныеПараметрыПоРегистру.ИсключаемыеПоля.Вставить(ИсключаемоеПоле.Ключ);
			КонецЦикла;
		КонецЕсли;
		Если ПараметрыЗапроса.Свойство("ДопустимоеОтклонение") Тогда
			ДополнительныеПараметрыПоРегистру.ДопустимоеОтклонение = ПараметрыЗапроса.ДопустимоеОтклонение;
		КонецЕсли;
		Если ПараметрыЗапроса.Свойство("ОпределятьОбщееРасхождение") Тогда
			ДополнительныеПараметрыПоРегистру.ОпределятьОбщееРасхождение = ПараметрыЗапроса.ОпределятьОбщееРасхождение;
		КонецЕсли;

		ЭталоннаяТаблица = Неопределено;
		Если ЭталонныеДанные <> Неопределено И ЭталонныеДанные[КонтрольныйРегистр] <> Неопределено Тогда
			КомпонентыИмениРегистра = СтрРазделить(КонтрольныйРегистр, ".");
			ИмяРегистра = ?(КомпонентыИмениРегистра.Количество() > 1, КомпонентыИмениРегистра[1], КомпонентыИмениРегистра[0]);
			ЭталоннаяТаблица = ПолучитьИзВременногоХранилища(ЭталонныеДанные[КонтрольныйРегистр]);
		КонецЕсли;
		ЗапросДанных.Текст = СформироватьЗапрос(КонтрольныйРегистр, СохранитьЭталонныеДанные, ПараметрыЗапроса.ОтборПоРегистраторам, ЭталоннаяТаблица, ДополнительныеПараметрыПоРегистру);
		Результат = ЗапросДанных.ВыполнитьПакет();
		Позиция = 2;
		Граница = Результат.Количество();
		Пока Позиция < Граница Цикл
			Если Не Результат[Позиция].Пустой() Тогда
				
				Таблица = Результат[Позиция].Выгрузить(); // ТаблицаЗначений
				СводнаяТаблица = Таблица.Скопировать(, "ТипЗаписиТестирования");
				СводнаяТаблица.Колонки.Добавить("СчетчикСтрок");
				СводнаяТаблица.ЗаполнитьЗначения(1, "СчетчикСтрок");
				СводнаяТаблица.Свернуть("ТипЗаписиТестирования", "СчетчикСтрок");
				ДоРасчета = 0;
				ПослеРасчета = 0;
				Для Каждого Строка Из СводнаяТаблица Цикл
					Если Строка.ТипЗаписиТестирования = "ЗаписиДоРасчета" Тогда
						ДоРасчета = Строка.СчетчикСтрок;
					ИначеЕсли Строка.ТипЗаписиТестирования = "ЗаписиПослеРасчета" Тогда
						ПослеРасчета = Строка.СчетчикСтрок;
					КонецЕсли;
				КонецЦикла;
				КоличествоРасхождений = КоличествоРасхождений + Макс(ДоРасчета, ПослеРасчета);
				ИмяРегистра = Таблица[0].ПолноеИмяРегистра;

				Если ДополнительныеПараметрыПоРегистру.ОпределятьОбщееРасхождение Тогда
					ИмяРегистратора = Тестирование.ИмяПоляРегистратораРегистра(КонтрольныйРегистр);
					СтруктураРегистра = Новый Структура("Таблица, Количество", Таблица, Макс(ДоРасчета, ПослеРасчета));
					Таблица.Индексы.Добавить(ИмяРегистратора);
					СтруктураРегистра.Вставить("Документы", Результат[3].Выгрузить().ВыгрузитьКолонку(ИмяРегистратора));
				Иначе
					Записи = ОбщегоНазначения.ЗначениеВСтрокуXML(Таблица);
					СтруктураРегистра = Новый Структура("Записи, Количество", Записи, Макс(ДоРасчета, ПослеРасчета));
					Таблица.Очистить();
				КонецЕсли;
				
				Расхождения.Вставить(ИмяРегистра, СтруктураРегистра);
				
			КонецЕсли;
			Позиция = Позиция + 3;
		КонецЦикла;
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Тестирование'", ОбщегоНазначения.КодОсновногоЯзыка())
		+ "." + НСтр("ru = 'Завершено сравнение c эталонными данными'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	Расхождения.Вставить("КоличествоРасхождений", КоличествоРасхождений);
	
	Возврат Расхождения;
	
КонецФункции

// Метод формирует текст запроса по всем полям для указанного объекта метаданных.
//
// Параметры:
//  ПутьКМетаданным				 - Строка	 - Путь к объекту, по которому сохраняются данные.
//  	Пример "РегистрНакопления.СебестоимостьТоваров".
//  СохранитьВоВременнуюТаблицу	 - Булево	 - Результат запроса будет сохранен во временную таблицу вида
//  	"ЭталонИмяОбъектаМетаданных"
//  ОтборПоРегистраторам		 - Булево	 - Необязательный параметр, при установке в истина в запросе будет накладываться
//  	условие на выборку данных, где регистратор в массиве регистраторов. Отбора
//  	по периоду не будет.
//	ЭталоннаяТаблица			 - ТаблицаЗначений - Эталонные данные, с которыми происходит сравнение.
//  ДополнительныеПараметры		 - см. ДополнительныеПараметрыФормированияЗапросаСравнения.
// 
// Возвращаемое значение:
//  Строка - Текст запроса.
//
Функция СформироватьЗапрос(ПутьКМетаданным,	СохранитьВоВременнуюТаблицу = Ложь, ОтборПоРегистраторам = Ложь, ЭталоннаяТаблица = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт

	ЧтениеИзЭталонныхДанных = ЭталоннаяТаблица <> Неопределено;
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ДополнительныеПараметрыФормированияЗапросаСравнения();
	КонецЕсли;
	Если РегистрыСоСлужебнымРегистратором().Найти(ПутьКМетаданным) <> Неопределено Тогда
		ДополнительныеПараметры.ИсключаемыеПоля.Вставить("Регистратор");
	Иначе
		
		МетаРегистр = Метаданные.НайтиПоПолномуИмени(ПутьКМетаданным);
		
		Если Метаданные.РегистрыСведений.Содержит(МетаРегистр)
		 И МетаРегистр.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый Тогда
			ДополнительныеПараметры.ПодчиненРегистратору = Ложь;
			ДополнительныеПараметры.ОпределятьОбщееРасхождение = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	ИсключаемыеПоля = СписокИсключений(ДополнительныеПараметры.ИсключаемыеПоля);
	ПоляКлючиКоторыеНужноРазвернуть = ДополнительныеПараметры.ПоляКлючиКоторыеНужноРазвернуть;
	
	КоллекцияМетаданных = Метаданные.НайтиПоПолномуИмени(ПутьКМетаданным);
	ИмяРегистра = КоллекцияМетаданных.Имя;
	ЭтоБухРегистр = ОбщегоНазначения.ЭтоРегистрБухгалтерии(КоллекцияМетаданных);
	// Для бух. регистра используем виртуальную таблицу (для получения субконто):
	ПутьКМетаданнымВЗапросе = ПутьКМетаданным + ?(ЭтоБухРегистр, ".ДвиженияССубконто", "");
	// Для виртуальной таблицы бух. регистра могут встречаться значения NULL, определим их как НЕОПРЕДЕЛЕНО:
	УточнениеПоля = ИменаПолейЗапросаПоУмолчанию();
	Если ЭтоБухРегистр Тогда
		ДополнительныеПараметры.ПриРасхожденияхВыбиратьПервые = 50;
		УточнениеПоля.Вставить("ВыражениеДо", "ЕСТЬNULL(");
		УточнениеПоля.Вставить("ВыражениеПосле", ", Неопределено)");
		УточнениеПоля.Вставить("Псевдоним");
	КонецЕсли;
	
	СтруктураПолей = СтруктураПолейКоллекции(КоллекцияМетаданных, ДополнительныеПараметры);

	Если ЧтениеИзЭталонныхДанных Тогда

		// Удаление отстутсвующих измерений и реквизитов из сравнения
		Для Каждого КоллекцияПолей Из СтруктураПолей Цикл
			Счетчик = КоллекцияПолей.Значение.Количество() - 1;
			Пока Счетчик >= 0 Цикл

				ИмяПоля = КоллекцияПолей.Значение[Счетчик];
				Если ЭталоннаяТаблица.Колонки.Найти(ИмяПоля) = Неопределено Тогда
					КоллекцияПолей.Значение.Удалить(Счетчик);
				КонецЕсли;
				Счетчик = Счетчик - 1;

			КонецЦикла;
		КонецЦикла;

	КонецЕсли;
	
	Если ДополнительныеПараметры.СгруппироватьПоИзмерениям Тогда
		МассивГруппировки = СтруктураПолей.Измерения;
	Иначе
		МассивГруппировки = Новый Массив();
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивГруппировки, СтруктураПолей.Измерения, Истина);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивГруппировки, СтруктураПолей.Ресурсы, Истина);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивГруппировки, СтруктураПолей.Реквизиты, Истина);
	КонецЕсли;

	ИсключаемыеПоляСтрокой = ОбщегоНазначенияКлиентСервер.КлючиСтруктурыВСтроку(ИсключаемыеПоля);
	МассивИсключаемыхПолей = СтрРазделить(ИсключаемыеПоляСтрокой, ",");
	ОбщегоНазначенияКлиентСервер.РазностьМассивов(МассивГруппировки, МассивИсключаемыхПолей);
	
	МассивГруппировкиПосле = ОбщегоНазначения.СкопироватьРекурсивно(МассивГруппировки);
	
	РазвернутьПоляКлючи(МассивГруппировки, ПоляКлючиКоторыеНужноРазвернуть, ИсключаемыеПоля);
	
	РазвернутьПоляКлючи(МассивГруппировкиПосле, ПоляКлючиКоторыеНужноРазвернуть, ИсключаемыеПоля, Истина);
	
	Если СохранитьВоВременнуюТаблицу Тогда
		
		Если ЧтениеИзЭталонныхДанных Тогда
			
			ШаблонТекстЗапроса = "
			|ВЫБРАТЬ
			|	&ТекстИзмеренияРеквизиты,
			|	&ТекстСуммы,
			|	ИСТИНА
			|ПОМЕСТИТЬ ЭталонИмяОбъектаМетаданных
			|ИЗ
			|	&ВнешняяТаблицаИмяОбъектаМетаданных КАК ДД
			|ГДЕ
			|	&ТекстУсловияОтбора
			|;
			|///////////////////////////////////
			|";
			
		Иначе 
		
			ШаблонТекстЗапроса = "
			|ВЫБРАТЬ
			|	&ТекстИзмеренияРеквизиты,
			|	&ТекстСуммы,
			|	ИСТИНА
			|ПОМЕСТИТЬ ЭталонИмяОбъектаМетаданных
			|ИЗ
			|	ОбъектМетаданных КАК ДД
			|ГДЕ
			|	&ТекстУсловияОтбора
			|;
			|///////////////////////////////////
			|";
			
		КонецЕсли;
		
		ТекстИзмеренияРеквизиты = ДобавитьПоляВЗапрос(МассивГруппировки, УточнениеПоля);
		
		ПолныйТекстЗапроса = СтрЗаменить(ШаблонТекстЗапроса, "&ТекстИзмеренияРеквизиты,", ТекстИзмеренияРеквизиты + ",");
		
		Если СтруктураПолей.ЧисловыеПоля.Количество() > 0 Тогда
			УточнениеПоля.ВыражениеПосле = СтрЗаменить(УточнениеПоля.ВыражениеПосле, "Неопределено", "0");
			ТекстСуммы = ДобавитьПоляВЗапрос(СтруктураПолей.ЧисловыеПоля, УточнениеПоля) + ",";
		Иначе
			ТекстСуммы = "";
		КонецЕсли;
		ПолныйТекстЗапроса = СтрЗаменить(ПолныйТекстЗапроса, "&ТекстСуммы,", ТекстСуммы);
		
		Если ВКоллекцииЕстьПериод(КоллекцияМетаданных) И Не ОтборПоРегистраторам Тогда
			ПолныйТекстЗапроса = СтрЗаменить(ПолныйТекстЗапроса, "&ТекстУсловияОтбора", "ДД.Период МЕЖДУ &НачалоПериода И &КонецПериода");
		ИначеЕсли ОтборПоРегистраторам Тогда
			ПолныйТекстЗапроса = СтрЗаменить(ПолныйТекстЗапроса, "&ТекстУсловияОтбора", "ДД.Регистратор В (&МассивРегистраторов)");
		Иначе
			ПолныйТекстЗапроса = СтрЗаменить(ПолныйТекстЗапроса, "&ТекстУсловияОтбора", "ИСТИНА");
		КонецЕсли;
		
		ПолныйТекстЗапроса = СтрЗаменить(ПолныйТекстЗапроса, "ЭталонИмяОбъектаМетаданных", "Эталон" + ИмяРегистра);
		ПолныйТекстЗапроса = СтрЗаменить(ПолныйТекстЗапроса, "ВнешняяТаблицаИмяОбъектаМетаданных", "ВнешняяТаблица" + ИмяРегистра);
		ПолныйТекстЗапроса = СтрЗаменить(ПолныйТекстЗапроса, "ОбъектМетаданных", ПутьКМетаданнымВЗапросе);
	Иначе
		ШаблонТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	&ТекстИзмеренияРеквизиты,
		|	&ТекстСуммыРасхождения,
		|	ДД.ОбщееПоле
		|	, СУММА(ДД.ЗначениеПроверки)
		|ПОМЕСТИТЬ ПоляРасхожденийИмяОбъектаМетаданных
		|ИЗ
		|	(ВЫБРАТЬ
		|		&ТекстИзмеренияРеквизитыДо,
		|		&ТекстСуммыДо,
		|		Неопределено КАК ОбщееПоле,
		|		1 КАК ЗначениеПроверки
		|	ИЗ
		|		ЭталонИмяОбъектаМетаданных КАК ДД
		|	ГДЕ
		|		&ТекстУсловияОтбораДо И 
		|		ИСТИНА
		|	СГРУППИРОВАТЬ ПО
		|		&ТекстСгруппироватьДо
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		&ТекстИзмеренияРеквизитыПосле,
		|		&ТекстСуммыПосле,
		|		Неопределено КАК ОбщееПоле,
		|		- 1 КАК ЗначениеПроверки
		|	ИЗ
		|		ОбъектМетаданных КАК ДД
		|	ГДЕ
		|		&ТекстУсловияОтбораПосле И 
		|		ИСТИНА
		|	СГРУППИРОВАТЬ ПО
		|		&ТекстСгруппироватьПосле
		|	) КАК ДД
		|СГРУППИРОВАТЬ ПО
		|	&ТекстСгруппироватьИндексировать, 
		|	ДД.ОбщееПоле
		|ИМЕЮЩИЕ 
		|	&ТекстПоляКонтроля И
		|	ЛОЖЬ
		|	И &ТекстУсловияПоКоличествуЗаписей
		|;
		|/////////////////////////////////////////
		|ВЫБРАТЬ
		|	""ЗаписиДоРасчета""      КАК ТипЗаписиТестирования,
		|	&ТекстИзмеренияРеквизиты,
		|	&ТекстСуммыРасхожденияДо,
		|	""ПолноеИмяОбъектаМетаданных"" КАК ПолноеИмяРегистра,
		|	""ИмяОбъектаМетаданных"" КАК ИмяРегистра
		|
		|ПОМЕСТИТЬ ДетальныеЗаписиИмяОбъектаМетаданных
		|ИЗ
		|	ПоляРасхожденийИмяОбъектаМетаданных КАК ДД
		|
		|ГДЕ &ТекстВнутреннееСоединениеСЭталоном
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""ЗаписиПослеРасчета""   КАК ТипЗаписиТестирования,
		|	&ТекстИзмеренияРеквизитыИлиПосле,
		|	&ТекстСуммыРасхожденияПосле,
		|	""ПолноеИмяОбъектаМетаданных"" КАК ПолноеИмяРегистра,
		|	""ИмяОбъектаМетаданных"" КАК ИмяРегистра
		|ИЗ ПоляРасхожденийИмяОбъектаМетаданных КАК ДД
		|
		|ГДЕ &ТекстВнутреннееСоединениеСРезультатом
		|;
		|/////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДД.ТипЗаписиТестирования,
		|	&ТекстИзмеренияРеквизиты,
		|	&ТекстСуммаСумм,
		|	ДД.ПолноеИмяРегистра,
		|	ДД.ИмяРегистра
		|ИЗ ДетальныеЗаписиИмяОбъектаМетаданных КАК ДД
		|СГРУППИРОВАТЬ ПО
		|	&ТекстСгруппироватьИндексировать,
		|	ДД.ТипЗаписиТестирования,
		|	ДД.ПолноеИмяРегистра,
		|	ДД.ИмяРегистра
		|;
		|/////////////////////////////////////////
		|";
		
		Если ЭтоБухРегистр Тогда
			ШаблонТекстЗапроса = СтрЗаменить(ШаблонТекстЗапроса, "&ТекстИзмеренияРеквизитыИлиПосле,", "&ТекстИзмеренияРеквизиты,");
		Иначе
			ШаблонТекстЗапроса = СтрЗаменить(ШаблонТекстЗапроса, "&ТекстИзмеренияРеквизитыИлиПосле,", "&ТекстИзмеренияРеквизитыПосле,");
		КонецЕсли;
		
		ТекстИзмеренияРеквизиты = ДобавитьПоляВЗапрос(МассивГруппировки);
		ПолныйТекстЗапроса = СтрЗаменить(ШаблонТекстЗапроса, "&ТекстИзмеренияРеквизиты,", ТекстИзмеренияРеквизиты + ",");
		
		Если Не ДополнительныеПараметры.СгруппироватьПоИзмерениям Тогда
			ПолныйТекстЗапроса = СтрЗаменить(ПолныйТекстЗапроса, "И &ТекстУсловияПоКоличествуЗаписей", "ИЛИ СУММА(ДД.ЗначениеПроверки) <> 0");
		Иначе
			ПолныйТекстЗапроса = СтрЗаменить(ПолныйТекстЗапроса, "И &ТекстУсловияПоКоличествуЗаписей", "");
		КонецЕсли;
		
		ТекстИзмеренияРеквизитыДо = ТекстИзмеренияРеквизиты;
		ЗаменитьПоля(ТекстИзмеренияРеквизитыДо, ДополнительныеПараметры.ЗаменыПолейДо);
		ПолныйТекстЗапроса = СтрЗаменить(ПолныйТекстЗапроса, "&ТекстИзмеренияРеквизитыДо,", ТекстИзмеренияРеквизитыДо + ",");
		
		ИменаПолей = ИменаПолейЗапросаПоУмолчанию();
		ИменаПолей.ВыражениеПосле = " ";
		ТекстСгруппироватьДо = ДобавитьПоляВЗапрос(МассивГруппировки, ИменаПолей);
		ПолныйТекстЗапроса = СтрЗаменить(ПолныйТекстЗапроса, "&ТекстСгруппироватьДо", ТекстСгруппироватьДо);
		
		ТекстИзмеренияРеквизитыПосле = ДобавитьПоляВЗапрос(МассивГруппировкиПосле, УточнениеПоля);
		ЗаменитьПоля(ТекстИзмеренияРеквизитыПосле, ДополнительныеПараметры.ЗаменыПолейПосле);
		ПолныйТекстЗапроса = СтрЗаменить(ПолныйТекстЗапроса, "&ТекстИзмеренияРеквизитыПосле,", ТекстИзмеренияРеквизитыПосле + ",");
		
		ИменаПолей = ИменаПолейЗапросаПоУмолчанию();
		ЗаполнитьЗначенияСвойств(ИменаПолей, УточнениеПоля);
		ИменаПолей.ВыражениеПосле = ?(ИменаПолей.ВыражениеПосле = "", " ", ИменаПолей.ВыражениеПосле);
		ТекстСгруппироватьПосле = ДобавитьПоляВЗапрос(МассивГруппировки, ИменаПолей);
		ПолныйТекстЗапроса = СтрЗаменить(ПолныйТекстЗапроса, "&ТекстСгруппироватьПосле", ТекстСгруппироватьПосле);
		
		Если СтруктураПолей.ЧисловыеПоля.Количество() > 0 Тогда
			ИменаПолей = ИменаПолейЗапросаПоУмолчанию();
			ИменаПолей.ВыражениеДо = "СУММА(ЕСТЬNULL(";
			ИменаПолей.ВыражениеПосле = ", 0))";
			ИменаПолей.Вставить("Псевдоним");
			ТекстСуммыДо = ДобавитьПоляВЗапрос(СтруктураПолей.ЧисловыеПоля, ИменаПолей) + ",";
			ЗаменитьПоля(ТекстСуммыДо, ДополнительныеПараметры.ЗаменыПолейДо);
			
			ИменаПолей.ВыражениеДо = "-"+ИменаПолей.ВыражениеДо;
			ТекстСуммыПосле = ДобавитьПоляВЗапрос(СтруктураПолей.ЧисловыеПоля, ИменаПолей) + ",";
			ЗаменитьПоля(ТекстСуммыПосле, ДополнительныеПараметры.ЗаменыПолейПосле);
			
			ИменаПолей = ИменаПолейЗапросаПоУмолчанию();
			ИменаПолей.ИмяПоля = "Таблица";
			ТекстСуммыРасхожденияДо = ДобавитьПоляВЗапрос(СтруктураПолей.ЧисловыеПоля, ИменаПолей) + ",";
			ЗаменитьПоля(ТекстСуммыРасхожденияДо, ДополнительныеПараметры.ЗаменыПолейДо, "Таблица");
			ИменаПолей.ВыражениеДо = "ЕСТЬNULL(";
			ИменаПолей.ВыражениеПосле = ", 0)";
			ИменаПолей.Вставить("Псевдоним");
			ТекстСуммыРасхожденияПосле = ДобавитьПоляВЗапрос(СтруктураПолей.ЧисловыеПоля, ИменаПолей) + ",";
			ЗаменитьПоля(ТекстСуммыРасхожденияПосле, ДополнительныеПараметры.ЗаменыПолейПосле, "Таблица");
			
			ИменаПолей = ИменаПолейЗапросаПоУмолчанию();
			ИменаПолей.ВыражениеДо = "СУММА(";
			ИменаПолей.ВыражениеПосле = ")";
			ТекстСуммаСумм = ДобавитьПоляВЗапрос(СтруктураПолей.ЧисловыеПоля, ИменаПолей) + ",";
		Иначе
			ТекстСуммыДо = "";
			ТекстСуммыПосле = "";
			ТекстСуммыРасхожденияДо = "";
			ТекстСуммыРасхожденияПосле = "";
			ТекстСуммаСумм = "";
		КонецЕсли;
		ПолныйТекстЗапроса = СтрЗаменить(ПолныйТекстЗапроса, "&ТекстСуммыДо,", ТекстСуммыДо);
		ПолныйТекстЗапроса = СтрЗаменить(ПолныйТекстЗапроса, "&ТекстСуммыПосле,", ТекстСуммыПосле);
		ПолныйТекстЗапроса = СтрЗаменить(ПолныйТекстЗапроса, "&ТекстСуммыРасхожденияДо,", ТекстСуммыРасхожденияДо);
		ПолныйТекстЗапроса = СтрЗаменить(ПолныйТекстЗапроса, "&ТекстСуммыРасхожденияПосле,", ТекстСуммыРасхожденияПосле);
		ПолныйТекстЗапроса = СтрЗаменить(ПолныйТекстЗапроса, "&ТекстСуммаСумм,", ТекстСуммаСумм);
		Если ДополнительныеПараметры.ОпределятьОбщееРасхождение Тогда
			ПолныйТекстЗапроса = СтрЗаменить(ПолныйТекстЗапроса, "&ТекстСуммыРасхождения,", ТекстСуммаСумм);
		Иначе
			ПолныйТекстЗапроса = СтрЗаменить(ПолныйТекстЗапроса, "&ТекстСуммыРасхождения,", "");
		КонецЕсли;
		
		ТекстУсловияОтбораДо = "";
		Если ЗначениеЗаполнено(ДополнительныеПараметры.УсловияОтбораДо) Тогда
			ТекстУсловияОтбораДо = ДополнительныеПараметры.УсловияОтбораДо + " " + "И";
		КонецЕсли;
		ПолныйТекстЗапроса = СтрЗаменить(ПолныйТекстЗапроса, "&ТекстУсловияОтбораДо И", ТекстУсловияОтбораДо);	
		Если ОтборПоРегистраторам Тогда
			ТекстУсловияОтбораПосле = "ДД.Регистратор В (&МассивРегистраторов) И";
		ИначеЕсли ВКоллекцииЕстьПериод(КоллекцияМетаданных) Тогда
			ТекстУсловияОтбораПосле = "ДД.Период МЕЖДУ &НачалоПериода И &КонецПериода И";
		Иначе
			ТекстУсловияОтбораПосле = "ИСТИНА И"	
		КонецЕсли;
			
		Если ЗначениеЗаполнено(ДополнительныеПараметры.УсловияОтбораПосле) Тогда
			ТекстУсловияОтбораПосле = ТекстУсловияОтбораПосле + "
				|(" + ДополнительныеПараметры.УсловияОтбораПосле + ") " + "И";
		КонецЕсли;
		ПолныйТекстЗапроса = СтрЗаменить(ПолныйТекстЗапроса, "&ТекстУсловияОтбораПосле И", ТекстУсловияОтбораПосле);	
		
		ИменаПолей = ИменаПолейЗапросаПоУмолчанию();
		ИменаПолей.ВыражениеДо = "СУММА(";
		ИменаПолей.ВыражениеПосле = ") <> 0 ";
		ИменаПолей.ВыражениеСоединения = "ИЛИ ";
		
		ИменаПолей = ИменаПолейЗапросаПоУмолчанию();
		ИменаПолей.ВыражениеДо = "СУММА(";
		ИменаПолей.ВыражениеСоединения = "ИЛИ"+ " ";
		ИменаПолей.ВыражениеПосле = ") > &ДопустимоеОтклонение" + " ";
		ТекстПоляКонтроля1 = ДобавитьПоляВЗапрос(СтруктураПолей.ЧисловыеПоля, ИменаПолей);
		ИменаПолей.ВыражениеПосле = ") < -&ДопустимоеОтклонение" + " ";
		ТекстПоляКонтроля2 = ДобавитьПоляВЗапрос(СтруктураПолей.ЧисловыеПоля, ИменаПолей);
		ТекстПоляКонтроля = СтрЗаменить(
			ТекстПоляКонтроля1 + " ИЛИ " + ТекстПоляКонтроля2,
			"&ДопустимоеОтклонение",
			ДополнительныеПараметры.ДопустимоеОтклонение);
		
		Если ЗначениеЗаполнено(ТекстПоляКонтроля1) Тогда
			ПолныйТекстЗапроса = СтрЗаменить(ПолныйТекстЗапроса, "&ТекстПоляКонтроля И", ТекстПоляКонтроля + " " + "ИЛИ");
		Иначе
			ПолныйТекстЗапроса = СтрЗаменить(ПолныйТекстЗапроса, "&ТекстПоляКонтроля И", "");
		КонецЕсли;
		
		ИменаПолей = ИменаПолейЗапросаПоУмолчанию();
		ИменаПолей.ВыражениеДо = "";
		ИменаПолей.ВыражениеПосле = " ";
		ТекстСгруппироватьИндексировать = ДобавитьПоляВЗапрос(МассивГруппировки, ИменаПолей);
		ПолныйТекстЗапроса = СтрЗаменить(ПолныйТекстЗапроса, "&ТекстСгруппироватьИндексировать,", ТекстСгруппироватьИндексировать + ",");
		
		ВнутреннееСоединениеСЭталоном = ТекстВнутреннегоСоединения(МассивГруппировки, "ЭталонИмяОбъектаМетаданных");
		ПолныйТекстЗапроса = СтрЗаменить(ПолныйТекстЗапроса, "ГДЕ &ТекстВнутреннееСоединениеСЭталоном", ВнутреннееСоединениеСЭталоном);
		
		Если ДополнительныеПараметры.ОпределятьОбщееРасхождение Тогда
			ШаблонРасхождений = " + СУММА(ВЫБОР КОГДА ДД.%1 > 0 ТОГДА ДД.%1 ИНАЧЕ -ДД.%1 КОНЕЦ)";
			ТекстСуммаРасхождений = "0";
			Для Каждого Поле Из СтруктураПолей.ЧисловыеПоля Цикл
				ТекстСуммаРасхождений = ТекстСуммаРасхождений 
					+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонРасхождений,
						Поле);
			КонецЦикла;
			ЗапросРасхождений = "
			|ВЫБРАТЬ ПЕРВЫЕ 5
			|	ДД.Регистратор КАК Регистратор,
			|	&ТекстСуммаРасхождений КАК СуммаРасхождений,
			|	""ИмяОбъектаМетаданных"" КАК ИмяРегистра
			|ИЗ ПоляРасхожденийИмяОбъектаМетаданных КАК ДД
			|СГРУППИРОВАТЬ ПО
			|	ДД.Регистратор
			|УПОРЯДОЧИТЬ ПО
			|	СуммаРасхождений УБЫВ
			|;
			|/////////////////////////////////////////
			|";
			Если ДополнительныеПараметры.ПриРасхожденияхВыбиратьПервые <> 5 Тогда
				ЗапросРасхождений = СтрЗаменить(ЗапросРасхождений, "5", ДополнительныеПараметры.ПриРасхожденияхВыбиратьПервые);
			КонецЕсли;
			Если ИсключаемыеПоля.Свойство("Регистратор") Тогда
				ЗапросРасхождений = СтрЗаменить(ЗапросРасхождений, "Регистратор", "ДокументРегистратор");
			КонецЕсли;
			ЗапросРасхождений = СтрЗаменить(ЗапросРасхождений, "&ТекстСуммаРасхождений", ТекстСуммаРасхождений);
			ПолныйТекстЗапроса = ПолныйТекстЗапроса + ЗапросРасхождений;
		КонецЕсли;
		
		Если ПоляКлючиКоторыеНужноРазвернуть.Количество() > 0 Тогда
			ВнутреннееСоединениеСРезультатом = ТекстВнутреннегоСоединения(МассивГруппировкиПосле, "ОбъектМетаданных", УточнениеПоля);
			Для Каждого Поле Из ПоляКлючиКоторыеНужноРазвернуть Цикл
				ВнутреннееСоединениеСРезультатом = СтрЗаменить(ВнутреннееСоединениеСРезультатом, "ДД." + Поле + ".", "ДД." + Поле);
			КонецЦикла;
		Иначе
			ВнутреннееСоединениеСРезультатом = ТекстВнутреннегоСоединения(МассивГруппировки, "ОбъектМетаданных", УточнениеПоля);
		КонецЕсли;
		ПолныйТекстЗапроса = СтрЗаменить(ПолныйТекстЗапроса, "ГДЕ &ТекстВнутреннееСоединениеСРезультатом", ВнутреннееСоединениеСРезультатом);
		
		ПолныйТекстЗапроса = СтрЗаменить(ПолныйТекстЗапроса, "ПолноеИмяОбъектаМетаданных", ПутьКМетаданным);
		ПолныйТекстЗапроса = СтрЗаменить(ПолныйТекстЗапроса, "ИмяОбъектаМетаданных", ИмяРегистра);
		ПолныйТекстЗапроса = СтрЗаменить(ПолныйТекстЗапроса, "ОбъектМетаданных", ПутьКМетаданнымВЗапросе);
	КонецЕсли;
	
	Возврат ПолныйТекстЗапроса;
	
КонецФункции

// Функция-конструктор структуры параметров для формирования запроса сравнения
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * ОпределятьОбщееРасхождение - Булево -
// * ПроверятьКонтрольнуюСумму - Булево -
// * ДопустимоеОтклонение - Строка -
// * УсловияОтбораПосле - Строка -
// * УсловияОтбораДо - Строка -
// * ПоляКлючиКоторыеНужноРазвернуть - Массив -
// * СгруппироватьПоИзмерениям - Булево -
// * ЗаменыПолейПосле - Структура -
// * ЗаменыПолейДо - Структура -
// * ИсключаемыеПоля - Структура -
// * ПриРасхожденияхВыбиратьПервые - Число - при установке флага ОпределятьОбщееРасхождение управляет сколько первых
// 		максимальных расхождений будет выводиться при выборке расхождений
//
Функция ДополнительныеПараметрыФормированияЗапросаСравнения() Экспорт
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИсключаемыеПоля", Новый Структура);
	ДополнительныеПараметры.Вставить("ЗаменыПолейДо", Новый Структура);
	ДополнительныеПараметры.Вставить("ЗаменыПолейПосле", Новый Структура);
	ДополнительныеПараметры.Вставить("СгруппироватьПоИзмерениям", Ложь);
	ДополнительныеПараметры.Вставить("ПоляКлючиКоторыеНужноРазвернуть", Новый Массив);
	ДополнительныеПараметры.Вставить("УсловияОтбораДо", "");
	ДополнительныеПараметры.Вставить("УсловияОтбораПосле", "");
	ДополнительныеПараметры.Вставить("ДопустимоеОтклонение", "0.02");
	ДополнительныеПараметры.Вставить("ПроверятьКонтрольнуюСумму", Истина);
	ДополнительныеПараметры.Вставить("ОпределятьОбщееРасхождение", Ложь);
	ДополнительныеПараметры.Вставить("ПодчиненРегистратору", Истина);
	ДополнительныеПараметры.Вставить("ПриРасхожденияхВыбиратьПервые", 10);
	Возврат ДополнительныеПараметры;
КонецФункции

// Функция - конструктор создания структуры параметров запроса.
//
// Возвращаемое значение:
//	Структура - структура параметров:
// * НачалоПериода - Дата -
// * КонецПериода - Дата - 
// * МассивРегистраторов - Массив - 
// * ОтборПоРегистраторам - Булево - 
//
Функция ПараметрыЗапроса(Месяц, МассивРегистраторов = Неопределено) Экспорт
	
	ПараметрыЗапроса = Новый Структура("НачалоПериода, КонецПериода, МассивРегистраторов, ОтборПоРегистраторам");
	Если Не ЗначениеЗаполнено(МассивРегистраторов) Тогда // переинициализируем параметр, чтобы запрос не падал
		ПараметрыЗапроса.МассивРегистраторов = Новый Массив();
		ПараметрыЗапроса.ОтборПоРегистраторам = Ложь;
	Иначе
		ПараметрыЗапроса.ОтборПоРегистраторам = Истина;
		ПараметрыЗапроса.МассивРегистраторов = МассивРегистраторов;
	КонецЕсли;
	Если ЗначениеЗаполнено(Месяц) Тогда
		ПараметрыЗапроса.НачалоПериода = НачалоМесяца(Месяц);
		ПараметрыЗапроса.КонецПериода = КонецМесяца(Месяц);
	Иначе
		ПараметрыЗапроса.НачалоПериода = Дата("00010101000000");
		ПараметрыЗапроса.КонецПериода = Дата("39991212235959");
	КонецЕсли;
	
	Возврат ПараметрыЗапроса;
КонецФункции

Функция РегистрыСоСлужебнымРегистратором() Экспорт
	
	МассивВозврата = Новый Массив;
	
	МассивВозврата.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоСрокам.ПолноеИмя());
	МассивВозврата.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.ПолноеИмя());
	МассивВозврата.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПланОплат.ПолноеИмя());
	МассивВозврата.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПланОтгрузок.ПолноеИмя());
	МассивВозврата.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПланОплат.ПолноеИмя());
	МассивВозврата.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПланПоставок.ПолноеИмя());
	//++ Локализация
	МассивВозврата.Добавить(Метаданные.РегистрыСведений.ПодтверждениеОплатыНДСВБюджет.ПолноеИмя());
	//-- Локализация
	
	Возврат МассивВозврата;
	
КонецФункции

// Возвращает имя поля регистратора для регистра. Для регистров со служебным регистратором будет возвращен "ДокументРегистратор",
//	если регистр является независимым регистром сведений, то будет возвращен "Партия".
//
//	Параметры:
//		КоллекцияМетаданных - ОбъектМетаданныхКонфигурация, Строка - анализируемый объект метаданных или его полное имя
//			(как правило регистр накопления или регистр сведений).
//
//	Возвращаемое значение:
//		Строка - имя поля регистратора, которое должно использоваться для данного регистра.
//
Функция ИмяПоляРегистратораРегистра(КоллекцияМетаданных) Экспорт
	ИмяПоляРегистратора = "Регистратор";
	ПолноеИмяРегистра = ?(ТипЗнч(КоллекцияМетаданных) = Тип("Строка"), КоллекцияМетаданных, КоллекцияМетаданных.ПолноеИмя());
	Если Тестирование.РегистрыСоСлужебнымРегистратором().Найти(ПолноеИмяРегистра) <> Неопределено Тогда
		ИмяПоляРегистратора = "ДокументРегистратор";
	ИначеЕсли ТипЗнч(КоллекцияМетаданных) <> Тип("Строка") И Метаданные.РегистрыСведений.Содержит(КоллекцияМетаданных)
		И КоллекцияМетаданных.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый Тогда
		ИмяПоляРегистратора = "Партия";
	КонецЕсли;
	Возврат ИмяПоляРегистратора;
КонецФункции

Функция ПолучитьЭталонныеДанные() Экспорт
	
	ДополнительныеПараметры = ДополнительныеПараметрыФормированияЗапросаСравнения();
	ПараметрыТестирования = Обработки.ТестированиеОперацийЗакрытийМесяца.ПараметрыЗапускаТестирования();
	СоответствиеКонтрольныхРегистров = Обработки.ТестированиеОперацийЗакрытийМесяца.СоответствиеКонтрольныхРегистров();
	
	ТекстЗапроса = "";
	Для Каждого КонтрольныйРегистр Из ПараметрыТестирования.КонтрольныеРегистры Цикл
		ТекстЗапроса = ТекстЗапроса + СформироватьЗапросВыгрузкиДанных(КонтрольныйРегистр, ДополнительныеПараметры);
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	РезультатПакета = Запрос.ВыполнитьПакет();
	
	ТаблицыЭталонныхДанных = Новый Соответствие;
	Счетчик = 0;
	Для Каждого РезультатВыборка Из РезультатПакета Цикл
		
		ИмяРегистра = ПараметрыТестирования.КонтрольныеРегистры[Счетчик];
		Выгрузка    = РезультатВыборка.Выгрузить();
		
		ТаблицыЭталонныхДанных.Вставить(ИмяРегистра, Выгрузка);
		Счетчик = Счетчик + 1;
		
	КонецЦикла; 
	
	Возврат ТаблицыЭталонныхДанных;
	
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

Функция СтруктураПолейКоллекции(Коллекция, ДопПараметры) Экспорт
	
	МассивЧисловыхПолей = Новый Массив;
	СписокИсключений = СписокИсключений(ДопПараметры.ИсключаемыеПоля);
	ЭтоБухРегистр = ОбщегоНазначения.ЭтоРегистрБухгалтерии(Коллекция);
	Корреспонденция = ?(ЭтоБухРегистр, Коллекция.Корреспонденция, Ложь);
	
	#Область Ресурсы
	
	МассивРесурсов = Новый Массив;
	
	Для Каждого Поле Из Коллекция.Ресурсы Цикл
		Если Не СписокИсключений.Свойство(Поле.Имя) Тогда
			ПолеЧисловогоТипа = Строка(Поле.Тип) = Строка(Новый ОписаниеТипов("Число",,,Поле.Тип.КвалификаторыЧисла));
			МассивДляДобавления = ?(ПолеЧисловогоТипа, МассивЧисловыхПолей, МассивРесурсов);
			Если Поле.Тип <> Новый ОписаниеТипов("Строка") Тогда
				Если ЭтоБухРегистр И Корреспонденция И Не Поле.Балансовый Тогда
					МассивДляДобавления.Добавить(Поле.Имя+"Дт");
					МассивДляДобавления.Добавить(Поле.Имя+"Кт");
				Иначе
					МассивДляДобавления.Добавить(Поле.Имя);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	#КонецОбласти
	
	#Область Измерения
	
	МассивИзмерений = Новый Массив;
	
	Для Каждого Поле Из Коллекция.Измерения Цикл
		Если Не СписокИсключений.Свойство(Поле.Имя) Тогда
			ПолеЧисловогоТипа = Строка(Поле.Тип) = Строка(Новый ОписаниеТипов("Число",,,Поле.Тип.КвалификаторыЧисла));
			МассивДляДобавления = ?(Не ДопПараметры.СгруппироватьПоИзмерениям И ПолеЧисловогоТипа, МассивЧисловыхПолей, МассивИзмерений);
			Если Поле.Тип <> Новый ОписаниеТипов("Строка") Тогда
				Если ЭтоБухРегистр И Корреспонденция И Не Поле.Балансовый Тогда
					МассивДляДобавления.Добавить(Поле.Имя+"Дт");
					МассивДляДобавления.Добавить(Поле.Имя+"Кт");
				Иначе
					МассивДляДобавления.Добавить(Поле.Имя);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если ЭтоБухРегистр Тогда
		МассивДляДобавления.Вставить(1, "Содержание");
	КонецЕсли;
	
	#КонецОбласти
	
	#Область СтандартныеРеквизиты
	
	ОбязательныеСтандартныеРеквизиты = СтрРазделить("Период,Регистратор,ВидДвижения,Активность", ",");
	
	Для Каждого ТекРеквизитРегистра Из Коллекция.СтандартныеРеквизиты Цикл
		
		РеквизитРегистра = ТекРеквизитРегистра; // ОписаниеСтандартногоРеквизита
		Если Не СписокИсключений.Свойство(РеквизитРегистра.Имя) И ОбязательныеСтандартныеРеквизиты.Найти(РеквизитРегистра.Имя) <> Неопределено Тогда
			
			МассивИзмерений.Добавить(РеквизитРегистра.Имя);
				
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЭтоБухРегистр Тогда
		// Добавим счет и субконто:
		Если Корреспонденция Тогда
			МассивИзмерений.Добавить("СчетДт");
			МассивИзмерений.Добавить("СчетКт");
			МассивИзмерений.Добавить("СубконтоДт1");
			МассивИзмерений.Добавить("СубконтоКт1");
			МассивИзмерений.Добавить("СубконтоДт2");
			МассивИзмерений.Добавить("СубконтоКт2");
			МассивИзмерений.Добавить("СубконтоДт3");
			МассивИзмерений.Добавить("СубконтоКт3");
		Иначе
			МассивИзмерений.Добавить("ВидДвижения");
			МассивИзмерений.Добавить("Счет");
			МассивИзмерений.Добавить("Субконто1");
			МассивИзмерений.Добавить("Субконто2");
			МассивИзмерений.Добавить("Субконто3");
		КонецЕсли;
	КонецЕсли;
	
	#КонецОбласти
	
	#Область Реквизиты
	
	МассивРеквизитов = Новый Массив;
	
	Для каждого Поле Из Коллекция.Реквизиты Цикл
		Если Не СписокИсключений.Свойство(Поле.Имя) Тогда
			ПолеЧисловогоТипа = Строка(Поле.Тип) = Строка(Новый ОписаниеТипов("Число",,,Поле.Тип.КвалификаторыЧисла));
			МассивДляДобавления = ?(Не ДопПараметры.СгруппироватьПоИзмерениям И ПолеЧисловогоТипа, МассивЧисловыхПолей, МассивРеквизитов);
			Если Поле.Тип <> Новый ОписаниеТипов("Строка") Тогда
				МассивДляДобавления.Добавить(Поле.Имя);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	#КонецОбласти
	
	#Область СтруктураВозврата
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Измерения", МассивИзмерений);
	СтруктураПолей.Вставить("Реквизиты", МассивРеквизитов);
	СтруктураПолей.Вставить("Ресурсы", МассивРесурсов);
	СтруктураПолей.Вставить("ЧисловыеПоля", МассивЧисловыхПолей);
	
	#КонецОбласти
	
	Возврат СтруктураПолей;
	
КонецФункции

// Возвращает массив полей, которые необходимо исключать при формировании
// текста запроса.
Функция СписокИсключений(ИсключаемыеПоля)
	СписокИсключений = Новый Структура;
	СписокИсключений.Вставить("ИдентификаторСтроки", Истина);
	СписокИсключений.Вставить("НомерСтроки", Истина);
	СписокИсключений.Вставить("Комментарий", Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СписокИсключений,ИсключаемыеПоля);
	
	Возврат СписокИсключений;
КонецФункции

Функция СформироватьЗапросВыгрузкиДанных(ПутьКМетаданным, ДополнительныеПараметры)
	
	КоллекцияМетаданных = Метаданные.НайтиПоПолномуИмени(ПутьКМетаданным);
	ИмяРегистра = КоллекцияМетаданных.Имя;
	ЭтоБухРегистр = ОбщегоНазначения.ЭтоРегистрБухгалтерии(КоллекцияМетаданных);
	// Для бух. регистра используем виртуальную таблицу (для получения субконто):
	ПутьКМетаданнымВЗапросе = ПутьКМетаданным + ?(ЭтоБухРегистр, ".ДвиженияССубконто", "");
	// Для виртуальной таблицы бух. регистра могут встречаться значения NULL, определим их как НЕОПРЕДЕЛЕНО:
	УточнениеПоля = ИменаПолейЗапросаПоУмолчанию();
	Если ЭтоБухРегистр Тогда
		УточнениеПоля.Вставить("ВыражениеДо", "ЕСТЬNULL(");
		УточнениеПоля.Вставить("ВыражениеПосле", ", Неопределено)");
		УточнениеПоля.Вставить("Псевдоним");
	КонецЕсли;
	
	СтруктураПолей = Тестирование.СтруктураПолейКоллекции(КоллекцияМетаданных, ДополнительныеПараметры);
	
	МассивГруппировки = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивГруппировки, СтруктураПолей.Измерения, Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивГруппировки, СтруктураПолей.Ресурсы, Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивГруппировки, СтруктураПолей.Реквизиты, Истина);
	
	ТекстИзмеренияРеквизиты = ДобавитьПоляВЗапрос(МассивГруппировки, УточнениеПоля);
	
	Если СтруктураПолей.ЧисловыеПоля.Количество() > 0 Тогда
		УточнениеПоля.ВыражениеПосле = СтрЗаменить(УточнениеПоля.ВыражениеПосле, "Неопределено", "0");
		ТекстСуммы = ДобавитьПоляВЗапрос(СтруктураПолей.ЧисловыеПоля, УточнениеПоля);
	Иначе
		ТекстСуммы = "";
	КонецЕсли;
	
	ИмяРегистратора = ИмяПоляРегистратораРегистра(КоллекцияМетаданных);
	
	ПоляСортировки = Новый Массив;
	Если МассивГруппировки.Найти("Период") <> Неопределено Тогда
		ПоляСортировки.Добавить("ДД.Период");
	КонецЕсли;
	ПоляСортировки.Добавить("ДД." + ИмяРегистратора);
	Если МассивГруппировки.Найти("Организация") <> Неопределено Тогда
		ПоляСортировки.Добавить("ДД.Организация");
	КонецЕсли;
	ТекстПоляСортировки = СтрСоединить(ПоляСортировки, "," + Символы.ПС + Символы.Таб);

	ПолныйТекстЗапроса = "
	|ВЫБРАТЬ
	|	&ТекстИзмеренияРеквизиты,
	|   &ТекстСуммы,
	|	ИСТИНА
	|ИЗ
	|	ОбъектМетаданных КАК ДД
	|УПОРЯДОЧИТЬ ПО
	|	ДД.ПоляСортировки
	|;
	|///////////////////////////////////
	|";

	ПолныйТекстЗапроса = СтрЗаменить(ПолныйТекстЗапроса, "&ТекстИзмеренияРеквизиты", ТекстИзмеренияРеквизиты);
	ПолныйТекстЗапроса = СтрЗаменить(ПолныйТекстЗапроса, "&ТекстСуммы", ТекстСуммы);
	ПолныйТекстЗапроса = СтрЗаменить(ПолныйТекстЗапроса, "ИмяОбъектаМетаданных", ИмяРегистра);
	ПолныйТекстЗапроса = СтрЗаменить(ПолныйТекстЗапроса, "ОбъектМетаданных", ПутьКМетаданнымВЗапросе);
	ПолныйТекстЗапроса = СтрЗаменить(ПолныйТекстЗапроса, "ДД.ПоляСортировки", ТекстПоляСортировки);
	
	Возврат ПолныйТекстЗапроса;
	
КонецФункции

// Формирует текст внутреннего соединения для указанных полей и источника.
Функция ТекстВнутреннегоСоединения(МассивПолей, ИмяИсточника, ДополнительноеУточнениеПоляИсточника = Неопределено)
	
	Если ДополнительноеУточнениеПоляИсточника = Неопределено Тогда 
		ДополнительноеУточнениеПоляИсточника = ИменаПолейЗапросаПоУмолчанию();
	КонецЕсли;
	
	Шаблон = "ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИмяИсточникаДанных КАК Таблица
	|ПО ";
	ТекстВнутреннегоСоединения = СтрЗаменить(Шаблон, "ИмяИсточникаДанных", ИмяИсточника);
	
	ЭтоБухРегистр = МассивПолей.Найти("СубконтоДт1") <> Неопределено ИЛИ МассивПолей.Найти("Субконто1") <> Неопределено;
	
	ПерваяЗапись = Истина;
	Для Каждого Поле Из МассивПолей Цикл
		Если ЭтоБухРегистр И ЗначениеЗаполнено(ДополнительноеУточнениеПоляИсточника.ВыражениеПосле) Тогда
			// Обход ошибки платформы (для не валютных счетов валюта будет заполняться пустой ссылкой после реструктуризации)
			Если СтрНачинаетсяС(Поле, "Валюта") Тогда
				ВыражениеПосле = ", ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))";
			ИначеЕсли СтрНачинаетсяС(Поле, "Подразделение") Тогда
				ВыражениеПосле = ", ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))";
			ИначеЕсли СтрНачинаетсяС(Поле, "НаправлениеДеятельности") Тогда
				ВыражениеПосле = ", ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка))";
			Иначе
				ВыражениеПосле = ДополнительноеУточнениеПоляИсточника.ВыражениеПосле;
			КонецЕсли;
		Иначе
			ВыражениеПосле = ДополнительноеУточнениеПоляИсточника.ВыражениеПосле;
		КонецЕсли;
		
		Если ЭтоБухРегистр И Поле = "ВидДвижения" И ЗначениеЗаполнено(ВыражениеПосле) Тогда
			ПолеТаблицыИсточника = ДополнительноеУточнениеПоляИсточника.ВыражениеДо + "ВЫБОР
			|	КОГДА Таблица.ИмяПоля = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
			|		ТОГДА ""Дебет""
			|	КОГДА Таблица.ИмяПоля = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Кредит)
			|		ТОГДА ""Кредит""
			|	ИНАЧЕ """"
			|КОНЕЦ" + ВыражениеПосле;
		Иначе
			ПолеТаблицыИсточника = ДополнительноеУточнениеПоляИсточника.ВыражениеДо + "Таблица.ИмяПоля" + ВыражениеПосле;
		КонецЕсли;
		
		Шаблон = "ДД.ИмяПоля = " + ПолеТаблицыИсточника;
		ТекстПО = СтрЗаменить(Шаблон, "ИмяПоля", Поле);
		Если Не ПерваяЗапись Тогда
			ТекстПО = " И " + ТекстПО;
		КонецЕсли;
		ТекстВнутреннегоСоединения = ТекстВнутреннегоСоединения + "
		| " + ТекстПО;
		ПерваяЗапись = Ложь;
	КонецЦикла;
	Возврат ТекстВнутреннегоСоединения;
КонецФункции

Функция ИменаПолейЗапросаПоУмолчанию()
	ИменаПолейПоУмолчанию = Новый Структура;
	ИменаПолейПоУмолчанию.Вставить("ВыражениеДо", "");
	ИменаПолейПоУмолчанию.Вставить("ВыражениеПосле", "");
	ИменаПолейПоУмолчанию.Вставить("ВыражениеСоединения", ",");
	ИменаПолейПоУмолчанию.Вставить("ИмяПоля", "ДД");
	
	Возврат ИменаПолейПоУмолчанию;
КонецФункции

Функция ДобавитьПоляВЗапрос(МассивПолей, ИменаПолей = Неопределено)
	Если ИменаПолей = Неопределено Тогда 
		ИменаПолей = ИменаПолейЗапросаПоУмолчанию();
	КонецЕсли;
	ТекстПолей = "";
	Счетчик = 1;
	Граница = МассивПолей.Количество();
	ЭтоБухРегистр = МассивПолей.Найти("СубконтоДт1") <> Неопределено ИЛИ МассивПолей.Найти("Субконто1") <> Неопределено;
	Для Каждого Поле Из МассивПолей  Цикл
		Если ЭтоБухРегистр И ЗначениеЗаполнено(ИменаПолей.ВыражениеПосле) Тогда
			// Обход ошибки платформы (для не валютных счетов валюта будет заполняться пустой ссылкой после реструктуризации)
			Если СтрНачинаетсяС(Поле, "Валюта") Тогда
				ВыражениеПосле = ", ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))";
			ИначеЕсли СтрНачинаетсяС(Поле, "Подразделение") Тогда
				ВыражениеПосле = ", ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))";
			ИначеЕсли СтрНачинаетсяС(Поле, "НаправлениеДеятельности") Тогда
				ВыражениеПосле = ", ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка))";
			Иначе
				ВыражениеПосле = ИменаПолей.ВыражениеПосле;
			КонецЕсли;
		Иначе
			ВыражениеПосле = ИменаПолей.ВыражениеПосле;
		КонецЕсли;
		
		Если ЭтоБухРегистр И Поле = "ВидДвижения" И ЗначениеЗаполнено(ВыражениеПосле) Тогда
			ТекстПолей = ТекстПолей  + "
			|" + ИменаПолей.ВыражениеДо + "ВЫБОР
			|	КОГДА " + ИменаПолей.ИмяПоля + "." + Поле + " = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
			|		ТОГДА ""Дебет""
			|	КОГДА " + ИменаПолей.ИмяПоля + "." + Поле + " = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Кредит)
			|		ТОГДА ""Кредит""
			|	ИНАЧЕ """"
			|КОНЕЦ" + ВыражениеПосле;
		Иначе
			ТекстПолей = ТекстПолей  + "
			|" + ИменаПолей.ВыражениеДо + ИменаПолей.ИмяПоля + "." + Поле + ВыражениеПосле;
		КонецЕсли;
		
		Если ИменаПолей.ВыражениеПосле = "" ИЛИ ИменаПолей.ВыражениеПосле = ")" ИЛИ ИменаПолей.Свойство("Псевдоним") Тогда
			ТекстПолей = ТекстПолей + " КАК "+ СтрЗаменить(Поле,".","");
		КонецЕсли;
		Если Счетчик < Граница Тогда
			ТекстПолей = ТекстПолей + ИменаПолей.ВыражениеСоединения;
		КонецЕсли;
		Счетчик = Счетчик + 1;
	КонецЦикла;
	Возврат ТекстПолей;
КонецФункции

// проверят коллекцию на наличие поля "Период"
Функция ВКоллекцииЕстьПериод(Коллекция)
	ЕстьПериод = Ложь;
	Для Каждого ТекЭлемент Из Коллекция.СтандартныеРеквизиты Цикл
		Элемент = ТекЭлемент; // ОписаниеСтандартногоРеквизита
		Если Элемент.Имя = "Период" Тогда
			ЕстьПериод = Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат ЕстьПериод;
КонецФункции

Процедура РазвернутьПоляКлючи(МассивИзмерений, ПоляКлючиКоторыеНужноРазвернуть, ИсключаемыеПоля, ПолучитьПоляЧерезТочку = Ложь)
	
	Для Каждого Поле Из ПоляКлючиКоторыеНужноРазвернуть Цикл
		ИндексЭлемента = МассивИзмерений.Найти(Поле);
		Если ИндексЭлемента <> Неопределено Тогда
			МассивИзмерений.Удалить(ИндексЭлемента);
		КонецЕсли;
		Для Каждого МетаАналитика Из Метаданные.Справочники.КлючиАналитикиУчетаНоменклатуры.Реквизиты Цикл
			ПсевдонимПоля = Поле + МетаАналитика.Имя;
			Если Не ИсключаемыеПоля.Свойство(ПсевдонимПоля) Тогда
				Если ПолучитьПоляЧерезТочку Тогда
					МассивИзмерений.Добавить(Поле + "." + МетаАналитика.Имя);
				Иначе
					МассивИзмерений.Добавить(ПсевдонимПоля);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаменитьПоля(ИсходныйТекст, ЗаменыПолей, ПсевдонимТаблицы = "ДД")
	Для Каждого КлючИЗначение Из ЗаменыПолей Цикл
		 ИсходныйТекст = СтрЗаменить(ИсходныйТекст, ПсевдонимТаблицы + "." + КлючИЗначение.Ключ + " " + "КАК",СтрЗаменить(КлючИЗначение.Значение,"Т.",ПсевдонимТаблицы + ".") + " " + "КАК");
	КонецЦикла;
КонецПроцедуры

#КонецОбласти // СлужебныеПроцедурыИФункции
