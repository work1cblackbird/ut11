#Область ПрограммныйИнтерфейс

// Функция проверяет необходимость расчета скидок объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - проверяемый объект
//  УправляемыеСкидки - СписокЗначений - список управляемых скидок
//  ИдентификаторФормы - УникальныйИдентификатор - уникальный идентификатор формы
//  РассчитанныеСкидкиАдресВХранилище - Строка - адрес хранилища, куда будут помещены рассчитанные скидки/наценки.
//
// Возвращаемое значение:
//  Булево -
//
Функция НеобходимПерерасчетСкидок(
	Объект, УправляемыеСкидки, ИдентификаторФормы, РассчитанныеСкидкиАдресВХранилище) Экспорт
	
	СкидкиИзменились = Ложь;
	
	ПараметрыРасчета = НовыйПараметрыРассчитать();
	ПараметрыРасчета.ПрименятьКОбъекту					 = Ложь;
	ПараметрыРасчета.ТолькоПредварительныйРасчет		 = Ложь;
	ПараметрыРасчета.ВосстанавливатьУправляемыеСкидки	 = Истина;
	ПараметрыРасчета.УправляемыеСкидки					 = УправляемыеСкидки;
	РассчитанныеСкидки = Рассчитать(Объект, ПараметрыРасчета);
	
	КоличествоСтрокАктуальныхСкидок = РассчитанныеСкидки.ТаблицаСкидкиНаценки.Количество();
	Если КоличествоСтрокАктуальныхСкидок <> Объект.СкидкиНаценки.Количество() Тогда 
		СкидкиИзменились = Истина;
	Иначе
		
		Для НомерСтроки = 1 По КоличествоСтрокАктуальныхСкидок Цикл
			СтрокаТекущиеСкидки      = Объект.СкидкиНаценки[НомерСтроки-1];
			СтрокаРассчитанныеСкидки = РассчитанныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1];
			
			Если    СтрокаТекущиеСкидки.Сумма          <> СтрокаРассчитанныеСкидки.Сумма
				ИЛИ СтрокаТекущиеСкидки.КлючСвязи      <> СтрокаРассчитанныеСкидки.КлючСвязи
				ИЛИ СтрокаТекущиеСкидки.СкидкаНаценка  <> СтрокаРассчитанныеСкидки.СкидкаНаценка
				ИЛИ СтрокаТекущиеСкидки.НапомнитьПозже <> СтрокаРассчитанныеСкидки.НапомнитьПозже Тогда
				СкидкиИзменились = Истина;
				Прервать;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ИдентификаторФормы <> Неопределено Тогда
		РассчитанныеСкидкиАдресВХранилище = ПоместитьВоВременноеХранилище(РассчитанныеСкидки, ИдентификаторФормы);
	КонецЕсли;
	
	Возврат СкидкиИзменились;
	
КонецФункции

// Процедура отменяет рассчитанные по объекту скидки.
// Вызывается из форм документов.
//
// Параметры:
//  Объект - ДокументОбъект, ДанныеФормыСтруктура - Объект, в котором требуется рассчитать скидки (наценки).
//  ИмяТЧ - Строка - Имя табличной части.
//  РассчитыватьСуммуСНДС - Булево - Рассчитывать сумму с НДС.
//  РассчитыватьСуммуВзаиморасчетов - Булево - Рассчитывать сумму взаиморасчетов.
//  ОтменитьТолькоАвтоСкидки - Булево - Отменить только автоматические скидки (наценки).
//
Процедура ОтменитьСкидки(
	Объект, 
	ИмяТЧ, 
	РассчитыватьСуммуСНДС=Ложь, 
	РассчитыватьСуммуВзаиморасчетов=Ложь, 
	ОтменитьТолькоАвтоСкидки = Ложь) Экспорт
	
	Если НЕ Объект.Ссылка.Метаданные().ТабличныеЧасти.Найти("СкидкиНаценки") = Неопределено Тогда
		Объект.СкидкиНаценки.Очистить();
	КонецЕсли;
	
	ОчиститьСкидкиВТЧ(Объект, ИмяТЧ, РассчитыватьСуммуСНДС, РассчитыватьСуммуВзаиморасчетов, ОтменитьТолькоАвтоСкидки);
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СкидкиРассчитаны",Объект.Ссылка.Метаданные()) Тогда
		Объект.СкидкиРассчитаны = Ложь;
	КонецЕсли;
	
КонецПроцедуры


// Выполняет расчет скидок по документу.
// Вызывается из форм документов.
//
// Параметры:
//  Объект - см. СкидкиНаценкиСервер.Рассчитать.Объект
//  ВходныеПараметры - см. НовыйПараметрыРассчитать
//
// Возвращаемое значение:
// 	см. СкидкиНаценкиСервер.Рассчитать
//
Функция Рассчитать(Объект, ВходныеПараметры) Экспорт
	
	РезультатРасчета = СкидкиНаценкиСервер.Рассчитать(Объект, ВходныеПараметры);
	
	Возврат РезультатРасчета;
	
КонецФункции

// Процедура применяет результат расчет скидок к документу.
// Вызывается из форм документов.
//
// Параметры:
//  Объект - ДокументОбъект, ДанныеФормыСтруктура - Объект, в котором требуется рассчитать скидки (наценки).
//  ПримененныеСкидки - см. Рассчитать
//  РеализацияСверхЗаказа - Булево - Реализация сверх заказа.
//
Процедура ПрименитьРезультатРасчета(Объект, ПримененныеСкидки, РеализацияСверхЗаказа = Ложь) Экспорт

	СкидкиНаценкиСервер.ПрименитьРезультатРасчета(Объект, ПримененныеСкидки, РеализацияСверхЗаказа);

КонецПроцедуры


// Процедура назначает ручные скидки в табличной части
//
// Параметры:
//  Объект - ДокументОбъект, ДанныеФормыСтруктура - Объект, в котором требуется рассчитать скидки (наценки).
//  ИмяТЧ - Строка - Имя табличной части.
//  СуммаСкидкиКРаспределению - Число - Сумма скидки (наценки) к распределению.
//  ВходныеПараметры - см. НовыйПараметрыНазначитьРучнуюСкидку
//
Процедура НазначитьРучнуюСкидку(Объект, ИмяТЧ, СуммаСкидкиКРаспределению, ВходныеПараметры) Экспорт
	
	ПараметрыСкидки = Новый Структура();
	ПараметрыСкидки.Вставить("ИспользуютсяАвтоматическиеСкидки", Ложь);
	ПараметрыСкидки.Вставить("ТолькоДляАктивныхСтрок", Ложь);
	ПараметрыСкидки.Вставить("РассчитыватьСуммуСНДС", Ложь);
	ПараметрыСкидки.Вставить("РассчитыватьСуммуВзаиморасчетов", Ложь);
	ПараметрыСкидки.Вставить("ВыделенныеСтроки", Неопределено);
	ПараметрыСкидки.Вставить("АдресВоВременномХранилище", Неопределено);
	ПараметрыСкидки.Вставить("РеализацияСверхЗаказа", Ложь);
	
	ЗаполнитьЗначенияСвойств(ПараметрыСкидки, ВходныеПараметры);
	
	Если ИмяТЧ = "Услуги" Тогда
		ИмяКоличества = "Количество";
	ИначеЕсли ВходныеПараметры.Свойство("ИмяКолонкиКоличество") 
			  И НЕ ПустаяСтрока(ВходныеПараметры.ИмяКолонкиКоличество) Тогда
		ИмяКоличества = ВходныеПараметры.ИмяКолонкиКоличество;
	Иначе
		ИмяКоличества = "КоличествоУпаковок";
	КонецЕсли;
	
	Если ПараметрыСкидки.ВыделенныеСтроки <> Неопределено Тогда
		СтрокиТабличнойЧасти = Новый Массив();
		
		Для Каждого ТекСтрока Из ПараметрыСкидки.ВыделенныеСтроки Цикл
			НайденнаяСтрока = Объект[ИмяТЧ].НайтиПоИдентификатору(ТекСтрока);
			Если ?(ПараметрыСкидки.РеализацияСверхЗаказа, НайденнаяСтрока.КодСтроки = 0, Истина) Тогда
				СтрокиТабличнойЧасти.Добавить(НайденнаяСтрока);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		Если ПараметрыСкидки.ТолькоДляАктивныхСтрок Тогда
			СтрокиТабличнойЧасти = Объект[ИмяТЧ].НайтиСтроки(Новый Структура("Активность", Истина));
		ИначеЕсли ПараметрыСкидки.РеализацияСверхЗаказа Тогда
			СтрокиТабличнойЧасти = Объект[ИмяТЧ].НайтиСтроки(Новый Структура("КодСтроки", 0));
		Иначе
			СтрокиТабличнойЧасти = Объект[ИмяТЧ];
		КонецЕсли;
	КонецЕсли;
	
	Данные = ПолучитьИзВременногоХранилища(ПараметрыСкидки.АдресВоВременномХранилище); // см. НоваяСтруктураОграничений
	Данные.Ограничения.Колонки.Добавить("СуммаСкидкиКРаспределению", Новый ОписаниеТипов("Число"));
	
	Режим0Суммы = Ложь;
	
	Если СуммаСкидкиКРаспределению >=0 Тогда
		МаксимальнаяСуммаСкидкиНаценки = Данные.Ограничения.Итог("МаксимальнаяСуммаРучнойСкидки");
	Иначе
		МаксимальнаяСуммаСкидкиНаценки = Данные.Ограничения.Итог("МаксимальнаяСуммаРучнойНаценки");
	КонецЕсли;
	Если МаксимальнаяСуммаСкидкиНаценки = 0 Тогда
		Режим0Суммы = Истина;
	КонецЕсли;
	Если Режим0Суммы Тогда
		МаксимальнаяСуммаСкидкиНаценки = Данные.Ограничения.Итог("СуммаБезСкидки");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(МаксимальнаяСуммаСкидкиНаценки) Тогда
		МаксимальнаяСуммаСкидкиНаценки = 0;
	КонецЕсли;
	
	мСуммаСкидкиКРаспределению = СуммаСкидкиКРаспределению;
	Для Каждого Ограничение Из Данные.Ограничения Цикл
		
		Если мСуммаСкидкиКРаспределению >=0 Тогда
			МаксимальнаяСуммаСкидкиНаценкиОграничения = Ограничение.МаксимальнаяСуммаРучнойСкидки;
		Иначе
			МаксимальнаяСуммаСкидкиНаценкиОграничения = Ограничение.МаксимальнаяСуммаРучнойНаценки;
		КонецЕсли;
		Если Режим0Суммы Тогда
			МаксимальнаяСуммаСкидкиНаценкиОграничения = Ограничение.СуммаБезСкидки;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(МаксимальнаяСуммаСкидкиНаценкиОграничения) Тогда
			МаксимальнаяСуммаСкидкиНаценкиОграничения = 0;
		КонецЕсли;
		
		Если МаксимальнаяСуммаСкидкиНаценки <> 0 Тогда
			
			Ограничение.СуммаСкидкиКРаспределению = мСуммаСкидкиКРаспределению * (МаксимальнаяСуммаСкидкиНаценкиОграничения / МаксимальнаяСуммаСкидкиНаценки);
			
			мСуммаСкидкиКРаспределению = мСуммаСкидкиКРаспределению - Ограничение.СуммаСкидкиКРаспределению;
			МаксимальнаяСуммаСкидкиНаценки = МаксимальнаяСуммаСкидкиНаценки - МаксимальнаяСуммаСкидкиНаценкиОграничения;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого СтрокаТЧ Из СтрокиТабличнойЧасти Цикл
		
		ДанныеНоменклатуры = Данные.Товары.Найти(СтрокаТЧ.Номенклатура, "Номенклатура");
		
		Для Каждого Ограничение Из Данные.Ограничения Цикл
			
			Если  НЕ (ДанныеНоменклатуры.ЦеноваяГруппа = Ограничение.ЦеноваяГруппа
				      ИЛИ (Данные.Ограничения.Найти(ДанныеНоменклатуры.ЦеноваяГруппа, "ЦеноваяГруппа") = Неопределено
				      И Ограничение.ЦеноваяГруппа = Справочники.ЦеновыеГруппы.ПустаяСсылка())) Тогда
				Продолжить;
			КонецЕсли;
			
			СуммаБезСкидки = СтрокаТЧ[ИмяКоличества] * СтрокаТЧ.Цена;
			СуммаАвтоматическойСкидки = ?(ПараметрыСкидки.ИспользуютсяАвтоматическиеСкидки, СтрокаТЧ.СуммаАвтоматическойСкидки, 0);
			
			Если Ограничение.СуммаБезСкидки <> 0 Тогда
				СтрокаТЧ.СуммаРучнойСкидки = (СуммаБезСкидки) * (Ограничение.СуммаСкидкиКРаспределению / Ограничение.СуммаБезСкидки);
			Иначе
				СтрокаТЧ.СуммаРучнойСкидки = 0;
			КонецЕсли;
			Ограничение.СуммаСкидкиКРаспределению = Ограничение.СуммаСкидкиКРаспределению - СтрокаТЧ.СуммаРучнойСкидки;
			Ограничение.СуммаБезСкидки = Ограничение.СуммаБезСкидки - СуммаБезСкидки;
			
			Если СуммаБезСкидки <> 0 Тогда
				СтрокаТЧ.ПроцентРучнойСкидки = 100 * СтрокаТЧ.СуммаРучнойСкидки / СуммаБезСкидки;
			Иначе
				СтрокаТЧ.ПроцентРучнойСкидки = 0;
			КонецЕсли;
			
			СуммаСкидки = СуммаАвтоматическойСкидки + СтрокаТЧ.СуммаРучнойСкидки;
			
			Если ПараметрыСкидки.ИспользуютсяАвтоматическиеСкидки Тогда
				Если СуммаБезСкидки <> 0 Тогда
					СтрокаТЧ.ПроцентАвтоматическойСкидки = ?(СуммаБезСкидки = 0, 0 , 100 * СуммаАвтоматическойСкидки / СуммаБезСкидки);
				Иначе
					СтрокаТЧ.ПроцентАвтоматическойСкидки = 0;
				КонецЕсли;
			КонецЕсли;
			
			СтрокаТЧ.Сумма    = СуммаБезСкидки - ?(СуммаСкидки > СуммаБезСкидки, СуммаБезСкидки, СуммаСкидки);
			СтрокаТЧ.СуммаНДС = СкидкиНаценкиСервер.РассчитатьСуммуНДС(СтрокаТЧ.Сумма, СтрокаТЧ.СтавкаНДС, Объект);
			
			Если ПараметрыСкидки.РассчитыватьСуммуСНДС Тогда
				СтрокаТЧ.СуммаСНДС = СтрокаТЧ.Сумма + ?(Объект.ЦенаВключаетНДС, 0, СтрокаТЧ.СуммаНДС);
			КонецЕсли;
			
			Если ПараметрыСкидки.РассчитыватьСуммуВзаиморасчетов Тогда
				СтрокаТЧ.СуммаВзаиморасчетов = 0;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Объект.СуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(Объект[ИмяТЧ], Объект.ЦенаВключаетНДС);
	
КонецПроцедуры



// Процедура выполняет отмену ручных скидок в табличной части
//
// Параметры:
//  Объект - ДокументОбъект, ДанныеФормыСтруктура - Объект, в котором требуется рассчитать скидки (наценки).
//  ИмяТЧ - Строка - Имя табличной части.
//  ИспользуютсяАвтоматическиеСкидки - Булево - Признак использования автоматических скидок (наценок).
//  РассчитыватьСуммуСНДС - Булево - Рассчитывать сумму с НДС.
//  РассчитыватьСуммуВзаиморасчетов - Булево - Рассчитывать сумму взаиморасчетов.
//  РеализацияСверхЗаказа - Булево - Реализация сверх заказа.
//  ДополнительныеПараметры - Структура,Неопределено - Дополнительные параметры отмены скидок :
//  	* ИмяКолонкиКоличество - Строка - имя колонки с полем Количество.
//
Процедура ОтменитьРучныеСкидки(Объект, ИмяТЧ, ИспользуютсяАвтоматическиеСкидки, РассчитыватьСуммуСНДС, 
	РассчитыватьСуммуВзаиморасчетов=Ложь, РеализацияСверхЗаказа = Ложь, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ИмяТЧ="Услуги" Тогда
		ИмяКоличества = "Количество";
	ИначеЕсли ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ИмяКолонкиКоличество") Тогда
		ИмяКоличества = ДополнительныеПараметры.ИмяКолонкиКоличество;
	Иначе
		ИмяКоличества = "КоличествоУпаковок";
	КонецЕсли;
	
	Если РеализацияСверхЗаказа Тогда
		СтрокиТабличнойЧасти = Объект[ИмяТЧ].НайтиСтроки(Новый Структура("КодСтроки", 0));
	Иначе
		СтрокиТабличнойЧасти = Объект[ИмяТЧ];
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из СтрокиТабличнойЧасти Цикл
		
		Если СтрокаТЧ.СуммаРучнойСкидки <> 0 Или СтрокаТЧ.ПроцентРучнойСкидки <> 0 Тогда
			
			СтрокаТЧ.СуммаРучнойСкидки = 0;
			СтрокаТЧ.ПроцентРучнойСкидки = 0;
			
			СуммаБезСкидки = СтрокаТЧ[ИмяКоличества] * СтрокаТЧ.Цена;
			
			СуммаАвтоматическойСкидки = ?(ИспользуютсяАвтоматическиеСкидки, СтрокаТЧ.СуммаАвтоматическойСкидки, 0);
			
			СтрокаТЧ.Сумма    = СуммаБезСкидки - ?(СуммаАвтоматическойСкидки > СуммаБезСкидки, СуммаБезСкидки, СуммаАвтоматическойСкидки);
			СтрокаТЧ.СуммаНДС = СкидкиНаценкиСервер.РассчитатьСуммуНДС(СтрокаТЧ.Сумма, СтрокаТЧ.СтавкаНДС, Объект);
			
			Если РассчитыватьСуммуСНДС Тогда
				СтрокаТЧ.СуммаСНДС = СтрокаТЧ.Сумма + ?(Объект.ЦенаВключаетНДС, 0, СтрокаТЧ.СуммаНДС);
			КонецЕсли;
			
			Если РассчитыватьСуммуВзаиморасчетов Тогда
				СтрокаТЧ.СуммаВзаиморасчетов = 0;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Объект.СуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(Объект[ИмяТЧ], Объект.ЦенаВключаетНДС);
	
КонецПроцедуры


// Адрес данных для расчета ручных скидок во временном хранилище
//
// Параметры:
//  Форма						 - ФормаКлиентскогоПриложения - Форма
//  УникальныйИдентификатор		 - УникальныйИдентификатор - адрес во временном хранилище
//  Параметры					 - см. НовыйПараметрыАдресДанныхДляРасчетаРучныхСкидок
// 
// Возвращаемое значение:
//  Строка - Адрес во временном хранилище.
//
Функция АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(
	Форма, УникальныйИдентификатор, Параметры) Экспорт
	
	ИмяТаблицы 					= Параметры.ИмяТаблицы;
	ТолькоДляВыделенныхСтрок 	= Параметры.ТолькоДляВыделенныхСтрок;
	ИмяТаблицыВыделенныхСтрок 	= Параметры.ИмяТаблицыВыделенныхСтрок;
	ТолькоАктивныеСтроки 		= Параметры.ТолькоАктивныеСтроки;
	ИспользоватьОграничения 	= Параметры.ИспользоватьОграничения;
	РеализацияСверхЗаказа 		= Параметры.РеализацияСверхЗаказа;
	
	СоглашениеСКлиентом = Неопределено;
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма.Объект, "Соглашение") Тогда
		СоглашениеСКлиентом = Форма.Объект.Соглашение;
	КонецЕсли;

	ИспользоватьРучныеСкидки                     = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах");
	ИспользоватьОграниченияРучныхСкидокВПродажах = ПолучитьФункциональнуюОпцию("ИспользоватьОграниченияРучныхСкидокВПродажахПоПользователям");
	
	Если ЗначениеЗаполнено(СоглашениеСКлиентом) Тогда
		ИспользоватьОграниченияПоСоглашениям = ПолучитьФункциональнуюОпцию("ИспользоватьОграниченияРучныхСкидокВПродажахПоСоглашениям");
	Иначе
		ИспользоватьОграниченияПоСоглашениям = Ложь;
	КонецЕсли;

	ИспользоватьОграниченияРучныхСкидок = ИспользоватьОграничения И ИспользоватьРучныеСкидки И (ИспользоватьОграниченияРучныхСкидокВПродажах ИЛИ ИспользоватьОграниченияПоСоглашениям);

	Если ИмяТаблицы = "Услуги" Тогда
		ИмяКоличества = "Количество";
	Иначе
		ИмяКоличества = "КоличествоУпаковок";
	КонецЕсли;
	
	ПриПодготовкеПомещенияРезультатаРасчетаРучныхСкидокВоВременноеХранилище(Форма, ИмяКоличества);
	
	Товары = Новый ТаблицаЗначений;
	Товары.Колонки.Добавить("Номенклатура",              Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Товары.Колонки.Добавить(ИмяКоличества,               Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3)));
	Товары.Колонки.Добавить("Цена",                      Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	Товары.Колонки.Добавить("СуммаАвтоматическойСкидки", Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("СуммаРучнойСкидки",         Новый ОписаниеТипов("Число"));
	
	Если ТолькоДляВыделенныхСтрок Тогда
		
		Для Каждого ТекСтрока Из Форма.Элементы[?(ИмяТаблицыВыделенныхСтрок = Неопределено, ИмяТаблицы, ИмяТаблицыВыделенныхСтрок)].ВыделенныеСтроки Цикл
			
			СтрокаКоллекции = Форма.Объект[ИмяТаблицы].НайтиПоИдентификатору(ТекСтрока);
			
			Если ?(РеализацияСверхЗаказа, СтрокаКоллекции = Неопределено ИЛИ СтрокаКоллекции.КодСтроки > 0, СтрокаКоллекции = Неопределено) Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
			
		КонецЦикла;
	Иначе
		Если РеализацияСверхЗаказа Тогда
			НайденныеСтроки = Форма.Объект[ИмяТаблицы].НайтиСтроки(Новый Структура("КодСтроки", 0));
			Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
				НоваяСтрока = Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
			КонецЦикла;
		ИначеЕсли ТолькоАктивныеСтроки Тогда
			НайденныеСтроки =Форма.Объект[ИмяТаблицы].НайтиСтроки(Новый Структура("Активность", Истина));
			Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
				НоваяСтрока = Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
			КонецЦикла;
		Иначе
			Для Каждого СтрокаТЧ Из Форма.Объект[ИмяТаблицы] Цикл
				НоваяСтрока = Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИспользоватьОграниченияРучныхСкидок Тогда
		
		ОграниченияРучныхСкидок = НастройкиПродажДляПользователейСервер.ОграниченияСкидокНаценок(СоглашениеСКлиентом, Пользователи.ТекущийПользователь());
		ЦеновыеГруппы = ОграниченияРучныхСкидок.ВыгрузитьКолонку("ЦеноваяГруппа");
		
	Иначе
		
		ОграниченияРучныхСкидок = Новый ТаблицаЗначений;
		ОграниченияРучныхСкидок.Колонки.Добавить("ЦеноваяГруппа", Новый ОписаниеТипов("СправочникСсылка.ЦеновыеГруппы"));
		ОграниченияРучныхСкидок.Колонки.Добавить("МаксимальныйПроцентРучнойСкидки",  Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
		ОграниченияРучныхСкидок.Колонки.Добавить("МаксимальныйПроцентРучнойНаценки", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
		
		Ограничение = ОграниченияРучныхСкидок.Добавить();
		Ограничение.ЦеноваяГруппа = Справочники.ЦеновыеГруппы.ПустаяСсылка();
		Ограничение.МаксимальныйПроцентРучнойСкидки  = 999.99;
		Ограничение.МаксимальныйПроцентРучнойНаценки = 999.99;
		
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары." + ИмяКоличества + " " + "КАК КоличествоУпаковок,
	|	Товары.Цена КАК ЦенаЗаУпаковку,
	|	Товары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	Товары.СуммаРучнойСкидки КАК СуммаРучнойСкидки
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	СправочникНоменклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	Товары.ЦенаЗаУпаковку КАК ЦенаЗаУпаковку,
	|	Товары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	Товары.СуммаРучнойСкидки КАК СуммаРучнойСкидки
	|ПОМЕСТИТЬ ВременнаяТаблицаТовары
	|ИЗ
	|	ВременнаяТаблица КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО (СправочникНоменклатура.Ссылка = Товары.Номенклатура)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОграниченияРучныхСкидок.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	ОграниченияРучныхСкидок.МаксимальныйПроцентРучнойСкидки КАК МаксимальныйПроцентРучнойСкидки,
	|	ОграниченияРучныхСкидок.МаксимальныйПроцентРучнойНаценки КАК МаксимальныйПроцентРучнойНаценки
	|ПОМЕСТИТЬ ОграниченияРучныхСкидок
	|ИЗ
	|	&ОграниченияРучныхСкидок КАК ОграниченияРучныхСкидок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	Т.СуммаБезСкидки КАК СуммаБезСкидки,
	|	Т.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	Т.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
	|	ОграниченияРучныхСкидок.МаксимальныйПроцентРучнойСкидки КАК МаксимальныйПроцентРучнойСкидки,
	|	ОграниченияРучныхСкидок.МаксимальныйПроцентРучнойНаценки КАК МаксимальныйПроцентРучнойНаценки,
	|	ВЫРАЗИТЬ(ОграниченияРучныхСкидок.МаксимальныйПроцентРучнойСкидки / 100 * Т.СуммаБезСкидки КАК ЧИСЛО(31,2)) КАК МаксимальнаяСуммаРучнойСкидки,
	|	ВЫРАЗИТЬ(ОграниченияРучныхСкидок.МаксимальныйПроцентРучнойНаценки / 100 * Т.СуммаБезСкидки КАК ЧИСЛО(31,2)) КАК МаксимальнаяСуммаРучнойНаценки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ВременнаяТаблицаТовары.ЦеноваяГруппа В (&ЦеновыеГруппы)
	|				ТОГДА ВременнаяТаблицаТовары.ЦеноваяГруппа
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка)
	|		КОНЕЦ КАК ЦеноваяГруппа,
	|		СУММА(ВЫРАЗИТЬ(ВременнаяТаблицаТовары.КоличествоУпаковок * ВременнаяТаблицаТовары.ЦенаЗаУпаковку КАК ЧИСЛО(31,2))) КАК СуммаБезСкидки,
	|		СУММА(ВременнаяТаблицаТовары.СуммаАвтоматическойСкидки) КАК СуммаАвтоматическойСкидки,
	|		СУММА(ВременнаяТаблицаТовары.СуммаРучнойСкидки) КАК СуммаРучнойСкидки
	|	ИЗ
	|		ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВЫБОР
	|			КОГДА ВременнаяТаблицаТовары.ЦеноваяГруппа В (&ЦеновыеГруппы)
	|				ТОГДА ВременнаяТаблицаТовары.ЦеноваяГруппа
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка)
	|		КОНЕЦ) КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОграниченияРучныхСкидок КАК ОграниченияРучныхСкидок
	|		ПО (ОграниченияРучныхСкидок.ЦеноваяГруппа = Т.ЦеноваяГруппа)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаТовары.ЦеноваяГруппа КАК ЦеноваяГруппа
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("Товары", Товары);
	Запрос.Параметры.Вставить("ОграниченияРучныхСкидок", ОграниченияРучныхСкидок);
	Запрос.Параметры.Вставить("ЦеновыеГруппы", ЦеновыеГруппы);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Ограничения = Результат[3].Выгрузить(); // ТаблицаЗначений
	Ограничения.Индексы.Добавить("ЦеноваяГруппа");
	
	Товары = Результат[4].Выгрузить(); // ТаблицаЗначений
	Товары.Индексы.Добавить("Номенклатура");
	
	СтруктураОграничений = НоваяСтруктураОграничений();
	СтруктураОграничений.Ограничения = Ограничения;
	СтруктураОграничений.Товары = Товары;
	СтруктураОграничений.ИспользоватьОграниченияРучныхСкидок = ИспользоватьОграниченияРучныхСкидок;
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураОграничений, УникальныйИдентификатор);
	
КонецФункции

// Адрес данных для расчета ручных скидок во временном хранилище закупки
//
// Параметры:
//  Форма						 - ФормаКлиентскогоПриложения - Форма
//  УникальныйИдентификатор		 - УникальныйИдентификатор - адрес во временном хранилище
//  Параметры		 			 - см. НовыйПараметрыАдресДанныхДляРасчетаРучныхСкидок
// 
// Возвращаемое значение:
//  Строка - Адрес во временном хранилище.
//
Функция АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилищеЗакупки(
	Форма, УникальныйИдентификатор, Параметры) Экспорт

	ИмяТаблицы 					= Параметры.ИмяТаблицы;
	ТолькоДляВыделенныхСтрок 	= Параметры.ТолькоДляВыделенныхСтрок;
	ИмяТаблицыВыделенныхСтрок 	= Параметры.ИмяТаблицыВыделенныхСтрок;
	ТолькоАктивныеСтроки 		= Параметры.ТолькоАктивныеСтроки;
	ИспользоватьОграничения 	= Параметры.ИспользоватьОграничения;

	СоглашениеСПоставщиком = Неопределено;
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма.Объект, "Соглашение") Тогда
		СоглашениеСПоставщиком = Форма.Объект.Соглашение;
	КонецЕсли;

	ИспользоватьРучныеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВЗакупках");

	ИспользоватьОграниченияРучныхСкидок = ИспользоватьОграничения И ИспользоватьРучныеСкидки И Не ПолучитьФункциональнуюОпцию("БазоваяВерсия");

	Если ИмяТаблицы = "Услуги" Тогда
		ИмяКоличества = "Количество";
	Иначе
		ИмяКоличества = "КоличествоУпаковок";
	КонецЕсли;
	
	Товары = Новый ТаблицаЗначений;
	Товары.Колонки.Добавить("Номенклатура",              Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Товары.Колонки.Добавить(ИмяКоличества,               Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3)));
	Товары.Колонки.Добавить("Цена",                      Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	Товары.Колонки.Добавить("СуммаАвтоматическойСкидки", Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("СуммаРучнойСкидки",         Новый ОписаниеТипов("Число"));
	
	Если ТолькоДляВыделенныхСтрок Тогда
		
		Для Каждого ТекСтрока Из Форма.Элементы[?(ИмяТаблицыВыделенныхСтрок = Неопределено, ИмяТаблицы, ИмяТаблицыВыделенныхСтрок)].ВыделенныеСтроки Цикл
			
			СтрокаКоллекции = Форма.Объект[ИмяТаблицы].НайтиПоИдентификатору(ТекСтрока);
			
			Если СтрокаКоллекции = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
			
		КонецЦикла;
	Иначе
		
		Если Не ТолькоАктивныеСтроки Тогда
			Для Каждого СтрокаТЧ Из Форма.Объект[ИмяТаблицы] Цикл
				НоваяСтрока = Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
			КонецЦикла;
		Иначе
			НайденныеСтроки =Форма.Объект.Товары.НайтиСтроки(Новый Структура("Активность", Истина));
			Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
				НоваяСтрока = Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИспользоватьОграниченияРучныхСкидок Тогда
		
		Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка) КАК ЦеноваяГруппа,
			|	СоглашенияСПоставщиками.ПроцентРучнойСкидки     КАК МаксимальныйПроцентРучнойСкидки,
			|	СоглашенияСПоставщиками.ПроцентРучнойНаценки    КАК МаксимальныйПроцентРучнойНаценки
			|ИЗ
			|	Справочник.СоглашенияСПоставщиками КАК СоглашенияСПоставщиками
			|ГДЕ
			|	СоглашенияСПоставщиками.Ссылка = &СоглашениеСПоставщиком
			|");
		Запрос.УстановитьПараметр("СоглашениеСПоставщиком", СоглашениеСПоставщиком);
		
		ОграниченияРучныхСкидок = Запрос.Выполнить().Выгрузить();
		
		ЦеновыеГруппы = ОграниченияРучныхСкидок.ВыгрузитьКолонку("ЦеноваяГруппа");
		
	Иначе
		
		ОграниченияРучныхСкидок = Новый ТаблицаЗначений;
		ОграниченияРучныхСкидок.Колонки.Добавить("ЦеноваяГруппа", Новый ОписаниеТипов("СправочникСсылка.ЦеновыеГруппы"));
		ОграниченияРучныхСкидок.Колонки.Добавить("МаксимальныйПроцентРучнойСкидки",  Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
		ОграниченияРучныхСкидок.Колонки.Добавить("МаксимальныйПроцентРучнойНаценки", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
		
		Ограничение = ОграниченияРучныхСкидок.Добавить();
		Ограничение.ЦеноваяГруппа = Справочники.ЦеновыеГруппы.ПустаяСсылка();
		Ограничение.МаксимальныйПроцентРучнойСкидки  = 999.99;
		Ограничение.МаксимальныйПроцентРучнойНаценки = 999.99;
		
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары." + ИмяКоличества + " " + "КАК КоличествоУпаковок,
	|	Товары.Цена КАК ЦенаЗаУпаковку,
	|	Товары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	Товары.СуммаРучнойСкидки КАК СуммаРучнойСкидки
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	СправочникНоменклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	Товары.ЦенаЗаУпаковку КАК ЦенаЗаУпаковку,
	|	Товары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	Товары.СуммаРучнойСкидки КАК СуммаРучнойСкидки
	|ПОМЕСТИТЬ ВременнаяТаблицаТовары
	|ИЗ
	|	ВременнаяТаблица КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО (СправочникНоменклатура.Ссылка = Товары.Номенклатура)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОграниченияРучныхСкидок.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	ОграниченияРучныхСкидок.МаксимальныйПроцентРучнойСкидки КАК МаксимальныйПроцентРучнойСкидки,
	|	ОграниченияРучныхСкидок.МаксимальныйПроцентРучнойНаценки КАК МаксимальныйПроцентРучнойНаценки
	|ПОМЕСТИТЬ ОграниченияРучныхСкидок
	|ИЗ
	|	&ОграниченияРучныхСкидок КАК ОграниченияРучныхСкидок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	Т.СуммаБезСкидки КАК СуммаБезСкидки,
	|	Т.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	Т.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
	|	ОграниченияРучныхСкидок.МаксимальныйПроцентРучнойСкидки КАК МаксимальныйПроцентРучнойСкидки,
	|	ОграниченияРучныхСкидок.МаксимальныйПроцентРучнойНаценки КАК МаксимальныйПроцентРучнойНаценки,
	|	ВЫРАЗИТЬ(ОграниченияРучныхСкидок.МаксимальныйПроцентРучнойСкидки / 100 * Т.СуммаБезСкидки КАК ЧИСЛО(31,2)) КАК МаксимальнаяСуммаРучнойСкидки,
	|	ВЫРАЗИТЬ(ОграниченияРучныхСкидок.МаксимальныйПроцентРучнойНаценки / 100 * Т.СуммаБезСкидки КАК ЧИСЛО(31,2)) КАК МаксимальнаяСуммаРучнойНаценки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ВременнаяТаблицаТовары.ЦеноваяГруппа В (&ЦеновыеГруппы)
	|				ТОГДА ВременнаяТаблицаТовары.ЦеноваяГруппа
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка)
	|		КОНЕЦ КАК ЦеноваяГруппа,
	|		СУММА(ВЫРАЗИТЬ(ВременнаяТаблицаТовары.КоличествоУпаковок * ВременнаяТаблицаТовары.ЦенаЗаУпаковку КАК ЧИСЛО(31,2))) КАК СуммаБезСкидки,
	|		СУММА(ВременнаяТаблицаТовары.СуммаАвтоматическойСкидки) КАК СуммаАвтоматическойСкидки,
	|		СУММА(ВременнаяТаблицаТовары.СуммаРучнойСкидки) КАК СуммаРучнойСкидки
	|	ИЗ
	|		ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВЫБОР
	|			КОГДА ВременнаяТаблицаТовары.ЦеноваяГруппа В (&ЦеновыеГруппы)
	|				ТОГДА ВременнаяТаблицаТовары.ЦеноваяГруппа
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка)
	|		КОНЕЦ) КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОграниченияРучныхСкидок КАК ОграниченияРучныхСкидок
	|		ПО (ОграниченияРучныхСкидок.ЦеноваяГруппа = Т.ЦеноваяГруппа)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаТовары.ЦеноваяГруппа КАК ЦеноваяГруппа
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("Товары", Товары);
	Запрос.Параметры.Вставить("ОграниченияРучныхСкидок", ОграниченияРучныхСкидок);
	Запрос.Параметры.Вставить("ЦеновыеГруппы", ЦеновыеГруппы);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Ограничения = Результат[3].Выгрузить(); // ТаблицаЗначений
	Ограничения.Индексы.Добавить("ЦеноваяГруппа");
	
	Товары = Результат[4].Выгрузить(); // ТаблицаЗначений
	Товары.Индексы.Добавить("Номенклатура");
	
	СтруктураОграничений = НоваяСтруктураОграничений();
	СтруктураОграничений.Ограничения = Ограничения;
	СтруктураОграничений.Товары = Товары;
	СтруктураОграничений.ИспользоватьОграниченияРучныхСкидок = ИспользоватьОграниченияРучныхСкидок;
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураОграничений, УникальныйИдентификатор);

КонецФункции


//
// Параметры:
//  Объект - ДокументОбъект.РеализацияТоваровУслуг - Объект.
//
// Возвращаемое значение:
//  Структура - со свойствами:
//   * ТаблицаТоваров - ТаблицаЗначений- колонки:
//  	** КодСтроки 				- Число - код строки документа ЗаказКлиента,ЗаявкаНаВозвратТоваровОтКлиента
//  	** КлючСвязи 				- Число - ключ связи строки документа ЗаказКлиента,ЗаявкаНаВозвратТоваровОтКлиента
//  	** Коэффициент 				- Число -
//  	** ПроцентАвтоматическойСкидки - Число -
//  	** ПроцентРучнойСкидки 		- Число -
//  	** ЗаказКлиента 				- ДокументСсылка.ЗаказКлиента,ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента -
//  	** РеализацияКоличество 		- Число -
//  	** ЗаказКоличество 			- Число -
//  	** ЗаказСуммаАвтоматическойСкидки - Число -
//  	** ЗаказСуммаРучнойСкидки 	- Число -
//  	** ВалютаКоэффициентПересчета - Число -
//  	** СуммаАвтоматическойСкидки - Число -
//  	** СуммаРучнойСкидки 		- Число -
//   * СкидкиНаценкиЗаказа - ТаблицаЗначений - колонки:
//  	** КлючСвязи 	- Число -
//  	** СкидкаНаценка - СправочникСсылка.СкидкиНаценки -
//  	** Сумма 		- Число - сумма скидки/наценки с учетом коэффициента пересчета
//  	** ЗаказКлиента  - ДокументСсылка.ЗаказКлиента, ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента -
//
Функция СкидкиНаценкиПоЗаказу(Объект) Экспорт
	
	РезультатыЗапроса = ЗапросСкидкиНаценкиПоЗаказу(Объект).ВыполнитьПакет();
	
	Результат = Новый Структура();
	Результат.Вставить("ТаблицаТоваров",РезультатыЗапроса[3].Выгрузить());
	Результат.Вставить("СкидкиНаценкиЗаказа",РезультатыЗапроса[4].Выгрузить());
	Результат.Вставить("НачислениеБонусныхБалловЗаказа",РезультатыЗапроса[5].Выгрузить());
	
	Возврат Результат;
	
КонецФункции



// Выполняет сохранение отработанных сообщений.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект.
//  Сообщения - Массив - Сообщения к сохранению.
//
Процедура СохранитьОтработанныеСообщения(Объект, Сообщения) Экспорт
	
	Для Каждого СтрокаТЧ Из Сообщения Цикл
		НайденныеСтроки = Объект.СкидкиНаценки.НайтиСтроки(Новый Структура("СкидкаНаценка, КлючСвязи", СтрокаТЧ.СкидкаНаценка, -1));
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НайденнаяСтрока.НапомнитьПозже = СтрокаТЧ.НапомнитьПозже;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

// Возвращает структуру, содержащую сообщения для объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура, ДокументОбъект - Объект.
//  ДополнительныеПараметры - Структура - возможность определить имена реквизитов, НЕ обязательный:
//  	* ИмяРеквизитаПартнер -Строка - наличие не обязательно
//  	* НеВыводитьСообщенияПоСоглашению -Булево - наличие не обязательно
//
// Возвращаемое значение:
//  Структура - со свойствами:
//   * Сообщения - Массив - массив структур с ключами "СкидкаНаценка, НапомнитьПозже"
//   * АвтоматическиОткрывать - Булево - Автоматически открывать сообщение.
//   * КартаЛояльности - СправочникСсылка.КартыЛояльности - Карта лояльности.
//   * Партнер - СправочникСсылка.Партнеры - Партнер.
//   * Контрагент - СправочникСсылка.Контрагенты - 
//
Функция СтруктураСообщений(Объект, ДополнительныеПараметры = Неопределено) Экспорт
	
	Сообщения = Новый Массив;
	
	ИмяРеквизитаПартнер = "Партнер";
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		Если ДополнительныеПараметры.Свойство("ИмяРеквизитаПартнер") Тогда
			ИмяРеквизитаПартнер = ДополнительныеПараметры.ИмяРеквизитаПартнер
		КонецЕсли;
	КонецЕсли;
	
	АвтоматическиОткрывать = Ложь;
	
	НайденныеСтроки = Объект.СкидкиНаценки.НайтиСтроки(Новый Структура("КлючСвязи", -1));
	Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
		Сообщения.Добавить(Новый Структура("СкидкаНаценка, НапомнитьПозже", СтрокаТЧ.СкидкаНаценка, СтрокаТЧ.НапомнитьПозже));
		Если СтрокаТЧ.НапомнитьПозже Тогда
			АвтоматическиОткрывать = Истина;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураСообщений = Новый Структура;
	СтруктураСообщений.Вставить("Сообщения", Сообщения);
	СтруктураСообщений.Вставить("АвтоматическиОткрывать", АвтоматическиОткрывать);
	СтруктураСообщений.Вставить("КартаЛояльности", Объект.КартаЛояльности);
	СтруктураСообщений.Вставить("Партнер", Объект[ИмяРеквизитаПартнер]);
	
	Если ТипЗнч(Объект.Ссылка) <> Тип("ДокументСсылка.ЧекККМ") Тогда
		СтруктураСообщений.Вставить("Контрагент", Объект.Контрагент);
	КонецЕсли;
	
	НеВыводитьСообщенияПоСоглашению = (ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЧекККМ"))
	                                   Или (ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
	                                   И ДополнительныеПараметры.Свойство("НеВыводитьСообщенияПоСоглашению")
	                                   И ДополнительныеПараметры.НеВыводитьСообщенияПоСоглашению);
	
	Если Не НеВыводитьСообщенияПоСоглашению Тогда
		СтруктураСообщений.Вставить("Соглашение", Объект.Соглашение);
	КонецЕсли;
	
	Возврат СтруктураСообщений;
	
КонецФункции

// Настраивает отображение команды показать сообщения на форме.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект.
//  ЭлементФормы - КнопкаФормы - Элемент формы.
//  Видимость - Булево - Признак видимости элемента формы.
//  ДополнительныеПараметры - см. СтруктураСообщений.ДополнительныеПараметры
//
Процедура НастроитьКомандуПоказатьСообщения(Объект, ЭлементФормы, Видимость = Истина, ДополнительныеПараметры = Неопределено) Экспорт
	
	СтруктураСообщений = СтруктураСообщений(Объект, ДополнительныеПараметры);
	ВсегоСообщений = СтруктураСообщений.Сообщения.Количество();
	НепрочитанныхСообщений = 0;
	Для Каждого СтрокаТЧ Из СтруктураСообщений.Сообщения Цикл
		Если СтрокаТЧ.НапомнитьПозже Тогда
			НепрочитанныхСообщений = НепрочитанныхСообщений + 1;
		КонецЕсли;
	КонецЦикла;
	ЭлементФормы.Видимость = ВсегоСообщений > 0 И Видимость;
	Если НепрочитанныхСообщений > 0 Тогда
		ЭлементФормы.Заголовок = СтрШаблон(НСтр("ru = 'Показать непрочитанные сообщения (%1)'"), НепрочитанныхСообщений);
	Иначе
		ЭлементФормы.Заголовок = СтрШаблон(НСтр("ru = 'Показать сообщения (%1)'"), СтруктураСообщений.Сообщения.Количество());
	КонецЕсли;
	
КонецПроцедуры

#Область Конструкторы

// Конструктор параметра метода Рассчитать().
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * ТолькоПредварительныйРасчет - Булево - Только предварительный расчет.
//   * ПрименятьКОбъекту - Булево - Применять к объекту.
//   * ВосстанавливатьУправляемыеСкидки - Булево - Восстанавливать управляемые скидки (наценки).
//   * УправляемыеСкидки - СписокЗначений из СправочникСсылка.СкидкиНаценки - Управляемые скидки (наценки).
//  в зависимости от документа.
//   * РеализацияСверхЗаказа - Булево - для Документ.РеализацияТоваровУслуг.
//   * ИмяКолонкиУпаковка - Строка - для Документ.КоммерческоеПредложениеКлиенту.
//   * ИмяКолонкиКоличествоУпаковок - Строка - для Документ.КоммерческоеПредложениеКлиенту.
//   * ЗаполнитьРеализациюПоЗаказу - Булево - для Документ.РеализацияТоваровУслуг при РеализацияПоЗаказам = Истина.
//
Функция НовыйПараметрыРассчитать() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ТолькоПредварительныйРасчет",		Ложь);
	Параметры.Вставить("ПрименятьКОбъекту",					Ложь);
	Параметры.Вставить("ВосстанавливатьУправляемыеСкидки",	Ложь);
	Параметры.Вставить("УправляемыеСкидки",					Новый СписокЗначений());
	
	Параметры.Вставить("ИмяКолонкиУпаковка",				"");		// для КоммерческоеПредложениеКлиенту
	Параметры.Вставить("ИмяКолонкиКоличествоУпаковок", 		"");		// для КоммерческоеПредложениеКлиенту
	Параметры.Вставить("РеализацияСверхЗаказа",				Ложь);		// для РеализацияТоваровУслуг
	Параметры.Вставить("ЗаполнитьРеализациюПоЗаказу",		Ложь);		// для РеализацияТоваровУслуг
	
	Возврат Параметры;
	
КонецФункции

// Конструктор параметра ВходныеПараметры метода НазначитьРучнуюСкидку()
//
// Возвращаемое значение:
//  Структура - Структура со свойствами, все свойства необязательные к существованию:
//   * ИспользуютсяАвтоматическиеСкидки - Булево - 
//   * ТолькоДляАктивныхСтрок - Булево - 
//   * РассчитыватьСуммуСНДС - Булево - 
//   * РассчитыватьСуммуВзаиморасчетов - Булево - 
//   * РеализацияСверхЗаказа - Булево - 
//   * ВыделенныеСтроки - Массив,Неопределено - 
//   * АдресВоВременномХранилище - Строка,Неопределено - 
//   * ИмяКолонкиКоличество - Строка,Неопределено - 
//
Функция НовыйПараметрыНазначитьРучнуюСкидку() Экспорт
	
	Параметры = Новый Структура();
	Параметры.Вставить("ИспользуютсяАвтоматическиеСкидки", Ложь);
	Параметры.Вставить("ТолькоДляАктивныхСтрок", Ложь);
	Параметры.Вставить("РассчитыватьСуммуСНДС", Ложь);
	Параметры.Вставить("РассчитыватьСуммуВзаиморасчетов", Ложь);
	Параметры.Вставить("РеализацияСверхЗаказа", Ложь);
	Параметры.Вставить("ВыделенныеСтроки", Неопределено);
	Параметры.Вставить("АдресВоВременномХранилище", Неопределено);
	Параметры.Вставить("ИмяКолонкиКоличество", Неопределено);
	
	Возврат Параметры;
	
КонецФункции
	
// Конструктор параметра ПараметрыВызова метода АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище().
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//		* ИмяТаблицы 				 - Строка - Только предварительный расчет.
//		* ИмяТаблицыВыделенныхСтрок	 - Строка,Неопределено - Имя таблицы выделенных строк.
//		* ТолькоДляВыделенныхСтрок	 - Булево - Использовать только для выделенных строк.
//		* ТолькоАктивныеСтроки		 - Булево - Только активные строки.
//		* ИспользоватьОграничения	 - Булево - Использовать ограничения.
//		* РеализацияСверхЗаказа		 - Булево - Использовать реализацию сверх заказа.
//
Функция НовыйПараметрыАдресДанныхДляРасчетаРучныхСкидок() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ИмяТаблицы", "");
	Параметры.Вставить("ТолькоДляВыделенныхСтрок", Ложь);
	Параметры.Вставить("ИмяТаблицыВыделенныхСтрок", Неопределено);
	Параметры.Вставить("ТолькоАктивныеСтроки", Ложь);
	Параметры.Вставить("ИспользоватьОграничения", Истина);
	Параметры.Вставить("РеализацияСверхЗаказа", Ложь);
	
	Возврат Параметры;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура выполняет отмену ручных скидок в табличной части.
//
// Параметры:
//  Объект - ДокументОбъект, ДанныеФормыСтруктура - Объект, в котором требуется рассчитать скидки (наценки).
//  ИмяТЧ 							- Строка 	- Имя табличной части.
//  РассчитыватьСуммуСНДС 			- Булево 	- Рассчитывать сумму с НДС.
//  РассчитыватьСуммуВзаиморасчетов - Булево 	- Рассчитывать сумму взаиморасчетов.
//  ОтменитьТолькоАвтоСкидки 		- Булево 	- Отменить только автоматические скидки (наценки).
//
Процедура ОчиститьСкидкиВТЧ(
	Объект, 
	ИмяТЧ, 
	РассчитыватьСуммуСНДС=Ложь, 
	РассчитыватьСуммуВзаиморасчетов=Ложь, 
	ОтменитьТолькоАвтоСкидки = Ложь)
	
	Если ИмяТЧ = "Услуги" Тогда
		ИмяКоличества = "Количество";
	Иначе
		ИмяКоличества = "КоличествоУпаковок";
	КонецЕсли;

	МетаданнныеОбъекта = Объект.Ссылка.Метаданные();
	ЕстьСуммаАвтоматическойСкидки = ОбщегоНазначенияУТ.ЕстьРеквизитТабЧастиОбъекта("СуммаАвтоматическойСкидки", МетаданнныеОбъекта, ИмяТЧ);
	ЕстьСуммаРучнойСкидки = ОбщегоНазначенияУТ.ЕстьРеквизитТабЧастиОбъекта("СуммаРучнойСкидки", МетаданнныеОбъекта, ИмяТЧ);

	Для Каждого СтрокаТЧ Из Объект[ИмяТЧ] Цикл
		
		Если ЕстьСуммаАвтоматическойСкидки Тогда
			СтрокаТЧ.СуммаАвтоматическойСкидки   = 0;
			СтрокаТЧ.ПроцентАвтоматическойСкидки = 0;
		КонецЕсли;
		
		Если ЕстьСуммаРучнойСкидки И НЕ ОтменитьТолькоАвтоСкидки Тогда
			СтрокаТЧ.СуммаРучнойСкидки           = 0;
			СтрокаТЧ.ПроцентРучнойСкидки         = 0;
		КонецЕсли;
		
		СуммаБезСкидки = СтрокаТЧ[ИмяКоличества] * СтрокаТЧ.Цена - СтрокаТЧ.СуммаРучнойСкидки;
		
		СтрокаТЧ.Сумма    = СуммаБезСкидки;
		СтрокаТЧ.СуммаНДС = СкидкиНаценкиСервер.РассчитатьСуммуНДС(СтрокаТЧ.Сумма, СтрокаТЧ.СтавкаНДС, Объект);
		
		Если РассчитыватьСуммуСНДС Тогда
			СтрокаТЧ.СуммаСНДС = СтрокаТЧ.Сумма + ?(Объект.ЦенаВключаетНДС, 0, СтрокаТЧ.СуммаНДС);
		КонецЕсли;
		
		Если РассчитыватьСуммуВзаиморасчетов Тогда
			СтрокаТЧ.СуммаВзаиморасчетов = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	Объект.СуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(Объект[ИмяТЧ], Объект.ЦенаВключаетНДС);
	
КонецПроцедуры

// Функция-конструктор структуры ограничений
// 
// Возвращаемое значение:
// 	Структура - со свойствами:
// 	* Ограничения - ТаблицаЗначений - 
// 	* Товары - ТаблицаЗначений - 
// 	* ИспользоватьОграниченияРучныхСкидок - Булево - 
// 
Функция НоваяСтруктураОграничений()
	
	Результат = Новый Структура();
	Результат.Вставить("Ограничения");
	Результат.Вставить("Товары");
	Результат.Вставить("ИспользоватьОграниченияРучныхСкидок");
	
	Возврат Результат;
	
КонецФункции

Функция ЗапросСкидкиНаценкиПоЗаказу(Объект)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КурсВалютыВзаиморасчетов.КурсЧислитель * КурсВалюты.КурсЗнаменатель / (КурсВалюты.КурсЧислитель * КурсВалютыВзаиморасчетов.КурсЗнаменатель) КАК КоэффициентПересчета
	|ПОМЕСТИТЬ ВалютаЗаказаВВалютуДокумента
	|ИЗ
	|	РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта И БазоваяВалюта = &БазоваяВалюта) КАК КурсВалюты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата, Валюта = &ВалютаВзаиморасчетов И БазоваяВалюта = &БазоваяВалюта) КАК КурсВалютыВзаиморасчетов
	|		ПО (ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.ЗаказКлиента КАК ЗаказКлиента,
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(Товары.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
	|	ВЫРАЗИТЬ(Товары.КодСтроки КАК ЧИСЛО) КАК КодСтроки,
	|	ВЫРАЗИТЬ(Товары.КлючСвязи КАК ЧИСЛО) КАК КлючСвязи,
	|	ВЫРАЗИТЬ(Товары.Количество КАК ЧИСЛО) КАК Количество
	|ПОМЕСТИТЬ ТоварыДокумента
	|ИЗ
	|	&ТаблицаТоваров КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыЗаказа.КодСтроки КАК КодСтроки,
	|	ТоварыЗаказа.КлючСвязи КАК КлючСвязи,
	|	ТоварыРеализации.Количество / ТоварыЗаказа.Количество КАК Коэффициент,
	|	ТоварыЗаказа.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	ТоварыЗаказа.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	|	ТоварыЗаказа.Ссылка КАК ЗаказКлиента,
	|	ТоварыРеализации.Количество КАК РеализацияКоличество,
	|	ТоварыЗаказа.Количество КАК ЗаказКоличество,
	|	ТоварыЗаказа.СуммаАвтоматическойСкидки КАК ЗаказСуммаАвтоматическойСкидки,
	|	ТоварыЗаказа.СуммаРучнойСкидки КАК ЗаказСуммаРучнойСкидки,
	|	ТоварыЗаказа.СуммаБонусныхБалловКСписанию КАК ЗаказСуммаБонусныхБалловКСписанию,
	|	ТоварыЗаказа.СуммаБонусныхБалловКСписаниюВВалюте КАК ЗаказСуммаБонусныхБалловКСписаниюВВалюте,
	|	ТоварыЗаказа.СуммаНачисленныхБонусныхБалловВВалюте КАК ЗаказСуммаНачисленныхБонусныхБалловВВалюте,
	|	ВалютаЗаказаВВалютуДокумента.КоэффициентПересчета КАК ВалютаКоэффициентПересчета,
	|	ТоварыЗаказа.СуммаАвтоматическойСкидки * (ТоварыРеализации.Количество / ТоварыЗаказа.Количество) * ВалютаЗаказаВВалютуДокумента.КоэффициентПересчета КАК СуммаАвтоматическойСкидки,
	|	ТоварыЗаказа.СуммаРучнойСкидки * (ТоварыРеализации.Количество / ТоварыЗаказа.Количество) * ВалютаЗаказаВВалютуДокумента.КоэффициентПересчета КАК СуммаРучнойСкидки,
	|	ТоварыЗаказа.СуммаБонусныхБалловКСписанию * (ТоварыРеализации.Количество / ТоварыЗаказа.Количество) КАК СуммаБонусныхБалловКСписанию,
	|	ТоварыЗаказа.СуммаБонусныхБалловКСписаниюВВалюте * (ТоварыРеализации.Количество / ТоварыЗаказа.Количество) * ВалютаЗаказаВВалютуДокумента.КоэффициентПересчета КАК СуммаБонусныхБалловКСписаниюВВалюте,
	|	ТоварыЗаказа.СуммаНачисленныхБонусныхБалловВВалюте * (ТоварыРеализации.Количество / ТоварыЗаказа.Количество) * ВалютаЗаказаВВалютуДокумента.КоэффициентПересчета КАК СуммаНачисленныхБонусныхБалловВВалюте
	|ПОМЕСТИТЬ ТоварыЗаказа
	|ИЗ
	|	ТоварыДокумента КАК ТоварыРеализации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ТоварыЗаказа
	|		ПО ТоварыРеализации.КодСтроки = ТоварыЗаказа.КодСтроки
	|			И ТоварыРеализации.Номенклатура = ТоварыЗаказа.Номенклатура
	|			И ТоварыРеализации.Характеристика = ТоварыЗаказа.Характеристика
	|			И ТоварыРеализации.ЗаказКлиента = ТоварыЗаказа.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВалютаЗаказаВВалютуДокумента КАК ВалютаЗаказаВВалютуДокумента
	|		ПО (ИСТИНА)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыЗаказа.КодСтроки,
	|	ТоварыЗаказа.КлючСвязи,
	|	ТоварыРеализации.Количество / ТоварыЗаказа.Количество,
	|	ТоварыЗаказа.ПроцентАвтоматическойСкидки,
	|	ТоварыЗаказа.ПроцентРучнойСкидки,
	|	ТоварыЗаказа.Ссылка,
	|	ТоварыРеализации.Количество,
	|	ТоварыЗаказа.Количество,
	|	ТоварыЗаказа.СуммаАвтоматическойСкидки,
	|	ТоварыЗаказа.СуммаРучнойСкидки,
	|	ТоварыЗаказа.СуммаБонусныхБалловКСписанию,
	|	ТоварыЗаказа.СуммаБонусныхБалловКСписаниюВВалюте,
	|	ТоварыЗаказа.СуммаНачисленныхБонусныхБалловВВалюте,
	|	ВалютаЗаказаВВалютуДокумента.КоэффициентПересчета,
	|	ТоварыЗаказа.СуммаАвтоматическойСкидки * (ТоварыРеализации.Количество / ТоварыЗаказа.Количество) * ВалютаЗаказаВВалютуДокумента.КоэффициентПересчета,
	|	ТоварыЗаказа.СуммаРучнойСкидки * (ТоварыРеализации.Количество / ТоварыЗаказа.Количество) * ВалютаЗаказаВВалютуДокумента.КоэффициентПересчета,
	|	ТоварыЗаказа.СуммаБонусныхБалловКСписанию * (ТоварыРеализации.Количество / ТоварыЗаказа.Количество),
	|	ТоварыЗаказа.СуммаБонусныхБалловКСписаниюВВалюте * (ТоварыРеализации.Количество / ТоварыЗаказа.Количество) * ВалютаЗаказаВВалютуДокумента.КоэффициентПересчета,
	|	ТоварыЗаказа.СуммаНачисленныхБонусныхБалловВВалюте * (ТоварыРеализации.Количество / ТоварыЗаказа.Количество) * ВалютаЗаказаВВалютуДокумента.КоэффициентПересчета
	|ИЗ
	|	ТоварыДокумента КАК ТоварыРеализации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ТоварыЗаказа
	|		ПО ТоварыРеализации.КодСтроки = ТоварыЗаказа.КодСтроки
	|			И ТоварыРеализации.Номенклатура = ТоварыЗаказа.Номенклатура
	|			И ТоварыРеализации.Характеристика = ТоварыЗаказа.Характеристика
	|			И ТоварыРеализации.ЗаказКлиента = ТоварыЗаказа.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВалютаЗаказаВВалютуДокумента КАК ВалютаЗаказаВВалютуДокумента
	|		ПО (ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыЗаказа.КодСтроки КАК КодСтроки,
	|	ТоварыЗаказа.КлючСвязи КАК КлючСвязи,
	|	ТоварыЗаказа.Коэффициент КАК Коэффициент,
	|	ТоварыЗаказа.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	ТоварыЗаказа.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	|	ТоварыЗаказа.ЗаказКлиента КАК ЗаказКлиента,
	|	ТоварыЗаказа.РеализацияКоличество КАК РеализацияКоличество,
	|	ТоварыЗаказа.ЗаказКоличество КАК ЗаказКоличество,
	|	ТоварыЗаказа.ЗаказСуммаАвтоматическойСкидки КАК ЗаказСуммаАвтоматическойСкидки,
	|	ТоварыЗаказа.ЗаказСуммаРучнойСкидки КАК ЗаказСуммаРучнойСкидки,
	|	ТоварыЗаказа.ЗаказСуммаБонусныхБалловКСписанию,
	|	ТоварыЗаказа.ЗаказСуммаБонусныхБалловКСписаниюВВалюте,
	|	ТоварыЗаказа.ЗаказСуммаНачисленныхБонусныхБалловВВалюте,
	|	ТоварыЗаказа.ВалютаКоэффициентПересчета КАК ВалютаКоэффициентПересчета,
	|	ТоварыЗаказа.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	ТоварыЗаказа.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
	|	ТоварыЗаказа.СуммаБонусныхБалловКСписанию,
	|	ТоварыЗаказа.СуммаБонусныхБалловКСписаниюВВалюте,
	|	ТоварыЗаказа.СуммаНачисленныхБонусныхБалловВВалюте
	|ИЗ
	|	ТоварыЗаказа КАК ТоварыЗаказа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СкидкиНаценки.КлючСвязи КАК КлючСвязи,
	|	СкидкиНаценки.СкидкаНаценка КАК СкидкаНаценка,
	|	СкидкиНаценки.Сумма * ВалютаЗаказаВВалютуДокумента.КоэффициентПересчета КАК Сумма,
	|	СкидкиНаценки.Ссылка КАК ЗаказКлиента
	|ИЗ
	|	ТоварыЗаказа КАК ТоварыЗаказа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.СкидкиНаценки КАК СкидкиНаценки
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВалютаЗаказаВВалютуДокумента КАК ВалютаЗаказаВВалютуДокумента
	|			ПО (ИСТИНА)
	|		ПО ТоварыЗаказа.ЗаказКлиента = СкидкиНаценки.Ссылка
	|			И ТоварыЗаказа.КлючСвязи = СкидкиНаценки.КлючСвязи
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СкидкиНаценки.КлючСвязи,
	|	СкидкиНаценки.СкидкаНаценка,
	|	СкидкиНаценки.Сумма * ВалютаЗаказаВВалютуДокумента.КоэффициентПересчета,
	|	СкидкиНаценки.Ссылка
	|ИЗ
	|	ТоварыЗаказа КАК ТоварыЗаказа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаВозвратТоваровОтКлиента.СкидкиНаценки КАК СкидкиНаценки
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВалютаЗаказаВВалютуДокумента КАК ВалютаЗаказаВВалютуДокумента
	|			ПО (ИСТИНА)
	|		ПО ТоварыЗаказа.ЗаказКлиента = СкидкиНаценки.Ссылка
	|			И ТоварыЗаказа.КлючСвязи = СкидкиНаценки.КлючСвязи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка КАК ЗаказКлиента,
	|	ТабличнаяЧасть.КлючСвязи КАК КлючСвязи,
	|	ТабличнаяЧасть.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
	|	ТабличнаяЧасть.БонуснаяПрограммаЛояльности.ВалютаКонвертацииБонусов КАК ВалютаКонвертацииБонусов,
	|	ТабличнаяЧасть.БонуснаяПрограммаЛояльности.КурсКонвертацииБонусовВВалюту КАК КурсКонвертацииБонусовВВалюту,
	|	ТабличнаяЧасть.ДатаНачисления КАК ДатаНачисления,
	|	ТабличнаяЧасть.ДатаСписания КАК ДатаСписания,
	|	ТабличнаяЧасть.СуммаБонусныхБаллов КАК СуммаБонусныхБаллов
	|ИЗ
	|	ТоварыЗаказа КАК ТоварыЗаказа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.НачислениеБонусныхБаллов КАК ТабличнаяЧасть
	|		ПО ТоварыЗаказа.ЗаказКлиента = ТабличнаяЧасть.Ссылка
	|			И ТоварыЗаказа.КлючСвязи = ТабличнаяЧасть.КлючСвязи
	| 
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка КАК ЗаказКлиента,
	|	ТабличнаяЧасть.КлючСвязи КАК КлючСвязи,
	|	ТабличнаяЧасть.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
	|	ТабличнаяЧасть.БонуснаяПрограммаЛояльности.ВалютаКонвертацииБонусов КАК ВалютаКонвертацииБонусов,
	|	ТабличнаяЧасть.БонуснаяПрограммаЛояльности.КурсКонвертацииБонусовВВалюту КАК КурсКонвертацииБонусовВВалюту,
	|	ТабличнаяЧасть.ДатаНачисления КАК ДатаНачисления,
	|	ТабличнаяЧасть.ДатаСписания КАК ДатаСписания,
	|	ТабличнаяЧасть.СуммаБонусныхБаллов КАК СуммаБонусныхБаллов
	|ИЗ
	|	ТоварыЗаказа КАК ТоварыЗаказа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаВозвратТоваровОтКлиента.НачислениеБонусныхБаллов КАК ТабличнаяЧасть
	|		ПО ТоварыЗаказа.ЗаказКлиента = ТабличнаяЧасть.Ссылка
	|			И ТоварыЗаказа.КлючСвязи = ТабличнаяЧасть.КлючСвязи
	|");
	Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("Валюта", Объект.Валюта);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", Объект.ВалютаВзаиморасчетов);
	Запрос.УстановитьПараметр("БазоваяВалюта", ЗначениеНастроекПовтИсп.БазоваяВалютаПоУмолчанию());
	Запрос.УстановитьПараметр("ТаблицаТоваров", Объект.Товары.Выгрузить(, "ЗаказКлиента, Номенклатура, Характеристика, КодСтроки, Количество, КлючСвязи"));
	
	Возврат Запрос;
	
КонецФункции

// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - должна содержать:
// 		* Объект - ДанныеФормыСтруктура - должна содержать:
// 			** Ссылка - ДокументСсылка.КоммерческоеПредложениеКлиенту
// 	ИмяКоличества - Строка - изменяемый параметр
//
Процедура ПриПодготовкеПомещенияРезультатаРасчетаРучныхСкидокВоВременноеХранилище(Форма, ИмяКоличества) Экспорт
	
	Если ТипЗнч(Форма) = Тип("ФормаКлиентскогоПриложения")
		И ТипЗнч(Форма.Объект) = Тип("ДанныеФормыСтруктура")
		И Форма.Объект.Свойство("Ссылка") Тогда
			
		Если ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту") Тогда
		
			ИмяКоличества = "Количество";
			
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

