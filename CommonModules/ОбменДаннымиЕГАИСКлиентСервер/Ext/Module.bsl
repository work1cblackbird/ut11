#Область ПрограммныйИнтерфейс

// Возвращает используемый формат обмена.
//
// Параметры:
//  ФорматОбмена - ПеречислениеСсылка.ФорматыОбменаЕГАИС - Формат обмена с ЕГАИС.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ФорматыОбменаЕГАИС - Формат обмена с ЕГАИС.
//
Функция ФорматОбмена(ФорматОбмена = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ФорматОбмена) Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ФорматыОбменаЕГАИС.V3");
	Иначе
		Возврат ФорматОбмена;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получает организации ЕГАИС из настроек обмена.
//
// Параметры:
//  НастройкиОбменаЕГАИС - Соответствие из КлючИЗначение - Настройки обмена ЕГАИС по организациям:
//   * Ключ - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС.
//   * Значение - Структура - Настройки обмена ЕГАИС, (см. НоваяНастройкаОбменаЕГАИС).
//
// Возвращаемое значение:
//  Массив из СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организации ЕГАИС
Функция ОрганизацииЕГАИС(НастройкиОбменаЕГАИС) Экспорт
	
	ОрганизацииЕГАИС = Новый Массив;
	
	Для Каждого КлючИЗначение Из НастройкиОбменаЕГАИС Цикл
		
		ОрганизацииЕГАИС.Добавить(КлючИЗначение.Ключ);
		
	КонецЦикла;
	
	Возврат ОрганизацииЕГАИС;
	
КонецФункции

// Добавляет в свойство структуры сообщения текст ошибки
//
// Параметры:
//  Сообщение    - Структура - сообщение, в которое добавляется текст ошибки.
//  ТекстОшибки  - Строка - добавляемый текст ошибки.
//
Процедура ДобавитьТекстОшибки(Сообщение, ТекстОшибки) Экспорт
	
	Если Сообщение.Ошибки.Получить(ТекстОшибки) <> Неопределено Тогда
		Возврат;
	Иначе
		Сообщение.Ошибки.Вставить(ТекстОшибки, Истина);
	КонецЕсли;
	
	Если Сообщение.ТекстОшибки = "" Тогда
		Сообщение.ТекстОшибки = ТекстОшибки;
	Иначе
		Сообщение.ТекстОшибки = Сообщение.ТекстОшибки + Символы.ПС + ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

// Новая настройка обмена ЕГАИС.
// 
// Возвращаемое значение:
//  Структура - Новая настройка обмена ЕГАИС:
// * АдресУТМ - Строка -
// * ПортУТМ - Число -
// * Таймаут - Число -
// * ЗагружатьВходящиеДокументы - Булево -
// * ПолучитьДвоичныеДанные - Булево -
Функция НоваяНастройкаОбменаЕГАИС() Экспорт
	
	НастройкиОбменаЕГАИС = Новый Структура;
	НастройкиОбменаЕГАИС.Вставить("АдресУТМ",                   "127.0.0.1");
	НастройкиОбменаЕГАИС.Вставить("ПортУТМ",                    8080);
	НастройкиОбменаЕГАИС.Вставить("Таймаут",                    60);
	НастройкиОбменаЕГАИС.Вставить("ЗагружатьВходящиеДокументы", Ложь);
	НастройкиОбменаЕГАИС.Вставить("ПолучитьДвоичныеДанные",     Ложь);
	
	Возврат НастройкиОбменаЕГАИС;
	
КонецФункции

// Структура изменения.
// 
// Возвращаемое значение:
//  Структура - Структура изменения:
// * ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - организация ЕГАИС
// * Операция - ПеречислениеСсылка.ВидыОперацийЧекаЕГАИС
// * ФорматОбмена - ПеречислениеСсылка.ФорматыОбменаЕГАИС
// * ТекстОшибки - Строка - 
// * ПодготовленоКПередаче - Булево - 
// * ПереданоВУТМ - Булево - 
// * Принято - Булево - 
// * ИсходящееСообщение - Строка -
// * ВходящееСообщение  - Строка -
// * Объект - Произвольный -
// * ДокументОснование - ДокументСсылка -
// * НовыйСтатус - ПеречислениеСсылка -
// * ОбъектИзменен - Булево - 
// * ИдентификаторЗапроса - ОпределяемыйТип.УникальныйИдентификаторИС -
// * Подпись - Строка -
Функция СтруктураИзменения() Экспорт
	
	СтруктураИзменения = Новый Структура;
	СтруктураИзменения.Вставить("ОрганизацияЕГАИС");
	СтруктураИзменения.Вставить("Операция");
	СтруктураИзменения.Вставить("ФорматОбмена");
	
	СтруктураИзменения.Вставить("ТекстОшибки",           "");
	СтруктураИзменения.Вставить("ПодготовленоКПередаче", Ложь);
	СтруктураИзменения.Вставить("ПереданоВУТМ",          Ложь);
	СтруктураИзменения.Вставить("Принято",               Ложь);
	
	СтруктураИзменения.Вставить("ИсходящееСообщение");
	СтруктураИзменения.Вставить("ВходящееСообщение");
	
	СтруктураИзменения.Вставить("Объект");
	СтруктураИзменения.Вставить("ДокументОснование");
	СтруктураИзменения.Вставить("НовыйСтатус");
	СтруктураИзменения.Вставить("ОбъектИзменен", Ложь);
	
	// Результат чека ЕГАИС
	СтруктураИзменения.Вставить("ИдентификаторЗапроса");
	СтруктураИзменения.Вставить("Подпись");
	
	Возврат СтруктураИзменения;
	
КонецФункции

Функция ПараметрыHTTPЗапроса(ТелоЗапроса, Заголовки, АдресЗапроса) Экспорт
	
	Параметры = СтруктураДанныхHTTPЗапроса("POST");
	
	Параметры.АдресЗапроса = АдресЗапроса;
	Параметры.ТелоЗапроса  = ТелоЗапроса;
	Параметры.ТекстXML     = "";
	
	Для Каждого КлючИЗначение Из Заголовки Цикл
		Параметры.Заголовки.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	Возврат Параметры;
	
КонецФункции

// Возвращает структуру, необходимую для отправки запроса в УТМ.
//
// Параметры:
//  ТипЗапроса - Строка - Тип запроса
//  АдресЗапроса - Строка - Адрес запроса
// 
// Возвращаемое значение:
//  Структура - Структура данных HTTPЗапроса:
// * ТипЗапроса - Строка -
// * АдресЗапроса - Строка -
// * ТелоЗапроса - Строка -
// * ТекстXML - Строка -
// * Заголовки - Соответствие из КлючИЗначение -
Функция СтруктураДанныхHTTPЗапроса(ТипЗапроса = "", АдресЗапроса = "") Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ТипЗапроса"  , ТипЗапроса);
	Результат.Вставить("АдресЗапроса", АдресЗапроса);
	Результат.Вставить("ТелоЗапроса" , "");
	Результат.Вставить("ТекстXML"    , "");
	Результат.Вставить("Заголовки"   , Новый Соответствие);
	
	Возврат Результат;
	
КонецФункции

// Заполняет структуру обработки входящего документов.
// 
// Параметры:
//  ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - организации ЕГАИС
//  ИдентификаторЗапроса - ОпределяемыйТип.УникальныйИдентификаторИС - заполняется, если получен ответ на исходящий запрос
//  АдресЗапроса - Строка - URL-адрес документа в УТМ
//  ТекстXML - Строка - Текст XML входящего документа
// 
// Возвращаемое значение:
//  Структура - Структура загрузки входящего документа:
// * ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - организации ЕГАИС
// * ИдентификаторЗапроса - ОпределяемыйТип.УникальныйИдентификаторИС - заполняется, если получен ответ на исходящий запрос
// * АдресЗапроса - Строка - URL-адрес документа в УТМ
// * ТекстXML - Строка - Текст XML входящего документа
Функция СтруктураЗагрузкиВходящегоДокумента(ОрганизацияЕГАИС, ИдентификаторЗапроса, АдресЗапроса, ТекстXML) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ОрганизацияЕГАИС",     ОрганизацияЕГАИС);
	Результат.Вставить("ИдентификаторЗапроса", ИдентификаторЗапроса); // Заполняется, если получен ответ на исходящий запрос.
	Результат.Вставить("АдресЗапроса",         АдресЗапроса); // URL-адрес документа в УТМ.
	Результат.Вставить("ТекстXML",             ТекстXML); // Текст XML входящего документа.
	
	Возврат Результат;
	
КонецФункции

#Если НЕ ВебКлиент Тогда

// Обработать результат отправки HTTPЗапроса.
// 
// Параметры:
//  РезультатОтправкиHTTPЗапроса - см. ОтправитьHTTPЗапрос
// 
// Возвращаемое значение:
//  см. ОтветТекстСообщенияXMLПолучен
Функция ОбработатьРезультатОтправкиHTTPЗапроса(РезультатОтправкиHTTPЗапроса) Экспорт
	
	Если РезультатОтправкиHTTPЗапроса.КодСостояния = 200 Тогда
		
		Возврат ОтветТекстСообщенияXMLПолучен(РезультатОтправкиHTTPЗапроса.ТекстОтвета);
		
	ИначеЕсли РезультатОтправкиHTTPЗапроса.КодСостояния = 500
		И ЗначениеЗаполнено(РезультатОтправкиHTTPЗапроса.ТекстОтвета) Тогда
		
		Возврат ОтветТекстСообщенияXMLПолучен(РезультатОтправкиHTTPЗапроса.ТекстОтвета);
		
	Иначе
		
		Если Не ЗначениеЗаполнено(РезультатОтправкиHTTPЗапроса.КодСостояния) Тогда
			ТекстСообщенияXMLОтправлен = Ложь;
			ЗаголовокОшибки = НСтр("ru = 'HTTP-запрос не отправлен.'");
		Иначе
			ТекстСообщенияXMLОтправлен = Истина;
			ЗаголовокОшибки = СтрШаблон(НСтр("ru = 'Код состояния HTTP: %1.'"), РезультатОтправкиHTTPЗапроса.КодСостояния);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РезультатОтправкиHTTPЗапроса.ТекстОшибки) Тогда
			ТекстОшибки = ЗаголовокОшибки + Символы.ПС + РезультатОтправкиHTTPЗапроса.ТекстОшибки;
		ИначеЕсли ЗначениеЗаполнено(РезультатОтправкиHTTPЗапроса.ТекстОтвета) Тогда
			ТекстОшибки = ЗаголовокОшибки + Символы.ПС + ОбработатьОтветНаПередачуДанных(РезультатОтправкиHTTPЗапроса.ТекстОтвета).Ошибка;
		Иначе
			ТекстОшибки = ЗаголовокОшибки;
		КонецЕсли;
		
		Возврат ОтветТекстСообщенияXMLНеПолучен(ТекстОшибки, ТекстСообщенияXMLОтправлен);
		
	КонецЕсли;
	
КонецФункции

// Разбирает ответ, полученный из УТМ.
//
// Параметры:
//  ТекстВходящегоСообщенияXML - Строка - Текст входящего сообщения XML/
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * ИдентификаторЗапроса - Строка - Идентификатор запроса.
//   * Подпись - Строка - Подпись.
//   * Ошибка - Строка - Текст ошибки.
//
Функция ОбработатьОтветНаПередачуДанных(ТекстВходящегоСообщенияXML) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторЗапроса");
	Результат.Вставить("Подпись");
	Результат.Вставить("Ошибка");
	
	Попытка
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(ТекстВходящегоСообщенияXML);
		
		ПостроительDOM = Новый ПостроительDOM;
		ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
		
		УзлыURL = ДокументDOM.ПолучитьЭлементыПоИмени("*");
		
		Для Каждого УзелURL Из УзлыURL Цикл
			Если УзелURL.ИмяУзла = "url" Тогда
				Результат.ИдентификаторЗапроса = УзелURL.ТекстовоеСодержимое;
			ИначеЕсли УзелURL.ИмяУзла = "sign" Тогда
				Результат.Подпись = УзелURL.ТекстовоеСодержимое;
			ИначеЕсли УзелURL.ИмяУзла = "error" Тогда
				Результат.Ошибка = УзелURL.ТекстовоеСодержимое;
			КонецЕсли;
		КонецЦикла;
		
		ЧтениеXML.Закрыть();
		
	Исключение
		
		Результат.Ошибка = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Отправляет HTTP-запрос в УТМ ЕГАИС.
//
// Параметры:
//  ТранспортныйМодуль - см. НоваяНастройкаОбменаЕГАИС
//  Параметры - см. СтруктураДанныхHTTPЗапроса 
// 
// Возвращаемое значение:
//  Структура - Отправить HTTPЗапрос:
// * КодСостояния - Число -
// * Заголовки - Соответствие из КлючИЗначение:
//   ** Ключ - Строка - имя заголовка
//   ** Значение - Строка - значение заголовка
// * ТекстОтвета - Строка - текст ответа
// * ТекстОшибки - Строка - текст ошибки при наличии
Функция ОтправитьHTTPЗапрос(ТранспортныйМодуль, Параметры) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("КодСостояния");
	ВозвращаемоеЗначение.Вставить("Заголовки");
	ВозвращаемоеЗначение.Вставить("ТекстОтвета");
	ВозвращаемоеЗначение.Вставить("ТекстОшибки");
	
	HTTPЗапрос = Новый HTTPЗапрос(Параметры.АдресЗапроса, Параметры.Заголовки);
	
	ЭтоДвоичныеДанные = ТипЗнч(Параметры.ТелоЗапроса) = Тип("ДвоичныеДанные");
	ЭтоФайл           = ТипЗнч(Параметры.ТелоЗапроса) = Тип("Файл");
	
	Если Параметры.ТелоЗапроса <> Неопределено Тогда
		Если ЭтоДвоичныеДанные Тогда
			HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(Параметры.ТелоЗапроса);
		ИначеЕсли ЭтоФайл Тогда
			HTTPЗапрос.УстановитьИмяФайлаТела(Параметры.ТелоЗапроса.ПолноеИмя);
		Иначе
			HTTPЗапрос.УстановитьТелоИзСтроки(Параметры.ТелоЗапроса, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		КонецЕсли;
	КонецЕсли;
	
	ИнтернетПрокси = ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси("HTTP");
	
	HTTPОтвет   = Неопределено;
	ТекстОшибки = "";
	
	Попытка
		
		Соединение = Новый HTTPСоединение(
			СокрЛП(ТранспортныйМодуль.АдресУТМ),
			ТранспортныйМодуль.ПортУТМ,,,
			ИнтернетПрокси,
			ТранспортныйМодуль.Таймаут);
		
		Если Параметры.ТипЗапроса = "GET" Тогда
			HTTPОтвет = Соединение.Получить(HTTPЗапрос);
		ИначеЕсли Параметры.ТипЗапроса = "POST" Тогда
			HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
		ИначеЕсли Параметры.ТипЗапроса = "DELETE" Тогда
			HTTPОтвет = Соединение.Удалить(HTTPЗапрос);
		КонецЕсли;
		
	Исключение
		
		ТекстОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		#Если НЕ (ТонкийКлиент ИЛИ МобильноеПриложениеКлиент ИЛИ МобильныйКлиент) Тогда
			ЗаписьЖурналаРегистрации(
				ОбщегоНазначенияЕГАИСКлиентСервер.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				СтрШаблон(
					НСтр("ru = 'Ошибка отправки %1-запроса по адресу %2'"),
					Параметры.ТипЗапроса,
					Параметры.АдресЗапроса) + Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		#КонецЕсли
		
	КонецПопытки;
	
	ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибки;
	Если HTTPОтвет <> Неопределено Тогда
		ВозвращаемоеЗначение.КодСостояния = HTTPОтвет.КодСостояния;
		ВозвращаемоеЗначение.Заголовки    = HTTPОтвет.Заголовки;
		Если ТранспортныйМодуль.ПолучитьДвоичныеДанные = Истина Тогда
			ВозвращаемоеЗначение.ТекстОтвета = HTTPОтвет.ПолучитьТелоКакДвоичныеДанные();
		Иначе 
			ВозвращаемоеЗначение.ТекстОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Разбирает список входящих документов и подготавливает список URL-адресов документов к загрузке.
//
// Параметры:
//  РезультатыПолученияСписковДокументовПоОрганизациямЕГАИС - Соответствие - Соответствие со значениями:
//   * Ключ - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС.
//   * Значение - Массив - Полученные ответы от ЕГАИС
// Возвращаемое значение:
//  Массив - Массив обработанных данных:
//   * ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС.
//   * ИдентификаторЗапроса - Строка - Идентификатор запроса.
//   * АдресURL - Строка - Адрес URL.
//
Функция ОбработатьОтветНаЗапросПолученияДокументов(РезультатыПолученияСписковДокументовПоОрганизациямЕГАИС) Экспорт
	
	ВозвращаемоеЗначение = Новый Массив;
	
	Для Каждого КлючИЗначение Из РезультатыПолученияСписковДокументовПоОрганизациямЕГАИС Цикл
		
		ОрганизацияЕГАИС = КлючИЗначение.Ключ;
		
		Для Каждого ТекстВходящегоСообщенияXML Из КлючИЗначение.Значение Цикл
			
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.УстановитьСтроку(ТекстВходящегоСообщенияXML);
			
			ПостроительDOM = Новый ПостроительDOM;
			ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
			
			УзлыURL = ДокументDOM.ПолучитьЭлементыПоИмени("url");
			
			Для Каждого УзелURL Из УзлыURL Цикл
				
				АтрибутDOM = УзелURL.Атрибуты.ПолучитьИменованныйЭлемент("replyId");
				
				Если АтрибутDOM <> Неопределено Тогда
					ИдентификаторЗапроса = АтрибутDOM.Значение;
				Иначе
					ИдентификаторЗапроса = "";
				КонецЕсли;
				
				ВозвращаемоеЗначение.Добавить(
					Новый Структура(
						"ОрганизацияЕГАИС, ИдентификаторЗапроса, АдресURL",
						ОрганизацияЕГАИС,
						ИдентификаторЗапроса,
						УзелURL.ТекстовоеСодержимое));
				
			КонецЦикла;
			
			ЧтениеXML.Закрыть();
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получает список входящих документов из транспортного модуля.
//
// Параметры:
//  НастройкиОбменаЕГАИС - Соответствие из КлючИЗначение- Настройки обмена ЕГАИС по организациям:
//   * Ключ - СправочникСсылка.КлассификаторОрганизацийЕГАИС - организация ЕГАИС
//   * Значение -см. НоваяНастройкаОбменаЕГАИС
//  ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - организация ЕГАИС
// Возвращаемое значение:
//  Структура:
//   * ТекстОшибки - Строка - Текст ошибки.
//   * ДанныеОбработки - см. ОбработатьОтветНаЗапросПолученияДокументов
Функция АдресаURLВходящихДокументов(НастройкиОбменаЕГАИС, ОрганизацияЕГАИС) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",     "");
	ВозвращаемоеЗначение.Вставить("ДанныеОбработки", Неопределено);
	
	НастройкаОбменаЕГАИС = НастройкиОбменаЕГАИС.Получить(ОрганизацияЕГАИС);
	
	РезультатОперации = ОбработатьРезультатОтправкиHTTPЗапроса(
		ОтправитьHTTPЗапрос(
			НастройкаОбменаЕГАИС,
			СтруктураДанныхHTTPЗапроса("GET", "/opt/out")));
	
	Если Не РезультатОперации.ТекстСообщенияXMLПолучен Тогда
		ВозвращаемоеЗначение.ТекстОшибки = РезультатОперации.ТекстОшибки;
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	Данные = Новый Массив;
	Данные.Добавить(РезультатОперации.ТекстВходящегоСообщенияXML);
	
	РезультатыПолученияСписковДокументовПоОрганизациямЕГАИС = Новый Соответствие;
	РезультатыПолученияСписковДокументовПоОрганизациямЕГАИС.Вставить(ОрганизацияЕГАИС, Данные);
	
	ВозвращаемоеЗначение.ДанныеОбработки = ОбработатьОтветНаЗапросПолученияДокументов(
		РезультатыПолученияСписковДокументовПоОрганизациямЕГАИС);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получает код ФСРАР транспортного модуля.
//
// Параметры:
//  НастройкаОбменаЕГАИС - Структура - Настройка обмена ЕГАИС, (См. ОбменДаннымиЕГАИСКлиентСервер.НоваяНастройкаОбменаЕГАИС).
//
// Возвращаемое значение:
//  Структура:
//   * ТекстОшибки - Строка - Текст ошибки.
//   * КодФСРАР    - Строка - Код ФСРАР из УТМ.
//   * ПроверитьУТМv4 - Булево -
Функция КодФСРАРv3(НастройкаОбменаЕГАИС) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("КодФСРАР",       "");
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",    "");
	ВозвращаемоеЗначение.Вставить("ПроверитьУТМv4", Ложь);
	
	Попытка
		
		РезультатЗапроса = ОтправитьHTTPЗапрос(
			НастройкаОбменаЕГАИС,
			СтруктураДанныхHTTPЗапроса("GET", "/info/certificate/RSA?attachment=true"));
		
		Если РезультатЗапроса.КодСостояния = 200
			И Не ЗначениеЗаполнено(РезультатЗапроса.ТекстОшибки) Тогда
			
			СертификатКриптографии = Новый СертификатКриптографии(РезультатЗапроса.ТекстОтвета);
			
			Если СертификатКриптографии.Субъект.Свойство("CN") Тогда
				ВозвращаемоеЗначение.КодФСРАР = СертификатКриптографии.Субъект.CN;
			ИначеЕсли СертификатКриптографии.Субъект.Свойство("OID2_5_4_3") Тогда
				ВозвращаемоеЗначение.КодФСРАР = СертификатКриптографии.Субъект.OID2_5_4_3;
			КонецЕсли;
			
		ИначеЕсли РезультатЗапроса.КодСостояния = 302 Тогда
			
			ВозвращаемоеЗначение.ПроверитьУТМv4 = Истина;
			
		ИначеЕсли ЗначениеЗаполнено(РезультатЗапроса.ТекстОшибки) Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = РезультатЗапроса.ТекстОшибки;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Код состояния: %1'"),
				РезультатЗапроса.КодСостояния);
			
		КонецЕсли;
		
	Исключение
		
		ВозвращаемоеЗначение.ТекстОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получает код ФСРАР транспортного модуля.
//
// Параметры:
//  НастройкаОбменаЕГАИС - Структура - Настройка обмена ЕГАИС, (См. НоваяНастройкаОбменаЕГАИС).
//
// Возвращаемое значение:
//  Структура:
//   * ТекстОшибки - Строка - Текст ошибки.
//   * КодФСРАР    - Строка - Код ФСРАР из УТМ.
//
Функция КодФСРАРv4(НастройкаОбменаЕГАИС) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("КодФСРАР",    "");
	ВозвращаемоеЗначение.Вставить("ТекстОшибки", "");
	
	Попытка
		
		РезультатЗапроса = ОтправитьHTTPЗапрос(
			НастройкаОбменаЕГАИС,
			СтруктураДанныхHTTPЗапроса("GET", "/diagnosis"));
		
		Если РезультатЗапроса.КодСостояния = 200
			И Не ЗначениеЗаполнено(РезультатЗапроса.ТекстОшибки)Тогда 
			
			ТекстXML = ПолучитьСтрокуИзДвоичныхДанных(РезультатЗапроса.ТекстОтвета);
			Если ЗначениеЗаполнено(ТекстXML) Тогда
				ТекстXML = НРег(ТекстXML);
				ТегНачало = "<cn>";
				ТегОкончание = "</cn>";
				ПозицияТегаНачало = СтрНайти(ТекстXML, ТегНачало);
				ПозицияТегаОкончания = СтрНайти(ТекстXML, ТегОкончание);
				ВозвращаемоеЗначение.КодФСРАР = Сред(ТекстXML, ПозицияТегаНачало + СтрДлина(ТегНачало), ПозицияТегаОкончания - ПозицияТегаНачало - СтрДлина(ТегНачало));
			КонецЕсли;
			
		Иначе
			ВозвращаемоеЗначение.ТекстОшибки = РезультатЗапроса.ТекстОшибки;
		КонецЕсли;
		
	Исключение
		
		ВозвращаемоеЗначение.ТекстОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецЕсли

// Инициализирует структуру результата исходящего сообщения после получения ответа.
// 
// Возвращаемое значение:
// Структура:
//   ТекстСообщенияXMLОтправлен  - Булево - признак того, что сообщение отправлено.
//   ТекстСообщенияXMLПолучен    - Булево - признак того, что сообщение получено.
//   ТекстОшибки                 - Строка - текст ошибки, если таковая возникла.
//   ТекстВходящегоСообщенияXML  - Строка - текст ответа, на отправленное сообщение.
//
Функция ОтветТекстСообщенияXMLПолучен(ТекстВходящегоСообщенияXML)
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТекстСообщенияXMLОтправлен",  Истина);
	ВозвращаемоеЗначение.Вставить("ТекстСообщенияXMLПолучен",    Истина);
	
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                "");
	ВозвращаемоеЗначение.Вставить("ТекстВходящегоСообщенияXML", ТекстВходящегоСообщенияXML);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Инициализирует структуру результата исходящего сообщения после отправки сообщения, но до получения ответа.
// 
// Возвращаемое значение:
// Структура:
//   ТекстСообщенияXMLОтправлен  - Булево - признак того, что сообщение отправлено.
//   ТекстСообщенияXMLПолучен    - Булево - признак того, что сообщение получено.
//   ТекстОшибки                 - Строка - текст ошибки, если таковая возникла.
//   ТекстВходящегоСообщенияXML  - Строка - текст ответа, на отправленное сообщение.
//
Функция ОтветТекстСообщенияXMLНеПолучен(Ошибка, ТекстСообщенияXMLОтправлен)
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТекстСообщенияXMLОтправлен",  ТекстСообщенияXMLОтправлен);
	ВозвращаемоеЗначение.Вставить("ТекстСообщенияXMLПолучен",    Ложь);
	
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                Строка(Ошибка));
	ВозвращаемоеЗначение.Вставить("ТекстВходящегоСообщенияXML", "");
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти