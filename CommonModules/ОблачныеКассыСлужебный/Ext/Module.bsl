///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "ИнтернетПоддержкаПользователей.ОблачныеКассы".
// ОбщийМодуль.ОблачныеКассыСлужебный.
//
// Серверные процедуры обмена данными с Облачной касса:
//  - инициализация параметров подключения;
//  - управление данными аутентификации;
//  - получение списка доступных облачных касс;
//  - пробитие чека, обновление статуса пробития чека, получение состояния кассы;
//  - обработчики регламентного задания по обновлению статусов пробития чеков;
//  - обработка ошибок сервиса.
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область ИнтеграцияСБиблиотекойСтандартныхПодсистем

#Область БТСОчередьЗаданий

// См. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков.
//
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить(
		Метаданные.РегламентныеЗадания.ЗагрузкаСтатусовОперацийОблачныхКасс.ИмяМетода);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ИнтеграцияПодсистемИнтернетПоддержкиПользователей

#Область БазоваяФункциональностьБИП

// Вызывается при изменении логина и пароля пользователя ИПП в информационной базе из всех контекстов использования
// библиотеки.
//
// Параметры:
//  Логин - Строка - логин пользователя Интернет-поддержки.
//
Процедура ПриИзмененииДанныхАутентификации(Логин) Экспорт
	
	Если ЗначениеЗаполнено(Логин)
		И Справочники.НастройкиПодключенияКОблачнымКассам.ЕстьНастройкиПодключения() Тогда
		
		ДобавитьЗаданиеЗагрузкаСтатусовОперацийОблачныхКасс();
		
	Иначе
		УдалитьЗаданияЗагрузкаСтатусовОперацийОблачныхКасс();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщегоНазначения

// Создает описание результата операции.
//
// Возвращаемое значение:
//  Структура - результат операции:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который может быть обработан вызывающим методом.
//    * СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя.
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция НовыйРезультатОперации() Экспорт
	
	РезультатОперации = Новый Структура();
	РезультатОперации.Вставить("КодОшибки"         , "");
	РезультатОперации.Вставить("СообщениеОбОшибке" , "");
	РезультатОперации.Вставить("ИнформацияОбОшибке", "");
	
	Возврат РезультатОперации;
	
КонецФункции

// Проверяет принадлежность статуса сервиса Облачной кассы к финальному состоянию.
//
// Параметры:
//  Статус - Строка - преобразованный статус сервиса Облачной кассы.
//
// Возвращаемое значение:
//  Булево - если Истина, то статус является окончальным.
//
Функция ТерминальныйСтатус(Статус) Экспорт
	
	Возврат Статус = ОблачныеКассыКлиентСервер.СтатусОперацииВыполнена()
		Или Статус = ОблачныеКассыКлиентСервер.СтатусОперацииОтменена();
	
КонецФункции

#КонецОбласти

#Область ЖурналРегистрации

// Добавляет запись в журнал регистрации с указанием имени события подсистемы Облачные касса.
//
// Параметры:
//  Сообщение - Строка - комментарий к записи журнала регистрации.
//  Ошибка - Булево - если Истина, то будет установлен уровень журнала регистрации "Ошибка".
//    Значение по умолчанию: Ложь.
//
Процедура ЗаписатьИнформациюВЖурналРегистрации(Сообщение, Ошибка = Ложь) Экспорт
	
	УровеньЖурнала = ?(
		Ошибка,
		УровеньЖурналаРегистрации.Ошибка,
		УровеньЖурналаРегистрации.Информация);	// УровеньЖурналаРегистрации
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации(),
		УровеньЖурнала,
		,
		,
		Лев(Сообщение, 5120));
	
КонецПроцедуры

// Возвращает имя события для журнала регистрации.
//
// Возвращаемое значение:
//  Строка
//
Функция ИмяСобытияЖурналаРегистрации()
	
	Возврат НСтр("ru = 'Облачные кассы'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

#КонецОбласти

#Область РегламентныеЗадания

// Обработчик регламентного задания выполняет загрузку статусов и/или обработку отложенных операций Облачных касс.
// Результат выполнения записывается в журнал регистрации в виде статистическиой информации.
//
Процедура ЗагрузкаСтатусовОперацийОблачныхКасс() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ЗагрузкаСтатусовОперацийОблачныхКасс);
	
	СтатусыОпераций();
	
КонецПроцедуры

// Создает регламентное задание "ЗагрузкаСтатусовОперацийОблачныхКасс" и устанавливает расписание на запуск каждые 3
// часа.
//
Процедура ДобавитьЗаданиеЗагрузкаСтатусовОперацийОблачныхКасс() Экспорт
	
	Отбор = Новый Структура;
	Отбор.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ЗагрузкаСтатусовОперацийОблачныхКасс);
	
	ЗаданияОбновления = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	Если ЗаданияОбновления.Количество() = 0 Тогда
		
		Расписание = Новый РасписаниеРегламентногоЗадания();
		Расписание.ПериодПовтораВТечениеДня = 60 * 60 * 3; // Попытка получения статуса выполняется каждые 3 часа.
		Расписание.ПериодПовтораДней        = 1;
		
		МетаданныеЗадания = Метаданные.РегламентныеЗадания.ЗагрузкаСтатусовОперацийОблачныхКасс;
		КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
		
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("Использование", Истина);
		ПараметрыЗадания.Вставить("Метаданные"   , МетаданныеЗадания);
		ПараметрыЗадания.Вставить("Расписание"   , Расписание);
		ПараметрыЗадания.Вставить("Наименование" , МетаданныеЗадания.Синоним);
		
		Попытка
			РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ЗаписатьИнформациюВЖурналРегистрации(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось создать регламентное задание ""%1"" по причине:
						|%1'",
						КодОсновногоЯзыка),
					Метаданные.Синоним,
					ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)),
				Истина);
			ВызватьИсключение ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецПопытки;
		
		ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Создано регламентное задание ""%1"".'",
					КодОсновногоЯзыка),
				Метаданные.Синоним));
			
	КонецЕсли;
	
КонецПроцедуры

// Удаляет все задания "ЗагрузкаСтатусовОперацийОблачныхКасс".
//
Процедура УдалитьЗаданияЗагрузкаСтатусовОперацийОблачныхКасс()
	
	УстановитьПривилегированныйРежим(Истина);
	
	РегламентныеЗаданияСервер.УдалитьЗадание(
		Метаданные.РегламентныеЗадания.ЗагрузкаСтатусовОперацийОблачныхКасс);
	
КонецПроцедуры

#КонецОбласти

#Область ПараметрыПодключенияИАутентификации

// Возвращает данные аутентификации сохраненные в безопасном хранилище для отображения их в форме подключения.
// Секретные данные аутентификации заменяются результатом метода см. СтрокаСекретныхДанныхПоУмолчанию.
//
// Параметры:
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКОблачнымКассам
//
// Возвращаемое значение:
//  Неопределено - параметры аутентификации не сохранены.
//  см. ОблачныеКассыКлиентСервер.НовыйПараметрыАутентификацииBasic - тип аутентификации Basic.
//  см. ОблачныеКассыКлиентСервер.НовыйПараметрыАутентификацииBearer - тип аутентификации Bearer.
//  см. ОблачныеКассыКлиентСервер.НовыйПараметрыАутентификацииSalesRegisterGroup - особый тип аутентификации работающий
//    по приниципу Resource Owner Password Credentials Grant.
//
Функция ПараметрыАутентификации(НастройкаПодключения) Экспорт
	
	Результат = ПараметрыАутентификацииСлужебный(НастройкаПодключения);
	
	// Восстановление настроек аутентификации если тип аутентификации соответствует данным сервиса
	Если Результат = Неопределено Тогда
		Результат = Неопределено;
	Иначе
		СекретныеПоля         = СекретныеДанныеАутентификации(Результат.ТипАутентификации);
		СтрокаСекретныхДанных = СтрокаСекретныхДанныхПоУмолчанию();
		Для Каждого СекретноеПоле Из СекретныеПоля Цикл
			Результат[СекретноеПоле] = СтрокаСекретныхДанных;
		КонецЦикла;
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

// Выполняет проверку параметров подключения к Облачной кассе.
//
// Параметры:
//  ПараметрыПодключения - см. ОблачныеКассыКлиентСервер.НовыйПараметрыПодключения
//
// Возвращаемое значение:
//  Структура:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который может быть обработан вызывающим методом.
//    * СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя.
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция ПроверитьПараметрыПодключения(Знач ПараметрыПодключения) Экспорт
	
	Результат = НовыйРезультатОперации();
	
	РассекретитьПараметрыАутентификации(ПараметрыПодключения);
	
	СостояниеКассы = СервисОблачныеКассы.СостояниеКассы(ПараметрыПодключения, Истина);
	Если Не ПустаяСтрока(СостояниеКассы.КодОшибки) Тогда
		ЗаполнитьЗначенияСвойств(Результат, СостояниеКассы);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Сохраняет параметры подключения к Облачной кассе в информационной базе.
//
// Параметры:
//  ПараметрыПодключения - см. ОблачныеКассыКлиентСервер.НовыйПараметрыПодключения
//
// Возвращаемое значение:
//  Структура:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который может быть обработан вызывающим методом.
//        Список ошибок:
//          "" - операция выполнена успешно.
//          "ОшибкаСохраненияПараметровПодключения" - в процессе сохранения параметров подключения и аутентификации
//            возникла ошибка.
//    * СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя.
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция СохранитьПараметрыПодключения(Знач ПараметрыПодключения) Экспорт
	
	РассекретитьПараметрыАутентификации(ПараметрыПодключения);
	
	Результат = НовыйРезультатОперации();
	
	НастройкаПредставление = Строка(ПараметрыПодключения.НастройкаПодключения);
	
	НачатьТранзакцию();
	Попытка
		
		СохранитьПараметрыАутентификации(
			ПараметрыПодключения.НастройкаПодключения,
			ПараметрыПодключения.ПараметрыАутентификации);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		Результат.КодОшибки          = КодОшибкиОшибкаСохраненияПараметровПодключения();
		Результат.СообщениеОбОшибке  = НСтр("ru = 'Не удалось сохранить параметры подключения к Облачной кассе.'");
		Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка сохранения параметров подключения к Облачной кассе %1 (%2).
				|
				|Техническая информация об ошибке:
				|%3'"),
			ПараметрыПодключения.Идентификатор,
			НастройкаПредставление,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписатьИнформациюВЖурналРегистрации(Результат.ИнформацияОбОшибке, Истина);
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Сохраняет параметры аутентификации в безопасном хранилище.
//
// Параметры:
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКОблачнымКассам
//  ПараметрыАутентификации - см. ПараметрыАутентификацииСлужебный
//
Процедура СохранитьПараметрыАутентификации(НастройкаПодключения, ПараметрыАутентификации) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(НастройкаПодключения, ПараметрыАутентификации);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Возвращает данные подключения с параметрами аутентификации к Облачной кассе.
//
// Параметры:
//  НастройкаПодключения - см. Справочники.НастройкиПодключенияКОблачнымКассам.НастройкаПодключения
//
// Возвращаемое значение:
//  см. ОблачныеКассыКлиентСервер.НовыйПараметрыПодключения
//
Функция ПараметрыПодключения(НастройкаПодключения)
	
	Результат = ОблачныеКассыКлиентСервер.НовыйПараметрыПодключения();
	Результат.НастройкаПодключения    = НастройкаПодключения.Ссылка;
	Результат.Идентификатор           = НастройкаПодключения.Идентификатор;
	Результат.ПараметрыАутентификации = ПараметрыАутентификацииСлужебный(НастройкаПодключения.Ссылка);
	
	Возврат Результат;
	
КонецФункции

// Выполняет проверку наличие секретных полей в параметрах аутентификации и при наличи выполняет рассекречивание их.
//
// Параметры:
//  ПараметрыПодключения - см. ОблачныеКассыКлиентСервер.НовыйПараметрыПодключения
//
Процедура РассекретитьПараметрыАутентификации(ПараметрыПодключения)
	
	ПараметрыАутентификации = ПараметрыПодключения.ПараметрыАутентификации;
	СекретныеПоля           = СекретныеДанныеАутентификации(ПараметрыАутентификации.ТипАутентификации);
	СтрокаСекретныхДанных   = СтрокаСекретныхДанныхПоУмолчанию();
	РассекретитьПоля        = Новый Массив();
	
	Для Каждого СекретноеПоле Из СекретныеПоля Цикл
		Если ПараметрыАутентификации[СекретноеПоле] = СтрокаСекретныхДанных Тогда
			РассекретитьПоля.Добавить(СекретноеПоле);
		КонецЕсли;
	КонецЦикла;
	
	Если РассекретитьПоля.Количество() > 0 Тогда
		СохраненныеПараметры = ПараметрыАутентификацииСлужебный(ПараметрыПодключения.НастройкаПодключения);
		Для Каждого СекретноеПоле Из РассекретитьПоля Цикл
			ПараметрыАутентификации[СекретноеПоле] = СохраненныеПараметры[СекретноеПоле];
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Формирует список полей параметров аутентификации относящиеся к секретным.
//
// Параметры:
//  ТипАутентификации - Строка - тип аутентификации по которому необходимо сформировать список секретных полей.
//    Список типов аутентификации:
//      см. ОблачныеКассыКлиентСервер.ТипАутентификацииBasic
//      см. ОблачныеКассыКлиентСервер.ТипАутентификацииBearer
//      см. ОблачныеКассыКлиентСервер.ТипАутентификацииSalesRegisterGroup
//
// Возвращаемое значение:
//  Массив из Строка
//
Функция СекретныеДанныеАутентификации(ТипАутентификации)
	
	Результат = Новый Массив();
	Если ТипАутентификации = ОблачныеКассыКлиентСервер.ТипАутентификацииBasic() Тогда
		Результат.Добавить("Пароль");
	ИначеЕсли ТипАутентификации = ОблачныеКассыКлиентСервер.ТипАутентификацииBearer() Тогда
		Результат.Добавить("Токен");
	ИначеЕсли ТипАутентификации = ОблачныеКассыКлиентСервер.ТипАутентификацииSalesRegisterGroup() Тогда
		Результат.Добавить("СекретныйКлючМагазина");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Формирует идентификатор для отображения скрытых символов на форме.
//
// Возвращаемое значение:
//  Строка - служебный идентификатор.
//
Функция СтрокаСекретныхДанныхПоУмолчанию()
	
	Возврат "b892d84c-c907-4ed2-90ac-933fab9dc141";
	
КонецФункции

// Возвращает параметры аутентификации хранящиеся в безопасном хранилище.
//
// Параметры:
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКОблачнымКассам
//
// Возвращаемое значение:
//  Неопределено - параметры аутентификации не сохранены.
//  см. ОблачныеКассыКлиентСервер.НовыйПараметрыАутентификацииBasic - тип аутентификации Basic.
//  см. ОблачныеКассыКлиентСервер.НовыйПараметрыАутентификацииBearer - тип аутентификации Bearer.
//  см. ОблачныеКассыКлиентСервер.НовыйПараметрыАутентификацииSalesRegisterGroup - особый тип аутентификации работающий
//    по приниципу Resource Owner Password Credentials Grant.
//
Функция ПараметрыАутентификацииСлужебный(НастройкаПодключения)
	
	УстановитьПривилегированныйРежим(Истина);
	СохраненныеДанные = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(НастройкаПодключения);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если СохраненныеДанные = Неопределено
		Или ТипЗнч(СохраненныеДанные) <> Тип("Структура") Тогда
		
		Результат = Неопределено;
		
	Иначе
		
		ЧтениеСтруктуры = Новый Структура("ТипАутентификации");
		ЗаполнитьЗначенияСвойств(ЧтениеСтруктуры, СохраненныеДанные);
		
		Если ЧтениеСтруктуры.ТипАутентификации = Неопределено Тогда
			Результат = Неопределено;
		ИначеЕсли ЧтениеСтруктуры.ТипАутентификации = ОблачныеКассыКлиентСервер.ТипАутентификацииBasic() Тогда
			Результат = ОблачныеКассыКлиентСервер.НовыйПараметрыАутентификацииBasic();
			ЗаполнитьЗначенияСвойств(Результат, СохраненныеДанные);
		ИначеЕсли ЧтениеСтруктуры.ТипАутентификации = ОблачныеКассыКлиентСервер.ТипАутентификацииBearer() Тогда
			Результат = ОблачныеКассыКлиентСервер.НовыйПараметрыАутентификацииBearer();
			ЗаполнитьЗначенияСвойств(Результат, СохраненныеДанные);
		ИначеЕсли ЧтениеСтруктуры.ТипАутентификации = ОблачныеКассыКлиентСервер.ТипАутентификацииSalesRegisterGroup() Тогда
			Результат = ОблачныеКассыКлиентСервер.НовыйПараметрыАутентификацииSalesRegisterGroup();
			ЗаполнитьЗначенияСвойств(Результат, СохраненныеДанные);
		Иначе
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Неизвестный тип аутентификации: %1'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
				ЧтениеСтруктуры.ТипАутентификации);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ДоступныеОблачныеКассы

// Возвращает информацию о акутальных Облачных кассах.
//
// Возвращаемое значение:
//  Структура:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который может быть обработан вызывающим методом.
//    * СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя.
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//    * ОблачныеКассы - Массив из см. НовыйДоступнаяОблачнаяКасса - список доступных Облачных касс.
//
Функция ДоступныеОблачныеКассы() Экспорт
	
	ДоступныеОблачныеКассы = Новый Массив(); // Массив из см. НовыйДоступнаяОблачнаяКасса
	
	Результат = НовыйРезультатОперации();
	Результат.Вставить("ОблачныеКассы", ДоступныеОблачныеКассы);
	
	РезультатСервиса = СервисОблачныеКассы.ДоступныеОблачныеКассы();
	Если ПустаяСтрока(РезультатСервиса.КодОшибки) Тогда
		Для Каждого ОблачнаяКасса Из РезультатСервиса.ОблачныеКассы Цикл
			
			Если Не ОблачнаяКасса.integrationEnabled Тогда
				Продолжить;
			КонецЕсли;
			
			ДоступнаяОблачнаяКасса = НовыйДоступнаяОблачнаяКасса();
			ДоступнаяОблачнаяКасса.Идентификатор = ОблачнаяКасса.id;
			ДоступнаяОблачнаяКасса.Представление = ОблачнаяКасса.name;
			ДоступнаяОблачнаяКасса.АдресСервиса  = ОблачнаяКасса.personalPageUrl;
			
			ТипАутентификации = ВРег(ОблачнаяКасса.authorizationType);
			Если ТипАутентификации = ОблачныеКассыКлиентСервер.ТипАутентификацииBasic()
				Или ТипАутентификации = ОблачныеКассыКлиентСервер.ТипАутентификацииBearer()
				Или ТипАутентификации = ОблачныеКассыКлиентСервер.ТипАутентификацииSalesRegisterGroup() Тогда
				
				ДоступнаяОблачнаяКасса.ТипАутентификации = ТипАутентификации;
				
			Иначе
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Неподдерживаемый тип аутентификации Облачной кассы: %1'",
						ОбщегоНазначения.КодОсновногоЯзыка()),
					ОблачнаяКасса.authorizationType);
			КонецЕсли;
			
			Результат.ОблачныеКассы.Добавить(ДоступнаяОблачнаяКасса);
			
		КонецЦикла;
		
	Иначе
		ЗаполнитьЗначенияСвойств(
			Результат,
			РезультатСервиса,
			"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Создает описание доступной облачной кассы.
//
// Возвращаемое значение:
//  Структура:
//    * Идентификатор - Строка - идентификатор Облачной кассы.
//    * Представление - Строка - наименование участника Облачных касс.
//    * ТипАутентификации - строка - тип аутентификации строкой.
//        Список типов аутентификации:
//          см. ОблачныеКассыКлиентСервер.ТипАутентификацииBasic
//          см. ОблачныеКассыКлиентСервер.ТипАутентификацииBearer
//          см. ОблачныеКассыКлиентСервер.ТипАутентификацииSalesRegisterGroup
//    * АдресСервиса - Строка - адрес в сети Интернет содержащий информацию о сервисе и подключении.
//
Функция НовыйДоступнаяОблачнаяКасса()
	
	Результат = Новый Структура();
	Результат.Вставить("Идентификатор"    , "");
	Результат.Вставить("Представление"    , "");
	Результат.Вставить("ТипАутентификации", "");
	Результат.Вставить("АдресСервиса"     , "");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СостояниеКассы

// Возвращает информацию о доступности печати чеков в Облачной кассе.
//
// Параметры:
//  ОблачнаяКасса - ОпределяемыйТип.ОблачнаяКасса - ссылка на элемент справочника для которого настроена интеграция с
//    Облачной кассой.
//
// Возвращаемое значение:
//  Структура - Состояние кассы:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который может быть обработан вызывающим методом.
//    * СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя.
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//    * Результат - Неопределено - ошибка получения состояния Облачной кассы.
//                - Структура - тело ответа на запрос состояния Облачной кассы.
//
Функция СостояниеКассы(ОблачнаяКасса) Экспорт
	
	ОтветСервиса = Неопределено;	// Неопределено, Структура
	
	Результат = НовыйРезультатОперации();
	Результат.Вставить("Результат", ОтветСервиса);
	
	НастройкаПодключения = Справочники.НастройкиПодключенияКОблачнымКассам.НастройкаПодключения(ОблачнаяКасса);
	Если НастройкаПодключения = Неопределено Тогда
		Результат.КодОшибки          = КодОшибкиОтсутствуютНастройкиПодключения();
		Результат.СообщениеОбОшибке  = НСтр("ru = 'Не выполнена настройка подключения Облачной кассы.'");
		Результат.ИнформацияОбОшибке = Результат.СообщениеОбОшибке;
		Возврат Результат;
	КонецЕсли;
	
	ПараметрыПодключения = ПараметрыПодключения(НастройкаПодключения);
	
	СостояниеКассы = СервисОблачныеКассы.СостояниеКассы(ПараметрыПодключения);
	Если ПустаяСтрока(СостояниеКассы.КодОшибки) Тогда
		Результат.Результат = СостояниеКассы.Результат;
	Иначе
		ЗаполнитьЗначенияСвойств(
			Результат,
			СостояниеКассы,
			"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПробитиеЧека

// Выполняет отправку запроса на пробитие чека в Облачной кассе и регистрирует ответ сервиса в информационной базе.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииОблачнойКассы - ссылка на документ инициирующий пробитие чека.
//  ОблачнаяКасса - ОпределяемыйТип.ОблачнаяКасса - ссылка на элемент справочника для которого настроена интеграция с
//    Облачной кассой.
//  ДанныеЧека - Структура - запрос операции в формате Структура.
//
// Возвращаемое значение:
//  Структура - Пробить чек:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который может быть обработан вызывающим методом.
//    * СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя.
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//    * ДанныеОперации - см. СервисОблачныеКассы.НовыйДанныеОперации
//    * Результат - Неопределено - ошибка отправки запроса на обработку операции Облачной кассы.
//                - Структура - данные ответа Облачный кассы.
//
Функция ПробитьЧек(ДокументОперации, ОблачнаяКасса, ДанныеЧека) Экспорт
	
	ОтветСервиса        = Неопределено;	// Неопределено, Структура
	СписокСвойствОшибки = "КодОшибки,СообщениеОбОшибке,ИнформацияОбОшибке";
	
	Результат = НовыйРезультатОперации();
	Результат.Вставить("ДанныеОперации", СервисОблачныеКассы.НовыйДанныеОперации());
	Результат.Вставить("Результат"     , ОтветСервиса);
	
	НастройкаПодключения = Справочники.НастройкиПодключенияКОблачнымКассам.НастройкаПодключения(ОблачнаяКасса);
	Если НастройкаПодключения = Неопределено Тогда
		Результат.КодОшибки          = КодОшибкиОтсутствуютНастройкиПодключения();
		Результат.СообщениеОбОшибке  = НСтр("ru = 'Не выполнена настройка подключения Облачной кассы.'");
		Результат.ИнформацияОбОшибке = Результат.СообщениеОбОшибке;
		Возврат Результат;
	КонецЕсли;
	
	ПараметрыПодключения = ПараметрыПодключения(НастройкаПодключения);
	
	ДанныеЗапроса = ДанныеЗапросаНаПробитиеЧека(
		ДокументОперации,
		ПараметрыПодключения,
		ДанныеЧека);
	Если Не ПустаяСтрока(ДанныеЗапроса.КодОшибки) Тогда
		ЗаполнитьЗначенияСвойств(Результат, ДанныеЗапроса, СписокСвойствОшибки);
		Возврат Результат;
	КонецЕсли;
	
	РезультатПробития = СервисОблачныеКассы.ПробитьЧек(ДокументОперации, ПараметрыПодключения, ДанныеЗапроса.Результат);
	Если Не ПустаяСтрока(РезультатПробития.КодОшибки) Тогда
		ЗаполнитьЗначенияСвойств(Результат, РезультатПробития, СписокСвойствОшибки);
		Результат.ДанныеОперации.ИдентификаторОперации = ДанныеЗапроса.ИдентификаторОперации;
		Возврат Результат;
	КонецЕсли;
	
	РегистрыСведений.ДанныеОперацийОблачныхКасс.ЗаписатьДанныеПробитияЧека(
		ДокументОперации,
		РезультатПробития.ДанныеОперации,
		РезультатПробития.Результат);
	
	Результат.ДанныеОперации = РезультатПробития.ДанныеОперации;
	Результат.Результат      = РезультатПробития.Результат;
	
	Возврат Результат;
	
КонецФункции

// Формирует данные запроса на пробитие чека в Облачной кассе.
// Формирование данных запроса выполняется в транзакции и при возникноваении ошибки необходимо завершить выполнение всех
// вызывающих методов.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииОблачнойКассы - ссылка на документ инициирующий пробитие чека.
//  ПараметрыПодключения - см. ОблачныеКассыКлиентСервер.НовыйПараметрыПодключения
//  ДанныеЧека - Структура - запрос операции в формате Структура.
//
// Возвращаемое значение:
//  Структура:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который может быть обработан вызывающим методом.
//    * СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя.
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//    * ИдентификаторОперации - Строка - идентификатор операции в информационной базе.
//    * Результат - Неопределено - ошибка формирования данных запроса
//                - Структура - данные запроса операции в формате Структура.
//
Функция ДанныеЗапросаНаПробитиеЧека(ДокументОперации, ПараметрыПодключения, ДанныеЧека)
	
	ДанныеДляОбработки = Неопределено;	// Неопределено, Структура
	
	Результат = НовыйРезультатОперации();
	Результат.Вставить("ИдентификаторОперации", "");
	Результат.Вставить("Результат"            , ДанныеДляОбработки);
	
	// Проверка сериализации данных чека в JSON
	Попытка
		ЗначениеВJSON(ДанныеЧека);
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		Результат.КодОшибки         = СервисОблачныеКассы.КодОшибкиНеверныйФорматЗапроса();
		Результат.СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка сериализации данных чека в формат JSON.
				|%1'"),
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		
		Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось сериализировать данные чека в формат JSON:
				|%1
				|
				|Техническая информация об ошибке:
				|Документ операции: %2
				|Идентификатор кассы: %3
				|Подробная информация:
				|%4'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке),
			Строка(ДокументОперации),
			ПараметрыПодключения.Идентификатор,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
		ЗаписатьИнформациюВЖурналРегистрации(Результат.ИнформацияОбОшибке, Истина);
		
	КонецПопытки;
	
	// Попытка получения идентификатора операции
	Попытка
		ИдентификаторОперации = РегистрыСведений.ДанныеОперацийОблачныхКасс.ПолучитьИдентификаторОперации(
			ДокументОперации,
			ПараметрыПодключения.НастройкаПодключения);
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		Результат.КодОшибки         = КодОшибкиПрочаяОшибка();
		Результат.СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка получения идентификатора операции.
				|%1'"),
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		
		Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка получения идентификатора операции для документа.
				|%1
				|
				|Техническая информация об ошибке:
				|Документ операции: %2
				|Идентификатор кассы: %3
				|Подробная информация:
				|%4'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке),
			Строка(ДокументОперации),
			ПараметрыПодключения.Идентификатор,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
		ЗаписатьИнформациюВЖурналРегистрации(Результат.ИнформацияОбОшибке, Истина);
		
	КонецПопытки;
	
	Если ПустаяСтрока(Результат.КодОшибки) Тогда
		
		ПозицияЧека = Новый Структура("operationId", ИдентификаторОперации);
		
		ДанныеЗапроса = Новый Структура();
		ДанныеЗапроса.Вставить("operationRequest", ПозицияЧека);
		ДанныеЗапроса.Вставить("receiptRequest"  , ДанныеЧека);
		
		Результат.ИдентификаторОперации = ИдентификаторОперации;
		Результат.Результат             = ДанныеЗапроса;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СтатусПробитияЧека

// Выполняет получение статуса пробития чека в Облачной кассе.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииОблачнойКассы - ссылка на документ инициирующий пробитие чека.
//  ВремяОжидания - Число - время ожидания терминального статуса в секундах.
//    Если параметр заполнен, то получение статуса будет выполняться в цикле с небольшими задержками между запросами.
//    Значение по умолчанию: 0 (один запрос).
//
// Возвращаемое значение:
//  Структура:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который может быть обработан вызывающим методом.
//    * СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя.
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//    * ДанныеОперации - см. СервисОблачныеКассы.НовыйДанныеОперации
//    * Результат - Неопределено - ошибка отправки запроса на обработку операции Облачной кассы.
//                - Структура - данные ответа Облачный кассы.
//
Функция СтатусПробитияЧека(ДокументОперации, ВремяОжидания = 0) Экспорт
	
	ОтветСервиса = Неопределено;	// Неопределено, Структура
	
	Результат = НовыйРезультатОперации();
	Результат.Вставить("ДанныеОперации", СервисОблачныеКассы.НовыйДанныеОперации());
	Результат.Вставить("Результат"     , ОтветСервиса);
	
	ДанныеОперации = РегистрыСведений.ДанныеОперацийОблачныхКасс.ДанныеОперации(ДокументОперации);
	Если ДанныеОперации = Неопределено Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Данные операции Облачной кассы по документу %1 не найдены. Обратитесь к администратору.'"),
			Строка(ДокументОперации));
	ИначеЕсли ПустаяСтрока(ДанныеОперации.ИдентификаторЧека) Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'По документу %1 отсутствует информация о пробитии чека в Облачной кассе.
				|Необходимо пробить чек повторно.'"),
			Строка(ДокументОперации));
	КонецЕсли;
	
	СвойстваДанныхОпераций = "ИдентификаторОперации,СтатусОперации,ОписаниеСтатусаОперации,ИдентификаторЧека";
	
	Если ТерминальныйСтатус(ДанныеОперации.СтатусОперации) Тогда
		ЗаполнитьЗначенияСвойств(Результат.ДанныеОперации, ДанныеОперации, СвойстваДанныхОпераций);
		Результат.Результат = ДанныеОперации.ДанныеДляОбработки;
		Возврат Результат;
	КонецЕсли;
	
	ПараметрыПодключения = ПараметрыПодключения(
		Справочники.НастройкиПодключенияКОблачнымКассам.НастройкаПодключения(ДанныеОперации.НастройкаПодключения));
	НастройкиВызова      = СервисОблачныеКассы.НовыйИтеративныйВызовОперации(ВремяОжидания);
	
	СтатусОперации = СервисОблачныеКассы.СтатусПробитияЧека(
		ПараметрыПодключения,
		ДанныеОперации.ИдентификаторЧека,
		НастройкиВызова);
	
	Если Не ПустаяСтрока(СтатусОперации.КодОшибки) Тогда
		
		ЗаполнитьЗначенияСвойств(Результат, СтатусОперации, "КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
		ЗаполнитьЗначенияСвойств(Результат.ДанныеОперации, ДанныеОперации, СвойстваДанныхОпераций);
		
		Возврат Результат;
		
	КонецЕсли;
	
	РегистрыСведений.ДанныеОперацийОблачныхКасс.ЗаписатьДанныеПробитияЧека(
		ДокументОперации,
		СтатусОперации.ДанныеОперации,
		СтатусОперации.Результат);
	
	Результат.ДанныеОперации = СтатусОперации.ДанныеОперации;
	Результат.Результат      = СтатусОперации.Результат;
	
	Возврат Результат;
	
КонецФункции

// Выполняет загрузку статусов операций Облачных касс, по которым было отложено получение результата.
//
// Возвращаемое значение:
//  Массив из ОпределяемыйТип.ДокументОперацииОблачнойКассы - данные обработанных документов.
//
Функция СтатусыОпераций() Экспорт
	
	РезультатВыполнения = ВыполнитьОтложенныеОперации();
	
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Результат загрузки и обработки статусов операций.
				|В очереди на загрузку: %1
				|Загружено: %2
				|Ошибок загрузки статуса: %3
				|Обработано: %4
				|Не обработатно: %5'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			РезультатВыполнения.ВОчередиНаЗагрузку,
			РезультатВыполнения.Загружено,
			РезультатВыполнения.ОшибокЗагрузки,
			РезультатВыполнения.Обработано,
			РезультатВыполнения.НеОбработано));
	
	Возврат РезультатВыполнения.ОбработанныеОперации;
	
КонецФункции

// Определяет максимальное количество попыток запроса статуса и обработки результата для отложенной операции.
//
// Возвращаемое значение:
//  Число
//
Функция МаксимальноеКоличествоПопыток()
	
	Возврат 50;
	
КонецФункции

// Выполняет запуск отложенных операций по загрузке статусов из сервиса и/или обработки полученных данных.
//
// Возвращаемое значение:
//  Структура:
//    * ОбработанныеОперации - Массив из ОпределяемыйТип.ДокументОперацииОблачнойКассы
//    * Загружено - Число - количество загруженных статусов данных из сервиса Облачной касса с терминальным статусом.
//    * ВОчередиНаЗагрузку - Число - количество документов находящиеся в статусу выполнения. Учитывается статус
//        полученный после загрузки статуса из сервиса.
//    * Обработано - Число - количество успешно обработанных данных.
//    * ОшибокЗагрузки - Число - количество операций загрузки статусов завершившиеся с ошибкой.
//    * НеОбработано - Число - количество операций, обработка данных которых завершилась ошибкой.
//
Функция ВыполнитьОтложенныеОперации()
	
	ОбработанныеОперации = Новый Массив();	// Массив из ОпределяемыйТип.ДокументОперацииОблачнойКассы
	
	Результат = Новый Структура();
	Результат.Вставить("ОбработанныеОперации", ОбработанныеОперации);
	Результат.Вставить("Загружено"           , 0);
	Результат.Вставить("ВОчередиНаЗагрузку"  , 0);
	Результат.Вставить("Обработано"          , 0);
	Результат.Вставить("ОшибокЗагрузки"      , 0);
	Результат.Вставить("НеОбработано"        , 0);
	
	ОтложенныеОперации = РегистрыСведений.ДанныеОперацийОблачныхКасс.ОтложенныеОперации();
	Пока ОтложенныеОперации.Следующий() Цикл
		
		МаксимальноеКоличествоПопыток = МаксимальноеКоличествоПопыток();
		Если ОтложенныеОперации.КоличествоПопыток > МаксимальноеКоличествоПопыток Тогда
			Продолжить;
		КонецЕсли;
		
		ВыполнитьОбработкуДанных = ТерминальныйСтатус(ОтложенныеОперации.СтатусОперации);
		
		// Загрузка статуса
		Если ВыполнитьОбработкуДанных Тогда
			
			СтатусОперацииСервис    = ОтложенныеОперации.СтатусОперации;
			ДанныеДляОбработки      = ОтложенныеОперации.ДанныеДляОбработки.Получить();
			ОписаниеСтатусаОперации = ОтложенныеОперации.ОписаниеСтатусаОперации;
			
		Иначе
			
			СтатусОперации = СтатусПробитияЧека(ОтложенныеОперации.ДокументОперации);
			Если ПустаяСтрока(СтатусОперации.КодОшибки) Тогда
				
				СтатусОперацииСервис     = СтатусОперации.ДанныеОперации.СтатусОперации;
				ОписаниеСтатусаОперации  = СтатусОперации.ДанныеОперации.ОписаниеСтатусаОперации;
				ВыполнитьОбработкуДанных = ТерминальныйСтатус(СтатусОперацииСервис);
				ДанныеДляОбработки       = СтатусОперации.Результат;
				
				Если ВыполнитьОбработкуДанных Тогда
					Результат.Загружено = Результат.Загружено + 1;
				Иначе
					Результат.ВОчередиНаЗагрузку = Результат.ВОчередиНаЗагрузку + 1;
				КонецЕсли;
				
			Иначе
				Результат.ОшибокЗагрузки = Результат.ОшибокЗагрузки + 1;
				РегистрыСведений.ДанныеОперацийОблачныхКасс.УвеличитьКоличествоПопыток(
					ОтложенныеОперации.ДокументОперации);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВыполнитьОбработкуДанных Тогда
			
			Если СтатусОперацииСервис = ОблачныеКассыКлиентСервер.СтатусОперацииВыполнена() Тогда
				СтатусОперацииОбработки = ОблачныеКассыКлиентСервер.СтатусОперацииВыполнена();
			ИначеЕсли СтатусОперацииСервис = ОблачныеКассыКлиентСервер.СтатусОперацииОтменена() Тогда
				СтатусОперацииОбработки = ОблачныеКассыКлиентСервер.СтатусОперацииОтменена();
			Иначе
				
				ЗаписатьИнформациюВЖурналРегистрации(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Передан не валидный статус операции %1 в отложенную обработку.'",
							ОбщегоНазначения.КодОсновногоЯзыка()),
						СтатусОперацииСервис),
					Истина);
				
				Результат.НеОбработано = Результат.НеОбработано + 1;
				РегистрыСведений.ДанныеОперацийОблачныхКасс.УвеличитьКоличествоПопыток(
					ОтложенныеОперации.ДокументОперации);
				
				Продолжить;
				
			КонецЕсли;
			
			ПараметрыОперации = Новый Структура();
			ПараметрыОперации.Вставить("ИдентификаторОперации"  , ОтложенныеОперации.ИдентификаторОперации);
			ПараметрыОперации.Вставить("СтатусОперации"         , СтатусОперацииОбработки);
			ПараметрыОперации.Вставить("ОписаниеСтатусаОперации", ОписаниеСтатусаОперации);
			ПараметрыОперации.Вставить("ДанныеДляОбработки"     , ДанныеДляОбработки);
			
			Обработан = Ложь;
			
			Попытка
				
				ИнтеграцияПодсистемБИП.ПриЗагрузкеСтатусаОперацииОблачнойКассы(
					ОтложенныеОперации.ДокументОперации,
					ОтложенныеОперации.ОблачнаяКасса,
					ПараметрыОперации,
					Обработан);
				ОблачныеКассыПереопределяемый.ПриЗагрузкеСтатусаОперации(
					ОтложенныеОперации.ДокументОперации,
					ОтложенныеОперации.ОблачнаяКасса,
					ПараметрыОперации,
					Обработан);
				
			Исключение
				
				Если ТранзакцияАктивна() Тогда
					Пока ТранзакцияАктивна() Цикл
						ОтменитьТранзакцию(); // АПК:325 Отмена незакрытых транзакций.
					КонецЦикла;
					ЗаписатьИнформациюВЖурналРегистрации(
						НСтр("ru = 'По завершении выполнения обработчика ПриЗагрузкеСтатусаОперации не была закрыта транзакция.'"),
						Истина);
				КонецЕсли;
				
				ЗаписатьИнформациюВЖурналРегистрации(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ошибка обработки данных Облачной кассы в методе %1.
							|%2'",
							ОбщегоНазначения.КодОсновногоЯзыка()),
						"ОблачныеКассыПереопределяемый.ПриЗагрузкеСтатусаОперации",
						ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())),
					Истина);
				
			КонецПопытки;
			
			Если Обработан = Истина Тогда
				ОбработанныеОперации.Добавить(ОтложенныеОперации.ДокументОперации);
				Результат.Обработано = Результат.Обработано + 1;
				РегистрыСведений.ДанныеОперацийОблачныхКасс.УстановитьОтложенноеПолучениеСтатуса(
					ОтложенныеОперации.ДокументОперации,
					Ложь);
			Иначе
				Результат.НеОбработано = Результат.НеОбработано + 1;
				РегистрыСведений.ДанныеОперацийОблачныхКасс.УвеличитьКоличествоПопыток(
					ОтложенныеОперации.ДокументОперации);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СериализацияJSON

// Преобразует значение в строку JSON при помощи метода глобального контекста ЗаписатьJSON.
// Допускаются не все типы значений, подробности см. в синтакс-помощнике.
// Даты преобразуются в формат ISO (YYYY-MM-DDThh:mm:ssZ).
//
// Параметры:
//  Значение - Произвольный
//
// Возвращаемое значение:
//  Строка
//
Функция ЗначениеВJSON(Значение)
	
	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.УстановитьСтроку(
		Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
	
	ЗаписатьJSON(ЗаписьJSON, Значение);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

#КонецОбласти

#Область КодыОшибок

// Возвращает код ошибки "ОтсутствуютНастройкиПодключения".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиОтсутствуютНастройкиПодключения()
	
	Возврат "ОтсутствуютНастройкиПодключения";
	
КонецФункции

// Возвращает код ошибки "ОшибкаСохраненияПараметровПодключения".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиОшибкаСохраненияПараметровПодключения()
	
	Возврат "ОшибкаСохраненияПараметровПодключения";
	
КонецФункции

// Возвращает код ошибки "ПрочаяОшибка".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиПрочаяОшибка()
	
	Возврат "ПрочаяОшибка";
	
КонецФункции

#КонецОбласти

#КонецОбласти