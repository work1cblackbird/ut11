#Область СлужебныйПрограммныйИнтерфейс

// Возвращает признак того, что данные перенесены в новый регистр
// 
// Возвращаемое значение:
//  см. РаботаСФайламиСлужебныйПовтИсп.ДедупликацияВыполнена
//
Функция ДедупликацияВыполнена() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ДедупликацияВыполнена = РаботаСФайламиСлужебныйПовтИсп.ДедупликацияВыполнена();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ДедупликацияВыполнена;

КонецФункции

// Добавляет в форму настроек обмена с сайтом реквизиты
// необходимые для выгрузки товаров и загрузки заказов.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форму узла плана обмена "Обмен с сайтом".
//
Процедура ДобавитьРеквизитыФормыНастройки(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	ТипБулево = Новый ОписаниеТипов("Булево");
	ТипСтрока = Новый ОписаниеТипов("Строка");
	
	ТипСклад = Новый ОписаниеТипов("СправочникСсылка.Склады");
	ТипСоглашение = Новый ОписаниеТипов("СправочникСсылка.СоглашенияСКлиентами");
	ТипОрганизация = Новый ОписаниеТипов("СправочникСсылка.Организации");
	ТипПользователи = Новый ОписаниеТипов("СправочникСсылка.Пользователи");
	ТипПричина = Новый ОписаниеТипов("СправочникСсылка.ПричиныОтменыЗаказовКлиентов");
	ТипГруппаДоступа = Новый ОписаниеТипов("СправочникСсылка.ГруппыДоступаПартнеров");
	ТипВидНоменклатуры = Новый ОписаниеТипов("СправочникСсылка.ВидыНоменклатуры");
	ТипЕдиницаИзмерения = Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения");
	ТипГруппаНоменклатуры = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	ТипКонтрагент = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	ТипДоговорЭквайринга = Новый ОписаниеТипов("СправочникСсылка.ДоговорыЭквайринга");
	
	ТипСведения = Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения");
	
	ТипТаблицаЗначений = Новый ОписаниеТипов("ТаблицаЗначений");
	ТипСтатусЗаказаВБазе = Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыЗаказовКлиентов");
	ТипСпособИдентификации = Новый ОписаниеТипов("ПеречислениеСсылка.СпособыИдентификацииКонтрагентов");
	ТипФормаОплаты = Новый ОписаниеТипов("ПеречислениеСсылка.ФормыОплаты");
	
	РеквизитОнлайнОплаты = Новый РеквизитФормы("ОнлайнОплаты", ТипБулево,,НСтр("ru = 'Загружать онлайн-оплаты'"),Истина); 
	РеквизитВыгружатьПрочиеФайлы = Новый РеквизитФормы("ВыгружатьФайлы", ТипБулево,,НСтр("ru = 'Прочие файлы'"),Истина);
	РеквизитДатаНаСайте = Новый РеквизитФормы("ДополнительныйРеквизитЗаказаКлиентаДатаЗаказаНаСайте",
		ТипСведения,,НСтр("ru = 'Дата заказа на сайте'"),Истина);
	РеквизитНомерНаСайте = Новый РеквизитФормы("ДополнительныйРеквизитЗаказаКлиентаНомерЗаказаНаСайте",
		ТипСведения,,НСтр("ru = 'Номер заказа на сайте'"),Истина);
	РеквизитСоглашение = Новый РеквизитФормы("Соглашение", ТипСоглашение,,"Соглашение",Истина);
	РеквизитОрганизация = Новый РеквизитФормы("Организация", ТипОрганизация,,"Организация",Истина);
	РеквизитСклад = Новый РеквизитФормы("Склад", ТипСклад,,"Склад",Истина);
	РеквизитМенеджер = Новый РеквизитФормы("Менеджер", ТипПользователи,,НСтр("ru = 'Менеджер'"),Истина);
	РеквизитПричинаОтмены = Новый РеквизитФормы("ПричинаОтменыЗаказа", ТипПричина,,НСтр("ru = 'Причина отмены заказа'"),Истина);
	РеквизитСпособИдентификации = Новый РеквизитФормы("СпособИдентификацииКонтрагентов", ТипСпособИдентификации,,,Истина);
	РеквизитВидНоменклатурыТовар = Новый РеквизитФормы("ВидНоменклатурыТовар", ТипВидНоменклатуры,,НСтр("ru = 'Вид номенклатуры товар'"),Истина);
	РеквизитВидНоменклатурыУслуга = Новый РеквизитФормы("ВидНоменклатурыУслуга", ТипВидНоменклатуры,,НСтр("ru = 'Вид номенклатуры услуга'"),Истина);
	РеквизитЕдиницаИзмерения = Новый РеквизитФормы("ЕдиницаИзмеренияНовойНоменклатуры", ТипЕдиницаИзмерения,,НСтр("ru = 'Единица измерения'"),Истина);
	РеквизитГруппаНоменклатуры = Новый РеквизитФормы("ГруппаДляНовойНоменклатуры", ТипГруппаНоменклатуры,,НСтр("ru = 'Группа номенклатуры'"),Истина);
	
	РеквизитСоздаватьПартнеровДляНовыхКонтрагентов = Новый РеквизитФормы("СоздаватьПартнеровДляНовыхКонтрагентов",
		ТипБулево, ,НСтр("ru = 'Создавать партнеров для новых контрагентов'"),Истина);
	РеквизитГруппаДоступа = Новый РеквизитФормы("ГруппаДоступаПартнеров", ТипГруппаДоступа,, НСтр("ru = 'Группа доступа партнеров'"), Истина);
	
	
	// Служебные реквизиты, не отображаемые на форме.
	РеквизитИспользуютсяГруппыДоступаПартнеров = Новый РеквизитФормы("ИспользуютсяГруппыДоступаПартнеров", ТипБулево);
	РеквизитИспользоватьПартнеровКакКонтрагентов = Новый РеквизитФормы("ИспользоватьПартнеровКакКонтрагентов", ТипБулево);
	
	
	РеквизитСоответствиеСтатусов = Новый РеквизитФормы("СоответствиеСтатусовЗаказов", ТипТаблицаЗначений, ,
		НСтр("ru = 'Соответствие статусов заказов'"), Истина);
	РеквизитСоответствиеФормОплат = Новый РеквизитФормы("СоответствиеФормОплат", ТипТаблицаЗначений, ,
		НСтр("ru = 'Соответствие видов оплат'"), Истина);
	РеквизитСоответствиеОнлайнОплат = Новый РеквизитФормы("СоответствиеОнлайнОплат", ТипТаблицаЗначений, ,
		НСтр("ru = 'Соответствие онлайн-оплат'"), Истина);
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(РеквизитСоответствиеСтатусов);
	ДобавляемыеРеквизиты.Добавить(РеквизитСоответствиеФормОплат);
	ДобавляемыеРеквизиты.Добавить(РеквизитСоответствиеОнлайнОплат);
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);

	РеквизитСтатусЗаказаВБазе = Новый РеквизитФормы("СтатусЗаказаВБазе", ТипСтатусЗаказаВБазе,
		"СоответствиеСтатусовЗаказов", НСтр("ru = 'Статус заказа в базе'"), Истина);
	РеквизитСтатусЗаказаНаСайте = Новый РеквизитФормы("СтатусЗаказаНаСайте", ТипСтрока,
		"СоответствиеСтатусовЗаказов", НСтр("ru = 'Статус заказа на сайте'"), Истина);

	РеквизитЗагружатьФормыОплаты = Новый РеквизитФормы("ЗагружатьФормыОплаты", ТипБулево,, НСтр("ru = 'Загружать формы оплат'"), Истина);
	РеквизитВидОплатыНаСайте = Новый РеквизитФормы("ВидОплатыНаСайте", ТипСтрока,
		"СоответствиеФормОплат", НСтр("ru = 'Вид оплаты на сайте'"), Истина);
	РеквизитКодОплатыНаСайте = Новый РеквизитФормы("КодОплатыНаСайте", ТипСтрока,
		"СоответствиеФормОплат", НСтр("ru = 'Код оплаты на сайте'"), Истина);
	РеквизитФормаОплаты = Новый РеквизитФормы("ФормаОплаты", ТипФормаОплаты,
		"СоответствиеФормОплат", НСтр("ru = 'Форма оплаты'"), Истина);

	РеквизитВидОплатыНаСайтеОнлайн = Новый РеквизитФормы("ВидОплатыНаСайте", ТипСтрока,
		"СоответствиеОнлайнОплат", НСтр("ru = 'Вид оплаты на сайте'"), Истина);
	РеквизитКодОплатыНаСайтеОнлайн = Новый РеквизитФормы("КодОплатыНаСайте", ТипСтрока,
		"СоответствиеОнлайнОплат", НСтр("ru = 'Код оплаты на сайте'"), Истина);
	РеквизитЭквайер = Новый РеквизитФормы("Эквайер", ТипКонтрагент,
		"СоответствиеОнлайнОплат", НСтр("ru = 'Эквайер'"), Истина);
	РеквизитДоговорЭквайринга = Новый РеквизитФормы("ДоговорЭквайринга", ТипДоговорЭквайринга,
		"СоответствиеОнлайнОплат", НСтр("ru = 'Договор подключения к платежной системе'"), Истина);
	РеквизитФискализироватьОплату = Новый РеквизитФормы("ФискализироватьОплату", ТипБулево,
		"СоответствиеОнлайнОплат", НСтр("ru = 'Фискализировать оплату'"), Истина);
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(РеквизитОнлайнОплаты);
	ДобавляемыеРеквизиты.Добавить(РеквизитВыгружатьПрочиеФайлы);
	ДобавляемыеРеквизиты.Добавить(РеквизитДатаНаСайте);
	ДобавляемыеРеквизиты.Добавить(РеквизитНомерНаСайте);
	ДобавляемыеРеквизиты.Добавить(РеквизитСоглашение);
	ДобавляемыеРеквизиты.Добавить(РеквизитОрганизация);
	ДобавляемыеРеквизиты.Добавить(РеквизитСклад);
	ДобавляемыеРеквизиты.Добавить(РеквизитМенеджер);
	ДобавляемыеРеквизиты.Добавить(РеквизитПричинаОтмены);
	ДобавляемыеРеквизиты.Добавить(РеквизитСтатусЗаказаВБазе);
	ДобавляемыеРеквизиты.Добавить(РеквизитСтатусЗаказаНаСайте);
	ДобавляемыеРеквизиты.Добавить(РеквизитВидОплатыНаСайте);
	ДобавляемыеРеквизиты.Добавить(РеквизитКодОплатыНаСайте);
	ДобавляемыеРеквизиты.Добавить(РеквизитФормаОплаты);
	ДобавляемыеРеквизиты.Добавить(РеквизитГруппаДоступа);
	ДобавляемыеРеквизиты.Добавить(РеквизитИспользуютсяГруппыДоступаПартнеров);
	ДобавляемыеРеквизиты.Добавить(РеквизитИспользоватьПартнеровКакКонтрагентов);
	ДобавляемыеРеквизиты.Добавить(РеквизитСоздаватьПартнеровДляНовыхКонтрагентов);
	ДобавляемыеРеквизиты.Добавить(РеквизитСпособИдентификации);
	ДобавляемыеРеквизиты.Добавить(РеквизитВидНоменклатурыТовар);
	ДобавляемыеРеквизиты.Добавить(РеквизитВидНоменклатурыУслуга);
	ДобавляемыеРеквизиты.Добавить(РеквизитЕдиницаИзмерения);
	ДобавляемыеРеквизиты.Добавить(РеквизитГруппаНоменклатуры);
	ДобавляемыеРеквизиты.Добавить(РеквизитВидОплатыНаСайтеОнлайн);
	ДобавляемыеРеквизиты.Добавить(РеквизитКодОплатыНаСайтеОнлайн);
	ДобавляемыеРеквизиты.Добавить(РеквизитЭквайер);
	ДобавляемыеРеквизиты.Добавить(РеквизитДоговорЭквайринга);
	ДобавляемыеРеквизиты.Добавить(РеквизитФискализироватьОплату);
	ДобавляемыеРеквизиты.Добавить(РеквизитЗагружатьФормыОплаты);

	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);

	// Закладка Выгрузка товаров.
	ЭлементВыгружатьПрочиеФайлы = Элементы.Добавить(
		"ВыгружатьФайлы",
		Тип("ПолеФормы"),
		Элементы.ГруппаПараметрыВыгрузки);
	ЭлементВыгружатьПрочиеФайлы.ПутьКДанным = "ВыгружатьФайлы";
	ЭлементВыгружатьПрочиеФайлы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	ЭлементВыгружатьПрочиеФайлы.Вид = ВидПоляФормы.ПолеФлажка;
	
	// Закладка Обмен заказами.
	
	// Группа дата и номер заказа.
	ГруппаДатаНомерЗаказа = Элементы.Добавить("ГруппаДатаНомерЗаказа", Тип("ГруппаФормы"), Элементы.ГруппаЗаказыОсновныеНастройки);
	ГруппаДатаНомерЗаказа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаДатаНомерЗаказа.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение;
	ЗаголовокШаблон = НСтр("ru = 'Дополнительные реквизиты для поиска документов ""%1""'");
	ЗаголовокГруппы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокШаблон, НСтр("ru = 'Заказ клиент'"));
	ГруппаДатаНомерЗаказа.Заголовок = ЗаголовокГруппы;
	ГруппаДатаНомерЗаказа.ОтображатьЗаголовок = Истина;
	ГруппаДатаНомерЗаказа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	ЭлементДатаЗаказа = Элементы.Добавить("ДатаЗаказаНаСайте", Тип("ПолеФормы"), ГруппаДатаНомерЗаказа);
	ЭлементДатаЗаказа.ПутьКДанным = "ДополнительныйРеквизитЗаказаКлиентаДатаЗаказаНаСайте";
	ЭлементДатаЗаказа.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементДатаЗаказа.АвтоОтметкаНезаполненного = Истина;
		
	ПараметрыДатаНомерЗаказа = Новый Массив;
	ПараметрыДатаНомерЗаказа.Добавить(Новый ПараметрВыбора("Отбор.НаборСвойств",
		УправлениеСвойствами.НаборСвойствПоИмени("Документ_ЗаказКлиента")));
	ПараметрыДатаНомерЗаказа.Добавить(Новый ПараметрВыбора("Отбор.ЭтоДополнительноеСведение", Ложь));
	
	ПараметрыВыбораДатаНомерЗаказа = Новый ФиксированныйМассив(ПараметрыДатаНомерЗаказа);
	ЭлементДатаЗаказа.ПараметрыВыбора = ПараметрыВыбораДатаНомерЗаказа;
	
	ЭлементНомерЗаказа = Элементы.Добавить("НомерЗаказаНаСайте", Тип("ПолеФормы"), ГруппаДатаНомерЗаказа);
	ЭлементНомерЗаказа.ПутьКДанным = "ДополнительныйРеквизитЗаказаКлиентаНомерЗаказаНаСайте";
	ЭлементНомерЗаказа.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементНомерЗаказа.АвтоОтметкаНезаполненного = Истина;
	ЭлементНомерЗаказа.ПараметрыВыбора = ПараметрыВыбораДатаНомерЗаказа;
	
	// Группа параметры Заказа.
	ГруппаПараметрыЗаказа = Элементы.Добавить("ГруппаПараметрыЗаказа", Тип("ГруппаФормы"), Элементы.ГруппаЗаказыОсновныеНастройки);
	ГруппаПараметрыЗаказа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаПараметрыЗаказа.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение;
	ЗаголовокШаблон = НСтр("ru = 'Реквизиты для создания документов ""%1""'");
	ЗаголовокГруппы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокШаблон, НСтр("ru = 'Заказ клиент'"));
	ГруппаПараметрыЗаказа.Заголовок = ЗаголовокГруппы;
	ГруппаПараметрыЗаказа.ОтображатьЗаголовок = Истина;
	ГруппаПараметрыЗаказа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;

	// Группа ГруппаСоглашениеОрганизация
	ГруппаСоглашениеОрганизация = Элементы.Добавить("ГруппаСоглашениеОрганизация", Тип("ГруппаФормы"), ГруппаПараметрыЗаказа);
	ГруппаСоглашениеОрганизация.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаСоглашениеОрганизация.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаСоглашениеОрганизация.ОтображатьЗаголовок = Ложь;
	ГруппаСоглашениеОрганизация.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	ЭлементСоглашение = Элементы.Добавить("Соглашение", Тип("ПолеФормы"), ГруппаСоглашениеОрганизация);
	ЭлементСоглашение.ПутьКДанным = "Соглашение";
	ЭлементСоглашение.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементСоглашение.УстановитьДействие("ПриИзменении", "Подключаемый_ПолеВВодаПриИзменении");
	ЭлементСоглашение.АвтоОтметкаНезаполненного = Истина;
	ЭлементСоглашение.ПараметрыВыбора = ПараметрыВыбораСоглашения();
	ЭлементСоглашениеРасширеннаяПодсказкаЗаголовок = НСтр("ru = 'Разрешается указывать типовое действующее соглашение с клиентами с установленным флагом ""Доступно внешним пользователям и для обмена с сайтом"" и пустым сегментом клиентов'");
	ЭлементСоглашение.РасширеннаяПодсказка.Заголовок = ЭлементСоглашениеРасширеннаяПодсказкаЗаголовок;
	ЭлементСоглашение.РасширеннаяПодсказка.АвтоМаксимальнаяШирина = Ложь;
	ЭлементСоглашение.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
	
	ЭлементОрганизация = Элементы.Добавить("Организация", Тип("ПолеФормы"), ГруппаСоглашениеОрганизация);
	ЭлементОрганизация.ПутьКДанным = "Организация";
	ЭлементОрганизация.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементОрганизация.АвтоОтметкаНезаполненного = Истина;
	
	// Группа ГруппаСкладМенеджер
	ГруппаСкладМенеджер = Элементы.Добавить("ГруппаСкладМенеджер", Тип("ГруппаФормы"), ГруппаПараметрыЗаказа);
	ГруппаСкладМенеджер.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаСкладМенеджер.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаСкладМенеджер.ОтображатьЗаголовок = Ложь;
	ГруппаСкладМенеджер.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;

	
	ЭлементСклад = Элементы.Добавить("Склад", Тип("ПолеФормы"), ГруппаСкладМенеджер);
	ЭлементСклад.ПутьКДанным = "Склад";
	ЭлементСклад.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементСклад.АвтоОтметкаНезаполненного = Истина;
	ЭлементСклад.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	
	ЭлементМенеджер = Элементы.Добавить("Менеджер", Тип("ПолеФормы"), ГруппаСкладМенеджер);
	ЭлементМенеджер.ПутьКДанным = "Менеджер";
	ЭлементМенеджер.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементМенеджер.АвтоОтметкаНезаполненного = Ложь;
	
	// Группа Параметры поиска
	ГруппаПараметрыПоиска = Элементы.Добавить("ГруппаПараметрыПоиска", Тип("ГруппаФормы"), Элементы.ГруппаЗаказыОсновныеНастройки);
	ГруппаПараметрыПоиска.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаПараметрыПоиска.ОтображатьЗаголовок = Истина;
	ГруппаПараметрыПоиска.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение;
	ЗаголовокШаблон = НСтр("ru = 'Способ поиска существующих элементов справочника ""%1""'");
	ЗаголовокГруппы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокШаблон, НСтр("ru = 'Контрагенты'"));
	ГруппаПараметрыПоиска.Заголовок = ЗаголовокГруппы;
	ГруппаПараметрыПоиска.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаПараметрыПоиска.Объединенная = Истина;
	
	ЭлементСпособИдентификации = Элементы.Добавить("СпособИдентификацииКонтрагентов", Тип("ПолеФормы"), ГруппаПараметрыПоиска);
	ЭлементСпособИдентификации.ПутьКДанным = "СпособИдентификацииКонтрагентов";
	ЭлементСпособИдентификации.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ЭлементСпособИдентификации.Вид = ВидПоляФормы.ПолеПереключателя;
	ЭлементСпособИдентификации.СписокВыбора.Добавить(Перечисления.СпособыИдентификацииКонтрагентов.Наименование, "Наименование");
	ЭлементСпособИдентификации.СписокВыбора.Добавить(Перечисления.СпособыИдентификацииКонтрагентов.ИННКПП, "ИНН/КПП");
	
	ЭлементСоздаватьПартнеровДляНовыхКонтрагентов = Элементы.Добавить("СоздаватьПартнеровДляНовыхКонтрагентов",
		Тип("ПолеФормы"), ГруппаПараметрыПоиска);
	ЭлементСоздаватьПартнеровДляНовыхКонтрагентов.ПутьКДанным = "СоздаватьПартнеровДляНовыхКонтрагентов";
	ЭлементСоздаватьПартнеровДляНовыхКонтрагентов.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	ЭлементСоздаватьПартнеровДляНовыхКонтрагентов.Вид = ВидПоляФормы.ПолеФлажка;
	ЭлементСоздаватьПартнеровДляНовыхКонтрагентов.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	ТекстПодсказки = Новый ФорматированнаяСтрока(НСтр("ru = 'При получении информации о новых контрагентах также будут создаваться новые партнеры.'")
	, ,ЦветаСтиля.ПоясняющийТекст);
	ЭлементСоздаватьПартнеровДляНовыхКонтрагентов.РасширеннаяПодсказка.Заголовок = ТекстПодсказки;
	ЭлементСоздаватьПартнеровДляНовыхКонтрагентов.РасширеннаяПодсказка.АвтоМаксимальнаяШирина = Ложь;
	ЭлементСоздаватьПартнеровДляНовыхКонтрагентов.УстановитьДействие("ПриИзменении", "Подключаемый_ПолеФлажкаПриИзменении");
	
	ЭлементГруппаДоступаПартнеров = Элементы.Добавить("ГруппаДоступаПартнеров", Тип("ПолеФормы"), ГруппаПараметрыПоиска);
	ЭлементГруппаДоступаПартнеров.ПутьКДанным = "ГруппаДоступаПартнеров";
	ЭлементГруппаДоступаПартнеров.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементГруппаДоступаПартнеров.АвтоОтметкаНезаполненного = Истина;
	
	// Группа ПараметрыНовыхЭлементов
	ГруппаПараметрыНовыхЭлементов = Элементы.Добавить("ГруппаПараметрыНовыхЭлементов", Тип("ГруппаФормы"), Элементы.ГруппаЗаказыОсновныеНастройки);
	ГруппаПараметрыНовыхЭлементов.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаПараметрыНовыхЭлементов.ОтображатьЗаголовок = Истина;
	ГруппаПараметрыНовыхЭлементов.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение;
	ЗаголовокШаблон = НСтр("ru = 'Реквизиты для создания новых элементов справочника ""%1""'");
	ЗаголовокГруппы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокШаблон, НСтр("ru = 'Номенклатура'"));
	ГруппаПараметрыНовыхЭлементов.Заголовок = ЗаголовокГруппы;
	ГруппаПараметрыНовыхЭлементов.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	
	// Группа ПараметрыНовыхЭлементов
	ГруппаВидыНоменклатуры = Элементы.Добавить("ГруппаВидыНоменклатуры", Тип("ГруппаФормы"), ГруппаПараметрыНовыхЭлементов);
	ГруппаВидыНоменклатуры.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаВидыНоменклатуры.ОтображатьЗаголовок = Ложь;
	ГруппаВидыНоменклатуры.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	ЭлементВидНоменклатурыТовар = Элементы.Добавить("ВидНоменклатурыТовар", Тип("ПолеФормы"), ГруппаВидыНоменклатуры);
	ЭлементВидНоменклатурыТовар.ПутьКДанным = "ВидНоменклатурыТовар";
	ЭлементВидНоменклатурыТовар.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементВидНоменклатурыТовар.АвтоОтметкаНезаполненного = Истина;
	
	ЭлементВидНоменклатурыУслуга = Элементы.Добавить("ВидНоменклатурыУслуга", Тип("ПолеФормы"), ГруппаВидыНоменклатуры);
	ЭлементВидНоменклатурыУслуга.ПутьКДанным = "ВидНоменклатурыУслуга";
	ЭлементВидНоменклатурыУслуга.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементВидНоменклатурыУслуга.АвтоОтметкаНезаполненного = Истина;

	// Группа Единицы
	ГруппаЕдиницы = Элементы.Добавить("ГруппаЕдиницы", Тип("ГруппаФормы"), ГруппаПараметрыНовыхЭлементов);
	ГруппаЕдиницы.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаЕдиницы.ОтображатьЗаголовок = Ложь;
	ГруппаЕдиницы.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	ЭлементЕдиницаИзмерения = Элементы.Добавить("ЕдиницаИзмеренияНовойНоменклатуры", Тип("ПолеФормы"), ГруппаЕдиницы);
	ЭлементЕдиницаИзмерения.ПутьКДанным = "ЕдиницаИзмеренияНовойНоменклатуры";
	ЭлементЕдиницаИзмерения.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементЕдиницаИзмерения.АвтоОтметкаНезаполненного = Истина;
	
	ЭлементГруппаНоменклатуры = Элементы.Добавить("ГруппаДляНовойНоменклатуры", Тип("ПолеФормы"), ГруппаЕдиницы);
	ЭлементГруппаНоменклатуры.ПутьКДанным = "ГруппаДляНовойНоменклатуры";
	ЭлементГруппаНоменклатуры.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементГруппаНоменклатуры.АвтоОтметкаНезаполненного = Ложь;
	ЭлементГруппаНоменклатуры.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
	
	// Группа дополнительные настройки
	ГруппаПричиныОтменаЗаказа = Элементы.Добавить("ГруппаПричиныОтменаЗаказа", Тип("ГруппаФормы"), Элементы.ГруппаЗаказыДополнительно);
	ГруппаПричиныОтменаЗаказа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаПричиныОтменаЗаказа.ОтображатьЗаголовок = Ложь;
	ГруппаПричиныОтменаЗаказа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	
	ЭлементПричинаОтменыЗаказа = Элементы.Добавить("ПричинаОтменыЗаказа", Тип("ПолеФормы"), ГруппаПричиныОтменаЗаказа);
	ЭлементПричинаОтменыЗаказа.ПутьКДанным = "ПричинаОтменыЗаказа";
	ЭлементПричинаОтменыЗаказа.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементПричинаОтменыЗаказа.АвтоОтметкаНезаполненного = Истина;
	
	// Группа соответствие статусов заказов
	ГруппаСоответствиеСтатусов = Элементы.Добавить("ГруппаСоответствиеСтатусов", Тип("ГруппаФормы"), Элементы.ГруппаЗаказыДополнительно);
	ГруппаСоответствиеСтатусов.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаСоответствиеСтатусов.ОтображатьЗаголовок = Ложь;
	ГруппаСоответствиеСтатусов.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	ЭлементСоответствиеСтатусовЗаказов = Элементы.Добавить("СоответствиеСтатусовЗаказов", Тип("ТаблицаФормы"), ГруппаСоответствиеСтатусов);
	ЭлементСоответствиеСтатусовЗаказов.ПутьКДанным = "СоответствиеСтатусовЗаказов";
	ЭлементСоответствиеСтатусовЗаказов.Отображение = ОтображениеТаблицы.Список;
	ЭлементСоответствиеСтатусовЗаказов.УстановитьДействие("ПередОкончаниемРедактирования", "Подключаемый_ТаблицаФормыПередОкончаниемРедактирования");
	
	ЭлементСтатусЗаказаВБазе = Элементы.Добавить("СтатусЗаказаВБазе", Тип("ПолеФормы"), ЭлементСоответствиеСтатусовЗаказов);
	ЭлементСтатусЗаказаВБазе.ПутьКДанным = "СоответствиеСтатусовЗаказов.СтатусЗаказаВБазе";
	ЭлементСтатусЗаказаВБазе.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементСтатусЗаказаВБазе.АвтоОтметкаНезаполненного = Истина;
	
	ЭлементСтатусЗаказаНаСайте = Элементы.Добавить("СтатусЗаказаНаСайте", Тип("ПолеФормы"), ЭлементСоответствиеСтатусовЗаказов);
	ЭлементСтатусЗаказаНаСайте.ПутьКДанным = "СоответствиеСтатусовЗаказов.СтатусЗаказаНаСайте";
	ЭлементСтатусЗаказаНаСайте.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементСтатусЗаказаНаСайте.АвтоОтметкаНезаполненного = Истина;
	
	// Расширенная подсказка режима выгрузки
	Элементы.ГруппаРежимВыгрузки.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	ГруппаРежимВыгрузкиРасширеннаяПодсказкаЗаголовок = НСтр("ru = 'Необходимо типовое действующее соглашение с клиентами с установленным флагом ""Доступно внешним пользователям и для обмена с сайтом"" и пустым сегментом клиентов'");
	Элементы.ГруппаРежимВыгрузки.РасширеннаяПодсказка.Заголовок = ГруппаРежимВыгрузкиРасширеннаяПодсказкаЗаголовок;
	Элементы.ГруппаРежимВыгрузки.РасширеннаяПодсказка.АвтоМаксимальнаяШирина = Ложь;

	// Группа соответствия форм оплат
	ЭлементЗагружатьФормыОплаты = Элементы.Добавить("ЗагружатьФормыОплаты", Тип("ПолеФормы"), Элементы.ГруппаЗаказыДополнительно);
	ЭлементЗагружатьФормыОплаты.ПутьКДанным = "ЗагружатьФормыОплаты";
	ЭлементЗагружатьФормыОплаты.Вид = ВидПоляФормы.ПолеФлажка;
	ЭлементЗагружатьФормыОплаты.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	ЭлементЗагружатьФормыОплаты.УстановитьДействие("ПриИзменении", "Подключаемый_ПолеФлажкаПриИзменении");
	ТекстПодсказки = Новый ФорматированнаяСтрока(НСтр("ru = 'В заказе будет указана форма оплаты с сайта.'")
	, ,ЦветаСтиля.ПоясняющийТекст);
	ЭлементЗагружатьФормыОплаты.Подсказка = ТекстПодсказки;
	
	ЭлементСоответствиеФормОплат = Элементы.Добавить("СоответствиеФормОплат", Тип("ТаблицаФормы"), Элементы.ГруппаЗаказыДополнительно);
	ЭлементСоответствиеФормОплат.ПутьКДанным = "СоответствиеФормОплат";
	ЭлементСоответствиеФормОплат.Отображение = ОтображениеТаблицы.Список;
	ЭлементСоответствиеФормОплат.УстановитьДействие("ПередОкончаниемРедактирования", "Подключаемый_ТаблицаФормыПередОкончаниемРедактирования");

	ЭлементВидОплатыНаСайте = Элементы.Добавить("ВидОплатыНаСайте", Тип("ПолеФормы"), ЭлементСоответствиеФормОплат);
	ЭлементВидОплатыНаСайте.ПутьКДанным = "СоответствиеФормОплат.ВидОплатыНаСайте";
	ЭлементВидОплатыНаСайте.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементВидОплатыНаСайте.АвтоОтметкаНезаполненного = Истина;
	
	ЭлементКодОплатыНаСайте = Элементы.Добавить("КодОплатыНаСайте", Тип("ПолеФормы"), ЭлементСоответствиеФормОплат);
	ЭлементКодОплатыНаСайте.ПутьКДанным = "СоответствиеФормОплат.КодОплатыНаСайте";
	ЭлементКодОплатыНаСайте.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементКодОплатыНаСайте.АвтоОтметкаНезаполненного = Истина;

	ЭлементФормаОплаты = Элементы.Добавить("ФормаОплаты", Тип("ПолеФормы"), ЭлементСоответствиеФормОплат);
	ЭлементФормаОплаты.ПутьКДанным = "СоответствиеФормОплат.ФормаОплаты";
	ЭлементФормаОплаты.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементФормаОплаты.АвтоОтметкаНезаполненного = Истина;

	// Загружать Онлайн-оплаты
	ГруппаЗагружатьОнлайнОплаты = Элементы.Добавить("ГруппаЗагружатьОнлайнОплаты", Тип("ГруппаФормы"), Элементы.ГруппаЗаказыОсновныеНастройки);
	ГруппаЗагружатьОнлайнОплаты.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаЗагружатьОнлайнОплаты.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение;
	ГруппаЗагружатьОнлайнОплаты.Заголовок = НСтр("ru = 'Загрузка он-лайн оплат'");
	ГруппаЗагружатьОнлайнОплаты.ОтображатьЗаголовок = Истина;
	ГруппаЗагружатьОнлайнОплаты.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	ЭлементОнлайнОплаты = Элементы.Добавить("ОнлайнОплаты", Тип("ПолеФормы"), ГруппаЗагружатьОнлайнОплаты);
	ЭлементОнлайнОплаты.ПутьКДанным = "ОнлайнОплаты";
	ЭлементОнлайнОплаты.Вид = ВидПоляФормы.ПолеФлажка;
	ЭлементОнлайнОплаты.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	ЭлементОнлайнОплаты.УстановитьДействие("ПриИзменении", "Подключаемый_ПолеФлажкаПриИзменении");
	
	ЭлементСоответствиеОнлайнОплат = Элементы.Добавить("СоответствиеОнлайнОплат", Тип("ТаблицаФормы"), ГруппаЗагружатьОнлайнОплаты);
	ЭлементСоответствиеОнлайнОплат.ПутьКДанным = "СоответствиеОнлайнОплат";
	ЭлементСоответствиеОнлайнОплат.Отображение = ОтображениеТаблицы.Список;
	ЭлементСоответствиеОнлайнОплат.УстановитьДействие("ПередОкончаниемРедактирования", "Подключаемый_ТаблицаФормыПередОкончаниемРедактирования");
	
	ЭлементВидОплатыНаСайтеОнлайн = Элементы.Добавить("ВидОплатыНаСайтеОнлайн", Тип("ПолеФормы"), ЭлементСоответствиеОнлайнОплат);
	ЭлементВидОплатыНаСайтеОнлайн.ПутьКДанным = "СоответствиеОнлайнОплат.ВидОплатыНаСайте";
	ЭлементВидОплатыНаСайтеОнлайн.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементВидОплатыНаСайтеОнлайн.АвтоОтметкаНезаполненного = Ложь;
	
	ЭлементКодОплатыНаСайтеОнлайн = Элементы.Добавить("КодОплатыНаСайтеОнлайн", Тип("ПолеФормы"), ЭлементСоответствиеОнлайнОплат);
	ЭлементКодОплатыНаСайтеОнлайн.ПутьКДанным = "СоответствиеОнлайнОплат.КодОплатыНаСайте";
	ЭлементКодОплатыНаСайтеОнлайн.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементКодОплатыНаСайтеОнлайн.АвтоОтметкаНезаполненного = Истина;
	
	ЭлементЭквайер = Элементы.Добавить("Эквайер", Тип("ПолеФормы"), ЭлементСоответствиеОнлайнОплат);
	ЭлементЭквайер.ПутьКДанным = "СоответствиеОнлайнОплат.Эквайер";
	ЭлементЭквайер.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементЭквайер.АвтоОтметкаНезаполненного = Истина;

	ЭлементДоговорЭквайринга = Элементы.Добавить("ДоговорЭквайринга", Тип("ПолеФормы"), ЭлементСоответствиеОнлайнОплат);
	ЭлементДоговорЭквайринга.ПутьКДанным = "СоответствиеОнлайнОплат.ДоговорЭквайринга";
	ЭлементДоговорЭквайринга.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементДоговорЭквайринга.АвтоОтметкаНезаполненного = Истина;
	
	НовыйМассив = Новый Массив;
	НовыйМассив.Добавить(Новый ПараметрВыбора("Отбор.ПометкаУдаления", Ложь));
	НовыйМассив.Добавить(Новый ПараметрВыбора("Отбор.Статус", Перечисления.СтатусыДоговоровКонтрагентов.Действует));
	НовыйМассив.Добавить(Новый ПараметрВыбора("Отбор.ИспользуютсяЭквайринговыеТерминалы", Ложь));
	ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассив);
	ЭлементДоговорЭквайринга.ПараметрыВыбора = ПараметрыВыбора;
	
	НовыйМассив = Новый Массив;
	НовыйМассив.Добавить(Новый СвязьПараметраВыбора("Отбор.Контрагент", "Элементы.СоответствиеОнлайнОплат.ТекущиеДанные.Эквайер"));
	НовыйМассив.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Организация"));
	НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
	ЭлементДоговорЭквайринга.СвязиПараметровВыбора = НовыеСвязи;

	ЭлементФискализироватьОплату = Элементы.Добавить("ФискализироватьОплату", Тип("ПолеФормы"), ЭлементСоответствиеОнлайнОплат);
	ЭлементФискализироватьОплату.ПутьКДанным = "СоответствиеОнлайнОплат.ФискализироватьОплату";
	ЭлементФискализироватьОплату.Вид = ВидПоляФормы.ПолеФлажка;
	ЭлементФискализироватьОплату.Видимость = РозничныеПродажиВызовСервера.УдаленнаяФискализацияДоступна();

КонецПроцедуры

// Устанавливает условное оформление формы узла плана обмена
//
// Параметры
//  Форма - управляемая форма - форма узла плана обмена "Обмен с сайтом".
//
Процедура УстановитьУсловноеОформление(Форма) Экспорт
	
	Элемент = Форма.УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Форма.Элементы.ГруппаДоступаПартнеров.Имя);
	
	ГруппаОтбораИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ГруппаОтбораИли = ГруппаОтбораИ.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбораИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользуютсяГруппыДоступаПартнеров");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ГруппаОтбораИ2 = ГруппаОтбораИли.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИ2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбораИ2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьПартнеровКакКонтрагентов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбораИ2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СоздаватьПартнеровДляНовыхКонтрагентов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ГруппаДоступаПартнеров");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	ОбязательныеПоля = Новый Соответствие;
	// Имя элементы формы, имя реквизита формы
	ОбязательныеПоля.Вставить("НомерЗаказаНаСайте","ДополнительныйРеквизитЗаказаКлиентаНомерЗаказаНаСайте");
	ОбязательныеПоля.Вставить("ДатаЗаказаНаСайте","ДополнительныйРеквизитЗаказаКлиентаДатаЗаказаНаСайте");
	ОбязательныеПоля.Вставить("Соглашение","Соглашение");
	ОбязательныеПоля.Вставить("Организация","Организация");
	ОбязательныеПоля.Вставить("Склад", "Склад");
	ОбязательныеПоля.Вставить("ВидНоменклатурыТовар","ВидНоменклатурыТовар");
	ОбязательныеПоля.Вставить("ВидНоменклатурыУслуга","ВидНоменклатурыУслуга");
	ОбязательныеПоля.Вставить("ЕдиницаИзмеренияНовойНоменклатуры","ЕдиницаИзмеренияНовойНоменклатуры");
	ОбязательныеПоля.Вставить("ПричинаОтменыЗаказа","ПричинаОтменыЗаказа");
	
	Для Каждого КлючЗначение Из ОбязательныеПоля Цикл
		
		// Отметка не заполненного пустого поля формы узла обмена.
		Элемент = Форма.УсловноеОформление.Элементы.Добавить();
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(КлючЗначение.Ключ);
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(КлючЗначение.Значение);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
		
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает параметр компоновки
//
// Параметры:
//  ПараметрыКомпоновки  - ПараметрыСхемыКомпоновкиДанных - в них будет добавлен новый параметр.
//  ИмяПараметра         - Строка - имя параметра компоновки данных.
//  ЗначениеПараметра    - Произвольный - значение параметра компоновки данных.
//
Процедура УстановитьПараметрКомпоновки(ПараметрыКомпоновки, ИмяПараметра, ЗначениеПараметра) Экспорт
	
	ЭлементПараметра = ПараметрыКомпоновки.Добавить();
	ЭлементПараметра.Имя = ИмяПараметра;
	ЭлементПараметра.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	ЭлементПараметра.Значение = ЗначениеПараметра;
	
КонецПроцедуры

// Заполнение Реквизитов Адреса по строке XTDO
//  СкладАдрес - Структура, в которой необходимо представить адресную информацию о складе
//        Поля структуры: ПочтовыйИндекс, Страна, Регион, Район, НаселенныйПункт, Город,Улица, Дом, Корпус, Квартира
//  ЗначениеПолей - Значение полей адреса
Процедура ЗаполнитьСтруктуруПолейАдресаПоЗначениюПолей(СкладАдрес, ЗначениеПолей) Экспорт
	
	СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(ЗначениеПолей);
	Если ЗначениеЗаполнено(СведенияОбАдресе) Тогда
		ЗаполнитьЗначенияСвойств(СкладАдрес, СведенияОбАдресе);
		
		СкладАдрес.ПочтовыйИндекс = СведенияОбАдресе.Индекс;
		Если НЕ ЗначениеЗаполнено(СкладАдрес.Страна) Тогда
			СкладАдрес.Страна = "Россия";
		КонецЕсли;
		
		Если СведенияОбАдресе.Свойство("Здание")
			И ТипЗнч(СведенияОбАдресе.Здание) = Тип("Структура")
			И СведенияОбАдресе.Здание.Свойство("Номер") Тогда
			СкладАдрес.Дом = СведенияОбАдресе.Здание.Номер;
		КонецЕсли;
		
		Если СведенияОбАдресе.Свойство("Корпуса")
			И ТипЗнч(СведенияОбАдресе.Корпуса) = Тип("Массив")
			И СведенияОбАдресе.Корпуса.Количество() > 0 Тогда
			
			Корпуса = Новый Массив;
			Для Каждого СтрокаТЧ Из СведенияОбАдресе.Корпуса Цикл
				
				Если ВРЕГ(СтрокаТЧ.ТипКорпуса) = ВРЕГ("Строение") Тогда
					Корпуса.Добавить(СтрокаТЧ.Номер);
				Иначе
					Корпуса.Добавить(СтрокаТЧ.ТипКорпуса + " " + СтрокаТЧ.Номер);
				КонецЕсли;
				
			КонецЦикла;
			
			Если Корпуса.Количество() > 0 Тогда
				СкладАдрес.Корпус = СтрСоединить(Корпуса, ", ");
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Ищет номенклатуру по артикулу.
//
// Параметры:
//  Артикул     - Строка.
//
// Возвращаемое значение:
//   СправочникСсылка.Номенклатура, Неопределено - ссылка на найденный элемент справочника Номенклатура, Неорпределено, если не найдено.
//
Функция НоменклатураПоАртикулу(Артикул) Экспорт
	
	Если ЗначениеЗаполнено(Артикул) Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Артикул = &Артикул
		|	И НЕ Номенклатура.ЭтоГруппа");
			
		Запрос.УстановитьПараметр("Артикул", Артикул);
		
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Возврат Результат.Выгрузить()[0][0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Ищет номенклатуру по наименованию и виду номенклатуры.
//
// Параметры:
//  Наименование     - Строка - наименование, используемое для поиска.
//  ВидНоменклатуры  - СправочникСсылка.ВидыНоменклатуры - вид номенклатуры, по которому выполняется поиск
//
// Возвращаемое значение:
//   СправочникСсылка.Номенклатура, Неопределено - ссылка на найденный элемент справочника Номенклатура, Неопределено, если не найдено.
//
Функция НоменклатураПоНаименованиюИВиду(Наименование, ВидНоменклатуры) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Наименование = &Наименование
	|	И Номенклатура.ВидНоменклатуры = &ВидНоменклатуры");
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Результат.Выгрузить()[0][0];
	
КонецФункции

// Ищет номенклатуру по уникальному идентификатору
//
// Параметры:
//  Номенклатура                      - СправочникСсылка.Номенклатура - найденная номенклатура будет помещена в данный параметр.
//  ДанныеНоменклатуры                - Структура - содержит данные о номенклатуре, в частности свойство ИД, по которому будет выполняться поиск.
//  ПрикладныеПараметры               - Структура - содержит параметры узла обмена с сайтом.
//  УникальныйИдентификаторКорректен  - Булево - признак того, что уникальный идентификатор в данных номенклатуры был корректным
//
// Возвращаемое значение:
//   Булево   - признак того, что номенклатура успешно найдена
//
Функция УспешноНайденТоварПоСсылке(Номенклатура, ДанныеНоменклатуры, ПрикладныеПараметры, УникальныйИдентификаторКорректен) Экспорт
	
	Попытка
		
		УникальныйИдентификаторНоменклатуры = Новый УникальныйИдентификатор(ДанныеНоменклатуры.Ид);
		
		Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(УникальныйИдентификаторНоменклатуры);
		
		Если Не Номенклатура = Справочники.Номенклатура.ПустаяСсылка()
			И Номенклатура.ПолучитьОбъект() <> Неопределено Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	Исключение
		
		УникальныйИдентификаторКорректен = Ложь;
		
	КонецПопытки;
	
	Возврат Ложь;
	
КонецФункции

// Заполняет дополнительные реквизиты документа "Заказ клиента" соответствующие номеру и дате заказа с сайта
//
// Параметры:
//  ДокументОбъект      - ДокументОбъект.ЗаказКлиента - документ, дополнительные реквизиты которого необходимо обновить
//  РеквизитыЗаказа     - Структура - содержит информацию о данных заказа, полученных с сайта.
//  ПрикладныеПараметры - Структура - содержит информацию настройках обмена, выполненных в форме узла.
//
Процедура ЗаполнитьНомерИДатуЗаказаДополнительныеРеквизиты(ДокументОбъект, РеквизитыЗаказа, ПрикладныеПараметры) Экспорт

	Если ЗначениеЗаполнено(ПрикладныеПараметры.ДополнительныйРеквизитЗаказаКлиентаДатаЗаказаНаСайте) Тогда
		НайденныеСтроки = ДокументОбъект.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", ПрикладныеПараметры.ДополнительныйРеквизитЗаказаКлиентаДатаЗаказаНаСайте));
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаСвойства = ДокументОбъект.ДополнительныеРеквизиты.Добавить();
		Иначе
			СтрокаСвойства = НайденныеСтроки[0];
		КонецЕсли;
		СтрокаСвойства.Свойство = ПрикладныеПараметры.ДополнительныйРеквизитЗаказаКлиентаДатаЗаказаНаСайте;
		СтрокаСвойства.Значение = РеквизитыЗаказа.Дата;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПрикладныеПараметры.ДополнительныйРеквизитЗаказаКлиентаНомерЗаказаНаСайте) Тогда
		НайденныеСтроки = ДокументОбъект.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", ПрикладныеПараметры.ДополнительныйРеквизитЗаказаКлиентаНомерЗаказаНаСайте));
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаСвойства = ДокументОбъект.ДополнительныеРеквизиты.Добавить();
		Иначе
			СтрокаСвойства = НайденныеСтроки[0];
		КонецЕсли;
		СтрокаСвойства.Свойство = ПрикладныеПараметры.ДополнительныйРеквизитЗаказаКлиентаНомерЗаказаНаСайте;
		СтрокаСвойства.Значение = РеквизитыЗаказа.Номер;
	КонецЕсли;

КонецПроцедуры

// Заполняет массив реквизитов формы узла обмена с сайтами, отвечающих за настройки выгрузки товаров.
//
// Возвращаемое значение:
//   Массив  - массив реквизитов формы узла обмена с сайтами, отвечающих за настройки выгрузки товаров.
//
Функция РеквизитыОбменаТоварами() Экспорт

	МассивРеквизитов = Новый Массив;
	МассивРеквизитов.Добавить("ВыгружатьФайлы");
	МассивРеквизитов.Добавить("СписокТочекСамовывоза");

	Возврат МассивРеквизитов;

КонецФункции

// Заполняет массив реквизитов формы узла обмена с сайтами, отвечающих за настройки выгрузки товаров.
//
// Возвращаемое значение:
//   Массив  - массив реквизитов формы узла обмена с сайтами, отвечающих за настройки обмена заказами.
//
Функция РеквизитыОбменаЗаказами() Экспорт
	
	МассивРеквизитов = Новый Массив;
	
	МассивРеквизитов.Добавить("ДополнительныйРеквизитЗаказаКлиентаДатаЗаказаНаСайте");
	МассивРеквизитов.Добавить("ДополнительныйРеквизитЗаказаКлиентаНомерЗаказаНаСайте");
	МассивРеквизитов.Добавить("СпособИдентификацииКонтрагентов");
	МассивРеквизитов.Добавить("ВидНоменклатурыТовар");
	МассивРеквизитов.Добавить("ВидНоменклатурыУслуга");
	МассивРеквизитов.Добавить("ЕдиницаИзмеренияНовойНоменклатуры");
	МассивРеквизитов.Добавить("ГруппаДляНовойНоменклатуры");
	МассивРеквизитов.Добавить("Соглашение");
	МассивРеквизитов.Добавить("Склад");
	МассивРеквизитов.Добавить("Организация");
	МассивРеквизитов.Добавить("Менеджер");
	МассивРеквизитов.Добавить("ПричинаОтменыЗаказа");
	МассивРеквизитов.Добавить("СоответствиеСтатусовЗаказов");
	МассивРеквизитов.Добавить("СоответствиеФормОплат");
	МассивРеквизитов.Добавить("ЗагружатьФормыОплаты");
	МассивРеквизитов.Добавить("СоздаватьПартнеровДляНовыхКонтрагентов");
	МассивРеквизитов.Добавить("ГруппаДоступаПартнеров");
	МассивРеквизитов.Добавить("ОнлайнОплаты");
	МассивРеквизитов.Добавить("СоответствиеОнлайнОплат");
	
	Возврат МассивРеквизитов;
	
КонецФункции

// Создает нового контрагента
//
// Параметры:
//  ДанныеКонтрагента        - Структура - содержит данные покупателя с сайта.
//  ПрикладныеПараметры      - Структура - содержит информацию настройках обмена, выполненных в форме узла.
//  ОписаниеОшибки           - Строка - в нее записывается текст ошибки, которая может возникнуть при создании нового контрагента.
//  СтруктураСвойстваЗаказа  - Структура - содержит свойства заказа с сайта.
//
// Возвращаемое значение:
//   СправочникСсылка.Контрагент   - ссылка на вновь созданного контрагента
//
Функция СоздатьКонтрагента(ДанныеКонтрагента, ПрикладныеПараметры, ОписаниеОшибки, СтруктураСвойстваЗаказа) Экспорт
	
	НовыйКонтрагент                     = Справочники.Контрагенты.СоздатьЭлемент(); 
	
	ЗаполнитьЗначенияСвойств(НовыйКонтрагент, ДанныеКонтрагента);
	
	ПризнакЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
	
	Если Не ДанныеКонтрагента.ЮрЛицо И ЗначениеЗаполнено(ДанныеКонтрагента.ИНН) Тогда
		
		ПризнакЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель;
		
	ИначеЕсли Не ДанныеКонтрагента.ЮрЛицо И Не ЗначениеЗаполнено(ДанныеКонтрагента.ИНН) Тогда
		
		ПризнакЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
		
	КонецЕсли;
	
	НовыйКонтрагент.ЮрФизЛицо          = ПризнакЮрФизЛицо;
	НовыйКонтрагент.Наименование       = ДанныеКонтрагента.Наименование;
	НовыйКонтрагент.НаименованиеПолное = ?(ДанныеКонтрагента.ЮрЛицо, ДанныеКонтрагента.ОфициальноеНаименование, ДанныеКонтрагента.ПолноеНаименование);
	
	Для Каждого СтрокаИнформации Из ДанныеКонтрагента.ИнформацияПоКонтрагенту Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаИнформации.Представление) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВРег(СтрокаИнформации.Вид) = ВРег(НСтр("ru = 'Фактический адрес'")) Тогда
			
			ДобавитьКонтактнуюИнформацию(НовыйКонтрагент,
			                             Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента,
			                             Перечисления.ТипыКонтактнойИнформации.Адрес,
			                             СтрокаИнформации.Представление);
			
		ИначеЕсли ВРег(СтрокаИнформации.Вид) =  ВРег(НСтр("ru = 'Юридический адрес'")) Тогда
			
			ДобавитьКонтактнуюИнформацию(НовыйКонтрагент,
			                             Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента,
			                             Перечисления.ТипыКонтактнойИнформации.Адрес,
			                             СтрокаИнформации.Представление);
			
		ИначеЕсли ВРег(СтрокаИнформации.Вид) =  ВРег(НСтр("ru = 'ТелефонРабочий'")) Тогда
			
			ДобавитьКонтактнуюИнформацию(НовыйКонтрагент,
			                             Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента,
			                             Перечисления.ТипыКонтактнойИнформации.Телефон,
			                             СтрокаИнформации.Представление);
			
		ИначеЕсли ВРег(СтрокаИнформации.Вид) =  ВРег(НСтр("ru = 'Почта'")) Тогда
			
			ДобавитьКонтактнуюИнформацию(НовыйКонтрагент,
			                             Справочники.ВидыКонтактнойИнформации.EmailКонтрагента,
			                             Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,
			                             СтрокаИнформации.Представление);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов")
		ИЛИ ПрикладныеПараметры.СоздаватьПартнеровДляНовыхКонтрагентов Тогда
		
		НовыйКонтрагент.Партнер = ВновьСозданныйПартнер(ДанныеКонтрагента,
		                                                ПрикладныеПараметры);
		
	Иначе
		
		НовыйКонтрагент.Партнер = Справочники.Партнеры.НеизвестныйПартнер;
		
	КонецЕсли;
		
	НовыйКонтрагент.Записать();
	
	Если ДанныеКонтрагента.Свойство("РасчетныеСчета") И ДанныеКонтрагента.РасчетныеСчета.Количество() > 0 Тогда
		
		ВалютаРеглУчета = ЗначениеНастроекПовтИсп.БазоваяВалютаПоУмолчанию();
		
		Для Каждого РасчетныйСчет Из ДанныеКонтрагента.РасчетныеСчета Цикл
			
			ДанныеБанка = Новый Структура;
			ДанныеБанка.Вставить("SWIFT","");
			ДанныеБанка.Вставить("Адрес","");
			ДанныеБанка.Вставить("БИК","");
			ДанныеБанка.Вставить("Город","");
			ДанныеБанка.Вставить("КоррСчет","");
			ДанныеБанка.Вставить("Наименование","");
			ЗаполнитьЗначенияСвойств(ДанныеБанка, РасчетныйСчет.ДанныеБанка);
			
			Если ПустаяСтрока(РасчетныйСчет.НомерСчета)
				Или ПустаяСтрока(ДанныеБанка.БИК)
				Или ПустаяСтрока(ДанныеБанка.КоррСчет) Тогда
				Продолжить;
			КонецЕсли;
			
			НовыйСчет = Справочники.БанковскиеСчетаКонтрагентов.СоздатьЭлемент();
			НовыйСчет.НомерСчета            = РасчетныйСчет.НомерСчета;
			НовыйСчет.Владелец              = НовыйКонтрагент.Ссылка;
			НовыйСчет.ВалютаДенежныхСредств = ВалютаРеглУчета;
			
			Запрос = Новый Запрос;
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	КлассификаторБанков.Ссылка
			|ИЗ
			|	Справочник.КлассификаторБанков КАК КлассификаторБанков
			|ГДЕ
			|	КлассификаторБанков.Код = &БИК
			|	ИЛИ КлассификаторБанков.КоррСчет = &КоррСчет";
			
			Запрос.УстановитьПараметр("БИК", ДанныеБанка.БИК);
			Запрос.УстановитьПараметр("КоррСчет", ДанныеБанка.КоррСчет);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				НовыйСчет.Банк = Выборка.Ссылка;
			Иначе
				
				Если ПустаяСтрока(ДанныеБанка.КоррСчет)
					Или ПустаяСтрока(ДанныеБанка.Наименование) Тогда
					Продолжить;
				КонецЕсли;
				
				НовыйСчет.РучноеИзменениеРеквизитовБанка = Истина;
				НовыйСчет.НаименованиеБанка = ДанныеБанка.Наименование;
				НовыйСчет.ГородБанка        = ДанныеБанка.Город;
				НовыйСчет.КоррСчетБанка     = ДанныеБанка.КоррСчет;
				НовыйСчет.СВИФТБанка        = ДанныеБанка.SWIFT;
				НовыйСчет.АдресБанка        = ДанныеБанка.Адрес;
				
			КонецЕсли;
			
			НовыйСчет.Записать();
		
		КонецЦикла;
		
	КонецЕсли;
	
	СтруктураСвойстваЗаказа.Партнер = НовыйКонтрагент.Партнер;
	
	Возврат НовыйКонтрагент.Ссылка;
	
КонецФункции

// Заполняет табличную часть "Товары" документа "Заказ клиента".
//
// Параметры:
//  Документ            - ДокументОбъект.ЗаказКлиента - документ, чья табличная часть "Товары" будет заполнена.
//  ТаблицаТоваровСайт  - ТаблицаЗначений - таблица заказанных товаров по данным с сайта.
//  ПрикладныеПараметры - Структура - содержит информацию настройках обмена, выполненных в форме узла.
//
Процедура ЗаполнитьТабличнуюЧастьДокумента(Документ, ТаблицаТоваровСайт, ПрикладныеПараметры) Экспорт
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Документ);
	СтруктураПересчетаЦены  = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаЦеныСкидкиВПродажахВТЧ(Документ, 
		Документ.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию"));
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	
	СтруктураДействий.Вставить(
		"ПроверитьЗаполнитьСклад",
		ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Документ, Ложь));
	
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьСодержание", Новый Структура("ЗаполнятьДляВсехУслуг", Истина));
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьЦенуСкидкуПоСуммеВПродажах", СтруктураПересчетаЦены);
	
	ПараметрыДокумента = Документы.ЗаказКлиента.ПараметрыДокументаДляДействийОбеспечения(Документ);
	ПоляСтрокой = "ВариантОбеспечения";
	ОбеспечениеВДокументахКлиентСервер.ДобавитьДействияОбеспечения(СтруктураДействий, ПоляСтрокой, ПараметрыДокумента);
	
	СтруктураДействийНабор = Новый Структура;
	СтруктураДействийНабор.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействийНабор.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействийНабор.Вставить("ПересчитатьСумму");
		
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Документ.Товары.Очистить();
	ТаблицаТоварыДокумент = Документ.Товары.Выгрузить();
	ТаблицаТоварыДокумент.Колонки.Добавить("ТипНоменклатуры", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыНоменклатуры"));
	
	//Параметры, используемые для набора
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Дата", Документ.Дата);
	ДополнительныеПараметры.Вставить("Организация", Документ.Организация);
	ДополнительныеПараметры.Вставить("Соглашение", Документ.Соглашение);
	ДополнительныеПараметры.Вставить("Валюта", Документ.Валюта);
		
	Для Каждого ТекСтрока Из ТаблицаТоваровСайт Цикл
		
		ЭтоНабор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекСтрока.Номенклатура, "ТипНоменклатуры") = 
			Перечисления.ТипыНоменклатуры.Набор;
			
		Если ЭтоНабор Тогда
			ТоварыНабор = Документ.Товары.ВыгрузитьКолонки();	
				
			ПараметрыКомплектующих = ПодборТоваровКлиентСервер.ПараметрыТовара();
			ЗаполнитьЗначенияСвойств(ПараметрыКомплектующих, ТекСтрока);
			ПараметрыКомплектующих.КоличествоУпаковок   = ПараметрыКомплектующих.Количество;
			ПараметрыКомплектующих.НоменклатураНабора   = ТекСтрока.Номенклатура;
			ПараметрыКомплектующих.ХарактеристикаНабора = ТекСтрока.Характеристика;
			ПараметрыКомплектующих.Вставить("ВариантКомплектацииНоменклатуры", Неопределено);
			
			ДополнительныеПараметры.Вставить("Цена", ТекСтрока.Цена);
			
			ПодобранныеТовары = НаборыВызовСервера.Комплектующие(ПараметрыКомплектующих, ДополнительныеПараметры);
			Для Каждого ПодобранныйТовар Из ПодобранныеТовары Цикл
				
				НоваяСтрока = ТоварыНабор.Добавить();
				НоваяСтрока.СтавкаНДС = СтавкаНДСПоЗначениюПриЗагрузке(ТекСтрока.СтавкаНДС);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ПодобранныйТовар);
				
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействийНабор, Неопределено);
				
			КонецЦикла;
						
			КоэффициентПересчета = ТекСтрока.Сумма / ТоварыНабор.Итог("Сумма");
			
			//Перенесем товары из набора в табличную часть
			ПогрешностьСтоимости = ТекСтрока.Сумма;
			ПогрешностьНДС       = ?(ЗначениеЗаполнено(ТекСтрока.СуммаНДС), ТекСтрока.СуммаНДС, 0);
			Для Каждого СтрНабора из ТоварыНабор Цикл
				НоваяСтрока = ТаблицаТоварыДокумент.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрНабора);
				Если КоэффициентПересчета <> 1 Тогда
					НоваяСтрока.Сумма = НоваяСтрока.Сумма * КоэффициентПересчета;
					НоваяСтрока.СуммаНДС = НоваяСтрока.СуммаНДС * КоэффициентПересчета;
				КонецЕсли;
				
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
				
				ПогрешностьСтоимости = ПогрешностьСтоимости - НоваяСтрока.Сумма;
				ПогрешностьНДС       = ПогрешностьНДС - НоваяСтрока.СуммаНДС;
			КонецЦикла;
			
			//Погрешность отнесем на стоимость последнего товара в наборе
			Если ПогрешностьСтоимости <> 0 или ПогрешностьНДС <> 0 Тогда
				НоваяСтрока.Сумма     = НоваяСтрока.Сумма + ПогрешностьСтоимости;  	
				НоваяСтрока.СуммаНДС  = НоваяСтрока.СуммаНДС + ПогрешностьНДС;
				НоваяСтрока.СуммаСНДС = НоваяСтрока.Сумма + ?(Документ.ЦенаВключаетНДС, 0, НоваяСтрока.СуммаНДС);
			КонецЕсли;
		Иначе
			
			НоваяСтрока = ТаблицаТоварыДокумент.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			НоваяСтрока.СтавкаНДС = СтавкаНДСПоЗначениюПриЗагрузке(ТекСтрока.СтавкаНДС);
			НоваяСтрока.КоличествоУпаковок = ТекСтрока.Количество;
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Документ.Товары.Загрузить(ТаблицаТоварыДокумент);
		
КонецПроцедуры

// Ищет валюту по коду валюту, переданному с сайта.
// Если валюту найти не удалось, получает валюту регламентированного учета.
//
// Параметры:
//  Валюта           - СправочникСсылка.Валюта - в данный параметр устанавливается найденная валюта
//  КодВалютыСтрока  - Строка - код валюты, по которому выполняется поиск.
//
Процедура ОбработатьВалютуXML(Валюта, КодВалютыСтрока) Экспорт
	
	Валюта = Справочники.Валюты.НайтиПоНаименованию(КодВалютыСтрока);
	
	Если НЕ ЗначениеЗаполнено(Валюта) Тогда
		Валюта = ЗначениеНастроекПовтИсп.БазоваяВалютаПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

// Получает значение ставки НДС по строковому значению, переданному с сайта.
//
// Параметры:
//  СтавкаНалогаСтрока - Строка - строковое представление ставки НДС
//
// Возвращаемое значение:
//   ПеречислениеСсылка.СтавкиНДС   - найденное по строковому описанию значение ставки НДС
//
Функция СтавкаНДСПоЗначениюПриЗагрузке(СтавкаНалогаСтрока) Экспорт
	
	Если ТипЗнч(СтавкаНалогаСтрока) = Тип("Число") Тогда
		СтавкаНалогаСтрока = Строка(СтавкаНалогаСтрока);
	КонецЕсли;
	
	СоответствиеСтавокНСД = УчетНДСРФ.СоответствиеСтавокНДССтроковымЗначениям();
	
	СтавкаНДС = СоответствиеСтавокНСД.Получить(СтавкаНалогаСтрока);
	
	Если СтавкаНДС = Неопределено Тогда
		СтавкаНДС = Справочники.СтавкиНДС.БезНДС;
	КонецЕсли;
	
	Возврат СтавкаНДС;
		
КонецФункции

// Возвращает пустую таблицу значений, в которую будут добавляться дополнительные поля отбора
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Добавляемые поля отбора
//
Функция ДобавляемыеПоляОтбора() Экспорт
	
	ПоляОтбора = Новый ТаблицаЗначений;
	
	ПоляОтбора.Колонки.Добавить("Наименование");
	ПоляОтбора.Колонки.Добавить("Синоним");
	ПоляОтбора.Колонки.Добавить("ТипЗначения");
	ПоляОтбора.Колонки.Добавить("Отбор");
	
	Возврат ПоляОтбора;
	
КонецФункции

// Возвращает массив структур по которым происходит отбор соглашения
// 
// Возвращаемое значение:
//  Массив из Структура
//
Функция ПараметрыОтбораСоглашения() Экспорт
	
	ОтборСоглашения = Новый Массив;
	ОтборСоглашения.Добавить(Новый Структура("ИмяПоля, ЗначениеОтбора", "Типовое", Истина));
	ОтборСоглашения.Добавить(Новый Структура("ИмяПоля, ЗначениеОтбора","ДоступноВнешнимПользователям", Истина));
	ОтборСоглашения.Добавить(Новый Структура("ИмяПоля, ЗначениеОтбора","Статус",
		Перечисления.СтатусыСоглашенийСКлиентами.Действует));
	ОтборСоглашения.Добавить(Новый Структура("ИмяПоля, ЗначениеОтбора","ХозяйственнаяОперация",
		Перечисления.ХозяйственныеОперации.РеализацияКлиенту));
		
	Возврат ОтборСоглашения;
		
КонецФункции

// Возвращает массив структур по которым происходит отбор сегмента номенклатуры
// 
// Возвращаемое значение:
//  Массив из Структура
//
Функция ПараметрыОтбораСегмента() Экспорт
	
	ЗначенияОтбора = Новый Массив;
	ЗначенияОтбора.Добавить(Перечисления.СпособыФормированияСегментов.ФормироватьВручную);
	ЗначенияОтбора.Добавить(Перечисления.СпособыФормированияСегментов.ПериодическиОбновлять);
	
	ОтборСегмента = Новый Массив;
	ОтборСегмента.Добавить(Новый Структура("ИмяПоля, ЗначениеОтбора", "СпособФормирования", ЗначенияОтбора));
	
	Возврат ОтборСегмента;

КонецФункции

Процедура ФормаУзлаОбменаСоглашениеПриИзмененииНаСервере(Форма, ЭтоЧтение = Ложь) Экспорт
	
	ДанныеСоглашения = Новый Структура("Склад, ЭтоГруппаСкладов", Неопределено, Ложь);
	Если ЗначениеЗаполнено(Форма.Соглашение) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	СоглашенияСКлиентами.Склад,
		|	ЕСТЬNULL(Склады.ЭтоГруппа, ЛОЖЬ) КАК ЭтоГруппаСкладов,
		|	СоглашенияСКлиентами.Менеджер
		|ИЗ
		|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
		|		ПО СоглашенияСКлиентами.Склад = Склады.Ссылка
		|ГДЕ
		|	СоглашенияСКлиентами.Ссылка = &Соглашение";
		
		Запрос.УстановитьПараметр("Соглашение", Форма.Соглашение);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			ЗаполнитьЗначенияСвойств(ДанныеСоглашения, Выборка);
			Если НЕ ЭтоЧтение И НЕ ЗначениеЗаполнено(Форма.Менеджер) Тогда
				Форма.Менеджер = Выборка.Менеджер;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	НеПолучатьГруппыСкладов = Истина;
	
	СамообслуживаниеСервер.ЗаполнитьСписокВыбораСклада(ДанныеСоглашения, Форма.Элементы.Склад, НеПолучатьГруппыСкладов);
	
	Если ЗначениеЗаполнено(ДанныеСоглашения.Склад) Тогда
		
		Если НЕ (НеПолучатьГруппыСкладов И ДанныеСоглашения.ЭтоГруппаСкладов) Тогда
			Форма.Склад = ДанныеСоглашения.Склад;
		КонецЕсли;
		
		Если ДанныеСоглашения.ЭтоГруппаСкладов Тогда
			Форма.Элементы.Склад.Доступность = Истина;
			
		Иначе
			Форма.Элементы.Склад.Доступность = Ложь;
		КонецЕсли;
		
	Иначе
		Форма.Элементы.Склад.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриСозданииНаСервереФормаСоздатьСайт(Форма) Экспорт
	
	// Устанавливается тип значения поля ВидЦены
	СоглашениеТип = Новый ОписаниеТипов("СправочникСсылка.СоглашенияСКлиентами");
	Форма.Элементы.ВидЦен.ОграничениеТипа.ПривестиЗначение(СоглашениеТип);
	Форма.Элементы.ВидЦен.ВыбиратьТип = Ложь;
	Форма.Элементы.ВидЦен.Заголовок = НСтр("ru = 'Соглашение'");
	Форма.Элементы.ВидЦен.ПараметрыВыбора = ПараметрыВыбораСоглашения();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СоглашенияСКлиентами.Ссылка КАК Соглашение
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
	|ГДЕ
	|	СоглашенияСКлиентами.СегментПартнеров = &СегментПартнеров
	|	И СоглашенияСКлиентами.Статус = &Статус
	|	И СоглашенияСКлиентами.Типовое = &Типовое
	|	И СоглашенияСКлиентами.ДоступноВнешнимПользователям = &ДоступноВнешнимПользователям
	|	И СоглашенияСКлиентами.ХозяйственнаяОперация = &ХозяйственнаяОперация";
	
	Запрос.УстановитьПараметр("СегментПартнеров", Справочники.СегментыПартнеров.ПустаяСсылка());
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыСоглашенийСКлиентами.Действует);
	Запрос.УстановитьПараметр("Типовое", Истина);
	Запрос.УстановитьПараметр("ДоступноВнешнимПользователям", Истина);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.РеализацияКлиенту);
	
	Запрос.Выполнить();
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		Форма.ВидЦен = Выборка.Соглашение;
	Иначе
		Форма.ВидЦен = Справочники.СоглашенияСКлиентами.ПустаяСсылка();
	КонецЕсли;
	
	
КонецПроцедуры

Функция МассивДопустимыхРасширенийИзображений() Экспорт

	МассивДопустимыхРасширенийИзображений = Новый Массив;
	МассивДопустимыхРасширенийИзображений.Добавить("gif");
	МассивДопустимыхРасширенийИзображений.Добавить("jpg");
	МассивДопустимыхРасширенийИзображений.Добавить("jpeg");
	МассивДопустимыхРасширенийИзображений.Добавить("bmp");
	МассивДопустимыхРасширенийИзображений.Добавить("png");
	
	Возврат МассивДопустимыхРасширенийИзображений;
	
КонецФункции

// Возвращает значение реквизита, который был добавлен на форму узла плана обмена.
// Добавленный реквизит формы не является реквизитом плана обмена.
//
// Параметры:
//  Узел - Структура - параметры прикладного решения, размещенные в форме узла плана обмена.
//  ИмяРеквизита - Строка - Имя реквизита узла плана обмена
// 
// Возвращаемое значение:
//  Неопределено, Булево, Дата, Строка, ЛюбаяСсылка - Значение реквизита, которое было выбрано в форме узла
//
Функция РеквизитПрикладногоРешения(Узел, ИмяРеквизита) Экспорт
	
	СохраненныеПараметрыПрикладногоРешения = Узел.ПараметрыПрикладногоРешения.Получить();
	Если Не ТипЗнч(СохраненныеПараметрыПрикладногоРешения) = Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыПрикладногоРешения = Неопределено;
	Если Не СохраненныеПараметрыПрикладногоРешения.Свойство("ПараметрыПрикладногоРешения", ПараметрыПрикладногоРешения) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрПрикладногоРешения = Неопределено;
	Если Не ПараметрыПрикладногоРешения.Свойство(ИмяРеквизита,ПараметрПрикладногоРешения) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПараметрПрикладногоРешения;
	
КонецФункции

// Выполняет дополнительные процедуры после записи заказа.
//
// Параметры:
//   ЗаказПокупателя - ДокументСсылка - ссылка на документ ЗаказПокупателя.
//   ПрикладныеПараметры - Структура - прикладные параметры обмена.
//   СвойстваЗаказа - Соответствие - содержит строковое представления свойств (ключ) и значений (значение) заказа.
//
Процедура ПослеЗаписиЗаказа(ЗаказПокупателя, ПрикладныеПараметры, СвойстваЗаказа) Экспорт
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказПокупателя, "Проведен") Тогда
		
		ДополнительныеСведенияЗаказа = Новый Структура;
		ДозаполнитьРеквизитыЗаказа(ДополнительныеСведенияЗаказа, СвойстваЗаказа, ПрикладныеПараметры);
		
		Если ДополнительныеСведенияЗаказа.Оплачен И Не ДополнительныеСведенияЗаказа.Эквайер = Неопределено Тогда
			
			ДокументОплаты = Документы.ОперацияПоПлатежнойКарте.СоздатьДокумент();
			ДокументОплаты.Заполнить(ЗаказПокупателя);
			Если ДокументОплаты.СуммаДокумента = 0 Тогда
				Возврат;
			КонецЕсли;
			ДокументОплаты.Дата = ТекущаяДатаСеанса();
			РеквизитыЗаказаПокупателя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗаказПокупателя, "Контрагент, Партнер");
			ДокументОплаты.Партнер = РеквизитыЗаказаПокупателя.Партнер;
			ДокументОплаты.Контрагент = РеквизитыЗаказаПокупателя.Контрагент;
			ДокументОплаты.ДоговорЭквайринга = ДополнительныеСведенияЗаказа.ДоговорЭквайринга;
			ДокументОплаты.Записать(РежимЗаписиДокумента.Запись);
			Если ДокументОплаты.ПроверитьЗаполнение() Тогда
				ДокументОплаты.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
			
			Если ПрикладныеПараметры.ОнлайнОплаты 
				И ДополнительныеСведенияЗаказа.ТребуетсяФискализация 
				И ДокументОплаты.Проведен Тогда
				ПараметрыОперацииФискализацииЧека = ФормированиеПараметровФискальногоЧекаСервер.ПараметрыОперацииФискализацииЧекаПакетныйРежим(ДокументОплаты.Ссылка);
				ПараметрыОперацииФискализацииЧека.ИдентификаторФискальнойЗаписи = Строка(Новый УникальныйИдентификатор);
				ОборудованиеЧекопечатающиеУстройстваВызовСервера.ДобавитьЧекВОчередьЧековККТ(ПараметрыОперацииФискализацииЧека);
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПараметрыВыбораСоглашения()
	
	ПараметрыСоглашения = Новый Массив;
	ПараметрыСоглашения.Добавить(Новый ПараметрВыбора("Отбор.СегментПартнеров",Справочники.СегментыПартнеров.ПустаяСсылка()));
	ПараметрыСоглашения.Добавить(Новый ПараметрВыбора("Отбор.ДоступноВнешнимПользователям",Истина));
	ПараметрыСоглашения.Добавить(Новый ПараметрВыбора("Отбор.Типовое",Истина));
	ПараметрыСоглашения.Добавить(Новый ПараметрВыбора("Отбор.Статус",Перечисления.СтатусыСоглашенийСКлиентами.Действует));
	ПараметрыСоглашения.Добавить(Новый ПараметрВыбора("Отбор.ХозяйственнаяОперация",Перечисления.ХозяйственныеОперации.РеализацияКлиенту));
	ПараметрыВыбораСоглашения = Новый ФиксированныйМассив(ПараметрыСоглашения);
	
	Возврат ПараметрыВыбораСоглашения;
	
КонецФункции

Функция ВновьСозданныйПартнер(ДанныеКонтрагента , Параметры)
	
	ПартнерОбъект = Справочники.Партнеры.СоздатьЭлемент();
	ПартнерОбъект.Клиент             = Истина;
	ПартнерОбъект.ЮрФизЛицо          = ?(ДанныеКонтрагента.Юрлицо, Перечисления.КомпанияЧастноеЛицо.Компания, Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо);
	ПартнерОбъект.ДатаРегистрации    = ТекущаяДатаСеанса();
	ПартнерОбъект.Комментарий        = НСтр("ru = 'Создан автоматически при импорте заказов с сайта'");
	ПартнерОбъект.Наименование       = ДанныеКонтрагента.Наименование;
	ПартнерОбъект.НаименованиеПолное =?(ДанныеКонтрагента.ЮрЛицо, ДанныеКонтрагента.ОфициальноеНаименование, ДанныеКонтрагента.ПолноеНаименование);
	ПартнерОбъект.ОсновнойМенеджер   = Параметры.Менеджер;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьГруппыДоступаПартнеров") Тогда
		ПартнерОбъект.ГруппаДоступа = Параметры.ГруппаДоступаПартнеров;
	КонецЕсли;
	
	Для Каждого СтрокаИнформации Из ДанныеКонтрагента.ИнформацияПоКонтрагенту Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаИнформации.Представление) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВРег(СтрокаИнформации.Вид) = ВРег(НСтр("ru = 'Фактический адрес'")) Тогда
			
			ДобавитьКонтактнуюИнформацию(ПартнерОбъект,
			                             Справочники.ВидыКонтактнойИнформации.АдресПартнера,
			                             Перечисления.ТипыКонтактнойИнформации.Адрес,
			                             СтрокаИнформации.Представление);
			
		ИначеЕсли ВРег(СтрокаИнформации.Вид) =  ВРег(НСтр("ru = 'ТелефонРабочий'")) Тогда
			
			ДобавитьКонтактнуюИнформацию(ПартнерОбъект,
			                             Справочники.ВидыКонтактнойИнформации.ТелефонПартнера,
			                             Перечисления.ТипыКонтактнойИнформации.Телефон,
			                             СтрокаИнформации.Представление);
			
		ИначеЕсли ВРег(СтрокаИнформации.Вид) =  ВРег(НСтр("ru = 'Почта'")) Тогда
			
			ДобавитьКонтактнуюИнформацию(ПартнерОбъект,
			                             Справочники.ВидыКонтактнойИнформации.EmailПартнера,
			                             Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,
			                             СтрокаИнформации.Представление);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПартнерОбъект.Записать();
	
	Возврат ПартнерОбъект.Ссылка;
	
КонецФункции

Процедура ДобавитьКонтактнуюИнформацию(Объект, ВидКИ, ТипКИ, Представление)
	
	ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(Представление, ВидКИ);
	УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Объект, ЗначенияПолей, ВидКИ, ТипКИ);
	
КонецПроцедуры

Процедура ДозаполнитьРеквизитыЗаказа(РеквизитыЗаказа, СвойстваЗаказа, ПрикладныеПараметры)
	
	РеквизитыЗаказа.Вставить("Оплачен",					Ложь);
	РеквизитыЗаказа.Вставить("ОплатаКартой",			Ложь);
	РеквизитыЗаказа.Вставить("ТребуетсяФискализация",	Ложь);
	РеквизитыЗаказа.Вставить("Эквайер",					Неопределено);
	РеквизитыЗаказа.Вставить("ДоговорЭквайринга",		Неопределено);
	
	ЗаказОплачен	= НСтр("ru = 'Заказ оплачен'");
	МетодОплаты		= НСтр("ru = 'Метод оплаты'");
	МетодОплатыИД	= НСтр("ru = 'Метод оплаты ИД'");
	
	Если НЕ СвойстваЗаказа.Получить(ЗаказОплачен) = Неопределено 
		И Булево(СвойстваЗаказа.Получить(ЗаказОплачен)) Тогда
		РеквизитыЗаказа.Оплачен = Истина;
	КонецЕсли;
	
	Если НЕ СвойстваЗаказа.Получить(МетодОплаты) = Неопределено 
		И СвойстваЗаказа.Получить(МетодОплаты) =  НСтр("ru = 'Оплачен платежной картой'")  Тогда
		РеквизитыЗаказа.ОплатаКартой = Истина;
	КонецЕсли;
	
	Если НЕ СвойстваЗаказа.Получить(МетодОплатыИД) = Неопределено Тогда
		МетодОплатыИД = СвойстваЗаказа.Получить(МетодОплатыИД);
		МетодОплаты   = СвойстваЗаказа.Получить(МетодОплаты);
		Если Не МетодОплатыИД = Неопределено Тогда
			ЗначениеОнлайнОплаты = ПрикладныеПараметры.СоответствиеОнлайнОплат.Найти(МетодОплатыИД, "КодОплатыНаСайте");
			Если ЗначениеОнлайнОплаты = Неопределено Тогда
				ЗначениеОнлайнОплаты = ПрикладныеПараметры.СоответствиеОнлайнОплат.Найти(МетодОплаты, "ВидОплатыНаСайте");
			КонецЕсли;
			Если Не ЗначениеОнлайнОплаты = Неопределено Тогда
				РеквизитыЗаказа.Эквайер = ЗначениеОнлайнОплаты.Эквайер;
				РеквизитыЗаказа.ДоговорЭквайринга = ЗначениеОнлайнОплаты.ДоговорЭквайринга;
				РеквизитыЗаказа.ТребуетсяФискализация = ЗначениеОнлайнОплаты.ФискализироватьОплату;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

