
#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	//++ Локализация


	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый документ.
//  Отказ - Булево - Признак проведения документа.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то проведение документа выполнено не будет.
//  РежимПроведения - РежимПроведенияДокумента - В данный параметр передается текущий режим проведения.
//
Процедура ОбработкаПроведения(Объект, Отказ, РежимПроведения) Экспорт
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то будет выполнен отказ от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Объект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	//++ Локализация


	//-- Локализация
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект.
//  ДанныеЗаполнения - Произвольный - Значение, которое используется как основание для заполнения.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаЗаполнения(Объект, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то запись выполнена не будет и будет вызвано исключение.
//
Процедура ОбработкаУдаленияПроведения(Объект, Отказ) Экспорт
	
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то запись выполнена не будет и будет вызвано исключение.
//  РежимЗаписи - РежимЗаписиДокумента - В параметр передается текущий режим записи документа. Позволяет определить в теле процедуры режим записи.
//  РежимПроведения - РежимПроведенияДокумента - В данный параметр передается текущий режим проведения.
//
Процедура ПередЗаписью(Объект, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина, то запись выполнена не будет и будет вызвано исключение.
//
Процедура ПриЗаписи(Объект, Отказ) Экспорт
	
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  ОбъектКопирования - ДокументОбъект.РаспределениеПрочихЗатрат - Исходный документ, который является источником копирования.
//
Процедура ПриКопировании(Объект, ОбъектКопирования) Экспорт
	
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	
КонецПроцедуры

// Добавляет команду создания документа "Авансовый отчет".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Процедура ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт


КонецПроцедуры

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	
КонецПроцедуры

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	
КонецПроцедуры

#КонецОбласти


#Область Заполнение

// Установить признаки БУ и НУ.
// 
// Параметры:
//  Объект - ДокументОбъект.РаспределениеПрочихЗатрат - Документ распределения.
//  ВидУчета - Строка - Вид учета
//  НастройкиРаспределения - Структура - Настройки распределения.
Процедура УстановитьПризнакиБУиНУ(Объект, ВидУчета, НастройкиРаспределения, НастройкиБУиНУСоответствуют) Экспорт
	
	
	Возврат; // Чтобы метод не был пустым без НДД. 
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеДокументов

// Подобрать подходящий документ.
// 
// Параметры:
//  ДокументРаспределения - ДокументОбъект.РаспределениеПрочихЗатрат - Документ распределения.
//  ВидУчета - Строка - Вид учета.
//  ПараметрыЗаполнения - Структура - Параметры заполнения документа.
// 
// Возвращаемое значение:
//  Булево - Признак того, что документ найден.
Функция ПодобратьПодходящийДокумент(ДокументРаспределения, ВидУчета, ПараметрыЗаполнения) Экспорт
	
	ДокументНайден = Ложь;
	
	Если ДокументРаспределения.РегламентированныйУчет И ДокументРаспределения.НалоговыйУчет Тогда
		ДокументНайден = ПроверитьСоответствиеНастроекРеглНалНДД(ПараметрыЗаполнения);
	ИначеЕсли ДокументРаспределения.НалоговыйУчет Тогда
		ДокументНайден = ПроверитьСоответствиеНастроекНалНДД(ПараметрыЗаполнения);
	ИначеЕсли ДокументРаспределения.РегламентированныйУчет Тогда
		ДокументНайден = ПроверитьСоответствиеНастроекРеглНДД(ПараметрыЗаполнения);
	КонецЕсли;
	
	Возврат ДокументНайден;
	
КонецФункции

// Формирует документы распределения затрат при выполнении закрытия месяца.
//
// Параметры:
//	ПараметрыОбработчика - Структура -
//	ТаблицаСтатей - ТаблицаЗначений -
//
Процедура ФормированиеДокументовРаспределениеПрочихЗатрат(ПараметрыОбработчика, ТаблицаСтатей) Экспорт
	
	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
	ПараметрыРаспределения = Новый Структура("ПараметрыРасходов", ТаблицаСтатей);
	ПараметрыРаспределения.Вставить("МассивОрганизаций", ПараметрыРасчета.МассивОрганизаций);
	ПараметрыРаспределения.Вставить("ПериодРегистрации", ПараметрыРасчета.ПериодРегистрации);
	
	Попытка
		РезультатыФормирования = Документы.РаспределениеПрочихЗатрат.СформироватьДокументы(ПараметрыРаспределения, Неопределено);
	Исключение
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось создать документы распределения расходов за период %1 из-за ошибки:
				|%2'", ОбщегоНазначения.КодОсновногоЯзыка()),
			РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПараметрыРасчета.ПериодРегистрации),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗакрытиеМесяцаСервер.ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
			ПараметрыОбработчика,
			ТекстОшибки);
		
	КонецПопытки;
	
	Для Каждого РезультатПоОрганизации Из РезультатыФормирования Цикл
		
		ДетализацияФормирования = РезультатПоОрганизации.Значение;
		
		Если Не ДетализацияФормирования.ОписаниеОшибок.Количество() Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ОписаниеОшибки Из ДетализацияФормирования.ОписаниеОшибок Цикл
			ЗакрытиеМесяцаСервер.ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
				ПараметрыОбработчика,
				ОписаниеОшибки.ТекстОшибки,
				РезультатПоОрганизации.Ключ,
				,
				,
				ОписаниеОшибки.СтатьяРасходов);
		КонецЦикла;
		
	КонецЦикла;
	
	Обработки.ОперацииЗакрытияМесяца.ЗарегистрироватьПроблемыРасчетаЭтапа(ПараметрыОбработчика);
	
КонецПроцедуры

// Распределяет расходы на финансовый результат при выполнении закрытия месяца.
//
// Параметры:
//	ПараметрыОбработчика - Структура -
//	ТаблицаРезультата - ХранилищеЗначения - содержит ТаблицаЗначений
//	ДокументыСНовымиДвижениями - ХранилищеЗначения - содержит ТаблицаЗначений
//
Процедура РаспределениеРасходовНаФинансовыйРезультат(ПараметрыОбработчика, ТаблицаРезультата, ДокументыСНовымиДвижениями) Экспорт
	
	Период = ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Запрос.УстановитьПараметр("ТаблицаРезультата", ТаблицаРезультата.Получить());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ РезультатРаспределения
	|ИЗ
	|	&ТаблицаРезультата КАК Т
	|";
	
	Запрос.Выполнить();
	
	Запрос.УстановитьПараметр("ДокументыСНовымиДвижениями", ДокументыСНовымиДвижениями.Получить());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.Регистратор
	|ПОМЕСТИТЬ ДокументыСНовымиДвижениями
	|ИЗ
	|	&ТаблицаРезультата КАК Т
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|";
	
	Запрос.Выполнить();
	
	Документы.РаспределениеПрочихЗатрат.РаспределитьОчереднуюПорциюРасходовНаФинансовыйРезультат(
		ПараметрыОбработчика,
		Запрос.МенеджерВременныхТаблиц,
		Период);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

// Процедура дополняет тексты запросов проведения документа.
//
// Параметры:
//  Запрос - Запрос - Общий запрос проведения документа.
//  ТекстыЗапроса - СписокЗначений - Список текстов запроса проведения.
//  Регистры - Строка, Структура - Список регистров проведения документа через запятую или в ключах структуры.
//
Процедура ДополнитьТекстыЗапросовПроведения(Запрос, ТекстыЗапроса, Регистры) Экспорт
	
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеДокументов
	
Функция ПроверитьСоответствиеНастроекРеглНалНДД(ПараметрыЗаполнения)
	
	НастройкиСоответствуют = Ложь;
	
	Возврат НастройкиСоответствуют;
	
КонецФункции

Функция ПроверитьСоответствиеНастроекРеглНДД(ПараметрыЗаполнения)
	
	НастройкиСоответствуют = Ложь;
	
	Возврат НастройкиСоответствуют;
	
КонецФункции

Функция ПроверитьСоответствиеНастроекНалНДД(ПараметрыЗаполнения)
	
	НастройкиСоответствуют = Ложь;
	
	Возврат НастройкиСоответствуют;
	
КонецФункции

#КонецОбласти

#КонецОбласти
