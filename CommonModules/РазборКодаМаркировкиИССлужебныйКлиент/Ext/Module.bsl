#Область СлужебныйПрограммныйИнтерфейс

#Область РазборКодаМаркировки

// Выполняет разбор кода маркировки.
//
// Параметры:
//   ДанныеДляРазбора - Строка, Структура из см. МенеджерОборудованияМаркировкаКлиентСервер.РазобратьСтрокуШтрихкодаGS1 - код маркировки, либо данные разбора.
//   ВидыПродукции - ПеречислениеСсылка.ВидыПродукцииИС, Массив из ПеречислениеСсылка.ВидыПродукцииИС - фильтр по виду продукции.
//   ПримечаниеКРезультатуРазбора - Структура - содержит:
//      * ИдентификаторОшибки - см. РазборКодаМаркировкиИССлужебныйКлиентСервер.ИдентификаторыОшибокРазбораКодаМаркировки
//      * ТекстОшибки - Строка
//      * РезультатРазбора - Массив из см. РазборКодаМаркировкиИССлужебныйКлиентСервер.НовыйРезультатРазбораКодаМаркировки
//   Настройки - см. НастройкиРазбораКодаМаркировки
//   ПользовательскиеПараметры - см. РазборКодаМаркировкиИССлужебныйКлиентСервер.ПользовательскиеПараметрыРазбораКодаМаркировки
//
// Возвращаемое значение:
//    - Неопределено - если код маркировки разобрать не удалось.
//    - см. РазборКодаМаркировкиИССлужебныйКлиентСервер.НовыйРезультатРазбораКодаМаркировки
//
Функция РазобратьКодМаркировки(Знач ДанныеДляРазбора, ВидыПродукции = Неопределено, ПримечаниеКРезультатуРазбора = Неопределено, Знач Настройки = Неопределено, Знач ПользовательскиеПараметры = Неопределено) Экспорт
	
	Если Настройки = Неопределено Тогда
		Настройки = РазборКодаМаркировкиИССлужебныйКлиентПовтИсп.НастройкиРазбораКодаМаркировки();
	КонецЕсли;
	
	Если ПользовательскиеПараметры = Неопределено Тогда
		ПользовательскиеПараметры = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПользовательскиеПараметрыРазбораКодаМаркировки();
	КонецЕсли;
	
	РезультатРазбора = РазборКодаМаркировкиИССлужебныйКлиентСервер.РазобратьКодМаркировки(
		ДанныеДляРазбора, ВидыПродукции, ПримечаниеКРезультатуРазбора, Настройки, РазборКодаМаркировкиИССлужебныйКлиент, ПользовательскиеПараметры);
	
	//@skip-check constructor-function-return-section
	Возврат РезультатРазбора;
	
КонецФункции

// Выполняет разбор кода маркировки.
//
// Параметры:
//   ДанныеДляРазбора - Строка, Структура из см. МенеджерОборудованияМаркировкаКлиентСервер.РазобратьСтрокуШтрихкодаGS1 - код маркировки, либо данные разбора.
//   КешНастроекРазбораКодаМаркировки - см. РазборКодаМаркировкиИССлужебныйКлиентСервер.ИнициализироватьНастройкиИспользующиеРезультатыПредыдущихРазборов.
//   ВидыПродукции - ПеречислениеСсылка.ВидыПродукцииИС, Массив из ПеречислениеСсылка.ВидыПродукцииИС - фильтр по виду продукции.
//   ПримечаниеКРезультатуРазбора - Структура - содержит:
//      * ИдентификаторОшибки - см. РазборКодаМаркировкиИССлужебныйКлиентСервер.ИдентификаторыОшибокРазбораКодаМаркировки
//      * ТекстОшибки - Строка
//      * РезультатРазбора - Массив из см. РазборКодаМаркировкиИССлужебныйКлиентСервер.НовыйРезультатРазбораКодаМаркировки
//   Настройки - см. РазборКодаМаркировкиИССлужебныйКлиент.НастройкиРазбораКодаМаркировки.
//   ПользовательскиеПараметры - см. РазборКодаМаркировкиИССлужебныйКлиентСервер.ПользовательскиеПараметрыРазбораКодаМаркировки.
//
// Возвращаемое значение:
//    Неопределено - если код маркировки разобрать не удалось,
//    см. РазборКодаМаркировкиИССлужебныйКлиентСервер.НовыйРезультатРазбораКодаМаркировки.
//
//@skip-check method-too-many-params
Функция РазобратьКодМаркировкиИспользуяПредыдущиеРезультаты(Знач ДанныеДляРазбора, КешНастроекРазбораКодаМаркировки, ВидыПродукции = Неопределено, ПримечаниеКРезультатуРазбора = Неопределено, Знач Настройки = Неопределено, Знач ПользовательскиеПараметры = Неопределено) Экспорт
	
	Если Настройки = Неопределено Тогда
		Настройки = РазборКодаМаркировкиИССлужебныйКлиентПовтИсп.НастройкиРазбораКодаМаркировки();
	КонецЕсли;
	
	Возврат РазборКодаМаркировкиИССлужебныйКлиентСервер.РазобратьКодМаркировкиИспользуяПредыдущиеРезультаты(
		ДанныеДляРазбора, ВидыПродукции, ПримечаниеКРезультатуРазбора, Настройки, РазборКодаМаркировкиИССлужебныйКлиент, ПользовательскиеПараметры, КешНастроекРазбораКодаМаркировки);
	
КонецФункции

Функция НормализованныйШтрихкод(Штрихкод, ВидПродукции, КэшДанныхРазбора = Неопределено, ПользовательскиеПараметрыРазбора = Неопределено) Экспорт
	
	НормализованныйШтрихкод = "";
	
	Если КэшДанныхРазбора = Неопределено Тогда
		ПримечаниеКРезультатуРазбора = Неопределено;
		ДанныеРазбора = РазобратьКодМаркировки(Штрихкод, ВидПродукции, ПримечаниеКРезультатуРазбора,, ПользовательскиеПараметрыРазбора);
	Иначе
		ДанныеРазбораИРезультат = КэшДанныхРазбора[Штрихкод];
		Если ДанныеРазбораИРезультат <> Неопределено Тогда
			ПримечаниеКРезультатуРазбора = ДанныеРазбораИРезультат.ПримечаниеКРазборуШтрихкода;
			ДанныеРазбора                = ДанныеРазбораИРезультат.ДанныеРазбора;
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеРазбора = Неопределено Тогда
		Возврат Штрихкод;
	КонецЕсли;
	
	ВключатьТабачнуюПродукцию = Истина;
	Если ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияИСМП(ВидПродукции, ВключатьТабачнуюПродукцию)
		И (ДанныеРазбора.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская")
			Или ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ВозможнаГрупповаяУпаковкаИлиНабор(ДанныеРазбора.ВидУпаковки, ДанныеРазбора)) Тогда
		
		ПараметрыНормализацииКМ = РазборКодаМаркировкиИССлужебныйКлиентСервер.НастройкиРазбораКодаМаркировкиДляХэшаНормализации(
			ВидПродукции);
		НормализованныйШтрихкод = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
			ДанныеРазбора, ВидПродукции, ПараметрыНормализацииКМ);
		
	ИначеЕсли ДанныеРазбора.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая")
		И ДанныеРазбора.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_128") Тогда
		
		Если ЗначениеЗаполнено(ВидПродукции) Тогда
			ВидПродукции = ВидПродукции;
		ИначеЕсли ДанныеРазбора.ВидыПродукции.Количество() Тогда
			ВидПродукции = ДанныеРазбора.ВидыПродукции.Получить(0);
		КонецЕсли;
		
		ПараметрыНормализацииКМ = РазборКодаМаркировкиИССлужебныйКлиентСервер.НастройкиРазбораКодаМаркировкиДляХэшаНормализации();
		ПараметрыНормализацииКМ.ИмяСвойстваКодМаркировки = "КодМаркировки";
		
		НормализованныйШтрихкод = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
			ДанныеРазбора, ВидПродукции, ПараметрыНормализацииКМ);
		
	ИначеЕсли ДанныеРазбора.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая")
		И ДанныеРазбора.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_128") Тогда
		
		Если ЗначениеЗаполнено(ВидПродукции) Тогда
			ВидПродукции = ВидПродукции;
		ИначеЕсли ДанныеРазбора.ВидыПродукции.Количество() Тогда
			ВидПродукции = ДанныеРазбора.ВидыПродукции.Получить(0);
		КонецЕсли;
		
		ПараметрыНормализацииКМ = РазборКодаМаркировкиИССлужебныйКлиентСервер.НастройкиРазбораКодаМаркировкиДляХэшаНормализации();
		ПараметрыНормализацииКМ.ИмяСвойстваКодМаркировки = "КодМаркировки";
		
		НормализованныйШтрихкод = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
			ДанныеРазбора, ВидПродукции, ПараметрыНормализацииКМ);
		
	ИначеЕсли ДанныеРазбора.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая") Тогда
		
		НормализованныйШтрихкод = Штрихкод;
		
	Иначе
		НормализованныйШтрихкод = ДанныеРазбора.НормализованныйКодМаркировки;
	КонецЕсли;
	
	Возврат НормализованныйШтрихкод;
	
КонецФункции

#КонецОбласти

#Область НастройкиРазбораКодаМаркировки

Функция НастройкиРазбораКодаМаркировки(ВидыПродукции = Неопределено, ТолькоУчитываемыеВидыПродукции = Истина) Экспорт
	Возврат РазборКодаМаркировкиИССлужебныйВызовСервера.НастройкиРазбораКодаМаркировки(ВидыПродукции, ТолькоУчитываемыеВидыПродукции);
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщиеПроцедурыКонтекста

Функция МодульОбщегоНазначения() Экспорт
	Возврат ОбщегоНазначенияКлиент;
КонецФункции

Функция ОбщийМодуль(Имя) Экспорт
	Возврат МодульОбщегоНазначения().ОбщийМодуль(Имя);
КонецФункции

Функция ЭтоСервер() Экспорт
	Возврат Ложь;
КонецФункции

#КонецОбласти

#КонецОбласти
