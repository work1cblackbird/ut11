// @strict-types

#Если Не ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Параметры:
//  ОбъектыУчетаДокумента - См. Документ.ЭлектронныйДокументВходящийЭДО.Форма.ФормаПросмотраЛегкийИнтерфейс.ОбъектыУчетаДокумента
//  СпособыОбработки - См. Документ.ЭлектронныйДокументВходящийЭДО.Форма.ФормаПросмотраЛегкийИнтерфейс.СпособыОбработкиОсновные
//
// Возвращаемое значение:
//  Булево
Функция ЕстьОтражениеВОбъектУчетаКарточкиДокумента(ОбъектыУчетаДокумента, СпособыОбработки) Экспорт

	Результат = Ложь;

	Для Каждого ОбъектУчетаДокумента Из ОбъектыУчетаДокумента Цикл
		ОтраженныйОбъектУчета = СпособыОбработки.НайтиПоЗначению(ОбъектУчетаДокумента.СпособОбработки);
		Если ОтраженныйОбъектУчета <> Неопределено Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции

// Параметры:
//  ДанныеКомпонента - См. ЛегкийИнтерфейсДокументовЭДО.НовыеДанныеКомпонентаПанельИтогов
// 
// Возвращаемое значение:
//  Структура:
// * СуммаДокументаСтрокой - Строка
// * НДСДокументаСтрокой - Строка
Функция ПредставлениеДанныхПоДаннымКомпонентаПанельИтогов(ДанныеКомпонента) Экспорт
	
	Результат = Новый Структура("СуммаДокументаСтрокой, НДСДокументаСтрокой", "", "");
	
	ЗнакВалюты = "";
	ЗнакВалютыПоУмолчанию = "₽";
	
	Если ЗначениеЗаполнено(ДанныеКомпонента.ВалютаДокумента) Тогда
		ЗнакВалюты = ОбщегоНазначенияБЭДКлиентСервер.ЗнакВалютыПоКоду(ДанныеКомпонента.ВалютаДокумента);
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ДанныеКомпонента.СуммаДокумента) Тогда
		Результат.СуммаДокументаСтрокой = СтрШаблон("%1 %2", Строка(ДанныеКомпонента.СуммаДокумента), 
			?(ЗначениеЗаполнено(ЗнакВалюты), ЗнакВалюты, ЗнакВалютыПоУмолчанию));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонента.СтавкаНДСДокумента) Тогда
		Если НРег(ДанныеКомпонента.СтавкаНДСДокумента) = НСтр("ru ='без ндс'") Тогда
			Результат.НДСДокументаСтрокой = ДанныеКомпонента.СтавкаНДСДокумента;
		Иначе
			Результат.НДСДокументаСтрокой = СтрШаблон(НСтр("ru='НДС: %1'"), ДанныеКомпонента.СуммаНДСДокумента);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Параметры:
//  ДанныеКомпонента - См. ЛегкийИнтерфейсДокументовЭДО.НовыеДанныеКомпонентаПанельОтраженияВУчете
// 
// Возвращаемое значение:
//  Структура:
//  * СпособыОбработкиОсновные - СписокЗначений Из Строка
//  * СпособыОбработкиДополнительные - СписокЗначений Из Строка
//  * СписокСоздания - СписокЗначений Из Строка
//  * СписокПодбора - СписокЗначений Из Строка
Функция ПредставлениеДанныхПоДаннымКомпонентаПанельОтраженияВУчете(ДанныеКомпонента) Экспорт
	
	Результат = Новый Структура;
	СпособыОбработкиОсновные = Новый СписокЗначений; // СписокЗначений Из Строка
	СпособыОбработкиДополнительные = Новый СписокЗначений; // СписокЗначений Из Строка
	СписокСоздания = Новый СписокЗначений; // СписокЗначений Из Строка,СписокЗначений Из Массив
	СписокПодбора = Новый СписокЗначений; // СписокЗначений Из Строка
	Результат.Вставить("СпособыОбработкиОсновные", СпособыОбработкиОсновные);
	Результат.Вставить("СпособыОбработкиДополнительные", СпособыОбработкиДополнительные);
	Результат.Вставить("СписокСоздания", СписокСоздания);
	Результат.Вставить("СписокПодбора", СписокПодбора);
	
	КартинкаВыбрать = БиблиотекаКартинок.ВыбратьЗначение;
	КартинкаСоздать = БиблиотекаКартинок.СоздатьЭлементСписка;
	
	Для Каждого ЭлементСпискаТипов Из ДанныеКомпонента.СпособыОбработкиОсновные Цикл
		Результат.СпособыОбработкиОсновные.Добавить(СокрЛП(ЭлементСпискаТипов.Значение),
			СокрЛП(ЭлементСпискаТипов.Представление),, КартинкаВыбрать);
		Результат.СписокПодбора.Добавить(ЭлементСпискаТипов.Значение, ЭлементСпискаТипов.Представление,, 
			КартинкаВыбрать);
	КонецЦикла;
	Для Каждого ЭлементСпискаТипов Из ДанныеКомпонента.СпособыОбработкиДополнительные Цикл
		Результат.СпособыОбработкиДополнительные.Добавить(СокрЛП(ЭлементСпискаТипов.Значение),
			СокрЛП(ЭлементСпискаТипов.Представление),, КартинкаВыбрать);
		Результат.СписокПодбора.Добавить(ЭлементСпискаТипов.Значение, ЭлементСпискаТипов.Представление,, 
			КартинкаВыбрать);
	КонецЦикла;

	Для Каждого ЭлементСпискаОсновныхТипов Из ДанныеКомпонента.СпособыОбработкиОсновные Цикл

		Если Не ДанныеКомпонента.СпособыОбработкиДополнительные.Количество() Тогда
			Результат.СписокСоздания.Добавить(ЭлементСпискаОсновныхТипов.Значение,
				ЭлементСпискаОсновныхТипов.Представление,, КартинкаСоздать);
		КонецЕсли;

		Для Каждого ЭлементСпискаДополнительныхТипов Из ДанныеКомпонента.СпособыОбработкиДополнительные Цикл

			ПредставлениеОбщее = СтрШаблон("%1; %2", ЭлементСпискаОсновныхТипов.Представление,
				ЭлементСпискаДополнительныхТипов.Представление);

			ВсеЗначения = Новый Массив; // Массив Из Строка
			ВсеЗначения.Добавить(ЭлементСпискаОсновныхТипов.Значение);
			ВсеЗначения.Добавить(ЭлементСпискаДополнительныхТипов.Значение);
			//@skip-check invocation-parameter-type-intersect
			Результат.СписокСоздания.Добавить(ВсеЗначения, ПредставлениеОбщее,, КартинкаСоздать);

		КонецЦикла;

	КонецЦикла;
	
	Возврат Результат;

КонецФункции

#Область ПредставлениеКоманд

// Параметры:
//  ПакетСоставной - Булево
// 
// Возвращаемое значение:
//  Строка
Функция ПредставлениеКомандыПодписать(ПакетСоставной) Экспорт
	
	Если ПакетСоставной Тогда
		Возврат НСтр("ru = 'Подписать пакет'");
	Иначе
		Возврат НСтр("ru = 'Подписать'");
	КонецЕсли;
	
КонецФункции

// Параметры:
//  ПакетСоставной - Булево
// 
// Возвращаемое значение:
//  Строка
Функция ПредставлениеКомандыОтправить(ПакетСоставной) Экспорт
	
	Если ПакетСоставной Тогда
		Возврат НСтр("ru = 'Отправить пакет'");
	Иначе
		Возврат НСтр("ru = 'Отправить'");
	КонецЕсли;
	
КонецФункции

// Параметры:
//  ПакетСоставной - Булево
// 
// Возвращаемое значение:
//  Строка
Функция ПредставлениеКомандыПринятьАннулирование(ПакетСоставной) Экспорт
	
	Если ПакетСоставной Тогда
		Возврат НСтр("ru = 'Подтвердить аннулирование пакета'");
	Иначе
		Возврат НСтр("ru = 'Подтвердить аннулирование'");
	КонецЕсли;
	
КонецФункции

// Параметры:
//  ПакетСоставной - Булево
// 
// Возвращаемое значение:
//  Строка
Функция ПредставлениеКомандыОтклонитьАннулирование(ПакетСоставной) Экспорт
	
	Если ПакетСоставной Тогда
		Возврат НСтр("ru = 'Отклонить аннулирование пакета'");
	Иначе
		Возврат НСтр("ru = 'Отклонить аннулирование'");
	КонецЕсли;

КонецФункции

// Параметры:
//  ПакетСоставной - Булево
// 
// Возвращаемое значение:
//  Строка
Функция ПредставлениеКомандыОтклонить(ПакетСоставной) Экспорт
	
	Если ПакетСоставной Тогда
		Возврат НСтр("ru = 'Отклонить пакет'");
	Иначе
		Возврат НСтр("ru = 'Отклонить'");
	КонецЕсли;
	
КонецФункции

// Параметры:
//  ПакетСоставной - Булево
// 
// Возвращаемое значение:
//  Строка
Функция ПредставлениеКомандыУтвердить(ПакетСоставной) Экспорт
	
	Если ПакетСоставной Тогда
		Возврат НСтр("ru = 'Утвердить пакет'");
	Иначе
		Возврат НСтр("ru = 'Утвердить'");
	КонецЕсли;
	
КонецФункции

// Параметры:
//  ПакетСоставной - Булево
//  ЭтоВнутреннийВидДокумента - Булево
// 
// Возвращаемое значение:
//  Строка
Функция ПредставлениеКомандыАннулировать(ПакетСоставной, ЭтоВнутреннийВидДокумента = Ложь) Экспорт
	
	Если ЭтоВнутреннийВидДокумента Тогда
		Возврат НСтр("ru = 'Аннулировать'");
	ИначеЕсли ПакетСоставной Тогда
		Возврат НСтр("ru = 'Предложить аннулировать пакет'");
	Иначе
		Возврат НСтр("ru = 'Предложить аннулировать документ'");
	КонецЕсли;
	
КонецФункции

// Параметры:
//  ПакетСоставной - Булево
// 
// Возвращаемое значение:
//  Строка
Функция ПредставлениеКомандыЗакрытьПринудительно(ПакетСоставной) Экспорт
	
	Если ПакетСоставной Тогда
		Возврат НСтр("ru = 'Закрыть принудительно пакет'");
	Иначе
		Возврат НСтр("ru = 'Закрыть принудительно'");
	КонецЕсли;
	
КонецФункции

#КонецОбласти // ПредставлениеКоманд

#КонецОбласти // СлужебныйПрограммныйИнтерфейс

#КонецЕсли // ВнешнееСоединение

