////////////////////////////////////////////////////////////////////////////////
//
// ИнтеграцияГИСМКлиентУТ: имплементация в УТ клиентской переопределяемой части интеграции с ГИСМ.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область РаботаСПрикладнымиДокументами

// Текст уведомления о списании ки ЗГИСМОбработка навигационной ссылки.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  НавигационнаяСсылкаФорматированнойСтроки - Строка - навигационная ссылка форматированной строки
//  СтандартнаяОбработка - Булево - стандартная обработка
Процедура ТекстУведомленияОСписанииКиЗГИСМОбработкаНавигационнойСсылки(Форма, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьПротоколОбмена" Тогда
		
		ИнтеграцияГИСМКлиент.ОткрытьПротоколОбмена(Форма.Объект.Ссылка, Форма);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "СоздатьУведомлениеГИСМ" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Основание", Форма.Объект.Ссылка);
		ОткрытьФорму("Документ.УведомлениеОСписанииКиЗГИСМ.Форма.ФормаДокумента", ПараметрыФормы, Форма);
		
	КонецЕсли;

КонецПроцедуры

// Текст заявка на выпуск ки з обработка навигационной ссылки.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  НавигационнаяСсылкаФорматированнойСтроки - Строка - навигационная ссылка форматированной строки
//  СтандартнаяОбработка - Булево - стандартная обработка
Процедура ТекстЗаявкаНаВыпускКиЗОбработкаНавигационнойСсылки(Форма, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьПротоколОбмена" Тогда
		
		ИнтеграцияГИСМКлиент.ОткрытьПротоколОбмена(Форма.Объект.Ссылка, Форма);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "СоздатьЗаявкуНаВыпускКиЗ" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Основание", Форма.Объект.Ссылка);
		ОткрытьФорму("Документ.ЗаявкаНаВыпускКиЗГИСМ.Форма.ФормаДокумента", ПараметрыФормы, Форма);
		
	КонецЕсли;
	
КонецПроцедуры

// Текст уведомления об импорте ввозе из ЕАЭСОбработка навигационной ссылки.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  НавигационнаяСсылкаФорматированнойСтроки - Строка - навигационная ссылка форматированной строки
//  СтандартнаяОбработка - Булево - стандартная обработка
Процедура ТекстУведомленияОбИмпортеВвозеИзЕАЭСОбработкаНавигационнойСсылки(Форма, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьПротоколОбмена" Тогда
		
		ИнтеграцияГИСМКлиент.ОткрытьПротоколОбмена(Форма.Объект.Ссылка, Форма);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "СоздатьУведомлениеГИСМ" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Основание", Форма.Объект.Ссылка);
		
		Если Форма.Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту") Тогда
			ОткрытьФорму("Документ.УведомлениеОбИмпортеМаркированныхТоваровГИСМ.Форма.ФормаДокумента", ПараметрыФормы, Форма);
		ИначеЕсли Форма.Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС") Тогда
			ОткрытьФорму("Документ.УведомлениеОВвозеМаркированныхТоваровИзЕАЭСГИСМ.Форма.ФормаДокумента", ПараметрыФормы, Форма);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Параметры открытия списка отчеты о розничных продажах.
// 
// Возвращаемое значение:
//  Структура - Параметры открытия списка отчеты о розничных продажах:
// * ИмяФормы - Строка - 
// * ОткрытьРаспоряжения - Булево - 
// * ИмяПоляОтветственный - Строка - 
// * ИмяПоляОрганизация - Строка - 
Функция ПараметрыОткрытияСпискаОтчетыОРозничныхПродажах() Экспорт
	
	СтруктураВозврата = Новый Структура();
	СтруктураВозврата.Вставить("ИмяФормы", "Документ.ОтчетОРозничныхПродажах.Форма.ФормаСпискаГИСМ");
	СтруктураВозврата.Вставить("ОткрытьРаспоряжения", Ложь);
	СтруктураВозврата.Вставить("ИмяПоляОтветственный", "Ответственный");
	СтруктураВозврата.Вставить("ИмяПоляОрганизация", "Организация");
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Параметры открытия списка возвраты товаров от розничных клиентов.
// 
// Параметры:
//  СтруктураВозврата см. ИнтеграцияИСВызовСервераУТ.ВозвратыТоваровОтРозничныхКлиентов
Процедура ПараметрыОткрытияСпискаВозвратыТоваровОтРозничныхКлиентов(СтруктураВозврата) Экспорт
	
	ДопустимыеЭлементы = ИнтеграцияИСВызовСервераУТ.ВозвратыТоваровОтРозничныхКлиентов(СтруктураВозврата);
	Если ДопустимыеЭлементы.Количество() = 1 Тогда
		СтруктураВозврата = ДопустимыеЭлементы[0].Значение;
	Иначе
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ПараметрыОткрытияСпискаВозвратыТоваровОтРозничныхКлиентовЗавершение", ЭтотОбъект),
			НСтр("ru = 'Выберите тип документа'"), ДопустимыеЭлементы);
	КонецЕсли;
	
	Возврат;
	
КонецПроцедуры

// Параметры открытия списка возвраты товаров от розничных клиентов завершение.
// 
// Параметры:
//  Результат - Структура
//  ДополнительныеПараметры - Произвольный
Процедура ПараметрыОткрытияСпискаВозвратыТоваровОтРозничныхКлиентовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураБыстрогоОтбора = Новый Структура;
	ПараметрыФормы = Новый Структура;
	
	Если Результат.ОткрытьРаспоряжения Тогда
		ПараметрыФормы.Вставить("ОткрытьРаспоряжения", Истина);
	Иначе
		СтруктураБыстрогоОтбора.Вставить("ДальнейшееДействиеГИСМ", Результат.ДальнейшееДействиеГИСМ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Результат.ИмяПоляОтветственный) Тогда
		Результат.ИмяПоляОтветственный = "Ответственный";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Результат.ИмяПоляОрганизация) Тогда
		Результат.ИмяПоляОрганизация = "Организация";
	КонецЕсли;
	
	СтруктураБыстрогоОтбора.Вставить(Результат.ИмяПоляОтветственный, Результат.Ответственный);
	СтруктураБыстрогоОтбора.Вставить(Результат.ИмяПоляОрганизация, Результат.Организация);
	
	ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	ОткрытьФорму(Результат.ИмяФормы, ПараметрыФормы);
	
КонецПроцедуры

// Заявка на выпуск ки з заказанные ки з при изменении.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  КэшированныеЗначения - Произвольный
//  Элемент - Произвольный
Процедура ЗаявкаНаВыпускКиЗЗаказанныеКиЗПриИзменении(Форма, КэшированныеЗначения, Элемент) Экспорт
	
	ТекущиеДанные = Форма.Элементы.ЗаказанныеКиЗ.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущиеДанные.Характеристика);
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	
	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый",
	                           Новый Структура("ИмяФормы, ИмяТабличнойЧасти", Форма.ИмяФормы, "ЗаказанныеКиЗ"));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

// Открыть форму списка документов.
// 
// Параметры:
//  СписокДокументов - СписокЗначений из Произвольный
//  Заголовок - Строка
Процедура ОткрытьФормуСпискаДокументов(СписокДокументов, Заголовок) Экспорт

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СписокДокументов", СписокДокументов);
	ПараметрыФормы.Вставить("Заголовок",        Заголовок);
	
	ОткрытьФорму("ОбщаяФорма.ПросмотрСпискаДокументов",
	                ПараметрыФормы,
	                ЭтотОбъект);

КонецПроцедуры

// Товары уведомление об импорте номенклатура ки з при изменении.
// 
// Параметры:
//  ТекущаяСтрока - Произвольный
//  КэшированныеЗначения - Произвольный
Процедура ТоварыУведомлениеОбИмпортеНоменклатураКиЗПриИзменении(ТекущаяСтрока, КэшированныеЗначения) Экспорт
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.ХарактеристикаКиЗ);
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("НоменклатураКиЗ", "ХарактеристикиКиЗИспользуются"));
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

// Открыть подбор заказываемых ки З.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
Процедура ОткрытьПодборЗаказываемыхКиЗ(Форма) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Документ",                          Форма.Объект.Ссылка);
	ПараметрыФормы.Вставить("Контрагент",                        Форма.Объект.Контрагент);
	ПараметрыФормы.Вставить("ОсобенностьУчета",                  ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.КиЗГИСМ"));
	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров", Истина);
	ПараметрыФормы.Вставить("СкрыватьРучныеСкидки",              Истина);
	ПараметрыФормы.Вставить("Дата",                              Форма.Объект.Дата);
	
	ОткрытьФорму("Обработка.ПодборТоваровВДокументЗакупки.Форма", ПараметрыФормы, Форма, Форма.УникальныйИдентификатор);
	
КонецПроцедуры

// Источник выбора это форма подбора.
// 
// Параметры:
//  ИсточникВыбора - ФормаКлиентскогоПриложения
// 
// Возвращаемое значение:
//  Булево - Источник выбора это форма подбора
Функция ИсточникВыбораЭтоФормаПодбора(ИсточникВыбора) Экспорт
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументЗакупки.Форма.Форма" Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#КонецОбласти