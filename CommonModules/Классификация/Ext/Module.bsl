
#Область ПрограммныйИнтерфейс

#Область ПроцедурыОбработкиРегламентныхЗаданий

// Заполняет регистр сведений "ABCXYZКлассификацияКлиентов" результатами ABC классификации партнеров.
//
Процедура ВыполнитьABCКлассификациюПартнеровРегламентноеЗадание() Экспорт

	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ABCКлассификацияПартнеров);
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	ВыполнитьABCКлассификациюПартнеров();

КонецПроцедуры

// Заполняет регистр сведений "ABCXYZКлассификацияКлиентов" результатами XYZ классификации партнеров.
//
Процедура ВыполнитьXYZКлассификациюПартнеровРегламентноеЗадание() Экспорт

	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.XYZКлассификацияПартнеров);
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	ВыполнитьXYZКлассификациюПартнеров();

КонецПроцедуры

// Заполняет регистр сведений "ABCXYZКлассификацияНоменклатуры" результатами ABC классификации номенклатуры.
//
Процедура ВыполнитьABCКлассификациюНоменклатурыРегламентноеЗадание() Экспорт

	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ABCКлассификацияНоменклатуры);
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	ВыполнитьABCКлассификациюНоменклатуры();

КонецПроцедуры

// Заполняет регистр сведений "ABCXYZКлассификацияНоменклатуры" результатами XYZ классификации номенклатуры.
//
Процедура ВыполнитьXYZКлассификациюНоменклатурыРегламентноеЗадание() Экспорт

	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.XYZКлассификацияНоменклатуры);
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	ВыполнитьXYZКлассификациюНоменклатуры();

КонецПроцедуры

// Заполняет регистр сведений "ABCXYZКлассификацияКлиентов" результатами ABC классификации партнеров.
//
// Параметры:
//  ДатаКлассификации  - Дата - дата, на которую выполняется классификация.
//
Процедура ВыполнитьABCКлассификациюПартнеров(ДатаКлассификации = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользоватьКлассификациюПоВаловойПрибыли = ПолучитьФункциональнуюОпцию("ИспользоватьABCXYZКлассификациюПартнеровПоВаловойПрибыли");
	ИспользоватьКлассификациюПоВыручке = ПолучитьФункциональнуюОпцию("ИспользоватьABCXYZКлассификациюПартнеровПоВыручке");
	ИспользоватьКлассификациюПоКоличеству = ПолучитьФункциональнуюОпцию("ИспользоватьABCXYZКлассификациюПартнеровПоКоличествуПродаж");

	Если НЕ ИспользоватьКлассификациюПоВаловойПрибыли И НЕ ИспользоватьКлассификациюПоВыручке И НЕ ИспользоватьКлассификациюПоКоличеству Тогда

		Возврат;

	КонецЕсли;

	ПериодКлассификации = Константы.ПериодABCКлассификацииПартнеров.Получить();
	КоличествоПериодовКлассификации = Константы.КоличествоПериодовABCКлассификацииПартнеров.Получить();

	Если ПериодКлассификации.Пустая() ИЛИ КоличествоПериодовКлассификации = 0 Тогда

		Возврат;

	КонецЕсли;

	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	РегистрСведенийАналитикаУчетаПоПартнерам.Партнер КАК Партнер,
		|	СУММА(ВыручкаИСебестоимостьПродажОбороты.СуммаВыручкиОборот) - СУММА(ВыручкаИСебестоимостьПродажОбороты.СтоимостьОборот) - СУММА(ВыручкаИСебестоимостьПродажОбороты.ДопРасходыОборот) КАК ВаловаяПрибыль,
		|	СУММА(ВыручкаИСебестоимостьПродажОбороты.СуммаВыручкиОборот) КАК Выручка,
		|	СУММА(ВЫБОР
		|			КОГДА ВыручкаИСебестоимостьПродажОбороты.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Количество
		|ИЗ
		|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(&НачалоПериода, &ОкончаниеПериода, Регистратор,(НЕ АналитикаУчетаПоПартнерам.Партнер.Предопределенный) И (НЕ АналитикаУчетаПоПартнерам.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка))) КАК ВыручкаИСебестоимостьПродажОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрСведенийАналитикаУчетаПоПартнерам
		|		ПО ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаПоПартнерам = РегистрСведенийАналитикаУчетаПоПартнерам.КлючАналитики
		|СГРУППИРОВАТЬ ПО
		|	РегистрСведенийАналитикаУчетаПоПартнерам.Партнер");

	Период = ОбщегоНазначенияУТКлиентСервер.РасширенныйПериод(?(ДатаКлассификации = Неопределено, ТекущаяДатаСеанса(), ДатаКлассификации), ПериодКлассификации, - КоличествоПериодовКлассификации);
	Запрос.УстановитьПараметр("НачалоПериода", Период.ДатаНачала);
	Запрос.УстановитьПараметр("ОкончаниеПериода", Период.ДатаОкончания);

	РезультатКлассификации = Запрос.Выполнить().Выгрузить();

	Если ИспользоватьКлассификациюПоВаловойПрибыли Тогда

		ВыполнитьABCКлассификацию(РезультатКлассификации, "ВаловаяПрибыль");
		ОбновитьДанныеКлассификацииПартнеров(
			РезультатКлассификации, Перечисления.ТипыКлассификации.ABC,
			Перечисления.ТипыПараметровКлассификации.ВаловаяПрибыль,
			Период.ДатаОкончания, Перечисления.ABCКлассификация.НеКлассифицирован);

	КонецЕсли;

	Если ИспользоватьКлассификациюПоВыручке Тогда

		ВыполнитьABCКлассификацию(РезультатКлассификации, "Выручка");
		ОбновитьДанныеКлассификацииПартнеров(
			РезультатКлассификации, Перечисления.ТипыКлассификации.ABC,
			Перечисления.ТипыПараметровКлассификации.Выручка,
			Период.ДатаОкончания, Перечисления.ABCКлассификация.НеКлассифицирован);

	КонецЕсли;

	Если ИспользоватьКлассификациюПоКоличеству Тогда

		ВыполнитьABCКлассификацию(РезультатКлассификации, "Количество");
		ОбновитьДанныеКлассификацииПартнеров(
			РезультатКлассификации, Перечисления.ТипыКлассификации.ABC,
			Перечисления.ТипыПараметровКлассификации.Количество,
			Период.ДатаОкончания, Перечисления.ABCКлассификация.НеКлассифицирован);

	КонецЕсли;

КонецПроцедуры

// Заполняет регистр сведений "ABCXYZКлассификацияКлиентов" результатами XYZ классификации партнеров.
//
// Параметры:
//  ДатаКлассификации  - Дата - дата, на которую выполняется классификация.
//
Процедура ВыполнитьXYZКлассификациюПартнеров(ДатаКлассификации = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользоватьКлассификациюПоВаловойПрибыли = ПолучитьФункциональнуюОпцию("ИспользоватьABCXYZКлассификациюПартнеровПоВаловойПрибыли");
	ИспользоватьКлассификациюПоВыручке = ПолучитьФункциональнуюОпцию("ИспользоватьABCXYZКлассификациюПартнеровПоВыручке");
	ИспользоватьКлассификациюПоКоличеству = ПолучитьФункциональнуюОпцию("ИспользоватьABCXYZКлассификациюПартнеровПоКоличествуПродаж");

	Если НЕ ИспользоватьКлассификациюПоВаловойПрибыли И НЕ ИспользоватьКлассификациюПоВыручке И НЕ ИспользоватьКлассификациюПоКоличеству Тогда

		Возврат;

	КонецЕсли;

	ПериодКлассификации = Константы.ПериодXYZКлассификацииПартнеров.Получить();
	КоличествоПериодовКлассификации = Константы.КоличествоПериодовXYZКлассификацииПартнеров.Получить();
	ПодпериодКлассификации = Константы.ПодпериодXYZКлассификацииПартнеров.Получить();

	Если ПериодКлассификации.Пустая() ИЛИ КоличествоПериодовКлассификации = 0 ИЛИ ПодпериодКлассификации.Пустая() Тогда

		Возврат;

	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	0 КАК РазделительКлассификации,
	|	РегистрСведенийАналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	|	НАЧАЛОПЕРИОДА(ВыручкаИСебестоимостьПродажОбороты.Период, МЕСЯЦ) КАК Период,
	|	ВыручкаИСебестоимостьПродажОбороты.СуммаВыручкиОборот КАК Выручка,
	|	ЕСТЬNULL(ВыручкаИСебестоимостьПродажОбороты.СуммаВыручкиОборот, 0) - ЕСТЬNULL(ВыручкаИСебестоимостьПродажОбороты.СтоимостьОборот, 0) - ЕСТЬNULL(ВыручкаИСебестоимостьПродажОбороты.ДопРасходыОборот, 0) КАК ВаловаяПрибыль,
	|	ВЫБОР
	|		КОГДА ВыручкаИСебестоимостьПродажОбороты.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Количество
	|ИЗ
	|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(
	|		&НачалоПериодаПодстановка,
	|		&КонецПериодаПодстановка,
	|		Регистратор,
	|		 (НЕ АналитикаУчетаПоПартнерам.Партнер.Предопределенный)
	|			 И (НЕ АналитикаУчетаПоПартнерам.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка))) КАК ВыручкаИСебестоимостьПродажОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрСведенийАналитикаУчетаПоПартнерам
	|		ПО ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаПоПартнерам = РегистрСведенийАналитикаУчетаПоПартнерам.КлючАналитики
	|ИТОГИ
	|	МАКСИМУМ(РазделительКлассификации),
	|	СУММА(Выручка),
	|	СУММА(ВаловаяПрибыль),
	|	СУММА(Количество)
	|ПО
	|	Партнер,
	|	Период ПЕРИОДАМИ(МЕСЯЦ, &НачалоПериодаПодстановка, &КонецПериодаПодстановка)");
	
	Подстановка = "";
	ПодстановкаНачалоПериода = "";
	ПодстановкаКонецПериода = "";
	ПодстановкаВыручка = "";
	Если ПодпериодКлассификации = Перечисления.Периодичность.Год Тогда
		Подстановка = "Период ПЕРИОДАМИ(ГОД, &НачалоПериодаПодстановка, &КонецПериодаПодстановка)";
		ПодстановкаВыручка = "НАЧАЛОПЕРИОДА(ВыручкаИСебестоимостьПродажОбороты.Период, ГОД)";
		ПодстановкаНачалоПериода = "НАЧАЛОПЕРИОДА(&НачалоПериода, ГОД)";
		ПодстановкаКонецПериода = "КОНЕЦПЕРИОДА(&ОкончаниеПериода, ГОД)";
	ИначеЕсли ПодпериодКлассификации = Перечисления.Периодичность.Декада Тогда
		Подстановка = "Период ПЕРИОДАМИ(ДЕКАДА, &НачалоПериодаПодстановка, &КонецПериодаПодстановка)";
		ПодстановкаВыручка = "НАЧАЛОПЕРИОДА(ВыручкаИСебестоимостьПродажОбороты.Период, ДЕКАДА)";
		ПодстановкаНачалоПериода = "НАЧАЛОПЕРИОДА(&НачалоПериода, ДЕКАДА)";
		ПодстановкаКонецПериода = "КОНЕЦПЕРИОДА(&ОкончаниеПериода, ДЕКАДА)";
	ИначеЕсли ПодпериодКлассификации = Перечисления.Периодичность.День Тогда
		Подстановка = "Период ПЕРИОДАМИ(ДЕНЬ, &НачалоПериодаПодстановка, &КонецПериодаПодстановка)";
		ПодстановкаВыручка = "НАЧАЛОПЕРИОДА(ВыручкаИСебестоимостьПродажОбороты.Период, ДЕНЬ)";
		ПодстановкаНачалоПериода = "НАЧАЛОПЕРИОДА(&НачалоПериода, ДЕНЬ)";
		ПодстановкаКонецПериода = "КОНЕЦПЕРИОДА(&ОкончаниеПериода, ДЕНЬ)";
	ИначеЕсли ПодпериодКлассификации = Перечисления.Периодичность.Квартал Тогда
		Подстановка = "Период ПЕРИОДАМИ(КВАРТАЛ, &НачалоПериодаПодстановка, &КонецПериодаПодстановка)";
		ПодстановкаВыручка = "НАЧАЛОПЕРИОДА(ВыручкаИСебестоимостьПродажОбороты.Период, КВАРТАЛ)";
		ПодстановкаНачалоПериода = "НАЧАЛОПЕРИОДА(&НачалоПериода, КВАРТАЛ)";
		ПодстановкаКонецПериода = "КОНЕЦПЕРИОДА(&ОкончаниеПериода, КВАРТАЛ)";
	ИначеЕсли ПодпериодКлассификации = Перечисления.Периодичность.Месяц Тогда
		Подстановка = "Период ПЕРИОДАМИ(МЕСЯЦ, &НачалоПериодаПодстановка, &КонецПериодаПодстановка)";
		ПодстановкаВыручка = "НАЧАЛОПЕРИОДА(ВыручкаИСебестоимостьПродажОбороты.Период, МЕСЯЦ)";
		ПодстановкаНачалоПериода = "НАЧАЛОПЕРИОДА(&НачалоПериода, МЕСЯЦ)";
		ПодстановкаКонецПериода = "КОНЕЦПЕРИОДА(&ОкончаниеПериода, МЕСЯЦ)";
	ИначеЕсли ПодпериодКлассификации = Перечисления.Периодичность.Неделя Тогда
		Подстановка = "Период ПЕРИОДАМИ(НЕДЕЛЯ, &НачалоПериодаПодстановка, &КонецПериодаПодстановка)";
		ПодстановкаВыручка = "НАЧАЛОПЕРИОДА(ВыручкаИСебестоимостьПродажОбороты.Период, НЕДЕЛЯ)";
		ПодстановкаНачалоПериода = "НАЧАЛОПЕРИОДА(&НачалоПериода, НЕДЕЛЯ)";
		ПодстановкаКонецПериода = "КОНЕЦПЕРИОДА(&ОкончаниеПериода, НЕДЕЛЯ)";
	ИначеЕсли ПодпериодКлассификации = Перечисления.Периодичность.Полугодие Тогда
		Подстановка = "Период ПЕРИОДАМИ(ПОЛУГОДИЕ, &НачалоПериодаПодстановка, &КонецПериодаПодстановка)";
		ПодстановкаВыручка = "НАЧАЛОПЕРИОДА(ВыручкаИСебестоимостьПродажОбороты.Период, ПОЛУГОДИЕ)";
		ПодстановкаНачалоПериода = "НАЧАЛОПЕРИОДА(&НачалоПериода, ПОЛУГОДИЕ)";
		ПодстановкаКонецПериода = "КОНЕЦПЕРИОДА(&ОкончаниеПериода, ПОЛУГОДИЕ)";
	КонецЕсли;
	ЗаменяемыйТекст = "Период ПЕРИОДАМИ(МЕСЯЦ, &НачалоПериодаПодстановка, &КонецПериодаПодстановка)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, ЗаменяемыйТекст, Подстановка);
	ЗаменяемыйТекст = "НАЧАЛОПЕРИОДА(ВыручкаИСебестоимостьПродажОбороты.Период, МЕСЯЦ)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, ЗаменяемыйТекст, ПодстановкаВыручка);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&НачалоПериодаПодстановка", ПодстановкаНачалоПериода);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&КонецПериодаПодстановка", ПодстановкаКонецПериода);
	Период = ОбщегоНазначенияУТКлиентСервер.РасширенныйПериод(?(ДатаКлассификации = Неопределено, ТекущаяДатаСеанса(), ДатаКлассификации), ПериодКлассификации, - КоличествоПериодовКлассификации);
	Запрос.УстановитьПараметр("НачалоПериода", Период.ДатаНачала);
	Запрос.УстановитьПараметр("ОкончаниеПериода", Период.ДатаОкончания);

	ИсточникДанных = Новый Структура("ИсточникДанных", Запрос.Выполнить());

	Если ИспользоватьКлассификациюПоВаловойПрибыли Тогда

		РезультатКлассификации = ВыполнитьXYZКлассификацию(ИсточникДанных, "ВаловаяПрибыль", "Номенклатура");
		ОбновитьДанныеКлассификацииПартнеров(
			РезультатКлассификации, Перечисления.ТипыКлассификации.XYZ,
			Перечисления.ТипыПараметровКлассификации.ВаловаяПрибыль,
			Период.ДатаОкончания, Перечисления.XYZКлассификация.НеКлассифицирован);

	КонецЕсли;

	Если ИспользоватьКлассификациюПоВыручке Тогда

		РезультатКлассификации = ВыполнитьXYZКлассификацию(ИсточникДанных, "Выручка", "Номенклатура");
		ОбновитьДанныеКлассификацииПартнеров(
			РезультатКлассификации, Перечисления.ТипыКлассификации.XYZ,
			Перечисления.ТипыПараметровКлассификации.Выручка,
			Период.ДатаОкончания, Перечисления.XYZКлассификация.НеКлассифицирован);

	КонецЕсли;

	Если ИспользоватьКлассификациюПоКоличеству Тогда

		РезультатКлассификации = ВыполнитьXYZКлассификацию(ИсточникДанных, "Количество", "Номенклатура");
		ОбновитьДанныеКлассификацииПартнеров(
			РезультатКлассификации, Перечисления.ТипыКлассификации.XYZ,
			Перечисления.ТипыПараметровКлассификации.Количество,
			Период.ДатаОкончания, Перечисления.XYZКлассификация.НеКлассифицирован);

	КонецЕсли;

КонецПроцедуры

// Выполняет расчет ABC класса номенклатуры и записывает его в регистр
//
//	Параметры:
//		ДатаКлассификации - Дата - дата окончания периода, за который нужно выбрать данные для
//			классификации, если Неопределенно - используется текущая дата.
//
Процедура ВыполнитьABCКлассификациюНоменклатуры(ДатаКлассификации = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользоватьКлассификациюПоВаловойПрибыли = ПолучитьФункциональнуюОпцию("ИспользоватьABCXYZКлассификациюНоменклатурыПоВаловойПрибыли");
	ИспользоватьКлассификациюПоВыручке = ПолучитьФункциональнуюОпцию("ИспользоватьABCXYZКлассификациюНоменклатурыПоВыручке");
	ИспользоватьКлассификациюПоКоличеству = ПолучитьФункциональнуюОпцию("ИспользоватьABCXYZКлассификациюНоменклатурыПоКоличествуПродаж");
	УчитыватьПравилаВнутреннегоТовародвижения = Константы.УчитыватьПравилаВнутреннегоТовародвиженияПриABCКлассификацииНоменклатуры.Получить();
	
	Если Не ИспользоватьКлассификациюПоВаловойПрибыли И Не ИспользоватьКлассификациюПоВыручке И Не ИспользоватьКлассификациюПоКоличеству Тогда
		Возврат;
	КонецЕсли;
	
	ПериодКлассификации = Константы.ПериодABCКлассификацииНоменклатуры.Получить();
	КоличествоПериодовКлассификации = Константы.КоличествоПериодовABCКлассификацииНоменклатуры.Получить();
	
	Если ПериодКлассификации.Пустая() Или КоличествоПериодовКлассификации = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаНоменклатуры.МестоХранения КАК Склад,
	|	ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|	ВыручкаИСебестоимостьПродажОбороты.Подразделение КАК Подразделение,
	|	ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|	ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|	ВыручкаИСебестоимостьПродажОбороты.СуммаВыручкиОборот - ВыручкаИСебестоимостьПродажОбороты.СтоимостьОборот - ВыручкаИСебестоимостьПродажОбороты.ДопРасходыОборот КАК ВаловаяПрибыль,
	|	ВыручкаИСебестоимостьПродажОбороты.СуммаВыручкиОборот КАК Выручка,
	|	ВыручкаИСебестоимостьПродажОбороты.КоличествоОборот КАК Количество
	|ПОМЕСТИТЬ ИсточникДанных
	|ИЗ
	|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(&НачалоПериода, &ОкончаниеПериода, , ) КАК ВыручкаИСебестоимостьПродажОбороты
	|ГДЕ
	|	ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаПоПартнерам.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|	И ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаНоменклатуры.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	0 КАК РазделительКлассификации,
	|	НЕОПРЕДЕЛЕНО КАК РазделКлассификации,
	|	ИсточникДанных.Номенклатура КАК Номенклатура,
	|	ИсточникДанных.Характеристика КАК Характеристика,
	|	СУММА(ИсточникДанных.ВаловаяПрибыль) КАК ВаловаяПрибыль,
	|	СУММА(ИсточникДанных.Выручка) КАК Выручка,
	|	СУММА(ИсточникДанных.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТ_Раздел0
	|ИЗ
	|	ИсточникДанных КАК ИсточникДанных
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсточникДанных.Номенклатура,
	|	ИсточникДанных.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсточникДанных.Номенклатура   КАК Номенклатура,
	|	ИсточникДанных.Характеристика КАК Характеристика,
	|	ИсточникДанных.Склад          КАК Склад
	|ПОМЕСТИТЬ ВтТовары
	|ИЗ
	|	ИсточникДанных КАК ИсточникДанных
	|ГДЕ
	|	&УчитыватьПравилаВнутреннегоТовародвижения
	|	И ТИПЗНАЧЕНИЯ(ИсточникДанных.Склад) = ТИП(Справочник.Склады)
	|	И ИсточникДанных.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|;
	|
	|///////////////////////////////////////////////////////////
	|" + СтрЗаменить(РегистрыСведений.СхемыОбеспечения.ВременнаяТаблицаСпособыОбеспечения("ВЫЧИСЛЯТЬ"), "РАЗРЕШЕННЫЕ", "")
	+"ВЫБРАТЬ
	|	1 КАК РазделительКлассификации,
	|	ИсточникДанных.Склад КАК РазделКлассификации,
	|	ИсточникДанных.Номенклатура КАК Номенклатура,
	|	ИсточникДанных.Характеристика КАК Характеристика,
	|	СУММА(ИсточникДанных.ВаловаяПрибыль) КАК ВаловаяПрибыль,
	|	СУММА(ИсточникДанных.Выручка) КАК Выручка,
	|	СУММА(ИсточникДанных.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТ_Раздел1
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИсточникДанных.Склад КАК Склад,
	|		ИсточникДанных.Номенклатура КАК Номенклатура,
	|		ИсточникДанных.Характеристика КАК Характеристика,
	|		ИсточникДанных.ВаловаяПрибыль КАК ВаловаяПрибыль,
	|		ИсточникДанных.Выручка КАК Выручка,
	|		ИсточникДанных.Количество КАК Количество
	|	ИЗ
	|		ИсточникДанных КАК ИсточникДанных
	|	ГДЕ
	|		ТИПЗНАЧЕНИЯ(ИсточникДанных.Склад) = ТИП(Справочник.Склады)
	|		И ИсточникДанных.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СпрСпособыОбеспечения.ИсточникОбеспеченияПотребностей,
	|		ИсточникДанных.Номенклатура,
	|		ИсточникДанных.Характеристика,
	|		ИсточникДанных.ВаловаяПрибыль,
	|		ИсточникДанных.Выручка,
	|		ИсточникДанных.Количество
	|	ИЗ
	|		ИсточникДанных КАК ИсточникДанных
	|			
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВтСпособыОбеспечения КАК ТаблицаСпособовОбеспечения
	|			ПО ТаблицаСпособовОбеспечения.Склад          = ИсточникДанных.Склад
	|			 И ТаблицаСпособовОбеспечения.Номенклатура   = ИсточникДанных.Номенклатура
	|			 И ТаблицаСпособовОбеспечения.Характеристика = ИсточникДанных.Характеристика
	|			
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОбеспеченияПотребностей КАК СпрСпособыОбеспечения
	|			ПО СпрСпособыОбеспечения.Ссылка = ТаблицаСпособовОбеспечения.СпособОбеспеченияПотребностей
	|	ГДЕ
	|		&УчитыватьПравилаВнутреннегоТовародвижения
	|		И ТИПЗНАЧЕНИЯ(ИсточникДанных.Склад) = ТИП(Справочник.Склады)
	|		И ИсточникДанных.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|		И СпрСпособыОбеспечения.ТипОбеспечения = ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.Перемещение)
	|		И СпрСпособыОбеспечения.ИсточникОбеспеченияПотребностей ССЫЛКА Справочник.Склады
	|		И СпрСпособыОбеспечения.ИсточникОбеспеченияПотребностей <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) КАК ИсточникДанных
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсточникДанных.Склад,
	|	ИсточникДанных.Номенклатура,
	|	ИсточникДанных.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	2 КАК РазделительКлассификации,
	|	ИсточникДанных.Организация КАК РазделКлассификации,
	|	ИсточникДанных.Номенклатура КАК Номенклатура,
	|	ИсточникДанных.Характеристика КАК Характеристика,
	|	СУММА(ИсточникДанных.ВаловаяПрибыль) КАК ВаловаяПрибыль,
	|	СУММА(ИсточникДанных.Выручка) КАК Выручка,
	|	СУММА(ИсточникДанных.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТ_Раздел2
	|ИЗ
	|	ИсточникДанных КАК ИсточникДанных
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсточникДанных.Организация,
	|	ИсточникДанных.Номенклатура,
	|	ИсточникДанных.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	3 КАК РазделКлассификации,
	|	ИсточникДанных.Подразделение КАК Подразделение,
	|	ИсточникДанных.Номенклатура КАК Номенклатура,
	|	ИсточникДанных.Характеристика КАК Характеристика,
	|	СУММА(ИсточникДанных.ВаловаяПрибыль) КАК ВаловаяПрибыль,
	|	СУММА(ИсточникДанных.Выручка) КАК Выручка,
	|	СУММА(ИсточникДанных.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТ_Раздел3
	|ИЗ
	|	ИсточникДанных КАК ИсточникДанных
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсточникДанных.Подразделение,
	|	ИсточникДанных.Номенклатура,
	|	ИсточникДанных.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Раздел0.РазделительКлассификации КАК РазделительКлассификации,
	|	ВТ_Раздел0.РазделКлассификации КАК РазделКлассификации,
	|	ВТ_Раздел0.Номенклатура КАК Номенклатура,
	|	ВТ_Раздел0.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ВТ_Раздел0.ВаловаяПрибыль > 0
	|			ТОГДА ВТ_Раздел0.ВаловаяПрибыль
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВаловаяПрибыль,
	|	ВЫБОР
	|		КОГДА ВТ_Раздел0.Выручка > 0
	|			ТОГДА ВТ_Раздел0.Выручка
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Выручка,
	|	ВЫБОР
	|		КОГДА ВТ_Раздел0.Количество > 0
	|			ТОГДА ВТ_Раздел0.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Количество
	|ИЗ
	|	ВТ_Раздел0 КАК ВТ_Раздел0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Раздел1.РазделительКлассификации,
	|	ВТ_Раздел1.РазделКлассификации,
	|	ВТ_Раздел1.Номенклатура,
	|	ВТ_Раздел1.Характеристика,
	|	ВЫБОР
	|		КОГДА ВТ_Раздел1.ВаловаяПрибыль > 0
	|			ТОГДА ВТ_Раздел1.ВаловаяПрибыль
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВТ_Раздел1.Выручка > 0
	|			ТОГДА ВТ_Раздел1.Выручка
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВТ_Раздел1.Количество > 0
	|			ТОГДА ВТ_Раздел1.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|ИЗ
	|	ВТ_Раздел1 КАК ВТ_Раздел1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Раздел2.РазделительКлассификации,
	|	ВТ_Раздел2.РазделКлассификации,
	|	ВТ_Раздел2.Номенклатура,
	|	ВТ_Раздел2.Характеристика,
	|	ВЫБОР
	|		КОГДА ВТ_Раздел2.ВаловаяПрибыль > 0
	|			ТОГДА ВТ_Раздел2.ВаловаяПрибыль
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВТ_Раздел2.Выручка > 0
	|			ТОГДА ВТ_Раздел2.Выручка
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВТ_Раздел2.Количество > 0
	|			ТОГДА ВТ_Раздел2.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|ИЗ
	|	ВТ_Раздел2 КАК ВТ_Раздел2";
	
	Период = ОбщегоНазначенияУТКлиентСервер.РасширенныйПериод(
		?(ДатаКлассификации = Неопределено, ТекущаяДатаСеанса(), ДатаКлассификации), 
			ПериодКлассификации, -КоличествоПериодовКлассификации);
	
	Запрос.УстановитьПараметр("НачалоПериода", Период.ДатаНачала);
	Запрос.УстановитьПараметр("ОкончаниеПериода", Период.ДатаОкончания);
	Запрос.УстановитьПараметр("УчитыватьПравилаВнутреннегоТовародвижения", УчитыватьПравилаВнутреннегоТовародвижения);

	РезультатКлассификации = Запрос.Выполнить().Выгрузить();
	
	Если ИспользоватьКлассификациюПоВаловойПрибыли Тогда
		ВыполнитьABCКлассификацию(РезультатКлассификации, "ВаловаяПрибыль");
		ОбновитьДанныеКлассификацииНоменклатуры(РезультатКлассификации, Перечисления.ТипыКлассификации.ABC, 
			Перечисления.ТипыПараметровКлассификации.ВаловаяПрибыль, Период.ДатаОкончания, Перечисления.ABCКлассификация.НеКлассифицирован);
	КонецЕсли;
	
	Если ИспользоватьКлассификациюПоВыручке Тогда
		ВыполнитьABCКлассификацию(РезультатКлассификации, "Выручка");
		ОбновитьДанныеКлассификацииНоменклатуры(РезультатКлассификации, Перечисления.ТипыКлассификации.ABC, 
			Перечисления.ТипыПараметровКлассификации.Выручка, Период.ДатаОкончания, Перечисления.ABCКлассификация.НеКлассифицирован);
	КонецЕсли;
	
	Если ИспользоватьКлассификациюПоКоличеству Тогда
		ВыполнитьABCКлассификацию(РезультатКлассификации, "Количество");
		ОбновитьДанныеКлассификацииНоменклатуры(РезультатКлассификации, Перечисления.ТипыКлассификации.ABC, 
			Перечисления.ТипыПараметровКлассификации.Количество, Период.ДатаОкончания, Перечисления.ABCКлассификация.НеКлассифицирован);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет расчет XYZ класса номенклатуры и записывает его в регистр
//
//	Параметры:
//		ДатаКлассификации - Дата - дата окончания периода, за который нужно выбрать данные для
//			классификации, если Неопределенно - используется текущая дата.
//
Процедура ВыполнитьXYZКлассификациюНоменклатуры(ДатаКлассификации = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользоватьКлассификациюПоВаловойПрибыли = ПолучитьФункциональнуюОпцию("ИспользоватьABCXYZКлассификациюНоменклатурыПоВаловойПрибыли");
	ИспользоватьКлассификациюПоВыручке = ПолучитьФункциональнуюОпцию("ИспользоватьABCXYZКлассификациюНоменклатурыПоВыручке");
	ИспользоватьКлассификациюПоКоличеству = ПолучитьФункциональнуюОпцию("ИспользоватьABCXYZКлассификациюНоменклатурыПоКоличествуПродаж");
	УчитыватьПравилаВнутреннегоТовародвижения = Константы.УчитыватьПравилаВнутреннегоТовародвиженияПриXYZКлассификацииНоменклатуры.Получить();
	
	Если НЕ ИспользоватьКлассификациюПоВаловойПрибыли И НЕ ИспользоватьКлассификациюПоВыручке И НЕ ИспользоватьКлассификациюПоКоличеству Тогда
		Возврат;
	КонецЕсли;
	
	ПериодКлассификации = Константы.ПериодXYZКлассификацииНоменклатуры.Получить();
	КоличествоПериодовКлассификации = Константы.КоличествоПериодовXYZКлассификацииНоменклатуры.Получить();
	ПодпериодКлассификации = Константы.ПодпериодXYZКлассификацииНоменклатуры.Получить();
	
	Если ПериодКлассификации.Пустая() ИЛИ КоличествоПериодовКлассификации = 0 ИЛИ ПодпериодКлассификации.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Период = ОбщегоНазначенияУТКлиентСервер.РасширенныйПериод(
		?(ДатаКлассификации = Неопределено, ТекущаяДатаСеанса(), ДатаКлассификации),
		ПериодКлассификации,
		- КоличествоПериодовКлассификации);
	
	Запрос.УстановитьПараметр("НачалоПериода",    Период.ДатаНачала);
	Запрос.УстановитьПараметр("ОкончаниеПериода", Период.ДатаОкончания);
	Запрос.УстановитьПараметр("УчитыватьПравилаВнутреннегоТовародвижения", УчитыватьПравилаВнутреннегоТовародвижения);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаНоменклатуры.МестоХранения КАК Склад,
	|	ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|	ВыручкаИСебестоимостьПродажОбороты.Подразделение КАК Подразделение,
	|	ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|	ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|	ВыручкаИСебестоимостьПродажОбороты.Период КАК Период,
	|	ВыручкаИСебестоимостьПродажОбороты.СуммаВыручкиОборот - ВыручкаИСебестоимостьПродажОбороты.СтоимостьОборот - ВыручкаИСебестоимостьПродажОбороты.ДопРасходыОборот КАК ВаловаяПрибыль,
	|	ВыручкаИСебестоимостьПродажОбороты.СуммаВыручкиОборот КАК Выручка,
	|	ВыручкаИСебестоимостьПродажОбороты.КоличествоОборот КАК Количество
	|ПОМЕСТИТЬ ИсточникДанных
	|ИЗ
	|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(&НачалоПериодаПодстановка, &КонецПериодаПодстановка, МЕСЯЦ,) КАК ВыручкаИСебестоимостьПродажОбороты
	|ГДЕ
	|	ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаПоПартнерам.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|	И ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаНоменклатуры.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсточникДанных.Номенклатура   КАК Номенклатура,
	|	ИсточникДанных.Характеристика КАК Характеристика,
	|	ИсточникДанных.Склад          КАК Склад
	|ПОМЕСТИТЬ ВтТовары
	|ИЗ
	|	ИсточникДанных КАК ИсточникДанных
	|ГДЕ
	|	&УчитыватьПравилаВнутреннегоТовародвижения
	|	И ТИПЗНАЧЕНИЯ(ИсточникДанных.Склад) = ТИП(Справочник.Склады)
	|	И ИсточникДанных.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)";
	
	ПодстановкаНачалоПериода = "";
	ПодстановкаКонецПериода = "";
	Если ПодпериодКлассификации = Перечисления.Периодичность.Год Тогда
		Подстановка = "РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(&НачалоПериодаПодстановка, &КонецПериодаПодстановка, ГОД,)";
		ПодстановкаНачалоПериода = "НАЧАЛОПЕРИОДА(&НачалоПериода, ГОД)";
		ПодстановкаКонецПериода = "КОНЕЦПЕРИОДА(&ОкончаниеПериода, ГОД)";
	ИначеЕсли ПодпериодКлассификации = Перечисления.Периодичность.Декада Тогда
		Подстановка = "РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(&НачалоПериодаПодстановка, &КонецПериодаПодстановка, ДЕКАДА,)";
		ПодстановкаНачалоПериода = "НАЧАЛОПЕРИОДА(&НачалоПериода, ДЕКАДА)";
		ПодстановкаКонецПериода = "КОНЕЦПЕРИОДА(&ОкончаниеПериода, ДЕКАДА)";
	ИначеЕсли ПодпериодКлассификации = Перечисления.Периодичность.День Тогда
		Подстановка = "РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(&НачалоПериодаПодстановка, &КонецПериодаПодстановка, ДЕНЬ,)";
		ПодстановкаНачалоПериода = "НАЧАЛОПЕРИОДА(&НачалоПериода, ДЕНЬ)";
		ПодстановкаКонецПериода = "КОНЕЦПЕРИОДА(&ОкончаниеПериода, ДЕНЬ)";
	ИначеЕсли ПодпериодКлассификации = Перечисления.Периодичность.Квартал Тогда
		Подстановка = "РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(&НачалоПериодаПодстановка, &КонецПериодаПодстановка, КВАРТАЛ,)";
		ПодстановкаНачалоПериода = "НАЧАЛОПЕРИОДА(&НачалоПериода, КВАРТАЛ)";
		ПодстановкаКонецПериода = "КОНЕЦПЕРИОДА(&ОкончаниеПериода, КВАРТАЛ)";
	ИначеЕсли ПодпериодКлассификации = Перечисления.Периодичность.Месяц Тогда
		Подстановка = "РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(&НачалоПериодаПодстановка, &КонецПериодаПодстановка, МЕСЯЦ,)";
		ПодстановкаНачалоПериода = "НАЧАЛОПЕРИОДА(&НачалоПериода, МЕСЯЦ)";
		ПодстановкаКонецПериода = "КОНЕЦПЕРИОДА(&ОкончаниеПериода, МЕСЯЦ)";
	ИначеЕсли ПодпериодКлассификации = Перечисления.Периодичность.Неделя Тогда
		Подстановка = "РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(&НачалоПериодаПодстановка, &КонецПериодаПодстановка, НЕДЕЛЯ,)";
		ПодстановкаНачалоПериода = "НАЧАЛОПЕРИОДА(&НачалоПериода, НЕДЕЛЯ)";
		ПодстановкаКонецПериода = "КОНЕЦПЕРИОДА(&ОкончаниеПериода, НЕДЕЛЯ)";
	ИначеЕсли ПодпериодКлассификации = Перечисления.Периодичность.Полугодие Тогда
		Подстановка = "РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(&НачалоПериодаПодстановка, &КонецПериодаПодстановка, ПОЛУГОДИЕ,)";
		ПодстановкаНачалоПериода = "НАЧАЛОПЕРИОДА(&НачалоПериода, ПОЛУГОДИЕ)";
		ПодстановкаКонецПериода = "КОНЕЦПЕРИОДА(&ОкончаниеПериода, ПОЛУГОДИЕ)";
	КонецЕсли;
	ЗаменяемыйТекст = "РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(&НачалоПериодаПодстановка, &КонецПериодаПодстановка, МЕСЯЦ,)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, ЗаменяемыйТекст, Подстановка);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&НачалоПериодаПодстановка", ПодстановкаНачалоПериода);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&КонецПериодаПодстановка", ПодстановкаКонецПериода);

	Запрос.Выполнить();
	
	Запрос.Текст = РегистрыСведений.СхемыОбеспечения.ВременнаяТаблицаСпособыОбеспечения("ВЫЧИСЛЯТЬ");
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	0 КАК РазделительКлассификации,
	|	НЕОПРЕДЕЛЕНО КАК РазделКлассификации,
	|	ИсточникДанных.Номенклатура КАК Номенклатура,
	|	ИсточникДанных.Характеристика КАК Характеристика,
	|	ИсточникДанных.Период КАК Период,
	|	ИсточникДанных.ВаловаяПрибыль КАК ВаловаяПрибыль,
	|	ИсточникДанных.Выручка КАК Выручка,
	|	ИсточникДанных.Количество КАК Количество
	|ИЗ
	|	ИсточникДанных КАК ИсточникДанных
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1,
	|	ИсточникДанных.Склад,
	|	ИсточникДанных.Номенклатура,
	|	ИсточникДанных.Характеристика,
	|	ИсточникДанных.Период,
	|	ИсточникДанных.ВаловаяПрибыль,
	|	ИсточникДанных.Выручка,
	|	ИсточникДанных.Количество
	|ИЗ
	|	ИсточникДанных КАК ИсточникДанных
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ИсточникДанных.Склад) = ТИП(Справочник.Склады)
	|	И ИсточникДанных.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1,
	|	ЕСТЬNULL(СпрСпособыОбеспечения.ИсточникОбеспеченияПотребностей, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)),
	|	ИсточникДанных.Номенклатура,
	|	ИсточникДанных.Характеристика,
	|	ИсточникДанных.Период,
	|	ИсточникДанных.ВаловаяПрибыль,
	|	ИсточникДанных.Выручка,
	|	ИсточникДанных.Количество
	|ИЗ
	|	ИсточникДанных КАК ИсточникДанных
	|			
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВтСпособыОбеспечения КАК ТаблицаСпособовОбеспечения
	|			ПО ТаблицаСпособовОбеспечения.Склад          = ИсточникДанных.Склад
	|			 И ТаблицаСпособовОбеспечения.Номенклатура   = ИсточникДанных.Номенклатура
	|			 И ТаблицаСпособовОбеспечения.Характеристика = ИсточникДанных.Характеристика
	|			
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОбеспеченияПотребностей КАК СпрСпособыОбеспечения
	|			ПО СпрСпособыОбеспечения.Ссылка = ТаблицаСпособовОбеспечения.СпособОбеспеченияПотребностей
	|ГДЕ
	|	&УчитыватьПравилаВнутреннегоТовародвижения
	|	И ТИПЗНАЧЕНИЯ(ИсточникДанных.Склад) = ТИП(Справочник.Склады)
	|	И ИсточникДанных.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|	И СпрСпособыОбеспечения.ТипОбеспечения = ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.Перемещение)
	|	И СпрСпособыОбеспечения.ИсточникОбеспеченияПотребностей ССЫЛКА Справочник.Склады
	|	И СпрСпособыОбеспечения.ИсточникОбеспеченияПотребностей <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	ИсточникДанных.Организация,
	|	ИсточникДанных.Номенклатура,
	|	ИсточникДанных.Характеристика,
	|	ИсточникДанных.Период,
	|	ИсточникДанных.ВаловаяПрибыль,
	|	ИсточникДанных.Выручка,
	|	ИсточникДанных.Количество
	|ИЗ
	|	ИсточникДанных КАК ИсточникДанных
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3,
	|	ИсточникДанных.Подразделение,
	|	ИсточникДанных.Номенклатура,
	|	ИсточникДанных.Характеристика,
	|	ИсточникДанных.Период,
	|	ИсточникДанных.ВаловаяПрибыль,
	|	ИсточникДанных.Выручка,
	|	ИсточникДанных.Количество
	|ИЗ
	|	ИсточникДанных КАК ИсточникДанных
	|
	|УПОРЯДОЧИТЬ ПО
	|	РазделительКлассификации
	|ИТОГИ
	|	МАКСИМУМ(РазделительКлассификации),
	|	СУММА(ВаловаяПрибыль),
	|	СУММА(Выручка),
	|	СУММА(Количество)
	|ПО
	|	РазделКлассификации,
	|	Номенклатура,
	|	Характеристика,
	|	Период ПЕРИОДАМИ(МЕСЯЦ, &НачалоПериодаПодстановка, &КонецПериодаПодстановка)";
	
	Подстановка = "";
	ПодстановкаНачалоПериода = "";
	ПодстановкаКонецПериода = "";
	Если ПодпериодКлассификации = Перечисления.Периодичность.Год Тогда
		Подстановка = "Период ПЕРИОДАМИ(ГОД, &НачалоПериодаПодстановка, &КонецПериодаПодстановка)";
		ПодстановкаНачалоПериода = "НАЧАЛОПЕРИОДА(&НачалоПериода, ГОД)";
		ПодстановкаКонецПериода = "КОНЕЦПЕРИОДА(&ОкончаниеПериода, ГОД)";
	ИначеЕсли ПодпериодКлассификации = Перечисления.Периодичность.Декада Тогда
		Подстановка = "Период ПЕРИОДАМИ(ДЕКАДА, &НачалоПериодаПодстановка, &КонецПериодаПодстановка)";
		ПодстановкаНачалоПериода = "НАЧАЛОПЕРИОДА(&НачалоПериода, ДЕКАДА)";
		ПодстановкаКонецПериода = "КОНЕЦПЕРИОДА(&ОкончаниеПериода, ДЕКАДА)";
	ИначеЕсли ПодпериодКлассификации = Перечисления.Периодичность.День Тогда
		Подстановка = "Период ПЕРИОДАМИ(ДЕНЬ, &НачалоПериодаПодстановка, &КонецПериодаПодстановка)";
		ПодстановкаНачалоПериода = "НАЧАЛОПЕРИОДА(&НачалоПериода, ДЕНЬ)";
		ПодстановкаКонецПериода = "КОНЕЦПЕРИОДА(&ОкончаниеПериода, ДЕНЬ)";
	ИначеЕсли ПодпериодКлассификации = Перечисления.Периодичность.Квартал Тогда
		Подстановка = "Период ПЕРИОДАМИ(КВАРТАЛ, &НачалоПериодаПодстановка, &КонецПериодаПодстановка)";
		ПодстановкаНачалоПериода = "НАЧАЛОПЕРИОДА(&НачалоПериода, КВАРТАЛ)";
		ПодстановкаКонецПериода = "КОНЕЦПЕРИОДА(&ОкончаниеПериода, КВАРТАЛ)";
	ИначеЕсли ПодпериодКлассификации = Перечисления.Периодичность.Месяц Тогда
		Подстановка = "Период ПЕРИОДАМИ(МЕСЯЦ, &НачалоПериодаПодстановка, &КонецПериодаПодстановка)";
		ПодстановкаНачалоПериода = "НАЧАЛОПЕРИОДА(&НачалоПериода, МЕСЯЦ)";
		ПодстановкаКонецПериода = "КОНЕЦПЕРИОДА(&ОкончаниеПериода, МЕСЯЦ)";
	ИначеЕсли ПодпериодКлассификации = Перечисления.Периодичность.Неделя Тогда
		Подстановка = "Период ПЕРИОДАМИ(НЕДЕЛЯ, &НачалоПериодаПодстановка, &КонецПериодаПодстановка)";
		ПодстановкаНачалоПериода = "НАЧАЛОПЕРИОДА(&НачалоПериода, НЕДЕЛЯ)";
		ПодстановкаКонецПериода = "КОНЕЦПЕРИОДА(&ОкончаниеПериода, НЕДЕЛЯ)";
	ИначеЕсли ПодпериодКлассификации = Перечисления.Периодичность.Полугодие Тогда
		Подстановка = "Период ПЕРИОДАМИ(ПОЛУГОДИЕ, &НачалоПериодаПодстановка, &КонецПериодаПодстановка)";
		ПодстановкаНачалоПериода = "НАЧАЛОПЕРИОДА(&НачалоПериода, ПОЛУГОДИЕ)";
		ПодстановкаКонецПериода = "КОНЕЦПЕРИОДА(&ОкончаниеПериода, ПОЛУГОДИЕ)";
	КонецЕсли;
	ЗаменяемыйТекст = "Период ПЕРИОДАМИ(МЕСЯЦ, &НачалоПериодаПодстановка, &КонецПериодаПодстановка)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, ЗаменяемыйТекст, Подстановка);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&НачалоПериодаПодстановка", ПодстановкаНачалоПериода);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&КонецПериодаПодстановка", ПодстановкаКонецПериода);
	
	ИсточникДанных = Новый Структура("ИсточникДанных", Запрос.Выполнить());
	
	Если ИспользоватьКлассификациюПоВаловойПрибыли Тогда
		
		РезультатКлассификации =
			ВыполнитьXYZКлассификацию(
				ИсточникДанных, 
				"ВаловаяПрибыль", 
				"РазделКлассификации, Номенклатура, Характеристика");
		ОбновитьДанныеКлассификацииНоменклатуры(
			РезультатКлассификации,
			Перечисления.ТипыКлассификации.XYZ,
			Перечисления.ТипыПараметровКлассификации.ВаловаяПрибыль,
			Период.ДатаОкончания,
			Перечисления.XYZКлассификация.НеКлассифицирован);
		
	КонецЕсли;
	
	Если ИспользоватьКлассификациюПоВыручке Тогда
	
		РезультатКлассификации =
			ВыполнитьXYZКлассификацию(
				ИсточникДанных,
				"Выручка",
				"РазделКлассификации, Номенклатура, Характеристика");
		ОбновитьДанныеКлассификацииНоменклатуры(
			РезультатКлассификации,
			Перечисления.ТипыКлассификации.XYZ,
			Перечисления.ТипыПараметровКлассификации.Выручка,
			Период.ДатаОкончания,
			Перечисления.XYZКлассификация.НеКлассифицирован);
		
	КонецЕсли;
	
	Если ИспользоватьКлассификациюПоКоличеству Тогда
		
		РезультатКлассификации =
			ВыполнитьXYZКлассификацию(
				ИсточникДанных,
				"Количество",
				"РазделКлассификации, Номенклатура, Характеристика");
		ОбновитьДанныеКлассификацииНоменклатуры(
			РезультатКлассификации,
			Перечисления.ТипыКлассификации.XYZ,
			Перечисления.ТипыПараметровКлассификации.Количество,
			Период.ДатаОкончания,
			Перечисления.XYZКлассификация.НеКлассифицирован);

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Выполняет классификацию объектов с использованием ABC-анализа.
// Исходными данными для анализа является таблица значений,
// содержащая значения параметра классификации для анализируемых объектов.
// Результат анализа помещается в добавляемую колонку "ABCКласс".
//
// Параметры:
//  ИсточникДанных - ТаблицаЗначений - таблица с колонкой "ЗначениеПараметраКлассификации",
//                   содержащей значения параметра, по которому производится
//                   классификация, для текущего объекта.
//  ИмяПараметраКлассификации - Строка - имя колонки в источнике данных, содержащей значение
//                              параметра классификации.
//
Процедура ВыполнитьABCКлассификацию(ИсточникДанных, ИмяПараметраКлассификации)
	
	// Источник данных пуст, классификация не требуется.
	Если ИсточникДанных.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// Классификация без разделения.
	Если ИсточникДанных.Колонки.Найти("РазделительКлассификации") = Неопределено Тогда
		
		ИсточникДанных.Колонки.Добавить("РазделительКлассификации");
		ИсточникДанных.ЗаполнитьЗначения(0, "РазделительКлассификации");
		
	КонецЕсли;
	
	// Источник данных упорядочивается по возрастанию разделителя и убыванию параметра классификации.
	КолонкиСортировки = "РазделительКлассификации Возр";
	
	ЕстьРазделКлассификации = Ложь;
	
	Если ИсточникДанных.Колонки.Найти("РазделКлассификации") <> Неопределено Тогда
		
		КолонкиСортировки = КолонкиСортировки + ", РазделКлассификации Возр";
		ЕстьРазделКлассификации = Истина;
		
	КонецЕсли;
	
	КолонкиСортировки = КолонкиСортировки + ", " + ИмяПараметраКлассификации + " Убыв";
	
	Если ИсточникДанных.Колонки.Найти("Номенклатура") <> Неопределено Тогда
		
		КолонкиСортировки = КолонкиСортировки + ", Номенклатура Возр";
		
		Если ИсточникДанных.Колонки.Найти("Характеристика") <> Неопределено Тогда
			
			КолонкиСортировки = КолонкиСортировки + ", Характеристика Возр";
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИсточникДанных.Сортировать(КолонкиСортировки, Новый СравнениеЗначений);
	
	// В колонку "Класс" будет помещен результат классификации.
	Если ИсточникДанных.Колонки.Найти("Класс") = Неопределено Тогда
		
		ИсточникДанных.Колонки.Добавить("Класс");
		
	КонецЕсли;
	
	ИсточникДанных.ЗаполнитьЗначения(Перечисления.ABCКлассификация.CКласс, "Класс");
	
	// К колонку "ЗначениеПараметраКлассификации" будет помещено значение, по которому выполнена классификация.
	Если ИсточникДанных.Колонки.Найти("ЗначениеПараметраКлассификации") = Неопределено Тогда
		
		ИсточникДанных.Колонки.Добавить("ЗначениеПараметраКлассификации");
		
	КонецЕсли;
	
	ИсточникДанных.ЗаполнитьЗначения(0, "ЗначениеПараметраКлассификации");
	
	ЗначениеПараметраКлассификацииИтог = 0;
	ДоляНарастающимИтогом = Новый Массив;
	ТекущаяДоляНарастающимИтогом = 0;
	
	ИндексСтрокиИсточникаДанных = 0;
	СмещениеСтрокиИсточникаДанных = 0;
	
	Пока ИндексСтрокиИсточникаДанных < ИсточникДанных.Количество() Цикл
		
		// Общий итог по разделителю.
		ЗначениеПараметраКлассификацииИтог = ЗначениеПараметраКлассификацииИтог + ИсточникДанных[ИндексСтрокиИсточникаДанных][ИмяПараметраКлассификации];
		ДоляНарастающимИтогом.Добавить(ИсточникДанных[ИндексСтрокиИсточникаДанных][ИмяПараметраКлассификации]);
		ИсточникДанных[ИндексСтрокиИсточникаДанных].ЗначениеПараметраКлассификации = ИсточникДанных[ИндексСтрокиИсточникаДанных][ИмяПараметраКлассификации];
		
		// Последняя строка или данные по текущему разделителю или разделу классификации закончились.
		Если ИндексСтрокиИсточникаДанных = ИсточникДанных.Количество() - 1
			ИЛИ ИсточникДанных[ИндексСтрокиИсточникаДанных].РазделительКлассификации <> ИсточникДанных[ИндексСтрокиИсточникаДанных + 1].РазделительКлассификации
			ИЛИ (ЕстьРазделКлассификации И ИсточникДанных[ИндексСтрокиИсточникаДанных].РазделКлассификации <> ИсточникДанных[ИндексСтрокиИсточникаДанных + 1].РазделКлассификации) Тогда
			
			ДоляНарастающимИтогомСумма = 0;
			
			Для Индекс = 0 По ДоляНарастающимИтогом.ВГраница() Цикл
				
				Если ЗначениеПараметраКлассификацииИтог <> 0 Тогда
					
					ТекущаяДоляНарастающимИтогом = ТекущаяДоляНарастающимИтогом + ДоляНарастающимИтогом[Индекс] * 100 / ЗначениеПараметраКлассификацииИтог;
					
				КонецЕсли;
				
				ДоляНарастающимИтогом[Индекс] = ТекущаяДоляНарастающимИтогом;
				ДоляНарастающимИтогомСумма = ДоляНарастающимИтогомСумма + ТекущаяДоляНарастающимИтогом;
				
			КонецЦикла;
			
			СреднееЗначение = ДоляНарастающимИтогомСумма / (ДоляНарастающимИтогом.Количество() + 1);
			
			ТекущийКласс = Перечисления.ABCКлассификация.AКласс;
			
			Для Индекс = 0 По ДоляНарастающимИтогом.ВГраница() - 1 Цикл
				
				Если ДоляНарастающимИтогом[Индекс] > СреднееЗначение Тогда
					
					Если ТекущийКласс = Перечисления.ABCКлассификация.AКласс Тогда
						
						ТекущийКласс = Перечисления.ABCКлассификация.BКласс;
						
					Иначе
						
						Прервать;
						
					КонецЕсли;
					
					СреднееЗначение = ДоляНарастающимИтогомСумма / (ДоляНарастающимИтогом.Количество() - Индекс);
					
				КонецЕсли;
				
				ДоляНарастающимИтогомСумма = ДоляНарастающимИтогомСумма - ДоляНарастающимИтогом[Индекс];
				ИсточникДанных[СмещениеСтрокиИсточникаДанных + Индекс].Класс = ТекущийКласс;
				
			КонецЦикла;
			
			ЗначениеПараметраКлассификацииИтог = 0;
			ДоляНарастающимИтогом = Новый Массив;
			ТекущаяДоляНарастающимИтогом = 0;
			
			СмещениеСтрокиИсточникаДанных = ИндексСтрокиИсточникаДанных + 1;
			
		КонецЕсли;
		
		ИндексСтрокиИсточникаДанных = ИндексСтрокиИсточникаДанных + 1;
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет классификацию объектов с использованием XYZ-анализа.
// Исходными данными для анализа является результат запроса,
// содержащий итоговые значения параметра классификации по анализируемым
// объектам и периодам.
// Результат анализа помещается в добавляемую колонку "XYZКласс".
//
// Параметры:
//  ИсточникДанных - РезультатЗапроса - результат запроса, содержащий ключевые поля объекта классификации,
//                   периода и поле "ЗначениеПараметраКлассификации", содержащей
//                   значения параметра, по которому производится
//                   классификация, для текущего объекта.
//  ИмяПараметраКлассификации - Строка - имя колонки в источнике данных, содержащей значение
//                              параметра классификации.
//  КлючиОбъектаКлассификации - Строка - строка, содержащая список имен полей, разделенный запятыми,
//                              идентифицирующих объект классификации. 
//
// Возвращаемое значение: 
//  ТаблицаЗначений - Таблица, содержащая результат классификации.
//
Функция ВыполнитьXYZКлассификацию(ИсточникДанных, ИмяПараметраКлассификации, Знач КлючиОбъектаКлассификации) Экспорт
	
	Результат = Новый ТаблицаЗначений;
	
	Для каждого Колонка Из ИсточникДанных.ИсточникДанных.Колонки Цикл
		
		Результат.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
		
	КонецЦикла;
	
	Результат.Колонки.Добавить("Класс", Новый ОписаниеТипов("ПеречислениеСсылка.XYZКлассификация, ПеречислениеСсылка.ABCКлассификация"));
	Результат.Колонки.Добавить("ЗначениеПараметраКлассификации", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15, 2));
	
	Если ИсточникДанных.ИсточникДанных.Пустой() Тогда
		
		Возврат Результат;
		
	КонецЕсли;
	
	ОбъектыКлассификацииВыборка = Новый Массив(СтрЧислоСтрок(СтрЗаменить(КлючиОбъектаКлассификации, ",", Символы.ПС)));
	
	ИндексОбъектаКлассификации = 0;
	ОбъектыКлассификацииВыборка[ИндексОбъектаКлассификации] = ИсточникДанных.ИсточникДанных.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Истина Цикл
		
		Если ОбъектыКлассификацииВыборка[ИндексОбъектаКлассификации] = Неопределено Тогда
			
			// Формирование новой выборки.
			ОбъектыКлассификацииВыборка[ИндексОбъектаКлассификации] = ОбъектыКлассификацииВыборка[ИндексОбъектаКлассификации - 1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
		КонецЕсли;
		
		Если ОбъектыКлассификацииВыборка[ИндексОбъектаКлассификации].Следующий() Тогда
			
			Если ИндексОбъектаКлассификации = ОбъектыКлассификацииВыборка.ВГраница() Тогда // Последний уровень.
				
				НоваяСтрока = Результат.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ОбъектыКлассификацииВыборка[ИндексОбъектаКлассификации]);
				
				ВыборкаПериод = ОбъектыКлассификацииВыборка[ИндексОбъектаКлассификации].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период", "Все");
				
				КоличествоПериодов = ВыборкаПериод.Количество();
				СреднееЗначение = ОбъектыКлассификацииВыборка[ИндексОбъектаКлассификации][ИмяПараметраКлассификации] / КоличествоПериодов;
				ЗначениеПараметраКлассификации = 0;
				
				Пока ВыборкаПериод.Следующий() Цикл
					
					ЗначениеПараметраКлассификации = ЗначениеПараметраКлассификации + Pow((?(ВыборкаПериод[ИмяПараметраКлассификации] = Null, 0, ВыборкаПериод[ИмяПараметраКлассификации]) - СреднееЗначение), 2);
					
				КонецЦикла;
				
				НоваяСтрока[ИмяПараметраКлассификации] = ?(СреднееЗначение <> 0, Sqrt(ЗначениеПараметраКлассификации / КоличествоПериодов) * 100 / СреднееЗначение, 0);
				
				Если НоваяСтрока[ИмяПараметраКлассификации] < 0 Тогда // среднее значение могло быть отрицательным из-за возвратов
					НоваяСтрока[ИмяПараметраКлассификации] = - НоваяСтрока[ИмяПараметраКлассификации];
				КонецЕсли;
				
				НоваяСтрока.ЗначениеПараметраКлассификации = НоваяСтрока[ИмяПараметраКлассификации];
				
			Иначе
				
				// Перейти на следующий уровень.
				ИндексОбъектаКлассификации = ИндексОбъектаКлассификации + 1;
				
			КонецЕсли;
			
		Иначе
			
			// На верхнем уровне записи закончились.
			// Обработка завершена.
			Если ИндексОбъектаКлассификации = 0 Тогда
				
				Прервать;
				
			// На текущем уровне записи закончились.
			// Необходимо перейти к следующей записи на предыдущем уровне.
			Иначе
			
				ОбъектыКлассификацииВыборка[ИндексОбъектаКлассификации] = Неопределено;
				ИндексОбъектаКлассификации = ИндексОбъектаКлассификации - 1;
				Продолжить;
				
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЦикла;
	
	Результат.ЗаполнитьЗначения(Перечисления.XYZКлассификация.XКласс, "Класс");
	
	КолонкиСортировки = "РазделительКлассификации Возр";
	
	ЕстьРазделКлассификации = Ложь;
	
	Если Результат.Колонки.Найти("РазделКлассификации") <> Неопределено Тогда
		
		КолонкиСортировки = КолонкиСортировки + ", РазделКлассификации Возр";
		ЕстьРазделКлассификации = Истина;
		
	КонецЕсли;
	
	КолонкиСортировки = КолонкиСортировки + ", " + ИмяПараметраКлассификации + " Убыв";
	
	Если Результат.Колонки.Найти("Номенклатура") <> Неопределено Тогда
		
		КолонкиСортировки = КолонкиСортировки + ", Номенклатура Возр";
		
		Если Результат.Колонки.Найти("Характеристика") <> Неопределено Тогда
			
			КолонкиСортировки = КолонкиСортировки + ", Характеристика Возр";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Результат.Сортировать(КолонкиСортировки, Новый СравнениеЗначений);
	
	ЗначениеПараметраКлассификацииИтог = 0;
	ДоляНарастающимИтогом = Новый Массив;
	ТекущаяДоляНарастающимИтогом = 0;
	
	ИндексСтрокиРезультата = 0;
	СмещениеСтрокиРезультата = 0;
	
	Пока ИндексСтрокиРезультата < Результат.Количество() Цикл
		
		// Общий итог по разделителю.
		ЗначениеПараметраКлассификацииИтог = ЗначениеПараметраКлассификацииИтог + Результат[ИндексСтрокиРезультата][ИмяПараметраКлассификации];
		ДоляНарастающимИтогом.Добавить(Результат[ИндексСтрокиРезультата][ИмяПараметраКлассификации]);
		Результат[ИндексСтрокиРезультата].ЗначениеПараметраКлассификации = Результат[ИндексСтрокиРезультата][ИмяПараметраКлассификации];
		
		// Последняя строка или данные по текущему разделителю или разделу классификации закончились.
		Если ИндексСтрокиРезультата = Результат.Количество() - 1
			ИЛИ Результат[ИндексСтрокиРезультата].РазделительКлассификации <> Результат[ИндексСтрокиРезультата + 1].РазделительКлассификации
			ИЛИ (ЕстьРазделКлассификации И Результат[ИндексСтрокиРезультата].РазделКлассификации <> Результат[ИндексСтрокиРезультата + 1].РазделКлассификации) Тогда
			
			ДоляНарастающимИтогомСумма = 0;
			
			Для Индекс = 0 По ДоляНарастающимИтогом.ВГраница() Цикл
				
				Если ЗначениеПараметраКлассификацииИтог <> 0 Тогда
					
					ТекущаяДоляНарастающимИтогом = ТекущаяДоляНарастающимИтогом + ?(ЗначениеПараметраКлассификацииИтог = 0, 0, ДоляНарастающимИтогом[Индекс] * 100 / ЗначениеПараметраКлассификацииИтог);
					
				КонецЕсли;
				
				ДоляНарастающимИтогом[Индекс] = ТекущаяДоляНарастающимИтогом;
				ДоляНарастающимИтогомСумма = ДоляНарастающимИтогомСумма + ТекущаяДоляНарастающимИтогом;
				
			КонецЦикла;
			
			СреднееЗначение = ДоляНарастающимИтогомСумма / (ДоляНарастающимИтогом.Количество() + 1);
			
			ТекущийКласс = Перечисления.XYZКлассификация.ZКласс;
			
			Для Индекс = 0 По ДоляНарастающимИтогом.ВГраница() - 1 Цикл
				
				Если ДоляНарастающимИтогом[Индекс] > СреднееЗначение Тогда
					
					Если ТекущийКласс = Перечисления.XYZКлассификация.ZКласс Тогда
						
						ТекущийКласс = Перечисления.XYZКлассификация.YКласс;
						
					Иначе
						
						Прервать;
						
					КонецЕсли;
					
					СреднееЗначение = ДоляНарастающимИтогомСумма / (ДоляНарастающимИтогом.Количество() - Индекс);
					
				КонецЕсли;
				
				ДоляНарастающимИтогомСумма = ДоляНарастающимИтогомСумма - ДоляНарастающимИтогом[Индекс];
				Результат[СмещениеСтрокиРезультата + Индекс].Класс = ТекущийКласс;
				
			КонецЦикла;
			
			ЗначениеПараметраКлассификацииИтог = 0;
			ДоляНарастающимИтогом = Новый Массив;
			ТекущаяДоляНарастающимИтогом = 0;
			
			СмещениеСтрокиРезультата = ИндексСтрокиРезультата + 1;
			
		КонецЕсли;
		
		ИндексСтрокиРезультата = ИндексСтрокиРезультата + 1;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Выполняет проверку, является ли дата выходным днем календаря.
// Параметры:
//  ДатаКалендаря - Дата - проверяемая дата
//  Календарь - СправочникСсылка.Календари - календарь, по которому выполняется проверка
//  ВыходныеДниКалендарей - Соответствие - полученные ранее данные о выходных днях календарей.
//
// Возвращаемое значение: 
// Булево
//  Дата является выходным днем календаря.
//
Функция ЭтоВыходнойДень(ДатаКалендаря, Календарь, ВыходныеДниКалендарей) Экспорт
	
	ГодКалендаря = Число(Формат(ДатаКалендаря, "ДФ=yyyy"));
	
	Если ВыходныеДниКалендарей.Получить(Календарь) = Неопределено Тогда
		
		ВыходныеДниКалендарей.Вставить(Календарь, Новый Соответствие);
		ВыходныеДниКалендарей[Календарь].Вставить(ГодКалендаря, ПолучитьВыходныеДниКалендарногоГрафика(Календарь, ГодКалендаря));
		
	ИначеЕсли ВыходныеДниКалендарей[Календарь].Получить(ГодКалендаря) = Неопределено Тогда
		
		ВыходныеДниКалендарей[Календарь].Вставить(ГодКалендаря, ПолучитьВыходныеДниКалендарногоГрафика(Календарь, ГодКалендаря));
		
	КонецЕсли;
	
	Возврат ВыходныеДниКалендарей[Календарь][ГодКалендаря].Найти(ДатаКалендаря) <> Неопределено;
	
КонецФункции

// Возвращает коэффициент уровня обслуживания по ссылке на значение перечисления
// Параметры:
//		УровеньОбслуживания - ПеречислениеСсылка.УровниОбслуживания
// Возвращаемое значение:
//		Число
Функция ПолучитьКоэффициентУровняОбслуживания(УровеньОбслуживания) Экспорт
	
	// Эти коэффициенты еще заданы в запросе динамического списка формы списка регистра ПрогнозыРасходаУпаковок.
	
	Если УровеньОбслуживания = Перечисления.УровниОбслуживания.УровеньОбслуживания50_0 Тогда

		Возврат 0;

	ИначеЕсли УровеньОбслуживания = Перечисления.УровниОбслуживания.УровеньОбслуживания57_9 Тогда
		
		Возврат 0.2;
        	
	ИначеЕсли УровеньОбслуживания = Перечисления.УровниОбслуживания.УровеньОбслуживания65_5 Тогда

		Возврат 0.4;
		
	ИначеЕсли УровеньОбслуживания = Перечисления.УровниОбслуживания.УровеньОбслуживания72_6 Тогда

		Возврат 0.6;
		
	ИначеЕсли УровеньОбслуживания = Перечисления.УровниОбслуживания.УровеньОбслуживания78_8 Тогда

		Возврат 0.8;
  	
	ИначеЕсли УровеньОбслуживания = Перечисления.УровниОбслуживания.УровеньОбслуживания84_0 Тогда
		
		Возврат 1.0;
		
	ИначеЕсли УровеньОбслуживания = Перечисления.УровниОбслуживания.УровеньОбслуживания88_5 Тогда
		
		Возврат 1.2;
		
	ИначеЕсли УровеньОбслуживания = Перечисления.УровниОбслуживания.УровеньОбслуживания91_9 Тогда
		
		Возврат 1.4;
		
	ИначеЕсли УровеньОбслуживания = Перечисления.УровниОбслуживания.УровеньОбслуживания94_5 Тогда
		
		Возврат 1.6;
		
	ИначеЕсли УровеньОбслуживания = Перечисления.УровниОбслуживания.УровеньОбслуживания96_4 Тогда
		
		Возврат 1.8;
		
	ИначеЕсли УровеньОбслуживания = Перечисления.УровниОбслуживания.УровеньОбслуживания97_7 Тогда
		
		Возврат 2.0;
		
	ИначеЕсли УровеньОбслуживания = Перечисления.УровниОбслуживания.УровеньОбслуживания98_6 Тогда
		
		Возврат 2.2;
		
	ИначеЕсли УровеньОбслуживания = Перечисления.УровниОбслуживания.УровеньОбслуживания99_2 Тогда
		
		Возврат 2.4;
		
	ИначеЕсли УровеньОбслуживания = Перечисления.УровниОбслуживания.УровеньОбслуживания99_5 Тогда
		
		Возврат 2.6;
		
	ИначеЕсли УровеньОбслуживания = Перечисления.УровниОбслуживания.УровеньОбслуживания99_7 Тогда
		
		Возврат 2.8;
		
	ИначеЕсли УровеньОбслуживания = Перечисления.УровниОбслуживания.УровеньОбслуживания99_9 Тогда
		
		Возврат 3.0;
		
	Иначе
		
		Возврат 1.0;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьВыходныеДниКалендарногоГрафика(Календарь, ГодКалендаря)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КалендарныеГрафики.ДатаГрафика КАК ДатаКалендаря
	|ИЗ
	|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	|ГДЕ
	|	КалендарныеГрафики.Календарь = &Календарь
	|	И КалендарныеГрафики.Год = &ГодКалендаря
	|	И (НЕ КалендарныеГрафики.ДеньВключенВГрафик)");;
	
	Запрос.УстановитьПараметр("Календарь", Календарь);
	Запрос.УстановитьПараметр("ГодКалендаря", ГодКалендаря);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ДатаКалендаря");
	
КонецФункции

Процедура ОбновитьДанныеКлассификацииПартнеров(РезультатКлассификации, ТипКлассификации, ТипПараметраКлассификации, ПериодКлассификации, НеКлассифицирован)

	Если РезультатКлассификации.Колонки.Найти("Период") = Неопределено Тогда

		РезультатКлассификации.Колонки.Добавить("Период");

	КонецЕсли;

	Если РезультатКлассификации.Колонки.Найти("ТипПараметраКлассификации") = Неопределено Тогда

		РезультатКлассификации.Колонки.Добавить("ТипПараметраКлассификации");

	КонецЕсли;

	Если РезультатКлассификации.Колонки.Найти("ТипКлассификации") = Неопределено Тогда

		РезультатКлассификации.Колонки.Добавить("ТипКлассификации");

	КонецЕсли;

	РезультатКлассификации.ЗаполнитьЗначения(ПериодКлассификации, "Период");
	РезультатКлассификации.ЗаполнитьЗначения(ТипПараметраКлассификации, "ТипПараметраКлассификации");
	РезультатКлассификации.ЗаполнитьЗначения(ТипКлассификации, "ТипКлассификации");

	НаборЗаписей = РегистрыСведений.ABCXYZКлассификацияКлиентов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(ПериодКлассификации);
	НаборЗаписей.Отбор.ТипКлассификации.Установить(ТипКлассификации);
	НаборЗаписей.Отбор.ТипПараметраКлассификации.Установить(ТипПараметраКлассификации);

	НаборЗаписей.Загрузить(РезультатКлассификации);
	НаборЗаписей.Записать(Истина);

	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(&ПериодКлассификации, ДЕНЬ) КАК Период,
		|	ABCXYZКлассификацияКлиентовСрезПоследних.Партнер КАК Партнер,
		|	ABCXYZКлассификацияКлиентовСрезПоследних.ТипПараметраКлассификации КАК ТипПараметраКлассификации,
		|	ABCXYZКлассификацияКлиентовСрезПоследних.ТипКлассификации КАК ТипКлассификации,
		|	&НеКлассифицирован КАК Класс,
		|	0 КАК ЗначениеПараметраКлассификации
		|ИЗ
		|	РегистрСведений.ABCXYZКлассификацияКлиентов.СрезПоследних(
		|			ДОБАВИТЬКДАТЕ(&ПериодКлассификации, СЕКУНДА, -1),
		|			(НЕ Партнер В
		|						(ВЫБРАТЬ
		|							ABCXYZКлассификацияКлиентов.Партнер КАК Партнер
		|						ИЗ
		|							РегистрСведений.ABCXYZКлассификацияКлиентов КАК ABCXYZКлассификацияКлиентов
		|						ГДЕ
		|							ABCXYZКлассификацияКлиентов.Период = НАЧАЛОПЕРИОДА(&ПериодКлассификации, ДЕНЬ)
		|							И ABCXYZКлассификацияКлиентов.ТипПараметраКлассификации = &ТипПараметраКлассификации
		|							И ABCXYZКлассификацияКлиентов.ТипКлассификации = &ТипКлассификации))
		|				И ТипПараметраКлассификации = &ТипПараметраКлассификации
		|				И ТипКлассификации = &ТипКлассификации) КАК ABCXYZКлассификацияКлиентовСрезПоследних");

	Запрос.УстановитьПараметр("ПериодКлассификации", ПериодКлассификации);
	Запрос.УстановитьПараметр("ТипКлассификации", ТипКлассификации);
	Запрос.УстановитьПараметр("ТипПараметраКлассификации", ТипПараметраКлассификации);
	Запрос.УстановитьПараметр("НеКлассифицирован", НеКлассифицирован);

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда

		НаборЗаписей.Загрузить(РезультатЗапроса.Выгрузить());
		НаборЗаписей.Записать(Ложь);

	КонецЕсли;

КонецПроцедуры

Процедура ОбновитьДанныеКлассификацииНоменклатуры(РезультатКлассификации, ТипКлассификации, ТипПараметраКлассификации, ПериодКлассификации, НеКлассифицирован)
	
	Если РезультатКлассификации.Колонки.Найти("Период") = Неопределено Тогда
		РезультатКлассификации.Колонки.Добавить("Период");
	КонецЕсли;
	
	Если РезультатКлассификации.Колонки.Найти("ТипПараметраКлассификации") = Неопределено Тогда
		РезультатКлассификации.Колонки.Добавить("ТипПараметраКлассификации");
	КонецЕсли;
	
	Если РезультатКлассификации.Колонки.Найти("ТипКлассификации") = Неопределено Тогда
		РезультатКлассификации.Колонки.Добавить("ТипКлассификации");
	КонецЕсли;
	
	РезультатКлассификации.ЗаполнитьЗначения(ПериодКлассификации, 		"Период");
	РезультатКлассификации.ЗаполнитьЗначения(ТипПараметраКлассификации, "ТипПараметраКлассификации");
	РезультатКлассификации.ЗаполнитьЗначения(ТипКлассификации, 			"ТипКлассификации");

	НаборЗаписей = РегистрыСведений.ABCXYZКлассификацияНоменклатуры.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(ПериодКлассификации);
	НаборЗаписей.Отбор.ТипКлассификации.Установить(ТипКлассификации);
	НаборЗаписей.Отбор.ТипПараметраКлассификации.Установить(ТипПараметраКлассификации);

	НаборЗаписей.Загрузить(РезультатКлассификации);
	НаборЗаписей.Записать(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ABCXYZКлассификацияНоменклатуры.Номенклатура КАК Номенклатура,
	|	ABCXYZКлассификацияНоменклатуры.Характеристика КАК Характеристика,
	|	ABCXYZКлассификацияНоменклатуры.РазделКлассификации КАК РазделКлассификации
	|ПОМЕСТИТЬ РезультатКлассификации
	|ИЗ
	|	РегистрСведений.ABCXYZКлассификацияНоменклатуры КАК ABCXYZКлассификацияНоменклатуры
	|ГДЕ
	|	ABCXYZКлассификацияНоменклатуры.Период = НАЧАЛОПЕРИОДА(&ПериодКлассификации, ДЕНЬ)
	|	И ABCXYZКлассификацияНоменклатуры.ТипПараметраКлассификации = &ТипПараметраКлассификации
	|	И ABCXYZКлассификацияНоменклатуры.ТипКлассификации = &ТипКлассификации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	РазделКлассификации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(&ПериодКлассификации, ДЕНЬ) КАК Период,
	|	ABCXYZКлассификацияНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	ABCXYZКлассификацияНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
	|	ABCXYZКлассификацияНоменклатурыСрезПоследних.РазделКлассификации КАК РазделКлассификации,
	|	ABCXYZКлассификацияНоменклатурыСрезПоследних.ТипПараметраКлассификации КАК ТипПараметраКлассификации,
	|	ABCXYZКлассификацияНоменклатурыСрезПоследних.ТипКлассификации КАК ТипКлассификации,
	|	&НеКлассифицирован КАК Класс,
	|	0 КАК ЗначениеПараметраКлассификации
	|ИЗ
	|	РегистрСведений.ABCXYZКлассификацияНоменклатуры.СрезПоследних(
	|			ДОБАВИТЬКДАТЕ(&ПериодКлассификации, СЕКУНДА, -1),
	|			(НЕ (Номенклатура, Характеристика, РазделКлассификации) В
	|						(ВЫБРАТЬ
	|							РезультатКлассификации.Номенклатура КАК Номенклатура,
	|							РезультатКлассификации.Характеристика КАК Характеристика,
	|							РезультатКлассификации.РазделКлассификации КАК РазделКлассификации
	|						ИЗ
	|							РезультатКлассификации КАК РезультатКлассификации))
	|				И ТипПараметраКлассификации = &ТипПараметраКлассификации
	|				И ТипКлассификации = &ТипКлассификации) КАК ABCXYZКлассификацияНоменклатурыСрезПоследних");
	
	Запрос.УстановитьПараметр("ПериодКлассификации", 		ПериодКлассификации);
	Запрос.УстановитьПараметр("ТипКлассификации", 			ТипКлассификации);
	Запрос.УстановитьПараметр("ТипПараметраКлассификации", 	ТипПараметраКлассификации);
	Запрос.УстановитьПараметр("НеКлассифицирован", 			НеКлассифицирован);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		НаборЗаписей.Загрузить(РезультатЗапроса.Выгрузить());
		НаборЗаписей.Записать(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
