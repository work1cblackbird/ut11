////////////////////////////////////////////////////////////////////////////////
// Подсистема "Интеграция с 1С:Документооборотом"
// Модуль ИнтеграцияС1СДокументооборотБазоваяФункциональность: сервер, внешнее соединение
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область АсинхронныеОперации

// Выполняет запрос к сервису 1С:Документооборот в фоновом задании.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Запрос - ОбъектXDTO - выполняемый запрос.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//   НаименованиеФоновогоЗадания - Строка - представление длительной операции, которое будет выведено в интерфейс.
//
// Возвращаемое значение:
//   см. ДлительныеОперации.ВыполнитьВФоне
//
Функция ВыполнитьЗапросАсинхронно(Прокси, Запрос, УникальныйИдентификаторФормы, НаименованиеФоновогоЗадания = "") Экспорт
	
	ПараметрыДлительнойОперации = ПараметрыДлительнойОперации();
	ПараметрыДлительнойОперации.Вставить(
		"ЗапросСтрока",
		ОбъектXDTOВСтроку(Прокси, Запрос));
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификаторФормы);
	ПараметрыВыполнения.ОжидатьЗавершение = 0; // Запускать сразу.
	Если ЗначениеЗаполнено(НаименованиеФоновогоЗадания) Тогда
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеФоновогоЗадания;
	КонецЕсли;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВыполнитьЗапросВФоне",
		ПараметрыДлительнойОперации,
		ПараметрыВыполнения);
	
КонецФункции

// Выполняет запрос к сервису 1С:Документооборот из фонового задания.
//
// Параметры:
//   Параметры - Структура:
//     * ИнтеграцияС1СДокументооборотWSОпределения - ХранилищеЗначения
//     * ИнтеграцияС1СДокументооборотВерсияСервиса - Строка
//     * ИнтеграцияС1СДокументооборотИмяПользователя - Строка
//     * ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияJWT - Булево
//     * ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияОС - Булево
//     * ИнтеграцияС1СДокументооборотМестоположениеПрокси - Строка
//     * ИнтеграцияС1СДокументооборотПароль - Строка
//     * ИнтеграцияС1СДокументооборотПарольИзвестен - Булево
//     * ЗапросСтрока - Строка
//   АдресХранилища - Строка - адрес хранилища, куда будет помещен результат запроса.
//
Процедура ВыполнитьЗапросВФоне(Параметры, АдресХранилища) Экспорт
	
	Прокси = ПолучитьПроксиВФоне(Параметры);
	
	Попытка
		Ответ = ВыполнитьЗапрос(Прокси, СтрокаВОбъектXDTO(Прокси, Параметры.ЗапросСтрока));
	Исключение
		ПоместитьВоВременноеХранилище(ВерсияСервиса(), АдресХранилища);
		ВызватьИсключение;
	КонецПопытки;
	
	ПоместитьВоВременноеХранилище(ОбъектXDTOВСтроку(Прокси, Ответ), АдресХранилища);
	
КонецПроцедуры

// Выполняет пакетный запрос к сервису 1С:Документооборот в фоновом задании.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Запросы - Массив из ОбъектXDTO - запросы пакета.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//   НаименованиеФоновогоЗадания - Строка - представление длительной операции, которое будет выведено в интерфейс.
//   ПроверятьПодчиненные - Булево - указывает требуется ли проверять результаты запросов, входящих в пакет.
//
// Возвращаемое значение:
//   см. ДлительныеОперации.ВыполнитьВФоне
//
Функция ВыполнитьПакетныйЗапросАсинхронно(Прокси, Запросы, УникальныйИдентификаторФормы, НаименованиеФоновогоЗадания = "",
		ПроверятьПодчиненные = Ложь) Экспорт
	
	ПараметрыДлительнойОперации = ПараметрыДлительнойОперации();
	ЗапросыСтрока = Новый Массив;
	Для Каждого Запрос Из Запросы Цикл
		ЗапросыСтрока.Добавить(ОбъектXDTOВСтроку(Прокси, Запрос));
	КонецЦикла;
	ПараметрыДлительнойОперации.Вставить("ЗапросыСтрока", ЗапросыСтрока);
	ПараметрыДлительнойОперации.Вставить("ПроверятьПодчиненные", ПроверятьПодчиненные);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификаторФормы);
	ПараметрыВыполнения.ОжидатьЗавершение = 0; // Запускать сразу.
	Если ЗначениеЗаполнено(НаименованиеФоновогоЗадания) Тогда
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеФоновогоЗадания;
	КонецЕсли;
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВыполнитьПакетныйЗапросВФоне",
		ПараметрыДлительнойОперации,
		ПараметрыВыполнения);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

// Выполняет запрос к сервису 1С:Документооборот из фонового задания.
//
// Параметры:
//   Параметры - Структура:
//     * ИнтеграцияС1СДокументооборотWSОпределения - ХранилищеЗначения
//     * ИнтеграцияС1СДокументооборотВерсияСервиса - Строка
//     * ИнтеграцияС1СДокументооборотИмяПользователя - Строка
//     * ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияJWT - Булево
//     * ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияОС - Булево
//     * ИнтеграцияС1СДокументооборотМестоположениеПрокси - Строка
//     * ИнтеграцияС1СДокументооборотПароль - Строка
//     * ИнтеграцияС1СДокументооборотПарольИзвестен - Булево
//     * ЗапросыСтрока - Массив из Строка
//     * ПроверятьПодчиненные - Булево
//   АдресХранилища - Строка - адрес хранилища, куда будет помещен результат запроса.
//
Процедура ВыполнитьПакетныйЗапросВФоне(Параметры, АдресХранилища) Экспорт
	
	Прокси = ПолучитьПроксиВФоне(Параметры);
	
	Запросы = Новый Массив;
	Для Каждого ЗапросСтрока Из Параметры.ЗапросыСтрока Цикл
		Запросы.Добавить(СтрокаВОбъектXDTO(Прокси, ЗапросСтрока));
	КонецЦикла;
	
	Попытка
		Ответ = ВыполнитьПакетныйЗапрос(Прокси, Запросы, Параметры.ПроверятьПодчиненные);
	Исключение
		ПоместитьВоВременноеХранилище(ВерсияСервиса(), АдресХранилища);
		ВызватьИсключение;
	КонецПопытки;
	
	ПоместитьВоВременноеХранилище(ОбъектXDTOВСтроку(Прокси, Ответ), АдресХранилища);
	
КонецПроцедуры

// Записывает изменения объекта в Документообороте в фоновом задании.
//
// Параметры:
//   Параметры - Структура:
//     * ИнтеграцияС1СДокументооборотWSОпределения - ХранилищеЗначения
//     * ИнтеграцияС1СДокументооборотВерсияСервиса - Строка
//     * ИнтеграцияС1СДокументооборотИмяПользователя - Строка
//     * ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияJWT - Булево
//     * ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияОС - Булево
//     * ИнтеграцияС1СДокументооборотМестоположениеПрокси - Строка
//     * ИнтеграцияС1СДокументооборотПароль - Строка
//     * ИнтеграцияС1СДокументооборотПарольИзвестен - Булево
//     * ОбъектСтрока - Строка - строковое представление объекта XDTO с сохраняемыми данными.
//   АдресХранилища - Строка - адрес хранилища, куда будет помещен результат запроса.
//
Процедура ЗаписатьОбъектВФоне(Параметры, АдресХранилища) Экспорт
	
	Прокси = ПолучитьПроксиВФоне(Параметры);
	
	Попытка
		РезультатЗаписи = ЗаписатьОбъект(
			Прокси,
			СтрокаВОбъектXDTO(Прокси, Параметры.ОбъектСтрока));
	Исключение
		ПоместитьВоВременноеХранилище(ВерсияСервиса(), АдресХранилища);
		ВызватьИсключение;
	КонецПопытки;
	
	ПоместитьВоВременноеХранилище(ОбъектXDTOВСтроку(Прокси, РезультатЗаписи), АдресХранилища);
	
КонецПроцедуры

// Преобразует объект XDTO из пространства имен "http://www.1c.ru/dm" в строку.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ОбъектXDTO - ОбъектXDTO, СписокXDTO - объект XDTO xml представление которого требуется получить.
//
// Возвращаемое значение:
//   Строка
//
Функция ОбъектXDTOВСтроку(Прокси, ОбъектXDTO) Экспорт
	
	Результат = Новый Массив;
	
	Если ТипЗнч(ОбъектXDTO) = Тип("СписокXDTO") Тогда
		СписокОбъектов = ОбъектXDTO;
	Иначе
		СписокОбъектов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбъектXDTO);
	КонецЕсли;
	
	ФабрикаDM = ФабрикаDM(Прокси);
	ЗаписьXML = Новый ЗаписьXML;
	Для Каждого Объект Из СписокОбъектов Цикл
		ЗаписьXML.УстановитьСтроку();
		ФабрикаDM.ЗаписатьXML(ЗаписьXML, Объект);
		Результат.Добавить(ЗаписьXML.Закрыть());
	КонецЦикла;
	ЗаписьXML = Неопределено;
	
	Возврат СтрСоединить(Результат, РазделительЭлементовСписка());
	
КонецФункции

// Возвращает структуру параметров для обращения к сервису 1С:Документооборот в фоновом задании.
//
// Параметры:
//   ИспользоватьКэш - Булево - при проверке возможности авторизации без пароля не требуется использовать кэш.
//
// Возвращаемое значение:
//   Структура:
//     * ИнтеграцияС1СДокументооборотWSОпределения - ХранилищеЗначения
//     * ИнтеграцияС1СДокументооборотВерсияСервиса - Строка
//     * ИнтеграцияС1СДокументооборотИмяПользователя - Строка
//     * ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияJWT - Булево
//     * ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияОС - Булево
//     * ИнтеграцияС1СДокументооборотМестоположениеПрокси - Строка
//     * ИнтеграцияС1СДокументооборотПароль - Строка
//     * ИнтеграцияС1СДокументооборотПарольИзвестен - Булево
//
Функция ПараметрыДлительнойОперации(ИспользоватьКэш = Истина) Экспорт
	
	ПараметрыОперации = Новый Структура;
	
	ПараметрыОперации.Вставить("ИнтеграцияС1СДокументооборотWSОпределения", Новый ХранилищеЗначения(Неопределено));
	ПараметрыОперации.Вставить("ИнтеграцияС1СДокументооборотВерсияСервиса", "");
	ПараметрыОперации.Вставить("ИнтеграцияС1СДокументооборотИмяПользователя", "");
	ПараметрыОперации.Вставить("ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияJWT", Ложь);
	ПараметрыОперации.Вставить("ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияОС", Ложь);
	ПараметрыОперации.Вставить("ИнтеграцияС1СДокументооборотМестоположениеПрокси", "");
	ПараметрыОперации.Вставить("ИнтеграцияС1СДокументооборотПароль", "");
	ПараметрыОперации.Вставить("ИнтеграцияС1СДокументооборотПарольИзвестен", Ложь);
	
	Если ИспользоватьКэш Тогда
		ПараметрыОперации.ИнтеграцияС1СДокументооборотWSОпределения = ПараметрыСеанса.ИнтеграцияС1СДокументооборотWSОпределения;
		ПараметрыОперации.ИнтеграцияС1СДокументооборотВерсияСервиса = ПараметрыСеанса.ИнтеграцияС1СДокументооборотВерсияСервиса;
		ПараметрыОперации.ИнтеграцияС1СДокументооборотИмяПользователя = ПараметрыСеанса.ИнтеграцияС1СДокументооборотИмяПользователя;
		ПараметрыОперации.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияJWT = ПараметрыСеанса.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияJWT;
		ПараметрыОперации.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияОС = ПараметрыСеанса.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияОС;
		ПараметрыОперации.ИнтеграцияС1СДокументооборотМестоположениеПрокси = ПараметрыСеанса.ИнтеграцияС1СДокументооборотМестоположениеПрокси;
		ПараметрыОперации.ИнтеграцияС1СДокументооборотПароль = ПараметрыСеанса.ИнтеграцияС1СДокументооборотПароль;
		ПараметрыОперации.ИнтеграцияС1СДокументооборотПарольИзвестен = ПараметрыСеанса.ИнтеграцияС1СДокументооборотПарольИзвестен;
	КонецЕсли;
	
	Возврат ПараметрыОперации;
	
КонецФункции

// Выполняет подключение к сервису 1С:Документооборот из фонового задания, и делает запрос версии сервиса.
//
// Параметры:
//   Параметры - см. ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПараметрыДлительнойОперации
//   АдресХранилища - Строка - адрес хранилища, куда будет помещен результат запроса.
//
Процедура ПодключитьсяИПолучитьВерсиюСервисаВФоне(Параметры, АдресХранилища = "") Экспорт
	
	ПараметрыДлительнойОперацииВПараметрыСеанса(Параметры);
	
	Если Не ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ЭтоФоновоеЗадание() Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.СброситьКэшПодключенияКДО();
	КонецЕсли;
	
	УстановитьВерсиюСервиса(Истина);
	ПоместитьВоВременноеХранилище(ПараметрыДлительнойОперации(), АдресХранилища);
	
КонецПроцедуры

// Получает объект из Документооборота в фоновом задании.
//
// Параметры:
//   Параметры - Структура:
//     * ИнтеграцияС1СДокументооборотWSОпределения - ХранилищеЗначения
//     * ИнтеграцияС1СДокументооборотВерсияСервиса - Строка
//     * ИнтеграцияС1СДокументооборотИмяПользователя - Строка
//     * ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияJWT - Булево
//     * ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияОС - Булево
//     * ИнтеграцияС1СДокументооборотМестоположениеПрокси - Строка
//     * ИнтеграцияС1СДокументооборотПароль - Строка
//     * ИнтеграцияС1СДокументооборотПарольИзвестен - Булево
//     * Тип - Строка
//     * ID - Строка
//     * Колонки - Массив из Строка - необязательно, состав заполняемых колонок.
//               - Строка - если список колонок разделен через запятую.
//     * ПравилоИнтеграции - СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом3 - правило интеграции для
//         заполнения объекта ИС.
//     * ВнешнийОбъектИС - ЛюбаяСсылка - передается для заполнения свойства externalObject.
//   АдресХранилища - Строка - адрес хранилища, куда будет помещен результат запроса.
//
Процедура ПолучитьОбъектВФоне(Параметры, АдресХранилища) Экспорт
	
	Прокси = ПолучитьПроксиВФоне(Параметры);
	
	Попытка
		ОбъектXDTO = ПолучитьОбъект(
			Прокси,
			Параметры.Тип,
			Параметры.ID,
			Параметры.Колонки,
			Параметры.ПравилоИнтеграции,
			Параметры.ВнешнийОбъектИС);
	Исключение
		ПоместитьВоВременноеХранилище(ВерсияСервиса(), АдресХранилища);
		ВызватьИсключение;
	КонецПопытки;
	
	ПоместитьВоВременноеХранилище(ОбъектXDTOВСтроку(Прокси, ОбъектXDTO), АдресХранилища);
	
КонецПроцедуры

// Создает прокси веб-сервиса Документооборота в фоновом задании, с настройками, переданными напрямую.
//
// Параметры:
//   Параметры - Структура:
//     * ИнтеграцияС1СДокументооборотWSОпределения - ХранилищеЗначения
//     * ИнтеграцияС1СДокументооборотВерсияСервиса - Строка
//     * ИнтеграцияС1СДокументооборотИмяПользователя - Строка
//     * ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияJWT - Булево
//     * ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияОС - Булево
//     * ИнтеграцияС1СДокументооборотМестоположениеПрокси - Строка
//     * ИнтеграцияС1СДокументооборотПароль - Строка
//     * ИнтеграцияС1СДокументооборотПарольИзвестен - Булево
//
// Возвращаемое значение:
//   WSПрокси - прокси веб-сервиса Документооборота.
//   Неопределено - в случае, если прокси веб-сервиса получить не удалось.
//
Функция ПолучитьПроксиВФоне(Параметры) Экспорт
	
	ПараметрыДлительнойОперацииВПараметрыСеанса(Параметры);
	
	Возврат ПолучитьПроксиИзПараметровСеанса();
	
КонецФункции

// Преобразует строку в объект XDTO из пространства имен "http://www.1c.ru/dm".
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Строка - Строка - xml представление объекта XDTO.
//
// Возвращаемое значение:
//   ОбъектXDTO
//   Массив из ОбъектXDTO
//
Функция СтрокаВОбъектXDTO(Прокси, Строка) Экспорт
	
	Результат = Новый Массив;
	
	СписокОбъектов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строка, РазделительЭлементовСписка());
	
	ФабрикаDM = ФабрикаDM(Прокси);
	ЧтениеXML = Новый ЧтениеXML;
	Для Каждого Объект Из СписокОбъектов Цикл
		ЧтениеXML.УстановитьСтроку(Объект);
		ЧтениеXML.Прочитать();
		ТипXDTO = ФабрикаDM.Тип(URIПространстваИменВебСервисаДокументооборота(), ЧтениеXML.Имя);
		Результат.Добавить(ФабрикаDM.ПрочитатьXML(ЧтениеXML, ТипXDTO));
	КонецЦикла;
	ЧтениеXML = Неопределено;
	
	Если Результат.Количество() = 1 Тогда
		Возврат Результат[0];
	Иначе
		Возврат Результат;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.Печать

// Переопределяет список команд печати. Вызывается из УправлениеПечатьюПереопределяемый и предназначена
// для дополнения команд печати листом согласования.
//
// Параметры:
//   ИмяФормы - Строка - полное имя формы в виде "Документ._ДемоЗаказПокупателя.Форма.ФормаДокумента", в которой
//     добавляются команды печати.
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//   СтандартнаяОбработка - Булево - при установке значения Ложь не будет автоматически заполняться
//     коллекция КомандыПечати.
//
Процедура ПередДобавлениемКомандПечати(ИмяФормы, КомандыПечати, СтандартнаяОбработка) Экспорт
	
	Если Не ПользователюРазрешеноИспользованиеИнтеграции() Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПередДобавлениемКомандПечати(
		ИмяФормы,
		КомандыПечати,
		СтандартнаяОбработка);
	
	Настройки = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИспользоватьИнтеграцию();
	Если КомандыПечати.Количество() > 0
			И (Настройки.ИспользоватьИнтеграциюДО2 Или Настройки.ИспользоватьИнтеграциюДО3) Тогда
		ПараметрыДлительнойОперации = ПараметрыДлительнойОперации();
		Для Каждого КомандаПечати Из КомандыПечати Цикл
			КомандаПечати.ДополнительныеПараметры.Вставить(
				"ИнтеграцияС1СДокументооборот_ПараметрыДлительнойОперации",
				ПараметрыДлительнойОперации);
			КомандаПечати.ДополнительныеПараметры.Вставить(
				"ДополнитьКомплектВнешнимиПечатнымиФормами",
				КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.ПодключаемыеКоманды

// См. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.
Процедура ПередДобавлениемКомандСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры, СтандартнаяОбработка) Экспорт
	
	Для Каждого ТипИсточника Из Параметры.ТипыИсточников Цикл
		Если Не Метаданные.ОпределяемыеТипы.ИнтеграцияС1СДокументооборотВсеСсылкиПереопределяемый.Тип.СодержитТип(
				ТипИсточника) Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Порядок = 99;
	
	Если ЕстьПодсистемаДО2() Тогда
		ДобавитьКомандуСозданияНаОсновании(
			КомандыСозданияНаОсновании,
			Метаданные.ОбщиеКоманды["ИнтеграцияС1СДокументооборотСоздатьПисьмо"],
			"ИнтеграцияС1СДокументооборотКлиент.ОбработкаКомандыИсходящееПисьмо",
			Параметры.ВидВРег,
			"ИспользоватьЭлектроннуюПочту1СДокументооборота",
			Порядок);
		
		ДобавитьКомандуСозданияНаОсновании(
			КомандыСозданияНаОсновании,
			Метаданные.ОбщиеКоманды["ИнтеграцияС1СДокументооборотСоздатьБизнесПроцесс"],
			"ИнтеграцияС1СДокументооборотКлиент.ОбработкаКомандыСоздатьБизнесПроцесс",
			Параметры.ВидВРег,
			"ИспользоватьПроцессыИЗадачи1СДокументооборота",
			Порядок);
	КонецЕсли;
	
	Если ЕстьПодсистемаДО3() Тогда
		ДобавитьКомандуСозданияНаОсновании(
			КомандыСозданияНаОсновании,
			Метаданные.ОбщиеКоманды["ИнтеграцияС1СДокументооборотНачатьОбработку"],
			"ИнтеграцияС1СДокументооборот3Клиент.ОбработкаКомандыНачатьОбработку",
			Параметры.ВидВРег,
			"ИспользоватьОбработкуОбъектов1СДокументооборота",
			Порядок);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.БазоваяФункциональность

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииОбработчиковУстановкиПараметровСеанса.
Процедура ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики) Экспорт
	
	Обработчики.Вставить("ИнтеграцияС1СДокументооборотWSОпределения",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.УстановитьПараметрыСеанса");
	
	Обработчики.Вставить("ИнтеграцияС1СДокументооборотВерсияСервиса",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.УстановитьПараметрыСеанса");
	
	Обработчики.Вставить("ИнтеграцияС1СДокументооборотИмяПользователя",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.УстановитьПараметрыСеанса");
	
	Обработчики.Вставить("ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияJWT",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.УстановитьПараметрыСеанса");
	
	Обработчики.Вставить("ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияОС",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.УстановитьПараметрыСеанса");
	
	Обработчики.Вставить("ИнтеграцияС1СДокументооборотМестоположениеПрокси",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.УстановитьПараметрыСеанса");
	
	Обработчики.Вставить("ИнтеграцияС1СДокументооборотНастройки",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.УстановитьПараметрыСеанса");
	
	Обработчики.Вставить("ИнтеграцияС1СДокументооборотОперацияПодключения",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.УстановитьПараметрыСеанса");
	
	Обработчики.Вставить("ИнтеграцияС1СДокументооборотПароль",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.УстановитьПараметрыСеанса");
	
	Обработчики.Вставить("ИнтеграцияС1СДокументооборотПарольИзвестен",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.УстановитьПараметрыСеанса");
	
	Обработчики.Вставить("ИнтеграцияС1СДокументооборотСхемаXML",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.УстановитьПараметрыСеанса");
	
	Обработчики.Вставить("ИнтеграцияС1СДокументооборотТекущийПользователь",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.УстановитьПараметрыСеанса");
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.БазоваяФункциональность

// СтандартныеПодсистемы.РегламентныеЗадания

// Определяет зависимости регламентных заданий и их дополнительные свойства.
//
// Параметры:
//  Настройки - ТаблицаЗначений:
//    * РегламентноеЗадание - ОбъектМетаданныхРегламентноеЗадание - регламентное задание.
//    * ФункциональнаяОпция - ОбъектМетаданныхФункциональнаяОпция - функциональная опция,
//        от которой зависит регламентное задание.
//    * ЗависимостьПоИ - Булево - если регламентное задание зависит более чем
//        от одной функциональной опции и его необходимо включать только тогда,
//        когда все функциональные опции включены, то следует указывать Истина
//        для каждой зависимости.
//        По умолчанию Ложь - если хотя бы одна функциональная опция включена,
//        то регламентное задание тоже включено.
//    * ВключатьПриВключенииФункциональнойОпции - Булево
//                                              - Неопределено - если Ложь, то при
//        включении функциональной опции регламентное задание не будет включаться. Значение
//        Неопределено соответствует значению Истина.
//        По умолчанию - Неопределено.
//    * ДоступноВПодчиненномУзлеРИБ - Булево
//                                  - Неопределено - Истина или Неопределено, если регламентное
//        задание доступно в РИБ.
//        По умолчанию - Неопределено.
//    * ДоступноВАвтономномРабочемМесте - Булево
//                                      - Неопределено - Истина или Неопределено, если регламентное
//        задание доступно в автономном рабочем месте.
//        По умолчанию - Неопределено.
//    * ДоступноВМоделиСервиса - Булево
//                             - Неопределено - Ложь, если необходимо блокировать выполнение регламентного
//        задания (в т.ч. задания очереди) в информационной базе с включенным использованием разделителя.
//        Значение Неопределено трактуется как Истина.
//        По умолчанию - Неопределено.
//    * РаботаетСВнешнимиРесурсами - Булево - Истина, если регламентное задание модифицирует данные
//        во внешних источниках (получение почты, синхронизация данных и т.п.). Не следует устанавливать
//        значение Истина для регламентных заданий, не модифицирующих данные во внешних источниках.
//        Например, регламентное задание ЗагрузкаКурсовВалют. Регламентные задания, работающие с внешними ресурсами,
//        автоматически отключаются в копии информационной базы. По умолчанию - Ложь.
//    * Параметризуется - Булево - Истина, если регламентное задание параметризованное.
//        По умолчанию - Ложь.
//
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	СписокФО = Новый Массив;
	Если ЕстьПодсистемаДО2() Тогда
		СписокФО.Добавить("ИспользоватьИнтеграциюС1СДокументооборот");
	КонецЕсли;
	Если ЕстьПодсистемаДО3() Тогда
		СписокФО.Добавить("ИспользоватьИнтеграциюС1СДокументооборот3");
	КонецЕсли;
	
	Для Каждого ИмяФО Из СписокФО Цикл
		Настройка = Настройки.Добавить();
		Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ИнтеграцияС1СДокументооборотВыполнитьОбменДанными;
		Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции[ИмяФО];
		Настройка.РаботаетСВнешнимиРесурсами = Истина;
		Настройка.ДоступноВМоделиСервиса = Ложь;
	КонецЦикла;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.РегламентныеЗадания

#КонецОбласти

#Область ОбменДанными

// Выполняет обмен данными с 1С:Документооборотом по правилам интеграции.
//
Процедура ВыполнитьОбменДанными() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ИнтеграцияС1СДокументооборотВыполнитьОбменДанными);
	
	Настройки = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИспользоватьИнтеграцию();
	
	Если Не Настройки.ИспользоватьИнтеграциюДО2 И Не Настройки.ИспользоватьИнтеграциюДО3 Тогда
		УзелДокументооборота = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.УзелДокументооборота();
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелДокументооборота);
		Возврат;
	КонецЕсли;
	
	// Прочтем настройки авторизации и установим их в параметры сеанса. Константы могут быть недоступны.
	УстановитьПривилегированныйРежим(Истина);
	ИмяПользователя = Константы.ИнтеграцияС1СДокументооборотИмяПользователяДляОбмена.Получить();
	Пароль = Константы.ИнтеграцияС1СДокументооборотПарольДляОбмена.Получить();
	Если Не ЗначениеЗаполнено(ИмяПользователя) Тогда // Прочтем настройки из пользовательского хранилища.
		
		ПарольСохранен = Ложь;
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ПрочитатьНастройкиАвторизацииИзХранилищаОбщихНастроек(
			ИмяПользователя,
			Пароль,
			ПарольСохранен);
		
		Если Не ЗначениеЗаполнено(ИмяПользователя) Тогда
			
			ЗаписьЖурналаРегистрации(
				ИмяСобытияЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				НСтр("ru = 'Для пользователя регламентного задания обмена не указано имя пользователя 1С:Документооборота'",
					ОбщегоНазначения.КодОсновногоЯзыка()));
			
			Возврат;
			
		КонецЕсли;
		
		Если ПарольСохранен <> Истина Тогда
			
			ЗаписьЖурналаРегистрации(
				ИмяСобытияЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				НСтр("ru = 'Для пользователя регламентного задания обмена не сохранен пароль 1С:Документооборота'",
					ОбщегоНазначения.КодОсновногоЯзыка()));
			
			Возврат;
			
		КонецЕсли;
		
		// Перенесем настройки в константы.
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.СохранитьНастройкиАвторизацииДляОбмена(
			ИмяПользователя,
			Пароль);
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.УдалитьНастройкиАвторизацииИзХранилищаОбщихНастроек();
		
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.УстановитьНастройкиАвторизацииВПараметрыСеанса(
		ИмяПользователя,
		Пароль,
		Ложь,
		Ложь);
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.УстановитьВерсиюСервисаВПараметрыСеанса();
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	Если Прокси = Неопределено Тогда
		// Сервис не доступен.
		Возврат;
	КонецЕсли;
	
	Если Настройки.ИспользоватьИнтеграциюДО2 Тогда
		
		// Проверим поддержку синхронизации.
		Если Не ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("1.3.2.3.CORP") Тогда
			Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("") Тогда
				// Сервис доступен, но версия младше требуемой.
				УзелДокументооборота = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.УзелДокументооборота();
				ПланыОбмена.УдалитьРегистрациюИзменений(УзелДокументооборота);
			КонецЕсли;
			Возврат;
		КонецЕсли;
		
		МодульИнтеграцияС1СДокументооборотОбмен = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияС1СДокументооборотОбмен");
		
	ИначеЕсли Настройки.ИспользоватьИнтеграциюДО3 Тогда
		
		МодульИнтеграцияС1СДокументооборот3Обмен = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияС1СДокументооборот3Обмен");
		
	КонецЕсли;
	
	ПодготовитьДанныеДляОтправки(
		Прокси,
		Настройки,
		МодульИнтеграцияС1СДокументооборотОбмен,
		МодульИнтеграцияС1СДокументооборот3Обмен);
	ОтправитьДанные(Прокси, Настройки);
	ОчиститьУстаревшиеДанные();
	
	Если Настройки.ИспользоватьИнтеграциюДО2 Тогда
		МодульИнтеграцияС1СДокументооборотОбмен.ПолучитьДанные();
	КонецЕсли;
	
	ОбновитьПечатныеФормы(Прокси, Настройки);
	
КонецПроцедуры

// Добавляет в журнал регистрации ошибку о невозможности подобрать значение реквизита по данным для заполнения.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ЗначениеСвойства - ОбъектXDTO - данные, пришедшие из ДО.
//                    - СписокXDTO - данные, пришедшие из ДО.
//                    - Строка - данные, пришедшие из ДО.
//                    - Число - данные, пришедшие из ДО.
//                    - Дата - данные, пришедшие из ДО.
//                    - Булево - данные, пришедшие из ДО.
//                    - ДвоичныеДанные - данные, пришедшие из ДО.
//                    - Неопределено - на стороне ДО данных нет, реквизит объекта ИС нужно очистить.
//   ТипРеквизитаОбъектаИС - Тип - тип заполняемого реквизита объекта ИС.
//   ЗаполняемыйОбъектИС - Произвольный - заполняемый объект ИС.
//   ИмяРеквизитаОбъектаИС - Строка - имя заполняемого реквизита объекта ИС.
//   ИмяСвойства - Строка - имя свойства XDTO объекта из ДО, из значения которого выполняется заполнение.
//   ТипXDTOОбъекта - Строка - имя типа XDTO объекта из ДО, из значения свойства которого выполняется заполнение.
//
Процедура ЗафиксироватьОшибкуПодбораЗначенияРеквизита(Прокси, ЗначениеСвойства, ТипРеквизитаОбъектаИС,
		ЗаполняемыйОбъектИС, ИмяРеквизитаОбъектаИС = "", ИмяСвойства = "", ТипXDTOОбъекта = "") Экспорт
	
	Если ТипЗнч(ЗначениеСвойства) = Тип("ОбъектXDTO") Или ТипЗнч(ЗначениеСвойства) = Тип("СписокXDTO") Тогда
		ПредставлениеЗначения = ОбъектXDTOВСтроку(Прокси, ЗначениеСвойства);
	Иначе
		ПредставлениеЗначения = Строка(ЗначениеСвойства);
	КонецЕсли;
	
	ТекстОшибки = Новый Массив;
	Если ЗначениеЗаполнено(ИмяРеквизитаОбъектаИС)
			И Метаданные.НайтиПоТипу(ТипЗнч(ЗаполняемыйОбъектИС)) <> Неопределено Тогда
		Если ЗначениеЗаполнено(ИмяСвойства) И ЗначениеЗаполнено(ТипXDTOОбъекта) Тогда
			ТекстОшибки.Добавить(СтрШаблон(
				НСтр("ru = 'Ошибка при заполнении реквизита %1 объекта ИС типа %2 из реквизита %3 объекта ДО типа %4.'"),
				ИмяРеквизитаОбъектаИС,
				Метаданные.НайтиПоТипу(ТипЗнч(ЗаполняемыйОбъектИС)).ПолноеИмя(),
				ИмяСвойства,
				ТипXDTOОбъекта));
		Иначе
			ТекстОшибки.Добавить(СтрШаблон(
				НСтр("ru = 'Ошибка при заполнении реквизита %1 объекта ИС типа %2.'"),
				ИмяРеквизитаОбъектаИС,
				Метаданные.НайтиПоТипу(ТипЗнч(ЗаполняемыйОбъектИС)).ПолноеИмя()));
		КонецЕсли;
	КонецЕсли;
	ТекстОшибки.Добавить(НСтр("ru = 'Нет возможности подобрать значение реквизита по данным для заполнения.'"));
	ТекстОшибки.Добавить(СтрШаблон(
		НСтр("ru = 'Тип реквизита: %1.'"), ОбщегоНазначения.СтроковоеПредставлениеТипа(ТипРеквизитаОбъектаИС)));
	ТекстОшибки.Добавить(СтрШаблон(
		НСтр("ru = 'Тип данных для заполнения: %1.'"), ТипЗнч(ЗначениеСвойства)));
	ТекстОшибки.Добавить(НСтр("ru = 'Данные для заполнения:'"));
	ТекстОшибки.Добавить(ПредставлениеЗначения);
	
	ЗаписатьОшибку(
		СтрСоединить(ТекстОшибки, Символы.ПС),
		НСтр("ru = 'Получение данных'"),
		ЗаполняемыйОбъектИС);
	
КонецПроцедуры

// Конструктор структуры, описывающей значение для заполнения реквизита объекта ИС.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - передается, если реквизит ИС нужно подобрать по объекту XDTO.
//
// Возвращаемое значение:
//   Структура:
//     * ЗначениеСвойства - ОбъектXDTO - данные, пришедшие из ДО.
//                        - СписокXDTO - данные, пришедшие из ДО.
//                        - Строка - данные, пришедшие из ДО.
//                        - Число - данные, пришедшие из ДО.
//                        - Дата - данные, пришедшие из ДО.
//                        - Булево - данные, пришедшие из ДО.
//                        - ДвоичныеДанные - данные, пришедшие из ДО.
//                        - Неопределено - на стороне ДО данных нет, реквизит объекта ИС нужно очистить.
//     * ТипXDTOОбъекта - Строка - имя типа XDTO объекта из ДО, из значения свойства которого выполняется заполнение.
//     * ИмяСвойства - Строка - имя свойства XDTO объекта из ДО, из значения которого выполняется заполнение.
//     * ИмяДляПоиска - Строка - строка для поиска в ИС элемента справочника или перечисления по имени.
//     * ПредставлениеДляПоиска - Строка - строка для поиска в ИС элемента справочника или перечисления по синониму.
//     * Владелец - ЛюбаяСсылка - владелец элемента справочника, который нужно найти или создать в ИС.
//                - Неопределено - если владелец отсутствует.
//     * ИдентификаторОбъектаДО - Строка - идентификатор объекта ДО для поиска по
//         регистру ОбъектыИнтегрированныеС1СДокументооборотом или для создания связи.
//     * ТипОбъектаДО - Строка - имя типа объекта ДО для поиска по
//         регистру ОбъектыИнтегрированныеС1СДокументооборотом или для создания связи.
//     * ExternalObject - ОбъектXDTO - объект XDTO типа ExternalObject. Может передать прямую ссылку на объект ИС.
//                      - Неопределено - если информация о внешнем объекте отсутствует.
//
Функция ЗначениеДляЗаполненияРеквизитаОбъектаИС(ОбъектXDTO = Неопределено) Экспорт
	
	ЗначениеДляЗаполнения = Новый Структура;
	ЗначениеДляЗаполнения.Вставить("ЗначениеСвойства", ОбъектXDTO);
	ЗначениеДляЗаполнения.Вставить("ТипXDTOОбъекта", "");
	ЗначениеДляЗаполнения.Вставить("ИмяСвойства", "");
	ЗначениеДляЗаполнения.Вставить("ИмяДляПоиска", "");
	ЗначениеДляЗаполнения.Вставить("ПредставлениеДляПоиска", "");
	ЗначениеДляЗаполнения.Вставить("Владелец", Неопределено);
	
	ЗначениеДляЗаполнения.Вставить("ИдентификаторОбъектаДО", "");
	ЗначениеДляЗаполнения.Вставить("ТипОбъектаДО", "");
	ЗначениеДляЗаполнения.Вставить("ExternalObject", Неопределено);
	
	Если СвойствоУстановлено(ОбъектXDTO, "name") Тогда
		ЗначениеДляЗаполнения.ИмяДляПоиска = ОбъектXDTO.name;
	КонецЕсли;
	Если СвойствоУстановлено(ОбъектXDTO, "objectID") Тогда
		ЗначениеДляЗаполнения.ИдентификаторОбъектаДО = ОбъектXDTO.objectID.ID;
		ЗначениеДляЗаполнения.ТипОбъектаДО = ОбъектXDTO.objectID.type;
		ЗначениеДляЗаполнения.ПредставлениеДляПоиска = ОбъектXDTO.objectID.presentation;
	КонецЕсли;
	Если СвойствоУстановлено(ОбъектXDTO, "externalObject") Тогда
		ЗначениеДляЗаполнения.ExternalObject = ОбъектXDTO.externalObject;
	КонецЕсли;
	
	Возврат ЗначениеДляЗаполнения;
	
КонецФункции

// Возвращает значение реквизита объекта ИС по значению для заполнения.
//
// Параметры:
//   ТипРеквизитаОбъектаИС - Тип - тип заполняемого реквизита объекта ИС.
//   ЗначениеДляЗаполнения - см. ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗначениеДляЗаполненияРеквизитаОбъектаИС
//   Контекст - см. ИнтеграцияС1СДокументооборотБазоваяФункциональность.КонтекстДляЗаполненияРеквизитаОбъектаИС
//   СоздаватьЕслиНеНайден - Булево - автоматически создавать новый элемент справочника ИС, в случае,
//     если не удалось подобрать существующий элемент по значению реквизита объекта ДО.
//
// Возвращаемое значение:
//   Произвольный
//
Функция ЗначениеРеквизитаОбъектаИСПоЗначениюДляЗаполнения(ТипРеквизитаОбъектаИС, ЗначениеДляЗаполнения,
		Контекст = Неопределено, СоздаватьЕслиНеНайден = Истина) Экспорт
	
	Результат = Неопределено;
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	Если Контекст = Неопределено Тогда
		Контекст = КонтекстДляЗаполненияРеквизитаОбъектаИС();
	КонецЕсли;
	
	ПриОпределенииЗначенияРеквизитаОбъектаИСПоЗначениюДляЗаполнения(
		Прокси,
		Результат,
		ТипРеквизитаОбъектаИС,
		ЗначениеДляЗаполнения,
		Контекст);
	
	Если Результат <> Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ЗначениеДляЗаполнения.ЗначениеСвойства = Неопределено Тогда
		// Если из ДО пришло пустое значение - реквизит ИС нужно очистить.
		Возврат Результат;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипРеквизитаОбъектаИС) Тогда
		// Для ссылочных объектов нужное значение может быть передано из ДО в свойстве ExternalObject
		// или задано в регистре ОбъектыИнтегрированныеС1СДокументооборотом.
		Если ЗначениеДляЗаполнения.ExternalObject <> Неопределено Тогда
			Результат = СсылкаИзUUID(
				ЗначениеДляЗаполнения.ExternalObject.type,
				ЗначениеДляЗаполнения.ExternalObject.ID);
		КонецЕсли;
		Если Результат = Неопределено И Не ПустаяСтрока(ЗначениеДляЗаполнения.ИдентификаторОбъектаДО) Тогда
			Результат =
				РегистрыСведений.ОбъектыИнтегрированныеС1СДокументооборотом.СсылкаНаОбъектИСПоДаннымДокументооборота(
					ЗначениеДляЗаполнения.ИдентификаторОбъектаДО,
					ЗначениеДляЗаполнения.ТипОбъектаДО,
					ТипРеквизитаОбъектаИС);
		КонецЕсли;
		
		Если Результат <> Неопределено Тогда
			Возврат Результат;
		КонецЕсли;
		
		// Метаданные и менеджер объекта реквизита ИС понадобятся для дальнейшего поиска подходящего значения.
		МетаданныеРеквизитаИС = Метаданные.НайтиПоТипу(ТипРеквизитаОбъектаИС);
		МенеджерОбъектаРеквизитаИС = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеРеквизитаИС.ПолноеИмя());
	КонецЕсли;
	
	// Алгоритм подбора значения реквизита ИС напрямую зависит от его типа.
	Если МетаданныеРеквизитаИС <> Неопределено И ОбщегоНазначения.ЭтоСправочник(МетаданныеРеквизитаИС) Тогда
		
		// 1. Сопоставляем по ИдентификаторОбъектаДО.
		// 2. Ищем по ПредставлениеДляПоиска.
		// 3. Ищем по ИмяДляПоиска.
		// 4. Если ничего не нашли, и есть ИдентификаторОбъектаДО - создаем элемент, если нет - очищаем реквизит.
		// 5. Само ЗначениеСвойства не анализируем. Покажем его в тексте ошибки, в случае не удачного подбора.
		
		СсылкаПоИдентификатору = Неопределено;
		Результат = ЭлементСправочникаИСПоИдентификаторуОбъектаXDTO(
			ЗначениеДляЗаполнения,
			МетаданныеРеквизитаИС,
			МенеджерОбъектаРеквизитаИС,
			СсылкаПоИдентификатору);
		
		// Поиск по наименованию и другим реквизитам нельзя выполнять, если не определен
		// владелец для справочника с владельцами.
		Если Результат = Неопределено
				И (МетаданныеРеквизитаИС.Владельцы.Количество() = 0
					Или ЗначениеЗаполнено(ЗначениеДляЗаполнения.Владелец)) Тогда
			
			Если Не ПустаяСтрока(ЗначениеДляЗаполнения.ПредставлениеДляПоиска) Тогда
				Результат = МенеджерОбъектаРеквизитаИС.НайтиПоНаименованию(
					ЗначениеДляЗаполнения.ПредставлениеДляПоиска,
					Истина,,
					ЗначениеДляЗаполнения.Владелец); // Результат меняется с Неопределено на пустую ссылку, при не успешном поиске.
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Результат) И Не ПустаяСтрока(ЗначениеДляЗаполнения.ИмяДляПоиска) Тогда
				Результат = МенеджерОбъектаРеквизитаИС.НайтиПоНаименованию(
					ЗначениеДляЗаполнения.ИмяДляПоиска,
					Истина,,
					ЗначениеДляЗаполнения.Владелец);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Результат) Тогда
				Если СоздаватьЕслиНеНайден И СсылкаПоИдентификатору <> Неопределено Тогда
					// Создадим новый элемент в справочнике.
					Если Не ПравоДоступа("Добавление", МетаданныеРеквизитаИС) Тогда
						ВызватьИсключение СтрШаблон(
							НСтр("ru = 'Недостаточно прав для создания новых элементов (%1).
								|Обратитесь к администратору.'"),
							МетаданныеРеквизитаИС.Представление());
					КонецЕсли;
					Результат = НовыйОбъектИСИзОбъектаXDTO(
						МетаданныеРеквизитаИС,
						ЗначениеДляЗаполнения.ЗначениеСвойства,
						Контекст.ЗаполняемыйОбъектИС,
						СсылкаПоИдентификатору,
						ЗначениеДляЗаполнения.Владелец);
				Иначе
					Результат = Неопределено;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли МетаданныеРеквизитаИС <> Неопределено И ОбщегоНазначения.ЭтоПеречисление(МетаданныеРеквизитаИС) Тогда
		
		// 1. Ищем по ИмяДляПоиска.
		// 2. Ищем по ПредставлениеДляПоиска.
		// 3. Ищем по ИдентификаторОбъектаДО (в нем может передаваться имя значения перечисления ДО).
		// 4. Если ничего не нашли - результат будет пустой, реквизит ИС очистится, сформируем ошибку в ЖР.
		// 5. Само ЗначениеСвойства не анализируем. Покажем его в тексте ошибки, в случае не удачного подбора.
		Если Не ПустаяСтрока(ЗначениеДляЗаполнения.ИмяДляПоиска) Тогда
			Результат = ЗначениеПеречисленияПоИмениИлиСинониму(
				МенеджерОбъектаРеквизитаИС,
				МетаданныеРеквизитаИС.ЗначенияПеречисления,
				ЗначениеДляЗаполнения.ИмяДляПоиска);
		КонецЕсли;
		Если Результат = Неопределено И Не ПустаяСтрока(ЗначениеДляЗаполнения.ПредставлениеДляПоиска) Тогда
			Результат = ЗначениеПеречисленияПоИмениИлиСинониму(
				МенеджерОбъектаРеквизитаИС,
				МетаданныеРеквизитаИС.ЗначенияПеречисления,
				ЗначениеДляЗаполнения.ПредставлениеДляПоиска);
		КонецЕсли;
		Если Результат = Неопределено И Не ПустаяСтрока(ЗначениеДляЗаполнения.ИдентификаторОбъектаДО) Тогда
			Результат = ЗначениеПеречисленияПоИмениИлиСинониму(
				МенеджерОбъектаРеквизитаИС,
				МетаданныеРеквизитаИС.ЗначенияПеречисления,
				ЗначениеДляЗаполнения.ИдентификаторОбъектаДО);
		КонецЕсли;
		
	ИначеЕсли ТипРеквизитаОбъектаИС = Тип("Строка") Тогда
		
		// 1. Если заполнено ПредставлениеДляПоиска - присваиваем его.
		// 2. Если заполнено ИмяДляПоиска - присваиваем его.
		// 3. В противном случае смотрим на ЗначениеСвойства.
		// 4. Если это объект или список XDTO - используем метод ОбъектXDTOВСтроку.
		// 5. Иначе приводим ЗначениеСвойства к строке.
		Если Не ПустаяСтрока(ЗначениеДляЗаполнения.ПредставлениеДляПоиска) Тогда
			Результат = ЗначениеДляЗаполнения.ПредставлениеДляПоиска;
		ИначеЕсли Не ПустаяСтрока(ЗначениеДляЗаполнения.ИмяДляПоиска) Тогда
			Результат = ЗначениеДляЗаполнения.ИмяДляПоиска;
		ИначеЕсли ТипЗнч(ЗначениеДляЗаполнения.ЗначениеСвойства) = Тип("ОбъектXDTO")
				Или ТипЗнч(ЗначениеДляЗаполнения.ЗначениеСвойства) = Тип("СписокXDTO") Тогда
			Результат = ОбъектXDTOВСтроку(Прокси, ЗначениеДляЗаполнения.ЗначениеСвойства);
		Иначе
			Результат = Строка(ЗначениеДляЗаполнения.ЗначениеСвойства);
		КонецЕсли;
		
	ИначеЕсли ТипРеквизитаОбъектаИС = Тип("Число") Тогда
		
		// Реквизиты ИС типа число можно заполнять через приведение ЗначениеСвойства к числу.
		Попытка
			Результат = Число(ЗначениеДляЗаполнения.ЗначениеСвойства);
		Исключение
			Результат = Неопределено;
		КонецПопытки;
		
	ИначеЕсли ТипРеквизитаОбъектаИС = Тип("Дата") Тогда
		
		// Реквизиты ИС типа дата можно заполнять через приведение ЗначениеСвойства к дате.
		Попытка
			Результат = Дата(ЗначениеДляЗаполнения.ЗначениеСвойства);
		Исключение
			Результат = Неопределено;
		КонецПопытки;
		
	ИначеЕсли ТипРеквизитаОбъектаИС = Тип("Булево") Тогда
		
		// Реквизиты ИС типа булево можно заполнять через приведение ЗначениеСвойства к булеву.
		Попытка
			Результат = Булево(ЗначениеДляЗаполнения.ЗначениеСвойства);
		Исключение
			Результат = Неопределено;
		КонецПопытки;
		
	Иначе
		
		// Реквизиты ИС прочих типов можно заполнять только указанным значением ИС или из выражения на стороне ИС.
		// По значению из ДО подобрать нужное значение ИС возможности нет.
		Результат = Неопределено;
		
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		ЗафиксироватьОшибкуПодбораЗначенияРеквизита(
			Прокси,
			ЗначениеДляЗаполнения.ЗначениеСвойства,
			ТипРеквизитаОбъектаИС,
			Контекст.ЗаполняемыйОбъектИС,
			Контекст.ИмяРеквизитаОбъектаИС,
			ЗначениеДляЗаполнения.ИмяСвойства,
			ЗначениеДляЗаполнения.ТипXDTOОбъекта);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Конструктор структуры, описывающей контекст для заполнения реквизита объекта ИС.
//
// Возвращаемое значение:
//   Структура:
//     * ЗаполняемыйОбъектИС - Произвольный - заполняемый объект ИС.
//                           - Неопределено - если заполняемый объект отсутствует.
//     * ИмяРеквизитаОбъектаИС - Строка - имя заполняемого реквизита объекта ИС.
//     * ЭтоДополнительныйРеквизитИС - Булево - истина, если заполняемый реквизит объекта ИС является доп. свойством.
//     * ДополнительныйРеквизитИС - ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения - свойство-владелец.
//     * ПараметрыВыбора - Соответствие из КлючИЗначение - параметры выбора:
//       ** Ключ - Строка - имя параметра вида "Отбор.Владелец".
//       ** Значение - Произвольный - значение параметра (отбора).
//
Функция КонтекстДляЗаполненияРеквизитаОбъектаИС() Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("ЗаполняемыйОбъектИС", Неопределено);
	Контекст.Вставить("ИмяРеквизитаОбъектаИС", "");
	Контекст.Вставить("ЭтоДополнительныйРеквизитИС", Ложь);
	Контекст.Вставить("ДополнительныйРеквизитИС",
		ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка());
	Контекст.Вставить("ПараметрыВыбора", Новый Соответствие);
	
	Возврат Контекст;
	
КонецФункции

// Вызывается перед записью объектов интегрированной системы через механизм обмена с 1С:Документооборот.
// Позволяет выполнить дополнительные проверки перед записью, изменить ДополнительныеСвойства и отказаться от записи.
//
// Параметры:
//   ОбъектИС - ДокументОбъект
//            - СправочникОбъект - изменяемый объект ИС.
//   Отказ - Булево - признак отказа от записи.
//   РежимЗаписиДокумента - РежимЗаписиДокумента - позволяет изменить режим записи.
//   РежимПроведенияДокумента - РежимПроведенияДокумента - позволяет изменить режим проведения документа.
//
Процедура ПередЗаписьюОбъектаИС(ОбъектИС, Отказ,
		РежимЗаписиДокумента = Неопределено, РежимПроведенияДокумента = Неопределено) Экспорт
	
	СведенияОВерсииОбъекта = Новый Структура;
	СведенияОВерсииОбъекта.Вставить("АвторВерсии", Неопределено);
	СведенияОВерсииОбъекта.Вставить("ТипВерсииОбъекта", "ИзмененоПользователем");
	СведенияОВерсииОбъекта.Вставить("Комментарий", НСтр("ru = 'Получение данных из 1С:Документооборота'"));
	СведенияОВерсииОбъекта.Вставить("ПредупреждениеСинхронизации", "");
	
	ОбъектИС.ДополнительныеСвойства.Вставить("СведенияОВерсииОбъекта", СведенияОВерсииОбъекта);
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПередЗаписьюОбъектаИС(
		ОбъектИС,
		Отказ,
		РежимЗаписиДокумента,
		РежимПроведенияДокумента);
	
	Если Не Отказ
			И ОбъектИС.ДополнительныеСвойства.Свойство("СведенияОВерсииОбъекта")
			И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		МодульВерсионированиеОбъектов = ОбщегоНазначения.ОбщийМодуль("ВерсионированиеОбъектов");
		МодульВерсионированиеОбъектов.СоздатьВерсиюОбъектаПоОбменуДанными(
			ОбъектИС,
			ОбъектИС.ДополнительныеСвойства.СведенияОВерсииОбъекта,
			ОбщегоНазначения.СсылкаСуществует(ОбъектИС.Ссылка),
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.УзелДокументооборота());
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбщиеПроцедурыИФункции

// Получает адрес публикации веб-сервиса Документооборот.
//
// Возвращаемое значение:
//   Строка - адрес сервиса.
//
Функция АдресВебСервиса1СДокументооборот() Экспорт
	
	АдресВебСервиса = Константы.АдресВебСервиса1СДокументооборот.Получить();
	
	// Адрес должен заканчиваться на "/".
	Если ЗначениеЗаполнено(АдресВебСервиса)
			И Прав(АдресВебСервиса, 1) <> "/"
			И Прав(АдресВебСервиса, 1) <> "\" Тогда
		АдресВебСервиса = АдресВебСервиса + "/";
	КонецЕсли;
	
	// Удалим региональные настройки (например "/ru_RU/") из адреса.
	Если Прав(АдресВебСервиса, 4) = "/ru/" Или Прав(АдресВебСервиса, 4) = "/en/" Тогда
		АдресВебСервиса = Лев(АдресВебСервиса, СтрДлина(АдресВебСервиса) - 3);
	КонецЕсли;
	РегиональныеНастройки = Прав(АдресВебСервиса, 7);
	Если Лев(РегиональныеНастройки, 1) = "/" И Прав(РегиональныеНастройки, 1) = "/" Тогда
		РегиональныеНастройки = СтрЗаменить(РегиональныеНастройки, "/", "");
		МассивДляПроверки = СтрРазделить(РегиональныеНастройки, "_");
		Если МассивДляПроверки.Количество() = 2
				И СтрДлина(МассивДляПроверки[0]) = 2
				И СтрДлина(МассивДляПроверки[1]) = 2 Тогда
			АдресВебСервиса = Лев(АдресВебСервиса, СтрДлина(АдресВебСервиса) - 6);
		КонецЕсли;
	КонецЕсли;
	
	Возврат АдресВебСервиса;
	
КонецФункции

// Получает версию сервиса из параметров сеанса.
//
// Возвращаемое значение:
//   Строка - версия сервиса.
//
Функция ВерсияСервиса() Экспорт
	
	Возврат ПараметрыСеанса.ИнтеграцияС1СДокументооборотВерсияСервиса;
	
КонецФункции

// Выполняет произвольный алгоритм на встроенном языке 1С:Предприятия, предварительно устанавливая
// безопасный режим выполнения кода и безопасный режим разделения данных для всех разделителей,
// присутствующих в составе конфигурации.
//
// Параметры:
//   Алгоритм - Строка - алгоритм на встроенном языке "1С:Предприятия".
//   Параметры - Произвольный - контекст, который требуется для выполнения алгоритма.
//
Процедура ВыполнитьВБезопасномРежиме(Алгоритм, Параметры) Экспорт
	
	АлгоритмДляПроверки = НРег(Алгоритм);
	ЗапрещенныеСтроки = Новый Массив;
	Исключения = Новый Массив;
	СписокОшибок = Новый Массив;
	ПодходящиеИсключения = Новый Массив;
	
	ЗапрещенныеСтроки.Добавить("Выполнить("); //@NON-NLS-1
	ЗапрещенныеСтроки.Добавить("Выполнить "); //@NON-NLS-1
	ЗапрещенныеСтроки.Добавить(".Выполнить"); //@NON-NLS-1
	ЗапрещенныеСтроки.Добавить("Execute("); //@NON-NLS-1
	ЗапрещенныеСтроки.Добавить("Execute "); //@NON-NLS-1
	ЗапрещенныеСтроки.Добавить(".Execute"); //@NON-NLS-1
	
	Исключения.Добавить(".Выполнить()"); //@NON-NLS-1
	
	ПроверитьАлгоритм(АлгоритмДляПроверки, ЗапрещенныеСтроки, Исключения, СписокОшибок, ПодходящиеИсключения);
	
	ЗапрещенныеСтроки.Очистить();
	Исключения.Очистить();
	
	ЗапрещенныеСтроки.Добавить(".Записать("); //@NON-NLS-1
	ЗапрещенныеСтроки.Добавить(".Записать "); //@NON-NLS-1
	ЗапрещенныеСтроки.Добавить(" Записать("); //@NON-NLS-1
	ЗапрещенныеСтроки.Добавить(" Записать "); //@NON-NLS-1
	ЗапрещенныеСтроки.Добавить(".Write("); //@NON-NLS-1
	ЗапрещенныеСтроки.Добавить(".Write "); //@NON-NLS-1
	ЗапрещенныеСтроки.Добавить(" Write("); //@NON-NLS-1
	ЗапрещенныеСтроки.Добавить(" Write "); //@NON-NLS-1
	
	ЗапрещенныеСтроки.Добавить("Base64Значение"); //@NON-NLS-1
	ЗапрещенныеСтроки.Добавить("Base64Value"); //@NON-NLS-1
	
	ЗапрещенныеСтроки.Добавить("ХранилищеЗначения"); //@NON-NLS-1
	ЗапрещенныеСтроки.Добавить("ValueStorage"); //@NON-NLS-1
	
	ЗапрещенныеСтроки.Добавить("ДвоичныеДанные"); //@NON-NLS-1
	ЗапрещенныеСтроки.Добавить("BinaryData"); //@NON-NLS-1
	
	ПроверитьАлгоритм(АлгоритмДляПроверки, ЗапрещенныеСтроки, Исключения, СписокОшибок, ПодходящиеИсключения);
	
	Если СписокОшибок.Количество() > 0 Тогда
		Если ПодходящиеИсключения.Количество() = 0 Тогда
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'В выражении запрещено использовать конструкции:
					|%1'"),
				СтрСоединить(СписокОшибок, Символы.ПС));
		Иначе
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'В выражении запрещено использовать конструкции:
					|%1
					|
					|Список исключений:
					|%2'"),
				СтрСоединить(СписокОшибок, Символы.ПС),
				СтрСоединить(ПодходящиеИсключения, Символы.ПС));
		КонецЕсли;
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	// BSLLS:PairingBrokenTransaction-off
	// Проектное решение. Методы НачатьТранзакцию / ОтменитьТранзакцию используются для предотвращения
	// несанкционированных действий с БД из выражения на встроенном языке.
	
	НачатьТранзакцию();
	
	Попытка
		ОбщегоНазначения.ВыполнитьВБезопасномРежиме(Алгоритм, Параметры);
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Если ТранзакцияАктивна() Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
	
	// BSLLS:PairingBrokenTransaction-on
	
КонецПроцедуры

// Выполняет запрос к сервису, превращая сообщения об ошибках в вид, понятный пользователю.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Запрос - ОбъектXDTO - выполняемый запрос.
//
// Возвращаемое значение:
//   ОбъектXDTO - результат выполнения запроса.
//
Функция ВыполнитьЗапрос(Прокси, Запрос) Экспорт
	
	Попытка
		
		Результат = Прокси.execute(Запрос);
		Возврат Результат;
		
	Исключение
		
		Инфо = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(Инфо));
		
		КраткоеПредставлениеОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(Инфо);
		// По известным видам ошибок изменим текст сообщения.
		Если Найти(КраткоеПредставлениеОшибки, НСтр("ru = 'Аутентификация пользователя не выполнена'")) <> 0 Тогда
			
			ПараметрыСеанса.ИнтеграцияС1СДокументооборотВерсияСервиса = "0.0.0.0";
			КраткоеПредставлениеОшибки = НСтр("ru = 'Неверное имя пользователя или пароль. Проверьте имя
				|и пароль в настройках авторизации в 1С:Документообороте.'");
			
		// По неизвестным видам ошибок превратим HTML в простой текст.
		ИначеЕсли Найти(КраткоеПредставлениеОшибки, "<html>") <> 0 Тогда
			
			HTMLДокумент = Новый ФорматированныйДокумент;
			HTMLДокумент.УстановитьHTML(КраткоеПредставлениеОшибки, Новый Структура);
			КраткоеПредставлениеОшибки = HTMLДокумент.ПолучитьТекст();
			
		Иначе
			
			// Возможно исключение возникло из-за того что сервис ДО физически не доступен.
			// Для проверки нужно запросить версию сервиса.
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.УстановитьВерсиюСервисаВПараметрыСеанса();
			Если ВерсияСервиса() = "0.0.0.0" Тогда
				КраткоеПредставлениеОшибки = НСтр("ru = 'Нет доступа к 1С:Документообороту.'");
			КонецЕсли;
			
		КонецЕсли;
		
		ВызватьИсключение КраткоеПредставлениеОшибки;
		
	КонецПопытки;
	
КонецФункции

// Выполняет пакет запросов к сервису Документооборота.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Запросы - Массив из ОбъектXDTO - запросы пакета.
//   ПроверятьПодчиненные - Булево - указывает требуется ли проверять результаты запросов, входящих в пакет.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMBatchResponse.
//
Функция ВыполнитьПакетныйЗапрос(Прокси, Запросы, ПроверятьПодчиненные = Ложь) Экспорт
	
	Пакет = СоздатьОбъект(Прокси, "DMBatchRequest");
	ЗапросыПакета = Пакет.requests; // СписокXDTO
	
	Для Каждого Запрос Из Запросы Цикл
		ЗапросыПакета.Добавить(Запрос);
	КонецЦикла;
	
	ОтветНаЗапросыПакета = ВыполнитьЗапрос(Прокси, Пакет);
	ПроверитьВозвратВебСервиса(Прокси, ОтветНаЗапросыПакета);
	
	Если ПроверятьПодчиненные Тогда
		Для Каждого Ответ Из ОтветНаЗапросыПакета.responses Цикл
			ПроверитьВозвратВебСервиса(Прокси, Ответ);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ОтветНаЗапросыПакета;
	
КонецФункции

// Возвращает структуру данных для заполнения объекта ИС на основании объекта ДО.
//
// Параметры:
//   УИДПравила - УникальныйИдентификатор - уникальный идентификатор используемого правила.
//   ТипОбъектаДО - Строка - имя типа объекта XDTO.
//   ИдентификаторОбъектаДО - Строка - идентификатор объекта Документооборота.
//
// Возвращаемое значение:
//   Структура:
//     * ИмяФормы - Строка - имя формы объекта этой конфигурации.
//     * Объект1СДокументооборота - Структура:
//         ** ID - Строка - идентификатор объекта.
//         ** Тип - Строка - тип объекта.
//     * ТипСоздаваемогоОбъекта - Строка - тип создаваемого объекта ИС.
//     * ЗначенияРеквизитов - Структура - ключ - имя реквизита, значение - значение реквизита:
//       ** ЭтоДополнительныйРеквизитИС - Булево
//       ** ЭтоТаблица - Булево
//       ** Таблица - Строка
//       ** ДополнительныеРеквизиты - Массив из Структура:
//         *** Свойство - ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения
//         *** Значение - Характеристика.ДополнительныеРеквизитыИСведения
//     * ДополнительныеРеквизиты - Массив из Структура - значения дополнительных реквизитов:
//       ** Свойство - ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения
//       ** Значение - Характеристика.ДополнительныеРеквизитыИСведения
//     * НаличиеПрисоединенныхФайлов - Булево
//                                   - Неопределено - признак наличия присоединенных файлов.
//     * ПравилоИнтеграции - СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом
//                         - СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом3
//
Функция ДанныеЗаполненияИнтегрируемогоОбъекта(УИДПравила, ТипОбъектаДО, ИдентификаторОбъектаДО) Экспорт
	
	Настройки = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИспользоватьИнтеграцию();
	Если Настройки.ИспользоватьИнтеграциюДО2 Тогда
		МодульПравилаИнтеграцииС1СДокументооборотом =
			ОбщегоНазначения.ОбщийМодуль("Справочники.ПравилаИнтеграцииС1СДокументооборотом");
		Правило = МодульПравилаИнтеграцииС1СДокументооборотом.ПолучитьСсылку(УИДПравила);
	ИначеЕсли Настройки.ИспользоватьИнтеграциюДО3 Тогда
		МодульПравилаИнтеграцииС1СДокументооборотом3 =
			ОбщегоНазначения.ОбщийМодуль("Справочники.ПравилаИнтеграцииС1СДокументооборотом3");
		Правило = МодульПравилаИнтеграцииС1СДокументооборотом3.ПолучитьСсылку(УИДПравила);
	Иначе
		ВызватьИсключение НСтр("ru = 'Не настроена интеграция с 1С:Документооборот'");
	КонецЕсли;
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	ОбъектXDTO = ПолучитьОбъект(Прокси, ТипОбъектаДО, ИдентификаторОбъектаДО,, Правило);
	
	ТипОбъектаИС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Правило, "ТипОбъектаИС");
	ИмяФормы = ТипОбъектаИС + ".ФормаОбъекта";
	Объект = НовыйОбъектИС(ТипОбъектаИС);
	
	Если Настройки.ИспользоватьИнтеграциюДО2 Тогда
		МодульПравилаИнтеграцииС1СДокументооборотом =
			ОбщегоНазначения.ОбщийМодуль("Справочники.ПравилаИнтеграцииС1СДокументооборотом");
		МодульПравилаИнтеграцииС1СДокументооборотом.ЗаполнитьОбъектПоОбъектуXDTO(
			Прокси,
			Объект,
			ОбъектXDTO,
			Правило);
	ИначеЕсли Настройки.ИспользоватьИнтеграциюДО3 Тогда
		МодульПравилаИнтеграцииС1СДокументооборотом3 =
			ОбщегоНазначения.ОбщийМодуль("Справочники.ПравилаИнтеграцииС1СДокументооборотом3");
		МодульПравилаИнтеграцииС1СДокументооборотом3.ЗаполнитьОбъектИСПоОбъектуXDTO(
			Прокси,
			Объект,
			ОбъектXDTO,
			Правило);
	КонецЕсли;
	
	РеквизитыОбъекта = РеквизитыОбъектаИС(ТипОбъектаИС);
	
	// Перенесем данные объекта в структуру.
	ЗначенияРеквизитов = Новый Структура;
	РеквизитыШапки = РеквизитыОбъекта.НайтиСтроки(
		Новый Структура("ЭтоДополнительныйРеквизитИС, ЭтоТаблица, Таблица", Ложь, Ложь, ""));
	Для Каждого РеквизитыШапки Из РеквизитыШапки Цикл
		ЗначенияРеквизитов.Вставить(РеквизитыШапки.Имя, Объект[РеквизитыШапки.Имя]);
	КонецЦикла;
	ТабличныеЧасти = РеквизитыОбъекта.НайтиСтроки(
		Новый Структура("ЭтоДополнительныйРеквизитИС, ЭтоТаблица", Ложь, Истина));
	Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
		ЗначенияРеквизитов.Вставить(ТабличнаяЧасть.Имя, Новый Массив);
		ТекущаяТабличнаяЧасть = ЗначенияРеквизитов[ТабличнаяЧасть.Имя]; // Массив
		РеквизитыТабличнойЧасти = РеквизитыОбъекта.НайтиСтроки(
			Новый Структура("ЭтоДополнительныйРеквизитИС, Таблица", Ложь, ТабличнаяЧасть.Имя));
		
		Для Каждого Строка Из Объект[ТабличнаяЧасть.Имя] Цикл
			СтруктураСтроки = Новый Структура;
			Для Каждого РеквизитТабличнойЧасти Из РеквизитыТабличнойЧасти Цикл
				СтруктураСтроки.Вставить(РеквизитТабличнойЧасти.Имя, Строка[РеквизитТабличнойЧасти.Имя]);
			КонецЦикла;
			ТекущаяТабличнаяЧасть.Добавить(СтруктураСтроки);
		КонецЦикла;
		
	КонецЦикла;
	
	ДополнительныеРеквизиты = Новый Массив;
	
	Если Объект.Ссылка.Метаданные().ТабличныеЧасти.Найти("ДополнительныеРеквизиты") <> Неопределено Тогда
		Для Каждого Строка Из Объект.ДополнительныеРеквизиты Цикл
			ДопРеквизит = Новый Структура;
			ДопРеквизит.Вставить("Свойство",Строка.Свойство);
			ДопРеквизит.Вставить("Значение", Строка.Значение);
			ДополнительныеРеквизиты.Добавить(ДопРеквизит);
		КонецЦикла;
	КонецЕсли;
	
	ЗначенияРеквизитов.Вставить("ДополнительныеРеквизиты", ДополнительныеРеквизиты);
	
	Объект1СДокументооборота = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО(
		ИдентификаторОбъектаДО,
		ТипОбъектаДО);
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ИмяФормы", ИмяФормы);
	ДанныеЗаполнения.Вставить("Объект1СДокументооборота", Объект1СДокументооборота);
	ДанныеЗаполнения.Вставить("ТипСоздаваемогоОбъекта", ТипОбъектаИС);
	ДанныеЗаполнения.Вставить("ЗначенияРеквизитов", ЗначенияРеквизитов);
	ДанныеЗаполнения.Вставить("ДополнительныеРеквизиты", ДополнительныеРеквизиты);
	ДанныеЗаполнения.Вставить("ПравилоИнтеграции", Правило);
	
	Если СвойствоУстановлено(ОбъектXDTO, "files") Тогда
		ДанныеЗаполнения.Вставить("НаличиеПрисоединенныхФайлов", ОбъектXDTO.files.Количество() <> 0);
	Иначе
		ДанныеЗаполнения.Вставить("НаличиеПрисоединенныхФайлов", Неопределено);
	КонецЕсли;
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

// Добавляет строку инвертируемых констант в таблицу зависимости констант.
//
// Параметры:
//   ТаблицаКонстант - см. ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗависимостиКонстант
//   ИмяРодительскойКонстанты - Строка - имя родительской константы как оно задано в конфигураторе.
//   ИмяПодчиненнойКонстанты - Строка - имя подчиненной константы как оно задано в конфигураторе.
//
Процедура ДобавитьСтрокуИнвертируемыхКонстант(ТаблицаКонстант, ИмяРодительскойКонстанты,
		ИмяПодчиненнойКонстанты = "") Экспорт
	
	Если ИмяПодчиненнойКонстанты = "" Тогда
		ИмяПодчиненнойКонстанты = "Не" + ИмяРодительскойКонстанты;
	КонецЕсли;
	
	ДобавитьСтрокуТаблицыЗависимостиКонстант(
		ТаблицаКонстант,
		ИмяРодительскойКонстанты,
		Ложь,
		ИмяПодчиненнойКонстанты,
		Истина);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(
		ТаблицаКонстант,
		ИмяРодительскойКонстанты,
		Истина,
		ИмяПодчиненнойКонстанты,
		Ложь);
	
КонецПроцедуры

// Добавляет строку в таблицу соответствия типов.
//
// Параметры:
//   Таблица - ТаблицаЗначений - таблица соответствия типов.
//   ИмяТипаXDTO - Строка - имя типа XDTO
//   ТипОбъектаИС - Тип - тип объекта ИС.
//
Процедура ДобавитьСтрокуСоответствияТипов(Таблица, ИмяТипаXDTO, ТипОбъектаИС) Экспорт
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ИмяТипаXDTO = ИмяТипаXDTO;
	НоваяСтрока.ТипОбъектаИС = ТипОбъектаИС;
	
КонецПроцедуры

// Добавляет строку в таблицу зависимости констант.
//
// Параметры:
//   ТаблицаКонстант - см. ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗависимостиКонстант
//   ИмяРодительскойКонстанты - Строка - имя родительской константы как оно задано в конфигураторе
//   ЗначениеРодительскойКонстанты - Произвольный - значение родительской константы
//   ИмяПодчиненнойКонстанты - Строка - имя подчиненной константы как оно задано в конфигураторе
//   ЗначениеПодчиненнойКонстанты - Произвольный - значение подчиненной константы
//
Процедура ДобавитьСтрокуТаблицыЗависимостиКонстант(ТаблицаКонстант, ИмяРодительскойКонстанты,
		ЗначениеРодительскойКонстанты, ИмяПодчиненнойКонстанты, ЗначениеПодчиненнойКонстанты) Экспорт
	
	НоваяСтрока = ТаблицаКонстант.Добавить();
	НоваяСтрока.ИмяРодительскойКонстанты = ИмяРодительскойКонстанты;
	НоваяСтрока.ЗначениеРодительскойКонстанты = ЗначениеРодительскойКонстанты;
	НоваяСтрока.ИмяПодчиненнойКонстанты = ИмяПодчиненнойКонстанты;
	НоваяСтрока.ЗначениеПодчиненнойКонстанты = ЗначениеПодчиненнойКонстанты;
	
КонецПроцедуры

// Возвращает ссылку на дополнительный реквизит по уникальному имени.
//
// Параметры:
//   ИмяДопРеквизита - Строка - см. ИнтеграцияС1СДокументооборотБазоваяФункциональность.ИмяДопРеквизита
//
// Возвращаемое значение:
//   ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения
//
Функция ДопРеквизитПоИмени(ИмяДопРеквизита) Экспорт
	
	ИдентификаторДопРеквизита = СтрЗаменить(ИмяДопРеквизита, "ДопРеквизит_", "");
	ИдентификаторДопРеквизита = СтрШаблон("%1-%2-%3-%4-%5",
		Лев(ИдентификаторДопРеквизита, 8),
		Сред(ИдентификаторДопРеквизита, 9, 4),
		Сред(ИдентификаторДопРеквизита, 13, 4),
		Сред(ИдентификаторДопРеквизита, 17, 4),
		Сред(ИдентификаторДопРеквизита, 21, 12));
	
	Возврат ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(
		Новый УникальныйИдентификатор(ИдентификаторДопРеквизита));
	
КонецФункции

// Получает доступность функционала версии web-сервиса Документооборота.
//
// Параметры:
//   ВерсияСервиса - Строка - версия web-сервиса Документооборота, содержащая требуемый функционал.
//   Оптимистично - Булево - признак необходимости вернуть Истина, если версия сервиса пока неизвестна.
//
// Возвращаемое значение:
//   Булево - Истина, если web-сервис Документооборота указанной версии доступен.
//
Функция ДоступенФункционалВерсииСервиса(ВерсияСервиса = "", Оптимистично = Ложь) Экспорт
	
	Если Оптимистично И Не ПараметрыСеанса.ИнтеграцияС1СДокументооборотПарольИзвестен Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПользователюРазрешеноИспользованиеИнтеграции() Тогда
		ТекущаяВерсия = ВерсияСервиса();
	Иначе
		ТекущаяВерсия = "0.0.0.0";
	КонецЕсли;
	
	Если ТекущаяВерсия = "0.0.0.0" Тогда // Ошибка подключения.
		Возврат Ложь;
	ИначеЕсли ПустаяСтрока(ТекущаяВерсия) Тогда // В процессе получения.
		Если Оптимистично Тогда
			Возврат Истина; // Пока не знаем, но, скорее всего, доступна.
		Иначе
			Возврат Ложь; // Пока не знаем, но, скорее всего, недоступна.
		КонецЕсли;
	ИначеЕсли ПустаяСтрока(ВерсияСервиса) Тогда // Нужна хоть какая-нибудь.
		Возврат Истина;
	КонецЕсли;
	
	ОписаниеТекущейВерсии = СтрРазделить(ТекущаяВерсия, ".");
	Если ОписаниеТекущейВерсии.Количество() <> 5 Тогда
		// Старые версии не сообщают редакцию, а для этих версий она важна.
		// Оптимистично предположим КОРП.
		Если ТекущаяВерсия = "1.2.7.3" Или ТекущаяВерсия = "1.2.8.1" Тогда
			ОписаниеТекущейВерсии.Добавить("CORP");
		Иначе
			ОписаниеТекущейВерсии.Добавить("PROF");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВерсияНеМеньше(ОписаниеТекущейВерсии, ВерсияСервиса);
	
КонецФункции

// Определяет, встроены ли в конфигурации модули БИД, предназначенные для интеграции с 1С:Документооборотом редакции 2.
//
// Возвращаемое значение:
//   Булево
//
Функция ЕстьПодсистемаДО2() Экспорт
	
	Возврат ОбщегоНазначения.ПодсистемаСуществует(
		"ИнтеграцияС1СДокументооборотом.ИнтеграцияС1СДокументооборотомРедакции2");
	
КонецФункции

// Определяет, встроены ли в конфигурации модули БИД, предназначенные для интеграции с 1С:Документооборотом редакции 3.
//
// Возвращаемое значение:
//   Булево
//
Функция ЕстьПодсистемаДО3() Экспорт
	
	Возврат ОбщегоНазначения.ПодсистемаСуществует(
		"ИнтеграцияС1СДокументооборотом.ИнтеграцияС1СДокументооборотомРедакции3");
	
КонецФункции

// Проверяет значение на объектный тип, содержащий уникальный идентификатор.
//
// Параметры:
//   Значение - Произвольный - проверяемое значение.
//
// Возвращаемое значение:
//   Булево - Признак наличия у объекта уникального идентификатора.
//
Функция ЕстьУникальныйИдентификатор(Значение) Экспорт
	
	Если Значение = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Тип = ТипЗнч(Значение);
	
	Возврат Справочники.ТипВсеСсылки().СодержитТип(Тип)
		Или Документы.ТипВсеСсылки().СодержитТип(Тип)
		Или ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип)
		Или БизнесПроцессы.ТипВсеСсылки().СодержитТип(Тип)
		Или Задачи.ТипВсеСсылки().СодержитТип(Тип);
	
КонецФункции

// Возвращает таблицу, описывающую зависимость констант в конфигурации.
// Каждая строка таблицы означает:
// для родительской константы со значением Х допустимо только значение Y для подчиненной константы.
//
// Возвращаемое значение:
//   ТаблицаЗначений:
//     * ИмяРодительскойКонстанты - Строка
//     * ИмяПодчиненнойКонстанты - Строка
//     * ЗначениеРодительскойКонстанты - Произвольный
//     * ЗначениеПодчиненнойКонстанты - Произвольный
//
Функция ЗависимостиКонстант() Экспорт
	
	Настройки = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИспользоватьИнтеграцию();
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("ИмяРодительскойКонстанты", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ИмяПодчиненнойКонстанты",  Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ЗначениеРодительскойКонстанты");
	Результат.Колонки.Добавить("ЗначениеПодчиненнойКонстанты");
	
	Результат.Индексы.Добавить("ИмяРодительскойКонстанты");
	Результат.Индексы.Добавить("ИмяПодчиненнойКонстанты");
	
	Если ЕстьПодсистемаДО2() И ЕстьПодсистемаДО3() Тогда
		ДобавитьСтрокуТаблицыЗависимостиКонстант(
			Результат,
			"ИспользоватьИнтеграциюС1СДокументооборот3",
			Истина,
			"ИспользоватьИнтеграциюС1СДокументооборот",
			Ложь);
		ДобавитьСтрокуТаблицыЗависимостиКонстант(
			Результат,
			"ИспользоватьИнтеграциюС1СДокументооборот",
			Истина,
			"ИспользоватьИнтеграциюС1СДокументооборот3",
			Ложь);
	КонецЕсли;
	
	Если ЕстьПодсистемаДО2() Тогда
		ДобавитьСтрокуТаблицыЗависимостиКонстант(
			Результат,
			"ИспользоватьИнтеграциюС1СДокументооборот",
			Ложь,
			"ИспользоватьЕжедневныеОтчеты1СДокументооборота",
			Ложь);
		ДобавитьСтрокуТаблицыЗависимостиКонстант(
			Результат,
			"ИспользоватьИнтеграциюС1СДокументооборот",
			Ложь,
			"ИспользоватьЭлектроннуюПочту1СДокументооборота",
			Ложь);
		ДобавитьСтрокуТаблицыЗависимостиКонстант(
			Результат,
			"ИспользоватьИнтеграциюС1СДокументооборот",
			Ложь,
			"ИспользоватьФайловоеХранилище1СДокументооборота",
			Ложь);
		ДобавитьСтрокуТаблицыЗависимостиКонстант(
			Результат,
			"ИспользоватьИнтеграциюС1СДокументооборот",
			Ложь,
			"ИспользоватьПроцессыИЗадачи1СДокументооборота",
			Ложь);
		ДобавитьСтрокуТаблицыЗависимостиКонстант(
			Результат,
			"ИспользоватьИнтеграциюС1СДокументооборот",
			Ложь,
			"ИспользоватьСвязанныеДокументы1СДокументооборота",
			Ложь);
		ДобавитьСтрокуТаблицыЗависимостиКонстант(
			Результат,
			"ИспользоватьИнтеграциюС1СДокументооборот",
			Ложь,
			"ИспользоватьПрисоединенныеФайлы1СДокументооборота",
			Ложь);
		
		// Согласование через 1С:Документооборот
		ДобавитьСтрокуТаблицыЗависимостиКонстант(
			Результат,
			"ИспользоватьИнтеграциюС1СДокументооборот",
			Ложь,
			"ИспользоватьСогласованиеЧерез1СДокументооборот",
			Ложь);
		Если Настройки.ИспользоватьИнтеграциюДО2 Тогда
			ДобавитьСтрокуТаблицыЗависимостиКонстант(
				Результат,
				"ИспользоватьПроцессыИЗадачи1СДокументооборота",
				Ложь,
				"ИспользоватьСогласованиеЧерез1СДокументооборот",
				Ложь);
			ДобавитьСтрокуТаблицыЗависимостиКонстант(
				Результат,
				"ИспользоватьСогласованиеЧерез1СДокументооборот",
				Истина,
				"ИспользоватьПроцессыИЗадачи1СДокументооборота",
				Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьПодсистемаДО3() Тогда
		ДобавитьСтрокуТаблицыЗависимостиКонстант(
			Результат,
			"ИспользоватьИнтеграциюС1СДокументооборот3",
			Ложь,
			"ИспользоватьОбработкуОбъектов1СДокументооборота",
			Ложь);
		ДобавитьСтрокуТаблицыЗависимостиКонстант(
			Результат,
			"ИспользоватьИнтеграциюС1СДокументооборот3",
			Ложь,
			"ИспользоватьПрисоединенныеФайлы1СДокументооборота",
			Ложь);
		
		// Согласование через 1С:Документооборот
		ДобавитьСтрокуТаблицыЗависимостиКонстант(
			Результат,
			"ИспользоватьИнтеграциюС1СДокументооборот3",
			Ложь,
			"ИспользоватьСогласованиеЧерез1СДокументооборот",
			Ложь);
		Если Настройки.ИспользоватьИнтеграциюДО3 Тогда
			ДобавитьСтрокуТаблицыЗависимостиКонстант(
				Результат,
				"ИспользоватьОбработкуОбъектов1СДокументооборота",
				Ложь,
				"ИспользоватьСогласованиеЧерез1СДокументооборот",
				Ложь);
			ДобавитьСтрокуТаблицыЗависимостиКонстант(
				Результат,
				"ИспользоватьСогласованиеЧерез1СДокументооборот",
				Истина,
				"ИспользоватьОбработкуОбъектов1СДокументооборота",
				Истина);
		КонецЕсли;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПриПолученииТаблицыЗависимостиКонстант(Результат);
	
	Возврат Результат;
	
КонецФункции

// Записывает изменения объекта в Документообороте.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Объект - ОбъектXDTO - XDTO объект с сохраняемыми данными.
//
// Возвращаемое значение:
//   ОбъектXDTO - Объект XDTO типа DMUpdateResponse.
//
Функция ЗаписатьОбъект(Прокси, Объект) Экспорт
	
	Возврат ЗаписатьОбъекты(Прокси, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект));
	
КонецФункции

// Записывает изменения объектов в Документообороте.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Объекты - Массив из ОбъектXDTO - массив XDTO объектов с сохраняемыми данными.
//
// Возвращаемое значение:
//   ОбъектXDTO - Объект XDTO типа DMUpdateResponse.
//
Функция ЗаписатьОбъекты(Прокси, Объекты) Экспорт
	
	Запрос = ЗаписатьОбъектыЗапрос(Прокси, Объекты);
	РезультатЗаписи = ВыполнитьЗапрос(Прокси, Запрос);
	ПроверитьВозвратВебСервиса(Прокси, РезультатЗаписи);
	
	Для Каждого РезультатXDTO Из РезультатЗаписи.objects Цикл
		Если ПроверитьТип(Прокси, РезультатXDTO, "DMObjectChangeResponseStructure") И РезультатXDTO.success = Ложь Тогда
			ПроверитьВозвратВебСервиса(Прокси, РезультатXDTO.error);
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатЗаписи;
	
КонецФункции

// Возвращает запрос для записи изменений объектов в Документообороте.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Объекты - Массив из ОбъектXDTO - массив XDTO объектов с сохраняемыми данными.
//
// Возвращаемое значение:
//   ОбъектXDTO - Объект XDTO типа DMUpdateRequest.
//
Функция ЗаписатьОбъектыЗапрос(Прокси, Объекты) Экспорт
	
	Запрос = СоздатьОбъект(Прокси, "DMUpdateRequest");
	СписокОбъектов = Запрос.objects; // СписокXDTO
	
	Для Каждого Объект Из Объекты Цикл
		СписокОбъектов.Добавить(Объект);
	КонецЦикла;
	
	Возврат Запрос;
	
КонецФункции

// Записывает ошибку в ЖР.
//
// Параметры:
//   ТекстОшибки - Строка - текст ошибки.
//   СобытиеВторогоУровня - Строка - имя события, добавляемое через точку к имени события по умолчанию.
//   Данные - Произвольный - данные, с которыми связано событие.
//
Процедура ЗаписатьОшибку(ТекстОшибки, СобытиеВторогоУровня = "", Знач Данные = Неопределено) Экспорт
	
	Если Данные <> Неопределено Тогда
		ТипДанных = ТипЗнч(Данные);
		Если Не ОбщегоНазначения.ЭтоСсылка(ТипДанных) Тогда
			ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипДанных);
			Если ОбъектМетаданных <> Неопределено И ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(ОбъектМетаданных) Тогда
				Данные = Данные.Ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации(СобытиеВторогоУровня),
		УровеньЖурналаРегистрации.Ошибка,,
		Данные,
		ТекстОшибки);
	
КонецПроцедуры

// Записывает ошибку из объекта XDTO типа DMError в ЖР.
//
// Параметры:
//   ОшибкаXDTO - ОбъектXDTO - объект XDTO типа DMError;
//
Процедура ЗаписатьОшибкуXDTO(ОшибкаXDTO) Экспорт
	
	ТекстОшибки = СокрЛП(ОшибкаXDTO.description);
	СобытиеВторогоУровня = СокрЛП(ОшибкаXDTO.subject);
	СобытиеВторогоУровня = СтрЗаменить(СобытиеВторогоУровня, ".", "_");
	
	// Запишем в ЖР полный текст ошибки.
	ЗаписатьОшибку(ТекстОшибки, СобытиеВторогоУровня);
	
КонецПроцедуры

// Записывает предупреждение в ЖР.
//
// Параметры:
//   ТекстПредупреждения - Строка - текст предупреждения.
//   СобытиеВторогоУровня - Строка - имя события, добавляемое через точку к имени события по умолчанию.
//   Данные - Произвольный - данные, с которыми связано событие.
//
Процедура ЗаписатьПредупреждение(ТекстПредупреждения, СобытиеВторогоУровня = "", Данные = Неопределено) Экспорт
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации(СобытиеВторогоУровня),
		УровеньЖурналаРегистрации.Предупреждение,,
		Данные,
		ТекстПредупреждения);
	
КонецПроцедуры

// Заполняет свойства объекта-приемника по объекту-источнику.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Приемник - ОбъектXDTO - заполняемый объект.
//   Источник - ОбъектXDTO - источник данных заполнения.
//
Процедура ЗаполнитьЗначенияСвойствXDTO(Прокси, Приемник, Источник) Экспорт
	
	Для Каждого Свойство Из Источник.Свойства() Цикл
		
		СвойствоПриемника = Приемник.Свойства().Получить(Свойство.Имя);
		Если СвойствоПриемника <> Неопределено
				И (СвойствоУстановлено(Источник, Свойство.Имя)
					Или СвойствоПриемника.НижняяГраница <> 0) Тогда
			
			Если ТипЗнч(Источник[Свойство.Имя]) = Тип("ОбъектXDTO") Тогда
				ОбъектноеСвойство = СоздатьОбъект(Прокси, Свойство.Тип.Имя);
				ЗаполнитьЗначенияСвойствXDTO(Прокси, ОбъектноеСвойство, Источник[Свойство.Имя]);
				Приемник[Свойство.Имя] = ОбъектноеСвойство;
				
			ИначеЕсли ТипЗнч(Источник[Свойство.Имя]) = Тип("СписокXDTO") Тогда
				СписокПриемника = Приемник[Свойство.Имя]; // СписокXDTO
				Для Каждого Элемент Из Источник[Свойство.Имя] Цикл
					НовыйЭлемент = СоздатьОбъект(Прокси,Свойство.Тип.Имя);
					ЗаполнитьЗначенияСвойствXDTO(Прокси, НовыйЭлемент, Элемент);
					СписокПриемника.Добавить(НовыйЭлемент);
				КонецЦикла;
				
			Иначе
				Приемник[Свойство.Имя] = Источник[Свойство.Имя];
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет объект XDTO (приемник) по реквизиту (источник).
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Источник - ФормаКлиентскогоПриложения, Структура - содержит реквизиты или свойства,
//     по которым заполняется объект XDTO.
//   ИмяРеквизита - Строка - имя объектного реквизита источника.
//   Приемник - ОбъектXDTO - содержит заполняемое свойство.
//   ТипОбъектаXDTO - Строка - тип XDTO заполняемого свойства.
//   ЗаполнятьВсегда - Булево - признак заполнения, даже если объектный реквизит не заполнен.
//
Процедура ЗаполнитьОбъектXDTOИзОбъектногоРеквизита(Прокси, Источник, ИмяРеквизита, Приемник,
		Знач ТипОбъектаXDTO = "", ЗаполнятьВсегда = Ложь) Экспорт
	
	Если ЗначениеЗаполнено(Источник[ИмяРеквизита])
			Или ЗначениеЗаполнено(Источник[ИмяРеквизита + "ID"])
			Или ЗаполнятьВсегда Тогда
		Если ТипОбъектаXDTO = "" Тогда
			ТипОбъектаXDTO = Источник[ИмяРеквизита + "Тип"];
		КонецЕсли;
		Приемник = СоздатьОбъект(Прокси, ТипОбъектаXDTO);
		Приемник.name = Источник[ИмяРеквизита];
		Приемник.objectID = СоздатьObjectID(Прокси, Источник[ИмяРеквизита + "ID"], Источник[ИмяРеквизита + "Тип"]);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет объектный реквизит (приемник) по объекту XDTO (источник).
//
// Параметры:
//   Приемник - Произвольный - объект, содержащий реквизиты или свойства,
//     которые должны быть заполнены по свойству объекта XDTO.
//   Источник - ОбъектXDTO, СвойствоXDTO - объект XDTO или его свойство, по которому будет заполнен объектный реквизит.
//   ИмяРеквизита - Строка - имя объектного реквизита.
//   ЗаполнятьПредставление - Булево - признак необходимости заполнения реквизита представления
//     по свойству objectID.presentation.
//
Процедура ЗаполнитьОбъектныйРеквизит(Приемник, Источник, ИмяРеквизита, ЗаполнятьПредставление = Ложь) Экспорт
	
	Если Источник <> Неопределено Тогда
		
		Приемник[ИмяРеквизита] = Источник.name;
		Приемник[ИмяРеквизита + "ID"] = Источник.objectID.ID;
		Приемник[ИмяРеквизита + "Тип"] = Источник.objectID.type;
		
		// Старые версии сервиса не заполняют представление.
		Если ЗаполнятьПредставление Тогда
			Если СвойствоУстановлено(Источник.objectID, "presentation") Тогда
				Приемник[ИмяРеквизита + "Представление"] = Источник.objectID.presentation;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет объект XDTO электронными подписями.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ОбъектXDTO - ОбъектXDTO - объект XDTO со свойством signatures, куда будут добавлены подписи.
//   МассивПодписей - Массив из см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеПодписи
//
Процедура ЗаполнитьПодписиОбъектаXDTO(Прокси, ОбъектXDTO, МассивПодписей) Экспорт
	
	СписокПодписей = ОбъектXDTO.signatures; // СписокXDTO
	СписокПодписей.Очистить();
	Для Каждого ДанныеПодписи Из МассивПодписей Цикл
		ПодписьXDTO = СоздатьОбъект(Прокси, "DMSignature");
		ЗаполнитьXDTOПодпись(Прокси, ПодписьXDTO, ДанныеПодписи);
		СписокПодписей.Добавить(ПодписьXDTO);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет указанный реквизит формы по свойству объекта XDTO.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма, реквизит которой заполняется.
//   ИмяРеквизитаФормы - Строка - имя заполняемого реквизита.
//   ОбъектXDTO - ОбъектXDTO - источник данных заполнения.
//   ИмяСвойстваXDTO - Строка - имя свойства-источника данных.
//
Процедура ЗаполнитьРеквизитФормыИзXDTO(Форма, ИмяРеквизитаФормы, ОбъектXDTO, ИмяСвойстваXDTO) Экспорт
	
	Если СвойствоУстановлено(ОбъектXDTO, ИмяСвойстваXDTO) Тогда
		ЗначениеСвойстваXDTO = ОбъектXDTO[ИмяСвойстваXDTO];
		Если ТипЗнч(ЗначениеСвойстваXDTO) = Тип("ОбъектXDTO") Тогда
			Форма[ИмяРеквизитаФормы + "Тип"] = ЗначениеСвойстваXDTO.objectID.type;
			Форма[ИмяРеквизитаФормы + "ID"] = ЗначениеСвойстваXDTO.objectID.ID;
			Форма[ИмяРеквизитаФормы] = ЗначениеСвойстваXDTO.name;
		Иначе
			Форма[ИмяРеквизитаФормы] = ЗначениеСвойстваXDTO;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет реквизиты объекта XDTO по объекту ИС.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ОбъектXDTO - ОбъектXDTO - заполняемый объект.
//   ОбъектИС - ЛюбаяСсылка - источник заполнения.
//
Процедура ЗаполнитьРеквизитыИзПотребителя(Прокси, ОбъектXDTO, ОбъектИС) Экспорт
	
	Если ПроверитьТип(Прокси, ОбъектXDTO, "DMCurrency")
			И ТипЗнч(ОбъектИС) = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ТипВалюты() Тогда
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектИС, "Код, НаименованиеПолное");
		ОбъектXDTO.code = Реквизиты.Код;
		ОбъектXDTO.fullName = Реквизиты.НаименованиеПолное;
		
	ИначеЕсли ПроверитьТип(Прокси, ОбъектXDTO, "DMBank")
			И ТипЗнч(ОбъектИС) = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ТипКлассификаторБанков() Тогда
		Код = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектИС, "Код");
		ОбъектXDTO.BIC = Код;
		
	ИначеЕсли ПроверитьТип(Прокси, ОбъектXDTO, "DMUser")
			И ТипЗнч(ОбъектИС) = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ТипПользователи() Тогда
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектИС, "ФизическоеЛицо, Подразделение");
		Если ЗначениеЗаполнено(Реквизиты.ФизическоеЛицо) Тогда
			ОбъектXDTO.privatePerson = СоздатьОбъект(Прокси, "DMPrivatePerson", Реквизиты.ФизическоеЛицо);
		КонецЕсли;
		Если ЗначениеЗаполнено(Реквизиты.Подразделение) Тогда
			ОбъектXDTO.subdivision = СоздатьОбъект(Прокси, "DMSubdivision", Реквизиты.Подразделение);
		КонецЕсли;
		
	ИначеЕсли ПроверитьТип(Прокси, ОбъектXDTO, "DMEmployee")
			И ТипЗнч(ОбъектИС) = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ТипПользователи() Тогда
		ОбъектXDTO.user = СоздатьОбъект(Прокси, "DMUser", ОбъектИС);
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектИС, "ФизическоеЛицо, Подразделение");
		Если ЗначениеЗаполнено(Реквизиты.ФизическоеЛицо) Тогда
			ОбъектXDTO.privatePerson = СоздатьОбъект(Прокси, "DMPrivatePerson", Реквизиты.ФизическоеЛицо);
			ОбъектXDTO.name = ОбъектXDTO.privatePerson.name;
		КонецЕсли;
		Если ЗначениеЗаполнено(Реквизиты.Подразделение) Тогда
			ОбъектXDTO.subdivision = СоздатьОбъект(Прокси, "DMSubdivision", Реквизиты.Подразделение);
		КонецЕсли;
		
	ИначеЕсли (ПроверитьТип(Прокси, ОбъектXDTO, "DMParty") Или ПроверитьТип(Прокси, ОбъектXDTO, "DMPartyRowContact"))
			И ТипЗнч(ОбъектИС) = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ТипПользователи() Тогда
		Настройки = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИспользоватьИнтеграцию();
		Если Настройки.ИспользоватьИнтеграциюДО2 Тогда
			ОбъектXDTO.user = СоздатьОбъект(Прокси, "DMUser", ОбъектИС);
		ИначеЕсли Настройки.ИспользоватьИнтеграциюДО3 Тогда
			ОбъектXDTO.employee = СоздатьОбъект(Прокси, "DMEmployee", ОбъектИС);
		КонецЕсли;
		
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ЗаполнитьРеквизитыИзПотребителя(
		Прокси,
		ОбъектXDTO,
		ОбъектИС);
	
КонецПроцедуры

// Возвращает уникальное имя дополнительного реквизита для последующего использования в правилах интеграции.
//
// Параметры:
//   ДопРеквизит - ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения - дополнительный реквизит.
//
// Возвращаемое значение:
//   Строка - имя дополнительного реквизита.
//
Функция ИмяДопРеквизита(ДопРеквизит) Экспорт
	
	Возврат СтрШаблон("ДопРеквизит_%1",
		СтрЗаменить(Строка(ДопРеквизит.УникальныйИдентификатор()), "-", ""));
	
КонецФункции

// Возвращает локализованное имя события журнала регистрации для интеграции с ДО.
//
// Параметры:
//   СобытиеВторогоУровня - Строка - имя события, добавляемое через точку к имени события по умолчанию.
//
// Возвращаемое значение:
//   Строка - Интеграция с 1С:Документооборотом
//        или Интеграция с 1С:Документооборотом.<ИмяСобытияВторогоУровня>.
//
Функция ИмяСобытияЖурналаРегистрации(СобытиеВторогоУровня = "") Экспорт
	
	Если СобытиеВторогоУровня = "" Тогда
		Возврат НСтр("ru = 'Интеграция с 1С:Документооборотом'",
			ОбщегоНазначения.КодОсновногоЯзыка());
	Иначе
		Возврат СтрШаблон("%1.%2",
			НСтр("ru = 'Интеграция с 1С:Документооборотом'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			СобытиеВторогоУровня);
	КонецЕсли;
	
КонецФункции

// Возвращает индекс картинки элемента справочника.
//
// Возвращаемое значение:
//   Число - индекс картинки.
//
Функция ИндексКартинкиЭлементаСправочника() Экспорт
	
	ИндексКартинки = 3;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПриОпределенииИндексаКартинкиЭлементаСправочника(ИндексКартинки);
	
	Возврат ИндексКартинки;
	
КонецФункции

// Назначает новому документу идентификатор основания, если это возможно.
//
// Параметры:
//   Источник - ДокументОбъект - записываемый документ.
//   Отказ - Булево - признак необходимости отказаться от записи.
//   РежимЗаписи - РежимЗаписиДокумента - режим записи документа.
//   РежимПроведения - РежимПроведенияДокумента - режим проведения документа.
//
Процедура ИнтеграцияС1СДокументооборотПередЗаписьюДокумента(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьСсылкуНовогоПередЗаписьюОбъекта(Источник);
	
КонецПроцедуры

// Назначает новому элементу справочника идентификатор основания, если это возможно.
//
// Параметры:
//   Источник - СправочникОбъект - записываемый справочник.
//   Отказ - Булево - признак необходимости отказаться от записи.
//
Процедура ИнтеграцияС1СДокументооборотПередЗаписьюСправочника(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьСсылкуНовогоПередЗаписьюОбъекта(Источник);
	
КонецПроцедуры

// Проверяет, используются ли присоединенные файлы ДО.
//
// Возвращаемое значение:
//   Булево
//
Функция ИспользоватьПрисоединенныеФайлы1СДокументооборота() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьПрисоединенныеФайлы1СДокументооборота");
	
КонецФункции

// Получает значения, доступные для выбора по запросу DMGetObjectListRequest.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ТипОбъектаВыбораXDTO - Строка - имя типа объекта, значения которого требуется получить.
//   УсловияОтбораОбъектов - ОбъектXDTO - объект XDTO типа DMObjectListQuery.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMGetObjectListResponse.
//
Функция НайтиСписокОбъектов(Прокси, ТипОбъектаВыбораXDTO, УсловияОтбораОбъектов = Неопределено) Экспорт
	
	Запрос = НайтиСписокОбъектовЗапрос(Прокси, ТипОбъектаВыбораXDTO, УсловияОтбораОбъектов);
	Ответ = ВыполнитьЗапрос(Прокси, Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
	Возврат Ответ;
	
КонецФункции

// Возвращает запрос DMGetObjectListRequest для получения значений, доступных для выбора.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ТипОбъектаВыбораXDTO - Строка - имя типа объекта, значения которого требуется получить.
//   УсловияОтбораОбъектов - ОбъектXDTO - объект XDTO типа DMObjectListQuery:
//     * columnConformity - СписокXDTO
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMGetObjectListRequest.
//
Функция НайтиСписокОбъектовЗапрос(Прокси, ТипОбъектаВыбораXDTO, УсловияОтбораОбъектов = Неопределено) Экспорт
	
	Запрос = СоздатьОбъект(Прокси, "DMGetObjectListRequest");
	Запрос.type = ТипОбъектаВыбораXDTO;
	
	Настройки = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИспользоватьИнтеграцию();
	
	Если Настройки.ИспользоватьИнтеграциюДО3 Тогда
		МодульИнтеграцияС1СДокументооборот3 = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияС1СДокументооборот3");
		Если МодульИнтеграцияС1СДокументооборот3.ЭтоДокументДО3(ТипОбъектаВыбораXDTO)
				Или ТипОбъектаВыбораXDTO = "DMCorrespondent"
				Или ТипОбъектаВыбораXDTO = "DMMeeting" Тогда
			МодульПравилаИнтеграцииС1СДокументооборотом3 =
				ОбщегоНазначения.ОбщийМодуль("Справочники.ПравилаИнтеграцииС1СДокументооборотом3");
			РеквизитыОбъектаДО = МодульПравилаИнтеграцииС1СДокументооборотом3.РеквизитыОбъектаДО(
				ТипОбъектаВыбораXDTO,
				Неопределено,
				Истина);
			Если УсловияОтбораОбъектов = Неопределено Тогда
				УсловияОтбораОбъектов = СоздатьОбъект(Прокси, "DMObjectListQuery");
			КонецЕсли;
			Для Каждого РеквизитОбъектаДО Из РеквизитыОбъектаДО Цикл
				Если РеквизитОбъектаДО.ИмяРеквизитаВДО = "" Тогда
					Продолжить;
				КонецЕсли;
				Соответствие = СоздатьОбъект(Прокси, "DMObjectListColumnConformity");
				Соответствие.xdtoPropertyName = РеквизитОбъектаДО.Имя;
				Соответствие.dmPropertyName = РеквизитОбъектаДО.ИмяРеквизитаВДО;
				УсловияОтбораОбъектов.columnConformity.Добавить(Соответствие);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если УсловияОтбораОбъектов <> Неопределено Тогда
		Запрос.query = УсловияОтбораОбъектов;
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

// Получает объект XDTO исходящего письма, заполненный по умолчанию.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Предмет - Структура - описание предмета (ID, type).
//
// Возвращаемое значение:
//   ОбъектXDTO - новое исходящее письмо.
//
Функция НовоеИсходящееПисьмо(Прокси, Предмет = Неопределено) Экспорт
	
	Запрос = СоздатьОбъект(Прокси, "DMGetNewEMailRequest");
	
	Запрос.type = "DMOutgoingEMail";
	Если Предмет <> Неопределено Тогда
		Запрос.targetID = СоздатьObjectID(Прокси, Предмет.ID, Предмет.type);
	КонецЕсли;
	
	Ответ = ВыполнитьЗапрос(Прокси, Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
	Если ПроверитьТип(Прокси, Ответ, "DMGetNewEMailResponse") Тогда
		Возврат Ответ.object;
	Иначе
		ВызватьИсключение НСтр("ru = 'Эта версия 1С:Документооборота не поддерживает создание исходящих писем'");
	КонецЕсли;
	
КонецФункции

// Получает заполненный по-умолчанию объект из Документооборота.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Тип - Строка - имя типа XDTO объекта.
//   Предмет - Структура - Используется для получения бизнес-процессов:
//     * ID - Строка - уникальный идентификатор объекта в Документооборот.
//     * type - Строка - имя типа XDTO.
//   Колонки - Массив из Строка - необязательно, состав заполняемых колонок.
//           - Строка - если список колонок разделен через запятую.
//   ВидДокументаДОID - Строка - идентификатор вида документа, если требуется получить новый документ данного вида.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMGetNewObjectResponse.
//
Функция НовыйОбъектДО(Прокси, Тип, Предмет = Неопределено, Колонки = Неопределено, ВидДокументаДОID = "") Экспорт
	
	Если Предмет <> Неопределено Тогда
		
		Настройки = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИспользоватьИнтеграцию();
		Если Тип = "DMOutgoingEMail" Тогда
			Возврат НовоеИсходящееПисьмо(Прокси, Предмет);
			
		ИначеЕсли Настройки.ИспользоватьИнтеграциюДО2 Тогда
			МодульИнтеграцияС1СДокументооборот = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияС1СДокументооборот");
			Возврат МодульИнтеграцияС1СДокументооборот.НовыйОбъектДО(Прокси, Тип, Предмет);
			
		Иначе
			Возврат Неопределено;
			
		КонецЕсли;
		
	Иначе
		
		Запрос = ПолучитьНовыйОбъектЗапрос(Прокси, Тип, Колонки, ВидДокументаДОID);
		Ответ = ВыполнитьЗапрос(Прокси, Запрос);
		ПроверитьВозвратВебСервиса(Прокси, Ответ);
		
		Если ПроверитьТип(Прокси, Ответ, "DMGetNewObjectResponse") Тогда
			Возврат Ответ.object;
		КонецЕсли;
		
		Возврат Ответ;
		
	КонецЕсли;
	
КонецФункции

// Возвращает новый объект указанного типа.
//
// Параметры:
//   ПолноеИмя - Строка - полное имя объекта метаданных. Пример: "Справочник.Организации".
//
// Возвращаемое значение:
//   ДокументОбъект
//   СправочникОбъект
//   ПланВидовХарактеристикОбъект
//   ПланВидовРасчетаОбъект
//   БизнесПроцессОбъект
//   ЗадачаОбъект
//
Функция НовыйОбъектИС(ПолноеИмя) Экспорт
	
	МенеджерОбъектаИС = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
	МетаданныеОбъектаИС = Метаданные.НайтиПоПолномуИмени(ПолноеИмя);
	Если ОбщегоНазначения.ЭтоСправочник(МетаданныеОбъектаИС)
			Или ОбщегоНазначения.ЭтоПланВидовХарактеристик(МетаданныеОбъектаИС) Тогда
		ОбъектИС = МенеджерОбъектаИС.СоздатьЭлемент();
		
	ИначеЕсли ОбщегоНазначения.ЭтоДокумент(МетаданныеОбъектаИС) Тогда
		ОбъектИС = МенеджерОбъектаИС.СоздатьДокумент();
		
	ИначеЕсли ОбщегоНазначения.ЭтоПланВидовРасчета(МетаданныеОбъектаИС) Тогда
		ОбъектИС = МенеджерОбъектаИС.СоздатьВидРасчета();
		
	ИначеЕсли ОбщегоНазначения.ЭтоБизнесПроцесс(МетаданныеОбъектаИС) Тогда
		ОбъектИС = МенеджерОбъектаИС.СоздатьБизнесПроцесс();
		
	ИначеЕсли ОбщегоНазначения.ЭтоЗадача(МетаданныеОбъектаИС) Тогда
		ОбъектИС = МенеджерОбъектаИС.СоздатьЗадачу();
		
	Иначе
		ВызватьИсключение
			СтрШаблон(НСтр("ru = '1С:Документооборот не поддерживает интеграцию с объектами типа: %1'"), ПолноеИмя);
		
	КонецЕсли;
	
	Попытка
		ОбъектИС.Заполнить(Неопределено);
	Исключение
		ЗаписатьОшибку(ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат ОбъектИС;
	
КонецФункции

// Очищает все сохраненные значения функций с повторным использованием возвращаемых значений и параметры сеанса.
//
Процедура ОбновитьПовторноИспользуемыеПараметры() Экспорт
	
	ПараметрыСеанса.ИнтеграцияС1СДокументооборотНастройки = "";
	ПараметрыСеанса.ИнтеграцияС1СДокументооборотТекущийПользователь = "";
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

// Обработчик подписки на событие ОбработкаЗаполнения для документов.
//
// Параметры:
//   Источник - ОпределяемыйТип.ИнтеграцияС1СДокументооборотДокументыОбъектыПереопределяемый
//   ДанныеЗаполнения - Произвольный - значение, которое используется как основание для заполнения.
//   СтандартнаяОбработка - Булево - признак выполнения стандартной обработки события.
//
Процедура ОбработкаЗаполненияДокументы(Источник, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	ОбработкаЗаполненияОбъектаИС(Источник, ДанныеЗаполнения, СтандартнаяОбработка);
	
КонецПроцедуры

// Обработчик подписки на событие ОбработкаЗаполнения для справочников.
//
// Параметры:
//   Источник - ОпределяемыйТип.ИнтеграцияС1СДокументооборотСправочникиОбъектыПереопределяемый
//   ДанныеЗаполнения - Произвольный - значение, которое используется как основание для заполнения.
//   ТекстЗаполнения - Строка
//                   - Неопределено
//   СтандартнаяОбработка - Булево - признак выполнения стандартной обработки события.
//
Процедура ОбработкаЗаполненияСправочники(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	ОбработкаЗаполненияОбъектаИС(Источник, ДанныеЗаполнения, СтандартнаяОбработка);
	
КонецПроцедуры

// Определяет поддерживает ли БИД объект метаданных интегрированной системы.
//
// Параметры:
//   ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
//
// Возвращаемое значение:
//   Булево
//
Функция ОбъектМетаданныхПоддерживается(ОбъектМетаданных) Экспорт
	
	Возврат ОбщегоНазначения.ЭтоСправочник(ОбъектМетаданных)
		Или ОбщегоНазначения.ЭтоДокумент(ОбъектМетаданных)
		Или ОбщегоНазначения.ЭтоПланВидовХарактеристик(ОбъектМетаданных)
		Или ОбщегоНазначения.ЭтоПланВидовРасчета(ОбъектМетаданных)
		Или ОбщегоНазначения.ЭтоБизнесПроцесс(ОбъектМетаданных)
		Или ОбщегоНазначения.ЭтоЗадача(ОбъектМетаданных);
	
КонецФункции

// Возвращает описание веб-сервиса 1С:Документооборота.
//
// Возвращаемое значение:
//   Строка
//
Функция ОписаниеВебСервисов() Экспорт
	
	Настройки = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИспользоватьИнтеграцию();
	
	Если Настройки.ИспользоватьИнтеграциюДО2 Тогда
		МодульИнтеграцияС1СДокументооборот = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияС1СДокументооборот");
		Возврат МодульИнтеграцияС1СДокументооборот.ОписаниеВебСервисов();
		
	ИначеЕсли Настройки.ИспользоватьИнтеграциюДО3 Тогда
		МодульИнтеграцияС1СДокументооборот3 = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияС1СДокументооборот3");
		Возврат МодульИнтеграцияС1СДокументооборот3.ОписаниеВебСервисов();
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Помещает в дополнительные свойства идентификатор объекта-основания. Вызывается перед записью объекта.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма записываемого объекта.
//   Объект - ДокументОбъект, СправочникОбъект - записываемый объект.
//   ПараметрыЗаписи - Структура - структура, содержащая параметры записи.
//
Процедура ПередЗаписьюНаСервере(Форма, Объект, ПараметрыЗаписи) Экспорт
	
	ОбъектДО = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ОбъектДОИзДанныхФормы(Форма);
	Если ЗначениеЗаполнено(ОбъектДО.ID) Тогда
		Объект.ДополнительныеСвойства.Вставить("ИдентификаторОбъектаДО", ОбъектДО.ID);
	КонецЕсли;
	
КонецПроцедуры

// Определяет возможность использования аутентификации ОС платформой 1С:Предприятия.
// Возвращает Истина для версий 8.3.7 и старше под MS Windows, и Ложь в остальных случаях.
//
// Возвращаемое значение:
//   Булево
//
Функция ПоддерживаетсяАутентификацияОС() Экспорт
	
	Если Не СерверРаботаетПодWindows()
			Или Константы.ИспользоватьАутентификациюОСВВебСервисе1СДокументооборота.Получить() = Ложь Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Версия = СтрРазделить(СистемнаяИнформация.ВерсияПриложения, ".");
	
	Возврат (Число(Версия[0]) >= 8)
		И (Число(Версия[1]) >= 3)
		И (Число(Версия[2]) >= 7);
	
КонецФункции

// Возвращает подходящий тип потребителя для объекта XDTO.
//
// Параметры:
//   ТипыКандидаты - Массив из Тип - массив типов, из которых требуется выбрать подходящий.
//   ЗначениеСвойстваXDTO - ОбъектXDTO - значение свойства объекта XDTO, в соответствии с типом которого
//     нужно выбрать подходящий тип.
//   ТипТекущегоЗначения - Тип - если реквизит объекта ИС имеет составной тип, и в нем уже установлено какое-то
//     определенное значение, тип текущего значения будет более приоритетным при выборе подходящего типа.
//
// Возвращаемое значение:
//   Тип - один из элементов массива ТипыКандидаты, подходящий для типа объекта XDTO.
//
Функция ПодходящийТип(ТипыКандидаты, ЗначениеСвойстваXDTO = Неопределено, ТипТекущегоЗначения = Неопределено) Экспорт
	
	Если ТипыКандидаты.Количество() = 0 Тогда
		
		ПодходящийТип = Неопределено;
		
	ИначеЕсли ТипыКандидаты.Количество() = 1 Тогда
		
		ПодходящийТип = ТипыКандидаты[0];
		
	Иначе
		
		ТипЗначенияСвойстваXDTO = ТипЗнч(ЗначениеСвойстваXDTO);
		ТипИСПоЗначениюСвойстваXDTO = Неопределено;
		Если ТипЗначенияСвойстваXDTO = Тип("ОбъектXDTO") Тогда
			Если СвойствоСуществует(ЗначениеСвойстваXDTO, "objectID") Тогда
				ТипОбъектаXDTO = ЗначениеСвойстваXDTO.objectID.type;
			Иначе
				ТипОбъектаXDTO = ЗначениеСвойстваXDTO.Тип().Имя;
			КонецЕсли;
			ТипИСПоЗначениюСвойстваXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ТипИС(
				ТипОбъектаXDTO);
		КонецЕсли;
		
		Если ТипыКандидаты.Найти(ТипИСПоЗначениюСвойстваXDTO) <> Неопределено Тогда
			ПодходящийТип = ТипИСПоЗначениюСвойстваXDTO;
		ИначеЕсли ТипыКандидаты.Найти(ТипТекущегоЗначения) <> Неопределено Тогда
			ПодходящийТип = ТипТекущегоЗначения;
		ИначеЕсли ТипыКандидаты.Найти(ТипЗначенияСвойстваXDTO) <> Неопределено Тогда
			ПодходящийТип = ТипЗначенияСвойстваXDTO;
		Иначе
			ПодходящийТип = ТипыКандидаты[0];
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПодходящийТип;
	
КонецФункции

// Возвращает настройки базы Документооборота.
//
// Возвращаемое значение:
//   ФиксированнаяСтруктура:
//     * НужноИзвлечьТекст - Булево
//     * ИспользоватьЭлектронныеЦифровыеПодписи - Булево
//     * ДобавлятьРаботуВЕжедневныйОтчетПриВыполненииЗадачи - Булево
//     * ФактическийИсполнительЗадач - Строка - объект XDTO типа DMActualTasksPerformer.
//     * ВестиУчетСканКопийОригиналовДокументов - Булево
//     * ПоказыватьЗанятыеФайлыПриЗавершенииРаботы - Булево
//     * ИспользоватьАвтозаполнениеФайлов - Булево
//     * ИзменятьЗаданияЗаднимЧислом - Булево
//     * СписокИсполнителейЗадач - Массив из см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО
//     * ЗаголовокСообщенияВОбластиПредпросмотра - Строка
//     * СписокРасширенийСканКопийОригиналов - Строка
//     * ДоступныЗадачиМне - Булево
//
Функция ПолучитьНастройки() Экспорт
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	Если ПараметрыСеанса.ИнтеграцияС1СДокументооборотНастройки = "" Тогда
		
		Запрос = ПолучитьНастройкиЗапрос(Прокси);
		
		НастройкиXDTO = ВыполнитьЗапрос(Прокси, Запрос);
		ПроверитьВозвратВебСервиса(Прокси, НастройкиXDTO);
		
	Иначе
		
		НастройкиXDTO = СтрокаВОбъектXDTO(Прокси, ПараметрыСеанса.ИнтеграцияС1СДокументооборотНастройки);
		
	КонецЕсли;
	
	Настройки = Новый Структура;
	
	Если СвойствоУстановлено(НастройкиXDTO, "needExtractText") Тогда
		Настройки.Вставить("НужноИзвлечьТекст", НастройкиXDTO.needExtractText);
	Иначе
		Настройки.Вставить("НужноИзвлечьТекст", Ложь);
	КонецЕсли;
	
	Если СвойствоУстановлено(НастройкиXDTO, "useDigitalSignatures") Тогда
		Настройки.Вставить("ИспользоватьЭлектронныеЦифровыеПодписи", НастройкиXDTO.useDigitalSignatures);
	Иначе
		Настройки.Вставить("ИспользоватьЭлектронныеЦифровыеПодписи", Ложь);
	КонецЕсли;
	
	Если СвойствоУстановлено(НастройкиXDTO, "useBothDateAndTimeInTasksDueDates") Тогда
		Настройки.Вставить("ИспользоватьДатуИВремяВСрокахЗадач", НастройкиXDTO.useBothDateAndTimeInTasksDueDates);
	Иначе
		Настройки.Вставить("ИспользоватьДатуИВремяВСрокахЗадач", Ложь);
	КонецЕсли;
	
	Если СвойствоУстановлено(НастройкиXDTO, "addActualWorkUponTaskExecution") Тогда
		Настройки.Вставить("ДобавлятьРаботуВЕжедневныйОтчетПриВыполненииЗадачи",
			НастройкиXDTO.addActualWorkUponTaskExecution);
	Иначе
		Настройки.Вставить("ДобавлятьРаботуВЕжедневныйОтчетПриВыполненииЗадачи", Ложь);
	КонецЕсли;
	
	ФактическийИсполнительЗадач = "taskPerformer";
	Если СвойствоУстановлено(НастройкиXDTO, "actualTasksPerformer") Тогда
		ФактическийИсполнительЗадач = НастройкиXDTO.actualTasksPerformer;
	КонецЕсли;
	Настройки.Вставить("ФактическийИсполнительЗадач", ФактическийИсполнительЗадач);
	
	Если СвойствоУстановлено(НастройкиXDTO, "accountForScannedOriginals") Тогда
		Настройки.Вставить("ВестиУчетСканКопийОригиналовДокументов", НастройкиXDTO.accountForScannedOriginals);
	Иначе
		Настройки.Вставить("ВестиУчетСканКопийОригиналовДокументов", Ложь);
	КонецЕсли;
	
	Если СвойствоУстановлено(НастройкиXDTO, "showLockedFilesOnExit") Тогда
		Настройки.Вставить("ПоказыватьЗанятыеФайлыПриЗавершенииРаботы", НастройкиXDTO.showLockedFilesOnExit);
	Иначе
		Настройки.Вставить("ПоказыватьЗанятыеФайлыПриЗавершенииРаботы", Ложь);
	КонецЕсли;
	
	Если СвойствоУстановлено(НастройкиXDTO, "useAutoFill") Тогда
		Настройки.Вставить("ИспользоватьАвтозаполнениеФайлов", НастройкиXDTO.useAutoFill);
	Иначе
		Настройки.Вставить("ИспользоватьАвтозаполнениеФайлов", Ложь);
	КонецЕсли;
	
	Если СвойствоУстановлено(НастройкиXDTO, "allowToChangeEndDate") Тогда
		Настройки.Вставить("ИзменятьЗаданияЗаднимЧислом", НастройкиXDTO.allowToChangeEndDate);
	Иначе
		Настройки.Вставить("ИзменятьЗаданияЗаднимЧислом", Истина);
	КонецЕсли;
	
	Если СвойствоУстановлено(НастройкиXDTO, "htmlViewMessageHead") Тогда
		Настройки.Вставить("ЗаголовокСообщенияВОбластиПредпросмотра", НастройкиXDTO.htmlViewMessageHead);
	Иначе
		Настройки.Вставить("ЗаголовокСообщенияВОбластиПредпросмотра",
			"<head>
			|<style type=""text/css"">
			|.block
			|{
			|	width: 45%;
			|	padding: 5% 20% 25% 25%;
			|	font-size: 150%;
			|	text-align: center;
			|	position:absolute;
			|}
			|a:link {
			|	color: #006699; text-decoration: none;}
			|a:visited {
			|	color: #006699; text-decoration: none;}
			|a:hover {
			|	color: #006699; text-decoration: underline;}
			|</style>
			|</head>");
	КонецЕсли;
	
	Если СвойствоУстановлено(НастройкиXDTO, "scannedOriginalExtensionsList") Тогда
		Настройки.Вставить("СписокРасширенийСканКопийОригиналов", НастройкиXDTO.scannedOriginalExtensionsList);
	Иначе
		Настройки.Вставить("СписокРасширенийСканКопийОригиналов", "");
	КонецЕсли;
	
	Если СвойствоУстановлено(НастройкиXDTO, "tasksAvailable") Тогда
		Настройки.Вставить("ДоступныЗадачиМне", НастройкиXDTO.tasksAvailable);
	Иначе
		Настройки.Вставить("ДоступныЗадачиМне", Истина);
	КонецЕсли;
	
	СписокИсполнителейЗадач = Новый Массив;
	Если СвойствоУстановлено(НастройкиXDTO, "taskPerformers") Тогда
		Для Каждого ОбъектXDTO Из НастройкиXDTO.taskPerformers Цикл
			ИсполнительЗадач = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО(
				ОбъектXDTO.objectID.id,
				ОбъектXDTO.objectID.type,
				ОбъектXDTO.name);
			СписокИсполнителейЗадач.Добавить(ИсполнительЗадач);
		КонецЦикла;
	КонецЕсли;
	Настройки.Вставить("СписокИсполнителейЗадач", СписокИсполнителейЗадач);
	
	Возврат Новый ФиксированнаяСтруктура(Настройки);
	
КонецФункции

// Возвращает запрос для получения настроек базы Документооборота.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMGetSettingsRequest.
//
Функция ПолучитьНастройкиЗапрос(Прокси) Экспорт
	
	Возврат СоздатьОбъект(Прокси, "DMGetSettingsRequest");
	
КонецФункции

// Возвращает запрос для получения заполненного по-умолчанию объекта из Документооборота.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Тип - Строка - имя типа XDTO объекта.
//   Колонки - Массив из Строка - необязательно, состав заполняемых колонок.
//           - Строка - если список колонок разделен через запятую.
//   ВидДокументаДОID - Строка - идентификатор вида документа, если требуется получить новый документ данного вида.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMGetNewObjectRequest.
//
Функция ПолучитьНовыйОбъектЗапрос(Прокси, Тип, Колонки = Неопределено, ВидДокументаДОID = "") Экспорт
	
	Запрос = СоздатьОбъект(Прокси, "DMGetNewObjectRequest");
	ПолучаемыеПоля = Запрос.columnSet; // СписокXDTO
	
	Запрос.type = Тип;
	
	Если Колонки <> Неопределено Тогда
		Если ТипЗнч(Колонки) = Тип("Строка") Тогда
			Колонки = СтрРазделить(Колонки, ",");
		КонецЕсли;
		
		Для Каждого Колонка Из Колонки Цикл
			ПолучаемыеПоля.Добавить(Колонка);
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидДокументаДОID) Тогда
		Запрос.documentType = СоздатьObjectID(Прокси, ВидДокументаДОID, "DMDocumentType");
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

// Получает объект из Документооборота.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Тип - Строка - имя типа XDTO.
//   ID - Строка - уникальный идентификатор объекта в Документообороте.
//   Колонки - Массив из Строка - необязательно, состав заполняемых колонок.
//           - Строка - если список колонок разделен через запятую.
//   ПравилоИнтеграции - СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом3 - правило интеграции для
//     заполнения объекта ИС.
//   ВнешнийОбъектИС - ЛюбаяСсылка - передается для заполнения свойства externalObject.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO заданного типа.
//
Функция ПолучитьОбъект(Прокси, Тип, ID, Колонки = Неопределено, ПравилоИнтеграции = Неопределено,
		ВнешнийОбъектИС = Неопределено) Экспорт
	
	Объект = Новый Структура("ID, Тип, ВнешнийОбъектИС", ID, Тип, ВнешнийОбъектИС);
	
	Ответ = ПолучитьОбъекты(
		Прокси,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект),
		Колонки,
		ПравилоИнтеграции);
	
	Если Ответ.Количество() > 0 Тогда
		Возврат Ответ[0];
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Не удалось получить объект ДО: %1 (%2)'"), ID, Тип);
	КонецЕсли;
	
КонецФункции

// Получает объекты из Документооборота.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Объекты - Массив из Структура:
//     * ID - Строка
//     * Тип - Строка
//     * ВнешнийОбъектИС - ЛюбаяСсылка - передается для заполнения свойства externalObject.
//   Колонки - Массив из Строка - необязательно, состав заполняемых колонок.
//           - Строка - если список колонок разделен через запятую.
//   ПравилоИнтеграции - СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом3 - правило интеграции для
//     заполнения объекта ИС.
//
// Возвращаемое значение:
//   СписокXDTO - список объектов XDTO заданного типа.
//
Функция ПолучитьОбъекты(Прокси, Объекты, Колонки = Неопределено, ПравилоИнтеграции = Неопределено) Экспорт
	
	Запрос = ПолучитьОбъектыЗапрос(Прокси, Объекты, Колонки, ПравилоИнтеграции);
	Ответ = ВыполнитьЗапрос(Прокси, Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
	Возврат Ответ.objects;
	
КонецФункции

// Возвращает запрос для получения объектов из Документооборота.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Объекты - Массив из Структура:
//     * ID - Строка
//     * Тип - Строка
//     * ВнешнийОбъектИС - ЛюбаяСсылка - передается для заполнения свойства externalObject.
//   Колонки - Массив из Строка - необязательно, состав заполняемых колонок.
//           - Строка - если список колонок разделен через запятую.
//   ПравилоИнтеграции - СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом3 - правило интеграции для
//     заполнения объекта ИС.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMRetrieveRequest.
//
Функция ПолучитьОбъектыЗапрос(Прокси, Объекты, Колонки = Неопределено, ПравилоИнтеграции = Неопределено) Экспорт
	
	Запрос = СоздатьОбъект(Прокси, "DMRetrieveRequest");
	СписокОбъектов = Запрос.objectIDs; // СписокXDTO
	ПолучаемыеПоля = Запрос.columnSet; // СписокXDTO
	ПоддерживаетсяПередачаСвязей = Ложь;
	Если СвойствоСуществует(Запрос, "links") Тогда
		ПоддерживаетсяПередачаСвязей = Истина;
		СвязиXDTO = Запрос.links; // СписокXDTO
	КонецЕсли;
	
	ВыраженияДляВыполненияНаСторонеДО = Новый Массив;
	СписокВыражений = Неопределено;
	Если ПравилоИнтеграции <> Неопределено И СвойствоСуществует(Запрос, "objectsExpressionRows") Тогда
		Настройки = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИспользоватьИнтеграцию();
		Если Настройки.ИспользоватьИнтеграциюДО3 Тогда
			МодульИнтеграцияС1СДокументооборот3 = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияС1СДокументооборот3");
			МодульПравилаИнтеграцииС1СДокументооборотом3 =
				ОбщегоНазначения.ОбщийМодуль("Справочники.ПравилаИнтеграцииС1СДокументооборотом3");
			ПравилаДляАнализа = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПравилоИнтеграции);
			ВыраженияДляВыполненияНаСторонеДО =
				МодульПравилаИнтеграцииС1СДокументооборотом3.ВыраженияДляВыполненияНаСторонеДО(ПравилаДляАнализа);
			СписокВыражений = Запрос.objectsExpressionRows; // СписокXDTO
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Объект Из Объекты Цикл
		
		ВнешнийОбъектИС = Неопределено;
		Объект.Свойство("ВнешнийОбъектИС", ВнешнийОбъектИС);
		Если ПоддерживаетсяПередачаСвязей И ЗначениеЗаполнено(ВнешнийОбъектИС) Тогда
			СвязиXDTO.Добавить(
				СоздатьDMLink(
					Прокси,
					Объект.ID,
					Объект.Тип,
					ВнешнийОбъектИС));
		КонецЕсли;
		
		objectID = СоздатьObjectID(Прокси, Объект.ID, Объект.Тип);
		СписокОбъектов.Добавить(objectID);
		
		Если СписокВыражений <> Неопределено Тогда
			
			СоответствиеПравилXDTO = СоздатьОбъект(Прокси, "DMObjectExpressionRow");
			СоответствиеПравилXDTO.object = СоздатьObjectID(Прокси, Объект.ID, Объект.Тип);
			
			Для Каждого ВыражениеДляВыполненияНаСторонеДО Из ВыраженияДляВыполненияНаСторонеДО Цикл
				ВыражениеПравилаXDTO = СоздатьОбъект(Прокси, "DMExpressionRow");
				МодульИнтеграцияС1СДокументооборот3.ПодготовитьВычисляемоеВыражениеКПередачеНаСторонуДО(
					ВыражениеПравилаXDTO,
					ВыражениеДляВыполненияНаСторонеДО);
				СоответствиеПравилXDTO.expressionRows.Добавить(ВыражениеПравилаXDTO);
			КонецЦикла;
			
			Если СоответствиеПравилXDTO.expressionRows.Количество() > 0 Тогда
				СписокВыражений.Добавить(СоответствиеПравилXDTO);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Колонки <> Неопределено Тогда
		Если ТипЗнч(Колонки) = Тип("Строка") Тогда
			Колонки = СтрРазделить(Колонки, ",");
		КонецЕсли;
		
		Для Каждого Колонка Из Колонки Цикл
			ПолучаемыеПоля.Добавить(СокрЛП(Колонка));
		КонецЦикла;
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

// Создает прокси веб-сервиса Документооборота с настройками авторизации из параметров сеанса или, если это
// невозможно, например, при создании прокси в фоновом задании, с настройками, переданными напрямую.
//
// Параметры:
//   ВызыватьИсключение - Булево - Истина, если при невозможности получения следует вызвать исключение.
//   НастройкиАвторизации - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.НастройкиАвторизацииВ1СДокументообороте
//   АдресВебСервисаДокументооборота - Строка - адрес веб-сервиса ДО, или
//                                   - Неопределено - признак необходимости использовать ранее сохраненный адрес.
//   ТекстСообщенияОбОшибке - Строка - неявно возвращаемое значение, текст сообщения об ошибке.
//   ПользовательЗаданияОбмена - Булево - вызов выполняется для настройки пользователя задания обмена.
//     Параметры сеанса текущего пользователя изменяться не будут.
//
// Возвращаемое значение:
//   WSПрокси - прокси веб-сервиса Документооборота.
//   Неопределено - в случае, если прокси веб-сервиса получить не удалось.
//
Функция ПолучитьПрокси(ВызыватьИсключение = Истина, НастройкиАвторизации = Неопределено,
		АдресВебСервисаДокументооборота = Неопределено, ТекстСообщенияОбОшибке = "",
		ПользовательЗаданияОбмена = Ложь) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыСеанса.ИнтеграцияС1СДокументооборотСхемаXML) Тогда
		// Документооборот ожидает ответа от веб-сервиса DMILService. Подключение к веб-сервису
		// Документооборота в этот момент невозможно.
		Возврат Неопределено;
	КонецЕсли;
	
	Если НастройкиАвторизации = Неопределено Тогда
		НастройкиАвторизации =
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.НастройкиАвторизацииВ1СДокументообороте();
	КонецЕсли;
	
	Если ПараметрыСеанса.ИнтеграцияС1СДокументооборотПарольИзвестен
			И ((НастройкиАвторизации.ИмяПользователя = Неопределено)
				Или (НастройкиАвторизации.ИмяПользователя = ПараметрыСеанса.ИнтеграцияС1СДокументооборотИмяПользователя))
			И ((НастройкиАвторизации.Пароль = Неопределено)
				Или (НастройкиАвторизации.Пароль = ПараметрыСеанса.ИнтеграцияС1СДокументооборотПароль)) Тогда
		Попытка
			Прокси = ПолучитьПроксиИзПараметровСеанса();
			Если Прокси <> Неопределено Тогда
				НастройкиАвторизации.ИспользуетсяАутентификацияОС =
					ПараметрыСеанса.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияОС;
				НастройкиАвторизации.ИспользуетсяАутентификацияJWT =
					ПараметрыСеанса.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияJWT;
				Возврат Прокси;
			КонецЕсли;
		Исключение
			Прокси = Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Если АдресВебСервисаДокументооборота = Неопределено Тогда
		АдресВебСервисаДокументооборота = АдресВебСервиса1СДокументооборот();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(АдресВебСервисаДокументооборота) Тогда
		ТекстСообщенияОбОшибке = НСтр("ru = 'Не указан адрес веб-сервиса 1С:Документооборота.'");
		ЗаписатьПредупреждение(ТекстСообщенияОбОшибке);
		Если ВызыватьИсключение Тогда
			ВызватьИсключение ТекстСообщенияОбОшибке;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеСервиса = ДанныеВебСервисаДокументооборота(АдресВебСервисаДокументооборота, ПользовательЗаданияОбмена);
	
	НастройкиАвторизации.ИспользуетсяАутентификацияОС = Ложь;
	НастройкиАвторизации.ИспользуетсяАутентификацияJWT = Ложь;
	
	Если НастройкиАвторизации.ИмяПользователя = Неопределено Тогда
		НастройкиАвторизации.ИмяПользователя = ПараметрыСеанса.ИнтеграцияС1СДокументооборотИмяПользователя;
	КонецЕсли;
	
	Если НастройкиАвторизации.Пароль = Неопределено Тогда
		НастройкиАвторизации.Пароль = ПараметрыСеанса.ИнтеграцияС1СДокументооборотПароль;
	КонецЕсли;
	
	ТекстСообщенияОбОшибке = "";
	
	Определения = ПроверкаПодключенияПоЛогинуПаролю(
		АдресВебСервисаДокументооборота,
		ДанныеСервиса,
		НастройкиАвторизации.ИмяПользователя,
		НастройкиАвторизации.Пароль,
		ТекстСообщенияОбОшибке);
	
	МестоположениеПрокси = Неопределено;
	Если Определения = Неопределено И Не ЗначениеЗаполнено(НастройкиАвторизации.ИмяПользователя) Тогда
		
		Определения = ПроверкаПодключенияЧерезJWT(
			АдресВебСервисаДокументооборота,
			ДанныеСервиса,
			МестоположениеПрокси,
			НастройкиАвторизации.ИспользуетсяАутентификацияJWT,
			ТекстСообщенияОбОшибке);
		
	КонецЕсли;
	
	Если Определения = Неопределено И Не ЗначениеЗаполнено(НастройкиАвторизации.ИмяПользователя) Тогда
		
		Определения = ПроверкаПодключенияЧерезОС(
			АдресВебСервисаДокументооборота,
			ДанныеСервиса,
			НастройкиАвторизации.ИспользуетсяАутентификацияОС,
			ТекстСообщенияОбОшибке);
		
	КонецЕсли;
	
	Если Определения = Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(НастройкиАвторизации.ИмяПользователя)
				И Не НастройкиАвторизации.ИспользуетсяАутентификацияОС
				И Не НастройкиАвторизации.ИспользуетсяАутентификацияJWT Тогда
			ДополнитьТекстСообщенияОбОшибке(
				ТекстСообщенияОбОшибке,
				НСтр("ru = 'Не указано имя пользователя 1С:Документооборота.'"));
		КонецЕсли;
		
		Если НастройкиАвторизации.Пароль = Неопределено
				И Не ПараметрыСеанса.ИнтеграцияС1СДокументооборотПарольИзвестен
				И Не НастройкиАвторизации.ИспользуетсяАутентификацияОС
				И Не НастройкиАвторизации.ИспользуетсяАутентификацияJWT Тогда
			ДополнитьТекстСообщенияОбОшибке(
				ТекстСообщенияОбОшибке,
				НСтр("ru = 'Не указан пароль для авторизации в 1С:Документооборот.'"));
		КонецЕсли;
		
		ПараметрыСеанса.ИнтеграцияС1СДокументооборотПарольИзвестен = Ложь;
		ПараметрыСеанса.ИнтеграцияС1СДокументооборотВерсияСервиса = "0.0.0.0";
		
		ЗаписатьПредупреждение(ТекстСообщенияОбОшибке);
		Если ВызыватьИсключение Тогда
			ВызватьИсключение НСтр("ru = 'Ошибка подключения к 1С:Документообороту.
				|
				|Возможно, не прошла авторизация, указан неверный адрес веб-сервиса
				|или база 1С:Документооборота не опубликована на веб-сервере.
				|
				|Подробности в журнале регистрации. Обратитесь к администратору системы.'");
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Попытка
		
		Прокси = Новый WSПрокси(
			Определения,
			ДанныеСервиса.URIПространстваИменВебСервисаДокументооборота,
			ДанныеСервиса.ИмяВебСервисаДокументооборота,
			ДанныеСервиса.ИмяВебСервисаДокументооборота + "Soap",
			ДанныеСервиса.ИнтернетПрокси,
			ДанныеСервиса.Таймаут,
			ДанныеСервиса.ЗащищенноеСоединение,
			МестоположениеПрокси,
			НастройкиАвторизации.ИспользуетсяАутентификацияОС);
		Если ВерсияСервиса() = "0.0.0.0" Тогда
			// Сервис был не доступен ранее, но сейчас доступ к нему появился. Определим и установим его версию.
			ТекстОшибки = "";
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.УстановитьВерсиюСервисаВПараметрыСеанса(,
				ТекстОшибки);
			Если ТекстОшибки <> "" Тогда
				Если ВызыватьИсключение Тогда
					ВызватьИсключение ТекстОшибки;
				Иначе
					ДополнитьТекстСообщенияОбОшибке(
						ТекстСообщенияОбОшибке,
						ТекстОшибки);
					Возврат Неопределено;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		
		ПараметрыСеанса.ИнтеграцияС1СДокументооборотПарольИзвестен = Ложь;
		ПараметрыСеанса.ИнтеграцияС1СДокументооборотВерсияСервиса = "0.0.0.0";
		
		ТекстСообщенияОбОшибке = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписатьПредупреждение(ТекстСообщенияОбОшибке);
		Если ВызыватьИсключение Тогда
			ВызватьИсключение НСтр("ru = 'Ошибка подключения к 1С:Документообороту.
				|
				|Возможно, не прошла авторизация, указан неверный адрес веб-сервиса
				|или база 1С:Документооборота не опубликована на веб-сервере.
				|
				|Подробности в журнале регистрации. Обратитесь к администратору системы.'");
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	КонецПопытки;
	
	Если Не НастройкиАвторизации.ИспользуетсяАутентификацияОС
			И Не НастройкиАвторизации.ИспользуетсяАутентификацияJWT Тогда
		Прокси.Пользователь = НастройкиАвторизации.ИмяПользователя;
		Прокси.Пароль = НастройкиАвторизации.Пароль;
	КонецЕсли;
	
	Возврат Прокси;
	
КонецФункции

// Определяет доступность интеграции для текущего пользователя. Может переопределяться
// при отказе от использования поставляемой роли ИспользованиеИнтеграцииС1СДокументооборотом.
//
// Возвращаемое значение:
//   Булево - Истина, если использование интеграции разрешено.
//
Функция ПользователюРазрешеноИспользованиеИнтеграции() Экспорт
	
	Разрешено = Ложь;
	
	Если ЕстьПодсистемаДО2() Тогда
		Разрешено = ПравоДоступа("Использование", Метаданные.Обработки["ИнтеграцияС1СДокументооборот"]);
	ИначеЕсли ЕстьПодсистемаДО3() Тогда
		Разрешено = ПравоДоступа("Использование", Метаданные.Обработки["ИнтеграцияС1СДокументооборот3"]);
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПриОпределенииРазрешенияПользователяИспользоватьИнтеграцию(Разрешено);
	
	Возврат Разрешено;
	
КонецФункции

// Помечает объект на удаление или снимает пометку.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ID - Строка - идентификатор помечаемого на удаление объекта в Документообороте.
//   Тип - Строка - имя типа XDTO помечаемого на удаление объекта.
//
// Возвращаемое значение:
//   ОбъектXDTO - Объект XDTO типа DMDeleteResponse.
//
Функция ПометитьНаУдалениеСнятьПометкуОбъекта(Прокси, ID, Тип) Экспорт
	
	Объект = Новый Структура("ID, Тип", ID, Тип);
	
	Ответ = ПометитьНаУдалениеСнятьПометкуОбъектов(
		Прокси,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект));
	
	Возврат Ответ;
	
КонецФункции

// Помечает объекты на удаление или снимает пометку.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Объекты - Массив из Структура:
//     * ID - Строка
//     * Тип - Строка
//
// Возвращаемое значение:
//   ОбъектXDTO - Объект XDTO типа DMDeleteResponse.
//
Функция ПометитьНаУдалениеСнятьПометкуОбъектов(Прокси, Объекты) Экспорт
	
	Запрос = ПометитьНаУдалениеСнятьПометкуОбъектовЗапрос(Прокси, Объекты);
	Ответ = ВыполнитьЗапрос(Прокси, Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
	Возврат Ответ;
	
КонецФункции

// Возвращает запрос для пометки объектов на удаление или для снятия пометки.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Объекты - Массив из Структура:
//     * ID - Строка
//     * Тип - Строка
//
// Возвращаемое значение:
//   ОбъектXDTO - Объект XDTO типа DMDeleteRequest.
//
Функция ПометитьНаУдалениеСнятьПометкуОбъектовЗапрос(Прокси, Объекты) Экспорт
	
	Запрос = СоздатьОбъект(Прокси, "DMDeleteRequest");
	СписокОбъектов = Запрос.objectIDs; // СписокXDTO
	
	Для Каждого Объект Из Объекты Цикл
		objectID = СоздатьObjectID(Прокси, Объект.ID, Объект.Тип);
		СписокОбъектов.Добавить(objectID);
	КонецЦикла;
	
	Возврат Запрос;
	
КонецФункции

// Конструктор структуры, описывающей правило заполнения из реквизита объекта ДО.
//
// Параметры:
//   Имя - Строка - имя реквизита объекта XDTO.
//   Представление - Строка - представление реквизита объекта ДО.
//   Обновлять - Булево - требуется ли обновлять реквизит объекта ИС из реквизита объекта ДО.
//
// Возвращаемое значение:
//   Структура:
//     * Имя - Строка - имя реквизита объекта XDTO.
//     * Представление - Строка - представление реквизита объекта ДО.
//     * Обновлять - Булево - требуется ли обновлять реквизит объекта ИС из реквизита объекта ДО.
//     * ЭтоДополнительныйРеквизитДО - Булево - это доп. реквизит объекта ДО.
//
Функция ПравилоЗаполненияИзРеквизитаОбъектаДО(Имя, Представление = "", Обновлять = Истина) Экспорт
	
	ПравилоЗаполнения = Новый Структура;
	ПравилоЗаполнения.Вставить("Имя", Имя);
	ПравилоЗаполнения.Вставить("Представление", Представление);
	ПравилоЗаполнения.Вставить("Обновлять", Обновлять);
	ПравилоЗаполнения.Вставить("ЭтоДополнительныйРеквизитДО", Ложь);
	
	Возврат ПравилоЗаполнения;
	
КонецФункции

// Возвращает предельное количество объектов, выбираемых сервисом при получении списков.
//
// Параметры:
//   Тип - Строка - тип объекта XDTO
//
// Возвращаемое значение:
//   Число - предельное количество элементов, выбираемых за раз
//
Функция ПредельноеКоличествоВыбираемыхОбъектов(Тип) Экспорт
	
	ПредельноеКоличество = 20;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПриОпределенииПредельногоКоличестваВыбираемыхОбъектов(
		Тип, ПредельноеКоличество);
	
	Возврат ПредельноеКоличество;
	
КонецФункции

// Запрашивает ссылку на предопределенный объект Документооборота по заданному имени и типу.
//
// Параметры:
//   ТипОбъекта - Строка - Имя класса XDTO, предопределенный объект которого требуется получить.
//   ИмяПредопределенногоЭлемента - Строка - Имя предопределенного элемента.
//
// Возвращаемое значение:
//   ОбъектXDTO - Объект XDTO типа DMObject.
//
Функция ПредопределенноеЗначениеДО(ТипОбъекта, ИмяПредопределенногоЭлемента) Экспорт
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	Запрос = СоздатьОбъект(Прокси, "DMGetPredefinedObjectRequest");
	Запрос.type = ТипОбъекта;
	Запрос.predefinedObjectName = ИмяПредопределенногоЭлемента;
	
	Результат = ВыполнитьЗапрос(Прокси, Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Результат);
	
	Возврат Результат.result;
	
КонецФункции

// Возвращает представление типа объекта XDTO Документооборота по имени типа.
//
// Параметры:
//   ТипXDTO - Строка - имя типа объекта XDTO.
//
// Возвращаемое значение:
//   Строка - представление типа объекта XDTO Документооборота по имени типа.
//
Функция ПредставлениеТипаОбъектаXDTO(ТипXDTO) Экспорт
	
	Настройки = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИспользоватьИнтеграцию();
	
	Если Настройки.ИспользоватьИнтеграциюДО2 Тогда
		МодульИнтеграцияС1СДокументооборотКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияС1СДокументооборотКлиентСервер");
		Возврат МодульИнтеграцияС1СДокументооборотКлиентСервер.ПредставлениеТипаОбъектаXDTO(ТипXDTO);
		
	ИначеЕсли Настройки.ИспользоватьИнтеграциюДО3 Тогда
		МодульИнтеграцияС1СДокументооборот3КлиентСервер = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияС1СДокументооборот3КлиентСервер");
		Возврат МодульИнтеграцияС1СДокументооборот3КлиентСервер.ПредставлениеТипаОбъектаXDTO(ТипXDTO);
		
	КонецЕсли;
	
КонецФункции

// Вызывается при записи констант подсистемы Интеграция с 1С:Документооборотом.
//
// Параметры:
//   Источник - КонстантаМенеджерЗначения - записываемая константа.
//   Отказ - Булево - флаг отказа от выполнения записи.
//
Процедура ПриЗаписиКонстанты(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПриЗаписиКонстанты(Источник, Отказ);
	
	ИмяКонстанты = Источник.ЭтотОбъект.Метаданные().Имя;
	ЗначениеКонстанты = Источник.Значение;
	
	ТипКонстанты = ТипЗнч(ЗначениеКонстанты);
	ПримитивныеТипы = Новый ОписаниеТипов("Число,Строка,Дата,Булево,Неопределено");
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Синхронизировать "простые" зависимые константы
	Если ПримитивныеТипы.СодержитТип(ТипКонстанты) Или ОбщегоНазначения.ЗначениеСсылочногоТипа(ЗначениеКонстанты) Тогда
		
		ПодчиненныеКонстанты = ПолучитьДопустимыеЗначенияПодчиненныхКонстант(ИмяКонстанты, ЗначениеКонстанты);
		
		Если ЗначениеЗаполнено(ПодчиненныеКонстанты) Тогда
			
			Для Каждого КлючИЗначение Из ПодчиненныеКонстанты Цикл
				Если Константы[КлючИЗначение.Ключ].Получить() <> КлючИЗначение.Значение Тогда
					Константы[КлючИЗначение.Ключ].Установить(КлючИЗначение.Значение);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет команды Документооборота на форму объекта при создании на сервере.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма, из которой вызвана процедура.
//   МестоРазмещенияКоманд - ГруппаФормы - место для размещения, по умолчанию - командная панель формы.
//   ПараметрыОповещения - Структура - параметры, где может быть установлен источник команды.
//   Ссылка - ЛюбаяСсылка - ссылка на объект ИС, являющийся основным объектом формы.
//
Процедура ПриСозданииНаСервере(Форма, МестоРазмещенияКоманд = Неопределено, ПараметрыОповещения = Неопределено,
		Ссылка = Неопределено) Экспорт
	
	Если Не ПользователюРазрешеноИспользованиеИнтеграции() Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыФормы = Форма.ПолучитьРеквизиты();
	
	ДобавляемыеРеквизиты = Новый Массив;
	Если РеквизитФормыПоИмени(РеквизитыФормы, "ИспользоватьИнтеграциюДО2") = Неопределено Тогда
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(
			"ИспользоватьИнтеграциюДО2",
			Новый ОписаниеТипов("Булево"),,
			НСтр("ru = 'Использовать интеграцию с 1С:Документооборотом'")));
	КонецЕсли;
	Если РеквизитФормыПоИмени(РеквизитыФормы, "ИспользоватьИнтеграциюДО3") = Неопределено Тогда
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(
			"ИспользоватьИнтеграциюДО3",
			Новый ОписаниеТипов("Булево"),,
			НСтр("ru = 'Использовать интеграцию с 1С:Документооборотом редакции 3'")));
	КонецЕсли;
	Если РеквизитФормыПоИмени(РеквизитыФормы, "ИспользоватьПрисоединенныеФайлы1СДокументооборота") = Неопределено Тогда
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(
			"ИспользоватьПрисоединенныеФайлы1СДокументооборота",
			Новый ОписаниеТипов("Булево"),,
			НСтр("ru = 'Использовать присоединенные файлы 1С:Документооборота'")));
	КонецЕсли;
	Если Форма.Параметры.Свойство("ИнтеграцияС1СДокументооборотом_ТипОбъектаДО")
			И Форма.Параметры.Свойство("ИнтеграцияС1СДокументооборотом_ИдентификаторОбъектаДО") Тогда
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(
			"ИнтеграцияС1СДокументооборотом_ТипОбъектаДО",
			Новый ОписаниеТипов("Строка"),,
			НСтр("ru = 'Тип объекта 1С:Документооборота'")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(
			"ИнтеграцияС1СДокументооборотом_ИдентификаторОбъектаДО",
			Новый ОписаниеТипов("Строка"),,
			НСтр("ru = 'Идентификатор объекта 1С:Документооборота'")));
	КонецЕсли;
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	Если Ссылка = Неопределено Тогда
		ОсновнойРеквизит = РеквизитФормыПоИмени(РеквизитыФормы, "Объект");
		Если ОсновнойРеквизит <> Неопределено
				И ТипЗнч(Форма.Объект) = Тип("ДанныеФормыСтруктура")
				И Форма.Объект.Свойство("Ссылка") = Истина Тогда
			ОбъектИС = Форма.Объект; // ДокументОбъект
			Ссылка = ОбъектИС.Ссылка;
		Иначе
			// Попытаемся подобрать основной реквизит формы.
			ТипОсновногоОбъекта = Неопределено;
			ИмяФормыМассив = СтрРазделить(Форма.ИмяФормы, ".");
			Если ИмяФормыМассив.Количество() = 4
					И (ИмяФормыМассив[0] = "Справочник"
						Или ИмяФормыМассив[0] = "Документ") Тогда
				ТипОсновногоОбъекта = Тип(СтрШаблон("%1Ссылка.%2", ИмяФормыМассив[0], ИмяФормыМассив[1]));
			КонецЕсли;
			Если ТипЗнч(ТипОсновногоОбъекта) = Тип("Тип") Тогда
				Если Форма.Параметры.Свойство("Ключ")
						И ТипЗнч(Форма.Параметры.Ключ) = ТипОсновногоОбъекта
						И ЗначениеЗаполнено(Форма.Параметры.Ключ) Тогда
					Ссылка = Форма.Параметры.Ключ;
				Иначе
					Для Каждого Реквизит Из РеквизитыФормы Цикл
						Если ТипЗнч(Форма[Реквизит.Имя]) = Тип("ДанныеФормыСтруктура")
								И Форма[Реквизит.Имя].Свойство("Ссылка") = Истина Тогда
							ОбъектИС = Форма[Реквизит.Имя]; // ДокументОбъект
							Если ТипЗнч(ОбъектИС.Ссылка) = ТипОсновногоОбъекта Тогда
								Ссылка = ОбъектИС.Ссылка;
								Прервать;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если МестоРазмещенияКоманд = Неопределено И Форма.Элементы.Найти("Список") <> Неопределено
			И (СтрНайти(Форма.ИмяФормы, "ФормаСписка") <> 0 Или СтрНайти(Форма.ИмяФормы, "ФормаВыбора") <> 0) Тогда
		Для Каждого ЭлементКомПанели Из Форма.Элементы.Список.КоманднаяПанель.ПодчиненныеЭлементы Цикл
			Если ТипЗнч(ЭлементКомПанели) = Тип("ГруппаФормы") Тогда
				Для Каждого ЭлементГруппы Из ЭлементКомПанели.ПодчиненныеЭлементы Цикл
					Если ТипЗнч(ЭлементГруппы) = Тип("ГруппаФормы")
							И (ЭлементГруппы.Заголовок = НСтр("ru = 'Создать на основании'")
								Или ЭлементГруппы.Заголовок = НСтр("ru = 'Органайзер'")
								Или ЭлементГруппы.Заголовок = НСтр("ru = 'Печать'")) Тогда
						МестоРазмещенияКоманд = ЭлементКомПанели;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если МестоРазмещенияКоманд <> Неопределено Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Сохраним тип и идентификатор объекта-основания.
	Если Форма.Параметры.Свойство("ИнтеграцияС1СДокументооборотом_ТипОбъектаДО")
			И Форма.Параметры.Свойство("ИнтеграцияС1СДокументооборотом_ИдентификаторОбъектаДО") Тогда
		Форма["ИнтеграцияС1СДокументооборотом_ТипОбъектаДО"] =
			Форма.Параметры.ИнтеграцияС1СДокументооборотом_ТипОбъектаДО;
		Форма["ИнтеграцияС1СДокументооборотом_ИдентификаторОбъектаДО"] =
			Форма.Параметры.ИнтеграцияС1СДокументооборотом_ИдентификаторОбъектаДО;
	КонецЕсли;
	
	// Сохраним идентификатор связанного объекта ДО.
	Если Форма.Параметры.Свойство("Основание")
			И ТипЗнч(Форма.Параметры.Основание) = Тип("Структура")
			И Форма.Параметры.Основание.Свойство("Объект1СДокументооборота") Тогда
		КомандаФормы = Форма.Команды.Добавить("ИдентификаторОбъектаДО");
		КомандаФормы.Действие = Форма.Параметры.Основание.Объект1СДокументооборота.ID;
	КонецЕсли;
	
	Настройки = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИспользоватьИнтеграцию();
	Если Настройки.ИспользоватьИнтеграциюДО2 Тогда
		Форма.ИспользоватьИнтеграциюДО2 = Истина;
		МодульИнтеграцияС1СДокументооборот = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияС1СДокументооборот");
		МодульИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(
			Форма,
			МестоРазмещенияКоманд,
			ПараметрыОповещения,
			Ссылка);
	ИначеЕсли Настройки.ИспользоватьИнтеграциюДО3 Тогда
		Форма.ИспользоватьИнтеграциюДО3 = Истина;
		МодульИнтеграцияС1СДокументооборот3 = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияС1СДокументооборот3");
		МодульИнтеграцияС1СДокументооборот3.ПриСозданииНаСервере(
			Форма,
			МестоРазмещенияКоманд,
			ПараметрыОповещения);
	Иначе
		Возврат;
	КонецЕсли;
	
	Форма.ИспользоватьПрисоединенныеФайлы1СДокументооборота = ИспользоватьПрисоединенныеФайлы1СДокументооборота();
	
	Попытка
		Если ИспользоватьПрисоединенныеФайлы1СДокументооборота()
				И НужноВыводитьКомандуПрисоединенныхФайловДО(Форма) Тогда
			ДобавитьКомандуФайлы(Форма, МестоРазмещенияКоманд);
		КонецЕсли;
	Исключение
		ТекстСообщенияОбОшибке = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстСообщенияОбОшибке);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщенияОбОшибке);
	КонецПопытки;
	
КонецПроцедуры

// Вызывается при создании форм интеграции, размещаемых на рабочем столе.
// Позволяет отказаться от их создания при работе в неразделенном сеансе или при выполнении обновления ИБ.
//
// Параметры:
//   Отказ - Булево - отказ от создания.
//
Процедура ПриСозданииНаСервереФормРазмещаемыхНаРабочемСтоле(Отказ) Экспорт
	
	// Проверим необходимость показа формы на рабочем столе.
	Если ОбщегоНазначения.РазделениеВключено() И Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ПараметрыКлиента = СтандартныеПодсистемыСервер.ПараметрыКлиентаНаСервере();
	Если ПараметрыКлиента.Получить("СкрытьРабочийСтолПриНачалеРаботыСистемы") <> Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает Истину, если клиентское приложение является веб клиентом, иначе Ложь.
//
// Возвращаемое значение:
//   Булево
//
Функция ПриложениеЯвляетсяВебКлиентом() Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	Возврат ЗначениеЗаполнено(СистемнаяИнформация.ИнформацияПрограммыПросмотра);
	
КонецФункции

// Проверяет возврат WEB-сервиса. В случае возврата объекта типа DMError вызывает исключение.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Ответ - ОбъектXDTO - проверяемый результат вызова сервиса.
//
Процедура ПроверитьВозвратВебСервиса(Прокси, Ответ) Экспорт
	
	Если ПроверитьТип(Прокси, Ответ, "DMError") Тогда
		// Запишем в ЖР полный текст ошибки.
		ЗаписатьОшибкуXDTO(Ответ);
		ВызватьИсключение СтрШаблон(
				"%1:
				|%2",
			Ответ.subject,
			СокрЛП(Ответ.description));
	КонецЕсли;
	
КонецПроцедуры

// Проверяет тип объекта XDTO.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ОбъектXDTO - ОбъектXDTO - проверяемый объект
//   Тип - Строка - имя типа для проверки
//
// Возвращаемое значение:
//   Булево - Истина если объект является объектом указанного типа и Ложь в противном случае.
//
Функция ПроверитьТип(Прокси, ОбъектXDTO, Тип) Экспорт
	
	Если ТипЗнч(ОбъектXDTO) <> Тип("ОбъектXDTO") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ФабрикаDM = ФабрикаDM(Прокси, Ложь);
	Если ФабрикаDM = Неопределено Тогда
		// Подключение к 1С:Документооборот не было установлено.
		Возврат (НРег(СокрЛП(ОбъектXDTO.Тип().Имя)) = НРег(СокрЛП(Тип)));
		
	Иначе
		Возврат (ОбъектXDTO.Тип() = ФабрикаDM.Тип(URIПространстваИменВебСервисаДокументооборота(), Тип));
		
	КонецЕсли;
	
КонецФункции

// Возвращает реквизиты объекта потребителя указанного типа.
//
// Параметры:
//   ТипОбъектаИС - Строка - полное имя метаданных объекта.
//   ДляВыражения - Булево - возвращает список реквизитов для составления выражения на встроенном языке.
//
// Возвращаемое значение:
//   ТаблицаЗначений:
//     * Имя - Строка
//     * Представление - Строка
//     * Тип - ОписаниеТипов
//     * ЭтоТаблица - Булево
//     * Таблица - Строка
//     * ТаблицаДляСортировки - Строка
//     * ЭтоДополнительныйРеквизитИС - Булево
//     * ДополнительныйРеквизитИС - ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения
//     * СвязиПараметровВыбора - Массив из Структура:
//         ** Имя - Строка
//         ** ПутьКДанным - Строка
//     * Порядок - Число
//
Функция РеквизитыОбъектаИС(ТипОбъектаИС, ДляВыражения = Ложь) Экспорт
	
	Реквизиты = Новый ТаблицаЗначений;
	Реквизиты.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	Реквизиты.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	Реквизиты.Колонки.Добавить("Подсказка", Новый ОписаниеТипов("Строка"));
	Реквизиты.Колонки.Добавить("Тип", Новый ОписаниеТипов("ОписаниеТипов"));
	Реквизиты.Колонки.Добавить("ЭтоТаблица", Новый ОписаниеТипов("Булево"));
	Реквизиты.Колонки.Добавить("Таблица", Новый ОписаниеТипов("Строка"));
	Реквизиты.Колонки.Добавить("ТаблицаДляСортировки", Новый ОписаниеТипов("Строка"));
	Реквизиты.Колонки.Добавить("ЭтоДополнительныйРеквизитИС", Новый ОписаниеТипов("Булево"));
	Реквизиты.Колонки.Добавить("ДополнительныйРеквизитИС",
		Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	Реквизиты.Колонки.Добавить("СвязиПараметровВыбора", Новый ОписаниеТипов("Массив"));
	Реквизиты.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
	
	Реквизиты.Индексы.Добавить("Имя");
	Реквизиты.Индексы.Добавить("Таблица, Имя");
	
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ТипОбъектаИС); // ОбъектМетаданныхДокумент
	Если МетаданныеОбъекта = Неопределено Тогда
		Возврат Реквизиты;
	КонецЕсли;
	
	Порядок = 0;
	
	Для Каждого МетаданныеРеквизита Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
		
		Если МетаданныеРеквизита.Имя = "Код"
				Или МетаданныеРеквизита.Имя = "Наименование"
				Или МетаданныеРеквизита.Имя = "Владелец"
				Или МетаданныеРеквизита.Имя = "Номер"
				Или МетаданныеРеквизита.Имя = "Дата" Тогда
			
			Реквизит = Реквизиты.Добавить();
			Порядок = Порядок + 1;
			Реквизит.Порядок = Порядок;
			Реквизит.Имя = МетаданныеРеквизита.Имя;
			Реквизит.Тип = МетаданныеРеквизита.Тип;
			Реквизит.Представление = ?(ЗначениеЗаполнено(МетаданныеРеквизита.Синоним),
				МетаданныеРеквизита.Синоним,
				МетаданныеРеквизита.Имя);
			Реквизит.Подсказка = СокрЛП(МетаданныеРеквизита.Подсказка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого МетаданныеРеквизита Из МетаданныеОбъекта.Реквизиты Цикл
		
		Если СтрНачинаетсяС(МетаданныеРеквизита.Имя, "Удалить") Тогда
			Продолжить;
		КонецЕсли;
		
		Реквизит = Реквизиты.Добавить();
		Порядок = Порядок + 1;
		Реквизит.Порядок = Порядок;
		Реквизит.Имя = МетаданныеРеквизита.Имя;
		Реквизит.Тип = МетаданныеРеквизита.Тип;
		Реквизит.Представление = ?(ЗначениеЗаполнено(МетаданныеРеквизита.Синоним),
			МетаданныеРеквизита.Синоним,
			МетаданныеРеквизита.Имя);
		Реквизит.Подсказка = СокрЛП(МетаданныеРеквизита.Подсказка);
		Для Каждого СвязьПараметровВыбора Из МетаданныеРеквизита.СвязиПараметровВыбора Цикл
			СтруктураСвязи = Новый Структура("Имя, ПутьКДанным",
				СвязьПараметровВыбора.Имя,
				СвязьПараметровВыбора.ПутьКДанным);
			Реквизит.СвязиПараметровВыбора.Добавить(СтруктураСвязи);
		КонецЦикла;
		
	КонецЦикла;
	
	ИспользованиеРеквизитаИспользовать = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать;
	ИспользованиеРеквизитаАвто = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Авто;
	АвтоИспользованиеРеквизитаИспользовать = Метаданные.СвойстваОбъектов.АвтоИспользованиеОбщегоРеквизита.Использовать;
	РазделениеДанныхРеквизитаНеИспользовать = Метаданные.СвойстваОбъектов.РазделениеДанныхОбщегоРеквизита.НеИспользовать;
	
	ВсеОбщиеРеквизиты = Новый Массив; // Массив из ОбъектМетаданныхОбщийРеквизит
	Для Каждого ОбщийРеквизит Из Метаданные.ОбщиеРеквизиты Цикл
		Если ОбщийРеквизит.РазделениеДанных = РазделениеДанныхРеквизитаНеИспользовать Тогда
			ВсеОбщиеРеквизиты.Добавить(ОбщийРеквизит);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого МетаданныеРеквизита Из ВсеОбщиеРеквизиты Цикл
		
		ЭлементСостава = МетаданныеРеквизита.Состав.Найти(МетаданныеОбъекта);
		Если ЭлементСостава = Неопределено Тогда
			// Общего реквизита нет в документе.
			Продолжить;
		КонецЕсли;
		
		Если ЭлементСостава.Использование = ИспользованиеРеквизитаИспользовать
				Или (ЭлементСостава.Использование = ИспользованиеРеквизитаАвто
					И МетаданныеРеквизита.АвтоИспользование = АвтоИспользованиеРеквизитаИспользовать) Тогда
			
			Реквизит = Реквизиты.Добавить();
			Порядок = Порядок + 1;
			Реквизит.Порядок = Порядок;
			Реквизит.Имя = МетаданныеРеквизита.Имя;
			Реквизит.Тип = МетаданныеРеквизита.Тип;
			Реквизит.Представление = ?(ЗначениеЗаполнено(МетаданныеРеквизита.Синоним),
				МетаданныеРеквизита.Синоним,
				МетаданныеРеквизита.Имя);
			Реквизит.Подсказка = СокрЛП(МетаданныеРеквизита.Подсказка);
			Для Каждого СвязьПараметровВыбора Из МетаданныеРеквизита.СвязиПараметровВыбора Цикл
				СтруктураСвязи = Новый Структура("Имя, ПутьКДанным",
					СвязьПараметровВыбора.Имя,
					СвязьПараметровВыбора.ПутьКДанным);
				Реквизит.СвязиПараметровВыбора.Добавить(СтруктураСвязи);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого МетаданныеТаблицы Из МетаданныеОбъекта.ТабличныеЧасти Цикл
		
		Если СтрНачинаетсяС(МетаданныеТаблицы.Имя, "Удалить")
				Или МетаданныеТаблицы.Имя = "ДополнительныеРеквизиты"
				Или МетаданныеТаблицы.Имя = "КонтактнаяИнформация" Тогда
			Продолжить;
		КонецЕсли;
		
		Таблица = Реквизиты.Добавить();
		Порядок = Порядок + 1;
		Таблица.Порядок = Порядок;
		Таблица.Имя = МетаданныеТаблицы.Имя;
		Таблица.ТаблицаДляСортировки = МетаданныеТаблицы.Имя;
		Таблица.ЭтоТаблица = Истина;
		Таблица.Представление = ?(ЗначениеЗаполнено(МетаданныеТаблицы.Синоним),
			МетаданныеТаблицы.Синоним,
			МетаданныеТаблицы.Имя);
		Таблица.Подсказка = СокрЛП(МетаданныеТаблицы.Подсказка);
		
		Для Каждого МетаданныеРеквизита Из МетаданныеТаблицы.Реквизиты Цикл
			
			Если СтрНачинаетсяС(МетаданныеРеквизита.Имя, "Удалить") Тогда
				Продолжить;
			КонецЕсли;
			
			Реквизит = Реквизиты.Добавить();
			Порядок = Порядок + 1;
			Реквизит.Порядок = Порядок;
			Реквизит.Имя = МетаданныеРеквизита.Имя;
			Реквизит.Тип = МетаданныеРеквизита.Тип;
			Реквизит.Представление = ?(ЗначениеЗаполнено(МетаданныеРеквизита.Синоним),
				МетаданныеРеквизита.Синоним,
				МетаданныеРеквизита.Имя);
			Реквизит.Подсказка = СокрЛП(МетаданныеРеквизита.Подсказка);
			Для Каждого СвязьПараметровВыбора Из МетаданныеРеквизита.СвязиПараметровВыбора Цикл
				СтруктураСвязи = Новый Структура("Имя, ПутьКДанным",
					СвязьПараметровВыбора.Имя,
					СвязьПараметровВыбора.ПутьКДанным);
				Реквизит.СвязиПараметровВыбора.Добавить(СтруктураСвязи);
			КонецЦикла;
			
			Реквизит.Таблица = Таблица.Имя;
			Реквизит.ТаблицаДляСортировки = Таблица.Имя;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если Метаданные.ФункциональныеОпции.Найти("ИспользоватьДополнительныеРеквизитыИСведения") <> Неопределено
			И ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		
		ВладелецСвойств = Новый(Тип(СтрЗаменить(ТипОбъектаИС, ".", "Ссылка.")));
		
		Если УправлениеСвойствами.ИспользоватьДопРеквизиты(ВладелецСвойств) Тогда
			
			НаборДопРеквизитов = УправлениеСвойствами.СвойстваОбъекта(ВладелецСвойств, Истина, Ложь);
			СвойстваДопРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
				НаборДопРеквизитов,
				"Наименование, ТипЗначения, Подсказка");
			
			Для Каждого ДопРеквизит Из НаборДопРеквизитов Цикл
				СвойстваДопРеквизита = СвойстваДопРеквизитов[ДопРеквизит];
				
				Реквизит = Реквизиты.Добавить();
				Порядок = Порядок + 1;
				Реквизит.Порядок = Порядок;
				Реквизит.Имя = ИмяДопРеквизита(ДопРеквизит);
				Реквизит.Представление = СвойстваДопРеквизита.Наименование;
				Реквизит.Подсказка = СокрЛП(СвойстваДопРеквизита.Подсказка);
				Реквизит.Тип = СвойстваДопРеквизита.ТипЗначения;
				Реквизит.ЭтоДополнительныйРеквизитИС = Истина;
				Реквизит.ДополнительныйРеквизитИС = ДопРеквизит;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПриПолученииРеквизитовОбъектаИС(
		ТипОбъектаИС,
		Реквизиты);
	
	// Определим порядок с учетом зависимостей по параметрам выбора.
	Повторять = Истина;
	Пока Повторять Цикл
		Повторять = Ложь;
		Для Каждого Реквизит Из Реквизиты Цикл
			ПутьКДанным = ПутьКДаннымРеквизита(Реквизит);
			МаксимальныйПорядок = 0;
			Для Каждого СвязьПараметровВыбора Из Реквизит.СвязиПараметровВыбора Цикл
				Зависимости = Реквизиты.НайтиСтроки(СтруктураПоискаРеквизита(СвязьПараметровВыбора.ПутьКДанным));
				Для Каждого Зависимость Из Зависимости Цикл
					ЕстьЗацикливание = Ложь;
					Для Каждого ЗависимостьСвязьПараметровВыбора Из Зависимость.СвязиПараметровВыбора Цикл
						Если ЗависимостьСвязьПараметровВыбора.ПутьКДанным = ПутьКДанным Тогда
							ЕстьЗацикливание = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если Не ЕстьЗацикливание Тогда
						МаксимальныйПорядок = Макс(МаксимальныйПорядок, Зависимость.Порядок);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			Если МаксимальныйПорядок >= Реквизит.Порядок Тогда
				Реквизит.Порядок = МаксимальныйПорядок + 1;
				Повторять = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если ДляВыражения Тогда
		Реквизиты.Сортировать("ТаблицаДляСортировки, ЭтоТаблица, Имя");
	Иначе
		Реквизиты.Сортировать("ТаблицаДляСортировки, Порядок");
	КонецЕсли;
	
	Возврат Реквизиты;
	
КонецФункции

// Определяет существует ли свойство в объекте XDTO.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - исходный объект, свойство которого нужно проверить.
//   ИмяСвойства - Строка - имя свойства.
//   ВызыватьИсключение - Булево - вызывать исключение в случае, если не существует свойства с указанным именем.
//
// Возвращаемое значение:
//   Булево - свойство существует.
//
Функция СвойствоСуществует(ОбъектXDTO, ИмяСвойства, ВызыватьИсключение = Ложь) Экспорт
	
	Если ТипЗнч(ОбъектXDTO) <> Тип("ОбъектXDTO") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СвойствоСуществует = (ОбъектXDTO.Тип().Свойства.Получить(ИмяСвойства) <> Неопределено);
	
	Если ВызыватьИсключение И Не СвойствоСуществует Тогда
		ТекстИсключения = СтрШаблон(НСтр("ru = 'В объекте XDTO типа ""%1"" не существует свойства с именем ""%2"".'"),
			ОбъектXDTO.Тип().Имя,
			ИмяСвойства);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Возврат СвойствоСуществует;
	
КонецФункции

// Определяет было ли установлено свойство в объекте XDTO.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - исходный объект, свойство которого нужно проверить.
//   ИмяСвойства - Строка - имя свойства.
//
// Возвращаемое значение:
//   Булево - свойство установлено.
//
Функция СвойствоУстановлено(ОбъектXDTO, ИмяСвойства) Экспорт
	
	Возврат (СвойствоСуществует(ОбъектXDTO, ИмяСвойства) И ОбъектXDTO.Установлено(ИмяСвойства));
	
КонецФункции

// Возвращает Истина, если сервер работает под Windows, и Ложь в противном случае.
//
// Возвращаемое значение:
//   Булево
//
Функция СерверРаботаетПодWindows() Экспорт
	
	СисИнфо = Новый СистемнаяИнформация;
	
	Возврат (СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86)
		Или (СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64);
	
КонецФункции

// Возвращает признак состояния "Согласован" по данным документооборота.
//
// Параметры:
//   СсылкаНаОбъект - ЛюбаяСсылка - ссылка на объект ИС.
//
// Возвращаемое значение:
//   Булево - состояние согласования в ДО.
//
Функция СогласованВ1СДокументооборот(СсылкаНаОбъект) Экспорт
	
	СостояниеПолучено = Ложь;
	Согласован = Ложь;
	
	Попытка
		
		Если ПараметрыСеанса.ИнтеграцияС1СДокументооборотПарольИзвестен Тогда
			
			Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
			
			Если Прокси <> Неопределено Тогда
				
				Запрос = СоздатьОбъект(Прокси, "DMGetDocumentListRequest");
				ПолучаемыеПоля = Запрос.columnSet; // СписокXDTO
				ПолучаемыеПоля.Добавить("statusApproval");
				
				Владельцы = Запрос.externalObjects; // СписокXDTO
				Владельцы.Добавить(СоздатьExternalObject(Прокси, СсылкаНаОбъект));
				
				Результат = ВыполнитьЗапрос(Прокси, Запрос);
				
				Если ПроверитьТип(Прокси, Результат, "DMError") = Ложь И Результат.documents.Количество() > 0 Тогда
					
					СостояниеПолучено = Истина;
					
					ОбъектДО = Результат.documents[0];
					Если СвойствоУстановлено(ОбъектДО, "statusApproval") Тогда
						Если ТипЗнч(ОбъектДО.statusApproval) = Тип("Строка")
								И ОбъектДО.statusApproval = "Approved" Тогда
							Согласован = Истина;
							
						ИначеЕсли ТипЗнч(ОбъектДО.statusApproval) = Тип("ОбъектXDTO")
								И СвойствоУстановлено(ОбъектДО.statusApproval, "name")
								И ОбъектДО.statusApproval.name = "Согласован" Тогда //@NON-NLS-1
							Согласован = Истина;
							
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		// Если нет соединения, вернем статус Ложь.
		Согласован = Ложь;
	КонецПопытки;
	
	Если Не СостояниеПолучено Тогда
		// Возможно состояние согласования сохранено в регистре.
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	СостоянияСогласованияВДокументообороте.Состояние КАК Состояние
			|ИЗ
			|	РегистрСведений.ОбъектыИнтегрированныеС1СДокументооборотом КАК ОбъектыИнтегрированныеС1СДокументооборотом
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияСогласованияВДокументообороте КАК СостоянияСогласованияВДокументообороте
			|		ПО ОбъектыИнтегрированныеС1СДокументооборотом.ИдентификаторОбъектаДО = СостоянияСогласованияВДокументообороте.ИдентификаторОбъектаДО
			|ГДЕ
			|	ОбъектыИнтегрированныеС1СДокументооборотом.Объект = &СсылкаНаОбъект");
		Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаОбъект);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Согласован = (Выборка.Состояние = Перечисления.СостоянияСогласованияВДокументообороте.Согласован);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Согласован;
	
КонецФункции

// Создает объект DMLink.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ИдентификаторОбъектаДО - Строка - идентификатор объекта ДО.
//   ТипОбъектаДО - Строка - тип объекта XDTO.
//   ОбъектИС - ЛюбаяСсылка - ссылка на объект ИС.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMLink.
//
Функция СоздатьDMLink(Прокси, ИдентификаторОбъектаДО, ТипОбъектаДО, ОбъектИС) Экспорт
	
	СокращенноеНаименованиеКонфигурации = СокращенноеНаименованиеКонфигурации();
	
	СвязьXDTO = СоздатьОбъект(Прокси, "DMLink");
	
	Если Не ЗначениеЗаполнено(ИдентификаторОбъектаДО) Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Обнаружена некорректная связь между объектами 1С:Документооборота и %1.
				|Не указан уникальный идентификатор объекта 1С:Документооборота, связанного с объектом ""%2"".
				|Выполните команду ""Синхронизировать связи"" в настройках интеграции с 1С: Документооборотом.'"),
			СокращенноеНаименованиеКонфигурации,
			Строка(ОбъектИС));
	ИначеЕсли Не ЗначениеЗаполнено(ТипОбъектаДО) Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Обнаружена некорректная связь между объектами 1С:Документооборота и %1.
				|Не указан тип объекта 1С:Документооборота, связанного с объектом ""%2"".
				|Выполните команду ""Синхронизировать связи"" в настройках интеграции с 1С: Документооборотом.'"),
			СокращенноеНаименованиеКонфигурации,
			Строка(ОбъектИС));
	Иначе
		СвязьXDTO.linkedObject = СоздатьObjectID(Прокси, ИдентификаторОбъектаДО, ТипОбъектаДО);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектИС) Тогда
		СвязьXDTO.ownerObject = СоздатьExternalObjectID(Прокси, ОбъектИС);
	Иначе
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Обнаружена некорректная связь между объектами 1С:Документооборота и %1.
				|Объект 1С:Документооборота %2 (%3) ссылается на не существующий объект %1.
				|Выполните команду ""Синхронизировать связи"" в настройках интеграции с 1С: Документооборотом.'"),
			СокращенноеНаименованиеКонфигурации,
			ИдентификаторОбъектаДО,
			ТипОбъектаДО);
	КонецЕсли;
	
	Возврат СвязьXDTO;
	
КонецФункции

// Создает объект ExternalObject.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ВнешнийОбъектИС - ЛюбаяСсылка - ссылка на внешний объект ИС.
//   ID - Строка - идентификатор внешнего объекта ИС.
//   Тип - Строка - тип внешнего объекта ИС.
//   Наименование - Строка - наименование внешнего объекта ИС.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа ExternalObject.
//
Функция СоздатьExternalObject(Прокси, ВнешнийОбъектИС = Неопределено, ID = "", Тип = "", Наименование = "") Экспорт
	
	ExternalObject = СоздатьОбъект(Прокси, "ExternalObject");
	ExternalObject.ID = ID;
	ExternalObject.type = Тип;
	ExternalObject.name = Наименование;
	
	Если ВнешнийОбъектИС <> Неопределено Тогда
		
		// Значения по-умолчанию.
		ExternalObject.name = Строка(ВнешнийОбъектИС);
		Тип = ТипЗнч(ВнешнийОбъектИС);
		ExternalObject.type = Строка(Тип);
		
		Если ОбщегоНазначения.ЭтоСсылка(Тип) Тогда
			// Уточним тип внешнего объекта из метаданных.
			ОбъектМетаданных = ВнешнийОбъектИС.Метаданные();
			ExternalObject.type = ОбъектМетаданных.ПолноеИмя();
			
			Если Не ВнешнийОбъектИС.Пустая() Тогда
				// Уточним наименование внешнего объекта.
				Если ЕстьНаименование(ВнешнийОбъектИС) Тогда
					ExternalObject.name = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВнешнийОбъектИС, "Наименование");
				КонецЕсли;
				// Уточним идентификатор внешнего объекта.
				Если Найти(ExternalObject.type, "Перечисление.") > 0 Тогда
					ExternalObject.ID = ОбщегоНазначения.ИмяЗначенияПеречисления(ВнешнийОбъектИС);
				Иначе
					ExternalObject.ID = Строка(ВнешнийОбъектИС.УникальныйИдентификатор());
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ExternalObject;
	
КонецФункции

// Создает объект ExternalObjectID.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ВнешнийОбъектИС - ЛюбаяСсылка - ссылка на внешний объект ИС.
//   ID - Строка - идентификатор внешнего объекта ИС.
//   Тип - Строка - тип внешнего объекта ИС.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа ExternalObjectID.
//
Функция СоздатьExternalObjectID(Прокси, ВнешнийОбъектИС = Неопределено, ID = "", Тип = "") Экспорт
	
	ExternalObject = СоздатьОбъект(Прокси, "ExternalObjectID");
	ExternalObject.ID = ID;
	ExternalObject.type = Тип;
	
	Если ВнешнийОбъектИС <> Неопределено Тогда
		
		// Значения по-умолчанию.
		Тип = ТипЗнч(ВнешнийОбъектИС);
		ExternalObject.type = Строка(Тип);
		
		Если ОбщегоНазначения.ЭтоСсылка(Тип) Тогда
			// Уточним тип внешнего объекта из метаданных.
			ОбъектМетаданных = ВнешнийОбъектИС.Метаданные();
			ExternalObject.type = ОбъектМетаданных.ПолноеИмя();
			
			Если Не ВнешнийОбъектИС.Пустая() Тогда
				// Уточним идентификатор внешнего объекта.
				Если Найти(ExternalObject.type, "Перечисление.") > 0 Тогда
					ExternalObject.ID = ОбщегоНазначения.ИмяЗначенияПеречисления(ВнешнийОбъектИС);
				Иначе
					ExternalObject.ID = Строка(ВнешнийОбъектИС.УникальныйИдентификатор());
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ExternalObject;
	
КонецФункции

// Создает объект DMObjectID.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ID - Строка - идентификатор объекта XDTO.
//   Тип - Строка - тип объекта XDTO.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMObjectID.
//
Функция СоздатьObjectID(Прокси, ID = "", Тип = "") Экспорт
	
	objectID = СоздатьОбъект(Прокси, "DMObjectID");
	objectID.ID = ID;
	objectID.type = Тип;
	
	Возврат objectID;
	
КонецФункции

// Создает объект XDTO из структуры данных ссылочного объекта ДО.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ДанныеСсылочногоОбъектаДО - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO, наследуемый от типа DMObject.
//
Функция СоздатьИзДанныхСсылочногоОбъектаДО(Прокси, ДанныеСсылочногоОбъектаДО) Экспорт
	
	ОбъектXDTO = СоздатьОбъект(Прокси, ДанныеСсылочногоОбъектаДО.Тип);
	ОбъектXDTO.name = ДанныеСсылочногоОбъектаДО.Наименование;
	ОбъектXDTO.ObjectID = СоздатьObjectID(Прокси, ДанныеСсылочногоОбъектаДО.ID, ДанныеСсылочногоОбъектаДО.Тип);
	
	Возврат ОбъектXDTO;
	
КонецФункции

// Создает новый объект в Документообороте.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Объект - ОбъектXDTO - описание создаваемого объекта.
//
// Возвращаемое значение:
//   ОбъектXDTO - Объект XDTO типа DMCreateResponse или DMError.
//
Функция СоздатьНовыйОбъект(Прокси, Объект) Экспорт
	
	Запрос = СоздатьОбъект(Прокси, "DMCreateRequest");
	Запрос.object = Объект;
	
	Ответ = ВыполнитьЗапрос(Прокси, Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
	Возврат Ответ;
	
КонецФункции

// Создает XDTO объект указанного типа из пространства имен веб-сервиса Документооборота.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ТипОбъекта - Строка - тип объекта XDTO.
//   ВнешнийОбъектИС - ЛюбаяСсылка - передается для заполнения свойств name и externalObject.
//   ЗаполнитьИзВнешнегоОбъекта - Булево - требуется заполнить объект XDTO из внешнего объекта ИС.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO указанного типа.
//
Функция СоздатьОбъект(Прокси, ТипОбъекта, ВнешнийОбъектИС = Неопределено, ЗаполнитьИзВнешнегоОбъекта = Истина) Экспорт
	
	ФабрикаDM = ФабрикаDM(Прокси);
	ТипОбъектаXDTO = ФабрикаDM.Тип(URIПространстваИменВебСервисаДокументооборота(), ТипОбъекта);
	
	Если ТипОбъектаXDTO = Неопределено Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Тип объекта ""%1"" не поддерживается веб-сервисом 1С:Документооборот версии %2'"),
			ТипОбъекта,
			ВерсияСервиса());
	КонецЕсли;
	
	Если НРег(ТипОбъектаXDTO.БазовыйТип.Имя) = "string" Тогда
		НовыйОбъект = "";
	Иначе
		НовыйОбъект = ФабрикаDM.Создать(ТипОбъектаXDTO);
	КонецЕсли;
	
	Если СвойствоСуществует(НовыйОбъект, "dataBaseID") Тогда
		НовыйОбъект.dataBaseID = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ИдентификаторБазыДанных();
	КонецЕсли;
	
	Если СвойствоСуществует(НовыйОбъект, "dmilVersionNumber") Тогда
		НовыйОбъект.dmilVersionNumber = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ВерсияБИД();
	КонецЕсли;
	
	Если СвойствоСуществует(НовыйОбъект, "objectID") Тогда
		НовыйОбъект.objectID = СоздатьObjectID(Прокси);
	КонецЕсли;
	
	Если ВнешнийОбъектИС <> Неопределено Тогда
		
		Если ТипЗнч(ТипОбъектаXDTO) = Тип("ТипОбъектаXDTO") Тогда
			Для Каждого СвойствоОбъектаXDTO Из ТипОбъектаXDTO.Свойства Цикл
				Если НРег(СвойствоОбъектаXDTO.Имя) = "externalobject" Тогда
					Если СвойствоОбъектаXDTO.Тип.Имя = "ExternalObject" Тогда
						НовыйОбъект.externalObject = СоздатьExternalObject(Прокси, ВнешнийОбъектИС);
					ИначеЕсли СвойствоОбъектаXDTO.Тип.Имя = "ExternalObjectID" Тогда
						НовыйОбъект.externalObject = СоздатьExternalObjectID(Прокси, ВнешнийОбъектИС);
					КонецЕсли;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если СвойствоСуществует(НовыйОбъект, "name") Тогда
			НаименованиеОбъекта = Строка(ВнешнийОбъектИС);
			Если ЕстьНаименование(ВнешнийОбъектИС) Тогда
				НаименованиеОбъекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВнешнийОбъектИС, "Наименование");
			КонецЕсли;
			НовыйОбъект.name = НаименованиеОбъекта;
		КонецЕсли;
		
		Если ЗаполнитьИзВнешнегоОбъекта Тогда
			ЗаполнитьРеквизитыИзПотребителя(Прокси, НовыйОбъект, ВнешнийОбъектИС);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НовыйОбъект;
	
КонецФункции

// Создает XDTO объект для передачи массива подписей в Документооборот.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ДанныеВладельцаПодписи - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеВладельцаПодписи
//
// Возвращаемое значение:
//   ОбъектXDTO - Объект XDTO с заполненным свойством signatures.
//
Функция СоздатьОбъектXDTOДляСохраненияПодписей(Прокси, ДанныеВладельцаПодписи) Экспорт
	
	Если ДанныеВладельцаПодписи.Тип = "DMFile" Тогда
		ОбъектXDTO = СоздатьОбъект(Прокси, ДанныеВладельцаПодписи.Тип);
		ОбъектXDTO.objectID = СоздатьObjectID(Прокси, ДанныеВладельцаПодписи.ID, ДанныеВладельцаПодписи.Тип);
		ОбъектXDTO.name = ДанныеВладельцаПодписи.Наименование;
	Иначе
		ОбъектXDTO = ПолучитьОбъект(Прокси, ДанныеВладельцаПодписи.Тип, ДанныеВладельцаПодписи.ID);
	КонецЕсли;
	
	Если СвойствоСуществует(ОбъектXDTO, "updateSignatures") Тогда
		ОбъектXDTO.updateSignatures = Истина;
	КонецЕсли;
	
	ЗаполнитьПодписиОбъектаXDTO(Прокси, ОбъектXDTO, ДанныеВладельцаПодписи.МассивПодписей);
	
	Возврат ОбъектXDTO;
	
КонецФункции

// Возвращает сокращенное наименование интегрируемой конфигурации для вывода в заголовках и декорациях.
//
// Возвращаемое значение:
//   Строка - сокращенное наименование конфигурации.
//
Функция СокращенноеНаименованиеКонфигурации() Экспорт
	
	СокращенноеНаименование = НСтр("ru = 'БИД (демо)'");
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПриОпределенииСокращенногоНаименованияКонфигурации(
		СокращенноеНаименование);
	
	Возврат СокращенноеНаименование;
	
КонецФункции

// Получает ссылку на объект по имени объекта конфигурации и ID.
//
// Параметры:
//   Тип - Строка - тип объекта конфигурации.
//   UUID - Строка - идентификатор объекта конфигурации.
//
// Возвращаемое значение:
//   ЛюбаяСсылка - ссылка на объект.
//
Функция СсылкаИзUUID(Тип, UUID) Экспорт
	
	СсылкаНаПотребителя = Неопределено;
	
	Если СтрНачинаетсяС(Тип, "Справочник.") Тогда
		СсылкаНаПотребителя = Справочники[СтрЗаменить(Тип,
			"Справочник.", "")].ПолучитьСсылку(Новый УникальныйИдентификатор(UUID));
		
	ИначеЕсли СтрНачинаетсяС(Тип, "Документ.")Тогда
		СсылкаНаПотребителя = Документы[СтрЗаменить(Тип,
			"Документ.", "")].ПолучитьСсылку(Новый УникальныйИдентификатор(UUID));
		
	ИначеЕсли СтрНачинаетсяС(Тип, "ПланСчетов.") Тогда
		СсылкаНаПотребителя = ПланыСчетов[СтрЗаменить(Тип,
			"ПланСчетов.", "")].ПолучитьСсылку(Новый УникальныйИдентификатор(UUID));
		
	ИначеЕсли СтрНачинаетсяС(Тип, "ПланВидовРасчета.") Тогда
		СсылкаНаПотребителя = ПланыВидовРасчета[СтрЗаменить(Тип,
			"ПланВидовРасчета.", "")].ПолучитьСсылку(Новый УникальныйИдентификатор(UUID));
		
	ИначеЕсли СтрНачинаетсяС(Тип, "ПланВидовХарактеристик.") Тогда
		СсылкаНаПотребителя = ПланыВидовХарактеристик[СтрЗаменить(Тип,
			"ПланВидовХарактеристик.", "")].ПолучитьСсылку(Новый УникальныйИдентификатор(UUID));
		
	ИначеЕсли СтрНачинаетсяС(Тип, "БизнесПроцесс.") Тогда
		СсылкаНаПотребителя = БизнесПроцессы[СтрЗаменить(Тип,
			"БизнесПроцесс.", "")].ПолучитьСсылку(Новый УникальныйИдентификатор(UUID));
		
	ИначеЕсли СтрНачинаетсяС(Тип, "Задача.") Тогда
		СсылкаНаПотребителя = Задачи[СтрЗаменить(Тип,
			"Задача.", "")].ПолучитьСсылку(Новый УникальныйИдентификатор(UUID));
		
	ИначеЕсли СтрНачинаетсяС(Тип, "Перечисление.") И ЗначениеЗаполнено(UUID) Тогда
		СсылкаНаПотребителя = Перечисления[СтрЗаменить(Тип,
			"Перечисление.", "")][UUID];
		
	КонецЕсли;
	
	Возврат СсылкаНаПотребителя;
	
КонецФункции

// Возвращает ссылки на объекты этой конфигурации по информации о них в объекте ДО.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - потомок DMObject, объект ДО.
//              - Структура - содержит идентификатор и тип внешнего объекта:
//     * ID - Строка - идентификатор внешнего объекта по данным 1С:Документооборота;
//     * type - Строка - тип внешнего объекта по данным 1С:Документооборота.
//
// Возвращаемое значение:
//   Массив из ЛюбаяСсылка - массив ссылок на связанные объекты этой конфигурации.
//
Функция СсылкиПоВнешнимОбъектам(ОбъектXDTO) Экспорт
	
	Результат = Новый Массив;
	
	Если ТипЗнч(ОбъектXDTO) = Тип("Структура") Тогда
		ВнешниеОбъекты = Новый Массив;
		ВнешниеОбъекты.Добавить(ОбъектXDTO);
		
	ИначеЕсли СвойствоУстановлено(ОбъектXDTO, "externalObjects") Тогда
		ВнешниеОбъекты = ОбъектXDTO.externalObjects;
		
	ИначеЕсли СвойствоУстановлено(ОбъектXDTO, "externalObject") Тогда
		ВнешниеОбъекты = Новый Массив;
		ВнешниеОбъекты.Добавить(ОбъектXDTO.externalObject);
		
	Иначе
		Возврат Результат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого ВнешнийОбъект Из ВнешниеОбъекты Цикл
	
		Попытка
			Ссылка = СсылкаИзUUID(ВнешнийОбъект.type, ВнешнийОбъект.ID);
		Исключение
			// Тип объекта не найден в текущей конфигурации.
			Продолжить;
		КонецПопытки;
		
		Если Ссылка <> Неопределено И ОбщегоНазначения.СсылкаСуществует(Ссылка) Тогда
			Результат.Добавить(Ссылка);
			
			Если СвойствоУстановлено(ОбъектXDTO, "objectID")
					И ОбъектXDTO.objectID.ID <> ""
					И ОбъектXDTO.objectID.type <> "" Тогда
				НаличиеПрисоединенныхФайлов = Ложь; // Доп. запрос к ДО делать не требуется.
				Если СвойствоУстановлено(ОбъектXDTO, "files") Тогда
					НаличиеПрисоединенныхФайлов = (ОбъектXDTO.files.Количество() > 0);
				КонецЕсли;
				РегистрыСведений.ОбъектыИнтегрированныеС1СДокументооборотом.ДобавитьСвязь(
					ОбъектXDTO.objectID.ID,
					ОбъектXDTO.objectID.type,
					Ссылка,
					НаличиеПрисоединенныхФайлов);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

// Возвращает таймаут прокси веб-сервиса Документооборота, возможно, переопределенный в настройках.
//
// Возвращаемое значение:
//   Число - таймаут в секундах.
//
Функция ТаймаутСервиса() Экспорт
	
	Таймаут = 20;
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПриОпределенииТаймаутаСервиса(Таймаут);
	
	Возврат Таймаут;
	
КонецФункции

// Получает текущего пользователя 1С:Документооборота.
//
// Возвращаемое значение:
//   Массив из ОбъектXDTO - объект XDTO типа DMUser, DMEmployee или Неопределено.
//
Функция ТекущийПользовательДокументооборота() Экспорт
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	Если ПараметрыСеанса.ИнтеграцияС1СДокументооборотТекущийПользователь = "" Тогда
		
		Запрос = ТекущийПользовательДокументооборотаЗапрос(Прокси);
		Ответ = ВыполнитьЗапрос(Прокси, Запрос);
		
	Иначе
		
		Ответ = СтрокаВОбъектXDTO(Прокси, ПараметрыСеанса.ИнтеграцияС1СДокументооборотТекущийПользователь);
		
	КонецЕсли;
	
	Если ПроверитьТип(Прокси, Ответ, "DMError") Тогда
		Возврат Неопределено;
	Иначе
		Результат = Новый Массив;
		Результат.Добавить(Ответ.user);
		
		Настройки = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИспользоватьИнтеграцию();
		Если Настройки.ИспользоватьИнтеграциюДО3 Тогда
			СотрудникиПользователя = Ответ.employees; // СписокXDTO
			Для Каждого Сотрудник Из СотрудникиПользователя Цикл
				Результат.Добавить(Сотрудник);
			КонецЦикла;
		КонецЕсли;
		
		Возврат Результат;
	КонецЕсли;
	
КонецФункции

// Возвращает запрос для получения текущего пользователя 1С:Документооборота.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMGetCurrentUserRequest.
//
Функция ТекущийПользовательДокументооборотаЗапрос(Прокси) Экспорт
	
	Возврат СоздатьОбъект(Прокси, "DMGetCurrentUserRequest");
	
КонецФункции

// Устанавливает версию сервиса в параметрах сеанса.
//
// Параметры:
//   ИзФоновогоЗадания - Булево - процедура запускается из фонового задания.
//   ТекстОшибки - Строка - неявно возвращаемое значение, текст сообщения об ошибке,
//     полученный при определении версии сервиса.
//
Процедура УстановитьВерсиюСервиса(ИзФоновогоЗадания = Ложь, ТекстОшибки = "") Экспорт
	
	СтароеЗначение = ВерсияСервиса();
	ПараметрыСеанса.ИнтеграцияС1СДокументооборотВерсияСервиса = ПолучитьВерсиюВызовомСервиса(
		ИзФоновогоЗадания,
		ТекстОшибки);
	
	Если СтароеЗначение <> "" И СтароеЗначение <> "0.0.0.0" И СтароеЗначение <> ВерсияСервиса() Тогда
		ОбновитьПовторноИспользуемыеПараметры();
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает параметры сеанса работы с подсистемой "Интеграция с 1С:Документооборотом".
//
// Параметры:
//   ИмяПараметра - Строка
//   УстановленныеПараметры - Массив из Строка
//
Процедура УстановитьПараметрыСеанса(ИмяПараметра, УстановленныеПараметры) Экспорт
	
	Если ИмяПараметра = "ИнтеграцияС1СДокументооборотWSОпределения" Тогда
		ПараметрыСеанса.ИнтеграцияС1СДокументооборотWSОпределения = Новый ХранилищеЗначения(Неопределено);
		Если УстановленныеПараметры <> Неопределено Тогда
			УстановленныеПараметры.Добавить("ИнтеграцияС1СДокументооборотWSОпределения");
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяПараметра = "ИнтеграцияС1СДокументооборотВерсияСервиса" Тогда
		ПараметрыСеанса.ИнтеграцияС1СДокументооборотВерсияСервиса = "";
		Если ОбновлениеИнформационнойБазы.НеобходимоОбновлениеИнформационнойБазы()
				Или ОбновлениеИнформационнойБазы.ВыполняетсяОбновлениеИнформационнойБазы() Тогда
			ПараметрыСеанса.ИнтеграцияС1СДокументооборотВерсияСервиса = "0.0.0.0";
		КонецЕсли;
		Если УстановленныеПараметры <> Неопределено Тогда
			УстановленныеПараметры.Добавить("ИнтеграцияС1СДокументооборотВерсияСервиса");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяПараметра = "ИнтеграцияС1СДокументооборотИмяПользователя" Тогда
		ПараметрыСеанса.ИнтеграцияС1СДокументооборотИмяПользователя = "";
		Если УстановленныеПараметры <> Неопределено Тогда
			УстановленныеПараметры.Добавить("ИнтеграцияС1СДокументооборотИмяПользователя");
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяПараметра = "ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияJWT" Тогда
		ПараметрыСеанса.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияJWT = Ложь;
		Если УстановленныеПараметры <> Неопределено Тогда
			УстановленныеПараметры.Добавить("ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияJWT");
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяПараметра = "ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияОС" Тогда
		ПараметрыСеанса.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияОС = Ложь;
		Если УстановленныеПараметры <> Неопределено Тогда
			УстановленныеПараметры.Добавить("ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияОС");
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяПараметра = "ИнтеграцияС1СДокументооборотМестоположениеПрокси" Тогда
		ПараметрыСеанса.ИнтеграцияС1СДокументооборотМестоположениеПрокси = "";
		Если УстановленныеПараметры <> Неопределено Тогда
			УстановленныеПараметры.Добавить("ИнтеграцияС1СДокументооборотМестоположениеПрокси");
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяПараметра = "ИнтеграцияС1СДокументооборотНастройки" Тогда
		ПараметрыСеанса.ИнтеграцияС1СДокументооборотНастройки = "";
		Если УстановленныеПараметры <> Неопределено Тогда
			УстановленныеПараметры.Добавить("ИнтеграцияС1СДокументооборотНастройки");
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяПараметра = "ИнтеграцияС1СДокументооборотОперацияПодключения" Тогда
		ПараметрыСеанса.ИнтеграцияС1СДокументооборотОперацияПодключения = Новый ХранилищеЗначения(Неопределено);
		Если УстановленныеПараметры <> Неопределено Тогда
			УстановленныеПараметры.Добавить("ИнтеграцияС1СДокументооборотОперацияПодключения");
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяПараметра = "ИнтеграцияС1СДокументооборотПароль" Тогда
		ПараметрыСеанса.ИнтеграцияС1СДокументооборотПароль = "";
		Если УстановленныеПараметры <> Неопределено Тогда
			УстановленныеПараметры.Добавить("ИнтеграцияС1СДокументооборотПароль");
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяПараметра = "ИнтеграцияС1СДокументооборотПарольИзвестен" Тогда
		ПараметрыСеанса.ИнтеграцияС1СДокументооборотПарольИзвестен = Ложь;
		Если УстановленныеПараметры <> Неопределено Тогда
			УстановленныеПараметры.Добавить("ИнтеграцияС1СДокументооборотПарольИзвестен");
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяПараметра = "ИнтеграцияС1СДокументооборотСхемаXML" Тогда
		ПараметрыСеанса.ИнтеграцияС1СДокументооборотСхемаXML = "";
		Если УстановленныеПараметры <> Неопределено Тогда
			УстановленныеПараметры.Добавить("ИнтеграцияС1СДокументооборотСхемаXML");
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяПараметра = "ИнтеграцияС1СДокументооборотТекущийПользователь" Тогда
		ПараметрыСеанса.ИнтеграцияС1СДокументооборотТекущийПользователь = "";
		Если УстановленныеПараметры <> Неопределено Тогда
			УстановленныеПараметры.Добавить("ИнтеграцияС1СДокументооборотТекущийПользователь");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает параметры сеанса по массиву имен.
//
// Параметры:
//   ИменаПараметров - Массив из Строка - массив строк с именами параметров сеанса к установке.
//
Процедура УстановитьПараметрыСеансаПоМассивуИмен(ИменаПараметров) Экспорт
	
	Если ТипЗнч(ИменаПараметров) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ИмяПараметра Из ИменаПараметров Цикл
		УстановитьПараметрыСеанса(ИмяПараметра, Неопределено);
	КонецЦикла;
	
КонецПроцедуры

// Добавляет в связанный документ в ДО штрихкод по объекту ИС.
//
// Параметры:
//   ОбъектИС - ЛюбаяСсылка - объект ИС, источник данных заполнения.
//   ID - Строка - идентификатор объекта Документооборота.
//   Тип - Строка - XDTO-тип объекта Документооборота
//
Процедура УстановитьШтрихкод(ОбъектИС, ID, Тип) Экспорт
	
	Если Найти(Тип, "Document") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	ШтрихкодОбъектаИС = "";
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПриОпределенииШтрихкодаДокумента(
		ОбъектИС,
		ШтрихкодОбъектаИС);
	Если ЗначениеЗаполнено(ШтрихкодОбъектаИС)
			И ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("1.4.3.1.CORP") Тогда
		
		Запрос = СоздатьОбъект(Прокси, "DMRetrieveBarcodesRequest");
		
		Запрос.objectID = СоздатьObjectID(Прокси, ID, Тип);
		
		Результат = ВыполнитьЗапрос(Прокси, Запрос);
		ПроверитьВозвратВебСервиса(Прокси, Результат);
		
		Запрос = СоздатьОбъект(Прокси, "DMUpdateBarcodesRequest");
		
		Запрос.objectBarcodes = Результат.objectBarcodes;
		СписокШтрихкодов = Запрос.objectBarcodes.barcodes; // СписокXDTO
		
		Штрихкод = СоздатьОбъект(Прокси, "DMBarcode");
		Штрихкод.internal = Ложь;
		Штрихкод.barcodeData = ШтрихкодОбъектаИС;
		СписокШтрихкодов.Добавить(Штрихкод);
		
		Результат = ВыполнитьЗапрос(Прокси, Запрос);
		ПроверитьВозвратВебСервиса(Прокси, Результат);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает XDTO фабрику, с которой работает сервис Документооборота.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ВызыватьИсключение - Булево - вызывать исключение в случае, если сервис Документооборота недоступен.
//
// Возвращаемое значение:
//   ФабрикаXDTO
//
Функция ФабрикаDM(Прокси = Неопределено, ВызыватьИсключение = Истина) Экспорт
	
	Если ПараметрыСеанса.ИнтеграцияС1СДокументооборотСхемаXML <> "" Тогда
		
		Возврат ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ФабрикаDM(
			ПараметрыСеанса.ИнтеграцияС1СДокументооборотСхемаXML);
		
	ИначеЕсли Прокси <> Неопределено Тогда
		
		Возврат Прокси.ФабрикаXDTO;
		
	ИначеЕсли ВызыватьИсключение Тогда
		
		ВызватьИсключение НСтр("ru = 'Интеграция с 1С:Документооборотом не настроена, или сервис
			|1С:Документооборота недоступен. Обратитесь к администратору.'");
		
	КонецЕсли;
	
КонецФункции

// Проверяет, является ли значение объектным, т.е. наследуется от типа DMObject.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Значение - Произвольный - проверяемое значение.
//
// Возвращаемое значение:
//   Булево - Истина, в случае, если значение является потомком типа DMObject, иначе Ложь.
//
Функция ЭтоОбъектноеЗначение(Прокси, Значение) Экспорт
	
	Если ТипЗнч(Значение) <> Тип("ОбъектXDTO") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ФабрикаDM = ФабрикаDM(Прокси);
	ОбъектныйТип = ФабрикаDM.Тип(URIПространстваИменВебСервисаДокументооборота(), "DMObject");
	Возврат ОбъектныйТип.ЭтоПотомок(Значение.Тип());
	
КонецФункции

// Проверяет, является ли свойство объектным, т.е. наследуется от типа DMObject.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ОбъектXDTO - ОбъектXDTO - объект, содержащий проверяемое свойство
//   ИмяСвойстваXDTO - Строка - имя проверяемого свойства
//
// Возвращаемое значение:
//   Булево - Истина, в случае, если свойство является потомком типа DMObject, иначе Ложь
//
Функция ЭтоОбъектноеСвойство(Прокси, ОбъектXDTO, ИмяСвойстваXDTO) Экспорт
	
	СвойствоСуществует(ОбъектXDTO, ИмяСвойстваXDTO, Истина);
	
	ТипСвойства = ОбъектXDTO.Тип().Свойства.Получить(ИмяСвойстваXDTO).Тип;
	ФабрикаDM = ФабрикаDM(Прокси);
	ТипРодитель = ФабрикаDM.Тип(URIПространстваИменВебСервисаДокументооборота(), "DMObject");
	
	Возврат ТипЗнч(ТипСвойства) = Тип("ТипОбъектаXDTO") И ТипРодитель.ЭтоПотомок(ТипСвойства);
	
КонецФункции

#КонецОбласти

#Область ЗапросыКДокументообороту

// Получает объект 1С:Документооборота, связанный с объектом конфигурации-потребителя.
//
// Параметры:
//   СсылкаНаВнешнийОбъект - ЛюбаяСсылка - ссылка на объект конфигурации-потребителя.
//   ПолучитьИзДО - Булево - требуется получить ссылку на связанный объект на стороне Документооборота.
//   ПолучатьНДПС - Булево - требуется получить настройки доступности по состоянию на стороне Документооборота.
//
// Возвращаемое значение:
//   Неопределено, Структура - данные объекта:
//     * name - Строка - имя объекта Документооборота.
//     * ID - Строка - уникальный идентификатор объекта в Документообороте.
//     * type - Строка - имя типа XDTO, соответствующего объекту ДО.
//     * ВнешнийОбъект - ЛюбаяСсылка - ссылка на связанный объект ИС.
//
Функция ДанныеОбъектаДОПоВнешнемуОбъекту(СсылкаНаВнешнийОбъект, ПолучитьИзДО = Ложь, ПолучатьНДПС = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(СсылкаНаВнешнийОбъект) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Настройки = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИспользоватьИнтеграцию();
	
	Если Настройки.ИспользоватьИнтеграциюДО2 Или ПолучитьИзДО Тогда
		
		Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
		Запрос = СоздатьОбъект(Прокси, "DMGetDocumentListRequest");
		СписокВнешнихОбъектов = Запрос.externalObjects; // СписокXDTO
		СписокВнешнихОбъектов.Добавить(
			СоздатьExternalObject(Прокси, СсылкаНаВнешнийОбъект));
		
		ПолучаемыеПоля = Запрос.columnSet; // СписокXDTO
		ПолучаемыеПоля.Добавить("name");
		ПолучаемыеПоля.Добавить("documentType");
		ПолучаемыеПоля.Добавить("enabledProperties");
		
		Результат = ВыполнитьЗапрос(Прокси, Запрос);
		ПроверитьВозвратВебСервиса(Прокси, Результат);
		
		Если Результат.documents.Количество() > 0 Тогда
			
			Объект = Результат.documents[0];
			
			ДанныеВозврата = Новый Структура;
			ДанныеВозврата.Вставить("ВнешнийОбъект", СсылкаНаВнешнийОбъект);
			ДанныеВозврата.Вставить("ID", Объект.objectID.ID);
			ДанныеВозврата.Вставить("type", Объект.objectID.type);
			ДанныеВозврата.Вставить("name", Объект.name);
			
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДополнитьНДПС(ДанныеВозврата);
			ЗаполнитьНДПСизОбъектаXDTO(ДанныеВозврата, Объект);
			
			Если СтрНайти(ДанныеВозврата.type, "Document") > 0 Тогда
				
				Если Объект.documentType = Неопределено Тогда
					ВызватьИсключение СтрШаблон(НСтр("ru = 'Невозможно получить данные 1С:Документооборота: %1.
						|Обратитесь к администратору.'"),
						Объект.name);
				КонецЕсли;
				
				ВидДокумента = Новый Структура("ID, type, name",
					Объект.documentType.objectID.ID,
					Объект.documentType.objectID.type,
					Объект.documentType.name);
				
				ДанныеВозврата.Вставить("documentType", ВидДокумента);
				
			КонецЕсли;
			
			Возврат ДанныеВозврата;
			
		КонецЕсли;
		
	ИначеЕсли Настройки.ИспользоватьИнтеграциюДО3 Тогда
		
		ДанныеВозврата = РегистрыСведений.ОбъектыИнтегрированныеС1СДокументооборотом.ДанныеОбъектаДОПоВнешнемуОбъекту(
			СсылкаНаВнешнийОбъект);
		
		Если ДанныеВозврата <> Неопределено Тогда
			
			Документ = Неопределено;
			
			МодульИнтеграцияС1СДокументооборот3 = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияС1СДокументооборот3");
			Если ПолучатьНДПС И МодульИнтеграцияС1СДокументооборот3.ЭтоДокументДО3(ДанныеВозврата.type) Тогда
				Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
				Документ = ПолучитьОбъект(
					Прокси,
					ДанныеВозврата.type,
					ДанныеВозврата.ID,
					"enabledProperties");
			КонецЕсли;
			
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДополнитьНДПС(ДанныеВозврата);
			ЗаполнитьНДПСизОбъектаXDTO(ДанныеВозврата, Документ);
			
		КонецЕсли;
		
		Возврат ДанныеВозврата;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область НДПС

// Заполняет в структуре данных значения настроек доступности по состоянию из объекта XDTO.
//
// Параметры:
//   СтруктураДанных - Структура, ФормаКлиентскогоПриложения - произвольная структура, которую требуется
//     дополнить значениями НДПС.
//   ОбъектXDTO - ОбъектXDTO - объект XDTO, содержащий свойство enabledProperties.
//
Процедура ЗаполнитьНДПСизОбъектаXDTO(СтруктураДанных, ОбъектXDTO = Неопределено) Экспорт
	
	Если СвойствоУстановлено(ОбъектXDTO, "enabledProperties") И ОбъектXDTO.enabledProperties.Количество() <> 0 Тогда
		
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.УстановитьЗначенияВсехПолейНДПС(
			СтруктураДанных,
			Ложь);
		
		ПоляНДПС = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ПоляНДПС();
		Для Каждого ДоступноеПоле Из ОбъектXDTO.enabledProperties Цикл
			ИмяПоля = ПоляНДПС[НРег(ДоступноеПоле)];
			Если ИмяПоля = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ЕстьСвойство(
					СтруктураДанных, ИмяПоля) Тогда
				СтруктураДанных[ИмяПоля] = Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет в структуре данных значения настройки доступности по состоянию из указанных свойств объекта XDTO.
//
// Параметры:
//   СтруктураДанных - Структура, ФормаКлиентскогоПриложения - произвольная структура, которую требуется
//     дополнить значением НДПС.
//   ОбъектXDTO - ОбъектXDTO - исходный объект, свойство которого нужно перенести в НДПС.
//   ИменаСвойств - Строка - имена свойств через запятую.
//
Процедура ЗаполнитьНДПСизСвойствXDTO(СтруктураДанных, ОбъектXDTO, ИменаСвойств) Экспорт
	
	Для Каждого ИмяСвойства Из СтрРазделить(ИменаСвойств, ",", Ложь) Цикл
		Если СвойствоУстановлено(ОбъектXDTO, ИмяСвойства) Тогда
			ПоляНДПС = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ПоляНДПС();
			СтруктураДанных[ПоляНДПС[ИмяСвойства]] = ОбъектXDTO[ИмяСвойства];
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Файлы

// Возвращает данные хранящихся на стороне ДО файлов.
//
// Параметры:
//   Источник - ЛюбаяСсылка - ссылка на исходный объект ИС.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//   СписокРасширений - Строка - список расширений файлов, которые требуется получать из ДО через запятую.
//
// Возвращаемое значение:
//   Массив из см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла
//
Функция ДанныеФайловОбъектаИС(Источник, УникальныйИдентификаторФормы, Знач СписокРасширений = Неопределено) Экспорт
	
	ДанныеФайлов = Новый Массив;
	
	Настройки = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИспользоватьИнтеграцию();
	
	Если Не Настройки.ИспользоватьИнтеграциюДО2 И Не Настройки.ИспользоватьИнтеграциюДО3 Тогда
		Возврат ДанныеФайлов;
	КонецЕсли;
	
	ИспользоватьДОДляХраненияФайловОбъекта =
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИспользоватьПрисоединенныеФайлы1СДокументооборотаДляОбъекта(
			Источник);
	Если Не ИспользоватьДОДляХраненияФайловОбъекта Тогда
		Возврат ДанныеФайлов;
	КонецЕсли;
	
	СвязанныйОбъектДО =
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеОбъектаДОПоВнешнемуОбъекту(Источник);
	Если СвязанныйОбъектДО = Неопределено Тогда
		Возврат ДанныеФайлов;
	КонецЕсли;
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	ОбъектXDTO = ПолучитьОбъект(Прокси, СвязанныйОбъектДО.type, СвязанныйОбъектДО.ID, "files");
	
	ДопустимыеРасширения = Новый Массив;
	Если ТипЗнч(СписокРасширений) = Тип("Строка") Тогда
		СписокРасширений = СтрЗаменить(СписокРасширений, " ", "");
		СписокРасширений = НРег(СписокРасширений);
		ДопустимыеРасширения = СтрРазделить(СписокРасширений, ",", Ложь);
	КонецЕсли;
	БезОтбора = (ДопустимыеРасширения.Количество() = 0);
	
	НужныеФайлы = Новый Массив;
	Для Каждого ФайлXDTO Из ОбъектXDTO.files Цикл
		Если БезОтбора Или ДопустимыеРасширения.Найти(НРег(ФайлXDTO.extension)) <> Неопределено Тогда
			НужныеФайлы.Добавить(Новый Структура("ID, Тип", ФайлXDTO.objectID.ID, ФайлXDTO.objectID.type));
		КонецЕсли;
	КонецЦикла;
	Если НужныеФайлы.Количество() = 0 Тогда
		Возврат ДанныеФайлов;
	КонецЕсли;
	
	НужныеФайлыXDTO = ПолучитьОбъекты(Прокси, НужныеФайлы, "name,extension,size,binaryData");
	
	Для Каждого ФайлXDTO Из НужныеФайлыXDTO Цикл
		ДанныеФайла = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла(
			ФайлXDTO.name,
			ФайлXDTO.objectID.ID,
			ФайлXDTO.objectID.type,
			ФайлXDTO.extension);
		ДанныеФайла.Размер = ФайлXDTO.size;
		ДанныеФайла.СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(
			ФайлXDTO.binaryData,
			УникальныйИдентификаторФормы);
		
		ДанныеФайлов.Добавить(ДанныеФайла);
	КонецЦикла;
	
	Возврат ДанныеФайлов;
	
КонецФункции

// Добавляет команду печати в таблицу печатных форм объекта.
//
// Параметры:
//   ПечатныеФормы - ТаблицаЗначений:
//     * МенеджерПечати - Строка - имя объекта, в модуле менеджера которого располагается
//                                 процедура Печать, формирующая табличные документы для этой команды.
//     * ИмяКоманды - Строка
//     * ПредставлениеКоманды - Строка
//     * ДополнительныеПараметры - Строка - (необязательный) произвольные параметры для передачи в менеджер печати.
//   КомандаПечати - см. УправлениеПечатью.КомандыПечатиФормы
//
Процедура ДобавитьКомандуПечати(ПечатныеФормы, КомандаПечати) Экспорт
	
	Строка = ПечатныеФормы.Добавить();
	Строка.МенеджерПечати = КомандаПечати.МенеджерПечати;
	Строка.ИмяКоманды = КомандаПечати.Идентификатор;
	Строка.ПредставлениеКоманды = КомандаПечати.Представление;
	Строка.ДополнительныеПараметры = КомандаПечати.ДополнительныеПараметрыВСтроку;
	
КонецПроцедуры

// Заполняет коллекцию печатных форм объекта по имени менеджера печати и команде менеджера печати.
//
// Параметры:
//   ВнешнийОбъект - ЛюбаяСсылка - внешний объект.
//   ИмяКоманды - Строка - имя команды.
//   ДополнительныеПараметры - Строка - (необязательный) произвольные параметры для передачи в менеджер печати.
//   КоллекцияПечатныхФорм - ТаблицаЗначений - неявно возвращаемое значение.
//
Процедура ЗаполнитьКоллекциюПечатныхФорм(ВнешнийОбъект, ИмяКоманды, ДополнительныеПараметры,
		КоллекцияПечатныхФорм) Экспорт
	
	СтандартнаяОбработка = Истина;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПриЗаполненииКоллекцииПечатныхФорм(
		ВнешнийОбъект,
		ИмяКоманды,
		ДополнительныеПараметры,
		КоллекцияПечатныхФорм,
		СтандартнаяОбработка);
	
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	МодульУправлениеПечатью = Неопределено;
	МодульДополнительныеОтчетыИОбработки = Неопределено;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Печать") Тогда
		МодульУправлениеПечатью = ОбщегоНазначения.ОбщийМодуль("УправлениеПечатью");
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки") Тогда
		МодульДополнительныеОтчетыИОбработки = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработки");
	КонецЕсли;
	
	Если МодульУправлениеПечатью = Неопределено Или МодульДополнительныеОтчетыИОбработки = Неопределено Тогда
		КоллекцияПечатныхФорм = Новый ТаблицаЗначений;
		Возврат;
	КонецЕсли;
	
	Если СтрНайти(ИмяКоманды, "КомандаПечати") = 1 Тогда
		НомерКомандыСтрокой = Сред(ИмяКоманды, СтрДлина("КомандаПечати") + 1);
		Если НомерКомандыСтрокой = "0" Тогда
			НомерКоманды = 0;
		Иначе
			ОписаниеТипов = Новый ОписаниеТипов("Число");
			НомерКоманды = ОписаниеТипов.ПривестиЗначение(НомерКомандыСтрокой);
			НомерКоманды = ?(НомерКоманды = 0, -1, НомерКоманды);
		КонецЕсли;
	Иначе
		НомерКоманды = -1;
	КонецЕсли;
	
	МенеджерОбъекта = ВнешнийОбъект.Метаданные().ПолноеИмя();
	
	КомандыПечати = КомандыПечатиФормы(МенеджерОбъекта + ".Форма.ФормаСписка");
	КоличествоКомандПечати = КомандыПечати.Количество();
	Если КоличествоКомандПечати = 0 Тогда
		КоллекцияПечатныхФорм = Новый ТаблицаЗначений;
		Возврат;
	КонецЕсли;
	
	Если НомерКоманды = -1 Или НомерКоманды >= КоличествоКомандПечати Тогда
		Отбор = Новый Структура("Идентификатор", ИмяКоманды);
		Если ЗначениеЗаполнено(ДополнительныеПараметры) Тогда
			Отбор.Вставить("ДополнительныеПараметрыВСтроку", ДополнительныеПараметры);
		КонецЕсли;
		СтрокиКомандыПечати = КомандыПечати.НайтиСтроки(Отбор);
		Если СтрокиКомандыПечати.Количество() > 0 Тогда
			КомандаПечати = СтрокиКомандыПечати[0];
		КонецЕсли;
	Иначе
		КомандаПечати = КомандыПечати[НомерКоманды];
	КонецЕсли;
	ОписаниеКоманды = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(КомандаПечати);
	
	ОбъектыПечатиСписок = Новый СписокЗначений;
	ОбъектыПечатиСписок.Добавить(ВнешнийОбъект);
	
	ОбъектыПечати = Новый Массив;
	ОбъектыПечати.Добавить(ВнешнийОбъект);
	
	ОписаниеКоманды.Вставить("ОбъектыПечати", ОбъектыПечати);
	
	ПараметрыПечати = ОписаниеКоманды.ДополнительныеПараметры; // Структура
	ПараметрыВывода = Неопределено;
	
	Попытка
		
		Если ПараметрыПечати.Свойство("Ссылка") И ЗначениеЗаполнено(ПараметрыПечати.Ссылка) Тогда
				ПараметрыПечати.Вставить("ИдентификаторКоманды", ОписаниеКоманды.Идентификатор);
				ПараметрыПечати.Вставить("ОбъектыНазначения", ОбъектыПечати);
				
				МодульДополнительныеОтчетыИОбработки.ПечатьПоВнешнемуИсточнику(
					ПараметрыПечати.Ссылка,
					ПараметрыПечати,
					КоллекцияПечатныхФорм,
					ОбъектыПечатиСписок,
					ПараметрыВывода);
		Иначе
			ПечатныеФормы = МодульУправлениеПечатью.СформироватьПечатныеФормы(
				ОписаниеКоманды.МенеджерПечати,
				ОписаниеКоманды.Идентификатор,
				ОбъектыПечати,
				ПараметрыПечати);
			КоллекцияПечатныхФорм = ПечатныеФормы.КоллекцияПечатныхФорм;
		КонецЕсли;
		
	Исключение
		
		КоллекцияПечатныхФорм = Новый ТаблицаЗначений;
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Не удалось сформировать печатную форму ""%1"" по причине:
				|%2'"),
			ОписаниеКоманды.Представление,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстСообщения);
		
	КонецПопытки;
	
КонецПроцедуры

// Заполняет список присоединенных файлов объекта ИС, которые не были перенесены в связанный документ ДО.
//
// Параметры:
//   НеПеренесенныеВДОПрисоединенныеФайлыВИС - СписокЗначений из ЛюбаяСсылка - неявно возвращаемое значение. Список не
//     перенесенных файлов.
//   ВсеПрисоединенныеФайлыВИС - Массив из ЛюбаяСсылка - список всех присоединенных файлов объекта,
//     хранящихся в ИС.
//                             - ЛюбаяСсылка - ссылка на владельца файлов в ИС.
//   СписокФайловДО - СписокXDTO - список из объектов XDTO типа DMFile.
//
Процедура ЗаполнитьНеПеренесенныеВДОПрисоединенныеФайлыВИС(НеПеренесенныеВДОПрисоединенныеФайлыВИС,
		Знач ВсеПрисоединенныеФайлыВИС, СписокФайловДО) Экспорт
	
	Если НеПеренесенныеВДОПрисоединенныеФайлыВИС = Неопределено Тогда
		НеПеренесенныеВДОПрисоединенныеФайлыВИС = Новый СписокЗначений;
	Иначе
		НеПеренесенныеВДОПрисоединенныеФайлыВИС.Очистить();
	КонецЕсли;
	
	Если ТипЗнч(ВсеПрисоединенныеФайлыВИС) <> Тип("Массив") Тогда
		// В параметре ВсеПрисоединенныеФайлыВИС была передана ссылка на владельца.
		ВсеПрисоединенныеФайлыВИС = ПрисоединенныеФайлыВИС(ВсеПрисоединенныеФайлыВИС);
	КонецЕсли;
	
	КолВоФайловИС = ВсеПрисоединенныеФайлыВИС.ВГраница();
	Для Индекс = 0 По КолВоФайловИС Цикл
		НомерФайла = КолВоФайловИС - Индекс;
		ПрисоединенныйФайлВИС = ВсеПрисоединенныеФайлыВИС[НомерФайла];
		ИдентификаторФайлаИС = Строка(ПрисоединенныйФайлВИС.УникальныйИдентификатор());
		ФайлЕстьВДО = Ложь;
		Для Каждого ФайлXDTO Из СписокФайловДО Цикл
			Если ФайлXDTO.objectID.id = ИдентификаторФайлаИС Тогда
				ФайлЕстьВДО = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ФайлЕстьВДО Тогда
			ВсеПрисоединенныеФайлыВИС.Удалить(НомерФайла);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ПрисоединенныйФайлВИС Из ВсеПрисоединенныеФайлыВИС Цикл
		НеПеренесенныеВДОПрисоединенныеФайлыВИС.Добавить(ПрисоединенныйФайлВИС);
	КонецЦикла;
	
КонецПроцедуры

// Получает таблицу менеджеров печати форм объектов.
//
// Параметры:
//   МенеджерОбъекта - Строка - полное имя метаданных менеджера объекта.
//   ПечатныеФормы - ТаблицаЗначений:
//     * МенеджерПечати - Строка - имя объекта, в модуле менеджера которого располагается
//                                 процедура Печать, формирующая табличные документы для этой команды.
//     * ИмяКоманды - Строка
//     * ПредставлениеКоманды - Строка
//     * ДополнительныеПараметры - Строка - (необязательный) произвольные параметры для передачи в менеджер печати.
//
Процедура ЗаполнитьТаблицуМенеджеровПечатиОбъекта(МенеджерОбъекта, ПечатныеФормы) Экспорт
	
	СтандартнаяОбработка = Истина;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПриЗаполненииТаблицыМенеджеровПечатиОбъекта(
		МенеджерОбъекта,
		ПечатныеФормы,
		СтандартнаяОбработка);
	
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	КомандыПечати = КомандыПечатиФормы(МенеджерОбъекта + ".Форма.ФормаСписка");
	Для Каждого КомандаПечати Из КомандыПечати Цикл
		ДобавитьКомандуПечати(ПечатныеФормы, КомандаПечати);
	КонецЦикла;
	
КонецПроцедуры

// Формирует имя файла печатной формы объекта ИС для помещения в ДО.
//
// Параметры:
//   Источник - ЛюбаяСсылка - ссылка на исходный объект ИС.
//   ПредставлениеКоманды - Строка - синоним команды печати.
//   СинонимМакета - Строка - синоним макета печатной формы.
//   ИмяМакета - Строка - имя макета печатной формы.
//
// Возвращаемое значение:
//   Строка
//
Функция ИмяПечатнойФормы(Источник, ПредставлениеКоманды, СинонимМакета, ИмяМакета) Экспорт
	
	Если ЗначениеЗаполнено(ПредставлениеКоманды) Тогда
		ПредставлениеПечатнойФормы = ПредставлениеКоманды;
	ИначеЕсли ЗначениеЗаполнено(СинонимМакета) Тогда
		ПредставлениеПечатнойФормы = СинонимМакета;
	Иначе
		ПредставлениеПечатнойФормы = ИмяМакета;
	КонецЕсли;
	
	ИсточникМетаданные = Источник.Метаданные();
	Если ОбщегоНазначения.ЭтоДокумент(ИсточникМетаданные) И ИсточникМетаданные.ДлинаНомера > 0 Тогда
		ДатаНомер = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Дата, Номер");
		ИмяФайла = СтрШаблон(НСтр("ru = '%1 №%2 от %3'"),
			ПредставлениеПечатнойФормы,
			Строка(ДатаНомер.Номер),
			Формат(ДатаНомер.Дата, "ДЛФ=D"));
	Иначе
		ИмяФайла = СтрШаблон(НСтр("ru = '%1 %2'"),
			ПредставлениеПечатнойФормы,
			Строка(Источник));
	КонецЕсли;
	
	Возврат ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла, " ");
	
КонецФункции

// Получает индекс пиктограммы файла - индекс в картинке КоллекцияПиктограммФайлов.
//
// Параметры:
//   Расширение - Строка - расширение файла.
//   ПометкаУдаления - Булево - файл помечен на удаление.
//
// Возвращаемое значение:
//   Число
//
Функция ИндексПиктограммыФайла(Расширение, ПометкаУдаления = Ложь) Экспорт
	
	ИндексКартинки = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ИндексПиктограммыФайла(Расширение);
	
	Если ПометкаУдаления Тогда
		ИндексКартинки = ИндексКартинки + 1;
	КонецЕсли;
	
	Возврат ИндексКартинки;
	
КонецФункции

// Возвращает количество прикрепленных файлов к связанному объекту 1С:Документооборот.
//
// Параметры:
//   ID - Строка - идентификатор объекта Документооборота.
//   Тип - Строка - XDTO-тип объекта Документооборота.
//   ВключаяУдаленные - Булево - учитывать ли помеченные на удаление файлы.
//
// Возвращаемое значение:
//   Число - количество прикрепленных файлов.
//
Функция КоличествоФайловСвязанногоОбъекта(ID, Тип, ВключаяУдаленные = Истина) Экспорт
	
	Если ID = "" Или Тип = "" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	ПолучаемыеПоля = Новый Массив;
	ПолучаемыеПоля.Добавить("files");
	Если СтрНайти(Тип, "Document") > 0 Тогда
		ПолучаемыеПоля.Добавить("enabledProperties");
	КонецЕсли;
	Если ВключаяУдаленные Тогда
		ПолучаемыеПоля.Добавить("ignoreDeletionMark");
	КонецЕсли;
	
	ОбъектXDTO = ПолучитьОбъект(
		Прокси,
		Тип,
		ID,
		ПолучаемыеПоля);
	
	Если СвойствоУстановлено(ОбъектXDTO, "files") Тогда
		Возврат ОбъектXDTO.files.Количество();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает команды печати формы.
//
// Параметры:
//   ИмяФормы - Строка - имя формы объекта.
//
// Возвращаемое значение:
//   см. УправлениеПечатью.КомандыПечатиФормы
//
Функция КомандыПечатиФормы(ИмяФормы) Экспорт
	
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяФормы);
	Если ОбъектМетаданных <> Неопределено И Не Метаданные.ОбщиеФормы.Содержит(ОбъектМетаданных) Тогда
		ОбъектМетаданных = ОбъектМетаданных.Родитель();
	Иначе
		ОбъектМетаданных = Неопределено;
	КонецЕсли;
	
	Если ОбъектМетаданных = Неопределено
			Или Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Печать") Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	МодульУправлениеПечатью = ОбщегоНазначения.ОбщийМодуль("УправлениеПечатью");
	
	Если МодульУправлениеПечатью.ИсточникиКомандПечати().Найти(ОбъектМетаданных) = Неопределено Тогда
		Возврат Новый ТаблицаЗначений;
	Иначе
		КомандыПечатиФормы = МодульУправлениеПечатью.КомандыПечатиФормы(ИмяФормы);
		КомандыПечатиФормы.Колонки.Добавить("ДополнительныеПараметрыВСтроку");
		ПередДобавлениемКомандПечати(ИмяФормы, КомандыПечатиФормы, Истина);
		Для Каждого КомандаПечати Из КомандыПечатиФормы Цикл
			КомандаПечати.ДополнительныеПараметрыВСтроку = ПараметрыПечатиВСтроку(КомандаПечати.ДополнительныеПараметры);
		КонецЦикла;
		СвернутьКомандыПечатиФормы(КомандыПечатиФормы);
		Возврат КомандыПечатиФормы;
	КонецЕсли;
	
КонецФункции

// Конструктор таблицы, кэширующей значения для последующего внесения в регистр
// сведений КонтрольОтправкиФайловВ1СДокументооборот.
//
// Возвращаемое значение:
//  ТаблицаЗначений:
//     * Источник - ЛюбаяСсылка - ссылка на исходный объект ИС.
//     * ИмяФайла - Строка - имя печатной формы.
//     * ТабличныйДокумент - ТабличныйДокумент - сформированная печатная форма.
//
Функция КонтрольОтправкиФайлов() Экспорт
	
	КонтрольОтправкиФайлов = Новый ТаблицаЗначений;
	КонтрольОтправкиФайлов.Колонки.Добавить("Источник",
		Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.ИнтеграцияС1СДокументооборотВсеСсылкиПереопределяемый.Тип));
	КонтрольОтправкиФайлов.Колонки.Добавить("ИмяФайла", Новый ОписаниеТипов("Строка"));
	КонтрольОтправкиФайлов.Колонки.Добавить("ТабличныйДокумент", Новый ОписаниеТипов("ТабличныйДокумент"));
	
	Возврат КонтрольОтправкиФайлов;
	
КонецФункции

// Возвращает таблицу значений с информацией о менеджерах печати объекта.
//
// Параметры:
//   МенеджерОбъекта - Строка - полное имя метаданных менеджера объекта.
//
// Возвращаемое значение:
//   ТаблицаЗначений:
//     * ИмяКоманды - Строка - имя команды менеджера печати.
//     * МенеджерПечати - Строка - имя объекта, в модуле менеджера которого располагается
//         процедура Печать, формирующая табличные документы для этой команды.
//     * ПредставлениеКоманды - Строка - представление команды печати для отображения на формах.
//     * ДополнительныеПараметры - Строка - (необязательный) произвольные параметры для передачи в менеджер печати.
//
Функция МенеджерыПечати(МенеджерОбъекта) Экспорт
	
	ПечатныеФормы = Новый ТаблицаЗначений;
	ПечатныеФормы.Колонки.Добавить("ИмяКоманды");
	ПечатныеФормы.Колонки.Добавить("МенеджерПечати");
	ПечатныеФормы.Колонки.Добавить("ПредставлениеКоманды");
	ПечатныеФормы.Колонки.Добавить("ДополнительныеПараметры");
	
	ЗаполнитьТаблицуМенеджеровПечатиОбъекта(МенеджерОбъекта, ПечатныеФормы);
	
	Возврат ПечатныеФормы;
	
КонецФункции

// Формирует структуру параметров, необходимую для показа пользователю вопроса о переносе файлов из ИС в ДО, и для
// дальнейшего переноса файлов.
//
// Параметры:
//   ДанныеСвязи - Структура:
//     * ID - Строка - идентификатор объекта Документооборота.
//     * Тип - Строка - тип XDTO объекта Документооборота.
//     * Объект - ЛюбаяСсылка - ссылка на объект интегрированной системы, являющийся владельцем файлов.
//   ПрисоединенныеФайлыВИС - СписокЗначений из ЛюбаяСсылка - список файлов в ИС, не перенесенных в ДО.
//                          - Неопределено - если список файлов требуется определить.
//   ТипСправочникаСФайлами - Строка - полное имя метаданных владельца файла в ИС.
//   ПредставлениеТипаВладельца - Строка - представление типа владельца файла в ИС.
//
// Возвращаемое значение:
//   Структура:
//     * НужноЗадатьВопросОПереносеФайловВДО - Булево - Истина, если нужно задать вопрос пользователю. Ложь, если
//         перенос файлов в ДО не требуется.
//     * ПрисоединенныеФайлыВИС - СписокЗначений из ЛюбаяСсылка - список файлов в ИС, не перенесенных в ДО.
//                              - Неопределено - если перенос файлов не требуется.
//     * ВладелецID - Строка - идентификатор владельца файла в Документообороте.
//     * ВладелецТип - Строка - тип XDTO владельца файла в Документообороте.
//     * ВладелецИС - ЛюбаяСсылка - ссылка на объект-владелец файла в ИС.
//     * ТипСправочникаСФайлами - Строка - полное имя метаданных владельца файла в ИС.
//     * ПредставлениеТипаВладельца - Строка - представление типа владельца файла в ИС.
//     * СокращенноеНаименованиеКонфигурации - см. ИнтеграцияС1СДокументооборотБазоваяФункциональность.СокращенноеНаименованиеКонфигурации
//
Функция ПараметрыПереносаФайловВДО(ДанныеСвязи, ПрисоединенныеФайлыВИС = Неопределено,
		ТипСправочникаСФайлами = "Неопределено", ПредставлениеТипаВладельца = "объекта") Экспорт
	
	ПараметрыПереносаФайлов = Новый Структура;
	ПараметрыПереносаФайлов.Вставить("НужноЗадатьВопросОПереносеФайловВДО", Ложь);
	ПараметрыПереносаФайлов.Вставить("ПрисоединенныеФайлыВИС", ПрисоединенныеФайлыВИС);
	ПараметрыПереносаФайлов.Вставить("ВладелецID", ДанныеСвязи.ID);
	ПараметрыПереносаФайлов.Вставить("ВладелецТип", ДанныеСвязи.Тип);
	ПараметрыПереносаФайлов.Вставить("ВладелецИС", ДанныеСвязи.Объект);
	ПараметрыПереносаФайлов.Вставить("ТипСправочникаСФайлами", ТипСправочникаСФайлами);
	ПараметрыПереносаФайлов.Вставить("ПредставлениеТипаВладельца", ПредставлениеТипаВладельца);
	ПараметрыПереносаФайлов.Вставить("СокращенноеНаименованиеКонфигурации", СокращенноеНаименованиеКонфигурации());
	
	Настройки = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИспользоватьИнтеграцию();
	Если Не Настройки.ИспользоватьИнтеграциюДО3 Тогда
		// Функционал переноса файлов реализован только в интеграции с ДО 3.
		Возврат ПараметрыПереносаФайлов;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеСвязи.Объект)
			И (ТипСправочникаСФайлами = "Неопределено" Или ПредставлениеТипаВладельца = "объекта") Тогда
		ВладелецМетаданные = ДанныеСвязи.Объект.Метаданные();
		ПараметрыПереносаФайлов.ТипСправочникаСФайлами = ВладелецМетаданные.ПолноеИмя();
		ТипОбъектаМассив = СтрРазделить(ПараметрыПереносаФайлов.ТипСправочникаСФайлами, ".");
		Если ТипОбъектаМассив[0] = "Справочник" Тогда
			ПараметрыПереносаФайлов.ПредставлениеТипаВладельца = "справочника";
		ИначеЕсли ТипОбъектаМассив[0] = "Документ" Тогда
			ПараметрыПереносаФайлов.ПредставлениеТипаВладельца = "документа";
		КонецЕсли;
	КонецЕсли;
	
	НастройкаЗадаватьВопросОПереносеФайловВДО =
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.НастройкаЗадаватьВопросОПереносеФайловВДО(
			ПараметрыПереносаФайлов.ТипСправочникаСФайлами);
	Если НастройкаЗадаватьВопросОПереносеФайловВДО = Ложь Тогда
		// Персональная настройка пользователя.
		Возврат ПараметрыПереносаФайлов;
	КонецЕсли;
	
	Если Не ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИспользоватьПрисоединенныеФайлы1СДокументооборотаДляОбъекта(
			ДанныеСвязи.Объект) Тогда
		// Функционал хранения файлов в ДО не используется.
		Возврат ПараметрыПереносаФайлов;
	КонецЕсли;
	
	ВсеПрисоединенныеФайлыВИС = ПрисоединенныеФайлыВИС(ДанныеСвязи.Объект);
	Если ВсеПрисоединенныеФайлыВИС.Количество() = 0 Тогда
		// Файлы для переноса в ДО отсутствуют.
		Возврат ПараметрыПереносаФайлов;
	КонецЕсли;
	
	Если ПараметрыПереносаФайлов.ПрисоединенныеФайлыВИС = Неопределено Тогда
		СписокФайловДО = Новый Массив;
		Если ЗначениеЗаполнено(ДанныеСвязи.ID) Тогда
			Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
			ОбъектXDTO = ПолучитьОбъект(
				Прокси,
				ДанныеСвязи.Тип,
				ДанныеСвязи.ID,
				"files");
			Если СвойствоУстановлено(ОбъектXDTO, "files") Тогда
				СписокФайловДО = ОбъектXDTO.files;
			КонецЕсли;
		КонецЕсли;
		ЗаполнитьНеПеренесенныеВДОПрисоединенныеФайлыВИС(
			ПараметрыПереносаФайлов.ПрисоединенныеФайлыВИС,
			ВсеПрисоединенныеФайлыВИС,
			СписокФайловДО);
	КонецЕсли;
	
	ПараметрыПереносаФайлов.НужноЗадатьВопросОПереносеФайловВДО =
		(ПараметрыПереносаФайлов.ПрисоединенныеФайлыВИС.Количество() > 0);
	
	Возврат ПараметрыПереносаФайлов;
	
КонецФункции

// Преобразует структуру дополнительных параметров печатной формы в строку.
//
// Параметры:
//   ПараметрыПечати - Структура - дополнительные параметры печатной формы.
//
// Возвращаемое значение:
//   Строка
//
Функция ПараметрыПечатиВСтроку(ПараметрыПечати) Экспорт
	
	СтруктураДляОбработки = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыПечати);
	
	Если СтруктураДляОбработки.Свойство("ИнтеграцияС1СДокументооборот_ПараметрыДлительнойОперации") Тогда
		СтруктураДляОбработки.Удалить("ИнтеграцияС1СДокументооборот_ПараметрыДлительнойОперации");
	КонецЕсли;
	
	Попытка
		ДополнительныеПараметрыВСтроку = ОбщегоНазначения.ЗначениеВJSON(СтруктураДляОбработки);
	Исключение
		ДополнительныеПараметрыВСтроку = "";
	КонецПопытки;
	
	Возврат ДополнительныеПараметрыВСтроку;
	
КонецФункции

// Формирует параметры создания файлов объекта ДО из печатных форм объекта ИС.
//
// Параметры:
//   Источник - ЛюбаяСсылка - ссылка на исходный объект ИС.
//   ПрисоединяемыеПечатныеФормы - см. ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПрисоединяемыеПечатныеФормы
//   ТипФайловСохраненияПечатныхФорм - ПеречислениеСсылка.ТипыФайловСохраненияПечатныхФормОбъектов - тип файла,
//     в котором сохраняется печатная форма.
//   КонтрольОтправкиФайлов - см. ИнтеграцияС1СДокументооборотБазоваяФункциональность.КонтрольОтправкиФайлов
//   ТолькоОбновление - Булево - Истина, если выполняется только обновление существующих форм.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//
// Возвращаемое значение:
//   Массив Из см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.НовыеПараметрыСозданияФайла
//
Функция ПечатныеФормыКСозданию(Источник, ПрисоединяемыеПечатныеФормы, ТипФайловСохраненияПечатныхФорм,
		КонтрольОтправкиФайлов = Неопределено, ТолькоОбновление = Ложь, УникальныйИдентификаторФормы = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	МетаданныеИсточника = Источник.Метаданные();
	
	КомандыПечатиФормы = КомандыПечатиФормы(СтрШаблон("%1.Форма.ФормаСписка", МетаданныеИсточника.ПолноеИмя()));
	
	СтрокиКУдалению = Новый Массив;
	Для Каждого Строка Из ПрисоединяемыеПечатныеФормы Цикл
		Отбор = Новый Структура("Идентификатор, МенеджерПечати",
			Строка.ИмяКоманды,
			Строка.МенеджерПечати);
		Если ЗначениеЗаполнено(Строка.ДополнительныеПараметры) Тогда
			Отбор.Вставить("ДополнительныеПараметрыВСтроку", Строка.ДополнительныеПараметры);
		КонецЕсли;
		СтрокиКомандыПечати = КомандыПечатиФормы.НайтиСтроки(Отбор);
		Если СтрокиКомандыПечати.Количество() > 0 Тогда
			ИндексКоманды = КомандыПечатиФормы.Индекс(СтрокиКомандыПечати[0]);
			Строка.ИмяКоманды = СтрШаблон("КомандаПечати%1", Формат(ИндексКоманды, "ЧН=0; ЧГ=0"));
			Строка.ПредставлениеКоманды = СтрокиКомандыПечати[0].Представление;
		Иначе
			// Такой печатной формы в объекте ИС нет.
			СтрокиКУдалению.Добавить(Строка);
			Продолжить;
		КонецЕсли;
		Если ТолькоОбновление И (Не Строка.Обновлять) Тогда
			СтрокиКУдалению.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из СтрокиКУдалению Цикл
		ПрисоединяемыеПечатныеФормы.Удалить(Строка);
	КонецЦикла;
	
	ПечатныеФормы = ПрисоединяемыеПечатныеФормы.Скопировать();
	ПрисоединяемыеПечатныеФормы.Свернуть("МенеджерПечати");
	МенеджерыПечати = ПрисоединяемыеПечатныеФормы.ВыгрузитьКолонку("МенеджерПечати");
	
	ФорматФайлов = ОбщегоНазначения.ИмяЗначенияПеречисления(ТипФайловСохраненияПечатныхФорм);
	Расширение = РасширениеСохраняемойПечатнойФормы(ТипФайловСохраненияПечатныхФорм);
	
	Для Каждого МенеджерПечати Из МенеджерыПечати Цикл
		
		МакетыМенеджера = ПечатныеФормы.НайтиСтроки(Новый Структура("МенеджерПечати", МенеджерПечати));
		
		Для Каждого КомандаМенеджера Из МакетыМенеджера Цикл
			
			ТаблицаПечатныхФорм = Новый ТаблицаЗначений;
			
			ЗаполнитьКоллекциюПечатныхФорм(
				Источник,
				КомандаМенеджера.ИмяКоманды,
				КомандаМенеджера.ДополнительныеПараметры,
				ТаблицаПечатныхФорм);
			
			Для Каждого ПечатнаяФорма Из ТаблицаПечатныхФорм Цикл
				Если ПечатнаяФорма.ТабличныйДокумент = Неопределено
						Или ПечатнаяФорма.ТабличныйДокумент.КоличествоСтраниц() = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
				
				ИмяФайла = ИмяПечатнойФормы(
					Источник,
					КомандаМенеджера.ПредставлениеКоманды,
					ПечатнаяФорма.СинонимМакета,
					ПечатнаяФорма.ИмяМакета);
				
				Если ТолькоОбновление
						И РегистрыСведений.КонтрольОтправкиФайловВ1СДокументооборот.ФайлУжеОтправлен(
							Источник, ИмяФайла, ПечатнаяФорма.ТабличныйДокумент) Тогда
					Продолжить;
				ИначеЕсли КонтрольОтправкиФайлов <> Неопределено Тогда
					НоваяСтрока = КонтрольОтправкиФайлов.Добавить();
					НоваяСтрока.Источник = Источник;
					НоваяСтрока.ИмяФайла = ИмяФайла;
					НоваяСтрока.ТабличныйДокумент = ПечатнаяФорма.ТабличныйДокумент;
				Иначе
					РегистрыСведений.КонтрольОтправкиФайловВ1СДокументооборот.СохранитьХешСуммуВерсииФайла(
						Источник,
						ИмяФайла,
						ПечатнаяФорма.ТабличныйДокумент);
				КонецЕсли;
				
				ПечатнаяФорма.ТабличныйДокумент.Записать(
					ИмяВременногоФайла,
					ТипФайлаТабличногоДокумента[ФорматФайлов]);
				Файл = Новый Файл(ИмяВременногоФайла);
				
				ТекущийФайл = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла(
					ИмяФайла,
					Неопределено,
					"DMFile",
					Расширение,
					КомандаМенеджера.РольФайлаID);
				ТекущийФайл.Размер = Файл.Размер();
				ТекущийФайл.ДатаМодификации = Файл.ПолучитьВремяИзменения();
				ТекущийФайл.ДатаМодификацииУниверсальная = Файл.ПолучитьУниверсальноеВремяИзменения();
				
				ПараметрыСозданияФайла =
					ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.НовыеПараметрыСозданияФайла(ТекущийФайл);
				ПараметрыСозданияФайла.АдресВременногоХранилищаФайла = ПоместитьВоВременноеХранилище(
					Новый ДвоичныеДанные(ИмяВременногоФайла),
					УникальныйИдентификаторФормы);
				ПараметрыСозданияФайла.Владелец = Источник;
				
				Результат.Добавить(ПараметрыСозданияФайла);
				
				Файл = Неопределено;
				УдалитьФайлы(ИмяВременногоФайла);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Вызывается при определении наличия файлов, хранимых в интегрируемой конфигурации.
//
// Параметры:
//   ВладелецФайлов - Произвольный - объект-владелец.
//   ЕстьФайлы - Булево, Неопределено - неявно возвращаемое значение, признак наличия присоединенных файлов.
//
Процедура ПриОпределенииНаличияПрисоединенныхФайлов(ВладелецФайлов, ЕстьФайлы) Экспорт
	
	СтандартнаяОбработка = Истина;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПриОпределенииНаличияПрисоединенныхФайлов(
		ВладелецФайлов, ЕстьФайлы, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьФайлы = (ПрисоединенныеФайлыВИС(ВладелецФайлов).Количество() > 0);
	
КонецПроцедуры

// Возвращает список присоединенных файлов, хранимых в ИС.
//
// Параметры:
//   ВладелецФайлов - Произвольный - объект-владелец.
//
// Возвращаемое значение:
//   Массив из ЛюбаяСсылка - список ссылок на прикрепленные файлы.
//
Функция ПрисоединенныеФайлыВИС(ВладелецФайлов) Экспорт
	
	Результат = Новый Массив;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		Возврат Результат;
	КонецЕсли;
	
	ИмяСправочникаХранилищаФайлов = "";
	МодульРаботаСФайлами = ОбщегоНазначения.ОбщийМодуль("РаботаСФайлами");
	Попытка
		МодульРаботаСФайлами.НоваяСсылкаНаФайл(ВладелецФайлов, ИмяСправочникаХранилищаФайлов);
	Исключение
		ИмяСправочникаХранилищаФайлов = "";
	КонецПопытки;
	Если Не ЗначениеЗаполнено(ИмяСправочникаХранилищаФайлов) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Файлы.Ссылка КАК Ссылка
		|ИЗ
		|	&ИмяСправочникаХранилищаФайлов КАК Файлы
		|ГДЕ
		|	Файлы.ВладелецФайла = &ВладелецФайлов
		|	И НЕ Файлы.ПометкаУдаления");
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст,
		"&ИмяСправочникаХранилищаФайлов",
		СтрШаблон("Справочник.%1", ИмяСправочникаХранилищаФайлов));
	Запрос.УстановитьПараметр("ВладелецФайлов", ВладелецФайлов);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат Результат;
	
КонецФункции

// Конструктор таблицы значений, описывающей присоединяемые печатные формы.
//
// Возвращаемое значение:
//  ТаблицаЗначений:
//     * ИмяКоманды - Строка - имя команды менеджера печати.
//     * ПредставлениеКоманды - Строка - представление команды печати для отображения на формах.
//     * МенеджерПечати - Строка - имя менеджера печати, как оно задано в конфигураторе.
//     * Обновлять - Булево - обновлять значение.
//     * РольФайлаID - Строка - идентификатор роли файла печатной формы на стороне ДО.
//     * ДополнительныеПараметры - Строка - (необязательный) произвольные параметры для передачи в менеджер печати.
//
Функция ПрисоединяемыеПечатныеФормы() Экспорт
	
	ПрисоединяемыеПечатныеФормы = Новый ТаблицаЗначений;
	ПрисоединяемыеПечатныеФормы.Колонки.Добавить("ИмяКоманды", Новый ОписаниеТипов("Строка"));
	ПрисоединяемыеПечатныеФормы.Колонки.Добавить("ПредставлениеКоманды", Новый ОписаниеТипов("Строка"));
	ПрисоединяемыеПечатныеФормы.Колонки.Добавить("МенеджерПечати", Новый ОписаниеТипов("Строка"));
	ПрисоединяемыеПечатныеФормы.Колонки.Добавить("Обновлять", Новый ОписаниеТипов("Булево"));
	ПрисоединяемыеПечатныеФормы.Колонки.Добавить("РольФайлаID", Новый ОписаниеТипов("Строка"));
	ПрисоединяемыеПечатныеФормы.Колонки.Добавить("ДополнительныеПараметры", Новый ОписаниеТипов("Строка"));
	
	Возврат ПрисоединяемыеПечатныеФормы;
	
КонецФункции

// Вызывается при получении присоединенных файлов.
//
// Параметры:
//   ВладелецФайлов - Произвольный - объект-владелец.
//   ДанныеФайлов - Массив из см. РаботаСФайлами.ДанныеФайла
//
Процедура ПриПолученииПрисоединенныхФайлов(ВладелецФайлов, ДанныеФайлов) Экспорт
	
	СтандартнаяОбработка = Истина;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПриПолученииПрисоединенныхФайлов(
		ВладелецФайлов, ДанныеФайлов, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		Возврат;
	КонецЕсли;
	
	Файлы = Новый Массив;
	МодульРаботаСФайлами = ОбщегоНазначения.ОбщийМодуль("РаботаСФайлами");
	МодульРаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(ВладелецФайлов, Файлы);
	
	Для Каждого Файл Из Файлы Цикл
		ДанныеФайла = МодульРаботаСФайлами.ДанныеФайла(Файл, Неопределено, Истина, Ложь);
		ДанныеФайлов.Добавить(ДанныеФайла);
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает признак наличия присоединенных файлов ДО для объекта ИС. Вызывается при добавлении
// связи с объектом ДО, имеющим файлы, при добавлении файла из интерфейса ИС и при фоновом обновлении.
//
// Параметры:
//   ID - Строка - идентификатор объекта Документооборота.
//   Тип - Строка - XDTO-тип объекта Документооборота.
//   ОбъектИС - ОпределяемыйТип.ВладелецПрисоединенныхФайлов - объект ИС.
//   НаличиеПрисоединенныхФайлов - Булево - Истина, если в ДО есть присоединенные файлы.
//
Процедура ПриПоявленииПрисоединенныхФайловДокументооборота(ID, Тип, ОбъектИС,
		НаличиеПрисоединенныхФайлов = Неопределено) Экспорт
	
	СтандартнаяОбработка = Истина;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПриПоявленииПрисоединенныхФайловДокументооборота(
		ID, Тип, ОбъектИС, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбъектИС) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами")
			Или Не ИспользоватьПрисоединенныеФайлы1СДокументооборота() Тогда
		Возврат;
	КонецЕсли;
	
	ВладелецПрисоединенныхФайлов = Метаданные.ОпределяемыеТипы.Найти("ВладелецПрисоединенныхФайлов");
	Если ВладелецПрисоединенныхФайлов = Неопределено
			Или Не ВладелецПрисоединенныхФайлов.Тип.СодержитТип(ТипЗнч(ОбъектИС)) Тогда
		Возврат;
	КонецЕсли;
	
	Если НаличиеПрисоединенныхФайлов = Неопределено Тогда
		
		Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
		Если Не ОбъектДОПоддерживаетФайлы(Прокси, Тип) Тогда
			// У объекта ДО не может быть присоединенных файлов.
			Возврат;
		КонецЕсли;
		
		// Наличие присоединенных файлов в ДО заранее не известно. Получим количество файлов в ДО запросом.
		КоличествоФайловДО = КоличествоФайловСвязанногоОбъекта(ID, Тип);
		Если КоличествоФайловДО = Неопределено Или КоличествоФайловДО = 0 Тогда
			Возврат;
		КонецЕсли;
		
	ИначеЕсли НаличиеПрисоединенныхФайлов = Ложь Тогда
		
		// Наличие присоединенных файлов в ДО заранее известно. Файлов нет.
		Возврат;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	МодульНаличиеФайлов = ОбщегоНазначения.ОбщийМодуль("РегистрыСведений.НаличиеФайлов");
	МенеджерЗаписи = МодульНаличиеФайлов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ОбъектСФайлами = ОбъектИС;
	МенеджерЗаписи.Прочитать();
	
	Если Не ЗначениеЗаполнено(МенеджерЗаписи.ОбъектСФайлами) Тогда
		МенеджерЗаписи.ОбъектСФайлами = ОбъектИС;
	КонецЕсли;
	
	Если Не МенеджерЗаписи.ЕстьФайлы Тогда
		МенеджерЗаписи.ЕстьФайлы = Истина;
	КонецЕсли;
	
	Если ПустаяСтрока(МенеджерЗаписи.ИдентификаторОбъекта) Тогда
		МенеджерЗаписи.ИдентификаторОбъекта = "0000000000";
	КонецЕсли;
	
	Если МенеджерЗаписи.Модифицированность() Тогда
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Снимает признак наличия присоединенных файлов для объекта ИС, если их нет в самой ИС. Вызывается при
// удалении связи с объектом ДО и при фоновом обновлении.
//
// Параметры:
//   ID - Строка - идентификатор объекта Документооборота.
//   Тип - Строка - XDTO-тип объекта Документооборота.
//   ОбъектИС - ОпределяемыйТип.ВладелецПрисоединенныхФайлов - объект ИС.
//
Процедура ПриУдаленииПрисоединенныхФайловДокументооборота(ID, Тип, ОбъектИС) Экспорт
	
	СтандартнаяОбработка = Истина;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПриУдаленииПрисоединенныхФайловДокументооборота(
		ID, Тип, ОбъектИС, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбъектИС) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами")
			Или Не ИспользоватьПрисоединенныеФайлы1СДокументооборота() Тогда
		Возврат;
	КонецЕсли;
	
	ВладелецПрисоединенныхФайлов = Метаданные.ОпределяемыеТипы.Найти("ВладелецПрисоединенныхФайлов");
	Если Не ВладелецПрисоединенныхФайлов.Тип.СодержитТип(ТипЗнч(ОбъектИС)) Тогда
		Возврат;
	КонецЕсли;
	
	МассивФайлов = Новый Массив;
	МодульРаботаСФайлами = ОбщегоНазначения.ОбщийМодуль("РаботаСФайлами");
	МодульРаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(ОбъектИС, МассивФайлов);
	
	Если МассивФайлов.Количество() <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Удалим запись.
	МодульНаличиеФайлов = ОбщегоНазначения.ОбщийМодуль("РегистрыСведений.НаличиеФайлов");
	МенеджерЗаписи = МодульНаличиеФайлов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ОбъектСФайлами = ОбъектИС;
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.ЕстьФайлы = Ложь;
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Возвращает расширение по типу файла сохраняемой печатной формы.
//
// Параметры:
//   ТипФайла - ПеречислениеСсылка.ТипыФайловСохраненияПечатныхФормОбъектов - тип сохраняемого файла.
//
// Возвращаемое значение:
//   Строка - расширение файла.
//
Функция РасширениеСохраняемойПечатнойФормы(ТипФайла) Экспорт
	
	Если ТипФайла = ПредопределенноеЗначение("Перечисление.ТипыФайловСохраненияПечатныхФормОбъектов.PDF_A_1") Тогда
		Возврат "pdf";
		
	ИначеЕсли ЗначениеЗаполнено(ТипФайла) Тогда
		Возврат НРег(ОбщегоНазначения.ИмяЗначенияПеречисления(ТипФайла));
		
	Иначе
		Возврат "";
		
	КонецЕсли
	
КонецФункции

// Возвращает запрос для создания файла в Документообороте.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ФайлXDTO - ОбъектXDTO - объект XDTO типа DMFile.
//   ВладелецID - Строка - идентификатор владельца файла в Документообороте.
//   ВладелецТип - Строка - тип владельца файла в Документообороте.
//   ВладелецПредставление - Строка - представление владельца файла в Документообороте.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMAddFileRequest.
//
Функция СоздатьФайлЗапрос(Прокси, ФайлXDTO, ВладелецID, ВладелецТип, ВладелецПредставление = "") Экспорт
	
	Запрос = СоздатьОбъект(Прокси, "DMAddFileRequest");
	
	ОбъектВладелец = СоздатьОбъект(Прокси, "DMObject");
	ОбъектВладелец.objectID = СоздатьObjectID(Прокси, ВладелецID, ВладелецТип);
	ОбъектВладелец.name = ВладелецПредставление;
	
	Запрос.owner = ОбъектВладелец;
	
	Запрос.file = ФайлXDTO;
	
	Возврат Запрос;
	
КонецФункции

// Возвращает тип файла сохраняемой печатной формы по умолчанию.
//
// Возвращаемое значение:
//   ПеречислениеСсылка.ТипыФайловСохраненияПечатныхФормОбъектов - тип по умолчанию.
//
Функция ТипФайлаСохраняемойПечатнойФормыПоУмолчанию() Экспорт
	
	Возврат Перечисления.ТипыФайловСохраненияПечатныхФормОбъектов.PDF_A_1;
	
КонецФункции

// Создает и заполняет объект XDTO типа DMFile по данным из параметров создания.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ПараметрыСоздания - Структура - ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.НовыеПараметрыСозданияФайла
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMFile.
//
Функция ФайлXDTOИзПараметровСоздания(Прокси, ПараметрыСоздания) Экспорт
	
	ФайлXDTO = СоздатьОбъект(Прокси, "DMFile");
	ФайлXDTO.objectID = СоздатьObjectID(Прокси, "", "DMFile");
	
	Если ЗначениеЗаполнено(ПараметрыСоздания.ВнешнийОбъект.ID) Тогда
		ФайлXDTO.externalObject = СоздатьExternalObject(
			Прокси,,
			ПараметрыСоздания.ВнешнийОбъект.ID,
			ПараметрыСоздания.ВнешнийОбъект.type,
			ПараметрыСоздания.ВнешнийОбъект.name);
	КонецЕсли;
	
	ФайлXDTO.name = ПараметрыСоздания.ТекущийФайл.Наименование;
	ФайлXDTO.extension = ПараметрыСоздания.ТекущийФайл.Расширение;
	
	Если ЗначениеЗаполнено(ПараметрыСоздания.АдресВременногоХранилищаФайла) Тогда
		
		ФайлXDTO.description = ПараметрыСоздания.ТекущийФайл.Описание;
		ФайлXDTO.modificationDate = ПараметрыСоздания.ТекущийФайл.ДатаМодификации;
		ФайлXDTO.modificationDateUniversal = ПараметрыСоздания.ТекущийФайл.ДатаМодификацииУниверсальная;
		ФайлXDTO.size = ПараметрыСоздания.ТекущийФайл.Размер;
		ФайлXDTO.scannedOriginal = ПараметрыСоздания.ЯвляетсяСканКопией;
		
		ФайлXDTO.binaryData = ПолучитьИзВременногоХранилища(ПараметрыСоздания.АдресВременногоХранилищаФайла);
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.РазмерФайлаПревышаетМаксимальноДопустимый(
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.МаксимальныйРазмерПередаваемогоФайла(),
			ФайлXDTO.binaryData.Размер(),
			ПараметрыСоздания.ТекущийФайл.Наименование);
		
	ИначеЕсли ЗначениеЗаполнено(ПараметрыСоздания.ШаблонID) Тогда
		
		ФайлШаблон = СоздатьОбъект(Прокси, "DMFile");
		ФайлШаблон.objectID = СоздатьObjectID(Прокси, ПараметрыСоздания.ШаблонID, "DMFile");
		ФайлШаблон.name = ПараметрыСоздания.ТекущийФайл.Наименование;
		
		ФайлXDTO.template = ФайлШаблон;
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(ПараметрыСоздания.ТекущийФайл.Текст) Тогда
		ФайлXDTO.text = ПараметрыСоздания.ТекущийФайл.Текст;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыСоздания.ТекущийФайл.РольФайлаID) И СвойствоСуществует(ФайлXDTO, "role") Тогда
		ФайлXDTO.role = СоздатьОбъект(Прокси, "DMFileRole");
		ФайлXDTO.role.name = "";
		ФайлXDTO.role.objectID = СоздатьObjectID(Прокси, ПараметрыСоздания.ТекущийФайл.РольФайлаID, "DMFileRole");
	КонецЕсли;
	
	Возврат ФайлXDTO;
	
КонецФункции

#КонецОбласти

#Область ПроцессыИЗадачи

// Заполняет объект XDTO, описывающий полную роль.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ПолнаяРольXDTO - ОбъектXDTO - объект XDTO типа DMCompleteRole.
//   Роль - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО
//   ОсновнойОбъектАдресации - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО
//   ДополнительныйОбъектАдресации - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО
//
Процедура ЗаполнитьПолнуюРоль(Прокси, ПолнаяРольXDTO, Роль, ОсновнойОбъектАдресации = Неопределено,
		ДополнительныйОбъектАдресации = Неопределено) Экспорт
	
	ПолнаяРольXDTO.role = СоздатьОбъект(Прокси, "DMBusinessProcessExecutorRole");
	ПолнаяРольXDTO.role.name = Роль.Наименование;
	ПолнаяРольXDTO.role.objectID = СоздатьObjectID(Прокси, Роль.ID, Роль.Тип);
	
	Если ЗначениеЗаполнено(ОсновнойОбъектАдресации) Тогда
		ПолнаяРольXDTO.mainAddressingObject = СоздатьОбъект(Прокси, "DMMainAddressingObject");
		ПолнаяРольXDTO.mainAddressingObject.name = ОсновнойОбъектАдресации.Наименование;
		ПолнаяРольXDTO.mainAddressingObject.objectID =
			СоздатьObjectID(Прокси, ОсновнойОбъектАдресации.ID, ОсновнойОбъектАдресации.Тип);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДополнительныйОбъектАдресации) Тогда
		ПолнаяРольXDTO.secondaryAddressingObject = СоздатьОбъект(Прокси, "DMSecondaryAddressingObject");
		ПолнаяРольXDTO.secondaryAddressingObject.name = ДополнительныйОбъектАдресации.Наименование;
		ПолнаяРольXDTO.secondaryAddressingObject.objectID =
			СоздатьObjectID(Прокси, ДополнительныйОбъектАдресации.ID, ДополнительныйОбъектАдресации.Тип);
	КонецЕсли;
	
КонецПроцедуры

// Формирует объект XDTO, описывающий участника задачи.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Исполнитель - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО
//   ОсновнойОбъектАдресации - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО
//   ДополнительныйОбъектАдресации - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMTaskParticipant.
//
Функция УчастникЗадач(Прокси, Исполнитель, ОсновнойОбъектАдресации = Неопределено,
		ДополнительныйОбъектАдресации = Неопределено) Экспорт
	
	Настройки = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИспользоватьИнтеграцию();
	
	Если Настройки.ИспользоватьИнтеграциюДО2 Тогда
		МодульИнтеграцияС1СДокументооборот = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияС1СДокументооборот");
		УчастникЗадач = МодульИнтеграцияС1СДокументооборот.УчастникЗадач(
			Прокси,
			Исполнитель,
			ОсновнойОбъектАдресации,
			ДополнительныйОбъектАдресации);
	ИначеЕсли Настройки.ИспользоватьИнтеграциюДО3 Тогда
		МодульИнтеграцияС1СДокументооборот3 = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияС1СДокументооборот3");
		УчастникЗадач = МодульИнтеграцияС1СДокументооборот3.УчастникЗадачXDTO(
			Прокси,
			Исполнитель,
			ОсновнойОбъектАдресации,
			ДополнительныйОбъектАдресации);
	КонецЕсли;
	
	Возврат УчастникЗадач;
	
КонецФункции

#КонецОбласти

#Область АвторизацияЧерезJWTТокены

// Возвращает URI пространства имен веб-сервиса 1С:Документооборот.
//
// Возвращаемое значение:
//   Строка
//
Функция URIПространстваИменВебСервисаДокументооборота() Экспорт
	
	Возврат "http://www.1c.ru/dm";
	
КонецФункции

// Возвращает имя веб-сервиса 1С:Документооборот.
//
// Возвращаемое значение:
//   Строка
//
Функция ИмяВебСервисаДокументооборота() Экспорт
	
	Возврат "DMService";
	
КонецФункции

// Возвращает ключ сопоставления пользователя, который будет передан в токена доступа.
// Ключ зависит от текущих настроек, это может быть имя пользователя ИБ или пользователь ОС.
//
// Возвращаемое значение:
//   Строка
//
Функция КлючСопоставленияПользователяТокенаДоступа() Экспорт
	
	КлючСопоставленияПользователя = "";
	
	ТекущийПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	Ключ = Константы.КлючСопоставленияПользователей1СДокументооборот.Получить();
	Если Ключ = Перечисления.КлючиСопоставленияПользователей1СДокументооборот.ИмяПользователяИБ Тогда
		КлючСопоставленияПользователя = ТекущийПользовательИБ.Имя;
	ИначеЕсли Ключ = Перечисления.КлючиСопоставленияПользователей1СДокументооборот.ПользовательОС Тогда
		КлючСопоставленияПользователя = СтрЗаменить(ТекущийПользовательИБ.ПользовательОС, "\\", "");
	КонецЕсли;
	
	Возврат КлючСопоставленияПользователя;
	
КонецФункции

// Возвращает структуру параметров, необходимую для формирования токена доступа.
//
// Возвращаемое значение:
//   Структура:
//     * Эмитент - Строка
//     * ВремяСоздания - Число
//     * ВремяЖизни - Число
//     * Идентификатор - УникальныйИдентификатор
//     * Получатели - Массив из Строка
//     * КлючСопоставленияПользователя - Строка
//
Функция ПараметрыТокенаДоступа() Экспорт
	
	// Время на сервере ДО и ИС может отличаться. Если время создания токена, полученное на сервере ИС,
	// будет больше чем текущее время на сервере ДО - авторизация не пройдет. Для исключения небольших
	// отклонений времени установим смещение в 1 минуту.
	СмещениеВремени = 60;
	
	Параметры = Новый Структура;
	Параметры.Вставить("Эмитент", ЭмитентТокенаДоступа());
	Параметры.Вставить("ВремяСоздания", Число(ТекущаяУниверсальнаяДата() - Дата(1970, 1, 1, 0, 0, 0) - СмещениеВремени));
	Параметры.Вставить("ВремяЖизни",
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ВремяЖизниТокенаДоступа() + СмещениеВремени);
	Параметры.Вставить("Идентификатор", Новый УникальныйИдентификатор);
	Параметры.Вставить("Получатели", ПолучателиТокенаДоступа());
	Параметры.Вставить("КлючСопоставленияПользователя", КлючСопоставленияПользователяТокенаДоступа());
	
	Возврат Параметры;
	
КонецФункции

// Возвращает массив получателей, необходимый для формирования токена доступа.
//
// Возвращаемое значение:
//   Массив из Строка
//
Функция ПолучателиТокенаДоступа() Экспорт
	
	МассивПолучателей = Новый Массив;
	МассивПолучателей.Добавить("dmil");
	
	Возврат МассивПолучателей;
	
КонецФункции

// Возвращает псевдоним веб-сервиса 1С:Документооборот.
//
// Возвращаемое значение:
//   Строка
//
Функция ПсевдонимВебСервисаДокументооборота() Экспорт
	
	Возврат "dm.1cws";
	
КонецФункции

// Формирует текстовое представление JWT-токена для аутентификации в веб-сервисе Документооборота.
//
// Возвращаемое значение:
//   Строка
//
Функция ТекстТокенаДоступа() Экспорт
	
	ТекстТокенаДоступа = "";
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПриПолученииТокенаДоступа(ТекстТокенаДоступа);
	
	Если ТекстТокенаДоступа = "" И КлючСопоставленияПользователяТокенаДоступа() <> "" Тогда
		ТокенДоступа = Новый ТокенДоступа;
		ЗаполнитьЗначенияСвойств(ТокенДоступа, ПараметрыТокенаДоступа());
		КлючПодписиТокена = Константы.КлючПодписиТокенаДоступа1СДокументооборот.Получить();
		ТокенДоступа.Подписать(АлгоритмПодписиТокенаДоступа.HS256, КлючПодписиТокена);
		ТекстТокенаДоступа = Строка(ТокенДоступа);
	КонецЕсли;
	
	Возврат ТекстТокенаДоступа;
	
КонецФункции

// Возвращает эмитента, необходимого для формирования токена доступа.
//
// Возвращаемое значение:
//   Строка
//
Функция ЭмитентТокенаДоступа() Экспорт
	
	Возврат "ssl";
	
КонецФункции

#КонецОбласти

#Область ЭлектронныеПодписи

// Преобразует таблицу подписей на форме в массив структурированных данных подписей.
//
// Параметры:
//   ТаблицаПодписей - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.СтруктураСтрокиДереваПодписей
//
// Возвращаемое значение:
//   Массив из см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеПодписи
//
Функция ДанныеПодписей(ТаблицаПодписей) Экспорт
	
	МассивДанныхПодписей = Новый Массив; // подписи, оставшиеся после удаления
	
	// формируем массив данных подписи.
	Для Каждого ДанныеСтроки Из ТаблицаПодписей Цикл
		
		ДвоичныеДанныеСертификата = Неопределено;
		Если ЗначениеЗаполнено(ДанныеСтроки.АдресСертификата) Тогда
			ДвоичныеДанныеСертификата = ПолучитьИзВременногоХранилища(ДанныеСтроки.АдресСертификата);
		КонецЕсли;
		ДанныеПодписи = ДанныеПодписи(
			ПолучитьИзВременногоХранилища(ДанныеСтроки.АдресПодписи),
			ДвоичныеДанныеСертификата,
			ДанныеСтроки);
		МассивДанныхПодписей.Добавить(ДанныеПодписи);
		
	КонецЦикла;
	
	Возврат МассивДанныхПодписей;
	
КонецФункции

// Возвращает данные, из которых будет формироваться XDTO объект DMSignature, для передачи в ДО.
//
// Параметры:
//   Подпись - ДвоичныеДанные - двоичные данные подписи.
//   ДвоичныеДанныеСертификата - ДвоичныеДанные - двоичные данные сертификата.
//   СвойстваПодписи - Структура - тут может быть или структура СвойстваПодписи, которую возвращает БСП при
//     добавлении новой подписи, или строка таблицы подписей, если это уже существующая на стороне ДО подпись.
//
// Возвращаемое значение:
//   см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеПодписи
//
Функция ДанныеПодписи(Подпись, ДвоичныеДанныеСертификата, СвойстваПодписи) Экспорт
	
	ДанныеПодписи = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеПодписи(
		Подпись,
		ДвоичныеДанныеСертификата,
		СвойстваПодписи);
	ДанныеПодписи.Сертификат = Новый ХранилищеЗначения(ДвоичныеДанныеСертификата);
	
	Возврат ДанныеПодписи;
	
КонецФункции

// Проверяет подписи из массива ВыделенныеСтроки. Если массив выделенных строк не передан - проверяет все
// подписи из таблицы подписей.
//
// Параметры:
//   МенеджерКриптографии - МенеджерКриптографии - объект Менеджера криптографии.
//   ТаблицаПодписей - Массив из см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.СтруктураСтрокиДереваПодписей
//   ВыделенныеПодписи - Массив из см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыделенныеПодписи
//   АдресСлепкаДокумента - Строка - адрес временного хранилища двоичных данных документа Документооборота.
//
Процедура ПроверитьПодписи(МенеджерКриптографии, ТаблицаПодписей, ВыделенныеПодписи = Неопределено,
		АдресСлепкаДокумента = Неопределено) Экспорт
	
	СоответствиеИдОбъектаИДвоичныхДанных = Новый Соответствие;
	
	Для Каждого ДанныеСтроки Из ТаблицаПодписей Цикл
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ПодписьВыделена(
				ВыделенныеПодписи, ДанныеСтроки) Тогда
			ПроверитьОднуПодпись(
				ДанныеСтроки,
				МенеджерКриптографии,
				СоответствиеИдОбъектаИДвоичныхДанных,
				АдресСлепкаДокумента);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область УстаревшиеПроцедурыИФункции

// Устарела. Следует использовать
// ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗначениеРеквизитаОбъектаИСПоЗначениюДляЗаполнения.
// Возвращает значение реквизита объекта ИС по значению реквизита объекта ДО.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - исходный объект, соответствие которому нужно найти.
//   ТипРеквизитаОбъектаИС - Тип - тип заполняемого реквизита объекта ИС.
//   ИмяРеквизитаОбъектаИС - Строка - имя заполняемого реквизита объекта ИС.
//   ТипЗаполняемогоОбъектаИС - Тип - тип заполняемого объекта ИС.
//   ЗаполняемыйОбъектИС - Произвольный - заполняемый объект ИС.
//   ЭтоДополнительныйРеквизитИС - Булево - истина, если заполняемый реквизит объекта ИС является доп. свойством.
//   ДополнительныйРеквизитИС - ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения - свойство-владелец.
//   ПараметрыВыбора - Соответствие из КлючИЗначение - параметры выбора:
//     * Ключ - Строка - имя параметра вида "Отбор.Владелец".
//     * Значение - Произвольный - значение параметра (отбора).
//   СоздаватьЕслиНеНайден - Булево - автоматически создавать новый элемент справочника ИС, в случае,
//     если не удалось подобрать существующий элемент по значению реквизита объекта ДО.
//
// Возвращаемое значение:
//   ЛюбаяСсылка - ссылка на найденный или созданный объект.
//
Функция ЗначениеРеквизитаПоОбъектуXDTO(ОбъектXDTO, ТипРеквизитаОбъектаИС, ИмяРеквизитаОбъектаИС = Неопределено,
		ТипЗаполняемогоОбъектаИС = Неопределено, ЗаполняемыйОбъектИС = Неопределено, ЭтоДополнительныйРеквизитИС = Ложь,
		ДополнительныйРеквизитИС = Неопределено, ПараметрыВыбора = Неопределено, СоздаватьЕслиНеНайден = Истина) Экспорт
	
	// Сформируем значение для заполнения.
	ЗначениеДляЗаполнения = ЗначениеДляЗаполненияРеквизитаОбъектаИС(ОбъектXDTO);
	
	Если ЭтоДополнительныйРеквизитИС
		И (ТипРеквизитаОбъектаИС = Тип("СправочникСсылка.ЗначенияСвойствОбъектов")
			Или ТипРеквизитаОбъектаИС = Тип("СправочникСсылка.ЗначенияСвойствОбъектовИерархия")) Тогда
		ЗначениеДляЗаполнения.Владелец = ДополнительныйРеквизитИС;
	ИначеЕсли ПараметрыВыбора <> Неопределено Тогда
		ЗначениеДляЗаполнения.Владелец = ПараметрыВыбора["Отбор.Владелец"];
	Иначе
		ЗначениеДляЗаполнения.Владелец = Неопределено;
	КонецЕсли;
	
	// Сформируем контекст.
	Контекст = КонтекстДляЗаполненияРеквизитаОбъектаИС();
	Контекст.ЗаполняемыйОбъектИС = ЗаполняемыйОбъектИС;
	Контекст.ИмяРеквизитаОбъектаИС = ИмяРеквизитаОбъектаИС;
	Контекст.ЭтоДополнительныйРеквизитИС = ЭтоДополнительныйРеквизитИС;
	Контекст.ДополнительныйРеквизитИС = ДополнительныйРеквизитИС;
	Контекст.ПараметрыВыбора = ПараметрыВыбора;
	
	Возврат ЗначениеРеквизитаОбъектаИСПоЗначениюДляЗаполнения(
		ТипРеквизитаОбъектаИС,
		ЗначениеДляЗаполнения,
		Контекст,
		СоздаватьЕслиНеНайден);
	
КонецФункции


// Обработчик регламентного задания УдалитьИнтеграцияС1СДокументооборотВыполнитьОбменДанными.
//
Процедура УдалитьИнтеграцияС1СДокументооборотВыполнитьОбменДанными() Экспорт
	
	ВызватьИсключение НСтр("ru = 'Регламентное задание не используется'");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбменДанными

Функция ЗапросНаОтправкуСообщенияОбменаВДО(Прокси, Настройки)
	
	Если Настройки.ИспользоватьИнтеграциюДО2 Тогда
		ИмяЗапроса = "DMPutChangesRequest";
	ИначеЕсли Настройки.ИспользоватьИнтеграциюДО3 Тогда
		ИмяЗапроса = "DMUpdateFromIncomingDataRequest";
	КонецЕсли;
	
	Возврат СоздатьОбъект(Прокси, ИмяЗапроса);
	
КонецФункции

Функция НовыйОбъектИСИзОбъектаXDTO(МетаданныеОбъектаИС, ОбъектXDTO, ВышестоящийОбъектИС, СсылкаПоИдентификатору,
		Владелец)
	
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеОбъектаИС.ПолноеИмя());
	НовыйОбъект = Менеджер.СоздатьЭлемент(); // ОпределяемыйТип.ИнтеграцияС1СДокументооборотСправочникиОбъектыПереопределяемый
	НовыйОбъект.Наименование = ОбъектXDTO.name;
	Если ЗначениеЗаполнено(СсылкаПоИдентификатору) Тогда
		НовыйОбъект.УстановитьСсылкуНового(СсылкаПоИдентификатору);
	КонецЕсли;
	Если ЗначениеЗаполнено(Владелец) Тогда
		НовыйОбъект.Владелец = Владелец;
	КонецЕсли;
	
	ПриСозданииПоСсылке(НовыйОбъект, ОбъектXDTO, ВышестоящийОбъектИС);
	
	НовыйОбъект.Записать();
	
	НаличиеПрисоединенныхФайлов = Ложь; // Доп. запрос к ДО делать не требуется.
	Если СвойствоУстановлено(ОбъектXDTO, "files") Тогда
		НаличиеПрисоединенныхФайлов = (ОбъектXDTO.files.Количество() > 0);
	КонецЕсли;
	РегистрыСведений.ОбъектыИнтегрированныеС1СДокументооборотом.ДобавитьСвязь(
		ОбъектXDTO.objectID.ID,
		ОбъектXDTO.objectID.type,
		НовыйОбъект.Ссылка,
		НаличиеПрисоединенныхФайлов);
	
	Возврат НовыйОбъект.Ссылка;
	
КонецФункции

// Обновляет печатные формы объекта ДО после изменения объекта ИС.
//
Процедура ОбновитьПечатныеФормы(Прокси, Настройки)
	
	Если Настройки.ИспользоватьИнтеграциюДО2 Тогда
		
		МодульИнтеграцияС1СДокументооборот = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияС1СДокументооборот");
		
	ИначеЕсли Настройки.ИспользоватьИнтеграциюДО3 Тогда
		
		МодульИнтеграцияС1СДокументооборот3 = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияС1СДокументооборот3");
		Если Не МодульИнтеграцияС1СДокументооборот3.ДоступенФункционалФайлов() Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗапросОбъекты = Новый Запрос(
		"ВЫБРАТЬ
		|	ОбъектыКОбновлениюПечатныхФорм.Объект КАК Объект,
		|	ОбъектыКОбновлениюПечатныхФорм.Правило КАК Правило,
		|	ОбъектыИнтегрированныеС1СДокументооборотом.ТипОбъектаДО КАК ТипОбъектаДО,
		|	ОбъектыИнтегрированныеС1СДокументооборотом.ИдентификаторОбъектаДО КАК ИдентификаторОбъектаДО
		|ИЗ
		|	РегистрСведений.ОбъектыКОбновлениюПечатныхФорм КАК ОбъектыКОбновлениюПечатныхФорм
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыИнтегрированныеС1СДокументооборотом КАК ОбъектыИнтегрированныеС1СДокументооборотом
		|		ПО ОбъектыКОбновлениюПечатныхФорм.Объект = ОбъектыИнтегрированныеС1СДокументооборотом.Объект
		|ГДЕ
		|	ОбъектыКОбновлениюПечатныхФорм.Правило ССЫЛКА Справочник.ПравилаИнтеграцииС1СДокументооборотом");
	Если Настройки.ИспользоватьИнтеграциюДО3 Тогда
		ЗапросОбъекты.Текст = СтрЗаменить(
			ЗапросОбъекты.Текст,
			"ОбъектыКОбновлениюПечатныхФорм.Правило ССЫЛКА Справочник.ПравилаИнтеграцииС1СДокументооборотом",
			"ОбъектыКОбновлениюПечатныхФорм.Правило ССЫЛКА Справочник.ПравилаИнтеграцииС1СДокументооборотом3");
	КонецЕсли;
	ОбъектыКОбновлениюПечатныхФорм = ЗапросОбъекты.Выполнить().Выгрузить();
	
	Если ОбъектыКОбновлениюПечатныхФорм.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = СоздатьОбъект(Прокси, "DMUpdateFilesRequest");
	ОбщийРазмерСообщений = 0;
	ПредельныйРазмерСообщений =
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.МаксимальныйРазмерПередаваемогоФайла();
	
	Если Настройки.ИспользоватьИнтеграциюДО2 Тогда
		
		ЗапросДанныеПравил = Новый Запрос;
		ТекстЗапроса =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ОбъектыКОбновлениюПечатныхФорм.Правило КАК Правило
			|ПОМЕСТИТЬ ВТПравила
			|ИЗ
			|	РегистрСведений.ОбъектыКОбновлениюПечатныхФорм КАК ОбъектыКОбновлениюПечатныхФорм
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТПравила.Правило КАК Правило,
			|	ПравилаИнтеграцииС1СДокументооборотом.ТипФайловСохраненияПечатныхФорм КАК ТипФайловСохраненияПечатныхФорм,
			|	ПравилаИнтеграцииС1СДокументооборотом.ПрисоединяемыеПечатныеФормы.(
			|		Ссылка КАК Ссылка,
			|		НомерСтроки КАК НомерСтроки,
			|		ИмяКоманды КАК ИмяКоманды,
			|		МенеджерПечати КАК МенеджерПечати,
			|		ДополнительныеПараметры КАК ДополнительныеПараметры,
			|		Обновлять КАК Обновлять,
			|		ПредставлениеКоманды КАК ПредставлениеКоманды
			|	) КАК ПрисоединяемыеПечатныеФормы
			|ИЗ
			|	ВТПравила КАК ВТПравила
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаИнтеграцииС1СДокументооборотом КАК ПравилаИнтеграцииС1СДокументооборотом
			|		ПО ВТПравила.Правило = ПравилаИнтеграцииС1СДокументооборотом.Ссылка";
		ЗапросДанныеПравил.Текст = ТекстЗапроса;
		Выборка = ЗапросДанныеПравил.Выполнить().Выбрать();
		
		СоответствиеПечатныхФормПравилам = Новый Соответствие;
		ТипыФайловПечатныхФорм = Новый Соответствие;
		
		Пока Выборка.Следующий() Цикл
			СоответствиеПечатныхФормПравилам.Вставить(Выборка.Правило, Выборка.ПрисоединяемыеПечатныеФормы.Выгрузить());
			ТипыФайловПечатныхФорм.Вставить(Выборка.Правило, Выборка.ТипФайловСохраненияПечатныхФорм);
		КонецЦикла;
		
	ИначеЕсли Настройки.ИспользоватьИнтеграциюДО3 Тогда
		
		СписокОбъектовИС = ОбъектыКОбновлениюПечатныхФорм.ВыгрузитьКолонку("Объект");
		ПодходящиеПравилаИнтеграции = Новый Соответствие;
		Для Каждого Строка Из ОбъектыКОбновлениюПечатныхФорм Цикл
			ПодходящиеПравилаИнтеграции.Вставить(
				Строка.Объект,
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Строка.Правило));
		КонецЦикла;
		
		СоответствиеПравилЗагрузкиВДООбъектамИС =
			МодульИнтеграцияС1СДокументооборот3.СоответствиеПравилЗагрузкиВДООбъектамИС(
				Прокси,
				СписокОбъектовИС,
				ПодходящиеПравилаИнтеграции);
		ПредварительныеДанные = МодульИнтеграцияС1СДокументооборот3.ПредварительныеДанныеДляВыгрузкиВДО(
			Прокси,
			СписокОбъектовИС,
			СоответствиеПравилЗагрузкиВДООбъектамИС,
			Ложь);
		СоответствиеПечатныхФормОбъектамИС = ПредварительныеДанные.СоответствиеПечатныхФормОбъектамИС;
		ТипыФайловПечатныхФорм = ПредварительныеДанные.ТипыФайловПечатныхФорм;
		
	КонецЕсли;
	
	КонтрольОтправкиФайлов = КонтрольОтправкиФайлов();
	
	Для Каждого Строка Из ОбъектыКОбновлениюПечатныхФорм Цикл
		
		МенеджерЗаписи = РегистрыСведений.ОбъектыКОбновлениюПечатныхФорм.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Объект = Строка.Объект;
		МенеджерЗаписи.Удалить();
		
		Если Настройки.ИспользоватьИнтеграциюДО2 Тогда
			
			ПрисоединяемыеПечатныеФормы = МодульИнтеграцияС1СДокументооборот.ПрисоединяемыеПечатныеФормы(
				СоответствиеПечатныхФормПравилам[Строка.Правило]);
			ТипФайловСохраненияПечатныхФорм = ТипыФайловПечатныхФорм[Строка.Правило];
			
		ИначеЕсли Настройки.ИспользоватьИнтеграциюДО3 Тогда
			
			ПрисоединяемыеПечатныеФормы = МодульИнтеграцияС1СДокументооборот3.ПрисоединяемыеПечатныеФормы(
				СоответствиеПечатныхФормОбъектамИС[Строка.Объект]);
			ТипФайловСохраненияПечатныхФорм =
				Перечисления.ТипыФайловСохраненияПечатныхФормОбъектов[ТипыФайловПечатныхФорм[Строка.Объект]];
			
		КонецЕсли;
		
		ПечатныеФормыКСозданию = ПечатныеФормыКСозданию(
			Строка.Объект,
			ПрисоединяемыеПечатныеФормы,
			ТипФайловСохраненияПечатныхФорм,
			КонтрольОтправкиФайлов,
			Истина);
		
		Если ПечатныеФормыКСозданию.Количество() = 0
				Или Не ОбъектДОПоддерживаетФайлы(Прокси, Строка.ТипОбъектаДО) Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектXDTO = СоздатьОбъект(Прокси, Строка.ТипОбъектаДО);
		СписокФайлов = ОбъектXDTO.files; // СписокXDTO
		
		ОбъектXDTO.name = Строка(Строка.Объект);
		ОбъектXDTO.objectID = СоздатьObjectID(Прокси, Строка.ИдентификаторОбъектаДО, Строка.ТипОбъектаДО);
		
		Для Каждого ПараметрыСоздания Из ПечатныеФормыКСозданию Цикл
			ФайлXDTO = ФайлXDTOИзПараметровСоздания(Прокси, ПараметрыСоздания);
			СписокФайлов.Добавить(ФайлXDTO);
			ОбщийРазмерСообщений = ОбщийРазмерСообщений + ПараметрыСоздания.ТекущийФайл.Размер;
		КонецЦикла;
		
		Запрос.objects.Добавить(ОбъектXDTO);
		
		Если ОбщийРазмерСообщений > ПредельныйРазмерСообщений И Запрос.objects.Количество() > 0 Тогда
			Результат = ВыполнитьЗапрос(Прокси, Запрос);
			ПроверитьВозвратВебСервиса(Прокси, Результат);
			Запрос = СоздатьОбъект(Прокси, "DMUpdateFilesRequest");
			ОбщийРазмерСообщений = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Запрос.objects.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ВыполнитьЗапрос(Прокси, Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Результат);
	
	Для Каждого Строка Из КонтрольОтправкиФайлов Цикл
		РегистрыСведений.КонтрольОтправкиФайловВ1СДокументооборот.СохранитьХешСуммуВерсииФайла(
			Строка.Источник,
			Строка.ИмяФайла,
			Строка.ТабличныйДокумент)
	КонецЦикла;
	
КонецПроцедуры

// Читает данные из очереди на отправку, и отправляет их в Документооборот.
//
Процедура ОтправитьДанные(Прокси, Настройки)
	
	Попытка
		
		ЗапросКБазе = Новый Запрос(
			"ВЫБРАТЬ
			|	ОчередьСообщенийВ1СДокументооборот.МоментВремени КАК МоментВремени,
			|	ОчередьСообщенийВ1СДокументооборот.Данные КАК Данные,
			|	ОчередьСообщенийВ1СДокументооборот.Идентификатор КАК Идентификатор
			|ИЗ
			|	РегистрСведений.ОчередьСообщенийВ1СДокументооборот КАК ОчередьСообщенийВ1СДокументооборот
			|ГДЕ
			|	ОчередьСообщенийВ1СДокументооборот.КоличествоПопытокОтправки <= 3
			|
			|УПОРЯДОЧИТЬ ПО
			|	МоментВремени");
		
		Результат = ЗапросКБазе.Выполнить();
		
		Если Результат.Пустой() Тогда
			Возврат;
		КонецЕсли;
		
		Выборка = Результат.Выбрать();
		
	Исключение
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналаРегистрации(
				НСтр("ru = 'Отправка данных'", ОбщегоНазначения.КодОсновногоЯзыка())),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.РегистрыСведений.ОчередьСообщенийВ1СДокументооборот,,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	URIПространстваИменВебСервисаДокументооборота = URIПространстваИменВебСервисаДокументооборота();
	
	Пока Выборка.Следующий() Цикл
		
		ИдентификаторСообщения = Выборка.Идентификатор;
		
		Попытка
			
			Запрос = ЗапросНаОтправкуСообщенияОбменаВДО(Прокси, Настройки);
			СписокОбъектов = Запрос.objects; // СписокXDTO
			
			ДвоичныеДанные = Выборка.Данные.Получить(); // ДвоичныеДанные
			
			ИмяФайлаСообщенияОбмена = ПолучитьИмяВременногоФайла("xml");
			ДвоичныеДанные.Записать(ИмяФайлаСообщенияОбмена);
			
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.ОткрытьФайл(ИмяФайлаСообщенияОбмена);
			ЧтениеXML.Прочитать();
			ЧтениеXML.Прочитать();
			
			Пока ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Цикл
				// Выполняется последовательное чтение одного объекта за другим
				ТипXDTO = Прокси.ФабрикаXDTO.Тип(URIПространстваИменВебСервисаДокументооборота, ЧтениеXML.Имя);
				ОбъектXDTO = Прокси.ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипXDTO);
				СписокОбъектов.Добавить(ОбъектXDTO);
			КонецЦикла;
			
			ЧтениеXML = Неопределено;
			УдалитьФайлы(ИмяФайлаСообщенияОбмена);
			
			Результат = ВыполнитьЗапрос(Прокси, Запрос);
			ТекстСообщенияОбОшибке = ПроверитьРезультатОтправки(Прокси, Запрос, Результат, Настройки);
			
			Если ТекстСообщенияОбОшибке <> "" Тогда
				ВызватьИсключение ТекстСообщенияОбОшибке;
			Иначе
				РегистрыСведений.ИсторияОтправкиСообщенийВ1СДокументооборот.ПеренестиСообщениеВИсторию(
					Выборка.МоментВремени,
					ИдентификаторСообщения);
			КонецЕсли;
			
		Исключение
			
			ТекстСообщенияОбОшибке = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ЗаписьЖурналаРегистрации(
				ИмяСобытияЖурналаРегистрации(
					НСтр("ru = 'Отправка данных'", ОбщегоНазначения.КодОсновногоЯзыка())),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.РегистрыСведений.ОчередьСообщенийВ1СДокументооборот,
				Строка(ИдентификаторСообщения),
				ТекстСообщенияОбОшибке);
			
			МенеджерЗаписи = РегистрыСведений.ОчередьСообщенийВ1СДокументооборот.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.МоментВремени = Выборка.МоментВремени;
			МенеджерЗаписи.Идентификатор = ИдентификаторСообщения;
			МенеджерЗаписи.Прочитать();
			МенеджерЗаписи.КоличествоПопытокОтправки = МенеджерЗаписи.КоличествоПопытокОтправки + 1;
			МенеджерЗаписи.ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке;
			МенеджерЗаписи.Записать();
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьУстаревшиеДанные()
	
	СрокХраненияСообщенийВ1СДокументооборот = Константы.СрокХраненияСообщенийВ1СДокументооборот.Получить();
	Если СрокХраненияСообщенийВ1СДокументооборот = 0 Тогда
		// Срок не установим. Применим значение по-умолчанию.
		СрокХраненияСообщенийВ1СДокументооборот = 30;	// Дней
		Константы.СрокХраненияСообщенийВ1СДокументооборот.Установить(СрокХраненияСообщенийВ1СДокументооборот);
	КонецЕсли;
	
	КрайнийСрок = ТекущаяДатаСеанса() - СрокХраненияСообщенийВ1СДокументооборот * 24 * 60 * 60;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ОчередьСообщенийВ1СДокументооборот.МоментВремени КАК МоментВремени,
		|	ОчередьСообщенийВ1СДокументооборот.Идентификатор КАК Идентификатор
		|ИЗ
		|	РегистрСведений.ОчередьСообщенийВ1СДокументооборот КАК ОчередьСообщенийВ1СДокументооборот
		|ГДЕ
		|	ОчередьСообщенийВ1СДокументооборот.ДатаСоздания <= &КрайнийСрок
		|	И ОчередьСообщенийВ1СДокументооборот.КоличествоПопытокОтправки > 3
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсторияОтправкиСообщенийВ1СДокументооборот.МоментВремени КАК МоментВремени,
		|	ИсторияОтправкиСообщенийВ1СДокументооборот.Идентификатор КАК Идентификатор
		|ИЗ
		|	РегистрСведений.ИсторияОтправкиСообщенийВ1СДокументооборот КАК ИсторияОтправкиСообщенийВ1СДокументооборот
		|ГДЕ
		|	ИсторияОтправкиСообщенийВ1СДокументооборот.ДатаОтправки <= &КрайнийСрок");
	Запрос.УстановитьПараметр("КрайнийСрок", КрайнийСрок);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	УдалитьСообщения(МассивРезультатов[0].Выгрузить(), РегистрыСведений.ОчередьСообщенийВ1СДокументооборот);
	УдалитьСообщения(МассивРезультатов[1].Выгрузить(), РегистрыСведений.ИсторияОтправкиСообщенийВ1СДокументооборот);
	
КонецПроцедуры

// Готовит сообщения обмена в Документооборот и записывает их в очередь на отправку.
//
Процедура ПодготовитьДанныеДляОтправки(Прокси, Настройки,
		МодульИнтеграцияС1СДокументооборотОбмен, МодульИнтеграцияС1СДокументооборот3Обмен)
	
	УзелДокументооборота = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.УзелДокументооборота();
	
	// Выборка всех изменений для данной интегрированной системы
	ОбъектыКУдалениюИзРегистрацииИзменений = Новый Массив;
	ИнтегрированныеОбъекты = Новый Массив;
	Если Настройки.ИспользоватьИнтеграциюДО2 Тогда
		ИнтегрированныеОбъекты = МодульИнтеграцияС1СДокументооборотОбмен.ЗарегистрированныеДанные(
			Прокси,
			УзелДокументооборота,
			ОбъектыКУдалениюИзРегистрацииИзменений);
	ИначеЕсли Настройки.ИспользоватьИнтеграциюДО3 Тогда
		ИнтегрированныеОбъекты = МодульИнтеграцияС1СДокументооборот3Обмен.ЗарегистрированныеДанные(
			Прокси,
			УзелДокументооборота,
			ОбъектыКУдалениюИзРегистрацииИзменений);
	КонецЕсли;
	
	ПредельноеКоличествоОбъектовВСообщении = 10;
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПриОпределенииПредельногоКоличестваОбъектовВСообщенииОбмена(
		ПредельноеКоличествоОбъектовВСообщении);
	
	ПорцияОбъектов = Новый Массив;
	ОбъектовВПорции = 0;
	Для Каждого ИнтегрированныйОбъект Из ИнтегрированныеОбъекты Цикл
		Если ОбъектовВПорции >= ПредельноеКоличествоОбъектовВСообщении Тогда
			СформироватьСообщение(
				Прокси,
				ПорцияОбъектов,
				Настройки,
				МодульИнтеграцияС1СДокументооборотОбмен,
				МодульИнтеграцияС1СДокументооборот3Обмен,
				ОбъектыКУдалениюИзРегистрацииИзменений);
			ПорцияОбъектов = Новый Массив;
			ОбъектовВПорции = 0;
		КонецЕсли;
		ПорцияОбъектов.Добавить(ИнтегрированныйОбъект);
		ОбъектовВПорции = ОбъектовВПорции + 1;
	КонецЦикла;
	СформироватьСообщение(
		Прокси,
		ПорцияОбъектов,
		Настройки,
		МодульИнтеграцияС1СДокументооборотОбмен,
		МодульИнтеграцияС1СДокументооборот3Обмен,
		ОбъектыКУдалениюИзРегистрацииИзменений);
	
	Для Каждого ОбъектКУдалению Из ОбъектыКУдалениюИзРегистрацииИзменений Цикл
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелДокументооборота, ОбъектКУдалению);
	КонецЦикла;
	
КонецПроцедуры

Функция ПроверитьРезультатОтправки(Прокси, Запрос, Результат, Настройки)
	
	Если ПроверитьТип(Прокси, Результат, "DMError") Тогда
		Возврат СтрШаблон(
			"%1
			|%2",
			Результат.subject,
			Результат.description);
	КонецЕсли;
	
	Если Настройки.ИспользоватьИнтеграциюДО2 Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстСообщенияОбОшибке = "";
	
	ИмяКонфигурации = СокращенноеНаименованиеКонфигурации();
	
	МассивОшибок = Новый Массив;
	Для Каждого ОбъектXDTO Из Результат.objects Цикл
		Если ОбъектXDTO.success Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектИС = Неопределено;
		Для Каждого ОбъектЗапросаXDTO Из Запрос.objects Цикл
			Если ОбъектЗапросаXDTO.updatingObject.id = ОбъектXDTO.key.id
					И ОбъектЗапросаXDTO.updatingObject.type = ОбъектXDTO.key.type Тогда
				ОбъектИС = СсылкаИзUUID( ОбъектЗапросаXDTO.externalObject.type, ОбъектЗапросаXDTO.externalObject.ID);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		МассивОшибокОбъекта = Новый Массив;
		МассивОшибокОбъекта.Добавить(
			СтрШаблон(НСтр("ru = 'Ошибка на стороне 1С:Документооборот при получении сообщения обмена из %1:'"),
				ИмяКонфигурации));
		МассивОшибокОбъекта.Добавить(ОбъектXDTO.error.subject);
		МассивОшибокОбъекта.Добавить(ОбъектXDTO.error.description);
		
		Если ОбъектИС <> Неопределено Тогда
			МассивОшибокОбъекта.Добавить(
				СтрШаблон(НСтр("ru = 'Ссылка на объект %1, изменения которого отправляются в 1С:Документооборот: %2'"),
					ИмяКонфигурации,
					ПолучитьНавигационнуюСсылку(ОбъектИС)));
		КонецЕсли;
		
		МассивОшибок.Добавить(СтрСоединить(МассивОшибокОбъекта, Символы.ПС));
	КонецЦикла;
	
	Если МассивОшибок.Количество() > 0 Тогда
		ТекстСообщенияОбОшибке = СтрСоединить(
			МассивОшибок,
			"
			|
			|-----
			|
			|");
	КонецЕсли;
	
	Возврат ТекстСообщенияОбОшибке;
	
КонецФункции

// Вызывается при заполнении реквизита объекта ИС по значению реквизита объекта ДО.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Результат - Произвольный - заполняемое значение реквизита объекта ИС.
//   ТипРеквизитаОбъектаИС - Тип - тип заполняемого реквизита объекта ИС.
//   ЗначениеДляЗаполнения - см. ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗначениеДляЗаполненияРеквизитаОбъектаИС
//   Контекст - см. ИнтеграцияС1СДокументооборотБазоваяФункциональность.КонтекстДляЗаполненияРеквизитаОбъектаИС
//
Процедура ПриОпределенииЗначенияРеквизитаОбъектаИСПоЗначениюДляЗаполнения(Прокси, Результат, ТипРеквизитаОбъектаИС,
		ЗначениеДляЗаполнения, Контекст)
	
	ОбъектXDTO = ЗначениеДляЗаполнения;
	
	Если Результат = Неопределено И ЭтоОбъектноеЗначение(Прокси, ЗначениеДляЗаполнения.ЗначениеСвойства) Тогда
		
		ОбъектXDTO = ЗначениеДляЗаполнения.ЗначениеСвойства;
		
		Если ТипРеквизитаОбъектаИС = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ТипПользователи()
				И (ПроверитьТип(Прокси, ОбъектXDTO, "DMEmployee")
					Или ПроверитьТип(Прокси, ОбъектXDTO, "DMUser")) Тогда
			
			НаименованиеСотрудника = "";
			НаименованиеПользователя = "";
			НаименованиеФизЛица = "";
			ПользовательСотрудника = Неопределено;
			ФизическоеЛицо = Неопределено;
			
			Если ПроверитьТип(Прокси, ОбъектXDTO, "DMEmployee") Тогда
				НаименованиеСотрудника = ОбъектXDTO.name;
				Если СвойствоУстановлено(ОбъектXDTO, "user") Тогда
					НаименованиеПользователя = ОбъектXDTO.user.name;
					ПользовательСотрудника = ЗначениеРеквизитаОбъектаИСПоЗначениюДляЗаполнения(
						ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ТипПользователи(),
						ЗначениеДляЗаполненияРеквизитаОбъектаИС(ОбъектXDTO.user),
						Контекст,
						Ложь);
				КонецЕсли;
			ИначеЕсли ПроверитьТип(Прокси, ОбъектXDTO, "DMUser") Тогда
				НаименованиеПользователя = ОбъектXDTO.name;
			КонецЕсли;
			
			Если СвойствоУстановлено(ОбъектXDTO, "privatePerson") Тогда
				НаименованиеФизЛица = ОбъектXDTO.privatePerson.name;
				ФизическоеЛицо = ЗначениеРеквизитаОбъектаИСПоЗначениюДляЗаполнения(
					Метаданные.Справочники.Пользователи.Реквизиты.ФизическоеЛицо.Тип.Типы()[0],
					ЗначениеДляЗаполненияРеквизитаОбъектаИС(ОбъектXDTO.privatePerson),
					Контекст,
					Ложь);
			КонецЕсли;
			
			Запрос = Новый Запрос(
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	Пользователи.Ссылка КАК Ссылка,
				|	0 КАК Приоритет
				|ИЗ
				|	Справочник.Пользователи КАК Пользователи
				|ГДЕ
				|	Пользователи.Ссылка = &ПользовательСотрудника
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	Пользователи.Ссылка,
				|	1
				|ИЗ
				|	Справочник.Пользователи КАК Пользователи
				|ГДЕ
				|	&ПереданоФизическоеЛицо = ИСТИНА
				|	И Пользователи.ФизическоеЛицо = &ФизическоеЛицо
				|	И НЕ Пользователи.ПометкаУдаления
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	Пользователи.Ссылка,
				|	2
				|ИЗ
				|	Справочник.Пользователи КАК Пользователи
				|ГДЕ
				|	Пользователи.Наименование = &НаименованиеПользователя
				|	И НЕ Пользователи.ПометкаУдаления
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	Пользователи.Ссылка,
				|	3
				|ИЗ
				|	Справочник.Пользователи КАК Пользователи
				|ГДЕ
				|	Пользователи.Наименование = &НаименованиеФизЛица
				|	И НЕ Пользователи.ПометкаУдаления
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	Пользователи.Ссылка,
				|	4
				|ИЗ
				|	Справочник.Пользователи КАК Пользователи
				|ГДЕ
				|	Пользователи.Наименование = &НаименованиеСотрудника
				|	И НЕ Пользователи.ПометкаУдаления
				|
				|УПОРЯДОЧИТЬ ПО
				|	Приоритет");
			Запрос.УстановитьПараметр("ПользовательСотрудника", ПользовательСотрудника);
			Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
			Запрос.УстановитьПараметр("ПереданоФизическоеЛицо", ЗначениеЗаполнено(ФизическоеЛицо));
			Запрос.УстановитьПараметр("НаименованиеПользователя", НаименованиеПользователя);
			Запрос.УстановитьПараметр("НаименованиеФизЛица", НаименованиеФизЛица);
			Запрос.УстановитьПараметр("НаименованиеСотрудника", НаименованиеСотрудника);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Результат = Выборка.Ссылка;
			КонецЕсли;
			
		ИначеЕсли ТипРеквизитаОбъектаИС = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ТипПользователи()
				И (ОбъектXDTO.objectID.type = "DMParty"
					Или ОбъектXDTO.objectID.type = "DMPartyRowContact"
					Или ПроверитьТип(Прокси, ОбъектXDTO, "DMParty")
					Или ПроверитьТип(Прокси, ОбъектXDTO, "DMPartyRowContact")) Тогда
			
			ПользовательXDTO = Неопределено;
			Настройки = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИспользоватьИнтеграцию();
			Если Настройки.ИспользоватьИнтеграциюДО2
					И СвойствоУстановлено(ОбъектXDTO, "user") Тогда
				ПользовательXDTO = ОбъектXDTO.user;
			ИначеЕсли Настройки.ИспользоватьИнтеграциюДО3
					И СвойствоУстановлено(ОбъектXDTO, "employee") Тогда
				ПользовательXDTO = ОбъектXDTO.employee;
			КонецЕсли;
			
			Если ПользовательXDTO <> Неопределено Тогда
				Результат = ЗначениеРеквизитаОбъектаИСПоЗначениюДляЗаполнения(
					ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ТипПользователи(),
					ЗначениеДляЗаполненияРеквизитаОбъектаИС(ПользовательXDTO),
					Контекст,
					Ложь);
			КонецЕсли;
			
		ИначеЕсли ТипРеквизитаОбъектаИС = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ТипВалюты()
				И ПроверитьТип(Прокси, ОбъектXDTO, "DMCurrency") Тогда
			
			Наименование = ОбъектXDTO.name;
			Код = "";
			НаименованиеПолное = "";
			
			Если СвойствоУстановлено(ОбъектXDTO, "code") Тогда
				Код = ОбъектXDTO.code;
			КонецЕсли;
			Если СвойствоУстановлено(ОбъектXDTO, "fullName") Тогда
				НаименованиеПолное = ОбъектXDTO.fullName;
			КонецЕсли;
			
			Запрос = Новый Запрос(
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	Валюты.Ссылка КАК Ссылка,
				|	0 КАК Приоритет
				|ИЗ
				|	Справочник.Валюты КАК Валюты
				|ГДЕ
				|	&Код <> """"
				|	И Валюты.Код = &Код
				|	И НЕ Валюты.ПометкаУдаления
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	Валюты.Ссылка,
				|	1
				|ИЗ
				|	Справочник.Валюты КАК Валюты
				|ГДЕ
				|	Валюты.Наименование = &Наименование
				|	И НЕ Валюты.ПометкаУдаления
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	Валюты.Ссылка,
				|	2
				|ИЗ
				|	Справочник.Валюты КАК Валюты
				|ГДЕ
				|	Валюты.НаименованиеПолное = &НаименованиеПолное
				|	И НЕ Валюты.ПометкаУдаления
				|
				|УПОРЯДОЧИТЬ ПО
				|	Приоритет");
			Запрос.УстановитьПараметр("Код", Код);
			Запрос.УстановитьПараметр("Наименование", Наименование);
			Запрос.УстановитьПараметр("НаименованиеПолное", НаименованиеПолное);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Результат = Выборка.Ссылка;
			КонецЕсли;
			
		ИначеЕсли ТипРеквизитаОбъектаИС = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ТипКлассификаторБанков()
				И ПроверитьТип(Прокси, ОбъектXDTO, "DMBank") Тогда
			
			Наименование = ОбъектXDTO.name;
			Код = "";
			
			Если СвойствоУстановлено(ОбъектXDTO, "BIC") Тогда
				Код = ОбъектXDTO.BIC;
			КонецЕсли;
			
			Запрос = Новый Запрос(
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	КлассификаторБанков.Ссылка КАК Ссылка,
				|	0 КАК Приоритет
				|ИЗ
				|	Справочник.КлассификаторБанков КАК КлассификаторБанков
				|ГДЕ
				|	&Код <> """"
				|	И КлассификаторБанков.Код = &Код
				|	И НЕ КлассификаторБанков.ПометкаУдаления
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	КлассификаторБанков.Ссылка,
				|	1
				|ИЗ
				|	Справочник.КлассификаторБанков КАК КлассификаторБанков
				|ГДЕ
				|	КлассификаторБанков.Наименование = &Наименование
				|	И НЕ КлассификаторБанков.ПометкаУдаления
				|
				|УПОРЯДОЧИТЬ ПО
				|	Приоритет");
			Запрос.УстановитьПараметр("Код", Код);
			Запрос.УстановитьПараметр("Наименование", Наименование);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Результат = Выборка.Ссылка;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПриОпределенииЗначенияРеквизитаПоОбъектуXDTO(
		Результат,
		ОбъектXDTO,
		ТипРеквизитаОбъектаИС,
		Контекст.ИмяРеквизитаОбъектаИС,
		ТипЗнч(Контекст.ЗаполняемыйОбъектИС),
		Контекст.ЗаполняемыйОбъектИС,
		Контекст.ЭтоДополнительныйРеквизитИС,
		Контекст.ДополнительныйРеквизитИС,
		Контекст.ПараметрыВыбора);
	
КонецПроцедуры

// Вызывается при создании объекта ИС по ссылке в реквизите объекта ДО.
//
// Параметры:
//   ОбъектИС - Произвольный - созданный, но еще не записанный объект ИС.
//   ОбъектXDTO - ОбъектXDTO - исходный объект, соответствие которому не найдено в текущей ИБ.
//   ЗаполняемыйОбъектИС - Произвольный - объект ИС, в ходе заполнения которого вызывается создание
//     ОбъектИС по ссылке. Обеспечивает контекст, необходимый для заполнения ОбъектИС.
//
Процедура ПриСозданииПоСсылке(ОбъектИС, ОбъектXDTO, ЗаполняемыйОбъектИС = Неопределено)
	
	Если ТипЗнч(ОбъектИС) = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ТипВалюты(Истина)
			И ОбъектXDTO.objectID.type = "DMCurrency" Тогда
		
		Если СвойствоУстановлено(ОбъектXDTO, "code") Тогда
			ОбъектИС.Код = ОбъектXDTO.code;
		КонецЕсли;
		
		Если СвойствоУстановлено(ОбъектXDTO, "fullName") Тогда
			ОбъектИС.НаименованиеПолное = ОбъектXDTO.fullName;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ОбъектИС) = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ТипКлассификаторБанков(Истина)
			И ОбъектXDTO.objectID.type = "DMBank" Тогда
		
		Если СвойствоУстановлено(ОбъектXDTO, "BIC") Тогда
			ОбъектИС.Код = ОбъектXDTO.BIC;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ОбъектИС) = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ТипПользователи(Истина)
			И (ОбъектXDTO.objectID.type = "DMUser"
				Или ОбъектXDTO.objectID.type = "DMEmployee"
				Или ОбъектXDTO.objectID.type = "DMParty"
				Или ОбъектXDTO.objectID.type = "DMPartyRowContact") Тогда
		
		ПользовательXDTO = Неопределено;
		СотрудникXDTO = Неопределено;
		
		Если ОбъектXDTO.objectID.type = "DMUser" Тогда
			ПользовательXDTO = ОбъектXDTO;
		КонецЕсли;
		
		Если ОбъектXDTO.objectID.type = "DMEmployee" Тогда
			СотрудникXDTO = ОбъектXDTO;
		КонецЕсли;
		
		Если (ОбъектXDTO.objectID.type = "DMParty"
				Или ОбъектXDTO.Тип().Имя = "DMParty"
				Или ОбъектXDTO.objectID.type = "DMPartyRowContact"
				Или ОбъектXDTO.Тип().Имя = "DMPartyRowContact") Тогда
			Настройки = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИспользоватьИнтеграцию();
			Если Настройки.ИспользоватьИнтеграциюДО2 И СвойствоУстановлено(ОбъектXDTO, "user") Тогда
				ПользовательXDTO = ОбъектXDTO.user;
			ИначеЕсли Настройки.ИспользоватьИнтеграциюДО3 И СвойствоУстановлено(ОбъектXDTO, "employee") Тогда
				СотрудникXDTO = ОбъектXDTO.employee;
			КонецЕсли;
		КонецЕсли;
		
		Если СотрудникXDTO <> Неопределено И СвойствоУстановлено(СотрудникXDTO, "user") Тогда
			ПользовательXDTO = СотрудникXDTO.user;
		КонецЕсли;
		
		Если ПользовательXDTO <> Неопределено Тогда
			Если СвойствоУстановлено(ПользовательXDTO, "privatePerson") Тогда
				ОбъектИС.ФизическоеЛицо = ЗначениеРеквизитаОбъектаИСПоЗначениюДляЗаполнения(
					Метаданные.Справочники.Пользователи.Реквизиты.ФизическоеЛицо.Тип.Типы()[0],
					ЗначениеДляЗаполненияРеквизитаОбъектаИС(ПользовательXDTO.privatePerson),,
					Ложь);
			КонецЕсли;
			Если СвойствоУстановлено(ПользовательXDTO, "subdivision") Тогда
				ОбъектИС.Подразделение = ЗначениеРеквизитаОбъектаИСПоЗначениюДляЗаполнения(
					Метаданные.Справочники.Пользователи.Реквизиты.Подразделение.Тип.Типы()[0],
					ЗначениеДляЗаполненияРеквизитаОбъектаИС(ПользовательXDTO.subdivision),,
					Ложь);
			КонецЕсли;
		КонецЕсли;
		
		Если СотрудникXDTO <> Неопределено Тогда
			Если Не ЗначениеЗаполнено(ОбъектИС.ФизическоеЛицо)
					И СвойствоУстановлено(СотрудникXDTO, "privatePerson") Тогда
				ОбъектИС.ФизическоеЛицо = ЗначениеРеквизитаОбъектаИСПоЗначениюДляЗаполнения(
					Метаданные.Справочники.Пользователи.Реквизиты.ФизическоеЛицо.Тип.Типы()[0],
					ЗначениеДляЗаполненияРеквизитаОбъектаИС(СотрудникXDTO.privatePerson),,
					Ложь);
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ОбъектИС.Подразделение)
					И СвойствоУстановлено(СотрудникXDTO, "subdivision") Тогда
				ОбъектИС.Подразделение = ЗначениеРеквизитаОбъектаИСПоЗначениюДляЗаполнения(
					Метаданные.Справочники.Пользователи.Реквизиты.Подразделение.Тип.Типы()[0],
					ЗначениеДляЗаполненияРеквизитаОбъектаИС(СотрудникXDTO.subdivision),,
					Ложь);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПриСозданииПоСсылке(
		ОбъектИС,
		ОбъектXDTO,
		ЗаполняемыйОбъектИС);
	
КонецПроцедуры

Процедура СформироватьСообщение(Прокси, ПорцияОбъектов, Настройки, МодульИнтеграцияС1СДокументооборотОбмен,
		МодульИнтеграцияС1СДокументооборот3Обмен, ОбъектыКУдалениюИзРегистрацииИзменений)
	
	Если ПорцияОбъектов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяВременногоФайла, "UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("Message");
	
	КонтрольОтправкиФайлов = КонтрольОтправкиФайлов();
	
	ОбъектовВСообщении = 0;
	Для Каждого ИнтегрированныйОбъект Из ПорцияОбъектов Цикл
		
		Попытка
			Если Настройки.ИспользоватьИнтеграциюДО2 Тогда
				ОбъектXDTO = МодульИнтеграцияС1СДокументооборотОбмен.ПолучитьXDTOИзмененийИзОбъекта(
					Прокси,
					ИнтегрированныйОбъект,
					КонтрольОтправкиФайлов);
			ИначеЕсли Настройки.ИспользоватьИнтеграциюДО3 Тогда
				ОбъектXDTO = МодульИнтеграцияС1СДокументооборот3Обмен.ПолучитьXDTOИзмененийИзОбъекта(
					Прокси,
					ИнтегрированныйОбъект,
					КонтрольОтправкиФайлов);
			КонецЕсли;
			Прокси.ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO);
			ОбъектовВСообщении = ОбъектовВСообщении + 1;
		Исключение
			ИндексОбъекта = ОбъектыКУдалениюИзРегистрацииИзменений.Найти(ИнтегрированныйОбъект.Объект);
			Если ИндексОбъекта <> Неопределено Тогда
				ОбъектыКУдалениюИзРегистрацииИзменений.Удалить(ИндексОбъекта);
			КонецЕсли;
			
			ЗаписьЖурналаРегистрации(
				ИмяСобытияЖурналаРегистрации(
					НСтр("ru = 'Формирование сообщения обмена'", ОбщегоНазначения.КодОсновногоЯзыка())),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.ПланыОбмена.ИнтеграцияС1СДокументооборотомПереопределяемый,
				ИнтегрированныйОбъект.Объект,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();	// Message
	ЗаписьXML.Закрыть();
	
	Если ОбъектовВСообщении > 0 Тогда
		РегистрыСведений.ОчередьСообщенийВ1СДокументооборот.ДобавитьСообщение(
			Новый ДвоичныеДанные(ИмяВременногоФайла),
			КонтрольОтправкиФайлов);
	КонецЕсли;
	
	УдалитьФайлы(ИмяВременногоФайла);
	
КонецПроцедуры

Процедура УдалитьСообщения(ТаблицаСообщений, РегистрМенеджер)
	
	Для Каждого Строка Из ТаблицаСообщений Цикл
		МенеджерЗаписи = РегистрМенеджер.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.МоментВремени = Строка.МоментВремени;
		МенеджерЗаписи.Идентификатор = Строка.Идентификатор;
		МенеджерЗаписи.Удалить();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

// Определяет, является ли версия сервиса более свежей или такой же, как требуемая версия.
//
// Параметры:
//   ОписаниеВерсииСервиса - Массив из Строка - массив из 4-5 элементов, составляющий полный номер версии.
//   ТребуемаяВерсия - Строка - строка с номером требуемой версии.
//
// Возвращаемое значение:
//   Булево - Истина, если описание версии - не меньше требуемой версии.
//
Функция ВерсияНеМеньше(ОписаниеВерсииСервиса, ТребуемаяВерсия)
	
	ОписаниеТребуемойВерсии = СтрРазделить(ТребуемаяВерсия, ".");
	Если ОписаниеТребуемойВерсии.Количество() <> 5 Тогда
		ОписаниеТребуемойВерсии.Добавить("PROF");
	КонецЕсли;
	
	ОписаниеТипа = Новый ОписаниеТипов("Число");
	ОписаниеВерсииСервиса0 = ОписаниеТипа.ПривестиЗначение(ОписаниеВерсииСервиса[0]);
	ОписаниеТребуемойВерсии0 = ОписаниеТипа.ПривестиЗначение(ОписаниеТребуемойВерсии[0]);
	ОписаниеВерсииСервиса1 = ОписаниеТипа.ПривестиЗначение(ОписаниеВерсииСервиса[1]);
	ОписаниеТребуемойВерсии1 = ОписаниеТипа.ПривестиЗначение(ОписаниеТребуемойВерсии[1]);
	ОписаниеВерсииСервиса2 = ОписаниеТипа.ПривестиЗначение(ОписаниеВерсииСервиса[2]);
	ОписаниеТребуемойВерсии2 = ОписаниеТипа.ПривестиЗначение(ОписаниеТребуемойВерсии[2]);
	ОписаниеВерсииСервиса3 = ОписаниеТипа.ПривестиЗначение(ОписаниеВерсииСервиса[3]);
	ОписаниеТребуемойВерсии3 = ОписаниеТипа.ПривестиЗначение(ОписаниеТребуемойВерсии[3]);
	
	НомерНеМеньше = Ложь;
	Если ОписаниеВерсииСервиса0 > ОписаниеТребуемойВерсии0 Тогда
		НомерНеМеньше = Истина;
	ИначеЕсли ОписаниеВерсииСервиса0 = ОписаниеТребуемойВерсии0 Тогда
		Если ОписаниеВерсииСервиса1 > ОписаниеТребуемойВерсии1 Тогда
			НомерНеМеньше = Истина;
		ИначеЕсли ОписаниеВерсииСервиса1 = ОписаниеТребуемойВерсии1 Тогда
			Если ОписаниеВерсииСервиса2 > ОписаниеТребуемойВерсии2 Тогда
				НомерНеМеньше = Истина;
			ИначеЕсли ОписаниеВерсииСервиса2 = ОписаниеТребуемойВерсии2 Тогда
				Если ОписаниеВерсииСервиса3 >= ОписаниеТребуемойВерсии3 Тогда
					НомерНеМеньше = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НомерНеМеньше
		И ((ОписаниеВерсииСервиса[4] = ОписаниеТребуемойВерсии[4]) Или ОписаниеВерсииСервиса[4] = "CORP");
	
КонецФункции

Функция ДанныеВебСервисаДокументооборота(АдресВебСервисаДокументооборота, ПользовательЗаданияОбмена = Ложь)
	
	ДанныеВебСервиса = Новый Структура();
	
	ДанныеВебСервиса.Вставить("ЗащищенноеСоединение", Неопределено);
	
	// При необходимости создадим защищенное соединение. Используем сертификаты из хранилища
	// Windows, если это имеет смысл для текущей платформы.
	ЭтоСоединениеSSL = СтрНачинаетсяС(АдресВебСервисаДокументооборота, "https");
	Если ЭтоСоединениеSSL Тогда
		Если СерверРаботаетПодWindows() Тогда
			ДанныеВебСервиса.ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение(
				Новый СертификатКлиентаWindows(),
				Новый СертификатыУдостоверяющихЦентровWindows());
		Иначе
			ДанныеВебСервиса.ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
		КонецЕсли;
	КонецЕсли;
	
	ДанныеВебСервиса.Вставить("ИнтернетПрокси", Неопределено);
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПриПолученииWSПрокси(
		ДанныеВебСервиса.ИнтернетПрокси);
	
	ДанныеВебСервиса.Вставить("Таймаут", ТаймаутСервиса());
	ДанныеВебСервиса.Вставить("ИмяВебСервисаДокументооборота", ИмяВебСервисаДокументооборота());
	ДанныеВебСервиса.Вставить("ПсевдонимВебСервисаДокументооборота", ПсевдонимВебСервисаДокументооборота());
	ДанныеВебСервиса.Вставить(
		"URIПространстваИменВебСервисаДокументооборота",
		URIПространстваИменВебСервисаДокументооборота());
	
	ДанныеВебСервиса.Вставить("ПользовательЗаданияОбмена", ПользовательЗаданияОбмена);
	
	Возврат ДанныеВебСервиса;
	
КонецФункции

Процедура ДобавитьКомандуСозданияНаОсновании(ТаблицаКоманд, Команда, Обработчик, ВидВРег, ФункциональныеОпции, Порядок)
	
	КомандаСозданияНаОсновании = ТаблицаКоманд.Добавить();
	КомандаСозданияНаОсновании.Обработчик = Обработчик;
	КомандаСозданияНаОсновании.Идентификатор = Команда.Имя;
	КомандаСозданияНаОсновании.Представление = Команда.Синоним;
	КомандаСозданияНаОсновании.РежимЗаписи = ?(ВидВРег = "ДОКУМЕНТ", "Записывать", "Записывать");
	КомандаСозданияНаОсновании.ФункциональныеОпции = ФункциональныеОпции;
	КомандаСозданияНаОсновании.Порядок = Порядок;
	
	Порядок = Порядок - 1;
	
КонецПроцедуры

Процедура ДобавитьКомандуФайлы(Форма, Знач МестоРазмещенияКоманд)
	
	Если МестоРазмещенияКоманд = Неопределено Тогда
		МестоРазмещенияКоманд = Форма.КоманднаяПанель;
	КонецЕсли;
	
	ИмяКоманды = "ИнтеграцияС1СДокументооборотом_Файлы";
	
	Если Форма.Команды.Найти(ИмяКоманды) = Неопределено Тогда
		КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
		КомандаФормы.Действие = "Подключаемый_ВыполнитьКомандуИнтеграции";
		ВерсияБСП = СтандартныеПодсистемыСервер.ВерсияБиблиотеки();
		Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияБСП, "3.1.9.64") < 0
				И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
			// На форму может быть выведена команда "Файлы" из БСП одновременно с командой "Файлы" из БИД.
			// Изменим название команды во избежание дублирования.
			КомандаФормы.Заголовок = НСтр("ru='Файлы ДО'");
		Иначе
			КомандаФормы.Заголовок = НСтр("ru='Файлы'");
		КонецЕсли;
		КомандаФормы.Подсказка = НСтр("ru='Файлы, хранящиеся в 1С:Документооборот'");
		КомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
		КомандаФормы.Отображение = ОтображениеКнопки.Текст;
	КонецЕсли;
	
	ИсходноеИмяЭлемента = "ИнтеграцияС1СДокументооборотом_Файлы";
	
	ИмяЭлемента = ИсходноеИмяЭлемента;
	Пока Форма.Элементы.Найти(ИмяЭлемента) <> Неопределено Цикл
		ИмяЭлемента = Форма.Элементы.Найти(ИмяЭлемента).Имя;
		Итератор = СтрЗаменить(ИмяЭлемента, ИсходноеИмяЭлемента, "");
		Итератор = Число(?(ПустаяСтрока(Итератор),"0",Итератор));
		Итератор = Итератор + ?(Итератор = 0, 2, 1);
		ИмяЭлемента = ИсходноеИмяЭлемента + Формат(Итератор,"ЧГ=0");
	КонецЦикла;
	
	НовыйЭлемент = Форма.Элементы.Добавить(ИмяЭлемента, Тип("КнопкаФормы"), МестоРазмещенияКоманд);
	НовыйЭлемент.Вид = ВидКнопкиФормы.Гиперссылка;
	НовыйЭлемент.ИмяКоманды = ИмяКоманды;
	
КонецПроцедуры

Процедура ДополнитьТекстСообщенияОбОшибке(ТекстСообщенияОбОшибке, Дополнение)
	
	РазделительТекстаОшибки =
		"
		|
		|---------
		|
		|";
	Если ПустаяСтрока(ТекстСообщенияОбОшибке) Тогда
		ТекстСообщенияОбОшибке = Дополнение;
	Иначе
		ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке + РазделительТекстаОшибки + СокрЛП(Дополнение);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет наличие реквизита "Наименование".
//
// Параметры:
//   ОбъектИС - ЛюбаяСсылка - ссылка на объект ИС.
//
// Возвращаемое значение:
//   Булево
//
Функция ЕстьНаименование(ОбъектИС)
	
	Если Не ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ОбъектИС)) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЕстьНаименование = Ложь;
	
	ОбъектМетаданных = ОбъектИС.Метаданные();
	Если Найти(ОбъектМетаданных.ПолноеИмя(), "Справочник.") > 0 Тогда
		Для Каждого Реквизит Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
			Если Реквизит.Имя = "Наименование" Тогда
				ЕстьНаименование = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ЕстьНаименование;
	
КонецФункции

// Заполняет XDTO объект подписи по структуре подписи.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ПодписьXDTO - ОбъектXDTO - объект XDTO типа DMSignature.
//   ДанныеПодписи - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеПодписи
//
Процедура ЗаполнитьXDTOПодпись(Прокси, ПодписьXDTO, ДанныеПодписи)
	
	ПодписьXDTO.signature = ДанныеПодписи.Подпись;
	ПодписьXDTO.certificate = ДанныеПодписи.ДвоичныеДанныеСертификата;
	
	ПодписьXDTO.author = ДанныеПодписи.КомуВыданСертификат;
	ПодписьXDTO.comment = ДанныеПодписи.Комментарий;
	ПодписьXDTO.date = ?(ЗначениеЗаполнено(ДанныеПодписи.ДатаПодписи),
		ДанныеПодписи.ДатаПодписи,
		ТекущаяДатаСеанса());
	ПодписьXDTO.signatureFileName = ДанныеПодписи.ИмяФайлаПодписи;
	ПодписьXDTO.thumbprint = ДанныеПодписи.Отпечаток;
	
	Если ДанныеПодписи.Свойство("УстановившийПодпись") Тогда
		ПодписьXDTO.signer = СоздатьОбъект(Прокси, "DMUser");
		ПодписьXDTO.signer.name = ДанныеПодписи.УстановившийПодпись;
		ПодписьXDTO.signer.objectID = СоздатьObjectID(Прокси, ДанныеПодписи.УстановившийПодписьИд, "DMUser");
	КонецЕсли;
	
КонецПроцедуры

Функция ЗначениеПеречисленияПоИмениИлиСинониму(МенеджерПеречисления, ЗначенияПеречисления, Знач ИмяИлиСинонимЗначения)
	
	ЗначениеПеречисления = Неопределено;
	
	ИмяИлиСинонимЗначения = СокрЛП(ИмяИлиСинонимЗначения);
	Если ИмяИлиСинонимЗначения <> "" Тогда
		Если ЗначенияПеречисления.Найти(ИмяИлиСинонимЗначения) = Неопределено Тогда
			Для Каждого МетаданныеЗначениеПеречисления Из ЗначенияПеречисления Цикл
				Если ВРег(СокрЛП(МетаданныеЗначениеПеречисления.Синоним)) = ВРег(ИмяИлиСинонимЗначения) Тогда
					ЗначениеПеречисления = МенеджерПеречисления[МетаданныеЗначениеПеречисления.Имя];
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			ЗначениеПеречисления = МенеджерПеречисления[ИмяИлиСинонимЗначения];
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗначениеПеречисления;
	
КонецФункции

// Проверяет требуется ли выводить команду присоединенных файлов из библиотеки интеграции с 1С:Документооборотом.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - проверяемая форма.
//
// Возвращаемое значение:
//   Булево - результат проверки.
//
Функция НужноВыводитьКомандуПрисоединенныхФайловДО(Форма)
	
	СтандартнаяОбработка = Истина;
	
	Результат = Ложь;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПриОпределенииНеобходимостиВыводитьКомандуПрисоединенныхФайловДО(
		Форма,
		Результат,
		СтандартнаяОбработка);
	
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		
		ИмяФормыМассив = СтрРазделить(Форма.ИмяФормы, ".");
		
		ВерсияБСП = СтандартныеПодсистемыСервер.ВерсияБиблиотеки();
		Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияБСП, "3.1.9.64") >= 0
				И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
			
			МодульРаботаСФайлами = ОбщегоНазначения.ОбщийМодуль("РаботаСФайлами");
			ИмяТипа = СтрШаблон("%1Ссылка.%2", ИмяФормыМассив[0], ИмяФормыМассив[1]);
			КОбъектуМожноПрисоединятьФайлы = МодульРаботаСФайлами.КОбъектуМожноПрисоединятьФайлы(Тип(ИмяТипа));
			
			ИмяФормы = ИмяФормыМассив[ИмяФормыМассив.ВГраница()];
			
			Если КОбъектуМожноПрисоединятьФайлы
					И СтрНайти(ИмяФормы, "ФормаСписка") = 0
					И СтрНайти(ИмяФормы, "ФормаВыбора") = 0 Тогда
				// На форму должна быть выведена команда "Файлы" из БСП. Команда из БИД не нужна.
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		// Команды "Файлы" из БСП на форме нет. Проверим необходимость вывода команды из БИД.
		ИмяОбъекта = СтрШаблон("%1.%2", ИмяФормыМассив[0], ИмяФормыМассив[1]);
		Правила = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.НайтиСоздатьПодходящиеПравила(
			Неопределено,
			ИмяОбъекта,
			Ложь);
		
		Результат = (Правила.Количество() <> 0);
		
	Исключение
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Обработчик заполнения объекта ИС по данным ДО.
//
// Параметры:
//   Источник - ОпределяемыйТип.ИнтеграцияС1СДокументооборотДокументыОбъектыПереопределяемый
//   ДанныеЗаполнения - Произвольный - значение, которое используется как основание для заполнения.
//   СтандартнаяОбработка - Булево - признак выполнения стандартной обработки события.
//
Процедура ОбработкаЗаполненияОбъектаИС(Источник, ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Или Не ДанныеЗаполнения.Свойство("Объект1СДокументооборота") Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним реквизиты шапки.
	ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения.ЗначенияРеквизитов);
	
	// Заполним табличные части.
	ТабличныеЧастиМетаданные = Источник.Метаданные().ТабличныеЧасти;
	Для Каждого ЗначениеРеквизита Из ДанныеЗаполнения.ЗначенияРеквизитов Цикл
		Если ТипЗнч(ЗначениеРеквизита.Значение) <> Тип("Массив")
				Или ЗначениеРеквизита.Значение.Количество() = 0
				Или ТабличныеЧастиМетаданные.Найти(ЗначениеРеквизита.Ключ) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ТабЧастьИС = Источник[ЗначениеРеквизита.Ключ];
		ТабЧастьИС.Очистить();
		Для Каждого Строка Из ЗначениеРеквизита.Значение Цикл
			ЗаполнитьЗначенияСвойств(ТабЧастьИС.Добавить(), Строка);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Проверяет поддерживает ли объект 1С:Документооборота хранение присоединенных файлов.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Тип - Строка - XDTO-тип объекта Документооборота.
//
// Возвращаемое значение:
//   Булево
//
Функция ОбъектДОПоддерживаетФайлы(Прокси, Тип)
	
	ОбъектXDTO = СоздатьОбъект(Прокси, Тип);
	
	Возврат СвойствоСуществует(ОбъектXDTO, "files");
	
КонецФункции

// Переносит параметры длительной операции в параметры сеанса фонового задания.
//
// Параметры:
//   ПараметрыДлительнойОперации - см. ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПараметрыДлительнойОперации
//
Процедура ПараметрыДлительнойОперацииВПараметрыСеанса(ПараметрыДлительнойОперации)
	
	ПараметрыСеанса.ИнтеграцияС1СДокументооборотWSОпределения = ПараметрыДлительнойОперации.ИнтеграцияС1СДокументооборотWSОпределения;
	ПараметрыСеанса.ИнтеграцияС1СДокументооборотВерсияСервиса = ПараметрыДлительнойОперации.ИнтеграцияС1СДокументооборотВерсияСервиса;
	ПараметрыСеанса.ИнтеграцияС1СДокументооборотИмяПользователя = ПараметрыДлительнойОперации.ИнтеграцияС1СДокументооборотИмяПользователя;
	ПараметрыСеанса.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияJWT = ПараметрыДлительнойОперации.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияJWT;
	ПараметрыСеанса.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияОС = ПараметрыДлительнойОперации.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияОС;
	ПараметрыСеанса.ИнтеграцияС1СДокументооборотМестоположениеПрокси = ПараметрыДлительнойОперации.ИнтеграцияС1СДокументооборотМестоположениеПрокси;
	Если ПараметрыДлительнойОперации.ИнтеграцияС1СДокументооборотПароль = Неопределено Тогда
		ПараметрыСеанса.ИнтеграцияС1СДокументооборотПароль = "";
	Иначе
		ПараметрыСеанса.ИнтеграцияС1СДокументооборотПароль = ПараметрыДлительнойОперации.ИнтеграцияС1СДокументооборотПароль;
	КонецЕсли;
	ПараметрыСеанса.ИнтеграцияС1СДокументооборотПарольИзвестен = ПараметрыДлительнойОперации.ИнтеграцияС1СДокументооборотПарольИзвестен;
	
КонецПроцедуры

Функция ПолучитьИОбновитьКэшWSОпределения(ДанныеСервиса, МестоположениеWSDL, ИмяПользователя, Пароль,
		ИспользуетсяАутентификацияОС = Ложь, ИспользуетсяАутентификацияJWT = Ложь, МестоположениеПрокси = Неопределено)
	
	ИмяФайлаWSDL = ПолучитьИмяВременногоФайла("xml");
	ТекстСообщенияОбОшибке = "";
	Определения = Неопределено;
	
	Попытка
		
		СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(МестоположениеWSDL);
		
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
			
			МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
			МодульПолучениеФайловИзИнтернетаКлиентСервер = ОбщегоНазначения.ОбщийМодуль(
				"ПолучениеФайловИзИнтернетаКлиентСервер");
			
			ПараметрыПолучения = МодульПолучениеФайловИзИнтернетаКлиентСервер.ПараметрыПолученияФайла();
			ПараметрыПолучения.ПутьДляСохранения = ИмяФайлаWSDL;
			ПараметрыПолучения.Пользователь = ИмяПользователя;
			ПараметрыПолучения.Пароль = Пароль;
			ПараметрыПолучения.Порт = СтруктураURI.Порт;
			ПараметрыПолучения.Таймаут = ДанныеСервиса.Таймаут;
			ПараметрыПолучения.ЗащищенноеСоединение = ДанныеСервиса.ЗащищенноеСоединение;
			ПараметрыПолучения.ИспользоватьАутентификациюОС = ИспользуетсяАутентификацияОС;
			
			РезультатСкачивания = МодульПолучениеФайловИзИнтернета.СкачатьФайлНаСервере(
				МестоположениеWSDL,
				ПараметрыПолучения,
				Ложь);
			
		Иначе
			
			РезультатСкачивания = СкачатьФайлНаСервере(
				ИмяФайлаWSDL,
				СтруктураURI,
				ДанныеСервиса,
				ИмяПользователя,
				Пароль,
				ИспользуетсяАутентификацияОС);
			
		КонецЕсли;
		
		Если РезультатСкачивания.Статус Тогда
			Определения = Новый WSОпределения(ИмяФайлаWSDL,,,, ДанныеСервиса.Таймаут);
			Если Не ДанныеСервиса.ПользовательЗаданияОбмена Тогда
				ДанныеWSDL = Новый ДвоичныеДанные(ИмяФайлаWSDL);
				ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.УстановитьНастройкиАвторизацииВПараметрыСеанса(
					ИмяПользователя,
					Пароль,
					ИспользуетсяАутентификацияОС,
					ИспользуетсяАутентификацияJWT,
					Новый ХранилищеЗначения(ДанныеWSDL),
					МестоположениеПрокси);
			КонецЕсли;
		Иначе
			ТекстСообщенияОбОшибке = СокрЛП(СтрШаблон(
				НСтр("ru = 'Не удалось получить WSDL файл описания web-сервиса 1С:Документооборота.
					|Адрес WSDL файла: %1.
					|Код ответа сервера: %2.
					|Сообщение об ошибке:
					|%3'"),
				МестоположениеWSDL,
				РезультатСкачивания.КодСостояния,
				РезультатСкачивания.СообщениеОбОшибке));
		КонецЕсли;
		
	Исключение
		
		ТекстСообщенияОбОшибке = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Попытка
		
		ФайлWSDL = Новый Файл(ИмяФайлаWSDL);
		Если ФайлWSDL.Существует() Тогда
			УдалитьФайлы(ИмяФайлаWSDL);
		КонецЕсли;
		
	Исключение
		
		ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке
			+ ?(ТекстСообщенияОбОшибке = "", "", Символы.ПС)
			+ ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Если ТекстСообщенияОбОшибке <> "" Тогда
		
		Если Определения = Неопределено Тогда
			ВызватьИсключение ТекстСообщенияОбОшибке;
		Иначе
			ЗаписьЖурналаРегистрации(
				ИмяСобытияЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщенияОбОшибке);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Определения;
	
КонецФункции

// Получает версию сервиса, обратившись к нему напрямую.
//
// Параметры:
//   ИзФоновогоЗадания - Булево - функция запускается из фонового задания.
//   ТекстОшибки - Строка - неявно возвращаемое значение, текст сообщения об ошибке,
//     полученный при определении версии сервиса.
//
Функция ПолучитьВерсиюВызовомСервиса(ИзФоновогоЗадания = Ложь, ТекстОшибки = "")
	
	Попытка
		// При запуске не из фонового задания попытаемся получить прокси в режиме с вызовом исключений,
		// для заполнения повторно используемого значения.
		Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси(
			Не ИзФоновогоЗадания); // Не вызывать исключение для фонового задания.
	Исключение
		Прокси = ПолучитьПрокси(Ложь);
	КонецПопытки;
	
	Если Прокси = Неопределено Тогда
		
		ЗаписатьПредупреждение(НСтр("ru = 'Сервис недоступен'", ОбщегоНазначения.КодОсновногоЯзыка()));
		Возврат "0.0.0.0";
		
	Иначе
		
		Попытка
			
			Запрос = СоздатьОбъект(Прокси, "DMGetVersionRequest");
			Ответ = Прокси.execute(Запрос); // Не используем метод ВыполнитьЗапрос, он сам запрашивает версию сервиса.
			Если ПроверитьТип(Прокси, Ответ, "DMError") Тогда
				ТекстОшибки = Ответ.description;
				ЗаписьЖурналаРегистрации(
					ИмяСобытияЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Ошибка,,,
					ТекстОшибки);
				Возврат "0.0.0.0";
			Иначе
				ТекстСообщения = СтрШаблон(
					НСтр("ru = 'Подключен сервис версии %1'", ОбщегоНазначения.КодОсновногоЯзыка()),
					Ответ.versionNumber);
				ЗаписьЖурналаРегистрации(
					ИмяСобытияЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Информация,,,
					ТекстСообщения);
				Возврат Ответ.versionNumber;
			КонецЕсли;
			
		Исключение
			
			ЗаписатьПредупреждение(НСтр("ru = 'Сервис недоступен'", ОбщегоНазначения.КодОсновногоЯзыка()));
			Возврат "0.0.0.0";
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецФункции

// Возвращает структуру, описывающую "подчиненные" константы для указанной "родительской" константы.
//
// Параметры:
//   ИмяРодительскойКонстанты - Строка - имя константы как оно задано в конфигураторе.
//   ЗначениеРодительскойКонстанты - Произвольный - значение константы.
//
// Возвращаемое значение:
//   Структура - где Ключ - это имя подчиненной константы, а Значение - соответствующее значению родительской константы.
//
Функция ПолучитьДопустимыеЗначенияПодчиненныхКонстант(ИмяРодительскойКонстанты, ЗначениеРодительскойКонстанты)
	
	Результат = Новый Структура;
	ТаблицаКонстант = ЗависимостиКонстант();
	
	ПодчиненныеКонстанты = ТаблицаКонстант.НайтиСтроки(
		Новый Структура(
			"ИмяРодительскойКонстанты, ЗначениеРодительскойКонстанты",
			ИмяРодительскойКонстанты, ЗначениеРодительскойКонстанты));
	
	Для Каждого СтрокаТаблицы Из ПодчиненныеКонстанты Цикл
		Результат.Вставить(СтрокаТаблицы.ИмяПодчиненнойКонстанты, СтрокаТаблицы.ЗначениеПодчиненнойКонстанты);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьПроксиИзПараметровСеанса(ВызыватьИсключение = Истина)
	
	ИмяФайлаWSDL = ПолучитьИмяВременногоФайла("xml");
	
	Попытка
		
		ДвоичныеДанныеWSDL = ПараметрыСеанса.ИнтеграцияС1СДокументооборотWSОпределения.Получить(); // ДвоичныеДанные
		ДвоичныеДанныеWSDL.Записать(ИмяФайлаWSDL);
		Определения = Новый WSОпределения(ИмяФайлаWSDL,,,, ТаймаутСервиса());
		
		АдресВебСервисаДокументооборота = АдресВебСервиса1СДокументооборот();
		ДанныеСервиса = ДанныеВебСервисаДокументооборота(АдресВебСервисаДокументооборота);
		
		Прокси = Новый WSПрокси(
			Определения,
			ДанныеСервиса.URIПространстваИменВебСервисаДокументооборота,
			ДанныеСервиса.ИмяВебСервисаДокументооборота,
			ДанныеСервиса.ИмяВебСервисаДокументооборота + "Soap",
			ДанныеСервиса.ИнтернетПрокси,
			ДанныеСервиса.Таймаут,
			ДанныеСервиса.ЗащищенноеСоединение,
			ПараметрыСеанса.ИнтеграцияС1СДокументооборотМестоположениеПрокси,
			ПараметрыСеанса.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияОС);
		Если Не ПараметрыСеанса.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияОС
				И Не ПараметрыСеанса.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияJWT Тогда
			Прокси.Пользователь = ПараметрыСеанса.ИнтеграцияС1СДокументооборотИмяПользователя;
			Прокси.Пароль = ПараметрыСеанса.ИнтеграцияС1СДокументооборотПароль;
		КонецЕсли;
		
	Исключение
		ПараметрыСеанса.ИнтеграцияС1СДокументооборотПарольИзвестен = Ложь;
		Прокси = ПолучитьПрокси(ВызыватьИсключение);
	КонецПопытки;
	
	ФайлWSDL = Новый Файл(ИмяФайлаWSDL);
	Если ФайлWSDL.Существует() Тогда
		УдалитьФайлы(ИмяФайлаWSDL);
	КонецЕсли;
	
	Возврат Прокси;
	
КонецФункции

Процедура ПроверитьАлгоритм(Алгоритм, ЗапрещенныеСтроки, Исключения, СписокОшибок, ПодходящиеИсключения)
	
	Для Каждого ЗапрещеннаяСтрока Из ЗапрещенныеСтроки Цикл
		
		Позиция = СтрНайти(Алгоритм, НРег(ЗапрещеннаяСтрока));
		Пока Позиция <> 0 Цикл
			
			// Проверим на возможные исключения.
			ЭтоИсключение = Ложь;
			Для Каждого СтрокаИсключение Из Исключения Цикл
				СтрокаИсключение = НРег(СтрокаИсключение);
				ДлинаИсключения = СтрДлина(СтрокаИсключение);
				Если Сред(Алгоритм, Позиция - 1, ДлинаИсключения) = СтрокаИсключение
						Или Сред(Алгоритм, Позиция, ДлинаИсключения) = СтрокаИсключение Тогда
					ЭтоИсключение = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если Не ЭтоИсключение И СписокОшибок.Найти(СтрШаблон("""%1""", ЗапрещеннаяСтрока)) = Неопределено Тогда
				СписокОшибок.Добавить(СтрШаблон("""%1""", ЗапрещеннаяСтрока));
				Для Каждого СтрокаИсключение Из Исключения Цикл
					Если ПодходящиеИсключения.Найти(СтрШаблон("""%1""", СтрокаИсключение)) = Неопределено Тогда
						ПодходящиеИсключения.Добавить(СтрШаблон("""%1""", СтрокаИсключение));
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Позиция = СтрНайти(Алгоритм, НРег(ЗапрещеннаяСтрока), НаправлениеПоиска.СНачала, Позиция + 1);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет одну электронно-цифровую подпись.
//
// Параметры:
//   ДанныеСтроки - ДанныеФормыЭлементДерева - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.СтруктураСтрокиДереваПодписей
//   МенеджерКриптографии - МенеджерКриптографии - объект Менеджера криптографии.
//   СоответствиеИдОбъектаИДвоичныхДанных - Соответствие из КлючИЗначение:
//     * Ключ - Строка - идентификатор объекта.
//     * Значение - ДвоичныеДанные - двоичные данные объекта.
//   АдресСлепкаДокумента - Строка - адрес временного хранилища двоичных данных документа Документооборота.
//
Процедура ПроверитьОднуПодпись(ДанныеСтроки, МенеджерКриптографии, СоответствиеИдОбъектаИДвоичныхДанных,
		АдресСлепкаДокумента)
	
	ПараметрыПроверкиЭП = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ПараметрыПроверкиЭП(
		ДанныеСтроки,
		СоответствиеИдОбъектаИДвоичныхДанных,
		АдресСлепкаДокумента);
	Если ПараметрыПроверкиЭП.Подпись = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПредставлениеДатыПроверки = Формат(ТекущаяДатаСеанса(), ПараметрыПроверкиЭП.ФорматДатыПроверки);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		МодульЭлектроннаяПодпись = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодпись");
		Попытка
			ОписаниеОшибки = "";
			Неверна = Не МодульЭлектроннаяПодпись.ПроверитьПодпись(
				МенеджерКриптографии,
				ПараметрыПроверкиЭП.ДвоичныеДанныеОбъекта,
				ПараметрыПроверкиЭП.Подпись,
				ОписаниеОшибки);
			Статус = ?(ДанныеСтроки.Неверна,
				НСтр("ru = 'Недействительна (%1)'") + ": " + ОписаниеОшибки,
				НСтр("ru = 'Действительна (%1)'"));
		Исключение
			Неверна = Истина;
			Статус = НСтр("ru = 'Недействительна (%1): не указан менеджер криптографии'");
		КонецПопытки;
	Иначе
		Неверна = Истина;
		Статус = НСтр("ru = 'Недействительна (%1): отсутствует стандартная подсистема ""Электронная подпись""'");
	КонецЕсли;
	
	ДанныеСтроки.Статус = СтрШаблон(Статус, ПредставлениеДатыПроверки);
	ДанныеСтроки.Неверна = Неверна;
	ДанныеСтроки.ПодписьВерна = Не Неверна;
	ДанныеСтроки.КомуВыданСертификатИСтатус = ДанныеСтроки.КомуВыданСертификат + Символы.ПС + ДанныеСтроки.Статус;
	
КонецПроцедуры

Функция ПроверкаПодключенияПоЛогинуПаролю(АдресВебСервисаДокументооборота, ДанныеСервиса, ИмяПользователя, Пароль,
		ТекстСообщенияОбОшибке)
	
	Определения = Неопределено;
	
	Если ЗначениеЗаполнено(ИмяПользователя) Тогда
		Попытка
			МестоположениеWSDL = СтрШаблон("%1ws/%2?wsdl",
				АдресВебСервисаДокументооборота,
				ДанныеСервиса.ПсевдонимВебСервисаДокументооборота);
			Определения = ПолучитьИОбновитьКэшWSОпределения(
				ДанныеСервиса,
				МестоположениеWSDL,
				ИмяПользователя,
				Пароль);
		Исключение
			Определения = Неопределено;
			ДополнитьТекстСообщенияОбОшибке(
				ТекстСообщенияОбОшибке,
				ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		Если Определения = Неопределено Тогда
			Попытка
				МестоположениеWSDL = СтрШаблон("%1ws/%2?wsdl",
					АдресВебСервисаДокументооборота,
					ДанныеСервиса.ИмяВебСервисаДокументооборота);
				Определения = ПолучитьИОбновитьКэшWSОпределения(
					ДанныеСервиса,
					МестоположениеWSDL,
					ИмяПользователя,
					Пароль);
			Исключение
				Определения = Неопределено;
				ДополнитьТекстСообщенияОбОшибке(
					ТекстСообщенияОбОшибке,
					ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Определения;
	
КонецФункции

Функция ПроверкаПодключенияЧерезJWT(АдресВебСервисаДокументооборота, ДанныеСервиса, МестоположениеПрокси,
		ИспользуетсяАутентификацияJWT, ТекстСообщенияОбОшибке)
	
	Определения = Неопределено;
	
	ТекстТокенаДоступа = ТекстТокенаДоступа();
	
	Если ТекстТокенаДоступа <> "" Тогда
		
		Попытка
			МестоположениеПрокси = СтрШаблон("%1ws/%2?AccessToken=%3",
					АдресВебСервисаДокументооборота,
					ДанныеСервиса.ПсевдонимВебСервисаДокументооборота,
					ТекстТокенаДоступа);
			Определения = ПолучитьИОбновитьКэшWSОпределения(
				ДанныеСервиса,
				МестоположениеПрокси + "&wsdl",
				"",
				"",
				Ложь,
				Истина,
				МестоположениеПрокси);
			ИспользуетсяАутентификацияJWT = Истина;
		Исключение
			Определения = Неопределено;
			МестоположениеПрокси = Неопределено;
			ДополнитьТекстСообщенияОбОшибке(
				ТекстСообщенияОбОшибке,
				ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		Если Определения = Неопределено Тогда
			
			Попытка
				МестоположениеПрокси = СтрШаблон("%1ws/%2?AccessToken=%3",
					АдресВебСервисаДокументооборота,
					ДанныеСервиса.ИмяВебСервисаДокументооборота,
					ТекстТокенаДоступа);
				Определения = ПолучитьИОбновитьКэшWSОпределения(
					ДанныеСервиса,
					МестоположениеПрокси + "&wsdl",
					"",
					"",
					Ложь,
					Истина,
					МестоположениеПрокси);
				ИспользуетсяАутентификацияJWT = Истина;
			Исключение
				Определения = Неопределено;
				МестоположениеПрокси = Неопределено;
				ДополнитьТекстСообщенияОбОшибке(
					ТекстСообщенияОбОшибке,
					ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Определения;
	
КонецФункции

Функция ПроверкаПодключенияЧерезОС(АдресВебСервисаДокументооборота, ДанныеСервиса, ИспользуетсяАутентификацияОС,
		ТекстСообщенияОбОшибке)
	
	Определения = Неопределено;
	
	Если ПоддерживаетсяАутентификацияОС() Тогда
		
		Попытка
			МестоположениеWSDL = СтрШаблон("%1ws/%2?wsdl",
				АдресВебСервисаДокументооборота,
				ДанныеСервиса.ПсевдонимВебСервисаДокументооборота);
			Определения = ПолучитьИОбновитьКэшWSОпределения(
				ДанныеСервиса,
				МестоположениеWSDL,
				"",
				"",
				Истина);
			ИспользуетсяАутентификацияОС = Истина;
		Исключение
			Определения = Неопределено;
			ДополнитьТекстСообщенияОбОшибке(
				ТекстСообщенияОбОшибке,
				ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		Если Определения = Неопределено Тогда
			Попытка
				МестоположениеWSDL = СтрШаблон("%1ws/%2?wsdl",
					АдресВебСервисаДокументооборота,
					ДанныеСервиса.ИмяВебСервисаДокументооборота);
				Определения = ПолучитьИОбновитьКэшWSОпределения(
					ДанныеСервиса,
					МестоположениеWSDL,
					"",
					"",
					Истина);
				ИспользуетсяАутентификацияОС = Истина;
			Исключение
				Определения = Неопределено;
				ДополнитьТекстСообщенияОбОшибке(
					ТекстСообщенияОбОшибке,
					ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Определения;
	
КонецФункции

Функция ПутьКДаннымРеквизита(Реквизит)
	
	Если Реквизит.Таблица <> "" Тогда
		Возврат Реквизит.Таблица + "." + Реквизит.Имя;
	Иначе
		Возврат Реквизит.Имя;
	КонецЕсли;
	
КонецФункции

Функция РазделительЭлементовСписка()
	
	Возврат "<СледующийЭлементСписка>";
	
КонецФункции

Функция РеквизитФормыПоИмени(РеквизитыФормы, ИмяРеквизита)
	
	Для Каждого Реквизит Из РеквизитыФормы Цикл
		Если Реквизит.Имя = ИмяРеквизита Тогда
			Возврат Реквизит;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Процедура СвернутьКомандыПечатиФормы(КомандыПечатиФормы)
	
	КоличествоКоманд = КомандыПечатиФормы.Количество();
	Если КоличествоКоманд < 2 Тогда
		Возврат;
	КонецЕсли;
	
	Для Номер = 1 По КоличествоКоманд Цикл
		ПроверяемаяКоманда = КомандыПечатиФормы[КоличествоКоманд - Номер];
		Для ТекущийНомер = 0 По КомандыПечатиФормы.Количество() - 1 Цикл
			КомандаПечати = КомандыПечатиФормы[ТекущийНомер];
			Если КомандыПечатиФормы.Индекс(ПроверяемаяКоманда) <> КомандыПечатиФормы.Индекс(КомандаПечати)
					И ПроверяемаяКоманда.Идентификатор = КомандаПечати.Идентификатор
					И ПроверяемаяКоманда.МенеджерПечати = КомандаПечати.МенеджерПечати
					И ПроверяемаяКоманда.ДополнительныеПараметрыВСтроку = КомандаПечати.ДополнительныеПараметрыВСтроку Тогда
				КомандыПечатиФормы.Удалить(ПроверяемаяКоманда);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция СкачатьФайлНаСервере(ИмяФайлаWSDL, СтруктураURI, ДанныеСервиса, ИмяПользователя, Пароль,
		ИспользуетсяАутентификацияОС)
	
	РезультатСкачивания = Новый Структура("Статус, КодСостояния, СообщениеОбОшибке", Истина, 200, "");
	
	Соединение = Новый HTTPСоединение(
		СтруктураURI.Хост,
		СтруктураURI.Порт,
		ИмяПользователя,
		Пароль,
		ДанныеСервиса.ИнтернетПрокси,
		ДанныеСервиса.Таймаут,
		ДанныеСервиса.ЗащищенноеСоединение,
		ИспользуетсяАутентификацияОС);
	
	HTTPЗапрос = Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере);
	HTTPЗапрос.Заголовки.Вставить("Accept-Charset", "utf-8");
	HTTPОтвет = Соединение.Получить(HTTPЗапрос, ИмяФайлаWSDL);
	РезультатСкачивания.КодСостояния = HTTPОтвет.КодСостояния;
	
	Если РезультатСкачивания.КодСостояния <> 200 Тогда
		РезультатСкачивания.Статус = Ложь;
		РезультатСкачивания.СообщениеОбОшибке = HTTPОтвет.ПолучитьТелоКакСтроку();
	КонецЕсли;
	
	Возврат РезультатСкачивания;
	
КонецФункции

Функция СтруктураПоискаРеквизита(ПутьКДанным)
	
	РазделеннаяСтрока = СтрРазделить(ПутьКДанным, ".");
	Если РазделеннаяСтрока.Количество() = 1 Тогда
		СтруктураПоиска = Новый Структура("Таблица, Имя", "", РазделеннаяСтрока[0]);
	Иначе
		СтруктураПоиска = Новый Структура("Таблица, Имя", РазделеннаяСтрока[0], РазделеннаяСтрока[1]);
	КонецЕсли;
	
	Возврат СтруктураПоиска;
	
КонецФункции

// Устанавливает ссылку нового объекта согласно идентификатору в дополнительных свойствах.
//
// Параметры:
//   Объект - ДокументОбъект
//          - СправочникОбъект - записываемый объект.
//
Процедура УстановитьСсылкуНовогоПередЗаписьюОбъекта(Объект)
	
	Если Не Объект.ДополнительныеСвойства.Свойство("ИдентификаторОбъектаДО")
			Или Не Объект.Ссылка.Пустая()
			Или ЗначениеЗаполнено(Объект.ПолучитьСсылкуНового()) Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторОбъектаДО = Объект.ДополнительныеСвойства.ИдентификаторОбъектаДО;
	
	УникальныйИдентификатор = Новый УникальныйИдентификатор(ИдентификаторОбъектаДО);
	ПолноеИмя = Объект.Метаданные().ПолноеИмя();
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
	СсылкаПоИдентификатору = Менеджер.ПолучитьСсылку(УникальныйИдентификатор);
	
	ТекстЗапроса = СтрЗаменить(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПолноеИмя.Ссылка КАК Ссылка
		|ИЗ
		|	&ПолноеИмя КАК ПолноеИмя
		|ГДЕ
		|	ПолноеИмя.Ссылка = &СсылкаПоИдентификатору",
		"&ПолноеИмя",
		ПолноеИмя);
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СсылкаПоИдентификатору", СсылкаПоИдентификатору);
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Объект.УстановитьСсылкуНового(СсылкаПоИдентификатору);
	КонецЕсли;
	
КонецПроцедуры

Функция ЭлементСправочникаИСПоИдентификаторуОбъектаXDTO(ЗначениеДляЗаполнения, МетаданныеОбъекта, МенеджерОбъекта,
		СсылкаПоИдентификатору)
	
	Результат = Неопределено;
	
	Если Не СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ЗначениеДляЗаполнения.ИдентификаторОбъектаДО)
			Или ПустаяСтрока(ЗначениеДляЗаполнения.ТипОбъектаДО) Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Возможно, соответствия созданы синхронизацией данных и идентификаторы элементов справочника совпадают.
	ВидСправочника = МетаданныеОбъекта.Имя;
	СсылкаПоИдентификатору = МенеджерОбъекта.ПолучитьСсылку(
		Новый УникальныйИдентификатор(ЗначениеДляЗаполнения.ИдентификаторОбъектаДО));
	
	// Возможно исключение RLS.
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СправочникОбъекта.Ссылка КАК Ссылка
		|ИЗ
		|	&Справочник КАК СправочникОбъекта
		|ГДЕ
		|	СправочникОбъекта.Ссылка = &СсылкаПоИдентификатору");
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст,
		"&Справочник",
		СтрШаблон("Справочник.%1", ВидСправочника));
	Запрос.УстановитьПараметр("СсылкаПоИдентификатору", СсылкаПоИдентификатору);
	
	Ошибка = Неопределено;
	Попытка
		Выборка = Запрос.Выполнить().Выбрать();
	Исключение
		Ошибка = ИнформацияОбОшибке();
		ПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(Ошибка);
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,
			СсылкаПоИдентификатору,
			ПредставлениеОшибки);
	КонецПопытки;
	
	Если Ошибка <> Неопределено Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Результат = Строка(Выборка.Ссылка);
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Недостаточно прав для доступа к этому объекту (%1).
					|Обратитесь к администратору.'"),
				Результат);
			ВызватьИсключение ТекстСообщения; // Подробные сведения - в журнале регистрации.
		КонецЕсли;
		
	КонецЕсли;
	
	Если Выборка.Следующий() Тогда
		// Объект найден.
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти