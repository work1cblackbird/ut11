
#Область СлужебныйПрограммныйИнтерфейс

#Область ПечатныеФормы


// Формирует отчет о сравнении версий документа сервиса по документу информационной базы
// 
// Параметры:
// 	Документ - ОпределяемыйТип.ПрикладнойДокументОбъектEDI - ссылка на документ информационной базы
// Возвращаемое значение:
// 	ТабличныйДокумент - сформированный сервисом отчет о сравнении версий
Функция СформироватьТекущиеОтличияДокумента(Документ) Экспорт
	
	ЗаписьРеестра = РегистрыСведений.СостоянияДокументовEDI.ЗаписиРеестраПоДокументам(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Документ)).Получить(Документ);
	
	Если ЗаписьРеестра = Неопределено Тогда
		ТекстИсключения = НСтр("ru = 'Формирование отчета о сравнении версий для документов, отсутствующих в сервисе, недоступно.'");
		ВызватьИсключение(ТекстИсключения);
	КонецЕсли;
	
	Если ЗаписьРеестра.ТипДокумента = Перечисления.ТипыДокументовEDI.ЗаказПоставщику Тогда
		
		ПараметрыПолученияПечатнойФормы = ИнтеграцияССервисомEDIСлужебный.НовыйПараметрыСравненияВерсийЗаказаПоставщику();
		
		ПараметрыПолученияПечатнойФормы.Организация            = ЗаписьРеестра.Организация;
		ПараметрыПолученияПечатнойФормы.ИдентификаторВСервисе  = ЗаписьРеестра.ИдентификаторВСервисе;
		ПараметрыПолученияПечатнойФормы.ИдентификаторВерсии1   = ЗаписьРеестра.СогласованнаяВерсияПоставщика;
		
		ОтветСервиса = ИнтеграцияССервисомEDIСлужебный.ПечатнаяФормаСравненияВерсийЗаказаПоставщику(ПараметрыПолученияПечатнойФормы);
		
	ИначеЕсли ЗаписьРеестра.ТипДокумента = Перечисления.ТипыДокументовEDI.ЗаказКлиента Тогда
		
		ПараметрыПолученияПечатнойФормы = ИнтеграцияССервисомEDIСлужебный.НовыйПараметрыСравненияВерсийЗаказаКлиента();
		
		ПараметрыПолученияПечатнойФормы.Организация            = ЗаписьРеестра.Организация;
		ПараметрыПолученияПечатнойФормы.ИдентификаторВСервисе  = ЗаписьРеестра.ИдентификаторВСервисе;
		ПараметрыПолученияПечатнойФормы.ИдентификаторВерсии1   = ЗаписьРеестра.СогласованнаяВерсияПокупателя;
		
		ОтветСервиса = ИнтеграцияССервисомEDIСлужебный.ПечатнаяФормаСравненияВерсийЗаказаКлиента(ПараметрыПолученияПечатнойФормы);
		
	КонецЕсли;
	
	Если ОтветСервиса.Ошибка Тогда
		ТекстИсключения = НСтр("ru = 'Не удалось сформировать отчет о сравнении версий.'");
		ВызватьИсключение(ТекстИсключения);
	КонецЕсли;
	
	Возврат ОтветСервиса.Данные.ОтчетОСравненииТолькоОтличия;
	
КонецФункции

#КонецОбласти

#Область СведенияОВерсияхДокумента

// Получает список версий документа из сервиса EDI
// 
// Параметры:
// 	Организация  - ОпределяемыйТип.ОрганизацияEDI       - организация документа
// 	ТипДокумента - ПеречислениеСсылка.ТипыДокументовEDI - тип документа сервиса
// 	Документ     - Строка                               - идентификатор документа сервиса
// Возвращаемое значение:
// 	ТаблицаЗначений -  см. РаботаСВерсиямиEDIСервер.НовыйТаблицаВерсий
Функция ПолучитьВерсииДокумента(Организация, ТипДокумента, Документ) Экспорт
	
	ТаблицаВерсийДокумента = НовыйТаблицаВерсий();
	
	РаботаСВерсиямиИнтеграцияEDIСервер.ПриЗаполненииВерсийДокумента(ТаблицаВерсийДокумента, Организация, ТипДокумента, Документ);
	
	Возврат ТаблицаВерсийДокумента;
	
КонецФункции

#КонецОбласти

#Область Конструкторы

// Конструктор новый таблицы версий документа сервиса
// 
// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// * ИдентификаторВерсии - Строка - идентификатор версии документа сервиса
// * ПредставлениеВерсии - Строка - пользовательское представление версии документа
// * ПредставлениеАвтора - Строка - пользовательское представление автора версии
// * Дата                - Дата   - дата создания версии документа
// * Состояние           - Строка - идентификатор состояния документа сервиса
//
Функция НовыйТаблицаВерсий() Экспорт
	
	ТаблицаВерсий = Новый ТаблицаЗначений;
	
	ТаблицаВерсий.Колонки.Добавить("ИдентификаторВерсии" , Новый ОписаниеТипов("Строка"));
	ТаблицаВерсий.Колонки.Добавить("ПредставлениеВерсии" , Новый ОписаниеТипов("Строка"));
	ТаблицаВерсий.Колонки.Добавить("ПредставлениеАвтора" , Новый ОписаниеТипов("Строка"));
	ТаблицаВерсий.Колонки.Добавить("Дата"                , Новый ОписаниеТипов("Дата", , , 
		Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаВерсий.Колонки.Добавить("Состояние"           , Новый ОписаниеТипов("Строка"));
	
	Возврат ТаблицаВерсий;
	
КонецФункции

#КонецОбласти

#Область СловарьТерминов

Функция ИдентификаторТекущейРевизииСервиса() Экспорт
	
	Возврат "lastRevision";
	
КонецФункции

Функция ПредставлениеСостоянияТекущаяРевизия() Экспорт
	Возврат НСтр("ru = 'Редактируемый документ'");
КонецФункции

#КонецОбласти

#КонецОбласти