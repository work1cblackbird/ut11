///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "ИнтернетПоддержкаПользователей.ОблачныйАрхив20".
// ОбщийМодуль.ОблачныйАрхив20.
//
// Серверные процедуры и функции Облачного архива:
//  - взаимодействие с сервисом Облачного архива;
//  - взаимодействие с Агентом облачного архива;
//  - подключение информационной базы к Облачному архиву;
//  - создание ручной резервной копии;
//  - обработки событий Библиотеки стандартных подсистем.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ИнтеграцияСБиблиотекойСтандартныхПодсистем

// Вызывается из обработчика ПриСозданииНаСервере() формы Обслуживание панели администрирования БСП. Выполняет настройку
// отображения элементов управления связанных с облачным архивом.
//
// Параметры:
//  Форма - см. Обработка.ПанельАдминистрированияБСП.Форма.Обслуживание
//
Процедура Обслуживание_ПриСозданииНаСервере(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	// Проверка доступности сервиса Облачный архив
	Если Не ДоступноИспользованиеСервисаОблачныйАрхив(Истина) Тогда
		Элементы.СтраницаОблачныйАрхив.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	ПараметрыАрхивирования = СохраненныеПараметрыРезервногоКопирования();
	СписокПодсистем        = Элементы.ХранениеРезервныхКопий.СписокВыбора;	// СписокЗначений из Строка
	
	// Определение количества доступных подсистем резервного копирования:
	// СтандартныеПодсистемы.РезервноеКопированиеИБ
	Если Элементы.СтраницаНаЛокальномКомпьютере.Видимость Тогда
		СписокПодсистем.Добавить(
			ИдентификаторРезервногоКопированияБСП(),
			НСтр("ru = 'на локальном компьютере'"));
	КонецЕсли;
	
	СписокПодсистем.Добавить(
		ИдентификаторРезервногоКопированияОблачныйАрхив(),
		НСтр("ru = 'в облаке Фирмы ""1С""'"));
	
	Элементы.ХранениеРезервныхКопий.Видимость = (СписокПодсистем.Количество() > 1);
	Форма.ХранениеРезервныхКопий              = АктивнаяПодсистемаРезервногоКопирования();
	Если СписокПодсистем.НайтиПоЗначению(Форма.ХранениеРезервныхКопий) = Неопределено Тогда
		
		СохранитьНастройку           = (Не ОбщегоНазначения.ПодсистемаСуществует(Форма.ХранениеРезервныхКопий)
			Или Не ОбщегоНазначения.КлиентПодключенЧерезВебСервер());
		Форма.ХранениеРезервныхКопий = СписокПодсистем[0].Значение;
		
		Если СохранитьНастройку Тогда
			
			СохранитьНастройки(
				КлючНастроекАктивнаяПодсистемаРезервногоКопирования(),
				Форма.ХранениеРезервныхКопий);
			
			ТекстИнформации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Установлена активная подсистема резервного копирования:
					|%1'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
				Форма.ХранениеРезервныхКопий);
			ЗаписатьИнформациюВЖурналРегистрации(ТекстИнформации);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Форма.ХранениеРезервныхКопий = ИдентификаторРезервногоКопированияБСП() Тогда
		
		Элементы.СтраницыРезервноеКопированиеИВосстановление.ТекущаяСтраница = Элементы.СтраницаНаЛокальномКомпьютере;
		
		// Отображение информации о работе облачного архива
		Элементы.ГруппаОблачныйАрхивРаботает.Видимость =
			ПодключениеОблачногоАрхиваВыполненоСлужебный(ПараметрыАрхивирования)
			И ПараметрыАрхивирования.АвтоматическоеРезервноеКопированиеВключено
			И ПараметрыАрхивирования.РаботаРезервногоКопированияЗаблокирована = Ложь;
		
	Иначе
		
		Элементы.СтраницыРезервноеКопированиеИВосстановление.ТекущаяСтраница = Элементы.СтраницаОблачныйАрхив;
		
		Если ПодключениеОблачногоАрхиваВыполненоСлужебный(ПараметрыАрхивирования) Тогда
			Если ПараметрыАрхивирования.РаботаРезервногоКопированияЗаблокирована = Ложь Тогда
				Элементы.СтраницыСостоянийОблачныйАрхив.ТекущаяСтраница = Элементы.СтраницаОблачныйАрхивРаботает;
			Иначе
				Элементы.СтраницыСостоянийОблачныйАрхив.ТекущаяСтраница = Элементы.СтраницаОблачныйАрхивЗаблокирован;
			КонецЕсли;
		Иначе
			Элементы.СтраницыСостоянийОблачныйАрхив.ТекущаяСтраница = Элементы.СтраницаОблачныйАрхивНеПодключен;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает признак работы подсистемы РезервноеКопированиеИБ в качестве основной подсистемы архивирования.
//
// Возвращаемое значение:
//  Булево - Истина, если подсистема РезервноеКопированиеИБ является основной подсистемой архивирования.
//
Функция ИспользуетсяПодсистемаРезервногоКопированияИБ() Экспорт
	
	АктивнаяПодсистема = АктивнаяПодсистемаРезервногоКопирования();
	
	Возврат (АктивнаяПодсистема = ИдентификаторРезервногоКопированияБСП());
	
КонецФункции

#КонецОбласти

// Проверяет доступность инструмента создания резервной копии в Облачный архив.
//
// Возвращаемое значение:
//  Булево - Истина, если инструмент создания резервной копии доступен.
//
Функция СозданиеРезервнойКопииДоступно() Экспорт
	
	Возврат ПравоДоступа("Просмотр", Метаданные.Обработки.ОблачныйАрхив20)
		И ДоступноИспользованиеСервисаОблачныйАрхив();
	
КонецФункции

// Возвращает признак подключения информационной базы к Облачному архиву.
//
// Возвращаемое значение:
//  Булево - Истина, если параметры резервного копирования хранят информацию о пройденной процедуре регистрации в
//    сервисе Облачного архива.
//
Функция ПодключениеОблачногоАрхиваВыполнено() Экспорт
	
	Возврат ПодключениеОблачногоАрхиваВыполненоСлужебный();
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ИнтеграцияПодсистемИнтернетПоддержкиПользователей

// Заполняет описание используемых в подсистеме хостов сервисов Интернет-поддержки.
//
// Параметры:
//  ХостыСервисовИнтернетПоддержки - Соответствие - хост и название используемого сервиса.
//
Процедура ПриЗаполненииХостовСервисовИнтернетПоддержки(ХостыСервисовИнтернетПоддержки) Экспорт
	
	СтруктураURL = ОбщегоНазначенияКлиентСервер.СтруктураURI(БазовыйURLСервиса());
	
	ХостыСервисовИнтернетПоддержки.Вставить(
		СтруктураURL.Хост,
		НСтр("ru = 'Интеграция с 1С:Облачный архив'"));
	
КонецПроцедуры

// Регистрирует список сервисов, которые доступны для использования в конфигурации.
//
// Параметры:
//   СервисыСопровождения - Массив из см. ПодключениеСервисовСопровождения.НовыйОписательСервиса - сервисы
//     доступные для использовании в конфигурации.
//
Процедура ПриДобавленииОписанийСервисовСопровождения(СервисыСопровождения) Экспорт
	
	МодульПодключениеСервисовСопровождения = ОбщегоНазначения.ОбщийМодуль("ПодключениеСервисовСопровождения");
	ОписательСервиса = МодульПодключениеСервисовСопровождения.НовыйОписательСервиса();
	ОписательСервиса.Идентификатор = ИдентификаторСервиса();
	ОписательСервиса.Картинка      = Метаданные.ОбщиеКартинки.Сервис1СОблачныйАрхив48;
	ОписательСервиса.Наименование  = НСтр("ru = '1С:Облачный архив'");
	ОписательСервиса.Описание      =
		НСтр("ru = 'Автоматическое резервное копирование информационных баз в облачное хранилище 1С.'");
	СервисыСопровождения.Добавить(ОписательСервиса);
	
КонецПроцедуры

#КонецОбласти

#Область ИнтеграцияСБиблиотекойСтандартныхПодсистем

// Добавляет необходимые параметры работы клиента при запуске. Добавленные параметры доступны в
// СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиентаПриЗапуске().ИнтернетПоддержкаПользователей.<ИмяПараметра>;
// Используется в том случае, если подсистема реализует сценарий, выполняемый при начале работы системы.
// Вызывается из ИнтеграцияПодсистемБИП.ПриДобавленииПараметровРаботыКлиентаПриЗапуске().
//
// Параметры:
//  Параметры - см. ОбщегоНазначенияПереопределяемый.ПриДобавленииПараметровРаботыКлиентаПриЗапуске.Параметры
//
Процедура ПараметрыРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	ПараметрыАрхивирования   = Неопределено;	// см. НовыйПараметрыРезервногоКопирования
	ПараметрыОблачногоАрхива = Неопределено;	// см. НовыйПараметрыОблачногоАрхиваПриЗапуске
	
	Если Не ДоступноИспользованиеСервисаОблачныйАрхив(Ложь)
		Или Не ПодключениеОблачногоАрхиваВыполненоСлужебный(ПараметрыАрхивирования) Тогда
		
		Параметры.Вставить("ОблачныйАрхив", ПараметрыОблачногоАрхива);
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыОблачногоАрхива = НовыйПараметрыОблачногоАрхиваПриЗапуске();
	ПараметрыОблачногоАрхива.ОблачныйАрхивПодключен = Истина;
	
	// Проверка установленной блокировки
	Если ПараметрыАрхивирования.РаботаРезервногоКопированияЗаблокирована = Неопределено
		И ДоступноИспользованиеСервисаОблачныйАрхив(Истина) Тогда
		
		ПараметрыОблачногоАрхива.ПоказатьФормуВосстановленияРаботыОблачногоАрхива = Истина;
		
	КонецЕсли;
	
	// Запуск автоматического резервного копирования
	ПараметрыОблачногоАрхива.АвтоматическоеАрхивирование = ОбновитьВремяДоАвтоматическогоРезервногоКопированияВФоне(
		ПараметрыАрхивирования);
	
	// Чтение общих настроек
	ИмяПользователя      = ИмяПользователя();
	НастройкиКопирования = НовыйНастройкаРучногоРезервногоКопирования();
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаполнитьЗначенияСвойств(
		НастройкиКопирования,
		ЗагрузитьНастройки(
			КлючНастроекРучногоРезервногоКопирования(),
			Новый Структура()));
	
	Если Не ПустаяСтрока(НастройкиКопирования.ЗаданиеID) Тогда
		
		СохранитьНастройки(
			КлючНастроекДатаПоследнегоРезервногоКопирования(),
			НастройкиКопирования.ДатаКопии);
		
		ТекстИнформации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Установлена дата последнего резервного копирования:
				|%1'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			НастройкиКопирования.ДатаКопии);
		ЗаписатьИнформациюВЖурналРегистрации(ТекстИнформации);
		
		Если НастройкиКопирования.Пользователь = ИмяПользователя Тогда
			Если ПравоДоступа("Просмотр", Метаданные.Обработки.ОблачныйАрхив20) Тогда
				// Удаление общей настройки выполняется при открытии формы отображения статуса
				ПараметрыОблачногоАрхива.ПоказатьФормуСтатусаРучногоРезервногоКопирования = НастройкиКопирования;
			Иначе
				// Удаление данных из общего хранилища, так как права на просмотр статуса резервного копирования нет.
				УдалитьНастройки(
					КлючНастроекРучногоРезервногоКопирования());
			КонецЕсли;
		Иначе
			// Сохранение настроек для уведомления пользователя-инициатора
			СохранитьНастройки(
				КлючНастроекРучногоРезервногоКопирования(),
				НастройкиКопирования,
				НастройкиКопирования.Пользователь);
		КонецЕсли;
		
	КонецЕсли;
	
	// Если есть общая настройка для текущего пользователя, то индивидуальную читать не обязательно
	Если ПараметрыОблачногоАрхива.ПоказатьФормуСтатусаРучногоРезервногоКопирования = Неопределено Тогда
		
		// Чтение личных настроек
		НастройкиКопированияПользователя = НовыйНастройкаРучногоРезервногоКопирования();
		ЗаполнитьЗначенияСвойств(
			НастройкиКопированияПользователя,
			ЗагрузитьНастройки(
				КлючНастроекРучногоРезервногоКопирования(),
				Новый Структура(),
				ИмяПользователя));
		
		Если Не ПустаяСтрока(НастройкиКопированияПользователя.ЗаданиеID) Тогда
			Если ПравоДоступа("Просмотр", Метаданные.Обработки.ОблачныйАрхив20) Тогда
				// Удаление индивидуальной настройки выполняется при открытии формы отображения статуса
				ПараметрыОблачногоАрхива.ПоказатьФормуСтатусаРучногоРезервногоКопирования =
					НастройкиКопированияПользователя;
			Иначе
				// Удаление данных из общего хранилища, так как права на просмотр статуса резервного копирования нет.
				УдалитьНастройки(
					КлючНастроекРучногоРезервногоКопирования(),
					ИмяПользователя);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Параметры.Вставить("ОблачныйАрхив", ПараметрыОблачногоАрхива);
	
КонецПроцедуры

// Вызывается при установке блокировки работы с внешними ресурсами и устанавливает признак запрета резервного
// копирования в облачный архив.
//
Процедура ЗаблокироватьОблачныйАрхив() Экспорт
	
	ПараметрыАрхивирования = Неопределено;	// см. НовыйПараметрыРезервногоКопирования
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных();
		Блокировка.Добавить("Константа.ПараметрыРезервногоКопированияВОблачныйАрхив20");
		Блокировка.Заблокировать();
		
		Если ПодключениеОблачногоАрхиваВыполненоСлужебный(ПараметрыАрхивирования) Тогда
			ПараметрыАрхивирования.РаботаРезервногоКопированияЗаблокирована = Истина;
			СохранитьПараметрыРезервногоКопирования(ПараметрыАрхивирования);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		СообщениеОбОшибке = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписатьИнформациюВЖурналРегистрации(СообщениеОбОшибке, Истина);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Вызывается при снятии блокировки работы с внешними ресурсами. Выполняет проверку изменения URI информационной базы
// от ранее сохраненного значения и определяет работу облачного архива.
//
Процедура РазблокироватьОблачныйАрхив() Экспорт
	
	ПараметрыАрхивирования = Неопределено;	// см. НовыйПараметрыРезервногоКопирования
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных();
		Блокировка.Добавить("Константа.ПараметрыРезервногоКопированияВОблачныйАрхив20");
		Блокировка.Заблокировать();
		
		Если ПодключениеОблачногоАрхиваВыполненоСлужебный(ПараметрыАрхивирования) Тогда
			
			ТекущийURI = URIТекущегоПодключения();
			Если ПустаяСтрока(ТекущийURI) Тогда
				// Подсистема Облачный архив не доступна для текущего подключения
				ПараметрыАрхивирования.РаботаРезервногоКопированияЗаблокирована = Истина;
			ИначеЕсли ПараметрыАрхивирования.URI = ТекущийURI Тогда
				ПараметрыАрхивирования.РаботаРезервногоКопированияЗаблокирована = Ложь;
			Иначе
				// Установка признака необходимости принять решения по работе подсистемы
				ПараметрыАрхивирования.РаботаРезервногоКопированияЗаблокирована = Неопределено;
			КонецЕсли;
			
			СохранитьПараметрыРезервногоКопирования(ПараметрыАрхивирования);
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписатьИнформациюВЖурналРегистрации(ИнформацияОбОшибке, Истина);
		
		ВызватьИсключение ИнформацияОбОшибке;
		
	КонецПопытки;
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

// См. РаботаВБезопасномРежимеПереопределяемый.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам.
//
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
	НовыеРазрешения               = Новый Массив();
	МодульРаботаВБезопасномРежиме = ОбщегоНазначения.ОбщийМодуль("РаботаВБезопасномРежиме");
	СтруктураURL                  = ОбщегоНазначенияКлиентСервер.СтруктураURI(
		БазовыйURLСервиса());
	
	Разрешение = МодульРаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTPS",
		СтруктураURL.Хост,
		443,
		НСтр("ru = 'Сервис интеграции с 1С:Облачный архив'"));
	
	НовыеРазрешения.Добавить(Разрешение);
	
	ЗапросыРазрешений.Добавить(
		МодульРаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(НовыеРазрешения));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнтеграцияСБиблиотекойСтандартныхПодсистем

// Вызывается из обработчика ПриИзменении() элемента ХраненияРезервныхКопий формы Обслуживание панели администрирования
// БСП. Управляет отображением элементов управления связанных с выбранным вариантом хранения резервных копий.
//
// Параметры:
//  ХранениеРезервныхКопий - Строка - описание параметра
//    см. ОблачныйАрхив20Клиент.Обслуживание_ХранениеРезервныхКопийПриИзменении.ХранениеРезервныхКопий
//
// Возвращаемое значение:
//  Структура:
//    * СтраницаРезервногоКопированияИВосстановления - Строка - имя страницы группы резервного копирования, обработки
//        панели администрирования БСП, соответствующий активной подсистеме резервного копирования.
//    * СтраницаСостоянияОблачногоАрхива - Строка - имя страницы соответствующий статусу работы подсистемы Облачного
//        архива.
//    * ОблачныйАрхивРаботает - Неопределено - проверка работы облачного не выполнялась, так как текущий режим
//        резервного копирования установлен как ОблачныйАрхив20.
//                            - Булево - Истина, если облачный архив продолжает работать не зависимо от установленного
//        способа резервного копирования.
//
Функция ПриИзмененииХраненияРезервныхКопий(ХранениеРезервныхКопий) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("СтраницаРезервногоКопированияИВосстановления", "");
	Результат.Вставить("СтраницаСостоянияОблачногоАрхива"            , "");
	Результат.Вставить("ОблачныйАрхивРаботает"                       , Неопределено);
	
	ПараметрыАрхивирования = СохраненныеПараметрыРезервногоКопирования();
	Если ХранениеРезервныхКопий = ИдентификаторРезервногоКопированияБСП() Тогда
		
		Результат.СтраницаРезервногоКопированияИВосстановления = "СтраницаНаЛокальномКомпьютере";
		Результат.ОблачныйАрхивРаботает                        =
			ПодключениеОблачногоАрхиваВыполненоСлужебный(ПараметрыАрхивирования)
			И ПараметрыАрхивирования.АвтоматическоеРезервноеКопированиеВключено
			И ПараметрыАрхивирования.РаботаРезервногоКопированияЗаблокирована = Ложь;
		
	Иначе
		
		Результат.СтраницаРезервногоКопированияИВосстановления = "СтраницаОблачныйАрхив";
		
		Если ПодключениеОблачногоАрхиваВыполненоСлужебный(ПараметрыАрхивирования) Тогда
			Если ПараметрыАрхивирования.РаботаРезервногоКопированияЗаблокирована = Ложь Тогда
				Результат.СтраницаСостоянияОблачногоАрхива = "СтраницаОблачныйАрхивРаботает";
			Иначе
				Результат.СтраницаСостоянияОблачногоАрхива = "СтраницаОблачныйАрхивЗаблокирован";
			КонецЕсли;
		Иначе
			Результат.СтраницаСостоянияОблачногоАрхива = "СтраницаОблачныйАрхивНеПодключен";
		КонецЕсли;
		
	КонецЕсли;
	
	АктивнаяПодсистема = АктивнаяПодсистемаРезервногоКопирования();
	Если АктивнаяПодсистема <> ХранениеРезервныхКопий Тогда
		
		СохранитьНастройки(
			КлючНастроекАктивнаяПодсистемаРезервногоКопирования(),
			ХранениеРезервныхКопий);
		
		ТекстИнформации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Установлена активная подсистема резервного копирования:
				|%1'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			ХранениеРезервныхКопий);
		ЗаписатьИнформациюВЖурналРегистрации(ТекстИнформации);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбщегоНазначения

// Проверяет доступность подсистемы для операционной системы клиента и режима работы информационной системы.
//
// Параметры:
//  ПроверитьДоступКНастройкам - Булево - Истина, если необходимо дополнительно проверить доступ текущего пользователя к
//  операции подключения и настройки Облачного архива.
//
// Возвращаемое значение:
//  Булево - Истина, если подсистема доступна для использования.
//
Функция ДоступноИспользованиеСервисаОблачныйАрхив(ПроверитьДоступКНастройкам = Ложь) Экспорт
	
	Возврат (Не ПроверитьДоступКНастройкам
		Или Пользователи.ЭтоПолноправныйПользователь(, Истина))
		И Не ОбщегоНазначения.РазделениеВключено()
		И Не ОбщегоНазначения.ЭтоАвтономноеРабочееМесто()
		И ОбщегоНазначения.ЭтоWindowsКлиент()
		И ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
КонецФункции

// Возвращает информацию о активной на данный момент подсистемы резервного копирования.
//
// Возвращаемое значение:
//  Строка - полное имя активной подсистемы резервного копирование.
//
Функция АктивнаяПодсистемаРезервногоКопирования()
	
	Если ОбщегоНазначения.ПодсистемаСуществует(ИдентификаторРезервногоКопированияБСП()) Тогда
		ПодсистемаПоУмолчанию = ИдентификаторРезервногоКопированияБСП();
	Иначе
		ПодсистемаПоУмолчанию = ИдентификаторРезервногоКопированияОблачныйАрхив();
	КонецЕсли;
	
	Возврат ЗагрузитьНастройки(
		КлючНастроекАктивнаяПодсистемаРезервногоКопирования(),
		ПодсистемаПоУмолчанию);
	
КонецФункции

// Идентификатор подсистемы в сервисах Фирмы 1С.
//
// Возвращаемое значение:
//  Строка
//
Функция ИдентификаторСервиса() Экспорт
	
	Возврат "1C-Cloud-backup";
	
КонецФункции

// Выполняет проверку завершения процесса активации Агента облачного архива.
//
// Параметры:
//  ПараметрыРезервногоКопирования - см. НовыйПараметрыРезервногоКопирования
//
// Возвращаемое значение:
//  Булево - Истина, если Агент облачного архива активирован.
//
Функция АгентОблачногоАрхиваАктивирован(ПараметрыРезервногоКопирования)
	
	Возврат Не ПустаяСтрока(ПараметрыРезервногоКопирования.АгентID);
	
КонецФункции

// Выполняет проверку завершения процесса регистрации объект резервного копирования.
//
// Параметры:
//  ПараметрыРезервногоКопирования - см. НовыйПараметрыРезервногоКопирования
//
// Возвращаемое значение:
//  Булево - Истина, если объект резервного копирования зарегистрирован.
//
Функция ОбъектРезервногоКопированияЗарегистрирован(ПараметрыРезервногоКопирования)
	
	Возврат Не ПустаяСтрока(ПараметрыРезервногоКопирования.URI);
	
КонецФункции

// Возвращает новую структуру ответа сервиса.
//
// Возвращаемое значение:
//  Структура:
//    * Статус - Строка - статус ответа сервиса.
//    * СообщениеПользователю - Строка - сообщение, которое будет отображено в пользовательском интерфейсе при ошибке.
//    * СообщениеТехподдержке - Строка - сообщение, которое будет вставлено в письмо к технической поддержке.
//
Функция НовыйОтветСервиса()
	
	Результат = Новый Структура();
	Результат.Вставить("Статус"               , "");
	Результат.Вставить("СообщениеПользователю", "");
	Результат.Вставить("СообщениеТехподдержке", "");
	
	Возврат Результат;
	
КонецФункции

// Возвращает текущий URI информационной базы по строке соединения информационной базы.
//
// Возвращаемое значение:
//  Строка
//
Функция URIТекущегоПодключения()
	
	Результат = "";
	Если ДоступноИспользованиеСервисаОблачныйАрхив(Истина) Тогда
		
		СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
		
		Результат = Сред(СтрокаСоединения, 7, СтрНайти(СтрокаСоединения, """", , 7) - 7);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает базовый адрес сервиса.
//
// Возвращаемое значение:
//  Строка
//
Функция БазовыйURLСервиса() Экспорт
	
	Возврат "https://api.backup.1capp.net/";
	
КонецФункции

// Получает имя этой информационной базы из константы или из синонима конфигурации.
//
// Возвращаемое значение:
//  Строка
//
Функция ИмяЭтойИнформационнойБазы()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Константы.ЗаголовокСистемы.Получить();
	
	Если ПустаяСтрока(Результат) Тогда
		
		Результат = Метаданные.Синоним;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Часовой пояс текущего сеанса относительно UTC.
// Формат значения (+/-)hh:mm, где hh - значение часа текущего пояса с лидирующим нулем; mm - значение времени часового
// пояса.
//
// Возвращаемое значение:
//  Строка - Часовой пояс сеанса UTC
//
Функция ЧасовойПоясСеансаUTC()
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	СмещенияВремени   = ТекущаяДатаСеанса - УниверсальноеВремя(ТекущаяДатаСеанса, ЧасовойПоясСеанса());
	ЧасыСмещения      = Цел(СмещенияВремени / 3600);
	Результат         = ?(ЧасыСмещения >= 0, "+", "-") + Формат(ЧасыСмещения, "ЧЦ=2; ЧН=00; ЧВН=;");
	МинутыСмещения    = СмещенияВремени % 3600 / 60;
	
	Если МинутыСмещения < 0 Тогда
		МинутыСмещения = - МинутыСмещения;
	КонецЕсли;
	
	Возврат Результат + ":" + Формат(МинутыСмещения,"ЧЦ=2; ЧДЦ=0; ЧН=00; ЧВН=");
	
КонецФункции

// Часовой пояс сервера относительно UTC.
// Формат значения (+/-)hh:mm, где hh - значение часа текущего пояса с лидирующим нулем; mm - значение времени часового
// пояса.
//
// Возвращаемое значение:
//  Строка - Часовой пояс сервера
//
Функция ЧасовойПоясUTC()
	
	СмещенияВремени = СмещениеСтандартногоВремени() + СмещениеЛетнегоВремени();
	ЧасыСмещения    = Цел(СмещенияВремени / 3600);
	Результат       = ?(ЧасыСмещения >= 0, "+", "") + Формат(ЧасыСмещения,"ЧЦ=2; ЧН=00; ЧВН=;");
	МинутыСмещения  = СмещенияВремени % 3600 / 60;
	
	Если МинутыСмещения < 0 Тогда
		МинутыСмещения = - МинутыСмещения;
	КонецЕсли;
	
	Возврат Результат + ":" + Формат(МинутыСмещения,"ЧЦ=2; ЧДЦ=0; ЧН=00; ЧВН=");
	
КонецФункции

#КонецОбласти

#Область ПараметрыРезервногоКопирования

// Возвращает признак подключения информационной базы к Облачному архиву.
//
// Параметры:
//  ПараметрыРезервногоКопирования - см. НовыйПараметрыРезервногоКопирования
//
// Возвращаемое значение:
//  Булево - Истина, если параметры резервного копирования хранят информацию о пройденной процедуре регистрации в
//    сервисе Облачного архива.
//
Функция ПодключениеОблачногоАрхиваВыполненоСлужебный(ПараметрыРезервногоКопирования = Неопределено) Экспорт
	
	Если ПараметрыРезервногоКопирования = Неопределено Тогда
		ПараметрыРезервногоКопирования = СохраненныеПараметрыРезервногоКопирования();
	КонецЕсли;
	
	Возврат АгентОблачногоАрхиваАктивирован(ПараметрыРезервногоКопирования)
		И ОбъектРезервногоКопированияЗарегистрирован(ПараметрыРезервногоКопирования);
	
КонецФункции

// Возвращает структуру сохраненных параметров резервного копирования облачного архива. Если сохраненные параметры
// отсутствуют, то возвращаются значения параметров по умолчанию.
//
// Возвращаемое значение:
//  см. НовыйПараметрыРезервногоКопирования
//
Функция СохраненныеПараметрыРезервногоКопирования() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	СохраненныеПараметры = Константы.ПараметрыРезервногоКопированияВОблачныйАрхив20.Получить().Получить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Результат = НовыйПараметрыРезервногоКопирования();
	
	// Автоматическая инициализация
	Если СохраненныеПараметры = Неопределено Тогда
		СохранитьПараметрыРезервногоКопирования(Результат);
	
	// Переинициализация новых свойств
	ИначеЕсли ТипЗнч(СохраненныеПараметры) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(Результат, СохраненныеПараметры);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выполняет сброс всех параметров резервного копирования и возвращает параметры по умолчанию.
//
// Возвращаемое значение:
//  см. НовыйПараметрыРезервногоКопирования
//
Функция СброситьПараметрыРезервногоКопирования() Экспорт
	
	ПараметрыРезервногоКопирования = НовыйПараметрыРезервногоКопирования();
	
	СохранитьПараметрыРезервногоКопирования(ПараметрыРезервногоКопирования);
	
	Возврат ПараметрыРезервногоКопирования;
	
КонецФункции

// Возвращает значения параметров резервного копирования по умолчанию.
//
// Возвращаемое значение:
//  Структура:
//    * URI - Строка - путь размещения зарегистрированной базы в Облачном архиве.
//    * АгентID - Строка - строка идентификатора Агента облачного архива, полученного при активации.
//    * РаботаРезервногоКопированияЗаблокирована - Булево - признак установленной блокировки автоматического резервного
//        копирования.
//                                               - Неопределено - если необходимо задать вопрос администратору системы
//        об обновлении настроек резервного копирования после перемещения информационной базы.
//    * ЛогинИПП - Строка - логин Интернет-поддержки пользователей под которым была выполнена активация Агента.
//    * АвтоматическоеРезервноеКопированиеВключено - Булево - признак включенной настройки автоматического резервного
//        копирования информационной базы.
//    * ЗавершатьРаботуПользователей - Булево - признак принудительного завершения работы пользователей при
//        автоматическом резервном копировании информационной базы.
//    * ДатаОбновленияНастроек - Дата - дата последнего обновления настроек в формате универсального времени.
//        Используется для определения необходимости выполнить обновление времени наступления автоматического резервного
//        копирования информационной базы.
//
Функция НовыйПараметрыРезервногоКопирования()
	
	Результат = Новый Структура();
	Результат.Вставить("URI"                                       , "");
	Результат.Вставить("АгентID"                                   , "");
	Результат.Вставить("РаботаРезервногоКопированияЗаблокирована"  , Ложь);
	Результат.Вставить("ЛогинИПП"                                  , "");
	Результат.Вставить("АвтоматическоеРезервноеКопированиеВключено", Ложь);
	Результат.Вставить("ЗавершатьРаботуПользователей"              , Ложь);
	Результат.Вставить("ДатаОбновленияНастроек"                    , '00010101');
	
	Возврат Результат;
	
КонецФункции

// Выполняет сохранение переданных параметров резервного копирования в константу
// ПараметрыРезервногоКопированияВОблачныйАрхив20.
//
// Параметры:
//  ПараметрыРезервногоКопирования - см. НовыйПараметрыРезервногоКопирования
//
Процедура СохранитьПараметрыРезервногоКопирования(ПараметрыРезервногоКопирования)
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных();
		Блокировка.Добавить("Константа.ПараметрыРезервногоКопированияВОблачныйАрхив20");
		Блокировка.Заблокировать();
		
		ХранилищеЗначения = Новый ХранилищеЗначения(ПараметрыРезервногоКопирования);
		
		УстановитьПривилегированныйРежим(Истина);
		Константы.ПараметрыРезервногоКопированияВОблачныйАрхив20.Установить(ХранилищеЗначения);
		УстановитьПривилегированныйРежим(Ложь);
		
		ТекстИнформации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Сохранены параметры резервного копирования:
				|%1'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			ЗначениеВСтрокуJSON(ПараметрыРезервногоКопирования));
		ЗаписатьИнформациюВЖурналРегистрации(ТекстИнформации);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстСообщения     = НСтр("ru = 'Не удалось сохранить параметры резервного копирования.
			|%1'");
		
		ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстСообщения,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)),
			Истина);
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения,
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ЖурналРегистрации

// Добавляет запись в журнал регистрации с указанием имени события подсистемы Облачного архива.
//
// Параметры:
//  Сообщение - Строка - комментарий к записи журнала регистрации.
//  Ошибка - Булево - если Истина, то будет установлен уровень журнала регистрации "Ошибка". Значение по умолчанию:
//    Ложь.
//
Процедура ЗаписатьИнформациюВЖурналРегистрации(Сообщение, Ошибка = Ложь) Экспорт
	
	УровеньЖурнала = ?(Ошибка,
		УровеньЖурналаРегистрации.Ошибка,
		УровеньЖурналаРегистрации.Информация);	// УровеньЖурналаРегистрации
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации(),
		УровеньЖурнала,
		,
		,
		Лев(
			СокрЛП(Сообщение),
			5120));
	
КонецПроцедуры

// Возвращает имя события для журнала регистрации.
//
// Возвращаемое значение:
//  Строка
//
Функция ИмяСобытияЖурналаРегистрации()
	
	Возврат НСтр(
		"ru = 'Облачный архив'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

#КонецОбласти

#Область ИнициализацияНастроекСервиса

// Выполняет проверку подключения Облачного архива и запускает следующие шаги процесса проверки готовности
// программно-аппаратного комплекса 1С:Облачный архив.
//
// Параметры:
//  ПараметрыИнициализации - Структура:
//    * ПараметрыАрхивирования - см. НовыйПараметрыРезервногоКопирования
//    * СохранитьДанныеАутентификации - Булево - признак необходимости сохранить введенные пользователем данные
//        аутентификации.
//    * ПользовательскоеСоглашениеПринято - Булево - признак принятия пользователем пользовательского соглашения.
//        Используется, если выполняется процесс подключения к Облачному архиву.
//    * ДанныеАутентификации - Структура:
//        ** Логин - Строка - Логин к порталу 1С:ИТС.
//        ** Пароль - Строка - Пароль к порталу 1С:ИТС.
//    * РежимОбновленияНастроек - Строка - строковый идентификатор режима обновления настроек. Заполняется в сценарии
//        перемещения информационной базы. Доступные значения:
//        см. ОблачныйАрхив20КлиентСервер.ИдентификаторРежимаОбновленияОбновитьАдресРазмещения - используется в
//            сценарии перемещения информационной базы.
//
// Возвращаемое значение:
//  Структура:
//    * Статус - Строка - статус процесса инициализации настроек. Возможные значения:
//        см. ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаИнформационнаяБазаПеремещена
//        см. ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаОблачныйАрхивНеПодключен
//        см. ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаИППНеПодключена
//        см. ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаИПППодключенНаДругойЛогин
//        см. ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаОблачныйАрхивНедоступен
//        см. ИдентификаторСтатусаОшибкаЗапроса
//        см. ИдентификаторСтатусаОшибкаСервиса
//        см. ОблачныйАрхив20.ИдентификаторСтатусаСервисВременноНедоступен
//        см. ИдентификаторСтатусаОблачныйАрхивОшибкаСохраненияНастроек
//        см. ОблачныйАрхив20.ИдентификаторСтатусаАгентНеАктивирован
//        см. ОблачныйАрхив20.ИдентификаторСтатусаАгентНеУстановлен
//        см. ИдентификаторСтатусаРаботыАгентаНеАктивен
//        см. ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаОблачныйАрхивНастройкиПолучены
//        см. ИдентификаторСтатусаОблачныйАрхивБазаНеЗарегистрирована
//        см. ИдентификаторСтатусаАгентФайлыНедоступны
//        см. ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаИППОшибкаАутентификации - ошибка проверки логина и
//            пароля.
//    * СообщениеПользователю - Строка, ФорматированнаяСтрока - текст, который необходимо отобразить пользователю на
//        форме.
//    * СообщениеТехподдержке - Строка - текст, который необходимо вставить в обращение к технической поддержке.
//    * ДанныеАутентификации - Структура:
//        см. ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки
//                           - Неопределено
//    * ПараметрыАрхивирования - Структура: см. НовыйПараметрыРезервногоКопирования
//                             - Неопределено
//    * НастройкиАрхивирования - Структура: см. ДесериализоватьНастройкиАрхивированияСервиса
//                             - Неопределено
//    * URIТекущий - Неопределено, Строка - содержит текущий URI базы данных. Заполняется в сценарии перемещения ИБ.
//    * ЛогУстановкиАгента - Неопределено, Строка - данные лога установки Агента.
//    * ФайлДистрибутиваАгента - Неопределено, Строка - путь к файлу дистрибутива Агента.
//
Функция ИнициализацияНастроекОблачногоАрхиваВФоне(Знач ПараметрыИнициализации) Экспорт
	
	ДанныеАутентификации   = Неопределено;	// см. ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки
	ПараметрыАрхивирования = Неопределено;	// см. НовыйПараметрыРезервногоКопирования
	НастройкиАрхивирования = Неопределено;	// см. ДесериализоватьНастройкиАрхивированияСервиса

	РезультатИнициализации = НовыйОтветСервиса();
	РезультатИнициализации.Вставить("ДанныеАутентификации"  , ДанныеАутентификации);
	РезультатИнициализации.Вставить("ПараметрыАрхивирования", ПараметрыАрхивирования);
	РезультатИнициализации.Вставить("НастройкиАрхивирования", НастройкиАрхивирования);
	РезультатИнициализации.Вставить("URIТекущий"            , Неопределено);
	РезультатИнициализации.Вставить("ЛогУстановкиАгента"    , Неопределено);
	РезультатИнициализации.Вставить("ФайлДистрибутиваАгента", Неопределено);
	
	// Проверка подключения и блокировки работы подсистемы.
	ОблачныйАрхивПодключен = ПодключениеОблачногоАрхиваВыполненоСлужебный(
		ПараметрыИнициализации.ПараметрыАрхивирования);
	
	// Информационная база перемещена
	Если ОблачныйАрхивПодключен
		И ПараметрыИнициализации.РежимОбновленияНастроек = Неопределено
		И ПараметрыИнициализации.ПараметрыАрхивирования.РаботаРезервногоКопированияЗаблокирована <> Ложь Тогда
		
		РезультатИнициализации.Статус     =
			ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаИнформационнаяБазаПеремещена();
		РезультатИнициализации.URIТекущий = URIТекущегоПодключения();
		
	// Переход на шаг проверки подключения Интернет-поддержки пользователей
	ИначеЕсли ОблачныйАрхивПодключен
		Или ПараметрыИнициализации.ПользовательскоеСоглашениеПринято Тогда
		
		ИнициализацияНастроекПроверкаПодключенияИПП(ПараметрыИнициализации, РезультатИнициализации);
		
	// Облачный архив не подключен
	Иначе
		РезультатИнициализации.Статус = ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаОблачныйАрхивНеПодключен();
	КонецЕсли;
	
	Возврат РезультатИнициализации;
	
КонецФункции

// Выполняет проверку подключения Интернет-поддержки пользователей и запускает следующие шаги процесса проверки
// готовности программно-аппаратного комплекса 1С:Облачный архив.
// В методе могут быть установлены следующие статусы (без учета вложенных методов):
//   см. ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаИППОшибкаАутентификации - ошибка проверки логина и пароля.
//
// Параметры:
//  ПараметрыИнициализации - см. ОблачныйАрхив20.ИнициализацияНастроекОблачногоАрхиваВФоне.ПараметрыИнициализации
//  РезультатИнициализации - см. ОблачныйАрхив20.ИнициализацияНастроекОблачногоАрхиваВФоне
//
Процедура ИнициализацияНастроекПроверкаПодключенияИПП(ПараметрыИнициализации, РезультатИнициализации)
	
	ДлительныеОперации.СообщитьПрогресс(
		5,
		НСтр("ru = 'Проверка подключения Интернет-поддержки пользователя.'"));
	
	// Проверка данных аутентификации и сохранение
	Если ПараметрыИнициализации.СохранитьДанныеАутентификации Тогда
		
		ДанныеАутентификации           = ПараметрыИнициализации.ДанныеАутентификации;
		РезультатПроверкиЛогинаИПароля = ИнтернетПоддержкаПользователей.ПроверитьЛогинИПароль(
			ДанныеАутентификации.Логин,
			ДанныеАутентификации.Пароль);
		Если ПустаяСтрока(РезультатПроверкиЛогинаИПароля.КодОшибки) Тогда
			ИнтернетПоддержкаПользователей.СлужебнаяСохранитьДанныеАутентификации(ДанныеАутентификации);
		Иначе
			
			РезультатИнициализации.Статус                =
				ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаИППОшибкаАутентификации();
			РезультатИнициализации.СообщениеПользователю = РезультатПроверкиЛогинаИПароля.СообщениеОбОшибке;
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверка параметров аутентификации
	РезультатПроверкиИПП = ПроверитьПодключениеИнтернетПоддержкиПользователей(
		ПараметрыИнициализации.ПараметрыАрхивирования,
		ПараметрыИнициализации.ДанныеАутентификации);
	
	РезультатИнициализации.ДанныеАутентификации = РезультатПроверкиИПП.ДанныеАутентификации;
	
	// Переход на шаг проверки доступности сервиса Облачный архив
	Если РезультатПроверкиИПП.Статус = ИдентификаторСтатусаИПППодключена() Тогда
		ИнициализацияНастроекПроверкаДоступностиСервиса(ПараметрыИнициализации, РезультатИнициализации);
	
	// Завершение операции с ошибкой
	Иначе
		ЗаполнитьЗначенияСвойств(
			РезультатИнициализации,
			РезультатПроверкиИПП,
			"Статус,СообщениеПользователю,СообщениеТехподдержке");
	КонецЕсли;
	
КонецПроцедуры

// Выполняет проверку доступности сервиса и запускает следующие шаги процесса проверки готовности
// программно-аппаратного комплекса 1С:Облачный архив.
//
// Параметры:
//  ПараметрыИнициализации - см. ОблачныйАрхив20.ИнициализацияНастроекОблачногоАрхиваВФоне.ПараметрыИнициализации
//  РезультатИнициализации - см. ОблачныйАрхив20.ИнициализацияНастроекОблачногоАрхиваВФоне
//
Процедура ИнициализацияНастроекПроверкаДоступностиСервиса(ПараметрыИнициализации, РезультатИнициализации)
	
	ДлительныеОперации.СообщитьПрогресс(
		10,
		НСтр("ru = 'Проверка доступности сервиса Облачный архив.'"));
	
	// Проверка доступности сервиса
	РезультатПроверкиДоступности = ПроверитьДоступностьСервисаОблачныйАрхив(
		ПараметрыИнициализации.ПараметрыАрхивирования,
		ПараметрыИнициализации.ДанныеАутентификации);
	
	Если РезультатПроверкиДоступности.Статус = ИдентификаторСтатусаОблачныйАрхивДоступен() Тогда
		
		РезультатИнициализации.ПараметрыАрхивирования = ОбщегоНазначения.СкопироватьРекурсивно(
			ПараметрыИнициализации.ПараметрыАрхивирования);
		
		// Применение режима обновления настроек в сценарии перемещения информационной базы
		Если ПараметрыИнициализации.РежимОбновленияНастроек <> Неопределено Тогда
			Если ПараметрыИнициализации.РежимОбновленияНастроек = ОблачныйАрхив20КлиентСервер.ИдентификаторРежимаОбновленияОбновитьАдресРазмещения() Тогда
				
				РезультатУдаленияРасписания = УдалитьНастройкиРезервногоКопирования(РезультатИнициализации);
				Если РезультатУдаленияРасписания.Статус <> ИдентификаторСтатусаОблачныйАрхивНастройкиУдалены() Тогда
					ЗаполнитьЗначенияСвойств(РезультатИнициализации, РезультатУдаленияРасписания);
					Возврат;
				КонецЕсли;
				
				РезультатИнициализации.ПараметрыАрхивирования.URI                                      = "";
				РезультатИнициализации.ПараметрыАрхивирования.РаботаРезервногоКопированияЗаблокирована = Ложь;
				
			Иначе
				РезультатИнициализации.ПараметрыАрхивирования = НовыйПараметрыРезервногоКопирования();
			КонецЕсли;
		КонецЕсли;
		
		ИнициализацияНастроекПроверкаРаботыАгента(РезультатИнициализации, 15, Ложь);
		
	// Сервис Облачного архива недоступен
	Иначе
		ЗаполнитьЗначенияСвойств(РезультатИнициализации, РезультатПроверкиДоступности);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет проверку работы Агента облачного архива и в зависимости от статуса запускает следующие шаги получения
// настроек.
//
// Параметры:
//  РезультатИнициализации - см. ОблачныйАрхив20.ИнициализацияНастроекОблачногоАрхиваВФоне
//  Прогресс - Число - процент готовности процесса инициализации настроек.
//  ЗавершитьЕслиАгентНеАктивен - Булево - признак завершить цикличность проверок работы Агента.
//
Процедура ИнициализацияНастроекПроверкаРаботыАгента(РезультатИнициализации, Прогресс, ЗавершитьЕслиАгентНеАктивен = Истина)
	
	ДлительныеОперации.СообщитьПрогресс(
		Прогресс,
		НСтр("ru = 'Проверка работы Агента облачного архива.'"));
	
	РезультатПроверкиАгента = ПроверитьРаботуАгента(РезультатИнициализации.ПараметрыАрхивирования);
	Если РезультатПроверкиАгента.Статус = ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаРаботыАгентаАктивен()
		Или РезультатПроверкиАгента.Статус = ИдентификаторСтатусаАгентАктивирован() Тогда
		
		ИнициализацияНастроекПолучитьНастройкиАрхивирования(РезультатИнициализации, 85);
		
	ИначеЕсли ЗавершитьЕслиАгентНеАктивен Тогда
		ЗаполнитьЗначенияСвойств(РезультатИнициализации, РезультатПроверкиАгента);
		
	// Агент не установлен
	ИначеЕсли РезультатПроверкиАгента.Статус = ИдентификаторСтатусаАгентНеУстановлен() Тогда
		ИнициализацияНастроекПолучитьСсылкуНаДистрибутивАгента(РезультатИнициализации);
		
	// Агент установлен, но не активирован
	ИначеЕсли РезультатПроверкиАгента.Статус = ИдентификаторСтатусаАгентНеАктивирован() Тогда
		ИнициализацияНастроекАктивироватьАгент(РезультатИнициализации);
		
	Иначе
		
		// Операции, попадающие под условие:
		//  - ОблачныйАрхив20.ИдентификаторСтатусаОшибкаЗапроса()
		//  - ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаИППОшибкаАутентификации()
		//  - ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаОблачныйАрхивНедоступен()
		//  - ОблачныйАрхив20.ИдентификаторСтатусаОшибкаСервиса()
		//  - ОблачныйАрхив20.ИдентификаторСтатусаСервисВременноНедоступен()
		//  - ОблачныйАрхив20.ИдентификаторСтатусаРаботыАгентаНеАктивен()
		
		ЗаполнитьЗначенияСвойств(РезультатИнициализации, РезультатПроверкиАгента);
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет получение настроек автоматического резервного копирования и прерывает процесс инициализации формы настроек.
//
// Параметры:
//  РезультатИнициализации - см. ОблачныйАрхив20.ИнициализацияНастроекОблачногоАрхиваВФоне
//  Прогресс - Число - процент готовности процесса инициализации настроек.
//
Процедура ИнициализацияНастроекПолучитьНастройкиАрхивирования(РезультатИнициализации, Прогресс)
	
	ДлительныеОперации.СообщитьПрогресс(
		Прогресс,
		НСтр("ru = 'Получение настроек резервного копирования.'"));
	
	РезультатПолученияНастроек = ПолучитьНастройкиРезервногоКопирования(РезультатИнициализации.ПараметрыАрхивирования);
	Если РезультатПолученияНастроек.Статус = ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаОблачныйАрхивНастройкиПолучены() Тогда
		
		Если ПустаяСтрока(РезультатИнициализации.ПараметрыАрхивирования.URI) Тогда
			РезультатИнициализации.ПараметрыАрхивирования.URI = РезультатПолученияНастроек.URI;
		КонецЕсли;
		Если ПустаяСтрока(РезультатИнициализации.ПараметрыАрхивирования.ЛогинИПП) Тогда
			ДанныеАутентификации = РезультатИнициализации.ДанныеАутентификации;	// см. ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки
			РезультатИнициализации.ПараметрыАрхивирования.ЛогинИПП = ДанныеАутентификации.Логин;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(РезультатИнициализации, РезультатПолученияНастроек);
		
	ИначеЕсли РезультатПолученияНастроек.Статус = ИдентификаторСтатусаОблачныйАрхивБазаНеЗарегистрирована() Тогда
		
		Если ПустаяСтрока(РезультатИнициализации.ПараметрыАрхивирования.URI) Тогда
			ИнициализацияНастроекЗарегистрироватьОбъектАрхивирования(
				РезультатИнициализации,
				РезультатПолученияНастроек.URI);
		Иначе
			
			РезультатИнициализации.Статус                     =
				ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаОблачныйАрхивНеПодключен();
			РезультатИнициализации.ПараметрыАрхивирования.URI = "";
			
		КонецЕсли;
		
	Иначе
		ЗаполнитьЗначенияСвойств(РезультатИнициализации, РезультатПолученияНастроек);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет запрос на получение ссылки для скачивания дистрибутива Агента облачного архива и запускает следующие шаги
// его скачивания и установки.
//
// Параметры:
//  РезультатИнициализации - см. ОблачныйАрхив20.ИнициализацияНастроекОблачногоАрхиваВФоне
//
Процедура ИнициализацияНастроекПолучитьСсылкуНаДистрибутивАгента(РезультатИнициализации)
	
	ДлительныеОперации.СообщитьПрогресс(
		20,
		НСтр("ru = 'Загрузка дистрибутива Агента облачного архива.'"));
	
	// Запрос адреса дистрибутива агента
	URLОперации          = URLОперацииЗапросаАдресаДистрибутиваАгента();
	ИдентификаторЗапроса = Строка(Новый УникальныйИдентификатор());
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("X-Correlation-ID", ИдентификаторЗапроса);
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("Метод"       , "GET");
	ПараметрыЗапроса.Вставить("Заголовки"   , Заголовки);
	ПараметрыЗапроса.Вставить("ФорматОтвета", 1);
	
	РезультатОперации = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(URLОперации, , , ПараметрыЗапроса);
	
	ТекстИнформации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получена информация об адресе загрузки дистрибутива Агента.
			|URL: %1
			|X-Correlation-ID: %2
			|%3'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
		URLОперации,
		ИдентификаторЗапроса,
		РезультатОперации.Содержимое);
	ЗаписатьИнформациюВЖурналРегистрации(ТекстИнформации);
	
	Если РезультатОперации.КодСостояния = 200 Тогда
		
		// Тело ответа:
		// {
		//   "fileUrl": "https://dl04.1c.ru/privat/07c24f76-6f28-4f34-9428-3cba31bbb0c1"
		// }
		
		ДанныеОтвета = Новый Структура();
		ДанныеОтвета.Вставить("fileUrl", "");
		
		Попытка
			
			ЗаполнитьЗначенияСвойств(
				ДанныеОтвета,
				СтрокуJSONВЗначение(РезультатОперации.Содержимое));
			
			ИнициализацияНастроекСкачатьДистрибутивАгента(ДанныеОтвета.fileUrl, РезультатИнициализации);
			
		Исключение
			
			ОшибкаЧтенияДанныхСервиса(
				РезультатИнициализации,
				ПараметрыЗапроса.Метод,
				URLОперации,
				РезультатОперации,
				ИнформацияОбОшибке());
			
		КонецПопытки;
		
	ИначеЕсли СтандартнаяОбработкаКодовСостояний(РезультатИнициализации, РезультатОперации) Тогда
		
		Если РезультатОперации.КодСостояния = 500 Тогда
			РезультатИнициализации.СообщениеТехподдержке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка получения адреса дистрибутива Агента облачного архива.
					|URL: %1 %2
					|Код состояния: %3
					|Тело ответа:
					|%4'"),
				ПараметрыЗапроса.Метод,
				URLОперации,
				Строка(РезультатОперации.КодСостояния),
				РезультатОперации.Содержимое);
		КонецЕсли;
		
	ИначеЕсли РезультатОперации.КодСостояния = 503 Тогда
		
		СервисВременноНедоступен(
			РезультатИнициализации,
			НСтр("ru = 'Не удалось получить адрес дистрибутива Агента облачного архива. Сервис временно недоступен.'"),
			НСтр("ru = 'Сервис получения адреса дистрибутива Агента облачного архива временно недоступен.'"),
			ПараметрыЗапроса.Метод,
			URLОперации,
			РезультатОперации);
		
	Иначе
		
		НеклассифицированнаяОшибкаСервиса(
			РезультатИнициализации,
			НСтр("ru = 'Ошибка при работе с сервисом (подробнее см. Журнал регистрации).'"),
			НСтр("ru = 'Сервис получения адреса дистрибутива Агента облачного архива вернул неклассифицированную ошибку.'"),
			ПараметрыЗапроса.Метод,
			URLОперации,
			РезультатОперации);
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет скачивание дистрибутива Агента облачного архива и запускает процесс его установки.
//
// Параметры:
//  URLДистрибутива - Строка - URL адрес дистрибутива.
//  РезультатИнициализации - см. ОблачныйАрхив20.ИнициализацияНастроекОблачногоАрхиваВФоне
//
Процедура ИнициализацияНастроекСкачатьДистрибутивАгента(URLДистрибутива, РезультатИнициализации)
	
	КаталогЗагрузки      = ФайловаяСистема.СоздатьВременныйКаталог();
	ИмяФайлаОтвета       = КаталогЗагрузки + "installAgent.exe";
	ИдентификаторЗапроса = Строка(Новый УникальныйИдентификатор());
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("X-Correlation-ID", ИдентификаторЗапроса);
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("Метод"         , "GET");
	ПараметрыЗапроса.Вставить("Заголовки"     , Заголовки);
	ПараметрыЗапроса.Вставить("ИмяФайлаОтвета", ИмяФайлаОтвета);
	ПараметрыЗапроса.Вставить("Таймаут"       , 43200);
	
	РезультатОперации = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLДистрибутива
		,
		,
		,
		ПараметрыЗапроса);
	
	ТекстИнформации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получен дистрибутив Агента.
			|URL: %1
			|X-Correlation-ID: %2
			|%3'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
		URLДистрибутива,
		ИдентификаторЗапроса,
		ИмяФайлаОтвета);
	ЗаписатьИнформациюВЖурналРегистрации(ТекстИнформации);
	
	Если РезультатОперации.КодСостояния = 200 Тогда
		
		ФайлДистрибутива = Новый Файл(ИмяФайлаОтвета);
		Если ФайлДистрибутива.Существует() Тогда
			ИнициализацияНастроекУстановитьДистрибутивАгента(КаталогЗагрузки, ИмяФайлаОтвета, РезультатИнициализации);
			// Удаление временного каталога если файл дистрибутива Агента не заполнен
			Если РезультатИнициализации.ФайлДистрибутиваАгента = Неопределено Тогда
				ФайловаяСистема.УдалитьВременныйКаталог(КаталогЗагрузки);
			КонецЕсли;
		Иначе
			
			РезультатИнициализации.Статус = ИдентификаторСтатусаОшибкаЗапроса();
			РезультатИнициализации.СообщениеПользователю =
				НСтр("ru = 'Не удалось загрузить дистрибутив Агента облачного архива.
					|Возможно, файл удален антивирусной программой.
					|Обратитесь к администратору.'");
			РезультатИнициализации.СообщениеТехподдержке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось загрузить дистрибутив Агента облачного архива.
					|Возможно, файл удален антивирусной программой.
					|URL: %1
					|Дистрибутив: %2'"),
				URLДистрибутива,
				ИмяФайлаОтвета);
			
			ЗаписатьИнформациюВЖурналРегистрации(РезультатИнициализации.СообщениеТехподдержке, Истина);
			
		КонецЕсли;
		
	ИначеЕсли СтандартнаяОбработкаКодовСостояний(РезультатИнициализации, РезультатОперации) Тогда
		
		Если РезультатОперации.КодСостояния = 500 Тогда
			РезультатИнициализации.СообщениеТехподдержке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка загрузки дистрибутива Агента облачного архива.
					|URL: %1 %2
					|Код состояния: %3'"),
				ПараметрыЗапроса.Метод,
				URLДистрибутива,
				Строка(РезультатОперации.КодСостояния));
		КонецЕсли;
		
	ИначеЕсли РезультатОперации.КодСостояния = 503 Тогда
		
		СервисВременноНедоступен(
			РезультатИнициализации,
			НСтр("ru = 'Не удалось загрузить дистрибутив Агента облачного архива. Сервис временно недоступен.'"),
			НСтр("ru = 'Сервис загрузки дистрибутива Агента облачного архива временно недоступен.'"),
			ПараметрыЗапроса.Метод,
			URLДистрибутива,
			РезультатОперации);
		
	Иначе
		
		НеклассифицированнаяОшибкаСервиса(
			РезультатИнициализации,
			НСтр("ru = 'Ошибка при работе с сервисом (подробнее см. Журнал регистрации).'"),
			НСтр("ru = 'Сервис загрузки дистрибутива Агента облачного архива вернул неклассифицированную ошибку.'"),
			ПараметрыЗапроса.Метод,
			URLДистрибутива,
			РезультатОперации);
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет установку дистрибутива Агента облачного архива и запускает операцию по его проверке.
//
// Параметры:
//  КаталогДистрибутива - Строка
//  ФайлДистрибутива - Строка - файл дистрибутива Агента.
//  РезультатИнициализации - см. ОблачныйАрхив20.ИнициализацияНастроекОблачногоАрхиваВФоне
//
Процедура ИнициализацияНастроекУстановитьДистрибутивАгента(
	КаталогДистрибутива,
	ФайлДистрибутива,
	РезультатИнициализации)
	
	ДлительныеОперации.СообщитьПрогресс(
		35,
		НСтр("ru = 'Установка Агента облачного архива.'"));
	
	Попытка
		
		КаталогУстановки = "C:\1C\1cbackup-agent";
		КомандаЗапуска   = ФайлДистрибутива + " /S /D=" + КаталогУстановки;
		
		ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Установка Агента облачного архива.
					|%1'"),
				КомандаЗапуска));
		
		ПараметрыЗапуска = ФайловаяСистема.ПараметрыЗапускаПрограммы();
		ПараметрыЗапуска.ДождатьсяЗавершения = Истина;
		
		РезультатЗапуска = ФайловаяСистема.ЗапуститьПрограмму(КомандаЗапуска, ПараметрыЗапуска);
		КодВозврата      = РезультатЗапуска.КодВозврата;
		
	Исключение
		
		ИнформацияОбОшибке = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		РезультатИнициализации.Статус                = ИдентификаторСтатусаОшибкаУстановкиАгента();
		РезультатИнициализации.СообщениеПользователю = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при запуске программы установки Агента облачного архива.
				|%1'"),
			ИнформацияОбОшибке);
		РезультатИнициализации.СообщениеТехподдержке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при запуске программы установки Агента облачного архива.
				|Команда запуска: %1
				|Описание ошибки:
				|%2'"),
			КомандаЗапуска,
			ИнформацияОбОшибке);
		
		ЗаписатьИнформациюВЖурналРегистрации(РезультатИнициализации.СообщениеТехподдержке, Истина);
		
	КонецПопытки;
	
	Если КодВозврата = 0 Тогда
		
		ЗаписатьИнформациюВЖурналРегистрации(
			НСтр("ru = 'Агент облачного архива успешно установлен.'"));
		
		// Ожидание запуска службы и синхронизации с сервисом
		ИнтернетПоддержкаПользователей.Пауза(15);
		
		ИнициализацияНастроекПроверкаРаботыАгента(РезультатИнициализации, 65, Ложь);
		
	Иначе
		
		ЛогФайлПуть       = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогУстановки)
			+ "install.log";
		ЛогФайлИнфо       = Новый Файл(ЛогФайлПуть);
		ЛогФайлСуществует = ЛогФайлИнфо.Существует();
		
		СообщениеПользователю = Новый Массив();
		СообщениеПользователю.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка установки Агента облачного архива.
				|Код возврата: %1'"),
			Строка(КодВозврата)));
		
		Если ЭтоКодВозвратаОграниченияСистемныхПолитик(КодВозврата) Тогда
			
			СообщениеПользователю.Добавить(Символы.ПС + Символы.ПС);
			СообщениеПользователю.Добавить(
				НСтр("ru = 'Данная ошибка связана с ограничениями системных политик безопасности.
					|Рекомендуется запустить программу от имени администратора, либо <a href=""Action:InstallAgent"">самостоятельно установить Агента облачного архива</a>.'"));
			
			РезультатИнициализации.ФайлДистрибутиваАгента = ФайлДистрибутива;
			
		КонецЕсли;
		
		Если ЛогФайлСуществует Тогда
			
			СообщениеПользователю.Добавить(Символы.ПС + Символы.ПС);
			СообщениеПользователю.Добавить(
				НСтр("ru = 'Техническая информация содержится в <a href=""Open:InstallLogAgent"">протоколе установки</a>.'"));
			
			// Сохранение данных лога
			ЧтениеФайла = Новый ЧтениеТекста(ЛогФайлПуть, , , , Ложь);
			
			РезультатИнициализации.ЛогУстановкиАгента = ЧтениеФайла.Прочитать();
			
			ЧтениеФайла.Закрыть();
			
		КонецЕсли;
		
		СообщениеПользователю.Добавить(Символы.ПС + Символы.ПС);
		СообщениеПользователю.Добавить(
			НСтр("ru = 'При возникновении проблем напишите в <a href=""mailto:webits-info@1c.ru"">техподдержку</a>.'"));
		
		СообщениеЖурнала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка установки Агента облачного архива.
				|Команда: %1
				|Код возврата: %2'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			КомандаЗапуска,
			Строка(КодВозврата));
		
		Если ЛогФайлСуществует Тогда
			
			СообщениеЖурнала = СообщениеЖурнала
				+ Символы.ПС
				+ НСтр("ru = 'Лог установки:'")
				+ Символы.ПС
				+ РезультатИнициализации.ЛогУстановкиАгента;
			
		КонецЕсли;
		
		РезультатИнициализации.Статус                = ИдентификаторСтатусаОшибкаУстановкиАгента();
		РезультатИнициализации.СообщениеПользователю = СтроковыеФункции.ФорматированнаяСтрока(
			СтрСоединить(СообщениеПользователю));
		
		ЗаписатьИнформациюВЖурналРегистрации(СообщениеЖурнала, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет активацию Агента облачного архива и запускает операцию по его проверке.
//
// Параметры:
//  РезультатИнициализации - см. ОблачныйАрхив20.ИнициализацияНастроекОблачногоАрхиваВФоне
//
Процедура ИнициализацияНастроекАктивироватьАгент(РезультатИнициализации)
	
	ДлительныеОперации.СообщитьПрогресс(
		70,
		НСтр("ru = 'Активация Агента облачного архива.'"));
	
	// Регистрация асинхронного задания активации Агента
	РезультатОперации = ЗарегистрироватьЗаданиеАктивацииАгента();
	Пока РезультатОперации.Статус = ИдентификаторСтатусаАгентНеАктивирован() Цикл
		
		// Проверка статуса активации Агента
		РезультатОперации = ПолучитьСтатусАктивацииАгента();
		Если РезультатОперации.Статус = ИдентификаторСтатусаАгентНеАктивирован() Тогда
			ИнтернетПоддержкаПользователей.Пауза(5);
		КонецЕсли;
		
	КонецЦикла;
	
	Если РезультатОперации.Статус = ИдентификаторСтатусаАгентАктивирован() Тогда
		
		// Сохранение логина ИТС от имени которого была активирован агент
		ДанныеАутентификации = РезультатИнициализации.ДанныеАутентификации;	// см. ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки
		РезультатИнициализации.ПараметрыАрхивирования.ЛогинИПП = ДанныеАутентификации.Логин;
		РезультатИнициализации.ПараметрыАрхивирования.АгентID  = РезультатОперации.АгентID;
		
		ИнициализацияНастроекПроверкаРаботыАгента(РезультатИнициализации, 80);
		
	Иначе
		ЗаполнитьЗначенияСвойств(РезультатИнициализации, РезультатОперации);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет регистрацию объекта копирования в Агенте облачного архива и запускает операцию по его проверке.
//
// Параметры:
//  РезультатИнициализации - см. ОблачныйАрхив20.ИнициализацияНастроекОблачногоАрхиваВФоне
//  URI - Строка - адрес размещения текущей информационной базы.
//
Процедура ИнициализацияНастроекЗарегистрироватьОбъектАрхивирования(РезультатИнициализации, URI)
	
	ДлительныеОперации.СообщитьПрогресс(
		90,
		НСтр("ru = 'Регистрация объекта копирования.'"));
	
	// Проверка доступности файлов копирования Агентом
	РезультатОперации = ЗарегистрироватьЗаданиеПроверкиДоступностиФайлов(URI);
	Пока РезультатОперации.Статус = ИдентификаторСтатусаАгентПроверяетДоступностьФайлов() Цикл
		
		// Чтение статуса проверки доступности файлов копирования
		РезультатОперации = ПолучитьСтатусПроверкиДоступностиФайлов(РезультатОперации.IDЗадания, URI);
		Если РезультатОперации.Статус = ИдентификаторСтатусаАгентПроверяетДоступностьФайлов() Тогда
			ИнтернетПоддержкаПользователей.Пауза(5);
		КонецЕсли;
		
	КонецЦикла;
	
	// Регистрация объекта копирования в сервисе
	Если РезультатОперации.Статус = ИдентификаторСтатусаАгентФайлыДоступны() Тогда
		
		// Получение тикета сервиса
		РезультатПолученияТикета = ТикетАутентификацииСервиса();
		Если ПустаяСтрока(РезультатПолученияТикета.Тикет) Тогда
			
			РезультатИнициализации.Статус                =
				ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаИППОшибкаАутентификации();
			РезультатИнициализации.СообщениеПользователю = РезультатПолученияТикета.СообщениеОбОшибке;
			
			Возврат;
			
		КонецЕсли;
		
		// Регистрация объекта копирования
		URLОперации          = URLОперацииРегистрацииОбъектаАрхивирования(
			РезультатИнициализации.ПараметрыАрхивирования.АгентID);
		ИдентификаторЗапроса = Строка(Новый УникальныйИдентификатор());
		
		Заголовки = Новый Соответствие();
		Заголовки.Вставить("Content-Type"    , "application/json");
		Заголовки.Вставить("X-Token"         , РезультатПолученияТикета.Тикет);
		Заголовки.Вставить("X-Correlation-ID", ИдентификаторЗапроса);
		
		ДанныеДляОбработки = Новый Структура();
		ДанныеДляОбработки.Вставить("URI" , URI);
		ДанныеДляОбработки.Вставить("name", ИмяЭтойИнформационнойБазы());
		
		ПараметрыЗапроса = Новый Структура();
		ПараметрыЗапроса.Вставить("Метод"                   , "POST");
		ПараметрыЗапроса.Вставить("Заголовки"               , Заголовки);
		ПараметрыЗапроса.Вставить("ФорматДанныхДляОбработки", 1);
		ПараметрыЗапроса.Вставить("ФорматОтвета"            , 1);
		ПараметрыЗапроса.Вставить("Таймаут"                 , 30);
		ПараметрыЗапроса.Вставить(
			"ДанныеДляОбработки",
			ЗначениеВСтрокуJSON(ДанныеДляОбработки));
		
		ТекстИнформации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Регистрация объекта резервного копирования.
				|URL: %1
				|X-Correlation-ID: %2
				|%3'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			URLОперации,
			ИдентификаторЗапроса,
			ПараметрыЗапроса.ДанныеДляОбработки);
		ЗаписатьИнформациюВЖурналРегистрации(ТекстИнформации);
		
		РезультатОперации = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
			URLОперации,
			,
			,
			ПараметрыЗапроса);
		
		ТекстИнформации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Получена информация о регистрации объекта резервного копирования.
				|X-Correlation-ID: %1
				|%2'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			ИдентификаторЗапроса,
			РезультатОперации.Содержимое);
		ЗаписатьИнформациюВЖурналРегистрации(ТекстИнформации);
		
		Если РезультатОперации.КодСостояния = 200 Тогда
			
			РезультатИнициализации.ПараметрыАрхивирования.URI = URI;
			
			ИнициализацияНастроекПолучитьНастройкиАрхивирования(РезультатИнициализации, 95);
			
		ИначеЕсли СтандартнаяОбработкаКодовСостояний(РезультатИнициализации, РезультатОперации) Тогда
			
			Если РезультатОперации.КодСостояния = 500 Тогда
				РезультатИнициализации.СообщениеТехподдержке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка регистрации объекта копирования на портале облачного архива.
						|URL: %1 %2
						|Код состояния: %3
						|Тело ответа:
						|%4'"),
					ПараметрыЗапроса.Метод,
					URLОперации,
					Строка(РезультатОперации.КодСостояния),
					РезультатОперации.Содержимое);
			КонецЕсли;
			
		ИначеЕсли РезультатОперации.КодСостояния = 503 Тогда
			
			СервисВременноНедоступен(
				РезультатИнициализации,
				НСтр("ru = 'Не удалось зарегистрировать объект копирования. Сервис временно недоступен.'"),
				НСтр("ru = 'Сервис регистрации объекта копирования временно недоступен.'"),
				ПараметрыЗапроса.Метод,
				URLОперации,
				РезультатОперации);
			
		Иначе
			
			НеклассифицированнаяОшибкаСервиса(
				РезультатИнициализации,
				НСтр("ru = 'Ошибка при работе с сервисом (подробнее см. Журнал регистрации).'"),
				НСтр("ru = 'Сервис регистрации объекта копирования вернул неклассифицированную ошибку.'"),
				ПараметрыЗапроса.Метод,
				URLОперации,
				РезультатОперации);
			
		КонецЕсли;
		
	Иначе
		ЗаполнитьЗначенияСвойств(РезультатИнициализации, РезультатОперации);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает настройки архивирования в формате JSON сервиса.
//
// Параметры:
//  ПараметрыСохранения - см. СохранениеНастроекОблачногоАрхиваВФоне.ПараметрыСохранения
//
// Возвращаемое значение:
//  Строка - настройки архивирования в формате JSON.
//
Функция СериализоватьНастройкиАрхивирования(Знач ПараметрыСохранения)
	
	НастройкиАрхивирования = ПараметрыСохранения.НастройкиАрхивирования;
	
	ИнформационнаяБаза = Новый Структура();
	ИнформационнаяБаза.Вставить("name"    , НастройкиАрхивирования.НаименованиеИБ);
	ИнформационнаяБаза.Вставить("URI"     , ПараметрыСохранения.ПараметрыАрхивирования.URI);
	ИнформационнаяБаза.Вставить("timeZone", ЧасовойПоясСеансаUTC());
	
	НастройкиХранения = Новый Структура();
	Если НастройкиАрхивирования.ТипХраненияКопий = ИдентификаторТипаХраненияКопийЗаПоследние() Тогда
		НастройкиХранения.Вставить("type" , НастройкиАрхивирования.ТипПериодаХраненияКопий);
		НастройкиХранения.Вставить("count", НастройкиАрхивирования.ПериодХраненияКопий);
	ИначеЕсли НастройкиАрхивирования.ТипХраненияКопий = ИдентификаторТипаХраненияКопийПоследние() Тогда
		НастройкиХранения.Вставить("type" , НастройкиАрхивирования.ТипХраненияКопий);
		НастройкиХранения.Вставить("count", НастройкиАрхивирования.КоличествоКопийВКаталоге);
	ИначеЕсли НастройкиАрхивирования.ТипХраненияКопий = ИдентификаторТипаХраненияКопийВсе() Тогда
		НастройкиХранения.Вставить("type" , "ALL");
		НастройкиХранения.Вставить("count", 0);
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неклассифицированный тип хранения резервных копий: %1'"),
			НастройкиАрхивирования.ТипХраненияКопий);
	КонецЕсли;
	
	НастройкиРасписания = Новый Массив();
	Для Каждого ТекРасписание Из НастройкиАрхивирования.Расписания Цикл
		НастройкиРасписания.Добавить(
			РасписанияРегламентногоЗаданияВОбъектСервиса(ТекРасписание.Использование, ТекРасписание.Расписание));
	КонецЦикла;
	
	Результат = Новый Структура();
	Результат.Вставить("infobase" , ИнформационнаяБаза);
	Результат.Вставить("storage"  , НастройкиХранения);
	Результат.Вставить("schedules", НастройкиРасписания);
	
	СброситьНеобязательныеПоляСервиса(Результат, "schedules");
	
	Возврат ЗначениеВСтрокуJSON(Результат);
	
КонецФункции

// Возвращает объект сервиса Облачного архива, описывающий расписание резервного копирования.
//
// Параметры:
//  Использование - Булево
//  Расписание - РасписаниеРегламентногоЗадания
//
// Возвращаемое значение:
//  см. НовыйРасписаниеРезервногоКопированияСервис
//
Функция РасписанияРегламентногоЗаданияВОбъектСервиса(Использование, Расписание)
	
	Месяцы = Новый Массив();
	Для Каждого ТекМесяц Из Расписание.Месяцы Цикл
		Месяцы.Добавить(ТекМесяц);
	КонецЦикла;
	
	ДниНедели = Новый Массив();
	Для Каждого ТекДеньНедели Из Расписание.ДниНедели Цикл
		ДниНедели.Добавить(ТекДеньНедели);
	КонецЦикла;
	
	ФорматДаты    = "ДФ=yyyy-MM-dd;";
	ФорматВремени = "ДФ=HH:mm:ss;";
	
	ДетальныеРасписанияДня = Новый Массив();	// Массив из см. НовыйДетальноеРасписаниеДняСервис
	Для Каждого ТекСтрока Из Расписание.ДетальныеРасписанияДня Цикл
		
		ДетальноеРасписаниеДня = ДетальноеРасписаниеДня(ТекСтрока);
		
		РасписаниеДня = НовыйДетальноеРасписаниеДняСервис();
		РасписаниеДня.beginTime          = Формат(ДетальноеРасписаниеДня.ВремяНачала, ФорматВремени);
		РасписаниеДня.endTime            = Формат(ДетальноеРасписаниеДня.ВремяКонца, ФорматВремени);
		РасписаниеДня.pause              = ДетальноеРасписаниеДня.ПаузаПовтора;
		РасписаниеДня.repeat             = ДетальноеРасписаниеДня.ПериодПовтораВТечениеДня;
		РасписаниеДня.completionTime     = Формат(ДетальноеРасписаниеДня.ВремяЗавершения, ФорматВремени);
		РасписаниеДня.completionInterval = ДетальноеРасписаниеДня.ИнтервалЗавершения;
		
		СброситьНеобязательныеПоляСервиса(РасписаниеДня, "endTime,pause,repeat,completionTime,completionInterval");
		
		ДетальныеРасписанияДня.Добавить(РасписаниеДня);
		
	КонецЦикла;
	
	Результат = НовыйРасписаниеРезервногоКопированияСервис();
	Результат.isActive          = Использование;
	Результат.beginDate         = Формат(Расписание.ДатаНачала, ФорматДаты);
	Результат.endDate           = Формат(Расписание.ДатаКонца, ФорматДаты);
	Результат.dayWeekInMonth    = Расписание.ДеньНеделиВМесяце;
	Результат.daysOfMonth       = Расписание.ДеньВМесяце;
	Результат.repeatPeriodDays  = Расписание.ПериодПовтораДней;
	Результат.repeatPeriodWeeks = Расписание.ПериодНедель;
	
	Если Расписание.ДетальныеРасписанияДня.Количество() = 0 Тогда
		
		Результат.beginTime          = Формат(Расписание.ВремяНачала, ФорматВремени);
		Результат.endTime            = Формат(Расписание.ВремяКонца, ФорматВремени);
		Результат.repeatPause        = Расписание.ПаузаПовтора;
		Результат.repeatPeriodInDay  = Расписание.ПериодПовтораВТечениеДня;
		Результат.completionTime     = Формат(Расписание.ВремяЗавершения, ФорматВремени);
		Результат.completionInterval = Расписание.ИнтервалЗавершения;
		
	КонецЕсли;
	
	Результат.Вставить("months"   , Месяцы);
	Результат.Вставить("weekDays" , ДниНедели);
	Результат.Вставить("dayDetail", ДетальныеРасписанияДня);
	
	СброситьНеобязательныеПоляСервиса(
		Результат,
		"isActive,endDate,beginTime,endTime,dayWeekInMonth,daysOfMonth,months,repeatPeriodDays,repeatPeriodWeeks,weekDays,completionTime,completionInterval,repeatPause,repeatPeriodInDay,dayDetail");
	
	Возврат Результат;
	
КонецФункции

// Описывает структуру детального описания дня.
//
// Параметры:
//  ДетальноеРасписаниеДня - Произвольный - детальное расписание дня.
//
// Возвращаемое значение:
//  Структура:
//    * ВремяНачала - Дата - время начала расписания.
//    * ВремяКонца - Дата - время конца расписания.
//    * ВремяЗавершения - Дата - Время, после которого задание будет принудительно завершено.
//    * ИнтервалЗавершения - Число - интервал времени в секундах от начала запуска регламентного задания, после которого
//        задание будет принудительно завершено.
//    * ПериодПовтораВТечениеДня - Число - период времени в секундах, через который нужно запускать задание в течение
//        дня. Если равен 0, задание в течение дня будет запущено однократно (задание может быть запущено только в те
//        дни, которые определяются данным расписанием).
//    * ПаузаПовтора - Число - минимальный интервал времени (в секундах) между повторными запусками задания. Интервал
//        считается от времени завершения предыдущего запуска до времени начала последующего.
//
Функция ДетальноеРасписаниеДня(ДетальноеРасписаниеДня)
	
	Возврат ДетальноеРасписаниеДня;
	
КонецФункции

// Расписание резервного копирования для сервиса по умолчанию.
//
// Возвращаемое значение:
//  Структура:
//    * isActive - Булево - признак активности настройки выполнения резервных копий.
//    * beginDate - Строка - дата начала расписания в формате yyyy-MM-dd.
//    * endDate - Строка - дата конца расписания  в формате yyyy-MM-dd.
//    * beginTime - Строка - время начала расписания в формате hh:mm:ss.
//    * endTime - Строка - время конца расписания в формате hh:mm:ss.
//    * dayWeekInMonth - Число - номер дня недели в месяце, когда резервная копия может быть выполнена (например, второе
//        воскресенье месяца). Положительные значения считают относительно начала месяца, отрицательные - относительно
//        конца (1 - первый день недели в месяце, -1 - последний день недели в месяце).
//    * daysOfMonth - Число - номер дня в месяце, когда задание может быть запущено. Положительные значения считают
//        относительно начала месяца, отрицательные - относительно конца (1 - первый день месяца, -1 - последний день
//        месяца).
//    * months - Массив из Число - массив номеров месяцев, по которым резервное копирование может быть запущено
//        (январь - 1, февраль - 2 и т.д.).
//    * repeatPeriodDays - Число - Период времени в днях, через который нужно повторять запуск резервное копирование.
//        Если значение свойства равно 0, резервное копирование  будет запущено в течение только одного дня (задание
//        может быть запущено в течение одного дня несколько раз, в зависимости от dayDetail).
//    * repeatPeriodWeeks - Число - период времени в неделях, через который нужно повторять запуск резервного
//        копирования.
//    * weekDays - Массив из Число - массив номеров дней недели, по которым резервное копирование может быть запущено
//        (понедельник - 1, вторник - 2 и т.д.).
//    * completionTime - Строка - время в формате hh:mm:ss, после которого резервное копирование будет принудительно
//        завершено.
//    * completionInterval - Число - интервал времени в секундах от начала запуска резервного копирования, после
//        которого задание будет принудительно завершено.
//    * repeatPause - Число - минимальный интервал времени (в секундах) между повторными запусками задания. Интервал
//        считается от времени завершения предыдущего запуска до времени начала последующего.
//    * repeatPeriodInDay - Число - период времени в секундах, через который нужно запускать резервное копирование в
//        течение дня. Если равен 0, задание в течение дня будет запущено однократно (задание может быть запущено только
//        в те дни, которые определяются данным расписанием).
//    * dayDetail - Массив из см. НовыйДетальноеРасписаниеДняСервис
//
Функция НовыйРасписаниеРезервногоКопированияСервис()
	
	Месяцы        = Новый Массив();	// Массив из Число
	ДниНедели     = Новый Массив();	// Массив из Число
	РасписаниеДня = Новый Массив();	// Массив из см. НовыйДетальноеРасписаниеДняСервис
	
	Результат = Новый Структура();
	Результат.Вставить("isActive"          , Ложь);
	Результат.Вставить("beginDate"         , "");
	Результат.Вставить("endDate"           , "");
	Результат.Вставить("beginTime"         , "");
	Результат.Вставить("endTime"           , "");
	Результат.Вставить("dayWeekInMonth"    , 0);
	Результат.Вставить("daysOfMonth"       , 0);
	Результат.Вставить("months"            , Месяцы);
	Результат.Вставить("repeatPeriodDays"  , 0);
	Результат.Вставить("repeatPeriodWeeks" , 0);
	Результат.Вставить("weekDays"          , ДниНедели);
	Результат.Вставить("completionTime"    , "");
	Результат.Вставить("completionInterval", 0);
	Результат.Вставить("repeatPause"       , 0);
	Результат.Вставить("repeatPeriodInDay" , 0);
	Результат.Вставить("dayDetail"         , РасписаниеДня);
	
	Возврат Результат;
	
КонецФункции

// Детальное расписание дня резервного копирования для сервиса по умолчанию.
//
// Возвращаемое значение:
//  Структура - Новый детальное расписание дня сервис:
//   * beginTime - Строка - время начала расписания в формате hh:mm:ss.
//   * endTime - Строка - время конца расписания в формате hh:mm:ss.
//   * pause - Число - минимальный интервал времени (в секундах) между повторными запусками задания. Интервал считается
//       от времени завершения предыдущего запуска до времени начала последующего.
//   * repeat - Число - период времени в секундах, через который нужно запускать задание в течение дня. Если равен 0,
//       задание в течение дня будет запущено однократно (задание может быть запущено только в те дни, которые
//       определяются данным расписанием).
//   * completionTime - Строка - время в формате hh:mm:ss, после которого резервное копирование будет принудительно
//       завершено.
//   * completionInterval - Число - интервал времени в секундах от начала запуска резервного копирования, после которого
//       задание будет принудительно завершено.
//
Функция НовыйДетальноеРасписаниеДняСервис()
	
	Результат = Новый Структура();
	Результат.Вставить("beginTime"         , "");
	Результат.Вставить("endTime"           , "");
	Результат.Вставить("pause"             , 0);
	Результат.Вставить("repeat"            , 0);
	Результат.Вставить("completionTime"    , "");
	Результат.Вставить("completionInterval", 0);
	
	Возврат Результат;
	
КонецФункции

// Возвращает структура настроек архивирования из формата JSON сервиса.
//
// Параметры:
//  СтрокаJSON - Строка - настройки архивирования в формате JSON сервиса.
//
// Возвращаемое значение:
//  Структура:
//    * НаименованиеИБ - Строка - представление информационной базы в сервисе.
//    * ЧасовойПояс - Строка - часовой пояс, в котором были сохранены настройки расписания. Формат значения
//      (+/-)hh:mm, где hh значение часа с лидирующим нулем; mm значение времени.
//    * ЧасовойПоясСервера - Строка - часовой пояс сервера. Формат значения (+/-)hh:mm, где hh значение часа с
//        лидирующим нулем; mm значение времени часового пояса.
//    * ЧасовойПоясСеанса - Строка - часовой пояс сеанса. Формат значения (+/-)hh:mm, где hh значение часа с
//        лидирующим нулем; mm значение времени часового пояса.
//    * ТипХраненияКопий - Строка - вариант хранения резервных копий. Возможные значения:
//        см. ИдентификаторТипаХраненияКопийВсе - вариант хранения всех резервных копий.
//        см. ИдентификаторТипаХраненияКопийЗаПоследние - вариант хранения копий за указанный период.
//        "Последние" - вариант хранения копий в количестве указанных штук.
//    * ТипПериодаХраненияКопий - Строка - заполняется если
//        ТипХраненияКопий = ИдентификаторТипаХраненияКопийЗаПоследние. Возможные значения:
//          "DAY".
//          "WEEK".
//          "MONTH".
//          "YEAR".
//     * ПериодХраненияКопий - Число - заполняется если ТипХраненияКопий = ИдентификаторТипаХраненияКопийЗаПоследние.
//     * КоличествоКопийВКаталоге - Число - заполняется если ТипХраненияКопий = "Последние".
//     * Расписания - Массив из Структура:
//         ** Использование - Булево
//         ** Расписание - РасписаниеРегламентногоЗадания
//         ** РасписаниеПредставление - Строка
//
Функция ДесериализоватьНастройкиАрхивированияСервиса(СтрокаJSON)
	
	// Описание ожидаемой структуры строки JSON
	ИнформационнаяБаза = Новый Структура();
	ИнформационнаяБаза.Вставить("name"    , "");
	ИнформационнаяБаза.Вставить("URI"     , "");
	ИнформационнаяБаза.Вставить("timeZone", "");
	
	НастройкиХранения = Новый Структура();
	НастройкиХранения.Вставить("type" , "");
	НастройкиХранения.Вставить("count", 0);
	
	Расписания = Новый Массив();	// Массив из см. НовыйРасписаниеРезервногоКопированияСервис
	
	НастройкиАрхивирования = Новый Структура();
	НастройкиАрхивирования.Вставить("infobase" , ИнформационнаяБаза);
	НастройкиАрхивирования.Вставить("storage"  , НастройкиХранения);
	НастройкиАрхивирования.Вставить("schedules", Расписания);
	
	ЗаполнитьЗначенияСвойств(
		НастройкиАрхивирования,
		СтрокуJSONВЗначение(СтрокаJSON));
	
	Результат = Новый Структура();
	Результат.Вставить("НаименованиеИБ"    , НастройкиАрхивирования.infobase.name);
	Результат.Вставить("ЧасовойПояс"       , НастройкиАрхивирования.infobase.timeZone);
	Результат.Вставить("ЧасовойПоясСервера", ЧасовойПоясUTC());
	Результат.Вставить("ЧасовойПоясСеанса" , ЧасовойПоясСеансаUTC());
	
	// Тип хранения копий
	ТипХраненияСервис = ВРег(НастройкиАрхивирования.storage.type);
	Если ТипХраненияСервис = "ITEM" Тогда
		ТипХраненияКопий         = ТипХраненияСервис;
		КоличествоКопийВКаталоге = НастройкиАрхивирования.storage.count;
	ИначеЕсли ТипХраненияСервис = "DAY" Тогда
		ТипХраненияКопий        = ИдентификаторТипаХраненияКопийЗаПоследние();
		ТипПериодаХраненияКопий = ТипХраненияСервис;
		ПериодХраненияКопий     = НастройкиАрхивирования.storage.count;
	ИначеЕсли ТипХраненияСервис = "WEEK" Тогда
		ТипХраненияКопий        = ИдентификаторТипаХраненияКопийЗаПоследние();
		ТипПериодаХраненияКопий = ТипХраненияСервис;
		ПериодХраненияКопий     = НастройкиАрхивирования.storage.count;
	ИначеЕсли ТипХраненияСервис = "MONTH" Тогда
		ТипХраненияКопий        = ИдентификаторТипаХраненияКопийЗаПоследние();
		ТипПериодаХраненияКопий = ТипХраненияСервис;
		ПериодХраненияКопий     = НастройкиАрхивирования.storage.count;
	ИначеЕсли ТипХраненияСервис = "YEAR" Тогда
		ТипХраненияКопий        = ИдентификаторТипаХраненияКопийЗаПоследние();
		ТипПериодаХраненияКопий = ТипХраненияСервис;
		ПериодХраненияКопий     = НастройкиАрхивирования.storage.count;
	Иначе
		ТипХраненияКопий        = ИдентификаторТипаХраненияКопийВсе();
	КонецЕсли;
	
	Результат.Вставить("ТипХраненияКопий"        , ТипХраненияКопий);
	Результат.Вставить("ТипПериодаХраненияКопий" , ТипПериодаХраненияКопий);
	Результат.Вставить("ПериодХраненияКопий"     , ПериодХраненияКопий);
	Результат.Вставить("КоличествоКопийВКаталоге", КоличествоКопийВКаталоге);
	
	// Расписания резервного копирования
	Расписания = Новый Массив();	// Массив из Структура
	Для Каждого ТекРасписание Из НастройкиАрхивирования.schedules Цикл
		
		Расписание = ОбъектСервисаВРасписаниеРегламентногоЗадания(ТекРасписание);
		
		СтрокаРасписания = Новый Структура();
		СтрокаРасписания.Вставить("Использование"          , ТекРасписание.isActive);
		СтрокаРасписания.Вставить("Расписание"             , Расписание);
		СтрокаРасписания.Вставить("РасписаниеПредставление", Строка(Расписание));
		
		Расписания.Добавить(СтрокаРасписания);
		
	КонецЦикла;
	
	Результат.Вставить("Расписания", Расписания);
	
	Возврат Результат;
	
КонецФункции

// Возвращает объект РасписаниеРегламентногоЗадания заполненного по структуре сервиса Облачного архива.
//
// Параметры:
//  ОбъектСервиса - см. НовыйРасписаниеРезервногоКопированияСервис
//
// Возвращаемое значение:
//  РасписаниеРегламентногоЗадания
//
Функция ОбъектСервисаВРасписаниеРегламентногоЗадания(ОбъектСервиса)
	
	// Преобразование к ожидаемой структуре
	Расписание = НовыйРасписаниеРезервногоКопированияСервис();
	ЗаполнитьЗначенияСвойств(Расписание, ОбъектСервиса);
	
	Результат = Новый РасписаниеРегламентногоЗадания();
	Результат.ДатаНачала      = СтроковыеФункцииКлиентСервер.СтрокаВДату(Расписание.beginDate, ЧастиДаты.Дата);
	Результат.ДатаКонца       = СтроковыеФункцииКлиентСервер.СтрокаВДату(Расписание.endDate, ЧастиДаты.Дата);
	Результат.ВремяНачала     = СтроковыеФункцииКлиентСервер.СтрокаВДату(Расписание.beginTime, ЧастиДаты.Время);
	Результат.ВремяКонца      = СтроковыеФункцииКлиентСервер.СтрокаВДату(Расписание.endTime, ЧастиДаты.Время);
	Результат.ВремяЗавершения = СтроковыеФункцииКлиентСервер.СтрокаВДату(Расписание.completionTime, ЧастиДаты.Время);
	
	Результат.ДеньНеделиВМесяце        = Расписание.dayWeekInMonth;
	Результат.ДеньВМесяце              = Расписание.daysOfMonth;
	Результат.ПериодПовтораДней        = Расписание.repeatPeriodDays;
	Результат.ПериодНедель             = Расписание.repeatPeriodWeeks;
	Результат.ИнтервалЗавершения       = Расписание.completionInterval;
	Результат.ПаузаПовтора             = Расписание.repeatPause;
	Результат.ПериодПовтораВТечениеДня = Расписание.repeatPeriodInDay;
	
	Если ТипЗнч(Расписание.months) = Тип("Массив") Тогда
		Результат.Месяцы = Расписание.months;
	КонецЕсли;
	
	Если ТипЗнч(Расписание.weekDays) = Тип("Массив") Тогда
		Результат.ДниНедели = Расписание.weekDays;
	КонецЕсли;
	
	ДетальныеРасписанияДня = Новый Массив();	// Массив из РасписаниеРегламентногоЗадания
	Для Каждого ТекДетальноеРасписание Из ОбъектСервиса.dayDetail Цикл
		
		// Преобразование к ожидаемой структуре
		РасписаниеДня = НовыйДетальноеРасписаниеДняСервис();
		ЗаполнитьЗначенияСвойств(РасписаниеДня, ТекДетальноеРасписание);
		
		ДетальноеРасписаниеДня = Новый РасписаниеРегламентногоЗадания();
		ДетальноеРасписаниеДня.ВремяНачала     =
			СтроковыеФункцииКлиентСервер.СтрокаВДату(РасписаниеДня.beginTime, ЧастиДаты.Время);
		ДетальноеРасписаниеДня.ВремяКонца      =
			СтроковыеФункцииКлиентСервер.СтрокаВДату(РасписаниеДня.endTime, ЧастиДаты.Время);
		ДетальноеРасписаниеДня.ВремяЗавершения =
			СтроковыеФункцииКлиентСервер.СтрокаВДату(РасписаниеДня.completionTime, ЧастиДаты.Время);
		
		ДетальноеРасписаниеДня.ПаузаПовтора             = РасписаниеДня.pause;
		ДетальноеРасписаниеДня.ПериодПовтораВТечениеДня = РасписаниеДня.repeat;
		ДетальноеРасписаниеДня.ИнтервалЗавершения       = РасписаниеДня.completionInterval;
		
		ДетальныеРасписанияДня.Добавить(ДетальноеРасписаниеДня);
		
	КонецЦикла;
	
	Результат.ДетальныеРасписанияДня = ДетальныеРасписанияДня;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ВзаимодействиеСПорталом

// Выполняет запрос к сервису проверки его доступности.
//
// Параметры:
//  ПараметрыРезервногоКопирования - Структура - см. НовыйПараметрыРезервногоКопирования
//                                 - Неопределено - значение переменной будет заполнено сохраненными данными.
//  ДанныеАутентификации - Структура -
//    см. ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки
//                       - Неопределено - данные аутентификации необходимо взять из базы данных.
//
// Возвращаемое значение:
//  Структура:
//    * Статус - Строка - статус проверки доступности:
//        см. ИдентификаторСтатусаОблачныйАрхивДоступен - сервис доступен.
//        см. ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаОблачныйАрхивНедоступен - сервис недоступен.
//        см. ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаИППОшибкаАутентификации - ошибка аутентификации.
//        см. ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаИППНеПодключена - ИПП не подключена.
//        см. ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаИПППодключенНаДругойЛогин - ошибка связи логина с ОА.
//        см. ИдентификаторСтатусаОшибкаЗапроса
//        см. ИдентификаторСтатусаОшибкаСервиса
//        см. ОблачныйАрхив20.ИдентификаторСтатусаСервисВременноНедоступен - сервис временно недоступен.
//    * СообщениеПользователю - Строка, ФорматированнаяСтрока - текст, который необходимо отобразить пользователю на
//        форме.
//    * СообщениеТехподдержке - Строка - текст, который необходимо вставить в обращение к технической поддержке.
//    * ДанныеАутентификации - Структура - см. ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки
//                           - Неопределено
//
Функция ПроверитьДоступностьСервисаОблачныйАрхив(
	ПараметрыРезервногоКопирования = Неопределено,
	ДанныеАутентификации = Неопределено)
	
	// Инициализация локальных переменных
	ДанныеАутентификацииРезультата = Неопределено;	// см. ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки
	
	Результат = НовыйОтветСервиса();
	Результат.Вставить("ДанныеАутентификации", ДанныеАутентификацииРезультата);
	
	// Проверка параметров аутентификации
	РезультатПроверкиИПП = ПроверитьПодключениеИнтернетПоддержкиПользователей(
		ПараметрыРезервногоКопирования,
		ДанныеАутентификации);
	
	Если РезультатПроверкиИПП.Статус <> ИдентификаторСтатусаИПППодключена() Тогда
		ЗаполнитьЗначенияСвойств(Результат, РезультатПроверкиИПП);
		Возврат Результат;
	Иначе
		Результат.ДанныеАутентификации = РезультатПроверкиИПП.ДанныеАутентификации;
	КонецЕсли;
	
	// Получение тикета сервиса
	РезультатПолученияТикета = ТикетАутентификацииСервиса();
	Если ПустаяСтрока(РезультатПолученияТикета.Тикет) Тогда
		
		Результат.Статус                = ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаИППОшибкаАутентификации();
		Результат.СообщениеПользователю = РезультатПолученияТикета.СообщениеОбОшибке;
		
		Возврат Результат;
		
	КонецЕсли;
	
	// Проверка доступности сервиса
	URLОперации          = URLОперацииПроверкиДоступности();
	ИдентификаторЗапроса = Строка(Новый УникальныйИдентификатор());
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("X-Token"         , РезультатПолученияТикета.Тикет);
	Заголовки.Вставить("X-Correlation-ID", ИдентификаторЗапроса);

	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("Метод"       , "GET");
	ПараметрыЗапроса.Вставить("Заголовки"   , Заголовки);
	ПараметрыЗапроса.Вставить("ФорматОтвета", 1);
	ПараметрыЗапроса.Вставить("Таймаут"     , 30);
	
	РезультатОперации = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(URLОперации, , , ПараметрыЗапроса);
	
	ТекстИнформации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получена информация о доступности сервиса Облачный архив.
			|URL: %1
			|X-Correlation-ID: %2
			|%3'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
		URLОперации,
		ИдентификаторЗапроса,
		РезультатОперации.Содержимое);
	ЗаписатьИнформациюВЖурналРегистрации(ТекстИнформации);
	
	Если РезультатОперации.КодСостояния = 200 Тогда
		
		// Тело ответа:
		// {
		//   "backup": true
		// }
		
		ДанныеОтвета = Новый Структура();
		ДанныеОтвета.Вставить("backup", Ложь);
		
		Попытка
			
			ЗаполнитьЗначенияСвойств(
				ДанныеОтвета,
				СтрокуJSONВЗначение(РезультатОперации.Содержимое));
			
			Если ДанныеОтвета.backup Тогда
				Результат.Статус = ИдентификаторСтатусаОблачныйАрхивДоступен();
			Иначе
				Результат.Статус                =
					ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаОблачныйАрхивНедоступен();
				Результат.СообщениеПользователю = СтандартноеСообщениеПользователю(Результат.Статус);
			КонецЕсли;
			
		Исключение
			
			ОшибкаЧтенияДанныхСервиса(
				Результат,
				ПараметрыЗапроса.Метод,
				URLОперации,
				РезультатОперации,
				ИнформацияОбОшибке());
			
		КонецПопытки;
		
	ИначеЕсли СтандартнаяОбработкаКодовСостояний(Результат, РезультатОперации) Тогда
		
		Если РезультатОперации.КодСостояния = 500 Тогда
			Результат.СообщениеТехподдержке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка проверки доступности сервиса 1С:Облачный архив.
					|URL: %1 %2
					|Код состояния: %3
					|Тело ответа:
					|%4'"),
				ПараметрыЗапроса.Метод,
				URLОперации,
				Строка(РезультатОперации.КодСостояния),
				РезультатОперации.Содержимое);
		КонецЕсли;
		
	ИначеЕсли РезультатОперации.КодСостояния = 503 Тогда
		
		СервисВременноНедоступен(
			Результат,
			НСтр("ru = 'Не удалось проверить доступность сервиса 1С:Облачный архив. Сервис временно недоступен.'"),
			НСтр("ru = 'Сервис проверки доступности сервиса 1С:Облачный архив временно недоступен.'"),
			ПараметрыЗапроса.Метод,
			URLОперации,
			РезультатОперации);
		
	Иначе
		
		НеклассифицированнаяОшибкаСервиса(
			Результат,
			НСтр("ru = 'Ошибка при работе с сервисом (подробнее см. Журнал регистрации).'"),
			НСтр("ru = 'Проверка доступности сервиса 1С:Облачный архив вернула неклассифицированную ошибку.'"),
			ПараметрыЗапроса.Метод,
			URLОперации,
			РезультатОперации);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выполняет запрос проверки работы Агента облачного архива на портал Облачного архива и возвращает результат операции.
//
// Параметры:
//  АгентID - Строка - строка идентификатора Агента облачного архива, полученного при активации.
//
// Возвращаемое значение:
//  Структура:
//    * Статус - Строка - статус проверки работы Агента облачного архива:
//        см. ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаРаботыАгентаАктивен - Агент активен.
//        см. ИдентификаторСтатусаРаботыАгентаНеАктивен - Агент не активен.
//        см. ОблачныйАрхив20.ИдентификаторСтатусаАгентНеУстановлен - ошибка получения порта Агента.
//        см. ИдентификаторСтатусаОшибкаЗапроса - сервис указывает на ошибку запроса.
//        см. ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаИППОшибкаАутентификации - ошибка аутентификации.
//        см. ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаОблачныйАрхивНедоступен - отсутствует действующий договор.
//        см. ИдентификаторСтатусаОшибкаСервиса - сервис вернул неклассифицированную ошибку или ошибка чтения результата
//          операции.
//        см. ОблачныйАрхив20.ИдентификаторСтатусаСервисВременноНедоступен - сервис на обслуживании.
//    * СообщениеПользователю - Строка, ФорматированнаяСтрока - текст, который необходимо отобразить пользователю на
//        форме.
//    * СообщениеТехподдержке - Строка - текст, который необходимо вставить в обращение к технической поддержке.
//
Функция ПроверитьРаботуАгентаЧерезСервис(АгентID)
	
	// Инициализация локальных переменных
	Результат = НовыйОтветСервиса();
	
	// Получение тикета сервиса
	РезультатПолученияТикета = ТикетАутентификацииСервиса();
	Если ПустаяСтрока(РезультатПолученияТикета.Тикет) Тогда
		
		Результат.Статус                = ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаИППОшибкаАутентификации();
		Результат.СообщениеПользователю = РезультатПолученияТикета.СообщениеОбОшибке;
		
		Возврат Результат;
		
	КонецЕсли;
	
	// Получение статуса работы Агента резервного копирования
	URLОперации          = URLОперацииЗапросаСтатусаРаботыАгента(АгентID);
	ИдентификаторЗапроса = Строка(Новый УникальныйИдентификатор());
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("X-Token"         , РезультатПолученияТикета.Тикет);
	Заголовки.Вставить("X-Correlation-ID", ИдентификаторЗапроса);
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("Метод"       , "POST");
	ПараметрыЗапроса.Вставить("Заголовки"   , Заголовки);
	ПараметрыЗапроса.Вставить("ФорматОтвета", 1);
	ПараметрыЗапроса.Вставить("Таймаут"     , 30);
	
	РезультатОперации = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(URLОперации, , , ПараметрыЗапроса);
	
	ТекстИнформации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получена информация о статусе Агента облачного архива.
			|URL: %1
			|X-Correlation-ID: %2
			|%3'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
		URLОперации,
		ИдентификаторЗапроса,
		РезультатОперации.Содержимое);
	ЗаписатьИнформациюВЖурналРегистрации(ТекстИнформации);
	
	Если РезультатОперации.КодСостояния = 200 Тогда
		
		// Тело ответа:
		// {
		//   "status": "ACTIVE"
		// }
		
		ДанныеОтвета = Новый Структура();
		ДанныеОтвета.Вставить("status", "");
		
		Попытка
			
			ЗаполнитьЗначенияСвойств(
				ДанныеОтвета,
				СтрокуJSONВЗначение(РезультатОперации.Содержимое));
				
			Если СтрСравнить(ДанныеОтвета.status, "ACTIVE") = 0 Тогда
				Результат.Статус = ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаРаботыАгентаАктивен();
			Иначе
				Результат.Статус                = ИдентификаторСтатусаРаботыАгентаНеАктивен();
				Результат.СообщениеПользователю = СтандартноеСообщениеПользователю(Результат.Статус);
			КонецЕсли;
			
		Исключение
			
			ОшибкаЧтенияДанныхСервиса(
				Результат,
				ПараметрыЗапроса.Метод,
				URLОперации,
				РезультатОперации,
				ИнформацияОбОшибке());
			
		КонецПопытки;
		
	ИначеЕсли СтандартнаяОбработкаКодовСостояний(Результат, РезультатОперации) Тогда
		
		Если РезультатОперации.КодСостояния = 500 Тогда
			Результат.СообщениеТехподдержке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка проверки работы Агента облачного архива.
					|URL: %1 %2
					|Код состояния: %3
					|Тело ответа:
					|%4'"),
				ПараметрыЗапроса.Метод,
				URLОперации,
				Строка(РезультатОперации.КодСостояния),
				РезультатОперации.Содержимое);
		КонецЕсли;
		
	ИначеЕсли РезультатОперации.КодСостояния = 503 Тогда
		
		СервисВременноНедоступен(
			Результат,
			НСтр("ru = 'Не удалось проверить работу Агента облачного архива. Сервис временно недоступен.'"),
			НСтр("ru = 'Сервис проверки работы Агента облачного архива временно недоступен.'"),
			ПараметрыЗапроса.Метод,
			URLОперации,
			РезультатОперации);
		
	Иначе
		
		НеклассифицированнаяОшибкаСервиса(
			Результат,
			НСтр("ru = 'Ошибка проверки работы Агента облачного архива.'"),
			НСтр("ru = 'Сервис проверки работы Агента облачного архива вернул неклассифицированную ошибку.'"),
			ПараметрыЗапроса.Метод,
			URLОперации,
			РезультатОперации);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает результат запроса получения настроек резервного копирования.
//
// Параметры:
//  ПараметрыАрхивирования - см. НовыйПараметрыРезервногоКопирования
//
// Возвращаемое значение:
//  Структура:
//    * Статус - Строка - статус получения настроек резервного копирования:
//        см. ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаОблачныйАрхивНастройкиПолучены
//        см. ИдентификаторСтатусаОблачныйАрхивБазаНеЗарегистрирована
//        см. ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаИППОшибкаАутентификации
//        см. ИдентификаторСтатусаОшибкаСервиса
//        см. ОблачныйАрхив20.ИдентификаторСтатусаСервисВременноНедоступен
//        см. ИдентификаторСтатусаОшибкаЗапроса - ошибка запроса.
//    * СообщениеПользователю - Строка, ФорматированнаяСтрока - текст, который необходимо отобразить пользователю на
//        форме.
//    * СообщениеТехподдержке - Строка - текст, который необходимо вставить в обращение к технической поддержке.
//    * НастройкиАрхивирования - Структура: см. ДесериализоватьНастройкиАрхивированияСервиса
//                             - Неопределено
//    * URI - Неопределено, Строка - адрес размещения информационной базы. Заполняется если в ПараметрыАрхивирования отсутствовала
//        информация о адресе размещения и запрос получения настроек выполнен успешно. Заполняется если
//        ПараметрыАрхивирования.URI не заполнен.
//
Функция ПолучитьНастройкиРезервногоКопирования(ПараметрыАрхивирования)
	
	// Инициализация локальных переменных
	НастройкиАрхивирования = Неопределено;	// см. ДесериализоватьНастройкиАрхивированияСервиса
	URIПодключения         = Неопределено;	// Неопределено, Строка
	
	Результат = НовыйОтветСервиса();
	Результат.Вставить("НастройкиАрхивирования", НастройкиАрхивирования);
	Результат.Вставить("URI"                   , URIПодключения);
	
	// Получение тикета сервиса
	РезультатПолученияТикета = ТикетАутентификацииСервиса();
	Если ПустаяСтрока(РезультатПолученияТикета.Тикет) Тогда
		
		Результат.Статус                = ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаИППОшибкаАутентификации();
		Результат.СообщениеПользователю = РезультатПолученияТикета.СообщениеОбОшибке;
		
		Возврат Результат;
		
	КонецЕсли;
	
	// Чтение сохраненных настроек
	URLОперации          = URLОперацииЗапросаНастроекРезервногоКопирования(ПараметрыАрхивирования.АгентID);
	ИдентификаторЗапроса = Строка(Новый УникальныйИдентификатор());
	URIПодключения       = ?(ПустаяСтрока(ПараметрыАрхивирования.URI),
		URIТекущегоПодключения(),
		ПараметрыАрхивирования.URI);
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type"    , "application/json");
	Заголовки.Вставить("X-Token"         , РезультатПолученияТикета.Тикет);
	Заголовки.Вставить("X-Correlation-ID", ИдентификаторЗапроса);
	
	ДанныеДляОбработки = Новый Структура("URI", URIПодключения);
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("Метод"                   , "POST");
	ПараметрыЗапроса.Вставить("Заголовки"               , Заголовки);
	ПараметрыЗапроса.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыЗапроса.Вставить("ФорматОтвета"            , 1);
	ПараметрыЗапроса.Вставить("Таймаут"                 , 30);
	ПараметрыЗапроса.Вставить(
		"ДанныеДляОбработки",
		ЗначениеВСтрокуJSON(ДанныеДляОбработки));
	
	ТекстИнформации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получение настроек резервного копирования.
			|URL: %1
			|X-Correlation-ID: %2
			|%3'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
		URLОперации,
		ИдентификаторЗапроса,
		ПараметрыЗапроса.ДанныеДляОбработки);
	ЗаписатьИнформациюВЖурналРегистрации(ТекстИнформации);
	
	РезультатОперации = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(URLОперации, , , ПараметрыЗапроса);
	
	ТекстИнформации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получена информация о настройках резервного копирования.
			|X-Correlation-ID: %1
			|%2'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
		ИдентификаторЗапроса,
		РезультатОперации.Содержимое);
	ЗаписатьИнформациюВЖурналРегистрации(ТекстИнформации);
	
	// Настройки успешно получены
	Если РезультатОперации.КодСостояния = 200 Тогда
		
		Попытка
			
			НастройкиАрхивирования = ДесериализоватьНастройкиАрхивированияСервиса(РезультатОперации.Содержимое);
			
			Если ПустаяСтрока(ПараметрыАрхивирования.URI) Тогда
				Результат.URI = URIПодключения;
			КонецЕсли;
			
			Результат.Статус                 =
				ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаОблачныйАрхивНастройкиПолучены();
			Результат.НастройкиАрхивирования = НастройкиАрхивирования;
			
		Исключение
			
			ОшибкаЧтенияДанныхСервиса(
				Результат,
				ПараметрыЗапроса.Метод,
				URLОперации,
				РезультатОперации,
				ИнформацияОбОшибке());
			
		КонецПопытки;
		
	// Обработка стандартной ошибки
	ИначеЕсли СтандартнаяОбработкаКодовСостояний(Результат, РезультатОперации) Тогда
		
		Если РезультатОперации.КодСостояния = 500 Тогда
			Результат.СообщениеТехподдержке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка чтения настроек резервного копирования Облачного архива.
					|URL: %1 %2
					|Код ответа: %3'"),
				ПараметрыЗапроса.Метод,
				URLОперации,
				Строка(РезультатОперации.КодСостояния));
		КонецЕсли;
		
	// Не найдена настройка резервного копирования
	ИначеЕсли РезультатОперации.КодСостояния = 404 Тогда
		
		Результат.URI                   = URIПодключения;
		Результат.Статус                = ИдентификаторСтатусаОблачныйАрхивБазаНеЗарегистрирована();
		Результат.СообщениеПользователю =
			НСтр("ru = 'Информационная база не зарегистрирована в Облачном архиве.
				|Обратитесь к администратору или напишите в техподдержку.'");
		Результат.СообщениеТехподдержке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Информационная база не зарегистрирована в Облачном архиве.
				|Агент ID: %1
				|URL: %2 %3
				|URI: %4
				|Код состояния: %5'"),
			ПараметрыАрхивирования.АгентID,
			ПараметрыЗапроса.Метод,
			URLОперации,
			URIПодключения,
			Строка(РезультатОперации.КодСостояния));
		
		ЗаписатьИнформациюВЖурналРегистрации(Результат.СообщениеТехподдержке);
		
	ИначеЕсли РезультатОперации.КодСостояния = 503 Тогда
		
		СервисВременноНедоступен(
			Результат,
			НСтр("ru = 'Не удалось получить настройки Облачного архива. Сервис временно недоступен.'"),
			НСтр("ru = 'Сервис чтения настроек резервного копирования Облачного архива временно недоступен.'"),
			ПараметрыЗапроса.Метод,
			URLОперации,
			РезультатОперации);
		
	Иначе
		
		НеклассифицированнаяОшибкаСервиса(
			Результат,
			НСтр("ru = 'Ошибка при работе с сервисом (подробнее см. Журнал регистрации).'"),
			НСтр("ru = 'Сервис чтения настроек резервного копирования Облачного архива вернул неклассифицированную ошибку.'"),
			ПараметрыЗапроса.Метод,
			URLОперации,
			РезультатОперации);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Вызывает сервис сохранения настроек резервного копирования.
//
// Параметры:
//  ПараметрыСохранения - см. СохранениеНастроекОблачногоАрхиваВФоне.ПараметрыСохранения
//
// Возвращаемое значение:
//  Структура:
//    * Статус - Строка - статус процесса сохранения настроек. Доступные значения:
//        см. ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаОблачныйАрхивНастройкиСохранены
//        см. ИдентификаторСтатусаОблачныйАрхивОшибкаСохраненияНастроек
//        см. ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаИППОшибкаАутентификации
//        см. ИдентификаторСтатусаОшибкаСервиса
//        см. ОблачныйАрхив20.ИдентификаторСтатусаСервисВременноНедоступен
//        см. ИдентификаторСтатусаОшибкаЗапроса - ошибка запроса.
//    * СообщениеПользователю - Строка, ФорматированнаяСтрока - текст, который необходимо отобразить пользователю на
//        форме.
//    * СообщениеТехподдержке - Строка - текст, который необходимо вставить в обращение к технической поддержке.
//
Функция СохранитьНастройкиРезервногоКопирования(ПараметрыСохранения)
	
	// Инициализация локальных переменных
	Результат = НовыйОтветСервиса();
	
	// Получение тикета сервиса
	РезультатПолученияТикета = ТикетАутентификацииСервиса();
	Если ПустаяСтрока(РезультатПолученияТикета.Тикет) Тогда
		
		Результат.Статус                = ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаИППОшибкаАутентификации();
		Результат.СообщениеПользователю = РезультатПолученияТикета.СообщениеОбОшибке;
		
		Возврат Результат;
		
	КонецЕсли;
	
	URLОперации          = URLОперацииСохраненияНастроекРезервногоКопирования(
		ПараметрыСохранения.ПараметрыАрхивирования.АгентID);
	ИдентификаторЗапроса = Строка(Новый УникальныйИдентификатор());
	ДанныеДляОбработки   = СериализоватьНастройкиАрхивирования(ПараметрыСохранения);
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type"    , "application/json");
	Заголовки.Вставить("X-Token"         , РезультатПолученияТикета.Тикет);
	Заголовки.Вставить("X-Correlation-ID", ИдентификаторЗапроса);
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("Метод"                   , "POST");
	ПараметрыЗапроса.Вставить("Заголовки"               , Заголовки);
	ПараметрыЗапроса.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыЗапроса.Вставить("ДанныеДляОбработки"      , ДанныеДляОбработки);
	ПараметрыЗапроса.Вставить("Таймаут"                 , 30);
	
	ТекстИнформации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Сохранение настроек резервного копирования.
			|URL: %1
			|X-Correlation-ID: %2
			|%3'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
		URLОперации,
		ИдентификаторЗапроса,
		ДанныеДляОбработки);
	ЗаписатьИнформациюВЖурналРегистрации(ТекстИнформации);
	
	РезультатОперации = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(URLОперации, , , ПараметрыЗапроса);
	
	ТекстИнформации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получена информация о сохранении настроек резервного копирования.
			|X-Correlation-ID: %1
			|%2'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
		ИдентификаторЗапроса,
		РезультатОперации.Содержимое);
	ЗаписатьИнформациюВЖурналРегистрации(ТекстИнформации);
	
	Если РезультатОперации.КодСостояния = 200 Тогда
		
		Результат.Статус = ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаОблачныйАрхивНастройкиСохранены();
		
	ИначеЕсли СтандартнаяОбработкаКодовСостояний(Результат, РезультатОперации) Тогда
		
		Если РезультатОперации.КодСостояния = 500 Тогда
			Результат.СообщениеТехподдержке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка сохранения настроек Облачного архива.
					|URL: %1 %2
					|URI: %3
					|Код состояния: %4'"),
				ПараметрыЗапроса.Метод,
				URLОперации,
				ПараметрыСохранения.ПараметрыАрхивирования.URI,
				Строка(РезультатОперации.КодСостояния));
		КонецЕсли;
		
	ИначеЕсли РезультатОперации.КодСостояния = 404 Тогда
		
		Результат.Статус                = ИдентификаторСтатусаОблачныйАрхивОшибкаСохраненияНастроек();
		Результат.СообщениеПользователю =
			НСтр("ru = 'Не удалось сохранить настройки Облачного архива.
				|Обратитесь к администратору или напишите в техподдержку.'");
		Результат.СообщениеТехподдержке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка сохранения настроек Облачного архива.
				|Объект копирования или Агент не найден по переданному идентификатору.
				|URL: %1 %2
				|Агент ID: %3
				|URI: %4
				|Код состояния: %5
				|Тело ответа:
				|%6'"),
			ПараметрыЗапроса.Метод,
			URLОперации,
			ПараметрыСохранения.ПараметрыАрхивирования.АгентID,
			ПараметрыСохранения.ПараметрыАрхивирования.URI,
			Строка(РезультатОперации.КодСостояния),
			РезультатОперации.Содержимое);
		
		ЗаписатьИнформациюВЖурналРегистрации(Результат.СообщениеТехподдержке, Истина);
		
	ИначеЕсли РезультатОперации.КодСостояния = 503 Тогда
		
		СервисВременноНедоступен(
			Результат,
			НСтр("ru = 'Не удалось сохранить настройки Облачного архива. Сервис временно недоступен.'"),
			НСтр("ru = 'Сервис сохранения настроек Облачного архива временно недоступен.'"),
			ПараметрыЗапроса.Метод,
			URLОперации,
			РезультатОперации);
		
	Иначе
		
		НеклассифицированнаяОшибкаСервиса(
			Результат,
			НСтр("ru = 'Ошибка при работе с сервисом (подробнее см. Журнал регистрации).'"),
			НСтр("ru = 'Сервис сохранения настроек Облачного архива вернул неклассифицированную ошибку.'"),
			ПараметрыЗапроса.Метод,
			URLОперации,
			РезультатОперации);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выполняет удаления настроек автоматического резервного копирования в сервисе.
//
// Параметры:
//  РезультатИнициализации - см. ИнициализацияНастроекОблачногоАрхиваВФоне
//
// Возвращаемое значение:
//  Структура:
//    * Статус - Строка - статус удаления настроек резервного копирования:
//        см. ИдентификаторСтатусаОблачныйАрхивНастройкиУдалены
//        см. ИдентификаторСтатусаОблачныйАрхивОшибкаСохраненияНастроек
//        см. ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаИППОшибкаАутентификации
//        см. ИдентификаторСтатусаОшибкаСервиса
//        см. ОблачныйАрхив20.ИдентификаторСтатусаСервисВременноНедоступен
//        см. ИдентификаторСтатусаОшибкаЗапроса - ошибка запроса.
//    * СообщениеПользователю - Строка, ФорматированнаяСтрока - текст, который необходимо отобразить пользователю на
//        форме.
//    * СообщениеТехподдержке - Строка - текст, который необходимо вставить в обращение к технической поддержке.
//
Функция УдалитьНастройкиРезервногоКопирования(РезультатИнициализации)
	
	// Инициализация локальных переменных
	Результат = НовыйОтветСервиса();
	
	// Получение сохраненных настроек для применения их в новой настройке
	РезультатПолученияНастроек = ПолучитьНастройкиРезервногоКопирования(РезультатИнициализации.ПараметрыАрхивирования);
	
	// Настройка расписания для старого URI отсутствует
	Если РезультатПолученияНастроек.Статус = ИдентификаторСтатусаОблачныйАрхивБазаНеЗарегистрирована() Тогда
		Результат.Статус = ИдентификаторСтатусаОблачныйАрхивНастройкиУдалены();
		Возврат Результат;
		
	// Ошибка получения настроек
	ИначеЕсли РезультатПолученияНастроек.Статус <> ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаОблачныйАрхивНастройкиПолучены() Тогда
		ЗаполнитьЗначенияСвойств(Результат, РезультатПолученияНастроек);
		Возврат Результат;
	КонецЕсли;
	
	// Получение тикета сервиса
	РезультатПолученияТикета = ТикетАутентификацииСервиса();
	Если ПустаяСтрока(РезультатПолученияТикета.Тикет) Тогда
		
		Результат.Статус                = ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаИППОшибкаАутентификации();
		Результат.СообщениеПользователю = РезультатПолученияТикета.СообщениеОбОшибке;
		
		Возврат Результат;
		
	КонецЕсли;
	
	РезультатИнициализации.НастройкиАрхивирования = 
		ОбщегоНазначения.СкопироватьРекурсивно(РезультатПолученияНастроек.НастройкиАрхивирования);
	
	ПараметрыСохранения = Новый Структура();
	ПараметрыСохранения.Вставить("НастройкиАрхивирования", РезультатПолученияНастроек.НастройкиАрхивирования);
	ПараметрыСохранения.Вставить("ПараметрыАрхивирования", РезультатИнициализации.ПараметрыАрхивирования);
	ПараметрыСохранения.НастройкиАрхивирования.Расписания.Очистить();
	
	// Удаление настроек через операцию сохранения с пустым списком расписания
	URLОперации          = URLОперацииСохраненияНастроекРезервногоКопирования(
		РезультатИнициализации.ПараметрыАрхивирования.АгентID);
	ИдентификаторЗапроса = Строка(Новый УникальныйИдентификатор());
	ДанныеДляОбработки   = СериализоватьНастройкиАрхивирования(ПараметрыСохранения);
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type"    , "application/json");
	Заголовки.Вставить("X-Token"         , РезультатПолученияТикета.Тикет);
	Заголовки.Вставить("X-Correlation-ID", ИдентификаторЗапроса);
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("Метод"                   , "POST");
	ПараметрыЗапроса.Вставить("Заголовки"               , Заголовки);
	ПараметрыЗапроса.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыЗапроса.Вставить("ДанныеДляОбработки"      , ДанныеДляОбработки);
	ПараметрыЗапроса.Вставить("Таймаут"                 , 30);
	
	ТекстИнформации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Удаление настроек резервного копирования.
			|URL: %1
			|X-Correlation-ID: %2
			|%3'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
		URLОперации,
		ИдентификаторЗапроса,
		ДанныеДляОбработки);
	ЗаписатьИнформациюВЖурналРегистрации(ТекстИнформации);
	
	РезультатОперации = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(URLОперации, , , ПараметрыЗапроса);
	
	ТекстИнформации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получена информация об удалении настроек резервного копирования.
			|X-Correlation-ID: %1
			|%2'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
		ИдентификаторЗапроса,
		РезультатОперации.Содержимое);
	ЗаписатьИнформациюВЖурналРегистрации(ТекстИнформации);
	
	Если РезультатОперации.КодСостояния = 200 Тогда
		
		Результат.Статус = ИдентификаторСтатусаОблачныйАрхивНастройкиУдалены();
		
	ИначеЕсли СтандартнаяОбработкаКодовСостояний(Результат, РезультатОперации) Тогда
		
		Если РезультатОперации.КодСостояния = 500 Тогда
			Результат.СообщениеТехподдержке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка удаления настроек Облачного архива.
					|URL: %1 %2
					|URI: %3
					|Код состояния: %4'"),
				ПараметрыЗапроса.Метод,
				URLОперации,
				РезультатИнициализации.ПараметрыАрхивирования.URI,
				Строка(РезультатОперации.КодСостояния));
		КонецЕсли;
		
	ИначеЕсли РезультатОперации.КодСостояния = 404 Тогда
		
		Результат.Статус                = ИдентификаторСтатусаОблачныйАрхивОшибкаСохраненияНастроек();
		Результат.СообщениеПользователю =
			НСтр("ru = 'Не удалось удалить настройки Облачного архива.
				|Обратитесь к администратору или напишите в техподдержку.'");
		Результат.СообщениеТехподдержке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка удаления настроек Облачного архива.
				|Объект копирования или Агент не найден по переданному идентификатору.
				|URL: %1 %2
				|Агент ID: %3
				|URI: %4
				|Код состояния: %5
				|Тело ответа:
				|%6'"),
			ПараметрыЗапроса.Метод,
			URLОперации,
			РезультатИнициализации.ПараметрыАрхивирования.АгентID,
			РезультатИнициализации.ПараметрыАрхивирования.URI,
			Строка(РезультатОперации.КодСостояния),
			РезультатОперации.Содержимое);
		
		ЗаписатьИнформациюВЖурналРегистрации(Результат.СообщениеТехподдержке, Истина);
		
	ИначеЕсли РезультатОперации.КодСостояния = 503 Тогда
		
		СервисВременноНедоступен(
			Результат,
			НСтр("ru = 'Не удалось удалить настройки Облачного архива. Сервис временно недоступен.'"),
			НСтр("ru = 'Сервис удаления настроек Облачного архива временно недоступен.'"),
			ПараметрыЗапроса.Метод,
			URLОперации,
			РезультатОперации);
		
	Иначе
		
		НеклассифицированнаяОшибкаСервиса(
			Результат,
			НСтр("ru = 'Ошибка при работе с сервисом (подробнее см. Журнал регистрации).'"),
			НСтр("ru = 'Сервис удаления настроек Облачного архива вернул неклассифицированную ошибку.'"),
			ПараметрыЗапроса.Метод,
			URLОперации,
			РезультатОперации);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// URL операции проверки доступности сервиса на портале 1С:ИТС.
//
// Возвращаемое значение:
//  Строка
//
Функция URLОперацииПроверкиДоступности()
	
	Возврат БазовыйURLСервиса() + "isl/users/functions/available";
	
КонецФункции

// URL операции запроса статуса работы Агента облачного архива.
//
// Параметры:
//  ИдентификаторАгента - Строка - идентификатор Агента облачного архива, полученного при активации.
//
// Возвращаемое значение:
//  Строка
//
Функция URLОперацииЗапросаСтатусаРаботыАгента(ИдентификаторАгента)
	
	Возврат БазовыйURLСервиса() + "isl/agents/" + ИдентификаторАгента + "/statuses/get-status";
	
КонецФункции

// URL операции запроса адреса дистрибутива Агента по текущей версии БИП.
//
// Возвращаемое значение:
//  Строка
//
Функция URLОперацииЗапросаАдресаДистрибутиваАгента()
	
	Возврат БазовыйURLСервиса()
		+ "isl/distribution/agent/latest?libraryVersion="
		+ ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки();
	
КонецФункции

// URL операции операции регистрации объекта копирования в Облачном архиве.
//
// Параметры:
//  ИдентификаторАгента - Строка - идентификатор Агента облачного архива, полученного при активации.
//
// Возвращаемое значение:
//  Строка
//
Функция URLОперацииРегистрацииОбъектаАрхивирования(ИдентификаторАгента)
	
	Возврат БазовыйURLСервиса() + "isl/agents/" + ИдентификаторАгента + "/infobases/registry";
	
КонецФункции

// URL операции запроса настроек резервного копирования Облачного архива.
//
// Параметры:
//  ИдентификаторАгента - Строка - идентификатор Агента облачного архива, полученного при активации.
//
// Возвращаемое значение:
//  Строка
//
Функция URLОперацииЗапросаНастроекРезервногоКопирования(ИдентификаторАгента)
	
	Возврат БазовыйURLСервиса() + "isl/agents/" + ИдентификаторАгента + "/infobases/settings/get-settings";
	
КонецФункции

// URL операции сохранения настроек резервного копирования Облачного архива.
//
// Параметры:
//  ИдентификаторАгента - Строка - идентификатор Агента облачного архива, полученного при активации.
//
// Возвращаемое значение:
//  Строка
//
Функция URLОперацииСохраненияНастроекРезервногоКопирования(ИдентификаторАгента)
	
	Возврат БазовыйURLСервиса() + "isl/agents/" + ИдентификаторАгента + "/infobases/settings/update-settings";
	
КонецФункции

#КонецОбласти

#Область ВзаимодействиеСАгентом

// Выполняет проверку установки ПО Агента облачного архива и возвращает порт, на котором он работает.
//
// Возвращаемое значение:
//  Структура:
//    * Статус - Строка - статус проверки ПО Агента облачного архива:
//        <Пустая строка> - порт Агента успешно получен.
//        см. ОблачныйАрхив20.ИдентификаторСтатусаАгентНеУстановлен - ошибка получения порта Агента.
//        см. ОблачныйАрхив20.ИдентификаторСтатусаПрочаяОшибка - невозможно получить порт Агента.
//    * СообщениеПользователю - Строка - текст, который необходимо отобразить пользователю на форме.
//    * СообщениеТехподдержке - Строка - текст, который необходимо вставить в обращение к технической поддержке.
//    * Порт - Строка - номер порта, на котором работает Агент облачного архива. Заполняется, если порт работы Агента
//        успешно получен.
//
Функция ПолучитьПортАгента()
	
	Результат = НовыйОтветСервиса();
	Результат.Вставить("Порт", "");
	
	// Проверка наличия установленной версии агента.
	СистемнаяИнформация = Новый СистемнаяИнформация();
	Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86 Тогда
		АдресРеестра = "HKEY_LOCAL_MACHINE\SOFTWARE\1cbackup-agent\INSTDIR";
	ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		АдресРеестра = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\1cbackup-agent\INSTDIR";
	КонецЕсли;
	
	СообщениеПользователю =
		НСтр("ru = 'Не удалось проверить работу программного обеспечения Агента.
			|Обратитесь к администратору или напишите в техподдержку.'");
	
	Попытка
		Оболочка = Новый COMОбъект("WScript.Shell");
	Исключение
		
		// Прерывание операции на прочей ошибки по причине не доступности объекта WScript.Shell
		Результат.Статус                = ИдентификаторСтатусаПрочаяОшибка();
		Результат.СообщениеПользователю = СообщениеПользователю;
		Результат.СообщениеТехподдержке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка создания объекта WScript.Shell:
				|%1'"),
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписатьИнформациюВЖурналРегистрации(Результат.СообщениеТехподдержке, Истина);
		
		Возврат Результат;
		
	КонецПопытки;
	
	Попытка
		КаталогАгента = Оболочка.RegRead(АдресРеестра);	// Строка
	Исключение
		
		Результат.Статус                = ИдентификаторСтатусаАгентНеУстановлен();
		Результат.СообщениеПользователю = СообщениеПользователю;
		Результат.СообщениеТехподдержке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка поиска каталога установки Агента облачного архива в реестре Windows.
				|Адрес реестра: %1
				|Ошибка: %2'"),
			АдресРеестра,
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		// Исключение не считается ошибкой, так как она возникает при отсутствии записи в реестре Windows
		ЗаписатьИнформациюВЖурналРегистрации(Результат.СообщениеТехподдержке);
		
		Возврат Результат
		
	КонецПопытки;
	
	// Проверка существования служебного файла агента.
	ФайлПуть     = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогАгента)
		+ "metadata"
		+ ПолучитьРазделительПути()
		+ "port.properties";	// Строка
	ФайлСвойства = Новый Файл(ФайлПуть);
	
	Если Не ФайлСвойства.Существует() Тогда
		
		Результат.Статус                = ИдентификаторСтатусаАгентНеУстановлен();
		Результат.СообщениеПользователю = СообщениеПользователю;
		Результат.СообщениеТехподдержке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не найден служебный файл Агента облачного архива.
				|Возможно, Агент установлен неправильно или не запущен.
				|Служебный файл: %1'"),
			ФайлПуть);
		
		ЗаписатьИнформациюВЖурналРегистрации(Результат.СообщениеТехподдержке, Истина);
		
		Возврат Результат;
		
	КонецЕсли;
	
	// Чтение информации о порте, под которым запущен агент
	ЧтениеТекста    = Новый ЧтениеТекста(ФайлПуть);
	РезультатЧтения = ЧтениеТекста.ПрочитатьСтроку();
	
	ЧтениеТекста.Закрыть();
	
	Если ПустаяСтрока(РезультатЧтения)
		Или Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(РезультатЧтения) Тогда
		
		Результат.Статус                = ИдентификаторСтатусаАгентНеУстановлен();
		Результат.СообщениеПользователю = СообщениеПользователю;
		Результат.СообщениеТехподдержке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить номер порта, под которым запущен Агент облачного архива.
				|Служебный файл: %1
				|Содержимое служебного файла:
				|%2'"),
			ФайлПуть,
			РезультатЧтения);
		
		ЗаписатьИнформациюВЖурналРегистрации(Результат.СообщениеТехподдержке, Истина);
		
		Возврат Результат;
		
	КонецЕсли;
	
	Результат.Порт = РезультатЧтения;
	
	Возврат Результат;
	
КонецФункции

// Запускает асинхронную задачу активации Агента.
//
// Возвращаемое значение:
//  Структура:
//    * Статус - Строка - статус задачи активации Агента облачного архива:
//        см. ИдентификаторСтатусаАгентАктивирован - Агент успешно активирован.
//        см. ОблачныйАрхив20.ИдентификаторСтатусаАгентНеАктивирован - запущен асинхронный процесс активации
//          Агента.
//        см. ОблачныйАрхив20.ИдентификаторСтатусаАгентНеУстановлен - ошибка получения порта Агента.
//        см. ИдентификаторСтатусаОшибкаЗапроса - сервис указывает на ошибку запроса.
//        см. ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаИППОшибкаАутентификации - ошибка аутентификации.
//        см. ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаОблачныйАрхивНедоступен - отсутствует действующий договор.
//        см. ИдентификаторСтатусаОшибкаСервиса - сервис вернул неклассифицированную ошибку или ошибка чтения результата
//          операции.
//        см. ОблачныйАрхив20.ИдентификаторСтатусаСервисВременноНедоступен - сервис на обслуживании.
//    * СообщениеПользователю - Строка - текст, который необходимо отобразить пользователю на форме.
//    * СообщениеТехподдержке - Строка - текст, который необходимо вставить в обращение к технической поддержке.
//    * АгентID - Строка - идентификатор Агента формате GUID. Заполняется, если статус активации
//        ИдентификаторСтатусаАгентАктивирован().
//
Функция ЗарегистрироватьЗаданиеАктивацииАгента()
	
	Результат = НовыйОтветСервиса();
	Результат.Вставить("АгентID", "");
	
	// Проверка работы Агента
	ПортАгента = ПолучитьПортАгента();
	Если Не ПустаяСтрока(ПортАгента.Статус) Тогда
		ЗаполнитьЗначенияСвойств(Результат, ПортАгента);
		Возврат Результат;
	КонецЕсли;
	
	// Получение тикета сервиса
	РезультатПолученияТикета = ТикетАутентификацииСервиса();
	Если ПустаяСтрока(РезультатПолученияТикета.Тикет) Тогда
		
		Результат.Статус                = ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаИППОшибкаАутентификации();
		Результат.СообщениеПользователю = РезультатПолученияТикета.СообщениеОбОшибке;
		
		Возврат Результат;
		
	КонецЕсли;
	
	// Запуск задания активации Агента
	URLОперации          = URLОперацииАктивацииАгента(ПортАгента.Порт);
	ИдентификаторЗапроса = Строка(Новый УникальныйИдентификатор());
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("X-Token"         , РезультатПолученияТикета.Тикет);
	Заголовки.Вставить("X-Correlation-ID", ИдентификаторЗапроса);
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("Метод"       , "PUT");
	ПараметрыЗапроса.Вставить("Заголовки"   , Заголовки);
	ПараметрыЗапроса.Вставить("ФорматОтвета", 1);
	ПараметрыЗапроса.Вставить("Таймаут"     , 30);
	
	ТекстИнформации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Регистрация задания на активацию Агента.
			|URL: %1
			|X-Correlation-ID: %2'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
		URLОперации,
		ИдентификаторЗапроса);
	ЗаписатьИнформациюВЖурналРегистрации(ТекстИнформации);
	
	РезультатОперации = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(URLОперации, , , ПараметрыЗапроса);
	
	ТекстИнформации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получена информация о регистрации задания на активацию Агента.
			|X-Correlation-ID: %1
			|%2'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
		ИдентификаторЗапроса,
		РезультатОперации.Содержимое);
	ЗаписатьИнформациюВЖурналРегистрации(ТекстИнформации);
	
	Если РезультатОперации.КодСостояния = 202 Тогда
		
		// Тело ответа:
		// {
		//   "id": "3d1ed035-3ec9-45d2-b69a-f1aacac94fe6",
		//   "status": "ACTIVATED"
		// }
		
		ДанныеОтвета = Новый Структура();
		ДанныеОтвета.Вставить("id"    , "");
		ДанныеОтвета.Вставить("status", "");
		
		Попытка
			
			ЗаполнитьЗначенияСвойств(
				ДанныеОтвета,
				СтрокуJSONВЗначение(РезультатОперации.Содержимое));
			
			Если СтрСравнить(ДанныеОтвета.status, "ACTIVATED") = 0 Тогда
				Результат.Статус  = ИдентификаторСтатусаАгентАктивирован();
				Результат.АгентID = ДанныеОтвета.id;
			Иначе
				Результат.Статус = ИдентификаторСтатусаАгентНеАктивирован();
			КонецЕсли;
			
		Исключение
			
			ОшибкаЧтенияДанныхСервиса(
				Результат,
				ПараметрыЗапроса.Метод,
				URLОперации,
				РезультатОперации,
				ИнформацияОбОшибке());
			
		КонецПопытки;
		
	ИначеЕсли СтандартнаяОбработкаКодовСостояний(Результат, РезультатОперации) Тогда
		
		Если РезультатОперации.КодСостояния = 500 Тогда
			Результат.СообщениеТехподдержке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка активации Агента облачного архива.
					|URL: %1 %2
					|Код состояния: %3
					|Тело ответа:
					|%4'"),
				ПараметрыЗапроса.Метод,
				URLОперации,
				Строка(РезультатОперации.КодСостояния),
				РезультатОперации.Содержимое);
		КонецЕсли;
		
	ИначеЕсли РезультатОперации.КодСостояния = 503 Тогда
		
		СервисВременноНедоступен(
			Результат,
			НСтр("ru = 'Не удалось активировать Агент облачного архива. Сервис временно недоступен.'"),
			НСтр("ru = 'Сервис активации Агента облачного архива временно недоступен.'"),
			ПараметрыЗапроса.Метод,
			URLОперации,
			РезультатОперации);
		
	Иначе
		
		НеклассифицированнаяОшибкаСервиса(
			Результат,
			НСтр("ru = 'Ошибка при работе с сервисом активации Агента облачного архива.'"),
			НСтр("ru = 'Сервис активации Агента облачного архива вернул неклассифицированную ошибку.'"),
			ПараметрыЗапроса.Метод,
			URLОперации,
			РезультатОперации);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выполняет проверку работы ПО и активацию Агента облачного архива.
//
// Возвращаемое значение:
//  Структура:
//    * Статус - Строка - статус проверки работы Агента облачного архива:
//        см. ИдентификаторСтатусаАгентАктивирован - Агент успешно активирован.
//        см. ОблачныйАрхив20.ИдентификаторСтатусаАгентНеАктивирован - запущен асинхронный процесс активации
//          Агента.
//        см. ОблачныйАрхив20.ИдентификаторСтатусаАгентНеУстановлен - ошибка получения порта Агента.
//        см. ИдентификаторСтатусаОшибкаЗапроса - сервис указывает на ошибку запроса.
//        см. ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаОблачныйАрхивНедоступен - отсутствует действующий договор.
//        см. ИдентификаторСтатусаОшибкаСервиса - сервис вернул неклассифицированную ошибку или ошибка чтения результата
//          операции.
//        см. ОблачныйАрхив20.ИдентификаторСтатусаСервисВременноНедоступен - сервис на обслуживании.
//    * СообщениеПользователю - Строка - текст, который необходимо отобразить пользователю на форме.
//    * СообщениеТехподдержке - Строка - текст, который необходимо вставить в обращение к технической поддержке.
//    * АгентID - Строка - идентификатор Агента формате GUID. Заполняется, если статус активации
//        ИдентификаторСтатусаАгентАктивирован().
//
Функция ПолучитьСтатусАктивацииАгента()
	
	Результат = НовыйОтветСервиса();
	Результат.Вставить("АгентID", "");
	
	// Проверка работы Агента
	ПортАгента = ПолучитьПортАгента();
	Если Не ПустаяСтрока(ПортАгента.Статус) Тогда
		ЗаполнитьЗначенияСвойств(Результат, ПортАгента);
		Возврат Результат;
	КонецЕсли;
	
	// Определение статуса активации агента
	URLОперации          = URLОперацииЗапросаСтатусаАктивацииАгента(ПортАгента.Порт);
	ИдентификаторЗапроса = Строка(Новый УникальныйИдентификатор());
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("X-Correlation-ID", ИдентификаторЗапроса);
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("Метод"       , "GET");
	ПараметрыЗапроса.Вставить("Заголовки"   , Заголовки);
	ПараметрыЗапроса.Вставить("ФорматОтвета", 1);
	ПараметрыЗапроса.Вставить("Таймаут"     , 5);
	
	РезультатОперации = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(URLОперации, , , ПараметрыЗапроса);
	
	ТекстИнформации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получена информация о статусе активации Агента.
			|URL: %1
			|X-Correlation-ID: %2
			|%3'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
		URLОперации,
		ИдентификаторЗапроса,
		РезультатОперации.Содержимое);
	ЗаписатьИнформациюВЖурналРегистрации(ТекстИнформации);
	
	Если РезультатОперации.КодСостояния = 200 Тогда
		
		// Тело ответа:
		// {
		//   "id": null,
		//   "status": "NO_ACTIVATED"
		// }
		
		ДанныеОтвета = Новый Структура();
		ДанныеОтвета.Вставить("id"    , "");
		ДанныеОтвета.Вставить("status", "");
		
		Попытка
			
			ЗаполнитьЗначенияСвойств(
				ДанныеОтвета,
				СтрокуJSONВЗначение(РезультатОперации.Содержимое));
			
			Если СтрСравнить(ДанныеОтвета.status, "ACTIVATED") = 0 Тогда
				Результат.Статус  = ИдентификаторСтатусаАгентАктивирован();
				Результат.АгентID = ДанныеОтвета.id;
			Иначе
				Результат.Статус = ИдентификаторСтатусаАгентНеАктивирован();
			КонецЕсли;
			
		Исключение
			
			ОшибкаЧтенияДанныхСервиса(
				Результат,
				ПараметрыЗапроса.Метод,
				URLОперации,
				РезультатОперации,
				ИнформацияОбОшибке());
			
		КонецПопытки;
		
	ИначеЕсли СтандартнаяОбработкаКодовСостояний(Результат, РезультатОперации) Тогда
		
		Если РезультатОперации.КодСостояния = 500 Тогда
			Результат.СообщениеТехподдержке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка проверки активации Агента облачного архива.
					|URL: %1 %2.
					|Код состояния: %3
					|Тело ответа:
					|%4'"),
				ПараметрыЗапроса.Метод,
				URLОперации,
				Строка(РезультатОперации.КодСостояния),
				РезультатОперации.Содержимое);
		КонецЕсли;
		
	ИначеЕсли РезультатОперации.КодСостояния = 503 Тогда
		
		СервисВременноНедоступен(
			Результат,
			НСтр("ru = 'Не удалось проверить статус активации Агент облачного архива. Сервис временно недоступен.'"),
			НСтр("ru = 'Сервис проверки активации Агента облачного архива временно недоступен.'"),
			ПараметрыЗапроса.Метод,
			URLОперации,
			РезультатОперации);
		
	Иначе
		
		НеклассифицированнаяОшибкаСервиса(
			Результат,
			НСтр("ru = 'Ошибка при работе с сервисом проверки активации Агента облачного хранилища.'"),
			НСтр("ru = 'Сервис проверки активации Агента облачного архива вернул неклассифицированную ошибку.'"),
			ПараметрыЗапроса.Метод,
			URLОперации,
			РезультатОперации);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Запускает асинхронную операцию проверки доступности файлов и возвращает результат запуска задания.
//
// Параметры:
//  URI - Строка - путь размещения информационной базы для проверки доступности Агентом.
//
// Возвращаемое значение:
//  Структура:
//    * Статус - Строка - статус проверку доступности файлов копирования Агентом:
//        см. ИдентификаторСтатусаАгентФайлыДоступны - файлы доступны Агенту.
//        см. ИдентификаторСтатусаАгентФайлыНедоступны - есть файлы к которым закрыт доступ Агенту.
//        см. ИдентификаторСтатусаАгентПроверяетДоступностьФайлов - выполняется асинхронная операция проверки
//          доступности файлов.
//        см. ОблачныйАрхив20.ИдентификаторСтатусаАгентНеУстановлен - ошибка получения порта Агента.
//        см. ИдентификаторСтатусаОшибкаЗапроса - сервис указывает на ошибку запроса.
//        см. ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаИППОшибкаАутентификации - ошибка аутентификации.
//        см. ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаОблачныйАрхивНедоступен - отсутствует действующий договор.
//        см. ИдентификаторСтатусаОшибкаСервиса - сервис вернул неклассифицированную ошибку или ошибка чтения результата
//          операции.
//        см. ОблачныйАрхив20.ИдентификаторСтатусаСервисВременноНедоступен - сервис на обслуживании.
//    * СообщениеПользователю - Строка - текст, который необходимо отобразить пользователю на форме.
//    * СообщениеТехподдержке - Строка - текст, который необходимо вставить в обращение к технической поддержке.
//    * IDЗадания - Неопределено - асинхронная операция проверки доступности файлов выполнена при вызове операции или
//        сервис проверки вернул ошибку.
//                - Строка - идентификатор асинхронного процесса проверки доступности файлов в формате GUID.
//        Заполняется, если Статус = ИдентификаторСтатусаАгентПроверяетДоступностьФайлов().
//
Функция ЗарегистрироватьЗаданиеПроверкиДоступностиФайлов(URI)
	
	IDЗадания = Неопределено;	// Строка
	
	Результат = НовыйОтветСервиса();
	Результат.Вставить("IDЗадания", IDЗадания);
	
	// Проверка работы Агента
	ПортАгента = ПолучитьПортАгента();
	Если Не ПустаяСтрока(ПортАгента.Статус) Тогда
		ЗаполнитьЗначенияСвойств(Результат, ПортАгента);
		Возврат Результат;
	КонецЕсли;
	
	// Запуск задания проверки доступности файлов резервного копирования для Агента облачного архива
	URLОперации          = URLОперацииРегистрацииЗаданияПроверкиДоступностиФайлов(ПортАгента.Порт);
	ИдентификаторЗапроса = Строка(Новый УникальныйИдентификатор());
	
	ДанныеДляОбработки = Новый Структура();
	ДанныеДляОбработки.Вставить("URI", URI);
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type"    , "application/json");
	Заголовки.Вставить("X-Correlation-ID", ИдентификаторЗапроса);
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("Метод"                   , "POST");
	ПараметрыЗапроса.Вставить("Заголовки"               , Заголовки);
	ПараметрыЗапроса.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыЗапроса.Вставить("ФорматОтвета"            , 1);
	ПараметрыЗапроса.Вставить("Таймаут"                 , 5);
	ПараметрыЗапроса.Вставить(
		"ДанныеДляОбработки",
		ЗначениеВСтрокуJSON(ДанныеДляОбработки));
	
	ТекстИнформации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Регистрация задания на проверку доступности файлов.
			|URL: %1
			|X-Correlation-ID: %2
			|%3'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
		URLОперации,
		ИдентификаторЗапроса,
		ПараметрыЗапроса.ДанныеДляОбработки);
	ЗаписатьИнформациюВЖурналРегистрации(ТекстИнформации);
	
	РезультатОперации = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(URLОперации, , , ПараметрыЗапроса);
	
	ТекстИнформации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получена информация о регистрации задания на проверку доступности файлов.
			|X-Correlation-ID: %1
			|%2'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
		ИдентификаторЗапроса,
		РезультатОперации.Содержимое);
	ЗаписатьИнформациюВЖурналРегистрации(ТекстИнформации);
	
	Если РезультатОперации.КодСостояния = 200 Тогда
		
		//{
		//  "id": "fc60bb5a-c19c-408a-ba69-54106e321903",
		//  "status": "IN_PROGRESS",
		//  "statusDescription": ""
		//}
		
		ДанныеОтвета = Новый Структура();
		ДанныеОтвета.Вставить("id"               , "");
		ДанныеОтвета.Вставить("status"           , "");
		ДанныеОтвета.Вставить("statusDescription", "");
		
		Попытка
			
			ЗаполнитьЗначенияСвойств(
				ДанныеОтвета,
				СтрокуJSONВЗначение(РезультатОперации.Содержимое));
				
			Если СтрСравнить(ДанныеОтвета.status, "IN_PROGRESS") = 0 Тогда
				Результат.Статус    = ИдентификаторСтатусаАгентПроверяетДоступностьФайлов();
				Результат.IDЗадания = ДанныеОтвета.id;
			ИначеЕсли СтрСравнить(ДанныеОтвета.status, "SUCCESS") = 0 Тогда
				Результат.Статус = ИдентификаторСтатусаАгентФайлыДоступны();
			Иначе
				
				Результат.Статус                = ИдентификаторСтатусаАгентФайлыНедоступны();
				Результат.СообщениеПользователю =
					НСтр("ru = 'Агенту облачного архива не удалось получить доступ к файлам информационной базы.
						|Обратитесь к администратору или напишите в техподдержку.'");
				Результат.СообщениеТехподдержке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка проверки доступности файлов копирования Агентом облачного архива.
						|Проверьте наличие полных прав на каталог с информационной базой для пользователя, под которым запущена служба Агента облачного архива и попробуйте повторить операцию.
						|URI: %1
						|Результат проверки доступа Агентом: %2'"),
					URI,
					ДанныеОтвета.statusDescription);
				
				ЗаписатьИнформациюВЖурналРегистрации(Результат.СообщениеТехподдержке, Истина);
				
			КонецЕсли;
			
		Исключение
			
			ОшибкаЧтенияДанныхСервиса(
				Результат,
				ПараметрыЗапроса.Метод,
				URLОперации,
				РезультатОперации,
				ИнформацияОбОшибке());
			
		КонецПопытки;
		
	ИначеЕсли СтандартнаяОбработкаКодовСостояний(Результат, РезультатОперации) Тогда
		
		Если РезультатОперации.КодСостояния = 500 Тогда
			Результат.СообщениеТехподдержке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка регистрации задания на проверку доступности файлов копирования Агентом облачного архива.
					|URL: %1 %2
					|Код состояния: %3
					|Тело ответа:
					|%4'"),
				ПараметрыЗапроса.Метод,
				URLОперации,
				Строка(РезультатОперации.КодСостояния),
				РезультатОперации.Содержимое);
		КонецЕсли;
		
	ИначеЕсли РезультатОперации.КодСостояния = 503 Тогда
		
		СервисВременноНедоступен(
			Результат,
			НСтр("ru = 'Не удалось проверить доступность файлов объекта копирования. Сервис временно недоступен.'"),
			НСтр("ru = 'Сервис регистрации задания на проверку доступности файлов копирования Агентом облачного архива временно недоступен.'"),
			ПараметрыЗапроса.Метод,
			URLОперации,
			РезультатОперации);
		
	Иначе
		
		НеклассифицированнаяОшибкаСервиса(
			Результат,
			НСтр("ru = 'Ошибка при проверки доступности файлов копирования Агентом облачного архива.'"),
			НСтр("ru = 'Сервис регистрации задания проверки доступности файлов копирования Агентом облачного архива вернул неклассифицированную ошибку.'"),
			ПараметрыЗапроса.Метод,
			URLОперации,
			РезультатОперации);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает статус результат запроса проверки доступности файлов Агентом облачного архива.
//
// Параметры:
//  IDЗадания - Строка - идентификатор задания проверки доступности файлов копирования Агентом.
//  URI - Строка - путь размещения информационной базы.
//
// Возвращаемое значение:
//  Структура:
//    * Статус - Строка - статус задания проверки доступности файлов копирования Агентом:
//        см. ИдентификаторСтатусаАгентФайлыДоступны - файлы доступны Агенту.
//        см. ИдентификаторСтатусаАгентФайлыНедоступны - есть файлы к которым закрыт доступ Агенту.
//        см. ИдентификаторСтатусаАгентПроверяетДоступностьФайлов - выполняется асинхронная операция проверки
//          доступности файлов.
//        см. ОблачныйАрхив20.ИдентификаторСтатусаАгентНеУстановлен - ошибка получения порта Агента.
//        см. ИдентификаторСтатусаОшибкаЗапроса - сервис указывает на ошибку запроса.
//        см. ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаИППОшибкаАутентификации - ошибка аутентификации.
//        см. ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаОблачныйАрхивНедоступен - отсутствует действующий договор.
//        см. ИдентификаторСтатусаОшибкаСервиса - сервис вернул неклассифицированную ошибку.
//        см. ОблачныйАрхив20.ИдентификаторСтатусаСервисВременноНедоступен - сервис на обслуживании.
//    * СообщениеПользователю - Строка - текст, который необходимо отобразить пользователю на форме.
//    * СообщениеТехподдержке - Строка - текст, который необходимо вставить в обращение к технической поддержке.
//
Функция ПолучитьСтатусПроверкиДоступностиФайлов(IDЗадания, URI)
	
	Результат = НовыйОтветСервиса();
	Результат.Вставить("IDЗадания", IDЗадания);
	
	// Проверка работы Агента
	ПортАгента = ПолучитьПортАгента();
	Если Не ПустаяСтрока(ПортАгента.Статус) Тогда
		ЗаполнитьЗначенияСвойств(Результат, ПортАгента);
		Возврат Результат;
	КонецЕсли;
	
	// Чтение статуса задания проверки доступности файлов резервного копирования для Агента облачного архива
	URLОперации          = URLОперацииЗапросаСтатусаПроверкиДоступностиФайлов(ПортАгента.Порт);
	ИдентификаторЗапроса = Строка(Новый УникальныйИдентификатор());
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type"    , "application/json");
	Заголовки.Вставить("X-Correlation-ID", ИдентификаторЗапроса);
	
	ДанныеДляОбработки = Новый Структура();
	ДанныеДляОбработки.Вставить("id", IDЗадания);
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("Метод"                   , "POST");
	ПараметрыЗапроса.Вставить("Заголовки"               , Заголовки);
	ПараметрыЗапроса.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыЗапроса.Вставить("ФорматОтвета"            , 1);
	ПараметрыЗапроса.Вставить("Таймаут"                 , 5);
	ПараметрыЗапроса.Вставить(
		"ДанныеДляОбработки",
		ЗначениеВСтрокуJSON(ДанныеДляОбработки));
	
	ТекстИнформации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получение статуса задания проверки доступности файлов.
			|URL: %1
			|X-Correlation-ID: %2
			|%3'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
		URLОперации,
		ИдентификаторЗапроса,
		ПараметрыЗапроса.ДанныеДляОбработки);
	ЗаписатьИнформациюВЖурналРегистрации(ТекстИнформации);
	
	РезультатОперации = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(URLОперации, , , ПараметрыЗапроса);
	
	ТекстИнформации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получена информация о статусе задания проверки доступности файлов.
			|X-Correlation-ID: %1
			|%2'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
		ИдентификаторЗапроса,
		РезультатОперации.Содержимое);
	ЗаписатьИнформациюВЖурналРегистрации(ТекстИнформации);
	
	Если РезультатОперации.КодСостояния = 200 Тогда
		
		//{
		//  "id": "fc60bb5a-c19c-408a-ba69-54106e321903",
		//  "status": "IN_PROGRESS",
		//  "statusDescription": ""
		//}
		
		ДанныеОтвета = Новый Структура();
		ДанныеОтвета.Вставить("id"               , "");
		ДанныеОтвета.Вставить("status"           , "");
		ДанныеОтвета.Вставить("statusDescription", "");
		
		Попытка
			
			ЗаполнитьЗначенияСвойств(
				ДанныеОтвета,
				СтрокуJSONВЗначение(РезультатОперации.Содержимое));
			
			Если СтрСравнить(ДанныеОтвета.status, "IN_PROGRESS") = 0 Тогда
				Результат.Статус = ИдентификаторСтатусаАгентПроверяетДоступностьФайлов();
				Результат.IDЗадания = ДанныеОтвета.id;
			ИначеЕсли СтрСравнить(ДанныеОтвета.status, "SUCCESS") = 0 Тогда
				Результат.Статус = ИдентификаторСтатусаАгентФайлыДоступны();
			Иначе
				
				Результат.Статус                = ИдентификаторСтатусаАгентФайлыНедоступны();
				Результат.СообщениеПользователю =
					НСтр("ru = 'Агенту облачного архива не удалось получить доступ к файлам информационной базы.
						|Обратитесь к администратору или напишите в техподдержку.'");
				Результат.СообщениеТехподдержке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка проверки доступности файлов копирования Агентом облачного архива.
						|Проверьте наличие полных прав на каталог с информационной базой для пользователя, под которым запущена служба Агента облачного архива и попробуйте повторить операцию.
						|URI: %1
						|Результат проверки доступа Агентом: %2'"),
					URI,
					ДанныеОтвета.statusDescription);
				
				ЗаписатьИнформациюВЖурналРегистрации(Результат.СообщениеТехподдержке, Истина);
				
			КонецЕсли;
			
		Исключение
			
			ОшибкаЧтенияДанныхСервиса(
				Результат,
				ПараметрыЗапроса.Метод,
				URLОперации,
				РезультатОперации,
				ИнформацияОбОшибке());
			
		КонецПопытки;
		
	ИначеЕсли СтандартнаяОбработкаКодовСостояний(Результат, РезультатОперации) Тогда
		
		Если РезультатОперации.КодСостояния = 500 Тогда
			Результат.СообщениеТехподдержке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка проверки доступности файлов копирования Агентом облачного архива.
					|URL: %1 %2
					|Код состояния: %3
					|Тело ответа:
					|%4'"),
				ПараметрыЗапроса.Метод,
				URLОперации,
				Строка(РезультатОперации.КодСостояния),
				РезультатОперации.Содержимое);
		КонецЕсли;
		
	ИначеЕсли РезультатОперации.КодСостояния = 404 Тогда
		
		Результат.Статус                = ИдентификаторСтатусаОшибкаЗапроса();
		Результат.СообщениеПользователю =
			НСтр("ru = 'Не удалось проверить доступность файлов копирования.
				|Обратитесь к администратору или напишите в техподдержку.'");
		Результат.СообщениеТехподдержке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не найдено задание проверки доступности файлов копирования Агентом облачного архива.
				|URL: %1 %2
				|ID задания: %3
				|Код состояния: %4'"),
			ПараметрыЗапроса.Метод,
			URLОперации,
			IDЗадания,
			Строка(РезультатОперации.КодСостояния));
		
		ЗаписатьИнформациюВЖурналРегистрации(Результат.СообщениеТехподдержке, Истина);
		
	ИначеЕсли РезультатОперации.КодСостояния = 503 Тогда
		
		СервисВременноНедоступен(
			Результат,
			НСтр("ru = 'Не удалось проверить доступность файлов объекта копирования. Сервис временно недоступен.'"),
			НСтр("ru = 'Сервис проверки доступности файлов копирования Агентом облачного архива временно недоступен.'"),
			ПараметрыЗапроса.Метод,
			URLОперации,
			РезультатОперации);
		
	Иначе
		
		НеклассифицированнаяОшибкаСервиса(
			Результат,
			НСтр("ru = 'Ошибка сервиса проверки доступности файлов копирования.'"),
			НСтр("ru = 'Сервис проверки доступности файлов копирования Агентом облачного архива вернул неклассифицированную ошибку.'"),
			ПараметрыЗапроса.Метод,
			URLОперации,
			РезультатОперации);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// URL операции активации Агента облачного архива.
//
// Параметры:
//  Порт - Строка - номер порта агента, запущенного на текущем компьютере.
//
// Возвращаемое значение:
//  Строка
//
Функция URLОперацииАктивацииАгента(Порт)
	
	Возврат "http://127.0.0.1:" + Порт + "/api/v1/agent";
	
КонецФункции

// URL операции запроса статуса активации Агента облачного архива.
//
// Параметры:
//  Порт - Строка - номер порта агента, запущенного на текущем компьютере.
//
// Возвращаемое значение:
//  Строка
//
Функция URLОперацииЗапросаСтатусаАктивацииАгента(Порт)
	
	Возврат "http://127.0.0.1:" + Порт + "/api/v1/agent/id";
	
КонецФункции

// URL операции регистрации задания проверки доступности файлов копирования Агентом облачного архива.
//
// Параметры:
//  Порт - Строка - номер порта агента, запущенного на текущем компьютере.
//
// Возвращаемое значение:
//  Строка
//
Функция URLОперацииРегистрацииЗаданияПроверкиДоступностиФайлов(Порт)
	
	Возврат "http://127.0.0.1:" + Порт +"/api/v1/infobases/check";
	
КонецФункции

// URL операции запроса статуса проверки доступности файлов копирования Агентом облачного архива.
//
// Параметры:
//  Порт - Строка - номер порта агента, запущенного на текущем компьютере.
//
// Возвращаемое значение:
//  Строка
//
Функция URLОперацииЗапросаСтатусаПроверкиДоступностиФайлов(Порт)
	
	Возврат "http://127.0.0.1:" + Порт + "/api/v1/infobases/check/get-status";
	
КонецФункции

#КонецОбласти

#Область ВзаимодействиеСLogin

// Возвращает тикет аутентификации пользователя на портале поддержки.
//
// Возвращаемое значение:
//  Структура - см. ИнтернетПоддержкаПользователей.ТикетАутентификацииНаПорталеПоддержки
//
Функция ТикетАутентификацииСервиса()
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = ИнтернетПоддержкаПользователей.ТикетАутентификацииНаПорталеПоддержки(
		ИдентификаторСервиса());
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не ПустаяСтрока(Результат.КодОшибки) Тогда
		
		СообщениеЖурнала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить тикет аутентификации.
				|Код ошибки: %1
				|Информация об ошибке:
				|%2'"),
			Результат.КодОшибки,
			Результат.ИнформацияОбОшибке);
		
		ЗаписатьИнформациюВЖурналРегистрации(СообщениеЖурнала, Ложь);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СохранениеНастроекСервиса

// Выполняет сохранение настроек облачного архива в фоне.
//
// Параметры:
//  ПараметрыСохранения - Структура:
//    * ПараметрыАрхивирования - см. НовыйПараметрыРезервногоКопирования
//    * НастройкиАрхивирования - Структура:
//        ** НаименованиеИБ - Строка - представление информационной базы в сервисе.
//        ** ЧасовойПояс - Строка - часовой пояс, в котором были сохранены настройки расписания. Формат значения
//             (+/-)hh:mm, где hh значение часа текущего пояса с лидирующим нулем; mm значение времени часового
//             пояса.
//        ** ТипХраненияКопий - Строка - вариант хранения резервных копий. Возможные значения:
//             "Все" - вариант хранения всех резервных копий.
//             "ЗаПоследние" - вариант хранения копий за указанный период.
//             "Последние" - вариант хранения копий в количестве указанных штук.
//        ** ТипПериодаХраненияКопий - Строка - заполняется только для типа хранения "ЗаПоследние". Возможные значения:
//             "День".
//             "Неделя".
//             "Месяц".
//             "Год".
//        ** ПериодХраненияКопий - Число - заполняется только для типа хранения "ЗаПоследние".
//        ** КоличествоКопийВКаталоге - Число - заполняется только для типа хранения "Последние".
//        ** Расписания - Массив из Структура:
//             *** Использование - Булево
//             *** Расписание - РасписаниеРегламентногоЗадания
//             *** РасписаниеПредставление - Строка
//
// Возвращаемое значение:
//  Структура:
//    * Статус - Строка - статус процесса сохранения настроек. В зависимости от статуса могут меняться возвращаемые
//        данные.
//    * СообщениеПользователю - Строка, ФорматированнаяСтрока - текст, который необходимо отобразить пользователю на
//        форме.
//    * СообщениеТехподдержке - Строка - текст, который необходимо вставить в обращение к технической поддержке.
//    * ПараметрыАрхивирования - Структура: см. СохраненныеПараметрыРезервногоКопирования
//                             - Неопределено
//    * ОблачныйАрхивРаботает - Булево - Истина, если Облачный архив подключен и настроено автоматическое резервное
//        копирование по расписанию.
//                            - Неопределено - возвращается если активная подсистема хранения резервных копий не
//        Облачный архив.
//
Функция СохранениеНастроекОблачногоАрхиваВФоне(Знач ПараметрыСохранения) Экспорт
	
	ПараметрыАрхивирования = Неопределено;	// см. СохраненныеПараметрыРезервногоКопирования
	
	Результат = НовыйОтветСервиса();
	Результат.Вставить("ПараметрыАрхивирования", ПараметрыАрхивирования);
	Результат.Вставить("ОблачныйАрхивРаботает" , Неопределено);
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных();
		Блокировка.Добавить("Константа.ПараметрыРезервногоКопированияВОблачныйАрхив20");
		Блокировка.Заблокировать();
		
		РезультатСохранения = СохранитьНастройкиРезервногоКопирования(ПараметрыСохранения);
		Если РезультатСохранения.Статус = ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаОблачныйАрхивНастройкиСохранены() Тогда
			
			ПараметрыСохранения.ПараметрыАрхивирования.ДатаОбновленияНастроек = ТекущаяУниверсальнаяДата();
			ПараметрыСохранения.ПараметрыАрхивирования.РаботаРезервногоКопированияЗаблокирована = Ложь;
			СохранитьПараметрыРезервногоКопирования(ПараметрыСохранения.ПараметрыАрхивирования);
			
			Результат.Статус                 = РезультатСохранения.Статус;
			Результат.ПараметрыАрхивирования = ПараметрыСохранения.ПараметрыАрхивирования;
			
			Если АктивнаяПодсистемаРезервногоКопирования() <> ИдентификаторРезервногоКопированияОблачныйАрхив() Тогда
				Результат.ОблачныйАрхивРаботает =
					ПодключениеОблачногоАрхиваВыполнено()
					И ПараметрыСохранения.ПараметрыАрхивирования.АвтоматическоеРезервноеКопированиеВключено
					И ПараметрыСохранения.ПараметрыАрхивирования.РаботаРезервногоКопированияЗаблокирована = Ложь;
			КонецЕсли;
			
		Иначе
			ЗаполнитьЗначенияСвойств(Результат, РезультатСохранения);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		Результат.Статус = ИдентификаторСтатусаОблачныйАрхивОшибкаСохраненияНастроек();
		Результат.СообщениеПользователю = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось сохранить настройки Облачного архива.
				|По причине: %1
				|
				|Обратитесь к администратору или напишите в техподдержку.'"),
				ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		Результат.СообщениеТехподдержке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось сохранить настройки Облачного архива.
				|По причине: %1'"),
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		
		ЗаписатьИнформациюВЖурналРегистрации(Результат.СообщениеТехподдержке, Истина);
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РезервноеКопированиеПоЗапросу

// Выполняет инициализацию формы резервного копирования по запросу.
//
// Параметры:
//  ПараметрыВыполнения - Структура:
//    * СохранитьДанныеАутентификации - Булево - признак необходимости сохранить введенные пользователем данные
//        аутентификации.
//    * ДанныеАутентификации - Неопределено
//                           - Структура:
//        см. ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки
//
// Возвращаемое значение:
//  Структура:
//    * Статус - Строка - статус процесса сохранения настроек:
//        см. ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаОблачныйАрхивНеПодключен
//        см. ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаИнформационнаяБазаПеремещена
//        см. ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаИППОшибкаАутентификации
//        см. ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаИППНеПодключена
//        см. ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаИПППодключенНаДругойЛогин - ИПП подключена, но логин
//          активации Облачного архива отличается от текущего.
//    * СообщениеПользователю - Строка, ФорматированнаяСтрока - текст, который необходимо отобразить пользователю на
//        форме.
//    * СообщениеТехподдержке - Строка - текст, который необходимо вставить в обращение к технической поддержке.
//    * НаличиеАктивныхСоединений - Неопределено, Булево - Истина, если присутствуют активные сеансы.
//    * ДанныеАутентификации - Структура: см. ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки
//                           - Неопределено
//
Функция ИнициализацияРезервногоКопированияПоЗапросу(Знач ПараметрыВыполнения) Экспорт
	
	ПараметрыАрхивирования    = Неопределено;	// см. СохраненныеПараметрыРезервногоКопирования
	НаличиеАктивныхСоединений = Неопределено;	// Неопределено, Булево
	ДанныеАутентификации      = Неопределено;	// см. ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки
	
	// Инициализация локальных переменных
	Результат = НовыйОтветСервиса();
	Результат.Вставить("НаличиеАктивныхСоединений", НаличиеАктивныхСоединений);
	Результат.Вставить("ДанныеАутентификации"     , ДанныеАутентификации);
	
	// Проверка подключения и блокировки работы подсистемы.
	Если Не ПодключениеОблачногоАрхиваВыполненоСлужебный(ПараметрыАрхивирования) Тогда
		Результат.Статус                = ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаОблачныйАрхивНеПодключен();
		Результат.СообщениеПользователю = СтандартноеСообщениеПользователю(Результат.Статус);
		Возврат Результат;
	ИначеЕсли ПараметрыАрхивирования.РаботаРезервногоКопированияЗаблокирована <> Ложь Тогда
		Результат.Статус                =
			ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаИнформационнаяБазаПеремещена();
		Результат.СообщениеПользователю = СтандартноеСообщениеПользователю(Результат.Статус);
		Возврат Результат;
	КонецЕсли;
	
	// Проверка подключения ИПП
	ПараметрыВыполнения.Вставить("ПараметрыАрхивирования", ПараметрыАрхивирования);
	ПроверкаПодключенияИППНаФорме(ПараметрыВыполнения, Результат);
	Если Результат.Статус <> ИдентификаторСтатусаИПППодключена() Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Проверка работы Агента
	РезультатПроверкиАгента = ПроверитьРаботуАгента(ПараметрыАрхивирования);
	ЗаполнитьЗначенияСвойств(Результат, РезультатПроверкиАгента);
	Если РезультатПроверкиАгента.Статус <> ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаРаботыАгентаАктивен() Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Проверка наличия активных пользователей и аутентификацию администратор ИБ
	ИнформацияОСоединениях = СоединенияИБ.ИнформацияОСоединениях();
	Результат.НаличиеАктивныхСоединений = ИнформацияОСоединениях.НаличиеАктивныхСоединений;
	
	Возврат Результат;
	
КонецФункции

// Выполняет проверку и регистрирует задание резервного копирования по запросу в сервисе Облачного архива.
//
// Параметры:
//  Комментарий - Строка - дополнительная информация о резервной копии, которая будет отображена в сервисе Облачного
//    архива.
//
// Возвращаемое значение:
//  Структура:
//    * Статус - Строка - статус процесса регистрации задания ручного резервного копирования:
//        см. ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаОблачныйАрхивНеПодключен
//        см. ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаИнформационнаяБазаПеремещена
//        см. ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаРезервноеКопированиеЗаданиеПодтверждено
//        см. ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаРезервноеКопированиеЗаданиеСоздано
//        см. ИдентификаторСтатусаРезервноеКопированиеВыполнено
//        см. ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаРезервноеКопированиеЗаданиеОтменено
//        см. ИдентификаторСтатусаРаботыАгентаНеАктивен
//        см. ИдентификаторСтатусаРезервноеКопированиеОбъектКопированияНедоступен
//        см. ИдентификаторСтатусаРезервноеКопированиеОшибка
//        см. ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаИППОшибкаАутентификации
//        см. ИдентификаторСтатусаОшибкаСервиса
//        см. ОблачныйАрхив20.ИдентификаторСтатусаСервисВременноНедоступен
//        см. ИдентификаторСтатусаОшибкаЗапроса - ошибка запроса.
//    * СообщениеПользователю - Строка, ФорматированнаяСтрока - текст, который необходимо отобразить пользователю на
//        форме.
//    * СообщениеТехподдержке - Строка - текст, который необходимо вставить в обращение к технической поддержке.
//    * НаличиеАктивныхСоединений - Неопределено, Булево - Истина, если присутствуют активные сеансы.
//    * НаличиеCOMСоединений - Неопределено, Булево - признак наличия COM соединений.
//    * НаличиеСоединенияКонфигуратором - Неопределено, Булево - признак наличия соединения конфигуратора.
//    * КоличествоАктивныхСеансов - Неопределено, Число - количество активных сеансов в том числе текущего и фоновых
//        заданий.
//    * IDЗадания - Неопределено, Строка - идентификатор задания ручного резервного копирования.
//    * ДатаКопии - Неопределено, Дата - дата регистрации задания и как следствие выступает в качестве даты копии.
//
Функция ПодготовкаРезервногоКопированияПоЗапросу(Знач Комментарий) Экспорт
	
	ПараметрыАрхивирования          = Неопределено;	// см. СохраненныеПараметрыРезервногоКопирования
	НаличиеАктивныхСоединений       = Неопределено;	// Неопределено, Булево
	НаличиеCOMСоединений            = Неопределено;	// Неопределено, Булево
	НаличиеСоединенияКонфигуратором = Неопределено;	// Неопределено, Булево
	КоличествоАктивныхСеансов       = Неопределено;	// Неопределено, Число
	IDЗадания                       = Неопределено;	// Неопределено, Строка
	ДатаКопии                       = Неопределено;	// Неопределено, Дата
	
	// Инициализация локальных переменных
	Результат = НовыйОтветСервиса();
	Результат.Вставить("НаличиеАктивныхСоединений"      , НаличиеАктивныхСоединений);
	Результат.Вставить("НаличиеCOMСоединений"           , НаличиеCOMСоединений);
	Результат.Вставить("НаличиеСоединенияКонфигуратором", НаличиеСоединенияКонфигуратором);
	Результат.Вставить("КоличествоАктивныхСеансов"      , КоличествоАктивныхСеансов);
	Результат.Вставить("IDЗадания"                      , IDЗадания);
	Результат.Вставить("ДатаКопии"                      , ДатаКопии);
	
	// Проверка подключения и блокировки работы подсистемы.
	Если Не ПодключениеОблачногоАрхиваВыполненоСлужебный(ПараметрыАрхивирования) Тогда
		Результат.Статус                = ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаОблачныйАрхивНеПодключен();
		Результат.СообщениеПользователю = СтандартноеСообщениеПользователю(Результат.Статус);
		Возврат Результат;
	ИначеЕсли ПараметрыАрхивирования.РаботаРезервногоКопированияЗаблокирована <> Ложь Тогда
		Результат.Статус                =
			ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаИнформационнаяБазаПеремещена();
		Результат.СообщениеПользователю = СтандартноеСообщениеПользователю(Результат.Статус);
		Возврат Результат;
	КонецЕсли;
	
	// Зарегистрировать задание на выполнение резервной копии
	РезультатРегистрации = ЗарегистрироватьЗаданиеНаВыполнениеРезервногоКопирования(
		ПараметрыАрхивирования,
		Комментарий);
		
	ЗаполнитьЗначенияСвойств(Результат, РезультатРегистрации);
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Сбор информации об активных соединениях
	ИнформацияОСоединениях = СоединенияИБ.ИнформацияОСоединениях();
	Результат.НаличиеАктивныхСоединений       = ИнформацияОСоединениях.НаличиеАктивныхСоединений;
	Результат.НаличиеCOMСоединений            = ИнформацияОСоединениях.НаличиеCOMСоединений;
	Результат.НаличиеСоединенияКонфигуратором = ИнформацияОСоединениях.НаличиеСоединенияКонфигуратором;
	Результат.КоличествоАктивныхСеансов       = ПолучитьСеансыИнформационнойБазы().Количество();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

// Выполняет проверку подключения Интернет-поддержки пользователей на форме.
//
// Параметры:
//  ПараметрыВыполнения - см. ИнициализацияРезервногоКопированияПоЗапросу.ПараметрыВыполнения
//  РезультатВыполнения - см. ИнициализацияРезервногоКопированияПоЗапросу
//
Процедура ПроверкаПодключенияИППНаФорме(ПараметрыВыполнения, РезультатВыполнения)
	
	// Проверка данных аутентификации и сохранение
	Если ПараметрыВыполнения.СохранитьДанныеАутентификации
		И ПараметрыВыполнения.ДанныеАутентификации <> Неопределено Тогда
		
		ДанныеАутентификации = ПараметрыВыполнения.ДанныеАутентификации;	// см. ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки
		
		РезультатПроверкиЛогинаИПароля = ИнтернетПоддержкаПользователей.ПроверитьЛогинИПароль(
			ДанныеАутентификации.Логин,
			ДанныеАутентификации.Пароль);
		
		Если ПустаяСтрока(РезультатПроверкиЛогинаИПароля.КодОшибки) Тогда
			ИнтернетПоддержкаПользователей.СлужебнаяСохранитьДанныеАутентификации(ДанныеАутентификации);
		Иначе
			
			РезультатВыполнения.Статус                =
				ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаИППОшибкаАутентификации();
			РезультатВыполнения.СообщениеПользователю = РезультатПроверкиЛогинаИПароля.СообщениеОбОшибке;
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверка параметров аутентификации
	РезультатПроверкиИПП = ПроверитьПодключениеИнтернетПоддержкиПользователей(
		ПараметрыВыполнения.ПараметрыАрхивирования,
		ДанныеАутентификации);
	
	ЗаполнитьЗначенияСвойств(
		РезультатВыполнения,
		РезультатПроверкиИПП,
		"Статус,СообщениеПользователю,СообщениеТехподдержке,ДанныеАутентификации");
	
КонецПроцедуры

// Регистрирует задание резервного копирования в сервисе.
//
// Параметры:
//  ПараметрыАрхивирования - см. НовыйПараметрыРезервногоКопирования
//  Комментарий - Строка - дополнительная информация о резервной копии, которая будет отображена в сервисе Облачного
//    архива.
//
// Возвращаемое значение:
//  Структура - Зарегистрировать задание на выполнение резервного копирования:
//    * Статус - Строка - статус процесса регистрации задания ручного резервного копирования:
//        см. ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаРезервноеКопированиеЗаданиеПодтверждено
//        см. ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаРезервноеКопированиеЗаданиеСоздано
//        см. ИдентификаторСтатусаРезервноеКопированиеВыполнено
//        см. ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаРезервноеКопированиеЗаданиеОтменено
//        см. ИдентификаторСтатусаРаботыАгентаНеАктивен
//        см. ИдентификаторСтатусаРезервноеКопированиеОбъектКопированияНедоступен
//        см. ИдентификаторСтатусаРезервноеКопированиеОшибка
//        см. ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаИППОшибкаАутентификации
//        см. ИдентификаторСтатусаОшибкаСервиса
//        см. ОблачныйАрхив20.ИдентификаторСтатусаСервисВременноНедоступен
//        см. ИдентификаторСтатусаОшибкаЗапроса - ошибка запроса.
//    * СообщениеПользователю - Строка, ФорматированнаяСтрока - текст, который необходимо отобразить пользователю на
//        форме.
//    * СообщениеТехподдержке - Строка - текст, который необходимо вставить в обращение к технической поддержке.
//    * IDЗадания - Строка - идентификатор задания ручного резервного копирования. Параметр присутствует если задание
//        зарегистрировано успешно.
//    * ДатаКопии - Дата - дата регистрации задания. Параметр присутствует если задание зарегистрировано успешно.
//
Функция ЗарегистрироватьЗаданиеНаВыполнениеРезервногоКопирования(ПараметрыАрхивирования, Комментарий)
	
	// Инициализация локальных переменных
	Результат = НовыйОтветСервиса();
	Результат.Вставить("IDЗадания", "");
	Результат.Вставить("ДатаКопии", '00010101');
	
	// Получение тикета сервиса
	РезультатПолученияТикета = ТикетАутентификацииСервиса();
	Если ПустаяСтрока(РезультатПолученияТикета.Тикет) Тогда
		
		Результат.Статус                = ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаИППОшибкаАутентификации();
		Результат.СообщениеПользователю = РезультатПолученияТикета.СообщениеОбОшибке;
		
		Возврат Результат;
		
	КонецЕсли;
	
	// Регистрация ручного резервного копирования
	URLОперации          = URLОперацииРегистрацииЗаданияРезервногоКопирования(ПараметрыАрхивирования.АгентID);
	ИдентификаторЗапроса = Строка(Новый УникальныйИдентификатор());
	ДатаКопииСеанса      = ТекущаяДатаСеанса();
	ДатаКопии            = МестноеВремя(
		ТекущаяУниверсальнаяДата(),
		ЧасовойПоясСеанса());
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type"    , "application/json");
	Заголовки.Вставить("X-Token"         , РезультатПолученияТикета.Тикет);
	Заголовки.Вставить("X-Correlation-ID", ИдентификаторЗапроса);
	
	ДанныеДляОбработки = Новый Структура();
	ДанныеДляОбработки.Вставить("URI" , ПараметрыАрхивирования.URI);
	ДанныеДляОбработки.Вставить("name", Комментарий);
	ДанныеДляОбработки.Вставить("date", ДатаКопии);
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("Метод"                   , "POST");
	ПараметрыЗапроса.Вставить("Заголовки"               , Заголовки);
	ПараметрыЗапроса.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыЗапроса.Вставить("ФорматОтвета"            , 1);
	ПараметрыЗапроса.Вставить("Таймаут"                 , 30);
	ПараметрыЗапроса.Вставить(
		"ДанныеДляОбработки",
		ЗначениеВСтрокуJSON(ДанныеДляОбработки));
	
	ТекстИнформации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Регистрация задания на выполнение резервного копирования.
			|URL: %1
			|X-Correlation-ID: %2
			|%3'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
		URLОперации,
		ИдентификаторЗапроса,
		ПараметрыЗапроса.ДанныеДляОбработки);
	ЗаписатьИнформациюВЖурналРегистрации(ТекстИнформации);
	
	РезультатОперации = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(URLОперации, , , ПараметрыЗапроса);
	
	ТекстИнформации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получена информация о регистрации задания на выполнение резервного копирования.
			|X-Correlation-ID: %1
			|%2'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
		ИдентификаторЗапроса,
		РезультатОперации.Содержимое);
	ЗаписатьИнформациюВЖурналРегистрации(ТекстИнформации);
	
	Если РезультатОперации.КодСостояния = 200 Тогда
		
		// Тело ответа:
		// {
		//    "id": "90ed1a3c-cef8-41ac-9456-9cbb9d0a78b6",
		//    "status": "IN_PROGRESS",
		//    "errorType": "",
		//    "errorDescription": ""
		// }
		
		ДанныеОтвета = Новый Структура();
		ДанныеОтвета.Вставить("id"              , "");
		ДанныеОтвета.Вставить("status"          , "");
		ДанныеОтвета.Вставить("errorType"       , "");
		ДанныеОтвета.Вставить("errorDescription", "");
		
		Попытка
			
			ЗаполнитьЗначенияСвойств(
				ДанныеОтвета,
				СтрокуJSONВЗначение(РезультатОперации.Содержимое));
			
			// Задание на резервное копирование создано. Ожидается подтверждение начала выполнения.
			Если СтрСравнить(ДанныеОтвета.status, "IN_PROGRESS") = 0 Тогда
				Результат.Статус          =
					ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаРезервноеКопированиеЗаданиеСоздано();
				Результат.IDЗадания       = ДанныеОтвета.id;
				Результат.ДатаКопии = ДатаКопииСеанса;
			
			// Получено подтверждение готовности выполнить задание от агента облачного архива.
			ИначеЕсли СтрСравнить(ДанныеОтвета.status, "CONFIRMED") = 0 Тогда
				Результат.Статус          =
					ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаРезервноеКопированиеЗаданиеПодтверждено();
				Результат.IDЗадания       = ДанныеОтвета.id;
				Результат.ДатаКопии = ДатаКопииСеанса;
			
			// Задание отменено по инициативе пользователя или агента облачного архива.
			ИначеЕсли СтрСравнить(ДанныеОтвета.status, "REJECTED") = 0 Тогда
				Результат.Статус =
					ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаРезервноеКопированиеЗаданиеОтменено();
				
			// Резервная копия сохранена во временном каталоге агента и запущен процесс загрузки его в облако.
			ИначеЕсли СтрСравнить(ДанныеОтвета.status, "SUCCESS") = 0 Тогда
				Результат.Статус = ИдентификаторСтатусаРезервноеКопированиеВыполнено();
			
			// Резервная копия агентом не выполнена. Код ошибки в поле error_code.
			ИначеЕсли СтрСравнить(ДанныеОтвета.status, "ERROR") = 0 Тогда
				
				Если СтрСравнить(ДанныеОтвета.errorType, "AGENT_NOT_AVAILABLE") = 0 Тогда
					
					Результат.Статус                = ИдентификаторСтатусаРаботыАгентаНеАктивен();
					Результат.СообщениеПользователю = СтандартноеСообщениеПользователю(Результат.Статус);
					
				ИначеЕсли СтрСравнить(ДанныеОтвета.errorType, "DB_NOT_AVAILABLE") = 0 Тогда
					
					Результат.Статус                =
						ИдентификаторСтатусаРезервноеКопированиеОбъектКопированияНедоступен();
					Результат.СообщениеПользователю =
						НСтр("ru = 'Агенту облачного архива не удалось получить доступ к объекту копирования.'");
					Результат.СообщениеТехподдержке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Агенту облачного архива не удалось получить доступ к объекту копирования.
							|URI: %1'"),
						ПараметрыАрхивирования.URI);
					
				ИначеЕсли СтрСравнить(ДанныеОтвета.errorType, "INTERNAL_ERROR") = 0 Тогда
					
					Результат.Статус                = ИдентификаторСтатусаРезервноеКопированиеОшибка();
					Результат.СообщениеПользователю =
						НСтр("ru = 'Ошибка регистрации задания на выполнение резервной копии.'");
					Результат.СообщениеТехподдержке =
						НСтр("ru = 'Внутренняя ошибка регистрации задания на выполнение резервной копии.'");
					
				Иначе
					
					Результат.Статус                = ИдентификаторСтатусаРезервноеКопированиеОшибка();
					Результат.СообщениеПользователю =
						НСтр("ru = 'Ошибка регистрации задания на выполнение резервной копии.'");
					Результат.СообщениеТехподдержке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Неклассифицированный статус регистрации задания на выполнение резервной копии: %1'"),
						ДанныеОтвета.errorType);
					
				КонецЕсли;
				
			Иначе
				
				Результат.Статус                = ИдентификаторСтатусаРезервноеКопированиеОшибка();
				Результат.СообщениеПользователю =
					НСтр("ru = 'Ошибка регистрации задания на выполнение резервной копии.'");
				Результат.СообщениеТехподдержке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Неклассифицированный статус регистрации задания на выполнение резервной копии: %1'"),
					ДанныеОтвета.status);
				
			КонецЕсли;
			
		Исключение
			
			ОшибкаЧтенияДанныхСервиса(
				Результат,
				ПараметрыЗапроса.Метод,
				URLОперации,
				РезультатОперации,
				ИнформацияОбОшибке());
			
		КонецПопытки;
		
	ИначеЕсли СтандартнаяОбработкаКодовСостояний(Результат, РезультатОперации) Тогда
		
		Если РезультатОперации.КодСостояния = 500 Тогда
			Результат.СообщениеТехподдержке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка регистрации задания на выполнение резервной копии.
					|URL: %1 %2
					|Код состояния: %3
					|Тело ответа:
					|%4'"),
				ПараметрыЗапроса.Метод,
				URLОперации,
				Строка(РезультатОперации.КодСостояния),
				РезультатОперации.Содержимое);
		КонецЕсли;
		
	ИначеЕсли РезультатОперации.КодСостояния = 404 Тогда
		
		Результат.Статус                = ИдентификаторСтатусаРезервноеКопированиеАгентИлиОбъектКопированияНеНайден();
		Результат.СообщениеПользователю =
			НСтр("ru = 'Не удалось зарегистрировать задание на выполнение резервной копии.
				|Обратитесь к администратору или напишите в техподдержку.'");
		Результат.СообщениеТехподдержке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Сервис регистрации задания на выполнение резервной копии не нашел объект копирования или Агент облачного архива.
				|URL: %1 %2
				|Агент ID: %3
				|URI: %4
				|Код состояния: %5
				|Тело ответа:
				|%6'"),
			ПараметрыЗапроса.Метод,
			URLОперации,
			ПараметрыАрхивирования.АгентID,
			ПараметрыАрхивирования.URI,
			Строка(РезультатОперации.КодСостояния),
			РезультатОперации.Содержимое);
		
		ЗаписатьИнформациюВЖурналРегистрации(Результат.СообщениеТехподдержке, Истина);
		
	ИначеЕсли РезультатОперации.КодСостояния = 503 Тогда
		
		СервисВременноНедоступен(
			Результат,
			НСтр("ru = 'Не удалось зарегистрировать задание на выполнение резервной копии. Сервис временно недоступен.'"),
			НСтр("ru = 'Сервис регистрации задания на выполнение резервной копии временно недоступен.'"),
			ПараметрыЗапроса.Метод,
			URLОперации,
			РезультатОперации);
		
	Иначе
		
		НеклассифицированнаяОшибкаСервиса(
			Результат,
			НСтр("ru = 'Ошибка при работе с сервисом (подробнее см. Журнал регистрации).'"),
			НСтр("ru = 'Сервис регистрации задания на выполнение резервной копии вернул неклассифицированную ошибку.'"),
			ПараметрыЗапроса.Метод,
			URLОперации,
			РезультатОперации);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает статус задания резервного копирования по запросу.
//
// Параметры:
//  ЗаданиеID - Строка - идентификатор задания, полученного после регистрации.
//
// Возвращаемое значение:
//  Структура:
//    * Статус - Строка -  статус процесса регистрации задания ручного резервного копирования:
//        см. ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаРезервноеКопированиеЗаданиеПодтверждено
//        см. ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаРезервноеКопированиеЗаданиеСоздано
//        см. ИдентификаторСтатусаРезервноеКопированиеВыполнено
//        см. ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаРезервноеКопированиеЗаданиеОтменено
//        см. ИдентификаторСтатусаРаботыАгентаНеАктивен
//        см. ИдентификаторСтатусаРезервноеКопированиеОбъектКопированияНедоступен
//        см. ИдентификаторСтатусаРезервноеКопированиеОшибка
//        см. ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаИППОшибкаАутентификации
//        см. ИдентификаторСтатусаОшибкаСервиса
//        см. ОблачныйАрхив20.ИдентификаторСтатусаСервисВременноНедоступен
//        см. ИдентификаторСтатусаОшибкаЗапроса - ошибка запроса.
//    * СообщениеПользователю - Строка, ФорматированнаяСтрока - текст, который необходимо отобразить пользователю на
//        форме.
//    * СообщениеТехподдержке - Строка - текст, который необходимо вставить в обращение к технической поддержке.
//    * НаличиеАктивныхСоединений - Булево - Истина, если присутствуют активные сеансы.
//    * НаличиеCOMСоединений - Булево - Истина, если присутствуют внешние соединения.
//    * НаличиеСоединенияКонфигуратором - Булево - Истина, если открытый конфигуратор.
//    * КоличествоАктивныхСеансов - Число - количество активных сеансов с информационной базой.
//
Функция ПолучитьСтатусЗаданияНаВыполнениеРезервногоКопирования(ЗаданиеID) Экспорт
	
	// Инициализация локальных переменных
	Результат = НовыйОтветСервиса();
	Результат.Вставить("НаличиеАктивныхСоединений"      , Ложь);
	Результат.Вставить("НаличиеCOMСоединений"           , Ложь);
	Результат.Вставить("НаличиеСоединенияКонфигуратором", Ложь);
	Результат.Вставить("КоличествоАктивныхСеансов"      , 0);
	
	ПараметрыАрхивирования = СохраненныеПараметрыРезервногоКопирования();
	
	// Чтение статуса готовности Агента облачного архива выполнить резервное копирование
	URLОперации = URLОперацииПроверкиСтатусаЗаданияРезервногоКопирования(
		ПараметрыАрхивирования.АгентID,
		ЗаданиеID);
	ИдентификаторЗапроса = Строка(Новый УникальныйИдентификатор());
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("X-Correlation-ID", ИдентификаторЗапроса);
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("Метод"       , "POST");
	ПараметрыЗапроса.Вставить("Заголовки"   , Заголовки);
	ПараметрыЗапроса.Вставить("ФорматОтвета", 1);
	ПараметрыЗапроса.Вставить("Таймаут"     , 30);
	
	РезультатОперации = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(URLОперации, , , ПараметрыЗапроса);
	
	ТекстИнформации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получена информация о статусе задания на выполнение резервного копирования.
			|URL: %1
			|X-Correlation-ID: %2
			|%3'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
		URLОперации,
		ИдентификаторЗапроса,
		РезультатОперации.Содержимое);
	ЗаписатьИнформациюВЖурналРегистрации(ТекстИнформации);
	
	Если РезультатОперации.КодСостояния = 200 Тогда
		
		// Тело ответа:
		// {
		//    "id": "90ed1a3c-cef8-41ac-9456-9cbb9d0a78b6",
		//    "status": "IN_PROGRESS",
		//    "errorType": "",
		//    "errorDescription": ""
		// }
		
		ДанныеОтвета = Новый Структура();
		ДанныеОтвета.Вставить("id"              , "");
		ДанныеОтвета.Вставить("status"          , "");
		ДанныеОтвета.Вставить("errorType"       , "");
		ДанныеОтвета.Вставить("errorDescription", "");
		
		Попытка
			
			ЗаполнитьЗначенияСвойств(
				ДанныеОтвета,
				СтрокуJSONВЗначение(РезультатОперации.Содержимое));
			
			// Задание на резервное копирование создано. Ожидается подтверждение начала выполнения.
			Если СтрСравнить(ДанныеОтвета.status, "IN_PROGRESS") = 0 Тогда
				Результат.Статус = ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаРезервноеКопированиеЗаданиеСоздано();
			
			// Получено подтверждение готовности выполнить задание от агента облачного архива.
			ИначеЕсли СтрСравнить(ДанныеОтвета.status, "CONFIRMED") = 0 Тогда
				Результат.Статус =
					ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаРезервноеКопированиеЗаданиеПодтверждено();
			
			// Задание отменено по инициативе пользователя или агента облачного архива.
			ИначеЕсли СтрСравнить(ДанныеОтвета.status, "REJECTED") = 0 Тогда
				Результат.Статус =
					ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаРезервноеКопированиеЗаданиеОтменено();
				
			// Резервная копия сохранена во временном каталоге агента и запущен процесс загрузки его в облако.
			ИначеЕсли СтрСравнить(ДанныеОтвета.status, "SUCCESS") = 0 Тогда
				Результат.Статус = ИдентификаторСтатусаРезервноеКопированиеВыполнено();
			
			// Резервная копия агентом не выполнена. Код ошибки в поле error_code.
			ИначеЕсли СтрСравнить(ДанныеОтвета.status, "ERROR") = 0 Тогда
				
				Если СтрСравнить(ДанныеОтвета.errorType, "AGENT_NOT_AVAILABLE") = 0 Тогда
					
					Результат.Статус                = ИдентификаторСтатусаРаботыАгентаНеАктивен();
					Результат.СообщениеПользователю = СтандартноеСообщениеПользователю(Результат.Статус);
					
				ИначеЕсли СтрСравнить(ДанныеОтвета.errorType, "DB_NOT_AVAILABLE") = 0 Тогда
					
					Результат.Статус                =
						ИдентификаторСтатусаРезервноеКопированиеОбъектКопированияНедоступен();
					Результат.СообщениеПользователю =
						НСтр("ru = 'Агенту облачного архива не удалось получить доступ к объекту копирования.'");
					Результат.СообщениеТехподдержке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Агенту облачного архива не удалось получить доступ к объекту копирования.
							|URI: %1'"),
						ПараметрыАрхивирования.URI);
					
				ИначеЕсли СтрСравнить(ДанныеОтвета.errorType, "INTERNAL_ERROR") = 0 Тогда
					
					Результат.Статус                = ИдентификаторСтатусаРезервноеКопированиеОшибка();
					Результат.СообщениеПользователю =
						НСтр("ru = 'Ошибка проверки статуса задания создания резервной копии по запросу.'");
					Результат.СообщениеТехподдержке =
						НСтр("ru = 'Внутренняя ошибка проверки статуса регистрации задания на выполнение резервной копии.'");
					
				Иначе
					
					Результат.Статус                = ИдентификаторСтатусаРезервноеКопированиеОшибка();
					Результат.СообщениеПользователю =
						НСтр("ru = 'Ошибка проверки статуса задания создания резервной копии по запросу.'");
					Результат.СообщениеТехподдержке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Неклассифицированный статус проверки регистрации задания на выполнение резервной копии: %1'"),
						ДанныеОтвета.errorType);
					
				КонецЕсли;
				
			Иначе
				
				Результат.Статус                = ИдентификаторСтатусаРезервноеКопированиеОшибка();
				Результат.СообщениеПользователю =
					НСтр("ru = 'Ошибка проверке статуса задания создания резервной копии по запросу.'");
				Результат.СообщениеТехподдержке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Неклассифицированный статус проверки регистрации задания на выполнение резервной копии: %1'"),
					ДанныеОтвета.status);
				
			КонецЕсли;
			
		Исключение
			
			ОшибкаЧтенияДанныхСервиса(
				Результат,
				ПараметрыЗапроса.Метод,
				URLОперации,
				РезультатОперации,
				ИнформацияОбОшибке());
			
		КонецПопытки;
		
	ИначеЕсли СтандартнаяОбработкаКодовСостояний(Результат, РезультатОперации) Тогда
		
		Если РезультатОперации.КодСостояния = 500 Тогда
			Результат.СообщениеТехподдержке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка проверки статуса задания создания резервной копии по запросу.
					|URL: %1 %2
					|Код состояния: %3
					|Тело ответа:
					|%4'"),
				ПараметрыЗапроса.Метод,
				URLОперации,
				Строка(РезультатОперации.КодСостояния),
				РезультатОперации.Содержимое);
		КонецЕсли;
		
	ИначеЕсли РезультатОперации.КодСостояния = 404 Тогда
		
		Результат.Статус                =
			ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаРезервноеКопированиеЗаданиеНеНайдено();
		Результат.СообщениеПользователю =
			НСтр("ru = 'Не удалось получить статус задания выполнения резервной копии.
				|Обратитесь к администратору или напишите в техподдержку.'");
		Результат.СообщениеТехподдержке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Сервис проверки статуса задания на выполнение резервной копии не нашел объект копирования или Агент облачного архива.
				|URL: %1 %2
				|Агент ID: %3
				|URI: %4
				|Код состояния: %5
				|Тело ответа:
				|%6'"),
			ПараметрыЗапроса.Метод,
			URLОперации,
			ПараметрыАрхивирования.АгентID,
			ПараметрыАрхивирования.URI,
			Строка(РезультатОперации.КодСостояния),
			РезультатОперации.Содержимое);
		
		ЗаписатьИнформациюВЖурналРегистрации(Результат.СообщениеТехподдержке, Истина);
		
	ИначеЕсли РезультатОперации.КодСостояния = 503 Тогда
		
		СервисВременноНедоступен(
			Результат,
			НСтр("ru = 'Не удалось проверить статус задания выполнения резервной копии. Сервис временно недоступен.'"),
			НСтр("ru = 'Сервис проверки статуса задания выполнения резервной копии временно недоступен.'"),
			ПараметрыЗапроса.Метод,
			URLОперации,
			РезультатОперации);
		
	Иначе
		
		НеклассифицированнаяОшибкаСервиса(
			Результат,
			НСтр("ru = 'Ошибка при работе с сервисом (подробнее см. Журнал регистрации).'"),
			НСтр("ru = 'Сервис проверки статуса задания выполнения резервной копии вернул неклассифицированную ошибку.'"),
			ПараметрыЗапроса.Метод,
			URLОперации,
			РезультатОперации);
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Сбор информации об активных соединениях
	ИнформацияОСоединениях = СоединенияИБ.ИнформацияОСоединениях();
	Результат.НаличиеАктивныхСоединений       = ИнформацияОСоединениях.НаличиеАктивныхСоединений;
	Результат.НаличиеCOMСоединений            = ИнформацияОСоединениях.НаличиеCOMСоединений;
	Результат.НаличиеСоединенияКонфигуратором = ИнформацияОСоединениях.НаличиеСоединенияКонфигуратором;
	Результат.КоличествоАктивныхСеансов       = ПолучитьСеансыИнформационнойБазы().Количество();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

// Отменяет ранее зарегистрированное задание резервного копирования.
//
// Параметры:
//  ЗаданиеID - Строка - идентификатор задания, полученного после регистрации.
//
// Возвращаемое значение:
//  Структура - Отменить подготовку ручного резервного копированию:
//    * Статус - Строка - статус процесса отмены задания ручного резервного копирования:
//        см. ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаРезервноеКопированиеЗаданиеОтменено
//        см. ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаИППОшибкаАутентификации
//        см. ИдентификаторСтатусаОшибкаСервиса
//        см. ОблачныйАрхив20.ИдентификаторСтатусаСервисВременноНедоступен
//        см. ИдентификаторСтатусаОшибкаЗапроса - ошибка запроса.
//    * СообщениеПользователю - Строка, ФорматированнаяСтрока - текст, который необходимо отобразить пользователю на
//        форме.
//    * СообщениеТехподдержке - Строка - текст, который необходимо вставить в обращение к технической поддержке.
//
Функция ОтменитьПодготовкуРезервногоКопирования(ЗаданиеID) Экспорт
	
	// Инициализация локальных переменных
	Результат = НовыйОтветСервиса();
	
	// Получение тикета сервиса
	РезультатПолученияТикета = ТикетАутентификацииСервиса();
	Если ПустаяСтрока(РезультатПолученияТикета.Тикет) Тогда
		
		Результат.Статус                = ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаИППОшибкаАутентификации();
		Результат.СообщениеПользователю = РезультатПолученияТикета.СообщениеОбОшибке;
		
		Возврат Результат;
		
	КонецЕсли;
	
	ПараметрыАрхивирования = СохраненныеПараметрыРезервногоКопирования();
	URLОперации            = URLОперацииОтменыЗаданияРезервногоКопирования(ПараметрыАрхивирования.АгентID);
	ИдентификаторЗапроса   = Строка(Новый УникальныйИдентификатор());
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type"    , "application/json");
	Заголовки.Вставить("X-Token"         , РезультатПолученияТикета.Тикет);
	Заголовки.Вставить("X-Correlation-ID", ИдентификаторЗапроса);
	
	ДанныеДляОбработки = Новый Структура();
	ДанныеДляОбработки.Вставить("id", ЗаданиеID);
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("Метод"                   , "POST");
	ПараметрыЗапроса.Вставить("Заголовки"               , Заголовки);
	ПараметрыЗапроса.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыЗапроса.Вставить("ФорматОтвета"            , 1);
	ПараметрыЗапроса.Вставить("Таймаут"                 , 30);
	ПараметрыЗапроса.Вставить(
		"ДанныеДляОбработки",
		ЗначениеВСтрокуJSON(ДанныеДляОбработки));
	
	ТекстИнформации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Отмена задания на выполнение резервного копирования.
			|URL: %1
			|X-Correlation-ID: %2
			|%3'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
		URLОперации,
		ИдентификаторЗапроса,
		ПараметрыЗапроса.ДанныеДляОбработки);
	ЗаписатьИнформациюВЖурналРегистрации(ТекстИнформации);
	
	РезультатОперации = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(URLОперации, , , ПараметрыЗапроса);
	
	ТекстИнформации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получена информация об отмене задания на выполнение резервного копирования.
			|X-Correlation-ID: %1
			|%2'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
		ИдентификаторЗапроса,
		РезультатОперации.Содержимое);
	ЗаписатьИнформациюВЖурналРегистрации(ТекстИнформации);
	
	Если РезультатОперации.КодСостояния = 200 Тогда
		
		Результат.Статус = ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаРезервноеКопированиеЗаданиеОтменено();
		
	ИначеЕсли СтандартнаяОбработкаКодовСостояний(Результат, РезультатОперации) Тогда
		
		Если РезультатОперации.КодСостояния = 500 Тогда
			Результат.СообщениеТехподдержке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка отмены задания ручного резервного копирования.
					|URL: %1 %2
					|Код состояния: %3
					|Тело ответа:
					|%4'"),
				ПараметрыЗапроса.Метод,
				URLОперации,
				Строка(РезультатОперации.КодСостояния),
				РезультатОперации.Содержимое);
		КонецЕсли;
		
	ИначеЕсли РезультатОперации.КодСостояния = 404 Тогда
		
		Результат.Статус                =
			ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаРезервноеКопированиеЗаданиеНеНайдено();
		Результат.СообщениеПользователю =
			НСтр("ru = 'Не удалось отменить задание на выполнение резервной копии.
				|Обратитесь к администратору или напишите в техподдержку.'");
		Результат.СообщениеТехподдержке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка отмены регистрации задания на выполнение резервной копии.
				|Задание на резервное копирование по переданному идентификатору не найдено.
				|URL: %1 %2
				|URI: %3
				|ID задания: %4
				|Код состояния: %5'"),
			ПараметрыЗапроса.Метод,
			URLОперации,
			ПараметрыАрхивирования.URI,
			ЗаданиеID,
			Строка(РезультатОперации.КодСостояния));
		
		ЗаписатьИнформациюВЖурналРегистрации(Результат.СообщениеТехподдержке, Истина);
		
	ИначеЕсли РезультатОперации.КодСостояния = 503 Тогда
		
		СервисВременноНедоступен(
			Результат,
			НСтр("ru = 'Не удалось отменить задание на выполнение резервной копии. Сервис временно недоступен.'"),
			НСтр("ru = 'Сервис отмены регистрации задания на выполнение резервной копии временно недоступен.'"),
			ПараметрыЗапроса.Метод,
			URLОперации,
			РезультатОперации);
		
	Иначе
		
		НеклассифицированнаяОшибкаСервиса(
			Результат,
			НСтр("ru = 'Ошибка при работе с сервисом (подробнее см. Журнал регистрации).'"),
			НСтр("ru = 'Сервис отмены регистрации задания на выполнение резервной копии вернул неклассифицированную ошибку.'"),
			ПараметрыЗапроса.Метод,
			URLОперации,
			РезультатОперации);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// URL операции регистрации задания резервного копирования Облачного архива.
//
// Параметры:
//  ИдентификаторАгента - Строка - идентификатор Агента облачного архива, полученного при активации.
//
// Возвращаемое значение:
//  Строка
//
Функция URLОперацииРегистрацииЗаданияРезервногоКопирования(ИдентификаторАгента)
	
	Возврат БазовыйURLСервиса() + "isl/agents/" + ИдентификаторАгента + "/infobases/backups/create-backup";
	
КонецФункции

// URL операции проверки статуса задания резервного копирования Облачного архива.
//
// Параметры:
//  ИдентификаторАгента - Строка - идентификатор Агента облачного архива, полученного при активации.
//  ИдентификаторЗадания - Строка - идентификатор задания резервного копирования.
//
// Возвращаемое значение:
//  Строка
//
Функция URLОперацииПроверкиСтатусаЗаданияРезервногоКопирования(ИдентификаторАгента, ИдентификаторЗадания)
	
	Возврат БазовыйURLСервиса()
		+ "isl/agents/"
		+ ИдентификаторАгента
		+ "/infobases/backups/"
		+ ИдентификаторЗадания
		+ "/get-status";
	
КонецФункции

// URL операции отмены задания резервного копирования Облачного архива.
//
// Параметры:
//  ИдентификаторАгента - Строка - идентификатор Агента облачного архива, полученного при активации.
//
// Возвращаемое значение:
//  Строка
//
Функция URLОперацииОтменыЗаданияРезервногоКопирования(ИдентификаторАгента)
	
	Возврат БазовыйURLСервиса() + "isl/agents/" + ИдентификаторАгента + "/infobases/backups/reject-backup";
	
КонецФункции

#КонецОбласти

#Область АвтоматическоеРезервноеКопирование

// Выполняет запрос времени до автоматического резервного копирования.
//
// Параметры:
//  АгентID - Строка - идентификатор Агента облачного архива, полученного при активации.
//  URI -Строка - адрес размещения информационной базы.
//
// Возвращаемое значение:
//  Структура:
//    * Статус - Строка - статус выполнения запроса:
//        см. ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаОтветПолученУспешно
//        см. ИдентификаторСтатусаРезервноеКопированиеАгентИлиОбъектКопированияНеНайден
//        см. ИдентификаторСтатусаОшибкаСервиса
//        см. ОблачныйАрхив20.ИдентификаторСтатусаСервисВременноНедоступен
//        см. ИдентификаторСтатусаОшибкаЗапроса - ошибка запроса.
//    * СообщениеПользователю - Строка, ФорматированнаяСтрока - текст, который необходимо отобразить пользователю на
//        форме.
//    * СообщениеТехподдержке - Строка - текст, который необходимо вставить в обращение к технической поддержке.
//    * СекундДоКопирования - Неопределено - заданий на резервное копирование в ближайшие 24 часа нет.
//                          - Число - количество секунд до начала автоматического резервного копирования.
//
Функция ЗапросВремениДоАвтоматическогоРезервногоКопирования(АгентID, URI) Экспорт
	
	// Инициализация локальных переменных
	Результат = НовыйОтветСервиса();
	Результат.Вставить("СекундДоКопирования", 0);
	
	// Запрос времени до автоматического резервного копирования
	URLОперации          = URLОперацииЗапросаВремениДоАвтоматическогоРезервногоКопирования(АгентID);
	ИдентификаторЗапроса = Строка(Новый УникальныйИдентификатор());
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type"    , "application/json");
	Заголовки.Вставить("X-Correlation-ID", ИдентификаторЗапроса);
	
	ДанныеДляОбработки = Новый Структура();
	ДанныеДляОбработки.Вставить("URI", URI);
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("Метод"                   , "POST");
	ПараметрыЗапроса.Вставить("Заголовки"               , Заголовки);
	ПараметрыЗапроса.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыЗапроса.Вставить("ФорматОтвета"            , 1);
	ПараметрыЗапроса.Вставить("Таймаут"                 , 30);
	ПараметрыЗапроса.Вставить(
		"ДанныеДляОбработки",
		ЗначениеВСтрокуJSON(ДанныеДляОбработки));
	
	ТекстИнформации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Запрос времени до автоматического резервного копирования.
			|URL: %1
			|X-Correlation-ID: %2
			|%3'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
		URLОперации,
		ИдентификаторЗапроса,
		ПараметрыЗапроса.ДанныеДляОбработки);
	ЗаписатьИнформациюВЖурналРегистрации(ТекстИнформации);
	
	РезультатОперации = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(URLОперации, , , ПараметрыЗапроса);
	
	ТекстИнформации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получена информация о времени до автоматического резервного копирования.
			|X-Correlation-ID: %1
			|%2'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
		ИдентификаторЗапроса,
		РезультатОперации.Содержимое);
	ЗаписатьИнформациюВЖурналРегистрации(ТекстИнформации);
	
	Если РезультатОперации.КодСостояния = 200 Тогда
		
		// Тело ответа:
		// {
		//    "count": 3600
		// }
		
		ДанныеОтвета = Новый Структура();
		ДанныеОтвета.Вставить("count", Неопределено);
		
		Попытка
			
			ЗаполнитьЗначенияСвойств(
				ДанныеОтвета,
				СтрокуJSONВЗначение(РезультатОперации.Содержимое));
			
			Результат.Статус              = ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаОтветПолученУспешно();
			Результат.СекундДоКопирования = ДанныеОтвета.count;
			
		Исключение
			
			ОшибкаЧтенияДанныхСервиса(
				Результат,
				ПараметрыЗапроса.Метод,
				URLОперации,
				РезультатОперации,
				ИнформацияОбОшибке());
			
		КонецПопытки;
		
	ИначеЕсли СтандартнаяОбработкаКодовСостояний(Результат, РезультатОперации) Тогда
		
		Если РезультатОперации.КодСостояния = 500 Тогда
			Результат.СообщениеТехподдержке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка запроса времени до автоматического резервного копирования.
					|URL: %1 %2
					|Код состояния: %3
					|Тело ответа:
					|%4'"),
				ПараметрыЗапроса.Метод,
				URLОперации,
				Строка(РезультатОперации.КодСостояния),
				РезультатОперации.Содержимое);
		КонецЕсли;
		
	ИначеЕсли РезультатОперации.КодСостояния = 404 Тогда
		
		Результат.Статус                = ИдентификаторСтатусаРезервноеКопированиеАгентИлиОбъектКопированияНеНайден();
		Результат.СообщениеПользователю =
			НСтр("ru = 'Не удалось получить время до автоматического резервного копирования.
				|Обратитесь к администратору или напишите в техподдержку.'");
		Результат.СообщениеТехподдержке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка запроса времени до автоматического резервного копирования.
				|URL: %1 %2
				|URI: %3
				|Код состояния: %4
				|Тело ответа:
				|%5'"),
			ПараметрыЗапроса.Метод,
			URLОперации,
			URI,
			Строка(РезультатОперации.КодСостояния),
			РезультатОперации.Содержимое);
		
		ЗаписатьИнформациюВЖурналРегистрации(Результат.СообщениеТехподдержке, Истина);
		
	ИначеЕсли РезультатОперации.КодСостояния = 503 Тогда
		
		СервисВременноНедоступен(
			Результат,
			НСтр("ru = 'Не удалось получить время до автоматического резервного копирования. Сервис временно недоступен.'"),
			НСтр("ru = 'Сервис запроса времени до автоматического резервного копирования временно недоступен.'"),
			ПараметрыЗапроса.Метод,
			URLОперации,
			РезультатОперации);
		
	Иначе
		
		НеклассифицированнаяОшибкаСервиса(
			Результат,
			НСтр("ru = 'Ошибка при работе с сервисом (подробнее см. Журнал регистрации).'"),
			НСтр("ru = 'Сервис запроса времени до автоматического резервного копирования вернул неклассифицированную ошибку.'"),
			ПараметрыЗапроса.Метод,
			URLОперации,
			РезультатОперации);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Запускает фоновое задание по обновлению времени до автоматического резервного копирования.
//
// Параметры:
//  ПараметрыРезервногоКопирования - Структура: см. НовыйПараметрыРезервногоКопирования
//                                 - Неопределено - значение параметра заполняется сохраненными данными.
//
// Возвращаемое значение:
//  Структура:
//    * ДлительнаяОперацияЗапущена - Булево - Истина, если автоматическое архивирование доступно и запущено фоновое
//        задание.
//    * Статус - Строка - заполняется если ДлительнаяОперацияЗапущена = Истина. Доступные значения:
//        "Выполняется" - если задание еще не завершилось.
//        "Выполнено" - если задание было успешно выполнено.
//        "Ошибка" - если задание завершено с ошибкой.
//        "Отменено" - если задание отменено пользователем или администратором.
//    * ИдентификаторЗадания - УникальныйИдентификатор, Неопределено - если Статус = "Выполняется", то содержит
//       идентификатор запущенного фонового задания. Неопределено, если фоновое задание не запущено.
//    * АдресРезультата - Строка - адрес временного хранилища, в которое будет помещен результат работы функции.
//    * КраткоеПредставлениеОшибки - Строка - краткая информация об исключении, если Статус = "Ошибка".
//    * ПодробноеПредставлениеОшибки - Строка - подробная информация об исключении, если Статус = "Ошибка".
//    * Сообщения - ФиксированныйМассив из СообщениеПользователю - если Статус <> "Выполняется", то массив объектов
//        СообщениеПользователю, которые были сформированы в фоновом задании.
//    * ДополнительныеПараметры - Структура:
//        ** ОблачныйАрхивПодключен - см. ПодключениеОблачногоАрхиваВыполнено
//        ** ДатаОбновленияНастроек - Дата - дата последнего обновления настроек в формате универсального времени.
//        ** АвтоАрхивированиеВключено - Булево - Истина, если автоматическое архивирование доступно.
//        ** ЗавершатьРаботуПользователей - Булево - признак принудительного завершения работы пользователей при
//             автоматическом резервном копировании информационной базы.
//
Функция ОбновитьВремяДоАвтоматическогоРезервногоКопированияВФоне(ПараметрыРезервногоКопирования = Неопределено) Экспорт
	
	ОблачныйАрхивПодключен = ПодключениеОблачногоАрхиваВыполненоСлужебный(ПараметрыРезервногоКопирования);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОблачныйАрхивПодключен"   , ОблачныйАрхивПодключен);
	ДополнительныеПараметры.Вставить("ДатаОбновленияНастроек"   ,
		ПараметрыРезервногоКопирования.ДатаОбновленияНастроек);
	ДополнительныеПараметры.Вставить("АвтоАрхивированиеВключено", ОблачныйАрхивПодключен
		И ПараметрыРезервногоКопирования.АвтоматическоеРезервноеКопированиеВключено
		И ПараметрыРезервногоКопирования.РаботаРезервногоКопированияЗаблокирована = Ложь);
	
	Результат = Новый Структура();
	Результат.Вставить("Статус"                    , "");
	Результат.Вставить("ДлительнаяОперацияЗапущена", Ложь);
	Результат.Вставить("ДополнительныеПараметры"   , ДополнительныеПараметры);
	
	Если Не ДополнительныеПараметры.АвтоАрхивированиеВключено Тогда
		Возврат Результат;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ЗавершатьРаботуПользователей",
		ПараметрыРезервногоКопирования.ЗавершатьРаботуПользователей);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.ЗапуститьВФоне              = Истина;
	ПараметрыВыполнения.ОжидатьЗавершение           = 0;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания =
		НСтр("ru = 'Обновление времени до автоматического резервного копирования (Облачный архив)'");
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
		"ОблачныйАрхив20.ЗапросВремениДоАвтоматическогоРезервногоКопирования",
		ПараметрыРезервногоКопирования.АгентID, ПараметрыРезервногоКопирования.URI);
	
	ДлительнаяОперация.Вставить("ДлительнаяОперацияЗапущена", Истина);
	ДлительнаяОперация.Вставить("ДополнительныеПараметры"   , ДополнительныеПараметры);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

// URL операции запроса времени до автоматического резервного копирования Облачного архива.
//
// Параметры:
//  ИдентификаторАгента - Строка - идентификатор Агента облачного архива, полученного при активации.
//
// Возвращаемое значение:
//  Строка
//
Функция URLОперацииЗапросаВремениДоАвтоматическогоРезервногоКопирования(ИдентификаторАгента)
	
	Возврат БазовыйURLСервиса() + "isl/agents/" + ИдентификаторАгента + "/infobases/backups/get-backup-time";
	
КонецФункции

#КонецОбласти

#Область ИдентификаторыСтатусовРаботыОблачногоАрхива

// Возвращает идентификатор статуса прочей ошибки.
//
// Возвращаемое значение:
//  Строка
//
Функция ИдентификаторСтатусаПрочаяОшибка() Экспорт
	
	Возврат "ПрочаяОшибка";
	
КонецФункции

// Возвращает идентификатор статуса наличия подключенной опции Облачный архив.
//
// Возвращаемое значение:
//  Строка
//
Функция ИдентификаторСтатусаОблачныйАрхивДоступен()
	
	Возврат "ОблачныйАрхив:Доступен";
	
КонецФункции

// Возвращает идентификатор статуса успешного удаления настроек автоматического копирования.
//
// Возвращаемое значение:
//  Строка
//
Функция ИдентификаторСтатусаОблачныйАрхивНастройкиУдалены()
	
	Возврат "ОблачныйАрхив:НастройкиУдалены";
	
КонецФункции

// Возвращает идентификатор статуса ошибки сохранения настроек автоматического копирования.
//
// Возвращаемое значение:
//  Строка
//
Функция ИдентификаторСтатусаОблачныйАрхивОшибкаСохраненияНастроек()
	
	Возврат "ОблачныйАрхив:ОшибкаСохраненияНастроек";
	
КонецФункции

// Возвращает идентификатор статуса успешной проверки наличия данных аутентификации Интернет-поддержки пользователей и
// соответствие логина активации Агента облачного архива и текущего логина Интернет-поддержки пользователей.
//
// Возвращаемое значение:
//  Строка
//
Функция ИдентификаторСтатусаИПППодключена()
	
	Возврат "ИПП:Подключена";
	
КонецФункции

// Возвращает идентификатор статуса отсутствия установленного Агента облачного архива.
//
// Возвращаемое значение:
//  Строка
//
Функция ИдентификаторСтатусаАгентНеУстановлен()
	
	Возврат "Агент:НеУстановлен";
	
КонецФункции

// Возвращает идентификатор статуса неготовности Агента облачного архива выполнять задачи резервного копирования.
//
// Возвращаемое значение:
//  Строка
//
Функция ИдентификаторСтатусаРаботыАгентаНеАктивен()
	
	Возврат "Агент:НеАктивен";
	
КонецФункции

// Возвращает идентификатор статуса отсутствия активации Агента облачного архива.
//
// Возвращаемое значение:
//  Строка
//
Функция ИдентификаторСтатусаАгентНеАктивирован() Экспорт
	
	Возврат "Агент:НеАктивирован";
	
КонецФункции

// Возвращает идентификатор статуса активации Агента облачного архива.
//
// Возвращаемое значение:
//  Строка
//
Функция ИдентификаторСтатусаАгентАктивирован()
	
	Возврат "Агент:Активирован";
	
КонецФункции

// Возвращает идентификатор статуса выполнения проверки доступности файлов копирования Агенту облачного архива.
//
// Возвращаемое значение:
//  Строка
//
Функция ИдентификаторСтатусаАгентПроверяетДоступностьФайлов()
	
	Возврат "Агент:ПроверяетДоступностьФайлов";
	
КонецФункции

// Возвращает идентификатор статуса успешной проверки доступности файлов копирования Агенту облачного архива.
//
// Возвращаемое значение:
//  Строка
//
Функция ИдентификаторСтатусаАгентФайлыДоступны()
	
	Возврат "Агент:ФайлыДоступны";
	
КонецФункции

// Возвращает идентификатор статуса наличия ограничений в доступе к файлам копирования Агенту облачного архива.
//
// Возвращаемое значение:
//  Строка
//
Функция ИдентификаторСтатусаАгентФайлыНедоступны()
	
	Возврат "Агент:ФайлыНедоступны";
	
КонецФункции

// Возвращает идентификатор статуса наличие ошибки установки Агента облачного архива.
//
// Возвращаемое значение:
//  Строка
//
Функция ИдентификаторСтатусаОшибкаУстановкиАгента()
	
	Возврат "Агент:ОшибкаУстановки";
	
КонецФункции

// Возвращает идентификатор статуса прочих ошибок клиента при выполнении запроса к сервису.
//
// Возвращаемое значение:
//  Строка
//
Функция ИдентификаторСтатусаОшибкаЗапроса()
	
	Возврат "Сервис:ОшибкаЗапроса";
	
КонецФункции

// Возвращает идентификатор статуса ошибки копирования файлов информационной базы из-за отказа в доступе к файлам
// копирования.
//
// Возвращаемое значение:
//  Строка
//
Функция ИдентификаторСтатусаРезервноеКопированиеОбъектКопированияНедоступен()
	
	Возврат "РезервноеКопирование:ОбъектКопированияНедоступен";
	
КонецФункции

// Возвращает идентификатор статуса прочей ошибки копирования файлов информационной базы.
//
// Возвращаемое значение:
//  Строка
//
Функция ИдентификаторСтатусаРезервноеКопированиеОшибка()
	
	Возврат "РезервноеКопирование:Ошибка";
	
КонецФункции

// Возвращает идентификатор статуса ошибки копирования из-за отсутствия Агента облачного архива или объекта копирования.
//
// Возвращаемое значение:
//  Строка
//
Функция ИдентификаторСтатусаРезервноеКопированиеАгентИлиОбъектКопированияНеНайден()
	
	Возврат "РезервноеКопирование:АгентИлиОбъектКопированияНеНайден";
	
КонецФункции

// Возвращает идентификатор статуса успешного копирования файлов информационной базы во временный каталог и старт
// операции выгрузки его в облако Фирмы 1С.
//
// Возвращаемое значение:
//  Строка
//
Функция ИдентификаторСтатусаРезервноеКопированиеВыполнено() Экспорт
	
	Возврат "РезервноеКопирование:Выполнено";
	
КонецФункции

// Возвращает идентификатор статуса отсутствия регистрации объекта копирования в Облачном архиве.
//
// Возвращаемое значение:
//  Строка
//
Функция ИдентификаторСтатусаОблачныйАрхивБазаНеЗарегистрирована()
	
	Возврат "ОблачныйАрхив:БазаНеЗарегистрирована";
	
КонецФункции

// Возвращает идентификатор статуса прочих ошибок сервера при выполнении запроса к сервису.
//
// Возвращаемое значение:
//  Строка
//
Функция ИдентификаторСтатусаОшибкаСервиса()
	
	Возврат "Сервис:ОшибкаСервиса";
	
КонецФункции

// Возвращает идентификатор статуса временной недоступности сервиса.
//
// Возвращаемое значение:
//  Строка
//
Функция ИдентификаторСтатусаСервисВременноНедоступен()
	
	Возврат "Сервис:ВременноНедоступен";
	
КонецФункции

#КонецОбласти

#Область ИдентификаторыПодсистемРезервногоКопирования

// Возвращает идентификатор резервного копирования БСП.
//
// Возвращаемое значение:
//  Строка
//
Функция ИдентификаторРезервногоКопированияБСП()
	
	Возврат "СтандартныеПодсистемы.РезервноеКопированиеИБ";
	
КонецФункции

// Возвращает идентификатор резервного копирования Облачный архив.
//
// Возвращаемое значение:
//  Строка
//
Функция ИдентификаторРезервногоКопированияОблачныйАрхив()
	
	Возврат "ИнтернетПоддержкаПользователей.ОблачныйАрхив20";
	
КонецФункции

#КонецОбласти

#Область ИдентификаторыТипаХраненияКопий

// Возвращает идентификатор типа хранения копий Все.
//
// Возвращаемое значение:
//  Строка
//
Функция ИдентификаторТипаХраненияКопийВсе()
	
	Возврат "ALL";
	
КонецФункции

// Возвращает идентификатор типа хранения копий Последние.
//
// Возвращаемое значение:
//  Строка
//
Функция ИдентификаторТипаХраненияКопийПоследние()
	
	Возврат "ITEM";
	
КонецФункции

// Возвращает идентификатор типа хранения копий ЗаПоследние.
//
// Возвращаемое значение:
//  Строка
//
Функция ИдентификаторТипаХраненияКопийЗаПоследние()
	
	Возврат "AGE";
	
КонецФункции

#КонецОбласти

#Область РаботаСХранилищемОбщихНастроек

// Сохраняет произвольные настройки в общем хранилище.
//
// Параметры:
//  КлючНастроек - Строка - ключ сохраняемых настроек.
//  Настройки - Произвольный - содержит настройки, которые нужно сохранить в хранилище.
//  ИмяПользователя - Строка - имя пользователя, настройки которого сохраняются. Если не указан, то сохраняются
//    настройки текущего пользователя.
//
Процедура СохранитьНастройки(КлючНастроек, Настройки, ИмяПользователя = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		КлючОбъектаНастроек(),
		КлючНастроек,
		Настройки,
		,
		ИмяПользователя);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Загружает настройки из общего хранилища.
//
// Параметры:
//  КлючНастроек - Строка - ключ загружаемых настроек.
//  ЗначениеПоУмолчанию - Произвольный - значение, которое возвращается, если настройки не существуют. Если не указано,
//    возвращается значение Неопределено.
//  ИмяПользователя - Строка - имя пользователя, настройки которого сохраняются. Если не указан, то сохраняются
//    настройки текущего пользователя.
//
// Возвращаемое значение:
//  Произвольный
//
Функция ЗагрузитьНастройки(КлючНастроек, ЗначениеПоУмолчанию = Неопределено, ИмяПользователя = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		КлючОбъектаНастроек(),
		КлючНастроек,
		ЗначениеПоУмолчанию,
		,
		ИмяПользователя);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

// Удаляет ранее сохраненную настройку общего хранилища.
//
// Параметры:
//  КлючНастроек - Строка - ключ удаляемых настроек.
//  ИмяПользователя - Строка - имя пользователя, настройки которого сохраняются. Если не указан, то сохраняются
//    настройки текущего пользователя.
//
Процедура УдалитьНастройки(КлючНастроек, ИмяПользователя = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекУдалить(
		КлючОбъектаНастроек(),
		КлючНастроек,
		ИмяПользователя);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Возвращает ключ объекта настроек, используемый во всех настроек общего хранилища.
//
// Возвращаемое значение:
//  Строка
//
Функция КлючОбъектаНастроек()
	
	Возврат "ИнтернетПоддержкаПользователей.ОблачныйАрхив20";
	
КонецФункции

// Возвращает ключ настроек ручного резервного копирования.
//
// Возвращаемое значение:
//  Строка
//
Функция КлючНастроекРучногоРезервногоКопирования() Экспорт
	
	Возврат "РучноеРезервноеКопирование.ПараметрыВыполнения";
	
КонецФункции

// Возвращает ключ настроек даты последнего резервного копирования.
//
// Возвращаемое значение:
//  Строка
//
Функция КлючНастроекДатаПоследнегоРезервногоКопирования() Экспорт
	
	Возврат "РучноеРезервноеКопирование.ДатаПоследнегоРезервногоКопирования";
	
КонецФункции

// Возвращает ключ настроек активной подсистемы резервного копирования информационной базы.
//
// Возвращаемое значение:
//  Строка
//
Функция КлючНастроекАктивнаяПодсистемаРезервногоКопирования()
	
	Возврат "АктивнаяПодсистемаРезервногоКопирования";
	
КонецФункции

#КонецОбласти

#Область КонвертацияДанных

// Возвращает строку в формате JSON по переданным данным. Значения типа даты преобразовываются в универсальный формат.
//
// Параметры:
//  Значение - Произвольный - значение конвертации в JSON.
//
// Возвращаемое значение:
//  Строка
//
Функция ЗначениеВСтрокуJSON(Значение)
	
	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.УстановитьСтроку();
	
	НастройкиСериализации = Новый НастройкиСериализацииJSON();
	НастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.УниверсальнаяДата;
	
	ЗаписатьJSON(ЗаписьJSON, Значение, НастройкиСериализации);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

// Возвращает объект, полученный в результате конвертации со строки JSON.
//
// Параметры:
//  СтрокаJSON - Строка
//
// Возвращаемое значение:
//  Произвольный
//
Функция СтрокуJSONВЗначение(СтрокаJSON)
	
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	
	Результат = ПрочитатьJSON(ЧтениеJSON);
	
	ЧтениеJSON.Закрыть();
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область УправлениеБлокировкойСеансов

// Снимает ранее установленную блокировку сеансов.
//
Процедура СнятьБлокировкуСоединение() Экспорт
	
	Блокировка = ПолучитьБлокировкуСеансов();
	Если Не Блокировка.Установлена Тогда
		Возврат;
	КонецЕсли;
	
	Блокировка.Установлена = Ложь;
	
	ВыполнитьУстановкуБлокировкиСеансов(Блокировка);
	
КонецПроцедуры

// Проверяет доступность управления блокировкой сеанса и устанавливает ее.
//
// Параметры:
//  Блокировка - БлокировкаСеансов
//
Процедура ВыполнитьУстановкуБлокировкиСеансов(Блокировка) Экспорт
	
	Если Не Пользователи.ЭтоПолноправныйПользователь(, Истина, Ложь)
		И Не (СозданиеРезервнойКопииДоступно()
		И ПодключениеОблачногоАрхиваВыполненоСлужебный()) Тогда
		
		ВызватьИсключение НСтр(
			"ru = 'Недостаточно прав доступа для создания резервной копии.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	УстановитьБлокировкуСеансов(Блокировка);
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

// Описывает объект параметров облачного архива при запуске.
//
// Возвращаемое значение:
//  Структура:
//    * ОблачныйАрхивПодключен - Булево - Истина, если информационная база подключена к облачному архиву.
//    * ПоказатьФормуВосстановленияРаботыОблачногоАрхива - Булево - Истина, если работа облачного архива заблокирована
//        по причине обнаружения переноса файловой информационной базы в новое расположение.
//    * АвтоматическоеАрхивирование - Неопределено - параметры автоматического архивирования не определены.
//                                  - см. ОблачныйАрхив20.ОбновитьВремяДоАвтоматическогоРезервногоКопированияВФоне
//    * ПоказатьФормуСтатусаРучногоРезервногоКопирования - Неопределено - отображать окно со статусом резервного
//        копирования не требуется.
//                                                       - см. ОблачныйАрхив20.НовыйНастройкаРучногоРезервногоКопирования
//
Функция НовыйПараметрыОблачногоАрхиваПриЗапуске()
	
	Результат = Новый Структура();
	Результат.Вставить("ОблачныйАрхивПодключен"                          , Ложь);
	Результат.Вставить("ПоказатьФормуВосстановленияРаботыОблачногоАрхива", Ложь);
	Результат.Вставить("АвтоматическоеАрхивирование"                     , Неопределено);
	Результат.Вставить("ПоказатьФормуСтатусаРучногоРезервногоКопирования", Неопределено);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

// Возвращает результат проверки подключения Интернет-поддержки пользователей.
//
// Параметры:
//  ПараметрыРезервногоКопирования - Структура - см. НовыйПараметрыРезервногоКопирования
//                                 - Неопределено - значение переменной будет заполнена сохраненными данными.
//  ДанныеАутентификации - Структура -
//    см. ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки
//                       - Неопределено - значение переменной будет заполнена сохраненными данными.
//
// Возвращаемое значение:
//  Структура:
//    * Статус - Строка - статус проверки подключения ИПП:
//        см. ИдентификаторСтатусаИПППодключена - ИПП подключена.
//        см. ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаИППНеПодключена - ИПП не подключена.
//        см. ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаИПППодключенНаДругойЛогин - ИПП подключена, но логин
//            активации Облачного архива отличается от текущего.
//    * СообщениеПользователю - Строка, ФорматированнаяСтрока - текст, который необходимо отобразить пользователю на
//        форме.
//    * СообщениеТехподдержке - Строка - текст, который необходимо вставить в обращение к технической поддержке.
//    * ДанныеАутентификации - Структура -
//        см. ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки
//                           - Неопределено
//
Функция ПроверитьПодключениеИнтернетПоддержкиПользователей(
	ПараметрыРезервногоКопирования = Неопределено,
	ДанныеАутентификации = Неопределено)
	
	// Инициализация локальных переменных
	ДанныеАутентификацииРезультат = Неопределено;	// см. ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки
	
	Результат = НовыйОтветСервиса();
	Результат.Вставить("ДанныеАутентификации", ДанныеАутентификацииРезультат);
	
	Если ДанныеАутентификации = Неопределено Тогда
		УстановитьПривилегированныйРежим(Истина);
		ДанныеАутентификацииРезультат =
			ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
		УстановитьПривилегированныйРежим(Ложь);
	Иначе
		ДанныеАутентификацииРезультат = ДанныеАутентификации;
	КонецЕсли;
	Если ПараметрыРезервногоКопирования = Неопределено Тогда
		ПараметрыРезервногоКопирования = СохраненныеПараметрыРезервногоКопирования();
	КонецЕсли;
	
	// Сохраненные данные аутентификации отсутствуют
	Если ДанныеАутентификацииРезультат = Неопределено Тогда
		
		Результат.Статус = ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаИППНеПодключена();
		
	// Проверка текущего логина ИПП и логина, используемого при активации облачного архива.
	ИначеЕсли Не ПустаяСтрока(ПараметрыРезервногоКопирования.ЛогинИПП)
		И СтрСравнить(ДанныеАутентификацииРезультат.Логин, ПараметрыРезервногоКопирования.ЛогинИПП) <> 0 Тогда
		
		Результат.Статус                = ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаИПППодключенНаДругойЛогин();
		Результат.СообщениеПользователю = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для продолжения операции необходимо авторизоваться под логином ""%1"", так как он использовался при подключении облачного архива.'"),
			ПараметрыРезервногоКопирования.ЛогинИПП);
		Результат.СообщениеТехподдержке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Агент облачного архива был подключен под логином %1.
				|Текущее подключение выполняется под логином %2.'"),
			ПараметрыРезервногоКопирования.ЛогинИПП,
			ДанныеАутентификацииРезультат.Логин);
		
		Результат.ДанныеАутентификации = Новый Структура();
		Результат.ДанныеАутентификации.Вставить("Логин" , ПараметрыРезервногоКопирования.ЛогинИПП);
		Результат.ДанныеАутентификации.Вставить("Пароль", "");
		
	Иначе
		Результат.Статус               = ИдентификаторСтатусаИПППодключена();
		Результат.ДанныеАутентификации = ДанныеАутентификацииРезультат;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает результат проверки работы Агента облачного архива.
//
// Параметры:
//  ПараметрыАрхивирования - см. СохраненныеПараметрыРезервногоКопирования
//
// Возвращаемое значение:
//  Структура:
//    * Статус - Строка - статус проверки работы Агента облачного архива.
//    * СообщениеПользователю - Строка, ФорматированнаяСтрока - текст, который необходимо отобразить пользователю на
//        форме.
//    * СообщениеТехподдержке - Строка - текст, который необходимо вставить в обращение к технической поддержке.
//    * АгентID - Строка - строка идентификатора Агента облачного архива, полученного при активации. Параметр
//        заполняется, если в процессе проверки была выполнена операция активации Агента.
//
Функция ПроверитьРаботуАгента(ПараметрыАрхивирования)
	
	Если ПустаяСтрока(ПараметрыАрхивирования.АгентID) Тогда
		
		// При отсутствии идентификатора агента считается, что запущен процесс новой установки. Перед установкой и
		// активацией нового экземпляра агента необходимо убедиться в отсутствии установленного и активированного агента
		// на этом компьютере.
		
		Результат = ПолучитьСтатусАктивацииАгента();
		Если Результат.Статус = ИдентификаторСтатусаАгентАктивирован() Тогда
			ПараметрыАрхивирования.АгентID = Результат.АгентID;
		КонецЕсли;
		
		Возврат Результат;
		
	Иначе
		
		// Поверка работы агента через сервис.
		Возврат ПроверитьРаботуАгентаЧерезСервис(ПараметрыАрхивирования.АгентID);
		
	КонецЕсли;
	
КонецФункции

// Выполняет проверку кода завершения приложения на ограничение системных политик.
//
// Параметры:
//  КодВозврата - Число - код ошибки запуска приложения.
//
// Возвращаемое значение:
//  Булево - Истина, если код ошибки является ограничением системных политик.
//
Функция ЭтоКодВозвратаОграниченияСистемныхПолитик(КодВозврата)
	
	Возврат (КодВозврата = 1625 Или КодВозврата = 1643 Или КодВозврата = 1644);
	
КонецФункции

// Выполняет проверку принадлежности кода состояния ответа на запрос к общим ошибкам и заполняет Приемник
// соответствующим статусом и сообщениями, а также регистрирует ошибку в журнале регистраций.
//
// Параметры:
//  Приемник - см. НовыйОтветСервиса
//  ОтветСервиса - см. ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет
//
// Возвращаемое значение:
//  Булево - Истина, если код состояния относится к стандартной ошибке.
//
Функция СтандартнаяОбработкаКодовСостояний(Приемник, ОтветСервиса)
	
	Ошибка               = Истина;
	СтандартнаяОбработка = Ложь;
	
	Если ОтветСервиса.КодСостояния = 400 Тогда
		
		СтандартнаяОбработка = Истина;
		
		Приемник.Статус                = ИдентификаторСтатусаОшибкаЗапроса();
		Приемник.СообщениеПользователю =
			НСтр("ru = 'Некорректный формат параметров запроса.
				|Обратитесь к администратору.'");
		
		СообщениеЖурнала = ОтветСервиса.СообщениеОбОшибке + Символы.ПС + ОтветСервиса.ИнформацияОбОшибке;
		
	ИначеЕсли ОтветСервиса.КодСостояния = 401 Тогда
		
		СтандартнаяОбработка = Истина;
		
		Приемник.Статус                = ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаИППОшибкаАутентификации();
		Приемник.СообщениеПользователю =
			НСтр("ru = 'Неверный логин или пароль.'");
		
		СообщениеЖурнала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка аутентификации в сервисе.
				|Информация об ошибке: %1'"),
			ОтветСервиса.ИнформацияОбОшибке);
		Ошибка           = Ложь;
		
	ИначеЕсли ОтветСервиса.КодСостояния = 402 Тогда
		
		СтандартнаяОбработка = Истина;
		
		Приемник.Статус = ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаОблачныйАрхивНедоступен();
		
		СообщениеЖурнала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Сервис Облачный архив недоступен.
				|Информация об ошибке: %1'"),
			ОтветСервиса.ИнформацияОбОшибке);
		Ошибка           = Ложь;
		
	ИначеЕсли ОтветСервиса.КодСостояния = 500 Тогда
		
		СтандартнаяОбработка = Истина;
		
		Приемник.Статус                = ИдентификаторСтатусаОшибкаСервиса();
		Приемник.СообщениеПользователю =
			НСтр("ru = 'Ошибка при работе с сервисом.
				|Обратитесь в службу техподдержки.'");
		Приемник.СообщениеТехподдержке = ОтветСервиса.ИнформацияОбОшибке;
		
		СообщениеЖурнала = ОтветСервиса.СообщениеОбОшибке + Символы.ПС + ОтветСервиса.ИнформацияОбОшибке;
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(СообщениеЖурнала) Тогда
		ЗаписатьИнформациюВЖурналРегистрации(СообщениеЖурнала, Ошибка);
	КонецЕсли;
	
	Возврат СтандартнаяОбработка;
	
КонецФункции

// Возвращает сообщению пользователю по статусу.
//
// Параметры:
//  Статус - Строка - статус, сообщение для пользователя по которому нужно сформировать. Возможные значения:
//      ОблачныйАрхив20.ИдентификаторСтатусаАгентНеУстановлен().
//      ОблачныйАрхив20.ИдентификаторСтатусаРаботыАгентаНеАктивен().
//      ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаОблачныйАрхивНеПодключен().
//      ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаИнформационнаяБазаПеремещена().
//      ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаОблачныйАрхивНедоступен().
//  ДобавитьЖурнал - Булево - Истина, если в сообщение пользователю надо добавить строку открытия журнала регистраций.
//  ДобавитьТехподдержку - Булево - Истина, если в сообщение пользователю надо добавить строку обращения в техподдержку.
//  ДобавитьИнструкцию - Булево - Истина, если в сообщение пользователю надо добавить строку открытия инструкции.
//
// Возвращаемое значение:
//  ФорматированнаяСтрока
//
Функция СтандартноеСообщениеПользователю(
	Статус,
	ДобавитьЖурнал = Ложь,
	ДобавитьТехподдержку = Ложь,
	ДобавитьИнструкцию = Ложь)
	
	ДобавитьУстановкуАгента = Ложь;
	
	Результат = Новый Массив();
	
	Если Статус = ИдентификаторСтатусаАгентНеУстановлен() Тогда
		
		Результат.Добавить(
			НСтр("ru = 'Не удалось установить Агент на компьютере пользователя. Возможные причины:
				| - Присутствуют ограничения на интернет-ресурсы.
				| - Дистрибутив Агента поврежден.
				| - Антивирусная программа блокирует попытку установить Агент.
				| - Не получено разрешение на установку Агента.
				| - Брандмауэр или антивирусная программа блокирует порт Агента.'"));
		
		ДобавитьИнструкцию   = Истина;
		ДобавитьТехподдержку = Истина;
		ДобавитьЖурнал       = Истина;
		
	// Агент облачного архива не синхронизирован с сервисом
	ИначеЕсли Статус = ИдентификаторСтатусаРаботыАгентаНеАктивен() Тогда
		
		Результат.Добавить(
			НСтр("ru = 'Агент облачного архива не активен, обратитесь к администратору. Возможные причины:
				| - Программа или служба Агента не запущена.
				| - Брандмауэр или антивирусная программа блокирует порт.
				| - Компьютер, на котором установлен Агент, выключен.
				| - Отсутствует или ограничен доступ к сети Интернет для Агента.'"));
		
		ДобавитьИнструкцию      = Истина;
		ДобавитьТехподдержку    = Ложь;
		ДобавитьЖурнал          = Истина;
		ДобавитьУстановкуАгента = Истина;
		
	ИначеЕсли Статус = ИдентификаторСтатусаАгентНеАктивирован() Тогда
		
		Результат.Добавить(
			НСтр("ru = 'Агент установлен, но не активен. Возможные причины:
				| - Программа или служба Агента не запущена.
				| - Брандмауэр или антивирусная программа блокирует порт.
				| - Компьютер, на котором установлен Агент, выключен.'"));
		
		ДобавитьИнструкцию   = Истина;
		ДобавитьТехподдержку = Ложь;
		ДобавитьЖурнал       = Истина;
		
	// Подсистема не подключена
	ИначеЕсли Статус = ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаОблачныйАрхивНеПодключен() Тогда
		
		Результат.Добавить(
			НСтр("ru = 'Подключение к сервису 1С:Облачный архив не выполнено.
				|<a href=""Backup1C:OpenSettings"">Подключиться</a> к сервису.'"));
		
	// Подсистема заблокирована
	ИначеЕсли Статус = ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаИнформационнаяБазаПеремещена() Тогда
		
		Результат.Добавить(
			НСтр("ru = 'Резервное копирование информационной базы в облако Фирмы 1С приостановлено, так как изменилось размещение базы.
				|Необходимо выполнить <a href=""Backup1C:OpenSettings"">обновление настроек</a> перед продолжением операции.'"));
		
	// Отсутствует подписка
	ИначеЕсли Статус = ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаОблачныйАрхивНедоступен() Тогда
		
		Результат.Добавить(
			НСтр("ru = '1С:Облачный архив не подключен. <a href=""Backup1C:About"">Подробнее о сервисе</a>.'"));
		
	КонецЕсли;
	
	Если ДобавитьИнструкцию Тогда
		
		Результат.Добавить(Символы.ПС + Символы.ПС);
		Результат.Добавить(
			НСтр("ru = 'Проверьте работу Агента с помощью <a href=""Backup1C:Help"">инструкций</a>.'"));
		
	КонецЕсли;
	
	Если ДобавитьУстановкуАгента Тогда
		
		Результат.Добавить(Символы.ПС + Символы.ПС);
		Результат.Добавить(
			НСтр("ru = '<a href=""Action:InstallAgent"">Установить</a> Агент облачного архива на текущем компьютере.'"));
		
	КонецЕсли;
	
	Если ДобавитьТехподдержку Тогда
		
		Результат.Добавить(Символы.ПС + Символы.ПС);
		Результат.Добавить(
			НСтр("ru = 'При возникновении проблем напишите в <a href=""TechSupport"">техподдержку</a>.'"));
		
	КонецЕсли;
	
	Если ДобавитьЖурнал Тогда
		
		Результат.Добавить(Символы.ПС + Символы.ПС);
		Результат.Добавить(НСтр("ru = 'Технические подробности см. в <a href=""Open:Log"">журнале регистрации</a>.'"));
		
	КонецЕсли;
	
	Возврат СтроковыеФункции.ФорматированнаяСтрока(
		СтрСоединить(Результат));
	
КонецФункции

// Регистрирует информацию об ошибке чтения ответа сервиса.
//
// Параметры:
//  Приемник - см. ОблачныйАрхив20.ИнициализацияНастроекОблачногоАрхиваВФоне
//  HTTPМетод - Строка
//  URLОперации - Строка
//  РезультатОперации - см. ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет
//  ИнформацияОбОшибке - ИнформацияОбОшибке
//
Процедура ОшибкаЧтенияДанныхСервиса(Приемник, HTTPМетод, URLОперации, РезультатОперации, ИнформацияОбОшибке)
	
	СообщениеТехподдержке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Не удалось прочитать результат операции.
			|URL: %1 %2
			|Код состояния: %3
			|Ошибка: %4
			|Тело ответа:
			|%5'"),
		HTTPМетод,
		URLОперации,
		Строка(РезультатОперации.КодСостояния),
		ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке),
		РезультатОперации.Содержимое);
	
	Приемник.Статус                = ИдентификаторСтатусаОшибкаСервиса();
	Приемник.СообщениеПользователю = НСтр("ru = 'Ошибка при работе с сервисом (подробнее см. Журнал регистрации).'");
	Приемник.СообщениеТехподдержке = СообщениеТехподдержке;
	
	ЗаписатьИнформациюВЖурналРегистрации(СообщениеТехподдержке, Истина);
	
КонецПроцедуры

// Регистрирует информацию о временной недоступности сервиса.
//
// Параметры:
//  Приемник - см. ОблачныйАрхив20.ИнициализацияНастроекОблачногоАрхиваВФоне
//  КраткоеСообщениеПользователю - Строка
//  КраткоеСообщениеТехподдержке - Строка
//  HTTPМетод - Строка
//  URLОперации - Строка
//  РезультатОперации - см. ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет
//
Процедура СервисВременноНедоступен(
	Приемник,
	КраткоеСообщениеПользователю,
	КраткоеСообщениеТехподдержке,
	HTTPМетод,
	URLОперации,
	РезультатОперации)
	
	Приемник.Статус                = ИдентификаторСтатусаСервисВременноНедоступен();
	Приемник.СообщениеПользователю = СтроковыеФункции.ФорматированнаяСтрока(
		НСтр("ru = '%1
			|Повторите операцию позже или обратитесь в службу техподдержки.
			|
			|При возникновении проблем напишите в <a href=""TechSupport"">техподдержку</a>.'"),
		КраткоеСообщениеПользователю);
	Приемник.СообщениеТехподдержке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1
			|URL: %2 %3
			|Код состояния: %4
			|Тело ответа:
			|%5'"),
		КраткоеСообщениеТехподдержке,
		HTTPМетод,
		URLОперации,
		Строка(РезультатОперации.КодСостояния),
		РезультатОперации.Содержимое);
	
	ЗаписатьИнформациюВЖурналРегистрации(Приемник.СообщениеТехподдержке);
	
КонецПроцедуры

// Регистрирует неклассифицированную ошибку сервиса.
//
// Параметры:
//  Приемник - см. ОблачныйАрхив20.ИнициализацияНастроекОблачногоАрхиваВФоне
//  КраткоеСообщениеПользователю - Строка
//  КраткоеСообщениеТехподдержке - Строка
//  HTTPМетод - Строка
//  URLОперации - Строка
//  РезультатОперации - см. ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет
//
Процедура НеклассифицированнаяОшибкаСервиса(
	Приемник,
	КраткоеСообщениеПользователю,
	КраткоеСообщениеТехподдержке,
	HTTPМетод,
	URLОперации,
	РезультатОперации)
	
	Приемник.Статус                = ИдентификаторСтатусаОшибкаСервиса();
	Приемник.СообщениеПользователю = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1
			|Повторите операцию позже или обратитесь в службу техподдержки.'"),
		КраткоеСообщениеПользователю);
	Приемник.СообщениеТехподдержке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1
			|URL: %2 %3
			|Информация об ошибке: %4
			|Код состояния: %5
			|Тело ответа:
			|%6'"),
		КраткоеСообщениеТехподдержке,
		HTTPМетод,
		URLОперации,
		РезультатОперации.ИнформацияОбОшибке,
		Строка(РезультатОперации.КодСостояния),
		РезультатОперации.Содержимое);
	
	ЗаписатьИнформациюВЖурналРегистрации(Приемник.СообщениеТехподдержке, Истина);
	
КонецПроцедуры

// Возвращает новую структуру настроек ручного резервного копирования.
//
// Возвращаемое значение:
//  Структура:
//    * ЗаданиеID - Строка - идентификатор длительного задания резервного копирования по запросу.
//    * ДатаКопии - Дата - дата резервной копии.
//    * Пользователь - Строка - имя пользователя системы, запустивший операцию резервного копирования.
//
Функция НовыйНастройкаРучногоРезервногоКопирования() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("ЗаданиеID"   , "");
	Результат.Вставить("ДатаКопии"   , '00010101');
	Результат.Вставить("Пользователь", ИмяПользователя());
	
	Возврат Результат;
	
КонецФункции

// Выполняет сброс незаполненных и необязательных значений до Неопределено.
//
// Параметры:
//  Данные - Структура - структура данных, значения ключей которых необходимо сбросить.
//  НеобязательныеПоля - Строка - список ключей структуры, перечисленных через запятую, значения которых необходимо
//    сбросить.
//
Процедура СброситьНеобязательныеПоляСервиса(Данные, НеобязательныеПоля)
	
	СписокПолей = СтрРазделить(НеобязательныеПоля, ",", Ложь);
	Для Каждого ТекПоле Из СписокПолей Цикл
		
		ТекПоле = СокрЛП(ТекПоле);
		Если Не ЗначениеЗаполнено(Данные[ТекПоле]) Тогда
			Данные[ТекПоле] = Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
