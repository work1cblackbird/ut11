
#Область СлужебныйПрограммныйИнтерфейс

// Добавляет в список поставляемые драйверы в составе конфигурации.
// 
// Параметры:
//  ДрайвераОборудования - см. МенеджерОборудования.НоваяТаблицаПоставляемыхДрайверовОборудования
//
Процедура ОбновитьПоставляемыеДрайвера(ДрайвераОборудования) Экспорт
	
	// ++ Локализация       
	// ++ НеМобильноеПриложение
	Драйвер = ДрайвераОборудования.Добавить();
	Драйвер.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.УстройствоРаспознавания;
	Драйвер.ИмяДрайвера  = "ДрайверМертехРаспознаватель";
	Драйвер.Наименование = НСтр("ru = 'Мертех:Устройство распознавания'", ОбщегоНазначенияБПО.КодОсновногоЯзыка());
	Драйвер.ИмяМакетаДрайвера = "ДрайверМертехВесыСПечатьюЭтикетокРаспознаватель";
	Драйвер.ИдентификаторОбъекта = "Mertech"; 
	// -- НеМобильноеПриложение
	// -- Локализация
	
КонецПроцедуры

// Подготовить данные операции перед выполнением команды.
// 
// Параметры:
//  ПараметрыПодключения - Структура - Параметры подключения.
//  Команда - Строка - Выполняемая команда.
//  ПараметрыОперации - Структура - Параметры операции.
// 
// Возвращаемое значение:
//  Структура.
Функция ПодготовитьДанныеОперации(ПараметрыПодключения, Команда, ПараметрыОперации) Экспорт
	
	Если Команда = "UploadGoods" Тогда
		
		Если ПараметрыОперации.ТаблицаТоваров.Количество() = 0 Тогда
			ОписаниеОшибки = НСтр("ru='Нет данных для выгрузки.'");
			ДанныеОперации = Новый Структура();
			ДанныеОперации.Вставить("Результат"  , Ложь);
			ДанныеОперации.Вставить("ТекстОшибки", ОписаниеОшибки);
			Возврат ДанныеОперации;
		КонецЕсли;
		ПолнаяВыгрузка = НЕ ПараметрыОперации.ЧастичнаяВыгрузка; 
		ПакетыДляВыгрузки = ПодготовитьПакетыДляЗагрузкиВУстройствоРаспознавания(ПараметрыОперации.ТаблицаТоваров, РазмерПакетаПоУмолчанию(), ПараметрыПодключения.РевизияИнтерфейса);
		ДанныеОперации = ПараметрыОперацииРаспознавателя();
		ДанныеОперации.ПакетыXML = ПакетыДляВыгрузки;
		ДанныеОперации.ПолнаяВыгрузка = ПолнаяВыгрузка;
		Возврат ДанныеОперации;
		
	КонецЕсли      
	
КонецФункции

// Обработать данные операции после выполнения команды.
// 
// Параметры:
//  ПараметрыПодключения - Структура - Параметры подключения.
//  Команда - Строка - Выполняемая команда.
//  РезультатВыполнения - Структура - результат выполнения операции.
//  ДанныеОперации - Структура - Параметры операции.
// 
Процедура ОбработатьДанныеОперации(ПараметрыПодключения, Команда, РезультатВыполнения, ДанныеОперации) Экспорт
	
	Если Команда = "Recognize" Тогда
		
		Если Не ПустаяСтрока(РезультатВыполнения.РаспознанныеТовары) Тогда
			РезультатВыполнения.Результат = Истина;
			МассивДанных = РаспознанныеТовары(РезультатВыполнения.РаспознанныеТовары);
		Иначе
			РезультатВыполнения.Результат = Ложь;
			РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Нет распознанных товаров.'");
			МассивДанных = Новый Массив();
		КонецЕсли;
		РезультатВыполнения.Вставить("РаспознанныеТовары", МассивДанных);
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции   

// Заполнить структуру операции
// 
// Возвращаемое значение:
//  Структура - Параметры операции весы:
// * Результат - Булево.
// * ПакетыXML - Массив из ЧтениеXML.
// * ПолнаяВыгрузка - Булево.
// * ТекстОшибки - Строка.
Функция ПараметрыОперацииРаспознавателя()
	
	ПараметрыОперации = Новый Структура();
	ПараметрыОперации.Вставить("Результат", Истина);
	ПараметрыОперации.Вставить("ПакетыXML");
	ПараметрыОперации.Вставить("ПолнаяВыгрузка");
	ПараметрыОперации.Вставить("ТекстОшибки");
	Возврат ПараметрыОперации;
	
КонецФункции 

// Размер пакета в элементах передаваемой информации в драйвер.
//
// Возвращаемое значение:
//  Число
//
Функция РазмерПакетаПоУмолчанию()
	
	РазмерПакета = 10;
	Возврат РазмерПакета;
	
КонецФункции

// Сформировать таблицу товаров в XML структуре для весов с печатью этикеток.
// 
// Параметры:
//  ДанныеЗагрузки - Массив - Данные загрузки.           
//  РевизияИнтерфейса - Число - Ревизия интерфейса.
// 
// Возвращаемое значение:
//  ЗаписьXML - Сформировать таблицу товаров весы с печатью этикеток
Функция СформироватьТаблицуТоваровДляРаспознавателя(ДанныеЗагрузки, РевизияИнтерфейса = 0) 
	
	ЗаписьXML = Новый ЗаписьXML; 
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Table");
	Для Каждого Позиция Из ДанныеЗагрузки  Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("Record");   
		
		ВремНаименование = ?(Позиция.Свойство("Наименование"), Позиция.Наименование, ВремНаименование);
		Если Позиция.Свойство("НаименованиеПолное") И Не ПустаяСтрока(Позиция.НаименованиеПолное) Тогда
			ВремНаименование = Позиция.НаименованиеПолное;
		КонецЕсли;
		
		ЗаписьXML.ЗаписатьАтрибут("Code"         , XMLСтрока(Число(Позиция.Код)));
		ЗаписьXML.ЗаписатьАтрибут("Name"         , XMLСтрока(ВремНаименование));
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента();
		
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

// Сформировать XML пакеты для загрузки в весы с печатью этикеток.   
// 
// Параметры:
//  ТаблицаВыгрузки - Массив - Данные для выгрузки.   
//  РазмерПакета - Число - Размер пакета.
//  РевизияИнтерфейса - Число - Ревизия интерфейса.
//
// Возвращаемое значение:
//  Массив из см. ОборудованиеВесовоеОборудование.СформироватьТаблицуТоваровВесыСПечатьюЭтикеток
//
Функция ПодготовитьПакетыДляЗагрузкиВУстройствоРаспознавания(ТаблицаВыгрузки, РазмерПакета, РевизияИнтерфейса = 0) 
	
	ПакетыДляВыгрузки = Новый Массив();
	МассивТоваров = Новый Массив;
	
	ЗаписьВПакете    = 0;
	ЗаписейВыгружено = 0;
	ЗаписейВсего     = ТаблицаВыгрузки.Количество();
	
	Для Каждого Позиция Из ТаблицаВыгрузки  Цикл
		
		Если ЗаписьВПакете = 0 Тогда
		    МассивТоваров.Очистить();
		КонецЕсли;
		МассивТоваров.Добавить(Позиция);
		ЗаписейВыгружено  = ЗаписейВыгружено + 1;
		ЗаписьВПакете = ЗаписьВПакете + 1;
		
		Если (ЗаписьВПакете = РазмерПакета) ИЛИ (ЗаписейВыгружено = ЗаписейВсего) Тогда  
			ДанныеДляВыгрузки = СформироватьТаблицуТоваровДляРаспознавателя(МассивТоваров, РевизияИнтерфейса);
			ПакетыДляВыгрузки.Добавить(ДанныеДляВыгрузки);
			ЗаписьВПакете = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПакетыДляВыгрузки;
	
КонецФункции

// Получить таблицу товаров из XML структуры для ТСД.
// 
// Параметры:
//  ДанныеЗагрузки - Строка - Данные загрузки
//  АлкогольнаяПродукция - Булево - Алкогольная продукция
// 
// Возвращаемое значение:
//  Массив - Товары ТСД
Функция РаспознанныеТовары(ДанныеЗагрузки) 
	
	Результат = Новый Массив();
	
	Если НЕ ПустаяСтрока(ДанныеЗагрузки) Тогда
		
		ЧтениеXML = Новый ЧтениеXML; 
		ЧтениеXML.УстановитьСтроку(ДанныеЗагрузки);
		ЧтениеXML.ПерейтиКСодержимому();
		
		Если ЧтениеXML.Имя = "Table" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
			Пока ЧтениеXML.Прочитать() Цикл  
				Если ЧтениеXML.Имя = "Record" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
					ПозицияДанных = Новый Структура();
					
					Код = ЧтениеXML.ЗначениеАтрибута("Code");
					Вероятность = ЧтениеXML.ЗначениеАтрибута("RecognizePercent");
					ПозицияДанных.Вставить("Код", Число(Код));
					ПозицияДанных.Вставить("Вероятность", ?(Вероятность<>Неопределено, Число(Вероятность), Неопределено));
					Результат.Добавить(ПозицияДанных);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти