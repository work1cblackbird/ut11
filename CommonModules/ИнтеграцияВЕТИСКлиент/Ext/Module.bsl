#Область ПрограммныйИнтерфейс

// Выполняет отправку подготовленных сообщений, загрузку новых документов, обработку ответов из ВЕТИС.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - источник команды выполнения обмена
//   ХозяйствующиеСубъекты - Неопределено, Массив Из СправочникСсылка.ХозяйствующиеСубъектыВЕТИС, СправочникСсылка.ХозяйствующиеСубъектыВЕТИС - Хозяйствующие субъекты, по которым необходимо выполнить обмен.
//   ОповещениеПриЗавершении - ОписаниеОповещения - Оповещение при завершении операции.
//
Процедура ВыполнитьОбмен(Форма, ХозяйствующиеСубъекты = Неопределено, ОповещениеПриЗавершении = Неопределено) Экспорт
	
	ОчиститьСообщения();
	
	РезультатОбмена = ИнтеграцияВЕТИСВызовСервера.ВыполнитьОбмен(
		ХозяйствующиеСубъекты,
		Форма.УникальныйИдентификатор);
	
	ОбработатьРезультатОбмена(РезультатОбмена, Форма,, ОповещениеПриЗавершении);
	
КонецПроцедуры

Процедура ПродолжитьВыполнениеОбмена(Форма, Контекст = Неопределено, ОповещениеПриЗавершении = Неопределено, ВыводитьОкноОжидания = Истина) Экспорт
	
	РезультатОбмена = ИнтеграцияВЕТИСВызовСервера.ПродолжитьВыполнениеОбмена(Форма.АдресРезультатаОбменаВоВременномХранилище);
	
	ОбработатьРезультатОбмена(РезультатОбмена, Форма, Контекст, ОповещениеПриЗавершении, ВыводитьОкноОжидания);
	
КонецПроцедуры

Процедура ОбработатьРезультатОбмена(РезультатОбмена, Форма, Контекст = Неопределено, ОповещениеПриЗавершении = Неопределено, ВыводитьОкноОжидания = Истина) Экспорт
	
	Если РезультатОбмена.ИзвлекатьДанныеЛогаЗапросов Тогда
		ИнтеграцияВЕТИСВызовСервера.ИзвлечьЛогЗапросовИзРезультатаОбмена(РезультатОбмена);
	КонецЕсли;
	
	Если РезультатОбмена.ДлительнаяОперация <> Неопределено Тогда
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
		ПараметрыОжидания.ТекстСообщения             = НСтр("ru='Выполняется обмен с ВетИС'");
		ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
		ПараметрыОжидания.ВыводитьОкноОжидания       = ВыводитьОкноОжидания;
		ПараметрыОжидания.ВыводитьСообщения          = Истина;
		
		Если РезультатОбмена.Ожидать <> Неопределено Тогда
			ПараметрыОжидания.Интервал = РезультатОбмена.Ожидать;
		КонецЕсли;
		
		ПараметрыЗавершенияДлительнойОперации = ПараметрыЗавершенияДлительнойОперации();
		ПараметрыЗавершенияДлительнойОперации.Форма                   = Форма;
		ПараметрыЗавершенияДлительнойОперации.Контекст                = Контекст;
		ПараметрыЗавершенияДлительнойОперации.ОповещениеПриЗавершении = ОповещениеПриЗавершении;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(
			РезультатОбмена.ДлительнаяОперация,
			Новый ОписаниеОповещения("ПослеЗавершенияДлительнойОперации", ИнтеграцияВЕТИССлужебныйКлиент, ПараметрыЗавершенияДлительнойОперации),
			ПараметрыОжидания);
		
	Иначе
		
		Если РезультатОбмена.Ожидать <> Неопределено Тогда
			
			Форма.АдресРезультатаОбменаВоВременномХранилище = РезультатОбмена.АдресВоВременномХранилище;
			Форма.ПодключитьОбработчикОжидания("Подключаемый_ВыполнитьОбменОбработкаОжидания", РезультатОбмена.Ожидать, Истина);
			
		Иначе
			
			ПараметрыЗавершенияОбмена = ПараметрыЗавершенияОбмена();
			ПараметрыЗавершенияОбмена.Контекст                = Контекст;
			ПараметрыЗавершенияОбмена.ОповещениеПриЗавершении = ОповещениеПриЗавершении;
			
			ИнтеграцияВЕТИССлужебныйКлиент.ПослеЗавершенияОбмена(
				РезультатОбмена.Изменения,
				ПараметрыЗавершенияОбмена);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#Область РаботаВФормахДокументов

// Формирует сообщение для передачи в ВетИС, согласно указанной операции.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма объекта документа ВетИС к передаче
//  ДальнейшееДействие - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюВЕТИС - выполняемая операция обмена.
//
Процедура ПодготовитьКПередаче(Форма, ПараметрыПередачи) Экспорт
	
	ОчиститьСообщения();
	
	РезультатОбмена = ИнтеграцияВЕТИСВызовСервера.ПодготовитьКПередаче(
		Форма.Объект.Ссылка,
		ПараметрыПередачи,
		Форма.УникальныйИдентификатор);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Контекст",                Форма.Объект.Ссылка);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", Неопределено);
	ДополнительныеПараметры.Вставить("Форма",                   Форма);
	
	ИнтеграцияВЕТИССлужебныйКлиент.ПослеЗавершенияОбмена(
		РезультатОбмена.Изменения,
		ДополнительныеПараметры);
	
	Если РезультатОбмена.Ожидать <> Неопределено Тогда
		
		Форма.АдресРезультатаОбменаВоВременномХранилище = РезультатОбмена.АдресВоВременномХранилище;
		Форма.ПодключитьОбработчикОжидания("Подключаемый_ВыполнитьОбменОбработкаОжидания", РезультатОбмена.Ожидать, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Отменяет последнюю операцию (например, если возникла ошибка передачи данных).
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ, по которому требуется отменить операцию.
//
Процедура ОтменитьПоследнююОперацию(ДокументСсылка) Экспорт
	
	Изменения = ИнтеграцияВЕТИСВызовСервера.ОтменитьПоследнююОперацию(ДокументСсылка);
	
	Если Изменения <> Неопределено Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Контекст",                ДокументСсылка);
		ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", Неопределено);
		
		ИнтеграцияВЕТИССлужебныйКлиент.ПослеЗавершенияОбмена(
			Изменения,
			ДополнительныеПараметры);
		
	Иначе
		
		ИнтеграцияВЕТИСВызовСервера.ВосстановитьСтатусДокументаПоДаннымПротоколаОбмена(ДокументСсылка);
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Операция отмены не может быть выполнена для документа %1 по причине нарушения внутренней структуры хранения данных.
				           |Выполнена операция восстановления статуса по данным протокола обмена.'"),
				ДокументСсылка));
		
	КонецЕсли;
	
КонецПроцедуры

// Удаляет неотправленную операцию из очереди передачи данных в ВетИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ, по которому требуется отменить передачу данных.
//
Процедура ОтменитьПередачу(ДокументСсылка) Экспорт
	
	Изменения = ИнтеграцияВЕТИСВызовСервера.ОтменитьПередачу(ДокументСсылка);
	
	Если Изменения <> Неопределено Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Контекст",                ДокументСсылка);
		ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", Неопределено);
		
		ИнтеграцияВЕТИССлужебныйКлиент.ПослеЗавершенияОбмена(
			Изменения,
			ДополнительныеПараметры);
		
	Иначе
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Операция отмены не может быть выполнена для документа %1 по причине нарушения внутренней структуры хранения данных.
				           |Выполнена операция восстановления статуса по данным протокола обмена.'"),
				ДокументСсылка));
		
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает нажатие на гиперссылку в формах.
//
// Параметры:
//  НавигационнаяСсылкаФорматированнойСтроки - Строка	 - навигационная ссылка на объект.
//  СтандартнаяОбработка					 - Булево	 - признак стандартной обработки.
//  ОбъектФормы								 - ДанныеФормыСтруктура	 - данные формы, 
//		которые содержат ссылки на грузополучателя и грузоотправителя.
//
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка, ОбъектФормы) Экспорт
	
	Если СтрНачинаетсяС(НавигационнаяСсылкаФорматированнойСтроки, "ОткрытьПредприятияХозяйствующегоСубъекта") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		НавигационнаяСсылкаМассив = СтрРазделить(НавигационнаяСсылкаФорматированнойСтроки, "_");
		ПрефиксРеквизита = ?(НавигационнаяСсылкаМассив.ВГраница() > 0, НавигационнаяСсылкаМассив[1], "");
		
		ПараметрыФормыХозяйствующегоСубъекта = Новый Структура(
			"Ключ, ДополнительныеПараметры", 
			ОбъектФормы[ПрефиксРеквизита + "ХозяйствующийСубъект"], 
			Новый Структура);
			
		ПараметрыФормыХозяйствующегоСубъекта.ДополнительныеПараметры.Вставить(
			"ИмяЭлементаПозиционирования", 
			"СтраницаПредприятия");
		
		ОткрытьФорму(
			"Справочник.ХозяйствующиеСубъектыВЕТИС.ФормаОбъекта",
			ПараметрыФормыХозяйствующегоСубъекта,
			ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует параметры для подбора элементов на основании параметров указанных для элемента формы.
// Используется для подбора в формах выбора с такими же параметрами выбора, как и при выборе.
//
// Параметры:
//  ЭлементФормы - ПолеВвода - Элемент формы в котором указаны параметры подбора.
//  Форма		 - ФормаКлиентскогоПриложения - Форма на которой расположен элемент. Используется для получения параметров.
// 
// Возвращаемое значение:
//  Структура - параметры подбора.
//
Функция ПараметрыПодбора(ЭлементФормы, Форма) Экспорт

	ВложенныеПараметры = Новый Соответствие;
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыПодбора.Вставить("МножественныйВыбор", Истина);
	
	Для каждого ЭлементКоллекции Из ЭлементФормы.ПараметрыВыбора Цикл
		ИмяПараметра = СтрРазделить(ЭлементКоллекции.Имя, ".");
		Если ИмяПараметра.Количество() > 1 Тогда
			ВложенныйПараметр = ВложенныеПараметры.Получить(ИмяПараметра[0]);
			Если ВложенныйПараметр = Неопределено Тогда
				ВложенныйПараметр = Новый Структура;
			КонецЕсли; 
			ВложенныйПараметр.Вставить(ИмяПараметра[1], ЭлементКоллекции.Значение);
			ВложенныеПараметры.Вставить(ИмяПараметра[0], ВложенныйПараметр);
		Иначе
			ПараметрыПодбора.Вставить(ИмяПараметра[0], ЭлементКоллекции.Значение);
		КонецЕсли; 
	КонецЦикла; 
	
	Для каждого ЭлементКоллекции Из ЭлементФормы.СвязиПараметровВыбора Цикл
		ЗначениеПараметра = СтрРазделить(ЭлементКоллекции.ПутьКДанным, ".");
		Если ЗначениеПараметра.Количество() > 1 Тогда
			ЗначениеПараметра = Форма[ЗначениеПараметра[0]][ЗначениеПараметра[1]];
		Иначе
			ЗначениеПараметра = Форма[ЗначениеПараметра[0]];
		КонецЕсли;		
		ИмяПараметра = СтрРазделить(ЭлементКоллекции.Имя, ".");
		Если ИмяПараметра.Количество() > 1 Тогда
			ВложенныйПараметр = ВложенныеПараметры.Получить(ИмяПараметра[0]);
			Если ВложенныйПараметр = Неопределено Тогда
				ВложенныйПараметр = Новый Структура;
			КонецЕсли; 
			ВложенныйПараметр.Вставить(ИмяПараметра[1], ЗначениеПараметра);
			ВложенныеПараметры.Вставить(ИмяПараметра[0], ВложенныйПараметр);
		Иначе
			ПараметрыПодбора.Вставить(ИмяПараметра[0], ЗначениеПараметра);
		КонецЕсли; 
	КонецЦикла; 
	
	Для каждого ВложенныйПараметр Из ВложенныеПараметры Цикл
		ПараметрыПодбора.Вставить(ВложенныйПараметр.Ключ, ВложенныйПараметр.Значение);
	КонецЦикла; 
	
	Возврат ПараметрыПодбора;

КонецФункции

// Устанавливает для документа дальнейшие действия в значение "НеТребуется".
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ, по которому требуется отменить передачу данных.
//
Процедура ПодтвердитьКорректностьДокументаСозданногоЧерезWeb(ДокументСсылка) Экспорт
	
	Изменение = ИнтеграцияВЕТИСВызовСервера.ОтметитьДокументКакОбработанный(ДокументСсылка);
	
	Если Не Изменение.Свойство("Ссылка") Тогда
		Изменение.Вставить("Ссылка", ДокументСсылка);
	КонецЕсли;
	
	Оповестить(ИнтеграцияИСКлиентСервер.ИмяСобытияИзмененоСостояние(ИнтеграцияВЕТИСКлиентСервер.ИмяПодсистемы()), Изменение);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаВСпискахДокументов

// Обработчик команд по выполнению требуемого дальнейшего действия в динамических списках
//
// Параметры:
//  ДинамическийСписок - ДанныеФормыКоллекция - список в котором выполняется команда
//  ПараметрыПередачи  - См. ИнтеграцияИСКлиентСервер.ИнициализироватьПараметрыПередачиДанных
//  ПравоИзменения     - Булево - разрешено ли проведение данного вида документа из списка
Процедура ПодготовитьСообщенияКПередаче(ДинамическийСписок, ПараметрыПередачи, ПравоИзменения) Экспорт
	
	Если ПараметрыПередачи.ОчищатьСообщения Тогда
		ОчиститьСообщения();
	КонецЕсли;
	
	ДополнительныеПараметры = Неопределено;
	Если ТипЗнч(ПараметрыПередачи) = Тип("Структура") Тогда
		ДополнительныеПараметры = ПараметрыПередачи;
	КонецЕсли;
	
	Контекст = ИнтеграцияИСКлиент.СтруктураПодготовкиСообщенийКПередаче(
		ДинамическийСписок, ПараметрыПередачи.ДальнейшееДействие,
		Новый ОписаниеОповещения("ПодготовитьСообщенияКПередачеЗавершение", ЭтотОбъект, ДополнительныеПараметры));
	Если ТипЗнч(ПараметрыПередачи) = Тип("Структура") Тогда
		Контекст.ПараметрыПередачи = ПараметрыПередачи;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыПередачи) = Тип("Структура")
		И ПараметрыПередачи.ИменаКолонокДальнейшиеДействия <> Неопределено Тогда
		ИменаКолонокДальнейшиеДействия = ПараметрыПередачи.ИменаКолонокДальнейшиеДействия;
	Иначе
		ИменаКолонокДальнейшиеДействия = Новый Массив;
		ИменаКолонокДальнейшиеДействия.Добавить("ДальнейшееДействиеВЕТИС1");
		ИменаКолонокДальнейшиеДействия.Добавить("ДальнейшееДействиеВЕТИС2");
		ИменаКолонокДальнейшиеДействия.Добавить("ДальнейшееДействиеВЕТИС3");
	КонецЕсли;
	
	ИнтеграцияИСКлиент.ОпределитьДоступностьДействий(Контекст, ИменаКолонокДальнейшиеДействия);
	
	Контекст.ДействиеНедоступно   = Контекст.НепроведенныеДокументы.Количество() И Не ПравоИзменения;
	Контекст.ПричинаНедоступности = НСтр("ru='У Вас недостаточно прав для обработки непроведенных документов.'");
	
	ИнтеграцияИСКлиент.ПодготовитьСообщенияКПередаче(Контекст);
	
КонецПроцедуры

// Обработчик завершения процедуры ПодготовитьСообщенияКПередаче.
//
// Параметры:
//  Контекст - Структура - контекст выполнения обработчика:
//   * МассивДокументов       - Массив Из Документссылка - список ссылок на обрабатываемые документы,
//   * НепроведенныеДокументы - Массив Из Документссылка - документы, исключенные из обработки,
//   * ДинамическийСписок     - ДанныеФормыКоллекция - список в котором выполняется команда,
//   * ПараметрыПередачи      - Структура - (См. ИнтеграцияВЕТИСКлиентСервер.СтруктураПараметрыПередачи)
//  ДополнительныеПараметры - Неопределено - не используется
Процедура ПодготовитьСообщенияКПередачеЗавершение(Контекст, ДополнительныеПараметры = Неопределено) Экспорт
	
		Форма                   = Неопределено;
	УникальныйИдентификатор = Неопределено;
	
	Если ТипЗнч(Контекст) = Тип("Структура")
		И Контекст.Свойство("ДинамическийСписок")
		И ТипЗнч(Контекст.ДинамическийСписок) = Тип("ТаблицаФормы") Тогда
		Форма = ИнтеграцияИСКлиент.ПолучитьФормуПоЭлементуФормы(Контекст.ДинамическийСписок);
		Если Форма <> Неопределено Тогда
			УникальныйИдентификатор = Форма.УникальныйИдентификатор;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыПередачи = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(Контекст.ПараметрыПередачи);
	ПараметрыПередачи.Удалить("ОповещениеПриЗавершении");
	
	РезультатОбмена = ИнтеграцияВЕТИСВызовСервера.ПодготовитьКПередаче(
		Контекст.МассивДокументов,
		ПараметрыПередачи,
		УникальныйИдентификатор);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Контекст",                Контекст);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", Неопределено);
	
	Если РезультатОбмена.Ожидать <> Неопределено
		И Форма <> Неопределено Тогда
		
		Форма.АдресРезультатаОбменаВоВременномХранилище = РезультатОбмена.АдресВоВременномХранилище;
		Форма.ПодключитьОбработчикОжидания("Подключаемый_ВыполнитьОбменОбработкаОжидания", РезультатОбмена.Ожидать, Истина);
		
	Иначе
		
		Если ТипЗнч(Контекст.ПараметрыПередачи) = Тип("Структура")
			И Контекст.ПараметрыПередачи.Свойство("ОповещениеПриЗавершении") Тогда
			ДополнительныеПараметры.ОповещениеПриЗавершении = Контекст.ПараметрыПередачи.ОповещениеПриЗавершении;
		КонецЕсли;
		
	КонецЕсли;
	
	ИнтеграцияВЕТИССлужебныйКлиент.ПослеЗавершенияОбмена(
		РезультатОбмена.Изменения,
		ДополнительныеПараметры);
	
КонецПроцедуры

// Выполняет архивирование документов.
// 
// Параметры:
// 	Результат - КодВозвратаДиалога - Ответ на вопрос архивирования.
// 	ДополнительныеПараметры - Структура - Структура дополнительных параметров.
//
Процедура АрхивироватьДокументы(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	Изменения = ИнтеграцияВЕТИСВызовСервера.АрхивироватьДокументы(
		ДополнительныеПараметры.ДокументыКАрхивированию);
	
	Если Изменения <> Неопределено Тогда
		
		ИнтеграцияВЕТИССлужебныйКлиент.ПослеЗавершенияОбмена(
			Изменения, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет архивирование распоряжений к оформлению.
// 
// Параметры:
// 	Результат - КодВозвратаДиалога - Ответ на вопрос архивирования.
// 	ДополнительныеПараметры - Структура - Структура дополнительных параметров.
//
Процедура АрхивироватьРаспоряжения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	Изменения = ИнтеграцияВЕТИСВызовСервера.АрхивироватьРаспоряженияКОформлению(
		ДополнительныеПараметры.Распоряжения,
		ДополнительныеПараметры.ПустаяСсылка);
	
	Если Изменения <> Неопределено Тогда
		
		ИнтеграцияВЕТИССлужебныйКлиент.ПослеЗавершенияОбмена(
			Изменения, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОстаткиПродукцииВЕТИС

// Параметры формы подбора выбора записей журнала.
// 
// Параметры:
//  ХозяйствующийСубъект - СправочникСсылка.ХозяйствующиеСубъектыВЕТИС
//  Предприятие - СправочникСсылка.ПредприятияВЕТИС
//  ТекущиеДанные - Неопределено, ДанныеФормыСтруктура - текущие данные
// 
// Возвращаемое значение:
//  Структура - Параметры формы подбора выбора записей журнала:
// * РежимВыбора - Булево - 
// * ЗакрыватьПриВыборе - Булево - 
// * Отбор - Структура - :
// ** ХозяйствующийСубъект - СправочникСсылка.ХозяйствующиеСубъектыВЕТИС
// ** Предприятие - СправочникСсылка.ПредприятияВЕТИС
Функция ПараметрыФормыПодбораВыбораЗаписейЖурнала(ХозяйствующийСубъект, Предприятие, ТекущиеДанные = Неопределено) Экспорт
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ХозяйствующийСубъект", ХозяйствующийСубъект);
	СтруктураОтбора.Вставить("Предприятие", Предприятие);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	Если ТекущиеДанные <> Неопределено Тогда
		ОтборТекущиеДанные = Новый Структура;
		ОтборТекущиеДанные.Вставить("Номенклатура",   ТекущиеДанные.Номенклатура);
		ОтборТекущиеДанные.Вставить("Характеристика", ТекущиеДанные.Характеристика);
		ОтборТекущиеДанные.Вставить("Серия",          ТекущиеДанные.Серия);
		ОтборТекущиеДанные.Вставить("Продукция",      ТекущиеДанные.Продукция);
		ПараметрыФормы.Вставить("ТекущиеДанные", ОтборТекущиеДанные);
	Иначе
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
	
	Возврат ПараметрыФормы;
	
КонецФункции

// Это выбор записи журнала.
// 
// Параметры:
//  ВыбранноеЗначение - Произвольный
// 
// Возвращаемое значение:
//  Булево - Это выбор записи журнала
Функция ЭтоВыборЗаписиЖурнала(ВыбранноеЗначение) Экспорт
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура")
		И ВыбранноеЗначение.Свойство("Операция")
		И ВыбранноеЗначение.Операция = "ПодборВыборЗаписиСкладскогоЖурналаВЕТИС" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ПредставлениеПодсистемы() Экспорт
	
	Возврат НСтр("ru = 'ВетИС'");
	
КонецФункции

#Область ОтборПоОрганизацииВЕТИС

Процедура ОткрытьФормуВыбораОрганизацийВЕТИС(Форма, Префикс, Префиксы = Неопределено,
	ОповещениеПриЗавершении = Неопределено, ПрефиксыСписков = "", ВходящиеПараметры = Неопределено) Экспорт
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("ОрганизацииПредприятияВЕТИС", Форма.ОрганизацииВЕТИС);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма",                   Форма);
	ДополнительныеПараметры.Вставить("Префикс",                 Префикс);
	ДополнительныеПараметры.Вставить("Префиксы",                Префиксы);
	ДополнительныеПараметры.Вставить("ПрефиксыСписков",         ПрефиксыСписков);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	
	Если ВходящиеПараметры <> Неопределено Тогда
		Если ВходящиеПараметры.Свойство("РежимБезПредприятий") Тогда
			ПараметрыОткрытияФормы.Вставить("РежимБезПредприятий");
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьФорму(
		"Справочник.ХозяйствующиеСубъектыВЕТИС.Форма.ВыборХозяйствующихСубъектовИПредприятий",
		ПараметрыОткрытияФормы,
		Форма,,,,
		Новый ОписаниеОповещения("ПослеЗавершенияВыбораОрганизацийВЕТИС", ИнтеграцияВЕТИССлужебныйКлиент, ДополнительныеПараметры));
	
КонецПроцедуры

Процедура ОбработатьВыборОрганизацийВЕТИС(Форма, Результат, ПрименятьОтбор, Префикс, Префиксы = Неопределено, Знач ПрефиксыСписков = "") Экспорт
	
	ИнтеграцияВЕТИСКлиентСервер.НастроитьОтборПоОрганизацииВЕТИС(Форма, Результат, Префикс, Префиксы);
	Если ПрименятьОтбор Тогда
		ИнтеграцияВЕТИСКлиентСервер.ОрганизацияВЕТИСОтборПриИзменении(Форма, ПрефиксыСписков);
	КонецЕсли;
	
КонецПроцедуры

Функция ОтборОрганизацияВЕТИСПрефиксы() Экспорт
	
	Префиксы = Новый Массив;
	Префиксы.Добавить("Отбор");
	
	Возврат Префиксы;
	
КонецФункции

Функция ОрганизацииВЕТИСДляОбмена(Форма) Экспорт
	
	ОрганизацииВЕТИСДляОбмена = ИнтеграцияВЕТИСКлиентСервер.ДеревоОтбораОрганизацииВЕТИСВМассивСтруктур(Форма.ОрганизацииВЕТИС,,Ложь).ВыбранныеЗначения;
	
	Если ОрганизацииВЕТИСДляОбмена.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат ОрганизацииВЕТИСДляОбмена;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ОстаткиПродукцииВЕТИС

Функция РезультатВыбораЗаписиЖурнала(Суффикс = "") Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Операция", "ПодборВыборЗаписиСкладскогоЖурналаВЕТИС");
	Результат.Вставить("ЗаписьСкладскогоЖурнала", ПредопределенноеЗначение("Справочник.ЗаписиСкладскогоЖурналаВЕТИС.ПустаяСсылка"));
	Результат.Вставить("Продукция", ПредопределенноеЗначение("Справочник.ПродукцияВЕТИС.ПустаяСсылка"));
	Результат.Вставить("КоличествоВЕТИС", 0);
	Результат.Вставить("ЕдиницаИзмеренияВЕТИС", ПредопределенноеЗначение("Справочник.ЕдиницыИзмеренияВЕТИС.ПустаяСсылка"));
	Результат.Вставить("КоэффициентПересчета", 1); //из строки документа в строку остатка
	Результат.Вставить("Суффикс", Суффикс); //вычисление имени поля количество ВетИС
	Возврат Результат;
	
КонецФункции

#КонецОбласти
// Открывает форму сопоставления продукции с номенклатурой предприятия.
//
// Параметры:
//  ПродукцияВЕТИС - СправочникСсылка.ПродукцияВЕТИС - Сопоставляемая алкогольная продукция.
//  Владелец - ФормаКлиентскогоПриложения, Неопределено - Форма-владелец.
//
Процедура ОткрытьФормуСопоставленияПродукцииВЕТИС(ПродукцияВЕТИС, Владелец) Экспорт
	
	СтруктураОтбора = Новый Структура("Продукция", ПродукцияВЕТИС);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
	
	ОткрытьФорму("РегистрСведений.СоответствиеНоменклатурыВЕТИС.Форма.ФормаСписка", ПараметрыФормы, Владелец);
	
КонецПроцедуры

Процедура ОткрытьПротоколОбменаВЕТИС(Документ, Владелец = Неопределено, ДляДокументаОснования = Ложь) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Документ", Документ);
	ПараметрыФормы.Вставить("ДляДокументаОснования", ДляДокументаОснования);
	
	ОткрытьФорму(
		"Справочник.ВЕТИСПрисоединенныеФайлы.Форма.ФормаПротоколОбмена",
		ПараметрыФормы,
		Владелец,
		Новый УникальныйИдентификатор,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#Область РедактированиеДаты

Процедура ОткрытьФормуРедактированияПериода(Форма, ВходящийОбъект, Префикс, ПараметрыФормы, ОповещениеПриЗавершении = Неопределено) Экспорт
	
	СоответствиеРеквизитов = ИнтеграцияВЕТИСКлиентСервер.РеквизитыПериода(Префикс);
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("НачалоПериода",             ВходящийОбъект[СоответствиеРеквизитов.НачалоПериода]);
	ПараметрыОткрытияФормы.Вставить("КонецПериода",              ВходящийОбъект[СоответствиеРеквизитов.КонецПериода]);
	ПараметрыОткрытияФормы.Вставить("ПредставлениеПериода",      ВходящийОбъект[СоответствиеРеквизитов.ПредставлениеПериода]);
	ПараметрыОткрытияФормы.Вставить("ТочностьЗаполненияПериода", ВходящийОбъект[СоответствиеРеквизитов.ТочностьЗаполненияПериода]);
	ПараметрыОткрытияФормы.Вставить("ТолькоПросмотр",            ПараметрыФормы.ТолькоПросмотр);
	ПараметрыОткрытияФормы.Вставить("Заголовок",                 ПараметрыФормы.Заголовок);
	ПараметрыОткрытияФормы.Вставить("ПараметрыРедактирования",   ПараметрыФормы.ПараметрыРедактирования);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВходящийОбъект",          ВходящийОбъект);
	ДополнительныеПараметры.Вставить("СоответствиеРеквизитов",  СоответствиеРеквизитов);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОбработатьРедактированиеПериода",ИнтеграцияВЕТИССлужебныйКлиент, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.РедактированиеПериодаВЕТИС",
		ПараметрыОткрытияФормы,
		Форма,
		Форма.УникальныйИдентификатор,,,
		ОбработчикОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

Процедура ОткрытьФормуРедактированияОбщую(Форма, ВходящийОбъект, ОповещениеПриЗавершении, ТолькоПросмотр, СписокДоступнойТочности, Префикс)
	
	Если Не ЗначениеЗаполнено(ВходящийОбъект.Продукция) Тогда
		ОчиститьСообщения();
		ТекстСообщения = НСтр("ru = 'Сначала укажите продукцию.'");
		
		Если ТипЗнч(ВходящийОбъект) = Тип("ДанныеФормыСтруктура") Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Продукция", "Объект");
		иначе
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", ВходящийОбъект.НомерСтроки, "Продукция");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, Форма.Объект.Ссылка, Поле, "Объект");
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	// Установка параметров формы.
	ПараметрыФормы = ИнтеграцияВЕТИСКлиентСервер.ПараметрыФормыРедактированияПериода();
	ПараметрыФормы.ТолькоПросмотр = ТолькоПросмотр;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ВходящийОбъект, "СкоропортящаясяПродукция") Тогда
		ПараметрыФормы.ПараметрыРедактирования.СкоропортящаясяПродукция = ВходящийОбъект.СкоропортящаясяПродукция;
	КонецЕсли;
	
	// Определение списка точности, доступной при выборе даты (час, день, месяц...).
	Если ПараметрыФормы.ПараметрыРедактирования.СкоропортящаясяПродукция Тогда
		
		СписокДоступнойТочности = Новый СписокЗначений;
		СписокДоступнойТочности.Добавить(ПредопределенноеЗначение("Перечисление.ТочностьЗаполненияПериодаВЕТИС.ДДММГГГГЧЧ"), НСтр("ru = 'часа'"));
		
		ПараметрыФормы.ПараметрыРедактирования.СпособЗаполненияПериода.Добавить(
			ПредопределенноеЗначение("Перечисление.СпособыЗаполненияПериодаВЕТИС.Дата"),НСтр("ru = 'дату'"));
			
		ПараметрыФормы.ПараметрыРедактирования.СпособЗаполненияПериода.Добавить(
					ПредопределенноеЗначение("Перечисление.СпособыЗаполненияПериодаВЕТИС.Период"),НСтр("ru = 'интервал'"));
		
	Иначе
		
		Для каждого Строка Из СписокДоступнойТочности Цикл
			Если ИнтеграцияВЕТИСКлиентСервер.ТочностьЗаполненияБезДаты(Строка.Значение) Тогда
				ПараметрыФормы.ПараметрыРедактирования.СпособЗаполненияПериода.Добавить(
					ПредопределенноеЗначение("Перечисление.СпособыЗаполненияПериодаВЕТИС.Строка"),НСтр("ru = 'строка'"));
			Иначе
				ПараметрыФормы.ПараметрыРедактирования.СпособЗаполненияПериода.Добавить(
					ПредопределенноеЗначение("Перечисление.СпособыЗаполненияПериодаВЕТИС.Дата"),НСтр("ru = 'дату'"));
					
				ПараметрыФормы.ПараметрыРедактирования.СпособЗаполненияПериода.Добавить(
					ПредопределенноеЗначение("Перечисление.СпособыЗаполненияПериодаВЕТИС.Период"),НСтр("ru = 'интервал'"));
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "СтатусВЕТИС")
		И Найти(Форма.СтатусВЕТИС,"web") > 0
		И ТолькоПросмотр = Истина Тогда
		
		ПараметрыФормы.ПараметрыРедактирования.СпособЗаполненияПериода.Добавить(
			ПредопределенноеЗначение("Перечисление.СпособыЗаполненияПериодаВЕТИС.Строка"), НСтр("ru = 'строка'"));
		
	КонецЕсли;
	
	УникальныйСпособЗаполненияПериода = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		УникальныйСпособЗаполненияПериода,
		ПараметрыФормы.ПараметрыРедактирования.СпособЗаполненияПериода.ВыгрузитьЗначения(),
		Истина);
		
	// Определение способов выбора даты (период, интервал...).
	Список = Новый СписокЗначений;
	Список.ЗагрузитьЗначения(УникальныйСпособЗаполненияПериода);
	Список.СортироватьПоЗначению();
	
	ПараметрыФормы.ПараметрыРедактирования.СпособЗаполненияПериода.ЗагрузитьЗначения(Список.ВыгрузитьЗначения());
	ПараметрыФормы.ПараметрыРедактирования.ТочностьЗаполненияПериода = СписокДоступнойТочности;
	
	ТипЖивыеЖивотные = (ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ВходящийОбъект, "ТипЖивыеЖивотные")
		И ВходящийОбъект.ТипЖивыеЖивотные)
		ИЛИ (ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ТипЖивыеЖивотные")
		И Форма.ТипЖивыеЖивотные);
		
	Если Префикс = "СрокГодности" Тогда
		ПараметрыФормы.Заголовок = НСтр("ru = 'Срок годности'");
	Иначе
		ПараметрыФормы.Заголовок = ИнтеграцияВЕТИСКлиентСервер.ПредставлениеПоляДатаПроизводства(ТипЖивыеЖивотные);
	КонецЕсли;
	
	ОткрытьФормуРедактированияПериода(Форма, ВходящийОбъект, Префикс, ПараметрыФормы, ОповещениеПриЗавершении);
	
КонецПроцедуры

Процедура ОткрытьФормуРедактированияСрокаГодности(Форма, ВходящийОбъект, ОповещениеПриЗавершении = Неопределено,
		ТолькоПросмотр = Ложь, СписокДоступнойТочности = Неопределено) Экспорт 
	
	Префикс = "СрокГодности";
	ОткрытьФормуРедактированияОбщую(Форма, ВходящийОбъект, ОповещениеПриЗавершении, ТолькоПросмотр, СписокДоступнойТочности, Префикс);
	
КонецПроцедуры

Процедура ОткрытьФормуРедактированияДатыПоступления(Форма, ВходящийОбъект, ОповещениеПриЗавершении = Неопределено,
	ТолькоПросмотр = Ложь) Экспорт 
	
	Префикс = "ДатаПоступленияГруза";
	ПараметрыФормы = ИнтеграцияВЕТИСКлиентСервер.ПараметрыФормыРедактированияПериода();
	ПараметрыФормы.Заголовок = НСтр("ru = 'Дата поступления'");
	ПараметрыФормы.ТолькоПросмотр = ТолькоПросмотр;
	ПараметрыФормы.ПараметрыРедактирования.СпособЗаполненияПериода = Новый СписокЗначений;
	ПараметрыФормы.ПараметрыРедактирования.СпособЗаполненияПериода.Добавить(
		ПредопределенноеЗначение("Перечисление.СпособыЗаполненияПериодаВЕТИС.Дата"),НСтр("ru = 'дату'"));
		
	ПараметрыФормы.ПараметрыРедактирования.СпособЗаполненияПериода.Добавить(
		ПредопределенноеЗначение("Перечисление.СпособыЗаполненияПериодаВЕТИС.Период"),НСтр("ru = 'интервал'"));
		
	ПараметрыФормы.ПараметрыРедактирования.ТочностьЗаполненияПериода = Новый СписокЗначений;
	ПараметрыФормы.ПараметрыРедактирования.ТочностьЗаполненияПериода.Добавить(
		ПредопределенноеЗначение("Перечисление.ТочностьЗаполненияПериодаВЕТИС.ДДММГГГГ"));
	
	ОткрытьФормуРедактированияПериода(Форма, ВходящийОбъект, Префикс, ПараметрыФормы, ОповещениеПриЗавершении);
	
КонецПроцедуры

Процедура ОткрытьФормуРедактированияДатыПроизводства(Форма, ВходящийОбъект, ОповещениеПриЗавершении = Неопределено,
	ТолькоПросмотр = Ложь, СписокДоступнойТочности = Неопределено) Экспорт 
	
	Префикс = "ДатаПроизводства";
	ОткрытьФормуРедактированияОбщую(Форма, ВходящийОбъект, ОповещениеПриЗавершении, ТолькоПросмотр, СписокДоступнойТочности, Префикс);
	
КонецПроцедуры

#КонецОбласти

#Область РедактированиеУпаковокШтрихкодовВЕТИС

Процедура ОткрытьФормуРедактированияУпаковокШтрихкодовПоСтроке(Форма, Объект, ТекущиеДанные,
	ОписаниеОповещения, ТолькоПросмотр = Ложь) Экспорт
	
	ДанныеУпаковокШтрихкодов = ПолучитьДанныеУпаковокШтрихкодовПоСтроке(Объект, ТекущиеДанные.ИдентификаторСтроки);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Продукция",             ТекущиеДанные.Продукция);
	ПараметрыФормы.Вставить("КоличествоВЕТИС",       ТекущиеДанные.КоличествоВЕТИС);
	ПараметрыФормы.Вставить("ЕдиницаИзмеренияВЕТИС", ТекущиеДанные.ЕдиницаИзмеренияВЕТИС);
	
	ПараметрыФормы.Вставить("Упаковки",              ДанныеУпаковокШтрихкодов.Упаковки);
	ПараметрыФормы.Вставить("ШтрихкодыУпаковок",     ДанныеУпаковокШтрихкодов.ШтрихкодыУпаковок);
	ПараметрыФормы.Вставить("ТолькоПросмотр",        Макс(Форма.ТолькоПросмотр, ТолькоПросмотр));
	
	ОткрытьФорму("ОбщаяФорма.УпаковкиШтрихкодыВЕТИС", 
			ПараметрыФормы, 
			Форма,,,, 
			ОписаниеОповещения, 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
КонецПроцедуры

Функция ПолучитьДанныеУпаковокШтрихкодовПоСтроке(Объект, ИдентификаторСтроки) Экспорт
	
	Результат = Новый Структура("Упаковки, ШтрихкодыУпаковок", Новый Массив, Новый Массив);
	
	НайденныеСтрокиУпаковки = 
		Объект.УпаковкиВЕТИС.НайтиСтроки(Новый Структура("ИдентификаторСтрокиТовары", ИдентификаторСтроки));
		
	Для каждого СтрокаУпаковки Из НайденныеСтрокиУпаковки Цикл
		
		ДанныеСтрокиУпаковки = ИнтеграцияВЕТИСКлиентСервер.СтруктураДанныеУпаковкиВЕТИС();
		ЗаполнитьЗначенияСвойств(ДанныеСтрокиУпаковки, СтрокаУпаковки);
		Результат.Упаковки.Добавить(ДанныеСтрокиУпаковки);
		
		НайденныеСтрокиШтрихкоды = 
			Объект.ШтрихкодыУпаковок.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаУпаковки.ИдентификаторСтроки));
			
		Для каждого СтрокаШтрихкода Из НайденныеСтрокиШтрихкоды Цикл
			ДанныеСтрокиШтрихкод = ИнтеграцияВЕТИСКлиентСервер.СтруктураДанныхШтрихкодыУпаковок();
			ЗаполнитьЗначенияСвойств(ДанныеСтрокиШтрихкод, СтрокаШтрихкода);
			Результат.ШтрихкодыУпаковок.Добавить(ДанныеСтрокиШтрихкод);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РедактированиеМаршрута

Функция НастройкиОтображенияФормыМаршрута() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("АдресВоВременномХранилище", "");
	Параметры.Вставить("АдресВоВременномХранилищеТовары", "");
	Параметры.Вставить("АдресВоВременномХранилищеРегионализация", "");
	Параметры.Вставить("РежимРаботыФормы", Новый Структура);
	Параметры.Вставить("ХозяйствующийСубъект", ПредопределенноеЗначение("Справочник.ХозяйствующиеСубъектыВЕТИС.ПустаяСсылка"));
	Параметры.Вставить("ТолькоПросмотр", Ложь);
	Параметры.Вставить("УказываетсяРегионализация", Ложь);
	Параметры.Вставить("УказываетсяТранспортноеСредствоПредприятия", Ложь);
	Параметры.Вставить("ИмяПоляВидПродукции", "ВидПродукцииВЕТИС");
	Параметры.Вставить("ОбязательностьНомераТранспортногоСредства", Неопределено);
	Параметры.Вставить("ЭтоМаршрутВозврата", Ложь);
	Параметры.Вставить("БлокироватьПервуюСтроку", Ложь);
	Параметры.Вставить("ВладелецСсылка", Неопределено);
	Возврат Параметры;
	
КонецФункции

#КонецОбласти

#Область Прочее

// Формирует текст ошибки и показывает пользователю предупреждение на основании данных
// предоставленных подсистемой "Проверка контрагентов" БСП.
// Параметры:
//  ОписаниеОшибки  - Строка - описание ошибки, предоставленное подсистемой "Проверка контрагентов" БСП.
//
Процедура ПоказатьПользователюОшибкуПолученияРеквизитовКонтрагентаПоИНН(ОписаниеОшибки) Экспорт
	
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		ТекстПредупреждения = НСтр("ru='При получении данных ЕГРЮЛ\ЕГРИП произошла неизвестная ошибка.'");
	ИначеЕсли ОписаниеОшибки = "НеУказаныПараметрыАутентификации" Тогда
		ТекстПредупреждения = НСтр("ru='Не указаны параметры аутентификации Интернет-поддержки пользователей.'");
	ИначеЕсли ОписаниеОшибки = "НеУказанПароль" Тогда
		ТекстПредупреждения = НСтр("ru='Не указан пароль к Интернет-поддержке пользователей.'");
	ИначеЕсли ОписаниеОшибки = "Сервис1СКонтрагентНеПодключен" Тогда
		Возврат;
	ИначеЕсли СтрЧислоВхождений(ВРЕГ(ОписаниеОшибки),"НЕ УДАЛОСЬ НАЙТИ ДАННЫЕ ДЛЯ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ") > 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Выполнен запрос к базе ЕГРЮЛ\ЕГРИП.'") + " " + ОписаниеОшибки;
	Иначе
		ТекстПредупреждения = ОписаниеОшибки;
	КонецЕсли;
	
	ПоказатьПредупреждение(, ТекстПредупреждения);
	
КонецПроцедуры

Функция ПараметрыЗавершенияДлительнойОперации() Экспорт
	
	ПараметрыЗавершения = Новый Структура;
	ПараметрыЗавершения.Вставить("Форма");
	ПараметрыЗавершения.Вставить("Контекст");
	ПараметрыЗавершения.Вставить("ОповещениеПриЗавершении");
	
	Возврат ПараметрыЗавершения;
	
КонецФункции

Функция ПараметрыЗавершенияОбмена() Экспорт
	
	ПараметрыЗавершения = Новый Структура;
	ПараметрыЗавершения.Вставить("Контекст");
	ПараметрыЗавершения.Вставить("ОповещениеПриЗавершении");
	
	Возврат ПараметрыЗавершения;
	
КонецФункции

Процедура ПронумероватьТаблицу(Форма, ИмяТЧ) Экспорт
	
	НомерСтроки = 1;
	Для каждого Строка Из Форма[ИмяТЧ] Цикл
		Строка.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
КонецПроцедуры

Функция ПроверитьЗаполнениеТаблицы(Форма, ИмяТЧ, СтруктураПроверяемыхПолей) Экспорт
	
	ШаблонСообщения = НСтр("ru = 'Не заполнено поле ""%1"" в строке %2'");
	
	ЕстьОшибки = Ложь;
	Для каждого Строка Из Форма[ИмяТЧ] Цикл
		Для каждого КлючИЗначение Из СтруктураПроверяемыхПолей Цикл
			Если НЕ ЗначениеЗаполнено(Строка[КлючИЗначение.Ключ]) Тогда
				ПредставлениеПоля = ?(ЗначениеЗаполнено(КлючИЗначение.Значение),КлючИЗначение.Значение,КлючИЗначение.Ключ);
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ПредставлениеПоля, Строка.НомерСтроки);
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Строка.НомерСтроки, КлючИЗначение.Ключ);
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,Поле,,ЕстьОшибки);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат НЕ ЕстьОшибки;
	
КонецФункции

Процедура ПредупредитьОбОтсутствииДоступа(УточнениеГиперссылки = "") Экспорт
	
	Если ЗначениеЗаполнено(УточнениеГиперссылки) Тогда
		ПоказатьПредупреждение(, УточнениеГиперссылки);
	Иначе
		ПоказатьПредупреждение(, НСтр("ru='Действие недоступно текущему пользователю. Обратитесь к администратору.'"));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьКорректностьДанныхАдреса(ДанныеАдреса, ИмяЭлемента, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ДанныеАдреса.РегионGUID) Тогда
		
		ТекстСообщения = НСтр("ru = 'Регион не указан или заполнен некорректно. Необходимо выбирать значения из классификатора'");
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, ИмяЭлемента,, Отказ);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеАдреса.РайонПредставление)
		И Не ЗначениеЗаполнено(ДанныеАдреса.РайонGUID) Тогда
		
		ТекстСообщения = НСтр("ru = 'Район указан некорректно. Необходимо выбирать значения из классификатора'");
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, ИмяЭлемента,, Отказ);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеАдреса.НаселенныйПунктПредставление)
		И Не ЗначениеЗаполнено(ДанныеАдреса.НаселенныйПунктGUID) Тогда
		
		ТекстСообщения = НСтр("ru = 'Населенный пункт указан некорректно. Необходимо выбирать значения из классификатора'");
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, ИмяЭлемента,, Отказ);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеАдреса.УлицаПредставление)
		И Не ЗначениеЗаполнено(ДанныеАдреса.УлицаGUID) Тогда
		
		ТекстСообщения = НСтр("ru = 'Улица указана некорректно. Необходимо выбирать значения из классификатора'");
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, ИмяЭлемента,, Отказ);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ИСМП

// Дополняет отбор продукцией ВетИС сопоставленной с номенклатурой, характеристикой, серией,
//   а также хозяйствующим субъектом, связанным с организацией.
// 
// Параметры:
//   Отбор          - Структура - структура отбора открытия формы выбора идентификатора происхождения ВетИС
//   ИсточникДанных - Структура - данные прикладного объекта:
//    * Номенклатура - ОпределяемыйТип.Номенклатура - номенклатура,
//    * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика,
//    * Серия - ОпределяемыйТип.СерияНоменклатуры - серия,
//    * Организация - ОпределяемыйТип.ОрганизацияКонтрагентГосИС - организация,
//    * Производство - Булево - Операция маркировки производство (Ложь - импорт).
//
Процедура ДополнитьОтборПоПрикладнымРеквизитам(Отбор, ИсточникДанных) Экспорт
	
	Если ИсточникДанных.Производство Тогда
		Отбор.Вставить("Тип", ПредопределенноеЗначение("Перечисление.ТипыВетеринарныхДокументовВЕТИС.Производственный"));
	Иначе
		Отбор.Вставить("ГрузополучательПредприятие", ПредопределенноеЗначение("Справочник.ПредприятияВЕТИС.ПустаяСсылка"));
		Отбор.Вставить("Тип", ПредопределенноеЗначение("Перечисление.ТипыВетеринарныхДокументовВЕТИС.Транспортный"));
	КонецЕсли;
	
	Если ИсточникДанных.ЭтоКодМаркировкиСоСрокомГодности Тогда
		Отбор.Вставить("СкоропортящаясяПродукция", ИсточникДанных.СкоропортящаясяПродукция);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИсточникДанных.Номенклатура) Или ЗначениеЗаполнено(ИсточникДанных.Организация) Тогда
		ИнтеграцияВЕТИСВызовСервера.ДополнитьОтборПоПрикладнымРеквизитам(Отбор, ИсточникДанных);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбработкаНавигационнойСсылкиВФормеДокументаОснования(Форма, Объект,
			Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка, СобытиеОбработано = Ложь) Экспорт
	
	ИнтеграцияВЕТИСКлиентПереопределяемый.ОбработкаНавигационнойСсылкиВФормеДокументаОснования(
		Форма,
		Объект,
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка,
		СобытиеОбработано);
	
	Если СобытиеОбработано Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Контекст = Новый Структура;
	Контекст.Вставить("Форма",  Форма);
	Контекст.Вставить("Объект", Объект);
	Контекст.Вставить("ДокументОснование", Объект.Ссылка);
	Контекст.Вставить("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки);
	Контекст.Вставить("СобытиеОбработано", СобытиеОбработано);
	
	Если Форма.Модифицированность ИЛИ НЕ ЗначениеЗаполнено(Контекст.ДокументОснование) Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения(
			"ОбработкаНавигационнойСсылкиВФормеДокументаОснованияВЕТИСЗавершение",
			ЭтотОбъект,
			Контекст);
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Документ ""%1"" %2. Записать?'"),
			Контекст.ДокументОснование,
			?(НЕ ЗначениеЗаполнено(Контекст.ДокументОснование), НСтр("ru='не записан'"), НСтр("ru='был изменен'")));
		
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ВыполнитьКомандуГиперссылкиВФормеДокументаОснованияВЕТИС(
			Контекст.ДокументОснование,
			НавигационнаяСсылкаФорматированнойСтроки,
			Форма,
			СобытиеОбработано);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаНавигационнойСсылкиВФормеДокументаОснованияВЕТИСЗавершение(РезультатВопроса, Контекст) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Контекст.Объект.Проведен Тогда
		Если Контекст.Форма.ПроверитьЗаполнение() Тогда
			Контекст.Форма.Записать();
		КонецЕсли;
	Иначе
		Контекст.Форма.Записать();
	КонецЕсли;
	
	Если НЕ Контекст.Форма.Модифицированность И ЗначениеЗаполнено(Контекст.ДокументОснование) Тогда
		
		ВыполнитьКомандуГиперссылкиВФормеДокументаОснованияВЕТИС(
			Контекст.ДокументОснование,
			Контекст.НавигационнаяСсылкаФорматированнойСтроки,
			Контекст.Форма,
			Контекст.СобытиеОбработано);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьКомандуГиперссылкиВФормеДокументаОснованияВЕТИС(ДокументОснование, НавигационнаяСсылкаФорматированнойСтроки, Форма, СобытиеОбработано)
	
	ОписаниеКоманды   = ИнтеграцияИСКлиентСервер.ПреобразоватьИмяКомандыНавигационнойСсылкиВоВнутреннийФормат(
		НавигационнаяСсылкаФорматированнойСтроки);
	
	// Открытие протокола обмена.
	Если ИнтеграцияИСКлиентСервер.ЭтоКомандаНавигационнойСсылкиОткрытьПротоколОбмена(ОписаниеКоманды) Тогда
		
		ОткрытьПротоколОбменаВЕТИС(ДокументОснование, Форма, Истина);
		
		СобытиеОбработано = Истина;
		Возврат;
		
	КонецЕсли;
	
	// Создание документа.
	Если ИнтеграцияИСКлиентСервер.ЭтоКомандаНавигационнойСсылкиСоздатьОбъект(ОписаниеКоманды) Тогда
		
		ПолноеИмяДокументаВЕТИС = ИнтеграцияИСКлиентСервер.ИмяОбъектаДляОткрытияИзВнутреннегоФорматаКомандыНавигационнойСсылки(ОписаниеКоманды);
		
		Если ПолноеИмяДокументаВЕТИС = "Документ.ИсходящаяТранспортнаяОперацияВЕТИС" Тогда
			ИнтеграцияИСКлиент.ОткрытьФормуСозданияДокумента(ПолноеИмяДокументаВЕТИС, 
				Новый Структура("Основание, ДанныеАдресаМаршрут", ДокументОснование), Форма);
		Иначе
			ИнтеграцияИСКлиент.ОткрытьФормуСозданияДокумента(ПолноеИмяДокументаВЕТИС, ДокументОснование, Форма);
		КонецЕсли;
		
		СобытиеОбработано = Истина;
		Возврат;
		
	КонецЕсли;
	
	// Открытие документа.
	Если ИнтеграцияИСКлиентСервер.ЭтоКомандаНавигационнойСсылкиОткрытьОбъект(ОписаниеКоманды) Тогда
		
		ПолноеИмяДокументаВЕТИС = ИнтеграцияИСКлиентСервер.ИмяОбъектаДляОткрытияИзВнутреннегоФорматаКомандыНавигационнойСсылки(ОписаниеКоманды);
		ЧастиИмениОбъекта 	    = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолноеИмяДокументаВЕТИС, ".");
		ДокументыВЕТИС 	  		= ИнтеграцияВЕТИСВызовСервера.ДокументыВЕТИСПоДокументуОснованию(ДокументОснование);
		МассивДокументов  		= ДокументыВЕТИС[ЧастиИмениОбъекта[1]];
		
		Если МассивДокументов.Количество() = 1 Тогда
			ПоказатьЗначение(, МассивДокументов[0].Ссылка);
			СобытиеОбработано = Истина;
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	// Открытие произвольной навигационной ссылки.
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(НавигационнаяСсылкаФорматированнойСтроки);
	
	СобытиеОбработано = Истина;
	
КонецПроцедуры

#КонецОбласти